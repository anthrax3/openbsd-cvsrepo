head	1.3;
access;
symbols
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.2
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.1.1.2.0.28
	OPENBSD_5_3_BASE:1.1.1.2
	OPENBSD_5_2:1.1.1.2.0.26
	OPENBSD_5_2_BASE:1.1.1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.24
	OPENBSD_5_0:1.1.1.2.0.22
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.20
	OPENBSD_4_9_BASE:1.1.1.2
	OPENBSD_4_8:1.1.1.2.0.18
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.14
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.16
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.12
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.10
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.8
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.6
	OPENBSD_4_2_BASE:1.1.1.2
	OPENBSD_4_1:1.1.1.2.0.4
	OPENBSD_4_1_BASE:1.1.1.2
	OPENBSD_4_0:1.1.1.2.0.2
	OPENBSD_4_0_BASE:1.1.1.2
	HEIMDAL_0_7_2:1.1.1.2
	OPENBSD_3_9:1.1.1.1.0.20
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.18
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.16
	OPENBSD_3_7_BASE:1.1.1.1
	HEIMDAL_0_6_3:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.14
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.12
	OPENBSD_3_5_BASE:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.10
	OPENBSD_3_4_BASE:1.1.1.1
	HEIMDAL_0_6:1.1.1.1
	HEIMDAL_0_6RC1:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.8
	OPENBSD_3_3_BASE:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.6
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.4
	OPENBSD_3_1_BASE:1.1.1.1
	HEIMDAL_0_4e:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.2
	OPENBSD_3_0_BASE:1.1.1.1
	HEIMDAL_0_3f:1.1.1.1
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2014.04.22.10.01.20;	author reyk;	state dead;
branches;
next	1.2;

1.2
date	2013.06.17.18.57.40;	author robert;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.25.07.45.30;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.45.30;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2006.04.14.07.32.01;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.3
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/*
 * Copyright (c) 1997 - 2000 Kungliga Tekniska HÃ¶gskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "test_locl.h"
#include <gssapi/gssapi.h>
#include <gssapi/gssapi_krb5.h>
#include <gssapi/gssapi_spnego.h>
#include "gss_common.h"
RCSID("$Id: gssapi_server.c,v 1.2 2013/06/17 18:57:40 robert Exp $");

static int
process_it(int sock,
	   gss_ctx_id_t context_hdl,
	   gss_name_t client_name
	   )
{
    OM_uint32 maj_stat, min_stat;
    gss_buffer_desc real_input_token, real_output_token;
    gss_buffer_t input_token = &real_input_token,
	output_token = &real_output_token;
    gss_name_t server_name;
    int conf_flag;

    print_gss_name("User is", client_name);

    maj_stat = gss_inquire_context(&min_stat,
				   context_hdl,
				   NULL,
				   &server_name,
				   NULL,
				   NULL,
				   NULL,
				   NULL,
				   NULL);
    if (GSS_ERROR(maj_stat))
	gss_err (1, min_stat, "gss_inquire_context");

    print_gss_name("Server is", server_name);

    maj_stat = gss_release_name(&min_stat, &server_name);
    if (GSS_ERROR(maj_stat))
	gss_err (1, min_stat, "gss_release_name");

    /* gss_verify_mic */

    read_token (sock, input_token);
    read_token (sock, output_token);

    maj_stat = gss_verify_mic (&min_stat,
			       context_hdl,
			       input_token,
			       output_token,
			       NULL);
    if (GSS_ERROR(maj_stat))
	gss_err (1, min_stat, "gss_verify_mic");

    fprintf (stderr, "gss_verify_mic: %.*s\n", (int)input_token->length,
	    (char *)input_token->value);

    gss_release_buffer (&min_stat, input_token);
    gss_release_buffer (&min_stat, output_token);

    /* gss_unwrap */

    read_token (sock, input_token);

    maj_stat = gss_unwrap (&min_stat,
			   context_hdl,
			   input_token,
			   output_token,
			   &conf_flag,
			   NULL);
    if(GSS_ERROR(maj_stat))
	gss_err (1, min_stat, "gss_unwrap");

    fprintf (stderr, "gss_unwrap: %.*s %s\n", (int)output_token->length,
	    (char *)output_token->value,
	     conf_flag ? "CONF" : "INT");

    gss_release_buffer (&min_stat, input_token);
    gss_release_buffer (&min_stat, output_token);

    read_token (sock, input_token);

    maj_stat = gss_unwrap (&min_stat,
			   context_hdl,
			   input_token,
			   output_token,
			   &conf_flag,
			   NULL);
    if(GSS_ERROR(maj_stat))
	gss_err (1, min_stat, "gss_unwrap");

    fprintf (stderr, "gss_unwrap: %.*s %s\n", (int)output_token->length,
	     (char *)output_token->value,
	     conf_flag ? "CONF" : "INT");

    gss_release_buffer (&min_stat, input_token);
    gss_release_buffer (&min_stat, output_token);

    return 0;
}

static int
proto (int sock, const char *service)
{
    struct sockaddr_in remote, local;
    socklen_t addrlen;
    gss_ctx_id_t context_hdl = GSS_C_NO_CONTEXT;
    gss_buffer_desc real_input_token, real_output_token;
    gss_buffer_t input_token = &real_input_token,
	output_token = &real_output_token;
    OM_uint32 maj_stat, min_stat;
    gss_name_t client_name;
    struct gss_channel_bindings_struct input_chan_bindings;
    gss_cred_id_t delegated_cred_handle = NULL;
    krb5_ccache ccache;
    u_char init_buf[4];
    u_char acct_buf[4];
    gss_OID mech_oid;
    char *mech, *p;

    addrlen = sizeof(local);
    if (getsockname (sock, (struct sockaddr *)&local, &addrlen) < 0
	|| addrlen != sizeof(local))
	err (1, "getsockname)");

    addrlen = sizeof(remote);
    if (getpeername (sock, (struct sockaddr *)&remote, &addrlen) < 0
	|| addrlen != sizeof(remote))
	err (1, "getpeername");

    input_chan_bindings.initiator_addrtype = GSS_C_AF_INET;
    input_chan_bindings.initiator_address.length = 4;
    init_buf[0] = (remote.sin_addr.s_addr >> 24) & 0xFF;
    init_buf[1] = (remote.sin_addr.s_addr >> 16) & 0xFF;
    init_buf[2] = (remote.sin_addr.s_addr >>  8) & 0xFF;
    init_buf[3] = (remote.sin_addr.s_addr >>  0) & 0xFF;

    input_chan_bindings.initiator_address.value = init_buf;
    input_chan_bindings.acceptor_addrtype = GSS_C_AF_INET;

    input_chan_bindings.acceptor_address.length = 4;
    acct_buf[0] = (local.sin_addr.s_addr >> 24) & 0xFF;
    acct_buf[1] = (local.sin_addr.s_addr >> 16) & 0xFF;
    acct_buf[2] = (local.sin_addr.s_addr >>  8) & 0xFF;
    acct_buf[3] = (local.sin_addr.s_addr >>  0) & 0xFF;
    input_chan_bindings.acceptor_address.value = acct_buf;
    input_chan_bindings.application_data.value = emalloc(4);
#if 0
    * (unsigned short *)input_chan_bindings.application_data.value =
                          remote.sin_port;
    * ((unsigned short *)input_chan_bindings.application_data.value + 1) =
                          local.sin_port;
    input_chan_bindings.application_data.length = 4;
#else
    input_chan_bindings.application_data.length = 0;
    input_chan_bindings.application_data.value = NULL;
#endif

    delegated_cred_handle = GSS_C_NO_CREDENTIAL;

    do {
	read_token (sock, input_token);
	maj_stat =
	    gss_accept_sec_context (&min_stat,
				    &context_hdl,
				    GSS_C_NO_CREDENTIAL,
				    input_token,
				    &input_chan_bindings,
				    &client_name,
				    &mech_oid,
				    output_token,
				    NULL,
				    NULL,
				    &delegated_cred_handle);
	if(GSS_ERROR(maj_stat))
	    gss_err (1, min_stat, "gss_accept_sec_context");
	if (output_token->length != 0)
	    write_token (sock, output_token);
	if (GSS_ERROR(maj_stat)) {
	    if (context_hdl != GSS_C_NO_CONTEXT)
		gss_delete_sec_context (&min_stat,
					&context_hdl,
					GSS_C_NO_BUFFER);
	    break;
	}
    } while(maj_stat & GSS_S_CONTINUE_NEEDED);

    p = (char *)mech_oid->elements;
    if (mech_oid->length == GSS_KRB5_MECHANISM->length
	&& memcmp(p, GSS_KRB5_MECHANISM->elements, mech_oid->length) == 0)
	mech = "Kerberos 5";
    else if (mech_oid->length == GSS_SPNEGO_MECHANISM->length
	&& memcmp(p, GSS_SPNEGO_MECHANISM->elements, mech_oid->length) == 0)
	mech = "SPNEGO"; /* XXX Silly, wont show up */
    else
	mech = "Unknown";

    printf("Using mech: %s\n", mech);

    if (delegated_cred_handle != GSS_C_NO_CREDENTIAL) {
       krb5_context context;

       printf("Delegated cred found\n");

       maj_stat = krb5_init_context(&context);
       maj_stat = krb5_cc_resolve(context, "FILE:/tmp/krb5cc_test", &ccache);
       maj_stat = gss_krb5_copy_ccache(&min_stat,
				       delegated_cred_handle,
				       ccache);
       if (maj_stat == 0) {
	   krb5_principal p;
	   maj_stat = krb5_cc_get_principal(context, ccache, &p);
	   if (maj_stat == 0) {
	       char *name;
	       maj_stat = krb5_unparse_name(context, p, &name);
	       if (maj_stat == 0) {
		   printf("Delegated user is: `%s'\n", name);
		   free(name);
	       }
	       krb5_free_principal(context, p);
	   }
       }
       krb5_cc_close(context, ccache);
       gss_release_cred(&min_stat, &delegated_cred_handle);
    }

    if (fork_flag) {
	pid_t pid;
	int pipefd[2];

	if (pipe (pipefd) < 0)
	    err (1, "pipe");

	pid = fork ();
	if (pid < 0)
	    err (1, "fork");
	if (pid != 0) {
	    gss_buffer_desc buf;

	    maj_stat = gss_export_sec_context (&min_stat,
					       &context_hdl,
					       &buf);
	    if (GSS_ERROR(maj_stat))
		gss_err (1, min_stat, "gss_export_sec_context");
	    write_token (pipefd[1], &buf);
	    exit (0);
	} else {
	    gss_ctx_id_t context_hdl;
	    gss_buffer_desc buf;

	    close (pipefd[1]);
	    read_token (pipefd[0], &buf);
	    close (pipefd[0]);
	    maj_stat = gss_import_sec_context (&min_stat, &buf, &context_hdl);
	    if (GSS_ERROR(maj_stat))
		gss_err (1, min_stat, "gss_import_sec_context");
	    gss_release_buffer (&min_stat, &buf);
	    return process_it (sock, context_hdl, client_name);
	}
    } else {
	return process_it (sock, context_hdl, client_name);
    }
}

static int
doit (int port, const char *service)
{
    int sock, sock2;
    struct sockaddr_in my_addr;
    int one = 1;
    int ret;

    sock = socket (AF_INET, SOCK_STREAM, 0);
    if (sock < 0)
	err (1, "socket");

    memset (&my_addr, 0, sizeof(my_addr));
    my_addr.sin_family      = AF_INET;
    my_addr.sin_port        = port;
    my_addr.sin_addr.s_addr = INADDR_ANY;

    if (setsockopt (sock, SOL_SOCKET, SO_REUSEADDR,
		    (void *)&one, sizeof(one)) < 0)
	warn ("setsockopt SO_REUSEADDR");

    if (bind (sock, (struct sockaddr *)&my_addr, sizeof(my_addr)) < 0)
	err (1, "bind");

    while (1) {
        if (listen (sock, 1) < 0)
	    err (1, "listen");

        sock2 = accept (sock, NULL, NULL);
        if (sock2 < 0)
	    err (1, "accept");

        ret = proto (sock2, service);
    }
    return ret;
}

int
main(int argc, char **argv)
{
    krb5_context context = NULL; /* XXX */
    int port = server_setup(&context, argc, argv);
    return doit (port, service);
}

@


1.2
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@d39 1
a39 1
RCSID("$Id$");
@


1.1
log
@Initial revision
@
text
@d2 3
a4 3
 * Copyright (c) 1997 - 2000 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
d6 3
a8 3
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
d10 2
a11 2
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
d13 3
a15 3
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
d17 3
a19 3
 * 3. Neither the name of the Institute nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission. 
d21 11
a31 11
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE. 
d35 3
a37 1
#include <gssapi.h>
d39 1
a39 1
RCSID("$KTH: gssapi_server.c,v 1.15 2000/08/09 20:53:07 assar Exp $");
a47 1
    gss_buffer_desc name_token;
d51 2
d54 11
a64 4
    maj_stat = gss_display_name (&min_stat,
				 client_name,
				 &name_token,
				 NULL);
d66 1
a66 1
	gss_err (1, min_stat, "gss_display_name");
d68 1
a68 2
    fprintf (stderr, "User is `%.*s'\n", (int)name_token.length,
	    (char *)name_token.value);
d70 3
a72 1
    gss_release_buffer (&min_stat, &name_token);
d101 19
a119 1
			   NULL,
d124 3
a126 2
    fprintf (stderr, "gss_unwrap: %.*s\n", (int)output_token->length,
	    (char *)output_token->value);
d150 2
d190 3
a192 4
    
    delegated_cred_handle = emalloc(sizeof(*delegated_cred_handle));
    memset((char*)delegated_cred_handle, 0, sizeof(*delegated_cred_handle));
    
d202 1
a202 1
				    NULL,
d206 1
a206 1
				    /*&delegated_cred_handle*/ NULL);
d219 14
a232 2
    
    if (delegated_cred_handle->ccache) {
d235 2
d239 16
a254 2
       maj_stat = krb5_cc_copy_cache(context,
                                      delegated_cred_handle->ccache, ccache);
d256 1
a256 1
       krb5_cc_destroy(context, delegated_cred_handle->ccache);
d303 1
d321 7
a327 2
    if (listen (sock, 1) < 0)
	err (1, "listen");
d329 3
a331 5
    sock2 = accept (sock, NULL, NULL);
    if (sock2 < 0)
	err (1, "accept");

    return proto (sock2, service);
d341 1
@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.7.2
@
text
@d37 1
a37 1
RCSID("$KTH: gssapi_server.c,v 1.21 2005/04/10 14:47:41 lha Exp $");
d46 1
a49 2
    gss_name_t server_name;
    int conf_flag;
d51 4
a54 11
    print_gss_name("User is", client_name);

    maj_stat = gss_inquire_context(&min_stat,
				   context_hdl,
				   NULL,
				   &server_name,
				   NULL,
				   NULL,
				   NULL,
				   NULL,
				   NULL);
d56 1
a56 1
	gss_err (1, min_stat, "gss_inquire_context");
d58 2
a59 1
    print_gss_name("Server is", server_name);
d61 1
a61 3
    maj_stat = gss_release_name(&min_stat, &server_name);
    if (GSS_ERROR(maj_stat))
	gss_err (1, min_stat, "gss_release_name");
d90 1
a90 19
			   &conf_flag,
			   NULL);
    if(GSS_ERROR(maj_stat))
	gss_err (1, min_stat, "gss_unwrap");

    fprintf (stderr, "gss_unwrap: %.*s %s\n", (int)output_token->length,
	    (char *)output_token->value,
	     conf_flag ? "CONF" : "INT");

    gss_release_buffer (&min_stat, input_token);
    gss_release_buffer (&min_stat, output_token);

    read_token (sock, input_token);

    maj_stat = gss_unwrap (&min_stat,
			   context_hdl,
			   input_token,
			   output_token,
			   &conf_flag,
d95 2
a96 3
    fprintf (stderr, "gss_unwrap: %.*s %s\n", (int)output_token->length,
	     (char *)output_token->value,
	     conf_flag ? "CONF" : "INT");
a119 2
    gss_OID mech_oid;
    char *mech, *p;
d159 2
a160 1
    delegated_cred_handle = GSS_C_NO_CREDENTIAL;
d171 1
a171 1
				    &mech_oid,
d175 1
a175 1
				    &delegated_cred_handle);
d189 1
a189 13
    p = (char *)mech_oid->elements;
    if (mech_oid->length == GSS_KRB5_MECHANISM->length
	&& memcmp(p, GSS_KRB5_MECHANISM->elements, mech_oid->length) == 0)
	mech = "Kerberos 5";
    else if (mech_oid->length == GSS_SPNEGO_MECHANISM->length
	&& memcmp(p, GSS_SPNEGO_MECHANISM->elements, mech_oid->length) == 0)
	mech = "SPNEGO"; /* XXX Silly, wont show up */
    else
	mech = "Unknown";

    printf("Using mech: %s\n", mech);

    if (delegated_cred_handle != GSS_C_NO_CREDENTIAL) {
a191 2
       printf("Delegated cred found\n");

d194 2
a195 16
       maj_stat = gss_krb5_copy_ccache(&min_stat,
				       delegated_cred_handle,
				       ccache);
       if (maj_stat == 0) {
	   krb5_principal p;
	   maj_stat = krb5_cc_get_principal(context, ccache, &p);
	   if (maj_stat == 0) {
	       char *name;
	       maj_stat = krb5_unparse_name(context, p, &name);
	       if (maj_stat == 0) {
		   printf("Delegated user is: `%s'\n", name);
		   free(name);
	       }
	       krb5_free_principal(context, p);
	   }
       }
d197 1
a197 1
       gss_release_cred(&min_stat, &delegated_cred_handle);
@

