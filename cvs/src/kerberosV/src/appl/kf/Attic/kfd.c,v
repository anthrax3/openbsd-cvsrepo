head	1.7;
access;
symbols
	OPENBSD_5_5:1.6.0.6
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	HEIMDAL_0_7_2:1.1.1.4
	HEIMDAL_0_6_3:1.1.1.3
	HEIMDAL_0_6:1.1.1.3
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.2.0.4
	OPENBSD_3_1_BASE:1.2
	HEIMDAL_0_4e:1.1.1.2
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2
	HEIMDAL_0_3f:1.1.1.2
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2014.04.22.10.01.18;	author reyk;	state dead;
branches;
next	1.6;

1.6
date	2013.06.17.19.11.36;	author robert;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.12.17.18.43;	author hin;	state dead;
branches;
next	1.4;

1.4
date	2003.04.12.23.20.06;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2002.06.05.16.16.49;	author hin;	state Exp;
branches;
next	1.2;

1.2
date	2001.07.09.07.05.06;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.25.07.45.19;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.45.19;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.06.22.21.14.29;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.13.02.58.19;	author hin;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2006.04.14.07.31.55;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.7
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/*
 * Copyright (c) 1997 - 2002 Kungliga Tekniska HÃ¶gskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "kf_locl.h"
RCSID("$Id: kfd.c,v 1.6 2013/06/17 19:11:36 robert Exp $");

krb5_context context;
char krb5_tkfile[MAXPATHLEN];

static int help_flag;
static int version_flag;
static char *port_str;
char *service = KF_SERVICE;
int do_inetd = 0;
static char *regpag_str=NULL;

static struct getargs args[] = {
    { "port", 'p', arg_string, &port_str, "port to listen to", "port" },
    { "inetd",'i',arg_flag, &do_inetd,
       "Not started from inetd", NULL },
    { "regpag",'R',arg_string,&regpag_str,"path to regpag binary","regpag"},
    { "help", 'h', arg_flag, &help_flag },
    { "version", 0, arg_flag, &version_flag }
};

static int num_args = sizeof(args) / sizeof(args[0]);

static void
usage(int code, struct getargs *args, int num_args)
{
    arg_printusage(args, num_args, NULL, "");
    exit(code);
}

static int
server_setup(krb5_context *context, int argc, char **argv)
{
    int port = 0;
    int local_argc;

    local_argc = krb5_program_setup(context, argc, argv, args, num_args, usage);

    if(help_flag)
	(*usage)(0, args, num_args);
    if(version_flag) {
	print_version(NULL);
	exit(0);
    }

    if(port_str){
	struct servent *s = roken_getservbyname(port_str, "tcp");
	if(s)
	    port = s->s_port;
	else {
	    char *ptr;

	    port = strtol (port_str, &ptr, 10);
	    if (port == 0 && ptr == port_str)
		errx (1, "Bad port `%s'", port_str);
	    port = htons(port);
	}
    }

    if (port == 0)
	port = krb5_getportbyname (*context, KF_PORT_NAME, "tcp", KF_PORT_NUM);

    if(argv[local_argc] != NULL)
        usage(1, args, num_args);

    return port;
}

static int protocol_version;

static krb5_boolean
kfd_match_version(const void *arg, const char *version)
{
    if(strcmp(version, KF_VERSION_1) == 0) {
	protocol_version = 1;
	return TRUE;
    } else if (strlen(version) == 4 &&
	       version[0] == '0' &&
	       version[1] == '.' &&
	       (version[2] == '4' || version[2] == '3') &&
	       islower((unsigned char)version[3])) {
	protocol_version = 0;
	return TRUE;
    }
    return FALSE;
}

static int
proto (int sock, const char *service)
{
    krb5_auth_context auth_context;
    krb5_error_code status;
    krb5_principal server;
    krb5_ticket *ticket;
    char *name;
    char ret_string[10];
    char hostname[MAXHOSTNAMELEN];
    krb5_data data;
    krb5_data remotename;
    krb5_data tk_file;
    krb5_ccache ccache;
    char ccname[MAXPATHLEN];
    struct passwd *pwd;

    status = krb5_auth_con_init (context, &auth_context);
    if (status)
	krb5_err(context, 1, status, "krb5_auth_con_init");

    status = krb5_auth_con_setaddrs_from_fd (context,
					     auth_context,
					     &sock);
    if (status)
	krb5_err(context, 1, status, "krb5_auth_con_setaddr");

    if(gethostname (hostname, sizeof(hostname)) < 0)
	krb5_err(context, 1, errno, "gethostname");

    status = krb5_sname_to_principal (context,
				      hostname,
				      service,
				      KRB5_NT_SRV_HST,
				      &server);
    if (status)
	krb5_err(context, 1, status, "krb5_sname_to_principal");

    status = krb5_recvauth_match_version (context,
					  &auth_context,
					  &sock,
					  kfd_match_version,
					  NULL,
					  server,
					  0,
					  NULL,
					  &ticket);
    if (status)
	krb5_err(context, 1, status, "krb5_recvauth");

    status = krb5_unparse_name (context,
				ticket->client,
				&name);
    if (status)
	krb5_err(context, 1, status, "krb5_unparse_name");

    if(protocol_version == 0) {
	data.data = "old clnt"; /* XXX old clients only had room for
                                   10 bytes of message, and also
                                   didn't show it to the user */
	data.length = strlen(data.data) + 1;
	krb5_write_message(context, &sock, &data);
	sleep(2); /* XXX give client time to finish */
	krb5_errx(context, 1, "old client; exiting");
    }

    status=krb5_read_priv_message (context, auth_context,
				   &sock, &remotename);
    if (status)
	krb5_err(context, 1, status, "krb5_read_message");
    status=krb5_read_priv_message (context, auth_context,
				   &sock, &tk_file);
    if (status)
	krb5_err(context, 1, status, "krb5_read_message");

    krb5_data_zero (&data);

    if(((char*)remotename.data)[remotename.length-1] != '\0')
	krb5_errx(context, 1, "unterminated received");
    if(((char*)tk_file.data)[tk_file.length-1] != '\0')
	krb5_errx(context, 1, "unterminated received");

    status = krb5_read_priv_message(context, auth_context, &sock, &data);

    if (status) {
	krb5_err(context, 1, errno, "krb5_read_priv_message");
	goto out;
    }

    pwd = getpwnam ((char *)(remotename.data));
    if (pwd == NULL) {
	status=1;
	krb5_warnx(context, "getpwnam: %s failed",(char *)(remotename.data));
	goto out;
    }

    if(!krb5_kuserok (context,
		      ticket->client,
		      (char *)(remotename.data))) {
	status=1;
	krb5_warnx(context, "krb5_kuserok: permission denied");
	goto out;
    }

    if (setgid(pwd->pw_gid) < 0) {
	krb5_warn(context, errno, "setgid");
	goto out;
    }
    if (setuid(pwd->pw_uid) < 0) {
	krb5_warn(context, errno, "setuid");
	goto out;
    }

    if (tk_file.length != 1)
	snprintf (ccname, sizeof(ccname), "%s", (char *)(tk_file.data));
    else
	snprintf (ccname, sizeof(ccname), "FILE:/tmp/krb5cc_%lu",
		  (unsigned long)pwd->pw_uid);

    status = krb5_cc_resolve (context, ccname, &ccache);
    if (status) {
	krb5_warn(context, status, "krb5_cc_resolve");
        goto out;
    }
    status = krb5_cc_initialize (context, ccache, ticket->client);
    if (status) {
	krb5_warn(context, status, "krb5_cc_initialize");
        goto out;
    }
    status = krb5_rd_cred2 (context, auth_context, ccache, &data);
    krb5_cc_close (context, ccache);
    if (status) {
	krb5_warn(context, status, "krb5_rd_cred");
        goto out;

    }
    strlcpy(krb5_tkfile,ccname,sizeof(krb5_tkfile));
    krb5_warnx(context, "%s forwarded ticket to %s,%s",
	       name,
	       (char *)(remotename.data),ccname);
  out:
    if (status) {
	strlcpy(ret_string, "no", sizeof(ret_string));
	krb5_warnx(context, "failed");
    } else  {
	strlcpy(ret_string, "ok", sizeof(ret_string));
    }

    krb5_data_free (&tk_file);
    krb5_data_free (&remotename);
    krb5_data_free (&data);
    free(name);

    data.data = ret_string;
    data.length = strlen(ret_string) + 1;
    status = krb5_write_priv_message(context, auth_context, &sock, &data);
    krb5_auth_con_free(context, auth_context);

    return status;
}

static int
doit (int port, const char *service)
{
    if (do_inetd)
	mini_inetd(port, NULL);
    return proto (STDIN_FILENO, service);
}

int
main(int argc, char **argv)
{
    int port;
    int ret;
    krb5_log_facility *fac;

    setprogname (argv[0]);
    roken_openlog (argv[0], LOG_ODELAY | LOG_PID,LOG_AUTH);
    port = server_setup(&context, argc, argv);
    ret = krb5_openlog(context, "kfd", &fac);
    if(ret) krb5_err(context, 1, ret, "krb5_openlog");
    ret = krb5_set_warn_dest(context, fac);
    if(ret) krb5_err(context, 1, ret, "krb5_set_warn_dest");

    ret = doit (port, service);
    closelog();
    if (ret == 0 && regpag_str != NULL)
        ret = execl(regpag_str, "regpag", "-t", krb5_tkfile, "-r", NULL);
    return ret;
}
@


1.6
log
@2nd part of:
update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.
@
text
@d35 1
a35 1
RCSID("$Id$");
@


1.5
log
@These files are not use by us, so they're removed to make the tree
a little bit leaner, and to get rid of some bad string functions.
@
text
@d2 3
a4 3
 * Copyright (c) 1997 - 2001 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
d6 3
a8 3
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
d10 2
a11 2
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
d13 3
a15 3
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
d17 3
a19 3
 * 3. Neither the name of the Institute nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission. 
d21 11
a31 11
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE. 
d35 1
a35 1
RCSID("$KTH: kfd.c,v 1.9 2001/02/20 01:44:44 assar Exp $");
d43 1
a43 1
char *service = SERVICE;
d79 1
a79 1
    
d95 1
a95 1
	port = krb5_getportbyname (*context, PORT, "tcp", PORT_NUM);
d99 1
a99 1
    
d103 1
a103 10
static void
syslog_and_die (const char *m, ...)
{
    va_list args;

    va_start(args, m);
    vsyslog (LOG_ERR, m, args);
    va_end(args);
    exit (1);
}
d105 2
a106 2
static void
syslog_and_cont (const char *m, ...)
d108 12
a119 6
    va_list args;

    va_start(args, m);
    vsyslog (LOG_ERR, m, args);
    va_end(args);
    return; 
a131 1
    krb5_data packet;
a134 2

    u_int32_t len, net_len;
a137 1
    ssize_t n;
d141 1
a141 2
	syslog_and_die("krb5_auth_con_init: %s",
	      krb5_get_err_text(context, status));
d147 1
a147 2
	syslog_and_die("krb5_auth_con_setaddr: %s",
	      krb5_get_err_text(context, status));
d150 1
a150 1
	syslog_and_die("gethostname: %s",strerror(errno));
d158 1
a158 2
	syslog_and_die("krb5_sname_to_principal: %s",
	      krb5_get_err_text(context, status));
d160 9
a168 8
    status = krb5_recvauth (context,
			    &auth_context,
			    &sock,
			    VERSION,
			    server,
			    0,
			    NULL,
			    &ticket);
d170 1
a170 2
	syslog_and_die("krb5_recvauth: %s",
	      krb5_get_err_text(context, status));
d176 1
a176 2
	syslog_and_die("krb5_unparse_name: %s",
	      krb5_get_err_text(context, status));
d178 8
a185 9
    status=krb5_read_message (context, &sock, &remotename);
    if (status) {
	syslog_and_die("krb5_read_message: %s",
		       krb5_get_err_text(context, status));
    }
    status=krb5_read_message (context, &sock, &tk_file);
    if (status) {
	syslog_and_die("krb5_read_message: %s",
		       krb5_get_err_text(context, status));
d187 9
a197 1
    krb5_data_zero (&packet);
d199 7
a205 19
    n = krb5_net_read (context, &sock, &net_len, 4);
    if (n < 0)
        syslog_and_die("krb5_net_read: %s", strerror(errno));
    if (n == 0)
        syslog_and_die("EOF in krb5_net_read");

    len = ntohl(net_len);
    krb5_data_alloc (&packet, len);
    n = krb5_net_read (context, &sock, packet.data, len);
    if (n < 0)
        syslog_and_die("krb5_net_read: %s", strerror(errno));
    if (n == 0)
        syslog_and_die("EOF in krb5_net_read");

    status = krb5_rd_priv (context,
                           auth_context,
                           &packet,
                           &data,
                           NULL);
d207 1
a207 2
	syslog_and_cont("krb5_rd_priv: %s",
			krb5_get_err_text(context, status));
d214 1
a214 1
	syslog_and_cont("getpwnam: %s failed",(char *)(remotename.data));
d219 2
a220 2
                     ticket->client,
                     (char *)(remotename.data))) {
d222 1
a222 1
	syslog_and_cont("krb5_kuserok: permission denied");
d227 1
a227 1
	syslog_and_cont ("setgid: %s", strerror(errno));
d231 1
a231 1
	syslog_and_cont ("setuid: %s", strerror(errno));
d238 2
a239 1
	snprintf (ccname, sizeof(ccname), "FILE:/tmp/krb5cc_%u",pwd->pw_uid);
d243 1
a243 2
	syslog_and_cont("krb5_cc_resolve: %s",
			krb5_get_err_text(context, status));
d248 1
a248 2
	syslog_and_cont("krb5_cc_initialize: %s",
			krb5_get_err_text(context, status));
d254 1
a254 2
	syslog_and_cont("krb5_rd_cred: %s",
			krb5_get_err_text(context, status));
d259 4
a262 4
    syslog_and_cont("%s forwarded ticket to %s,%s",
		    name,
		    (char *)(remotename.data),ccname);
out:
d264 2
a265 2
	strlcpy(ret_string, "no", sizeof ret_string);
	syslog_and_cont("failed");
d267 1
a267 1
	strlcpy(ret_string, "ok", sizeof ret_string);
a271 1
    krb5_data_free (&packet);
d275 5
a279 6
    len = strlen(ret_string) + 1;
    net_len = htonl(len);
    if (krb5_net_write (context, &sock, &net_len, 4) != 4)
         return 1;
    if (krb5_net_write (context, &sock, ret_string, len) != len)
         return 1;
d287 1
a287 1
	mini_inetd(port);
d296 1
d298 1
d301 5
d309 1
a309 1
        ret = execl(regpag_str, "regpag", "-t", krb5_tkfile, "-r", (char *)NULL);
@


1.4
log
@string cleaning; parts by me, then parts by hin, then more parts by me.
since this is not a very important part of the source tree, and since it
does compile, i am dumping it in now.
@
text
@@


1.3
log
@Remove all uses of setprogname() and getprogname() in kerberosV subtree.
@
text
@d283 1
a283 1
	strcpy(ret_string, "no");
d286 1
a286 1
	strcpy(ret_string, "ok");
@


1.2
log
@correct type on last arg to execl(); nordin@@cse.ogi.edu
@
text
@a317 1
    setprogname (argv[0]);
@


1.1
log
@Initial revision
@
text
@d35 1
a35 1
RCSID("$KTH: kfd.c,v 1.8 2001/01/09 18:43:10 assar Exp $");
d318 1
a318 1
    set_progname (argv[0]);
d324 1
a324 1
        ret = execl(regpag_str, "regpag", "-t", krb5_tkfile, "-r", NULL);
@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.3f

Lots of changes, highlights include:

 * change default keytab to ANY:FILE:/etc/krb5.keytab,krb4:/etc/srvtab,
   the new keytab type that tries both of these in order (SRVTAB is
   also an alias for krb4:)

 * improve error reporting and error handling (error messages should
   be more detailed and more useful)

 * the API is closer to what MIT krb5 is using

 * more compatible with windows 2000

 * removed some memory leaks

 * bug fixes
@
text
@d35 1
a35 1
RCSID("$KTH: kfd.c,v 1.9 2001/02/20 01:44:44 assar Exp $");
d318 1
a318 1
    setprogname (argv[0]);
@


1.1.1.3
log
@Import of heimdal-0.6, released earlier today.
@
text
@d2 1
a2 1
 * Copyright (c) 1997 - 2002 Kungliga Tekniska Högskolan
d35 1
a35 1
RCSID("$KTH: kfd.c,v 1.11 2003/04/16 15:40:24 lha Exp $");
d43 1
a43 1
char *service = KF_SERVICE;
d95 1
a95 1
	port = krb5_getportbyname (*context, KF_PORT_NAME, "tcp", KF_PORT_NUM);
d103 4
a106 1
static int protocol_version;
d108 8
a115 2
static krb5_boolean
kfd_match_version(const void *arg, const char *version)
d117 6
a122 12
    if(strcmp(version, KF_VERSION_1) == 0) {
	protocol_version = 1;
	return TRUE;
    } else if (strlen(version) == 4 &&
	       version[0] == '0' &&
	       version[1] == '.' &&
	       (version[2] == '4' || version[2] == '3') &&
	       islower(version[3])) {
	protocol_version = 0;
	return TRUE;
    }
    return FALSE;
d135 1
d139 2
d144 1
d148 2
a149 1
	krb5_err(context, 1, status, "krb5_auth_con_init");
d155 2
a156 1
	krb5_err(context, 1, status, "krb5_auth_con_setaddr");
d159 1
a159 1
	krb5_err(context, 1, errno, "gethostname");
d167 2
a168 1
	krb5_err(context, 1, status, "krb5_sname_to_principal");
d170 8
a177 9
    status = krb5_recvauth_match_version (context,
					  &auth_context,
					  &sock,
					  kfd_match_version,
					  NULL,
					  server,
					  0,
					  NULL,
					  &ticket);
d179 2
a180 1
	krb5_err(context, 1, status, "krb5_recvauth");
d186 2
a187 1
	krb5_err(context, 1, status, "krb5_unparse_name");
d189 9
a197 8
    if(protocol_version == 0) {
	data.data = "old clnt"; /* XXX old clients only had room for
                                   10 bytes of message, and also
                                   didn't show it to the user */
	data.length = strlen(data.data) + 1;
	krb5_write_message(context, &sock, &data);
	sleep(2); /* XXX give client time to finish */
	krb5_errx(context, 1, "old client; exiting");
a199 9
    status=krb5_read_priv_message (context, auth_context,
				   &sock, &remotename);
    if (status)
	krb5_err(context, 1, status, "krb5_read_message");
    status=krb5_read_priv_message (context, auth_context, 
				   &sock, &tk_file);
    if (status)
	krb5_err(context, 1, status, "krb5_read_message");

d201 1
d203 19
a221 7
    if(((char*)remotename.data)[remotename.length-1] != '\0')
	krb5_errx(context, 1, "unterminated received");
    if(((char*)tk_file.data)[tk_file.length-1] != '\0')
	krb5_errx(context, 1, "unterminated received");

    status = krb5_read_priv_message(context, auth_context, &sock, &data);

d223 2
a224 1
	krb5_err(context, 1, errno, "krb5_read_priv_message");
d231 1
a231 1
	krb5_warnx(context, "getpwnam: %s failed",(char *)(remotename.data));
d236 2
a237 2
		      ticket->client,
		      (char *)(remotename.data))) {
d239 1
a239 1
	krb5_warnx(context, "krb5_kuserok: permission denied");
d244 1
a244 1
	krb5_warn(context, errno, "setgid");
d248 1
a248 1
	krb5_warn(context, errno, "setuid");
d259 2
a260 1
	krb5_warn(context, status, "krb5_cc_resolve");
d265 2
a266 1
	krb5_warn(context, status, "krb5_cc_initialize");
d272 2
a273 1
	krb5_warn(context, status, "krb5_rd_cred");
d278 4
a281 4
    krb5_warnx(context, "%s forwarded ticket to %s,%s",
	       name,
	       (char *)(remotename.data),ccname);
  out:
d283 2
a284 2
	strlcpy(ret_string, "no", sizeof(ret_string));
	krb5_warnx(context, "failed");
d286 1
a286 1
	strlcpy(ret_string, "ok", sizeof(ret_string));
d291 1
d295 7
a301 3
    data.data = ret_string;
    data.length = strlen(ret_string) + 1;
    return krb5_write_priv_message(context, auth_context, &sock, &data);
a316 1
    krb5_log_facility *fac;
a320 5
    ret = krb5_openlog(context, "kfd", &fac);
    if(ret) krb5_err(context, 1, ret, "krb5_openlog");
    ret = krb5_set_warn_dest(context, fac);
    if(ret) krb5_err(context, 1, ret, "krb5_set_warn_dest");

@


1.1.1.4
log
@Import of heimdal-0.7.2
@
text
@d35 1
a35 1
RCSID("$KTH: kfd.c,v 1.13 2005/05/27 13:43:24 lha Exp $");
d115 1
a115 1
	       islower((unsigned char)version[3])) {
d238 1
a238 2
	snprintf (ccname, sizeof(ccname), "FILE:/tmp/krb5cc_%lu",
		  (unsigned long)pwd->pw_uid);
@


