head	1.4;
access;
symbols
	OPENBSD_5_5:1.3.0.6
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.2
	OPENBSD_5_4_BASE:1.3
	HEIMDAL_0_7_2:1.1.1.2
	HEIMDAL_0_6_3:1.1.1.2
	OPENBSD_3_3:1.1.1.1.0.8
	OPENBSD_3_3_BASE:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.6
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.4
	OPENBSD_3_1_BASE:1.1.1.1
	HEIMDAL_0_4e:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.2
	OPENBSD_3_0_BASE:1.1.1.1
	HEIMDAL_0_3f:1.1.1.1
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2014.04.22.10.01.18;	author reyk;	state dead;
branches;
next	1.3;

1.3
date	2013.06.17.19.11.36;	author robert;	state Exp;
branches;
next	1.2;

1.2
date	2003.05.12.17.18.43;	author hin;	state dead;
branches;
next	1.1;

1.1
date	2001.05.25.07.46.23;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.46.23;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.10.29.15.55.27;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.4
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/*
 * Copyright (c) 1995 - 2001 Kungliga Tekniska HÃ¶gskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/* $Id: kx.h,v 1.3 2013/06/17 19:11:36 robert Exp $ */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif /* HAVE_CONFIG_H */

#include <stdio.h>
#include <stdarg.h>
#include <stdlib.h>
#include <string.h>
#include <signal.h>
#include <errno.h>
#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif
#ifdef HAVE_PWD_H
#include <pwd.h>
#endif
#ifdef HAVE_GRP_H
#include <grp.h>
#endif
#ifdef HAVE_SYSLOG_H
#include <syslog.h>
#endif
#ifdef HAVE_SYS_TYPES_H
#include <sys/types.h>
#endif
#ifdef TIME_WITH_SYS_TIME
#include <sys/time.h>
#include <time.h>
#elif defined(HAVE_SYS_TIME_H)
#include <sys/time.h>
#else
#include <time.h>
#endif
#ifdef HAVE_SYS_RESOURCE_H
#include <sys/resource.h>
#endif
#ifdef HAVE_SYS_SELECT_H
#include <sys/select.h>
#endif
#ifdef HAVE_SYS_WAIT_H
#include <sys/wait.h>
#endif
#ifdef HAVE_SYS_STAT_H
#include <sys/stat.h>
#endif
#ifdef HAVE_SYS_SOCKET_H
#include <sys/socket.h>
#endif
#ifdef HAVE_NETINET_IN_H
#include <netinet/in.h>
#endif
#ifdef HAVE_NETINET_TCP_H
#include <netinet/tcp.h>
#endif
#ifdef HAVE_ARPA_INET_H
#include <arpa/inet.h>
#endif
#ifdef HAVE_NETDB_H
#include <netdb.h>
#endif
#ifdef HAVE_SYS_UN_H
#include <sys/un.h>
#endif
#include <X11/X.h>
#include <X11/Xlib.h>
#include <X11/Xauth.h>

#ifdef HAVE_SYS_STREAM_H
#include <sys/stream.h>
#endif
#ifdef HAVE_SYS_STROPTS_H
#include <sys/stropts.h>
#endif

/* defined by aix's sys/stream.h and again by arpa/nameser.h */

#undef NOERROR

/* as far as we know, this is only used with later versions of Slowlaris */
#if SunOS >= 50 && defined(HAVE_SYS_STROPTS_H) && defined(HAVE_FATTACH) && defined(I_PUSH)
#define MAY_HAVE_X11_PIPES
#endif

#ifdef SOCKS
#include <socks.h>
/* This doesn't belong here. */
struct tm *localtime(const time_t *);
struct hostent  *gethostbyname(const char *);
#endif

#ifdef KRB5
#include <krb5.h>
#endif

#include <err.h>
#include <getarg.h>
#include <roken.h>

struct x_socket {
    char *pathname;
    int fd;
    enum {
	LISTENP     = 0x80,
	TCP         = LISTENP | 1,
	UNIX_SOCKET = LISTENP | 2,
	STREAM_PIPE = 3
    } flags;
};

extern char x_socket[];
extern uint32_t display_num;
extern char display[];
extern int display_size;
extern char xauthfile[];
extern int xauthfile_size;
extern u_char cookie[];
extern size_t cookie_len;

int get_xsockets (int *number, struct x_socket **sockets, int tcpp);
int chown_xsockets (int n, struct x_socket *sockets, uid_t uid, gid_t gid);

int connect_local_xsocket (unsigned dnr);
int create_and_write_cookie (char *file,
			     size_t file_size,
			     u_char *cookie_buf,
			     size_t sz);
int verify_and_remove_cookies (int fd, int sock, int cookiesp);
int replace_cookie(int xserver, int fd, char *filename, int cookiesp);

int suspicious_address (int sock, struct sockaddr *addr);

#define KX_PORT 2111

#define KX_OLD_VERSION "KXSERV.1"
#define KX_VERSION "KXSERV.2"

#define COOKIE_TYPE "MIT-MAGIC-COOKIE-1"

enum { INIT = 0, ACK = 1, NEW_CONN = 2, ERROR = 3 };

enum kx_flags { PASSIVE = 1, KEEP_ALIVE = 2 };

typedef enum kx_flags kx_flags;

struct kx_context {
    int (*authenticate)(struct kx_context *kc, int s);
    int (*userok)(struct kx_context *kc, char *user);
    ssize_t (*read)(struct kx_context *kc,
		    int fd, void *buf, size_t len);
    ssize_t (*write)(struct kx_context *kc,
		     int fd, const void *buf, size_t len);
    int (*copy_encrypted)(struct kx_context *kc,
			  int fd1, int fd2);
    void (*destroy)(struct kx_context *kc);
    const char *host;
    const char *user;
    int port;
    int debug_flag;
    int keepalive_flag;
    int tcp_flag;
    struct sockaddr_storage __ss_this;
    struct sockaddr_storage __ss_that;
    struct sockaddr *thisaddr;
    struct sockaddr *thataddr;
    socklen_t thisaddr_len, thataddr_len;
    void *data;
};

typedef struct kx_context kx_context;

void
context_set (kx_context *kc, const char *host, const char *user, int port,
	     int debug_flag, int keepalive_flag, int tcp_flag);

void
context_destroy (kx_context *kc);

int
context_authenticate (kx_context *kc, int s);

int
context_userok (kx_context *kc, char *user);

ssize_t
kx_read (kx_context *kc, int fd, void *buf, size_t len);

ssize_t
kx_write (kx_context *kc, int fd, const void *buf, size_t len);

int
copy_encrypted (kx_context *kc, int fd1, int fd2);

#ifdef KRB5

void
krb5_make_context (kx_context *c);

int
recv_v5_auth (kx_context *kc, int sock, u_char *buf);

#endif

void
fatal (kx_context *kc, int fd, char *format, ...)
#ifdef __GNUC__
__attribute__ ((format (printf, 3, 4)))
#endif
;

int
kx_get_int(void *f, uint32_t *to, int size, int lsb);

int
kx_put_int(uint32_t from, void *to, size_t rem, int size);
@


1.3
log
@2nd part of:
update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.
@
text
@d34 1
a34 1
/* $Id$ */
@


1.2
log
@These files are not use by us, so they're removed to make the tree
a little bit leaner, and to get rid of some bad string functions.
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2000 Kungliga Tekniska Högskolan
d5 1
a5 1
 * 
d9 1
a9 1
 * 
d12 1
a12 1
 * 
d16 1
a16 1
 * 
d20 1
a20 1
 * 
d34 1
a34 1
/* $KTH: kx.h,v 1.38 2000/02/06 05:52:03 assar Exp $ */
d110 4
a125 4
#ifdef KRB4
#include <krb.h>
#include <prot.h>
#endif
d146 1
a146 1
extern u_int32_t display_num;
d158 3
a160 3
int create_and_write_cookie (char *xauthfile,
			     size_t size,
			     u_char *cookie,
d165 1
a165 1
int suspicious_address (int sock, struct sockaddr_in addr);
d196 5
a200 1
    struct sockaddr_in thisaddr, thataddr;
a227 10
#ifdef KRB4

void
krb4_make_context (kx_context *c);

int
recv_v4_auth (kx_context *kc, int sock, u_char *buf);

#endif

a244 2
#ifndef KRB4

d246 1
a246 1
krb_get_int(void *f, u_int32_t *to, int size, int lsb);
d249 1
a249 3
krb_put_int(u_int32_t from, void *to, size_t rem, int size);

#endif
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.6.3
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2001 Kungliga Tekniska Högskolan
d34 1
a34 1
/* $KTH: kx.h,v 1.41 2003/04/16 16:45:43 joda Exp $ */
a109 4
/* defined by aix's sys/stream.h and again by arpa/nameser.h */

#undef NOERROR

d165 1
a165 1
int suspicious_address (int sock, struct sockaddr *addr);
d196 1
a196 5
    struct sockaddr_storage __ss_this;
    struct sockaddr_storage __ss_that;
    struct sockaddr *thisaddr;
    struct sockaddr *thataddr;
    socklen_t thisaddr_len, thataddr_len;
@

