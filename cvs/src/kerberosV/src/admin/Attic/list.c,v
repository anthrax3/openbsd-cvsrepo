head	1.8;
access;
symbols
	OPENBSD_5_5:1.7.0.6
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.6.0.28
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.26
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.24
	OPENBSD_5_0:1.6.0.22
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.20
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.18
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.14
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.16
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.12
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.10
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.8
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.6
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.4
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	HEIMDAL_0_7_2:1.1.1.5
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	HEIMDAL_0_6_3:1.1.1.4
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	HEIMDAL_0_6:1.1.1.4
	HEIMDAL_0_6RC1:1.1.1.4
	OPENBSD_3_3:1.4.0.6
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	HEIMDAL_0_4e:1.1.1.3
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2
	HEIMDAL_0_3f:1.1.1.2
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2014.04.22.10.01.17;	author reyk;	state dead;
branches;
next	1.7;

1.7
date	2013.06.17.18.57.40;	author robert;	state Exp;
branches;
next	1.6;

1.6
date	2006.04.14.08.15.03;	author biorn;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.11.03.39.55;	author hin;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.06.13.37.14;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2002.02.06.09.10.01;	author hin;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.29.02.08.24;	author hin;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.25.07.45.14;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.45.14;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.06.22.21.14.15;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.02.06.08.52.17;	author hin;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.05.11.02.14.15;	author hin;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2006.04.14.07.31.52;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.8
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/*
 * Copyright (c) 1997-2004 Kungliga Tekniska HÃ¶gskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "ktutil_locl.h"
#include <rtbl.h>

RCSID("$Id: list.c,v 1.7 2013/06/17 18:57:40 robert Exp $");

static int
do_list(struct list_options *opt, const char *keytab_str)
{
    krb5_error_code ret;
    krb5_keytab keytab;
    krb5_keytab_entry entry;
    krb5_kt_cursor cursor;
    rtbl_t table;

    /* XXX specialcase the ANY type */
    if(strncasecmp(keytab_str, "ANY:", 4) == 0) {
	int flag = 0;
	char buf[1024];
	keytab_str += 4;
	ret = 0;
	while (strsep_copy((const char**)&keytab_str, ",",
			   buf, sizeof(buf)) != -1) {
	    if(flag)
		printf("\n");
	    if(do_list(opt, buf))
		ret = 1;
	    flag = 1;
	}
	return ret;
    }

    ret = krb5_kt_resolve(context, keytab_str, &keytab);
    if (ret) {
	krb5_warn(context, ret, "resolving keytab %s", keytab_str);
	return ret;
    }

    ret = krb5_kt_start_seq_get(context, keytab, &cursor);
    if(ret) {
	krb5_warn(context, ret, "krb5_kt_start_seq_get %s", keytab_str);
	krb5_kt_close(context, keytab);
	return ret;
    }

    printf ("%s:\n\n", keytab_str);

    table = rtbl_create();
    rtbl_add_column_by_id(table, 0, "Vno", RTBL_ALIGN_RIGHT);
    rtbl_add_column_by_id(table, 1, "Type", 0);
    rtbl_add_column_by_id(table, 2, "Principal", 0);
    if (opt->timestamp_flag)
	rtbl_add_column_by_id(table, 3, "Date", 0);
    if(opt->keys_flag)
	rtbl_add_column_by_id(table, 4, "Key", 0);
    rtbl_add_column_by_id(table, 5, "Aliases", 0);
    rtbl_set_separator(table, "  ");

    while(krb5_kt_next_entry(context, keytab, &entry, &cursor) == 0){
	char buf[1024], *s;

	snprintf(buf, sizeof(buf), "%d", entry.vno);
	rtbl_add_column_entry_by_id(table, 0, buf);

	ret = krb5_enctype_to_string(context,
				     entry.keyblock.keytype, &s);
	if (ret != 0) {
	    snprintf(buf, sizeof(buf), "unknown (%d)", entry.keyblock.keytype);
	    rtbl_add_column_entry_by_id(table, 1, buf);
	} else {
	    rtbl_add_column_entry_by_id(table, 1, s);
	    free(s);
	}

	krb5_unparse_name_fixed(context, entry.principal, buf, sizeof(buf));
	rtbl_add_column_entry_by_id(table, 2, buf);

	if (opt->timestamp_flag) {
	    krb5_format_time(context, entry.timestamp, buf,
			     sizeof(buf), FALSE);
	    rtbl_add_column_entry_by_id(table, 3, buf);
	}
	if(opt->keys_flag) {
	    size_t i;
	    s = malloc(2 * entry.keyblock.keyvalue.length + 1);
	    if (s == NULL) {
		krb5_warnx(context, "malloc failed");
		ret = ENOMEM;
		goto out;
	    }
	    for(i = 0; i < entry.keyblock.keyvalue.length; i++)
		snprintf(s + 2 * i, 3, "%02x",
			 ((unsigned char*)entry.keyblock.keyvalue.data)[i]);
	    rtbl_add_column_entry_by_id(table, 4, s);
	    free(s);
	}
	if (entry.aliases) {
	    unsigned int i;
	    struct rk_strpool *p = NULL;

	    for (i = 0; i< entry.aliases->len; i++) {
		krb5_unparse_name_fixed(context, entry.principal, buf, sizeof(buf));
		rk_strpoolprintf(p, "%s%s", buf,
				 i + 1 < entry.aliases->len ? ", " : "");

	    }
	    rtbl_add_column_entry_by_id(table, 5, rk_strpoolcollect(p));
	}

	krb5_kt_free_entry(context, &entry);
    }
    ret = krb5_kt_end_seq_get(context, keytab, &cursor);
    rtbl_format(table, stdout);

out:
    rtbl_destroy(table);

    krb5_kt_close(context, keytab);
    return ret;
}

int
kt_list(struct list_options *opt, int argc, char **argv)
{
    krb5_error_code ret;
    char kt[1024];

    if(verbose_flag)
	opt->timestamp_flag = 1;

    if (keytab_string == NULL) {
	if((ret = krb5_kt_default_name(context, kt, sizeof(kt))) != 0) {
	    krb5_warn(context, ret, "getting default keytab name");
	    return 1;
	}
	keytab_string = kt;
    }
    return do_list(opt, keytab_string) != 0;
}
@


1.7
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@d37 1
a37 1
RCSID("$Id$");
@


1.6
log
@Merge of heimdal 0.7.2
Tested by todd & beck, ok beck.
@
text
@d2 3
a4 3
 * Copyright (c) 1997-2004 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
d6 3
a8 3
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
d10 2
a11 2
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
d13 3
a15 3
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
d17 3
a19 3
 * 3. Neither the name of the Institute nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission. 
d21 11
a31 11
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE. 
d37 1
a37 1
RCSID("$KTH: list.c,v 1.13 2004/09/29 11:17:13 lha Exp $");
d40 1
a40 1
do_list(struct list_options *opt, const char *keytab_string)
d49 1
a49 1
    if(strncasecmp(keytab_string, "ANY:", 4) == 0) {
d52 1
a52 1
	keytab_string += 4;
d54 1
a54 1
	while (strsep_copy((const char**)&keytab_string, ",", 
d65 1
a65 1
    ret = krb5_kt_resolve(context, keytab_string, &keytab);
d67 1
a67 1
	krb5_warn(context, ret, "resolving keytab %s", keytab_string);
d73 1
a73 1
	krb5_warn(context, ret, "krb5_kt_start_seq_get %s", keytab_string);
d78 2
a79 2
    printf ("%s:\n\n", keytab_string);
	
d88 1
d91 1
a91 1
    while((ret = krb5_kt_next_entry(context, keytab, &entry, &cursor)) == 0){
d97 1
a97 1
	ret = krb5_enctype_to_string(context, 
d111 1
a111 1
	    krb5_format_time(context, entry.timestamp, buf, 
d116 1
a116 1
	    int i;
d118 5
d124 1
a124 1
		snprintf(s + 2 * i, 3, "%02x", 
d129 13
d146 2
@


1.5
log
@Merge 0.6rc1
@
text
@d2 1
a2 1
 * Copyright (c) 1997 - 2002 Kungliga Tekniska Högskolan
d35 1
d37 1
a37 22
RCSID("$KTH: list.c,v 1.10 2002/01/30 10:12:21 joda Exp $");

static int help_flag;
static int list_keys;
static int list_timestamp;

static struct getargs args[] = {
    { "help",      'h', arg_flag, &help_flag },
    { "keys",	   0,   arg_flag, &list_keys, "show key value" },
    { "timestamp", 0,   arg_flag, &list_timestamp, "show timestamp" },
};

static int num_args = sizeof(args) / sizeof(args[0]);

struct key_info {
    char *version;
    char *etype;
    char *principal;
    char *timestamp;
    char *key;
    struct key_info *next;
};
d40 1
a40 1
do_list(const char *keytab_string)
d46 1
a46 7
    struct key_info *ki, **kie = &ki, *kp;

    int max_version = sizeof("Vno") - 1;
    int max_etype = sizeof("Type") - 1;
    int max_principal = sizeof("Principal") - 1;
    int max_timestamp = sizeof("Date") - 1;
    int max_key = sizeof("Key") - 1;
d53 1
d58 2
a59 1
	    do_list(buf);
d62 1
a62 1
	return 0;
d68 1
a68 1
	return 0;
d72 1
a72 1
    if(ret){
d74 2
a75 1
	goto out;
d80 10
d91 1
a91 1
#define CHECK_MAX(F) if(max_##F < strlen(kp->F)) max_##F = strlen(kp->F)
d93 2
a94 7
	kp = malloc(sizeof(*kp));
	if (kp == NULL) {
	    krb5_kt_free_entry(context, &entry);
	    krb5_kt_end_seq_get(context, keytab, &cursor);
	    krb5_warn(context, ret, "malloc failed");
	    goto out;
	}
a95 2
	asprintf(&kp->version, "%d", entry.vno);
	CHECK_MAX(version);
d97 16
a112 14
				     entry.keyblock.keytype, &kp->etype);
	if (ret != 0) 
	    asprintf(&kp->etype, "unknown (%d)", entry.keyblock.keytype);
	CHECK_MAX(etype);
	krb5_unparse_name(context, entry.principal, &kp->principal);
	CHECK_MAX(principal);
	if (list_timestamp) {
	    char tstamp[256];

	    krb5_format_time(context, entry.timestamp, 
			     tstamp, sizeof(tstamp), FALSE);

	    kp->timestamp = strdup(tstamp);
	    CHECK_MAX(timestamp);
d114 1
a114 1
	if(list_keys) {
d116 1
a116 1
	    kp->key = malloc(2 * entry.keyblock.keyvalue.length + 1);
d118 1
a118 1
		snprintf(kp->key + 2 * i, 3, "%02x", 
d120 2
a121 1
	    CHECK_MAX(key);
a122 2
	*kie = kp;
	kie = &kp->next;
a124 1
    *kie = NULL; /* terminate list */
d126 2
a128 34
    printf("%-*s  %-*s  %-*s", max_version, "Vno", 
	   max_etype, "Type", 
	   max_principal, "Principal");
    if(list_timestamp)
	printf("  %-*s", max_timestamp, "Date");
    if(list_keys)
	printf("  %s", "Key");
    printf("\n");

    for(kp = ki; kp; ) {
	printf("%*s  %-*s  %-*s", max_version, kp->version, 
	       max_etype, kp->etype, 
	       max_principal, kp->principal);
	if(list_timestamp)
	    printf("  %-*s", max_timestamp, kp->timestamp);
	if(list_keys)
	    printf("  %s", kp->key);
	printf("\n");

	/* free entries */
	free(kp->version);
	free(kp->etype);
	free(kp->principal);
	if(list_timestamp)
	    free(kp->timestamp);
	if(list_keys) {
	    memset(kp->key, 0, strlen(kp->key));
	    free(kp->key);
	}
	ki = kp;
	kp = kp->next;
	free(ki);
    }
out:
d130 1
a130 1
    return 0;
d134 1
a134 1
kt_list(int argc, char **argv)
a136 1
    int optind = 0;
d140 1
a140 10
	list_timestamp = 1;

    if(getarg(args, num_args, argc, argv, &optind)){
	arg_printusage(args, num_args, "ktutil list", "");
	return 1;
    }
    if(help_flag){
	arg_printusage(args, num_args, "ktutil list", "");
	return 0;
    }
d145 1
a145 1
	    return 0;
d149 1
a149 2
    do_list(keytab_string);
    return 0;
@


1.4
log
@Fix misspelling
@
text
@d2 1
a2 1
 * Copyright (c) 1997 - 2001 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: list.c,v 1.9 2001/06/18 01:24:29 joda Exp $");
d74 15
d188 1
d190 1
d205 5
a209 7
	do_list("FILE:/etc/kerberosV/krb5.keytab");
#ifdef KRB4
	printf ("\n");
	do_list("krb4:/etc/kerberosIV/srvtab");
#endif
    } else {
	do_list(keytab_string);
d211 1
@


1.3
log
@Merge heimdal-0.4e
@
text
@d129 1
a129 1
    *kie = NULL; /* termiate list */
@


1.2
log
@/etc/krb5.keytab -> /etc/kerberosV/krb5.keytab
/etc/srvtab -> /etc/kerberosIV/srvtab
@
text
@d36 1
a36 1
RCSID("$KTH: list.c,v 1.8 2001/05/11 00:54:01 assar Exp $");
a124 1
	kp->next = NULL;
d129 1
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * Copyright (c) 1997 - 2000 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: list.c,v 1.3 2000/06/29 08:21:40 joda Exp $");
d59 2
a60 2
int
kt_list(int argc, char **argv)
d63 2
a65 2
    krb5_keytab_entry entry;
    int optind = 0;
d74 3
a76 9
    if(verbose_flag)
	list_timestamp = 1;

    if(getarg(args, num_args, argc, argv, &optind)){
	arg_printusage(args, num_args, "ktutil list", "");
	return 1;
    }
    if(help_flag){
	arg_printusage(args, num_args, "ktutil list", "");
d83 1
a83 1
	return 1;
d85 3
d92 6
d106 1
a106 1
	krb5_unparse_name_short(context, entry.principal, &kp->principal);
d164 31
@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.3f

Lots of changes, highlights include:

 * change default keytab to ANY:FILE:/etc/krb5.keytab,krb4:/etc/srvtab,
   the new keytab type that tries both of these in order (SRVTAB is
   also an alias for krb4:)

 * improve error reporting and error handling (error messages should
   be more detailed and more useful)

 * the API is closer to what MIT krb5 is using

 * more compatible with windows 2000

 * removed some memory leaks

 * bug fixes
@
text
@d2 1
a2 1
 * Copyright (c) 1997 - 2001 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: list.c,v 1.8 2001/05/11 00:54:01 assar Exp $");
d59 2
a60 2
static int
do_list(const char *keytab_string)
d63 1
a63 1
    krb5_keytab keytab;
d65 1
a65 1
    krb5_kt_cursor cursor;
d74 9
a82 3
    ret = krb5_kt_resolve(context, keytab_string, &keytab);
    if (ret) {
	krb5_warn(context, ret, "resolving keytab %s", keytab_string);
d89 1
a89 1
	goto out;
a90 3

    printf ("%s:\n\n", keytab_string);
	
a94 6
	if (kp == NULL) {
	    krb5_kt_free_entry(context, &entry);
	    krb5_kt_end_seq_get(context, keytab, &cursor);
	    krb5_warn(context, ret, "malloc failed");
	    goto out;
	}
d103 1
a103 1
	krb5_unparse_name(context, entry.principal, &kp->principal);
a160 31
    }
out:
    krb5_kt_close(context, keytab);
    return 0;
}

int
kt_list(int argc, char **argv)
{
    int optind = 0;

    if(verbose_flag)
	list_timestamp = 1;

    if(getarg(args, num_args, argc, argv, &optind)){
	arg_printusage(args, num_args, "ktutil list", "");
	return 1;
    }
    if(help_flag){
	arg_printusage(args, num_args, "ktutil list", "");
	return 0;
    }

    if (keytab_string == NULL) {
	do_list("FILE:/etc/krb5.keytab");
#ifdef KRB4
	printf ("\n");
	do_list("krb4:/etc/srvtab");
#endif
    } else {
	do_list(keytab_string);
@


1.1.1.3
log
@Import of heimdal-0.4e
@
text
@d36 1
a36 1
RCSID("$KTH: list.c,v 1.9 2001/06/18 01:24:29 joda Exp $");
d125 1
a129 1
    *kie = NULL; /* termiate list */
@


1.1.1.4
log
@Import of heimdal-0.6rc1
@
text
@d2 1
a2 1
 * Copyright (c) 1997 - 2002 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: list.c,v 1.10 2002/01/30 10:12:21 joda Exp $");
a73 15
    /* XXX specialcase the ANY type */
    if(strncasecmp(keytab_string, "ANY:", 4) == 0) {
	int flag = 0;
	char buf[1024];
	keytab_string += 4;
	while (strsep_copy((const char**)&keytab_string, ",", 
			   buf, sizeof(buf)) != -1) {
	    if(flag)
		printf("\n");
	    do_list(buf);
	    flag = 1;
	}
	return 0;
    }

a172 1
    krb5_error_code ret;
a173 1
    char kt[1024];
d188 7
a194 5
	if((ret = krb5_kt_default_name(context, kt, sizeof(kt))) != 0) {
	    krb5_warn(context, ret, "getting default keytab name");
	    return 0;
	}
	keytab_string = kt;
a195 1
    do_list(keytab_string);
@


1.1.1.5
log
@Import of heimdal-0.7.2
@
text
@d2 1
a2 1
 * Copyright (c) 1997-2004 Kungliga Tekniska Högskolan
a34 1
#include <rtbl.h>
d36 22
a57 1
RCSID("$KTH: list.c,v 1.13 2004/09/29 11:17:13 lha Exp $");
d60 1
a60 1
do_list(struct list_options *opt, const char *keytab_string)
d66 7
a72 1
    rtbl_t table;
a78 1
	ret = 0;
d83 1
a83 2
	    if(do_list(opt, buf))
		ret = 1;
d86 1
a86 1
	return ret;
d92 1
a92 1
	return ret;
d96 1
a96 1
    if(ret) {
d98 1
a98 2
	krb5_kt_close(context, keytab);
	return ret;
a102 10
    table = rtbl_create();
    rtbl_add_column_by_id(table, 0, "Vno", RTBL_ALIGN_RIGHT);
    rtbl_add_column_by_id(table, 1, "Type", 0);
    rtbl_add_column_by_id(table, 2, "Principal", 0);
    if (opt->timestamp_flag)
	rtbl_add_column_by_id(table, 3, "Date", 0);
    if(opt->keys_flag)
	rtbl_add_column_by_id(table, 4, "Key", 0);
    rtbl_set_separator(table, "  ");

d104 1
a104 1
	char buf[1024], *s;
d106 7
a112 2
	snprintf(buf, sizeof(buf), "%d", entry.vno);
	rtbl_add_column_entry_by_id(table, 0, buf);
d114 2
d117 14
a130 16
				     entry.keyblock.keytype, &s);
	if (ret != 0) {
	    snprintf(buf, sizeof(buf), "unknown (%d)", entry.keyblock.keytype);
	    rtbl_add_column_entry_by_id(table, 1, buf);
	} else {
	    rtbl_add_column_entry_by_id(table, 1, s);
	    free(s);
	}

	krb5_unparse_name_fixed(context, entry.principal, buf, sizeof(buf));
	rtbl_add_column_entry_by_id(table, 2, buf);

	if (opt->timestamp_flag) {
	    krb5_format_time(context, entry.timestamp, buf, 
			     sizeof(buf), FALSE);
	    rtbl_add_column_entry_by_id(table, 3, buf);
d132 1
a132 1
	if(opt->keys_flag) {
d134 1
a134 1
	    s = malloc(2 * entry.keyblock.keyvalue.length + 1);
d136 1
a136 1
		snprintf(s + 2 * i, 3, "%02x", 
d138 1
a138 2
	    rtbl_add_column_entry_by_id(table, 4, s);
	    free(s);
d140 2
d144 1
a145 2
    rtbl_format(table, stdout);
    rtbl_destroy(table);
d147 34
d182 1
a182 1
    return ret;
d186 1
a186 1
kt_list(struct list_options *opt, int argc, char **argv)
d189 1
d193 10
a202 1
	opt->timestamp_flag = 1;
d207 1
a207 1
	    return 1;
d211 2
a212 1
    return do_list(opt, keytab_string) != 0;
@


