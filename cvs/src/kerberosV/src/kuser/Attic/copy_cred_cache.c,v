head	1.3;
access;
symbols
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.2
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.1.1.1.0.28
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.26
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.24
	OPENBSD_5_0:1.1.1.1.0.22
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.20
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.18
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.14
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.16
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.12
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.10
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.8
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.6
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.4
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.2
	OPENBSD_4_0_BASE:1.1.1.1
	HEIMDAL_0_7_2:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2014.04.22.10.01.26;	author reyk;	state dead;
branches;
next	1.2;

1.2
date	2013.06.17.18.57.42;	author robert;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.14.07.32.48;	author biorn;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.04.14.07.32.48;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.3
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/*
 * Copyright (c) 2004 Kungliga Tekniska HÃ¶gskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "kuser_locl.h"
#include <config.h>
#include <parse_units.h>
#include <parse_time.h>
#include "kcc-commands.h"

static int32_t
bitswap32(int32_t b)
{
    int32_t r = 0;
    int i;
    for (i = 0; i < 32; i++) {
	r = r << 1 | (b & 1);
	b = b >> 1;
    }
    return r;
}

static void
parse_ticket_flags(krb5_context context,
		   const char *string, krb5_ticket_flags *ret_flags)
{
    TicketFlags ff;
    int flags = parse_flags(string, asn1_TicketFlags_units(), 0);
    if (flags == -1)	/* XXX */
	krb5_errx(context, 1, "bad flags specified: \"%s\"", string);

    memset(&ff, 0, sizeof(ff));
    ff.proxy = 1;
    if ((size_t)parse_flags("proxy", asn1_TicketFlags_units(), 0) == TicketFlags2int(ff))
	ret_flags->i = flags;
    else
	ret_flags->i = bitswap32(flags);
}

struct ctx {
    krb5_flags whichfields;
    krb5_creds mcreds;
};

static krb5_boolean
matchfunc(krb5_context context, void *ptr, const krb5_creds *creds)
{
    struct ctx *ctx = ptr;
    if (krb5_compare_creds(context, ctx->whichfields, &ctx->mcreds, creds))
	return TRUE;
    return FALSE;
}

int
copy_cred_cache(struct copy_cred_cache_options *opt, int argc, char **argv)
{
    krb5_error_code ret;
    const char *from_name, *to_name;
    krb5_ccache from_ccache, to_ccache;
    unsigned int matched;
    struct ctx ctx;

    memset(&ctx, 0, sizeof(ctx));

    if (opt->service_string) {
	ret = krb5_parse_name(kcc_context, opt->service_string, &ctx.mcreds.server);
	if (ret)
	    krb5_err(kcc_context, 1, ret, "%s", opt->service_string);
    }
    if (opt->enctype_string) {
	krb5_enctype enctype;
	ret = krb5_string_to_enctype(kcc_context, opt->enctype_string, &enctype);
	if (ret)
	    krb5_err(kcc_context, 1, ret, "%s", opt->enctype_string);
	ctx.whichfields |= KRB5_TC_MATCH_KEYTYPE;
	ctx.mcreds.session.keytype = enctype;
    }
    if (opt->flags_string) {
	parse_ticket_flags(kcc_context, opt->flags_string, &ctx.mcreds.flags);
	ctx.whichfields |= KRB5_TC_MATCH_FLAGS;
    }
    if (opt->valid_for_string) {
	time_t t = parse_time(opt->valid_for_string, "s");
	if(t < 0)
	    errx(1, "unknown time \"%s\"", opt->valid_for_string);
	ctx.mcreds.times.endtime = time(NULL) + t;
	ctx.whichfields |= KRB5_TC_MATCH_TIMES;
    }
    if (opt->fcache_version_integer)
	krb5_set_fcache_version(kcc_context, opt->fcache_version_integer);

    if (argc == 1) {
	from_name = krb5_cc_default_name(kcc_context);
	to_name = argv[0];
    } else {
	from_name = argv[0];
	to_name = argv[1];
    }

    ret = krb5_cc_resolve(kcc_context, from_name, &from_ccache);
    if (ret)
	krb5_err(kcc_context, 1, ret, "%s", from_name);

    if (opt->krbtgt_only_flag) {
	krb5_principal client;
	ret = krb5_cc_get_principal(kcc_context, from_ccache, &client);
	if (ret)
	    krb5_err(kcc_context, 1, ret, "getting default principal");
	ret = krb5_make_principal(kcc_context, &ctx.mcreds.server,
				  krb5_principal_get_realm(kcc_context, client),
				  KRB5_TGS_NAME,
				  krb5_principal_get_realm(kcc_context, client),
				  NULL);
	if (ret)
	    krb5_err(kcc_context, 1, ret, "constructing krbtgt principal");
	krb5_free_principal(kcc_context, client);
    }
    ret = krb5_cc_resolve(kcc_context, to_name, &to_ccache);
    if (ret)
	krb5_err(kcc_context, 1, ret, "%s", to_name);

    ret = krb5_cc_copy_match_f(kcc_context, from_ccache, to_ccache,
			       matchfunc, &ctx, &matched);
    if (ret)
	krb5_err(kcc_context, 1, ret, "copying cred cache");

    krb5_cc_close(kcc_context, from_ccache);
    if(matched == 0)
	krb5_cc_destroy(kcc_context, to_ccache);
    else
	krb5_cc_close(kcc_context, to_ccache);

    return matched == 0;
}
@


1.2
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * Copyright (c) 2004 Kungliga Tekniska Högskolan
d34 1
a34 1
#ifdef HAVE_CONFIG_H
a35 7
RCSID("$KTH: copy_cred_cache.c,v 1.5 2005/04/25 18:08:42 lha Exp $");
#endif

#include <stdlib.h>
#include <krb5.h>
#include <roken.h>
#include <getarg.h>
d38 1
a38 36

static int krbtgt_only_flag;
static char *service_string;
static char *enctype_string;
static char *flags_string;
static char *valid_string;
static int fcache_version;
static int help_flag;
static int version_flag;

static struct getargs args[] = {
    { "krbtgt-only", 0, arg_flag, &krbtgt_only_flag,
      "only copy local krbtgt" },
    { "service", 0, arg_string, &service_string,
      "limit to this service", "principal" },
    { "enctype", 0, arg_string, &enctype_string,
      "limit to this enctype", "enctype" },
    { "flags", 0, arg_string, &flags_string,
      "limit to these flags", "ticketflags" },
    { "valid-for", 0, arg_string, &valid_string, 
      "limit to creds valid for at least this long", "time" },
    { "fcache-version", 0, arg_integer, &fcache_version,
      "file cache version to create" },
    { "version", 0, arg_flag, &version_flag },
    { "help", 'h', arg_flag, &help_flag }
};

static void
usage(int ret)
{
    arg_printusage(args,
		   sizeof(args) / sizeof(*args),
		   NULL,
		   "[from-cache] to-cache");
    exit(ret);
}
d54 1
a54 1
		   const char *flags_string, krb5_ticket_flags *ret_flags)
d57 1
a57 1
    int flags = parse_flags(flags_string, asn1_TicketFlags_units(), 0);
d59 1
a59 1
	krb5_errx(context, 1, "bad flags specified: \"%s\"", flags_string);
d63 1
a63 1
    if (parse_flags("proxy", asn1_TicketFlags_units(), 0) == TicketFlags2int(ff))
d69 14
d84 1
a84 1
main(int argc, char **argv)
a86 2
    krb5_context context;
    int optind = 0;
a88 2
    krb5_flags whichfields = 0;
    krb5_creds mcreds;
d90 1
d92 1
a92 9
    setprogname(argv[0]);

    memset(&mcreds, 0, sizeof(mcreds));

    if (getarg(args, sizeof(args) / sizeof(args[0]), argc, argv, &optind))
	usage(1);

    if (help_flag)
	usage(0);
d94 2
a95 15
    if (version_flag) {
	print_version(NULL);
	exit(0);
    }
    argc -= optind;
    argv += optind;

    if (argc < 1 || argc > 2)
	usage(1);

    if (krb5_init_context(&context))
	errx(1, "krb5_init_context failed");

    if (service_string) {
	ret = krb5_parse_name(context, service_string, &mcreds.server);
d97 1
a97 1
	    krb5_err(context, 1, ret, "%s", service_string);
d99 1
a99 1
    if (enctype_string) {
d101 1
a101 1
	ret = krb5_string_to_enctype(context, enctype_string, &enctype);
d103 7
a109 7
	    krb5_err(context, 1, ret, "%s", enctype_string);
	whichfields |= KRB5_TC_MATCH_KEYTYPE;
	mcreds.session.keytype = enctype;
    }
    if (flags_string) {
	parse_ticket_flags(context, flags_string, &mcreds.flags);
	whichfields |= KRB5_TC_MATCH_FLAGS;
d111 2
a112 2
    if (valid_string) {
	time_t t = parse_time(valid_string, "s");
d114 3
a116 3
	    errx(1, "unknown time \"%s\"", valid_string);
	mcreds.times.endtime = time(NULL) + t;
	whichfields |= KRB5_TC_MATCH_TIMES;
d118 2
a119 2
    if (fcache_version)
	krb5_set_fcache_version(context, fcache_version);
d122 1
a122 1
	from_name = krb5_cc_default_name(context);
d129 1
a129 1
    ret = krb5_cc_resolve(context, from_name, &from_ccache);
d131 1
a131 1
	krb5_err(context, 1, ret, "%s", from_name);
d133 1
a133 1
    if (krbtgt_only_flag) {
d135 1
a135 1
	ret = krb5_cc_get_principal(context, from_ccache, &client);
d137 3
a139 3
	    krb5_err(context, 1, ret, "getting default principal");
	ret = krb5_make_principal(context, &mcreds.server,
				  krb5_principal_get_realm(context, client),
d141 1
a141 1
				  krb5_principal_get_realm(context, client),
d144 2
a145 2
	    krb5_err(context, 1, ret, "constructing krbtgt principal");
	krb5_free_principal(context, client);
d147 1
a147 1
    ret = krb5_cc_resolve(context, to_name, &to_ccache);
d149 1
a149 1
	krb5_err(context, 1, ret, "%s", to_name);
d151 2
a152 2
    ret = krb5_cc_copy_cache_match(context, from_ccache, to_ccache,
				   whichfields, &mcreds, &matched);
d154 1
a154 1
	krb5_err(context, 1, ret, "copying cred cache");
d156 1
a156 1
    krb5_cc_close(context, from_ccache);
d158 1
a158 1
	krb5_cc_destroy(context, to_ccache);
d160 2
a161 2
	krb5_cc_close(context, to_ccache);
    krb5_free_context(context);
@


1.1.1.1
log
@Import of heimdal-0.7.2
@
text
@@
