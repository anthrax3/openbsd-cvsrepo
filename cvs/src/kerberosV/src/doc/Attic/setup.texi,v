head	1.11;
access;
symbols
	OPENBSD_5_5:1.10.0.6
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.2
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.9.0.22
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.20
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.18
	OPENBSD_5_0:1.9.0.16
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.14
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.12
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.8
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.10
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.6
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.4
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.2
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.8.0.6
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.4
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	HEIMDAL_0_7_2:1.1.1.6
	OPENBSD_3_9:1.7.0.6
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.4
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.2
	OPENBSD_3_7_BASE:1.7
	HEIMDAL_0_6_3:1.1.1.5
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	HEIMDAL_0_6:1.1.1.4
	HEIMDAL_0_6RC1:1.1.1.4
	OPENBSD_3_3:1.4.0.6
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	HEIMDAL_0_4e:1.1.1.3
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	HEIMDAL_0_3f:1.1.1.2
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@# @;


1.11
date	2014.04.22.10.01.21;	author reyk;	state dead;
branches;
next	1.10;

1.10
date	2013.06.17.18.57.41;	author robert;	state Exp;
branches;
next	1.9;

1.9
date	2007.10.07.12.06.38;	author biorn;	state Exp;
branches;
next	1.8;

1.8
date	2006.04.14.08.15.03;	author biorn;	state Exp;
branches;
next	1.7;

1.7
date	2004.10.29.16.20.29;	author biorn;	state Exp;
branches;
next	1.6;

1.6
date	2003.08.22.13.48.29;	author hin;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.11.03.39.59;	author hin;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.06.09.10.02;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2001.07.11.10.12.52;	author hin;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.29.02.06.11;	author hin;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.25.07.46.47;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.46.47;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.06.22.21.17.22;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.02.06.08.53.10;	author hin;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.05.11.02.14.25;	author hin;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.10.29.15.55.28;	author biorn;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2006.04.14.07.32.32;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.11
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@@@c $Id: setup.texi,v 1.10 2013/06/17 18:57:41 robert Exp $

@@node Setting up a realm, Applications, Building and Installing, Top

@@chapter Setting up a realm

A
@@cindex realm
realm is an administrative domain.  The name of a Kerberos realm is
usually the Internet domain name in uppercase.  Call your realm the same
as your Internet domain name if you do not have strong reasons for not
doing so.  It will make life easier for you and everyone else.

@@menu
* Configuration file::
* Creating the database::
* Modifying the database::
* Checking the setup::
* keytabs::
* Remote administration::
* Password changing::
* Testing clients and servers::
* Slave Servers::
* Incremental propagation::
* Encryption types and salting::
* Credential cache server - KCM::
* Cross realm::
* Transit policy::
* Setting up DNS::
* Using LDAP to store the database::
* Providing Kerberos credentials to servers and programs::
* Setting up PK-INIT::
* Debugging Kerberos problems::
@@end menu

@@node  Configuration file, Creating the database, Setting up a realm, Setting up a realm
@@section Configuration file

To setup a realm you will first have to create a configuration file:
@@file{/etc/krb5.conf}. The @@file{krb5.conf} file can contain many
configuration options, some of which are described here.

There is a sample @@file{krb5.conf} supplied with the distribution.

The configuration file is a hierarchical structure consisting of
sections, each containing a list of bindings (either variable
assignments or subsections). A section starts with
@@samp{[@@samp{section-name}]}.  A binding consists of a left hand side, an equal sign
(@@samp{=}) and a right hand side (the left hand side tag must be
separated from the equal sign with some whitespace). Subsections have a
@@samp{@@{} as the first non-whitespace character after the equal sign. All
other bindings are treated as variable assignments. The value of a
variable extends to the end of the line.

@@example
[section1]
        a-subsection = @@{
                var = value1
                other-var = value with @@{@@}
                sub-sub-section = @@{
                        var = 123
                @@}
        @@}
        var = some other value
[section2]
        var = yet another value
@@end example

In this manual, names of sections and bindings will be given as strings
separated by slashes (@@samp{/}). The @@samp{other-var} variable will thus
be @@samp{section1/a-subsection/other-var}.

For in-depth information about the contents of the configuration file, refer to
the @@file{krb5.conf} manual page. Some of the more important sections
are briefly described here.

The @@samp{libdefaults} section contains a list of library configuration
parameters, such as the default realm and the timeout for KDC
responses. The @@samp{realms} section contains information about specific
realms, such as where they hide their KDC@@. This section serves the same
purpose as the Kerberos 4 @@file{krb.conf} file, but can contain more
information. Finally the @@samp{domain_realm} section contains a list of
mappings from domains to realms, equivalent to the Kerberos 4
@@file{krb.realms} file.

To continue with the realm setup, you will have to create a configuration file,
with contents similar to the following.

@@example
[libdefaults]
        default_realm = MY.REALM
[realms]
        MY.REALM = @@{
                kdc = my.kdc my.slave.kdc
                kdc = my.third.kdc
                kdc = 130.237.237.17
                kdc = [2001:6b0:1:ea::100]:88
        @@}
[domain_realm]
        .my.domain = MY.REALM

@@end example

If you use a realm name equal to your domain name, you can omit the
@@samp{libdefaults}, and @@samp{domain_realm}, sections. If you have a DNS
SRV-record for your realm, or your Kerberos server has DNS CNAME
@@samp{kerberos.my.realm}, you can omit the @@samp{realms} section too.

@@cindex KRB5_CONFIG
If you want to use a different configuration file then the default you
can point a file with the enviroment variable @@samp{KRB5_CONFIG}.

@@example
env KRB5_CONFIG=$HOME/etc/krb5.conf kinit user@@@@REALM
@@end example

@@node Creating the database, Modifying the database, Configuration file, Setting up a realm
@@section Creating the database

The database library will look for the database in the directory
@@file{@@value{dbdir}}, so you should probably create that directory.
Make sure the directory has restrictive permissions.

@@example
# mkdir /var/heimdal
@@end example

The keys of all the principals are stored in the database.  If you
choose to, these can be encrypted with a master key.  You do not have to
remember this key (or password), but just to enter it once and it will
be stored in a file (@@file{/var/heimdal/m-key}).  If you want to have a
master key, run @@samp{kstash} to create this master key:

@@example
# kstash
Master key:
Verifying password - Master key:
@@end example

If you want to generate a random master key you can use the
@@kbd{--random-key} flag to kstash. This will make sure you have a good key
on which attackers can't do a dictionary attack.

If you have a master key, make sure you make a backup of your master
key file; without it backups of the database are of no use.

To initialise the database use the @@command{kadmin} program, with the
@@kbd{-l} option (to enable local database mode). First issue a
@@kbd{init MY.REALM} command. This will create the database and insert
default principals for that realm. You can have more than one realm in
one database, so @@samp{init} does not destroy any old database.

Before creating the database, @@samp{init} will ask you some questions
about maximum ticket lifetimes.

After creating the database you should probably add yourself to it. You
do this with the @@samp{add} command. It takes as argument the name of a
principal. The principal should contain a realm, so if you haven't set up
a default realm, you will need to explicitly include the realm.

@@example
# kadmin -l
kadmin> init MY.REALM
Realm max ticket life [unlimited]:
Realm max renewable ticket life [unlimited]:
kadmin> add me
Max ticket life [unlimited]:
Max renewable life [unlimited]:
Attributes []:
Password:
Verifying password - Password:
@@end example

Now start the KDC and try getting a ticket.

@@example
# kdc &
# kinit me
me@@@@MY.REALMS's Password:
# klist
Credentials cache: /tmp/krb5cc_0
        Principal: me@@@@MY.REALM

  Issued           Expires          Principal
Aug 25 07:25:55  Aug 25 17:25:55  krbtgt/MY.REALM@@@@MY.REALM
@@end example

If you are curious you can use the @@samp{dump} command to list all the
entries in the database.  It should look something similar to the
following example (note that the entries here are truncated for
typographical reasons):

@@smallexample
kadmin> dump
me@@@@MY.REALM 1:0:1:0b01d3cb7c293b57:-:0:7:8aec316b9d1629e3baf8 ...
kadmin/admin@@@@MY.REALM 1:0:1:e5c8a2675b37a443:-:0:7:cb913ebf85 ...
krbtgt/MY.REALM@@@@MY.REALM 1:0:1:52b53b61c875ce16:-:0:7:c8943be ...
kadmin/changepw@@@@MY.REALM 1:0:1:f48c8af2b340e9fb:-:0:7:e3e6088 ...
@@end smallexample

@@node Modifying the database, Checking the setup, Creating the database, Setting up a realm
@@section Modifying the database

All modifications of principals are done with with kadmin.

A principal has several attributes and lifetimes associated with it.

Principals are added, renamed, modified, and deleted with the kadmin
commands @@samp{add}, @@samp{rename}, @@samp{modify}, @@samp{delete}.
Both interactive editing and command line flags can be used (use --help
to list the available options).

There are different kinds of types for the fields in the database;
attributes, absolute time times and relative times.

@@subsection Attributes

When doing interactive editing, attributes are listed with @@samp{?}.

The attributes are given in a comma (@@samp{,}) separated list.
Attributes are removed from the list by prefixing them with @@samp{-}.

@@smallexample
kadmin> modify me
Max ticket life [1 day]:
Max renewable life [1 week]:
Principal expiration time [never]:
Password expiration time [never]:
Attributes [disallow-renewable]: requires-pre-auth,-disallow-renewable
kadmin> get me
            Principal: me@@@@MY.REALM
[...]
           Attributes: requires-pre-auth
@@end smallexample

@@subsection Absolute times

The format for absolute times are any of the following:

@@smallexample
never
now
YYYY-mm-dd
YYYY-mm-dd HH:MM:SS
@@end smallexample


@@subsection Relative times

The format for relative times are any of the following combined:

@@smallexample
N year
M month
O day
P hour
Q minute
R second
@@end smallexample

@@c Describe more of kadmin commands here...

@@node Checking the setup, keytabs, Modifying the database, Setting up a realm
@@section Checking the setup

There are two tools that can check the consistency of the Kerberos
configuration file and the Kerberos database.

The Kerberos configuration file is checked using
@@command{verify_krb5_conf}. The tool checks for common errors, but
commonly there are several uncommon configuration entries that are
never added to the tool and thus generates ``unknown entry'' warnings.
This is usually nothing to worry about.

The database check is built into the kadmin tool. It will check for
common configuration error that will cause problems later. Common
check are for existence and flags on important principals. The
database check by run by the following command :

@@example
kadmin -l check REALM.EXAMPLE.ORG
@@end example

@@node keytabs, Remote administration, Checking the setup, Setting up a realm
@@section keytabs

To extract a service ticket from the database and put it in a keytab, you
need to first create the principal in the database with @@samp{add}
(using the @@kbd{--random-key} flag to get a random key) and then
extract it with @@samp{ext_keytab}.

@@example
kadmin> add --random-key host/my.host.name
Max ticket life [unlimited]:
Max renewable life [unlimited]:
Attributes []:
kadmin> ext host/my.host.name
kadmin> exit
# ktutil list
Version  Type             Principal
     1   des-cbc-md5      host/my.host.name@@@@MY.REALM
     1   des-cbc-md4      host/my.host.name@@@@MY.REALM
     1   des-cbc-crc      host/my.host.name@@@@MY.REALM
     1   des3-cbc-sha1    host/my.host.name@@@@MY.REALM
@@end example

@@node Remote administration, Password changing, keytabs, Setting up a realm
@@section Remote administration

The administration server, @@command{kadmind}, can be started by
@@command{inetd} (which isn't recommended) or run as a normal daemon. If you
want to start it from @@command{inetd} you should add a line similar to the
one below to your @@file{/etc/inetd.conf}.

@@example
kerberos-adm stream     tcp     nowait  root /usr/heimdal/libexec/kadmind kadmind
@@end example

You might need to add @@samp{kerberos-adm} to your @@file{/etc/services}
as @@samp{749/tcp}.

Access to the administration server is controlled by an ACL file,
(default @@file{/var/heimdal/kadmind.acl}.) The file has the following
syntax:
@@smallexample
principal       [priv1,priv2,...]       [glob-pattern]
@@end smallexample

The matching is from top to bottom for matching principals (and if given,
glob-pattern).  When there is a match, the access rights of that line are
applied.

The privileges you can assign to a principal are: @@samp{add},
@@samp{change-password} (or @@samp{cpw} for short), @@samp{delete},
@@samp{get}, @@samp{list}, and @@samp{modify}, or the special privilege
@@samp{all}. All of these roughly correspond to the different commands
in @@command{kadmin}.

If a @@var{glob-pattern} is given on a line, it restricts the access
rights for the principal to only apply for subjects that match the
pattern.  The patterns are of the same type as those used in shell
globbing, see @@url{none,,fnmatch(3)}.

In the example below @@samp{lha/admin} can change every principal in the
database. @@samp{jimmy/admin} can only modify principals that belong to
the realm @@samp{E.KTH.SE}. @@samp{mille/admin} is working at the
help desk, so he should only be able to change the passwords for single
component principals (ordinary users). He will not be able to change any
@@samp{/admin} principal.

@@example
lha/admin@@@@E.KTH.SE	all
jimmy/admin@@@@E.KTH.SE	all		*@@@@E.KTH.SE
jimmy/admin@@@@E.KTH.SE	all		*/*@@@@E.KTH.SE
mille/admin@@@@E.KTH.SE	change-password	*@@@@E.KTH.SE
@@end example

@@node Password changing, Testing clients and servers, Remote administration, Setting up a realm
@@section Password changing

To allow users to change their passwords, you should run @@command{kpasswdd}.
It is not run from @@command{inetd}.

You might need to add @@samp{kpasswd} to your @@file{/etc/services} as
@@samp{464/udp}.  If your realm is not setup to use DNS, you might also
need to add a @@samp{kpasswd_server} entry to the realm configuration
in @@file{/etc/krb5.conf} on client machines:

@@example
[realms]
        MY.REALM = @@{
                kdc = my.kdc my.slave.kdc
                kpasswd_server = my.kdc
        @@}
@@end example

@@subsection Password quality assurance

It is important that users have good passwords, both to make it harder
to guess them and to avoid off-line attacks (although
pre-authentication provides some defence against off-line attacks).
To ensure that the users choose good passwords, you can enable
password quality controls in @@command{kpasswdd} and @@command{kadmind}.
The controls themselves are done in a shared library or an external
program that is used by @@command{kpasswdd}.  To configure in these
controls, add lines similar to the following to your
@@file{/etc/krb5.conf}:

@@example
[password_quality]
	policies = external-check builtin:minimum-length modulename:policyname
	external_program = /bin/false
	policy_libraries = @@var{library1.so} @@var{library2.so}
@@end example

In @@samp{[password_quality]policies} the module name is optional if
the policy name is unique in all modules (members of
@@samp{policy_libraries}).  All built-in policies can be qualified with
a module name of @@samp{builtin} to unambiguously specify the built-in
policy and not a policy by the same name from a loaded module.

The built-in policies are

@@itemize @@bullet

@@item external-check

Executes the program specified by @@samp{[password_quality]external_program}.

A number of key/value pairs are passed as input to the program, one per
line, ending with the string @@samp{end}.  The key/value lines are of
the form
@@example
principal: @@var{principal}
new-password: @@var{password}
@@end example
where @@var{password} is the password to check for the previous
@@var{principal}.

If the external application approves the password, it should return
@@samp{APPROVED} on standard out and exit with exit code 0.  If it
doesn't approve the password, an one line error message explaining the
problem should be returned on standard error and the application
should exit with exit code 0.  In case of a fatal error, the
application should, if possible, print an error message on standard
error and exit with a non-zero error code.

@@item minimum-length

The minimum length password quality check reads the configuration file
stanza @@samp{[password_quality]min_length} and requires the password
to be at least this length.

@@item character-class

The character-class password quality check reads the configuration
file stanza @@samp{[password_quality]min_classes}. The policy requires
the password to have characters from at least that many character
classes. Default value if not given is 3.

The four different characters classes are, uppercase, lowercase,
number, special characters.

@@end itemize

If you want to write your own shared object to check password
policies, see the manual page @@manpage{kadm5_pwcheck,3}.

Code for a password quality checking function that uses the cracklib
library can be found in @@file{lib/kadm5/sample_password_check.c} in
the source code distribution.  It requires that the cracklib library
be built with the patch available at
@@url{ftp://ftp.pdc.kth.se/pub/krb/src/cracklib.patch}.

A sample policy external program is included in
@@file{lib/kadm5/check-cracklib.pl}.

If no password quality checking function is configured, the only check
performed is that the password is at least six characters long.

To check the password policy settings, use the command
@@command{verify-password-quality} in @@command{kadmin} program. The password
verification is only performed locally, on the client.  It may be
convenient to set the environment variable @@samp{KRB5_CONFIG} to point
to a test version of @@file{krb5.conf} while you're testing the
@@samp{[password_quality]} stanza that way.

@@node Testing clients and servers, Slave Servers, Password changing, Setting up a realm
@@section Testing clients and servers

Now you should be able to run all the clients and servers.  Refer to the
appropriate man pages for information on how to use them.

@@node Slave Servers, Incremental propagation, Testing clients and servers, Setting up a realm
@@section Slave servers, Incremental propagation, Testing clients and servers, Setting up a realm

It is desirable to have at least one backup (slave) server in case the
master server fails. It is possible to have any number of such slave
servers but more than three usually doesn't buy much more redundancy.

All Kerberos servers for a realm must have the same database so that
they present the same service to the users.  The
@@pindex hprop
@@command{hprop} program, running on the master, will propagate the database
to the slaves, running
@@pindex hpropd
@@command{hpropd} processes.

Every slave needs a database directory, the master key (if it was used
for the database) and a keytab with the principal
@@samp{hprop/@@var{hostname}}.  Add the principal with the
@@pindex ktutil
@@command{ktutil} command and start
@@pindex hpropd
@@command{hpropd}, as follows:

@@example
slave# ktutil get -p foo/admin hprop/`hostname`
slave# mkdir /var/heimdal
slave# hpropd
@@end example

The master will use the principal @@samp{kadmin/hprop} to authenticate to
the slaves.  This principal should be added when running @@kbd{kadmin -l
init} but if you do not have it in your database for whatever reason,
please add it with @@kbd{kadmin -l add}.

Then run
@@pindex hprop
@@code{hprop} on the master:

@@example
master# hprop slave
@@end example

This was just an hands-on example to make sure that everything was
working properly.  Doing it manually is of course the wrong way, and to
automate this you will want to start
@@pindex hpropd
@@command{hpropd} from @@command{inetd} on the slave(s) and regularly run
@@pindex hprop
@@command{hprop} on the master to regularly propagate the database.
Starting the propagation once an hour from @@command{cron} is probably a
good idea.

@@node Incremental propagation, Encryption types and salting, Slave Servers, Setting up a realm
@@section Incremental propagation

There is also a newer mechanism for
doing incremental propagation in Heimdal.  Instead of sending the whole
database regularly, it sends the changes as they happen on the master to
the slaves.  The master keeps track of all the changes by assigning a
version number to every change to the database.  The slaves know which
was the latest version they saw and in this way it can be determined if
they are in sync or not.  A log of all the changes is kept on the master,
and when a slave is at an older version than the oldest one in the
log, the whole database has to be sent.

Protocol-wise, all the slaves connect to the master and as a greeting
tell it the latest version that they have (@@samp{IHAVE} message).  The
master then responds by sending all the changes between that version and
the current version at the master (a series of @@samp{FORYOU} messages)
or the whole database in a @@samp{TELLYOUEVERYTHING} message.  There is
also a keep-alive protocol that makes sure all slaves are up and running.

In addition on listening on the network to get connection from new
slaves, the ipropd-master also listens on a status unix
socket. kadmind and kpasswdd both open that socket when a transation
is done and written a notification to the socket. That cause
ipropd-master to check for new version in the log file. As a fallback in
case a notification is lost by the unix socket, the log file is
checked after 30 seconds of no event.

@@subsection Configuring incremental propagation

The program that runs on the master is @@command{ipropd-master} and all
clients run @@command{ipropd-slave}.

Create the file @@file{/var/heimdal/slaves} on the master containing all
the slaves that the database should be propagated to.  Each line contains
the full name of the principal (for example
@@samp{iprop/hemligare.foo.se@@@@FOO.SE}).

You should already have @@samp{iprop/tcp} defined as 2121, in your
@@file{/etc/services}.  Otherwise, or if you need to use a different port
for some peculiar reason, you can use the @@kbd{--port} option.  This is
useful when you have multiple realms to distribute from one server.

Then you need to create those principals that you added in the
configuration file.  Create one @@samp{iprop/hostname} for the master and
for every slave.


@@example
master# /usr/heimdal/sbin/ktutil get iprop/`hostname`
@@end example

@@example
slave# /usr/heimdal/sbin/ktutil get iprop/`hostname`
@@end example


The next step is to start the @@command{ipropd-master} process on the master
server.  The @@command{ipropd-master} listens on the UNIX domain socket
@@file{/var/heimdal/signal} to know when changes have been made to the
database so they can be propagated to the slaves.  There is also a
safety feature of testing the version number regularly (every 30
seconds) to see if it has been modified by some means that do not raise
this signal.  Then, start @@command{ipropd-slave} on all the slaves:

@@example
master# /usr/heimdal/libexec/ipropd-master &
slave#  /usr/heimdal/libexec/ipropd-slave master &
@@end example

To manage the iprop log file you should use the @@command{iprop-log}
command. With it you can dump, truncate and replay the logfile.

@@node Encryption types and salting, Credential cache server - KCM, Incremental propagation, Setting up a realm
@@section Encryption types and salting
@@cindex Salting
@@cindex Encryption types

The encryption types that the KDC is going to assign by default is
possible to change. Since the keys used for user authentication is
salted the encryption types are described together with the salt
strings.

Salting is used to make it harder to pre-calculate all possible
keys. Using a salt increases the search space to make it almost
impossible to pre-calculate all keys. Salting is the process of mixing a
public string (the salt) with the password, then sending it through an
encryption type specific string-to-key function that will output the
fixed size encryption key.

In Kerberos 5 the salt is determined by the encryption type, except in
some special cases.

In @@code{des} there is the Kerberos 4 salt
(none at all) or the afs-salt (using the cell (realm in
AFS lingo)).

In @@code{arcfour} (the encryption type that Microsoft Windows 2000 uses)
there is no salt. This is to be compatible with NTLM keys in Windows
NT 4.

@@code{[kadmin]default_keys} in @@file{krb5.conf} controls
what salting to use.

The syntax of @@code{[kadmin]default_keys} is
@@samp{[etype:]salt-type[:salt-string]}. @@samp{etype} is the encryption
type (des-cbc-crc, arcfour-hmac-md5, aes256-cts-hmac-sha1-96),
@@code{salt-type} is the type of salt (pw-salt or afs3-salt), and the
salt-string is the string that will be used as salt (remember that if
the salt is appended/prepended, the empty salt "" is the same thing as
no salt at all).

Common types of salting include

@@itemize @@bullet
@@item @@code{v4} (or @@code{des:pw-salt:})

The Kerberos 4 salting is using no salt at all. Reason there is colon
at the end of the salt string is that it makes the salt the empty
string (same as no salt).

@@item @@code{v5} (or @@code{pw-salt})

@@code{pw-salt} uses the default salt for each encryption type is
specified for. If the encryption type @@samp{etype} isn't given, all
default encryption will be used.

@@item @@code{afs3-salt}

@@code{afs3-salt} is the salt that is used with Transarc kaserver. It's
the cell name appended to the password.

@@end itemize

@@node Credential cache server - KCM, Cross realm, Encryption types and salting, Setting up a realm
@@section Credential cache server - KCM
@@cindex KCM
@@cindex Credential cache server

When KCM running is easy for users to switch between different
kerberos principals using @@file{kswitch} or built in support in
application, like OpenSSH's GSSAPIClientIdentity.

Other advantages are that there is the long term credentials are not
written to disk and on reboot the credential is removed when kcm
process stopps running.

Configure the system startup script to start the kcm process,
@@file{/usr/heimdal/libexec/kcm} and then configure the system to use kcm in @@file{krb5.conf}.

@@example
[libdefaults]
	default_cc_type = KCM
@@end example

Now when you run @@command{kinit} it doesn't overwrite your existing
credentials but rather just add them to the set of
credentials. @@command{klist -l} lists the credentials and the star
marks the default credential.

@@example
$ kinit lha@@@@KTH.SE
lha@@@@KTH.SE's Password: 
$ klist -l
  Name         Cache name               Expires         
lha@@@@KTH.SE   0                        Nov 22 23:09:40   *
lha@@@@SU.SE    Initial default ccache   Nov 22 14:14:24   
@@end example

When switching between credentials you can use @@command{kswitch}.

@@example
$ kswitch -i
     Principal
1    lha@@@@KTH.SE
2    lha@@@@SU.SE
Select number: 2
@@end example

After switching, a new set of credentials are used as default.

@@example
$ klist -l
  Name         Cache name               Expires         
lha@@@@SU.SE    Initial default ccache   Nov 22 14:14:24   *
lha@@@@KTH.SE   0                        Nov 22 23:09:40   
@@end example

Som applications, like openssh with Simon Wilkinsons patch applied,
support specifiying that credential to use.  The example below will
login to the host computer.kth.se using lha@@@@KTH.SE (not the current
default credential).

@@example
$ ssh \
   -o GSSAPIAuthentication=yes \
   -o GSSAPIKeyExchange=yes \
   -o GSSAPIClientIdentity=lha@@@@KTH.SE \
   computer.kth.se
@@end example



@@node Cross realm, Transit policy, Credential cache server - KCM, Setting up a realm
@@section Cross realm
@@cindex Cross realm

Suppose you reside in the realm @@samp{MY.REALM}, how do you
authenticate to a server in @@samp{OTHER.REALM}? Having valid tickets in
@@samp{MY.REALM} allows you to communicate with Kerberised services in that
realm. However, the computer in the other realm does not have a secret
key shared with the Kerberos server in your realm.

It is possible to share keys between two realms that trust each
other. When a client program, such as @@command{telnet} or @@command{ssh},
finds that the other computer is in a different realm, it will try to
get a ticket granting ticket for that other realm, but from the local
Kerberos server. With that ticket granting ticket, it will then obtain
service tickets from the Kerberos server in the other realm.

For a two way trust between @@samp{MY.REALM} and @@samp{OTHER.REALM}
add the following principals to each realm. The principals should be
@@samp{krbtgt/OTHER.REALM@@@@MY.REALM} and
@@samp{krbtgt/MY.REALM@@@@OTHER.REALM} in @@samp{MY.REALM}, and
@@samp{krbtgt/MY.REALM@@@@OTHER.REALM} and
@@samp{krbtgt/OTHER.REALM@@@@MY.REALM}in @@samp{OTHER.REALM}.

In Kerberos 5 the trust can be configured to be one way. So that
users from @@samp{MY.REALM} can authenticate to services in
@@samp{OTHER.REALM}, but not the opposite. In the example above, the
@@samp{krbtgt/MY.REALM@@@@OTHER.REALM} then should be removed.

The two principals must have the same key, key version number, and the
same set of encryption types. Remember to transfer the two keys in a
safe manner.

@@example
vr$ klist
Credentials cache: FILE:/tmp/krb5cc_913.console
        Principal: lha@@@@E.KTH.SE

  Issued           Expires          Principal
May  3 13:55:52  May  3 23:55:54  krbtgt/E.KTH.SE@@@@E.KTH.SE

vr$ telnet -l lha hummel.it.su.se
Trying 2001:6b0:5:1095:250:fcff:fe24:dbf...
Connected to hummel.it.su.se.
Escape character is '^]'.
Waiting for encryption to be negotiated...
[ Trying mutual KERBEROS5 (host/hummel.it.su.se@@@@SU.SE)... ]
[ Kerberos V5 accepts you as ``lha@@@@E.KTH.SE'' ]
Encryption negotiated.
Last login: Sat May  3 14:11:47 from vr.l.nxs.se
hummel$ exit

vr$ klist
Credentials cache: FILE:/tmp/krb5cc_913.console
        Principal: lha@@@@E.KTH.SE

  Issued           Expires          Principal
May  3 13:55:52  May  3 23:55:54  krbtgt/E.KTH.SE@@@@E.KTH.SE
May  3 13:55:56  May  3 23:55:54  krbtgt/SU.SE@@@@E.KTH.SE
May  3 14:10:54  May  3 23:55:54  host/hummel.it.su.se@@@@SU.SE

@@end example

@@node Transit policy, Setting up DNS, Cross realm, Setting up a realm
@@section Transit policy
@@cindex Transit policy

Under some circumstances, you may not wish to set up direct
cross-realm trust with every realm to which you wish to authenticate
or from which you wish to accept authentications. Kerberos supports
multi-hop cross-realm trust where a client principal in realm A
authenticates to a service in realm C through a realm B with which
both A and C have cross-realm trust relationships. In this situation,
A and C need not set up cross-realm principals between each other.

If you want to use cross-realm authentication through an intermediate
realm, it must be explicitly allowed by either the KDCs for the realm
to which the client is authenticating (in this case, realm C), or the
server receiving the request. This is done in @@file{krb5.conf} in the
@@code{[capaths]} section.

In addition, the client in realm A need to be configured to know how
to reach realm C via realm B. This can be done either on the client or
via KDC configuration in the KDC for realm A.

@@subsection Allowing cross-realm transits

When the ticket transits through a realm to another realm, the
destination realm adds its peer to the "transited-realms" field in the
ticket. The field is unordered, since there is no way to know if know
if one of the transited-realms changed the order of the list. For the
authentication to be accepted by the final destination realm, all of
the transited realms must be listed as trusted in the @@code{[capaths]}
configuration, either in the KDC for the destination realm or on the
server receiving the authentication.

The syntax for @@code{[capaths]} section is:

@@example
[capaths]
        CLIENT-REALM = @@{
                SERVER-REALM = PERMITTED-CROSS-REALMS ...
        @@}
@@end example

In the following example, the realm @@code{STACKEN.KTH.SE} only has
direct cross-realm set up with @@code{KTH.SE}.  @@code{KTH.SE} has
direct cross-realm set up with @@code{STACKEN.KTH.SE} and @@code{SU.SE}.
@@code{DSV.SU.SE} only has direct cross-realm set up with @@code{SU.SE}.
The goal is to allow principals in the @@code{DSV.SU.SE} or
@@code{SU.SE} realms to authenticate to services in
@@code{STACKEN.KTH.SE}.  This is done with the following
@@code{[capaths]} entry on either the server accepting authentication
or on the KDC for @@code{STACKEN.KTH.SE}.

@@example
[capaths]
	SU.SE = @@{
                    STACKEN.KTH.SE = KTH.SE
	@@}
	DSV.SU.SE = @@{
                    STACKEN.KTH.SE = SU.SE KTH.SE
	@@}
@@end example

The first entry allows cross-realm authentication from clients in
@@code{SU.SE} transiting through @@code{KTH.SE} to
@@code{STACKEN.KTH.SE}.  The second entry allows cross-realm
authentication from clients in @@code{DSV.SU.SE} transiting through
both @@code{SU.SE} and @@code{KTH.SE} to @@code{STACKEN.KTH.SE}.

Be careful of which realm goes where; it's easy to put realms in the
wrong place.  The block is tagged with the client realm (the realm of
the principal authenticating), and the realm before the equal sign is
the final destination realm: the realm to which the client is
authenticating.  After the equal sign go all the realms that the
client transits through.

The order of the @@code{PERMITTED-CROSS-REALMS} is not important when
doing transit cross realm verification.

@@subsection Configuring client cross-realm transits

The @@code{[capaths]} section is also used for another purpose: to tell
clients which realm to transit through to reach a realm with which
their local realm does not have cross-realm trust.  This can be done
by either putting a @@code{[capaths]} entry in the configuration of the
client or by putting the entry in the configuration of the KDC for the
client's local realm.  In the latter case, the KDC will then hand back
a referral to the client when the client requests a cross-realm ticket
to the destination realm, telling the client to try to go through an
intermediate realm.

For client configuration, the order of @@code{PERMITTED-CROSS-REALMS}
is significant, since only the first realm in this section (after the
equal sign) is used by the client.

For example, again consider the @@code{[capaths]} entry above for the
case of a client in the @@code{SU.SE} realm, and assume that the client
or the @@code{SU.SE} KDC has that @@code{[capaths]} entry.  If the
client attempts to authenticate to a service in the
@@code{STACKEN.KTH.SE} realm, that entry says to first authenticate
cross-realm to the @@code{KTH.SE} realm (the first realm listed in the
@@code{PERMITTED-CROSS-REALMS} section), and then from there to
@@code{STACKEN.KTH.SE}.

Each entry in @@code{[capaths]} can only give the next hop, since only
the first realm in @@code{PERMITTED-CROSS-REALMS} is used.  If, for
instance, a client in @@code{DSV.SU.SE} had a @@code{[capaths]}
configuration as above but without the first block for @@code{SU.SE},
they would not be able to reach @@code{STACKEN.KTH.SE}.  They would get
as far as @@code{SU.SE} based on the @@code{DSV.SU.SE} entry in
@@code{[capaths]} and then attempt to go directly from there to
@@code{STACKEN.KTH.SE} and get stuck (unless, of course, the
@@code{SU.SE} KDC had the additional entry required to tell the client
to go through @@code{KTH.SE}).

@@subsection Active Directory forest example

One common place where a @@code{[capaths]} configuration is desirable
is with Windows Active Directory forests.  One common Active Directory
configuration is to have one top-level Active Directory realm but then
divide systems, services, and users into child realms (perhaps based
on organizational unit).  One generally establishes cross-realm trust
only with the top-level realm, and then uses transit policy to permit
authentications to and from the child realms.

For example, suppose an organization has a Heimdal realm
@@code{EXAMPLE.COM}, a Windows Active Directory realm
@@code{WIN.EXAMPLE.COM}, and then child Active Directory realms
@@code{ENGR.WIN.EXAMPLE.COM} and @@code{SALES.WIN.EXAMPLE.COM}.  The
goal is to allow users in any of these realms to authenticate to
services in any of these realms.  The @@code{EXAMPLE.COM} KDC (and
possibly client) configuration should therefore contain a
@@code{[capaths]} section as follows:

@@example
[capaths]
	ENGR.WIN.EXAMPLE.COM = @@{
		EXAMPLE.COM = WIN.EXAMPLE.COM
	@@}
	SALES.WIN.EXAMPLE.COM = @@{
		EXAMPLE.COM = WIN.EXAMPLE.COM
	@@}
	EXAMPLE.COM = @@{
		ENGR.WIN.EXAMPLE.COM = WIN.EXAMPLE.COM
		SALES.WIN.EXAMPLE.COM = WIN.EXAMPLE.COM
	@@}
@@end example

The first two blocks allow clients in the @@code{ENGR.WIN.EXAMPLE.COM}
and @@code{SALES.WIN.EXAMPLE.COM} realms to authenticate to services in
the @@code{EXAMPLE.COM} realm.  The third block tells the client (or
tells the KDC to tell the client via referrals) to transit through
@@code{WIN.EXAMPLE.COM} to reach these realms.  Both sides of the
configuration are needed for bi-directional transited cross-realm
authentication.

@@c To test the cross realm configuration, use:
@@c    kmumble transit-check client server transit-realms ...

@@node Setting up DNS, Using LDAP to store the database, Transit policy, Setting up a realm
@@section Setting up DNS
@@cindex Setting up DNS

@@subsection Using DNS to find KDC

If there is information about where to find the KDC or kadmind for a
realm in the @@file{krb5.conf} for a realm, that information will be
preferred, and DNS will not be queried.

Heimdal will try to use DNS to find the KDCs for a realm. First it
will try to find a @@code{SRV} resource record (RR) for the realm. If no
SRV RRs are found, it will fall back to looking for an @@code{A} RR for
a machine named kerberos.REALM, and then kerberos-1.REALM, etc

Adding this information to DNS minimises the client configuration (in
the common case, resulting in no configuration needed) and allows the
system administrator to change the number of KDCs and on what machines
they are running without caring about clients.

The downside of using DNS is that the client might be fooled to use the
wrong server if someone fakes DNS replies/data, but storing the IP
addresses of the KDC on all the clients makes it very hard to change
the infrastructure.

An example of the configuration for the realm @@code{EXAMPLE.COM}:

@@example

$ORIGIN example.com.
_kerberos._tcp          SRV     10 1 88 kerberos.example.com.
_kerberos._udp          SRV     10 1 88 kerberos.example.com.
_kerberos._tcp          SRV     10 1 88 kerberos-1.example.com.
_kerberos._udp          SRV     10 1 88 kerberos-1.example.com.
_kpasswd._udp           SRV     10 1 464 kerberos.example.com.
_kerberos-adm._tcp	SRV	10 1 749 kerberos.example.com.

@@end example

More information about DNS SRV resource records can be found in
RFC-2782 (A DNS RR for specifying the location of services (DNS SRV)).

@@subsection Using DNS to map hostname to Kerberos realm

Heimdal also supports a way to lookup a realm from a hostname. This to
minimise configuration needed on clients. Using this has the drawback
that clients can be redirected by an attacker to realms within the
same cross realm trust and made to believe they are talking to the
right server (since Kerberos authentication will succeed).

An example configuration that informs clients that for the realms
it.example.com and srv.example.com, they should use the realm
EXAMPLE.COM:

@@example

$ORIGIN example.com.
_kerberos.it		TXT     "EXAMPLE.COM"
_kerberos.srv		TXT     "EXAMPLE.COM"

@@end example

@@node Using LDAP to store the database, Providing Kerberos credentials to servers and programs, Setting up DNS, Setting up a realm
@@section Using LDAP to store the database
@@cindex Using the LDAP backend

This document describes how to install the LDAP backend for
Heimdal. Note that before attempting to configure such an
installation, you should be aware of the implications of storing
private information (such as users' keys) in a directory service
primarily designed for public information. Nonetheless, with a
suitable authorisation policy, it is possible to set this up in a
secure fashion. A knowledge of LDAP, Kerberos, and C is necessary to
install this backend. The HDB schema was devised by Leif Johansson.

This assumes, OpenLDAP 2.3 or later.

Requirements:

@@itemize @@bullet

@@item
A current release of Heimdal, configured with
@@code{--with-openldap=/usr/local} (adjust according to where you have
installed OpenLDAP).

You can verify that you manage to configure LDAP support by running
@@file{kdc --builtin-hdb}, and checking that @@samp{ldap:} is one entry
in the list.

Its also possible to configure the ldap backend as a shared module,
see option --hdb-openldap-module to configure.

@@item
Configure OpenLDAP with @@kbd{--enable-local} to enable the local transport.

@@item
Add the hdb schema to the LDAP server, it's included in the source-tree
in @@file{lib/hdb/hdb.schema}. Example from slapd.conf:

@@example
include /usr/local/etc/openldap/schema/hdb.schema
@@end example

@@item
Configure the LDAP server ACLs to accept writes from clients over the
local transport. For example:

@@example
access to *
        by dn.exact="uid=heimdal,dc=services,dc=example,dc=com" write
        ...

authz-regexp "gidNumber=.*\\\+uidNumber=0,cn=peercred,cn=external,cn=auth''
	"uid=heimdal,dc=services,dc=example,dc=com"

@@end example

The sasl-regexp is for mapping between the SASL/EXTERNAL and a user in
a tree.  The user that the key is mapped to should be have a
krb5Principal aux object with krb5PrincipalName set so that the
``creator'' and ``modifier'' is right in @@file{kadmin}.

Another option is to create an admins group and add the dn to that
group.

Since Heimdal talks to the LDAP server over a UNIX domain socket, and
uses external sasl authentication, it's not possible to require
security layer quality (ssf in cyrus-sasl lingo). So that requirement
has to be turned off in OpenLDAP @@command{slapd} configuration file
@@file{slapd.conf}.

@@example
sasl-secprops minssf=0
@@end example

@@item

Start @@command{slapd} with the local listener (as well as the default TCP/IP
listener on port 389) as follows:

@@example
    slapd -h "ldapi:/// ldap:///"
@@end example

Note: These is a bug in @@command{slapd} where it appears to corrupt the krb5Key
binary attribute on shutdown. This may be related to our use of the V3
schema definition syntax instead of the old UMich-style, V2 syntax.

@@item
You should specify the distinguished name under which your
principals will be stored in @@file{krb5.conf}. Also you need to
enter the path to the kadmin acl file:


@@example
[kdc]
        database = @@{
                dbname = ldap:ou=KerberosPrincipals,dc=example,dc=com
                hdb-ldap-structural-object = inetOrgPerson
                acl_file = /path/to/kadmind.acl
                mkey_file = /path/to/mkey
        @@}
@@end example

@@samp{mkey_file} can be excluded if you feel that you trust your ldap
directory to have the raw keys inside it.  The
hdb-ldap-structural-object is not necessary if you do not need Samba
comatibility.



@@item
Once you have built Heimdal and started the LDAP server, run kadmin
(as usual) to initialise the database. Note that the instructions for
stashing a master key are as per any Heimdal installation.

@@example
kdc# kadmin -l
kadmin> init EXAMPLE.COM
Realm max ticket life [unlimited]:
Realm max renewable ticket life [unlimited]:
kadmin> add lukeh
Max ticket life [1 day]:
Max renewable life [1 week]:
Principal expiration time [never]:
Password expiration time [never]:
Attributes []:
lukeh@@@@EXAMPLE.COM's Password:
Verifying password - lukeh@@@@EXAMPLE.COM's Password:
kadmin> exit
@@end example

Verify that the principal database has indeed been stored in the
directory with the following command:

@@example
kdc# ldapsearch -L -h localhost -D cn=manager \
 -w secret -b ou=KerberosPrincipals,dc=example,dc=com \
 'objectclass=krb5KDCEntry'
@@end example

@@item
Now consider adding indexes to the database to speed up the access, at
least theses should be added to slapd.conf.

@@example
index	objectClass		eq
index	cn			eq,sub,pres
index	uid			eq,sub,pres
index	displayName		eq,sub,pres
index	krb5PrincipalName	eq
@@end example

@@end itemize

@@subsection smbk5pwd overlay

The smbk5pwd overlay, updates the krb5Key and krb5KeyVersionNumber
appropriately when it receives an LDAP Password change Extended
Operation:

@@url{http://www.openldap.org/devel/cvsweb.cgi/contrib/slapd-modules/smbk5pwd/README?hideattic=1&sortbydate=0}

@@subsection Troubleshooting guide

@@url{https://sec.miljovern.no/bin/view/Info/TroubleshootingGuide}


@@subsection Using Samba LDAP password database
@@cindex Samba

@@c @@node Using Samba LDAP password database, Providing Kerberos credentials to servers and programs, Using LDAP to store the database, Setting up a realm
@@c @@section Using Samba LDAP password database

The Samba domain and the Kerberos realm can have different names since
arcfour's string to key functions principal/realm independent.  So now
will be your first and only chance name your Kerberos realm without
needing to deal with old configuration files.

First, you should set up Samba and get that working with LDAP backend.

Now you can proceed as in @@xref{Using LDAP to store the database}.
Heimdal will pick up the Samba LDAP entries if they are in the same
search space as the Kerberos entries.

@@node Providing Kerberos credentials to servers and programs, Setting up PK-INIT, Using LDAP to store the database, Setting up a realm
@@section Providing Kerberos credentials to servers and programs

Some services require Kerberos credentials when they start to make
connections to other services or need to use them when they have started.

The easiest way to get tickets for a service is to store the key in a
keytab. Both ktutil get and kadmin ext can be used to get a
keytab. ktutil get is better in that way it changes the key/password
for the user. This is also the problem with ktutil. If ktutil is used
for the same service principal on several hosts, they keytab will only
be useful on the last host. In that case, run the extract command on
one host and then securely copy the keytab around to all other hosts
that need it.

@@example
host# ktutil -k /etc/krb5-service.keytab \
      get -p lha/admin@@@@EXAMPLE.ORG service-principal@@@@EXAMPLE.ORG
lha/admin@@@@EXAMPLE.ORG's Password:
@@end example

To get a Kerberos credential file for the service, use kinit in the
@@kbd{--keytab} mode. This will not ask for a password but instead fetch the
key from the keytab.

@@example
service@@@@host$ kinit --cache=/var/run/service_krb5_cache \
               --keytab=/etc/krb5-service.keytab \
       service-principal@@@@EXAMPLE.ORG
@@end example

Long running services might need credentials longer then the
expiration time of the tickets. kinit can run in a mode that refreshes
the tickets before they expire. This is useful for services that write
into AFS and other distributed file systems using Kerberos. To run the
long running script, just append the program and arguments (if any)
after the principal. kinit will stop refreshing credentials and remove
the credentials when the script-to-start-service exits.

@@example
service@@@@host$ kinit --cache=/var/run/service_krb5_cache \
       --keytab=/etc/krb5-service.keytab \
       service-principal@@@@EXAMPLE.ORG \
       script-to-start-service argument1 argument2
@@end example


@@node Setting up PK-INIT, Debugging Kerberos problems, Providing Kerberos credentials to servers and programs, Setting up a realm
@@section Setting up PK-INIT

PK-INIT leverages an existing PKI (public key infrastructure), using
certificates to get the initial ticket (usually the krbtgt
ticket-granting ticket).

To use PK-INIT you must first have a PKI. If you don't have one, it is
time to create it. You should first read the whole chapter of the
document to see the requirements imposed on the CA software.

A mapping between the PKI certificate and what principals that
certificate is allowed to use must exist. There are several ways to do
this. The administrator can use a configuration file, store the
principal in the SubjectAltName extension of the certificate, or store
the mapping in the principals entry in the kerberos database.

@@section Certificates

This section documents the requirements on the KDC and client
certificates and the format used in the id-pkinit-san OtherName
extention.

@@subsection KDC certificate

The certificate for the KDC has serveral requirements.

First, the certificate should have an Extended Key Usage (EKU)
id-pkkdcekuoid (1.3.6.1.5.2.3.5) set. Second, there must be a
subjectAltName otherName using OID id-pkinit-san (1.3.6.1.5.2.2) in
the type field and a DER encoded KRB5PrincipalName that matches the
name of the TGS of the target realm.  Also, if the certificate has a
nameConstraints extention with a Generalname with dNSName or iPAdress,
it must match the hostname or adress of the KDC.

The client is not required by the standard to check the server
certificate for this information if the client has external
information confirming which certificate the KDC is supposed to be
using. However, adding this information to the KDC certificate removes
the need to specially configure the client to recognize the KDC
certificate.

Remember that if the client would accept any certificate as the KDC's
certificate, the client could be fooled into trusting something that
isn't a KDC and thus expose the user to giving away information (like
a password or other private information) that it is supposed to keep
secret.

@@subsection Client certificate

The client certificate may need to have a EKU id-pkekuoid
(1.3.6.1.5.2.3.4) set depending on the certifiate on the KDC.

It possible to store the principal (if allowed by the KDC) in the
certificate and thus delegate responsibility to do the mapping between
certificates and principals to the CA.

This behavior is controlled by KDC configuration option:

@@example
[kdc]
	pkinit_principal_in_certificate = yes
@@end example

@@subsubsection Using KRB5PrincipalName in id-pkinit-san

The OtherName extention in the GeneralName is used to do the mapping
between certificate and principal.  For the KDC certificate, this
stores the krbtgt principal name for that KDC.  For the client
certificate, this stores the principal for which that certificate is
allowed to get tickets.

The principal is stored in a SubjectAltName in the certificate using
OtherName. The OID in the type is id-pkinit-san.

@@example
id-pkinit-san OBJECT IDENTIFIER ::= @@{ iso (1) org (3) dod (6)
internet (1) security (5) kerberosv5 (2) 2 @@}
@@end example

The data part of the OtherName is filled with the following DER
encoded ASN.1 structure:

@@example
KRB5PrincipalName ::= SEQUENCE @@{
	realm [0] Realm,
	principalName [1] PrincipalName
@@}
@@end example

where Realm and PrincipalName is defined by the Kerberos ASN.1
specification.

@@section Naming certificate using hx509

hx509 is the X.509 software used in Heimdal to handle
certificates. hx509 supports several different syntaxes for specifying
certificate files or formats. Several formats may be used:  PEM,
certificates embedded in PKCS#12 files, certificates embedded in
PKCS#11 devices, and raw DER encoded certificates.

Those formats may be specified as follows:

@@table @@asis

@@item DIR:

DIR specifies a directory which contains certificates in the DER or
PEM format.

The main feature of DIR is that the directory is read on demand when
iterating over certificates. This allows applications, in some
situations, to avoid having to store all certificates in memory.  It's
very useful for tests that iterate over large numbers of certificates.

The syntax is:

@@example
DIR:/path/to/der/files
@@end example

@@item FILE:

FILE: specifies a file that contains a certificate or private key.
The file can be either a PEM (openssl) file or a raw DER encoded
certificate. If it's a PEM file, it can contain several keys and
certificates and the code will try to match the private key and
certificate together. Multiple files may be specified, separated by
commas.

It's useful to have one PEM file that contains all the trust anchors.

The syntax is:

@@example
FILE:certificate.pem,private-key.key,other-cert.pem,....
@@end example

@@item PKCS11:

PKCS11: is used to handle smartcards via PKCS#11 drivers, such as
soft-token, opensc, or muscle. The argument specifies a shared object
that implements the PKCS#11 API. The default is to use all slots on
the device/token.

The syntax is:

@@example
PKCS11:shared-object.so
@@end example

@@item PKCS12:

PKCS12: is used to handle PKCS#12 files. PKCS#12 files commonly have
the extension pfx or p12.

The syntax is:

@@example
PKCS12:/path/to/file.pfx
@@end example

@@end table

@@section Configure the Kerberos software

First configure the client's trust anchors and what parameters to
verify. See the subsections below for how to do that. Then, you can
use kinit to get yourself tickets. For example:

@@example
$ kinit -C FILE:$HOME/.certs/lha.crt,$HOME/.certs/lha.key lha@@@@EXAMPLE.ORG
Enter your private key passphrase:
: lha@@@@nutcracker ; klist
Credentials cache: FILE:/tmp/krb5cc_19100a
        Principal: lha@@@@EXAMPLE.ORG

  Issued           Expires          Principal
Apr 20 02:08:08  Apr 20 12:08:08  krbtgt/EXAMPLE.ORG@@@@EXAMPLE.ORG
@@end example

Using PKCS#11 it can look like this instead:

@@example
$ kinit -C PKCS11:/usr/heimdal/lib/hx509.so lha@@@@EXAMPLE.ORG
PIN code for SoftToken (slot):
$ klist
Credentials cache: API:4
        Principal: lha@@@@EXAMPLE.ORG

  Issued           Expires          Principal
Mar 26 23:40:10  Mar 27 09:40:10  krbtgt/EXAMPLE.ORG@@@@EXAMPLE.ORG
@@end example

TODO: Write about the KDC.

@@section Configure the client

@@example
[appdefaults]
	pkinit_anchors = FILE:/path/to/trust-anchors.pem

[realms]
        EXAMPLE.COM = @@{
		pkinit_require_eku = true
		pkinit_require_krbtgt_otherName = true
		pkinit_win2k = no
		pkinit_win2k_require_binding = yes
	@@}

@@end example

@@section Configure the KDC

@@example
[kdc]
	enable-pkinit = yes
	pkinit_identity = FILE:/secure/kdc.crt,/secure/kdc.key
	pkinit_anchors = FILE:/path/to/trust-anchors.pem
	pkinit_pool = PKCS12:/path/to/useful-intermediate-certs.pfx
	pkinit_pool = FILE:/path/to/other-useful-intermediate-certs.pem
	pkinit_allow_proxy_certificate = no
	pkinit_win2k_require_binding = yes
	pkinit_principal_in_certificate = no
@@end example

@@subsection Using pki-mapping file

Note that the file name is space sensitive.

@@example
# cat /var/heimdal/pki-mapping
# comments starts with #
lha@@@@EXAMPLE.ORG:C=SE,O=Stockholm universitet,CN=Love,UID=lha
lha@@@@EXAMPLE.ORG:CN=Love,UID=lha
@@end example

@@subsection Using the Kerberos database

@@section Use hxtool to create certificates

@@subsection Generate certificates

First, you need to generate a CA certificate. This example creates a
CA certificate that will be valid for 10 years.

You need to change --subject in the command below to something
appropriate for your site.

@@example
hxtool issue-certificate \
    --self-signed \
    --issue-ca \
    --generate-key=rsa \
    --subject="CN=CA,DC=test,DC=h5l,DC=se" \
    --lifetime=10years \
    --certificate="FILE:ca.pem"
@@end example

The KDC needs to have a certificate, so generate a certificate of the
type ``pkinit-kdc'' and set the PK-INIT specifial SubjectAltName to the
name of the krbtgt of the realm.

You need to change --subject and --pk-init-principal in the command
below to something appropriate for your site.

@@example
hxtool issue-certificate \
    --ca-certificate=FILE:ca.pem \
    --generate-key=rsa \
    --type="pkinit-kdc" \
    --pk-init-principal="krbtgt/TEST.H5L.SE@@@@TEST.H5L.SE" \
    --subject="uid=kdc,DC=test,DC=h5l,DC=se" \
    --certificate="FILE:kdc.pem"
@@end example

The users also needs to have certificates. For your first client,
generate a certificate of type ``pkinit-client''. The client doesn't
need to have the PK-INIT SubjectAltName set; you can have the Subject
DN in the ACL file (pki-mapping) instead.

You need to change --subject and --pk-init-principal in the command
below to something appropriate for your site. You can omit
--pk-init-principal if you're going to use the ACL file instead.

@@example
hxtool issue-certificate \
    --ca-certificate=FILE:ca.pem \
    --generate-key=rsa \
    --type="pkinit-client" \
    --pk-init-principal="lha@@@@TEST.H5L.SE" \
    --subject="uid=lha,DC=test,DC=h5l,DC=se" \
    --certificate="FILE:user.pem"
@@end example

@@subsection Validate the certificate

hxtool also contains a tool that will validate certificates according
to rules from the PKIX document. These checks are not complete, but
they provide a good test of whether you got all of the basic bits
right in your certificates.

@@example
hxtool validate FILE:user.pem
@@end example

@@section Use OpenSSL to create certificates

This section tries to give the CA owners hints how to create
certificates using OpenSSL (or CA software based on OpenSSL).

@@subsection Using OpenSSL to create certificates with krb5PrincipalName

To make OpenSSL create certificates with krb5PrincipalName, use an
@@file{openssl.cnf} as described below. To see a complete example of
creating client and KDC certificates, see the test-data generation
script @@file{lib/hx509/data/gen-req.sh} in the source-tree. The
certicates it creates are used to test the PK-INIT functionality in
@@file{tests/kdc/check-kdc.in}.

To use this example you have to use OpenSSL 0.9.8a or later.

@@example

[user_certificate]
subjectAltName=otherName:1.3.6.1.5.2.2;SEQUENCE:princ_name

[princ_name]
realm = EXP:0, GeneralString:MY.REALM
principal_name = EXP:1, SEQUENCE:principal_seq

[principal_seq]
name_type = EXP:0, INTEGER:1
name_string = EXP:1, SEQUENCE:principals

[principals]
princ1 = GeneralString:userid

@@end example

Command usage:

@@example
openssl x509 -extensions user_certificate
openssl ca -extensions user_certificate
@@end example


@@c --- ms certificate
@@c
@@c [ new_oids ]
@@c msCertificateTemplateName       = 1.3.6.1.4.1.311.20.2
@@c
@@c
@@c [ req_smartcard ]
@@c keyUsage                = digitalSignature, keyEncipherment
@@c extendedKeyUsage        = msSmartcardLogin, clientAuth
@@c msCertificateTemplateName       = ASN1:BMP:SmartcardLogon
@@c subjectAltName          = otherName:msUPN;UTF8:lukeh@@dsg.padl.com
@@c #subjectAltName         = email:copy


@@section Using PK-INIT with Windows

@@subsection Client configration

Clients using a Windows KDC with PK-INIT need configuration since
windows uses pre-standard format and this can't be autodetected.

The pkinit_win2k_require_binding option requires the reply for the KDC
to be of the new, secure, type that binds the request to
reply. Before, clients could fake the reply from the KDC. To use this
option you have to apply a fix from Microsoft.

@@example
[realms]
        MY.MS.REALM = @@{
                pkinit_win2k = yes
                pkinit_win2k_require_binding = no
	@@}
@@end example

@@subsection Certificates

The client certificates need to have the extended keyusage ``Microsoft
Smartcardlogin'' (openssl has the OID shortname msSmartcardLogin).

See Microsoft Knowledge Base Article - 281245 ``Guidelines for Enabling
Smart Card Logon with Third-Party Certification Authorities'' for a
more extensive description of how set setup an external CA so that it
includes all the information required to make a Windows KDC happy.

@@subsection Configure Windows 2000 CA

To enable Microsoft Smartcardlogin for certificates in your Windows
2000 CA, you want to look at Microsoft Knowledge Base Article - 313274
``HOW TO: Configure a Certification Authority to Issue Smart Card
Certificates in Windows''.

@@node Debugging Kerberos problems, , Setting up PK-INIT, Setting up a realm
@@section Debugging Kerberos problems

To debug Kerberos client and server problems you can enable debug
traceing by adding the following to @@file{/etc/krb5,conf}. Note that the
trace logging is sparse at the moment, but will continue to improve.

@@example
[logging]
        libkrb5 = 0-/SYSLOG:
@@end example




@


1.10
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@d1 1
a1 1
@@c $Id$
@


1.9
log
@Typo, from Mark Peoples
@
text
@d1 1
a1 1
@@c $KTH: setup.texi,v 1.55 2005/06/07 00:54:51 lha Exp $
d7 7
d18 1
a19 1
* Serving Kerberos 4/524/kaserver::
d25 2
a26 1
* Salting::
d32 2
a35 7
A
@@cindex realm
realm is an administrative domain.  The name of a Kerberos realm is
usually the Internet domain name in uppercase.  Call your realm the same
as your Internet domain name if you do not have strong reasons for not
doing so.  It will make life easier for you and everyone else.

d40 1
a40 1
@@file{/etc/kerberosV/krb5.conf}. The @@file{krb5.conf} file can contain many
d43 1
a43 2
There is a sample @@file{krb5.conf} supplied in
@@file{/etc/kerberosV/krb5.conf.sample}.
d48 1
a48 1
@@samp{[@@samp{section-name}]}.  A binding consists of a left hand side, an equal
d50 2
a51 2
separated from the equal with some whitespace). Subsections has a
@@samp{@@{} as the first non-whitespace character after the equal. All
d60 1
a60 1
                sub-sub-section = @@{ 
d96 2
d109 8
d121 1
a121 1
@@file{/var/heimdal}, so you should probably create that directory.
d136 2
a137 2
Master key: 
Verifying password - Master key: 
d141 2
a142 2
@@kbd{--random-key} flag to kstash. This will make sure you have a good
key on which attackers can't do a dictionary attack.
d148 1
a148 1
@@samp{-l} option (to enable local database mode). First issue a
d166 1
a166 1
kadmin> add me  
d170 2
a171 2
Password: 
Verifying password - Password: 
d177 1
a177 1
# /usr/libexec/kdc &
d188 1
a188 4
You can start the KDC automatically at boot by enabling it in
@@file{/etc/rc.conf}.

If you are curious you can use the @@samp{dump} command of kadmin to list all the
d201 1
a201 1
@@node Modifying the database, keytabs, Creating the database, Setting up a realm
d206 1
a206 1
A principal have several attributes and lifetimes associated with it.
d210 1
a210 1
Both interactive editing and command switches can be used (use --help
d213 1
a213 1
There are different kind of types for the fields in the database,
d238 1
a238 1
The format for absolute times are any of the following
d250 1
a250 1
The format for relative times are any of the following combined
d263 22
a284 1
@@node keytabs, Serving Kerberos 4/524/kaserver, Modifying the database, Setting up a realm
d288 1
a288 1
need to first create the principal in the database with @@samp{ank}
d307 1
a307 6
@@node Serving Kerberos 4/524/kaserver, Remote administration, keytabs, Setting up a realm
@@section Serving Kerberos 4/524/kaserver

Support for Kerberos 4 has been removed in OpenBSD.

@@node Remote administration, Password changing, Serving Kerberos 4/524/kaserver, Setting up a realm
d310 4
a313 2
The administration server, @@command{kadmind}, can be started automatically
at boot by enabling it in @@file{/etc/rc.conf}.
d315 3
a317 1
For testing purposes, you can start it manually by running:
d319 2
a320 3
@@smallexample
# /usr/libexec/kadmind &
@@end smallexample
d322 3
a324 3
Access to the administration server is controlled by an ACL file, (default
@@file{/var/heimdal/kadmind.acl}.) The lines in the access file, have the
following syntax:
d331 1
a331 1
used.
d336 1
a336 1
@@samp{all}. All of these roughly corresponds to the different commands
d339 4
a342 4
If a @@var{glob-pattern} is given on a line, it restricts the access rights for
the principal to only apply for the subjects that match the pattern.
The patterns are of the same type as those used in shell globbing, see
@@url{none,,fnmatch(3)}.
d361 15
a375 2
To allow users to change their passwords, @@samp{kpasswdd} is started
automatically at boot if the master KDC is enabled in @@file{/etc/rc.conf}.
d381 1
a381 1
pre-authentication provides some defense against off-line attacks).
d391 1
a391 1
	policies = external-check builtin:minimum-length module:policyname
d398 3
a400 1
@@samp{policy_libraries}).
d402 1
a402 1
The builtin polices are
d408 1
a408 1
Executes the program specified by @@samp{[password_quality]external_program}. 
d410 1
a410 1
A number of key/value pairs is passed as input to the program, one per
d422 1
a422 1
doesn't approve the password, a one line error message explaining the
d438 1
a438 1
the password to have characters from at least that many characters
d441 1
a441 1
The four diffrent characters classes are, uppercase, lowercase,
d446 1
a446 1
If you want to write you own shared object that checks password
d450 3
a452 3
library can be found in @@file{lib/kadm5/sample_password_check.c} in the
source code distribution.  It requires the cracklib library built with
the patch available at
d458 2
a459 2
If no password quality checking function is configured, it is only
verified that it is at least six characters long.
d461 6
a466 5
The program @@command{test_pw_quality}, which is built in
@@file{lib/kadm5}, but not installed, can be used to check password
policy settings.  It may be convenient to set the environment variable
@@samp{KRB5_CONFIG} to point to a test version of @@file{krb5.conf}
while you're testing the @@samp{[password_quality]} stanza that way.
d482 1
a482 1
they present the same service to all the users.  The
d526 1
a526 1
f@@node Incremental propagation, Salting , Slave Servers, Setting up a realm
d529 1
a529 1
There is also a newer, and still somewhat experimental, mechanism for
d546 8
d578 5
d596 5
a600 2
@@node Salting, Cross realm, Incremental propagation, Setting up a realm
@@section Salting
d602 6
d609 1
a609 1
Salting is used to make it harder to precalculate all possible
d611 1
a611 1
impossible to precalculate all keys. Salting is the process of mixing a
d616 2
a617 2
In Kerberos 5 the salt is determined by the encryption-type, except
in some special cases.
d628 1
a628 1
what salting to use,
d632 5
a636 4
type (des, des3, arcfour), @@code{salt-type} is the type of salt (pw-salt
or afs3-salt), and the salt-string is the string that will be used as
salt (remember that if the salt is appended/prepended, the empty salt ""
is the same thing as no salt at all).
d655 1
a655 1
@@code{afs3-salt} is the salt that is used with Transarc kaserver. Its
d660 70
a729 1
@@node Cross realm, Transit policy , Salting, Setting up a realm
a762 1
@@cartouche
d767 2
a768 2
  Issued           Expires          Principal                   
May  3 13:55:52  May  3 23:55:54  krbtgt/E.KTH.SE@@@@E.KTH.SE      
d785 4
a788 4
  Issued           Expires          Principal                   
May  3 13:55:52  May  3 23:55:54  krbtgt/E.KTH.SE@@@@E.KTH.SE      
May  3 13:55:56  May  3 23:55:54  krbtgt/SU.SE@@@@E.KTH.SE         
May  3 14:10:54  May  3 23:55:54  host/hummel.it.su.se@@@@SU.SE    
a789 1
@@end cartouche
d792 1
a792 1
@@node Transit policy, Setting up DNS , Cross realm, Setting up a realm
d796 12
a807 3
If you want to use cross realm authentication through an intermediate
realm, it must be explicitly allowed by either the KDCs or the server
receiving the request. This is done in @@file{krb5.conf} in the
d810 6
d818 6
a823 2
ticket. The field is unordered, since there is no way to know if
know if one of the transited-realms changed the order of the list.
d825 1
a825 1
The syntax for @@code{[capaths]} section:
a827 1
@@cartouche
a831 1
@@end cartouche
d834 9
a842 5
The realm @@code{STACKEN.KTH.SE} allows clients from @@code{SU.SE} and
@@code{DSV.SU.SE} to cross it. Since @@code{STACKEN.KTH.SE} only have
direct cross realm with @@code{KTH.SE}, and @@code{DSV.SU.SE} only have direct cross
realm with @@code{SU.SE} they need to use both @@code{SU.SE} and
@@code{KTH.SE} as transit realms.
a844 1
@@cartouche
d852 1
d854 12
a865 2
@@end cartouche
@@end example
d870 76
a945 5
However the order is important when the @@code{[capaths]} section is used
to figure out the intermediate realm to go to when doing multi-realm
transit. When figuring out the next realm, the first realm of the list
of @@code{PERMITTED-CROSS-REALMS} is chosen. This is done in both the
client kerberos library and the KDC.
d965 2
a966 2
Adding this information to DNS makes the client have less
configuration (in the common case, no configuration) and allows the
d970 1
a970 1
The down side of using DNS that the client might be fooled to use the
d975 1
a975 1
An example of the configuration for the realm @@code{EXAMPLE.COM},
d995 1
a995 1
minimize configuration needed on clients. Using this has the drawback
d1021 1
a1021 1
suitable authorization policy, it is possible to set this up in a
d1025 2
d1044 1
a1044 3
OpenLDAP 2.0.x. Configure OpenLDAP with @@kbd{--enable-local} to enable the
local transport. (A patch to support SASL EXTERNAL authentication is
necessary in order to use OpenLDAP 2.1.x.)
d1047 1
a1047 1
Add the hdb schema to the LDAP server, its included in the source-tree
d1063 1
a1063 1
sasl-regexp "uidNumber=0\\\+gidNumber=.*,cn=peercred,cn=external,cn=auth"
d1076 2
a1077 2
Since Heimdal talkes to the LDAP server over a UNIX domain socket, and
uses external sasl authentication, its not possible to require
d1101 3
a1103 1
principals will be stored in @@file{krb5.conf}:
d1109 2
d1116 4
a1119 1
directory to have the raw keys inside it.
d1124 1
a1124 1
(as usual) to initialize the database. Note that the instructions for
d1132 1
a1132 1
kadmin> ank lukeh
d1149 1
a1149 1
 'objectclass=krb5KDCEntry' 
d1166 8
d1185 4
a1188 4
Samba domain and the Kerberos realm can have diffrent names since
arcfour's string to key function principal/realm independent.  So now
will be your first and only chance name your Kerberos without needing
to deal with old configuration files.
d1190 1
a1190 1
First you should set up Samba and get that working with LDAP backend.
d1192 1
a1192 1
Now you can proceed as in @@xref{Using LDAP to store the database},
d1196 1
a1196 1
@@node Providing Kerberos credentials to servers and programs, , Using LDAP to store the database, Setting up a realm
d1199 2
a1200 2
Some service require Kerberos credentials when they start to make
connections to other services or use them when they have started.
d1202 2
a1203 2
The easiest way to get ticket for the a service is to store the key in
a keytab. Both ktutil get and kadmin ext can be used to get a
d1205 5
a1209 4
for the user. This the problem with the ktutil. It ktutil is used for
the same service principal on several hosts, they keytab will only
useful on the last host. In that case, run the command on host and
copy the keytab around to all other hosts that needs it.
d1214 1
a1214 1
lha/admin@@@@EXAMPLE.ORG's Password: 
d1218 1
a1218 1
--keytab mode, this will not ask for a password but rather that the
d1241 415
@


1.8
log
@Merge of heimdal 0.7.2
Tested by todd & beck, ok beck.
@
text
@d129 2
a130 2
--random-key to kstash. This will make sure you have a good key
on which attackers can't do a dictionary attack.
@


1.7
log
@Merge with heimdal-0.6.3 Tested by beck@@, msf@@, me and others. ok beck@@
@
text
@d1 1
a1 1
@@c $KTH: setup.texi,v 1.27.2.2 2003/10/21 21:37:56 lha Exp $
d3 1
a3 1
@@node Setting up a realm, Things in search for a better place, Building and Installing, Top
d8 4
a11 3
* Configuration file::          
* Creating the database::       
* keytabs::                     
d13 5
a17 5
* Remote administration::       
* Password changing::           
* Testing clients and servers::  
* Slave Servers::               
* Incremental propagation::     
d22 2
d46 1
a46 1
@@samp{[section-name]}.  A binding consists of a left hand side, an equal
d48 1
a48 1
separated from the equal with some whitespace.) Subsections has a
d78 1
a78 1
realms, such as where they hide their KDC. This section serves the same
d101 2
a102 2
@@samp{libdefaults}, and @@samp{domain_realm}, sections. If you have a
SRV-record for your realm, or your Kerberos server has CNAME called
d105 1
a105 1
@@node Creating the database, keytabs, Configuration file, Setting up a realm
d110 1
a110 1
Make sure the directory have restrictive permissions.
d128 8
a135 1
To initialise the database use the @@code{kadmin} program, with the
d142 1
a142 1
about max ticket lifetimes.
d146 1
a146 1
principal. The principal should contain a realm, so if you haven't setup
d192 63
a254 1
@@node keytabs, Serving Kerberos 4/524/kaserver, Creating the database, Setting up a realm
d257 1
a257 1
To extract a service ticket from the database and put it in a keytab you
d268 1
d285 2
a286 2
The admin, @@file{kadmin} is started automatically at boot by enabling it in
@@file{/etc/rc.conf}.
d294 2
a295 2
Access to the administration server is controlled by an acl-file, (default
@@file{/var/heimdal/kadmind.acl}.) The lines in the access file, has the
d301 2
a302 2
The matching is from top to bottom for matching principal (and if given,
glob-pattern).  When there is a match, the rights of that lines are
d309 1
a309 1
in @@samp{kadmin}.
d311 1
a311 1
If a @@var{glob-pattern} is given on a line, it restricts the right for
d313 1
a313 1
The patters are of the same type as those used in shell globbing, see
d339 8
a346 6
to guess them and to avoid off-line attacks (pre-authentication provides
some defense against off-line attacks).  To ensure that the users choose
good passwords, you can enable password quality controls in
@@samp{kpasswdd}.  The controls themselves are done in a shared library
that is used by @@samp{kpasswdd}.  To configure in these controls, add
lines similar to the following to your @@file{/etc/kerberosV/krb5.conf}:
d350 3
a352 2
        check_library = @@var{library}
        check_function = @@var{function}
d355 11
a365 2
The function @@var{function} in the shared library @@var{library} will be
called for proposed new passwords.  The function should be declared as:
d367 3
d371 2
a372 2
const char *
function(krb5_context context, krb5_principal principal, krb5_data *pwd);
d374 12
d387 18
a404 4
The function should verify that @@var{pwd} is a good password for
@@var{principal} and if so return @@code{NULL}.  If it is deemed to be of
low quality, it should return a string explaining why that password
should not be used.
d412 3
d416 7
a422 1
verified that it is at least six characters of length.
d437 1
a437 1
All Kerberos servers for a realm shall have the same database so that
d440 1
a440 1
@@code{hprop} program, running on the master, will propagate the database
d443 1
a443 1
@@code{hpropd} processes.
d449 1
a449 1
@@code{ktutil} command and start
d451 1
a451 1
@@code{hpropd}, as follows:
d472 2
a473 2
This was just an on-hands example to make sure that everything was
working properly.  Doing it manually is of course the wrong way and to
d476 1
a476 1
@@code{hpropd} from @@code{inetd} on the slave(s) and regularly run
d478 2
a479 2
@@code{hprop} on the master to regularly propagate the database.
Starting the propagation once an hour from @@code{cron} is probably a
d485 1
a485 1
There is also a newer and still somewhat experimental mechanism for
d488 1
a488 1
the slaves.  The master keeps track of all the changes by assigned a
d491 2
a492 2
they are in sync or not.  A log of all the changes is kept on the master
and when a slave is at an older versioner than the oldest one in the
d495 1
a495 1
Protocol-wise, all the slaves connects to the master and as a greeting
d499 2
a500 1
or the whole database in a @@samp{TELLYOUEVERYTHING} message.
d504 2
a505 2
The program that runs on the master is @@code{ipropd-master} and all
clients run @@code{ipropd-slave}.
d517 1
a517 1
Then you need to create these principals that you added in the
d526 2
a527 2
The next step is to start the @@code{ipropd-master} process on the master
server.  The @@code{ipropd-master} listens on the UNIX-socket
d532 1
a532 1
this signal.  Then, start @@code{ipropd-slave} on all the slaves:
d547 1
a547 1
encryption-type specific string-to-key function that will output the
d555 1
a555 1
afs-lingo)).
d571 1
a571 1
Common types of salting includes
d576 2
a577 2
The Kerberos 4 salting is using no salt att all. Reason there is colon
that the end or the salt string is that it makes the salt the empty
d582 3
a584 1
@@code{pw-salt} means all regular encryption-types that is regular 
d588 2
a589 2
@@code{afs3-salt} is the salting that is used with Transarc kaserver. Its
the cell appended to the password.
d597 1
a597 1
Suppose you are residing in the realm @@samp{MY.REALM}, how do you
d599 1
a599 1
@@samp{MY.REALM} allows you to communicate with kerberised services in that
d603 2
a604 2
It is possible to add a share keys between two realms that trust each
other. When a client program, such as @@code{telnet} or @@code{ssh},
d617 1
a617 1
In Kerberos 5 the trust can be one configured to be one way. So that
d663 1
a663 1
realm it must be explicitly allowed by either the KDCs or the server
d669 1
a669 1
ticket. The field is unordered, this is since there is no way to know if
d684 1
a684 1
@@code{DSV.SU.SE} to cross in. Since @@code{STACKEN.KTH.SE} only have
d702 9
d714 1
a714 1
@@node Setting up DNS, , Transit policy, Setting up a realm
d718 2
d722 1
a722 1
preferred and DNS will not be queried.
d725 2
a726 2
will try to find @@code{SRV} resource record (RR) for the realm. If no
SRV RRs are found, it will fall back to looking for a @@code{A} RR for
d734 1
a734 1
The backside of using DNS that the client might be fooled to use the
d739 1
a739 1
Example of the configuration for the realm @@code{EXAMPLE.COM},
d755 234
@


1.6
log
@Make kerberos installation guideline a little bit more streamlined for OpenBSD.
@
text
@d1 1
a1 1
@@c $KTH: setup.texi,v 1.27 2003/03/30 21:43:00 lha Exp $
d18 3
d68 1
a68 1
For in-depth information about the contents of the config file, refer to
d73 1
a73 1
parameters, such as the default realm and the timeout for kdc
d81 1
a81 1
To continue with the realm setup, you will have to create a config file,
d89 2
a90 1
                kdc = my.kdc
d99 1
a99 1
SRV-record for your realm, or your kerberos server has CNAME called
d105 7
a111 2
The database library will look for the database in @@file{/var/heimdal},
so you should probably create that directory.
d221 1
a221 1
Access to the admin server is controlled by an acl-file, (default
d246 1
a246 1
helpdesk, so he should only be able to change the passwords for single
d322 3
a324 2
Every slave needs a keytab with a principal,
@@samp{hprop/@@var{hostname}}.  Add that with the
d332 1
d415 1
a415 1
@@node Salting, , Incremental propagation, Setting up a realm
d444 1
a444 1
salt (remember that if the salt is appened/prepended, the empty salt ""
d466 153
@


1.5
log
@Merge 0.6rc1
@
text
@d34 2
a35 1
There is a sample @@file{krb5.conf} supplied with the distribution.
d146 1
a146 1
# kdc &
d157 4
a160 1
If you are curious you can use the @@samp{dump} command to list all the
d198 1
a198 45
Heimdal can be configured to support 524, Kerberos 4 or kaserver. All
theses services are default turned off. Kerberos 4 support also
depends on if Kerberos 4 support is compiled in with heimdal.

@@subsection 524

524 is a service that allows the kdc to convert Kerberos 5 tickets to
Kerberos 4 tickets for backward compatibility. See also Using 2b
tokens with AFS in @@xref{Things in search for a better place}.

524 can be turned on by adding this to the configuration file

@@example
[kdc]
	enable-524 = yes
@@end example

@@subsection Kerberos 4

Kerberos 4 is the predecessor to to Kerberos 5. It only support single
DES. You should only enable Kerberos 4 support if you have a need for
for compatibility with an installed base of Kerberos 4 clients/servers.

Kerberos 4 can be turned on by adding this to the configuration file

@@example
[kdc]
	enable-kerberos4 = yes
@@end example

@@subsection kaserver

Kaserver is a Kerberos 4 that is used in AFS, the protocol have some
features over plain Kerberos 4, but like kerberos 4 only use single
DES too.

You should only enable Kerberos 4 support if you have a need for for
compatibility with an installed base of AFS machines.

Kaserver can be turned on by adding this to the configuration file

@@example
[kdc]
	enable-kaserver = yes
@@end example
d203 2
a204 4
The administration server, @@samp{kadmind}, can be started by
@@samp{inetd} (which isn't recommended) or run as a normal daemon. If you
want to start it from @@samp{inetd} you should add a line similar to the
one below to your @@file{/etc/inetd.conf}.
d206 1
a206 3
@@example
kerberos-adm stream     tcp     nowait  root /usr/heimdal/libexec/kadmind kadmind
@@end example
d208 3
a210 2
You might need to add @@samp{kerberos-adm} to your @@file{/etc/services}
as 749/tcp.
d251 2
a252 5
To allow users to change their passwords, you should run @@samp{kpasswdd}.
It is not run from @@samp{inetd}.

You might need to add @@samp{kpasswd} to your @@file{/etc/services} as
464/udp.
@


1.4
log
@Merge heimdal-0.4e
@
text
@d1 1
a1 1
@@c $KTH: setup.texi,v 1.25 2001/08/24 05:24:33 assar Exp $
d11 1
d169 1
a169 1
@@node keytabs, Remote administration, Creating the database, Setting up a realm
d191 50
a240 1
@@node Remote administration, Password changing, keytabs, Setting up a realm
d367 1
a367 1
slave# ktutil get -p foo/admin host/`hostname`
d487 3
a489 2
The Kerberos 4 salting is using no salt att all. Reson there is colon
that the end is that 
@


1.3
log
@Correct path in an example. Already fixed in heimdal repository.
@
text
@d1 1
a1 1
@@c $KTH: setup.texi,v 1.22 2001/02/11 17:10:34 assar Exp $
d212 4
d406 15
a420 2
impossible to precalculate all keys. In salting you just append the salt
to the password, or somehow merge the password with the salt.
d422 1
a422 4
In Kerberos 5 the salting is determined by the encryption-type, except
in case of @@code{des}. In @@code{des} there is the kerberos 4 salting
(none at all) or the afs-salting (using the cell (realm in
afs-lingo)). @@code{[kadmin]default_keys} in @@file{krb5.conf} controls
@


1.2
log
@/etc/krb5.conf -> /etc/kerberosV/krb5.conf
@
text
@d276 1
a276 1
library can be found in @@file{kpasswd/sample_password_check.c} in the
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
@@c $KTH: setup.texi,v 1.21 2001/01/29 04:39:46 assar Exp $
d30 1
a30 1
@@file{/etc/krb5.conf}. The @@file{krb5.conf} file can contain many
d254 1
a254 1
lines similar to the following to your @@file{/etc/krb5.conf}:
d310 1
a310 1
@@code{propd}, as follows:
d340 1
a340 1
@@node Incremental propagation, Salting , Slave Servers, Setting up a realm
d420 1
a420 1
@@itemize
@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.3f

Lots of changes, highlights include:

 * change default keytab to ANY:FILE:/etc/krb5.keytab,krb4:/etc/srvtab,
   the new keytab type that tries both of these in order (SRVTAB is
   also an alias for krb4:)

 * improve error reporting and error handling (error messages should
   be more detailed and more useful)

 * the API is closer to what MIT krb5 is using

 * more compatible with windows 2000

 * removed some memory leaks

 * bug fixes
@
text
@d1 1
a1 1
@@c $KTH: setup.texi,v 1.22 2001/02/11 17:10:34 assar Exp $
d420 1
a420 1
@@itemize @@bullet
@


1.1.1.3
log
@Import of heimdal-0.4e
@
text
@d1 1
a1 1
@@c $KTH: setup.texi,v 1.25 2001/08/24 05:24:33 assar Exp $
a211 4
The matching is from top to bottom for matching principal (and if given,
glob-pattern).  When there is a match, the rights of that lines are
used.

d276 1
a276 1
library can be found in @@file{lib/kadm5/sample_password_check.c} in the
d402 2
a403 15
impossible to precalculate all keys. Salting is the process of mixing a
public string (the salt) with the password, then sending it through an
encryption-type specific string-to-key function that will output the
fixed size encryption key.

In Kerberos 5 the salt is determined by the encryption-type, except
in some special cases.

In @@code{des} there is the Kerberos 4 salt
(none at all) or the afs-salt (using the cell (realm in
afs-lingo)).

In @@code{arcfour} (the encryption type that Microsoft Windows 2000 uses)
there is no salt. This is to be compatible with NTLM keys in Windows
NT 4.
d405 4
a408 1
@@code{[kadmin]default_keys} in @@file{krb5.conf} controls
@


1.1.1.4
log
@Import of heimdal-0.6rc1
@
text
@d1 1
a1 1
@@c $KTH: setup.texi,v 1.27 2003/03/30 21:43:00 lha Exp $
a10 1
* Serving Kerberos 4/524/kaserver::
d168 1
a168 1
@@node keytabs, Serving Kerberos 4/524/kaserver, Creating the database, Setting up a realm
d190 1
a190 50
@@node Serving Kerberos 4/524/kaserver, Remote administration, keytabs, Setting up a realm
@@section Serving Kerberos 4/524/kaserver

Heimdal can be configured to support 524, Kerberos 4 or kaserver. All
theses services are default turned off. Kerberos 4 support also
depends on if Kerberos 4 support is compiled in with heimdal.

@@subsection 524

524 is a service that allows the kdc to convert Kerberos 5 tickets to
Kerberos 4 tickets for backward compatibility. See also Using 2b
tokens with AFS in @@xref{Things in search for a better place}.

524 can be turned on by adding this to the configuration file

@@example
[kdc]
	enable-524 = yes
@@end example

@@subsection Kerberos 4

Kerberos 4 is the predecessor to to Kerberos 5. It only support single
DES. You should only enable Kerberos 4 support if you have a need for
for compatibility with an installed base of Kerberos 4 clients/servers.

Kerberos 4 can be turned on by adding this to the configuration file

@@example
[kdc]
	enable-kerberos4 = yes
@@end example

@@subsection kaserver

Kaserver is a Kerberos 4 that is used in AFS, the protocol have some
features over plain Kerberos 4, but like kerberos 4 only use single
DES too.

You should only enable Kerberos 4 support if you have a need for for
compatibility with an installed base of AFS machines.

Kaserver can be turned on by adding this to the configuration file

@@example
[kdc]
	enable-kaserver = yes
@@end example

@@node Remote administration, Password changing, Serving Kerberos 4/524/kaserver, Setting up a realm
d317 1
a317 1
slave# ktutil get -p foo/admin hprop/`hostname`
d437 2
a438 3
The Kerberos 4 salting is using no salt att all. Reason there is colon
that the end or the salt string is that it makes the salt the empty
string (same as no salt).
@


1.1.1.5
log
@Import of heimdal-0.6.3
@
text
@d1 1
a1 1
@@c $KTH: setup.texi,v 1.27.2.2 2003/10/21 21:37:56 lha Exp $
a17 3
* Cross realm::
* Transit policy::
* Setting up DNS::
d64 1
a64 1
For in-depth information about the contents of the configuration file, refer to
d69 1
a69 1
parameters, such as the default realm and the timeout for KDC
d77 1
a77 1
To continue with the realm setup, you will have to create a configuration file,
d85 1
a85 2
                kdc = my.kdc my.slave.kdc
                kdc = my.third.kdc
d94 1
a94 1
SRV-record for your realm, or your Kerberos server has CNAME called
d100 2
a101 7
The database library will look for the database in the directory
@@file{/var/heimdal}, so you should probably create that directory.
Make sure the directory have restrictive permissions.

@@example
# mkdir /var/heimdal
@@end example
d196 1
a196 1
depends on if Kerberos 4 support is compiled in with Heimdal.
d200 1
a200 1
524 is a service that allows the KDC to convert Kerberos 5 tickets to
d227 1
a227 1
features over plain Kerberos 4, but like Kerberos 4 only use single
d255 1
a255 1
Access to the administration server is controlled by an acl-file, (default
d280 1
a280 1
help desk, so he should only be able to change the passwords for single
d359 2
a360 3
Every slave needs a database directory, the master key (if it was used
for the database) and a keytab with the principal
@@samp{hprop/@@var{hostname}}.  Add the principal with the
a367 1
slave# mkdir /var/heimdal
d450 1
a450 1
@@node Salting, Cross realm, Incremental propagation, Setting up a realm
d479 1
a479 1
salt (remember that if the salt is appended/prepended, the empty salt ""
a500 153

@@node Cross realm, Transit policy , Salting, Setting up a realm
@@section Cross realm
@@cindex Cross realm

Suppose you are residing in the realm @@samp{MY.REALM}, how do you
authenticate to a server in @@samp{OTHER.REALM}? Having valid tickets in
@@samp{MY.REALM} allows you to communicate with kerberised services in that
realm. However, the computer in the other realm does not have a secret
key shared with the Kerberos server in your realm.

It is possible to add a share keys between two realms that trust each
other. When a client program, such as @@code{telnet} or @@code{ssh},
finds that the other computer is in a different realm, it will try to
get a ticket granting ticket for that other realm, but from the local
Kerberos server. With that ticket granting ticket, it will then obtain
service tickets from the Kerberos server in the other realm.

For a two way trust between @@samp{MY.REALM} and @@samp{OTHER.REALM}
add the following principals to each realm. The principals should be
@@samp{krbtgt/OTHER.REALM@@@@MY.REALM} and
@@samp{krbtgt/MY.REALM@@@@OTHER.REALM} in @@samp{MY.REALM}, and
@@samp{krbtgt/MY.REALM@@@@OTHER.REALM} and
@@samp{krbtgt/OTHER.REALM@@@@MY.REALM}in @@samp{OTHER.REALM}.

In Kerberos 5 the trust can be one configured to be one way. So that
users from @@samp{MY.REALM} can authenticate to services in
@@samp{OTHER.REALM}, but not the opposite. In the example above, the
@@samp{krbtgt/MY.REALM@@@@OTHER.REALM} then should be removed.

The two principals must have the same key, key version number, and the
same set of encryption types. Remember to transfer the two keys in a
safe manner.

@@example
@@cartouche
vr$ klist
Credentials cache: FILE:/tmp/krb5cc_913.console
        Principal: lha@@@@E.KTH.SE

  Issued           Expires          Principal                   
May  3 13:55:52  May  3 23:55:54  krbtgt/E.KTH.SE@@@@E.KTH.SE      

vr$ telnet -l lha hummel.it.su.se
Trying 2001:6b0:5:1095:250:fcff:fe24:dbf...
Connected to hummel.it.su.se.
Escape character is '^]'.
Waiting for encryption to be negotiated...
[ Trying mutual KERBEROS5 (host/hummel.it.su.se@@@@SU.SE)... ]
[ Kerberos V5 accepts you as ``lha@@@@E.KTH.SE'' ]
Encryption negotiated.
Last login: Sat May  3 14:11:47 from vr.l.nxs.se
hummel$ exit

vr$ klist
Credentials cache: FILE:/tmp/krb5cc_913.console
        Principal: lha@@@@E.KTH.SE

  Issued           Expires          Principal                   
May  3 13:55:52  May  3 23:55:54  krbtgt/E.KTH.SE@@@@E.KTH.SE      
May  3 13:55:56  May  3 23:55:54  krbtgt/SU.SE@@@@E.KTH.SE         
May  3 14:10:54  May  3 23:55:54  host/hummel.it.su.se@@@@SU.SE    

@@end cartouche
@@end example

@@node Transit policy, Setting up DNS , Cross realm, Setting up a realm
@@section Transit policy
@@cindex Transit policy

If you want to use cross realm authentication through an intermediate
realm it must be explicitly allowed by either the KDCs or the server
receiving the request. This is done in @@file{krb5.conf} in the
@@code{[capaths]} section.

When the ticket transits through a realm to another realm, the
destination realm adds its peer to the "transited-realms" field in the
ticket. The field is unordered, this is since there is no way to know if
know if one of the transited-realms changed the order of the list.

The syntax for @@code{[capaths]} section:

@@example
@@cartouche
[capaths]
        CLIENT-REALM = @@{
                SERVER-REALM = PERMITTED-CROSS-REALMS ...
        @@}
@@end cartouche
@@end example

The realm @@code{STACKEN.KTH.SE} allows clients from @@code{SU.SE} and
@@code{DSV.SU.SE} to cross in. Since @@code{STACKEN.KTH.SE} only have
direct cross realm with @@code{KTH.SE}, and @@code{DSV.SU.SE} only have direct cross
realm with @@code{SU.SE} they need to use both @@code{SU.SE} and
@@code{KTH.SE} as transit realms.

@@example
@@cartouche
[capaths]
	SU.SE = @@{
                    STACKEN.KTH.SE = KTH.SE
	@@}
	DSV.SU.SE = @@{
                    STACKEN.KTH.SE = SU.SE KTH.SE
	@@}

@@end cartouche
@@end example

@@c To test the cross realm configuration, use:
@@c    kmumble transit-check client server transit-realms ...

@@node Setting up DNS, , Transit policy, Setting up a realm
@@section Setting up DNS
@@cindex Setting up DNS

If there is information about where to find the KDC or kadmind for a
realm in the @@file{krb5.conf} for a realm, that information will be
preferred and DNS will not be queried.

Heimdal will try to use DNS to find the KDCs for a realm. First it
will try to find @@code{SRV} resource record (RR) for the realm. If no
SRV RRs are found, it will fall back to looking for a @@code{A} RR for
a machine named kerberos.REALM, and then kerberos-1.REALM, etc

Adding this information to DNS makes the client have less
configuration (in the common case, no configuration) and allows the
system administrator to change the number of KDCs and on what machines
they are running without caring about clients.

The backside of using DNS that the client might be fooled to use the
wrong server if someone fakes DNS replies/data, but storing the IP
addresses of the KDC on all the clients makes it very hard to change
the infrastructure.

Example of the configuration for the realm @@code{EXAMPLE.COM},

@@example

$ORIGIN example.com.
_kerberos._tcp          SRV     10 1 88 kerberos.example.com.
_kerberos._udp          SRV     10 1 88 kerberos.example.com.
_kerberos._tcp          SRV     10 1 88 kerberos-1.example.com.
_kerberos._udp          SRV     10 1 88 kerberos-1.example.com.
_kpasswd._udp           SRV     10 1 464 kerberos.example.com.
_kerberos-adm._tcp	SRV	10 1 749 kerberos.example.com.

@@end example

More information about DNS SRV resource records can be found in
RFC-2782 (A DNS RR for specifying the location of services (DNS SRV)).

@


1.1.1.6
log
@Import of heimdal-0.7.2
@
text
@d1 1
a1 1
@@c $KTH: setup.texi,v 1.55 2005/06/07 00:54:51 lha Exp $
d3 1
a3 1
@@node Setting up a realm, Applications, Building and Installing, Top
d8 3
a10 4
* Configuration file::
* Creating the database::
* Modifying the database::
* keytabs::
d12 5
a16 5
* Remote administration::
* Password changing::
* Testing clients and servers::
* Slave Servers::
* Incremental propagation::
a20 2
* Using LDAP to store the database::
* Providing Kerberos credentials to servers and programs::
d42 1
a42 1
@@samp{[@@samp{section-name}]}.  A binding consists of a left hand side, an equal
d44 1
a44 1
separated from the equal with some whitespace). Subsections has a
d74 1
a74 1
realms, such as where they hide their KDC@@. This section serves the same
d97 2
a98 2
@@samp{libdefaults}, and @@samp{domain_realm}, sections. If you have a DNS
SRV-record for your realm, or your Kerberos server has DNS CNAME
d101 1
a101 1
@@node Creating the database, Modifying the database, Configuration file, Setting up a realm
d106 1
a106 1
Make sure the directory has restrictive permissions.
d124 1
a124 8
If you want to generate a random master key you can use the
--random-key to kstash. This will make sure you have a good key
on which attackers can't do a dictionary attack.

If you have a master key, make sure you make a backup of your master
key file; without it backups of the database are of no use.

To initialise the database use the @@command{kadmin} program, with the
d131 1
a131 1
about maximum ticket lifetimes.
d135 1
a135 1
principal. The principal should contain a realm, so if you haven't set up
d178 1
a178 63
@@node Modifying the database, keytabs, Creating the database, Setting up a realm
@@section Modifying the database

All modifications of principals are done with with kadmin.

A principal have several attributes and lifetimes associated with it.

Principals are added, renamed, modified, and deleted with the kadmin
commands @@samp{add}, @@samp{rename}, @@samp{modify}, @@samp{delete}.
Both interactive editing and command switches can be used (use --help
to list the available options).

There are different kind of types for the fields in the database,
attributes, absolute time times and relative times.

@@subsection Attributes

When doing interactive editing, attributes are listed with @@samp{?}.

The attributes are given in a comma (@@samp{,}) separated list.
Attributes are removed from the list by prefixing them with @@samp{-}.

@@smallexample
kadmin> modify me
Max ticket life [1 day]:
Max renewable life [1 week]:
Principal expiration time [never]:
Password expiration time [never]:
Attributes [disallow-renewable]: requires-pre-auth,-disallow-renewable
kadmin> get me
            Principal: me@@@@MY.REALM
[...]
           Attributes: requires-pre-auth
@@end smallexample

@@subsection Absolute times

The format for absolute times are any of the following

@@smallexample
never
now
YYYY-mm-dd
YYYY-mm-dd HH:MM:SS
@@end smallexample


@@subsection Relative times

The format for relative times are any of the following combined

@@smallexample
N year
M month
O day
P hour
Q minute
R second
@@end smallexample

@@c Describe more of kadmin commands here...

@@node keytabs, Serving Kerberos 4/524/kaserver, Modifying the database, Setting up a realm
d181 1
a181 1
To extract a service ticket from the database and put it in a keytab, you
a191 1
kadmin> exit
d204 2
a205 2
these services turned off by default. Kerberos 4 support also
depends on if Kerberos 4 support being compiled in with Heimdal.
d222 2
a223 2
Kerberos 4 is the predecessor to to Kerberos 5. It only supports single
DES@@. You should only enable Kerberos 4 support if you have a need for
d235 3
a237 3
Kaserver is a Kerberos 4 that is used in AFS@@.  The protocol have some extra
features over plain Kerberos 4, but like Kerberos 4, only use single
DES@@.
d239 1
a239 1
You should only enable Kaserver support if you have a need for for
d252 3
a254 3
The administration server, @@command{kadmind}, can be started by
@@command{inetd} (which isn't recommended) or run as a normal daemon. If you
want to start it from @@command{inetd} you should add a line similar to the
d262 1
a262 1
as @@samp{749/tcp}.
d264 2
a265 2
Access to the administration server is controlled by an ACL file, (default
@@file{/var/heimdal/kadmind.acl}.) The lines in the access file, have the
d271 2
a272 2
The matching is from top to bottom for matching principals (and if given,
glob-pattern).  When there is a match, the access rights of that line are
d279 1
a279 1
in @@command{kadmin}.
d281 1
a281 1
If a @@var{glob-pattern} is given on a line, it restricts the access rights for
d283 1
a283 1
The patterns are of the same type as those used in shell globbing, see
d303 2
a304 2
To allow users to change their passwords, you should run @@command{kpasswdd}.
It is not run from @@command{inetd}.
d307 1
a307 1
@@samp{464/udp}.
d312 1
a312 2
to guess them and to avoid off-line attacks (although
pre-authentication provides
d315 2
a316 3
@@command{kpasswdd} and @@command{kadmind}.  The controls themselves are
done in a shared library or an external program that is used by
@@command{kpasswdd}.  To configure in these controls, add
d321 2
a322 3
	policies = external-check builtin:minimum-length module:policyname
	external_program = /bin/false
	policy_libraries = @@var{library1.so} @@var{library2.so}
d325 2
a326 3
In @@samp{[password_quality]policies} the module name is optional if
the policy name is unique in all modules (members of
@@samp{policy_libraries}).
a327 11
The builtin polices are

@@itemize @@bullet

@@item external-check

Executes the program specified by @@samp{[password_quality]external_program}. 

A number of key/value pairs is passed as input to the program, one per
line, ending with the string @@samp{end}.  The key/value lines are of
the form
d329 2
a330 2
principal: @@var{principal}
new-password: @@var{password}
a331 16
where @@var{password} is the password to check for the previous
@@var{principal}.

If the external application approves the password, it should return
@@samp{APPROVED} on standard out and exit with exit code 0.  If it
doesn't approve the password, a one line error message explaining the
problem should be returned on standard error and the application
should exit with exit code 0.  In case of a fatal error, the
application should, if possible, print an error message on standard
error and exit with a non-zero error code.

@@item minimum-length

The minimum length password quality check reads the configuration file
stanza @@samp{[password_quality]min_length} and requires the password
to be at least this length.
d333 4
a336 14
@@item character-class

The character-class password quality check reads the configuration
file stanza @@samp{[password_quality]min_classes}. The policy requires
the password to have characters from at least that many characters
classes. Default value if not given is 3.

The four diffrent characters classes are, uppercase, lowercase,
number, special characters.

@@end itemize

If you want to write you own shared object that checks password
policies, see the manual page @@manpage{kadm5_pwcheck,3}.
a343 3
A sample policy external program is included in
@@file{lib/kadm5/check-cracklib.pl}.

d345 1
a345 7
verified that it is at least six characters long.

The program @@command{test_pw_quality}, which is built in
@@file{lib/kadm5}, but not installed, can be used to check password
policy settings.  It may be convenient to set the environment variable
@@samp{KRB5_CONFIG} to point to a test version of @@file{krb5.conf}
while you're testing the @@samp{[password_quality]} stanza that way.
d360 1
a360 1
All Kerberos servers for a realm must have the same database so that
d363 1
a363 1
@@command{hprop} program, running on the master, will propagate the database
d366 1
a366 1
@@command{hpropd} processes.
d372 1
a372 1
@@command{ktutil} command and start
d374 1
a374 1
@@command{hpropd}, as follows:
d395 2
a396 2
This was just an hands-on example to make sure that everything was
working properly.  Doing it manually is of course the wrong way, and to
d399 1
a399 1
@@command{hpropd} from @@command{inetd} on the slave(s) and regularly run
d401 2
a402 2
@@command{hprop} on the master to regularly propagate the database.
Starting the propagation once an hour from @@command{cron} is probably a
d408 1
a408 1
There is also a newer, and still somewhat experimental, mechanism for
d411 1
a411 1
the slaves.  The master keeps track of all the changes by assigning a
d414 2
a415 2
they are in sync or not.  A log of all the changes is kept on the master,
and when a slave is at an older version than the oldest one in the
d418 1
a418 1
Protocol-wise, all the slaves connect to the master and as a greeting
d422 1
a422 2
or the whole database in a @@samp{TELLYOUEVERYTHING} message.  There is
also a keep-alive protocol that makes sure all slaves are up and running.
d426 2
a427 2
The program that runs on the master is @@command{ipropd-master} and all
clients run @@command{ipropd-slave}.
d439 1
a439 1
Then you need to create those principals that you added in the
d448 2
a449 2
The next step is to start the @@command{ipropd-master} process on the master
server.  The @@command{ipropd-master} listens on the UNIX domain socket
d454 1
a454 1
this signal.  Then, start @@command{ipropd-slave} on all the slaves:
d469 1
a469 1
encryption type specific string-to-key function that will output the
d477 1
a477 1
AFS lingo)).
d493 1
a493 1
Common types of salting include
d498 2
a499 2
The Kerberos 4 salting is using no salt at all. Reason there is colon
at the end of the salt string is that it makes the salt the empty
d504 1
a504 3
@@code{pw-salt} uses the default salt for each encryption type is
specified for. If the encryption type @@samp{etype} isn't given, all
default encryption will be used.
d508 2
a509 2
@@code{afs3-salt} is the salt that is used with Transarc kaserver. Its
the cell name appended to the password.
d517 1
a517 1
Suppose you reside in the realm @@samp{MY.REALM}, how do you
d519 1
a519 1
@@samp{MY.REALM} allows you to communicate with Kerberised services in that
d523 2
a524 2
It is possible to share keys between two realms that trust each
other. When a client program, such as @@command{telnet} or @@command{ssh},
d537 1
a537 1
In Kerberos 5 the trust can be configured to be one way. So that
d583 1
a583 1
realm, it must be explicitly allowed by either the KDCs or the server
d589 1
a589 1
ticket. The field is unordered, since there is no way to know if
d604 1
a604 1
@@code{DSV.SU.SE} to cross it. Since @@code{STACKEN.KTH.SE} only have
a621 9
The order of the @@code{PERMITTED-CROSS-REALMS} is not important when
doing transit cross realm verification.

However the order is important when the @@code{[capaths]} section is used
to figure out the intermediate realm to go to when doing multi-realm
transit. When figuring out the next realm, the first realm of the list
of @@code{PERMITTED-CROSS-REALMS} is chosen. This is done in both the
client kerberos library and the KDC.

d625 1
a625 1
@@node Setting up DNS, Using LDAP to store the database, Transit policy, Setting up a realm
a628 2
@@subsection Using DNS to find KDC

d631 1
a631 1
preferred, and DNS will not be queried.
d634 2
a635 2
will try to find a @@code{SRV} resource record (RR) for the realm. If no
SRV RRs are found, it will fall back to looking for an @@code{A} RR for
d643 1
a643 1
The down side of using DNS that the client might be fooled to use the
d648 1
a648 1
An example of the configuration for the realm @@code{EXAMPLE.COM},
a663 234

@@subsection Using DNS to map hostname to Kerberos realm

Heimdal also supports a way to lookup a realm from a hostname. This to
minimize configuration needed on clients. Using this has the drawback
that clients can be redirected by an attacker to realms within the
same cross realm trust and made to believe they are talking to the
right server (since Kerberos authentication will succeed).

An example configuration that informs clients that for the realms
it.example.com and srv.example.com, they should use the realm
EXAMPLE.COM:

@@example

$ORIGIN example.com.
_kerberos.it		TXT     "EXAMPLE.COM"
_kerberos.srv		TXT     "EXAMPLE.COM"

@@end example

@@node Using LDAP to store the database, Providing Kerberos credentials to servers and programs, Setting up DNS, Setting up a realm
@@section Using LDAP to store the database
@@cindex Using the LDAP backend

This document describes how to install the LDAP backend for
Heimdal. Note that before attempting to configure such an
installation, you should be aware of the implications of storing
private information (such as users' keys) in a directory service
primarily designed for public information. Nonetheless, with a
suitable authorization policy, it is possible to set this up in a
secure fashion. A knowledge of LDAP, Kerberos, and C is necessary to
install this backend. The HDB schema was devised by Leif Johansson.

Requirements:

@@itemize @@bullet

@@item
A current release of Heimdal, configured with
@@code{--with-openldap=/usr/local} (adjust according to where you have
installed OpenLDAP).

You can verify that you manage to configure LDAP support by running
@@file{kdc --builtin-hdb}, and checking that @@samp{ldap:} is one entry
in the list.

Its also possible to configure the ldap backend as a shared module,
see option --hdb-openldap-module to configure.

@@item
OpenLDAP 2.0.x. Configure OpenLDAP with @@kbd{--enable-local} to enable the
local transport. (A patch to support SASL EXTERNAL authentication is
necessary in order to use OpenLDAP 2.1.x.)

@@item
Add the hdb schema to the LDAP server, its included in the source-tree
in @@file{lib/hdb/hdb.schema}. Example from slapd.conf:

@@example
include /usr/local/etc/openldap/schema/hdb.schema
@@end example

@@item
Configure the LDAP server ACLs to accept writes from clients over the
local transport. For example:

@@example
access to *
        by dn.exact="uid=heimdal,dc=services,dc=example,dc=com" write
        ...

sasl-regexp "uidNumber=0\\\+gidNumber=.*,cn=peercred,cn=external,cn=auth"
	"uid=heimdal,dc=services,dc=example,dc=com"

@@end example

The sasl-regexp is for mapping between the SASL/EXTERNAL and a user in
a tree.  The user that the key is mapped to should be have a
krb5Principal aux object with krb5PrincipalName set so that the
``creator'' and ``modifier'' is right in @@file{kadmin}.

Another option is to create an admins group and add the dn to that
group.

Since Heimdal talkes to the LDAP server over a UNIX domain socket, and
uses external sasl authentication, its not possible to require
security layer quality (ssf in cyrus-sasl lingo). So that requirement
has to be turned off in OpenLDAP @@command{slapd} configuration file
@@file{slapd.conf}.

@@example
sasl-secprops minssf=0
@@end example

@@item

Start @@command{slapd} with the local listener (as well as the default TCP/IP
listener on port 389) as follows:

@@example
    slapd -h "ldapi:/// ldap:///"
@@end example

Note: These is a bug in @@command{slapd} where it appears to corrupt the krb5Key
binary attribute on shutdown. This may be related to our use of the V3
schema definition syntax instead of the old UMich-style, V2 syntax.

@@item
You should specify the distinguished name under which your
principals will be stored in @@file{krb5.conf}:

@@example
[kdc]
        database = @@{
                dbname = ldap:ou=KerberosPrincipals,dc=example,dc=com
                mkey_file = /path/to/mkey
        @@}
@@end example

@@samp{mkey_file} can be excluded if you feel that you trust your ldap
directory to have the raw keys inside it.


@@item
Once you have built Heimdal and started the LDAP server, run kadmin
(as usual) to initialize the database. Note that the instructions for
stashing a master key are as per any Heimdal installation.

@@example
kdc# kadmin -l
kadmin> init EXAMPLE.COM
Realm max ticket life [unlimited]:
Realm max renewable ticket life [unlimited]:
kadmin> ank lukeh
Max ticket life [1 day]:
Max renewable life [1 week]:
Principal expiration time [never]:
Password expiration time [never]:
Attributes []:
lukeh@@@@EXAMPLE.COM's Password:
Verifying password - lukeh@@@@EXAMPLE.COM's Password:
kadmin> exit
@@end example

Verify that the principal database has indeed been stored in the
directory with the following command:

@@example
kdc# ldapsearch -L -h localhost -D cn=manager \
 -w secret -b ou=KerberosPrincipals,dc=example,dc=com \
 'objectclass=krb5KDCEntry' 
@@end example

@@item
Now consider adding indexes to the database to speed up the access, at
least theses should be added to slapd.conf.

@@example
index	objectClass		eq
index	cn			eq,sub,pres
index	uid			eq,sub,pres
index	displayName		eq,sub,pres
index	krb5PrincipalName	eq
@@end example

@@end itemize

@@subsection Troubleshooting guide

@@url{https://sec.miljovern.no/bin/view/Info/TroubleshootingGuide}


@@subsection Using Samba LDAP password database
@@cindex Samba

@@c @@node Using Samba LDAP password database, Providing Kerberos credentials to servers and programs, Using LDAP to store the database, Setting up a realm
@@c @@section Using Samba LDAP password database

Samba domain and the Kerberos realm can have diffrent names since
arcfour's string to key function principal/realm independent.  So now
will be your first and only chance name your Kerberos without needing
to deal with old configuration files.

First you should set up Samba and get that working with LDAP backend.

Now you can proceed as in @@xref{Using LDAP to store the database},
Heimdal will pick up the Samba LDAP entries if they are in the same
search space as the Kerberos entries.

@@node Providing Kerberos credentials to servers and programs, , Using LDAP to store the database, Setting up a realm
@@section Providing Kerberos credentials to servers and programs

Some service require Kerberos credentials when they start to make
connections to other services or use them when they have started.

The easiest way to get ticket for the a service is to store the key in
a keytab. Both ktutil get and kadmin ext can be used to get a
keytab. ktutil get is better in that way it changes the key/password
for the user. This the problem with the ktutil. It ktutil is used for
the same service principal on several hosts, they keytab will only
useful on the last host. In that case, run the command on host and
copy the keytab around to all other hosts that needs it.

@@example
host# ktutil -k /etc/krb5-service.keytab \
      get -p lha/admin@@@@EXAMPLE.ORG service-principal@@@@EXAMPLE.ORG
lha/admin@@@@EXAMPLE.ORG's Password: 
@@end example

To get a Kerberos credential file for the service, use kinit in the
--keytab mode, this will not ask for a password but rather that the
key from the keytab.

@@example
service@@@@host$ kinit --cache=/var/run/service_krb5_cache \
               --keytab=/etc/krb5-service.keytab \
       service-principal@@@@EXAMPLE.ORG
@@end example

Long running services might need credentials longer then the
expiration time of the tickets. kinit can run in a mode that refreshes
the tickets before they expire. This is useful for services that write
into AFS and other distributed file systems using Kerberos. To run the
long running script, just append the program and arguments (if any)
after the principal. kinit will stop refreshing credentials and remove
the credentials when the script-to-start-service exits.

@@example
service@@@@host$ kinit --cache=/var/run/service_krb5_cache \
       --keytab=/etc/krb5-service.keytab \
       service-principal@@@@EXAMPLE.ORG \
       script-to-start-service argument1 argument2
@@end example
@


