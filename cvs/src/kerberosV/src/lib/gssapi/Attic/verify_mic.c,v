head	1.2;
access;
symbols
	OPENBSD_5_3:1.1.1.7.0.28
	OPENBSD_5_3_BASE:1.1.1.7
	OPENBSD_5_2:1.1.1.7.0.26
	OPENBSD_5_2_BASE:1.1.1.7
	OPENBSD_5_1_BASE:1.1.1.7
	OPENBSD_5_1:1.1.1.7.0.24
	OPENBSD_5_0:1.1.1.7.0.22
	OPENBSD_5_0_BASE:1.1.1.7
	OPENBSD_4_9:1.1.1.7.0.20
	OPENBSD_4_9_BASE:1.1.1.7
	OPENBSD_4_8:1.1.1.7.0.18
	OPENBSD_4_8_BASE:1.1.1.7
	OPENBSD_4_7:1.1.1.7.0.14
	OPENBSD_4_7_BASE:1.1.1.7
	OPENBSD_4_6:1.1.1.7.0.16
	OPENBSD_4_6_BASE:1.1.1.7
	OPENBSD_4_5:1.1.1.7.0.12
	OPENBSD_4_5_BASE:1.1.1.7
	OPENBSD_4_4:1.1.1.7.0.10
	OPENBSD_4_4_BASE:1.1.1.7
	OPENBSD_4_3:1.1.1.7.0.8
	OPENBSD_4_3_BASE:1.1.1.7
	OPENBSD_4_2:1.1.1.7.0.6
	OPENBSD_4_2_BASE:1.1.1.7
	OPENBSD_4_1:1.1.1.7.0.4
	OPENBSD_4_1_BASE:1.1.1.7
	OPENBSD_4_0:1.1.1.7.0.2
	OPENBSD_4_0_BASE:1.1.1.7
	HEIMDAL_0_7_2:1.1.1.7
	OPENBSD_3_9:1.1.1.6.0.6
	OPENBSD_3_9_BASE:1.1.1.6
	OPENBSD_3_8:1.1.1.6.0.4
	OPENBSD_3_8_BASE:1.1.1.6
	OPENBSD_3_7:1.1.1.6.0.2
	OPENBSD_3_7_BASE:1.1.1.6
	HEIMDAL_0_6_3:1.1.1.6
	OPENBSD_3_6:1.1.1.5.0.6
	OPENBSD_3_6_BASE:1.1.1.5
	OPENBSD_3_5:1.1.1.5.0.4
	OPENBSD_3_5_BASE:1.1.1.5
	OPENBSD_3_4:1.1.1.5.0.2
	OPENBSD_3_4_BASE:1.1.1.5
	HEIMDAL_0_6:1.1.1.5
	HEIMDAL_0_6RC1:1.1.1.4
	OPENBSD_3_3:1.1.1.3.0.6
	OPENBSD_3_3_BASE:1.1.1.3
	OPENBSD_3_2:1.1.1.3.0.4
	OPENBSD_3_2_BASE:1.1.1.3
	OPENBSD_3_1:1.1.1.3.0.2
	OPENBSD_3_1_BASE:1.1.1.3
	HEIMDAL_0_4e:1.1.1.3
	OPENBSD_3_0:1.1.1.2.0.2
	OPENBSD_3_0_BASE:1.1.1.2
	HEIMDAL_0_3f:1.1.1.2
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2013.06.17.18.57.43;	author robert;	state dead;
branches;
next	1.1;

1.1
date	2001.05.25.07.50.11;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.50.11;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.06.22.21.22.47;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.02.06.08.55.08;	author hin;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.05.11.02.15.41;	author hin;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.05.13.02.59.52;	author hin;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.10.29.15.55.34;	author biorn;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2006.04.14.07.33.00;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.2
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@/*
 * Copyright (c) 1997 - 2001 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
 *
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
 *
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
 *
 * 3. Neither the name of the Institute nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission. 
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE. 
 */

#include "gssapi_locl.h"

RCSID("$KTH: verify_mic.c,v 1.12 2001/01/29 02:08:59 assar Exp $");

static OM_uint32
verify_mic_des
           (OM_uint32 * minor_status,
            const gss_ctx_id_t context_handle,
            const gss_buffer_t message_buffer,
            const gss_buffer_t token_buffer,
            gss_qop_t * qop_state,
	    krb5_keyblock *key
	    )
{
  u_char *p;
  MD5_CTX md5;
  u_char hash[16], seq_data[8];
  des_key_schedule schedule;
  des_cblock zero;
  des_cblock deskey;
  int32_t seq_number;
  OM_uint32 ret;

  p = token_buffer->value;
  ret = gssapi_krb5_verify_header (&p,
				   token_buffer->length,
				   "\x01\x01");
  if (ret)
      return ret;

  if (memcmp(p, "\x00\x00", 2) != 0)
      return GSS_S_BAD_SIG;
  p += 2;
  if (memcmp (p, "\xff\xff\xff\xff", 4) != 0)
    return GSS_S_BAD_MIC;
  p += 4;
  p += 16;

  /* verify checksum */
  MD5_Init (&md5);
  MD5_Update (&md5, p - 24, 8);
  MD5_Update (&md5, message_buffer->value,
	     message_buffer->length);
  MD5_Final (hash, &md5);

  memset (&zero, 0, sizeof(zero));
  memcpy (&deskey, key->keyvalue.data, sizeof(deskey));

  des_set_key (&deskey, schedule);
  des_cbc_cksum ((void *)hash, (void *)hash, sizeof(hash),
		 schedule, &zero);
  if (memcmp (p - 8, hash, 8) != 0) {
    memset (deskey, 0, sizeof(deskey));
    memset (schedule, 0, sizeof(schedule));
    return GSS_S_BAD_MIC;
  }

  /* verify sequence number */
  
  krb5_auth_getremoteseqnumber (gssapi_krb5_context,
				context_handle->auth_context,
				&seq_number);
  seq_data[0] = (seq_number >> 0)  & 0xFF;
  seq_data[1] = (seq_number >> 8)  & 0xFF;
  seq_data[2] = (seq_number >> 16) & 0xFF;
  seq_data[3] = (seq_number >> 24) & 0xFF;
  memset (seq_data + 4,
	  (context_handle->more_flags & LOCAL) ? 0xFF : 0,
	  4);

  p -= 16;
  des_set_key (&deskey, schedule);
  des_cbc_encrypt ((void *)p, (void *)p, 8,
		   schedule, (des_cblock *)hash, DES_DECRYPT);

  memset (deskey, 0, sizeof(deskey));
  memset (schedule, 0, sizeof(schedule));

  if (memcmp (p, seq_data, 8) != 0) {
    return GSS_S_BAD_MIC;
  }

  krb5_auth_setremoteseqnumber (gssapi_krb5_context,
				context_handle->auth_context,
				++seq_number);

  return GSS_S_COMPLETE;
}

static OM_uint32
verify_mic_des3
           (OM_uint32 * minor_status,
            const gss_ctx_id_t context_handle,
            const gss_buffer_t message_buffer,
            const gss_buffer_t token_buffer,
            gss_qop_t * qop_state,
	    krb5_keyblock *key
	    )
{
  u_char *p;
  u_char seq[8];
  int32_t seq_number;
  OM_uint32 ret;
  krb5_crypto crypto;
  krb5_data seq_data;
  int cmp;
  Checksum csum;
  char *tmp;
  
  p = token_buffer->value;
  ret = gssapi_krb5_verify_header (&p,
				   token_buffer->length,
				   "\x01\x01");
  if (ret)
      return ret;

  if (memcmp(p, "\x04\x00", 2) != 0) /* SGN_ALG = HMAC SHA1 DES3-KD */
      return GSS_S_BAD_SIG;
  p += 2;
  if (memcmp (p, "\xff\xff\xff\xff", 4) != 0)
    return GSS_S_BAD_MIC;
  p += 4;

  ret = krb5_crypto_init(gssapi_krb5_context, key,
			 ETYPE_DES3_CBC_NONE, &crypto);
  if (ret){
      *minor_status = ret;
      return GSS_S_FAILURE;
  }

  /* verify sequence number */

  ret = krb5_decrypt (gssapi_krb5_context,
		      crypto,
		      KRB5_KU_USAGE_SEQ,
		      p, 8, &seq_data);
  if (ret) {
      krb5_crypto_destroy (gssapi_krb5_context, crypto);
      *minor_status = ret;
      return GSS_S_FAILURE;
  }

  if (seq_data.length != 8) {
      krb5_crypto_destroy (gssapi_krb5_context, crypto);
      krb5_data_free (&seq_data);
      return GSS_S_BAD_MIC;
  }

  krb5_auth_getremoteseqnumber (gssapi_krb5_context,
				context_handle->auth_context,
				&seq_number);
  seq[0] = (seq_number >> 0)  & 0xFF;
  seq[1] = (seq_number >> 8)  & 0xFF;
  seq[2] = (seq_number >> 16) & 0xFF;
  seq[3] = (seq_number >> 24) & 0xFF;
  memset (seq + 4,
	  (context_handle->more_flags & LOCAL) ? 0xFF : 0,
	  4);
  cmp = memcmp (seq, seq_data.data, seq_data.length);
  krb5_data_free (&seq_data);
  if (cmp != 0) {
      krb5_crypto_destroy (gssapi_krb5_context, crypto);
      return GSS_S_BAD_MIC;
  }

  /* verify checksum */

  tmp = malloc (message_buffer->length + 8);
  if (tmp == NULL) {
      krb5_crypto_destroy (gssapi_krb5_context, crypto);
      *minor_status = ENOMEM;
      return GSS_S_FAILURE;
  }

  memcpy (tmp, p - 8, 8);
  memcpy (tmp + 8, message_buffer->value, message_buffer->length);

  csum.cksumtype = CKSUMTYPE_HMAC_SHA1_DES3;
  csum.checksum.length = 20;
  csum.checksum.data   = p + 8;

  ret = krb5_verify_checksum (gssapi_krb5_context, crypto,
			      KRB5_KU_USAGE_SIGN,
			      tmp, message_buffer->length + 8,
			      &csum);
  free (tmp);
  if (ret) {
      krb5_crypto_destroy (gssapi_krb5_context, crypto);
      *minor_status = ret;
      return GSS_S_BAD_MIC;
  }

  krb5_auth_setremoteseqnumber (gssapi_krb5_context,
				context_handle->auth_context,
				++seq_number);

  krb5_crypto_destroy (gssapi_krb5_context, crypto);
  return GSS_S_COMPLETE;
}

OM_uint32
gss_verify_mic
           (OM_uint32 * minor_status,
            const gss_ctx_id_t context_handle,
            const gss_buffer_t message_buffer,
            const gss_buffer_t token_buffer,
            gss_qop_t * qop_state
	    )
{
    krb5_keyblock *key;
    OM_uint32 ret;
    krb5_keytype keytype;

    ret = krb5_auth_con_getremotesubkey (gssapi_krb5_context,
					 context_handle->auth_context,
					 &key);
    if (ret) {
	*minor_status = ret;
	return GSS_S_FAILURE;
    }
    krb5_enctype_to_keytype (gssapi_krb5_context, key->keytype, &keytype);
    switch (keytype) {
    case KEYTYPE_DES :
	ret = verify_mic_des (minor_status, context_handle,
			      message_buffer, token_buffer, qop_state, key);
	break;
    case KEYTYPE_DES3 :
	ret = verify_mic_des3 (minor_status, context_handle,
			       message_buffer, token_buffer, qop_state, key);
	break;
    default :
	*minor_status = KRB5_PROG_ETYPE_NOSUPP;
	ret = GSS_S_FAILURE;
	break;
    }
    krb5_free_keyblock (gssapi_krb5_context, key);
    return ret;
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.3f

Lots of changes, highlights include:

 * change default keytab to ANY:FILE:/etc/krb5.keytab,krb4:/etc/srvtab,
   the new keytab type that tries both of these in order (SRVTAB is
   also an alias for krb4:)

 * improve error reporting and error handling (error messages should
   be more detailed and more useful)

 * the API is closer to what MIT krb5 is using

 * more compatible with windows 2000

 * removed some memory leaks

 * bug fixes
@
text
@d36 1
a36 1
RCSID("$KTH: verify_mic.c,v 1.13 2001/05/11 09:16:47 assar Exp $");
a159 1
      gssapi_krb5_set_error_string ();
a170 1
      gssapi_krb5_set_error_string ();
a220 1
      gssapi_krb5_set_error_string ();
a250 1
	gssapi_krb5_set_error_string ();
@


1.1.1.3
log
@Import of heimdal-0.4e
@
text
@d36 1
a36 1
RCSID("$KTH: verify_mic.c,v 1.15 2001/08/23 04:35:55 assar Exp $");
d61 1
a61 2
  if (ret) {
      *minor_status = 0;
a62 1
  }
d116 1
a116 1
  krb5_auth_con_setremoteseqnumber (gssapi_krb5_context,
d147 1
a147 2
  if (ret) {
      *minor_status = 0;
a148 1
  }
d229 1
a229 1
  krb5_auth_con_setremoteseqnumber (gssapi_krb5_context,
d250 3
a252 1
    ret = gss_krb5_get_remotekey(context_handle, &key);
@


1.1.1.4
log
@Import of heimdal-0.6rc1
@
text
@d2 1
a2 1
 * Copyright (c) 1997 - 2003 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$Id$");
d45 1
a45 2
	    krb5_keyblock *key,
	    char *type
d60 1
a60 1
				   type);
a89 1
    *minor_status = 0;
a114 1
    *minor_status = 0;
a121 1
  *minor_status = 0;
d132 1
a132 2
	    krb5_keyblock *key,
	    char *type
d141 1
a141 1
  int cmp, docompat;
a143 1
  char ivec[8];
d148 1
a148 1
				   type);
d170 5
a174 11
  docompat = (context_handle->more_flags & COMPAT_OLD_DES3);
retry:
  if (docompat)
      memset(ivec, 0, 8);
  else
      memcpy(ivec, p + 8, 8);

  ret = krb5_decrypt_ivec (gssapi_krb5_context,
			   crypto,
			   KRB5_KU_USAGE_SEQ,
			   p, 8, &seq_data, ivec);
d176 4
a179 7
      if (docompat++) {
	  gssapi_krb5_set_error_string ();
	  krb5_crypto_destroy (gssapi_krb5_context, crypto);
	  *minor_status = ret;
	  return GSS_S_FAILURE;
      } else
	  goto retry;
d183 1
d185 1
a185 5
      if (docompat++) {
	  krb5_crypto_destroy (gssapi_krb5_context, crypto);
	  return GSS_S_BAD_MIC;
      } else
	  goto retry;
d201 2
a202 5
      if (docompat++) {
	  krb5_crypto_destroy (gssapi_krb5_context, crypto);
	  return GSS_S_BAD_MIC;
      } else
	  goto retry;
a237 1
  *minor_status = 0;
d242 1
a242 1
gss_verify_mic_internal
d247 1
a247 2
            gss_qop_t * qop_state,
	    char * type
d264 1
a264 2
			      message_buffer, token_buffer, qop_state, key,
			      type);
d268 1
a268 2
			       message_buffer, token_buffer, qop_state, key,
			       type);
a275 22
    
    return ret;
}

OM_uint32
gss_verify_mic
           (OM_uint32 * minor_status,
            const gss_ctx_id_t context_handle,
            const gss_buffer_t message_buffer,
            const gss_buffer_t token_buffer,
            gss_qop_t * qop_state
	    )
{
    OM_uint32 ret;

    if (qop_state != NULL)
	*qop_state = GSS_C_QOP_DEFAULT;

    ret = gss_verify_mic_internal(minor_status, context_handle, 
				  message_buffer, token_buffer,
				  qop_state, "\x01\x01");

@


1.1.1.5
log
@Import of heimdal-0.6, released earlier today.
@
text
@d36 1
a36 1
RCSID("$KTH: verify_mic.c,v 1.18.2.2 2003/05/05 18:59:42 lha Exp $");
d176 1
a176 1
  docompat = 0;
@


1.1.1.6
log
@Import of heimdal-0.6.3
@
text
@d36 1
a36 1
RCSID("$KTH: verify_mic.c,v 1.18.2.4 2003/09/18 22:05:34 lha Exp $");
d62 2
a63 1
  if (ret)
d65 1
d91 1
d117 1
d125 1
d155 2
a156 1
  if (ret)
d158 1
d259 1
a282 1
    *minor_status = 0;
a293 5
	break;
    case KEYTYPE_ARCFOUR :
	ret = _gssapi_verify_mic_arcfour (minor_status, context_handle,
					  message_buffer, token_buffer,
					  qop_state, key, type);
@


1.1.1.7
log
@Import of heimdal-0.7.2
@
text
@d36 1
a36 1
RCSID("$KTH: verify_mic.c,v 1.32 2005/04/27 17:51:04 lha Exp $");
d51 4
a54 4
  u_char hash[16], *seq;
  DES_key_schedule schedule;
  DES_cblock zero;
  DES_cblock deskey;
a56 1
  int cmp;
d61 1
a61 2
				   type,
				   GSS_KRB5_MECHANISM);
d83 3
a85 3
  DES_set_key (&deskey, &schedule);
  DES_cbc_cksum ((void *)hash, (void *)hash, sizeof(hash),
		 &schedule, &zero);
d88 1
a88 1
    memset (&schedule, 0, sizeof(schedule));
d94 10
a103 1
  HEIMDAL_MUTEX_lock(&context_handle->ctx_id_mutex);
d106 3
a108 3
  DES_set_key (&deskey, &schedule);
  DES_cbc_encrypt ((void *)p, (void *)p, 8,
		   &schedule, (DES_cblock *)hash, DES_DECRYPT);
d111 1
a111 1
  memset (&schedule, 0, sizeof(schedule));
d113 1
a113 10
  seq = p;
  gssapi_decode_om_uint32(seq, &seq_number);

  if (context_handle->more_flags & LOCAL)
      cmp = memcmp(&seq[4], "\xff\xff\xff\xff", 4);
  else
      cmp = memcmp(&seq[4], "\x00\x00\x00\x00", 4);

  if (cmp != 0) {
    HEIMDAL_MUTEX_unlock(&context_handle->ctx_id_mutex);
d117 3
a119 7
  ret = _gssapi_msg_order_check(context_handle->order, seq_number);
  if (ret) {
      HEIMDAL_MUTEX_unlock(&context_handle->ctx_id_mutex);
      return ret;
  }

  HEIMDAL_MUTEX_unlock(&context_handle->ctx_id_mutex);
d136 1
a136 1
  u_char *seq;
d149 1
a149 2
				   type,
				   GSS_KRB5_MECHANISM);
d199 11
a209 10
  HEIMDAL_MUTEX_lock(&context_handle->ctx_id_mutex);

  seq = seq_data.data;
  gssapi_decode_om_uint32(seq, &seq_number);

  if (context_handle->more_flags & LOCAL)
      cmp = memcmp(&seq[4], "\xff\xff\xff\xff", 4);
  else
      cmp = memcmp(&seq[4], "\x00\x00\x00\x00", 4);

d212 5
a216 12
      krb5_crypto_destroy (gssapi_krb5_context, crypto);
      *minor_status = 0;
      HEIMDAL_MUTEX_unlock(&context_handle->ctx_id_mutex);
      return GSS_S_BAD_MIC;
  }

  ret = _gssapi_msg_order_check(context_handle->order, seq_number);
  if (ret) {
      krb5_crypto_destroy (gssapi_krb5_context, crypto);
      *minor_status = 0;
      HEIMDAL_MUTEX_unlock(&context_handle->ctx_id_mutex);
      return ret;
a223 1
      HEIMDAL_MUTEX_unlock(&context_handle->ctx_id_mutex);
a243 1
      HEIMDAL_MUTEX_unlock(&context_handle->ctx_id_mutex);
d246 4
a249 1
  HEIMDAL_MUTEX_unlock(&context_handle->ctx_id_mutex);
d269 1
a269 1
    ret = gss_krb5_get_subkey(context_handle, &key);
a288 1
    case KEYTYPE_ARCFOUR_56 :
d294 2
a295 3
	ret = _gssapi_verify_mic_cfx (minor_status, context_handle,
				      message_buffer, token_buffer, qop_state,
				      key);
@


