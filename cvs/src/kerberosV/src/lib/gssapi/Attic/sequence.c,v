head	1.2;
access;
symbols
	OPENBSD_5_3:1.1.1.1.0.28
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.26
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.24
	OPENBSD_5_0:1.1.1.1.0.22
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.20
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.18
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.14
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.16
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.12
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.10
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.8
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.6
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.4
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.2
	OPENBSD_4_0_BASE:1.1.1.1
	HEIMDAL_0_7_2:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2013.06.17.18.57.43;	author robert;	state dead;
branches;
next	1.1;

1.1
date	2006.04.14.07.32.59;	author biorn;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.04.14.07.32.59;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.2
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@/*
 * Copyright (c) 2003 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
 *
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
 *
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
 *
 * 3. Neither the name of the Institute nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission. 
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE. 
 */

#include "gssapi_locl.h"

RCSID("$KTH: sequence.c,v 1.5 2005/04/27 17:49:43 lha Exp $");

#define DEFAULT_JITTER_WINDOW 20

struct gss_msg_order {
    OM_uint32 flags;
    OM_uint32 start;
    OM_uint32 length;
    OM_uint32 jitter_window;
    OM_uint32 first_seq;
    OM_uint32 elem[1];
};

/*
 *
 */

OM_uint32
_gssapi_msg_order_create(OM_uint32 *minor_status,
			 struct gss_msg_order **o, 
			 OM_uint32 flags, 
			 OM_uint32 seq_num, 
			 OM_uint32 jitter_window,
			 int use_64)
{
    size_t len;

    if (jitter_window == 0)
	jitter_window = DEFAULT_JITTER_WINDOW;

    len = jitter_window * sizeof((*o)->elem[0]);
    len += sizeof(**o);
    len -= sizeof((*o)->elem[0]);
    
    *o = malloc(len);
    if (*o == NULL) {
	*minor_status = ENOMEM;
	return GSS_S_FAILURE;
    }	
    memset(*o, 0, len);
    (*o)->flags = flags;
    (*o)->length = 0;
    (*o)->first_seq = seq_num;
    (*o)->jitter_window = jitter_window;
    (*o)->elem[0] = seq_num - 1;

    *minor_status = 0;
    return GSS_S_COMPLETE;
}

OM_uint32
_gssapi_msg_order_destroy(struct gss_msg_order **m)
{
    free(*m);
    *m = NULL;
    return GSS_S_COMPLETE;
}

static void
elem_set(struct gss_msg_order *o, unsigned int slot, OM_uint32 val)
{
    o->elem[slot % o->jitter_window] = val;
}

static void
elem_insert(struct gss_msg_order *o, 
	    unsigned int after_slot,
	    OM_uint32 seq_num)
{
    assert(o->jitter_window > after_slot);

    if (o->length > after_slot)
	memmove(&o->elem[after_slot + 1], &o->elem[after_slot],
		(o->length - after_slot - 1) * sizeof(o->elem[0]));

    elem_set(o, after_slot, seq_num);

    if (o->length < o->jitter_window)
	o->length++;
}

/* rule 1: expected sequence number */
/* rule 2: > expected sequence number */
/* rule 3: seqnum < seqnum(first) */
/* rule 4+5: seqnum in [seqnum(first),seqnum(last)]  */

OM_uint32
_gssapi_msg_order_check(struct gss_msg_order *o, OM_uint32 seq_num)
{
    OM_uint32 r;
    int i;

    if (o == NULL)
	return GSS_S_COMPLETE;

    if ((o->flags & (GSS_C_REPLAY_FLAG|GSS_C_SEQUENCE_FLAG)) == 0)
	return GSS_S_COMPLETE;

    /* check if the packet is the next in order */
    if (o->elem[0] == seq_num - 1) {
	elem_insert(o, 0, seq_num);
	return GSS_S_COMPLETE;
    }

    r = (o->flags & (GSS_C_REPLAY_FLAG|GSS_C_SEQUENCE_FLAG))==GSS_C_REPLAY_FLAG;

    /* sequence number larger then largest sequence number 
     * or smaller then the first sequence number */
    if (seq_num > o->elem[0]
	|| seq_num < o->first_seq
	|| o->length == 0) 
    {
	elem_insert(o, 0, seq_num);
	if (r) {
	    return GSS_S_COMPLETE;
	} else {
	    return GSS_S_GAP_TOKEN;
	}
    }

    assert(o->length > 0);

    /* sequence number smaller the first sequence number */
    if (seq_num < o->elem[o->length - 1]) {
	if (r)
	    return(GSS_S_OLD_TOKEN);
	else
	    return(GSS_S_UNSEQ_TOKEN);
    }

    if (seq_num == o->elem[o->length - 1]) {
	return GSS_S_DUPLICATE_TOKEN;
    }

    for (i = 0; i < o->length - 1; i++) {
	if (o->elem[i] == seq_num)
	    return GSS_S_DUPLICATE_TOKEN;
	if (o->elem[i + 1] < seq_num && o->elem[i] < seq_num) {
	    elem_insert(o, i, seq_num);
	    if (r)
		return GSS_S_COMPLETE;
	    else
		return GSS_S_UNSEQ_TOKEN;
	}
    }

    return GSS_S_FAILURE;
}

OM_uint32
_gssapi_msg_order_f(OM_uint32 flags)
{
    return flags & (GSS_C_SEQUENCE_FLAG|GSS_C_REPLAY_FLAG);
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of heimdal-0.7.2
@
text
@@
