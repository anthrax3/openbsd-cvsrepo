head	1.2;
access;
symbols
	OPENBSD_5_3:1.1.1.6.0.28
	OPENBSD_5_3_BASE:1.1.1.6
	OPENBSD_5_2:1.1.1.6.0.26
	OPENBSD_5_2_BASE:1.1.1.6
	OPENBSD_5_1_BASE:1.1.1.6
	OPENBSD_5_1:1.1.1.6.0.24
	OPENBSD_5_0:1.1.1.6.0.22
	OPENBSD_5_0_BASE:1.1.1.6
	OPENBSD_4_9:1.1.1.6.0.20
	OPENBSD_4_9_BASE:1.1.1.6
	OPENBSD_4_8:1.1.1.6.0.18
	OPENBSD_4_8_BASE:1.1.1.6
	OPENBSD_4_7:1.1.1.6.0.14
	OPENBSD_4_7_BASE:1.1.1.6
	OPENBSD_4_6:1.1.1.6.0.16
	OPENBSD_4_6_BASE:1.1.1.6
	OPENBSD_4_5:1.1.1.6.0.12
	OPENBSD_4_5_BASE:1.1.1.6
	OPENBSD_4_4:1.1.1.6.0.10
	OPENBSD_4_4_BASE:1.1.1.6
	OPENBSD_4_3:1.1.1.6.0.8
	OPENBSD_4_3_BASE:1.1.1.6
	OPENBSD_4_2:1.1.1.6.0.6
	OPENBSD_4_2_BASE:1.1.1.6
	OPENBSD_4_1:1.1.1.6.0.4
	OPENBSD_4_1_BASE:1.1.1.6
	OPENBSD_4_0:1.1.1.6.0.2
	OPENBSD_4_0_BASE:1.1.1.6
	HEIMDAL_0_7_2:1.1.1.6
	OPENBSD_3_9:1.1.1.5.0.6
	OPENBSD_3_9_BASE:1.1.1.5
	OPENBSD_3_8:1.1.1.5.0.4
	OPENBSD_3_8_BASE:1.1.1.5
	OPENBSD_3_7:1.1.1.5.0.2
	OPENBSD_3_7_BASE:1.1.1.5
	HEIMDAL_0_6_3:1.1.1.5
	OPENBSD_3_6:1.1.1.4.0.6
	OPENBSD_3_6_BASE:1.1.1.4
	OPENBSD_3_5:1.1.1.4.0.4
	OPENBSD_3_5_BASE:1.1.1.4
	OPENBSD_3_4:1.1.1.4.0.2
	OPENBSD_3_4_BASE:1.1.1.4
	HEIMDAL_0_6:1.1.1.4
	HEIMDAL_0_6RC1:1.1.1.4
	OPENBSD_3_3:1.1.1.3.0.6
	OPENBSD_3_3_BASE:1.1.1.3
	OPENBSD_3_2:1.1.1.3.0.4
	OPENBSD_3_2_BASE:1.1.1.3
	OPENBSD_3_1:1.1.1.3.0.2
	OPENBSD_3_1_BASE:1.1.1.3
	HEIMDAL_0_4e:1.1.1.3
	OPENBSD_3_0:1.1.1.2.0.2
	OPENBSD_3_0_BASE:1.1.1.2
	HEIMDAL_0_3f:1.1.1.2
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2013.06.17.18.57.43;	author robert;	state dead;
branches;
next	1.1;

1.1
date	2001.05.25.07.50.07;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.50.07;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.06.22.21.22.40;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.02.06.08.55.06;	author hin;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.05.11.02.15.40;	author hin;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.10.29.15.55.34;	author biorn;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2006.04.14.07.32.58;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.2
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@/*
 * Copyright (c) 1997 - 2000 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
 *
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
 *
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
 *
 * 3. Neither the name of the Institute nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission. 
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE. 
 */

/* $KTH: gssapi_locl.h,v 1.14 2000/08/27 04:19:00 assar Exp $ */

#ifndef GSSAPI_LOCL_H
#define GSSAPI_LOCL_H

#include <krb5_locl.h>
#include <gssapi.h>
#include <assert.h>

extern krb5_context gssapi_krb5_context;

void gssapi_krb5_init (void);

krb5_error_code
gssapi_krb5_create_8003_checksum (
		      const gss_channel_bindings_t input_chan_bindings,
		      OM_uint32 flags,
                      krb5_data *fwd_data,
		      Checksum *result);

krb5_error_code
gssapi_krb5_verify_8003_checksum (
		      const gss_channel_bindings_t input_chan_bindings,
		      Checksum *cksum,
		      OM_uint32 *flags,
                      krb5_data *fwd_data);

OM_uint32
gssapi_krb5_encapsulate(
			const krb5_data *in_data,
			gss_buffer_t output_token,
			u_char *type);

OM_uint32
gssapi_krb5_decapsulate(
			gss_buffer_t input_token_buffer,
			krb5_data *out_data,
			char *type);

void
gssapi_krb5_encap_length (size_t data_len,
			  size_t *len,
			  size_t *total_len);

u_char *
gssapi_krb5_make_header (u_char *p,
			 size_t len,
			 u_char *type);

OM_uint32
gssapi_krb5_verify_header(u_char **str,
			  size_t total_len,
			  char *type);

OM_uint32
gss_krb5_getsomekey(const gss_ctx_id_t context_handle,
		    krb5_keyblock **key);

krb5_error_code
gss_address_to_krb5addr(OM_uint32 gss_addr_type,
                        gss_buffer_desc *gss_addr,
                        int16_t port,
                        krb5_address *address);

/* sec_context flags */

#define SC_LOCAL_ADDRESS  0x01
#define SC_REMOTE_ADDRESS 0x02
#define SC_KEYBLOCK	  0x04
#define SC_LOCAL_SUBKEY	  0x08
#define SC_REMOTE_SUBKEY  0x10

#endif
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.3f

Lots of changes, highlights include:

 * change default keytab to ANY:FILE:/etc/krb5.keytab,krb4:/etc/srvtab,
   the new keytab type that tries both of these in order (SRVTAB is
   also an alias for krb4:)

 * improve error reporting and error handling (error messages should
   be more detailed and more useful)

 * the API is closer to what MIT krb5 is using

 * more compatible with windows 2000

 * removed some memory leaks

 * bug fixes
@
text
@d2 1
a2 1
 * Copyright (c) 1997 - 2001 Kungliga Tekniska Högskolan
d34 1
a34 1
/* $KTH: gssapi_locl.h,v 1.16 2001/05/11 09:16:46 assar Exp $ */
a38 4
#ifdef HAVE_CONFIG_H
#include <config.h>
#endif

a104 6

void
gssapi_krb5_set_error_string (void);

char *
gssapi_krb5_get_error_string (void);
@


1.1.1.3
log
@Import of heimdal-0.4e
@
text
@d34 1
a34 1
/* $KTH: gssapi_locl.h,v 1.21 2001/08/29 02:21:09 assar Exp $ */
d49 1
a49 1
extern krb5_keytab gssapi_krb5_keytab;
d51 1
a51 3
krb5_error_code gssapi_krb5_init (void);

OM_uint32
a52 1
		      OM_uint32 *minor_status,
d55 1
a55 1
                      const krb5_data *fwd_data,
d58 1
a58 1
OM_uint32
a59 1
		      OM_uint32 *minor_status,
d61 1
a61 1
		      const Checksum *cksum,
a66 1
			OM_uint32 *minor_status,
a72 1
			OM_uint32 *minor_status,
d93 2
a94 6
gss_krb5_get_remotekey(const gss_ctx_id_t context_handle,
		       krb5_keyblock **key);

OM_uint32
gss_krb5_get_localkey(const gss_ctx_id_t context_handle,
		      krb5_keyblock **key);
@


1.1.1.4
log
@Import of heimdal-0.6rc1
@
text
@d2 1
a2 1
 * Copyright (c) 1997 - 2003 Kungliga Tekniska Högskolan
d34 1
a34 1
/* $KTH: gssapi_locl.h,v 1.24 2003/03/16 17:30:15 lha Exp $ */
a52 8
#define GSSAPI_KRB5_INIT() do {					\
    krb5_error_code kret;					\
    if((kret = gssapi_krb5_init ()) != 0) {	\
	*minor_status = kret;					\
	return GSS_S_FAILURE;					\
    }								\
} while (0)

a98 8
gss_verify_mic_internal(OM_uint32 * minor_status,
			const gss_ctx_id_t context_handle,
			const gss_buffer_t message_buffer,
			const gss_buffer_t token_buffer,
			gss_qop_t * qop_state,
			char * type);

OM_uint32
a119 3
int
gss_oid_equal(const gss_OID a, const gss_OID b);

a124 3

OM_uint32
_gss_DES3_get_mic_compat(OM_uint32 *minor_status, gss_ctx_id_t ctx);
@


1.1.1.5
log
@Import of heimdal-0.6.3
@
text
@d34 1
a34 1
/* $KTH: gssapi_locl.h,v 1.24.2.5 2003/09/18 22:01:52 lha Exp $ */
a46 2
#include "arcfour.h"

a83 4
u_char *
_gssapi_make_mech_header(u_char *p,
			 size_t len);

a105 8

OM_uint32
_gssapi_verify_mech_header(u_char **str,
			   size_t total_len);

OM_uint32
_gssapi_verify_pad(gss_buffer_t, size_t, size_t *);

a146 17

OM_uint32
gssapi_lifetime_left(OM_uint32 *, OM_uint32, OM_uint32 *);

/* 8003 */

krb5_error_code
gssapi_encode_om_uint32(OM_uint32, u_char *);

krb5_error_code
gssapi_encode_be_om_uint32(OM_uint32, u_char *);

krb5_error_code
gssapi_decode_om_uint32(u_char *, OM_uint32 *);

krb5_error_code
gssapi_decode_be_om_uint32(u_char *, OM_uint32 *);
@


1.1.1.6
log
@Import of heimdal-0.7.2
@
text
@d2 1
a2 1
 * Copyright (c) 1997 - 2004 Kungliga Tekniska Högskolan
d34 1
a34 1
/* $KTH: gssapi_locl.h,v 1.39 2005/05/30 20:53:46 lha Exp $ */
a46 1
#include "cfx.h"
a48 37
#include "spnego_asn1.h"

/*
 *
 */

struct gss_msg_order;

typedef struct gss_ctx_id_t_desc_struct {
  struct krb5_auth_context_data *auth_context;
  gss_name_t source, target;
  OM_uint32 flags;
  enum { LOCAL = 1, OPEN = 2, 
	 COMPAT_OLD_DES3 = 4,
         COMPAT_OLD_DES3_SELECTED = 8,
	 ACCEPTOR_SUBKEY = 16
  } more_flags;
  struct krb5_ticket *ticket;
  OM_uint32 lifetime;
  HEIMDAL_MUTEX ctx_id_mutex;
  struct gss_msg_order *order;
} gss_ctx_id_t_desc;

typedef struct gss_cred_id_t_desc_struct {
  gss_name_t principal;
  struct krb5_keytab_data *keytab;
  OM_uint32 lifetime;
  gss_cred_usage_t usage;
  gss_OID_set mechanisms;
  struct krb5_ccache_data *ccache;
  HEIMDAL_MUTEX cred_id_mutex;
} gss_cred_id_t_desc;

/*
 *
 */

a51 10
extern HEIMDAL_MUTEX gssapi_keytab_mutex;

struct gssapi_thr_context {
    HEIMDAL_MUTEX mutex;
    char *error_string;
};

/*
 * Prototypes
 */
a62 6
struct gssapi_thr_context *
gssapi_get_thread_context(int);

void
gsskrb5_is_cfx(gss_ctx_id_t, int *);

a78 21
void
_gssapi_encap_length (size_t data_len,
		      size_t *len,
		      size_t *total_len,
		      const gss_OID mech);

void
gssapi_krb5_encap_length (size_t data_len,
			  size_t *len,
			  size_t *total_len,
			  const gss_OID mech);



OM_uint32
_gssapi_encapsulate(OM_uint32 *minor_status,
		    const krb5_data *in_data,
		    gss_buffer_t output_token,
		    const gss_OID mech);


d80 2
a81 1
gssapi_krb5_encapsulate(OM_uint32 *minor_status,    
d84 5
a88 2
			const u_char *type,
			const gss_OID mech);
d91 2
a92 1
gssapi_krb5_decapsulate(OM_uint32 *minor_status,
d95 6
a100 2
			char *type,
			gss_OID oid);
d105 1
a105 12
			 const u_char *type,
			 const gss_OID mech);

u_char *
_gssapi_make_mech_header(u_char *p,
			 size_t len,
			 const gss_OID mech);

OM_uint32
_gssapi_verify_mech_header(u_char **str,
			   size_t total_len,
			   gss_OID oid);
d110 2
a111 2
			  u_char *type,
			  gss_OID oid);
d114 2
a115 8
_gssapi_decapsulate(OM_uint32 *minor_status,
		    gss_buffer_t input_token_buffer,
		    krb5_data *out_data,
		    const gss_OID mech);


ssize_t
gssapi_krb5_get_mech (const u_char *, size_t, const u_char **);
d129 6
a134 2
gss_krb5_get_subkey(const gss_ctx_id_t context_handle,
		    krb5_keyblock **key);
d160 1
a160 8
_gss_DES3_get_mic_compat(OM_uint32 *, gss_ctx_id_t);

OM_uint32
_gss_spnego_require_mechlist_mic(OM_uint32 *, gss_ctx_id_t, krb5_boolean *);

krb5_error_code
_gss_check_compat(OM_uint32 *, gss_name_t, const char *,
		  krb5_boolean *, krb5_boolean);
a163 14

/* sequence */

OM_uint32
_gssapi_msg_order_create(OM_uint32 *, struct gss_msg_order **, 
			 OM_uint32, OM_uint32, OM_uint32, int);
OM_uint32
_gssapi_msg_order_destroy(struct gss_msg_order **);

OM_uint32
_gssapi_msg_order_check(struct gss_msg_order *, OM_uint32);

OM_uint32
_gssapi_msg_order_f(OM_uint32);
@


