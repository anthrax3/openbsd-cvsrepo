head	1.2;
access;
symbols
	OPENBSD_5_3:1.1.1.3.0.28
	OPENBSD_5_3_BASE:1.1.1.3
	OPENBSD_5_2:1.1.1.3.0.26
	OPENBSD_5_2_BASE:1.1.1.3
	OPENBSD_5_1_BASE:1.1.1.3
	OPENBSD_5_1:1.1.1.3.0.24
	OPENBSD_5_0:1.1.1.3.0.22
	OPENBSD_5_0_BASE:1.1.1.3
	OPENBSD_4_9:1.1.1.3.0.20
	OPENBSD_4_9_BASE:1.1.1.3
	OPENBSD_4_8:1.1.1.3.0.18
	OPENBSD_4_8_BASE:1.1.1.3
	OPENBSD_4_7:1.1.1.3.0.14
	OPENBSD_4_7_BASE:1.1.1.3
	OPENBSD_4_6:1.1.1.3.0.16
	OPENBSD_4_6_BASE:1.1.1.3
	OPENBSD_4_5:1.1.1.3.0.12
	OPENBSD_4_5_BASE:1.1.1.3
	OPENBSD_4_4:1.1.1.3.0.10
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.8
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_2:1.1.1.3.0.6
	OPENBSD_4_2_BASE:1.1.1.3
	OPENBSD_4_1:1.1.1.3.0.4
	OPENBSD_4_1_BASE:1.1.1.3
	OPENBSD_4_0:1.1.1.3.0.2
	OPENBSD_4_0_BASE:1.1.1.3
	HEIMDAL_0_7_2:1.1.1.3
	OPENBSD_3_9:1.1.1.2.0.6
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.4
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.2
	OPENBSD_3_7_BASE:1.1.1.2
	HEIMDAL_0_6_3:1.1.1.2
	OPENBSD_3_6:1.1.1.1.0.6
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.4
	OPENBSD_3_5_BASE:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.2
	OPENBSD_3_4_BASE:1.1.1.1
	HEIMDAL_0_6:1.1.1.1
	HEIMDAL_0_6RC1:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2013.06.17.18.57.43;	author robert;	state dead;
branches;
next	1.1;

1.1
date	2003.05.11.02.15.38;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.05.11.02.15.38;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.10.29.15.55.33;	author biorn;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.04.14.07.32.56;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.2
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@/*
 * Copyright (c) 2003 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
 *
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
 *
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
 *
 * 3. Neither the name of the Institute nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission. 
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE. 
 */

#include "gssapi_locl.h"

RCSID("$KTH: add_cred.c,v 1.2 2003/04/06 00:29:17 lha Exp $");

OM_uint32 gss_add_cred (
     OM_uint32           *minor_status,
     const gss_cred_id_t input_cred_handle,
     const gss_name_t    desired_name,
     const gss_OID       desired_mech,
     gss_cred_usage_t    cred_usage,
     OM_uint32           initiator_time_req,
     OM_uint32           acceptor_time_req,
     gss_cred_id_t       *output_cred_handle,
     gss_OID_set         *actual_mechs,
     OM_uint32           *initiator_time_rec,
     OM_uint32           *acceptor_time_rec)
{
    OM_uint32 ret, lifetime;
    gss_cred_id_t cred, handle;

    handle = NULL;
    cred = input_cred_handle;

    if (gss_oid_equal(desired_mech, GSS_KRB5_MECHANISM) == 0) {
	*minor_status = 0;
	return GSS_S_BAD_MECH;
    }

    if (cred == GSS_C_NO_CREDENTIAL && output_cred_handle == NULL) {
	*minor_status = 0;
	return GSS_S_NO_CRED;
    }

    /* check if requested output usage is compatible with output usage */ 
    if (output_cred_handle != NULL &&
	(cred->usage != cred_usage && cred->usage != GSS_C_BOTH)) {
	*minor_status = GSS_KRB5_S_G_BAD_USAGE;
	return(GSS_S_FAILURE);
    }
	
    /* check that we have the same name */
    if (desired_name != GSS_C_NO_NAME &&
	krb5_principal_compare(gssapi_krb5_context, desired_name,
			       cred->principal) != FALSE) {
	*minor_status = 0;
	return GSS_S_BAD_NAME;
    }

    /* make a copy */
    if (output_cred_handle) {

	handle = (gss_cred_id_t)malloc(sizeof(*handle));
	if (handle == GSS_C_NO_CREDENTIAL) {
	    *minor_status = ENOMEM;
	    return (GSS_S_FAILURE);
	}

	memset(handle, 0, sizeof (*handle));

	handle->usage = cred_usage;
	handle->lifetime = cred->lifetime;
	handle->principal = NULL;
	handle->keytab = NULL;
	handle->ccache = NULL;
	handle->mechanisms = NULL;
	
	ret = GSS_S_FAILURE;

	ret = gss_duplicate_name(minor_status, cred->principal,
				 &handle->principal);
	if (ret) {
	    free(handle);
	    *minor_status = ENOMEM;
	    return GSS_S_FAILURE;
	}

	if (cred->keytab) {
	    krb5_error_code kret;
	    char name[KRB5_KT_PREFIX_MAX_LEN + MAXPATHLEN];
	    int len;
	    
	    ret = GSS_S_FAILURE;

	    kret = krb5_kt_get_type(gssapi_krb5_context, cred->keytab,
				    name, KRB5_KT_PREFIX_MAX_LEN);
	    if (kret) {
		*minor_status = kret;
		goto failure;
	    }
	    len = strlen(name);
	    name[len++] = ':';

	    kret = krb5_kt_get_name(gssapi_krb5_context, cred->keytab,
				    name + len, 
				    sizeof(name) - len);
	    if (kret) {
		*minor_status = kret;
		goto failure;
	    }

	    kret = krb5_kt_resolve(gssapi_krb5_context, name,
				   &handle->keytab);
	    if (kret){
		*minor_status = kret;
		goto failure;
	    }
	}

	if (cred->ccache) {
	    krb5_error_code kret;
	    const char *type, *name;
	    char *type_name;

	    ret = GSS_S_FAILURE;

	    type = krb5_cc_get_type(gssapi_krb5_context, cred->ccache);
	    if (type == NULL){
		*minor_status = ENOMEM;
		goto failure;
	    }

	    name = krb5_cc_get_name(gssapi_krb5_context, cred->ccache);
	    if (name == NULL) {
		*minor_status = ENOMEM;
		goto failure;
	    }

	    asprintf(&type_name, "%s:%s", type, name);
	    if (type_name == NULL) {
		*minor_status = ENOMEM;
		goto failure;
	    }

	    kret = krb5_cc_resolve(gssapi_krb5_context, type_name,
				   &handle->ccache);
	    free(type_name);
	    if (kret) {
		*minor_status = kret;
		goto failure;
	    }	    
	}

	ret = gss_create_empty_oid_set(minor_status, &handle->mechanisms);
	if (ret)
	    goto failure;

	ret = gss_add_oid_set_member(minor_status, GSS_KRB5_MECHANISM,
				     &handle->mechanisms);
	if (ret)
	    goto failure;
    }

    ret = gss_inquire_cred(minor_status, cred, NULL, &lifetime,
			   NULL, actual_mechs);
    if (ret)
	goto failure;

    if (initiator_time_rec)
	*initiator_time_rec = lifetime;
    if (acceptor_time_rec)
	*acceptor_time_rec = lifetime;

    if (output_cred_handle)
	*output_cred_handle = handle;

    *minor_status = 0;
    return ret;

 failure:

    if (handle) {
	if (handle->principal)
	    gss_release_name(NULL, &handle->principal);
	if (handle->keytab)
	    krb5_kt_close(gssapi_krb5_context, handle->keytab);
	if (handle->ccache)
	    krb5_cc_destroy(gssapi_krb5_context, handle->ccache);
	if (handle->mechanisms)
	    gss_release_oid_set(NULL, &handle->mechanisms);
	free(handle);
    }
    return ret;
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of heimdal-0.6rc1
@
text
@@


1.1.1.2
log
@Import of heimdal-0.6.3
@
text
@d36 1
a36 1
RCSID("$KTH: add_cred.c,v 1.2.2.1 2003/10/21 21:00:47 lha Exp $");
d155 10
a164 36
	    if (strcmp(type, "MEMORY") == 0) {
		ret = krb5_cc_gen_new(gssapi_krb5_context, &krb5_mcc_ops,
				      &handle->ccache);
		if (ret) {
		    *minor_status = ret;
		    goto failure;
		}

		ret = krb5_cc_copy_cache(gssapi_krb5_context, cred->ccache,
					 handle->ccache);
		if (ret) {
		    *minor_status = ret;
		    goto failure;
		}

	    } else {

		name = krb5_cc_get_name(gssapi_krb5_context, cred->ccache);
		if (name == NULL) {
		    *minor_status = ENOMEM;
		    goto failure;
		}
		
		asprintf(&type_name, "%s:%s", type, name);
		if (type_name == NULL) {
		    *minor_status = ENOMEM;
		    goto failure;
		}
		
		kret = krb5_cc_resolve(gssapi_krb5_context, type_name,
				       &handle->ccache);
		free(type_name);
		if (kret) {
		    *minor_status = kret;
		    goto failure;
		}	    
d166 8
@


1.1.1.3
log
@Import of heimdal-0.7.2
@
text
@d36 1
a36 1
RCSID("$KTH: add_cred.c,v 1.4 2003/10/07 04:08:57 lha Exp $");
d68 4
a71 7
    if (output_cred_handle != NULL) {
	HEIMDAL_MUTEX_lock(&cred->cred_id_mutex);
	if (cred->usage != cred_usage && cred->usage != GSS_C_BOTH) {
	    HEIMDAL_MUTEX_unlock(&cred->cred_id_mutex);
	    *minor_status = GSS_KRB5_S_G_BAD_USAGE;
	    return(GSS_S_FAILURE);
	}
a77 2
	if (output_cred_handle)
	    HEIMDAL_MUTEX_unlock(&cred->cred_id_mutex);
a86 1
	    HEIMDAL_MUTEX_unlock(&cred->cred_id_mutex);
a98 1
	HEIMDAL_MUTEX_init(&handle->cred_id_mutex);
a104 1
	    HEIMDAL_MUTEX_unlock(&cred->cred_id_mutex);
d171 1
d193 1
d214 1
a214 1
    if (output_cred_handle) {
a215 2
	HEIMDAL_MUTEX_unlock(&cred->cred_id_mutex);
    }
a232 2
    if (output_cred_handle)
	HEIMDAL_MUTEX_unlock(&cred->cred_id_mutex);
@


