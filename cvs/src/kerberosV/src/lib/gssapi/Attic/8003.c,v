head	1.2;
access;
symbols
	OPENBSD_5_3:1.1.1.5.0.28
	OPENBSD_5_3_BASE:1.1.1.5
	OPENBSD_5_2:1.1.1.5.0.26
	OPENBSD_5_2_BASE:1.1.1.5
	OPENBSD_5_1_BASE:1.1.1.5
	OPENBSD_5_1:1.1.1.5.0.24
	OPENBSD_5_0:1.1.1.5.0.22
	OPENBSD_5_0_BASE:1.1.1.5
	OPENBSD_4_9:1.1.1.5.0.20
	OPENBSD_4_9_BASE:1.1.1.5
	OPENBSD_4_8:1.1.1.5.0.18
	OPENBSD_4_8_BASE:1.1.1.5
	OPENBSD_4_7:1.1.1.5.0.14
	OPENBSD_4_7_BASE:1.1.1.5
	OPENBSD_4_6:1.1.1.5.0.16
	OPENBSD_4_6_BASE:1.1.1.5
	OPENBSD_4_5:1.1.1.5.0.12
	OPENBSD_4_5_BASE:1.1.1.5
	OPENBSD_4_4:1.1.1.5.0.10
	OPENBSD_4_4_BASE:1.1.1.5
	OPENBSD_4_3:1.1.1.5.0.8
	OPENBSD_4_3_BASE:1.1.1.5
	OPENBSD_4_2:1.1.1.5.0.6
	OPENBSD_4_2_BASE:1.1.1.5
	OPENBSD_4_1:1.1.1.5.0.4
	OPENBSD_4_1_BASE:1.1.1.5
	OPENBSD_4_0:1.1.1.5.0.2
	OPENBSD_4_0_BASE:1.1.1.5
	HEIMDAL_0_7_2:1.1.1.5
	OPENBSD_3_9:1.1.1.4.0.6
	OPENBSD_3_9_BASE:1.1.1.4
	OPENBSD_3_8:1.1.1.4.0.4
	OPENBSD_3_8_BASE:1.1.1.4
	OPENBSD_3_7:1.1.1.4.0.2
	OPENBSD_3_7_BASE:1.1.1.4
	HEIMDAL_0_6_3:1.1.1.4
	OPENBSD_3_6:1.1.1.3.0.6
	OPENBSD_3_6_BASE:1.1.1.3
	OPENBSD_3_5:1.1.1.3.0.4
	OPENBSD_3_5_BASE:1.1.1.3
	OPENBSD_3_4:1.1.1.3.0.2
	OPENBSD_3_4_BASE:1.1.1.3
	HEIMDAL_0_6:1.1.1.3
	HEIMDAL_0_6RC1:1.1.1.3
	OPENBSD_3_3:1.1.1.2.0.6
	OPENBSD_3_3_BASE:1.1.1.2
	OPENBSD_3_2:1.1.1.2.0.4
	OPENBSD_3_2_BASE:1.1.1.2
	OPENBSD_3_1:1.1.1.2.0.2
	OPENBSD_3_1_BASE:1.1.1.2
	HEIMDAL_0_4e:1.1.1.2
	OPENBSD_3_0:1.1.1.1.0.2
	OPENBSD_3_0_BASE:1.1.1.1
	HEIMDAL_0_3f:1.1.1.1
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2013.06.17.18.57.42;	author robert;	state dead;
branches;
next	1.1;

1.1
date	2001.05.25.07.49.59;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.49.59;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.02.06.08.55.03;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.02.15.38;	author hin;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.10.29.15.55.33;	author biorn;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2006.04.14.07.32.54;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.2
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@/*
 * Copyright (c) 1997 - 2001 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
 *
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
 *
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
 *
 * 3. Neither the name of the Institute nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission. 
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE. 
 */

#include "gssapi_locl.h"

RCSID("$KTH: 8003.c,v 1.8 2001/01/29 02:08:58 assar Exp $");

static krb5_error_code
encode_om_uint32(OM_uint32 n, u_char *p)
{
  p[0] = (n >> 0)  & 0xFF;
  p[1] = (n >> 8)  & 0xFF;
  p[2] = (n >> 16) & 0xFF;
  p[3] = (n >> 24) & 0xFF;
  return 0;
}

static krb5_error_code
decode_om_uint32(u_char *p, OM_uint32 *n)
{
    *n = (p[0] << 0) | (p[1] << 8) | (p[2] << 16) | (p[3] << 24);
    return 0;
}

static krb5_error_code
hash_input_chan_bindings (const gss_channel_bindings_t b,
			  u_char *p)
{
  u_char num[4];
  MD5_CTX md5;

  MD5_Init(&md5);
  encode_om_uint32 (b->initiator_addrtype, num);
  MD5_Update (&md5, num, sizeof(num));
  encode_om_uint32 (b->initiator_address.length, num);
  MD5_Update (&md5, num, sizeof(num));
  if (b->initiator_address.length)
    MD5_Update (&md5,
		b->initiator_address.value,
		b->initiator_address.length);
  encode_om_uint32 (b->acceptor_addrtype, num);
  MD5_Update (&md5, num, sizeof(num));
  encode_om_uint32 (b->acceptor_address.length, num);
  MD5_Update (&md5, num, sizeof(num));
  if (b->acceptor_address.length)
    MD5_Update (&md5,
		b->acceptor_address.value,
		b->acceptor_address.length);
  encode_om_uint32 (b->application_data.length, num);
  MD5_Update (&md5, num, sizeof(num));
  if (b->application_data.length)
    MD5_Update (&md5,
		b->application_data.value,
		b->application_data.length);
  MD5_Final (p, &md5);
  return 0;
}

krb5_error_code
gssapi_krb5_create_8003_checksum (
		      const gss_channel_bindings_t input_chan_bindings,
		      OM_uint32 flags,
		      krb5_data *fwd_data,
		      Checksum *result)
{
  u_char *p;

  /* 
   * see rfc1964 (section 1.1.1 (Initial Token), and the checksum value 
   * field's format)
   */
  result->cksumtype = 0x8003;
  if (fwd_data->length > 0 && (flags & GSS_C_DELEG_FLAG))
    result->checksum.length = 24 + 4 + fwd_data->length;
  else 
    result->checksum.length = 24;
  result->checksum.data   = malloc (result->checksum.length);
  if (result->checksum.data == NULL)
    return ENOMEM;
  
  p = result->checksum.data;
  encode_om_uint32 (16, p);
  p += 4;
  if (input_chan_bindings == GSS_C_NO_CHANNEL_BINDINGS) {
    memset (p, 0, 16);
  } else {
    hash_input_chan_bindings (input_chan_bindings, p);
  }
  p += 16;
  encode_om_uint32 (flags, p);
  p += 4;

  if (fwd_data->length > 0 && (flags & GSS_C_DELEG_FLAG)) {
#if 0
     u_char *tmp;

     result->checksum.length = 28 + fwd_data->length;
     tmp = realloc(result->checksum.data, result->checksum.length);
     if (tmp == NULL)
        return ENOMEM;
     result->checksum.data = tmp;

     p = (u_char*)result->checksum.data + 24;  
#endif
     *p++ = (1 >> 0) & 0xFF;                   /* DlgOpt */ /* == 1 */
     *p++ = (1 >> 8) & 0xFF;                   /* DlgOpt */ /* == 0 */
     *p++ = (fwd_data->length >> 0) & 0xFF;    /* Dlgth  */
     *p++ = (fwd_data->length >> 8) & 0xFF;    /* Dlgth  */
     memcpy(p, (unsigned char *) fwd_data->data, fwd_data->length);

     p += fwd_data->length;
     
  if (p - (u_char *)result->checksum.data != result->checksum.length)
        abort();
  }
  
  return 0;
}

krb5_error_code
gssapi_krb5_verify_8003_checksum(
		      const gss_channel_bindings_t input_chan_bindings,
		      Checksum *cksum,
		      OM_uint32 *flags,
		      krb5_data *fwd_data)
{
    unsigned char hash[16];
    unsigned char *p;
    OM_uint32 length;
    int DlgOpt;

    /* XXX should handle checksums > 24 bytes */
    if(cksum->cksumtype != 0x8003)
	return GSS_S_BAD_BINDINGS;
    
    p = cksum->checksum.data;
    decode_om_uint32(p, &length);
    if(length != sizeof(hash))
	return GSS_S_FAILURE;
    
    p += 4;
    
    if (input_chan_bindings != GSS_C_NO_CHANNEL_BINDINGS) {
	if(hash_input_chan_bindings(input_chan_bindings, hash) != 0)
	    return GSS_S_FAILURE;
	if(memcmp(hash, p, sizeof(hash)) != 0)
	    return GSS_S_FAILURE;
    }
    
    p += sizeof(hash);
    
    decode_om_uint32(p, flags);

    if (cksum->checksum.length > 24 && (*flags & GSS_C_DELEG_FLAG)) {
    
      p += 4;
    
      DlgOpt = (p[0] << 0) | (p[1] << 8 );
      if (DlgOpt != 1)
         return GSS_S_BAD_BINDINGS;
      
      p += 2;
      fwd_data->length = (p[0] << 0) | (p[1] << 8);
      fwd_data->data = malloc(fwd_data->length);
      if (fwd_data->data == NULL)
         return ENOMEM;

      p += 2;
      memcpy(fwd_data->data, p, fwd_data->length);
    }
    
    return 0;
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.4e
@
text
@d36 1
a36 1
RCSID("$KTH: 8003.c,v 1.10 2001/08/29 02:21:09 assar Exp $");
d89 1
a89 7
/*
 * create a checksum over the chanel bindings in
 * `input_chan_bindings', `flags' and `fwd_data' and return it in
 * `result'
 */

OM_uint32
a90 1
		      OM_uint32 *minor_status,    
d93 1
a93 1
		      const krb5_data *fwd_data,
d100 2
a101 1
   * field's format) */
d108 2
a109 4
  if (result->checksum.data == NULL) {
    *minor_status = ENOMEM;
    return GSS_S_FAILURE;
  }
d142 3
d146 2
a147 2
     
  return GSS_S_COMPLETE;
d150 1
a150 6
/*
 * verify the checksum in `cksum' over `input_chan_bindings'
 * returning  `flags' and `fwd_data'
 */

OM_uint32
a151 1
		      OM_uint32 *minor_status,    
d153 1
a153 1
		      const Checksum *cksum,
d163 1
a163 2
    if(cksum->cksumtype != 0x8003) {
	*minor_status = 0;
a164 1
    }
d168 2
a169 4
    if(length != sizeof(hash)) {
	*minor_status = 0;
	return GSS_S_BAD_BINDINGS;
    }
d174 4
a177 8
	if(hash_input_chan_bindings(input_chan_bindings, hash) != 0) {
	    *minor_status = 0;
	    return GSS_S_BAD_BINDINGS;
	}
	if(memcmp(hash, p, sizeof(hash)) != 0) {
	    *minor_status = 0;
	    return GSS_S_BAD_BINDINGS;
	}
d189 2
a190 4
      if (DlgOpt != 1) {
	  *minor_status = 0;
	  return GSS_S_BAD_BINDINGS;
      }
d195 2
a196 4
      if (fwd_data->data == NULL) {
	  *minor_status = ENOMEM;
	  return GSS_S_FAILURE;
      }
d202 1
a202 1
    return GSS_S_COMPLETE;
@


1.1.1.3
log
@Import of heimdal-0.6rc1
@
text
@d2 1
a2 1
 * Copyright (c) 1997 - 2002 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: 8003.c,v 1.12 2002/10/31 14:38:49 joda Exp $");
d103 1
a103 1
    u_char *p;
d105 13
a117 13
    /* 
     * see rfc1964 (section 1.1.1 (Initial Token), and the checksum value 
     * field's format) */
    result->cksumtype = 0x8003;
    if (fwd_data->length > 0 && (flags & GSS_C_DELEG_FLAG))
	result->checksum.length = 24 + 4 + fwd_data->length;
    else 
	result->checksum.length = 24;
    result->checksum.data   = malloc (result->checksum.length);
    if (result->checksum.data == NULL) {
	*minor_status = ENOMEM;
	return GSS_S_FAILURE;
    }
d119 11
a129 11
    p = result->checksum.data;
    encode_om_uint32 (16, p);
    p += 4;
    if (input_chan_bindings == GSS_C_NO_CHANNEL_BINDINGS) {
	memset (p, 0, 16);
    } else {
	hash_input_chan_bindings (input_chan_bindings, p);
    }
    p += 16;
    encode_om_uint32 (flags, p);
    p += 4;
d131 1
a131 1
    if (fwd_data->length > 0 && (flags & GSS_C_DELEG_FLAG)) {
d133 1
a133 1
	u_char *tmp;
d135 5
a139 5
	result->checksum.length = 28 + fwd_data->length;
	tmp = realloc(result->checksum.data, result->checksum.length);
	if (tmp == NULL)
	    return ENOMEM;
	result->checksum.data = tmp;
d141 1
a141 1
	p = (u_char*)result->checksum.data + 24;  
d143 5
a147 5
	*p++ = (1 >> 0) & 0xFF;                   /* DlgOpt */ /* == 1 */
	*p++ = (1 >> 8) & 0xFF;                   /* DlgOpt */ /* == 0 */
	*p++ = (fwd_data->length >> 0) & 0xFF;    /* Dlgth  */
	*p++ = (fwd_data->length >> 8) & 0xFF;    /* Dlgth  */
	memcpy(p, (unsigned char *) fwd_data->data, fwd_data->length);
d149 2
a150 2
	p += fwd_data->length;
    }
d152 1
a152 1
    return GSS_S_COMPLETE;
a171 1
    static unsigned char zeros[16];
d174 1
a174 1
    if(cksum->cksumtype != 0x8003 || cksum->checksum.length < 24) {
d188 1
a188 2
    if (input_chan_bindings != GSS_C_NO_CHANNEL_BINDINGS
	&& memcmp(p, zeros, sizeof(zeros)) != 0) {
a201 1
    p += 4;
a203 4
	if(cksum->checksum.length < 28) {
	    *minor_status = 0;
	    return GSS_S_BAD_BINDINGS;
	}
d205 15
a219 6
	DlgOpt = (p[0] << 0) | (p[1] << 8);
	p += 2;
	if (DlgOpt != 1) {
	    *minor_status = 0;
	    return GSS_S_BAD_BINDINGS;
	}
d221 2
a222 12
	fwd_data->length = (p[0] << 0) | (p[1] << 8);
	p += 2;
	if(cksum->checksum.length < 28 + fwd_data->length) {
	    *minor_status = 0;
	    return GSS_S_BAD_BINDINGS;
	}
	fwd_data->data = malloc(fwd_data->length);
	if (fwd_data->data == NULL) {
	    *minor_status = ENOMEM;
	    return GSS_S_FAILURE;
	}
	memcpy(fwd_data->data, p, fwd_data->length);
@


1.1.1.4
log
@Import of heimdal-0.6.3
@
text
@d2 1
a2 1
 * Copyright (c) 1997 - 2003 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: 8003.c,v 1.12.2.2 2003/09/18 21:30:57 lha Exp $");
d38 2
a39 2
krb5_error_code
gssapi_encode_om_uint32(OM_uint32 n, u_char *p)
d48 2
a49 12
krb5_error_code
gssapi_encode_be_om_uint32(OM_uint32 n, u_char *p)
{
  p[0] = (n >> 24) & 0xFF;
  p[1] = (n >> 16) & 0xFF;
  p[2] = (n >> 8)  & 0xFF;
  p[3] = (n >> 0)  & 0xFF;
  return 0;
}

krb5_error_code
gssapi_decode_om_uint32(u_char *p, OM_uint32 *n)
a54 7
krb5_error_code
gssapi_decode_be_om_uint32(u_char *p, OM_uint32 *n)
{
    *n = (p[0] <<24) | (p[1] << 16) | (p[2] << 8) | (p[3] << 0);
    return 0;
}

d63 1
a63 1
  gssapi_encode_om_uint32 (b->initiator_addrtype, num);
d65 1
a65 1
  gssapi_encode_om_uint32 (b->initiator_address.length, num);
d71 1
a71 1
  gssapi_encode_om_uint32 (b->acceptor_addrtype, num);
d73 1
a73 1
  gssapi_encode_om_uint32 (b->acceptor_address.length, num);
d79 1
a79 1
  gssapi_encode_om_uint32 (b->application_data.length, num);
d120 1
a120 1
    gssapi_encode_om_uint32 (16, p);
d128 1
a128 1
    gssapi_encode_om_uint32 (flags, p);
d181 1
a181 1
    gssapi_decode_om_uint32(p, &length);
d203 1
a203 1
    gssapi_decode_om_uint32(p, flags);
@


1.1.1.5
log
@Import of heimdal-0.7.2
@
text
@d36 1
a36 1
RCSID("$KTH: 8003.c,v 1.17 2005/04/01 08:55:36 lha Exp $");
d125 1
a125 1
    result->cksumtype = CKSUMTYPE_GSSAPI;
d149 2
d152 8
a190 5
    if (cksum == NULL) {
	*minor_status = 0;
	return GSS_S_BAD_BINDINGS;
    }

d192 1
a192 1
    if(cksum->cksumtype != CKSUMTYPE_GSSAPI || cksum->checksum.length < 24) {
@


