head	1.2;
access;
symbols
	OPENBSD_5_3:1.1.1.6.0.28
	OPENBSD_5_3_BASE:1.1.1.6
	OPENBSD_5_2:1.1.1.6.0.26
	OPENBSD_5_2_BASE:1.1.1.6
	OPENBSD_5_1_BASE:1.1.1.6
	OPENBSD_5_1:1.1.1.6.0.24
	OPENBSD_5_0:1.1.1.6.0.22
	OPENBSD_5_0_BASE:1.1.1.6
	OPENBSD_4_9:1.1.1.6.0.20
	OPENBSD_4_9_BASE:1.1.1.6
	OPENBSD_4_8:1.1.1.6.0.18
	OPENBSD_4_8_BASE:1.1.1.6
	OPENBSD_4_7:1.1.1.6.0.14
	OPENBSD_4_7_BASE:1.1.1.6
	OPENBSD_4_6:1.1.1.6.0.16
	OPENBSD_4_6_BASE:1.1.1.6
	OPENBSD_4_5:1.1.1.6.0.12
	OPENBSD_4_5_BASE:1.1.1.6
	OPENBSD_4_4:1.1.1.6.0.10
	OPENBSD_4_4_BASE:1.1.1.6
	OPENBSD_4_3:1.1.1.6.0.8
	OPENBSD_4_3_BASE:1.1.1.6
	OPENBSD_4_2:1.1.1.6.0.6
	OPENBSD_4_2_BASE:1.1.1.6
	OPENBSD_4_1:1.1.1.6.0.4
	OPENBSD_4_1_BASE:1.1.1.6
	OPENBSD_4_0:1.1.1.6.0.2
	OPENBSD_4_0_BASE:1.1.1.6
	HEIMDAL_0_7_2:1.1.1.6
	OPENBSD_3_9:1.1.1.5.0.6
	OPENBSD_3_9_BASE:1.1.1.5
	OPENBSD_3_8:1.1.1.5.0.4
	OPENBSD_3_8_BASE:1.1.1.5
	OPENBSD_3_7:1.1.1.5.0.2
	OPENBSD_3_7_BASE:1.1.1.5
	HEIMDAL_0_6_3:1.1.1.5
	OPENBSD_3_6:1.1.1.4.0.6
	OPENBSD_3_6_BASE:1.1.1.4
	OPENBSD_3_5:1.1.1.4.0.4
	OPENBSD_3_5_BASE:1.1.1.4
	OPENBSD_3_4:1.1.1.4.0.2
	OPENBSD_3_4_BASE:1.1.1.4
	HEIMDAL_0_6:1.1.1.4
	HEIMDAL_0_6RC1:1.1.1.4
	OPENBSD_3_3:1.1.1.3.0.6
	OPENBSD_3_3_BASE:1.1.1.3
	OPENBSD_3_2:1.1.1.3.0.4
	OPENBSD_3_2_BASE:1.1.1.3
	OPENBSD_3_1:1.1.1.3.0.2
	OPENBSD_3_1_BASE:1.1.1.3
	HEIMDAL_0_4e:1.1.1.3
	OPENBSD_3_0:1.1.1.2.0.2
	OPENBSD_3_0_BASE:1.1.1.2
	HEIMDAL_0_3f:1.1.1.2
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2013.06.17.18.57.43;	author robert;	state dead;
branches;
next	1.1;

1.1
date	2001.05.25.07.50.01;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.50.01;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.06.22.21.22.25;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.02.06.08.55.04;	author hin;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.05.11.02.15.38;	author hin;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.10.29.15.55.33;	author biorn;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2006.04.14.07.32.55;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.2
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@/*
 * Copyright (c) 1997 - 2001 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
 *
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
 *
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
 *
 * 3. Neither the name of the Institute nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission. 
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE. 
 */

#include "gssapi_locl.h"

RCSID("$KTH: acquire_cred.c,v 1.4 2001/01/30 00:49:05 assar Exp $");

OM_uint32 gss_acquire_cred
           (OM_uint32 * minor_status,
            const gss_name_t desired_name,
            OM_uint32 time_req,
            const gss_OID_set desired_mechs,
            gss_cred_usage_t cred_usage,
            gss_cred_id_t * output_cred_handle,
            gss_OID_set * actual_mechs,
            OM_uint32 * time_rec
           )
{
    gss_cred_id_t handle;
    OM_uint32 ret;
    krb5_principal def_princ;
    krb5_ccache ccache;
    krb5_error_code pret = -1, kret = 0;
    krb5_keytab kt;
    krb5_creds cred;
    krb5_get_init_creds_opt opt;

    handle = (gss_cred_id_t)malloc(sizeof(*handle));
    if (handle == GSS_C_NO_CREDENTIAL) {
        return GSS_S_FAILURE;
    }
    memset(handle, 0, sizeof (*handle));

    ret = gss_duplicate_name(minor_status, desired_name, &handle->principal);
    if (ret) {
        return ret;
    }

    if (krb5_cc_default(gssapi_krb5_context, &ccache) == 0 &&
      (pret = krb5_cc_get_principal(gssapi_krb5_context, ccache,
					 &def_princ)) == 0 &&
      krb5_principal_compare(gssapi_krb5_context, handle->principal,
				 def_princ) == TRUE) {
	handle->ccache = ccache;
	handle->keytab = NULL;
    } else {
	kret = krb5_kt_default(gssapi_krb5_context, &kt);
	if (kret != 0)
	    goto out;
	krb5_get_init_creds_opt_init(&opt);
	memset(&cred, 0, sizeof(cred));
	kret = krb5_get_init_creds_keytab(gssapi_krb5_context, &cred,
	  handle->principal, kt, 0, NULL, &opt);
	if (kret != 0) {
	    krb5_kt_close(gssapi_krb5_context, kt);
	    goto out;
	}
	kret = krb5_cc_gen_new(gssapi_krb5_context, &krb5_mcc_ops, &ccache);
	if (kret != 0) {
	    krb5_kt_close(gssapi_krb5_context, kt);
	    goto out;
	}
	kret = krb5_cc_initialize(gssapi_krb5_context, ccache, cred.client);
	if (kret != 0) {
	    krb5_kt_close(gssapi_krb5_context, kt);
	    krb5_cc_close(gssapi_krb5_context, ccache);
	    goto out;
	}
	kret = krb5_cc_store_cred(gssapi_krb5_context, ccache, &cred);
	if (kret != 0) {
	    krb5_kt_close(gssapi_krb5_context, kt);
	    krb5_cc_close(gssapi_krb5_context, ccache);
	    goto out;
	}
	handle->ccache = ccache;
	handle->keytab = kt;
    }


    /* XXX */
    handle->lifetime = time_req;
    handle->usage = cred_usage;

    ret = gss_create_empty_oid_set(minor_status, &handle->mechanisms);
    if (ret) {
        return ret;
    }
    ret = gss_add_oid_set_member(minor_status, GSS_KRB5_MECHANISM,
				 &handle->mechanisms);
    if (ret) {
        return ret;
    }

    ret = gss_inquire_cred(minor_status, handle, NULL, time_rec, NULL,
			   actual_mechs);
    if (ret) {
        return ret;
    }

    *output_cred_handle = handle;

out:
    if (pret == 0)
	krb5_free_principal(gssapi_krb5_context, def_princ);

    if (kret != 0) {
	*minor_status = kret;
	return GSS_S_FAILURE;
    }

    return GSS_S_COMPLETE;
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.3f

Lots of changes, highlights include:

 * change default keytab to ANY:FILE:/etc/krb5.keytab,krb4:/etc/srvtab,
   the new keytab type that tries both of these in order (SRVTAB is
   also an alias for krb4:)

 * improve error reporting and error handling (error messages should
   be more detailed and more useful)

 * the API is closer to what MIT krb5 is using

 * more compatible with windows 2000

 * removed some memory leaks

 * bug fixes
@
text
@d36 1
a36 1
RCSID("$KTH: acquire_cred.c,v 1.6 2001/05/11 09:16:45 assar Exp $");
d51 1
a51 1
    krb5_error_code kret = 0;
d53 4
d59 1
a59 1
    if (handle == GSS_C_NO_CREDENTIAL)
d61 1
a61 1

a65 1
	free(handle);
d69 5
a73 14
    if (krb5_cc_default(gssapi_krb5_context, &ccache) == 0) {
	krb5_principal def_princ;

	if (krb5_cc_get_principal(gssapi_krb5_context, ccache,
				  &def_princ) != 0) {
	    krb5_cc_close(gssapi_krb5_context, ccache);
	    goto try_keytab;
	}
	if (krb5_principal_compare(gssapi_krb5_context, handle->principal,
				   def_princ) == FALSE) {
	    krb5_free_principal(gssapi_krb5_context, def_princ);
	    krb5_cc_close(gssapi_krb5_context, ccache);
	    goto try_keytab;
	}
a75 1
	krb5_free_principal(gssapi_krb5_context, def_princ);
d77 1
a77 5
    	krb5_creds cred;
    	krb5_get_init_creds_opt opt;

 try_keytab:
	kret = krb5_kt_default(gssapi_krb5_context, &handle->keytab);
d79 1
a79 2
	    goto krb5_bad;

a81 1

d83 6
a88 7
					  handle->principal, handle->keytab,
					  0, NULL, &opt);
	if (kret != 0)
	    goto krb5_bad;

	kret = krb5_cc_gen_new(gssapi_krb5_context, &krb5_mcc_ops,
			       &handle->ccache);
d90 2
a91 2
	    krb5_free_creds_contents(gssapi_krb5_context, &cred);
	    goto krb5_bad;
d93 1
a93 3

	kret = krb5_cc_initialize(gssapi_krb5_context, handle->ccache,
				  cred.client);
d95 3
a97 2
	    krb5_free_creds_contents(gssapi_krb5_context, &cred);
	    goto krb5_bad;
d99 1
a99 2

	kret = krb5_cc_store_cred(gssapi_krb5_context, handle->ccache, &cred);
d101 3
a103 2
	    krb5_free_creds_contents(gssapi_krb5_context, &cred);
	    goto krb5_bad;
d105 3
a108 2
	krb5_free_creds_contents(gssapi_krb5_context, &cred);
    }
d115 3
a117 3
    if (ret)
	goto gssapi_bad;

d120 3
a122 2
    if (ret)
	goto gssapi_bad;
d126 3
a128 2
    if (ret)
	goto gssapi_bad;
a130 1
    return (GSS_S_COMPLETE);
d132 3
a134 13
 krb5_bad:
    ret = GSS_S_FAILURE;
    *minor_status = kret;
    gssapi_krb5_set_error_string ();

 gssapi_bad:
    krb5_free_principal(gssapi_krb5_context, handle->principal);
    if (handle->ccache != NULL)
	krb5_cc_close(gssapi_krb5_context, handle->ccache);
    if (handle->keytab != NULL)
	krb5_kt_close(gssapi_krb5_context, handle->keytab);
    if (handle->mechanisms != NULL)
	gss_release_oid_set(NULL, &handle->mechanisms);
d136 4
a139 1
    free(handle);
d141 1
a141 1
    return (ret);
@


1.1.1.3
log
@Import of heimdal-0.4e
@
text
@d36 1
a36 1
RCSID("$KTH: acquire_cred.c,v 1.7 2001/07/06 15:33:28 assar Exp $");
d88 3
a90 17
	if (gssapi_krb5_keytab != NULL) {
	    char kt_name[256];

	    kret = krb5_kt_get_name(gssapi_krb5_context,
				    gssapi_krb5_keytab,
				    kt_name, sizeof(kt_name));
	    if (kret)
		goto krb5_bad;
	    kret = krb5_kt_resolve(gssapi_krb5_context, kt_name,
				   &handle->keytab);
	    if (kret)
		goto krb5_bad;
	} else {
	    kret = krb5_kt_default(gssapi_krb5_context, &handle->keytab);
	    if (kret != 0)
		goto krb5_bad;
	}
@


1.1.1.4
log
@Import of heimdal-0.6rc1
@
text
@d2 1
a2 1
 * Copyright (c) 1997 - 2003 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: acquire_cred.c,v 1.13 2003/04/06 00:31:55 lha Exp $");
d38 10
a47 27
static krb5_error_code
get_keytab(krb5_keytab *keytab)
{
    char kt_name[256];
    krb5_error_code kret;

    if (gssapi_krb5_keytab != NULL) {
	kret = krb5_kt_get_name(gssapi_krb5_context,
				gssapi_krb5_keytab,
				kt_name, sizeof(kt_name));
	if (kret == 0)
	    kret = krb5_kt_resolve(gssapi_krb5_context, kt_name, keytab);
    } else
	kret = krb5_kt_default(gssapi_krb5_context, keytab);
    return (kret);
}

static OM_uint32 acquire_initiator_cred
		  (OM_uint32 * minor_status,
		   const gss_name_t desired_name,
		   OM_uint32 time_req,
		   const gss_OID_set desired_mechs,
		   gss_cred_usage_t cred_usage,
		   gss_cred_id_t handle,
		   gss_OID_set * actual_mechs,
		   OM_uint32 * time_rec
		  )
d49 1
d51 1
a51 3
    krb5_creds cred;
    krb5_principal def_princ;
    krb5_get_init_creds_opt opt;
a52 2
    krb5_keytab keytab;
    krb5_error_code kret;
d54 5
a58 5
    keytab = NULL;
    ccache = NULL;
    def_princ = NULL;
    ret = GSS_S_FAILURE;
    memset(&cred, 0, sizeof(cred));
d60 4
a63 21
    kret = krb5_cc_default(gssapi_krb5_context, &ccache);
    if (kret)
	goto end;
    kret = krb5_cc_get_principal(gssapi_krb5_context, ccache,
	&def_princ);
    if (kret != 0) {
	/* we'll try to use a keytab below */
	krb5_cc_destroy(gssapi_krb5_context, ccache);
	ccache = NULL;
	kret = 0;
    } else if (handle->principal == NULL)  {
	kret = krb5_copy_principal(gssapi_krb5_context, def_princ,
	    &handle->principal);
	if (kret)
	    goto end;
    } else if (handle->principal != NULL &&
	krb5_principal_compare(gssapi_krb5_context, handle->principal,
	def_princ) == FALSE) {
	/* Before failing, lets check the keytab */
	krb5_free_principal(gssapi_krb5_context, def_princ);
	def_princ = NULL;
d65 14
a78 9
    if (def_princ == NULL) {
	/* We have no existing credentials cache,
	 * so attempt to get a TGT using a keytab.
	 */
	if (handle->principal == NULL) {
	    kret = krb5_get_default_principal(gssapi_krb5_context,
		&handle->principal);
	    if (kret)
		goto end;
d80 3
a82 19
	kret = get_keytab(&keytab);
	if (kret)
	    goto end;
	krb5_get_init_creds_opt_init(&opt);
	kret = krb5_get_init_creds_keytab(gssapi_krb5_context, &cred,
	    handle->principal, keytab, 0, NULL, &opt);
	if (kret)
	    goto end;
	kret = krb5_cc_gen_new(gssapi_krb5_context, &krb5_mcc_ops,
		&ccache);
	if (kret)
	    goto end;
	kret = krb5_cc_initialize(gssapi_krb5_context, ccache, cred.client);
	if (kret)
	    goto end;
	kret = krb5_cc_store_cred(gssapi_krb5_context, ccache, &cred);
	if (kret)
	    goto end;
	handle->lifetime = cred.times.endtime;
d84 2
a85 2
	krb5_creds in_cred, *out_cred;
	krb5_const_realm realm;
d87 17
a103 8
	memset(&in_cred, 0, sizeof(in_cred));
	in_cred.client = handle->principal;
	
	realm = krb5_principal_get_realm(gssapi_krb5_context, 
					 handle->principal);
	if (realm == NULL) {
	    kret = KRB5_PRINC_NOMATCH; /* XXX */
	    goto end;
d106 2
a107 10
	kret = krb5_make_principal(gssapi_krb5_context, &in_cred.server, 
				   realm, KRB5_TGS_NAME, realm, NULL);
	if (kret)
	    goto end;

	kret = krb5_get_credentials(gssapi_krb5_context, 0, 
				    ccache, &in_cred, &out_cred);
	krb5_free_principal(gssapi_krb5_context, in_cred.server);
	if (kret)
	    goto end;
d109 5
a113 3
	handle->lifetime = out_cred->times.endtime;
	krb5_free_creds(gssapi_krb5_context, out_cred);
    }
d115 2
a116 13
    handle->ccache = ccache;
    ret = GSS_S_COMPLETE;

end:
    if (cred.client != NULL)
	krb5_free_creds_contents(gssapi_krb5_context, &cred);
    if (def_princ != NULL)
	krb5_free_principal(gssapi_krb5_context, def_princ);
    if (keytab != NULL)
	krb5_kt_close(gssapi_krb5_context, keytab);
    if (ret != GSS_S_COMPLETE) {
	if (ccache != NULL)
	    krb5_cc_close(gssapi_krb5_context, ccache);
d118 2
a119 2
	    *minor_status = kret;
	    gssapi_krb5_set_error_string ();
a120 17
    }
    return (ret);
}

static OM_uint32 acquire_acceptor_cred
		  (OM_uint32 * minor_status,
		   const gss_name_t desired_name,
		   OM_uint32 time_req,
		   const gss_OID_set desired_mechs,
		   gss_cred_usage_t cred_usage,
		   gss_cred_id_t handle,
		   gss_OID_set * actual_mechs,
		   OM_uint32 * time_rec
		  )
{
    OM_uint32 ret;
    krb5_error_code kret;
d122 2
a123 11
    kret = 0;
    ret = GSS_S_FAILURE;
    kret = get_keytab(&handle->keytab);
    if (kret)
	goto end;
    ret = GSS_S_COMPLETE;
 
end:
    if (ret != GSS_S_COMPLETE) {
	if (handle->keytab != NULL)
	    krb5_kt_close(gssapi_krb5_context, handle->keytab);
d125 2
a126 2
	    *minor_status = kret;
	    gssapi_krb5_set_error_string ();
a127 3
    }
    return (ret);
}
d129 4
a132 32
OM_uint32 gss_acquire_cred
           (OM_uint32 * minor_status,
            const gss_name_t desired_name,
            OM_uint32 time_req,
            const gss_OID_set desired_mechs,
            gss_cred_usage_t cred_usage,
            gss_cred_id_t * output_cred_handle,
            gss_OID_set * actual_mechs,
            OM_uint32 * time_rec
           )
{
    gss_cred_id_t handle;
    OM_uint32 ret;

    GSSAPI_KRB5_INIT ();

    *output_cred_handle = NULL;
    if (time_rec)
	*time_rec = 0;
    if (actual_mechs)
	*actual_mechs = GSS_C_NO_OID_SET;

    if (desired_mechs) {
	OM_uint32 present = 0;

	ret = gss_test_oid_set_member(minor_status, GSS_KRB5_MECHANISM,
				      desired_mechs, &present); 
	if (ret)
	    return ret;
	if (!present) {
	    *minor_status = 0;
	    return GSS_S_BAD_MECH;
a133 1
    }
d135 1
a135 4
    handle = (gss_cred_id_t)malloc(sizeof(*handle));
    if (handle == GSS_C_NO_CREDENTIAL) {
	*minor_status = ENOMEM;
        return (GSS_S_FAILURE);
d138 3
a140 1
    memset(handle, 0, sizeof (*handle));
a141 27
    if (desired_name != GSS_C_NO_NAME) {
	ret = gss_duplicate_name(minor_status, desired_name,
	    &handle->principal);
	if (ret != GSS_S_COMPLETE) {
	    free(handle);
	    return (ret);
	}
    }
    if (cred_usage == GSS_C_INITIATE || cred_usage == GSS_C_BOTH) {
	ret = acquire_initiator_cred(minor_status, desired_name, time_req,
	    desired_mechs, cred_usage, handle, actual_mechs, time_rec);
    	if (ret != GSS_S_COMPLETE) {
	    free(handle);
	    return (ret);
	}
    } else if (cred_usage == GSS_C_ACCEPT || cred_usage == GSS_C_BOTH) {
	ret = acquire_acceptor_cred(minor_status, desired_name, time_req,
	    desired_mechs, cred_usage, handle, actual_mechs, time_rec);
	if (ret != GSS_S_COMPLETE) {
	    free(handle);
	    return (ret);
	}
    } else {
	free(handle);
	*minor_status = GSS_KRB5_S_G_BAD_USAGE;
	return GSS_S_FAILURE;
    }
d143 4
a146 2
    if (ret == GSS_S_COMPLETE)
    	ret = gss_add_oid_set_member(minor_status, GSS_KRB5_MECHANISM,
d148 4
a151 2
    if (ret == GSS_S_COMPLETE)
    	ret = gss_inquire_cred(minor_status, handle, NULL, time_rec, NULL,
d153 3
a155 10
    if (ret != GSS_S_COMPLETE) {
	if (handle->mechanisms != NULL)
		gss_release_oid_set(NULL, &handle->mechanisms);
	free(handle);
	return (ret);
    } 
    *minor_status = 0;
    if (time_rec)
	*time_rec = handle->lifetime;
    handle->usage = cred_usage;
d158 18
@


1.1.1.5
log
@Import of heimdal-0.6.3
@
text
@d36 1
a36 1
RCSID("$KTH: acquire_cred.c,v 1.13.2.1 2003/08/15 14:18:24 lha Exp $");
d298 2
a299 8
    if (time_rec) {
	ret = gssapi_lifetime_left(minor_status,
				   handle->lifetime,
				   time_rec);

	if (ret)
	    return ret;
    }
@


1.1.1.6
log
@Import of heimdal-0.7.2
@
text
@d2 1
a2 1
 * Copyright (c) 1997 - 2004 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: acquire_cred.c,v 1.22.4.1 2005/12/01 18:53:56 lha Exp $");
a43 2
    HEIMDAL_MUTEX_lock(&gssapi_keytab_mutex);

a51 3

    HEIMDAL_MUTEX_unlock(&gssapi_keytab_mutex);

d69 1
a69 1
    krb5_get_init_creds_opt *opt;
d115 1
a115 3
	kret = krb5_get_init_creds_opt_alloc(gssapi_krb5_context, &opt);
	if (kret)
	    goto end;
d117 1
a117 2
	    handle->principal, keytab, 0, NULL, opt);
	krb5_get_init_creds_opt_free(opt);
d165 1
a165 1
	krb5_free_cred_contents(gssapi_krb5_context, &cred);
a199 11
    
    /* check that the requested principal exists in the keytab */
    if (handle->principal) {
	krb5_keytab_entry entry;

	kret = krb5_kt_get_entry(gssapi_krb5_context, handle->keytab, 
				 handle->principal, 0, 0, &entry);
	if (kret)
	    goto end;
	krb5_kt_free_entry(gssapi_krb5_context, &entry);
    }
a227 5
    if (cred_usage != GSS_C_ACCEPT && cred_usage != GSS_C_INITIATE && cred_usage != GSS_C_BOTH) {
	*minor_status = GSS_KRB5_S_G_BAD_USAGE;
	return GSS_S_FAILURE;
    }

d237 1
a237 1
	int present = 0;
a255 1
    HEIMDAL_MUTEX_init(&handle->cred_id_mutex);
a260 1
	    HEIMDAL_MUTEX_destroy(&handle->cred_id_mutex);
a268 2
	    HEIMDAL_MUTEX_destroy(&handle->cred_id_mutex);
	    krb5_free_principal(gssapi_krb5_context, handle->principal);
d272 1
a272 2
    }
    if (cred_usage == GSS_C_ACCEPT || cred_usage == GSS_C_BOTH) {
a275 2
	    HEIMDAL_MUTEX_destroy(&handle->cred_id_mutex);
	    krb5_free_principal(gssapi_krb5_context, handle->principal);
d279 4
d293 1
a293 3
	    gss_release_oid_set(NULL, &handle->mechanisms);
	HEIMDAL_MUTEX_destroy(&handle->cred_id_mutex);
	krb5_free_principal(gssapi_krb5_context, handle->principal);
@


