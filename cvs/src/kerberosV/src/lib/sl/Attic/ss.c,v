head	1.3;
access;
symbols
	OPENBSD_5_3:1.2.0.40
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.38
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.36
	OPENBSD_5_0:1.2.0.34
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.32
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.30
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.26
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.28
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.24
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.22
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.20
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.18
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.16
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.14
	OPENBSD_4_0_BASE:1.2
	HEIMDAL_0_7_2:1.1.1.1
	OPENBSD_3_9:1.2.0.12
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.10
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.8
	OPENBSD_3_7_BASE:1.2
	HEIMDAL_0_6_3:1.1.1.1
	OPENBSD_3_6:1.2.0.6
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.4
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.2
	OPENBSD_3_4_BASE:1.2
	HEIMDAL_0_6:1.1.1.1
	HEIMDAL_0_6RC1:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.8
	OPENBSD_3_3_BASE:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.6
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.4
	OPENBSD_3_1_BASE:1.1.1.1
	HEIMDAL_0_4e:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.2
	OPENBSD_3_0_BASE:1.1.1.1
	HEIMDAL_0_3f:1.1.1.1
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2013.06.17.18.57.45;	author robert;	state dead;
branches;
next	1.2;

1.2
date	2003.04.12.23.20.08;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.25.07.52.23;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.52.23;	author hin;	state Exp;
branches;
next	;


desc
@@


1.3
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@/*
 * Copyright (c) 1998 - 2000 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
 *
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
 *
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
 *
 * 3. Neither the name of the Institute nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission. 
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE. 
 */

#include "sl_locl.h"
#include <com_err.h>
#include "ss.h"

RCSID("$KTH: ss.c,v 1.6 2000/05/25 00:14:58 assar Exp $");

struct ss_subst {
    char *name;
    char *version;
    char *info;
    ss_request_table *table;
};

static struct ss_subst subsystems[2];
static int num_subsystems;

int
ss_create_invocation(const char *subsystem, 
		     const char *version, 
		     const char *info, 
		     ss_request_table *table, 
		     int *code)
{
    struct ss_subst *ss;

    if(num_subsystems >= sizeof(subsystems) / sizeof(subsystems[0])) {
	*code = 17;
	return 0;
    }
    ss = &subsystems[num_subsystems];
    ss->name = ss->version = ss->info = NULL;
    if (subsystem != NULL) {
	ss->name = strdup (subsystem);
	if (ss->name == NULL) {
	    *code = ENOMEM;
	    return 0;
	}
    }
    if (version != NULL) {
	ss->version = strdup (version);
	if (ss->version == NULL) {
	    *code = ENOMEM;
	    return 0;
	}
    }
    if (info != NULL) {
	ss->info = strdup (info);
	if (ss->info == NULL) {
	    *code = ENOMEM;
	    return 0;
	}
    }
    ss->table = table;
    *code = 0;
    return num_subsystems++;
}

void
ss_error (int index, long code, const char *fmt, ...)
{
    va_list ap;
    va_start(ap, fmt);
    com_err_va (subsystems[index].name, code, fmt, ap);
    va_end(ap);
}

void
ss_perror (int index, long code, const char *msg)
{
    ss_error(index, code, "%s", msg);
}

int
ss_execute_command(int index, char **argv)
{
    int argc = 0;
    int ret;

    while(argv[argc++]);
    ret = sl_command(subsystems[index].table, argc, argv);
    if (ret == SL_BADCOMMAND)
	return SS_ET_COMMAND_NOT_FOUND;
    return 0;
}

int
ss_execute_line (int index, const char *line)
{
    char *buf = strdup(line);
    int argc;
    char **argv;
    int ret;
    
    if (buf == NULL)
	return ENOMEM;
    sl_make_argv(buf, &argc, &argv);
    ret = sl_command(subsystems[index].table, argc, argv);
    free(buf);
    if (ret == SL_BADCOMMAND)
	return SS_ET_COMMAND_NOT_FOUND;
    return 0;
}

int
ss_listen (int index)
{
    size_t len = strlen(subsystems[index].name) + 3;
    char *prompt = malloc(len);
    if (prompt == NULL)
	return ENOMEM;

    strlcpy(prompt, subsystems[index].name, len);
    strlcat(prompt, ": ", len);
    sl_loop(subsystems[index].table, prompt);
    free(prompt);
    return 0;
}

int
ss_list_requests(int argc, char **argv /* , int index, void *info */)
{
    sl_help(subsystems[0 /* index */].table, argc, argv);
    return 0;
}

int
ss_quit(int argc, char **argv)
{
    return 1;
}
@


1.2
log
@string cleaning; parts by me, then parts by hin, then more parts by me.
since this is not a very important part of the source tree, and since it
does compile, i am dumping it in now.
@
text
@@


1.1
log
@Initial revision
@
text
@d140 2
a141 1
    char *prompt = malloc(strlen(subsystems[index].name) + 3);
d145 2
a146 2
    strcpy(prompt, subsystems[index].name);
    strcat(prompt, ": ");
@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@
