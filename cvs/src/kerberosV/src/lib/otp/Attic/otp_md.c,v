head	1.6;
access;
symbols
	OPENBSD_5_5:1.5.0.6
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	HEIMDAL_0_7_2:1.1.1.3
	HEIMDAL_0_6_3:1.1.1.3
	HEIMDAL_0_6RC1:1.1.1.3
	OPENBSD_3_3:1.1.1.2.0.6
	OPENBSD_3_3_BASE:1.1.1.2
	OPENBSD_3_2:1.1.1.2.0.4
	OPENBSD_3_2_BASE:1.1.1.2
	OPENBSD_3_1:1.1.1.2.0.2
	OPENBSD_3_1_BASE:1.1.1.2
	HEIMDAL_0_4e:1.1.1.2
	OPENBSD_3_0:1.1.1.1.0.2
	OPENBSD_3_0_BASE:1.1.1.1
	HEIMDAL_0_3f:1.1.1.1
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2014.04.22.10.01.33;	author reyk;	state dead;
branches;
next	1.5;

1.5
date	2013.06.17.19.11.44;	author robert;	state Exp;
branches;
next	1.4;

1.4
date	2003.05.12.17.18.48;	author hin;	state dead;
branches;
next	1.3;

1.3
date	2003.05.11.03.40.00;	author hin;	state Exp;
branches;
next	1.2;

1.2
date	2003.04.12.23.20.07;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.25.07.52.16;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.52.16;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.02.06.08.56.15;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.02.16.11;	author hin;	state Exp;
branches;
next	;


desc
@@


1.6
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/*
 * Copyright (c) 1995 - 2003 Kungliga Tekniska HÃ¶gskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#define HC_DEPRECATED_CRYPTO

#include "config.h"

#include "otp_locl.h"

#include "otp_md.h"
#include "crypto-headers.h"

/*
 * Compress len bytes from md into key
 */

static void
compressmd (OtpKey key, unsigned char *md, size_t len)
{
    u_char *p = key;

    memset (p, 0, OTPKEYSIZE);
    while(len) {
	*p++ ^= *md++;
	*p++ ^= *md++;
	*p++ ^= *md++;
	*p++ ^= *md++;
	len -= 4;
	if (p == key + OTPKEYSIZE)
	    p = key;
    }
}

/*
 * For histerical reasons, in the OTP definition it's said that
 * the result from SHA must be stored in little-endian order.  See
 * draft-ietf-otp-01.txt.
 */

static void
little_endian(unsigned char *res, size_t len)
{
    unsigned char t;
    size_t i;

    for (i = 0; i < len; i += 4) {
	t = res[i + 0]; res[i + 0] = res[i + 3]; res[i + 3] = t;
	t = res[i + 1]; res[i + 1] = res[i + 2]; res[i + 2] = t;
    }
}

static int
otp_md_init (OtpKey key,
	     const char *pwd,
	     const char *seed,
	     const EVP_MD *md,
	     int le,
	     unsigned char *res,
	     size_t ressz)
{
    EVP_MD_CTX *ctx;
    char *p;
    int len;

    ctx = EVP_MD_CTX_create();

    len = strlen(pwd) + strlen(seed);
    p = malloc (len + 1);
    if (p == NULL)
	return -1;
    strlcpy (p, seed, len + 1);
    strlwr (p);
    strlcat (p, pwd, len + 1);

    EVP_DigestInit_ex(ctx, md, NULL);
    EVP_DigestUpdate(ctx, p, len);
    EVP_DigestFinal_ex(ctx, res, NULL);

    EVP_MD_CTX_destroy(ctx);

    if (le)
    	little_endian(res, ressz);

    free (p);
    compressmd (key, res, ressz);
    return 0;
}

static int
otp_md_next (OtpKey key,
	     const EVP_MD *md,
	     int le,
	     unsigned char *res,
	     size_t ressz)
{
    EVP_MD_CTX *ctx;

    ctx = EVP_MD_CTX_create();

    EVP_DigestInit_ex(ctx, md, NULL);
    EVP_DigestUpdate(ctx, key, OTPKEYSIZE);
    EVP_DigestFinal_ex(ctx, res, NULL);

    EVP_MD_CTX_destroy(ctx);

    if (le)
	little_endian(res, ressz);

    compressmd (key, res, ressz);
    return 0;
}

static int
otp_md_hash (const char *data,
	     size_t len,
	     const EVP_MD *md,
	     int le,
	     unsigned char *res,
	     size_t ressz)
{
    EVP_MD_CTX *ctx;
    ctx = EVP_MD_CTX_create();

    EVP_DigestInit_ex(ctx, md, NULL);
    EVP_DigestUpdate(ctx, data, len);
    EVP_DigestFinal_ex(ctx, res, NULL);

    EVP_MD_CTX_destroy(ctx);

    if (le)
	little_endian(res, ressz);

    return 0;
}

int
otp_md4_init (OtpKey key, const char *pwd, const char *seed)
{
  unsigned char res[16];
  return otp_md_init (key, pwd, seed, EVP_md4(), 0, res, sizeof(res));
}

int
otp_md4_hash (const char *data,
	      size_t len,
	      unsigned char *res)
{
  return otp_md_hash (data, len, EVP_md4(), 0, res, 16);
}

int
otp_md4_next (OtpKey key)
{
  unsigned char res[16];
  return otp_md_next (key, EVP_md4(), 0, res, sizeof(res));
}


int
otp_md5_init (OtpKey key, const char *pwd, const char *seed)
{
  unsigned char res[16];
  return otp_md_init (key, pwd, seed, EVP_md5(), 0, res, sizeof(res));
}

int
otp_md5_hash (const char *data,
	      size_t len,
	      unsigned char *res)
{
  return otp_md_hash (data, len, EVP_md5(), 0, res, 16);
}

int
otp_md5_next (OtpKey key)
{
  unsigned char res[16];
  return otp_md_next (key, EVP_md5(), 0, res, sizeof(res));
}

int
otp_sha_init (OtpKey key, const char *pwd, const char *seed)
{
  unsigned char res[20];
  return otp_md_init (key, pwd, seed, EVP_sha1(), 1, res, sizeof(res));
}

int
otp_sha_hash (const char *data,
	      size_t len,
	      unsigned char *res)
{
  return otp_md_hash (data, len, EVP_sha1(), 1, res, 20);
}

int
otp_sha_next (OtpKey key)
{
  unsigned char res[20];
  return otp_md_next (key, EVP_sha1(), 1, res, sizeof(res));
}
@


1.5
log
@2nd part of:
update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.
@
text
@@


1.4
log
@These files are not use by us, so they're removed to make the tree
a little bit leaner, and to get rid of some bad string functions.
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2003 Kungliga Tekniska Högskolan
d5 1
a5 1
 * 
d9 1
a9 1
 * 
d12 1
a12 1
 * 
d16 1
a16 1
 * 
d20 1
a20 1
 * 
d34 2
a35 1
#ifdef HAVE_CONFIG_H
d37 1
a37 2
RCSID("$KTH: otp_md.c,v 1.18 2003/04/16 16:19:33 lha Exp $");
#endif
d50 1
a50 1
  u_char *p = key;
d52 10
a61 10
  memset (p, 0, OTPKEYSIZE);
  while(len) {
    *p++ ^= *md++;
    *p++ ^= *md++;
    *p++ ^= *md++;
    *p++ ^= *md++;
    len -= 4;
    if (p == key + OTPKEYSIZE)
      p = key;
  }
d64 6
a69 1
#ifdef HAVE_OLD_HASH_NAMES
d71 1
a71 1
otp_md4_final (void *res, struct md4 *m)
d73 2
a74 4
    MD4_Final(res, m);
}
#undef MD4_Final
#define MD4_Final otp_md4_final
d76 4
a79 4
static void
otp_md5_final (void *res, struct md5 *m)
{
    MD5_Final(res, m);
a80 3
#undef MD5_Final
#define MD5_Final otp_md5_final
#endif
d86 2
a87 4
	     void (*init)(void *),
	     void (*update)(void *, const void *, size_t),
	     void (*final)(void *, void *),
	     void *arg,
d91 26
a116 16
  char *p;
  int len;

  len = strlen(pwd) + strlen(seed);
  p = malloc (len + 1);
  if (p == NULL)
    return -1;
  strlcpy (p, seed, len + 1);
  strlwr (p);
  strlcat (p, pwd, len + 1);
  (*init)(arg);
  (*update)(arg, p, len);
  (*final)(res, arg);
  free (p);
  compressmd (key, res, ressz);
  return 0;
d121 2
a122 4
	     void (*init)(void *),
	     void (*update)(void *, const void *, size_t),
	     void (*final)(void *, void *),
	     void *arg,
d126 15
a140 5
  (*init)(arg);
  (*update)(arg, key, OTPKEYSIZE);
  (*final)(res, arg);
  compressmd (key, res, ressz);
  return 0;
d146 2
a147 4
	     void (*init)(void *),
	     void (*update)(void *, const void *, size_t),
	     void (*final)(void *, void *),
	     void *arg,
d151 13
a163 4
  (*init)(arg);
  (*update)(arg, data, len);
  (*final)(res, arg);
  return 0;
d170 1
a170 7
  MD4_CTX md4;

  return otp_md_init (key, pwd, seed,
		      (void (*)(void *))MD4_Init,
		      (void (*)(void *, const void *, size_t))MD4_Update, 
		      (void (*)(void *, void *))MD4_Final,
		      &md4, res, sizeof(res));
d178 1
a178 7
  MD4_CTX md4;

  return otp_md_hash (data, len,
		      (void (*)(void *))MD4_Init,
		      (void (*)(void *, const void *, size_t))MD4_Update, 
		      (void (*)(void *, void *))MD4_Final,
		      &md4, res, 16);
d185 1
a185 7
  MD4_CTX md4;

  return otp_md_next (key, 
		      (void (*)(void *))MD4_Init, 
		      (void (*)(void *, const void *, size_t))MD4_Update, 
		      (void (*)(void *, void *))MD4_Final,
		      &md4, res, sizeof(res));
d193 1
a193 7
  MD5_CTX md5;

  return otp_md_init (key, pwd, seed, 
		      (void (*)(void *))MD5_Init, 
		      (void (*)(void *, const void *, size_t))MD5_Update, 
		      (void (*)(void *, void *))MD5_Final,
		      &md5, res, sizeof(res));
d201 1
a201 7
  MD5_CTX md5;

  return otp_md_hash (data, len,
		      (void (*)(void *))MD5_Init,
		      (void (*)(void *, const void *, size_t))MD5_Update, 
		      (void (*)(void *, void *))MD5_Final,
		      &md5, res, 16);
d208 1
a208 29
  MD5_CTX md5;

  return otp_md_next (key, 
		      (void (*)(void *))MD5_Init, 
		      (void (*)(void *, const void *, size_t))MD5_Update, 
		      (void (*)(void *, void *))MD5_Final,
		      &md5, res, sizeof(res));
}

/* 
 * For histerical reasons, in the OTP definition it's said that the
 * result from SHA must be stored in little-endian order.  See
 * draft-ietf-otp-01.txt.
 */

static void
SHA1_Final_little_endian (void *res, SHA_CTX *m)
{
  unsigned char tmp[20];
  unsigned char *p = res;
  int j;

  SHA1_Final (tmp, m);
  for (j = 0; j < 20; j += 4) {
    p[j]   = tmp[j+3];
    p[j+1] = tmp[j+2];
    p[j+2] = tmp[j+1];
    p[j+3] = tmp[j];
  }
d215 1
a215 7
  SHA_CTX sha1;

  return otp_md_init (key, pwd, seed, 
		      (void (*)(void *))SHA1_Init, 
		      (void (*)(void *, const void *, size_t))SHA1_Update, 
		      (void (*)(void *, void *))SHA1_Final_little_endian,
		      &sha1, res, sizeof(res));
d223 1
a223 7
  SHA_CTX sha1;

  return otp_md_hash (data, len,
		      (void (*)(void *))SHA1_Init,
		      (void (*)(void *, const void *, size_t))SHA1_Update, 
		      (void (*)(void *, void *))SHA1_Final_little_endian,
		      &sha1, res, 20);
d230 1
a230 7
  SHA_CTX sha1;

  return otp_md_next (key, 
		      (void (*)(void *))SHA1_Init,
		      (void (*)(void *, const void *, size_t))SHA1_Update,
		      (void (*)(void *, void *))SHA1_Final_little_endian,
		      &sha1, res, sizeof(res));
@


1.3
log
@Merge 0.6rc1
@
text
@@


1.2
log
@string cleaning; parts by me, then parts by hin, then more parts by me.
since this is not a very important part of the source tree, and since it
does compile, i am dumping it in now.
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2001 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: otp_md.c,v 1.15 2001/08/22 20:30:32 assar Exp $");
d41 1
a41 9
#ifdef HAVE_OPENSSL
#include <openssl/md4.h>
#include <openssl/md5.h>
#include <openssl/sha.h>
#else
#include <md4.h>
#include <md5.h>
#include <sha.h>
#endif
d64 18
d100 1
a100 1
  strlcpy (p, seed, len+1);
d102 1
a102 1
  strlcat (p, pwd, len+1);
@


1.1
log
@Initial revision
@
text
@d36 1
a36 1
RCSID("$KTH: otp_md.c,v 1.14 2001/01/29 05:55:18 assar Exp $");
d41 1
a41 1
#ifdef HAVE_OPENSSL_MD4_H
d43 2
a46 4
#endif
#ifdef HAVE_OPENSSL_MD5_H
#include <openssl/md5.h>
#else
a47 4
#endif
#ifdef HAVE_OPENSSL_SHA_H
#include <openssl/sha.h>
#else
d90 1
a90 1
  strcpy (p, seed);
d92 1
a92 1
  strcat (p, pwd);
@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.4e
@
text
@d36 1
a36 1
RCSID("$KTH: otp_md.c,v 1.15 2001/08/22 20:30:32 assar Exp $");
d41 1
a41 1
#ifdef HAVE_OPENSSL
d43 4
d48 4
a53 2
#include <md4.h>
#include <md5.h>
@


1.1.1.3
log
@Import of heimdal-0.6rc1
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2003 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: otp_md.c,v 1.18 2003/04/16 16:19:33 lha Exp $");
d41 9
a49 1
#include "crypto-headers.h"
a71 18
#ifdef HAVE_OLD_HASH_NAMES
static void
otp_md4_final (void *res, struct md4 *m)
{
    MD4_Final(res, m);
}
#undef MD4_Final
#define MD4_Final otp_md4_final

static void
otp_md5_final (void *res, struct md5 *m)
{
    MD5_Final(res, m);
}
#undef MD5_Final
#define MD5_Final otp_md5_final
#endif

d90 1
a90 1
  strlcpy (p, seed, len + 1);
d92 1
a92 1
  strlcat (p, pwd, len + 1);
@


