head	1.6;
access;
symbols
	OPENBSD_5_5:1.5.0.6
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	HEIMDAL_0_7_2:1.1.1.3
	HEIMDAL_0_6_3:1.1.1.3
	HEIMDAL_0_6RC1:1.1.1.3
	OPENBSD_3_3:1.2.0.6
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.4
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	HEIMDAL_0_4e:1.1.1.2
	OPENBSD_3_0:1.1.1.2.0.2
	OPENBSD_3_0_BASE:1.1.1.2
	HEIMDAL_0_3f:1.1.1.2
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2014.04.22.10.01.31;	author reyk;	state dead;
branches;
next	1.5;

1.5
date	2013.06.17.19.11.44;	author robert;	state Exp;
branches;
next	1.4;

1.4
date	2003.05.12.17.18.48;	author hin;	state dead;
branches;
next	1.3;

1.3
date	2003.05.11.03.40.00;	author hin;	state Exp;
branches;
next	1.2;

1.2
date	2002.01.14.14.53.54;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.25.07.50.31;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.50.31;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.06.22.21.23.16;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.02.15.47;	author hin;	state Exp;
branches;
next	;


desc
@@


1.6
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/*
 * lib/krb5/os/k5dfspag.c
 *
 * New Kerberos module to issue the DFS PAG syscalls.
 * It also contains the routine to fork and exec the
 * k5dcecon routine to do most of the work.
 *
 * This file is designed to be as independent of DCE
 * and DFS as possible. The only dependencies are on
 * the syscall numbers.  If DFS not running or not installed,
 * the sig handlers will catch and the signal and
 * will  continue.
 *
 * krb5_dfs_newpag and krb5_dfs_getpag should not be real
 * Kerberos routines, since they should be setpag and getpag
 * in the DCE library, but without the DCE baggage.
 * Thus they don't have context, and don't return a krb5 error.
 *
 *
 *
 * krb5_dfs_pag()
 */

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif

RCSID("$Id: k5dfspag.c,v 1.5 2013/06/17 19:11:44 robert Exp $");

#include <krb5.h>

#ifdef DCE

#include <stdio.h>
#include <sys/stat.h>
#include <sys/wait.h>
#include <fcntl.h>
#include <sys/param.h>

/* Only run this DFS PAG code on systems with POSIX
 * All that we are interested in dor:, AIX 4.x,
 * Solaris 2.5.x, HPUX 10.x  Even SunOS 4.1.4, AIX 3.2.5
 * and SGI 5.3 are OK.  This simplifies
 * the build/configure which I don't want to change now.
 * All of them also have waitpid as well.
 */

#define POSIX_SETJMP
#define POSIX_SIGNALS
#define HAVE_WAITPID

#include <signal.h>
#include <setjmp.h>
#ifndef POSIX_SETJMP
#undef sigjmp_buf
#undef sigsetjmp
#undef siglongjmp
#define sigjmp_buf  jmp_buf
#define sigsetjmp(j,s)  setjmp(j)
#define siglongjmp  longjmp
#endif

#ifdef POSIX_SIGNALS
typedef struct sigaction handler;
#define handler_init(H,F)       (sigemptyset(&(H).sa_mask), \
                     (H).sa_flags=0, \
                     (H).sa_handler=(F))
#define handler_swap(S,NEW,OLD)     sigaction(S, &NEW, &OLD)
#define handler_set(S,OLD)      sigaction(S, &OLD, NULL)
#else
typedef sigtype (*handler)();
#define handler_init(H,F)       ((H) = (F))
#define handler_swap(S,NEW,OLD)     ((OLD) = signal ((S), (NEW)))
#define handler_set(S,OLD)      (signal ((S), (OLD)))
#endif

#define krb5_sigtype void
#define WAIT_USES_INT
typedef krb5_sigtype sigtype;


/*
 * Need some syscall numbers based on different systems.
 * These are based on:
 * HPUX 10.10 /opt/dce/include/dcedfs/syscall.h
 * Solaris 2.5 /opt/dcelocal/share/include/dcedfs/syscall.h
 * AIX 4.2  - needs some funny games with load and kafs_syscall
 * to get the kernel extentions. There should be a better way!
 *
 * DEE 5/27/97
 *
 */


#define AFSCALL_SETPAG 2
#define AFSCALL_GETPAG 11

#if defined(sun)
#define AFS_SYSCALL  72

#elif defined(hpux)
/* assume HPUX 10 +  or is it 50 */
#define AFS_SYSCALL 326

#elif defined(_AIX)
#ifndef DPAGAIX
#define DPAGAIX LIBEXECDIR "/dpagaix"
#endif
int *load();
static int (*dpagaix)(int, int, int, int, int, int) = 0;

#elif defined(sgi) || defined(_sgi)
#define AFS_SYSCALL      206+1000

#else
#define AFS_SYSCALL (Unknown_DFS_AFS_SYSCALL)
#endif


#ifdef  WAIT_USES_INT
                int wait_status;
#else   /* WAIT_USES_INT */
                union wait wait_status;
#endif  /* WAIT_USES_INT */

#ifndef K5DCECON
#define K5DCECON LIBEXECDIR "/k5dcecon"
#endif

/*
 * mysig()
 *
 * signal handler if DFS not running
 *
 */

static sigjmp_buf setpag_buf;

static sigtype mysig()
{
  siglongjmp(setpag_buf, 1);
}

/*
 * krb5_dfs_pag_syscall()
 *
 * wrapper for the syscall with signal handlers
 *
 */

static int  krb5_dfs_pag_syscall(opt1,opt2)
  int opt1;
  int opt2;
{
  handler sa1, osa1;
  handler sa2, osa2;
  int pag = -2;

  handler_init (sa1, mysig);
  handler_init (sa2, mysig);
  handler_swap (SIGSYS, sa1, osa1);
  handler_swap (SIGSEGV, sa2, osa2);

  if (sigsetjmp(setpag_buf, 1) == 0) {

#if defined(_AIX)
    if (!dpagaix)
      dpagaix = load(DPAGAIX, 0, 0);
    if (dpagaix)
      pag = (*dpagaix)(opt1, opt2, 0, 0, 0, 0);
#else
    pag = syscall(AFS_SYSCALL, opt1, opt2, 0, 0, 0, 0);
#endif

    handler_set (SIGSYS, osa1);
    handler_set (SIGSEGV, osa2);
    return(pag);
  }

  /* syscall failed! return 0 */
  handler_set (SIGSYS, osa1);
  handler_set (SIGSEGV, osa2);
  return(-2);
}

/*
 * krb5_dfs_newpag()
 *
 * issue a DCE/DFS setpag system call to set the newpag
 * for this process. This takes advantage of a currently
 * undocumented feature of the Transarc port of DFS.
 * Even in DCE 1.2.2 for which the source is available,
 * (but no vendors have released), this feature is not
 * there, but it should be, or could be added.
 * If new_pag is zero, then the syscall will get a new pag
 * and return its value.
 */

int krb5_dfs_newpag(new_pag)
  int new_pag;
{
  return(krb5_dfs_pag_syscall(AFSCALL_SETPAG, new_pag));
}

/*
 * krb5_dfs_getpag()
 *
 * get the current PAG. Used mostly as a test.
 */

int krb5_dfs_getpag()
{
  return(krb5_dfs_pag_syscall(AFSCALL_GETPAG, 0));
}

/*
 * krb5_dfs_pag()
 *
 * Given a principal and local username,
 * fork and exec the k5dcecon module to create
 * refresh or join a new DCE/DFS
 * Process Authentication Group (PAG)
 *
 * This routine should be called after krb5_kuserok has
 * determined that this combination of local user and
 * principal are acceptable for the local host.
 *
 * It should also be called after a forwarded ticket has
 * been received, and the KRB5CCNAME environment variable
 * has been set to point at it. k5dcecon will convert this
 * to a new DCE context and a new pag and replace KRB5CCNAME
 * in the environment.
 *
 * If there is no forwarded ticket, k5dcecon will attempt
 * to join an existing PAG for the same principal and local
 * user.
 *
 * And it should be called before access to the home directory
 * as this may be in DFS, not accessable by root, and require
 * the PAG to have been setup.
 *
 * The krb5_afs_pag can be called after this routine to
 * use the the cache obtained by k5dcecon to get an AFS token.
 * DEE - 7/97
 */

int krb5_dfs_pag(context, flag, principal, luser)
	krb5_context context;
    int flag; /* 1 if a forwarded TGT is to be used */
	krb5_principal principal;
	const char *luser;

{

  struct stat stx;
  int fd[2];
  int i,j;
  int pid;
  int new_pag;
  int pag;
  char newccname[MAXPATHLEN] = "";
  char *princ;
  int err;
  struct sigaction newsig, oldsig;

#ifdef  WAIT_USES_INT
  int wait_status;
#else   /* WAIT_USES_INT */
  union wait wait_status;
#endif  /* WAIT_USES_INT */

  if (krb5_unparse_name(context, principal, &princ))
   return(0);

   /* test if DFS is running or installed */
   if (krb5_dfs_getpag() == -2)
     return(0); /* DFS not running, dont try */

  if (pipe(fd) == -1)
     return(0);

  /* Make sure that telnetd.c's SIGCHLD action don't happen right now... */
  memset((char *)&newsig, 0, sizeof(newsig));
  newsig.sa_handler = SIG_DFL;
  sigaction(SIGCHLD, &newsig, &oldsig);

  pid = fork();
  if (pid <0)
   return(0);

  if (pid == 0) {  /* child process */

    close(1);       /* close stdout */
    dup(fd[1]);     /* point stdout at pipe here */
    close(fd[0]);   /* don't use end of pipe here */
    close(fd[1]);   /* pipe now as stdout */

    execl(K5DCECON, "k5dcecon",
         (flag) ? "-f" : "-s" ,
		 "-l", luser,
		 "-p", princ, (char *)0);

    exit(127);      /* incase execl fails */
  }

  /* parent, wait for child to finish */

  close(fd[1]);  /* dont need this end of pipe */

/* #if defined(sgi) || defined(_sgi) */
  /* wait_status.w_status = 0; */
  /* waitpid((pid_t) pid, &wait_status.w_status, 0); */
/* #else */


  wait_status = 0;
#ifdef  HAVE_WAITPID
  err = waitpid((pid_t) pid, &wait_status, 0);
#else   /* HAVE_WAITPID */
  err = wait4(pid, &wait_status, 0, (struct rusage *) NULL);
#endif  /* HAVE_WAITPID */
/* #endif */

  sigaction(SIGCHLD, &oldsig, 0);
  if (WIFEXITED(wait_status)){
    if (WEXITSTATUS(wait_status) == 0) {
      i = 1;
      j = 0;
      while (i != 0) {
        i = read(fd[0], &newccname[j], sizeof(newccname)-1-j);
        if ( i > 0)
          j += i;
        if (j >=  sizeof(newccname)-1)
          i = 0;
      }
      close(fd[0]);
      if (j > 0) {
        newccname[j] = '\0';
        esetenv("KRB5CCNAME",newccname,1);
        sscanf(&newccname[j-8],"%8x",&new_pag);
        if (new_pag && strncmp("FILE:/opt/dcelocal/var/security/creds/dcecred_", newccname, 46) == 0) {
          if((pag = krb5_dfs_newpag(new_pag)) != -2) {
            return(pag);
          }
        }
      }
    }
  }
  return(0); /* something not right */
}

#else /* DCE */

/*
 * krb5_dfs_pag - dummy version for the lib for systems
 * which don't have DFS, or the needed setpag kernel code.
 */

krb5_boolean
krb5_dfs_pag(context, principal, luser)
	krb5_context context;
	krb5_principal principal;
	const char *luser;
{
	return(0);
}

#endif /* DCE */
@


1.5
log
@2nd part of:
update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.
@
text
@d28 1
a28 1
RCSID("$Id$");
@


1.4
log
@These files are not use by us, so they're removed to make the tree
a little bit leaner, and to get rid of some bad string functions.
@
text
@d1 1
a1 1
/* 
d4 1
a4 1
 * New Kerberos module to issue the DFS PAG syscalls. 
d6 4
a9 4
 * k5dcecon routine to do most of the work. 
 * 
 * This file is designed to be as independent of DCE 
 * and DFS as possible. The only dependencies are on 
d11 2
a12 2
 * the sig handlers will catch and the signal and 
 * will  continue. 
d16 4
a19 2
 * in the DCE library, but without the DCE baggage. 
 * Thus they don't have context, and don't return a krb5 error. 
a20 2
 * 
 * 
d28 1
a28 1
RCSID("$KTH: k5dfspag.c,v 1.6 2002/08/12 15:11:58 joda Exp $");
d45 1
a45 1
 * All of them also have waitpid as well. 
d82 4
a85 4
/* 
 * Need some syscall numbers based on different systems. 
 * These are based on: 
 * HPUX 10.10 /opt/dce/include/dcedfs/syscall.h 
d88 2
a89 2
 * to get the kernel extentions. There should be a better way! 
 * 
d130 1
a130 1
/* 
d151 1
a151 1
static int  krb5_dfs_pag_syscall(opt1,opt2) 
d163 1
a163 1
  
d169 1
a169 1
    if (dpagaix) 
d172 1
a172 1
    pag = syscall(AFS_SYSCALL, opt1, opt2, 0, 0, 0, 0); 
d191 1
a191 1
 * undocumented feature of the Transarc port of DFS. 
d194 1
a194 1
 * there, but it should be, or could be added. 
d196 2
a197 2
 * and return its value. 
 */ 
d199 1
a199 1
int krb5_dfs_newpag(new_pag) 
d205 1
a205 1
/* 
d208 1
a208 1
 * get the current PAG. Used mostly as a test. 
d220 1
a220 1
 * fork and exec the k5dcecon module to create 
d223 6
a228 6
 * 
 * This routine should be called after krb5_kuserok has 
 * determined that this combination of local user and 
 * principal are acceptable for the local host. 
 * 
 * It should also be called after a forwarded ticket has 
d232 1
a232 1
 * in the environment. 
d236 1
a236 1
 * user. 
d240 4
a243 4
 * the PAG to have been setup. 
 * 
 * The krb5_afs_pag can be called after this routine to 
 * use the the cache obtained by k5dcecon to get an AFS token. 
d245 2
a246 2
 */ 
 
d254 1
a254 1
  
d261 1
a261 1
  char newccname[MAXPATHLEN] = ""; 
d263 1
a263 1
  int err; 
d278 2
a279 2
  
  if (pipe(fd) == -1) 
d288 1
a288 1
  if (pid <0) 
d304 1
a304 1
  } 
d338 1
a338 1
        newccname[j] = '\0'; 
d354 3
a356 3
/* 
 * krb5_dfs_pag - dummy version for the lib for systems 
 * which don't have DFS, or the needed setpag kernel code.  
@


1.3
log
@Merge 0.6rc1
@
text
@@


1.2
log
@Use SIG_DFL to reset SIGCHLD handlers, not SIG_IGN which has a different
meaning now.
@
text
@d28 1
a28 1
RCSID("$KTH: k5dfspag.c,v 1.4 2001/02/07 06:14:46 assar Exp $");
d107 1
a107 1
#define DPAGAIX LIBEXECDIR ## "/dpagaix"
d127 1
a127 1
#define K5DCECON LIBEXECDIR ## "/k5dcecon"
@


1.1
log
@Initial revision
@
text
@d24 6
d284 1
a284 1
  newsig.sa_handler = SIG_IGN;
@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.3f

Lots of changes, highlights include:

 * change default keytab to ANY:FILE:/etc/krb5.keytab,krb4:/etc/srvtab,
   the new keytab type that tries both of these in order (SRVTAB is
   also an alias for krb4:)

 * improve error reporting and error handling (error messages should
   be more detailed and more useful)

 * the API is closer to what MIT krb5 is using

 * more compatible with windows 2000

 * removed some memory leaks

 * bug fixes
@
text
@a23 6
#ifdef HAVE_CONFIG_H
#include <config.h>
#endif

RCSID("$KTH: k5dfspag.c,v 1.4 2001/02/07 06:14:46 assar Exp $");

@


1.1.1.3
log
@Import of heimdal-0.6rc1
@
text
@d28 1
a28 1
RCSID("$KTH: k5dfspag.c,v 1.6 2002/08/12 15:11:58 joda Exp $");
d107 1
a107 1
#define DPAGAIX LIBEXECDIR "/dpagaix"
d127 1
a127 1
#define K5DCECON LIBEXECDIR "/k5dcecon"
d284 1
a284 1
  newsig.sa_handler = SIG_DFL;
@


