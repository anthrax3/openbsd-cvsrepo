head	1.3;
access;
symbols
	OPENBSD_5_3:1.2.0.28
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.26
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.24
	OPENBSD_5_0:1.2.0.22
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.20
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.18
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.14
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.16
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.12
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.10
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.8
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.6
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.4
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.2
	OPENBSD_4_0_BASE:1.2
	HEIMDAL_0_7_2:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@.\" @;


1.3
date	2013.06.17.18.57.44;	author robert;	state dead;
branches;
next	1.2;

1.2
date	2006.04.30.09.20.00;	author biorn;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.14.07.33.24;	author biorn;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.04.14.07.33.24;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.3
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@.\" Copyright (c) 2003 - 2004 Kungliga Tekniska Högskolan
.\" (Royal Institute of Technology, Stockholm, Sweden).
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\"
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" 3. Neither the name of the Institute nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\" $KTH: krb5_keyblock.3,v 1.9 2005/04/15 16:39:54 lha Exp $
.\"
.Dd Apr 14, 2005
.Dt KRB5_KEYBLOCK 3
.Os HEIMDAL
.Sh NAME
.Nm krb5_keyblock ,
.Nm krb5_keyblock_get_enctype ,
.Nm krb5_copy_keyblock ,
.Nm krb5_copy_keyblock_contents ,
.Nm krb5_free_keyblock ,
.Nm krb5_free_keyblock_contents ,
.Nm krb5_generate_random_keyblock ,
.Nm krb5_generate_subkey ,
.Nm krb5_generate_subkey_extended ,
.Nm krb5_keyblock_init ,
.Nm krb5_keyblock_zero ,
.Nm krb5_random_to_key
.Nd Kerberos 5 key handling functions
.Sh LIBRARY
Kerberos 5 Library (libkrb5, -lkrb5)
.Sh SYNOPSIS
.In krb5.h
.Pp
.Li krb5_keyblock ;
.Ft krb5_enctype
.Fo krb5_keyblock_get_enctype
.Fa "const krb5_keyblock *block"
.Fc
.Ft krb5_error_code
.Fo krb5_copy_keyblock
.Fa "krb5_context context"
.Fa "krb5_keyblock **to"
.Fc
.Ft krb5_error_code
.Fo krb5_copy_keyblock_contents
.Fa "krb5_context context"
.Fa "const krb5_keyblock *inblock"
.Fa "krb5_keyblock *to"
.Fc
.Ft void
.Fo krb5_free_keyblock
.Fa "krb5_context context"
.Fa "krb5_keyblock *keyblock"
.Fc
.Ft void
.Fo krb5_free_keyblock_contents
.Fa "krb5_context context"
.Fa "krb5_keyblock *keyblock"
.Fc
.Ft krb5_error_code
.Fo krb5_generate_random_keyblock
.Fa "krb5_context context"
.Fa "krb5_enctype type"
.Fa "krb5_keyblock *key"
.Fc
.Ft krb5_error_code
.Fo krb5_generate_subkey
.Fa "krb5_context context"
.Fa "const krb5_keyblock *key"
.Fa "krb5_keyblock **subkey"
.Fc
.Ft krb5_error_code
.Fo krb5_generate_subkey_extended
.Fa "krb5_context context"
.Fa "const krb5_keyblock *key"
.Fa "krb5_enctype enctype"
.Fa "krb5_keyblock **subkey"
.Fc
.Ft krb5_error_code
.Fo krb5_keyblock_init
.Fa "krb5_context context"
.Fa "krb5_enctype type"
.Fa "const void *data"
.Fa "size_t size"
.Fa "krb5_keyblock *key"
.Fc
.Ft void
.Fo krb5_keyblock_zero
.Fa "krb5_keyblock *keyblock"
.Fc
.Ft krb5_error_code
.Fo krb5_random_to_key
.Fa "krb5_context context"
.Fa "krb5_enctype type"
.Fa "const void *data"
.Fa "size_t size"
.Fa "krb5_keyblock *key"
.Fc
.Sh DESCRIPTION
.Li krb5_keyblock
holds the encryption key for a specific encryption type.
There is no component inside
.Li krb5_keyblock
that is directly referable.
.Pp
.Fn krb5_keyblock_get_enctype
returns the encryption type of the keyblock.
.Pp
.Fn krb5_copy_keyblock
makes a copy the keyblock
.Fa inblock
to the
output
.Fa out .
.Fa out
should be freed by the caller with
.Fa krb5_free_keyblock .
.Pp
.Fn krb5_copy_keyblock_contents
copies the contents of
.Fa inblock
to the
.Fa to
keyblock.
The destination keyblock is overritten.
.Pp
.Fn krb5_free_keyblock
zeros out and frees the content and the keyblock itself.
.Pp
.Fn krb5_free_keyblock_contents
zeros out and frees the content of the keyblock.
.Pp
.Fn krb5_generate_random_keyblock
creates a new content of the keyblock
.Fa key
of type encrytion type
.Fa type .
The content of
.Fa key
is overwritten and not freed, so the caller should be sure it is
freed before calling the function.
.Pp
.Fn krb5_generate_subkey
generates a
.Fa subkey
of the same type as
.Fa key .
The caller must free the subkey with
.Fa krb5_free_keyblock .
.Pp
.Fn krb5_generate_subkey_extended
generates a
.Fa subkey
of the specified encryption type
.Fa type .
If
.Fa type
is
.Dv ETYPE_NULL ,
of the same type as
.Fa key .
The caller must free the subkey with
.Fa krb5_free_keyblock .
.Pp
.Fn krb5_keyblock_init
Fill in
.Fa key
with key data of type
.Fa enctype
from 
.Fa data
of length
.Fa size .
Key should be freed using
.Fn krb5_free_keyblock_contents .
.Pp
.Fn krb5_keyblock_zero
zeros out the keyblock to to make sure no keymaterial is in
memory.
Note that
.Fn krb5_free_keyblock_contents
also zeros out the memory.
.Pp
.Fn krb5_random_to_key
converts the random bytestring to a protocol key according to Kerberos
crypto frame work.
It the resulting key will be of type
.Fa enctype .
It may be assumed that all the bits of the input string are equally
random, even though the entropy present in the random source may be
limited
.\" .Sh EXAMPLES
.Sh SEE ALSO
.Xr krb5_crypto_init 3 ,
.Xr krb5 3 ,
.Xr krb5.conf 5
@


1.2
log
@Minor tweaks, mostly eyeballed by jmc@@
@
text
@@


1.1
log
@Initial revision
@
text
@d50 1
a50 1
.Nd Kerberos 5 key handling functions.
@


1.1.1.1
log
@Import of heimdal-0.7.2
@
text
@@
