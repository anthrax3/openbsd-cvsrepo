head	1.3;
access;
symbols
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.2
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.1.1.3.0.28
	OPENBSD_5_3_BASE:1.1.1.3
	OPENBSD_5_2:1.1.1.3.0.26
	OPENBSD_5_2_BASE:1.1.1.3
	OPENBSD_5_1_BASE:1.1.1.3
	OPENBSD_5_1:1.1.1.3.0.24
	OPENBSD_5_0:1.1.1.3.0.22
	OPENBSD_5_0_BASE:1.1.1.3
	OPENBSD_4_9:1.1.1.3.0.20
	OPENBSD_4_9_BASE:1.1.1.3
	OPENBSD_4_8:1.1.1.3.0.18
	OPENBSD_4_8_BASE:1.1.1.3
	OPENBSD_4_7:1.1.1.3.0.14
	OPENBSD_4_7_BASE:1.1.1.3
	OPENBSD_4_6:1.1.1.3.0.16
	OPENBSD_4_6_BASE:1.1.1.3
	OPENBSD_4_5:1.1.1.3.0.12
	OPENBSD_4_5_BASE:1.1.1.3
	OPENBSD_4_4:1.1.1.3.0.10
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.8
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_2:1.1.1.3.0.6
	OPENBSD_4_2_BASE:1.1.1.3
	OPENBSD_4_1:1.1.1.3.0.4
	OPENBSD_4_1_BASE:1.1.1.3
	OPENBSD_4_0:1.1.1.3.0.2
	OPENBSD_4_0_BASE:1.1.1.3
	HEIMDAL_0_7_2:1.1.1.3
	OPENBSD_3_9:1.1.1.2.0.20
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.18
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.16
	OPENBSD_3_7_BASE:1.1.1.2
	HEIMDAL_0_6_3:1.1.1.2
	OPENBSD_3_6:1.1.1.2.0.14
	OPENBSD_3_6_BASE:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.12
	OPENBSD_3_5_BASE:1.1.1.2
	OPENBSD_3_4:1.1.1.2.0.10
	OPENBSD_3_4_BASE:1.1.1.2
	HEIMDAL_0_6:1.1.1.2
	HEIMDAL_0_6RC1:1.1.1.2
	OPENBSD_3_3:1.1.1.2.0.8
	OPENBSD_3_3_BASE:1.1.1.2
	OPENBSD_3_2:1.1.1.2.0.6
	OPENBSD_3_2_BASE:1.1.1.2
	OPENBSD_3_1:1.1.1.2.0.4
	OPENBSD_3_1_BASE:1.1.1.2
	HEIMDAL_0_4e:1.1.1.2
	OPENBSD_3_0:1.1.1.2.0.2
	OPENBSD_3_0_BASE:1.1.1.2
	HEIMDAL_0_3f:1.1.1.2
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2014.04.22.10.01.31;	author reyk;	state dead;
branches;
next	1.2;

1.2
date	2013.06.17.18.57.44;	author robert;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.25.07.50.37;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.50.37;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.06.22.21.23.22;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.04.14.07.33.14;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.3
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/*
 * Copyright (c) 1998 - 2001 Kungliga Tekniska HÃ¶gskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "krb5_locl.h"

#ifndef HEIMDAL_SMALLER

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
krb5_decode_EncTicketPart (krb5_context context,
			   const void *data,
			   size_t length,
			   EncTicketPart *t,
			   size_t *len)
    KRB5_DEPRECATED_FUNCTION("Use X instead")
{
    return decode_EncTicketPart(data, length, t, len);
}

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
krb5_encode_EncTicketPart (krb5_context context,
			   void *data,
			   size_t length,
			   EncTicketPart *t,
			   size_t *len)
    KRB5_DEPRECATED_FUNCTION("Use X instead")
{
    return encode_EncTicketPart(data, length, t, len);
}

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
krb5_decode_EncASRepPart (krb5_context context,
			  const void *data,
			  size_t length,
			  EncASRepPart *t,
			  size_t *len)
    KRB5_DEPRECATED_FUNCTION("Use X instead")
{
    return decode_EncASRepPart(data, length, t, len);
}

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
krb5_encode_EncASRepPart (krb5_context context,
			  void *data,
			  size_t length,
			  EncASRepPart *t,
			  size_t *len)
    KRB5_DEPRECATED_FUNCTION("Use X instead")
{
    return encode_EncASRepPart(data, length, t, len);
}

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
krb5_decode_EncTGSRepPart (krb5_context context,
			   const void *data,
			   size_t length,
			   EncTGSRepPart *t,
			   size_t *len)
    KRB5_DEPRECATED_FUNCTION("Use X instead")
{
    return decode_EncTGSRepPart(data, length, t, len);
}

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
krb5_encode_EncTGSRepPart (krb5_context context,
			   void *data,
			   size_t length,
			   EncTGSRepPart *t,
			   size_t *len)
    KRB5_DEPRECATED_FUNCTION("Use X instead")
{
    return encode_EncTGSRepPart(data, length, t, len);
}

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
krb5_decode_EncAPRepPart (krb5_context context,
			  const void *data,
			  size_t length,
			  EncAPRepPart *t,
			  size_t *len)
    KRB5_DEPRECATED_FUNCTION("Use X instead")
{
    return decode_EncAPRepPart(data, length, t, len);
}

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
krb5_encode_EncAPRepPart (krb5_context context,
			  void *data,
			  size_t length,
			  EncAPRepPart *t,
			  size_t *len)
    KRB5_DEPRECATED_FUNCTION("Use X instead")
{
    return encode_EncAPRepPart(data, length, t, len);
}

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
krb5_decode_Authenticator (krb5_context context,
			   const void *data,
			   size_t length,
			   Authenticator *t,
			   size_t *len)
    KRB5_DEPRECATED_FUNCTION("Use X instead")
{
    return decode_Authenticator(data, length, t, len);
}

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
krb5_encode_Authenticator (krb5_context context,
			   void *data,
			   size_t length,
			   Authenticator *t,
			   size_t *len)
    KRB5_DEPRECATED_FUNCTION("Use X instead")
{
    return encode_Authenticator(data, length, t, len);
}

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
krb5_decode_EncKrbCredPart (krb5_context context,
			    const void *data,
			    size_t length,
			    EncKrbCredPart *t,
			    size_t *len)
    KRB5_DEPRECATED_FUNCTION("Use X instead")
{
    return decode_EncKrbCredPart(data, length, t, len);
}

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
krb5_encode_EncKrbCredPart (krb5_context context,
			    void *data,
			    size_t length,
			    EncKrbCredPart *t,
			    size_t *len)
    KRB5_DEPRECATED_FUNCTION("Use X instead")
{
    return encode_EncKrbCredPart (data, length, t, len);
}

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
krb5_decode_ETYPE_INFO (krb5_context context,
			const void *data,
			size_t length,
			ETYPE_INFO *t,
			size_t *len)
    KRB5_DEPRECATED_FUNCTION("Use X instead")
{
    return decode_ETYPE_INFO(data, length, t, len);
}

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
krb5_encode_ETYPE_INFO (krb5_context context,
			void *data,
			size_t length,
			ETYPE_INFO *t,
			size_t *len)
    KRB5_DEPRECATED_FUNCTION("Use X instead")
{
    return encode_ETYPE_INFO (data, length, t, len);
}

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
krb5_decode_ETYPE_INFO2 (krb5_context context,
			const void *data,
			size_t length,
			ETYPE_INFO2 *t,
			size_t *len)
    KRB5_DEPRECATED_FUNCTION("Use X instead")
{
    return decode_ETYPE_INFO2(data, length, t, len);
}

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
krb5_encode_ETYPE_INFO2 (krb5_context context,
			 void *data,
			 size_t length,
			 ETYPE_INFO2 *t,
			 size_t *len)
    KRB5_DEPRECATED_FUNCTION("Use X instead")
{
    return encode_ETYPE_INFO2 (data, length, t, len);
}

#endif /* HEIMDAL_SMALLER */
@


1.2
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@@


1.1
log
@Initial revision
@
text
@d2 3
a4 3
 * Copyright (c) 1998 - 1999 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
d6 3
a8 3
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
d10 2
a11 2
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
d13 3
a15 3
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
d17 3
a19 3
 * 3. Neither the name of the Institute nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission. 
d21 11
a31 11
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE. 
d36 1
a36 1
RCSID("$KTH: codec.c,v 1.6 1999/12/02 17:05:08 joda Exp $");
d38 1
a38 30
/* these functions does what the normal asn.1-functions does, but
   converts the keytype to/from the on-the-wire enctypes */

#if 1
#define DECODE(T, K) return decode_ ## T(data, length, t, len)
#define ENCODE(T, K) return encode_ ## T(data, length, t, len)
#else
#define DECODE(T, K)					\
{							\
    krb5_error_code ret;				\
    ret = decode_ ## T((void*)data, length, t, len);	\
    if(ret)						\
	return ret;					\
    if(K)						\
	ret = krb5_decode_keyblock(context, (K), 1);	\
    return ret;						\
}

#define ENCODE(T, K)					\
{							\
    krb5_error_code ret = 0;				\
    if(K)						\
	ret = krb5_decode_keyblock(context, (K), 0);	\
    if(ret)						\
	return ret;					\
    return encode_ ## T(data, length, t, len);		\
}
#endif

krb5_error_code
d44 1
d46 1
a46 1
    DECODE(EncTicketPart, &t->key);
d49 1
a49 1
krb5_error_code
d55 1
d57 1
a57 1
    ENCODE(EncTicketPart, &t->key);
d60 1
a60 1
krb5_error_code
d66 1
d68 1
a68 1
    DECODE(EncASRepPart, &t->key);
d71 1
a71 1
krb5_error_code
d77 1
d79 1
a79 1
    ENCODE(EncASRepPart, &t->key);
d82 1
a82 1
krb5_error_code
d88 1
d90 1
a90 1
    DECODE(EncTGSRepPart, &t->key);
d93 1
a93 1
krb5_error_code
d99 1
d101 1
a101 1
    ENCODE(EncTGSRepPart, &t->key);
d104 1
a104 1
krb5_error_code
d110 1
d112 1
a112 1
    DECODE(EncAPRepPart, t->subkey);
d115 1
a115 1
krb5_error_code
d121 1
d123 1
a123 1
    ENCODE(EncAPRepPart, t->subkey);
d126 1
a126 1
krb5_error_code
d132 1
d134 1
a134 1
    DECODE(Authenticator, t->subkey);
d137 1
a137 1
krb5_error_code
d143 1
d145 1
a145 1
    ENCODE(Authenticator, t->subkey);
d148 1
a148 1
krb5_error_code
d154 1
a155 1
#if 1
a156 11
#else
    krb5_error_code ret;
    int i;
    ret = decode_EncKrbCredPart((void*)data, length, t, len);
    if(ret)
	return ret;
    for(i = 0; i < t->ticket_info.len; i++)
	if((ret = krb5_decode_keyblock(context, &t->ticket_info.val[i].key, 1)))
	    break;
    return ret;
#endif
d159 1
a159 1
krb5_error_code
d165 1
a166 9
#if 0
    krb5_error_code ret = 0;
    int i;

    for(i = 0; i < t->ticket_info.len; i++)
	if((ret = krb5_decode_keyblock(context, &t->ticket_info.val[i].key, 0)))
	    break;
    if(ret) return ret;
#endif
d170 1
a170 1
krb5_error_code
d176 1
a177 1
#if 1
a178 13
#else
    krb5_error_code ret;
    int i;

    ret = decode_ETYPE_INFO((void*)data, length, t, len);
    if(ret)
	return ret;
    for(i = 0; i < t->len; i++) {
	if((ret = krb5_decode_keytype(context, &t->val[i].etype, 1)))
	    break;
    }
    return ret;
#endif
d181 1
a181 1
krb5_error_code
d187 12
d200 2
a201 2
#if 0
    krb5_error_code ret = 0;
d203 9
a211 9
    int i;
    /* XXX this will break, since we need one key-info for each enctype */
    /* XXX or do we? */
    for(i = 0; i < t->len; i++)
	if((ret = krb5_decode_keytype(context, &t->val[i].etype, 0)))
	    break;
    if(ret) return ret;
#endif
    return encode_ETYPE_INFO (data, length, t, len);
d213 2
@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.3f

Lots of changes, highlights include:

 * change default keytab to ANY:FILE:/etc/krb5.keytab,krb4:/etc/srvtab,
   the new keytab type that tries both of these in order (SRVTAB is
   also an alias for krb4:)

 * improve error reporting and error handling (error messages should
   be more detailed and more useful)

 * the API is closer to what MIT krb5 is using

 * more compatible with windows 2000

 * removed some memory leaks

 * bug fixes
@
text
@d2 1
a2 1
 * Copyright (c) 1998 - 2001 Kungliga Tekniska Högskolan
d36 30
a65 1
RCSID("$KTH: codec.c,v 1.7 2001/05/16 22:08:08 assar Exp $");
d74 1
a74 1
    return decode_EncTicketPart(data, length, t, len);
d84 1
a84 1
    return encode_EncTicketPart(data, length, t, len);
d94 1
a94 1
    return decode_EncASRepPart(data, length, t, len);
d104 1
a104 1
    return encode_EncASRepPart(data, length, t, len);
d114 1
a114 1
    return decode_EncTGSRepPart(data, length, t, len);
d124 1
a124 1
    return encode_EncTGSRepPart(data, length, t, len);
d134 1
a134 1
    return decode_EncAPRepPart(data, length, t, len);
d144 1
a144 1
    return encode_EncAPRepPart(data, length, t, len);
d154 1
a154 1
    return decode_Authenticator(data, length, t, len);
d164 1
a164 1
    return encode_Authenticator(data, length, t, len);
d174 1
d176 11
d196 9
d215 1
d217 13
d239 11
@


1.1.1.3
log
@Import of heimdal-0.7.2
@
text
@d36 1
a36 1
RCSID("$KTH: codec.c,v 1.9 2004/05/25 21:19:37 lha Exp $");
d38 1
a38 1
krb5_error_code KRB5_LIB_FUNCTION
d48 1
a48 1
krb5_error_code KRB5_LIB_FUNCTION
d58 1
a58 1
krb5_error_code KRB5_LIB_FUNCTION
d68 1
a68 1
krb5_error_code KRB5_LIB_FUNCTION
d78 1
a78 1
krb5_error_code KRB5_LIB_FUNCTION
d88 1
a88 1
krb5_error_code KRB5_LIB_FUNCTION
d98 1
a98 1
krb5_error_code KRB5_LIB_FUNCTION
d108 1
a108 1
krb5_error_code KRB5_LIB_FUNCTION
d118 1
a118 1
krb5_error_code KRB5_LIB_FUNCTION
d128 1
a128 1
krb5_error_code KRB5_LIB_FUNCTION
d138 1
a138 1
krb5_error_code KRB5_LIB_FUNCTION
d148 1
a148 1
krb5_error_code KRB5_LIB_FUNCTION
d158 1
a158 1
krb5_error_code KRB5_LIB_FUNCTION
d168 1
a168 1
krb5_error_code KRB5_LIB_FUNCTION
a175 20
}

krb5_error_code KRB5_LIB_FUNCTION
krb5_decode_ETYPE_INFO2 (krb5_context context,
			const void *data,
			size_t length,
			ETYPE_INFO2 *t,
			size_t *len)
{
    return decode_ETYPE_INFO2(data, length, t, len);
}

krb5_error_code KRB5_LIB_FUNCTION
krb5_encode_ETYPE_INFO2 (krb5_context context,
			 void *data,
			 size_t length,
			 ETYPE_INFO2 *t,
			 size_t *len)
{
    return encode_ETYPE_INFO2 (data, length, t, len);
@


