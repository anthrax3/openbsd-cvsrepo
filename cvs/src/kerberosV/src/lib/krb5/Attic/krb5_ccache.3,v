head	1.5;
access;
symbols
	OPENBSD_5_3:1.4.0.20
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.18
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.16
	OPENBSD_5_0:1.4.0.14
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.12
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.10
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.6
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.8
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.4
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.2
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.3.0.8
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.6
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.4
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.2
	OPENBSD_4_0_BASE:1.3
	HEIMDAL_0_7_2:1.1.1.2
	OPENBSD_3_9:1.2.0.4
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.2
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.1.1.1.0.8
	OPENBSD_3_7_BASE:1.1.1.1
	HEIMDAL_0_6_3:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.6
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.4
	OPENBSD_3_5_BASE:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.2
	OPENBSD_3_4_BASE:1.1.1.1
	HEIMDAL_0_6:1.1.1.1
	HEIMDAL_0_6RC1:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@.\" @;


1.5
date	2013.06.17.18.57.44;	author robert;	state dead;
branches;
next	1.4;

1.4
date	2008.07.14.07.50.05;	author sthen;	state Exp;
branches;
next	1.3;

1.3
date	2006.04.14.08.15.04;	author biorn;	state Exp;
branches;
next	1.2;

1.2
date	2005.07.29.16.21.45;	author jmc;	state Exp;
branches;
next	1.1;

1.1
date	2003.05.11.02.15.55;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.05.11.02.15.55;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2006.04.14.07.33.23;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.5
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@.\" Copyright (c) 2003-2004 Kungliga Tekniska Högskolan
.\" (Royal Institute of Technology, Stockholm, Sweden).
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\"
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" 3. Neither the name of the Institute nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\" $KTH: krb5_ccache.3,v 1.13 2005/04/24 13:57:33 lha Exp $
.\"
.Dd April 24, 2005
.Dt KRB5_CCACHE 3
.Os HEIMDAL
.Sh NAME
.Nm krb5_ccache ,
.Nm krb5_cc_cursor ,
.Nm krb5_cc_ops ,
.Nm krb5_fcc_ops ,
.Nm krb5_mcc_ops ,
.Nm krb5_cc_clear_mcred ,
.Nm krb5_cc_close ,
.Nm krb5_cc_copy_cache ,
.Nm krb5_cc_default ,
.Nm krb5_cc_default_name ,
.Nm krb5_cc_destroy ,
.Nm krb5_cc_end_seq_get ,
.Nm krb5_cc_gen_new ,
.Nm krb5_cc_get_name ,
.Nm krb5_cc_get_ops ,
.Nm krb5_cc_get_prefix_ops ,
.Nm krb5_cc_get_principal ,
.Nm krb5_cc_get_type ,
.Nm krb5_cc_get_version ,
.Nm krb5_cc_initialize ,
.Nm krb5_cc_next_cred ,
.Nm krb5_cc_next_cred_match ,
.Nm krb5_cc_new_unique ,
.Nm krb5_cc_register ,
.Nm krb5_cc_remove_cred ,
.Nm krb5_cc_resolve ,
.Nm krb5_cc_retrieve_cred ,
.Nm krb5_cc_set_default_name ,
.Nm krb5_cc_set_flags ,
.Nm krb5_cc_store_cred
.Nd manage credential cache
.Sh LIBRARY
Kerberos 5 Library (libkrb5, -lkrb5)
.Sh SYNOPSIS
.In krb5.h
.Pp
.Li "struct krb5_ccache;"
.Pp
.Li "struct krb5_cc_cursor;"
.Pp
.Li "struct krb5_cc_ops;"
.Pp
.Li "struct krb5_cc_ops *krb5_fcc_ops;"
.Pp
.Li "struct krb5_cc_ops *krb5_mcc_ops;"
.Pp
.Ft void
.Fo krb5_cc_clear_mcred
.Fa "krb5_creds *mcred"
.Fc
.Ft krb5_error_code
.Fo krb5_cc_close
.Fa "krb5_context *context"
.Fa "krb5_ccache id"
.Fc
.Ft krb5_error_code
.Fo krb5_cc_copy_cache
.Fa "krb5_context *context"
.Fa "const krb5_ccache from"
.Fa "krb5_ccache to"
.Fc
.Ft krb5_error_code
.Fo krb5_cc_default
.Fa "krb5_context *context"
.Fa "krb5_ccache *id"
.Fc
.Ft "const char *"
.Fo krb5_cc_default_name
.Fa "krb5_context *context"
.Fc
.Ft krb5_error_code
.Fo krb5_cc_destroy
.Fa "krb5_context *context"
.Fa "krb5_ccache id"
.Fc
.Ft krb5_error_code
.Fo krb5_cc_end_seq_get
.Fa "krb5_context *context"
.Fa "const krb5_ccache id"
.Fa "krb5_cc_cursor *cursor"
.Fc
.Ft krb5_error_code
.Fo krb5_cc_gen_new
.Fa "krb5_context *context"
.Fa "const krb5_cc_ops *ops"
.Fa "krb5_ccache *id"
.Fc
.Ft "const char *"
.Fo krb5_cc_get_name
.Fa "krb5_context *context"
.Fa "krb5_ccache id"
.Fc
.Ft krb5_error_code
.Fo krb5_cc_get_principal
.Fa "krb5_context *context"
.Fa "krb5_ccache id"
.Fa "krb5_principal *principal"
.Fc
.Ft "const char *"
.Fo krb5_cc_get_type
.Fa "krb5_context *context"
.Fa "krb5_ccache id"
.Fc
.Ft "const krb5_cc_ops *"
.Fo krb5_cc_get_ops
.Fa "krb5_context *context"
.Fa "krb5_ccache id"
.Fc
.Ft "const krb5_cc_ops *"
.Fo krb5_cc_get_prefix_ops
.Fa "krb5_context context"
.Fa "const char *prefix"
.Fc
.Ft krb5_error_code
.Fo krb5_cc_get_version
.Fa "krb5_context *context"
.Fa "const krb5_ccache id"
.Fc
.Ft krb5_error_code
.Fo krb5_cc_initialize
.Fa "krb5_context *context"
.Fa "krb5_ccache id"
.Fa "krb5_principal primary_principal"
.Fc
.Ft krb5_error_code
.Fo krb5_cc_register
.Fa "krb5_context *context"
.Fa "const krb5_cc_ops *ops"
.Fa "krb5_boolean override"
.Fc
.Ft krb5_error_code
.Fo krb5_cc_resolve
.Fa "krb5_context *context"
.Fa "const char *name"
.Fa "krb5_ccache *id"
.Fc
.Ft krb5_error_code
.Fo krb5_cc_retrieve_cred
.Fa "krb5_context *context"
.Fa "krb5_ccache id"
.Fa "krb5_flags whichfields"
.Fa "const krb5_creds *mcreds"
.Fa "krb5_creds *creds"
.Fc
.Ft krb5_error_code
.Fo krb5_cc_remove_cred
.Fa "krb5_context *context"
.Fa "krb5_ccache id"
.Fa "krb5_flags which"
.Fa "krb5_creds *cred"
.Fc
.Ft krb5_error_code
.Fo krb5_cc_set_default_name
.Fa "krb5_context *context"
.Fa "const char *name"
.Fc
.Ft krb5_error_code
.Fo krb5_cc_store_cred
.Fa "krb5_context *context"
.Fa "krb5_ccache id"
.Fa "krb5_creds *creds"
.Fc
.Ft krb5_error_code
.Fo krb5_cc_set_flags
.Fa "krb5_context *context"
.Fa "krb5_cc_set_flags id"
.Fa "krb5_flags flags"
.Fc
.Ft krb5_error_code
.Fo krb5_cc_next_cred
.Fa "krb5_context *context"
.Fa "const krb5_ccache id"
.Fa "krb5_cc_cursor *cursor"
.Fa "krb5_creds *creds"
.Fc
.Ft krb5_error_code
.Fo krb5_cc_next_cred_match
.Fa "krb5_context *context"
.Fa "const krb5_ccache id"
.Fa "krb5_cc_cursor *cursor"
.Fa "krb5_creds *creds"
.Fa "krb5_flags whichfields"
.Fa "const krb5_creds *mcreds"
.Fc
.Ft krb5_error_code
.Fo krb5_cc_new_unique
.Fa "krb5_context context"
.Fa "const char *type"
.Fa "const char *hint"
.Fa "krb5_ccache *id"
.Fc
.Sh DESCRIPTION
The
.Li krb5_ccache
structure holds a Kerberos credential cache.
.Pp
The
.Li krb5_cc_cursor
structure holds current position in a credential cache when
iterating over the cache.
.Pp
The
.Li krb5_cc_ops
structure holds a set of operations that can me preformed on a
credential cache.
.Pp
There is no component inside
.Li krb5_ccache ,
.Li krb5_cc_cursor
nor
.Li krb5_fcc_ops
that is directly referable.
.Pp
The
.Li krb5_creds
holds a Kerberos credential, see manpage for
.Xr krb5_creds 3 .
.Pp
.Fn krb5_cc_default_name
and
.Fn krb5_cc_set_default_name
gets and sets the default name for the
.Fa context .
.Pp
.Fn krb5_cc_default
opens the default credential cache in
.Fa id .
Return 0 or an error code.
.Pp
.Fn krb5_cc_gen_new
generates a new credential cache of type
.Fa ops
in
.Fa id .
Return 0 or an error code.
The Heimdal version of this function also runs
.Fn krb5_cc_initialize
on the credential cache, but since the MIT version doesn't, portable
code must call krb5_cc_initialize.
.Pp
.Fn krb5_cc_new_unique
generates a new unique credential cache of
.Fa type
in
.Fa id .
If type is
.Dv NULL ,
the library chooses the default credential cache type.
The supplied
.Fa hint
(that can be
.Dv NULL )
is a string that the credential cache type can use to base the name of
the credential on, this is to make its easier for the user to
differentiate the credentials.
The returned credential cache
.Fa id
should be freed using
.Fn krb5_cc_close
or
.Fn krb5_cc_destroy .
Returns 0 or an error code.
.Pp
.Fn krb5_cc_resolve
finds and allocates a credential cache in
.Fa id
from the specification in
.Fa residual .
If the credential cache name doesn't contain any colon (:), interpret it as a
file name.
Return 0 or an error code.
.Pp
.Fn krb5_cc_initialize
creates a new credential cache in
.Fa id
for
.Fa primary_principal .
Return 0 or an error code.
.Pp
.Fn krb5_cc_close
stops using the credential cache
.Fa id
and frees the related resources.
Return 0 or an error code.
.Fn krb5_cc_destroy
removes the credential cache
and closes (by calling
.Fn krb5_cc_close )
.Fa id .
Return 0 or an error code.
.Pp
.Fn krb5_cc_copy_cache
copys the contents of
.Fa from
to
.Fa to .
.Pp
.Fn krb5_cc_get_name
returns the name of the credential cache
.Fa id .
.Pp
.Fn krb5_cc_get_principal
returns the principal of
.Fa id
in
.Fa principal .
Return 0 or an error code.
.Pp
.Fn krb5_cc_get_type
returns the type of the credential cache
.Fa id .
.Pp
.Fn krb5_cc_get_ops
returns the ops of the credential cache
.Fa id .
.Pp
.Fn krb5_cc_get_version
returns the version of
.Fa id .
.Pp
.Fn krb5_cc_register
Adds a new credential cache type with operations
.Fa ops ,
overwriting any existing one if
.Fa override .
Return an error code or 0.
.Pp
.Fn krb5_cc_get_prefix_ops
Get the cc ops that is registered in
.Fa context
to handle the
.Fa prefix .
Returns
.Dv NULL
if ops not found.
.Pp
.Fn krb5_cc_remove_cred
removes the credential identified by
.Fa ( cred ,
.Fa which )
from
.Fa id .
.Pp
.Fn krb5_cc_store_cred
stores
.Fa creds
in the credential cache
.Fa id .
Return 0 or an error code.
.Pp
.Fn krb5_cc_set_flags
sets the flags of
.Fa id
to
.Fa flags .
.Pp
.Fn krb5_cc_clear_mcred
clears the
.Fa mcreds
argument so its reset and can be used with
.Fa krb5_cc_retrieve_cred .
.Pp
.Fn krb5_cc_retrieve_cred ,
retrieves the credential identified by
.Fa mcreds
(and
.Fa whichfields )
from
.Fa id
in
.Fa creds .
Return 0 or an error code.
.Pp
.Fn krb5_cc_next_cred
retrieves the next cred pointed to by
.Fa ( id ,
.Fa cursor )
in
.Fa creds ,
and advance
.Fa cursor .
Return 0 or an error code.
.Pp
.Fn krb5_cc_next_cred_match
is similar to
.Fn krb5_cc_next_cred
except that it will only return creds matching 
.Fa whichfields
and
.Fa mcreds
(as interpreted by 
.Xr krb5_compare_creds 3 . )
.Pp
.Fn krb5_cc_end_seq_get
Destroys the cursor
.Fa cursor .
.Sh SEE ALSO
.Xr krb5 3 ,
.Xr krb5.conf 5 ,
.Xr kerberos 8
@


1.4
log
@another mange->manage
@
text
@@


1.3
log
@Merge of heimdal 0.7.2
Tested by todd & beck, ok beck.
@
text
@d68 1
a68 1
.Nd mange credential cache
@


1.2
log
@- sort SEE ALSO
- full month name for .Dd
- don't end .Nd w/ a full stop

fixes passed back to heimdal people...
@
text
@d1 3
a3 3
.\" Copyright (c) 2003 Kungliga Tekniska Högskolan
.\" (Royal Institute of Technology, Stockholm, Sweden). 
.\" All rights reserved. 
d5 3
a7 3
.\" Redistribution and use in source and binary forms, with or without 
.\" modification, are permitted provided that the following conditions 
.\" are met: 
d9 2
a10 2
.\" 1. Redistributions of source code must retain the above copyright 
.\"    notice, this list of conditions and the following disclaimer. 
d12 3
a14 3
.\" 2. Redistributions in binary form must reproduce the above copyright 
.\"    notice, this list of conditions and the following disclaimer in the 
.\"    documentation and/or other materials provided with the distribution. 
d16 3
a18 3
.\" 3. Neither the name of the Institute nor the names of its contributors 
.\"    may be used to endorse or promote products derived from this software 
.\"    without specific prior written permission. 
d20 15
a34 15
.\" THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
.\" SUCH DAMAGE. 
.\" 
.\" $KTH: krb5_ccache.3,v 1.7 2003/04/16 13:58:12 lha Exp $
.\" 
.Dd March 16, 2003
d43 1
d52 2
a55 1
.Nm krb5_cc_get_ops ,
d58 3
d62 1
a64 1
.Nm krb5_cc_remove_cred ,
a65 1
.Nm krb5_cc_store_cred ,
d67 1
a67 1
.Nm krb5_cc_next_cred
d84 4
d146 5
d213 16
d263 1
a263 1
opens the default ccache in 
d268 1
a268 1
generates a new ccache of type
d273 27
d302 1
a302 1
finds and allocates a ccache in 
d304 1
a304 1
from the specification in 
d306 1
a306 1
If the ccache name doesn't contain any colon (:), interpret it as a
d311 1
a311 1
creates a new ccache in
d318 1
a318 1
stops using the ccache 
d323 1
a323 1
removes the ccache 
d330 1
a330 1
copys the contents of 
d332 1
a332 1
to 
d336 1
a336 1
returns the name of the ccache 
d340 1
a340 1
returns the principal of 
d347 1
a347 1
returns the type of the ccache
d351 1
a351 1
returns the ops of the ccache
d359 1
a359 1
Adds a new ccache type with operations 
d365 9
d378 1
a378 1
from 
d384 1
a384 1
in the ccache
d394 6
d401 1
a401 1
retrieves the credential identified by 
d420 10
@


1.1
log
@Initial revision
@
text
@d64 1
a64 1
.Nd mange credential cache.
@


1.1.1.1
log
@Import of heimdal-0.6rc1
@
text
@@


1.1.1.2
log
@Import of heimdal-0.7.2
@
text
@d1 3
a3 3
.\" Copyright (c) 2003-2004 Kungliga Tekniska Högskolan
.\" (Royal Institute of Technology, Stockholm, Sweden).
.\" All rights reserved.
d5 3
a7 3
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
d9 2
a10 2
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
d12 3
a14 3
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
d16 3
a18 3
.\" 3. Neither the name of the Institute nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
d20 15
a34 15
.\" THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\" $KTH: krb5_ccache.3,v 1.13 2005/04/24 13:57:33 lha Exp $
.\"
.Dd April 24, 2005
a42 1
.Nm krb5_cc_clear_mcred ,
a50 2
.Nm krb5_cc_get_ops ,
.Nm krb5_cc_get_prefix_ops ,
d53 1
a55 3
.Nm krb5_cc_next_cred ,
.Nm krb5_cc_next_cred_match ,
.Nm krb5_cc_new_unique ,
a56 1
.Nm krb5_cc_remove_cred ,
d59 1
d61 1
d63 2
a64 2
.Nm krb5_cc_store_cred ,
.Nd mange credential cache
a79 4
.Ft void
.Fo krb5_cc_clear_mcred
.Fa "krb5_creds *mcred"
.Fc
a137 5
.Ft "const krb5_cc_ops *"
.Fo krb5_cc_get_prefix_ops
.Fa "krb5_context context"
.Fa "const char *prefix"
.Fc
a199 16
.Ft krb5_error_code
.Fo krb5_cc_next_cred_match
.Fa "krb5_context *context"
.Fa "const krb5_ccache id"
.Fa "krb5_cc_cursor *cursor"
.Fa "krb5_creds *creds"
.Fa "krb5_flags whichfields"
.Fa "const krb5_creds *mcreds"
.Fc
.Ft krb5_error_code
.Fo krb5_cc_new_unique
.Fa "krb5_context context"
.Fa "const char *type"
.Fa "const char *hint"
.Fa "krb5_ccache *id"
.Fc
d234 1
a234 1
opens the default credential cache in
d239 1
a239 1
generates a new credential cache of type
a243 27
The Heimdal version of this function also runs
.Fn krb5_cc_initialize
on the credential cache, but since the MIT version doesn't, portable
code must call krb5_cc_initialize.
.Pp
.Fn krb5_cc_new_unique
generates a new unique credential cache of
.Fa type
in
.Fa id .
If type is
.Dv NULL ,
the library chooses the default credential cache type.
The supplied
.Fa hint
(that can be
.Dv NULL )
is a string that the credential cache type can use to base the name of
the credential on, this is to make its easier for the user to
differentiate the credentials.
The returned credential cache
.Fa id
should be freed using
.Fn krb5_cc_close
or
.Fn krb5_cc_destroy .
Returns 0 or an error code.
d246 1
a246 1
finds and allocates a credential cache in
d248 1
a248 1
from the specification in
d250 1
a250 1
If the credential cache name doesn't contain any colon (:), interpret it as a
d255 1
a255 1
creates a new credential cache in
d262 1
a262 1
stops using the credential cache
d267 1
a267 1
removes the credential cache
d274 1
a274 1
copys the contents of
d276 1
a276 1
to
d280 1
a280 1
returns the name of the credential cache
d284 1
a284 1
returns the principal of
d291 1
a291 1
returns the type of the credential cache
d295 1
a295 1
returns the ops of the credential cache
d303 1
a303 1
Adds a new credential cache type with operations
a308 9
.Fn krb5_cc_get_prefix_ops
Get the cc ops that is registered in
.Fa context
to handle the
.Fa prefix .
Returns
.Dv NULL
if ops not found.
.Pp
d313 1
a313 1
from
d319 1
a319 1
in the credential cache
a328 6
.Fn krb5_cc_clear_mcred
clears the
.Fa mcreds
argument so its reset and can be used with
.Fa krb5_cc_retrieve_cred .
.Pp
d330 1
a330 1
retrieves the credential identified by
a348 10
.Pp
.Fn krb5_cc_next_cred_match
is similar to
.Fn krb5_cc_next_cred
except that it will only return creds matching 
.Fa whichfields
and
.Fa mcreds
(as interpreted by 
.Xr krb5_compare_creds 3 . )
@

