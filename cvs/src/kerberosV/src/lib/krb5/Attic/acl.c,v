head	1.4;
access;
symbols
	OPENBSD_5_5:1.3.0.6
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.2
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.2.0.14
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.12
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.10
	OPENBSD_5_0:1.2.0.8
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.6
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.1.4.0.16
	OPENBSD_4_6_BASE:1.1.1.4
	OPENBSD_4_5:1.1.1.4.0.12
	OPENBSD_4_5_BASE:1.1.1.4
	OPENBSD_4_4:1.1.1.4.0.10
	OPENBSD_4_4_BASE:1.1.1.4
	OPENBSD_4_3:1.1.1.4.0.8
	OPENBSD_4_3_BASE:1.1.1.4
	OPENBSD_4_2:1.1.1.4.0.6
	OPENBSD_4_2_BASE:1.1.1.4
	OPENBSD_4_1:1.1.1.4.0.4
	OPENBSD_4_1_BASE:1.1.1.4
	OPENBSD_4_0:1.1.1.4.0.2
	OPENBSD_4_0_BASE:1.1.1.4
	HEIMDAL_0_7_2:1.1.1.4
	OPENBSD_3_9:1.1.1.3.0.12
	OPENBSD_3_9_BASE:1.1.1.3
	OPENBSD_3_8:1.1.1.3.0.10
	OPENBSD_3_8_BASE:1.1.1.3
	OPENBSD_3_7:1.1.1.3.0.8
	OPENBSD_3_7_BASE:1.1.1.3
	HEIMDAL_0_6_3:1.1.1.3
	OPENBSD_3_6:1.1.1.3.0.6
	OPENBSD_3_6_BASE:1.1.1.3
	OPENBSD_3_5:1.1.1.3.0.4
	OPENBSD_3_5_BASE:1.1.1.3
	OPENBSD_3_4:1.1.1.3.0.2
	OPENBSD_3_4_BASE:1.1.1.3
	HEIMDAL_0_6:1.1.1.3
	HEIMDAL_0_6RC1:1.1.1.3
	OPENBSD_3_3:1.1.1.2.0.8
	OPENBSD_3_3_BASE:1.1.1.2
	OPENBSD_3_2:1.1.1.2.0.6
	OPENBSD_3_2_BASE:1.1.1.2
	OPENBSD_3_1:1.1.1.2.0.4
	OPENBSD_3_1_BASE:1.1.1.2
	HEIMDAL_0_4e:1.1.1.2
	OPENBSD_3_0:1.1.1.2.0.2
	OPENBSD_3_0_BASE:1.1.1.2
	HEIMDAL_0_3f:1.1.1.2
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2014.04.22.10.01.31;	author reyk;	state dead;
branches;
next	1.3;

1.3
date	2013.06.17.18.57.44;	author robert;	state Exp;
branches;
next	1.2;

1.2
date	2009.12.10.20.20.47;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.25.07.50.32;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.50.32;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.06.22.21.23.18;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.02.15.47;	author hin;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2006.04.14.07.33.12;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.4
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/*
 * Copyright (c) 2000 - 2002, 2004 Kungliga Tekniska HÃ¶gskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "krb5_locl.h"
#include <fnmatch.h>

struct acl_field {
    enum { acl_string, acl_fnmatch, acl_retval } type;
    union {
	const char *cstr;
	char **retv;
    } u;
    struct acl_field *next, **last;
};

static void
free_retv(struct acl_field *acl)
{
    while(acl != NULL) {
	if (acl->type == acl_retval) {
	    if (*acl->u.retv)
		free(*acl->u.retv);
	    *acl->u.retv = NULL;
	}
	acl = acl->next;
    }
}

static void
acl_free_list(struct acl_field *acl, int retv)
{
    struct acl_field *next;
    if (retv)
	free_retv(acl);
    while(acl != NULL) {
	next = acl->next;
	free(acl);
	acl = next;
    }
}

static krb5_error_code
acl_parse_format(krb5_context context,
		 struct acl_field **acl_ret,
		 const char *format,
		 va_list ap)
{
    const char *p;
    struct acl_field *acl = NULL, *tmp;

    for(p = format; *p != '\0'; p++) {
	tmp = malloc(sizeof(*tmp));
	if(tmp == NULL) {
	    krb5_set_error_message(context, ENOMEM,
				   N_("malloc: out of memory", ""));
	    acl_free_list(acl, 0);
	    return ENOMEM;
	}
	if(*p == 's') {
	    tmp->type = acl_string;
	    tmp->u.cstr = va_arg(ap, const char*);
	} else if(*p == 'f') {
	    tmp->type = acl_fnmatch;
	    tmp->u.cstr = va_arg(ap, const char*);
	} else if(*p == 'r') {
	    tmp->type = acl_retval;
	    tmp->u.retv = va_arg(ap, char **);
	    *tmp->u.retv = NULL;
	} else {
	    krb5_set_error_message(context, EINVAL,
				   N_("Unknown format specifier %c while "
				     "parsing ACL", "specifier"), *p);
	    acl_free_list(acl, 0);
	    free(tmp);
	    return EINVAL;
	}
	tmp->next = NULL;
	if(acl == NULL)
	    acl = tmp;
	else
	    *acl->last = tmp;
	acl->last = &tmp->next;
    }
    *acl_ret = acl;
    return 0;
}

static krb5_boolean
acl_match_field(krb5_context context,
		const char *string,
		struct acl_field *field)
{
    if(field->type == acl_string) {
	return !strcmp(field->u.cstr, string);
    } else if(field->type == acl_fnmatch) {
	return !fnmatch(field->u.cstr, string, 0);
    } else if(field->type == acl_retval) {
	*field->u.retv = strdup(string);
	return TRUE;
    }
    return FALSE;
}

static krb5_boolean
acl_match_acl(krb5_context context,
	      struct acl_field *acl,
	      const char *string)
{
    char buf[256];
    while(strsep_copy(&string, " \t", buf, sizeof(buf)) != -1) {
	if(buf[0] == '\0')
	    continue; /* skip ws */
	if (acl == NULL)
	    return FALSE;
	if(!acl_match_field(context, buf, acl)) {
	    return FALSE;
	}
	acl = acl->next;
    }
    if (acl)
	return FALSE;
    return TRUE;
}

/**
 * krb5_acl_match_string matches ACL format against a string.
 *
 * The ACL format has three format specifiers: s, f, and r.  Each
 * specifier will retrieve one argument from the variable arguments
 * for either matching or storing data.  The input string is split up
 * using " " (space) and "\t" (tab) as a delimiter; multiple and "\t"
 * in a row are considered to be the same.
 *
 * List of format specifiers:
 * - s Matches a string using strcmp(3) (case sensitive).
 * - f Matches the string with fnmatch(3). Theflags
 *     argument (the last argument) passed to the fnmatch function is 0.
 * - r Returns a copy of the string in the char ** passed in; the copy
 *     must be freed with free(3). There is no need to free(3) the
 *     string on error: the function will clean up and set the pointer
 *     to NULL.
 *
 * @@param context Kerberos 5 context
 * @@param string string to match with
 * @@param format format to match
 * @@param ... parameter to format string
 *
 * @@return Return an error code or 0.
 *
 *
 * @@code
 * char *s;
 *
 * ret = krb5_acl_match_string(context, "foo", "s", "foo");
 * if (ret)
 *     krb5_errx(context, 1, "acl didn't match");
 * ret = krb5_acl_match_string(context, "foo foo baz/kaka",
 *     "ss", "foo", &s, "foo/\\*");
 * if (ret) {
 *     // no need to free(s) on error
 *     assert(s == NULL);
 *     krb5_errx(context, 1, "acl didn't match");
 * }
 * free(s);
 * @@endcode
 *
 * @@sa krb5_acl_match_file
 * @@ingroup krb5_support
 */

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
krb5_acl_match_string(krb5_context context,
		      const char *string,
		      const char *format,
		      ...)
{
    krb5_error_code ret;
    krb5_boolean found;
    struct acl_field *acl;

    va_list ap;
    va_start(ap, format);
    ret = acl_parse_format(context, &acl, format, ap);
    va_end(ap);
    if(ret)
	return ret;

    found = acl_match_acl(context, acl, string);
    acl_free_list(acl, !found);
    if (found) {
	return 0;
    } else {
	krb5_set_error_message(context, EACCES, N_("ACL did not match", ""));
	return EACCES;
    }
}

/**
 * krb5_acl_match_file matches ACL format against each line in a file
 * using krb5_acl_match_string(). Lines starting with # are treated
 * like comments and ignored.
 *
 * @@param context Kerberos 5 context.
 * @@param file file with acl listed in the file.
 * @@param format format to match.
 * @@param ... parameter to format string.
 *
 * @@return Return an error code or 0.
 *
 * @@sa krb5_acl_match_string
 * @@ingroup krb5_support
 */

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
krb5_acl_match_file(krb5_context context,
		    const char *file,
		    const char *format,
		    ...)
{
    krb5_error_code ret;
    struct acl_field *acl;
    char buf[256];
    va_list ap;
    FILE *f;
    krb5_boolean found;

    f = fopen(file, "r");
    if(f == NULL) {
	int save_errno = errno;
	rk_strerror_r(save_errno, buf, sizeof(buf));
	krb5_set_error_message(context, save_errno,
			       N_("open(%s): %s", "file, errno"),
			       file, buf);
	return save_errno;
    }
    rk_cloexec_file(f);

    va_start(ap, format);
    ret = acl_parse_format(context, &acl, format, ap);
    va_end(ap);
    if(ret) {
	fclose(f);
	return ret;
    }

    found = FALSE;
    while(fgets(buf, sizeof(buf), f)) {
	if(buf[0] == '#')
	    continue;
	if(acl_match_acl(context, acl, buf)) {
	    found = TRUE;
	    break;
	}
	free_retv(acl);
    }

    fclose(f);
    acl_free_list(acl, !found);
    if (found) {
	return 0;
    } else {
	krb5_set_error_message(context, EACCES, N_("ACL did not match", ""));
	return EACCES;
    }
}
@


1.3
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@@


1.2
log
@memory leak, and off by one buffer overflow - spotted by parfait
ok deraadt@@
@
text
@d2 1
a2 1
 * Copyright (c) 2000 - 2002, 2004 Kungliga Tekniska Högskolan
d5 1
a5 1
 * 
d9 1
a9 1
 * 
d12 1
a12 1
 * 
d16 1
a16 1
 * 
d20 1
a20 1
 * 
a36 2
RCSID("$KTH: acl.c,v 1.5 2004/05/25 21:15:58 lha Exp $");

d84 2
a85 1
	    krb5_set_error_string(context, "malloc: out of memory");
d100 3
a102 2
	    krb5_set_error_string(context, "acl_parse_format: "
				  "unknown format specifier %c", *p);
d155 45
d201 1
a201 1
krb5_error_code KRB5_LIB_FUNCTION
d223 1
a223 1
	krb5_set_error_string(context, "ACL did not match");
d227 18
a244 2
	       
krb5_error_code KRB5_LIB_FUNCTION
d260 4
a263 3

	krb5_set_error_string(context, "open(%s): %s", file,
			      strerror(save_errno));
d266 1
d292 1
a292 1
	krb5_set_error_string(context, "ACL did not match");
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * Copyright (c) 2000 Kungliga Tekniska Högskolan
d37 1
a37 1
RCSID("$KTH: acl.c,v 1.1 2000/06/12 11:17:52 joda Exp $");
d49 14
a62 1
acl_free_list(struct acl_field *acl)
d65 2
d86 2
a87 1
	    acl_free_list(acl);
d99 7
d124 1
a124 1
	return !strcmp(string, field->u.cstr);
d126 1
a126 1
	return !fnmatch(string, field->u.cstr, 0);
d140 1
a140 2
    for(;strsep_copy(&string, " \t", buf, sizeof(buf)) != -1; 
	acl = acl->next) {
d143 2
d148 1
d150 2
d156 1
a156 1
krb5_error_code
d158 1
a158 1
		      const char *acl_string,
d163 1
d173 8
a180 4
    ret = acl_match_acl(context, acl, acl_string);

    acl_free_list(acl);
    return ret ? 0 : EACCES;
d183 1
a183 1
krb5_error_code
d194 1
d197 7
a203 2
    if(f == NULL)
	return errno;
d213 1
a213 1
    ret = EACCES; /* XXX */
d218 2
a219 2
	    ret = 0;
	    goto out;
d221 1
a223 1
  out:
d225 7
a231 2
    acl_free_list(acl);
    return ret;
@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.3f

Lots of changes, highlights include:

 * change default keytab to ANY:FILE:/etc/krb5.keytab,krb4:/etc/srvtab,
   the new keytab type that tries both of these in order (SRVTAB is
   also an alias for krb4:)

 * improve error reporting and error handling (error messages should
   be more detailed and more useful)

 * the API is closer to what MIT krb5 is using

 * more compatible with windows 2000

 * removed some memory leaks

 * bug fixes
@
text
@d2 1
a2 1
 * Copyright (c) 2000 - 2001 Kungliga Tekniska Högskolan
d37 1
a37 1
RCSID("$KTH: acl.c,v 1.2 2001/05/14 06:14:43 assar Exp $");
a70 1
	    krb5_set_error_string(context, "malloc: out of memory");
a135 1
    krb5_boolean found;
d145 2
a146 1
    found = acl_match_acl(context, acl, acl_string);
d148 1
a148 6
    if (found) {
	return 0;
    } else {
	krb5_set_error_string(context, "ACL did not match");
	return EACCES;
    }
a161 1
    krb5_boolean found;
d164 2
a165 7
    if(f == NULL) {
	int save_errno = errno;

	krb5_set_error_string(context, "open(%s): %s", file,
			      strerror(save_errno));
	return save_errno;
    }
d175 1
a175 1
    found = FALSE;
d180 2
a181 2
	    found = TRUE;
	    break;
d185 1
d188 1
a188 6
    if (found) {
	return 0;
    } else {
	krb5_set_error_string(context, "ACL did not match");
	return EACCES;
    }
@


1.1.1.3
log
@Import of heimdal-0.6rc1
@
text
@d2 1
a2 1
 * Copyright (c) 2000 - 2002 Kungliga Tekniska Högskolan
d37 1
a37 1
RCSID("$KTH: acl.c,v 1.3 2002/04/18 16:16:24 joda Exp $");
d132 1
a132 1
		      const char *string,
d147 1
a147 1
    found = acl_match_acl(context, acl, string);
@


1.1.1.4
log
@Import of heimdal-0.7.2
@
text
@d2 1
a2 1
 * Copyright (c) 2000 - 2002, 2004 Kungliga Tekniska Högskolan
d37 1
a37 1
RCSID("$KTH: acl.c,v 1.5 2004/05/25 21:15:58 lha Exp $");
d49 1
a49 14
free_retv(struct acl_field *acl)
{
    while(acl != NULL) {
	if (acl->type == acl_retval) {
	    if (*acl->u.retv)
		free(*acl->u.retv);
	    *acl->u.retv = NULL;
	}
	acl = acl->next;
    }
}

static void
acl_free_list(struct acl_field *acl, int retv)
a51 2
    if (retv)
	free_retv(acl);
d72 1
a72 1
	    acl_free_list(acl, 0);
a83 6
	    *tmp->u.retv = NULL;
	} else {
	    krb5_set_error_string(context, "acl_parse_format: "
				  "unknown format specifier %c", *p);
	    acl_free_list(acl, 0);
	    return EINVAL;
d102 1
a102 1
	return !strcmp(field->u.cstr, string);
d104 1
a104 1
	return !fnmatch(field->u.cstr, string, 0);
d118 2
a119 1
    while(strsep_copy(&string, " \t", buf, sizeof(buf)) != -1) {
a121 2
	if (acl == NULL)
	    return FALSE;
a124 1
	acl = acl->next;
a125 2
    if (acl)
	return FALSE;
d130 1
a130 1
krb5_error_code KRB5_LIB_FUNCTION
d148 1
a148 1
    acl_free_list(acl, !found);
d157 1
a157 1
krb5_error_code KRB5_LIB_FUNCTION
a194 1
	free_retv(acl);
d198 1
a198 1
    acl_free_list(acl, !found);
@


