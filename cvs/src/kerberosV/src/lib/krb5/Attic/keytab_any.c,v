head	1.7;
access;
symbols
	OPENBSD_5_5:1.6.0.6
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.5.0.26
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.24
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.22
	OPENBSD_5_0:1.5.0.20
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.18
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.16
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.12
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.14
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.10
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.8
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.6
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.4
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.2
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.4.0.14
	OPENBSD_4_0_BASE:1.4
	HEIMDAL_0_7_2:1.1.1.3
	OPENBSD_3_9:1.4.0.12
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.10
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.8
	OPENBSD_3_7_BASE:1.4
	HEIMDAL_0_6_3:1.1.1.3
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	HEIMDAL_0_6:1.1.1.3
	HEIMDAL_0_6RC1:1.1.1.3
	OPENBSD_3_3:1.3.0.6
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.4
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	HEIMDAL_0_4e:1.1.1.2
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2
	HEIMDAL_0_3f:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2014.04.22.10.01.31;	author reyk;	state dead;
branches;
next	1.6;

1.6
date	2013.06.17.18.57.44;	author robert;	state Exp;
branches;
next	1.5;

1.5
date	2006.10.06.07.09.10;	author biorn;	state Exp;
branches;
next	1.4;

1.4
date	2003.05.11.03.40.00;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2002.02.06.09.10.02;	author hin;	state Exp;
branches;
next	1.2;

1.2
date	2001.10.02.22.32.40;	author hin;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.22.21.23.59;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.06.22.21.23.59;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.02.06.08.55.30;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.02.15.53;	author hin;	state Exp;
branches;
next	;


desc
@@


1.7
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/*
 * Copyright (c) 2001-2002 Kungliga Tekniska HÃ¶gskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "krb5_locl.h"

struct any_data {
    krb5_keytab kt;
    char *name;
    struct any_data *next;
};

static void
free_list (krb5_context context, struct any_data *a)
{
    struct any_data *next;

    for (; a != NULL; a = next) {
	next = a->next;
	free (a->name);
	if(a->kt)
	    krb5_kt_close(context, a->kt);
	free (a);
    }
}

static krb5_error_code KRB5_CALLCONV
any_resolve(krb5_context context, const char *name, krb5_keytab id)
{
    struct any_data *a, *a0 = NULL, *prev = NULL;
    krb5_error_code ret;
    char buf[256];

    while (strsep_copy(&name, ",", buf, sizeof(buf)) != -1) {
	a = calloc(1, sizeof(*a));
	if (a == NULL) {
	    ret = ENOMEM;
	    goto fail;
	}
	if (a0 == NULL) {
	    a0 = a;
	    a->name = strdup(buf);
	    if (a->name == NULL) {
		ret = ENOMEM;
		krb5_set_error_message(context, ret, N_("malloc: out of memory", ""));
		goto fail;
	    }
	} else
	    a->name = NULL;
	if (prev != NULL)
	    prev->next = a;
	a->next = NULL;
	ret = krb5_kt_resolve (context, buf, &a->kt);
	if (ret)
	    goto fail;
	prev = a;
    }
    if (a0 == NULL) {
	krb5_set_error_message(context, ENOENT, N_("empty ANY: keytab", ""));
	return ENOENT;
    }
    id->data = a0;
    return 0;
 fail:
    free_list (context, a0);
    return ret;
}

static krb5_error_code KRB5_CALLCONV
any_get_name (krb5_context context,
	      krb5_keytab id,
	      char *name,
	      size_t namesize)
{
    struct any_data *a = id->data;
    strlcpy(name, a->name, namesize);
    return 0;
}

static krb5_error_code KRB5_CALLCONV
any_close (krb5_context context,
	   krb5_keytab id)
{
    struct any_data *a = id->data;

    free_list (context, a);
    return 0;
}

struct any_cursor_extra_data {
    struct any_data *a;
    krb5_kt_cursor cursor;
};

static krb5_error_code KRB5_CALLCONV
any_start_seq_get(krb5_context context,
		  krb5_keytab id,
		  krb5_kt_cursor *c)
{
    struct any_data *a = id->data;
    struct any_cursor_extra_data *ed;
    krb5_error_code ret;

    c->data = malloc (sizeof(struct any_cursor_extra_data));
    if(c->data == NULL){
	krb5_set_error_message(context, ENOMEM, N_("malloc: out of memory", ""));
	return ENOMEM;
    }
    ed = (struct any_cursor_extra_data *)c->data;
    for (ed->a = a; ed->a != NULL; ed->a = ed->a->next) {
	ret = krb5_kt_start_seq_get(context, ed->a->kt, &ed->cursor);
	if (ret == 0)
	    break;
    }
    if (ed->a == NULL) {
	free (c->data);
	c->data = NULL;
	krb5_clear_error_message (context);
	return KRB5_KT_END;
    }
    return 0;
}

static krb5_error_code KRB5_CALLCONV
any_next_entry (krb5_context context,
		krb5_keytab id,
		krb5_keytab_entry *entry,
		krb5_kt_cursor *cursor)
{
    krb5_error_code ret, ret2;
    struct any_cursor_extra_data *ed;

    ed = (struct any_cursor_extra_data *)cursor->data;
    do {
	ret = krb5_kt_next_entry(context, ed->a->kt, entry, &ed->cursor);
	if (ret == 0)
	    return 0;
	else if (ret != KRB5_KT_END)
	    return ret;

	ret2 = krb5_kt_end_seq_get (context, ed->a->kt, &ed->cursor);
	if (ret2)
	    return ret2;
	while ((ed->a = ed->a->next) != NULL) {
	    ret2 = krb5_kt_start_seq_get(context, ed->a->kt, &ed->cursor);
	    if (ret2 == 0)
		break;
	}
	if (ed->a == NULL) {
	    krb5_clear_error_message (context);
	    return KRB5_KT_END;
	}
    } while (1);
}

static krb5_error_code KRB5_CALLCONV
any_end_seq_get(krb5_context context,
		krb5_keytab id,
		krb5_kt_cursor *cursor)
{
    krb5_error_code ret = 0;
    struct any_cursor_extra_data *ed;

    ed = (struct any_cursor_extra_data *)cursor->data;
    if (ed->a != NULL)
	ret = krb5_kt_end_seq_get(context, ed->a->kt, &ed->cursor);
    free (ed);
    cursor->data = NULL;
    return ret;
}

static krb5_error_code KRB5_CALLCONV
any_add_entry(krb5_context context,
	      krb5_keytab id,
	      krb5_keytab_entry *entry)
{
    struct any_data *a = id->data;
    krb5_error_code ret;
    while(a != NULL) {
	ret = krb5_kt_add_entry(context, a->kt, entry);
	if(ret != 0 && ret != KRB5_KT_NOWRITE) {
	    krb5_set_error_message(context, ret,
				   N_("failed to add entry to %s", ""),
				   a->name);
	    return ret;
	}
	a = a->next;
    }
    return 0;
}

static krb5_error_code KRB5_CALLCONV
any_remove_entry(krb5_context context,
		 krb5_keytab id,
		 krb5_keytab_entry *entry)
{
    struct any_data *a = id->data;
    krb5_error_code ret;
    int found = 0;
    while(a != NULL) {
	ret = krb5_kt_remove_entry(context, a->kt, entry);
	if(ret == 0)
	    found++;
	else {
	    if(ret != KRB5_KT_NOWRITE && ret != KRB5_KT_NOTFOUND) {
		krb5_set_error_message(context, ret,
				       N_("Failed to remove keytab "
					  "entry from %s", "keytab name"),
				       a->name);
		return ret;
	    }
	}
	a = a->next;
    }
    if(!found)
	return KRB5_KT_NOTFOUND;
    return 0;
}

const krb5_kt_ops krb5_any_ops = {
    "ANY",
    any_resolve,
    any_get_name,
    any_close,
    NULL, /* destroy */
    NULL, /* get */
    any_start_seq_get,
    any_next_entry,
    any_end_seq_get,
    any_add_entry,
    any_remove_entry
};
@


1.6
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@@


1.5
log
@Coverity fixes backported from the heimdal cvs.

ok beck@@, No problem deraadt@@
@
text
@d2 3
a4 3
 * Copyright (c) 2001-2002 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
d6 3
a8 3
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
d10 2
a11 2
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
d13 3
a15 3
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
d17 3
a19 3
 * 3. Neither the name of the Institute nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission. 
d21 11
a31 11
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE. 
a35 2
RCSID("$KTH: keytab_any.c,v 1.7 2002/10/21 13:36:59 joda Exp $");

d56 1
a56 1
static krb5_error_code
d64 1
a64 1
	a = malloc(sizeof(*a));
a72 1
		krb5_set_error_string(context, "malloc: out of memory");
d74 1
d88 1
a88 1
	krb5_set_error_string(context, "empty ANY: keytab");
d98 1
a98 1
static krb5_error_code
d109 1
a109 1
static krb5_error_code
d124 3
a126 3
static krb5_error_code
any_start_seq_get(krb5_context context, 
		  krb5_keytab id, 
d135 1
a135 1
	krb5_set_error_string (context, "malloc: out of memory");
d139 6
a144 3
    ed->a = a;
    ret = krb5_kt_start_seq_get(context, ed->a->kt, &ed->cursor);
    if (ret) {
d147 2
a148 1
	return ret;
d153 1
a153 1
static krb5_error_code
d179 1
a179 1
	    krb5_clear_error_string (context);
d185 1
a185 1
static krb5_error_code
d201 1
a201 1
static krb5_error_code
d211 3
a213 2
	    krb5_set_error_string(context, "failed to add entry to %s", 
				  a->name);
d221 1
a221 1
static krb5_error_code
d235 4
a238 2
		krb5_set_error_string(context, "failed to remove entry from %s", 
				      a->name);
d254 1
@


1.4
log
@Merge 0.6rc1
@
text
@d165 1
a165 14
	else if (ret == KRB5_KT_END) {
	    ret2 = krb5_kt_end_seq_get (context, ed->a->kt, &ed->cursor);
	    if (ret2)
		return ret2;
	    while ((ed->a = ed->a->next) != NULL) {
		ret2 = krb5_kt_start_seq_get(context, ed->a->kt, &ed->cursor);
		if (ret2 == 0)
		    break;
	    }
	    if (ed->a == NULL) {
		krb5_clear_error_string (context);
		return KRB5_KT_END;
	    }
	} else
d167 14
a180 2
    } while (ret == KRB5_KT_END);
    return ret;
@


1.3
log
@Merge heimdal-0.4e
@
text
@d2 1
a2 1
 * Copyright (c) 2001 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: keytab_any.c,v 1.4 2001/06/24 02:22:33 assar Exp $");
d45 1
a45 1
free_list (struct any_data *a)
d52 2
d96 1
a96 1
    free_list (a0);
d117 1
a117 1
    free_list (a);
d165 1
a165 1
	else if (ret == KRB5_CC_END) {
d176 1
a176 1
		return KRB5_CC_END;
d180 1
a180 1
    } while (ret == KRB5_CC_END);
d200 45
d254 2
a255 2
    NULL, /* add_entry */
    NULL  /* remote_entry */
@


1.2
log
@Fix this obvious double free() that's been found and fixed my numerous
people.

I'd really have liked to import a new heimdal release, but i do not have
the time to test it enough before 3.0. Post-release, a newer heimdal with
_lots_ of bugfixes will be imported.

This is a very unfortunate situation, i truly regret it and wish i had more
time to spend on this.
@
text
@d36 1
a36 1
RCSID("$KTH: keytab_any.c,v 1.2 2001/05/14 06:14:48 assar Exp $");
d71 1
a71 1
	    a->name = strdup(name);
d144 1
a144 2
	krb5_set_error_string (context, "malloc: out of memory");
	return ENOMEM;
d167 5
a171 1
	    ed->a = ed->a->next;
a175 3
	    ret2 = krb5_kt_start_seq_get(context, ed->a->kt, &ed->cursor);
	    if (ret2)
		return ret2;
@


1.1
log
@Initial revision
@
text
@a141 1
	free (ed);
@


1.1.1.1
log
@Import of heimdal-0.3f

Lots of changes, highlights include:

 * change default keytab to ANY:FILE:/etc/krb5.keytab,krb4:/etc/srvtab,
   the new keytab type that tries both of these in order (SRVTAB is
   also an alias for krb4:)

 * improve error reporting and error handling (error messages should
   be more detailed and more useful)

 * the API is closer to what MIT krb5 is using

 * more compatible with windows 2000

 * removed some memory leaks

 * bug fixes


@
text
@@


1.1.1.2
log
@Import of heimdal-0.4e
@
text
@d36 1
a36 1
RCSID("$KTH: keytab_any.c,v 1.4 2001/06/24 02:22:33 assar Exp $");
d71 1
a71 1
	    a->name = strdup(buf);
d142 1
d145 2
a146 1
	return ret;
d169 1
a169 5
	    while ((ed->a = ed->a->next) != NULL) {
		ret2 = krb5_kt_start_seq_get(context, ed->a->kt, &ed->cursor);
		if (ret2 == 0)
		    break;
	    }
d174 3
@


1.1.1.3
log
@Import of heimdal-0.6rc1
@
text
@d2 1
a2 1
 * Copyright (c) 2001-2002 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: keytab_any.c,v 1.7 2002/10/21 13:36:59 joda Exp $");
d45 1
a45 1
free_list (krb5_context context, struct any_data *a)
a51 2
	if(a->kt)
	    krb5_kt_close(context, a->kt);
d94 1
a94 1
    free_list (context, a0);
d115 1
a115 1
    free_list (context, a);
d163 1
a163 1
	else if (ret == KRB5_KT_END) {
d174 1
a174 1
		return KRB5_KT_END;
d178 1
a178 1
    } while (ret == KRB5_KT_END);
a197 45
static krb5_error_code
any_add_entry(krb5_context context,
	      krb5_keytab id,
	      krb5_keytab_entry *entry)
{
    struct any_data *a = id->data;
    krb5_error_code ret;
    while(a != NULL) {
	ret = krb5_kt_add_entry(context, a->kt, entry);
	if(ret != 0 && ret != KRB5_KT_NOWRITE) {
	    krb5_set_error_string(context, "failed to add entry to %s", 
				  a->name);
	    return ret;
	}
	a = a->next;
    }
    return 0;
}

static krb5_error_code
any_remove_entry(krb5_context context,
		 krb5_keytab id,
		 krb5_keytab_entry *entry)
{
    struct any_data *a = id->data;
    krb5_error_code ret;
    int found = 0;
    while(a != NULL) {
	ret = krb5_kt_remove_entry(context, a->kt, entry);
	if(ret == 0)
	    found++;
	else {
	    if(ret != KRB5_KT_NOWRITE && ret != KRB5_KT_NOTFOUND) {
		krb5_set_error_string(context, "failed to remove entry from %s", 
				      a->name);
		return ret;
	    }
	}
	a = a->next;
    }
    if(!found)
	return KRB5_KT_NOTFOUND;
    return 0;
}

d207 2
a208 2
    any_add_entry,
    any_remove_entry
@


