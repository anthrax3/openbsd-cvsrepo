head	1.9;
access;
symbols
	OPENBSD_5_5:1.8.0.6
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.7.0.28
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.26
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.24
	OPENBSD_5_0:1.7.0.22
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.20
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.18
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.14
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.16
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.12
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.10
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.8
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.6
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.4
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.2
	OPENBSD_4_0_BASE:1.7
	HEIMDAL_0_7_2:1.1.1.4
	OPENBSD_3_9:1.6.0.12
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.10
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	HEIMDAL_0_6_3:1.1.1.3
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	HEIMDAL_0_6:1.1.1.3
	HEIMDAL_0_6RC1:1.1.1.3
	OPENBSD_3_3:1.4.0.8
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.6
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	HEIMDAL_0_4e:1.1.1.2
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	HEIMDAL_0_3f:1.1.1.2
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2014.04.22.10.01.32;	author reyk;	state dead;
branches;
next	1.8;

1.8
date	2013.06.17.18.57.45;	author robert;	state Exp;
branches;
next	1.7;

1.7
date	2006.04.14.08.15.05;	author biorn;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.11.03.40.00;	author hin;	state Exp;
branches;
next	1.5;

1.5
date	2003.04.12.23.20.07;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.22.21.56.18;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.22.16.40.10;	author hin;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.25.09.04.47;	author hin;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.25.07.51.02;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.51.02;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.06.22.21.24.48;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.02.16.01;	author hin;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2006.04.14.07.33.33;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.9
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/*
 * Copyright (c) 1997 - 2001 Kungliga Tekniska HÃ¶gskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "krb5_locl.h"
#include <err.h>

static krb5_error_code _warnerr(krb5_context context, int do_errtext,
	 krb5_error_code code, int level, const char *fmt, va_list ap)
	__attribute__((__format__(__printf__, 5, 0)));

static krb5_error_code
_warnerr(krb5_context context, int do_errtext,
	 krb5_error_code code, int level, const char *fmt, va_list ap)
{
    char xfmt[7] = "";
    const char *args[2], **arg;
    char *msg = NULL;
    const char *err_str = NULL;
    krb5_error_code ret;

    args[0] = args[1] = NULL;
    arg = args;
    if(fmt){
	strlcat(xfmt, "%s", sizeof(xfmt));
	if(do_errtext)
	    strlcat(xfmt, ": ", sizeof(xfmt));
	ret = vasprintf(&msg, fmt, ap);
	if(ret < 0 || msg == NULL)
	    return ENOMEM;
	*arg++ = msg;
    }
    if(context && do_errtext){
	strlcat(xfmt, "%s", sizeof(xfmt));

	err_str = krb5_get_error_message(context, code);
	if (err_str != NULL) {
	    *arg = err_str;
	} else {
	    *arg= "<unknown error>";
	}
    }

    if(context && context->warn_dest)
	krb5_log(context, context->warn_dest, level, xfmt, args[0], args[1]);
    else
	warnx(xfmt, args[0], args[1]);
    free(msg);
    krb5_free_error_message(context, err_str);
    return 0;
}

#define FUNC(ETEXT, CODE, LEVEL)					\
    krb5_error_code ret;						\
    va_list ap;								\
    va_start(ap, fmt);							\
    ret = _warnerr(context, ETEXT, CODE, LEVEL, fmt, ap); 		\
    va_end(ap);

#undef __attribute__
#define __attribute__(X)

/**
 * Log a warning to the log, default stderr, include the error from
 * the last failure.
 *
 * @@param context A Kerberos 5 context.
 * @@param code error code of the last error
 * @@param fmt message to print
 * @@param ap arguments
 *
 * @@ingroup krb5_error
 */

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
krb5_vwarn(krb5_context context, krb5_error_code code,
	   const char *fmt, va_list ap)
     __attribute__ ((format (printf, 3, 0)))
{
    return _warnerr(context, 1, code, 1, fmt, ap);
}

/**
 * Log a warning to the log, default stderr, include the error from
 * the last failure.
 *
 * @@param context A Kerberos 5 context.
 * @@param code error code of the last error
 * @@param fmt message to print
 *
 * @@ingroup krb5_error
 */

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
krb5_warn(krb5_context context, krb5_error_code code, const char *fmt, ...)
     __attribute__ ((format (printf, 3, 4)))
{
    FUNC(1, code, 1);
    return ret;
}

/**
 * Log a warning to the log, default stderr.
 *
 * @@param context A Kerberos 5 context.
 * @@param fmt message to print
 * @@param ap arguments
 *
 * @@ingroup krb5_error
 */

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
krb5_vwarnx(krb5_context context, const char *fmt, va_list ap)
     __attribute__ ((format (printf, 2, 0)))
{
    return _warnerr(context, 0, 0, 1, fmt, ap);
}

/**
 * Log a warning to the log, default stderr.
 *
 * @@param context A Kerberos 5 context.
 * @@param fmt message to print
 *
 * @@ingroup krb5_error
 */

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
krb5_warnx(krb5_context context, const char *fmt, ...)
     __attribute__ ((format (printf, 2, 3)))
{
    FUNC(0, 0, 1);
    return ret;
}

/**
 * Log a warning to the log, default stderr, include bthe error from
 * the last failure and then exit.
 *
 * @@param context A Kerberos 5 context
 * @@param eval the exit code to exit with
 * @@param code error code of the last error
 * @@param fmt message to print
 * @@param ap arguments
 *
 * @@ingroup krb5_error
 */

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
krb5_verr(krb5_context context, int eval, krb5_error_code code,
	  const char *fmt, va_list ap)
     __attribute__ ((noreturn, format (printf, 4, 0)))
{
    _warnerr(context, 1, code, 0, fmt, ap);
    exit(eval);
    UNREACHABLE(return 0);
}

/**
 * Log a warning to the log, default stderr, include bthe error from
 * the last failure and then exit.
 *
 * @@param context A Kerberos 5 context
 * @@param eval the exit code to exit with
 * @@param code error code of the last error
 * @@param fmt message to print
 *
 * @@ingroup krb5_error
 */

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
krb5_err(krb5_context context, int eval, krb5_error_code code,
	 const char *fmt, ...)
     __attribute__ ((noreturn, format (printf, 4, 5)))
{
    FUNC(1, code, 0);
    exit(eval);
    UNREACHABLE(return 0);
}

/**
 * Log a warning to the log, default stderr, and then exit.
 *
 * @@param context A Kerberos 5 context
 * @@param eval the exit code to exit with
 * @@param fmt message to print
 * @@param ap arguments
 *
 * @@ingroup krb5_error
 */

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
krb5_verrx(krb5_context context, int eval, const char *fmt, va_list ap)
     __attribute__ ((noreturn, format (printf, 3, 0)))
{
    _warnerr(context, 0, 0, 0, fmt, ap);
    exit(eval);
    UNREACHABLE(return 0);
}

/**
 * Log a warning to the log, default stderr, and then exit.
 *
 * @@param context A Kerberos 5 context
 * @@param eval the exit code to exit with
 * @@param fmt message to print
 *
 * @@ingroup krb5_error
 */

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
krb5_errx(krb5_context context, int eval, const char *fmt, ...)
     __attribute__ ((noreturn, format (printf, 3, 4)))
{
    FUNC(0, 0, 0);
    exit(eval);
    UNREACHABLE(return 0);
}

/**
 * Log a warning to the log, default stderr, include bthe error from
 * the last failure and then abort.
 *
 * @@param context A Kerberos 5 context
 * @@param code error code of the last error
 * @@param fmt message to print
 * @@param ap arguments
 *
 * @@ingroup krb5_error
 */

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
krb5_vabort(krb5_context context, krb5_error_code code,
	    const char *fmt, va_list ap)
     __attribute__ ((noreturn, format (printf, 3, 0)))
{
    _warnerr(context, 1, code, 0, fmt, ap);
    abort();
    UNREACHABLE(return 0);
}

/**
 * Log a warning to the log, default stderr, include the error from
 * the last failure and then abort.
 *
 * @@param context A Kerberos 5 context
 * @@param code error code of the last error
 * @@param fmt message to print
 *
 * @@ingroup krb5_error
 */

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
krb5_abort(krb5_context context, krb5_error_code code, const char *fmt, ...)
     __attribute__ ((noreturn, format (printf, 3, 4)))
{
    FUNC(1, code, 0);
    abort();
    UNREACHABLE(return 0);
}

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
krb5_vabortx(krb5_context context, const char *fmt, va_list ap)
     __attribute__ ((noreturn, format (printf, 2, 0)))
{
    _warnerr(context, 0, 0, 0, fmt, ap);
    abort();
    UNREACHABLE(return 0);
}

/**
 * Log a warning to the log, default stderr, and then abort.
 *
 * @@param context A Kerberos 5 context
 * @@param code error code of the last error
 * @@param fmt message to print
 *
 * @@ingroup krb5_error
 */

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
krb5_abortx(krb5_context context, const char *fmt, ...)
     __attribute__ ((noreturn, format (printf, 2, 3)))
{
    FUNC(0, 0, 0);
    abort();
    UNREACHABLE(return 0);
}

/**
 * Set the default logging facility.
 *
 * @@param context A Kerberos 5 context
 * @@param fac Facility to use for logging.
 *
 * @@ingroup krb5_error
 */

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
krb5_set_warn_dest(krb5_context context, krb5_log_facility *fac)
{
    context->warn_dest = fac;
    return 0;
}

/**
 * Get the default logging facility.
 *
 * @@param context A Kerberos 5 context
 *
 * @@ingroup krb5_error
 */

KRB5_LIB_FUNCTION krb5_log_facility * KRB5_LIB_CALL
krb5_get_warn_dest(krb5_context context)
{
    return context->warn_dest;
}
@


1.8
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@@


1.7
log
@Merge of heimdal 0.7.2
Tested by todd & beck, ok beck.
@
text
@d2 30
a31 30
 * Copyright (c) 1997 - 2001 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
 *
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
 *
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
 *
 * 3. Neither the name of the Institute nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission. 
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE. 
d37 1
a37 3
RCSID("$KTH: warn.c,v 1.15 2004/05/25 21:46:26 lha Exp $");

static krb5_error_code _warnerr(krb5_context context, int do_errtext, 
d40 1
a40 1
	
d42 1
a42 1
_warnerr(krb5_context context, int do_errtext, 
d48 3
a50 2
    char *err_str = NULL;
    
d57 2
a58 2
	vasprintf(&msg, fmt, ap);
	if(msg == NULL)
a62 2
	const char *err_msg;

d65 1
a65 1
	err_str = krb5_get_error_string(context);
d67 1
a67 1
	    *arg++ = err_str;
d69 1
a69 5
	    err_msg = krb5_get_err_text(context, code);
	    if (err_msg)
		*arg++ = err_msg;
	    else
		*arg++ = "<unknown error>";
d72 1
a72 1
	
d78 1
a78 1
    free(err_str);
d92 14
a105 2
krb5_error_code KRB5_LIB_FUNCTION
krb5_vwarn(krb5_context context, krb5_error_code code, 
d112 10
d123 1
a123 1
krb5_error_code KRB5_LIB_FUNCTION
d131 11
a141 1
krb5_error_code KRB5_LIB_FUNCTION
d148 10
a157 1
krb5_error_code KRB5_LIB_FUNCTION
d165 15
a179 2
krb5_error_code KRB5_LIB_FUNCTION
krb5_verr(krb5_context context, int eval, krb5_error_code code, 
d185 1
d188 11
d200 2
a201 2
krb5_error_code KRB5_LIB_FUNCTION
krb5_err(krb5_context context, int eval, krb5_error_code code, 
d207 1
d210 12
a221 1
krb5_error_code KRB5_LIB_FUNCTION
d227 1
d230 11
a240 1
krb5_error_code KRB5_LIB_FUNCTION
d246 1
d249 14
a262 2
krb5_error_code KRB5_LIB_FUNCTION
krb5_vabort(krb5_context context, krb5_error_code code, 
d268 1
d271 10
d282 1
a282 1
krb5_error_code KRB5_LIB_FUNCTION
d288 1
d291 1
a291 1
krb5_error_code KRB5_LIB_FUNCTION
d297 1
d300 11
a310 1
krb5_error_code KRB5_LIB_FUNCTION
d316 1
d319 10
a328 1
krb5_error_code KRB5_LIB_FUNCTION
d333 14
@


1.6
log
@Merge 0.6rc1
@
text
@d37 1
a37 1
RCSID("$KTH: warn.c,v 1.14 2003/04/16 16:13:08 lha Exp $");
d99 1
a99 1
krb5_error_code
d108 1
a108 1
krb5_error_code
d116 1
a116 1
krb5_error_code
d123 1
a123 1
krb5_error_code
d131 1
a131 1
krb5_error_code
d141 1
a141 1
krb5_error_code
d150 1
a150 1
krb5_error_code
d158 1
a158 1
krb5_error_code
d166 1
a166 1
krb5_error_code
d176 1
a176 1
krb5_error_code
d184 1
a184 1
krb5_error_code
d192 1
a192 1
krb5_error_code
d200 1
a200 1
krb5_error_code
@


1.5
log
@string cleaning; parts by me, then parts by hin, then more parts by me.
since this is not a very important part of the source tree, and since it
does compile, i am dumping it in now.
@
text
@d37 1
a37 1
RCSID("$KTH: warn.c,v 1.13 2001/05/07 21:04:34 assar Exp $");
@


1.4
log
@Merge heimdal-0.3e -> heidmal-0.3f
@
text
@d55 1
a55 1
	strcat(xfmt, "%s");
d57 1
a57 1
	    strcat(xfmt, ": ");
d66 1
a66 1
	strcat(xfmt, "%s");
@


1.3
log
@The weak symbol bug with warnx/_warnx appears to no longer be trigged when
we don't link against other libraries in libkrb, so i believe it's safe
to change _warnx back to warnx.
@
text
@d2 1
a2 1
 * Copyright (c) 1997 - 2000 Kungliga Tekniska Högskolan
d37 1
a37 1
RCSID("$KTH: warn.c,v 1.11 2000/08/16 07:37:41 assar Exp $");
d39 4
d50 1
d68 10
a77 5
	err_msg = krb5_get_err_text(context, code);
	if (err_msg)
	    *arg++ = err_msg;
	else
	    *arg++ = "<unknown error>";
d85 1
@


1.2
log
@For some reason, changing warnx -> _warnx makes the krb5 library stop
coredumping. I beleive this to be a weak symbol bug in the linker.
@
text
@d73 1
a73 1
	_warnx(xfmt, args[0], args[1]);
@


1.1
log
@Initial revision
@
text
@d73 1
a73 1
	warnx(xfmt, args[0], args[1]);
@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.3f

Lots of changes, highlights include:

 * change default keytab to ANY:FILE:/etc/krb5.keytab,krb4:/etc/srvtab,
   the new keytab type that tries both of these in order (SRVTAB is
   also an alias for krb4:)

 * improve error reporting and error handling (error messages should
   be more detailed and more useful)

 * the API is closer to what MIT krb5 is using

 * more compatible with windows 2000

 * removed some memory leaks

 * bug fixes
@
text
@d2 1
a2 1
 * Copyright (c) 1997 - 2001 Kungliga Tekniska Högskolan
d37 1
a37 1
RCSID("$KTH: warn.c,v 1.13 2001/05/07 21:04:34 assar Exp $");
a38 4
static krb5_error_code _warnerr(krb5_context context, int do_errtext, 
	 krb5_error_code code, int level, const char *fmt, va_list ap)
	__attribute__((__format__(__printf__, 5, 0)));
	
a45 1
    char *err_str = NULL;
d63 5
a67 10
	err_str = krb5_get_error_string(context);
	if (err_str != NULL) {
	    *arg++ = err_str;
	} else {
	    err_msg = krb5_get_err_text(context, code);
	    if (err_msg)
		*arg++ = err_msg;
	    else
		*arg++ = "<unknown error>";
	}
a74 1
    free(err_str);
@


1.1.1.3
log
@Import of heimdal-0.6rc1
@
text
@d37 1
a37 1
RCSID("$KTH: warn.c,v 1.14 2003/04/16 16:13:08 lha Exp $");
d55 1
a55 1
	strlcat(xfmt, "%s", sizeof(xfmt));
d57 1
a57 1
	    strlcat(xfmt, ": ", sizeof(xfmt));
d66 1
a66 1
	strlcat(xfmt, "%s", sizeof(xfmt));
@


1.1.1.4
log
@Import of heimdal-0.7.2
@
text
@d37 1
a37 1
RCSID("$KTH: warn.c,v 1.15 2004/05/25 21:46:26 lha Exp $");
d99 1
a99 1
krb5_error_code KRB5_LIB_FUNCTION
d108 1
a108 1
krb5_error_code KRB5_LIB_FUNCTION
d116 1
a116 1
krb5_error_code KRB5_LIB_FUNCTION
d123 1
a123 1
krb5_error_code KRB5_LIB_FUNCTION
d131 1
a131 1
krb5_error_code KRB5_LIB_FUNCTION
d141 1
a141 1
krb5_error_code KRB5_LIB_FUNCTION
d150 1
a150 1
krb5_error_code KRB5_LIB_FUNCTION
d158 1
a158 1
krb5_error_code KRB5_LIB_FUNCTION
d166 1
a166 1
krb5_error_code KRB5_LIB_FUNCTION
d176 1
a176 1
krb5_error_code KRB5_LIB_FUNCTION
d184 1
a184 1
krb5_error_code KRB5_LIB_FUNCTION
d192 1
a192 1
krb5_error_code KRB5_LIB_FUNCTION
d200 1
a200 1
krb5_error_code KRB5_LIB_FUNCTION
@


