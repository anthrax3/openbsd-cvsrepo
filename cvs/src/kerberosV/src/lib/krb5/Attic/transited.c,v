head	1.11;
access;
symbols
	OPENBSD_5_5:1.10.0.6
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.2
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.9.0.26
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.24
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.22
	OPENBSD_5_0:1.9.0.20
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.18
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.16
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.12
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.14
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.10
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.8
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.6
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.4
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.2
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	HEIMDAL_0_7_2:1.1.1.5
	OPENBSD_3_9:1.7.0.6
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.4
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.2
	OPENBSD_3_7_BASE:1.7
	HEIMDAL_0_6_3:1.1.1.4
	OPENBSD_3_6:1.6.0.2
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	HEIMDAL_0_6:1.1.1.3
	HEIMDAL_0_6RC1:1.1.1.3
	OPENBSD_3_3:1.1.1.2.0.8
	OPENBSD_3_3_BASE:1.1.1.2
	OPENBSD_3_2:1.1.1.2.0.6
	OPENBSD_3_2_BASE:1.1.1.2
	OPENBSD_3_1:1.1.1.2.0.4
	OPENBSD_3_1_BASE:1.1.1.2
	HEIMDAL_0_4e:1.1.1.2
	OPENBSD_3_0:1.1.1.2.0.2
	OPENBSD_3_0_BASE:1.1.1.2
	HEIMDAL_0_3f:1.1.1.2
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2014.04.22.10.01.32;	author reyk;	state dead;
branches;
next	1.10;

1.10
date	2013.06.17.18.57.44;	author robert;	state Exp;
branches;
next	1.9;

1.9
date	2006.10.06.07.09.10;	author biorn;	state Exp;
branches;
next	1.8;

1.8
date	2006.04.14.08.15.05;	author biorn;	state Exp;
branches;
next	1.7;

1.7
date	2004.10.29.16.20.31;	author biorn;	state Exp;
branches;
next	1.6;

1.6
date	2004.05.19.14.20.30;	author biorn;	state Exp;
branches;
next	1.5;

1.5
date	2003.08.06.21.08.05;	author millert;	state Exp;
branches
	1.5.2.1
	1.5.4.1;
next	1.4;

1.4
date	2003.05.11.04.12.44;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.11.03.40.00;	author hin;	state Exp;
branches;
next	1.2;

1.2
date	2003.04.12.23.20.07;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.25.07.51.01;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.51.01;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.06.22.21.24.46;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.02.16.00;	author hin;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.10.29.15.55.37;	author biorn;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2006.04.14.07.33.32;	author biorn;	state Exp;
branches;
next	;

1.5.2.1
date	2004.05.26.09.02.38;	author brad;	state Exp;
branches;
next	;

1.5.4.1
date	2004.05.26.08.17.48;	author brad;	state Exp;
branches;
next	;


desc
@@


1.11
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/*
 * Copyright (c) 1997 - 2001, 2003 Kungliga Tekniska HÃ¶gskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "krb5_locl.h"

/* this is an attempt at one of the most horrible `compression'
   schemes that has ever been invented; it's so amazingly brain-dead
   that words can not describe it, and all this just to save a few
   silly bytes */

struct tr_realm {
    char *realm;
    unsigned leading_space:1;
    unsigned leading_slash:1;
    unsigned trailing_dot:1;
    struct tr_realm *next;
};

static void
free_realms(struct tr_realm *r)
{
    struct tr_realm *p;
    while(r){
	p = r;
	r = r->next;
	free(p->realm);
	free(p);
    }
}

static int
make_path(krb5_context context, struct tr_realm *r,
	  const char *from, const char *to)
{
    struct tr_realm *tmp;
    const char *p;

    if(strlen(from) < strlen(to)){
	const char *str;
	str = from;
	from = to;
	to = str;
    }

    if(strcmp(from + strlen(from) - strlen(to), to) == 0){
	p = from;
	while(1){
	    p = strchr(p, '.');
	    if(p == NULL) {
		krb5_clear_error_message (context);
		return KRB5KDC_ERR_POLICY;
	    }
	    p++;
	    if(strcmp(p, to) == 0)
		break;
	    tmp = calloc(1, sizeof(*tmp));
	    if(tmp == NULL)
		return krb5_enomem(context);
	    tmp->next = r->next;
	    r->next = tmp;
	    tmp->realm = strdup(p);
	    if(tmp->realm == NULL){
		r->next = tmp->next;
		free(tmp);
		return krb5_enomem(context);
	    }
	}
    }else if(strncmp(from, to, strlen(to)) == 0){
	p = from + strlen(from);
	while(1){
	    while(p >= from && *p != '/') p--;
	    if(p == from)
		return KRB5KDC_ERR_POLICY;

	    if(strncmp(to, from, p - from) == 0)
		break;
	    tmp = calloc(1, sizeof(*tmp));
	    if(tmp == NULL)
		return krb5_enomem(context);
	    tmp->next = r->next;
	    r->next = tmp;
	    tmp->realm = malloc(p - from + 1);
	    if(tmp->realm == NULL){
		r->next = tmp->next;
		free(tmp);
		return krb5_enomem(context);
	    }
	    memcpy(tmp->realm, from, p - from);
	    tmp->realm[p - from] = '\0';
	    p--;
	}
    } else {
	krb5_clear_error_message (context);
	return KRB5KDC_ERR_POLICY;
    }

    return 0;
}

static int
make_paths(krb5_context context,
	   struct tr_realm *realms, const char *client_realm,
	   const char *server_realm)
{
    struct tr_realm *r;
    int ret;
    const char *prev_realm = client_realm;
    const char *next_realm = NULL;
    for(r = realms; r; r = r->next){
	/* it *might* be that you can have more than one empty
	   component in a row, at least that's how I interpret the
	   "," exception in 1510 */
	if(r->realm[0] == '\0'){
	    while(r->next && r->next->realm[0] == '\0')
		r = r->next;
	    if(r->next)
		next_realm = r->next->realm;
	    else
		next_realm = server_realm;
	    ret = make_path(context, r, prev_realm, next_realm);
	    if(ret){
		free_realms(realms);
		return ret;
	    }
	}
	prev_realm = r->realm;
    }
    return 0;
}

static int
expand_realms(krb5_context context,
	      struct tr_realm *realms, const char *client_realm)
{
    struct tr_realm *r;
    const char *prev_realm = NULL;
    for(r = realms; r; r = r->next){
	if(r->trailing_dot){
	    char *tmp;
	    size_t len;

	    if(prev_realm == NULL)
		prev_realm = client_realm;

	    len = strlen(r->realm) + strlen(prev_realm) + 1;

	    tmp = realloc(r->realm, len);
	    if(tmp == NULL){
		free_realms(realms);
		return krb5_enomem(context);
	    }
	    r->realm = tmp;
	    strlcat(r->realm, prev_realm, len);
	}else if(r->leading_slash && !r->leading_space && prev_realm){
	    /* yet another exception: if you use x500-names, the
               leading realm doesn't have to be "quoted" with a space */
	    char *tmp;
	    size_t len = strlen(r->realm) + strlen(prev_realm) + 1;

	    tmp = malloc(len);
	    if(tmp == NULL){
		free_realms(realms);
		return krb5_enomem(context);
	    }
	    strlcpy(tmp, prev_realm, len);
	    strlcat(tmp, r->realm, len);
	    free(r->realm);
	    r->realm = tmp;
	}
	prev_realm = r->realm;
    }
    return 0;
}

static struct tr_realm *
make_realm(char *realm)
{
    struct tr_realm *r;
    char *p, *q;
    int quote = 0;
    r = calloc(1, sizeof(*r));
    if(r == NULL){
	free(realm);
	return NULL;
    }
    r->realm = realm;
    for(p = q = r->realm; *p; p++){
	if(p == r->realm && *p == ' '){
	    r->leading_space = 1;
	    continue;
	}
	if(q == r->realm && *p == '/')
	    r->leading_slash = 1;
	if(quote){
	    *q++ = *p;
	    quote = 0;
	    continue;
	}
	if(*p == '\\'){
	    quote = 1;
	    continue;
	}
	if(p[0] == '.' && p[1] == '\0')
	    r->trailing_dot = 1;
	*q++ = *p;
    }
    *q = '\0';
    return r;
}

static struct tr_realm*
append_realm(struct tr_realm *head, struct tr_realm *r)
{
    struct tr_realm *p;
    if(head == NULL){
	r->next = NULL;
	return r;
    }
    p = head;
    while(p->next) p = p->next;
    p->next = r;
    return head;
}

static int
decode_realms(krb5_context context,
	      const char *tr, int length, struct tr_realm **realms)
{
    struct tr_realm *r = NULL;

    char *tmp;
    int quote = 0;
    const char *start = tr;
    int i;

    for(i = 0; i < length; i++){
	if(quote){
	    quote = 0;
	    continue;
	}
	if(tr[i] == '\\'){
	    quote = 1;
	    continue;
	}
	if(tr[i] == ','){
	    tmp = malloc(tr + i - start + 1);
	    if(tmp == NULL)
		return krb5_enomem(context);
	    memcpy(tmp, start, tr + i - start);
	    tmp[tr + i - start] = '\0';
	    r = make_realm(tmp);
	    if(r == NULL){
		free_realms(*realms);
		return krb5_enomem(context);
	    }
	    *realms = append_realm(*realms, r);
	    start = tr + i + 1;
	}
    }
    tmp = malloc(tr + i - start + 1);
    if(tmp == NULL){
	free(*realms);
	return krb5_enomem(context);
    }
    memcpy(tmp, start, tr + i - start);
    tmp[tr + i - start] = '\0';
    r = make_realm(tmp);
    if(r == NULL){
	free_realms(*realms);
	return krb5_enomem(context);
    }
    *realms = append_realm(*realms, r);

    return 0;
}


KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
krb5_domain_x500_decode(krb5_context context,
			krb5_data tr, char ***realms, unsigned int *num_realms,
			const char *client_realm, const char *server_realm)
{
    struct tr_realm *r = NULL;
    struct tr_realm *p, **q;
    int ret;

    if(tr.length == 0) {
	*realms = NULL;
	*num_realms = 0;
	return 0;
    }

    /* split string in components */
    ret = decode_realms(context, tr.data, tr.length, &r);
    if(ret)
	return ret;

    /* apply prefix rule */
    ret = expand_realms(context, r, client_realm);
    if(ret)
	return ret;

    ret = make_paths(context, r, client_realm, server_realm);
    if(ret)
	return ret;

    /* remove empty components and count realms */
    *num_realms = 0;
    for(q = &r; *q; ){
	if((*q)->realm[0] == '\0'){
	    p = *q;
	    *q = (*q)->next;
	    free(p->realm);
	    free(p);
	}else{
	    q = &(*q)->next;
	    (*num_realms)++;
	}
    }
    if (*num_realms + 1 > UINT_MAX/sizeof(**realms))
	return ERANGE;

    {
	char **R;
	R = malloc((*num_realms + 1) * sizeof(*R));
	if (R == NULL)
	    return krb5_enomem(context);
	*realms = R;
	while(r){
	    *R++ = r->realm;
	    p = r->next;
	    free(r);
	    r = p;
	}
    }
    return 0;
}

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
krb5_domain_x500_encode(char **realms, unsigned int num_realms,
			krb5_data *encoding)
{
    char *s = NULL;
    int len = 0;
    unsigned int i;
    krb5_data_zero(encoding);
    if (num_realms == 0)
	return 0;
    for(i = 0; i < num_realms; i++){
	len += strlen(realms[i]);
	if(realms[i][0] == '/')
	    len++;
    }
    len += num_realms - 1;
    s = malloc(len + 1);
    if (s == NULL)
	return ENOMEM;
    *s = '\0';
    for(i = 0; i < num_realms; i++){
	if(i)
	    strlcat(s, ",", len + 1);
	if(realms[i][0] == '/')
	    strlcat(s, " ", len + 1);
	strlcat(s, realms[i], len + 1);
    }
    encoding->data = s;
    encoding->length = strlen(s);
    return 0;
}

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
krb5_check_transited(krb5_context context,
		     krb5_const_realm client_realm,
		     krb5_const_realm server_realm,
		     krb5_realm *realms,
		     unsigned int num_realms,
		     int *bad_realm)
{
    char **tr_realms;
    char **p;
    size_t i;

    if(num_realms == 0)
	return 0;

    tr_realms = krb5_config_get_strings(context, NULL,
					"capaths",
					client_realm,
					server_realm,
					NULL);
    for(i = 0; i < num_realms; i++) {
	for(p = tr_realms; p && *p; p++) {
	    if(strcmp(*p, realms[i]) == 0)
		break;
	}
	if(p == NULL || *p == NULL) {
	    krb5_config_free_strings(tr_realms);
	    krb5_set_error_message (context, KRB5KRB_AP_ERR_ILL_CR_TKT,
				    N_("no transit allowed "
				       "through realm %s", ""),
				    realms[i]);
	    if(bad_realm)
		*bad_realm = i;
	    return KRB5KRB_AP_ERR_ILL_CR_TKT;
	}
    }
    krb5_config_free_strings(tr_realms);
    return 0;
}

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
krb5_check_transited_realms(krb5_context context,
			    const char *const *realms,
			    unsigned int num_realms,
			    int *bad_realm)
{
    size_t i;
    int ret = 0;
    char **bad_realms = krb5_config_get_strings(context, NULL,
						"libdefaults",
						"transited_realms_reject",
						NULL);
    if(bad_realms == NULL)
	return 0;

    for(i = 0; i < num_realms; i++) {
	char **p;
	for(p = bad_realms; *p; p++)
	    if(strcmp(*p, realms[i]) == 0) {
		ret = KRB5KRB_AP_ERR_ILL_CR_TKT;
		krb5_set_error_message (context, ret,
					N_("no transit allowed "
					   "through realm %s", ""),
					*p);
		if(bad_realm)
		    *bad_realm = i;
		break;
	    }
    }
    krb5_config_free_strings(bad_realms);
    return ret;
}

#if 0
int
main(int argc, char **argv)
{
    krb5_data x;
    char **r;
    int num, i;
    x.data = argv[1];
    x.length = strlen(x.data);
    if(domain_expand(x, &r, &num, argv[2], argv[3]))
	exit(1);
    for(i = 0; i < num; i++)
	printf("%s\n", r[i]);
    return 0;
}
#endif

@


1.10
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@@


1.9
log
@Coverity fixes backported from the heimdal cvs.

ok beck@@, No problem deraadt@@
@
text
@d2 3
a4 3
 * Copyright (c) 1997 - 2001, 2003 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
d6 3
a8 3
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
d10 2
a11 2
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
d13 3
a15 3
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
d17 3
a19 3
 * 3. Neither the name of the Institute nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission. 
d21 11
a31 11
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE. 
a35 2
RCSID("$KTH: transited.c,v 1.15 2004/05/25 21:45:27 lha Exp $");

d58 1
a58 1
    }	
d65 1
a66 2
    struct tr_realm *path = r->next;
    struct tr_realm *tmp;
d69 2
a70 2
	const char *tmp;
	tmp = from;
d72 1
a72 1
	to = tmp;
d74 1
a74 1
	
d80 1
a80 1
		krb5_clear_error_string (context);
d87 9
a95 7
	    tmp->next = path;
	    path = tmp;
	    path->realm = strdup(p);
	    if(path->realm == NULL){
		r->next = path; /* XXX */
		krb5_set_error_string (context, "malloc: out of memory");
		return ENOMEM;
d102 1
a102 2
	    if(p == from) {
		r->next = path; /* XXX */
d104 1
a104 1
	    }
d108 9
a116 7
	    tmp->next = path;
	    path = tmp;
	    path->realm = malloc(p - from + 1);
	    if(path->realm == NULL){
		r->next = path; /* XXX */
		krb5_set_error_string (context, "malloc: out of memory");
		return ENOMEM;
d118 2
a119 2
	    memcpy(path->realm, from, p - from);
	    path->realm[p - from] = '\0';
d123 1
a123 1
	krb5_clear_error_string (context);
d126 1
a126 2
    r->next = path;
    
d132 1
a132 1
	   struct tr_realm *realms, const char *client_realm, 
d170 1
a170 1
	    size_t len = strlen(r->realm) + strlen(prev_realm) + 1;
d174 3
d180 1
a180 2
		krb5_set_error_string (context, "malloc: out of memory");
		return ENOMEM;
d193 1
a193 2
		krb5_set_error_string (context, "malloc: out of memory");
		return ENOMEM;
d277 2
d284 1
a284 2
		krb5_set_error_string (context, "malloc: out of memory");
		return ENOMEM;
d291 4
d300 1
a300 2
	krb5_set_error_string (context, "malloc: out of memory");
	return ENOMEM;
d303 1
a303 1
    
d308 1
a308 1
krb5_error_code KRB5_LIB_FUNCTION
d310 1
a310 1
			krb5_data tr, char ***realms, int *num_realms, 
d316 1
a316 1
    
d327 1
a327 1
    
d332 1
a332 1
    
d336 1
a336 1
    
a337 1
    q = &r;
d339 4
a342 2
    for(p = r; p; ){
	if(p->realm[0] == '\0'){
a343 1
	    *q = p->next;
a344 1
	    p = *q;
d346 1
a346 2
	    q = &p->next;
	    p = p->next;
d350 1
a350 1
    if (*num_realms < 0 || *num_realms + 1 > UINT_MAX/sizeof(**realms))
d357 1
a357 1
	    return ENOMEM;
d369 3
a371 2
krb5_error_code KRB5_LIB_FUNCTION
krb5_domain_x500_encode(char **realms, int num_realms, krb5_data *encoding)
d375 1
a375 1
    int i;
d390 1
a390 1
	if(i && i < num_realms - 1)
d401 1
a401 1
krb5_error_code KRB5_LIB_FUNCTION
d406 1
a406 1
		     int num_realms,
d411 1
a411 1
    int i;
d415 5
a419 5
    
    tr_realms = krb5_config_get_strings(context, NULL, 
					"capaths", 
					client_realm, 
					server_realm, 
d428 4
a431 2
	    krb5_set_error_string (context, "no transit through realm %s",
				   realms[i]);
d441 1
a441 1
krb5_error_code KRB5_LIB_FUNCTION
d443 2
a444 2
			    const char *const *realms, 
			    int num_realms, 
d447 1
a447 1
    int i;
d449 3
a451 3
    char **bad_realms = krb5_config_get_strings(context, NULL, 
						"libdefaults", 
						"transited_realms_reject", 
a459 2
		krb5_set_error_string (context, "no transit through realm %s",
				       *p);
d461 4
@


1.8
log
@Merge of heimdal 0.7.2
Tested by todd & beck, ok beck.
@
text
@d103 2
a104 1
	    if(p == from)
d106 1
@


1.7
log
@Merge with heimdal-0.6.3 Tested by beck@@, msf@@, me and others. ok beck@@
@
text
@d36 1
a36 1
RCSID("$KTH: transited.c,v 1.10.2.3 2003/10/22 06:07:41 lha Exp $");
d302 1
a302 1
krb5_error_code
d365 1
a365 1
krb5_error_code
d396 1
a396 1
krb5_error_code
d434 1
a434 1
krb5_error_code
@


1.6
log
@Fix cross-realm trust vulnerability. Adapted from FreeBSD patch.

ok beck@@ hin@@
@
text
@d2 1
a2 1
 * Copyright (c) 1997 - 2001 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: transited.c,v 1.10 2003/04/16 16:11:27 lha Exp $");
@


1.5
log
@Remove some double semicolons (hmm, do two semis equal a maxi?).
I've skipped the GNU stuff for now.  From Patrick Latifi.
@
text
@d311 6
d371 3
d381 2
d393 38
@


1.5.2.1
log
@MFC:
Fix by biorn:

Fix cross-realm trust vulnerability. Adapted from FreeBSD patch.
@
text
@a310 6
    if(tr.length == 0) {
	*realms = NULL;
	*num_realms = 0;
	return 0;
    }

a364 3
    krb5_data_zero(encoding);
    if (num_realms == 0)
	return 0;
a371 2
    if (s == NULL)
	return ENOMEM;
a381 38
    return 0;
}

krb5_error_code
krb5_check_transited(krb5_context context,
		     krb5_const_realm client_realm,
		     krb5_const_realm server_realm,
		     krb5_realm *realms,
		     int num_realms,
		     int *bad_realm)
{
    char **tr_realms;
    char **p;
    int i;

    if(num_realms == 0)
	return 0;
    
    tr_realms = krb5_config_get_strings(context, NULL, 
					"capaths", 
					client_realm, 
					server_realm, 
					NULL);
    for(i = 0; i < num_realms; i++) {
	for(p = tr_realms; p && *p; p++) {
	    if(strcmp(*p, realms[i]) == 0)
		break;
	}
	if(p == NULL || *p == NULL) {
	    krb5_config_free_strings(tr_realms);
	    krb5_set_error_string (context, "no transit through realm %s",
				   realms[i]);
	    if(bad_realm)
		*bad_realm = i;
	    return KRB5KRB_AP_ERR_ILL_CR_TKT;
	}
    }
    krb5_config_free_strings(tr_realms);
@


1.5.4.1
log
@MFC:
Fix by biorn:

Fix cross-realm trust vulnerability. Adapted from FreeBSD patch.
@
text
@a310 6
    if(tr.length == 0) {
	*realms = NULL;
	*num_realms = 0;
	return 0;
    }

a364 3
    krb5_data_zero(encoding);
    if (num_realms == 0)
	return 0;
a371 2
    if (s == NULL)
	return ENOMEM;
a381 38
    return 0;
}

krb5_error_code
krb5_check_transited(krb5_context context,
		     krb5_const_realm client_realm,
		     krb5_const_realm server_realm,
		     krb5_realm *realms,
		     int num_realms,
		     int *bad_realm)
{
    char **tr_realms;
    char **p;
    int i;

    if(num_realms == 0)
	return 0;
    
    tr_realms = krb5_config_get_strings(context, NULL, 
					"capaths", 
					client_realm, 
					server_realm, 
					NULL);
    for(i = 0; i < num_realms; i++) {
	for(p = tr_realms; p && *p; p++) {
	    if(strcmp(*p, realms[i]) == 0)
		break;
	}
	if(p == NULL || *p == NULL) {
	    krb5_config_free_strings(tr_realms);
	    krb5_set_error_string (context, "no transit through realm %s",
				   realms[i]);
	    if(bad_realm)
		*bad_realm = i;
	    return KRB5KRB_AP_ERR_ILL_CR_TKT;
	}
    }
    krb5_config_free_strings(tr_realms);
@


1.4
log
@Fix a few merge mistakes
@
text
@d96 1
a96 1
		return ENOMEM;;
@


1.3
log
@Merge 0.6rc1
@
text
@a183 1
	    size_t len = strlen(r->realm) + strlen(prev_realm) + 1;
@


1.2
log
@string cleaning; parts by me, then parts by hin, then more parts by me.
since this is not a very important part of the source tree, and since it
does compile, i am dumping it in now.
@
text
@d36 1
a36 1
RCSID("$KTH: transited.c,v 1.8 2001/05/14 06:14:52 assar Exp $");
d169 2
d173 1
a173 1
	    tmp = realloc(r->realm, strlen(r->realm) + strlen(prev_realm) + 1);
d180 1
a180 2
	    strlcat(r->realm, prev_realm, 
		    strlen(r->realm) + strlen(prev_realm) + 1);
d186 2
d326 1
a326 1
    /* remove empty components */
d328 1
d338 1
d341 3
d346 4
a349 2
	*realms = NULL;
	*num_realms = 0;
d351 1
a351 9
	    R = realloc(*realms, (*num_realms + 1) * sizeof(**realms));
	    if(R == NULL) {
		free(*realms);
		krb5_set_error_string (context, "malloc: out of memory");
		return ENOMEM;
	    }
	    R[*num_realms] = r->realm;
	    (*num_realms)++;
	    *realms = R;
d376 1
a376 1
	    strlcat(s, ",", len+1);
d378 2
a379 2
	    strlcat(s, " ", len+1);
	strlcat(s, realms[i], len+1);
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * Copyright (c) 1997 - 2000 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: transited.c,v 1.7 2000/02/07 13:30:41 joda Exp $");
d64 2
a65 1
make_path(struct tr_realm *r, const char *from, const char *to)
d82 2
a83 1
	    if(p == NULL)
d85 1
d95 1
d113 1
d120 2
a121 1
    }else
d123 1
d130 2
a131 1
make_paths(struct tr_realm *realms, const char *client_realm, 
d149 1
a149 1
	    ret = make_path(r, prev_realm, next_realm);
d161 2
a162 1
expand_realms(struct tr_realm *realms, const char *client_realm)
d174 1
d178 2
a179 1
	    strcat(r->realm, prev_realm);
d183 1
d185 1
a185 1
	    tmp = malloc(strlen(r->realm) + strlen(prev_realm) + 1);
d188 1
d191 2
a192 2
	    strcpy(tmp, prev_realm);
	    strcat(tmp, r->realm);
d252 2
a253 1
decode_realms(const char *tr, int length, struct tr_realm **realms)
d278 1
d291 1
d301 2
a302 1
krb5_domain_x500_decode(krb5_data tr, char ***realms, int *num_realms, 
d310 1
a310 1
    ret = decode_realms(tr.data, tr.length, &r);
d315 1
a315 1
    ret = expand_realms(r, client_realm);
d319 1
a319 1
    ret = make_paths(r, client_realm, server_realm);
d344 1
d374 1
a374 1
	    strcat(s, ",");
d376 2
a377 2
	    strcat(s, " ");
	strcat(s, realms[i]);
d403 2
@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.3f

Lots of changes, highlights include:

 * change default keytab to ANY:FILE:/etc/krb5.keytab,krb4:/etc/srvtab,
   the new keytab type that tries both of these in order (SRVTAB is
   also an alias for krb4:)

 * improve error reporting and error handling (error messages should
   be more detailed and more useful)

 * the API is closer to what MIT krb5 is using

 * more compatible with windows 2000

 * removed some memory leaks

 * bug fixes
@
text
@d2 1
a2 1
 * Copyright (c) 1997 - 2001 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: transited.c,v 1.8 2001/05/14 06:14:52 assar Exp $");
d64 1
a64 2
make_path(krb5_context context, struct tr_realm *r,
	  const char *from, const char *to)
d81 1
a81 2
	    if(p == NULL) {
		krb5_clear_error_string (context);
a82 1
	    }
a91 1
		krb5_set_error_string (context, "malloc: out of memory");
a108 1
		krb5_set_error_string (context, "malloc: out of memory");
d115 1
a115 2
    } else {
	krb5_clear_error_string (context);
a116 1
    }
d123 1
a123 2
make_paths(krb5_context context,
	   struct tr_realm *realms, const char *client_realm, 
d141 1
a141 1
	    ret = make_path(context, r, prev_realm, next_realm);
d153 1
a153 2
expand_realms(krb5_context context,
	      struct tr_realm *realms, const char *client_realm)
a164 1
		krb5_set_error_string (context, "malloc: out of memory");
a175 1
		krb5_set_error_string (context, "malloc: out of memory");
d239 1
a239 2
decode_realms(krb5_context context,
	      const char *tr, int length, struct tr_realm **realms)
a263 1
		krb5_set_error_string (context, "malloc: out of memory");
a275 1
	krb5_set_error_string (context, "malloc: out of memory");
d285 1
a285 2
krb5_domain_x500_decode(krb5_context context,
			krb5_data tr, char ***realms, int *num_realms, 
d293 1
a293 1
    ret = decode_realms(context, tr.data, tr.length, &r);
d298 1
a298 1
    ret = expand_realms(context, r, client_realm);
d302 1
a302 1
    ret = make_paths(context, r, client_realm, server_realm);
a326 1
		krb5_set_error_string (context, "malloc: out of memory");
a384 2
		krb5_set_error_string (context, "no transit through realm %s",
				       *p);
@


1.1.1.3
log
@Import of heimdal-0.6rc1
@
text
@d36 1
a36 1
RCSID("$KTH: transited.c,v 1.10 2003/04/16 16:11:27 lha Exp $");
a168 2
	    size_t len = strlen(r->realm) + strlen(prev_realm) + 1;

d171 1
a171 1
	    tmp = realloc(r->realm, len);
d178 1
a178 1
	    strlcat(r->realm, prev_realm, len);
d183 1
a183 3
	    size_t len = strlen(r->realm) + strlen(prev_realm) + 1;

	    tmp = malloc(len);
d189 2
a190 2
	    strlcpy(tmp, prev_realm, len);
	    strlcat(tmp, r->realm, len);
d321 1
a321 1
    /* remove empty components and count realms */
a322 1
    *num_realms = 0;
a331 1
	    (*num_realms)++;
a333 3
    if (*num_realms < 0 || *num_realms + 1 > UINT_MAX/sizeof(**realms))
	return ERANGE;

d336 2
a337 4
	R = malloc((*num_realms + 1) * sizeof(*R));
	if (R == NULL)
	    return ENOMEM;
	*realms = R;
d339 9
a347 1
	    *R++ = r->realm;
d372 1
a372 1
	    strlcat(s, ",", len + 1);
d374 2
a375 2
	    strlcat(s, " ", len + 1);
	strlcat(s, realms[i], len + 1);
@


1.1.1.4
log
@Import of heimdal-0.6.3
@
text
@d2 1
a2 1
 * Copyright (c) 1997 - 2001, 2003 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: transited.c,v 1.10.2.3 2003/10/22 06:07:41 lha Exp $");
a310 6
    if(tr.length == 0) {
	*realms = NULL;
	*num_realms = 0;
	return 0;
    }

a364 3
    krb5_data_zero(encoding);
    if (num_realms == 0)
	return 0;
a371 2
    if (s == NULL)
	return ENOMEM;
a381 38
    return 0;
}

krb5_error_code
krb5_check_transited(krb5_context context,
		     krb5_const_realm client_realm,
		     krb5_const_realm server_realm,
		     krb5_realm *realms,
		     int num_realms,
		     int *bad_realm)
{
    char **tr_realms;
    char **p;
    int i;

    if(num_realms == 0)
	return 0;
    
    tr_realms = krb5_config_get_strings(context, NULL, 
					"capaths", 
					client_realm, 
					server_realm, 
					NULL);
    for(i = 0; i < num_realms; i++) {
	for(p = tr_realms; p && *p; p++) {
	    if(strcmp(*p, realms[i]) == 0)
		break;
	}
	if(p == NULL || *p == NULL) {
	    krb5_config_free_strings(tr_realms);
	    krb5_set_error_string (context, "no transit through realm %s",
				   realms[i]);
	    if(bad_realm)
		*bad_realm = i;
	    return KRB5KRB_AP_ERR_ILL_CR_TKT;
	}
    }
    krb5_config_free_strings(tr_realms);
@


1.1.1.5
log
@Import of heimdal-0.7.2
@
text
@d36 1
a36 1
RCSID("$KTH: transited.c,v 1.15 2004/05/25 21:45:27 lha Exp $");
d302 1
a302 1
krb5_error_code KRB5_LIB_FUNCTION
d365 1
a365 1
krb5_error_code KRB5_LIB_FUNCTION
d396 1
a396 1
krb5_error_code KRB5_LIB_FUNCTION
d434 1
a434 1
krb5_error_code KRB5_LIB_FUNCTION
@


