head	1.3;
access;
symbols
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.2
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.1.1.4.0.28
	OPENBSD_5_3_BASE:1.1.1.4
	OPENBSD_5_2:1.1.1.4.0.26
	OPENBSD_5_2_BASE:1.1.1.4
	OPENBSD_5_1_BASE:1.1.1.4
	OPENBSD_5_1:1.1.1.4.0.24
	OPENBSD_5_0:1.1.1.4.0.22
	OPENBSD_5_0_BASE:1.1.1.4
	OPENBSD_4_9:1.1.1.4.0.20
	OPENBSD_4_9_BASE:1.1.1.4
	OPENBSD_4_8:1.1.1.4.0.18
	OPENBSD_4_8_BASE:1.1.1.4
	OPENBSD_4_7:1.1.1.4.0.14
	OPENBSD_4_7_BASE:1.1.1.4
	OPENBSD_4_6:1.1.1.4.0.16
	OPENBSD_4_6_BASE:1.1.1.4
	OPENBSD_4_5:1.1.1.4.0.12
	OPENBSD_4_5_BASE:1.1.1.4
	OPENBSD_4_4:1.1.1.4.0.10
	OPENBSD_4_4_BASE:1.1.1.4
	OPENBSD_4_3:1.1.1.4.0.8
	OPENBSD_4_3_BASE:1.1.1.4
	OPENBSD_4_2:1.1.1.4.0.6
	OPENBSD_4_2_BASE:1.1.1.4
	OPENBSD_4_1:1.1.1.4.0.4
	OPENBSD_4_1_BASE:1.1.1.4
	OPENBSD_4_0:1.1.1.4.0.2
	OPENBSD_4_0_BASE:1.1.1.4
	HEIMDAL_0_7_2:1.1.1.4
	OPENBSD_3_9:1.1.1.3.0.6
	OPENBSD_3_9_BASE:1.1.1.3
	OPENBSD_3_8:1.1.1.3.0.4
	OPENBSD_3_8_BASE:1.1.1.3
	OPENBSD_3_7:1.1.1.3.0.2
	OPENBSD_3_7_BASE:1.1.1.3
	HEIMDAL_0_6_3:1.1.1.3
	OPENBSD_3_6:1.1.1.2.0.6
	OPENBSD_3_6_BASE:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.4
	OPENBSD_3_5_BASE:1.1.1.2
	OPENBSD_3_4:1.1.1.2.0.2
	OPENBSD_3_4_BASE:1.1.1.2
	HEIMDAL_0_6:1.1.1.2
	HEIMDAL_0_6RC1:1.1.1.2
	OPENBSD_3_3:1.1.1.1.0.8
	OPENBSD_3_3_BASE:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.6
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.4
	OPENBSD_3_1_BASE:1.1.1.1
	HEIMDAL_0_4e:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.2
	OPENBSD_3_0_BASE:1.1.1.1
	HEIMDAL_0_3f:1.1.1.1
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2014.04.22.10.01.32;	author reyk;	state dead;
branches;
next	1.2;

1.2
date	2013.06.17.18.57.44;	author robert;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.25.07.51.05;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.51.05;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.05.11.02.16.02;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.10.29.15.55.37;	author biorn;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2006.04.14.07.33.34;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.3
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/* This is a generated file */
#ifndef __krb5_private_h__
#define __krb5_private_h__

#include <stdarg.h>

#if !defined(__GNUC__) && !defined(__attribute__)
#define __attribute__(x)
#endif

#ifndef KRB5_DEPRECATED_FUNCTION
#if defined(__GNUC__) && ((__GNUC__ > 3) || ((__GNUC__ == 3) && (__GNUC_MINOR__ >= 1 )))
#define KRB5_DEPRECATED_FUNCTION(X) __attribute__((__deprecated__))
#else
#define KRB5_DEPRECATED_FUNCTION(X)
#endif
#endif


void
_heim_krb5_ipc_client_clear_target (void);

void
_heim_krb5_ipc_client_set_target_uid (uid_t /*uid*/);

void
_krb5_DES3_random_to_key (
	krb5_context /*context*/,
	krb5_keyblock */*key*/,
	const void */*data*/,
	size_t /*size*/);

krb5_error_code
_krb5_HMAC_MD5_checksum (
	krb5_context /*context*/,
	struct _krb5_key_data */*key*/,
	const void */*data*/,
	size_t /*len*/,
	unsigned /*usage*/,
	Checksum */*result*/);

krb5_error_code
_krb5_SP_HMAC_SHA1_checksum (
	krb5_context /*context*/,
	struct _krb5_key_data */*key*/,
	const void */*data*/,
	size_t /*len*/,
	unsigned /*usage*/,
	Checksum */*result*/);

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
_krb5_build_authenticator (
	krb5_context /*context*/,
	krb5_auth_context /*auth_context*/,
	krb5_enctype /*enctype*/,
	krb5_creds */*cred*/,
	Checksum */*cksum*/,
	krb5_data */*result*/,
	krb5_key_usage /*usage*/);

krb5_error_code
_krb5_cc_allocate (
	krb5_context /*context*/,
	const krb5_cc_ops */*ops*/,
	krb5_ccache */*id*/);

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
_krb5_config_copy (
	krb5_context /*context*/,
	krb5_config_section */*c*/,
	krb5_config_section **/*head*/);

KRB5_LIB_FUNCTION const void * KRB5_LIB_CALL
_krb5_config_get (
	krb5_context /*context*/,
	const krb5_config_section */*c*/,
	int /*type*/,
	...);

krb5_config_section *
_krb5_config_get_entry (
	krb5_config_section **/*parent*/,
	const char */*name*/,
	int /*type*/);

KRB5_LIB_FUNCTION const void * KRB5_LIB_CALL
_krb5_config_get_next (
	krb5_context /*context*/,
	const krb5_config_section */*c*/,
	const krb5_config_binding **/*pointer*/,
	int /*type*/,
	...);

const void *
_krb5_config_vget (
	krb5_context /*context*/,
	const krb5_config_section */*c*/,
	int /*type*/,
	va_list /*args*/);

KRB5_LIB_FUNCTION const void * KRB5_LIB_CALL
_krb5_config_vget_next (
	krb5_context /*context*/,
	const krb5_config_section */*c*/,
	const krb5_config_binding **/*pointer*/,
	int /*type*/,
	va_list /*args*/);

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
_krb5_copy_send_to_kdc_func (
	krb5_context /*context*/,
	krb5_context /*to*/);

void
_krb5_crc_init_table (void);

uint32_t
_krb5_crc_update (
	const char */*p*/,
	size_t /*len*/,
	uint32_t /*res*/);

void KRB5_LIB_FUNCTION
_krb5_debug (
	krb5_context /*context*/,
	int /*level*/,
	const char */*fmt*/,
	...)
     __attribute__((format (printf, 3, 4)));

void
_krb5_debug_backtrace (krb5_context /*context*/);

krb5_error_code
_krb5_derive_key (
	krb5_context /*context*/,
	struct _krb5_encryption_type */*et*/,
	struct _krb5_key_data */*key*/,
	const void */*constant*/,
	size_t /*len*/);

krb5_error_code
_krb5_des_checksum (
	krb5_context /*context*/,
	const EVP_MD */*evp_md*/,
	struct _krb5_key_data */*key*/,
	const void */*data*/,
	size_t /*len*/,
	Checksum */*cksum*/);

krb5_error_code
_krb5_des_verify (
	krb5_context /*context*/,
	const EVP_MD */*evp_md*/,
	struct _krb5_key_data */*key*/,
	const void */*data*/,
	size_t /*len*/,
	Checksum */*C*/);

krb5_error_code
_krb5_dh_group_ok (
	krb5_context /*context*/,
	unsigned long /*bits*/,
	heim_integer */*p*/,
	heim_integer */*g*/,
	heim_integer */*q*/,
	struct krb5_dh_moduli **/*moduli*/,
	char **/*name*/);

krb5_error_code
_krb5_einval (
	krb5_context /*context*/,
	const char */*func*/,
	unsigned long /*argn*/);

krb5_error_code
_krb5_erase_file (
	krb5_context /*context*/,
	const char */*filename*/);

void
_krb5_evp_cleanup (
	krb5_context /*context*/,
	struct _krb5_key_data */*kd*/);

krb5_error_code
_krb5_evp_encrypt (
	krb5_context /*context*/,
	struct _krb5_key_data */*key*/,
	void */*data*/,
	size_t /*len*/,
	krb5_boolean /*encryptp*/,
	int /*usage*/,
	void */*ivec*/);

krb5_error_code
_krb5_evp_encrypt_cts (
	krb5_context /*context*/,
	struct _krb5_key_data */*key*/,
	void */*data*/,
	size_t /*len*/,
	krb5_boolean /*encryptp*/,
	int /*usage*/,
	void */*ivec*/);

void
_krb5_evp_schedule (
	krb5_context /*context*/,
	struct _krb5_key_type */*kt*/,
	struct _krb5_key_data */*kd*/);

krb5_error_code
_krb5_expand_default_cc_name (
	krb5_context /*context*/,
	const char */*str*/,
	char **/*res*/);

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
_krb5_expand_path_tokens (
	krb5_context /*context*/,
	const char */*path_in*/,
	char **/*ppath_out*/);

int
_krb5_extract_ticket (
	krb5_context /*context*/,
	krb5_kdc_rep */*rep*/,
	krb5_creds */*creds*/,
	krb5_keyblock */*key*/,
	krb5_const_pointer /*keyseed*/,
	krb5_key_usage /*key_usage*/,
	krb5_addresses */*addrs*/,
	unsigned /*nonce*/,
	unsigned /*flags*/,
	krb5_decrypt_proc /*decrypt_proc*/,
	krb5_const_pointer /*decryptarg*/);

struct _krb5_checksum_type *
_krb5_find_checksum (krb5_cksumtype /*type*/);

struct _krb5_encryption_type *
_krb5_find_enctype (krb5_enctype /*type*/);

void
_krb5_free_key_data (
	krb5_context /*context*/,
	struct _krb5_key_data */*key*/,
	struct _krb5_encryption_type */*et*/);

void
_krb5_free_krbhst_info (krb5_krbhst_info */*hi*/);

void
_krb5_free_moduli (struct krb5_dh_moduli **/*moduli*/);

krb5_error_code
_krb5_get_cred_kdc_any (
	krb5_context /*context*/,
	krb5_kdc_flags /*flags*/,
	krb5_ccache /*ccache*/,
	krb5_creds */*in_creds*/,
	krb5_principal /*impersonate_principal*/,
	Ticket */*second_ticket*/,
	krb5_creds **/*out_creds*/,
	krb5_creds ***/*ret_tgts*/);

char *
_krb5_get_default_cc_name_from_registry (krb5_context /*context*/);

char *
_krb5_get_default_config_config_files_from_registry (void);

krb5_error_code
_krb5_get_default_principal_local (
	krb5_context /*context*/,
	krb5_principal */*princ*/);

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
_krb5_get_host_realm_int (
	krb5_context /*context*/,
	const char */*host*/,
	krb5_boolean /*use_dns*/,
	krb5_realm **/*realms*/);

KRB5_LIB_FUNCTION void KRB5_LIB_CALL
_krb5_get_init_creds_opt_free_pkinit (krb5_get_init_creds_opt */*opt*/);

KRB5_LIB_FUNCTION krb5_ssize_t KRB5_LIB_CALL
_krb5_get_int (
	void */*buffer*/,
	unsigned long */*value*/,
	size_t /*size*/);

krb5_error_code
_krb5_get_krbtgt (
	krb5_context /*context*/,
	krb5_ccache /*id*/,
	krb5_realm /*realm*/,
	krb5_creds **/*cred*/);

krb5_boolean KRB5_LIB_FUNCTION
_krb5_have_debug (
	krb5_context /*context*/,
	int /*level*/);

krb5_boolean
_krb5_homedir_access (krb5_context /*context*/);

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
_krb5_init_etype (
	krb5_context /*context*/,
	krb5_pdu /*pdu_type*/,
	unsigned */*len*/,
	krb5_enctype **/*val*/,
	const krb5_enctype */*etypes*/);

krb5_error_code
_krb5_internal_hmac (
	krb5_context /*context*/,
	struct _krb5_checksum_type */*cm*/,
	const void */*data*/,
	size_t /*len*/,
	unsigned /*usage*/,
	struct _krb5_key_data */*keyblock*/,
	Checksum */*result*/);

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
_krb5_kcm_get_initial_ticket (
	krb5_context /*context*/,
	krb5_ccache /*id*/,
	krb5_principal /*server*/,
	krb5_keyblock */*key*/);

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
_krb5_kcm_get_ticket (
	krb5_context /*context*/,
	krb5_ccache /*id*/,
	krb5_kdc_flags /*flags*/,
	krb5_enctype /*enctype*/,
	krb5_principal /*server*/);

KRB5_LIB_FUNCTION krb5_boolean KRB5_LIB_CALL
_krb5_kcm_is_running (krb5_context /*context*/);

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
_krb5_kcm_noop (
	krb5_context /*context*/,
	krb5_ccache /*id*/);

krb5_error_code KRB5_CALLCONV
_krb5_kdc_retry (
	krb5_context /*context*/,
	krb5_sendto_ctx /*ctx*/,
	void */*data*/,
	const krb5_data */*reply*/,
	int */*action*/);

krb5_error_code
_krb5_krbhost_info_move (
	krb5_context /*context*/,
	krb5_krbhst_info */*from*/,
	krb5_krbhst_info **/*to*/);

const char *
_krb5_krbhst_get_realm (krb5_krbhst_handle /*handle*/);

krb5_error_code
_krb5_kt_principal_not_found (
	krb5_context /*context*/,
	krb5_error_code /*ret*/,
	krb5_keytab /*id*/,
	krb5_const_principal /*principal*/,
	krb5_enctype /*enctype*/,
	int /*kvno*/);

krb5_error_code
_krb5_load_ccache_plugins (krb5_context /*context*/);

void
_krb5_load_plugins (
	krb5_context /*context*/,
	const char */*name*/,
	const char **/*paths*/);

krb5_error_code
_krb5_mk_req_internal (
	krb5_context /*context*/,
	krb5_auth_context */*auth_context*/,
	const krb5_flags /*ap_req_options*/,
	krb5_data */*in_data*/,
	krb5_creds */*in_creds*/,
	krb5_data */*outbuf*/,
	krb5_key_usage /*checksum_usage*/,
	krb5_key_usage /*encrypt_usage*/);

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
_krb5_n_fold (
	const void */*str*/,
	size_t /*len*/,
	void */*key*/,
	size_t /*size*/);

krb5_error_code
_krb5_pac_sign (
	krb5_context /*context*/,
	krb5_pac /*p*/,
	time_t /*authtime*/,
	krb5_principal /*principal*/,
	const krb5_keyblock */*server_key*/,
	const krb5_keyblock */*priv_key*/,
	krb5_data */*data*/);

krb5_error_code
_krb5_parse_moduli (
	krb5_context /*context*/,
	const char */*file*/,
	struct krb5_dh_moduli ***/*moduli*/);

krb5_error_code
_krb5_parse_moduli_line (
	krb5_context /*context*/,
	const char */*file*/,
	int /*lineno*/,
	char */*p*/,
	struct krb5_dh_moduli **/*m*/);

KRB5_LIB_FUNCTION void KRB5_LIB_CALL
_krb5_pk_cert_free (struct krb5_pk_cert */*cert*/);

krb5_error_code
_krb5_pk_kdf (
	krb5_context /*context*/,
	const struct AlgorithmIdentifier */*ai*/,
	const void */*dhdata*/,
	size_t /*dhsize*/,
	krb5_const_principal /*client*/,
	krb5_const_principal /*server*/,
	krb5_enctype /*enctype*/,
	const krb5_data */*as_req*/,
	const krb5_data */*pk_as_rep*/,
	const Ticket */*ticket*/,
	krb5_keyblock */*key*/);

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
_krb5_pk_load_id (
	krb5_context /*context*/,
	struct krb5_pk_identity **/*ret_id*/,
	const char */*user_id*/,
	const char */*anchor_id*/,
	char * const */*chain_list*/,
	char * const */*revoke_list*/,
	krb5_prompter_fct /*prompter*/,
	void */*prompter_data*/,
	char */*password*/);

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
_krb5_pk_mk_ContentInfo (
	krb5_context /*context*/,
	const krb5_data */*buf*/,
	const heim_oid */*oid*/,
	struct ContentInfo */*content_info*/);

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
_krb5_pk_mk_padata (
	krb5_context /*context*/,
	void */*c*/,
	int /*ic_flags*/,
	int /*win2k*/,
	const KDC_REQ_BODY */*req_body*/,
	unsigned /*nonce*/,
	METHOD_DATA */*md*/);

krb5_error_code
_krb5_pk_octetstring2key (
	krb5_context /*context*/,
	krb5_enctype /*type*/,
	const void */*dhdata*/,
	size_t /*dhsize*/,
	const heim_octet_string */*c_n*/,
	const heim_octet_string */*k_n*/,
	krb5_keyblock */*key*/);

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
_krb5_pk_rd_pa_reply (
	krb5_context /*context*/,
	const char */*realm*/,
	void */*c*/,
	krb5_enctype /*etype*/,
	const krb5_krbhst_info */*hi*/,
	unsigned /*nonce*/,
	const krb5_data */*req_buffer*/,
	PA_DATA */*pa*/,
	krb5_keyblock **/*key*/);

krb5_error_code
_krb5_plugin_find (
	krb5_context /*context*/,
	enum krb5_plugin_type /*type*/,
	const char */*name*/,
	struct krb5_plugin **/*list*/);

void
_krb5_plugin_free (struct krb5_plugin */*list*/);

struct krb5_plugin *
_krb5_plugin_get_next (struct krb5_plugin */*p*/);

void *
_krb5_plugin_get_symbol (struct krb5_plugin */*p*/);

krb5_error_code
_krb5_plugin_run_f (
	krb5_context /*context*/,
	const char */*module*/,
	const char */*name*/,
	int /*min_version*/,
	int /*flags*/,
	void */*userctx*/,
	krb5_error_code (*/*func*/)(krb5_context, const void *, void *, void *));

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
_krb5_principal2principalname (
	PrincipalName */*p*/,
	const krb5_principal /*from*/);

KRB5_LIB_FUNCTION krb5_boolean KRB5_LIB_CALL
_krb5_principal_compare_PrincipalName (
	krb5_context /*context*/,
	krb5_const_principal /*princ1*/,
	PrincipalName */*princ2*/);

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
_krb5_principalname2krb5_principal (
	krb5_context /*context*/,
	krb5_principal */*principal*/,
	const PrincipalName /*from*/,
	const Realm /*realm*/);

KRB5_LIB_FUNCTION krb5_ssize_t KRB5_LIB_CALL
_krb5_put_int (
	void */*buffer*/,
	unsigned long /*value*/,
	size_t /*size*/);

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
_krb5_s4u2self_to_checksumdata (
	krb5_context /*context*/,
	const PA_S4U2Self */*self*/,
	krb5_data */*data*/);

int
_krb5_send_and_recv_tcp (
	krb5_socket_t /*fd*/,
	time_t /*tmout*/,
	const krb5_data */*req*/,
	krb5_data */*rep*/);

int
_krb5_set_default_cc_name_to_registry (
	krb5_context /*context*/,
	krb5_ccache /*id*/);

void
_krb5_unload_plugins (
	krb5_context /*context*/,
	const char */*name*/);

krb5_error_code
_krb5_usage2arcfour (
	krb5_context /*context*/,
	unsigned */*usage*/);

int
_krb5_xlock (
	krb5_context /*context*/,
	int /*fd*/,
	krb5_boolean /*exclusive*/,
	const char */*filename*/);

void
_krb5_xor (
	DES_cblock */*key*/,
	const unsigned char */*b*/);

int
_krb5_xunlock (
	krb5_context /*context*/,
	int /*fd*/);

#undef KRB5_DEPRECATED_FUNCTION
#define KRB5_DEPRECATED_FUNCTION(X)

#endif /* __krb5_private_h__ */
@


1.2
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@@


1.1
log
@Initial revision
@
text
@a4 1
#ifdef __STDC__
d6 3
a8 2
#ifndef __P
#define __P(x) x
d10 4
d15 1
a15 2
#ifndef __P
#define __P(x) ()
d19 7
d27 132
a158 1
_krb5_crc_init_table __P((void));
d160 63
a222 5
u_int32_t
_krb5_crc_update __P((
	const char *p,
	size_t len,
	u_int32_t res));
d225 367
a591 32
_krb5_extract_ticket __P((
	krb5_context context,
	krb5_kdc_rep *rep,
	krb5_creds *creds,
	krb5_keyblock *key,
	krb5_const_pointer keyseed,
	krb5_key_usage key_usage,
	krb5_addresses *addrs,
	unsigned nonce,
	krb5_boolean allow_server_mismatch,
	krb5_boolean ignore_cname,
	krb5_decrypt_proc decrypt_proc,
	krb5_const_pointer decryptarg));

ssize_t
_krb5_get_int __P((
	void *buffer,
	unsigned long *value,
	size_t size));

void
_krb5_n_fold __P((
	const void *str,
	size_t len,
	void *key,
	size_t size));

ssize_t
_krb5_put_int __P((
	void *buffer,
	unsigned long value,
	size_t size));
@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.6rc1
@
text
@d5 1
d7 8
d17 1
a17 10
_krb5_aes_cts_encrypt (
	const unsigned char */*in*/,
	unsigned char */*out*/,
	size_t /*len*/,
	const void */*aes_key*/,
	unsigned char */*ivec*/,
	const int /*enc*/);

void
_krb5_crc_init_table (void);
d20 4
a23 30
_krb5_crc_update (
	const char */*p*/,
	size_t /*len*/,
	u_int32_t /*res*/);

int
_krb5_extract_ticket (
	krb5_context /*context*/,
	krb5_kdc_rep */*rep*/,
	krb5_creds */*creds*/,
	krb5_keyblock */*key*/,
	krb5_const_pointer /*keyseed*/,
	krb5_key_usage /*key_usage*/,
	krb5_addresses */*addrs*/,
	unsigned /*nonce*/,
	krb5_boolean /*allow_server_mismatch*/,
	krb5_boolean /*ignore_cname*/,
	krb5_decrypt_proc /*decrypt_proc*/,
	krb5_const_pointer /*decryptarg*/);

krb5_ssize_t
_krb5_get_int (
	void */*buffer*/,
	unsigned long */*value*/,
	size_t /*size*/);

time_t
_krb5_krb_life_to_time (
	int /*start*/,
	int /*life_*/);
d26 19
a44 3
_krb5_krb_time_to_life (
	time_t /*start*/,
	time_t /*end*/);
d47 11
a57 11
_krb5_n_fold (
	const void */*str*/,
	size_t /*len*/,
	void */*key*/,
	size_t /*size*/);

krb5_ssize_t
_krb5_put_int (
	void */*buffer*/,
	unsigned long /*value*/,
	size_t /*size*/);
@


1.1.1.3
log
@Import of heimdal-0.6.3
@
text
@a45 7
krb5_error_code
_krb5_get_krbtgt (
	krb5_context /*context*/,
	krb5_ccache /*id*/,
	krb5_realm /*realm*/,
	krb5_creds **/*cred*/);

a67 26

krb5_error_code
_krb5_store_creds_heimdal_0_7 (
	krb5_storage */*sp*/,
	krb5_creds */*creds*/);

krb5_error_code
_krb5_store_creds_heimdal_pre_0_7 (
	krb5_storage */*sp*/,
	krb5_creds */*creds*/);

krb5_error_code
_krb5_store_creds_internal (
	krb5_storage */*sp*/,
	krb5_creds */*creds*/,
	int /*v0_6*/);

int
_krb5_xlock (
	krb5_context /*context*/,
	int /*fd*/,
	krb5_boolean /*exclusive*/,
	const char */*filename*/);

int
_krb5_xunlock (int /*fd*/);
@


1.1.1.4
log
@Import of heimdal-0.7.2
@
text
@d7 1
a7 19
#ifndef KRB5_LIB_FUNCTION
#if defined(_WIN32)
#define KRB5_LIB_FUNCTION _stdcall
#else
#define KRB5_LIB_FUNCTION
#endif
#endif

krb5_error_code KRB5_LIB_FUNCTION
_krb5_PKCS5_PBKDF2 (
	krb5_context /*context*/,
	krb5_cksumtype /*cktype*/,
	krb5_data /*password*/,
	krb5_salt /*salt*/,
	u_int32_t /*iter*/,
	krb5_keytype /*type*/,
	krb5_keyblock */*key*/);

void KRB5_LIB_FUNCTION
d14 1
a14 1
	const int /*encrypt*/);
a24 6
krb5_error_code
_krb5_expand_default_cc_name (
	krb5_context /*context*/,
	const char */*str*/,
	char **/*res*/);

d40 1
a40 22
krb5_error_code
_krb5_get_default_principal_local (
	krb5_context /*context*/,
	krb5_principal */*princ*/);

krb5_error_code KRB5_LIB_FUNCTION
_krb5_get_host_realm_int (
	krb5_context /*context*/,
	const char */*host*/,
	krb5_boolean /*use_dns*/,
	krb5_realm **/*realms*/);

krb5_error_code
_krb5_get_init_creds_opt_copy (
	krb5_context /*context*/,
	const krb5_get_init_creds_opt */*in*/,
	krb5_get_init_creds_opt **/*out*/);

void KRB5_LIB_FUNCTION
_krb5_get_init_creds_opt_free_pkinit (krb5_get_init_creds_opt */*opt*/);

krb5_ssize_t KRB5_LIB_FUNCTION
d53 1
a53 111
krb5_error_code
_krb5_kcm_chmod (
	krb5_context /*context*/,
	krb5_ccache /*id*/,
	u_int16_t /*mode*/);

krb5_error_code
_krb5_kcm_chown (
	krb5_context /*context*/,
	krb5_ccache /*id*/,
	u_int32_t /*uid*/,
	u_int32_t /*gid*/);

krb5_error_code
_krb5_kcm_get_initial_ticket (
	krb5_context /*context*/,
	krb5_ccache /*id*/,
	krb5_principal /*server*/,
	krb5_keyblock */*key*/);

krb5_error_code
_krb5_kcm_get_ticket (
	krb5_context /*context*/,
	krb5_ccache /*id*/,
	krb5_kdc_flags /*flags*/,
	krb5_enctype /*enctype*/,
	krb5_principal /*server*/);

krb5_boolean
_krb5_kcm_is_running (krb5_context /*context*/);

krb5_error_code
_krb5_kcm_noop (
	krb5_context /*context*/,
	krb5_ccache /*id*/);

krb5_error_code KRB5_LIB_FUNCTION
_krb5_krb_cr_err_reply (
	krb5_context /*context*/,
	const char */*name*/,
	const char */*inst*/,
	const char */*realm*/,
	u_int32_t /*time_ws*/,
	u_int32_t /*e*/,
	const char */*e_string*/,
	krb5_data */*data*/);

krb5_error_code KRB5_LIB_FUNCTION
_krb5_krb_create_auth_reply (
	krb5_context /*context*/,
	const char */*pname*/,
	const char */*pinst*/,
	const char */*prealm*/,
	int32_t /*time_ws*/,
	int /*n*/,
	u_int32_t /*x_date*/,
	unsigned char /*kvno*/,
	const krb5_data */*cipher*/,
	krb5_data */*data*/);

krb5_error_code KRB5_LIB_FUNCTION
_krb5_krb_create_ciph (
	krb5_context /*context*/,
	const krb5_keyblock */*session*/,
	const char */*service*/,
	const char */*instance*/,
	const char */*realm*/,
	u_int32_t /*life*/,
	unsigned char /*kvno*/,
	const krb5_data */*ticket*/,
	u_int32_t /*kdc_time*/,
	const krb5_keyblock */*key*/,
	krb5_data */*enc_data*/);

krb5_error_code KRB5_LIB_FUNCTION
_krb5_krb_create_ticket (
	krb5_context /*context*/,
	unsigned char /*flags*/,
	const char */*pname*/,
	const char */*pinstance*/,
	const char */*prealm*/,
	int32_t /*paddress*/,
	const krb5_keyblock */*session*/,
	int16_t /*life*/,
	int32_t /*life_sec*/,
	const char */*sname*/,
	const char */*sinstance*/,
	const krb5_keyblock */*key*/,
	krb5_data */*enc_data*/);

krb5_error_code KRB5_LIB_FUNCTION
_krb5_krb_decomp_ticket (
	krb5_context /*context*/,
	const krb5_data */*enc_ticket*/,
	const krb5_keyblock */*key*/,
	const char */*local_realm*/,
	char **/*sname*/,
	char **/*sinstance*/,
	struct _krb5_krb_auth_data */*ad*/);

krb5_error_code KRB5_LIB_FUNCTION
_krb5_krb_dest_tkt (
	krb5_context /*context*/,
	const char */*tkfile*/);

void KRB5_LIB_FUNCTION
_krb5_krb_free_auth_data (
	krb5_context /*context*/,
	struct _krb5_krb_auth_data */*ad*/);

time_t KRB5_LIB_FUNCTION
d58 1
a58 19
krb5_error_code KRB5_LIB_FUNCTION
_krb5_krb_rd_req (
	krb5_context /*context*/,
	krb5_data */*authent*/,
	const char */*service*/,
	const char */*instance*/,
	const char */*local_realm*/,
	int32_t /*from_addr*/,
	const krb5_keyblock */*key*/,
	struct _krb5_krb_auth_data */*ad*/);

krb5_error_code KRB5_LIB_FUNCTION
_krb5_krb_tf_setup (
	krb5_context /*context*/,
	struct credentials */*v4creds*/,
	const char */*tkfile*/,
	int /*append*/);

int KRB5_LIB_FUNCTION
d63 1
a63 12
krb5_error_code
_krb5_mk_req_internal (
	krb5_context /*context*/,
	krb5_auth_context */*auth_context*/,
	const krb5_flags /*ap_req_options*/,
	krb5_data */*in_data*/,
	krb5_creds */*in_creds*/,
	krb5_data */*outbuf*/,
	krb5_key_usage /*checksum_usage*/,
	krb5_key_usage /*encrypt_usage*/);

void KRB5_LIB_FUNCTION
d70 1
a70 73
krb5_error_code KRB5_LIB_FUNCTION
_krb5_oid_to_enctype (
	krb5_context /*context*/,
	const heim_oid */*oid*/,
	krb5_enctype */*etype*/);

void KRB5_LIB_FUNCTION
_krb5_pk_cert_free (struct krb5_pk_cert */*cert*/);

krb5_error_code KRB5_LIB_FUNCTION
_krb5_pk_create_sign (
	krb5_context /*context*/,
	const heim_oid */*eContentType*/,
	krb5_data */*eContent*/,
	struct krb5_pk_identity */*id*/,
	krb5_data */*sd_data*/);

krb5_error_code KRB5_LIB_FUNCTION
_krb5_pk_load_openssl_id (
	krb5_context /*context*/,
	struct krb5_pk_identity **/*ret_id*/,
	const char */*user_id*/,
	const char */*x509_anchors*/,
	krb5_prompter_fct /*prompter*/,
	void */*prompter_data*/,
	char */*password*/);

krb5_error_code KRB5_LIB_FUNCTION
_krb5_pk_mk_ContentInfo (
	krb5_context /*context*/,
	const krb5_data */*buf*/,
	const heim_oid */*oid*/,
	struct ContentInfo */*content_info*/);

krb5_error_code KRB5_LIB_FUNCTION
_krb5_pk_mk_padata (
	krb5_context /*context*/,
	void */*c*/,
	const KDC_REQ_BODY */*req_body*/,
	unsigned /*nonce*/,
	METHOD_DATA */*md*/);

krb5_error_code KRB5_LIB_FUNCTION
_krb5_pk_rd_pa_reply (
	krb5_context /*context*/,
	void */*c*/,
	krb5_enctype /*etype*/,
	unsigned /*nonce*/,
	PA_DATA */*pa*/,
	krb5_keyblock **/*key*/);

krb5_error_code KRB5_LIB_FUNCTION
_krb5_pk_verify_sign (
	krb5_context /*context*/,
	const char */*data*/,
	size_t /*length*/,
	struct krb5_pk_identity */*id*/,
	heim_oid */*contentType*/,
	krb5_data */*content*/,
	struct krb5_pk_cert **/*signer*/);

krb5_error_code KRB5_LIB_FUNCTION
_krb5_principal2principalname (
	PrincipalName */*p*/,
	const krb5_principal /*from*/);

krb5_error_code KRB5_LIB_FUNCTION
_krb5_principalname2krb5_principal (
	krb5_principal */*principal*/,
	const PrincipalName /*from*/,
	const Realm /*realm*/);

krb5_ssize_t KRB5_LIB_FUNCTION
d76 15
a90 6
int
_krb5_send_and_recv_tcp (
	int /*fd*/,
	time_t /*tmout*/,
	const krb5_data */*req*/,
	krb5_data */*rep*/);
d100 1
a100 3
_krb5_xunlock (
	krb5_context /*context*/,
	int /*fd*/);
@


