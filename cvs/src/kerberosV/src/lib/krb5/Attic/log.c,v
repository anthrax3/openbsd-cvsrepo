head	1.7;
access;
symbols
	OPENBSD_5_5:1.6.0.6
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.5.0.26
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.24
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.22
	OPENBSD_5_0:1.5.0.20
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.18
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.16
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.12
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.14
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.10
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.8
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.6
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.4
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.2
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.4.0.2
	OPENBSD_4_0_BASE:1.4
	HEIMDAL_0_7_2:1.1.1.4
	OPENBSD_3_9:1.3.0.12
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.10
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.8
	OPENBSD_3_7_BASE:1.3
	HEIMDAL_0_6_3:1.1.1.3
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	HEIMDAL_0_6:1.1.1.3
	HEIMDAL_0_6RC1:1.1.1.3
	OPENBSD_3_3:1.2.0.6
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.4
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	HEIMDAL_0_4e:1.1.1.2
	OPENBSD_3_0:1.1.1.2.0.2
	OPENBSD_3_0_BASE:1.1.1.2
	HEIMDAL_0_3f:1.1.1.2
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2014.04.22.10.01.32;	author reyk;	state dead;
branches;
next	1.6;

1.6
date	2013.06.17.18.57.44;	author robert;	state Exp;
branches;
next	1.5;

1.5
date	2006.10.06.07.09.10;	author biorn;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.14.08.15.04;	author biorn;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.11.03.40.00;	author hin;	state Exp;
branches;
next	1.2;

1.2
date	2001.10.24.08.16.42;	author jjbg;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.25.07.50.53;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.50.53;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.06.22.21.24.33;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.02.15.55;	author hin;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2006.04.14.07.33.27;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.7
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/*
 * Copyright (c) 1997-2006 Kungliga Tekniska HÃ¶gskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Portions Copyright (c) 2009 Apple Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "krb5_locl.h"
#include <vis.hin>

struct facility {
    int min;
    int max;
    krb5_log_log_func_t log_func;
    krb5_log_close_func_t close_func;
    void *data;
};

static struct facility*
log_realloc(krb5_log_facility *f)
{
    struct facility *fp;
    fp = realloc(f->val, (f->len + 1) * sizeof(*f->val));
    if(fp == NULL)
	return NULL;
    f->len++;
    f->val = fp;
    fp += f->len - 1;
    return fp;
}

struct s2i {
    const char *s;
    int val;
};

#define L(X) { #X, LOG_ ## X }

static struct s2i syslogvals[] = {
    L(EMERG),
    L(ALERT),
    L(CRIT),
    L(ERR),
    L(WARNING),
    L(NOTICE),
    L(INFO),
    L(DEBUG),

    L(AUTH),
#ifdef LOG_AUTHPRIV
    L(AUTHPRIV),
#endif
#ifdef LOG_CRON
    L(CRON),
#endif
    L(DAEMON),
#ifdef LOG_FTP
    L(FTP),
#endif
    L(KERN),
    L(LPR),
    L(MAIL),
#ifdef LOG_NEWS
    L(NEWS),
#endif
    L(SYSLOG),
    L(USER),
#ifdef LOG_UUCP
    L(UUCP),
#endif
    L(LOCAL0),
    L(LOCAL1),
    L(LOCAL2),
    L(LOCAL3),
    L(LOCAL4),
    L(LOCAL5),
    L(LOCAL6),
    L(LOCAL7),
    { NULL, -1 }
};

static int
find_value(const char *s, struct s2i *table)
{
    while(table->s && strcasecmp(table->s, s))
	table++;
    return table->val;
}

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
krb5_initlog(krb5_context context,
	     const char *program,
	     krb5_log_facility **fac)
{
    krb5_log_facility *f = calloc(1, sizeof(*f));
    if(f == NULL) {
	krb5_set_error_message(context, ENOMEM,
			       N_("malloc: out of memory", ""));
	return ENOMEM;
    }
    f->program = strdup(program);
    if(f->program == NULL){
	free(f);
	krb5_set_error_message(context, ENOMEM,
			       N_("malloc: out of memory", ""));
	return ENOMEM;
    }
    *fac = f;
    return 0;
}

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
krb5_addlog_func(krb5_context context,
		 krb5_log_facility *fac,
		 int min,
		 int max,
		 krb5_log_log_func_t log_func,
		 krb5_log_close_func_t close_func,
		 void *data)
{
    struct facility *fp = log_realloc(fac);
    if(fp == NULL) {
	krb5_set_error_message(context, ENOMEM,
			       N_("malloc: out of memory", ""));
	return ENOMEM;
    }
    fp->min = min;
    fp->max = max;
    fp->log_func = log_func;
    fp->close_func = close_func;
    fp->data = data;
    return 0;
}


struct _heimdal_syslog_data{
    int priority;
};

static void KRB5_CALLCONV
log_syslog(const char *timestr,
	   const char *msg,
	   void *data)

{
    struct _heimdal_syslog_data *s = data;
    syslog(s->priority, "%s", msg);
}

static void KRB5_CALLCONV
close_syslog(void *data)
{
    free(data);
    closelog();
}

static krb5_error_code
open_syslog(krb5_context context,
	    krb5_log_facility *facility, int min, int max,
	    const char *sev, const char *fac)
{
    struct _heimdal_syslog_data *sd = malloc(sizeof(*sd));
    int i;

    if(sd == NULL) {
	krb5_set_error_message(context, ENOMEM,
			       N_("malloc: out of memory", ""));
	return ENOMEM;
    }
    i = find_value(sev, syslogvals);
    if(i == -1)
	i = LOG_ERR;
    sd->priority = i;
    i = find_value(fac, syslogvals);
    if(i == -1)
	i = LOG_AUTH;
    sd->priority |= i;
    roken_openlog(facility->program, LOG_PID | LOG_NDELAY, i);
    return krb5_addlog_func(context, facility, min, max,
			    log_syslog, close_syslog, sd);
}

struct file_data{
    const char *filename;
    const char *mode;
    FILE *fd;
    int keep_open;
};

static void KRB5_CALLCONV
log_file(const char *timestr,
	 const char *msg,
	 void *data)
{
    struct file_data *f = data;
    char *msgclean;
    size_t len = strlen(msg);
    if(f->keep_open == 0)
	f->fd = fopen(f->filename, f->mode);
    if(f->fd == NULL)
	return;
    /* make sure the log doesn't contain special chars */
    msgclean = malloc((len + 1) * 4);
    if (msgclean == NULL)
	goto out;
    strvisx(msgclean, rk_UNCONST(msg), len, VIS_OCTAL);
    fprintf(f->fd, "%s %s\n", timestr, msgclean);
    free(msgclean);
 out:
    if(f->keep_open == 0) {
	fclose(f->fd);
	f->fd = NULL;
    }
}

static void KRB5_CALLCONV
close_file(void *data)
{
    struct file_data *f = data;
    if(f->keep_open && f->filename)
	fclose(f->fd);
    free(data);
}

static krb5_error_code
open_file(krb5_context context, krb5_log_facility *fac, int min, int max,
	  const char *filename, const char *mode, FILE *f, int keep_open)
{
    struct file_data *fd = malloc(sizeof(*fd));
    if(fd == NULL) {
	krb5_set_error_message(context, ENOMEM,
			       N_("malloc: out of memory", ""));
	return ENOMEM;
    }
    fd->filename = filename;
    fd->mode = mode;
    fd->fd = f;
    fd->keep_open = keep_open;

    return krb5_addlog_func(context, fac, min, max, log_file, close_file, fd);
}



KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
krb5_addlog_dest(krb5_context context, krb5_log_facility *f, const char *orig)
{
    krb5_error_code ret = 0;
    int min = 0, max = -1, n;
    char c;
    const char *p = orig;

    n = sscanf(p, "%d%c%d/", &min, &c, &max);
    if(n == 2){
	if(c == '/') {
	    if(min < 0){
		max = -min;
		min = 0;
	    }else{
		max = min;
	    }
	}
    }
    if(n){
	p = strchr(p, '/');
	if(p == NULL) {
	    krb5_set_error_message(context, HEIM_ERR_LOG_PARSE,
				   N_("failed to parse \"%s\"", ""), orig);
	    return HEIM_ERR_LOG_PARSE;
	}
	p++;
    }
    if(strcmp(p, "STDERR") == 0){
	ret = open_file(context, f, min, max, NULL, NULL, stderr, 1);
    }else if(strcmp(p, "CONSOLE") == 0){
	ret = open_file(context, f, min, max, "/dev/console", "w", NULL, 0);
    }else if(strncmp(p, "FILE", 4) == 0 && (p[4] == ':' || p[4] == '=')){
	char *fn;
	FILE *file = NULL;
	int keep_open = 0;
	fn = strdup(p + 5);
	if(fn == NULL) {
	    krb5_set_error_message(context, ENOMEM,
				   N_("malloc: out of memory", ""));
	    return ENOMEM;
	}
	if(p[4] == '='){
	    int i = open(fn, O_WRONLY | O_CREAT |
			 O_TRUNC | O_APPEND, 0666);
	    if(i < 0) {
		ret = errno;
		krb5_set_error_message(context, ret,
				       N_("open(%s) logile: %s", ""), fn,
				       strerror(ret));
		free(fn);
		return ret;
	    }
	    rk_cloexec(i);
	    file = fdopen(i, "a");
	    if(file == NULL){
		ret = errno;
		close(i);
		krb5_set_error_message(context, ret,
				       N_("fdopen(%s) logfile: %s", ""),
				       fn, strerror(ret));
		free(fn);
		return ret;
	    }
	    keep_open = 1;
	}
	ret = open_file(context, f, min, max, fn, "a", file, keep_open);
    }else if(strncmp(p, "DEVICE", 6) == 0 && (p[6] == ':' || p[6] == '=')){
	ret = open_file(context, f, min, max, strdup(p + 7), "w", NULL, 0);
    }else if(strncmp(p, "SYSLOG", 6) == 0 && (p[6] == '\0' || p[6] == ':')){
	char severity[128] = "";
	char facility[128] = "";
	p += 6;
	if(*p != '\0')
	    p++;
	if(strsep_copy(&p, ":", severity, sizeof(severity)) != -1)
	    strsep_copy(&p, ":", facility, sizeof(facility));
	if(*severity == '\0')
	    strlcpy(severity, "ERR", sizeof(severity));
 	if(*facility == '\0')
	    strlcpy(facility, "AUTH", sizeof(facility));
	ret = open_syslog(context, f, min, max, severity, facility);
    }else{
	ret = HEIM_ERR_LOG_PARSE; /* XXX */
	krb5_set_error_message (context, ret,
				N_("unknown log type: %s", ""), p);
    }
    return ret;
}


KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
krb5_openlog(krb5_context context,
	     const char *program,
	     krb5_log_facility **fac)
{
    krb5_error_code ret;
    char **p, **q;

    ret = krb5_initlog(context, program, fac);
    if(ret)
	return ret;

    p = krb5_config_get_strings(context, NULL, "logging", program, NULL);
    if(p == NULL)
	p = krb5_config_get_strings(context, NULL, "logging", "default", NULL);
    if(p){
	for(q = p; *q && ret == 0; q++)
	    ret = krb5_addlog_dest(context, *fac, *q);
	krb5_config_free_strings(p);
    }else
	ret = krb5_addlog_dest(context, *fac, "SYSLOG");
    return ret;
}

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
krb5_closelog(krb5_context context,
	      krb5_log_facility *fac)
{
    int i;
    for(i = 0; i < fac->len; i++)
	(*fac->val[i].close_func)(fac->val[i].data);
    free(fac->val);
    free(fac->program);
    fac->val = NULL;
    fac->len = 0;
    fac->program = NULL;
    free(fac);
    return 0;
}

#undef __attribute__
#define __attribute__(X)

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
krb5_vlog_msg(krb5_context context,
	      krb5_log_facility *fac,
	      char **reply,
	      int level,
	      const char *fmt,
	      va_list ap)
     __attribute__((format (printf, 5, 0)))
{

    char *msg = NULL;
    const char *actual = NULL;
    char buf[64];
    time_t t = 0;
    int i;

    for(i = 0; fac && i < fac->len; i++)
	if(fac->val[i].min <= level &&
	   (fac->val[i].max < 0 || fac->val[i].max >= level)) {
	    if(t == 0) {
		t = time(NULL);
		krb5_format_time(context, t, buf, sizeof(buf), TRUE);
	    }
	    if(actual == NULL) {
		int ret = vasprintf(&msg, fmt, ap);
		if(ret < 0 || msg == NULL)
		    actual = fmt;
		else
		    actual = msg;
	    }
	    (*fac->val[i].log_func)(buf, actual, fac->val[i].data);
	}
    if(reply == NULL)
	free(msg);
    else
	*reply = msg;
    return 0;
}

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
krb5_vlog(krb5_context context,
	  krb5_log_facility *fac,
	  int level,
	  const char *fmt,
	  va_list ap)
     __attribute__((format (printf, 4, 0)))
{
    return krb5_vlog_msg(context, fac, NULL, level, fmt, ap);
}

KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
krb5_log_msg(krb5_context context,
	     krb5_log_facility *fac,
	     int level,
	     char **reply,
	     const char *fmt,
	     ...)
     __attribute__((format (printf, 5, 6)))
{
    va_list ap;
    krb5_error_code ret;

    va_start(ap, fmt);
    ret = krb5_vlog_msg(context, fac, reply, level, fmt, ap);
    va_end(ap);
    return ret;
}


KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL
krb5_log(krb5_context context,
	 krb5_log_facility *fac,
	 int level,
	 const char *fmt,
	 ...)
     __attribute__((format (printf, 4, 5)))
{
    va_list ap;
    krb5_error_code ret;

    va_start(ap, fmt);
    ret = krb5_vlog(context, fac, level, fmt, ap);
    va_end(ap);
    return ret;
}

void KRB5_LIB_FUNCTION
_krb5_debug(krb5_context context,
	    int level,
	    const char *fmt,
	    ...)
    __attribute__((format (printf, 3, 4)))
{
    va_list ap;

    if (context == NULL || context->debug_dest == NULL)
	return;

    va_start(ap, fmt);
    krb5_vlog(context, context->debug_dest, level, fmt, ap);
    va_end(ap);
}

krb5_boolean KRB5_LIB_FUNCTION
_krb5_have_debug(krb5_context context, int level)
{
    if (context == NULL || context->debug_dest == NULL)
	return 0 ;
    return 1;
}
@


1.6
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@@


1.5
log
@Coverity fixes backported from the heimdal cvs.

ok beck@@, No problem deraadt@@
@
text
@d2 3
a4 3
 * Copyright (c) 1997-2002 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
d6 1
a6 3
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
d8 3
a10 2
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
d12 2
a13 3
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
d15 3
a17 3
 * 3. Neither the name of the Institute nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission. 
d19 15
a33 11
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE. 
d37 1
a37 2

RCSID("$KTH: log.c,v 1.34 2005/06/11 00:14:28 lha Exp $");
d42 2
a43 2
    krb5_log_log_func_t log;
    krb5_log_close_func_t close;
d118 1
a118 1
krb5_error_code KRB5_LIB_FUNCTION
d125 2
a126 1
	krb5_set_error_string (context, "malloc: out of memory");
d132 2
a133 1
	krb5_set_error_string (context, "malloc: out of memory");
d140 1
a140 1
krb5_error_code KRB5_LIB_FUNCTION
d145 2
a146 2
		 krb5_log_log_func_t log,
		 krb5_log_close_func_t close,
d151 2
a152 1
	krb5_set_error_string (context, "malloc: out of memory");
d157 2
a158 2
    fp->log = log;
    fp->close = close;
a162 1
/* Avoid conflict with syslog_data in syslog.h, rename to syslog_d */
d168 2
a169 2
static void
log_syslog(const char *time,
d172 1
a172 1
     
d178 1
a178 1
static void
d194 2
a195 1
	krb5_set_error_string (context, "malloc: out of memory");
d218 2
a219 2
static void
log_file(const char *time,
d224 2
d230 9
a238 2
    fprintf(f->fd, "%s %s\n", time, msg);
    if(f->keep_open == 0)
d240 2
d244 1
a244 1
static void
d259 2
a260 1
	krb5_set_error_string (context, "malloc: out of memory");
d273 1
a273 1
krb5_error_code KRB5_LIB_FUNCTION
d295 2
a296 1
	    krb5_set_error_string (context, "failed to parse \"%s\"", orig);
d305 1
a305 1
    }else if(strncmp(p, "FILE:", 4) == 0 && (p[4] == ':' || p[4] == '=')){
d311 2
a312 1
	    krb5_set_error_string (context, "malloc: out of memory");
d316 1
a316 1
	    int i = open(fn, O_WRONLY | O_CREAT | 
d320 2
a321 1
		krb5_set_error_string (context, "open(%s): %s", fn,
d326 1
d331 3
a333 2
		krb5_set_error_string (context, "fdopen(%s): %s", fn,
				       strerror(ret));
d340 1
a340 1
    }else if(strncmp(p, "DEVICE=", 6) == 0){
a355 1
	krb5_set_error_string (context, "unknown log type: %s", p);
d357 2
d364 1
a364 1
krb5_error_code KRB5_LIB_FUNCTION
d380 1
a380 1
	for(q = p; *q; q++)
d385 1
a385 1
    return 0;
d388 1
a388 1
krb5_error_code KRB5_LIB_FUNCTION
d394 1
a394 1
	(*fac->val[i].close)(fac->val[i].data);
d407 1
a407 1
krb5_error_code KRB5_LIB_FUNCTION
d416 1
a416 1
    
d424 1
a424 1
	if(fac->val[i].min <= level && 
d431 2
a432 2
		vasprintf(&msg, fmt, ap);
		if(msg == NULL)
d437 1
a437 1
	    (*fac->val[i].log)(buf, actual, fac->val[i].data);
d446 1
a446 1
krb5_error_code KRB5_LIB_FUNCTION
d457 1
a457 1
krb5_error_code KRB5_LIB_FUNCTION
d476 1
a476 1
krb5_error_code KRB5_LIB_FUNCTION
d493 24
@


1.4
log
@Merge of heimdal 0.7.2
Tested by todd & beck, ok beck.
@
text
@d304 1
d313 1
@


1.3
log
@Merge 0.6rc1
@
text
@d36 1
a36 1
RCSID("$KTH: log.c,v 1.31 2002/09/05 14:59:14 joda Exp $");
d50 1
a50 2
    f->len++;
    fp = realloc(f->val, f->len * sizeof(*f->val));
d53 1
d117 1
a117 1
krb5_error_code
d137 1
a137 1
krb5_error_code
d257 1
a257 1
krb5_error_code
d340 1
a340 1
krb5_error_code
d364 1
a364 1
krb5_error_code
d371 6
d383 1
a383 1
krb5_error_code
d422 1
a422 1
krb5_error_code
d433 1
a433 1
krb5_error_code
d452 1
a452 1
krb5_error_code
@


1.2
log
@syslog_r() implementation. deraadt@@ ok.
@
text
@d2 1
a2 1
 * Copyright (c) 1997-2000 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: log.c,v 1.26 2001/05/14 06:14:49 assar Exp $");
d60 1
a60 1
    char *s;
d161 1
a161 1
struct syslog_d{
d171 1
a171 1
    struct syslog_d *s = data;
d187 1
a187 1
    struct syslog_d *sd = malloc(sizeof(*sd));
d208 2
a209 2
    char *filename;
    char *mode;
d240 1
a240 1
	  char *filename, char *mode, FILE *f, int keep_open)
d319 12
a330 9
    }else if(strncmp(p, "SYSLOG", 6) == 0){
	char *severity;
	char *facility;
	severity = strchr(p, ':');
	if(severity == NULL)
	    severity = "ERR";
	facility = strchr(severity, ':');
	if(facility == NULL)
	    facility = "AUTH";
d370 1
a370 1
	(*fac->val[i].close)(&fac->val[i].data);
d386 3
a388 2
    char *msg;
    const char *actual;
d390 1
a390 1
    time_t t;
d393 1
a393 8
    vasprintf(&msg, fmt, ap);
    if (msg != NULL)
	actual = msg;
    else
	actual = fmt;
    t = time(NULL);
    krb5_format_time(context, t, buf, sizeof(buf), TRUE);
    for(i = 0; i < fac->len; i++)
d395 12
a406 1
	   (fac->val[i].max < 0 || fac->val[i].max >= level))
d408 5
a412 1
    *reply = msg;
d424 1
a424 6
    char *msg;
    krb5_error_code ret;

    ret = krb5_vlog_msg(context, fac, &msg, level, fmt, ap);
    free(msg);
    return ret;
@


1.1
log
@Initial revision
@
text
@d36 1
a36 1
RCSID("$KTH: log.c,v 1.25 2000/09/17 21:46:07 assar Exp $");
d123 2
a124 1
    if(f == NULL)
d126 1
d130 1
d147 2
a148 1
    if(fp == NULL)
d150 1
d159 1
d161 1
a161 1
struct syslog_data{
d171 1
a171 1
    struct syslog_data *s = data;
d187 1
a187 1
    struct syslog_data *sd = malloc(sizeof(*sd));
d190 2
a191 1
    if(sd == NULL)
d193 1
d243 2
a244 1
    if(fd == NULL)
d246 1
d258 1
a258 1
krb5_addlog_dest(krb5_context context, krb5_log_facility *f, const char *p)
d263 2
d278 4
a281 1
	if(p == NULL) return HEIM_ERR_LOG_PARSE;
d293 2
a294 1
	if(fn == NULL)
d296 1
d300 6
a305 2
	    if(i < 0)
		return errno;
d308 1
d310 3
a312 1
		return errno;
d330 1
@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.3f

Lots of changes, highlights include:

 * change default keytab to ANY:FILE:/etc/krb5.keytab,krb4:/etc/srvtab,
   the new keytab type that tries both of these in order (SRVTAB is
   also an alias for krb4:)

 * improve error reporting and error handling (error messages should
   be more detailed and more useful)

 * the API is closer to what MIT krb5 is using

 * more compatible with windows 2000

 * removed some memory leaks

 * bug fixes
@
text
@d36 1
a36 1
RCSID("$KTH: log.c,v 1.26 2001/05/14 06:14:49 assar Exp $");
d123 1
a123 2
    if(f == NULL) {
	krb5_set_error_string (context, "malloc: out of memory");
a124 1
    }
a127 1
	krb5_set_error_string (context, "malloc: out of memory");
d144 1
a144 2
    if(fp == NULL) {
	krb5_set_error_string (context, "malloc: out of memory");
a145 1
    }
d184 1
a184 2
    if(sd == NULL) {
	krb5_set_error_string (context, "malloc: out of memory");
a185 1
    }
d235 1
a235 2
    if(fd == NULL) {
	krb5_set_error_string (context, "malloc: out of memory");
a236 1
    }
d248 1
a248 1
krb5_addlog_dest(krb5_context context, krb5_log_facility *f, const char *orig)
a252 2
    const char *p = orig;

d266 1
a266 4
	if(p == NULL) {
	    krb5_set_error_string (context, "failed to parse \"%s\"", orig);
	    return HEIM_ERR_LOG_PARSE;
	}
d278 1
a278 2
	if(fn == NULL) {
	    krb5_set_error_string (context, "malloc: out of memory");
a279 1
	}
d283 2
a284 6
	    if(i < 0) {
		ret = errno;
		krb5_set_error_string (context, "open(%s): %s", fn,
				       strerror(ret));
		return ret;
	    }
a286 1
		ret = errno;
d288 1
a288 3
		krb5_set_error_string (context, "fdopen(%s): %s", fn,
				       strerror(ret));
		return ret;
a305 1
	krb5_set_error_string (context, "unknown log type: %s", p);
@


1.1.1.3
log
@Import of heimdal-0.6rc1
@
text
@d2 1
a2 1
 * Copyright (c) 1997-2002 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: log.c,v 1.31 2002/09/05 14:59:14 joda Exp $");
d60 1
a60 1
    const char *s;
d160 1
a160 1
struct _heimdal_syslog_data{
d170 1
a170 1
    struct _heimdal_syslog_data *s = data;
d186 1
a186 1
    struct _heimdal_syslog_data *sd = malloc(sizeof(*sd));
d207 2
a208 2
    const char *filename;
    const char *mode;
d239 1
a239 1
	  const char *filename, const char *mode, FILE *f, int keep_open)
d318 9
a326 12
    }else if(strncmp(p, "SYSLOG", 6) == 0 && (p[6] == '\0' || p[6] == ':')){
	char severity[128] = "";
	char facility[128] = "";
	p += 6;
	if(*p != '\0')
	    p++;
	if(strsep_copy(&p, ":", severity, sizeof(severity)) != -1)
	    strsep_copy(&p, ":", facility, sizeof(facility));
	if(*severity == '\0')
	    strlcpy(severity, "ERR", sizeof(severity));
 	if(*facility == '\0')
	    strlcpy(facility, "AUTH", sizeof(facility));
d366 1
a366 1
	(*fac->val[i].close)(fac->val[i].data);
d382 2
a383 3
    
    char *msg = NULL;
    const char *actual = NULL;
d385 1
a385 1
    time_t t = 0;
d388 8
a395 1
    for(i = 0; fac && i < fac->len; i++)
d397 1
a397 12
	   (fac->val[i].max < 0 || fac->val[i].max >= level)) {
	    if(t == 0) {
		t = time(NULL);
		krb5_format_time(context, t, buf, sizeof(buf), TRUE);
	    }
	    if(actual == NULL) {
		vasprintf(&msg, fmt, ap);
		if(msg == NULL)
		    actual = fmt;
		else
		    actual = msg;
	    }
d399 1
a399 5
	}
    if(reply == NULL)
	free(msg);
    else
	*reply = msg;
d411 6
a416 1
    return krb5_vlog_msg(context, fac, NULL, level, fmt, ap);
@


1.1.1.4
log
@Import of heimdal-0.7.2
@
text
@d36 1
a36 1
RCSID("$KTH: log.c,v 1.34 2005/06/11 00:14:28 lha Exp $");
d50 2
a51 1
    fp = realloc(f->val, (f->len + 1) * sizeof(*f->val));
a53 1
    f->len++;
d117 1
a117 1
krb5_error_code KRB5_LIB_FUNCTION
d137 1
a137 1
krb5_error_code KRB5_LIB_FUNCTION
d256 1
a256 1
krb5_error_code KRB5_LIB_FUNCTION
d339 1
a339 1
krb5_error_code KRB5_LIB_FUNCTION
d363 1
a363 1
krb5_error_code KRB5_LIB_FUNCTION
a369 6
    free(fac->val);
    free(fac->program);
    fac->val = NULL;
    fac->len = 0;
    fac->program = NULL;
    free(fac);
d376 1
a376 1
krb5_error_code KRB5_LIB_FUNCTION
d415 1
a415 1
krb5_error_code KRB5_LIB_FUNCTION
d426 1
a426 1
krb5_error_code KRB5_LIB_FUNCTION
d445 1
a445 1
krb5_error_code KRB5_LIB_FUNCTION
@


