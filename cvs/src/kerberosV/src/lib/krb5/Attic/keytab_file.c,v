head	1.4;
access;
symbols
	OPENBSD_5_5:1.3.0.6
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.2
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.2.0.26
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.24
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.22
	OPENBSD_5_0:1.2.0.20
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.18
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.16
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.12
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.14
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.10
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.8
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.6
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.4
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.2
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.1.1.4.0.2
	OPENBSD_4_0_BASE:1.1.1.4
	HEIMDAL_0_7_2:1.1.1.4
	OPENBSD_3_9:1.1.1.3.0.12
	OPENBSD_3_9_BASE:1.1.1.3
	OPENBSD_3_8:1.1.1.3.0.10
	OPENBSD_3_8_BASE:1.1.1.3
	OPENBSD_3_7:1.1.1.3.0.8
	OPENBSD_3_7_BASE:1.1.1.3
	HEIMDAL_0_6_3:1.1.1.3
	OPENBSD_3_6:1.1.1.3.0.6
	OPENBSD_3_6_BASE:1.1.1.3
	OPENBSD_3_5:1.1.1.3.0.4
	OPENBSD_3_5_BASE:1.1.1.3
	OPENBSD_3_4:1.1.1.3.0.2
	OPENBSD_3_4_BASE:1.1.1.3
	HEIMDAL_0_6:1.1.1.3
	HEIMDAL_0_6RC1:1.1.1.3
	OPENBSD_3_3:1.1.1.2.0.8
	OPENBSD_3_3_BASE:1.1.1.2
	OPENBSD_3_2:1.1.1.2.0.6
	OPENBSD_3_2_BASE:1.1.1.2
	OPENBSD_3_1:1.1.1.2.0.4
	OPENBSD_3_1_BASE:1.1.1.2
	HEIMDAL_0_4e:1.1.1.2
	OPENBSD_3_0:1.1.1.2.0.2
	OPENBSD_3_0_BASE:1.1.1.2
	HEIMDAL_0_3f:1.1.1.2
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2014.04.22.10.01.31;	author reyk;	state dead;
branches;
next	1.3;

1.3
date	2013.06.17.18.57.44;	author robert;	state Exp;
branches;
next	1.2;

1.2
date	2006.10.06.07.09.10;	author biorn;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.25.07.50.48;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.50.48;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.06.22.21.24.18;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.02.15.53;	author hin;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2006.04.14.07.33.21;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.4
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/*
 * Copyright (c) 1997 - 2008 Kungliga Tekniska HÃ¶gskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "krb5_locl.h"

#define KRB5_KT_VNO_1 1
#define KRB5_KT_VNO_2 2
#define KRB5_KT_VNO   KRB5_KT_VNO_2

#define KRB5_KT_FL_JAVA 1


/* file operations -------------------------------------------- */

struct fkt_data {
    char *filename;
    int flags;
};

static krb5_error_code
krb5_kt_ret_data(krb5_context context,
		 krb5_storage *sp,
		 krb5_data *data)
{
    int ret;
    int16_t size;
    ret = krb5_ret_int16(sp, &size);
    if(ret)
	return ret;
    data->length = size;
    data->data = malloc(size);
    if (data->data == NULL) {
	krb5_set_error_message(context, ENOMEM, N_("malloc: out of memory", ""));
	return ENOMEM;
    }
    ret = krb5_storage_read(sp, data->data, size);
    if(ret != size)
	return (ret < 0)? errno : KRB5_KT_END;
    return 0;
}

static krb5_error_code
krb5_kt_ret_string(krb5_context context,
		   krb5_storage *sp,
		   heim_general_string *data)
{
    int ret;
    int16_t size;
    ret = krb5_ret_int16(sp, &size);
    if(ret)
	return ret;
    *data = malloc(size + 1);
    if (*data == NULL) {
	krb5_set_error_message(context, ENOMEM, N_("malloc: out of memory", ""));
	return ENOMEM;
    }
    ret = krb5_storage_read(sp, *data, size);
    (*data)[size] = '\0';
    if(ret != size)
	return (ret < 0)? errno : KRB5_KT_END;
    return 0;
}

static krb5_error_code
krb5_kt_store_data(krb5_context context,
		   krb5_storage *sp,
		   krb5_data data)
{
    int ret;
    ret = krb5_store_int16(sp, data.length);
    if(ret < 0)
	return ret;
    ret = krb5_storage_write(sp, data.data, data.length);
    if(ret != (int)data.length){
	if(ret < 0)
	    return errno;
	return KRB5_KT_END;
    }
    return 0;
}

static krb5_error_code
krb5_kt_store_string(krb5_storage *sp,
		     heim_general_string data)
{
    int ret;
    size_t len = strlen(data);
    ret = krb5_store_int16(sp, len);
    if(ret < 0)
	return ret;
    ret = krb5_storage_write(sp, data, len);
    if(ret != (int)len){
	if(ret < 0)
	    return errno;
	return KRB5_KT_END;
    }
    return 0;
}

static krb5_error_code
krb5_kt_ret_keyblock(krb5_context context,
		     struct fkt_data *fkt,
		     krb5_storage *sp,
		     krb5_keyblock *p)
{
    int ret;
    int16_t tmp;

    ret = krb5_ret_int16(sp, &tmp); /* keytype + etype */
    if(ret)  {
	krb5_set_error_message(context, ret,
			       N_("Cant read keyblock from file %s", ""),
			       fkt->filename);
	return ret;
    }
    p->keytype = tmp;
    ret = krb5_kt_ret_data(context, sp, &p->keyvalue);
    if (ret)
	krb5_set_error_message(context, ret,
			       N_("Cant read keyblock from file %s", ""),
			       fkt->filename);
    return ret;
}

static krb5_error_code
krb5_kt_store_keyblock(krb5_context context,
		       struct fkt_data *fkt,
		       krb5_storage *sp,
		       krb5_keyblock *p)
{
    int ret;

    ret = krb5_store_int16(sp, p->keytype); /* keytype + etype */
    if(ret) {
	krb5_set_error_message(context, ret,
			       N_("Cant store keyblock to file %s", ""),
			       fkt->filename);
	return ret;
    }
    ret = krb5_kt_store_data(context, sp, p->keyvalue);
    if (ret)
	krb5_set_error_message(context, ret,
			       N_("Cant store keyblock to file %s", ""),
			       fkt->filename);
    return ret;
}


static krb5_error_code
krb5_kt_ret_principal(krb5_context context,
		      struct fkt_data *fkt,
		      krb5_storage *sp,
		      krb5_principal *princ)
{
    size_t i;
    int ret;
    krb5_principal p;
    int16_t len;

    ALLOC(p, 1);
    if(p == NULL) {
	krb5_set_error_message(context, ENOMEM,
			       N_("malloc: out of memory", ""));
	return ENOMEM;
    }

    ret = krb5_ret_int16(sp, &len);
    if(ret) {
	krb5_set_error_message(context, ret,
			       N_("Failed decoding length of "
				  "keytab principal in keytab file %s", ""),
			       fkt->filename);
	goto out;
    }
    if(krb5_storage_is_flags(sp, KRB5_STORAGE_PRINCIPAL_WRONG_NUM_COMPONENTS))
	len--;
    if (len < 0) {
	ret = KRB5_KT_END;
	krb5_set_error_message(context, ret,
			       N_("Keytab principal contains "
				  "invalid length in keytab %s", ""),
			       fkt->filename);
	goto out;
    }
    ret = krb5_kt_ret_string(context, sp, &p->realm);
    if(ret) {
	krb5_set_error_message(context, ret,
			       N_("Can't read realm from keytab: %s", ""),
			       fkt->filename);
	goto out;
    }
    p->name.name_string.val = calloc(len, sizeof(*p->name.name_string.val));
    if(p->name.name_string.val == NULL) {
	ret = ENOMEM;
	krb5_set_error_message(context, ret, N_("malloc: out of memory", ""));
	goto out;
    }
    p->name.name_string.len = len;
    for(i = 0; i < p->name.name_string.len; i++){
	ret = krb5_kt_ret_string(context, sp, p->name.name_string.val + i);
	if(ret) {
	    krb5_set_error_message(context, ret,
				   N_("Can't read principal from "
				      "keytab: %s", ""),
				   fkt->filename);
	    goto out;
	}
    }
    if (krb5_storage_is_flags(sp, KRB5_STORAGE_PRINCIPAL_NO_NAME_TYPE))
	p->name.name_type = KRB5_NT_UNKNOWN;
    else {
	int32_t tmp32;
	ret = krb5_ret_int32(sp, &tmp32);
	p->name.name_type = tmp32;
	if (ret) {
	    krb5_set_error_message(context, ret,
				   N_("Can't read name-type from "
				      "keytab: %s", ""),
				   fkt->filename);
	    goto out;
	}
    }
    *princ = p;
    return 0;
out:
    krb5_free_principal(context, p);
    return ret;
}

static krb5_error_code
krb5_kt_store_principal(krb5_context context,
			krb5_storage *sp,
			krb5_principal p)
{
    size_t i;
    int ret;

    if(krb5_storage_is_flags(sp, KRB5_STORAGE_PRINCIPAL_WRONG_NUM_COMPONENTS))
	ret = krb5_store_int16(sp, p->name.name_string.len + 1);
    else
	ret = krb5_store_int16(sp, p->name.name_string.len);
    if(ret) return ret;
    ret = krb5_kt_store_string(sp, p->realm);
    if(ret) return ret;
    for(i = 0; i < p->name.name_string.len; i++){
	ret = krb5_kt_store_string(sp, p->name.name_string.val[i]);
	if(ret)
	    return ret;
    }
    if(!krb5_storage_is_flags(sp, KRB5_STORAGE_PRINCIPAL_NO_NAME_TYPE)) {
	ret = krb5_store_int32(sp, p->name.name_type);
	if(ret)
	    return ret;
    }

    return 0;
}

static krb5_error_code KRB5_CALLCONV
fkt_resolve(krb5_context context, const char *name, krb5_keytab id)
{
    struct fkt_data *d;

    d = malloc(sizeof(*d));
    if(d == NULL) {
	krb5_set_error_message(context, ENOMEM, N_("malloc: out of memory", ""));
	return ENOMEM;
    }
    d->filename = strdup(name);
    if(d->filename == NULL) {
	free(d);
	krb5_set_error_message(context, ENOMEM, N_("malloc: out of memory", ""));
	return ENOMEM;
    }
    d->flags = 0;
    id->data = d;
    return 0;
}

static krb5_error_code KRB5_CALLCONV
fkt_resolve_java14(krb5_context context, const char *name, krb5_keytab id)
{
    krb5_error_code ret;

    ret = fkt_resolve(context, name, id);
    if (ret == 0) {
	struct fkt_data *d = id->data;
	d->flags |= KRB5_KT_FL_JAVA;
    }
    return ret;
}

static krb5_error_code KRB5_CALLCONV
fkt_close(krb5_context context, krb5_keytab id)
{
    struct fkt_data *d = id->data;
    free(d->filename);
    free(d);
    return 0;
}

static krb5_error_code KRB5_CALLCONV
fkt_destroy(krb5_context context, krb5_keytab id)
{
    struct fkt_data *d = id->data;
    _krb5_erase_file(context, d->filename);
    return 0;
}

static krb5_error_code KRB5_CALLCONV
fkt_get_name(krb5_context context,
	     krb5_keytab id,
	     char *name,
	     size_t namesize)
{
    /* This function is XXX */
    struct fkt_data *d = id->data;
    strlcpy(name, d->filename, namesize);
    return 0;
}

static void
storage_set_flags(krb5_context context, krb5_storage *sp, int vno)
{
    int flags = 0;
    switch(vno) {
    case KRB5_KT_VNO_1:
	flags |= KRB5_STORAGE_PRINCIPAL_WRONG_NUM_COMPONENTS;
	flags |= KRB5_STORAGE_PRINCIPAL_NO_NAME_TYPE;
	flags |= KRB5_STORAGE_HOST_BYTEORDER;
	break;
    case KRB5_KT_VNO_2:
	break;
    default:
	krb5_warnx(context,
		   "storage_set_flags called with bad vno (%d)", vno);
    }
    krb5_storage_set_flags(sp, flags);
}

static krb5_error_code
fkt_start_seq_get_int(krb5_context context,
		      krb5_keytab id,
		      int flags,
		      int exclusive,
		      krb5_kt_cursor *c)
{
    int8_t pvno, tag;
    krb5_error_code ret;
    struct fkt_data *d = id->data;

    c->fd = open (d->filename, flags);
    if (c->fd < 0) {
	ret = errno;
	krb5_set_error_message(context, ret,
			       N_("keytab %s open failed: %s", ""),
			       d->filename, strerror(ret));
	return ret;
    }
    rk_cloexec(c->fd);
    ret = _krb5_xlock(context, c->fd, exclusive, d->filename);
    if (ret) {
	close(c->fd);
	return ret;
    }
    c->sp = krb5_storage_from_fd(c->fd);
    if (c->sp == NULL) {
	_krb5_xunlock(context, c->fd);
	close(c->fd);
	krb5_set_error_message(context, ENOMEM,
			       N_("malloc: out of memory", ""));
	return ENOMEM;
    }
    krb5_storage_set_eof_code(c->sp, KRB5_KT_END);
    ret = krb5_ret_int8(c->sp, &pvno);
    if(ret) {
	krb5_storage_free(c->sp);
	_krb5_xunlock(context, c->fd);
	close(c->fd);
	krb5_clear_error_message(context);
	return ret;
    }
    if(pvno != 5) {
	krb5_storage_free(c->sp);
	_krb5_xunlock(context, c->fd);
	close(c->fd);
	krb5_clear_error_message (context);
	return KRB5_KEYTAB_BADVNO;
    }
    ret = krb5_ret_int8(c->sp, &tag);
    if (ret) {
	krb5_storage_free(c->sp);
	_krb5_xunlock(context, c->fd);
	close(c->fd);
	krb5_clear_error_message(context);
	return ret;
    }
    id->version = tag;
    storage_set_flags(context, c->sp, id->version);
    return 0;
}

static krb5_error_code KRB5_CALLCONV
fkt_start_seq_get(krb5_context context,
		  krb5_keytab id,
		  krb5_kt_cursor *c)
{
    return fkt_start_seq_get_int(context, id, O_RDONLY | O_BINARY | O_CLOEXEC, 0, c);
}

static krb5_error_code
fkt_next_entry_int(krb5_context context,
		   krb5_keytab id,
		   krb5_keytab_entry *entry,
		   krb5_kt_cursor *cursor,
		   off_t *start,
		   off_t *end)
{
    struct fkt_data *d = id->data;
    int32_t len;
    int ret;
    int8_t tmp8;
    int32_t tmp32;
    uint32_t utmp32;
    off_t pos, curpos;

    pos = krb5_storage_seek(cursor->sp, 0, SEEK_CUR);
loop:
    ret = krb5_ret_int32(cursor->sp, &len);
    if (ret)
	return ret;
    if(len < 0) {
	pos = krb5_storage_seek(cursor->sp, -len, SEEK_CUR);
	goto loop;
    }
    ret = krb5_kt_ret_principal (context, d, cursor->sp, &entry->principal);
    if (ret)
	goto out;
    ret = krb5_ret_uint32(cursor->sp, &utmp32);
    entry->timestamp = utmp32;
    if (ret)
	goto out;
    ret = krb5_ret_int8(cursor->sp, &tmp8);
    if (ret)
	goto out;
    entry->vno = tmp8;
    ret = krb5_kt_ret_keyblock (context, d, cursor->sp, &entry->keyblock);
    if (ret)
	goto out;
    /* there might be a 32 bit kvno here
     * if it's zero, assume that the 8bit one was right,
     * otherwise trust the new value */
    curpos = krb5_storage_seek(cursor->sp, 0, SEEK_CUR);
    if(len + 4 + pos - curpos >= 4) {
	ret = krb5_ret_int32(cursor->sp, &tmp32);
	if (ret == 0 && tmp32 != 0)
	    entry->vno = tmp32;
    }
    /* there might be a flags field here */
    if(len + 4 + pos - curpos >= 8) {
	ret = krb5_ret_uint32(cursor->sp, &utmp32);
	if (ret == 0)
	    entry->flags = utmp32;
    } else
	entry->flags = 0;

    entry->aliases = NULL;

    if(start) *start = pos;
    if(end) *end = pos + 4 + len;
 out:
    krb5_storage_seek(cursor->sp, pos + 4 + len, SEEK_SET);
    return ret;
}

static krb5_error_code KRB5_CALLCONV
fkt_next_entry(krb5_context context,
	       krb5_keytab id,
	       krb5_keytab_entry *entry,
	       krb5_kt_cursor *cursor)
{
    return fkt_next_entry_int(context, id, entry, cursor, NULL, NULL);
}

static krb5_error_code KRB5_CALLCONV
fkt_end_seq_get(krb5_context context,
		krb5_keytab id,
		krb5_kt_cursor *cursor)
{
    krb5_storage_free(cursor->sp);
    _krb5_xunlock(context, cursor->fd);
    close(cursor->fd);
    return 0;
}

static krb5_error_code KRB5_CALLCONV
fkt_setup_keytab(krb5_context context,
		 krb5_keytab id,
		 krb5_storage *sp)
{
    krb5_error_code ret;
    ret = krb5_store_int8(sp, 5);
    if(ret)
	return ret;
    if(id->version == 0)
	id->version = KRB5_KT_VNO;
    return krb5_store_int8 (sp, id->version);
}

static krb5_error_code KRB5_CALLCONV
fkt_add_entry(krb5_context context,
	      krb5_keytab id,
	      krb5_keytab_entry *entry)
{
    int ret;
    int fd;
    krb5_storage *sp;
    struct fkt_data *d = id->data;
    krb5_data keytab;
    int32_t len;

    fd = open (d->filename, O_RDWR | O_BINARY | O_CLOEXEC);
    if (fd < 0) {
	fd = open (d->filename, O_RDWR | O_CREAT | O_EXCL | O_BINARY | O_CLOEXEC, 0600);
	if (fd < 0) {
	    ret = errno;
	    krb5_set_error_message(context, ret,
				   N_("open(%s): %s", ""), d->filename,
				   strerror(ret));
	    return ret;
	}
	rk_cloexec(fd);

	ret = _krb5_xlock(context, fd, 1, d->filename);
	if (ret) {
	    close(fd);
	    return ret;
	}
	sp = krb5_storage_from_fd(fd);
	krb5_storage_set_eof_code(sp, KRB5_KT_END);
	ret = fkt_setup_keytab(context, id, sp);
	if(ret) {
	    goto out;
	}
	storage_set_flags(context, sp, id->version);
    } else {
	int8_t pvno, tag;

	rk_cloexec(fd);

	ret = _krb5_xlock(context, fd, 1, d->filename);
	if (ret) {
	    close(fd);
	    return ret;
	}
	sp = krb5_storage_from_fd(fd);
	krb5_storage_set_eof_code(sp, KRB5_KT_END);
	ret = krb5_ret_int8(sp, &pvno);
	if(ret) {
	    /* we probably have a zero byte file, so try to set it up
               properly */
	    ret = fkt_setup_keytab(context, id, sp);
	    if(ret) {
		krb5_set_error_message(context, ret,
				       N_("%s: keytab is corrupted: %s", ""),
				       d->filename, strerror(ret));
		goto out;
	    }
	    storage_set_flags(context, sp, id->version);
	} else {
	    if(pvno != 5) {
		ret = KRB5_KEYTAB_BADVNO;
		krb5_set_error_message(context, ret,
				       N_("Bad version in keytab %s", ""),
				       d->filename);
		goto out;
	    }
	    ret = krb5_ret_int8 (sp, &tag);
	    if (ret) {
		krb5_set_error_message(context, ret,
				       N_("failed reading tag from "
					  "keytab %s", ""),
				       d->filename);
		goto out;
	    }
	    id->version = tag;
	    storage_set_flags(context, sp, id->version);
	}
    }

    {
	krb5_storage *emem;
	emem = krb5_storage_emem();
	if(emem == NULL) {
	    ret = ENOMEM;
	    krb5_set_error_message(context, ret,
				   N_("malloc: out of memory", ""));
	    goto out;
	}
	ret = krb5_kt_store_principal(context, emem, entry->principal);
	if(ret) {
	    krb5_set_error_message(context, ret,
				   N_("Failed storing principal "
				      "in keytab %s", ""),
				   d->filename);
	    krb5_storage_free(emem);
	    goto out;
	}
	ret = krb5_store_int32 (emem, entry->timestamp);
	if(ret) {
	    krb5_set_error_message(context, ret,
				   N_("Failed storing timpstamp "
				      "in keytab %s", ""),
				   d->filename);
	    krb5_storage_free(emem);
	    goto out;
	}
	ret = krb5_store_int8 (emem, entry->vno % 256);
	if(ret) {
	    krb5_set_error_message(context, ret,
				   N_("Failed storing kvno "
				      "in keytab %s", ""),
				   d->filename);
	    krb5_storage_free(emem);
	    goto out;
	}
	ret = krb5_kt_store_keyblock (context, d, emem, &entry->keyblock);
	if(ret) {
	    krb5_storage_free(emem);
	    goto out;
	}
	if ((d->flags & KRB5_KT_FL_JAVA) == 0) {
	    ret = krb5_store_int32 (emem, entry->vno);
	    if (ret) {
		krb5_set_error_message(context, ret,
				       N_("Failed storing extended kvno "
					  "in keytab %s", ""),
				       d->filename);
		krb5_storage_free(emem);
		goto out;
	    }
	    ret = krb5_store_uint32 (emem, entry->flags);
	    if (ret) {
		krb5_set_error_message(context, ret,
				       N_("Failed storing extended kvno "
					  "in keytab %s", ""),
				       d->filename);
		krb5_storage_free(emem);
		goto out;
	    }
	}

	ret = krb5_storage_to_data(emem, &keytab);
	krb5_storage_free(emem);
	if(ret) {
	    krb5_set_error_message(context, ret,
				   N_("Failed converting keytab entry "
				      "to memory block for keytab %s", ""),
				   d->filename);
	    goto out;
	}
    }

    while(1) {
	ret = krb5_ret_int32(sp, &len);
	if(ret == KRB5_KT_END) {
	    len = keytab.length;
	    break;
	}
	if(len < 0) {
	    len = -len;
	    if(len >= (int)keytab.length) {
		krb5_storage_seek(sp, -4, SEEK_CUR);
		break;
	    }
	}
	krb5_storage_seek(sp, len, SEEK_CUR);
    }
    ret = krb5_store_int32(sp, len);
    if(krb5_storage_write(sp, keytab.data, keytab.length) < 0) {
	ret = errno;
	krb5_set_error_message(context, ret,
			       N_("Failed writing keytab block "
				  "in keytab %s: %s", ""),
			       d->filename, strerror(ret));
    }
    memset(keytab.data, 0, keytab.length);
    krb5_data_free(&keytab);
  out:
    krb5_storage_free(sp);
    _krb5_xunlock(context, fd);
    close(fd);
    return ret;
}

static krb5_error_code KRB5_CALLCONV
fkt_remove_entry(krb5_context context,
		 krb5_keytab id,
		 krb5_keytab_entry *entry)
{
    krb5_keytab_entry e;
    krb5_kt_cursor cursor;
    off_t pos_start, pos_end;
    int found = 0;
    krb5_error_code ret;

    ret = fkt_start_seq_get_int(context, id, O_RDWR | O_BINARY | O_CLOEXEC, 1, &cursor);
    if(ret != 0)
	goto out; /* return other error here? */
    while(fkt_next_entry_int(context, id, &e, &cursor,
			     &pos_start, &pos_end) == 0) {
	if(krb5_kt_compare(context, &e, entry->principal,
			   entry->vno, entry->keyblock.keytype)) {
	    int32_t len;
	    unsigned char buf[128];
	    found = 1;
	    krb5_storage_seek(cursor.sp, pos_start, SEEK_SET);
	    len = pos_end - pos_start - 4;
	    krb5_store_int32(cursor.sp, -len);
	    memset(buf, 0, sizeof(buf));
	    while(len > 0) {
		krb5_storage_write(cursor.sp, buf,
		    min((size_t)len, sizeof(buf)));
		len -= min((size_t)len, sizeof(buf));
	    }
	}
	krb5_kt_free_entry(context, &e);
    }
    krb5_kt_end_seq_get(context, id, &cursor);
  out:
    if (!found) {
	krb5_clear_error_message (context);
	return KRB5_KT_NOTFOUND;
    }
    return 0;
}

const krb5_kt_ops krb5_fkt_ops = {
    "FILE",
    fkt_resolve,
    fkt_get_name,
    fkt_close,
    fkt_destroy,
    NULL, /* get */
    fkt_start_seq_get,
    fkt_next_entry,
    fkt_end_seq_get,
    fkt_add_entry,
    fkt_remove_entry
};

const krb5_kt_ops krb5_wrfkt_ops = {
    "WRFILE",
    fkt_resolve,
    fkt_get_name,
    fkt_close,
    fkt_destroy,
    NULL, /* get */
    fkt_start_seq_get,
    fkt_next_entry,
    fkt_end_seq_get,
    fkt_add_entry,
    fkt_remove_entry
};

const krb5_kt_ops krb5_javakt_ops = {
    "JAVA14",
    fkt_resolve_java14,
    fkt_get_name,
    fkt_close,
    fkt_destroy,
    NULL, /* get */
    fkt_start_seq_get,
    fkt_next_entry,
    fkt_end_seq_get,
    fkt_add_entry,
    fkt_remove_entry
};
@


1.3
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@@


1.2
log
@Coverity fixes backported from the heimdal cvs.

ok beck@@, No problem deraadt@@
@
text
@d2 3
a4 3
 * Copyright (c) 1997 - 2002 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
d6 3
a8 3
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
d10 2
a11 2
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
d13 3
a15 3
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
d17 3
a19 3
 * 3. Neither the name of the Institute nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission. 
d21 11
a31 11
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE. 
a35 2
RCSID("$KTH: keytab_file.c,v 1.18 2005/05/31 21:50:43 lha Exp $");

d63 1
a63 1
	krb5_set_error_string (context, "malloc: out of memory");
d84 1
a84 1
	krb5_set_error_string (context, "malloc: out of memory");
d104 1
a104 1
    if(ret != data.length){
d122 1
a122 1
    if(ret != len){
d131 4
a134 1
krb5_kt_ret_keyblock(krb5_context context, krb5_storage *sp, krb5_keyblock *p)
d140 6
a145 1
    if(ret) return ret;
d148 4
d157 2
a158 1
		       krb5_storage *sp, 
d164 6
a169 1
    if(ret) return ret;
d171 4
d181 1
d185 1
a185 1
    int i;
d189 1
a189 1
    
d192 2
a193 1
	krb5_set_error_string (context, "malloc: out of memory");
d199 4
a202 2
	krb5_set_error_string(context,
			      "Failed decoding length of keytab principal");
a207 2
	krb5_set_error_string(context, 
			      "Keytab principal contains invalid length");
d209 4
d216 4
a219 1
    if(ret)
d221 1
a223 1
	krb5_set_error_string (context, "malloc: out of memory");
d225 1
d231 5
a235 1
	if(ret)
d237 1
d245 5
a249 1
	if (ret)
d251 1
d265 1
a265 1
    int i;
d267 1
a267 1
    
d289 1
a289 1
static krb5_error_code
d296 1
a296 1
	krb5_set_error_string (context, "malloc: out of memory");
d302 1
a302 1
	krb5_set_error_string (context, "malloc: out of memory");
d310 1
a310 1
static krb5_error_code
d323 1
a323 1
static krb5_error_code
d332 12
a343 4
static krb5_error_code 
fkt_get_name(krb5_context context, 
	     krb5_keytab id, 
	     char *name, 
d365 1
a365 1
	krb5_warnx(context, 
d372 2
a373 2
fkt_start_seq_get_int(krb5_context context, 
		      krb5_keytab id, 
d381 1
a381 1
    
d385 3
a387 2
	krb5_set_error_string(context, "%s: %s", d->filename,
			      strerror(ret));
d390 1
d397 7
d410 1
a410 1
	krb5_clear_error_string(context);
d417 1
a417 1
	krb5_clear_error_string (context);
d425 1
a425 1
	krb5_clear_error_string(context);
d433 3
a435 3
static krb5_error_code
fkt_start_seq_get(krb5_context context, 
		  krb5_keytab id, 
d438 1
a438 1
    return fkt_start_seq_get_int(context, id, O_RDONLY | O_BINARY, 0, c);
d442 3
a444 3
fkt_next_entry_int(krb5_context context, 
		   krb5_keytab id, 
		   krb5_keytab_entry *entry, 
d449 1
d454 1
d466 1
a466 1
    ret = krb5_kt_ret_principal (context, cursor->sp, &entry->principal);
d469 2
a470 2
    ret = krb5_ret_int32(cursor->sp, &tmp32);
    entry->timestamp = tmp32;
d477 1
a477 1
    ret = krb5_kt_ret_keyblock (context, cursor->sp, &entry->keyblock);
d484 1
a484 1
    if(len + 4 + pos - curpos == 4) {
d486 1
a486 1
	if (ret == 0 && tmp32 != 0) {
a487 1
	}
d489 10
d500 1
a500 1
    if(end) *end = *start + 4 + len;
d506 4
a509 4
static krb5_error_code
fkt_next_entry(krb5_context context, 
	       krb5_keytab id, 
	       krb5_keytab_entry *entry, 
d515 2
a516 2
static krb5_error_code
fkt_end_seq_get(krb5_context context, 
d526 1
a526 1
static krb5_error_code
d539 2
a540 2
		 
static krb5_error_code
d551 2
a552 2
    
    fd = open (d->filename, O_RDWR | O_BINARY);
d554 1
a554 1
	fd = open (d->filename, O_RDWR | O_CREAT | O_EXCL | O_BINARY, 0600);
d557 3
a559 2
	    krb5_set_error_string(context, "open(%s): %s", d->filename,
				  strerror(ret));
d562 2
d578 3
d594 3
a596 2
		krb5_set_error_string(context, "%s: keytab is corrupted: %s", 
				      d->filename, strerror(ret));
d603 3
a605 2
		krb5_set_error_string(context, "%s: %s", 
				      d->filename, strerror(ret));
d610 4
a613 2
		krb5_set_error_string(context, "%s: reading tag: %s", 
				      d->filename, strerror(ret));
d626 2
a627 1
	    krb5_set_error_string (context, "malloc: out of memory");
d632 4
d641 4
d650 4
d657 1
a657 1
	ret = krb5_kt_store_keyblock (context, emem, &entry->keyblock);
d665 13
d685 5
a689 1
	if(ret)
d691 1
d693 1
a693 1
    
d702 1
a702 1
	    if(len >= keytab.length) {
d710 1
a710 1
    if(krb5_storage_write(sp, keytab.data, keytab.length) < 0)
d712 5
d726 1
a726 1
static krb5_error_code
d736 3
a738 3
    
    ret = fkt_start_seq_get_int(context, id, O_RDWR | O_BINARY, 1, &cursor);
    if(ret != 0) 
d740 1
a740 1
    while(fkt_next_entry_int(context, id, &e, &cursor, 
d742 1
a742 1
	if(krb5_kt_compare(context, &e, entry->principal, 
d752 3
a754 2
		krb5_storage_write(cursor.sp, buf, min(len, sizeof(buf)));
		len -= min(len, sizeof(buf));
d762 1
a762 1
	krb5_clear_error_string (context);
d773 1
d787 1
d801 1
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * Copyright (c) 1997, 1998, 1999 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: keytab_file.c,v 1.6 2000/01/02 00:20:22 assar Exp $");
d42 3
d49 1
d53 2
a54 1
krb5_kt_ret_data(krb5_storage *sp,
d64 2
a65 1
    if (data->data == NULL)
d67 2
a68 1
    ret = sp->fetch(sp, data->data, size);
d75 3
a77 2
krb5_kt_ret_string(krb5_storage *sp,
		   general_string *data)
d85 2
a86 1
    if (*data == NULL)
d88 2
a89 1
    ret = sp->fetch(sp, *data, size);
d97 2
a98 1
krb5_kt_store_data(krb5_storage *sp,
d105 1
a105 1
    ret = sp->store(sp, data.data, data.length);
d116 1
a116 1
		     general_string data)
d123 1
a123 1
    ret = sp->store(sp, data, len);
d133 1
a133 1
krb5_kt_ret_keyblock(krb5_storage *sp, krb5_keyblock *p)
d141 1
a141 1
    ret = krb5_kt_ret_data(sp, &p->keyvalue);
d146 2
a147 1
krb5_kt_store_keyblock(krb5_storage *sp, 
d154 1
a154 1
    ret = krb5_kt_store_data(sp, p->keyvalue);
d160 2
a161 1
krb5_kt_ret_principal(krb5_storage *sp,
d167 1
a167 1
    int16_t tmp;
d170 2
a171 1
    if(p == NULL)
d173 1
d175 15
a189 1
    ret = krb5_ret_int16(sp, &tmp);
d191 8
a198 10
	return ret;
    if (sp->flags & KRB5_STORAGE_PRINCIPAL_WRONG_NUM_COMPONENTS)
	tmp--;
    p->name.name_string.len = tmp;
    ret = krb5_kt_ret_string(sp, &p->realm);
    if(ret) return ret;
    p->name.name_string.val = calloc(p->name.name_string.len, 
				     sizeof(*p->name.name_string.val));
    if(p->name.name_string.val == NULL)
	return ENOMEM;
d200 3
a202 2
	ret = krb5_kt_ret_string(sp, p->name.name_string.val + i);
	if(ret) return ret;
d211 1
a211 1
	    return ret;
d215 3
d221 2
a222 1
krb5_kt_store_principal(krb5_storage *sp,
d237 2
a238 1
	if(ret) return ret;
d253 1
d255 2
a256 1
    if(d == NULL)
d258 1
d262 1
d265 1
d271 13
d317 2
a318 2
	krb5_abortx(context, 
		    "storage_set_flags called with bad vno (%x)", vno);
d327 1
d335 11
a345 2
    if (c->fd < 0)
	return errno;
d347 1
d351 1
d353 1
d358 1
d360 1
d366 1
d368 1
d381 1
a381 1
    return fkt_start_seq_get_int(context, id, O_RDONLY | O_BINARY, c);
d396 1
a396 1
    off_t pos;
d398 1
a398 1
    pos = cursor->sp->seek(cursor->sp, 0, SEEK_CUR);
d404 1
a404 1
	pos = cursor->sp->seek(cursor->sp, -len, SEEK_CUR);
d407 1
a407 1
    ret = krb5_kt_ret_principal (cursor->sp, &entry->principal);
d418 1
a418 1
    ret = krb5_kt_ret_keyblock (cursor->sp, &entry->keyblock);
d421 10
d434 1
a434 1
    cursor->sp->seek(cursor->sp, pos + 4 + len, SEEK_SET);
d453 1
d459 14
d486 5
a490 8
	fd = open (d->filename, O_RDWR | O_CREAT | O_BINARY, 0600);
	if (fd < 0)
	    return errno;
	sp = krb5_storage_from_fd(fd);
	ret = krb5_store_int8(sp, 5);
	if(ret) {
	    krb5_storage_free(sp);
	    close(fd);
d493 1
a493 3
	if(id->version == 0)
	    id->version = KRB5_KT_VNO;
	ret = krb5_store_int8 (sp, id->version);
a494 1
	    krb5_storage_free(sp);
d498 6
d507 5
d513 1
d516 24
a539 3
	    krb5_storage_free(sp);
	    close(fd);
	    return ret;
a540 13
	if(pvno != 5) {
	    krb5_storage_free(sp);
	    close(fd);
	    return KRB5_KEYTAB_BADVNO;
	}
	ret = krb5_ret_int8 (sp, &tag);
	if (ret) {
	    krb5_storage_free(sp);
	    close(fd);
	    return ret;
	}
	id->version = tag;
	storage_set_flags(context, sp, id->version);
d548 1
d551 1
a551 1
	ret = krb5_kt_store_principal(emem, entry->principal);
d561 1
a561 1
	ret = krb5_store_int8 (emem, entry->vno);
d566 1
a566 1
	ret = krb5_kt_store_keyblock (emem, &entry->keyblock);
d571 8
d587 1
a587 1
	if(ret == KRB5_CC_END) {
d594 1
a594 1
		sp->seek(sp, -4, SEEK_CUR);
d598 1
a598 1
	sp->seek(sp, len, SEEK_CUR);
d601 1
a601 1
    if(sp->store(sp, keytab.data, keytab.length) < 0)
d605 1
a605 1
 out:
d607 1
d621 1
d623 3
a625 1
    fkt_start_seq_get_int(context, id, O_RDWR | O_BINARY, &cursor);
d633 1
a633 1
	    cursor.sp->seek(cursor.sp, pos_start, SEEK_SET);
d638 1
a638 1
		cursor.sp->store(cursor.sp, buf, min(len, sizeof(buf)));
d642 1
d645 3
a647 1
    if (!found)
d649 1
d656 26
@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.3f

Lots of changes, highlights include:

 * change default keytab to ANY:FILE:/etc/krb5.keytab,krb4:/etc/srvtab,
   the new keytab type that tries both of these in order (SRVTAB is
   also an alias for krb4:)

 * improve error reporting and error handling (error messages should
   be more detailed and more useful)

 * the API is closer to what MIT krb5 is using

 * more compatible with windows 2000

 * removed some memory leaks

 * bug fixes
@
text
@d2 1
a2 1
 * Copyright (c) 1997 - 2001 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: keytab_file.c,v 1.8 2001/05/14 06:14:48 assar Exp $");
d49 1
a49 2
krb5_kt_ret_data(krb5_context context,
		 krb5_storage *sp,
d59 1
a59 2
    if (data->data == NULL) {
	krb5_set_error_string (context, "malloc: out of memory");
a60 1
    }
d68 1
a68 2
krb5_kt_ret_string(krb5_context context,
		   krb5_storage *sp,
d77 1
a77 2
    if (*data == NULL) {
	krb5_set_error_string (context, "malloc: out of memory");
a78 1
    }
d87 1
a87 2
krb5_kt_store_data(krb5_context context,
		   krb5_storage *sp,
d122 1
a122 1
krb5_kt_ret_keyblock(krb5_context context, krb5_storage *sp, krb5_keyblock *p)
d130 1
a130 1
    ret = krb5_kt_ret_data(context, sp, &p->keyvalue);
d135 1
a135 2
krb5_kt_store_keyblock(krb5_context context,
		       krb5_storage *sp, 
d142 1
a142 1
    ret = krb5_kt_store_data(context, sp, p->keyvalue);
d148 1
a148 2
krb5_kt_ret_principal(krb5_context context,
		      krb5_storage *sp,
d157 1
a157 2
    if(p == NULL) {
	krb5_set_error_string (context, "malloc: out of memory");
a158 1
    }
d166 2
a167 3
    ret = krb5_kt_ret_string(context, sp, &p->realm);
    if(ret)
	return ret;
d170 1
a170 2
    if(p->name.name_string.val == NULL) {
	krb5_set_error_string (context, "malloc: out of memory");
a171 1
    }
d173 2
a174 3
	ret = krb5_kt_ret_string(context, sp, p->name.name_string.val + i);
	if(ret)
	    return ret;
d190 1
a190 2
krb5_kt_store_principal(krb5_context context,
			krb5_storage *sp,
d205 1
a205 2
	if(ret)
	    return ret;
a219 1

d221 1
a221 2
    if(d == NULL) {
	krb5_set_error_string (context, "malloc: out of memory");
a222 1
    }
a225 1
	krb5_set_error_string (context, "malloc: out of memory");
d283 2
a284 6
    if (c->fd < 0) {
	ret = errno;
	krb5_set_error_string(context, "open(%s): %s", d->filename,
			      strerror(ret));
	return ret;
    }
a294 1
	krb5_clear_error_string (context);
d339 1
a339 1
    ret = krb5_kt_ret_principal (context, cursor->sp, &entry->principal);
d350 1
a350 1
    ret = krb5_kt_ret_keyblock (context, cursor->sp, &entry->keyblock);
d394 2
a395 6
	if (fd < 0) {
	    ret = errno;
	    krb5_set_error_string(context, "open(%s): %s", d->filename,
				  strerror(ret));
	    return ret;
	}
a423 1
	    krb5_clear_error_string (context);
a440 1
	    krb5_set_error_string (context, "malloc: out of memory");
d443 1
a443 1
	ret = krb5_kt_store_principal(context, emem, entry->principal);
d458 1
a458 1
	ret = krb5_kt_store_keyblock (context, emem, &entry->keyblock);
d524 1
a524 2
    if (!found) {
	krb5_clear_error_string (context);
a525 1
    }
@


1.1.1.3
log
@Import of heimdal-0.6rc1
@
text
@d2 1
a2 1
 * Copyright (c) 1997 - 2002 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: keytab_file.c,v 1.12 2002/09/24 16:43:30 joda Exp $");
d64 1
a64 1
    ret = krb5_storage_read(sp, data->data, size);
d85 1
a85 1
    ret = krb5_storage_read(sp, *data, size);
d101 1
a101 1
    ret = krb5_storage_write(sp, data.data, data.length);
d119 1
a119 1
    ret = krb5_storage_write(sp, data, len);
d174 1
a174 1
    if(krb5_storage_is_flags(sp, KRB5_STORAGE_PRINCIPAL_WRONG_NUM_COMPONENTS))
d287 2
a288 2
	krb5_warnx(context, 
		   "storage_set_flags called with bad vno (%d)", vno);
d306 1
a306 1
	krb5_set_error_string(context, "%s: %s", d->filename,
a310 1
    krb5_storage_set_eof_code(c->sp, KRB5_KT_END);
d354 1
a354 1
    off_t pos, curpos;
d356 1
a356 1
    pos = krb5_storage_seek(cursor->sp, 0, SEEK_CUR);
d362 1
a362 1
	pos = krb5_storage_seek(cursor->sp, -len, SEEK_CUR);
a378 10
    /* there might be a 32 bit kvno here
     * if it's zero, assume that the 8bit one was right,
     * otherwise trust the new value */
    curpos = krb5_storage_seek(cursor->sp, 0, SEEK_CUR);
    if(len + 4 + pos - curpos == 4) {
	ret = krb5_ret_int32(cursor->sp, &tmp32);
	if (ret == 0 && tmp32 != 0) {
	    entry->vno = tmp32;
	}
    }
d382 1
a382 1
    krb5_storage_seek(cursor->sp, pos + 4 + len, SEEK_SET);
a405 14
fkt_setup_keytab(krb5_context context,
		 krb5_keytab id,
		 krb5_storage *sp)
{
    krb5_error_code ret;
    ret = krb5_store_int8(sp, 5);
    if(ret)
	return ret;
    if(id->version == 0)
	id->version = KRB5_KT_VNO;
    return krb5_store_int8 (sp, id->version);
}
		 
static krb5_error_code
d419 1
a419 1
	fd = open (d->filename, O_RDWR | O_CREAT | O_EXCL | O_BINARY, 0600);
d427 1
a427 2
	krb5_storage_set_eof_code(sp, KRB5_KT_END);
	ret = fkt_setup_keytab(context, id, sp);
d433 8
a444 1
	krb5_storage_set_eof_code(sp, KRB5_KT_END);
d447 15
a461 31
	    /* we probably have a zero byte file, so try to set it up
               properly */
	    ret = fkt_setup_keytab(context, id, sp);
	    if(ret) {
		krb5_set_error_string(context, "%s: keytab is corrupted: %s", 
				      d->filename, strerror(ret));
		krb5_storage_free(sp);
		close(fd);
		return ret;
	    }
	    storage_set_flags(context, sp, id->version);
	} else {
	    if(pvno != 5) {
		krb5_storage_free(sp);
		close(fd);
		krb5_clear_error_string (context);
		ret = KRB5_KEYTAB_BADVNO;
		krb5_set_error_string(context, "%s: %s", 
				      d->filename, strerror(ret));
		return ret;
	    }
	    ret = krb5_ret_int8 (sp, &tag);
	    if (ret) {
		krb5_set_error_string(context, "%s: reading tag: %s", 
				      d->filename, strerror(ret));
		krb5_storage_free(sp);
		close(fd);
		return ret;
	    }
	    id->version = tag;
	    storage_set_flags(context, sp, id->version);
d463 2
d485 1
a485 1
	ret = krb5_store_int8 (emem, entry->vno % 256);
a494 6
	ret = krb5_store_int32 (emem, entry->vno);
	if (ret) {
	    krb5_storage_free(emem);
	    goto out;
	}

d503 1
a503 1
	if(ret == KRB5_KT_END) {
d510 1
a510 1
		krb5_storage_seek(sp, -4, SEEK_CUR);
d514 1
a514 1
	krb5_storage_seek(sp, len, SEEK_CUR);
d517 1
a517 1
    if(krb5_storage_write(sp, keytab.data, keytab.length) < 0)
d521 1
a521 1
  out:
a535 1
    krb5_error_code ret;
d537 1
a537 3
    ret = fkt_start_seq_get_int(context, id, O_RDWR | O_BINARY, &cursor);
    if(ret != 0) 
	goto out; /* return other error here? */
d545 1
a545 1
	    krb5_storage_seek(cursor.sp, pos_start, SEEK_SET);
d550 1
a550 1
		krb5_storage_write(cursor.sp, buf, min(len, sizeof(buf)));
a555 1
  out:
@


1.1.1.4
log
@Import of heimdal-0.7.2
@
text
@d36 1
a36 1
RCSID("$KTH: keytab_file.c,v 1.18 2005/05/31 21:50:43 lha Exp $");
a41 3
#define KRB5_KT_FL_JAVA 1


a45 1
    int flags;
d73 1
a73 1
		   heim_general_string *data)
d112 1
a112 1
		     heim_general_string data)
a248 1
    d->flags = 0;
a253 13
fkt_resolve_java14(krb5_context context, const char *name, krb5_keytab id)
{
    krb5_error_code ret;

    ret = fkt_resolve(context, name, id);
    if (ret == 0) {
	struct fkt_data *d = id->data;
	d->flags |= KRB5_KT_FL_JAVA;
    }
    return ret;
}

static krb5_error_code
a296 1
		      int exclusive,
a309 5
    ret = _krb5_xlock(context, c->fd, exclusive, d->filename);
    if (ret) {
	close(c->fd);
	return ret;
    }
a314 1
	_krb5_xunlock(context, c->fd);
a315 1
	krb5_clear_error_string(context);
a319 1
	_krb5_xunlock(context, c->fd);
a326 1
	_krb5_xunlock(context, c->fd);
a327 1
	krb5_clear_error_string(context);
d340 1
a340 1
    return fkt_start_seq_get_int(context, id, O_RDONLY | O_BINARY, 0, c);
a411 1
    _krb5_xunlock(context, cursor->fd);
a450 5
	ret = _krb5_xlock(context, fd, 1, d->filename);
	if (ret) {
	    close(fd);
	    return ret;
	}
d455 3
a457 1
	    goto out;
a461 5
	ret = _krb5_xlock(context, fd, 1, d->filename);
	if (ret) {
	    close(fd);
	    return ret;
	}
d472 3
a474 1
		goto out;
d479 3
d485 1
a485 1
		goto out;
d491 3
a493 1
		goto out;
d528 4
a531 6
	if ((d->flags & KRB5_KT_FL_JAVA) == 0) {
	    ret = krb5_store_int32 (emem, entry->vno);
	    if (ret) {
		krb5_storage_free(emem);
		goto out;
	    }
a561 1
    _krb5_xunlock(context, fd);
d577 1
a577 1
    ret = fkt_start_seq_get_int(context, id, O_RDWR | O_BINARY, 1, &cursor);
a595 1
	krb5_kt_free_entry(context, &e);
a608 26
    fkt_get_name,
    fkt_close,
    NULL, /* get */
    fkt_start_seq_get,
    fkt_next_entry,
    fkt_end_seq_get,
    fkt_add_entry,
    fkt_remove_entry
};

const krb5_kt_ops krb5_wrfkt_ops = {
    "WRFILE",
    fkt_resolve,
    fkt_get_name,
    fkt_close,
    NULL, /* get */
    fkt_start_seq_get,
    fkt_next_entry,
    fkt_end_seq_get,
    fkt_add_entry,
    fkt_remove_entry
};

const krb5_kt_ops krb5_javakt_ops = {
    "JAVA14",
    fkt_resolve_java14,
@


