head	1.4;
access;
symbols
	OPENBSD_5_3:1.3.0.28
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.26
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.24
	OPENBSD_5_0:1.3.0.22
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.20
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.18
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.14
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.16
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.12
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.10
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.8
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.6
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.4
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.2
	OPENBSD_4_0_BASE:1.3
	HEIMDAL_0_7_2:1.1.1.3
	OPENBSD_3_9:1.2.0.12
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.10
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.8
	OPENBSD_3_7_BASE:1.2
	HEIMDAL_0_6_3:1.1.1.2
	OPENBSD_3_6:1.2.0.6
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.4
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.2
	OPENBSD_3_4_BASE:1.2
	HEIMDAL_0_6:1.1.1.2
	HEIMDAL_0_6RC1:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2013.06.17.18.57.44;	author robert;	state dead;
branches;
next	1.3;

1.3
date	2006.04.14.08.15.05;	author biorn;	state Exp;
branches;
next	1.2;

1.2
date	2003.07.02.02.19.02;	author avsm;	state Exp;
branches;
next	1.1;

1.1
date	2003.05.11.02.15.58;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.05.11.02.15.58;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.05.13.03.00.17;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.04.14.07.33.28;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.4
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@/*
 * Copyright (c) 2002 - 2003 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
 *
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
 *
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
 *
 * 3. Neither the name of KTH nor the names of its contributors may be
 *    used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY KTH AND ITS CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL KTH OR ITS CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

#include "krb5_locl.h"
#include <err.h>

RCSID("$KTH: name-45-test.c,v 1.7 2005/05/29 18:22:59 lha Exp $");

enum { MAX_COMPONENTS = 3 };

static struct testcase {
    const char *v4_name;
    const char *v4_inst;
    const char *v4_realm;

    krb5_realm v5_realm;
    unsigned ncomponents;
    char *comp_val[MAX_COMPONENTS];

    const char *config_file;
    krb5_error_code ret;	/* expected error code from 524 */

    krb5_error_code ret2;	/* expected error code from 425 */
} tests[] = {
    {"", "", "", "", 1, {""}, NULL, 0, 0},
    {"a", "", "", "", 1, {"a"}, NULL, 0, 0},
    {"a", "b", "", "", 2, {"a", "b"}, NULL, 0, 0},
    {"a", "b", "c", "c", 2, {"a", "b"}, NULL, 0, 0},

    {"krbtgt", "FOO.SE", "FOO.SE", "FOO.SE", 2,
     {"krbtgt", "FOO.SE"}, NULL, 0, 0},

    {"foo", "bar", "BAZ", "BAZ", 2,
     {"foo", "bar"}, NULL, 0, 0},
    {"foo", "bar", "BAZ", "BAZ", 2,
     {"foo", "bar"},
     "[libdefaults]\n"
     "	v4_name_convert = {\n"
     "		host = {\n"
     "			foo = foo5\n"
     "		}\n"
     "}\n",
    HEIM_ERR_V4_PRINC_NO_CONV, 0},
    {"foo", "bar", "BAZ", "BAZ", 2,
     {"foo5", "bar.baz"},
     "[realms]\n"
     "  BAZ = {\n"
     "		v4_name_convert = {\n"
     "			host = {\n"
     "				foo = foo5\n"
     "			}\n"
     "		}\n"
     "		v4_instance_convert = {\n"
     "			bar = bar.baz\n"
     "		}\n"
     "  }\n",
     0, 0},

    {"rcmd", "foo", "realm", "realm", 2, {"host", "foo"}, NULL,
     HEIM_ERR_V4_PRINC_NO_CONV, 0},
    {"rcmd", "foo", "realm", "realm", 2, {"host", "foo.realm"},
     "[realms]\n"
     "	realm = {\n"
     "		v4_instance_convert = {\n"
     "			foo = foo.realm\n"
     "		}\n"
     "	}\n",
     0, 0},

    {"pop", "mail0", "NADA.KTH.SE", "NADA.KTH.SE", 2,
     {"pop", "mail0.nada.kth.se"}, "", HEIM_ERR_V4_PRINC_NO_CONV, 0},
    {"pop", "mail0", "NADA.KTH.SE", "NADA.KTH.SE", 2,
     {"pop", "mail0.nada.kth.se"},
     "[realms]\n"
     "	NADA.KTH.SE = {\n"
     "		default_domain = nada.kth.se\n"
     "	}\n",
     0, 0},
    {"pop", "mail0", "NADA.KTH.SE", "NADA.KTH.SE", 2,
     {"pop", "mail0.nada.kth.se"},
     "[libdefaults]\n"
     "	v4_instance_resolve = true\n",
     HEIM_ERR_V4_PRINC_NO_CONV, 0},

    {"rcmd", "hokkigai", "NADA.KTH.SE", "NADA.KTH.SE", 2,
     {"host", "hokkigai.pdc.kth.se"}, "", HEIM_ERR_V4_PRINC_NO_CONV, 0},
    {"rcmd", "hokkigai", "NADA.KTH.SE", "NADA.KTH.SE", 2,
     {"host", "hokkigai.pdc.kth.se"},
     "[libdefaults]\n"
     "	v4_instance_resolve = true\n"
     "[realms]\n"
     "	NADA.KTH.SE = {\n"
     "		v4_name_convert = {\n"
     "			host = {\n"
     "				rcmd = host\n"
     "			}\n"
     "		}\n"
     "		default_domain = pdc.kth.se\n"
     "	}\n",
     0, 0},

    {"0123456789012345678901234567890123456789",
     "0123456789012345678901234567890123456789",
     "0123456789012345678901234567890123456789",
     "0123456789012345678901234567890123456789",
     2, {"0123456789012345678901234567890123456789",
	 "0123456789012345678901234567890123456789"}, NULL,
     0, KRB5_PARSE_MALFORMED},

    {"012345678901234567890123456789012345678",
     "012345678901234567890123456789012345678",
     "012345678901234567890123456789012345678",
     "012345678901234567890123456789012345678",
     2, {"012345678901234567890123456789012345678",
	 "012345678901234567890123456789012345678"}, NULL,
     0, 0},

    {NULL, NULL, NULL, NULL, 0, {NULL}, NULL, 0}
};

int
main(int argc, char **argv)
{
    struct testcase *t;
    krb5_context context;
    krb5_error_code ret;
    char hostname[1024];
    int val = 0;

    setprogname(argv[0]);

    gethostname(hostname, sizeof(hostname));
    if (!(strstr(hostname, "kth.se") != NULL || strstr(hostname, "su.se") != NULL))
	return 0;

    for (t = tests; t->v4_name; ++t) {
	krb5_principal princ;
	int i;
	char name[40], inst[40], realm[40];
	char printable_princ[256];

	ret = krb5_init_context (&context);
	if (ret)
	    errx (1, "krb5_init_context failed: %d", ret);

	if (t->config_file != NULL) {
	    char template[] = "/tmp/krb5-conf-XXXXXXXXXX";
	    int fd = mkstemp(template);
	    char *files[2];

	    if (fd < 0)
		krb5_err (context, 1, errno, "mkstemp %s", template);

	    if (write (fd, t->config_file, strlen(t->config_file))
		!= strlen(t->config_file))
		krb5_err (context, 1, errno, "write %s", template);
	    close (fd);
	    files[0] = template;
	    files[1] = NULL;

	    ret = krb5_set_config_files (context, files);
	    unlink (template);
	    if (ret)
		krb5_err (context, 1, ret, "krb5_set_config_files");
	}

	ret = krb5_425_conv_principal (context,
				       t->v4_name,
				       t->v4_inst,
				       t->v4_realm,
				       &princ);
	if (ret) {
	    if (ret != t->ret) {
		krb5_warn (context, ret,
			   "krb5_425_conv_principal %s.%s@@%s",
			   t->v4_name, t->v4_inst, t->v4_realm);
		val = 1;
	    }
	} else {
	    if (t->ret) {
		char *s;
		krb5_unparse_name(context, princ, &s);
		krb5_warnx (context,
			    "krb5_425_conv_principal %s.%s@@%s "
			    "passed unexpected: %s",
			    t->v4_name, t->v4_inst, t->v4_realm, s);
		free(s);
		val = 1;
		continue;
	    }
	}

	if (ret)
	    continue;

	if (strcmp (t->v5_realm, princ->realm) != 0) {
	    printf ("wrong realm (\"%s\" should be \"%s\")"
		    " for \"%s.%s@@%s\"\n",
		    princ->realm, t->v5_realm,
		    t->v4_name,
		    t->v4_inst,
		    t->v4_realm);
	    val = 1;
	}

	if (t->ncomponents != princ->name.name_string.len) {
	    printf ("wrong number of components (%u should be %u)"
		    " for \"%s.%s@@%s\"\n",
		    princ->name.name_string.len, t->ncomponents,
		    t->v4_name,
		    t->v4_inst,
		    t->v4_realm);
	    val = 1;
	} else {
	    for (i = 0; i < t->ncomponents; ++i) {
		if (strcmp(t->comp_val[i],
			   princ->name.name_string.val[i]) != 0) {
		    printf ("bad component %d (\"%s\" should be \"%s\")"
			    " for \"%s.%s@@%s\"\n",
			    i,
			    princ->name.name_string.val[i],
			    t->comp_val[i],
			    t->v4_name,
			    t->v4_inst,
			    t->v4_realm);
		    val = 1;
		}
	    }
	}
	ret = krb5_524_conv_principal (context, princ,
				       name, inst, realm);
	if (krb5_unparse_name_fixed(context, princ,
				    printable_princ, sizeof(printable_princ)))
	    strlcpy(printable_princ, "unknown principal",
		    sizeof(printable_princ));
	if (ret) {
	    if (ret != t->ret2) {
		krb5_warn (context, ret,
			   "krb5_524_conv_principal %s", printable_princ);
		val = 1;
	    }
	} else {
	    if (t->ret2) {
		krb5_warnx (context,
			    "krb5_524_conv_principal %s "
			    "passed unexpected", printable_princ);
		val = 1;
		continue;
	    }
	}
	if (ret) {
	    krb5_free_principal (context, princ);
	    continue;
	}

	krb5_free_principal (context, princ);
    }
    return val;
}
@


1.3
log
@Merge of heimdal 0.7.2
Tested by todd & beck, ok beck.
@
text
@@


1.2
log
@bump mktemp randomness from 6 to 10 X's
@
text
@d34 1
d36 1
a36 1
RCSID("$KTH: name-45-test.c,v 1.3.2.1 2003/05/06 16:49:14 joda Exp $");
d156 1
d158 6
@


1.1
log
@Initial revision
@
text
@d35 1
a35 1
RCSID("$KTH: name-45-test.c,v 1.3 2003/04/17 05:44:40 lha Exp $");
d99 1
a99 1
     {"pop", "mail0.nada.kth.se"}, NULL, HEIM_ERR_V4_PRINC_NO_CONV, 0},
d114 1
a114 1
     {"host", "hokkigai.pdc.kth.se"}, NULL, HEIM_ERR_V4_PRINC_NO_CONV, 0},
d146 1
a146 1
    {NULL, NULL, NULL, NULL, 0, {}, NULL, 0}
d168 1
a168 1
	    char template[] = "/tmp/krb5-conf-XXXXXX";
d202 2
d206 3
a208 2
			    "passed unexpected",
			    t->v4_name, t->v4_inst, t->v4_realm);
@


1.1.1.1
log
@Import of heimdal-0.6rc1
@
text
@@


1.1.1.2
log
@Import of heimdal-0.6, released earlier today.
@
text
@d35 1
a35 1
RCSID("$KTH: name-45-test.c,v 1.3.2.1 2003/05/06 16:49:14 joda Exp $");
d99 1
a99 1
     {"pop", "mail0.nada.kth.se"}, "", HEIM_ERR_V4_PRINC_NO_CONV, 0},
d114 1
a114 1
     {"host", "hokkigai.pdc.kth.se"}, "", HEIM_ERR_V4_PRINC_NO_CONV, 0},
d146 1
a146 1
    {NULL, NULL, NULL, NULL, 0, {NULL}, NULL, 0}
a201 2
		char *s;
		krb5_unparse_name(context, princ, &s);
d204 2
a205 3
			    "passed unexpected: %s",
			    t->v4_name, t->v4_inst, t->v4_realm, s);
		free(s);
@


1.1.1.3
log
@Import of heimdal-0.7.2
@
text
@a33 1
#include <err.h>
d35 1
a35 1
RCSID("$KTH: name-45-test.c,v 1.7 2005/05/29 18:22:59 lha Exp $");
a154 1
    char hostname[1024];
a155 6

    setprogname(argv[0]);

    gethostname(hostname, sizeof(hostname));
    if (!(strstr(hostname, "kth.se") != NULL || strstr(hostname, "su.se") != NULL))
	return 0;
@


