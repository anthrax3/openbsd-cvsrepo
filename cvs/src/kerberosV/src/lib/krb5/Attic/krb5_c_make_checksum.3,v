head	1.5;
access;
symbols
	OPENBSD_5_5:1.4.0.6
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.3.0.28
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.26
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.24
	OPENBSD_5_0:1.3.0.22
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.20
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.18
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.14
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.16
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.12
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.10
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.8
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.6
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.4
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.2
	OPENBSD_4_0_BASE:1.3
	HEIMDAL_0_7_2:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@.\" @;


1.5
date	2014.04.22.10.01.32;	author reyk;	state dead;
branches;
next	1.4;

1.4
date	2013.06.17.18.57.44;	author robert;	state Exp;
branches;
next	1.3;

1.3
date	2006.06.13.07.07.21;	author biorn;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.30.09.20.00;	author biorn;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.14.07.33.23;	author biorn;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.04.14.07.33.23;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.5
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@.\" Copyright (c) 2003 - 2006 Kungliga Tekniska HÃ¶gskolan
.\" (Royal Institute of Technology, Stockholm, Sweden).
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\"
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" 3. Neither the name of the Institute nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\" $Id: krb5_c_make_checksum.3,v 1.4 2013/06/17 18:57:44 robert Exp $
.\"
.Dd Nov  17, 2006
.Dt KRB5_C_MAKE_CHECKSUM 3
.Os HEIMDAL
.Sh NAME
.Nm krb5_c_block_size ,
.Nm krb5_c_decrypt ,
.Nm krb5_c_encrypt ,
.Nm krb5_c_encrypt_length ,
.Nm krb5_c_enctype_compare ,
.Nm krb5_c_get_checksum ,
.Nm krb5_c_is_coll_proof_cksum ,
.Nm krb5_c_is_keyed_cksum ,
.Nm krb5_c_keylength ,
.Nm krb5_c_make_checksum ,
.Nm krb5_c_make_random_key ,
.Nm krb5_c_set_checksum ,
.Nm krb5_c_valid_cksumtype ,
.Nm krb5_c_valid_enctype ,
.Nm krb5_c_verify_checksum ,
.Nm krb5_c_checksum_length
.Nd Kerberos 5 crypto API
.Sh LIBRARY
Kerberos 5 Library (libkrb5, -lkrb5)
.Sh SYNOPSIS
.In krb5.h
.Pp
.Ft krb5_error_code
.Fo krb5_c_block_size
.Fa "krb5_context context"
.Fa "krb5_enctype enctype"
.Fa "size_t *blocksize"
.Fc
.Ft krb5_error_code
.Fo krb5_c_decrypt
.Fa "krb5_context context"
.Fa "const krb5_keyblock key"
.Fa "krb5_keyusage usage"
.Fa "const krb5_data *ivec"
.Fa "krb5_enc_data *input"
.Fa "krb5_data *output"
.Fc
.Ft krb5_error_code
.Fo krb5_c_encrypt
.Fa "krb5_context context"
.Fa "const krb5_keyblock *key"
.Fa "krb5_keyusage usage"
.Fa "const krb5_data *ivec"
.Fa "const krb5_data *input"
.Fa "krb5_enc_data *output"
.Fc
.Ft krb5_error_code
.Fo krb5_c_encrypt_length
.Fa "krb5_context context"
.Fa "krb5_enctype enctype"
.Fa "size_t inputlen"
.Fa "size_t *length"
.Fc
.Ft krb5_error_code
.Fo krb5_c_enctype_compare
.Fa "krb5_context context"
.Fa "krb5_enctype e1"
.Fa "krb5_enctype e2"
.Fa "krb5_boolean *similar"
.Fc
.Ft krb5_error_code
.Fo krb5_c_make_random_key
.Fa "krb5_context context"
.Fa "krb5_enctype enctype"
.Fa "krb5_keyblock *random_key"
.Fc
.Ft krb5_error_code
.Fo krb5_c_make_checksum
.Fa "krb5_context context"
.Fa "krb5_cksumtype cksumtype"
.Fa "const krb5_keyblock *key"
.Fa "krb5_keyusage usage"
.Fa "const krb5_data *input"
.Fa "krb5_checksum *cksum"
.Fc
.Ft krb5_error_code
.Fo krb5_c_verify_checksum
.Fa "krb5_context context"
.Fa "const krb5_keyblock *key"
.Fa "krb5_keyusage usage"
.Fa "const krb5_data *data"
.Fa "const krb5_checksum *cksum"
.Fa "krb5_boolean *valid"
.Fc
.Ft krb5_error_code
.Fo krb5_c_checksum_length
.Fa "krb5_context context"
.Fa "krb5_cksumtype cksumtype"
.Fa "size_t *length"
.Fc
.Ft krb5_error_code
.Fo krb5_c_get_checksum
.Fa "krb5_context context"
.Fa "const krb5_checksum *cksum"
.Fa "krb5_cksumtype *type"
.Fa "krb5_data **data"
.Fc
.Ft krb5_error_code
.Fo krb5_c_set_checksum
.Fa "krb5_context context"
.Fa "krb5_checksum *cksum"
.Fa "krb5_cksumtype type"
.Fa "const krb5_data *data"
.Fc
.Ft krb5_boolean
.Fo krb5_c_valid_enctype
.Fa krb5_enctype etype"
.Fc
.Ft krb5_boolean
.Fo krb5_c_valid_cksumtype
.Fa "krb5_cksumtype ctype"
.Fc
.Ft krb5_boolean
.Fo krb5_c_is_coll_proof_cksum
.Fa "krb5_cksumtype ctype"
.Fc
.Ft krb5_boolean
.Fo krb5_c_is_keyed_cksum
.Fa "krb5_cksumtype ctype"
.Fc
.Ft krb5_error_code
.Fo krb5_c_keylengths
.Fa "krb5_context context"
.Fa "krb5_enctype enctype"
.Fa "size_t *inlength"
.Fa "size_t *keylength"
.Fc
.Sh DESCRIPTION
The functions starting with krb5_c are compat functions with MIT kerberos.
.Pp
The
.Li krb5_enc_data
structure holds and encrypted data.
There are two public accessable members of
.Li krb5_enc_data .
.Li enctype
that holds the encryption type of the data encrypted and
.Li ciphertext
that is a
.Ft krb5_data
that might contain the encrypted data.
.Pp
.Fn krb5_c_block_size
returns the blocksize of the encryption type.
.Pp
.Fn krb5_c_decrypt
decrypts
.Fa input
and store the data in
.Fa output.
If
.Fa ivec
is
.Dv NULL
the default initialization vector for that encryption type will be used.
.Pp
.Fn krb5_c_encrypt
encrypts the plaintext in
.Fa input
and store the ciphertext in
.Fa output .
.Pp
.Fn krb5_c_encrypt_length
returns the length the encrypted data given the plaintext length.
.Pp
.Fn krb5_c_enctype_compare
compares to encryption types and returns if they use compatible
encryption key types.
.Pp
.Fn krb5_c_make_checksum
creates a checksum
.Fa cksum
with the checksum type
.Fa cksumtype
of the data in
.Fa data .
.Fa key
and
.Fa usage
are used if the checksum is a keyed checksum type.
Returns 0 or an error code.
.Pp
.Fn krb5_c_verify_checksum
verifies the checksum
of
.Fa data
in
.Fa cksum
that was created with
.Fa key
using the key usage
.Fa usage .
.Fa verify
is set to non-zero if the checksum verifies correctly and zero if not.
Returns 0 or an error code.
.Pp
.Fn krb5_c_checksum_length
returns the length of the checksum.
.Pp
.Fn krb5_c_set_checksum
sets the
.Li krb5_checksum
structure given
.Fa type
and
.Fa data .
The content of
.Fa cksum
should be freeed with
.Fn krb5_c_free_checksum_contents .
.Pp
.Fn krb5_c_get_checksum
retrieves the components of the
.Li krb5_checksum .
structure.
.Fa data
should be free with
.Fn krb5_free_data .
If some either of
.Fa data
or
.Fa checksum
is not needed for the application,
.Dv NULL
can be passed in.
.Pp
.Fn krb5_c_valid_enctype
returns true if
.Fa etype
is a valid encryption type.
.Pp
.Fn krb5_c_valid_cksumtype
returns true if
.Fa ctype
is a valid checksum type.
.Pp
.Fn krb5_c_is_keyed_cksum
return true if
.Fa ctype
is a keyed checksum type.
.Pp
.Fn krb5_c_is_coll_proof_cksum
returns true if
.Fa ctype
is a collision proof checksum type.
.Pp
.Fn krb5_c_keylengths
return the minimum length
.Fa ( inlength )
bytes needed to create a key and the
length
.Fa ( keylength )
of the resulting key
for the
.Fa enctype .
.Sh SEE ALSO
.Xr krb5 3 ,
.Xr krb5_create_checksum 3 ,
.Xr krb5_free_data 3 ,
.Xr kerberos 8
@


1.4
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@d32 1
a32 1
.\" $Id$
@


1.3
log
@Grammar fixes, both mdoc & english.
Improved and approved by jmc@@
@
text
@d1 1
a1 1
.\" Copyright (c) 2003 - 2004 Kungliga Tekniska Högskolan
d32 1
a32 1
.\" $KTH: krb5_c_make_checksum.3,v 1.8 2004/03/20 11:18:14 lha Exp $
d34 1
a34 1
.Dd March 20, 2004
d46 1
d115 1
a115 1
.Fa "krb5_context context
d158 7
d188 1
a188 1
If 
d260 1
a260 1
is not needed for the application, 
d282 11
a292 1
is a collition proof checksum type.
@


1.2
log
@Minor tweaks, mostly eyeballed by jmc@@
@
text
@d53 1
a53 1
.Nd Kerberos crypto API
@


1.1
log
@Initial revision
@
text
@d35 1
a35 1
.Dt KRB5_CCACHE 3
d52 2
a53 5
.Nm krb5_c_checksum_length ,
.Nm krb5_copy_checksum ,
.Nm krb5_free_checksum ,
.Nm krb5_free_checksum_contents ,
.Nd kerberos crypto API
@


1.1.1.1
log
@Import of heimdal-0.7.2
@
text
@@
