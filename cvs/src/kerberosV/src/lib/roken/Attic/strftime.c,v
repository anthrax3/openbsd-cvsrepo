head	1.4;
access;
symbols
	OPENBSD_5_5:1.3.0.6
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.2
	OPENBSD_5_4_BASE:1.3
	HEIMDAL_0_7_2:1.1.1.3
	OPENBSD_3_7:1.1.1.2.0.8
	OPENBSD_3_7_BASE:1.1.1.2
	HEIMDAL_0_6_3:1.1.1.2
	OPENBSD_3_6:1.1.1.2.0.6
	OPENBSD_3_6_BASE:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.4
	OPENBSD_3_5_BASE:1.1.1.2
	OPENBSD_3_4:1.1.1.2.0.2
	OPENBSD_3_4_BASE:1.1.1.2
	HEIMDAL_0_6:1.1.1.2
	HEIMDAL_0_6RC1:1.1.1.2
	OPENBSD_3_3:1.1.1.1.0.8
	OPENBSD_3_3_BASE:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.6
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.4
	OPENBSD_3_1_BASE:1.1.1.1
	HEIMDAL_0_4e:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.2
	OPENBSD_3_0_BASE:1.1.1.1
	HEIMDAL_0_3f:1.1.1.1
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2014.04.22.10.01.34;	author reyk;	state dead;
branches;
next	1.3;

1.3
date	2013.06.17.18.57.45;	author robert;	state Exp;
branches;
next	1.2;

1.2
date	2005.04.20.20.26.40;	author beck;	state dead;
branches;
next	1.1;

1.1
date	2001.05.25.07.51.22;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.51.22;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.05.11.02.16.09;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.04.14.07.33.45;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.4
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/*
 * Copyright (c) 1999 - 2002 Kungliga Tekniska HÃ¶gskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of KTH nor the names of its contributors may be
 *    used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY KTH AND ITS CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL KTH OR ITS CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

#include <config.h>
#include "roken.h"
#ifdef TEST_STRPFTIME
#include "strpftime-test.h"
#endif

static const char *abb_weekdays[] = {
    "Sun",
    "Mon",
    "Tue",
    "Wed",
    "Thu",
    "Fri",
    "Sat",
};

static const char *full_weekdays[] = {
    "Sunday",
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday",
};

static const char *abb_month[] = {
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec"
};

static const char *full_month[] = {
    "January",
    "February",
    "Mars",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
};

static const char *ampm[] = {
    "AM",
    "PM"
};

/*
 * Convert hour in [0, 24] to [12 1 - 11 12 1 - 11 12]
 */

static int
hour_24to12 (int hour)
{
    int ret = hour % 12;

    if (ret == 0)
	ret = 12;
    return ret;
}

/*
 * Return AM or PM for `hour'
 */

static const char *
hour_to_ampm (int hour)
{
    return ampm[hour / 12];
}

/*
 * Return the week number of `tm' (Sunday being the first day of the week)
 * as [0, 53]
 */

static int
week_number_sun (const struct tm *tm)
{
    return (tm->tm_yday + 7 - (tm->tm_yday % 7 - tm->tm_wday + 7) % 7) / 7;
}

/*
 * Return the week number of `tm' (Monday being the first day of the week)
 * as [0, 53]
 */

static int
week_number_mon (const struct tm *tm)
{
    int wday = (tm->tm_wday + 6) % 7;

    return (tm->tm_yday + 7 - (tm->tm_yday % 7 - wday + 7) % 7) / 7;
}

/*
 * Return the week number of `tm' (Monday being the first day of the
 * week) as [01, 53].  Week number one is the one that has four or more
 * days in that year.
 */

static int
week_number_mon4 (const struct tm *tm)
{
    int wday  = (tm->tm_wday + 6) % 7;
    int w1day = (wday - tm->tm_yday % 7 + 7) % 7;
    int ret;

    ret = (tm->tm_yday + w1day) / 7;
    if (w1day >= 4)
	--ret;
    if (ret == -1)
	ret = 53;
    else
	++ret;
    return ret;
}

/*
 *
 */

ROKEN_LIB_FUNCTION size_t ROKEN_LIB_CALL
strftime (char *buf, size_t maxsize, const char *format,
	  const struct tm *tm)
{
    size_t n = 0;
    int ret;

    while (*format != '\0' && n < maxsize) {
	if (*format == '%') {
	    ++format;
	    if(*format == 'E' || *format == 'O')
		++format;
	    switch (*format) {
	    case 'a' :
		ret = snprintf (buf, maxsize - n,
				"%s", abb_weekdays[tm->tm_wday]);
		break;
	    case 'A' :
		ret = snprintf (buf, maxsize - n,
				"%s", full_weekdays[tm->tm_wday]);
		break;
	    case 'h' :
	    case 'b' :
		ret = snprintf (buf, maxsize - n,
				"%s", abb_month[tm->tm_mon]);
		break;
	    case 'B' :
		ret = snprintf (buf, maxsize - n,
				"%s", full_month[tm->tm_mon]);
		break;
	    case 'c' :
		ret = snprintf (buf, maxsize - n,
				"%d:%02d:%02d %02d:%02d:%02d",
				tm->tm_year,
				tm->tm_mon + 1,
				tm->tm_mday,
				tm->tm_hour,
				tm->tm_min,
				tm->tm_sec);
		break;
	    case 'C' :
		ret = snprintf (buf, maxsize - n,
				"%02d", (tm->tm_year + 1900) / 100);
		break;
	    case 'd' :
		ret = snprintf (buf, maxsize - n,
				"%02d", tm->tm_mday);
		break;
	    case 'D' :
		ret = snprintf (buf, maxsize - n,
				"%02d/%02d/%02d",
				tm->tm_mon + 1,
				tm->tm_mday,
				(tm->tm_year + 1900) % 100);
		break;
	    case 'e' :
		ret = snprintf (buf, maxsize - n,
				"%2d", tm->tm_mday);
		break;
	    case 'F':
		ret = snprintf (buf, maxsize - n,
				"%04d-%02d-%02d", tm->tm_year + 1900,
				tm->tm_mon + 1, tm->tm_mday);
		break;
	    case 'g':
		/* last two digits of week-based year */
		abort();
	    case 'G':
		/* week-based year */
		abort();
	    case 'H' :
		ret = snprintf (buf, maxsize - n,
				"%02d", tm->tm_hour);
		break;
	    case 'I' :
		ret = snprintf (buf, maxsize - n,
				"%02d",
				hour_24to12 (tm->tm_hour));
		break;
	    case 'j' :
		ret = snprintf (buf, maxsize - n,
				"%03d", tm->tm_yday + 1);
		break;
	    case 'k' :
		ret = snprintf (buf, maxsize - n,
				"%2d", tm->tm_hour);
		break;
	    case 'l' :
		ret = snprintf (buf, maxsize - n,
				"%2d",
				hour_24to12 (tm->tm_hour));
		break;
	    case 'm' :
		ret = snprintf (buf, maxsize - n,
				"%02d", tm->tm_mon + 1);
		break;
	    case 'M' :
		ret = snprintf (buf, maxsize - n,
				"%02d", tm->tm_min);
		break;
	    case 'n' :
		ret = snprintf (buf, maxsize - n, "\n");
		break;
	    case 'p' :
		ret = snprintf (buf, maxsize - n, "%s",
				hour_to_ampm (tm->tm_hour));
		break;
	    case 'r' :
		ret = snprintf (buf, maxsize - n,
				"%02d:%02d:%02d %s",
				hour_24to12 (tm->tm_hour),
				tm->tm_min,
				tm->tm_sec,
				hour_to_ampm (tm->tm_hour));
		break;
	    case 'R' :
		ret = snprintf (buf, maxsize - n,
				"%02d:%02d",
				tm->tm_hour,
				tm->tm_min);
		break;
	    case 's' :
		ret = snprintf (buf, maxsize - n,
				"%d", (int)mktime(rk_UNCONST(tm)));
		break;
	    case 'S' :
		ret = snprintf (buf, maxsize - n,
				"%02d", tm->tm_sec);
		break;
	    case 't' :
		ret = snprintf (buf, maxsize - n, "\t");
		break;
	    case 'T' :
	    case 'X' :
		ret = snprintf (buf, maxsize - n,
				"%02d:%02d:%02d",
				tm->tm_hour,
				tm->tm_min,
				tm->tm_sec);
		break;
	    case 'u' :
		ret = snprintf (buf, maxsize - n,
				"%d", (tm->tm_wday == 0) ? 7 : tm->tm_wday);
		break;
	    case 'U' :
		ret = snprintf (buf, maxsize - n,
				"%02d", week_number_sun (tm));
		break;
	    case 'V' :
		ret = snprintf (buf, maxsize - n,
				"%02d", week_number_mon4 (tm));
		break;
	    case 'w' :
		ret = snprintf (buf, maxsize - n,
				"%d", tm->tm_wday);
		break;
	    case 'W' :
		ret = snprintf (buf, maxsize - n,
				"%02d", week_number_mon (tm));
		break;
	    case 'x' :
		ret = snprintf (buf, maxsize - n,
				"%d:%02d:%02d",
				tm->tm_year,
				tm->tm_mon + 1,
				tm->tm_mday);
		break;
	    case 'y' :
		ret = snprintf (buf, maxsize - n,
				"%02d", (tm->tm_year + 1900) % 100);
		break;
	    case 'Y' :
		ret = snprintf (buf, maxsize - n,
				"%d", tm->tm_year + 1900);
		break;
	    case 'z':
		ret = snprintf (buf, maxsize - n,
				"%ld",
#if defined(HAVE_STRUCT_TM_TM_GMTOFF)
				(long)tm->tm_gmtoff
#elif defined(HAVE_TIMEZONE)
#ifdef HAVE_ALTZONE
				tm->tm_isdst ?
				(long)altzone :
#endif
				(long)timezone
#else
#error Where in timezone chaos are you?
#endif
				);
		break;
	    case 'Z' :
		ret = snprintf (buf, maxsize - n,
				"%s",

#if defined(HAVE_STRUCT_TM_TM_ZONE)
				tm->tm_zone
#elif defined(HAVE_TIMEZONE)
				tzname[tm->tm_isdst]
#else
#error what?
#endif
		    );
		break;
	    case '\0' :
		--format;
		/* FALLTHROUGH */
	    case '%' :
		ret = snprintf (buf, maxsize - n,
				"%%");
		break;
	    default :
		ret = snprintf (buf, maxsize - n,
				"%%%c", *format);
		break;
	    }
	    if (ret < 0 || ret >= (int)(maxsize - n))
		return 0;
	    n   += ret;
	    buf += ret;
	    ++format;
	} else {
	    *buf++ = *format++;
	    ++n;
	}
    }
    *buf = '\0';
    return n;
}
@


1.3
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@@


1.2
log
@fix snprintf abuse and strlcpy abuse, return the string length, which
is at least safe for the pointer arithmatic case
ok cloder@@
@
text
@d2 3
a4 3
 * Copyright (c) 1999 - 2000 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
d6 3
a8 3
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
d10 2
a11 2
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
d13 3
a15 3
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
a32 1
#ifdef HAVE_CONFIG_H
d34 3
a37 3
#include "roken.h"

RCSID("$KTH: strftime.c,v 1.11 2000/07/08 14:22:12 assar Exp $");
d154 1
a154 1
    
d169 1
a169 1
size_t
d174 1
a174 1
    size_t ret;
d289 1
a289 1
		    
d292 1
a292 1
				"%d", (int)mktime((struct tm *)tm));
d350 1
d353 1
d357 1
a357 1
#endif    
d385 1
a385 1
	    if (ret >= maxsize - n)
d395 1
a395 1
    *buf++ = '\0';
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.6rc1
@
text
@d2 1
a2 1
 * Copyright (c) 1999 - 2002 Kungliga Tekniska Högskolan
d38 1
a38 1
RCSID("$KTH: strftime.c,v 1.13 2002/08/20 12:42:37 joda Exp $");
d175 1
a175 1
    int ret;
a350 1
#ifdef HAVE_ALTZONE
a352 1
#endif
d384 1
a384 1
	    if (ret < 0 || ret >= maxsize - n)
@


1.1.1.3
log
@Import of heimdal-0.7.2
@
text
@d38 1
a38 1
RCSID("$KTH: strftime.c,v 1.14 2005/04/12 11:29:08 lha Exp $");
d170 1
a170 1
size_t ROKEN_LIB_FUNCTION
@


