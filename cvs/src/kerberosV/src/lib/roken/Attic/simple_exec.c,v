head	1.3;
access;
symbols
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.2
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.1.1.3.0.28
	OPENBSD_5_3_BASE:1.1.1.3
	OPENBSD_5_2:1.1.1.3.0.26
	OPENBSD_5_2_BASE:1.1.1.3
	OPENBSD_5_1_BASE:1.1.1.3
	OPENBSD_5_1:1.1.1.3.0.24
	OPENBSD_5_0:1.1.1.3.0.22
	OPENBSD_5_0_BASE:1.1.1.3
	OPENBSD_4_9:1.1.1.3.0.20
	OPENBSD_4_9_BASE:1.1.1.3
	OPENBSD_4_8:1.1.1.3.0.18
	OPENBSD_4_8_BASE:1.1.1.3
	OPENBSD_4_7:1.1.1.3.0.14
	OPENBSD_4_7_BASE:1.1.1.3
	OPENBSD_4_6:1.1.1.3.0.16
	OPENBSD_4_6_BASE:1.1.1.3
	OPENBSD_4_5:1.1.1.3.0.12
	OPENBSD_4_5_BASE:1.1.1.3
	OPENBSD_4_4:1.1.1.3.0.10
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.8
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_2:1.1.1.3.0.6
	OPENBSD_4_2_BASE:1.1.1.3
	OPENBSD_4_1:1.1.1.3.0.4
	OPENBSD_4_1_BASE:1.1.1.3
	OPENBSD_4_0:1.1.1.3.0.2
	OPENBSD_4_0_BASE:1.1.1.3
	HEIMDAL_0_7_2:1.1.1.3
	OPENBSD_3_9:1.1.1.2.0.18
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.16
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.14
	OPENBSD_3_7_BASE:1.1.1.2
	HEIMDAL_0_6_3:1.1.1.2
	OPENBSD_3_6:1.1.1.2.0.12
	OPENBSD_3_6_BASE:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.10
	OPENBSD_3_5_BASE:1.1.1.2
	OPENBSD_3_4:1.1.1.2.0.8
	OPENBSD_3_4_BASE:1.1.1.2
	HEIMDAL_0_6:1.1.1.2
	HEIMDAL_0_6RC1:1.1.1.2
	OPENBSD_3_3:1.1.1.2.0.6
	OPENBSD_3_3_BASE:1.1.1.2
	OPENBSD_3_2:1.1.1.2.0.4
	OPENBSD_3_2_BASE:1.1.1.2
	OPENBSD_3_1:1.1.1.2.0.2
	OPENBSD_3_1_BASE:1.1.1.2
	HEIMDAL_0_4e:1.1.1.2
	OPENBSD_3_0:1.1.1.1.0.2
	OPENBSD_3_0_BASE:1.1.1.1
	HEIMDAL_0_3f:1.1.1.1
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2014.04.22.10.01.34;	author reyk;	state dead;
branches;
next	1.2;

1.2
date	2013.06.17.18.57.45;	author robert;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.25.07.51.20;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.51.20;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.02.06.08.55.51;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.04.14.07.33.44;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.3
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/*
 * Copyright (c) 1998 - 2001, 2004 Kungliga Tekniska HÃ¶gskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <config.h>

#include <stdarg.h>
#include <stdlib.h>
#ifdef HAVE_SYS_TYPES_H
#include <sys/types.h>
#endif
#ifdef HAVE_SYS_WAIT_H
#include <sys/wait.h>
#endif
#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif
#include <errno.h>

#include "roken.h"

#define EX_NOEXEC	126
#define EX_NOTFOUND	127

/* return values:
   SE_E_UNSPECIFIED   on `unspecified' system errors
   SE_E_FORKFAILED    on fork failures
   SE_E_WAITPIDFAILED on waitpid errors
   SE_E_EXECTIMEOUT   exec timeout
   0-   is return value from subprocess
   SE_E_NOEXEC        if the program couldn't be executed
   SE_E_NOTFOUND      if the program couldn't be found
   128- is 128 + signal that killed subprocess

   possible values `func' can return:
   ((time_t)-2)		exit loop w/o killing child and return
   			`exec timeout'/-4 from simple_exec
   ((time_t)-1)		kill child with SIGTERM and wait for child to exit
   0			don't timeout again
   n			seconds to next timeout
   */

static int sig_alarm;

static RETSIGTYPE
sigtimeout(int sig)
{
    sig_alarm = 1;
    SIGRETURN(0);
}

ROKEN_LIB_FUNCTION int ROKEN_LIB_CALL
wait_for_process_timed(pid_t pid, time_t (*func)(void *),
		       void *ptr, time_t timeout)
{
    RETSIGTYPE (*old_func)(int sig) = NULL;
    unsigned int oldtime = 0;
    int ret;

    sig_alarm = 0;

    if (func) {
	old_func = signal(SIGALRM, sigtimeout);
	oldtime = alarm(timeout);
    }

    while(1) {
	int status;

	while(waitpid(pid, &status, 0) < 0) {
	    if (errno != EINTR) {
		ret = SE_E_WAITPIDFAILED;
		goto out;
	    }
	    if (func == NULL)
		continue;
	    if (sig_alarm == 0)
		continue;
	    timeout = (*func)(ptr);
	    if (timeout == (time_t)-1) {
		kill(pid, SIGTERM);
		continue;
	    } else if (timeout == (time_t)-2) {
		ret = SE_E_EXECTIMEOUT;
		goto out;
	    }
	    alarm(timeout);
	}
	if(WIFSTOPPED(status))
	    continue;
	if(WIFEXITED(status)) {
	    ret = WEXITSTATUS(status);
	    break;
	}
	if(WIFSIGNALED(status)) {
	    ret = WTERMSIG(status) + 128;
	    break;
	}
    }
 out:
    if (func) {
	signal(SIGALRM, old_func);
	alarm(oldtime);
    }
    return ret;
}

ROKEN_LIB_FUNCTION int ROKEN_LIB_CALL
wait_for_process(pid_t pid)
{
    return wait_for_process_timed(pid, NULL, NULL, 0);
}

ROKEN_LIB_FUNCTION int ROKEN_LIB_CALL
pipe_execv(FILE **stdin_fd, FILE **stdout_fd, FILE **stderr_fd,
	   const char *file, ...)
{
    int in_fd[2], out_fd[2], err_fd[2];
    pid_t pid;
    va_list ap;
    char **argv;

    if(stdin_fd != NULL)
	pipe(in_fd);
    if(stdout_fd != NULL)
	pipe(out_fd);
    if(stderr_fd != NULL)
	pipe(err_fd);
    pid = fork();
    switch(pid) {
    case 0:
	va_start(ap, file);
	argv = vstrcollect(&ap);
	va_end(ap);
	if(argv == NULL)
	    exit(-1);

	/* close pipes we're not interested in */
	if(stdin_fd != NULL)
	    close(in_fd[1]);
	if(stdout_fd != NULL)
	    close(out_fd[0]);
	if(stderr_fd != NULL)
	    close(err_fd[0]);

	/* pipe everything caller doesn't care about to /dev/null */
	if(stdin_fd == NULL)
	    in_fd[0] = open(_PATH_DEVNULL, O_RDONLY);
	if(stdout_fd == NULL)
	    out_fd[1] = open(_PATH_DEVNULL, O_WRONLY);
	if(stderr_fd == NULL)
	    err_fd[1] = open(_PATH_DEVNULL, O_WRONLY);

	/* move to proper descriptors */
	if(in_fd[0] != STDIN_FILENO) {
	    dup2(in_fd[0], STDIN_FILENO);
	    close(in_fd[0]);
	}
	if(out_fd[1] != STDOUT_FILENO) {
	    dup2(out_fd[1], STDOUT_FILENO);
	    close(out_fd[1]);
	}
	if(err_fd[1] != STDERR_FILENO) {
	    dup2(err_fd[1], STDERR_FILENO);
	    close(err_fd[1]);
	}

	closefrom(3);

	execv(file, argv);
	exit((errno == ENOENT) ? EX_NOTFOUND : EX_NOEXEC);
    case -1:
	if(stdin_fd != NULL) {
	    close(in_fd[0]);
	    close(in_fd[1]);
	}
	if(stdout_fd != NULL) {
	    close(out_fd[0]);
	    close(out_fd[1]);
	}
	if(stderr_fd != NULL) {
	    close(err_fd[0]);
	    close(err_fd[1]);
	}
	return SE_E_FORKFAILED;
    default:
	if(stdin_fd != NULL) {
	    close(in_fd[0]);
	    *stdin_fd = fdopen(in_fd[1], "w");
	}
	if(stdout_fd != NULL) {
	    close(out_fd[1]);
	    *stdout_fd = fdopen(out_fd[0], "r");
	}
	if(stderr_fd != NULL) {
	    close(err_fd[1]);
	    *stderr_fd = fdopen(err_fd[0], "r");
	}
    }
    return pid;
}

ROKEN_LIB_FUNCTION int ROKEN_LIB_CALL
simple_execvp_timed(const char *file, char *const args[],
		    time_t (*func)(void *), void *ptr, time_t timeout)
{
    pid_t pid = fork();
    switch(pid){
    case -1:
	return SE_E_FORKFAILED;
    case 0:
	execvp(file, args);
	exit((errno == ENOENT) ? EX_NOTFOUND : EX_NOEXEC);
    default:
	return wait_for_process_timed(pid, func, ptr, timeout);
    }
}

ROKEN_LIB_FUNCTION int ROKEN_LIB_CALL
simple_execvp(const char *file, char *const args[])
{
    return simple_execvp_timed(file, args, NULL, NULL, 0);
}

/* gee, I'd like a execvpe */
ROKEN_LIB_FUNCTION int ROKEN_LIB_CALL
simple_execve_timed(const char *file, char *const args[], char *const envp[],
		    time_t (*func)(void *), void *ptr, time_t timeout)
{
    pid_t pid = fork();
    switch(pid){
    case -1:
	return SE_E_FORKFAILED;
    case 0:
	execve(file, args, envp);
	exit((errno == ENOENT) ? EX_NOTFOUND : EX_NOEXEC);
    default:
	return wait_for_process_timed(pid, func, ptr, timeout);
    }
}

ROKEN_LIB_FUNCTION int ROKEN_LIB_CALL
simple_execve(const char *file, char *const args[], char *const envp[])
{
    return simple_execve_timed(file, args, envp, NULL, NULL, 0);
}

ROKEN_LIB_FUNCTION int ROKEN_LIB_CALL
simple_execlp(const char *file, ...)
{
    va_list ap;
    char **argv;
    int ret;

    va_start(ap, file);
    argv = vstrcollect(&ap);
    va_end(ap);
    if(argv == NULL)
	return SE_E_UNSPECIFIED;
    ret = simple_execvp(file, argv);
    free(argv);
    return ret;
}

ROKEN_LIB_FUNCTION int ROKEN_LIB_CALL
simple_execle(const char *file, ... /* ,char *const envp[] */)
{
    va_list ap;
    char **argv;
    char *const* envp;
    int ret;

    va_start(ap, file);
    argv = vstrcollect(&ap);
    envp = va_arg(ap, char **);
    va_end(ap);
    if(argv == NULL)
	return SE_E_UNSPECIFIED;
    ret = simple_execve(file, argv, envp);
    free(argv);
    return ret;
}
@


1.2
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@@


1.1
log
@Initial revision
@
text
@d2 3
a4 3
 * Copyright (c) 1998 - 2000 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
d6 3
a8 3
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
d10 2
a11 2
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
d13 3
a15 3
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
d17 3
a19 3
 * 3. Neither the name of the Institute nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission. 
d21 11
a31 11
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE. 
a33 1
#ifdef HAVE_CONFIG_H
a34 2
RCSID("$KTH: simple_exec.c,v 1.8 2000/11/05 16:41:06 joda Exp $");
#endif
d49 1
a49 1
#include <roken.h>
d55 4
a58 3
   -1   on `unspecified' system errors
   -2   on fork failures
   -3   on waitpid errors
d60 2
a61 2
   126  if the program couldn't be executed
   127  if the program couldn't be found
d63 7
d72 4
a75 2
static int
check_status(pid_t pid)
d77 19
d99 19
a117 3
	while(waitpid(pid, &status, 0) < 0)
	    if (errno != EINTR)
		return -3;
d120 13
a132 4
	if(WIFEXITED(status))
	    return WEXITSTATUS(status);
	if(WIFSIGNALED(status))
	    return WTERMSIG(status) + 128;
d134 1
d137 98
a234 2
int
simple_execvp(const char *file, char *const args[])
d239 1
a239 1
	return -2;
d243 2
a244 2
    default: 
	return check_status(pid);
d248 6
d255 3
a257 2
int
simple_execve(const char *file, char *const args[], char *const envp[])
d262 1
a262 1
	return -2;
d266 2
a267 2
    default: 
	return check_status(pid);
d271 7
a277 1
int
d288 1
a288 1
	return -1;
d294 1
a294 1
int
d307 1
a307 1
	return -1;
a308 17
    free(argv);
    return ret;
}

int
simple_execl(const char *file, ...) 
{
    va_list ap;
    char **argv;
    int ret;

    va_start(ap, file);
    argv = vstrcollect(&ap);
    va_end(ap);
    if(argv == NULL)
	return -1;
    ret = simple_execve(file, argv, environ);
@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.4e
@
text
@d2 1
a2 1
 * Copyright (c) 1998 - 2001 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: simple_exec.c,v 1.10 2001/06/21 03:38:03 assar Exp $");
d67 2
a68 2
int
wait_for_process(pid_t pid)
a85 87
pipe_execv(FILE **stdin_fd, FILE **stdout_fd, FILE **stderr_fd, 
	   const char *file, ...)
{
    int in_fd[2], out_fd[2], err_fd[2];
    pid_t pid;
    va_list ap;
    char **argv;

    if(stdin_fd != NULL)
	pipe(in_fd);
    if(stdout_fd != NULL)
	pipe(out_fd);
    if(stderr_fd != NULL)
	pipe(err_fd);
    pid = fork();
    switch(pid) {
    case 0:
	va_start(ap, file);
	argv = vstrcollect(&ap);
	va_end(ap);
	if(argv == NULL)
	    exit(-1);

	/* close pipes we're not interested in */
	if(stdin_fd != NULL)
	    close(in_fd[1]);
	if(stdout_fd != NULL)
	    close(out_fd[0]);
	if(stderr_fd != NULL)
	    close(err_fd[0]);

	/* pipe everything caller doesn't care about to /dev/null */
	if(stdin_fd == NULL)
	    in_fd[0] = open(_PATH_DEVNULL, O_RDONLY);
	if(stdout_fd == NULL)
	    out_fd[1] = open(_PATH_DEVNULL, O_WRONLY);
	if(stderr_fd == NULL)
	    err_fd[1] = open(_PATH_DEVNULL, O_WRONLY);

	/* move to proper descriptors */
	if(in_fd[0] != STDIN_FILENO) {
	    dup2(in_fd[0], STDIN_FILENO);
	    close(in_fd[0]);
	}
	if(out_fd[1] != STDOUT_FILENO) {
	    dup2(out_fd[1], STDOUT_FILENO);
	    close(out_fd[1]);
	}
	if(err_fd[1] != STDERR_FILENO) {
	    dup2(err_fd[1], STDERR_FILENO);
	    close(err_fd[1]);
	}

	execv(file, argv);
	exit((errno == ENOENT) ? EX_NOTFOUND : EX_NOEXEC);
    case -1:
	if(stdin_fd != NULL) {
	    close(in_fd[0]);
	    close(in_fd[1]);
	}
	if(stdout_fd != NULL) {
	    close(out_fd[0]);
	    close(out_fd[1]);
	}
	if(stderr_fd != NULL) {
	    close(err_fd[0]);
	    close(err_fd[1]);
	}
	return -2;
    default:
	if(stdin_fd != NULL) {
	    close(in_fd[0]);
	    *stdin_fd = fdopen(in_fd[1], "w");
	}
	if(stdout_fd != NULL) {
	    close(out_fd[1]);
	    *stdout_fd = fdopen(out_fd[0], "r");
	}
	if(stderr_fd != NULL) {
	    close(err_fd[1]);
	    *stderr_fd = fdopen(err_fd[0], "r");
	}
    }
    return pid;
}

int
d96 1
a96 1
	return wait_for_process(pid);
d112 1
a112 1
	return wait_for_process(pid);
@


1.1.1.3
log
@Import of heimdal-0.7.2
@
text
@d2 1
a2 1
 * Copyright (c) 1998 - 2001, 2004 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: simple_exec.c,v 1.14 2005/04/13 11:39:00 lha Exp $");
a60 1
   -4   exec timeout
a64 7

   possible values `func' can return:
   ((time_t)-2)		exit loop w/o killing child and return
   			`exec timeout'/-4 from simple_exec
   ((time_t)-1)		kill child with SIGTERM and wait for child to exit
   0			don't timeout again
   n			seconds to next timeout
d67 2
a68 12
static int sig_alarm;

static RETSIGTYPE
sigtimeout(int sig)
{
    sig_alarm = 1;
    SIGRETURN(0);
}

int ROKEN_LIB_FUNCTION
wait_for_process_timed(pid_t pid, time_t (*func)(void *), 
		       void *ptr, time_t timeout)
a69 11
    RETSIGTYPE (*old_func)(int sig) = NULL;
    unsigned int oldtime = 0;
    int ret;

    sig_alarm = 0;

    if (func) {
	old_func = signal(SIGALRM, sigtimeout);
	oldtime = alarm(timeout);
    }

d73 3
a75 19
	while(waitpid(pid, &status, 0) < 0) {
	    if (errno != EINTR) {
		ret = -3;
		goto out;
	    }
	    if (func == NULL)
		continue;
	    if (sig_alarm == 0)
		continue;
	    timeout = (*func)(ptr);
	    if (timeout == (time_t)-1) {
		kill(pid, SIGTERM);
		continue;
	    } else if (timeout == (time_t)-2) {
		ret = -4;
		goto out;
	    }
	    alarm(timeout);
	}
d78 4
a81 8
	if(WIFEXITED(status)) {
	    ret = WEXITSTATUS(status);
	    break;
	}
	if(WIFSIGNALED(status)) {
	    ret = WTERMSIG(status) + 128;
	    break;
	}
a82 6
 out:
    if (func) {
	signal(SIGALRM, old_func);
	alarm(oldtime);
    }
    return ret;
d85 1
a85 7
int ROKEN_LIB_FUNCTION
wait_for_process(pid_t pid)
{
    return wait_for_process_timed(pid, NULL, NULL, 0);
}

int ROKEN_LIB_FUNCTION
a138 2
	closefrom(3);

d172 2
a173 3
int ROKEN_LIB_FUNCTION
simple_execvp_timed(const char *file, char *const args[], 
		    time_t (*func)(void *), void *ptr, time_t timeout)
d183 1
a183 1
	return wait_for_process_timed(pid, func, ptr, timeout);
a186 6
int ROKEN_LIB_FUNCTION
simple_execvp(const char *file, char *const args[])
{
    return simple_execvp_timed(file, args, NULL, NULL, 0);
}

d188 2
a189 3
int ROKEN_LIB_FUNCTION
simple_execve_timed(const char *file, char *const args[], char *const envp[],
		    time_t (*func)(void *), void *ptr, time_t timeout)
d199 1
a199 1
	return wait_for_process_timed(pid, func, ptr, timeout);
d203 1
a203 7
int ROKEN_LIB_FUNCTION
simple_execve(const char *file, char *const args[], char *const envp[])
{
    return simple_execve_timed(file, args, envp, NULL, NULL, 0);
}

int ROKEN_LIB_FUNCTION
d220 1
a220 1
int ROKEN_LIB_FUNCTION
d239 1
a239 1
int ROKEN_LIB_FUNCTION
@


