head	1.3;
access;
symbols
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.2
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.1.1.3.0.28
	OPENBSD_5_3_BASE:1.1.1.3
	OPENBSD_5_2:1.1.1.3.0.26
	OPENBSD_5_2_BASE:1.1.1.3
	OPENBSD_5_1_BASE:1.1.1.3
	OPENBSD_5_1:1.1.1.3.0.24
	OPENBSD_5_0:1.1.1.3.0.22
	OPENBSD_5_0_BASE:1.1.1.3
	OPENBSD_4_9:1.1.1.3.0.20
	OPENBSD_4_9_BASE:1.1.1.3
	OPENBSD_4_8:1.1.1.3.0.18
	OPENBSD_4_8_BASE:1.1.1.3
	OPENBSD_4_7:1.1.1.3.0.14
	OPENBSD_4_7_BASE:1.1.1.3
	OPENBSD_4_6:1.1.1.3.0.16
	OPENBSD_4_6_BASE:1.1.1.3
	OPENBSD_4_5:1.1.1.3.0.12
	OPENBSD_4_5_BASE:1.1.1.3
	OPENBSD_4_4:1.1.1.3.0.10
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.8
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_2:1.1.1.3.0.6
	OPENBSD_4_2_BASE:1.1.1.3
	OPENBSD_4_1:1.1.1.3.0.4
	OPENBSD_4_1_BASE:1.1.1.3
	OPENBSD_4_0:1.1.1.3.0.2
	OPENBSD_4_0_BASE:1.1.1.3
	HEIMDAL_0_7_2:1.1.1.3
	OPENBSD_3_9:1.1.1.2.0.12
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.10
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.8
	OPENBSD_3_7_BASE:1.1.1.2
	HEIMDAL_0_6_3:1.1.1.2
	OPENBSD_3_6:1.1.1.2.0.6
	OPENBSD_3_6_BASE:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.4
	OPENBSD_3_5_BASE:1.1.1.2
	OPENBSD_3_4:1.1.1.2.0.2
	OPENBSD_3_4_BASE:1.1.1.2
	HEIMDAL_0_6:1.1.1.2
	HEIMDAL_0_6RC1:1.1.1.2
	OPENBSD_3_3:1.1.1.1.0.8
	OPENBSD_3_3_BASE:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.6
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.4
	OPENBSD_3_1_BASE:1.1.1.1
	HEIMDAL_0_4e:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.2
	OPENBSD_3_0_BASE:1.1.1.1
	HEIMDAL_0_3f:1.1.1.1
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2014.04.22.10.01.34;	author reyk;	state dead;
branches;
next	1.2;

1.2
date	2013.06.17.18.57.45;	author robert;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.25.07.51.17;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.51.17;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.05.11.02.16.08;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.04.14.07.33.44;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.3
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/*
 * Copyright (c) 2000, 2002, 2004 Kungliga Tekniska HÃ¶gskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <config.h>

#include "roken.h"
#include "rtbl.h"

struct column_entry {
    char *data;
};

struct column_data {
    char *header;
    char *prefix;
    int width;
    unsigned flags;
    size_t num_rows;
    struct column_entry *rows;
    unsigned int column_id;
    char *suffix;
};

struct rtbl_data {
    char *column_prefix;
    size_t num_columns;
    struct column_data **columns;
    unsigned int flags;
    char *column_separator;
};

ROKEN_LIB_FUNCTION rtbl_t ROKEN_LIB_CALL
rtbl_create (void)
{
    return calloc (1, sizeof (struct rtbl_data));
}

ROKEN_LIB_FUNCTION void ROKEN_LIB_CALL
rtbl_set_flags (rtbl_t table, unsigned int flags)
{
    table->flags = flags;
}

ROKEN_LIB_FUNCTION unsigned int ROKEN_LIB_CALL
rtbl_get_flags (rtbl_t table)
{
    return table->flags;
}

static struct column_data *
rtbl_get_column_by_id (rtbl_t table, unsigned int id)
{
    size_t i;
    for(i = 0; i < table->num_columns; i++)
	if(table->columns[i]->column_id == id)
	    return table->columns[i];
    return NULL;
}

static struct column_data *
rtbl_get_column (rtbl_t table, const char *column)
{
    size_t i;
    for(i = 0; i < table->num_columns; i++)
	if(strcmp(table->columns[i]->header, column) == 0)
	    return table->columns[i];
    return NULL;
}

ROKEN_LIB_FUNCTION void ROKEN_LIB_CALL
rtbl_destroy (rtbl_t table)
{
    size_t i, j;

    for (i = 0; i < table->num_columns; i++) {
	struct column_data *c = table->columns[i];

	for (j = 0; j < c->num_rows; j++)
	    free (c->rows[j].data);
	free (c->rows);
	free (c->header);
	free (c->prefix);
	free (c->suffix);
	free (c);
    }
    free (table->column_prefix);
    free (table->column_separator);
    free (table->columns);
    free (table);
}

ROKEN_LIB_FUNCTION int ROKEN_LIB_CALL
rtbl_add_column_by_id (rtbl_t table, unsigned int id,
		       const char *header, unsigned int flags)
{
    struct column_data *col, **tmp;

    tmp = realloc (table->columns, (table->num_columns + 1) * sizeof (*tmp));
    if (tmp == NULL)
	return ENOMEM;
    table->columns = tmp;
    col = malloc (sizeof (*col));
    if (col == NULL)
	return ENOMEM;
    col->header = strdup (header);
    if (col->header == NULL) {
	free (col);
	return ENOMEM;
    }
    col->prefix = NULL;
    col->width = 0;
    col->flags = flags;
    col->num_rows = 0;
    col->rows = NULL;
    col->column_id = id;
    col->suffix = NULL;
    table->columns[table->num_columns++] = col;
    return 0;
}

ROKEN_LIB_FUNCTION int ROKEN_LIB_CALL
rtbl_add_column (rtbl_t table, const char *header, unsigned int flags)
{
    return rtbl_add_column_by_id(table, 0, header, flags);
}

ROKEN_LIB_FUNCTION int ROKEN_LIB_CALL
rtbl_new_row(rtbl_t table)
{
    size_t max_rows = 0;
    size_t c;
    for (c = 0; c < table->num_columns; c++)
	if(table->columns[c]->num_rows > max_rows)
	    max_rows = table->columns[c]->num_rows;
    for (c = 0; c < table->num_columns; c++) {
	struct column_entry *tmp;

	if(table->columns[c]->num_rows == max_rows)
	    continue;
	tmp = realloc(table->columns[c]->rows,
		      max_rows * sizeof(table->columns[c]->rows));
	if(tmp == NULL)
	    return ENOMEM;
	table->columns[c]->rows = tmp;
	while(table->columns[c]->num_rows < max_rows) {
	    if((tmp[table->columns[c]->num_rows++].data = strdup("")) == NULL)
		return ENOMEM;
	}
    }
    return 0;
}

static void
column_compute_width (rtbl_t table, struct column_data *column)
{
    size_t i;

    if(table->flags & RTBL_HEADER_STYLE_NONE)
	column->width = 0;
    else
	column->width = strlen (column->header);
    for (i = 0; i < column->num_rows; i++)
	column->width = max (column->width, (int) strlen (column->rows[i].data));
}

/* DEPRECATED */
ROKEN_LIB_FUNCTION int ROKEN_LIB_CALL
rtbl_set_prefix (rtbl_t table, const char *prefix)
{
    if (table->column_prefix)
	free (table->column_prefix);
    table->column_prefix = strdup (prefix);
    if (table->column_prefix == NULL)
	return ENOMEM;
    return 0;
}

ROKEN_LIB_FUNCTION int ROKEN_LIB_CALL
rtbl_set_separator (rtbl_t table, const char *separator)
{
    if (table->column_separator)
	free (table->column_separator);
    table->column_separator = strdup (separator);
    if (table->column_separator == NULL)
	return ENOMEM;
    return 0;
}

ROKEN_LIB_FUNCTION int ROKEN_LIB_CALL
rtbl_set_column_prefix (rtbl_t table, const char *column,
			const char *prefix)
{
    struct column_data *c = rtbl_get_column (table, column);

    if (c == NULL)
	return -1;
    if (c->prefix)
	free (c->prefix);
    c->prefix = strdup (prefix);
    if (c->prefix == NULL)
	return ENOMEM;
    return 0;
}

ROKEN_LIB_FUNCTION int ROKEN_LIB_CALL
rtbl_set_column_affix_by_id(rtbl_t table, unsigned int id,
			    const char *prefix, const char *suffix)
{
    struct column_data *c = rtbl_get_column_by_id (table, id);

    if (c == NULL)
	return -1;
    if (c->prefix)
	free (c->prefix);
    if(prefix == NULL)
	c->prefix = NULL;
    else {
	c->prefix = strdup (prefix);
	if (c->prefix == NULL)
	    return ENOMEM;
    }

    if (c->suffix)
	free (c->suffix);
    if(suffix == NULL)
	c->suffix = NULL;
    else {
	c->suffix = strdup (suffix);
	if (c->suffix == NULL)
	    return ENOMEM;
    }
    return 0;
}


static const char *
get_column_prefix (rtbl_t table, struct column_data *c)
{
    if (c == NULL)
	return "";
    if (c->prefix)
	return c->prefix;
    if (table->column_prefix)
	return table->column_prefix;
    return "";
}

static const char *
get_column_suffix (rtbl_t table, struct column_data *c)
{
    if (c && c->suffix)
	return c->suffix;
    return "";
}

static int
add_column_entry (struct column_data *c, const char *data)
{
    struct column_entry row, *tmp;

    row.data = strdup (data);
    if (row.data == NULL)
	return ENOMEM;
    tmp = realloc (c->rows, (c->num_rows + 1) * sizeof (*tmp));
    if (tmp == NULL) {
	free (row.data);
	return ENOMEM;
    }
    c->rows = tmp;
    c->rows[c->num_rows++] = row;
    return 0;
}

ROKEN_LIB_FUNCTION int ROKEN_LIB_CALL
rtbl_add_column_entry_by_id (rtbl_t table, unsigned int id, const char *data)
{
    struct column_data *c = rtbl_get_column_by_id (table, id);

    if (c == NULL)
	return -1;

    return add_column_entry(c, data);
}

ROKEN_LIB_FUNCTION int ROKEN_LIB_CALL
rtbl_add_column_entryv_by_id (rtbl_t table, unsigned int id,
			      const char *fmt, ...)
{
    va_list ap;
    char *str;
    int ret;

    va_start(ap, fmt);
    ret = vasprintf(&str, fmt, ap);
    va_end(ap);
    if (ret == -1)
	return -1;
    ret = rtbl_add_column_entry_by_id(table, id, str);
    free(str);
    return ret;
}

ROKEN_LIB_FUNCTION int ROKEN_LIB_CALL
rtbl_add_column_entry (rtbl_t table, const char *column, const char *data)
{
    struct column_data *c = rtbl_get_column (table, column);

    if (c == NULL)
	return -1;

    return add_column_entry(c, data);
}

ROKEN_LIB_FUNCTION int ROKEN_LIB_CALL
rtbl_add_column_entryv (rtbl_t table, const char *column, const char *fmt, ...)
{
    va_list ap;
    char *str;
    int ret;

    va_start(ap, fmt);
    ret = vasprintf(&str, fmt, ap);
    va_end(ap);
    if (ret == -1)
	return -1;
    ret = rtbl_add_column_entry(table, column, str);
    free(str);
    return ret;
}


ROKEN_LIB_FUNCTION int ROKEN_LIB_CALL
rtbl_format (rtbl_t table, FILE * f)
{
    size_t i, j;

    for (i = 0; i < table->num_columns; i++)
	column_compute_width (table, table->columns[i]);
    if((table->flags & RTBL_HEADER_STYLE_NONE) == 0) {
	for (i = 0; i < table->num_columns; i++) {
	    struct column_data *c = table->columns[i];

	    if(table->column_separator != NULL && i > 0)
		fprintf (f, "%s", table->column_separator);
	    fprintf (f, "%s", get_column_prefix (table, c));
	    if(i == table->num_columns - 1 && c->suffix == NULL)
		/* last column, so no need to pad with spaces */
		fprintf (f, "%-*s", 0, c->header);
	    else
		fprintf (f, "%-*s", (int)c->width, c->header);
	    fprintf (f, "%s", get_column_suffix (table, c));
	}
	fprintf (f, "\n");
    }

    for (j = 0;; j++) {
	int flag = 0;

	/* are there any more rows left? */
	for (i = 0; flag == 0 && i < table->num_columns; ++i) {
	    struct column_data *c = table->columns[i];

	    if (c->num_rows > j) {
		++flag;
		break;
	    }
	}
	if (flag == 0)
	    break;

	for (i = 0; i < table->num_columns; i++) {
	    int w;
	    struct column_data *c = table->columns[i];

	    if(table->column_separator != NULL && i > 0)
		fprintf (f, "%s", table->column_separator);

	    w = c->width;

	    if ((c->flags & RTBL_ALIGN_RIGHT) == 0) {
		if(i == table->num_columns - 1 && c->suffix == NULL)
		    /* last column, so no need to pad with spaces */
		    w = 0;
		else
		    w = -w;
	    }
	    fprintf (f, "%s", get_column_prefix (table, c));
	    if (c->num_rows <= j)
		fprintf (f, "%*s", w, "");
	    else
		fprintf (f, "%*s", w, c->rows[j].data);
	    fprintf (f, "%s", get_column_suffix (table, c));
	}
	fprintf (f, "\n");
    }
    return 0;
}

#ifdef TEST
int
main (int argc, char **argv)
{
    rtbl_t table;

    table = rtbl_create ();
    rtbl_add_column_by_id (table, 0, "Issued", 0);
    rtbl_add_column_by_id (table, 1, "Expires", 0);
    rtbl_add_column_by_id (table, 2, "Foo", RTBL_ALIGN_RIGHT);
    rtbl_add_column_by_id (table, 3, "Principal", 0);

    rtbl_add_column_entry_by_id (table, 0, "Jul  7 21:19:29");
    rtbl_add_column_entry_by_id (table, 1, "Jul  8 07:19:29");
    rtbl_add_column_entry_by_id (table, 2, "73");
    rtbl_add_column_entry_by_id (table, 2, "0");
    rtbl_add_column_entry_by_id (table, 2, "-2000");
    rtbl_add_column_entry_by_id (table, 3, "krbtgt/NADA.KTH.SE@@NADA.KTH.SE");

    rtbl_add_column_entry_by_id (table, 0, "Jul  7 21:19:29");
    rtbl_add_column_entry_by_id (table, 1, "Jul  8 07:19:29");
    rtbl_add_column_entry_by_id (table, 3, "afs/pdc.kth.se@@NADA.KTH.SE");

    rtbl_add_column_entry_by_id (table, 0, "Jul  7 21:19:29");
    rtbl_add_column_entry_by_id (table, 1, "Jul  8 07:19:29");
    rtbl_add_column_entry_by_id (table, 3, "afs@@NADA.KTH.SE");

    rtbl_set_separator (table, "  ");

    rtbl_format (table, stdout);

    rtbl_destroy (table);

    printf("\n");

    table = rtbl_create ();
    rtbl_add_column_by_id (table, 0, "Column A", 0);
    rtbl_set_column_affix_by_id (table, 0, "<", ">");
    rtbl_add_column_by_id (table, 1, "Column B", 0);
    rtbl_set_column_affix_by_id (table, 1, "[", "]");
    rtbl_add_column_by_id (table, 2, "Column C", 0);
    rtbl_set_column_affix_by_id (table, 2, "(", ")");

    rtbl_add_column_entry_by_id (table, 0, "1");
    rtbl_new_row(table);
    rtbl_add_column_entry_by_id (table, 1, "2");
    rtbl_new_row(table);
    rtbl_add_column_entry_by_id (table, 2, "3");
    rtbl_new_row(table);

    rtbl_set_separator (table, "  ");
    rtbl_format (table, stdout);

    rtbl_destroy (table);

    return 0;
}

#endif
@


1.2
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * Copyright (c) 2000 Kungliga Tekniska Högskolan
d5 1
a5 1
 * 
d9 1
a9 1
 * 
d12 1
a12 1
 * 
d16 1
a16 1
 * 
d20 1
a20 1
 * 
a33 1
#ifdef HAVE_CONFIG_H
d35 1
a35 2
RCSID ("$KTH: rtbl.c,v 1.3 2000/07/20 14:42:31 assar Exp $");
#endif
d50 2
d58 2
d62 1
a62 1
rtbl_t
d68 22
d93 1
a93 1
    int i;
d100 1
a100 1
void
d103 1
a103 1
    int i, j;
d110 1
d113 1
d117 1
d119 1
d122 3
a124 2
int
rtbl_add_column (rtbl_t table, const char *header, unsigned int flags)
d140 3
a142 3
    col->prefix   = NULL;
    col->width    = 0;
    col->flags    = flags;
d144 3
a146 1
    col->rows     = NULL;
d151 32
d184 1
a184 1
column_compute_width (struct column_data *column)
d186 1
a186 1
    int i;
d188 4
a191 1
    column->width = strlen (column->header);
d193 1
a193 1
	column->width = max (column->width, strlen (column->rows[i].data));
d196 2
a197 1
int
d208 12
a219 1
int
d235 30
d278 10
a287 2
int
rtbl_add_column_entry (rtbl_t table, const char *column, const char *data)
a290 5
    struct column_data *c = rtbl_get_column (table, column);

    if (c == NULL)
	return -1;

d304 59
a362 1
int
d365 1
a365 1
    int i, j;
d368 4
a371 3
	column_compute_width (table->columns[i]);
    for (i = 0; i < table->num_columns; i++) {
	struct column_data *c = table->columns[i];
d373 11
a383 2
	fprintf (f, "%s", get_column_prefix (table, c));
	fprintf (f, "%-*s", (int)c->width, c->header);
a384 1
    fprintf (f, "\n");
d389 1
d405 3
d410 7
a416 2
	    if ((c->flags & RTBL_ALIGN_RIGHT) == 0)
		w = -w;
d422 1
a433 1
    unsigned int a, b, c, d;
d436 25
a460 19
    rtbl_add_column (table, "Issued", 0, &a);
    rtbl_add_column (table, "Expires", 0, &b);
    rtbl_add_column (table, "Foo", RTBL_ALIGN_RIGHT, &d);
    rtbl_add_column (table, "Principal", 0, &c);

    rtbl_add_column_entry (table, a, "Jul  7 21:19:29");
    rtbl_add_column_entry (table, b, "Jul  8 07:19:29");
    rtbl_add_column_entry (table, d, "73");
    rtbl_add_column_entry (table, d, "0");
    rtbl_add_column_entry (table, d, "-2000");
    rtbl_add_column_entry (table, c, "krbtgt/NADA.KTH.SE@@NADA.KTH.SE");

    rtbl_add_column_entry (table, a, "Jul  7 21:19:29");
    rtbl_add_column_entry (table, b, "Jul  8 07:19:29");
    rtbl_add_column_entry (table, c, "afs/pdc.kth.se@@NADA.KTH.SE");

    rtbl_add_column_entry (table, a, "Jul  7 21:19:29");
    rtbl_add_column_entry (table, b, "Jul  8 07:19:29");
    rtbl_add_column_entry (table, c, "afs@@NADA.KTH.SE");
d462 1
a462 2
    rtbl_set_prefix (table, "  ");
    rtbl_set_column_prefix (table, a, "");
d464 16
d484 1
@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.6rc1
@
text
@d2 1
a2 1
 * Copyright (c) 2000, 2002 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID ("$KTH: rtbl.c,v 1.4 2002/09/04 21:25:09 joda Exp $");
a85 1
	free (c->rows);
a91 1
    free (table);
@


1.1.1.3
log
@Import of heimdal-0.7.2
@
text
@d2 1
a2 1
 * Copyright (c) 2000, 2002, 2004 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID ("$KTH: rtbl.c,v 1.7 2005/04/12 11:29:03 lha Exp $");
a51 2
    unsigned int column_id;
    char *suffix;
a57 2
    unsigned int flags;
    char *column_separator;
d60 1
a60 1
rtbl_t ROKEN_LIB_FUNCTION
a65 22
void ROKEN_LIB_FUNCTION
rtbl_set_flags (rtbl_t table, unsigned int flags)
{
    table->flags = flags;
}

unsigned int ROKEN_LIB_FUNCTION
rtbl_get_flags (rtbl_t table)
{
    return table->flags;
}

static struct column_data *
rtbl_get_column_by_id (rtbl_t table, unsigned int id)
{
    int i;
    for(i = 0; i < table->num_columns; i++)
	if(table->columns[i]->column_id == id)
	    return table->columns[i];
    return NULL;
}

d76 1
a76 1
void ROKEN_LIB_FUNCTION
a88 1
	free (c->suffix);
a91 1
    free (table->column_separator);
d96 2
a97 3
int ROKEN_LIB_FUNCTION
rtbl_add_column_by_id (rtbl_t table, unsigned int id, 
		       const char *header, unsigned int flags)
d113 3
a115 3
    col->prefix = NULL;
    col->width = 0;
    col->flags = flags;
d117 1
a117 3
    col->rows = NULL;
    col->column_id = id;
    col->suffix = NULL;
a121 32
int ROKEN_LIB_FUNCTION
rtbl_add_column (rtbl_t table, const char *header, unsigned int flags)
{
    return rtbl_add_column_by_id(table, 0, header, flags);
}

int ROKEN_LIB_FUNCTION
rtbl_new_row(rtbl_t table)
{
    size_t max_rows = 0;
    size_t c;
    for (c = 0; c < table->num_columns; c++)
	if(table->columns[c]->num_rows > max_rows)
	    max_rows = table->columns[c]->num_rows;
    for (c = 0; c < table->num_columns; c++) {
	struct column_entry *tmp;

	if(table->columns[c]->num_rows == max_rows)
	    continue;
	tmp = realloc(table->columns[c]->rows, 
		      max_rows * sizeof(table->columns[c]->rows));
	if(tmp == NULL)
	    return ENOMEM;
	table->columns[c]->rows = tmp;
	while(table->columns[c]->num_rows < max_rows) {
	    if((tmp[table->columns[c]->num_rows++].data = strdup("")) == NULL)
		return ENOMEM;
	}
    }
    return 0;
}

d123 1
a123 1
column_compute_width (rtbl_t table, struct column_data *column)
d127 1
a127 4
    if(table->flags & RTBL_HEADER_STYLE_NONE)
	column->width = 0;
    else
	column->width = strlen (column->header);
d132 1
a132 2
/* DEPRECATED */
int ROKEN_LIB_FUNCTION
d143 1
a143 12
int ROKEN_LIB_FUNCTION
rtbl_set_separator (rtbl_t table, const char *separator)
{
    if (table->column_separator)
	free (table->column_separator);
    table->column_separator = strdup (separator);
    if (table->column_separator == NULL)
	return ENOMEM;
    return 0;
}

int ROKEN_LIB_FUNCTION
a158 30
int ROKEN_LIB_FUNCTION
rtbl_set_column_affix_by_id(rtbl_t table, unsigned int id,
			    const char *prefix, const char *suffix)
{
    struct column_data *c = rtbl_get_column_by_id (table, id);

    if (c == NULL)
	return -1;
    if (c->prefix)
	free (c->prefix);
    if(prefix == NULL)
	c->prefix = NULL;
    else {
	c->prefix = strdup (prefix);
	if (c->prefix == NULL)
	    return ENOMEM;
    }

    if (c->suffix)
	free (c->suffix);
    if(suffix == NULL)
	c->suffix = NULL;
    else {
	c->suffix = strdup (suffix);
	if (c->suffix == NULL)
	    return ENOMEM;
    }
    return 0;
}

d172 2
a173 2
static const char *
get_column_suffix (rtbl_t table, struct column_data *c)
d175 3
a177 4
    if (c && c->suffix)
	return c->suffix;
    return "";
}
d179 2
a180 4
static int
add_column_entry (struct column_data *c, const char *data)
{
    struct column_entry row, *tmp;
d195 1
a195 23
int ROKEN_LIB_FUNCTION
rtbl_add_column_entry_by_id (rtbl_t table, unsigned int id, const char *data)
{
    struct column_data *c = rtbl_get_column_by_id (table, id);

    if (c == NULL)
	return -1;

    return add_column_entry(c, data);
}

int ROKEN_LIB_FUNCTION
rtbl_add_column_entry (rtbl_t table, const char *column, const char *data)
{
    struct column_data *c = rtbl_get_column (table, column);

    if (c == NULL)
	return -1;

    return add_column_entry(c, data);
}

int ROKEN_LIB_FUNCTION
d201 3
a203 4
	column_compute_width (table, table->columns[i]);
    if((table->flags & RTBL_HEADER_STYLE_NONE) == 0) {
	for (i = 0; i < table->num_columns; i++) {
	    struct column_data *c = table->columns[i];
d205 2
a206 11
	    if(table->column_separator != NULL && i > 0)
		fprintf (f, "%s", table->column_separator);
	    fprintf (f, "%s", get_column_prefix (table, c));
	    if(i == table->num_columns - 1 && c->suffix == NULL)
		/* last column, so no need to pad with spaces */
		fprintf (f, "%-*s", 0, c->header);
	    else
		fprintf (f, "%-*s", (int)c->width, c->header);
	    fprintf (f, "%s", get_column_suffix (table, c));
	}
	fprintf (f, "\n");
d208 1
a212 1
	/* are there any more rows left? */
a227 3
	    if(table->column_separator != NULL && i > 0)
		fprintf (f, "%s", table->column_separator);

d230 2
a231 7
	    if ((c->flags & RTBL_ALIGN_RIGHT) == 0) {
		if(i == table->num_columns - 1 && c->suffix == NULL)
		    /* last column, so no need to pad with spaces */
		    w = 0;
		else
		    w = -w;
	    }
a236 1
	    fprintf (f, "%s", get_column_suffix (table, c));
d248 1
d251 19
a269 19
    rtbl_add_column_by_id (table, 0, "Issued", 0);
    rtbl_add_column_by_id (table, 1, "Expires", 0);
    rtbl_add_column_by_id (table, 2, "Foo", RTBL_ALIGN_RIGHT);
    rtbl_add_column_by_id (table, 3, "Principal", 0);

    rtbl_add_column_entry_by_id (table, 0, "Jul  7 21:19:29");
    rtbl_add_column_entry_by_id (table, 1, "Jul  8 07:19:29");
    rtbl_add_column_entry_by_id (table, 2, "73");
    rtbl_add_column_entry_by_id (table, 2, "0");
    rtbl_add_column_entry_by_id (table, 2, "-2000");
    rtbl_add_column_entry_by_id (table, 3, "krbtgt/NADA.KTH.SE@@NADA.KTH.SE");

    rtbl_add_column_entry_by_id (table, 0, "Jul  7 21:19:29");
    rtbl_add_column_entry_by_id (table, 1, "Jul  8 07:19:29");
    rtbl_add_column_entry_by_id (table, 3, "afs/pdc.kth.se@@NADA.KTH.SE");

    rtbl_add_column_entry_by_id (table, 0, "Jul  7 21:19:29");
    rtbl_add_column_entry_by_id (table, 1, "Jul  8 07:19:29");
    rtbl_add_column_entry_by_id (table, 3, "afs@@NADA.KTH.SE");
d271 2
a272 1
    rtbl_set_separator (table, "  ");
a277 23
    printf("\n");

    table = rtbl_create ();
    rtbl_add_column_by_id (table, 0, "Column A", 0);
    rtbl_set_column_affix_by_id (table, 0, "<", ">");
    rtbl_add_column_by_id (table, 1, "Column B", 0);
    rtbl_set_column_affix_by_id (table, 1, "[", "]");
    rtbl_add_column_by_id (table, 2, "Column C", 0);
    rtbl_set_column_affix_by_id (table, 2, "(", ")");

    rtbl_add_column_entry_by_id (table, 0, "1");
    rtbl_new_row(table);
    rtbl_add_column_entry_by_id (table, 1, "2");
    rtbl_new_row(table);
    rtbl_add_column_entry_by_id (table, 2, "3");
    rtbl_new_row(table);

    rtbl_set_separator (table, "  ");
    rtbl_format (table, stdout);

    rtbl_destroy (table);

    return 0;
@


