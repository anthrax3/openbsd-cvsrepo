head	1.6;
access;
symbols
	OPENBSD_5_5:1.5.0.6
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.4.0.28
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.26
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.24
	OPENBSD_5_0:1.4.0.22
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.20
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.18
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.14
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.16
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.12
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.10
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.8
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.6
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.4
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.2
	OPENBSD_4_0_BASE:1.4
	HEIMDAL_0_7_2:1.1.1.5
	OPENBSD_3_9:1.3.0.12
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.10
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.8
	OPENBSD_3_7_BASE:1.3
	HEIMDAL_0_6_3:1.1.1.4
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	HEIMDAL_0_6:1.1.1.4
	HEIMDAL_0_6RC1:1.1.1.4
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.1.1.3.0.2
	OPENBSD_3_1_BASE:1.1.1.3
	HEIMDAL_0_4e:1.1.1.3
	OPENBSD_3_0:1.1.1.2.0.2
	OPENBSD_3_0_BASE:1.1.1.2
	HEIMDAL_0_3f:1.1.1.2
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2014.04.22.10.01.33;	author reyk;	state dead;
branches;
next	1.5;

1.5
date	2013.06.17.18.57.45;	author robert;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.14.08.15.05;	author biorn;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.11.03.40.00;	author hin;	state Exp;
branches;
next	1.2;

1.2
date	2002.05.30.20.06.23;	author hin;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.25.07.51.10;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.51.10;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.06.22.21.24.59;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.02.06.08.55.45;	author hin;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.05.11.02.16.04;	author hin;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2006.04.14.07.33.39;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.6
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/*
 * Copyright (c) 1997 - 2002 Kungliga Tekniska HÃ¶gskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <config.h>

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "roken.h"
#include "getarg.h"

#define ISFLAG(X) ((X).type == arg_flag || (X).type == arg_negative_flag)

static size_t
print_arg (char *string,
	   size_t len,
	   int mdoc,
	   int longp,
	   struct getargs *arg,
	   char *(i18n)(const char *))
{
    const char *s;

    *string = '\0';

    if (ISFLAG(*arg) || (!longp && arg->type == arg_counter))
	return 0;

    if(mdoc){
	if(longp)
	    strlcat(string, "= Ns", len);
	strlcat(string, " Ar ", len);
    } else {
	if (longp)
	    strlcat (string, "=", len);
	else
	    strlcat (string, " ", len);
    }

    if (arg->arg_help)
	s = (*i18n)(arg->arg_help);
    else if (arg->type == arg_integer || arg->type == arg_counter)
	s = "integer";
    else if (arg->type == arg_string)
	s = "string";
    else if (arg->type == arg_strings)
	s = "strings";
    else if (arg->type == arg_double)
	s = "float";
    else
	s = "<undefined>";

    strlcat(string, s, len);
    return 1 + strlen(s);
}

static void
mandoc_template(struct getargs *args,
		size_t num_args,
		const char *progname,
		const char *extra_string,
		char *(i18n)(const char *))
{
    size_t i;
    char timestr[64], cmd[64];
    char buf[128];
    const char *p;
    time_t t;

    printf(".\\\" Things to fix:\n");
    printf(".\\\"   * correct section, and operating system\n");
    printf(".\\\"   * remove Op from mandatory flags\n");
    printf(".\\\"   * use better macros for arguments (like .Pa for files)\n");
    printf(".\\\"\n");
    t = time(NULL);
    strftime(timestr, sizeof(timestr), "%B %e, %Y", localtime(&t));
    printf(".Dd %s\n", timestr);
    p = strrchr(progname, '/');
    if(p) p++; else p = progname;
    strlcpy(cmd, p, sizeof(cmd));
    strupr(cmd);

    printf(".Dt %s SECTION\n", cmd);
    printf(".Os OPERATING_SYSTEM\n");
    printf(".Sh NAME\n");
    printf(".Nm %s\n", p);
    printf(".Nd in search of a description\n");
    printf(".Sh SYNOPSIS\n");
    printf(".Nm\n");
    for(i = 0; i < num_args; i++){
	/* we seem to hit a limit on number of arguments if doing
           short and long flags with arguments -- split on two lines */
	if(ISFLAG(args[i]) ||
	   args[i].short_name == 0 || args[i].long_name == NULL) {
	    printf(".Op ");

	    if(args[i].short_name) {
		print_arg(buf, sizeof(buf), 1, 0, args + i, i18n);
		printf("Fl %c%s", args[i].short_name, buf);
		if(args[i].long_name)
		    printf(" | ");
	    }
	    if(args[i].long_name) {
		print_arg(buf, sizeof(buf), 1, 1, args + i, i18n);
		printf("Fl Fl %s%s%s",
		       args[i].type == arg_negative_flag ? "no-" : "",
		       args[i].long_name, buf);
	    }
	    printf("\n");
	} else {
	    print_arg(buf, sizeof(buf), 1, 0, args + i, i18n);
	    printf(".Oo Fl %c%s \\*(Ba Xo\n", args[i].short_name, buf);
	    print_arg(buf, sizeof(buf), 1, 1, args + i, i18n);
	    printf(".Fl Fl %s%s\n.Xc\n.Oc\n", args[i].long_name, buf);
	}
    /*
	    if(args[i].type == arg_strings)
		fprintf (stderr, "...");
		*/
    }
    if (extra_string && *extra_string)
	printf (".Ar %s\n", extra_string);
    printf(".Sh DESCRIPTION\n");
    printf("Supported options:\n");
    printf(".Bl -tag -width Ds\n");
    for(i = 0; i < num_args; i++){
	printf(".It Xo\n");
	if(args[i].short_name){
	    printf(".Fl %c", args[i].short_name);
	    print_arg(buf, sizeof(buf), 1, 0, args + i, i18n);
	    printf("%s", buf);
	    if(args[i].long_name)
		printf(" ,");
	    printf("\n");
	}
	if(args[i].long_name){
	    printf(".Fl Fl %s%s",
		   args[i].type == arg_negative_flag ? "no-" : "",
		   args[i].long_name);
	    print_arg(buf, sizeof(buf), 1, 1, args + i, i18n);
	    printf("%s\n", buf);
	}
	printf(".Xc\n");
	if(args[i].help)
	    printf("%s\n", args[i].help);
    /*
	    if(args[i].type == arg_strings)
		fprintf (stderr, "...");
		*/
    }
    printf(".El\n");
    printf(".\\\".Sh ENVIRONMENT\n");
    printf(".\\\".Sh FILES\n");
    printf(".\\\".Sh EXAMPLES\n");
    printf(".\\\".Sh DIAGNOSTICS\n");
    printf(".\\\".Sh SEE ALSO\n");
    printf(".\\\".Sh STANDARDS\n");
    printf(".\\\".Sh HISTORY\n");
    printf(".\\\".Sh AUTHORS\n");
    printf(".\\\".Sh BUGS\n");
}

static int
check_column(FILE *f, int col, int len, int columns)
{
    if(col + len > columns) {
	fprintf(f, "\n");
	col = fprintf(f, "  ");
    }
    return col;
}

static char *
builtin_i18n(const char *str)
{
    return rk_UNCONST(str);
}

ROKEN_LIB_FUNCTION void ROKEN_LIB_CALL
arg_printusage (struct getargs *args,
		size_t num_args,
		const char *progname,
		const char *extra_string)
{
    arg_printusage_i18n(args, num_args, "Usage",
			progname, extra_string, builtin_i18n);
}

ROKEN_LIB_FUNCTION void ROKEN_LIB_CALL
arg_printusage_i18n (struct getargs *args,
		     size_t num_args,
		     const char *usage,
		     const char *progname,
		     const char *extra_string,
		     char *(*i18n)(const char *))
{
    size_t i, max_len = 0;
    char buf[128];
    int col = 0, columns;

    if (progname == NULL)
	progname = getprogname();

    if (i18n == NULL)
	i18n = builtin_i18n;

    if(getenv("GETARGMANDOC")){
	mandoc_template(args, num_args, progname, extra_string, i18n);
	return;
    }
    if(get_window_size(2, NULL, &columns) == -1)
	columns = 80;
    col = 0;
    col += fprintf (stderr, "%s: %s", usage, progname);
    buf[0] = '\0';
    for (i = 0; i < num_args; ++i) {
	if(args[i].short_name && ISFLAG(args[i])) {
	    char s[2];
	    if(buf[0] == '\0')
		strlcpy(buf, "[-", sizeof(buf));
	    s[0] = args[i].short_name;
	    s[1] = '\0';
	    strlcat(buf, s, sizeof(buf));
	}
    }
    if(buf[0] != '\0') {
	strlcat(buf, "]", sizeof(buf));
	col = check_column(stderr, col, strlen(buf) + 1, columns);
	col += fprintf(stderr, " %s", buf);
    }

    for (i = 0; i < num_args; ++i) {
	size_t len = 0;

	if (args[i].long_name) {
	    buf[0] = '\0';
	    strlcat(buf, "[--", sizeof(buf));
	    len += 2;
	    if(args[i].type == arg_negative_flag) {
		strlcat(buf, "no-", sizeof(buf));
		len += 3;
	    }
	    strlcat(buf, args[i].long_name, sizeof(buf));
	    len += strlen(args[i].long_name);
	    len += print_arg(buf + strlen(buf), sizeof(buf) - strlen(buf),
			     0, 1, &args[i], i18n);
	    strlcat(buf, "]", sizeof(buf));
	    if(args[i].type == arg_strings)
		strlcat(buf, "...", sizeof(buf));
	    col = check_column(stderr, col, strlen(buf) + 1, columns);
	    col += fprintf(stderr, " %s", buf);
	}
	if (args[i].short_name && !ISFLAG(args[i])) {
	    snprintf(buf, sizeof(buf), "[-%c", args[i].short_name);
	    len += 2;
	    len += print_arg(buf + strlen(buf), sizeof(buf) - strlen(buf),
			     0, 0, &args[i], i18n);
	    strlcat(buf, "]", sizeof(buf));
	    if(args[i].type == arg_strings)
		strlcat(buf, "...", sizeof(buf));
	    col = check_column(stderr, col, strlen(buf) + 1, columns);
	    col += fprintf(stderr, " %s", buf);
	}
	if (args[i].long_name && args[i].short_name)
	    len += 2; /* ", " */
	max_len = max(max_len, len);
    }
    if (extra_string) {
	check_column(stderr, col, strlen(extra_string) + 1, columns);
	fprintf (stderr, " %s\n", extra_string);
    } else
	fprintf (stderr, "\n");
    for (i = 0; i < num_args; ++i) {
	if (args[i].help) {
	    size_t count = 0;

	    if (args[i].short_name) {
		count += fprintf (stderr, "-%c", args[i].short_name);
		print_arg (buf, sizeof(buf), 0, 0, &args[i], i18n);
		count += fprintf(stderr, "%s", buf);
	    }
	    if (args[i].short_name && args[i].long_name)
		count += fprintf (stderr, ", ");
	    if (args[i].long_name) {
		count += fprintf (stderr, "--");
		if (args[i].type == arg_negative_flag)
		    count += fprintf (stderr, "no-");
		count += fprintf (stderr, "%s", args[i].long_name);
		print_arg (buf, sizeof(buf), 0, 1, &args[i], i18n);
		count += fprintf(stderr, "%s", buf);
	    }
	    while(count++ <= max_len)
		putc (' ', stderr);
	    fprintf (stderr, "%s\n", (*i18n)(args[i].help));
	}
    }
}

static int
add_string(getarg_strings *s, char *value)
{
    char **strings;

    strings = realloc(s->strings, (s->num_strings + 1) * sizeof(*s->strings));
    if (strings == NULL) {
	free(s->strings);
	s->strings = NULL;
	s->num_strings = 0;
	return ENOMEM;
    }
    s->strings = strings;
    s->strings[s->num_strings] = value;
    s->num_strings++;
    return 0;
}

static int
arg_match_long(struct getargs *args, size_t num_args,
	       char *argv, int argc, char **rargv, int *goptind)
{
    size_t i;
    char *goptarg = NULL;
    int negate = 0;
    int partial_match = 0;
    struct getargs *partial = NULL;
    struct getargs *current = NULL;
    int argv_len;
    char *p;
    int p_len;

    argv_len = strlen(argv);
    p = strchr (argv, '=');
    if (p != NULL)
	argv_len = p - argv;

    for (i = 0; i < num_args; ++i) {
	if(args[i].long_name) {
	    int len = strlen(args[i].long_name);
	    p = argv;
	    p_len = argv_len;
	    negate = 0;

	    for (;;) {
		if (strncmp (args[i].long_name, p, p_len) == 0) {
		    if(p_len == len)
			current = &args[i];
		    else {
			++partial_match;
			partial = &args[i];
		    }
		    goptarg  = p + p_len;
		} else if (ISFLAG(args[i]) && strncmp (p, "no-", 3) == 0) {
		    negate = !negate;
		    p += 3;
		    p_len -= 3;
		    continue;
		}
		break;
	    }
	    if (current)
		break;
	}
    }
    if (current == NULL) {
	if (partial_match == 1)
	    current = partial;
	else
	    return ARG_ERR_NO_MATCH;
    }

    if(*goptarg == '\0'
       && !ISFLAG(*current)
       && current->type != arg_collect
       && current->type != arg_counter)
	return ARG_ERR_NO_MATCH;
    switch(current->type){
    case arg_integer:
    {
	int tmp;
	if(sscanf(goptarg + 1, "%d", &tmp) != 1)
	    return ARG_ERR_BAD_ARG;
	*(int*)current->value = tmp;
	return 0;
    }
    case arg_string:
    {
	*(char**)current->value = goptarg + 1;
	return 0;
    }
    case arg_strings:
    {
	return add_string((getarg_strings*)current->value, goptarg + 1);
    }
    case arg_flag:
    case arg_negative_flag:
    {
	int *flag = current->value;
	if(*goptarg == '\0' ||
	   strcmp(goptarg + 1, "yes") == 0 ||
	   strcmp(goptarg + 1, "true") == 0){
	    *flag = !negate;
	    return 0;
	} else if (*goptarg && strcmp(goptarg + 1, "maybe") == 0) {
	    *flag = rk_random() & 1;
	} else {
	    *flag = negate;
	    return 0;
	}
	return ARG_ERR_BAD_ARG;
    }
    case arg_counter :
    {
	int val;

	if (*goptarg == '\0')
	    val = 1;
	else if(sscanf(goptarg + 1, "%d", &val) != 1)
	    return ARG_ERR_BAD_ARG;
	*(int *)current->value += val;
	return 0;
    }
    case arg_double:
    {
	double tmp;
	if(sscanf(goptarg + 1, "%lf", &tmp) != 1)
	    return ARG_ERR_BAD_ARG;
	*(double*)current->value = tmp;
	return 0;
    }
    case arg_collect:{
	struct getarg_collect_info *c = current->value;
	int o = argv - rargv[*goptind];
	return (*c->func)(FALSE, argc, rargv, goptind, &o, c->data);
    }

    default:
	abort ();
	UNREACHABLE(return 0);
    }
}

static int
arg_match_short (struct getargs *args, size_t num_args,
		 char *argv, int argc, char **rargv, int *goptind)
{
    size_t j, k;

    for(j = 1; j > 0 && j < strlen(rargv[*goptind]); j++) {
	for(k = 0; k < num_args; k++) {
	    char *goptarg;

	    if(args[k].short_name == 0)
		continue;
	    if(argv[j] == args[k].short_name) {
		if(args[k].type == arg_flag) {
		    *(int*)args[k].value = 1;
		    break;
		}
		if(args[k].type == arg_negative_flag) {
		    *(int*)args[k].value = 0;
		    break;
		}
		if(args[k].type == arg_counter) {
		    ++*(int *)args[k].value;
		    break;
		}
		if(args[k].type == arg_collect) {
		    struct getarg_collect_info *c = args[k].value;
		    int a = (int)j;

		    if((*c->func)(TRUE, argc, rargv, goptind, &a, c->data))
			return ARG_ERR_BAD_ARG;
		    j = a;
		    break;
		}

		if(argv[j + 1])
		    goptarg = &argv[j + 1];
		else {
		    ++*goptind;
		    goptarg = rargv[*goptind];
		}
		if(goptarg == NULL) {
		    --*goptind;
		    return ARG_ERR_NO_ARG;
		}
		if(args[k].type == arg_integer) {
		    int tmp;
		    if(sscanf(goptarg, "%d", &tmp) != 1)
			return ARG_ERR_BAD_ARG;
		    *(int*)args[k].value = tmp;
		    return 0;
		} else if(args[k].type == arg_string) {
		    *(char**)args[k].value = goptarg;
		    return 0;
		} else if(args[k].type == arg_strings) {
		    return add_string((getarg_strings*)args[k].value, goptarg);
		} else if(args[k].type == arg_double) {
		    double tmp;
		    if(sscanf(goptarg, "%lf", &tmp) != 1)
			return ARG_ERR_BAD_ARG;
		    *(double*)args[k].value = tmp;
		    return 0;
		}
		return ARG_ERR_BAD_ARG;
	    }
	}
	if (k == num_args)
	    return ARG_ERR_NO_MATCH;
    }
    return 0;
}

ROKEN_LIB_FUNCTION int ROKEN_LIB_CALL
getarg(struct getargs *args, size_t num_args,
       int argc, char **argv, int *goptind)
{
    int i;
    int ret = 0;

    rk_random_init();
    (*goptind)++;
    for(i = *goptind; i < argc; i++) {
	if(argv[i][0] != '-')
	    break;
	if(argv[i][1] == '-'){
	    if(argv[i][2] == 0){
		i++;
		break;
	    }
	    ret = arg_match_long (args, num_args, argv[i] + 2,
				  argc, argv, &i);
	} else {
	    ret = arg_match_short (args, num_args, argv[i],
				   argc, argv, &i);
	}
	if(ret)
	    break;
    }
    *goptind = i;
    return ret;
}

ROKEN_LIB_FUNCTION void ROKEN_LIB_CALL
free_getarg_strings (getarg_strings *s)
{
    free (s->strings);
}

#if TEST
int foo_flag = 2;
int flag1 = 0;
int flag2 = 0;
int bar_int;
char *baz_string;

struct getargs args[] = {
    { NULL, '1', arg_flag, &flag1, "one", NULL },
    { NULL, '2', arg_flag, &flag2, "two", NULL },
    { "foo", 'f', arg_negative_flag, &foo_flag, "foo", NULL },
    { "bar", 'b', arg_integer, &bar_int, "bar", "seconds"},
    { "baz", 'x', arg_string, &baz_string, "baz", "name" },
};

int main(int argc, char **argv)
{
    int goptind = 0;
    while(getarg(args, 5, argc, argv, &goptind))
	printf("Bad arg: %s\n", argv[goptind]);
    printf("flag1 = %d\n", flag1);
    printf("flag2 = %d\n", flag2);
    printf("foo_flag = %d\n", foo_flag);
    printf("bar_int = %d\n", bar_int);
    printf("baz_flag = %s\n", baz_string);
    arg_printusage (args, 5, argv[0], "nothing here");
}
#endif
@


1.5
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@@


1.4
log
@Merge of heimdal 0.7.2
Tested by todd & beck, ok beck.
@
text
@d2 3
a4 3
 * Copyright (c) 1997 - 2002 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
d6 3
a8 3
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
d10 2
a11 2
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
d13 3
a15 3
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
d17 3
a19 3
 * 3. Neither the name of the Institute nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission. 
d21 11
a31 11
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE. 
a33 1
#ifdef HAVE_CONFIG_H
a34 2
RCSID("$KTH: getarg.c,v 1.48 2005/04/12 11:28:43 lha Exp $");
#endif
d39 1
a39 1
#include <roken.h>
a43 2
extern char *__progname;

d45 6
a50 1
print_arg (char *string, size_t len, int mdoc, int longp, struct getargs *arg)
d71 1
a71 1
	s = arg->arg_help;
d91 2
a92 1
		const char *extra_string)
d94 1
a94 1
    int i;
d112 1
a112 1
       
d117 1
a117 2
    printf(".Nd\n");
    printf("in search of a description\n");
d123 1
a123 1
	if(ISFLAG(args[i]) || 
d128 1
a128 1
		print_arg(buf, sizeof(buf), 1, 0, args + i);
d134 2
a135 2
		print_arg(buf, sizeof(buf), 1, 1, args + i);
		printf("Fl -%s%s%s",
d141 1
a141 1
	    print_arg(buf, sizeof(buf), 1, 0, args + i);
d143 2
a144 2
	    print_arg(buf, sizeof(buf), 1, 1, args + i);
	    printf(".Fl -%s%s\n.Xc\n.Oc\n", args[i].long_name, buf);
d160 1
a160 1
	    print_arg(buf, sizeof(buf), 1, 0, args + i);
d167 1
a167 1
	    printf(".Fl -%s%s",
d170 1
a170 1
	    print_arg(buf, sizeof(buf), 1, 1, args + i);
d203 7
a209 1
void ROKEN_LIB_FUNCTION
d215 13
a227 2
    int i;
    size_t max_len = 0;
a229 1
    struct winsize ws;
d232 4
a235 1
	progname = __progname;
d238 1
a238 1
	mandoc_template(args, num_args, progname, extra_string);
d241 1
a241 3
    if(get_window_size(2, &ws) == 0)
	columns = ws.ws_col;
    else
d244 1
a244 1
    col += fprintf (stderr, "Usage: %s", progname);
d275 2
a276 2
	    len += print_arg(buf + strlen(buf), sizeof(buf) - strlen(buf), 
			     0, 1, &args[i]);
d286 2
a287 2
	    len += print_arg(buf + strlen(buf), sizeof(buf) - strlen(buf), 
			     0, 0, &args[i]);
d299 1
a299 1
	col = check_column(stderr, col, strlen(extra_string) + 1, columns);
d309 1
a309 1
		print_arg (buf, sizeof(buf), 0, 0, &args[i]);
d319 1
a319 1
		print_arg (buf, sizeof(buf), 0, 1, &args[i]);
d324 1
a324 1
	    fprintf (stderr, "%s\n", args[i].help);
d351 1
a351 1
    int i;
d400 1
a400 1
    
d429 1
a429 1
	   strcmp(goptarg + 1, "yes") == 0 || 
d434 1
a434 5
#ifdef HAVE_RANDOM
	    *flag = random() & 1;
#else
	    *flag = rand() & 1;
#endif
d468 1
d476 1
a476 1
    int j, k;
d492 1
a492 1
		} 
d499 1
d501 1
a501 1
		    if((*c->func)(TRUE, argc, rargv, goptind, &j, c->data))
d503 1
d544 2
a545 2
int ROKEN_LIB_FUNCTION
getarg(struct getargs *args, size_t num_args, 
d551 1
a551 7
#if defined(HAVE_SRANDOMDEV)
    srandomdev();
#elif defined(HAVE_RANDOM)
    srandom(time(NULL));
#else
    srand (time(NULL));
#endif
d561 1
a561 1
	    ret = arg_match_long (args, num_args, argv[i] + 2, 
d574 1
a574 1
void ROKEN_LIB_FUNCTION
d600 3
a602 3
    printf("flag1 = %d\n", flag1);  
    printf("flag2 = %d\n", flag2);  
    printf("foo_flag = %d\n", foo_flag);  
@


1.3
log
@Merge 0.6rc1
@
text
@d36 1
a36 1
RCSID("$KTH: getarg.c,v 1.46 2002/08/20 16:23:07 joda Exp $");
d203 1
a203 1
void
d312 1
a312 1
static void
d315 10
a324 1
    s->strings = realloc(s->strings, (s->num_strings + 1) * sizeof(*s->strings));
d327 1
d405 1
a405 2
	add_string((getarg_strings*)current->value, goptarg + 1);
	return 0;
d511 1
a511 2
		    add_string((getarg_strings*)args[k].value, goptarg);
		    return 0;
d528 1
a528 1
int
d564 1
a564 1
void
@


1.2
log
@First pass of get/setprogname() cleanup. Much more to come later.

ok deraadt@@, pval@@
@
text
@d2 1
a2 1
 * Copyright (c) 1997 - 2001 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: getarg.c,v 1.42 2001/07/23 04:30:11 assar Exp $");
d163 1
a163 1
		printf(" Ns ,");
d322 1
a322 1
	       char *argv, int argc, char **rargv, int *optind)
d325 1
a325 1
    char *optarg = NULL;
d332 1
d342 2
a343 2
	    char *p = argv;
	    int p_len = argv_len;
d354 1
a354 1
		    optarg  = p + p_len;
d374 1
a374 1
    if(*optarg == '\0'
d383 1
a383 1
	if(sscanf(optarg + 1, "%d", &tmp) != 1)
d390 1
a390 1
	*(char**)current->value = optarg + 1;
d395 1
a395 1
	add_string((getarg_strings*)current->value, optarg + 1);
d402 3
a404 3
	if(*optarg == '\0' ||
	   strcmp(optarg + 1, "yes") == 0 || 
	   strcmp(optarg + 1, "true") == 0){
d407 4
a410 1
	} else if (*optarg && strcmp(optarg + 1, "maybe") == 0) {
d412 1
d423 1
a423 1
	if (*optarg == '\0')
d425 1
a425 1
	else if(sscanf(optarg + 1, "%d", &val) != 1)
d433 1
a433 1
	if(sscanf(optarg + 1, "%lf", &tmp) != 1)
d440 2
a441 2
	int o = argv - rargv[*optind];
	return (*c->func)(FALSE, argc, rargv, optind, &o, c->data);
d451 1
a451 1
		 char *argv, int argc, char **rargv, int *optind)
d455 1
a455 1
    for(j = 1; j > 0 && j < strlen(rargv[*optind]); j++) {
d457 1
a457 1
	    char *optarg;
d477 1
a477 1
		    if((*c->func)(TRUE, argc, rargv, optind, &j, c->data))
d483 1
a483 1
		    optarg = &argv[j + 1];
d485 2
a486 2
		    ++*optind;
		    optarg = rargv[*optind];
d488 2
a489 2
		if(optarg == NULL) {
		    --*optind;
d494 1
a494 1
		    if(sscanf(optarg, "%d", &tmp) != 1)
d499 1
a499 1
		    *(char**)args[k].value = optarg;
d502 1
a502 1
		    add_string((getarg_strings*)args[k].value, optarg);
d506 1
a506 1
		    if(sscanf(optarg, "%lf", &tmp) != 1)
d522 1
a522 1
       int argc, char **argv, int *optind)
d527 5
d533 3
a535 2
    (*optind)++;
    for(i = *optind; i < argc; i++) {
d552 1
a552 1
    *optind = i;
d579 3
a581 3
    int optind = 0;
    while(getarg(args, 5, argc, argv, &optind))
	printf("Bad arg: %s\n", argv[optind]);
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * Copyright (c) 1997 - 2000 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: getarg.c,v 1.37 2000/12/25 17:03:15 assar Exp $");
d47 2
d144 1
a144 1
	    printf(".Fl -%s%s Oc\n.Xc\n", args[i].long_name, buf);
d228 17
d266 1
a266 1
	if (args[i].short_name) {
d420 2
a421 7
	else {
	    char *endstr;

	    val = strtol (optarg, &endstr, 0);
	    if (endstr == optarg)
		return ARG_ERR_BAD_ARG;
	}
d543 6
@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.3f

Lots of changes, highlights include:

 * change default keytab to ANY:FILE:/etc/krb5.keytab,krb4:/etc/srvtab,
   the new keytab type that tries both of these in order (SRVTAB is
   also an alias for krb4:)

 * improve error reporting and error handling (error messages should
   be more detailed and more useful)

 * the API is closer to what MIT krb5 is using

 * more compatible with windows 2000

 * removed some memory leaks

 * bug fixes
@
text
@d2 1
a2 1
 * Copyright (c) 1997 - 2001 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: getarg.c,v 1.40 2001/04/25 12:06:10 assar Exp $");
d214 1
a214 1
	progname = getprogname();
a225 17
    buf[0] = '\0';
    for (i = 0; i < num_args; ++i) {
	if(args[i].short_name && ISFLAG(args[i])) {
	    char s[2];
	    if(buf[0] == '\0')
		strlcpy(buf, "[-", sizeof(buf));
	    s[0] = args[i].short_name;
	    s[1] = '\0';
	    strlcat(buf, s, sizeof(buf));
	}
    }
    if(buf[0] != '\0') {
	strlcat(buf, "]", sizeof(buf));
	col = check_column(stderr, col, strlen(buf) + 1, columns);
	col += fprintf(stderr, " %s", buf);
    }

d247 1
a247 1
	if (args[i].short_name && !ISFLAG(args[i])) {
a528 6
}

void
free_getarg_strings (getarg_strings *s)
{
    free (s->strings);
@


1.1.1.3
log
@Import of heimdal-0.4e
@
text
@d36 1
a36 1
RCSID("$KTH: getarg.c,v 1.42 2001/07/23 04:30:11 assar Exp $");
d142 1
a142 1
	    printf(".Fl -%s%s\n.Xc\n.Oc\n", args[i].long_name, buf);
d418 7
a424 2
	else if(sscanf(optarg + 1, "%d", &val) != 1)
	    return ARG_ERR_BAD_ARG;
@


1.1.1.4
log
@Import of heimdal-0.6rc1
@
text
@d2 1
a2 1
 * Copyright (c) 1997 - 2002 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: getarg.c,v 1.46 2002/08/20 16:23:07 joda Exp $");
d161 1
a161 1
		printf(" ,");
d320 1
a320 1
	       char *argv, int argc, char **rargv, int *goptind)
d323 1
a323 1
    char *goptarg = NULL;
a329 1
    int p_len;
d339 2
a340 2
	    p = argv;
	    p_len = argv_len;
d351 1
a351 1
		    goptarg  = p + p_len;
d371 1
a371 1
    if(*goptarg == '\0'
d380 1
a380 1
	if(sscanf(goptarg + 1, "%d", &tmp) != 1)
d387 1
a387 1
	*(char**)current->value = goptarg + 1;
d392 1
a392 1
	add_string((getarg_strings*)current->value, goptarg + 1);
d399 3
a401 3
	if(*goptarg == '\0' ||
	   strcmp(goptarg + 1, "yes") == 0 || 
	   strcmp(goptarg + 1, "true") == 0){
d404 1
a404 4
	} else if (*goptarg && strcmp(goptarg + 1, "maybe") == 0) {
#ifdef HAVE_RANDOM
	    *flag = random() & 1;
#else
a405 1
#endif
d416 1
a416 1
	if (*goptarg == '\0')
d418 1
a418 1
	else if(sscanf(goptarg + 1, "%d", &val) != 1)
d426 1
a426 1
	if(sscanf(goptarg + 1, "%lf", &tmp) != 1)
d433 2
a434 2
	int o = argv - rargv[*goptind];
	return (*c->func)(FALSE, argc, rargv, goptind, &o, c->data);
d444 1
a444 1
		 char *argv, int argc, char **rargv, int *goptind)
d448 1
a448 1
    for(j = 1; j > 0 && j < strlen(rargv[*goptind]); j++) {
d450 1
a450 1
	    char *goptarg;
d470 1
a470 1
		    if((*c->func)(TRUE, argc, rargv, goptind, &j, c->data))
d476 1
a476 1
		    goptarg = &argv[j + 1];
d478 2
a479 2
		    ++*goptind;
		    goptarg = rargv[*goptind];
d481 2
a482 2
		if(goptarg == NULL) {
		    --*goptind;
d487 1
a487 1
		    if(sscanf(goptarg, "%d", &tmp) != 1)
d492 1
a492 1
		    *(char**)args[k].value = goptarg;
d495 1
a495 1
		    add_string((getarg_strings*)args[k].value, goptarg);
d499 1
a499 1
		    if(sscanf(goptarg, "%lf", &tmp) != 1)
d515 1
a515 1
       int argc, char **argv, int *goptind)
a519 5
#if defined(HAVE_SRANDOMDEV)
    srandomdev();
#elif defined(HAVE_RANDOM)
    srandom(time(NULL));
#else
d521 2
a522 3
#endif
    (*goptind)++;
    for(i = *goptind; i < argc; i++) {
d539 1
a539 1
    *goptind = i;
d566 3
a568 3
    int goptind = 0;
    while(getarg(args, 5, argc, argv, &goptind))
	printf("Bad arg: %s\n", argv[goptind]);
@


1.1.1.5
log
@Import of heimdal-0.7.2
@
text
@d36 1
a36 1
RCSID("$KTH: getarg.c,v 1.48 2005/04/12 11:28:43 lha Exp $");
d201 1
a201 1
void ROKEN_LIB_FUNCTION
d310 1
a310 1
static int
d313 1
a313 10
    char **strings;

    strings = realloc(s->strings, (s->num_strings + 1) * sizeof(*s->strings));
    if (strings == NULL) {
	free(s->strings);
	s->strings = NULL;
	s->num_strings = 0;
	return ENOMEM;
    }
    s->strings = strings;
a315 1
    return 0;
d393 2
a394 1
	return add_string((getarg_strings*)current->value, goptarg + 1);
d500 2
a501 1
		    return add_string((getarg_strings*)args[k].value, goptarg);
d518 1
a518 1
int ROKEN_LIB_FUNCTION
d554 1
a554 1
void ROKEN_LIB_FUNCTION
@


