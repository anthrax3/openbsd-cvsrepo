head	1.6;
access;
symbols
	OPENBSD_5_5:1.5.0.6
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.4.0.28
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.26
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.24
	OPENBSD_5_0:1.4.0.22
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.20
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.18
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.14
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.16
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.12
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.10
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.8
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.6
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.4
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.2
	OPENBSD_4_0_BASE:1.4
	HEIMDAL_0_7_2:1.1.1.3
	OPENBSD_3_9:1.3.0.6
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.4
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	HEIMDAL_0_6_3:1.1.1.2
	OPENBSD_3_6:1.2.0.6
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.4
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.2
	OPENBSD_3_4_BASE:1.2
	HEIMDAL_0_6:1.1.1.1
	HEIMDAL_0_6RC1:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2014.04.22.10.01.33;	author reyk;	state dead;
branches;
next	1.5;

1.5
date	2013.06.17.18.57.45;	author robert;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.14.08.15.05;	author biorn;	state Exp;
branches;
next	1.3;

1.3
date	2004.10.29.16.20.31;	author biorn;	state Exp;
branches;
next	1.2;

1.2
date	2003.05.11.18.31.28;	author hin;	state Exp;
branches;
next	1.1;

1.1
date	2003.05.11.02.16.07;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.05.11.02.16.07;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.10.29.15.55.38;	author biorn;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.04.14.07.33.42;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.6
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/*
 * Copyright (c) 2002 Kungliga Tekniska HÃ¶gskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <config.h>

#include "ndbm_wrap.h"
#if defined(HAVE_DBHEADER)
#include <db.h>
#elif defined(HAVE_DB5_DB_H)
#include <db5/db.h>
#elif defined(HAVE_DB4_DB_H)
#include <db4/db.h>
#elif defined(HAVE_DB3_DB_H)
#include <db3/db.h>
#else
#include <db.h>
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>

/* XXX undefine open so this works on Solaris with large file support */
#undef open

#define DBT2DATUM(DBT, DATUM) do { (DATUM)->dptr = (DBT)->data; (DATUM)->dsize = (DBT)->size; } while(0)
#define DATUM2DBT(DATUM, DBT) do { (DBT)->data = (DATUM)->dptr; (DBT)->size = (DATUM)->dsize; } while(0)
#define RETURN(X) return ((X) == 0) ? 0 : -1

#ifdef HAVE_DB3
static DBC *cursor;
#endif

#define D(X) ((DB*)(X))

ROKEN_LIB_FUNCTION void ROKEN_LIB_CALL
dbm_close (DBM *db)
{
#ifdef HAVE_DB3
    D(db)->close(D(db), 0);
    cursor = NULL;
#else
    D(db)->close(D(db));
#endif
}

ROKEN_LIB_FUNCTION int ROKEN_LIB_CALL
dbm_delete (DBM *db, datum dkey)
{
    DBT key;
    DATUM2DBT(&dkey, &key);
#ifdef HAVE_DB3
    RETURN(D(db)->del(D(db), NULL, &key, 0));
#else
    RETURN(D(db)->del(D(db), &key, 0));
#endif
}

datum
dbm_fetch (DBM *db, datum dkey)
{
    datum dvalue;
    DBT key, value;
    DATUM2DBT(&dkey, &key);
    if(D(db)->get(D(db),
#ifdef HAVE_DB3
	       NULL,
#endif
	       &key, &value, 0) != 0) {
	dvalue.dptr = NULL;
	dvalue.dsize = 0;
    }
    else
	DBT2DATUM(&value, &dvalue);

    return dvalue;
}

static datum
dbm_get (DB *db, int flags)
{
    DBT key, value;
    datum datum;
#ifdef HAVE_DB3
    if(cursor == NULL)
	db->cursor(db, NULL, &cursor, 0);
    if(cursor->c_get(cursor, &key, &value, flags) != 0) {
	datum.dptr = NULL;
	datum.dsize = 0;
    } else
	DBT2DATUM(&value, &datum);
#else
    db->seq(db, &key, &value, flags);
    DBT2DATUM(&value, &datum);
#endif
    return datum;
}

#ifndef DB_FIRST
#define DB_FIRST	R_FIRST
#define DB_NEXT		R_NEXT
#define DB_NOOVERWRITE	R_NOOVERWRITE
#define DB_KEYEXIST	1
#endif

ROKEN_LIB_FUNCTION datum ROKEN_LIB_CALL
dbm_firstkey (DBM *db)
{
    return dbm_get(D(db), DB_FIRST);
}

ROKEN_LIB_FUNCTION datum ROKEN_LIB_CALL
dbm_nextkey (DBM *db)
{
    return dbm_get(D(db), DB_NEXT);
}

ROKEN_LIB_FUNCTION DBM* ROKEN_LIB_CALL
dbm_open (const char *file, int flags, mode_t mode)
{
#ifdef HAVE_DB3
    int myflags = 0;
#endif
    DB *db;
    char *fn = malloc(strlen(file) + 4);
    if(fn == NULL)
	return NULL;
    strcpy(fn, file);
    strcat(fn, ".db");
#ifdef HAVE_DB3
    if (flags & O_CREAT)
	myflags |= DB_CREATE;

    if (flags & O_EXCL)
	myflags |= DB_EXCL;

    if (flags & O_RDONLY)
	myflags |= DB_RDONLY;

    if (flags & O_TRUNC)
	myflags |= DB_TRUNCATE;
    if(db_create(&db, NULL, 0) != 0) {
	free(fn);
	return NULL;
    }

#if (DB_VERSION_MAJOR > 3) && (DB_VERSION_MINOR > 0)
    if(db->open(db, NULL, fn, NULL, DB_BTREE, myflags, mode) != 0) {
#else
    if(db->open(db, fn, NULL, DB_BTREE, myflags, mode) != 0) {
#endif
	free(fn);
	db->close(db, 0);
	return NULL;
    }
#else
    db = dbopen(fn, flags, mode, DB_BTREE, NULL);
#endif
    free(fn);
    return (DBM*)db;
}

ROKEN_LIB_FUNCTION int ROKEN_LIB_CALL
dbm_store (DBM *db, datum dkey, datum dvalue, int flags)
{
    int ret;
    DBT key, value;
    int myflags = 0;
    if((flags & DBM_REPLACE) == 0)
	myflags |= DB_NOOVERWRITE;
    DATUM2DBT(&dkey, &key);
    DATUM2DBT(&dvalue, &value);
    ret = D(db)->put(D(db),
#ifdef HAVE_DB3
		     NULL,
#endif
&key, &value, myflags);
    if(ret == DB_KEYEXIST)
	return 1;
    RETURN(ret);
}

ROKEN_LIB_FUNCTION int ROKEN_LIB_CALL
dbm_error (DBM *db)
{
    return 0;
}

ROKEN_LIB_FUNCTION int ROKEN_LIB_CALL
dbm_clearerr (DBM *db)
{
    return 0;
}

@


1.5
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@@


1.4
log
@Merge of heimdal 0.7.2
Tested by todd & beck, ok beck.
@
text
@d2 1
a2 1
 * Copyright (c) 2002 Kungliga Tekniska Högskolan
d5 1
a5 1
 * 
d9 1
a9 1
 * 
d12 1
a12 1
 * 
d16 1
a16 1
 * 
d20 1
a20 1
 * 
a33 1
#ifdef HAVE_CONFIG_H
a34 2
RCSID("$KTH: ndbm_wrap.c,v 1.4 2005/04/12 11:28:57 lha Exp $");
#endif
d37 5
a41 1
#if defined(HAVE_DB4_DB_H)
d67 1
a67 1
void ROKEN_LIB_FUNCTION
d78 1
a78 1
int ROKEN_LIB_FUNCTION
d96 1
a96 1
    if(D(db)->get(D(db), 
d98 1
a98 1
	       NULL, 
d100 1
a100 1
	       &key, &value, 0) != 0) 
d102 2
d116 1
a116 1
    if(cursor == NULL) 
d118 1
a118 1
    if(cursor->c_get(cursor, &key, &value, flags) != 0) 
d120 2
a121 1
    else 
d125 1
d137 1
a137 1
datum ROKEN_LIB_FUNCTION
d143 1
a143 1
datum ROKEN_LIB_FUNCTION
d149 1
a149 1
DBM* ROKEN_LIB_FUNCTION
d152 3
d156 2
a157 3
    int myflags = 0;
    char *fn;
    if(asprintf(&fn, "%s.db", file) == -1)
d159 2
d194 1
a194 1
int ROKEN_LIB_FUNCTION
d203 2
a204 2
    DATUM2DBT(&dvalue, &value);    
    ret = D(db)->put(D(db), 
d206 1
a206 1
		     NULL, 
d214 1
a214 1
int ROKEN_LIB_FUNCTION
d220 1
a220 1
int ROKEN_LIB_FUNCTION
@


1.3
log
@Merge with heimdal-0.6.3 Tested by beck@@, msf@@, me and others. ok beck@@
@
text
@d36 1
a36 1
RCSID("$KTH: ndbm_wrap.c,v 1.1.8.1 2003/08/29 17:00:34 lha Exp $");
d53 2
d66 1
a66 1
void
d77 1
a77 1
int
d132 1
a132 1
datum
d138 1
a138 1
datum 
d144 1
a144 1
DBM*
d185 1
a185 1
int
d205 1
a205 1
int
d211 1
a211 1
int
@


1.2
log
@Use asprintf instead of malloc,strcpy,strcat

ok deraadt@@ mho@@
@
text
@d36 1
a36 1
RCSID("$KTH: ndbm_wrap.c,v 1.1 2002/04/30 16:37:08 joda Exp $");
d166 4
d171 1
@


1.1
log
@Initial revision
@
text
@d147 2
a148 2
    char *fn = malloc(strlen(file) + 4);
    if(fn == NULL)
a149 2
    strcpy(fn, file);
    strcat(fn, ".db");
@


1.1.1.1
log
@Import of heimdal-0.6rc1
@
text
@@


1.1.1.2
log
@Import of heimdal-0.6.3
@
text
@d36 1
a36 1
RCSID("$KTH: ndbm_wrap.c,v 1.1.8.1 2003/08/29 17:00:34 lha Exp $");
a167 4

#if (DB_VERSION_MAJOR > 3) && (DB_VERSION_MINOR > 0)
    if(db->open(db, NULL, fn, NULL, DB_BTREE, myflags, mode) != 0) {
#else
a168 1
#endif
@


1.1.1.3
log
@Import of heimdal-0.7.2
@
text
@d36 1
a36 1
RCSID("$KTH: ndbm_wrap.c,v 1.4 2005/04/12 11:28:57 lha Exp $");
a52 2
/* XXX undefine open so this works on Solaris with large file support */
#undef open
d64 1
a64 1
void ROKEN_LIB_FUNCTION
d75 1
a75 1
int ROKEN_LIB_FUNCTION
d130 1
a130 1
datum ROKEN_LIB_FUNCTION
d136 1
a136 1
datum ROKEN_LIB_FUNCTION
d142 1
a142 1
DBM* ROKEN_LIB_FUNCTION
d185 1
a185 1
int ROKEN_LIB_FUNCTION
d205 1
a205 1
int ROKEN_LIB_FUNCTION
d211 1
a211 1
int ROKEN_LIB_FUNCTION
@


