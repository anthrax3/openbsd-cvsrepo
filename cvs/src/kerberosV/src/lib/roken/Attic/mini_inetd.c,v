head	1.4;
access;
symbols
	OPENBSD_5_5:1.3.0.6
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.2
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.2.0.14
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.12
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.10
	OPENBSD_5_0:1.2.0.8
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.6
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.1.4.0.16
	OPENBSD_4_6_BASE:1.1.1.4
	OPENBSD_4_5:1.1.1.4.0.12
	OPENBSD_4_5_BASE:1.1.1.4
	OPENBSD_4_4:1.1.1.4.0.10
	OPENBSD_4_4_BASE:1.1.1.4
	OPENBSD_4_3:1.1.1.4.0.8
	OPENBSD_4_3_BASE:1.1.1.4
	OPENBSD_4_2:1.1.1.4.0.6
	OPENBSD_4_2_BASE:1.1.1.4
	OPENBSD_4_1:1.1.1.4.0.4
	OPENBSD_4_1_BASE:1.1.1.4
	OPENBSD_4_0:1.1.1.4.0.2
	OPENBSD_4_0_BASE:1.1.1.4
	HEIMDAL_0_7_2:1.1.1.4
	OPENBSD_3_9:1.1.1.3.0.12
	OPENBSD_3_9_BASE:1.1.1.3
	OPENBSD_3_8:1.1.1.3.0.10
	OPENBSD_3_8_BASE:1.1.1.3
	OPENBSD_3_7:1.1.1.3.0.8
	OPENBSD_3_7_BASE:1.1.1.3
	HEIMDAL_0_6_3:1.1.1.3
	OPENBSD_3_6:1.1.1.3.0.6
	OPENBSD_3_6_BASE:1.1.1.3
	OPENBSD_3_5:1.1.1.3.0.4
	OPENBSD_3_5_BASE:1.1.1.3
	OPENBSD_3_4:1.1.1.3.0.2
	OPENBSD_3_4_BASE:1.1.1.3
	HEIMDAL_0_6:1.1.1.3
	HEIMDAL_0_6RC1:1.1.1.3
	OPENBSD_3_3:1.1.1.2.0.6
	OPENBSD_3_3_BASE:1.1.1.2
	OPENBSD_3_2:1.1.1.2.0.4
	OPENBSD_3_2_BASE:1.1.1.2
	OPENBSD_3_1:1.1.1.2.0.2
	OPENBSD_3_1_BASE:1.1.1.2
	HEIMDAL_0_4e:1.1.1.2
	OPENBSD_3_0:1.1.1.1.0.2
	OPENBSD_3_0_BASE:1.1.1.1
	HEIMDAL_0_3f:1.1.1.1
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2014.04.22.10.01.33;	author reyk;	state dead;
branches;
next	1.3;

1.3
date	2013.06.17.18.57.45;	author robert;	state Exp;
branches;
next	1.2;

1.2
date	2009.11.12.19.45.47;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.25.07.51.15;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.51.15;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.02.06.08.55.49;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.02.16.06;	author hin;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2006.04.14.07.33.41;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.4
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/*
 * Copyright (c) 1995 - 2001 Kungliga Tekniska HÃ¶gskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <config.h>

#include <err.h>
#include "roken.h"

/*
 * accept a connection on `s' and pretend it's served by inetd.
 */

static void
accept_it (rk_socket_t s, rk_socket_t *ret_socket)
{
    rk_socket_t as;

    as = accept(s, NULL, NULL);
    if(rk_IS_BAD_SOCKET(as))
	err (1, "accept");

    if (ret_socket) {

	*ret_socket = as;

    } else {
	int fd = socket_to_fd(as, 0);

	/* We would use _O_RDONLY for the socket_to_fd() call for
	   STDIN, but there are instances where we assume that STDIN
	   is a r/w socket. */

	dup2(fd, STDIN_FILENO);
	dup2(fd, STDOUT_FILENO);

	rk_closesocket(as);
    }
}

/**
 * Listen on a specified addresses
 *
 * Listens on the specified addresses for incoming connections.  If
 * the \a ret_socket parameter is \a NULL, on return STDIN and STDOUT
 * will be connected to an accepted socket.  If the \a ret_socket
 * parameter is non-NULL, the accepted socket will be returned in
 * *ret_socket.  In the latter case, STDIN and STDOUT will be left
 * unmodified.
 *
 * This function does not return if there is an error or if no
 * connection is established.
 *
 * @@param[in] ai Addresses to listen on
 * @@param[out] ret_socket If non-NULL receives the accepted socket.
 *
 * @@see mini_inetd()
 */
ROKEN_LIB_FUNCTION void ROKEN_LIB_CALL
mini_inetd_addrinfo (struct addrinfo *ai, rk_socket_t *ret_socket)
{
    int ret;
    struct addrinfo *a;
    int n, nalloc, i;
    rk_socket_t *fds;
    fd_set orig_read_set, read_set;
    rk_socket_t max_fd = (rk_socket_t)-1;

    for (nalloc = 0, a = ai; a != NULL; a = a->ai_next)
	++nalloc;

    fds = malloc (nalloc * sizeof(*fds));
    if (fds == NULL) {
	errx (1, "mini_inetd: out of memory");
	UNREACHABLE(return);
    }

    FD_ZERO(&orig_read_set);

    for (i = 0, a = ai; a != NULL; a = a->ai_next) {
	fds[i] = socket (a->ai_family, a->ai_socktype, a->ai_protocol);
	if (rk_IS_BAD_SOCKET(fds[i]))
	    continue;
	socket_set_reuseaddr (fds[i], 1);
	socket_set_ipv6only(fds[i], 1);
	if (rk_IS_SOCKET_ERROR(bind (fds[i], a->ai_addr, a->ai_addrlen))) {
	    warn ("bind af = %d", a->ai_family);
	    rk_closesocket(fds[i]);
	    fds[i] = rk_INVALID_SOCKET;
	    continue;
	}
	if (rk_IS_SOCKET_ERROR(listen (fds[i], SOMAXCONN))) {
	    warn ("listen af = %d", a->ai_family);
	    rk_closesocket(fds[i]);
	    fds[i] = rk_INVALID_SOCKET;
	    continue;
	}
#ifndef NO_LIMIT_FD_SETSIZE
	if (fds[i] >= FD_SETSIZE)
	    errx (1, "fd too large");
#endif
	FD_SET(fds[i], &orig_read_set);
	max_fd = max(max_fd, fds[i]);
	++i;
    }
    if (i == 0)
	errx (1, "no sockets");
    n = i;

    do {
	read_set = orig_read_set;

	ret = select (max_fd + 1, &read_set, NULL, NULL, NULL);
	if (rk_IS_SOCKET_ERROR(ret) && rk_SOCK_ERRNO != EINTR)
	    err (1, "select");
    } while (ret <= 0);

    for (i = 0; i < n; ++i)
	if (FD_ISSET (fds[i], &read_set)) {
	    accept_it (fds[i], ret_socket);
	    for (i = 0; i < n; ++i)
	      rk_closesocket(fds[i]);
	    free(fds);
	    return;
	}
    abort ();
}

/**
 * Listen on a specified port
 *
 * Listens on the specified port for incoming connections.  If the \a
 * ret_socket parameter is \a NULL, on return STDIN and STDOUT will be
 * connected to an accepted socket.  If the \a ret_socket parameter is
 * non-NULL, the accepted socket will be returned in *ret_socket.  In
 * the latter case, STDIN and STDOUT will be left unmodified.
 *
 * This function does not return if there is an error or if no
 * connection is established.
 *
 * @@param[in] port Port to listen on
 * @@param[out] ret_socket If non-NULL receives the accepted socket.
 *
 * @@see mini_inetd_addrinfo()
 */
ROKEN_LIB_FUNCTION void ROKEN_LIB_CALL
mini_inetd(int port, rk_socket_t * ret_socket)
{
    int error;
    struct addrinfo *ai, hints;
    char portstr[NI_MAXSERV];

    memset (&hints, 0, sizeof(hints));
    hints.ai_flags    = AI_PASSIVE;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_family   = PF_UNSPEC;

    snprintf (portstr, sizeof(portstr), "%d", ntohs(port));

    error = getaddrinfo (NULL, portstr, &hints, &ai);
    if (error)
	errx (1, "getaddrinfo: %s", gai_strerror (error));

    mini_inetd_addrinfo(ai, ret_socket);

    freeaddrinfo(ai);
}

@


1.3
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@@


1.2
log
@memory leaks from by parfait; ok millert jsg
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2001 Kungliga Tekniska Högskolan
d5 1
a5 1
 * 
d9 1
a9 1
 * 
d12 1
a12 1
 * 
d16 1
a16 1
 * 
d20 1
a20 1
 * 
a33 1
#ifdef HAVE_CONFIG_H
a34 2
RCSID("$KTH: mini_inetd.c,v 1.31 2005/04/12 11:28:56 lha Exp $");
#endif
d44 1
a44 1
accept_it (int s)
d46 1
a46 1
    int s2;
d48 2
a49 2
    s2 = accept(s, NULL, NULL);
    if(s2 < 0)
d51 17
a67 5
    close(s);
    dup2(s2, STDIN_FILENO);
    dup2(s2, STDOUT_FILENO);
    /* dup2(s2, STDERR_FILENO); */
    close(s2);
d70 17
a86 2
/*
 * Listen on a specified port, emulating inetd.
d88 2
a89 3

void ROKEN_LIB_FUNCTION
mini_inetd_addrinfo (struct addrinfo *ai)
d94 1
a94 1
    int *fds;
d96 1
a96 1
    int max_fd = -1;
d102 1
a102 1
    if (fds == NULL)
d104 2
d111 1
a111 2
	if (fds[i] < 0) {
	    warn ("socket af = %d", a->ai_family);
a112 1
	}
d114 2
a115 1
	if (bind (fds[i], a->ai_addr, a->ai_addrlen) < 0) {
d117 2
a118 1
	    close(fds[i]);
d121 1
a121 1
	if (listen (fds[i], SOMAXCONN) < 0) {
d123 2
a124 1
	    close(fds[i]);
d127 1
d130 1
d143 1
a143 1
	if (ret < 0 && errno != EINTR)
d149 3
a151 1
	    accept_it (fds[i]);
a154 1
    free(fds);
d158 19
a176 2
void ROKEN_LIB_FUNCTION
mini_inetd (int port)
d193 2
a194 2
    mini_inetd_addrinfo(ai);
    
d197 1
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2000 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: mini_inetd.c,v 1.28 2000/10/08 13:38:47 assar Exp $");
d62 1
a62 1
 * Listen on `port' emulating inetd.
d65 2
a66 2
void
mini_inetd (int port)
d68 2
a69 3
    int error, ret;
    struct addrinfo *ai, *a, hints;
    char portstr[NI_MAXSERV];
a74 10
    memset (&hints, 0, sizeof(hints));
    hints.ai_flags    = AI_PASSIVE;
    hints.ai_socktype = SOCK_STREAM;

    snprintf (portstr, sizeof(portstr), "%d", ntohs(port));

    error = getaddrinfo (NULL, portstr, &hints, &ai);
    if (error)
	errx (1, "getaddrinfo: %s", gai_strerror (error));

d87 1
a87 1
	    warn ("socket");
d91 10
a100 4
	if (bind (fds[i], a->ai_addr, a->ai_addrlen) < 0)
	    err (1, "bind");
	if (listen (fds[i], SOMAXCONN) < 0)
	    err (1, "listen");
a106 1
    freeaddrinfo (ai);
d122 1
d125 1
d127 23
@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.4e
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2001 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: mini_inetd.c,v 1.29 2001/08/01 14:48:54 assar Exp $");
a78 1
    hints.ai_family   = PF_UNSPEC;
d98 1
a98 1
	    warn ("socket af = %d", a->ai_family);
d102 4
a105 10
	if (bind (fds[i], a->ai_addr, a->ai_addrlen) < 0) {
	    warn ("bind af = %d", a->ai_family);
	    close(fds[i]);
	    continue;
	}
	if (listen (fds[i], SOMAXCONN) < 0) {
	    warn ("listen af = %d", a->ai_family);
	    close(fds[i]);
	    continue;
	}
@


1.1.1.3
log
@Import of heimdal-0.6rc1
@
text
@d36 1
a36 1
RCSID("$KTH: mini_inetd.c,v 1.30 2002/02/18 19:08:55 joda Exp $");
d62 1
a62 1
 * Listen on a specified port, emulating inetd.
d66 1
a66 1
mini_inetd_addrinfo (struct addrinfo *ai)
d68 3
a70 2
    int ret;
    struct addrinfo *a;
d76 11
d119 1
a137 23
}

void
mini_inetd (int port)
{
    int error;
    struct addrinfo *ai, hints;
    char portstr[NI_MAXSERV];

    memset (&hints, 0, sizeof(hints));
    hints.ai_flags    = AI_PASSIVE;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_family   = PF_UNSPEC;

    snprintf (portstr, sizeof(portstr), "%d", ntohs(port));

    error = getaddrinfo (NULL, portstr, &hints, &ai);
    if (error)
	errx (1, "getaddrinfo: %s", gai_strerror (error));

    mini_inetd_addrinfo(ai);
    
    freeaddrinfo(ai);
@


1.1.1.4
log
@Import of heimdal-0.7.2
@
text
@d36 1
a36 1
RCSID("$KTH: mini_inetd.c,v 1.31 2005/04/12 11:28:56 lha Exp $");
d65 1
a65 1
void ROKEN_LIB_FUNCTION
d127 1
a127 1
void ROKEN_LIB_FUNCTION
@


