head	1.2;
access;
symbols
	OPENBSD_5_5:1.1.0.6
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.2
	OPENBSD_5_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.2
date	2014.04.22.10.01.34;	author reyk;	state dead;
branches;
next	1.1;

1.1
date	2013.06.17.18.57.45;	author robert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/*
 * Tree search generalized from Knuth (6.2.2) Algorithm T just like
 * the AT&T man page says.
 *
 * The node_t structure is for internal use only, lint doesn't grok it.
 *
 * Written by reading the System V Interface Definition, not the code.
 *
 * Totally public domain.
 */

#include <config.h>

#include "roken.h"
#include "search.h"

struct node {
    char *string;
    int order;
};

extern void *rk_tdelete(const void *, void **,
		 int (*)(const void *, const void *));
extern void *rk_tfind(const void *, void * const *,
	       int (*)(const void *, const void *));
extern void *rk_tsearch(const void *, void **, int (*)(const void *, const void *));
extern void rk_twalk(const void *, void (*)(const void *, VISIT, int));

void *rootnode = NULL;
int numerr = 0;

/*
 *  This routine compares two nodes, based on an
 *  alphabetical ordering of the string field.
 */
int
node_compare(const void *node1, const void *node2)
{
    return strcmp(((const struct node *) node1)->string,
		  ((const struct node *) node2)->string);
}

static int walkorder = -1;

void
list_node(const void *ptr, VISIT order, int level)
{
    const struct node *p = *(const struct node **) ptr;

    if (order == postorder || order == leaf)  {
	walkorder++;
	if (p->order != walkorder) {
	    warnx("sort failed: expected %d next, got %d\n", walkorder,
		  p->order);
	    numerr++;
	}
    }
}

int
main(int argc, char **argv)
{
    int numtest = 1;
    struct node *t, *p, tests[] = {
	{ "", 0 },
	{ "ab", 3 },
	{ "abc", 4 },
	{ "abcdefg", 8 },
	{ "abcd", 5 },
	{ "a", 2 },
	{ "abcdef", 7 },
	{ "abcde", 6 },
	{ "=", 1 },
	{ NULL }
    };

    for(t = tests; t->string; t++) {
	/* Better not be there */
	p = (struct node *)rk_tfind((void *)t, (void **)&rootnode,
				    node_compare);

	if (p) {
	    warnx("erroneous list: found %d\n", p->order);
	    numerr++;
	}

	/* Put node into the tree. */
	p = (struct node *) rk_tsearch((void *)t, (void **)&rootnode,
				       node_compare);

	if (!p) {
	    warnx("erroneous list: missing %d\n", t->order);
	    numerr++;
	}
    }

    rk_twalk(rootnode, list_node);

    for(t = tests; t->string; t++) {
	/* Better be there */
	p =  (struct node *) rk_tfind((void *)t, (void **)&rootnode,
				      node_compare);

	if (!p) {
	    warnx("erroneous list: missing %d\n", t->order);
	    numerr++;
	}

	/* pull out node */
	(void) rk_tdelete((void *)t, (void **)&rootnode,
			  node_compare);

	/* Better not be there */
	p =  (struct node *) rk_tfind((void *)t, (void **)&rootnode,
				      node_compare);

	if (p) {
	    warnx("erroneous list: found %d\n", p->order);
	    numerr++;
	}

    }

    return numerr;
}
@


1.1
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@@

