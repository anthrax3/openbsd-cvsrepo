head	1.3;
access;
symbols
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.2
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.1.1.1.0.28
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.26
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.24
	OPENBSD_5_0:1.1.1.1.0.22
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.20
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.18
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.14
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.16
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.12
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.10
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.8
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.6
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.4
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.2
	OPENBSD_4_0_BASE:1.1.1.1
	HEIMDAL_0_7_2:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2014.04.22.10.01.34;	author reyk;	state dead;
branches;
next	1.2;

1.2
date	2013.06.17.18.57.45;	author robert;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.14.07.33.45;	author biorn;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.04.14.07.33.45;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.3
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/*
 * Copyright (c) 1999 - 2004 Kungliga Tekniska HÃ¶gskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <config.h>

#ifdef HAVE_SYS_MMAN_H
#include <sys/mman.h>
#endif
#include <stdio.h>
#include <string.h>
#include <err.h>
#include "roken.h"

#include "test-mem.h"

/* #undef HAVE_MMAP */

struct {
    void *start;
    size_t size;
    void *data_start;
    size_t data_size;
    enum rk_test_mem_type type;
    int fd;
} map;

#ifdef HAVE_SIGACTION

struct sigaction sa, osa;

#else

void (* osigh)(int);

#endif

char *testname;

static RETSIGTYPE
segv_handler(int sig)
{
    int fd;
    char msg[] = "SIGSEGV i current test: ";

    fd = open("/dev/stdout", O_WRONLY, 0600);
    if (fd >= 0) {
	(void)write(fd, msg, sizeof(msg) - 1);
	(void)write(fd, testname, strlen(testname));
	(void)write(fd, "\n", 1);
	close(fd);
    }
    _exit(1);
}

#define TESTREC()							\
    if (testname)							\
	errx(1, "test %s run recursively on %s", name, testname);	\
    testname = strdup(name);						\
    if (testname == NULL)						\
	errx(1, "malloc");


ROKEN_LIB_FUNCTION void * ROKEN_LIB_CALL
rk_test_mem_alloc(enum rk_test_mem_type type, const char *name,
		  void *buf, size_t size)
{
#ifndef HAVE_MMAP
    unsigned char *p;

    TESTREC();

    p = malloc(size + 2);
    if (p == NULL)
	errx(1, "malloc");
    map.type = type;
    map.start = p;
    map.size = size + 2;
    p[0] = 0xff;
    p[map.size-1] = 0xff;
    map.data_start = p + 1;
#else
    unsigned char *p;
    int flags, ret, fd;
    size_t pagesize = getpagesize();

    TESTREC();

    map.type = type;

#ifdef MAP_ANON
    flags = MAP_ANON;
    fd = -1;
#else
    flags = 0;
    fd = open ("/dev/zero", O_RDONLY);
    if(fd < 0)
	err (1, "open /dev/zero");
#endif
    map.fd = fd;
    flags |= MAP_PRIVATE;

    map.size = size + pagesize - (size % pagesize) + pagesize * 2;

    p = (unsigned char *)mmap(0, map.size, PROT_READ | PROT_WRITE,
			      flags, fd, 0);
    if (p == (unsigned char *)MAP_FAILED)
	err (1, "mmap");

    map.start = p;

    ret = mprotect ((void *)p, pagesize, 0);
    if (ret < 0)
	err (1, "mprotect");

    ret = mprotect (p + map.size - pagesize, pagesize, 0);
    if (ret < 0)
	err (1, "mprotect");

    switch (type) {
    case RK_TM_OVERRUN:
	map.data_start = p + map.size - pagesize - size;
	break;
    case RK_TM_UNDERRUN:
	map.data_start = p + pagesize;
	break;
    default:
	abort();
    }
#endif
#ifdef HAVE_SIGACTION
    sigemptyset (&sa.sa_mask);
    sa.sa_flags = 0;
#ifdef SA_RESETHAND
    sa.sa_flags |= SA_RESETHAND;
#endif
    sa.sa_handler = segv_handler;
    sigaction (SIGSEGV, &sa, &osa);
#else
    osigh = signal(SIGSEGV, segv_handler);
#endif

    map.data_size = size;
    if (buf)
	memcpy(map.data_start, buf, size);
    return map.data_start;
}

ROKEN_LIB_FUNCTION void ROKEN_LIB_CALL
rk_test_mem_free(const char *map_name)
{
#ifndef HAVE_MMAP
    unsigned char *p = map.start;

    if (testname == NULL)
	errx(1, "test_mem_free call on no free");

    if (p[0] != 0xff)
	errx(1, "%s: %s underrun %x\n", testname, map_name, p[0]);
    if (p[map.size-1] != 0xff)
	errx(1, "%s: %s overrun %x\n", testname, map_name, p[map.size - 1]);
    free(map.start);
#else
    int ret;

    if (testname == NULL)
	errx(1, "test_mem_free call on no free");

    ret = munmap (map.start, map.size);
    if (ret < 0)
	err (1, "munmap");
    if (map.fd > 0)
	close(map.fd);
#endif
    free(testname);
    testname = NULL;

#ifdef HAVE_SIGACTION
    sigaction (SIGSEGV, &osa, NULL);
#else
    signal (SIGSEGV, osigh);
#endif
}
@


1.2
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@@


1.1
log
@Initial revision
@
text
@d2 3
a4 3
 * Copyright (c) 1999 - 2004 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
d6 3
a8 3
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
d10 2
a11 2
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
d13 3
a15 3
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
d17 3
a19 3
 * 3. Neither the name of the Institute nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission. 
d21 11
a31 11
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE. 
a33 1
#ifdef HAVE_CONFIG_H
d35 1
a35 1
#endif
d42 1
a42 1
#include <roken.h>
a45 2
RCSID("$KTH: test-mem.c,v 1.4 2005/05/29 21:20:26 lha Exp $");

d57 2
d61 6
d74 1
a74 1
    
d77 3
a79 3
	write(fd, msg, sizeof(msg) - 1);
	write(fd, testname, strlen(testname));
	write(fd, "\n", 1);
d93 1
a93 1
void * ROKEN_LIB_FUNCTION
d99 1
a99 1
    
d109 1
a109 1
    p[map.size] = 0xff;
d160 1
d168 3
d178 1
a178 1
void ROKEN_LIB_FUNCTION
d183 1
a183 1
    
d189 1
a189 1
    if (p[map.size] != 0xff)
d194 1
a194 1
    
d207 1
d209 3
@


1.1.1.1
log
@Import of heimdal-0.7.2
@
text
@@
