head	1.3;
access;
symbols
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.2
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.1.1.4.0.28
	OPENBSD_5_3_BASE:1.1.1.4
	OPENBSD_5_2:1.1.1.4.0.26
	OPENBSD_5_2_BASE:1.1.1.4
	OPENBSD_5_1_BASE:1.1.1.4
	OPENBSD_5_1:1.1.1.4.0.24
	OPENBSD_5_0:1.1.1.4.0.22
	OPENBSD_5_0_BASE:1.1.1.4
	OPENBSD_4_9:1.1.1.4.0.20
	OPENBSD_4_9_BASE:1.1.1.4
	OPENBSD_4_8:1.1.1.4.0.18
	OPENBSD_4_8_BASE:1.1.1.4
	OPENBSD_4_7:1.1.1.4.0.14
	OPENBSD_4_7_BASE:1.1.1.4
	OPENBSD_4_6:1.1.1.4.0.16
	OPENBSD_4_6_BASE:1.1.1.4
	OPENBSD_4_5:1.1.1.4.0.12
	OPENBSD_4_5_BASE:1.1.1.4
	OPENBSD_4_4:1.1.1.4.0.10
	OPENBSD_4_4_BASE:1.1.1.4
	OPENBSD_4_3:1.1.1.4.0.8
	OPENBSD_4_3_BASE:1.1.1.4
	OPENBSD_4_2:1.1.1.4.0.6
	OPENBSD_4_2_BASE:1.1.1.4
	OPENBSD_4_1:1.1.1.4.0.4
	OPENBSD_4_1_BASE:1.1.1.4
	OPENBSD_4_0:1.1.1.4.0.2
	OPENBSD_4_0_BASE:1.1.1.4
	HEIMDAL_0_7_2:1.1.1.4
	OPENBSD_3_9:1.1.1.3.0.12
	OPENBSD_3_9_BASE:1.1.1.3
	OPENBSD_3_8:1.1.1.3.0.10
	OPENBSD_3_8_BASE:1.1.1.3
	OPENBSD_3_7:1.1.1.3.0.8
	OPENBSD_3_7_BASE:1.1.1.3
	HEIMDAL_0_6_3:1.1.1.3
	OPENBSD_3_6:1.1.1.3.0.6
	OPENBSD_3_6_BASE:1.1.1.3
	OPENBSD_3_5:1.1.1.3.0.4
	OPENBSD_3_5_BASE:1.1.1.3
	OPENBSD_3_4:1.1.1.3.0.2
	OPENBSD_3_4_BASE:1.1.1.3
	HEIMDAL_0_6:1.1.1.3
	HEIMDAL_0_6RC1:1.1.1.3
	OPENBSD_3_3:1.1.1.2.0.6
	OPENBSD_3_3_BASE:1.1.1.2
	OPENBSD_3_2:1.1.1.2.0.4
	OPENBSD_3_2_BASE:1.1.1.2
	OPENBSD_3_1:1.1.1.2.0.2
	OPENBSD_3_1_BASE:1.1.1.2
	HEIMDAL_0_4e:1.1.1.2
	OPENBSD_3_0:1.1.1.1.0.2
	OPENBSD_3_0_BASE:1.1.1.1
	HEIMDAL_0_3f:1.1.1.1
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2014.04.22.10.01.33;	author reyk;	state dead;
branches;
next	1.2;

1.2
date	2013.06.17.18.57.45;	author robert;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.25.07.51.17;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.51.17;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.02.06.08.55.50;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.02.16.07;	author hin;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2006.04.14.07.33.43;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.3
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/*
 * Copyright (c) 1995 - 2002 Kungliga Tekniska HÃ¶gskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/* $Id: resolve.h,v 1.2 2013/06/17 18:57:45 robert Exp $ */

#ifndef __RESOLVE_H__
#define __RESOLVE_H__

#ifndef ROKEN_LIB_FUNCTION
#ifdef _WIN32
#define ROKEN_LIB_FUNCTION
#define ROKEN_LIB_CALL     __cdecl
#else
#define ROKEN_LIB_FUNCTION
#define ROKEN_LIB_CALL
#endif
#endif

enum {
    rk_ns_c_in = 1
};

enum {
	rk_ns_t_invalid = 0,	/* Cookie. */
	rk_ns_t_a = 1,		/* Host address. */
	rk_ns_t_ns = 2,		/* Authoritative server. */
	rk_ns_t_md = 3,		/* Mail destination. */
	rk_ns_t_mf = 4,		/* Mail forwarder. */
	rk_ns_t_cname = 5,	/* Canonical name. */
	rk_ns_t_soa = 6,	/* Start of authority zone. */
	rk_ns_t_mb = 7,		/* Mailbox domain name. */
	rk_ns_t_mg = 8,		/* Mail group member. */
	rk_ns_t_mr = 9,		/* Mail rename name. */
	rk_ns_t_null = 10,	/* Null resource record. */
	rk_ns_t_wks = 11,	/* Well known service. */
	rk_ns_t_ptr = 12,	/* Domain name pointer. */
	rk_ns_t_hinfo = 13,	/* Host information. */
	rk_ns_t_minfo = 14,	/* Mailbox information. */
	rk_ns_t_mx = 15,	/* Mail routing information. */
	rk_ns_t_txt = 16,	/* Text strings. */
	rk_ns_t_rp = 17,	/* Responsible person. */
	rk_ns_t_afsdb = 18,	/* AFS cell database. */
	rk_ns_t_x25 = 19,	/* X_25 calling address. */
	rk_ns_t_isdn = 20,	/* ISDN calling address. */
	rk_ns_t_rt = 21,	/* Router. */
	rk_ns_t_nsap = 22,	/* NSAP address. */
	rk_ns_t_nsap_ptr = 23,	/* Reverse NSAP lookup (deprecated). */
	rk_ns_t_sig = 24,	/* Security signature. */
	rk_ns_t_key = 25,	/* Security key. */
	rk_ns_t_px = 26,	/* X.400 mail mapping. */
	rk_ns_t_gpos = 27,	/* Geographical position (withdrawn). */
	rk_ns_t_aaaa = 28,	/* Ip6 Address. */
	rk_ns_t_loc = 29,	/* Location Information. */
	rk_ns_t_nxt = 30,	/* Next domain (security). */
	rk_ns_t_eid = 31,	/* Endpoint identifier. */
	rk_ns_t_nimloc = 32,	/* Nimrod Locator. */
	rk_ns_t_srv = 33,	/* Server Selection. */
	rk_ns_t_atma = 34,	/* ATM Address */
	rk_ns_t_naptr = 35,	/* Naming Authority PoinTeR */
	rk_ns_t_kx = 36,	/* Key Exchange */
	rk_ns_t_cert = 37,	/* Certification record */
	rk_ns_t_a6 = 38,	/* IPv6 address (deprecates AAAA) */
	rk_ns_t_dname = 39,	/* Non-terminal DNAME (for IPv6) */
	rk_ns_t_sink = 40,	/* Kitchen sink (experimentatl) */
	rk_ns_t_opt = 41,	/* EDNS0 option (meta-RR) */
	rk_ns_t_apl = 42,	/* Address prefix list (RFC 3123) */
	rk_ns_t_ds = 43,	/* Delegation Signer (RFC 3658) */
	rk_ns_t_sshfp = 44,	/* SSH fingerprint */
	rk_ns_t_tkey = 249,	/* Transaction key */
	rk_ns_t_tsig = 250,	/* Transaction signature. */
	rk_ns_t_ixfr = 251,	/* Incremental zone transfer. */
	rk_ns_t_axfr = 252,	/* Transfer zone of authority. */
	rk_ns_t_mailb = 253,	/* Transfer mailbox records. */
	rk_ns_t_maila = 254,	/* Transfer mail agent records. */
	rk_ns_t_any = 255,	/* Wildcard match. */
	rk_ns_t_zxfr = 256,	/* BIND-specific, nonstandard. */
	rk_ns_t_max = 65536
};

#ifndef MAXDNAME
#define MAXDNAME	1025
#endif

#define mx_record		rk_mx_record
#define srv_record		rk_srv_record
#define key_record		rk_key_record
#define sig_record		rk_sig_record
#define cert_record		rk_cert_record
#define sshfp_record		rk_sshfp_record

struct rk_dns_query{
    char *domain;
    unsigned type;
    unsigned class;
};

struct rk_mx_record{
    unsigned  preference;
    char domain[1];
};

struct rk_srv_record{
    unsigned priority;
    unsigned weight;
    unsigned port;
    char target[1];
};

struct rk_key_record {
    unsigned flags;
    unsigned protocol;
    unsigned algorithm;
    size_t   key_len;
    u_char   key_data[1];
};

struct rk_sig_record {
    unsigned type;
    unsigned algorithm;
    unsigned labels;
    unsigned orig_ttl;
    unsigned sig_expiration;
    unsigned sig_inception;
    unsigned key_tag;
    char     *signer;
    size_t   sig_len;
    char     sig_data[1];	/* also includes signer */
};

struct rk_cert_record {
    unsigned type;
    unsigned tag;
    unsigned algorithm;
    size_t   cert_len;
    u_char   cert_data[1];
};

struct rk_sshfp_record {
    unsigned algorithm;
    unsigned type;
    size_t   sshfp_len;
    u_char   sshfp_data[1];
};

struct rk_ds_record {
    unsigned key_tag;
    unsigned algorithm;
    unsigned digest_type;
    size_t digest_len;
    u_char digest_data[1];
};

struct rk_resource_record{
    char *domain;
    unsigned type;
    unsigned class;
    unsigned ttl;
    unsigned size;
    union {
	void *data;
	struct rk_mx_record *mx;
	struct rk_mx_record *afsdb; /* mx and afsdb are identical */
	struct rk_srv_record *srv;
	struct in_addr *a;
	char *txt;
	struct rk_key_record *key;
	struct rk_cert_record *cert;
	struct rk_sig_record *sig;
	struct rk_sshfp_record *sshfp;
	struct rk_ds_record *ds;
    }u;
    struct rk_resource_record *next;
};

#define rk_DNS_MAX_PACKET_SIZE		0xffff

struct rk_dns_header {
    unsigned id;
    unsigned flags;
#define rk_DNS_HEADER_RESPONSE_FLAG		1
#define rk_DNS_HEADER_AUTHORITIVE_ANSWER	2
#define rk_DNS_HEADER_TRUNCATED_MESSAGE		4
#define rk_DNS_HEADER_RECURSION_DESIRED		8
#define rk_DNS_HEADER_RECURSION_AVAILABLE	16
#define rk_DNS_HEADER_AUTHENTIC_DATA		32
#define rk_DNS_HEADER_CHECKING_DISABLED		64
    unsigned opcode;
    unsigned response_code;
    unsigned qdcount;
    unsigned ancount;
    unsigned nscount;
    unsigned arcount;
};

struct rk_dns_reply{
    struct rk_dns_header h;
    struct rk_dns_query q;
    struct rk_resource_record *head;
};


#ifdef __cplusplus
extern "C" {
#endif

ROKEN_LIB_FUNCTION struct rk_dns_reply* ROKEN_LIB_CALL
	rk_dns_lookup(const char *, const char *);
ROKEN_LIB_FUNCTION void ROKEN_LIB_CALL
	rk_dns_free_data(struct rk_dns_reply *);
ROKEN_LIB_FUNCTION int ROKEN_LIB_CALL
	rk_dns_string_to_type(const char *name);
ROKEN_LIB_FUNCTION const char * ROKEN_LIB_CALL
	rk_dns_type_to_string(int type);
ROKEN_LIB_FUNCTION void ROKEN_LIB_CALL
	rk_dns_srv_order(struct rk_dns_reply*);

#ifdef __cplusplus
}
#endif

#endif /* __RESOLVE_H__ */
@


1.2
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@d34 1
a34 1
/* $Id$ */
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2000 Kungliga Tekniska Högskolan
d5 1
a5 1
 * 
d9 1
a9 1
 * 
d12 1
a12 1
 * 
d16 1
a16 1
 * 
d20 1
a20 1
 * 
d34 1
a34 1
/* $KTH: resolve.h,v 1.12 2000/10/15 21:28:56 assar Exp $ */
d39 81
a119 1
/* We use these, but they are not always present in <arpa/nameser.h> */
d121 1
a121 23
#ifndef T_TXT
#define T_TXT		16
#endif
#ifndef T_AFSDB
#define T_AFSDB		18
#endif
#ifndef T_SIG
#define T_SIG		24
#endif
#ifndef T_KEY
#define T_KEY		25
#endif
#ifndef T_SRV
#define T_SRV		33
#endif
#ifndef T_NAPTR
#define T_NAPTR		35
#endif
#ifndef T_CERT
#define T_CERT		37
#endif

struct dns_query{
d127 1
a127 1
struct mx_record{
d132 1
a132 1
struct srv_record{
d139 1
a139 1
struct key_record {
d147 1
a147 1
struct sig_record {
d156 1
a156 1
    unsigned sig_len;
d160 1
a160 1
struct cert_record {
d168 16
a183 1
struct resource_record{
d191 3
a193 3
	struct mx_record *mx;
	struct mx_record *afsdb; /* mx and afsdb are identical */
	struct srv_record *srv;
d196 5
a200 3
	struct key_record *key;
	struct cert_record *cert;
	struct sig_record *sig;
d202 1
a202 1
    struct resource_record *next;
d205 1
a205 3
#ifndef T_A /* XXX if <arpa/nameser.h> isn't included */
typedef int HEADER; /* will never be used */
#endif
d207 22
a228 4
struct dns_reply{
    HEADER h;
    struct dns_query q;
    struct resource_record *head;
d232 18
a249 4
struct dns_reply* dns_lookup(const char *, const char *);
void dns_free_data(struct dns_reply *);
int dns_string_to_type(const char *name);
const char *dns_type_to_string(int type);
@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.4e
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2001 Kungliga Tekniska Högskolan
d34 1
a34 1
/* $KTH: resolve.h,v 1.13 2001/06/09 01:35:04 joda Exp $ */
a144 1
void dns_srv_order(struct dns_reply*);
@


1.1.1.3
log
@Import of heimdal-0.6rc1
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2002 Kungliga Tekniska Högskolan
d34 1
a34 1
/* $KTH: resolve.h,v 1.15 2002/08/26 13:30:16 assar Exp $ */
a52 3
#ifndef T_AAAA
#define T_AAAA		28
#endif
a61 15

#define dns_query		rk_dns_query
#define mx_record		rk_mx_record
#define srv_record		rk_srv_record
#define key_record		rk_key_record
#define sig_record		rk_sig_record
#define cert_record		rk_cert_record
#define resource_record		rk_resource_record
#define dns_reply		rk_dns_reply

#define dns_lookup		rk_dns_lookup
#define dns_free_data		rk_dns_free_data
#define dns_string_to_type	rk_dns_string_to_type
#define dns_type_to_string	rk_dns_type_to_string
#define dns_srv_order		rk_dns_srv_order
@


1.1.1.4
log
@Import of heimdal-0.7.2
@
text
@d34 1
a34 1
/* $KTH: resolve.h,v 1.24 2005/04/12 11:29:02 lha Exp $ */
a38 65
#ifndef ROKEN_LIB_FUNCTION
#ifdef _WIN32
#define ROKEN_LIB_FUNCTION _stdcall
#else
#define ROKEN_LIB_FUNCTION
#endif
#endif

typedef enum {
	rk_ns_t_invalid = 0,	/* Cookie. */
	rk_ns_t_a = 1,		/* Host address. */
	rk_ns_t_ns = 2,		/* Authoritative server. */
	rk_ns_t_md = 3,		/* Mail destination. */
	rk_ns_t_mf = 4,		/* Mail forwarder. */
	rk_ns_t_cname = 5,	/* Canonical name. */
	rk_ns_t_soa = 6,	/* Start of authority zone. */
	rk_ns_t_mb = 7,		/* Mailbox domain name. */
	rk_ns_t_mg = 8,		/* Mail group member. */
	rk_ns_t_mr = 9,		/* Mail rename name. */
	rk_ns_t_null = 10,	/* Null resource record. */
	rk_ns_t_wks = 11,	/* Well known service. */
	rk_ns_t_ptr = 12,	/* Domain name pointer. */
	rk_ns_t_hinfo = 13,	/* Host information. */
	rk_ns_t_minfo = 14,	/* Mailbox information. */
	rk_ns_t_mx = 15,	/* Mail routing information. */
	rk_ns_t_txt = 16,	/* Text strings. */
	rk_ns_t_rp = 17,	/* Responsible person. */
	rk_ns_t_afsdb = 18,	/* AFS cell database. */
	rk_ns_t_x25 = 19,	/* X_25 calling address. */
	rk_ns_t_isdn = 20,	/* ISDN calling address. */
	rk_ns_t_rt = 21,	/* Router. */
	rk_ns_t_nsap = 22,	/* NSAP address. */
	rk_ns_t_nsap_ptr = 23,	/* Reverse NSAP lookup (deprecated). */
	rk_ns_t_sig = 24,	/* Security signature. */
	rk_ns_t_key = 25,	/* Security key. */
	rk_ns_t_px = 26,	/* X.400 mail mapping. */
	rk_ns_t_gpos = 27,	/* Geographical position (withdrawn). */
	rk_ns_t_aaaa = 28,	/* Ip6 Address. */
	rk_ns_t_loc = 29,	/* Location Information. */
	rk_ns_t_nxt = 30,	/* Next domain (security). */
	rk_ns_t_eid = 31,	/* Endpoint identifier. */
	rk_ns_t_nimloc = 32,	/* Nimrod Locator. */
	rk_ns_t_srv = 33,	/* Server Selection. */
	rk_ns_t_atma = 34,	/* ATM Address */
	rk_ns_t_naptr = 35,	/* Naming Authority PoinTeR */
	rk_ns_t_kx = 36,	/* Key Exchange */
	rk_ns_t_cert = 37,	/* Certification record */
	rk_ns_t_a6 = 38,	/* IPv6 address (deprecates AAAA) */
	rk_ns_t_dname = 39,	/* Non-terminal DNAME (for IPv6) */
	rk_ns_t_sink = 40,	/* Kitchen sink (experimentatl) */
	rk_ns_t_opt = 41,	/* EDNS0 option (meta-RR) */
	rk_ns_t_apl = 42,	/* Address prefix list (RFC 3123) */
	rk_ns_t_ds = 43,	/* Delegation Signer (RFC 3658) */
	rk_ns_t_sshfp = 44,	/* SSH fingerprint */
	rk_ns_t_tkey = 249,	/* Transaction key */
	rk_ns_t_tsig = 250,	/* Transaction signature. */
	rk_ns_t_ixfr = 251,	/* Incremental zone transfer. */
	rk_ns_t_axfr = 252,	/* Transfer zone of authority. */
	rk_ns_t_mailb = 253,	/* Transfer mailbox records. */
	rk_ns_t_maila = 254,	/* Transfer mail agent records. */
	rk_ns_t_any = 255,	/* Wildcard match. */
	rk_ns_t_zxfr = 256,	/* BIND-specific, nonstandard. */
	rk_ns_t_max = 65536
} rk_ns_type;

a40 22
#ifndef C_IN
#define C_IN		1
#endif

#ifndef T_A
#define T_A		1
#endif
#ifndef T_NS
#define T_NS		2
#endif
#ifndef T_CNAME
#define T_CNAME		5
#endif
#ifndef T_SOA
#define T_SOA		5
#endif
#ifndef T_PTR
#define T_PTR		12
#endif
#ifndef T_MX
#define T_MX		15
#endif
a64 7
#ifndef T_SSHFP
#define T_SSHFP		44
#endif

#ifndef MAXDNAME
#define MAXDNAME	1025
#endif
a71 1
#define sshfp_record		rk_sshfp_record
a127 15
struct sshfp_record {
    unsigned algorithm;
    unsigned type;
    size_t   sshfp_len;
    u_char   sshfp_data[1];
};

struct ds_record {
    unsigned key_tag;
    unsigned algorithm;
    unsigned digest_type;
    unsigned digest_len;
    u_char digest_data[1];
};

a143 2
	struct sshfp_record *sshfp;
	struct ds_record *ds;
d148 3
a150 19
#define rk_DNS_MAX_PACKET_SIZE		0xffff

struct dns_header {
    unsigned id;
    unsigned flags;
#define rk_DNS_HEADER_RESPONSE_FLAG		1
#define rk_DNS_HEADER_AUTHORITIVE_ANSWER	2
#define rk_DNS_HEADER_TRUNCATED_MESSAGE		4
#define rk_DNS_HEADER_RECURSION_DESIRED		8
#define rk_DNS_HEADER_RECURSION_AVAILABLE	16
#define rk_DNS_HEADER_AUTHENTIC_DATA		32
#define rk_DNS_HEADER_CHECKING_DISABLED		64
    unsigned opcode;
    unsigned response_code;
    unsigned qdcount;
    unsigned ancount;
    unsigned nscount;
    unsigned arcount;
};
d153 1
a153 1
    struct dns_header h;
d159 5
a163 10
struct dns_reply* ROKEN_LIB_FUNCTION
	dns_lookup(const char *, const char *);
void ROKEN_LIB_FUNCTION
	dns_free_data(struct dns_reply *);
int ROKEN_LIB_FUNCTION
	dns_string_to_type(const char *name);
const char *ROKEN_LIB_FUNCTION
	dns_type_to_string(int type);
void ROKEN_LIB_FUNCTION
	dns_srv_order(struct dns_reply*);
@


