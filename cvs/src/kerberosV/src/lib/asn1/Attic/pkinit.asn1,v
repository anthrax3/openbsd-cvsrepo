head	1.3;
access;
symbols
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.2
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.1.1.1.0.48
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.46
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.44
	OPENBSD_5_0:1.1.1.1.0.42
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.40
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.38
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.34
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.36
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.32
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.30
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.28
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.26
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.24
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.22
	OPENBSD_4_0_BASE:1.1.1.1
	HEIMDAL_0_7_2:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.20
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.18
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.16
	OPENBSD_3_7_BASE:1.1.1.1
	HEIMDAL_0_6_3:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.14
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.12
	OPENBSD_3_5_BASE:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.10
	OPENBSD_3_4_BASE:1.1.1.1
	HEIMDAL_0_6:1.1.1.1
	HEIMDAL_0_6RC1:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.8
	OPENBSD_3_3_BASE:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.6
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.4
	OPENBSD_3_1_BASE:1.1.1.1
	HEIMDAL_0_4e:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.2
	OPENBSD_3_0_BASE:1.1.1.1
	HEIMDAL_0_3f:1.1.1.1
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2014.04.22.10.01.27;	author reyk;	state dead;
branches;
next	1.2;

1.2
date	2013.06.17.18.57.42;	author robert;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.25.07.49.58;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.49.58;	author hin;	state Exp;
branches;
next	;


desc
@@


1.3
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@-- $Id: pkinit.asn1,v 1.2 2013/06/17 18:57:42 robert Exp $ --

PKINIT DEFINITIONS ::= BEGIN

IMPORTS EncryptionKey, PrincipalName, Realm, KerberosTime, Checksum, Ticket FROM krb5
	IssuerAndSerialNumber, ContentInfo FROM cms
	SubjectPublicKeyInfo, AlgorithmIdentifier FROM rfc2459
	heim_any FROM heim;

id-pkinit OBJECT IDENTIFIER ::=
  { iso (1) org (3) dod (6) internet (1) security (5)
    kerberosv5 (2) pkinit (3) }

id-pkauthdata  OBJECT IDENTIFIER  ::= { id-pkinit 1 }
id-pkdhkeydata OBJECT IDENTIFIER  ::= { id-pkinit 2 }
id-pkrkeydata  OBJECT IDENTIFIER  ::= { id-pkinit 3 }
id-pkekuoid    OBJECT IDENTIFIER  ::= { id-pkinit 4 }
id-pkkdcekuoid OBJECT IDENTIFIER  ::= { id-pkinit 5 }

id-pkinit-kdf OBJECT IDENTIFIER           ::= { id-pkinit 6 }
id-pkinit-kdf-ah-sha1 OBJECT IDENTIFIER   ::= { id-pkinit-kdf 1 }
id-pkinit-kdf-ah-sha256 OBJECT IDENTIFIER ::= { id-pkinit-kdf 2 }
id-pkinit-kdf-ah-sha512 OBJECT IDENTIFIER ::= { id-pkinit-kdf 3 }

id-pkinit-san	OBJECT IDENTIFIER ::=
  { iso(1) org(3) dod(6) internet(1) security(5) kerberosv5(2)
    x509-sanan(2) }

id-pkinit-ms-eku OBJECT IDENTIFIER ::=
  { iso(1) org(3) dod(6) internet(1) private(4)
    enterprise(1) microsoft(311) 20 2 2 }

id-pkinit-ms-san OBJECT IDENTIFIER ::=
  { iso(1) org(3) dod(6) internet(1) private(4)
    enterprise(1) microsoft(311) 20 2 3 }

MS-UPN-SAN ::= UTF8String

pa-pk-as-req INTEGER ::=                  16
pa-pk-as-rep INTEGER ::=                  17

td-trusted-certifiers INTEGER ::=        104
td-invalid-certificates INTEGER ::=      105
td-dh-parameters INTEGER ::=             109

DHNonce ::= OCTET STRING

KDFAlgorithmId ::= SEQUENCE {
       kdf-id            [0] OBJECT IDENTIFIER,
       ...
}

TrustedCA ::= SEQUENCE {
	caName                  [0] IMPLICIT OCTET STRING,
	certificateSerialNumber [1] INTEGER OPTIONAL,
	subjectKeyIdentifier    [2] OCTET STRING OPTIONAL,
	...
}

ExternalPrincipalIdentifier ::= SEQUENCE {
	subjectName		[0] IMPLICIT OCTET STRING OPTIONAL,
	issuerAndSerialNumber	[1] IMPLICIT OCTET STRING OPTIONAL,
	subjectKeyIdentifier	[2] IMPLICIT OCTET STRING OPTIONAL,
	...
}

ExternalPrincipalIdentifiers ::= SEQUENCE OF ExternalPrincipalIdentifier

PA-PK-AS-REQ ::= SEQUENCE {
        signedAuthPack          [0] IMPLICIT OCTET STRING,
        trustedCertifiers       [1] ExternalPrincipalIdentifiers OPTIONAL,
	kdcPkId                 [2] IMPLICIT OCTET STRING OPTIONAL,
	...
}

PKAuthenticator ::= SEQUENCE {
	cusec                   [0] INTEGER -- (0..999999) --,
	ctime                   [1] KerberosTime,
	nonce                   [2] INTEGER (0..4294967295),
	paChecksum              [3] OCTET STRING OPTIONAL,
	...
}

AuthPack ::= SEQUENCE {
	pkAuthenticator         [0] PKAuthenticator,
	clientPublicValue       [1] SubjectPublicKeyInfo OPTIONAL,
	supportedCMSTypes       [2] SEQUENCE OF AlgorithmIdentifier OPTIONAL,
	clientDHNonce           [3] DHNonce OPTIONAL,
	...,
	supportedKDFs		[4] SEQUENCE OF KDFAlgorithmId OPTIONAL,
	...
}

TD-TRUSTED-CERTIFIERS ::= ExternalPrincipalIdentifiers
TD-INVALID-CERTIFICATES ::= ExternalPrincipalIdentifiers

KRB5PrincipalName ::= SEQUENCE {
	realm                   [0] Realm,
	principalName           [1] PrincipalName
}

AD-INITIAL-VERIFIED-CAS ::= SEQUENCE OF ExternalPrincipalIdentifier

DHRepInfo ::= SEQUENCE {
	dhSignedData            [0] IMPLICIT OCTET STRING,
	serverDHNonce           [1] DHNonce OPTIONAL,
	...,
	kdf			[2] KDFAlgorithmId OPTIONAL,
	...
}

PA-PK-AS-REP ::= CHOICE {
	dhInfo                  [0] DHRepInfo,
	encKeyPack              [1] IMPLICIT OCTET STRING,
	...
}

KDCDHKeyInfo ::= SEQUENCE {
	subjectPublicKey        [0] BIT STRING,
	nonce                   [1] INTEGER (0..4294967295),
	dhKeyExpiration         [2] KerberosTime OPTIONAL,
	...
}

ReplyKeyPack ::= SEQUENCE {
	replyKey                [0] EncryptionKey,
	asChecksum		[1] Checksum,
	...
}

TD-DH-PARAMETERS ::= SEQUENCE OF AlgorithmIdentifier


-- Windows compat glue --

PKAuthenticator-Win2k ::= SEQUENCE {
	kdcName			[0] PrincipalName,
	kdcRealm		[1] Realm,
	cusec			[2] INTEGER (0..4294967295),
	ctime			[3] KerberosTime,
	nonce                   [4] INTEGER (-2147483648..2147483647)
}

AuthPack-Win2k ::= SEQUENCE {
	pkAuthenticator         [0] PKAuthenticator-Win2k,
	clientPublicValue       [1] SubjectPublicKeyInfo OPTIONAL
}


TrustedCA-Win2k ::= CHOICE {
	caName                  [1] heim_any,
	issuerAndSerial         [2] IssuerAndSerialNumber
}

PA-PK-AS-REQ-Win2k ::= SEQUENCE {
	signed-auth-pack	[0] IMPLICIT OCTET STRING,
	trusted-certifiers	[2] SEQUENCE OF TrustedCA-Win2k OPTIONAL,
	kdc-cert		[3] IMPLICIT OCTET STRING OPTIONAL,
	encryption-cert		[4] IMPLICIT OCTET STRING OPTIONAL
}

PA-PK-AS-REP-Win2k ::= CHOICE {
	dhSignedData		[0] IMPLICIT OCTET STRING,
	encKeyPack		[1] IMPLICIT OCTET STRING
}

KDCDHKeyInfo-Win2k ::= SEQUENCE {
	nonce			[0] INTEGER (-2147483648..2147483647),
	subjectPublicKey	[2] BIT STRING
}

ReplyKeyPack-Win2k ::= SEQUENCE {
        replyKey                [0] EncryptionKey,
        nonce                   [1] INTEGER (-2147483648..2147483647),
	...
}

PA-PK-AS-REP-BTMM ::= SEQUENCE {
	dhSignedData		[0] heim_any OPTIONAL,
	encKeyPack		[1] heim_any OPTIONAL
}


PkinitSP80056AOtherInfo ::= SEQUENCE {
	algorithmID   AlgorithmIdentifier,
	partyUInfo     [0] OCTET STRING,
	partyVInfo     [1] OCTET STRING,
	suppPubInfo    [2] OCTET STRING OPTIONAL,
	suppPrivInfo   [3] OCTET STRING OPTIONAL
}

PkinitSuppPubInfo ::= SEQUENCE {
       enctype           [0] INTEGER (-2147483648..2147483647),
       as-REQ            [1] OCTET STRING,
       pk-as-rep         [2] OCTET STRING,
       ticket            [3] Ticket,
       ...
}

END
@


1.2
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@d1 1
a1 1
-- $Id$ --
@


1.1
log
@Initial revision
@
text
@d1 2
d5 54
a58 4
IMPORTS  EncryptionKey, PrincipalName, Realm, KerberosTime, TypedData 
	FROM krb5;
IMPORTS SignedData, EnvelopedData FROM CMS;
IMPORTS CertificateSerialNumber, AttributeTypeAndValue, Name FROM X509;
d60 6
d67 1
a67 1
-- 3.1
d69 5
a73 3
CertPrincipalName ::= SEQUENCE {
	name-type[0]		INTEGER,
	name-string[1]		SEQUENCE OF UTF8String
d76 7
d84 9
a92 1
-- 3.2.2
d94 2
d97 3
a99 25
TrustedCertifiers ::= SEQUENCE OF PrincipalName
				-- X.500 name encoded as a principal name
				-- see Section 3.1
CertificateIndex  ::= INTEGER
				-- 0 = 1st certificate,
				--     (in order of encoding)
				-- 1 = 2nd certificate, etc

PA-PK-AS-REP ::= CHOICE {
				-- PA TYPE 15
	dhSignedData[0]		SignedData,
				-- Defined in CMS and used only with
				-- Diffie-Hellman key exchange (if the
				-- client public value was present in the
				-- request).
				-- This choice MUST be supported
				-- by compliant implementations.
	encKeyPack[1]		EnvelopedData
				-- Defined in CMS
				-- The temporary key is encrypted
				-- using the client public key
				-- key
				-- SignedReplyKeyPack, encrypted
				-- with the temporary key, is also
				-- included.
d102 1
d104 6
a109 9

KdcDHKeyInfo ::= SEQUENCE {
				-- used only when utilizing Diffie-Hellman
	nonce[0]		INTEGER,
				-- binds responce to the request
	subjectPublicKey[2]	BIT STRING
				-- Equals public exponent (g^a mod p)
				-- INTEGER encoded as payload of
				-- BIT STRING
d112 4
a115 10
ReplyKeyPack ::= SEQUENCE {
				-- not used for Diffie-Hellman
	replyKey[0]		EncryptionKey,
				-- used to encrypt main reply
				-- ENCTYPE is at least as strong as
				-- ENCTYPE of session key
	nonce[1]		INTEGER
				-- binds response to the request
				-- must be same as the nonce
				-- passed in the PKAuthenticator
d118 5
a122 9
-- subjectAltName EXTENSION ::= {
-- 	SYNTAX GeneralNames
-- 	IDENTIFIED BY id-ce-subjectAltName
-- }

OtherName ::= SEQUENCE {
	type-id			OBJECT IDENTIFIER,
	value[0]		OCTET STRING
--	value[0] EXPLICIT ANY DEFINED BY type-id
d125 3
a127 2
GeneralName ::= CHOICE {
	otherName       [0] OtherName,
d131 1
a131 2
GeneralNames ::= SEQUENCE -- SIZE(1..MAX)
	OF GeneralName
a132 6
KerberosName ::= SEQUENCE {
	realm[0]		Realm,
				-- as defined in RFC 1510
	principalName[1]	CertPrincipalName
				-- defined above
}
d134 1
d136 7
a142 3
-- krb5 OBJECT IDENTIFIER ::= {
-- 	iso (1) org (3) dod (6) internet (1) security (5) kerberosv5 (2)
-- }
d144 4
a147 1
-- krb5PrincipalName OBJECT IDENTIFIER ::= { krb5 2 }
a148 1
-- 3.2.1
d150 4
d155 5
a159 3
IssuerAndSerialNumber ::= SEQUENCE {
	issuer			Name,
	serialNumber		CertificateSerialNumber
d162 3
a164 10
TrustedCas ::= CHOICE {
	principalName[0]	KerberosName,
				-- as defined below
	caName[1]		Name,
				-- fully qualified X.500 name
				-- as defined by X.509
	issuerAndSerial[2]	IssuerAndSerialNumber
				-- Since a CA may have a number of
				-- certificates, only one of which
				-- a client trusts
d167 3
a169 19
PA-PK-AS-REQ ::= SEQUENCE {
	-- PA TYPE 14
	signedAuthPack[0]	SignedData,
				-- defined in CMS [11]
				-- AuthPack (below) defines the data
				-- that is signed
	trustedCertifiers[1]	SEQUENCE OF TrustedCas OPTIONAL,
				-- CAs that the client trusts
	kdcCert[2]		IssuerAndSerialNumber OPTIONAL,
				-- as defined in CMS [11]
				-- specifies a particular KDC
				-- certificate if the client
				-- already has it;
	encryptionCert[3]	IssuerAndSerialNumber OPTIONAL
				-- For example, this may be the
				-- client's Diffie-Hellman
				-- certificate, or it may be the
				-- client's RSA encryption
				-- certificate.
d172 4
a175 23
PKAuthenticator ::= SEQUENCE {
	kdcName[0]		PrincipalName,
	kdcRealm[1]		Realm,
	cusec[2]		INTEGER,
				-- for replay prevention as in RFC1510
	ctime[3]		KerberosTime,
				-- for replay prevention as in RFC1510
	nonce[4]		INTEGER
}

-- This is the real definition of AlgorithmIdentifier
-- AlgorithmIdentifier ::= SEQUENCE {
-- 	algorithm		ALGORITHM.&id,
--	parameters		ALGORITHM.&Type
-- }   -- as specified by the X.509 recommendation[10]

-- But we'll use this one instead:

AlgorithmIdentifier ::= SEQUENCE {
	algorithm		OBJECT IDENTIFIER,
	parameters		CHOICE {
					a INTEGER
				}
d178 4
d184 14
a197 14
SubjectPublicKeyInfo ::= SEQUENCE {
	algorithm		AlgorithmIdentifier,
				-- dhKeyAgreement
	subjectPublicKey	BIT STRING
				-- for DH, equals
				-- public exponent (INTEGER encoded
				-- as payload of BIT STRING)
} -- as specified by the X.509 recommendation[10]

AuthPack ::= SEQUENCE {
	pkAuthenticator[0]	PKAuthenticator,
	clientPublicValue[1]	SubjectPublicKeyInfo OPTIONAL
				-- if client is using Diffie-Hellman
				-- (ephemeral-ephemeral only)
a198 1

@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@
