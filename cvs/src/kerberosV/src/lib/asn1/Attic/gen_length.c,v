head	1.3;
access;
symbols
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.2
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.1.1.4.0.28
	OPENBSD_5_3_BASE:1.1.1.4
	OPENBSD_5_2:1.1.1.4.0.26
	OPENBSD_5_2_BASE:1.1.1.4
	OPENBSD_5_1_BASE:1.1.1.4
	OPENBSD_5_1:1.1.1.4.0.24
	OPENBSD_5_0:1.1.1.4.0.22
	OPENBSD_5_0_BASE:1.1.1.4
	OPENBSD_4_9:1.1.1.4.0.20
	OPENBSD_4_9_BASE:1.1.1.4
	OPENBSD_4_8:1.1.1.4.0.18
	OPENBSD_4_8_BASE:1.1.1.4
	OPENBSD_4_7:1.1.1.4.0.14
	OPENBSD_4_7_BASE:1.1.1.4
	OPENBSD_4_6:1.1.1.4.0.16
	OPENBSD_4_6_BASE:1.1.1.4
	OPENBSD_4_5:1.1.1.4.0.12
	OPENBSD_4_5_BASE:1.1.1.4
	OPENBSD_4_4:1.1.1.4.0.10
	OPENBSD_4_4_BASE:1.1.1.4
	OPENBSD_4_3:1.1.1.4.0.8
	OPENBSD_4_3_BASE:1.1.1.4
	OPENBSD_4_2:1.1.1.4.0.6
	OPENBSD_4_2_BASE:1.1.1.4
	OPENBSD_4_1:1.1.1.4.0.4
	OPENBSD_4_1_BASE:1.1.1.4
	OPENBSD_4_0:1.1.1.4.0.2
	OPENBSD_4_0_BASE:1.1.1.4
	HEIMDAL_0_7_2:1.1.1.4
	OPENBSD_3_9:1.1.1.3.0.6
	OPENBSD_3_9_BASE:1.1.1.3
	OPENBSD_3_8:1.1.1.3.0.4
	OPENBSD_3_8_BASE:1.1.1.3
	OPENBSD_3_7:1.1.1.3.0.2
	OPENBSD_3_7_BASE:1.1.1.3
	HEIMDAL_0_6_3:1.1.1.3
	OPENBSD_3_6:1.1.1.2.0.6
	OPENBSD_3_6_BASE:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.4
	OPENBSD_3_5_BASE:1.1.1.2
	OPENBSD_3_4:1.1.1.2.0.2
	OPENBSD_3_4_BASE:1.1.1.2
	HEIMDAL_0_6:1.1.1.2
	HEIMDAL_0_6RC1:1.1.1.2
	OPENBSD_3_3:1.1.1.1.0.8
	OPENBSD_3_3_BASE:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.6
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.4
	OPENBSD_3_1_BASE:1.1.1.1
	HEIMDAL_0_4e:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.2
	OPENBSD_3_0_BASE:1.1.1.1
	HEIMDAL_0_3f:1.1.1.1
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2014.04.22.10.01.27;	author reyk;	state dead;
branches;
next	1.2;

1.2
date	2013.06.17.18.57.42;	author robert;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.25.07.49.56;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.49.56;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.05.11.02.15.37;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.10.29.15.55.33;	author biorn;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2006.04.14.07.32.53;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.3
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/*
 * Copyright (c) 1997 - 2005 Kungliga Tekniska HÃ¶gskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "gen_locl.h"

RCSID("$Id: gen_length.c,v 1.2 2013/06/17 18:57:42 robert Exp $");

static void
length_primitive (const char *typename,
		  const char *name,
		  const char *variable)
{
    fprintf (codefile, "%s += der_length_%s(%s);\n", variable, typename, name);
}

/* XXX same as der_length_tag */
static size_t
length_tag(unsigned int tag)
{
    size_t len = 0;

    if(tag <= 30)
	return 1;
    while(tag) {
	tag /= 128;
	len++;
    }
    return len + 1;
}


static int
length_type (const char *name, const Type *t,
	     const char *variable, const char *tmpstr)
{
    switch (t->type) {
    case TType:
#if 0
	length_type (name, t->symbol->type);
#endif
	fprintf (codefile, "%s += length_%s(%s);\n",
		 variable, t->symbol->gen_name, name);
	break;
    case TInteger:
	if(t->members) {
	    fprintf(codefile,
		    "{\n"
		    "int enumint = *%s;\n", name);
	    length_primitive ("integer", "&enumint", variable);
	    fprintf(codefile, "}\n");
	} else if (t->range == NULL) {
	    length_primitive ("heim_integer", name, variable);
	} else if (t->range->min == INT_MIN && t->range->max == INT_MAX) {
	    length_primitive ("integer", name, variable);
	} else if (t->range->min == 0 && t->range->max == UINT_MAX) {
	    length_primitive ("unsigned", name, variable);
	} else if (t->range->min == 0 && t->range->max == INT_MAX) {
	    length_primitive ("unsigned", name, variable);
	} else
	    errx(1, "%s: unsupported range %d -> %d",
		 name, t->range->min, t->range->max);

	break;
    case TBoolean:
	fprintf (codefile, "%s += 1;\n", variable);
	break;
    case TEnumerated :
	length_primitive ("enumerated", name, variable);
	break;
    case TOctetString:
	length_primitive ("octet_string", name, variable);
	break;
    case TBitString: {
	if (ASN1_TAILQ_EMPTY(t->members))
	    length_primitive("bit_string", name, variable);
	else {
	    if (!rfc1510_bitstring) {
		Member *m;
		int pos = ASN1_TAILQ_LAST(t->members, memhead)->val;

		fprintf(codefile,
			"do {\n");
		ASN1_TAILQ_FOREACH_REVERSE(m, t->members, memhead, members) {
		    while (m->val / 8 < pos / 8) {
			pos -= 8;
		    }
		    fprintf (codefile,
			     "if((%s)->%s) { %s += %d; break; }\n",
			     name, m->gen_name, variable, (pos + 8) / 8);
		}
		fprintf(codefile,
			"} while(0);\n");
		fprintf (codefile, "%s += 1;\n", variable);
	    } else {
		fprintf (codefile, "%s += 5;\n", variable);
	    }
	}
	break;
    }
    case TSet:
    case TSequence:
    case TChoice: {
	Member *m, *have_ellipsis = NULL;

	if (t->members == NULL)
	    break;

	if(t->type == TChoice)
	    fprintf (codefile, "switch((%s)->element) {\n", name);

	ASN1_TAILQ_FOREACH(m, t->members, members) {
	    char *s;

	    if (m->ellipsis) {
		have_ellipsis = m;
		continue;
	    }

	    if(t->type == TChoice)
		fprintf(codefile, "case %s:\n", m->label);

	    if (asprintf (&s, "%s(%s)->%s%s",
			  m->optional ? "" : "&", name,
			  t->type == TChoice ? "u." : "", m->gen_name) < 0 || s == NULL)
		errx(1, "malloc");
	    if (m->optional)
		fprintf (codefile, "if(%s)", s);
	    else if(m->defval)
		gen_compare_defval(s + 1, m->defval);
	    fprintf (codefile, "{\n"
		     "size_t %s_oldret = %s;\n"
		     "%s = 0;\n", tmpstr, variable, variable);
	    length_type (s, m->type, "ret", m->gen_name);
	    fprintf (codefile, "ret += %s_oldret;\n", tmpstr);
	    fprintf (codefile, "}\n");
	    free (s);
	    if(t->type == TChoice)
		fprintf(codefile, "break;\n");
	}
	if(t->type == TChoice) {
	    if (have_ellipsis)
		fprintf(codefile,
			"case %s:\n"
			"ret += (%s)->u.%s.length;\n"
			"break;\n",
			have_ellipsis->label,
			name,
			have_ellipsis->gen_name);
	    fprintf (codefile, "}\n"); /* switch */
	}
	break;
    }
    case TSetOf:
    case TSequenceOf: {
	char *n = NULL;
	char *sname = NULL;

	fprintf (codefile,
		 "{\n"
		 "size_t %s_oldret = %s;\n"
		 "int i;\n"
		 "%s = 0;\n",
		 tmpstr, variable, variable);

	fprintf (codefile, "for(i = (%s)->len - 1; i >= 0; --i){\n", name);
	fprintf (codefile, "size_t %s_for_oldret = %s;\n"
		 "%s = 0;\n", tmpstr, variable, variable);
	if (asprintf (&n, "&(%s)->val[i]", name) < 0  || n == NULL)
	    errx(1, "malloc");
	if (asprintf (&sname, "%s_S_Of", tmpstr) < 0 || sname == NULL)
	    errx(1, "malloc");
	length_type(n, t->subtype, variable, sname);
	fprintf (codefile, "%s += %s_for_oldret;\n",
		 variable, tmpstr);
	fprintf (codefile, "}\n");

	fprintf (codefile,
		 "%s += %s_oldret;\n"
		 "}\n", variable, tmpstr);
	free(n);
	free(sname);
	break;
    }
    case TGeneralizedTime:
	length_primitive ("generalized_time", name, variable);
	break;
    case TGeneralString:
	length_primitive ("general_string", name, variable);
	break;
    case TTeletexString:
	length_primitive ("general_string", name, variable);
	break;
    case TUTCTime:
	length_primitive ("utctime", name, variable);
	break;
    case TUTF8String:
	length_primitive ("utf8string", name, variable);
	break;
    case TPrintableString:
	length_primitive ("printable_string", name, variable);
	break;
    case TIA5String:
	length_primitive ("ia5_string", name, variable);
	break;
    case TBMPString:
	length_primitive ("bmp_string", name, variable);
	break;
    case TUniversalString:
	length_primitive ("universal_string", name, variable);
	break;
    case TVisibleString:
	length_primitive ("visible_string", name, variable);
	break;
    case TNull:
	fprintf (codefile, "/* NULL */\n");
	break;
    case TTag:{
    	char *tname = NULL;
	if (asprintf(&tname, "%s_tag", tmpstr) < 0 || tname == NULL)
	    errx(1, "malloc");
	length_type (name, t->subtype, variable, tname);
	fprintf (codefile, "ret += %lu + der_length_len (ret);\n",
		 (unsigned long)length_tag(t->tag.tagvalue));
	free(tname);
	break;
    }
    case TOID:
	length_primitive ("oid", name, variable);
	break;
    default :
	abort ();
    }
    return 0;
}

void
generate_type_length (const Symbol *s)
{
    fprintf (codefile,
	     "size_t ASN1CALL\n"
	     "length_%s(const %s *data)\n"
	     "{\n"
	     "size_t ret = 0;\n",
	     s->gen_name, s->gen_name);

    length_type ("data", s->type, "ret", "Top");
    fprintf (codefile, "return ret;\n}\n\n");
}

@


1.2
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@d36 1
a36 1
RCSID("$Id$");
@


1.1
log
@Initial revision
@
text
@d2 3
a4 3
 * Copyright (c) 1997 - 2000 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
d6 3
a8 3
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
d10 2
a11 2
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
d13 3
a15 3
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
d17 3
a19 3
 * 3. Neither the name of the Institute nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission. 
d21 11
a31 11
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE. 
d36 1
a36 1
RCSID("$KTH: gen_length.c,v 1.10 2000/06/21 22:40:53 assar Exp $");
d43 1
a43 1
    fprintf (codefile, "%s += length_%s(%s);\n", variable, typename, name);
d46 19
a64 2
static void
length_type (const char *name, const Type *t, const char *variable)
d75 21
a95 10
        if(t->members == NULL)
            length_primitive ("integer", name, variable);
        else {
            char *s;
            asprintf(&s, "(const int*)%s", name);
            if(s == NULL)
		errx (1, "out of memory");
            length_primitive ("integer", s, variable);
            free(s);
        }
d97 2
a98 2
    case TUInteger:
	length_primitive ("unsigned", name, variable);
d104 24
a127 5
	/*
	 * XXX - Hope this is correct
	 * look at TBitString case in `encode_type'
	 */
	fprintf (codefile, "%s += 7;\n", variable);
d130 4
a133 3
    case TSequence: {
	Member *m;
	int tag = -1;
d137 5
a141 2
      
	for (m = t->members; m && tag != m->val; m = m->next) {
d144 12
a155 2
	    asprintf (&s, "%s(%s)->%s",
		      m->optional ? "" : "&", name, m->gen_name);
d158 2
d161 4
a164 5
		     "int oldret = %s;\n"
		     "%s = 0;\n", variable, variable);
	    length_type (s, m->type, "ret");
	    fprintf (codefile, "%s += 1 + length_len(%s) + oldret;\n",
		     variable, variable);
a165 2
	    if (tag == -1)
		tag = m->val;
d167 13
a180 2
	fprintf (codefile,
		 "%s += 1 + length_len(%s);\n", variable, variable);
d183 1
d185 2
a186 1
	char *n;
d190 1
a190 1
		 "int oldret = %s;\n"
d193 1
a193 1
		 variable, variable);
d196 9
a204 2
	asprintf (&n, "&(%s)->val[i]", name);
	length_type(n, t->subtype, variable);
d208 2
a209 2
		 "%s += 1 + length_len(%s) + oldret;\n"
		 "}\n", variable, variable);
d211 1
d220 39
a258 3
    case TApplication:
	length_type (name, t->subtype, variable);
	fprintf (codefile, "ret += 1 + length_len (ret);\n");
d263 1
d269 6
a274 10
  fprintf (headerfile,
	   "size_t length_%s(const %s *);\n",
	   s->gen_name, s->gen_name);

  fprintf (codefile,
	   "size_t\n"
	   "length_%s(const %s *data)\n"
	   "{\n"
	   "size_t ret = 0;\n",
	   s->gen_name, s->gen_name);
d276 2
a277 2
  length_type ("data", s->type, "ret");
  fprintf (codefile, "return ret;\n}\n\n");
@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.6rc1
@
text
@d36 1
a36 1
RCSID("$KTH: gen_length.c,v 1.11 2001/09/25 13:39:26 assar Exp $");
a71 3
    case TEnumerated :
	length_primitive ("enumerated", name, variable);
	break;
a73 3
	break;
    case TOID :
	length_primitive ("oid", name, variable);
@


1.1.1.3
log
@Import of heimdal-0.6.3
@
text
@d36 1
a36 1
RCSID("$KTH: gen_length.c,v 1.11.6.1 2004/01/26 09:26:10 lha Exp $");
a128 2
	fprintf (codefile, "int oldret = %s;\n"
		 "%s = 0;\n", variable, variable);
a130 2
	fprintf (codefile, "%s += oldret;\n",
		 variable);
@


1.1.1.4
log
@Import of heimdal-0.7.2
@
text
@d36 1
a36 1
RCSID("$KTH: gen_length.c,v 1.14 2004/01/19 17:54:33 lha Exp $");
a148 6
    case TUTF8String:
	length_primitive ("utf8string", name, variable);
	break;
    case TNull:
	fprintf (codefile, "%s += length_nulltype();\n", variable);
	break;
a151 3
	break;
    case TBoolean:
	length_primitive ("boolean", name, variable);
@


