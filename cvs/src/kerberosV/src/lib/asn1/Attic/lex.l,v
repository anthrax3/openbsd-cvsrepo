head	1.3;
access;
symbols
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.2
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.1.1.4.0.28
	OPENBSD_5_3_BASE:1.1.1.4
	OPENBSD_5_2:1.1.1.4.0.26
	OPENBSD_5_2_BASE:1.1.1.4
	OPENBSD_5_1_BASE:1.1.1.4
	OPENBSD_5_1:1.1.1.4.0.24
	OPENBSD_5_0:1.1.1.4.0.22
	OPENBSD_5_0_BASE:1.1.1.4
	OPENBSD_4_9:1.1.1.4.0.20
	OPENBSD_4_9_BASE:1.1.1.4
	OPENBSD_4_8:1.1.1.4.0.18
	OPENBSD_4_8_BASE:1.1.1.4
	OPENBSD_4_7:1.1.1.4.0.14
	OPENBSD_4_7_BASE:1.1.1.4
	OPENBSD_4_6:1.1.1.4.0.16
	OPENBSD_4_6_BASE:1.1.1.4
	OPENBSD_4_5:1.1.1.4.0.12
	OPENBSD_4_5_BASE:1.1.1.4
	OPENBSD_4_4:1.1.1.4.0.10
	OPENBSD_4_4_BASE:1.1.1.4
	OPENBSD_4_3:1.1.1.4.0.8
	OPENBSD_4_3_BASE:1.1.1.4
	OPENBSD_4_2:1.1.1.4.0.6
	OPENBSD_4_2_BASE:1.1.1.4
	OPENBSD_4_1:1.1.1.4.0.4
	OPENBSD_4_1_BASE:1.1.1.4
	OPENBSD_4_0:1.1.1.4.0.2
	OPENBSD_4_0_BASE:1.1.1.4
	HEIMDAL_0_7_2:1.1.1.4
	OPENBSD_3_9:1.1.1.3.0.12
	OPENBSD_3_9_BASE:1.1.1.3
	OPENBSD_3_8:1.1.1.3.0.10
	OPENBSD_3_8_BASE:1.1.1.3
	OPENBSD_3_7:1.1.1.3.0.8
	OPENBSD_3_7_BASE:1.1.1.3
	HEIMDAL_0_6_3:1.1.1.3
	OPENBSD_3_6:1.1.1.3.0.6
	OPENBSD_3_6_BASE:1.1.1.3
	OPENBSD_3_5:1.1.1.3.0.4
	OPENBSD_3_5_BASE:1.1.1.3
	OPENBSD_3_4:1.1.1.3.0.2
	OPENBSD_3_4_BASE:1.1.1.3
	HEIMDAL_0_6:1.1.1.3
	HEIMDAL_0_6RC1:1.1.1.3
	OPENBSD_3_3:1.1.1.2.0.8
	OPENBSD_3_3_BASE:1.1.1.2
	OPENBSD_3_2:1.1.1.2.0.6
	OPENBSD_3_2_BASE:1.1.1.2
	OPENBSD_3_1:1.1.1.2.0.4
	OPENBSD_3_1_BASE:1.1.1.2
	HEIMDAL_0_4e:1.1.1.2
	OPENBSD_3_0:1.1.1.2.0.2
	OPENBSD_3_0_BASE:1.1.1.2
	HEIMDAL_0_3f:1.1.1.2
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2014.04.22.10.01.27;	author reyk;	state dead;
branches;
next	1.2;

1.2
date	2013.06.17.18.57.42;	author robert;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.25.07.49.57;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.49.57;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.06.22.21.22.20;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.02.15.37;	author hin;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2006.04.14.07.32.53;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.3
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@%{
/*
 * Copyright (c) 1997 - 2005 Kungliga Tekniska HÃ¶gskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/* $Id: lex.l,v 1.2 2013/06/17 18:57:42 robert Exp $ */

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif
#include <stdio.h>
#include <stdarg.h>
#include <stdlib.h>
#include <string.h>
#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif
#undef ECHO
#include "symbol.h"
#include "asn1parse.h"
#include "lex.h"
#include "gen_locl.h"

static unsigned lineno = 1;

#undef ECHO

static void unterminated(const char *, unsigned);

%}

/* This is for broken old lexes (solaris 10 and hpux) */
%e 2000
%p 5000
%a 5000
%n 1000
%o 10000

%%
ABSENT			{ return kw_ABSENT; }
ABSTRACT-SYNTAX		{ return kw_ABSTRACT_SYNTAX; }
ALL			{ return kw_ALL; }
APPLICATION		{ return kw_APPLICATION; }
AUTOMATIC		{ return kw_AUTOMATIC; }
BEGIN			{ return kw_BEGIN; }
BIT			{ return kw_BIT; }
BMPString		{ return kw_BMPString; }
BOOLEAN			{ return kw_BOOLEAN; }
BY			{ return kw_BY; }
CHARACTER		{ return kw_CHARACTER; }
CHOICE			{ return kw_CHOICE; }
CLASS			{ return kw_CLASS; }
COMPONENT		{ return kw_COMPONENT; }
COMPONENTS		{ return kw_COMPONENTS; }
CONSTRAINED		{ return kw_CONSTRAINED; }
CONTAINING		{ return kw_CONTAINING; }
DEFAULT			{ return kw_DEFAULT; }
DEFINITIONS		{ return kw_DEFINITIONS; }
EMBEDDED		{ return kw_EMBEDDED; }
ENCODED			{ return kw_ENCODED; }
END			{ return kw_END; }
ENUMERATED		{ return kw_ENUMERATED; }
EXCEPT			{ return kw_EXCEPT; }
EXPLICIT		{ return kw_EXPLICIT; }
EXPORTS			{ return kw_EXPORTS; }
EXTENSIBILITY		{ return kw_EXTENSIBILITY; }
EXTERNAL		{ return kw_EXTERNAL; }
FALSE			{ return kw_FALSE; }
FROM			{ return kw_FROM; }
GeneralString		{ return kw_GeneralString; }
GeneralizedTime		{ return kw_GeneralizedTime; }
GraphicString		{ return kw_GraphicString; }
IA5String		{ return kw_IA5String; }
IDENTIFIER		{ return kw_IDENTIFIER; }
IMPLICIT		{ return kw_IMPLICIT; }
IMPLIED			{ return kw_IMPLIED; }
IMPORTS			{ return kw_IMPORTS; }
INCLUDES		{ return kw_INCLUDES; }
INSTANCE		{ return kw_INSTANCE; }
INTEGER			{ return kw_INTEGER; }
INTERSECTION		{ return kw_INTERSECTION; }
ISO646String		{ return kw_ISO646String; }
MAX			{ return kw_MAX; }
MIN			{ return kw_MIN; }
MINUS-INFINITY		{ return kw_MINUS_INFINITY; }
NULL			{ return kw_NULL; }
NumericString		{ return kw_NumericString; }
OBJECT			{ return kw_OBJECT; }
OCTET			{ return kw_OCTET; }
OF			{ return kw_OF; }
OPTIONAL		{ return kw_OPTIONAL; }
ObjectDescriptor	{ return kw_ObjectDescriptor; }
PATTERN			{ return kw_PATTERN; }
PDV			{ return kw_PDV; }
PLUS-INFINITY		{ return kw_PLUS_INFINITY; }
PRESENT			{ return kw_PRESENT; }
PRIVATE			{ return kw_PRIVATE; }
PrintableString		{ return kw_PrintableString; }
REAL			{ return kw_REAL; }
RELATIVE_OID		{ return kw_RELATIVE_OID; }
SEQUENCE		{ return kw_SEQUENCE; }
SET			{ return kw_SET; }
SIZE			{ return kw_SIZE; }
STRING			{ return kw_STRING; }
SYNTAX			{ return kw_SYNTAX; }
T61String		{ return kw_T61String; }
TAGS			{ return kw_TAGS; }
TRUE			{ return kw_TRUE; }
TYPE-IDENTIFIER		{ return kw_TYPE_IDENTIFIER; }
TeletexString		{ return kw_TeletexString; }
UNION			{ return kw_UNION; }
UNIQUE			{ return kw_UNIQUE; }
UNIVERSAL		{ return kw_UNIVERSAL; }
UTCTime			{ return kw_UTCTime; }
UTF8String		{ return kw_UTF8String; }
UniversalString		{ return kw_UniversalString; }
VideotexString		{ return kw_VideotexString; }
VisibleString		{ return kw_VisibleString; }
WITH			{ return kw_WITH; }
[-,;{}()|]		{ return *yytext; }
"["			{ return *yytext; }
"]"			{ return *yytext; }
::=			{ return EEQUAL; }
--			{
			    int c, start_lineno = lineno;
			    int f = 0;
			    while((c = input()) != EOF) {
				if(f && c == '-')
				    break;
				if(c == '-') {
				    f = 1;
				    continue;
				}
				if(c == '\n') {
				    lineno++;
				    break;
				}
				f = 0;
			    }
			    if(c == EOF)
				unterminated("comment", start_lineno);
			}
\/\*			{
			    int c, start_lineno = lineno;
			    int level = 1;
			    int seen_star = 0;
			    int seen_slash = 0;
			    while((c = input()) != EOF) {
				if(c == '/') {
				    if(seen_star) {
					if(--level == 0)
					    break;
					seen_star = 0;
					continue;
				    }
				    seen_slash = 1;
				    continue;
				}
				if(seen_star && c == '/') {
				    if(--level == 0)
					break;
				    seen_star = 0;
				    continue;
				}
				if(c == '*') {
				    if(seen_slash) {
					level++;
					seen_star = seen_slash = 0;
					continue;
				    }
				    seen_star = 1;
				    continue;
				}
				seen_star = seen_slash = 0;
				if(c == '\n') {
				    lineno++;
				    continue;
				}
			    }
			    if(c == EOF)
				unterminated("comment", start_lineno);
			}
"\""			{
			    int start_lineno = lineno;
			    int c;
			    char buf[1024];
			    char *p = buf;
			    int f = 0;
			    int skip_ws = 0;

			    while((c = input()) != EOF) {
				if(isspace(c) && skip_ws) {
				    if(c == '\n')
					lineno++;
				    continue;
				}
				skip_ws = 0;

				if(c == '"') {
				    if(f) {
					*p++ = '"';
					f = 0;
				    } else
					f = 1;
				    continue;
				}
				if(f == 1) {
				    unput(c);
				    break;
				}
				if(c == '\n') {
				    lineno++;
				    while(p > buf && isspace((unsigned char)p[-1]))
					p--;
				    skip_ws = 1;
				    continue;
				}
				*p++ = c;
			    }
			    if(c == EOF)
				unterminated("string", start_lineno);
			    *p++ = '\0';
			    fprintf(stderr, "string -- %s\n", buf);
			    yylval.name = estrdup(buf);
			    return STRING;
			}

-?0x[0-9A-Fa-f]+|-?[0-9]+ { char *e, *y = yytext;
			  yylval.constant = strtol((const char *)yytext,
						   &e, 0);
			  if(e == y)
			    lex_error_message("malformed constant (%s)", yytext);
			  else
			    return NUMBER;
			}
[A-Za-z][-A-Za-z0-9_]*	{
			  yylval.name =  estrdup ((const char *)yytext);
			  return IDENTIFIER;
			}
[ \t]			;
\n			{ ++lineno; }
\.\.\.			{ return ELLIPSIS; }
\.\.			{ return RANGE; }
.			{ lex_error_message("Ignoring char(%c)\n", *yytext); }
%%

#ifndef yywrap /* XXX */
int
yywrap ()
{
     return 1;
}
#endif

void
lex_error_message (const char *format, ...)
{
    va_list args;

    va_start (args, format);
    fprintf (stderr, "%s:%d: ", get_filename(), lineno);
    vfprintf (stderr, format, args);
    va_end (args);
    error_flag++;
}

static void
unterminated(const char *type, unsigned start_lineno)
{
    lex_error_message("unterminated %s, possibly started on line %d\n", type, start_lineno);
}
@


1.2
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@d35 1
a35 1
/* $Id$ */
@


1.1
log
@Initial revision
@
text
@d3 3
a5 3
 * Copyright (c) 1997 - 2000 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
d7 3
a9 3
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
d11 2
a12 2
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
d14 3
a16 3
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
d18 3
a20 3
 * 3. Neither the name of the Institute nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission. 
d22 11
a32 11
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE. 
d35 1
a35 1
/* $KTH: lex.l,v 1.15 2000/07/02 04:08:02 assar Exp $ */
d47 1
d49 1
a49 1
#include "parse.h"
d55 1
a55 1
#define YY_NO_UNPUT
d57 1
a57 1
#undef ECHO
d61 6
d69 81
a149 17
INTEGER			{ return INTEGER; }
IMPORTS			{ return IMPORTS; }
FROM			{ return FROM; }
SEQUENCE		{ return SEQUENCE; }
OF			{ return OF; }
OCTET			{ return OCTET; }
STRING			{ return STRING; }
GeneralizedTime		{ return GeneralizedTime; }
GeneralString		{ return GeneralString; }
BIT			{ return BIT; }
APPLICATION		{ return APPLICATION; }
OPTIONAL		{ return OPTIONAL; }
BEGIN			{ return TBEGIN; }
END			{ return END; }
DEFINITIONS		{ return DEFINITIONS; }
EXTERNAL		{ return EXTERNAL; }
[,;{}()|]		{ return *yytext; }
d153 116
a268 3
--[^\n]*\n		{ ++lineno; }
-?[0-9]+		{ yylval.constant = atoi(yytext); return CONSTANT; }
[A-Za-z][-A-Za-z0-9_]*	{ yylval.name =  strdup (yytext); return IDENTIFIER; }
d271 3
a273 2
\.\.			{ return DOTDOT; }
.			{ error_message("Ignoring char(%c)\n", *yytext); }
d278 1
a278 1
yywrap () 
d285 1
a285 1
error_message (const char *format, ...)
d287 1
a287 1
     va_list args;
d289 11
a299 4
     va_start (args, format);
     fprintf (stderr, "%s:%d: ", filename(), lineno);
     vfprintf (stderr, format, args);
     va_end (args);
@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.3f

Lots of changes, highlights include:

 * change default keytab to ANY:FILE:/etc/krb5.keytab,krb4:/etc/srvtab,
   the new keytab type that tries both of these in order (SRVTAB is
   also an alias for krb4:)

 * improve error reporting and error handling (error messages should
   be more detailed and more useful)

 * the API is closer to what MIT krb5 is using

 * more compatible with windows 2000

 * removed some memory leaks

 * bug fixes
@
text
@d3 1
a3 1
 * Copyright (c) 1997 - 2001 Kungliga Tekniska Högskolan
d35 1
a35 1
/* $KTH: lex.l,v 1.16 2001/04/18 13:08:47 joda Exp $ */
d83 1
a83 4
-?(0x)?[0-9]+		{ char *e; yylval.constant = strtol(yytext, &e, 0); 
			  if(e == yytext) 
			    error_message("malformed constant (%s)", yytext); 
			  else return CONSTANT; }
@


1.1.1.3
log
@Import of heimdal-0.6rc1
@
text
@d35 1
a35 1
/* $KTH: lex.l,v 1.19 2001/09/25 23:28:03 assar Exp $ */
a46 1
#undef ECHO
a76 1
ENUMERATED		{ return ENUMERATED; }
a77 2
OBJECT			{ return OBJECT; }
IDENTIFIER		{ return IDENTIFIER; }
d83 2
a84 4
-?(0x)?[0-9]+		{ char *e, *y = yytext;
			  yylval.constant = strtol((const char *)yytext,
						   &e, 0);
			  if(e == y) 
d86 2
a87 7
			  else
			    return CONSTANT;
			}
[A-Za-z][-A-Za-z0-9_]*	{
			  yylval.name =  strdup ((const char *)yytext);
			  return IDENT;
			}
@


1.1.1.4
log
@Import of heimdal-0.7.2
@
text
@d3 1
a3 1
 * Copyright (c) 1997 - 2004 Kungliga Tekniska Högskolan
d35 1
a35 1
/* $KTH: lex.l,v 1.24 2004/10/13 17:40:21 lha Exp $ */
a58 2
static void handle_comment(int type);

a63 1
BOOLEAN			{ return BOOLEAN; }
a66 1
CHOICE			{ return CHOICE; }
a71 2
UTF8String		{ return UTF8String; }
NULL			{ return NULLTYPE; }
a76 1
DEFAULT			{ return DEFAULT; }
d82 1
a82 1
[-,;{}()|\"]		{ return *yytext; }
d86 2
a87 3
--			{ handle_comment(0); }
\/\*			{ handle_comment(1); }
0x[0-9A-Fa-f]+|[0-9]+	{ char *e, *y = yytext;
a100 1
\.\.\.			{ return DOTDOTDOT; }
a121 55
}

static void
handle_comment(int type)
{
    int c;
    int start_lineno = lineno;
    if(type == 0) {
	int f = 0;
	while((c = input()) != EOF) {
	    if(f && c == '-')
		return;
	    if(c == '-') {
		f = 1;
		continue;
	    }
	    if(c == '\n') {
		lineno++;
		return;
	    }
	    f = 0;
	}
    } else {
	int level = 1;
	int seen_star = 0;
	int seen_slash = 0;
	while((c = input()) != EOF) {
	    if(c == '/') {
		if(seen_star) {
		    if(--level == 0)
			return;
		    seen_star = 0;
		    continue;
		}
		seen_slash = 1;
		continue;
	    }
	    if(c == '*') {
		if(seen_slash) {
		    level++;
		    seen_star = seen_slash = 0;
		    continue;
		} 
		seen_star = 1;
		continue;
	    }
	    seen_star = seen_slash = 0;
	    if(c == '\n') {
		lineno++;
		continue;
	    }
	}
    }
    if(c == EOF)
	error_message("unterminated comment, possibly started on line %d\n", start_lineno);
@


