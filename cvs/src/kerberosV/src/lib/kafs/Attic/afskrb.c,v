head	1.2;
access;
symbols
	OPENBSD_5_3:1.1.1.3.0.28
	OPENBSD_5_3_BASE:1.1.1.3
	OPENBSD_5_2:1.1.1.3.0.26
	OPENBSD_5_2_BASE:1.1.1.3
	OPENBSD_5_1_BASE:1.1.1.3
	OPENBSD_5_1:1.1.1.3.0.24
	OPENBSD_5_0:1.1.1.3.0.22
	OPENBSD_5_0_BASE:1.1.1.3
	OPENBSD_4_9:1.1.1.3.0.20
	OPENBSD_4_9_BASE:1.1.1.3
	OPENBSD_4_8:1.1.1.3.0.18
	OPENBSD_4_8_BASE:1.1.1.3
	OPENBSD_4_7:1.1.1.3.0.14
	OPENBSD_4_7_BASE:1.1.1.3
	OPENBSD_4_6:1.1.1.3.0.16
	OPENBSD_4_6_BASE:1.1.1.3
	OPENBSD_4_5:1.1.1.3.0.12
	OPENBSD_4_5_BASE:1.1.1.3
	OPENBSD_4_4:1.1.1.3.0.10
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.8
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_2:1.1.1.3.0.6
	OPENBSD_4_2_BASE:1.1.1.3
	OPENBSD_4_1:1.1.1.3.0.4
	OPENBSD_4_1_BASE:1.1.1.3
	OPENBSD_4_0:1.1.1.3.0.2
	OPENBSD_4_0_BASE:1.1.1.3
	HEIMDAL_0_7_2:1.1.1.3
	OPENBSD_3_9:1.1.1.2.0.12
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.10
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.8
	OPENBSD_3_7_BASE:1.1.1.2
	HEIMDAL_0_6_3:1.1.1.2
	OPENBSD_3_6:1.1.1.2.0.6
	OPENBSD_3_6_BASE:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.4
	OPENBSD_3_5_BASE:1.1.1.2
	OPENBSD_3_4:1.1.1.2.0.2
	OPENBSD_3_4_BASE:1.1.1.2
	HEIMDAL_0_6:1.1.1.2
	HEIMDAL_0_6RC1:1.1.1.2
	OPENBSD_3_3:1.1.1.1.0.8
	OPENBSD_3_3_BASE:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.6
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.4
	OPENBSD_3_1_BASE:1.1.1.1
	HEIMDAL_0_4e:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.2
	OPENBSD_3_0_BASE:1.1.1.1
	HEIMDAL_0_3f:1.1.1.1
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2013.06.17.18.57.43;	author robert;	state dead;
branches;
next	1.1;

1.1
date	2001.05.25.07.52.25;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.52.25;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.05.11.02.16.13;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.04.14.07.33.56;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.2
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@/*
 * Copyright (c) 1995 - 2000 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "kafs_locl.h"

RCSID("$KTH: afskrb.c,v 1.14 2000/03/16 05:35:56 assar Exp $");

struct krb_kafs_data {
    const char *realm;
};

static int
get_cred(kafs_data *data, const char *name, const char *inst, 
	 const char *realm, CREDENTIALS *c)
{
    KTEXT_ST tkt;
    int ret = krb_get_cred((char*)name, (char*)inst, (char*)realm, c);
    
    if (ret) {
	ret = krb_mk_req(&tkt, (char*)name, (char*)inst, (char*)realm, 0);
	if (ret == KSUCCESS)
	    ret = krb_get_cred((char*)name, (char*)inst, (char*)realm, c);
    }
    return ret;
}

static int
afslog_uid_int(kafs_data *data,
	       const char *cell,
	       const char *realm_hint,
	       uid_t uid,
	       const char *homedir)
{
    int ret;
    CREDENTIALS c;
    char realm[REALM_SZ];
    
    if (cell == 0 || cell[0] == 0)
	return _kafs_afslog_all_local_cells (data, uid, homedir);

    /* Extract realm from ticket file. */
    ret = krb_get_tf_fullname(tkt_string(), NULL, NULL, realm);
    if (ret != KSUCCESS)
	return ret;

    ret = _kafs_get_cred(data, cell, realm_hint, realm, &c);
    
    if (ret == 0)
	ret = kafs_settoken(cell, uid, &c);
    return ret;
}

static char *
get_realm(kafs_data *data, const char *host)
{
    char *r = krb_realmofhost(host);
    if(r != NULL)
	return strdup(r);
    else
	return NULL;
}

int
krb_afslog_uid_home(const char *cell, const char *realm_hint, uid_t uid,
		    const char *homedir)
{
    kafs_data kd;

    kd.afslog_uid = afslog_uid_int;
    kd.get_cred = get_cred;
    kd.get_realm = get_realm;
    kd.data = 0;
    return afslog_uid_int(&kd, cell, realm_hint, uid, homedir);
}

int
krb_afslog_uid(const char *cell, const char *realm_hint, uid_t uid)
{
    return krb_afslog_uid_home(cell, realm_hint, uid, NULL);
}

int
krb_afslog(const char *cell, const char *realm_hint)
{
    return krb_afslog_uid(cell, realm_hint, getuid());
}

int
krb_afslog_home(const char *cell, const char *realm_hint, const char *homedir)
{
    return krb_afslog_uid_home(cell, realm_hint, getuid(), homedir);
}

/*
 *
 */

int
krb_realm_of_cell(const char *cell, char **realm)
{
    kafs_data kd;

    kd.get_realm = get_realm;
    return _kafs_realm_of_cell(&kd, cell, realm);
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.6rc1
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2001, 2003 Kungliga Tekniska Högskolan
d36 1
a36 3
RCSID("$KTH: afskrb.c,v 1.17 2003/04/14 08:32:11 lha Exp $");

#ifdef KRB4
d44 1
a44 1
	 const char *realm, uid_t uid, struct kafs_token *kt)
a45 1
    CREDENTIALS c;
d47 1
a47 1
    int ret = krb_get_cred((char*)name, (char*)inst, (char*)realm, &c);
d52 1
a52 1
	    ret = krb_get_cred((char*)name, (char*)inst, (char*)realm, &c);
a53 2
    if (ret == 0)
	ret = _kafs_v4_to_kt(&c, uid, kt);
d65 1
a65 3
    struct kafs_token kt;
    char name[ANAME_SZ];
    char inst[INST_SZ];
a67 2
    kt.ticket = NULL;

d72 1
a72 1
    ret = krb_get_tf_fullname(tkt_string(), name, inst, realm);
d76 1
a76 2
    kt.ticket = NULL;
    ret = _kafs_get_cred(data, cell, realm_hint, realm, uid, &kt);
d78 2
a79 4
    if (ret == 0) {
	ret = kafs_settoken_rxkad(cell, &kt.ct, kt.ticket, kt.ticket_len);
	free(kt.ticket);
    }
a98 1
    kd.name = "krb4";
a132 1
    kd.name = "krb4";
a135 24

int
kafs_settoken(const char *cell, uid_t uid, CREDENTIALS *c)
{
    struct kafs_token kt;
    int ret;

    kt.ticket = NULL;

    ret = _kafs_v4_to_kt(c, uid, &kt);
    if (ret)
	return ret;

    if (kt.ct.EndTimestamp < time(NULL)) {
	free(kt.ticket);
	return 0;
    }

    ret = kafs_settoken_rxkad(cell, &kt.ct, kt.ticket, kt.ticket_len);
    free(kt.ticket);
    return ret;
}

#endif /* KRB4 */
@


1.1.1.3
log
@Import of heimdal-0.7.2
@
text
@d36 1
a36 1
RCSID("$KTH: afskrb.c,v 1.19 2005/06/02 07:37:35 lha Exp $");
d45 1
a45 1
get_cred(struct kafs_data *data, const char *name, const char *inst, 
d63 1
a63 1
afslog_uid_int(struct kafs_data *data,
d96 1
a96 1
get_realm(struct kafs_data *data, const char *host)
d109 1
a109 1
    struct kafs_data kd;
d144 1
a144 1
    struct kafs_data kd;
a170 44
}

#else /* KRB4 */

#define KAFS_KRBET_KDC_SERVICE_EXP 39525378

int
krb_afslog_uid_home(const char *cell, const char *realm_hint, uid_t uid,
		    const char *homedir)
{
    return KAFS_KRBET_KDC_SERVICE_EXP;
}

int
krb_afslog_uid(const char *cell, const char *realm_hint, uid_t uid)
{
    return KAFS_KRBET_KDC_SERVICE_EXP;
}

int
krb_afslog_home(const char *cell, const char *realm_hint, const char *homedir)
{
    return KAFS_KRBET_KDC_SERVICE_EXP;
}

int
krb_afslog(const char *cell, const char *realm_hint)
{
    return KAFS_KRBET_KDC_SERVICE_EXP;
}

int
krb_realm_of_cell(const char *cell, char **realm)
{
    *realm = NULL;
    return KAFS_KRBET_KDC_SERVICE_EXP;
}

int kafs_settoken (const char*, uid_t, struct credentials *);

int
kafs_settoken(const char *cell, uid_t uid, struct credentials *c)
{
    return KAFS_KRBET_KDC_SERVICE_EXP;
@


