head	1.8;
access;
symbols
	OPENBSD_5_5:1.7.0.6
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.6.0.28
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.26
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.24
	OPENBSD_5_0:1.6.0.22
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.20
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.18
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.14
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.16
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.12
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.10
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.8
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.6
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.4
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	HEIMDAL_0_7_2:1.1.1.4
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	HEIMDAL_0_6_3:1.1.1.3
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	HEIMDAL_0_6:1.1.1.3
	HEIMDAL_0_6RC1:1.1.1.3
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.1.1.2.0.2
	OPENBSD_3_1_BASE:1.1.1.2
	HEIMDAL_0_4e:1.1.1.2
	OPENBSD_3_0:1.1.1.1.0.2
	OPENBSD_3_0_BASE:1.1.1.1
	HEIMDAL_0_3f:1.1.1.1
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2014.04.22.10.01.31;	author reyk;	state dead;
branches;
next	1.7;

1.7
date	2013.06.17.18.57.43;	author robert;	state Exp;
branches;
next	1.6;

1.6
date	2006.04.14.08.15.04;	author biorn;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.11.04.12.44;	author hin;	state Exp;
branches;
next	1.4;

1.4
date	2003.05.11.03.40.00;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2002.06.18.23.30.27;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.10.21.02.03;	author hin;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.25.07.52.26;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.52.26;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.02.06.08.56.21;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.02.16.14;	author hin;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2006.04.14.07.33.57;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.8
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/*
 * Copyright (c) 1997 - 2005 Kungliga Tekniska HÃ¶gskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "kafs_locl.h"

#define AUTH_SUPERUSER "afs"

/*
 * Here only ASCII characters are relevant.
 */

#define IsAsciiLower(c) ('a' <= (c) && (c) <= 'z')

#define ToAsciiUpper(c) ((c) - 'a' + 'A')

static void (*kafs_verbose)(void *, const char *);
static void *kafs_verbose_ctx;

void
_kafs_foldup(char *a, const char *b)
{
  for (; *b; a++, b++)
    if (IsAsciiLower(*b))
      *a = ToAsciiUpper(*b);
    else
      *a = *b;
  *a = '\0';
}

void
kafs_set_verbose(void (*f)(void *, const char *), void *ctx)
{
    if (f) {
	kafs_verbose = f;
	kafs_verbose_ctx = ctx;
    }
}

int
kafs_settoken_rxkad(const char *cell, struct ClearToken *ct,
		    void *ticket, size_t ticket_len)
{
    struct ViceIoctl parms;
    char buf[2048], *t;
    int32_t sizeof_x;

    t = buf;
    /*
     * length of secret token followed by secret token
     */
    sizeof_x = ticket_len;
    memcpy(t, &sizeof_x, sizeof(sizeof_x));
    t += sizeof(sizeof_x);
    memcpy(t, ticket, sizeof_x);
    t += sizeof_x;
    /*
     * length of clear token followed by clear token
     */
    sizeof_x = sizeof(*ct);
    memcpy(t, &sizeof_x, sizeof(sizeof_x));
    t += sizeof(sizeof_x);
    memcpy(t, ct, sizeof_x);
    t += sizeof_x;

    /*
     * do *not* mark as primary cell
     */
    sizeof_x = 0;
    memcpy(t, &sizeof_x, sizeof(sizeof_x));
    t += sizeof(sizeof_x);
    /*
     * follow with cell name
     */
    sizeof_x = strlen(cell) + 1;
    memcpy(t, cell, sizeof_x);
    t += sizeof_x;

    /*
     * Build argument block
     */
    parms.in = buf;
    parms.in_size = t - buf;
    parms.out = 0;
    parms.out_size = 0;

    return k_pioctl(0, VIOCSETTOK, &parms, 0);
}

void
_kafs_fixup_viceid(struct ClearToken *ct, uid_t uid)
{
#define ODD(x) ((x) & 1)
    /* According to Transarc conventions ViceId is valid iff
     * (EndTimestamp - BeginTimestamp) is odd. By decrementing EndTime
     * the transformations:
     *
     * (issue_date, life) -> (StartTime, EndTime) -> (issue_date, life)
     * preserves the original values.
     */
    if (uid != 0)		/* valid ViceId */
    {
	if (!ODD(ct->EndTimestamp - ct->BeginTimestamp))
	    ct->EndTimestamp--;
    }
    else			/* not valid ViceId */
    {
	if (ODD(ct->EndTimestamp - ct->BeginTimestamp))
	    ct->EndTimestamp--;
    }
}

/* Try to get a db-server for an AFS cell from a AFSDB record */

static int
dns_find_cell(const char *cell, char *dbserver, size_t len)
{
    struct rk_dns_reply *r;
    int ok = -1;
    r = rk_dns_lookup(cell, "afsdb");
    if(r){
	struct rk_resource_record *rr = r->head;
	while(rr){
	    if(rr->type == rk_ns_t_afsdb && rr->u.afsdb->preference == 1){
		strlcpy(dbserver,
				rr->u.afsdb->domain,
				len);
		ok = 0;
		break;
	    }
	    rr = rr->next;
	}
	rk_dns_free_data(r);
    }
    return ok;
}


/*
 * Try to find the cells we should try to klog to in "file".
 */
static void
find_cells(const char *file, char ***cells, int *idx)
{
    FILE *f;
    char cell[64];
    int i;
    int ind = *idx;

    f = fopen(file, "r");
    if (f == NULL)
	return;
    while (fgets(cell, sizeof(cell), f)) {
	char *t;
	t = cell + strlen(cell);
	for (; t >= cell; t--)
	  if (*t == '\n' || *t == '\t' || *t == ' ')
	    *t = 0;
	if (cell[0] == '\0' || cell[0] == '#')
	    continue;
	for(i = 0; i < ind; i++)
	    if(strcmp((*cells)[i], cell) == 0)
		break;
	if(i == ind){
	    char **tmp;

	    tmp = realloc(*cells, (ind + 1) * sizeof(**cells));
	    if (tmp == NULL)
		break;
	    *cells = tmp;
	    (*cells)[ind] = strdup(cell);
	    if ((*cells)[ind] == NULL)
		break;
	    ++ind;
	}
    }
    fclose(f);
    *idx = ind;
}

/*
 * Get tokens for all cells[]
 */
static int
afslog_cells(struct kafs_data *data, char **cells, int max, uid_t uid,
	     const char *homedir)
{
    int ret = 0;
    int i;
    for (i = 0; i < max; i++) {
        int er = (*data->afslog_uid)(data, cells[i], 0, uid, homedir);
	if (er)
	    ret = er;
    }
    return ret;
}

int
_kafs_afslog_all_local_cells(struct kafs_data *data,
			     uid_t uid, const char *homedir)
{
    int ret;
    char **cells = NULL;
    int idx = 0;

    if (homedir == NULL)
	homedir = getenv("HOME");
    if (homedir != NULL) {
	char home[MaxPathLen];
	snprintf(home, sizeof(home), "%s/.TheseCells", homedir);
	find_cells(home, &cells, &idx);
    }
    find_cells(_PATH_THESECELLS, &cells, &idx);
    find_cells(_PATH_THISCELL, &cells, &idx);
    find_cells(_PATH_ARLA_THESECELLS, &cells, &idx);
    find_cells(_PATH_ARLA_THISCELL, &cells, &idx);
    find_cells(_PATH_OPENAFS_DEBIAN_THESECELLS, &cells, &idx);
    find_cells(_PATH_OPENAFS_DEBIAN_THISCELL, &cells, &idx);
    find_cells(_PATH_OPENAFS_MACOSX_THESECELLS, &cells, &idx);
    find_cells(_PATH_OPENAFS_MACOSX_THISCELL, &cells, &idx);
    find_cells(_PATH_ARLA_DEBIAN_THESECELLS, &cells, &idx);
    find_cells(_PATH_ARLA_DEBIAN_THISCELL, &cells, &idx);
    find_cells(_PATH_ARLA_OPENBSD_THESECELLS, &cells, &idx);
    find_cells(_PATH_ARLA_OPENBSD_THISCELL, &cells, &idx);

    ret = afslog_cells(data, cells, idx, uid, homedir);
    while(idx > 0)
	free(cells[--idx]);
    free(cells);
    return ret;
}


static int
file_find_cell(struct kafs_data *data,
	       const char *cell, char **realm, int exact)
{
    FILE *F;
    char buf[1024];
    char *p;
    int ret = -1;

    if ((F = fopen(_PATH_CELLSERVDB, "r"))
	|| (F = fopen(_PATH_ARLA_CELLSERVDB, "r"))
	|| (F = fopen(_PATH_OPENAFS_DEBIAN_CELLSERVDB, "r"))
	|| (F = fopen(_PATH_OPENAFS_MACOSX_CELLSERVDB, "r"))
	|| (F = fopen(_PATH_ARLA_DEBIAN_CELLSERVDB, "r"))) {
	while (fgets(buf, sizeof(buf), F)) {
	    int cmp;

	    if (buf[0] != '>')
		continue; /* Not a cell name line, try next line */
	    p = buf;
	    strsep(&p, " \t\n#");

	    if (exact)
		cmp = strcmp(buf + 1, cell);
	    else
		cmp = strncmp(buf + 1, cell, strlen(cell));

	    if (cmp == 0) {
		/*
		 * We found the cell name we're looking for.
		 * Read next line on the form ip-address '#' hostname
		 */
		if (fgets(buf, sizeof(buf), F) == NULL)
		    break;	/* Read failed, give up */
		p = strchr(buf, '#');
		if (p == NULL)
		    break;	/* No '#', give up */
		p++;
		if (buf[strlen(buf) - 1] == '\n')
		    buf[strlen(buf) - 1] = '\0';
		*realm = (*data->get_realm)(data, p);
		if (*realm && **realm != '\0')
		    ret = 0;
		break;		/* Won't try any more */
	    }
	}
	fclose(F);
    }
    return ret;
}

/* Find the realm associated with cell. Do this by opening CellServDB
   file and getting the realm-of-host for the first VL-server for the
   cell.

   This does not work when the VL-server is living in one realm, but
   the cell it is serving is living in another realm.

   Return 0 on success, -1 otherwise.
   */

int
_kafs_realm_of_cell(struct kafs_data *data,
		    const char *cell, char **realm)
{
    char buf[1024];
    int ret;

    ret = file_find_cell(data, cell, realm, 1);
    if (ret == 0)
	return ret;
    if (dns_find_cell(cell, buf, sizeof(buf)) == 0) {
	*realm = (*data->get_realm)(data, buf);
	if(*realm != NULL)
	    return 0;
    }
    return file_find_cell(data, cell, realm, 0);
}

static int
_kafs_try_get_cred(struct kafs_data *data, const char *user, const char *cell,
		   const char *realm, uid_t uid, struct kafs_token *kt)
{
    int ret;

    ret = (*data->get_cred)(data, user, cell, realm, uid, kt);
    if (kafs_verbose) {
	const char *estr = (*data->get_error)(data, ret);
	char *str;
	asprintf(&str, "%s tried afs%s%s@@%s -> %s (%d)",
		 data->name, cell ? "/" : "",
		 cell ? cell : "", realm, estr ? estr : "unknown", ret);
	(*kafs_verbose)(kafs_verbose_ctx, str);
	if (estr)
	    (*data->free_error)(data, estr);
	free(str);
    }

    return ret;
}


int
_kafs_get_cred(struct kafs_data *data,
	       const char *cell,
	       const char *realm_hint,
	       const char *realm,
	       uid_t uid,
	       struct kafs_token *kt)
{
    int ret = -1;
    char *vl_realm;
    char CELL[64];

    /* We're about to find the realm that holds the key for afs in
     * the specified cell. The problem is that null-instance
     * afs-principals are common and that hitting the wrong realm might
     * yield the wrong afs key. The following assumptions were made.
     *
     * Any realm passed to us is preferred.
     *
     * If there is a realm with the same name as the cell, it is most
     * likely the correct realm to talk to.
     *
     * In most (maybe even all) cases the database servers of the cell
     * will live in the realm we are looking for.
     *
     * Try the local realm, but if the previous cases fail, this is
     * really a long shot.
     *
     */

    /* comments on the ordering of these tests */

    /* If the user passes a realm, she probably knows something we don't
     * know and we should try afs@@realm_hint.
     */

    if (realm_hint) {
	ret = _kafs_try_get_cred(data, AUTH_SUPERUSER,
				 cell, realm_hint, uid, kt);
	if (ret == 0) return 0;
	ret = _kafs_try_get_cred(data, AUTH_SUPERUSER,
				 NULL, realm_hint, uid, kt);
	if (ret == 0) return 0;
    }

    _kafs_foldup(CELL, cell);

    /*
     * If the AFS servers have a file /usr/afs/etc/krb.conf containing
     * REALM we still don't have to resort to cross-cell authentication.
     * Try afs.cell@@REALM.
     */
    ret = _kafs_try_get_cred(data, AUTH_SUPERUSER,
			     cell, realm, uid, kt);
    if (ret == 0) return 0;

    /*
     * If cell == realm we don't need no cross-cell authentication.
     * Try afs@@REALM.
     */
    if (strcmp(CELL, realm) == 0) {
        ret = _kafs_try_get_cred(data, AUTH_SUPERUSER,
				 NULL, realm, uid, kt);
	if (ret == 0) return 0;
    }

    /*
     * We failed to get ``first class tickets'' for afs,
     * fall back to cross-cell authentication.
     * Try afs@@CELL.
     * Try afs.cell@@CELL.
     */
    ret = _kafs_try_get_cred(data, AUTH_SUPERUSER,
			     NULL, CELL, uid, kt);
    if (ret == 0) return 0;
    ret = _kafs_try_get_cred(data, AUTH_SUPERUSER,
			     cell, CELL, uid, kt);
    if (ret == 0) return 0;

    /*
     * Perhaps the cell doesn't correspond to any realm?
     * Use realm of first volume location DB server.
     * Try afs.cell@@VL_REALM.
     * Try afs@@VL_REALM???
     */
    if (_kafs_realm_of_cell(data, cell, &vl_realm) == 0
	&& strcmp(vl_realm, realm) != 0
	&& strcmp(vl_realm, CELL) != 0) {
	ret = _kafs_try_get_cred(data, AUTH_SUPERUSER,
				 cell, vl_realm, uid, kt);
	if (ret)
	    ret = _kafs_try_get_cred(data, AUTH_SUPERUSER,
				     NULL, vl_realm, uid, kt);
	free(vl_realm);
	if (ret == 0) return 0;
    }

    return ret;
}
@


1.7
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@@


1.6
log
@Merge of heimdal 0.7.2
Tested by todd & beck, ok beck.
@
text
@d2 3
a4 3
 * Copyright (c) 1997 - 2003 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
d6 3
a8 3
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
d10 2
a11 2
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
d13 3
a15 3
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
d17 3
a19 3
 * 3. Neither the name of the Institute nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission. 
d21 11
a31 11
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE. 
a35 2
RCSID("$KTH: common.c,v 1.31 2005/06/02 07:38:06 lha Exp $");

d76 1
a76 1
    
a141 29

int
_kafs_v4_to_kt(CREDENTIALS *c, uid_t uid, struct kafs_token *kt)
{
    kt->ticket = NULL;

    if (c->ticket_st.length > MAX_KTXT_LEN)
	return EINVAL;

    kt->ticket = malloc(c->ticket_st.length);
    if (kt->ticket == NULL)
	return ENOMEM;
    kt->ticket_len = c->ticket_st.length;
    memcpy(kt->ticket, c->ticket_st.dat, kt->ticket_len);
    
    /*
     * Build a struct ClearToken
     */
    kt->ct.AuthHandle = c->kvno;
    memcpy (kt->ct.HandShakeKey, c->session, sizeof(c->session));
    kt->ct.ViceId = uid;
    kt->ct.BeginTimestamp = c->issue_date;
    kt->ct.EndTimestamp = krb_life_to_time(c->issue_date, c->lifetime);

    _kafs_fixup_viceid(&kt->ct, uid);

    return 0;
}

d147 1
a147 1
    struct dns_reply *r;
d149 1
a149 1
    r = dns_lookup(cell, "afsdb");
d151 1
a151 1
	struct resource_record *rr = r->head;
d153 1
a153 1
	    if(rr->type == T_AFSDB && rr->u.afsdb->preference == 1){
d162 1
a162 1
	dns_free_data(r);
d172 1
a172 1
find_cells(const char *file, char ***cells, int *index)
d177 1
a177 1
    int ind = *index;
d207 1
a207 1
    *index = ind;
d233 1
a233 1
    int index = 0;
d240 1
a240 1
	find_cells(home, &cells, &index);
d242 16
a257 20
#if 0
    find_cells(_PATH_THESECELLS, &cells, &index);
    find_cells(_PATH_THISCELL, &cells, &index);
#endif
    find_cells(_PATH_ARLA_THESECELLS, &cells, &index);
    find_cells(_PATH_ARLA_THISCELL, &cells, &index);
#if 0
    find_cells(_PATH_OPENAFS_DEBIAN_THESECELLS, &cells, &index);
    find_cells(_PATH_OPENAFS_DEBIAN_THISCELL, &cells, &index);
    find_cells(_PATH_OPENAFS_MACOSX_THESECELLS, &cells, &index);
    find_cells(_PATH_OPENAFS_MACOSX_THISCELL, &cells, &index);
    find_cells(_PATH_ARLA_DEBIAN_THESECELLS, &cells, &index);
    find_cells(_PATH_ARLA_DEBIAN_THISCELL, &cells, &index);
    find_cells(_PATH_ARLA_OPENBSD_THESECELLS, &cells, &index);
    find_cells(_PATH_ARLA_OPENBSD_THISCELL, &cells, &index);
#endif    
    
    ret = afslog_cells(data, cells, index, uid, homedir);
    while(index > 0)
	free(cells[--index]);
d264 1
a264 1
file_find_cell(struct kafs_data *data, 
d272 5
a276 1
    if ((F = fopen(_PATH_ARLA_CELLSERVDB, "r"))) {
d350 1
d352 3
a354 3
	asprintf(&str, "%s tried afs%s%s@@%s -> %d",
		 data->name, cell[0] == '\0' ? "" : "/", 
		 cell, realm, ret);
d356 2
d367 1
a367 1
	       const char *cell, 
d394 1
a394 1
  
d400 1
a400 1
  
d406 1
a406 1
				 "", realm_hint, uid, kt);
d413 9
d427 1
a427 1
				 "", realm, uid, kt);
a428 1
	/* Try afs.cell@@REALM below. */
a431 9
     * If the AFS servers have a file /usr/afs/etc/krb.conf containing
     * REALM we still don't have to resort to cross-cell authentication.
     * Try afs.cell@@REALM.
     */
    ret = _kafs_try_get_cred(data, AUTH_SUPERUSER, 
			     cell, realm, uid, kt);
    if (ret == 0) return 0;

    /*
d438 1
a438 1
			     "", CELL, uid, kt);
d440 1
a440 1
    ret = _kafs_try_get_cred(data, AUTH_SUPERUSER, 
d457 1
a457 1
				     "", vl_realm, uid, kt);
@


1.5
log
@Fix a few merge mistakes
@
text
@d36 1
a36 1
RCSID("$KTH: common.c,v 1.26.2.1 2003/04/23 18:03:20 lha Exp $");
d245 1
a245 1
afslog_cells(kafs_data *data, char **cells, int max, uid_t uid,
d259 2
a260 1
_kafs_afslog_all_local_cells(kafs_data *data, uid_t uid, const char *homedir)
d282 2
d286 2
d299 2
a300 1
file_find_cell(kafs_data *data, const char *cell, char **realm, int exact)
d345 3
a347 3
/* Find the realm associated with cell. Do this by opening
   /usr/vice/etc/CellServDB and getting the realm-of-host for the
   first VL-server for the cell.
d356 2
a357 1
_kafs_realm_of_cell(kafs_data *data, const char *cell, char **realm)
d374 1
a374 1
_kafs_try_get_cred(kafs_data *data, const char *user, const char *cell,
d394 1
a394 1
_kafs_get_cred(kafs_data *data,
d405 1
a405 1
    /* We're about to find the the realm that holds the key for afs in
@


1.4
log
@Merge 0.6rc1
@
text
@a300 2
#if 0
#else
a301 2
	|| (F = fopen(_PATH_OPENAFS_DEBIAN_CELLSERVDB, "r"))
	|| (F = fopen(_PATH_ARLA_DEBIAN_CELLSERVDB, "r"))) {
@


1.3
log
@gcc -Wall (pass this one up, hin)
@
text
@d2 1
a2 1
 * Copyright (c) 1997 - 2001 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: common.c,v 1.21 2001/07/12 09:21:05 assar Exp $");
d48 5
a52 2
static void
foldup(char *a, const char *b)
d62 9
d72 2
a73 1
kafs_settoken(const char *cell, uid_t uid, CREDENTIALS *c)
d76 1
a76 1
    struct ClearToken ct;
a77 2
    char buf[2048], *t;
    int ret;
a78 31
    /*
     * Build a struct ClearToken
     */
    ct.AuthHandle = c->kvno;
    memcpy (ct.HandShakeKey, c->session, sizeof(c->session));
    ct.ViceId = uid;
    ct.BeginTimestamp = c->issue_date;
    ct.EndTimestamp = krb_life_to_time(c->issue_date, c->lifetime);
    if(ct.EndTimestamp < time(NULL))
	return 0; /* don't store tokens that has expired (and possibly
		     overwriting valid tokens)*/

#define ODD(x) ((x) & 1)
    /* According to Transarc conventions ViceId is valid iff
     * (EndTimestamp - BeginTimestamp) is odd. By decrementing EndTime
     * the transformations:
     *
     * (issue_date, life) -> (StartTime, EndTime) -> (issue_date, life)
     * preserves the original values.
     */
    if (uid != 0)		/* valid ViceId */
      {
	if (!ODD(ct.EndTimestamp - ct.BeginTimestamp))
	  ct.EndTimestamp--;
      }
    else			/* not valid ViceId */
      {
	if (ODD(ct.EndTimestamp - ct.BeginTimestamp))
	  ct.EndTimestamp--;
      }

d83 1
a83 1
    sizeof_x = c->ticket_st.length;
d86 1
a86 1
    memcpy(t, c->ticket_st.dat, sizeof_x);
d91 1
a91 1
    sizeof_x = sizeof(ct);
d94 1
a94 1
    memcpy(t, &ct, sizeof_x);
d117 54
a170 2
    ret = k_pioctl(0, VIOCSETTOK, &parms, 0);
    return ret;
d203 1
a203 1
find_cells(char *file, char ***cells, int *index)
d281 2
d284 1
a301 3
    if ((F = fopen(_PATH_CELLSERVDB, "r"))
	|| (F = fopen(_PATH_ARLA_CELLSERVDB, "r"))
	|| (F = fopen(_PATH_OPENAFS_DEBIAN_CELLSERVDB, "r"))) {
d304 2
a305 1
#endif
d370 20
d392 5
a396 4
	      const char *cell, 
	      const char *realm_hint,
	      const char *realm,
	      CREDENTIALS *c)
d423 1
a423 2
     * know and we should try afs@@realm_hint (otherwise we're talking with a
     * blondino and she might as well have it.)
d427 2
a428 1
	ret = (*data->get_cred)(data, AUTH_SUPERUSER, cell, realm_hint, c);
d430 2
a431 1
	ret = (*data->get_cred)(data, AUTH_SUPERUSER, "", realm_hint, c);
d435 1
a435 1
    foldup(CELL, cell);
d442 2
a443 1
        ret = (*data->get_cred)(data, AUTH_SUPERUSER, "", realm, c);
d453 2
a454 1
    ret = (*data->get_cred)(data, AUTH_SUPERUSER, cell, realm, c);
d463 2
a464 1
    ret = (*data->get_cred)(data, AUTH_SUPERUSER, "", CELL, c);
d466 2
a467 1
    ret = (*data->get_cred)(data, AUTH_SUPERUSER, cell, CELL, c);
d479 2
a480 1
	ret = (*data->get_cred)(data, AUTH_SUPERUSER, cell, vl_realm, c);
d482 2
a483 1
	    ret = (*data->get_cred)(data, AUTH_SUPERUSER, "", vl_realm, c);
@


1.2
log
@We're OpenBSD. We don't need paths for Debian and OpenAFS, and we
certainly don't need to look for config files there.

I've put them if #if 0's to make merging easier in the future.
@
text
@d271 1
a271 1
    if (F = fopen(_PATH_ARLA_CELLSERVDB, "r")) {
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * Copyright (c) 1997, 1998, 1999 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: common.c,v 1.19 1999/12/02 16:58:40 joda Exp $");
d240 1
d243 1
d246 4
a249 1
    
d258 2
a259 12
/* Find the realm associated with cell. Do this by opening
   /usr/vice/etc/CellServDB and getting the realm-of-host for the
   first VL-server for the cell.

   This does not work when the VL-server is living in one realm, but
   the cell it is serving is living in another realm.

   Return 0 on success, -1 otherwise.
   */

int
_kafs_realm_of_cell(kafs_data *data, const char *cell, char **realm)
d266 1
d268 5
a272 1
	|| (F = fopen(_PATH_ARLA_CELLSERVDB, "r"))) {
d274 2
d278 9
a286 1
	    if (strncmp(buf + 1, cell, strlen(cell)) == 0) {
d307 24
a330 2
    if (*realm == NULL && dns_find_cell(cell, buf, sizeof(buf)) == 0) {
	*realm = strdup(krb_realmofhost(buf));
d332 1
a332 1
	    ret = 0;
d334 1
a334 1
    return ret;
@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.4e
@
text
@d2 1
a2 1
 * Copyright (c) 1997 - 2001 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: common.c,v 1.21 2001/07/12 09:21:05 assar Exp $");
a243 2
    find_cells(_PATH_OPENAFS_DEBIAN_THESECELLS, &cells, &index);
    find_cells(_PATH_OPENAFS_DEBIAN_THISCELL, &cells, &index);
d253 12
a264 2
static int
file_find_cell(kafs_data *data, const char *cell, char **realm, int exact)
d272 1
a272 2
	|| (F = fopen(_PATH_ARLA_CELLSERVDB, "r"))
	|| (F = fopen(_PATH_OPENAFS_DEBIAN_CELLSERVDB, "r"))) {
a273 2
	    int cmp;

d276 1
a276 9
	    p = buf;
	    strsep(&p, " \t\n#");

	    if (exact)
		cmp = strcmp(buf + 1, cell);
	    else
		cmp = strncmp(buf + 1, cell, strlen(cell));

	    if (cmp == 0) {
d297 2
a298 24
    return ret;
}

/* Find the realm associated with cell. Do this by opening
   /usr/vice/etc/CellServDB and getting the realm-of-host for the
   first VL-server for the cell.

   This does not work when the VL-server is living in one realm, but
   the cell it is serving is living in another realm.

   Return 0 on success, -1 otherwise.
   */

int
_kafs_realm_of_cell(kafs_data *data, const char *cell, char **realm)
{
    char buf[1024];
    int ret;

    ret = file_find_cell(data, cell, realm, 1);
    if (ret == 0)
	return ret;
    if (dns_find_cell(cell, buf, sizeof(buf)) == 0) {
	*realm = (*data->get_realm)(data, buf);
d300 1
a300 1
	    return 0;
d302 1
a302 1
    return file_find_cell(data, cell, realm, 0);
@


1.1.1.3
log
@Import of heimdal-0.6rc1
@
text
@d2 1
a2 1
 * Copyright (c) 1997 - 2003 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: common.c,v 1.26.2.1 2003/04/23 18:03:20 lha Exp $");
d48 2
a49 5
static void (*kafs_verbose)(void *, const char *);
static void *kafs_verbose_ctx;

void
_kafs_foldup(char *a, const char *b)
a58 9
void
kafs_set_verbose(void (*f)(void *, const char *), void *ctx)
{
    if (f) {
	kafs_verbose = f;
	kafs_verbose_ctx = ctx;
    }
}

d60 1
a60 2
kafs_settoken_rxkad(const char *cell, struct ClearToken *ct,
		    void *ticket, size_t ticket_len)
d63 2
d66 1
a66 1
    int32_t sizeof_x;
d68 31
d103 1
a103 1
    sizeof_x = ticket_len;
d106 1
a106 1
    memcpy(t, ticket, sizeof_x);
d111 1
a111 1
    sizeof_x = sizeof(*ct);
d114 1
a114 1
    memcpy(t, ct, sizeof_x);
d137 2
a138 54

    return k_pioctl(0, VIOCSETTOK, &parms, 0);
}

void
_kafs_fixup_viceid(struct ClearToken *ct, uid_t uid)
{
#define ODD(x) ((x) & 1)
    /* According to Transarc conventions ViceId is valid iff
     * (EndTimestamp - BeginTimestamp) is odd. By decrementing EndTime
     * the transformations:
     *
     * (issue_date, life) -> (StartTime, EndTime) -> (issue_date, life)
     * preserves the original values.
     */
    if (uid != 0)		/* valid ViceId */
    {
	if (!ODD(ct->EndTimestamp - ct->BeginTimestamp))
	    ct->EndTimestamp--;
    }
    else			/* not valid ViceId */
    {
	if (ODD(ct->EndTimestamp - ct->BeginTimestamp))
	    ct->EndTimestamp--;
    }
}


int
_kafs_v4_to_kt(CREDENTIALS *c, uid_t uid, struct kafs_token *kt)
{
    kt->ticket = NULL;

    if (c->ticket_st.length > MAX_KTXT_LEN)
	return EINVAL;

    kt->ticket = malloc(c->ticket_st.length);
    if (kt->ticket == NULL)
	return ENOMEM;
    kt->ticket_len = c->ticket_st.length;
    memcpy(kt->ticket, c->ticket_st.dat, kt->ticket_len);
    
    /*
     * Build a struct ClearToken
     */
    kt->ct.AuthHandle = c->kvno;
    memcpy (kt->ct.HandShakeKey, c->session, sizeof(c->session));
    kt->ct.ViceId = uid;
    kt->ct.BeginTimestamp = c->issue_date;
    kt->ct.EndTimestamp = krb_life_to_time(c->issue_date, c->lifetime);

    _kafs_fixup_viceid(&kt->ct, uid);

    return 0;
d171 1
a171 1
find_cells(const char *file, char ***cells, int *index)
a245 2
    find_cells(_PATH_ARLA_DEBIAN_THESECELLS, &cells, &index);
    find_cells(_PATH_ARLA_DEBIAN_THISCELL, &cells, &index);
d265 1
a265 2
	|| (F = fopen(_PATH_OPENAFS_DEBIAN_CELLSERVDB, "r"))
	|| (F = fopen(_PATH_ARLA_DEBIAN_CELLSERVDB, "r"))) {
a329 20
static int
_kafs_try_get_cred(kafs_data *data, const char *user, const char *cell,
		   const char *realm, uid_t uid, struct kafs_token *kt)
{
    int ret;

    ret = (*data->get_cred)(data, user, cell, realm, uid, kt);
    if (kafs_verbose) {
	char *str;
	asprintf(&str, "%s tried afs%s%s@@%s -> %d",
		 data->name, cell[0] == '\0' ? "" : "/", 
		 cell, realm, ret);
	(*kafs_verbose)(kafs_verbose_ctx, str);
	free(str);
    }

    return ret;
}


d332 4
a335 5
	       const char *cell, 
	       const char *realm_hint,
	       const char *realm,
	       uid_t uid,
	       struct kafs_token *kt)
d362 2
a363 1
     * know and we should try afs@@realm_hint.
d367 1
a367 2
	ret = _kafs_try_get_cred(data, AUTH_SUPERUSER,
				 cell, realm_hint, uid, kt);
d369 1
a369 2
	ret = _kafs_try_get_cred(data, AUTH_SUPERUSER,
				 "", realm_hint, uid, kt);
d373 1
a373 1
    _kafs_foldup(CELL, cell);
d380 1
a380 2
        ret = _kafs_try_get_cred(data, AUTH_SUPERUSER,
				 "", realm, uid, kt);
d390 1
a390 2
    ret = _kafs_try_get_cred(data, AUTH_SUPERUSER, 
			     cell, realm, uid, kt);
d399 1
a399 2
    ret = _kafs_try_get_cred(data, AUTH_SUPERUSER,
			     "", CELL, uid, kt);
d401 1
a401 2
    ret = _kafs_try_get_cred(data, AUTH_SUPERUSER, 
			     cell, CELL, uid, kt);
d413 1
a413 2
	ret = _kafs_try_get_cred(data, AUTH_SUPERUSER,
				 cell, vl_realm, uid, kt);
d415 1
a415 2
	    ret = _kafs_try_get_cred(data, AUTH_SUPERUSER,
				     "", vl_realm, uid, kt);
@


1.1.1.4
log
@Import of heimdal-0.7.2
@
text
@d36 1
a36 1
RCSID("$KTH: common.c,v 1.31 2005/06/02 07:38:06 lha Exp $");
d245 1
a245 1
afslog_cells(struct kafs_data *data, char **cells, int max, uid_t uid,
d259 1
a259 2
_kafs_afslog_all_local_cells(struct kafs_data *data,
			     uid_t uid, const char *homedir)
a277 2
    find_cells(_PATH_OPENAFS_MACOSX_THESECELLS, &cells, &index);
    find_cells(_PATH_OPENAFS_MACOSX_THISCELL, &cells, &index);
a279 2
    find_cells(_PATH_ARLA_OPENBSD_THESECELLS, &cells, &index);
    find_cells(_PATH_ARLA_OPENBSD_THISCELL, &cells, &index);
d290 1
a290 2
file_find_cell(struct kafs_data *data, 
	       const char *cell, char **realm, int exact)
a299 1
	|| (F = fopen(_PATH_OPENAFS_MACOSX_CELLSERVDB, "r"))
d338 3
a340 3
/* Find the realm associated with cell. Do this by opening CellServDB
   file and getting the realm-of-host for the first VL-server for the
   cell.
d349 1
a349 2
_kafs_realm_of_cell(struct kafs_data *data,
		    const char *cell, char **realm)
d366 1
a366 1
_kafs_try_get_cred(struct kafs_data *data, const char *user, const char *cell,
d386 1
a386 1
_kafs_get_cred(struct kafs_data *data,
d397 1
a397 1
    /* We're about to find the realm that holds the key for afs in
@


