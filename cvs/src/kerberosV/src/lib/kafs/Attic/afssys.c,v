head	1.7;
access;
symbols
	OPENBSD_5_5:1.6.0.6
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.5.0.28
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.26
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.24
	OPENBSD_5_0:1.5.0.22
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.20
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.18
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.14
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.16
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.12
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.10
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.8
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.6
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.4
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.2
	OPENBSD_4_0_BASE:1.5
	HEIMDAL_0_7_2:1.1.1.4
	OPENBSD_3_9:1.4.0.6
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.4
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4
	HEIMDAL_0_6_3:1.1.1.3
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	HEIMDAL_0_6:1.1.1.2
	HEIMDAL_0_6RC1:1.1.1.2
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.1.1.1.0.4
	OPENBSD_3_1_BASE:1.1.1.1
	HEIMDAL_0_4e:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.2
	OPENBSD_3_0_BASE:1.1.1.1
	HEIMDAL_0_3f:1.1.1.1
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2014.04.22.10.01.31;	author reyk;	state dead;
branches;
next	1.6;

1.6
date	2013.06.17.18.57.43;	author robert;	state Exp;
branches;
next	1.5;

1.5
date	2006.04.14.08.15.04;	author biorn;	state Exp;
branches;
next	1.4;

1.4
date	2004.10.29.16.20.30;	author biorn;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.11.03.40.00;	author hin;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.07.02.10.20;	author hin;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.25.07.52.26;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.52.26;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.05.11.02.16.13;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.10.29.15.55.41;	author biorn;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2006.04.14.07.33.56;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.7
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/*
 * Copyright (c) 1995 - 2000, 2002, 2004, 2005 Kungliga Tekniska HÃ¶gskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "kafs_locl.h"

struct procdata {
    unsigned long param4;
    unsigned long param3;
    unsigned long param2;
    unsigned long param1;
    unsigned long syscall;
};
#define VIOC_SYSCALL_PROC _IOW('C', 1, void *)

struct devdata {
    unsigned long syscall;
    unsigned long param1;
    unsigned long param2;
    unsigned long param3;
    unsigned long param4;
    unsigned long param5;
    unsigned long param6;
    unsigned long retval;
};
#ifdef _IOWR
#define VIOC_SYSCALL_DEV _IOWR('C', 2, struct devdata)
#define VIOC_SYSCALL_DEV_OPENAFS _IOWR('C', 1, struct devdata)
#endif


int _kafs_debug; /* this should be done in a better way */

#define UNKNOWN_ENTRY_POINT	(-1)
#define NO_ENTRY_POINT		0
#define SINGLE_ENTRY_POINT	1
#define MULTIPLE_ENTRY_POINT	2
#define SINGLE_ENTRY_POINT2	3
#define SINGLE_ENTRY_POINT3	4
#define LINUX_PROC_POINT	5
#define AIX_ENTRY_POINTS	6
#define MACOS_DEV_POINT		7

static int afs_entry_point = UNKNOWN_ENTRY_POINT;
static int afs_syscalls[2];
static char *afs_ioctlpath;
static unsigned long afs_ioctlnum;

/* Magic to get AIX syscalls to work */
#ifdef _AIX

static int (*Pioctl)(char*, int, struct ViceIoctl*, int);
static int (*Setpag)(void);

#include "dlfcn.h"

/*
 *
 */

static int
try_aix(void)
{
#ifdef STATIC_AFS_SYSCALLS
    Pioctl = aix_pioctl;
    Setpag = aix_setpag;
#else
    void *ptr;
    char path[MaxPathLen], *p;
    /*
     * If we are root or running setuid don't trust AFSLIBPATH!
     */
    if (getuid() != 0 && !issuid() && (p = getenv("AFSLIBPATH")) != NULL)
	strlcpy(path, p, sizeof(path));
    else
	snprintf(path, sizeof(path), "%s/afslib.so", LIBDIR);

    ptr = dlopen(path, RTLD_NOW);
    if(ptr == NULL) {
	if(_kafs_debug) {
	    if(errno == ENOEXEC && (p = dlerror()) != NULL)
		fprintf(stderr, "dlopen(%s): %s\n", path, p);
	    else if (errno != ENOENT)
		fprintf(stderr, "dlopen(%s): %s\n", path, strerror(errno));
	}
	return 1;
    }
    Setpag = (int (*)(void))dlsym(ptr, "aix_setpag");
    Pioctl = (int (*)(char*, int,
		      struct ViceIoctl*, int))dlsym(ptr, "aix_pioctl");
#endif
    afs_entry_point = AIX_ENTRY_POINTS;
    return 0;
}
#endif /* _AIX */

/*
 * This probably only works under Solaris and could get confused if
 * there's a /etc/name_to_sysnum file.
 */

#if defined(AFS_SYSCALL) || defined(AFS_SYSCALL2) || defined(AFS_SYSCALL3)

#define _PATH_ETC_NAME_TO_SYSNUM "/etc/name_to_sysnum"

static int
map_syscall_name_to_number (const char *str, int *res)
{
    FILE *f;
    char buf[256];
    size_t str_len = strlen (str);

    f = fopen (_PATH_ETC_NAME_TO_SYSNUM, "r");
    if (f == NULL)
	return -1;
    while (fgets (buf, sizeof(buf), f) != NULL) {
	if (buf[0] == '#')
	    continue;

	if (strncmp (str, buf, str_len) == 0) {
	    char *begptr = buf + str_len;
	    char *endptr;
	    long val = strtol (begptr, &endptr, 0);

	    if (val != 0 && endptr != begptr) {
		fclose (f);
		*res = val;
		return 0;
	    }
	}
    }
    fclose (f);
    return -1;
}
#endif

static int
try_ioctlpath(const char *path, unsigned long ioctlnum, int entrypoint)
{
    int fd, ret, saved_errno;

    fd = open(path, O_RDWR);
    if (fd < 0)
	return 1;
    switch (entrypoint) {
    case LINUX_PROC_POINT: {
	struct procdata data = { 0, 0, 0, 0, AFSCALL_PIOCTL };
	data.param2 = (unsigned long)VIOCGETTOK;
	ret = ioctl(fd, ioctlnum, &data);
	break;
    }
    case MACOS_DEV_POINT: {
	struct devdata data = { AFSCALL_PIOCTL, 0, 0, 0, 0, 0, 0, 0 };
	data.param2 = (unsigned long)VIOCGETTOK;
	ret = ioctl(fd, ioctlnum, &data);
	break;
    }
    default:
	abort();
    }
    saved_errno = errno;
    close(fd);
    /*
     * Be quite liberal in what error are ok, the first is the one
     * that should trigger given that params is NULL.
     */
    if (ret &&
	(saved_errno != EFAULT &&
	 saved_errno != EDOM &&
	 saved_errno != ENOTCONN))
	return 1;
    afs_ioctlnum = ioctlnum;
    afs_ioctlpath = strdup(path);
    if (afs_ioctlpath == NULL)
	return 1;
    afs_entry_point = entrypoint;
    return 0;
}

static int
do_ioctl(void *data)
{
    int fd, ret, saved_errno;
    fd = open(afs_ioctlpath, O_RDWR);
    if (fd < 0) {
	errno = EINVAL;
	return -1;
    }
    ret = ioctl(fd, afs_ioctlnum, data);
    saved_errno = errno;
    close(fd);
    errno = saved_errno;
    return ret;
}

int
k_pioctl(char *a_path,
	 int o_opcode,
	 struct ViceIoctl *a_paramsP,
	 int a_followSymlinks)
{
#ifndef NO_AFS
    switch(afs_entry_point){
#if defined(AFS_SYSCALL) || defined(AFS_SYSCALL2) || defined(AFS_SYSCALL3)
    case SINGLE_ENTRY_POINT:
    case SINGLE_ENTRY_POINT2:
    case SINGLE_ENTRY_POINT3:
	return syscall(afs_syscalls[0], AFSCALL_PIOCTL,
		       a_path, o_opcode, a_paramsP, a_followSymlinks);
#endif
#if defined(AFS_PIOCTL)
    case MULTIPLE_ENTRY_POINT:
	return syscall(afs_syscalls[0],
		       a_path, o_opcode, a_paramsP, a_followSymlinks);
#endif
    case LINUX_PROC_POINT: {
	struct procdata data = { 0, 0, 0, 0, AFSCALL_PIOCTL };
	data.param1 = (unsigned long)a_path;
	data.param2 = (unsigned long)o_opcode;
	data.param3 = (unsigned long)a_paramsP;
	data.param4 = (unsigned long)a_followSymlinks;
	return do_ioctl(&data);
    }
    case MACOS_DEV_POINT: {
	struct devdata data = { AFSCALL_PIOCTL, 0, 0, 0, 0, 0, 0, 0 };
	int ret;

	data.param1 = (unsigned long)a_path;
	data.param2 = (unsigned long)o_opcode;
	data.param3 = (unsigned long)a_paramsP;
	data.param4 = (unsigned long)a_followSymlinks;

	ret = do_ioctl(&data);
	if (ret)
	    return ret;

	return data.retval;
    }
#ifdef _AIX
    case AIX_ENTRY_POINTS:
	return Pioctl(a_path, o_opcode, a_paramsP, a_followSymlinks);
#endif
    }
    errno = ENOSYS;
#ifdef SIGSYS
    kill(getpid(), SIGSYS);	/* You lose! */
#endif
#endif /* NO_AFS */
    return -1;
}

int
k_afs_cell_of_file(const char *path, char *cell, int len)
{
    struct ViceIoctl parms;
    parms.in = NULL;
    parms.in_size = 0;
    parms.out = cell;
    parms.out_size = len;
    return k_pioctl(rk_UNCONST(path), VIOC_FILE_CELL_NAME, &parms, 1);
}

int
k_unlog(void)
{
    struct ViceIoctl parms;
    memset(&parms, 0, sizeof(parms));
    return k_pioctl(0, VIOCUNLOG, &parms, 0);
}

int
k_setpag(void)
{
#ifndef NO_AFS
    switch(afs_entry_point){
#if defined(AFS_SYSCALL) || defined(AFS_SYSCALL2) || defined(AFS_SYSCALL3)
    case SINGLE_ENTRY_POINT:
    case SINGLE_ENTRY_POINT2:
    case SINGLE_ENTRY_POINT3:
	return syscall(afs_syscalls[0], AFSCALL_SETPAG);
#endif
#if defined(AFS_PIOCTL)
    case MULTIPLE_ENTRY_POINT:
	return syscall(afs_syscalls[1]);
#endif
    case LINUX_PROC_POINT: {
	struct procdata data = { 0, 0, 0, 0, AFSCALL_SETPAG };
	return do_ioctl(&data);
    }
    case MACOS_DEV_POINT: {
	struct devdata data = { AFSCALL_SETPAG, 0, 0, 0, 0, 0, 0, 0 };
	int ret = do_ioctl(&data);
	if (ret)
	    return ret;
	return data.retval;
     }
#ifdef _AIX
    case AIX_ENTRY_POINTS:
	return Setpag();
#endif
    }

    errno = ENOSYS;
#ifdef SIGSYS
    kill(getpid(), SIGSYS);	/* You lose! */
#endif
#endif /* NO_AFS */
    return -1;
}

static jmp_buf catch_SIGSYS;

#ifdef SIGSYS

static RETSIGTYPE
SIGSYS_handler(int sig)
{
    errno = 0;
    signal(SIGSYS, SIGSYS_handler); /* Need to reinstall handler on SYSV */
    longjmp(catch_SIGSYS, 1);
}

#endif

/*
 * Try to see if `syscall' is a pioctl.  Return 0 iff succesful.
 */

#if defined(AFS_SYSCALL) || defined(AFS_SYSCALL2) || defined(AFS_SYSCALL3)
static int
try_one (int syscall_num)
{
    struct ViceIoctl parms;
    memset(&parms, 0, sizeof(parms));

    if (setjmp(catch_SIGSYS) == 0) {
	syscall(syscall_num, AFSCALL_PIOCTL,
		0, VIOCSETTOK, &parms, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
	if (errno == EINVAL) {
	    afs_entry_point = SINGLE_ENTRY_POINT;
	    afs_syscalls[0] = syscall_num;
	    return 0;
	}
    }
    return 1;
}
#endif

/*
 * Try to see if `syscall_pioctl' is a pioctl syscall.  Return 0 iff
 * succesful.
 *
 */

#ifdef AFS_PIOCTL
static int
try_two (int syscall_pioctl, int syscall_setpag)
{
    struct ViceIoctl parms;
    memset(&parms, 0, sizeof(parms));

    if (setjmp(catch_SIGSYS) == 0) {
	syscall(syscall_pioctl,
		0, VIOCSETTOK, &parms, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
	if (errno == EINVAL) {
	    afs_entry_point = MULTIPLE_ENTRY_POINT;
	    afs_syscalls[0] = syscall_pioctl;
	    afs_syscalls[1] = syscall_setpag;
	    return 0;
	}
    }
    return 1;
}
#endif

int
k_hasafs(void)
{
#if !defined(NO_AFS) && defined(SIGSYS)
    RETSIGTYPE (*saved_func)(int);
#endif
    int saved_errno, ret;
    char *env = NULL;

    if (!issuid())
	env = getenv ("AFS_SYSCALL");

    /*
     * Already checked presence of AFS syscalls?
     */
    if (afs_entry_point != UNKNOWN_ENTRY_POINT)
	return afs_entry_point != NO_ENTRY_POINT;

    /*
     * Probe kernel for AFS specific syscalls,
     * they (currently) come in two flavors.
     * If the syscall is absent we recive a SIGSYS.
     */
    afs_entry_point = NO_ENTRY_POINT;

    saved_errno = errno;
#ifndef NO_AFS
#ifdef SIGSYS
    saved_func = signal(SIGSYS, SIGSYS_handler);
#endif
    if (env && strstr(env, "..") == NULL) {

	if (strncmp("/proc/", env, 6) == 0) {
	    if (try_ioctlpath(env, VIOC_SYSCALL_PROC, LINUX_PROC_POINT) == 0)
		goto done;
	}
	if (strncmp("/dev/", env, 5) == 0) {
#ifdef VIOC_SYSCALL_DEV
	    if (try_ioctlpath(env, VIOC_SYSCALL_DEV, MACOS_DEV_POINT) == 0)
		goto done;
#endif
#ifdef VIOC_SYSCALL_DEV_OPENAFS
	    if (try_ioctlpath(env,VIOC_SYSCALL_DEV_OPENAFS,MACOS_DEV_POINT) ==0)
		goto done;
#endif
	}
    }

    ret = try_ioctlpath("/proc/fs/openafs/afs_ioctl",
			VIOC_SYSCALL_PROC, LINUX_PROC_POINT);
    if (ret == 0)
	goto done;
    ret = try_ioctlpath("/proc/fs/nnpfs/afs_ioctl",
			VIOC_SYSCALL_PROC, LINUX_PROC_POINT);
    if (ret == 0)
	goto done;

#ifdef VIOC_SYSCALL_DEV_OPENAFS
    ret = try_ioctlpath("/dev/openafs_ioctl",
			VIOC_SYSCALL_DEV_OPENAFS, MACOS_DEV_POINT);
    if (ret == 0)
	goto done;
#endif
#ifdef VIOC_SYSCALL_DEV
    ret = try_ioctlpath("/dev/nnpfs_ioctl", VIOC_SYSCALL_DEV, MACOS_DEV_POINT);
    if (ret == 0)
	goto done;
#endif

#if defined(AFS_SYSCALL) || defined(AFS_SYSCALL2) || defined(AFS_SYSCALL3)
    {
	int tmp;

	if (env != NULL) {
	    if (sscanf (env, "%d", &tmp) == 1) {
		if (try_one (tmp) == 0)
		    goto done;
	    } else {
		char *end = NULL;
		char *p;
		char *s = strdup (env);

		if (s != NULL) {
		    for (p = strtok_r (s, ",", &end);
			 p != NULL;
			 p = strtok_r (NULL, ",", &end)) {
			if (map_syscall_name_to_number (p, &tmp) == 0)
			    if (try_one (tmp) == 0) {
				free (s);
				goto done;
			    }
		    }
		    free (s);
		}
	    }
	}
    }
#endif /* AFS_SYSCALL || AFS_SYSCALL2 || AFS_SYSCALL3 */

#ifdef AFS_SYSCALL
    if (try_one (AFS_SYSCALL) == 0)
	goto done;
#endif /* AFS_SYSCALL */

#ifdef AFS_PIOCTL
    {
	int tmp[2];

	if (env != NULL && sscanf (env, "%d%d", &tmp[0], &tmp[1]) == 2)
	    if (try_two (tmp[0], tmp[1]) == 2)
		goto done;
    }
#endif /* AFS_PIOCTL */

#ifdef AFS_PIOCTL
    if (try_two (AFS_PIOCTL, AFS_SETPAG) == 0)
	goto done;
#endif /* AFS_PIOCTL */

#ifdef AFS_SYSCALL2
    if (try_one (AFS_SYSCALL2) == 0)
	goto done;
#endif /* AFS_SYSCALL2 */

#ifdef AFS_SYSCALL3
    if (try_one (AFS_SYSCALL3) == 0)
	goto done;
#endif /* AFS_SYSCALL3 */

#ifdef _AIX
#if 0
    if (env != NULL) {
	char *pos = NULL;
	char *pioctl_name;
	char *setpag_name;

	pioctl_name = strtok_r (env, ", \t", &pos);
	if (pioctl_name != NULL) {
	    setpag_name = strtok_r (NULL, ", \t", &pos);
	    if (setpag_name != NULL)
		if (try_aix (pioctl_name, setpag_name) == 0)
		    goto done;
	}
    }
#endif

    if(try_aix() == 0)
	goto done;
#endif


done:
#ifdef SIGSYS
    signal(SIGSYS, saved_func);
#endif
#endif /* NO_AFS */
    errno = saved_errno;
    return afs_entry_point != NO_ENTRY_POINT;
}

int
k_hasafs_recheck(void)
{
    afs_entry_point = UNKNOWN_ENTRY_POINT;
    return k_hasafs();
}
@


1.6
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@@


1.5
log
@Merge of heimdal 0.7.2
Tested by todd & beck, ok beck.
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2000, 2002, 2004 Kungliga Tekniska Högskolan
d5 1
a5 1
 * 
d9 1
a9 1
 * 
d12 1
a12 1
 * 
d16 1
a16 1
 * 
d20 1
a20 1
 * 
a35 2
RCSID("$KTH: afssys.c,v 1.73 2005/06/02 07:25:58 lha Exp $");

d43 16
a58 1
#define VIOC_SYSCALL _IOW('C', 1, void *)
d63 1
d71 2
a72 1
#define UNKNOWN_ENTRY_POINT	7
d75 2
a76 1
static char *afs_procpath;
d102 1
a102 1
    if (getuid() != 0 && !issetugid() && (p = getenv("AFSLIBPATH")) != NULL)
d106 1
a106 1
	
d118 1
a118 1
    Pioctl = (int (*)(char*, int, 
d126 1
a126 1
/* 
d128 1
a128 1
 * there's a /etc/name_to_sysnum file.  
d166 2
a167 2
static int 
try_proc(const char *path)
d169 2
a170 1
    int fd;
d174 17
d192 8
a199 2
    afs_procpath = strdup(path);
    if (afs_procpath == NULL)
d201 5
a205 1
    afs_entry_point = LINUX_PROC_POINT;
d210 1
a210 1
do_proc(struct procdata *data)
d213 1
a213 1
    fd = open(afs_procpath, O_RDWR);
d218 1
a218 1
    ret = ioctl(fd, VIOC_SYSCALL, data);
d251 16
a266 1
	return do_proc(&data);
d272 1
a272 1
    }    
d289 1
a289 1
    return k_pioctl((char*)path, VIOC_FILE_CELL_NAME, &parms, 1);
d317 1
a317 1
	return do_proc(&data);
d319 7
d331 1
a331 1
    
d411 6
a416 3
    int saved_errno;
    char *env = getenv ("AFS_SYSCALL");
  
d429 1
a429 1
  
d435 38
a554 6
    if (try_proc("/proc/fs/openafs/afs_ioctl") == 0)
	goto done;
    if (try_proc("/proc/fs/nnpfs/afs_ioctl") == 0)
	goto done;
    if (env && try_proc(env) == 0)
	goto done;
d563 7
@


1.4
log
@Merge with heimdal-0.6.3 Tested by beck@@, msf@@, me and others. ok beck@@
@
text
@d36 1
a36 1
RCSID("$KTH: afssys.c,v 1.69.2.2 2004/06/22 14:29:48 lha Exp $");
d115 2
d148 1
@


1.3
log
@Merge 0.6rc1
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2000, 2002 Kungliga Tekniska Högskolan
d36 11
a46 1
RCSID("$KTH: afssys.c,v 1.69 2003/03/18 04:18:45 lha Exp $");
d55 3
a57 2
#define AIX_ENTRY_POINTS	5
#define UNKNOWN_ENTRY_POINT	6
d60 1
d147 31
d198 8
d210 1
a210 2
    }
    
d253 4
d444 7
@


1.2
log
@Use issetugid() instead of the wrapper called issuid() in libroken.
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 200 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: afssys.c,v 1.67 2000/07/08 12:06:03 assar Exp $");
d163 1
a163 1
    kill(getpid(), SIGSYS);	/* You loose! */
d211 1
a211 1
    kill(getpid(), SIGSYS);	/* You loose! */
@


1.1
log
@Initial revision
@
text
@d74 1
a74 1
    if (getuid() != 0 && !issuid() && (p = getenv("AFSLIBPATH")) != NULL)
@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.6rc1
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2000, 2002 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: afssys.c,v 1.69 2003/03/18 04:18:45 lha Exp $");
d163 1
a163 1
    kill(getpid(), SIGSYS);	/* You lose! */
d211 1
a211 1
    kill(getpid(), SIGSYS);	/* You lose! */
@


1.1.1.3
log
@Import of heimdal-0.6.3
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2000, 2002, 2004 Kungliga Tekniska Högskolan
d36 1
a36 11
RCSID("$KTH: afssys.c,v 1.69.2.2 2004/06/22 14:29:48 lha Exp $");

struct procdata {
    unsigned long param4;
    unsigned long param3;
    unsigned long param2;
    unsigned long param1;
    unsigned long syscall;
};
#define VIOC_SYSCALL _IOW('C', 1, void *)

d45 2
a46 3
#define LINUX_PROC_POINT	5
#define AIX_ENTRY_POINTS	6
#define UNKNOWN_ENTRY_POINT	7
a48 1
static char *afs_procpath;
a134 31
static int 
try_proc(const char *path)
{
    int fd;
    fd = open(path, O_RDWR);
    if (fd < 0)
	return 1;
    close(fd);
    afs_procpath = strdup(path);
    if (afs_procpath == NULL)
	return 1;
    afs_entry_point = LINUX_PROC_POINT;
    return 0;
}

static int
do_proc(struct procdata *data)
{
    int fd, ret, saved_errno;
    fd = open(afs_procpath, O_RDWR);
    if (fd < 0) {
	errno = EINVAL;
	return -1;
    }
    ret = ioctl(fd, VIOC_SYSCALL, data);
    saved_errno = errno;
    close(fd);
    errno = saved_errno;
    return ret;
}

a154 8
    case LINUX_PROC_POINT: {
	struct procdata data = { 0, 0, 0, 0, AFSCALL_PIOCTL };
	data.param1 = (unsigned long)a_path;
	data.param2 = (unsigned long)o_opcode;
	data.param3 = (unsigned long)a_paramsP;
	data.param4 = (unsigned long)a_followSymlinks;
	return do_proc(&data);
    }
d159 2
a160 1
    }    
a202 4
    case LINUX_PROC_POINT: {
	struct procdata data = { 0, 0, 0, 0, AFSCALL_SETPAG };
	return do_proc(&data);
    }
a389 7

    if (try_proc("/proc/fs/openafs/afs_ioctl") == 0)
	goto done;
    if (try_proc("/proc/fs/nnpfs/afs_ioctl") == 0)
	goto done;
    if (env && try_proc(env) == 0)
	goto done;
@


1.1.1.4
log
@Import of heimdal-0.7.2
@
text
@d36 1
a36 1
RCSID("$KTH: afssys.c,v 1.73 2005/06/02 07:25:58 lha Exp $");
a114 2
#if defined(AFS_SYSCALL) || defined(AFS_SYSCALL2) || defined(AFS_SYSCALL3)

a145 1
#endif
@


