head	1.3;
access;
symbols
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.2
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.1.1.3.0.40
	OPENBSD_5_3_BASE:1.1.1.3
	OPENBSD_5_2:1.1.1.3.0.38
	OPENBSD_5_2_BASE:1.1.1.3
	OPENBSD_5_1_BASE:1.1.1.3
	OPENBSD_5_1:1.1.1.3.0.36
	OPENBSD_5_0:1.1.1.3.0.34
	OPENBSD_5_0_BASE:1.1.1.3
	OPENBSD_4_9:1.1.1.3.0.32
	OPENBSD_4_9_BASE:1.1.1.3
	OPENBSD_4_8:1.1.1.3.0.30
	OPENBSD_4_8_BASE:1.1.1.3
	OPENBSD_4_7:1.1.1.3.0.26
	OPENBSD_4_7_BASE:1.1.1.3
	OPENBSD_4_6:1.1.1.3.0.28
	OPENBSD_4_6_BASE:1.1.1.3
	OPENBSD_4_5:1.1.1.3.0.24
	OPENBSD_4_5_BASE:1.1.1.3
	OPENBSD_4_4:1.1.1.3.0.22
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.20
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_2:1.1.1.3.0.18
	OPENBSD_4_2_BASE:1.1.1.3
	OPENBSD_4_1:1.1.1.3.0.16
	OPENBSD_4_1_BASE:1.1.1.3
	OPENBSD_4_0:1.1.1.3.0.14
	OPENBSD_4_0_BASE:1.1.1.3
	HEIMDAL_0_7_2:1.1.1.3
	OPENBSD_3_9:1.1.1.3.0.12
	OPENBSD_3_9_BASE:1.1.1.3
	OPENBSD_3_8:1.1.1.3.0.10
	OPENBSD_3_8_BASE:1.1.1.3
	OPENBSD_3_7:1.1.1.3.0.8
	OPENBSD_3_7_BASE:1.1.1.3
	HEIMDAL_0_6_3:1.1.1.3
	OPENBSD_3_6:1.1.1.3.0.6
	OPENBSD_3_6_BASE:1.1.1.3
	OPENBSD_3_5:1.1.1.3.0.4
	OPENBSD_3_5_BASE:1.1.1.3
	OPENBSD_3_4:1.1.1.3.0.2
	OPENBSD_3_4_BASE:1.1.1.3
	HEIMDAL_0_6:1.1.1.3
	HEIMDAL_0_6RC1:1.1.1.3
	OPENBSD_3_3:1.1.1.2.0.6
	OPENBSD_3_3_BASE:1.1.1.2
	OPENBSD_3_2:1.1.1.2.0.4
	OPENBSD_3_2_BASE:1.1.1.2
	OPENBSD_3_1:1.1.1.2.0.2
	OPENBSD_3_1_BASE:1.1.1.2
	HEIMDAL_0_4e:1.1.1.2
	OPENBSD_3_0:1.1.1.1.0.2
	OPENBSD_3_0_BASE:1.1.1.1
	HEIMDAL_0_3f:1.1.1.1
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2014.04.22.10.01.29;	author reyk;	state dead;
branches;
next	1.2;

1.2
date	2013.06.17.18.57.43;	author robert;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.25.07.50.18;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.50.18;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.02.06.08.55.12;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.02.15.43;	author hin;	state Exp;
branches;
next	;


desc
@@


1.3
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/*
 * Copyright (c) 1999-2005 Kungliga Tekniska HÃ¶gskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of KTH nor the names of its contributors may be
 *    used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY KTH AND ITS CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL KTH OR ITS CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

#include "hdb_locl.h"
#include <hex.h>
#include <ctype.h>

/*
   This is the present contents of a dump line. This might change at
   any time. Fields are separated by white space.

  principal
  keyblock
  	kvno
	keys...
		mkvno
		enctype
		keyvalue
		salt (- means use normal salt)
  creation date and principal
  modification date and principal
  principal valid from date (not used)
  principal valid end date (not used)
  principal key expires (not used)
  max ticket life
  max renewable life
  flags
  generation number
  */

static krb5_error_code
append_string(krb5_context context, krb5_storage *sp, const char *fmt, ...)
{
    krb5_error_code ret;
    char *s;
    va_list ap;
    va_start(ap, fmt);
    vasprintf(&s, fmt, ap);
    va_end(ap);
    if(s == NULL) {
	krb5_set_error_message(context, ENOMEM, "malloc: out of memory");
	return ENOMEM;
    }
    ret = krb5_storage_write(sp, s, strlen(s));
    free(s);
    return ret;
}

static krb5_error_code
append_hex(krb5_context context, krb5_storage *sp, krb5_data *data)
{
    int printable = 1;
    size_t i;
    char *p;

    p = data->data;
    for(i = 0; i < data->length; i++)
	if(!isalnum((unsigned char)p[i]) && p[i] != '.'){
	    printable = 0;
	    break;
	}
    if(printable)
	return append_string(context, sp, "\"%.*s\"",
			     data->length, data->data);
    hex_encode(data->data, data->length, &p);
    append_string(context, sp, "%s", p);
    free(p);
    return 0;
}

static char *
time2str(time_t t)
{
    static char buf[128];
    strftime(buf, sizeof(buf), "%Y%m%d%H%M%S", gmtime(&t));
    return buf;
}

static krb5_error_code
append_event(krb5_context context, krb5_storage *sp, Event *ev)
{
    char *pr = NULL;
    krb5_error_code ret;
    if(ev == NULL)
	return append_string(context, sp, "- ");
    if (ev->principal != NULL) {
       ret = krb5_unparse_name(context, ev->principal, &pr);
       if(ret)
           return ret;
    }
    ret = append_string(context, sp, "%s:%s ",
			time2str(ev->time), pr ? pr : "UNKNOWN");
    free(pr);
    return ret;
}

static krb5_error_code
entry2string_int (krb5_context context, krb5_storage *sp, hdb_entry *ent)
{
    char *p;
    size_t i;
    krb5_error_code ret;

    /* --- principal */
    ret = krb5_unparse_name(context, ent->principal, &p);
    if(ret)
	return ret;
    append_string(context, sp, "%s ", p);
    free(p);
    /* --- kvno */
    append_string(context, sp, "%d", ent->kvno);
    /* --- keys */
    for(i = 0; i < ent->keys.len; i++){
	/* --- mkvno, keytype */
	if(ent->keys.val[i].mkvno)
	    append_string(context, sp, ":%d:%d:",
			  *ent->keys.val[i].mkvno,
			  ent->keys.val[i].key.keytype);
	else
	    append_string(context, sp, "::%d:",
			  ent->keys.val[i].key.keytype);
	/* --- keydata */
	append_hex(context, sp, &ent->keys.val[i].key.keyvalue);
	append_string(context, sp, ":");
	/* --- salt */
	if(ent->keys.val[i].salt){
	    append_string(context, sp, "%u/", ent->keys.val[i].salt->type);
	    append_hex(context, sp, &ent->keys.val[i].salt->salt);
	}else
	    append_string(context, sp, "-");
    }
    append_string(context, sp, " ");
    /* --- created by */
    append_event(context, sp, &ent->created_by);
    /* --- modified by */
    append_event(context, sp, ent->modified_by);

    /* --- valid start */
    if(ent->valid_start)
	append_string(context, sp, "%s ", time2str(*ent->valid_start));
    else
	append_string(context, sp, "- ");

    /* --- valid end */
    if(ent->valid_end)
	append_string(context, sp, "%s ", time2str(*ent->valid_end));
    else
	append_string(context, sp, "- ");

    /* --- password ends */
    if(ent->pw_end)
	append_string(context, sp, "%s ", time2str(*ent->pw_end));
    else
	append_string(context, sp, "- ");

    /* --- max life */
    if(ent->max_life)
	append_string(context, sp, "%d ", *ent->max_life);
    else
	append_string(context, sp, "- ");

    /* --- max renewable life */
    if(ent->max_renew)
	append_string(context, sp, "%d ", *ent->max_renew);
    else
	append_string(context, sp, "- ");

    /* --- flags */
    append_string(context, sp, "%d ", HDBFlags2int(ent->flags));

    /* --- generation number */
    if(ent->generation) {
	append_string(context, sp, "%s:%d:%d ", time2str(ent->generation->time),
		      ent->generation->usec,
		      ent->generation->gen);
    } else
	append_string(context, sp, "- ");

    /* --- extensions */
    if(ent->extensions && ent->extensions->len > 0) {
	for(i = 0; i < ent->extensions->len; i++) {
	    void *d;
	    size_t size, sz = 0;

	    ASN1_MALLOC_ENCODE(HDB_extension, d, size,
			       &ent->extensions->val[i], &sz, ret);
	    if (ret) {
		krb5_clear_error_message(context);
		return ret;
	    }
	    if(size != sz)
		krb5_abortx(context, "internal asn.1 encoder error");

	    if (hex_encode(d, size, &p) < 0) {
		free(d);
		krb5_set_error_message(context, ENOMEM, "malloc: out of memory");
		return ENOMEM;
	    }

	    free(d);
	    append_string(context, sp, "%s%s", p,
			  ent->extensions->len - 1 != i ? ":" : "");
	    free(p);
	}
    } else
	append_string(context, sp, "-");


    return 0;
}

krb5_error_code
hdb_entry2string (krb5_context context, hdb_entry *ent, char **str)
{
    krb5_error_code ret;
    krb5_data data;
    krb5_storage *sp;

    sp = krb5_storage_emem();
    if(sp == NULL) {
	krb5_set_error_message(context, ENOMEM, "malloc: out of memory");
	return ENOMEM;
    }

    ret = entry2string_int(context, sp, ent);
    if(ret) {
	krb5_storage_free(sp);
	return ret;
    }

    krb5_storage_write(sp, "\0", 1);
    krb5_storage_to_data(sp, &data);
    krb5_storage_free(sp);
    *str = data.data;
    return 0;
}

/* print a hdb_entry to (FILE*)data; suitable for hdb_foreach */

krb5_error_code
hdb_print_entry(krb5_context context, HDB *db, hdb_entry_ex *entry, void *data)
{
    krb5_error_code ret;
    krb5_storage *sp;

    FILE *f = data;

    fflush(f);
    sp = krb5_storage_from_fd(fileno(f));
    if(sp == NULL) {
	krb5_set_error_message(context, ENOMEM, "malloc: out of memory");
	return ENOMEM;
    }

    ret = entry2string_int(context, sp, &entry->entry);
    if(ret) {
	krb5_storage_free(sp);
	return ret;
    }

    krb5_storage_write(sp, "\n", 1);
    krb5_storage_free(sp);
    return 0;
}
@


1.2
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@@


1.1
log
@Initial revision
@
text
@d2 3
a4 3
 * Copyright (c) 1999-2001 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
d6 3
a8 3
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
d10 2
a11 2
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
d13 3
a15 3
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
d34 1
d37 1
a37 3
RCSID("$KTH: print.c,v 1.5 2001/01/26 15:08:36 joda Exp $");

/* 
d57 1
d60 2
a61 2
static void
append_hex(char *str, krb5_data *data)
d63 20
a82 1
    int i, s = 1;
d88 1
a88 1
	    s = 0;
d91 5
a95 16
    if(s){
	p = calloc(1, data->length + 2 + 1);
	p[0] = '\"';
	p[data->length + 1] = '\"';
	memcpy(p + 1, data->data, data->length);
    }else{
	const char *xchars = "0123456789abcdef";
	char *q = p = malloc(data->length * 2 + 1);
	for(i = 0; i < data->length; i++) {
	    unsigned char c = ((u_char*)data->data)[i];
	    *q++ = xchars[(c & 0xf0) >> 4];
	    *q++ = xchars[(c & 0xf)];
	}
	*q = '\0';
    }
    strcat(str, p);
d97 1
d109 1
a109 1
event2string(krb5_context context, Event *ev, char **str)
d111 1
a111 2
    char *p;
    char *pr;
d113 3
a115 9
    if(ev == NULL){
	*str = strdup("-");
	return (*str == NULL) ? ENOMEM : 0;
    }
    if (ev->principal == NULL) {
       pr = strdup("UNKNOWN");
       if (pr == NULL)
	   return ENOMEM;
    } else {
d120 2
a121 1
    ret = asprintf(&p, "%s:%s", time2str(ev->time), pr);
d123 1
a123 4
    if(ret < 0)
	return ENOMEM;
    *str = p;
    return 0;
d126 2
a127 2
krb5_error_code
hdb_entry2string(krb5_context context, hdb_entry *ent, char **str)
d130 1
a130 3
    char buf[1024] = "";
    char tmp[32];
    int i;
d137 1
a137 2
    strlcat(buf, p, sizeof(buf));
    strlcat(buf, " ", sizeof(buf));
d140 1
a140 2
    snprintf(tmp, sizeof(tmp), "%d", ent->kvno);
    strlcat(buf, tmp, sizeof(buf));
d145 3
a147 3
	    snprintf(tmp, sizeof(tmp), ":%d:%d:", 
		     *ent->keys.val[i].mkvno, 
		     ent->keys.val[i].key.keytype);
d149 2
a150 3
	    snprintf(tmp, sizeof(tmp), "::%d:", 
		     ent->keys.val[i].key.keytype);
	strlcat(buf, tmp, sizeof(buf));
d152 2
a153 2
	append_hex(buf, &ent->keys.val[i].key.keyvalue);
	strlcat(buf, ":", sizeof(buf));
d156 2
a157 3
	    snprintf(tmp, sizeof(tmp), "%u/", ent->keys.val[i].salt->type);
	    strlcat(buf, tmp, sizeof(buf));
	    append_hex(buf, &ent->keys.val[i].salt->salt);
d159 1
a159 1
	    strlcat(buf, "-", sizeof(buf));
d161 1
a161 1
    strlcat(buf, " ", sizeof(buf));
d163 1
a163 4
    event2string(context, &ent->created_by, &p);
    strlcat(buf, p, sizeof(buf));
    strlcat(buf, " ", sizeof(buf));
    free(p);
d165 1
a165 4
    event2string(context, ent->modified_by, &p);
    strlcat(buf, p, sizeof(buf));
    strlcat(buf, " ", sizeof(buf));
    free(p);
d169 1
a169 1
	strlcat(buf, time2str(*ent->valid_start), sizeof(buf));
d171 1
a171 2
	strlcat(buf, "-", sizeof(buf));
    strlcat(buf, " ", sizeof(buf));
d175 1
a175 1
	strlcat(buf, time2str(*ent->valid_end), sizeof(buf));
d177 2
a178 3
	strlcat(buf, "-", sizeof(buf));
    strlcat(buf, " ", sizeof(buf));
    
d181 1
a181 1
	strlcat(buf, time2str(*ent->pw_end), sizeof(buf));
d183 1
a183 2
	strlcat(buf, "-", sizeof(buf));
    strlcat(buf, " ", sizeof(buf));
d186 4
a189 6
    if(ent->max_life){
	snprintf(tmp, sizeof(tmp), "%d", *ent->max_life);
	strlcat(buf, tmp, sizeof(buf));
    }else
	strlcat(buf, "-", sizeof(buf));
    strlcat(buf, " ", sizeof(buf));
d192 4
a195 7
    if(ent->max_renew){
	snprintf(tmp, sizeof(tmp), "%d", *ent->max_renew);
	strlcat(buf, tmp, sizeof(buf));
    }else
	strlcat(buf, "-", sizeof(buf));
    
    strlcat(buf, " ", sizeof(buf));
d198 66
a263 5
    snprintf(tmp, sizeof(tmp), "%d", HDBFlags2int(ent->flags));
    strlcat(buf, tmp, sizeof(buf));
    
    *str = strdup(buf);
    
d270 1
a270 1
hdb_print_entry(krb5_context context, HDB *db, hdb_entry *entry, void *data)
d272 20
a291 4
    char *p;
    hdb_entry2string(context, entry, &p);
    fprintf((FILE*)data, "%s\n", p);
    free(p);
@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.4e
@
text
@d36 1
a36 1
RCSID("$KTH: print.c,v 1.7 2001/07/13 06:30:42 assar Exp $");
a57 1
  generation number
d60 2
a61 20
static krb5_error_code
append_string(krb5_context context, krb5_storage *sp, const char *fmt, ...)
{
    krb5_error_code ret;
    char *s;
    va_list ap;
    va_start(ap, fmt);
    vasprintf(&s, fmt, ap);
    va_end(ap);
    if(s == NULL) {
	krb5_set_error_string(context, "malloc: out of memory");
	return ENOMEM;
    }
    ret = sp->store(sp, s, strlen(s));
    free(s);
    return ret;
}

static krb5_error_code
append_hex(krb5_context context, krb5_storage *sp, krb5_data *data)
d63 1
a63 1
    int i, printable = 1;
d69 1
a69 1
	    printable = 0;
d72 17
a88 6
    if(printable)
	return append_string(context, sp, "\"%.*s\"",
			     data->length, data->data);
    for(i = 0; i < data->length; i++) 
	append_string(context, sp, "%02x", ((unsigned char*)data->data)[i]);
    return 0;
d100 1
a100 1
append_event(krb5_context context, krb5_storage *sp, Event *ev)
d102 2
a103 1
    char *pr = NULL;
d105 9
a113 3
    if(ev == NULL)
	return append_string(context, sp, "- ");
    if (ev->principal != NULL) {
d118 1
a118 2
    ret = append_string(context, sp, "%s:%s ",
			time2str(ev->time), pr ? pr : "UNKNOWN");
d120 4
a123 1
    return ret;
d126 2
a127 2
static krb5_error_code
entry2string_int (krb5_context context, krb5_storage *sp, hdb_entry *ent)
d130 2
d139 2
a140 1
    append_string(context, sp, "%s ", p);
d143 2
a144 1
    append_string(context, sp, "%d", ent->kvno);
d149 3
a151 3
	    append_string(context, sp, ":%d:%d:", 
			  *ent->keys.val[i].mkvno, 
			  ent->keys.val[i].key.keytype);
d153 3
a155 2
	    append_string(context, sp, "::%d:", 
			  ent->keys.val[i].key.keytype);
d157 2
a158 2
	append_hex(context, sp, &ent->keys.val[i].key.keyvalue);
	append_string(context, sp, ":");
d161 3
a163 2
	    append_string(context, sp, "%u/", ent->keys.val[i].salt->type);
	    append_hex(context, sp, &ent->keys.val[i].salt->salt);
d165 1
a165 1
	    append_string(context, sp, "-");
d167 1
a167 1
    append_string(context, sp, " ");
d169 4
a172 1
    append_event(context, sp, &ent->created_by);
d174 4
a177 1
    append_event(context, sp, ent->modified_by);
d181 1
a181 1
	append_string(context, sp, "%s ", time2str(*ent->valid_start));
d183 2
a184 1
	append_string(context, sp, "- ");
d188 1
a188 1
	append_string(context, sp, "%s ", time2str(*ent->valid_end));
d190 2
a191 1
	append_string(context, sp, "- ");
d195 1
a195 1
	append_string(context, sp, "%s ", time2str(*ent->pw_end));
d197 2
a198 1
	append_string(context, sp, "- ");
d201 6
a206 4
    if(ent->max_life)
	append_string(context, sp, "%d ", *ent->max_life);
    else
	append_string(context, sp, "- ");
d209 5
a213 4
    if(ent->max_renew)
	append_string(context, sp, "%d ", *ent->max_renew);
    else
	append_string(context, sp, "- ");
d215 2
d218 2
a219 9
    append_string(context, sp, "%d ", HDBFlags2int(ent->flags));

    /* --- generation number */
    if(ent->generation) {
	append_string(context, sp, "%s:%d:%d", time2str(ent->generation->time),
		      ent->generation->usec,
		      ent->generation->gen);
    } else
	append_string(context, sp, "-");
d221 1
a221 15
    return 0;
}

krb5_error_code
hdb_entry2string (krb5_context context, hdb_entry *ent, char **str)
{
    krb5_error_code ret;
    krb5_data data;
    krb5_storage *sp;

    sp = krb5_storage_emem();
    if(sp == NULL) {
	krb5_set_error_string(context, "malloc: out of memory");
	return ENOMEM;
    }
a222 10
    ret = entry2string_int(context, sp, ent);
    if(ret) {
	krb5_storage_free(sp);
	return ret;
    }

    sp->store(sp, "\0", 1);
    krb5_storage_to_data(sp, &data);
    krb5_storage_free(sp);
    *str = data.data;
d231 4
a234 20
    krb5_error_code ret;
    krb5_storage *sp;

    FILE *f = data;

    fflush(f);
    sp = krb5_storage_from_fd(fileno(f));
    if(sp == NULL) {
	krb5_set_error_string(context, "malloc: out of memory");
	return ENOMEM;
    }
    
    ret = entry2string_int(context, sp, entry);
    if(ret) {
	krb5_storage_free(sp);
	return ret;
    }

    sp->store(sp, "\n", 1);
    krb5_storage_free(sp);
@


1.1.1.3
log
@Import of heimdal-0.6rc1
@
text
@d2 1
a2 1
 * Copyright (c) 1999-2002 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: print.c,v 1.8 2002/05/24 15:18:02 joda Exp $");
d74 1
a74 1
    ret = krb5_storage_write(sp, s, strlen(s));
d229 1
a229 1
    krb5_storage_write(sp, "\0", 1);
d259 1
a259 1
    krb5_storage_write(sp, "\n", 1);
@


