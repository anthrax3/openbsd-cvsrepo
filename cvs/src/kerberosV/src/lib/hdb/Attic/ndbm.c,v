head	1.3;
access;
symbols
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.2
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.1.1.3.0.28
	OPENBSD_5_3_BASE:1.1.1.3
	OPENBSD_5_2:1.1.1.3.0.26
	OPENBSD_5_2_BASE:1.1.1.3
	OPENBSD_5_1_BASE:1.1.1.3
	OPENBSD_5_1:1.1.1.3.0.24
	OPENBSD_5_0:1.1.1.3.0.22
	OPENBSD_5_0_BASE:1.1.1.3
	OPENBSD_4_9:1.1.1.3.0.20
	OPENBSD_4_9_BASE:1.1.1.3
	OPENBSD_4_8:1.1.1.3.0.18
	OPENBSD_4_8_BASE:1.1.1.3
	OPENBSD_4_7:1.1.1.3.0.14
	OPENBSD_4_7_BASE:1.1.1.3
	OPENBSD_4_6:1.1.1.3.0.16
	OPENBSD_4_6_BASE:1.1.1.3
	OPENBSD_4_5:1.1.1.3.0.12
	OPENBSD_4_5_BASE:1.1.1.3
	OPENBSD_4_4:1.1.1.3.0.10
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.8
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_2:1.1.1.3.0.6
	OPENBSD_4_2_BASE:1.1.1.3
	OPENBSD_4_1:1.1.1.3.0.4
	OPENBSD_4_1_BASE:1.1.1.3
	OPENBSD_4_0:1.1.1.3.0.2
	OPENBSD_4_0_BASE:1.1.1.3
	HEIMDAL_0_7_2:1.1.1.3
	OPENBSD_3_9:1.1.1.2.0.18
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.16
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.14
	OPENBSD_3_7_BASE:1.1.1.2
	HEIMDAL_0_6_3:1.1.1.2
	OPENBSD_3_6:1.1.1.2.0.12
	OPENBSD_3_6_BASE:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.10
	OPENBSD_3_5_BASE:1.1.1.2
	OPENBSD_3_4:1.1.1.2.0.8
	OPENBSD_3_4_BASE:1.1.1.2
	HEIMDAL_0_6:1.1.1.2
	HEIMDAL_0_6RC1:1.1.1.2
	OPENBSD_3_3:1.1.1.2.0.6
	OPENBSD_3_3_BASE:1.1.1.2
	OPENBSD_3_2:1.1.1.2.0.4
	OPENBSD_3_2_BASE:1.1.1.2
	OPENBSD_3_1:1.1.1.2.0.2
	OPENBSD_3_1_BASE:1.1.1.2
	HEIMDAL_0_4e:1.1.1.2
	OPENBSD_3_0:1.1.1.1.0.2
	OPENBSD_3_0_BASE:1.1.1.1
	HEIMDAL_0_3f:1.1.1.1
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2014.04.22.10.01.29;	author reyk;	state dead;
branches;
next	1.2;

1.2
date	2013.06.17.18.57.43;	author robert;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.25.07.50.18;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.50.18;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.02.06.08.55.12;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.04.14.07.33.03;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.3
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/*
 * Copyright (c) 1997 - 2001 Kungliga Tekniska HÃ¶gskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "hdb_locl.h"

#if HAVE_NDBM

#if defined(HAVE_GDBM_NDBM_H)
#include <gdbm/ndbm.h>
#define WRITE_SUPPORT 1
#elif defined(HAVE_NDBM_H)
#include <ndbm.h>
#elif defined(HAVE_DBM_H)
#define WRITE_SUPPORT 1
#include <dbm.h>
#endif

struct ndbm_db {
    DBM *db;
    int lock_fd;
};

static krb5_error_code
NDBM_destroy(krb5_context context, HDB *db)
{
    hdb_clear_master_key (context, db);
    free(db->hdb_name);
    free(db);
    return 0;
}

static krb5_error_code
NDBM_lock(krb5_context context, HDB *db, int operation)
{
    struct ndbm_db *d = db->hdb_db;
    return hdb_lock(d->lock_fd, operation);
}

static krb5_error_code
NDBM_unlock(krb5_context context, HDB *db)
{
    struct ndbm_db *d = db->hdb_db;
    return hdb_unlock(d->lock_fd);
}

static krb5_error_code
NDBM_seq(krb5_context context, HDB *db,
	 unsigned flags, hdb_entry_ex *entry, int first)

{
    struct ndbm_db *d = (struct ndbm_db *)db->hdb_db;
    datum key, value;
    krb5_data key_data, data;
    krb5_error_code ret = 0;

    if(first)
	key = dbm_firstkey(d->db);
    else
	key = dbm_nextkey(d->db);
    if(key.dptr == NULL)
	return HDB_ERR_NOENTRY;
    key_data.data = key.dptr;
    key_data.length = key.dsize;
    ret = db->hdb_lock(context, db, HDB_RLOCK);
    if(ret) return ret;
    value = dbm_fetch(d->db, key);
    db->hdb_unlock(context, db);
    data.data = value.dptr;
    data.length = value.dsize;
    memset(entry, 0, sizeof(*entry));
    if(hdb_value2entry(context, &data, &entry->entry))
	return NDBM_seq(context, db, flags, entry, 0);
    if (db->hdb_master_key_set && (flags & HDB_F_DECRYPT)) {
	ret = hdb_unseal_keys (context, db, &entry->entry);
	if (ret)
	    hdb_free_entry (context, entry);
    }
    if (ret == 0 && entry->entry.principal == NULL) {
	entry->entry.principal = malloc (sizeof(*entry->entry.principal));
	if (entry->entry.principal == NULL) {
	    hdb_free_entry (context, entry);
	    ret = ENOMEM;
	    krb5_set_error_message(context, ret, "malloc: out of memory");
	} else {
	    hdb_key2principal (context, &key_data, entry->entry.principal);
	}
    }
    return ret;
}


static krb5_error_code
NDBM_firstkey(krb5_context context, HDB *db,unsigned flags,hdb_entry_ex *entry)
{
    return NDBM_seq(context, db, flags, entry, 1);
}


static krb5_error_code
NDBM_nextkey(krb5_context context, HDB *db, unsigned flags,hdb_entry_ex *entry)
{
    return NDBM_seq(context, db, flags, entry, 0);
}

static krb5_error_code
open_lock_file(krb5_context context, const char *db_name, int *fd)
{
    char *lock_file;

    /* lock old and new databases */
    asprintf(&lock_file, "%s.lock", db_name);
    if(lock_file == NULL) {
	krb5_set_error_message(context, ENOMEM, "malloc: out of memory");
	return ENOMEM;
    }

    *fd = open(lock_file, O_RDWR | O_CREAT, 0600);
    free(lock_file);
    if(*fd < 0) {
	int ret = errno;
	krb5_set_error_message(context, ret, "open(%s): %s", lock_file,
			       strerror(ret));
	return ret;
    }
    return 0;
}


static krb5_error_code
NDBM_rename(krb5_context context, HDB *db, const char *new_name)
{
    int ret;
    char *old_dir, *old_pag, *new_dir, *new_pag;
    int old_lock_fd, new_lock_fd;

    /* lock old and new databases */
    ret = open_lock_file(context, db->hdb_name, &old_lock_fd);
    if (ret)
	return ret;

    ret = hdb_lock(old_lock_fd, HDB_WLOCK);
    if(ret) {
	close(old_lock_fd);
	return ret;
    }

    ret = open_lock_file(context, new_name, &new_lock_fd);
    if (ret) {
	hdb_unlock(old_lock_fd);
	close(old_lock_fd);
	return ret;
    }

    ret = hdb_lock(new_lock_fd, HDB_WLOCK);
    if(ret) {
	hdb_unlock(old_lock_fd);
	close(old_lock_fd);
	close(new_lock_fd);
	return ret;
    }

    asprintf(&old_dir, "%s.dir", db->hdb_name);
    asprintf(&old_pag, "%s.pag", db->hdb_name);
    asprintf(&new_dir, "%s.dir", new_name);
    asprintf(&new_pag, "%s.pag", new_name);

    ret = rename(old_dir, new_dir) || rename(old_pag, new_pag);
    if (ret) {
	ret = errno;
	if (ret == 0)
	    ret = EPERM;
	krb5_set_error_message(context, ret, "rename: %s", strerror(ret));
    }

    free(old_dir);
    free(old_pag);
    free(new_dir);
    free(new_pag);

    hdb_unlock(new_lock_fd);
    hdb_unlock(old_lock_fd);
    close(new_lock_fd);
    close(old_lock_fd);

    if(ret)
	return ret;

    free(db->hdb_name);
    db->hdb_name = strdup(new_name);
    return 0;
}

static krb5_error_code
NDBM__get(krb5_context context, HDB *db, krb5_data key, krb5_data *reply)
{
    struct ndbm_db *d = (struct ndbm_db *)db->hdb_db;
    datum k, v;
    int code;

    k.dptr  = key.data;
    k.dsize = key.length;
    code = db->hdb_lock(context, db, HDB_RLOCK);
    if(code)
	return code;
    v = dbm_fetch(d->db, k);
    db->hdb_unlock(context, db);
    if(v.dptr == NULL)
	return HDB_ERR_NOENTRY;

    krb5_data_copy(reply, v.dptr, v.dsize);
    return 0;
}

static krb5_error_code
NDBM__put(krb5_context context, HDB *db, int replace,
	krb5_data key, krb5_data value)
{
#ifdef WRITE_SUPPORT
    struct ndbm_db *d = (struct ndbm_db *)db->hdb_db;
    datum k, v;
    int code;

    k.dptr  = key.data;
    k.dsize = key.length;
    v.dptr  = value.data;
    v.dsize = value.length;

    code = db->hdb_lock(context, db, HDB_WLOCK);
    if(code)
	return code;
    code = dbm_store(d->db, k, v, replace ? DBM_REPLACE : DBM_INSERT);
    db->hdb_unlock(context, db);
    if(code == 1)
	return HDB_ERR_EXISTS;
    if (code < 0)
	return code;
    return 0;
#else
    return HDB_ERR_NO_WRITE_SUPPORT;
#endif
}

static krb5_error_code
NDBM__del(krb5_context context, HDB *db, krb5_data key)
{
    struct ndbm_db *d = (struct ndbm_db *)db->hdb_db;
    datum k;
    int code;
    krb5_error_code ret;

    k.dptr = key.data;
    k.dsize = key.length;
    ret = db->hdb_lock(context, db, HDB_WLOCK);
    if(ret) return ret;
    code = dbm_delete(d->db, k);
    db->hdb_unlock(context, db);
    if(code < 0)
	return errno;
    return 0;
}


static krb5_error_code
NDBM_close(krb5_context context, HDB *db)
{
    struct ndbm_db *d = db->hdb_db;
    dbm_close(d->db);
    close(d->lock_fd);
    free(d);
    return 0;
}

static krb5_error_code
NDBM_open(krb5_context context, HDB *db, int flags, mode_t mode)
{
    krb5_error_code ret;
    struct ndbm_db *d = malloc(sizeof(*d));

    if(d == NULL) {
	krb5_set_error_message(context, ENOMEM, "malloc: out of memory");
	return ENOMEM;
    }

    d->db = dbm_open((char*)db->hdb_name, flags, mode);
    if(d->db == NULL){
	ret = errno;
	free(d);
	krb5_set_error_message(context, ret, "dbm_open(%s): %s", db->hdb_name,
			       strerror(ret));
	return ret;
    }

    ret = open_lock_file(context, db->hdb_name, &d->lock_fd);
    if (ret) {
	ret = errno;
	dbm_close(d->db);
	free(d);
	krb5_set_error_message(context, ret, "open(lock file): %s",
			       strerror(ret));
	return ret;
    }

    db->hdb_db = d;
    if((flags & O_ACCMODE) == O_RDONLY)
	ret = hdb_check_db_format(context, db);
    else
	ret = hdb_init_db(context, db);
    if(ret == HDB_ERR_NOENTRY)
	return 0;
    if (ret) {
	NDBM_close(context, db);
	krb5_set_error_message(context, ret, "hdb_open: failed %s database %s",
			       (flags & O_ACCMODE) == O_RDONLY ?
			       "checking format of" : "initialize",
			       db->hdb_name);
    }
    return ret;
}

krb5_error_code
hdb_ndbm_create(krb5_context context, HDB **db,
		const char *filename)
{
    *db = calloc(1, sizeof(**db));
    if (*db == NULL) {
	krb5_set_error_message(context, ENOMEM, "malloc: out of memory");
	return ENOMEM;
    }

    (*db)->hdb_db = NULL;
    (*db)->hdb_name = strdup(filename);
    if ((*db)->hdb_name == NULL) {
	free(*db);
	*db = NULL;
	krb5_set_error_message(context, ENOMEM, "malloc: out of memory");
	return ENOMEM;
    }
    (*db)->hdb_master_key_set = 0;
    (*db)->hdb_openp = 0;
    (*db)->hdb_capability_flags = HDB_CAP_F_HANDLE_ENTERPRISE_PRINCIPAL;
    (*db)->hdb_open = NDBM_open;
    (*db)->hdb_close = NDBM_close;
    (*db)->hdb_fetch_kvno = _hdb_fetch_kvno;
    (*db)->hdb_store = _hdb_store;
    (*db)->hdb_remove = _hdb_remove;
    (*db)->hdb_firstkey = NDBM_firstkey;
    (*db)->hdb_nextkey= NDBM_nextkey;
    (*db)->hdb_lock = NDBM_lock;
    (*db)->hdb_unlock = NDBM_unlock;
    (*db)->hdb_rename = NDBM_rename;
    (*db)->hdb__get = NDBM__get;
    (*db)->hdb__put = NDBM__put;
    (*db)->hdb__del = NDBM__del;
    (*db)->hdb_destroy = NDBM_destroy;
    return 0;
}

#endif /* HAVE_NDBM */
@


1.2
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@@


1.1
log
@Initial revision
@
text
@d2 3
a4 3
 * Copyright (c) 1997 - 2001 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
d6 3
a8 3
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
d10 2
a11 2
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
d13 3
a15 3
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
d17 3
a19 3
 * 3. Neither the name of the Institute nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission. 
d21 11
a31 11
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE. 
d36 1
a36 1
RCSID("$KTH: ndbm.c,v 1.30 2001/01/30 01:24:00 assar Exp $");
d38 9
a46 1
#if defined(HAVE_NDBM_H) || defined(HAVE_GDBM_NDBM_H)
d56 2
a57 4
    krb5_error_code ret;

    ret = hdb_clear_master_key (context, db);
    free(db->name);
d65 1
a65 1
    struct ndbm_db *d = db->db;
d72 1
a72 1
    struct ndbm_db *d = db->db;
d77 2
a78 2
NDBM_seq(krb5_context context, HDB *db, 
	 unsigned flags, hdb_entry *entry, int first)
d81 1
a81 1
    struct ndbm_db *d = (struct ndbm_db *)db->db;
d94 1
a94 1
    ret = db->lock(context, db, HDB_RLOCK);
d97 1
a97 1
    db->unlock(context, db);
d100 2
a101 1
    if(hdb_value2entry(context, &data, entry))
d103 2
a104 2
    if (db->master_key_set && (flags & HDB_F_DECRYPT)) {
	ret = hdb_unseal_keys (context, db, entry);
d108 4
a111 3
    if (entry->principal == NULL) {
	entry->principal = malloc (sizeof(*entry->principal));
	if (entry->principal == NULL) {
d113 1
a113 1
	    hdb_free_entry (context, entry);
d115 1
a115 1
	    hdb_key2principal (context, &key_data, entry->principal);
d123 1
a123 1
NDBM_firstkey(krb5_context context, HDB *db, unsigned flags, hdb_entry *entry)
d130 1
a130 1
NDBM_nextkey(krb5_context context, HDB *db, unsigned flags, hdb_entry *entry)
d136 24
a161 3
    /* XXX this function will break */
    struct ndbm_db *d = db->db;

d164 1
a164 2
    char *new_lock;
    int lock_fd;
d167 14
a180 8
    ret = db->lock(context, db, HDB_WLOCK);
    if(ret) return ret;
    asprintf(&new_lock, "%s.lock", new_name);
    lock_fd = open(new_lock, O_RDWR | O_CREAT, 0600);
    free(new_lock);
    if(lock_fd < 0) {
	ret = errno;
	db->unlock(context, db);
d183 2
a184 1
    ret = hdb_lock(lock_fd, HDB_WLOCK);
d186 3
a188 2
	db->unlock(context, db);
	close(lock_fd);
d192 2
a193 2
    asprintf(&old_dir, "%s.dir", db->name);
    asprintf(&old_pag, "%s.pag", db->name);
d198 7
a208 2
    hdb_unlock(lock_fd);
    db->unlock(context, db);
d210 7
a216 4
    if(ret) {
	close(lock_fd);
	return errno;
    }
d218 2
a219 5
    close(d->lock_fd);
    d->lock_fd = lock_fd;
    
    free(db->name);
    db->name = strdup(new_name);
d226 1
a226 1
    struct ndbm_db *d = (struct ndbm_db *)db->db;
d232 1
a232 1
    code = db->lock(context, db, HDB_RLOCK);
d236 1
a236 1
    db->unlock(context, db);
d245 1
a245 1
NDBM__put(krb5_context context, HDB *db, int replace, 
d248 2
a249 1
    struct ndbm_db *d = (struct ndbm_db *)db->db;
d258 1
a258 1
    code = db->lock(context, db, HDB_WLOCK);
d262 1
a262 1
    db->unlock(context, db);
d268 3
d276 1
a276 1
    struct ndbm_db *d = (struct ndbm_db *)db->db;
d283 1
a283 1
    ret = db->lock(context, db, HDB_WLOCK);
d286 1
a286 1
    db->unlock(context, db);
d292 11
a307 1
    char *lock_file;
d309 2
a310 5
    if(d == NULL)
	return ENOMEM;
    asprintf(&lock_file, "%s.lock", (char*)db->name);
    if(lock_file == NULL) {
	free(d);
d313 2
a314 1
    d->db = dbm_open((char*)db->name, flags, mode);
d316 1
d318 3
a320 2
	free(lock_file);
	return errno;
d322 4
a325 3
    d->lock_fd = open(lock_file, O_RDWR | O_CREAT, 0600);
    free(lock_file);
    if(d->lock_fd < 0){
d328 3
a330 1
	return errno;
d332 2
a333 1
    db->db = d;
d340 7
a349 10
static krb5_error_code
NDBM_close(krb5_context context, HDB *db)
{
    struct ndbm_db *d = db->db;
    dbm_close(d->db);
    close(d->lock_fd);
    free(d);
    return 0;
}

d351 1
a351 1
hdb_ndbm_create(krb5_context context, HDB **db, 
d354 3
a356 2
    *db = malloc(sizeof(**db));
    if (*db == NULL)
d358 1
d360 25
a384 18
    (*db)->db = NULL;
    (*db)->name = strdup(filename);
    (*db)->master_key_set = 0;
    (*db)->openp = 0;
    (*db)->open = NDBM_open;
    (*db)->close = NDBM_close;
    (*db)->fetch = _hdb_fetch;
    (*db)->store = _hdb_store;
    (*db)->remove = _hdb_remove;
    (*db)->firstkey = NDBM_firstkey;
    (*db)->nextkey= NDBM_nextkey;
    (*db)->lock = NDBM_lock;
    (*db)->unlock = NDBM_unlock;
    (*db)->rename = NDBM_rename;
    (*db)->_get = NDBM__get;
    (*db)->_put = NDBM__put;
    (*db)->_del = NDBM__del;
    (*db)->destroy = NDBM_destroy;
d388 1
a388 1
#endif
@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.4e
@
text
@d36 1
a36 1
RCSID("$KTH: ndbm.c,v 1.33 2001/09/03 05:03:01 assar Exp $");
d38 1
a38 9
#if HAVE_NDBM

#if defined(HAVE_GDBM_NDBM_H)
#include <gdbm/ndbm.h>
#elif defined(HAVE_NDBM_H)
#include <ndbm.h>
#elif defined(HAVE_DBM_H)
#include <dbm.h>
#endif
a105 1
	    krb5_set_error_string(context, "malloc: out of memory");
d140 1
a140 2
    if(ret)
	return ret;
a141 5
    if(new_lock == NULL) {
	db->unlock(context, db);
	krb5_set_error_string(context, "malloc: out of memory");
	return ENOMEM;
    }
d143 1
a146 3
	krb5_set_error_string(context, "open(%s): %s", new_lock,
			      strerror(ret));
	free(new_lock);
a148 1
    free(new_lock);
a169 1
	ret = errno;
d171 1
a171 2
	krb5_set_error_string(context, "rename: %s", strerror(ret));
	return ret;
d254 1
a254 2
    if(d == NULL) {
	krb5_set_error_string(context, "malloc: out of memory");
a255 1
    }
a258 1
	krb5_set_error_string(context, "malloc: out of memory");
a262 1
	ret = errno;
d265 1
a265 3
	krb5_set_error_string(context, "dbm_open(%s): %s", db->name,
			      strerror(ret));
	return ret;
d268 1
a269 1
	ret = errno;
d272 1
a272 4
	krb5_set_error_string(context, "open(%s): %s", lock_file,
			      strerror(ret));
	free(lock_file);
	return ret;
a273 1
    free(lock_file);
d299 1
a299 2
    if (*db == NULL) {
	krb5_set_error_string(context, "malloc: out of memory");
a300 1
    }
a303 6
    if ((*db)->name == NULL) {
	krb5_set_error_string(context, "malloc: out of memory");
	free(*db);
	*db = NULL;
	return ENOMEM;
    }
d323 1
a323 1
#endif /* HAVE_NDBM */
@


1.1.1.3
log
@Import of heimdal-0.7.2
@
text
@d36 1
a36 1
RCSID("$KTH: ndbm.c,v 1.34 2003/09/19 00:20:43 lha Exp $");
d59 1
a59 1
    free(db->hdb_name);
d67 1
a67 1
    struct ndbm_db *d = db->hdb_db;
d74 1
a74 1
    struct ndbm_db *d = db->hdb_db;
d83 1
a83 1
    struct ndbm_db *d = (struct ndbm_db *)db->hdb_db;
d96 1
a96 1
    ret = db->hdb_lock(context, db, HDB_RLOCK);
d99 1
a99 1
    db->hdb_unlock(context, db);
d104 1
a104 1
    if (db->hdb_master_key_set && (flags & HDB_F_DECRYPT)) {
d140 1
a140 1
    struct ndbm_db *d = db->hdb_db;
d148 1
a148 1
    ret = db->hdb_lock(context, db, HDB_WLOCK);
d153 1
a153 1
	db->hdb_unlock(context, db);
d160 1
a160 1
	db->hdb_unlock(context, db);
d169 1
a169 1
	db->hdb_unlock(context, db);
d174 2
a175 2
    asprintf(&old_dir, "%s.dir", db->hdb_name);
    asprintf(&old_pag, "%s.pag", db->hdb_name);
d185 1
a185 1
    db->hdb_unlock(context, db);
d197 2
a198 2
    free(db->hdb_name);
    db->hdb_name = strdup(new_name);
d205 1
a205 1
    struct ndbm_db *d = (struct ndbm_db *)db->hdb_db;
d211 1
a211 1
    code = db->hdb_lock(context, db, HDB_RLOCK);
d215 1
a215 1
    db->hdb_unlock(context, db);
d227 1
a227 1
    struct ndbm_db *d = (struct ndbm_db *)db->hdb_db;
d236 1
a236 1
    code = db->hdb_lock(context, db, HDB_WLOCK);
d240 1
a240 1
    db->hdb_unlock(context, db);
d251 1
a251 1
    struct ndbm_db *d = (struct ndbm_db *)db->hdb_db;
d258 1
a258 1
    ret = db->hdb_lock(context, db, HDB_WLOCK);
d261 1
a261 1
    db->hdb_unlock(context, db);
d278 1
a278 1
    asprintf(&lock_file, "%s.lock", (char*)db->hdb_name);
d284 1
a284 1
    d->db = dbm_open((char*)db->hdb_name, flags, mode);
d289 1
a289 1
	krb5_set_error_string(context, "dbm_open(%s): %s", db->hdb_name,
d304 1
a304 1
    db->hdb_db = d;
d317 1
a317 1
    struct ndbm_db *d = db->hdb_db;
d334 3
a336 3
    (*db)->hdb_db = NULL;
    (*db)->hdb_name = strdup(filename);
    if ((*db)->hdb_name == NULL) {
d342 16
a357 16
    (*db)->hdb_master_key_set = 0;
    (*db)->hdb_openp = 0;
    (*db)->hdb_open = NDBM_open;
    (*db)->hdb_close = NDBM_close;
    (*db)->hdb_fetch = _hdb_fetch;
    (*db)->hdb_store = _hdb_store;
    (*db)->hdb_remove = _hdb_remove;
    (*db)->hdb_firstkey = NDBM_firstkey;
    (*db)->hdb_nextkey= NDBM_nextkey;
    (*db)->hdb_lock = NDBM_lock;
    (*db)->hdb_unlock = NDBM_unlock;
    (*db)->hdb_rename = NDBM_rename;
    (*db)->hdb__get = NDBM__get;
    (*db)->hdb__put = NDBM__put;
    (*db)->hdb__del = NDBM__del;
    (*db)->hdb_destroy = NDBM_destroy;
@


