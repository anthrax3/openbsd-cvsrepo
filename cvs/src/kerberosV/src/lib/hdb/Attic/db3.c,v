head	1.3;
access;
symbols
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.2
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.1.1.4.0.28
	OPENBSD_5_3_BASE:1.1.1.4
	OPENBSD_5_2:1.1.1.4.0.26
	OPENBSD_5_2_BASE:1.1.1.4
	OPENBSD_5_1_BASE:1.1.1.4
	OPENBSD_5_1:1.1.1.4.0.24
	OPENBSD_5_0:1.1.1.4.0.22
	OPENBSD_5_0_BASE:1.1.1.4
	OPENBSD_4_9:1.1.1.4.0.20
	OPENBSD_4_9_BASE:1.1.1.4
	OPENBSD_4_8:1.1.1.4.0.18
	OPENBSD_4_8_BASE:1.1.1.4
	OPENBSD_4_7:1.1.1.4.0.14
	OPENBSD_4_7_BASE:1.1.1.4
	OPENBSD_4_6:1.1.1.4.0.16
	OPENBSD_4_6_BASE:1.1.1.4
	OPENBSD_4_5:1.1.1.4.0.12
	OPENBSD_4_5_BASE:1.1.1.4
	OPENBSD_4_4:1.1.1.4.0.10
	OPENBSD_4_4_BASE:1.1.1.4
	OPENBSD_4_3:1.1.1.4.0.8
	OPENBSD_4_3_BASE:1.1.1.4
	OPENBSD_4_2:1.1.1.4.0.6
	OPENBSD_4_2_BASE:1.1.1.4
	OPENBSD_4_1:1.1.1.4.0.4
	OPENBSD_4_1_BASE:1.1.1.4
	OPENBSD_4_0:1.1.1.4.0.2
	OPENBSD_4_0_BASE:1.1.1.4
	HEIMDAL_0_7_2:1.1.1.4
	OPENBSD_3_9:1.1.1.3.0.6
	OPENBSD_3_9_BASE:1.1.1.3
	OPENBSD_3_8:1.1.1.3.0.4
	OPENBSD_3_8_BASE:1.1.1.3
	OPENBSD_3_7:1.1.1.3.0.2
	OPENBSD_3_7_BASE:1.1.1.3
	HEIMDAL_0_6_3:1.1.1.3
	OPENBSD_3_6:1.1.1.2.0.12
	OPENBSD_3_6_BASE:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.10
	OPENBSD_3_5_BASE:1.1.1.2
	OPENBSD_3_4:1.1.1.2.0.8
	OPENBSD_3_4_BASE:1.1.1.2
	HEIMDAL_0_6:1.1.1.2
	HEIMDAL_0_6RC1:1.1.1.2
	OPENBSD_3_3:1.1.1.2.0.6
	OPENBSD_3_3_BASE:1.1.1.2
	OPENBSD_3_2:1.1.1.2.0.4
	OPENBSD_3_2_BASE:1.1.1.2
	OPENBSD_3_1:1.1.1.2.0.2
	OPENBSD_3_1_BASE:1.1.1.2
	HEIMDAL_0_4e:1.1.1.2
	OPENBSD_3_0:1.1.1.1.0.2
	OPENBSD_3_0_BASE:1.1.1.1
	HEIMDAL_0_3f:1.1.1.1
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2014.04.22.10.01.29;	author reyk;	state dead;
branches;
next	1.2;

1.2
date	2013.06.17.18.57.43;	author robert;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.25.07.50.15;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.50.15;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.02.06.08.55.10;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.10.29.15.55.34;	author biorn;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2006.04.14.07.33.01;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.3
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/*
 * Copyright (c) 1997 - 2006 Kungliga Tekniska HÃ¶gskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "hdb_locl.h"

#if HAVE_DB3

#ifdef HAVE_DBHEADER
#include <db.h>
#elif HAVE_DB5_DB_H
#include <db5/db.h>
#elif HAVE_DB4_DB_H
#include <db4/db.h>
#elif HAVE_DB3_DB_H
#include <db3/db.h>
#else
#include <db.h>
#endif

static krb5_error_code
DB_close(krb5_context context, HDB *db)
{
    DB *d = (DB*)db->hdb_db;
    DBC *dbcp = (DBC*)db->hdb_dbc;

    (*dbcp->c_close)(dbcp);
    db->hdb_dbc = 0;
    (*d->close)(d, 0);
    return 0;
}

static krb5_error_code
DB_destroy(krb5_context context, HDB *db)
{
    krb5_error_code ret;

    ret = hdb_clear_master_key (context, db);
    free(db->hdb_name);
    free(db);
    return ret;
}

static krb5_error_code
DB_lock(krb5_context context, HDB *db, int operation)
{
    DB *d = (DB*)db->hdb_db;
    int fd;
    if ((*d->fd)(d, &fd))
	return HDB_ERR_CANT_LOCK_DB;
    return hdb_lock(fd, operation);
}

static krb5_error_code
DB_unlock(krb5_context context, HDB *db)
{
    DB *d = (DB*)db->hdb_db;
    int fd;
    if ((*d->fd)(d, &fd))
	return HDB_ERR_CANT_LOCK_DB;
    return hdb_unlock(fd);
}


static krb5_error_code
DB_seq(krb5_context context, HDB *db,
       unsigned flags, hdb_entry_ex *entry, int flag)
{
    DBT key, value;
    DBC *dbcp = db->hdb_dbc;
    krb5_data key_data, data;
    int code;

    memset(&key, 0, sizeof(DBT));
    memset(&value, 0, sizeof(DBT));
    if ((*db->hdb_lock)(context, db, HDB_RLOCK))
	return HDB_ERR_DB_INUSE;
    code = (*dbcp->c_get)(dbcp, &key, &value, flag);
    (*db->hdb_unlock)(context, db); /* XXX check value */
    if (code == DB_NOTFOUND)
	return HDB_ERR_NOENTRY;
    if (code)
	return code;

    key_data.data = key.data;
    key_data.length = key.size;
    data.data = value.data;
    data.length = value.size;
    memset(entry, 0, sizeof(*entry));
    if (hdb_value2entry(context, &data, &entry->entry))
	return DB_seq(context, db, flags, entry, DB_NEXT);
    if (db->hdb_master_key_set && (flags & HDB_F_DECRYPT)) {
	code = hdb_unseal_keys (context, db, &entry->entry);
	if (code)
	    hdb_free_entry (context, entry);
    }
    if (entry->entry.principal == NULL) {
	entry->entry.principal = malloc(sizeof(*entry->entry.principal));
	if (entry->entry.principal == NULL) {
	    hdb_free_entry (context, entry);
	    krb5_set_error_message(context, ENOMEM, "malloc: out of memory");
	    return ENOMEM;
	} else {
	    hdb_key2principal(context, &key_data, entry->entry.principal);
	}
    }
    return 0;
}


static krb5_error_code
DB_firstkey(krb5_context context, HDB *db, unsigned flags, hdb_entry_ex *entry)
{
    return DB_seq(context, db, flags, entry, DB_FIRST);
}


static krb5_error_code
DB_nextkey(krb5_context context, HDB *db, unsigned flags, hdb_entry_ex *entry)
{
    return DB_seq(context, db, flags, entry, DB_NEXT);
}

static krb5_error_code
DB_rename(krb5_context context, HDB *db, const char *new_name)
{
    int ret;
    char *old, *new;

    asprintf(&old, "%s.db", db->hdb_name);
    asprintf(&new, "%s.db", new_name);
    ret = rename(old, new);
    free(old);
    free(new);
    if(ret)
	return errno;

    free(db->hdb_name);
    db->hdb_name = strdup(new_name);
    return 0;
}

static krb5_error_code
DB__get(krb5_context context, HDB *db, krb5_data key, krb5_data *reply)
{
    DB *d = (DB*)db->hdb_db;
    DBT k, v;
    int code;

    memset(&k, 0, sizeof(DBT));
    memset(&v, 0, sizeof(DBT));
    k.data = key.data;
    k.size = key.length;
    k.flags = 0;
    if ((code = (*db->hdb_lock)(context, db, HDB_RLOCK)))
	return code;
    code = (*d->get)(d, NULL, &k, &v, 0);
    (*db->hdb_unlock)(context, db);
    if(code == DB_NOTFOUND)
	return HDB_ERR_NOENTRY;
    if(code)
	return code;

    krb5_data_copy(reply, v.data, v.size);
    return 0;
}

static krb5_error_code
DB__put(krb5_context context, HDB *db, int replace,
	krb5_data key, krb5_data value)
{
    DB *d = (DB*)db->hdb_db;
    DBT k, v;
    int code;

    memset(&k, 0, sizeof(DBT));
    memset(&v, 0, sizeof(DBT));
    k.data = key.data;
    k.size = key.length;
    k.flags = 0;
    v.data = value.data;
    v.size = value.length;
    v.flags = 0;
    if ((code = (*db->hdb_lock)(context, db, HDB_WLOCK)))
	return code;
    code = (*d->put)(d, NULL, &k, &v, replace ? 0 : DB_NOOVERWRITE);
    (*db->hdb_unlock)(context, db);
    if(code == DB_KEYEXIST)
	return HDB_ERR_EXISTS;
    if(code)
	return errno;
    return 0;
}

static krb5_error_code
DB__del(krb5_context context, HDB *db, krb5_data key)
{
    DB *d = (DB*)db->hdb_db;
    DBT k;
    krb5_error_code code;
    memset(&k, 0, sizeof(DBT));
    k.data = key.data;
    k.size = key.length;
    k.flags = 0;
    code = (*db->hdb_lock)(context, db, HDB_WLOCK);
    if(code)
	return code;
    code = (*d->del)(d, NULL, &k, 0);
    (*db->hdb_unlock)(context, db);
    if(code == DB_NOTFOUND)
	return HDB_ERR_NOENTRY;
    if(code)
	return code;
    return 0;
}

static krb5_error_code
DB_open(krb5_context context, HDB *db, int flags, mode_t mode)
{
    DBC *dbc = NULL;
    char *fn;
    krb5_error_code ret;
    DB *d;
    int myflags = 0;

    if (flags & O_CREAT)
      myflags |= DB_CREATE;

    if (flags & O_EXCL)
      myflags |= DB_EXCL;

    if((flags & O_ACCMODE) == O_RDONLY)
      myflags |= DB_RDONLY;

    if (flags & O_TRUNC)
      myflags |= DB_TRUNCATE;

    asprintf(&fn, "%s.db", db->hdb_name);
    if (fn == NULL) {
	krb5_set_error_message(context, ENOMEM, "malloc: out of memory");
	return ENOMEM;
    }
    if (db_create(&d, NULL, 0) != 0) {
	free(fn);
	krb5_set_error_message(context, ENOMEM, "malloc: out of memory");
	return ENOMEM;
    }
    db->hdb_db = d;

#if (DB_VERSION_MAJOR >= 4) && (DB_VERSION_MINOR >= 1)
    ret = (*d->open)(db->hdb_db, NULL, fn, NULL, DB_BTREE, myflags, mode);
#else
    ret = (*d->open)(db->hdb_db, fn, NULL, DB_BTREE, myflags, mode);
#endif

    if (ret == ENOENT) {
	/* try to open without .db extension */
#if (DB_VERSION_MAJOR >= 4) && (DB_VERSION_MINOR >= 1)
	ret = (*d->open)(db->hdb_db, NULL, db->hdb_name, NULL, DB_BTREE,
			 myflags, mode);
#else
	ret = (*d->open)(db->hdb_db, db->hdb_name, NULL, DB_BTREE,
			 myflags, mode);
#endif
    }

    if (ret) {
	free(fn);
	krb5_set_error_message(context, ret, "opening %s: %s",
			      db->hdb_name, strerror(ret));
	return ret;
    }
    free(fn);

    ret = (*d->cursor)(d, NULL, &dbc, 0);
    if (ret) {
	krb5_set_error_message(context, ret, "d->cursor: %s", strerror(ret));
        return ret;
    }
    db->hdb_dbc = dbc;

    if((flags & O_ACCMODE) == O_RDONLY)
	ret = hdb_check_db_format(context, db);
    else
	ret = hdb_init_db(context, db);
    if(ret == HDB_ERR_NOENTRY)
	return 0;
    if (ret) {
	DB_close(context, db);
	krb5_set_error_message(context, ret, "hdb_open: failed %s database %s",
			       (flags & O_ACCMODE) == O_RDONLY ?
			       "checking format of" : "initialize",
			       db->hdb_name);
    }

    return ret;
}

krb5_error_code
hdb_db_create(krb5_context context, HDB **db,
	      const char *filename)
{
    *db = calloc(1, sizeof(**db));
    if (*db == NULL) {
	krb5_set_error_message(context, ENOMEM, "malloc: out of memory");
	return ENOMEM;
    }

    (*db)->hdb_db = NULL;
    (*db)->hdb_name = strdup(filename);
    if ((*db)->hdb_name == NULL) {
	free(*db);
	*db = NULL;
	krb5_set_error_message(context, ENOMEM, "malloc: out of memory");
	return ENOMEM;
    }
    (*db)->hdb_master_key_set = 0;
    (*db)->hdb_openp = 0;
    (*db)->hdb_capability_flags = HDB_CAP_F_HANDLE_ENTERPRISE_PRINCIPAL;
    (*db)->hdb_open  = DB_open;
    (*db)->hdb_close = DB_close;
    (*db)->hdb_fetch_kvno = _hdb_fetch_kvno;
    (*db)->hdb_store = _hdb_store;
    (*db)->hdb_remove = _hdb_remove;
    (*db)->hdb_firstkey = DB_firstkey;
    (*db)->hdb_nextkey= DB_nextkey;
    (*db)->hdb_lock = DB_lock;
    (*db)->hdb_unlock = DB_unlock;
    (*db)->hdb_rename = DB_rename;
    (*db)->hdb__get = DB__get;
    (*db)->hdb__put = DB__put;
    (*db)->hdb__del = DB__del;
    (*db)->hdb_destroy = DB_destroy;
    return 0;
}
#endif /* HAVE_DB3 */
@


1.2
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@@


1.1
log
@Initial revision
@
text
@d2 3
a4 3
 * Copyright (c) 1997 - 2001 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
d6 3
a8 3
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
d10 2
a11 2
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
d13 3
a15 3
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
d17 3
a19 3
 * 3. Neither the name of the Institute nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission. 
d21 11
a31 11
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE. 
d36 13
a48 1
RCSID("$KTH: db3.c,v 1.6 2001/01/30 01:24:00 assar Exp $");
a49 1
#if defined(HAVE_DB_H) && DB_VERSION_MAJOR == 3
d53 2
a54 2
    DB *d = (DB*)db->db;
    DBC *dbcp = (DBC*)db->dbc;
d56 3
a58 3
    dbcp->c_close(dbcp);
    db->dbc = 0;
    d->close(d, 0);
d68 1
a68 1
    free(db->name);
d76 1
a76 1
    DB *d = (DB*)db->db;
d86 1
a86 1
    DB *d = (DB*)db->db;
d96 1
a96 1
       unsigned flags, hdb_entry *entry, int flag)
a97 1
    DB *d = (DB*)db->db;
d99 1
a99 1
    DBC *dbcp = db->dbc;
d105 1
a105 1
    if (db->lock(context, db, HDB_RLOCK))
d107 2
a108 2
    code = dbcp->c_get(dbcp, &key, &value, flag);
    db->unlock(context, db); /* XXX check value */
d118 2
a119 1
    if (hdb_value2entry(context, &data, entry))
d121 2
a122 2
    if (db->master_key_set && (flags & HDB_F_DECRYPT)) {
	code = hdb_unseal_keys (context, db, entry);
d126 3
a128 4
    if (entry->principal == NULL) {
	entry->principal = malloc(sizeof(*entry->principal));
	if (entry->principal == NULL) {
	    code = ENOMEM;
d130 2
d133 1
a133 1
	    hdb_key2principal(context, &key_data, entry->principal);
d141 1
a141 1
DB_firstkey(krb5_context context, HDB *db, unsigned flags, hdb_entry *entry)
d148 1
a148 1
DB_nextkey(krb5_context context, HDB *db, unsigned flags, hdb_entry *entry)
d159 1
a159 1
    asprintf(&old, "%s.db", db->name);
d166 3
a168 3
    
    free(db->name);
    db->name = strdup(new_name);
d175 1
a175 1
    DB *d = (DB*)db->db;
d184 1
a184 1
    if ((code = db->lock(context, db, HDB_RLOCK)))
d186 2
a187 2
    code = d->get(d, NULL, &k, &v, 0);
    db->unlock(context, db);
d198 1
a198 1
DB__put(krb5_context context, HDB *db, int replace, 
d201 1
a201 1
    DB *d = (DB*)db->db;
d213 1
a213 1
    if ((code = db->lock(context, db, HDB_WLOCK)))
d215 2
a216 2
    code = d->put(d, NULL, &k, &v, replace ? 0 : DB_NOOVERWRITE);
    db->unlock(context, db);
d227 1
a227 1
    DB *d = (DB*)db->db;
d234 1
a234 1
    code = db->lock(context, db, HDB_WLOCK);
d237 2
a238 2
    code = d->del(d, NULL, &k, 0);
    db->unlock(context, db);
d249 1
d261 1
a261 1
    if (flags & O_RDONLY)
d267 8
a274 2
    asprintf(&fn, "%s.db", db->name);
    if (fn == NULL)
d276 10
a285 4
    db_create(&d, NULL, 0);
    db->db = d;
    if ((ret = d->open(db->db, fn, NULL, DB_BTREE, myflags, mode))) {
      if(ret == ENOENT)
d287 14
a300 4
	if (d->open(db->db, db->name, NULL, DB_BTREE, myflags, mode)) {
	  free(fn);
	  return ret;
	}
d304 3
a306 2
    ret = d->cursor(d, NULL, (DBC **)&db->dbc, 0);
    if (ret)
d308 2
d317 8
d329 1
a329 1
hdb_db_create(krb5_context context, HDB **db, 
d332 3
a334 2
    *db = malloc(sizeof(**db));
    if (*db == NULL)
d336 1
d338 25
a362 18
    (*db)->db = NULL;
    (*db)->name = strdup(filename);
    (*db)->master_key_set = 0;
    (*db)->openp = 0;
    (*db)->open  = DB_open;
    (*db)->close = DB_close;
    (*db)->fetch = _hdb_fetch;
    (*db)->store = _hdb_store;
    (*db)->remove = _hdb_remove;
    (*db)->firstkey = DB_firstkey;
    (*db)->nextkey= DB_nextkey;
    (*db)->lock = DB_lock;
    (*db)->unlock = DB_unlock;
    (*db)->rename = DB_rename;
    (*db)->_get = DB__get;
    (*db)->_put = DB__put;
    (*db)->_del = DB__del;
    (*db)->destroy = DB_destroy;
d365 1
a365 1
#endif
@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.4e
@
text
@d36 1
a36 5
RCSID("$KTH: db3.c,v 1.8 2001/08/09 08:41:48 assar Exp $");

#if HAVE_DB3

#include <db.h>
d38 1
d118 1
a119 2
	    krb5_set_error_string(context, "malloc: out of memory");
	    return ENOMEM;
d255 1
a255 2
    if (fn == NULL) {
	krb5_set_error_string(context, "malloc: out of memory");
a256 1
    }
a263 2
	  krb5_set_error_string(context, "opening %s: %s",
				db->name, strerror(ret));
d270 1
a270 2
    if (ret) {
	krb5_set_error_string(context, "d->cursor: %s", strerror(ret));
a271 1
    }
d287 1
a287 2
    if (*db == NULL) {
	krb5_set_error_string(context, "malloc: out of memory");
a288 1
    }
a291 6
    if ((*db)->name == NULL) {
	krb5_set_error_string(context, "malloc: out of memory");
	free(*db);
	*db = NULL;
	return ENOMEM;
    }
d310 1
a310 1
#endif /* HAVE_DB3 */
@


1.1.1.3
log
@Import of heimdal-0.6.3
@
text
@d36 1
a36 1
RCSID("$KTH: db3.c,v 1.8.6.1 2003/08/29 16:59:39 lha Exp $");
a39 5
#ifdef HAVE_DB4_DB_H
#include <db4/db.h>
#elif defined(HAVE_DB3_DB_H)
#include <db3/db.h>
#else
a40 1
#endif
d90 1
a264 3
#if (DB_VERSION_MAJOR > 3) && (DB_VERSION_MINOR > 0)
    if ((ret = d->open(db->db, NULL, fn, NULL, DB_BTREE, myflags, mode))) {
#else
a265 1
#endif
a267 3
#if (DB_VERSION_MAJOR > 3) && (DB_VERSION_MINOR > 0)
	if (d->open(db->db, NULL, db->name, NULL, DB_BTREE, myflags, mode)) {
#else
a268 1
#endif
@


1.1.1.4
log
@Import of heimdal-0.7.2
@
text
@d2 1
a2 1
 * Copyright (c) 1997 - 2005 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: db3.c,v 1.14.2.1 2005/08/09 09:31:16 lha Exp $");
d51 2
a52 2
    DB *d = (DB*)db->hdb_db;
    DBC *dbcp = (DBC*)db->hdb_dbc;
d55 1
a55 1
    db->hdb_dbc = 0;
d66 1
a66 1
    free(db->hdb_name);
d74 1
a74 1
    DB *d = (DB*)db->hdb_db;
d84 1
a84 1
    DB *d = (DB*)db->hdb_db;
d97 1
a97 1
    DBC *dbcp = db->hdb_dbc;
d103 1
a103 1
    if (db->hdb_lock(context, db, HDB_RLOCK))
d106 1
a106 1
    db->hdb_unlock(context, db); /* XXX check value */
d118 1
a118 1
    if (db->hdb_master_key_set && (flags & HDB_F_DECRYPT)) {
d156 1
a156 1
    asprintf(&old, "%s.db", db->hdb_name);
d164 2
a165 2
    free(db->hdb_name);
    db->hdb_name = strdup(new_name);
d172 1
a172 1
    DB *d = (DB*)db->hdb_db;
d181 1
a181 1
    if ((code = db->hdb_lock(context, db, HDB_RLOCK)))
d184 1
a184 1
    db->hdb_unlock(context, db);
d198 1
a198 1
    DB *d = (DB*)db->hdb_db;
d210 1
a210 1
    if ((code = db->hdb_lock(context, db, HDB_WLOCK)))
d213 1
a213 1
    db->hdb_unlock(context, db);
d224 1
a224 1
    DB *d = (DB*)db->hdb_db;
d231 1
a231 1
    code = db->hdb_lock(context, db, HDB_WLOCK);
d235 1
a235 1
    db->hdb_unlock(context, db);
d257 1
a257 1
    if((flags & O_ACCMODE) == O_RDONLY)
d263 1
a263 1
    asprintf(&fn, "%s.db", db->hdb_name);
d269 3
a271 4
    db->hdb_db = d;

#if (DB_VERSION_MAJOR >= 4) && (DB_VERSION_MINOR >= 1)
    ret = d->open(db->hdb_db, NULL, fn, NULL, DB_BTREE, myflags, mode);
d273 1
a273 1
    ret = d->open(db->hdb_db, fn, NULL, DB_BTREE, myflags, mode);
d275 1
a275 2

    if (ret == ENOENT) {
d277 2
a278 2
#if (DB_VERSION_MAJOR >= 4) && (DB_VERSION_MINOR >= 1)
	ret = d->open(db->hdb_db, NULL, db->hdb_name, NULL, DB_BTREE, myflags, mode);
d280 1
a280 1
	ret = d->open(db->hdb_db, db->hdb_name, NULL, DB_BTREE, myflags, mode);
d282 5
a286 7
    }

    if (ret) {
	free(fn);
	krb5_set_error_string(context, "opening %s: %s",
			      db->hdb_name, strerror(ret));
	return ret;
d290 1
a290 1
    ret = d->cursor(d, NULL, (DBC **)&db->hdb_dbc, 0);
a301 8
    if (ret) {
	DB_close(context, db);
	krb5_set_error_string(context, "hdb_open: failed %s database %s",
			      (flags & O_ACCMODE) == O_RDONLY ? 
			      "checking format of" : "initialize", 
			      db->hdb_name);
    }

d315 3
a317 3
    (*db)->hdb_db = NULL;
    (*db)->hdb_name = strdup(filename);
    if ((*db)->hdb_name == NULL) {
d323 16
a338 16
    (*db)->hdb_master_key_set = 0;
    (*db)->hdb_openp = 0;
    (*db)->hdb_open  = DB_open;
    (*db)->hdb_close = DB_close;
    (*db)->hdb_fetch = _hdb_fetch;
    (*db)->hdb_store = _hdb_store;
    (*db)->hdb_remove = _hdb_remove;
    (*db)->hdb_firstkey = DB_firstkey;
    (*db)->hdb_nextkey= DB_nextkey;
    (*db)->hdb_lock = DB_lock;
    (*db)->hdb_unlock = DB_unlock;
    (*db)->hdb_rename = DB_rename;
    (*db)->hdb__get = DB__get;
    (*db)->hdb__put = DB__put;
    (*db)->hdb__del = DB__del;
    (*db)->hdb_destroy = DB_destroy;
@


