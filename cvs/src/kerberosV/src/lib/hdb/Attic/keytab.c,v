head	1.3;
access;
symbols
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.2
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.1.1.4.0.28
	OPENBSD_5_3_BASE:1.1.1.4
	OPENBSD_5_2:1.1.1.4.0.26
	OPENBSD_5_2_BASE:1.1.1.4
	OPENBSD_5_1_BASE:1.1.1.4
	OPENBSD_5_1:1.1.1.4.0.24
	OPENBSD_5_0:1.1.1.4.0.22
	OPENBSD_5_0_BASE:1.1.1.4
	OPENBSD_4_9:1.1.1.4.0.20
	OPENBSD_4_9_BASE:1.1.1.4
	OPENBSD_4_8:1.1.1.4.0.18
	OPENBSD_4_8_BASE:1.1.1.4
	OPENBSD_4_7:1.1.1.4.0.14
	OPENBSD_4_7_BASE:1.1.1.4
	OPENBSD_4_6:1.1.1.4.0.16
	OPENBSD_4_6_BASE:1.1.1.4
	OPENBSD_4_5:1.1.1.4.0.12
	OPENBSD_4_5_BASE:1.1.1.4
	OPENBSD_4_4:1.1.1.4.0.10
	OPENBSD_4_4_BASE:1.1.1.4
	OPENBSD_4_3:1.1.1.4.0.8
	OPENBSD_4_3_BASE:1.1.1.4
	OPENBSD_4_2:1.1.1.4.0.6
	OPENBSD_4_2_BASE:1.1.1.4
	OPENBSD_4_1:1.1.1.4.0.4
	OPENBSD_4_1_BASE:1.1.1.4
	OPENBSD_4_0:1.1.1.4.0.2
	OPENBSD_4_0_BASE:1.1.1.4
	HEIMDAL_0_7_2:1.1.1.4
	OPENBSD_3_9:1.1.1.3.0.12
	OPENBSD_3_9_BASE:1.1.1.3
	OPENBSD_3_8:1.1.1.3.0.10
	OPENBSD_3_8_BASE:1.1.1.3
	OPENBSD_3_7:1.1.1.3.0.8
	OPENBSD_3_7_BASE:1.1.1.3
	HEIMDAL_0_6_3:1.1.1.3
	OPENBSD_3_6:1.1.1.3.0.6
	OPENBSD_3_6_BASE:1.1.1.3
	OPENBSD_3_5:1.1.1.3.0.4
	OPENBSD_3_5_BASE:1.1.1.3
	OPENBSD_3_4:1.1.1.3.0.2
	OPENBSD_3_4_BASE:1.1.1.3
	HEIMDAL_0_6:1.1.1.3
	HEIMDAL_0_6RC1:1.1.1.3
	OPENBSD_3_3:1.1.1.2.0.6
	OPENBSD_3_3_BASE:1.1.1.2
	OPENBSD_3_2:1.1.1.2.0.4
	OPENBSD_3_2_BASE:1.1.1.2
	OPENBSD_3_1:1.1.1.2.0.2
	OPENBSD_3_1_BASE:1.1.1.2
	HEIMDAL_0_4e:1.1.1.2
	OPENBSD_3_0:1.1.1.1.0.2
	OPENBSD_3_0_BASE:1.1.1.1
	HEIMDAL_0_3f:1.1.1.1
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2014.04.22.10.01.29;	author reyk;	state dead;
branches;
next	1.2;

1.2
date	2013.06.17.18.57.43;	author robert;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.25.07.50.17;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.50.17;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.02.06.08.55.12;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.02.15.42;	author hin;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2006.04.14.07.33.02;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.3
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/*
 * Copyright (c) 1999 - 2002 Kungliga Tekniska HÃ¶gskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "hdb_locl.h"

/* keytab backend for HDB databases */

struct hdb_data {
    char *dbname;
    char *mkey;
};

struct hdb_cursor {
    HDB *db;
    hdb_entry_ex hdb_entry;
    int first, next;
    int key_idx;
};

/*
 * the format for HDB keytabs is:
 * HDB:[HDBFORMAT:database-specific-data[:mkey=mkey-file]]
 */

static krb5_error_code KRB5_CALLCONV
hdb_resolve(krb5_context context, const char *name, krb5_keytab id)
{
    struct hdb_data *d;
    const char *db, *mkey;

    d = malloc(sizeof(*d));
    if(d == NULL) {
	krb5_set_error_message(context, ENOMEM, "malloc: out of memory");
	return ENOMEM;
    }
    db = name;
    mkey = strstr(name, ":mkey=");
    if(mkey == NULL || mkey[5] == '\0') {
	if(*name == '\0')
	    d->dbname = NULL;
	else {
	    d->dbname = strdup(name);
	    if(d->dbname == NULL) {
		free(d);
		krb5_set_error_message(context, ENOMEM, "malloc: out of memory");
		return ENOMEM;
	    }
	}
	d->mkey = NULL;
    } else {
	d->dbname = malloc(mkey - db + 1);
	if(d->dbname == NULL) {
	    free(d);
	    krb5_set_error_message(context, ENOMEM, "malloc: out of memory");
	    return ENOMEM;
	}
	memmove(d->dbname, db, mkey - db);
	d->dbname[mkey - db] = '\0';

	d->mkey = strdup(mkey + 5);
	if(d->mkey == NULL) {
	    free(d->dbname);
	    free(d);
	    krb5_set_error_message(context, ENOMEM, "malloc: out of memory");
	    return ENOMEM;
	}
    }
    id->data = d;
    return 0;
}

static krb5_error_code KRB5_CALLCONV
hdb_close(krb5_context context, krb5_keytab id)
{
    struct hdb_data *d = id->data;

    free(d->dbname);
    free(d->mkey);
    free(d);
    return 0;
}

static krb5_error_code KRB5_CALLCONV
hdb_get_name(krb5_context context,
	     krb5_keytab id,
	     char *name,
	     size_t namesize)
{
    struct hdb_data *d = id->data;

    snprintf(name, namesize, "%s%s%s",
	     d->dbname ? d->dbname : "",
	     (d->dbname || d->mkey) ? ":" : "",
	     d->mkey ? d->mkey : "");
    return 0;
}

/*
 * try to figure out the database (`dbname') and master-key (`mkey')
 * that should be used for `principal'.
 */

static krb5_error_code
find_db (krb5_context context,
	 char **dbname,
	 char **mkey,
	 krb5_const_principal principal)
{
    krb5_const_realm realm = krb5_principal_get_realm(context, principal);
    krb5_error_code ret;
    struct hdb_dbinfo *head, *dbinfo = NULL;

    *dbname = *mkey = NULL;

    ret = hdb_get_dbinfo(context, &head);
    if (ret)
	return ret;

    while ((dbinfo = hdb_dbinfo_get_next(head, dbinfo)) != NULL) {
	const char *p = hdb_dbinfo_get_realm(context, dbinfo);
	if (p && strcmp (realm, p) == 0) {
	    p = hdb_dbinfo_get_dbname(context, dbinfo);
	    if (p)
		*dbname = strdup(p);
	    p = hdb_dbinfo_get_mkey_file(context, dbinfo);
	    if (p)
		*mkey = strdup(p);
	    break;
	}
    }
    hdb_free_dbinfo(context, &head);
    if (*dbname == NULL)
	*dbname = strdup(HDB_DEFAULT_DB);
    return 0;
}

/*
 * find the keytab entry in `id' for `principal, kvno, enctype' and return
 * it in `entry'.  return 0 or an error code
 */

static krb5_error_code KRB5_CALLCONV
hdb_get_entry(krb5_context context,
	      krb5_keytab id,
	      krb5_const_principal principal,
	      krb5_kvno kvno,
	      krb5_enctype enctype,
	      krb5_keytab_entry *entry)
{
    hdb_entry_ex ent;
    krb5_error_code ret;
    struct hdb_data *d = id->data;
    const char *dbname = d->dbname;
    const char *mkey   = d->mkey;
    char *fdbname = NULL, *fmkey = NULL;
    HDB *db;
    size_t i;

    memset(&ent, 0, sizeof(ent));

    if (dbname == NULL) {
	ret = find_db(context, &fdbname, &fmkey, principal);
	if (ret)
	    return ret;
	dbname = fdbname;
	mkey = fmkey;
    }

    ret = hdb_create (context, &db, dbname);
    if (ret)
	goto out2;
    ret = hdb_set_master_keyfile (context, db, mkey);
    if (ret) {
	(*db->hdb_destroy)(context, db);
	goto out2;
    }

    ret = (*db->hdb_open)(context, db, O_RDONLY, 0);
    if (ret) {
	(*db->hdb_destroy)(context, db);
	goto out2;
    }

    ret = (*db->hdb_fetch_kvno)(context, db, principal,
				HDB_F_DECRYPT|HDB_F_KVNO_SPECIFIED|
				HDB_F_GET_CLIENT|HDB_F_GET_SERVER|HDB_F_GET_KRBTGT,
				kvno, &ent);

    if(ret == HDB_ERR_NOENTRY) {
	ret = KRB5_KT_NOTFOUND;
	goto out;
    }else if(ret)
	goto out;

    if(kvno && (krb5_kvno)ent.entry.kvno != kvno) {
	hdb_free_entry(context, &ent);
 	ret = KRB5_KT_NOTFOUND;
	goto out;
    }
    if(enctype == 0)
	if(ent.entry.keys.len > 0)
	    enctype = ent.entry.keys.val[0].key.keytype;
    ret = KRB5_KT_NOTFOUND;
    for(i = 0; i < ent.entry.keys.len; i++) {
	if(ent.entry.keys.val[i].key.keytype == enctype) {
	    krb5_copy_principal(context, principal, &entry->principal);
	    entry->vno = ent.entry.kvno;
	    krb5_copy_keyblock_contents(context,
					&ent.entry.keys.val[i].key,
					&entry->keyblock);
	    ret = 0;
	    break;
	}
    }
    hdb_free_entry(context, &ent);
 out:
    (*db->hdb_close)(context, db);
    (*db->hdb_destroy)(context, db);
 out2:
    free(fdbname);
    free(fmkey);
    return ret;
}

/*
 * find the keytab entry in `id' for `principal, kvno, enctype' and return
 * it in `entry'.  return 0 or an error code
 */

static krb5_error_code KRB5_CALLCONV
hdb_start_seq_get(krb5_context context,
		  krb5_keytab id,
		  krb5_kt_cursor *cursor)
{
    krb5_error_code ret;
    struct hdb_cursor *c;
    struct hdb_data *d = id->data;
    const char *dbname = d->dbname;
    const char *mkey   = d->mkey;
    HDB *db;

    if (dbname == NULL) {
	/*
	 * We don't support enumerating without being told what
	 * backend to enumerate on
	 */
  	ret = KRB5_KT_NOTFOUND;
	return ret;
    }

    ret = hdb_create (context, &db, dbname);
    if (ret)
	return ret;
    ret = hdb_set_master_keyfile (context, db, mkey);
    if (ret) {
	(*db->hdb_destroy)(context, db);
	return ret;
    }

    ret = (*db->hdb_open)(context, db, O_RDONLY, 0);
    if (ret) {
	(*db->hdb_destroy)(context, db);
	return ret;
    }

    cursor->data = c = malloc (sizeof(*c));
    if(c == NULL){
	(*db->hdb_close)(context, db);
	(*db->hdb_destroy)(context, db);
	krb5_set_error_message(context, ENOMEM, "malloc: out of memory");
	return ENOMEM;
    }

    c->db = db;
    c->first = TRUE;
    c->next = TRUE;
    c->key_idx = 0;

    cursor->data = c;
    return ret;
}

static int KRB5_CALLCONV
hdb_next_entry(krb5_context context,
	       krb5_keytab id,
	       krb5_keytab_entry *entry,
	       krb5_kt_cursor *cursor)
{
    struct hdb_cursor *c = cursor->data;
    krb5_error_code ret;

    memset(entry, 0, sizeof(*entry));

    if (c->first) {
	c->first = FALSE;
	ret = (c->db->hdb_firstkey)(context, c->db,
				    HDB_F_DECRYPT|
				    HDB_F_GET_CLIENT|HDB_F_GET_SERVER|HDB_F_GET_KRBTGT,
				    &c->hdb_entry);
	if (ret == HDB_ERR_NOENTRY)
	    return KRB5_KT_END;
	else if (ret)
	    return ret;

	if (c->hdb_entry.entry.keys.len == 0)
	    hdb_free_entry(context, &c->hdb_entry);
	else
	    c->next = FALSE;
    }

    while (c->next) {
	ret = (c->db->hdb_nextkey)(context, c->db,
				   HDB_F_DECRYPT|
				   HDB_F_GET_CLIENT|HDB_F_GET_SERVER|HDB_F_GET_KRBTGT,
				   &c->hdb_entry);
	if (ret == HDB_ERR_NOENTRY)
	    return KRB5_KT_END;
	else if (ret)
	    return ret;

	/* If no keys on this entry, try again */
	if (c->hdb_entry.entry.keys.len == 0)
	    hdb_free_entry(context, &c->hdb_entry);
	else
	    c->next = FALSE;
    }

    /*
     * Return next enc type (keytabs are one slot per key, while
     * hdb is one record per principal.
     */

    ret = krb5_copy_principal(context,
			      c->hdb_entry.entry.principal,
			      &entry->principal);
    if (ret)
	return ret;

    entry->vno = c->hdb_entry.entry.kvno;
    ret = krb5_copy_keyblock_contents(context,
				      &c->hdb_entry.entry.keys.val[c->key_idx].key,
				      &entry->keyblock);
    if (ret) {
	krb5_free_principal(context, entry->principal);
	memset(entry, 0, sizeof(*entry));
	return ret;
    }
    c->key_idx++;

    /*
     * Once we get to the end of the list, signal that we want the
     * next entry
     */

    if ((size_t)c->key_idx == c->hdb_entry.entry.keys.len) {
	hdb_free_entry(context, &c->hdb_entry);
	c->next = TRUE;
	c->key_idx = 0;
    }

    return 0;
}


static int KRB5_CALLCONV
hdb_end_seq_get(krb5_context context,
		krb5_keytab id,
		krb5_kt_cursor *cursor)
{
    struct hdb_cursor *c = cursor->data;

    if (!c->next)
	hdb_free_entry(context, &c->hdb_entry);

    (c->db->hdb_close)(context, c->db);
    (c->db->hdb_destroy)(context, c->db);

    free(c);
    return 0;
}

krb5_kt_ops hdb_kt_ops = {
    "HDB",
    hdb_resolve,
    hdb_get_name,
    hdb_close,
    NULL,		/* destroy */
    hdb_get_entry,
    hdb_start_seq_get,
    hdb_next_entry,
    hdb_end_seq_get,
    NULL,		/* add */
    NULL		/* remove */
};
@


1.2
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@@


1.1
log
@Initial revision
@
text
@d2 3
a4 3
 * Copyright (c) 1999 - 2000 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
d6 3
a8 3
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
d10 2
a11 2
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
d13 3
a15 3
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
d17 3
a19 3
 * 3. Neither the name of the Institute nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission. 
d21 11
a31 11
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE. 
a37 2
RCSID("$KTH: keytab.c,v 1.3 2000/08/27 04:31:42 assar Exp $");

d43 7
d52 1
a52 1
 * HDB:[database:mkey]
d55 1
a55 1
static krb5_error_code
d62 2
a63 1
    if(d == NULL)
d65 1
d67 2
a68 2
    mkey = strchr(name, ':');
    if(mkey == NULL || mkey[1] == '\0') {
d75 1
d81 5
a85 10
	if((mkey - db) == 0) {
	    d->dbname = NULL;
	} else {
	    d->dbname = malloc(mkey - db);
	    if(d->dbname == NULL) {
		free(d);
		return ENOMEM;
	    }
	    memmove(d->dbname, db, mkey - db);
	    d->dbname[mkey - db] = '\0';
d87 4
a90 1
	d->mkey = strdup(mkey + 1);
d94 1
d102 1
a102 1
static krb5_error_code
d113 4
a116 4
static krb5_error_code 
hdb_get_name(krb5_context context, 
	     krb5_keytab id, 
	     char *name, 
d121 1
a121 1
    snprintf(name, namesize, "%s%s%s", 
a127 10
static void
set_config (krb5_context context,
	    krb5_config_binding *binding,
	    const char **dbname,
	    const char **mkey)
{
    *dbname = krb5_config_get_string(context, binding, "dbname", NULL);
    *mkey   = krb5_config_get_string(context, binding, "mkey_file", NULL);
}

d133 1
a133 1
static void
d135 2
a136 2
	 const char **dbname,
	 const char **mkey,
d139 3
a141 4
    krb5_config_binding *top_bind = NULL;
    krb5_config_binding *default_binding = NULL;
    krb5_config_binding *db;
    krb5_realm *prealm = krb5_princ_realm(context, (krb5_principal)principal);
d145 13
a157 20
    while ((db = (krb5_config_binding *)
	    krb5_config_get_next(context,
				 NULL,
				 &top_bind,
				 krb5_config_list,
				 "kdc",
				 "database",
				 NULL)) != NULL) {
	const char *p;
	
	p = krb5_config_get_string (context, db, "realm", NULL);
	if (p == NULL) {
	    if(default_binding) {
		krb5_warnx(context, "WARNING: more than one realm-less "
			   "database specification");
		krb5_warnx(context, "WARNING: using the first encountered");
	    } else
		default_binding = db;
	} else if (strcmp (*prealm, p) == 0) {
	    set_config (context, db, dbname, mkey);
d161 1
a161 2
    if (*dbname == NULL && default_binding != NULL)
	set_config (context, default_binding, dbname, mkey);
d163 2
a164 1
	*dbname = HDB_DEFAULT_DB;
d172 1
a172 1
static krb5_error_code
d180 1
a180 1
    hdb_entry ent;
a182 2
    int i;
    HDB *db;
d185 5
d191 7
a197 2
    if (dbname == NULL)
	find_db (context, &dbname, &mkey, principal);
d201 1
a201 1
	return ret;
d204 2
a205 2
	(*db->destroy)(context, db);
	return ret;
d207 2
a208 2
	
    ret = (*db->open)(context, db, O_RDONLY, 0);
d210 2
a211 2
	(*db->destroy)(context, db);
	return ret;
a212 4
    ent.principal = (krb5_principal)principal;
    ret = (*db->fetch)(context, db, HDB_F_DECRYPT, &ent);
    (*db->close)(context, db);
    (*db->destroy)(context, db);
d214 12
a225 5
    if(ret == HDB_ERR_NOENTRY)
	return KRB5_KT_NOTFOUND;
    else if(ret)
	return ret;
    if(kvno && ent.kvno != kvno) {
d227 2
a228 1
 	return KRB5_KT_NOTFOUND;
d231 2
a232 2
	if(ent.keys.len > 0)
	    enctype = ent.keys.val[0].key.keytype;
d234 2
a235 2
    for(i = 0; i < ent.keys.len; i++) {
	if(ent.keys.val[i].key.keytype == enctype) {
d237 3
a239 3
	    entry->vno = ent.kvno;
	    krb5_copy_keyblock_contents(context, 
					&ent.keys.val[i].key, 
d246 6
d255 157
d417 1
d419 3
a421 3
    NULL,		/* start_seq_get */
    NULL,		/* next_entry */
    NULL,		/* end_seq_get */
@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.4e
@
text
@d38 1
a38 1
RCSID("$KTH: keytab.c,v 1.4 2001/07/13 06:30:41 assar Exp $");
d57 1
a57 2
    if(d == NULL) {
	krb5_set_error_string(context, "malloc: out of memory");
a58 1
    }
a67 1
		krb5_set_error_string(context, "malloc: out of memory");
a78 1
		krb5_set_error_string(context, "malloc: out of memory");
a87 1
	    krb5_set_error_string(context, "malloc: out of memory");
@


1.1.1.3
log
@Import of heimdal-0.6rc1
@
text
@d2 1
a2 1
 * Copyright (c) 1999 - 2002 Kungliga Tekniska Högskolan
d38 1
a38 1
RCSID("$KTH: keytab.c,v 1.5 2002/08/26 13:28:11 assar Exp $");
d147 1
a147 1
    const krb5_config_binding *top_bind = NULL;
@


1.1.1.4
log
@Import of heimdal-0.7.2
@
text
@d38 1
a38 1
RCSID("$KTH: keytab.c,v 1.6 2003/09/19 00:19:58 lha Exp $");
d212 1
a212 1
	(*db->hdb_destroy)(context, db);
d216 1
a216 1
    ret = (*db->hdb_open)(context, db, O_RDONLY, 0);
d218 1
a218 1
	(*db->hdb_destroy)(context, db);
d222 3
a224 3
    ret = (*db->hdb_fetch)(context, db, HDB_F_DECRYPT, &ent);
    (*db->hdb_close)(context, db);
    (*db->hdb_destroy)(context, db);
@


