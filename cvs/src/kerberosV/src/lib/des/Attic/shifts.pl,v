head	1.2;
access;
symbols
	HEIMDAL_0_6_3:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.8
	OPENBSD_3_3_BASE:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.6
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.4
	OPENBSD_3_1_BASE:1.1.1.1
	HEIMDAL_0_4e:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.2
	OPENBSD_3_0_BASE:1.1.1.1
	HEIMDAL_0_3f:1.1.1.1
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2003.05.12.17.18.47;	author hin;	state dead;
branches;
next	1.1;

1.1
date	2001.05.25.07.51.55;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.51.55;	author hin;	state Exp;
branches;
next	;


desc
@@


1.2
log
@These files are not use by us, so they're removed to make the tree
a little bit leaner, and to get rid of some bad string functions.
@
text
@#/usr/local/bin/perl

sub lab_shift
	{
	local(*a,$n)=@@_;
	local(@@r,$i,$j,$k,$d,@@z);

	@@r=&shift(*a,$n);
	foreach $i (0 .. 31)
		{
		@@z=split(/\^/,$r[$i]);
		for ($j=0; $j <= $#z; $j++)
			{
			($d)=($z[$j] =~ /^(..)/);
			($k)=($z[$j] =~ /\[(.*)\]$/);
			$k.=",$n" if ($k ne "");
			$k="$n"	  if ($k eq "");
			$d="$d[$k]";
			$z[$j]=$d;
			}
		$r[$i]=join('^',@@z);
		}
	return(@@r);
	}

sub shift
	{
	local(*a,$n)=@@_;
	local(@@f);

	if ($n > 0)
		{
		@@f=&shiftl(*a,$n);
		}
	else
		{
		@@f=&shiftr(*a,-$n);
		}
	return(@@f);
	}

sub rotate
	{
	local(*a,$n)=@@_;
	local(@@f);

	if ($n > 0)
		{ @@f=&rotatel(*a,$n); }
	else
		{ @@f=&rotater(*a,-$n); }
	return(@@f);
	}

sub rotater
	{
	local(*a,$n)=@@_;
	local(@@f,@@g);

	@@f=&shiftr(*a,$n);
	@@g=&shiftl(*a,32-$n);
	$#f=31;
	$#g=31;
	return(&or(*f,*g));
	}

sub rotatel
	{
	local(*a,$n)=@@_;
	local(@@f,@@g);

	@@f=&shiftl(*a,$n);
	@@g=&shiftr(*a,32-$n);
	$#f=31;
	$#g=31;
	return(&or(*f,*g));
	}

sub shiftr
	{
	local(*a,$n)=@@_;
	local(@@r,$i);

	$#r=31;
	foreach $i (0 .. 31)
		{
		if (($i+$n) > 31)
			{
			$r[$i]="--";
			}
		else
			{
			$r[$i]=$a[$i+$n];
			}
		}
	return(@@r);
	}

sub shiftl
	{
	local(*a,$n)=@@_;
	local(@@r,$i);

	$#r=31;
	foreach $i (0 .. 31)
		{
		if ($i < $n)
			{
			$r[$i]="--";
			}
		else
			{
			$r[$i]=$a[$i-$n];
			}
		}
	return(@@r);
	}

sub printit
	{
	local(@@a)=@@_;
	local($i);

	foreach $i (0 .. 31)
		{
		printf "%2s  ",$a[$i];
		print "\n" if (($i%8) == 7);
		}
	print "\n";
	}

sub xor
	{
	local(*a,*b)=@@_;
	local(@@r,$i);

	$#r=31;
	foreach $i (0 .. 31)
		{
		$r[$i]=&compress($a[$i].'^'.$b[$i]);
#		$r[$i]=$a[$i]."^".$b[$i];
		}
	return(@@r);
	}

sub and
	{
	local(*a,$m)=@@_;
	local(@@r,$i);

	$#r=31;
	foreach $i (0 .. 31)
		{
		$r[$i]=(($m & (1<<$i))?($a[$i]):('--'));
		}
	return(@@r);
	}

sub or
	{
	local(*a,*b)=@@_;
	local(@@r,$i);

	$#r=31;
	foreach $i (0 .. 31)
		{
		$r[$i]='--'   if (($a[$i] eq '--') && ($b[$i] eq '--'));
		$r[$i]=$a[$i] if (($a[$i] ne '--') && ($b[$i] eq '--'));
		$r[$i]=$b[$i] if (($a[$i] eq '--') && ($b[$i] ne '--'));
		$r[$i]='++'   if (($a[$i] ne '--') && ($b[$i] ne '--'));
		}
	return(@@r);
	}

sub compress
	{
	local($s)=@@_;
	local($_,$i,@@a,%a,$r);

	$s =~ s/\^\^/\^/g;
	$s =~ s/^\^//;
	$s =~ s/\^$//;
	@@a=split(/\^/,$s);

	while ($#a >= 0)
		{
		$_=shift(@@a);
		next unless /\d/;
		$a{$_}++;
		}
	foreach $i (sort keys %a)
		{
		next if ($a{$i}%2 == 0);
		$r.="$i^";
		}
	chop($r);
	return($r);
	}
1;
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@
