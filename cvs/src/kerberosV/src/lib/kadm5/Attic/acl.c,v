head	1.3;
access;
symbols
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.2
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.1.1.3.0.28
	OPENBSD_5_3_BASE:1.1.1.3
	OPENBSD_5_2:1.1.1.3.0.26
	OPENBSD_5_2_BASE:1.1.1.3
	OPENBSD_5_1_BASE:1.1.1.3
	OPENBSD_5_1:1.1.1.3.0.24
	OPENBSD_5_0:1.1.1.3.0.22
	OPENBSD_5_0_BASE:1.1.1.3
	OPENBSD_4_9:1.1.1.3.0.20
	OPENBSD_4_9_BASE:1.1.1.3
	OPENBSD_4_8:1.1.1.3.0.18
	OPENBSD_4_8_BASE:1.1.1.3
	OPENBSD_4_7:1.1.1.3.0.14
	OPENBSD_4_7_BASE:1.1.1.3
	OPENBSD_4_6:1.1.1.3.0.16
	OPENBSD_4_6_BASE:1.1.1.3
	OPENBSD_4_5:1.1.1.3.0.12
	OPENBSD_4_5_BASE:1.1.1.3
	OPENBSD_4_4:1.1.1.3.0.10
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.8
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_2:1.1.1.3.0.6
	OPENBSD_4_2_BASE:1.1.1.3
	OPENBSD_4_1:1.1.1.3.0.4
	OPENBSD_4_1_BASE:1.1.1.3
	OPENBSD_4_0:1.1.1.3.0.2
	OPENBSD_4_0_BASE:1.1.1.3
	HEIMDAL_0_7_2:1.1.1.3
	OPENBSD_3_9:1.1.1.2.0.18
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.16
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.14
	OPENBSD_3_7_BASE:1.1.1.2
	HEIMDAL_0_6_3:1.1.1.2
	OPENBSD_3_6:1.1.1.2.0.12
	OPENBSD_3_6_BASE:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.10
	OPENBSD_3_5_BASE:1.1.1.2
	OPENBSD_3_4:1.1.1.2.0.8
	OPENBSD_3_4_BASE:1.1.1.2
	HEIMDAL_0_6:1.1.1.2
	HEIMDAL_0_6RC1:1.1.1.2
	OPENBSD_3_3:1.1.1.2.0.6
	OPENBSD_3_3_BASE:1.1.1.2
	OPENBSD_3_2:1.1.1.2.0.4
	OPENBSD_3_2_BASE:1.1.1.2
	OPENBSD_3_1:1.1.1.2.0.2
	OPENBSD_3_1_BASE:1.1.1.2
	HEIMDAL_0_4e:1.1.1.2
	OPENBSD_3_0:1.1.1.1.0.2
	OPENBSD_3_0_BASE:1.1.1.1
	HEIMDAL_0_3f:1.1.1.1
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2014.04.22.10.01.31;	author reyk;	state dead;
branches;
next	1.2;

1.2
date	2013.06.17.18.57.43;	author robert;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.25.07.50.21;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.50.21;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.02.06.08.55.13;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.04.14.07.33.04;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.3
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/*
 * Copyright (c) 1997 - 2001 Kungliga Tekniska HÃ¶gskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "kadm5_locl.h"

RCSID("$Id: acl.c,v 1.2 2013/06/17 18:57:43 robert Exp $");

static struct units acl_units[] = {
    { "all",		KADM5_PRIV_ALL },
    { "change-password",KADM5_PRIV_CPW },
    { "cpw",		KADM5_PRIV_CPW },
    { "list",		KADM5_PRIV_LIST },
    { "delete",		KADM5_PRIV_DELETE },
    { "modify",		KADM5_PRIV_MODIFY },
    { "add",		KADM5_PRIV_ADD },
    { "get", 		KADM5_PRIV_GET },
    { NULL,		0 }
};

kadm5_ret_t
_kadm5_string_to_privs(const char *s, uint32_t* privs)
{
    int flags;
    flags = parse_flags(s, acl_units, 0);
    if(flags < 0)
	return KADM5_FAILURE;
    *privs = flags;
    return 0;
}

kadm5_ret_t
_kadm5_privs_to_string(uint32_t privs, char *string, size_t len)
{
    if(privs == 0)
	strlcpy(string, "none", len);
    else
	unparse_flags(privs, acl_units + 1, string, len);
    return 0;
}

/*
 * retrieve the right for the current caller on `princ' (NULL means all)
 * and store them in `ret_flags'
 * return 0 or an error.
 */

static kadm5_ret_t
fetch_acl (kadm5_server_context *context,
	   krb5_const_principal princ,
	   unsigned *ret_flags)
{
    FILE *f;
    krb5_error_code ret = 0;
    char buf[256];

    *ret_flags = 0;

    /* no acl file -> no rights */
    f = fopen(context->config.acl_file, "r");
    if (f == NULL)
	return 0;

    while(fgets(buf, sizeof(buf), f) != NULL) {
	char *foo = NULL, *p;
	krb5_principal this_princ;
	unsigned flags = 0;

	p = strtok_r(buf, " \t\n", &foo);
	if(p == NULL)
	    continue;
	if (*p == '#')		/* comment */
	    continue;
	ret = krb5_parse_name(context->context, p, &this_princ);
	if(ret)
	    break;
	if(!krb5_principal_compare(context->context,
				   context->caller, this_princ)) {
	    krb5_free_principal(context->context, this_princ);
	    continue;
	}
	krb5_free_principal(context->context, this_princ);
	p = strtok_r(NULL, " \t\n", &foo);
	if(p == NULL)
	    continue;
	ret = _kadm5_string_to_privs(p, &flags);
	if (ret)
	    break;
	p = strtok_r(NULL, " \t\n", &foo);
	if (p == NULL) {
	    *ret_flags = flags;
	    break;
	}
	if (princ != NULL) {
	    krb5_principal pattern_princ;
	    krb5_boolean match;

	    ret = krb5_parse_name (context->context, p, &pattern_princ);
	    if (ret)
		break;
	    match = krb5_principal_match (context->context,
					  princ, pattern_princ);
	    krb5_free_principal (context->context, pattern_princ);
	    if (match) {
		*ret_flags = flags;
		break;
	    }
	}
    }
    fclose(f);
    return ret;
}

/*
 * set global acl flags in `context' for the current caller.
 * return 0 on success or an error
 */

kadm5_ret_t
_kadm5_acl_init(kadm5_server_context *context)
{
    krb5_principal princ;
    krb5_error_code ret;

    ret = krb5_parse_name(context->context, KADM5_ADMIN_SERVICE, &princ);
    if (ret)
	return ret;
    ret = krb5_principal_compare(context->context, context->caller, princ);
    krb5_free_principal(context->context, princ);
    if(ret != 0) {
	context->acl_flags = KADM5_PRIV_ALL;
	return 0;
    }

    return fetch_acl (context, NULL, &context->acl_flags);
}

/*
 * check if `flags' allows `op'
 * return 0 if OK or an error
 */

static kadm5_ret_t
check_flags (unsigned op,
	     unsigned flags)
{
    unsigned res = ~flags & op;

    if(res & KADM5_PRIV_GET)
	return KADM5_AUTH_GET;
    if(res & KADM5_PRIV_ADD)
	return KADM5_AUTH_ADD;
    if(res & KADM5_PRIV_MODIFY)
	return KADM5_AUTH_MODIFY;
    if(res & KADM5_PRIV_DELETE)
	return KADM5_AUTH_DELETE;
    if(res & KADM5_PRIV_CPW)
	return KADM5_AUTH_CHANGEPW;
    if(res & KADM5_PRIV_LIST)
	return KADM5_AUTH_LIST;
    if(res)
	return KADM5_AUTH_INSUFFICIENT;
    return 0;
}

/*
 * return 0 if the current caller in `context' is allowed to perform
 * `op' on `princ' and otherwise an error
 * princ == NULL if it's not relevant.
 */

kadm5_ret_t
_kadm5_acl_check_permission(kadm5_server_context *context,
			    unsigned op,
			    krb5_const_principal princ)
{
    kadm5_ret_t ret;
    unsigned princ_flags;

    ret = check_flags (op, context->acl_flags);
    if (ret == 0)
	return ret;
    ret = fetch_acl (context, princ, &princ_flags);
    if (ret)
	return ret;
    return check_flags (op, princ_flags);
}
@


1.2
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@d36 1
a36 1
RCSID("$Id$");
@


1.1
log
@Initial revision
@
text
@d2 3
a4 3
 * Copyright (c) 1997 - 2000 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
d6 3
a8 3
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
d10 2
a11 2
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
d13 3
a15 3
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
d17 3
a19 3
 * 3. Neither the name of the Institute nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission. 
d21 11
a31 11
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE. 
d36 1
a36 1
RCSID("$KTH: acl.c,v 1.12 2000/08/10 19:24:08 assar Exp $");
d47 1
a47 1
    { NULL }
d51 1
a51 1
_kadm5_string_to_privs(const char *s, u_int32_t* privs)
d62 1
a62 1
_kadm5_privs_to_string(u_int32_t privs, char *string, size_t len)
d82 1
a82 2
    unsigned flags = -1;
    FILE *f = fopen(context->config.acl_file, "r");
d84 1
d86 1
a86 2
    if(f != NULL) {
	char buf[256];
d88 20
a107 16
	while(fgets(buf, sizeof(buf), f) != NULL){
	    char *foo = NULL, *p;
	    krb5_principal this_princ;

	    flags = -1;
	    p = strtok_r(buf, " \t\n", &foo);
	    if(p == NULL)
		continue;
	    ret = krb5_parse_name(context->context, p, &this_princ);
	    if(ret)
		continue;
	    if(!krb5_principal_compare(context->context, 
				       context->caller, this_princ)) {
		krb5_free_principal(context->context, this_princ);
		continue;
	    }
d109 19
a127 4
	    p = strtok_r(NULL, " \t\n", &foo);
	    if(p == NULL)
		continue;
	    ret = _kadm5_string_to_privs(p, &flags);
d130 5
a134 3
	    p = strtok_r(NULL, "\n", &foo);
	    if (p == NULL) {
		ret = 0;
a136 15
	    if (princ != NULL) {
		krb5_principal pattern_princ;
		krb5_boolean tmp;

		ret = krb5_parse_name (context->context, p, &pattern_princ);
		if (ret)
		    break;
		tmp = krb5_principal_match (context->context,
					    princ, pattern_princ);
		krb5_free_principal (context->context, pattern_princ);
		if (tmp) {
		    ret = 0;
		    break;
		}
	    }
a137 1
	fclose(f);
d139 1
a139 4
    if(flags == -1)
	flags = 0;
    if (ret == 0)
	*ret_flags = flags;
d153 1
a153 1
    
@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.4e
@
text
@d2 1
a2 1
 * Copyright (c) 1997 - 2001 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: acl.c,v 1.13 2001/08/24 04:01:42 assar Exp $");
d82 2
a83 1
    FILE *f;
a84 1
    char buf[256];
d86 2
a87 1
    *ret_flags = 0;
d89 16
a104 20
    /* no acl file -> no rights */
    f = fopen(context->config.acl_file, "r");
    if (f == NULL)
	return 0;

    while(fgets(buf, sizeof(buf), f) != NULL) {
	char *foo = NULL, *p;
	krb5_principal this_princ;
	unsigned flags = 0;

	p = strtok_r(buf, " \t\n", &foo);
	if(p == NULL)
	    continue;
	if (*p == '#')		/* comment */
	    continue;
	ret = krb5_parse_name(context->context, p, &this_princ);
	if(ret)
	    break;
	if(!krb5_principal_compare(context->context, 
				   context->caller, this_princ)) {
d106 4
a109 19
	    continue;
	}
	krb5_free_principal(context->context, this_princ);
	p = strtok_r(NULL, " \t\n", &foo);
	if(p == NULL)
	    continue;
	ret = _kadm5_string_to_privs(p, &flags);
	if (ret)
	    break;
	p = strtok_r(NULL, "\n", &foo);
	if (p == NULL) {
	    *ret_flags = flags;
	    break;
	}
	if (princ != NULL) {
	    krb5_principal pattern_princ;
	    krb5_boolean match;

	    ret = krb5_parse_name (context->context, p, &pattern_princ);
d112 3
a114 5
	    match = krb5_principal_match (context->context,
					  princ, pattern_princ);
	    krb5_free_principal (context->context, pattern_princ);
	    if (match) {
		*ret_flags = flags;
d117 15
d133 1
d135 4
a138 1
    fclose(f);
@


1.1.1.3
log
@Import of heimdal-0.7.2
@
text
@d36 1
a36 1
RCSID("$KTH: acl.c,v 1.14 2004/08/26 07:48:46 lha Exp $");
d118 1
a118 1
	p = strtok_r(NULL, " \t\n", &foo);
@


