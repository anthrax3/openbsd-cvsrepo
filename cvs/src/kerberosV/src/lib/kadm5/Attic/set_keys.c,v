head	1.3;
access;
symbols
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.2
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.1.1.3.0.28
	OPENBSD_5_3_BASE:1.1.1.3
	OPENBSD_5_2:1.1.1.3.0.26
	OPENBSD_5_2_BASE:1.1.1.3
	OPENBSD_5_1_BASE:1.1.1.3
	OPENBSD_5_1:1.1.1.3.0.24
	OPENBSD_5_0:1.1.1.3.0.22
	OPENBSD_5_0_BASE:1.1.1.3
	OPENBSD_4_9:1.1.1.3.0.20
	OPENBSD_4_9_BASE:1.1.1.3
	OPENBSD_4_8:1.1.1.3.0.18
	OPENBSD_4_8_BASE:1.1.1.3
	OPENBSD_4_7:1.1.1.3.0.14
	OPENBSD_4_7_BASE:1.1.1.3
	OPENBSD_4_6:1.1.1.3.0.16
	OPENBSD_4_6_BASE:1.1.1.3
	OPENBSD_4_5:1.1.1.3.0.12
	OPENBSD_4_5_BASE:1.1.1.3
	OPENBSD_4_4:1.1.1.3.0.10
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.8
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_2:1.1.1.3.0.6
	OPENBSD_4_2_BASE:1.1.1.3
	OPENBSD_4_1:1.1.1.3.0.4
	OPENBSD_4_1_BASE:1.1.1.3
	OPENBSD_4_0:1.1.1.3.0.2
	OPENBSD_4_0_BASE:1.1.1.3
	HEIMDAL_0_7_2:1.1.1.3
	OPENBSD_3_9:1.1.1.2.0.18
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.16
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.14
	OPENBSD_3_7_BASE:1.1.1.2
	HEIMDAL_0_6_3:1.1.1.2
	OPENBSD_3_6:1.1.1.2.0.12
	OPENBSD_3_6_BASE:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.10
	OPENBSD_3_5_BASE:1.1.1.2
	OPENBSD_3_4:1.1.1.2.0.8
	OPENBSD_3_4_BASE:1.1.1.2
	HEIMDAL_0_6:1.1.1.2
	HEIMDAL_0_6RC1:1.1.1.2
	OPENBSD_3_3:1.1.1.2.0.6
	OPENBSD_3_3_BASE:1.1.1.2
	OPENBSD_3_2:1.1.1.2.0.4
	OPENBSD_3_2_BASE:1.1.1.2
	OPENBSD_3_1:1.1.1.2.0.2
	OPENBSD_3_1_BASE:1.1.1.2
	HEIMDAL_0_4e:1.1.1.2
	OPENBSD_3_0:1.1.1.1.0.2
	OPENBSD_3_0_BASE:1.1.1.1
	HEIMDAL_0_3f:1.1.1.1
	HEIMDAL_0_3e:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2014.04.22.10.01.31;	author reyk;	state dead;
branches;
next	1.2;

1.2
date	2013.06.17.18.57.43;	author robert;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.25.07.50.30;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.25.07.50.30;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.02.06.08.55.19;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.04.14.07.33.09;	author biorn;	state Exp;
branches;
next	;


desc
@@


1.3
log
@The complexity and quality of kerberosV and the fact that almost
nobody is using it doesn't justify to have it in base - disable and
remove it.  If the 2 two people who use it still want it, they can
make a port or recompile OpenBSD on their own.

There is a quote in theo.c from August 2010: "basically, dung beetles
fucking.  that's what kerberosV + openssl is like".

Discussed with many.  Tests by henning@@ reyk@@ and others.
ok deraadt@@ henning@@
@
text
@/*
 * Copyright (c) 1997 - 2001, 2003 Kungliga Tekniska HÃ¶gskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "kadm5_locl.h"

RCSID("$Id: set_keys.c,v 1.2 2013/06/17 18:57:43 robert Exp $");

/*
 * Set the keys of `ent' to the string-to-key of `password'
 */

kadm5_ret_t
_kadm5_set_keys(kadm5_server_context *context,
		hdb_entry *ent,
		const char *password)
{
    Key *keys;
    size_t num_keys;
    kadm5_ret_t ret;

    ret = hdb_generate_key_set_password(context->context,
					ent->principal,
					password, &keys, &num_keys);
    if (ret)
	return ret;

    _kadm5_free_keys (context->context, ent->keys.len, ent->keys.val);
    ent->keys.val = keys;
    ent->keys.len = num_keys;

    hdb_entry_set_pw_change_time(context->context, ent, 0);

    if (krb5_config_get_bool_default(context->context, NULL, FALSE,
				     "kadmin", "save-password", NULL))
    {
	ret = hdb_entry_set_password(context->context, context->db,
				     ent, password);
	if (ret)
	    return ret;
    }

    return 0;
}

/*
 * Set the keys of `ent' to (`n_key_data', `key_data')
 */

kadm5_ret_t
_kadm5_set_keys2(kadm5_server_context *context,
		 hdb_entry *ent,
		 int16_t n_key_data,
		 krb5_key_data *key_data)
{
    krb5_error_code ret;
    int i;
    unsigned len;
    Key *keys;

    len  = n_key_data;
    keys = malloc (len * sizeof(*keys));
    if (keys == NULL && len != 0)
	return ENOMEM;

    _kadm5_init_keys (keys, len);

    for(i = 0; i < n_key_data; i++) {
	keys[i].mkvno = NULL;
	keys[i].key.keytype = key_data[i].key_data_type[0];
	ret = krb5_data_copy(&keys[i].key.keyvalue,
			     key_data[i].key_data_contents[0],
			     key_data[i].key_data_length[0]);
	if(ret)
	    goto out;
	if(key_data[i].key_data_ver == 2) {
	    Salt *salt;

	    salt = calloc(1, sizeof(*salt));
	    if(salt == NULL) {
		ret = ENOMEM;
		goto out;
	    }
	    keys[i].salt = salt;
	    salt->type = key_data[i].key_data_type[1];
	    krb5_data_copy(&salt->salt,
			   key_data[i].key_data_contents[1],
			   key_data[i].key_data_length[1]);
	} else
	    keys[i].salt = NULL;
    }
    _kadm5_free_keys (context->context, ent->keys.len, ent->keys.val);
    ent->keys.len = len;
    ent->keys.val = keys;

    hdb_entry_set_pw_change_time(context->context, ent, 0);
    hdb_entry_clear_password(context->context, ent);

    return 0;
 out:
    _kadm5_free_keys (context->context, len, keys);
    return ret;
}

/*
 * Set the keys of `ent' to `n_keys, keys'
 */

kadm5_ret_t
_kadm5_set_keys3(kadm5_server_context *context,
		 hdb_entry *ent,
		 int n_keys,
		 krb5_keyblock *keyblocks)
{
    krb5_error_code ret;
    int i;
    unsigned len;
    Key *keys;

    len  = n_keys;
    keys = malloc (len * sizeof(*keys));
    if (keys == NULL && len != 0)
	return ENOMEM;

    _kadm5_init_keys (keys, len);

    for(i = 0; i < n_keys; i++) {
	keys[i].mkvno = NULL;
	ret = krb5_copy_keyblock_contents (context->context,
					   &keyblocks[i],
					   &keys[i].key);
	if(ret)
	    goto out;
	keys[i].salt = NULL;
    }
    _kadm5_free_keys (context->context, ent->keys.len, ent->keys.val);
    ent->keys.len = len;
    ent->keys.val = keys;

    hdb_entry_set_pw_change_time(context->context, ent, 0);
    hdb_entry_clear_password(context->context, ent);

    return 0;
 out:
    _kadm5_free_keys (context->context, len, keys);
    return ret;
}

/*
 *
 */

static int
is_des_key_p(int keytype)
{
    return keytype == ETYPE_DES_CBC_CRC ||
    	keytype == ETYPE_DES_CBC_MD4 ||
	keytype == ETYPE_DES_CBC_MD5;
}


/*
 * Set the keys of `ent' to random keys and return them in `n_keys'
 * and `new_keys'.
 */

kadm5_ret_t
_kadm5_set_keys_randomly (kadm5_server_context *context,
			  hdb_entry *ent,
			  krb5_keyblock **new_keys,
			  int *n_keys)
{
   krb5_keyblock *kblock = NULL;
   kadm5_ret_t ret = 0;
   int des_keyblock;
   size_t i, num_keys;
   Key *keys;

   ret = hdb_generate_key_set(context->context, ent->principal,
			       &keys, &num_keys, 1);
   if (ret)
	return ret;

   kblock = malloc(num_keys * sizeof(kblock[0]));
   if (kblock == NULL) {
	ret = ENOMEM;
	_kadm5_free_keys (context->context, num_keys, keys);
	return ret;
   }
   memset(kblock, 0, num_keys * sizeof(kblock[0]));

   des_keyblock = -1;
   for (i = 0; i < num_keys; i++) {

	/*
	 * To make sure all des keys are the the same we generate only
	 * the first one and then copy key to all other des keys.
	 */

	if (des_keyblock != -1 && is_des_key_p(keys[i].key.keytype)) {
	    ret = krb5_copy_keyblock_contents (context->context,
					       &kblock[des_keyblock],
					       &kblock[i]);
	    if (ret)
		goto out;
	    kblock[i].keytype = keys[i].key.keytype;
	} else {
	    ret = krb5_generate_random_keyblock (context->context,
						 keys[i].key.keytype,
						 &kblock[i]);
	    if (ret)
		goto out;

	    if (is_des_key_p(keys[i].key.keytype))
		des_keyblock = i;
	}

	ret = krb5_copy_keyblock_contents (context->context,
					   &kblock[i],
					   &keys[i].key);
	if (ret)
	    goto out;
   }

out:
   if(ret) {
	for (i = 0; i < num_keys; ++i)
	    krb5_free_keyblock_contents (context->context, &kblock[i]);
	free(kblock);
	_kadm5_free_keys (context->context, num_keys, keys);
	return ret;
   }

   _kadm5_free_keys (context->context, ent->keys.len, ent->keys.val);
   ent->keys.val = keys;
   ent->keys.len = num_keys;
   *new_keys     = kblock;
   *n_keys       = num_keys;

   hdb_entry_set_pw_change_time(context->context, ent, 0);
   hdb_entry_clear_password(context->context, ent);

   return 0;
}
@


1.2
log
@update kerberosV to Heimdal 1.5.2 using BSD Makefiles based
on the ones from FreeBSD

This is getting commited now so that we can patch it up
fast in the tree.
There are known regressions so please don't try to build
this on your own now, please wait for the next available
snapshot.

If however you would still want to build it, make sure
build and install everything in the tools directory first.

This is not the full commit yet because there are several
subdirectories.
@
text
@d36 1
a36 1
RCSID("$Id$");
@


1.1
log
@Initial revision
@
text
@d2 3
a4 3
 * Copyright (c) 1997 - 2000 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
d6 3
a8 3
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
d10 2
a11 2
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
d13 3
a15 3
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
d17 3
a19 3
 * 3. Neither the name of the Institute nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission. 
d21 11
a31 11
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE. 
d36 1
a36 219
RCSID("$KTH: set_keys.c,v 1.23 2000/11/15 23:13:30 assar Exp $");

/*
 * the known and used DES enctypes
 */

static krb5_enctype des_types[] = { ETYPE_DES_CBC_CRC,
 				    ETYPE_DES_CBC_MD4,
 				    ETYPE_DES_CBC_MD5 };
static unsigned n_des_types = sizeof(des_types) / sizeof(des_types[0]);

static krb5_error_code
make_keys(krb5_context context, krb5_principal principal, const char *password,
	  Key **keys_ret, size_t *num_keys_ret)
{
    krb5_enctype all_etypes[] = { ETYPE_DES3_CBC_SHA1,
				  ETYPE_DES_CBC_MD5,
				  ETYPE_DES_CBC_MD4,
				  ETYPE_DES_CBC_CRC };


    krb5_enctype e;

    krb5_error_code ret = 0;
    char **ktypes, **kp;

    Key *keys = NULL, *tmp;
    int num_keys = 0;
    Key key;

    int i;
    char *v4_ktypes[] = {"des3:pw-salt", "v4", NULL};

    ktypes = krb5_config_get_strings(context, NULL, "kadmin", 
				     "default_keys", NULL);

    /* for each entry in `default_keys' try to parse it as a sequence
       of etype:salttype:salt, syntax of this if something like:
       [(des|des3|etype):](pw|afs3)[:string], if etype is omitted it
       means everything, and if string is omitted is means the default
       string (for that principal). Additional special values:
       v5 == pw-salt, and
       v4 == pw-salt:
    */

    if (ktypes == NULL
	&& krb5_config_get_bool (context, NULL, "kadmin",
				 "use_v4_salt", NULL))
	ktypes = v4_ktypes;

    for(kp = ktypes; kp && *kp; kp++) {
	krb5_enctype *etypes;
	int num_etypes;
	krb5_salt salt;
	krb5_boolean salt_set;

	const char *p;
	char buf[3][256];
	int num_buf = 0;

	p = *kp;
	if(strcmp(p, "v5") == 0)
	    p = "pw-salt";
	else if(strcmp(p, "v4") == 0)
	    p = "des:pw-salt:";
	
	/* split p in a list of :-separated strings */
	for(num_buf = 0; num_buf < 3; num_buf++)
	    if(strsep_copy(&p, ":", buf[num_buf], sizeof(buf[num_buf])) == -1)
		break;

	etypes = NULL;
	num_etypes = 0;
	memset(&salt, 0, sizeof(salt));
	salt_set = FALSE;

	for(i = 0; i < num_buf; i++) {
	    if(etypes == NULL) {
		/* this might be a etype specifier */
		/* XXX there should be a string_to_etypes handling
                   special cases like `des' and `all' */
		if(strcmp(buf[i], "des") == 0) {
		    etypes = all_etypes + 1;
		    num_etypes = 3;
		    continue;
		} else if(strcmp(buf[i], "des3") == 0) {
		    e = ETYPE_DES3_CBC_SHA1;
		    etypes = &e;
		    num_etypes = 1;
		    continue;
		} else {
		    ret = krb5_string_to_enctype(context, buf[i], &e);
		    if(ret == 0) {
			etypes = &e;
			num_etypes = 1;
			continue;
		    }
		}
	    }
	    if(salt.salttype == 0) {
		/* interpret string as a salt specifier, if no etype
                   is set, this sets default values */
		/* XXX should perhaps use string_to_salttype, but that
                   interface sucks */
		if(strcmp(buf[i], "pw-salt") == 0) {
		    if(etypes == NULL) {
			etypes = all_etypes;
			num_etypes = 4;
		    }
		    salt.salttype = KRB5_PW_SALT;
		} else if(strcmp(buf[i], "afs3-salt") == 0) {
		    if(etypes == NULL) {
			etypes = all_etypes + 1;
			num_etypes = 3;
		    }
		    salt.salttype = KRB5_AFS3_SALT;
		}
	    } else {
		/* if there is a final string, use it as the string to
                   salt with, this is mostly useful with null salt for
                   v4 compat, and a cell name for afs compat */
		salt.saltvalue.data = buf[i];
		salt.saltvalue.length = strlen(buf[i]);
		salt_set = TRUE;
	    }
	}

	if(etypes == NULL || salt.salttype == 0) {	    
	    krb5_warnx(context, "bad value for default_keys `%s'", *kp);
	    continue;
	}

	if(!salt_set && salt.salttype == KRB5_PW_SALT)
	    /* make up default salt */
	    ret = krb5_get_pw_salt(context, principal, &salt);
	memset(&key, 0, sizeof(key));
	for(i = 0; i < num_etypes; i++) {
	    ret = krb5_string_to_key_salt (context,
					   etypes[i],
					   password,
					   salt,
					   &key.key);

	    if(ret)
		goto out;

	    if (salt.salttype != KRB5_PW_SALT || salt_set) {
		key.salt = malloc (sizeof(*key.salt));
		if (key.salt == NULL) {
		    free_Key(&key);
		    ret = ENOMEM;
		    goto out;
		}
		key.salt->type = salt.salttype;
		krb5_data_zero (&key.salt->salt);

		/* is the salt has not been set explicitly, it will be
		   the default salt, so there's no need to explicitly
		   copy it */
		if (salt_set) {
		    ret = krb5_data_copy(&key.salt->salt, 
					 salt.saltvalue.data, 
					 salt.saltvalue.length);
		    if (ret) {
			free_Key(&key);
			goto out;
		    }
		}
	    }
	    tmp = realloc(keys, (num_keys + 1) * sizeof(*keys));
	    if(tmp == NULL) {
		free_Key(&key);
		ret = ENOMEM;
		goto out;
	    }
	    keys = tmp;
	    keys[num_keys++] = key;
	}
    }

    if(num_keys == 0) {
	/* if we didn't manage to find a single valid key, create a
           default set */
	/* XXX only do this is there is no `default_keys'? */
	krb5_salt v5_salt;
	tmp = realloc(keys, (num_keys + 4) * sizeof(*keys));
	if(tmp == NULL) {
	    ret = ENOMEM;
	    goto out;
	}
	keys = tmp;
	ret = krb5_get_pw_salt(context, principal, &v5_salt);
	if(ret)
	    goto out;
	for(i = 0; i < 4; i++) {
	    memset(&key, 0, sizeof(key));
	    ret = krb5_string_to_key_salt(context, all_etypes[i], password, 
					  v5_salt, &key.key);
	    if(ret) {
		krb5_free_salt(context, v5_salt);
		goto out;
	    }
	    keys[num_keys++] = key;
	}
	krb5_free_salt(context, v5_salt);
    }

  out:
    if(ret == 0) {
	*keys_ret = keys;
	*num_keys_ret = num_keys;
    } else {
	for(i = 0; i < num_keys; i++) {
	    free_Key(&keys[i]);
	}
	free(keys);
    }
    return ret;
}
d44 1
a44 1
		hdb_entry *ent, 
a46 1
    kadm5_ret_t ret;
d49 1
d51 5
a55 2
    ret = make_keys(context->context, ent->principal, password, 
		    &keys, &num_keys);
d57 1
a57 4
    if(ret)
	return ret;
    
    _kadm5_free_keys (context, ent->keys.len, ent->keys.val);
d60 12
a71 1
    ent->kvno++;
d81 2
a82 2
		 hdb_entry *ent, 
		 int16_t n_key_data, 
d92 1
a92 1
    if (keys == NULL)
d108 1
a108 1
	    salt = malloc(sizeof(*salt));
d115 1
a115 1
	    krb5_data_copy(&salt->salt, 
d121 1
a121 1
    _kadm5_free_keys (context, ent->keys.len, ent->keys.val);
d124 4
a127 1
    ent->kvno++;
d130 1
a130 1
    _kadm5_free_keys (context, len, keys);
d151 1
a151 1
    if (keys == NULL)
d165 1
a165 1
    _kadm5_free_keys (context, ent->keys.len, ent->keys.val);
d168 4
a171 1
    ent->kvno++;
d174 1
a174 1
    _kadm5_free_keys (context, len, keys);
d179 13
d202 10
a211 5
    kadm5_ret_t ret = 0;
    int i;
    unsigned len;
    krb5_keyblock *keys;
    Key *hkeys;
d213 7
a219 4
    len  = n_des_types + 1;
    keys = malloc (len * sizeof(*keys));
    if (keys == NULL)
	return ENOMEM;
d221 2
a222 4
    for (i = 0; i < len; ++i) {
	keys[i].keyvalue.length = 0;
	keys[i].keyvalue.data   = NULL;
    }
d224 18
a241 5
    hkeys = malloc (len * sizeof(*hkeys));
    if (hkeys == NULL) {
	free (keys);
	return ENOMEM;
    }
d243 3
a245 13
    _kadm5_init_keys (hkeys, len);

    ret = krb5_generate_random_keyblock (context->context,
					 des_types[0],
					 &keys[0]);
    if (ret)
	goto out;

    ret = krb5_copy_keyblock_contents (context->context,
				       &keys[0],
				       &hkeys[0].key);
    if (ret)
	goto out;
a246 1
    for (i = 1; i < n_des_types; ++i) {
d248 2
a249 2
					   &keys[0],
					   &keys[i]);
d252 10
a261 8
	keys[i].keytype = des_types[i];
	ret = krb5_copy_keyblock_contents (context->context,
					   &keys[0],
					   &hkeys[i].key);
	if (ret)
	    goto out;
	hkeys[i].key.keytype = des_types[i];
    }
d263 5
a267 5
    ret = krb5_generate_random_keyblock (context->context,
					 ETYPE_DES3_CBC_SHA1,
					 &keys[n_des_types]);
    if (ret)
	goto out;
d269 2
a270 5
    ret = krb5_copy_keyblock_contents (context->context,
				       &keys[n_des_types],
				       &hkeys[n_des_types].key);
    if (ret)
	goto out;
d272 1
a272 13
    _kadm5_free_keys (context, ent->keys.len, ent->keys.val);
    ent->keys.len = len;
    ent->keys.val = hkeys;
    ent->kvno++;
    *new_keys     = keys;
    *n_keys       = len;
    return ret;
out:
    for (i = 0; i < len; ++i)
	krb5_free_keyblock_contents (context->context, &keys[i]);
    free (keys);
    _kadm5_free_keys (context, len, hkeys);
    return ret;
@


1.1.1.1
log
@Import of heimdal-0.3e
@
text
@@


1.1.1.2
log
@Import of heimdal-0.4e
@
text
@d2 1
a2 1
 * Copyright (c) 1997 - 2001 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: set_keys.c,v 1.25 2001/08/13 15:12:16 joda Exp $");
d75 1
a75 1
       means all etypes, and if string is omitted is means the default
d78 1
a78 2
       v4 == des:pw-salt:
       afs or afs3 == des:afs3-salt
a100 2
	else if(strcmp(p, "afs") == 0 || strcmp(p, "afs3") == 0)
	    p = "des:afs3-salt";
d168 1
a168 1
	if(!salt_set) {
d170 1
a170 16
	    if(salt.salttype == KRB5_PW_SALT)
		ret = krb5_get_pw_salt(context, principal, &salt);
	    else if(salt.salttype == KRB5_AFS3_SALT) {
		krb5_realm *realm = krb5_princ_realm(context, principal);
		salt.saltvalue.data = strdup(*realm);
		if(salt.saltvalue.data == NULL) {
		    krb5_set_error_string(context, "out of memory while "
					  "parsinig salt specifiers");
		    ret = ENOMEM;
		    goto out;
		}
		strlwr(salt.saltvalue.data);
		salt.saltvalue.length = strlen(*realm);
		salt_set = 1;
	    }
	}
a172 14
	    Key *k;
	    for(k = keys; k < keys + num_keys; k++) {
		if(k->key.keytype == etypes[i] &&
		   ((k->salt != NULL && 
		     k->salt->type == salt.salttype &&
		     k->salt->salt.length == salt.saltvalue.length &&
		     memcmp(k->salt->salt.data, salt.saltvalue.data, 
			    salt.saltvalue.length) == 0) ||
		    (k->salt == NULL && 
		     salt.salttype == KRB5_PW_SALT && 
		     !salt_set)))
		    goto next_etype;
	    }
		       
a212 1
	  next_etype:;
@


1.1.1.3
log
@Import of heimdal-0.7.2
@
text
@d2 1
a2 1
 * Copyright (c) 1997 - 2001, 2003 Kungliga Tekniska Högskolan
d36 252
a287 1
RCSID("$KTH: set_keys.c,v 1.37 2004/10/11 23:50:25 lha Exp $");
d298 1
a300 1
    kadm5_ret_t ret;
d302 4
a305 4
    ret = hdb_generate_key_set_password(context->context,
					ent->principal, 
					password, &keys, &num_keys);
    if (ret)
d307 2
a308 2

    _kadm5_free_keys (context->context, ent->keys.len, ent->keys.val);
d311 1
d361 1
a361 1
    _kadm5_free_keys (context->context, ent->keys.len, ent->keys.val);
d364 1
d367 1
a367 1
    _kadm5_free_keys (context->context, len, keys);
d402 1
a402 1
    _kadm5_free_keys (context->context, ent->keys.len, ent->keys.val);
d405 1
d408 1
a408 1
    _kadm5_free_keys (context->context, len, keys);
a412 13
 *
 */

static int
is_des_key_p(int keytype)
{
    return keytype == ETYPE_DES_CBC_CRC ||
    	keytype == ETYPE_DES_CBC_MD4 ||
	keytype == ETYPE_DES_CBC_MD5;
}


/*
d423 15
a437 10
   krb5_keyblock *kblock = NULL;
   kadm5_ret_t ret = 0;
   int i, des_keyblock;
   size_t num_keys;
   Key *keys;

   ret = hdb_generate_key_set(context->context, ent->principal,
			       &keys, &num_keys, 1);
   if (ret)
	return ret;
d439 5
a443 7
   kblock = malloc(num_keys * sizeof(kblock[0]));
   if (kblock == NULL) {
	ret = ENOMEM;
	_kadm5_free_keys (context->context, num_keys, keys);
	return ret;
   }
   memset(kblock, 0, num_keys * sizeof(kblock[0]));
d445 1
a445 2
   des_keyblock = -1;
   for (i = 0; i < num_keys; i++) {
d447 5
a451 18
	/* 
	 * To make sure all des keys are the the same we generate only
	 * the first one and then copy key to all other des keys.
	 */

	if (des_keyblock != -1 && is_des_key_p(keys[i].key.keytype)) {
	    ret = krb5_copy_keyblock_contents (context->context,
					       &kblock[des_keyblock],
					       &kblock[i]);
	    if (ret)
		goto out;
	    kblock[i].keytype = keys[i].key.keytype;
	} else {
	    ret = krb5_generate_random_keyblock (context->context,
						 keys[i].key.keytype,
						 &kblock[i]);
	    if (ret)
		goto out;
d453 5
a457 3
	    if (is_des_key_p(keys[i].key.keytype))
		des_keyblock = i;
	}
d459 7
d467 2
a468 2
					   &kblock[i],
					   &keys[i].key);
d471 14
a484 1
   }
d486 7
d494 5
a498 15
   if(ret) {
	for (i = 0; i < num_keys; ++i)
	    krb5_free_keyblock_contents (context->context, &kblock[i]);
	free(kblock);
	_kadm5_free_keys (context->context, num_keys, keys);
	return ret;
   }
   
   _kadm5_free_keys (context->context, ent->keys.len, ent->keys.val);
   ent->keys.val = keys;
   ent->keys.len = num_keys;
   *new_keys     = kblock;
   *n_keys       = num_keys;

   return 0;
@


