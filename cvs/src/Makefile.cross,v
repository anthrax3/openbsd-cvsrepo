head	1.97;
access;
symbols
	OPENBSD_6_1:1.93.0.4
	OPENBSD_6_1_BASE:1.93
	OPENBSD_6_0:1.85.0.2
	OPENBSD_6_0_BASE:1.85
	OPENBSD_5_9:1.83.0.2
	OPENBSD_5_9_BASE:1.83
	OPENBSD_5_8:1.78.0.4
	OPENBSD_5_8_BASE:1.78
	OPENBSD_5_7:1.75.0.2
	OPENBSD_5_7_BASE:1.75
	OPENBSD_5_6:1.72.0.4
	OPENBSD_5_6_BASE:1.72
	OPENBSD_5_5:1.68.0.4
	OPENBSD_5_5_BASE:1.68
	OPENBSD_5_4:1.66.0.2
	OPENBSD_5_4_BASE:1.66
	OPENBSD_5_3:1.60.0.2
	OPENBSD_5_3_BASE:1.60
	OPENBSD_5_2:1.53.0.2
	OPENBSD_5_2_BASE:1.53
	OPENBSD_5_1_BASE:1.50
	OPENBSD_5_1:1.50.0.2
	OPENBSD_5_0:1.46.0.2
	OPENBSD_5_0_BASE:1.46
	OPENBSD_4_9:1.41.0.2
	OPENBSD_4_9_BASE:1.41
	OPENBSD_4_8:1.32.0.2
	OPENBSD_4_8_BASE:1.32
	OPENBSD_4_7:1.29.0.2
	OPENBSD_4_7_BASE:1.29
	OPENBSD_4_6:1.26.0.6
	OPENBSD_4_6_BASE:1.26
	OPENBSD_4_5:1.26.0.2
	OPENBSD_4_5_BASE:1.26
	OPENBSD_4_4:1.25.0.2
	OPENBSD_4_4_BASE:1.25
	OPENBSD_4_3:1.24.0.4
	OPENBSD_4_3_BASE:1.24
	OPENBSD_4_2:1.24.0.2
	OPENBSD_4_2_BASE:1.24
	OPENBSD_4_1:1.23.0.2
	OPENBSD_4_1_BASE:1.23
	OPENBSD_4_0:1.19.0.2
	OPENBSD_4_0_BASE:1.19
	OPENBSD_3_9:1.13.0.2
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.8.0.2
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.7.0.2
	OPENBSD_3_7_BASE:1.7;
locks; strict;
comment	@# @;


1.97
date	2017.09.12.08.16.13;	author mpi;	state Exp;
branches;
next	1.96;
commitid	GJcAWOLErfJ64zzu;

1.96
date	2017.08.11.19.36.37;	author drahn;	state Exp;
branches;
next	1.95;
commitid	SKPtsalmvYlqiWdi;

1.95
date	2017.06.08.18.33.08;	author patrick;	state Exp;
branches;
next	1.94;
commitid	W7QGs74z3gxSKAVy;

1.94
date	2017.05.23.14.57.30;	author patrick;	state Exp;
branches;
next	1.93;
commitid	36k735AIu3HKYTOE;

1.93
date	2017.03.21.10.41.33;	author patrick;	state Exp;
branches;
next	1.92;
commitid	UJHI8slsjDqTzWt9;

1.92
date	2017.01.27.13.38.40;	author jsg;	state Exp;
branches;
next	1.91;
commitid	FvHbKCSL7YLW9InR;

1.91
date	2017.01.20.05.00.53;	author patrick;	state Exp;
branches;
next	1.90;
commitid	CXVH4tTF05O5C6Wn;

1.90
date	2017.01.04.17.26.02;	author patrick;	state Exp;
branches;
next	1.89;
commitid	uWcZQ3448Hwego4v;

1.89
date	2016.12.18.17.03.08;	author patrick;	state Exp;
branches;
next	1.88;
commitid	dJhYvMBq53KEebIA;

1.88
date	2016.09.23.09.18.05;	author sthen;	state Exp;
branches;
next	1.87;
commitid	ki8tj1Td5fsEXoy5;

1.87
date	2016.09.03.13.37.39;	author guenther;	state Exp;
branches;
next	1.86;
commitid	6T3r4QcMFKe3Fo5T;

1.86
date	2016.08.10.14.27.15;	author deraadt;	state Exp;
branches;
next	1.85;
commitid	nJ2GKPOeS3xtih2N;

1.85
date	2016.05.11.21.52.48;	author deraadt;	state Exp;
branches;
next	1.84;
commitid	VpgRpYXqYSJy4P7J;

1.84
date	2016.03.09.16.28.44;	author deraadt;	state Exp;
branches;
next	1.83;
commitid	OSDG2O3Cgeifnf1W;

1.83
date	2015.12.08.16.04.41;	author tobiasu;	state Exp;
branches;
next	1.82;
commitid	viGaCvmbgk0aAamz;

1.82
date	2015.12.01.08.13.29;	author deraadt;	state Exp;
branches;
next	1.81;
commitid	pJfT5kYsmeGT25jh;

1.81
date	2015.12.01.07.50.03;	author deraadt;	state Exp;
branches;
next	1.80;
commitid	Rh8AZFtVMVCiwPts;

1.80
date	2015.11.14.23.56.48;	author deraadt;	state Exp;
branches;
next	1.79;
commitid	BrKaQHWTbuUdYB4P;

1.79
date	2015.11.10.03.10.53;	author uebayasi;	state Exp;
branches;
next	1.78;
commitid	NzEJsftUQSOdm1k6;

1.78
date	2015.06.05.21.48.35;	author tobiasu;	state Exp;
branches;
next	1.77;
commitid	pQNXjhb37U1u40Gt;

1.77
date	2015.06.01.17.36.17;	author miod;	state Exp;
branches;
next	1.76;
commitid	MPvATu4lQ8RLIXjC;

1.76
date	2015.05.28.18.23.11;	author miod;	state Exp;
branches;
next	1.75;
commitid	TUNIsCNk7seLBLCq;

1.75
date	2015.02.08.00.15.22;	author uebayasi;	state Exp;
branches;
next	1.74;
commitid	wu6QfGRnHaQ6k1EQ;

1.74
date	2014.10.09.03.40.12;	author lteo;	state Exp;
branches;
next	1.73;
commitid	ppUDueQQy1VK3lyM;

1.73
date	2014.08.24.20.04.10;	author deraadt;	state Exp;
branches;
next	1.72;
commitid	q4JDHRFDEnW1jCLw;

1.72
date	2014.07.16.01.23.39;	author deraadt;	state Exp;
branches;
next	1.71;
commitid	uuLCw8EfCrthMi2Z;

1.71
date	2014.05.09.20.14.18;	author miod;	state Exp;
branches;
next	1.70;

1.70
date	2014.04.23.18.24.23;	author ajacoutot;	state Exp;
branches;
next	1.69;

1.69
date	2014.03.18.22.36.27;	author miod;	state Exp;
branches;
next	1.68;

1.68
date	2013.09.04.14.43.27;	author patrick;	state Exp;
branches;
next	1.67;

1.67
date	2013.08.06.19.11.53;	author miod;	state Exp;
branches;
next	1.66;

1.66
date	2013.07.06.17.52.57;	author miod;	state Exp;
branches;
next	1.65;

1.65
date	2013.07.05.21.29.51;	author miod;	state Exp;
branches;
next	1.64;

1.64
date	2013.04.04.10.45.33;	author jasper;	state Exp;
branches;
next	1.63;

1.63
date	2013.03.25.17.33.02;	author deraadt;	state Exp;
branches;
next	1.62;

1.62
date	2013.03.25.17.22.10;	author deraadt;	state Exp;
branches;
next	1.61;

1.61
date	2013.03.10.08.50.42;	author miod;	state Exp;
branches;
next	1.60;

1.60
date	2013.02.02.13.38.41;	author miod;	state Exp;
branches;
next	1.59;

1.59
date	2013.01.05.11.20.52;	author miod;	state Exp;
branches;
next	1.58;

1.58
date	2012.11.13.20.59.43;	author miod;	state Exp;
branches;
next	1.57;

1.57
date	2012.11.13.20.51.57;	author miod;	state Exp;
branches;
next	1.56;

1.56
date	2012.08.23.06.22.51;	author deraadt;	state Exp;
branches;
next	1.55;

1.55
date	2012.08.14.20.14.35;	author matthew;	state Exp;
branches;
next	1.54;

1.54
date	2012.08.02.13.38.38;	author okan;	state Exp;
branches;
next	1.53;

1.53
date	2012.07.13.15.54.10;	author jsing;	state Exp;
branches;
next	1.52;

1.52
date	2012.06.20.18.45.44;	author matthew;	state Exp;
branches;
next	1.51;

1.51
date	2012.04.06.14.55.51;	author jsing;	state Exp;
branches;
next	1.50;

1.50
date	2011.11.12.18.32.35;	author jasper;	state Exp;
branches;
next	1.49;

1.49
date	2011.11.11.12.26.54;	author drahn;	state Exp;
branches;
next	1.48;

1.48
date	2011.09.23.08.09.20;	author guenther;	state Exp;
branches;
next	1.47;

1.47
date	2011.09.18.09.02.18;	author kettenis;	state Exp;
branches;
next	1.46;

1.46
date	2011.08.05.09.28.39;	author kettenis;	state Exp;
branches;
next	1.45;

1.45
date	2011.07.27.14.47.17;	author kettenis;	state Exp;
branches;
next	1.44;

1.44
date	2011.07.07.19.27.15;	author deraadt;	state Exp;
branches;
next	1.43;

1.43
date	2011.07.05.00.15.03;	author drahn;	state Exp;
branches;
next	1.42;

1.42
date	2011.06.16.10.09.51;	author mpi;	state Exp;
branches;
next	1.41;

1.41
date	2010.10.17.08.44.15;	author djm;	state Exp;
branches;
next	1.40;

1.40
date	2010.09.25.17.45.13;	author drahn;	state Exp;
branches;
next	1.39;

1.39
date	2010.09.24.14.04.06;	author miod;	state Exp;
branches;
next	1.38;

1.38
date	2010.09.23.19.00.48;	author pirofti;	state Exp;
branches;
next	1.37;

1.37
date	2010.09.20.11.49.39;	author syuu;	state Exp;
branches;
next	1.36;

1.36
date	2010.09.20.04.49.08;	author drahn;	state Exp;
branches;
next	1.35;

1.35
date	2010.09.09.19.46.39;	author drahn;	state Exp;
branches;
next	1.34;

1.34
date	2010.09.09.17.32.44;	author drahn;	state Exp;
branches;
next	1.33;

1.33
date	2010.08.25.08.04.01;	author jsg;	state Exp;
branches;
next	1.32;

1.32
date	2010.07.09.17.36.08;	author drahn;	state Exp;
branches;
next	1.31;

1.31
date	2010.06.01.04.33.40;	author drahn;	state Exp;
branches;
next	1.30;

1.30
date	2010.05.31.17.38.03;	author drahn;	state Exp;
branches;
next	1.29;

1.29
date	2010.02.05.22.36.27;	author miod;	state Exp;
branches;
next	1.28;

1.28
date	2009.09.21.19.44.23;	author matthieu;	state Exp;
branches;
next	1.27;

1.27
date	2009.09.09.12.10.34;	author marex;	state Exp;
branches;
next	1.26;

1.26
date	2008.09.06.16.26.39;	author drahn;	state Exp;
branches;
next	1.25;

1.25
date	2008.05.13.21.15.58;	author miod;	state Exp;
branches;
next	1.24;

1.24
date	2007.08.01.21.30.08;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	2007.02.06.17.17.18;	author mickey;	state Exp;
branches;
next	1.22;

1.22
date	2006.12.19.23.17.54;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2006.10.06.20.58.15;	author miod;	state Exp;
branches;
next	1.20;

1.20
date	2006.09.27.08.38.58;	author mickey;	state Exp;
branches;
next	1.19;

1.19
date	2006.06.16.17.43.54;	author mickey;	state Exp;
branches;
next	1.18;

1.18
date	2006.06.06.00.01.49;	author drahn;	state Exp;
branches;
next	1.17;

1.17
date	2006.05.09.21.17.11;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2006.05.04.19.41.06;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2006.04.19.18.32.39;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2006.04.19.09.28.45;	author mickey;	state Exp;
branches;
next	1.13;

1.13
date	2005.12.30.16.41.23;	author grange;	state Exp;
branches;
next	1.12;

1.12
date	2005.09.18.20.42.49;	author drahn;	state Exp;
branches;
next	1.11;

1.11
date	2005.09.11.23.10.07;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2005.09.11.23.08.30;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2005.09.11.23.07.21;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2005.06.28.23.10.36;	author martin;	state Exp;
branches;
next	1.7;

1.7
date	2005.03.12.17.28.08;	author grange;	state Exp;
branches;
next	1.6;

1.6
date	2005.01.28.19.51.47;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	2005.01.20.21.35.07;	author grange;	state Exp;
branches;
next	1.4;

1.4
date	2005.01.19.18.31.34;	author grange;	state Exp;
branches;
next	1.3;

1.3
date	2005.01.12.00.06.28;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2005.01.10.17.47.15;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2005.01.09.20.36.20;	author espie;	state Exp;
branches;
next	;


desc
@@


1.97
log
@Fix cross-compiling GCC toolchains on Clang archs.

ok patrick@@
@
text
@# $OpenBSD: Makefile.cross,v 1.96 2017/08/11 19:36:37 drahn Exp $

cross-tools:	cross-includes cross-binutils cross-gcc cross-lib
cross-distrib:	cross-tools cross-bin cross-share cross-sys cross-etc-root-var
# cross-gnu \

# Have to compute TARGET_ARCH directly in the Makefile, for .if tests involving
# this variable to work.
.if	(${TARGET} == "arm64")
TARGET_ARCH=	aarch64
.elif	(${TARGET} == "armv7")
TARGET_ARCH=	arm
.elif	(${TARGET} == "luna88k")
TARGET_ARCH=	m88k
.elif	(${TARGET} == "sgi" || ${TARGET} == "octeon")
TARGET_ARCH=	mips64
.elif	(${TARGET} == "loongson")
TARGET_ARCH=	mips64el
TARGET_CPU=	mips64
.elif	(${TARGET} == "macppc" || ${TARGET} == "socppc")
TARGET_ARCH=	powerpc
.elif	(${TARGET} == "landisk")
TARGET_ARCH=	sh
.else
TARGET_ARCH=	${TARGET}
.endif
TARGET_CPU?=	${TARGET_ARCH}

# List of LP64 archs
# XXX move to bsd.*.mk?
LP64_ARCH = aarch64 amd64 alpha mips64 sparc64

TARGET_IS_LP64 =
MACHINE_IS_LP64 =
.for _ in ${LP64_ARCH}
. if !empty(TARGET_ARCH:M$_)
    TARGET_IS_LP64 = yes
. endif
. if !empty(MACHINE_ARCH:M$_)
    MACHINE_IS_LP64 = yes
. endif
.endfor

#CROSSCPPFLAGS?=	-nostdinc -I${CROSSDIR}/usr/include
#CROSSLDFLAGS?=	-nostdlib -L${CROSSDIR}/usr/lib -static
CROSSCFLAGS?=	${CROSSCPPFLAGS} -O2 ${PIPE} ${DEBUG}
CROSSCXXFLAGS?=	${CROSSCPPFLAGS}
#LDSTATIC?=	-static

CROSSDIR=	${DESTDIR}/usr/cross/${TARGET}
CROSSENV=	AR=${CROSSDIR}/usr/${TARGET_CANON}/bin/ar \
		AS=${CROSSDIR}/usr/${TARGET_CANON}/bin/as \
		CC=${CROSSDIR}/usr/${TARGET_CANON}/bin/cc \
		CPP=${CROSSDIR}/usr/${TARGET_CANON}/bin/cpp \
		CXX=${CROSSDIR}/usr/${TARGET_CANON}/bin/c++ \
		LD=${CROSSDIR}/usr/${TARGET_CANON}/bin/ld \
		OBJCOPY=${CROSSDIR}/usr/${TARGET_CANON}/bin/objcopy \
		LORDER=/usr/bin/lorder RANLIB=${CROSSDIR}/usr/${TARGET_CANON}/bin/ranlib \
		STRIP=${CROSSDIR}/usr/${TARGET_CANON}/bin/strip \
		HOSTCC=\"${CC}\" HOSTCXX=\"${CXX}\" NOMAN= \
		HOSTCFLAGS=\"${CFLAGS}\" HOSTCXXFLAGS=\"${CXXFLAGS}\" \
		HOSTLDFLAGS=\"${LDFLAGS}\" \
		CFLAGS=\"${CROSSCFLAGS}\" CPPFLAGS=\"${CROSSCPPFLAGS}\" \
		CXXFLAGS=\"${CROSSCXXFLAGS}\" \
		LDFLAGS=\"${CROSSLDFLAGS}\" \
		CROSSDIR=\"${CROSSDIR}\"
CROSSADDPATH=:${CROSSDIR}/usr/${TARGET_CANON}/bin
CROSSPATH=	/usr/bin:/bin:/usr/sbin:/sbin${CROSSADDPATH}
CROSSLANGS?=	c c++

TARGET_CANON=`cat ${CROSSDIR}/TARGET_CANON`

CROSSDIRS=	${CROSSDIR}/.dirs_done
CROSSOBJ=	${CROSSDIR}/.obj_done
CROSSINCLUDES=	${CROSSDIR}/.includes_done
CROSSBINUTILS=	${CROSSDIR}/.binutils_done
CROSSGCC=	${CROSSDIR}/.gcc_done
#NO_CROSS=	isakmpd keynote ssh

.include <bsd.own.mk>

.for _arch in ${TARGET_ARCH}
.if !empty(CLANG_ARCH:M${_arch})
COMPILER_VERSION=clang
BUILD_CLANG=yes
CC=clang
CXX=clang++
.elif !empty(GCC3_ARCH:M${_arch})
COMPILER_VERSION=gcc3
CC=gcc
CXX=g++
.else
COMPILER_VERSION=gcc4
CC=gcc
CXX=g++
.endif

.if !empty(PIE_ARCH:M${_arch})
NOPIE_FLAGS=-fno-pie
NOPIE_LDFLAGS=-nopie
PIE_DEFAULT=${DEFAULT_PIE_DEF}
.else
NOPIE_FLAGS=
PIE_DEFAULT=
.endif

BINUTILS=	ar as gasp ld nm objcopy objdump ranlib readelf size \
		strings strip
BINUTILS_DIR=gnu/usr.bin/binutils-2.17
.endfor

# no libcrypto.... these won't build
#NO_CROSS+=	dc passwd ppp tcpdump telnet ftp sasyncd vnconfig
		
# explicit cross-compile
NO_CROSS+=microcode
NO_CROSS+=groff binutils binutils-2.17 perl texinfo gcc cvs
NO_CROSS+=nsd
NO_CROSS+=bind
NO_CROSS+=unbound

cross-dirs:	${CROSSDIRS}
cross-obj:	${CROSSOBJ}
cross-includes:	${CROSSINCLUDES}
cross-binutils:	${CROSSBINUTILS}
cross-gcc:	${CROSSGCC}

cross-env:
	@@echo ${CROSSENV} MACHINE=${TARGET} \
	    MACHINE_ARCH=`cat ${CROSSDIR}/TARGET_ARCH` \
	    MACHINE_CPU=`cat ${CROSSDIR}/TARGET_CPU` \
	    BSDOBJDIR=${CROSSDIR}/usr/obj \
	    BSDSRCDIR=${.CURDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET}

${CROSSDIRS}:
.if ${TARGET_ARCH} == "arm" &&  ${MACHINE_IS_LP64} == "yes"
	# this config is allowed
.elif ${TARGET_IS_LP64} != ${MACHINE_IS_LP64}
	@@echo "host and target have different size longs"
	@@echo "cross compiler generates bad code; aborting"; exit 1
.endif
	@@-mkdir -p ${CROSSDIR}
	@@echo ${TARGET_ARCH} > ${CROSSDIR}/TARGET_ARCH
	@@echo TARGET_ARCH is `cat ${CROSSDIR}/TARGET_ARCH`
	@@echo ${TARGET_CPU} > ${CROSSDIR}/TARGET_CPU
	@@echo TARGET_CPU is `cat ${CROSSDIR}/TARGET_CPU`
	@@eval `grep '^osr=' sys/conf/newvers.sh`; \
	   echo ${TARGET_ARCH}-unknown-openbsd$$osr > \
	   ${CROSSDIR}/TARGET_CANON
	@@-mkdir -p ${CROSSDIR}
	@@-mkdir -p ${CROSSDIR}/usr/${TARGET_CANON}
	@@ln -sf ${CROSSDIR}/usr/include \
	    ${CROSSDIR}/usr/${TARGET_CANON}/include
	@@ln -sf ${CROSSDIR}/usr/lib \
	    ${CROSSDIR}/usr/${TARGET_CANON}/lib
	@@-mkdir -p ${CROSSDIR}/usr/${TARGET_CANON}/bin
	@@(cd ${.CURDIR}/etc && DESTDIR=${CROSSDIR} ${MAKE} distrib-dirs)
	@@touch ${CROSSDIRS}

${CROSSOBJ}:	${CROSSDIRS}
	@@-mkdir -p ${CROSSDIR}/usr/obj
	@@-chgrp ${WOBJGROUP} ${CROSSDIR}/usr/obj
	@@-chmod g+w ${CROSSDIR}/usr/obj
	@@(cd ${.CURDIR} && \
	    BSDOBJDIR=${CROSSDIR}/usr/obj \
	    COMPILER_VERSION=${COMPILER_VERSION} \
	    MACHINE=${TARGET} \
	    MACHINE_ARCH=${TARGET_ARCH} MACHINE_CPU=${TARGET_CPU} \
	    BSDSRCDIR=${.CURDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    ${MAKE} obj)
	@@touch ${CROSSOBJ}

${CROSSINCLUDES}:	${CROSSOBJ}
	@@-mkdir -p ${CROSSDIR}/usr/include
	@@(cd ${.CURDIR}/include && \
	    COMPILER_VERSION=${COMPILER_VERSION} \
	    MACHINE=${TARGET} \
	    MACHINE_ARCH=${TARGET_ARCH} MACHINE_CPU=${TARGET_CPU} \
	    MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    TARGET_ARCH=${TARGET_ARCH} TARGET_CPU=${TARGET_CPU} \
	    ${MAKE} prereq && \
	    COMPILER_VERSION=${COMPILER_VERSION} \
	    MACHINE=${TARGET} \
	    MACHINE_ARCH=${TARGET_ARCH} MACHINE_CPU=${TARGET_CPU} \
	    MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    TARGET_ARCH=${TARGET_ARCH} TARGET_CPU=${TARGET_CPU} \
	    ${MAKE} DESTDIR=${CROSSDIR} includes)
	@@touch ${CROSSINCLUDES}

${CROSSBINUTILS}:	${CROSSINCLUDES}
	(cd ${.CURDIR}/${BINUTILS_DIR}; \
	    env CROSSDIR=${CROSSDIR} \
	    MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    PIE_DEFAULT=${PIE_DEFAULT} \
	    TARGET_ARCH=${TARGET_ARCH} TARGET_CPU=${TARGET_CPU} \
	    PATH=${CROSSPATH} \
	    ${MAKE} -f Makefile.bsd-wrapper depend && \
	    env CROSSDIR=${CROSSDIR} \
	    CC=${CC} CXX=${CXX} \
	    MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    PIE_DEFAULT=${PIE_DEFAULT} \
	    TARGET_ARCH=${TARGET_ARCH} TARGET_CPU=${TARGET_CPU} \
	    ${MAKE} -f Makefile.bsd-wrapper all && \
	    env CROSSDIR=${CROSSDIR} DESTDIR=${CROSSDIR} \
	    COMPILER_VERSION=${COMPILER_VERSION} \
	    MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    PIE_DEFAULT=${PIE_DEFAULT} \
	    TARGET_ARCH=${TARGET_ARCH} TARGET_CPU=${TARGET_CPU} \
	    ${MAKE} -f Makefile.bsd-wrapper install)
	@@for cmd in ${BINUTILS}; do \
	 if [ -e ${CROSSDIR}/usr/bin/${TARGET_CANON}-$$cmd ] ; then \
	    cp -f ${CROSSDIR}/usr/bin/${TARGET_CANON}-$$cmd \
	        ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-$$cmd ; \
	    ln -sf ${TARGET_CANON}-$$cmd \
		${CROSSDIR}/usr/${TARGET_CANON}/bin/$$cmd ;\
	   if [ -e ${CROSSDIR}/usr/bin/$$cmd ] ; then \
	    rm -f ${CROSSDIR}/usr/bin/$$cmd ;\
	   fi ;\
	 elif [ -e ${CROSSDIR}/usr/bin/$$cmd ] ; then \
	    cp -f ${CROSSDIR}/usr/bin/$$cmd \
	        ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-$$cmd ; \
	    ln -sf ${TARGET_CANON}-$$cmd \
		${CROSSDIR}/usr/${TARGET_CANON}/bin/$$cmd ;\
	    mv ${CROSSDIR}/usr/bin/$$cmd \
		${CROSSDIR}/usr/bin/${TARGET_CANON}-$$cmd ;\
	 fi ;\
	done
	@@touch ${CROSSBINUTILS}


${CROSSGCC}:		${CROSSBINUTILS}
.if ${COMPILER_VERSION:L} == "clang"
	(cd ${.CURDIR}/gnu/usr.bin/clang; \
	    MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    MACHINE_ARCH=${TARGET_ARCH} \
	    ${MAKE} obj)
	(cd ${.CURDIR}/gnu/usr.bin/clang; \
	    CC=${CC} CXX=${CXX} \
	    MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    MACHINE_ARCH=${TARGET_ARCH} \
	    ${MAKE} all)
	(cd ${.CURDIR}/gnu/usr.bin/clang; \
	    DESTDIR=${CROSSDIR} \
	    MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    MACHINE_ARCH=${TARGET_ARCH} \
	    ${MAKE} install)
	mv ${CROSSDIR}/usr/bin/clang ${CROSSDIR}/usr/bin/${TARGET_CANON}-clang
	mv ${CROSSDIR}/usr/bin/clang++ ${CROSSDIR}/usr/bin/${TARGET_CANON}-clang++
	mv ${CROSSDIR}/usr/bin/ld ${CROSSDIR}/usr/bin/${TARGET_CANON}-ld
	cp -f ${CROSSDIR}/usr/bin/${TARGET_CANON}-clang ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-clang
	cp -f ${CROSSDIR}/usr/bin/${TARGET_CANON}-ld ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-ld
	ln -sf ${TARGET_CANON}-cc ${CROSSDIR}/usr/${TARGET_CANON}/bin/cc
	ln -sf ${TARGET_CANON}-c++ ${CROSSDIR}/usr/${TARGET_CANON}/bin/c++
	ln -sf ${TARGET_CANON}-ld ${CROSSDIR}/usr/${TARGET_CANON}/bin/ld
	echo "#!/bin/sh\n${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-clang --sysroot ${CROSSDIR} \"$$""@@\"" > ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-cc; \
	chmod +x ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-cc;
	echo "#!/bin/sh\n${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-clang --driver-mode=g++ --sysroot ${CROSSDIR} \"$$""@@\"" > ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-c++; \
	chmod +x ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-c++;
.elif ${COMPILER_VERSION:L} == "gcc3"
	(cd ${.CURDIR}/gnu/usr.bin/gcc; \
	    MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    TARGET_ARCH=${TARGET_ARCH} TARGET_CPU=${TARGET_CPU} \
	    CROSSDIR=${CROSSDIR} \
	    PATH=${CROSSPATH} ${MAKE} -f Makefile.bsd-wrapper depend && \
	    MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    TARGET_ARCH=${TARGET_ARCH} TARGET_CPU=${TARGET_CPU} \
	    CROSSDIR=${CROSSDIR} \
	    CC=${CC} CXX=${CXX} \
	    ${MAKE} -f Makefile.bsd-wrapper all && \
	    env CROSSDIR=${CROSSDIR} DESTDIR=${CROSSDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    PATH=${CROSSPATH} ${MAKE} -f Makefile.bsd-wrapper install)
	cp -f ${CROSSDIR}/usr/bin/${TARGET_CANON}-g++ ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-c++
	cp -f ${CROSSDIR}/usr/bin/gcc ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-cc
	cp -f ${CROSSDIR}/usr/libexec/cpp ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-libexeccpp
	rm -f ${CROSSDIR}/usr/bin/gcc  ${CROSSDIR}/usr/bin/cc ${CROSSDIR}/usr/libexec/cpp 
	ln -sf ${TARGET_CANON}-cc ${CROSSDIR}/usr/${TARGET_CANON}/bin/cc
	ln -sf ${TARGET_CANON}-c++ ${CROSSDIR}/usr/${TARGET_CANON}/bin/c++
	rm -f ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-cpp 
	sed -e 's#/usr/libexec/cpp#${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-libexeccpp#' \
	    -e 's/@@GNUC@@/-D__GNUC__/' \
	    -e 's#/usr/include#${CROSSDIR}/usr/include#' \
	    -e 's/@@dollaropt@@//' \
	    ${.CURDIR}/usr.bin/cpp/cpp.sh > ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-cpp 
	chmod ${BINMODE} ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-cpp 
	chown ${BINOWN}:${BINGRP} ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-cpp 
	ln -sf ${TARGET_CANON}-cpp ${CROSSDIR}/usr/${TARGET_CANON}/bin/cpp
.else
	(cd ${.CURDIR}/gnu/usr.bin/cc; \
	    env CROSSDIR=${CROSSDIR} \
	    PIE_DEFAULT=${PIE_DEFAULT} \
	    MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    TARGET_ARCH=${TARGET_ARCH} TARGET_CPU=${TARGET_CPU} \
	    MACHINE=${TARGET} \
	    PATH=${CROSSPATH} ${MAKE} depend  )
	(cd ${.CURDIR}/gnu/usr.bin/cc; \
	    env CROSSDIR=${CROSSDIR} \
	    COMPILER_VERSION=${COMPILER_VERSION} \
	    CC=${CC} CXX=${CXX} \
	    PIE_DEFAULT=${PIE_DEFAULT} \
	    MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    TARGET_ARCH=${TARGET_ARCH} TARGET_CPU=${TARGET_CPU} \
	    MACHINE=${TARGET} \
	    ${MAKE} all )
	(cd ${.CURDIR}/gnu/usr.bin/cc; \
	    env CROSSDIR=${CROSSDIR} DESTDIR=${CROSSDIR} \
	    COMPILER_VERSION=${COMPILER_VERSION} \
	    PIE_DEFAULT=${PIE_DEFAULT} \
	    MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    TARGET_ARCH=${TARGET_ARCH} TARGET_CPU=${TARGET_CPU} \
	    MACHINE=${TARGET} \
	    PATH=${CROSSPATH} ${MAKE} install)
	cp -f ${CROSSDIR}/usr/bin/g++  ${CROSSDIR}/usr/bin/${TARGET_CANON}-g++ 
	cp -f ${CROSSDIR}/usr/bin/${TARGET_CANON}-g++ ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-c++
	cp -f ${CROSSDIR}/usr/libexec/cpp ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-libexeccpp
	cp -f ${CROSSDIR}/usr/bin/gcc ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-cc
	ln -sf ${TARGET_CANON}-cc ${CROSSDIR}/usr/${TARGET_CANON}/bin/cc

	cp -f ${CROSSDIR}/usr/bin/gcc ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-cc
	rm -f ${CROSSDIR}/usr/bin/gcc  ${CROSSDIR}/usr/bin/g++  ${CROSSDIR}/usr/bin/cc ${CROSSDIR}/usr/libexec/cpp 
	# fix links
	rm -f ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-cpp 
	sed -e 's#/usr/libexec/cpp#${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-libexeccpp#' \
	    -e 's/@@GNUC@@//' \
	    -e 's#/usr/include#${CROSSDIR}/usr/include#' \
	    -e 's/@@dollaropt@@//' \
	    ${.CURDIR}/usr.bin/cpp/cpp.sh > ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-cpp 
	chmod ${BINMODE} ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-cpp 
	chown ${BINOWN}:${BINGRP} ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-cpp 
	ln -sf ${TARGET_CANON}-cpp ${CROSSDIR}/usr/${TARGET_CANON}/bin/cpp
.endif
	@@touch ${CROSSGCC}

# XXX MAKEOBJDIR maybe should be obj.${TARGET} here, revisit later
cross-lib:	${CROSSGCC}
	MACHINE=${TARGET} \
	    MACHINE_ARCH=${TARGET_ARCH} MACHINE_CPU=${TARGET_CPU} \
	    BSDOBJDIR=${CROSSDIR}/usr/obj; \
	export MACHINE MACHINE_ARCH MACHINE_CPU BSDOBJDIR; \
	(cd ${.CURDIR}/lib; \
	    for lib in csu libcompiler_rt libc; do \
	    (cd $$lib; \
	        eval ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
		    ${MAKE} depend all ;\
	        eval ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} DESTDIR=${CROSSDIR} \
		    ${MAKE} install); \
	    done; \
	    eval ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	        SKIPDIR=\"${NO_CROSS}\" \
	        ${MAKE} depend all ; \
	    eval ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} DESTDIR=${CROSSDIR} \
	        SKIPDIR=\"${NO_CROSS}\" \
	        ${MAKE} install)

cross-bin:	${CROSSOBJ}
	MACHINE=${TARGET} \
	    MACHINE_ARCH=${TARGET_ARCH} MACHINE_CPU=${TARGET_CPU}; \
	export MACHINE MACHINE_ARCH MACHINE_CPU; \
	for i in libexec bin sbin usr.bin usr.sbin; do \
	(cd ${.CURDIR}/$$i; \
	    eval ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	        SKIPDIR=\"${BINUTILS} ${NO_CROSS}\" \
	        ${MAKE} depend all ; \
	    eval ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} DESTDIR=${CROSSDIR} \
	        SKIPDIR=\"${BINUTILS} ${NO_CROSS}\" \
	        ${MAKE} install); \
	done

cross-gnu:	${CROSSOBJ}
	MACHINE=${TARGET} \
	    MACHINE_ARCH=${TARGET_ARCH} MACHINE_CPU=${TARGET_CPU}; \
	export MACHINE MACHINE_ARCH MACHINE_CPU; \
	for i in gnu/lib gnu/usr.sbin gnu/usr.bin ; do \
	(cd ${.CURDIR}/$$i; \
	    eval ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	        SKIPDIR=\"${NO_CROSS}\" \
	        ${MAKE} depend all ; \
	    eval ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} DESTDIR=${CROSSDIR} \
	        SKIPDIR=\"${NO_CROSS}\" \
	        ${MAKE} install); \
	done

cross-share:   ${CROSSOBJ}
	MACHINE=${TARGET} \
	    MACHINE_ARCH=${TARGET_ARCH} MACHINE_CPU=${TARGET_CPU}; \
	export MACHINE MACHINE_ARCH MACHINE_CPU; \
	for i in share; do \
	    (cd ${.CURDIR}/$$i; \
	        eval ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
		SKIPDIR=\"${NO_CROSS}\" \
		DESTDIR=${CROSSDIR} \
		${MAKE} depend all install); \
	done

cross-sys:   ${CROSSOBJ}
	MACHINE=${TARGET} \
	    MACHINE_ARCH=${TARGET_ARCH} MACHINE_CPU=${TARGET_CPU}; \
	export MACHINE MACHINE_ARCH MACHINE_CPU; \
	for i in sys; do \
	    (cd ${.CURDIR}/$$i; \
	        eval ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
		SKIPDIR=\"${NO_CROSS}\" \
		${MAKE} depend all); \
	    (cd ${.CURDIR}/$$i; \
	        eval ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
		SKIPDIR=\"${NO_CROSS}\" \
		DESTDIR=${CROSSDIR} \
		${MAKE} install); \
	done

cross-etc-root-var:	${CROSSOBJ}
	(cd ${.CURDIR}/etc && \
	    MACHINE=${TARGET} \
	    MACHINE_ARCH=${TARGET_ARCH} MACHINE_CPU=${TARGET_CPU} \
	    DESTDIR=${CROSSDIR} \
	    ${MAKE} distribution-etc-root-var)

cross-depend:
	@@(cd ${.CURDIR} && \
	    BSDOBJDIR=${CROSSDIR}/usr/obj \
	    BSDSRCDIR=${.CURDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    SKIPDIR="${NO_CROSS}" \
	    ${MAKE} depend)

cross-clean:
	@@(cd ${.CURDIR} && \
	    BSDOBJDIR=${CROSSDIR}/usr/obj \
	    BSDSRCDIR=${.CURDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    SKIPDIR="${NO_CROSS}" \
	    ${MAKE} clean)

cross-cleandir:
	@@(cd ${.CURDIR} && \
	    BSDOBJDIR=${CROSSDIR}/usr/obj \
	    BSDSRCDIR=${.CURDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    SKIPDIR="${NO_CROSS}" \
	    ${MAKE} cleandir)
@


1.96
log
@Fix cross builds: no clang depend target, no DESTDIR on HOSTCC build
ok patrick@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.95 2017/06/08 18:33:08 patrick Exp $
d86 2
d90 2
d94 2
d199 1
d238 1
a238 1
	    CC=clang CXX=clang++ \
d268 1
d297 2
d306 1
@


1.95
log
@Pass CC and CXX to make depend as well.  As soon as we support
dependencies in the clang makefiles we need to make sure to use
a compiler that supports C++11.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.94 2017/05/23 14:57:30 patrick Exp $
a233 5
	    ${MAKE} depend)
	(cd ${.CURDIR}/gnu/usr.bin/clang; \
	    CC=clang CXX=clang++ \
	    MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    MACHINE_ARCH=${TARGET_ARCH} \
d391 4
d396 1
a396 1
		${MAKE} depend all install); \
@


1.94
log
@Adjust cross-toolchain environment to the changes in the clang build
fabric.  Since we now also build and use LLVM's lld we can copy lld to
the proper directory akin to what we do with clang.  Build compiler-rt
early as it is needed for building libc.

"go for it" mpi@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.93 2017/03/21 10:41:33 patrick Exp $
d231 1
@


1.93
log
@Export CROSSDIR so that the two users (ld.so and binutils) of that
variable actually work correctly.  While there, adjust a bit for
consistency.

"nobody will complain if you break it ;)" kettenis@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.92 2017/01/27 13:38:40 jsg Exp $
d85 1
d235 1
d246 1
d248 1
d251 1
d333 1
a333 1
	    for lib in csu libc; do \
@


1.92
log
@We can now build parts of binutils on aarch64 so enable cross-binutils
again.

ok patrick@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.91 2017/01/20 05:00:53 patrick Exp $
d65 2
a66 1
		LDFLAGS=\"${CROSSLDFLAGS}\"
d185 1
d191 1
d196 1
a196 1
	    DESTDIR=${CROSSDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
d198 1
a199 1
	    MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
d280 1
a283 1
	    CROSSDIR=${CROSSDIR} \
d287 1
a290 1
	    CROSSDIR=${CROSSDIR} \
@


1.91
log
@Adjust cross-compilation infrastructure to cope with builduser
permission requirements.

From Dale Rahn.

ok tb@@
"commit it" guenther@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.90 2017/01/04 17:26:02 patrick Exp $
a182 1
.if ${TARGET_ARCH} != "aarch64"
a216 1
.endif
@


1.90
log
@With clang as cross-compiler we need to tell it where our cross
directory is so that the correct include and library paths are used.
For this we create a simple wrapper that calls clang in the correct
mode and also passes the sysroot.

ok kettenis@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.89 2016/12/18 17:03:08 patrick Exp $
d154 2
@


1.89
log
@Implement support for cross-compiling arm64 in Makefile.cross.  This
adds code to build clang as cross-compiler instead of gcc.  Since we
don't have binutils for aarch64 in base, skip the binutils cross-
toolchain build for that architecture.

ok kettenis@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.88 2016/09/23 09:18:05 sthen Exp $
d241 1
a241 2
	cp -f ${CROSSDIR}/usr/bin/${TARGET_CANON}-clang ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-cc
	cp -f ${CROSSDIR}/usr/bin/${TARGET_CANON}-clang++ ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-c++
d244 4
@


1.88
log
@Unhook sqlite3.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.87 2016/09/03 13:37:39 guenther Exp $
d9 3
a11 1
.if	(${TARGET} == "armv7")
d31 1
a31 1
LP64_ARCH = amd64 alpha mips64 sparc64
d82 3
a84 1
.if !empty(GCC3_ARCH:M${_arch})
d181 1
d216 1
d221 25
a245 1
.if ${COMPILER_VERSION:L} == "gcc3"
@


1.87
log
@Retire zaurus, as it hasn't made the EABI jump and will be permanently broken
shortly when we use the hardware thread register in userland
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.86 2016/08/10 14:27:15 deraadt Exp $
a106 1
NO_CROSS+=sqlite3
@


1.86
log
@armish handled some early-gen arm machines, which required tons of
workarounds.  Some of them will soon stand in the way of armv7.
Off to the attic you go.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.85 2016/05/11 21:52:48 deraadt Exp $
d9 1
a9 1
.if	(${TARGET} == "armv7" || ${TARGET} == "zaurus")
@


1.85
log
@remove hppa64 port, which we never got going beyond broken single users.
hppa reverse-stack gives us a valuable test case, but most developers don't
have a 2nd one to proceed further with this.
ok kettenis
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.84 2016/03/09 16:28:44 deraadt Exp $
d9 1
a9 2
.if	(${TARGET} == "armish" || ${TARGET} == "armv7" || \
	 ${TARGET} == "zaurus")
@


1.84
log
@We are done providing support for the vax.
lots of agreement.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.83 2015/12/08 16:04:41 tobiasu Exp $
d30 1
a30 1
LP64_ARCH = amd64 alpha hppa64 ia64 mips64 sparc64
@


1.83
log
@Restore parenthesis
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.82 2015/12/01 08:13:29 deraadt Exp $
d30 1
a30 1
LP64_ARCH = amd64 alpha hppa64 ia64 mips64 sparc64 vax64
@


1.82
log
@Send solbourne to where the ...........
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.81 2015/12/01 07:50:03 deraadt Exp $
d12 1
a12 1
.elif	${TARGET} == "luna88k")
@


1.81
log
@Send Aviion to same place as Nova II
discussed with jsg
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.80 2015/11/14 23:56:48 deraadt Exp $
a18 2
.elif	(${TARGET} == "solbourne")
TARGET_ARCH=	sparc
@


1.80
log
@libocurses can go to the Attic.  last consumer of it was ramdisk more(1)
conceptual ok guenther millert nicm
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.79 2015/11/10 03:10:53 uebayasi Exp $
d12 1
a12 1
.elif	(${TARGET} == "aviion" || ${TARGET} == "luna88k")
@


1.79
log
@Always honor ${DESTDIR}.  OK miod@@
@
text
@d1 1
a1 1
# $OpenBSD$
d304 1
a304 1
	        SKIPDIR=\"${NO_CROSS} libocurses/PSD.doc\" \
d307 1
a307 1
	        SKIPDIR=\"${NO_CROSS} libocurses/PSD.doc\" \
@


1.78
log
@Use target BSDOBJDIR when cross-compiling libraries

ok mpi@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.77 2015/06/01 17:36:17 miod Exp $
d346 1
d358 1
@


1.77
log
@Now that we do not need to build binutils 2.15 (except for gdb), simplify the
build logic.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.76 2015/05/28 18:23:11 miod Exp $
d292 3
a294 2
	    MACHINE_ARCH=${TARGET_ARCH} MACHINE_CPU=${TARGET_CPU}; \
	export MACHINE MACHINE_ARCH MACHINE_CPU; \
@


1.76
log
@Invert the binutils 2.17 logic to only list non-2.17 platforms.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.75 2015/02/08 00:15:22 uebayasi Exp $
a88 6
.if !empty(BINUTILS215_ARCH:M${_arch})
BINUTILS_VERSION=binutils
.else
BINUTILS_VERSION=binutils-2.17
.endif

d100 1
a100 1
BINUTILS_DIR=gnu/usr.bin/${BINUTILS_VERSION}
@


1.75
log
@Fix cross-build.  OK jsing@@ miod@@ guenther@@ deraadt@@
@
text
@d1 1
a1 1
# $OpenBSD$
d89 3
a91 1
.if !empty(BINUTILS217_ARCH:M${_arch})
a92 2
.else
BINUTILS_VERSION=binutils
@


1.74
log
@Remove the last gzsig tendril
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.73 2014/08/24 20:04:10 deraadt Exp $
d117 2
@


1.73
log
@more NO_CROSS
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.72 2014/07/16 01:23:39 deraadt Exp $
d110 1
a110 1
#NO_CROSS+=	dc passwd ppp tcpdump telnet ftp gzsig sasyncd vnconfig
@


1.72
log
@lynx will go to ports.  there are too many reasons for it to go there,
and not enough for it to stay.  lengthy discussions.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.71 2014/05/09 20:14:18 miod Exp $
a112 2
NO_CROSS+=bind
NO_CROSS+=httpd
a115 1
NO_CROSS+=nginx
@


1.71
log
@Make sure to override PIE_DEFAULT when building a cross-gcc4
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.70 2014/04/23 18:24:23 ajacoutot Exp $
d116 1
a116 1
NO_CROSS+=groff lynx binutils binutils-2.17 perl texinfo gcc cvs
@


1.70
log
@Remove more Kerberos cruft.

ok jca@@ jmc@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.69 2014/03/18 22:36:27 miod Exp $
d255 1
d262 1
d269 3
a271 1
	    env CROSSDIR=${CROSSDIR} DESTDIR=${CROSSDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
@


1.69
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.68 2013/09/04 14:43:27 patrick Exp $
d110 1
a110 2
#NO_CROSS+=	dc login_krb5 login_krb5-or-pwd passwd ppp tcpdump telnet \
#		ftp gzsig sasyncd vnconfig
@


1.68
log
@Beagle has been replaced by armv7.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.67 2013/08/06 19:11:53 miod Exp $
d12 1
a12 4
.elif	(${TARGET} == "hp300" || ${TARGET} == "mvme68k")
TARGET_ARCH=	m68k
.elif	(${TARGET} == "aviion" || ${TARGET} == "luna88k" || \
	 ${TARGET} == "mvme88k")
@


1.67
log
@Remove support for COMPILER_VERSION == gcc2.
Change the logic depending upon COMPILER_VERSION everywhere, to assume gcc4
is the norm and to explicitely test for gcc3 when a different behaviour
is required.
No functional change intended. Be sure to `make install' in share/mk before
attempting to do anything.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.66 2013/07/06 17:52:57 miod Exp $
d9 1
a9 1
.if	(${TARGET} == "armish" || ${TARGET} == "beagle" || \
@


1.66
log
@tabs got lost in previous rev
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.65 2013/07/05 21:29:51 miod Exp $
d86 3
a88 3
.if !empty(GCC2_ARCH:M${_arch})
COMPILER_VERSION=gcc2
.elif !empty(GCC4_ARCH:M${_arch})
a89 2
.else
COMPILER_VERSION=gcc3
d230 2
a231 2
.if ${COMPILER_VERSION:L} == "gcc4"
	(cd ${.CURDIR}/gnu/usr.bin/cc; \
d235 1
a235 3
	    MACHINE=${TARGET} \
	    PATH=${CROSSPATH} ${MAKE} depend  )
	(cd ${.CURDIR}/gnu/usr.bin/cc; \
d239 1
a239 3
	    MACHINE=${TARGET} \
	    ${MAKE} all )
	(cd ${.CURDIR}/gnu/usr.bin/cc; \
d241 1
a241 4
	    TARGET_ARCH=${TARGET_ARCH} TARGET_CPU=${TARGET_CPU} \
	    MACHINE=${TARGET} \
	    PATH=${CROSSPATH} ${MAKE} install)
	cp -f ${CROSSDIR}/usr/bin/g++  ${CROSSDIR}/usr/bin/${TARGET_CANON}-g++ 
d243 1
d245 1
a245 1
	cp -f ${CROSSDIR}/usr/bin/gcc ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-cc
d247 1
a247 4

	cp -f ${CROSSDIR}/usr/bin/gcc ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-cc
	rm -f ${CROSSDIR}/usr/bin/gcc  ${CROSSDIR}/usr/bin/g++  ${CROSSDIR}/usr/bin/cc ${CROSSDIR}/usr/libexec/cpp 
	# fix links
d250 1
a250 1
	    -e 's/@@GNUC@@//' \
d257 2
a258 2
.elif ${COMPILER_VERSION:L} == "gcc3"
	(cd ${.CURDIR}/gnu/usr.bin/gcc; \
d262 3
a264 1
	    PATH=${CROSSPATH} ${MAKE} -f Makefile.bsd-wrapper depend && \
d268 3
a270 1
	    ${MAKE} -f Makefile.bsd-wrapper all && \
d272 4
a275 1
	    PATH=${CROSSPATH} ${MAKE} -f Makefile.bsd-wrapper install)
d277 1
a278 2
	cp -f ${CROSSDIR}/usr/libexec/cpp ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-libexeccpp
	rm -f ${CROSSDIR}/usr/bin/gcc  ${CROSSDIR}/usr/bin/cc ${CROSSDIR}/usr/libexec/cpp 
d280 4
a283 1
	ln -sf ${TARGET_CANON}-c++ ${CROSSDIR}/usr/${TARGET_CANON}/bin/c++
d286 1
a286 1
	    -e 's/@@GNUC@@/-D__GNUC__/' \
a292 33
.else
	(cd ${CROSSDIR}/usr/obj/gnu/egcs/gcc; \
	    /bin/sh ${.CURDIR}/gnu/egcs/gcc/configure \
	    --with-gnu-as --with-gnu-ld --prefix ${CROSSDIR}/usr \
	    --target ${TARGET_CANON} \
	    --enable-languages="c,c++" --enable-cpp --disable-nls \
	    --with-gxx-include-dir=${CROSSDIR}/usr/include/g++ && \
	    PATH=${CROSSPATH} ${MAKE} BISON=yacc LANGUAGES="${CROSSLANGS}" \
	    CFLAGS="${CFLAGS} -DOPENBSD_CROSS -I${.CURDIR}/gnu/lib/libiberty/include" \
	    LIBIBERTY_INCLUDES=${.CURDIR}/gnu/lib/libiberty/include \
	    DEMANGLER_PROG= DEMANGLE_H= LDFLAGS="${LDSTATIC}" build_infodir=. \
	    GCC_FOR_TARGET="./xgcc -B./ -I${CROSSDIR}/usr/include" && \
	    ${MAKE} BISON=yacc LANGUAGES="${CROSSLANGS}" LDFLAGS="${LDSTATIC}" \
	    GCC_FOR_TARGET="./xgcc -B./ -I${CROSSDIR}/usr/include" \
	    CFLAGS="${CFLAGS} -DOPENBSD_CROSS -I${.CURDIR}/gnu/lib/libiberty/include" \
	    LIBIBERTY_INCLUDES=${.CURDIR}/gnu/lib/libiberty/include \
	    build_infodir=. INSTALL_MAN= INSTALL_HEADERS_DIR= install)
	mv -f ${CROSSDIR}/usr/bin/cpp ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-libexeccpp
	rm -f ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-cpp 
	sed -e 's#/usr/libexec/cpp#${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-libexeccpp#' \
	    -e 's/@@GNUC@@/-D__GNUC__/' \
	    -e 's#/usr/include#${CROSSDIR}/usr/include#' \
	    -e 's/@@dollaropt@@/-$$/' ${.CURDIR}/usr.bin/cpp/cpp.sh > \
	    ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-cpp 
	chmod ${BINMODE} \
	    ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-cpp
	chown ${BINOWN}:${BINGRP}\
	    ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-cpp 
	ln -sf ${TARGET_CANON}-cpp ${CROSSDIR}/usr/${TARGET_CANON}/bin/cpp
	ln -sf gcc ${CROSSDIR}/usr/${TARGET_CANON}/bin/cc
	ln -sf gcc ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-cc
	cp -f ${CROSSDIR}/usr/bin/${TARGET_CANON}-g++ ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-c++
	ln -sf ${TARGET_CANON}-c++ ${CROSSDIR}/usr/${TARGET_CANON}/bin/c++
@


1.65
log
@ELF_TOOLCHAIN bye bye.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.64 2013/04/04 10:45:33 jasper Exp $
d142 1
a142 1
# this config is allowed
d144 2
a145 2
@@echo "host and target have different size longs"
@@echo "cross compiler generates bad code; aborting"; exit 1
@


1.64
log
@remove BIN{MODE,GRP,OWN} since bsd.own.mk is already included.

ok bmercer@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.63 2013/03/25 17:33:02 deraadt Exp $
a84 2
OLD_BINUTILS_ARCH=vax

a108 5
.if !empty(OLD_BINUTILS_ARCH:M${_arch})
NEW_BINUTILS?=	No
BINUTILS=	ar as ld nm ranlib objcopy objdump strings strip
.else
NEW_BINUTILS?=	Yes
a110 1
.endif
d142 1
a142 1
	# this config is allowed
d144 2
a145 2
	@@echo "host and target have different size longs"
	@@echo "cross compiler generates bad code; aborting"; exit 1
d196 1
a196 1
	    USING_NEW_BINUTILS=${NEW_BINUTILS} PIE_DEFAULT=${PIE_DEFAULT} \
d201 1
a201 1
	    USING_NEW_BINUTILS=${NEW_BINUTILS} PIE_DEFAULT=${PIE_DEFAULT} \
d206 1
a206 1
	    USING_NEW_BINUTILS=${NEW_BINUTILS} PIE_DEFAULT=${PIE_DEFAULT} \
a207 1
	    USING_NEW_BINUTILS=${NEW_BINUTILS} \
a209 44
.if ${NEW_BINUTILS:L} != "yes"
	(cd ${.CURDIR}/gnu/usr.bin/gas; \
	    TARGET_MACHINE_ARCH=${TARGET_ARCH} \
	    MAKEOBJDIR=obj.${MACHINE}.${TARGET} ${MAKE} depend all; \
	    TARGET_MACHINE_ARCH=${TARGET_ARCH} \
	    DESTDIR=${CROSSDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    ${MAKE} NOMAN= install)
	ln -sf ${CROSSDIR}/usr/bin/as \
	    ${CROSSDIR}/usr/${TARGET_CANON}/bin/as
	(cd ${.CURDIR}/gnu/usr.bin/ld; \
	    TARGET_MACHINE_ARCH=${TARGET_ARCH} \
	    MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    ${MAKE} NOPIC= NOMAN= depend all; \
	    TARGET_MACHINE_ARCH=${TARGET_ARCH} \
	    DESTDIR=${CROSSDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    ${MAKE} NOPIC= NOMAN= install)
	ln -sf ${CROSSDIR}/usr/bin/ld \
	    ${CROSSDIR}/usr/${TARGET_CANON}/bin/ld
	(cd ${.CURDIR}/usr.bin/ar; \
	    ELF_TOOLCHAIN=no \
	    MAKEOBJDIR=obj.${MACHINE}.${TARGET} ${MAKE} NOMAN= depend all; \
	    ELF_TOOLCHAIN=no \
	    DESTDIR=${CROSSDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    ${MAKE} NOMAN= install)
	ln -sf ${CROSSDIR}/usr/bin/ar \
	    ${CROSSDIR}/usr/${TARGET_CANON}/bin/ar
	@@(cd ${.CURDIR}/usr.bin/ranlib; \
	    ELF_TOOLCHAIN=no \
	    MAKEOBJDIR=obj.${MACHINE}.${TARGET} ${MAKE} NOMAN= depend all; \
	    ELF_TOOLCHAIN=no \
	    DESTDIR=${CROSSDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    ${MAKE} NOMAN= install)
	ln -sf ${CROSSDIR}/usr/bin/ranlib \
	    ${CROSSDIR}/usr/${TARGET_CANON}/bin/ranlib
	(cd ${.CURDIR}/usr.bin/strip; \
	    MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    ${MAKE} TARGET_MACHINE_ARCH=${TARGET_ARCH} \
	    NOMAN= depend all; \
	    DESTDIR=${CROSSDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    ${MAKE} TARGET_MACHINE_ARCH=${TARGET_ARCH} \
	    NOMAN= install)
	ln -sf ${CROSSDIR}/usr/bin/strip \
	    ${CROSSDIR}/usr/${TARGET_CANON}/bin/strip
.endif
@


1.63
log
@gumstix was never finished
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.62 2013/03/25 17:22:10 deraadt Exp $
a52 5

# XXX
BINMODE?=555
BINOWN?=root
BINGRP?=bin
@


1.62
log
@the unused palm code goes away.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.61 2013/03/10 08:50:42 miod Exp $
d10 1
a10 1
	 ${TARGET} == "gumstix" || ${TARGET} == "zaurus")
@


1.61
log
@Allow the PIE/NOPIE variables in bsd.own.mk to be overriden. Force proper
values in Makefile.cross to make sure binutils are built with the proper
PIE_DEFAULT value for the target.
ok millert@@ deraadt@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.60 2013/02/02 13:38:41 miod Exp $
d10 1
a10 2
	 ${TARGET} == "gumstix" || ${TARGET} == "palm" || \
	 ${TARGET} == "zaurus")
@


1.60
log
@m68k ports are now ELF citizens.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.59 2013/01/05 11:20:52 miod Exp $
d108 9
d210 1
a210 1
	    USING_NEW_BINUTILS=${NEW_BINUTILS} \
d215 1
a215 1
	    USING_NEW_BINUTILS=${NEW_BINUTILS} \
d220 1
a220 1
	    USING_NEW_BINUTILS=${NEW_BINUTILS} \
@


1.59
log
@Switch m88k ports to ELF.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.58 2012/11/13 20:59:43 miod Exp $
d91 1
a91 1
OLD_BINUTILS_ARCH=m68k vax
@


1.58
log
@Pass -DOPENBSD_CROSS to CFLAGS when cross-compiling gcc2. Temporary bandaid
until we get rid of it. Soon.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.57 2012/11/13 20:51:57 miod Exp $
d91 1
a91 1
OLD_BINUTILS_ARCH=m68k m88k vax
@


1.57
log
@Make COMPILER_VERSION a definitive assignment in there, for it to override
<bsd.own.mk>. Allows cross-gcc to be built on a host using a different compiler
version than the target.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.56 2012/08/23 06:22:51 deraadt Exp $
d353 1
a353 1
	    CFLAGS="${CFLAGS} -I${.CURDIR}/gnu/lib/libiberty/include" \
d359 1
a359 1
	    CFLAGS="${CFLAGS} -I${.CURDIR}/gnu/lib/libiberty/include" \
@


1.56
log
@no need to know about afs, since it is gone
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.55 2012/08/14 20:14:35 matthew Exp $
d95 1
a95 1
COMPILER_VERSION?=gcc2
d97 1
a97 1
COMPILER_VERSION?=gcc4
d99 1
a99 1
COMPILER_VERSION?=gcc3
@


1.55
log
@Garbage collect the USE_GCC variables; everything uses
COMPILER_VERSION now.

From Brad.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.54 2012/08/02 13:38:38 okan Exp $
a122 2
# need host setup for ydr
NO_CROSS+=afs
@


1.54
log
@remove leftover NOLINT, WANTLINT, LINTFLAGS, LOBJ vars and lint targets.

ok guenther@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.53 2012/07/13 15:54:10 jsing Exp $
a94 2
USE_GCC3?=no
TARGET_USE_GCC3=No
a96 1
TARGET_USE_GCC4=Yes
a98 1
TARGET_USE_GCC3=Yes
@


1.53
log
@Add sqlite3 to NO_CROSS since it depends on libreadline - this would then
require cross-gnu to build before we can build cross-bin.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.51 2012/04/06 14:55:51 jsing Exp $
d396 1
a396 1
		    ${MAKE} WANTLINT=no depend all ;\
d398 1
a398 1
		    ${MAKE} WANTLINT=no install); \
d402 1
a402 1
	        ${MAKE} WANTLINT=no depend all ; \
d405 1
a405 1
	        ${MAKE} WANTLINT=no install)
@


1.52
log
@more mac68k bits for the attic
@
text
@d136 1
@


1.51
log
@Do not try to cross build nginx, since it does not work.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.49 2011/11/11 12:26:54 drahn Exp $
d13 1
a13 2
.elif	(${TARGET} == "hp300" || ${TARGET} == "mac68k" || \
	 ${TARGET} == "mvme68k")
@


1.50
log
@- add avr32 which'll use gcc4/binutils-2.17
- remove BINUTILS217_ARCH from Makefile.cross as bsd.own.mk is included there
  (requested by drahn@@)

ok drahn@@ deraadt@@
@
text
@d136 1
@


1.49
log
@Allow 64bit -> arm cross compilation as it appears safe (amd64 -> arm at least)
include bsd.own.mk to get the correct compiler architectures
(if only Makefile.cross is used)
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.48 2011/09/23 08:09:20 guenther Exp $
a91 1
BINUTILS217_ARCH=hppa64 ia64
@


1.48
log
@Detect word-size mismatches between host and target, which result in
the cross compiler generating bad code, and abort

ok deraadt@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.47 2011/09/18 09:02:18 kettenis Exp $
d90 2
a91 2
GCC2_ARCH=m68k m88k sparc vax
GCC4_ARCH=amd64 hppa hppa64 i386 ia64 mips64* powerpc sparc64
d152 3
a154 1
.if ${TARGET_IS_LP64} != ${MACHINE_IS_LP64}
@


1.47
log
@ia64 should use gcc4; sort the list of binutils-2.17 platforms while I'm there

ok jsing@@, miod@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.46 2011/08/05 09:28:39 kettenis Exp $
d35 15
d152 4
@


1.46
log
@Switch hppa64 cross compiling environment to gcc4.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.45 2011/07/27 14:47:17 kettenis Exp $
d76 2
a77 2
GCC4_ARCH=amd64 hppa hppa64 i386 mips64* powerpc sparc64
BINUTILS217_ARCH=ia64 hppa64
@


1.45
log
@Switch hppa64 to binutils-2.17
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.44 2011/07/07 19:27:15 deraadt Exp $
d76 1
a76 1
GCC4_ARCH=amd64 hppa i386 mips64* powerpc sparc64
@


1.44
log
@remove mvmeppc; it is really rough shape.  ok drahn miod
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.43 2011/07/05 00:15:03 drahn Exp $
d77 1
a77 1
BINUTILS217_ARCH=ia64
@


1.43
log
@Allow switching between binutils and binutils 2.17.
NOTE: binutils-2.17 has not been tested on any archs. ok pirofti@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.42 2011/06/16 10:09:51 mpi Exp $
d26 1
a26 2
.elif	(${TARGET} == "macppc" || ${TARGET} == "mvmeppc" || \
	 ${TARGET} == "socppc")
@


1.42
log
@Typo, BINOWN -> BINGRP

ok miod@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.41 2010/10/17 08:44:15 djm Exp $
d76 8
a83 3
# bsd.own.mk can't do it for us
.if ${TARGET_ARCH} == "m68k" || ${TARGET_ARCH} == "m88k" || \
    ${TARGET_ARCH} == "sparc" || ${TARGET_ARCH} == "vax"
d85 2
a86 4
COMPILER_VERSION=gcc2
.elif ${TARGET_ARCH} == "amd64" || ${TARGET_ARCH} == "hppa" || \
    ${TARGET_ARCH} == "i386" || ${TARGET_ARCH:Mmips64*} || \
    ${TARGET_ARCH} == "powerpc" || ${TARGET_ARCH} == "sparc64"
d88 1
a88 1
COMPILER_VERSION=gcc4
d91 1
a91 1
COMPILER_VERSION=gcc3
d94 17
d121 1
a121 1
NO_CROSS+=groff lynx binutils perl texinfo gcc cvs
a183 10
.if (${TARGET_ARCH} == "m68k" || ${TARGET_ARCH} == "m88k" || \
     ${TARGET_ARCH} == "vax")
BINUTILS=	ar as ld nm ranlib objcopy objdump strings strip
NEW_BINUTILS?=	No
.else
BINUTILS=	ar as gasp ld nm objcopy objdump ranlib readelf size \
		strings strip
NEW_BINUTILS?=	Yes
.endif

d185 1
a185 1
	(cd ${.CURDIR}/gnu/usr.bin/binutils; \
@


1.41
log
@unlink libsectok from the build; ok markus@@ deraadt@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.40 2010/09/25 17:45:13 drahn Exp $
d45 1
a45 1
BINOWN?=bin
@


1.40
log
@Copy the right bits to the right places for gcc4.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.39 2010/09/24 14:04:06 miod Exp $
d74 1
a74 1
#NO_CROSS=	isakmpd keynote sectok ssh
@


1.39
log
@Switch mips-based ports to gcc4. Most of the work has been done by kettenis@@.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.38 2010/09/23 19:00:48 pirofti Exp $
d276 1
d279 1
a279 1
	rm -f ${CROSSDIR}/usr/bin/gcc  ${CROSSDIR}/usr/bin/cc ${CROSSDIR}/usr/libexec/cpp 
d281 4
a284 1
	ln -sf ${TARGET_CANON}-c++ ${CROSSDIR}/usr/${TARGET_CANON}/bin/c++
@


1.38
log
@Remove tn3270 reference.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.37 2010/09/20 11:49:39 syuu Exp $
d82 2
a83 2
    ${TARGET_ARCH} == "i386" || ${TARGET_ARCH} == "powerpc" || \
    ${TARGET_ARCH} == "sparc64"
@


1.37
log
@add octeon as cross build target arch. ok miod@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.36 2010/09/20 04:49:08 drahn Exp $
d74 1
a74 1
#NO_CROSS=	isakmpd tn3270 keynote sectok ssh
@


1.36
log
@nsd uses configure, so put it in NO_CROSS for now.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.35 2010/09/09 19:46:39 drahn Exp $
d19 1
a19 1
.elif	(${TARGET} == "sgi")
@


1.35
log
@Sigh, check in the actual diff, not a backout of th previous change.
Use TARGET_ARCH, not MACHINE_ARCH. Fix from Tobias Ulmer. ok jsg@@ jasper@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.33 2010/08/25 08:04:01 jsg Exp $
d102 1
@


1.34
log
@Use TARGET_ARCH, not MACHINE_ARCH. Fix from Tobias Ulmer. ok jsg@@ jasper@@
@
text
@d81 3
a83 1
.elif ${TARGET_ARCH} == "amd64" || ${TARGET_ARCH} == "sparc64"
@


1.33
log
@sync the list of gcc4 archs with bsd.own.mk
ok miod@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.32 2010/07/09 17:36:08 drahn Exp $
d81 1
a81 3
.elif ${MACHINE_ARCH} == "amd64" || ${MACHINE_ARCH} == "hppa" || \
    ${MACHINE_ARCH} == "i386" || ${MACHINE_ARCH} == "powerpc" || \
    ${MACHINE_ARCH} == "sparc64"
@


1.32
log
@Fix cross build problem with cpp, marex pointed out that it wasn't committed.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.31 2010/06/01 04:33:40 drahn Exp $
d81 3
a83 1
.elif ${TARGET_ARCH} == "amd64" || ${TARGET_ARCH} == "sparc64"
@


1.31
log
@Initial attempt at being COMPILER_VERSION and gcc4 compatible.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.30 2010/05/31 17:38:03 drahn Exp $
d280 1
d307 1
d334 1
@


1.30
log
@moko goes away.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.29 2010/02/05 22:36:27 miod Exp $
d76 13
d137 1
d147 1
d153 1
d183 1
d215 1
a215 1
	(cd ${.CURDIR}/usr.bin/ranlib; \
a252 7
# bsd.own.mk can't do it for us
.if ${TARGET_ARCH} == "m68k" || ${TARGET_ARCH} == "m88k" || \
    ${TARGET_ARCH} == "sparc" || ${TARGET_ARCH} == "vax"
TARGET_USE_GCC3=No
.else
TARGET_USE_GCC3=Yes
.endif
d255 32
a286 1
.if ${TARGET_USE_GCC3:L} == "yes"
@


1.29
log
@Force MACHINE_CPU when building cross-toolchain or cross-building. This allows
loongson cross-tools to be configured correctly.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.28 2009/09/21 19:44:23 matthieu Exp $
d10 2
a11 2
	 ${TARGET} == "gumstix" || ${TARGET} == "moko" || \
	 ${TARGET} == "palm" || ${TARGET} == "zaurus")
@


1.28
log
@Add all arm based architectures. ok miod@@.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.27 2009/09/09 12:10:34 marex Exp $
d21 3
d34 1
d97 1
d105 2
d108 1
a108 1
	   sed "s/\$$/-unknown-openbsd$$osr/" ${CROSSDIR}/TARGET_ARCH > \
d125 1
a125 1
	    MACHINE_ARCH=${TARGET_ARCH} \
d133 2
a134 1
	    MACHINE=${TARGET} MACHINE_ARCH=${TARGET_ARCH} \
d136 1
a136 1
	    TARGET_ARCH=${TARGET_ARCH} \
d138 2
a139 1
	    MACHINE=${TARGET} MACHINE_ARCH=${TARGET_ARCH} \
d141 1
a141 1
	    TARGET_ARCH=${TARGET_ARCH} \
d159 2
a160 1
	    TARGET_ARCH=${TARGET_ARCH} PATH=${CROSSPATH} \
d164 1
a164 1
	    TARGET_ARCH=${TARGET_ARCH} \
d168 3
d248 2
a249 1
	    TARGET_ARCH=${TARGET_ARCH} CROSSDIR=${CROSSDIR} \
d252 2
a253 1
	    TARGET_ARCH=${TARGET_ARCH} CROSSDIR=${CROSSDIR} \
d308 3
a310 2
	MACHINE=${TARGET} MACHINE_ARCH=${TARGET_ARCH}; \
	export MACHINE MACHINE_ARCH; \
d327 3
a329 2
	MACHINE=${TARGET} MACHINE_ARCH=${TARGET_ARCH}; \
	export MACHINE MACHINE_ARCH; \
d341 3
a343 2
	MACHINE=${TARGET} MACHINE_ARCH=${TARGET_ARCH}; \
	export MACHINE MACHINE_ARCH; \
d355 3
a357 2
	MACHINE=${TARGET} MACHINE_ARCH=`cat ${CROSSDIR}/TARGET_ARCH`; \
	export MACHINE MACHINE_ARCH; \
d366 3
a368 2
	MACHINE=${TARGET} MACHINE_ARCH=`cat ${CROSSDIR}/TARGET_ARCH`; \
	export MACHINE MACHINE_ARCH; \
d378 4
a381 2
	    MACHINE=${TARGET} MACHINE_ARCH=${TARGET_ARCH} \
	    DESTDIR=${CROSSDIR} ${MAKE} distribution-etc-root-var)
@


1.27
log
@Palm: Integration into the tree

OK deraadt@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.26 2008/09/06 16:26:39 drahn Exp $
d9 3
a11 2
.if	(${TARGET} == "armish" || ${TARGET} == "zaurus" || \
	 ${TARGET} == "palm")
@


1.26
log
@Try to clean up the cross build environment, more of the tree cross builds now
ok miod@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.25 2008/05/13 21:15:58 miod Exp $
d9 2
a10 1
.if	(${TARGET} == "armish" || ${TARGET} == "zaurus")
@


1.25
log
@socppc is powerpc
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.24 2007/08/01 21:30:08 deraadt Exp $
d4 2
a5 1
cross-distrib:	cross-tools cross-bin cross-etc-root-var
d30 3
a32 3
CROSSCPPFLAGS?=	-nostdinc -I${CROSSDIR}/usr/include
CROSSLDFLAGS?=	-nostdlib -L${CROSSDIR}/usr/lib -static
CROSSCFLAGS?=	${CROSSCPPFLAGS}
d34 6
a39 1
LDSTATIC?=	-static
d42 10
a51 7
CROSSENV=	AR=${CROSSDIR}/usr/bin/ar AS=${CROSSDIR}/usr/bin/as \
		CC=${CROSSDIR}/usr/bin/cc CPP=${CROSSDIR}/usr/bin/cpp \
		CXX=${CROSSDIR}/usr/bin/c++ \
		LD=${CROSSDIR}/usr/bin/ld \
		LORDER=/usr/bin/lorder RANLIB=${CROSSDIR}/usr/bin/ranlib \
		STRIP=${CROSSDIR}/usr/bin/strip \
		HOSTCC=\"${CC}\" HOSTCXX=\"${CXX}\" NOMAN= DESTDIR=${CROSSDIR} \
d57 2
a58 1
CROSSPATH=	${PATH}:${CROSSDIR}/usr/bin
d64 5
a68 6
CROSSOBJ=	${CROSSDIR}/usr/obj/.obj_done
CROSSINCLUDES=	${CROSSDIR}/usr/include/.includes_done
CROSSBINUTILS=	${CROSSDIR}/usr/bin/.binutils_done
CROSSGCC=	${CROSSDIR}/usr/bin/.gcc_done
NO_CROSS=	isakmpd tn3270 less sudo openssl libkeynote libssl \
		keynote sectok ssh
d71 3
a73 1
NO_CROSS+=	dc login_krb5 login_krb5-or-pwd passwd ppp tcpdump telnet
d78 3
d148 1
a148 1
	    TARGET_ARCH=${TARGET_ARCH} \
d202 15
a216 11
	 if [ ! -e ${CROSSDIR}/usr/bin/$$cmd -a \
	 -e ${CROSSDIR}/usr/bin/${TARGET_CANON}-$$cmd ]; then \
	    ln -sf ${TARGET_CANON}-$$cmd ${CROSSDIR}/usr/bin/$$cmd ;\
	 elif [ -e ${CROSSDIR}/usr/bin/$$cmd -a \
	 ! -e ${CROSSDIR}/usr/bin/${TARGET_CANON}-$$cmd ]; then \
	    ln -sf $$cmd ${CROSSDIR}/usr/bin/${TARGET_CANON}-$$cmd; \
	 fi ;\
	 if [ -e ${CROSSDIR}/usr/bin/$$cmd -a \
	 ! -e ${CROSSDIR}/usr/${TARGET_CANON}/bin/$$cmd ]; then \
	    ln -sf ${CROSSDIR}/usr/bin/$$cmd \
	        ${CROSSDIR}/usr/${TARGET_CANON}/bin/$$cmd; \
d234 1
a234 1
	    ${MAKE} -f Makefile.bsd-wrapper depend && \
d238 16
a253 5
	    DESTDIR=${CROSSDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    ${MAKE} -f Makefile.bsd-wrapper install)
	ln -sf ${TARGET_CANON}-g++ ${CROSSDIR}/usr/bin/c++
	ln -sf ${CROSSDIR}/usr/libexec/cpp \
	    ${CROSSDIR}/usr/bin/cpp
d271 3
a273 6
	ln -sf ${TARGET_CANON}-gcc ${CROSSDIR}/usr/bin/cc
	ln -sf ${TARGET_CANON}-g++ ${CROSSDIR}/usr/bin/c++
	${INSTALL} -c -o ${BINOWN} -g ${BINGRP} -m ${BINMODE} \
	    ${CROSSDIR}/usr/obj/gnu/egcs/gcc/cpp \
	    ${CROSSDIR}/usr/libexec/cpp
	sed -e 's#/usr/libexec/cpp#${CROSSDIR}/usr/libexec/cpp#' \
d275 11
a285 4
	    -e 's/@@dollaropt@@/-$$/' \
	    ${.CURDIR}/usr.bin/cpp/cpp.sh > ${CROSSDIR}/usr/bin/cpp
	chmod ${BINMODE} ${CROSSDIR}/usr/bin/cpp
	chown ${BINOWN}:${BINGRP} ${CROSSDIR}/usr/bin/cpp
d297 3
a299 1
		    ${MAKE} WANTLINT=no depend all install); \
d303 4
a306 1
	        ${MAKE} WANTLINT=no depend all install)
d315 37
a351 1
	        ${MAKE} depend all install); \
@


1.24
log
@another cats remnant
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.23 2007/02/06 17:17:18 mickey Exp $
d20 2
a21 1
.elif	(${TARGET} == "macppc" || ${TARGET} == "mvmeppc")
@


1.23
log
@feed bsdsrc/objdir and makeobjdir in cross-env allowing make obj and the like to work on random directories; found w/ rainerx0r; drahn@@ ok
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.22 2006/12/19 23:17:54 deraadt Exp $
d8 1
a8 1
.if	(${TARGET} == "armish" || ${TARGET} == "cats" || ${TARGET} == "zaurus")
@


1.22
log
@missing TARGET_ARCH handling (solbourne)
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.21 2006/10/06 20:58:15 miod Exp $
d75 3
a77 1
	    MACHINE_ARCH=`cat ${CROSSDIR}/TARGET_ARCH`
@


1.21
log
@Early bits for a 32-bit SuperH toolchain, currently for little-endian
systems only; more work is necessary in ld land.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.20 2006/09/27 08:38:58 mickey Exp $
d18 2
@


1.20
log
@alpha is gcc3 now
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.19 2006/06/16 17:43:54 mickey Exp $
d20 2
@


1.19
log
@typoo
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.18 2006/06/06 00:01:49 drahn Exp $
d197 1
a197 2
.if ${TARGET_ARCH} == "alpha" || \
    ${TARGET_ARCH} == "m68k" || ${TARGET_ARCH} == "m88k" || \
@


1.18
log
@System build pieces for armish arch.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.17 2006/05/09 21:17:11 miod Exp $
d8 1
a8 1
.if	(${TARGET} == "armish" | ${TARGET} == "cats" || ${TARGET} == "zaurus")
@


1.17
log
@Administrative changes for aviion, ok deraadt@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.16 2006/05/04 19:41:06 miod Exp $
d8 1
a8 1
.if	(${TARGET} == "cats" || ${TARGET} == "zaurus")
@


1.16
log
@Install binutils objdump on a.out cross-tools; ok grange@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.15 2006/04/19 18:32:39 miod Exp $
d13 2
a14 1
.elif	(${TARGET} == "luna88k" || ${TARGET} == "mvme88k")
@


1.15
log
@make sure cross-as and cross-ranlib get compiled again for a.out platforms.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.14 2006/04/19 09:28:45 mickey Exp $
a122 1
.if ${NEW_BINUTILS:L} == "yes"
d125 1
d129 1
d133 1
d135 1
a135 1
.else
@


1.14
log
@photurisd is nomore; from Michael Knudsen
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.13 2005/12/30 16:41:23 grange Exp $
d152 1
d154 1
d160 1
d162 1
@


1.13
log
@Disable lint for libraries.

ok deraadt@@ espie@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.12 2005/09/18 20:42:49 drahn Exp $
d53 1
a53 1
		photurisd keynote sectok ssh
@


1.12
log
@Fix cross-etc-root-var, pick up target etc files, simplied fix from PR4511
ok grange@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.11 2005/09/11 23:10:07 miod Exp $
d251 1
a251 1
		    ${MAKE} depend all install); \
d255 1
a255 1
	        ${MAKE} depend all install)
@


1.11
log
@Compute TARGET_ARCH in the Makefile, rather than in a shell, and use it
instead of MACHINE_ARCH to pick compiler and binutils versions.

looked at mickey@@ grange@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.10 2005/09/11 23:08:30 miod Exp $
d269 1
@


1.10
log
@Create proper symlink for a.out as.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.9 2005/09/11 23:07:21 miod Exp $
d6 17
d38 1
a38 1
		HOSTLDFLAGS=\"${LDFLAGS} \" \
a45 1
TARGET_ARCH=`cat ${CROSSDIR}/TARGET_ARCH`
d74 1
a74 16
	@@case ${TARGET} in \
		alpha|amd64|hppa|hppa64|i386|m68k|m88k|powerpc|sparc|sparc64|vax) \
			echo ${TARGET} ;;\
		amiga|hp300|mac68k|mvme68k) \
			echo m68k ;;\
		luna88k|mvme88k) \
			echo m88k ;;\
		macppc|mvmeppc) \
			echo powerpc ;;\
		sgi) \
			echo mips64 ;;\
		cats|zaurus) \
			echo arm ;;\
		*) \
			(echo Unknown arch ${TARGET} >&2) ; exit 1;; \
	esac > ${CROSSDIR}/TARGET_ARCH
d112 2
a113 2
.if ${MACHINE_ARCH} == "m68k" || ${MACHINE_ARCH} == "m88k" || \
    ${MACHINE_ARCH} == "vax"
d190 3
a192 3
.if ${MACHINE_ARCH} == "alpha" || \
    ${MACHINE_ARCH} == "m68k" || ${MACHINE_ARCH} == "m88k" || \
    ${MACHINE_ARCH} == "sparc" || ${MACHINE_ARCH} == "vax"
@


1.9
log
@Create a correct /usr/bin/cpp for a.out platforms.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.8 2005/06/28 23:10:36 martin Exp $
d140 1
a140 1
	    ${CROSSDIR}/usr/${TARGET_ARCH}/bin/as
@


1.8
log
@telnetd is gone
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.7 2005/03/12 17:28:08 grange Exp $
d235 1
@


1.7
log
@Kill \n at EOF.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.6 2005/01/28 19:51:47 mickey Exp $
d40 1
a40 2
NO_CROSS+=	telnetd login_krb5 login_krb5-or-pwd dc passwd telnet ppp \
		tcpdump
@


1.6
log
@match gcc3 logic from bsd.own.mk and add a target_arch generation for arm
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.5 2005/01/20 21:35:07 grange Exp $
a289 1

@


1.5
log
@No need for cross nm/size in cross-env, our host tools are good enough.

ok mickey@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.4 2005/01/19 18:31:34 grange Exp $
d70 2
d190 5
a194 4
.if ${TARGET} == "amd64" || ${TARGET} == "cats" || \
    ${TARGET} == "hppa" || ${TARGET} == "hppa64" || \
    ${TARGET} == "i386" || \
    ${TARGET} == "sparc64" || ${TARGET} == "sgi"
a195 2
.else
TARGET_USE_GCC3=No
@


1.4
log
@Unbreak cross-tools by providing TARGET_ARCH in include target
to get right config.status file for binutils and gcc.

ok mickey@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.3 2005/01/12 00:06:28 espie Exp $
d16 1
a16 1
		LD=${CROSSDIR}/usr/bin/ld NM=${CROSSDIR}/usr/bin/nm \
d18 1
a18 1
		SIZE=${CROSSDIR}/usr/bin/size STRIP=${CROSSDIR}/usr/bin/strip \
@


1.3
log
@less confusing `TARGET_USE_GCC3' since it's only used locally.
Okay niklas@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.2 2005/01/10 17:47:15 espie Exp $
d102 1
d106 1
@


1.2
log
@- introduce TARGET_CANON/TARGET_ARCH shell variables, to make things slightly
clearer.

- don't put full path into symlinks that don't change directory.

- add a few NO_CROSS directories: stuff that depends on libcrypto, stuff
that needs host tools, and stuff that wants cross-configure.

okay niklas@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.cross,v 1.1 2005/01/09 20:36:20 espie Exp $
d190 1
a190 1
USE_GCC3=yes
d192 1
a192 1
USE_GCC3=no
d196 1
a196 1
.if ${USE_GCC3:L} == "yes"
@


1.1
log
@move cross-stuff into its own file.
okay mickey@@, niklas@@
@
text
@d1 1
a1 1
# $OpenBSD$
d28 3
d39 8
d78 1
a78 1
	@@-mkdir -p ${CROSSDIR}/usr/`cat ${CROSSDIR}/TARGET_CANON`
d80 1
a80 1
	    ${CROSSDIR}/usr/`cat ${CROSSDIR}/TARGET_CANON`/include
d82 2
a83 2
	    ${CROSSDIR}/usr/`cat ${CROSSDIR}/TARGET_CANON`/lib
	@@-mkdir -p ${CROSSDIR}/usr/`cat ${CROSSDIR}/TARGET_CANON`/bin
d92 1
a92 1
	    MACHINE_ARCH=`cat ${CROSSDIR}/TARGET_ARCH` \
d100 1
a100 1
	    MACHINE=${TARGET} MACHINE_ARCH=`cat ${CROSSDIR}/TARGET_ARCH` \
d103 1
a103 1
	    MACHINE=${TARGET} MACHINE_ARCH=`cat ${CROSSDIR}/TARGET_ARCH` \
d122 1
a122 1
	    TARGET_ARCH=`cat ${CROSSDIR}/TARGET_ARCH` \
d125 1
a125 1
	    TARGET_ARCH=`cat ${CROSSDIR}/TARGET_ARCH` \
d131 1
a131 1
	    TARGET_MACHINE_ARCH=`cat ${CROSSDIR}/TARGET_ARCH` \
d133 1
a133 1
	    TARGET_MACHINE_ARCH=`cat ${CROSSDIR}/TARGET_ARCH` \
d137 1
a137 1
	    ${CROSSDIR}/usr/`cat ${CROSSDIR}/TARGET_CANON`/bin/as
d139 1
a139 1
	    TARGET_MACHINE_ARCH=`cat ${CROSSDIR}/TARGET_ARCH` \
d142 1
a142 1
	    TARGET_MACHINE_ARCH=`cat ${CROSSDIR}/TARGET_ARCH` \
d146 1
a146 1
	    ${CROSSDIR}/usr/`cat ${CROSSDIR}/TARGET_CANON`/bin/ld
d152 1
a152 1
	    ${CROSSDIR}/usr/`cat ${CROSSDIR}/TARGET_CANON`/bin/ar
d158 1
a158 1
	    ${CROSSDIR}/usr/`cat ${CROSSDIR}/TARGET_CANON`/bin/ranlib
d161 1
a161 1
	    ${MAKE} TARGET_MACHINE_ARCH=`cat ${CROSSDIR}/TARGET_ARCH` \
d164 1
a164 1
	    ${MAKE} TARGET_MACHINE_ARCH=`cat ${CROSSDIR}/TARGET_ARCH` \
d167 1
a167 1
	    ${CROSSDIR}/usr/`cat ${CROSSDIR}/TARGET_CANON`/bin/strip
d171 2
a172 3
	 -e ${CROSSDIR}/usr/bin/`cat ${CROSSDIR}/TARGET_CANON`-$$cmd ]; then \
	    ln -sf ${CROSSDIR}/usr/bin/`cat ${CROSSDIR}/TARGET_CANON`-$$cmd \
	        ${CROSSDIR}/usr/bin/$$cmd ;\
d174 2
a175 3
	 ! -e ${CROSSDIR}/usr/bin/`cat ${CROSSDIR}/TARGET_CANON`-$$cmd ]; then \
	    ln -sf ${CROSSDIR}/usr/bin/$$cmd \
	        ${CROSSDIR}/usr/bin/`cat ${CROSSDIR}/TARGET_CANON`-$$cmd; \
d178 1
a178 1
	 ! -e ${CROSSDIR}/usr/`cat ${CROSSDIR}/TARGET_CANON`/bin/$$cmd ]; then \
d180 1
a180 1
	        ${CROSSDIR}/usr/`cat ${CROSSDIR}/TARGET_CANON`/bin/$$cmd; \
d199 1
a199 1
	    TARGET_ARCH=`cat ${CROSSDIR}/TARGET_ARCH` CROSSDIR=${CROSSDIR} \
d202 1
a202 1
	    TARGET_ARCH=`cat ${CROSSDIR}/TARGET_ARCH` CROSSDIR=${CROSSDIR} \
d206 1
a206 2
	ln -sf ${CROSSDIR}/usr/bin/`cat ${CROSSDIR}/TARGET_CANON`-g++ \
	    ${CROSSDIR}/usr/bin/c++
d213 1
a213 1
	    --target `cat ${CROSSDIR}/TARGET_CANON` \
d226 2
a227 4
	ln -sf ${CROSSDIR}/usr/bin/`cat ${CROSSDIR}/TARGET_CANON`-gcc \
	    ${CROSSDIR}/usr/bin/cc
	ln -sf ${CROSSDIR}/usr/bin/`cat ${CROSSDIR}/TARGET_CANON`-g++ \
	    ${CROSSDIR}/usr/bin/c++
d241 1
a241 1
	MACHINE=${TARGET} MACHINE_ARCH=`cat ${CROSSDIR}/TARGET_ARCH`; \
d254 1
a254 1
	MACHINE=${TARGET} MACHINE_ARCH=`cat ${CROSSDIR}/TARGET_ARCH`; \
@

