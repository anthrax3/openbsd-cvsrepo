head	1.21;
access;
symbols
	OPENBSD_5_1_BASE:1.20
	OPENBSD_5_1:1.20.0.18
	OPENBSD_5_0:1.20.0.16
	OPENBSD_5_0_BASE:1.20
	OPENBSD_4_9:1.20.0.14
	OPENBSD_4_9_BASE:1.20
	OPENBSD_4_8:1.20.0.12
	OPENBSD_4_8_BASE:1.20
	OPENBSD_4_7:1.20.0.8
	OPENBSD_4_7_BASE:1.20
	OPENBSD_4_6:1.20.0.10
	OPENBSD_4_6_BASE:1.20
	OPENBSD_4_5:1.20.0.6
	OPENBSD_4_5_BASE:1.20
	OPENBSD_4_4:1.20.0.4
	OPENBSD_4_4_BASE:1.20
	OPENBSD_4_3:1.20.0.2
	OPENBSD_4_3_BASE:1.20
	OPENBSD_4_2:1.16.0.4
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.16.0.2
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.12.0.10
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.8
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.6
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.4
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.12.0.2
	OPENBSD_3_6_BASE:1.12
	OPENBSD_3_5:1.11.0.6
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.4
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.11.0.2
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.4.0.8
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.21
date	2012.04.06.15.54.58;	author jsing;	state dead;
branches;
next	1.20;

1.20
date	2007.10.22.16.45.20;	author chl;	state Exp;
branches;
next	1.19;

1.19
date	2007.10.20.17.18.32;	author krw;	state Exp;
branches;
next	1.18;

1.18
date	2007.09.14.14.29.20;	author chl;	state Exp;
branches;
next	1.17;

1.17
date	2007.09.11.15.25.14;	author gilles;	state Exp;
branches;
next	1.16;

1.16
date	2007.02.18.20.16.04;	author ray;	state Exp;
branches;
next	1.15;

1.15
date	2007.02.18.18.56.33;	author ray;	state Exp;
branches;
next	1.14;

1.14
date	2007.02.18.18.52.34;	author ray;	state Exp;
branches;
next	1.13;

1.13
date	2006.11.02.18.07.56;	author ray;	state Exp;
branches;
next	1.12;

1.12
date	2004.07.17.02.14.33;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2003.03.13.09.09.27;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2002.12.16.07.01.33;	author tdeval;	state Exp;
branches;
next	1.9;

1.9
date	2002.06.09.08.13.09;	author todd;	state Exp;
branches;
next	1.8;

1.8
date	2002.05.22.21.23.49;	author tdeval;	state Exp;
branches;
next	1.7;

1.7
date	2002.04.19.00.15.28;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.29.14.26.59;	author tdeval;	state Exp;
branches;
next	1.5;

1.5
date	2001.12.29.21.54.57;	author tdeval;	state Exp;
branches;
next	1.4;

1.4
date	2000.01.07.14.51.41;	author peter;	state Exp;
branches;
next	1.3;

1.3
date	99.07.30.14.45.32;	author peter;	state Exp;
branches;
next	1.2;

1.2
date	99.02.16.21.51.39;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	99.01.11.14.49.44;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Put raidctl in the attic.
@
text
@/*	$OpenBSD: rf_configure.c,v 1.20 2007/10/22 16:45:20 chl Exp $	*/
/*	$NetBSD: rf_configure.c,v 1.14 2001/02/04 21:05:42 christos Exp $	*/

/*
 * Copyright (c) 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Mark Holland
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

/***************************************************************
 *
 * rf_configure.c -- code related to configuring the RAIDframe system
 *
 * configuration is complicated by the fact that we want the same
 * driver to work both in the kernel and at user level.  In the
 * kernel, we can't read the configuration file, so we configure
 * by running a user-level program that reads the config file,
 * creates a data structure describing the configuration and
 * passes it into the kernel via an ioctl.  Since we want the config
 * code to be common between the two versions of the driver, we
 * configure using the same two-step process when running at
 * user level.  Of course, at user level, the config structure is
 * passed directly to the config routine, rather than via ioctl.
 *
 * This file is not compiled into the kernel, so we have no
 * need for KERNEL ifdefs.
 *
 **************************************************************/

#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <strings.h>
#include <sys/types.h>
#include <sys/stat.h>
#include "rf_raid.h"
#include "rf_raidframe.h"
#include "rf_general.h"
#include "rf_decluster.h"
#include "rf_configure.h"

/* so much for #include <ansidecl.h> */
#ifdef __GNUCC__
#define	ATTRIBUTE_UNUSED	__attribute__ ((__unused__))
#else
#define	ATTRIBUTE_UNUSED
#endif

/*
 * XXX we include this here so we don't need to drag rf_debugMem.c into
 * the picture...  This is userland, afterall...
 */

/*
 * XXX sucky hack to override the defn. of RF_Malloc as given in
 * rf_debugMem.c...  but I *really* don't want (nor need) to link with
 * that file here in userland..  GO
*/

#undef RF_Malloc
#define RF_Malloc(_p_, _size_, _cast_) \
  { \
     _p_ = _cast_ malloc((u_long)_size_); \
     bzero((char *)_p_, _size_); \
  }

int     distSpareYes = 1;
int     distSpareNo = 0;

/* The mapsw[] table below contains all the various RAID types that might
   be supported by the kernel.  The actual supported types are found
   in sys/dev/raidframe/rf_layout.c. */

static RF_LayoutSW_t mapsw[] = {
	/* parity declustering */
	{'T', "Parity declustering",
	 rf_MakeLayoutSpecificDeclustered, &distSpareNo},
	/* parity declustering with distributed sparing */
	{'D', "Distributed sparing parity declustering",
	 rf_MakeLayoutSpecificDeclustered, &distSpareYes},
	/* declustered P+Q */
	{'Q', "Declustered P+Q",
	 rf_MakeLayoutSpecificDeclustered, &distSpareNo},
	/* RAID 5 with rotated sparing */
	{'R', "RAID Level 5 rotated sparing", rf_MakeLayoutSpecificNULL, NULL},
	/* Chained Declustering */
	{'C', "Chained Declustering", rf_MakeLayoutSpecificNULL, NULL},
	/* Interleaved Declustering */
	{'I', "Interleaved Declustering", rf_MakeLayoutSpecificNULL, NULL},
	/* RAID level 0 */
	{'0', "RAID Level 0", rf_MakeLayoutSpecificNULL, NULL},
	/* RAID level 1 */
	{'1', "RAID Level 1", rf_MakeLayoutSpecificNULL, NULL},
	/* RAID level 4 */
	{'4', "RAID Level 4", rf_MakeLayoutSpecificNULL, NULL},
	/* RAID level 5 */
	{'5', "RAID Level 5", rf_MakeLayoutSpecificNULL, NULL},
	/* Evenodd */
	{'E', "EvenOdd", rf_MakeLayoutSpecificNULL, NULL},
	/* Declustered Evenodd */
	{'e', "Declustered EvenOdd",
	 rf_MakeLayoutSpecificDeclustered, &distSpareNo},
	/* parity logging */
	{'L', "Parity logging", rf_MakeLayoutSpecificNULL, NULL},
	/* end-of-list marker */
	{'\0', NULL, NULL, NULL}
};
RF_LayoutSW_t *
rf_GetLayout(RF_ParityConfig_t parityConfig)
{
	RF_LayoutSW_t *p;

	/* look up the specific layout */
	for (p = &mapsw[0]; p->parityConfig; p++)
		if (p->parityConfig == parityConfig)
			break;
	if (!p->parityConfig)
		return (NULL);
	RF_ASSERT(p->parityConfig == parityConfig);
	return (p);
}

int rf_search_file_for_start_of(const char *string, char *buf,
    int len, FILE * fp);
int rf_get_next_nonblank_line(char *buf, int len, FILE *fp,
    const char *errmsg);

/*
 * called from user level to read the configuration file and create
 * a configuration control structure.  This is used in the user-level
 * version of the driver, and in the user-level program that configures
 * the system via ioctl.
 */
int
rf_MakeConfig(char *configname, RF_Config_t *cfgPtr)
{
  int numscanned, val, r, c, retcode, aa, bb, cc;
  char buf[256], buf1[256], *cp;
  RF_LayoutSW_t *lp;
  FILE *fp;

  bzero((char *)cfgPtr, sizeof(RF_Config_t));

  fp = fopen(configname, "r");
  if (!fp) {
    RF_ERRORMSG1("Can't open config file %s\n",configname);
    return(-1);
  }
  rewind(fp);
  if (rf_search_file_for_start_of("array", buf, sizeof(buf), fp)) {
    RF_ERRORMSG1("Unable to find start of \"array\" params in config file %s\n",configname);
		retcode = -1;
		goto out;
  }
  rf_get_next_nonblank_line(buf, sizeof(buf), fp,
      "Config file error (\"array\" section):  unable to get numRow and numCol\n");

  /*
         * wackiness with aa, bb, cc to get around size problems on
         * different platforms
   */
  numscanned = sscanf(buf,"%d %d %d", &aa, &bb, &cc);
  if (numscanned != 3) {
    RF_ERRORMSG("Config file error (\"array\" section):  unable to get numRow, numCol, numSpare\n");
		retcode = -1;
		goto out;
  }
  cfgPtr->numRow = (RF_RowCol_t)aa;
  cfgPtr->numCol = (RF_RowCol_t)bb;
  cfgPtr->numSpare = (RF_RowCol_t)cc;

  /* debug section is optional */
  for (c=0; c<RF_MAXDBGV; c++)
    cfgPtr->debugVars[c][0] = '\0';
  rewind(fp);
  if (!rf_search_file_for_start_of("debug", buf, sizeof(buf), fp)) {
    for (c=0; c < RF_MAXDBGV; c++) {
			if (rf_get_next_nonblank_line(buf, sizeof(buf), fp, NULL))
				break;
      cp = rf_find_non_white(buf);
			if (!strncmp(cp, "START", strlen("START")))
				break;
      strlcpy(&cfgPtr->debugVars[c][0], cp, RF_MAXDBGVLEN);
    }
  }
  rewind(fp);
  strlcpy(cfgPtr->diskQueueType,"fifo", sizeof(RF_DiskQueueType_t));
  cfgPtr->maxOutstandingDiskReqs = 1;
  /* scan the file for the block related to disk queues */
  if (rf_search_file_for_start_of("queue",buf,sizeof(buf),fp)) {
    RF_ERRORMSG2("[No disk queue discipline specified in config file %s.  Using %s.]\n",configname, cfgPtr->diskQueueType);
  } else {
    if (rf_get_next_nonblank_line(buf, sizeof(buf), fp, NULL)) {
      RF_ERRORMSG2("[No disk queue discipline specified in config file %s.  Using %s.]\n",configname, cfgPtr->diskQueueType);
    }
  }

	/* the queue specifier line contains two entries: 1st char of first
	 * word specifies queue to be used 2nd word specifies max num reqs
	 * that can be outstanding on the disk itself (typically 1) */
  if (sscanf(buf,"%s %d",buf1,&val)!=2) {
    RF_ERRORMSG1("Can't determine queue type and/or max outstanding reqs from line: %s",buf);
    RF_ERRORMSG2("Using %s-%d\n", cfgPtr->diskQueueType, cfgPtr->maxOutstandingDiskReqs);
  } else {
		char *ch;
		bcopy(buf1, cfgPtr->diskQueueType,
		    RF_MIN(sizeof(cfgPtr->diskQueueType), strlen(buf1) + 1));
		for (ch = buf1; *ch; ch++) {
			if (*ch == ' ') {
				*ch = '\0';
        break;
      }
    }
    cfgPtr->maxOutstandingDiskReqs = val;
  }

  rewind(fp);

  if (rf_search_file_for_start_of("disks",buf,sizeof(buf),fp)) {
    RF_ERRORMSG1("Can't find \"disks\" section in config file %s\n",configname);
		retcode = -1;
		goto out;
  }
  for (r=0; r<cfgPtr->numRow; r++) {
    for (c=0; c<cfgPtr->numCol; c++) {
			if (rf_get_next_nonblank_line(
			    &cfgPtr->devnames[r][c][0], 50, fp, NULL)) {
	RF_ERRORMSG2("Config file error: unable to get device file for disk at row %d col %d\n",r,c);
				retcode = -1;
				goto out;
      }
    }
  }

  /* "spare" section is optional */
  rewind(fp);
	if (rf_search_file_for_start_of("spare", buf, sizeof(buf), fp))
		cfgPtr->numSpare = 0;
  for (c = 0; c < cfgPtr->numSpare; c++) {
		if (rf_get_next_nonblank_line(&cfgPtr->spare_names[c][0],
		    sizeof(cfgPtr->spare_names[c]), fp, NULL)) {
      RF_ERRORMSG1("Config file error: unable to get device file for spare disk %d\n",c);
			retcode = -1;
			goto out;
    }
  }

  /* scan the file for the block related to layout */
  rewind(fp);
  if (rf_search_file_for_start_of("layout",buf,sizeof(buf),fp)) {
    RF_ERRORMSG1("Can't find \"layout\" section in configuration file %s\n",configname);
		retcode = -1;
		goto out;
  }
  if (rf_get_next_nonblank_line(buf, sizeof(buf), fp, NULL)) {
    RF_ERRORMSG("Config file error (\"layout\" section): unable to find common layout param line\n");
		retcode = -1;
		goto out;
  }
  c = sscanf(buf,"%d %d %d %c", &aa, &bb, &cc, &cfgPtr->parityConfig);
  cfgPtr->sectPerSU = (RF_SectorNum_t)aa;
  cfgPtr->SUsPerPU = (RF_StripeNum_t)bb;
  cfgPtr->SUsPerRU = (RF_StripeNum_t)cc;
  if (c != 4) {
    RF_ERRORMSG("Unable to scan common layout line\n");
		retcode = -1;
		goto out;
  }
  lp = rf_GetLayout(cfgPtr->parityConfig);
  if (lp == NULL) {
		RF_ERRORMSG1("Unknown parity config '%c'\n",
		    cfgPtr->parityConfig);
    retcode = -1;
    goto out;
  }

  retcode = lp->MakeLayoutSpecific(fp, cfgPtr, lp->makeLayoutSpecificArg);
out:
  fclose(fp);
  if (retcode < 0)
    retcode = errno = EINVAL;
  else
    errno = retcode;
  return(retcode);
}


/* used in architectures such as RAID0 where there is no layout-specific
 * information to be passed into the configuration code.
 */
int
rf_MakeLayoutSpecificNULL(FILE *fp ATTRIBUTE_UNUSED, RF_Config_t *cfgPtr,
			  void *ignored ATTRIBUTE_UNUSED)
{
  cfgPtr->layoutSpecificSize = 0;
  cfgPtr->layoutSpecific     = NULL;
  return(0);
}

int
rf_MakeLayoutSpecificDeclustered(FILE *configfp, RF_Config_t *cfgPtr, void *arg)
{
  int b, v, k, r, lambda, norotate, i, val, distSpare;
  char *cfgBuf, *bdfile, *p, *smname;
  char buf[256], smbuf[256];
  FILE *fp;

  distSpare = *((int *)arg);

  /* get the block design file name */
	if (rf_get_next_nonblank_line(buf, sizeof(buf), configfp,
	    "Can't find block design file name in config file\n"))
    return(EINVAL);
  bdfile = rf_find_non_white(buf);
  bdfile[strcspn(bdfile, "\n")] = '\0';

  /* open bd file, check validity of configuration */
  if ((fp = fopen(bdfile,"r"))==NULL) {
    RF_ERRORMSG1("RAID: config error: Can't open layout table file %s\n",bdfile);
    return(EINVAL);
  }
	if (fgets(buf, sizeof(buf), fp) == NULL) {
		RF_ERRORMSG1("RAID: config error: Can't read layout from layout table file %s\n", bdfile);
		return (EINVAL);
	}
  i = sscanf(buf,"%u %u %u %u %u %u",&b,&v,&k,&r,&lambda,&norotate);
  if (i == 5)
    norotate = 0; /* no-rotate flag is optional */
  else if (i != 6) {
    RF_ERRORMSG("Unable to parse header line in block design file\n");
    return(EINVAL);
  }
	/* set the sparemap directory.  In the in-kernel version, there's a
	 * daemon that's responsible for finding the sparemaps */
  if (distSpare) {
		if (rf_get_next_nonblank_line(smbuf, sizeof(smbuf), configfp,
		    "Can't find sparemap file name in config file\n"))
      return(EINVAL);
    smname = rf_find_non_white(smbuf);
    smname[strcspn(smname, "\n")] = '\0';
	} else {
    smbuf[0] = '\0';
    smname = smbuf;
  }

  /* allocate a buffer to hold the configuration info */
	cfgPtr->layoutSpecificSize = RF_SPAREMAP_NAME_LEN +
	    6 * sizeof(int) + b * k;
  /* can't use RF_Malloc here b/c debugMem module not yet init'd */
  cfgBuf = (char *) malloc(cfgPtr->layoutSpecificSize);
  cfgPtr->layoutSpecific = (void *) cfgBuf;
  p = cfgBuf;

  /* install name of sparemap file */
  for (i=0; smname[i]; i++)
    *p++ = smname[i];
  /* pad with zeros */
  while (i<RF_SPAREMAP_NAME_LEN) {
    *p++ = '\0';
    i++;
  }

  /*
   * fill in the buffer with the block design parameters
   * and then the block design itself
   */
	*((int *) p) = b;
	p += sizeof(int);
	*((int *) p) = v;
	p += sizeof(int);
	*((int *) p) = k;
	p += sizeof(int);
	*((int *) p) = r;
	p += sizeof(int);
	*((int *) p) = lambda;
	p += sizeof(int);
	*((int *) p) = norotate;
	p += sizeof(int);

  while (fscanf(fp,"%d",&val) == 1)
    *p++ = (char) val;
  fclose(fp);
  if ((unsigned int)(p - cfgBuf) != cfgPtr->layoutSpecificSize) {
      RF_ERRORMSG2("Size mismatch creating layout specific data: is %d sb %d bytes\n",(int)(p-cfgBuf),(int)(6*sizeof(int)+b*k));
      return(EINVAL);
  }
  return(0);
}

/****************************************************************************
 *
 * utilities
 *
 ***************************************************************************/

/* finds a non-white character in the line */
char   *
rf_find_non_white(char *p)
{
	for (; *p != '\0' && (*p == ' ' || *p == '\t'); p++);
	return (p);
}

/* finds a white character in the line */
char   *
rf_find_white(char *p)
{
	for (; *p != '\0' && (*p != ' ' && *p != '\t'); p++);
	return (p);
}

/*
 * searches a file for a line that says "START string", where string is
 * specified as a parameter
 */
int
rf_search_file_for_start_of(const char *string, char *buf, int len, FILE *fp)
{
  char *p;

  while (1) {
		if (fgets(buf, len, fp) == NULL)
			return (-1);
    p = rf_find_non_white(buf);
    if (!strncmp(p, "START", strlen("START"))) {
      p = rf_find_white(p);
      p = rf_find_non_white(p);
			if (!strncmp(p, string, strlen(string)))
				return (0);
    }
  }
}

/* reads from file fp into buf until it finds an interesting line */
int
rf_get_next_nonblank_line(char *buf, int len, FILE *fp, const char *errmsg)
{
	char *p;
	int i;

	while (fgets(buf,len,fp) != NULL) {
		for(i = strlen(buf) - 1; i >= 0 && isspace(buf[i]); i--)
			buf[i] = '\0';
		p = rf_find_non_white(buf);
		if (*p == '\n' || *p == '\0' || *p == '#')
			continue;
		return(0);
	}

	if (errmsg)
		RF_ERRORMSG1("%s", errmsg);

	return(1);
}

/*
 * Allocates an array for the spare table, and initializes it from a file.
 * In the user-level version, this is called when recon is initiated.
 * When/if I move recon into the kernel, there'll be a daemon that does
 * an ioctl into RAIDframe which will block until a spare table is needed.
 * When it returns, it will read a spare table from the file system,
 * pass it into the kernel via a different ioctl, and then block again
 * on the original ioctl.
 *
 * This is specific to the declustered layout, but doesn't belong in
 * rf_decluster.c because it uses stuff that can't be compiled into
 * the kernel, and it needs to be compiled into the user-level sparemap daemon.
 *
 */
void *
rf_ReadSpareTable(RF_SparetWait_t *req, char *fname)
{
	int i, j, numFound, linecount, tableNum, tupleNum,
	    spareDisk, spareBlkOffset;
  char buf[1024], targString[100], errString[100];
  RF_SpareTableEntry_t **table;
  FILE *fp;

  /* allocate and initialize the table */
	RF_Malloc(table,
	    req->TablesPerSpareRegion * sizeof(RF_SpareTableEntry_t *),
	    (RF_SpareTableEntry_t **));
  for (i=0; i<req->TablesPerSpareRegion; i++) {
		RF_Malloc(table[i],
		    req->BlocksPerTable * sizeof(RF_SpareTableEntry_t),
		    (RF_SpareTableEntry_t *));
		for (j = 0; j < req->BlocksPerTable; j++)
			table[i][j].spareDisk =
			    table[i][j].spareBlockOffsetInSUs = -1;
  }

  /* 2.  open sparemap file, sanity check */
  if ((fp = fopen(fname,"r"))==NULL) {
		fprintf(stderr,
		    "rf_ReadSpareTable:  Can't open sparemap file %s\n", fname);
		return (NULL);
  }
	if (rf_get_next_nonblank_line(buf, 1024, fp,
	    "Invalid sparemap file:  can't find header line\n"))
    return(NULL);
  buf[strcspn(buf, "\n")] = '\0';

	snprintf(targString, sizeof targString, "fdisk %d\n", req->fcol);
	snprintf(errString, sizeof errString,
	    "Invalid sparemap file:  can't find \"fdisk %d\" line\n",
	    req->fcol);
  while (1) {
    rf_get_next_nonblank_line(buf,1024,fp,errString);
		if (!strncmp(buf, targString, strlen(targString)))
			break;
  }

  /* no more blank lines or comments allowed now */
  linecount = req->TablesPerSpareRegion * req->TableDepthInPUs;
  for (i=0; i<linecount; i++) {
		numFound = fscanf(fp, " %d %d %d %d", &tableNum, &tupleNum,
		    &spareDisk, &spareBlkOffset);
    if (numFound != 4) {
			fprintf(stderr, "Sparemap file prematurely exhausted after %d of %d lines\n", i, linecount);
			return (NULL);
    }
		RF_ASSERT(tableNum >= 0 &&
		    tableNum < req->TablesPerSpareRegion);
    RF_ASSERT(tupleNum >= 0 && tupleNum < req->BlocksPerTable);
    RF_ASSERT(spareDisk >= 0 && spareDisk < req->C);
		RF_ASSERT(spareBlkOffset >= 0 && spareBlkOffset <
		    req->SpareSpaceDepthPerRegionInSUs / req->SUsPerPU);

    table[tableNum][tupleNum].spareDisk = spareDisk;
		table[tableNum][tupleNum].spareBlockOffsetInSUs =
		    spareBlkOffset * req->SUsPerPU;
  }

  fclose(fp);
  return((void *) table);
}
@


1.20
log
@add missing header to avoid warning

"Yes please" ray@@ krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_configure.c,v 1.19 2007/10/20 17:18:32 krw Exp $	*/
@


1.19
log
@Strip trailing whitespace on input lines. Should make config files more
resistant to careless fingers. A variant of what NetBSD did to achieve the
same ends.

Feedback, suggestions & "looks good" ray@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_configure.c,v 1.18 2007/09/14 14:29:20 chl Exp $	*/
d51 1
@


1.18
log
@remove some warnings:
unused variable `variable'
`variable' might be used uninitialized in this function

ok gilles@@ ray@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_configure.c,v 1.17 2007/09/11 15:25:14 gilles Exp $	*/
d457 1
a457 2
rf_get_next_nonblank_line(char *buf, int len, FILE *fp,
			  const char *errmsg)
d459 2
a460 1
  char *p;
d462 4
a465 2
  while (fgets(buf,len,fp) != NULL) {
    p = rf_find_non_white(buf);
d468 3
a470 2
    return(0);
  }
d473 2
a474 1
  return(1);
@


1.17
log
@use strcspn to properly overwrite '\n' in fgets returned buffer

ok pyr@@, ray@@, millert@@, moritz@@, chl@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_configure.c,v 1.16 2007/02/18 20:16:04 ray Exp $	*/
d492 1
a492 1
  char buf[1024], targString[100], errString[100], *p;
@


1.16
log
@Use sizeof(buf) instead of magic numbers.

From Charles Longeau <chl at tuxfamily dot org> to tech@@ back in
November, reminded by deraadt@@.

OK moritz@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_configure.c,v 1.13 2006/11/02 18:07:56 ray Exp $	*/
d336 2
a337 4
  if ((p = strchr(bdfile, '\n')) != NULL) {
    /* strip newline char */
    *p = '\0';
  }
d361 1
a361 4
    if ((p = strchr(smname, '\n')) != NULL) {
      /* strip newline char */
      *p = '\0';
    }
d518 1
a518 2
  if ((p = strchr(buf, '\n')) != NULL)
    *p = '\0';
@


1.15
log
@Pass correct buffer size.  (sizeof(cfgPtr->spare_names[c]) != 256)

OK moritz@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_configure.c,v 1.14 2007/02/18 18:52:34 ray Exp $	*/
d171 1
a171 1
  if (rf_search_file_for_start_of("array", buf, 256, fp)) {
d176 2
a177 1
  rf_get_next_nonblank_line(buf, 256, fp, "Config file error (\"array\" section):  unable to get numRow and numCol\n");
d197 1
a197 1
  if (!rf_search_file_for_start_of("debug", buf, 256, fp)) {
d199 1
a199 1
			if (rf_get_next_nonblank_line(buf, 256, fp, NULL))
d211 1
a211 1
  if (rf_search_file_for_start_of("queue",buf,256,fp)) {
d214 1
a214 1
    if (rf_get_next_nonblank_line(buf, 256, fp, NULL)) {
d240 1
a240 1
  if (rf_search_file_for_start_of("disks",buf,256,fp)) {
d258 1
a258 1
	if (rf_search_file_for_start_of("spare", buf, 256, fp))
d271 1
a271 1
  if (rf_search_file_for_start_of("layout",buf,256,fp)) {
d276 1
a276 1
  if (rf_get_next_nonblank_line(buf, 256, fp, NULL)) {
d332 1
a332 1
	if (rf_get_next_nonblank_line(buf, 256, configfp,
d345 1
a345 1
	if (fgets(buf, 256, fp) == NULL) {
d359 1
a359 1
		if (rf_get_next_nonblank_line(smbuf, 256, configfp,
@


1.14
log
@Don't ignore buffer size argument.

OK millert@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_configure.c,v 1.13 2006/11/02 18:07:56 ray Exp $	*/
d261 1
a261 1
		    256, fp, NULL)) {
@


1.13
log
@Check for newline before truncating.

OK moritz@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_configure.c,v 1.12 2004/07/17 02:14:33 deraadt Exp $	*/
d461 1
a461 1
rf_get_next_nonblank_line(char *buf, int len ATTRIBUTE_UNUSED, FILE *fp,
d466 1
a466 1
  while (fgets(buf,256,fp) != NULL) {
@


1.12
log
@some ansi; khalek@@linuxgamers.net
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_configure.c,v 1.11 2003/03/13 09:09:27 deraadt Exp $	*/
d335 1
a335 1
  if (bdfile[strlen(bdfile)-1] == '\n') {
d337 1
a337 1
    bdfile[strlen(bdfile)-1] = '\0';
d362 1
a362 1
    if (smname[strlen(smname)-1] == '\n') {
d364 1
a364 1
      smname[strlen(smname)-1] = '\0';
d496 1
a496 1
  char buf[1024], targString[100], errString[100];
d522 2
a523 2
  if (buf[strlen(buf)-1] == '\n')
    buf[strlen(buf)-1] = '\0';
@


1.11
log
@lots of sprintf -> snprintf and strcpy -> strlcpy; checked by tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_configure.c,v 1.10 2002/12/16 07:01:33 tdeval Exp $	*/
d156 1
a156 3
rf_MakeConfig(configname, cfgPtr)
  char         *configname;
  RF_Config_t  *cfgPtr;
d312 2
a313 4
rf_MakeLayoutSpecificNULL(fp, cfgPtr, ignored)
  FILE         *fp				ATTRIBUTE_UNUSED;
  RF_Config_t  *cfgPtr;
  void         *ignored				ATTRIBUTE_UNUSED;
d321 1
a321 4
rf_MakeLayoutSpecificDeclustered(configfp, cfgPtr, arg)
  FILE         *configfp;
  RF_Config_t  *cfgPtr;
  void         *arg;
d442 1
a442 5
rf_search_file_for_start_of(string, buf, len, fp)
	const char *string;
  char  *buf;
  int    len;
  FILE  *fp;
d461 2
a462 5
rf_get_next_nonblank_line(buf, len, fp, errmsg)
  char  *buf;
  int    len					ATTRIBUTE_UNUSED;
  FILE  *fp;
	const char *errmsg;
d492 1
a492 3
rf_ReadSpareTable(req, fname)
  RF_SparetWait_t  *req;
  char             *fname;
@


1.10
log
@raidframe -> RAIDframe
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_configure.c,v 1.9 2002/06/09 08:13:09 todd Exp $	*/
d541 2
a542 2
  sprintf(targString, "fdisk %d\n", req->fcol);
	sprintf(errString,
@


1.9
log
@rm trailing whitespace
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_configure.c,v 1.8 2002/05/22 21:23:49 tdeval Exp $	*/
d33 1
a33 1
 * rf_configure.c -- code related to configuring the raidframe system
d495 1
a495 1
 * an ioctl into raidframe which will block until a spare table is needed.
@


1.8
log
@use strlcpy(3)
10x deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_configure.c,v 1.7 2002/04/19 00:15:28 miod Exp $	*/
d70 1
a70 1
/* 
d155 1
a155 1
int 
d313 1
a313 1
int 
d324 1
a324 1
int 
d382 1
a382 1
  cfgBuf = (char *) malloc(cfgPtr->layoutSpecificSize);          
d427 1
a427 1
 
d448 1
a448 1
int 
d471 1
a471 1
int 
@


1.7
log
@Do not depend upon <ansidecl.h> to compile.
Conforming to espie's evil plans, and ok espie@@ tdeval@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_configure.c,v 1.6 2002/03/29 14:26:59 tdeval Exp $	*/
d205 1
a205 1
      (void) strcpy(&cfgPtr->debugVars[c][0], cp);
d209 1
a209 1
  strcpy(cfgPtr->diskQueueType,"fifo");
@


1.6
log
@cleanup variable and parameter usage.
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_configure.c,v 1.5 2001/12/29 21:54:57 tdeval Exp $	*/
a52 1
#include <ansidecl.h>
d62 7
@


1.5
log
@Changes to support the new RAID_AUTOCONF option (-A) of RAIDFrame.
raidctl(8) man page update.

ok drahn@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_configure.c,v 1.4 2000/01/07 14:51:41 peter Exp $	*/
d53 1
d138 1
a138 1
static int rf_search_file_for_start_of(const char *string, char *buf,
d140 1
a140 1
static int rf_get_next_nonblank_line(char *buf, int len, FILE *fp,
d309 1
a309 1
  FILE         *fp;
d311 1
a311 1
  void         *ignored;
d409 1
a409 1
  if (p - cfgBuf != cfgPtr->layoutSpecificSize) {
d442 1
a442 1
static int 
d468 1
a468 1
  int    len;
@


1.4
log
@sync with Greg Oster's NetBSD chages to Jan 4th 2000.
@
text
@d1 3
a3 2
/*	$OpenBSD: rf_configure.c,v 1.3 1999/07/30 14:45:32 peter Exp $	*/
/*      $NetBSD: rf_configure.c,v 1.8 1999/08/13 03:37:42 oster Exp $   */
d64 2
a65 4

   XXX we include this here so we don't need to drag rf_debugMem.c into 
   the picture...  This is userland, afterall... 

d68 4
a71 3
/* XXX sucky hack to override the defn. of RF_Malloc as given in 
rf_debugMem.c...  but I *really* don't want (nor need) to link with 
that file here in userland..  GO
d81 2
a82 2
char   *rf_find_non_white(char *p);
char   *rf_find_white(char *p);
d84 42
d127 9
d137 2
a138 2
static int rf_search_file_for_start_of(char *string, char *buf, int len,
	FILE *fp);
d140 1
a140 1
	char *errmsg);
d142 2
a143 1
/* called from user level to read the configuration file and create
d148 2
a149 1
int rf_MakeConfig(configname, cfgPtr)
a164 1
  
d168 2
a169 1
    retcode = -1; goto out;
d172 1
d174 2
a175 1
   * wackiness with aa, bb, cc to get around size problems on different platforms
d180 2
a181 1
    retcode = -1; goto out;
d193 2
a194 1
      if (rf_get_next_nonblank_line(buf, 256, fp, NULL)) break;
d196 2
a197 1
      if (!strncmp(cp, "START", strlen("START"))) break;
a200 1
  
d213 3
a215 4
  /* the queue specifier line contains two entries:
   * 1st char of first word specifies queue to be used
   * 2nd word specifies max num reqs that can be outstanding on the disk itself (typically 1)
   */
d220 6
a225 5
    char *c;
    bcopy(buf1, cfgPtr->diskQueueType, RF_MIN(sizeof(cfgPtr->diskQueueType), strlen(buf1)+1));
    for(c=buf1;*c;c++) {
      if (*c == ' ') {
        *c = '\0';
a233 1

d236 2
a237 1
    retcode = -1; goto out;
a238 1

d241 2
a242 1
      if (rf_get_next_nonblank_line(&cfgPtr->devnames[r][c][0], 50, fp, NULL)) {
d244 2
a245 1
	retcode = -1; goto out;
d252 2
a253 1
  if (rf_search_file_for_start_of("spare",buf,256,fp)) cfgPtr->numSpare =0;
d255 2
a256 1
    if (rf_get_next_nonblank_line(&cfgPtr->spare_names[c][0], 256, fp, NULL)) {
d258 2
a259 1
      retcode = -1; goto out;
d267 2
a268 1
    retcode = -1; goto out;
d272 2
a273 1
    retcode = -1; goto out;
d281 2
a282 1
    retcode = -1; goto out;
d286 2
a287 1
    RF_ERRORMSG1("Unknown parity config '%c'\n", cfgPtr->parityConfig);
a291 2
  /* XXX who cares.. it's not going into the kernel, so we should ignore this... */
#ifndef KERNEL
a292 1
#endif
d306 2
a307 1
int rf_MakeLayoutSpecificNULL(fp, cfgPtr, ignored)
d317 2
a318 1
int rf_MakeLayoutSpecificDeclustered(configfp, cfgPtr, arg)
d331 2
a332 1
  if (rf_get_next_nonblank_line(buf,256,configfp,"Can't find block design file name in config file\n"))
a338 1

d344 4
a347 2

  fgets(buf,256,fp);
d355 2
a356 4
  
  /* set the sparemap directory.  In the in-kernel version, there's a daemon
   * that's responsible for finding the sparemaps
   */
d358 2
a359 1
    if (rf_get_next_nonblank_line(smbuf,256,configfp,"Can't find sparemap file name in config file\n"))
d366 1
a366 2
  }
  else {
d372 2
a373 1
  cfgPtr->layoutSpecificSize = RF_SPAREMAP_NAME_LEN + 6 * sizeof(int) + b * k;
d392 12
a403 6
  *( (int *) p) = b;        p += sizeof(int);
  *( (int *) p) = v;        p += sizeof(int);
  *( (int *) p) = k;        p += sizeof(int);
  *( (int *) p) = r;        p += sizeof(int);
  *( (int *) p) = lambda;   p += sizeof(int);
  *( (int *) p) = norotate; p += sizeof(int);
a414 1

d437 2
a438 1
/* searches a file for a line that says "START string", where string is
d441 3
a443 2
static int rf_search_file_for_start_of(string, buf, len, fp)
  char  *string;
d451 2
a452 1
    if (fgets(buf, len, fp) == NULL) return(-1);
d457 2
a458 1
      if (!strncmp(p, string, strlen(string))) return(0);
d464 2
a465 1
int rf_get_next_nonblank_line(buf, len, fp, errmsg)
d469 1
a469 1
  char  *errmsg;
d475 2
a476 1
    if (*p == '\n' || *p == '\0' || *p == '#') continue;
d479 2
a480 1
  if (errmsg) RF_ERRORMSG(errmsg);
d484 2
a485 1
/* Allocates an array for the spare table, and initializes it from a file.
d498 2
a499 1
void *rf_ReadSpareTable(req, fname)
d503 2
a504 1
  int i, j, numFound, linecount, tableNum, tupleNum, spareDisk, spareBlkOffset;
d510 3
a512 1
  RF_Malloc(table, req->TablesPerSpareRegion * sizeof(RF_SpareTableEntry_t *), (RF_SpareTableEntry_t **));
d514 6
a519 2
    RF_Malloc(table[i], req->BlocksPerTable * sizeof(RF_SpareTableEntry_t), (RF_SpareTableEntry_t *));
    for (j=0; j<req->BlocksPerTable; j++) table[i][j].spareDisk = table[i][j].spareBlockOffsetInSUs = -1;
d524 3
a526 1
    fprintf(stderr,"rf_ReadSpareTable:  Can't open sparemap file %s\n",fname);  return(NULL);
d528 2
a529 1
  if (rf_get_next_nonblank_line(buf,1024,fp,"Invalid sparemap file:  can't find header line\n"))
d535 3
a537 1
  sprintf(errString, "Invalid sparemap file:  can't find \"fdisk %d\" line\n",req->fcol);
d540 2
a541 1
    if (!strncmp(buf,targString,strlen(targString))) break;
d547 2
a548 1
    numFound = fscanf(fp," %d %d %d %d",&tableNum, &tupleNum, &spareDisk, &spareBlkOffset);
d550 2
a551 1
      fprintf(stderr,"Sparemap file prematurely exhausted after %d of %d lines\n",i,linecount); return(NULL);
d553 2
a554 2

    RF_ASSERT(tableNum >= 0 && tableNum < req->TablesPerSpareRegion);
d557 2
a558 1
    RF_ASSERT(spareBlkOffset >= 0 && spareBlkOffset < req->SpareSpaceDepthPerRegionInSUs / req->SUsPerPU);
d561 2
a562 1
    table[tableNum][tupleNum].spareBlockOffsetInSUs = spareBlkOffset * req->SUsPerPU;
@


1.3
log
@Update RAIDframe from NetBSD-current as of 1999/07/26.

Please note that you *must* follow the upgrade instructions at

	http://www.cs.usask.ca/staff/oster/clabel_upgrade.html

before installing the new raidctl and new kernel using this code.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_configure.c,v 1.2 1999/02/16 21:51:39 niklas Exp $	*/
/*      $NetBSD: rf_configure.c,v 1.6 1999/03/26 00:45:01 oster Exp $   */
a57 1
#include "rf_utils.h"
a60 1
#include "rf_sys.h"
d81 3
d350 17
@


1.2
log
@merge from netbsd 990213 + make compile with our includes
@
text
@d1 2
a2 3
/*	$OpenBSD: rf_configure.c,v 1.1 1999/01/11 14:49:44 niklas Exp $	*/

/*      $NetBSD: rf_configure.c,v 1.5 1999/02/04 14:50:31 oster Exp $   */
a84 4
#ifndef SIMULATE
static unsigned int dev_name2num(char *s);
static unsigned int osf_dev_name2num(char *s);
#endif
a187 9
#ifndef SIMULATE
      val = dev_name2num(&cfgPtr->devnames[r][c][0]);

      if (val < 0) {
	RF_ERRORMSG3("Config file error: can't get dev num (dev file '%s') for disk at row %d c %d\n",
		  &cfgPtr->devnames[r][c][0],r,c);
	retcode = -1; goto out;
      } else cfgPtr->devs[r][c] = val;
#endif /* !SIMULATE */
a198 8
#ifndef SIMULATE
    val = dev_name2num(&cfgPtr->spare_names[c][0]);
    if (val < 0) {
      RF_ERRORMSG2("Config file error: can't get dev num (dev file '%s') for spare disk %d\n",
		&cfgPtr->spare_names[c][0],c);
      retcode = -1; goto out;
    } else cfgPtr->spare_devs[c] = val;
#endif /* !SIMULATE */
a348 41
#ifndef SIMULATE
/* convert a device file name to a device number */
static unsigned int dev_name2num(s)
  char  *s;
{
  struct stat buf;

  if (stat(s, &buf) < 0) return(osf_dev_name2num(s));
  else return(buf.st_rdev);
}

/* converts an osf/1 style device name to a device number.  We use this
 * only if the stat of the device file fails.
 */
static unsigned int osf_dev_name2num(s)
  char  *s;
{
  int num;
  char part_ch, lun_ch;
  unsigned int bus, target, lun, part, dev_major;

  dev_major = RF_SCSI_DISK_MAJOR;
  if (sscanf(s,"/dev/rrz%d%c", &num, &part_ch) == 2) {
    bus = num>>3;
    target = num & 0x7;
    part = part_ch - 'a';
    lun = 0;
  } else if (sscanf(s,"/dev/rrz%c%d%c", &lun_ch, &num, &part_ch) == 3) {
    bus = num>>3;
    target = num & 0x7;
    part = part_ch - 'a';
    lun = lun_ch - 'a' + 1;
  } else {
    RF_ERRORMSG1("Unable to parse disk dev file name %s\n",s);
    return(-1);
  }

  return( (dev_major<<20) | (bus<<14) | (target<<10) | (lun<<6) | part );
}
#endif

@


1.1
log
@Control RAIDframe
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d3 1
a50 96
/* $Locker:  $
 * $Log: rf_configure.c,v $
 * Revision 1.1.1.2  1998/11/23 21:35:58  niklas
 * NetBSD-current 981123
 *
 * Revision 1.2  1998/11/23 00:18:40  mrg
 * fix compile errors on the alpha.
 *
 * Revision 1.1  1998/11/13 04:34:02  oster
 *
 * RAIDframe, version 1.1, from the Parallel Data Laboratory at
 * Carnegie Mellon University.  Full RAID implementation, including
 * levels 0, 1, 4, 5, 6, parity logging, and a few other goodies.
 * Ported to NetBSD by Greg Oster.
 *
 * raidctl is our userland configuration tool for RAIDframe.
 *
 * Revision 1.42  1996/08/09 18:47:47  jimz
 * major -> dev_major
 *
 * Revision 1.41  1996/07/29  14:05:12  jimz
 * fix numPUs/numRUs confusion (everything is now numRUs)
 * clean up some commenting, return values
 *
 * Revision 1.40  1996/07/27  23:36:08  jimz
 * Solaris port of simulator
 *
 * Revision 1.39  1996/07/27  18:39:45  jimz
 * cleanup sweep
 *
 * Revision 1.38  1996/07/18  22:57:14  jimz
 * port simulator to AIX
 *
 * Revision 1.37  1996/06/19  14:58:02  jimz
 * move layout-specific config parsing hooks into RF_LayoutSW_t
 * table in rf_layout.c
 *
 * Revision 1.36  1996/06/17  14:38:33  jimz
 * properly #if out RF_DEMO code
 * fix bug in MakeConfig that was causing weird behavior
 * in configuration routines (config was not zeroed at start)
 * clean up genplot handling of stacks
 *
 * Revision 1.35  1996/06/05  19:38:32  jimz
 * fixed up disk queueing types config
 * added sstf disk queueing
 * fixed exit bug on diskthreads (ref-ing bad mem)
 *
 * Revision 1.34  1996/06/03  23:28:26  jimz
 * more bugfixes
 * check in tree to sync for IPDS runs with current bugfixes
 * there still may be a problem with threads in the script test
 * getting I/Os stuck- not trivially reproducible (runs ~50 times
 * in a row without getting stuck)
 *
 * Revision 1.33  1996/06/02  17:31:48  jimz
 * Moved a lot of global stuff into array structure, where it belongs.
 * Fixed up paritylogging, pss modules in this manner. Some general
 * code cleanup. Removed lots of dead code, some dead files.
 *
 * Revision 1.32  1996/05/30  23:22:16  jimz
 * bugfixes of serialization, timing problems
 * more cleanup
 *
 * Revision 1.31  1996/05/30  11:29:41  jimz
 * Numerous bug fixes. Stripe lock release code disagreed with the taking code
 * about when stripes should be locked (I made it consistent: no parity, no lock)
 * There was a lot of extra serialization of I/Os which I've removed- a lot of
 * it was to calculate values for the cache code, which is no longer with us.
 * More types, function, macro cleanup. Added code to properly quiesce the array
 * on shutdown. Made a lot of stuff array-specific which was (bogusly) general
 * before. Fixed memory allocation, freeing bugs.
 *
 * Revision 1.30  1996/05/27  18:56:37  jimz
 * more code cleanup
 * better typing
 * compiles in all 3 environments
 *
 * Revision 1.29  1996/05/24  01:59:45  jimz
 * another checkpoint in code cleanup for release
 * time to sync kernel tree
 *
 * Revision 1.28  1996/05/18  19:51:34  jimz
 * major code cleanup- fix syntax, make some types consistent,
 * add prototypes, clean out dead code, et cetera
 *
 * Revision 1.27  1995/12/12  18:10:06  jimz
 * MIN -> RF_MIN, MAX -> RF_MAX, ASSERT -> RF_ASSERT
 * fix 80-column brain damage in comments
 *
 * Revision 1.26  1995/12/01  15:16:36  root
 * added copyright info
 *
 */


d52 3
d504 1
d509 1
a509 1
    
@

