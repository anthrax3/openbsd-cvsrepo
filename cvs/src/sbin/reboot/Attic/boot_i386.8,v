head	1.13;
access;
symbols
	OPENBSD_2_8:1.12.0.4
	OPENBSD_2_8_BASE:1.12
	OPENBSD_2_7:1.12.0.2
	OPENBSD_2_7_BASE:1.12
	OPENBSD_2_6:1.10.0.2
	OPENBSD_2_6_BASE:1.10
	OPENBSD_2_5:1.9.0.2
	OPENBSD_2_5_BASE:1.9
	OPENBSD_2_4:1.7.0.2
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.13
date	2000.11.09.03.57.32;	author deraadt;	state dead;
branches;
next	1.12;

1.12
date	2000.04.15.02.15.16;	author aaron;	state Exp;
branches;
next	1.11;

1.11
date	2000.03.18.22.56.03;	author aaron;	state Exp;
branches;
next	1.10;

1.10
date	99.06.04.02.45.23;	author aaron;	state Exp;
branches;
next	1.9;

1.9
date	98.11.11.22.19.59;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	98.11.04.22.36.42;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	98.09.23.01.20.24;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	98.09.17.04.15.00;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	98.07.11.22.46.09;	author angelos;	state Exp;
branches;
next	1.4;

1.4
date	97.09.09.21.33.45;	author weingart;	state Exp;
branches;
next	1.3;

1.3
date	96.06.29.18.24.17;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	96.06.23.14.32.07;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.43.45;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.43.45;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.13
log
@incomplete work.  moved them, repaired some, it is a giant mess
@
text
@.\"	$OpenBSD: boot_i386.8,v 1.12 2000/04/15 02:15:16 aaron Exp $
.\"
.\" Copyright (c) 1997 Tobias Weingartner
.\"
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"      This product includes software developed by Michael Shalayeff.
.\" 4. The name of the author may not be used to endorse or promote products
.\"    derived from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"

.Dd September 4, 1997
.Dt BOOT_I386 8 i386
.Os
.Sh NAME
.Nm boot
.Nd
system bootstrapping procedures
.Sh DESCRIPTION
.Ss Power fail and crash recovery
Normally, the system will reboot itself at power-up or after crashes.
An automatic consistency check of the file systems will be performed,
and unless this fails, the system will resume multi-user operations.
.Pp
.Ss Cold starts
The
.Tn "PC AT"
clones will perform a POST (Power On Self Test) upon being booted cold.
This test will find and initialize memory, keyboard, and other devices.
It will search for and initialize any extension ROMs that are present,
and then attempt to boot the operating system from an available boot
drive.
Failing this, older IBM systems came up in ROM BASIC.
.Pp
The newer
.Tn "PC AT"
clones attempt to boot off the drive specified in the BIOS setup, or
if it is an older BIOS, it will start with checking for a disk in floppy
drive A (otherwise known as drive 0) first, and failing that, attempt to
boot the hard disk C (otherwise known as hard disk controller 1, drive 0).
.Pp
.Ss Warm starts
The BIOS loads the first block (at physical location: track 0, head 0,
sector 1) off the boot device into memory, and if the last two bytes in the
block match the signature 0x55AA, the BIOS considers the block a valid
bootable drive.
The BIOS then proceeds to call the machine code program in this block.
If the BIOS is current, it will also pass the boot drive
to the boot block in register %dl.
.Pp
There are two different types of boot blocks on devices.
There is the
MBR (master boot record) and the PBR (partition boot record).
A digression
into a little piece of history will quickly give light as to why this is so.
In the beginning, the PC
.Dq architecture
came with a single or dual floppy
drives, and no hard drives.
The only type of bootable sectors on any device were the PBRs.
They were responsible for loading the rest of the operating
system from the correct device.
When hard disks came out, it was felt that
such a huge space should be able to be partitioned into separate drives,
and this is when the MBR was invented.
.Pp
The MBR relocates itself upon being loaded and invoked by the BIOS.
Embeded within the MBR is a partition table, with four partition table
entries.
The MBR code traverses this table (which was loaded with the
MBR by the BIOS), looking for an active entry, and then loads the MBR or
PBR from the disk location specified by the partition table entry.
So in reality, the MBR is nothing more than a fancy chaining PBR.
.Pp
Note: The MBR could load another MBR, which is the case when you are booting
off an extended partition.
In other words, the first block of an extended
partition is really an MBR, which will then load the corresponding MBR or PBR
out of its extended partition's partition table.
.Sh GEOMETRY TRANSLATION
.Em WARNING :
This portion of the
.Dq PC BIOS Architecture
is a mess, and a compatibility nightmare.
.Pp
The PC BIOS has an API to manipulate any disk that the BIOS happens to
support.
This interface uses 10 bits to address the cylinder, 8 bits to
address the head, and 6 bits to address the sector of a drive.
This restricts any application using the BIOS to being able to address only
1024 cylinders, 256 heads, and 63 (since the sectors are 1 based) sectors
on a disk.
These limitations proved to be fine for roughly 3 years after
the debut of hard disks on PC computers.
.Pp
Many (if not all) newer drives have many more cylinders than the BIOS API
can support, and likely more sectors per track as well.
To allow the BIOS the ability of accessing these large drives, the BIOS would
.Dq re-map
the
cylinder/head/sector of the real drive geometry into something that would
allow the applications using the BIOS to access a larger portion of the
drive, still using the restricted BIOS API.
.Pp
The reason this has become a problem is that any modern OS will use its own
drivers to access the disk drive, bypassing the BIOS completely.
However,
the MBR, PBR, and partition tables are all still written using the original
BIOS access methods.
This is for backwards compatibility to the original IBM PC!
.Pp
So the gist of it is, the MBR, PBR, and partition table need to have BIOS
geometry offsets and cylinder/head/sector values for them to be able to
load any type of operating system.
This geometry can, and likely will,
change whenever you move a disk from machine to machine, or from controller
to controller.
.Em They are controller and machine specific .
.Sh FILES
.Bl -tag -width /usr/mdec/biosboot -compact
.It Pa /bsd
system code
.It Pa /usr/mdec/mbr
system MBR image
.It Pa /usr/mdec/biosboot
system primary stage bootstrap (PBR)
.It Pa /boot
system second stage bootstrap
.El
.Sh SEE ALSO
.Xr boot 8 ,
.Xr halt 8 ,
.Xr installboot 8 ,
.Xr reboot 8 ,
.Xr shutdown 8
.Sh BUGS
The
.Dq PC BIOS Architecture
makes this process very prone to weird and
wonderful interactions between differing operating systems.
There is no published standard to the MBR and PBR,
which makes coding these a nightmare.
Somebody *please* write me a decent BIOS, and make them (the masses) use it!
@


1.12
log
@Mostly punctuation fixes.
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot_i386.8,v 1.11 2000/03/18 22:56:03 aaron Exp $
@


1.11
log
@Remove hard sentence breaks, and some other cleanup along the way.
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot_i386.8,v 1.10 1999/06/04 02:45:23 aaron Exp $
d103 1
a103 1
.Em WARNING:
@


1.10
log
@start to remove non-escaped trailing whitespace, it can confuse troff; pjanzen@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot_i386.8,v 1.9 1998/11/11 22:19:59 aaron Exp $
d54 2
a55 1
drive.  Failing this, older IBM systems came up in ROM BASIC.
d68 3
a70 2
bootable drive.  The BIOS then proceeds to call the machine code program
in this block.  If the BIOS is current, it will also pass the boot drive
d73 4
a76 2
There are two different types of boot blocks on devices.  There is the
MBR (master boot record) and the PBR (partition boot record).  A digression
d81 5
a85 3
drives, and no hard drives.  The only type of bootable sectors on any device
were the PBRs.  They were responsible for loading the rest of the operating
system from the correct device.  When hard disks came out, it was felt that
d91 2
a92 1
entries.  The MBR code traverses this table (which was loaded with the
d94 2
a95 2
PBR from the disk location specified by the partition table entry.  So
in reality, the MBR is nothing more than a fancy chaining PBR.
d98 2
a99 1
off an extended partition.  In other words, the first block of an extended
d109 4
a112 3
support.  This interface uses 10 bits to address the cylinder, 8 bits to
address the head, and 6 bits to address the sector of a drive.  This
restricts any application using the BIOS to being able to address only
d114 2
a115 1
on a disk.  These limitations proved to be fine for roughly 3 years after
d119 2
a120 2
can support, and likely more sectors per track as well.  To allow the BIOS
the ability of accessing these large drives, the BIOS would
d128 2
a129 1
drivers to access the disk drive, bypassing the BIOS completely.  However,
d131 2
a132 2
BIOS access methods.  This is for backwards compatibility to the original
IBM PC!
d136 2
a137 1
load any type of operating system.  This geometry can, and likely will,
d162 4
a165 4
wonderful interactions between differing operating systems.  There is
no published standard to the MBR and PBR, which makes coding these a
nightmare.  Somebody *please* write me a decent BIOS, and make them (the
masses) use it!
@


1.9
log
@more `` '' -> .Dq sillyness; remove redundant .Pp macros; other misc fixes
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot_i386.8,v 1.8 1998/11/04 22:36:42 aaron Exp $
d6 1
a6 1
.\" 
d20 3
a22 3
.\" 
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR 
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
d32 1
a32 1
.\" 
@


1.8
log
@be really pedantic about punctuation following -mdoc macro'd text
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot_i386.8,v 1.7 1998/09/23 01:20:24 aaron Exp $
a42 1
.Pp
a47 1
.Pp
a63 1
.Pp
d74 3
a76 1
In the beginning, the PC ``architecture'' came with a single or dual floppy
d96 3
a98 2
This portion of the ``PC BIOS Architecture'' is a mess, and a compatibility
nightmare.
d110 3
a112 1
the ability of accessing these large drives, the BIOS would ``re-map'' the
d147 3
a149 1
The ``PC BIOS Architecture'' makes this process very prone to weird and
@


1.7
log
@alphabetize SEE ALSO entries and order them numerically according to section
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot_i386.8,v 1.6 1998/09/17 04:15:00 aaron Exp $
d126 1
a126 1
.Em They are controller and machine specific.
@


1.6
log
@sbin/ man page fixes
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot_i386.8,v 1.5 1998/07/11 22:46:09 angelos Exp $
d139 1
d141 1
d143 1
a143 3
.Xr shutdown 8 ,
.Xr installboot 8 ,
.Xr boot 8
@


1.5
log
@Change the headers so those show up as boot_$ARCH
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot_i386.8,v 1.4 1997/09/09 21:33:45 weingart Exp $
d35 1
a35 1
.Dt BOOT_i386 8 i386
d42 2
a43 1
.Sy Power fail and crash recovery.
d48 2
a49 1
.Sy Cold starts.
d65 2
a66 1
.Sy Warm starts.
d72 1
a72 2
to the boot block in register
.Sy %dl.
d75 1
a75 1
MBR (master boot record), and the PBR (partition boot record).  A digression
d80 1
a80 1
system from the right device.  When hard disks came out, it was felt that
d82 1
a82 1
and this is where the MBR was invented.
d85 1
a85 1
Embeded within the MBR is a partition table, with four partitions table
d89 1
a89 1
in all reality, the MBR is nothing more than a fancy chaining PBR.
d115 1
a115 1
The reason this has become a problem, is that any modern OS will use its own
d146 1
a146 1
wonderfull interactions between differing operating systems.  There is
@


1.4
log
@Update to reality.
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot_i386.8,v 1.3 1996/06/29 18:24:17 mickey Exp $
d35 1
a35 1
.Dt BOOT 8 i386
@


1.3
log
@kernel image is bsd, not netbsd.
@
text
@d1 1
a1 2
.\"	$OpenBSD: boot_i386.8,v 1.2 1996/06/23 14:32:07 deraadt Exp $
.\"	$NetBSD: boot_i386.8,v 1.3 1995/04/23 10:33:35 cgd Exp $
d3 1
a3 5
.\" Copyright (c) 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software written and contributed
.\" to Berkeley by William Jolitz.
d5 2
d17 7
a23 9
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
d32 3
a34 4
.\"
.\"     @@(#)boot_i386.8	8.2 (Berkeley) 4/19/94
.\"
.Dd April 19, 1994
d48 9
a56 1
The 386
d58 67
a124 58
clones attempt to boot the floppy disk drive A (otherwise known as drive
0) first, and failing that, attempt to boot the hard disk C (otherwise
known as hard disk controller 1, drive 0).
The automatic boot will attempt to load
.Pa bsd
from partition A of either the floppy or the hard disk.
This boot may be aborted by typing any character on the keyboard repeatedly
(four or five times at least) during the operating system load phase, after
which the bootstrap will prompt for the file that you wish to load instead.
.Pp
One exception to this is the
.Ql d
key, which will not abort the load but instead silently force the
.Dv DEBUG
boot flags.
The boot flags for an autoboot are 0, and 3 for the successive boot after
an aborted autoboot sequence.
No other provison is made for setting boot flags (yet).
A specific device or bootstrap file may be used; for example,
.Pp
The file specifications used for the boostrap
when loaded with the
.Dq askme
flag
(e.g. an aborted autoboot)
are of the form:
.Pp
.Dl device unit partition:
.Pp
where
.Ar device
is the type of the device, assumed to be on the ISA bus, to be searched,
.Ar unit
is the unit number of the disk or tape,
and
.Ar partition
is the disk partition or tape file number.
Normal line editing characters can be used when typing the file specification.
The following list of supported devices may vary from installation to
installation:
.Bd -unfilled -offset indent
wd	ST506, IDE, ESDI, RLL disks on a WD100[2367] or lookalike
	controller
fd	5 1/4" or 3 1/2" High density floppies
.Ed
.Pp
For example,
to boot from a file system which starts at cylinder 0
of unit 0 of an IDE disk, type
.Dq Li wd0a:bsd
to the boot prompt;
.Dq Li fd0a:bsd
would specify a 3 1/2" floppy drive 0 .
.Pp
In an emergency, the bootstrap methods described in the paper
.%T "Installing and Operating 4.3 BSD-Reno UNIX on the AT/386"
can be used
to boot from a distribution tape.
d126 1
a126 1
.Bl -tag -width /bsdxx -compact
d129 4
d134 1
a134 1
system bootstrap
d139 3
a141 1
.Xr shutdown 8
d143 5
a147 4
The disklabel format used by this version of
.Bx
is quite
different from that of other architectures.
@


1.2
log
@update rcsid
@
text
@d1 1
a1 1
.\"	$OpenBSD: boot_i386.8,v 1.3 1995/04/23 10:33:35 cgd Exp $
d60 1
a60 1
.Pa netbsd
d105 1
a105 1
.Dq Li wd0a:netbsd
d107 1
a107 1
.Dq Li fd0a:netbsd
d115 2
a116 2
.Bl -tag -width /netbsdxx -compact
.It Pa /netbsd
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
