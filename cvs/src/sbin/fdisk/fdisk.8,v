head	1.94;
access;
symbols
	OPENBSD_6_2:1.94.0.2
	OPENBSD_6_2_BASE:1.94
	OPENBSD_6_1:1.94.0.4
	OPENBSD_6_1_BASE:1.94
	OPENBSD_6_0:1.92.0.4
	OPENBSD_6_0_BASE:1.92
	OPENBSD_5_9:1.92.0.2
	OPENBSD_5_9_BASE:1.92
	OPENBSD_5_8:1.79.0.4
	OPENBSD_5_8_BASE:1.79
	OPENBSD_5_7:1.77.0.2
	OPENBSD_5_7_BASE:1.77
	OPENBSD_5_6:1.76.0.4
	OPENBSD_5_6_BASE:1.76
	OPENBSD_5_5:1.75.0.4
	OPENBSD_5_5_BASE:1.75
	OPENBSD_5_4:1.74.0.12
	OPENBSD_5_4_BASE:1.74
	OPENBSD_5_3:1.74.0.8
	OPENBSD_5_3_BASE:1.74
	OPENBSD_5_2:1.74.0.10
	OPENBSD_5_2_BASE:1.74
	OPENBSD_5_1_BASE:1.74
	OPENBSD_5_1:1.74.0.6
	OPENBSD_5_0:1.74.0.4
	OPENBSD_5_0_BASE:1.74
	OPENBSD_4_9:1.74.0.2
	OPENBSD_4_9_BASE:1.74
	OPENBSD_4_8:1.72.0.2
	OPENBSD_4_8_BASE:1.72
	OPENBSD_4_7:1.67.0.2
	OPENBSD_4_7_BASE:1.67
	OPENBSD_4_6:1.67.0.4
	OPENBSD_4_6_BASE:1.67
	OPENBSD_4_5:1.66.0.4
	OPENBSD_4_5_BASE:1.66
	OPENBSD_4_4:1.66.0.2
	OPENBSD_4_4_BASE:1.66
	OPENBSD_4_3:1.65.0.2
	OPENBSD_4_3_BASE:1.65
	OPENBSD_4_2:1.60.0.2
	OPENBSD_4_2_BASE:1.60
	OPENBSD_4_1:1.58.0.2
	OPENBSD_4_1_BASE:1.58
	OPENBSD_4_0:1.51.0.2
	OPENBSD_4_0_BASE:1.51
	OPENBSD_3_9:1.50.0.4
	OPENBSD_3_9_BASE:1.50
	OPENBSD_3_8:1.50.0.2
	OPENBSD_3_8_BASE:1.50
	OPENBSD_3_7:1.44.0.2
	OPENBSD_3_7_BASE:1.44
	OPENBSD_3_6:1.43.0.2
	OPENBSD_3_6_BASE:1.43
	OPENBSD_3_5:1.41.0.4
	OPENBSD_3_5_BASE:1.41
	OPENBSD_3_4:1.41.0.2
	OPENBSD_3_4_BASE:1.41
	OPENBSD_3_3:1.39.0.2
	OPENBSD_3_3_BASE:1.39
	OPENBSD_3_2:1.38.0.4
	OPENBSD_3_2_BASE:1.38
	OPENBSD_3_1:1.38.0.2
	OPENBSD_3_1_BASE:1.38
	OPENBSD_3_0:1.35.0.2
	OPENBSD_3_0_BASE:1.35
	OPENBSD_2_9:1.34.0.2
	OPENBSD_2_9_BASE:1.34
	OPENBSD_2_8:1.32.0.4
	OPENBSD_2_8_BASE:1.32
	OPENBSD_2_7:1.32.0.2
	OPENBSD_2_7_BASE:1.32
	OPENBSD_2_6:1.28.0.2
	OPENBSD_2_6_BASE:1.28
	OPENBSD_2_5:1.21.0.2
	OPENBSD_2_5_BASE:1.21
	OPENBSD_2_4:1.17.0.2
	OPENBSD_2_4_BASE:1.17
	OPENBSD_2_3:1.14.0.2
	OPENBSD_2_3_BASE:1.14
	OPENBSD_2_2:1.10.0.2
	OPENBSD_2_2_BASE:1.10
	OPENBSD_2_1:1.5.0.4
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.5.0.2
	OPENBSD_2_0_BASE:1.5
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.94
date	2017.03.26.00.22.49;	author sobrado;	state Exp;
branches;
next	1.93;
commitid	lpOWwLYQ6gUoQOWs;

1.93
date	2016.09.03.14.25.05;	author jmc;	state Exp;
branches;
next	1.92;
commitid	Il5gMhK4xPYIViy0;

1.92
date	2016.02.23.03.34.17;	author krw;	state Exp;
branches;
next	1.91;
commitid	9jnycNADeNQq2BDQ;

1.91
date	2016.01.09.18.10.56;	author krw;	state Exp;
branches;
next	1.90;
commitid	ptrgnU3nbXhej2kY;

1.90
date	2015.12.11.23.30.23;	author jmc;	state Exp;
branches;
next	1.89;
commitid	Ctgv0hrhon63OzMY;

1.89
date	2015.12.11.21.57.31;	author krw;	state Exp;
branches;
next	1.88;
commitid	96L1vk3QTF4FoRGz;

1.88
date	2015.11.17.17.47.49;	author jmc;	state Exp;
branches;
next	1.87;
commitid	dZZlPaXB7dE6KX3j;

1.87
date	2015.10.26.18.05.25;	author jmc;	state Exp;
branches;
next	1.86;
commitid	p7Vsf81sQyqJd8bs;

1.86
date	2015.10.26.14.37.50;	author krw;	state Exp;
branches;
next	1.85;
commitid	TRnk7YqwmIOXf3Na;

1.85
date	2015.10.05.01.48.48;	author krw;	state Exp;
branches;
next	1.84;
commitid	EOtTFpF6NA1IOZ9v;

1.84
date	2015.09.09.15.20.22;	author deraadt;	state Exp;
branches;
next	1.83;
commitid	0NbeefyaLotqZgay;

1.83
date	2015.09.09.15.13.35;	author deraadt;	state Exp;
branches;
next	1.82;
commitid	dJLyXM7e56zV0uDI;

1.82
date	2015.09.06.09.06.23;	author jmc;	state Exp;
branches;
next	1.81;
commitid	9JRuyiCtIPWrRfYx;

1.81
date	2015.09.04.21.19.45;	author jmc;	state Exp;
branches;
next	1.80;
commitid	zhxePiAqxwY9mF1U;

1.80
date	2015.09.04.19.02.49;	author kettenis;	state Exp;
branches;
next	1.79;
commitid	7P9obYFrIDpMNPYf;

1.79
date	2015.03.16.18.45.51;	author krw;	state Exp;
branches;
next	1.78;
commitid	mp8WjRkElVZwIbfW;

1.78
date	2015.03.14.15.21.53;	author krw;	state Exp;
branches;
next	1.77;
commitid	aPXwn1AfAIMw4FVu;

1.77
date	2015.01.03.15.50.50;	author jsing;	state Exp;
branches;
next	1.76;
commitid	Hkl9onJ3wjSN2qH0;

1.76
date	2014.03.06.17.39.23;	author jmc;	state Exp;
branches;
next	1.75;

1.75
date	2014.03.02.15.41.28;	author deraadt;	state Exp;
branches;
next	1.74;

1.74
date	2010.12.03.08.14.56;	author jmc;	state Exp;
branches;
next	1.73;

1.73
date	2010.11.22.01.43.43;	author krw;	state Exp;
branches;
next	1.72;

1.72
date	2010.07.05.21.57.13;	author sobrado;	state Exp;
branches;
next	1.71;

1.71
date	2010.05.25.18.51.02;	author deraadt;	state Exp;
branches;
next	1.70;

1.70
date	2010.05.20.13.29.50;	author jmc;	state Exp;
branches;
next	1.69;

1.69
date	2010.03.27.13.56.49;	author jmc;	state Exp;
branches;
next	1.68;

1.68
date	2010.03.27.13.37.44;	author jmc;	state Exp;
branches;
next	1.67;

1.67
date	2009.03.30.04.52.50;	author jmc;	state Exp;
branches;
next	1.66;

1.66
date	2008.05.13.13.28.15;	author jmc;	state Exp;
branches;
next	1.65;

1.65
date	2008.02.18.21.33.05;	author sobrado;	state Exp;
branches;
next	1.64;

1.64
date	2007.12.30.13.26.03;	author sobrado;	state Exp;
branches;
next	1.63;

1.63
date	2007.11.26.11.05.43;	author jmc;	state Exp;
branches;
next	1.62;

1.62
date	2007.11.25.17.38.13;	author jmc;	state Exp;
branches;
next	1.61;

1.61
date	2007.11.25.15.55.42;	author deraadt;	state Exp;
branches;
next	1.60;

1.60
date	2007.08.01.21.34.01;	author deraadt;	state Exp;
branches;
next	1.59;

1.59
date	2007.05.31.19.19.44;	author jmc;	state Exp;
branches;
next	1.58;

1.58
date	2007.01.12.20.16.05;	author jmc;	state Exp;
branches;
next	1.57;

1.57
date	2007.01.11.08.49.00;	author jmc;	state Exp;
branches;
next	1.56;

1.56
date	2007.01.11.08.42.27;	author jmc;	state Exp;
branches;
next	1.55;

1.55
date	2007.01.11.07.08.22;	author ray;	state Exp;
branches;
next	1.54;

1.54
date	2006.11.09.13.18.56;	author jmc;	state Exp;
branches;
next	1.53;

1.53
date	2006.11.08.23.22.26;	author deraadt;	state Exp;
branches;
next	1.52;

1.52
date	2006.10.20.03.54.24;	author dhill;	state Exp;
branches;
next	1.51;

1.51
date	2006.08.05.14.04.00;	author ray;	state Exp;
branches;
next	1.50;

1.50
date	2005.05.01.20.53.38;	author jmc;	state Exp;
branches;
next	1.49;

1.49
date	2005.04.30.16.48.56;	author deraadt;	state Exp;
branches;
next	1.48;

1.48
date	2005.04.30.09.27.44;	author jmc;	state Exp;
branches;
next	1.47;

1.47
date	2005.04.30.07.10.13;	author deraadt;	state Exp;
branches;
next	1.46;

1.46
date	2005.04.30.07.05.31;	author deraadt;	state Exp;
branches;
next	1.45;

1.45
date	2005.03.29.19.35.25;	author otto;	state Exp;
branches;
next	1.44;

1.44
date	2005.01.19.15.48.20;	author deraadt;	state Exp;
branches;
next	1.43;

1.43
date	2004.06.26.11.45.40;	author jmc;	state Exp;
branches;
next	1.42;

1.42
date	2004.06.22.23.01.55;	author tom;	state Exp;
branches;
next	1.41;

1.41
date	2003.06.03.13.16.08;	author jmc;	state Exp;
branches;
next	1.40;

1.40
date	2003.06.03.01.13.19;	author weingart;	state Exp;
branches;
next	1.39;

1.39
date	2003.01.31.21.54.40;	author jmc;	state Exp;
branches;
next	1.38;

1.38
date	2002.01.04.21.20.56;	author kjell;	state Exp;
branches;
next	1.37;

1.37
date	2001.12.21.11.41.50;	author mpech;	state Exp;
branches;
next	1.36;

1.36
date	2001.12.15.02.12.26;	author kjell;	state Exp;
branches;
next	1.35;

1.35
date	2001.08.17.11.13.57;	author mpech;	state Exp;
branches;
next	1.34;

1.34
date	2001.01.01.21.05.34;	author angelos;	state Exp;
branches;
next	1.33;

1.33
date	2000.11.09.17.52.54;	author aaron;	state Exp;
branches;
next	1.32;

1.32
date	2000.05.02.00.18.19;	author deraadt;	state Exp;
branches;
next	1.31;

1.31
date	2000.03.18.22.55.55;	author aaron;	state Exp;
branches;
next	1.30;

1.30
date	2000.03.05.00.28.49;	author aaron;	state Exp;
branches;
next	1.29;

1.29
date	2000.01.22.02.17.53;	author aaron;	state Exp;
branches;
next	1.28;

1.28
date	99.09.23.23.23.30;	author aaron;	state Exp;
branches;
next	1.27;

1.27
date	99.07.21.01.07.53;	author deraadt;	state Exp;
branches;
next	1.26;

1.26
date	99.07.04.18.59.39;	author aaron;	state Exp;
branches;
next	1.25;

1.25
date	99.07.03.02.11.07;	author aaron;	state Exp;
branches;
next	1.24;

1.24
date	99.06.06.18.43.10;	author aaron;	state Exp;
branches;
next	1.23;

1.23
date	99.06.04.02.45.15;	author aaron;	state Exp;
branches;
next	1.22;

1.22
date	99.05.23.14.11.15;	author aaron;	state Exp;
branches;
next	1.21;

1.21
date	99.03.18.11.04.50;	author aaron;	state Exp;
branches;
next	1.20;

1.20
date	98.12.15.01.20.30;	author aaron;	state Exp;
branches;
next	1.19;

1.19
date	98.11.28.19.56.18;	author aaron;	state Exp;
branches;
next	1.18;

1.18
date	98.11.11.22.19.56;	author aaron;	state Exp;
branches;
next	1.17;

1.17
date	98.09.23.01.20.23;	author aaron;	state Exp;
branches;
next	1.16;

1.16
date	98.09.17.04.14.52;	author aaron;	state Exp;
branches;
next	1.15;

1.15
date	98.09.01.16.38.16;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	98.04.01.18.46.48;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	98.02.19.20.48.07;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	98.01.19.15.56.33;	author weingart;	state Exp;
branches;
next	1.11;

1.11
date	97.12.23.23.53.02;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	97.10.16.10.20.19;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	97.10.16.10.17.53;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	97.09.30.00.10.34;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	97.09.29.23.12.03;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	97.09.29.22.58.20;	author weingart;	state Exp;
branches;
next	1.5;

1.5
date	96.09.27.15.27.15;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.09.25.11.24.11;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.06.23.14.30.24;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.06.03.07.54.33;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.43.31;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.43.31;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.94
log
@cleanup fdisk(8) partition names used by FAT file systems so they are more
consistent and easier to identify, as outlined here:

    - FAT12: FAT12 (01h)
    - FAT16: FAT16S (04h), FAT16B (06h), FAT16L (0Eh)
    - FAT32: FAT32 (0Bh), FAT32L (0Ch)

nothing in our tree is looking to the strings being replaced for anything
but printing them out, only to the numerical ids taken from disklabel.h

ok krw@@, jmc@@
@
text
@.\"	$OpenBSD: fdisk.8,v 1.93 2016/09/03 14:25:05 jmc Exp $
.\"
.\"
.\" Copyright (c) 1997 Tobias Weingartner
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: September 3 2016 $
.Dt FDISK 8
.Os
.Sh NAME
.Nm fdisk
.Nd partition table maintenance program
.Sh SYNOPSIS
.Nm fdisk
.Op Fl egvy
.Op Fl i | u
.Op Fl b Ar blocks
.Oo
.Fl c Ar cylinders
.Fl h Ar heads
.Fl s Ar sectors
.Oc
.Op Fl f Ar mbrfile
.Op Fl l Ar blocks
.Ar disk
.Sh DESCRIPTION
.Nm fdisk
makes changes to the MBR and GPT tables found on some disks.
On such disks sector 0 contains a 4-entry MBR partition table
that divides the space.
The GPT partition table, when present, starts at sector 1.
.Pp
Each entry has a type.
A type of
.Ar 0xA6
indicates an
.Ox
MBR partition, which starts with its own
16-entry partition table known as a
.Xr disklabel 5 .
This can be edited using
.Xr disklabel 8 .
.Pp
Caution is advised when editing these tables, since some platforms
use tricks to boot and may rely on specific configurations created
at install time.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl b Ar blocks
A special boot partition of the specified size will be written to disk
on architectures that need one.
Only valid with
.Fl i .
.It Xo
.Fl c Ar cylinders
.Fl h Ar heads
.Fl s Ar sectors
.Xc
Specifies an alternate BIOS geometry for
.Nm
to use.
By default, an automatic calculation of disk size will be built
using heuristics.
These figures are taken from the in-core disklabel
(see
.Xr disklabel 8 ) ,
or values that
.Em /boot
has passed to the kernel.
.Pp
Only one of
.Fl chs
or
.Fl l
can be specified.
.It Fl e
Use the
.Nm
interactive editor to modify the partition table.
See
.Sx COMMAND MODE ,
below, for more information.
.It Fl f Ar mbrfile
Specifies an alternate MBR template file.
The default file is
.Pa /usr/mdec/mbr .
.It Fl g
A protective MBR and a default GPT will be written to disk.
The default GPT will have a single
.Ox
partition containing all available space not allocated by a
.Fl b
specification.
Only valid with
.Fl i .
.It Fl i
Requests that the partition table data be re-initialized.
In this mode,
.Nm
will completely overwrite the primary MBR bootcode and MBR partition table.
.Pp
If
.Fl g
is not specified then the MBR will be overwritten by
the default MBR template
.Pa /usr/mdec/mbr
(or the one optionally specified by the
.Fl f
flag).
In the default template, MBR partition number 3 will be configured as an
.Ox
MBR partition containing all available space not allocated by a
.Fl b
specification.
.Pp
Only one of
.Fl i
or
.Fl u
can be specified.
.It Fl l Ar blocks
Specify the number of blocks in the disk, and force the MBR to be in LBA
mode only.
.Pp
Only one of
.Fl chs
or
.Fl l
can be specified.
.It Fl u
Update MBR bootcode, preserving existing MBR partition table.
The MBR bootcode extends from offset 0x000 to the start of the MBR partition
table at offset 0x1BE.
It is similar to the
.Fl i
flag, except the existing MBR partition table is preserved.
This is useful for writing new MBR bootcode onto an existing drive, and is
equivalent to the DOS command
.Dq FDISK /MBR .
Note that this option will overwrite the NT disk signature, if present.
.Pp
Only one of
.Fl i
or
.Fl u
can be specified.
.It Fl v
Print the contents of the MBR, the Primary GPT and the Secondary GPT.
Also print more detailed GPT header and partition entry information.
Cannot be used with
.Fl i ,
.Fl u ,
or
.Fl e .
.It Fl y
Avoid asking yes/no questions when not desirable.
.It Ar disk
Specify the
.Ar disk
to operate on.
It can be specified either by its full pathname or an abbreviated disk form.
In its abbreviated form, the path to the device and the
.Sq r
denoting
.Qq raw device
are omitted and the partition letter is optional.
For example, the first IDE disk can be specified as either
.Pa /dev/rwd0c ,
.Pa wd0c ,
or
.Pa wd0 .
.El
.Sh TYPICAL LAYOUT
When called with no special flags,
.Nm
prints the partition table of the specified disk.
.Pp
If the disk does not contain a valid GPT the contents
of the MBR are displayed.
For example:
.Bd -literal -offset 1n
# fdisk sd0
Disk: sd0      geometry: 121601/255/63 [1953525168 Sectors]
Offset: 0      Signature: 0xAA55
           Starting       Ending      LBA Info:
 #: id     C  H  S -      C   H  S [     start:       size ]
------------------------------------------------------------------------
 0: 0B     0  1  1 -  26108   0 63 [        63:  419425020 ] FAT32
 1: 00     0  0  0 -      0   0  0 [         0:          0 ] unused
 2: 00     0  0  0 -      0   0  0 [         0:          0 ] unused
*3: A6 26108  1  1 - 121600 254 63 [ 419425083: 1534094982 ] OpenBSD
.Ed
.Pp
This 1953525168 sector (931GB) disk drive is divided into two MBR
partitions that span the whole disk.
The first MBR partition is a 200GB FAT32 partition;
the second is a 731GB
.Ox
MBR partition using the remainder of the disk.
The fields of the output are:
.Bl -tag -width "start/size"
.It Em "#"
Number identifying each MBR partition table entry.
There are a total of four slots.
.Sq *
denotes the MBR partition which is declared bootable.
.It Em "id"
MBR partition type identifier.
.Ox
reserves the
magic number hexadecimal A6 (166 decimal).
.It Em "C/H/S"
These fields provide the starting and ending address of the MBR partition
in BIOS geometry.
.It Em "start/size"
These fields provide the starting sector and size in sectors of the
MBR partition in linear block addresses.
.El
.Pp
.Em NOTE :
The BIOS geometry sectors field (C/H/S) is
.Dq 1 based ,
but the LBA "start" field is
.Dq 0 based .
.Pp
The CHS values will need to be in the BIOS's geometry
for the system to be able to boot and use the drive correctly.
These values must be kept correctly synchronized or a variety of
problems develop which are very difficult to diagnose.
.Pp
If the disk contains a protective MBR and a valid GPT, the contents of the GPT
are displayed.
For example:
.Bd -literal -offset 1n
Disk: sd2       Usable LBA: 64 to 7765952 [7766016 Sectors]
   #: type                                 [       start:         size ]
------------------------------------------------------------------------
   1: EFI Sys                              [          64:          960 ]
   3: OpenBSD                              [        1024:      7764929 ]
.Ed
.Pp
This 7766016 sector disk drive is divided into two
partitions that span the whole disk.
The first partition is a 960 sector EFI Sys partition;
the second is a 7764929 sector
.Ox
partition using the remainder of the disk.
The fields of the output are:
.Bl -tag -width "type"
.It Em "#"
Number identifying each partition table entry.
.It Em "type"
The partition type identifier.
If the type is recognized the name of the type is displayed.
Otherwise the type GUID is displayed.
.It Em "start"
The sector the partition starts on.
.It Em "size"
The number of sectors in the partition.
.El
.Pp
If the
.Fl v
option is specified, the disk GUID and each partition's GUID and name are
also displayed.
.Pp
In either the MBR or GPT case the
.Ox
partition shown above is subdivided further using the
functionality provided by
.Xr disklabel 8 ,
which provides
.Ox
partitions.
.Bd -literal -offset 1n
# /dev/rsd0c:
type: SCSI
disk: SCSI disk
label: WDC WD10EADS-65L
duid: 085ef8d68623f5b3
flags:
bytes/sector: 512
sectors/track: 63
tracks/cylinder: 255
sectors/cylinder: 16065
cylinders: 121601
total sectors: 1953525168
boundstart: 419425083
boundend: 1953520065
drivedata: 0

16 partitions:
#                size           offset  fstype [fsize bsize  cpg]
  a:          2097125        419425083  4.2BSD   2048 16384    1
  b:          4715520        421522208    swap
  c:       1953525168                0  unused
  d:          8388608        426237728  4.2BSD   2048 16384    1
  e:         16771072        434626336  4.2BSD   2048 16384    1
  f:          4194304        451397408  4.2BSD   2048 16384    1
  g:          2097152        455591712  4.2BSD   2048 16384    1
  h:         20971520        457688864  4.2BSD   2048 16384    1
  i:        419425020               63   MSDOS
  j:          4194304        478660384  4.2BSD   2048 16384    1
  k:          4194304        482854688  4.2BSD   2048 16384    1
  l:        629145536        487049024  4.2BSD   4096 32768    1
.Ed
.Pp
These
.Ox
partitions are then mounted as follows using
.Pa /etc/fstab :
.Bd -literal -offset indent
/dev/sd0a / ffs rw,softdep 1 1
/dev/sd0d /tmp ffs rw,softdep,nodev,nosuid 1 2
/dev/sd0e /var ffs rw,softdep,nodev,nosuid 1 2
/dev/sd0f /usr ffs rw,softdep,nodev 1 2
/dev/sd0g /usr/X11R6 ffs rw,softdep,nodev 1 2
/dev/sd0h /usr/local ffs rw,softdep,nodev 1 2
/dev/sd0i /mnt/example msdos rw,nodev,nosuid 1 2
/dev/sd0j /usr/src ffs rw,softdep,nodev,nosuid 1 2
/dev/sd0k /usr/obj ffs rw,softdep,nodev,nosuid 1 2
/dev/sd0l /home ffs rw,softdep,nodev,nosuid 1 2
.Ed
.Sh COMMAND MODE
The
.Fl e
flag causes
.Nm
to enter an interactive command mode.
The prompt contains information about the state of the edit
process.
.Pp
.Dl fdisk:*1>
.Pp
.Sq *
means that the in-memory copy of the partition table has been modified, but
not yet written to disk.
.Pp
1 is the disk offset of the currently selected boot block being edited.
This number will be 2 when editing an extended MBR partition,
3 when editing an extended MBR partition within an extended MBR partition,
and so on.
.Pp
The list of commands and their explanations are given below.
Commands may be abbreviated provided enough characters are given to ensure
unambiguity.
.Bl -tag -width Ds
.It Cm ?\&
A synonym for
.Cm help .
.It Cm help
Display a list of commands that
.Nm
understands in the interactive edit mode.
.It Cm manual
Display this manual page.
.It Cm reinit Op Cm gpt | Cm mbr
Initialize the currently selected, in-memory copy of the
boot block.
If
.Cm gpt
is specified a protective MBR and a GPT are initialized.
If
.Cm mbr
is specified only an MBR is initialized.
If neither
.Cm mbr
nor
.Cm gpt
are specified then a protective MBR and a GPT are initialized if a protective
MBR already exists.
Otherwise only an MBR is initialized.
.It Cm disk
Display the current drive geometry that
.Nm
probed using kernel provided information and various heuristics.
The disk geometry may be changed at this point.
Not available when editing a GPT.
.It Cm edit Ar #
Edit a given table entry in the memory copy of
the current boot block.
Sizes may be adjusted in BIOS geometry mode (MBR only) or using
sector offsets and sizes.
A unit
.Sq b ,
.Sq k ,
.Sq m ,
or
.Sq g
may be appended to indicate bytes, kilobytes, megabytes, or gigabytes.
The special size value
.Sq *
will cause the partition to be sized to use the remainder of the disk.
.It Cm flag Ar # Op Ar value
Make the given MBR partition table entry bootable
and mark all others as not bootable
(only one entry can be marked bootable).
The bootable partition is denoted with
.Sq * .
.\" If you wish to boot from an extended
.\" MBR partition, you will need to mark the MBR partition table entry for the
.\" extended MBR partition as bootable.
If a
.Ar value
of 0 is given,
the MBR partition is marked as not bootable,
but no other MBR partitions are touched.
.It Cm update
Update the machine MBR bootcode and 0xAA55 signature in the memory copy
of the currently selected MBR.
Note that this option will overwrite an NT disk
signature, if present.
Not available when editing a GPT.
.It Cm select Ar #
Select and load into memory the MBR pointed
to by the extended MBR partition table entry in the current boot block.
Not available when editing a GPT.
.It Cm setpid Ar #
Change the partition
identifier of the given partition table entry.
This command is particularly useful for reassigning
an existing partition to
.Ox .
.It Cm swap Ar # Ar #
Swap two partition entries.
.It Cm print Op Ar unit
Print the currently selected in-memory copy of the
partition table to the terminal.
A
.Ar unit
.Sq b ,
.Sq k ,
.Sq m ,
or
.Sq g
may be appended to indicate bytes, kilobytes, megabytes, or gigabytes.
Otherwise the number of sectors is printed.
.It Cm write
Write the in-memory copy of the partition table to disk.
.It Cm exit
Exit the current level of
.Nm fdisk ,
either returning to the
previously selected in-memory copy of a MBR, or exiting the
program if there is none.
.It Cm quit
Exit the current level of
.Nm fdisk ,
either returning to the
previously selected in-memory copy of a MBR, or exiting the
program if there is none.
Unlike
.Em exit
it does write the modified block out.
.It Cm abort
Quit program without saving current changes.
.El
.Sh FILES
.Bl -tag -width /usr/mdec/mbr -compact
.It Pa /usr/mdec/mbr
default MBR template
.El
.Sh SEE ALSO
.Xr fstab 5 ,
.Xr boot_amd64 8 ,
.Xr boot_i386 8 ,
.Xr boot_macppc 8 ,
.Xr disklabel 8
.Sh CAVEATS
Hand crafted disk layouts are highly error prone.
It is common practice,
though by no means required,
that MBR partitions start on a cylinder boundary
(generally head 0, sector 1, but head 1, sector 1 for track 0),
and that MBR partitions also end at cylinder boundaries.
@


1.93
log
@no more boot_zaurus.8;
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.92 2016/02/23 03:34:17 krw Exp $
d18 1
a18 1
.Dd $Mdocdate: February 23 2016 $
d195 4
a198 4
Disk: sd0       geometry: 121601/255/63 [1953525168 Sectors]
Offset: 0       Signature: 0xAA55
          Starting     Ending    LBA Info:
 #: id     C H S -      C   H  S [     start:       size ]
d200 4
a203 4
 0: 0B     0 1 1 -  26108   0 63 [        63:  419425020 ] Win95 FAT-32
 1: 00     0 0 0 -      0   0  0 [         0:          0 ] unused
 2: 00     0 0 0 -      0   0  0 [         0:          0 ] unused
*3: A6 26108 1 1 - 121600 254 63 [ 419425083: 1534094982 ] OpenBSD
d208 1
a208 1
The first MBR partition is a 200GB FAT-32 partition;
@


1.92
log
@A disk name of /dev/wd0c doesn't work. Correct verbiage and example.

Discovered by rpe@@. Tweaked by schwarze@@.

ok rpe@@ schwarze@@ jmc@@ deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.91 2016/01/09 18:10:56 krw Exp $
d18 1
a18 1
.Dd $Mdocdate: January 9 2016 $
a479 1
.Xr boot_zaurus 8 ,
@


1.91
log
@Revamp the display of GPT information, hiding less important
information under the '-v' flag. This brings the GPT display more
into line with the MBR display and simplifies and hardens the parsing
of the partition info in the install scripts.

Original problem with install scripts parsing hand edited GPT
information reported by Valere Monseur via bugs@@.

Man page fixes and tweaks from jmc@@.
Install script changes tested & ok rpe@@.
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.90 2015/12/11 23:30:23 jmc Exp $
d18 1
a18 1
.Dd $Mdocdate: December 11 2015 $
d174 1
a174 1
In its abbreviated form, the path to the device, the
d177 2
a178 2
.Qq raw device ,
and the partition letter, can all be omitted.
d181 1
a181 1
.Pa /dev/wd0c ,
d183 1
a183 1
.Ar wd0 .
@


1.90
log
@there are no boot_ pages for armish or landisk that i can see,
so remove their references;

while here undo a predefined string (as mandoc_char(7) calls them);
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.89 2015/12/11 21:57:31 krw Exp $
d161 1
d208 1
a208 1
The first MBR partition is a 200GB FAT-32 partition,
d247 5
a251 9
Disk: sd1 ca501b80-5b85-40fd-a00e-abc6ffc5f97c [7907328 Sectors]
      First usable LBA: 64  Last usable LBA: 7907264
   #: uuid                                         lba         size
      type                                 name
---------------------------------------------------------------------
   1: 415afb62-3f56-43c5-a1b3-9405aace56f9           64          960
      EFI Sys                              EFI System Area
   3: 6bcc08a8-66a6-43ae-aa1f-9869ab4c8a27         1024      7906241
      OpenBSD                              OpenBSD Area
d254 1
a254 1
This 7907328 sector disk drive is divided into two
d256 2
a257 2
The first partition is a 960 sector EFI Sys partition.
the second is a 7906241 sector
d261 1
a261 1
.Bl -tag -width "uuid"
d264 5
a268 3
.It Em "uuid"
The UUID of the partition.
.It Em "lba"
a271 6
.It Em "type"
The partition type identifier.
If the type is recognized the name of the type is displayed.
Otherwise the type UUID is displayed.
.It Em "name"
The partition's name.
d273 5
@


1.89
log
@Add '-v' flag that forces the display of both GPT's and the MBR.
Useful for seeing exactly what is currently on the disk. Suggested
by a request from kettenis@@.

Man page & usage ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.88 2015/11/17 17:47:49 jmc Exp $
d18 1
a18 1
.Dd $Mdocdate: November 17 2015 $
d347 1
a347 1
.Dl fdisk:*1\*(Gt
a479 1
.Xr boot_armish 8 ,
a480 1
.Xr boot_landisk 8 ,
@


1.88
log
@note that -chs and -l are mutually exclusive;
from jan stary
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.87 2015/10/26 18:05:25 jmc Exp $
d18 1
a18 1
.Dd $Mdocdate: October 26 2015 $
d26 1
a26 1
.Op Fl egy
d159 7
@


1.87
log
@tweak previous;
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.86 2015/10/26 14:37:50 krw Exp $
d82 6
d136 6
@


1.86
log
@Flesh out GPT info and tweak other verbiage to be less MBR specific.
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.85 2015/10/05 01:48:48 krw Exp $
d18 1
a18 1
.Dd $Mdocdate: October 5 2015 $
d47 3
a49 1
indicates an OpenBSD MBR partition, which starts with its own
d110 1
a110 1
is not specified then the MBR will be overwritten by the
d171 2
a172 1
of the MBR are displayed. e.g.:
d224 2
a225 1
are displayed. e.g.:
d229 1
a229 1
   #: uuid                                         lba         size 
d232 4
a235 4
   1: 415afb62-3f56-43c5-a1b3-9405aace56f9           64          960 
      EFI Sys                              EFI System Area                     
   3: 6bcc08a8-66a6-43ae-aa1f-9869ab4c8a27         1024      7906241 
      OpenBSD                              OpenBSD Area                        
d238 1
a238 1
This 7907328 sector disk drive is divided into two 
d251 1
a251 1
The sector the partion starts on.
d378 1
a378 1
 sector offsets and sizes.
d422 1
a422 1
Print the currently selected in-memory copy of the 
@


1.85
log
@Tweak man page to describe newly enhanced '-g' operation.
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.84 2015/09/09 15:20:22 deraadt Exp $
d18 1
a18 1
.Dd $Mdocdate: September 9 2015 $
d23 1
a23 1
.Nd MBR partition maintenance program
d39 1
a39 1
makes changes to the MBR table found on some disks.
d42 1
d83 1
a83 3
interactive editor to modify an MBR partition table.
The editor permits configuration of the MBR partition, as well as
extended MBR partitions.
d92 2
a93 2
A protective MBR and a GPT label will be written to disk.
The GPT label will have a single
d95 1
a95 3
partition
containing all available space.
If
d97 1
a97 4
is specified, an EFI System partition of the requested size
is created before the remaining space is put into the
.Ox
partition.
d101 1
a101 1
Requests that the MBR partition data be re-initialized.
d104 6
a109 2
will completely overwrite the primary MBR bootcode and MBR partition table
using the default MBR template
d116 3
a118 6
MBR partition spanning the entire disk, except for a zone left at the start
for booting.
This mode is designed to initialize the MBR the very first time.
If the
.Fl g
flag is also specified, a protective MBR and GPT label will be created.
d130 2
a131 2
The MBR bootcode extends from offset 0x000 to the start of the MBR partition table
at offset 0x1BE.
d166 4
a169 1
prints the MBR partition table of the specified disk:
d220 39
a258 1
The
d260 1
a260 1
MBR partition shown above is subdivided further using the
d327 1
a327 1
means that the in-memory copy of the boot block has been modified, but
d348 1
a348 1
.It Cm reinit
d351 13
d369 1
d373 2
a374 1
Sizes may be adjusted in BIOS geometry mode or using sector offsets and sizes.
d401 1
a401 1
of the currently selected boot block.
d404 1
d406 1
a406 1
Select and load into memory the boot block pointed
d408 1
d410 2
a411 2
Change the MBR partition
identifier of the given MBR partition table entry.
d413 1
a413 1
an existing MBR partition to
d416 1
a416 1
Swap two MBR entries.
d418 2
a419 2
Print the currently selected in-memory copy of the boot
block and its MBR table to the terminal.
d430 1
a430 1
Write the in-memory copy of the boot block to disk.
d435 1
a435 1
previously selected in-memory copy of a boot block, or exiting the
d441 1
a441 1
previously selected in-memory copy of a boot block, or exiting the
@


1.84
log
@In the flag command description, mention that a bootable partition
is marked with '*'
due to comments from sthen and kettenis
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.83 2015/09/09 15:13:35 deraadt Exp $
d93 2
a94 1
A protective MBR for GPT will be written to disk, instead of an MBR with an
d96 8
a103 1
MBR partition.
d123 1
a123 1
flag is also specified, a protective MBR for GPT will be created.
@


1.83
log
@remove 3 paragraphs of useless information at the start, and replace
with the simple facts a user needs.
ok kettenis krw
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.82 2015/09/06 09:06:23 jmc Exp $
d18 1
a18 1
.Dd $Mdocdate: September 6 2015 $
d330 2
@


1.82
log
@correct a mistake in my previous commit;
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.81 2015/09/04 21:19:45 jmc Exp $
d18 1
a18 1
.Dd $Mdocdate: September 4 2015 $
d38 4
a41 5
On the i386 and other architectures, sector 0 of a bootable hard disk
must contain MBR bootcode, the MBR partition table containing 4 slots,
and a specific magic number (0xAA55).
The 4 slots in the MBR partition table allow a disk drive to be
divided into chunks known as MBR partitions.
d43 8
a50 10
On the i386, the BIOS loads sector 0 of the boot disk into memory,
verifies the magic number, and begins executing the MBR bootcode
at the first byte.
The MBR bootcode then searches the MBR partition table for an
.Dq active
MBR partition (indicated by a
.Ql \&*
in the first column), and if one
is found, the boot block from that MBR partition is loaded and executed in
place of the original (MBR) boot block.
d52 3
a54 15
Some other architectures (like the zaurus), consider sector 0 of the disk
to contain the MBR partition table, but do not use the MBR bootcode at all.
.Pp
Upon first access to a disk, the partition information is retrieved,
typically in
.Xr disklabel 5
format.
The location of the disklabel can vary from architecture to architecture,
but if one is not found the existence of an MBR partition table will create
a spoofed prototypical disklabel which can be viewed using
.Xr disklabel 8 .
This spoofing mechanism is useful for permitting partition access for
devices which would not normally have a
.Xr disklabel 5
sector.
@


1.81
log
@shuffle -b into place; while there, do some general tidy up
of SYNOPSIS and usage();
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.80 2015/09/04 19:02:49 kettenis Exp $
d27 1
a34 1
.Op Fl i | u
@


1.80
log
@Add a -b option, to be used together with -i, that tells fdisk to add a
special boot partition on architectures that need it.

For now those architectures are amd64 and i386, where this option will
create an EFI system partition to store our new UEFI bootloader.

ok deraadt@@, krw@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.79 2015/03/16 18:45:51 krw Exp $
d18 1
a18 1
.Dd $Mdocdate: March 16 2015 $
a25 1
.Op Fl i | u
d27 1
d34 1
a35 1
.Op Fl b Ar blocks
d73 5
a93 5
.It Fl b Ar blocks
A special boot partition of the specified size will be written to disk
on architectures that need one.
Only valid with
.Fl i .
@


1.79
log
@Document that -i/-u are mutually exclusive and clean up the related
code a bit.

ok deraadt@@ igor@@ (with suggested tweak that is coming)
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.78 2015/03/14 15:21:53 krw Exp $
d18 1
a18 1
.Dd $Mdocdate: March 14 2015 $
d35 1
d89 5
@


1.78
log
@Switch all the license blocks to the standard OpenBSD/ISC license.

With the permission of Toby.

ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.77 2015/01/03 15:50:50 jsing Exp $
d18 1
a18 1
.Dd $Mdocdate: January 3 2015 $
d26 2
a27 1
.Op Fl egiuy
d125 6
d145 6
@


1.77
log
@Add support for creating a protective MBR for GPT.

Part of a diff by Markus Mueller, which was derived from Bitrig during
Google Summer of Code, with further tweaks by me.

ok krw@@ miod@@
@
text
@d1 2
a2 1
.\"	$OpenBSD: fdisk.8,v 1.76 2014/03/06 17:39:23 jmc Exp $
a4 1
.\" All rights reserved.
d6 3
a8 8
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
d10 7
a16 10
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
.\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
d18 1
a18 1
.Dd $Mdocdate: March 6 2014 $
@


1.76
log
@tweak previous;
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.75 2014/03/02 15:41:28 deraadt Exp $
d26 1
a26 1
.Dd $Mdocdate: March 2 2014 $
d34 1
a34 1
.Op Fl eiuy
d108 6
d129 3
@


1.75
log
@-l disksize code, to force LBA mode.  code by chris, after I suggested
wrapping rows of echo's via fdisk was silly.
ok kettenis krw
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.74 2010/12/03 08:14:56 jmc Exp $
d26 1
a26 1
.Dd $Mdocdate: December 3 2010 $
d40 1
a41 1
.Op Fl f Ar mbrfile
d123 1
a123 1
.It Fl l
d125 1
a125 1
mode only. 
@


1.74
log
@disklabel now uses "duid", not "uid";
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.73 2010/11/22 01:43:43 krw Exp $
d26 1
a26 1
.Dd $Mdocdate: November 22 2010 $
d40 1
d123 3
@


1.73
log
@Update example disk partition info to more current reality. Noticed
by and diff from Roberth via tech@@.

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.72 2010/07/05 21:57:13 sobrado Exp $
d26 1
a26 1
.Dd $Mdocdate: July 5 2010 $
d218 1
a218 1
uid: 085ef8d68623f5b3
@


1.72
log
@improve description for -i; as a consequence of recent changes,
OpenBSD MBR partition does not span from sector 1 after MBR partition
data is re-initialized.

written with lot of good advice from deraadt@@ and jmc@@

ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.71 2010/05/25 18:51:02 deraadt Exp $
d26 1
a26 1
.Dd $Mdocdate: May 25 2010 $
d156 2
a157 2
# fdisk wd0
Disk: wd0       geometry: 5168/240/63 [78140160 Sectors]
d159 7
a165 7
          Starting      Ending        LBA Info:
 #: id    C   H  S -    C   H  S [       start:      size   ]
-------------------------------------------------------------------------
 0: 04    0   1  1 -  170   0 63 [          63:     2570462 ] DOS FAT-16
 1: 00    0   0  0 -    0   0  0 [           0:           0 ] unused
 2: 00    0   0  0 -    0   0  0 [           0:           0 ] unused
*3: A6  170   1  1 - 5167 239 63 [     2570525:    75569697 ] OpenBSD
d168 1
a168 1
This 78140160 sector (38154MB) disk drive is divided into two MBR
d170 2
a171 3
The first MBR partition is a 1225MB FAT-16 DOS partition
(in this case containing a Phoenix BIOS Laptop Suspend-to-Disk file),
the second is a 36GB
d214 5
a218 5
# Inside MBR partition 3: type A6 start 2570463 size 75569697
# /dev/rwd0c:
type: ESDI
disk: ESDI/IDE disk
label: HITACHI_DK13FA-4
d222 6
a227 10
tracks/cylinder: 16
sectors/cylinder: 1008
cylinders: 16383
total sectors: 78140160
rpm: 3600
interleave: 1
trackskew: 0
cylinderskew: 0
headswitch: 0           # microseconds
track-to-track seek: 0  # microseconds
d231 13
a243 13
#           size     offset  fstype [fsize bsize  cpg]
  a:     1740753    2570463  4.2BSD   2048 16384  328 # Cyl  2550*-  4276
  b:      819504    4311216    swap                   # Cyl  4277 -  5089
  c:    78140160          0  unused      0     0      # Cyl     0 - 77519
  d:     2097648    5130720  4.2BSD   2048 16384  328 # Cyl  5090 -  7170
  e:      614880    7228368  4.2BSD   2048 16384  328 # Cyl  7171 -  7780
  g:     2097648    7843248  4.2BSD   2048 16384  328 # Cyl  7781 -  9861
  h:      921312    9940896  4.2BSD   2048 16384  328 # Cyl  9862 - 10775
  i:     2570462         63   MSDOS                   # Cyl     0*-  2549
  j:     3355632   10862208  4.2BSD   2048 16384  328 # Cyl 10776 - 14104
  k:     2097648   14217840  4.2BSD   2048 16384  328 # Cyl 14105 - 16185
  l:     2097648   16315488  4.2BSD   2048 16384  328 # Cyl 16186 - 18266
  m:    59727024   18413136  4.2BSD   2048 16384  328 # Cyl 18267 - 77519
d251 10
a260 9
/dev/wd0a / ffs rw,softdep 1 1
/dev/wd0m /home ffs rw,softdep,nodev,nosuid 1 2
/dev/wd0d /tmp ffs rw,softdep,nodev,nosuid 1 2
/dev/wd0g /usr ffs rw,softdep,nodev 1 2
/dev/wd0h /usr/X11R6 ffs rw,softdep,nodev 1 2
/dev/wd0j /usr/local ffs rw,softdep,nodev 1 2
/dev/wd0k /usr/obj ffs rw,softdep,nodev,nosuid 1 2
/dev/wd0l /usr/src ffs rw,softdep,nodev,nosuid 1 2
/dev/wd0e /var ffs rw,softdep,nodev,nosuid 1 2
@


1.71
log
@match usage to the manual page, and borrow the description of 'disk'
from disklabel(8), since it describes the effect of using opendev()
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.70 2010/05/20 13:29:50 jmc Exp $
d26 1
a26 1
.Dd $Mdocdate: May 20 2010 $
d119 2
a120 2
MBR partition spanning from cylinder 0, head 1, sector 1, and extending
to the end of the disk.
@


1.70
log
@document the optional arg to "flag", as requested by Thomas Pfaff;
this version after some feedback from krw and otto;

ok otto krw
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.69 2010/03/27 13:56:49 jmc Exp $
d26 1
a26 1
.Dd $Mdocdate: March 27 2010 $
d41 1
a41 1
.Ar device
d135 15
d154 1
a154 1
prints the MBR partition table of the specified device:
@


1.69
log
@remainer->remainder; from miod
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.68 2010/03/27 13:37:44 jmc Exp $
d306 4
a309 3
.It Cm flag Ar #
Make the given MBR partition table entry bootable.
Only one entry can be marked bootable.
d313 5
a317 2
.\" If an optional value is given, the MBR partition is marked with the given
.\" value, and other MBR partitions are not touched.
@


1.68
log
@various improvements from Anders Langworthy, with some tweaks
from krw and myself;

ok deraadt krw
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.67 2009/03/30 04:52:50 jmc Exp $
d26 1
a26 1
.Dd $Mdocdate: March 30 2009 $
d305 1
a305 1
will cause the partition to be sized to use the remainer of the disk.
@


1.67
log
@some improvements inspired by a mail on misc@@ from frantisek holop:

- clarify the terms geometry sectors field and start field
- change the fdisk prompt from 0 to 1, and explain its meaning
- temper CAVEATS: the note is "common practice", not mandatory

from nick and myself
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.66 2008/05/13 13:28:15 jmc Exp $
d26 1
a26 1
.Dd $Mdocdate: May 13 2008 $
d47 1
a47 1
sub-divided up into chunks known as MBR partitions.
d95 1
a95 1
Use the interactive edit of
d97 1
a97 1
to modify an MBR partition table.
d160 1
a160 1
The fields of the output are thus:
d272 2
d275 4
a278 1
.It help
d282 1
a282 1
.It manual
d284 1
a284 1
.It reinit
d287 1
a287 1
.It disk
d292 1
a292 1
.It edit Ar #
d295 12
a306 3
Sizes may be adjusted using either in BIOS geometry mode or
sector offsets and sizes.
.It flag Ar #
d314 1
a314 1
.It update
d319 1
a319 1
.It select Ar #
d322 1
a322 1
.It setpid Ar #
d328 1
a328 1
.It swap Ar # Ar #
d330 1
a330 1
.It print Op unit
d333 1
a333 1
If
a334 1
is specified as
d339 2
a340 2
.Sq g ,
the MBR is printed in units of bytes, kilobytes, megabytes, or gigabytes.
d342 1
a342 1
.It write
d344 1
a344 1
.It exit
d350 1
a350 1
.It quit
d359 1
a359 1
.It abort
@


1.66
log
@fix an error in the example partition table; from Adam Patterson
ok nick
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.65 2008/02/18 21:33:05 sobrado Exp $
d26 1
a26 1
.Dd $Mdocdate: February 18 2008 $
d181 1
a181 1
The BIOS geometry sectors field is
d183 1
a183 1
but the start field is
d185 1
d260 1
a260 1
.Dl fdisk:*0>
d266 4
a269 5
0 is the disk offset of the currently selected boot block being edited.
This number could be something other than zero when extended MBR partitions
are being edited (using the
.Em select
subcommand).
d365 5
a369 5
MBR partitions should start on a cylinder boundary
(head 0, sector 1),
except when starting on track 0,
(these should begin at head 1, sector 1).
MBR partitions should also end at cylinder boundaries.
@


1.65
log
@adjust width of S column to improve printing of the MBR partition table
on modern disk geometries; while here, better alignment of column labels

ok jmc@@, jsing@@, krw@@, and otto@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.64 2007/12/30 13:26:03 sobrado Exp $
d26 1
a26 1
.Dd $Mdocdate: December 30 2007 $
d150 1
a150 1
*3: A6  170   1  1 - 5167 239 63 [     2570463:    75569697 ] OpenBSD
@


1.64
log
@sort flags in both synopsis and usage, file not commited in last diff

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.63 2007/11/26 11:05:43 jmc Exp $
d26 1
a26 1
.Dd $Mdocdate: November 26 2007 $
d144 1
a144 1
         Starting       Ending       LBA Info:
d146 1
a146 1
------------------------------------------------------------------------
@


1.63
log
@fix SEE ALSO; from deraadt
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.62 2007/11/25 17:38:13 jmc Exp $
d26 1
a26 1
.Dd $Mdocdate: November 25 2007 $
d34 1
a34 1
.Op Fl ieuy
@


1.62
log
@tweak previous;
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.61 2007/11/25 15:55:42 deraadt Exp $
d26 1
a26 1
.Dd $Mdocdate: August 1 2007 $
a355 1
.Xr boot_alpha 8 ,
d357 1
d359 1
@


1.61
log
@document MBR spoofing, very minimally
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.60 2007/08/01 21:34:01 deraadt Exp $
d63 1
a63 1
Upon the first access to a disk, the partition information is fetched,
d68 1
a68 1
but if one is not found the existance of a MBR partition table will create
d72 1
a72 1
devices which one would not normally want to place a true
d74 1
a74 1
sector on.
d97 1
a97 1
to modify a MBR partition table.
@


1.60
log
@cats went away
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.59 2007/05/31 19:19:44 jmc Exp $
d26 1
a26 1
.Dd $Mdocdate: May 31 2007 $
d62 13
@


1.59
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.58 2007/01/12 20:16:05 jmc Exp $
d26 1
a26 1
.Dd $Mdocdate$
a344 1
.Xr boot_cats 8 ,
@


1.58
log
@make the description match synopsis for -chs;
discussed with nick
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.57 2007/01/11 08:49:00 jmc Exp $
d26 1
a26 1
.Dd January 3, 2002
@


1.57
log
@avoid an ugly grammar construction;
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.56 2007/01/11 08:42:27 jmc Exp $
d65 3
a67 2
.It Xo Fl c Ar cylinders ,
.Fl h Ar heads ,
@


1.56
log
@make the description of -e point to the COMMAND MODE section;
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.55 2007/01/11 07:08:22 ray Exp $
d125 1
a125 1
prints the MBR partition table of the specified device, i.e.,
@


1.55
log
@Move options into DESCRIPTION section.  This conforms with most
other man pages, where the options are near the top of the page for
easy access.

OK jmc@@.
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.54 2006/11/09 13:18:56 jmc Exp $
d86 3
@


1.54
log
@desireable -> desirable;
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.53 2006/11/08 23:22:26 deraadt Exp $
d62 57
a232 57
.Sh OPTIONS
The options are as follows:
.Bl -tag -width Ds
.It Xo Fl c Ar cylinders ,
.Fl h Ar heads ,
.Fl s Ar sectors
.Xc
Specifies an alternate BIOS geometry for
.Nm
to use.
By default, an automatic calculation of disk size will be built
using heuristics.
These figures are taken from the in-core disklabel
(see
.Xr disklabel 8 ) ,
or values that
.Em /boot
has passed to the kernel.
.It Fl e
Use the interactive edit of
.Nm
to modify a MBR partition table.
The editor permits configuration of the MBR partition, as well as
extended MBR partitions.
.It Fl f Ar mbrfile
Specifies an alternate MBR template file.
The default file is
.Pa /usr/mdec/mbr .
.It Fl i
Requests that the MBR partition data be re-initialized.
In this mode,
.Nm
will completely overwrite the primary MBR bootcode and MBR partition table
using the default MBR template
.Pa /usr/mdec/mbr
(or the one optionally specified by the
.Fl f
flag).
In the default template, MBR partition number 3 will be configured as an
.Ox
MBR partition spanning from cylinder 0, head 1, sector 1, and extending
to the end of the disk.
This mode is designed to initialize the MBR the very first time.
.It Fl u
Update MBR bootcode, preserving existing MBR partition table.
The MBR bootcode extends from offset 0x000 to the start of the MBR partition table
at offset 0x1BE.
It is similar to the
.Fl i
flag, except the existing MBR partition table is preserved.
This is useful for writing new MBR bootcode onto an existing drive, and is
equivalent to the DOS command
.Dq FDISK /MBR .
Note that this option will overwrite the NT disk signature, if present.
.It Fl y
Avoid asking yes/no questions when not desirable.
.El
@


1.53
log
@add a -y flag, for non-interactive use
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.52 2006/10/20 03:54:24 dhill Exp $
d231 1
a231 1
Avoid asking yes/no questions when not desireable.
@


1.52
log
@OpenBSD no longer supports using an older FreeBSD MBR partition.

ok krw@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.51 2006/08/05 14:04:00 ray Exp $
d34 1
a34 1
.Op Fl ieu
d230 2
@


1.51
log
@Mention that `b', `k', `m', and `g' can be specified after the print
command to print partition sizes in units of bytes, kilobytes,
megabytes, and gigabytes.

Inspired by patch from Hiren Patel <hiren at obsidian dot co dot za>.

OK jmc@@ and otto@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.50 2005/05/01 20:53:38 jmc Exp $
a97 5
If no A6 MBR partition is found,
.Ox
can use an older
.Fx
MBR partition (with a magic number of hexadecimal A5).
@


1.50
log
@- better synopsis
- sync usage()
- add fstab(5) to SEE ALSO
- NOTES -> CAVEATS and improve

bits ok deraadt@@
improvements and ok tom@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.49 2005/04/30 16:48:56 deraadt Exp $
d302 1
a302 1
.It print
d305 10
@


1.49
log
@correctly use whole disk, pointed out by toby
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.48 2005/04/30 09:27:44 jmc Exp $
d35 6
a40 4
.Op Fl f Ar mbrname
.Op Fl c Ar cylinders
.Op Fl h Ar heads
.Op Fl s Ar sectors
d103 1
a103 1
.It Em "cyl/hd/sec"
d205 1
a205 1
.It Fl f Ar mbrname
a324 6
.Sh NOTES
Hand crafted disk layouts can be highly error prone;
ensure that the
.Ox
MBR partition starts on a cylinder boundary.
(This restriction may be changed in the future.)
d331 1
d339 7
@


1.48
log
@various fixes;
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.47 2005/04/30 07:10:13 deraadt Exp $
d71 1
a71 1
 0: 04    0   1  1 -  169 239 63 [          63:     2570337 ] DOS FAT-16
d157 1
a157 1
  i:     2570337         63   MSDOS                   # Cyl     0*-  2549
@


1.47
log
@match disklabel change
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.46 2005/04/30 07:05:31 deraadt Exp $
a59 1
.Pp
d64 11
a74 11
.Bd -literal
  # fdisk wd0
  Disk: wd0       geometry: 5168/240/63 [78140160 Sectors]
  Offset: 0       Signature: 0xAA55
           Starting       Ending       LBA Info:
   #: id    C   H  S -    C   H  S [       start:      size   ]
  ------------------------------------------------------------------------
   0: 04    0   1  1 -  169 239 63 [          63:     2570337 ] DOS FAT-16  
   1: 00    0   0  0 -    0   0  0 [           0:           0 ] unused      
   2: 00    0   0  0 -    0   0  0 [           0:           0 ] unused      
  *3: A6  170   1  1 - 5167 239 63 [     2570463:    75569697 ] OpenBSD     
d81 3
a83 1
the second is a 36GB OpenBSD MBR partition using the remainder of the disk.
a84 1
.Pp
d89 1
a89 1
.Dq \&*
d116 1
a116 1
These values must be kept correctly syncronized or a variety of
d119 3
a121 1
The OpenBSD MBR partition shown above is subdivided further using the
d123 1
a123 1
.Xr disklabel 8 Ns ,
d127 35
a161 35
.Bd -literal
  # Inside MBR partition 3: type A6 start 2570463 size 75569697 
  # /dev/rwd0c:
  type: ESDI
  disk: ESDI/IDE disk
  label: HITACHI_DK13FA-4
  flags:
  bytes/sector: 512
  sectors/track: 63
  tracks/cylinder: 16
  sectors/cylinder: 1008
  cylinders: 16383
  total sectors: 78140160
  rpm: 3600
  interleave: 1
  trackskew: 0
  cylinderskew: 0
  headswitch: 0           # microseconds
  track-to-track seek: 0  # microseconds
  drivedata: 0 
  
  16 partitions:
  #             size        offset  fstype [fsize bsize  cpg]
    a:       1740753       2570463  4.2BSD   2048 16384  328 # Cyl  2550*-  4276 
    b:        819504       4311216    swap                   # Cyl  4277 -  5089 
    c:      78140160             0  unused      0     0      # Cyl     0 - 77519 
    d:       2097648       5130720  4.2BSD   2048 16384  328 # Cyl  5090 -  7170 
    e:        614880       7228368  4.2BSD   2048 16384  328 # Cyl  7171 -  7780 
    g:       2097648       7843248  4.2BSD   2048 16384  328 # Cyl  7781 -  9861 
    h:        921312       9940896  4.2BSD   2048 16384  328 # Cyl  9862 - 10775 
    i:       2570337            63   MSDOS                   # Cyl     0*-  2549 
    j:       3355632      10862208  4.2BSD   2048 16384  328 # Cyl 10776 - 14104 
    k:       2097648      14217840  4.2BSD   2048 16384  328 # Cyl 14105 - 16185 
    l:       2097648      16315488  4.2BSD   2048 16384  328 # Cyl 16186 - 18266 
    m:      59727024      18413136  4.2BSD   2048 16384  328 # Cyl 18267 - 77519 
d167 11
a177 11
.Pa /etc/fstab Ns :
.Bd -literal
  /dev/wd0a / ffs rw,softdep 1 1
  /dev/wd0m /home ffs rw,softdep,nodev,nosuid 1 2
  /dev/wd0d /tmp ffs rw,softdep,nodev,nosuid 1 2
  /dev/wd0g /usr ffs rw,softdep,nodev 1 2
  /dev/wd0h /usr/X11R6 ffs rw,softdep,nodev 1 2
  /dev/wd0j /usr/local ffs rw,softdep,nodev 1 2
  /dev/wd0k /usr/obj ffs rw,softdep,nodev,nosuid 1 2
  /dev/wd0l /usr/src ffs rw,softdep,nodev,nosuid 1 2
  /dev/wd0e /var ffs rw,softdep,nodev,nosuid 1 2
a178 1
.Pp
d193 1
a193 1
.Xr disklabel 8 Ns ),
a233 1
.Pp
a241 3
.Bd -literal
    fdisk:*0>
.Ed
d243 4
a246 1
* means that the in-memory copy of the boot block has been modified, but
d287 1
a287 1
Note that this option will overwrite the NT disk
a323 1
.Pp
d325 1
a325 1
ensure that
@


1.46
log
@make this useable to people busy installing
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.45 2005/03/29 19:35:25 otto Exp $
d126 1
a126 1
  # using MBR partition 3: type A6 off 2570463 size 75569697 
@


1.45
log
@Allow setting of partition flag with an optional explicit value. PR 4143.
ok weingart@@ deraadr@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.44 2005/01/19 15:48:20 deraadt Exp $
d31 1
a31 1
.Nd DOS partition maintenance program
d41 10
a50 11
In order for the BIOS to boot the kernel, certain conventions must be
adhered to.
Sector 0 of a bootable hard disk must contain boot code,
an MBR partition table, and a magic number (0xAA55).
These MBR partitions (also
known as BIOS partitions) can be used to break the disk up into several
pieces.
.Pp
The BIOS loads sector 0 of the boot disk into memory, verifies
the magic number, and begins executing the code at the first byte.
The normal DOS MBR boot code searches the MBR partition table for an
d52 1
a52 1
partition (indicated by a
d55 1
a55 1
is found, the boot block from that partition is loaded and executed in
d58 2
a59 18
The options are as follows:
.Bl -tag -width Ds
.It Fl i
Initialize the MBR sector.
.It Fl e
Edit existing MBR sectors.
.It Fl f Ar mbrname
Specifies an alternate MBR template file.
.It Fl u
Update MBR code, preserving existing partition table.
.It Xo Fl c Ar cylinders ,
.Fl h Ar heads ,
.Fl s Ar sectors
.Xc
Specifies an alternate BIOS geometry for
.Nm
to use.
.El
d61 2
a62 1
The DOS
d64 1
a64 7
program can be used to divide space on the disk into partitions and set
one active.
This
.Nm
program serves a similar purpose to the DOS program.
When called with no special flags, it prints the MBR partition
table of the specified device, i.e.,
d66 10
a75 10
    # fdisk fd0
    Disk: fd0       geometry: 80/2/18 [2880 sectors]
    Offset: 0       Signature: 0xAA55
             Starting        Ending
     #: id  cyl  hd sec -  cyl  hd sec [     start -       size]
    ----------------------------------------------------------------------
    *0: A6    0   0   1 -   79   1  18 [         0 -       2880] OpenBSD
     1: 00    0   0   0 -    0   0   0 [         0 -          0] unused
     2: A7    0   0   2 -   79   1  18 [         1 -       2879] NEXTSTEP
     3: 00    0   0   0 -    0   0   0 [         0 -          0] unused
d78 7
a84 11
The geometry displayed is the BIOS geometry unless another geometry
has been selected using the
.Fl c ,
.Fl h ,
and
.Fl s
options.
.Pp
This disk is divided into two partitions that happen to fill the disk.
The first partition overlaps the third partition.
(Used for debugging purposes.)
d87 2
a88 2
Number of partition table entry.
A
d90 1
a90 1
denotes the bootable partition.
d92 1
a92 1
System identifier.
d95 4
a98 2
magic number 166 decimal (A6 in hex).
If no 166 partition is found, it will use an older
d100 1
a100 1
partition (with a magic number of 165 or A5 in hex).
d102 1
a102 1
These fields provide the starting and ending address of the partition
d106 1
a106 1
partition in linear block addresses.
d110 1
a110 1
The sectors field is
d112 1
a112 1
and the start field is
d116 61
d178 30
a207 3
The
.Fl i
flag is used to indicate that the partition data is to be initialized.
d210 4
a213 2
will completely overwrite the primary MBR and partition table, either
using the default MBR template, or the one specified by the
d215 2
a216 2
flag.
In the default template, partition number 3 will be configured as an
d218 1
a218 1
partition spanning from cylinder 0, head 1, sector 1, and extending
d220 4
a223 7
This mode is designed to initialize an MBR the very first time,
or when it has been corrupted beyond repair.
.Pp
The
.Fl u
flag is used to update the MBR code on a given drive.
The MBR code extends from offset 0x000 to the start of the partition table
d227 2
a228 2
flag, except the existing partition table is preserved.
This is useful for writing new MBR code onto an existing drive, and is
d232 1
d234 1
d237 1
a237 2
flag is used to modify a partition table using an
interactive edit mode of the
d239 16
a254 23
program.
This mode is designed to allow you to change any partition on the
drive you choose, including extended partitions.
It is a very powerful mode,
but is safe as long as you do not execute the
.Em write
command, or answer in the negative (the default) when
.Nm
asks you about writing out changes.
.Sh COMMAND MODE
When you first enter this mode, you are presented with a prompt, that looks
like so:
.Em "fdisk: 0>" .
This prompt has two important pieces of information for you.
It will tell
you if the in-memory copy of the boot block has been modified or not.
If it has been modified, the prompt will change to look like:
.Em "fdisk:*0>" .
The second piece of information pertains to the number given in the prompt.
This number specifies the disk offset of the currently selected boot block
you are editing.
This number could be something other than zero when
you are editing extended partitions.
d256 2
a257 2
.Bl -tag -width "update"
.It Em help
d261 1
a261 1
.It Em manual
d263 1
a263 1
.It Em reinit
d266 1
a266 1
.It Em disk
d269 3
a271 4
has
probed.
You are given a chance to edit it if you wish.
.It Em edit
d274 4
a277 10
You may edit either in BIOS geometry mode,
or in sector offsets and sizes.
.It Em setpid
Change the partition
identifier of the given partition table entry.
This command is particularly useful for reassigning
an existing partition to
.Ox .
.It Em flag
Make the given partition table entry bootable.
d279 7
a285 7
If you wish to boot from an extended
partition, you will need to mark the partition table entry for the
extended partition as bootable.
If an optional value is given, the partition is marked with the given
value, and other partitions are not touched.
.It Em update
Update the machine code and 0xAA55 signature in the memory copy
d289 10
a298 1
.It Em swap
d300 1
a300 4
.It Em select
Select and load into memory the boot block pointed
to by the extended partition table entry in the current boot block.
.It Em print
d303 1
a303 1
.It Em write
d305 1
a305 2
You will be asked to confirm this operation.
.It Em exit
d311 1
a311 1
.It Em quit
d320 1
a320 1
.It Em abort
a323 11
The automatic calculation of starting cylinder etc. uses
a set of figures that represent what the BIOS thinks is the
geometry of the drive.
These figures are by default taken from the in-core disklabel, or
values that
.Em /boot
has passed to the kernel, but
.Nm
gives you an opportunity to change them if there is a need to.
This allows the user to create a bootblock that can work with drives
that use geometry translation under a potentially different BIOS.
d325 2
a326 2
If you hand craft your disk layout,
please make sure that the
d328 1
a328 1
partition starts on a cylinder boundary.
a329 9
.Pp
Editing an existing partition is risky, and may cause you to
lose all the data in that partition.
.Pp
You should run this program interactively once or twice to see how it works.
This is completely safe as long as you answer the
.Dq write
questions in the
negative.
d336 3
d340 2
a342 7
.Sh BUGS
There are subtleties
.Nm
detects that are not explained in this manual page.
As well, chances are that some of the subtleties it should detect are being
steamrolled.
Caveat Emptor.
@


1.44
log
@add a swap primitive; ok various, will be polished after by tom
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.43 2004/06/26 11:45:40 jmc Exp $
d232 2
@


1.43
log
@new sentence, new line;
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.42 2004/06/22 23:01:55 tom Exp $
d237 2
@


1.42
log
@Make the interactive "update" command match the command-line "-u"
option by updatng/setting the 0xAA55 signature at the end of the sector.

ok nick@@ weingart@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.41 2003/06/03 13:16:08 jmc Exp $
d149 2
a150 1
flag. In the default template, partition number 3 will be configured as an
d164 2
a165 2
flag, except the existing partition table is preserved. This
is useful for writing new MBR code onto an existing drive, and is
@


1.41
log
@- section reorder
- some mdoc fixes
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.40 2003/06/03 01:13:19 weingart Exp $
d232 2
a233 2
Update the machine code in the memory copy of the currently selected
boot block.
@


1.40
log
@Nuke terms 3 & 4.
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.39 2003/01/31 21:54:40 jmc Exp $
d171 1
a171 1
flag is used to modify a partition table using an 
d223 2
a224 1
an existing partition to OpenBSD.
@


1.39
log
@typos;
eeprom(8): added .Ar to fields, removed references to sun3
sshd(8): help and ok markus@@

help and ok millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.38 2002/01/04 21:20:56 kjell Exp $
a13 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"    This product includes software developed by Tobias Weingartner.
.\" 4. The name of the author may not be used to endorse or promote products
.\"    derived from this software without specific prior written permission.
@


1.38
log
@sync to reality.
Note that the NT serial number is now whacked with an update, or -u
Fix signature in example.
Explicitly state the MBR signature (0xAA55)
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.37 2001/12/21 11:41:50 mpech Exp $
d73 1
a73 1
Update MBR code, preserving existing partition table
d132 1
a132 1
in BIOS geometry
d174 1
a174 1
The flag
d176 2
a177 1
is used to modify a partition table using a interactive edit mode of the
d200 1
a200 1
This number could be something different that zero when
@


1.37
log
@Initial patch for a new mdoc issue.
Powered by @@mantoya:
o) kill extra line in the end of file;
o) kill extra space in the end of line;
o) replace blank lines with .Pp;

millert@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.36 2001/12/15 02:12:26 kjell Exp $
d31 1
a31 1
.Dd April 4, 1993
d49 1
a49 1
an MBR partition table, and a magic number.
d95 1
a95 1
    Offset: 0       Signatures: 0xAA55,0x0
d164 2
d170 1
a170 1
almost equivalent to the DOS command
d172 1
d235 4
a238 2
Update the machine code in the memory copy of the
currently selected boot block.
@


1.36
log
@Get this damn diff out of my tree. ok from weingart@@, deraadt@@ and others.
Add a -u flag to fdisk which updates MBR code, but leaves the partition
table intact. There are still issues with 'update' having different behavior,
but I'll resolve those shortly
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.35 2001/08/17 11:13:57 mpech Exp $
a302 1

@


1.35
log
@o) {Open,Net,Free}BSD -> .{O,N,F}x;
o) "start sentence on new line" issues;
o) minimal -mdoc improvements;

millert@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.34 2001/01/01 21:05:34 angelos Exp $
d39 1
a39 1
.Op Fl ie
d72 2
d151 2
a152 2
will completely overwrite the primary MBR, and start with a fresh one using
a default template, or one given by the
d154 1
a154 2
flag.
It will set up partition number 3 to be an
d156 1
a156 1
partition, that will start at cylinder 0, head 1, sector 1, and extend
d160 9
a168 1
It is almost equivalent to the DOS command
@


1.34
log
@New command "setpid", just changes the ID of a partition (no other
parameters editing) -- vassilip@@dsl.cis.upenn.edu
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.33 2000/11/09 17:52:54 aaron Exp $
d125 3
a127 2
If no 166 partition is found, it will use an older FreeBSD partition
(with a magic number of 165 or A5 in hex).
@


1.33
log
@Change all option list specifications to ".Bl -tag -width Ds". Most man
pages just needed their -width parameter tweaked to "Ds", which provides
a nice width of 6 constant characters. For consistency more than anything.
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.32 2000/05/02 00:18:19 deraadt Exp $
d210 5
@


1.32
log
@Oxify; aaron
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.31 2000/03/18 22:55:55 aaron Exp $
d65 1
a65 1
.Bl -tag -width "-c cylinders"
@


1.31
log
@Remove hard sentence breaks, and some other cleanup along the way.
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.30 2000/03/05 00:28:49 aaron Exp $
d122 1
a122 1
.Os
d153 1
a153 1
.Os
d261 1
a261 1
.Os
@


1.30
log
@Finish standardizing options list introduction.
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.29 2000/01/22 02:17:53 aaron Exp $
d47 4
a50 2
adhered to.  Sector 0 of a bootable hard disk must contain boot code,
an MBR partition table, and a magic number.  These MBR partitions (also
d52 3
a54 1
pieces.  The BIOS loads sector 0 of the boot disk into memory, verifies
d59 1
a59 1
.Dq \&*
d112 2
a113 2
The first partition overlaps the third partition.  (Used for debugging
purposes.)
d116 2
a117 1
Number of partition table entry.  A
d151 2
a152 1
flag.  It will set up partition number 3 to be an
d157 2
a158 2
or when it has been corrupted beyond repair.  It is almost equivalent
to the DOS command
d165 4
a168 2
program.  This mode is designed to allow you to change any partition on the
drive you choose, including extended partitions.  It is a very powerful mode,
d178 4
a181 3
This prompt has two important pieces of information for you.  It will tell
you if the in-memory copy of the boot block has been modified or not.  If it
has been modified, the prompt will change to look like:
d185 4
a188 3
you are editing.  This number could be something different that zero when
you are editing extended partitions.  The list of commands and their
explanations are given below.
d203 2
a204 1
probed.  You are given a chance to edit it if you wish.
d207 2
a208 1
the current boot block.  You may edit either in BIOS geometry mode,
d211 3
a213 2
Make the given partition table entry bootable.  Only one
entry can be marked bootable. If you wish to boot from an extended
d226 2
a227 2
Write the in-memory copy of the boot block to disk.  You will
be asked to confirm this operation.
d239 2
a240 1
program if there is none.  Unlike
@


1.29
log
@ie. -> i.e.,
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.28 1999/09/23 23:23:30 aaron Exp $
d60 2
a61 3
The following options are available:
.Pp
.Bl -tag -width "-c cylinders" -compact
a63 1
.Pp
a65 1
.Pp
d68 4
a71 4
.Pp
.It Fl c Ar cylinders
.It Fl h Ar heads
.It Fl s Ar sectors
@


1.28
log
@Caveat Emperor -> Caveat Emptor; kwesterback@@home.com
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.27 1999/07/21 01:07:53 deraadt Exp $
d88 1
a88 1
table of the specified device, ie.
@


1.27
log
@use .Ar on later .It Fl lines
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.26 1999/07/04 18:59:39 aaron Exp $
d271 7
a277 3
There are subtleties that the program detects that are not explained in
this manual page.  Also, chances are that some of the subtleties it should
detect are being steamrolled.  Caveat Emperor.
@


1.26
log
@trash some old leftover macros and replace them with -mdoc macros
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.25 1999/07/03 02:11:07 aaron Exp $
d41 1
a41 1
.Op Fl c Ar cyls
d43 1
a43 1
.Op Fl s Ar sects
d61 2
a62 1
.Bl -tag -width "-f mbrname"
d65 1
d68 1
d71 4
a74 1
.It Fl c,h,s
@


1.25
log
@remove redundant .Pp macros
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.24 1999/06/06 18:43:10 aaron Exp $
d114 1
a114 1
.oS
d144 1
a144 1
.oS
d244 1
a244 1
.oS
@


1.24
log
@mention the `manual' command; mcsmart@@engin.umich.edu
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.23 1999/06/04 02:45:15 aaron Exp $
a228 1
.Pp
@


1.23
log
@start to remove non-escaped trailing whitespace, it can confuse troff; pjanzen@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.22 1999/05/23 14:11:15 aaron Exp $
d181 2
@


1.22
log
@remove argument from .Os macros so value in /usr/share/tmac/mdoc/doc-common
is used instead; kwesterback@@home.com
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.21 1999/03/18 11:04:50 aaron Exp $
d78 1
a78 1
This 
d102 1
a102 1
options. 
@


1.21
log
@powerfull -> powerful; garath@@ntplx.net
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.20 1998/12/15 01:20:30 aaron Exp $
d33 1
a33 1
.Os OpenBSD
@


1.20
log
@always give .Nm macros an argument in SYNOPSIS sections; krw@@tcn.net
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.19 1998/11/28 19:56:18 aaron Exp $
d157 1
a157 1
drive you choose, including extended partitions.  It is a very powerfull mode,
@


1.19
log
@kill redundant .Nm macro arguments; other misc fixes
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.18 1998/11/11 22:19:56 aaron Exp $
d38 1
a38 1
.Nm
@


1.18
log
@more `` '' -> .Dq sillyness; remove redundant .Pp macros; other misc fixes
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.17 1998/09/23 01:20:23 aaron Exp $
d186 1
a186 1
.Nm fdisk
@


1.17
log
@alphabetize SEE ALSO entries and order them numerically according to section
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.16 1998/09/17 04:14:52 aaron Exp $
d53 4
a56 1
`active' partition (indicated by a `*' in the first column), and if one
d109 3
a111 1
Number of partition table entry.  A '*' denotes the bootable partition.
d127 6
a132 3
.Em "NOTE:"
Note that the sectors field is `1 based', and the start field is
`0 based'.  The CHS values will need to be in the BIOS's geometry
d149 2
a150 1
to the DOS command `FDISK /MBR'.
@


1.16
log
@sbin/ man page fixes
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.15 1998/09/01 16:38:16 deraadt Exp $
d252 2
a253 2
.Xr disklabel 8 ,
.Xr boot_i386 8
@


1.15
log
@more man page fixes; aaron@@ug.cs.dal.ca
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.14 1998/04/01 18:46:48 deraadt Exp $
d48 1
a48 1
a MBR partition table, and a magic number.  These MBR partitions (also
d53 1
a53 1
`active' partition (indicated by a `*' in the fist column), and if one
d66 1
a66 1
Specify an alternate BIOS geometry for
d103 1
a103 1
purposes)
d153 1
a153 1
askes you about writing out changes.
d159 1
a159 1
you if the in memory copy of the boot block has been modified or not.  If it
d169 1
a169 1
This command gives you a list of commands that
d173 1
a173 1
This command initializes the currently selected, in memory copy, of the
d176 4
a179 2
This command will display the current drive geometry that fdisk has
probed.  You are given a chance to edit them if you wish.
d181 1
a181 1
This command is used to edit a given table entry in the memory copy of
d185 1
a185 1
This command makes the given partition table entry bootable.  Only one
d190 1
a190 1
This command will update the machine code in the memory copy of the
d193 1
a193 1
This command will select and load into memory the boot block pointed
d196 1
a196 1
This command will print the currently selected in memory copy of the boot
d199 1
a199 1
This will write the in memory copy of the boot block to disk.  You will
d202 4
a205 2
This will exit the current level of fdisk, either returning to the
previously selected in memory copy of a boot block, or exit the
d208 4
a211 2
This will exit the current level of fdisk, either returning to the
previously selected in memory copy of a boot block, or exit the
d223 1
a223 1
These figures are by default taken from the incore disklabel, or
d242 3
a244 1
This is completely safe as long as you answer the write questions in the
d247 4
a250 2
.Pa /usr/mdec/mbr
- the default MBR template
d256 1
a256 1
this manual page.  Also, chances are that some of the subleties it should
@


1.14
log
@clarify
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.13 1998/02/19 20:48:07 deraadt Exp $
d140 1
a140 1
or when it has been corrupted beyond repair.  It is almost equivelant
@


1.13
log
@new netbsd partition type
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.12 1998/01/19 15:56:33 weingart Exp $
d93 8
d116 1
a116 1
in physical BIOS geometry
d180 1
a180 1
the current boot block.  You may edit either in physical geometry mode,
@


1.12
log
@Fix wording.  Thanks to austin@@canuck.com
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.11 1997/12/23 23:53:02 deraadt Exp $
d104 1
a104 1
If no 166 partition is found, it will use an older 386BSD partition
@


1.11
log
@swap exit and quit
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.10 1997/10/16 10:20:19 deraadt Exp $
d93 3
a95 2
This disk is divided into three partitions that happen to fill the disk.
Partition two overlaps partition one.  (Used for debugging purposes)
@


1.10
log
@oops
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.9 1997/10/16 10:17:53 deraadt Exp $
d199 1
a199 1
it does NOT write the modified block out.
@


1.9
log
@match recent changes
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.8 1997/09/30 00:10:34 mickey Exp $
d83 1
a83 1
    Offset: 0       Signatures: 0xAA55,0x6F727265
@


1.8
log
@2nd try
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.7 1997/09/29 23:12:03 mickey Exp $
d82 2
a83 8
    Disk: fd0
    Disk GEO: 80/2/18
    Bios GEO: 80/2/18

    Disk offset: 0
    NT Serial#: 0
    Signature: 0xAA55

d163 1
a163 1
.It Em init
d195 6
@


1.7
log
@fix Notes:
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.6 1997/09/29 22:58:20 weingart Exp $
d119 1
a119 1
.Em "Note:"
@


1.6
log
@New fdisk code with interactive (command line type)
editing code.  Rewrite from the ground up, save about
20 lines of code.  Seems to create valid partition
tables on i386 and alphas.
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d117 3
a119 1
.It Em "Note:"
a122 1
.El
@


1.5
log
@first pass at explaining the changes
@
text
@d1 29
a29 2
.\"	$OpenBSD: fdisk.8,v 1.4 1996/09/25 11:24:11 deraadt Exp $
.\"	$NetBSD: fdisk.8,v 1.8 1995/03/18 14:55:34 cgd Exp $
d39 7
a45 4
.Op Fl aium
.Op f Ar mbrname
.Op Ar device
.Sh PROLOGUE
d47 5
a51 7
adhered to.
Sector 0 of the disk must contain boot code, a MBR partition table,
and a magic number.
These MBR partitions (also known as BIOS partitions) can be used to
break the disk up into several pieces.
The BIOS loads sector 0 into memory, verifies the magic number, and
begins executing the code at the first byte.
d53 3
a55 3
`active' partition (indicated by a flag value of 0x80); if one is found,
the boot block from that partition is loaded and replaces the original
boot block.
d58 1
a58 3
.Bl -tag -width indent
.It Fl a
To change the active partition.
d60 3
a62 5
Initialize the MBR sector from other information.
.It Fl u
Update, or change, the MBR sector information.
.It Fl m
Force creation of a new MBR sector.
d64 5
a68 1
Specifies an alternate MBR file.
d81 16
a96 22
    # fdisk wd0
    Using device /dev/rwd0c:
    Parameters extracted from in-core disklabel are:
        cylinders=769 heads=15 sectors/track=33
        sectors/cylinder=495 total=380655
    Parameters to be used for BIOS calculations are:
        cylinders=769 heads=15 sectors/track=33
        sectors/cylinder=495 
    Warning: BIOS sector numbers start at 1 (not 0)
    MBR Partition 0: sysid 166=0xa6 (OpenBSD)
        start 495, size 380160 (185 MB), flag 0x80
        beg: cylinder    1, head   0, sector  1
        end: cylinder  768, head  14, sector 33
    MBR Partition 1: sysid 6=0x06 (Primary 'big' DOS (> 32MB))
        start 380655, size 2475 (1 MB), flag 0x00
        beg: cylinder  764, head   0, sector  1
        end: cylinder  768, head  14, sector 33
    MBR Partition 2: <UNUSED>
    MBR Partition 3: sysid 165=0xa5 (386BSD/FreeBSD/NetBSD)
        start 383130, size 224234 (109 MB), flag 0x00
        beg: cylinder  769, head   0, sector  2
        end: cylinder  197, head  14, sector 33
d100 6
a105 5
The second partition overlaps the end of the first.
(Used for debugging purposes)
.Bl -tag -width "cyl, sector and head"
.It Em "sysid"
is used to label the partition.
d110 7
a116 9
(with a magic number of 165).
.It Em "start and size"
fields provide the start address
and size of a partition in sectors.
.It Em "flag 0x80"
specifies that this is the active partition.
.It Em "cyl, sector and head"
fields are used to specify the beginning address
and end address for the partition.
d118 3
a120 2
these numbers are calculated using BIOS's understanding of the disk
geometry and saved in the bootblock.
d123 1
a123 1
The flags
d125 1
a125 3
or
.Fl u
are used to indicate that the partition data is to be updated.
d128 75
a202 61
will enter a conversational mode.
This mode is designed not to change any data unless you explicitly
tell it to;
.Nm
selects defaults for its questions to guarantee that behavior.
.Pp
It displays each partition and asks if you want to edit it.
If you reply affirmatively,
it will step through each field showing the old value
and asking for a new one.
When you are done with a partition,
.Nm
will display the information again and ask if it is correct.
.Nm
will then procede to the next entry.
.Pp
Getting the
.Em cyl, sector,
and
.Em head
fields correct is tricky.
So by default,
they will be calculated for you;
you can specify them if you choose.
.Pp
After all the partitions are processed,
you are given the option to change the
.Em active
partition.
To change only the
.Em active
partition, you can use the
.Fl a
flag instead.
.Pp
Finally,
when the all the data for the first sector has been accumulated,
.Nm
will ask if you really want to rewrite sector 0.
Only if you reply affirmatively to this question will
.Nm
write anything to the disk.
.Pp
The difference between the
.Fl u
flag and
.Fl i
flag is that
the
.Fl u
flag just edits the fields as they appear on the disk, while the
.Fl i
flag is used to `initialize' sector 0.
The
.Fl i
flag instructs
.Nm
to start by making the first 3 partitions empty, setting the last partition
to use the whole disk for
.oS ,
and marking the last partition active.
d207 4
a210 1
These figures are by default taken from the incore disklabel, but
d212 1
a212 1
gives you an opportunity to change them.
d214 1
a214 1
that use geometry translation under the BIOS.
d226 2
a227 1
This is completely safe as long as you answer the last question in the negative.
d230 1
a230 1
- the default MBR that can be written onto the disk
d232 2
a233 1
.Xr disklabel 8
d236 2
a237 1
this manual page.
@


1.4
log
@permit loading of a special MBR bootblock -- do not encode a fake MBR
bootblock inside the program. cleanup printed output. do not assume 'd'
partition.  Solves a whole bunch of other interaction problems with
disklabel.  Has been tested a fair bit, but will endure more testing
(at the hands of the users! Hahahaha!)
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.3 1996/06/23 14:30:24 deraadt Exp $
d12 2
a13 1
.Op Fl aiu
d20 23
a42 9
MBR partitions (also known as BIOS partitions) can be used to break the
disk up into several pieces.
The BIOS brings in sector 0, verifies the magic number, and begins
executing the code at the first byte.
This code is turn searches the MBR partition table for an `active'
partition.
If one is found, the boot block from that partition is loaded and replaces
the original boot block.
Under DOS, you could have one or more partitions with one active.
d47 1
a47 2
.Pp
This program
d49 3
a51 4
serves a similar purpose to the DOS program.
When called with no special flags, it prints the sector 0 partition
table of the specified device
An example follows:
d62 2
a63 2
    MBR Partition 0: sysid 165=0xa5 (OpenBSD/NetBSD/FreeBSD/386BSD)
        start 495, size 380160 (185 MB), flag 0x00
d67 1
a67 1
        start 378180, size 2475 (1 MB), flag 0x80
d71 2
a72 2
    MBR Partition 3: sysid 99=0x63 (ISC, System V/386, GNU HURD or Mach)
        start 380656, size 224234 (109 MB), flag 0x00
d85 3
a87 1
magic number 165 decimal (A5 in hex).
d91 1
a91 1
.It Em "flag 80"
d97 2
a98 2
these numbers are calculated using BIOS's understanding of the disk geometry
and saved in the bootblock.
d106 1
a106 1
The
d108 3
a110 2
program will enter a conversational mode.
This mode is designed not to change any data unless you explicitly tell it to;
@


1.3
log
@update rcsid
@
text
@d1 1
a1 1
.\"	$OpenBSD: fdisk.8,v 1.8 1995/03/18 14:55:34 cgd Exp $
d17 4
a20 3
Sector 0 of the disk must contain boot code, a partition table, and a
magic number.
BIOS partitions can be used to break the disk up into several pieces.
d23 1
a23 1
This code is turn searches the DOS partition table for an `active'
d36 2
a37 1
When called with no arguments, it prints the sector 0 partition table.
d40 22
a61 26
	******* Working on device /dev/rwd0d *******
	parameters extracted from in-core disklabel are:
	cylinders=769 heads=15 sectors/track=33 (495 sectors/cylinder)

	parameters to be used for BIOS calculations are:
	cylinders=769 heads=15 sectors/track=33 (495 sectors/cylinder)
		
	Warning: BIOS sector numbering starts with sector 1
	Information from DOS bootblock is:
	The data for partition 0 is:
	sysid 165 (OpenBSD/NetBSD/FreeBSD/386BSD)
    	    start 495, size 380160 (185 MB), flag 0
		beg: cylinder    1, head   0, sector  1
		end: cylinder  768, head  14, sector 33
	The data for partition 1 is:
	sysid 164 (unknown)
    	    start 378180, size 2475 (1 MB), flag 0
		beg: cylinder  764, head   0, sector  1
		end: cylinder  768, head  14, sector 33
	The data for partition 2 is:
	<UNUSED>
	The data for partition 3 is:
	sysid 99 (ISC UNIX, other System V/386, GNU HURD or Mach)
    	    start 380656, size 224234 (109 MB), flag 80
		beg: cylinder  769, head   0, sector  2
		end: cylinder  197, head  14, sector 33
d64 1
a64 1
The disk is divided into three partitions that happen to fill the disk.
d174 3
@


1.2
log
@openbsd, not netbsd
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
.\" .Os BSD 4
d31 1
a31 1
The NetBSD program
d47 1
a47 1
	sysid 165 (NetBSD)
d70 3
a72 1
is used to label the partition.  NetBSD reserves the
d151 3
a153 1
to use the whole disk for NetBSD, and marking the last partition active.
d165 3
a167 1
please make sure that the NetBSD partition starts on a cylinder boundary.
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
