head	1.7;
access;
symbols
	OPENBSD_6_2:1.7.0.4
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.5.0.8
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.4
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.4.0.22
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.14
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.18
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.16
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.12
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.10
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.8
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.6
	OPENBSD_5_0:1.4.0.4
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.3.0.20
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.16
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.18
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.14
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.12
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.10
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.8
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.6
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.4
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.2
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.2.0.8
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.6
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.4
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.2
	OPENBSD_3_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.7
date	2017.09.09.13.02.52;	author brynet;	state Exp;
branches;
next	1.6;
commitid	cwr6FpLV7RETuOBH;

1.6
date	2017.09.05.15.41.25;	author brynet;	state Exp;
branches;
next	1.5;
commitid	UGtgLdiBxweIZpQK;

1.5
date	2015.10.10.22.36.06;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	gjxLpEqCRrEu4Dmr;

1.4
date	2010.09.21.05.56.58;	author henning;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.15.16.38.04;	author canacar;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.15.20.15.14;	author canacar;	state Exp;
branches;
next	1.1;

1.1
date	2003.10.22.18.51.55;	author canacar;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Rework pflogd(8)'s fork+exec model; re-exec the unpriv child, not the
privileged parent.

Based on feedback from deraadt@@ and bluhm@@ (worked on syslogd).

ok deraadt@@
@
text
@/*	$OpenBSD: pflogd.h,v 1.6 2017/09/05 15:41:25 brynet Exp $ */

/*
 * Copyright (c) 2003 Can Erkin Acar
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/limits.h>
#include <pcap.h>

#define DEF_SNAPLEN 160		/* pfloghdr + ip hdr + proto hdr fit usually */
#define PCAP_TO_MS 500		/* pcap read timeout (ms) */
#define PCAP_NUM_PKTS 1000	/* max number of packets to process at each loop */
#define PCAP_OPT_FIL 1		/* filter optimization */
#define FLUSH_DELAY 60		/* flush delay */

#define PFLOGD_LOG_FILE		"/var/log/pflog"
#define PFLOGD_DEFAULT_IF	"pflog0"

#define PFLOGD_MAXSNAPLEN	INT_MAX
#define PFLOGD_BUFSIZE		65536	/* buffer size for incoming packets */

void  logmsg(int priority, const char *message, ...);

/* Privilege separation */
void	priv_init(int, int, char **);
int	priv_init_pcap(int);
int	priv_set_snaplen(int snaplen);
int	priv_open_log(void);
int	priv_move_log(void);
int	priv_pcap_stats(struct pcap_stat *);

int   init_pcap(void);
void set_pcap_filter(void);
/* File descriptor send/recv */
void send_fd(int, int);
int  receive_fd(int);

extern int Debug;
@


1.6
log
@fork+exec model for pflogd(8); move pcap init to the re-exec'd privsep
parent and use 'legit' fdpassing primitives to send the bpf fd to the
unprivileged child process.

Also reduces the pledge(2) promises in the unpriv child to just
   "stdio recvfd"

with help from deraadt, pcap feedback from canacar

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pflogd.h,v 1.5 2015/10/10 22:36:06 deraadt Exp $ */
d37 1
a37 2
void	priv_init(int, char **);
__dead void priv_exec(int, int, char **);
@


1.5
log
@pflogd contained the same "privsep error" as tcpdump -- assuming that
it can ioctl()'s against a bpf device node.  Privsep that operation
via a message to the parent process.  Unfortunately "rpath wpath cpath"
is still needed due to SIGHUP handling, but I have asked canacar the
expert to look into this.
@
text
@d1 1
a1 1
/*	$OpenBSD: pflogd.h,v 1.4 2010/09/21 05:56:58 henning Exp $ */
d37 3
a39 1
int	priv_init(void);
a43 1
pcap_t *pcap_open_live_fd(int fd, int snaplen, char *ebuf);
d45 1
@


1.4
log
@bump default snaplen so that pfloghdr + ip hdr + prot hdr usually fit
@
text
@d1 1
a1 1
/*	$OpenBSD: pflogd.h,v 1.3 2006/01/15 16:38:04 canacar Exp $ */
d41 1
@


1.3
log
@If the log file is invalid/incompatible, try to rename the bad log file
and continue with a new name instead of suspending.
ok mcbride@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pflogd.h,v 1.2 2004/01/15 20:15:14 canacar Exp $ */
d22 1
a22 1
#define DEF_SNAPLEN 116		/* default plus allow for larger header of pflog */
@


1.2
log
@Try to preserve the integrity of the log file in case of errors/unexpected
shutdowns etc. Also check logfile integrity on startup and suspend
logging if an inconsistency is detected.
ok dhartmei@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d40 1
@


1.1
log
@privilege seperated pflogd

_pflogd user and group must be created for proper operation.

ok frantzen@@ henning@@ mcbride@@ deraadt@@
@
text
@d1 2
d19 1
d25 1
a25 1
#define PCAP_OPT_FIL 0		/* filter optimization */
d30 3
@

