head	1.24;
access;
symbols
	OPENBSD_6_1_BASE:1.24
	OPENBSD_6_0:1.23.0.2
	OPENBSD_6_0_BASE:1.23
	OPENBSD_5_9:1.22.0.2
	OPENBSD_5_9_BASE:1.22
	OPENBSD_5_8:1.21.0.6
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.21.0.2
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.20.0.22
	OPENBSD_5_6_BASE:1.20
	OPENBSD_5_5:1.20.0.20
	OPENBSD_5_5_BASE:1.20
	OPENBSD_5_4:1.20.0.16
	OPENBSD_5_4_BASE:1.20
	OPENBSD_5_3:1.20.0.14
	OPENBSD_5_3_BASE:1.20
	OPENBSD_5_2:1.20.0.12
	OPENBSD_5_2_BASE:1.20
	OPENBSD_5_1_BASE:1.20
	OPENBSD_5_1:1.20.0.10
	OPENBSD_5_0:1.20.0.8
	OPENBSD_5_0_BASE:1.20
	OPENBSD_4_9:1.20.0.6
	OPENBSD_4_9_BASE:1.20
	OPENBSD_4_8:1.20.0.4
	OPENBSD_4_8_BASE:1.20
	OPENBSD_4_7:1.20.0.2
	OPENBSD_4_7_BASE:1.20
	OPENBSD_4_6:1.19.0.16
	OPENBSD_4_6_BASE:1.19
	OPENBSD_4_5:1.19.0.12
	OPENBSD_4_5_BASE:1.19
	OPENBSD_4_4:1.19.0.10
	OPENBSD_4_4_BASE:1.19
	OPENBSD_4_3:1.19.0.8
	OPENBSD_4_3_BASE:1.19
	OPENBSD_4_2:1.19.0.6
	OPENBSD_4_2_BASE:1.19
	OPENBSD_4_1:1.19.0.4
	OPENBSD_4_1_BASE:1.19
	OPENBSD_4_0:1.19.0.2
	OPENBSD_4_0_BASE:1.19
	OPENBSD_3_9:1.18.0.4
	OPENBSD_3_9_BASE:1.18
	OPENBSD_3_8:1.18.0.2
	OPENBSD_3_8_BASE:1.18
	OPENBSD_3_7:1.17.0.8
	OPENBSD_3_7_BASE:1.17
	OPENBSD_3_6:1.17.0.6
	OPENBSD_3_6_BASE:1.17
	OPENBSD_3_5:1.17.0.4
	OPENBSD_3_5_BASE:1.17
	OPENBSD_3_4:1.17.0.2
	OPENBSD_3_4_BASE:1.17
	OPENBSD_3_3:1.13.0.4
	OPENBSD_3_3_BASE:1.13
	OPENBSD_3_2:1.13.0.2
	OPENBSD_3_2_BASE:1.13
	OPENBSD_3_1:1.12.0.2
	OPENBSD_3_1_BASE:1.12
	OPENBSD_3_0:1.11.0.4
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9:1.11.0.2
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_8:1.10.0.2
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.9.0.2
	OPENBSD_2_7_BASE:1.9
	OPENBSD_2_6:1.8.0.10
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.8.0.8
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.8.0.6
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.8.0.4
	OPENBSD_2_3_BASE:1.8
	OPENBSD_2_2:1.8.0.2
	OPENBSD_2_2_BASE:1.8
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.24
date	2016.09.10.16.53.30;	author natano;	state Exp;
branches;
next	1.23;
commitid	OheBN9SCINTycSAi;

1.23
date	2016.05.27.19.45.04;	author deraadt;	state Exp;
branches;
next	1.22;
commitid	nQEqvpt7rKDi6fz0;

1.22
date	2015.12.08.15.56.42;	author tedu;	state Exp;
branches;
next	1.21;
commitid	TkpsRkE1aMxKv8To;

1.21
date	2015.01.16.06.39.59;	author deraadt;	state Exp;
branches;
next	1.20;
commitid	Uu5nFG3wCl0LACBb;

1.20
date	2009.10.27.23.59.33;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2006.08.11.11.47.39;	author pedro;	state Exp;
branches;
next	1.18;

1.18
date	2005.04.08.20.09.37;	author jaredy;	state Exp;
branches;
next	1.17;

1.17
date	2003.07.03.22.41.40;	author tedu;	state Exp;
branches;
next	1.16;

1.16
date	2003.06.11.06.22.13;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2003.06.10.17.51.01;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2003.06.02.20.06.15;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2002.04.23.18.54.12;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2002.02.16.21.27.36;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2001.04.04.20.19.01;	author gluk;	state Exp;
branches;
next	1.10;

1.10
date	2000.06.17.20.23.24;	author niklas;	state Exp;
branches;
next	1.9;

1.9
date	2000.01.22.20.25.01;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	97.08.20.05.34.24;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	97.08.20.05.10.21;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	97.06.20.14.07.46;	author kstailey;	state Exp;
branches;
next	1.5;

1.5
date	97.01.15.23.41.20;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	96.06.23.14.31.20;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.04.21.23.46.36;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.11.06.21.11.10;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.43.39;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.43.39;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Add a noperm mount flag for FFS to be used for building release sets
without root privileges. This is only the kernel/mount flag; additional
work in the build Makefile's will be necessary such that the files in
$DESTDIR are created with correct permissions.

tedu couldn't find anything wrong with it in a quick review
idea & ok deraadt
@
text
@/*	$OpenBSD: mount_ffs.c,v 1.23 2016/05/27 19:45:04 deraadt Exp $	*/
/*	$NetBSD: mount_ffs.c,v 1.3 1996/04/13 01:31:19 jtc Exp $	*/

/*-
 * Copyright (c) 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/mount.h>

#include <err.h>
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <limits.h>

#include "mntopts.h"

void	ffs_usage(void);

static const struct mntopt mopts[] = {
	MOPT_STDOPTS,
	MOPT_WXALLOWED,
	MOPT_NOPERM,
	MOPT_ASYNC,
	MOPT_SYNC,
	MOPT_UPDATE,
	MOPT_RELOAD,
	MOPT_FORCE,
	MOPT_SOFTDEP,
	{ NULL }
};

int
main(int argc, char *argv[])
{
	struct ufs_args args;		/* XXX ffs_args */
	int ch, mntflags;
	char fs_name[PATH_MAX], *errcause;

	mntflags = 0;
	optind = optreset = 1;		/* Reset for parse of new argv. */
	while ((ch = getopt(argc, argv, "o:")) != -1)
		switch (ch) {
		case 'o':
			getmntopts(optarg, mopts, &mntflags);
			break;
		case '?':
		default:
			ffs_usage();
		}
	argc -= optind;
	argv += optind;

	if (argc != 2)
		ffs_usage();

	args.fspec = argv[0];		/* The name of the device file. */
	if (realpath(argv[1], fs_name) == NULL) 	/* The mount point. */
		err(1, "realpath %s", argv[1]);

#define DEFAULT_ROOTUID	-2
	args.export_info.ex_root = DEFAULT_ROOTUID;
	if (mntflags & MNT_RDONLY)
		args.export_info.ex_flags = MNT_EXRDONLY;
	else
		args.export_info.ex_flags = 0;

	if (mntflags & MNT_NOPERM)
		mntflags |= MNT_NODEV | MNT_NOEXEC;

	if (mount(MOUNT_FFS, fs_name, mntflags, &args) < 0) {
		switch (errno) {
		case EMFILE:
			errcause = "mount table full";
			break;
		case EOPNOTSUPP:
			errcause = "filesystem not supported by kernel";
			break;
		case EROFS:
			errcause =
			    "filesystem must be mounted read-only; you may need to run fsck";
			break;
		default:
			errcause = strerror(errno);
			break;
		}
		errx(1, "%s on %s: %s", args.fspec, fs_name, errcause);
	}
	exit(0);
}

void
ffs_usage(void)
{
	(void)fprintf(stderr, "usage: mount_ffs [-o options] special node\n");
	exit(1);
}
@


1.23
log
@W^X violations are no longer permitted by default.  A kernel log message
is generated, and mprotect/mmap return ENOTSUP.  If the sysctl(8) flag
kern.wxabort is set then a SIGABRT occurs instead, for gdb use or coredump
creation.

W^X violating programs can be permitted on a ffs/nfs filesystem-basis,
using the "wxallowed" mount option.  One day far in the future
upstream software developers will understand that W^X violations are a
tremendously risky practice and that style of programming will be
banished outright.  Until then, we recommend most users need to use the
wxallowed option on their /usr/local filesystem.  At least your other
filesystems don't permit such programs.

ok jca kettenis mlarkin natano
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_ffs.c,v 1.22 2015/12/08 15:56:42 tedu Exp $	*/
d51 1
d95 3
@


1.22
log
@spaces to tabs
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_ffs.c,v 1.21 2015/01/16 06:39:59 deraadt Exp $	*/
d50 1
@


1.21
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_ffs.c,v 1.20 2009/10/27 23:59:33 deraadt Exp $	*/
d83 1
a83 1
        args.fspec = argv[0];		/* The name of the device file. */
@


1.20
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_ffs.c,v 1.19 2006/08/11 11:47:39 pedro Exp $	*/
d33 1
a33 1
#include <sys/param.h>
d42 1
d64 1
a64 1
	char fs_name[MAXPATHLEN], *errcause;
@


1.19
log
@Give a less cryptic error message when trying to mount invalid file
systems, okay thib@@ ian@@ millert@@ beck@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_ffs.c,v 1.18 2005/04/08 20:09:37 jaredy Exp $	*/
a31 14

#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1993, 1994\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)mount_ufs.c	8.2 (Berkeley) 3/27/94";
#else
static char rcsid[] = "$OpenBSD: mount_ffs.c,v 1.18 2005/04/08 20:09:37 jaredy Exp $";
#endif
#endif /* not lint */
@


1.18
log
@Sync with recent realpath(3) changes:  on failure, don't use the second
argument "resolved", since it is undefined.

ok and help millert, otto
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_ffs.c,v 1.17 2003/07/03 22:41:40 tedu Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: mount_ffs.c,v 1.17 2003/07/03 22:41:40 tedu Exp $";
a110 4
			break;
		case EINVAL:
			errcause =
			    "specified device does not match mounted device";
@


1.17
log
@use realpath() in helpers instead of doing it ourselves every time.
also fixes pr1662.  from otto moerbeek
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_ffs.c,v 1.16 2003/06/11 06:22:13 deraadt Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: mount_ffs.c,v 1.16 2003/06/11 06:22:13 deraadt Exp $";
d98 1
a98 1
		err(1, "realpath %s", fs_name);
@


1.16
log
@ansification
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_ffs.c,v 1.15 2003/06/10 17:51:01 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: mount_ffs.c,v 1.15 2003/06/10 17:51:01 millert Exp $";
d77 1
a77 1
	char *fs_name, *errcause;
d97 2
a98 1
	fs_name = argv[1];		/* The mount point. */
@


1.15
log
@o make mount(2) return EROFS, not EPERM if ffs is dirty
o document EROFS in man page (2 possible causes)
o recognize EROFS in mount_ffs and try to give a reasonable error message
deraadt@@ OK
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_ffs.c,v 1.14 2003/06/02 20:06:15 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: mount_ffs.c,v 1.14 2003/06/02 20:06:15 millert Exp $";
d73 1
a73 3
main(argc, argv)
	int argc;
	char * const argv[];
d132 1
a132 1
ffs_usage()
@


1.14
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_ffs.c,v 1.13 2002/04/23 18:54:12 espie Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: mount_ffs.c,v 1.13 2002/04/23 18:54:12 espie Exp $";
d119 4
@


1.13
log
@In mount.h, rename field export -> export_info, to avoid collision with C++.
Synch files that use that field.

(This argument is an internal interface specific to OpenBSD, so it won't
cause compatibility problems.)

(No bump, not an ABI change).

ok art, millert...
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_ffs.c,v 1.12 2002/02/16 21:27:36 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d43 1
a43 1
static char rcsid[] = "$OpenBSD: mount_ffs.c,v 1.12 2002/02/16 21:27:36 millert Exp $";
@


1.12
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_ffs.c,v 1.11 2001/04/04 20:19:01 gluk Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: mount_ffs.c,v 1.11 2001/04/04 20:19:01 gluk Exp $";
d106 1
a106 1
	args.export.ex_root = DEFAULT_ROOTUID;
d108 1
a108 1
		args.export.ex_flags = MNT_EXRDONLY;
d110 1
a110 1
		args.export.ex_flags = 0;
@


1.11
log
@Add "softdep" option to mount. Update from rw/async to softdep
and otherwise are disabled.

art@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_ffs.c,v 1.10 2000/06/17 20:23:24 niklas Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: mount_ffs.c,v 1.10 2000/06/17 20:23:24 niklas Exp $";
d63 1
a63 1
void	ffs_usage __P((void));
@


1.10
log
@Support the -f flag in order to mount dirty filesystems.  This makes sense
with soft-updates, but will leak free blocks.  On non-softupdates filesystems
this option is strongly unrecommended.  It also allows downgrades to readonly
by revoking files opened for writing.  If the filesystem have mmap'ed files
writeable this is dangerous.  Thus, we do *not* recommend its use!
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_ffs.c,v 1.9 2000/01/22 20:25:01 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: mount_ffs.c,v 1.9 2000/01/22 20:25:01 deraadt Exp $";
d72 1
@


1.9
log
@remove extra externs not needed because of unistd.h (rest of tree will be done later.. contact me if you want to help)
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_ffs.c,v 1.8 1997/08/20 05:34:24 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: mount_ffs.c,v 1.8 1997/08/20 05:34:24 millert Exp $";
d71 1
@


1.8
log
@Fix pasto.
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_ffs.c,v 1.7 1997/08/20 05:10:21 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: mount_ffs.c,v 1.7 1997/08/20 05:10:21 millert Exp $";
a78 1
	extern int optreset;
@


1.7
log
@Print "Filesystem not supported by kernel" not "Operation not supported by
device" (EOPNOTSUPP) so the real problem is obvious.  Idea from Peter Seebach
<seebs@@taniemarie.solon.com>.
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_ffs.c,v 1.6 1997/06/20 14:07:46 kstailey Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: mount_ffs.c,v 1.6 1997/06/20 14:07:46 kstailey Exp $";
d120 1
a120 1
		case EINVAL:
@


1.6
log
@Now that mount(2) sets errno to EFTYPE, not EINVAL for "invalid file system"
we can use NLS for the text, not a hardcode English message.
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_ffs.c,v 1.5 1997/01/15 23:41:20 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: mount_ffs.c,v 1.5 1997/01/15 23:41:20 millert Exp $";
d119 3
@


1.5
log
@getopt(3) returns -1 when out of args, not EOF, whee!
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_ffs.c,v 1.4 1996/06/23 14:31:20 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: mount_ffs.c,v 1.4 1996/06/23 14:31:20 deraadt Exp $";
d117 1
a117 2
			if (mntflags & MNT_UPDATE)
				errcause =
a118 2
			else 
				errcause = "incorrect super block";
@


1.4
log
@update rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_ffs.c,v 1.3 1996/04/13 01:31:19 jtc Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: mount_ffs.c,v 1.3 1996/04/13 01:31:19 jtc Exp $";
d86 1
a86 1
	while ((ch = getopt(argc, argv, "o:")) != EOF)
@


1.3
log
@sync to netbsd 960418
@
text
@d1 1
d47 1
a47 1
static char rcsid[] = "$NetBSD: mount_ffs.c,v 1.3 1996/04/13 01:31:19 jtc Exp $";
@


1.2
log
@complete ufs -> ffs change (From John Kohl; PR #1403)
@
text
@d1 1
a1 1
/*	$NetBSD: mount_ffs.c,v 1.1.2.1 1995/11/01 00:06:20 jtc Exp $	*/
d46 1
a46 1
static char rcsid[] = "$NetBSD: mount_ffs.c,v 1.1.2.1 1995/11/01 00:06:20 jtc Exp $";
d64 1
a64 1
static struct mntopt mopts[] = {
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: mount_ffs.c,v 1.1 1995/07/12 03:46:50 cgd Exp $	*/
d46 1
a46 1
static char rcsid[] = "$NetBSD: mount_ffs.c,v 1.1 1995/07/12 03:46:50 cgd Exp $";
d110 1
a110 1
	if (mount(MOUNT_UFS, fs_name, mntflags, &args) < 0) {
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
