head	1.12;
access;
symbols
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.10.0.6
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.4
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.9.0.28
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.26
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.24
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.22
	OPENBSD_5_0:1.9.0.20
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.18
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.16
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.12
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.14
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.10
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.8
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.6
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.4
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.2
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.5.0.6
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.4
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.2
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.4.0.10
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.8
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.6
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.3.0.4
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2;
locks; strict;
comment	@ * @;


1.12
date	2015.04.04.15.46.49;	author deraadt;	state dead;
branches;
next	1.11;
commitid	pOMbGM7WP79jcxHz;

1.11
date	2015.01.16.06.39.59;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	Uu5nFG3wCl0LACBb;

1.10
date	2013.11.15.22.20.04;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2006.12.06.05.56.03;	author jcs;	state Exp;
branches;
next	1.8;

1.8
date	2006.06.29.00.48.01;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2006.06.02.07.01.29;	author jmc;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.31.20.17.15;	author dhill;	state Exp;
branches;
next	1.5;

1.5
date	2004.10.24.11.50.47;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.09.08.13.07;	author todd;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.04.14.59.48;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	2000.10.13.19.27.11;	author chris;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.13.16.22.08;	author chris;	state Exp;
branches;
next	;


desc
@@


1.12
log
@banished the attic
@
text
@/* $OpenBSD: lmccontrol.c,v 1.11 2015/01/16 06:39:59 deraadt Exp $ */

/*-
 * Copyright (c) 1997-1999 LAN Media Corporation (LMC)
 * All rights reserved.  www.lanmedia.com
 *
 * This code is written by Michael Graff (explorer@@vix.com) and
 * Rob Braun (bbraun@@vix.com) for LMC.
 * The code is derived from permitted modifications to software created
 * by Matt Thomas (matt@@3am-software.com).
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All marketing or advertising materials mentioning features or use of this
 *    software must display the following acknowledgement:
 *      This product includes software developed by LAN Media Corporation
 *      and its contributors.
 * 4. Neither the name of LAN Media Corporation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY LAN MEDIA CORPORATION AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE CORPORATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/ioctl.h>
#include <sys/socket.h>

#include <net/if.h>
#include <netinet/in.h>

#include <stdio.h>
#include <stdlib.h>
#include <err.h>
#include <errno.h>
#include <string.h>
#include <unistd.h>
#include <limits.h>

typedef struct lmc___ctl lmc_ctl_t;
#include <dev/pci/if_lmcioctl.h>

extern char *optarg;

void lmc_av9110_freq(u_int32_t, lmc_av9110_t *);
static void dumpdata(char *, lmc_ctl_t *);
void usage(void);

#define DEFAULT_INTERFACE "lmc0"

void
usage(void)
{
	extern char *__progname;

	fprintf(stderr,
		"usage: %s [-CcEeKkOoSs] [-l speed] [interface]\n",
		__progname);
}

int
main(int argc, char **argv)
{
	lmc_ctl_t ctl, wanted;
	int	fd, ch;
	struct ifreq	ifr;
	int	flag_c = 0; /* clock source external, internal */
	int	flag_l = 0; /* line speed */
	int	flag_s = 0; /* Scrambler on, off */
	int	flag_o = 0; /* cable length < 100, > 100 */
	int	flag_e = 0; /* crc 16, 32 */
	int	flag_k = 0; /* HDLC keepalive */
	int	just_print = 1, ifspecified = 0;
	char	*ifname;
	const char 	*errmsg;
	
	ifname = DEFAULT_INTERFACE;
	if (argc > 1 && argv[1][0] != '-') {
		ifname = argv[1];
		ifspecified = 1;
		optind = 2;
	}

	while ((ch = getopt(argc, argv, "hi:l:cCsSoOeEkKpP")) != -1) {
		switch (ch) {
		case 'i':
			if (!ifspecified)
				ifname = optarg;
			break;
		case 'l':
			flag_l = 1;
			just_print = 0;
			wanted.clock_rate = (u_int)strtonum(optarg, 0,
						UINT_MAX, &errmsg);
			if (errmsg)
				errx(1, "speed %s: %s", errmsg, optarg);
			break;
		case 's':
			flag_s = 1;
			just_print = 0;
			wanted.scrambler_onoff = LMC_CTL_OFF;
			break;
		case 'S':
			flag_s = 1;
			just_print = 0;
			wanted.scrambler_onoff = LMC_CTL_ON;
			break;
		case 'c':
			flag_c = 1;
			just_print = 0;
			wanted.clock_source = LMC_CTL_CLOCK_SOURCE_EXT;
			break;
		case 'C':
			flag_c = 1;
			just_print = 0;
			wanted.clock_source = LMC_CTL_CLOCK_SOURCE_INT;
			break;
		case 'o':
			flag_o = 1;
			just_print = 0;
			wanted.cable_length = LMC_CTL_CABLE_LENGTH_LT_100FT;
			break;
		case 'O':
			flag_o = 1;
			just_print = 0;
			wanted.cable_length = LMC_CTL_CABLE_LENGTH_GT_100FT;
			break;
		case 'e':
			flag_e = 1;
			just_print = 0;
			wanted.crc_length = LMC_CTL_CRC_LENGTH_16;
			break;
		case 'E':
			flag_e = 1;
			just_print = 0;
			wanted.crc_length = LMC_CTL_CRC_LENGTH_32;
			break;
		case 'k':
			flag_k = 1;
			just_print = 0;
			wanted.keepalive_onoff = LMC_CTL_ON;
			break;
		case 'K':
			flag_k = 1;
			just_print = 0;
			wanted.keepalive_onoff = LMC_CTL_OFF;
			break;
		case 'p':
#if defined(linux)
			fd = socket(AF_INET, SOCK_DGRAM, 0);
			if (fd < 0) {
				fprintf(stderr, "socket: %s\n", strerror(errno));
				exit(1);
			}

			strlcpy(ifr.ifr_name, ifname, sizeof(ifr.ifr_name));
			ifr.ifr_data = (caddr_t)&ctl;
			if (ioctl(fd, SPPPIOCCISCO, &ifr) < 0) {
				fprintf(stderr, "ioctl %s SPPPIOCCISCO: %s\n",
					ifr.ifr_name, strerror(errno));
				return (1);
			}
			return (0);
#else
			fprintf (stderr, "This option is not yet supported\n");
#endif
			break;
		case 'P':
			fd = socket(AF_INET, SOCK_DGRAM, 0);
			if (fd < 0) {
				fprintf(stderr, "socket: %s\n", strerror(errno));
				return (1);
			}

			strlcpy(ifr.ifr_name, ifname, sizeof(ifr.ifr_name));
			ifr.ifr_data = (caddr_t)&ctl;
#if defined(linux)	/* Linux IOCTL */
			if (ioctl(fd, SPPPIOCPPP, &ifr) < 0) {
				fprintf(stderr, "ioctl %s SPPPIOCPPP: %s\n",
					ifr.ifr_name, strerror(errno));
				return (1);
			}
			return (0);
#else
			fprintf(stderr, "This option is not yet supported\n");
#endif
			break;
		case 'h':
		default:
			usage();
			return (0);
		}
	}

	fd = socket(AF_INET, SOCK_DGRAM, 0);
	if (fd < 0) {
		fprintf(stderr, "socket: %s\n", strerror(errno));
		return (1);
	}

	strlcpy(ifr.ifr_name, ifname, sizeof(ifr.ifr_name));
	ifr.ifr_data = (caddr_t)&ctl;

	/*
	 * Fetch current settings
	 */
	if (ioctl(fd, LMCIOCGINFO, &ifr) < 0) {
		fprintf(stderr, "ioctl %s LMCIOCGINFO: %s\n",
			ifr.ifr_name, strerror(errno));
		return (1);
	}

	/*
	 * If none of the flags are set, print status
	 */
	if (just_print) {
		dumpdata(ifname, &ctl);
		return (0);
	}

	if (flag_c)
		ctl.clock_source = wanted.clock_source;
	if (flag_l) {
		lmc_av9110_freq(wanted.clock_rate, &wanted.cardspec.ssi);
		if (wanted.cardspec.ssi.f == 0) {
			printf("Unable to calculate requested rate.\n");
			return (1);
		}
		if (wanted.cardspec.ssi.exact == 0)
			printf("Unable to calculate exact frequency,"
			       " using approximation %u\n",
			       wanted.cardspec.ssi.f);
		ctl.clock_rate = wanted.clock_rate;
		ctl.cardspec.ssi = wanted.cardspec.ssi;
		printf("rate: %u\n", ctl.cardspec.ssi.f);
#if 0
		{
			u_int32_t f;
			lmc_av9110_t *av;

			av = &wanted.cardspec.ssi;

			printf("m == %u, v == %u, n == %u, r == %u, x == %u\n",
			       av->m, av->v, av->n, av->r, av->x);

			f = (20000000 / av->m) * (av->v ? 8 : 1) * av->n;
			printf("fvco == %u\n", f);
			if (av->r == 1)
				f /= 2;
			else if (av->r == 2)
				f /= 4;
			else if (av->r == 3)
				f /= 8;
			printf("fclk == %u (%u)\n", f, f/16);
			if (av->x == 1)
				f /= 2;
			else if (av->x == 2)
				f /= 4;
			else if (av->x == 3)
				f /= 8;
			printf("fclkx == %u (%u)\n", f, f/16);
		}
#endif
	}
	if (flag_s)
		ctl.scrambler_onoff = wanted.scrambler_onoff;
	if (flag_o)
		ctl.cable_length = wanted.cable_length;
	if (flag_e)
		ctl.crc_length = wanted.crc_length;
	if (flag_k)
		ctl.keepalive_onoff = wanted.keepalive_onoff;

	if (ioctl(fd, LMCIOCSINFO, &ifr) < 0) {
		fprintf(stderr, "ioctl %s LMCIOCSINFO: %s\n",
			ifr.ifr_name, strerror(errno));
		return (1);
	}

	return (0);
}

char *clock_sources[] = {
	"External/Line",
	"Internal"
};

static void
print_clocking(lmc_ctl_t *ctl)
{
	char *source;

	if (ctl->clock_source > 1)
		source = "Unknown Value";
	else
		source = clock_sources[ctl->clock_source];

	printf("\tClock source: %s\n", source);

	if (ctl->cardtype == LMC_CTL_CARDTYPE_LMC1000)
		printf("\tClock rate: %u\n", ctl->clock_rate);

	printf("\tApproximate detected rate: %u\n", ctl->ticks * 4096);
}

char *lmc_t1_cables[] = {
	"V.10/RS423", "EIA530A", "reserved", "X.21", "V.35",
	"EIA449/EIA530/V.36", "V.28/EIA232", "none", NULL
};

static void
print_t1_cable(lmc_ctl_t *ctl)
{
	char *type;

	if (ctl->cable_type > 7)
		type = "Invalid cable type";
	else
		type = lmc_t1_cables[ctl->cable_type];

	printf("\tCable type: %s\n", type);
}

static void
print_protocol(lmc_ctl_t *ctl)
{
	printf("\tHDLC Keepalive:  ");
	if (ctl->keepalive_onoff)
		printf("on\n");
	else
		printf("off\n");
}

static void
dumpdata(char *name, lmc_ctl_t *ctl)
{
	/*
	 * Dump the data
	 */
	switch(ctl->cardtype) {
	case LMC_CTL_CARDTYPE_LMC5200:
		printf("%s: Lan Media Corporation LMC5200 (HSSI)\n", name);
		print_clocking(ctl);
		print_protocol(ctl);
		break;
	case LMC_CTL_CARDTYPE_LMC5245:
		printf("%s: Lan Media Corporation LMC5245 (DS3)\n", name);
		print_clocking(ctl);
		printf("\tCable length: %s than 100 feet\n",
		       (ctl->cable_length == LMC_CTL_CABLE_LENGTH_LT_100FT
			? "less" : "more"));
		printf("\tScrambler: %s\n",
		       (ctl->scrambler_onoff ? "on" : "off"));
		print_protocol(ctl);
		break;
	case LMC_CTL_CARDTYPE_LMC1000:
		printf("%s: Lan Media Corporation LMC1000 (T1/E1)\n", name);
		print_clocking(ctl);
		print_t1_cable(ctl);
		print_protocol(ctl);
		break;
	case LMC_CTL_CARDTYPE_LMC1200:
		printf("%s: Lan Media Corporation LMC1200 (T1)\n", name);
		print_clocking(ctl);
		print_protocol(ctl);
		break;
	default:
		printf("%s: Unknown card type: %d\n", name, ctl->cardtype);
	}

	printf("\tCRC length: %d\n", ctl->crc_length);
}
@


1.11
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/* $OpenBSD: lmccontrol.c,v 1.10 2013/11/15 22:20:04 millert Exp $ */
@


1.10
log
@Include unistd.h as it is the standard location for getopt().
@
text
@d1 1
a1 1
/* $OpenBSD: lmccontrol.c,v 1.9 2006/12/06 05:56:03 jcs Exp $ */
d41 6
d54 1
a54 8

#include <sys/param.h>
#include <sys/types.h>
#include <sys/ioctl.h>
#include <sys/socket.h>

#include <net/if.h>
#include <netinet/in.h>
@


1.9
log
@typo; from Daniel Matic <maticd at gmail.com>
@
text
@d1 1
a1 1
/* $OpenBSD: lmccontrol.c,v 1.8 2006/06/29 00:48:01 deraadt Exp $ */
d47 1
@


1.8
log
@use strlcpy; nicm__@@ntlworld.com
@
text
@d1 1
a1 1
/* $OpenBSD: lmccontrol.c,v 1.7 2006/06/02 07:01:29 jmc Exp $ */
d379 1
a379 1
		printf("%s: Lan Media Corperation LMC1200 (T1)\n", name);
@


1.7
log
@- sort options
- sync usage()
- clean up
@
text
@d1 1
a1 1
/* $OpenBSD: lmccontrol.c,v 1.6 2006/05/31 20:17:15 dhill Exp $ */
d172 1
a172 1
			strncpy(ifr.ifr_name, ifname, sizeof(ifr.ifr_name));
d191 1
a191 1
			strncpy(ifr.ifr_name, ifname, sizeof(ifr.ifr_name));
d217 1
a217 1
	strncpy(ifr.ifr_name, ifname, sizeof(ifr.ifr_name));
@


1.6
log
@Replace atoi with strtonum.
Use __progname in usage()

ok otto jaredy
@
text
@d1 1
a1 1
/* $OpenBSD: lmccontrol.c,v 1.5 2004/10/24 11:50:47 deraadt Exp $ */
d73 1
a73 1
		"usage: %s [interface] [-l speed] [-cCeEsSkKoO]\n",
@


1.5
log
@unify device selection
@
text
@d1 1
a1 1
/* $OpenBSD: lmccontrol.c,v 1.4 2002/06/09 08:13:07 todd Exp $ */
d44 1
d48 1
d63 1
a63 1
void usage(char *);
d68 1
a68 1
usage(char *s)
d70 2
d73 2
a74 1
		"usage: lmccontrol [interface] [-l speed] [-cCeEsSkKoO]\n");
d91 2
a92 1

d109 4
a112 1
			wanted.clock_rate = atoi(optarg);
d206 1
a206 1
			usage(argv[0]);
@


1.4
log
@rm trailing whitespace
@
text
@d1 1
a1 1
/* $OpenBSD: lmccontrol.c,v 1.3 2001/06/04 14:59:48 mickey Exp $ */
d75 2
a76 2
	lmc_ctl_t	ctl;
	int		fd;
d78 8
a85 11
	int		ch;
	char	       *ifname = DEFAULT_INTERFACE;
	lmc_ctl_t	wanted;
	int		flag_c = 0; /* clock source external, internal */
	int		flag_l = 0; /* line speed */
	int		flag_s = 0; /* Scrambler on, off */
	int		flag_o = 0; /* cable length < 100, > 100 */
	int		flag_e = 0; /* crc 16, 32 */
	int		flag_k = 0; /* HDLC keepalive */
	int		just_print = 1;
	int 		ifspecified = 0;
d87 1
a89 2
		memcpy(&argv[1], &argv[2], argc * sizeof(char *));
		argc--;
d91 1
d94 1
a94 1
	while ((ch = getopt(argc, argv, "i:l:cCsSoOeEkKpP")) != -1) {
d196 1
a196 1
		case '?':
@


1.3
log
@return from main() don't exit
@
text
@d1 1
a1 1
/* $OpenBSD: lmccontrol.c,v 1.2 2000/10/13 19:27:11 chris Exp $ */
d9 1
a9 1
 * The code is derived from permitted modifications to software created 
d20 1
a20 1
 * 3. All marketing or advertising materials mentioning features or use of this 
d158 1
a158 1
		case 'p': 
d178 1
a178 1
		case 'P': 
@


1.2
log
@Make the arguments more compatible with wi/ancontrol

Now the interface is specified as the first argument instead of with -i
@
text
@d1 1
a1 1
/* $OpenBSD: lmccontrol.c,v 1.1 2000/10/13 16:22:08 chris Exp $ */
d171 1
a171 1
				exit(1);
d173 1
a173 1
			exit(0);
d182 1
a182 1
				exit(1);
d191 1
a191 1
				exit(1);
d193 1
a193 1
			exit(0);
d201 1
a201 1
			exit(0);
d208 1
a208 1
		exit(1);
d220 1
a220 1
		exit(1);
d228 1
a228 1
		exit(0);
d237 1
a237 1
			exit(1);
d287 1
a287 1
		exit(1);
d290 1
a290 1
	exit(0);
@


1.1
log
@utility to control lmc(4) interfaces
@
text
@d1 1
a1 2
/* $OpenBSD$ */
/* $Id: lmcctl.c,v 1.2 1999/12/07 12:37:25 asj Exp $ */
d69 1
a69 1
		"usage: lmccontrol [-i interface] [-l speed] [-cCeEsKkSoO]\n");
d81 15
a95 15
	int		flag_c; /* clock source external, internal */
	int		flag_l; /* line speed */
	int		flag_s; /* Scrambler on, off */
	int		flag_o;	/* cable length < 100, > 100 */
	int		flag_e; /* crc 16, 32 */
	int		flag_k; /* HDLC keepalive */
	int		just_print;

	flag_c = 0;
	flag_l = 0;
	flag_s = 0;
	flag_o = 0;
	flag_e = 0;
	flag_k = 0;
	just_print = 1;
d100 2
a101 1
			ifname = optarg;
@

