head	1.18;
access;
symbols
	OPENBSD_6_2_BASE:1.18
	OPENBSD_6_1:1.17.0.12
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.17.0.8
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.4
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.17.0.6
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.2
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.15.0.8
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.15.0.6
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.2
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.14.0.14
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.12
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.10
	OPENBSD_5_0:1.14.0.8
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.6
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.4
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.2
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.13.0.8
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.4
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.2
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.12.0.4
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.2
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.11.0.6
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.4
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.2
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.10.0.10
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.8
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.6
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.8.0.4
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.5.0.18
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.16
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.14
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.12
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.10
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.8
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.6
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.4
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.18
date	2017.07.29.21.14.56;	author fcambus;	state Exp;
branches;
next	1.17;
commitid	kmn8fj9qunt3hJac;

1.17
date	2015.01.20.18.22.21;	author deraadt;	state Exp;
branches;
next	1.16;
commitid	F55lwc3gS4GN2mLs;

1.16
date	2015.01.16.06.39.58;	author deraadt;	state Exp;
branches;
next	1.15;
commitid	Uu5nFG3wCl0LACBb;

1.15
date	2013.04.24.13.46.29;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2009.10.27.23.59.33;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2008.06.26.05.42.06;	author ray;	state Exp;
branches;
next	1.12;

1.12
date	2007.04.10.17.17.25;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2005.12.19.15.18.01;	author pedro;	state Exp;
branches;
next	1.10;

1.10
date	2003.08.25.23.28.15;	author tedu;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.11.06.22.13;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2002.06.09.08.13.06;	author todd;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.14.06.51.41;	author mpech;	state Exp;
branches;
next	1.6;

1.6
date	2001.07.07.18.26.13;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	97.01.16.04.04.21;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	96.03.21.00.15.50;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	95.12.16.13.51.00;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.11.13.04.58.22;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.43.35;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.43.35;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Remove erroneous h length modifier, the argument has type 'int'.

OK deraadt@@
@
text
@/*	$OpenBSD: fsdbutil.c,v 1.17 2015/01/20 18:22:21 deraadt Exp $	*/
/*	$NetBSD: fsdbutil.c,v 1.5 1996/09/28 19:30:37 christos Exp $	*/

/*-
 * Copyright (c) 1996 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by John T. Kohl.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/stat.h>
#include <sys/time.h>
#include <sys/mount.h>
#include <ctype.h>
#include <err.h>
#include <fcntl.h>
#include <grp.h>
#include <pwd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include <ufs/ufs/dinode.h>
#include <ufs/ffs/fs.h>

#include "fsdb.h"
#include "fsck.h"

char **
crack(char *line, int *argc)
{
	static char *argv[8];
	int i;
	char *p, *val;

	for (p = line, i = 0; p != NULL && i < 8; i++) {
		while ((val = strsep(&p, " \t\n")) != NULL && *val == '\0')
			/**/;
		if (val)
			argv[i] = val;
		else
			break;
	}
	*argc = i;
	return argv;
}

int
argcount(struct cmdtable *cmdp, int argc, char *argv[])
{
	if (cmdp->minargc == cmdp->maxargc)
		warnx("command `%s' takes %u arguments", cmdp->cmd, cmdp->minargc-1);
	else
		warnx("command `%s' takes from %u to %u arguments",
		    cmdp->cmd, cmdp->minargc-1, cmdp->maxargc-1);
	warnx("usage: %s: %s", cmdp->cmd, cmdp->helptxt);
	return 1;
}

void
printstat(const char *cp, ino_t inum, union dinode *dp)
{
	struct group *grp;
	struct passwd *pw;
	time_t t;
	char *p;

	printf("%s: ", cp);
	switch (DIP(dp, di_mode) & IFMT) {
	case IFDIR:
		puts("directory");
		break;
	case IFREG:
		puts("regular file");
		break;
	case IFBLK:
		printf("block special (%d,%d)",
		    (int)major(DIP(dp, di_rdev)), (int)minor(DIP(dp, di_rdev)));
		break;
	case IFCHR:
		printf("character special (%d,%d)",
		    (int)major(DIP(dp, di_rdev)), (int)minor(DIP(dp, di_rdev)));
		break;
	case IFLNK:
		fputs("symlink",stdout);
		if (DIP(dp, di_size) > 0 &&
		    DIP(dp, di_size) < sblock.fs_maxsymlinklen &&
		    DIP(dp, di_blocks) == 0) {
			char *p = sblock.fs_magic == FS_UFS1_MAGIC ?
			    (char *)dp->dp1.di_shortlink :
			    (char *)dp->dp2.di_shortlink;
			printf(" to `%.*s'\n", (int)DIP(dp, di_size), p);
		} else
			putchar('\n');
		break;
	case IFSOCK:
		puts("socket");
		break;
	case IFIFO:
		puts("fifo");
		break;
	}

	printf("I=%llu MODE=%o SIZE=%llu", (unsigned long long)inum,
	    DIP(dp, di_mode), DIP(dp, di_size));
	t = DIP(dp, di_mtime);
	p = ctime(&t);
	printf("\n\tMTIME=%15.15s %4.4s [%d nsec]", &p[4], &p[20],
	    DIP(dp, di_mtimensec));
	t = DIP(dp, di_ctime);
	p = ctime(&t);
	printf("\n\tCTIME=%15.15s %4.4s [%d nsec]", &p[4], &p[20],
	    DIP(dp, di_ctimensec));
	t = DIP(dp, di_atime);
	p = ctime(&t);
	printf("\n\tATIME=%15.15s %4.4s [%d nsec]\n", &p[4], &p[20],
	    DIP(dp, di_atimensec));

	if ((pw = getpwuid(DIP(dp, di_uid))))
		printf("OWNER=%s ", pw->pw_name);
	else
		printf("OWNUID=%u ", DIP(dp, di_uid));
	if ((grp = getgrgid(DIP(dp, di_gid))))
		printf("GRP=%s ", grp->gr_name);
	else
		printf("GID=%u ", DIP(dp, di_gid));

	printf("LINKCNT=%d FLAGS=%#x BLKCNT=%x GEN=%x\n", DIP(dp, di_nlink),
	    DIP(dp, di_flags), (unsigned)DIP(dp, di_blocks), DIP(dp, di_gen));
}

int
checkactive(void)
{
	if (!curinode) {
		warnx("no current inode");
		return 0;
	}
	return 1;
}

int
checkactivedir(void)
{
	if (!curinode) {
		warnx("no current inode");
		return 0;
	}
	if ((DIP(curinode, di_mode) & IFMT) != IFDIR) {
		warnx("inode %llu not a directory",
		    (unsigned long long)curinum);
		return 0;
	}
	return 1;
}

int
printactive(void)
{
	if (!checkactive())
		return 1;
	switch (DIP(curinode, di_mode) & IFMT) {
	case IFDIR:
	case IFREG:
	case IFBLK:
	case IFCHR:
	case IFLNK:
	case IFSOCK:
	case IFIFO:
		printstat("current inode", curinum, curinode);
		break;
	case 0:
		printf("current inode %llu: unallocated inode\n",
		    (unsigned long long)curinum);
		break;
	default:
		printf("current inode %llu: screwy itype 0%o (mode 0%o)?\n",
		    (unsigned long long)curinum, DIP(curinode, di_mode) & IFMT,
		    DIP(curinode, di_mode));
		break;
	}
	return 0;
}
@


1.17
log
@Adjust <sys/param.h> comments regarding use of use of MAXFRAG, or
delete <sys/param.h> if now possible
ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: fsdbutil.c,v 1.16 2015/01/16 06:39:58 deraadt Exp $	*/
d151 1
a151 1
	printf("LINKCNT=%hd FLAGS=%#x BLKCNT=%x GEN=%x\n", DIP(dp, di_nlink),
@


1.16
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: fsdbutil.c,v 1.15 2013/04/24 13:46:29 deraadt Exp $	*/
a32 1
#include <sys/param.h>	/* MAXFRAG */
@


1.15
log
@pretty print bigger off_t
ok tedu otto
@
text
@d1 1
a1 1
/*	$OpenBSD: fsdbutil.c,v 1.14 2009/10/27 23:59:33 deraadt Exp $	*/
d33 1
a33 1
#include <sys/types.h>
a34 1
#include <sys/param.h>
@


1.14
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: fsdbutil.c,v 1.13 2008/06/26 05:42:06 ray Exp $	*/
d129 2
a130 1
	printf("I=%u MODE=%o SIZE=%llu", inum, DIP(dp, di_mode), DIP(dp, di_size));
d175 2
a176 1
		warnx("inode %d not a directory", curinum);
d198 2
a199 1
		printf("current inode %d: unallocated inode\n", curinum);
d202 2
a203 2
		printf("current inode %d: screwy itype 0%o (mode 0%o)?\n",
		    curinum, DIP(curinode, di_mode) & IFMT,
@


1.13
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fsdbutil.c,v 1.12 2007/04/10 17:17:25 millert Exp $	*/
a31 4

#ifndef lint
static char rcsid[] = "$OpenBSD: fsdbutil.c,v 1.12 2007/04/10 17:17:25 millert Exp $";
#endif /* not lint */
@


1.12
log
@Add support for ffs2 filesystems.  From pedro@@ based on the ufs2
changes in FreeBSD by Kirk McKusick.
@
text
@d1 1
a1 1
/*	$OpenBSD: fsdbutil.c,v 1.11 2005/12/19 15:18:01 pedro Exp $	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
d34 1
a34 1
static char rcsid[] = "$OpenBSD: fsdbutil.c,v 1.11 2005/12/19 15:18:01 pedro Exp $";
@


1.11
log
@Add and use a few more constants and macros needed by UFS2
No functional change
@
text
@d1 1
a1 1
/*	$OpenBSD: fsdbutil.c,v 1.10 2003/08/25 23:28:15 tedu Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: fsdbutil.c,v 1.10 2003/08/25 23:28:15 tedu Exp $";
d97 1
a97 1
printstat(const char *cp, ino_t inum, struct ufs1_dinode *dp)
d105 1
a105 1
	switch (dp->di_mode & IFMT) {
d114 1
a114 1
		    major(dp->di_rdev), minor(dp->di_rdev));
d118 1
a118 1
		    major(dp->di_rdev), minor(dp->di_rdev));
d122 8
a129 5
		if (dp->di_size > 0 && dp->di_size < MAXSYMLINKLEN_UFS1 &&
		    dp->di_blocks == 0)
			printf(" to `%.*s'\n", (int) dp->di_size,
			    (char *)dp->di_shortlink);
		else
d140 2
a141 2
	printf("I=%u MODE=%o SIZE=%llu", inum, dp->di_mode, dp->di_size);
	t = dp->di_mtime;
d144 2
a145 2
	    dp->di_mtimensec);
	t = dp->di_ctime;
d148 2
a149 2
	    dp->di_ctimensec);
	t = dp->di_atime;
d152 1
a152 1
	    dp->di_atimensec);
d154 1
a154 1
	if ((pw = getpwuid(dp->di_uid)))
d157 2
a158 2
		printf("OWNUID=%u ", dp->di_uid);
	if ((grp = getgrgid(dp->di_gid)))
d161 1
a161 1
		printf("GID=%u ", dp->di_gid);
d163 2
a164 2
	printf("LINKCNT=%hd FLAGS=%#x BLKCNT=%x GEN=%x\n", dp->di_nlink,
	    dp->di_flags, dp->di_blocks, dp->di_gen);
d184 1
a184 1
	if ((curinode->di_mode & IFMT) != IFDIR) {
d196 1
a196 1
	switch (curinode->di_mode & IFMT) {
d211 2
a212 1
		    curinum, curinode->di_mode & IFMT, curinode->di_mode);
@


1.10
log
@rename struct dinode to ufs1_dinode.  clears the namespace and makes
way for some future work.  no function changes yet.
help testing otto@@ and markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fsdbutil.c,v 1.9 2003/06/11 06:22:13 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: fsdbutil.c,v 1.9 2003/06/11 06:22:13 deraadt Exp $";
d122 1
a122 1
		if (dp->di_size > 0 && dp->di_size < MAXSYMLINKLEN &&
@


1.9
log
@ansification
@
text
@d1 1
a1 1
/*	$OpenBSD: fsdbutil.c,v 1.8 2002/06/09 08:13:06 todd Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: fsdbutil.c,v 1.8 2002/06/09 08:13:06 todd Exp $";
d97 1
a97 1
printstat(const char *cp, ino_t inum, struct dinode *dp)
@


1.8
log
@rm trailing whitespace
@
text
@d1 1
a1 1
/*	$OpenBSD: fsdbutil.c,v 1.7 2002/03/14 06:51:41 mpech Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: fsdbutil.c,v 1.7 2002/03/14 06:51:41 mpech Exp $";
d66 16
a81 17
crack(line, argc)
	char *line;
	int *argc;
{
    static char *argv[8];
    int i;
    char *p, *val;
    for (p = line, i = 0; p != NULL && i < 8; i++) {
	while ((val = strsep(&p, " \t\n")) != NULL && *val == '\0')
	    /**/;
	if (val)
	    argv[i] = val;
	else
	    break;
    }
    *argc = i;
    return argv;
d85 9
a93 13
argcount(cmdp, argc, argv)
	struct cmdtable *cmdp;
	int argc;
	char *argv[];
{
    if (cmdp->minargc == cmdp->maxargc)
	warnx("command `%s' takes %u arguments", cmdp->cmd, cmdp->minargc-1);
    else
	warnx("command `%s' takes from %u to %u arguments",
	      cmdp->cmd, cmdp->minargc-1, cmdp->maxargc-1);
	
    warnx("usage: %s: %s", cmdp->cmd, cmdp->helptxt);
    return 1;
d97 60
a156 31
printstat(cp, inum, dp)
	const char *cp;
	ino_t inum;
	struct dinode *dp;
{
    struct group *grp;
    struct passwd *pw;
    time_t t;
    char *p;

    printf("%s: ", cp);
    switch (dp->di_mode & IFMT) {
    case IFDIR:
	puts("directory");
	break;
    case IFREG:
	puts("regular file");
	break;
    case IFBLK:
	printf("block special (%d,%d)",
	       major(dp->di_rdev), minor(dp->di_rdev));
	break;
    case IFCHR:
	printf("character special (%d,%d)",
	       major(dp->di_rdev), minor(dp->di_rdev));
	break;
    case IFLNK:
	fputs("symlink",stdout);
	if (dp->di_size > 0 && dp->di_size < MAXSYMLINKLEN &&
	    dp->di_blocks == 0)
	    printf(" to `%.*s'\n", (int) dp->di_size, (char *)dp->di_shortlink);
d158 1
a158 31
		putchar('\n');
	break;
    case IFSOCK:
	puts("socket");
	break;
    case IFIFO:
	puts("fifo");
	break;
    }
    printf("I=%u MODE=%o SIZE=%llu", inum, dp->di_mode, dp->di_size);
    t = dp->di_mtime;
    p = ctime(&t);
    printf("\n\tMTIME=%15.15s %4.4s [%d nsec]", &p[4], &p[20],
	   dp->di_mtimensec);
    t = dp->di_ctime;
    p = ctime(&t);
    printf("\n\tCTIME=%15.15s %4.4s [%d nsec]", &p[4], &p[20],
	   dp->di_ctimensec);
    t = dp->di_atime;
    p = ctime(&t);
    printf("\n\tATIME=%15.15s %4.4s [%d nsec]\n", &p[4], &p[20],
	   dp->di_atimensec);

    if ((pw = getpwuid(dp->di_uid)))
	printf("OWNER=%s ", pw->pw_name);
    else
	printf("OWNUID=%u ", dp->di_uid);
    if ((grp = getgrgid(dp->di_gid)))
	printf("GRP=%s ", grp->gr_name);
    else
	printf("GID=%u ", dp->di_gid);
d160 2
a161 2
    printf("LINKCNT=%hd FLAGS=%#x BLKCNT=%x GEN=%x\n", dp->di_nlink, dp->di_flags,
	   dp->di_blocks, dp->di_gen);
d165 1
a165 1
checkactive()
d167 5
a171 5
    if (!curinode) {
	warnx("no current inode");
	return 0;
    }
    return 1;
d175 1
a175 1
checkactivedir()
d177 9
a185 9
    if (!curinode) {
	warnx("no current inode");
	return 0;
    }
    if ((curinode->di_mode & IFMT) != IFDIR) {
	warnx("inode %d not a directory", curinum);
	return 0;
    }
    return 1;
d189 1
a189 1
printactive()
d191 21
a211 21
    if (!checkactive())
	return 1;
    switch (curinode->di_mode & IFMT) {
    case IFDIR:
    case IFREG:
    case IFBLK:
    case IFCHR:
    case IFLNK:
    case IFSOCK:
    case IFIFO:
	printstat("current inode", curinum, curinode);
	break;
    case 0:
	printf("current inode %d: unallocated inode\n", curinum);
	break;
    default:
	printf("current inode %d: screwy itype 0%o (mode 0%o)?\n",
	       curinum, curinode->di_mode & IFMT, curinode->di_mode);
	break;
    }
    return 0;
@


1.7
log
@Remove \n from err/errx/warn/warnx().

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: fsdbutil.c,v 1.6 2001/07/07 18:26:13 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: fsdbutil.c,v 1.6 2001/07/07 18:26:13 deraadt Exp $";
d96 1
a96 1
	    
@


1.6
log
@major -Wall cleanup, almost complete
@
text
@d1 1
a1 1
/*	$OpenBSD: fsdbutil.c,v 1.5 1997/01/16 04:04:21 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: fsdbutil.c,v 1.5 1997/01/16 04:04:21 millert Exp $";
d174 1
a174 1
	warnx("no current inode\n");
d184 1
a184 1
	warnx("no current inode\n");
@


1.5
log
@Update from NetBSD: adds chlen command and makes -Wall happy.
@
text
@d1 1
a1 1
/*	$OpenBSD: fsdbutil.c,v 1.4 1996/03/21 00:15:50 niklas Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: fsdbutil.c,v 1.4 1996/02/27 22:28:16 jtc Exp $";
d143 1
a143 1
    printf("I=%u MODE=%o SIZE=%qu", inum, dp->di_mode, dp->di_size);
@


1.4
log
@From NetBSD: Merge of 960317
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: fsdbutil.c,v 1.4 1996/02/27 22:28:16 jtc Exp $	*/
d41 1
a41 1
static char rcsid[] = "$NetBSD: fsdbutil.c,v 1.4 1996/02/27 22:28:16 jtc Exp $";
d50 1
d143 1
a143 1
    printf("I=%lu MODE=%o SIZE=%qu", inum, dp->di_mode, dp->di_size);
d157 1
a157 1
    if (pw = getpwuid(dp->di_uid))
d161 1
a161 1
    if (grp = getgrgid(dp->di_gid))
@


1.3
log
@handle time_t things that really are not time_t
@
text
@d1 2
a2 1
/*	$NetBSD: fsdbutil.c,v 1.3 1995/12/14 22:30:45 thorpej Exp $	*/
d4 33
a36 25
/*
 *  Copyright (c) 1995 John T. Kohl
 *  All rights reserved.
 * 
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *  1. Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *  3. The name of the author may not be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
d41 1
a41 1
static char rcsid[] = "$NetBSD: fsdbutil.c,v 1.3 1995/12/14 22:30:45 thorpej Exp $";
@


1.2
log
@time_t typecast; from bernd@@arresum.inka.de; netbsd pr#1724
@
text
@d1 1
a1 1
/*	$NetBSD: fsdbutil.c,v 1.2 1995/10/08 23:18:12 thorpej Exp $	*/
d32 1
a32 1
static char rcsid[] = "$NetBSD: fsdbutil.c,v 1.2 1995/10/08 23:18:12 thorpej Exp $";
d99 1
d134 2
a135 1
    p = ctime((time_t *)&dp->di_mtime);
d138 2
a139 1
    p = ctime((time_t *)&dp->di_ctime);
d142 2
a143 1
    p = ctime((time_t *)&dp->di_atime);
@


1.1
log
@Initial revision
@
text
@d133 1
a133 1
    p = ctime(&dp->di_mtime);
d136 1
a136 1
    p = ctime(&dp->di_ctime);
d139 1
a139 1
    p = ctime(&dp->di_atime);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
