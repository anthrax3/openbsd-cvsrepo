head	1.19;
access;
symbols
	OPENBSD_6_2_BASE:1.19
	OPENBSD_6_1:1.19.0.6
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.19.0.2
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.18.0.2
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.16.0.6
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.13.0.8
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.6
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.2
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.12.0.14
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.12
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.10
	OPENBSD_5_0:1.12.0.8
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.6
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.4
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.11.0.12
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.8
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.6
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.4
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.2
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.10.0.14
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.12
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.10
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.8
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.6
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.4
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.2
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.7.0.4
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.4.0.16
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.14
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.12
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.10
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.8
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.6
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.19
date	2016.03.07.21.47.04;	author natano;	state Exp;
branches;
next	1.18;
commitid	9SStlnhWZdgguIUo;

1.18
date	2015.11.03.04.47.55;	author mmcc;	state Exp;
branches;
next	1.17;
commitid	gL7wuN1CjqJrZXbM;

1.17
date	2015.10.12.01.43.52;	author deraadt;	state Exp;
branches;
next	1.16;
commitid	IzwYfGisvKWP60xP;

1.16
date	2015.02.06.11.49.39;	author tedu;	state Exp;
branches;
next	1.15;
commitid	QB5nq83Y69a2W82C;

1.15
date	2015.01.20.18.22.20;	author deraadt;	state Exp;
branches;
next	1.14;
commitid	F55lwc3gS4GN2mLs;

1.14
date	2015.01.16.06.39.56;	author deraadt;	state Exp;
branches;
next	1.13;
commitid	Uu5nFG3wCl0LACBb;

1.13
date	2013.04.23.17.29.26;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2009.10.27.23.59.32;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2007.05.21.18.13.11;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2004.01.25.19.18.54;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2003.08.25.23.28.15;	author tedu;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.02.20.06.14;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.07.03.22.32.32;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2001.11.05.07.39.16;	author mpech;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.04.14.59.47;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	97.10.12.20.07.46;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.10.12.19.58.33;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	96.06.23.14.30.01;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.43.27;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.43.27;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Use opendev() instead of a plain open().
ok deraadt
@
text
@/*	$OpenBSD: clri.c,v 1.18 2015/11/03 04:47:55 mmcc Exp $	*/
/*	$NetBSD: clri.c,v 1.19 2005/01/20 15:50:47 xtraeme Exp $	*/

/*
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Rich $alz of BBN Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/param.h>	/* MAXBSIZE DEV_BSIZE */

#include <ufs/ufs/dinode.h>
#include <ufs/ffs/fs.h>

#include <err.h>
#include <fcntl.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <unistd.h>
#include <util.h>

/*
 * Possible superblock locations ordered from most to least likely.
 */
static int sblock_try[] = SBLOCKSEARCH;

static void
usage(void)
{
	(void)fprintf(stderr, "usage: clri special_device inode_number ...\n");
	exit(1);
}

int
main(int argc, char *argv[])
{
	struct ufs1_dinode *dp1;
	struct ufs2_dinode *dp2;
	struct fs *sbp;
	char *ibuf[MAXBSIZE];
	char *fs, sblock[SBLOCKSIZE];
	size_t bsize;
	off_t offset;
	int i, fd, imax, inonum;

	if (argc < 3)
		usage();

	fs = *++argv;
	sbp = NULL;

	/* get the superblock. */
	if ((fd = opendev(fs, O_RDWR, 0, NULL)) < 0)
		err(1, "%s", fs);

	if (pledge("stdio", NULL) == -1)
		err(1, "pledge");

	for (i = 0; sblock_try[i] != -1; i++) {
		offset = (off_t)(sblock_try[i]);
		if (pread(fd, sblock, sizeof(sblock), offset) != sizeof(sblock))
			err(1, "%s: can't read superblock", fs);
		sbp = (struct fs *)sblock;
		if ((sbp->fs_magic == FS_UFS1_MAGIC ||
		     (sbp->fs_magic == FS_UFS2_MAGIC &&
		      sbp->fs_sblockloc == sblock_try[i])) &&
		    sbp->fs_bsize <= MAXBSIZE &&
		    sbp->fs_bsize >= (int)sizeof(struct fs))
			break;
	}
	if (sblock_try[i] == -1)
		errx(2, "cannot find file system superblock");
	bsize = sbp->fs_bsize;

	/* check that inode numbers are valid */
	imax = sbp->fs_ncg * sbp->fs_ipg;
	for (i = 1; i < (argc - 1); i++) {
		const char *errstr;
		strtonum(argv[i], 1, imax, &errstr);
		if (errstr)
			errx(1, "%s is not a valid inode number: %s", argv[i], errstr);
	}

	/* clear the clean flag in the superblock */
	if (sbp->fs_inodefmt >= FS_44INODEFMT) {
		sbp->fs_clean = 0;
		if (pwrite(fd, sblock, sizeof(sblock), offset) != sizeof(sblock))
			err(1, "%s: can't update superblock", fs);
		(void)fsync(fd);
	}

	/* remaining arguments are inode numbers. */
	while (*++argv) {
		/* get the inode number. */
		inonum = strtonum(*argv, 1, imax, NULL);
		(void)printf("clearing %u\n", inonum);

		/* read in the appropriate block. */
		offset = ino_to_fsba(sbp, inonum);	/* inode to fs blk */
		offset = fsbtodb(sbp, offset);		/* fs blk disk blk */
		offset *= DEV_BSIZE;			/* disk blk to bytes */

		/* seek and read the block */
		if (pread(fd, ibuf, bsize, offset) != bsize)
			err(1, "%s", fs);

		if (sbp->fs_magic == FS_UFS2_MAGIC) {
			/* get the inode within the block. */
			dp2 = &(((struct ufs2_dinode *)ibuf)
			    [ino_to_fsbo(sbp, inonum)]);

			/* clear the inode, and bump the generation count. */
			memset(dp2, 0, sizeof(*dp2));
			dp2->di_gen = arc4random();
		} else {
			/* get the inode within the block. */
			dp1 = &(((struct ufs1_dinode *)ibuf)
			    [ino_to_fsbo(sbp, inonum)]);

			/* clear the inode, and bump the generation count. */
			memset(dp1, 0, sizeof(*dp1));
			dp1->di_gen = arc4random();
		}

		/* backup and write the block */
		if (pwrite(fd, ibuf, bsize, offset) != bsize)
			err(1, "%s", fs);
		(void)fsync(fd);
	}
	(void)close(fd);
	exit(0);
}
@


1.18
log
@Add blank lines surrounding pledge call, as per decree of deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: clri.c,v 1.17 2015/10/12 01:43:52 deraadt Exp $	*/
d47 1
d80 1
a80 1
	if ((fd = open(fs, O_RDWR, 0)) < 0)
@


1.17
log
@pledge "stdio" right after opening the device.  The remainder is
is just read, write, fsync, and close.
ok doug
@
text
@d1 1
a1 1
/*	$OpenBSD: clri.c,v 1.16 2015/02/06 11:49:39 tedu Exp $	*/
d81 1
d84 1
@


1.16
log
@convert atoi to strtonum
@
text
@d1 1
a1 1
/*	$OpenBSD: clri.c,v 1.15 2015/01/20 18:22:20 deraadt Exp $	*/
d81 2
@


1.15
log
@Adjust <sys/param.h> comments regarding use of use of MAXFRAG, or
delete <sys/param.h> if now possible
ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: clri.c,v 1.14 2015/01/16 06:39:56 deraadt Exp $	*/
d100 4
a103 2
		if (atoi(argv[i]) <= 0 || atoi(argv[i]) >= imax) 
			errx(1, "%s is not a valid inode number", argv[i]);
d117 2
a118 2
		inonum = atoi(*argv);
		(void)printf("clearing %llu\n", (unsigned long long)inonum);
@


1.14
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: clri.c,v 1.13 2013/04/23 17:29:26 deraadt Exp $	*/
d36 1
a36 1
#include <sys/param.h>	/* MAXFRAG MAXBSIZE DEV_BSIZE */
@


1.13
log
@handle big ino_t
ok otto
@
text
@d1 1
a1 1
/*	$OpenBSD: clri.c,v 1.12 2009/10/27 23:59:32 deraadt Exp $	*/
d36 1
a36 1
#include <sys/param.h>
@


1.12
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: clri.c,v 1.11 2007/05/21 18:13:11 millert Exp $	*/
d116 1
a116 1
		(void)printf("clearing %d\n", inonum);
@


1.11
log
@Add ffs2 support.  Adapted from the ufs2 changes in FreeBSD and NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: clri.c,v 1.10 2004/01/25 19:18:54 deraadt Exp $	*/
a34 12

#if 0
#ifndef lint
static const char copyright[] =
"@@(#) Copyright (c) 1990, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
static char sccsid[] = "@@(#)clri.c	8.2 (Berkeley) 9/23/93";
#endif /* not lint */
#endif
@


1.10
log
@random generation numbers; millert ok
@
text
@d1 2
a2 2
/*	$OpenBSD: clri.c,v 1.9 2003/08/25 23:28:15 tedu Exp $	*/
/*	$NetBSD: clri.c,v 1.9 1995/03/18 14:54:33 cgd Exp $	*/
d36 1
d38 1
a38 1
static char copyright[] =
a43 1
#if 0
d45 1
a45 2
#else
static char rcsid[] = "$OpenBSD: clri.c,v 1.9 2003/08/25 23:28:15 tedu Exp $";
a46 1
#endif /* not lint */
a48 1
#include <sys/time.h>
a53 1
#include <errno.h>
d60 12
d75 2
a76 3
	struct ufs1_dinode ibuf[MAXBSIZE / sizeof (struct ufs1_dinode)];
	char *fs, sblock[SBSIZE];
	struct ufs1_dinode *ip;
d78 3
a80 1
	int fd, inonum;
d82 1
a82 1
	size_t bsize;
d84 2
a85 4
	if (argc < 3) {
		fprintf(stderr, "usage: clri filesystem inode ...\n");
		return (1);
	}
d88 1
d93 22
a114 4
	if (lseek(fd, (off_t)(SBLOCK * DEV_BSIZE), SEEK_SET) < 0)
		err(1, "%s", fs);
	if (read(fd, sblock, sizeof(sblock)) != sizeof(sblock))
		errx(1, "%s: can't read superblock", fs);
d116 7
a122 5
	sbp = (struct fs *)sblock;
	if (sbp->fs_magic != FS_MAGIC)
		errx(1, "%s: superblock magic number 0x%x, not 0x%x",
		    fs, sbp->fs_magic, FS_MAGIC);
	bsize = sbp->fs_bsize;
d127 1
a127 2
		if ((inonum = atoi(*argv)) <= 0)
			errx(1, "%s is not a valid inode number", *argv);
d136 1
a136 3
		if (lseek(fd, offset, SEEK_SET) < 0)
			err(1, "%s", fs);
		if (read(fd, ibuf, bsize) != bsize)
d139 17
a155 6
		/* get the inode within the block. */
		ip = &ibuf[ino_to_fsbo(sbp, inonum)];

		/* clear the inode, and bump the generation count. */
		memset(ip, 0, sizeof(*ip));
		ip->di_gen = arc4random();
d158 1
a158 3
		if (lseek(fd, offset, SEEK_SET) < 0)
			err(1, "%s", fs);
		if (write(fd, ibuf, bsize) != bsize)
a160 9

		if (sbp->fs_inodefmt >= FS_44INODEFMT) {
			/* update after each inode cleared */
			sbp->fs_clean = 0;
			if (lseek(fd, (off_t)(SBLOCK * DEV_BSIZE), SEEK_SET) < 0)
				err(1, "%s", fs);
			if (write(fd, sblock, sizeof(sblock)) != sizeof(sblock))
				errx(1, "%s: can't update superblock", fs);
		}
d162 2
a163 2

	return close(fd);
@


1.9
log
@rename struct dinode to ufs1_dinode.  clears the namespace and makes
way for some future work.  no function changes yet.
help testing otto@@ and markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: clri.c,v 1.8 2003/06/02 20:06:14 millert Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: clri.c,v 1.8 2003/06/02 20:06:14 millert Exp $";
d67 3
d71 1
a71 4
	struct ufs1_dinode *ip;
	int fd;
	struct ufs1_dinode ibuf[MAXBSIZE / sizeof (struct ufs1_dinode)];
	int32_t generation;
a73 2
	int inonum;
	char *fs, sblock[SBSIZE];
a117 1
		generation = ip->di_gen + 1;
d119 1
a119 1
		ip->di_gen = generation;
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: clri.c,v 1.7 2002/07/03 22:32:32 deraadt Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: clri.c,v 1.7 2002/07/03 22:32:32 deraadt Exp $";
d68 1
a68 1
	struct dinode *ip;
d70 1
a70 1
	struct dinode ibuf[MAXBSIZE / sizeof (struct dinode)];
@


1.7
log
@ansi
@
text
@d1 1
a1 1
/*	$OpenBSD: clri.c,v 1.6 2001/11/05 07:39:16 mpech Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d46 1
a46 1
static char rcsid[] = "$OpenBSD: clri.c,v 1.6 2001/11/05 07:39:16 mpech Exp $";
@


1.6
log
@kill more registers;

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: clri.c,v 1.5 2001/06/04 14:59:47 mickey Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: clri.c,v 1.5 2001/06/04 14:59:47 mickey Exp $";
d69 1
a69 3
main(argc, argv)
	int argc;
	char *argv[];
@


1.5
log
@return from main() don't exit
@
text
@d1 1
a1 1
/*	$OpenBSD: clri.c,v 1.4 1997/10/12 20:07:46 deraadt Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: clri.c,v 1.4 1997/10/12 20:07:46 deraadt Exp $";
d73 3
a75 3
	register struct fs *sbp;
	register struct dinode *ip;
	register int fd;
@


1.4
log
@indent
@
text
@d1 1
a1 1
/*	$OpenBSD: clri.c,v 1.3 1997/10/12 19:58:33 mickey Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: clri.c,v 1.3 1997/10/12 19:58:33 mickey Exp $";
d84 2
a85 2
		(void)fprintf(stderr, "usage: clri filesystem inode ...\n");
		exit(1);
d146 2
a147 2
	(void)close(fd);
	exit(0);
@


1.3
log
@mark filesystem dirty
@
text
@d1 1
a1 1
/*	$OpenBSD: clri.c,v 1.2 1996/06/23 14:30:01 deraadt Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: clri.c,v 1.2 1996/06/23 14:30:01 deraadt Exp $";
d137 1
a137 2
		if (sbp->fs_inodefmt >= FS_44INODEFMT)
		{
@


1.2
log
@update rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: clri.c,v 1.9 1995/03/18 14:54:33 cgd Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: clri.c,v 1.9 1995/03/18 14:54:33 cgd Exp $";
d136 10
@


1.1
log
@Initial revision
@
text
@d1 1
d50 1
a50 1
static char rcsid[] = "$NetBSD: clri.c,v 1.9 1995/03/18 14:54:33 cgd Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
