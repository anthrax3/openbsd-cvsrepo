head	1.74;
access;
symbols
	OPENBSD_6_2:1.74.0.8
	OPENBSD_6_2_BASE:1.74
	OPENBSD_6_1:1.74.0.6
	OPENBSD_6_1_BASE:1.74
	OPENBSD_6_0:1.74.0.4
	OPENBSD_6_0_BASE:1.74
	OPENBSD_5_9:1.72.0.2
	OPENBSD_5_9_BASE:1.72
	OPENBSD_5_8:1.71.0.6
	OPENBSD_5_8_BASE:1.71
	OPENBSD_5_7:1.71.0.2
	OPENBSD_5_7_BASE:1.71
	OPENBSD_5_6:1.70.0.16
	OPENBSD_5_6_BASE:1.70
	OPENBSD_5_5:1.70.0.14
	OPENBSD_5_5_BASE:1.70
	OPENBSD_5_4:1.70.0.10
	OPENBSD_5_4_BASE:1.70
	OPENBSD_5_3:1.70.0.8
	OPENBSD_5_3_BASE:1.70
	OPENBSD_5_2:1.70.0.6
	OPENBSD_5_2_BASE:1.70
	OPENBSD_5_1_BASE:1.70
	OPENBSD_5_1:1.70.0.4
	OPENBSD_5_0:1.70.0.2
	OPENBSD_5_0_BASE:1.70
	OPENBSD_4_9:1.68.0.4
	OPENBSD_4_9_BASE:1.68
	OPENBSD_4_8:1.68.0.2
	OPENBSD_4_8_BASE:1.68
	OPENBSD_4_7:1.65.0.6
	OPENBSD_4_7_BASE:1.65
	OPENBSD_4_6:1.65.0.8
	OPENBSD_4_6_BASE:1.65
	OPENBSD_4_5:1.65.0.4
	OPENBSD_4_5_BASE:1.65
	OPENBSD_4_4:1.65.0.2
	OPENBSD_4_4_BASE:1.65
	OPENBSD_4_3:1.62.0.2
	OPENBSD_4_3_BASE:1.62
	OPENBSD_4_2:1.61.0.2
	OPENBSD_4_2_BASE:1.61
	OPENBSD_4_1:1.49.0.2
	OPENBSD_4_1_BASE:1.49
	OPENBSD_4_0:1.48.0.2
	OPENBSD_4_0_BASE:1.48
	OPENBSD_3_9:1.45.0.4
	OPENBSD_3_9_BASE:1.45
	OPENBSD_3_8:1.45.0.2
	OPENBSD_3_8_BASE:1.45
	OPENBSD_3_7:1.43.0.2
	OPENBSD_3_7_BASE:1.43
	OPENBSD_3_6:1.41.0.2
	OPENBSD_3_6_BASE:1.41
	OPENBSD_3_5:1.36.0.2
	OPENBSD_3_5_BASE:1.36
	OPENBSD_3_4:1.35.0.2
	OPENBSD_3_4_BASE:1.35
	OPENBSD_3_3:1.32.0.2
	OPENBSD_3_3_BASE:1.32
	OPENBSD_3_2:1.28.0.2
	OPENBSD_3_2_BASE:1.28
	OPENBSD_3_1:1.27.0.2
	OPENBSD_3_1_BASE:1.27
	OPENBSD_3_0:1.26.0.2
	OPENBSD_3_0_BASE:1.26
	OPENBSD_2_9:1.25.0.2
	OPENBSD_2_9_BASE:1.25
	OPENBSD_2_8:1.23.0.4
	OPENBSD_2_8_BASE:1.23
	OPENBSD_2_7:1.23.0.2
	OPENBSD_2_7_BASE:1.23
	OPENBSD_2_6:1.18.0.2
	OPENBSD_2_6_BASE:1.18
	OPENBSD_2_5:1.15.0.2
	OPENBSD_2_5_BASE:1.15
	OPENBSD_2_4:1.10.0.2
	OPENBSD_2_4_BASE:1.10
	OPENBSD_2_3:1.6.0.4
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.2
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.74
date	2016.03.17.07.18.34;	author jmc;	state Exp;
branches;
next	1.73;
commitid	l71wixFuXK442jh9;

1.73
date	2016.03.17.05.27.10;	author bentley;	state Exp;
branches;
next	1.72;
commitid	0afdJPZPXUfvItJV;

1.72
date	2016.02.18.21.57.26;	author jmc;	state Exp;
branches;
next	1.71;
commitid	XeZymvO1B9UajRCQ;

1.71
date	2014.08.29.12.09.04;	author jmc;	state Exp;
branches;
next	1.70;
commitid	R0x1zIIKSdDb4jVH;

1.70
date	2011.05.23.10.56.17;	author dcoppa;	state Exp;
branches;
next	1.69;

1.69
date	2011.03.31.11.17.58;	author sthen;	state Exp;
branches;
next	1.68;

1.68
date	2010.03.21.07.51.23;	author otto;	state Exp;
branches;
next	1.67;

1.67
date	2010.03.20.15.24.49;	author jmc;	state Exp;
branches;
next	1.66;

1.66
date	2010.03.20.14.19.38;	author krw;	state Exp;
branches;
next	1.65;

1.65
date	2008.08.03.21.43.19;	author otto;	state Exp;
branches;
next	1.64;

1.64
date	2008.06.27.18.50.43;	author sobrado;	state Exp;
branches;
next	1.63;

1.63
date	2008.06.24.15.07.01;	author jmc;	state Exp;
branches;
next	1.62;

1.62
date	2008.01.12.08.56.28;	author otto;	state Exp;
branches;
next	1.61;

1.61
date	2007.05.31.19.19.46;	author jmc;	state Exp;
branches;
next	1.60;

1.60
date	2007.05.19.20.12.50;	author otto;	state Exp;
branches;
next	1.59;

1.59
date	2007.05.19.11.16.22;	author jmc;	state Exp;
branches;
next	1.58;

1.58
date	2007.05.19.07.15.34;	author jsg;	state Exp;
branches;
next	1.57;

1.57
date	2007.05.19.01.28.15;	author deraadt;	state Exp;
branches;
next	1.56;

1.56
date	2007.05.18.19.08.16;	author otto;	state Exp;
branches;
next	1.55;

1.55
date	2007.04.13.20.20.54;	author jmc;	state Exp;
branches;
next	1.54;

1.54
date	2007.04.13.19.46.18;	author jmc;	state Exp;
branches;
next	1.53;

1.53
date	2007.04.13.17.33.02;	author millert;	state Exp;
branches;
next	1.52;

1.52
date	2007.04.03.19.11.55;	author millert;	state Exp;
branches;
next	1.51;

1.51
date	2007.04.03.18.42.32;	author millert;	state Exp;
branches;
next	1.50;

1.50
date	2007.04.02.20.20.39;	author millert;	state Exp;
branches;
next	1.49;

1.49
date	2006.11.14.10.28.11;	author otto;	state Exp;
branches;
next	1.48;

1.48
date	2006.07.07.15.03.57;	author jmc;	state Exp;
branches;
next	1.47;

1.47
date	2006.03.09.13.37.40;	author pedro;	state Exp;
branches;
next	1.46;

1.46
date	2006.03.09.13.35.02;	author pedro;	state Exp;
branches;
next	1.45;

1.45
date	2005.06.27.10.07.15;	author jmc;	state Exp;
branches;
next	1.44;

1.44
date	2005.06.27.09.48.05;	author jmc;	state Exp;
branches;
next	1.43;

1.43
date	2004.11.28.06.25.48;	author tedu;	state Exp;
branches;
next	1.42;

1.42
date	2004.10.14.07.40.29;	author otto;	state Exp;
branches;
next	1.41;

1.41
date	2004.08.15.22.06.20;	author jmc;	state Exp;
branches;
next	1.40;

1.40
date	2004.08.15.12.20.47;	author otto;	state Exp;
branches;
next	1.39;

1.39
date	2004.07.28.21.27.52;	author jmc;	state Exp;
branches;
next	1.38;

1.38
date	2004.07.02.15.48.35;	author otto;	state Exp;
branches;
next	1.37;

1.37
date	2004.06.26.18.21.36;	author otto;	state Exp;
branches;
next	1.36;

1.36
date	2003.10.17.09.35.30;	author jmc;	state Exp;
branches;
next	1.35;

1.35
date	2003.06.26.07.07.49;	author tedu;	state Exp;
branches;
next	1.34;

1.34
date	2003.06.20.07.54.39;	author jmc;	state Exp;
branches;
next	1.33;

1.33
date	2003.06.02.20.06.16;	author millert;	state Exp;
branches;
next	1.32;

1.32
date	2003.03.11.00.53.47;	author tedu;	state Exp;
branches;
next	1.31;

1.31
date	2003.03.10.19.52.05;	author tedu;	state Exp;
branches;
next	1.30;

1.30
date	2003.03.10.19.39.36;	author tedu;	state Exp;
branches;
next	1.29;

1.29
date	2003.02.07.07.45.13;	author jmc;	state Exp;
branches;
next	1.28;

1.28
date	2002.05.06.19.27.16;	author millert;	state Exp;
branches;
next	1.27;

1.27
date	2002.02.18.21.57.56;	author millert;	state Exp;
branches;
next	1.26;

1.26
date	2001.06.23.02.33.09;	author deraadt;	state Exp;
branches;
next	1.25;

1.25
date	2001.04.04.22.06.39;	author gluk;	state Exp;
branches;
next	1.24;

1.24
date	2001.04.03.22.59.35;	author millert;	state Exp;
branches;
next	1.23;

1.23
date	2000.04.17.02.32.48;	author aaron;	state Exp;
branches;
next	1.22;

1.22
date	2000.03.29.01.28.56;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2000.03.28.23.53.17;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2000.03.18.22.56.01;	author aaron;	state Exp;
branches;
next	1.19;

1.19
date	99.12.03.19.24.18;	author art;	state Exp;
branches;
next	1.18;

1.18
date	99.09.29.13.50.44;	author aaron;	state Exp;
branches;
next	1.17;

1.17
date	99.06.04.02.45.19;	author aaron;	state Exp;
branches;
next	1.16;

1.16
date	99.05.23.14.11.19;	author aaron;	state Exp;
branches;
next	1.15;

1.15
date	99.04.10.04.09.23;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	99.03.11.01.35.03;	author pjanzen;	state Exp;
branches;
next	1.13;

1.13
date	98.12.15.01.20.40;	author aaron;	state Exp;
branches;
next	1.12;

1.12
date	98.11.28.19.56.28;	author aaron;	state Exp;
branches;
next	1.11;

1.11
date	98.11.11.22.19.59;	author aaron;	state Exp;
branches;
next	1.10;

1.10
date	98.09.23.01.20.24;	author aaron;	state Exp;
branches;
next	1.9;

1.9
date	98.09.17.04.14.57;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	98.08.30.22.45.12;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	98.06.15.17.55.53;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	97.06.16.00.03.10;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	97.02.23.03.51.24;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	96.12.04.08.38.58;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.06.23.14.31.46;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.06.16.14.33.17;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.43.43;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.43.43;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.74
log
@simplify previous; ok bentley
@
text
@.\"	$OpenBSD: newfs.8,v 1.73 2016/03/17 05:27:10 bentley Exp $
.\"	$NetBSD: newfs.8,v 1.12 1995/03/18 14:58:41 cgd Exp $
.\"
.\" Copyright (c) 1983, 1987, 1991, 1993, 1994
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @@(#)newfs.8	8.3 (Berkeley) 3/27/94
.\"
.Dd $Mdocdate: March 17 2016 $
.Dt NEWFS 8
.Os
.Sh NAME
.Nm newfs , mount_mfs
.Nd construct a new file system
.Sh SYNOPSIS
.Nm newfs
.Bk -words
.Op Fl Nq
.Op Fl b Ar block-size
.Op Fl c Ar fragments-per-cylinder-group
.Op Fl e Ar maxbpg
.Op Fl f Ar frag-size
.Op Fl g Ar avgfilesize
.Op Fl h Ar avgfpdir
.Op Fl i Ar bytes
.Op Fl m Ar free-space
.Op Fl O Ar filesystem-format
.Op Fl o Ar optimization
.Op Fl S Ar sector-size
.Op Fl s Ar size
.Op Fl T Ar disktype
.Op Fl t Ar fstype
.Ar special
.Ek
.Pp
.Nm mount_mfs
.Bk -words
.Op Fl b Ar block-size
.Op Fl c Ar fragments-per-cylinder-group
.Op Fl e Ar maxbpg
.Op Fl f Ar frag-size
.Op Fl i Ar bytes
.Op Fl m Ar free-space
.Op Fl o Ar options
.Op Fl P Ar file
.Op Fl s Ar size
.Ar special node
.Ek
.Sh DESCRIPTION
Before running
.Nm ,
the disk must be labeled using
.Xr disklabel 8 .
.Nm
builds a file system on the specified
.Ar special
device,
basing its defaults on the information in the disk label.
Typically the defaults are reasonable, although
.Nm
has numerous options to allow the defaults to be selectively overridden.
.Pp
The
.Ar special
file should be a raw device,
for example
.Pa /dev/rsd0a ;
if a relative path like
.Pa sd0a
is specified,
the corresponding raw device is used.
.Pp
.Nm mount_mfs
is used to build a file system in virtual memory and then mount it
on a specified node.
.Nm mount_mfs
exits and the contents of the file system are lost
when the file system is unmounted.
If
.Nm mount_mfs
is sent a signal while running,
for example during system shutdown,
it will attempt to unmount its
corresponding file system.
The parameters to
.Nm mount_mfs
are the same as those to
.Nm newfs .
The special file is only used to read the disk label which provides
a set of configuration parameters for the memory based file system.
The special file is typically that of the primary swap area,
since that is where the file system will be backed up when
free memory gets low and the memory supporting
the file system has to be paged.
If the keyword
.Dq swap
is used instead of a special file name, default configuration parameters
will be used.
(This option is useful when trying to use
.Nm mount_mfs
on a machine without any disks.)
.Pp
Both
.Nm
and
.Nm mount_mfs
now have the functionality of
.Xr fsirand 8
built in, so it is not necessary to run
.Xr fsirand 8
manually unless you wish to re-randomize the
file system (or list the inode generation numbers).
.Pp
The options to
.Nm
are as follows:
.Bl -tag -width Fl
.It Fl b Ar block-size
The block size of the file system, in bytes.
If a disklabel is available, the default is read from it.
Otherwise the default is 16 KB or eight times the fragment size,
whichever is smaller.
.It Fl c Ar fragments-per-cylinder-group
The number of fragments per cylinder group in a file system.
The default is to compute the maximum allowed by the other parameters.
This value is dependent on a number of other parameters,
in particular the block size and the number of bytes per inode.
.It Fl e Ar maxbpg
This indicates the maximum number of blocks any single file can
allocate out of a cylinder group before it is forced to begin
allocating blocks from another cylinder group.
The default is about one quarter of the total blocks in a cylinder group.
See
.Xr tunefs 8
for more details on how to set this option.
.It Fl f Ar frag-size
The fragment size of the file system in bytes.
If a disklabel is available, the default is read from it.
Otherwise the default is 2048.
.It Fl g Ar avgfilesize
The expected average file size for the file system in bytes.
.It Fl h Ar avgfpdir
The expected average number of files per directory on the file system.
.It Fl i Ar bytes
This specifies the density of inodes in the file system.
The default is to create an inode for every 4 fragments.
If fewer inodes are desired, a larger number should be used;
to create more inodes a smaller number should be given.
.It Fl m Ar free-space
The percentage of space reserved from normal users; the minimum free
space threshold.
The default value used is 5%.
See
.Xr tunefs 8
for more details on how to set this option.
.It Fl N
Causes the file system parameters to be printed out
without really creating the file system.
.It Fl O Ar filesystem-format
Select the filesystem format:
.Pp
.Bl -tag -width 3n -offset indent -compact
.It 0
.Bx 4.3
format file system.
This option is primarily used to build root file systems that can
be understood by older boot ROMs.
.It 1
Fast File System (FFS), the default for file systems smaller than 1 TB.
.It 2
Enhanced Fast File System (FFS2), the default for file systems larger than
1 TB.
.El
.It Fl o Ar optimization
.Ar space
or
.Ar time .
The file system can either be instructed to try to minimize the
time spent allocating blocks, or to try to minimize the space
fragmentation on the disk.
Unless an optimization has been specified,
if the value of minfree (see above) is less than 5%, the default
is to optimize for space; if the value of minfree is greater than
or equal to 5%, the default is to optimize for time.
See
.Xr tunefs 8
for more details on how to set this option.
.It Fl q
Operate in quiet mode.
With this option,
.Nm
will not print extraneous information like superblock backups.
.It Fl S Ar sector-size
The size of a sector in bytes (almost always 512).
Alternatively
.Ar sector-size
may instead use a multiplier, as documented in
.Xr scan_scaled 3 .
.Ar sector-size
should be 512 or a multiple of it because the kernel operates
512\-byte blocks internally.
A sector is the smallest addressable unit on the physical device.
Changing this is useful only when using
.Nm
to build a file system whose raw image will eventually be used on
a different type of disk than the one on which it is initially
created (for example on a write-once disk).
Note that changing this
from its default will make it impossible for
.Xr fsck 8
to find the alternate superblocks automatically if the standard
superblock is lost.
.It Fl s Ar size
The size of the file system in sectors (see
.Fl S ) .
Alternatively
.Ar size
may instead use a multiplier, as documented in
.Xr scan_scaled 3 ,
to specify size in bytes; in this case
.Ar size
is rounded up to the next sector boundary.
The maximum size of an FFS file system is 2,147,483,647 (2^31 \- 1) of
512\-byte blocks, slightly less than 1 TB.
FFS2 file systems can be as large as 64 PB.
Note however that for
.Nm mount_mfs
the practical limit is based on
.Va datasize
in
.Xr login.conf 5 ,
and ultimately depends on the per-arch
.Dv MAXDSIZ
limit.
.It Fl T Ar disktype
Uses information for the specified disk from
.Xr disktab 5
instead of trying to get the information from the
.Xr disklabel 5 .
.It Fl t Ar fstype
Set the file system type of which file system you wish to create.
.Nm
will be smart enough to run the alternate newfs_XXX program instead.
.El
.Pp
The options to
.Nm mount_mfs
are as described for
.Nm ,
except for the
.Fl o
and
.Fl P
options.
.Pp
Those options are as follows:
.Bl -tag -width indent
.It Fl o Ar options
Options are specified with a
.Fl o
flag followed by a comma separated string of options.
See the
.Xr mount 8
man page for possible options and their meanings.
.It Fl P Ar file
If
.Ar file
is a directory, populate the created mfs file system with the
contents of the directory.
If
.Ar file
is a block device, populate the created mfs file system with the
contents of the FFS file system contained on the device.
.El
.Pp
If the
.Fl P Ar file
option is not used, the owner and mode of the created mfs file
system will be the same as the owner and mode of the mount point.
.Sh ENVIRONMENT
.Bl -tag -width COLUMNS
.It Ev COLUMNS
If set to a positive integer,
output is formatted to the given width in columns.
Otherwise,
.Nm
defaults to the terminal width, or 80 columns if the output is not a terminal.
.El
.Sh SEE ALSO
.Xr disktab 5 ,
.Xr fs 5 ,
.Xr disklabel 8 ,
.Xr dumpfs 8 ,
.Xr fsck 8 ,
.Xr fsirand 8 ,
.Xr growfs 8 ,
.Xr mount 8 ,
.Xr tunefs 8
.Rs
.%A M. McKusick
.%A W. Joy
.%A S. Leffler
.%A R. Fabry
.%T A Fast File System for UNIX
.%J ACM Transactions on Computer Systems 2
.%V 3
.%P pp 181-197
.%D August 1984
.%O (reprinted in the BSD System Manager's Manual)
.Re
.Rs
.%A M. McKusick
.%A M. Karels
.%A K. Bostic
.%T "A Pageable Memory Based Filesystem"
.%J "USENIX Summer Conference Proceedings"
.%D 1990
.Re
.Sh HISTORY
The
.Nm
command appeared in
.Bx 4.2 .
@


1.73
log
@Switch (non-curses, non-ksh) programs that use COLUMNS to a single idiom.

Previously behaviors were all over the map. This changes them to
use COLUMNS first, and either terminal width or a hardcoded value
(typically 80) as appropriate.

ok deraadt@@; man bits ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.72 2016/02/18 21:57:26 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: February 18 2016 $
a307 1
.Nm Ns 's
@


1.72
log
@TMPDIR is no longer supported;
from rafael neves
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.71 2014/08/29 12:09:04 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: August 29 2014 $
d304 10
@


1.71
log
@mount_mfs does not require disklabel to be run;

diff From: Navan Carson
confirmed/ok mikeb
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.70 2011/05/23 10:56:17 dcoppa Exp $
d33 1
a33 1
.Dd $Mdocdate: May 23 2011 $
a303 8
.Sh ENVIRONMENT
.Bl -tag -width TMPDIR
.It Ev TMPDIR
Directory in which to create temporary mount points for use by
.Nm mount_mfs Fl P
instead of
.Pa /tmp .
.El
@


1.70
log
@Allow specifying k/m/g/... suffixes in newfs(8) -S and -s options.

Useful for mount_mfs, now you can just say:

# mount_mfs -s 50m swap /tmp

And it will do what you want, taking into account sector size.

Old behaviour of -s (specifying count of sectors) is, of course,
preserved.

All the work was done by Vadim Zhukov (persgray(at)gmail com).

OK myself, otto@@, thib@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.69 2011/03/31 11:17:58 sthen Exp $
d33 1
a33 1
.Dd $Mdocdate: March 31 2011 $
d75 1
a75 3
.Nm
or
.Nm mount_mfs ,
@


1.69
log
@these days, newfs creates one inode per 4 fragments, rather than one per 8KB,
this lets it adapt to large filesystems (disklabel -E automatically increases
fragment and block size for these).

ok otto@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.68 2010/03/21 07:51:23 otto Exp $
d33 1
a33 1
.Dd $Mdocdate: March 21 2010 $
d221 7
d237 2
a238 2
to find the alternate superblocks if the standard superblock is
lost.
d240 10
a249 5
The size of the file system in sectors.
This value is multiplied by the number of 512\-byte blocks in a sector
to yield the size of the file system in 512\-byte blocks, which is the value
used by the kernel.
The maximum size of an FFS file system is 2,147,483,647 (2^31 \- 1) of these
@


1.68
log
@document -b and -f get their defaults from the disklabel; ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.67 2010/03/20 15:24:49 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: March 20 2010 $
d172 1
a172 1
The default is to create an inode for each 8192 bytes of data space.
@


1.67
log
@wee tweak;
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.66 2010/03/20 14:19:38 krw Exp $
d146 3
a148 1
The default is 16KB.
d164 2
a165 1
The default is 2048.
@


1.66
log
@Make FFS2 the default format for file systems larger than INT_MAX
512-byte blocks. Better than just blowing up. Tweak man page to document
this and clarify various things.

Inspired by problems noted during an install by Harald Dunkel.

Suggestions and man page corrections from otto@@ and jmc@@

ok beck@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.65 2008/08/03 21:43:19 otto Exp $
d33 1
a33 1
.Dd $Mdocdate: August 3 2008 $
d234 1
a234 1
The maximum size of a FFS file system is 2,147,483,647 (2^31 \- 1) of these
@


1.65
log
@spread the unwritten wisdom newfs should be run on raw devs, not on
block devs; ok marco@@ jmc@@ millert@@ deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.64 2008/06/27 18:50:43 sobrado Exp $
d33 1
a33 1
.Dd $Mdocdate: June 27 2008 $
d192 1
a192 1
Fast File System (the default).
d194 2
a195 1
Enhanced Fast File System (FFS2).
d217 2
a218 1
The size of a sector in bytes (almost never anything but 512).
d231 6
a236 4
The maximum size of a Fast File
System is 2,147,483,647 (2^31 \- 1) sectors, which is slightly less
than 1TB, assuming a sector size of 512 bytes.
FFS2 file systems can be as large as the maximum partition size supported.
@


1.64
log
@documentation tweak.
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.63 2008/06/24 15:07:01 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: June 24 2008 $
d88 10
@


1.63
log
@- move -S and -t into the main option descriptions: they were the only
options left of the old tuning list, and it makes sense to have one list
now
- document -T. this was requested by todd (fries), and comes largely from
the description in netbsd's page of the same name

ok millert otto
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.62 2008/01/12 08:56:28 otto Exp $
d33 1
a33 1
.Dd $Mdocdate: January 12 2008 $
d67 1
a67 1
.Op Fl m Ar free space
@


1.62
log
@document the max size of FFS and FFS2 file systems plus some rewording;
with and ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.61 2007/05/31 19:19:46 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate$
d55 1
d130 3
a132 1
The following options define the general layout policies:
d205 12
d232 5
a236 17
.El
.Pp
The following options override the standard sizes for the disk geometry.
Their default values are taken from the disk label.
Changing these defaults is useful only when using
.Nm
to build a file system whose raw image will eventually be used on
a different type of disk than the one on which it is initially
created (for example on a write-once disk).
Note that changing any
of these values from their defaults will make it impossible for
.Xr fsck 8
to find the alternate superblocks if the standard superblock is
lost.
.Bl -tag -width Fl
.It Fl S Ar sector-size
The size of a sector in bytes (almost never anything but 512).
d243 1
a243 1
The options to the
d245 3
a247 3
command are as described for the
.Nm
command, except for the
d253 1
a253 1
These options are as follows:
@


1.61
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.60 2007/05/19 20:12:50 otto Exp $
d179 1
a179 1
Normal fast file system (default).
d181 1
a181 1
Enhanced fast file system (FFS2).
d204 2
a205 2
The maximum size of a file
system is 2,147,483,647 (2^31 \- 1) sectors, which is slightly less
d207 1
@


1.60
log
@Now that the amd64 floppy and cd image -c setting have been fixed,
recommit the -c changes. For now, we warn only if we cannot honour -c.
ok millert@@ deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.59 2007/05/19 11:16:22 jmc Exp $
d33 1
a33 1
.Dd March 27, 1994
@


1.59
log
@kill trailing whitespace;
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.58 2007/05/19 07:15:34 jsg Exp $
d44 1
a44 1
.Op Fl c Ar blocks-per-cylinder-group
d62 1
a62 1
.Op Fl c Ar blocks-per-cylinder-group
d134 2
a135 2
.It Fl c Ar blocks-per-cylinder-group
The number of blocks per cylinder group in a file system.
@


1.58
log
@Mention the mfs and portal papers.
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.57 2007/05/19 01:28:15 deraadt Exp $
d309 1
a309 1
.%D 1990 
@


1.57
log
@backout -c changes; they were not tested on all the media.  all newfs
changes obviously *MUST* be checked against whatever weird things the
floppies do to fit
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.55 2007/04/13 20:20:54 jmc Exp $
d302 8
@


1.56
log
@The unit of the -c options is fragments, so adjust man page and
variable name; correct the loop packing more inodes into the cg:
in some cases it could put more fragments into the cg than requested;
give an error if the -c option cannot be honoured. ok millert@@ pedro@@
@
text
@d44 1
a44 1
.Op Fl c Ar fragments-per-cylinder-group
d62 1
a62 1
.Op Fl c Ar fragments-per-cylinder-group
d134 2
a135 2
.It Fl c Ar fragments-per-cylinder-group
The number of fragments per cylinder group in a file system.
@


1.55
log
@tweak the description of -O2; ok millert
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.54 2007/04/13 19:46:18 jmc Exp $
d44 1
a44 1
.Op Fl c Ar blocks-per-cylinder-group
d62 1
a62 1
.Op Fl c Ar blocks-per-cylinder-group
d134 2
a135 2
.It Fl c Ar blocks-per-cylinder-group
The number of blocks per cylinder group in a file system.
@


1.54
log
@new sentence, new line;
-O takes an argument;
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.53 2007/04/13 17:33:02 millert Exp $
d181 1
a181 2
Enhanced fast file system (suitable for more than 1 Terabyte
capacity).
@


1.53
log
@Add support for creating ffs2 filesystems.  Note that the concept
of a constant-sized track is obsolete in today's world of variable
blocks per track disks so the cylinder group packing algorithm has
been updated.  Based on the ufs2 changes in FreeBSD by Kirk McKusick.
From pedro@@ with changes by me as well as a few from NetBSD.
OK pedro@@ beck@@ thib@@ and tested by more...
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.52 2007/04/03 19:11:55 millert Exp $
d169 3
a171 2
.It Fl O
Select the filesystem-format
d190 2
a191 1
fragmentation on the disk.  Unless an optimization has been specified,
d194 2
a195 1
or equal to 5%, the default is to optimize for time.  See
d199 2
a200 1
Operate in quiet mode.  With this option,
d204 2
a205 1
The size of the file system in sectors.  The maximum size of a file
d207 2
a208 2
than 1TB, assuming a sector size of 512 bytes.  Note however that
for
d219 2
a220 2
The following options override the standard sizes for the disk
geometry.  Their default values are taken from the disk label.
d225 2
a226 1
created (for example on a write-once disk).  Note that changing any
d255 2
a256 1
flag followed by a comma separated string of options.  See the
d263 2
a264 1
contents of the directory.  If
@


1.52
log
@Remove part of the -x description that I missed.
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.51 2007/04/03 18:42:32 millert Exp $
d42 1
a42 2
.Op Fl NOq
.Op Fl a Ar maxcontig
d44 1
a44 1
.Op Fl c Ar cylinders
d51 1
a55 2
.Op Fl u Ar sectors
.Op Fl z Ar tracks
a60 1
.Op Fl a Ar maxcontig
d62 1
a62 1
.Op Fl c Ar cylinders
a130 10
.It Fl a Ar maxcontig
This specifies the maximum number of contiguous blocks that will be
laid out before forcing a rotational delay (see the
.Fl d
option).
The default value depends on the block size
(4 for 16KB blocks, 8 for 8KB blocks, and 16 for 4KB blocks).
See
.Xr tunefs 8
for more details on how to set this option.
d134 5
a138 3
.It Fl c Ar cylinders
The number of cylinders per cylinder group in a file system.
The default is to use as many as fit with the other parameters given.
d170 3
a172 1
Creates a
d175 8
a182 2
This option is primarily used to build root file systems
that can be understood by older boot ROMs.
d187 6
a192 7
The file system can either be instructed to try to minimize the time spent
allocating blocks, or to try to minimize the space fragmentation on the disk.
Unless an optimization has been specified, if the value of minfree
(see above) is less than 5%, the default is to optimize for space;
if the value of minfree is greater than or equal to 5%,
the default is to optimize for time.
See
d196 1
a196 2
Operate in quiet mode.
With this option,
d200 4
a203 5
The size of the file system in sectors.
The maximum size of a file system is 2,147,483,647 (2^31 \- 1) sectors,
which is slightly less than 1TB,
assuming a sector size of 512 bytes.
Note however that for
d214 2
a215 2
The following options override the standard sizes for the disk geometry.
Their default values are taken from the disk label.
d218 4
a221 5
to build a file system whose raw image will eventually be used on a
different type of disk than the one on which it is initially created
(for example on a write-once disk).
Note that changing any of these values from their defaults will make
it impossible for
d223 2
a224 1
to find the alternate superblocks if the standard superblock is lost.
a231 6
.It Fl u Ar sectors
The number of sectors per track available for data allocation by the file
system.
.It Fl z Ar tracks
The number of tracks/cylinder available for data allocation by the file
system.
d249 1
a249 2
flag followed by a comma separated string of options.
See the
d255 2
a256 3
is a directory, populate the created mfs file system with the contents
of the directory.
If
d258 2
a259 2
is a block device, populate the created mfs file system with
the contents of the FFS file system contained on the device.
d264 2
a265 2
option is not used, the owner and mode of the created mfs file system will
be the same as the owner and mode of the mount point.
@


1.51
log
@Remove obsolete options for superblock fields that are no longer used.
OK deraadt @@, OK in principle tedu@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.50 2007/04/02 20:20:39 millert Exp $
a240 3
.Pq Fl u
of the last track of each cylinder since they are not available to the file
system for data allocation.
@


1.50
log
@Modern disks do bad sector replacement themselves.  There is no
need to reserve space for them in the filesystem itself.
OK deraadt@@ pedro@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.49 2006/11/14 10:28:11 otto Exp $
a45 1
.Op Fl d Ar rotdelay
a50 2
.Op Fl k Ar skew
.Op Fl l Ar interleave
a52 1
.Op Fl r Ar revolutions
a65 1
.Op Fl d Ar rotdelay
a149 7
.It Fl d Ar rotdelay
This specifies the expected time (in milliseconds) to service a transfer
completion interrupt and initiate a new transfer on the same disk.
The default is 0 milliseconds.
See
.Xr tunefs 8
for more details on how to set this option.
a231 17
.It Fl k Ar skew
Used to describe perturbations in the media format to compensate for
a slow controller.
Track skew is the offset of sector 0 on track N relative to sector 0
on track N\-1 on the same cylinder.
.It Fl l Ar interleave
Used to describe perturbations in the media format to compensate for
a slow controller.
Interleave is physical sector interleave on each track,
specified as the denominator of the ratio:
.Dl sectors read/sectors passed over
Thus an interleave of 1/1 implies contiguous layout, while 1/2 implies
logical sector 0 is separated by one sector from logical sector 1.
.Pq Fl u
since they are not available to the file system for data allocation.
.It Fl r Ar revolutions
The speed of the disk in revolutions per minute.
@


1.49
log
@memory requirements are relevant only for mount_mfs; ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.48 2006/07/07 15:03:57 jmc Exp $
a55 1
.Op Fl p Ar sectors
a60 1
.Op Fl x Ar sectors
a256 4
.It Fl p Ar sectors
Spare sectors (bad sector replacements) are physical sectors that occupy
space at the end of each track.
They are not counted as part of the sectors/track
a269 8
This does not include sectors reserved at the end of each track for bad
block replacement (see the
.Fl p
option).
.It Fl x Ar sectors
Spare sectors (bad sector replacements) are physical sectors that occupy
space at the end of the last track in the cylinder.
They are deducted from the sectors/track
@


1.48
log
@fuller description for -s; from janne johansson
ok krw
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.47 2006/03/09 13:37:40 pedro Exp $
d223 3
a225 1
Note however that the practical limit is based on
@


1.47
log
@Remove -n from synopsis too
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.46 2006/03/09 13:35:02 pedro Exp $
d221 9
a229 1
which is slightly less than 1TB.
@


1.46
log
@Remove option -n from newfs as well as all references to fs_postbl()
Various testing for a while, okay krw@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.45 2005/06/27 10:07:15 jmc Exp $
a54 1
.Op Fl n Ar nrpos
@


1.45
log
@grammar;
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.44 2005/06/27 09:48:05 jmc Exp $
a194 3
.It Fl n Ar nrpos
The number of distinct rotational positions.
The default is 1.
@


1.44
log
@- sort synopsis and options list
- sync the args in the options list to those in synopsis, and avoid
using structures such as `-l very long description of single arg'
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.43 2004/11/28 06:25:48 tedu Exp $
d135 1
a135 1
built-in so it is not necessary to run
@


1.43
log
@1 inode per 8192 bytes now
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.42 2004/10/14 07:40:29 otto Exp $
d42 1
a42 2
.Op Fl NO
.Op Fl S Ar sector-size
d54 1
a54 1
.Op Fl m Ar free space
a57 1
.Op Fl q
d59 1
a69 1
.Op Fl P Ar file
d79 1
a141 14
.It Fl N
Causes the file system parameters to be printed out
without really creating the file system.
.It Fl O
Creates a
.Bx 4.3
format file system.
This option is primarily used to build root file systems
that can be understood by older boot ROMs.
.It Fl q
Operate in quiet mode.
With this option,
.Nm
will not print extraneous information like superblock backups.
d155 1
a155 1
.It Fl c Ar #cylinders/group
d180 1
a180 1
.It Fl i Ar number of bytes per inode
d185 1
a185 1
.It Fl m Ar free space \&%
d192 4
a195 1
.It Fl n Ar number of rotational positions
d198 7
a204 1
.It Fl o Ar optimization\ preference
d217 5
d240 1
a240 3
.It Fl S Ar sector-size
The size of a sector in bytes (almost never anything but 512).
.It Fl k Ar sector \&0 skew , per track
d245 1
a245 1
.It Fl l Ar hardware sector interleave
d253 1
a253 1
.It Fl p Ar spare sectors per track
d259 1
a259 1
.It Fl r Ar revolutions/minute
d261 2
a262 3
.It Fl z Ar #tracks/cylinder
The number of tracks/cylinder available for data allocation by the file
system.
d267 1
a267 1
.It Fl u Ar sectors/track
d274 1
a274 1
.It Fl x Ar spare sectors per cylinder
d281 3
d291 2
d294 1
a294 3
option and the
.Fl o
option.
d298 7
a313 7
.It Fl o
Options are specified with a
.Fl o
flag followed by a comma separated string of options.
See the
.Xr mount 8
man page for possible options and their meanings.
@


1.42
log
@Do not generate either a too large super block or a negative number
of inodes per cylinder group for large block or fragment sizes.
This allows for creation of filesystems with any legal block/fragment
size combination.

ok tedu@@.
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.41 2004/08/15 22:06:20 jmc Exp $
d197 1
a197 1
The default is to create an inode for each 4096 bytes of data space.
@


1.41
log
@escape some minus signs, and keep -Tps happy;
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.40 2004/08/15 12:20:47 otto Exp $
a355 6
.Sh BUGS
Certain combinations of block and fragment sizes may not produce a valid
file system.
If a non-default block or fragment size is specified,
.Xr fsck 8
should be run on the newly created filesystem before use.
@


1.40
log
@Document max file system size and warn user that using non-standard
block or fragment sizes may hurt. ok a bunch of people@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.39 2004/07/28 21:27:52 jmc Exp $
d225 1
a225 1
The maximum size of a file system is 2,147,483,647 (2^31 - 1) sectors,
d247 1
a247 1
on track N-1 on the same cylinder.
@


1.39
log
@.Xr growfs 8
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.38 2004/07/02 15:48:35 otto Exp $
d225 2
d356 6
@


1.38
log
@Take TMPDIR into account when creating a temp mountpoint for populating.
ok avsm@@ millert@@; man page ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.37 2004/06/26 18:21:36 otto Exp $
d334 1
@


1.37
log
@For all the mfs lovers:

- Make the root of an mfs file system inherit the permission and
  owner/group of the mountpoint. Work by david@@.
- Add the ability to populate an mfs file system with the contents of a
  directory or a file system immediately after creation, controlled
  by the new -P mount option.

Discussed with and tested by many, ok djm@@ david@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.36 2003/10/17 09:35:30 jmc Exp $
d319 8
@


1.36
log
@mention some defaults; noticed by John L. Scarfone
ok tedu@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.35 2003/06/26 07:07:49 tedu Exp $
d71 1
d290 2
d295 1
a295 1
That option is as follows:
d297 9
d314 5
@


1.35
log
@rename -h files to -h avgfpdir in synopsis to match reality
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.34 2003/06/20 07:54:39 jmc Exp $
d161 2
a162 2
The default value depends on the block size (8 for 8KB blocks and
16 for 4KB blocks).
d168 1
d171 1
a171 1
The default value is 16.
d189 1
@


1.34
log
@use .Bk/.Ek to keep SYNOPSIS tidy;
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.33 2003/06/02 20:06:16 millert Exp $
d51 1
a51 1
.Op Fl h Ar files
@


1.33
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.32 2003/03/11 00:53:47 tedu Exp $
d41 1
d67 1
d70 1
d82 1
@


1.32
log
@mention that avgfilesize is in bytes.
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.31 2003/03/10 19:52:05 tedu Exp $
d15 1
a15 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
@


1.31
log
@filesystem -> file system for a little consistency

ok jmc@@ millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.28 2002/05/06 19:27:16 millert Exp $
d189 1
a189 1
The expected average file size for the file system.
@


1.30
log
@document dirpref options -g and -h (w/ avgfpdir)

ok millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.29 2003/02/07 07:45:13 jmc Exp $
a44 1
.Bk -words
d54 1
a54 1
.Op Fl h Ar avgfpdir
a69 1
.Ek
a71 1
.Bk -words
a82 1
.Ek
d138 1
a138 1
filesystem (or list the inode generation numbers).
d148 2
a149 2
format filesystem.
This options is primarily used to build root filesystems
d263 1
a263 1
Set the filesystem type of which filesystem you wish to create.
@


1.29
log
@typos;
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.28 2002/05/06 19:27:16 millert Exp $
d54 2
d192 4
@


1.28
log
@Correct info in "-a maxcontig" section.
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.27 2002/02/18 21:57:56 millert Exp $
d45 1
d69 1
d72 1
d84 1
@


1.27
log
@Don't accept -N flag for mount_mfs.  This flag is turned on automatically
when invoked as mount_mfs but it has different semantics from what is
described in the man page.
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.26 2001/06/23 02:33:09 deraadt Exp $
d159 2
a160 1
The default value is 8.
@


1.26
log
@join .%A entries; most by bk@@rt.fm
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.25 2001/04/04 22:06:39 gluk Exp $
a69 1
.Op Fl N
@


1.25
log
@bye bye -U (soft updates).
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.24 2001/04/03 22:59:35 millert Exp $
d308 1
a308 1
.%T A Fast File System for UNIX ,
@


1.24
log
@mount_mfs should not take the -U flag sync mfs is async and you cannot
have both aync and soft updates (not that it makes sense to have soft
updates on mfs anyway).  Also sync the usage in mount_mfs mode to
the man page.
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.23 2000/04/17 02:32:48 aaron Exp $
d45 1
a45 1
.Op Fl NOU
a149 2
.It Fl U
Enables soft updates on the new filesystem.
@


1.23
log
@Move some misplaced periods outside of the parentheses.
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.22 2000/03/29 01:28:56 deraadt Exp $
d70 1
a70 1
.Op Fl NU
@


1.22
log
@Xr repair
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.21 2000/03/28 23:53:17 deraadt Exp $
d268 1
a268 1
option.)
@


1.21
log
@mkfs(8) died a long time ago
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.20 2000/03/18 22:56:01 aaron Exp $
a300 1
.Xr format 8 ,
@


1.20
log
@Remove hard sentence breaks, and some other cleanup along the way.
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.19 1999/12/03 19:24:18 art Exp $
a82 4
.Nm
replaces the more obtuse
.Xr mkfs 8
program.
@


1.19
log
@Allow enabling soft updates (with -U) on a new filesystem.
Allow soft updates on mfs filesystems (even if it's stupid).
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.18 1999/09/29 13:50:44 aaron Exp $
d123 2
a124 1
the file system has to be paged.  If the keyword
d127 2
a128 1
will be used.  (This option is useful when trying to use
d157 2
a158 1
Operate in quiet mode.  With this option,
d205 2
a206 1
The number of distinct rotational positions.  The default is 1.
@


1.18
log
@There is no diskpart(8); m4@@umn.edu
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.17 1999/06/04 02:45:19 aaron Exp $
d45 1
a45 1
.Op Fl NO
d70 1
a70 1
.Op Fl N
d152 2
@


1.17
log
@start to remove non-escaped trailing whitespace, it can confuse troff; pjanzen@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.16 1999/05/23 14:11:19 aaron Exp $
a297 1
.Xr diskpart 8 ,
@


1.16
log
@remove argument from .Os macros so value in /usr/share/tmac/mdoc/doc-common
is used instead; kwesterback@@home.com
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.15 1999/04/10 04:09:23 millert Exp $
d87 1
a87 1
Before running 
d91 1
a91 1
the disk must be labeled using 
d166 1
a166 1
The block size of the file system, in bytes.  
d218 1
a218 1
The following options override the standard sizes for the disk geometry. 
d226 1
a226 1
it impossible for 
@


1.15
log
@Add -q flag to newfs and use it in the install
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.14 1999/03/11 01:35:03 pjanzen Exp $
d39 1
a39 1
.Os BSD 4.2
@


1.14
log
@fix more comma splices that involve misuse of conjunctive adverbs
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.13 1998/12/15 01:20:40 aaron Exp $
d60 1
d152 4
@


1.13
log
@always give .Nm macros an argument in SYNOPSIS sections; krw@@tcn.net
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.12 1998/11/28 19:56:28 aaron Exp $
d97 1
a97 1
Typically the defaults are reasonable, however
@


1.12
log
@kill redundant .Nm macro arguments; other misc fixes
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.11 1998/11/11 22:19:59 aaron Exp $
d44 1
a44 1
.Nm
@


1.11
log
@more `` '' -> .Dq sillyness; remove redundant .Pp macros; other misc fixes
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.10 1998/09/23 01:20:24 aaron Exp $
d41 1
a41 2
.Nm newfs ,
.Nm mount_mfs
d44 1
a44 1
.Nm newfs
d67 1
d82 1
a82 1
.Nm newfs
d87 1
a87 1
.Nm newfs
d92 1
a92 1
.Nm newfs
d98 1
a98 1
.Nm newfs
d216 1
a216 1
.Nm newfs
d253 1
a253 1
.Nm newfs
d274 1
a274 1
.Nm newfs
@


1.10
log
@alphabetize SEE ALSO entries and order them numerically according to section
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.9 1998/09/17 04:14:57 aaron Exp $
d122 2
a123 1
the file system has to be paged.  If the keyword ``swap''
d197 3
a199 1
.Pq ``space'' or ``time''
@


1.9
log
@sbin/ man page fixes
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.8 1998/08/30 22:45:12 deraadt Exp $
a288 1
.Xr dumpfs 8 ,
d291 2
d294 1
a294 1
.Xr format 8 ,
d296 1
a296 2
.Xr tunefs 8 ,
.Xr fsirand 8
@


1.8
log
@man page fixes; aaron@@ug.cs.dal.ca
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.7 1998/06/15 17:55:53 mickey Exp $
d48 1
a48 1
.Op Fl a maxcontig
d70 1
a70 1
.Op Fl a maxcontig
d82 1
a82 1
.Nm Newfs
d92 4
a95 2
.Nm Newfs
builds a file system on the specified special device
d101 1
a101 1
.Nm Mount_mfs
d104 1
a104 1
.Nm Mount_mfs
d139 1
a139 1
The following options define the general layout policies.
d199 1
a199 1
Unless an optimizations has been specified, if the value of minfree
d219 1
a219 1
.Xr fsck
@


1.7
log
@use Bx macro for BSD versions
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.6 1997/06/16 00:03:10 deraadt Exp $
d132 1
a132 1
built-in so it is not necesary to run
@


1.6
log
@if -o is used to explicitly specify time or space optimization preference,
do not override based on minfree calculation; problem from jgarzik@@pobox.com,
my fix; PR#226
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.5 1997/02/23 03:51:24 millert Exp $
d143 3
a145 1
Creates a 4.3BSD format filesystem.
@


1.5
log
@Inline fsirand(8) (at no noticable cost in speed).
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.4 1996/12/04 08:38:58 deraadt Exp $
d195 2
a196 2
If the value of minfree (see above) is less than 5%,
the default is to optimize for space;
@


1.4
log
@first cut at "newfs -t fstype device". this is very neat
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.3 1996/06/23 14:31:46 deraadt Exp $
d126 11
d291 2
a292 1
.Xr tunefs 8
@


1.3
log
@update rcsid
@
text
@d1 1
a1 1
.\"	$OpenBSD: newfs.8,v 1.12 1995/03/18 14:58:41 cgd Exp $
d63 1
a63 1
.Op Fl t Ar tracks
d66 1
d230 1
a230 1
.It Fl t Ar #tracks/cylinder
d233 4
@


1.2
log
@update to reality; netbsd pr#2517; mike.long@@analog.com
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d166 1
a166 1
The default is to create an inode for each 2048 bytes of data space.
d172 1
a172 1
The default value used is 10%.
d182 1
a182 1
If the value of minfree (see above) is less than 10%,
d184 1
a184 1
if the value of minfree is greater than or equal to 10%,
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
