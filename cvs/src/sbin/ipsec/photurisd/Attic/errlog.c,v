head	1.7;
access;
symbols
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.5.0.4
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	photurisd100:1.1.1.1
	photuris:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	98.11.14.23.37.07;	author deraadt;	state dead;
branches;
next	1.6;

1.6
date	98.07.10.20.27.42;	author provos;	state Exp;
branches;
next	1.5;

1.5
date	97.09.03.08.44.41;	author provos;	state Exp;
branches;
next	1.4;

1.4
date	97.08.24.18.30.33;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.07.25.19.13.20;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	97.07.23.12.28.47;	author provos;	state Exp;
branches;
next	1.1;

1.1
date	97.07.18.22.48.49;	author provos;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.07.18.22.48.49;	author provos;	state Exp;
branches;
next	;


desc
@@


1.7
log
@move ipsec tools into .
@
text
@/*
 * Copyright 1997 Niels Provos <provos@@physnet.uni-hamburg.de>
 * All rights reserved.
 *
 * This is partly derived from code by Angelos D. Keromytis, kermit@@forthnet.gr
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Niels Provos.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * $OpenBSD: errlog.c,v 1.6 1998/07/10 20:27:42 provos Exp $
 */

#ifndef lint
static char rcsid[] = "$Id: errlog.c,v 1.6 1998/07/10 20:27:42 provos Exp $";
#endif

#define _ERRLOG_C_

#include <stdio.h>
#include <stdlib.h>
#ifdef __STDC__
#include <stdarg.h>
#else
#include <varargs.h>
#endif
#include <string.h>
#include <syslog.h>
#include <sys/types.h>
#include <errno.h>
#include "photuris.h"
#include "buffer.h"
#include "errlog.h"

#ifdef NEED_SNPRINTF
#include "snprintf.h"
#endif

#if defined(sun) || defined(_AIX)
extern char *sys_errlist[];
extern int errno;
#endif

#define LOG_SIZE 200

void _log_error(int flag, char *fmt, va_list ap);

/*
 * crit_error:
 * log the error and exit
 */

void
#ifdef __STDC__
crit_error(int flag, char *fmt, ...)
#else
crit_error(flag, fmt, va_alist)
        int flag;
        char *fmt;
        va_dcl
#endif
{
	va_list ap;
#ifdef __STDC__
	va_start(ap, fmt);
#else
	va_start(ap);
	fmt = va_arg (ap, char *);
#endif
	_log_error(flag, fmt, ap);
	va_end(ap);
	exit(-1);
}

/*
 * log_error:
 * log an error
 */

void
#ifdef __STDC__
log_error(int flag, char *fmt, ...)
#else
log_error(flag, fmt, va_alist)
        int flag;
        char *fmt;
        va_dcl
#endif
{
     va_list ap;
#ifdef __STDC__
     va_start(ap, fmt);
#else
     va_start(ap);
     fmt = va_arg (ap, char *);
#endif
     _log_error(flag, fmt, ap);
     va_end(ap);
}

void
_log_error(int flag, char *fmt, va_list ap)
{
     char *buffer = calloc(LOG_SIZE, sizeof(char));

     if(buffer == NULL)
	  return;

     if (!daemon_mode)
	  sprintf(buffer, "%s: ", (flag ? "Error" : "Warning"));
     else
	  buffer[0] = '\0';

     vsnprintf(buffer+strlen(buffer), LOG_SIZE-1, fmt, ap);
     buffer[LOG_SIZE-1] = '\0';

     if (daemon_mode)
	  syslog(LOG_WARNING, buffer);
     else {
	  fprintf(stderr, buffer);
	  if (flag)
	       fprintf(stderr, " : %s", sys_errlist[errno]);
	  fprintf(stderr, ".\n");
     }
     free(buffer);

}
@


1.6
log
@fix va_arg handling when not __STDC__
@
text
@d34 1
a34 1
 * $OpenBSD: errlog.c,v 1.5 1997/09/03 08:44:41 provos Exp $
d38 1
a38 1
static char rcsid[] = "$Id: errlog.c,v 1.5 1997/09/03 08:44:41 provos Exp $";
@


1.5
log
@forgot a state_insert, handling resource limit messages should work now!
@
text
@d34 1
a34 1
 * $OpenBSD: /cvs/src/sbin/ipsec/photurisd/errlog.c,v 1.4 1997/08/24 18:30:33 millert Exp $
d38 1
a38 1
static char rcsid[] = "$Id: errlog.c,v 1.4 1997/08/24 18:30:33 millert Exp $";
d91 1
d118 1
@


1.4
log
@#include <string.h> for strlen().
@
text
@d34 1
a34 18
 * $Header: /cvs/src/sbin/ipsec/photurisd/errlog.c,v 1.3 1997/07/25 19:13:20 mickey Exp $
 *
 * $Author: mickey $
 *
 * $Log: errlog.c,v $
 * Revision 1.3  1997/07/25 19:13:20  mickey
 * #if __STDC__ --> #ifdef __STDC__
 *
 * Revision 1.2  1997/07/23 12:28:47  provos
 * tunnel,lifetimes,hostname via startkey/startup
 * errors to stderr before daemon, to syslog afterwards
 *
 * Revision 1.1.1.1  1997/07/18 22:48:49  provos
 * initial import of the photuris keymanagement daemon
 *
 * Revision 1.1  1997/05/22 17:34:16  provos
 * Initial revision
 *
d38 1
a38 1
static char rcsid[] = "$Id: errlog.c,v 1.3 1997/07/25 19:13:20 mickey Exp $";
@


1.3
log
@#if __STDC__ --> #ifdef __STDC__
@
text
@d34 1
a34 1
 * $Header: /cvs/src/sbin/ipsec/photurisd/errlog.c,v 1.2 1997/07/23 12:28:47 provos Exp $
d36 1
a36 1
 * $Author: provos $
d39 3
d55 1
a55 1
static char rcsid[] = "$Id: errlog.c,v 1.2 1997/07/23 12:28:47 provos Exp $";
d67 1
a67 1
#include <stdio.h>
@


1.2
log
@tunnel,lifetimes,hostname via startkey/startup
errors to stderr before daemon, to syslog afterwards
@
text
@d34 1
a34 1
 * $Header: /cvs/src/sbin/ipsec/photurisd/errlog.c,v 1.1.1.1 1997/07/18 22:48:49 provos Exp $
d39 4
d52 1
a52 1
static char rcsid[] = "$Id: errlog.c,v 1.1.1.1 1997/07/18 22:48:49 provos Exp $";
d59 1
a59 1
#if __STDC__
d91 1
a91 1
#if __STDC__
d101 1
a101 1
#if __STDC__
d117 1
a117 1
#if __STDC__
d127 1
a127 1
#if __STDC__
@


1.1
log
@Initial revision
@
text
@d34 1
a34 1
 * $Header: /home/ap_sys/provos/arbeit/Photuris/RCS/errlog.c,v 1.1 1997/05/22 17:34:16 provos Exp $
d39 3
d48 1
a48 1
static char rcsid[] = "$Id: errlog.c,v 1.1 1997/05/22 17:34:16 provos Exp $";
d64 1
d136 1
a136 3
#ifdef __SWR
     FILE f;
#endif
d140 4
a143 5
#ifdef DEBUG
     sprintf(buffer, "%s: ", (flag ? "Error" : "Warning"));
#else
     buffer[0] = '\0';
#endif
d145 1
a145 8
#ifdef __SWR
     f._flags = __SWR | __SSTR;
     f._bf._base = f._p = buffer + strlen(buffer);
     f._bf._size = f._w = LOG_SIZE-1-strlen(buffer);
     vfprintf(&f, fmt, ap);
#else
     vsprintf(buffer+strlen(buffer), fmt, ap);
#endif
d147 9
a155 8
#ifdef DEBUG
     fprintf(stderr, buffer);
     if (flag)
	  fprintf(stderr, " : %s", sys_errlist[errno]);
     fprintf(stderr, ".\n");
#else
     syslog(LOG_WARNING, buffer);
#endif
@


1.1.1.1
log
@initial import of the photuris keymanagement daemon
@
text
@@
