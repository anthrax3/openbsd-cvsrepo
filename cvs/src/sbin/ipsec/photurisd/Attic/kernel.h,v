head	1.8;
access;
symbols
	OPENBSD_2_4:1.7.0.2
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	photurisd100:1.1.1.1
	photuris:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	98.11.14.23.37.12;	author deraadt;	state dead;
branches;
next	1.7;

1.7
date	98.06.30.16.58.33;	author provos;	state Exp;
branches;
next	1.6;

1.6
date	98.05.18.21.25.33;	author provos;	state Exp;
branches;
next	1.5;

1.5
date	98.03.16.20.49.51;	author provos;	state Exp;
branches;
next	1.4;

1.4
date	98.03.04.11.43.33;	author provos;	state Exp;
branches;
next	1.3;

1.3
date	97.07.26.20.55.16;	author provos;	state Exp;
branches;
next	1.2;

1.2
date	97.07.23.12.28.52;	author provos;	state Exp;
branches;
next	1.1;

1.1
date	97.07.18.22.48.50;	author provos;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.07.18.22.48.50;	author provos;	state Exp;
branches;
next	;


desc
@@


1.8
log
@move ipsec tools into .
@
text
@/*
 * Copyright 1997,1998 Niels Provos <provos@@physnet.uni-hamburg.de>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Niels Provos.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/* $Id: kernel.h,v 1.7 1998/06/30 16:58:33 provos Exp $ */
/*
 * kernel.h: 
 * security paramter index creation.
 */
 
#ifndef _KERNEL_H_
#define _KERNEL_H_

#undef EXTERN
#ifdef _KERNEL_C_
#define EXTERN

#define ESP_OLD   0x01
#define ESP_NEW   0x02
#define AH_OLD    0x04
#define AH_NEW    0x08

#define XF_ENC    0x10
#define XF_AUTH   0x20

typedef struct {
     int photuris_id;
     int kernel_id, flags;
} transform;

/* 
 * Translation from Photuris Attributes to Kernel Transforms.
 * For the actual ids see: draft-simpson-photuris-*.txt and
 * draft-simpson-photuris-schemes-*.txt
 */

transform xf[] = {
     {  5, ALG_AUTH_MD5, XF_AUTH|AH_OLD|AH_NEW|ESP_NEW},
     {  6, ALG_AUTH_SHA1, XF_AUTH|AH_OLD|AH_NEW|ESP_NEW},
     {  7, ALG_AUTH_RMD160, XF_AUTH|AH_NEW|ESP_NEW},
     {  8, ALG_ENC_DES, XF_ENC|ESP_OLD},
     { 18, ALG_ENC_3DES, XF_ENC|ESP_NEW},
     { 16, ALG_ENC_BLF, XF_ENC|ESP_NEW},
     { 17, ALG_ENC_CAST, XF_ENC|ESP_NEW},
};

transform *kernel_get_transform(int id);

int kernel_xf_set(struct encap_msghdr *em);
int kernel_xf_read(struct encap_msghdr *em, int msglen);

int kernel_ah(attrib_t *ob, struct spiob *SPI, u_int8_t *secrets, int hmac);
int kernel_esp(attrib_t *ob, attrib_t *ob2, struct spiob *SPI, 
	       u_int8_t *secrets);

int kernel_group_spi(char *address, u_int8_t *spi);

int kernel_enable_spi(in_addr_t isrc, in_addr_t ismask, 
		      in_addr_t idst, in_addr_t idmask, 
		      char *address, u_int8_t *spi, int proto, int flags);
int kernel_disable_spi(in_addr_t isrc, in_addr_t ismask, 
		       in_addr_t idst, in_addr_t idmask, 
		       char *address, u_int8_t *spi, int proto, int flags);
int kernel_delete_spi(char *address, u_int8_t *spi, int proto);

int kernel_request_sa(struct encap_msghdr *em);
#else
#define EXTERN extern
#endif

EXTERN int kernel_known_transform(int id);
EXTERN int kernel_valid(attrib_t *enc, attrib_t *auth);
EXTERN int kernel_valid_auth(attrib_t *auth, u_int8_t *flag, u_int16_t size);

EXTERN u_int32_t kernel_reserve_spi( char *srcaddress, int options);
EXTERN u_int32_t kernel_reserve_single_spi(char *srcaddress, u_int32_t spi, 
					   int proto);

EXTERN int kernel_insert_spi(struct stateob *st, struct spiob *SPI);
EXTERN int kernel_unlink_spi(struct spiob *ospi);
EXTERN int init_kernel(void);
EXTERN int kernel_get_socket(void);
EXTERN void kernel_set_socket_policy(int sd);
EXTERN void kernel_handle_notify(int sd);
EXTERN void kernel_notify_result(struct stateob *, struct spiob *, int);

#endif /* _KERNEL_H */
@


1.7
log
@- support HMAC flag which if present in the attribute list toggles to
HMAC authentication transforms and otherwise to simple keyed authentication.
Note, HMAC is necessary if new esp is to use integrity checking, i.e.
authentication of the payload.
- Also fix bug, where SPIs were reserved for more than one protocol when
only one protocol, e.g. ESP or AH, could be agreed upon.
- Also make kernel.c a bit less complex, I hope.
- return notifies to kernel on failure only when kernel started the keying.
@
text
@d30 1
a30 1
/* $Id: kernel.h,v 1.6 1998/05/18 21:25:33 provos Exp $ */
@


1.6
log
@support kernel notifies for setsockopt/getsockopt interface and fix various
small bugs.
@
text
@d30 1
a30 1
/* $Id: kernel.h,v 1.5 1998/03/16 20:49:51 provos Exp $ */
d51 22
d77 1
a77 1
int kernel_ah(attrib_t *ob, struct spiob *SPI, u_int8_t *secrets);
d96 3
a98 2
EXTERN int kernel_get_offset(int id);
EXTERN int kernel_valid(int encoff, int authoff);
@


1.5
log
@set socket options, so that photuris bypasses kernel ipsec policy,
not yet supported by the kernel actually.
@
text
@d2 1
a2 1
 * Copyright 1997 Niels Provos <provos@@physnet.uni-hamburg.de>
d30 1
a30 1
/* $Id: kernel.h,v 1.4 1998/03/04 11:43:33 provos Exp $ */
d69 1
d81 1
a81 1
EXTERN int kernel_insert_spi(struct spiob *SPI);
d86 2
@


1.4
log
@compliance with draft-simpson-photuris-18.txt, better packet structure
checking, better support for new esp and ah, documentation ...
@
text
@d30 1
a30 1
/* $Id: kernel.h,v 1.3 1997/07/26 20:55:16 provos Exp $ */
d84 1
@


1.3
log
@reserve SPIs for correct protos: ah and/or esp.
@
text
@d30 1
a30 1
/* $Id: kernel.h,v 1.2 1997/07/23 12:28:52 provos Exp $ */
d43 9
d55 3
a57 4
int kernel_des(char *srcaddress, char *dstaddress, 
	       u_int8_t *spi, u_int8_t *secret, int tunnel);
int kernel_md5(char *srcaddress, char *dstaddress, 
	       u_int8_t *spi, u_int8_t *secret, int tunnel);
d72 3
@


1.2
log
@tunnel,lifetimes,hostname via startkey/startup
errors to stderr before daemon, to syslog afterwards
@
text
@d30 1
a30 1
/* $Id: kernel.h,v 1.1.1.1 1997/07/18 22:48:50 provos Exp $ */
d65 3
a67 1
EXTERN u_int32_t kernel_reserve_spi( char *srcaddress);
@


1.1
log
@Initial revision
@
text
@d30 1
a30 1
/* $Id: kernel.h,v 1.1 1997/06/05 12:08:30 provos Exp $ */
d47 1
a47 1
	       u_int8_t *spi, u_int8_t *secret);
d49 2
a50 1
	       u_int8_t *spi, u_int8_t *secret);
d53 2
a54 1
int kernel_enable_spi(char *isrc, char *ismask, char *idst, char *idmask, 
d56 2
a57 1
int kernel_disable_spi(char *isrc, char *ismask, char *idst, char *idmask, 
@


1.1.1.1
log
@initial import of the photuris keymanagement daemon
@
text
@@

