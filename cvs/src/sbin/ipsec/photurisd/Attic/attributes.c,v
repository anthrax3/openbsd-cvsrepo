head	1.5;
access;
symbols
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.2.0.2
	OPENBSD_2_2_BASE:1.2
	photurisd100:1.1.1.1
	photuris:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	98.11.14.23.37.04;	author deraadt;	state dead;
branches;
next	1.4;

1.4
date	98.06.30.16.58.47;	author provos;	state Exp;
branches;
next	1.3;

1.3
date	98.03.04.11.43.08;	author provos;	state Exp;
branches;
next	1.2;

1.2
date	97.07.19.12.07.40;	author provos;	state Exp;
branches;
next	1.1;

1.1
date	97.07.18.22.48.50;	author provos;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.07.18.22.48.50;	author provos;	state Exp;
branches;
next	;


desc
@@


1.5
log
@move ipsec tools into .
@
text
@/*
 * Copyright 1997,1998 Niels Provos <provos@@physnet.uni-hamburg.de>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Niels Provos.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * attributes.c:
 * functions for handling attributess
 */

#ifndef lint
static char rcsid[] = "$Id: attributes.c,v 1.4 1998/06/30 16:58:47 provos Exp $";
#endif

#define _ATTRIBUTES_C_

#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include "config.h"
#include "attributes.h"

static attribute_list *attribob = NULL;
static attrib_t *attribhash[ATTRIBHASHMOD];

/* Put or get attribute properties from the hashtable */

void
putattrib(attrib_t *attrib)
{
     int hashval = attrib->id % ATTRIBHASHMOD;
     attrib->next = attribhash[hashval];
     attribhash[hashval] = attrib;
}

attrib_t *
getattrib(u_int8_t id) 
{
     u_int8_t hashval = id % ATTRIBHASHMOD;
     attrib_t *attrib;

     for(attrib=attribhash[hashval]; attrib; attrib = attrib->next)
	  if (attrib->id == id)
	       break;

     return attrib;
}

void
clearattrib(void)
{
     int i;
     attrib_t *attrib;

     for (i=0; i<ATTRIBHASHMOD; i++)
	  while ((attrib=attribhash[i]) != NULL) {
	       attribhash[i] = attrib->next;
	       free(attrib);
	  }
}

int
isinattrib(u_int8_t *attributes, u_int16_t attribsize, u_int8_t attribute)
{
     while(attribsize>0) {
	  if(*attributes==attribute)
	       return 1;
	  if(attribsize - (*(attributes+1)+2) > attribsize) 
	       return 0;

	  attribsize -= *(attributes+1)+2;
	  attributes += *(attributes+1)+2;
     }
     return 0;
}

void
get_attrib_section(u_int8_t *set, u_int16_t setsize, 
		   u_int8_t **subset, u_int16_t *subsetsize,
		   u_int8_t section)
{
     int i = 0;
     u_int8_t *tset;
     u_int16_t tsetsize;

     while (i < setsize) {
	  if (set[i] == section)
	       break;
	  i += set[i+1] + 2;
     }

     if ((i >= setsize) || (i+set[i+1] + 2 > setsize)) {
	  *subset = NULL;
	  *subsetsize = 0;
	  return;
     }

     tset = *subset = set+i+set[i+1]+2;
     tsetsize = *subsetsize = setsize - i - set[i+1] - 2;

     i = 0;
     while (i < tsetsize) {
	  if (tset[i] == AT_ESP_ATTRIB || tset[i] == AT_AH_ATTRIB) {
	       *subsetsize = i;
	       return;
	  }
	  i += tset[i+1]+2;
     }
}


int 
isattribsubset(u_int8_t *set, u_int16_t setsize, 
	       u_int8_t *subset, u_int16_t subsetsize)
{
     while(subsetsize>0) {
	  if (!isinattrib(set, setsize, *subset))
	       return 0;
	  if (subsetsize - (*(subset+1)+2) > subsetsize)
	       return 0;
	  subsetsize -= *(subset+1)+2;
	  subset += *(subset+1)+2;
     }
     return 1;
}

int
attrib_insert(attribute_list *ob)
{
     attribute_list *tmp;

     ob->next = NULL;

     if(attribob == NULL) {
	  attribob = ob;
	  return 1;
     }
     
     tmp=attribob;
     while(tmp->next!=NULL)
	  tmp = tmp->next;

     tmp->next = ob;
     return 1;
}

int
attrib_unlink(attribute_list *ob)
{
     attribute_list *tmp;
     if(attribob == ob) {
	  attribob = ob->next;
	  free(ob);
	  return 1;
     }

     for(tmp=attribob; tmp!=NULL; tmp=tmp->next) {
	  if(tmp->next==ob) {
	       tmp->next=ob->next;
	       free(ob);
	       return 1;
	  }
     }
     return 0;
}

attribute_list *
attrib_new(void)
{
     attribute_list *p;

     if((p = calloc(1, sizeof(attribute_list)))==NULL)
	  return NULL;

     return p;
}

int
attrib_value_reset(attribute_list *ob)
{ 
     if (ob->address != NULL)
	  free(ob->address);
     if (ob->attributes != NULL)
	  free(ob->attributes);

     bzero(ob, sizeof(attribute_list));
     return 1;
}

/* 
 * find the attributes to the address or 0 address.
 * if passed a null pointer as first argument we return our default
 * list.
 */

attribute_list *
attrib_find(char *address)
{
     attribute_list *tmp = attribob;
     attribute_list *null = NULL;
     while(tmp!=NULL) {
	  if (tmp->address == NULL) {
	       null = tmp;
	       if (address == NULL)
		    break;
	  }
	  else if (address != NULL &&
		   (tmp->netmask & inet_addr(address)) ==
		   inet_addr(tmp->address))
	       return tmp;

	  tmp = tmp->next;
     }
     return null;
}

void
attrib_cleanup()
{
     attribute_list *p;
     attribute_list *tmp = attribob;
     while(tmp!=NULL) {
	  p = tmp;
	  tmp = tmp->next;
	  attrib_value_reset(p);
	  free(p);
     }
     attribob = NULL;
}

@


1.4
log
@- support HMAC flag which if present in the attribute list toggles to
HMAC authentication transforms and otherwise to simple keyed authentication.
Note, HMAC is necessary if new esp is to use integrity checking, i.e.
authentication of the payload.
- Also fix bug, where SPIs were reserved for more than one protocol when
only one protocol, e.g. ESP or AH, could be agreed upon.
- Also make kernel.c a bit less complex, I hope.
- return notifies to kernel on failure only when kernel started the keying.
@
text
@d36 1
a36 1
static char rcsid[] = "$Id: attributes.c,v 1.3 1998/03/04 11:43:08 provos Exp $";
@


1.3
log
@compliance with draft-simpson-photuris-18.txt, better packet structure
checking, better support for new esp and ah, documentation ...
@
text
@d2 1
a2 1
 * Copyright 1997 Niels Provos <provos@@physnet.uni-hamburg.de>
d36 1
a36 1
static char rcsid[] = "$Id: attributes.c,v 1.2 1997/07/19 12:07:40 provos Exp $";
d64 1
a64 1
getattrib(int id) 
d66 1
a66 1
     int hashval = id % ATTRIBHASHMOD;
@


1.2
log
@minor cleanup.
@
text
@d36 1
a36 1
static char rcsid[] = "$Id: attributes.c,v 1.1.1.1 1997/07/18 22:48:50 provos Exp $";
d50 38
a87 1
static struct attribute_list *attribob = NULL;
d104 35
d155 1
a155 1
attrib_insert(struct attribute_list *ob)
d157 1
a157 1
     struct attribute_list *tmp;
d175 1
a175 1
attrib_unlink(struct attribute_list *ob)
d177 1
a177 1
     struct attribute_list *tmp;
d194 1
a194 1
struct attribute_list *
d197 1
a197 1
     struct attribute_list *p;
d199 1
a199 1
     if((p = calloc(1, sizeof(struct attribute_list)))==NULL)
d206 1
a206 1
attrib_value_reset(struct attribute_list *ob)
d213 1
a213 1
     bzero(ob, sizeof(struct attribute_list));
d223 1
a223 1
struct attribute_list *
d226 2
a227 2
     struct attribute_list *tmp = attribob;
     struct attribute_list *null = NULL;
d247 2
a248 2
     struct attribute_list *p;
     struct attribute_list *tmp = attribob;
@


1.1
log
@Initial revision
@
text
@d36 1
a36 1
static char rcsid[] = "$Id: attributes.c,v 1.2 1997/06/05 12:08:30 provos Exp $";
d51 30
@


1.1.1.1
log
@initial import of the photuris keymanagement daemon
@
text
@@

