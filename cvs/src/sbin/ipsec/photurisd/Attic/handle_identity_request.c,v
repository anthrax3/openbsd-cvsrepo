head	1.8;
access;
symbols
	OPENBSD_2_4:1.7.0.2
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	photurisd100:1.1.1.1
	photuris:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	98.11.14.23.37.09;	author deraadt;	state dead;
branches;
next	1.7;

1.7
date	98.06.30.16.58.41;	author provos;	state Exp;
branches;
next	1.6;

1.6
date	98.05.18.21.25.23;	author provos;	state Exp;
branches;
next	1.5;

1.5
date	98.03.04.11.43.20;	author provos;	state Exp;
branches;
next	1.4;

1.4
date	97.09.02.17.26.36;	author provos;	state Exp;
branches;
next	1.3;

1.3
date	97.07.23.12.28.48;	author provos;	state Exp;
branches;
next	1.2;

1.2
date	97.07.19.12.07.45;	author provos;	state Exp;
branches;
next	1.1;

1.1
date	97.07.18.22.48.50;	author provos;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.07.18.22.48.50;	author provos;	state Exp;
branches;
next	;


desc
@@


1.8
log
@move ipsec tools into .
@
text
@/*
 * Copyright 1997,1998 Niels Provos <provos@@physnet.uni-hamburg.de>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Niels Provos.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * handle_identity_request:
 * receive a IDENTITY_REQUEST packet; return -1 on failure, 0 on success
 */

#ifndef lint
static char rcsid[] = "$Id: handle_identity_request.c,v 1.7 1998/06/30 16:58:41 provos Exp $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "config.h"
#include "photuris.h"
#include "packets.h"
#include "state.h"
#include "cookie.h"
#include "buffer.h"
#include "packet.h"
#include "encrypt.h"
#include "identity.h"
#include "spi.h"
#include "secrets.h"
#include "scheme.h"
#include "errlog.h"
#include "schedule.h"
#include "attributes.h"
#include "md5.h"
#ifdef IPSEC
#include "kernel.h"
#endif
#ifdef DEBUG
#include "packet.h"
#endif

int
handle_identity_request(u_char *packet, int size, char *address, 
			char *local_address)
{
        struct packet_sub parts[] = {
	     { "IDChoice", FLD_ATTRIB, FMD_ATT_ONE, 0, },
	     { "Identity", FLD_VARPRE, 0, 0, },
	     { "Verification", FLD_VARPRE, 0, 0, },
	     { "Attributes", FLD_ATTRIB, FMD_ATT_FILL, 0, },
	     { NULL }
	};

        struct packet id_msg = {
	     "Identity Request", 
	     IDENTITY_MESSAGE_MIN, 0, parts
	};

	struct identity_message *header;
	struct stateob *st;
	struct spiob *spi;
	MD5_CTX ctx;
	u_int8_t *p, *attributes;
	u_int16_t i, attribsize, tmp;
	u_int8_t signature[22];  /* XXX - constant */

	if (size < IDENTITY_MESSAGE_MIN)
	     return -1;	/* packet too small  */

	header = (struct identity_message *) packet;

	st = state_find_cookies(address, header->icookie, header->rcookie);
	if (st == NULL) {
	     packet_size = PACKET_BUFFER_SIZE;
	     photuris_error_message(st, packet_buffer, &packet_size,
 				    header->icookie, header->rcookie,
				    0, BAD_COOKIE);
	     send_packet();
	     return 0;
	}

	if (st->phase != VALUE_RESPONSE && st->phase != SPI_UPDATE)
	     return -1;     /* We don't want this packet */

	/* Decrypt message */
	tmp = size - IDENTITY_MESSAGE_MIN;
	if (packet_decrypt(st, IDENTITY_MESSAGE_CHOICE(header), &tmp) == -1) {
	     log_error(0, "packet_decrypt() in handle_identity_request()");
	     goto verification_failed;
	}

#ifdef DEBUG2
	printf("Identity-Request (after decryption):\n");
	packet_dump(packet, size, 0);
#endif
	/* Verify message structure */
	if (packet_check((u_int8_t *)header, size - packet[size-1], &id_msg) == -1) {
	     log_error(0, "bad packet structure in handle_identity_request()");
	     return -1;
	}

#ifdef DEBUG
	packet_ordered_dump(packet, size - packet[size-1], &id_msg);
#endif

	/* Create a signature of this packet */
	MD5Init(&ctx);
	MD5Update(&ctx, packet, size);
	MD5Final(signature, &ctx);

	if (st->phase != VALUE_RESPONSE) {
	     /* 
	      * Compare with the identity request which got verified
	      * initially. If matching resend our response.
	      */

	     if (bcmp(signature, st->packetsig, sizeof(st->packetsig)))
		  goto verification_failed;

	     /* We got send the old packet again */
	     bcopy(st->packet, packet_buffer, st->packetlen);
	     packet_size = st->packetlen;
	     
	     send_packet();
	     return 0;
	} else
	     bcopy(signature, st->packetsig, sizeof(st->packetsig));

	attributes = parts[3].where;
	attribsize = parts[3].size;

	if (!isattribsubset(st->oSPIoattrib,st->oSPIoattribsize,
			    attributes, attribsize)) {
	     log_error(0, "attributes are not a subset in handle_identity_request()");
	     return 0;
	}

	i = get_identity_verification_size(st, IDENTITY_MESSAGE_CHOICE(header));
	if (!i || i != parts[2].size || i > sizeof(signature)) {
	     log_error(0, "verification size mismatch in handle_identity_request()");
	     goto verification_failed;
	}

	bcopy(parts[2].where, signature, i);

	/* Fill the state object, but only if we have not dont so before */
	if (st->uSPIidentver == NULL) {
	     if((st->uSPIidentver = calloc(i, sizeof(u_int8_t))) == NULL) { 
		  log_error(1, "calloc() in handle_identity_request()"); 
		  goto verification_failed;
	     }
	     bcopy(signature, st->uSPIidentver, i);
	     st->uSPIidentversize = i;
	}
	
	p = IDENTITY_MESSAGE_CHOICE(header);
	if (st->uSPIidentchoice == NULL) {
	     if((st->uSPIidentchoice = calloc(p[1]+2, sizeof(u_int8_t))) == NULL) {
		  log_error(1, "calloc() in handle_identity_request()");
		  goto verification_failed;
	     }
	     bcopy(p, st->uSPIidentchoice, p[1]+2);
	     st->uSPIidentchoicesize = p[1]+2;
	}
	
	p += p[1] + 2;
	if (st->uSPIident == NULL) {
	     if((st->uSPIident = calloc(varpre2octets(p), sizeof(u_int8_t))) == NULL) {
		  log_error(1,"calloc() in handle_identity_request()"); 
		  goto verification_failed;
	     }
	     bcopy(p, st->uSPIident, varpre2octets(p));
	}
	
	if (st->uSPIattrib == NULL) {
	     if((st->uSPIattrib = calloc(attribsize, sizeof(u_int8_t))) == NULL) {
		  log_error(1, "calloc() in handle_identity_request()");
		  return -1;
	     }
	     bcopy(attributes, st->uSPIattrib, attribsize);
	     st->uSPIattribsize = attribsize;
	}
	
	if (st->oSPIident == NULL && 
	    get_secrets(st, (ID_REMOTE|ID_LOCAL)) == -1) {
	     log_error(0, "get_secrets() in in handle_identity_request()");
	     goto verification_failed;
	}
	
	if (!verify_identity_verification(st, signature, packet, size)) {
	     /* 
	      * Clean up everything used from this packet 
	      * but only if we did not get a valid packet before.
	      * Otherwise this could be used as Denial of Service.
	      */
	     free(st->uSPIidentchoice);
	     st->uSPIidentchoice = NULL; st->uSPIidentchoicesize = 0;
	     free(st->uSPIidentver);
	     st->uSPIidentver = NULL; st->uSPIidentversize = 0;
	     free(st->uSPIattrib);
	     st->uSPIattrib = NULL; st->uSPIattribsize = 0;
	     free(st->uSPIident);
	     st->uSPIident = NULL;
	     free(st->oSPIident);
	     st->oSPIident = NULL;
	     
	     /* Clean up secrets */
	     free(st->oSPIsecret);
	     st->oSPIsecret = NULL; st->oSPIsecretsize = 0;
	     free(st->uSPIsecret);
	     st->uSPIsecret = NULL; st->uSPIsecretsize = 0;
	     
	verification_failed:
	     log_error(0, "verification failed in handle_identity_request()");
	     packet_size = PACKET_BUFFER_SIZE;
	     photuris_error_message(st, packet_buffer, &packet_size,
				    header->icookie, header->rcookie,
				    0, VERIFICATION_FAILURE);
	     send_packet();
	     return 0;
	}

	/* Create SPI + choice of attributes */
	if(make_spi(st, local_address, st->oSPI, &(st->olifetime), 
		    &(st->oSPIattrib), &(st->oSPIattribsize)) == -1) {
	     log_error(0, "make_spi() in handle_identity_request()");
	     return -1;
	}
	
	packet_size = PACKET_BUFFER_SIZE;
	if (photuris_identity_response(st, packet_buffer, &packet_size) == -1)
	     return -1;

	send_packet();

	packet_save(st, packet_buffer, packet_size);

	/* At this point we do not need the exchange values any longer */
	free(st->texchange); st->texchange = NULL;
	free(st->exchangevalue); st->exchangevalue = NULL;

	bcopy(header->SPI, st->uSPI, SPI_SIZE);
	st->ulifetime = (header->lifetime[0] << 16) + 
	     (header->lifetime[1] << 8) + header->lifetime[2];
	
	if (st->oSPI[0] || st->oSPI[1] || st->oSPI[2] || st->oSPI[3]) {
             /* Insert Owner SPI */ 
             if ((spi = spi_new(st->address, st->oSPI)) == NULL) { 
                  log_error(0, "spi_new() in handle_identity_request()"); 
                  return -1; 
             } 
	     if ((spi->local_address = strdup(local_address)) == NULL) {
		  log_error(0, "strdup() in handle_identity_request()");
		  return -1;
	     }
             bcopy(st->icookie, spi->icookie, COOKIE_SIZE); 
	     spi->flags |= SPI_OWNER;
             spi->attribsize = st->oSPIattribsize; 
             spi->attributes = calloc(spi->attribsize, sizeof(u_int8_t)); 
             if (spi->attributes == NULL) { 
                  log_error(1, "calloc() in handle_identity_request()"); 
                  spi_value_reset(spi); 
                  return -1; 
             } 
             bcopy(st->oSPIattrib, spi->attributes, spi->attribsize); 
             spi->lifetime = time(NULL) + st->olifetime; 

	     /* Cludge for getting the right verification field */
	     state_save_verification(st, st->oSPIidentver, st->oSPIidentversize);
	     /* Make session keys for Owner */
	     make_session_keys(st, spi);

             spi_insert(spi); 
#ifdef IPSEC
	     kernel_insert_spi(st, spi);
#endif
             schedule_insert(UPDATE, st->olifetime/2, spi->SPI, SPI_SIZE); 
	}

	if (st->uSPI[0] || st->uSPI[1] || st->uSPI[2] || st->uSPI[3]) {
	     /* Insert User SPI */
	     if ((spi = spi_new(st->address, st->uSPI)) == NULL) {
		  log_error(0, "spi_new() in handle_identity_request()");
		  return -1;
	     }
	     if ((spi->local_address = strdup(local_address)) == NULL) {
		  log_error(1, "strdup() in handle_identity_request()");
		  return -1;
	     }
	     spi->flags |= st->flags & IPSEC_NOTIFY ? SPI_NOTIFY : 0;
	     bcopy(st->icookie, spi->icookie, COOKIE_SIZE);
	     spi->attribsize = st->uSPIattribsize;
	     spi->attributes = calloc(spi->attribsize, sizeof(u_int8_t));
	     if (spi->attributes == NULL) {
		  log_error(1, "calloc() in handle_identity_request()");
		  spi_value_reset(spi);
		  return -1;
	     }
	     bcopy(st->uSPIattrib, spi->attributes, spi->attribsize);
	     spi->lifetime = time(NULL) + st->ulifetime;

	     /* Cludge for getting the right verification field */
	     state_save_verification(st, st->uSPIidentver, st->uSPIidentversize);
	     /* Make session keys for User */
	     make_session_keys(st, spi);

	     spi_set_tunnel(st, spi);

	     spi_insert(spi);
#ifdef IPSEC
	     kernel_insert_spi(st, spi);
#endif
	}

	st->lifetime = st->exchange_lifetime + time(NULL) + random() % 20;

	st->retries = 0;
	st->phase = SPI_UPDATE;
	return 0;
}
@


1.7
log
@- support HMAC flag which if present in the attribute list toggles to
HMAC authentication transforms and otherwise to simple keyed authentication.
Note, HMAC is necessary if new esp is to use integrity checking, i.e.
authentication of the payload.
- Also fix bug, where SPIs were reserved for more than one protocol when
only one protocol, e.g. ESP or AH, could be agreed upon.
- Also make kernel.c a bit less complex, I hope.
- return notifies to kernel on failure only when kernel started the keying.
@
text
@d36 1
a36 1
static char rcsid[] = "$Id: handle_identity_request.c,v 1.6 1998/05/18 21:25:23 provos Exp $";
@


1.6
log
@support kernel notifies for setsockopt/getsockopt interface and fix various
small bugs.
@
text
@a32 1
 *
d36 1
a36 1
static char rcsid[] = "$Id: handle_identity_request.c,v 1.5 1998/03/04 11:43:20 provos Exp $";
d99 1
a99 1
				    header->icookie, header->rcookie,
d115 1
a115 1
#ifdef DEBUG
@


1.5
log
@compliance with draft-simpson-photuris-18.txt, better packet structure
checking, better support for new esp and ah, documentation ...
@
text
@d2 1
a2 1
 * Copyright 1997 Niels Provos <provos@@physnet.uni-hamburg.de>
d37 1
a37 1
static char rcsid[] = "$Id: handle_identity_request.c,v 1.4 1997/09/02 17:26:36 provos Exp $";
d299 1
a299 1
	     kernel_insert_spi(spi);
d314 1
d335 1
a335 1
	     kernel_insert_spi(spi);
@


1.4
log
@including changes between drafts-14-16.
update cookie and counters correctly after receiving a resource limit
message.
@
text
@d37 1
a37 1
static char rcsid[] = "$Id: handle_identity_request.c,v 1.3 1997/07/23 12:28:48 provos Exp $";
d58 1
d62 3
d70 13
d86 1
d88 1
a88 1
	u_int16_t i, asize, attribsize, tmp;
d116 9
a124 3
	/* Verify message */
	if (!(i = get_identity_verification_size(st, IDENTITY_MESSAGE_CHOICE(header))))
	     goto verification_failed;
d126 3
a128 1
	asize = IDENTITY_MESSAGE_MIN;
d130 4
a133 5
	p = IDENTITY_MESSAGE_CHOICE(header);
	asize += p[1] + 2;
	p += p[1] + 2;
	asize += varpre2octets(p);
	p += varpre2octets(p);
d135 5
a139 6
	attributes = p + i;
	asize += i;                            /* Verification size */
	asize += packet[size-1];               /* Padding size */
	attribsize = 0;
	while(asize + attribsize < size)
	     attribsize += attributes[attribsize+1] + 2;
d141 2
a142 1
	asize += attribsize;
d144 5
a148 2
	if (asize != size) {
	     log_error(0, "wrong packet size in handle_identity_request()");
d150 5
a154 1
	}
d162 3
a164 2
	if (i > sizeof(signature)) {
	     log_error(0, "verification too long in handle_identity_request()");
d168 1
a168 2
	bcopy(p, signature, i);
	bzero(p, i);
d170 5
a174 9
	if (st->phase == VALUE_RESPONSE) {
	     /* Fill the state object, but only if we have not dont so before */
	     if (st->uSPIidentver == NULL) {
		  if((st->uSPIidentver = calloc(i, sizeof(u_int8_t))) == NULL) { 
		       log_error(1, "calloc() in handle_identity_request()"); 
		       goto verification_failed;
		  }
		  bcopy(signature, st->uSPIidentver, i);
		  st->uSPIidentversize = i;
d176 9
a184 9
	     
	     p = IDENTITY_MESSAGE_CHOICE(header);
	     if (st->uSPIidentchoice == NULL) {
		  if((st->uSPIidentchoice = calloc(p[1]+2, sizeof(u_int8_t))) == NULL) {
		       log_error(1, "calloc() in handle_identity_request()");
		       goto verification_failed;
		  }
		  bcopy(p, st->uSPIidentchoice, p[1]+2);
		  st->uSPIidentchoicesize = p[1]+2;
d186 9
a194 8

	     p += p[1] + 2;
	     if (st->uSPIident == NULL) {
		  if((st->uSPIident = calloc(varpre2octets(p), sizeof(u_int8_t))) == NULL) {
		       log_error(1,"calloc() in handle_identity_request()"); 
		       goto verification_failed;
		  }
		  bcopy(p, st->uSPIident, varpre2octets(p));
d196 2
d199 4
a202 7
	     if (st->uSPIattrib == NULL) {
		  if((st->uSPIattrib = calloc(attribsize, sizeof(u_int8_t))) == NULL) {
		       log_error(1, "calloc() in handle_identity_request()");
		       return -1;
		  }
		  bcopy(attributes, st->uSPIattrib, attribsize);
		  st->uSPIattribsize = attribsize;
d204 8
a211 7

	     if (st->oSPIident == NULL && 
		 get_secrets(st, (ID_REMOTE|ID_LOCAL)) == -1) {
		  log_error(0, "get_secrets() in in handle_identity_request()");
		  goto verification_failed;
	     }

d213 1
a213 1

d215 22
a236 24
	     if (st->phase != SPI_UPDATE) {
		  /* 
		   * Clean up everything used from this packet 
		   * but only if we did not get a valid packet before.
		   * Otherwise this could be used as Denial of Service.
		   */
		  free(st->uSPIidentchoice);
		  st->uSPIidentchoice = NULL; st->uSPIidentchoicesize = 0;
		  free(st->uSPIidentver);
		  st->uSPIidentver = NULL; st->uSPIidentversize = 0;
		  free(st->uSPIattrib);
		  st->uSPIattrib = NULL; st->uSPIattribsize = 0;
		  free(st->uSPIident);
		  st->uSPIident = NULL;
		  free(st->oSPIident);
		  st->oSPIident = NULL;

		  /* Clean up secrets */
		  free(st->oSPIsecret);
		  st->oSPIsecret = NULL; st->oSPIsecretsize = 0;
		  free(st->uSPIsecret);
		  st->uSPIsecret = NULL; st->uSPIsecretsize = 0;
	     }

a242 9
	     send_packet();
	     return 0;
	}

	if (st->phase != VALUE_RESPONSE) {
	     /* We got send the old packet again */
	     bcopy(st->packet, packet_buffer, st->packetlen);
	     packet_size = st->packetlen;
	     
@


1.3
log
@tunnel,lifetimes,hostname via startkey/startup
errors to stderr before daemon, to syslog afterwards
@
text
@d37 1
a37 1
static char rcsid[] = "$Id: handle_identity_request.c,v 1.2 1997/07/19 12:07:45 provos Exp $";
d244 4
d274 2
d307 2
@


1.2
log
@minor cleanup.
@
text
@d37 1
a37 1
static char rcsid[] = "$Id: handle_identity_request.c,v 1.1.1.1 1997/07/18 22:48:50 provos Exp $";
d259 1
a259 1
	     spi->owner = 1;
d304 2
d312 1
a312 1
	st->lifetime = exchange_lifetime + time(NULL) + random() % 20;
@


1.1
log
@Initial revision
@
text
@d37 1
a37 1
static char rcsid[] = "$Id: handle_identity_request.c,v 1.3 1997/06/12 17:09:20 provos Exp provos $";
d57 1
d95 1
a95 6
	     packet_size = PACKET_BUFFER_SIZE;
	     photuris_error_message(st, packet_buffer, &packet_size,
				    header->icookie, header->rcookie,
				    0, VERIFICATION_FAILURE);
	     send_packet();
	     return -1;
d99 3
a101 9
	if (!(i = get_identity_verification_size(st, IDENTITY_MESSAGE_CHOICE(header)))) {
	     packet_size = PACKET_BUFFER_SIZE;
	     photuris_error_message(st, packet_buffer, &packet_size,
				    header->icookie, header->rcookie,
				    0, VERIFICATION_FAILURE);
	     send_packet();
	     return -1;
	}
	
d121 7
a127 1
	     return -1;
d132 1
a132 6
	     packet_size = PACKET_BUFFER_SIZE;
	     photuris_error_message(st, packet_buffer, &packet_size,
				    header->icookie, header->rcookie,
				    0, VERIFICATION_FAILURE);
	     send_packet();
	     return -1;
d143 1
a143 1
		       return -1; 
d153 1
a153 1
		       return -1;
d163 1
a163 1
		       return -1; 
d180 1
a180 1
		  return -1;
d210 1
@


1.1.1.1
log
@initial import of the photuris keymanagement daemon
@
text
@@

