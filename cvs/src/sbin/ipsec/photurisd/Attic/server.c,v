head	1.8;
access;
symbols
	OPENBSD_2_4:1.7.0.2
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.4.0.2
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.2.0.2
	OPENBSD_2_2_BASE:1.2
	photurisd100:1.1.1.1
	photuris:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	98.11.14.23.37.17;	author deraadt;	state dead;
branches;
next	1.7;

1.7
date	98.08.17.22.12.42;	author provos;	state Exp;
branches;
next	1.6;

1.6
date	98.06.30.16.58.40;	author provos;	state Exp;
branches;
next	1.5;

1.5
date	98.05.18.21.25.36;	author provos;	state Exp;
branches;
next	1.4;

1.4
date	98.03.16.20.49.53;	author provos;	state Exp;
branches;
next	1.3;

1.3
date	98.03.04.11.43.52;	author provos;	state Exp;
branches;
next	1.2;

1.2
date	97.07.22.11.18.25;	author provos;	state Exp;
branches;
next	1.1;

1.1
date	97.07.18.22.48.50;	author provos;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.07.18.22.48.50;	author provos;	state Exp;
branches;
next	;


desc
@@


1.8
log
@move ipsec tools into .
@
text
@/*
 * Copyright 1997,1998 Niels Provos <provos@@physnet.uni-hamburg.de>
 * All rights reserved.
 *
 * Parts derived from code by Angelos D. Keromytis, kermit@@forthnet.gr
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Niels Provos.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * server.c:
 * SERVER handling functions
 */

#ifndef lint
static char rcsid[] = "$Id: server.c,v 1.7 1998/08/17 22:12:42 provos Exp $";
#endif

#define _SERVER_C_
#include <stdio.h>
#include <stdlib.h> 
#include <fcntl.h>
#include <sys/types.h>  
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/socket.h>  
#include <netinet/in.h>  
#include <arpa/inet.h>  
#include <netdb.h> 
#include <sys/ioctl.h> 
#include <net/if.h> 
#include <string.h>
#include <unistd.h>
#ifdef _AIX 
#include <sys/select.h> 
#endif 
#include <errno.h>
#include "config.h"
#include "photuris.h"
#include "server.h"
#include "api.h"
#include "packet.h"
#include "schedule.h"
#include "errlog.h"
#include "buffer.h"
#ifdef IPSEC
#include "spi.h"
#include "attributes.h"
#include "kernel.h"
#endif

int
init_server(void)
{
     struct sockaddr_in sin, *sin2; 
     struct protoent *proto; 
     struct stat sb;
     int sock, d, i, ip, on = 1; 
     struct ifconf ifconf; 
     void *newbuf;
     char buf[1024];

     readfds = normfds = NULL;

     if (global_port == 0) {
#ifndef PHOTURIS_PORT  
	  struct servent *ser;

	  if ((ser = getservbyname("photuris", "udp")) == (struct servent *) NULL)
	       crit_error(1, "getservbyname(\"photuris\") in init_server()");

	  global_port = ser->s_port;
#else  
	  global_port = PHOTURIS_PORT;
#endif  
     }

     if ((proto = getprotobyname("udp")) == (struct protoent *) NULL)
          crit_error(1, "getprotobyname() in init_server()"); 
 
     if ((global_socket = socket(PF_INET, SOCK_DGRAM, proto->p_proto)) < 0)
          crit_error(1, "socket() in init_server()"); 
     
     setsockopt(global_socket, SOL_SOCKET, SO_REUSEADDR, (void *)&on, 
		sizeof(on));
#ifdef IPSEC
     kernel_set_socket_policy(global_socket);
#endif	  

     /* get the local addresses */ 
 
     ifconf.ifc_len = 1024; 
     ifconf.ifc_buf = buf; 
     bzero(buf, 1024); 
 
     if (ioctl(global_socket, SIOCGIFCONF, &ifconf) == -1) 
          crit_error(1, "ioctl() in init_server()"); 

     sin.sin_port = htons(global_port);
     sin.sin_addr.s_addr = INADDR_ANY; 
     sin.sin_family = AF_INET; 
     
     if (bind(global_socket, (struct sockaddr *)&sin, sizeof(struct sockaddr)) < 0)
	  crit_error(1, "bind() in init_server()"); 
 
     /* Save interfaces addresses here */
     addresses = (char **) calloc(1+1, sizeof(char *)); 
     if (addresses == (char **) NULL) 
	  crit_error(1, "calloc() in init_server()"); 
     addresses[1] = (char *) NULL; 
 
     sockets = (int *) calloc(1+1, sizeof(int)); 
     if (sockets == (int *) NULL) 
	  crit_error(1, "calloc() in init_server()"); 
     sockets[1] = -1;
 
     if (lstat(PHOTURIS_FIFO, &sb) == -1) {
	  if (errno != ENOENT)
	       crit_error(1, "stat() in init_server()");
	  if (mkfifo(PHOTURIS_FIFO, 0660) == -1)
	       crit_error(1, "mkfifo() in init_server()");
     } else if (!(sb.st_mode & S_IFIFO))
	  log_error(0, "%s is not a FIFO in init_server()", PHOTURIS_FIFO);

     /* We listen on a named pipe */
#if defined(linux) || defined(_AIX)
     if ((sockets[0] = open(PHOTURIS_FIFO, O_RDWR| O_NONBLOCK, 0)) == -1)
#else
     if ((sockets[0] = open(PHOTURIS_FIFO, O_RDONLY | O_NONBLOCK, 0)) == -1)
#endif
	  crit_error(1, "open() in init_server()");
     i = 1;                  /* One interface already */

#ifdef IPSEC
     /* We also listen on PF_ENCAP for notify messages */
     newbuf = realloc(addresses, (i + 2) * sizeof(char *)); 
     if (newbuf == NULL) {
	  if (addresses != NULL)
	       free (addresses);
	  crit_error(1, "realloc() in init_server()"); 
     }
     addresses = (char **) newbuf;
     
     addresses[i + 1] = (char *) NULL; 

     newbuf = realloc(sockets, (i + 2)* sizeof(int));
     if (newbuf == NULL) {
	  if (sockets != NULL)
	       free (sockets);
	  crit_error(1, "realloc() in init_server()");
     }
     sockets = (int *) newbuf;

     sockets[i] = kernel_get_socket();
     sockets[i+1] = -1;

     i++;                    /* Next interface */
#endif

     for (ip = 0, d = 0; d < ifconf.ifc_len; d += IFNAMSIZ + 
#if defined(__NetBSD__) || defined(__OpenBSD__) || defined(_AIX)
	       buf[IFNAMSIZ + d] 
#else 
	       sizeof(struct sockaddr) 
#endif 
	       , i++, ip++) {
	  sin2 = (struct sockaddr_in *) &buf[IFNAMSIZ + d]; 
 
	  if (sin2->sin_family != AF_INET) { 
	       i--; ip--;
	       continue; 
	  } 
 
	  newbuf =  realloc(addresses, (i + 2) * sizeof(char *)); 
	  if (newbuf == NULL) {
	       if (addresses != NULL)
		    free (addresses);
	       crit_error(1, "realloc() in init_server()"); 
	  }
	  addresses = (char **) newbuf;
	     
	  addresses[i] = strdup(inet_ntoa(sin2->sin_addr)); 
	  if (addresses[i] == (char *) NULL) 
	       crit_error(1, "strdup() in init_server()"); 
	  addresses[i + 1] = (char *) NULL; 

	  newbuf = realloc(sockets, (i + 2)* sizeof(int));
	  if (newbuf == NULL) {
	       if (sockets != NULL)
		    free (sockets);
	       crit_error(1, "realloc() in init_server()");
	  }
	  sockets = (int *) newbuf;

	  sockets[i+1] = -1;

	  if ((sock = socket(PF_INET, SOCK_DGRAM, proto->p_proto)) < 0)
	       crit_error(1, "socket() in init_server()"); 
	  setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, (void *)&on, 
		     sizeof(on)); 
#ifdef IPSEC
	  kernel_set_socket_policy(sock);
#endif	  
	  sockets[i] = sock;

#ifdef DEBUG 
	  printf("Local interface %s, address %s.\n", buf + d, 
		 addresses[i]); 
#endif 

	  bzero((void *)&sin, sizeof(sin));
	  sin.sin_port = htons(global_port);
	  sin.sin_addr.s_addr = inet_addr(addresses[i]);
	  sin.sin_family = AF_INET; 
     
	  if (bind(sockets[i], (struct sockaddr *)&sin, sizeof(struct sockaddr)) < 0)
	       crit_error(1, "bind() in init_server()"); 
  
     } 

     num_ifs = i;
 
#ifdef DEBUG 
     printf("%d local interfaces supporting IP found.\n", ip); 
#endif 

     return 1;
}

int 
server(void)
{
     struct sockaddr_in sin; 
     struct timeval timeout; 
     int i, d, size;

     setvbuf(stdout, (char *)NULL, _IOLBF, 0);

     size = howmany(sockets[num_ifs-1], NFDBITS) * sizeof(fd_mask);
     normfds = (fd_set *)malloc(size);
     if (normfds == NULL)
	  crit_error(1, "malloc(%d) for fd_set", size);

     readfds = (fd_set *)malloc(size);
     if (readfds == NULL)
	  crit_error(1, "malloc(%d) for fd_set", size);

     memset((void *)normfds, 0, size); 

     for (i=0; i<num_ifs; i++)
	  FD_SET(sockets[i], normfds);

     while (1) {
	  bcopy(normfds, readfds, size);

	  /* Timeout till next job */
	  timeout.tv_usec = 0;
	  timeout.tv_sec = schedule_next();

#ifdef DEBUG2
	  printf("Sleeping for %ld seconds\n", timeout.tv_sec);
#endif

	  if (select(sockets[num_ifs-1]+1, 
		     readfds, (fd_set *) NULL, (fd_set *) NULL, 
		     (timeout.tv_sec == -1 ? NULL : &timeout)) < 0) 
	       if (errno == EINTR) 
                    continue; 
	       else
                    crit_error(1, "select() in server()"); 

	  for (i=0; i<num_ifs; i++) {
	       if (FD_ISSET(sockets[i], readfds)) {
#ifdef IPSEC
		    if (i == 1)       /* PF_ENCAP NOTIFIES */
			 kernel_handle_notify(sockets[i]);
		    else
#endif
			 if (addresses[i] == NULL)
			 process_api(sockets[i], global_socket); 
			 else if (strcmp("127.0.0.1", inet_ntoa(sin.sin_addr))) {
			 d = sizeof(struct sockaddr_in);
			 if (recvfrom(sockets[i], 
#ifdef BROKEN_RECVFROM
				      (char *) buffer, 1,
#else
				      (char *) NULL, 0, 
#endif
				      MSG_PEEK, 
				      (struct sockaddr *) &sin, &d) == -1) {
			      log_error(1, "recvfrom() in server()"); 
			      return -1;
			 }
			 handle_packet(sockets[i], addresses[i]);
 		    } else {
			 /* XXX - flush it. APUE */
			 d = sizeof(struct sockaddr_in);
			 recvfrom(sockets[i], (char *)buffer, BUFFER_SIZE, 0,
				  (struct sockaddr *) &sin, &d);
		    }
	       } 
	  }

	  schedule_process(global_socket);
	  fflush(stdout);
	  fflush(stderr);
     }

     /* We will never reach this place - it's called limbo */

}
@


1.7
log
@fix realloc
@
text
@d38 1
a38 1
static char rcsid[] = "$Id: server.c,v 1.6 1998/06/30 16:58:40 provos Exp $";
@


1.6
log
@- support HMAC flag which if present in the attribute list toggles to
HMAC authentication transforms and otherwise to simple keyed authentication.
Note, HMAC is necessary if new esp is to use integrity checking, i.e.
authentication of the payload.
- Also fix bug, where SPIs were reserved for more than one protocol when
only one protocol, e.g. ESP or AH, could be agreed upon.
- Also make kernel.c a bit less complex, I hope.
- return notifies to kernel on failure only when kernel started the keying.
@
text
@d38 1
a38 1
static char rcsid[] = "$Id: server.c,v 1.5 1998/05/18 21:25:36 provos Exp $";
d82 1
d158 4
a161 3
     addresses = (char **) realloc(addresses, 
				   (i + 2) * sizeof(char *)); 
     if (addresses == (char **) NULL) 
d163 2
d168 4
a171 2
     sockets = (int *) realloc(sockets, (i + 2)* sizeof(int));
     if (sockets == (int *) NULL)
d173 3
d196 4
a199 3
	  addresses = (char **) realloc(addresses, 
					(i + 2) * sizeof(char *)); 
	  if (addresses == (char **) NULL) 
d201 2
d209 4
a212 2
	  sockets = (int *) realloc(sockets, (i + 2)* sizeof(int));
	  if (sockets == (int *) NULL)
d214 3
@


1.5
log
@support kernel notifies for setsockopt/getsockopt interface and fix various
small bugs.
@
text
@d38 1
a38 1
static char rcsid[] = "$Id: server.c,v 1.4 1998/03/16 20:49:53 provos Exp $";
d70 1
d279 1
d282 3
a284 1
		    else if (addresses[i] == NULL)
d286 1
a286 1
		    else if (strcmp("127.0.0.1", inet_ntoa(sin.sin_addr))) {
@


1.4
log
@set socket options, so that photuris bypasses kernel ipsec policy,
not yet supported by the kernel actually.
@
text
@d2 1
a2 1
 * Copyright 1997 Niels Provos <provos@@physnet.uni-hamburg.de>
d38 1
a38 1
static char rcsid[] = "$Id: server.c,v 1.3 1998/03/04 11:43:52 provos Exp $";
d83 2
d106 3
d146 3
d150 1
d239 1
a239 2
     fd_set readfds, normfds;
     int i, d;
d243 10
a252 1
     FD_ZERO(&normfds); 
d255 1
a255 1
	  FD_SET(sockets[i], &normfds);
d258 1
a258 1
	  bcopy(&normfds, &readfds, sizeof(normfds));
d269 1
a269 1
		     &readfds, (fd_set *) NULL, (fd_set *) NULL, 
d277 4
a280 3
	       if (FD_ISSET(sockets[i], &readfds)) {
		    /* XXX - As long as we have no PF_KEY */
		    if (addresses[i] == NULL)
@


1.3
log
@compliance with draft-simpson-photuris-18.txt, better packet structure
checking, better support for new esp and ah, documentation ...
@
text
@d38 1
a38 1
static char rcsid[] = "$Id: server.c,v 1.2 1997/07/22 11:18:25 provos Exp $";
d196 3
@


1.2
log
@make startkey grok more, make users grok more + tiny protocol fixes.
@
text
@d38 1
a38 1
static char rcsid[] = "$Id: server.c,v 1.1.1.1 1997/07/18 22:48:50 provos Exp $";
d83 1
d85 1
a85 1
     struct servent *ser;
d87 2
a88 2
     if ((ser = getservbyname("photuris", "udp")) == (struct servent *) NULL)
          crit_error(1, "getservbyname() in init_server()");
d90 1
a90 1
     global_port = ser->s_port;
d92 1
a92 1
     global_port = PHOTURIS_PORT;
d94 1
a94 1

@


1.1
log
@Initial revision
@
text
@d38 1
a38 1
static char rcsid[] = "$Id: server.c,v 1.2 1997/06/12 17:09:20 provos Exp provos $";
d243 1
a243 1
#ifdef DEBUG
@


1.1.1.1
log
@initial import of the photuris keymanagement daemon
@
text
@@

