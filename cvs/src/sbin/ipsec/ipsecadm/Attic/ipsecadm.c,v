head	1.21;
access;
symbols
	OPENBSD_2_4:1.20.0.2
	OPENBSD_2_4_BASE:1.20
	OPENBSD_2_3:1.14.0.2
	OPENBSD_2_3_BASE:1.14
	OPENBSD_2_2:1.10.0.2
	OPENBSD_2_2_BASE:1.10
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3;
locks; strict;
comment	@ * @;


1.21
date	98.11.14.23.37.01;	author deraadt;	state dead;
branches;
next	1.20;

1.20
date	98.08.01.06.19.27;	author angelos;	state Exp;
branches;
next	1.19;

1.19
date	98.08.01.06.17.15;	author angelos;	state Exp;
branches;
next	1.18;

1.18
date	98.08.01.06.12.20;	author angelos;	state Exp;
branches;
next	1.17;

1.17
date	98.07.29.21.02.54;	author angelos;	state Exp;
branches;
next	1.16;

1.16
date	98.06.08.17.42.33;	author provos;	state Exp;
branches;
next	1.15;

1.15
date	98.05.24.13.29.01;	author provos;	state Exp;
branches;
next	1.14;

1.14
date	98.04.04.22.48.28;	author provos;	state Exp;
branches;
next	1.13;

1.13
date	97.11.24.19.15.58;	author provos;	state Exp;
branches;
next	1.12;

1.12
date	97.11.18.00.13.44;	author provos;	state Exp;
branches;
next	1.11;

1.11
date	97.11.04.09.13.41;	author provos;	state Exp;
branches;
next	1.10;

1.10
date	97.09.24.18.45.26;	author angelos;	state Exp;
branches;
next	1.9;

1.9
date	97.09.24.18.39.43;	author angelos;	state Exp;
branches;
next	1.8;

1.8
date	97.09.23.21.40.59;	author angelos;	state Exp;
branches;
next	1.7;

1.7
date	97.08.26.17.19.06;	author provos;	state Exp;
branches;
next	1.6;

1.6
date	97.08.26.12.04.35;	author provos;	state Exp;
branches;
next	1.5;

1.5
date	97.07.01.22.18.01;	author provos;	state Exp;
branches;
next	1.4;

1.4
date	97.06.20.06.14.38;	author provos;	state Exp;
branches;
next	1.3;

1.3
date	97.05.15.19.32.22;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	97.04.14.10.04.27;	author provos;	state Exp;
branches;
next	1.1;

1.1
date	97.03.01.15.08.24;	author provos;	state Exp;
branches;
next	;


desc
@@


1.21
log
@move ipsec tools into .
@
text
@/* $OpenBSD: ipsecadm.c,v 1.20 1998/08/01 06:19:27 angelos Exp $ */
/*
 * The authors of this code are John Ioannidis (ji@@tla.org),
 * Angelos D. Keromytis (kermit@@csd.uch.gr) and 
 * Niels Provos (provos@@physnet.uni-hamburg.de).
 *
 * This code was written by John Ioannidis for BSD/OS in Athens, Greece, 
 * in November 1995.
 *
 * Ported to OpenBSD and NetBSD, with additional transforms, in December 1996,
 * by Angelos D. Keromytis.
 *
 * Additional transforms and features in 1997 and 1998 by Angelos D. Keromytis
 * and Niels Provos.
 *
 * Copyright (C) 1995, 1996, 1997, 1998 by John Ioannidis, Angelos D. Keromytis
 * and Niels Provos.
 *	
 * Permission to use, copy, and modify this software without fee
 * is hereby granted, provided that this entire notice is included in
 * all copies of any software which is or includes a copy or
 * modification of this software. 
 * You may use this code under the GNU public license if you so wish. Please
 * contribute changes back to the authors under this freer than GPL license
 * so that we may further the use of strong encryption without limitations to
 * all.
 *
 * THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTY. IN PARTICULAR, NONE OF THE AUTHORS MAKES ANY
 * REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE
 * MERCHANTABILITY OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR
 * PURPOSE.
 */

#include <sys/param.h>
#include <sys/file.h>
#include <sys/socket.h>
#include <sys/ioctl.h>
#include <sys/mbuf.h>
#include <sys/sysctl.h>

#include <net/if.h>
#include <net/route.h>
#include <net/if_dl.h>
#include <netinet/in.h>
#include <netns/ns.h>
#include <netiso/iso.h>
#include <netccitt/x25.h>
#include <arpa/inet.h>
#include <netdb.h>

#include <errno.h>
#include <unistd.h>
#include <stdio.h>
#include <ctype.h>
#include <stdlib.h>
#include <string.h>
#include <paths.h>
#include "net/encap.h"
#include "netinet/ip_ipsp.h"
#include "netinet/ip_esp.h"

#define ESP_OLD		0x01
#define ESP_NEW		0x02
#define AH_OLD		0x04
#define AH_NEW		0x08

#define XF_ENC		0x10
#define XF_AUTH		0x20
#define DEL_SPI		0x30
#define GRP_SPI		0x40
#define FLOW		0x50
#define ENC_IP		0x80

#define CMD_MASK	0xf0

#define isencauth(x) ((x)&~CMD_MASK)
#define iscmd(x,y)   (((x) & CMD_MASK) == (y))

typedef struct {
	char *name;
	int   id, flags;
}       transform;

int xf_esp_new __P((struct in_addr, struct in_addr, u_int32_t, int, int, 
    u_char *, u_char *, u_char *, struct in_addr, struct in_addr, int));
int xf_esp_old __P((struct in_addr, struct in_addr, u_int32_t, int, u_char *,
    u_char *, struct in_addr, struct in_addr)); 
int xf_ah_new __P((struct in_addr, struct in_addr, u_int32_t, int, u_char *,
    struct in_addr, struct in_addr));
int xf_ah_old __P((struct in_addr, struct in_addr, u_int32_t, int, u_char *,
    struct in_addr, struct in_addr));

int xf_delspi __P((struct in_addr, u_int32_t, int, int));
int xf_grp __P((struct in_addr, u_int32_t, int, struct in_addr, u_int32_t, int));
int xf_flow __P((struct in_addr, u_int32_t, int, struct in_addr, 
    struct in_addr, struct in_addr, struct in_addr, int, int, int, int, int));
int xf_ip4 __P((struct in_addr, struct in_addr, u_int32_t, 
    struct in_addr, struct in_addr));

transform xf[] = {
	{"des", ALG_ENC_DES,   XF_ENC |ESP_OLD|ESP_NEW},
	{"3des", ALG_ENC_3DES, XF_ENC |ESP_OLD|ESP_NEW},
	{"blf", ALG_ENC_BLF,   XF_ENC |        ESP_NEW},
	{"cast", ALG_ENC_CAST, XF_ENC |        ESP_NEW},
	{"md5", ALG_AUTH_MD5,  XF_AUTH|AH_OLD|AH_NEW|ESP_NEW},
	{"sha1", ALG_AUTH_SHA1,XF_AUTH|AH_OLD|AH_NEW|ESP_NEW},
	{"rmd160", ALG_AUTH_RMD160, XF_AUTH|AH_NEW|ESP_NEW},
};

char    buf[1024];

int
x2i(char *s)
{
	char    ss[3];
	ss[0] = s[0];
	ss[1] = s[1];
	ss[2] = 0;

	return strtoul(ss, NULL, 16);
}

int
isvalid(char *option, int type, int mode)
{
     int i;

     for (i = sizeof(xf) / sizeof(transform) - 1; i >= 0; i--)
	  if (!strcmp(option, xf[i].name)) {
	       if ((xf[i].flags & CMD_MASK) == type && 
		   (xf[i].flags & mode))
		    return xf[i].id;
	       else
		    return 0;
	  }
     return 0;
}

void
usage()
{
     fprintf( stderr, "usage: ipsecadm [command] <modifier...>\n"
	      "\tCommands: new esp, old esp, new ah, old ah, group, delspi, ip4, flow\n"
	      "\tPossible modifiers:\n"
	      "\t\t-enc <alg>\t encryption algorithm\n"
	      "\t\t-auth <alg>\t authentication algorithm\n"
	      "\t\t-src <ip>\t source address to be used\n"
              "\t\t-tunnel <ip> <ip> tunneling addresses\n"
	      "\t\t-dst <ip>\t destination address to be used\n"
	      "\t\t-spi <val>\t SPI to be used\n"
	      "\t\t-key <val>\t key material to be used\n"
	      "\t\t-authkey <val>\t key material for auth in new esp\n"
	      "\t\t-iv <val>\t iv to be used\n"
	      "\t\t-proto <val>\t security protocol\n"
	      "\t\t-chain\t\t SPI chain delete\n"
	      "\t\t-newpadding\t new style padding for new ESP\n"
	      "\t\t-transport <val>\t protocol number for flow\n"
	      "\t\t-addr <ip> <net> <ip> <net>\t subnets for flow\n"
	      "\t\t-delete\t\t delete specified flow\n"
	      "\t\t-local\t\t also create a local flow\n"
	      "\talso: dst2, spi2, proto2\n"
	  );
}

int
main(argc, argv)
	int     argc;
	char  **argv;
{
	int i;
	int mode = ESP_NEW, new = 1, flag = 0, newpadding = 0;
	int auth = 0, enc = 0, ivlen = 0, klen = 0, alen = 0;
	int proto = IPPROTO_ESP, proto2 = IPPROTO_AH;
	int dport = -1, sport = -1, tproto = -1;
	int delete = 0, local = 0, result;
	int chain = 0; 
	u_int32_t spi = 0, spi2 = 0;
	struct in_addr src, dst, dst2, osrc, odst, osmask, odmask;
	u_char *ivp = NULL, *keyp = NULL, *authp = NULL;
	struct protoent *tp;
	struct servent *svp;
	char *transportproto = NULL;

	osrc.s_addr = odst.s_addr = src.s_addr = dst.s_addr = dst2.s_addr = 0;
	osmask.s_addr = odmask.s_addr = 0;

	if (argc < 2) {
		usage();
		exit(1);
	}

	for (i=1; i < argc; i++) {
	     if (!strcmp(argv[i], "new") && !flag) {
		  flag = 1;
		  new = 1;
	     } else if (!strcmp(argv[i], "old") && !flag) {
		  flag = 1;
		  new = 0;
	     } else if (!strcmp(argv[i], "esp") && flag < 2) {
		  flag = 2;
		  mode = new ? ESP_NEW : ESP_OLD;
	     } else if (!strcmp(argv[i], "ah") && flag < 2) {
		  flag = 2;
		  mode = new ? AH_NEW : AH_OLD;
	     } else if (!strcmp(argv[i], "delspi") && flag < 2) {
		  flag = 2;
		  mode = DEL_SPI;
	     } else if (!strcmp(argv[i], "group") && flag < 2) {
		  flag = 2;
		  mode = GRP_SPI;
	     } else if (!strcmp(argv[i], "flow") && flag < 2) {
		  flag = 2;
		  mode = FLOW;
	     } else if (!strcmp(argv[i], "ip4") && flag < 2) {
		  flag = 2;
		  mode = ENC_IP;
	     } else if (argv[i][0] == '-') {
		  break;
	     } else {
		  fprintf(stderr, "%s: Unknown command: %s", argv[0], argv[i]);
		  exit(1);
	     }
	}

	for (; i < argc; i++) {
	     if (argv[i][0] != '-') {
		  fprintf(stderr, "%s: Expected option, got %s\n", 
			  argv[0], argv[i]);
		  exit(1);
	     } else if (!strcmp(argv[i]+1, "enc") && enc == 0 && i+1 < argc) {
		  if ((enc = isvalid(argv[i+1], XF_ENC, mode)) == 0) {
		       fprintf(stderr, "%s: Invalid encryption algorithm %s\n",
			       argv[0], argv[i+1]);
		       exit(1);
		  }
		  i++;
	     } else if (!strcmp(argv[i]+1, "auth") && auth == 0 && i+1 < argc) {
		  if ((auth = isvalid(argv[i+1], XF_AUTH, mode)) == 0) {
		       fprintf(stderr, "%s: Invalid auth algorithm %s\n",
			       argv[0], argv[i+1]);
		       exit(1);
		  }
		  i++;
	     } else if (!strcmp(argv[i]+1, "key") && keyp == NULL && i+1 < argc) {
		  keyp = argv[++i];
		  klen = strlen(keyp);
	     } else if (!strcmp(argv[i]+1, "authkey") && authp == NULL && i+1 < argc) {
		  if (!(mode & ESP_NEW)) {
		       fprintf(stderr, "%s: Invalid option %s for selected mode\n",
			       argv[0], argv[i]);
		       exit(1);
		  }
		  authp = argv[++i];
		  alen = strlen(authp);
	     } else if (!strcmp(argv[i]+1, "iv") && ivp == NULL && i+1 < argc) {
		  if (mode & (AH_OLD|AH_NEW)) {
		       fprintf(stderr, "%s: Invalid option %s with auth\n",
			       argv[0], argv[i]);
		       exit(1);
		  }
		  ivp = argv[++i];
		  ivlen = strlen(ivp);
	     } else if (!strcmp(argv[i]+1, "spi") && spi == 0 && i+1 < argc) {
		  if ((spi = htonl(strtoul(argv[i+1], NULL, 16))) == 0) {
		       fprintf(stderr, "%s: Invalid spi %s\n", 
			       argv[0], argv[i+1]);
		       exit(1);
		  }
		  i++;
	     } else if (!strcmp(argv[i]+1, "spi2") && spi2 == 0 && 
			iscmd(mode, GRP_SPI) && i+1 < argc) {
		  if ((spi2 = htonl(strtoul(argv[i+1], NULL, 16))) == 0) {
		       fprintf(stderr, "%s: Invalid spi2 %s\n", 
			       argv[0], argv[i+1]);
		       exit(1);
		  }
		  i++;
	     } else if (!strcmp(argv[i]+1, "src") && i+1 < argc) {
		  src.s_addr = inet_addr(argv[i+1]);
		  i++;
	     } else if (!strcmp(argv[i]+1, "newpadding") && (mode & ESP_NEW)) {
		  newpadding = 1;
	     } else if (!strcmp(argv[i]+1, "delete") && iscmd(mode, FLOW)) {
		  delete = 1;
	     } else if (!strcmp(argv[i]+1, "local") && iscmd(mode, FLOW)) {
		  local = 1;
	     } else if (!strcmp(argv[i]+1, "tunnel") &&
			(isencauth(mode) || mode == ENC_IP) && i+2 < argc) {
		  osrc.s_addr = inet_addr(argv[i+1]);
		  i++;
		  odst.s_addr = inet_addr(argv[i+1]);
		  i++;
	     } else if (!strcmp(argv[i]+1, "addr") &&
			iscmd(mode, FLOW) && i+4 < argc) {
		  osrc.s_addr = inet_addr(argv[i+1]); i++;
		  osmask.s_addr = inet_addr(argv[i+1]); i++;
		  odst.s_addr = inet_addr(argv[i+1]); i++;
		  odmask.s_addr = inet_addr(argv[i+1]); i++;
	     } else if (!strcmp(argv[i]+1, "transport") && 
			iscmd(mode, FLOW) && i+1 < argc) {
		  if (isalpha(argv[i+1][0])) {
			tp = getprotobyname(argv[i+1]);
			if (tp == NULL) {
				fprintf(stderr, "%s: unknown protocol %s\n", argv[0], argv[i+1]);
				exit(1);
			}
			tproto = tp->p_proto;
			transportproto = argv[i+1];
		  } else {
		  	tproto = atoi(argv[i+1]);
			tp = getprotobynumber(tproto);
			if (tp == NULL)
				transportproto = "UNKNOWN";
			else
				transportproto = tp->p_name; /* This is static, but it doesn't matter for this application */
		  }
		  i++;
	     } else if (!strcmp(argv[i]+1, "sport") && 
			iscmd(mode, FLOW) && i+1 < argc) {
		  if (isalpha(argv[i+1][0])) {
			svp = getservbyname(argv[i+1], transportproto);
			if (svp == NULL) {
				fprintf(stderr, "%s: unknown service port %s for protocol %s\n", argv[0], argv[i+1], transportproto);
				exit(1);
			}
			sport = svp->s_port;
		  } else
		  	sport = atoi(argv[i+1]);
		  i++;
	     } else if (!strcmp(argv[i]+1, "dport") && 
			iscmd(mode, FLOW) && i+1 < argc) {
		  if (isalpha(argv[i+1][0])) {
			svp = getservbyname(argv[i+1], transportproto);
			if (svp == NULL) {
				fprintf(stderr, "%s: unknown service port %s for protocol %s\n", argv[0], argv[i+1], transportproto);
				exit(1);
			}
			dport = svp->s_port;
		  } else
		  	dport = atoi(argv[i+1]);
		  i++;
	     } else if (!strcmp(argv[i]+1, "dst") && i+1 < argc) {
		  dst.s_addr = inet_addr(argv[i+1]);
		  i++;
	     } else if (!strcmp(argv[i]+1, "dst2") && 
			iscmd(mode, GRP_SPI) && i+1 < argc) {
		  dst2.s_addr = inet_addr(argv[i+1]);
		  i++;
	     } else if (!strcmp(argv[i]+1, "proto") && i+1 < argc) {
		  if (isalpha(argv[i+1][0])) {
			if (!strcasecmp(argv[i+1], "esp"))
			 	proto = IPPROTO_ESP;
			else if (!strcasecmp(argv[i+1], "ah"))
				proto = IPPROTO_AH;
			else if (!strcasecmp(argv[i+1], "ip4"))
				proto = IPPROTO_IPIP;
			else {
				fprintf(stderr, "%s: unknown security protocol type %s\n", argv[0], argv[i+1]);
				exit(1);
			}
		  } else {
		  	proto = atoi(argv[i+1]);
			if (proto != IPPROTO_ESP && proto != IPPROTO_AH &&
			    proto != IPPROTO_IPIP) {
				fprintf(stderr, "%s: unknown security protocol %d\n", argv[0], proto);
				exit(1);
			}
		  }
		  i++;
	     } else if (!strcmp(argv[i]+1, "proto2") && 
			iscmd(mode, GRP_SPI) && i+1 < argc) {
		  if (isalpha(argv[i+1][0])) {
			if (!strcasecmp(argv[i+1], "esp"))
			 	proto2 = IPPROTO_ESP;
			else if (!strcasecmp(argv[i+1], "ah"))
				proto2 = IPPROTO_AH;
			else if (!strcasecmp(argv[i+1], "ip4"))
				proto2 = IPPROTO_IPIP;
			else {
				fprintf(stderr, "%s: unknown security protocol2 type %s\n", argv[0], argv[i+1]);
				exit(1);
			}
		  } else
		  	proto2 = atoi(argv[i+1]);
			if (proto2 != IPPROTO_ESP && proto2 != IPPROTO_AH &&
			    proto2 != IPPROTO_IPIP) {
				fprintf(stderr, "%s: unknown security protocol %d\n", argv[0], proto);
				exit(1);
			}
		  i++;
	     } else if (!strcmp(argv[i]+1, "chain") && chain == 0 &&
			iscmd(mode, DEL_SPI)) {
		  chain = 1;
	     } else {
		  fprintf(stderr, "%s: Unkown option: %s\n", argv[0], argv[i]);
		  exit(1);
	     }
	}


	/* Sanity checks */
	if ((mode & (ESP_NEW|ESP_OLD)) && enc == 0) {
	     fprintf(stderr, "%s: No encryption algorithm specified\n", 
		     argv[0]);
	     exit(1);
	} else if ((mode & (AH_NEW|AH_OLD)) && auth == 0) {
	     fprintf(stderr, "%s: No authenication algorithm specified\n", 
		     argv[0]);
	     exit(1);
	} else if (isencauth(mode) && keyp == NULL) {
	     fprintf(stderr, "%s: No key material specified\n", argv[0]);
	     exit(1);
	} else if ((mode & ESP_NEW) && auth && authp == NULL) {
	     fprintf(stderr, "%s: No auth key material specified\n", argv[0]);
	     exit(1);
	} else if (spi == 0) {
	     fprintf(stderr, "%s: No SPI specified\n", argv[0]);
	     exit(1);
	} else if (iscmd(mode, GRP_SPI) && spi2 == 0) {
	     fprintf(stderr, "%s: No SPI2 specified\n", argv[0]);
	     exit(1);
	} else if ((isencauth(mode) || iscmd(mode, ENC_IP)) && 
		    src.s_addr == 0) {
	     fprintf(stderr, "%s: No source address specified\n", argv[0]);
	     exit(1);
	} else if ((iscmd(mode, DEL_SPI) || iscmd(mode, GRP_SPI) || 
		   iscmd(mode, FLOW)) && 
		   proto != IPPROTO_ESP && proto != IPPROTO_AH &&
		   proto != IPPROTO_IPIP) {
	     fprintf(stderr, "%s: Security protocol is none of AH, ESP or IPIP\n", argv[0]);
	     exit(1);
	} else if (iscmd(mode, GRP_SPI) && 
		   proto2 != IPPROTO_ESP && proto2 != IPPROTO_AH &&
		   proto2 != IPPROTO_IPIP) {
	     fprintf(stderr, "%s: Security protocol2 is none of AH, ESP or IPIP\n", argv[0]);
	     exit(1);
	} else if (dst.s_addr == 0) {
	     fprintf(stderr, "%s: No destination address specified\n", 
		     argv[0]);
	     exit(1);
	} else if (iscmd(mode, ENC_IP) && 
		   (odst.s_addr == 0 || osrc.s_addr == 0)) {
	     fprintf(stderr, "%s: No tunnel addresses specified\n", 
		     argv[0]);
	     exit(1);
	} else if (iscmd(mode, FLOW) && 
		   (odst.s_addr == 0 && odmask.s_addr == 0 && 
		    osrc.s_addr == 0 && osmask.s_addr == 0)) {
	     fprintf(stderr, "%s: No subnets for flow specified\n", 
		     argv[0]);
	     exit(1);
	} else if (iscmd(mode, GRP_SPI) && dst2.s_addr == 0) {
	     fprintf(stderr, "%s: No destination address2 specified\n", 
		     argv[0]);
	     exit(1);
	}

	if (isencauth(mode)) {
	     switch(mode) {
	     case ESP_NEW:
		  result = xf_esp_new(src, dst, spi, enc, auth, ivp, keyp,
				     authp, osrc, odst, newpadding);
		  break;
	     case ESP_OLD:
		  result = xf_esp_old(src, dst, spi, enc, ivp, keyp, osrc, odst);
		  break;
	     case AH_NEW:
		  result = xf_ah_new(src, dst, spi, auth, keyp, osrc, odst);
		  break;
	     case AH_OLD:
		  result = xf_ah_old(src, dst, spi, auth, keyp, osrc, odst);
		  break;
	     }
	} else {
	     switch(mode & CMD_MASK) {
	     case GRP_SPI:
		  result = xf_grp(dst, spi, proto, dst2, spi2, proto2);
		  break;
	     case DEL_SPI:
		  result = xf_delspi(dst, spi, proto, chain);
		  break;
	     case ENC_IP:
		  result = xf_ip4(src, dst, spi, osrc, odst);
		  break;
	     case FLOW:
		  result = xf_flow(dst, spi, proto, osrc, osmask, odst, odmask,
				  tproto, sport, dport, delete, local);
		  break;
	     }
	}

	exit (result ? 0 : 1);
}
@


1.20
log
@Sanity check numerical values for -proto/-proto2 flags (4, 50, and 51
accepted only).
@
text
@d1 1
a1 1
/* $OpenBSD: ipsecadm.c,v 1.19 1998/08/01 06:17:15 angelos Exp $ */
@


1.19
log
@Forgot this already-documented addition: -proto/-proto2 can also take
"esp", "ah", and "ip4" as arguments (in addition to protocol numbers).
@
text
@d1 1
a1 1
/* $OpenBSD: ipsecadm.c,v 1.18 1998/08/01 06:12:20 angelos Exp $ */
d362 1
a362 1
		  } else
d364 6
d386 5
@


1.18
log
@Add symbolic names for the -transport and -sport/-dport flags (from
/etc/protocols and /etc/services respectively). Document changes,
document option "ip4".
@
text
@d1 1
a1 1
/* $OpenBSD: ipsecadm.c,v 1.17 1998/07/29 21:02:54 angelos Exp $ */
d351 13
a363 1
		  proto = atoi(argv[i+1]);
d367 13
a379 1
		  proto2 = atoi(argv[i+1]);
@


1.17
log
@Do IP-in-IP encapsulation properly.
@
text
@d1 1
a1 1
/* $OpenBSD: ipsecadm.c,v 1.16 1998/06/08 17:42:33 provos Exp $ */
d181 3
d302 16
a317 1
		  tproto = atoi(argv[i+1]);
d321 9
a329 1
		  sport = atoi(argv[i+1]);
d333 9
a341 1
		  dport = atoi(argv[i+1]);
@


1.16
log
@exit correctly
@
text
@d1 1
a1 1
/* $OpenBSD: ipsecadm.c,v 1.15 1998/05/24 13:29:01 provos Exp $ */
d286 1
a286 1
			isencauth(mode) && i+2 < argc) {
d360 3
a362 2
		   proto != IPPROTO_ESP && proto != IPPROTO_AH) {
	     fprintf(stderr, "%s: Security protocol is neither AH or ESP\n", argv[0]);
d365 3
a367 2
		   proto2 != IPPROTO_ESP && proto2 != IPPROTO_AH) {
	     fprintf(stderr, "%s: Security protocol2 is neither AH or ESP\n", argv[0]);
@


1.15
log
@incorporate functionality of rt and rtdelete commands into ipsecadm,
some improvements to manpage, stricter option checking, -Wall.
@
text
@d1 1
a1 1
/* $OpenBSD: ipsecadm.c,v 1.14 1998/04/04 22:48:28 provos Exp $ */
d176 1
a176 1
	int delete = 0, local = 0;
d377 2
a378 2
		   (((odst.s_addr & odmask.s_addr) == 0) || 
		    ((osrc.s_addr & osmask.s_addr) == 0))) {
d391 2
a392 2
		  xf_esp_new(src, dst, spi, enc, auth, ivp, keyp, authp, 
			     osrc, odst, newpadding);
d395 1
a395 1
		  xf_esp_old(src, dst, spi, enc, ivp, keyp, osrc, odst);
d398 1
a398 1
		  xf_ah_new(src, dst, spi, auth, keyp, osrc, odst);
d401 1
a401 1
		  xf_ah_old(src, dst, spi, auth, keyp, osrc, odst);
d407 1
a407 1
		  xf_grp(dst, spi, proto, dst2, spi2, proto2);
d410 1
a410 1
		  xf_delspi(dst, spi, proto, chain);
d413 1
a413 1
		  xf_ip4(src, dst, spi, osrc, odst);
d416 2
a417 2
		  xf_flow(dst, spi, proto, osrc, osmask, odst, odmask, tproto,
			  sport, dport, delete, local);
d422 1
a422 1
	return 1;
@


1.14
log
@use the right key material for authentication, bug report by
Richard Guy Briggs <rgb@@conscoop.ottawa.on.ca>
@
text
@d1 1
a1 1
/* $OpenBSD: ipsecadm.c,v 1.13 1997/11/24 19:15:58 provos Exp $ */
d3 3
a5 2
 * The author of this code is John Ioannidis, ji@@tla.org,
 * 	(except when noted otherwise).
d7 2
a8 1
 * This code was written for BSD/OS in Athens, Greece, in November 1995.
d11 1
a11 2
 * by Angelos D. Keromytis, kermit@@forthnet.gr.  Additional code written by
 * Niels Provos in Germany.
d13 2
a14 2
 * Copyright (C) 1995, 1996, 1997 by John Ioannidis, Angelos D. Keromytis
 * and Niels Provos
d16 3
d22 5
a26 1
 * modification of this software.
d29 1
a29 1
 * IMPLIED WARRANTY. IN PARTICULAR, NEITHER AUTHOR MAKES ANY
d63 11
a73 10
#define ESP_OLD   0x01
#define ESP_NEW   0x02
#define AH_OLD    0x04
#define AH_NEW    0x08

#define XF_ENC    0x10
#define XF_AUTH   0x20
#define DEL_SPI   0x30
#define GRP_SPI   0x40
#define ENC_IP    0x80
d75 1
a75 1
#define CMD_MASK  0xf0
d86 1
a86 2
		    u_char *, u_char *, u_char *, struct in_addr, 
		    struct in_addr, int));
d88 1
a88 1
		    u_char *, struct in_addr, struct in_addr)); 
d90 1
a90 1
		   struct in_addr, struct in_addr));
d92 1
a92 1
		   struct in_addr, struct in_addr));
d96 2
d99 1
a99 1
		struct in_addr, struct in_addr));
d130 1
a130 1
	  if (!strcmp(option, xf[i].name))
d136 1
d144 1
a144 1
	      "\tCommands: new esp, old esp, new ah, old ah, group, delspi, ip4\n"
d158 4
d175 2
d179 1
a179 1
	struct in_addr src, dst, dst2, osrc, odst;
d183 1
d209 3
d279 1
a279 1
	     } else if (!strcmp(argv[i]+1, "newpadding")) {
d281 6
a286 1
	     } else if (!strcmp(argv[i]+1, "tunnel") && i+2 < argc) {
d291 18
d345 1
a345 1
	} else if ((mode & ESP_NEW) && auth & authp == NULL) {
d358 8
a365 6
	} else if ((iscmd(mode, DEL_SPI) || iscmd(mode, GRP_SPI)) 
		   && proto == 0) {
	     fprintf(stderr, "%s: No security protocol specified\n", argv[0]);
	     exit(1);
	} else if (iscmd(mode, GRP_SPI) && proto2 == 0) {
	     fprintf(stderr, "%s: No security protocol2 specified\n", argv[0]);
d376 6
a387 1

d414 4
@


1.13
log
@add support for ripemd-160, mention it in man page.
@
text
@d1 1
a1 1
/* $OpenBSD: ipsecadm.c,v 1.12 1997/11/18 00:13:44 provos Exp $ */
d231 1
a231 1
		  alen = strlen(keyp);
@


1.12
log
@make old style padding default again, use -netpadding for new style
padding. allow ip4 encapsulation/tunnels with no encryption/authentication.
@
text
@d1 1
a1 1
/* $OpenBSD: ipsecadm.c,v 1.11 1997/11/04 09:13:41 provos Exp $ */
d98 1
@


1.11
log
@support for blowfish and cast. add -authkey to seperate key material
for encryption and authentication which is needed for variable key length
ciphers.
@
text
@d1 1
a1 1
/* $OpenBSD: ipsecadm.c,v 1.10 1997/09/24 18:45:26 angelos Exp $ */
d64 1
d88 2
d132 1
a132 1
	      "\tCommands: new esp, old esp, new ah, old ah, group, delspi\n"
d145 1
a145 1
	      "\t\t-oldpadding\t old style padding for new ESP\n"
d156 1
a156 1
	int mode = ESP_NEW, new = 1, flag = 0, oldpadding = 0;
d190 3
d257 2
a258 2
	     } else if (!strcmp(argv[i]+1, "oldpadding")) {
		  oldpadding = 1;
d309 2
a310 1
	} else if (isencauth(mode) && src.s_addr == 0) {
d324 5
d340 1
a340 1
			     osrc, odst, oldpadding);
d359 3
@


1.10
log
@Duh!
@
text
@d1 1
a1 1
/* $OpenBSD: ipsecadm.c,v 1.9 1997/09/24 18:39:43 angelos Exp $ */
d76 2
a77 1
		    u_char *, u_char *, struct in_addr, struct in_addr, int));
d91 2
d138 1
d142 1
a142 1
	      "\t\t-oldpadding\told style padding for new ESP\n"
d154 1
a154 1
	int auth = 0, enc = 0, ivlen = 0, klen = 0;
d159 1
a159 1
	u_char *ivp = NULL, *keyp = NULL;
d217 8
d294 3
d327 2
a328 2
		  xf_esp_new(src, dst, spi, enc, auth, ivp, keyp, osrc, odst,
			     oldpadding);
@


1.9
log
@Support for new style padding.
@
text
@d1 1
a1 1
/* $OpenBSD: ipsecadm.c,v 1.8 1997/09/23 21:40:59 angelos Exp $ */
a240 1
		  i++;
@


1.8
log
@Addition for tunnel mode. I'm in Canada, i can write crypto code!
@
text
@d1 1
a1 1
/* $OpenBSD: ipsecadm.c,v 1.7 1997/08/26 17:19:06 provos Exp $ */
d76 1
a76 1
		    u_char *, u_char *, struct in_addr, struct in_addr));
d138 1
d149 1
a149 1
	int mode = ESP_NEW, new = 1, flag = 0;
d239 3
d313 2
a314 1
		  xf_esp_new(src, dst, spi, enc, auth, ivp, keyp, osrc, odst);
@


1.7
log
@first try at documentation
@
text
@d1 1
a1 1
/* $OpenBSD: ipsecadm.c,v 1.6 1997/08/26 12:04:35 provos Exp $ */
d76 1
a76 1
		    u_char *, u_char *));
d78 5
a82 3
		    u_char *)); 
int xf_ah_new __P((struct in_addr, struct in_addr, u_int32_t, int, u_char *));
int xf_ah_old __P((struct in_addr, struct in_addr, u_int32_t, int, u_char *));
d131 1
d153 1
a153 1
	struct in_addr src, dst, dst2;
d156 1
a156 1
	src.s_addr = dst.s_addr = dst2.s_addr = 0;
d238 5
d309 1
a309 1
		  xf_esp_new(src, dst, spi, enc, auth, ivp, keyp);
d312 1
a312 1
		  xf_esp_old(src, dst, spi, enc, ivp, keyp);
d315 1
a315 1
		  xf_ah_new(src, dst, spi, auth, keyp);
d318 1
a318 1
		  xf_ah_old(src, dst, spi, auth, keyp);
@


1.6
log
@made hopefully more user friendly + support for new esp.
@
text
@d1 1
a1 1
/* $OpenBSD: ipsecadm.c,v 1.5 1997/07/01 22:18:01 provos Exp $ */
d123 14
a136 1
	fprintf( stderr, "usage: ipsecadm [new|old] [esp|ah] <options...>\n\n" );
@


1.5
log
@reflect changes in ipsec
@
text
@d1 1
a1 1
/* $OpenBSD: ipsecadm.c,v 1.4 1997/06/20 06:14:38 provos Exp $ */
d12 2
a13 1
 * Copyright (C) 1995, 1996, 1997 by John Ioannidis and Angelos D. Keromytis.
d55 15
d72 1
a72 1
	int    (*func) (int, char **);
d75 9
a83 10
int xf_espdes __P((int, char **));
int xf_esp3des __P((int, char **));
int xf_esp3desmd5 __P((int, char **));
int xf_espdesmd5 __P((int, char **));
int xf_ahmd5 __P((int, char **));
int xf_ahsha1 __P((int, char **));
int xf_ahhmacmd5 __P((int, char **));
int xf_ahhmacsha1 __P((int, char **));
int xf_grp __P((int, char **));
int xf_delspi __P((int, char **));
d86 4
a89 10
	{"des", xf_espdes},
	{"3des", xf_esp3des},
	{"3desmd5", xf_esp3desmd5},
	{"desmd5", xf_espdesmd5},
	{"md5", xf_ahmd5},
	{"sha1", xf_ahsha1},
	{"hmacmd5", xf_ahhmacmd5},
	{"hmacsha1", xf_ahhmacsha1},
	{"grp", xf_grp},
	{"delspi", xf_delspi}
d105 15
d123 1
a123 1
	fprintf( stderr, "usage: ipsecadm <operation> <args...>\n\n" );
d131 11
a141 1
	int     i;
a145 1
	/* Find the proper transform */
d147 165
a311 10
	for (i = sizeof(xf) / sizeof(transform) - 1; i >= 0; i--)
		if (!strcmp(xf[i].name, argv[1])) {
			(*(xf[i].func)) (argc - 1, argv + 1);
			return 1;

		}
	usage();
        for (i = sizeof(xf) / sizeof(transform) - 1; i >= 0; i--)
        	(*(xf[i].func)) (1, &(xf[i].name));
	return 0;	
@


1.4
log
@ah-sha1 + esp-3des
@
text
@d1 1
a1 1
/* $OpenBSD: ipsecadm.c,v 1.3 1997/05/15 19:32:22 deraadt Exp $ */
a66 1
int xf_ip4 __P((int, char **));
a68 1
int xf_pfr __P((int, char **));
a78 1
	{"ip4", xf_ip4},
d80 1
a80 2
	{"delspi", xf_delspi},
	{"pfr", xf_pfr}
@


1.3
log
@mention that addition code was written in Germany
@
text
@d1 1
a1 1
/* $OpenBSD: ipsecadm.c,v 1.2 1997/04/14 10:04:27 provos Exp $ */
d60 1
d64 1
d74 1
d78 1
@


1.2
log
@strtol to strtoul
@
text
@d1 1
a1 1
/* $OpenBSD: ipsecadm.c,v 1.1 1997/03/01 15:08:24 provos Exp $ */
d9 2
a10 1
 * by Angelos D. Keromytis, kermit@@forthnet.gr.
@


1.1
log
@Unified ipsec prgs in ipsecadm
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d92 1
a92 1
	return strtol(ss, NULL, 16);
@
