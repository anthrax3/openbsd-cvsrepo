head	1.10;
access;
symbols
	OPENBSD_3_7:1.9.0.2
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.6.0.6
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.5.0.6
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.4
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.2
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.4.0.12
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.10
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.8
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.6
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2005.03.30.05.20.18;	author henning;	state dead;
branches;
next	1.9;

1.9
date	2005.02.18.04.00.21;	author jaredy;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.26.16.35.21;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.02.20.06.16;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.16.21.27.37;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2000.09.24.01.02.23;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.06.24.04.05.37;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.06.24.03.15.22;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.06.23.14.32.21;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.43.47;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.43.47;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.10
log
@remove ccitt x.25 traces, ok theo
@
text
@/*	$OpenBSD: ccitt_addr.c,v 1.9 2005/02/18 04:00:21 jaredy Exp $	*/
/*	$NetBSD: ccitt_addr.c,v 1.8 1995/04/23 10:33:41 cgd Exp $	*/

/*
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)ccitt_addr.c	8.1 (Berkeley) 6/5/93
 */

/*
 * parse CCITT addresses
 *
 * Addresses must have the format: [hpr],x121address[,userdata][,protocol]
 * items enclosed with square brackets are optional
 * 'h' or 'p' means hi priority (packet size = 128; specific to Datapac
 * and necessary only for X.25(76) and non-negotiating X.25(80) DTE's)
 * 'r' means reverse charge (remote DTE pays for call).
 * The x121address consists of an optional netid and dot, followed
 * by a dte address.
 *
 * Frank Pronk
 * The University of British Columbia
 * Laboratory for Computational Vision
 * Copyright (c) 1984
 */

#include <sys/types.h>
#include <sys/socket.h>

#include <netccitt/x25.h>

#include <stdlib.h>
#include <string.h>

static char *copychar(char *, char *);

int
ccitt_addr(char *addr, struct sockaddr_x25 *xp)
{
	char *p, *ap, *limit;
	int havenet = 0;

	memset(xp, 0, sizeof(*xp));
	xp->x25_family = AF_CCITT;
	xp->x25_len = sizeof(*xp);
	p = addr;

	/*
	 * process optional priority and reverse charging flags
	 */

	if (*p == 'p' || *p == 'r' || *p == 'h') {
		while (*p == 'p' || *p == 'r' || *p == 'h') {
			if (*p == 'p' || *p == 'h')
				xp->x25_opts.op_psize = X25_PS128;
			else if (*p == 'r')
				xp->x25_opts.op_flags |= X25_REVERSE_CHARGE;
			p++;
		}
		if (*p != ',')
			return (0);
		p++;
	}
	if (*p == '\0')
		return (0);

	/*
	 * [network id:]X.121 address
	 */

	ap = xp->x25_addr;
	limit = ap + sizeof(xp->x25_addr) - 1;
	while (*p) {
		if (*p == ',')
			break;
		if (*p == '.' || *p == ':') {
			if (havenet)
				return (0);
			havenet++;
			xp->x25_net = atoi(xp->x25_addr);
			p++;
			ap = xp->x25_addr;
			*ap = '\0';
		}
		if (*p < '0' || *p > '9')
			return (0);
		if (ap >= limit)
			return (0);
		*ap++ = *p++;
	}
	if (*p == '\0')
		return (1);

	/*
	 * optional user data, bytes 4 to 16
	 */

	p++;
	ap = xp->x25_udata + 4;		/* first four bytes are protocol id */
	limit = ap + sizeof(xp->x25_udata) - 4;
	xp->x25_udlen = 4;
	while (*p) {
		if (*p == ',')
			break;
		if (ap >= limit)
			return (0);
		p = copychar(p, ap++);
		xp->x25_udlen++;
	}
	if (xp->x25_udlen == 4)
		xp->x25_udlen = 0;
	if (*p == '\0')
		return (1);

	p++;
	ap = xp->x25_udata;		/* protocol id */
	limit = ap + (xp->x25_udlen ? 4 : sizeof(xp->x25_udata));
	while (*p) {
		if (*p == ',')
			return (0);
		if (ap >= limit)
			return (0);
		p = copychar(p, ap++);
	}
	if (xp->x25_udlen == 0)
		xp->x25_udlen = ap - xp->x25_udata;
	return (1);
}

static char *
copychar(char *from, char *to)
{
	int n;

	if (*from != '\\' || from[1] < '0' || from[1] > '7') {
		*to = *from++;
		return (from);
	}
	n = *++from - '0';
	from++;
	if (*from >= '0' && *from <= '7') {
		int n1;

		n = n*8 + *from++ - '0';
		if (*from >= '0' && *from <= '7' && (n1 = n*8 + *from-'0') < 256) {
			n = n1;
			from++;
		}
	}
	*to = n;
	return (from);
}
@


1.9
log
@ansi, knf, and other style nits; ok henning
@
text
@d1 1
a1 1
/*	$OpenBSD: ccitt_addr.c,v 1.8 2003/06/26 16:35:21 deraadt Exp $	*/
@


1.8
log
@ansi and protos
@
text
@d1 1
a1 1
/*	$OpenBSD: ccitt_addr.c,v 1.7 2003/06/02 20:06:16 millert Exp $	*/
a51 2
#include <stdlib.h>
#include <string.h>
d54 1
d57 3
a61 2
int	ccitt_addr(char *addr, struct sockaddr_x25 *xp);

d63 1
a63 3
ccitt_addr(addr, xp)
char *addr;
struct sockaddr_x25 *xp;
d68 1
a68 1
	memset(xp, 0, sizeof (*xp));
d97 1
a97 1
	limit = ap + sizeof (xp->x25_addr) - 1;
d105 1
a105 1
			xp->x25_net = atoi (xp->x25_addr);
d125 1
a125 1
	limit = ap + sizeof (xp->x25_udata) - 4;
d132 1
a132 1
		p = copychar (p, ap++);
d148 1
a148 1
		p = copychar (p, ap++);
d156 1
a156 2
copychar (from, to)
char *from, *to;
@


1.7
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: ccitt_addr.c,v 1.6 2002/02/16 21:27:37 millert Exp $	*/
d60 2
d63 1
a63 1
ccitt_addr (addr, xp)
@


1.6
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: ccitt_addr.c,v 1.5 2000/09/24 01:02:23 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.5
log
@If the route add/delete fails exit w/ 1 instead of 0
Remove register decls and make return foo vs. return (foo) consistent.
@
text
@d1 1
a1 1
/*	$OpenBSD: ccitt_addr.c,v 1.4 1997/06/24 04:05:37 millert Exp $	*/
d62 1
a62 1
static char *copychar __P((char *, char *));
@


1.4
log
@Add real prototypes.
@
text
@d1 1
a1 1
/*	$OpenBSD: ccitt_addr.c,v 1.3 1997/06/24 03:15:22 millert Exp $	*/
d67 1
a67 1
register struct sockaddr_x25 *xp;
d69 1
a69 1
	register char *p, *ap, *limit;
d161 1
a161 1
register char *from, *to;
d163 1
a163 1
	register int n;
d172 1
a172 1
		register int n1;
@


1.3
log
@Fix "route show" on alpha.  Some parts from Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: ccitt_addr.c,v 1.2 1996/06/23 14:32:21 deraadt Exp $	*/
d62 1
a62 1
static char *copychar ();
@


1.2
log
@update rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: ccitt_addr.c,v 1.8 1995/04/23 10:33:41 cgd Exp $	*/
d56 2
d64 1
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
