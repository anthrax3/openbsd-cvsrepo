head	1.10;
access;
symbols
	OPENBSD_6_2:1.10.0.4
	OPENBSD_6_2_BASE:1.10;
locks; strict;
comment	@ * @;


1.10
date	2017.08.23.15.49.08;	author florian;	state Exp;
branches;
next	1.9;
commitid	A4wPJtZBBhVbmWR1;

1.9
date	2017.08.23.10.48.01;	author florian;	state Exp;
branches;
next	1.8;
commitid	JEJ3ePwebV4hmXKV;

1.8
date	2017.08.21.14.44.26;	author florian;	state Exp;
branches;
next	1.7;
commitid	EEtYaOkbkOR8jTr3;

1.7
date	2017.08.18.07.45.03;	author florian;	state Exp;
branches;
next	1.6;
commitid	2cAPufZI4E3LvarQ;

1.6
date	2017.07.30.07.41.08;	author florian;	state Exp;
branches;
next	1.5;
commitid	BH3jMQveVfHSNHCy;

1.5
date	2017.07.06.15.02.53;	author florian;	state Exp;
branches;
next	1.4;
commitid	4J2Yoz33lyhwu9Xf;

1.4
date	2017.07.06.14.57.29;	author florian;	state Exp;
branches;
next	1.3;
commitid	ivGFC9T96pcWyY0T;

1.3
date	2017.07.06.14.56.39;	author florian;	state Exp;
branches;
next	1.2;
commitid	oU12AXI8EYPV2WUK;

1.2
date	2017.06.06.13.57.23;	author florian;	state Exp;
branches;
next	1.1;
commitid	iD2EXgDciOLrIrAa;

1.1
date	2017.06.03.10.00.29;	author florian;	state Exp;
branches;
next	;
commitid	LiVl5Mw0RdD7hl8R;


desc
@@


1.10
log
@Overhaul verbosity handling.
Get rid of cmd_opts which is a leftover from daemons that handle
config files. Instead use a verbose counter for the amount of -v
given on the command line. One enables debug logging, two logs
received router advertisements. This will make debugging unexpected
RAs easier.
Instead of asking for a pcap we can ask for -vv.
@
text
@/*	$OpenBSD: slaacd.h,v 1.9 2017/08/23 10:48:01 florian Exp $	*/

/*
 * Copyright (c) 2017 Florian Obser <florian@@openbsd.org>
 * Copyright (c) 2004 Esben Norby <norby@@openbsd.org>
 * Copyright (c) 2003, 2004 Henning Brauer <henning@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#define	SLAACD_SOCKET		"/dev/slaacd.sock"
#define SLAACD_USER		"_slaacd"

/* MAXDNAME from arpa/namesr.h */
#define SLAACD_MAX_DNSSL	1025

static const char * const log_procnames[] = {
	"main",
	"frontend",
	"engine"
};

struct imsgev {
	struct imsgbuf	 ibuf;
	void		(*handler)(int, short, void *);
	struct event	 ev;
	short		 events;
};

enum imsg_type {
	IMSG_NONE,
#ifndef	SMALL
	IMSG_CTL_LOG_VERBOSE,
	IMSG_CTL_SHOW_INTERFACE_INFO,
	IMSG_CTL_SHOW_INTERFACE_INFO_RA,
	IMSG_CTL_SHOW_INTERFACE_INFO_RA_PREFIX,
	IMSG_CTL_SHOW_INTERFACE_INFO_RA_RDNS,
	IMSG_CTL_SHOW_INTERFACE_INFO_RA_DNSSL,
	IMSG_CTL_SHOW_INTERFACE_INFO_ADDR_PROPOSALS,
	IMSG_CTL_SHOW_INTERFACE_INFO_ADDR_PROPOSAL,
	IMSG_CTL_SHOW_INTERFACE_INFO_DFR_PROPOSALS,
	IMSG_CTL_SHOW_INTERFACE_INFO_DFR_PROPOSAL,
	IMSG_CTL_END,
	IMSG_UPDATE_ADDRESS,
#endif	/* SMALL */
	IMSG_CTL_SEND_SOLICITATION,
	IMSG_SOCKET_IPC,
	IMSG_STARTUP,
	IMSG_UPDATE_IF,
	IMSG_REMOVE_IF,
	IMSG_RA,
	IMSG_PROPOSAL,
	IMSG_PROPOSAL_ACK,
	IMSG_CONFIGURE_ADDRESS,
	IMSG_DEL_ADDRESS,
	IMSG_FAKE_ACK,
	IMSG_CONFIGURE_DFR,
	IMSG_WITHDRAW_DFR,
};

extern const char* imsg_type_name[];

enum {
	PROC_MAIN,
	PROC_ENGINE,
	PROC_FRONTEND
} slaacd_process;

enum rpref {
	LOW,
	MEDIUM,
	HIGH,
};

#ifndef	SMALL
struct ctl_engine_info {
	uint32_t		if_index;
	int			running;
	int			autoconfprivacy;
	struct ether_addr	hw_address;
	struct sockaddr_in6	ll_address;
};

struct ctl_engine_info_ra {
	struct sockaddr_in6	 from;
	struct timespec		 when;
	struct timespec		 uptime;
	uint8_t			 curhoplimit;
	int			 managed;
	int			 other;
	char			 rpref[sizeof("MEDIUM")];
	uint16_t		 router_lifetime;	/* in seconds */
	uint32_t		 reachable_time;	/* in milliseconds */
	uint32_t		 retrans_time;		/* in milliseconds */
};

struct ctl_engine_info_ra_prefix {
	struct in6_addr		prefix;
	uint8_t			prefix_len;
	int			onlink;
	int			autonomous;
	uint32_t		vltime;
	uint32_t		pltime;
};

struct ctl_engine_info_ra_rdns {
	uint32_t		lifetime;
	struct in6_addr		rdns;
};

struct ctl_engine_info_ra_dnssl {
	uint32_t		lifetime;
	char			dnssl[SLAACD_MAX_DNSSL];
};

struct ctl_engine_info_address_proposal {
	int64_t			 id;
	char			 state[sizeof("PROPOSAL_NEARLY_EXPIRED")];
	time_t			 next_timeout;
	int			 timeout_count;
	struct timespec		 when;
	struct timespec		 uptime;
	struct sockaddr_in6	 addr;
	struct in6_addr		 prefix;
	int			 privacy;
	uint8_t			 prefix_len;
	uint32_t		 vltime;
	uint32_t		 pltime;
};

struct ctl_engine_info_dfr_proposal {
	int64_t			 id;
	char			 state[sizeof("PROPOSAL_NEARLY_EXPIRED")];
	time_t			 next_timeout;
	int			 timeout_count;
	struct timespec		 when;
	struct timespec		 uptime;
	struct sockaddr_in6	 addr;
	uint32_t		 router_lifetime;
	char			 rpref[sizeof("MEDIUM")];
};

struct imsg_addrinfo {
	uint32_t		if_index;
	struct ether_addr	hw_address;
	struct sockaddr_in6	ll_address;
	struct sockaddr_in6	addr;
	struct in6_addr		mask;
	int			privacy;
	uint32_t		vltime;
	uint32_t		pltime;
};
#endif	/* SMALL */

struct imsg_ifinfo {
	uint32_t		if_index;
	int			running;
	int			autoconfprivacy;
	struct ether_addr	hw_address;
	struct sockaddr_in6	ll_address;
};

struct imsg_del_addr {
	uint32_t		if_index;
	struct sockaddr_in6	addr;
};

struct imsg_proposal_ack {
	int64_t		 id;
	pid_t		 pid;
	uint32_t	 if_index;
};

struct imsg_ra {
	uint32_t		if_index;
	struct sockaddr_in6	from;
	ssize_t			len;
	uint8_t			packet[1500];
};

/* slaacd.c */
int		main_imsg_compose_frontend(int, pid_t, void *, uint16_t);
int		main_imsg_compose_engine(int, pid_t, void *, uint16_t);
void		imsg_event_add(struct imsgev *);
int		imsg_compose_event(struct imsgev *, uint16_t, uint32_t, pid_t,
		    int, void *, uint16_t);
#ifndef	SMALL
const char	*sin6_to_str(struct sockaddr_in6 *);
#else
#define	sin6_to_str(x...)	""
#endif	/* SMALL */
@


1.9
log
@When starting up or when the autoconf6 flag is set on an interface
collect already configured autoconf addresses and track them in the
engine.
That way we are not adding a new privacy address on every restart.
@
text
@d1 1
a1 1
/*	$OpenBSD: slaacd.h,v 1.8 2017/08/21 14:44:26 florian Exp $	*/
a23 3
#define OPT_VERBOSE	0x00000001
#define OPT_VERBOSE2	0x00000002

a189 2

extern uint32_t	 cmd_opts;
@


1.8
log
@Move sin6_to_str() to slaacd.c so that it can be used in more
places. While here do not compile it for the ramdisk.
@
text
@d1 1
a1 1
/*	$OpenBSD: slaacd.h,v 1.7 2017/08/18 07:45:03 florian Exp $	*/
d57 1
d154 11
@


1.7
log
@Timeouts should be time_t to prevent overflows.

Bug report and fix tested by csszep AT gmail, thanks!
This was triggered by virtualbox which sets vltime and pltime to
infinity (0xffffffff).
@
text
@d1 1
a1 1
/*	$OpenBSD: slaacd.h,v 1.6 2017/07/30 07:41:08 florian Exp $	*/
d185 10
a194 5
int	main_imsg_compose_frontend(int, pid_t, void *, uint16_t);
int	main_imsg_compose_engine(int, pid_t, void *, uint16_t);
void	imsg_event_add(struct imsgev *);
int	imsg_compose_event(struct imsgev *, uint16_t, uint32_t, pid_t,
	    int, void *, uint16_t);
@


1.6
log
@leftovers from newd
@
text
@d1 1
a1 1
/*	$OpenBSD: slaacd.h,v 1.5 2017/07/06 15:02:53 florian Exp $	*/
d131 1
a131 1
	int			 next_timeout;
d146 1
a146 1
	int			 next_timeout;
@


1.5
log
@Sprinkel in some #ifndef SMALL to make slaacd smaller for the
installer.

This removes the control socket handling which is useless because we
won't have slaacctl in the installer.

Also deraadt@@ pointed out that this would be the first use of log.c in
the installer where we don't have syslogd running so it's rather
pointless. So this completely neuters logging.

The log.h change doesn't interfere with benno@@'s efforts of unifying
log.c

The installer version of slaacd won't even compile control.c and log.c
@
text
@d1 1
a1 1
/*	$OpenBSD: slaacd.h,v 1.4 2017/07/06 14:57:29 florian Exp $	*/
a25 3

#define SLAACD_MAXTEXT		256
#define SLAACD_MAXGROUPNAME	16
@


1.4
log
@reorder imsg_type enum so that we can #ifndef SMALL all the control
related imsg types
@
text
@d1 1
a1 1
/*	$OpenBSD: slaacd.h,v 1.3 2017/07/06 14:56:39 florian Exp $	*/
d48 1
d60 1
d90 1
d157 1
@


1.3
log
@move rpref enum definition up so that we can #ifndef SMALL a big block
@
text
@d1 1
a1 1
/*	$OpenBSD: slaacd.h,v 1.2 2017/06/06 13:57:23 florian Exp $	*/
d54 4
d59 1
a64 1
	IMSG_CTL_SEND_SOLICITATION,
a68 2
	IMSG_CTL_SHOW_INTERFACE_INFO_ADDR_PROPOSALS,
	IMSG_CTL_SHOW_INTERFACE_INFO_ADDR_PROPOSAL,
a69 2
	IMSG_CTL_SHOW_INTERFACE_INFO_DFR_PROPOSALS,
	IMSG_CTL_SHOW_INTERFACE_INFO_DFR_PROPOSAL,
@


1.2
log
@We are going to start slaacd(8) much earlier, before /var is even
mounted. Move control socket to /dev for now.
Input & OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: slaacd.h,v 1.1 2017/06/03 10:00:29 florian Exp $	*/
d82 6
a93 6
};

enum rpref {
	LOW,
	MEDIUM,
	HIGH,
@


1.1
log
@Move slaacd to /sbin
jca points out that all the other interface configuration tools live
there (like ifconfig or dhclient). Furthermore it starts so early in
the boot process that /usr might not be mounted yet if it's a nfs
filesystem.
sthen and deraadt agree
@
text
@d1 1
a1 1
/*	$OpenBSD: slaacd.h,v 1.17 2017/05/31 07:14:58 florian Exp $	*/
d21 1
a21 1
#define	SLAACD_SOCKET		"/var/run/slaacd.sock"
@

