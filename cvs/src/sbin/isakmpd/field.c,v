head	1.22;
access;
symbols
	OPENBSD_6_2_BASE:1.22
	OPENBSD_6_1:1.21.0.4
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.20.0.6
	OPENBSD_6_0_BASE:1.20
	OPENBSD_5_9:1.20.0.2
	OPENBSD_5_9_BASE:1.20
	OPENBSD_5_8:1.20.0.4
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.19.0.34
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.19.0.38
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.19.0.36
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.19.0.32
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.19.0.30
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.19.0.28
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.19
	OPENBSD_5_1:1.19.0.26
	OPENBSD_5_0:1.19.0.24
	OPENBSD_5_0_BASE:1.19
	OPENBSD_4_9:1.19.0.22
	OPENBSD_4_9_BASE:1.19
	OPENBSD_4_8:1.19.0.20
	OPENBSD_4_8_BASE:1.19
	OPENBSD_4_7:1.19.0.16
	OPENBSD_4_7_BASE:1.19
	OPENBSD_4_6:1.19.0.18
	OPENBSD_4_6_BASE:1.19
	OPENBSD_4_5:1.19.0.14
	OPENBSD_4_5_BASE:1.19
	OPENBSD_4_4:1.19.0.12
	OPENBSD_4_4_BASE:1.19
	OPENBSD_4_3:1.19.0.10
	OPENBSD_4_3_BASE:1.19
	OPENBSD_4_2:1.19.0.8
	OPENBSD_4_2_BASE:1.19
	OPENBSD_4_1:1.19.0.6
	OPENBSD_4_1_BASE:1.19
	OPENBSD_4_0:1.19.0.4
	OPENBSD_4_0_BASE:1.19
	OPENBSD_3_9:1.19.0.2
	OPENBSD_3_9_BASE:1.19
	OPENBSD_3_8:1.17.0.2
	OPENBSD_3_8_BASE:1.17
	OPENBSD_3_7:1.16.0.4
	OPENBSD_3_7_BASE:1.16
	OPENBSD_3_6:1.16.0.2
	OPENBSD_3_6_BASE:1.16
	OPENBSD_3_5:1.13.0.2
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.12.0.2
	OPENBSD_3_4_BASE:1.12
	OPENBSD_3_3:1.11.0.2
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.10.0.4
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.8.0.8
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.8.0.6
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_8:1.8.0.4
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.2
	OPENBSD_2_7_BASE:1.8
	OPENBSD_2_6:1.7.0.2
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.5.0.2
	OPENBSD_2_5_BASE:1.5
	NIKLAS_981114:1.1.1.1
	NIKLAS:1.1.1;
locks; strict;
comment	@ * @;


1.22
date	2017.04.02.21.23.44;	author tom;	state Exp;
branches;
next	1.21;
commitid	L8H1coEtPjyTu1i7;

1.21
date	2017.02.03.08.23.46;	author guenther;	state Exp;
branches;
next	1.20;
commitid	RkgZAc0srXet0WqL;

1.20
date	2015.06.03.02.24.36;	author millert;	state Exp;
branches;
next	1.19;
commitid	GouatFiJVxwlAVIQ;

1.19
date	2005.11.15.21.49.04;	author cloder;	state Exp;
branches;
next	1.18;

1.18
date	2005.11.14.23.25.11;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2005.04.08.22.32.09;	author cloder;	state Exp;
branches;
next	1.16;

1.16
date	2004.06.14.09.55.41;	author ho;	state Exp;
branches;
next	1.15;

1.15
date	2004.05.23.18.17.55;	author hshoexer;	state Exp;
branches;
next	1.14;

1.14
date	2004.04.15.18.39.25;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2003.11.06.16.12.07;	author ho;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.03.14.28.16;	author ho;	state Exp;
branches;
next	1.11;

1.11
date	2003.03.06.13.48.18;	author cedric;	state Exp;
branches;
next	1.10;

1.10
date	2002.01.23.18.44.47;	author ho;	state Exp;
branches;
next	1.9;

1.9
date	2002.01.03.16.27.41;	author ho;	state Exp;
branches;
next	1.8;

1.8
date	2000.02.25.17.23.39;	author niklas;	state Exp;
branches;
next	1.7;

1.7
date	99.04.20.11.32.40;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	99.04.19.19.54.53;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	99.02.26.03.38.56;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	98.12.21.01.02.23;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	98.11.17.11.10.10;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	98.11.15.00.43.53;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	98.11.15.00.03.48;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.11.15.00.03.48;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.22
log
@Check return value of asprintf(), and don't use 0 as a char *

Started by, and ok, deraadt@@
@
text
@/* $OpenBSD: field.c,v 1.21 2017/02/03 08:23:46 guenther Exp $	 */
/* $EOM: field.c,v 1.11 2000/02/20 19:58:37 niklas Exp $	 */

/*
 * Copyright (c) 1998, 1999 Niklas Hallqvist.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This code was written under funding by Ericsson Radio Systems.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <netinet/in.h>

#include "constants.h"
#include "field.h"
#include "log.h"
#include "util.h"

static char    *field_debug_raw(u_int8_t *, size_t, struct constant_map **);
static char    *field_debug_num(u_int8_t *, size_t, struct constant_map **);
static char    *field_debug_mask(u_int8_t *, size_t, struct constant_map **);
static char    *field_debug_ign(u_int8_t *, size_t, struct constant_map **);
static char    *field_debug_cst(u_int8_t *, size_t, struct constant_map **);

/* Contents must match the enum in struct field.  */
static char    *(*decode_field[]) (u_int8_t *, size_t,
    struct constant_map **) = {
	field_debug_raw,
	field_debug_num,
	field_debug_mask,
	field_debug_ign,
	field_debug_cst
};

/*
 * Return a string showing the hexadecimal contents of the LEN-sized buffer
 * BUF.  MAPS should be zero and is only here because the API requires it.
 */
static char *
field_debug_raw(u_int8_t *buf, size_t len, struct constant_map **maps)
{
	return raw2hex(buf, len);
}

/*
 * Convert the unsigned LEN-sized number at BUF of network byteorder to a
 * 32-bit unsigned integer of host byteorder pointed to by VAL.
 */
static int
extract_val(u_int8_t *buf, size_t len, u_int32_t *val)
{
	switch (len) {
	case 1:
		*val = *buf;
		break;
	case 2:
		*val = decode_16(buf);
		break;
	case 4:
		*val = decode_32(buf);
		break;
	default:
		return -1;
	}
	return 0;
}

/*
 * Return a textual representation of the unsigned number pointed to by BUF
 * which is LEN octets long.  MAPS should be zero and is only here because
 * the API requires it.
 */
static char *
field_debug_num(u_int8_t *buf, size_t len, struct constant_map **maps)
{
	char           *retval;
	u_int32_t       val;

	if (extract_val(buf, len, &val))
		return NULL;
	if (asprintf(&retval, "%u", val) == -1)
		return NULL;
	return retval;
}

/*
 * Return the symbolic names of the flags pointed to by BUF which is LEN
 * octets long, using the constant maps MAPS.
 */
static char *
field_debug_mask(u_int8_t *buf, size_t len, struct constant_map **maps)
{
	u_int32_t       val;
	u_int32_t       bit;
	char           *retval, *new_buf, *name;
	size_t          buf_sz;

	if (extract_val(buf, len, &val))
		return NULL;

	/* Size for brackets, two spaces and a NUL terminator.  */
	buf_sz = 4;
	retval = malloc(buf_sz);
	if (!retval)
		return NULL;

	strlcpy(retval, "[ ", buf_sz);
	for (bit = 1; bit; bit <<= 1) {
		if (val & bit) {
			name = constant_name_maps(maps, bit);
			buf_sz += strlen(name) + 1;
			new_buf = realloc(retval, buf_sz);
			if (!new_buf) {
				free(retval);
				return NULL;
			}
			retval = new_buf;
			strlcat(retval, name, buf_sz);
			strlcat(retval, " ", buf_sz);
		}
	}
	strlcat(retval, "]", buf_sz);
	return retval;
}

/*
 * Just a dummy needed to skip the unused LEN sized space at BUF.  MAPS
 * should be zero and is only here because the API requires it.
 */
static char *
field_debug_ign(u_int8_t *buf, size_t len, struct constant_map **maps)
{
	return NULL;
}

/*
 * Return the symbolic name of a constant pointed to by BUF which is LEN
 * octets long, using the constant maps MAPS.
 */
static char *
field_debug_cst(u_int8_t *buf, size_t len, struct constant_map **maps)
{
	u_int32_t       val;

	if (extract_val(buf, len, &val))
		return NULL;

	return strdup(constant_name_maps(maps, val));
}

/* Pretty-print a field from BUF as described by F.  */
void
field_dump_field(struct field *f, u_int8_t *buf)
{
	char	*value;

	value = decode_field[(int) f->type] (buf + f->offset, f->len, f->maps);
	if (value) {
		LOG_DBG((LOG_MESSAGE, 70, "%s: %s", f->name, value));
		free(value);
	}
}

/* Pretty-print all the fields of BUF as described in FIELDS.  */
void
field_dump_payload(struct field *fields, u_int8_t *buf)
{
	struct field   *field;

	for (field = fields; field->name; field++)
		field_dump_field(field, buf);
}

/* Return the numeric value of the field F of BUF.  */
u_int32_t
field_get_num(struct field *f, u_int8_t *buf)
{
	u_int32_t       val;

	if (extract_val(buf + f->offset, f->len, &val))
		return 0;
	return val;
}

/* Stash the number VAL into BUF's field F.  */
void
field_set_num(struct field *f, u_int8_t *buf, u_int32_t val)
{
	switch (f->len) {
	case 1:
		buf[f->offset] = val;
		break;
	case 2:
		encode_16(buf + f->offset, val);
		break;
	case 4:
		encode_32(buf + f->offset, val);
		break;
	}
}

/* Stash BUF's raw field F into VAL.  */
void
field_get_raw(struct field *f, u_int8_t *buf, u_int8_t *val)
{
	memcpy(val, buf + f->offset, f->len);
}

/* Stash the buffer VAL into BUF's field F.  */
void
field_set_raw(struct field *f, u_int8_t *buf, u_int8_t *val)
{
	memcpy(buf + f->offset, val, f->len);
}
@


1.21
log
@Stop assuming that in_{addr,port}_t are typedefed in <sys/types.h> and
instead pull in <netinet/in.h> or <arpa/inet.h> when those are needed.

ok florian@@ beck@@ millert@@
@
text
@d1 1
a1 1
/* $OpenBSD: field.c,v 1.20 2015/06/03 02:24:36 millert Exp $	 */
d99 1
a99 1
	char           *retval = NULL;
d103 3
a105 3
		return 0;
	/* 3 decimal digits are enough to represent each byte.  */
	(void)asprintf(&retval, "%u", val);
d122 1
a122 1
		return 0;
d128 1
a128 1
		return 0;
d138 1
a138 1
				return 0;
d156 1
a156 1
	return 0;
d169 1
a169 1
		return 0;
@


1.20
log
@Do not assume that asprintf() clears the pointer on failure, which
is non-portable.  Also add missing asprintf() return value checks.
OK deraadt@@ guenther@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: field.c,v 1.19 2005/11/15 21:49:04 cloder Exp $	 */
d35 1
@


1.19
log
@Add a new raw2hex function and yank out several pieces of code in other
places that were doing this.  Prodding deraadt.  OK hshoexer.
@
text
@d1 1
a1 1
/* $OpenBSD: field.c,v 1.18 2005/11/14 23:25:11 deraadt Exp $	 */
d98 1
a98 1
	char           *retval;
d104 1
a104 1
	asprintf(&retval, "%u", val);
@


1.18
log
@use snprintf; ok cloder.  also looked at by a few other people
@
text
@d1 1
a1 1
/* $OpenBSD: field.c,v 1.17 2005/04/08 22:32:09 cloder Exp $	 */
d64 1
a64 14
	char	*retval, *p;

	if (len == 0)
		return 0;
	retval = malloc(3 + len * 2);
	if (!retval)
		return 0;
	strlcpy(retval, "0x", 3 + len * 2);
	p = retval + 2;
	for (; len > 0; len--) {
		snprintf(p, 1 + len * 2, "%02x", *buf++);
		p += 2;
	}
	return retval;
@


1.17
log
@Make deterministic randomness (only ever used for testing) a compile-time
option.  Reduces chances of somehow setting regrand when it's not supposed
to be set.  Remove "-r" option from man page.  Also xref certpatch(8) while
we are in there.  And remove some include sysdep.h where it is no longer
needed.
OK hshoexer
@
text
@d1 1
a1 1
/* $OpenBSD: field.c,v 1.16 2004/06/14 09:55:41 ho Exp $	 */
d117 1
a117 2
	retval = malloc(3 * len);
	snprintf(retval, 3 * len, "%u", val);
@


1.16
log
@KNF, style, 80c, etc. hshoexer@@ ok
@
text
@d1 1
a1 1
/* $OpenBSD: field.c,v 1.15 2004/05/23 18:17:55 hshoexer Exp $	 */
a34 2

#include "sysdep.h"
@


1.15
log
@More KNF.  Mainly spaces and line-wraps, no binary change.

ok ho@@
@
text
@d1 1
a1 1
/* $OpenBSD: field.c,v 1.14 2004/04/15 18:39:25 deraadt Exp $	 */
d50 2
a51 1
static char    *(*decode_field[]) (u_int8_t *, size_t, struct constant_map **) = {
@


1.14
log
@partial move to KNF.  More to come.  This has happened because there
are a raft of source code auditors who are willing to help improve this
code only if this is done, and hey, isakmpd does need our standard
auditing process.  ok ho hshoexer
@
text
@d1 1
a1 1
/* $OpenBSD: field.c,v 1.13 2003/11/06 16:12:07 ho Exp $	 */
d65 1
a65 1
	char           *retval, *p;
d192 1
a192 1
	char           *value;
d241 1
a241 1
field_get_raw(struct field * f, u_int8_t * buf, u_int8_t * val)
d248 1
a248 1
field_set_raw(struct field * f, u_int8_t * buf, u_int8_t * val)
@


1.13
log
@Style nits.
@
text
@d1 2
a2 2
/*	$OpenBSD: field.c,v 1.12 2003/06/03 14:28:16 ho Exp $	*/
/*	$EOM: field.c,v 1.11 2000/02/20 19:58:37 niklas Exp $	*/
d43 5
a47 5
static char *field_debug_raw (u_int8_t *, size_t, struct constant_map **);
static char *field_debug_num (u_int8_t *, size_t, struct constant_map **);
static char *field_debug_mask (u_int8_t *, size_t, struct constant_map **);
static char *field_debug_ign (u_int8_t *, size_t, struct constant_map **);
static char *field_debug_cst (u_int8_t *, size_t, struct constant_map **);
d50 6
a55 6
static char *(*decode_field[]) (u_int8_t *, size_t, struct constant_map **) = {
  field_debug_raw,
  field_debug_num,
  field_debug_mask,
  field_debug_ign,
  field_debug_cst
d63 1
a63 1
field_debug_raw (u_int8_t *buf, size_t len, struct constant_map **maps)
d65 1
a65 1
  char *retval, *p;
d67 12
a78 13
  if (len == 0)
    return 0;
  retval = malloc (3 + len * 2);
  if (!retval)
    return 0;
  strlcpy (retval, "0x", 3 + len * 2);
  p = retval + 2;
  for (; len > 0; len--)
    {
      snprintf (p, 1 + len * 2, "%02x", *buf++);
      p += 2;
    }
  return retval;
d86 1
a86 1
extract_val (u_int8_t *buf, size_t len, u_int32_t *val)
d88 14
a101 15
  switch (len)
    {
    case 1:
      *val = *buf;
      break;
    case 2:
      *val = decode_16 (buf);
      break;
    case 4:
      *val = decode_32 (buf);
      break;
    default:
      return -1;
    }
  return 0;
d110 1
a110 1
field_debug_num (u_int8_t *buf, size_t len, struct constant_map **maps)
d112 2
a113 2
  char *retval;
  u_int32_t val;
d115 6
a120 6
  if (extract_val (buf, len, &val))
    return 0;
  /* 3 decimal digits are enough to represent each byte.  */
  retval = malloc (3 * len);
  snprintf (retval, 3 * len, "%u", val);
  return retval;
d128 1
a128 1
field_debug_mask (u_int8_t *buf, size_t len, struct constant_map **maps)
d130 28
a157 30
  u_int32_t val;
  u_int32_t bit;
  char *retval, *new_buf, *name;
  size_t buf_sz;

  if (extract_val (buf, len, &val))
    return 0;

  /* Size for brackets, two spaces and a NUL terminator.  */
  buf_sz = 4;
  retval = malloc (buf_sz);
  if (!retval)
    return 0;

  strlcpy (retval, "[ ", buf_sz);
  for (bit = 1; bit; bit <<= 1)
    {
      if (val & bit)
	{
	  name = constant_name_maps (maps, bit);
	  buf_sz += strlen (name) + 1;
	  new_buf = realloc (retval, buf_sz);
	  if (!new_buf)
	    {
	      free (retval);
	      return 0;
	    }
	  retval = new_buf;
	  strlcat (retval, name, buf_sz);
	  strlcat (retval, " ", buf_sz);
d159 2
a160 3
    }
  strlcat (retval, "]", buf_sz);
  return retval;
d168 1
a168 1
field_debug_ign (u_int8_t *buf, size_t len, struct constant_map **maps)
d170 1
a170 1
  return 0;
d178 1
a178 1
field_debug_cst (u_int8_t *buf, size_t len, struct constant_map **maps)
d180 1
a180 1
  u_int32_t val;
d182 2
a183 2
  if (extract_val (buf, len, &val))
    return 0;
d185 1
a185 1
  return strdup (constant_name_maps (maps, val));
d190 1
a190 1
field_dump_field (struct field *f, u_int8_t *buf)
d192 1
a192 1
  char *value;
d194 5
a198 6
  value = decode_field[(int)f->type] (buf + f->offset, f->len, f->maps);
  if (value)
    {
      LOG_DBG ((LOG_MESSAGE, 70, "%s: %s", f->name, value));
      free (value);
    }
d203 1
a203 1
field_dump_payload (struct field *fields, u_int8_t *buf)
d205 1
a205 1
  struct field *field;
d207 2
a208 2
  for (field = fields; field->name; field++)
    field_dump_field (field, buf);
d213 1
a213 1
field_get_num (struct field *f, u_int8_t *buf)
d215 1
a215 1
  u_int32_t val;
d217 3
a219 3
  if (extract_val (buf + f->offset, f->len, &val))
    return 0;
  return val;
d224 1
a224 1
field_set_num (struct field *f, u_int8_t *buf, u_int32_t val)
d226 11
a236 12
  switch (f->len)
    {
    case 1:
      buf[f->offset] = val;
      break;
    case 2:
      encode_16 (buf + f->offset, val);
      break;
    case 4:
      encode_32 (buf + f->offset, val);
      break;
    }
d241 1
a241 1
field_get_raw (struct field *f, u_int8_t *buf, u_int8_t *val)
d243 1
a243 1
  memcpy (val, buf + f->offset, f->len);
d248 1
a248 1
field_set_raw (struct field *f, u_int8_t *buf, u_int8_t *val)
d250 1
a250 1
  memcpy (buf + f->offset, val, f->len);
@


1.12
log
@Remove clauses 3 and 4. With approval from Niklas Hallqvist and
Niels Provos.
@
text
@d1 1
a1 1
/*	$OpenBSD: field.c,v 1.11 2003/03/06 13:48:18 cedric Exp $	*/
d74 1
a74 1
  for(; len > 0; len--)
@


1.11
log
@"len" is decremented too early, so the second argument
of the snprintf call is too small on last run of the loop.
ok ho@@
@
text
@d1 1
a1 1
/*	$OpenBSD: field.c,v 1.10 2002/01/23 18:44:47 ho Exp $	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Ericsson Radio Systems.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.10
log
@the last few sprintf -> snprintf
@
text
@d1 1
a1 1
/*	$OpenBSD: field.c,v 1.9 2002/01/03 16:27:41 ho Exp $	*/
d79 1
a79 1
  while (len--)
@


1.9
log
@str[n]{cpy,cat} -> strl{cpy,cat}, sprintf -> snprintf
@
text
@d1 1
a1 1
/*	$OpenBSD: field.c,v 1.8 2000/02/25 17:23:39 niklas Exp $	*/
d81 1
a81 1
      sprintf (p, "%02x", *buf++);
@


1.8
log
@regress/crypto/Makefile: Merge with EOM 1.5
regress/dh/Makefile: Merge with EOM 1.7
regress/group/Makefile: Merge with EOM 1.9
regress/prf/Makefile: Merge with EOM 1.4
regress/rsakeygen/Makefile: Merge with EOM 1.8
regress/x509/Makefile: Merge with EOM 1.10
Makefile: Merge with EOM 1.62
attribute.c: Merge with EOM 1.10
sa.c: Merge with EOM 1.99
conf.c: Merge with EOM 1.20
crypto.c: Merge with EOM 1.28
isakmpd.c: Merge with EOM 1.45
connection.c: Merge with EOM 1.19
doi.h: Merge with EOM 1.28
field.c: Merge with EOM 1.11
exchange.c: Merge with EOM 1.116
ike_auth.c: Merge with EOM 1.44
pf_key_v2.c: Merge with EOM 1.37
ike_phase_1.c: Merge with EOM 1.22
ipsec.c: Merge with EOM 1.118
isakmp_doi.c: Merge with EOM 1.40
log.c: Merge with EOM 1.26
log.h: Merge with EOM 1.18
math_group.c: Merge with EOM 1.23
message.c: Merge with EOM 1.144
pf_encap.c: Merge with EOM 1.70
policy.c: Merge with EOM 1.18
timer.c: Merge with EOM 1.13
transport.c: Merge with EOM 1.41
udp.c: Merge with EOM 1.47
ui.c: Merge with EOM 1.37
x509.c: Merge with EOM 1.36

author: niklas
Made debug logging a compile time selectable feature
@
text
@d1 1
a1 1
/*	$OpenBSD: field.c,v 1.7 1999/04/20 11:32:40 niklas Exp $	*/
d77 1
a77 1
  strcpy (retval, "0x");
d151 1
a151 1
  strcpy (retval, "[ ");
d165 2
a166 2
	  strcat (retval, name);
	  strcat (retval, " ");
d169 1
a169 1
  strcat (retval, "]");
@


1.7
log
@Merge with EOM 1.10

author: niklas
Use portable malloc+snprintf instead of asprintf
@
text
@d1 2
a2 2
/*	$OpenBSD: field.c,v 1.6 1999/04/19 19:54:53 niklas Exp $	*/
/*	$EOM: field.c,v 1.10 1999/04/20 09:23:43 niklas Exp $	*/
d207 1
a207 1
      log_debug (LOG_MESSAGE, 70, "%s: %s", f->name, value);
@


1.6
log
@./app.c: Merge with EOM 1.5
./gmp_util.c: Merge with EOM 1.3
./asn_useful.c: Merge with EOM 1.11
./attribute.c: Merge with EOM 1.9
./constants.c: Merge with EOM 1.7
./doi.h: Merge with EOM 1.25
./doi.c: Merge with EOM 1.4
./field.c: Merge with EOM 1.9
./init.c: Merge with EOM 1.13
./isakmp_doi.c: Merge with EOM 1.35
./prf.c: Merge with EOM 1.6
./util.c: Merge with EOM 1.14
./app.h: Merge with EOM 1.4
./conf.h: Merge with EOM 1.8
./ipsec.h: Merge with EOM 1.34
./ipsec_doi.h: Merge with EOM 1.10
./pkcs.h: Merge with EOM 1.8
./sysdep.h: Merge with EOM 1.15

1999 copyrights
@
text
@d1 2
a2 2
/*	$OpenBSD: field.c,v 1.5 1999/02/26 03:38:56 niklas Exp $	*/
/*	$EOM: field.c,v 1.9 1999/04/02 00:57:37 niklas Exp $	*/
d124 3
a126 1
  asprintf (&retval, "%u", val);
@


1.5
log
@Merge from the Ericsson repository
| revision 1.8
| date: 1999/02/25 11:38:55;  author: niklas;  state: Exp;  lines: +3 -1
| include sysdep.h everywhere
| ----------------------------
| revision 1.7
| date: 1999/02/06 15:00:36;  author: niklas;  state: Exp;  lines: +3 -3
| memory allocation fix from Schmuel Siegel
| ----------------------------
@
text
@d1 2
a2 2
/*	$OpenBSD: field.c,v 1.4 1998/12/21 01:02:23 niklas Exp $	*/
/*	$EOM: field.c,v 1.8 1999/02/25 11:38:55 niklas Exp $	*/
d5 1
a5 1
 * Copyright (c) 1998 Niklas Hallqvist.  All rights reserved.
@


1.4
log
@Last months worth of work on isakmpd, lots done
@
text
@d1 2
a2 2
/*	$OpenBSD: field.c,v 1.3 1998/11/17 11:10:10 niklas Exp $	*/
/*	$EOM: field.c,v 1.6 1998/11/27 17:12:22 niklas Exp $	*/
d41 2
d144 1
a144 1
  buf_sz = 5;
d155 1
a155 1
	  buf_sz += strlen (name);
@


1.3
log
@Add RCS Ids from the EOM repository
@
text
@d1 2
a2 2
/*	$OpenBSD: field.c,v 1.2 1998/11/15 00:43:53 niklas Exp $	*/
/*	$EOM: field.c,v 1.5 1998/09/12 19:26:31 niklas Exp $	*/
d224 1
a224 1
  if (extract_val(buf + f->offset, f->len, &val))
@


1.2
log
@openBSD RCS IDs
@
text
@d1 2
a2 1
/*	$OpenBSD: field.c,v 1.1.1.1 1998/11/15 00:03:48 niklas Exp $	*/
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$Id: field.c,v 1.5 1998/09/12 19:26:31 niklas Exp $	*/
@


1.1.1.1
log
@Initial import of isakmpd, an IKE (ISAKMP/Oakley) implementation for the
OpenBSD IPSEC stack by me, Niklas Hallqvist and Niels Provos, funded by
Ericsson Radio Systems.  It is not yet complete or usable in a real scenario
but the missing pieces will soon be there.  The early commit is for people
who wants early access and who are not afraid of looking at source.
isakmpd interops with Cisco, Timestep, SSH & Pluto (Linux FreeS/WAN) so
far, so it is not that incomplete.  It is really mostly configuration that
is lacking.
@
text
@@
