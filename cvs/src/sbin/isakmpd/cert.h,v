head	1.16;
access;
symbols
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.16.0.8
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.4
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.16.0.6
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.15.0.32
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.15.0.30
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.26
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.24
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.22
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.20
	OPENBSD_5_0:1.15.0.18
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.16
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.14
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.10
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.12
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.8
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.6
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.4
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.2
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.14.0.12
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.10
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.14.0.8
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.14.0.6
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.14.0.4
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.14.0.2
	OPENBSD_3_6_BASE:1.14
	OPENBSD_3_5:1.12.0.4
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.12.0.2
	OPENBSD_3_4_BASE:1.12
	OPENBSD_3_3:1.11.0.4
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.2
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.9.0.4
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.9.0.2
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9:1.6.0.4
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.6.0.2
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.4.0.4
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	NIKLAS_981114:1.1.1.1
	NIKLAS:1.1.1;
locks; strict;
comment	@ * @;


1.16
date	2015.01.16.06.39.58;	author deraadt;	state Exp;
branches;
next	1.15;
commitid	Uu5nFG3wCl0LACBb;

1.15
date	2007.08.05.09.43.09;	author tom;	state Exp;
branches;
next	1.14;

1.14
date	2004.05.14.08.42.56;	author hshoexer;	state Exp;
branches;
next	1.13;

1.13
date	2004.04.15.18.39.25;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.03.14.28.16;	author ho;	state Exp;
branches;
next	1.11;

1.11
date	2002.08.07.13.19.20;	author ho;	state Exp;
branches;
next	1.10;

1.10
date	2002.06.09.08.13.06;	author todd;	state Exp;
branches;
next	1.9;

1.9
date	2001.07.01.19.48.42;	author niklas;	state Exp;
branches;
next	1.8;

1.8
date	2001.06.05.05.59.42;	author niklas;	state Exp;
branches;
next	1.7;

1.7
date	2001.05.31.20.20.26;	author angelos;	state Exp;
branches;
next	1.6;

1.6
date	2000.10.07.06.57.08;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	2000.06.08.20.49.44;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	99.07.17.21.54.39;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	98.11.17.11.10.08;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	98.11.15.00.43.50;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	98.11.15.00.03.48;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.11.15.00.03.48;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@/* $OpenBSD: cert.h,v 1.15 2007/08/05 09:43:09 tom Exp $	 */
/* $EOM: cert.h,v 1.8 2000/09/28 12:53:27 niklas Exp $	 */

/*
 * Copyright (c) 1998, 1999 Niels Provos.  All rights reserved.
 * Copyright (c) 2000, 2001 Niklas Hallqvist.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This code was written under funding by Ericsson Radio Systems.
 */

#ifndef _CERT_H_
#define _CERT_H_

#include <sys/types.h>
#include <sys/queue.h>

/*
 * CERT handler for each kind of certificate:
 *
 * cert_init - initialize CERT handler.
 * crl_init - initialize CRLs, if applicable.
 * cert_get - get a certificate in internal representation from raw data.
 * cert_validate - validated a certificate, if it returns != 0 we can use it.
 * cert_insert - inserts cert into memory storage, we can retrieve with
 *               cert_obtain.
 * cert_dup - duplicate a certificate
 * cert_serialize - convert to a "serialized" form; KeyNote stays the same,
 *                  X509 is converted to the ASN1 notation.
 * cert_printable - for X509, the hex representation of the serialized form;
 *                  for KeyNote, itself.
 * cert_from_printable - the reverse of cert_printable
 * ca_count - how many CAs we have in our store (for CERT_REQ processing)
 */

struct cert_handler {
	u_int16_t id;	/* ISAKMP Cert Encoding ID */
	int	 (*cert_init)(void);
	int	 (*crl_init)(void);
	void	*(*cert_get)(u_int8_t *, u_int32_t);
	int	 (*cert_validate)(void *);
	int	 (*cert_insert)(int, void *);
	void	 (*cert_free)(void *);
	int	 (*certreq_validate)(u_int8_t *, u_int32_t);
	int	 (*certreq_decode)(void **, u_int8_t *, u_int32_t);
	void	 (*free_aca)(void *);
	int	 (*cert_obtain)(u_int8_t *, size_t, void *, u_int8_t **,
		     u_int32_t *);
	int	 (*cert_get_key) (void *, void *);
	int	 (*cert_get_subjects) (void *, int *, u_int8_t ***,
		     u_int32_t **);
	void	*(*cert_dup) (void *);
	void	 (*cert_serialize) (void *, u_int8_t **, u_int32_t *);
	char	*(*cert_printable) (void *);
	void	*(*cert_from_printable) (char *);
	int	 (*ca_count)(void);
};

/* The acceptable authority of cert request.  */
struct certreq_aca {
	TAILQ_ENTRY(certreq_aca) link;

	u_int16_t id;
	struct cert_handler *handler;

	/* If data is a null pointer, everything is acceptable.  */
	void	*data;

	/* Copy of raw CA value received */
	u_int32_t raw_ca_len;
	void	*raw_ca;
};

struct certreq_aca *certreq_decode(u_int16_t, u_int8_t *, u_int32_t);
void	cert_free_subjects(int, u_int8_t **, u_int32_t *);
struct cert_handler *cert_get(u_int16_t);
int	cert_init(void);
int	crl_init(void);

#endif				/* _CERT_H_ */
@


1.15
log
@Allow key exchange with RSA signature authentication to work with
Cisco IOS and other initiators that only send their certs in response
to CERT_REQUEST.

With input and help from cloder@@, Stuart Henderson, mpf@@, and several
others who did lots of testing - thanks to all.

ok hshoexer@@
@
text
@d1 1
a1 1
/* $OpenBSD: cert.h,v 1.14 2004/05/14 08:42:56 hshoexer Exp $	 */
a35 1
#include <sys/param.h>
@


1.14
log
@Some more KNF, no binary change.

ok ho@@
@
text
@d1 1
a1 1
/* $OpenBSD: cert.h,v 1.13 2004/04/15 18:39:25 deraadt Exp $	 */
d55 1
d67 1
a67 1
	void	*(*certreq_decode)(u_int8_t *, u_int32_t);
d78 1
d90 4
@


1.13
log
@partial move to KNF.  More to come.  This has happened because there
are a raft of source code auditors who are willing to help improve this
code only if this is done, and hey, isakmpd does need our standard
auditing process.  ok ho hshoexer
@
text
@d1 1
a1 1
/* $OpenBSD: cert.h,v 1.12 2003/06/03 14:28:16 ho Exp $	 */
d59 14
a72 14
	int	(*cert_init) (void);
	int	(*crl_init) (void);
	void	*(*cert_get) (u_int8_t *, u_int32_t);
	int	(*cert_validate) (void *);
	int	(*cert_insert) (int, void *);
	void	(*cert_free) (void *);
	int	(*certreq_validate) (u_int8_t *, u_int32_t);
	void	*(*certreq_decode) (u_int8_t *, u_int32_t);
	void	(*free_aca) (void *);
	int	(*cert_obtain) (u_int8_t *, size_t, void *,
		    u_int8_t **, u_int32_t *);
	int	(*cert_get_key) (void *, void *);
	int	(*cert_get_subjects) (void *, int *, u_int8_t ***,
		    u_int32_t **);
d74 1
a74 1
	void	(*cert_serialize) (void *, u_int8_t **, u_int32_t *);
@


1.12
log
@Remove clauses 3 and 4. With approval from Niklas Hallqvist and
Niels Provos.
@
text
@d1 2
a2 2
/*	$OpenBSD: cert.h,v 1.11 2002/08/07 13:19:20 ho Exp $	*/
/*	$EOM: cert.h,v 1.8 2000/09/28 12:53:27 niklas Exp $	*/
d58 19
a76 17
  u_int16_t id;				/* ISAKMP Cert Encoding ID */
  int (*cert_init) (void);
  int (*crl_init) (void);
  void *(*cert_get) (u_int8_t *, u_int32_t);
  int (*cert_validate) (void *);
  int (*cert_insert) (int, void *);
  void (*cert_free) (void *);
  int (*certreq_validate) (u_int8_t *, u_int32_t);
  void *(*certreq_decode) (u_int8_t *, u_int32_t);
  void (*free_aca) (void *);
  int (*cert_obtain) (u_int8_t *, size_t, void *, u_int8_t **, u_int32_t *);
  int (*cert_get_key) (void *, void *);
  int (*cert_get_subjects) (void *, int *, u_int8_t ***, u_int32_t **);
  void *(*cert_dup) (void *);
  void (*cert_serialize) (void *, u_int8_t **, u_int32_t *);
  char *(*cert_printable) (void *);
  void *(*cert_from_printable) (char *);
d81 1
a81 1
  TAILQ_ENTRY (certreq_aca) link;
d83 2
a84 2
  u_int16_t id;
  struct cert_handler *handler;
d86 2
a87 2
  /* If data is a null pointer, everything is acceptable.  */
  void *data;
d90 5
a94 5
struct certreq_aca *certreq_decode (u_int16_t, u_int8_t *, u_int32_t);
void cert_free_subjects (int, u_int8_t **, u_int32_t *);
struct cert_handler *cert_get (u_int16_t);
int cert_init (void);
int crl_init (void);
d96 1
a96 1
#endif /* _CERT_H_ */
@


1.11
log
@A rewrite of the CRL support code, also from <Thomas.Walpuski@@gmx.net>.
Some style mods, and checks added for OpenSSL version 0.9.7 or later.
Currently CRLs are not supported for earlier versions.
Manual pages updated.
@
text
@d1 1
a1 1
/*	$OpenBSD: cert.h,v 1.10 2002/06/09 08:13:06 todd Exp $	*/
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Ericsson Radio Systems.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.10
log
@rm trailing whitespace
@
text
@d1 1
a1 1
/*	$OpenBSD: cert.h,v 1.9 2001/07/01 19:48:42 niklas Exp $	*/
d48 3
a50 2
 * cert_init - Initialize CERT handler - called only once.
 * cert_get  - Get a certificate in internal representation from raw data.
d64 2
a65 1
  int (*cert_init) (void);		
d97 1
@


1.9
log
@Style
@
text
@d1 1
a1 1
/*	$OpenBSD: cert.h,v 1.8 2001/06/05 05:59:42 niklas Exp $	*/
d45 1
a45 1
/* 
d64 1
a64 1
  void *(*cert_get) (u_int8_t *, u_int32_t); 
@


1.8
log
@Style issues and commentary
@
text
@d1 1
a1 1
/*	$OpenBSD: cert.h,v 1.7 2001/05/31 20:20:26 angelos Exp $	*/
d86 3
a88 1
  void *data;			/* if NULL everything is acceptable.  */
@


1.7
log
@Add a some more routines for handling certs in the cert handler structure.
@
text
@d1 1
a1 1
/*	$OpenBSD: cert.h,v 1.6 2000/10/07 06:57:08 niklas Exp $	*/
d6 1
a6 1
 * Copyright (c) 2000 Niklas Hallqvist.  All rights reserved.
d48 2
a49 2
 * cert_init - Initialize CERT handler - called only once
 * cert_get  - Get a certificate in internal representation from raw data
d80 1
a80 2
/* the acceptable authority of cert request */

d86 1
a86 1
  void *data;			/* if NULL everything is acceptable */
@


1.6
log
@cert.c: Merge with EOM 1.18
cert.h: Merge with EOM 1.8
libcrypto.c: Merge with EOM 1.14
policy.h: Merge with EOM 1.12
x509.h: Merge with EOM 1.11

author: niklas
Multiple subject name matching, makes certificate interop with PGPnet at least
partly working.  Added some error checking.
@
text
@d1 1
a1 1
/*	$OpenBSD: cert.h,v 1.5 2000/06/08 20:49:44 niklas Exp $	*/
d53 6
d74 4
@


1.5
log
@cert.h: Merge with EOM 1.7
exchange.h: Merge with EOM 1.27
x509.h: Merge with EOM 1.10

author: angelos
Allow exchange of KeyNote credentials over IKE. Multiple credentials
may be passed in a single CERT payload. KeyNote is used if a
directory named as the local ID we use in an exchange exists in the
KeyNote directory (default: /etc/isakmpd/keynote/). Note that
asymmetric credentials are possible (use KeyNote in one direction and
X509 in the other); such authentication is envisioned to be the most
common: the clients will use KeyNote credentials to authenticate and
authorize with a server, whilst the server will just provide an X509
certificate proving its binding to the IP address or ID.

Totally asymmetric authentication (e.g., shared key in one direction,
RSA in the other) is not supported by the IKE protocol.
@
text
@d1 2
a2 2
/*	$OpenBSD: cert.h,v 1.4 1999/07/17 21:54:39 niklas Exp $	*/
/*	$EOM: cert.h,v 1.7 2000/05/19 05:47:52 angelos Exp $	*/
d6 1
d67 1
a67 1
  int (*cert_get_subject) (void *, u_int8_t **, u_int32_t *);
d80 2
a82 1
struct certreq_aca *certreq_decode (u_int16_t, u_int8_t *, u_int32_t);
@


1.4
log
@regress/rsakeygen/Makefile: Merge with EOM 1.4
regress/rsakeygen/rsakeygen.c: Merge with EOM 1.8
regress/x509/Makefile: Merge with EOM 1.6
regress/x509/x509test.c: Merge with EOM 1.6
regress/Makefile: Merge with EOM 1.8
samples/VPN-east.conf: Merge with EOM 1.6
samples/VPN-west.conf: Merge with EOM 1.6
samples/singlehost-east.conf: Merge with EOM 1.3
samples/singlehost-west.conf: Merge with EOM 1.3
sysdep/openbsd/Makefile.sysdep: Merge with EOM 1.5
x509.h: Merge with EOM 1.6
x509.c: Merge with EOM 1.17
DESIGN-NOTES: Merge with EOM 1.46
Makefile: Merge with EOM 1.55
cert.c: Merge with EOM 1.11
cert.h: Merge with EOM 1.6
exchange.c: Merge with EOM 1.109
exchange.h: Merge with EOM 1.26
ike_auth.c: Merge with EOM 1.32
ike_phase_1.c: Merge with EOM 1.7
init.c: Merge with EOM 1.16
isakmpd.conf.5: Merge with EOM 1.27
README.PKI: Merge with EOM 1.1

author: niklas
From Niels Provos, edited by me: certificate support using SSLeay
@
text
@d1 2
a2 2
/*	$OpenBSD: cert.h,v 1.3 1998/11/17 11:10:08 niklas Exp $	*/
/*	$EOM: cert.h,v 1.6 1999/07/17 20:44:09 niklas Exp $	*/
d59 1
a59 1
  int (*cert_insert) (void *);
@


1.3
log
@Add RCS Ids from the EOM repository
@
text
@d1 2
a2 2
/*	$OpenBSD: cert.h,v 1.2 1998/11/15 00:43:50 niklas Exp $	*/
/*	$EOM: cert.h,v 1.5 1998/08/21 13:47:51 provos Exp $	*/
d5 1
a5 1
 * Copyright (c) 1998 Niels Provos.  All rights reserved.
d44 9
a52 1
struct exchange;
d56 5
d64 3
a66 3
  int (*cert_obtain) (struct exchange *, void *, u_int8_t **, u_int32_t *);
  int (*cert_get_key) (u_int8_t *, u_int32_t, void *);
  int (*cert_get_subject) (u_int8_t *, u_int32_t, u_int8_t **, u_int32_t *);
d81 1
@


1.2
log
@openBSD RCS IDs
@
text
@d1 2
a2 1
/*	$OpenBSD: cert.h,v 1.1.1.1 1998/11/15 00:03:48 niklas Exp $	*/
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$Id: cert.h,v 1.5 1998/08/21 13:47:51 provos Exp $	*/
@


1.1.1.1
log
@Initial import of isakmpd, an IKE (ISAKMP/Oakley) implementation for the
OpenBSD IPSEC stack by me, Niklas Hallqvist and Niels Provos, funded by
Ericsson Radio Systems.  It is not yet complete or usable in a real scenario
but the missing pieces will soon be there.  The early commit is for people
who wants early access and who are not afraid of looking at source.
isakmpd interops with Cisco, Timestep, SSH & Pluto (Linux FreeS/WAN) so
far, so it is not that incomplete.  It is really mostly configuration that
is lacking.
@
text
@@
