head	1.24;
access;
symbols
	OPENBSD_6_1_BASE:1.24
	OPENBSD_6_0:1.24.0.4
	OPENBSD_6_0_BASE:1.24
	OPENBSD_5_9:1.24.0.2
	OPENBSD_5_9_BASE:1.24
	OPENBSD_5_8:1.23.0.12
	OPENBSD_5_8_BASE:1.23
	OPENBSD_5_7:1.23.0.4
	OPENBSD_5_7_BASE:1.23
	OPENBSD_5_6:1.23.0.8
	OPENBSD_5_6_BASE:1.23
	OPENBSD_5_5:1.23.0.6
	OPENBSD_5_5_BASE:1.23
	OPENBSD_5_4:1.23.0.2
	OPENBSD_5_4_BASE:1.23
	OPENBSD_5_3:1.22.0.18
	OPENBSD_5_3_BASE:1.22
	OPENBSD_5_2:1.22.0.16
	OPENBSD_5_2_BASE:1.22
	OPENBSD_5_1_BASE:1.22
	OPENBSD_5_1:1.22.0.14
	OPENBSD_5_0:1.22.0.12
	OPENBSD_5_0_BASE:1.22
	OPENBSD_4_9:1.22.0.10
	OPENBSD_4_9_BASE:1.22
	OPENBSD_4_8:1.22.0.8
	OPENBSD_4_8_BASE:1.22
	OPENBSD_4_7:1.22.0.4
	OPENBSD_4_7_BASE:1.22
	OPENBSD_4_6:1.22.0.6
	OPENBSD_4_6_BASE:1.22
	OPENBSD_4_5:1.22.0.2
	OPENBSD_4_5_BASE:1.22
	OPENBSD_4_4:1.21.0.10
	OPENBSD_4_4_BASE:1.21
	OPENBSD_4_3:1.21.0.8
	OPENBSD_4_3_BASE:1.21
	OPENBSD_4_2:1.21.0.6
	OPENBSD_4_2_BASE:1.21
	OPENBSD_4_1:1.21.0.4
	OPENBSD_4_1_BASE:1.21
	OPENBSD_4_0:1.21.0.2
	OPENBSD_4_0_BASE:1.21
	OPENBSD_3_9:1.20.0.4
	OPENBSD_3_9_BASE:1.20
	OPENBSD_3_8:1.20.0.2
	OPENBSD_3_8_BASE:1.20
	OPENBSD_3_7:1.18.0.2
	OPENBSD_3_7_BASE:1.18
	OPENBSD_3_6:1.17.0.2
	OPENBSD_3_6_BASE:1.17
	OPENBSD_3_5:1.13.0.4
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.12.0.2
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.10.0.2
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.8.0.4
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.5.0.6
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.4
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.2
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.4.0.2
	OPENBSD_2_5_BASE:1.4
	NIKLAS_981114:1.1.1.1
	NIKLAS:1.1.1;
locks; strict;
comment	@ * @;


1.24
date	2015.10.15.06.35.54;	author mmcc;	state Exp;
branches;
next	1.23;
commitid	SDy6tK2fkpcXK7A4;

1.23
date	2013.03.21.04.30.14;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	2008.09.06.12.01.34;	author djm;	state Exp;
branches;
next	1.21;

1.21
date	2006.06.10.20.10.02;	author hshoexer;	state Exp;
branches;
next	1.20;

1.20
date	2005.04.08.22.32.10;	author cloder;	state Exp;
branches;
next	1.19;

1.19
date	2005.04.08.18.39.12;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2005.02.27.13.12.12;	author hshoexer;	state Exp;
branches;
next	1.17;

1.17
date	2004.06.14.09.55.41;	author ho;	state Exp;
branches;
next	1.16;

1.16
date	2004.05.23.18.17.55;	author hshoexer;	state Exp;
branches;
next	1.15;

1.15
date	2004.04.15.18.39.25;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2004.03.31.10.54.46;	author ho;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.03.14.28.16;	author ho;	state Exp;
branches;
next	1.12;

1.12
date	2002.11.21.12.09.20;	author ho;	state Exp;
branches;
next	1.11;

1.11
date	2002.11.21.09.40.34;	author ho;	state Exp;
branches;
next	1.10;

1.10
date	2002.08.23.18.17.17;	author ho;	state Exp;
branches;
next	1.9;

1.9
date	2002.06.09.08.13.06;	author todd;	state Exp;
branches;
next	1.8;

1.8
date	2001.08.17.14.12.54;	author niklas;	state Exp;
branches;
next	1.7;

1.7
date	2001.06.29.20.38.15;	author angelos;	state Exp;
branches;
next	1.6;

1.6
date	2001.04.15.16.09.16;	author ho;	state Exp;
branches;
next	1.5;

1.5
date	99.04.19.20.00.24;	author niklas;	state Exp;
branches
	1.5.6.1;
next	1.4;

1.4
date	99.02.26.03.40.25;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	98.11.17.11.10.11;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	98.11.15.00.43.54;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	98.11.15.00.03.48;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.11.15.00.03.48;	author niklas;	state Exp;
branches;
next	;

1.5.6.1
date	2001.05.08.12.45.22;	author ho;	state Exp;
branches;
next	;


desc
@@


1.24
log
@A classic case for bzero() -> explicit_bzero()

ok deraadt@@
@
text
@/* $OpenBSD: hash.c,v 1.23 2013/03/21 04:30:14 deraadt Exp $	 */
/* $EOM: hash.c,v 1.10 1999/04/17 23:20:34 niklas Exp $	 */

/*
 * Copyright (c) 1998 Niels Provos.  All rights reserved.
 * Copyright (c) 1999 Niklas Hallqvist.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This code was written under funding by Ericsson Radio Systems.
 */

#include <sys/types.h>
#include <string.h>
#include <md5.h>
#include <sha1.h>
#include <sha2.h>

#include "hash.h"
#include "log.h"

void	hmac_init(struct hash *, unsigned char *, unsigned int);
void	hmac_final(unsigned char *, struct hash *);

/* Temporary hash contexts.  */
static union {
	MD5_CTX		md5ctx;
	SHA1_CTX        sha1ctx;
	SHA2_CTX	sha2ctx;
} Ctx, Ctx2;

/* Temporary hash digest.  */
static unsigned char digest[HASH_MAX];

/* Encapsulation of hash functions.  */

static struct hash hashes[] = {
    {
	HASH_MD5, 5, MD5_SIZE, (void *)&Ctx.md5ctx, digest,
	sizeof(MD5_CTX), (void *)&Ctx2.md5ctx,
	(void (*)(void *))MD5Init,
	(void (*)(void *, unsigned char *, unsigned int))MD5Update,
	(void (*)(unsigned char *, void *))MD5Final,
	hmac_init,
	hmac_final
    }, {
	HASH_SHA1, 6, SHA1_SIZE, (void *)&Ctx.sha1ctx, digest,
	sizeof(SHA1_CTX), (void *)&Ctx2.sha1ctx,
	(void (*)(void *))SHA1Init,
	(void (*)(void *, unsigned char *, unsigned int))SHA1Update,
	(void (*)(unsigned char *, void *))SHA1Final,
	hmac_init,
	hmac_final
    }, {
	HASH_SHA2_256, 7, SHA2_256_SIZE, (void *)&Ctx.sha2ctx, digest,
	sizeof(SHA2_CTX), (void *)&Ctx2.sha2ctx,
	(void (*)(void *))SHA256Init,
	(void (*)(void *, unsigned char *, unsigned int))SHA256Update,
	(void (*)(u_int8_t *, void *))SHA256Final,
	hmac_init,
	hmac_final
    }, {
	HASH_SHA2_384, 8, SHA2_384_SIZE, (void *)&Ctx.sha2ctx, digest,
	sizeof(SHA2_CTX), (void *)&Ctx2.sha2ctx,
	(void (*)(void *))SHA384Init,
	(void (*)(void *, unsigned char *, unsigned int))SHA384Update,
	(void (*)(u_int8_t *, void *))SHA384Final,
	hmac_init,
	hmac_final
    }, {
	HASH_SHA2_512, 9, SHA2_512_SIZE, (void *)&Ctx.sha2ctx, digest,
	sizeof(SHA2_CTX), (void *)&Ctx2.sha2ctx,
	(void (*)(void *))SHA512Init,
	(void (*)(void *, unsigned char *, unsigned int))SHA512Update,
	(void (*)(u_int8_t *, void *))SHA512Final,
	hmac_init,
	hmac_final
    }
};

struct hash *
hash_get(enum hashes hashtype)
{
	size_t	i;

	LOG_DBG((LOG_CRYPTO, 60, "hash_get: requested algorithm %d",
	    hashtype));

	for (i = 0; i < sizeof hashes / sizeof hashes[0]; i++)
		if (hashtype == hashes[i].type)
			return &hashes[i];

	return 0;
}

/*
 * Initial a hash for HMAC usage this requires a special init function.
 * ctx, ctx2 hold the contexts, if you want to use the hash object for
 * something else in the meantime, be sure to store the contexts somewhere.
 */

void
hmac_init(struct hash *hash, unsigned char *okey, unsigned int len)
{
	unsigned int    i, blocklen = HMAC_BLOCKLEN;
	unsigned char   key[HMAC_BLOCKLEN];

	bzero(key, blocklen);
	if (len > blocklen) {
		/* Truncate key down to blocklen */
		hash->Init(hash->ctx);
		hash->Update(hash->ctx, okey, len);
		hash->Final(key, hash->ctx);
	} else {
		memcpy(key, okey, len);
	}

	/* HMAC I and O pad computation */
	for (i = 0; i < blocklen; i++)
		key[i] ^= HMAC_IPAD_VAL;

	hash->Init(hash->ctx);
	hash->Update(hash->ctx, key, blocklen);

	for (i = 0; i < blocklen; i++)
		key[i] ^= (HMAC_IPAD_VAL ^ HMAC_OPAD_VAL);

	hash->Init(hash->ctx2);
	hash->Update(hash->ctx2, key, blocklen);

	explicit_bzero(key, blocklen);
}

/*
 * HMAC Final function
 */

void
hmac_final(unsigned char *dgst, struct hash *hash)
{
	hash->Final(dgst, hash->ctx);
	hash->Update(hash->ctx2, dgst, hash->hashsize);
	hash->Final(dgst, hash->ctx2);
}
@


1.23
log
@remove excessive includes
@
text
@d1 1
a1 1
/* $OpenBSD: hash.c,v 1.22 2008/09/06 12:01:34 djm Exp $	 */
d151 1
a151 1
	bzero(key, blocklen);
@


1.22
log
@adapt to sha2(3) API changes; ok millert@@
@
text
@d1 1
a1 1
/* $OpenBSD: hash.c,v 1.21 2006/06/10 20:10:02 hshoexer Exp $	 */
d33 1
a33 1
#include <sys/param.h>
@


1.21
log
@support sha2 for main mode hmacs and aesctr for quick mode encryption.
ok markus@@ ho@@
@
text
@d1 1
a1 1
/* $OpenBSD: hash.c,v 1.20 2005/04/08 22:32:10 cloder Exp $	 */
d49 1
a49 3
	SHA256_CTX	sha256ctx;
	SHA384_CTX	sha384ctx;
	SHA512_CTX	sha512ctx;
d75 5
a79 5
	HASH_SHA2_256, 7, SHA2_256_SIZE, (void *)&Ctx.sha256ctx, digest,
	sizeof(SHA256_CTX), (void *)&Ctx2.sha256ctx,
	(void (*)(void *))SHA256_Init,
	(void (*)(void *, unsigned char *, unsigned int))SHA256_Update,
	(void (*)(u_int8_t *, void *))SHA256_Final,
d83 5
a87 5
	HASH_SHA2_384, 8, SHA2_384_SIZE, (void *)&Ctx.sha384ctx, digest,
	sizeof(SHA384_CTX), (void *)&Ctx2.sha384ctx,
	(void (*)(void *))SHA384_Init,
	(void (*)(void *, unsigned char *, unsigned int))SHA384_Update,
	(void (*)(u_int8_t *, void *))SHA384_Final,
d91 5
a95 5
	HASH_SHA2_512, 9, SHA2_512_SIZE, (void *)&Ctx.sha512ctx, digest,
	sizeof(SHA512_CTX), (void *)&Ctx2.sha512ctx,
	(void (*)(void *))SHA512_Init,
	(void (*)(void *, unsigned char *, unsigned int))SHA512_Update,
	(void (*)(u_int8_t *, void *))SHA512_Final,
@


1.20
log
@Make deterministic randomness (only ever used for testing) a compile-time
option.  Reduces chances of somehow setting regrand when it's not supposed
to be set.  Remove "-r" option from man page.  Also xref certpatch(8) while
we are in there.  And remove some include sysdep.h where it is no longer
needed.
OK hshoexer
@
text
@d1 1
a1 1
/* $OpenBSD: hash.c,v 1.19 2005/04/08 18:39:12 deraadt Exp $	 */
d37 1
d49 3
d76 25
a100 1
    },
@


1.19
log
@we do not care about __APPLE__
@
text
@d1 1
a1 1
/* $OpenBSD: hash.c,v 1.18 2005/02/27 13:12:12 hshoexer Exp $	 */
a36 2

#include "sysdep.h"
@


1.18
log
@where possible, use bzero instead of memset

ok cloder henning
@
text
@d1 1
a1 1
/* $OpenBSD: hash.c,v 1.17 2004/06/14 09:55:41 ho Exp $	 */
a34 4
#if defined (__APPLE__)
#include <openssl/md5.h>
#include <openssl/sha.h>
#else
a36 1
#endif				/* __APPLE__ */
@


1.17
log
@KNF, style, 80c, etc. hshoexer@@ ok
@
text
@d1 1
a1 1
/* $OpenBSD: hash.c,v 1.16 2004/05/23 18:17:55 hshoexer Exp $	 */
d109 1
a109 1
	memset(key, 0, blocklen);
d132 1
a132 1
	memset(key, 0, blocklen);
@


1.16
log
@More KNF.  Mainly spaces and line-wraps, no binary change.

ok ho@@
@
text
@d1 1
a1 1
/* $OpenBSD: hash.c,v 1.15 2004/04/15 18:39:25 deraadt Exp $	 */
d87 2
a88 1
	LOG_DBG((LOG_CRYPTO, 60, "hash_get: requested algorithm %d", hashtype));
@


1.15
log
@partial move to KNF.  More to come.  This has happened because there
are a raft of source code auditors who are willing to help improve this
code only if this is done, and hey, isakmpd does need our standard
auditing process.  ok ho hshoexer
@
text
@d1 1
a1 1
/* $OpenBSD: hash.c,v 1.14 2004/03/31 10:54:46 ho Exp $	 */
d48 2
a49 2
void            hmac_init(struct hash *, unsigned char *, unsigned int);
void            hmac_final(unsigned char *, struct hash *);
d53 1
a53 1
	MD5_CTX         md5ctx;
d64 5
a68 5
	HASH_MD5, 5, MD5_SIZE, (void *) &Ctx.md5ctx, digest,
	sizeof(MD5_CTX), (void *) &Ctx2.md5ctx,
	(void (*) (void *)) MD5Init,
	(void (*) (void *, unsigned char *, unsigned int)) MD5Update,
	(void (*) (unsigned char *, void *)) MD5Final,
d72 5
a76 5
	HASH_SHA1, 6, SHA1_SIZE, (void *) &Ctx.sha1ctx, digest,
	sizeof(SHA1_CTX), (void *) &Ctx2.sha1ctx,
	(void (*) (void *)) SHA1Init,
	(void (*) (void *, unsigned char *, unsigned int)) SHA1Update,
	(void (*) (unsigned char *, void *)) SHA1Final,
d85 1
a85 1
	size_t          i;
@


1.14
log
@-Wsign-compare nits. hshoexer@@ ok.
@
text
@d1 2
a2 2
/*	$OpenBSD: hash.c,v 1.13 2003/06/03 14:28:16 ho Exp $	*/
/*	$EOM: hash.c,v 1.10 1999/04/17 23:20:34 niklas Exp $	*/
d41 1
a41 1
#endif /* __APPLE__ */
d48 2
a49 2
void hmac_init (struct hash *, unsigned char *, unsigned int);
void hmac_final (unsigned char *, struct hash *);
d53 2
a54 2
     MD5_CTX md5ctx;
     SHA1_CTX sha1ctx;
d63 17
a79 12
  { HASH_MD5, 5, MD5_SIZE, (void *)&Ctx.md5ctx, digest,
    sizeof (MD5_CTX), (void *)&Ctx2.md5ctx,
    (void (*) (void *))MD5Init,
    (void (*) (void *, unsigned char *, unsigned int))MD5Update,
    (void (*) (unsigned char *, void *))MD5Final,
    hmac_init, hmac_final },
  { HASH_SHA1, 6, SHA1_SIZE, (void *)&Ctx.sha1ctx, digest,
    sizeof (SHA1_CTX), (void *)&Ctx2.sha1ctx,
    (void (*) (void *))SHA1Init,
    (void (*) (void *, unsigned char *, unsigned int))SHA1Update,
    (void (*) (unsigned char *, void *))SHA1Final,
    hmac_init, hmac_final },
d83 1
a83 1
hash_get (enum hashes hashtype)
d85 1
a85 1
  size_t i;
d87 1
a87 1
  LOG_DBG ((LOG_CRYPTO, 60, "hash_get: requested algorithm %d", hashtype));
d89 3
a91 3
  for (i = 0; i < sizeof hashes / sizeof hashes[0]; i++)
    if (hashtype == hashes[i].type)
      return &hashes[i];
d93 1
a93 1
  return 0;
d103 1
a103 1
hmac_init (struct hash *hash, unsigned char *okey, unsigned int len)
d105 2
a106 19
  unsigned int i, blocklen = HMAC_BLOCKLEN;
  unsigned char key[HMAC_BLOCKLEN];

  memset (key, 0, blocklen);
  if (len > blocklen)
    {
      /* Truncate key down to blocklen */
      hash->Init (hash->ctx);
      hash->Update (hash->ctx, okey, len);
      hash->Final (key, hash->ctx);
    }
  else
    {
      memcpy (key, okey, len);
    }

  /* HMAC I and O pad computation */
  for (i = 0; i < blocklen; i++)
    key[i] ^= HMAC_IPAD_VAL;
d108 16
a123 2
  hash->Init (hash->ctx);
  hash->Update (hash->ctx, key, blocklen);
d125 2
a126 2
  for (i = 0; i < blocklen; i++)
    key[i] ^= (HMAC_IPAD_VAL ^ HMAC_OPAD_VAL);
d128 2
a129 2
  hash->Init (hash->ctx2);
  hash->Update (hash->ctx2, key, blocklen);
d131 1
a131 1
  memset (key, 0, blocklen);
d139 1
a139 1
hmac_final (unsigned char *dgst, struct hash *hash)
d141 3
a143 3
  hash->Final (dgst, hash->ctx);
  hash->Update (hash->ctx2, dgst, hash->hashsize);
  hash->Final (dgst, hash->ctx2);
@


1.13
log
@Remove clauses 3 and 4. With approval from Niklas Hallqvist and
Niels Provos.
@
text
@d1 1
a1 1
/*	$OpenBSD: hash.c,v 1.12 2002/11/21 12:09:20 ho Exp $	*/
d80 1
a80 1
  int i;
@


1.12
log
@-Wshadow nits.
@
text
@d1 1
a1 1
/*	$OpenBSD: hash.c,v 1.11 2002/11/21 09:40:34 ho Exp $	*/
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Ericsson Radio Systems.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.11
log
@hmac_init and prf_alloc should use unsigned lengths. Problem pointed out by Patrick Latifi.
@
text
@d1 1
a1 1
/*	$OpenBSD: hash.c,v 1.10 2002/08/23 18:17:17 ho Exp $	*/
d142 1
a142 1
hmac_final (unsigned char *digest, struct hash *hash)
d144 3
a146 3
  hash->Final (digest, hash->ctx);
  hash->Update (hash->ctx2, digest, hash->hashsize);
  hash->Final (digest, hash->ctx2);
@


1.10
log
@Initial support for MacOS X (v10.2 and later).
@
text
@d1 1
a1 1
/*	$OpenBSD: hash.c,v 1.9 2002/06/09 08:13:06 todd Exp $	*/
d53 1
a53 1
void hmac_init (struct hash *, unsigned char *, int);
d103 1
a103 1
hmac_init (struct hash *hash, unsigned char *okey, int len)
d105 1
a105 1
  int i, blocklen = HMAC_BLOCKLEN;
@


1.9
log
@rm trailing whitespace
@
text
@d1 1
a1 1
/*	$OpenBSD: hash.c,v 1.8 2001/08/17 14:12:54 niklas Exp $	*/
d40 4
d46 1
@


1.8
log
@Fix keyed HMAC where the key was longer than the blocksize
@
text
@d1 1
a1 1
/*	$OpenBSD: hash.c,v 1.7 2001/06/29 20:38:15 angelos Exp $	*/
d65 2
a66 2
    (void (*) (void *))MD5Init, 
    (void (*) (void *, unsigned char *, unsigned int))MD5Update, 
d71 2
a72 2
    (void (*) (void *))SHA1Init, 
    (void (*) (void *, unsigned char *, unsigned int))SHA1Update, 
d104 1
a104 1
  if (len > blocklen) 
d128 1
a128 1
  
@


1.7
log
@LOG_DBG in hash_get, and if sysdep_cleartext() fails bail out of
initializing socket.
@
text
@d1 1
a1 1
/*	$OpenBSD: hash.c,v 1.6 2001/04/15 16:09:16 ho Exp $	*/
d103 1
a112 1
      memset (key, 0, blocklen);
@


1.6
log
@Style.
@
text
@d1 1
a1 1
/*	$OpenBSD: hash.c,v 1.5 1999/04/19 20:00:24 niklas Exp $	*/
d46 1
d81 2
@


1.5
log
@./cookie.c: Merge with EOM 1.20
./dh.c: Merge with EOM 1.5
./hash.c: Merge with EOM 1.10
./math_group.h: Merge with EOM 1.7

Style.  alloc error reporting.  Math error propagation.  Allocate right
sizes.

1999 copyrights
@
text
@d1 1
a1 1
/*	$OpenBSD: hash.c,v 1.4 1999/02/26 03:40:25 niklas Exp $	*/
d114 1
a114 1
  for (i=0; i < blocklen; i++)
d120 1
a120 1
  for (i=0; i < blocklen; i++)
@


1.5.6.1
log
@Pull in isakmpd from 2.9 to 2.8 branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: hash.c,v 1.6 2001/04/15 16:09:16 ho Exp $	*/
d114 1
a114 1
  for (i = 0; i < blocklen; i++)
d120 1
a120 1
  for (i = 0; i < blocklen; i++)
@


1.4
log
@Merge from the Ericsson repository
| revision 1.8
| date: 1999/02/25 11:38:59;  author: niklas;  state: Exp;  lines: +3 -1
| include sysdep.h everywhere
| ----------------------------
@
text
@d1 2
a2 2
/*	$OpenBSD: hash.c,v 1.3 1998/11/17 11:10:11 niklas Exp $	*/
/*	$EOM: hash.c,v 1.8 1999/02/25 11:38:59 niklas Exp $	*/
d6 1
d85 1
a85 1
  return NULL;
@


1.3
log
@Add RCS Ids from the EOM repository
@
text
@d1 2
a2 2
/*	$OpenBSD: hash.c,v 1.2 1998/11/15 00:43:54 niklas Exp $	*/
/*	$EOM: hash.c,v 1.7 1998/07/25 22:04:35 niklas Exp $	*/
d41 2
@


1.2
log
@openBSD RCS IDs
@
text
@d1 2
a2 1
/*	$OpenBSD: hash.c,v 1.1.1.1 1998/11/15 00:03:48 niklas Exp $	*/
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$Id: hash.c,v 1.7 1998/07/25 22:04:35 niklas Exp $	*/
@


1.1.1.1
log
@Initial import of isakmpd, an IKE (ISAKMP/Oakley) implementation for the
OpenBSD IPSEC stack by me, Niklas Hallqvist and Niels Provos, funded by
Ericsson Radio Systems.  It is not yet complete or usable in a real scenario
but the missing pieces will soon be there.  The early commit is for people
who wants early access and who are not afraid of looking at source.
isakmpd interops with Cisco, Timestep, SSH & Pluto (Linux FreeS/WAN) so
far, so it is not that incomplete.  It is really mostly configuration that
is lacking.
@
text
@@
