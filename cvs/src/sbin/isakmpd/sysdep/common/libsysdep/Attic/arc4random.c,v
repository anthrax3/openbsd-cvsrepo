head	1.8;
access;
symbols
	OPENBSD_3_7:1.7.0.2
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.5.0.2
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.4.0.12
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.10
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.8
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.6
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_9_BASE:1.3;
locks; strict;
comment	@ * @;


1.8
date	2005.04.08.15.52.12;	author deraadt;	state dead;
branches;
next	1.7;

1.7
date	2005.02.10.14.43.14;	author ho;	state Exp;
branches;
next	1.6;

1.6
date	2004.10.08.15.18.26;	author hshoexer;	state Exp;
branches;
next	1.5;

1.5
date	2004.08.10.09.47.59;	author ho;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.05.05.05.37;	author pvalchev;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.26.12.10.56;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	2001.01.26.12.04.19;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	2001.01.26.11.34.00;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.8
log
@if someone wants a portable, create a -p project.  clutter stops quality
@
text
@/*	$OpenBSD: arc4random.c,v 1.7 2005/02/10 14:43:14 ho Exp $	*/

/*
 * Arc4 random number generator for OpenBSD.
 * Copyright 1996 David Mazieres <dm@@lcs.mit.edu>.
 *
 * Modification and redistribution in source and binary forms is
 * permitted provided that due credit is given to the author and the
 * OpenBSD project by leaving this copyright notice intact.
 */

/*
 * This code is derived from section 17.1 of Applied Cryptography,
 * second edition, which describes a stream cipher allegedly
 * compatible with RSA Labs "RC4" cipher (the actual description of
 * which is a trade secret).  The same algorithm is used as a stream
 * cipher called "arcfour" in Tatu Ylonen's ssh package.
 *
 * Here the stream cipher has been modified always to include the time
 * when initializing the state.  That makes it impossible to
 * regenerate the same random sequence twice, so this can't be used
 * for encryption, but will generate good random numbers.
 *
 * RC4 is a registered trademark of RSA Laboratories.
 */

#include <fcntl.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/time.h>

#ifdef __GNUC__
#define inline __inline
#else				/* !__GNUC__ */
#define inline
#endif				/* !__GNUC__ */

struct arc4_stream {
	u_int8_t i;
	u_int8_t j;
	u_int8_t s[256];
};

int     rs_initialized;
static struct arc4_stream rs;

static inline u_int8_t arc4_getbyte(struct arc4_stream *);

static inline void
arc4_init(struct arc4_stream *as)
{
	int     n;

	for (n = 0; n < 256; n++)
		as->s[n] = n;
	as->i = 0;
	as->j = 0;
}

static inline void
arc4_addrandom(struct arc4_stream *as, u_char *dat, int datlen)
{
	int     n;
	u_int8_t si;

	as->i--;
	for (n = 0; n < 256; n++) {
		as->i = (as->i + 1);
		si = as->s[as->i];
		as->j = (as->j + si + dat[n % datlen]);
		as->s[as->i] = as->s[as->j];
		as->s[as->j] = si;
	}
	as->j = as->i;
}

static void
arc4_stir(struct arc4_stream *as)
{
	int     fd, i;
	struct {
		struct timeval tv;
		u_int8_t rnd[128 - sizeof(struct timeval)];
	}       rdat;

	gettimeofday(&rdat.tv, NULL);
	fd = open("/dev/arandom", O_RDONLY);
	if (fd < 0)
		fd = open("/dev/random", O_RDONLY);
	if (fd >= 0) {
		read(fd, rdat.rnd, sizeof(rdat.rnd));
		close(fd);
	}
	/* fd < 0?  Ah, what the heck. We'll just take whatever was on the
	 * stack... */

	arc4_addrandom(as, (void *)&rdat, sizeof(rdat));

	/*
	 * Discard early keystream, as per recommendations in:
	 * http://www.wisdom.weizmann.ac.il/~itsik/RC4/Papers/Rc4_ksa.ps
	 */
	for (i = 0; i < 256; i++)
		(void)arc4_getbyte(as);
}

static inline u_int8_t
arc4_getbyte(struct arc4_stream *as)
{
	u_int8_t si, sj;

	as->i = (as->i + 1);
	si = as->s[as->i];
	as->j = (as->j + si);
	sj = as->s[as->j];
	as->s[as->i] = sj;
	as->s[as->j] = si;
	return (as->s[(si + sj) & 0xff]);
}

static inline u_int32_t
arc4_getword(struct arc4_stream *as)
{
	u_int32_t val;
	val = arc4_getbyte(as) << 24;
	val |= arc4_getbyte(as) << 16;
	val |= arc4_getbyte(as) << 8;
	val |= arc4_getbyte(as);
	return val;
}

void
arc4random_stir(void)
{
	if (!rs_initialized) {
		arc4_init(&rs);
		rs_initialized = 1;
	}
	arc4_stir(&rs);
}

void
arc4random_addrandom(u_char *dat, int datlen)
{
	if (!rs_initialized)
		arc4random_stir();
	arc4_addrandom(&rs, dat, datlen);
}

u_int32_t
arc4random(void)
{
	if (!rs_initialized)
		arc4random_stir();
	return arc4_getword(&rs);
}

#if 0
/*-------- Test code for i386 --------*/
#include <stdio.h>
#include <machine/pctr.h>
int
main(int argc, char **argv)
{
	const int iter = 1000000;
	int     i;
	pctrval v;

	v = rdtsc();
	for (i = 0; i < iter; i++)
		arc4random();
	v = rdtsc() - v;
	v /= iter;

	printf("%qd cycles\n", v);
}
#endif
@


1.7
log
@Make it compile.
@
text
@d1 1
a1 1
/*	$OpenBSD: arc4random.c,v 1.6 2004/10/08 15:18:26 hshoexer Exp $	*/
@


1.6
log
@pull in some changes from libc arc4random (only relevant for non-OpenBSD
systems): ansify, discard first 256 output bytes, make key schedule more arc4
stream ciper like.

ok djm ho
@
text
@d1 1
a1 1
/*	$OpenBSD: arc4random.c,v 1.5 2004/08/10 09:47:59 ho Exp $	*/
d81 1
a81 1
	int     fd;
@


1.5
log
@If opening /dev/arandom fails, try /dev/random. Suggested by Benjamin Pineau.
@
text
@d1 1
a1 1
/*	$OpenBSD: arc4random.c,v 1.4 2001/06/05 05:05:37 pvalchev Exp $	*/
d48 2
d51 1
a51 2
arc4_init(as)
	struct arc4_stream *as;
d62 1
a62 4
arc4_addrandom(as, dat, datlen)
	struct arc4_stream *as;
	u_char *dat;
	int     datlen;
d75 1
d79 1
a79 2
arc4_stir(as)
	struct arc4_stream *as;
d98 8
a105 1
	arc4_addrandom(as, (void *) &rdat, sizeof(rdat));
d109 1
a109 2
arc4_getbyte(as)
	struct arc4_stream *as;
d123 1
a123 2
arc4_getword(as)
	struct arc4_stream *as;
d134 1
a134 1
arc4random_stir()
d144 1
a144 3
arc4random_addrandom(dat, datlen)
	u_char *dat;
	int     datlen;
d152 1
a152 1
arc4random()
@


1.4
log
@License clarification from David Mazieres, ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: arc4random.c,v 1.3 2001/01/26 12:10:56 niklas Exp $	*/
d91 2
@


1.3
log
@Pedantic style police
@
text
@d1 1
a1 1
/*	$OpenBSD: arc4random.c,v 1.2 2001/01/26 12:04:19 niklas Exp $	*/
d9 1
a9 2
 * OpenBSD project (for instance by leaving this copyright notice
 * intact).
@


1.2
log
@Pedantic style police
@
text
@d1 1
a1 1
/*	$OpenBSD: arc4random.c,v 1.1 2001/01/26 11:34:00 niklas Exp $	*/
d96 2
a97 4
	/*
	 * fd < 0?  Ah, what the heck. We'll just take whatever was on the
	 * stack...
	 */
@


1.1
log
@Move in foreign OS support.  The OpenBSD repository is now the official
isakmpd home.
@
text
@d1 1
a1 1
/*	$OpenBSD: arc4random.c,v 1.2 2000/03/30 10:10:55 ho Exp $	*/
d96 4
a99 2
	/* fd < 0?  Ah, what the heck. We'll just take whatever was on the
	 * stack... */
@

