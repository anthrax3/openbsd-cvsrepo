head	1.13;
access;
symbols
	OPENBSD_3_7:1.12.0.4
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.12.0.2
	OPENBSD_3_6_BASE:1.12
	OPENBSD_3_5:1.11.0.4
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.10.0.6
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.4
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.9.0.2
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9:1.1.0.2
	OPENBSD_2_9_BASE:1.1;
locks; strict;
comment	@ * @;


1.13
date	2005.04.08.15.47.55;	author deraadt;	state dead;
branches;
next	1.12;

1.12
date	2004.08.10.15.59.10;	author ho;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.03.14.53.11;	author ho;	state Exp;
branches;
next	1.10;

1.10
date	2001.10.26.12.23.45;	author ho;	state Exp;
branches;
next	1.9;

1.9
date	2001.08.23.14.59.10;	author markus;	state Exp;
branches;
next	1.8;

1.8
date	2001.08.12.12.03.02;	author heko;	state Exp;
branches;
next	1.7;

1.7
date	2001.07.06.09.35.57;	author ho;	state Exp;
branches;
next	1.6;

1.6
date	2001.07.03.14.54.15;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.29.22.12.55;	author ho;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.29.19.08.12;	author ho;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.29.18.45.27;	author ho;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.05.00.51.46;	author angelos;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.23.16.14.35;	author markus;	state Exp;
branches;
next	;


desc
@@


1.13
log
@if someone wants a portable, create a -p project.  clutter stops quality
@
text
@/*	$OpenBSD: sysdep.c,v 1.12 2004/08/10 15:59:10 ho Exp $	*/

/*
 * Copyright (c) 1998, 1999 Niklas Hallqvist.  All rights reserved.
 * Copyright (c) 2000 H\xe5kan Olsson.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <stdlib.h>
#include <string.h>

#include "sysdep.h"

#include "util.h"

#ifdef NEED_SYSDEP_APP
#include "app.h"
#include "conf.h"
#include "ipsec.h"

#ifdef USE_PF_KEY_V2
#include "pf_key_v2.h"
#define KEY_API(x) pf_key_v2_##x
#endif

#endif /* NEED_SYSDEP_APP */
#include "log.h"

extern char *__progname;

/*
 * An as strong as possible random number generator, reverting to a
 * deterministic pseudo-random one if regrand is set.
 */
u_int32_t
sysdep_random ()
{
  return random();
}

/* Return the basename of the command used to invoke us.  */
char *
sysdep_progname ()
{
  return __progname;
}

/* Return the length of the sockaddr struct.  */
u_int8_t
sysdep_sa_len (struct sockaddr *sa)
{
  return sa->sa_len;
}

/* As regress/ use this file I protect the sysdep_app_* stuff like this.  */
#ifdef NEED_SYSDEP_APP
/*
 * Prepare the application we negotiate SAs for (i.e. the IPsec stack)
 * for communication.  We return a file descriptor useable to select(2) on.
 */
int
sysdep_app_open ()
{
  return KEY_API(open) ();
}

/*
 * When select(2) has noticed our application needs attendance, this is what
 * gets called.  FD is the file descriptor causing the alarm.
 */
void
sysdep_app_handler (int fd)
{
  KEY_API (handler) (fd);
}

/* Check that the connection named NAME is active, or else make it active.  */
void
sysdep_connection_check (char *name)
{
  KEY_API (connection_check) (name);
}

/*
 * Generate a SPI for protocol PROTO and the source/destination pair given by
 * SRC, SRCLEN, DST & DSTLEN.  Stash the SPI size in SZ.
 */
u_int8_t *
sysdep_ipsec_get_spi (size_t *sz, u_int8_t proto, struct sockaddr *src,
		      struct sockaddr *dst, u_int32_t seq)
{
  if (app_none)
    {
      *sz = IPSEC_SPI_SIZE;
      /* XXX should be random instead I think.  */
      return strdup ("\x12\x34\x56\x78");
    }
  return KEY_API (get_spi) (sz, proto, src, dst, seq);
}

struct sa_kinfo *
sysdep_ipsec_get_kernel_sa(u_int8_t *spi, size_t spi_sz, u_int8_t proto,
    struct sockaddr *dst)
{
	if (app_none)
		return 0;
	/* XXX return KEY_API(get_kernel_sa)(spi, spi_sz, proto, dst); */
	return 0;
}

/* Force communication on socket FD to go in the clear.  */
int
sysdep_cleartext (int fd, int af)
{
  char *buf;
  char *policy[] = { "in bypass", "out bypass", NULL };
  char **p;
  int ipp;
  int opt;
  char *msgstr;

  if (app_none)
    return 0;

  switch (af)
    {
    case AF_INET:
      ipp = IPPROTO_IP;
      opt = IP_IPSEC_POLICY;
      msgstr = "";
      break;
    case AF_INET6:
      ipp = IPPROTO_IPV6;
      opt = IPV6_IPSEC_POLICY;
      msgstr = "V6";
      break;
    default:
      log_print ("sysdep_cleartext: unsupported protocol family %d", af);
      return -1;
    }

  /*
   * Need to bypass system security policy, so I can send and
   * receive key management datagrams in the clear.
   */

  for (p = policy; p && *p; p++)
    {
      buf = ipsec_set_policy (*p, strlen(*p));
      if (buf == NULL)
	{
	  log_error ("sysdep_cleartext: %s: %s", *p, ipsec_strerror());
	  return -1;
	}

      if (setsockopt(fd, ipp, opt, buf, ipsec_get_policylen(buf)) < 0)
	{
	  log_error ("sysdep_cleartext: "
		     "setsockopt (%d, IPPROTO_IP%s, IP%s_IPSEC_POLICY, ...) "
		     "failed", fd, msgstr, msgstr);
	  return -1;
	}
      free(buf);
    }

  return 0;
}

int
sysdep_ipsec_delete_spi (struct sa *sa, struct proto *proto, int incoming)
{
  if (app_none)
    return 0;
  return KEY_API (delete_spi) (sa, proto, incoming);
}

int
sysdep_ipsec_enable_sa (struct sa *sa, struct sa *isakmp_sa)
{
  if (app_none)
    return 0;
  return KEY_API (enable_sa) (sa, isakmp_sa);
}

int
sysdep_ipsec_group_spis (struct sa *sa, struct proto *proto1,
			 struct proto *proto2, int incoming)
{
  if (app_none)
    return 0;
  return KEY_API (group_spis) (sa, proto1, proto2, incoming);
}

int
sysdep_ipsec_set_spi (struct sa *sa, struct proto *proto, int incoming,
		      struct sa *isakmp_sa)
{
  if (app_none)
    return 0;
  return KEY_API (set_spi) (sa, proto, incoming, isakmp_sa);
}
#endif
@


1.12
log
@Better implementation of the Dead Peer Detection protocol, RFC 3706.
hshoexer@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: sysdep.c,v 1.11 2003/06/03 14:53:11 ho Exp $	*/
@


1.11
log
@Remove clauses 3 and 4. Approved by markus@@ and niklas@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: sysdep.c,v 1.10 2001/10/26 12:23:45 ho Exp $	*/
d122 10
@


1.10
log
@Add sysdep_sa_len function.
@
text
@d1 1
a1 1
/*	$OpenBSD: sysdep.c,v 1.9 2001/08/23 14:59:10 markus Exp $	*/
a14 2
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.9
log
@sync w/ netbsd
@
text
@d1 1
a1 1
/*	$OpenBSD: sysdep.c,v 1.10 2001/08/13 13:23:15 itojun Exp $	*/
d71 7
@


1.8
log
@#(endif|else) foo is incorrect, make it #endif /* foo */
deraadt@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: sysdep.c,v 1.7 2001/07/06 09:35:57 ho Exp $	*/
d127 2
d137 2
d142 2
d164 1
a164 2
      if (setsockopt(fd, ipp, IP_IPSEC_POLICY, buf,
		     ipsec_get_policylen(buf)) < 0)
d167 2
a168 2
		     "setsockopt (%d, IPPROTO_IP, IP_IPSEC_POLICY, ...) failed",
		     fd);
@


1.7
log
@Remove support for PF_ENCAP (deprecated since OpenBSD2.5).
@
text
@d1 1
a1 1
/*	$OpenBSD: sysdep.c,v 1.6 2001/07/03 14:54:15 markus Exp $	*/
d51 1
a51 1
#endif NEED_SYSDEP_APP
@


1.6
log
@sync set_spi with netbsd (fixes typo).
@
text
@d1 1
a1 1
/*	$OpenBSD: sysdep.c,v 1.7 2001/06/29 22:12:55 ho Exp $	*/
a48 4
#else
#include <net/encap.h>
#include "pf_encap.h"
#define KEY_API(x) pf_encap_##x
@


1.5
log
@Reflect setsockopt changes. May need further mods for KAME IPsecs.
@
text
@d1 1
a1 1
/*	$OpenBSD: sysdep.c,v 1.4 2001/06/29 19:08:12 ho Exp $	*/
d207 1
a207 1
  return KEY_API (set_spi) (sa, proto, incoming, sa);
@


1.4
log
@Get rid of redundant lengths in get_spi API.
@
text
@d1 1
a1 1
/*	$OpenBSD: sysdep.c,v 1.3 2001/06/29 18:45:27 ho Exp $	*/
d125 1
a125 1
sysdep_cleartext (int fd)
d130 1
d135 13
d162 2
a163 2
      if (setsockopt(fd, IPPROTO_IP, IP_IPSEC_POLICY, buf,
		       ipsec_get_policylen(buf)) < 0)
@


1.3
log
@More sa_len usage.
@
text
@d1 1
a1 1
/*	$OpenBSD: sysdep.c,v 1.2 2001/05/05 00:51:46 angelos Exp $	*/
d112 1
a112 2
		      int srclen, struct sockaddr *dst, int dstlen,
                      u_int32_t seq)
d120 1
a120 2
  return KEY_API (get_spi) (sz, proto, src, src->sa_len, dst, dst->sa_len,
			    seq);
@


1.2
log
@Adhere to the new set_spi prototype.
@
text
@d1 1
a1 1
/*	$OpenBSD: sysdep.c,v 1.1 2001/03/23 16:14:35 markus Exp $	*/
d121 2
a122 1
  return KEY_API (get_spi) (sz, proto, src, srclen, dst, dstlen, seq);
@


1.1
log
@bsdi support, ok niklas@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sysdep.c,v 1.3 2001/02/24 03:59:58 angelos Exp $	*/
d189 2
a190 1
sysdep_ipsec_set_spi (struct sa *sa, struct proto *proto, int incoming)
d194 1
a194 1
  return KEY_API (set_spi) (sa, proto, incoming);
@

