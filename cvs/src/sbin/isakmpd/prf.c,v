head	1.16;
access;
symbols
	OPENBSD_6_0:1.16.0.14
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.10
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.16.0.12
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.4
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.8
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.6
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.2
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.15.0.32
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.30
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.28
	OPENBSD_5_0:1.15.0.26
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.24
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.22
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.18
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.20
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.16
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.14
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.12
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.10
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.8
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.6
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.15.0.4
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.15.0.2
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.14.0.4
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.14.0.2
	OPENBSD_3_6_BASE:1.14
	OPENBSD_3_5:1.12.0.4
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.12.0.2
	OPENBSD_3_4_BASE:1.12
	OPENBSD_3_3:1.11.0.2
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.10.0.2
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.7.0.12
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.7.0.10
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.7.0.8
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_8:1.7.0.6
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.4
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.7.0.2
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.5.0.2
	OPENBSD_2_5_BASE:1.5
	NIKLAS_981114:1.1.1.1
	NIKLAS:1.1.1;
locks; strict;
comment	@ * @;


1.16
date	2013.03.21.04.30.14;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2005.04.08.22.32.10;	author cloder;	state Exp;
branches;
next	1.14;

1.14
date	2004.05.23.18.17.56;	author hshoexer;	state Exp;
branches;
next	1.13;

1.13
date	2004.04.15.18.39.26;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.03.14.28.16;	author ho;	state Exp;
branches;
next	1.11;

1.11
date	2002.11.21.09.40.34;	author ho;	state Exp;
branches;
next	1.10;

1.10
date	2002.09.11.09.50.44;	author ho;	state Exp;
branches;
next	1.9;

1.9
date	2002.06.06.02.15.27;	author ho;	state Exp;
branches;
next	1.8;

1.8
date	2002.06.01.07.44.22;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	99.05.02.19.16.41;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	99.04.19.19.54.54;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	99.03.31.20.30.55;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	99.02.26.03.49.27;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	98.11.17.11.10.19;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	98.11.15.00.44.02;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	98.11.15.00.03.49;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.11.15.00.03.49;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.16
log
@remove excessive includes
@
text
@/* $OpenBSD: prf.c,v 1.15 2005/04/08 22:32:10 cloder Exp $	 */
/* $EOM: prf.c,v 1.7 1999/05/02 12:50:29 niklas Exp $	 */

/*
 * Copyright (c) 1998 Niels Provos.  All rights reserved.
 * Copyright (c) 1999 Niklas Hallqvist.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This code was written under funding by Ericsson Radio Systems.
 */

#include <stdlib.h>
#include <string.h>

#include "hash.h"
#include "log.h"
#include "prf.h"

void	prf_hash_init(struct prf_hash_ctx *);
void	prf_hash_update(struct prf_hash_ctx *, unsigned char *, unsigned int);
void	prf_hash_final(unsigned char *, struct prf_hash_ctx *);

/* PRF behaves likes a hash */

void
prf_hash_init(struct prf_hash_ctx *ctx)
{
	memcpy(ctx->hash->ctx, ctx->ctx, ctx->hash->ctxsize);
	memcpy(ctx->hash->ctx2, ctx->ctx2, ctx->hash->ctxsize);
}

void
prf_hash_update(struct prf_hash_ctx *ctx, unsigned char *data,
    unsigned int len)
{
	ctx->hash->Update(ctx->hash->ctx, data, len);
}

void
prf_hash_final(unsigned char *digest, struct prf_hash_ctx *ctx)
{
	ctx->hash->HMACFinal(digest, ctx->hash);
}

/*
 * Obtain a Pseudo-Random Function for us. At the moment this is
 * the HMAC version of a hash. See RFC-2104 for reference.
 */
struct prf *
prf_alloc(enum prfs type, int subtype, unsigned char *shared,
    unsigned int sharedsize)
{
	struct hash    *hash;
	struct prf     *prf;
	struct prf_hash_ctx *prfctx;

	switch (type) {
	case PRF_HMAC:
		hash = hash_get(subtype);
		if (!hash) {
			log_print("prf_alloc: unknown hash type %d", subtype);
			return 0;
		}
		break;
	default:
		log_print("prf_alloc: unknown PRF type %d", type);
		return 0;
	}

	prf = malloc(sizeof *prf);
	if (!prf) {
		log_error("prf_alloc: malloc (%lu) failed",
		    (unsigned long)sizeof *prf);
		return 0;
	}
	if (type == PRF_HMAC) {
		/* Obtain needed memory.  */
		prfctx = malloc(sizeof *prfctx);
		if (!prfctx) {
			log_error("prf_alloc: malloc (%lu) failed",
			    (unsigned long)sizeof *prfctx);
			goto cleanprf;
		}
		prf->prfctx = prfctx;

		prfctx->ctx = malloc(hash->ctxsize);
		if (!prfctx->ctx) {
			log_error("prf_alloc: malloc (%d) failed",
			    hash->ctxsize);
			goto cleanprfctx;
		}
		prfctx->ctx2 = malloc(hash->ctxsize);
		if (!prfctx->ctx2) {
			log_error("prf_alloc: malloc (%d) failed",
			    hash->ctxsize);
			free(prfctx->ctx);
			goto cleanprfctx;
		}
		prf->type = PRF_HMAC;
		prf->blocksize = hash->hashsize;
		prfctx->hash = hash;

		/* Use the correct function pointers.  */
		prf->Init = (void(*)(void *))prf_hash_init;
		prf->Update = (void(*)(void *, unsigned char *,
		    unsigned int))prf_hash_update;
		prf->Final = (void(*)(unsigned char *, void *))prf_hash_final;

		/* Init HMAC contexts.  */
		hash->HMACInit(hash, shared, sharedsize);

		/* Save contexts.  */
		memcpy(prfctx->ctx, hash->ctx, hash->ctxsize);
		memcpy(prfctx->ctx2, hash->ctx2, hash->ctxsize);
	}
	return prf;

cleanprfctx:
	free(prf->prfctx);
cleanprf:
	free(prf);
	return 0;
}

/* Deallocate the PRF pointed to by PRF.  */
void
prf_free(struct prf *prf)
{
	struct prf_hash_ctx *prfctx = prf->prfctx;

	if (prf->type == PRF_HMAC) {
		free(prfctx->ctx2);
		free(prfctx->ctx);
	}
	free(prf->prfctx);
	free(prf);
}
@


1.15
log
@Make deterministic randomness (only ever used for testing) a compile-time
option.  Reduces chances of somehow setting regrand when it's not supposed
to be set.  Remove "-r" option from man page.  Also xref certpatch(8) while
we are in there.  And remove some include sysdep.h where it is no longer
needed.
OK hshoexer
@
text
@d1 1
a1 1
/* $OpenBSD: prf.c,v 1.14 2004/05/23 18:17:56 hshoexer Exp $	 */
a32 1
#include <sys/param.h>
@


1.14
log
@More KNF.  Mainly spaces and line-wraps, no binary change.

ok ho@@
@
text
@d1 1
a1 1
/* $OpenBSD: prf.c,v 1.13 2004/04/15 18:39:26 deraadt Exp $	 */
a35 2

#include "sysdep.h"
@


1.13
log
@partial move to KNF.  More to come.  This has happened because there
are a raft of source code auditors who are willing to help improve this
code only if this is done, and hey, isakmpd does need our standard
auditing process.  ok ho hshoexer
@
text
@d1 1
a1 1
/* $OpenBSD: prf.c,v 1.12 2003/06/03 14:28:16 ho Exp $	 */
d43 3
a45 3
void            prf_hash_init(struct prf_hash_ctx *);
void            prf_hash_update(struct prf_hash_ctx *, unsigned char *, unsigned int);
void            prf_hash_final(unsigned char *, struct prf_hash_ctx *);
d97 1
a97 1
		    (unsigned long) sizeof *prf);
d105 1
a105 1
			    (unsigned long) sizeof *prfctx);
d112 2
a113 1
			log_error("prf_alloc: malloc (%d) failed", hash->ctxsize);
d118 2
a119 1
			log_error("prf_alloc: malloc (%d) failed", hash->ctxsize);
d128 4
a131 4
		prf->Init = (void (*) (void *)) prf_hash_init;
		prf->Update = (void (*) (void *, unsigned char *,
		    unsigned int)) prf_hash_update;
		prf->Final = (void (*) (unsigned char *, void *)) prf_hash_final;
@


1.12
log
@Remove clauses 3 and 4. With approval from Niklas Hallqvist and
Niels Provos.
@
text
@d1 2
a2 2
/*	$OpenBSD: prf.c,v 1.11 2002/11/21 09:40:34 ho Exp $	*/
/*	$EOM: prf.c,v 1.7 1999/05/02 12:50:29 niklas Exp $	*/
d43 3
a45 3
void prf_hash_init (struct prf_hash_ctx *);
void prf_hash_update (struct prf_hash_ctx *, unsigned char *, unsigned int);
void prf_hash_final (unsigned char *, struct prf_hash_ctx *);
d50 1
a50 1
prf_hash_init (struct prf_hash_ctx *ctx)
d52 2
a53 2
  memcpy (ctx->hash->ctx, ctx->ctx, ctx->hash->ctxsize);
  memcpy (ctx->hash->ctx2, ctx->ctx2, ctx->hash->ctxsize);
d57 2
a58 2
prf_hash_update (struct prf_hash_ctx *ctx, unsigned char *data,
		 unsigned int len)
d60 1
a60 1
  ctx->hash->Update (ctx->hash->ctx, data, len);
d64 1
a64 1
prf_hash_final (unsigned char *digest, struct prf_hash_ctx *ctx)
d66 1
a66 1
  ctx->hash->HMACFinal (digest, ctx->hash);
d74 2
a75 2
prf_alloc (enum prfs type, int subtype, unsigned char *shared,
	   unsigned int sharedsize)
d77 15
a91 12
  struct hash *hash;
  struct prf *prf;
  struct prf_hash_ctx *prfctx;

  switch (type)
    {
    case PRF_HMAC:
      hash = hash_get (subtype);
      if (!hash)
	{
	  log_print ("prf_alloc: unknown hash type %d", subtype);
	  return 0;
d93 6
a98 22
      break;
    default:
      log_print ("prf_alloc: unknown PRF type %d", type);
      return 0;
    }

  prf = malloc (sizeof *prf);
  if (!prf)
    {
      log_error ("prf_alloc: malloc (%lu) failed", (unsigned long)sizeof *prf);
      return 0;
    }

  if (type == PRF_HMAC)
    {
      /* Obtain needed memory.  */
      prfctx = malloc (sizeof *prfctx);
      if (!prfctx)
	{
	  log_error ("prf_alloc: malloc (%lu) failed",
		     (unsigned long)sizeof *prfctx);
	  goto cleanprf;
d100 37
a136 7
      prf->prfctx = prfctx;

      prfctx->ctx = malloc (hash->ctxsize);
      if (!prfctx->ctx)
	{
	  log_error ("prf_alloc: malloc (%d) failed", hash->ctxsize);
	  goto cleanprfctx;
d138 1
d140 5
a144 32
      prfctx->ctx2 = malloc (hash->ctxsize);
      if (!prfctx->ctx2)
	{
	  log_error ("prf_alloc: malloc (%d) failed", hash->ctxsize);
	  free (prfctx->ctx);
	  goto cleanprfctx;
	}
      prf->type = PRF_HMAC;
      prf->blocksize = hash->hashsize;
      prfctx->hash = hash;

      /* Use the correct function pointers.  */
      prf->Init = (void (*) (void *))prf_hash_init;
      prf->Update
	= (void (*) (void *, unsigned char *, unsigned int))prf_hash_update;
      prf->Final = (void (*) (unsigned char *, void *))prf_hash_final;

      /* Init HMAC contexts.  */
      hash->HMACInit (hash, shared, sharedsize);

      /* Save contexts.  */
      memcpy (prfctx->ctx, hash->ctx, hash->ctxsize);
      memcpy (prfctx->ctx2, hash->ctx2, hash->ctxsize);
    }

  return prf;

 cleanprfctx:
  free (prf->prfctx);
 cleanprf:
  free (prf);
  return 0;
d149 1
a149 1
prf_free (struct prf *prf)
d151 1
a151 1
  struct prf_hash_ctx *prfctx = prf->prfctx;
d153 6
a158 7
  if (prf->type == PRF_HMAC)
    {
      free (prfctx->ctx2);
      free (prfctx->ctx);
    }
  free (prf->prfctx);
  free (prf);
@


1.11
log
@hmac_init and prf_alloc should use unsigned lengths. Problem pointed out by Patrick Latifi.
@
text
@d1 1
a1 1
/*	$OpenBSD: prf.c,v 1.10 2002/09/11 09:50:44 ho Exp $	*/
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Ericsson Radio Systems.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.10
log
@signed vs unsigned, some void * arithmetic, from -pedantic. niklas@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: prf.c,v 1.9 2002/06/06 02:15:27 ho Exp $	*/
d79 2
a80 1
prf_alloc (enum prfs type, int subtype, unsigned char *shared, int sharedsize)
@


1.9
log
@Style, and a few additional format/type mods.
@
text
@d1 1
a1 1
/*	$OpenBSD: prf.c,v 1.8 2002/06/01 07:44:22 deraadt Exp $	*/
d79 1
a79 1
prf_alloc (enum prfs type, int subtype, char *shared, int sharedsize)
@


1.8
log
@size_t must be cast to (unsigned long) and printed using %lu
@
text
@d1 1
a1 1
/*	$OpenBSD: prf.c,v 1.7 1999/05/02 19:16:41 niklas Exp $	*/
d113 2
a114 1
	  log_error ("prf_alloc: malloc (%lu) failed", (unsigned long)sizeof *prfctx);
@


1.7
log
@ike_phase_1.c: Merge with EOM 1.4
prf.c: Merge with EOM 1.7

author: niklas
Remove bogus XXXes, add allocation error reporting.
@
text
@d1 1
a1 1
/*	$OpenBSD: prf.c,v 1.6 1999/04/19 19:54:54 niklas Exp $	*/
d103 1
a103 1
      log_error ("prf_alloc: malloc (%d) failed", sizeof *prf);
d113 1
a113 1
	  log_error ("prf_alloc: malloc (%d) failed", sizeof *prfctx);
@


1.6
log
@./app.c: Merge with EOM 1.5
./gmp_util.c: Merge with EOM 1.3
./asn_useful.c: Merge with EOM 1.11
./attribute.c: Merge with EOM 1.9
./constants.c: Merge with EOM 1.7
./doi.h: Merge with EOM 1.25
./doi.c: Merge with EOM 1.4
./field.c: Merge with EOM 1.9
./init.c: Merge with EOM 1.13
./isakmp_doi.c: Merge with EOM 1.35
./prf.c: Merge with EOM 1.6
./util.c: Merge with EOM 1.14
./app.h: Merge with EOM 1.4
./conf.h: Merge with EOM 1.8
./ipsec.h: Merge with EOM 1.34
./ipsec_doi.h: Merge with EOM 1.10
./pkcs.h: Merge with EOM 1.8
./sysdep.h: Merge with EOM 1.15

1999 copyrights
@
text
@d1 2
a2 2
/*	$OpenBSD: prf.c,v 1.5 1999/03/31 20:30:55 niklas Exp $	*/
/*	$EOM: prf.c,v 1.6 1999/04/02 00:58:06 niklas Exp $	*/
d90 4
a93 1
	return 0;
@


1.5
log
@Merge with EOM 1.5
Stylistic fixes
@
text
@d1 2
a2 2
/*	$OpenBSD: prf.c,v 1.4 1999/02/26 03:49:27 niklas Exp $	*/
/*	$EOM: prf.c,v 1.5 1999/03/31 20:17:38 niklas Exp $	*/
d5 2
a6 1
 * Copyright (c) 1998, 1999 Niels Provos.  All rights reserved.
@


1.4
log
@Merge from the Ericsson repository
| revision 1.4
| date: 1999/02/25 11:39:19;  author: niklas;  state: Exp;  lines: +3 -1
| include sysdep.h everywhere
| ----------------------------
@
text
@d1 2
a2 2
/*	$OpenBSD: prf.c,v 1.3 1998/11/17 11:10:19 niklas Exp $	*/
/*	$EOM: prf.c,v 1.4 1999/02/25 11:39:19 niklas Exp $	*/
d5 1
a5 1
 * Copyright (c) 1998 Niels Provos.  All rights reserved.
a76 1

d82 1
d88 2
a89 2
      if (hash == NULL)
	return NULL;
d92 2
a93 2
      log_print ("Unkown PRF type %d in prf_alloc()", type);
      return NULL;
d96 2
a97 1
  if ((prf = malloc (sizeof (struct prf))) == NULL)
d99 2
a100 2
      log_print ("Out of memory for struct prf in prf_alloc()");
      return NULL;
d105 3
a107 5
      struct prf_hash_ctx *prfctx;

      /* Obtain needed memory */
      prfctx = malloc (sizeof (struct prf_hash_ctx));
      if (prfctx == NULL)
d109 1
a109 1
	  log_print ("Out of memory for struct prf_hash_ctx in prf_alloc()");
d115 1
a115 1
      if (prfctx->ctx == NULL)
d117 1
a117 1
	  log_print ("Out of memory for ctx in prf_alloc()");
d122 1
a122 1
      if (prfctx->ctx2 == NULL)
d124 1
a124 1
	  log_print ("Out of memory for ctx2 in prf_alloc()");
d132 2
a133 2
      /* Use the correct function pointers */
      prf->Init = (void (*) (void *)) prf_hash_init;
d135 2
a136 2
	= (void (*) (void *, unsigned char *, unsigned int)) prf_hash_update;
      prf->Final = (void (*) (unsigned char *, void *)) prf_hash_final;
d138 1
a138 1
      /* Init HMAC contexts */
d141 1
a141 1
      /* Save contexts */
d152 1
a152 1
  return NULL;
d155 1
a155 1

d159 2
a162 1
      struct prf_hash_ctx *prfctx = prf->prfctx;
@


1.3
log
@Add RCS Ids from the EOM repository
@
text
@d1 2
a2 2
/*	$OpenBSD: prf.c,v 1.2 1998/11/15 00:44:02 niklas Exp $	*/
/*	$EOM: prf.c,v 1.3 1998/07/23 09:00:47 niklas Exp $	*/
d40 2
@


1.2
log
@openBSD RCS IDs
@
text
@d1 2
a2 1
/*	$OpenBSD: prf.c,v 1.1.1.1 1998/11/15 00:03:49 niklas Exp $	*/
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$Id: prf.c,v 1.3 1998/07/23 09:00:47 niklas Exp $	*/
@


1.1.1.1
log
@Initial import of isakmpd, an IKE (ISAKMP/Oakley) implementation for the
OpenBSD IPSEC stack by me, Niklas Hallqvist and Niels Provos, funded by
Ericsson Radio Systems.  It is not yet complete or usable in a real scenario
but the missing pieces will soon be there.  The early commit is for people
who wants early access and who are not afraid of looking at source.
isakmpd interops with Cisco, Timestep, SSH & Pluto (Linux FreeS/WAN) so
far, so it is not that incomplete.  It is really mostly configuration that
is lacking.
@
text
@@
