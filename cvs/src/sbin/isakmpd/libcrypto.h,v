head	1.18;
access;
symbols
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.18.0.10
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.6
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.18.0.8
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.2
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.18.0.4
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.17.0.38
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.17.0.34
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.17.0.32
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.17.0.30
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.28
	OPENBSD_5_0:1.17.0.26
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.17.0.24
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.17.0.22
	OPENBSD_4_8_BASE:1.17
	OPENBSD_4_7:1.17.0.18
	OPENBSD_4_7_BASE:1.17
	OPENBSD_4_6:1.17.0.20
	OPENBSD_4_6_BASE:1.17
	OPENBSD_4_5:1.17.0.16
	OPENBSD_4_5_BASE:1.17
	OPENBSD_4_4:1.17.0.14
	OPENBSD_4_4_BASE:1.17
	OPENBSD_4_3:1.17.0.12
	OPENBSD_4_3_BASE:1.17
	OPENBSD_4_2:1.17.0.10
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.17.0.8
	OPENBSD_4_1_BASE:1.17
	OPENBSD_4_0:1.17.0.6
	OPENBSD_4_0_BASE:1.17
	OPENBSD_3_9:1.17.0.4
	OPENBSD_3_9_BASE:1.17
	OPENBSD_3_8:1.17.0.2
	OPENBSD_3_8_BASE:1.17
	OPENBSD_3_7:1.16.0.4
	OPENBSD_3_7_BASE:1.16
	OPENBSD_3_6:1.16.0.2
	OPENBSD_3_6_BASE:1.16
	OPENBSD_3_5:1.15.0.4
	OPENBSD_3_5_BASE:1.15
	OPENBSD_3_4:1.15.0.2
	OPENBSD_3_4_BASE:1.15
	OPENBSD_3_3:1.14.0.4
	OPENBSD_3_3_BASE:1.14
	OPENBSD_3_2:1.14.0.2
	OPENBSD_3_2_BASE:1.14
	OPENBSD_3_1:1.12.0.2
	OPENBSD_3_1_BASE:1.12
	OPENBSD_3_0:1.11.0.2
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9:1.9.0.2
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_8:1.8.0.2
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.7.0.2
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2;
locks; strict;
comment	@ * @;


1.18
date	2014.07.11.10.01.00;	author jsg;	state Exp;
branches;
next	1.17;
commitid	CDZQUiAa7YzgbVPs;

1.17
date	2005.04.05.20.46.20;	author cloder;	state Exp;
branches;
next	1.16;

1.16
date	2004.04.15.18.39.26;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2003.06.04.07.31.17;	author ho;	state Exp;
branches;
next	1.14;

1.14
date	2002.06.10.18.08.58;	author ho;	state Exp;
branches;
next	1.13;

1.13
date	2002.06.09.08.13.06;	author todd;	state Exp;
branches;
next	1.12;

1.12
date	2002.03.05.00.10.26;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2001.07.13.14.13.39;	author ho;	state Exp;
branches;
next	1.10;

1.10
date	2001.07.05.07.45.52;	author angelos;	state Exp;
branches;
next	1.9;

1.9
date	2001.01.27.15.39.55;	author ho;	state Exp;
branches;
next	1.8;

1.8
date	2000.10.07.06.59.16;	author niklas;	state Exp;
branches
	1.8.2.1;
next	1.7;

1.7
date	2000.04.07.22.06.20;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	2000.03.08.08.42.48;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	2000.02.07.01.32.54;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	2000.02.01.02.46.18;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	2000.01.31.08.19.13;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	99.10.01.14.09.45;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	99.08.28.11.54.55;	author niklas;	state Exp;
branches;
next	;

1.8.2.1
date	2001.05.08.12.45.24;	author ho;	state Exp;
branches;
next	;


desc
@@


1.18
log
@add additional includes required to build with -DOPENSSL_NO_DEPRECATED
@
text
@/* $OpenBSD: libcrypto.h,v 1.17 2005/04/05 20:46:20 cloder Exp $	 */
/* $EOM: libcrypto.h,v 1.16 2000/09/28 12:53:27 niklas Exp $	 */

/*
 * Copyright (c) 1999, 2000 Niklas Hallqvist.  All rights reserved.
 * Copyright (c) 1999, 2000 Angelos D. Keromytis.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This code was written under funding by Ericsson Radio Systems.
 */

#ifndef _LIBCRYPTO_H_
#define _LIBCRYPTO_H_

#include <stdio.h>

/* XXX I want #include <ssl/cryptall.h> but we appear to not install meth.h  */
#include <openssl/ssl.h>
#include <openssl/bio.h>
#include <openssl/md5.h>
#include <openssl/pem.h>
#include <openssl/rsa.h>
#include <openssl/x509_vfy.h>
#include <openssl/x509.h>

extern void     libcrypto_init(void);

#endif				/* _LIBCRYPTO_H_ */
@


1.17
log
@Always compile X509 support. Almost everyone uses it.  Makes the code
much easier to read and to maintain.
OK and testing by hshoexer@@, more testing by me
@
text
@d1 1
a1 1
/* $OpenBSD: libcrypto.h,v 1.16 2004/04/15 18:39:26 deraadt Exp $	 */
d43 1
@


1.16
log
@partial move to KNF.  More to come.  This has happened because there
are a raft of source code auditors who are willing to help improve this
code only if this is done, and hey, isakmpd does need our standard
auditing process.  ok ho hshoexer
@
text
@d1 1
a1 1
/* $OpenBSD: libcrypto.h,v 1.15 2003/06/04 07:31:17 ho Exp $	 */
a35 2
#ifdef USE_X509

a44 2

#endif				/* USE_X509 */
@


1.15
log
@Remove the rest of clauses 3 and 4. Approved by Niklas Hallqvist, Angelos
D. Keromytis and Niels Provos.
@
text
@d1 2
a2 2
/*	$OpenBSD: libcrypto.h,v 1.14 2002/06/10 18:08:58 ho Exp $	*/
/*	$EOM: libcrypto.h,v 1.16 2000/09/28 12:53:27 niklas Exp $	*/
d48 1
a48 1
#endif /* USE_X509 */
d50 1
a50 1
extern void libcrypto_init (void);
d52 1
a52 1
#endif /* _LIBCRYPTO_H_ */
@


1.14
log
@The dlopen() stuff goes away.
@
text
@d1 1
a1 1
/*	$OpenBSD: libcrypto.h,v 1.13 2002/06/09 08:13:06 todd Exp $	*/
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Ericsson Radio Systems.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.13
log
@rm trailing whitespace
@
text
@d1 1
a1 1
/*	$OpenBSD: libcrypto.h,v 1.12 2002/03/05 00:10:26 deraadt Exp $	*/
d53 1
a53 133
extern void *libcrypto;

#if defined (USE_LIBCRYPTO)
#if defined (HAVE_DLOPEN)
#define LC(sym, args) (libcrypto ? lc_ ## sym args : sym args)
#else
#define LC(sym, args) sym args
#endif
#elif defined (HAVE_DLOPEN)
#define LC(sym, args) lc_ ## sym args
#else
#define LC(sym, args) !!libcrypto called but no USE_LIBCRYPTO nor HAVE_DLOPEN!!
#endif

#ifdef HAVE_DLOPEN

/*
 * These prototypes matches SSLeay version 0.9.0b or OpenSSL 0.9.4, if you
 * try to load a different version than that, you are on your own.
 */
extern char *(*lc_ASN1_d2i_bio) (char *(*) (), char *(*) (), BIO *bp,
				 unsigned char **);
extern char *(*lc_ASN1_dup) (int (*) (), char *(*) (), char *);
extern long (*lc_BIO_ctrl) (BIO *bp, int, long, char *);
extern int (*lc_BIO_free) (BIO *a);
extern BIO *(*lc_BIO_new) (BIO_METHOD *type);
extern int (*lc_BIO_write) (BIO *, char *, int);
extern BIO_METHOD *(*lc_BIO_s_file) (void);
extern BIO_METHOD *(*lc_BIO_s_mem) (void);
extern BIGNUM *(*lc_BN_bin2bn) (const unsigned char *, int, BIGNUM *);
extern int (*lc_BN_num_bits) (const BIGNUM *);
extern int (*lc_BN_print_fp) (FILE *, BIGNUM *);
extern char *(*lc_PEM_ASN1_read_bio) (char *(*) (), char *, BIO *, char **,
				      int (*) ());
extern void (*lc_RSA_free) (RSA *);
extern RSA *(*lc_RSA_new) (void);
extern RSA *(*lc_RSA_generate_key) (int, unsigned long,
				    void (*) (int, int, char *), char *);
extern int (*lc_RSA_private_encrypt) (int, unsigned char *, unsigned char *,
				       RSA *, int);
extern int (*lc_RSA_public_decrypt) (int, unsigned char *, unsigned char *,
				     RSA *, int);
extern int (*lc_RSA_size) (RSA *);
#if OPENSSL_VERSION_NUMBER >= 0x00905100L
extern void (*lc_OpenSSL_add_all_algorithms) (void);
#else
extern void (*lc_SSLeay_add_all_algorithms) (void);
#endif
extern int (*lc_X509_NAME_cmp) (X509_NAME *, X509_NAME *);
extern void (*lc_X509_OBJECT_free_contents) (X509_OBJECT *);
extern void (*lc_X509_STORE_CTX_cleanup) (X509_STORE_CTX *);
#if SSLEAY_VERSION_NUMBER >= 0x00904100L
extern void (*lc_X509_STORE_CTX_init) (X509_STORE_CTX *, X509_STORE *, X509 *,
				       STACK_OF (X509) *);
#else
extern void (*lc_X509_STORE_CTX_init) (X509_STORE_CTX *, X509_STORE *, X509 *,
				       STACK *);
#endif
extern int (*lc_X509_STORE_add_cert) (X509_STORE *, X509 *);
extern void (*lc_X509_STORE_free) (X509_STORE *);
extern X509_STORE *(*lc_X509_STORE_new) (void);
extern X509 *(*lc_X509_dup) (X509 *);
#if SSLEAY_VERSION_NUMBER >= 0x00904100L
extern X509 *(*lc_X509_find_by_subject) (STACK_OF (X509) *, X509_NAME *);
#else
extern X509 *(*lc_X509_find_by_subject) (STACK *, X509_NAME *);
#endif
extern int (*lc_X509_STORE_get_by_subject) (X509_STORE_CTX *, int,
					    X509_NAME *, X509_OBJECT *);
extern void (*lc_X509_free) (X509 *);
extern X509_EXTENSION *(*lc_X509_get_ext) (X509 *, int);
extern int (*lc_X509_get_ext_by_NID) (X509 *, int, int);
extern X509_NAME *(*lc_X509_get_issuer_name) (X509 *);
extern EVP_PKEY *(*lc_X509_get_pubkey) (X509 *);
extern X509_NAME *(*lc_X509_get_subject_name) (X509 *);
extern X509 *(*lc_X509_new) (void);
extern int (*lc_X509_verify) (X509 *, EVP_PKEY *);
extern char *(*lc_X509_NAME_oneline) (X509_NAME *, char *, int);
extern int (*lc_X509_verify_cert) (X509_STORE_CTX *);
extern char *(*lc_X509_verify_cert_error_string) (int);
extern RSA *(*lc_d2i_RSAPrivateKey) (RSA **, unsigned char **, long);
extern RSA *(*lc_d2i_RSAPublicKey) (RSA **, unsigned char **, long);
extern X509 *(*lc_d2i_X509) (X509 **, unsigned char **, long);
extern int (*lc_i2d_RSAPublicKey) (RSA *, unsigned char **);
extern int (*lc_i2d_RSAPrivateKey) (RSA *, unsigned char **);
extern int (*lc_i2d_X509) (X509 *, unsigned char **);
extern int (*lc_i2d_X509_NAME) (X509_NAME *, unsigned char **);
extern X509_NAME * (*lc_d2i_X509_NAME) (X509_NAME **, unsigned char **, int);
#if SSLEAY_VERSION_NUMBER >= 0x00904100L
extern void (*lc_sk_X509_free) (STACK_OF (X509) *);
extern STACK_OF (X509) *(*lc_sk_X509_new_null) (void);
#else
extern void (*lc_sk_free) (STACK *);
extern STACK *(*lc_sk_new) (int (*) ());
#endif

#define lc_BIO_read_filename(b, name) \
  lc_BIO_ctrl (b, BIO_C_SET_FILENAME, BIO_CLOSE | BIO_FP_READ, name)

#if SSLEAY_VERSION_NUMBER >= 0x00904100L
#define	lc_PEM_read_bio_RSAPrivateKey(bp, x, cb, u) \
  (RSA *)lc_PEM_ASN1_read_bio ((char *(*) ())lc_d2i_RSAPrivateKey, \
			       PEM_STRING_RSA, bp, (char **)x, cb)
#define	lc_PEM_read_bio_X509(bp, x, cb, u) \
  (X509 *)lc_PEM_ASN1_read_bio ((char *(*) ())lc_d2i_X509, PEM_STRING_X509, \
				bp, (char **)x, cb)
#else
#define	lc_PEM_read_bio_RSAPrivateKey(bp, x, cb) \
  (RSA *)lc_PEM_ASN1_read_bio ((char *(*) ())lc_d2i_RSAPrivateKey, \
			       PEM_STRING_RSA, bp, (char **)x, cb)
#define	lc_PEM_read_bio_X509(bp, x, cb) \
  (X509 *)lc_PEM_ASN1_read_bio ((char *(*) ())lc_d2i_X509, PEM_STRING_X509, \
				bp, (char **)x, cb)
#endif

#define lc_RSAPublicKey_dup(rsa) \
  (RSA *)lc_ASN1_dup ((int (*) ())lc_i2d_RSAPublicKey, \
		      (char *(*) ())lc_d2i_RSAPublicKey, (char *)rsa)

#define lc_X509_name_cmp(a, b) lc_X509_NAME_cmp ((a), (b))

#define lc_d2i_X509_bio(bp, x509) \
  (X509 *)lc_ASN1_d2i_bio ((char *(*) ())lc_X509_new, \
			   (char *(*) ())lc_d2i_X509, (bp), \
			   (unsigned char **)(x509))

#if SSLEAY_VERSION_NUMBER < 0x00904100L
#define lc_sk_new_null() lc_sk_new (NULL)
#endif

#endif

#endif
@


1.12
log
@need md5.h for prototypes
@
text
@d1 1
a1 1
/*	$OpenBSD: libcrypto.h,v 1.11 2001/07/13 14:13:39 ho Exp $	*/
d69 1
a69 1
/* 
@


1.11
log
@Add lc_X509_verify_cert_error_string().
@
text
@d1 1
a1 1
/*	$OpenBSD: libcrypto.h,v 1.10 2001/07/05 07:45:52 angelos Exp $	*/
d48 1
@


1.10
log
@Add d2i_X509_NAME
@
text
@d1 1
a1 1
/*	$OpenBSD: libcrypto.h,v 1.9 2001/01/27 15:39:55 ho Exp $	*/
d131 1
@


1.9
log
@Call OpenSSL functions with LC (). Various style nits.
@
text
@d1 1
a1 1
/*	$OpenBSD: libcrypto.h,v 1.8 2000/10/07 06:59:16 niklas Exp $	*/
d138 1
@


1.8
log
@Merge with EOM 1.16

author: niklas
Multiple subject name matching, makes certificate interop with PGPnet at least
partly working.  Added some error checking.

author: ho
Nowadays we can use #include <openssl/...> instead of <ssl/...>
@
text
@d1 1
a1 1
/*	$OpenBSD: libcrypto.h,v 1.7 2000/04/07 22:06:20 niklas Exp $	*/
d81 2
d87 1
@


1.8.2.1
log
@Pull in isakmpd from 2.9 to 2.8 branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: libcrypto.h,v 1.9 2001/01/27 15:39:55 ho Exp $	*/
a80 2
extern BIGNUM *(*lc_BN_bin2bn) (const unsigned char *, int, BIGNUM *);
extern int (*lc_BN_num_bits) (const BIGNUM *);
a84 1
extern RSA *(*lc_RSA_new) (void);
@


1.7
log
@libcrypto.c: Merge with EOM 1.13
libcrypto.h: Merge with EOM 1.14

author: ho
Name change for 0.9.5; {SSLeay,OpenSSL}_add_all_algorithms.

author: ho
Missing #ifdef USE_X509 added
@
text
@d1 2
a2 2
/*	$OpenBSD: libcrypto.h,v 1.6 2000/03/08 08:42:48 niklas Exp $	*/
/*	$EOM: libcrypto.h,v 1.14 2000/03/31 15:29:03 ho Exp $	*/
d5 1
a5 1
 * Copyright (c) 1999 Niklas Hallqvist.  All rights reserved.
a44 7
#ifdef KAME
#  include <openssl/ssl.h>
#  include <openssl/bio.h>
#  include <openssl/pem.h>
#  include <openssl/x509_vfy.h>
#  include <openssl/x509.h>
#else
d46 5
a50 6
#  include <ssl/ssl.h>
#  include <ssl/bio.h>
#  include <ssl/pem.h>
#  include <ssl/x509_vfy.h>
#  include <ssl/x509.h>
#endif /* KAME */
d134 1
@


1.6
log
@cert.c: Merge with EOM 1.15
libcrypto.h: Merge with EOM 1.12

author: ho
KAME and ssl includes
@
text
@d1 2
a2 2
/*	$OpenBSD: libcrypto.h,v 1.5 2000/02/07 01:32:54 niklas Exp $	*/
/*	$EOM: libcrypto.h,v 1.12 2000/03/07 23:37:54 ho Exp $	*/
d41 2
d100 3
d104 1
d182 2
@


1.5
log
@ike_quick_mode.c: Merge with EOM 1.111
libcrypto.c: Merge with EOM 1.11
libcrypto.h: Merge with EOM 1.11
x509.c: Merge with EOM 1.33

author: angelos
Add Canonical Names as policy targets (so they can be specified in the
Licensees field), with the "CN:..." format.
@
text
@d1 2
a2 2
/*	$OpenBSD: libcrypto.h,v 1.4 2000/02/01 02:46:18 niklas Exp $	*/
/*	$EOM: libcrypto.h,v 1.11 2000/02/07 01:30:36 angelos Exp $	*/
d42 8
d51 6
a56 5
#include <ssl/ssl.h>
#include <ssl/bio.h>
#include <ssl/pem.h>
#include <ssl/x509_vfy.h>
#include <ssl/x509.h>
@


1.4
log
@apps/certpatch/certpatch.8: Merge with EOM 1.4
apps/certpatch/certpatch.c: Merge with EOM 1.6
exchange.c: Merge with EOM 1.114
ike_quick_mode.c: Merge with EOM 1.110
ike_phase_1.c: Merge with EOM 1.16
ike_auth.c: Merge with EOM 1.41
ike_aggressive.c: Merge with EOM 1.4
libcrypto.c: Merge with EOM 1.10
libcrypto.h: Merge with EOM 1.10
isakmpd.8: Merge with EOM 1.19
isakmpd.c: Merge with EOM 1.42
ipsec.h: Merge with EOM 1.40
init.c: Merge with EOM 1.22
message.c: Merge with EOM 1.143
message.h: Merge with EOM 1.49
sa.c: Merge with EOM 1.98
sa.h: Merge with EOM 1.54
policy.c: Merge with EOM 1.14
pf_key_v2.c: Merge with EOM 1.36
x509.c: Merge with EOM 1.32
x509.h: Merge with EOM 1.9
udp.c: Merge with EOM 1.46

author: niklas
Angelos copyrights
@
text
@d1 2
a2 2
/*	$OpenBSD: libcrypto.h,v 1.3 2000/01/31 08:19:13 niklas Exp $	*/
/*	$EOM: libcrypto.h,v 1.10 2000/01/31 22:33:46 niklas Exp $	*/
d119 1
@


1.3
log
@libcrypto.c: Merge with EOM 1.9
libcrypto.h: Merge with EOM 1.9

author: angelos
Make x509_cert_init() able to re-initialize.

author: angelos
Add prototypes for a few more X509 SSL calls.
@
text
@d1 2
a2 2
/*	$OpenBSD: libcrypto.h,v 1.2 1999/10/01 14:09:45 niklas Exp $	*/
/*	$EOM: libcrypto.h,v 1.9 2000/01/31 05:50:59 angelos Exp $	*/
d6 1
@


1.2
log
@Merge with EOM 1.7

author: niklas
OpenSSL 0.9.4 support

author: angelos
blah

author: angelos
Oopsie...correction by Bob Beck on my previous patch.

author: angelos
lc_PEM_read_bio_RSAPrivateKey should be defined with the correct
number of arguments, depending on the SSLeay/OpenSSL version.
@
text
@d1 2
a2 2
/*	$OpenBSD: libcrypto.h,v 1.1 1999/08/28 11:54:55 niklas Exp $	*/
/*	$EOM: libcrypto.h,v 1.7 1999/09/30 13:40:38 niklas Exp $	*/
d90 1
d100 1
d108 2
@


1.1
log
@Sync with EOM, dynamic linking support
@
text
@d1 2
a2 2
/*	$OpenBSD: libcrypto.h,v 1.3 1999/08/18 00:44:56 angelos Exp $	*/
/*	$EOM: libcrypto.h,v 1.3 1999/08/18 00:44:56 angelos Exp $	*/
d42 1
d64 3
a66 3
/*
 * These prototypes matches SSLeay version 0.9.0b, if you try to load
 * a different version than that, you are on your own.
d91 4
d97 1
d101 3
d105 1
d121 7
d132 8
a142 1

d146 5
d159 4
a162 3
#define lc_RSAPublicKey_dup(rsa) \
  (RSA *)lc_ASN1_dup ((int (*) ())lc_i2d_RSAPublicKey, \
		      (char *(*) ())lc_d2i_RSAPublicKey, (char *)rsa)
@

