head	1.17;
access;
symbols
	OPENBSD_6_2:1.17.0.6
	OPENBSD_6_2_BASE:1.17
	OPENBSD_6_1:1.17.0.4
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.16.0.12
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.8
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.16.0.10
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.6
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.4
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.15.0.34
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.32
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.30
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.28
	OPENBSD_5_0:1.15.0.26
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.24
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.22
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.18
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.20
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.16
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.14
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.12
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.10
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.8
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.6
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.15.0.4
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.15.0.2
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.14.0.4
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.14.0.2
	OPENBSD_3_6_BASE:1.14
	OPENBSD_3_5:1.12.0.4
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.12.0.2
	OPENBSD_3_4_BASE:1.12
	OPENBSD_3_3:1.11.0.4
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.2
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.9.0.2
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9:1.6.0.8
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.6.0.6
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.4
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.6.0.2
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.4.0.2
	OPENBSD_2_5_BASE:1.4
	NIKLAS_981114:1.1.1.1
	NIKLAS:1.1.1;
locks; strict;
comment	@ * @;


1.17
date	2017.02.03.08.23.46;	author guenther;	state Exp;
branches;
next	1.16;
commitid	RkgZAc0srXet0WqL;

1.16
date	2014.01.23.01.04.28;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2005.04.08.23.15.25;	author hshoexer;	state Exp;
branches;
next	1.14;

1.14
date	2004.05.14.08.42.56;	author hshoexer;	state Exp;
branches;
next	1.13;

1.13
date	2004.04.15.18.39.25;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.03.14.28.16;	author ho;	state Exp;
branches;
next	1.11;

1.11
date	2002.08.23.18.01.33;	author ho;	state Exp;
branches;
next	1.10;

1.10
date	2001.10.26.13.29.26;	author ho;	state Exp;
branches;
next	1.9;

1.9
date	2001.06.29.18.52.16;	author ho;	state Exp;
branches;
next	1.8;

1.8
date	2001.06.29.18.12.07;	author ho;	state Exp;
branches;
next	1.7;

1.7
date	2001.06.25.00.00.44;	author ho;	state Exp;
branches;
next	1.6;

1.6
date	99.08.05.22.40.37;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	99.04.19.20.00.24;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	99.02.26.03.35.23;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	98.11.17.11.10.08;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	98.11.15.00.43.51;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	98.11.15.00.03.48;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.11.15.00.03.48;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Stop assuming that in_{addr,port}_t are typedefed in <sys/types.h> and
instead pull in <netinet/in.h> or <arpa/inet.h> when those are needed.

ok florian@@ beck@@ millert@@
@
text
@/* $OpenBSD: cookie.c,v 1.16 2014/01/23 01:04:28 deraadt Exp $	 */
/* $EOM: cookie.c,v 1.21 1999/08/05 15:00:04 niklas Exp $	 */

/*
 * Copyright (c) 1998, 1999 Niklas Hallqvist.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This code was written under funding by Ericsson Radio Systems.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <stdlib.h>
#include <string.h>

#include "cookie.h"
#include "exchange.h"
#include "hash.h"
#include "transport.h"
#include "util.h"

#define COOKIE_SECRET_SIZE	16

/*
 * Generate an anti-clogging token (a protection against an attacker forcing
 * us to keep state for a flood of connection requests) a.k.a. a cookie
 * at BUF, LEN bytes long.  The cookie will be generated by hashing of
 * information found, among otherplaces, in transport T and exchange
 * EXCHANGE.
 */
void
cookie_gen(struct transport *t, struct exchange *exchange, u_int8_t *buf,
    size_t len)
{
	struct hash    *hash = hash_get(HASH_SHA1);
	u_int8_t        tmpsecret[COOKIE_SECRET_SIZE];
	struct sockaddr *name;

	hash->Init(hash->ctx);
	(*t->vtbl->get_dst)(t, &name);
	hash->Update(hash->ctx, (u_int8_t *)name, SA_LEN(name));
	(*t->vtbl->get_src)(t, &name);
	hash->Update(hash->ctx, (u_int8_t *)name, SA_LEN(name));
	if (exchange->initiator == 0)
		hash->Update(hash->ctx, exchange->cookies +
		    ISAKMP_HDR_ICOOKIE_OFF, ISAKMP_HDR_ICOOKIE_LEN);
	arc4random_buf(tmpsecret, COOKIE_SECRET_SIZE);
	hash->Update(hash->ctx, tmpsecret, COOKIE_SECRET_SIZE);
	hash->Final(hash->digest, hash->ctx);
	memcpy(buf, hash->digest, len);
}
@


1.16
log
@Remove a mid-layer which acts like arc4random isn't fairly standard.
ok mikeb
@
text
@d1 1
a1 1
/* $OpenBSD: cookie.c,v 1.15 2005/04/08 23:15:25 hshoexer Exp $	 */
d34 1
@


1.15
log
@get rid of sysdep_sa_len

ok cloder@@
@
text
@d1 1
a1 1
/* $OpenBSD: cookie.c,v 1.14 2004/05/14 08:42:56 hshoexer Exp $	 */
d68 1
a68 1
	getrandom(tmpsecret, COOKIE_SECRET_SIZE);
@


1.14
log
@Some more KNF, no binary change.

ok ho@@
@
text
@d1 1
a1 1
/* $OpenBSD: cookie.c,v 1.13 2004/04/15 18:39:25 deraadt Exp $	 */
a36 2
#include "sysdep.h"

d62 1
a62 1
	hash->Update(hash->ctx, (u_int8_t *)name, sysdep_sa_len(name));
d64 1
a64 1
	hash->Update(hash->ctx, (u_int8_t *)name, sysdep_sa_len(name));
@


1.13
log
@partial move to KNF.  More to come.  This has happened because there
are a raft of source code auditors who are willing to help improve this
code only if this is done, and hey, isakmpd does need our standard
auditing process.  ok ho hshoexer
@
text
@d1 1
a1 1
/* $OpenBSD: cookie.c,v 1.12 2003/06/03 14:28:16 ho Exp $	 */
d63 4
a66 4
	(*t->vtbl->get_dst) (t, &name);
	hash->Update(hash->ctx, (u_int8_t *) name, sysdep_sa_len(name));
	(*t->vtbl->get_src) (t, &name);
	hash->Update(hash->ctx, (u_int8_t *) name, sysdep_sa_len(name));
d68 2
a69 2
		hash->Update(hash->ctx, exchange->cookies + ISAKMP_HDR_ICOOKIE_OFF,
		    ISAKMP_HDR_ICOOKIE_LEN);
@


1.12
log
@Remove clauses 3 and 4. With approval from Niklas Hallqvist and
Niels Provos.
@
text
@d1 2
a2 2
/*	$OpenBSD: cookie.c,v 1.11 2002/08/23 18:01:33 ho Exp $	*/
/*	$EOM: cookie.c,v 1.21 1999/08/05 15:00:04 niklas Exp $	*/
d55 2
a56 2
cookie_gen (struct transport *t, struct exchange *exchange, u_int8_t *buf,
	    size_t len)
d58 16
a73 16
  struct hash* hash = hash_get (HASH_SHA1);
  struct sockaddr *name;
  u_int8_t tmpsecret[COOKIE_SECRET_SIZE];

  hash->Init (hash->ctx);
  (*t->vtbl->get_dst) (t, &name);
  hash->Update (hash->ctx, (u_int8_t *)name, sysdep_sa_len (name));
  (*t->vtbl->get_src) (t, &name);
  hash->Update (hash->ctx, (u_int8_t *)name, sysdep_sa_len (name));
  if (exchange->initiator == 0)
    hash->Update (hash->ctx, exchange->cookies + ISAKMP_HDR_ICOOKIE_OFF,
		  ISAKMP_HDR_ICOOKIE_LEN);
  getrandom (tmpsecret, COOKIE_SECRET_SIZE);
  hash->Update (hash->ctx, tmpsecret, COOKIE_SECRET_SIZE);
  hash->Final (hash->digest, hash->ctx);
  memcpy (buf, hash->digest, len);
@


1.11
log
@Small cleanup.
@
text
@d1 1
a1 1
/*	$OpenBSD: cookie.c,v 1.10 2001/10/26 13:29:26 ho Exp $	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Ericsson Radio Systems.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.10
log
@Change to use sysdep_sa_len() function.
@
text
@d1 1
a1 1
/*	$OpenBSD: cookie.c,v 1.9 2001/06/29 18:52:16 ho Exp $	*/
a38 1
#include <sha1.h>
@


1.9
log
@Change get_src/get_dst API as we get the length with sa_len.
@
text
@d1 1
a1 1
/*	$OpenBSD: cookie.c,v 1.8 2001/06/29 18:12:07 ho Exp $	*/
d70 1
a70 1
  hash->Update (hash->ctx, (u_int8_t *)name, name->sa_len);
d72 1
a72 1
  hash->Update (hash->ctx, (u_int8_t *)name, name->sa_len);
@


1.8
log
@A few more direct sa_len usages.
@
text
@d1 1
a1 1
/*	$OpenBSD: cookie.c,v 1.7 2001/06/25 00:00:44 ho Exp $	*/
a65 1
  int name_len;
d69 1
a69 1
  (*t->vtbl->get_dst) (t, &name, &name_len);
d71 1
a71 1
  (*t->vtbl->get_src) (t, &name, &name_len);
@


1.7
log
@Handle responder cookies same as initiator cookies.
@
text
@d1 1
a1 1
/*	$OpenBSD: cookie.c,v 1.6 1999/08/05 22:40:37 niklas Exp $	*/
d71 1
a71 1
  hash->Update (hash->ctx, (u_int8_t *)name, name_len);
d73 1
a73 1
  hash->Update (hash->ctx, (u_int8_t *)name, name_len);
@


1.6
log
@regress/rsakeygen/Makefile: Merge with EOM 1.5
sysdep/openbsd/sysdep.c: Merge with EOM 1.8
cookie.c: Merge with EOM 1.21
util.c: Merge with EOM 1.15
util.h: Merge with EOM 1.7

author: niklas
Move regrand var to util.c, and get the decl from util.h, do not update the
cookie secret if in deterministic mode.
@
text
@d1 1
a1 1
/*	$OpenBSD: cookie.c,v 1.5 1999/04/19 20:00:24 niklas Exp $	*/
a47 2
#include "log.h"
#include "timer.h"
a50 1
#define COOKIE_EVENT_FREQ	360
a52 4
void cookie_secret_reset (void);

u_int8_t cookie_secret[COOKIE_SECRET_SIZE];

d67 1
d74 5
a78 14
  if (exchange->initiator)
    {
      u_int8_t tmpsecret[COOKIE_SECRET_SIZE];

      getrandom (tmpsecret, COOKIE_SECRET_SIZE);
      hash->Update (hash->ctx, tmpsecret, COOKIE_SECRET_SIZE);
    }
  else
    {
      hash->Update (hash->ctx, exchange->cookies + ISAKMP_HDR_ICOOKIE_OFF,
		    ISAKMP_HDR_ICOOKIE_LEN);
      hash->Update (hash->ctx, cookie_secret, COOKIE_SECRET_SIZE);
    }

a80 37
}

/*
 * Reset the secret which is used for the responder cookie.
 * As responder we do not want to keep state in the cookie
 * exchange, which means when the cookie secret is reset,
 * our cookie response has timed out.
 */
void
cookie_secret_reset (void)
{
  getrandom (cookie_secret, COOKIE_SECRET_SIZE);
}

/*
 * Handle the cookie reset event, and reschedule with timer.
 */
void
cookie_reset_event (void *arg)
{
  struct timeval now;

  cookie_secret_reset ();

  gettimeofday (&now, 0);
  now.tv_sec += COOKIE_EVENT_FREQ;
  timer_add_event ("cookie_reset_event", cookie_reset_event, arg, &now);
}

void
cookie_init (void)
{
  if (regrand)
    cookie_secret_reset ();
  else
    /* Start responder cookie resets.  */
    cookie_reset_event (0);
@


1.5
log
@./cookie.c: Merge with EOM 1.20
./dh.c: Merge with EOM 1.5
./hash.c: Merge with EOM 1.10
./math_group.h: Merge with EOM 1.7

Style.  alloc error reporting.  Math error propagation.  Allocate right
sizes.

1999 copyrights
@
text
@d1 2
a2 2
/*	$OpenBSD: cookie.c,v 1.4 1999/02/26 03:35:23 niklas Exp $	*/
/*	$EOM: cookie.c,v 1.20 1999/04/17 23:20:20 niklas Exp $	*/
d128 5
a132 2
  /* Start responder cookie resets.  */
  cookie_reset_event (0);
@


1.4
log
@Merge from the Ericsson repository
| revision 1.18
| date: 1999/02/25 11:38:49;  author: niklas;  state: Exp;  lines: +3 -1
| include sysdep.h everywhere
| ----------------------------
@
text
@d1 2
a2 2
/*	$OpenBSD: cookie.c,v 1.3 1998/11/17 11:10:08 niklas Exp $	*/
/*	$EOM: cookie.c,v 1.18 1999/02/25 11:38:49 niklas Exp $	*/
d5 1
a5 1
 * Copyright (c) 1998 Niklas Hallqvist.  All rights reserved.
d129 1
a129 1
  cookie_reset_event (NULL);
@


1.3
log
@Add RCS Ids from the EOM repository
@
text
@d1 2
a2 2
/*	$OpenBSD: cookie.c,v 1.2 1998/11/15 00:43:51 niklas Exp $	*/
/*	$EOM: cookie.c,v 1.17 1998/08/05 09:21:42 niklas Exp $	*/
d42 2
@


1.2
log
@openBSD RCS IDs
@
text
@d1 2
a2 1
/*	$OpenBSD: cookie.c,v 1.1.1.1 1998/11/15 00:03:48 niklas Exp $	*/
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$Id: cookie.c,v 1.17 1998/08/05 09:21:42 niklas Exp $	*/
@


1.1.1.1
log
@Initial import of isakmpd, an IKE (ISAKMP/Oakley) implementation for the
OpenBSD IPSEC stack by me, Niklas Hallqvist and Niels Provos, funded by
Ericsson Radio Systems.  It is not yet complete or usable in a real scenario
but the missing pieces will soon be there.  The early commit is for people
who wants early access and who are not afraid of looking at source.
isakmpd interops with Cisco, Timestep, SSH & Pluto (Linux FreeS/WAN) so
far, so it is not that incomplete.  It is really mostly configuration that
is lacking.
@
text
@@
