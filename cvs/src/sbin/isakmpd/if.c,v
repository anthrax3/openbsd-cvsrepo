head	1.25;
access;
symbols
	OPENBSD_6_2:1.25.0.48
	OPENBSD_6_2_BASE:1.25
	OPENBSD_6_1:1.25.0.50
	OPENBSD_6_1_BASE:1.25
	OPENBSD_6_0:1.25.0.46
	OPENBSD_6_0_BASE:1.25
	OPENBSD_5_9:1.25.0.42
	OPENBSD_5_9_BASE:1.25
	OPENBSD_5_8:1.25.0.44
	OPENBSD_5_8_BASE:1.25
	OPENBSD_5_7:1.25.0.36
	OPENBSD_5_7_BASE:1.25
	OPENBSD_5_6:1.25.0.40
	OPENBSD_5_6_BASE:1.25
	OPENBSD_5_5:1.25.0.38
	OPENBSD_5_5_BASE:1.25
	OPENBSD_5_4:1.25.0.34
	OPENBSD_5_4_BASE:1.25
	OPENBSD_5_3:1.25.0.32
	OPENBSD_5_3_BASE:1.25
	OPENBSD_5_2:1.25.0.30
	OPENBSD_5_2_BASE:1.25
	OPENBSD_5_1_BASE:1.25
	OPENBSD_5_1:1.25.0.28
	OPENBSD_5_0:1.25.0.26
	OPENBSD_5_0_BASE:1.25
	OPENBSD_4_9:1.25.0.24
	OPENBSD_4_9_BASE:1.25
	OPENBSD_4_8:1.25.0.22
	OPENBSD_4_8_BASE:1.25
	OPENBSD_4_7:1.25.0.18
	OPENBSD_4_7_BASE:1.25
	OPENBSD_4_6:1.25.0.20
	OPENBSD_4_6_BASE:1.25
	OPENBSD_4_5:1.25.0.16
	OPENBSD_4_5_BASE:1.25
	OPENBSD_4_4:1.25.0.14
	OPENBSD_4_4_BASE:1.25
	OPENBSD_4_3:1.25.0.12
	OPENBSD_4_3_BASE:1.25
	OPENBSD_4_2:1.25.0.10
	OPENBSD_4_2_BASE:1.25
	OPENBSD_4_1:1.25.0.8
	OPENBSD_4_1_BASE:1.25
	OPENBSD_4_0:1.25.0.6
	OPENBSD_4_0_BASE:1.25
	OPENBSD_3_9:1.25.0.4
	OPENBSD_3_9_BASE:1.25
	OPENBSD_3_8:1.25.0.2
	OPENBSD_3_8_BASE:1.25
	OPENBSD_3_7:1.22.0.4
	OPENBSD_3_7_BASE:1.22
	OPENBSD_3_6:1.22.0.2
	OPENBSD_3_6_BASE:1.22
	OPENBSD_3_5:1.17.0.2
	OPENBSD_3_5_BASE:1.17
	OPENBSD_3_4:1.14.0.2
	OPENBSD_3_4_BASE:1.14
	OPENBSD_3_3:1.13.0.2
	OPENBSD_3_3_BASE:1.13
	OPENBSD_3_2:1.12.0.2
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.9.0.2
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9:1.7.0.8
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_8:1.7.0.6
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.4
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.7.0.2
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.6.0.2
	OPENBSD_2_5_BASE:1.6
	NIKLAS_981114:1.1.1.1
	NIKLAS:1.1.1;
locks; strict;
comment	@ * @;


1.25
date	2005.04.08.22.32.10;	author cloder;	state Exp;
branches;
next	1.24;

1.24
date	2005.04.08.16.11.11;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	2005.04.04.19.31.11;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	2004.06.14.09.55.41;	author ho;	state Exp;
branches;
next	1.21;

1.21
date	2004.05.23.18.17.55;	author hshoexer;	state Exp;
branches;
next	1.20;

1.20
date	2004.05.23.16.14.37;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2004.04.15.18.39.25;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2004.04.13.21.48.15;	author hshoexer;	state Exp;
branches;
next	1.17;

1.17
date	2004.03.19.14.04.43;	author hshoexer;	state Exp;
branches;
next	1.16;

1.16
date	2003.11.06.16.12.07;	author ho;	state Exp;
branches;
next	1.15;

1.15
date	2003.09.25.14.15.15;	author cloder;	state Exp;
branches;
next	1.14;

1.14
date	2003.06.03.14.28.16;	author ho;	state Exp;
branches;
next	1.13;

1.13
date	2003.02.12.15.11.31;	author markus;	state Exp;
branches;
next	1.12;

1.12
date	2002.08.23.17.24.19;	author ho;	state Exp;
branches;
next	1.11;

1.11
date	2002.06.09.08.13.06;	author todd;	state Exp;
branches;
next	1.10;

1.10
date	2001.10.26.13.29.26;	author ho;	state Exp;
branches;
next	1.9;

1.9
date	2001.08.13.14.33.35;	author itojun;	state Exp;
branches;
next	1.8;

1.8
date	2001.07.18.20.56.35;	author markus;	state Exp;
branches;
next	1.7;

1.7
date	99.10.01.14.08.26;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	99.04.05.20.59.49;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	99.03.02.15.12.00;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	99.02.26.03.37.08;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	98.11.17.11.10.12;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	98.11.15.00.43.54;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	98.11.15.00.03.48;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.11.15.00.03.48;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.25
log
@Make deterministic randomness (only ever used for testing) a compile-time
option.  Reduces chances of somehow setting regrand when it's not supposed
to be set.  Remove "-r" option from man page.  Also xref certpatch(8) while
we are in there.  And remove some include sysdep.h where it is no longer
needed.
OK hshoexer
@
text
@/*	$OpenBSD: if.c,v 1.24 2005/04/08 16:11:11 deraadt Exp $	*/
/*	$EOM: if.c,v 1.12 1999/10/01 13:45:20 niklas Exp $	*/

/*
 * Copyright (c) 1998, 1999 Niklas Hallqvist.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This code was written under funding by Ericsson Radio Systems.
 */

#include <sys/ioctl.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <net/if.h>
#include <stdlib.h>
#include <unistd.h>
#include <ifaddrs.h>

#include "log.h"
#include "monitor.h"
#include "if.h"

int
if_map(int (*func)(char *, struct sockaddr *, void *), void *arg)
{
	int	err = 0;

	struct ifaddrs *ifap, *ifa;

	if (getifaddrs(&ifap) < 0)
		return -1;

	for (ifa = ifap; ifa; ifa = ifa->ifa_next)
		if ((*func)(ifa->ifa_name, ifa->ifa_addr, arg) == -1)
			err = -1;
	freeifaddrs(ifap);
	return err;
}
@


1.24
log
@kill HAVE_GETIFADDRS
@
text
@d1 1
a1 1
/*	$OpenBSD: if.c,v 1.23 2005/04/04 19:31:11 deraadt Exp $	*/
a38 2

#include "sysdep.h"
@


1.23
log
@spacing; ok cloder
@
text
@d1 1
a1 1
/*	$OpenBSD: if.c,v 1.22 2004/06/14 09:55:41 ho Exp $	*/
a37 1
#ifdef HAVE_GETIFADDRS
a38 1
#endif
a45 69
#ifndef HAVE_GETIFADDRS
/* XXX Unsafe if either x or y has side-effects.  */
#ifndef MAX
#define MAX(x, y) ((x) > (y) ? (x) : (y))
#endif

/* Most boxes has less than 16 interfaces, so this might be a good guess.  */
#define INITIAL_IFREQ_COUNT 16

/*
 * Get all network interface configurations.
 * Return 0 if successful, -1 otherwise.
 */
int
siocgifconf(struct ifconf *ifcp)
{
	caddr_t	buf, new_buf;
	int	s, len;

	/* Get a socket to ask for the network interface configurations.  */
	s = socket(AF_INET, SOCK_DGRAM, 0);
	if (s == -1) {
		log_error("siocgifconf: "
		    "socket (AF_INET, SOCK_DGRAM, 0) failed");
		return -1;
	}
	len = sizeof(struct ifreq) * INITIAL_IFREQ_COUNT;
	buf = 0;
	while (1) {
		/*
		 * Allocate a larger buffer each time around the loop and get
		 * the network interfaces configurations into it.
		 */
		new_buf = realloc(buf, len);
		if (!new_buf) {
			log_error("siocgifconf: realloc (%p, %d) failed", buf,
			    len);
			goto err;
		}
		ifcp->ifc_len = len;
		ifcp->ifc_buf = buf = new_buf;
		if (ioctl(s, SIOCGIFCONF, ifcp) == -1) {
			log_error("siocgifconf: ioctl (%d, SIOCGIFCONF, ...) "
			    "failed", s);
			goto err;
		}

		/*
		 * If there is place for another ifreq we can be sure that the
		 * buffer was big enough, otherwise double the size and try
		 * again.
		 */
		if (len - ifcp->ifc_len >= sizeof(struct ifreq))
			break;
		len *= 2;
	}
	close(s);
	return 0;

err:
	if (buf)
		free(buf);
	ifcp->ifc_len = 0;
	ifcp->ifc_buf = 0;
	close(s);
	return -1;
}
#endif

a50 1
#ifdef HAVE_GETIFADDRS
a59 19
#else
	struct ifconf	ifc;
	struct ifreq	*ifrp;
	caddr_t		limit, p;
	size_t		len;

	if (siocgifconf(&ifc))
		return -1;

	limit = ifc.ifc_buf + ifc.ifc_len;
	for (p = ifc.ifc_buf; p < limit; p += len) {
		ifrp = (struct ifreq *)p;
		if ((*func)(ifrp->ifr_name, &ifrp->ifr_addr, arg) == -1)
			err = -1;
		len = sizeof ifrp->ifr_name +
		    MAX(sysdep_sa_len(&ifrp->ifr_addr), sizeof ifrp->ifr_addr);
	}
	free(ifc.ifc_buf);
#endif
@


1.22
log
@KNF, style, 80c, etc. hshoexer@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: if.c,v 1.21 2004/05/23 18:17:55 hshoexer Exp $	*/
d80 1
a80 1
	         */
d99 1
a99 1
	         */
@


1.21
log
@More KNF.  Mainly spaces and line-wraps, no binary change.

ok ho@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if.c,v 1.20 2004/05/23 16:14:37 deraadt Exp $	*/
d70 2
a71 1
		log_error("siocgifconf: socket (AF_INET, SOCK_DGRAM, 0) failed");
@


1.20
log
@remove excessive monitor_ prefixes
@
text
@d1 1
a1 1
/*	$OpenBSD: if.c,v 1.19 2004/04/15 18:39:25 deraadt Exp $	*/
d77 2
a78 2
		 * Allocate a larger buffer each time around the loop and get the
		 * network interfaces configurations into it.
d82 2
a83 1
			log_error("siocgifconf: realloc (%p, %d) failed", buf, len);
d89 2
a90 1
			log_error("siocgifconf: ioctl (%d, SIOCGIFCONF, ...) failed", s);
d95 3
a97 2
		 * If there is place for another ifreq we can be sure that the buffer
		 * was big enough, otherwise double the size and try again.
d128 1
a128 1
		if ((*func) (ifa->ifa_name, ifa->ifa_addr, arg) == -1)
d142 1
a142 1
		ifrp = (struct ifreq *) p;
@


1.19
log
@partial move to KNF.  More to come.  This has happened because there
are a raft of source code auditors who are willing to help improve this
code only if this is done, and hey, isakmpd does need our standard
auditing process.  ok ho hshoexer
@
text
@d1 1
a1 1
/*	$OpenBSD: if.c,v 1.18 2004/04/13 21:48:15 hshoexer Exp $	*/
d68 1
a68 1
	s = monitor_socket(AF_INET, SOCK_DGRAM, 0);
d91 1
d140 1
a140 1
		if ((*func) (ifrp->ifr_name, &ifrp->ifr_addr, arg) == -1)
@


1.18
log
@Add missing #include.  Found by Stefan Paletta.

ok henning@@ ho@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if.c,v 1.17 2004/03/19 14:04:43 hshoexer Exp $	*/
d62 1
a62 1
siocgifconf (struct ifconf *ifcp)
d64 8
a71 25
  int s;
  int len;
  caddr_t buf, new_buf;

  /* Get a socket to ask for the network interface configurations.  */
  s = monitor_socket (AF_INET, SOCK_DGRAM, 0);
  if (s == -1)
    {
      log_error ("siocgifconf: socket (AF_INET, SOCK_DGRAM, 0) failed");
      return -1;
    }

  len = sizeof (struct ifreq) * INITIAL_IFREQ_COUNT;
  buf = 0;
  while (1)
    {
      /*
       * Allocate a larger buffer each time around the loop and get the
       * network interfaces configurations into it.
       */
      new_buf = realloc (buf, len);
      if (!new_buf)
	{
	  log_error ("siocgifconf: realloc (%p, %d) failed", buf, len);
	  goto err;
d73 25
a97 6
      ifcp->ifc_len = len;
      ifcp->ifc_buf = buf = new_buf;
      if (ioctl (s, SIOCGIFCONF, ifcp) == -1)
	{
	  log_error ("siocgifconf: ioctl (%d, SIOCGIFCONF, ...) failed", s);
	  goto err;
d99 2
a100 11

      /*
       * If there is place for another ifreq we can be sure that the buffer
       * was big enough, otherwise double the size and try again.
       */
      if (len - ifcp->ifc_len >= sizeof (struct ifreq))
	break;
      len *= 2;
    }
  close (s);
  return 0;
d103 6
a108 6
  if (buf)
    free (buf);
  ifcp->ifc_len = 0;
  ifcp->ifc_buf = 0;
  close (s);
  return -1;
d113 1
a113 1
if_map (int (*func) (char *, struct sockaddr *, void *), void *arg)
d115 2
a116 1
  int err = 0;
d118 1
a118 1
  struct ifaddrs *ifap, *ifa;
d120 2
a121 2
  if (getifaddrs (&ifap) < 0)
    return -1;
d123 4
a126 4
  for (ifa = ifap; ifa; ifa = ifa->ifa_next)
    if ((*func) (ifa->ifa_name, ifa->ifa_addr, arg) == -1)
      err = -1;
  freeifaddrs (ifap);
d128 17
a144 18
  struct ifconf ifc;
  struct ifreq *ifrp;
  caddr_t limit, p;
  size_t len;

  if (siocgifconf (&ifc))
    return -1;

  limit = ifc.ifc_buf + ifc.ifc_len;
  for (p = ifc.ifc_buf; p < limit; p += len)
    {
      ifrp = (struct ifreq *)p;
      if ((*func) (ifrp->ifr_name, &ifrp->ifr_addr, arg) == -1)
	err = -1;
      len = sizeof ifrp->ifr_name
	+ MAX (sysdep_sa_len (&ifrp->ifr_addr), sizeof ifrp->ifr_addr);
    }
  free (ifc.ifc_buf);
d146 1
a146 1
  return err;
@


1.17
log
@Add missing bits to make already present privsep code work.  Enable privsep.

ok ho@@ deraadt@@ markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if.c,v 1.16 2003/11/06 16:12:07 ho Exp $	*/
d45 1
@


1.16
log
@Style nits.
@
text
@d1 1
a1 1
/*	$OpenBSD: if.c,v 1.15 2003/09/25 14:15:15 cloder Exp $	*/
d68 1
a68 1
  s = socket (AF_INET, SOCK_DGRAM, 0);
@


1.15
log
@Fix one case of set length before realloc.  Fix another case of
foo = realloc(foo...) and avoid possible memory leaks.  Avoid
leaving things pointing to freed memory on failure.
@
text
@d1 1
a1 1
/*	$OpenBSD: if.c,v 1.14 2003/06/03 14:28:16 ho Exp $	*/
d125 1
a125 1
  if (getifaddrs(&ifap) < 0)
d131 1
a131 1
  freeifaddrs(ifap);
@


1.14
log
@Remove clauses 3 and 4. With approval from Niklas Hallqvist and
Niels Provos.
@
text
@d1 1
a1 1
/*	$OpenBSD: if.c,v 1.13 2003/02/12 15:11:31 markus Exp $	*/
a82 1
      ifcp->ifc_len = len;
d89 1
d111 2
@


1.13
log
@better error checking on bind(); from Alexander_Bluhm at genua.de; ok ho@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if.c,v 1.12 2002/08/23 17:24:19 ho Exp $	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Ericsson Radio Systems.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.12
log
@Another format tweak
@
text
@d1 1
a1 1
/*	$OpenBSD: if.c,v 1.11 2002/06/09 08:13:06 todd Exp $	*/
d122 1
a122 1
if_map (void (*func) (char *, struct sockaddr *, void *), void *arg)
d124 1
d132 2
a133 3
    {
      (*func) (ifa->ifa_name, ifa->ifa_addr, arg);
    }
a134 1
  return 0;
d148 2
a149 1
      (*func) (ifrp->ifr_name, &ifrp->ifr_addr, arg);
a153 1
  return 0;
d155 1
@


1.11
log
@rm trailing whitespace
@
text
@d1 1
a1 1
/*	$OpenBSD: if.c,v 1.10 2001/10/26 13:29:26 ho Exp $	*/
d98 1
a98 1
	  log_error ("siocgifconf: ioctl (%s, SIOCGIFCONF, ...) failed", s);
@


1.10
log
@Change to use sysdep_sa_len() function.
@
text
@d1 1
a1 1
/*	$OpenBSD: if.c,v 1.9 2001/08/13 14:33:35 itojun Exp $	*/
d112 1
a112 1
  
@


1.9
log
@use getifaddrs(3) rather than SIOCGIFCONF.  in fact, if_map() does not do
the right thing on certain set of interface addresses.  SIOCGIFCONF is
the worst possible ioctl API...
@
text
@d1 1
a1 1
/*	$OpenBSD: if.c,v 1.8 2001/07/18 20:56:35 markus Exp $	*/
a149 3
#ifdef USE_OLD_SOCKADDR
      len = sizeof ifrp->ifr_name + sizeof ifrp->ifr_addr;
#else
d151 1
a151 2
	+ MAX (ifrp->ifr_addr.sa_len, sizeof ifrp->ifr_addr);
#endif
@


1.8
log
@protect #define MAX(); ok ho@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if.c,v 1.7 1999/10/01 14:08:26 niklas Exp $	*/
d43 3
d52 1
d119 1
d122 1
a122 1
if_map (void (*func) (struct ifreq *, void *), void *arg)
d124 13
d149 1
a149 1
      (*func) (ifrp, arg);
d159 1
@


1.7
log
@Merge with EOM 1.12

author: niklas
Better error reporting.
@
text
@d1 1
a1 1
/*	$OpenBSD: if.c,v 1.6 1999/04/05 20:59:49 niklas Exp $	*/
d50 1
d52 1
@


1.6
log
@Merge with EOM 1.11
We need log.h

Plug memleak

1999 copyrights
@
text
@d1 2
a2 2
/*	$OpenBSD: if.c,v 1.5 1999/03/02 15:12:00 niklas Exp $	*/
/*	$EOM: if.c,v 1.11 1999/04/05 18:26:30 niklas Exp $	*/
d69 4
a72 1
    return -1;
d91 4
a94 1
	goto err;
@


1.5
log
@if.c: Merge with EOM 1.8
Deal with old socket APIs

udp.c: Merge with EOM 1.31
Deal with old socket APIs

message.c: Merge with EOM 1.107
Remove unnecessary system dependent include
@
text
@d1 2
a2 2
/*	$OpenBSD: if.c,v 1.4 1999/02/26 03:37:08 niklas Exp $	*/
/*	$EOM: if.c,v 1.8 1999/03/02 14:26:12 niklas Exp $	*/
d5 1
a5 1
 * Copyright (c) 1998 Niklas Hallqvist.  All rights reserved.
d46 1
d82 4
a85 1
	goto err;
d131 1
@


1.4
log
@Merge from the Ericsson repository
| revision 1.7
| date: 1999/02/25 11:39:00;  author: niklas;  state: Exp;  lines: +3 -1
| include sysdep.h everywhere
| ----------------------------
@
text
@d1 2
a2 2
/*	$OpenBSD: if.c,v 1.3 1998/11/17 11:10:12 niklas Exp $	*/
/*	$EOM: if.c,v 1.7 1999/02/25 11:39:00 niklas Exp $	*/
d120 3
d125 1
@


1.3
log
@Add RCS Ids from the EOM repository
@
text
@d1 2
a2 2
/*	$OpenBSD: if.c,v 1.2 1998/11/15 00:43:54 niklas Exp $	*/
/*	$EOM: if.c,v 1.6 1998/08/14 20:31:41 niklas Exp $	*/
d43 2
@


1.2
log
@openBSD RCS IDs
@
text
@d1 2
a2 1
/*	$OpenBSD: if.c,v 1.1.1.1 1998/11/15 00:03:48 niklas Exp $	*/
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$Id: if.c,v 1.6 1998/08/14 20:31:41 niklas Exp $	*/
@


1.1.1.1
log
@Initial import of isakmpd, an IKE (ISAKMP/Oakley) implementation for the
OpenBSD IPSEC stack by me, Niklas Hallqvist and Niels Provos, funded by
Ericsson Radio Systems.  It is not yet complete or usable in a real scenario
but the missing pieces will soon be there.  The early commit is for people
who wants early access and who are not afraid of looking at source.
isakmpd interops with Cisco, Timestep, SSH & Pluto (Linux FreeS/WAN) so
far, so it is not that incomplete.  It is really mostly configuration that
is lacking.
@
text
@@
