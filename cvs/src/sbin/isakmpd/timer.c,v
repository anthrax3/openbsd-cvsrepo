head	1.17;
access;
symbols
	OPENBSD_6_1:1.17.0.6
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.17.0.4
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.16.0.12
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.4
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.8
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.6
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.2
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.15.0.32
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.30
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.28
	OPENBSD_5_0:1.15.0.26
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.24
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.22
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.18
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.20
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.16
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.14
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.12
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.10
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.8
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.6
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.15.0.4
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.15.0.2
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.14.0.4
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.14.0.2
	OPENBSD_3_6_BASE:1.14
	OPENBSD_3_5:1.11.0.4
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.10.0.4
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.2
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.8.0.4
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.7.0.6
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_8:1.7.0.4
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.2
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.6.0.2
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.4.0.2
	OPENBSD_2_5_BASE:1.4
	NIKLAS_981114:1.1.1.1
	NIKLAS:1.1.1;
locks; strict;
comment	@ * @;


1.17
date	2015.08.20.22.02.21;	author deraadt;	state Exp;
branches;
next	1.16;
commitid	0qPuuXwccpVXsXcV;

1.16
date	2013.04.02.03.06.18;	author guenther;	state Exp;
branches;
next	1.15;

1.15
date	2005.04.08.22.32.10;	author cloder;	state Exp;
branches;
next	1.14;

1.14
date	2004.06.14.09.55.42;	author ho;	state Exp;
branches;
next	1.13;

1.13
date	2004.05.23.18.17.56;	author hshoexer;	state Exp;
branches;
next	1.12;

1.12
date	2004.04.15.18.39.26;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.03.14.28.16;	author ho;	state Exp;
branches;
next	1.10;

1.10
date	2002.06.09.08.13.07;	author todd;	state Exp;
branches;
next	1.9;

1.9
date	2002.05.28.10.09.46;	author ho;	state Exp;
branches;
next	1.8;

1.8
date	2001.07.06.14.37.11;	author ho;	state Exp;
branches;
next	1.7;

1.7
date	2000.02.25.17.23.41;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	99.06.02.06.33.00;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	99.04.19.20.57.25;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	99.02.26.03.50.50;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	98.11.17.11.10.20;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	98.11.15.00.44.03;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	98.11.15.00.03.49;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.11.15.00.03.49;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.17
log
@<stdlib.h> is included, so do not need to cast result from
malloc, calloc, realloc*
ok krw millert
@
text
@/* $OpenBSD: timer.c,v 1.16 2013/04/02 03:06:18 guenther Exp $	 */
/* $EOM: timer.c,v 1.13 2000/02/20 19:58:42 niklas Exp $	 */

/*
 * Copyright (c) 1998, 1999 Niklas Hallqvist.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This code was written under funding by Ericsson Radio Systems.
 */

#include <sys/queue.h>
#include <stdlib.h>
#include <string.h>

#include "log.h"
#include "timer.h"

static	TAILQ_HEAD(event_list, event) events;

void
timer_init(void)
{
	TAILQ_INIT(&events);
}

void
timer_next_event(struct timeval **timeout)
{
	struct timeval  now;

	if (TAILQ_FIRST(&events)) {
		gettimeofday(&now, 0);
		if (timercmp(&now, &TAILQ_FIRST(&events)->expiration, >=))
			timerclear(*timeout);
		else
			timersub(&TAILQ_FIRST(&events)->expiration, &now,
			    *timeout);
	} else
		*timeout = 0;
}

void
timer_handle_expirations(void)
{
	struct timeval  now;
	struct event   *n;

	gettimeofday(&now, 0);
	for (n = TAILQ_FIRST(&events); n && timercmp(&now, &n->expiration, >=);
	    n = TAILQ_FIRST(&events)) {
		LOG_DBG((LOG_TIMER, 10,
		    "timer_handle_expirations: event %s(%p)", n->name,
		    n->arg));
		TAILQ_REMOVE(&events, n, link);
		(*n->func)(n->arg);
		free(n);
	}
}

struct event *
timer_add_event(char *name, void (*func)(void *), void *arg,
    struct timeval *expiration)
{
	struct event   *ev = malloc(sizeof *ev);
	struct event   *n;
	struct timeval  now;

	if (!ev)
		return 0;
	ev->name = name;
	ev->func = func;
	ev->arg = arg;
	gettimeofday(&now, 0);
	memcpy(&ev->expiration, expiration, sizeof *expiration);
	for (n = TAILQ_FIRST(&events);
	    n && timercmp(expiration, &n->expiration, >=);
	    n = TAILQ_NEXT(n, link))
		;
	if (n) {
		LOG_DBG((LOG_TIMER, 10,
		    "timer_add_event: event %s(%p) added before %s(%p), "
		    "expiration in %llds", name, arg, n->name, n->arg,
		    (long long)(expiration->tv_sec - now.tv_sec)));
		TAILQ_INSERT_BEFORE(n, ev, link);
	} else {
		LOG_DBG((LOG_TIMER, 10, "timer_add_event: event %s(%p) added "
		    "last, expiration in %ds", name, arg,
		    (int)(expiration->tv_sec - now.tv_sec)));
		TAILQ_INSERT_TAIL(&events, ev, link);
	}
	return ev;
}

void
timer_remove_event(struct event *ev)
{
	LOG_DBG((LOG_TIMER, 10, "timer_remove_event: removing event %s(%p)",
	    ev->name, ev->arg));
	TAILQ_REMOVE(&events, ev, link);
	free(ev);
}

void
timer_report(void)
{
	struct event   *ev;
	struct timeval  now;

	gettimeofday(&now, 0);

	for (ev = TAILQ_FIRST(&events); ev; ev = TAILQ_NEXT(ev, link))
		LOG_DBG((LOG_REPORT, 0,
		    "timer_report: event %s(%p) scheduled in %d seconds",
		    (ev->name ? ev->name : "<unknown>"), ev,
		    (int) (ev->expiration.tv_sec - now.tv_sec)));
}
@


1.16
log
@Stop assuming time_t is long

ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: timer.c,v 1.15 2005/04/08 22:32:10 cloder Exp $	 */
d85 1
a85 1
	struct event   *ev = (struct event *) malloc(sizeof *ev);
@


1.15
log
@Make deterministic randomness (only ever used for testing) a compile-time
option.  Reduces chances of somehow setting regrand when it's not supposed
to be set.  Remove "-r" option from man page.  Also xref certpatch(8) while
we are in there.  And remove some include sysdep.h where it is no longer
needed.
OK hshoexer
@
text
@d1 1
a1 1
/* $OpenBSD: timer.c,v 1.14 2004/06/14 09:55:42 ho Exp $	 */
d103 2
a104 2
		    "expiration in %lds", name,
		    arg, n->name, n->arg, expiration->tv_sec - now.tv_sec));
d108 2
a109 2
		    "last, expiration in %lds", name, arg,
		    expiration->tv_sec - now.tv_sec));
@


1.14
log
@KNF, style, 80c, etc. hshoexer@@ ok
@
text
@d1 1
a1 1
/* $OpenBSD: timer.c,v 1.13 2004/05/23 18:17:56 hshoexer Exp $	 */
a34 2

#include "sysdep.h"
@


1.13
log
@More KNF.  Mainly spaces and line-wraps, no binary change.

ok ho@@
@
text
@d1 1
a1 1
/* $OpenBSD: timer.c,v 1.12 2004/04/15 18:39:26 deraadt Exp $	 */
d75 2
a76 1
		    "timer_handle_expirations: event %s(%p)", n->name, n->arg));
@


1.12
log
@partial move to KNF.  More to come.  This has happened because there
are a raft of source code auditors who are willing to help improve this
code only if this is done, and hey, isakmpd does need our standard
auditing process.  ok ho hshoexer
@
text
@d1 1
a1 1
/* $OpenBSD: timer.c,v 1.11 2003/06/03 14:28:16 ho Exp $	 */
d59 2
a60 1
			timersub(&TAILQ_FIRST(&events)->expiration, &now, *timeout);
d108 2
a109 2
		LOG_DBG((LOG_TIMER, 10, "timer_add_event: event %s(%p) added last, "
		    "expiration in %lds", name, arg,
@


1.11
log
@Remove clauses 3 and 4. With approval from Niklas Hallqvist and
Niels Provos.
@
text
@d1 2
a2 2
/*	$OpenBSD: timer.c,v 1.10 2002/06/09 08:13:07 todd Exp $	*/
/*	$EOM: timer.c,v 1.13 2000/02/20 19:58:42 niklas Exp $	*/
d41 1
a41 1
static TAILQ_HEAD (event_list, event) events;
d44 1
a44 1
timer_init (void)
d46 1
a46 1
  TAILQ_INIT (&events);
d50 1
a50 1
timer_next_event (struct timeval **timeout)
d52 1
a52 1
  struct timeval now;
d54 8
a61 10
  if (TAILQ_FIRST (&events))
    {
      gettimeofday (&now, 0);
      if (timercmp (&now, &TAILQ_FIRST (&events)->expiration, >=))
	timerclear (*timeout);
      else
	timersub (&TAILQ_FIRST (&events)->expiration, &now, *timeout);
    }
  else
    *timeout = 0;
d65 1
a65 1
timer_handle_expirations (void)
d67 2
a68 2
  struct timeval now;
  struct event *n;
d70 9
a78 10
  gettimeofday (&now, 0);
  for (n = TAILQ_FIRST (&events); n && timercmp (&now, &n->expiration, >=);
       n = TAILQ_FIRST (&events))
    {
      LOG_DBG ((LOG_TIMER, 10,
		"timer_handle_expirations: event %s(%p)", n->name, n->arg));
      TAILQ_REMOVE (&events, n, link);
      (*n->func) (n->arg);
      free (n);
    }
d82 2
a83 2
timer_add_event (char *name, void (*func) (void *), void *arg,
		 struct timeval *expiration)
d85 28
a112 31
  struct event *ev = (struct event *)malloc (sizeof *ev);
  struct event *n;
  struct timeval now;

  if (!ev)
    return 0;
  ev->name = name;
  ev->func = func;
  ev->arg = arg;
  gettimeofday (&now, 0);
  memcpy (&ev->expiration, expiration, sizeof *expiration);
  for (n = TAILQ_FIRST (&events);
       n && timercmp (expiration, &n->expiration, >=);
       n = TAILQ_NEXT (n, link))
    ;
  if (n)
    {
      LOG_DBG ((LOG_TIMER, 10,
		"timer_add_event: event %s(%p) added before %s(%p), "
		"expiration in %lds", name,
		arg, n->name, n->arg, expiration->tv_sec - now.tv_sec));
      TAILQ_INSERT_BEFORE (n, ev, link);
    }
  else
    {
      LOG_DBG ((LOG_TIMER, 10, "timer_add_event: event %s(%p) added last, "
		"expiration in %lds", name, arg,
		expiration->tv_sec - now.tv_sec));
      TAILQ_INSERT_TAIL (&events, ev, link);
    }
  return ev;
d116 1
a116 1
timer_remove_event (struct event *ev)
d118 1
a118 1
  LOG_DBG ((LOG_TIMER, 10, "timer_remove_event: removing event %s(%p)",
d120 2
a121 2
  TAILQ_REMOVE (&events, ev, link);
  free (ev);
d125 1
a125 1
timer_report (void)
d127 2
a128 2
  struct event *ev;
  struct timeval now;
d130 1
a130 1
  gettimeofday (&now, 0);
d132 5
a136 5
  for (ev = TAILQ_FIRST (&events); ev; ev = TAILQ_NEXT (ev, link))
    LOG_DBG ((LOG_REPORT, 0,
	      "timer_report: event %s(%p) scheduled in %d seconds",
	      (ev->name ? ev->name : "<unknown>"), ev,
	      (int)(ev->expiration.tv_sec - now.tv_sec)));
@


1.10
log
@rm trailing whitespace
@
text
@d1 1
a1 1
/*	$OpenBSD: timer.c,v 1.9 2002/05/28 10:09:46 ho Exp $	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Ericsson Radio Systems.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.9
log
@Proper types in format strings. From <greg@@nest.cx>
@
text
@d1 1
a1 1
/*	$OpenBSD: timer.c,v 1.8 2001/07/06 14:37:11 ho Exp $	*/
d119 1
a119 1
		"expiration in %lds", name, arg, 
d144 1
a144 1
    LOG_DBG ((LOG_REPORT, 0, 
d146 1
a146 1
	      (ev->name ? ev->name : "<unknown>"), ev, 
@


1.8
log
@Style.
@
text
@d1 1
a1 1
/*	$OpenBSD: timer.c,v 1.7 2000/02/25 17:23:41 niklas Exp $	*/
d112 1
a112 1
		"expiration in %ds", name,
d119 1
a119 1
		"expiration in %ds", name, arg, 
@


1.7
log
@regress/crypto/Makefile: Merge with EOM 1.5
regress/dh/Makefile: Merge with EOM 1.7
regress/group/Makefile: Merge with EOM 1.9
regress/prf/Makefile: Merge with EOM 1.4
regress/rsakeygen/Makefile: Merge with EOM 1.8
regress/x509/Makefile: Merge with EOM 1.10
Makefile: Merge with EOM 1.62
attribute.c: Merge with EOM 1.10
sa.c: Merge with EOM 1.99
conf.c: Merge with EOM 1.20
crypto.c: Merge with EOM 1.28
isakmpd.c: Merge with EOM 1.45
connection.c: Merge with EOM 1.19
doi.h: Merge with EOM 1.28
field.c: Merge with EOM 1.11
exchange.c: Merge with EOM 1.116
ike_auth.c: Merge with EOM 1.44
pf_key_v2.c: Merge with EOM 1.37
ike_phase_1.c: Merge with EOM 1.22
ipsec.c: Merge with EOM 1.118
isakmp_doi.c: Merge with EOM 1.40
log.c: Merge with EOM 1.26
log.h: Merge with EOM 1.18
math_group.c: Merge with EOM 1.23
message.c: Merge with EOM 1.144
pf_encap.c: Merge with EOM 1.70
policy.c: Merge with EOM 1.18
timer.c: Merge with EOM 1.13
transport.c: Merge with EOM 1.41
udp.c: Merge with EOM 1.47
ui.c: Merge with EOM 1.37
x509.c: Merge with EOM 1.36

author: niklas
Made debug logging a compile time selectable feature
@
text
@d1 1
a1 1
/*	$OpenBSD: timer.c,v 1.6 1999/06/02 06:33:00 niklas Exp $	*/
d49 1
a49 1
timer_init ()
d72 1
a72 1
timer_handle_expirations ()
@


1.6
log
@exchange.c: Merge with EOM 1.106
timer.c: Merge with EOM 1.12

author: ho
Logging nitpicks
@
text
@d1 2
a2 2
/*	$OpenBSD: timer.c,v 1.5 1999/04/19 20:57:25 niklas Exp $	*/
/*	$EOM: timer.c,v 1.12 1999/05/21 14:12:59 ho Exp $	*/
d81 2
a82 2
      log_debug (LOG_TIMER, 10,
		 "timer_handle_expirations: event %s(%p)", n->name, n->arg);
d110 4
a113 4
      log_debug (LOG_TIMER, 10,
		 "timer_add_event: event %s(%p) added before %s(%p), "
		 "expiration in %ds", name,
		 arg, n->name, n->arg, expiration->tv_sec - now.tv_sec);
d118 3
a120 3
      log_debug (LOG_TIMER, 10, "timer_add_event: event %s(%p) added last, "
		 "expiration in %ds", name, arg, 
		 expiration->tv_sec - now.tv_sec);
d129 2
a130 2
  log_debug (LOG_TIMER, 10, "timer_remove_event: removing event %s(%p)",
	     ev->name, ev->arg);
d144 4
a147 4
    log_debug (LOG_REPORT, 0, 
	       "timer_report: event %s(%p) scheduled in %d seconds",
	       (ev->name ? ev->name : "<unknown>"), ev, 
	       (int)(ev->expiration.tv_sec - now.tv_sec));
@


1.5
log
@./timer.c: Merge with EOM 1.11

Add LOG_REPORT to always go to logchannel regardless of level; misc small fixes

Added timer_report

1999 copyrights
@
text
@d1 2
a2 2
/*	$OpenBSD: timer.c,v 1.4 1999/02/26 03:50:50 niklas Exp $	*/
/*	$EOM: timer.c,v 1.11 1999/04/13 20:00:41 ho Exp $	*/
d95 1
d102 1
d111 3
a113 2
		 "timer_add_event: event %s(%p) added before %s(%p)", name,
		 arg, n->name, n->arg);
d118 3
a120 2
      log_debug (LOG_TIMER, 10, "timer_add_event: event %s(%p) added last",
		 name, arg);
@


1.4
log
@Merge from the Ericsson repository
| revision 1.8
| date: 1999/02/25 11:39:23;  author: niklas;  state: Exp;  lines: +3 -1
| include sysdep.h everywhere
| ----------------------------
@
text
@d1 2
a2 2
/*	$OpenBSD: timer.c,v 1.3 1998/11/17 11:10:20 niklas Exp $	*/
/*	$EOM: timer.c,v 1.8 1999/02/25 11:39:23 niklas Exp $	*/
d5 1
a5 1
 * Copyright (c) 1998 Niklas Hallqvist.  All rights reserved.
d129 15
@


1.3
log
@Add RCS Ids from the EOM repository
@
text
@d1 2
a2 2
/*	$OpenBSD: timer.c,v 1.2 1998/11/15 00:44:03 niklas Exp $	*/
/*	$EOM: timer.c,v 1.7 1998/08/11 15:03:26 niklas Exp $	*/
d40 2
@


1.2
log
@openBSD RCS IDs
@
text
@d1 2
a2 1
/*	$OpenBSD: timer.c,v 1.1.1.1 1998/11/15 00:03:49 niklas Exp $	*/
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$Id: timer.c,v 1.7 1998/08/11 15:03:26 niklas Exp $	*/
@


1.1.1.1
log
@Initial import of isakmpd, an IKE (ISAKMP/Oakley) implementation for the
OpenBSD IPSEC stack by me, Niklas Hallqvist and Niels Provos, funded by
Ericsson Radio Systems.  It is not yet complete or usable in a real scenario
but the missing pieces will soon be there.  The early commit is for people
who wants early access and who are not afraid of looking at source.
isakmpd interops with Cisco, Timestep, SSH & Pluto (Linux FreeS/WAN) so
far, so it is not that incomplete.  It is really mostly configuration that
is lacking.
@
text
@@
