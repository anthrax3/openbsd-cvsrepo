head	1.26;
access;
symbols
	OPENBSD_6_1_BASE:1.26
	OPENBSD_6_0:1.26.0.42
	OPENBSD_6_0_BASE:1.26
	OPENBSD_5_9:1.26.0.38
	OPENBSD_5_9_BASE:1.26
	OPENBSD_5_8:1.26.0.40
	OPENBSD_5_8_BASE:1.26
	OPENBSD_5_7:1.26.0.32
	OPENBSD_5_7_BASE:1.26
	OPENBSD_5_6:1.26.0.36
	OPENBSD_5_6_BASE:1.26
	OPENBSD_5_5:1.26.0.34
	OPENBSD_5_5_BASE:1.26
	OPENBSD_5_4:1.26.0.30
	OPENBSD_5_4_BASE:1.26
	OPENBSD_5_3:1.26.0.28
	OPENBSD_5_3_BASE:1.26
	OPENBSD_5_2:1.26.0.26
	OPENBSD_5_2_BASE:1.26
	OPENBSD_5_1_BASE:1.26
	OPENBSD_5_1:1.26.0.24
	OPENBSD_5_0:1.26.0.22
	OPENBSD_5_0_BASE:1.26
	OPENBSD_4_9:1.26.0.20
	OPENBSD_4_9_BASE:1.26
	OPENBSD_4_8:1.26.0.18
	OPENBSD_4_8_BASE:1.26
	OPENBSD_4_7:1.26.0.14
	OPENBSD_4_7_BASE:1.26
	OPENBSD_4_6:1.26.0.16
	OPENBSD_4_6_BASE:1.26
	OPENBSD_4_5:1.26.0.12
	OPENBSD_4_5_BASE:1.26
	OPENBSD_4_4:1.26.0.10
	OPENBSD_4_4_BASE:1.26
	OPENBSD_4_3:1.26.0.8
	OPENBSD_4_3_BASE:1.26
	OPENBSD_4_2:1.26.0.6
	OPENBSD_4_2_BASE:1.26
	OPENBSD_4_1:1.26.0.4
	OPENBSD_4_1_BASE:1.26
	OPENBSD_4_0:1.26.0.2
	OPENBSD_4_0_BASE:1.26
	OPENBSD_3_9:1.25.0.4
	OPENBSD_3_9_BASE:1.25
	OPENBSD_3_8:1.25.0.2
	OPENBSD_3_8_BASE:1.25
	OPENBSD_3_7:1.24.0.4
	OPENBSD_3_7_BASE:1.24
	OPENBSD_3_6:1.24.0.2
	OPENBSD_3_6_BASE:1.24
	OPENBSD_3_5:1.22.0.4
	OPENBSD_3_5_BASE:1.22
	OPENBSD_3_4:1.22.0.2
	OPENBSD_3_4_BASE:1.22
	OPENBSD_3_3:1.21.0.4
	OPENBSD_3_3_BASE:1.21
	OPENBSD_3_2:1.21.0.2
	OPENBSD_3_2_BASE:1.21
	OPENBSD_3_1:1.19.0.4
	OPENBSD_3_1_BASE:1.19
	OPENBSD_3_0:1.19.0.2
	OPENBSD_3_0_BASE:1.19
	OPENBSD_2_9:1.15.0.2
	OPENBSD_2_9_BASE:1.15
	OPENBSD_2_8:1.14.0.2
	OPENBSD_2_8_BASE:1.14
	OPENBSD_2_7:1.13.0.2
	OPENBSD_2_7_BASE:1.13
	OPENBSD_2_6:1.11.0.2
	OPENBSD_2_6_BASE:1.11
	OPENBSD_2_5:1.6.0.2
	OPENBSD_2_5_BASE:1.6
	NIKLAS_981114:1.1.1.1
	NIKLAS:1.1.1;
locks; strict;
comment	@ * @;


1.26
date	2006.06.02.18.08.56;	author hshoexer;	state Exp;
branches;
next	1.25;

1.25
date	2005.04.08.16.52.41;	author deraadt;	state Exp;
branches;
next	1.24;

1.24
date	2004.05.23.18.17.56;	author hshoexer;	state Exp;
branches;
next	1.23;

1.23
date	2004.04.15.18.39.25;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	2003.06.04.07.31.17;	author ho;	state Exp;
branches;
next	1.21;

1.21
date	2002.06.09.08.13.06;	author todd;	state Exp;
branches;
next	1.20;

1.20
date	2002.06.08.23.09.46;	author ho;	state Exp;
branches;
next	1.19;

1.19
date	2001.08.22.08.49.00;	author niklas;	state Exp;
branches;
next	1.18;

1.18
date	2001.07.01.20.43.39;	author niklas;	state Exp;
branches;
next	1.17;

1.17
date	2001.06.29.04.12.00;	author ho;	state Exp;
branches;
next	1.16;

1.16
date	2001.06.27.03.31.41;	author angelos;	state Exp;
branches;
next	1.15;

1.15
date	2000.12.12.01.44.59;	author niklas;	state Exp;
branches;
next	1.14;

1.14
date	2000.08.03.07.24.48;	author niklas;	state Exp;
branches
	1.14.2.1;
next	1.13;

1.13
date	2000.02.01.02.46.18;	author niklas;	state Exp;
branches;
next	1.12;

1.12
date	2000.01.26.15.25.01;	author niklas;	state Exp;
branches;
next	1.11;

1.11
date	99.08.05.22.41.31;	author niklas;	state Exp;
branches;
next	1.10;

1.10
date	99.07.07.22.13.08;	author niklas;	state Exp;
branches;
next	1.9;

1.9
date	99.05.02.19.20.33;	author niklas;	state Exp;
branches;
next	1.8;

1.8
date	99.04.27.21.11.54;	author niklas;	state Exp;
branches;
next	1.7;

1.7
date	99.04.19.19.54.54;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	99.03.31.14.27.37;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	99.02.26.03.44.04;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	98.12.21.01.02.25;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	98.11.17.11.10.13;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	98.11.15.00.43.56;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	98.11.15.00.03.48;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.11.15.00.03.48;	author niklas;	state Exp;
branches;
next	;

1.14.2.1
date	2001.05.08.12.45.23;	author ho;	state Exp;
branches;
next	;


desc
@@


1.26
log
@Big whitespace cleanup.
@
text
@/* $OpenBSD: ipsec.h,v 1.25 2005/04/08 16:52:41 deraadt Exp $	 */
/* $EOM: ipsec.h,v 1.42 2000/12/03 07:58:20 angelos Exp $	 */

/*
 * Copyright (c) 1998, 1999, 2001 Niklas Hallqvist.  All rights reserved.
 * Copyright (c) 1999 Angelos D. Keromytis.  All rights reserved.
 * Copyright (c) 2001 Håkan Olsson.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This code was written under funding by Ericsson Radio Systems.
 */

#ifndef _IPSEC_H_
#define _IPSEC_H_

#include <sys/queue.h>
#include <sys/types.h>
#include <netinet/in.h>

#include "ipsec_doi.h"
#include "isakmp_cfg.h"

struct group;
struct hash;
struct ike_auth;
struct message;
struct proto;
struct sa;

/*
 * IPsec-specific data to be linked into the exchange struct.
 * XXX Should probably be several different structs, one for each kind
 * of exchange, i.e. phase 1, phase 2 and ISAKMP configuration parameters
 * separated.
 */
struct ipsec_exch {
	u_int		 flags;
	struct hash	*hash;
	struct ike_auth *ike_auth;
	struct group	*group;
	u_int16_t	 prf_type;

	/* 0 if no KEY_EXCH was proposed, 1 otherwise */
	u_int8_t	 pfs;

	/*
	 * A copy of the initiator SA payload body for later computation of
	 * hashes.  Phase 1 only.
	 */
	size_t		 sa_i_b_len;
	u_int8_t	*sa_i_b;

	/* Diffie-Hellman values.  */
	size_t		 g_x_len;
	u_int8_t	*g_xi;
	u_int8_t	*g_xr;
	u_int8_t	*g_xy;

	/* SKEYIDs.  XXX Phase 1 only?  */
	size_t		 skeyid_len;
	u_int8_t	*skeyid;
	u_int8_t	*skeyid_d;
	u_int8_t	*skeyid_a;
	u_int8_t	*skeyid_e;

	/* HASH_I & HASH_R.  XXX Do these need to be saved here?  */
	u_int8_t	*hash_i;
	u_int8_t	*hash_r;

	/* KEYMAT */
	size_t		 keymat_len;

	/* Phase 2.  */
	u_int8_t	*id_ci;
	size_t		 id_ci_sz;
	u_int8_t	*id_cr;
	size_t		 id_cr_sz;

	/* ISAKMP configuration mode parameters */
	u_int16_t	 cfg_id;
	u_int16_t	 cfg_type;
	LIST_HEAD(isakmp_cfg_attr_head, isakmp_cfg_attr) attrs;
};

#define IPSEC_EXCH_FLAG_NO_ID 1

struct ipsec_sa {
	/* Phase 1.  */
	u_int8_t	 hash;
	size_t		 skeyid_len;
	u_int8_t	*skeyid_d;
	u_int8_t	*skeyid_a;
	u_int16_t	 prf_type;

	/* Phase 2.  */
	u_int16_t	 group_desc;

	/* Tunnel parameters.  These are in network byte order.  */
	struct sockaddr *src_net;
	struct sockaddr *src_mask;
	struct sockaddr *dst_net;
	struct sockaddr *dst_mask;
	u_int8_t	 tproto;
	u_int16_t	 sport;
	u_int16_t	 dport;
};

struct ipsec_proto {
	/* Phase 2.  */
	u_int16_t	 encap_mode;
	u_int16_t	 auth;
	u_int16_t	 keylen;
	u_int16_t	 keyrounds;

	/* This is not negotiated, but rather configured.  */
	int32_t		 replay_window;

	/* KEYMAT */
	u_int8_t	*keymat[2];
};

extern u_int8_t *ipsec_add_hash_payload(struct message *, size_t);
extern int	 ipsec_ah_keylength(struct proto *);
extern u_int8_t *ipsec_build_id(char *, size_t *);
extern int	 ipsec_decode_attribute(u_int16_t, u_int8_t *, u_int16_t,
		     void *);
extern void	 ipsec_decode_transform(struct message *, struct sa *,
		     struct proto *, u_int8_t *);
extern int	 ipsec_esp_authkeylength(struct proto *);
extern int	 ipsec_esp_enckeylength(struct proto *);
extern int	 ipsec_fill_in_hash(struct message *);
extern int	 ipsec_gen_g_x(struct message *);
extern int	 ipsec_get_id(char *, int *, struct sockaddr **,
		     struct sockaddr **, u_int8_t *, u_int16_t *);
extern ssize_t	 ipsec_id_size(char *, u_int8_t *);
extern char	*ipsec_id_string(u_int8_t *, size_t);
extern void	 ipsec_init(void);
extern int	 ipsec_initial_contact(struct message *);
extern int	 ipsec_is_attribute_incompatible(u_int16_t, u_int8_t *,
		     u_int16_t, void *);
extern int	 ipsec_keymat_length(struct proto *);
extern int	 ipsec_save_g_x(struct message *);
extern struct sa *ipsec_sa_lookup(struct sockaddr *, u_int32_t, u_int8_t);

extern char	*ipsec_decode_ids(char *, u_int8_t *, size_t, u_int8_t *,
		     size_t, int);
extern int	 ipsec_clone_id(u_int8_t **, size_t *, u_int8_t *, size_t);

#endif				/* _IPSEC_H_ */
@


1.25
log
@always enable aggressive, dpd, and isakmp_cfg
@
text
@d1 1
a1 1
/* $OpenBSD: ipsec.h,v 1.24 2004/05/23 18:17:56 hshoexer Exp $	 */
d58 2
a59 2
	u_int           flags;
	struct hash    *hash;
d61 2
a62 2
	struct group   *group;
	u_int16_t       prf_type;
d65 1
a65 1
	u_int8_t        pfs;
d70 3
a72 3
         */
	size_t          sa_i_b_len;
	u_int8_t       *sa_i_b;
d75 4
a78 4
	size_t          g_x_len;
	u_int8_t       *g_xi;
	u_int8_t       *g_xr;
	u_int8_t       *g_xy;
d81 5
a85 5
	size_t          skeyid_len;
	u_int8_t       *skeyid;
	u_int8_t       *skeyid_d;
	u_int8_t       *skeyid_a;
	u_int8_t       *skeyid_e;
d88 2
a89 2
	u_int8_t       *hash_i;
	u_int8_t       *hash_r;
d92 1
a92 1
	size_t          keymat_len;
d95 4
a98 4
	u_int8_t       *id_ci;
	size_t          id_ci_sz;
	u_int8_t       *id_cr;
	size_t          id_cr_sz;
d101 3
a103 3
	u_int16_t       cfg_id;
	u_int16_t       cfg_type;
	                LIST_HEAD(isakmp_cfg_attr_head, isakmp_cfg_attr) attrs;
d110 5
a114 5
	u_int8_t        hash;
	size_t          skeyid_len;
	u_int8_t       *skeyid_d;
	u_int8_t       *skeyid_a;
	u_int16_t       prf_type;
d117 1
a117 1
	u_int16_t       group_desc;
d124 3
a126 3
	u_int8_t        tproto;
	u_int16_t       sport;
	u_int16_t       dport;
d131 4
a134 4
	u_int16_t       encap_mode;
	u_int16_t       auth;
	u_int16_t       keylen;
	u_int16_t       keyrounds;
d137 1
a137 1
	int32_t         replay_window;
d140 1
a140 1
	u_int8_t       *keymat[2];
d144 1
a144 1
extern int      ipsec_ah_keylength(struct proto *);
d146 18
a163 17
extern int      ipsec_decode_attribute(u_int16_t, u_int8_t *, u_int16_t, void *);
extern void	ipsec_decode_transform(struct message *, struct sa *,
		    struct proto *, u_int8_t *);
extern int      ipsec_esp_authkeylength(struct proto *);
extern int      ipsec_esp_enckeylength(struct proto *);
extern int      ipsec_fill_in_hash(struct message *);
extern int      ipsec_gen_g_x(struct message *);
extern int	ipsec_get_id(char *, int *, struct sockaddr **,
		    struct sockaddr **, u_int8_t *, u_int16_t *);
extern ssize_t  ipsec_id_size(char *, u_int8_t *);
extern char    *ipsec_id_string(u_int8_t *, size_t);
extern void     ipsec_init(void);
extern int      ipsec_initial_contact(struct message *);
extern int	ipsec_is_attribute_incompatible(u_int16_t, u_int8_t *,
		    u_int16_t, void *);
extern int      ipsec_keymat_length(struct proto *);
extern int      ipsec_save_g_x(struct message *);
d167 2
a168 2
		    size_t, int);
extern int      ipsec_clone_id(u_int8_t **, size_t *, u_int8_t *, size_t);
@


1.24
log
@More KNF.  Mainly spaces and line-wraps, no binary change.

ok ho@@
@
text
@d1 1
a1 1
/* $OpenBSD: ipsec.h,v 1.23 2004/04/15 18:39:25 deraadt Exp $	 */
a41 1
#ifdef USE_ISAKMP_CFG
a42 1
#endif
a99 1
#ifdef USE_ISAKMP_CFG
a103 1
#endif
@


1.23
log
@partial move to KNF.  More to come.  This has happened because there
are a raft of source code auditors who are willing to help improve this
code only if this is done, and hey, isakmpd does need our standard
auditing process.  ok ho hshoexer
@
text
@d1 1
a1 1
/* $OpenBSD: ipsec.h,v 1.22 2003/06/04 07:31:17 ho Exp $	 */
d70 2
a71 2
	 * A copy of the initiator SA payload body for later computation of hashes.
	 * Phase 1 only.
d147 1
a147 1
extern u_int8_t *ipsec_add_hash_payload(struct message * msg, size_t);
d151 2
a152 3
extern void
ipsec_decode_transform(struct message *, struct sa *,
		       struct proto *, u_int8_t *);
d155 1
a155 1
extern int      ipsec_fill_in_hash(struct message * msg);
d157 2
a158 3
extern int
ipsec_get_id(char *, int *, struct sockaddr **,
	     struct sockaddr **, u_int8_t *, u_int16_t *);
d162 3
a164 4
extern int      ipsec_initial_contact(struct message * msg);
extern int
ipsec_is_attribute_incompatible(u_int16_t, u_int8_t *, u_int16_t,
				void *);
d169 2
a170 3
extern char    *
ipsec_decode_ids(char *, u_int8_t *, size_t, u_int8_t *, size_t,
		 int);
@


1.22
log
@Remove the rest of clauses 3 and 4. Approved by Niklas Hallqvist, Angelos
D. Keromytis and Niels Provos.
@
text
@d1 2
a2 2
/*	$OpenBSD: ipsec.h,v 1.21 2002/06/09 08:13:06 todd Exp $	*/
/*	$EOM: ipsec.h,v 1.42 2000/12/03 07:58:20 angelos Exp $	*/
d60 41
a100 41
  u_int flags;
  struct hash *hash;
  struct ike_auth *ike_auth;
  struct group *group;
  u_int16_t prf_type;

  /* 0 if no KEY_EXCH was proposed, 1 otherwise */
  u_int8_t pfs;

  /*
   * A copy of the initiator SA payload body for later computation of hashes.
   * Phase 1 only.
   */
  size_t sa_i_b_len;
  u_int8_t *sa_i_b;

  /* Diffie-Hellman values.  */
  size_t g_x_len;
  u_int8_t *g_xi;
  u_int8_t *g_xr;
  u_int8_t* g_xy;

  /* SKEYIDs.  XXX Phase 1 only?  */
  size_t skeyid_len;
  u_int8_t *skeyid;
  u_int8_t *skeyid_d;
  u_int8_t *skeyid_a;
  u_int8_t *skeyid_e;

  /* HASH_I & HASH_R.  XXX Do these need to be saved here?  */
  u_int8_t *hash_i;
  u_int8_t *hash_r;

  /* KEYMAT */
  size_t keymat_len;

  /* Phase 2.  */
  u_int8_t *id_ci;
  size_t id_ci_sz;
  u_int8_t *id_cr;
  size_t id_cr_sz;
d103 4
a106 4
  /* ISAKMP configuration mode parameters */
  u_int16_t cfg_id;
  u_int16_t cfg_type;
  LIST_HEAD (isakmp_cfg_attr_head, isakmp_cfg_attr) attrs;
d113 18
a130 18
  /* Phase 1.  */
  u_int8_t hash;
  size_t skeyid_len;
  u_int8_t *skeyid_d;
  u_int8_t *skeyid_a;
  u_int16_t prf_type;

  /* Phase 2.  */
  u_int16_t group_desc;

  /* Tunnel parameters.  These are in network byte order.  */
  struct sockaddr *src_net;
  struct sockaddr *src_mask;
  struct sockaddr *dst_net;
  struct sockaddr *dst_mask;
  u_int8_t  tproto;
  u_int16_t sport;
  u_int16_t dport;
d134 5
a138 5
  /* Phase 2.  */
  u_int16_t encap_mode;
  u_int16_t auth;
  u_int16_t keylen;
  u_int16_t keyrounds;
d140 2
a141 2
  /* This is not negotiated, but rather configured.  */
  int32_t replay_window;
d143 2
a144 2
  /* KEYMAT */
  u_int8_t *keymat[2];
d147 29
a175 25
extern u_int8_t *ipsec_add_hash_payload (struct message *msg, size_t);
extern int ipsec_ah_keylength (struct proto *);
extern u_int8_t *ipsec_build_id (char *, size_t *);
extern int ipsec_decode_attribute (u_int16_t, u_int8_t *, u_int16_t, void *);
extern void ipsec_decode_transform (struct message *, struct sa *,
				    struct proto *, u_int8_t *);
extern int ipsec_esp_authkeylength (struct proto *);
extern int ipsec_esp_enckeylength (struct proto *);
extern int ipsec_fill_in_hash (struct message *msg);
extern int ipsec_gen_g_x (struct message *);
extern int ipsec_get_id (char *, int *, struct sockaddr **,
			 struct sockaddr **, u_int8_t *, u_int16_t *);
extern ssize_t ipsec_id_size (char *, u_int8_t *);
extern char *ipsec_id_string (u_int8_t *, size_t);
extern void ipsec_init (void);
extern int ipsec_initial_contact (struct message *msg);
extern int ipsec_is_attribute_incompatible (u_int16_t, u_int8_t *, u_int16_t,
					    void *);
extern int ipsec_keymat_length (struct proto *);
extern int ipsec_save_g_x (struct message *);
extern struct sa *ipsec_sa_lookup (struct sockaddr *, u_int32_t, u_int8_t);

extern char *ipsec_decode_ids(char *, u_int8_t *, size_t, u_int8_t *, size_t,
			      int);
extern int ipsec_clone_id(u_int8_t **, size_t *, u_int8_t *, size_t);
d177 1
a177 1
#endif /* _IPSEC_H_ */
@


1.21
log
@rm trailing whitespace
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsec.h,v 1.20 2002/06/08 23:09:46 ho Exp $	*/
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Ericsson Radio Systems.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.20
log
@add cfg_type
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsec.h,v 1.19 2001/08/22 08:49:00 niklas Exp $	*/
d162 1
a162 1
extern int ipsec_get_id (char *, int *, struct sockaddr **, 
@


1.19
log
@Add ipsec_id_string, a function for converting IDs to on epossible
string form, to be used for IKE mode config and raw key selection by ID.
Not yet used though.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsec.h,v 1.18 2001/07/01 20:43:39 niklas Exp $	*/
d110 2
a111 1
  LIST_HEAD (, isakmp_cfg_attr) attrs;
@


1.18
log
@ISAKMP configuration, a.k.a IKECFG or "mode-config", protocol implementation.
Disabled, has no configuration mechanism yet.  This will be used for roaming
users, who are going to get parameters like IP-address and nameserver from its
peer, very much like DHCP, but securily inside an ISAKMP connection and still
in time before negotiation of IPsec connections.  You may see stylistic fixes
in this commit too.  Add some not yet used Makefile magic to deal with DNSSEC-
enabled OpenSSL too.  The IKECFG code work was sponsered by Gatespace Inc.
Thank you!  Configuration will come very soon, btw.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsec.h,v 1.17 2001/06/29 04:12:00 ho Exp $	*/
d164 1
@


1.17
log
@Initial IPv6 support. (niklas@@ ok)
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsec.h,v 1.16 2001/06/27 03:31:41 angelos Exp $	*/
d5 1
a5 1
 * Copyright (c) 1998, 1999 Niklas Hallqvist.  All rights reserved.
d42 2
d47 3
d60 3
a62 2
 * XXX Should probably be two different structs, one for phase 1 and one
 * for phase 2 parameters.
d70 3
a72 1
  u_int8_t  pfs;	/* 0 if no KEY_EXCH was proposed, 1 otherwise */
d106 6
@


1.16
log
@Consistently use "IPsec" capitalization (jsyn@@nthought.com)
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsec.h,v 1.15 2000/12/12 01:44:59 niklas Exp $	*/
d7 1
d114 4
a117 4
  in_addr_t src_net;
  in_addr_t src_mask;
  in_addr_t dst_net;
  in_addr_t dst_mask;
d147 2
a148 2
extern int ipsec_get_id (char *, int *, struct in_addr *, struct in_addr *,
			 u_int8_t *, u_int16_t *);
d156 1
a156 1
extern struct sa *ipsec_sa_lookup (in_addr_t, u_int32_t, u_int8_t);
@


1.15
log
@Merge with EOM 1.42

author: angelos
isakmpd can now negotiate transport protocol/ports (either through the
configuration file or through kernel ACQUIREs).
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsec.h,v 1.14 2000/08/03 07:24:48 niklas Exp $	*/
d53 1
a53 1
 * IPSEC-specific data to be linked into the exchange struct.
@


1.14
log
@Merge with EOM 1.41

author: provos
introduce ipsec_decode_ids, also decodes FQDN and USER_FQDN now.
new ipsec_clone_id to copy IDs to phase 2 SAs for better status
reports. okay angelos@@
@
text
@d1 2
a2 2
/*	$OpenBSD: ipsec.h,v 1.13 2000/02/01 02:46:18 niklas Exp $	*/
/*	$EOM: ipsec.h,v 1.41 2000/07/01 23:30:41 provos Exp $	*/
d117 3
d146 2
a147 1
extern int ipsec_get_id (char *, int *, struct in_addr *, struct in_addr *);
@


1.14.2.1
log
@Pull in isakmpd from 2.9 to 2.8 branch.
@
text
@d1 2
a2 2
/*	$OpenBSD: ipsec.h,v 1.15 2000/12/12 01:44:59 niklas Exp $	*/
/*	$EOM: ipsec.h,v 1.42 2000/12/03 07:58:20 angelos Exp $	*/
a116 3
  u_int8_t  tproto;
  u_int16_t sport;
  u_int16_t dport;
d143 1
a143 2
extern int ipsec_get_id (char *, int *, struct in_addr *, struct in_addr *,
			 u_int8_t *, u_int16_t *);
@


1.13
log
@apps/certpatch/certpatch.8: Merge with EOM 1.4
apps/certpatch/certpatch.c: Merge with EOM 1.6
exchange.c: Merge with EOM 1.114
ike_quick_mode.c: Merge with EOM 1.110
ike_phase_1.c: Merge with EOM 1.16
ike_auth.c: Merge with EOM 1.41
ike_aggressive.c: Merge with EOM 1.4
libcrypto.c: Merge with EOM 1.10
libcrypto.h: Merge with EOM 1.10
isakmpd.8: Merge with EOM 1.19
isakmpd.c: Merge with EOM 1.42
ipsec.h: Merge with EOM 1.40
init.c: Merge with EOM 1.22
message.c: Merge with EOM 1.143
message.h: Merge with EOM 1.49
sa.c: Merge with EOM 1.98
sa.h: Merge with EOM 1.54
policy.c: Merge with EOM 1.14
pf_key_v2.c: Merge with EOM 1.36
x509.c: Merge with EOM 1.32
x509.h: Merge with EOM 1.9
udp.c: Merge with EOM 1.46

author: niklas
Angelos copyrights
@
text
@d1 2
a2 2
/*	$OpenBSD: ipsec.h,v 1.12 2000/01/26 15:25:01 niklas Exp $	*/
/*	$EOM: ipsec.h,v 1.40 2000/01/31 22:33:46 niklas Exp $	*/
d152 4
@


1.12
log
@Merge with EOM 1.39

author: angelos
Oops on previous PFS-policy patch. Small fixes in the manpages.
@
text
@d1 2
a2 2
/*	$OpenBSD: ipsec.h,v 1.11 1999/08/05 22:41:31 niklas Exp $	*/
/*	$EOM: ipsec.h,v 1.39 1999/10/10 21:46:49 angelos Exp $	*/
d6 1
@


1.11
log
@Merge with EOM 1.38

author: niklas
Fix no ID in QM, when acting as responder, bug
@
text
@d1 2
a2 2
/*	$OpenBSD: ipsec.h,v 1.10 1999/07/07 22:13:08 niklas Exp $	*/
/*	$EOM: ipsec.h,v 1.38 1999/07/25 09:12:36 niklas Exp $	*/
d62 1
@


1.10
log
@ipsec.c: Merge with EOM 1.113
ipsec.h: Merge with EOM 1.37

author: niklas
Add a function giving the size of a certain ID-payload
@
text
@d1 2
a2 2
/*	$OpenBSD: ipsec.h,v 1.9 1999/05/02 19:20:33 niklas Exp $	*/
/*	$EOM: ipsec.h,v 1.37 1999/06/10 13:34:58 niklas Exp $	*/
d57 1
d96 2
@


1.9
log
@BUGS: Merge with EOM 1.31
doi.h: Merge with EOM 1.27
ike_auth.c: Merge with EOM 1.30
ike_quick_mode.c: Merge with EOM 1.85
ipsec.c: Merge with EOM 1.107
ipsec.h: Merge with EOM 1.36
isakmp_doi.c: Merge with EOM 1.39

author: niklas
Factor out keyed hashing of all payloads with SKEYID_a, and make DOI hooks
for informational exchanges to add such hashing.  Use it from QM and the IKE
authentication module too.  Remove some bogus XXX comments.  Add error
reporting
@
text
@d1 2
a2 2
/*	$OpenBSD: ipsec.h,v 1.8 1999/04/27 21:11:54 niklas Exp $	*/
/*	$EOM: ipsec.h,v 1.36 1999/05/02 12:48:55 niklas Exp $	*/
d139 1
@


1.8
log
@ike_aggressive.c: Merge with EOM 1.2
ike_main_mode.c: Merge with EOM 1.77
ipsec.h: Merge with EOM 1.35

author: niklas
Send out INITIAL-CONTACT notifications
@
text
@d1 2
a2 2
/*	$OpenBSD: ipsec.h,v 1.7 1999/04/19 19:54:54 niklas Exp $	*/
/*	$EOM: ipsec.h,v 1.35 1999/04/25 22:12:37 niklas Exp $	*/
d128 1
d136 1
@


1.7
log
@./app.c: Merge with EOM 1.5
./gmp_util.c: Merge with EOM 1.3
./asn_useful.c: Merge with EOM 1.11
./attribute.c: Merge with EOM 1.9
./constants.c: Merge with EOM 1.7
./doi.h: Merge with EOM 1.25
./doi.c: Merge with EOM 1.4
./field.c: Merge with EOM 1.9
./init.c: Merge with EOM 1.13
./isakmp_doi.c: Merge with EOM 1.35
./prf.c: Merge with EOM 1.6
./util.c: Merge with EOM 1.14
./app.h: Merge with EOM 1.4
./conf.h: Merge with EOM 1.8
./ipsec.h: Merge with EOM 1.34
./ipsec_doi.h: Merge with EOM 1.10
./pkcs.h: Merge with EOM 1.8
./sysdep.h: Merge with EOM 1.15

1999 copyrights
@
text
@d1 2
a2 2
/*	$OpenBSD: ipsec.h,v 1.6 1999/03/31 14:27:37 niklas Exp $	*/
/*	$EOM: ipsec.h,v 1.34 1999/04/02 00:57:49 niklas Exp $	*/
d138 1
@


1.6
log
@ipsec.c: Merge with EOM 1.86
ipsec.h: Merge with EOM 1.33
pf_encap.c: Merge with EOM 1.52
pf_key_v2.c: Merge with EOM 1.3

Fix case of missing client ID payloads, a case the standards allow.  Thanks
to Michael Paddon (mwp@@aba.net.au) for the diffs I based my fix upon.  His
diff also made me realize I stored the address information in host order in
internal structures where I had planned to use network order.  Fix this,
and remove the XXXes I had due to this elsewhere.  Add commentary.
@
text
@d1 2
a2 2
/*	$OpenBSD: ipsec.h,v 1.5 1999/02/26 03:44:04 niklas Exp $	*/
/*	$EOM: ipsec.h,v 1.33 1999/03/31 14:19:52 niklas Exp $	*/
d5 1
a5 1
 * Copyright (c) 1998 Niklas Hallqvist.  All rights reserved.
@


1.5
log
@Merge from the Ericsson repository
| revision 1.32
| date: 1999/02/25 09:30:26;  author: niklas;  state: Exp;  lines: +4 -1
| Replay protection window configurable
| ----------------------------
| revision 1.31
| date: 1999/02/14 00:21:12;  author: niklas;  state: Exp;  lines: +2 -1
| Find relevant SAs out of IPsec expiration info.  Do not automatically rekey.
| ----------------------------
| revision 1.30
| date: 1999/01/31 01:17:01;  author: niklas;  state: Exp;  lines: +4 -1
| splitup ipsec_build_id into more useful API
| ----------------------------
@
text
@d1 2
a2 2
/*	$OpenBSD: ipsec.h,v 1.4 1998/12/21 01:02:25 niklas Exp $	*/
/*	$EOM: ipsec.h,v 1.32 1999/02/25 09:30:26 niklas Exp $	*/
d107 1
a107 1
  /* Tunnel parameters.  */
@


1.4
log
@Last months worth of work on isakmpd, lots done
@
text
@d1 2
a2 2
/*	$OpenBSD: ipsec.h,v 1.3 1998/11/17 11:10:13 niklas Exp $	*/
/*	$EOM: ipsec.h,v 1.29 1998/11/26 09:15:45 niklas Exp $	*/
d40 2
d121 3
d136 1
d142 1
@


1.3
log
@Add RCS Ids from the EOM repository
@
text
@d1 2
a2 2
/*	$OpenBSD: ipsec.h,v 1.2 1998/11/15 00:43:56 niklas Exp $	*/
/*	$EOM: ipsec.h,v 1.28 1998/11/14 13:20:11 niklas Exp $	*/
d86 6
d104 6
d124 1
@


1.2
log
@openBSD RCS IDs
@
text
@d1 2
a2 1
/*	$OpenBSD: ipsec.h,v 1.1.1.1 1998/11/15 00:03:48 niklas Exp $	*/
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$Id: ipsec.h,v 1.28 1998/11/14 13:20:11 niklas Exp $	*/
@


1.1.1.1
log
@Initial import of isakmpd, an IKE (ISAKMP/Oakley) implementation for the
OpenBSD IPSEC stack by me, Niklas Hallqvist and Niels Provos, funded by
Ericsson Radio Systems.  It is not yet complete or usable in a real scenario
but the missing pieces will soon be there.  The early commit is for people
who wants early access and who are not afraid of looking at source.
isakmpd interops with Cisco, Timestep, SSH & Pluto (Linux FreeS/WAN) so
far, so it is not that incomplete.  It is really mostly configuration that
is lacking.
@
text
@@
