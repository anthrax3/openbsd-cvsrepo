head	1.19;
access;
symbols
	OPENBSD_6_2:1.19.0.52
	OPENBSD_6_2_BASE:1.19
	OPENBSD_6_1:1.19.0.50
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.19.0.46
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.19.0.42
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.19.0.44
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.19.0.36
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.19.0.40
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.19.0.38
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.19.0.34
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.19.0.32
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.19.0.30
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.19
	OPENBSD_5_1:1.19.0.28
	OPENBSD_5_0:1.19.0.26
	OPENBSD_5_0_BASE:1.19
	OPENBSD_4_9:1.19.0.24
	OPENBSD_4_9_BASE:1.19
	OPENBSD_4_8:1.19.0.22
	OPENBSD_4_8_BASE:1.19
	OPENBSD_4_7:1.19.0.18
	OPENBSD_4_7_BASE:1.19
	OPENBSD_4_6:1.19.0.20
	OPENBSD_4_6_BASE:1.19
	OPENBSD_4_5:1.19.0.16
	OPENBSD_4_5_BASE:1.19
	OPENBSD_4_4:1.19.0.14
	OPENBSD_4_4_BASE:1.19
	OPENBSD_4_3:1.19.0.12
	OPENBSD_4_3_BASE:1.19
	OPENBSD_4_2:1.19.0.10
	OPENBSD_4_2_BASE:1.19
	OPENBSD_4_1:1.19.0.8
	OPENBSD_4_1_BASE:1.19
	OPENBSD_4_0:1.19.0.6
	OPENBSD_4_0_BASE:1.19
	OPENBSD_3_9:1.19.0.4
	OPENBSD_3_9_BASE:1.19
	OPENBSD_3_8:1.19.0.2
	OPENBSD_3_8_BASE:1.19
	OPENBSD_3_7:1.16.0.4
	OPENBSD_3_7_BASE:1.16
	OPENBSD_3_6:1.16.0.2
	OPENBSD_3_6_BASE:1.16
	OPENBSD_3_5:1.15.0.4
	OPENBSD_3_5_BASE:1.15
	OPENBSD_3_4:1.15.0.2
	OPENBSD_3_4_BASE:1.15
	OPENBSD_3_3:1.14.0.4
	OPENBSD_3_3_BASE:1.14
	OPENBSD_3_2:1.14.0.2
	OPENBSD_3_2_BASE:1.14
	OPENBSD_3_1:1.13.0.4
	OPENBSD_3_1_BASE:1.13
	OPENBSD_3_0:1.13.0.2
	OPENBSD_3_0_BASE:1.13
	OPENBSD_2_9:1.11.0.2
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_8:1.7.0.2
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.6.0.2
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2;
locks; strict;
comment	@ * @;


1.19
date	2005.04.08.22.32.10;	author cloder;	state Exp;
branches;
next	1.18;

1.18
date	2005.04.08.17.15.01;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2005.04.05.20.46.20;	author cloder;	state Exp;
branches;
next	1.16;

1.16
date	2004.04.15.18.39.26;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2003.06.04.07.31.17;	author ho;	state Exp;
branches;
next	1.14;

1.14
date	2002.06.10.18.08.58;	author ho;	state Exp;
branches;
next	1.13;

1.13
date	2001.07.13.14.13.38;	author ho;	state Exp;
branches;
next	1.12;

1.12
date	2001.07.05.07.45.52;	author angelos;	state Exp;
branches;
next	1.11;

1.11
date	2001.01.27.15.39.55;	author ho;	state Exp;
branches;
next	1.10;

1.10
date	2001.01.27.12.03.33;	author niklas;	state Exp;
branches;
next	1.9;

1.9
date	2001.01.26.12.12.52;	author niklas;	state Exp;
branches;
next	1.8;

1.8
date	2000.12.19.22.00.02;	author markus;	state Exp;
branches;
next	1.7;

1.7
date	2000.10.07.06.57.08;	author niklas;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2000.04.07.22.06.20;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	2000.02.07.01.32.54;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	2000.02.01.02.46.18;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	2000.01.31.08.19.13;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	99.10.01.14.09.04;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	99.08.28.11.54.55;	author niklas;	state Exp;
branches;
next	;

1.7.2.1
date	2001.05.08.12.45.24;	author ho;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Make deterministic randomness (only ever used for testing) a compile-time
option.  Reduces chances of somehow setting regrand when it's not supposed
to be set.  Remove "-r" option from man page.  Also xref certpatch(8) while
we are in there.  And remove some include sysdep.h where it is no longer
needed.
OK hshoexer
@
text
@/* $OpenBSD: libcrypto.c,v 1.18 2005/04/08 17:15:01 deraadt Exp $	 */
/* $EOM: libcrypto.c,v 1.14 2000/09/28 12:53:27 niklas Exp $	 */

/*
 * Copyright (c) 1999, 2000, 2001 Niklas Hallqvist.  All rights reserved.
 * Copyright (c) 1999, 2000 Angelos D. Keromytis.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This code was written under funding by Ericsson Radio Systems.
 */

#include "libcrypto.h"

void
libcrypto_init(void)
{
	/* Add all algorithms known by SSL */
#if OPENSSL_VERSION_NUMBER >= 0x00905100L
	OpenSSL_add_all_algorithms();
#else
	SSLeay_add_all_algorithms();
#endif
}
@


1.18
log
@keynote and policy always compiled in
@
text
@d1 1
a1 1
/* $OpenBSD: libcrypto.c,v 1.17 2005/04/05 20:46:20 cloder Exp $	 */
a32 1
#include "sysdep.h"
@


1.17
log
@Always compile X509 support. Almost everyone uses it.  Makes the code
much easier to read and to maintain.
OK and testing by hshoexer@@, more testing by me
@
text
@d1 1
a1 1
/* $OpenBSD: libcrypto.c,v 1.16 2004/04/15 18:39:26 deraadt Exp $	 */
a38 2
#if defined (USE_LIBCRYPTO)

a44 2

#endif /* USE_LIBCRYPTO */
@


1.16
log
@partial move to KNF.  More to come.  This has happened because there
are a raft of source code auditors who are willing to help improve this
code only if this is done, and hey, isakmpd does need our standard
auditing process.  ok ho hshoexer
@
text
@d1 1
a1 1
/* $OpenBSD: libcrypto.c,v 1.15 2003/06/04 07:31:17 ho Exp $	 */
d39 1
a39 1
#if defined (USE_X509) && defined (USE_LIBCRYPTO)
d48 1
a48 1
#endif /* USE_X509 && USE_LIBCRYPTO */
@


1.15
log
@Remove the rest of clauses 3 and 4. Approved by Niklas Hallqvist, Angelos
D. Keromytis and Niels Provos.
@
text
@d1 2
a2 2
/*	$OpenBSD: libcrypto.c,v 1.14 2002/06/10 18:08:58 ho Exp $	*/
/*	$EOM: libcrypto.c,v 1.14 2000/09/28 12:53:27 niklas Exp $	*/
d37 1
a37 1
libcrypto_init (void)
d41 1
a41 1
  /* Add all algorithms known by SSL */
d43 1
a43 1
  OpenSSL_add_all_algorithms ();
d45 1
a45 1
  SSLeay_add_all_algorithms ();
a49 1

@


1.14
log
@The dlopen() stuff goes away.
@
text
@d1 1
a1 1
/*	$OpenBSD: libcrypto.c,v 1.13 2001/07/13 14:13:38 ho Exp $	*/
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Ericsson Radio Systems.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.13
log
@Add lc_X509_verify_cert_error_string().
@
text
@d1 1
a1 1
/*	$OpenBSD: libcrypto.c,v 1.12 2001/07/05 07:45:52 angelos Exp $	*/
a38 2

#include "dyn.h"
a40 159
void *libcrypto = 0;

#ifdef USE_X509

#ifdef HAVE_DLOPEN

/*
 * These prototypes matches SSLeay version 0.9.0b or OpenSSL 0.9.4, if
 * you try to load a different version than that, you are on your own.
 */
char *(*lc_ASN1_d2i_bio) (char *(*) (), char *(*) (), BIO *bp,
			  unsigned char **);
char *(*lc_ASN1_dup) (int (*) (), char *(*) (), char *);
long (*lc_BIO_ctrl) (BIO *bp, int, long, char *);
int (*lc_BIO_free) (BIO *a);
BIO *(*lc_BIO_new) (BIO_METHOD *type);
int (*lc_BIO_write) (BIO *, char *, int);
BIO_METHOD *(*lc_BIO_s_file) (void);
BIO_METHOD *(*lc_BIO_s_mem) (void);
BIGNUM *(*lc_BN_bin2bn) (const unsigned char *, int, BIGNUM *);
int (*lc_BN_num_bits) (const BIGNUM *);
int (*lc_BN_print_fp) (FILE *, BIGNUM *);
char *(*lc_PEM_ASN1_read_bio) (char *(*) (), char *, BIO *, char **,
			       int (*) ());
void (*lc_RSA_free) (RSA *);
RSA *(*lc_RSA_new) (void);
RSA *(*lc_RSA_generate_key) (int, unsigned long, void (*) (int, int, char *),
			     char *);
int (*lc_RSA_private_encrypt) (int, unsigned char *, unsigned char *, RSA *,
			       int);
int (*lc_RSA_public_decrypt) (int, unsigned char *, unsigned char *, RSA *,
			      int);
int (*lc_RSA_size) (RSA *);
#if OPENSSL_VERSION_NUMBER >= 0x00905100L
void (*lc_OpenSSL_add_all_algorithms) (void);
#else
void (*lc_SSLeay_add_all_algorithms) (void);
#endif
int (*lc_X509_NAME_cmp) (X509_NAME *, X509_NAME *);
void (*lc_X509_STORE_CTX_cleanup) (X509_STORE_CTX *);
void (*lc_X509_OBJECT_free_contents) (X509_OBJECT *);

#if SSLEAY_VERSION_NUMBER >= 0x00904100L
void (*lc_X509_STORE_CTX_init) (X509_STORE_CTX *, X509_STORE *, X509 *,
				STACK_OF (X509) *);
#else
void (*lc_X509_STORE_CTX_init) (X509_STORE_CTX *, X509_STORE *, X509 *,
				STACK *);
#endif

int (*lc_X509_STORE_add_cert) (X509_STORE *, X509 *);
X509_STORE *(*lc_X509_STORE_new) (void);
void (*lc_X509_STORE_free) (X509_STORE *);
X509 *(*lc_X509_dup) (X509 *);
void (*lc_X509_free) (X509 *);
X509_EXTENSION *(*lc_X509_get_ext) (X509 *, int);
int (*lc_X509_get_ext_by_NID) (X509 *, int, int);
X509_NAME *(*lc_X509_get_issuer_name) (X509 *);
EVP_PKEY *(*lc_X509_get_pubkey) (X509 *);
X509_NAME *(*lc_X509_get_subject_name) (X509 *);
X509 *(*lc_X509_new) (void);
int (*lc_X509_verify) (X509 *, EVP_PKEY *);
int (*lc_X509_verify_cert) (X509_STORE_CTX *);
char *(*lc_X509_verify_cert_error_string) (int);
RSA *(*lc_d2i_RSAPrivateKey) (RSA **, unsigned char **, long);
RSA *(*lc_d2i_RSAPublicKey) (RSA **, unsigned char **, long);
X509 *(*lc_d2i_X509) (X509 **, unsigned char **, long);
char *(*lc_X509_NAME_oneline) (X509_NAME *, char *, int);
int (*lc_i2d_RSAPublicKey) (RSA *, unsigned char **);
int (*lc_i2d_RSAPrivateKey) (RSA *, unsigned char **);
int (*lc_i2d_X509) (X509 *, unsigned char **);
int (*lc_i2d_X509_NAME) (X509_NAME *, unsigned char **);
X509_NAME * (*lc_d2i_X509_NAME) (X509_NAME **, unsigned char **, int);
#if (SSLEAY_VERSION_NUMBER >= 0x00904100L \
     && SSLEAY_VERSION_NUMBER < 0x0090600fL)
void (*lc_sk_X509_free) (STACK_OF (X509) *);
STACK_OF (X509) *(*lc_sk_X509_new_null) ();
#else
void (*lc_sk_free) (STACK *);
STACK *(*lc_sk_new) (int (*) ());
#endif

#if SSLEAY_VERSION_NUMBER >= 0x00904100L
X509 *(*lc_X509_find_by_subject) (STACK_OF (X509) *, X509_NAME *);
#else
X509 *(*lc_X509_find_by_subject) (STACK *, X509_NAME *);
#endif

int (*lc_X509_STORE_get_by_subject) (X509_STORE_CTX *, int, X509_NAME *,
				     X509_OBJECT *);

#define SYMENTRY(x) { SYM, SYM (x), (void **)&lc_ ## x }

static struct dynload_script libcrypto_script[] = {
  { LOAD, "libc.so", &libcrypto },
  { LOAD, "libcrypto.so", &libcrypto },
  SYMENTRY (ASN1_d2i_bio),
  SYMENTRY (ASN1_dup),
  SYMENTRY (BIO_ctrl),
  SYMENTRY (BIO_free),
  SYMENTRY (BIO_new),
  SYMENTRY (BIO_write),
  SYMENTRY (BIO_s_file),
  SYMENTRY (BIO_s_mem),
  SYMENTRY (BN_print_fp),
  SYMENTRY (PEM_ASN1_read_bio),
  SYMENTRY (RSA_generate_key),
  SYMENTRY (RSA_free),
  SYMENTRY (RSA_private_encrypt),
  SYMENTRY (RSA_public_decrypt),
  SYMENTRY (RSA_size),
#if OPENSSL_VERSION_NUMBER >= 0x00905100L
  SYMENTRY (OpenSSL_add_all_algorithms),
#else
  SYMENTRY (SSLeay_add_all_algorithms),
#endif
  SYMENTRY (X509_NAME_cmp),
  SYMENTRY (X509_STORE_CTX_cleanup),
  SYMENTRY (X509_STORE_CTX_init),
  SYMENTRY (X509_STORE_add_cert),
  SYMENTRY (X509_STORE_new),
  SYMENTRY (X509_STORE_free),
  SYMENTRY (X509_dup),
  SYMENTRY (X509_find_by_subject),
  SYMENTRY (X509_free),
  SYMENTRY (X509_get_ext),
  SYMENTRY (X509_get_ext_by_NID),
  SYMENTRY (X509_get_issuer_name),
  SYMENTRY (X509_get_pubkey),
  SYMENTRY (X509_get_subject_name),
  SYMENTRY (X509_new),
  SYMENTRY (X509_verify),
  SYMENTRY (X509_verify_cert),
  SYMENTRY (X509_verify_cert_error_string),
  SYMENTRY (X509_STORE_get_by_subject),
  SYMENTRY (X509_OBJECT_free_contents),
  SYMENTRY (X509_NAME_oneline),
  SYMENTRY (d2i_RSAPrivateKey),
  SYMENTRY (d2i_RSAPublicKey),
  SYMENTRY (d2i_X509),
  SYMENTRY (i2d_RSAPublicKey),
  SYMENTRY (i2d_RSAPrivateKey),
  SYMENTRY (i2d_X509),
  SYMENTRY (i2d_X509_NAME),
  SYMENTRY (d2i_X509_NAME),
#if (SSLEAY_VERSION_NUMBER >= 0x00904100L \
     && SSLEAY_VERSION_NUMBER < 0x0090600fL)
  SYMENTRY (sk_X509_free),
  SYMENTRY (sk_X509_new_null),
#else
  SYMENTRY (sk_free),
  SYMENTRY (sk_new),
#endif
  { EOS }
};
#endif

#endif /* USE_X509 */

d44 1
a44 12
#ifdef USE_X509
#ifdef HAVE_DLOPEN
  dyn_load (libcrypto_script);
#elif !defined (USE_LIBCRYPTO)
  return;
#endif

  /*
   * XXX Do something imaginative with libcrypto here.  The problem is if
   * the dynload fails libcrypto will be 0 which is good for the macros but
   * not the tests for support.
   */
a45 1
#if defined (USE_LIBCRYPTO)
d48 1
a48 1
  LC (OpenSSL_add_all_algorithms, ());
d50 1
a50 1
  LC (SSLeay_add_all_algorithms, ());
d52 2
a53 2
#endif
#endif /* USE_X509 */
@


1.12
log
@Add d2i_X509_NAME
@
text
@d1 1
a1 1
/*	$OpenBSD: libcrypto.c,v 1.11 2001/01/27 15:39:55 ho Exp $	*/
d106 1
d176 1
@


1.11
log
@Call OpenSSL functions with LC (). Various style nits.
@
text
@d1 1
a1 1
/*	$OpenBSD: libcrypto.c,v 1.10 2001/01/27 12:03:33 niklas Exp $	*/
d114 1
d185 1
@


1.10
log
@(c) 2001
@
text
@d1 1
a1 1
/*	$OpenBSD: libcrypto.c,v 1.9 2001/01/26 12:12:52 niklas Exp $	*/
d62 2
d68 1
@


1.9
log
@Pedantic style police
@
text
@d1 1
a1 1
/*	$OpenBSD: libcrypto.c,v 1.8 2000/12/19 22:00:02 markus Exp $	*/
d5 1
a5 1
 * Copyright (c) 1999, 2000 Niklas Hallqvist.  All rights reserved.
@


1.8
log
@make sure isakmpd works with the openssl-0.9.6 API
@
text
@d1 1
a1 1
/*	$OpenBSD: libcrypto.c,v 1.7 2000/10/07 06:57:08 niklas Exp $	*/
d111 2
a112 1
#if (SSLEAY_VERSION_NUMBER >= 0x00904100L && SSLEAY_VERSION_NUMBER < 0x0090600fL)
d181 2
a182 1
#if (SSLEAY_VERSION_NUMBER >= 0x00904100L && SSLEAY_VERSION_NUMBER < 0x0090600fL)
@


1.7
log
@cert.c: Merge with EOM 1.18
cert.h: Merge with EOM 1.8
libcrypto.c: Merge with EOM 1.14
policy.h: Merge with EOM 1.12
x509.h: Merge with EOM 1.11

author: niklas
Multiple subject name matching, makes certificate interop with PGPnet at least
partly working.  Added some error checking.
@
text
@d1 1
a1 1
/*	$OpenBSD: libcrypto.c,v 1.6 2000/04/07 22:06:20 niklas Exp $	*/
d111 1
a111 1
#if SSLEAY_VERSION_NUMBER >= 0x00904100L
d180 1
a180 1
#if SSLEAY_VERSION_NUMBER >= 0x00904100L
@


1.7.2.1
log
@Pull in isakmpd from 2.9 to 2.8 branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: libcrypto.c,v 1.11 2001/01/27 15:39:55 ho Exp $	*/
d5 1
a5 1
 * Copyright (c) 1999, 2000, 2001 Niklas Hallqvist.  All rights reserved.
a61 2
BIGNUM *(*lc_BN_bin2bn) (const unsigned char *, int, BIGNUM *);
int (*lc_BN_num_bits) (const BIGNUM *);
a65 1
RSA *(*lc_RSA_new) (void);
d111 1
a111 2
#if (SSLEAY_VERSION_NUMBER >= 0x00904100L \
     && SSLEAY_VERSION_NUMBER < 0x0090600fL)
d180 1
a180 2
#if (SSLEAY_VERSION_NUMBER >= 0x00904100L \
     && SSLEAY_VERSION_NUMBER < 0x0090600fL)
@


1.6
log
@libcrypto.c: Merge with EOM 1.13
libcrypto.h: Merge with EOM 1.14

author: ho
Name change for 0.9.5; {SSLeay,OpenSSL}_add_all_algorithms.

author: ho
Missing #ifdef USE_X509 added
@
text
@d1 2
a2 2
/*	$OpenBSD: libcrypto.c,v 1.5 2000/02/07 01:32:54 niklas Exp $	*/
/*	$EOM: libcrypto.c,v 1.13 2000/03/31 15:29:03 ho Exp $	*/
d5 1
a5 1
 * Copyright (c) 1999 Niklas Hallqvist.  All rights reserved.
d110 1
d179 1
@


1.5
log
@ike_quick_mode.c: Merge with EOM 1.111
libcrypto.c: Merge with EOM 1.11
libcrypto.h: Merge with EOM 1.11
x509.c: Merge with EOM 1.33

author: angelos
Add Canonical Names as policy targets (so they can be specified in the
Licensees field), with the "CN:..." format.
@
text
@d1 2
a2 2
/*	$OpenBSD: libcrypto.c,v 1.4 2000/02/01 02:46:18 niklas Exp $	*/
/*	$EOM: libcrypto.c,v 1.11 2000/02/07 01:30:36 angelos Exp $	*/
d45 2
d73 3
d77 1
d147 3
d151 1
d189 2
d194 1
d209 3
d214 2
d217 1
@


1.4
log
@apps/certpatch/certpatch.8: Merge with EOM 1.4
apps/certpatch/certpatch.c: Merge with EOM 1.6
exchange.c: Merge with EOM 1.114
ike_quick_mode.c: Merge with EOM 1.110
ike_phase_1.c: Merge with EOM 1.16
ike_auth.c: Merge with EOM 1.41
ike_aggressive.c: Merge with EOM 1.4
libcrypto.c: Merge with EOM 1.10
libcrypto.h: Merge with EOM 1.10
isakmpd.8: Merge with EOM 1.19
isakmpd.c: Merge with EOM 1.42
ipsec.h: Merge with EOM 1.40
init.c: Merge with EOM 1.22
message.c: Merge with EOM 1.143
message.h: Merge with EOM 1.49
sa.c: Merge with EOM 1.98
sa.h: Merge with EOM 1.54
policy.c: Merge with EOM 1.14
pf_key_v2.c: Merge with EOM 1.36
x509.c: Merge with EOM 1.32
x509.h: Merge with EOM 1.9
udp.c: Merge with EOM 1.46

author: niklas
Angelos copyrights
@
text
@d1 2
a2 2
/*	$OpenBSD: libcrypto.c,v 1.3 2000/01/31 08:19:13 niklas Exp $	*/
/*	$EOM: libcrypto.c,v 1.10 2000/01/31 22:33:46 niklas Exp $	*/
d100 1
d161 1
@


1.3
log
@libcrypto.c: Merge with EOM 1.9
libcrypto.h: Merge with EOM 1.9

author: angelos
Make x509_cert_init() able to re-initialize.

author: angelos
Add prototypes for a few more X509 SSL calls.
@
text
@d1 2
a2 2
/*	$OpenBSD: libcrypto.c,v 1.2 1999/10/01 14:09:04 niklas Exp $	*/
/*	$EOM: libcrypto.c,v 1.9 2000/01/31 05:50:59 angelos Exp $	*/
d6 1
@


1.2
log
@Merge with EOM 1.7

author: niklas
OpenSSL 0.9.4 support

author: angelos
blah
@
text
@d1 2
a2 2
/*	$OpenBSD: libcrypto.c,v 1.1 1999/08/28 11:54:55 niklas Exp $	*/
/*	$EOM: libcrypto.c,v 1.7 1999/09/30 13:40:38 niklas Exp $	*/
d73 1
d85 1
d116 3
d145 1
d157 2
@


1.1
log
@Sync with EOM, dynamic linking support
@
text
@d1 2
a2 2
/*	$OpenBSD: libcrypto.c,v 1.5 1999/08/26 11:16:48 niklas Exp $	*/
/*	$EOM: libcrypto.c,v 1.5 1999/08/26 11:16:48 niklas Exp $	*/
d47 2
a48 2
 * These prototypes matches SSLeay version 0.9.0b, if you try to load
 * a different version than that, you are on your own.
d73 5
d80 2
d100 11
d112 2
d157 7
@

