head	1.20;
access;
symbols
	OPENBSD_6_1:1.20.0.26
	OPENBSD_6_1_BASE:1.20
	OPENBSD_6_0:1.20.0.24
	OPENBSD_6_0_BASE:1.20
	OPENBSD_5_9:1.20.0.20
	OPENBSD_5_9_BASE:1.20
	OPENBSD_5_8:1.20.0.22
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.20.0.14
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.20.0.18
	OPENBSD_5_6_BASE:1.20
	OPENBSD_5_5:1.20.0.16
	OPENBSD_5_5_BASE:1.20
	OPENBSD_5_4:1.20.0.12
	OPENBSD_5_4_BASE:1.20
	OPENBSD_5_3:1.20.0.10
	OPENBSD_5_3_BASE:1.20
	OPENBSD_5_2:1.20.0.8
	OPENBSD_5_2_BASE:1.20
	OPENBSD_5_1_BASE:1.20
	OPENBSD_5_1:1.20.0.6
	OPENBSD_5_0:1.20.0.4
	OPENBSD_5_0_BASE:1.20
	OPENBSD_4_9:1.20.0.2
	OPENBSD_4_9_BASE:1.20
	OPENBSD_4_8:1.18.0.18
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.18.0.14
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.18.0.16
	OPENBSD_4_6_BASE:1.18
	OPENBSD_4_5:1.18.0.12
	OPENBSD_4_5_BASE:1.18
	OPENBSD_4_4:1.18.0.10
	OPENBSD_4_4_BASE:1.18
	OPENBSD_4_3:1.18.0.8
	OPENBSD_4_3_BASE:1.18
	OPENBSD_4_2:1.18.0.6
	OPENBSD_4_2_BASE:1.18
	OPENBSD_4_1:1.18.0.4
	OPENBSD_4_1_BASE:1.18
	OPENBSD_4_0:1.18.0.2
	OPENBSD_4_0_BASE:1.18
	OPENBSD_3_9:1.17.0.4
	OPENBSD_3_9_BASE:1.17
	OPENBSD_3_8:1.17.0.2
	OPENBSD_3_8_BASE:1.17
	OPENBSD_3_7:1.15.0.2
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.14.0.2
	OPENBSD_3_6_BASE:1.14
	OPENBSD_3_5:1.12.0.2
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.7.0.4
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.4.0.8
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.6
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.2
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.3.0.6
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.4
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	NIKLAS_981114:1.1.1.1
	NIKLAS:1.1.1;
locks; strict;
comment	@ * @;


1.20
date	2010.10.19.07.47.34;	author mikeb;	state Exp;
branches;
next	1.19;

1.19
date	2010.10.15.10.18.42;	author jsg;	state Exp;
branches;
next	1.18;

1.18
date	2006.06.02.19.35.55;	author hshoexer;	state Exp;
branches;
next	1.17;

1.17
date	2005.04.08.18.39.12;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2005.04.08.16.06.25;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2005.01.31.10.07.59;	author hshoexer;	state Exp;
branches;
next	1.14;

1.14
date	2004.05.14.08.42.56;	author hshoexer;	state Exp;
branches;
next	1.13;

1.13
date	2004.04.15.18.39.25;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2003.12.22.18.13.58;	author markus;	state Exp;
branches;
next	1.11;

1.11
date	2003.09.24.11.12.31;	author markus;	state Exp;
branches;
next	1.10;

1.10
date	2003.09.24.10.13.43;	author markus;	state Exp;
branches;
next	1.9;

1.9
date	2003.08.28.14.43.35;	author markus;	state Exp;
branches
	1.9.2.1;
next	1.8;

1.8
date	2003.06.03.14.28.16;	author ho;	state Exp;
branches;
next	1.7;

1.7
date	2002.09.06.21.36.52;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2002.08.23.18.17.17;	author ho;	state Exp;
branches;
next	1.5;

1.5
date	2002.06.09.08.13.06;	author todd;	state Exp;
branches;
next	1.4;

1.4
date	2000.10.16.23.28.04;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	98.11.17.11.10.09;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	98.11.15.00.43.51;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	98.11.15.00.03.48;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.11.15.00.03.48;	author niklas;	state Exp;
branches;
next	;

1.9.2.1
date	2004.01.13.22.50.07;	author brad;	state Exp;
branches;
next	;


desc
@@


1.20
log
@convert to fuse cast from the libcrypto.  with a simplification nit from
blambert, ok jsg, "seems ok" todd
@
text
@/* $OpenBSD: crypto.h,v 1.19 2010/10/15 10:18:42 jsg Exp $	 */
/* $EOM: crypto.h,v 1.12 2000/10/15 21:56:41 niklas Exp $	 */

/*
 * Copyright (c) 1998 Niels Provos.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This code was written under funding by Ericsson Radio Systems.
 */

#ifndef _CRYPTO_H_
#define _CRYPTO_H_

#include <openssl/des.h>
#include <blf.h>
#include <openssl/cast.h>

#include <openssl/aes.h>

#define USE_32BIT
#if defined (USE_64BIT)

#define XOR64(x,y) *(u_int64_t *)(x) ^= *(u_int64_t *)(y);
#define SET64(x,y) *(u_int64_t *)(x) = *(u_int64_t *)(y);

#elif defined (USE_32BIT)

#define XOR64(x,y) *(u_int32_t *)(x) ^= *(u_int32_t *)(y); \
   *(u_int32_t *)((u_int8_t *)(x) + 4) ^= *(u_int32_t *)((u_int8_t *)(y) + 4);
#define SET64(x,y) *(u_int32_t *)(x) = *(u_int32_t *)(y); \
   *(u_int32_t *)((u_int8_t *)(x) + 4) = *(u_int32_t *)((u_int8_t *)(y) + 4);

#else

#define XOR8(x,y,i) (x)[i] ^= (y)[i];
#define XOR64(x,y) XOR8(x,y,0); XOR8(x,y,1); XOR8(x,y,2); XOR8(x,y,3); \
   XOR8(x,y,4); XOR8(x,y,5); XOR8(x,y,6); XOR8(x,y,7);
#define SET8(x,y,i) (x)[i] = (y)[i];
#define SET64(x,y) SET8(x,y,0); SET8(x,y,1); SET8(x,y,2); SET8(x,y,3); \
   SET8(x,y,4); SET8(x,y,5); SET8(x,y,6); SET8(x,y,7);

#endif				/* USE_64BIT */

#define SET_32BIT_BIG(x,y) (x)[3]= (y); (x)[2]= (y) >> 8; \
    (x)[1] = (y) >> 16; (x)[0]= (y) >> 24;
#define GET_32BIT_BIG(x) (u_int32_t)(x)[3] | ((u_int32_t)(x)[2] << 8) | \
    ((u_int32_t)(x)[1] << 16)| ((u_int32_t)(x)[0] << 24);

/*
 * This is standard for all block ciphers we use at the moment.
 * Keep MAXBLK uptodate.
 */
#define BLOCKSIZE	8
#define MAXBLK		AES_BLOCK_SIZE

struct keystate {
	struct crypto_xf *xf;	/* Back pointer */
	u_int8_t        iv[MAXBLK];	/* Next IV to use */
	u_int8_t        iv2[MAXBLK];
	u_int8_t       *riv, *liv;
	union {
		DES_key_schedule desks[3];
		blf_ctx         blfks;
		CAST_KEY        castks;
		AES_KEY         aesks[2];
	}               keydata;
};

#define ks_des	keydata.desks
#define ks_blf	keydata.blfks
#define ks_cast	keydata.castks
#define ks_aes	keydata.aesks

/*
 * Information about the cryptotransform.
 *
 * XXX - In regards to the IV (Initialization Vector) the drafts are
 * completely fucked up and specify a MUST as how it is derived, so
 * we also have to provide for that. I just don't know where.
 * Furthermore is this enum needed at all?  It seems to be Oakley IDs
 * only anyhow, and we already have defines for that in ipsec_doi.h.
 */
enum transform {
	DES_CBC = 1,		/* This is a MUST */
	IDEA_CBC = 2,		/* Licensed, DONT use */
	BLOWFISH_CBC = 3,
	RC5_R16_B64_CBC = 4,	/* Licensed, DONT use */
	TRIPLEDES_CBC = 5,	/* This is a SHOULD */
	CAST_CBC = 6,
	AES_CBC = 7
};

enum cryptoerr {
	EOKAY,			/* No error */
	ENOCRYPTO,		/* A none crypto related error, see errno */
	EWEAKKEY,		/* A weak key was found in key setup */
	EKEYLEN			/* The key length was invalid for the cipher */
};

struct crypto_xf {
	enum transform  id;	/* Oakley ID */
	char           *name;	/* Transform Name */
	u_int16_t       keymin, keymax;	/* Possible Keying Bytes */
	u_int16_t       blocksize;	/* Need to keep IV in the state */
	struct keystate *state;	/* Key information, can also be passed sep. */
	enum cryptoerr  (*init)(struct keystate *, u_int8_t *, u_int16_t);
	void            (*encrypt)(struct keystate *, u_int8_t *, u_int16_t);
	void            (*decrypt)(struct keystate *, u_int8_t *, u_int16_t);
};

extern struct keystate *crypto_clone_keystate(struct keystate *);
extern void     crypto_decrypt(struct keystate *, u_int8_t *, u_int16_t);
extern void     crypto_encrypt(struct keystate *, u_int8_t *, u_int16_t);
extern struct crypto_xf *crypto_get(enum transform);
extern struct keystate *crypto_init(struct crypto_xf *, u_int8_t *, u_int16_t,
		    enum cryptoerr *);
extern void     crypto_init_iv(struct keystate *, u_int8_t *, size_t);
extern void     crypto_update_iv(struct keystate *);

#endif				/* _CRYPTO_H_ */
@


1.19
log
@Switch the remaining users of libdes in src to libcrypto,
telnet portion partially from the latest heimdal.

ok mikeb@@
@
text
@d1 1
a1 1
/* $OpenBSD: crypto.h,v 1.18 2006/06/02 19:35:55 hshoexer Exp $	 */
d37 1
a37 1
#include <cast.h>
d85 1
a85 1
		cast_key        castks;
@


1.18
log
@Big spelling cleanup, no binary change.  From david@@
@
text
@d1 1
a1 1
/* $OpenBSD: crypto.h,v 1.17 2005/04/08 18:39:12 deraadt Exp $	 */
d35 1
a35 1
#include <des.h>
d83 1
a83 1
		des_key_schedule desks[3];
@


1.17
log
@we do not care about __APPLE__
@
text
@d1 1
a1 1
/* $OpenBSD: crypto.h,v 1.16 2005/04/08 16:06:25 deraadt Exp $	 */
d99 1
a99 1
 * completly fucked up and specify a MUST as how it is derived, so
@


1.16
log
@app.c
@
text
@d1 1
a1 1
/* $OpenBSD: crypto.h,v 1.15 2005/01/31 10:07:59 hshoexer Exp $	 */
a34 8
#if defined (__APPLE__)

#include <openssl/des.h>
#include <openssl/blowfish.h>
#include <openssl/cast.h>

#else

a37 2

#endif				/* __APPLE__ */
@


1.15
log
@Remove unused stuff.

ok markus
@
text
@d1 1
a1 1
/* $OpenBSD: crypto.h,v 1.14 2004/05/14 08:42:56 hshoexer Exp $	 */
a37 1
#ifdef USE_BLOWFISH
a38 2
#endif
#ifdef USE_CAST
a39 1
#endif
a43 1
#ifdef USE_BLOWFISH
a44 2
#endif
#ifdef USE_CAST
a45 1
#endif
a48 1
#ifdef USE_AES
a49 1
#endif
a84 2

#ifdef USE_AES
a85 3
#else
#define MAXBLK		BLOCKSIZE
#endif
a93 1
#ifdef USE_BLOWFISH
a94 2
#endif
#ifdef USE_CAST
a95 2
#endif
#ifdef USE_AES
a96 1
#endif
@


1.14
log
@Some more KNF, no binary change.

ok ho@@
@
text
@d1 1
a1 1
/* $OpenBSD: crypto.h,v 1.13 2004/04/15 18:39:25 deraadt Exp $	 */
a103 3
	u_int16_t       ebytes;	/* Number of encrypted bytes */
	u_int16_t       dbytes;	/* Number of decrypted bytes */
	time_t          life;	/* Creation time */
@


1.13
log
@partial move to KNF.  More to come.  This has happened because there
are a raft of source code auditors who are willing to help improve this
code only if this is done, and hey, isakmpd does need our standard
auditing process.  ok ho hshoexer
@
text
@d1 1
a1 1
/* $OpenBSD: crypto.h,v 1.12 2003/12/22 18:13:58 markus Exp $	 */
d161 3
a163 3
	enum cryptoerr  (*init) (struct keystate *, u_int8_t *, u_int16_t);
	void            (*encrypt) (struct keystate *, u_int8_t *, u_int16_t);
	void            (*decrypt) (struct keystate *, u_int8_t *, u_int16_t);
d170 2
a171 3
extern struct keystate *
crypto_init(struct crypto_xf *, u_int8_t *,
	    u_int16_t, enum cryptoerr *);
@


1.12
log
@use AES_BLOCK_SIZE only for USE_AES; report martti.kuparinen@@iki.fi; ok ho@@
@
text
@d1 2
a2 2
/*	$OpenBSD: crypto.h,v 1.11 2003/09/24 11:12:31 markus Exp $	*/
/*	$EOM: crypto.h,v 1.12 2000/10/15 21:56:41 niklas Exp $	*/
d55 1
a55 1
#endif /* __APPLE__ */
d83 1
a83 1
#endif /* USE_64BIT */
d103 9
a111 9
  struct crypto_xf *xf;			/* Back pointer */
  u_int16_t	ebytes;			/* Number of encrypted bytes */
  u_int16_t	dbytes;			/* Number of decrypted bytes */
  time_t	life;			/* Creation time */
  u_int8_t	iv[MAXBLK];		/* Next IV to use */
  u_int8_t	iv2[MAXBLK];
  u_int8_t	*riv, *liv;
  union {
    des_key_schedule desks[3];
d113 1
a113 1
    blf_ctx blfks;
d116 1
a116 1
    cast_key castks;
d119 1
a119 1
    AES_KEY aesks[2];
d121 1
a121 1
  } keydata;
d139 7
a145 7
  DES_CBC=1,			/* This is a MUST */
  IDEA_CBC=2,			/* Licensed, DONT use */
  BLOWFISH_CBC=3,
  RC5_R16_B64_CBC=4,		/* Licensed, DONT use */
  TRIPLEDES_CBC=5,			/* This is a SHOULD */
  CAST_CBC=6,
  AES_CBC=7
d149 4
a152 4
  EOKAY,			/* No error */
  ENOCRYPTO,			/* A none crypto related error, see errno */
  EWEAKKEY,			/* A weak key was found in key setup */
  EKEYLEN			/* The key length was invalid for the cipher */
d156 8
a163 8
  enum transform id;		/* Oakley ID */
  char *name;			/* Transform Name */
  u_int16_t keymin, keymax;	/* Possible Keying Bytes */
  u_int16_t blocksize;		/* Need to keep IV in the state */
  struct keystate *state;	/* Key information, can also be passed sep. */
  enum cryptoerr (*init) (struct keystate *, u_int8_t *, u_int16_t);
  void (*encrypt) (struct keystate *, u_int8_t *, u_int16_t);
  void (*decrypt) (struct keystate *, u_int8_t *, u_int16_t);
d166 9
a174 8
extern struct keystate *crypto_clone_keystate (struct keystate *);
extern void crypto_decrypt (struct keystate *, u_int8_t *, u_int16_t);
extern void crypto_encrypt (struct keystate *, u_int8_t *, u_int16_t);
extern struct crypto_xf *crypto_get (enum transform);
extern struct keystate *crypto_init (struct crypto_xf *, u_int8_t *,
				     u_int16_t, enum cryptoerr *);
extern void crypto_init_iv (struct keystate *, u_int8_t *, size_t);
extern void crypto_update_iv (struct keystate *);
d176 1
a176 1
#endif /* _CRYPTO_H_ */
@


1.11
log
@re-add AES, but without using EVP;
patch from Hans-Joerg.Hoexer at yerbouti.franken.de; ok ho@@
(interops with isakmpd+AES in OpenBSD 3.4)
@
text
@d1 1
a1 1
/*	$OpenBSD: crypto.h,v 1.10 2003/09/24 10:13:43 markus Exp $	*/
d96 1
d98 3
@


1.10
log
@back out EVP change; causes fd leaks; ok cedric@@
@
text
@d1 1
a1 1
/*	$OpenBSD: crypto.h,v 1.8 2003/06/03 14:28:16 ho Exp $	*/
d57 4
d92 1
a92 2
 * Theoretically this could increase in future, e.g. for TwoFish.
 * Keep MAXBLK uptodate
d96 1
a96 1
#define MAXBLK		BLOCKSIZE
d114 3
d123 1
d140 2
a141 1
  CAST_CBC=6
@


1.9
log
@support AES in phase 1, too. switch to OpenSSL EVP interface;
with Hans-Joerg.Hoexer at yerbouti.franken.de; ok ho@@
@
text
@d35 50
a84 1
#include <openssl/evp.h>
d93 1
a93 1
#define MAXBLK		(2*BLOCKSIZE)
d103 9
a111 3
  struct {
      EVP_CIPHER_CTX enc, dec;
  } evp;
d114 3
a116 2
#define ks_evpenc	evp.enc
#define ks_evpdec	evp.dec
d133 1
a133 2
  CAST_CBC=6,
  AES_CBC=7
@


1.9.2.1
log
@Fixes a few message handling flaws in isakmpd as reported by
Thomas Walpuski.

ok deraadt@@ hshoexer@@
@
text
@d1 1
a1 1
/*	$OpenBSD: crypto.h,v 1.12 2003/12/22 18:13:58 markus Exp $	*/
d35 1
a35 54
#if defined (__APPLE__)

#include <openssl/des.h>
#ifdef USE_BLOWFISH
#include <openssl/blowfish.h>
#endif
#ifdef USE_CAST
#include <openssl/cast.h>
#endif

#else

#include <des.h>
#ifdef USE_BLOWFISH
#include <blf.h>
#endif
#ifdef USE_CAST
#include <cast.h>
#endif

#endif /* __APPLE__ */

#ifdef USE_AES
#include <openssl/aes.h>
#endif

#define USE_32BIT
#if defined (USE_64BIT)

#define XOR64(x,y) *(u_int64_t *)(x) ^= *(u_int64_t *)(y);
#define SET64(x,y) *(u_int64_t *)(x) = *(u_int64_t *)(y);

#elif defined (USE_32BIT)

#define XOR64(x,y) *(u_int32_t *)(x) ^= *(u_int32_t *)(y); \
   *(u_int32_t *)((u_int8_t *)(x) + 4) ^= *(u_int32_t *)((u_int8_t *)(y) + 4);
#define SET64(x,y) *(u_int32_t *)(x) = *(u_int32_t *)(y); \
   *(u_int32_t *)((u_int8_t *)(x) + 4) = *(u_int32_t *)((u_int8_t *)(y) + 4);

#else

#define XOR8(x,y,i) (x)[i] ^= (y)[i];
#define XOR64(x,y) XOR8(x,y,0); XOR8(x,y,1); XOR8(x,y,2); XOR8(x,y,3); \
   XOR8(x,y,4); XOR8(x,y,5); XOR8(x,y,6); XOR8(x,y,7);
#define SET8(x,y,i) (x)[i] = (y)[i];
#define SET64(x,y) SET8(x,y,0); SET8(x,y,1); SET8(x,y,2); SET8(x,y,3); \
   SET8(x,y,4); SET8(x,y,5); SET8(x,y,6); SET8(x,y,7);

#endif /* USE_64BIT */

#define SET_32BIT_BIG(x,y) (x)[3]= (y); (x)[2]= (y) >> 8; \
    (x)[1] = (y) >> 16; (x)[0]= (y) >> 24;
#define GET_32BIT_BIG(x) (u_int32_t)(x)[3] | ((u_int32_t)(x)[2] << 8) | \
    ((u_int32_t)(x)[1] << 16)| ((u_int32_t)(x)[0] << 24);
d39 2
a40 1
 * Keep MAXBLK uptodate.
d44 1
a44 5
#ifdef USE_AES
#define MAXBLK		AES_BLOCK_SIZE
#else
#define MAXBLK		BLOCKSIZE
#endif
d54 3
a56 12
  union {
    des_key_schedule desks[3];
#ifdef USE_BLOWFISH
    blf_ctx blfks;
#endif
#ifdef USE_CAST
    cast_key castks;
#endif
#ifdef USE_AES
    AES_KEY aesks[2];
#endif
  } keydata;
d59 2
a60 4
#define ks_des	keydata.desks
#define ks_blf	keydata.blfks
#define ks_cast	keydata.castks
#define ks_aes	keydata.aesks
@


1.8
log
@Remove clauses 3 and 4. With approval from Niklas Hallqvist and
Niels Provos.
@
text
@d1 1
a1 1
/*	$OpenBSD: crypto.h,v 1.7 2002/09/06 21:36:52 deraadt Exp $	*/
d35 1
a35 50
#if defined (__APPLE__)

#include <openssl/des.h>
#ifdef USE_BLOWFISH
#include <openssl/blowfish.h>
#endif
#ifdef USE_CAST
#include <openssl/cast.h>
#endif

#else

#include <des.h>
#ifdef USE_BLOWFISH
#include <blf.h>
#endif
#ifdef USE_CAST
#include <cast.h>
#endif

#endif /* __APPLE__ */

#define USE_32BIT
#if defined (USE_64BIT)

#define XOR64(x,y) *(u_int64_t *)(x) ^= *(u_int64_t *)(y);
#define SET64(x,y) *(u_int64_t *)(x) = *(u_int64_t *)(y);

#elif defined (USE_32BIT)

#define XOR64(x,y) *(u_int32_t *)(x) ^= *(u_int32_t *)(y); \
   *(u_int32_t *)((u_int8_t *)(x) + 4) ^= *(u_int32_t *)((u_int8_t *)(y) + 4);
#define SET64(x,y) *(u_int32_t *)(x) = *(u_int32_t *)(y); \
   *(u_int32_t *)((u_int8_t *)(x) + 4) = *(u_int32_t *)((u_int8_t *)(y) + 4);

#else

#define XOR8(x,y,i) (x)[i] ^= (y)[i];
#define XOR64(x,y) XOR8(x,y,0); XOR8(x,y,1); XOR8(x,y,2); XOR8(x,y,3); \
   XOR8(x,y,4); XOR8(x,y,5); XOR8(x,y,6); XOR8(x,y,7);
#define SET8(x,y,i) (x)[i] = (y)[i];
#define SET64(x,y) SET8(x,y,0); SET8(x,y,1); SET8(x,y,2); SET8(x,y,3); \
   SET8(x,y,4); SET8(x,y,5); SET8(x,y,6); SET8(x,y,7);

#endif /* USE_64BIT */

#define SET_32BIT_BIG(x,y) (x)[3]= (y); (x)[2]= (y) >> 8; \
    (x)[1] = (y) >> 16; (x)[0]= (y) >> 24;
#define GET_32BIT_BIG(x) (u_int32_t)(x)[3] | ((u_int32_t)(x)[2] << 8) | \
    ((u_int32_t)(x)[1] << 16)| ((u_int32_t)(x)[0] << 24);
d44 1
a44 1
#define MAXBLK		BLOCKSIZE
d54 3
a56 9
  union {
    des_key_schedule desks[3];
#ifdef USE_BLOWFISH
    blf_ctx blfks;
#endif
#ifdef USE_CAST
    cast_key castks;
#endif
  } keydata;
d59 2
a60 3
#define ks_des	keydata.desks
#define ks_blf	keydata.blfks
#define ks_cast	keydata.castks
d77 2
a78 1
  CAST_CBC=6
@


1.7
log
@remove Xr to photuris
@
text
@d1 1
a1 1
/*	$OpenBSD: crypto.h,v 1.6 2002/08/23 18:17:17 ho Exp $	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Ericsson Radio Systems.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.6
log
@Initial support for MacOS X (v10.2 and later).
@
text
@d1 1
a1 1
/*	$OpenBSD: crypto.h,v 1.5 2002/06/09 08:13:06 todd Exp $	*/
d145 1
a145 1
  EKEYLEN,			/* The key length was invalid for the cipher */
@


1.5
log
@rm trailing whitespace
@
text
@d1 1
a1 1
/*	$OpenBSD: crypto.h,v 1.4 2000/10/16 23:28:04 niklas Exp $	*/
d40 12
d59 2
@


1.4
log
@Merge with EOM 1.12

author: niklas
missed some FEATURES-dependencies in the last commit

author: niklas
include crypto headers based on FEATURES
@
text
@d1 1
a1 1
/*	$OpenBSD: crypto.h,v 1.3 1998/11/17 11:10:09 niklas Exp $	*/
d57 1
a57 1
   *(u_int32_t *)((u_int8_t *)(x) + 4) ^= *(u_int32_t *)((u_int8_t *)(y) + 4); 
d73 1
a73 1
    (x)[1] = (y) >> 16; (x)[0]= (y) >> 24; 
d77 1
a77 1
/* 
d80 1
a80 1
 * Keep MAXBLK uptodate 
@


1.3
log
@Add RCS Ids from the EOM repository
@
text
@d1 2
a2 2
/*	$OpenBSD: crypto.h,v 1.2 1998/11/15 00:43:51 niklas Exp $	*/
/*	$EOM: crypto.h,v 1.10 1998/08/05 13:14:03 niklas Exp $	*/
d41 1
d43 2
d46 1
d96 1
d98 2
d101 1
@


1.2
log
@openBSD RCS IDs
@
text
@d1 2
a2 1
/*	$OpenBSD: crypto.h,v 1.1.1.1 1998/11/15 00:03:48 niklas Exp $	*/
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$Id: crypto.h,v 1.10 1998/08/05 13:14:03 niklas Exp $	*/
@


1.1.1.1
log
@Initial import of isakmpd, an IKE (ISAKMP/Oakley) implementation for the
OpenBSD IPSEC stack by me, Niklas Hallqvist and Niels Provos, funded by
Ericsson Radio Systems.  It is not yet complete or usable in a real scenario
but the missing pieces will soon be there.  The early commit is for people
who wants early access and who are not afraid of looking at source.
isakmpd interops with Cisco, Timestep, SSH & Pluto (Linux FreeS/WAN) so
far, so it is not that incomplete.  It is really mostly configuration that
is lacking.
@
text
@@
