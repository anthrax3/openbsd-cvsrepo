head	1.33;
access;
symbols
	OPENBSD_6_2:1.33.0.16
	OPENBSD_6_2_BASE:1.33
	OPENBSD_6_1:1.33.0.18
	OPENBSD_6_1_BASE:1.33
	OPENBSD_6_0:1.33.0.14
	OPENBSD_6_0_BASE:1.33
	OPENBSD_5_9:1.33.0.10
	OPENBSD_5_9_BASE:1.33
	OPENBSD_5_8:1.33.0.12
	OPENBSD_5_8_BASE:1.33
	OPENBSD_5_7:1.33.0.4
	OPENBSD_5_7_BASE:1.33
	OPENBSD_5_6:1.33.0.8
	OPENBSD_5_6_BASE:1.33
	OPENBSD_5_5:1.33.0.6
	OPENBSD_5_5_BASE:1.33
	OPENBSD_5_4:1.33.0.2
	OPENBSD_5_4_BASE:1.33
	OPENBSD_5_3:1.32.0.24
	OPENBSD_5_3_BASE:1.32
	OPENBSD_5_2:1.32.0.22
	OPENBSD_5_2_BASE:1.32
	OPENBSD_5_1_BASE:1.32
	OPENBSD_5_1:1.32.0.20
	OPENBSD_5_0:1.32.0.18
	OPENBSD_5_0_BASE:1.32
	OPENBSD_4_9:1.32.0.16
	OPENBSD_4_9_BASE:1.32
	OPENBSD_4_8:1.32.0.14
	OPENBSD_4_8_BASE:1.32
	OPENBSD_4_7:1.32.0.10
	OPENBSD_4_7_BASE:1.32
	OPENBSD_4_6:1.32.0.12
	OPENBSD_4_6_BASE:1.32
	OPENBSD_4_5:1.32.0.8
	OPENBSD_4_5_BASE:1.32
	OPENBSD_4_4:1.32.0.6
	OPENBSD_4_4_BASE:1.32
	OPENBSD_4_3:1.32.0.4
	OPENBSD_4_3_BASE:1.32
	OPENBSD_4_2:1.32.0.2
	OPENBSD_4_2_BASE:1.32
	OPENBSD_4_1:1.31.0.8
	OPENBSD_4_1_BASE:1.31
	OPENBSD_4_0:1.31.0.6
	OPENBSD_4_0_BASE:1.31
	OPENBSD_3_9:1.31.0.4
	OPENBSD_3_9_BASE:1.31
	OPENBSD_3_8:1.31.0.2
	OPENBSD_3_8_BASE:1.31
	OPENBSD_3_7:1.28.0.4
	OPENBSD_3_7_BASE:1.28
	OPENBSD_3_6:1.28.0.2
	OPENBSD_3_6_BASE:1.28
	OPENBSD_3_5:1.24.0.4
	OPENBSD_3_5_BASE:1.24
	OPENBSD_3_4:1.24.0.2
	OPENBSD_3_4_BASE:1.24
	OPENBSD_3_3:1.23.0.4
	OPENBSD_3_3_BASE:1.23
	OPENBSD_3_2:1.23.0.2
	OPENBSD_3_2_BASE:1.23
	OPENBSD_3_1:1.19.0.2
	OPENBSD_3_1_BASE:1.19
	OPENBSD_3_0:1.18.0.2
	OPENBSD_3_0_BASE:1.18
	OPENBSD_2_9:1.16.0.4
	OPENBSD_2_9_BASE:1.16
	OPENBSD_2_8:1.16.0.2
	OPENBSD_2_8_BASE:1.16
	OPENBSD_2_7:1.14.0.2
	OPENBSD_2_7_BASE:1.14
	OPENBSD_2_6:1.11.0.2
	OPENBSD_2_6_BASE:1.11
	OPENBSD_2_5:1.8.0.2
	OPENBSD_2_5_BASE:1.8
	NIKLAS_981114:1.1.1.1
	NIKLAS:1.1.1;
locks; strict;
comment	@ * @;


1.33
date	2013.03.21.04.30.14;	author deraadt;	state Exp;
branches;
next	1.32;

1.32
date	2007.08.05.09.43.09;	author tom;	state Exp;
branches;
next	1.31;

1.31
date	2005.04.08.22.32.09;	author cloder;	state Exp;
branches;
next	1.30;

1.30
date	2005.04.08.17.15.01;	author deraadt;	state Exp;
branches;
next	1.29;

1.29
date	2005.04.05.20.46.20;	author cloder;	state Exp;
branches;
next	1.28;

1.28
date	2004.06.14.09.55.41;	author ho;	state Exp;
branches;
next	1.27;

1.27
date	2004.05.14.08.42.56;	author hshoexer;	state Exp;
branches;
next	1.26;

1.26
date	2004.04.15.18.39.25;	author deraadt;	state Exp;
branches;
next	1.25;

1.25
date	2004.03.31.10.54.46;	author ho;	state Exp;
branches;
next	1.24;

1.24
date	2003.06.03.14.28.16;	author ho;	state Exp;
branches;
next	1.23;

1.23
date	2002.08.07.13.19.20;	author ho;	state Exp;
branches;
next	1.22;

1.22
date	2002.06.09.08.13.06;	author todd;	state Exp;
branches;
next	1.21;

1.21
date	2002.06.06.02.15.27;	author ho;	state Exp;
branches;
next	1.20;

1.20
date	2002.06.01.07.44.21;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2001.11.03.12.15.36;	author ho;	state Exp;
branches;
next	1.18;

1.18
date	2001.06.05.05.59.42;	author niklas;	state Exp;
branches;
next	1.17;

1.17
date	2001.05.31.20.21.25;	author angelos;	state Exp;
branches;
next	1.16;

1.16
date	2000.10.07.06.57.08;	author niklas;	state Exp;
branches;
next	1.15;

1.15
date	2000.06.08.20.51.55;	author niklas;	state Exp;
branches;
next	1.14;

1.14
date	2000.04.07.22.07.07;	author niklas;	state Exp;
branches;
next	1.13;

1.13
date	2000.03.08.08.42.48;	author niklas;	state Exp;
branches;
next	1.12;

1.12
date	2000.02.19.19.32.53;	author niklas;	state Exp;
branches;
next	1.11;

1.11
date	99.08.26.22.30.46;	author niklas;	state Exp;
branches;
next	1.10;

1.10
date	99.07.17.21.54.39;	author niklas;	state Exp;
branches;
next	1.9;

1.9
date	99.04.19.19.57.29;	author niklas;	state Exp;
branches;
next	1.8;

1.8
date	99.02.26.03.34.02;	author niklas;	state Exp;
branches;
next	1.7;

1.7
date	98.11.17.11.10.08;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	98.11.16.21.07.16;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	98.11.16.12.30.45;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	98.11.16.12.24.13;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	98.11.15.00.52.26;	author niklas;	state dead;
branches;
next	1.2;

1.2
date	98.11.15.00.43.50;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	98.11.15.00.03.48;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.11.15.00.03.48;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.33
log
@remove excessive includes
@
text
@/* $OpenBSD: cert.c,v 1.32 2007/08/05 09:43:09 tom Exp $	 */
/* $EOM: cert.c,v 1.18 2000/09/28 12:53:27 niklas Exp $	 */

/*
 * Copyright (c) 1998, 1999 Niels Provos.  All rights reserved.
 * Copyright (c) 1999, 2000 Niklas Hallqvist.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This code was written under funding by Ericsson Radio Systems.
 */

#include <sys/types.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "isakmp_num.h"
#include "log.h"
#include "cert.h"
#include "x509.h"

#include "policy.h"

struct cert_handler cert_handler[] = {
    {
	ISAKMP_CERTENC_X509_SIG,
	x509_cert_init, x509_crl_init, x509_cert_get, x509_cert_validate,
	x509_cert_insert, x509_cert_free,
	x509_certreq_validate, x509_certreq_decode, x509_free_aca,
	x509_cert_obtain, x509_cert_get_key, x509_cert_get_subjects,
	x509_cert_dup, x509_serialize, x509_printable, x509_from_printable,
	x509_ca_count
    },
    {
	ISAKMP_CERTENC_KEYNOTE,
	keynote_cert_init, NULL, keynote_cert_get, keynote_cert_validate,
	keynote_cert_insert, keynote_cert_free,
	keynote_certreq_validate, keynote_certreq_decode, keynote_free_aca,
	keynote_cert_obtain, keynote_cert_get_key, keynote_cert_get_subjects,
	keynote_cert_dup, keynote_serialize, keynote_printable,
	keynote_from_printable, keynote_ca_count
    },
};

/* Initialize all certificate handlers */
int
cert_init(void)
{
	size_t	i;
	int	err = 1;

	for (i = 0; i < sizeof cert_handler / sizeof cert_handler[0]; i++)
		if (cert_handler[i].cert_init &&
		    !(*cert_handler[i].cert_init)())
			err = 0;

	return err;
}

int
crl_init(void)
{
	size_t	i;
	int	err = 1;

	for (i = 0; i < sizeof cert_handler / sizeof cert_handler[0]; i++)
		if (cert_handler[i].crl_init && !(*cert_handler[i].crl_init)())
			err = 0;

	return err;
}

struct cert_handler *
cert_get(u_int16_t id)
{
	size_t	i;

	for (i = 0; i < sizeof cert_handler / sizeof cert_handler[0]; i++)
		if (id == cert_handler[i].id)
			return &cert_handler[i];
	return 0;
}

/*
 * Decode the certificate request of type TYPE contained in DATA extending
 * DATALEN bytes.  Return a certreq_aca structure which the caller is
 * responsible for deallocating.
 */
struct certreq_aca *
certreq_decode(u_int16_t type, u_int8_t *data, u_int32_t datalen)
{
	struct cert_handler *handler;
	struct certreq_aca aca, *ret;

	handler = cert_get(type);
	if (!handler)
		return 0;

	aca.id = type;
	aca.handler = handler;
	aca.data = aca.raw_ca = NULL;

	if (datalen > 0) {
		int rc;

		rc = handler->certreq_decode(&aca.data, data, datalen);
		if (!rc)
			return 0;

		aca.raw_ca = malloc(datalen);
		if (aca.raw_ca == NULL) {
			log_error("certreq_decode: malloc (%lu) failed",
			    (unsigned long)datalen);
			handler->free_aca(aca.data);
			return 0;
		}

		memcpy(aca.raw_ca, data, datalen);
	}
	aca.raw_ca_len = datalen;

	ret = malloc(sizeof aca);
	if (!ret) {
		log_error("certreq_decode: malloc (%lu) failed",
		    (unsigned long)sizeof aca);
		free(aca.raw_ca);
		handler->free_aca(aca.data);
		return 0;
	}
	memcpy(ret, &aca, sizeof aca);
	return ret;
}

void
cert_free_subjects(int n, u_int8_t **id, u_int32_t *len)
{
	int	i;

	for (i = 0; i < n; i++)
		free(id[i]);
	free(id);
	free(len);
}
@


1.32
log
@Allow key exchange with RSA signature authentication to work with
Cisco IOS and other initiators that only send their certs in response
to CERT_REQUEST.

With input and help from cloder@@, Stuart Henderson, mpf@@, and several
others who did lots of testing - thanks to all.

ok hshoexer@@
@
text
@d1 1
a1 1
/* $OpenBSD: cert.c,v 1.31 2005/04/08 22:32:09 cloder Exp $	 */
d33 1
a33 1
#include <sys/param.h>
@


1.31
log
@Make deterministic randomness (only ever used for testing) a compile-time
option.  Reduces chances of somehow setting regrand when it's not supposed
to be set.  Remove "-r" option from man page.  Also xref certpatch(8) while
we are in there.  And remove some include sysdep.h where it is no longer
needed.
OK hshoexer
@
text
@d1 1
a1 1
/* $OpenBSD: cert.c,v 1.30 2005/04/08 17:15:01 deraadt Exp $	 */
d52 2
a53 1
	x509_cert_dup, x509_serialize, x509_printable, x509_from_printable
d62 1
a62 1
	keynote_from_printable
d122 1
d125 11
a135 2
		aca.data = handler->certreq_decode(data, datalen);
		if (!aca.data)
d137 5
a141 2
	} else
		aca.data = 0;
d147 1
@


1.30
log
@keynote and policy always compiled in
@
text
@d1 1
a1 1
/* $OpenBSD: cert.c,v 1.29 2005/04/05 20:46:20 cloder Exp $	 */
a36 2

#include "sysdep.h"
@


1.29
log
@Always compile X509 support. Almost everyone uses it.  Makes the code
much easier to read and to maintain.
OK and testing by hshoexer@@, more testing by me
@
text
@d1 1
a1 1
/* $OpenBSD: cert.c,v 1.28 2004/06/14 09:55:41 ho Exp $	 */
a44 1
#ifdef USE_KEYNOTE
a45 1
#endif
a55 1
#ifdef USE_KEYNOTE
a64 1
#endif
@


1.28
log
@KNF, style, 80c, etc. hshoexer@@ ok
@
text
@d1 1
a1 1
/* $OpenBSD: cert.c,v 1.27 2004/05/14 08:42:56 hshoexer Exp $	 */
a42 2

#ifdef USE_X509
a43 1
#endif
a49 1
#ifdef USE_X509
a57 1
#endif
@


1.27
log
@Some more KNF, no binary change.

ok ho@@
@
text
@d1 1
a1 1
/* $OpenBSD: cert.c,v 1.26 2004/04/15 18:39:25 deraadt Exp $	 */
d84 2
a85 1
		if (cert_handler[i].cert_init && !(*cert_handler[i].cert_init)())
@


1.26
log
@partial move to KNF.  More to come.  This has happened because there
are a raft of source code auditors who are willing to help improve this
code only if this is done, and hey, isakmpd does need our standard
auditing process.  ok ho hshoexer
@
text
@d1 1
a1 1
/* $OpenBSD: cert.c,v 1.25 2004/03/31 10:54:46 ho Exp $	 */
d80 2
a81 2
	size_t          i;
	int             err = 1;
d84 1
a84 1
		if (cert_handler[i].cert_init && !(*cert_handler[i].cert_init) ())
d93 2
a94 2
	size_t          i;
	int             err = 1;
d97 1
a97 1
		if (cert_handler[i].crl_init && !(*cert_handler[i].crl_init) ())
d106 1
a106 1
	size_t          i;
d142 1
a142 1
		    (unsigned long) sizeof aca);
d153 1
a153 1
	int             i;
@


1.25
log
@-Wsign-compare nits. hshoexer@@ ok.
@
text
@d1 2
a2 2
/*	$OpenBSD: cert.c,v 1.24 2003/06/03 14:28:16 ho Exp $	*/
/*	$EOM: cert.c,v 1.18 2000/09/28 12:53:27 niklas Exp $	*/
d54 8
a61 8
  {
    ISAKMP_CERTENC_X509_SIG,
    x509_cert_init, x509_crl_init, x509_cert_get, x509_cert_validate,
    x509_cert_insert, x509_cert_free,
    x509_certreq_validate, x509_certreq_decode, x509_free_aca,
    x509_cert_obtain, x509_cert_get_key, x509_cert_get_subjects,
    x509_cert_dup, x509_serialize, x509_printable, x509_from_printable
  },
d64 9
a72 9
  {
    ISAKMP_CERTENC_KEYNOTE,
    keynote_cert_init, NULL, keynote_cert_get, keynote_cert_validate,
    keynote_cert_insert, keynote_cert_free,
    keynote_certreq_validate, keynote_certreq_decode, keynote_free_aca,
    keynote_cert_obtain, keynote_cert_get_key, keynote_cert_get_subjects,
    keynote_cert_dup, keynote_serialize, keynote_printable,
    keynote_from_printable
  },
a76 1

d78 1
a78 1
cert_init (void)
d80 2
a81 2
  size_t i;
  int err = 1;
d83 3
a85 3
  for (i = 0; i < sizeof cert_handler / sizeof cert_handler[0]; i++)
    if (cert_handler[i].cert_init && !(*cert_handler[i].cert_init) ())
      err = 0;
d87 1
a87 1
  return err;
d91 1
a91 1
crl_init (void)
d93 2
a94 2
  size_t i;
  int err = 1;
d96 3
a98 3
  for (i = 0; i < sizeof cert_handler / sizeof cert_handler[0]; i++)
    if (cert_handler[i].crl_init && !(*cert_handler[i].crl_init) ())
      err = 0;
d100 1
a100 1
  return err;
d104 1
a104 1
cert_get (u_int16_t id)
d106 1
a106 1
  size_t i;
d108 4
a111 4
  for (i = 0; i < sizeof cert_handler / sizeof cert_handler[0]; i++)
    if (id == cert_handler[i].id)
      return &cert_handler[i];
  return 0;
d120 1
a120 1
certreq_decode (u_int16_t type, u_int8_t *data, u_int32_t datalen)
d122 2
a123 29
  struct cert_handler *handler;
  struct certreq_aca aca, *ret;

  handler = cert_get (type);
  if (!handler)
    return 0;

  aca.id = type;
  aca.handler = handler;

  if (datalen > 0)
    {
      aca.data = handler->certreq_decode (data, datalen);
      if (!aca.data)
	return 0;
    }
  else
    aca.data = 0;

  ret = malloc (sizeof aca);
  if (!ret)
    {
      log_error ("certreq_decode: malloc (%lu) failed",
		 (unsigned long)sizeof aca);
      handler->free_aca (aca.data);
      return 0;
    }

  memcpy (ret, &aca, sizeof aca);
d125 23
a147 1
  return ret;
d151 1
a151 1
cert_free_subjects (int n, u_int8_t **id, u_int32_t *len)
d153 1
a153 1
  int i;
d155 4
a158 4
  for (i = 0; i < n; i++)
    free (id[i]);
  free (id);
  free (len);
@


1.24
log
@Remove clauses 3 and 4. With approval from Niklas Hallqvist and
Niels Provos.
@
text
@d1 1
a1 1
/*	$OpenBSD: cert.c,v 1.23 2002/08/07 13:19:20 ho Exp $	*/
d81 2
a82 1
  int i, err = 1;
d94 2
a95 1
  int i, err = 1;
d107 1
a107 1
  int i;
@


1.23
log
@A rewrite of the CRL support code, also from <Thomas.Walpuski@@gmx.net>.
Some style mods, and checks added for OpenSSL version 0.9.7 or later.
Currently CRLs are not supported for earlier versions.
Manual pages updated.
@
text
@d1 1
a1 1
/*	$OpenBSD: cert.c,v 1.22 2002/06/09 08:13:06 todd Exp $	*/
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Ericsson Radio Systems.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.22
log
@rm trailing whitespace
@
text
@d1 1
a1 1
/*	$OpenBSD: cert.c,v 1.21 2002/06/06 02:15:27 ho Exp $	*/
d61 1
a61 1
    x509_cert_init, x509_cert_get, x509_cert_validate,
d71 1
a71 1
    keynote_cert_init, keynote_cert_get, keynote_cert_validate,
d90 12
@


1.21
log
@Style, and a few additional format/type mods.
@
text
@d1 1
a1 1
/*	$OpenBSD: cert.c,v 1.20 2002/06/01 07:44:21 deraadt Exp $	*/
d60 2
a61 2
    ISAKMP_CERTENC_X509_SIG, 
    x509_cert_init, x509_cert_get, x509_cert_validate, 
@


1.20
log
@size_t must be cast to (unsigned long) and printed using %lu
@
text
@d1 1
a1 1
/*	$OpenBSD: cert.c,v 1.19 2001/11/03 12:15:36 ho Exp $	*/
d136 2
a137 1
      log_error ("certreq_decode: malloc (%lu) failed", (unsigned long)sizeof aca);
@


1.19
log
@We get ssl.h with x509.h/libcrypto.h
@
text
@d1 1
a1 1
/*	$OpenBSD: cert.c,v 1.18 2001/06/05 05:59:42 niklas Exp $	*/
d136 1
a136 1
      log_error ("certreq_decode: malloc (%d) failed", sizeof aca);
@


1.18
log
@Style issues and commentary
@
text
@d1 1
a1 1
/*	$OpenBSD: cert.c,v 1.17 2001/05/31 20:21:25 angelos Exp $	*/
a50 5
#ifdef KAME
#  include <openssl/ssl.h>
#else
#  include <ssl/ssl.h>
#endif
@


1.17
log
@Expand the X509 and KeyNote cert handlers.
@
text
@d1 1
a1 1
/*	$OpenBSD: cert.c,v 1.16 2000/10/07 06:57:08 niklas Exp $	*/
d111 5
a115 1
/* Decode a CERTREQ and return a parsed structure.  */
@


1.16
log
@cert.c: Merge with EOM 1.18
cert.h: Merge with EOM 1.8
libcrypto.c: Merge with EOM 1.14
policy.h: Merge with EOM 1.12
x509.h: Merge with EOM 1.11

author: niklas
Multiple subject name matching, makes certificate interop with PGPnet at least
partly working.  Added some error checking.
@
text
@d1 1
a1 1
/*	$OpenBSD: cert.c,v 1.15 2000/06/08 20:51:55 niklas Exp $	*/
d69 2
a70 1
    x509_cert_obtain, x509_cert_get_key, x509_cert_get_subjects
d79 3
a81 1
    keynote_cert_obtain, keynote_cert_get_key, keynote_cert_get_subjects
@


1.15
log
@Merge with EOM 1.17

author: angelos
Some more support for KeyNote credential exchange (not yet done).
@
text
@d1 2
a2 2
/*	$OpenBSD: cert.c,v 1.14 2000/04/07 22:07:07 niklas Exp $	*/
/*	$EOM: cert.c,v 1.17 2000/05/17 16:46:35 angelos Exp $	*/
d69 1
a69 1
    x509_cert_obtain, x509_cert_get_key, x509_cert_get_subject
d78 1
a78 1
    keynote_cert_obtain, keynote_cert_get_key, keynote_cert_get_subject
d142 11
@


1.14
log
@Merge with EOM 1.16

author: ho
Missing #ifdef USE_X509 added
@
text
@d1 2
a2 2
/*	$OpenBSD: cert.c,v 1.13 2000/03/08 08:42:48 niklas Exp $	*/
/*	$EOM: cert.c,v 1.16 2000/03/14 19:43:31 ho Exp $	*/
d58 4
d70 10
a79 1
  }
@


1.13
log
@cert.c: Merge with EOM 1.15
libcrypto.h: Merge with EOM 1.12

author: ho
KAME and ssl includes
@
text
@d1 2
a2 2
/*	$OpenBSD: cert.c,v 1.12 2000/02/19 19:32:53 niklas Exp $	*/
/*	$EOM: cert.c,v 1.15 2000/03/07 23:37:54 ho Exp $	*/
d45 6
d56 1
a56 5

#include "cert.h"
#include "isakmp_num.h"
#include "log.h"
#include "x509.h"
@


1.12
log
@cert.c: Merge with EOM 1.14
ike_auth.c: Merge with EOM 1.43
ike_phase_1.c: Merge with EOM 1.21
init.c: Merge with EOM 1.24
ipsec.c: Merge with EOM 1.117
isakmpd.c: Merge with EOM 1.44
math_group.c: Merge with EOM 1.22

author: niklas
Copyright 2000

author: niklas
Allow isakmpd builders to remove optional parts and save bytes.
@
text
@d1 2
a2 2
/*	$OpenBSD: cert.c,v 1.11 1999/08/26 22:30:46 niklas Exp $	*/
/*	$EOM: cert.c,v 1.14 2000/02/19 07:58:54 niklas Exp $	*/
d43 1
a43 1
#include <ssl/ssl.h>
d45 5
a49 1
#include "sysdep.h"
@


1.11
log
@regress/rsakeygen/rsakeygen.c: Merge with EOM 1.9
regress/x509/x509test.c: Merge with EOM 1.7
DESIGN-NOTES: Merge with EOM 1.48
README.PKI: Merge with EOM 1.6
TO-DO: Merge with EOM 1.44
cert.c: Merge with EOM 1.12

author: niklas
Add support for dynamic loading of optional facilities, libcrypto first.
@
text
@d1 2
a2 2
/*	$OpenBSD: cert.c,v 1.10 1999/07/17 21:54:39 niklas Exp $	*/
/*	$EOM: cert.c,v 1.12 1999/08/12 22:34:26 niklas Exp $	*/
d6 1
a6 1
 * Copyright (c) 1999 Niklas Hallqvist.  All rights reserved.
d53 1
a53 1
#if defined (USE_LIBCRYPTO) || defined (USE_DLOPEN)
@


1.10
log
@regress/rsakeygen/Makefile: Merge with EOM 1.4
regress/rsakeygen/rsakeygen.c: Merge with EOM 1.8
regress/x509/Makefile: Merge with EOM 1.6
regress/x509/x509test.c: Merge with EOM 1.6
regress/Makefile: Merge with EOM 1.8
samples/VPN-east.conf: Merge with EOM 1.6
samples/VPN-west.conf: Merge with EOM 1.6
samples/singlehost-east.conf: Merge with EOM 1.3
samples/singlehost-west.conf: Merge with EOM 1.3
sysdep/openbsd/Makefile.sysdep: Merge with EOM 1.5
x509.h: Merge with EOM 1.6
x509.c: Merge with EOM 1.17
DESIGN-NOTES: Merge with EOM 1.46
Makefile: Merge with EOM 1.55
cert.c: Merge with EOM 1.11
cert.h: Merge with EOM 1.6
exchange.c: Merge with EOM 1.109
exchange.h: Merge with EOM 1.26
ike_auth.c: Merge with EOM 1.32
ike_phase_1.c: Merge with EOM 1.7
init.c: Merge with EOM 1.16
isakmpd.conf.5: Merge with EOM 1.27
README.PKI: Merge with EOM 1.1

author: niklas
From Niels Provos, edited by me: certificate support using SSLeay
@
text
@d1 2
a2 2
/*	$OpenBSD: cert.c,v 1.9 1999/04/19 19:57:29 niklas Exp $	*/
/*	$EOM: cert.c,v 1.11 1999/07/17 20:44:09 niklas Exp $	*/
d53 1
d61 1
a69 3

  /* Add all algorithms know by SSL */
  SSLeay_add_all_algorithms ();
@


1.9
log
@./cert.c: Merge with EOM 1.10
./x509.c: Merge with EOM 1.13

Style

Style.  alloc error reporting.  Math error propagation.  Allocate right
sizes.

1999 copyrights
@
text
@d1 2
a2 2
/*	$OpenBSD: cert.c,v 1.8 1999/02/26 03:34:02 niklas Exp $	*/
/*	$EOM: cert.c,v 1.10 1999/04/18 15:17:23 niklas Exp $	*/
d5 1
a5 1
 * Copyright (c) 1998 Niels Provos.  All rights reserved.
d39 1
d43 2
d55 2
d61 17
@


1.8
log
@Merge from the Ericsson repository
| revision 1.7
| date: 1999/02/25 11:38:45;  author: niklas;  state: Exp;  lines: +3 -1
| include sysdep.h everywhere
| ----------------------------
@
text
@d1 2
a2 2
/*	$OpenBSD: cert.c,v 1.7 1998/11/17 11:10:08 niklas Exp $	*/
/*	$EOM: cert.c,v 1.7 1999/02/25 11:38:45 niklas Exp $	*/
d6 1
d46 1
d50 5
a54 3
    {ISAKMP_CERTENC_X509_SIG, 
     x509_certreq_validate, x509_certreq_decode, x509_free_aca,
     x509_cert_obtain, x509_cert_get_key, x509_cert_get_subject}
d65 1
a65 1
  return NULL;
d68 1
a68 3

/* Decode a CERTREQ and return a parsed structure */

d75 3
a77 2
  if ((handler = cert_get (type)) == NULL)
    return NULL;
d85 2
a86 2
      if (aca.data == NULL)
	return NULL;
d89 1
a89 1
    aca.data = NULL;
d91 2
a92 1
  if ((ret = malloc (sizeof (aca))) == NULL)
d94 1
d96 1
a96 1
      return NULL;
d99 1
a99 1
  memcpy (ret, &aca, sizeof (aca));
@


1.7
log
@Add RCS Ids from the EOM repository
@
text
@d1 2
a2 2
/*	$OpenBSD: cert.c,v 1.6 1998/11/16 21:07:16 niklas Exp $	*/
/*	$EOM: cert.c,v 1.6 1998/10/07 16:40:43 niklas Exp $	*/
d40 2
@


1.6
log
@Reinstate X509 signature code except for RSA code
@
text
@d1 2
a2 1
/*	$OpenBSD: cert.c,v 1.5 1998/11/16 12:30:45 niklas Exp $	*/
@


1.5
log
@Remove X509 hooks
@
text
@d1 1
a1 1
/*	$OpenBSD: cert.c,v 1.4 1998/11/16 12:24:13 niklas Exp $	*/
a44 1
#if 0
a47 1
#endif
@


1.4
log
@revive
@
text
@d1 1
a1 1
/*	$OpenBSD: cert.c,v 1.2 1998/11/15 00:43:50 niklas Exp $	*/
d45 1
d49 1
@


1.3
log
@Not clean enough yet
@
text
@@


1.2
log
@openBSD RCS IDs
@
text
@d1 1
a1 1
/*	$OpenBSD: cert.c,v 1.1.1.1 1998/11/15 00:03:48 niklas Exp $	*/
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$Id: cert.c,v 1.6 1998/10/07 16:40:43 niklas Exp $	*/
@


1.1.1.1
log
@Initial import of isakmpd, an IKE (ISAKMP/Oakley) implementation for the
OpenBSD IPSEC stack by me, Niklas Hallqvist and Niels Provos, funded by
Ericsson Radio Systems.  It is not yet complete or usable in a real scenario
but the missing pieces will soon be there.  The early commit is for people
who wants early access and who are not afraid of looking at source.
isakmpd interops with Cisco, Timestep, SSH & Pluto (Linux FreeS/WAN) so
far, so it is not that incomplete.  It is really mostly configuration that
is lacking.
@
text
@@
