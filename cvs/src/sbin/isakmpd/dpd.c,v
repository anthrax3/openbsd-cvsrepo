head	1.19;
access;
symbols
	OPENBSD_6_1:1.19.0.6
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.19.0.4
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.19.0.2
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.18.0.10
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.2
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.18.0.6
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.18.0.4
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.16.0.30
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.28
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.26
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.24
	OPENBSD_5_0:1.16.0.22
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.20
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.18
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.14
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.16.0.16
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.12
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.10
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.8
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.16.0.6
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.16.0.4
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.16.0.2
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.14.0.2
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.13.0.2
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.9.0.2
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4;
locks; strict;
comment	@ * @;


1.19
date	2015.12.10.17.27.00;	author mmcc;	state Exp;
branches;
next	1.18;
commitid	82PdNqu2kKAuXPfA;

1.18
date	2014.01.23.01.04.28;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2014.01.22.03.09.31;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2006.07.24.11.45.44;	author ho;	state Exp;
branches;
next	1.15;

1.15
date	2006.06.02.19.35.55;	author hshoexer;	state Exp;
branches;
next	1.14;

1.14
date	2005.10.26.20.10.48;	author markus;	state Exp;
branches;
next	1.13;

1.13
date	2005.05.04.10.05.01;	author hshoexer;	state Exp;
branches;
next	1.12;

1.12
date	2005.04.08.21.14.49;	author cloder;	state Exp;
branches;
next	1.11;

1.11
date	2005.04.08.19.40.02;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2005.04.04.19.31.11;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2005.02.24.16.16.46;	author markus;	state Exp;
branches;
next	1.8;

1.8
date	2005.02.24.16.05.42;	author markus;	state Exp;
branches;
next	1.7;

1.7
date	2004.12.28.15.15.08;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2004.12.13.11.41.28;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2004.12.08.16.08.10;	author markus;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.10.15.59.10;	author ho;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.08.19.11.06;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.20.17.17.34;	author ho;	state Exp;
branches;
next	1.1;

1.1
date	2004.06.20.15.20.06;	author ho;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Remove NULL-checks before free(). ok tb@@
@
text
@/*	$OpenBSD: dpd.c,v 1.18 2014/01/23 01:04:28 deraadt Exp $	*/

/*
 * Copyright (c) 2004 Håkan Olsson.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <stdlib.h>
#include <string.h>

#include "conf.h"
#include "dpd.h"
#include "exchange.h"
#include "hash.h"
#include "ipsec.h"
#include "isakmp_fld.h"
#include "log.h"
#include "message.h"
#include "pf_key_v2.h"
#include "sa.h"
#include "timer.h"
#include "transport.h"
#include "util.h"

/* From RFC 3706.  */
#define DPD_MAJOR		0x01
#define DPD_MINOR		0x00
#define DPD_SEQNO_SZ		4

static const u_int8_t dpd_vendor_id[] = {
	0xAF, 0xCA, 0xD7, 0x13, 0x68, 0xA1, 0xF1,	/* RFC 3706 */
	0xC9, 0x6B, 0x86, 0x96, 0xFC, 0x77, 0x57,
	DPD_MAJOR,
	DPD_MINOR
};

#define DPD_RETRANS_MAX		5	/* max number of retries.  */
#define DPD_RETRANS_WAIT	5	/* seconds between retries.  */

/* DPD Timer State */
enum dpd_tstate { DPD_TIMER_NORMAL, DPD_TIMER_CHECK };

static void	 dpd_check_event(void *);
static void	 dpd_event(void *);
static u_int32_t dpd_timer_interval(u_int32_t);
static void	 dpd_timer_reset(struct sa *, u_int32_t, enum dpd_tstate);

/* Add the DPD VENDOR ID payload.  */
int
dpd_add_vendor_payload(struct message *msg)
{
	u_int8_t *buf;
	size_t buflen = sizeof dpd_vendor_id + ISAKMP_GEN_SZ;

	buf = malloc(buflen);
	if (!buf) {
		log_error("dpd_add_vendor_payload: malloc(%lu) failed",
		    (unsigned long)buflen);
		return -1;
	}

	SET_ISAKMP_GEN_LENGTH(buf, buflen);
	memcpy(buf + ISAKMP_VENDOR_ID_OFF, dpd_vendor_id,
	    sizeof dpd_vendor_id);
	if (message_add_payload(msg, ISAKMP_PAYLOAD_VENDOR, buf, buflen, 1)) {
		free(buf);
		return -1;
	}

	return 0;
}

/*
 * Check an incoming message for DPD capability markers.
 */
void
dpd_check_vendor_payload(struct message *msg, struct payload *p)
{
	u_int8_t *pbuf = p->p;
	size_t vlen;

	/* Already checked? */
	if (msg->exchange->flags & EXCHANGE_FLAG_DPD_CAP_PEER) {
		/* Just mark it as handled and return.  */
		p->flags |= PL_MARK;
		return;
	}

	vlen = GET_ISAKMP_GEN_LENGTH(pbuf) - ISAKMP_GEN_SZ;
	if (vlen != sizeof dpd_vendor_id) {
		LOG_DBG((LOG_EXCHANGE, 90,
		    "dpd_check_vendor_payload: bad size %lu != %lu",
		    (unsigned long)vlen, (unsigned long)sizeof dpd_vendor_id));
		return;
	}

	if (memcmp(dpd_vendor_id, pbuf + ISAKMP_GEN_SZ, vlen) == 0) {
		/* This peer is DPD capable.  */
		if (msg->isakmp_sa) {
			msg->exchange->flags |= EXCHANGE_FLAG_DPD_CAP_PEER;
			LOG_DBG((LOG_EXCHANGE, 10, "dpd_check_vendor_payload: "
			    "DPD capable peer detected"));
		}
		p->flags |= PL_MARK;
	}
}

/*
 * Arm the DPD timer
 */
void
dpd_start(struct sa *isakmp_sa)
{
	if (dpd_timer_interval(0) != 0) {
		LOG_DBG((LOG_EXCHANGE, 10, "dpd_enable: enabling"));
		isakmp_sa->flags |= SA_FLAG_DPD;
		dpd_timer_reset(isakmp_sa, 0, DPD_TIMER_NORMAL);
	}
}

/*
 * All incoming DPD Notify messages enter here. Message has been validated.
 */
void
dpd_handle_notify(struct message *msg, struct payload *p)
{
	struct sa	*isakmp_sa = msg->isakmp_sa;
	u_int16_t	 notify = GET_ISAKMP_NOTIFY_MSG_TYPE(p->p);
	u_int32_t	 p_seq;

	/* Extract the sequence number.  */
	memcpy(&p_seq, p->p + ISAKMP_NOTIFY_SPI_OFF + ISAKMP_HDR_COOKIES_LEN,
	    sizeof p_seq);
	p_seq = ntohl(p_seq);

	LOG_DBG((LOG_MESSAGE, 40, "dpd_handle_notify: got %s seq %u",
	    constant_name(isakmp_notify_cst, notify), p_seq));

	switch (notify) {
	case ISAKMP_NOTIFY_STATUS_DPD_R_U_THERE:
		/* The other peer wants to know we're alive.  */
		if (p_seq < isakmp_sa->dpd_rseq ||
		    (p_seq == isakmp_sa->dpd_rseq &&
		    ++isakmp_sa->dpd_rdupcount >= DPD_RETRANS_MAX)) {
			log_print("dpd_handle_notify: bad R_U_THERE seqno "
			    "%u <= %u", p_seq, isakmp_sa->dpd_rseq);
			return;
		}
		if (isakmp_sa->dpd_rseq != p_seq) {
			isakmp_sa->dpd_rdupcount = 0;
			isakmp_sa->dpd_rseq = p_seq;
		}
		message_send_dpd_notify(isakmp_sa,
		    ISAKMP_NOTIFY_STATUS_DPD_R_U_THERE_ACK, p_seq);
		break;

	case ISAKMP_NOTIFY_STATUS_DPD_R_U_THERE_ACK:
		/* This should be a response to a R_U_THERE we've sent.  */
		if (isakmp_sa->dpd_seq != p_seq) {
			log_print("dpd_handle_notify: got bad ACK seqno %u, "
			    "expected %u", p_seq, isakmp_sa->dpd_seq);
			/* XXX Give up? Retry? */
			return;
		}
		break;
	default:
		break;
	}

	/* Mark handled.  */
	p->flags |= PL_MARK;

	/* The other peer is alive, so we can safely wait a while longer.  */
	if (isakmp_sa->flags & SA_FLAG_DPD)
		dpd_timer_reset(isakmp_sa, 0, DPD_TIMER_NORMAL);
}

/* Calculate the time until next DPD exchange.  */
static u_int32_t
dpd_timer_interval(u_int32_t offset)
{
	int32_t v = 0;

#ifdef notyet
	v = ...; /* XXX Per-peer specified DPD intervals?  */
#endif
	if (!v)
		v = conf_get_num("General", "DPD-check-interval", 0);
	if (v < 1)
		return 0;	/* DPD-Check-Interval < 1 means disable DPD */

	v -= offset;
	return v < 1 ? 1 : v;
}

static void
dpd_timer_reset(struct sa *sa, u_int32_t time_passed, enum dpd_tstate mode)
{
	struct timeval	tv;

	if (sa->dpd_event)
		timer_remove_event(sa->dpd_event);

	gettimeofday(&tv, 0);
	switch (mode) {
	case DPD_TIMER_NORMAL:
		sa->dpd_failcount = 0;
		tv.tv_sec += dpd_timer_interval(time_passed);
		sa->dpd_event = timer_add_event("dpd_event", dpd_event, sa,
		    &tv);
		break;
	case DPD_TIMER_CHECK:
		tv.tv_sec += DPD_RETRANS_WAIT;
		sa->dpd_event = timer_add_event("dpd_check_event",
		    dpd_check_event, sa, &tv);
		break;
	default:
		break;
	}
	if (!sa->dpd_event)
		log_print("dpd_timer_reset: timer_add_event failed");
}

/* Helper function for dpd_exchange_finalization().  */
static int
dpd_find_sa(struct sa *sa, void *v_sa)
{
	struct sa	*isakmp_sa = v_sa;

	if (!isakmp_sa->id_i || !isakmp_sa->id_r)
		return 0;
	return (sa->phase == 2 && (sa->flags & SA_FLAG_READY) &&
	    memcmp(sa->id_i, isakmp_sa->id_i, sa->id_i_len) == 0 &&
	    memcmp(sa->id_r, isakmp_sa->id_r, sa->id_r_len) == 0);
}

struct dpd_args {
	struct sa	*isakmp_sa;
	u_int32_t	 interval;
};

/* Helper function for dpd_event().  */
static int
dpd_check_time(struct sa *sa, void *v_arg)
{
	struct dpd_args *args = v_arg;
	struct sockaddr *dst;
	struct proto *proto;
	struct sa_kinfo *ksa;
	struct timeval tv;

	if (sa->phase == 1 || (args->isakmp_sa->flags & SA_FLAG_DPD) == 0 ||
	    dpd_find_sa(sa, args->isakmp_sa) == 0)
		return 0;

	proto = TAILQ_FIRST(&sa->protos);
	if (!proto || !proto->data)
		return 0;
	sa->transport->vtbl->get_src(sa->transport, &dst);

	gettimeofday(&tv, 0);
	ksa = pf_key_v2_get_kernel_sa(proto->spi[1], proto->spi_sz[1],
	    proto->proto, dst);

	if (!ksa || !ksa->last_used)
		return 0;

	LOG_DBG((LOG_MESSAGE, 80, "dpd_check_time: "
	    "SA %p last use %u second(s) ago", sa,
	    (u_int32_t)(tv.tv_sec - ksa->last_used)));

	if ((u_int32_t)(tv.tv_sec - ksa->last_used) < args->interval) {
		args->interval = (u_int32_t)(tv.tv_sec - ksa->last_used);
		return 1;
	}
	return 0;
}

/* Called by the timer.  */
static void
dpd_event(void *v_sa)
{
	struct sa	*isakmp_sa = v_sa;
	struct dpd_args args;
	struct sockaddr *dst;
	char *addr;

	isakmp_sa->dpd_event = 0;

	/* Check if there's been any incoming SA activity since last time.  */
	args.isakmp_sa = isakmp_sa;
	args.interval = dpd_timer_interval(0);
	if (sa_find(dpd_check_time, &args)) {
		if (args.interval > dpd_timer_interval(0))
			args.interval = 0;
		dpd_timer_reset(isakmp_sa, args.interval, DPD_TIMER_NORMAL);
		return;
	}

	/* No activity seen, do a DPD exchange.  */
	if (isakmp_sa->dpd_seq == 0) {
		/*
		 * RFC 3706: first seq# should be random, with MSB zero,
		 * otherwise we just increment it.
		 */
		arc4random_buf((u_int8_t *)&isakmp_sa->dpd_seq,
		    sizeof isakmp_sa->dpd_seq);
		isakmp_sa->dpd_seq &= 0x7FFF;
	} else
		isakmp_sa->dpd_seq++;

	isakmp_sa->transport->vtbl->get_dst(isakmp_sa->transport, &dst);
	if (sockaddr2text(dst, &addr, 0) == -1)
		addr = 0;
	LOG_DBG((LOG_MESSAGE, 30, "dpd_event: sending R_U_THERE to %s seq %u",
	    addr ? addr : "<unknown>", isakmp_sa->dpd_seq));
	free(addr);
	message_send_dpd_notify(isakmp_sa, ISAKMP_NOTIFY_STATUS_DPD_R_U_THERE,
	    isakmp_sa->dpd_seq);

	/* And set the short timer.  */
	dpd_timer_reset(isakmp_sa, 0, DPD_TIMER_CHECK);
}

/*
 * Called by the timer. If this function is called, it means we did not
 * received any R_U_THERE_ACK confirmation from the other peer.
 */
static void
dpd_check_event(void *v_sa)
{
	struct sa	*isakmp_sa = v_sa;
	struct sa	*sa;

	isakmp_sa->dpd_event = 0;

	if (++isakmp_sa->dpd_failcount < DPD_RETRANS_MAX) {
		LOG_DBG((LOG_MESSAGE, 10, "dpd_check_event: "
		    "peer not responding, retry %u of %u",
		    isakmp_sa->dpd_failcount, DPD_RETRANS_MAX));
		message_send_dpd_notify(isakmp_sa,
		    ISAKMP_NOTIFY_STATUS_DPD_R_U_THERE, isakmp_sa->dpd_seq);
		dpd_timer_reset(isakmp_sa, 0, DPD_TIMER_CHECK);
		return;
	}

	/*
	 * Peer is considered dead. Delete all SAs created under isakmp_sa.
	 */
	LOG_DBG((LOG_MESSAGE, 10, "dpd_check_event: peer is dead, "
	    "deleting all SAs connected to SA %p", isakmp_sa));
	while ((sa = sa_find(dpd_find_sa, isakmp_sa)) != 0) {
		LOG_DBG((LOG_MESSAGE, 30, "dpd_check_event: deleting SA %p",
		    sa));
		sa_delete(sa, 0);
	}
	LOG_DBG((LOG_MESSAGE, 30, "dpd_check_event: deleting ISAKMP SA %p",
	    isakmp_sa));
	sa_delete(isakmp_sa, 0);
}
@


1.18
log
@Remove a mid-layer which acts like arc4random isn't fairly standard.
ok mikeb
@
text
@d1 1
a1 1
/*	$OpenBSD: dpd.c,v 1.17 2014/01/22 03:09:31 deraadt Exp $	*/
d337 1
a337 2
	if (addr)
		free(addr);
@


1.17
log
@improve randomization.  remove some junk debugging features that are
fundamentally broken.
ok jsing mikeb
@
text
@d1 1
a1 1
/*	$OpenBSD: dpd.c,v 1.16 2006/07/24 11:45:44 ho Exp $	*/
d326 1
a326 1
		getrandom((u_int8_t *)&isakmp_sa->dpd_seq,
@


1.16
log
@Style; return is not a function. hshoexer@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: dpd.c,v 1.15 2006/06/02 19:35:55 hshoexer Exp $	*/
a29 2

#include "sysdep.h"
@


1.15
log
@Big spelling cleanup, no binary change.  From david@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dpd.c,v 1.14 2005/10/26 20:10:48 markus Exp $	*/
d253 1
a253 1
		return (0);
@


1.14
log
@don't send DPD messages before the exchange is finialized, otherwise
we have a race between DPD and exchange timeouts and both will release
the SA and corrupt the SA list. ok hshoexer@@, ho@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dpd.c,v 1.13 2005/05/04 10:05:01 hshoexer Exp $	*/
d350 1
a350 1
 * recieve any R_U_THERE_ACK confirmation from the other peer.
@


1.13
log
@clean up KEY_API() wrapper.

ok ho@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dpd.c,v 1.12 2005/04/08 21:14:49 cloder Exp $	*/
a124 7
			if (dpd_timer_interval(0) != 0) {
				LOG_DBG((LOG_EXCHANGE, 10,
				    "dpd_check_vendor_payload: enabling"));
				msg->isakmp_sa->flags |= SA_FLAG_DPD;
				dpd_timer_reset(msg->isakmp_sa, 0,
				    DPD_TIMER_NORMAL);
			}
d127 13
@


1.12
log
@Make DPD vendor ID u_int8_t, not char.  Gets rid of a warning in
-pedantic mode.  OK hshoexer
@
text
@d1 1
a1 1
/*	$OpenBSD: dpd.c,v 1.11 2005/04/08 19:40:02 deraadt Exp $	*/
d41 1
d278 1
a278 1
	ksa = sysdep_ipsec_get_kernel_sa(proto->spi[1], proto->spi_sz[1],
@


1.11
log
@USE_DEBUG is bye bye
@
text
@d1 1
a1 1
/*	$OpenBSD: dpd.c,v 1.10 2005/04/04 19:31:11 deraadt Exp $	*/
d51 1
a51 1
static const char dpd_vendor_id[] = {
@


1.10
log
@spacing; ok cloder
@
text
@d1 1
a1 1
/*	$OpenBSD: dpd.c,v 1.9 2005/02/24 16:16:46 markus Exp $	*/
a299 1
#if defined (USE_DEBUG)
a301 1
#endif
a326 1
#if defined (USE_DEBUG)
a333 1
#endif
@


1.9
log
@disable the SA dpd timer on sa_free(). this avoid a race
between DPD and initial contact (double free); ok hshoexer
@
text
@d1 1
a1 1
/*	$OpenBSD: dpd.c,v 1.8 2005/02/24 16:05:42 markus Exp $	*/
a133 1
	return;
d137 1
a137 1
 * All incoming DPD Notify messages enter here. Message has been validated. 
d235 1
a235 1
	if (!sa->dpd_event) 
d259 1
a259 1
dpd_check_time(struct sa *sa, void *v_arg) 
a290 1
	
d293 1
a293 1
	
d366 2
a367 2
	
	/* 
@


1.8
log
@dpd_find_sa: only ready SAs, otherwise DPD will delete SAs owned by
an exchange; ok hshoexer
@
text
@d1 1
a1 1
/*	$OpenBSD: dpd.c,v 1.7 2004/12/28 15:15:08 deraadt Exp $	*/
a307 2
	if (isakmp_sa->flags & SA_FLAG_REPLACED)
		return;
a357 2
	if (isakmp_sa->flags & SA_FLAG_REPLACED)
		return;
@


1.7
log
@proper portable C; ok hshoexer
@
text
@d1 1
a1 1
/*	$OpenBSD: dpd.c,v 1.6 2004/12/13 11:41:28 markus Exp $	*/
d248 1
a248 1
	return (sa->phase == 2 && 
@


1.6
log
@make sure the isakmpd_s has id_r/s set; ok hshoexer, ho
@
text
@d1 1
a1 1
/*	$OpenBSD: dpd.c,v 1.5 2004/12/08 16:08:10 markus Exp $	*/
d29 1
d113 2
a114 2
		    "dpd_check_vendor_payload: bad size %d != %d", vlen,
		    sizeof dpd_vendor_id));
d183 1
d234 1
@


1.5
log
@1. allow up to DPD_RETRANS_MAX retransmitted R_U_THERE messages.
2. reset dpd_failcount when switching to DPD_TIMER_NORMAL.
3. ignore DPD timeouts on SAs that are marked SA_FLAG_REPLACED.
ok hshoexer, ho
@
text
@d1 1
a1 1
/*	$OpenBSD: dpd.c,v 1.4 2004/08/10 15:59:10 ho Exp $	*/
d243 2
@


1.4
log
@Better implementation of the Dead Peer Detection protocol, RFC 3706.
hshoexer@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: dpd.c,v 1.3 2004/08/08 19:11:06 deraadt Exp $	*/
d157 3
a159 1
		if (p_seq <= isakmp_sa->dpd_rseq) {
d164 4
a167 1
		isakmp_sa->dpd_rseq = p_seq;
d221 1
d303 2
d355 2
@


1.3
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: dpd.c,v 1.2 2004/06/20 17:17:34 ho Exp $	*/
d32 1
d35 1
d42 1
d57 2
a58 8
int16_t script_dpd[] = {
	ISAKMP_PAYLOAD_NOTIFY,	/* Initiator -> responder.  */
	ISAKMP_PAYLOAD_HASH,
	EXCHANGE_SCRIPT_SWITCH,
	ISAKMP_PAYLOAD_NOTIFY,	/* Responder -> initiator.  */
	ISAKMP_PAYLOAD_HASH,
	EXCHANGE_SCRIPT_END
};
d60 2
a61 10
static int	dpd_initiator_send_notify(struct message *);
static int	dpd_initiator_recv_ack(struct message *);
static int	dpd_responder_recv_notify(struct message *);
static int	dpd_responder_send_ack(struct message *);
static void	dpd_event(void *);

int (*isakmp_dpd_initiator[])(struct message *) = {
	dpd_initiator_send_notify,
	dpd_initiator_recv_ack
};
d63 4
a66 4
int (*isakmp_dpd_responder[])(struct message *) = {
	dpd_responder_recv_notify,
	dpd_responder_send_ack
};
d119 12
a130 3
		msg->exchange->flags |= EXCHANGE_FLAG_DPD_CAP_PEER;
		LOG_DBG((LOG_EXCHANGE, 10, "dpd_check_vendor_payload: "
		    "DPD capable peer detected"));
a131 1
		return;
a132 1

d136 5
a140 2
static int
dpd_add_notify(struct message *msg, u_int16_t type, u_int32_t seqno)
d142 3
a144 3
	struct sa *isakmp_sa = msg->isakmp_sa;
	char *buf;
	u_int32_t buflen;
d146 31
a176 3
	if (!isakmp_sa)	{
		log_print("dpd_add_notify: no isakmp_sa");
		return -1;
d179 2
a180 7
	buflen = ISAKMP_NOTIFY_SZ + ISAKMP_HDR_COOKIES_LEN + DPD_SEQNO_SZ;
	buf = malloc(buflen);
	if (!buf) {
		log_error("dpd_add_notify: malloc(%d) failed",
		    ISAKMP_NOTIFY_SZ + DPD_SEQNO_SZ);
		return -1;
	}
d182 4
a185 6
	SET_ISAKMP_NOTIFY_DOI(buf, IPSEC_DOI_IPSEC);
	SET_ISAKMP_NOTIFY_PROTO(buf, ISAKMP_PROTO_ISAKMP);
	SET_ISAKMP_NOTIFY_SPI_SZ(buf, ISAKMP_HDR_COOKIES_LEN);
	SET_ISAKMP_NOTIFY_MSG_TYPE(buf, type);
	memcpy(buf + ISAKMP_NOTIFY_SPI_OFF, isakmp_sa->cookies,
	    ISAKMP_HDR_COOKIES_LEN);
d187 5
a191 2
	memcpy(buf + ISAKMP_NOTIFY_SPI_OFF + ISAKMP_HDR_COOKIES_LEN, &seqno,
	    sizeof (u_int32_t));
d193 7
a199 4
	if (message_add_payload(msg, ISAKMP_PAYLOAD_NOTIFY, buf, buflen, 1)) {
		free(buf);
		return -1;
	}
d201 2
a202 1
	return 0;
d205 2
a206 2
static int
dpd_initiator_send_notify(struct message *msg)
d208 1
a208 4
	if (!msg->isakmp_sa) {
		log_print("dpd_initiator_send_notify: no isakmp_sa");
		return -1;
	}
d210 2
a211 7
	if (msg->isakmp_sa->dpd_seq == 0) {
		/* RFC 3706: first seq# should be random, with MSB zero. */
		getrandom((u_int8_t *)&msg->isakmp_sa->seq,
		    sizeof msg->isakmp_sa->seq);
		msg->isakmp_sa->dpd_seq &= 0x7FFF;
	} else
		msg->isakmp_sa->dpd_seq++;
d213 16
a228 2
	return dpd_add_notify(msg, ISAKMP_NOTIFY_STATUS_DPD_R_U_THERE,
	    msg->isakmp_sa->dpd_seq);
d231 1
d233 1
a233 1
dpd_initiator_recv_ack(struct message *msg)
d235 1
a235 4
	struct payload	*p = payload_first(msg, ISAKMP_PAYLOAD_NOTIFY);
	struct sa	*isakmp_sa = msg->isakmp_sa;
	struct timeval	 tv;
	u_int32_t	 rseq;
d237 4
a240 5
	if (msg->exchange->phase != 2) {
		message_drop(msg, ISAKMP_NOTIFY_INVALID_EXCHANGE_TYPE, 0, 1,
		    0);
		return -1;
	}
d242 4
a245 5
	if (GET_ISAKMP_NOTIFY_MSG_TYPE(p->p)
	    != ISAKMP_NOTIFY_STATUS_DPD_R_U_THERE_ACK) {
		message_drop(msg, ISAKMP_NOTIFY_PAYLOAD_MALFORMED, 0, 1, 0);
		return -1;
	}
d247 18
a264 9
	/* Presumably, we've been through message_validate_notify().  */

	/* Validate the SPI. Perhaps move to message_validate_notify().  */
	if (memcmp(p->p + ISAKMP_NOTIFY_SPI_OFF, isakmp_sa->cookies,
	    ISAKMP_HDR_COOKIES_LEN) != 0) {
		log_print("dpd_initiator_recv_ack: bad cookies");
		message_drop(msg, ISAKMP_NOTIFY_INVALID_SPI, 0, 1, 0);
		return -1;
	}
a265 13
	/* Check the seqno.  */
	memcpy(p->p + ISAKMP_NOTIFY_SPI_OFF + ISAKMP_HDR_COOKIES_LEN, &rseq,
	    sizeof rseq);
	rseq = ntohl(rseq);

	if (isakmp_sa->seq != rseq) {
		log_print("dpd_initiator_recv_ack: bad seqno %u, expected %u",
		    rseq, isakmp_sa->seq);
		message_drop(msg, ISAKMP_NOTIFY_PAYLOAD_MALFORMED, 0, 1, 0);
		return -1;
	}

	/* Peer is alive. Reset timer.  */
d267 2
a268 1
	tv.tv_sec += DPD_DEFAULT_WORRY_METRIC; /* XXX Configurable */
d270 2
a271 7
	isakmp_sa->dpd_nextev = timer_add_event("dpd_event", dpd_event,
	    isakmp_sa, &tv);
	if (!isakmp_sa->dpd_nextev)
		log_print("dpd_initiator_recv_ack: timer_add_event "
		    "failed");
	else
		sa_reference(isakmp_sa);
d273 3
a275 2
	/* Mark handled.  */
	p->flags |= PL_MARK;
d277 5
d284 4
a287 3

static int
dpd_responder_recv_notify(struct message *msg)
d289 17
a305 9
	struct payload	*p = payload_first(msg, ISAKMP_PAYLOAD_NOTIFY);
	struct sa	*isakmp_sa = msg->isakmp_sa;
	struct timeval	 tv;
	u_int32_t	 rseq;

	if (msg->exchange->phase != 2) {
		message_drop(msg, ISAKMP_NOTIFY_INVALID_EXCHANGE_TYPE, 0, 1,
		    0);
		return -1;
d308 11
a318 16
	if (GET_ISAKMP_NOTIFY_MSG_TYPE(p->p) !=
	    ISAKMP_NOTIFY_STATUS_DPD_R_U_THERE)	{
		message_drop(msg, ISAKMP_NOTIFY_PAYLOAD_MALFORMED, 0, 1, 0);
		return -1;
	}

	/* Presumably, we've gone through message_validate_notify().  */
	/* XXX */

	/* Validate the SPI. Perhaps move to message_validate_notify().  */
	if (memcmp(p->p + ISAKMP_NOTIFY_SPI_OFF, isakmp_sa->cookies,
	    ISAKMP_HDR_COOKIES_LEN) != 0) {
		log_print("dpd_initiator_recv_notify: bad cookies");
		message_drop(msg, ISAKMP_NOTIFY_INVALID_SPI, 0, 1, 0);
		return -1;
	}
d320 11
a330 33
	/* Get the seqno.  */
	memcpy(p->p + ISAKMP_NOTIFY_SPI_OFF + ISAKMP_HDR_COOKIES_LEN, &rseq,
	    sizeof rseq);
	rseq = ntohl(rseq);

	/* Check increasing seqno.  */
	if (rseq <= isakmp_sa->dpd_rseq) {
		log_print("dpd_initiator_recv_notify: bad seqno (%u <= %u)",
		    rseq, isakmp_sa->dpd_rseq);
		message_drop(msg, ISAKMP_NOTIFY_PAYLOAD_MALFORMED, 0, 1, 0);
		return -1;
	}
	isakmp_sa->dpd_rseq = rseq;

	/*
	 * Ok, now we know the peer is alive, in case we're wondering.
	 * If so, reset timers, etc... here.
	 */
	if (isakmp_sa->dpd_nextev) {
		timer_remove_event(isakmp_sa->dpd_nextev);
		sa_release(isakmp_sa);

		gettimeofday(&tv, 0);
		tv.tv_sec += DPD_DEFAULT_WORRY_METRIC; /* XXX Configurable */

		isakmp_sa->dpd_nextev = timer_add_event("dpd_event", dpd_event,
		    isakmp_sa, &tv);
		if (!isakmp_sa->dpd_nextev)
			log_print("dpd_responder_recv_notify: timer_add_event "
			    "failed");
		else
			sa_reference(isakmp_sa);
	}
d332 2
a333 14
	/* Mark handled.  */
	p->flags |= PL_MARK;

	return 0;
}

static int
dpd_responder_send_ack(struct message *msg)
{
	if (!msg->isakmp_sa)
		return -1;

	return dpd_add_notify(msg, ISAKMP_NOTIFY_STATUS_DPD_R_U_THERE_ACK,
	    msg->isakmp_sa->dpd_rseq);
d336 4
d341 1
a341 1
dpd_event(void *v_sa)
d343 2
a344 1
	struct sa	*sa = v_sa;
d346 1
a346 2
	sa->dpd_nextev = 0;
	sa_release(sa);
d348 7
a354 1
	if ((sa->flags & SA_FLAG_DPD) == 0)
d356 15
a370 2

	/* Create a new DPD exchange.  XXX */
@


1.2
log
@Make the payload array in struct message dynamic, since we need to handle
payloads in the private range, such as the pre-RFC NAT-D/NAT-OA.
Replace TAILQ_FIRST(&msg->payload[i]) instances with function calls.
@
text
@d1 1
a1 1
/*	$OpenBSD: dpd.c,v 1.1 2004/06/20 15:20:06 ho Exp $	*/
d246 1
a246 1
	if (!isakmp_sa->dpd_nextev) 
d272 1
a272 1
	if (GET_ISAKMP_NOTIFY_MSG_TYPE(p->p) != 
d316 1
a316 1
		if (!isakmp_sa->dpd_nextev) 
a351 1
	
@


1.1
log
@A start towards Dead Peer Detection (DPD) support, as specified in RFC 3706
@
text
@d1 1
a1 1
/*	$OpenBSD: udp.c,v 1.65 2003/09/26 11:29:11 cedric Exp $	*/
d201 1
a201 2
	struct payload	*p =
	    TAILQ_FIRST(&msg->payload[ISAKMP_PAYLOAD_NOTIFY]);
d261 1
a261 2
	struct payload	*p =
	    TAILQ_FIRST(&msg->payload[ISAKMP_PAYLOAD_NOTIFY]);
@

