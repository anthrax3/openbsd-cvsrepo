head	1.26;
access;
symbols
	OPENBSD_6_1:1.26.0.26
	OPENBSD_6_1_BASE:1.26
	OPENBSD_6_0:1.26.0.24
	OPENBSD_6_0_BASE:1.26
	OPENBSD_5_9:1.26.0.20
	OPENBSD_5_9_BASE:1.26
	OPENBSD_5_8:1.26.0.22
	OPENBSD_5_8_BASE:1.26
	OPENBSD_5_7:1.26.0.14
	OPENBSD_5_7_BASE:1.26
	OPENBSD_5_6:1.26.0.18
	OPENBSD_5_6_BASE:1.26
	OPENBSD_5_5:1.26.0.16
	OPENBSD_5_5_BASE:1.26
	OPENBSD_5_4:1.26.0.12
	OPENBSD_5_4_BASE:1.26
	OPENBSD_5_3:1.26.0.10
	OPENBSD_5_3_BASE:1.26
	OPENBSD_5_2:1.26.0.8
	OPENBSD_5_2_BASE:1.26
	OPENBSD_5_1_BASE:1.26
	OPENBSD_5_1:1.26.0.6
	OPENBSD_5_0:1.26.0.4
	OPENBSD_5_0_BASE:1.26
	OPENBSD_4_9:1.26.0.2
	OPENBSD_4_9_BASE:1.26
	OPENBSD_4_8:1.25.0.22
	OPENBSD_4_8_BASE:1.25
	OPENBSD_4_7:1.25.0.18
	OPENBSD_4_7_BASE:1.25
	OPENBSD_4_6:1.25.0.20
	OPENBSD_4_6_BASE:1.25
	OPENBSD_4_5:1.25.0.16
	OPENBSD_4_5_BASE:1.25
	OPENBSD_4_4:1.25.0.14
	OPENBSD_4_4_BASE:1.25
	OPENBSD_4_3:1.25.0.12
	OPENBSD_4_3_BASE:1.25
	OPENBSD_4_2:1.25.0.10
	OPENBSD_4_2_BASE:1.25
	OPENBSD_4_1:1.25.0.8
	OPENBSD_4_1_BASE:1.25
	OPENBSD_4_0:1.25.0.6
	OPENBSD_4_0_BASE:1.25
	OPENBSD_3_9:1.25.0.4
	OPENBSD_3_9_BASE:1.25
	OPENBSD_3_8:1.25.0.2
	OPENBSD_3_8_BASE:1.25
	OPENBSD_3_7:1.22.0.4
	OPENBSD_3_7_BASE:1.22
	OPENBSD_3_6:1.22.0.2
	OPENBSD_3_6_BASE:1.22
	OPENBSD_3_5:1.18.0.2
	OPENBSD_3_5_BASE:1.18
	OPENBSD_3_4:1.16.0.2
	OPENBSD_3_4_BASE:1.16
	OPENBSD_3_3:1.14.0.8
	OPENBSD_3_3_BASE:1.14
	OPENBSD_3_2:1.14.0.6
	OPENBSD_3_2_BASE:1.14
	OPENBSD_3_1:1.14.0.4
	OPENBSD_3_1_BASE:1.14
	OPENBSD_3_0:1.14.0.2
	OPENBSD_3_0_BASE:1.14
	OPENBSD_2_9:1.11.0.4
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_8:1.11.0.2
	OPENBSD_2_8_BASE:1.11
	OPENBSD_2_7:1.9.0.2
	OPENBSD_2_7_BASE:1.9
	OPENBSD_2_6:1.8.0.2
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.4.0.2
	OPENBSD_2_5_BASE:1.4
	NIKLAS_981114:1.1.1.1
	NIKLAS:1.1.1;
locks; strict;
comment	@ * @;


1.26
date	2010.10.18.21.38.58;	author todd;	state Exp;
branches;
next	1.25;

1.25
date	2005.04.08.22.32.10;	author cloder;	state Exp;
branches;
next	1.24;

1.24
date	2005.04.08.19.40.03;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	2005.04.08.16.52.41;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	2004.06.20.17.17.35;	author ho;	state Exp;
branches;
next	1.21;

1.21
date	2004.06.14.09.55.41;	author ho;	state Exp;
branches;
next	1.20;

1.20
date	2004.05.23.18.17.56;	author hshoexer;	state Exp;
branches;
next	1.19;

1.19
date	2004.04.15.18.39.26;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2004.03.10.23.08.49;	author hshoexer;	state Exp;
branches;
next	1.17;

1.17
date	2003.10.14.14.29.15;	author ho;	state Exp;
branches;
next	1.16;

1.16
date	2003.08.08.08.46.59;	author ho;	state Exp;
branches
	1.16.2.1;
next	1.15;

1.15
date	2003.06.03.14.28.16;	author ho;	state Exp;
branches;
next	1.14;

1.14
date	2001.07.05.12.36.52;	author ho;	state Exp;
branches
	1.14.8.1;
next	1.13;

1.13
date	2001.07.01.20.43.39;	author niklas;	state Exp;
branches;
next	1.12;

1.12
date	2001.06.27.03.31.41;	author angelos;	state Exp;
branches;
next	1.11;

1.11
date	2000.10.07.06.59.24;	author niklas;	state Exp;
branches;
next	1.10;

1.10
date	2000.08.03.07.23.00;	author niklas;	state Exp;
branches;
next	1.9;

1.9
date	2000.02.25.17.23.40;	author niklas;	state Exp;
branches;
next	1.8;

1.8
date	99.05.02.19.20.33;	author niklas;	state Exp;
branches;
next	1.7;

1.7
date	99.04.30.11.47.41;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	99.04.27.20.57.20;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	99.04.19.19.54.53;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	99.02.26.03.44.24;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	98.11.17.11.10.14;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	98.11.15.00.43.56;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	98.11.15.00.03.48;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.11.15.00.03.48;	author niklas;	state Exp;
branches;
next	;

1.14.8.1
date	2004.03.17.15.05.03;	author brad;	state Exp;
branches;
next	;

1.16.2.1
date	2004.03.17.14.59.17;	author brad;	state Exp;
branches;
next	;


desc
@@


1.26
log
@as determined 4 years ago, FortiGate needs DOI of 0 responses to DPD
so, copy a small bit of logic to make DPD interop with FortiGate function
tested by me, ok mikeb@@, silence from 'the usual suspects'
@
text
@/* $OpenBSD: isakmp_doi.c,v 1.25 2005/04/08 22:32:10 cloder Exp $	 */
/* $EOM: isakmp_doi.c,v 1.42 2000/09/12 16:29:41 ho Exp $	 */

/*
 * Copyright (c) 1998, 1999, 2001 Niklas Hallqvist.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This code was written under funding by Ericsson Radio Systems.
 */

/*
 * XXX This DOI is very fuzzily defined, and should perhaps be short-circuited
 * to the IPsec DOI instead.  At the moment I will have it as its own DOI,
 * as the ISAKMP architecture seems to imply it should be done like this.
 */

#include <sys/types.h>

#include "doi.h"
#include "dpd.h"
#include "exchange.h"
#include "isakmp.h"
#include "isakmp_doi.h"
#include "ipsec.h"
#include "log.h"
#include "message.h"
#include "sa.h"
#include "util.h"

static int      isakmp_debug_attribute(u_int16_t, u_int8_t *, u_int16_t,
    void *);
static void     isakmp_finalize_exchange(struct message *);
static struct keystate *isakmp_get_keystate(struct message *);
static int      isakmp_initiator(struct message *);
static int      isakmp_responder(struct message *);
static void     isakmp_setup_situation(u_int8_t *);
static size_t   isakmp_situation_size(void);
static u_int8_t isakmp_spi_size(u_int8_t);
static int	isakmp_validate_attribute(u_int16_t, u_int8_t *, u_int16_t,
    void *);
static int      isakmp_validate_exchange(u_int8_t);
static int	isakmp_validate_id_information(u_int8_t, u_int8_t *,
    u_int8_t *, size_t, struct exchange *);
static int      isakmp_validate_key_information(u_int8_t *, size_t);
static int      isakmp_validate_notification(u_int16_t);
static int      isakmp_validate_proto(u_int8_t);
static int      isakmp_validate_situation(u_int8_t *, size_t *, size_t);
static int      isakmp_validate_transform_id(u_int8_t, u_int8_t);

static struct doi isakmp_doi = {
	{0}, ISAKMP_DOI_ISAKMP, 0, 0, 0,
	isakmp_debug_attribute,
	0,			/* delete_spi not needed.  */
	0,			/* exchange_script not needed.  */
	isakmp_finalize_exchange,
	0,			/* free_exchange_data not needed.  */
	0,			/* free_proto_data not needed.  */
	0,			/* free_sa_data not needed.  */
	isakmp_get_keystate,
	0,			/* get_spi not needed.  */
	0,			/* handle_leftover_payload not needed.  */
	0,			/* informational_post_hook not needed.  */
	0,			/* informational_pre_hook not needed.  */
	0,			/* XXX need maybe be filled-in.  */
	0,			/* proto_init not needed.  */
	isakmp_setup_situation,
	isakmp_situation_size,
	isakmp_spi_size,
	isakmp_validate_attribute,
	isakmp_validate_exchange,
	isakmp_validate_id_information,
	isakmp_validate_key_information,
	isakmp_validate_notification,
	isakmp_validate_proto,
	isakmp_validate_situation,
	isakmp_validate_transform_id,
	isakmp_initiator,
	isakmp_responder,
	ipsec_decode_ids
};

/* Requires doi_init to already have been called.  */
void
isakmp_doi_init(void)
{
	doi_register(&isakmp_doi);
}

int
isakmp_debug_attribute(u_int16_t type, u_int8_t *value, u_int16_t len,
    void *vmsg)
{
	/* XXX Not implemented yet.  */
	return 0;
}

static void
isakmp_finalize_exchange(struct message *msg)
{
}

static struct keystate *
isakmp_get_keystate(struct message *msg)
{
	return 0;
}

static void
isakmp_setup_situation(u_int8_t *buf)
{
	/* Nothing to do.  */
}

static size_t
isakmp_situation_size(void)
{
	return 0;
}

static u_int8_t
isakmp_spi_size(u_int8_t proto)
{
	/* One way to specify ISAKMP SPIs is to say they're zero-sized.  */
	return 0;
}

static int
isakmp_validate_attribute(u_int16_t type, u_int8_t *value, u_int16_t len,
    void *vmsg)
{
	/* XXX Not implemented yet.  */
	return -1;
}

static int
isakmp_validate_exchange(u_int8_t exch)
{
	/* If we get here the exchange is invalid.  */
	return -1;
}

static int
isakmp_validate_id_information(u_int8_t type, u_int8_t *extra, u_int8_t *buf,
    size_t sz, struct exchange *exchange)
{
	return zero_test(extra, ISAKMP_ID_DOI_DATA_LEN);
}

static int
isakmp_validate_key_information(u_int8_t *buf, size_t sz)
{
	/* Nothing to do.  */
	return 0;
}

static int
isakmp_validate_notification(u_int16_t type)
{
	/* If we get here the message type is invalid.  */
	return -1;
}

static int
isakmp_validate_proto(u_int8_t proto)
{
	/* If we get here the protocol is invalid.  */
	return -1;
}

static int
isakmp_validate_situation(u_int8_t *buf, size_t *sz, size_t len)
{
	/* There are no situations in the ISAKMP DOI.  */
	*sz = 0;
	return 0;
}

static int
isakmp_validate_transform_id(u_int8_t proto, u_int8_t transform_id)
{
	/* XXX Not yet implemented.  */
	return -1;
}

static int
isakmp_initiator(struct message *msg)
{
	if (msg->exchange->type != ISAKMP_EXCH_INFO) {
		log_print("isakmp_initiator: unsupported exchange type %d "
		    "in phase %d", msg->exchange->type, msg->exchange->phase);
		return -1;
	}
	return message_send_info(msg);
}

static int
isakmp_responder(struct message *msg)
{
	struct payload *p;
	u_int16_t	type;

	switch (msg->exchange->type) {
	case ISAKMP_EXCH_INFO:
		for (p = payload_first(msg, ISAKMP_PAYLOAD_NOTIFY); p;
		    p = TAILQ_NEXT(p, link)) {
			type = GET_ISAKMP_NOTIFY_MSG_TYPE(p->p);

			LOG_DBG((LOG_EXCHANGE, 10, "isakmp_responder: "
			    "got NOTIFY of type %s",
			    constant_name(isakmp_notify_cst,
			    type)));

			switch (type) {
			case ISAKMP_NOTIFY_STATUS_DPD_R_U_THERE:
			case ISAKMP_NOTIFY_STATUS_DPD_R_U_THERE_ACK:
				dpd_handle_notify(msg, p);
				break;

			default:
				p->flags |= PL_MARK;
				break;
			}
		}

		for (p = payload_first(msg, ISAKMP_PAYLOAD_DELETE); p;
		    p = TAILQ_NEXT(p, link)) {
			LOG_DBG((LOG_EXCHANGE, 10,
			    "isakmp_responder: got DELETE, ignoring"));
			p->flags |= PL_MARK;
		}
		return 0;

	case ISAKMP_EXCH_TRANSACTION:
		/* return 0 isakmp_cfg_responder (msg); */

	default:
		/* XXX So far we don't accept any proposals.  */
		if (payload_first(msg, ISAKMP_PAYLOAD_SA)) {
			message_drop(msg, ISAKMP_NOTIFY_NO_PROPOSAL_CHOSEN,
			    0, 1, 0);
			return -1;
		}
	}
	return 0;
}
@


1.25
log
@Make deterministic randomness (only ever used for testing) a compile-time
option.  Reduces chances of somehow setting regrand when it's not supposed
to be set.  Remove "-r" option from man page.  Also xref certpatch(8) while
we are in there.  And remove some include sysdep.h where it is no longer
needed.
OK hshoexer
@
text
@d1 1
a1 1
/* $OpenBSD: isakmp_doi.c,v 1.24 2005/04/08 19:40:03 deraadt Exp $	 */
d41 1
d221 1
d227 2
d230 1
a230 1
			    "got NOTIFY of type %s, ignoring",
d232 12
a243 2
			    GET_ISAKMP_NOTIFY_MSG_TYPE(p->p))));
			p->flags |= PL_MARK;
@


1.24
log
@USE_DEBUG is bye bye
@
text
@d1 1
a1 1
/* $OpenBSD: isakmp_doi.c,v 1.23 2005/04/08 16:52:41 deraadt Exp $	 */
a38 2

#include "sysdep.h"
@


1.23
log
@always enable aggressive, dpd, and isakmp_cfg
@
text
@d1 1
a1 1
/* $OpenBSD: isakmp_doi.c,v 1.22 2004/06/20 17:17:35 ho Exp $	 */
a51 1
#ifdef USE_DEBUG
a53 1
#endif
a73 1
#ifdef USE_DEBUG
a74 1
#endif
a100 1
#ifdef USE_DEBUG
a101 1
#endif
a110 1
#ifdef USE_DEBUG
a117 1
#endif				/* USE_DEBUG */
@


1.22
log
@Make the payload array in struct message dynamic, since we need to handle
payloads in the private range, such as the pre-RFC NAT-D/NAT-OA.
Replace TAILQ_FIRST(&msg->payload[i]) instances with function calls.
@
text
@d1 1
a1 1
/* $OpenBSD: isakmp_doi.c,v 1.21 2004/06/14 09:55:41 ho Exp $	 */
a249 1
#ifdef USE_ISAKMP_CFG
a251 1
#endif /* USE_ISAKMP_CFG */
@


1.21
log
@KNF, style, 80c, etc. hshoexer@@ ok
@
text
@d1 1
a1 1
/* $OpenBSD: isakmp_doi.c,v 1.20 2004/05/23 18:17:56 hshoexer Exp $	 */
d233 1
a233 1
		for (p = TAILQ_FIRST(&msg->payload[ISAKMP_PAYLOAD_NOTIFY]); p;
d242 1
a242 1
		for (p = TAILQ_FIRST(&msg->payload[ISAKMP_PAYLOAD_DELETE]); p;
d257 1
a257 1
		if (TAILQ_FIRST(&msg->payload[ISAKMP_PAYLOAD_SA])) {
@


1.20
log
@More KNF.  Mainly spaces and line-wraps, no binary change.

ok ho@@
@
text
@d1 1
a1 1
/* $OpenBSD: isakmp_doi.c,v 1.19 2004/04/15 18:39:26 deraadt Exp $	 */
d53 2
a54 1
static int      isakmp_debug_attribute(u_int16_t, u_int8_t *, u_int16_t, void *);
d64 1
a64 1
		    void *);
d66 2
a67 2
static int	isakmp_validate_id_information(u_int8_t, u_int8_t *, u_int8_t *,
		    size_t, struct exchange *);
d235 2
a236 2
			LOG_DBG((LOG_EXCHANGE, 10,
			    "isakmp_responder: got NOTIFY of type %s, ignoring",
@


1.19
log
@partial move to KNF.  More to come.  This has happened because there
are a raft of source code auditors who are willing to help improve this
code only if this is done, and hey, isakmpd does need our standard
auditing process.  ok ho hshoexer
@
text
@d1 1
a1 1
/* $OpenBSD: isakmp_doi.c,v 1.18 2004/03/10 23:08:49 hshoexer Exp $	 */
d62 2
a63 3
static int
isakmp_validate_attribute(u_int16_t, u_int8_t *, u_int16_t,
			  void *);
d65 2
a66 3
static int
isakmp_validate_id_information(u_int8_t, u_int8_t *, u_int8_t *,
			       size_t, struct exchange *);
d118 2
a119 2
isakmp_debug_attribute(u_int16_t type, u_int8_t * value, u_int16_t len,
		       void *vmsg)
d127 1
a127 1
isakmp_finalize_exchange(struct message * msg)
d132 1
a132 1
isakmp_get_keystate(struct message * msg)
d138 1
a138 1
isakmp_setup_situation(u_int8_t * buf)
d218 2
a219 2
		log_print("isakmp_initiator: unsupported exchange type %d in phase %d",
		    msg->exchange->type, msg->exchange->phase);
d226 1
a226 1
isakmp_responder(struct message * msg)
d257 2
a258 1
			message_drop(msg, ISAKMP_NOTIFY_NO_PROPOSAL_CHOSEN, 0, 1, 0);
@


1.18
log
@Fix payload handling flaws found by cloder@@.  Based on initial patch by
cloder@@.  Testing by markus@@ cloder@@ hshoexer@@.

ok ho@@
@
text
@d1 2
a2 2
/*	$OpenBSD: isakmp_doi.c,v 1.17 2003/10/14 14:29:15 ho Exp $	*/
/*	$EOM: isakmp_doi.c,v 1.42 2000/09/12 16:29:41 ho Exp $	*/
d53 1
a53 1
static int isakmp_debug_attribute (u_int16_t, u_int8_t *, u_int16_t, void *);
d55 19
a73 17
static void isakmp_finalize_exchange (struct message *);
static struct keystate *isakmp_get_keystate (struct message *);
static int isakmp_initiator (struct message *);
static int isakmp_responder (struct message *);
static void isakmp_setup_situation (u_int8_t *);
static size_t isakmp_situation_size (void);
static u_int8_t isakmp_spi_size (u_int8_t);
static int isakmp_validate_attribute (u_int16_t, u_int8_t *, u_int16_t,
				      void *);
static int isakmp_validate_exchange (u_int8_t);
static int isakmp_validate_id_information (u_int8_t, u_int8_t *, u_int8_t *,
					   size_t, struct exchange *);
static int isakmp_validate_key_information (u_int8_t *, size_t);
static int isakmp_validate_notification (u_int16_t);
static int isakmp_validate_proto (u_int8_t);
static int isakmp_validate_situation (u_int8_t *, size_t *, size_t);
static int isakmp_validate_transform_id (u_int8_t, u_int8_t);
d76 1
a76 1
  { 0 }, ISAKMP_DOI_ISAKMP, 0, 0, 0,
d78 1
a78 1
  isakmp_debug_attribute,
d80 26
a105 26
  0,				/* delete_spi not needed.  */
  0,				/* exchange_script not needed.  */
  isakmp_finalize_exchange,
  0,				/* free_exchange_data not needed.  */
  0,				/* free_proto_data not needed.  */
  0,				/* free_sa_data not needed.  */
  isakmp_get_keystate,
  0,				/* get_spi not needed.  */
  0,				/* handle_leftover_payload not needed.  */
  0,				/* informational_post_hook not needed.  */
  0,				/* informational_pre_hook not needed.  */
  0,				/* XXX need maybe be filled-in.  */
  0,				/* proto_init not needed.  */
  isakmp_setup_situation,
  isakmp_situation_size,
  isakmp_spi_size,
  isakmp_validate_attribute,
  isakmp_validate_exchange,
  isakmp_validate_id_information,
  isakmp_validate_key_information,
  isakmp_validate_notification,
  isakmp_validate_proto,
  isakmp_validate_situation,
  isakmp_validate_transform_id,
  isakmp_initiator,
  isakmp_responder,
d107 1
a107 1
  ipsec_decode_ids
d113 1
a113 1
isakmp_doi_init (void)
d115 1
a115 1
  doi_register (&isakmp_doi);
d120 2
a121 2
isakmp_debug_attribute (u_int16_t type, u_int8_t *value, u_int16_t len,
			void *vmsg)
d123 2
a124 2
  /* XXX Not implemented yet.  */
  return 0;
d126 1
a126 1
#endif /* USE_DEBUG */
d129 1
a129 1
isakmp_finalize_exchange (struct message *msg)
d134 1
a134 1
isakmp_get_keystate (struct message *msg)
d136 1
a136 1
  return 0;
d140 1
a140 1
isakmp_setup_situation (u_int8_t *buf)
d142 1
a142 1
  /* Nothing to do.  */
d146 1
a146 1
isakmp_situation_size (void)
d148 1
a148 1
  return 0;
d152 1
a152 1
isakmp_spi_size (u_int8_t proto)
d154 2
a155 2
  /* One way to specify ISAKMP SPIs is to say they're zero-sized.  */
  return 0;
d159 2
a160 2
isakmp_validate_attribute (u_int16_t type, u_int8_t *value, u_int16_t len,
			   void *vmsg)
d162 2
a163 2
  /* XXX Not implemented yet.  */
  return -1;
d167 1
a167 1
isakmp_validate_exchange (u_int8_t exch)
d169 2
a170 2
  /* If we get here the exchange is invalid.  */
  return -1;
d174 2
a175 2
isakmp_validate_id_information (u_int8_t type, u_int8_t *extra, u_int8_t *buf,
				size_t sz, struct exchange *exchange)
d177 1
a177 1
  return zero_test (extra, ISAKMP_ID_DOI_DATA_LEN);
d181 1
a181 1
isakmp_validate_key_information (u_int8_t *buf, size_t sz)
d183 2
a184 2
  /* Nothing to do.  */
  return 0;
d188 1
a188 1
isakmp_validate_notification (u_int16_t type)
d190 2
a191 2
  /* If we get here the message type is invalid.  */
  return -1;
d195 1
a195 1
isakmp_validate_proto (u_int8_t proto)
d197 2
a198 2
  /* If we get here the protocol is invalid.  */
  return -1;
d202 1
a202 1
isakmp_validate_situation (u_int8_t *buf, size_t *sz, size_t len)
d204 3
a206 3
  /* There are no situations in the ISAKMP DOI.  */
  *sz = 0;
  return 0;
d210 1
a210 1
isakmp_validate_transform_id (u_int8_t proto, u_int8_t transform_id)
d212 2
a213 2
  /* XXX Not yet implemented.  */
  return -1;
d217 1
a217 1
isakmp_initiator (struct message *msg)
d219 6
a224 8
  if (msg->exchange->type != ISAKMP_EXCH_INFO)
    {
      log_print ("isakmp_initiator: unsupported exchange type %d in phase %d",
		 msg->exchange->type, msg->exchange->phase);
      return -1;
    }

  return message_send_info (msg);
d228 1
a228 1
isakmp_responder (struct message *msg)
d230 1
a230 1
  struct payload *p;
d232 18
a249 21
  switch (msg->exchange->type)
    {
    case ISAKMP_EXCH_INFO:
      for (p = TAILQ_FIRST (&msg->payload[ISAKMP_PAYLOAD_NOTIFY]); p;
	   p = TAILQ_NEXT (p, link))
	{
	  LOG_DBG ((LOG_EXCHANGE, 10,
		    "isakmp_responder: got NOTIFY of type %s, ignoring",
		    constant_name (isakmp_notify_cst,
				   GET_ISAKMP_NOTIFY_MSG_TYPE (p->p))));
	  p->flags |= PL_MARK;
	}

      for (p = TAILQ_FIRST (&msg->payload[ISAKMP_PAYLOAD_DELETE]); p;
	   p = TAILQ_NEXT (p, link))
	{
	  LOG_DBG ((LOG_EXCHANGE, 10,
		    "isakmp_responder: got DELETE, ignoring"));
	  p->flags |= PL_MARK;
	}
      return 0;
d252 2
a253 2
    case ISAKMP_EXCH_TRANSACTION:
      /* return 0 isakmp_cfg_responder (msg); */
d256 6
a261 6
    default:
      /* XXX So far we don't accept any proposals.  */
      if (TAILQ_FIRST (&msg->payload[ISAKMP_PAYLOAD_SA]))
	{
	  message_drop (msg, ISAKMP_NOTIFY_NO_PROPOSAL_CHOSEN, 0, 1, 0);
	  return -1;
d263 1
a263 2
    }
  return 0;
@


1.17
log
@constant_lookup() to constant_name() cleanup. markus@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: isakmp_doi.c,v 1.16 2003/08/08 08:46:59 ho Exp $	*/
d70 1
a70 1
static int isakmp_validate_situation (u_int8_t *, size_t *);
d200 1
a200 1
isakmp_validate_situation (u_int8_t *buf, size_t *sz)
@


1.16
log
@Be more careful when using constant_lookup() in messages. Pointed out by
Jean-Francois Dive, although I opted for a slightly different patch.
@
text
@d1 1
a1 1
/*	$OpenBSD: isakmp_doi.c,v 1.15 2003/06/03 14:28:16 ho Exp $	*/
a230 1
  char *tag;
a237 2
	  tag = constant_lookup (isakmp_notify_cst,
				 GET_ISAKMP_NOTIFY_MSG_TYPE (p->p));
d240 2
a241 1
		    tag ? tag : "<unknown>"));
@


1.16.2.1
log
@MFC:
Fix by hshoexer@@

Fix payload handling flaws found by cloder@@.  Based on initial patch by
cloder@@.

ok deraadt@@ hshoexer@@
@
text
@d1 1
a1 1
/*	$OpenBSD: isakmp_doi.c,v 1.16 2003/08/08 08:46:59 ho Exp $	*/
d70 1
a70 1
static int isakmp_validate_situation (u_int8_t *, size_t *, size_t);
d200 1
a200 1
isakmp_validate_situation (u_int8_t *buf, size_t *sz, size_t len)
@


1.15
log
@Remove clauses 3 and 4. With approval from Niklas Hallqvist and
Niels Provos.
@
text
@d1 1
a1 1
/*	$OpenBSD: isakmp_doi.c,v 1.14 2001/07/05 12:36:52 ho Exp $	*/
d231 1
d239 2
d243 1
a243 2
		    constant_lookup (isakmp_notify_cst,
				     GET_ISAKMP_NOTIFY_MSG_TYPE (p->p))));
@


1.14
log
@Add prototypes and some other various cleanup.
@
text
@d1 1
a1 1
/*	$OpenBSD: isakmp_doi.c,v 1.13 2001/07/01 20:43:39 niklas Exp $	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Ericsson Radio Systems.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.14.8.1
log
@MFC:
Fix by hshoexer@@

Fix payload handling flaws found by cloder@@.  Based on initial patch by
cloder@@.

ok deraadt@@ hshoexer@@
@
text
@d1 1
a1 1
/*	$OpenBSD: isakmp_doi.c,v 1.14 2001/07/05 12:36:52 ho Exp $	*/
d75 1
a75 1
static int isakmp_validate_situation (u_int8_t *, size_t *, size_t);
d205 1
a205 1
isakmp_validate_situation (u_int8_t *buf, size_t *sz, size_t len)
@


1.13
log
@ISAKMP configuration, a.k.a IKECFG or "mode-config", protocol implementation.
Disabled, has no configuration mechanism yet.  This will be used for roaming
users, who are going to get parameters like IP-address and nameserver from its
peer, very much like DHCP, but securily inside an ISAKMP connection and still
in time before negotiation of IPsec connections.  You may see stylistic fixes
in this commit too.  Add some not yet used Makefile magic to deal with DNSSEC-
enabled OpenSSL too.  The IKECFG code work was sponsered by Gatespace Inc.
Thank you!  Configuration will come very soon, btw.
@
text
@d1 1
a1 1
/*	$OpenBSD: isakmp_doi.c,v 1.12 2001/06/27 03:31:41 angelos Exp $	*/
d50 1
d116 1
a116 1
isakmp_doi_init ()
@


1.12
log
@Consistently use "IPsec" capitalization (jsyn@@nthought.com)
@
text
@d1 1
a1 1
/*	$OpenBSD: isakmp_doi.c,v 1.11 2000/10/07 06:59:24 niklas Exp $	*/
d5 1
a5 1
 * Copyright (c) 1998, 1999 Niklas Hallqvist.  All rights reserved.
d257 5
@


1.11
log
@Merge with EOM 1.42

author: ho
ipsec_decode_ids is only used with USE_DEBUG
@
text
@d1 1
a1 1
/*	$OpenBSD: isakmp_doi.c,v 1.10 2000/08/03 07:23:00 niklas Exp $	*/
d39 1
a39 1
 * to the IPSEC DOI instead.  At the moment I will have it as its own DOI,
@


1.10
log
@isakmp_doi.c: Merge with EOM 1.41
doi.h: Merge with EOM 1.29

author: provos
make a DOI specific decode_ids, but have isakmp doi decode point to
ipsec.
@
text
@d1 2
a2 2
/*	$OpenBSD: isakmp_doi.c,v 1.9 2000/02/25 17:23:40 niklas Exp $	*/
/*	$EOM: isakmp_doi.c,v 1.41 2000/07/02 18:47:16 provos Exp $	*/
d108 1
d110 1
@


1.9
log
@regress/crypto/Makefile: Merge with EOM 1.5
regress/dh/Makefile: Merge with EOM 1.7
regress/group/Makefile: Merge with EOM 1.9
regress/prf/Makefile: Merge with EOM 1.4
regress/rsakeygen/Makefile: Merge with EOM 1.8
regress/x509/Makefile: Merge with EOM 1.10
Makefile: Merge with EOM 1.62
attribute.c: Merge with EOM 1.10
sa.c: Merge with EOM 1.99
conf.c: Merge with EOM 1.20
crypto.c: Merge with EOM 1.28
isakmpd.c: Merge with EOM 1.45
connection.c: Merge with EOM 1.19
doi.h: Merge with EOM 1.28
field.c: Merge with EOM 1.11
exchange.c: Merge with EOM 1.116
ike_auth.c: Merge with EOM 1.44
pf_key_v2.c: Merge with EOM 1.37
ike_phase_1.c: Merge with EOM 1.22
ipsec.c: Merge with EOM 1.118
isakmp_doi.c: Merge with EOM 1.40
log.c: Merge with EOM 1.26
log.h: Merge with EOM 1.18
math_group.c: Merge with EOM 1.23
message.c: Merge with EOM 1.144
pf_encap.c: Merge with EOM 1.70
policy.c: Merge with EOM 1.18
timer.c: Merge with EOM 1.13
transport.c: Merge with EOM 1.41
udp.c: Merge with EOM 1.47
ui.c: Merge with EOM 1.37
x509.c: Merge with EOM 1.36

author: niklas
Made debug logging a compile time selectable feature
@
text
@d1 2
a2 2
/*	$OpenBSD: isakmp_doi.c,v 1.8 1999/05/02 19:20:33 niklas Exp $	*/
/*	$EOM: isakmp_doi.c,v 1.40 2000/02/20 19:58:39 niklas Exp $	*/
d50 1
d107 2
a108 1
  isakmp_responder
@


1.8
log
@BUGS: Merge with EOM 1.31
doi.h: Merge with EOM 1.27
ike_auth.c: Merge with EOM 1.30
ike_quick_mode.c: Merge with EOM 1.85
ipsec.c: Merge with EOM 1.107
ipsec.h: Merge with EOM 1.36
isakmp_doi.c: Merge with EOM 1.39

author: niklas
Factor out keyed hashing of all payloads with SKEYID_a, and make DOI hooks
for informational exchanges to add such hashing.  Use it from QM and the IKE
authentication module too.  Remove some bogus XXX comments.  Add error
reporting
@
text
@d1 2
a2 2
/*	$OpenBSD: isakmp_doi.c,v 1.7 1999/04/30 11:47:41 niklas Exp $	*/
/*	$EOM: isakmp_doi.c,v 1.39 1999/05/02 12:49:01 niklas Exp $	*/
d55 1
d57 1
d78 1
d80 1
d116 1
d124 1
d238 4
a241 4
	  log_debug (LOG_EXCHANGE, 10,
		     "isakmp_responder: got NOTIFY of type %s, ignoring",
		     constant_lookup (isakmp_notify_cst,
				      GET_ISAKMP_NOTIFY_MSG_TYPE (p->p)));
d248 2
a249 2
	  log_debug (LOG_EXCHANGE, 10,
		     "isakmp_responder: got DELETE, ignoring");
@


1.7
log
@ipsec.c: Merge with EOM 1.105
isakmp_doi.c: Merge with EOM 1.38

author: niklas
Recognize but ignore incoming informationmal exchanges

author: niklas
New message_drop API.  Generate real INVALID_COOKIE notification.
Generate informational exchanges in phase 1 too.  Really get these
messages to the wire
@
text
@d1 2
a2 2
/*	$OpenBSD: isakmp_doi.c,v 1.6 1999/04/27 20:57:20 niklas Exp $	*/
/*	$EOM: isakmp_doi.c,v 1.38 1999/04/29 12:08:49 niklas Exp $	*/
d86 2
@


1.6
log
@doi.h: Merge with EOM 1.26
isakmp_doi.c: Merge with EOM 1.36

author: niklas
Handle leftover payloads.
@
text
@d1 2
a2 2
/*	$OpenBSD: isakmp_doi.c,v 1.5 1999/04/19 19:54:53 niklas Exp $	*/
/*	$EOM: isakmp_doi.c,v 1.36 1999/04/27 09:40:32 niklas Exp $	*/
d209 8
a216 2
  /* XXX Not implemented yet.  */
  return 0;
d222 3
a224 2
  /* XXX So far we don't accept any proposals.  */
  if (TAILQ_FIRST (&msg->payload[ISAKMP_PAYLOAD_SA]))
d226 27
a252 2
      message_drop (msg, ISAKMP_NOTIFY_NO_PROPOSAL_CHOSEN, 0, 0, 0);
      return -1;
@


1.5
log
@./app.c: Merge with EOM 1.5
./gmp_util.c: Merge with EOM 1.3
./asn_useful.c: Merge with EOM 1.11
./attribute.c: Merge with EOM 1.9
./constants.c: Merge with EOM 1.7
./doi.h: Merge with EOM 1.25
./doi.c: Merge with EOM 1.4
./field.c: Merge with EOM 1.9
./init.c: Merge with EOM 1.13
./isakmp_doi.c: Merge with EOM 1.35
./prf.c: Merge with EOM 1.6
./util.c: Merge with EOM 1.14
./app.h: Merge with EOM 1.4
./conf.h: Merge with EOM 1.8
./ipsec.h: Merge with EOM 1.34
./ipsec_doi.h: Merge with EOM 1.10
./pkcs.h: Merge with EOM 1.8
./sysdep.h: Merge with EOM 1.15

1999 copyrights
@
text
@d1 2
a2 2
/*	$OpenBSD: isakmp_doi.c,v 1.4 1999/02/26 03:44:24 niklas Exp $	*/
/*	$EOM: isakmp_doi.c,v 1.35 1999/04/02 00:57:52 niklas Exp $	*/
d85 1
@


1.4
log
@Merge from the Ericsson repository
| revision 1.34
| date: 1999/02/25 11:39:08;  author: niklas;  state: Exp;  lines: +3 -1
| include sysdep.h everywhere
| ----------------------------
| revision 1.33
| date: 1999/02/25 09:30:27;  author: niklas;  state: Exp;  lines: +2 -1
| Replay protection window configurable
| ----------------------------
@
text
@d1 2
a2 2
/*	$OpenBSD: isakmp_doi.c,v 1.3 1998/11/17 11:10:14 niklas Exp $	*/
/*	$EOM: isakmp_doi.c,v 1.34 1999/02/25 11:39:08 niklas Exp $	*/
d5 1
a5 1
 * Copyright (c) 1998 Niklas Hallqvist.  All rights reserved.
@


1.3
log
@Add RCS Ids from the EOM repository
@
text
@d1 2
a2 2
/*	$OpenBSD: isakmp_doi.c,v 1.2 1998/11/15 00:43:56 niklas Exp $	*/
/*	$EOM: isakmp_doi.c,v 1.32 1998/10/11 12:01:08 niklas Exp $	*/
d45 2
d86 1
@


1.2
log
@openBSD RCS IDs
@
text
@d1 2
a2 1
/*	$OpenBSD: isakmp_doi.c,v 1.1.1.1 1998/11/15 00:03:48 niklas Exp $	*/
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$Id: isakmp_doi.c,v 1.32 1998/10/11 12:01:08 niklas Exp $	*/
@


1.1.1.1
log
@Initial import of isakmpd, an IKE (ISAKMP/Oakley) implementation for the
OpenBSD IPSEC stack by me, Niklas Hallqvist and Niels Provos, funded by
Ericsson Radio Systems.  It is not yet complete or usable in a real scenario
but the missing pieces will soon be there.  The early commit is for people
who wants early access and who are not afraid of looking at source.
isakmpd interops with Cisco, Timestep, SSH & Pluto (Linux FreeS/WAN) so
far, so it is not that incomplete.  It is really mostly configuration that
is lacking.
@
text
@@
