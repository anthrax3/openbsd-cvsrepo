head	1.8;
access;
symbols
	OPENBSD_4_7:1.7.0.22
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.24
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.20
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.18
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.16
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.14
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.12
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.10
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.8
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.6
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.4
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.4.0.16
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.14
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.12
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.10
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.8
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.6
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.4
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	NIKLAS_981114:1.1.1.1
	NIKLAS:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2010.06.29.19.50.16;	author reyk;	state dead;
branches;
next	1.7;

1.7
date	2004.05.23.18.17.56;	author hshoexer;	state Exp;
branches;
next	1.6;

1.6
date	2004.04.15.18.39.26;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.03.14.28.16;	author ho;	state Exp;
branches;
next	1.4;

1.4
date	99.04.19.21.22.49;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	98.11.17.11.10.16;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	98.11.15.00.44.00;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	98.11.15.00.03.49;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.11.15.00.03.49;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Replace the hand-crafted Diffie-Hellman implementation in isakmpd with
the smaller implementation from iked that is using libcrypto instead.
This allows to remove a lot of code (which is always good), get rid of
some custom crypto code by using libcrypto, theoretically adds
support for many new MODP and EC2N/ECP modes (but it is not configurable
yet), and allows to share the dh.c/dh.h code in different codebases
(it is identical in isakmpd and iked, but could also be used elsewhere).

ok deraadt@@
@
text
@/* $OpenBSD: math_ec2n.h,v 1.7 2004/05/23 18:17:56 hshoexer Exp $	 */
/* $EOM: math_ec2n.h,v 1.4 1999/04/17 23:20:37 niklas Exp $	 */

/*
 * Copyright (c) 1998 Niels Provos.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This code was written under funding by Ericsson Radio Systems.
 */

#ifndef _MATH_EC2N_H
#define _MATH_EC2N_H_

/* Definitions for points on an elliptic curve */

typedef struct {
	int             inf;	/* Are we the point at infinity ? */
	b2n_t           x, y;
}               _ec2n_point;

typedef _ec2n_point *ec2np_ptr;
typedef _ec2n_point ec2np_t[1];

#define EC2NP_SWAP(k,n) do \
  { \
    int _i_; \
\
    _i_ = (k)->inf; \
    (k)->inf = (n)->inf; \
    (n)->inf = _i_; \
    B2N_SWAP ((k)->x, (n)->x); \
    B2N_SWAP ((k)->y, (n)->y); \
  } \
while (0)

void	ec2np_init(ec2np_ptr);
void	ec2np_clear(ec2np_ptr);
int	ec2np_set(ec2np_ptr, ec2np_ptr);

#define ec2np_set_x_ui(n, y) b2n_set_ui ((n)->x, y)
#define ec2np_set_y_ui(n, x) b2n_set_ui ((n)->y, x)
#define ec2np_set_x_str(n, y) b2n_set_str ((n)->x, y)
#define ec2np_set_y_str(n, x) b2n_set_str ((n)->y, x)

/* Definitions for the group to which the points to belong to.  */

typedef struct {
	b2n_t           a, b, p;
}               _ec2n_group;

typedef _ec2n_group *ec2ng_ptr;
typedef _ec2n_group ec2ng_t[1];

void	ec2ng_init(ec2ng_ptr);
void	ec2ng_clear(ec2ng_ptr);
int	ec2ng_set(ec2ng_ptr, ec2ng_ptr);

#define ec2ng_set_a_ui(n, x) b2n_set_ui ((n)->a, x)
#define ec2ng_set_b_ui(n, x) b2n_set_ui ((n)->b, x)
#define ec2ng_set_p_ui(n, x) b2n_set_ui ((n)->p, x)
#define ec2ng_set_a_str(n, x) b2n_set_str ((n)->a, x)
#define ec2ng_set_b_str(n, x) b2n_set_str ((n)->b, x)
#define ec2ng_set_p_str(n, x) b2n_set_str ((n)->p, x)

/* Functions for computing on the elliptic group.  */

int	ec2np_add(ec2np_ptr, ec2np_ptr, ec2np_ptr, ec2ng_ptr);
int	ec2np_find_y(ec2np_ptr, ec2ng_ptr);
int	ec2np_ison(ec2np_ptr, ec2ng_ptr);
int	ec2np_mul(ec2np_ptr, ec2np_ptr, b2n_ptr, ec2ng_ptr);
int	ec2np_right(b2n_ptr n, ec2np_ptr, ec2ng_ptr);

#endif				/* _MATH_2N_H_ */
@


1.7
log
@More KNF.  Mainly spaces and line-wraps, no binary change.

ok ho@@
@
text
@d1 1
a1 1
/* $OpenBSD: math_ec2n.h,v 1.6 2004/04/15 18:39:26 deraadt Exp $	 */
@


1.6
log
@partial move to KNF.  More to come.  This has happened because there
are a raft of source code auditors who are willing to help improve this
code only if this is done, and hey, isakmpd does need our standard
auditing process.  ok ho hshoexer
@
text
@d1 1
a1 1
/* $OpenBSD: math_ec2n.h,v 1.5 2003/06/03 14:28:16 ho Exp $	 */
d57 3
a59 3
void            ec2np_init(ec2np_ptr);
void            ec2np_clear(ec2np_ptr);
int             ec2np_set(ec2np_ptr, ec2np_ptr);
d75 3
a77 3
void            ec2ng_init(ec2ng_ptr);
void            ec2ng_clear(ec2ng_ptr);
int             ec2ng_set(ec2ng_ptr, ec2ng_ptr);
d88 5
a92 5
int             ec2np_add(ec2np_ptr, ec2np_ptr, ec2np_ptr, ec2ng_ptr);
int             ec2np_find_y(ec2np_ptr, ec2ng_ptr);
int             ec2np_ison(ec2np_ptr, ec2ng_ptr);
int             ec2np_mul(ec2np_ptr, ec2np_ptr, b2n_ptr, ec2ng_ptr);
int             ec2np_right(b2n_ptr n, ec2np_ptr, ec2ng_ptr);
@


1.5
log
@Remove clauses 3 and 4. With approval from Niklas Hallqvist and
Niels Provos.
@
text
@d1 2
a2 2
/*	$OpenBSD: math_ec2n.h,v 1.4 1999/04/19 21:22:49 niklas Exp $	*/
/*	$EOM: math_ec2n.h,v 1.4 1999/04/17 23:20:37 niklas Exp $	*/
d38 3
a40 3
  int inf;		/* Are we the point at infinity ? */
  b2n_t x, y;
} _ec2n_point;
d57 3
a59 3
void ec2np_init (ec2np_ptr);
void ec2np_clear (ec2np_ptr);
int ec2np_set (ec2np_ptr, ec2np_ptr);
d69 2
a70 2
  b2n_t a, b, p;
} _ec2n_group;
d75 3
a77 3
void ec2ng_init (ec2ng_ptr);
void ec2ng_clear (ec2ng_ptr);
int ec2ng_set (ec2ng_ptr, ec2ng_ptr);
d88 5
a92 5
int ec2np_add (ec2np_ptr, ec2np_ptr, ec2np_ptr, ec2ng_ptr);
int ec2np_find_y (ec2np_ptr, ec2ng_ptr);
int ec2np_ison (ec2np_ptr, ec2ng_ptr);
int ec2np_mul (ec2np_ptr, ec2np_ptr, b2n_ptr, ec2ng_ptr);
int ec2np_right (b2n_ptr n, ec2np_ptr, ec2ng_ptr);
d94 1
a94 1
#endif /* _MATH_2N_H_ */
@


1.4
log
@./regress/x509/x509test.c: Merge with EOM 1.4
./dh.h: Merge with EOM 1.4
./math_ec2n.c: Merge with EOM 1.8
./crypto.c: Merge with EOM 1.25
./ike_quick_mode.c: Merge with EOM 1.82
./math_group.c: Merge with EOM 1.16
./math_ec2n.h: Merge with EOM 1.4

Style.  alloc error reporting.  Math error propagation.  Allocate right
sizes.
@
text
@d1 1
a1 1
/*	$OpenBSD: math_ec2n.h,v 1.3 1998/11/17 11:10:16 niklas Exp $	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Ericsson Radio Systems.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.3
log
@Add RCS Ids from the EOM repository
@
text
@d1 2
a2 2
/*	$OpenBSD: math_ec2n.h,v 1.2 1998/11/15 00:44:00 niklas Exp $	*/
/*	$EOM: math_ec2n.h,v 1.3 1998/07/17 16:32:16 provos Exp $	*/
d50 11
a60 2
#define EC2NP_SWAP(k,n) {int _i_; _i_ = (k)->inf; (k)->inf = (n)->inf; \
 (n)->inf = _i_; B2N_SWAP ((k)->x, (n)->x); B2N_SWAP ((k)->y, (n)->y);}
d64 1
a64 1
void ec2np_set (ec2np_ptr, ec2np_ptr);
d71 1
a71 1
/* Definitions for the group to which the points to belong to */
d82 1
a82 1
void ec2ng_set (ec2ng_ptr, ec2ng_ptr);
d91 1
a91 1
/* Functions for computing on the elliptic group */
d93 2
a94 1
void ec2np_right (b2n_ptr n, ec2np_ptr, ec2ng_ptr);
d96 2
a97 3
int ec2np_find_y (ec2np_ptr, ec2ng_ptr);
void ec2np_add (ec2np_ptr, ec2np_ptr, ec2np_ptr, ec2ng_ptr);
void ec2np_mul (ec2np_ptr, ec2np_ptr, b2n_ptr, ec2ng_ptr);
@


1.2
log
@openBSD RCS IDs
@
text
@d1 2
a2 1
/*	$OpenBSD: math_ec2n.h,v 1.1.1.1 1998/11/15 00:03:49 niklas Exp $	*/
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$Id: math_ec2n.h,v 1.3 1998/07/17 16:32:16 provos Exp $	*/
@


1.1.1.1
log
@Initial import of isakmpd, an IKE (ISAKMP/Oakley) implementation for the
OpenBSD IPSEC stack by me, Niklas Hallqvist and Niels Provos, funded by
Ericsson Radio Systems.  It is not yet complete or usable in a real scenario
but the missing pieces will soon be there.  The early commit is for people
who wants early access and who are not afraid of looking at source.
isakmpd interops with Cisco, Timestep, SSH & Pluto (Linux FreeS/WAN) so
far, so it is not that incomplete.  It is really mostly configuration that
is lacking.
@
text
@@
