head	1.10;
access;
symbols
	OPENBSD_4_7:1.9.0.16
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.18
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.14
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.12
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.10
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.8
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.6
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.4
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.2
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.8.0.2
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.7.0.4
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.5.0.6
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.4.0.10
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.8
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.6
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.4
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	NIKLAS_981114:1.1.1.1
	NIKLAS:1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2010.06.29.19.50.16;	author reyk;	state dead;
branches;
next	1.9;

1.9
date	2005.12.28.10.57.35;	author hshoexer;	state Exp;
branches;
next	1.8;

1.8
date	2005.04.21.01.23.07;	author cloder;	state Exp;
branches;
next	1.7;

1.7
date	2004.04.15.18.39.26;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.03.14.28.16;	author ho;	state Exp;
branches;
next	1.5;

1.5
date	2002.01.23.17.43.24;	author ho;	state Exp;
branches;
next	1.4;

1.4
date	99.04.19.19.56.23;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	98.11.17.11.10.16;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	98.11.15.00.44.00;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	98.11.15.00.03.49;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.11.15.00.03.49;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Replace the hand-crafted Diffie-Hellman implementation in isakmpd with
the smaller implementation from iked that is using libcrypto instead.
This allows to remove a lot of code (which is always good), get rid of
some custom crypto code by using libcrypto, theoretically adds
support for many new MODP and EC2N/ECP modes (but it is not configurable
yet), and allows to share the dh.c/dh.h code in different codebases
(it is identical in isakmpd and iked, but could also be used elsewhere).

ok deraadt@@
@
text
@/* $OpenBSD: math_2n.h,v 1.9 2005/12/28 10:57:35 hshoexer Exp $	 */
/* $EOM: math_2n.h,v 1.9 1999/04/17 23:20:32 niklas Exp $	 */

/*
 * Copyright (c) 1998 Niels Provos.  All rights reserved.
 * Copyright (c) 1999 Niklas Hallqvist.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This code was written under funding by Ericsson Radio Systems.
 */

#ifndef _MATH_2N_H
#define _MATH_2N_H_

/*
 * The chunk size we use is variable, this allows speed ups
 * for processors like the Alpha with 64bit words.
 * XXX - b2n_mask is only up to 32 bit at the moment.
 */

#define USE_32BIT		/* XXX - This obviously needs fixing */

#ifdef USE_32BIT
#define CHUNK_TYPE	u_int32_t
#define CHUNK_BITS	32
#define CHUNK_SHIFTS	5
#define CHUNK_BMASK	0xffffffff
#define CHUNK_MASK	(CHUNK_BITS - 1)
#define CHUNK_BYTES	(CHUNK_BITS >> 3)
#define CHUNK_NIBBLES	(CHUNK_BITS >> 2)
#else
#define CHUNK_TYPE	u_int8_t
#define CHUNK_BITS	8
#define CHUNK_SHIFTS	3
#define CHUNK_BMASK	0xff
#define CHUNK_MASK	(CHUNK_BITS - 1)
#define CHUNK_BYTES	(CHUNK_BITS >> 3)
#define CHUNK_NIBBLES	(CHUNK_BITS >> 2)
#endif

extern CHUNK_TYPE b2n_mask[CHUNK_BITS];

/* An element of GF(2**n), n = bits */

typedef struct {
	u_int16_t       chunks;
	u_int16_t       bits;
	u_int8_t        dirty;	/* Sig bits are dirty */
	CHUNK_TYPE     *limp;
}               _b2n;

typedef _b2n   *b2n_ptr;
typedef _b2n    b2n_t[1];

#define B2N_SET(x,y) do \
  { \
    (x)->chunks = (y)->chunks; \
    (x)->bits = (y)->bits; \
    (x)->limp = (y)->limp; \
    (x)->dirty = (y)->dirty; \
  } \
while (0)

#define B2N_SWAP(x,y) do \
  { \
    b2n_t _t_; \
\
    B2N_SET (_t_, (x)); \
    B2N_SET ((x), (y)); \
    B2N_SET ((y), _t_); \
  } \
while (0)

#define B2N_MIN(x,y) ((x)->chunks > (y)->chunks ? (y) : (x))
#define B2N_MAX(x,y) ((x)->chunks > (y)->chunks ? (x) : (y))

int             b2n_3mul(b2n_ptr, b2n_ptr);
int             b2n_add(b2n_ptr, b2n_ptr, b2n_ptr);
int             b2n_cmp(b2n_ptr, b2n_ptr);
int             b2n_cmp_null(b2n_ptr);
int             b2n_div(b2n_ptr, b2n_ptr, b2n_ptr, b2n_ptr);
int             b2n_div_mod(b2n_ptr, b2n_ptr, b2n_ptr, b2n_ptr);
int             b2n_div_r(b2n_ptr, b2n_ptr, b2n_ptr);
void            b2n_init(b2n_ptr);
void            b2n_clear(b2n_ptr);
int             b2n_gcd(b2n_ptr, b2n_ptr, b2n_ptr);
int             b2n_halftrace(b2n_ptr, b2n_ptr, b2n_ptr);
int             b2n_lshift(b2n_ptr, b2n_ptr, unsigned int);
int             b2n_mod(b2n_ptr, b2n_ptr, b2n_ptr);
int             b2n_mul(b2n_ptr, b2n_ptr, b2n_ptr);
int             b2n_mul_inv(b2n_ptr, b2n_ptr, b2n_ptr);
int             b2n_nadd(b2n_ptr, b2n_ptr, b2n_ptr);
int             b2n_random(b2n_ptr, u_int32_t);
int             b2n_resize(b2n_ptr, unsigned int);
int             b2n_rshift(b2n_ptr, b2n_ptr, unsigned int);
int             b2n_set(b2n_ptr, b2n_ptr);
int             b2n_set_null(b2n_ptr);
int             b2n_set_str(b2n_ptr, char *);
int             b2n_set_ui(b2n_ptr, unsigned int);
u_int32_t       b2n_sigbit(b2n_ptr);
int             b2n_sqrt(b2n_ptr, b2n_ptr, b2n_ptr);
int             b2n_square(b2n_ptr, b2n_ptr);
#define b2n_sub b2n_add

#endif				/* _MATH_2N_H_ */
@


1.9
log
@remove some unused functions and an unused variable found by lint.

ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: math_2n.h,v 1.8 2005/04/21 01:23:07 cloder Exp $	 */
@


1.8
log
@Rather than try to fix b2n_print and b2n_snprint, which are not used, send
them to the attic.  OK beck
@
text
@d1 1
a1 1
/* $OpenBSD: math_2n.h,v 1.7 2004/04/15 18:39:26 deraadt Exp $	 */
a103 1
int             b2n_div_q(b2n_ptr, b2n_ptr, b2n_ptr);
a104 1
int             b2n_exp_mod(b2n_ptr, b2n_ptr, u_int32_t, b2n_ptr);
a113 1
int             b2n_nsub(b2n_ptr, b2n_ptr, b2n_ptr);
a124 1
int             b2n_trace(b2n_ptr, b2n_ptr, b2n_ptr);
@


1.7
log
@partial move to KNF.  More to come.  This has happened because there
are a raft of source code auditors who are willing to help improve this
code only if this is done, and hey, isakmpd does need our standard
auditing process.  ok ho hshoexer
@
text
@d1 1
a1 1
/* $OpenBSD: math_2n.h,v 1.6 2003/06/03 14:28:16 ho Exp $	 */
a116 1
void            b2n_print(b2n_ptr);
a124 1
int             b2n_snprint(char *, size_t, b2n_ptr);
@


1.6
log
@Remove clauses 3 and 4. With approval from Niklas Hallqvist and
Niels Provos.
@
text
@d1 2
a2 2
/*	$OpenBSD: math_2n.h,v 1.5 2002/01/23 17:43:24 ho Exp $	*/
/*	$EOM: math_2n.h,v 1.9 1999/04/17 23:20:32 niklas Exp $	*/
d42 1
a42 1
#define USE_32BIT	/* XXX - This obviously needs fixing */
d67 5
a71 5
  u_int16_t chunks;
  u_int16_t bits;
  u_int8_t dirty;		/* Sig bits are dirty */
  CHUNK_TYPE *limp;
} _b2n;
d73 2
a74 2
typedef _b2n *b2n_ptr;
typedef _b2n b2n_t[1];
d98 31
a128 31
int b2n_3mul (b2n_ptr, b2n_ptr);
int b2n_add (b2n_ptr, b2n_ptr, b2n_ptr);
int b2n_cmp (b2n_ptr, b2n_ptr);
int b2n_cmp_null (b2n_ptr);
int b2n_div (b2n_ptr, b2n_ptr, b2n_ptr, b2n_ptr);
int b2n_div_mod (b2n_ptr, b2n_ptr, b2n_ptr, b2n_ptr);
int b2n_div_q (b2n_ptr, b2n_ptr, b2n_ptr);
int b2n_div_r (b2n_ptr, b2n_ptr, b2n_ptr);
int b2n_exp_mod (b2n_ptr, b2n_ptr, u_int32_t, b2n_ptr);
void b2n_init (b2n_ptr);
void b2n_clear (b2n_ptr);
int b2n_gcd (b2n_ptr, b2n_ptr, b2n_ptr);
int b2n_halftrace (b2n_ptr, b2n_ptr, b2n_ptr);
int b2n_lshift (b2n_ptr, b2n_ptr, unsigned int);
int b2n_mod (b2n_ptr, b2n_ptr, b2n_ptr);
int b2n_mul (b2n_ptr, b2n_ptr, b2n_ptr);
int b2n_mul_inv (b2n_ptr, b2n_ptr, b2n_ptr);
int b2n_nadd (b2n_ptr, b2n_ptr, b2n_ptr);
int b2n_nsub (b2n_ptr, b2n_ptr, b2n_ptr);
void b2n_print (b2n_ptr);
int b2n_random (b2n_ptr, u_int32_t);
int b2n_resize (b2n_ptr, unsigned int);
int b2n_rshift (b2n_ptr, b2n_ptr, unsigned int);
int b2n_set (b2n_ptr, b2n_ptr);
int b2n_set_null (b2n_ptr);
int b2n_set_str (b2n_ptr, char *);
int b2n_set_ui (b2n_ptr, unsigned int);
u_int32_t b2n_sigbit (b2n_ptr);
int b2n_snprint (char *, size_t, b2n_ptr);
int b2n_sqrt (b2n_ptr, b2n_ptr, b2n_ptr);
int b2n_square (b2n_ptr, b2n_ptr);
d130 1
a130 1
int b2n_trace (b2n_ptr, b2n_ptr, b2n_ptr);
d132 1
a132 1
#endif /* _MATH_2N_H_ */
@


1.5
log
@Another strcpy gone.
@
text
@d1 1
a1 1
/*	$OpenBSD: math_2n.h,v 1.4 1999/04/19 19:56:23 niklas Exp $	*/
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Ericsson Radio Systems.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.4
log
@./math_2n.h: Merge with EOM 1.9

Style.  alloc error reporting.  Math error propagation.  Allocate right
sizes.

1999

Style police.  No free(0).
@
text
@d1 1
a1 1
/*	$OpenBSD: math_2n.h,v 1.3 1998/11/17 11:10:16 niklas Exp $	*/
d131 1
a131 1
int b2n_sprint (char *, b2n_ptr);
@


1.3
log
@Add RCS Ids from the EOM repository
@
text
@d1 2
a2 2
/*	$OpenBSD: math_2n.h,v 1.2 1998/11/15 00:44:00 niklas Exp $	*/
/*	$EOM: math_2n.h,v 1.6 1998/07/18 21:09:40 provos Exp $	*/
d6 1
d72 4
a75 4
  u_int16_t	chunks;
  u_int16_t	bits;
  u_int8_t	dirty;		/* Sig bits are dirty */
  CHUNK_TYPE	*limp;
d81 18
a98 2
#define B2N_SET(x,y) (x)->chunks = (y)->chunks; (x)->bits = (y)->bits; \
    (x)->limp = (y)->limp; (x)->dirty = (y)->dirty;
d103 9
d114 8
a121 9
void b2n_resize (b2n_ptr, unsigned int);

void b2n_random (b2n_ptr, u_int32_t);

void b2n_set (b2n_ptr, b2n_ptr);
void b2n_set_null (b2n_ptr);
void b2n_set_ui (b2n_ptr, unsigned int);
void b2n_set_str (b2n_ptr, char *);

d123 8
d132 2
a133 5

int b2n_cmp (b2n_ptr, b2n_ptr);
int b2n_cmp_null (b2n_ptr);

void b2n_add (b2n_ptr, b2n_ptr, b2n_ptr);
d135 1
a135 28
void b2n_lshift (b2n_ptr, b2n_ptr, unsigned int);
void b2n_rshift (b2n_ptr, b2n_ptr, unsigned int);
u_int32_t b2n_sigbit (b2n_ptr);

void b2n_nadd (b2n_ptr, b2n_ptr, b2n_ptr);
void b2n_nsub (b2n_ptr, b2n_ptr, b2n_ptr);
void b2n_3mul (b2n_ptr, b2n_ptr);

void b2n_mul (b2n_ptr, b2n_ptr, b2n_ptr);
void b2n_square (b2n_ptr, b2n_ptr);

void b2n_div (b2n_ptr, b2n_ptr, b2n_ptr, b2n_ptr);
void b2n_div_q (b2n_ptr, b2n_ptr, b2n_ptr);
void b2n_div_r (b2n_ptr, b2n_ptr, b2n_ptr);

/* Operation on GF(2**n) */
#define B2N_SWAP(x,y) {b2n_t _t_; B2N_SET(_t_, (x)); \
 B2N_SET ((x), (y)); B2N_SET ((y),_t_); }

void b2n_mod (b2n_ptr, b2n_ptr, b2n_ptr);

void b2n_gcd (b2n_ptr, b2n_ptr, b2n_ptr);
void b2n_mul_inv (b2n_ptr, b2n_ptr, b2n_ptr);
void b2n_div_mod (b2n_ptr, b2n_ptr, b2n_ptr, b2n_ptr);
void b2n_trace (b2n_ptr, b2n_ptr, b2n_ptr);
void b2n_halftrace (b2n_ptr, b2n_ptr, b2n_ptr);
void b2n_sqrt (b2n_ptr, b2n_ptr, b2n_ptr);
void b2n_exp_mod (b2n_ptr, b2n_ptr, u_int32_t, b2n_ptr);
@


1.2
log
@openBSD RCS IDs
@
text
@d1 2
a2 1
/*	$OpenBSD: math_2n.h,v 1.1.1.1 1998/11/15 00:03:49 niklas Exp $	*/
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$Id: math_2n.h,v 1.6 1998/07/18 21:09:40 provos Exp $	*/
@


1.1.1.1
log
@Initial import of isakmpd, an IKE (ISAKMP/Oakley) implementation for the
OpenBSD IPSEC stack by me, Niklas Hallqvist and Niels Provos, funded by
Ericsson Radio Systems.  It is not yet complete or usable in a real scenario
but the missing pieces will soon be there.  The early commit is for people
who wants early access and who are not afraid of looking at source.
isakmpd interops with Cisco, Timestep, SSH & Pluto (Linux FreeS/WAN) so
far, so it is not that incomplete.  It is really mostly configuration that
is lacking.
@
text
@@
