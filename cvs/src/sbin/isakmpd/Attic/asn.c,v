head	1.9;
access;
symbols
	OPENBSD_2_5:1.6.0.2
	OPENBSD_2_5_BASE:1.6
	NIKLAS_981114:1.1.1.1
	NIKLAS:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	99.07.17.21.48.45;	author niklas;	state dead;
branches;
next	1.8;

1.8
date	99.06.05.18.01.28;	author niklas;	state Exp;
branches;
next	1.7;

1.7
date	99.04.19.20.56.57;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	99.02.26.03.32.11;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	98.11.17.11.10.07;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	98.11.16.21.07.14;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	98.11.15.00.52.25;	author niklas;	state dead;
branches;
next	1.2;

1.2
date	98.11.15.00.43.49;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	98.11.15.00.03.48;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.11.15.00.03.48;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.9
log
@regress/x509/certificate.txt: Merge with EOM 1.4
asn_useful.h: Merge with EOM 1.7
asn.c: Merge with EOM 1.28
asn.h: Merge with EOM 1.19
asn_useful.c: Merge with EOM 1.12
pkcs.c: Merge with EOM 1.21
pkcs.h: Merge with EOM 1.9

author: niklas
From Niels Provos, edited by me: certificate support using SSLeay
@
text
@/*	$OpenBSD: asn.c,v 1.8 1999/06/05 18:01:28 niklas Exp $	*/
/*	$EOM: asn.c,v 1.27 1999/06/05 18:02:38 niklas Exp $	*/

/*
 * Copyright (c) 1998 Niels Provos.  All rights reserved.
 * Copyright (c) 1999 Niklas Hallqvist.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Ericsson Radio Systems.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This code was written under funding by Ericsson Radio Systems.
 */

#include <sys/param.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdlib.h>
#include <string.h>
#include <gmp.h>
#include <unistd.h>

#include "sysdep.h"

#include "log.h"
#include "asn.h"
#include "gmp_util.h"

struct asn_handler table[] = {
  {
    TAG_INTEGER, asn_free_integer, asn_get_encoded_len_integer,
    asn_decode_integer, asn_encode_integer
  },
  {
    TAG_OBJECTID, asn_free_objectid, asn_get_encoded_len_objectid,
    asn_decode_objectid, asn_encode_objectid
  },
  {
    TAG_SEQUENCE, asn_free_sequence, asn_get_encoded_len_sequence,
    asn_decode_sequence, asn_encode_sequence
  },
  {
    TAG_SET, asn_free_sequence, asn_get_encoded_len_sequence,
    asn_decode_sequence, asn_encode_sequence
  },
  {
    TAG_UTCTIME, asn_free_string, asn_get_encoded_len_string,
    asn_decode_string, asn_encode_string
  },
  {
    TAG_BITSTRING, asn_free_string, asn_get_encoded_len_string,
    asn_decode_string, asn_encode_string
  },
  {
    TAG_OCTETSTRING, asn_free_string, asn_get_encoded_len_string,
    asn_decode_string, asn_encode_string
  },
  {
    TAG_BOOL, asn_free_string, asn_get_encoded_len_string, asn_decode_string,
    asn_encode_string
  },
  {
    TAG_PRINTSTRING, asn_free_string, asn_get_encoded_len_string,
    asn_decode_string, asn_encode_string
  },
  {
    TAG_RAW, asn_free_raw, asn_get_encoded_len_raw, asn_decode_raw,
    asn_encode_raw
  },
  {
    TAG_NULL, asn_free_null, asn_get_encoded_len_null, asn_decode_null,
    asn_encode_null
  },
  { TAG_ANY, asn_free_null, 0, asn_decode_any, 0 },
  { TAG_STOP, 0, 0, 0, 0 }
};

int
asn_get_from_file (char *name, u_int8_t **asn, u_int32_t *asnlen)
{
  int fd, res = 0;
  struct stat st;

  if (stat (name, &st) == -1)
    {
      log_error ("asn_get_from_file: failed to state %s", name);
      return 0;
    }

  *asnlen = st.st_size;

  if ((fd = open (name, O_RDONLY)) == -1)
    {
      log_error ("asn_get_from_file: failed to open %s", name);
      return 0;
    }

  *asn = malloc (st.st_size);
  if (!*asn)
    {
      log_print ("asn_get_from_file: malloc (%d) failed", st.st_size);
      res = 0;
      goto done;
    }

  if (read (fd, *asn, st.st_size) != st.st_size
      || asn_get_len (*asn) != *asnlen)
    {
      log_print ("x509_asn_obtain: asn file ended early");
      free (*asn);
      res = 0;
      goto done;
    }

  res = 1;

 done:
  close (fd);

  return res;
}

struct norm_type *
asn_template_clone (struct norm_type *obj, int constructed)
{
  struct norm_type *p;
  u_int32_t i;

  if (!constructed)
    {
      p = malloc (sizeof (struct norm_type));
      if (!p)
	{
	  log_error ("asn_template_clone: malloc (%d) failed",
		     sizeof (struct norm_type));
	  return 0;
	}

      memcpy (p, obj, sizeof (struct norm_type));

      obj = p;
    }

  if (obj->type != TAG_SEQUENCE && obj->type != TAG_SET)
    {
      obj->len = 0;
      obj->data = 0;
    }
  else if (obj->type == TAG_SEQUENCE || obj->type == TAG_SET)
    {
      p = obj;
      obj = obj->data;
      i = 0;
      while (obj[i++].type != TAG_STOP);

      p->data = malloc (i * sizeof (struct norm_type));
      if (!p->data)
	{
	  log_error ("asn_template_clone: malloc (%d) failed",
		     i * sizeof (struct norm_type));
	  return 0;
	}
      memcpy (p->data, obj, i * sizeof (struct norm_type));
      obj = p->data;

      i = 0;
      while (obj[i].type != TAG_STOP)
	{
	  obj[i].len = 0;
	  if (!asn_template_clone (&obj[i], 1))
	    return 0;

	  i++;
	}
    }

  return obj;
}

/* Associates a human readable name to an OBJECT IDENTIFIER.  */
char *
asn_parse_objectid (struct asn_objectid *table, char *id)
{
  u_int32_t len = 0;
  char *p = 0;
  static char buf[LINE_MAX];

  if (!id)
    return 0;

  while (table->name)
    {
      if (strcmp (table->objectid, id) == 0)
	return table->name;
      if (strncmp (table->objectid, id, strlen (table->objectid) == 0)
	  && strlen (table->objectid) > len)
	{
	  len = strlen (table->objectid);
	  p = table->name;
	}

      table++;
    }

  if (len == 0)
    return 0;

  strncpy (buf, p, sizeof (buf) - 1);
  buf[sizeof (buf) - 1] = 0;
  strncat (buf + strlen (buf), id + len, sizeof (buf) - 1 - strlen (buf));
  buf[sizeof (buf) - 1] = 0;

  return buf;
}

/* Retrieves the pointer to a data type referenced by the path name.  */
struct norm_type *
asn_decompose (char *path, struct norm_type *obj)
{
  char *p, *p2, *tmp;
  int counter;

  if (strcasecmp (path, obj->name) == 0)
    return obj->data;

  p = strdup (path);
  if (!p)
    {
      log_error ("asn_decompose: strdup(\"%s\") failed", path);
      return 0;
    }
  path = p;
  p2 = strsep (&p, ".");

  if (strcasecmp (p2, obj->name) || !p)
    goto fail;

  while (p)
    {
      obj = obj->data;
      if (!obj)
	break;

      p2 = strsep (&p, ".");

      /*
       * For SEQUENCE OF or SET OF, we want to be able to say
       * AttributeValueAssertion[1] for the 2nd value.
       */
      tmp = strchr (p2, '[');
      if (tmp)
	{
	  counter = atoi (tmp + 1);
	  *tmp = 0;
	}
      else
	counter = 0;

      /* Find the tag.  */
      while (obj->type != TAG_STOP)
	{
	  if (strcasecmp (p2, obj->name) == 0 && counter-- == 0)
	    break;
	  obj++;
	}

      if (obj->type == TAG_STOP)
	goto fail;

      if (!p)
	goto done;

      if (obj->type != TAG_SEQUENCE && obj->type != TAG_SET)
	    goto fail;
    }

 done:
  free (path);
  return obj;

 fail:
  free (path);
  return 0;
}

/* Gets an entry from the ASN.1 tag switch table.  */
struct asn_handler *
asn_get (enum asn_tags type)
{
  struct asn_handler *h = table;

  while (h->type != TAG_STOP)
    if (h->type  == type)
      return h;
    else
      h++;

  return 0;
}

/*
 * For the long form of BER encoding we need to know in how many
 * octets the length can be encoded.
 */
u_int32_t
asn_sizeinoctets (u_int32_t len)
{
  u_int32_t log = 0;

  while (len)
    {
      log++;
      len >>= 8;
    }

  return log;
}

u_int8_t *
asn_format_header (struct norm_type *obj, u_int8_t *asn, u_int8_t **data)
{
  u_int8_t *buf = 0, *erg;
  u_int8_t type;
  u_int16_t len_off, len;
  struct asn_handler *h;

  h = asn_get (obj->type);
  if (!h)
    return 0;

  if (asn)
    buf = asn;

  /* We only do low tags at the moment.  */
  len_off = 1;

  len = h->get_encoded_len (obj, &type);

  if (!buf)
    {
      buf = malloc (len);
      if (!buf)
	{
	  log_error ("asn_format_header: malloc (%d) failed", len);
	  return 0;
	}
    }

  if (type != ASN_LONG_FORM)
    {
      len -= len_off + 1;
      buf[len_off] = len;

      *data = buf + len_off + 1;
    }
  else
    {
      u_int16_t tmp;
      int octets = asn_sizeinoctets (len);

      len -= len_off + 1 + octets;
      *data = buf + len_off + 1 + octets;

      buf[len_off] = octets | ASN_LONG_FORM;

      tmp = len;
      while (--octets >= 0)
	{
	  buf[len_off + 1 + octets] = tmp;
	  tmp >>= 8;
	}
    }

  if (ISEXPLICIT (obj))
    {
      /* Explicit tagging adds an outer layer.  */
      struct norm_type tmp = {obj->type, obj->class&0x3, 0, 0, obj->data};

      /* XXX Force the class to be CONTEXT.  */
      buf[0] = GET_EXP (obj) | (((enum asn_classes)CONTEXT & 0x3) << 6)
	| ASN_CONSTRUCTED;
      erg = asn_format_header (&tmp, *data, data);

      if (erg && (obj->type == TAG_SEQUENCE || obj->type == TAG_SET))
	erg[0] |= ASN_CONSTRUCTED;
    }
  else
    /* XXX Low tags only.  */
    buf[0] = obj->type | (obj->class << 6);

  return buf;
}

u_int32_t
asn_get_encoded_len (struct norm_type *obj, u_int32_t len, u_int8_t *type)
{
  u_int32_t len_off = 1;

  if (len <= 127)
    {
      /* Short form */
      len = len + 1 + len_off;
      if (type)
	*type = 0;
    }
  else
    {
      /* Long Form */
      len = len + asn_sizeinoctets (len) + 1 + len_off;
      if (type)
	*type = ASN_LONG_FORM;
    }

  if (obj && ISEXPLICIT (obj))
    len = asn_get_encoded_len (0, len, 0);

  return len;
}

/* Tries to decode an ANY tag, if we cant handle it we just raw encode it.  */
u_int8_t *
asn_decode_any (u_int8_t *asn, u_int32_t asnlen, struct norm_type *obj)
{
  struct asn_handler *h;
  enum asn_tags type;

  type = TAG_TYPE (asn);
  if (type == TAG_SEQUENCE || type == TAG_SET)
    type = TAG_RAW;

  h = asn_get (type);
  if (!h)
    {
      type = TAG_RAW;
      h = asn_get (type);
    }

  obj->type = type;
  return h->decode (asn, asnlen, obj);
}

u_int32_t
asn_get_encoded_len_integer (struct norm_type *obj, u_int8_t *type)
{
  u_int16_t len_off;
  u_int32_t len = obj->len;
  u_int32_t tmp;
  mpz_t a;

  /* XXX We only do low tags at the moment.  */
  len_off = 1;

  obj->len = len = mpz_sizeinoctets ((mpz_ptr) obj->data);
  mpz_init_set (a, (mpz_ptr) obj->data);

  if (len > 1)
    mpz_fdiv_q_2exp (a, a, (len - 1) << 3);

  tmp = mpz_fdiv_r_ui (a, a, 256);
  mpz_clear (a);

  /*
   * We only need to encode positive integers, ASN.1 defines
   * negative integers to have the msb set, so if data[0] has
   * msb set we need to introduce a zero octet.
   */
  if (tmp & 0x80)
    len++;

  return asn_get_encoded_len (obj, len, type);
}

/*
 * Encode an integer value.
 * Input = obj, output = asn or return value.
 */
u_int8_t *
asn_encode_integer (struct norm_type *obj, u_int8_t *asn)
{
  u_int8_t *buf, *data;
  u_int32_t len;

  buf = asn_format_header (obj, asn, &data);

  if (!buf)
    return 0;

  len = mpz_sizeinoctets ((mpz_ptr) obj->data);
  mpz_getraw (data, (mpz_ptr) obj->data, len);

  /* XXX We only deal with unsigned integers at the moment.  */
  if (data[0] & 0x80)
    {
      memmove (data + 1, data, len);
      data[0] = 0;
    }

  return buf;
}

u_int8_t *
asn_decode_integer (u_int8_t *asn, u_int32_t asnlen, struct norm_type *obj)
{
  u_int8_t *data;
  u_int32_t len;
  mpz_ptr p;

  if (asnlen < asn_get_len (asn))
    {
      log_print ("asn_decode_integer: ASN.1 content is bigger than buffer");
      return 0;
    }

  len = asn_get_data_len (obj, &asn, &data);

  if (TAG_TYPE (asn) != TAG_INTEGER)
    {
      log_print ("asn_decode_integer: expected tag type INTEGER, got %d",
		 TAG_TYPE (asn));
      return 0;
    }

  p = malloc (sizeof *p);
  if (!p)
    {
      log_error ("asn_decode_integer: malloc (%d) failed", sizeof *p);
      return 0;
    }

  mpz_init (p);
  mpz_setraw (p, data, len);

  obj->len = len;
  obj->data = p;

  return data + len;
}

void
asn_free_integer (struct norm_type *obj)
{
  if (obj->data)
    {
      mpz_clear ((mpz_ptr) obj->data);
      free (obj->data);
    }
}


u_int32_t
asn_get_encoded_len_string (struct norm_type *obj, u_int8_t *type)
{
  return asn_get_encoded_len (obj, obj->len, type);
}

/*
 * Encode a String
 * Input = obj, output = asn or return value.
 */
u_int8_t *
asn_encode_string (struct norm_type *obj, u_int8_t *asn)
{
  u_int8_t *buf, *data;

  buf = asn_format_header (obj, asn, &data);

  if (!buf)
    return 0;

  memcpy (data, obj->data, obj->len);

  return buf;
}

u_int8_t *
asn_decode_string (u_int8_t *asn, u_int32_t asnlen, struct norm_type *obj)
{
  u_int8_t *data;
  u_int32_t len;

  obj->len = len = asn_get_data_len (obj, &asn, &data);

  if (TAG_TYPE (asn) != obj->type)
    {
      log_print ("asn_decode_string: expected tag type STRING(%d), got %d",
		 obj->type, TAG_TYPE (asn));
      return 0;
    }

  if (asnlen < asn_get_len (asn))
    {
      log_print ("asn_decode_string: ASN.1 content is bigger than buffer");
      return 0;
    }

  obj->data = malloc (obj->len + 1);
  if (!obj->data)
    {
      log_error ("asn_decode_string: malloc (%d) failed", obj->len + 1);
      return 0;
    }
  memcpy ((char *)obj->data, data, obj->len);

  /*
   * Encode a terminating '0', this is irrelevant for OCTET strings
   * but nice for printable strings which do not include the terminating
   * zero.
   */
  ((char *)obj->data)[obj->len] = 0;

  return data + len;
}

void
asn_free_string (struct norm_type *obj)
{
  if (obj->data)
    free (obj->data);
}


u_int32_t
asn_get_encoded_len_objectid (struct norm_type *obj, u_int8_t *type)
{
  u_int16_t len_off;
  u_int32_t len;
  u_int32_t tmp;
  char *buf, *buf2;

  /* XXX We only do low tags at the moment.  */
  len_off = 1;

  /* The first two numbers are encoded together.  */
  buf = obj->data;
  tmp = strtol (buf, &buf2, 10);
  buf = buf2;
  tmp = strtol (buf, &buf2, 10);
  buf = buf2;

  len = 1;
  while (*buf)
    {
      tmp = strtol (buf, &buf2, 10);
      if (buf == buf2)
	break;

      buf = buf2;
      do {
	tmp >>= 7;
	len++;
      } while (tmp);
    }

  /* The first two IDs are encoded as one octet.  */
  obj->len = len - 1;

  return asn_get_encoded_len (obj, len, type);
}

/*
 * Encode an Object Identifier
 * Input = obj, output = asn or return value.
 */
u_int8_t *
asn_encode_objectid (struct norm_type *obj, u_int8_t *asn)
{
  u_int8_t *buf, *data;
  char *enc, *enc2;
  u_int32_t tmp, tmp2;
  int flag = 0;

  buf = asn_format_header (obj, asn, &data);

  if (!buf)
    return 0;

  enc = obj->data;
  while (*enc)
    {
      /* First two IDs are encoded as one octet.  */
      if (flag == 0)
	{
	  tmp = strtol (enc, &enc2, 10);
	  if (enc == enc2)
	    return 0;
	  enc = enc2;
	  tmp2 = strtol (enc, &enc2, 10) + 40 * tmp;
	  flag = 1;
	}
      else
	  tmp2 = strtol (enc, &enc2, 10);

      if (enc == enc2)
	break;

      /* Reverse the digits to base-128.  */
      tmp = 0;
      do {
	tmp <<= 7;
	tmp += tmp2 & 0x7f;
	tmp2 >>= 7;
      } while (tmp2);

      enc = enc2;
      do {
	/* If the next octet still belongs to the data set MSB.  */
	*data++ = (tmp & 0x7f) | ( tmp > 127 ? 0x80 : 0);
	tmp >>= 7;
      } while (tmp);
    }

  return buf;
}

u_int8_t *
asn_decode_objectid (u_int8_t *asn, u_int32_t asnlen, struct norm_type *obj)
{
  u_int8_t *data;
  u_int32_t len, c, tmp;
  int flag = 0;
  void *new_buf;

  len = asn_get_data_len (obj, &asn, &data);

  if (TAG_TYPE (asn) != TAG_OBJECTID)
    {
      log_print ("asn_decode_objectid: expected tag type OBJECTID, got %d",
		 TAG_TYPE (asn));
      return 0;
    }

  if (asnlen < asn_get_len (asn))
    {
      log_print ("asn_decode_objectid: ASN.1 content is bigger than buffer");
      return 0;
    }

  obj->data = 0;
  obj->len = 0;
  while (len > 0)
    {
      tmp = 0;
      do
	{
	  tmp <<= 7;
	  tmp += *data & 0x7f;
	}
      while (len-- > 0 && (*data++ & 0x80));

      if (flag == 0)
	  c = snprintf (0, 0, "%d %d ", tmp / 40, tmp % 40) + 1;
      else
	  c = snprintf (0, 0, "%d ", tmp) + 1;

      new_buf = realloc (obj->data, obj->len + c);
      if (!new_buf)
	{
	  log_error ("asn_decode_objectid: realloc (%p, %d) failed", obj->data,
		     obj->len + c);
	  free (obj->data);
	  obj->data = 0;
	  return 0;
	}
      obj->data = new_buf;

      if (flag == 0)
	{
	  sprintf (obj->data + obj->len, "%d %d ", tmp/40, tmp % 40);
	  flag = 1;
	}
      else
	sprintf (obj->data + obj->len, "%d ", tmp);
	
      obj->len = strlen (obj->data);
    }

  if (obj->data)
    ((char *)obj->data)[obj->len - 1] = 0;

  return data;
}

void
asn_free_objectid (struct norm_type *obj)
{
  if (obj->data)
    free (obj->data);
}


u_int32_t
asn_get_encoded_len_raw (struct norm_type *obj, u_int8_t *type)
{
  if (type)
    {
      if (obj->len > 127)
	*type = ASN_LONG_FORM;
      else
	*type = 0;
    }

  return obj->len;
}

u_int8_t *
asn_encode_raw (struct norm_type *obj, u_int8_t *asn)
{
  u_int8_t *buf = 0;

  if (obj->len == 0)
    return asn;

  if (asn)
    buf = asn;

  if (!buf)
    {
      buf = malloc (obj->len);
      if (!buf)
	{
	  log_error ("asn_encode_raw: malloc (%d) failed", obj->len);
	  return 0;
	}
    }

  memcpy (buf, obj->data, obj->len);

  return buf;
}

u_int8_t *
asn_decode_raw (u_int8_t *asn, u_int32_t asnlen, struct norm_type *obj)
{
  obj->len = asn_get_len (asn);
  if (asnlen < obj->len)
    {
      log_print ("asn_decode_raw: ASN.1 content is bigger than buffer");
      return 0;
    }

  obj->data = malloc (obj->len);
  if (!obj->data)
    {
      log_error ("asn_decode_raw: malloc (%d) failed", obj->len);
      return 0;
    }

  memcpy (obj->data, asn, obj->len);

  return asn + obj->len;
}

void
asn_free_raw (struct norm_type *obj)
{
  if (obj->data)
    free (obj->data);
}

u_int32_t
asn_get_encoded_len_null (struct norm_type *obj, u_int8_t *type)
{
  return asn_get_encoded_len (obj, 0, type);
}

u_int8_t *
asn_encode_null (struct norm_type *obj, u_int8_t *asn)
{
  u_int8_t *buf = 0;

  if (asn)
    buf = asn;

  if (!buf)
    {
      buf = malloc (2);
      if (!buf)
	{
	  log_error ("asn_encode_null: malloc (2) failed");
	  return 0;
	}
    }

  buf[0] = obj->type;
  buf[1] = 0;

  return buf;
}

u_int8_t *
asn_decode_null (u_int8_t *asn, u_int32_t asnlen, struct norm_type *obj)
{
  obj->data = 0;
  obj->len = 0;

  return asn + asn_get_len (asn);
}

void
asn_free_null (struct norm_type *obj)
{
  obj->data = 0;
}

void
asn_free (struct norm_type *obj)
{
  struct asn_handler *h = asn_get (obj->type);

  if (!h)
    log_print ("asn_free: unkown ASN.1 type %d", obj->type);
  else
    h->deallocate (obj);
}

/* Returns the whole length of the BER encoded ASN.1 object.  */
u_int32_t
asn_get_len (u_int8_t *asn)
{
  u_int32_t len;
  u_int8_t *data;
  struct norm_type tmp = { TAG_RAW, UNIVERSAL, 0, 0, 0 };

  len = asn_get_data_len (&tmp, &asn, &data);

  if (!asn)
    return 0;

  return (data - asn) + len;
}

/*
 * Returns the length of the ASN content, and a pointer to the content
 * data itself.
 * For TAG_NULL the data length is zero, so we have to return an error
 * in asn, asn will be NULL in case of error.
 */
u_int32_t
asn_get_data_len (struct norm_type *obj, u_int8_t **asn, u_int8_t **data)
{
  u_int32_t len;
  u_int16_t len_off = 1;
  static struct norm_type tmp = { TAG_RAW, UNIVERSAL, 0, 0, 0 };

  if (obj && ISEXPLICIT (obj))
    {
      if (TAG_TYPE (*asn) != GET_EXP (obj))
	{
	  log_print ("asn_get_data_len: explicit tagging was needed");
	  *asn = 0;
	  return 0;
	}

      asn_get_data_len (&tmp, asn, data);
      *asn = *data;
    }

  if ((*asn)[len_off] & ASN_LONG_FORM)
    {
      int i, octets = (*asn)[len_off] & 0x7f;

      /* XXX We only decode really small lengths.  */
      if (octets > sizeof len)
	{
	  log_print ("asn_get_data_len: long form length %d exceeds "
		     "allowed maximum", octets);
	  *asn = 0;
	  return 0;
	}

      for (len = 0, i = 0; i < octets; i++)
	{
	  len = (len << 8) | (*asn)[len_off + 1 + i];
	}

      if (data)
	*data = *asn + len_off + 1 + octets;
    }
  else
    {
      /* Short form */
      len = (*asn)[len_off];

      if (data)
	*data = *asn + len_off + 1;
    }

  return len;
}

void
asn_free_sequence (struct norm_type *obj)
{
  struct norm_type *in = obj->data;
  struct asn_handler *h;

  if (!in)
    return;

  while (in->type != TAG_STOP)
    {
      h = asn_get (in->type);
      if (!h)
	break;

      h->deallocate (in++);
    }

  free (obj->data);
}

u_int32_t
asn_get_encoded_len_sequence (struct norm_type *seq, u_int8_t *type)
{
  u_int32_t len, i;
  struct asn_handler *h;
  struct norm_type *obj = (struct norm_type *) seq->data;

  /* Get whole data length */
  for (len = 0, i = 0; obj[i].type != TAG_STOP; i++)
    {
      h = asn_get (obj[i].type);
      if (!h)
	{
	  log_print ("asn_encode_sequence: unknown type %d", obj[i].type);
	  break;
	}
      len += h->get_encoded_len (&obj[i], 0);
    }

  return asn_get_encoded_len (seq, len, type);
}

u_int8_t *
asn_encode_sequence (struct norm_type *seq, u_int8_t *asn)
{
  u_int32_t len;
  u_int8_t *erg, *data;
  struct norm_type *obj;
  struct asn_handler *h;
  int i;

  h = asn_get (seq->type);
  if (!h)
    return 0;

  obj = (struct norm_type *) seq->data;

  erg = asn_format_header (seq, asn, &data);
  if (!erg)
      return 0;

  for (i = 0, len = 0; obj[i].type != TAG_STOP; i++)
    {
      h = asn_get (obj[i].type);
      if (!h)
	{
	  log_print ("asn_encode_sequence: unknown ASN.1 tag %d", obj[i].type);
	  return 0;
	}

      /* A structure can be optional, indicated by data == 0.  */
      if (!h->encode (&obj[i], data + len) && obj->data)
	{
	  log_print ("asn_encode_sequence: encoding of %s failed",
		     obj[i].name);
	  return 0;
	}
      len += h->get_encoded_len (&obj[i], 0);
    }

  erg[0] |= ASN_CONSTRUCTED;

  return erg;
}

u_int8_t *
asn_decode_sequence (u_int8_t *asn, u_int32_t asnlen, struct norm_type *obj)
{
  u_int8_t *p, *data;
  u_int32_t len, flags, objects;
  struct asn_handler *h;
  void *new_buf;

  if (asnlen < asn_get_len (asn))
    {
      log_print ("asn_decode_sequence: ASN.1 content is bigger than buffer");
      return 0;
    }

  len = asn_get_data_len (obj, &asn, &data);

  /* XXX An empty sequence is that okay.  */
  if (len == 0)
    return data;

  if (TAG_TYPE (asn) != obj->type)
    {
      log_print ("asn_decode_sequence: expected tag type SEQUENCE/SET, got %d",
		 TAG_TYPE (asn));
      return 0;
    }

  /* Handle dynamic sized sets and sequences.  */
  flags = obj->flags;

  if (flags & ASN_FLAG_ZEROORMORE)
    {
      struct norm_type stop_tag = { TAG_STOP };
      struct norm_type *tmp;

      /* Zero occurences */
      if (len == 0)
	{
	  asn_free (obj);
	  obj->data = 0;
	  return data;
	}

      /* Count number of objects */
      p = data;
      objects = 0;
      while (p < data + len)
	{
	  objects++;
	  p += asn_get_len (p);
	}
      if (p != data + len)
	{
	  log_print ("asn_decode_sequence: SEQ/SET OF too many elements");
	  return 0;
	}

      /*
       * Create new templates for dynamically added objects,
       * the ASN.1 tags SEQUENCE OF and SET OF, specify an unknown
       * number of elements.
       */
      new_buf = realloc (obj->data,
			 (objects + 1) * sizeof (struct norm_type));
      if (!new_buf)
	{
	  log_error ("asn_decode_sequence: realloc (%p, %d) failed", obj->data,
		     (objects + 1) * sizeof (struct norm_type));
	  asn_free (obj);
	  obj->data = 0;
	  return 0;
	}
      obj->data = new_buf;

      tmp = obj->data;

      /* Copy TAG_STOP */
      memcpy (tmp + objects, &stop_tag, sizeof (struct norm_type));
      while (objects-- > 1)
	{
	  memcpy (tmp + objects, tmp, sizeof (struct norm_type));
	  if (!asn_template_clone (tmp + objects, 1))
	    return 0;
	}
    }

  obj = (struct norm_type *) obj->data;

  p = data;
  while (p < data + len)
    {
      if (obj->type == TAG_STOP)
	break;
      h = asn_get (obj->type);
      if (!h)
	{
	  log_print ("asn_decode_sequence: unknown ASN.1 tag %d", obj->type);
	  return 0;
	}

      p = h->decode (p, (data - p) + len, obj++);
      if (!p)
	break;
    }

  if (p < data + len)
      log_print ("asn_decode_sequence: ASN tag was not decoded completely");

  if (!p)
    return 0;

  return data + len;
}
@


1.8
log
@Merge with EOM 1.27

author: niklas
style

author: niklas
strdup error checking
@
text
@d1 1
a1 1
/*	$OpenBSD: asn.c,v 1.7 1999/04/19 20:56:57 niklas Exp $	*/
@


1.7
log
@./asn.c: Merge with EOM 1.25

Style

Style.  alloc error reporting.  Math error propagation.  Allocate right
sizes.

Name change so we can #define free

1999 copyrights
@
text
@d1 2
a2 2
/*	$OpenBSD: asn.c,v 1.6 1999/02/26 03:32:11 niklas Exp $	*/
/*	$EOM: asn.c,v 1.25 1999/04/18 15:17:22 niklas Exp $	*/
d217 1
a217 1
      if (!strcmp (table->objectid, id))
d219 1
a219 1
      if (!strncmp (table->objectid, id, strlen (table->objectid))
d247 2
a248 2
  if (!strcasecmp (path, obj->name))
      return obj->data;
d250 7
a256 1
  p = path = strdup (path);
d277 1
a277 1
	  counter = atoi (tmp+1);
d286 1
a286 1
	  if (!strcasecmp (p2, obj->name) && counter-- == 0)
@


1.6
log
@Merge from the Ericsson repository
| revision 1.21
| date: 1999/02/25 11:38:42;  author: niklas;  state: Exp;  lines: +3 -1
| include sysdep.h everywhere
| ----------------------------
@
text
@d1 2
a2 2
/*	$OpenBSD: asn.c,v 1.5 1998/11/17 11:10:07 niklas Exp $	*/
/*	$EOM: asn.c,v 1.21 1999/02/25 11:38:42 niklas Exp $	*/
d6 1
d53 47
a99 26
struct asn_handler table[] =  {
  {TAG_INTEGER, asn_free_integer, 
   asn_get_encoded_len_integer, asn_decode_integer, asn_encode_integer},
  {TAG_OBJECTID, asn_free_objectid,
   asn_get_encoded_len_objectid, asn_decode_objectid, asn_encode_objectid},
  {TAG_SEQUENCE, asn_free_sequence, 
   asn_get_encoded_len_sequence, asn_decode_sequence, asn_encode_sequence},
  {TAG_SET, asn_free_sequence, 
   asn_get_encoded_len_sequence, asn_decode_sequence, asn_encode_sequence},
  {TAG_UTCTIME, asn_free_string, 
   asn_get_encoded_len_string, asn_decode_string, asn_encode_string},
  {TAG_BITSTRING, asn_free_string, 
   asn_get_encoded_len_string, asn_decode_string, asn_encode_string},
  {TAG_OCTETSTRING, asn_free_string, 
   asn_get_encoded_len_string, asn_decode_string, asn_encode_string},
  {TAG_BOOL, asn_free_string, 
   asn_get_encoded_len_string, asn_decode_string, asn_encode_string},
  {TAG_PRINTSTRING, asn_free_string, 
   asn_get_encoded_len_string, asn_decode_string, asn_encode_string},
  {TAG_RAW, asn_free_raw, 
   asn_get_encoded_len_raw, asn_decode_raw, asn_encode_raw},
  {TAG_NULL, asn_free_null, 
   asn_get_encoded_len_null, asn_decode_null, asn_encode_null},
  {TAG_ANY, asn_free_null,
   NULL, asn_decode_any, NULL},
  {TAG_STOP, NULL, NULL, NULL, NULL}
d121 3
a123 2
  
  if ((*asn = malloc (st.st_size)) == NULL)
d125 1
a125 1
      log_print ("asn_get_from_file: out of memory");
d130 2
a131 2
  if (read (fd, *asn, st.st_size) != st.st_size ||
      asn_get_len (*asn) != *asnlen)
d138 1
a138 1
		 
d152 2
a153 2
  
  if (!constructed) 
d156 7
a162 3
      if (p == NULL)
	return NULL;
      
d171 1
a171 1
      obj->data = NULL;
d179 1
a179 1
      
d181 6
a186 3
      if (p->data == NULL)
	return NULL;

d194 2
a195 2
	  if (asn_template_clone (&obj[i], 1) == NULL)
	    return NULL;
d204 1
a204 2
/* Associates a human readable name to an OBJECT IDENTIFIER */

d209 1
a209 1
  char *p = NULL;
d212 2
a213 2
  if (id == NULL)
    return NULL;
d215 1
a215 1
  while (table->name != NULL)
d219 2
a220 2
      if (!strncmp (table->objectid, id, strlen (table->objectid)) &&
	  strlen (table->objectid) > len)
d230 1
a230 1
    return NULL;
d234 1
a234 1
  strncat (buf + strlen (buf), id + len, sizeof (buf) -1 - strlen (buf));
d240 1
a240 2
/* Retrieves the pointer to a data type referenced by the path name */

d249 1
a249 1
  
d253 1
a253 1
  if (strcasecmp (p2, obj->name) || p == NULL)
d256 1
a256 1
  while (p != NULL)
d259 1
a259 1
      if (obj == NULL)
d261 1
a261 1
      
d264 1
a264 1
      /* 
d269 1
a269 1
      if (tmp != NULL)
d277 1
a277 1
      /* Find the Tag */
d284 1
a284 1
      
d288 1
a288 1
      if (p == NULL)
d301 1
a301 1
  return NULL;
d304 1
a304 2
/* Gets an entry from the ASN.1 tag switch table */

d316 1
a316 1
  return NULL;
a322 1

d340 2
a341 1
  u_int8_t *buf = NULL, type;
d346 2
a347 2
  if (h == NULL)
    return NULL;
d349 1
a349 1
  if (asn != NULL)
d352 1
a352 1
  /* We only do low tag at the moment */
d357 9
a365 2
  if (buf == NULL && (buf = malloc (len)) == NULL)
    return NULL;
d392 1
a392 1
  if (ISEXPLICIT(obj))
d394 6
a399 7
      u_int8_t *erg;
      /* Explicit tagging add an outer layer */
      struct norm_type tmp = {obj->type, obj->class&0x3, NULL, 0, obj->data};

      /* XXX - force the class to be CONTEXT */
      buf[0] = GET_EXP(obj) | (((enum asn_classes)CONTEXT & 0x3) << 6) | 
	ASN_CONSTRUCTED;
d406 1
a406 1
    /* XXX low tag only */
d421 1
a421 1
      if (type != NULL)
d428 1
a428 1
      if (type != NULL)
d432 2
a433 2
  if (obj != NULL && ISEXPLICIT(obj))
    len = asn_get_encoded_len (NULL, len, NULL);
d438 1
a438 2
/* Tries to decode an ANY tag, if we cant handle it we just raw encode it */

d450 1
a450 1
  if (h == NULL)
d460 1
a460 1
u_int32_t 
d468 1
a468 1
  /* XXX - We only do low tag at the moment */
d476 1
a476 1
  
a494 1

d503 2
a504 2
  if (buf == NULL)
    return NULL;
d509 1
a509 1
  /* XXX - We only deal with unsigned integers at the moment */
d524 1
d529 1
a529 1
      return NULL;
d534 1
a534 1
  if (TAG_TYPE(asn) != TAG_INTEGER)
d537 2
a538 2
		 TAG_TYPE(asn));
      return NULL;
d541 2
a542 2
  obj->data = malloc (sizeof (mpz_ptr));
  if (obj->data == NULL) 
d544 2
a545 2
      log_print ("asn_decode_integer: out of memory.");
      return NULL;
d548 2
a549 2
  mpz_init ((mpz_ptr) obj->data);
  mpz_setraw ((mpz_ptr) obj->data, data, len);
d552 1
d560 1
a560 1
  if (obj->data != NULL)
d568 1
a568 1
u_int32_t 
a577 1

d585 2
a586 2
  if (buf == NULL)
    return NULL;
d601 1
a601 1
  if (TAG_TYPE(asn) != obj->type)
d604 2
a605 2
		 obj->type, TAG_TYPE(asn));
      return NULL;
d611 1
a611 1
      return NULL;
d615 5
a619 2
  if (obj->data == NULL)
    return NULL;
d621 2
a622 1
  /* 
d635 1
a635 1
  if (obj->data != NULL)
d640 1
a640 1
u_int32_t 
d648 1
a648 1
  /* XXX - We only do low tag at the moment */
d651 1
a651 1
  /* The first two numbers are encoded together */
d672 1
a672 1
  /* The first two ids are encoded as one octet */
a681 1

d692 2
a693 2
  if (buf == NULL)
    return NULL;
d698 1
a698 1
      /* First two ids are encoded as one octet */
d703 1
a703 1
	    return NULL;
d714 1
a714 1
      /* Reverse the digits to base-128 */
d724 1
a724 1
	/* If the next octet still belongs to the data set msb */
d743 1
a743 1
  if (TAG_TYPE(asn) != TAG_OBJECTID)
d746 2
a747 2
		 TAG_TYPE(asn));
      return NULL;
d753 1
a753 1
      return NULL;
d756 1
a756 1
  obj->data = NULL;
d761 6
a766 4
      do {
	tmp <<= 7;
	tmp += *data & 0x7f;
      } while (len-- > 0 && (*data++ & 0x80));
d769 1
a769 1
	  c = snprintf (NULL, 0, "%d %d ", tmp/40, tmp % 40) + 1;
d771 1
a771 1
	  c = snprintf (NULL, 0, "%d ", tmp) + 1;
d774 1
a774 1
      if (new_buf == NULL) 
d776 2
d779 2
a780 3
	  obj->data = NULL;
	  log_print ("asn_decode_objectid: out of memory.");
	  return NULL;
d795 1
a795 1
  if (obj->data != NULL)
d804 1
a804 1
  if (obj->data != NULL)
d809 1
a809 1
u_int32_t 
d812 1
a812 1
  if (type != NULL)
d826 1
a826 1
  u_int8_t *buf = NULL;
d831 1
a831 1
  if (asn != NULL)
d834 9
a842 2
  if (buf == NULL && (buf = malloc (obj->len)) == NULL)
    return NULL;
d856 1
a856 1
      return NULL;
d860 1
a860 1
  if (obj->data == NULL)
d862 2
a863 2
      log_print ("asn_decode_raw: out of memory");
      return NULL;
d874 1
a874 1
  if (obj->data != NULL)
d878 1
a878 1
u_int32_t 
d887 1
a887 1
  u_int8_t *buf = NULL;
d889 1
a889 1
  if (asn != NULL)
d892 10
a901 3
  if (buf == NULL && (buf = malloc (2)) == NULL)
    return NULL;
  
d911 1
a911 1
  obj->data = NULL;
d920 1
a920 1
  obj->data = NULL;
d928 2
a929 2
  if (h == NULL)
      log_print ("asn_free: unkown ASN.1 type %d", obj->type);
d931 1
a931 1
    h->free (obj);
d934 1
a934 4
/*
 * Returns the whole length of the BER encoded ASN.1 object.
 */

d940 1
a940 1
  struct norm_type tmp = {TAG_RAW, UNIVERSAL, NULL, 0, NULL};
d944 1
a944 1
  if (asn == NULL)
a955 1

d961 1
d963 1
a963 1
  if (obj != NULL && ISEXPLICIT(obj))
d965 1
a965 3
      struct norm_type tmp = {TAG_RAW, UNIVERSAL, NULL, 0, NULL};

      if (TAG_TYPE(*asn) != GET_EXP(obj))
d967 2
a968 2
	  log_print ("asn_get_data_len: explict tagging was needed");
	  *asn = NULL;
d980 2
a981 2
      /* XXX - we only decode really small length */
      if (octets > sizeof (len))
d985 1
a985 1
	  *asn = NULL;
d994 1
a994 1
      if (data != NULL)
d1002 1
a1002 1
      if (data != NULL)
d1015 1
a1015 1
  if (in == NULL)
d1021 1
a1021 1
      if (h == NULL)
d1024 1
a1024 1
      h->free (in++);
d1026 1
a1026 1
  
d1041 1
a1041 1
      if (h == NULL)
d1043 1
a1043 1
	  log_print ("asn_encode_sequence: unkown type %d", obj[i].type);
d1046 1
a1046 1
      len += h->get_encoded_len (&obj[i], NULL);
d1060 4
a1063 3
  
  if ((h = asn_get (seq->type)) == NULL)
    return NULL;
d1068 2
a1069 2
  if (erg == NULL)
      return NULL;
d1074 1
a1074 1
      if (h == NULL)
d1077 1
a1077 1
	  return NULL;
d1080 2
a1081 2
      /* A structure can be optional, indicated by data == NULL */
      if (h->encode (&obj[i], data + len) == NULL && obj->data != NULL)
d1083 1
a1083 1
	  log_print ("asn_encode_sequence: encoding of %s failed", 
d1085 1
a1085 1
	  return NULL;
d1087 1
a1087 1
      len += h->get_encoded_len (&obj[i], NULL);
d1106 1
a1106 1
      return NULL;
d1110 2
a1111 2
  
  /* XXX - an empty sequence is that okay */
d1115 1
a1115 1
  if (TAG_TYPE(asn) != obj->type)
d1118 2
a1119 2
		 TAG_TYPE(asn));
      return NULL;
d1122 1
a1122 1
  /* Handle dynamic sized sets and sequences */
d1127 1
a1127 1
      struct norm_type stop_tag = {TAG_STOP};
d1134 1
a1134 1
	  obj->data = NULL;
d1149 1
a1149 1
	  return NULL;
d1152 1
a1152 1
      /* 
a1156 1

d1158 2
a1159 2
			   (objects+1) * sizeof (struct norm_type));
      if (new_buf == NULL)
d1161 2
d1164 2
a1165 3
	  obj->data = NULL;
	  log_print ("asn_decode_sequence: out of memory");
	  return NULL;
d1168 1
a1168 1
      
d1170 1
a1170 1
      
d1176 2
a1177 2
	  if (asn_template_clone (tmp + objects, 1) == NULL)
	    return NULL;
d1189 1
a1189 1
      if (h == NULL)
d1192 1
a1192 1
	  return NULL;
d1195 2
a1196 1
      if ((p = h->decode (p, (data - p) + len, obj++)) == NULL)
d1203 2
a1204 2
  if (p == NULL)
    return NULL;
@


1.5
log
@Add RCS Ids from the EOM repository
@
text
@d1 2
a2 2
/*	$OpenBSD: asn.c,v 1.4 1998/11/16 21:07:14 niklas Exp $	*/
/*	$EOM: asn.c,v 1.20 1998/08/21 13:47:55 provos Exp $	*/
d45 2
@


1.4
log
@Reinstate X509 signature code except for RSA code
@
text
@d1 2
a2 1
/*	$OpenBSD: asn.c,v 1.2 1998/11/15 00:43:49 niklas Exp $	*/
@


1.3
log
@Not clean enough yet
@
text
@@


1.2
log
@openBSD RCS IDs
@
text
@d1 1
a1 1
/*	$OpenBSD: asn.c,v 1.1.1.1 1998/11/15 00:03:48 niklas Exp $	*/
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$Id: asn.c,v 1.20 1998/08/21 13:47:55 provos Exp $	*/
@


1.1.1.1
log
@Initial import of isakmpd, an IKE (ISAKMP/Oakley) implementation for the
OpenBSD IPSEC stack by me, Niklas Hallqvist and Niels Provos, funded by
Ericsson Radio Systems.  It is not yet complete or usable in a real scenario
but the missing pieces will soon be there.  The early commit is for people
who wants early access and who are not afraid of looking at source.
isakmpd interops with Cisco, Timestep, SSH & Pluto (Linux FreeS/WAN) so
far, so it is not that incomplete.  It is really mostly configuration that
is lacking.
@
text
@@
