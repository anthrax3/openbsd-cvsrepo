head	1.8;
access;
symbols
	OPENBSD_2_5:1.6.0.2
	OPENBSD_2_5_BASE:1.6
	NIKLAS_981114:1.1.1.1
	NIKLAS:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	99.07.17.21.48.45;	author niklas;	state dead;
branches;
next	1.7;

1.7
date	99.04.19.19.54.53;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	99.02.26.03.32.50;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	98.11.17.11.10.07;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	98.11.16.21.07.15;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	98.11.15.00.52.25;	author niklas;	state dead;
branches;
next	1.2;

1.2
date	98.11.15.00.43.49;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	98.11.15.00.03.48;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.11.15.00.03.48;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.8
log
@regress/x509/certificate.txt: Merge with EOM 1.4
asn_useful.h: Merge with EOM 1.7
asn.c: Merge with EOM 1.28
asn.h: Merge with EOM 1.19
asn_useful.c: Merge with EOM 1.12
pkcs.c: Merge with EOM 1.21
pkcs.h: Merge with EOM 1.9

author: niklas
From Niels Provos, edited by me: certificate support using SSLeay
@
text
@/*	$OpenBSD: asn_useful.c,v 1.7 1999/04/19 19:54:53 niklas Exp $	*/
/*	$EOM: asn_useful.c,v 1.11 1999/04/02 00:57:27 niklas Exp $	*/

/*
 * Copyright (c) 1998 Niels Provos.  All rights reserved.
 * Copyright (c) 1999 Niklas Hallqvist.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Ericsson Radio Systems.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This code was written under funding by Ericsson Radio Systems.
 */

#include <sys/param.h>

#include "sysdep.h"

#include "asn.h"
#include "asn_useful.h"

struct norm_type AlgorithmIdentifier[] = {
  { TAG_OBJECTID, UNIVERSAL, "algorithm", 0, 0 },
  { TAG_ANY, UNIVERSAL, "parameters", 0, 0 },
  { TAG_STOP, UNIVERSAL, 0, 0, 0 }
};

struct norm_type Signed[] = {
  { TAG_RAW, UNIVERSAL, "data", 0, 0},
  SEQ("algorithm", AlgorithmIdentifier),
  { TAG_BITSTRING, UNIVERSAL, "encrypted", 0, 0 },
  { TAG_STOP, UNIVERSAL, 0, 0, 0 }
};

struct norm_type Validity[] = {
  { TAG_UTCTIME, UNIVERSAL, "notBefore", 0, 0 },
  { TAG_UTCTIME, UNIVERSAL, "notAfter", 0, 0 },
  { TAG_STOP, UNIVERSAL, 0, 0, 0 }
};

struct norm_type AttributeValueAssertion[] = {
  { TAG_OBJECTID, UNIVERSAL, "AttributeType", 0, 0 },
  { TAG_ANY, UNIVERSAL, "AttributeValue", 0, 0 },
  { TAG_STOP, UNIVERSAL, 0, 0, 0 }
};

struct norm_type RelativeDistinguishedName[] = {
  SEQ ("AttributeValueAssertion", AttributeValueAssertion),
  { TAG_STOP }
};

/* 
 * For decoding this structure is dynamically resized, we add two Names
 * only for encoding purposes.
 */
struct norm_type RDNSequence[] = {
  SETOF ("RelativeDistinguishedName", RelativeDistinguishedName),
  SETOF ("RelativeDistinguishedName", RelativeDistinguishedName),
  { TAG_STOP }
};

struct norm_type SubjectPublicKeyInfo[] = {
  SEQ ("algorithm", AlgorithmIdentifier),
  { TAG_BITSTRING, UNIVERSAL, "subjectPublicKey", 0, 0 },
  { TAG_STOP }
};

struct norm_type Extension[] = {
  { TAG_OBJECTID, UNIVERSAL, "extnId", 0, 0 },
  { TAG_BOOL, UNIVERSAL, "critical", 0, 0 },
  { TAG_OCTETSTRING, UNIVERSAL, "extnValue", 0, 0 },
  { TAG_STOP }
};

struct norm_type Extensions[] = {
  SEQ ("extension", Extension),
  { TAG_STOP }
};

struct norm_type Certificate[] = {
  /* We need to add an explicit tag, HACK XXX */
  { TAG_INTEGER, ADD_EXP(0, UNIVERSAL), "version", 0, 0 },
  { TAG_INTEGER, UNIVERSAL, "serialNumber", 0, 0 },
  SEQ ("signature", AlgorithmIdentifier),
  SEQOF ("issuer", RDNSequence),
  SEQ ("validity", Validity),
  SEQOF ("subject", RDNSequence),
  SEQ ("subjectPublicKeyInfo", SubjectPublicKeyInfo),
  { TAG_RAW, UNIVERSAL, "extension", 0, 0 },
  { TAG_STOP }
};

struct norm_type DigestInfo[] = {
  SEQ ("digestAlgorithm", AlgorithmIdentifier),
  { TAG_OCTETSTRING, UNIVERSAL, "digest", 0, 0 },
  { TAG_STOP }
};

struct asn_objectid asn_ids[] = {
  { "AttributeType", ASN_ID_ATTRIBUTE_TYPE },
  { "CountryName", ASN_ID_COUNTRY_NAME },
  { "LocalityName", ASN_ID_LOCALITY_NAME },
  { "StateOrProvinceName", ASN_ID_STATE_NAME },
  { "OrganizationName", ASN_ID_ORGANIZATION_NAME },
  { "OrganizationUnitName", ASN_ID_ORGUNIT_NAME },
  { "CommonUnitName", ASN_ID_COMMONUNIT_NAME },
  { "pkcs-1", ASN_ID_PKCS },
  { "rsaEncryption", ASN_ID_RSAENCRYPTION },
  { "md2WithRSAEncryption", ASN_ID_MD2WITHRSAENC },
  { "md4WithRSAEncryption", ASN_ID_MD4WITHRSAENC },
  { "md5WithRSAEncryption", ASN_ID_MD5WITHRSAENC },
  { "md2", ASN_ID_MD2 },
  { "md4", ASN_ID_MD4 },
  { "md5", ASN_ID_MD5 },
  { "emailAddress", ASN_ID_EMAILADDRESS },
  { "id-ce", ASN_ID_CE },
  { "subjectAltName", ASN_ID_SUBJECT_ALT_NAME },
  { "issuerAltName", ASN_ID_ISSUER_ALT_NAME },
  { "basicConstraints", ASN_ID_BASIC_CONSTRAINTS },
  { 0, 0 }
};
@


1.7
log
@./app.c: Merge with EOM 1.5
./gmp_util.c: Merge with EOM 1.3
./asn_useful.c: Merge with EOM 1.11
./attribute.c: Merge with EOM 1.9
./constants.c: Merge with EOM 1.7
./doi.h: Merge with EOM 1.25
./doi.c: Merge with EOM 1.4
./field.c: Merge with EOM 1.9
./init.c: Merge with EOM 1.13
./isakmp_doi.c: Merge with EOM 1.35
./prf.c: Merge with EOM 1.6
./util.c: Merge with EOM 1.14
./app.h: Merge with EOM 1.4
./conf.h: Merge with EOM 1.8
./ipsec.h: Merge with EOM 1.34
./ipsec_doi.h: Merge with EOM 1.10
./pkcs.h: Merge with EOM 1.8
./sysdep.h: Merge with EOM 1.15

1999 copyrights
@
text
@d1 1
a1 1
/*	$OpenBSD: asn_useful.c,v 1.6 1999/02/26 03:32:50 niklas Exp $	*/
@


1.6
log
@Merge from the Ericsson repository
| revision 1.10
| date: 1999/02/25 16:19:36;  author: niklas;  state: Exp;  lines: +61 -49
| Style and s/NULL/0/
| ----------------------------
| revision 1.9
| date: 1999/02/25 11:38:43;  author: niklas;  state: Exp;  lines: +3 -1
| include sysdep.h everywhere
| ----------------------------
@
text
@d1 2
a2 2
/*	$OpenBSD: asn_useful.c,v 1.5 1998/11/17 11:10:07 niklas Exp $	*/
/*	$EOM: asn_useful.c,v 1.10 1999/02/25 16:19:36 niklas Exp $	*/
d6 1
@


1.5
log
@Add RCS Ids from the EOM repository
@
text
@d1 2
a2 2
/*	$OpenBSD: asn_useful.c,v 1.4 1998/11/16 21:07:15 niklas Exp $	*/
/*	$EOM: asn_useful.c,v 1.8 1998/08/21 13:47:58 provos Exp $	*/
d39 2
d45 4
a48 3
  {TAG_OBJECTID, UNIVERSAL, "algorithm", 0, NULL},
  {TAG_ANY, UNIVERSAL, "parameters", 0, NULL},
  {TAG_STOP, UNIVERSAL, NULL, 0, NULL}};
d51 1
a51 1
  {TAG_RAW, UNIVERSAL, "data", 0, NULL},
d53 3
a55 2
  {TAG_BITSTRING, UNIVERSAL, "encrypted", 0, NULL},
  {TAG_STOP, UNIVERSAL, NULL, 0, NULL}};
d58 4
a61 3
  {TAG_UTCTIME, UNIVERSAL, "notBefore", 0, NULL},
  {TAG_UTCTIME, UNIVERSAL, "notAfter", 0, NULL},
  {TAG_STOP, UNIVERSAL, NULL, 0, NULL}};
d64 4
a67 3
  {TAG_OBJECTID, UNIVERSAL, "AttributeType", 0, NULL},
  {TAG_ANY, UNIVERSAL, "AttributeValue", 0, NULL},
  {TAG_STOP, UNIVERSAL, NULL, 0, NULL}};
d71 2
a72 1
  {TAG_STOP}};
d81 2
a82 1
  {TAG_STOP}};
d86 3
a88 2
  {TAG_BITSTRING, UNIVERSAL, "subjectPublicKey", 0, NULL},
  {TAG_STOP}};
d91 5
a95 4
  {TAG_OBJECTID, UNIVERSAL, "extnId", 0, NULL},
  {TAG_BOOL, UNIVERSAL, "critical", 0, NULL},
  {TAG_OCTETSTRING, UNIVERSAL, "extnValue", 0, NULL},
  {TAG_STOP}};
d99 2
a100 1
  {TAG_STOP}};
d104 2
a105 2
  {TAG_INTEGER, ADD_EXP(0, UNIVERSAL), "version", 0, NULL},
  {TAG_INTEGER, UNIVERSAL, "serialNumber", 0, NULL},
d111 3
a113 2
  {TAG_RAW, UNIVERSAL, "extension", 0, NULL},
  {TAG_STOP}};
d117 3
a119 2
  {TAG_OCTETSTRING, UNIVERSAL, "digest", 0, NULL},
  {TAG_STOP}};
d122 22
a143 21
  {"AttributeType", ASN_ID_ATTRIBUTE_TYPE},
  {"CountryName", ASN_ID_COUNTRY_NAME},
  {"LocalityName", ASN_ID_LOCALITY_NAME},
  {"StateOrProvinceName", ASN_ID_STATE_NAME},
  {"OrganizationName", ASN_ID_ORGANIZATION_NAME},
  {"OrganizationUnitName", ASN_ID_ORGUNIT_NAME},
  {"CommonUnitName", ASN_ID_COMMONUNIT_NAME},
  {"pkcs-1", ASN_ID_PKCS},
  {"rsaEncryption", ASN_ID_RSAENCRYPTION},
  {"md2WithRSAEncryption", ASN_ID_MD2WITHRSAENC},
  {"md4WithRSAEncryption", ASN_ID_MD4WITHRSAENC},
  {"md5WithRSAEncryption", ASN_ID_MD5WITHRSAENC},
  {"md2", ASN_ID_MD2},
  {"md4", ASN_ID_MD4},
  {"md5", ASN_ID_MD5},
  {"emailAddress", ASN_ID_EMAILADDRESS},
  {"id-ce", ASN_ID_CE},
  {"subjectAltName", ASN_ID_SUBJECT_ALT_NAME},
  {"issuerAltName", ASN_ID_ISSUER_ALT_NAME},
  {"basicConstraints", ASN_ID_BASIC_CONSTRAINTS},
  {NULL, NULL} };
@


1.4
log
@Reinstate X509 signature code except for RSA code
@
text
@d1 2
a2 1
/*	$OpenBSD: asn_useful.c,v 1.2 1998/11/15 00:43:49 niklas Exp $	*/
@


1.3
log
@Not clean enough yet
@
text
@@


1.2
log
@openBSD RCS IDs
@
text
@d1 1
a1 1
/*	$OpenBSD: asn_useful.c,v 1.1.1.1 1998/11/15 00:03:48 niklas Exp $	*/
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$Id: asn_useful.c,v 1.8 1998/08/21 13:47:58 provos Exp $	*/
@


1.1.1.1
log
@Initial import of isakmpd, an IKE (ISAKMP/Oakley) implementation for the
OpenBSD IPSEC stack by me, Niklas Hallqvist and Niels Provos, funded by
Ericsson Radio Systems.  It is not yet complete or usable in a real scenario
but the missing pieces will soon be there.  The early commit is for people
who wants early access and who are not afraid of looking at source.
isakmpd interops with Cisco, Timestep, SSH & Pluto (Linux FreeS/WAN) so
far, so it is not that incomplete.  It is really mostly configuration that
is lacking.
@
text
@@
