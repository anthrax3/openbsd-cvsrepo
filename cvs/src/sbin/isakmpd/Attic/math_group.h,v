head	1.13;
access;
symbols
	OPENBSD_4_7:1.12.0.14
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.16
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.12
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.10
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.8
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.6
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.4
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.2
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.10.0.8
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.6
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.4
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.2
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.5.0.12
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.10
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.8
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.6
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.4
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.2
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.4.0.2
	OPENBSD_2_5_BASE:1.4
	NIKLAS_981114:1.1.1.1
	NIKLAS:1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2010.06.29.19.50.16;	author reyk;	state dead;
branches;
next	1.12;

1.12
date	2006.06.02.19.35.55;	author hshoexer;	state Exp;
branches;
next	1.11;

1.11
date	2006.05.04.14.37.51;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2004.04.15.18.39.26;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2004.04.07.22.45.49;	author ho;	state Exp;
branches;
next	1.8;

1.8
date	2003.12.15.10.06.42;	author hshoexer;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.03.14.28.16;	author ho;	state Exp;
branches;
next	1.6;

1.6
date	2002.09.06.21.36.52;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	99.04.19.20.00.24;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	99.03.24.14.59.52;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	98.11.17.11.10.17;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	98.11.15.00.44.01;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	98.11.15.00.03.49;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.11.15.00.03.49;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Replace the hand-crafted Diffie-Hellman implementation in isakmpd with
the smaller implementation from iked that is using libcrypto instead.
This allows to remove a lot of code (which is always good), get rid of
some custom crypto code by using libcrypto, theoretically adds
support for many new MODP and EC2N/ECP modes (but it is not configurable
yet), and allows to share the dh.c/dh.h code in different codebases
(it is identical in isakmpd and iked, but could also be used elsewhere).

ok deraadt@@
@
text
@/* $OpenBSD: math_group.h,v 1.12 2006/06/02 19:35:55 hshoexer Exp $	 */
/* $EOM: math_group.h,v 1.7 1999/04/17 23:20:40 niklas Exp $	 */

/*
 * Copyright (c) 1998 Niels Provos.  All rights reserved.
 * Copyright (c) 1999 Niklas Hallqvist.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This code was written under funding by Ericsson Radio Systems.
 */

#ifndef _MATH_GROUP_H_
#define _MATH_GROUP_H_

enum groups {
	MODP,			/* F_p, Z modulo a prime */
	EC2N,			/* Elliptic Curve over the Field GF(2**N) */
	ECP,			/* Elliptic Curve over the Field Z_p */
	NOTYET			/* Not yet assigned */
};

/*
 * The group on which diffie hellmann calculations are done.
 */

struct group {
	enum groups     type;
	int             id;	/* Group ID */
	int             bits;	/* Number of key bits provided by this group */
	void           *group;
	void           *a, *b, *c, *d;
	void           *gen;	/* Group Generator */
	int             (*getlen) (struct group *);
	void            (*getraw) (struct group *, void *, u_int8_t *);
	int             (*setraw) (struct group *, void *, u_int8_t *, int);
	int             (*setrandom) (struct group *, void *);
	int             (*operation) (struct group *, void *, void *, void *);
	int             (*validate_public) (struct group *, void *);
};

/* Description of an Elliptic Group over GF(2**n) for Boot-Strapping */

struct ec2n_dscr {
	int             id;
	int             bits;	/* Key Bits provided by this group */
	char           *polynomial;	/* Irreducible polynomial */
	char           *gen_x;	/* X - Coord. of Generator */
	char           *a, *b;	/* Curve Parameters */
};

/* Description of F_p for Boot-Strapping */

struct modp_dscr {
	int             id;
	int             bits;	/* Key Bits provided by this group */
	char           *prime;	/* Prime */
	char           *gen;	/* Generator */
};

/* Prototypes */

void            group_init(void);
void            group_free(struct group *);
struct group   *group_get(u_int32_t);

void            ec2n_free(struct group *);
struct group   *ec2n_clone(struct group *, struct group *);
void            ec2n_init(struct group *);

void            modp_free(struct group *);
struct group   *modp_clone(struct group *, struct group *);
void            modp_init(struct group *);

#endif				/* _MATH_GROUP_H_ */
@


1.12
log
@Big spelling cleanup, no binary change.  From david@@
@
text
@d1 1
a1 1
/* $OpenBSD: math_group.h,v 1.11 2006/05/04 14:37:51 djm Exp $	 */
@


1.11
log
@check for degenerate Diffie-Hellman public exponents;
ok markus@@ hshoexer@@ deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: math_group.h,v 1.10 2004/04/15 18:39:26 deraadt Exp $	 */
d67 1
a67 1
	char           *polynomial;	/* Irreduceable polynomial */
@


1.10
log
@partial move to KNF.  More to come.  This has happened because there
are a raft of source code auditors who are willing to help improve this
code only if this is done, and hey, isakmpd does need our standard
auditing process.  ok ho hshoexer
@
text
@d1 1
a1 1
/* $OpenBSD: math_group.h,v 1.9 2004/04/07 22:45:49 ho Exp $	 */
d59 1
@


1.9
log
@-Wsign-compare nits. hshoexer@@ ok.
@
text
@d1 2
a2 2
/*	$OpenBSD: math_group.h,v 1.8 2003/12/15 10:06:42 hshoexer Exp $	*/
/*	$EOM: math_group.h,v 1.7 1999/04/17 23:20:40 niklas Exp $	*/
d37 4
a40 4
  MODP,				/* F_p, Z modulo a prime */
  EC2N,				/* Elliptic Curve over the Field GF(2**N) */
  ECP,				/* Elliptic Curve over the Field Z_p */
  NOTYET			/* Not yet assigned */
d48 11
a58 11
  enum groups type;
  int id;			/* Group ID */
  int bits;			/* Number of key bits provided by this group */
  void *group;
  void *a, *b, *c, *d;
  void *gen;			/* Group Generator */
  int (*getlen) (struct group *);
  void (*getraw) (struct group *, void *, u_int8_t *);
  int (*setraw) (struct group *, void *, u_int8_t *, int);
  int (*setrandom) (struct group *, void *);
  int (*operation) (struct group *, void *, void *, void *);
d64 5
a68 5
  int id;
  int bits;				/* Key Bits provided by this group */
  char *polynomial;			/* Irreduceable polynomial */
  char *gen_x;				/* X - Coord. of Generator */
  char *a, *b;				/* Curve Parameters */
d74 4
a77 4
  int id;
  int bits;				/* Key Bits provided by this group */
  char *prime;				/* Prime */
  char *gen;				/* Generator */
d82 11
a92 11
void group_init (void);
void group_free (struct group *);
struct group *group_get (u_int32_t);

void ec2n_free (struct group *);
struct group *ec2n_clone (struct group *, struct group *);
void ec2n_init (struct group *);

void modp_free (struct group *);
struct group *modp_clone (struct group *, struct group *);
void modp_init (struct group *);
d94 1
a94 1
#endif /* _MATH_GROUP_H_ */
@


1.8
log
@Support for groups modp2048, modp3072, modp4096, modp6144 and modp8192 (IDs 14
to 18).

ok ho@@
@
text
@d1 1
a1 1
/*	$OpenBSD: math_group.h,v 1.7 2003/06/03 14:28:16 ho Exp $	*/
d84 1
a84 1
struct group *group_get (int);
@


1.7
log
@Remove clauses 3 and 4. With approval from Niklas Hallqvist and
Niels Provos.
@
text
@d1 1
a1 1
/*	$OpenBSD: math_group.h,v 1.6 2002/09/06 21:36:52 deraadt Exp $	*/
d39 2
a40 1
  ECP				/* Elliptic Curve over the Field Z_p */
@


1.6
log
@remove Xr to photuris
@
text
@d1 1
a1 1
/*	$OpenBSD: math_group.h,v 1.5 1999/04/19 20:00:24 niklas Exp $	*/
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Ericsson Radio Systems.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.5
log
@./cookie.c: Merge with EOM 1.20
./dh.c: Merge with EOM 1.5
./hash.c: Merge with EOM 1.10
./math_group.h: Merge with EOM 1.7

Style.  alloc error reporting.  Math error propagation.  Allocate right
sizes.

1999 copyrights
@
text
@d1 1
a1 1
/*	$OpenBSD: math_group.h,v 1.4 1999/03/24 14:59:52 niklas Exp $	*/
d44 1
a44 1
  ECP,				/* Elliptic Curve over the Field Z_p */
@


1.4
log
@Merge with EOM 1.5
typo in multi-inclusion prot.
@
text
@d1 2
a2 2
/*	$OpenBSD: math_group.h,v 1.3 1998/11/17 11:10:17 niklas Exp $	*/
/*	$EOM: math_group.h,v 1.5 1999/03/06 12:40:12 niklas Exp $	*/
d6 1
d60 3
a62 3
  void (*setraw) (struct group *, void *, u_int8_t *, int);
  void (*setrandom) (struct group *, void *);
  void (*operation) (struct group *, void *, void *, void *);
@


1.3
log
@Add RCS Ids from the EOM repository
@
text
@d1 2
a2 2
/*	$OpenBSD: math_group.h,v 1.2 1998/11/15 00:44:01 niklas Exp $	*/
/*	$EOM: math_group.h,v 1.4 1998/07/18 22:08:58 provos Exp $	*/
d37 1
a37 1
#ifndef _MATH_GROUP_H
@


1.2
log
@openBSD RCS IDs
@
text
@d1 2
a2 1
/*	$OpenBSD: math_group.h,v 1.1.1.1 1998/11/15 00:03:49 niklas Exp $	*/
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$Id: math_group.h,v 1.4 1998/07/18 22:08:58 provos Exp $	*/
@


1.1.1.1
log
@Initial import of isakmpd, an IKE (ISAKMP/Oakley) implementation for the
OpenBSD IPSEC stack by me, Niklas Hallqvist and Niels Provos, funded by
Ericsson Radio Systems.  It is not yet complete or usable in a real scenario
but the missing pieces will soon be there.  The early commit is for people
who wants early access and who are not afraid of looking at source.
isakmpd interops with Cisco, Timestep, SSH & Pluto (Linux FreeS/WAN) so
far, so it is not that incomplete.  It is really mostly configuration that
is lacking.
@
text
@@
