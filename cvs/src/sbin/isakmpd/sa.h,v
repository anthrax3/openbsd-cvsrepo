head	1.52;
access;
symbols
	OPENBSD_6_0:1.52.0.6
	OPENBSD_6_0_BASE:1.52
	OPENBSD_5_9:1.52.0.2
	OPENBSD_5_9_BASE:1.52
	OPENBSD_5_8:1.52.0.4
	OPENBSD_5_8_BASE:1.52
	OPENBSD_5_7:1.51.0.2
	OPENBSD_5_7_BASE:1.51
	OPENBSD_5_6:1.50.0.6
	OPENBSD_5_6_BASE:1.50
	OPENBSD_5_5:1.50.0.4
	OPENBSD_5_5_BASE:1.50
	OPENBSD_5_4:1.49.0.28
	OPENBSD_5_4_BASE:1.49
	OPENBSD_5_3:1.49.0.26
	OPENBSD_5_3_BASE:1.49
	OPENBSD_5_2:1.49.0.24
	OPENBSD_5_2_BASE:1.49
	OPENBSD_5_1_BASE:1.49
	OPENBSD_5_1:1.49.0.22
	OPENBSD_5_0:1.49.0.20
	OPENBSD_5_0_BASE:1.49
	OPENBSD_4_9:1.49.0.18
	OPENBSD_4_9_BASE:1.49
	OPENBSD_4_8:1.49.0.16
	OPENBSD_4_8_BASE:1.49
	OPENBSD_4_7:1.49.0.12
	OPENBSD_4_7_BASE:1.49
	OPENBSD_4_6:1.49.0.14
	OPENBSD_4_6_BASE:1.49
	OPENBSD_4_5:1.49.0.10
	OPENBSD_4_5_BASE:1.49
	OPENBSD_4_4:1.49.0.8
	OPENBSD_4_4_BASE:1.49
	OPENBSD_4_3:1.49.0.6
	OPENBSD_4_3_BASE:1.49
	OPENBSD_4_2:1.49.0.4
	OPENBSD_4_2_BASE:1.49
	OPENBSD_4_1:1.49.0.2
	OPENBSD_4_1_BASE:1.49
	OPENBSD_4_0:1.48.0.2
	OPENBSD_4_0_BASE:1.48
	OPENBSD_3_9:1.47.0.2
	OPENBSD_3_9_BASE:1.47
	OPENBSD_3_8:1.46.0.2
	OPENBSD_3_8_BASE:1.46
	OPENBSD_3_7:1.43.0.2
	OPENBSD_3_7_BASE:1.43
	OPENBSD_3_6:1.41.0.2
	OPENBSD_3_6_BASE:1.41
	OPENBSD_3_5:1.34.0.2
	OPENBSD_3_5_BASE:1.34
	OPENBSD_3_4:1.32.0.2
	OPENBSD_3_4_BASE:1.32
	OPENBSD_3_3:1.29.0.4
	OPENBSD_3_3_BASE:1.29
	OPENBSD_3_2:1.29.0.2
	OPENBSD_3_2_BASE:1.29
	OPENBSD_3_1:1.27.0.2
	OPENBSD_3_1_BASE:1.27
	OPENBSD_3_0:1.24.0.2
	OPENBSD_3_0_BASE:1.24
	OPENBSD_2_9:1.21.0.2
	OPENBSD_2_9_BASE:1.21
	OPENBSD_2_8:1.18.0.2
	OPENBSD_2_8_BASE:1.18
	OPENBSD_2_7:1.15.0.2
	OPENBSD_2_7_BASE:1.15
	OPENBSD_2_6:1.14.0.2
	OPENBSD_2_6_BASE:1.14
	OPENBSD_2_5:1.10.0.2
	OPENBSD_2_5_BASE:1.10
	NIKLAS_981114:1.1.1.1
	NIKLAS:1.1.1;
locks; strict;
comment	@ * @;


1.52
date	2015.03.26.12.21.37;	author mikeb;	state Exp;
branches;
next	1.51;
commitid	GUv4gLlXi8Tx36WA;

1.51
date	2015.01.16.06.39.59;	author deraadt;	state Exp;
branches;
next	1.50;
commitid	Uu5nFG3wCl0LACBb;

1.50
date	2013.11.21.22.25.02;	author yasuoka;	state Exp;
branches;
next	1.49;

1.49
date	2006.11.24.13.52.14;	author reyk;	state Exp;
branches;
next	1.48;

1.48
date	2006.06.02.19.35.55;	author hshoexer;	state Exp;
branches;
next	1.47;

1.47
date	2005.09.23.14.44.03;	author hshoexer;	state Exp;
branches;
next	1.46;

1.46
date	2005.04.08.16.52.41;	author deraadt;	state Exp;
branches;
next	1.45;

1.45
date	2005.04.08.16.37.15;	author deraadt;	state Exp;
branches;
next	1.44;

1.44
date	2005.04.04.19.31.11;	author deraadt;	state Exp;
branches;
next	1.43;

1.43
date	2005.03.04.16.20.07;	author hshoexer;	state Exp;
branches;
next	1.42;

1.42
date	2004.12.08.16.08.10;	author markus;	state Exp;
branches;
next	1.41;

1.41
date	2004.08.10.15.59.10;	author ho;	state Exp;
branches;
next	1.40;

1.40
date	2004.06.21.23.27.10;	author ho;	state Exp;
branches;
next	1.39;

1.39
date	2004.06.21.13.09.00;	author ho;	state Exp;
branches;
next	1.38;

1.38
date	2004.06.20.15.20.07;	author ho;	state Exp;
branches;
next	1.37;

1.37
date	2004.05.23.18.17.56;	author hshoexer;	state Exp;
branches;
next	1.36;

1.36
date	2004.05.13.06.56.34;	author ho;	state Exp;
branches;
next	1.35;

1.35
date	2004.04.15.18.39.26;	author deraadt;	state Exp;
branches;
next	1.34;

1.34
date	2004.02.27.10.16.26;	author ho;	state Exp;
branches;
next	1.33;

1.33
date	2004.02.27.09.01.19;	author ho;	state Exp;
branches;
next	1.32;

1.32
date	2003.06.04.07.31.17;	author ho;	state Exp;
branches;
next	1.31;

1.31
date	2003.05.16.20.31.16;	author ho;	state Exp;
branches;
next	1.30;

1.30
date	2003.05.15.02.28.56;	author ho;	state Exp;
branches;
next	1.29;

1.29
date	2002.06.09.08.13.07;	author todd;	state Exp;
branches;
next	1.28;

1.28
date	2002.06.07.15.24.22;	author ho;	state Exp;
branches;
next	1.27;

1.27
date	2002.03.17.21.50.59;	author angelos;	state Exp;
branches;
next	1.26;

1.26
date	2002.03.17.21.48.06;	author angelos;	state Exp;
branches;
next	1.25;

1.25
date	2002.01.25.13.46.22;	author ho;	state Exp;
branches;
next	1.24;

1.24
date	2001.06.27.00.48.21;	author angelos;	state Exp;
branches;
next	1.23;

1.23
date	2001.06.12.21.50.36;	author niklas;	state Exp;
branches;
next	1.22;

1.22
date	2001.05.31.20.23.17;	author angelos;	state Exp;
branches;
next	1.21;

1.21
date	2001.04.24.07.27.37;	author niklas;	state Exp;
branches;
next	1.20;

1.20
date	2001.01.27.12.03.36;	author niklas;	state Exp;
branches;
next	1.19;

1.19
date	2001.01.14.23.40.01;	author angelos;	state Exp;
branches;
next	1.18;

1.18
date	2000.10.10.13.35.24;	author niklas;	state Exp;
branches
	1.18.2.1;
next	1.17;

1.17
date	2000.08.03.07.23.18;	author niklas;	state Exp;
branches;
next	1.16;

1.16
date	2000.06.08.20.50.07;	author niklas;	state Exp;
branches;
next	1.15;

1.15
date	2000.02.01.02.46.18;	author niklas;	state Exp;
branches;
next	1.14;

1.14
date	99.08.26.22.27.51;	author niklas;	state Exp;
branches;
next	1.13;

1.13
date	99.06.02.06.31.22;	author niklas;	state Exp;
branches;
next	1.12;

1.12
date	99.04.27.20.59.47;	author niklas;	state Exp;
branches;
next	1.11;

1.11
date	99.04.19.19.59.28;	author niklas;	state Exp;
branches;
next	1.10;

1.10
date	99.04.05.21.02.32;	author niklas;	state Exp;
branches;
next	1.9;

1.9
date	99.03.31.20.31.17;	author niklas;	state Exp;
branches;
next	1.8;

1.8
date	99.03.31.00.52.27;	author niklas;	state Exp;
branches;
next	1.7;

1.7
date	99.03.02.15.48.23;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	99.02.27.09.59.36;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	99.02.26.03.50.26;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	98.12.21.01.02.27;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	98.11.17.11.10.19;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	98.11.15.00.44.02;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	98.11.15.00.03.49;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.11.15.00.03.49;	author niklas;	state Exp;
branches;
next	;

1.18.2.1
date	2001.05.08.12.45.25;	author ho;	state Exp;
branches;
next	;


desc
@@


1.52
log
@Remove bits of unfinished IPsec proxy support.  DNS' KX records, anyone?
ok markus, hshoexer
@
text
@/* $OpenBSD: sa.h,v 1.51 2015/01/16 06:39:59 deraadt Exp $	 */
/* $EOM: sa.h,v 1.58 2000/10/10 12:39:01 provos Exp $	 */

/*
 * Copyright (c) 1998, 1999, 2001 Niklas Hallqvist.  All rights reserved.
 * Copyright (c) 1999, 2001 Angelos D. Keromytis.  All rights reserved.
 * Copyright (c) 2004 Håkan Olsson.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This code was written under funding by Ericsson Radio Systems.
 */

#ifndef _SA_H_
#define _SA_H_

#include <sys/types.h>
#include <sys/queue.h>
#include <sys/socket.h>

#include "isakmp.h"

/* Remove a SA if it has not been fully negotiated in this time.  */
#define SA_NEGOTIATION_MAX_TIME 120

struct doi;
struct event;
struct exchange;
struct keystate;
struct message;
struct payload;
struct proto_attr;
struct sa;
struct transport;

/* A protection suite consists of a set of protocol descriptions like this.  */
struct proto {
	/* Link to the next protocol in the suite.  */
	TAILQ_ENTRY(proto) link;

	/* The SA we belong to.  */
	struct sa      *sa;

	/* The protocol number as found in the proposal payload.  */
	u_int8_t        no;

	/* The protocol this SA is for.  */
	u_int8_t        proto;

	/*
	 * Security parameter index info.  Element 0 - outgoing, 1 -
	 * incoming.
	 */
	u_int8_t        spi_sz[2];
	u_int8_t       *spi[2];

	/*
	 * The chosen transform, only valid while the incoming SA payload that
	 * held it is available for duplicate testing.
         */
	struct payload *chosen;

	/* The chosen transform's ID.  */
	u_int8_t        id;

	/* DOI-specific data.  */
	void           *data;

	/* Proposal transforms data, for validating the responders selection. */
	TAILQ_HEAD(proto_attr_head, proto_attr) xfs;
	size_t          xf_cnt;
};

struct proto_attr {
	/* Link to next transform.  */
	TAILQ_ENTRY(proto_attr) next;

	/* Transform attribute data and size, suitable for attribute_map().  */
	u_int8_t       *attrs;
	size_t          len;
};

struct sa {
	/* Link to SAs with the same hash value.  */
	LIST_ENTRY(sa) link;

	/*
	 * When several SA's are being negotiated in one message we connect
	 * them through this link.
         */
	TAILQ_ENTRY(sa) next;

	/*
	 * A name of the major policy deciding offers and acceptable
	 * proposals.
	 */
	char           *name;

	/* The transport this SA got negotiated over.  */
	struct transport *transport;

	/* Both initiator and responder cookies.  */
	u_int8_t        cookies[ISAKMP_HDR_COOKIES_LEN];

	/* The message ID signifying non-ISAKMP SAs.  */
	u_int8_t        message_id[ISAKMP_HDR_MESSAGE_ID_LEN];

	/* The protection suite chosen.  */
	TAILQ_HEAD(proto_head, proto) protos;

	/* The exchange type we should use when rekeying.  */
	u_int8_t        exch_type;

	/* Phase is 1 for ISAKMP SAs, and 2 for application ones.  */
	u_int8_t        phase;

	/* A reference counter for this structure.  */
	u_int16_t       refcnt;

	/* Various flags, look below for descriptions.  */
	u_int32_t       flags;

	/* The DOI that is to handle DOI-specific issues for this SA.  */
	struct doi     *doi;

	/*
	 * Crypto info needed to encrypt/decrypt packets protected by this
	 * SA.
	 */
	struct keystate *keystate;

	/* IDs from Phase 1 */
	u_int8_t       *id_i;
	size_t          id_i_len;
	u_int8_t       *id_r;
	size_t          id_r_len;

	/* Set if we were the initiator of the SA/exchange in Phase 1 */
	int             initiator;

	/* Policy session ID, where applicable, copied over from the exchange */
	int             policy_id;

	/*
	 * The key used to authenticate phase 1, in printable format, used
	 * only by KeyNote.
         */
	char           *keynote_key;

	/*
	 * Certificates or other information from Phase 1; these are copied
	 * from the exchange, so look at exchange.h for an explanation of
	 * their use.
         */
	int             recv_certtype, recv_keytype;
	/* Certificate received from peer, native format.  */
	void           *recv_cert;
	/* Key peer used to authenticate, native format.  */
	void           *recv_key;

	/*
	 * Certificates or other information we used to authenticate to the
	 * peer, Phase 1.
         */
	int             sent_certtype;
	/* Certificate (to be) sent to peer, native format.  */
	void           *sent_cert;

	/* DOI-specific opaque data.  */
	void           *data;

	/* Lifetime data.  */
	u_int64_t       seconds;
	u_int64_t       kilobytes;

	/* ACQUIRE sequence number */
	u_int32_t       seq;

	/* The events that will occur when an SA has timed out.  */
	struct event   *soft_death;
	struct event   *death;

	struct event   *nat_t_keepalive;

	/* IKE DPD (RFC3706) message sequence number.  */
	u_int32_t	dpd_seq;	/* sent */
	u_int32_t	dpd_rseq;	/* received */
	u_int32_t	dpd_failcount;	/* # of subsequent failures */
	u_int32_t	dpd_rdupcount;	/* # of subsequent duplicates */
	struct event   *dpd_event;	/* time of next event */

	/* The add a pf tag to packets matching the established SA. */
	char           *tag;
};

/* This SA is alive.  */
#define SA_FLAG_READY		0x01

/* Renegotiate the SA at each expiry.  */
#define SA_FLAG_STAYALIVE	0x02

/* Establish the SA when it is needed.  */
#define SA_FLAG_ONDEMAND	0x04

/*
 * This SA has been replaced by another newer one or the SA for another
 * client behind same NAT.
 */
#define SA_FLAG_REPLACED	0x08

/* This SA has seen a soft timeout and wants to be renegotiated on use.  */
#define SA_FLAG_FADING		0x10

/* This SA should always be actively renegotiated (with us as initiator).  */
#define SA_FLAG_ACTIVE_ONLY	0x20

/* This SA flag is a placeholder for a TRANSACTION exchange "SA flag".  */
#define SA_FLAG_IKECFG		0x40

/* This SA flag indicates if we should do DPD with the phase 1 SA peer.  */
#define SA_FLAG_DPD		0x80

/* NAT-T encapsulation state. Kept in isakmp_sa for the new p2 exchange.  */
#define SA_FLAG_NAT_T_ENABLE	0x100
#define SA_FLAG_NAT_T_KEEPALIVE	0x200

extern void     proto_free(struct proto * proto);
extern int	sa_add_transform(struct sa *, struct payload *, int,
		    struct proto **);
extern int      sa_create(struct exchange *, struct transport *);
extern int      sa_enter(struct sa *);
extern void     sa_delete(struct sa *, int);
extern void     sa_teardown_all(void);
extern struct sa *sa_find(int (*) (struct sa *, void *), void *);
extern int      sa_flag(char *);
extern void     sa_free(struct sa *);
extern void     sa_init(void);
extern void     sa_reinit(void);
extern struct sa *sa_isakmp_lookup_by_peer(struct sockaddr *, socklen_t);
extern void     sa_isakmp_upgrade(struct message *);
extern struct sa *sa_lookup(u_int8_t *, u_int8_t *);
extern struct sa *sa_lookup_by_peer(struct sockaddr *, socklen_t, int);
extern struct sa *sa_lookup_by_header(u_int8_t *, int);
extern struct sa *sa_lookup_by_name(char *, int);
extern struct sa *sa_lookup_from_icookie(u_int8_t *);
extern struct sa *sa_lookup_isakmp_sa(struct sockaddr *, u_int8_t *);
extern void     sa_mark_replaced(struct sa *);
extern void     sa_replace(struct sa *, struct sa *);
extern void     sa_reference(struct sa *);
extern void     sa_release(struct sa *);
extern void     sa_remove(struct sa *);
extern void     sa_report(void);
extern void     sa_dump(int, int, char *, struct sa *);
extern void     sa_report_all(FILE *);
extern int      sa_setup_expirations(struct sa *);

/*
 * This structure contains most of the data of the in-kernel SA.
 * Currently only used to collect the tdb_last_used time for DPD.
 */
struct sa_kinfo {
	u_int32_t	flags;		/* /usr/include/netinet/ip_ipsp.h */

	u_int32_t	exp_allocations;
	u_int32_t	soft_allocations;
	u_int32_t	cur_allocations;

	u_int64_t	exp_bytes;
	u_int64_t	soft_bytes;
	u_int64_t	cur_bytes;

	u_int64_t	exp_timeout;
	u_int64_t	soft_timeout;

	u_int64_t	first_use;
	u_int64_t	established;
	u_int64_t	soft_first_use;
	u_int64_t	exp_first_use;

	u_int64_t	last_used;

	struct sockaddr_storage	dst;
	struct sockaddr_storage	src;

	u_int32_t	spi;
	u_int16_t	udpencap_port;
	u_int8_t	wnd;
};

#endif				/* _SA_H_ */
@


1.51
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/* $OpenBSD: sa.h,v 1.50 2013/11/21 22:25:02 yasuoka Exp $	 */
a303 1
	struct sockaddr_storage	proxy;
@


1.50
log
@Keep the flow until last IPsec SA is deleted, if the flow is shared by
multiple IPsec SAs in NAT-T case.

This fixes a problem that L2TP/IPsec connections are disconnected
improper in case multiple Windows clients are connected from behind
one NAT.

ok markus
@
text
@d1 1
a1 1
/* $OpenBSD: sa.h,v 1.49 2006/11/24 13:52:14 reyk Exp $	 */
a36 1
#include <sys/param.h>
@


1.49
log
@add support to tag ipsec traffic belonging to specific IKE-initiated
phase 2 traffic. this allows policy-based filtering of encrypted and
unencrypted ipsec traffic with pf(4). see ipsec.conf(5) and
isakmpd.conf(5) for details and examples.

this is work in progress and still needs some testing and feedback,
but it is safe to put it in now.

ok hshoexer@@
@
text
@d1 1
a1 1
/* $OpenBSD: sa.h,v 1.48 2006/06/02 19:35:55 hshoexer Exp $	 */
d226 4
a229 1
/* This SA has been replaced by another newer one.  */
d269 1
@


1.48
log
@Big spelling cleanup, no binary change.  From david@@
@
text
@d1 1
a1 1
/* $OpenBSD: sa.h,v 1.47 2005/09/23 14:44:03 hshoexer Exp $	 */
d212 3
@


1.47
log
@Provide UI commands to delete phase 1 SAs.

Looks good mortiz@@
@
text
@d1 1
a1 1
/* $OpenBSD: sa.h,v 1.46 2005/04/08 16:52:41 deraadt Exp $	 */
d208 1
a208 1
	u_int32_t	dpd_rseq;	/* recieved */
@


1.46
log
@always enable aggressive, dpd, and isakmp_cfg
@
text
@d1 1
a1 1
/* $OpenBSD: sa.h,v 1.45 2005/04/08 16:37:15 deraadt Exp $	 */
d257 1
a257 1
extern struct sa *sa_lookup_by_peer(struct sockaddr *, socklen_t);
@


1.45
log
@nat-traversal always
@
text
@d1 1
a1 1
/* $OpenBSD: sa.h,v 1.44 2005/04/04 19:31:11 deraadt Exp $	 */
a205 1
#if defined (USE_DPD)
a211 1
#endif
@


1.44
log
@spacing; ok cloder
@
text
@d1 1
a1 1
/* $OpenBSD: sa.h,v 1.43 2005/03/04 16:20:07 hshoexer Exp $	 */
a203 1
#if defined (USE_NAT_TRAVERSAL)
a204 1
#endif
@


1.43
log
@remove unused stuff.

ok ho@@
@
text
@d1 1
a1 1
/* $OpenBSD: sa.h,v 1.42 2004/12/08 16:08:10 markus Exp $	 */
d292 1
a292 1
	
@


1.42
log
@1. allow up to DPD_RETRANS_MAX retransmitted R_U_THERE messages.
2. reset dpd_failcount when switching to DPD_TIMER_NORMAL.
3. ignore DPD timeouts on SAs that are marked SA_FLAG_REPLACED.
ok hshoexer, ho
@
text
@d1 1
a1 1
/* $OpenBSD: sa.h,v 1.41 2004/08/10 15:59:10 ho Exp $	 */
a46 1
struct crypto_xf;
d91 1
a91 1
	                TAILQ_HEAD(proto_attr_head, proto_attr) xfs;
a150 2
	struct crypto_xf *crypto;
	int             key_length;
a298 1
	u_int64_t	last_marked;
a304 1
	u_int32_t	rpl;
a305 4
	u_int16_t	amxkeylen;
	u_int16_t	emxkeylen;
	u_int16_t	ivlen;
	u_int8_t	sproto;
a306 1
	u_int8_t	satype;
@


1.41
log
@Better implementation of the Dead Peer Detection protocol, RFC 3706.
hshoexer@@ ok.
@
text
@d1 1
a1 1
/* $OpenBSD: sa.h,v 1.40 2004/06/21 23:27:10 ho Exp $	 */
d216 1
@


1.40
log
@Implement NAT-T keepalive messages.
@
text
@d1 1
a1 1
/* $OpenBSD: sa.h,v 1.39 2004/06/21 13:09:00 ho Exp $	 */
d215 2
a216 1
	struct event   *dpd_nextev;	/* time of next event */
d276 42
@


1.39
log
@Port floating (500->4500) for p1 and p2 exchanges.
@
text
@d1 1
a1 1
/* $OpenBSD: sa.h,v 1.38 2004/06/20 15:20:07 ho Exp $	 */
d206 4
@


1.38
log
@A start towards Dead Peer Detection (DPD) support, as specified in RFC 3706
@
text
@d1 1
a1 1
/* $OpenBSD: sa.h,v 1.37 2004/05/23 18:17:56 hshoexer Exp $	 */
d238 4
@


1.37
log
@More KNF.  Mainly spaces and line-wraps, no binary change.

ok ho@@
@
text
@d1 1
a1 1
/* $OpenBSD: sa.h,v 1.36 2004/05/13 06:56:34 ho Exp $	 */
d206 7
d235 3
@


1.36
log
@Extensions to the FIFO interface:
"C get [section]:tag" fetches a configuration value.
"C add [section]:tag=value" adds 'value' to a list, typically for the
[Phase 2]:Connections tag. FIFO "S" command destination file changed.
Various KNF cleanups. hshoexer@@ ok.
@
text
@d1 1
a1 1
/* $OpenBSD: sa.h,v 1.35 2004/04/15 18:39:26 deraadt Exp $	 */
d80 2
a81 2
	 * The chosen transform, only valid while the incoming SA payload that held
	 * it is available for duplicate testing.
d91 1
a91 1
	/* Proposal transforms data, for validating the responders selection.  */
d110 2
a111 2
	 * When several SA's are being negotiated in one message we connect them
	 * through this link.
d131 1
a131 1
	                TAILQ_HEAD(proto_head, proto) protos;
d169 2
a170 2
	 * The key used to authenticate phase 1, in printable format, used only by
	 * KeyNote.
d175 3
a177 2
	 * Certificates or other information from Phase 1; these are copied from the
	 * exchange, so look at exchange.h for an explanation of their use.
d186 2
a187 2
	 * Certificates or other information we used to authenticate to the peer,
	 * Phase 1.
d230 2
a231 3
extern int
sa_add_transform(struct sa *, struct payload *, int,
		 struct proto **);
@


1.35
log
@partial move to KNF.  More to come.  This has happened because there
are a raft of source code auditors who are willing to help improve this
code only if this is done, and hey, isakmpd does need our standard
auditing process.  ok ho hshoexer
@
text
@d1 1
a1 1
/* $OpenBSD: sa.h,v 1.34 2004/02/27 10:16:26 ho Exp $	 */
a227 3
/* Outfile for detailed SA information. */
#define SA_FILE "/var/run/isakmpd_sa"

d255 1
a255 1
extern void     sa_report_all(void);
@


1.34
log
@(C)-2004
@
text
@d1 2
a2 2
/*	$OpenBSD: sa.h,v 1.33 2004/02/27 09:01:19 ho Exp $	*/
/*	$EOM: sa.h,v 1.58 2000/10/10 12:39:01 provos Exp $	*/
d60 2
a61 2
  /* Link to the next protocol in the suite.  */
  TAILQ_ENTRY (proto) link;
d63 2
a64 2
  /* The SA we belong to.  */
  struct sa *sa;
d66 2
a67 2
  /* The protocol number as found in the proposal payload.  */
  u_int8_t no;
d69 25
a93 22
  /* The protocol this SA is for.  */
  u_int8_t proto;

  /* Security parameter index info.  Element 0 - outgoing, 1 - incoming.  */
  u_int8_t spi_sz[2];
  u_int8_t *spi[2];

  /*
   * The chosen transform, only valid while the incoming SA payload that held
   * it is available for duplicate testing.
   */
  struct payload *chosen;

  /* The chosen transform's ID.  */
  u_int8_t id;

  /* DOI-specific data.  */
  void *data;

  /* Proposal transforms data, for validating the responders selection.  */
  TAILQ_HEAD (proto_attr_head, proto_attr) xfs;
  size_t xf_cnt;
d97 2
a98 2
  /* Link to next transform.  */
  TAILQ_ENTRY (proto_attr) next;
d100 3
a102 3
  /* Transform attribute data and size, suitable for attribute_map().  */
  u_int8_t *attrs;
  size_t len;
d106 2
a107 2
  /* Link to SAs with the same hash value.  */
  LIST_ENTRY (sa) link;
d109 96
a204 90
  /*
   * When several SA's are being negotiated in one message we connect them
   * through this link.
   */
  TAILQ_ENTRY (sa) next;

  /* A name of the major policy deciding offers and acceptable proposals.  */
  char *name;

  /* The transport this SA got negotiated over.  */
  struct transport *transport;

  /* Both initiator and responder cookies.  */
  u_int8_t cookies[ISAKMP_HDR_COOKIES_LEN];

  /* The message ID signifying non-ISAKMP SAs.  */
  u_int8_t message_id[ISAKMP_HDR_MESSAGE_ID_LEN];

  /* The protection suite chosen.  */
  TAILQ_HEAD (proto_head, proto) protos;

  /* The exchange type we should use when rekeying.  */
  u_int8_t exch_type;

  /* Phase is 1 for ISAKMP SAs, and 2 for application ones.  */
  u_int8_t phase;

  /* A reference counter for this structure.  */
  u_int16_t refcnt;

  /* Various flags, look below for descriptions.  */
  u_int32_t flags;

  /* The DOI that is to handle DOI-specific issues for this SA.  */
  struct doi *doi;

  /* Crypto info needed to encrypt/decrypt packets protected by this SA.  */
  struct crypto_xf *crypto;
  int key_length;
  struct keystate *keystate;

  /* IDs from Phase 1 */
  u_int8_t *id_i;
  size_t id_i_len;
  u_int8_t *id_r;
  size_t id_r_len;

  /* Set if we were the initiator of the SA/exchange in Phase 1 */
  int initiator;

  /* Policy session ID, where applicable, copied over from the exchange */
  int policy_id;

  /*
   * The key used to authenticate phase 1, in printable format, used only by
   * KeyNote.
   */
  char *keynote_key;

  /*
   * Certificates or other information from Phase 1; these are copied from the
   * exchange, so look at exchange.h for an explanation of their use.
   */
  int recv_certtype, recv_keytype;
  /* Certificate received from peer, native format.  */
  void *recv_cert;
  /* Key peer used to authenticate, native format.  */
  void *recv_key;

  /*
   * Certificates or other information we used to authenticate to the peer,
   * Phase 1.
   */
  int sent_certtype;
  /* Certificate (to be) sent to peer, native format.  */
  void *sent_cert;

  /* DOI-specific opaque data.  */
  void *data;

  /* Lifetime data.  */
  u_int64_t seconds;
  u_int64_t kilobytes;

  /* ACQUIRE sequence number */
  u_int32_t seq;

  /* The events that will occur when an SA has timed out.  */
  struct event *soft_death;
  struct event *death;
d231 30
a260 29
extern void proto_free (struct proto *proto);
extern int sa_add_transform (struct sa *, struct payload *, int,
			     struct proto **);
extern int sa_create (struct exchange *, struct transport *);
extern int sa_enter (struct sa *);
extern void sa_delete (struct sa *, int);
extern void sa_teardown_all (void);
extern struct sa *sa_find (int (*) (struct sa *, void *), void *);
extern int sa_flag (char *);
extern void sa_free (struct sa *);
extern void sa_init (void);
extern void sa_reinit (void);
extern struct sa *sa_isakmp_lookup_by_peer (struct sockaddr *, socklen_t);
extern void sa_isakmp_upgrade (struct message *);
extern struct sa *sa_lookup (u_int8_t *, u_int8_t *);
extern struct sa *sa_lookup_by_peer (struct sockaddr *, socklen_t);
extern struct sa *sa_lookup_by_header (u_int8_t *, int);
extern struct sa *sa_lookup_by_name (char *, int);
extern struct sa *sa_lookup_from_icookie (u_int8_t *);
extern struct sa *sa_lookup_isakmp_sa (struct sockaddr *, u_int8_t *);
extern void sa_mark_replaced (struct sa *);
extern void sa_reference (struct sa *);
extern void sa_release (struct sa *);
extern void sa_remove (struct sa *);
extern void sa_report (void);
extern void sa_dump (int, int, char *, struct sa *);
extern void sa_report_all (void);
extern int sa_setup_expirations (struct sa *);
#endif /* _SA_H_ */
@


1.33
log
@Follow RFC 2408 more closely regarding how to better check the proposal
returned by the other peer (the responder). Some implementations (notably
the Cisco PIX) does not follow a SHOULD in section 4.2 of the RFC. With
certain proposal combinations this caused us to setup the wrong SA
resulting in us being unable to process incoming IPsec traffic (over this
tunnel).

Tested against a number of different IKE implementations.
hshoexer@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: sa.h,v 1.32 2003/06/04 07:31:17 ho Exp $	*/
d7 1
@


1.32
log
@Remove the rest of clauses 3 and 4. Approved by Niklas Hallqvist, Angelos
D. Keromytis and Niels Provos.
@
text
@d1 1
a1 1
/*	$OpenBSD: sa.h,v 1.31 2003/05/16 20:31:16 ho Exp $	*/
d53 1
d86 13
@


1.31
log
@If the "Renegotiate-on-HUP" tag is defined in the [General] section, a
HUP signal (or "R" to the FIFO) will also renegotiate all Phase 2 SAs,
i.e all connections.
ok niklas@@, tested and ok kjell@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: sa.h,v 1.30 2003/05/15 02:28:56 ho Exp $	*/
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Ericsson Radio Systems.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.30
log
@Cleanup. Do not store the private key in either the exchange or sa structs.
@
text
@d1 1
a1 1
/*	$OpenBSD: sa.h,v 1.29 2002/06/09 08:13:07 todd Exp $	*/
d223 1
@


1.29
log
@rm trailing whitespace
@
text
@d1 1
a1 1
/*	$OpenBSD: sa.h,v 1.28 2002/06/07 15:24:22 ho Exp $	*/
d169 1
a169 1
  int sent_certtype, sent_keytype;
a171 2
  /* Key we'll use to authenticate to peer, native format.  */
  void *sent_key;
@


1.28
log
@Add 'ikecfg' as a valid Flags= value.
@
text
@d1 1
a1 1
/*	$OpenBSD: sa.h,v 1.27 2002/03/17 21:50:59 angelos Exp $	*/
d71 1
a71 1
  
d158 1
a158 1
   */  
@


1.27
log
@Move SA_FILE definition to sa.h.
@
text
@d1 1
a1 1
/*	$OpenBSD: sa.h,v 1.26 2002/03/17 21:48:06 angelos Exp $	*/
d207 3
@


1.26
log
@Add 'T' and 'S' commands (for tearing-down and reporting all Phase 2
SAs), from bdallen@@nps.navy.mil
@
text
@d1 1
a1 1
/*	$OpenBSD: sa.h,v 1.25 2002/01/25 13:46:22 ho Exp $	*/
d207 3
@


1.25
log
@no static for sa_dump, explicit log cls/level
@
text
@d1 1
a1 1
/*	$OpenBSD: sa.h,v 1.24 2001/06/27 00:48:21 angelos Exp $	*/
d214 1
d233 1
@


1.24
log
@Keep track of the ACQUIRE sequence number, and pass it to the kernel
along with the ADD message.
@
text
@d1 1
a1 1
/*	$OpenBSD: sa.h,v 1.23 2001/06/12 21:50:36 niklas Exp $	*/
d231 1
@


1.23
log
@comment style
@
text
@d1 1
a1 1
/*	$OpenBSD: sa.h,v 1.22 2001/05/31 20:23:17 angelos Exp $	*/
d181 3
@


1.22
log
@Get rid of recv_certlen, add sent_* and keynote_key fields,
explanations added.
@
text
@d1 1
a1 1
/*	$OpenBSD: sa.h,v 1.21 2001/04/24 07:27:37 niklas Exp $	*/
d149 5
a153 2
  /* Used only by KeyNote, to store the key used to authenticate Phase 1 */
  char *keynote_key; /* printable format */
d156 1
a156 1
   * Certs or other information from Phase 1; these are copied from the
d160 4
a163 2
  void *recv_cert; /* Certificate received from peer, native format */
  void *recv_key; /* Key peer used to authenticate, native format */
d165 4
a168 1
  /* Certs or other information we used to authenticate to the peer, Phase 1 */
d170 4
a173 2
  void *sent_cert; /* Certificate (to be) sent to peer, native format */
  void *sent_key; /* Key we'll use to authenticate to peer, native format */
@


1.21
log
@Correct SA refcounting.  Fixes a bug where isakmpd could die when a peer was
discovered to have rebooted, and old now invalid SAs had to be garbage-
collected.
@
text
@d1 1
a1 1
/*	$OpenBSD: sa.h,v 1.20 2001/01/27 12:03:36 niklas Exp $	*/
d149 16
a164 5
  /* Certs or other information from Phase 1 */  
  int recv_certtype, recv_certlen, recv_certid;
  void *recv_cert;
  void *recv_key; /* Key used to authenticate, in KeyNote */
    
@


1.20
log
@(c) 2001
@
text
@d1 1
a1 1
/*	$OpenBSD: sa.h,v 1.19 2001/01/14 23:40:01 angelos Exp $	*/
d5 1
a5 1
 * Copyright (c) 1998, 1999 Niklas Hallqvist.  All rights reserved.
a192 1
extern void sa_free_aux (struct sa *);
d205 1
@


1.19
log
@Handling of Phase 1 DELETE and Phase 2 INVALID_SPI messages
(newsham@@lava.net)
@
text
@d1 1
a1 1
/*	$OpenBSD: sa.h,v 1.18 2000/10/10 13:35:24 niklas Exp $	*/
d6 1
a6 1
 * Copyright (c) 1999 Angelos D. Keromytis.  All rights reserved.
@


1.18
log
@Merge with EOM 1.58

author: provos
increase size of refcnt. okay niklas@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sa.h,v 1.17 2000/08/03 07:23:18 niklas Exp $	*/
d202 1
a207 1

@


1.18.2.1
log
@Pull in isakmpd from 2.9 to 2.8 branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: sa.h,v 1.21 2001/04/24 07:27:37 niklas Exp $	*/
d5 2
a6 2
 * Copyright (c) 1998, 1999, 2001 Niklas Hallqvist.  All rights reserved.
 * Copyright (c) 1999, 2001 Angelos D. Keromytis.  All rights reserved.
d193 1
a201 1
extern struct sa *sa_lookup_isakmp_sa (struct sockaddr *, u_int8_t *);
a204 1
extern void sa_remove (struct sa *);
d207 1
@


1.17
log
@Merge with EOM 1.57

author: angelos
Add sa_enter() prototype.
@
text
@d1 2
a2 2
/*	$OpenBSD: sa.h,v 1.16 2000/06/08 20:50:07 niklas Exp $	*/
/*	$EOM: sa.h,v 1.57 2000/07/12 20:50:49 angelos Exp $	*/
d124 1
a124 1
  u_int8_t refcnt;
@


1.16
log
@Merge with EOM 1.56

author: angelos
Allow exchange of KeyNote credentials over IKE. Multiple credentials
may be passed in a single CERT payload. KeyNote is used if a
directory named as the local ID we use in an exchange exists in the
KeyNote directory (default: /etc/isakmpd/keynote/). Note that
asymmetric credentials are possible (use KeyNote in one direction and
X509 in the other); such authentication is envisioned to be the most
common: the clients will use KeyNote credentials to authenticate and
authorize with a server, whilst the server will just provide an X509
certificate proving its binding to the IP address or ID.

Totally asymmetric authentication (e.g., shared key in one direction,
RSA in the other) is not supported by the IKE protocol.

author: angelos
Begin support for KeyNote credentials exchanged.
@
text
@d1 2
a2 2
/*	$OpenBSD: sa.h,v 1.15 2000/02/01 02:46:18 niklas Exp $	*/
/*	$EOM: sa.h,v 1.56 2000/05/19 05:47:53 angelos Exp $	*/
d188 1
@


1.15
log
@apps/certpatch/certpatch.8: Merge with EOM 1.4
apps/certpatch/certpatch.c: Merge with EOM 1.6
exchange.c: Merge with EOM 1.114
ike_quick_mode.c: Merge with EOM 1.110
ike_phase_1.c: Merge with EOM 1.16
ike_auth.c: Merge with EOM 1.41
ike_aggressive.c: Merge with EOM 1.4
libcrypto.c: Merge with EOM 1.10
libcrypto.h: Merge with EOM 1.10
isakmpd.8: Merge with EOM 1.19
isakmpd.c: Merge with EOM 1.42
ipsec.h: Merge with EOM 1.40
init.c: Merge with EOM 1.22
message.c: Merge with EOM 1.143
message.h: Merge with EOM 1.49
sa.c: Merge with EOM 1.98
sa.h: Merge with EOM 1.54
policy.c: Merge with EOM 1.14
pf_key_v2.c: Merge with EOM 1.36
x509.c: Merge with EOM 1.32
x509.h: Merge with EOM 1.9
udp.c: Merge with EOM 1.46

author: niklas
Angelos copyrights
@
text
@d1 2
a2 2
/*	$OpenBSD: sa.h,v 1.14 1999/08/26 22:27:51 niklas Exp $	*/
/*	$EOM: sa.h,v 1.54 2000/01/31 22:33:49 niklas Exp $	*/
d146 3
d150 1
a150 1
  int recv_certtype, recv_certlen;
d152 1
@


1.14
log
@ike_phase_1.c: Merge with EOM 1.8
message.c: Merge with EOM 1.135
message.h: Merge with EOM 1.48
sa.c: Merge with EOM 1.97
sa.h: Merge with EOM 1.53

author: angelos
Complete policy work; tested for the shared-key case. Documentation needed.
@
text
@d1 2
a2 2
/*	$OpenBSD: sa.h,v 1.13 1999/06/02 06:31:22 niklas Exp $	*/
/*	$EOM: sa.h,v 1.53 1999/08/18 00:44:57 angelos Exp $	*/
d6 1
@


1.13
log
@Merge with EOM 1.52

author: ho
New flag
@
text
@d1 2
a2 2
/*	$OpenBSD: sa.h,v 1.12 1999/04/27 20:59:47 niklas Exp $	*/
/*	$EOM: sa.h,v 1.52 1999/05/29 15:11:07 ho Exp $	*/
d136 13
@


1.12
log
@sa.c: Merge with EOM 1.88
sa.h: Merge with EOM 1.51

author: niklas
Handle leftover payloads, esp INITIAL CONTACT notifications.
Factor out SA expiration setting.  Add commentary.

author: ho
Keep track of trailing retransmissions by keeping exchanges around longer.
Removed references to sa->last_sent_in_setup, use last_sent and
last_received in exchange instead. Free setup exchanges by expiration only.

author: ho
Backout last change. (Go with exchange directly instead of sa->msg)

author: ho
Handle phase 2 late retransmissions.
@
text
@d1 2
a2 2
/*	$OpenBSD: sa.h,v 1.11 1999/04/19 19:59:28 niklas Exp $	*/
/*	$EOM: sa.h,v 1.51 1999/04/27 09:42:30 niklas Exp $	*/
d162 3
@


1.11
log
@./sa.h: Merge with EOM 1.47

Remove SA_FLAG_REPLACED settings from various parts in preparation of a
grand unified setting in exchange_finalize.  Fix sa_mark_replaced to not
release a referance to the sa, and adjust the API as it won't get called
as a finalize func anymore.
@
text
@d1 2
a2 2
/*	$OpenBSD: sa.h,v 1.10 1999/04/05 21:02:32 niklas Exp $	*/
/*	$EOM: sa.h,v 1.47 1999/04/13 14:22:58 niklas Exp $	*/
d104 1
a104 1
  /* What transport does this SA denote (ISAKMP SA only).  */
a124 3
  /* Save last message from setup, which can be retransmitted for dups */
  struct message *last_sent_in_setup;
  
d173 1
a173 1
extern struct sa *sa_isakmp_lookup_by_peer (struct sockaddr *, size_t addr);
d176 1
a182 2
extern void sa_soft_expire (struct sa *);
extern void sa_hard_expire (struct sa *);
d184 1
@


1.10
log
@Merge with EOM 1.46
New finalize API.  Free keystate.

1999 copyrights
@
text
@d1 2
a2 2
/*	$OpenBSD: sa.h,v 1.9 1999/03/31 20:31:17 niklas Exp $	*/
/*	$EOM: sa.h,v 1.46 1999/04/05 08:09:22 niklas Exp $	*/
d182 1
a182 1
extern void sa_mark_replaced (struct sa *, int);
@


1.9
log
@Merge with EOM 1.44
Add refcounting to SA's.  Make phase 1 expirations be able to cause
renegotiations if configured to.
@
text
@d1 2
a2 2
/*	$OpenBSD: sa.h,v 1.8 1999/03/31 00:52:27 niklas Exp $	*/
/*	$EOM: sa.h,v 1.44 1999/03/31 20:19:57 niklas Exp $	*/
d5 1
a5 1
 * Copyright (c) 1998 Niklas Hallqvist.  All rights reserved.
d182 1
a182 1
extern void sa_mark_replaced (struct sa *);
@


1.8
log
@Merge with EOM 1.43
the SA replace flag
@
text
@d1 2
a2 2
/*	$OpenBSD: sa.h,v 1.7 1999/03/02 15:48:23 niklas Exp $	*/
/*	$EOM: sa.h,v 1.43 1999/03/30 21:46:19 niklas Exp $	*/
d122 3
d152 1
a152 1
#define SA_FLAG_READY		1
d155 1
a155 1
#define SA_FLAG_STAYALIVE	2
d158 1
a158 1
#define SA_FLAG_ONDEMAND	4
d161 4
a164 1
#define SA_FLAG_REPLACED	8
d183 2
@


1.7
log
@sa.c: Merge with EOM 1.67
Add SA attributes, specifically stayalive

sa.h: Merge with EOM 1.42
Add SA attributes, specifically stayalive

pf_encap.c: Merge with EOM 1.46
Add SA attributes, specifically stayalive

exchange.c: Merge with EOM 1.65
Add SA attributes, specifically stayalive
@
text
@d1 2
a2 2
/*	$OpenBSD: sa.h,v 1.6 1999/02/27 09:59:36 niklas Exp $	*/
/*	$EOM: sa.h,v 1.42 1999/03/02 15:42:58 niklas Exp $	*/
d157 3
d176 1
@


1.6
log
@ipsec.c: Merge with EOM 1.83
Only accept IPsec SAs when searching for such

sa.h: Merge with EOM 1.41
Stayalive connections as a default for now, init pf_encap_socket

pf_encap.c: Merge with EOM 1.45
Stayalive connections as a default for now, init pf_encap_socket
@
text
@d1 2
a2 2
/*	$OpenBSD: sa.h,v 1.5 1999/02/26 03:50:26 niklas Exp $	*/
/*	$EOM: sa.h,v 1.41 1999/02/26 14:41:32 niklas Exp $	*/
d154 3
d163 1
@


1.5
log
@Merge from the Ericsson repository
| revision 1.40
| date: 1999/02/14 00:11:40;  author: niklas;  state: Exp;  lines: +7 -4
| Generalize how to find SAs with given attributes.  Do SA expiration both hard
| and soft, and do not rekey automatically anymore.  We will revisit this by
| adding some kind of policy what to do at these times.  Improve commentary
| ----------------------------
@
text
@d1 2
a2 2
/*	$OpenBSD: sa.h,v 1.4 1998/12/21 01:02:27 niklas Exp $	*/
/*	$EOM: sa.h,v 1.40 1999/02/14 00:11:40 niklas Exp $	*/
d149 4
a152 1
#define SA_FLAG_READY	1
@


1.4
log
@Last months worth of work on isakmpd, lots done
@
text
@d1 2
a2 2
/*	$OpenBSD: sa.h,v 1.3 1998/11/17 11:10:19 niklas Exp $	*/
/*	$EOM: sa.h,v 1.39 1998/12/15 16:58:47 niklas Exp $	*/
d74 1
a74 1
  /* Security parameter index info.  Element 0 - responder, 1 - initiator.  */
d143 2
a144 1
  /* The event that will occur when an SA has timed out.  */
d156 1
d166 2
a167 1
extern void sa_rekey_p1 (struct sa *);
@


1.3
log
@Add RCS Ids from the EOM repository
@
text
@d1 2
a2 2
/*	$OpenBSD: sa.h,v 1.2 1998/11/15 00:44:02 niklas Exp $	*/
/*	$EOM: sa.h,v 1.37 1998/11/14 23:42:27 niklas Exp $	*/
d101 3
d162 1
@


1.2
log
@openBSD RCS IDs
@
text
@d1 2
a2 1
/*	$OpenBSD: sa.h,v 1.1.1.1 1998/11/15 00:03:49 niklas Exp $	*/
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$Id: sa.h,v 1.37 1998/11/14 23:42:27 niklas Exp $	*/
@


1.1.1.1
log
@Initial import of isakmpd, an IKE (ISAKMP/Oakley) implementation for the
OpenBSD IPSEC stack by me, Niklas Hallqvist and Niels Provos, funded by
Ericsson Radio Systems.  It is not yet complete or usable in a real scenario
but the missing pieces will soon be there.  The early commit is for people
who wants early access and who are not afraid of looking at source.
isakmpd interops with Cisco, Timestep, SSH & Pluto (Linux FreeS/WAN) so
far, so it is not that incomplete.  It is really mostly configuration that
is lacking.
@
text
@@
