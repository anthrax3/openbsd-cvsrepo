head	1.27;
access;
symbols
	OPENBSD_6_1:1.27.0.4
	OPENBSD_6_1_BASE:1.27
	OPENBSD_6_0:1.27.0.2
	OPENBSD_6_0_BASE:1.27
	OPENBSD_5_9:1.26.0.4
	OPENBSD_5_9_BASE:1.26
	OPENBSD_5_8:1.26.0.6
	OPENBSD_5_8_BASE:1.26
	OPENBSD_5_7:1.26.0.2
	OPENBSD_5_7_BASE:1.26
	OPENBSD_5_6:1.25.0.32
	OPENBSD_5_6_BASE:1.25
	OPENBSD_5_5:1.25.0.30
	OPENBSD_5_5_BASE:1.25
	OPENBSD_5_4:1.25.0.26
	OPENBSD_5_4_BASE:1.25
	OPENBSD_5_3:1.25.0.24
	OPENBSD_5_3_BASE:1.25
	OPENBSD_5_2:1.25.0.22
	OPENBSD_5_2_BASE:1.25
	OPENBSD_5_1_BASE:1.25
	OPENBSD_5_1:1.25.0.20
	OPENBSD_5_0:1.25.0.18
	OPENBSD_5_0_BASE:1.25
	OPENBSD_4_9:1.25.0.16
	OPENBSD_4_9_BASE:1.25
	OPENBSD_4_8:1.25.0.14
	OPENBSD_4_8_BASE:1.25
	OPENBSD_4_7:1.25.0.10
	OPENBSD_4_7_BASE:1.25
	OPENBSD_4_6:1.25.0.12
	OPENBSD_4_6_BASE:1.25
	OPENBSD_4_5:1.25.0.8
	OPENBSD_4_5_BASE:1.25
	OPENBSD_4_4:1.25.0.6
	OPENBSD_4_4_BASE:1.25
	OPENBSD_4_3:1.25.0.4
	OPENBSD_4_3_BASE:1.25
	OPENBSD_4_2:1.25.0.2
	OPENBSD_4_2_BASE:1.25
	OPENBSD_4_1:1.24.0.8
	OPENBSD_4_1_BASE:1.24
	OPENBSD_4_0:1.24.0.6
	OPENBSD_4_0_BASE:1.24
	OPENBSD_3_9:1.24.0.4
	OPENBSD_3_9_BASE:1.24
	OPENBSD_3_8:1.24.0.2
	OPENBSD_3_8_BASE:1.24
	OPENBSD_3_7:1.22.0.4
	OPENBSD_3_7_BASE:1.22
	OPENBSD_3_6:1.22.0.2
	OPENBSD_3_6_BASE:1.22
	OPENBSD_3_5:1.17.0.2
	OPENBSD_3_5_BASE:1.17
	OPENBSD_3_4:1.16.0.2
	OPENBSD_3_4_BASE:1.16
	OPENBSD_3_3:1.15.0.6
	OPENBSD_3_3_BASE:1.15
	OPENBSD_3_2:1.15.0.4
	OPENBSD_3_2_BASE:1.15
	OPENBSD_3_1:1.15.0.2
	OPENBSD_3_1_BASE:1.15
	OPENBSD_3_0:1.14.0.6
	OPENBSD_3_0_BASE:1.14
	OPENBSD_2_9:1.14.0.4
	OPENBSD_2_9_BASE:1.14
	OPENBSD_2_8:1.14.0.2
	OPENBSD_2_8_BASE:1.14
	OPENBSD_2_7:1.12.0.2
	OPENBSD_2_7_BASE:1.12
	OPENBSD_2_6:1.11.0.2
	OPENBSD_2_6_BASE:1.11
	OPENBSD_2_5:1.6.0.2
	OPENBSD_2_5_BASE:1.6
	NIKLAS_981114:1.1.1.1
	NIKLAS:1.1.1;
locks; strict;
comment	@ * @;


1.27
date	2016.03.10.07.32.16;	author yasuoka;	state Exp;
branches;
next	1.26;
commitid	aGOfvj3wuWdmV0zv;

1.26
date	2015.01.16.06.39.59;	author deraadt;	state Exp;
branches;
next	1.25;
commitid	Uu5nFG3wCl0LACBb;

1.25
date	2007.04.15.19.37.46;	author hshoexer;	state Exp;
branches;
next	1.24;

1.24
date	2005.05.26.06.11.09;	author hshoexer;	state Exp;
branches
	1.24.6.1
	1.24.8.1;
next	1.23;

1.23
date	2005.04.08.16.52.41;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	2004.08.10.15.59.10;	author ho;	state Exp;
branches;
next	1.21;

1.21
date	2004.06.20.17.17.35;	author ho;	state Exp;
branches;
next	1.20;

1.20
date	2004.06.10.12.54.53;	author hshoexer;	state Exp;
branches;
next	1.19;

1.19
date	2004.05.23.18.17.56;	author hshoexer;	state Exp;
branches;
next	1.18;

1.18
date	2004.04.15.18.39.26;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2003.11.06.16.12.07;	author ho;	state Exp;
branches
	1.17.2.1;
next	1.16;

1.16
date	2003.06.04.07.31.17;	author ho;	state Exp;
branches
	1.16.2.1;
next	1.15;

1.15
date	2001.10.26.11.37.16;	author ho;	state Exp;
branches;
next	1.14;

1.14
date	2000.10.10.13.35.12;	author niklas;	state Exp;
branches;
next	1.13;

1.13
date	2000.10.07.06.57.00;	author niklas;	state Exp;
branches;
next	1.12;

1.12
date	2000.02.01.02.46.18;	author niklas;	state Exp;
branches;
next	1.11;

1.11
date	99.08.26.22.27.51;	author niklas;	state Exp;
branches;
next	1.10;

1.10
date	99.05.01.22.58.03;	author niklas;	state Exp;
branches;
next	1.9;

1.9
date	99.04.30.11.46.24;	author niklas;	state Exp;
branches;
next	1.8;

1.8
date	99.04.27.20.58.30;	author niklas;	state Exp;
branches;
next	1.7;

1.7
date	99.04.19.21.01.45;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	99.02.26.03.48.04;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	98.12.21.01.02.26;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	98.11.20.07.32.50;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	98.11.17.11.10.17;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	98.11.15.00.44.01;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	98.11.15.00.03.49;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.11.15.00.03.49;	author niklas;	state Exp;
branches;
next	;

1.16.2.1
date	2004.06.11.03.08.03;	author brad;	state Exp;
branches;
next	;

1.17.2.1
date	2004.06.11.02.34.57;	author brad;	state Exp;
branches;
next	;

1.24.6.1
date	2007.05.18.21.34.43;	author ckuethe;	state Exp;
branches;
next	;

1.24.8.1
date	2007.05.18.21.34.07;	author ckuethe;	state Exp;
branches;
next	;


desc
@@


1.27
log
@Don't retransmit responses for unauthenticated messages.
Base on diff from Yuuichi Someya

ok markus reyk mikeb
@
text
@/* $OpenBSD: message.h,v 1.26 2015/01/16 06:39:59 deraadt Exp $	 */
/* $EOM: message.h,v 1.51 2000/10/10 12:36:39 provos Exp $	 */

/*
 * Copyright (c) 1998, 1999 Niklas Hallqvist.  All rights reserved.
 * Copyright (c) 1999 Angelos D. Keromytis.  All rights reserved.
 * Copyright (c) 2001, 2004 Håkan Olsson.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This code was written under funding by Ericsson Radio Systems.
 */

#ifndef _MESSAGE_H_
#define _MESSAGE_H_

#include <sys/queue.h>
#include <sys/socket.h>
#include <sys/uio.h>

#include "isakmp.h"

struct event;
struct message;
struct proto;
struct sa;
struct transport;

struct payload {
	/* Link all payloads of the same type through here.  */
	TAILQ_ENTRY(payload) link;

	/* The pointer to the actual payload data.  */
	u_int8_t       *p;

	/*
	 * A pointer to the parent payload, used for proposal and transform
	 * payloads.
         */
	struct payload *context;

	/* Payload flags described below.  */
	int             flags;
};

/* Payload flags.  */

/*
 * Set this when a payload has been handled, so we later can sweep over
 * unhandled ones.
 */
#define PL_MARK 1

/* A post-send chain of functions to be called.  */
struct post_send {
	/* Link to the next function in the chain.  */
	TAILQ_ENTRY(post_send) link;

	/* The actual function.  */
	void            (*func) (struct message *);
};

struct message {
	/* Link message in send queues via this link.  */
	TAILQ_ENTRY(message) link;

	/* Message flags described below.  */
	u_int           flags;

	/*
	 * This is the transport the message either arrived on or will be sent
	 * to.
         */
	struct transport *transport;

	/*
	 * This is the ISAKMP SA protecting this message.
	 * XXX Needs to be redone to some keystate pointer or something.
         */
	struct sa      *isakmp_sa;

	/* This is the exchange where this message appears.  */
	struct exchange *exchange;

	/*
	 * A segmented buffer structure holding the messages raw contents.  On
	 * input only segment 0 will be filled, holding all of the message.
	 * On output, as long as the message body is unencrypted each segment
	 * will be one payload, after encryption segment 0 will be the
	 * unencrypted header, and segment 1 will be the encrypted payloads,
	 * all of them.
         */
	struct iovec   *iov;

	/* The segment count.  */
	u_int           iovlen;

	/* Pointer to the last "next payload" field.  */
	u_int8_t       *nextp;

	/* "Smart" pointers to each payload, sorted by type.  */
	TAILQ_HEAD(payload_head, payload) *payload;

	/* Number of times this message has been sent.  */
	int             xmits;

	/* The timeout event causing retransmission of this message.  */
	struct event   *retrans;

	/* The (possibly encrypted) message text, used for duplicate testing. */
	u_int8_t       *orig;
	size_t          orig_sz;

	/*
	 * Extra baggage needed to travel with the message.  Used transiently
	 * in context sensitive ways.
         */
	void           *extra;

	/*
	 * Hooks for stuff needed to be done after the message has gone out to
	 * the wire.
         */
	TAILQ_HEAD(post_send_head, post_send) post_send;
};

/* Message flags.  */

/*
 * This is the last message of an exchange, meaning it should not be
 * retransmitted other than if we see duplicates from our peer's last
 * message.
 */
#define MSG_LAST	0x01

/* The message has already been encrypted.  */
#define MSG_ENCRYPTED	0x02

/* The message is on the send queue.  */
#define MSG_IN_TRANSIT	0x04

/* This message should be kept on the prioritized sendq.  */
#define MSG_PRIORITIZED	0x08

/* This message has successfully been authenticated. */
#define MSG_AUTHENTICATED	0x10

/* The message was received on the NAT-T port. */
#define MSG_NATT	0x20

/* The message must not be retransmitted. */
#define	MSG_DONTRETRANSMIT	0x40

TAILQ_HEAD(msg_head, message);

/* The number of different ISAKMP payloads supported.  */
extern u_int8_t payload_index_max;

extern int	message_add_payload(struct message *, u_int8_t, u_int8_t *,
		    size_t, int);
extern int      message_add_sa_payload(struct message *);
extern struct message *message_alloc(struct transport *, u_int8_t *, size_t);
extern struct message *message_alloc_reply(struct message *);
extern u_int8_t *message_copy(struct message *, size_t, size_t *);
extern void     message_drop(struct message *, int, struct proto *, int, int);
extern void     message_dump_raw(char *, struct message *, int);
extern void     message_free(struct message *);
extern void	message_init(void);
extern int	message_negotiate_sa(struct message *,
		    int (*)(struct exchange *, struct sa *, struct sa *));
extern int      message_recv(struct message *);
extern int      message_register_post_send(struct message *,
		    void (*) (struct message *));
extern void     message_post_send(struct message *);
extern void     message_send(struct message *);
extern void     message_send_expire(struct message *);
extern void     message_send_delete(struct sa *);
extern int      message_send_info(struct message *);
extern void     message_send_notification(struct message *, struct sa *,
		    u_int16_t, struct proto *, int);
extern void     message_setup_header(struct message *, u_int8_t, u_int8_t,
		    u_int8_t *);
struct payload *payload_first(struct message *, u_int8_t);

extern void	message_send_dpd_notify(struct sa*, u_int16_t, u_int32_t);

#endif				/* _MESSAGE_H_ */
@


1.26
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/* $OpenBSD: message.h,v 1.25 2007/04/15 19:37:46 hshoexer Exp $	 */
d170 3
@


1.25
log
@Fix interop-issue with vpn peers that start reyking on port 4500 when
NAT-T is used.  Solves problems with cisco and openswan.

Tested by todd@@ (cisco interop), ok ho@@

Original fix with Stefan Roth (stefan dot roth at siemens dot com),
thanks!
@
text
@d1 1
a1 1
/* $OpenBSD: message.h,v 1.24 2005/05/26 06:11:09 hshoexer Exp $	 */
a36 1
#include <sys/param.h>
@


1.24
log
@Use TAILQ_FOREACH where possible, remove payload_last()

ok markus
@
text
@d1 1
a1 1
/* $OpenBSD: message.h,v 1.23 2005/04/08 16:52:41 deraadt Exp $	 */
d168 3
@


1.24.6.1
log
@Original Commit by hshoexer@@, original commit message:
===========================================================================
Fix interop-issue with vpn peers that start reyking on port 4500 when
NAT-T is used.  Solves problems with cisco and openswan.

Tested by todd@@ (cisco interop), ok ho@@

Original fix with Stefan Roth (stefan dot roth at siemens dot com),
thanks!
===========================================================================
@
text
@d1 1
a1 1
/* $OpenBSD: message.h,v 1.24 2005/05/26 06:11:09 hshoexer Exp $	 */
a167 3

/* The message was received on the NAT-T port. */
#define MSG_NATT	0x20
@


1.24.8.1
log
@Original Commit by hshoexer@@, original commit message:
===========================================================================
Fix interop-issue with vpn peers that start reyking on port 4500 when
NAT-T is used.  Solves problems with cisco and openswan.

Tested by todd@@ (cisco interop), ok ho@@

Original fix with Stefan Roth (stefan dot roth at siemens dot com),
thanks!
===========================================================================
@
text
@d1 1
a1 1
/* $OpenBSD: message.h,v 1.24 2005/05/26 06:11:09 hshoexer Exp $	 */
a167 3

/* The message was received on the NAT-T port. */
#define MSG_NATT	0x20
@


1.23
log
@always enable aggressive, dpd, and isakmp_cfg
@
text
@d1 1
a1 1
/* $OpenBSD: message.h,v 1.22 2004/08/10 15:59:10 ho Exp $	 */
a198 1
struct payload *payload_last(struct message *, u_int8_t);
@


1.22
log
@Better implementation of the Dead Peer Detection protocol, RFC 3706.
hshoexer@@ ok.
@
text
@d1 1
a1 1
/* $OpenBSD: message.h,v 1.21 2004/06/20 17:17:35 ho Exp $	 */
a200 1
#if defined (USE_DPD)
a201 1
#endif
@


1.21
log
@Make the payload array in struct message dynamic, since we need to handle
payloads in the private range, such as the pre-RFC NAT-D/NAT-OA.
Replace TAILQ_FIRST(&msg->payload[i]) instances with function calls.
@
text
@d1 1
a1 1
/* $OpenBSD: message.h,v 1.20 2004/06/10 12:54:53 hshoexer Exp $	 */
d200 4
@


1.20
log
@Mark authenticated messages explicitly.  Better check for authentication before
deleteing SAs.

This fix is needed to solve the problems reported by Thomas Walpuski, previous
diff was not sufficient.  Pointed out by Thomas.  Thanks!

ok ho@@ niklas@@, testing and spellcheck by todd@@ msf@@
@
text
@d1 1
a1 1
/* $OpenBSD: message.h,v 1.19 2004/05/23 18:17:56 hshoexer Exp $	 */
d7 1
a7 1
 * Copyright (c) 2001 Håkan Olsson.  All rights reserved.
d123 1
a123 1
	TAILQ_HEAD(payload_head, payload) payload[ISAKMP_PAYLOAD_RESERVED_MIN];
d171 3
d183 1
d198 2
@


1.19
log
@More KNF.  Mainly spaces and line-wraps, no binary change.

ok ho@@
@
text
@d1 1
a1 1
/* $OpenBSD: message.h,v 1.18 2004/04/15 18:39:26 deraadt Exp $	 */
d155 1
a155 1
#define MSG_LAST	1
d158 1
a158 1
#define MSG_ENCRYPTED	2
d161 1
a161 1
#define MSG_IN_TRANSIT	4
d164 4
a167 1
#define MSG_PRIORITIZED	8
@


1.18
log
@partial move to KNF.  More to come.  This has happened because there
are a raft of source code auditors who are willing to help improve this
code only if this is done, and hey, isakmpd does need our standard
auditing process.  ok ho hshoexer
@
text
@d1 1
a1 1
/* $OpenBSD: message.h,v 1.17 2003/11/06 16:12:07 ho Exp $	 */
d58 2
a59 1
	 * A pointer to the parent payload, used for proposal and transform payloads.
d92 2
a93 1
	 * This is the transport the message either arrived on or will be sent to.
d107 6
a112 5
	 * A segmented buffer structure holding the messages raw contents.  On input
	 * only segment 0 will be filled, holding all of the message.  On output, as
	 * long as the message body is unencrypted each segment will be one payload,
	 * after encryption segment 0 will be the unencrypted header, and segment 1
	 * will be the encrypted payloads, all of them.
d123 1
a123 1
	                TAILQ_HEAD(payload_head, payload) payload[ISAKMP_PAYLOAD_RESERVED_MIN];
d131 1
a131 1
	/* The (possibly encrypted) message text, used for duplicate testing.  */
d145 1
a145 1
	                TAILQ_HEAD(post_send_head, post_send) post_send;
d168 1
a168 2
extern int
message_add_payload(struct message *, u_int8_t, u_int8_t *,
d177 14
a190 16
extern int
message_negotiate_sa(struct message *,
		     int (*) (struct exchange *, struct sa *,
			      struct sa *));
	extern int      message_recv(struct message *);
	extern int      message_register_post_send(struct message *,
			                       void (*) (struct message *));
	extern void     message_post_send(struct message *);
	extern void     message_send(struct message *);
	extern void     message_send_expire(struct message *);
	extern void     message_send_delete(struct sa *);
	extern int      message_send_info(struct message *);
	extern void     message_send_notification(struct message *, struct sa *,
			                    u_int16_t, struct proto *, int);
	extern void     message_setup_header(struct message *, u_int8_t, u_int8_t,
					                     u_int8_t *);
@


1.17
log
@Style nits.
@
text
@d1 2
a2 2
/*	$OpenBSD: message.h,v 1.16 2003/06/04 07:31:17 ho Exp $	*/
/*	$EOM: message.h,v 1.51 2000/10/10 12:36:39 provos Exp $	*/
d51 2
a52 2
  /* Link all payloads of the same type through here.  */
  TAILQ_ENTRY (payload) link;
d54 2
a55 2
  /* The pointer to the actual payload data.  */
  u_int8_t *p;
d57 4
a60 4
  /*
   * A pointer to the parent payload, used for proposal and transform payloads.
   */
  struct payload *context;
d62 2
a63 2
  /* Payload flags described below.  */
  int flags;
d76 2
a77 2
  /* Link to the next function in the chain.  */
  TAILQ_ENTRY (post_send) link;
d79 2
a80 2
  /* The actual function.  */
  void (*func) (struct message *);
d84 2
a85 2
  /* Link message in send queues via this link.  */
  TAILQ_ENTRY (message) link;
d87 2
a88 2
  /* Message flags described below.  */
  u_int flags;
d90 53
a142 53
  /*
   * This is the transport the message either arrived on or will be sent to.
   */
  struct transport *transport;

  /*
   * This is the ISAKMP SA protecting this message.
   * XXX Needs to be redone to some keystate pointer or something.
   */
  struct sa *isakmp_sa;

  /* This is the exchange where this message appears.  */
  struct exchange *exchange;

  /*
   * A segmented buffer structure holding the messages raw contents.  On input
   * only segment 0 will be filled, holding all of the message.  On output, as
   * long as the message body is unencrypted each segment will be one payload,
   * after encryption segment 0 will be the unencrypted header, and segment 1
   * will be the encrypted payloads, all of them.
   */
  struct iovec *iov;

  /* The segment count.  */
  u_int iovlen;

  /* Pointer to the last "next payload" field.  */
  u_int8_t *nextp;

  /* "Smart" pointers to each payload, sorted by type.  */
  TAILQ_HEAD (payload_head, payload) payload[ISAKMP_PAYLOAD_RESERVED_MIN];

  /* Number of times this message has been sent.  */
  int xmits;

  /* The timeout event causing retransmission of this message.  */
  struct event *retrans;

  /* The (possibly encrypted) message text, used for duplicate testing.  */
  u_int8_t *orig;
  size_t orig_sz;

  /*
   * Extra baggage needed to travel with the message.  Used transiently
   * in context sensitive ways.
   */
  void *extra;

  /*
   * Hooks for stuff needed to be done after the message has gone out to
   * the wire.
   */
  TAILQ_HEAD (post_send_head, post_send) post_send;
d163 1
a163 1
TAILQ_HEAD (msg_head, message);
d165 26
a190 24
extern int message_add_payload (struct message *, u_int8_t, u_int8_t *,
				size_t, int);
extern int message_add_sa_payload (struct message *);
extern struct message *message_alloc (struct transport *, u_int8_t *, size_t);
extern struct message *message_alloc_reply (struct message *);
extern u_int8_t *message_copy (struct message *, size_t, size_t *);
extern void message_drop (struct message *, int, struct proto *, int, int);
extern void message_dump_raw (char *, struct message *, int);
extern void message_free (struct message *);
extern int message_negotiate_sa (struct message *,
				 int (*) (struct exchange *, struct sa *,
					  struct sa *));
extern int message_recv (struct message *);
extern int message_register_post_send (struct message *,
				       void (*) (struct message *));
extern void message_post_send (struct message *);
extern void message_send (struct message *);
extern void message_send_expire (struct message *);
extern void message_send_delete (struct sa *);
extern int message_send_info (struct message *);
extern void message_send_notification (struct message *, struct sa *,
				       u_int16_t, struct proto *, int);
extern void message_setup_header (struct message *, u_int8_t, u_int8_t,
				  u_int8_t *);
d192 1
a192 1
#endif /* _MESSAGE_H_ */
@


1.17.2.1
log
@MFC:
Fix by hshoexer@@

Mark authenticated messages explicitly.  Better check for authentication before
deleteing SAs.

This fix is needed to solve the problems reported by Thomas Walpuski, previous
diff was not sufficient.  Pointed out by Thomas.  Thanks!
@
text
@d1 1
a1 1
/*	$OpenBSD: message.h,v 1.17 2003/11/06 16:12:07 ho Exp $	*/
a161 3

/* This message has successfully been authenticated. */
#define MSG_AUTHENTICATED	16
@


1.16
log
@Remove the rest of clauses 3 and 4. Approved by Niklas Hallqvist, Angelos
D. Keromytis and Niels Provos.
@
text
@d1 1
a1 1
/*	$OpenBSD: message.h,v 1.15 2001/10/26 11:37:16 ho Exp $	*/
d163 1
a163 1
TAILQ_HEAD(msg_head, message);
@


1.16.2.1
log
@MFC:
Fix by hshoexer@@

Mark authenticated messages explicitly.  Better check for authentication before
deleteing SAs.

This fix is needed to solve the problems reported by Thomas Walpuski, previous
diff was not sufficient.  Pointed out by Thomas.  Thanks!
@
text
@d1 1
a1 1
/*	$OpenBSD: message.h,v 1.16 2003/06/04 07:31:17 ho Exp $	*/
a161 3

/* This message has successfully been authenticated. */
#define MSG_AUTHENTICATED	16
@


1.15
log
@Sometimes the daemon will not die promptly on SIGTERM, even though
all DELETE notifications is sent out.  Create a prioritized send-queue
for the DELETE messages to solve this. Some (C)-2001.
niklas@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: message.h,v 1.14 2000/10/10 13:35:12 niklas Exp $	*/
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Ericsson Radio Systems.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.14
log
@message.c: Merge with EOM 1.156
message.h: Merge with EOM 1.51
transport.c: Merge with EOM 1.43

author: provos
use message_send_expire for timeouts. okay niklas@@
@
text
@d1 1
a1 1
/*	$OpenBSD: message.h,v 1.13 2000/10/07 06:57:00 niklas Exp $	*/
d7 1
d164 5
@


1.13
log
@Merge with EOM 1.50

author: niklas
alphabeticize
@
text
@d1 2
a2 2
/*	$OpenBSD: message.h,v 1.12 2000/02/01 02:46:18 niklas Exp $	*/
/*	$EOM: message.h,v 1.50 2000/10/05 09:09:55 niklas Exp $	*/
d181 1
@


1.12
log
@apps/certpatch/certpatch.8: Merge with EOM 1.4
apps/certpatch/certpatch.c: Merge with EOM 1.6
exchange.c: Merge with EOM 1.114
ike_quick_mode.c: Merge with EOM 1.110
ike_phase_1.c: Merge with EOM 1.16
ike_auth.c: Merge with EOM 1.41
ike_aggressive.c: Merge with EOM 1.4
libcrypto.c: Merge with EOM 1.10
libcrypto.h: Merge with EOM 1.10
isakmpd.8: Merge with EOM 1.19
isakmpd.c: Merge with EOM 1.42
ipsec.h: Merge with EOM 1.40
init.c: Merge with EOM 1.22
message.c: Merge with EOM 1.143
message.h: Merge with EOM 1.49
sa.c: Merge with EOM 1.98
sa.h: Merge with EOM 1.54
policy.c: Merge with EOM 1.14
pf_key_v2.c: Merge with EOM 1.36
x509.c: Merge with EOM 1.32
x509.h: Merge with EOM 1.9
udp.c: Merge with EOM 1.46

author: niklas
Angelos copyrights
@
text
@d1 2
a2 2
/*	$OpenBSD: message.h,v 1.11 1999/08/26 22:27:51 niklas Exp $	*/
/*	$EOM: message.h,v 1.49 2000/01/31 22:33:47 niklas Exp $	*/
d171 1
a186 1
extern void message_dump_raw (char *, struct message *, int);
@


1.11
log
@ike_phase_1.c: Merge with EOM 1.8
message.c: Merge with EOM 1.135
message.h: Merge with EOM 1.48
sa.c: Merge with EOM 1.97
sa.h: Merge with EOM 1.53

author: angelos
Complete policy work; tested for the shared-key case. Documentation needed.
@
text
@d1 2
a2 2
/*	$OpenBSD: message.h,v 1.10 1999/05/01 22:58:03 niklas Exp $	*/
/*	$EOM: message.h,v 1.48 1999/08/18 00:44:57 angelos Exp $	*/
d6 1
@


1.10
log
@TO-DO: Merge with EOM 1.36
sa.c: Merge with EOM 1.90
message.c: Merge with EOM 1.131
message.h: Merge with EOM 1.47

author: niklas
Send DELETE payloads in informational exchanges
@
text
@d1 2
a2 2
/*	$OpenBSD: message.h,v 1.9 1999/04/30 11:46:24 niklas Exp $	*/
/*	$EOM: message.h,v 1.47 1999/05/01 22:36:34 niklas Exp $	*/
d172 2
a173 1
				 int (*) (struct exchange *, struct sa *));
@


1.9
log
@ike_phase_1.c: Merge with EOM 1.3
ike_quick_mode.c: Merge with EOM 1.84
message.h: Merge with EOM 1.46

author: niklas
New message_drop API.  Generate real INVALID_COOKIE notification.
Generate informational exchanges in phase 1 too.  Really get these
messages to the wire
@
text
@d1 2
a2 2
/*	$OpenBSD: message.h,v 1.8 1999/04/27 20:58:30 niklas Exp $	*/
/*	$EOM: message.h,v 1.46 1999/04/29 10:51:30 niklas Exp $	*/
d178 1
@


1.8
log
@Merge with EOM 1.45

author: niklas
typo

author: niklas
Collapse MSG_NO_RETRANS & MSG_KEEP into MSG_LAST.
@
text
@d1 2
a2 2
/*	$OpenBSD: message.h,v 1.7 1999/04/19 21:01:45 niklas Exp $	*/
/*	$EOM: message.h,v 1.45 1999/04/25 13:38:33 niklas Exp $	*/
d178 1
a178 1
extern void message_send_info (struct message *);
@


1.7
log
@./message.h: Merge with EOM 1.43

Add LOG_REPORT to always go to logchannel regardless of level; misc small fixes

Make message_dump_raw public, for udp_report in udp.c

Garbage collect transports via refcounting.  Fix commentary.

1999 copyrights
@
text
@d1 2
a2 2
/*	$OpenBSD: message.h,v 1.6 1999/02/26 03:48:04 niklas Exp $	*/
/*	$EOM: message.h,v 1.43 1999/04/13 20:00:40 ho Exp $	*/
d150 6
a155 5
/* Don't retransmit this message, ever.  */
#define MSG_NO_RETRANS	1

/* Don't free message after sending */
#define MSG_KEEP	2
d158 1
a158 1
#define MSG_ENCRYPTED	4
d161 1
a161 1
#define MSG_IN_TRANSIT	8
@


1.6
log
@Merge from the Ericsson repository
| revision 1.39
| date: 1999/02/06 15:03:40;  author: niklas;  state: Exp;  lines: +4 -1
| Do not forget to remove message from sendq when freed
| ----------------------------
@
text
@d1 2
a2 2
/*	$OpenBSD: message.h,v 1.5 1998/12/21 01:02:26 niklas Exp $	*/
/*	$EOM: message.h,v 1.39 1999/02/06 15:03:40 niklas Exp $	*/
d5 1
a5 1
 * Copyright (c) 1998 Niklas Hallqvist.  All rights reserved.
d111 1
a111 1
   * after encryption segment 0 will be the unencryptd header, and segment 1
d182 1
@


1.5
log
@Last months worth of work on isakmpd, lots done
@
text
@d1 2
a2 2
/*	$OpenBSD: message.h,v 1.4 1998/11/20 07:32:50 niklas Exp $	*/
/*	$EOM: message.h,v 1.38 1998/11/27 17:12:29 niklas Exp $	*/
d158 3
@


1.4
log
@Validate proposals against policies
@
text
@d1 2
a2 2
/*	$OpenBSD: message.h,v 1.3 1998/11/17 11:10:17 niklas Exp $	*/
/*	$EOM: message.h,v 1.37 1998/11/20 07:12:04 niklas Exp $	*/
d167 2
a168 1
extern int message_negotiate_sa (struct message *, int (*) (struct sa *));
@


1.3
log
@Add RCS Ids from the EOM repository
@
text
@d1 2
a2 2
/*	$OpenBSD: message.h,v 1.2 1998/11/15 00:44:01 niklas Exp $	*/
/*	$EOM: message.h,v 1.36 1998/10/11 13:32:18 niklas Exp $	*/
d167 1
a167 1
extern int message_negotiate_sa (struct message *);
@


1.2
log
@openBSD RCS IDs
@
text
@d1 2
a2 1
/*	$OpenBSD: message.h,v 1.1.1.1 1998/11/15 00:03:49 niklas Exp $	*/
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$Id: message.h,v 1.36 1998/10/11 13:32:18 niklas Exp $	*/
@


1.1.1.1
log
@Initial import of isakmpd, an IKE (ISAKMP/Oakley) implementation for the
OpenBSD IPSEC stack by me, Niklas Hallqvist and Niels Provos, funded by
Ericsson Radio Systems.  It is not yet complete or usable in a real scenario
but the missing pieces will soon be there.  The early commit is for people
who wants early access and who are not afraid of looking at source.
isakmpd interops with Cisco, Timestep, SSH & Pluto (Linux FreeS/WAN) so
far, so it is not that incomplete.  It is really mostly configuration that
is lacking.
@
text
@@
