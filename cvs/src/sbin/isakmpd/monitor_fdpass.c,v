head	1.17;
access;
symbols
	OPENBSD_6_1:1.17.0.4
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.17.0.2
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.16.0.30
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.16.0.32
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.24
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.28
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.26
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.22
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.20
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.18
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.16
	OPENBSD_5_0:1.16.0.14
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.12
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.10
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.6
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.16.0.8
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.4
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.2
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.13.0.2
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.12.0.12
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.10
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.8
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.6
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.4
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.2
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.9.0.2
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5;
locks; strict;
comment	@ * @;


1.17
date	2016.02.29.20.22.36;	author jca;	state Exp;
branches;
next	1.16;
commitid	fTLsdsfGLcvRL1Vg;

1.16
date	2008.03.24.16.11.08;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2008.03.15.16.19.02;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2008.03.13.01.49.52;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2008.03.02.18.47.29;	author hshoexer;	state Exp;
branches;
next	1.12;

1.12
date	2005.02.27.13.12.12;	author hshoexer;	state Exp;
branches;
next	1.11;

1.11
date	2004.10.01.04.08.45;	author jsg;	state Exp;
branches;
next	1.10;

1.10
date	2004.09.20.21.35.09;	author hshoexer;	state Exp;
branches;
next	1.9;

1.9
date	2004.08.13.02.51.48;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2004.05.23.18.17.56;	author hshoexer;	state Exp;
branches;
next	1.7;

1.7
date	2004.04.15.18.39.26;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2003.11.06.16.12.07;	author ho;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.18.20.09.32;	author ho;	state Exp;
branches;
next	1.4;

1.4
date	2003.05.18.19.37.46;	author ho;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.17.17.39.26;	author ho;	state Exp;
branches;
next	1.2;

1.2
date	2003.05.17.17.32.44;	author ho;	state Exp;
branches;
next	1.1;

1.1
date	2003.05.15.00.28.53;	author ho;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Print ssize_t with %zd; ok deraadt@@ mmcc@@
@
text
@/*	$OpenBSD: monitor_fdpass.c,v 1.16 2008/03/24 16:11:08 deraadt Exp $	*/

/*
 * Copyright 2001 Niels Provos <provos@@citi.umich.edu>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <sys/uio.h>

#include <errno.h>
#include <string.h>

#include "log.h"
#include "monitor.h"

int
mm_send_fd(int socket, int fd)
{
	struct msghdr   msg;
	union {
		struct cmsghdr hdr;
		char buf[CMSG_SPACE(sizeof(int))];
	} cmsgbuf;
	char		ch = '\0';
	struct cmsghdr *cmsg;
	struct iovec    vec;
	ssize_t         n;

	bzero(&msg, sizeof msg);
	msg.msg_control = (caddr_t)&cmsgbuf.buf;
	msg.msg_controllen = sizeof(cmsgbuf.buf);
	cmsg = CMSG_FIRSTHDR(&msg);
	cmsg->cmsg_len = CMSG_LEN(sizeof(int));
	cmsg->cmsg_level = SOL_SOCKET;
	cmsg->cmsg_type = SCM_RIGHTS;
	*(int *)CMSG_DATA(cmsg) = fd;

	vec.iov_base = &ch;
	vec.iov_len = 1;
	msg.msg_iov = &vec;
	msg.msg_iovlen = 1;

	if ((n = sendmsg(socket, &msg, 0)) == -1) {
		log_error("mm_send_fd: sendmsg(%d)", fd);
		return -1;
	}
	if (n != 1) {
		log_error("mm_send_fd: sendmsg: expected sent 1 got %zd", n);
		return -1;
	}
	return 0;
}

int
mm_receive_fd(int socket)
{
	struct msghdr   msg;
	union {
		struct cmsghdr hdr;
		char buf[CMSG_SPACE(sizeof(int))];
	} cmsgbuf;
	char		ch;
	struct cmsghdr *cmsg;
	struct iovec    vec;
	ssize_t         n;
	int             fd;

	bzero(&msg, sizeof msg);
	vec.iov_base = &ch;
	vec.iov_len = 1;
	msg.msg_iov = &vec;
	msg.msg_iovlen = 1;
	msg.msg_control = &cmsgbuf.buf;
	msg.msg_controllen = sizeof(cmsgbuf.buf);

	if ((n = recvmsg(socket, &msg, 0)) == -1) {
		log_error("mm_receive_fd: recvmsg");
		return -1;
	}
	if (n != 1) {
		log_error("mm_receive_fd: recvmsg: expected received 1 got %zd",
		    n);
		return -1;
	}
	cmsg = CMSG_FIRSTHDR(&msg);
	if (cmsg == NULL) {
		log_error("mm_receive_fd: no message header");
		return -1;
	}
	if (cmsg->cmsg_type != SCM_RIGHTS) {
		log_error("mm_receive_fd: expected type %d got %d", SCM_RIGHTS,
		    cmsg->cmsg_type);
		return -1;
	}
	fd = (*(int *)CMSG_DATA(cmsg));
	return fd;
}
@


1.16
log
@msg_controllen has to be CMSG_SPACE so that the kernel can account for
each cmsg_len (ie. msg_controllen = sum of CMSG_ALIGN(cmsg_len).  This
works now that kernel fd passing has been fixed to accept a bit of
sloppiness because of this ABI repair.
lots of discussion with kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: monitor_fdpass.c,v 1.15 2008/03/15 16:19:02 deraadt Exp $	*/
d70 1
a70 2
		log_error("mm_send_fd: sendmsg: expected sent 1 got %ld",
		    (long)n);
d103 2
a104 2
		log_error("mm_receive_fd: recvmsg: expected received 1 got %ld",
		    (long)n);
@


1.15
log
@Repair the simple cases for msg_controllen where it should just be
CMSG_SIZE(sizeof(int)), not sizeof(buffer) which may be larger because
of alignment; ok kettenis hshoexer
@
text
@d1 1
a1 1
/*	$OpenBSD: monitor_fdpass.c,v 1.14 2008/03/13 01:49:52 deraadt Exp $	*/
d53 1
a53 1
	msg.msg_controllen = CMSG_LEN(sizeof(int));
d97 1
a97 1
	msg.msg_controllen = CMSG_LEN(sizeof(int));
@


1.14
log
@Correct CMSG_SPACE and CMSG_LEN usage everywhere in the tree. Due to
an extensive discussion with otto, kettenis, millert, and hshoexer
@
text
@d1 1
a1 1
/*	$OpenBSD: monitor_fdpass.c,v 1.13 2008/03/02 18:47:29 hshoexer Exp $	*/
d53 1
a53 1
	msg.msg_controllen = sizeof(cmsgbuf.buf);
d97 1
a97 1
	msg.msg_controllen = sizeof(cmsgbuf.buf);
@


1.13
log
@Use a union to ensure alignment of the cmsg.
ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: monitor_fdpass.c,v 1.12 2005/02/27 13:12:12 hshoexer Exp $	*/
d44 2
a45 2
		char tmp[CMSG_SPACE(sizeof(int))];
	} tmp;
d52 2
a53 2
	msg.msg_control = (caddr_t)&tmp;
	msg.msg_controllen = CMSG_LEN(sizeof(int));
d83 2
a84 2
		char tmp[CMSG_SPACE(sizeof(int))];
	} tmp;
d96 2
a97 2
	msg.msg_control = &tmp;
	msg.msg_controllen = sizeof tmp;
@


1.12
log
@where possible, use bzero instead of memset

ok cloder henning
@
text
@d1 1
a1 1
/*	$OpenBSD: monitor_fdpass.c,v 1.11 2004/10/01 04:08:45 jsg Exp $	*/
d42 5
a46 1
	char            tmp[CMSG_SPACE(sizeof(int))], ch = '\0';
d52 1
a52 1
	msg.msg_control = (caddr_t) tmp;
d81 5
a85 1
	char            tmp[CMSG_SPACE(sizeof(int))], ch;
d96 1
a96 1
	msg.msg_control = tmp;
@


1.11
log
@add some missing $, ok djm@@ 'That looks fine to me' millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d47 1
a47 1
	memset(&msg, 0, sizeof msg);
d83 1
a83 1
	memset(&msg, 0, sizeof msg);
@


1.10
log
@Remove __func__
ok ho deraadt
@
text
@d1 2
@


1.9
log
@extra check for no message case; ok markus, deraadt, hshoexer, henning
@
text
@d27 1
d29 1
d60 1
a60 1
		log_error("%s: sendmsg(%d)", __func__, fd);
d64 2
a65 2
		log_error("%s: sendmsg: expected sent 1 got %ld",
		    __func__, (long)n);
d90 1
a90 1
		log_error("%s: recvmsg", __func__);
d94 1
a94 1
		log_error("%s: recvmsg: expected received 1 got %ld", __func__,
d100 1
a100 1
		log_error("%s: no message header", __func__);
d104 1
a104 1
		log_error("%s: expected type %d got %d", __func__, SCM_RIGHTS,
@


1.8
log
@More KNF.  Mainly spaces and line-wraps, no binary change.

ok ho@@
@
text
@d97 4
@


1.7
log
@partial move to KNF.  More to come.  This has happened because there
are a raft of source code auditors who are willing to help improve this
code only if this is done, and hey, isakmpd does need our standard
auditing process.  ok ho hshoexer
@
text
@d50 1
a50 1
	*(int *) CMSG_DATA(cmsg) = fd;
d63 1
a63 1
		    __func__, (long) n);
d93 1
a93 1
		    (long) n);
d102 1
a102 1
	fd = (*(int *) CMSG_DATA(cmsg));
@


1.6
log
@Style nits.
@
text
@d35 1
a35 1
mm_send_fd (int socket, int fd)
d37 30
a66 32
  struct msghdr msg;
  char tmp[CMSG_SPACE (sizeof (int))];
  struct cmsghdr *cmsg;
  struct iovec vec;
  char ch = '\0';
  ssize_t n;

  memset (&msg, 0, sizeof msg);
  msg.msg_control = (caddr_t)tmp;
  msg.msg_controllen = CMSG_LEN (sizeof (int));
  cmsg = CMSG_FIRSTHDR (&msg);
  cmsg->cmsg_len = CMSG_LEN (sizeof (int));
  cmsg->cmsg_level = SOL_SOCKET;
  cmsg->cmsg_type = SCM_RIGHTS;
  *(int *)CMSG_DATA (cmsg) = fd;

  vec.iov_base = &ch;
  vec.iov_len = 1;
  msg.msg_iov = &vec;
  msg.msg_iovlen = 1;

  if ((n = sendmsg (socket, &msg, 0)) == -1)
    {
      log_error ("%s: sendmsg(%d)", __func__, fd);
      return -1;
    }
  if (n != 1)
    {
      log_error ("%s: sendmsg: expected sent 1 got %ld", __func__, (long)n);
      return -1;
    }
  return 0;
d70 1
a70 1
mm_receive_fd (int socket)
d72 32
a103 38
  struct msghdr msg;
  char tmp[CMSG_SPACE (sizeof (int))];
  struct cmsghdr *cmsg;
  struct iovec vec;
  ssize_t n;
  char ch;
  int fd;

  memset (&msg, 0, sizeof msg);
  vec.iov_base = &ch;
  vec.iov_len = 1;
  msg.msg_iov = &vec;
  msg.msg_iovlen = 1;
  msg.msg_control = tmp;
  msg.msg_controllen = sizeof tmp;

  if ((n = recvmsg (socket, &msg, 0)) == -1)
    {
      log_error ("%s: recvmsg", __func__);
      return -1;
    }
  if (n != 1)
    {
      log_error ("%s: recvmsg: expected received 1 got %ld", __func__,
		 (long)n);
      return -1;
    }

  cmsg = CMSG_FIRSTHDR (&msg);
  if (cmsg->cmsg_type != SCM_RIGHTS)
    {
      log_error ("%s: expected type %d got %d", __func__, SCM_RIGHTS,
		 cmsg->cmsg_type);
      return -1;
    }
  fd = (*(int *)CMSG_DATA (cmsg));

  return fd;
@


1.5
log
@Forgot to remove a couple of debug messages
@
text
@d44 1
a44 1
  memset(&msg, 0, sizeof msg);
d90 1
a90 1
  if ((n = recvmsg(socket, &msg, 0)) == -1)
@


1.4
log
@More isakmpd privsep work. X509 private keys are now kept in the privileged
process only. Various cleanup and bugfixes.
markus@@ ok
@
text
@a43 2
  LOG_DBG ((LOG_SYSDEP, 90, "mm_send_fd: send %d", fd));

a109 2

  LOG_DBG ((LOG_SYSDEP, 90, "mm_receive_fd: recv %d", fd));
@


1.3
log
@Better return codes from mm_send_fd and mm_receive_fd
@
text
@d44 2
d112 3
@


1.2
log
@Use log_error(), not log_fatal().
Style.
@
text
@d34 1
a34 1
void
d59 4
a62 1
    log_error ("%s: sendmsg(%d)", __func__, fd);
d64 5
a68 1
    log_error ("%s: sendmsg: expected sent 1 got %ld", __func__, (long)n);
d91 4
a94 1
    log_error ("%s: recvmsg", __func__);
d96 5
a100 1
    log_error ("%s: recvmsg: expected received 1 got %ld", __func__, (long)n);
d104 5
a108 2
    log_error ("%s: expected type %d got %d", __func__, SCM_RIGHTS,
	       cmsg->cmsg_type);
@


1.1
log
@Start of privilege separation for isakmpd.
There are some kinks left, so keep it default disabled for now.
markus@@ says ok to commit.
@
text
@d35 1
a35 1
mm_send_fd(int socket, int fd)
d37 25
a61 27
	struct msghdr msg;
	char tmp[CMSG_SPACE(sizeof(int))];
	struct cmsghdr *cmsg;
	struct iovec vec;
	char ch = '\0';
	ssize_t n;

	memset(&msg, 0, sizeof(msg));
	msg.msg_control = (caddr_t)tmp;
	msg.msg_controllen = CMSG_LEN(sizeof(int));
	cmsg = CMSG_FIRSTHDR(&msg);
	cmsg->cmsg_len = CMSG_LEN(sizeof(int));
	cmsg->cmsg_level = SOL_SOCKET;
	cmsg->cmsg_type = SCM_RIGHTS;
	*(int *)CMSG_DATA(cmsg) = fd;

	vec.iov_base = &ch;
	vec.iov_len = 1;
	msg.msg_iov = &vec;
	msg.msg_iovlen = 1;

	if ((n = sendmsg(socket, &msg, 0)) == -1)
		log_fatal("%s: sendmsg(%d): %s", __func__, fd,
		    strerror(errno));
	if (n != 1)
		log_fatal("%s: sendmsg: expected sent 1 got %ld",
		    __func__, (long)n);
d65 1
a65 1
mm_receive_fd(int socket)
d67 27
a93 28
	struct msghdr msg;
	char tmp[CMSG_SPACE(sizeof(int))];
	struct cmsghdr *cmsg;
	struct iovec vec;
	ssize_t n;
	char ch;
	int fd;

	memset(&msg, 0, sizeof(msg));
	vec.iov_base = &ch;
	vec.iov_len = 1;
	msg.msg_iov = &vec;
	msg.msg_iovlen = 1;
	msg.msg_control = tmp;
	msg.msg_controllen = sizeof(tmp);

	if ((n = recvmsg(socket, &msg, 0)) == -1)
		log_fatal("%s: recvmsg: %s", __func__, strerror(errno));
	if (n != 1)
		log_fatal("%s: recvmsg: expected received 1 got %ld",
		    __func__, (long)n);

	cmsg = CMSG_FIRSTHDR(&msg);
	if (cmsg->cmsg_type != SCM_RIGHTS)
		log_fatal("%s: expected type %d got %d", __func__,
		    SCM_RIGHTS, cmsg->cmsg_type);
	fd = (*(int *)CMSG_DATA(cmsg));
	return fd;
@

