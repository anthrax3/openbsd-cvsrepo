head	1.8;
access;
symbols
	OPENBSD_3_7:1.7.0.8
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.3.0.10
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.8
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.6
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.4
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	NIKLAS_981114:1.1.1.1
	NIKLAS:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2005.04.08.17.21.41;	author cloder;	state dead;
branches;
next	1.7;

1.7
date	2003.06.03.14.39.51;	author ho;	state Exp;
branches;
next	1.6;

1.6
date	2002.06.09.08.13.07;	author todd;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.17.14.11.05;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	2001.07.01.19.28.12;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	98.12.21.01.02.35;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	98.11.15.00.44.11;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	98.11.15.00.03.50;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.11.15.00.03.50;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Moved regression tests to src/regress/sbin/isakmpd where they belong.
@
text
@/*	$OpenBSD: prftest.c,v 1.7 2003/06/03 14:39:51 ho Exp $	*/
/*	$EOM: prftest.c,v 1.2 1998/10/07 16:40:50 niklas Exp $	*/

/*
 * Copyright (c) 1998 Niels Provos.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This code was written under funding by Ericsson Radio Systems.
 */

#include <sys/param.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include "hash.h"
#include "prf.h"

int test_prf (char *, enum hashes, char *, int, char *, int, char *);

#define nibble2c(x) ((x) >= 10 ? ('a'-10+(x)) : ('0' + (x)))

/*
 * Basically the same as the HMAC regress, but to keep with modularity
 * prf seems to be useful. So here we just check the HMAC test cases,
 * until there are more PRFs.
 */

int
main (void)
{
  char key[100];

  memset (key, 11, 20);
  test_prf ("PRF MD5 Test Case 1", HASH_MD5,
	    key, 16, "Hi There", 8, "9294727a3638bb1c13f48ef8158bfc9d");
  test_prf ("PRF MD5 Test Case 2", HASH_MD5,
	    "Jefe", 4,
	    "what do ya want for nothing?", 28,
	    "750c783e6ab0b503eaa86e310a5db738");
  test_prf ("PRF SHA1 Test Case 1", HASH_SHA1,
	    key, 20, "Hi There", 8,
	    "b617318655057264e28bc0b6fb378c8ef146be00");
  test_prf ("PRF SHA1 Test Case 2",  HASH_SHA1,
	    "Jefe", 4, "what do ya want for nothing?", 28,
	    "effcdf6ae5eb2fa2d27416d5f184df9c259a7c79");
  test_prf ("PRF SHA1 Test Case 3",  HASH_SHA1,
	    "Bloody long key, this one, eben longer than the blocksize "
	    "of ordinary keyed HMAC functions", 90,
	    "what do ya want for nothing?", 28,
	    "52ca5fbcd7d4821bc6bf8b6e95e131109dff901b");

  return 0;
}

int
test_prf (char *test, enum hashes hash, char *key, int klen,
	  char *data, int dlen, char *cmp)
{
  char output[2*HASH_MAX+1];
  char digest[HASH_MAX];
  struct prf *prf;
  int i;

  printf ("Testing %s: ", test);

  prf = prf_alloc (PRF_HMAC, hash, key, klen);
  if (!prf)
    {
      printf("prf_alloc () failed\n");
      return 0;
    }

  prf->Init (prf->prfctx);
  prf->Update (prf->prfctx, data, dlen);
  prf->Final (digest, prf->prfctx);

  prf_free (prf);

  for (i = 0; i < prf->blocksize; i++)
    {
      output[2 * i] = nibble2c ((digest[i] >> 4) & 0xf);
      output[2 * i + 1] = nibble2c (digest[i] & 0xf);
    }
  output[2 * i] = 0;

  if (strcmp (output, cmp) == 0)
    {
      printf ("OKAY\n");
      return 1;
    }

  printf ("%s <-> %s\n", output, cmp);
  return 0;
}
@


1.7
log
@Remove clauses 3 and 4. Approved by Niklas Hallqvist and Niels Provos.
@
text
@d1 1
a1 1
/*	$OpenBSD: prftest.c,v 1.6 2002/06/09 08:13:07 todd Exp $	*/
@


1.6
log
@rm trailing whitespace
@
text
@d1 1
a1 1
/*	$OpenBSD: prftest.c,v 1.5 2001/08/17 14:11:05 niklas Exp $	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Ericsson Radio Systems.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.5
log
@Add test with long key, longer than common hmac blocksize
@
text
@d1 1
a1 1
/*	$OpenBSD: prftest.c,v 1.4 2001/07/01 19:28:12 niklas Exp $	*/
d59 1
a59 1
    
d68 1
a68 1
	    key, 20, "Hi There", 8, 
d71 1
a71 1
	    "Jefe", 4, "what do ya want for nothing?", 28, 
d76 1
a76 1
	    "what do ya want for nothing?", 28, 
d78 1
a78 1
  
d94 1
a94 1
  if (!prf) 
d113 1
a113 1
  if (strcmp (output, cmp) == 0) 
@


1.4
log
@Style police
@
text
@d1 1
a1 1
/*	$OpenBSD: prftest.c,v 1.3 1998/12/21 01:02:35 niklas Exp $	*/
d73 5
@


1.3
log
@Last months worth of work on isakmpd, lots done
@
text
@d1 1
a1 1
/*	$OpenBSD: prftest.c,v 1.2 1998/11/15 00:44:11 niklas Exp $	*/
d45 1
a45 1
int test_prf(char *, enum hashes, char *, int, char *, int, char *);
d60 1
a60 1
  memset(key, 11, 20);
d62 1
a62 1
	     key, 16, "Hi There", 8, "9294727a3638bb1c13f48ef8158bfc9d");
d64 3
a66 3
	     "Jefe", 4,
	     "what do ya want for nothing?", 28,
	     "750c783e6ab0b503eaa86e310a5db738");
d68 2
a69 2
	     key, 20, "Hi There", 8, 
	     "b617318655057264e28bc0b6fb378c8ef146be00");
d71 2
a72 2
	     "Jefe", 4, "what do ya want for nothing?", 28, 
	     "effcdf6ae5eb2fa2d27416d5f184df9c259a7c79");
d74 1
a74 1
  return 1;
d78 1
a78 1
test_prf(char *test, enum hashes hash, char *key, int klen,
d86 1
a86 1
  printf("Testing %s: ", test);
d88 2
a89 2
  prf = prf_alloc(PRF_HMAC, hash, key, klen);
  if (prf == NULL) 
d91 1
a91 1
      printf("prf_alloc() returned NULL\n");
d95 3
a97 3
  prf->Init(prf->prfctx);
  prf->Update(prf->prfctx, data, dlen);
  prf->Final(digest, prf->prfctx);
d99 1
a99 1
  prf_free(prf);
d101 1
a101 1
  for (i=0; i<prf->blocksize; i++)
d103 2
a104 2
      output[2*i] = nibble2c((digest[i] >> 4) & 0xf);
      output[2*i+1] = nibble2c(digest[i] & 0xf);
d106 1
a106 1
  output[2*i] = 0;
d108 1
a108 1
  if (!strcmp(output, cmp)) 
d110 1
a110 1
      printf("OKAY\n");
d114 1
a114 1
  printf("%s <-> %s\n", output, cmp);
@


1.2
log
@openBSD RCS IDs
@
text
@d1 2
a2 1
/*	$OpenBSD: prftest.c,v 1.1.1.1 1998/11/15 00:03:50 niklas Exp $	*/
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$Id: prftest.c,v 1.2 1998/10/07 16:40:50 niklas Exp $	*/
@


1.1.1.1
log
@Initial import of isakmpd, an IKE (ISAKMP/Oakley) implementation for the
OpenBSD IPSEC stack by me, Niklas Hallqvist and Niels Provos, funded by
Ericsson Radio Systems.  It is not yet complete or usable in a real scenario
but the missing pieces will soon be there.  The early commit is for people
who wants early access and who are not afraid of looking at source.
isakmpd interops with Cisco, Timestep, SSH & Pluto (Linux FreeS/WAN) so
far, so it is not that incomplete.  It is really mostly configuration that
is lacking.
@
text
@@
