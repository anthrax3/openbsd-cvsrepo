head	1.14;
access;
symbols
	OPENBSD_3_7:1.13.0.4
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.2
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.12.0.2
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.7.0.4
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.6.0.4
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.3.0.8
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.6
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.4
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	NIKLAS_981114:1.1.1.1
	NIKLAS:1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2005.04.08.17.21.41;	author cloder;	state dead;
branches;
next	1.13;

1.13
date	2004.04.07.22.45.50;	author ho;	state Exp;
branches;
next	1.12;

1.12
date	2004.02.25.16.01.29;	author hshoexer;	state Exp;
branches;
next	1.11;

1.11
date	2003.09.24.11.12.31;	author markus;	state Exp;
branches;
next	1.10;

1.10
date	2003.09.24.10.13.43;	author markus;	state Exp;
branches;
next	1.9;

1.9
date	2003.08.28.14.43.35;	author markus;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.03.14.39.50;	author ho;	state Exp;
branches;
next	1.7;

1.7
date	2002.06.09.08.13.07;	author todd;	state Exp;
branches;
next	1.6;

1.6
date	2001.06.12.21.46.47;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	2001.01.27.12.03.38;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.26.12.04.19;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	98.12.21.01.02.29;	author niklas;	state Exp;
branches
	1.3.8.1;
next	1.2;

1.2
date	98.11.15.00.44.07;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	98.11.15.00.03.50;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.11.15.00.03.50;	author niklas;	state Exp;
branches;
next	;

1.3.8.1
date	2001.05.08.12.45.27;	author ho;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Moved regression tests to src/regress/sbin/isakmpd where they belong.
@
text
@/*	$OpenBSD: cryptotest.c,v 1.13 2004/04/07 22:45:50 ho Exp $	*/
/*	$EOM: cryptotest.c,v 1.5 1998/10/07 16:40:49 niklas Exp $	*/

/*
 * Copyright (c) 1998 Niels Provos.  All rights reserved.
 * Copyright (c) 2001 Niklas Hallqvist.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This code was written under funding by Ericsson Radio Systems.
 */

#include <sys/param.h>
#include <ctype.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include "crypto.h"

void test_crypto (enum transform);

#define SET_KEY(x,y) {size_t i; for (i=0; i < (y); i++) (x)[i] = i;}

int
verify_buf (u_int8_t *buf, u_int16_t len)
{
  int i;

  for (i = 0; i < len; i++)
    if (buf[i] != i)
      return 0;

  return 1;
}

#define nibble2bin(y) (tolower((y)) < 'a' ? (y) - '0': tolower((y)) - 'a' + 10)
#define hexchar2bin(x) ((nibble2bin((x)[0]) << 4) + nibble2bin((x)[1]))
#define nibble2c(x) ((x) >= 10 ? ('a'-10+(x)) : ('0' + (x)))

static void asc2bin (u_int8_t *bin, u_int8_t *asc, u_int16_t len)
{
  int i;

  for (i = 0; i < len; i += 2, asc += 2)
    {
      *bin++ = hexchar2bin(asc);
    }
}

void
special_test_blf (void)
{
  u_int8_t *akey = "0123456789ABCDEFF0E1D2C3B4A59687";
  u_int8_t *aiv = "FEDCBA9876543210";
  u_int8_t data[] = "7654321 Now is the time for \0\0\0"; /* len 29 */
  u_int8_t *acipher
    = "6B77B4D63006DEE605B156E27403979358DEB9E7154616D959F1652BD5FF92CCE7";
  u_int8_t key[16], cipher[32], iv[8];
  struct crypto_xf *xf;
  struct keystate *ks;
  enum cryptoerr err;
  int i;

  asc2bin (key, akey, strlen (akey));
  asc2bin (iv, aiv, strlen (aiv));
  asc2bin (cipher, acipher, 64);

  xf = crypto_get (BLOWFISH_CBC);
  printf ("Special Test-Case %s: ", xf->name);

  ks = crypto_init (xf, key, 16, &err);
  if (!ks)
    {
      printf ("FAILED (init %d)", err);
      goto fail;
    }

  crypto_init_iv (ks, iv, xf->blocksize);
  crypto_encrypt (ks, data, 32);

  for (i = 0; i < 32; i++)
    if (data[i] != cipher[i])
	break;
  if (i < 32)
    printf ("FAILED ");
  else
    printf ("OKAY ");

  free (ks);

fail:
  printf ("\n");
  return;
}

int
main (void)
{
  test_crypto (DES_CBC);

  test_crypto (TRIPLEDES_CBC);

  test_crypto (BLOWFISH_CBC);

  test_crypto (CAST_CBC);

  test_crypto (AES_CBC);

  special_test_blf ();

  return 1;
}

void
dump_buf (u_int8_t *buf, size_t len)
{
  size_t i;

  for (i = 0; i < len; i++)
    printf ("%02x ", buf[i]);
  printf ("\n");
}

void
test_crypto (enum transform which)
{
  u_int8_t buf[256];
  struct crypto_xf *xf;
  struct keystate *ks;
  enum cryptoerr err;

  xf = crypto_get (which);
  printf ("Testing %s: ", xf->name);

  SET_KEY (buf, xf->keymax);
  ks = crypto_init (xf, buf, xf->keymax, &err);
  if (!ks)
    {
      printf ("FAILED (init %d)", err);
      goto fail;
    }
  SET_KEY (buf, sizeof (buf));
  crypto_init_iv (ks, buf, xf->blocksize);
  crypto_encrypt (ks, buf, sizeof (buf));
  dump_buf (buf, sizeof buf);
  crypto_decrypt (ks, buf, sizeof (buf));
  if (!verify_buf (buf, sizeof (buf)))
    printf ("FAILED ");
  else
    printf ("OKAY ");

  free (ks);

 fail:
  printf ("\n");
  return;
}
@


1.13
log
@-Wsign-compare nits. hshoexer@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: cryptotest.c,v 1.12 2004/02/25 16:01:29 hshoexer Exp $	*/
@


1.12
log
@Add and document configuration options Logverbose and Loglevel.  As log.c now
depends on conf.c and some regression tests use log.c, add conf.c to
Makefiles where necessary.

ok ho@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cryptotest.c,v 1.11 2003/09/24 11:12:31 markus Exp $	*/
d43 1
a43 1
#define SET_KEY(x,y) {int i; for (i=0; i < (y); i++) (x)[i] = i;}
d135 1
a135 1
 void
d138 1
a138 1
  int i;
@


1.11
log
@re-add AES, but without using EVP;
patch from Hans-Joerg.Hoexer at yerbouti.franken.de; ok ho@@
(interops with isakmpd+AES in OpenBSD 3.4)
@
text
@d1 1
a1 1
/*	$OpenBSD: cryptotest.c,v 1.10 2003/09/24 10:13:43 markus Exp $	*/
d61 1
a61 1
void asc2bin (u_int8_t *bin, u_int8_t *asc, u_int16_t len)
@


1.10
log
@back out EVP change; causes fd leaks; ok cedric@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cryptotest.c,v 1.9 2003/08/28 14:43:35 markus Exp $	*/
d127 2
@


1.9
log
@support AES in phase 1, too. switch to OpenSSL EVP interface;
with Hans-Joerg.Hoexer at yerbouti.franken.de; ok ho@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cryptotest.c,v 1.8 2003/06/03 14:39:50 ho Exp $	*/
a126 2

  test_crypto (AES_CBC);
@


1.8
log
@Remove clauses 3 and 4. Approved by Niklas Hallqvist and Niels Provos.
@
text
@d1 1
a1 1
/*	$OpenBSD: cryptotest.c,v 1.7 2002/06/09 08:13:07 todd Exp $	*/
d127 2
@


1.7
log
@rm trailing whitespace
@
text
@d1 1
a1 1
/*	$OpenBSD: cryptotest.c,v 1.6 2001/06/12 21:46:47 niklas Exp $	*/
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Ericsson Radio Systems.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.6
log
@Add printing of the ciphertext
@
text
@d1 1
a1 1
/*	$OpenBSD: cryptotest.c,v 1.5 2001/01/27 12:03:38 niklas Exp $	*/
d93 1
a93 1
  
d132 1
a132 1
  
d155 1
a155 1
  
@


1.5
log
@(c) 2001
@
text
@d1 1
a1 1
/*	$OpenBSD: cryptotest.c,v 1.4 2001/01/26 12:04:19 niklas Exp $	*/
d138 10
d169 1
@


1.4
log
@Pedantic style police
@
text
@d1 1
a1 1
/*	$OpenBSD: cryptotest.c,v 1.3 1998/12/21 01:02:29 niklas Exp $	*/
d6 1
@


1.3
log
@Last months worth of work on isakmpd, lots done
@
text
@d1 1
a1 1
/*	$OpenBSD: cryptotest.c,v 1.2 1998/11/15 00:44:07 niklas Exp $	*/
d81 2
a82 1
  u_int8_t *acipher = "6B77B4D63006DEE605B156E27403979358DEB9E7154616D959F1652BD5FF92CCE7";
@


1.3.8.1
log
@Pull in isakmpd from 2.9 to 2.8 branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: cryptotest.c,v 1.5 2001/01/27 12:03:38 niklas Exp $	*/
a5 1
 * Copyright (c) 2001 Niklas Hallqvist.  All rights reserved.
d81 1
a81 2
  u_int8_t *acipher
    = "6B77B4D63006DEE605B156E27403979358DEB9E7154616D959F1652BD5FF92CCE7";
@


1.2
log
@openBSD RCS IDs
@
text
@d1 2
a2 1
/*	$OpenBSD: cryptotest.c,v 1.1.1.1 1998/11/15 00:03:50 niklas Exp $	*/
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$Id: cryptotest.c,v 1.5 1998/10/07 16:40:49 niklas Exp $	*/
@


1.1.1.1
log
@Initial import of isakmpd, an IKE (ISAKMP/Oakley) implementation for the
OpenBSD IPSEC stack by me, Niklas Hallqvist and Niels Provos, funded by
Ericsson Radio Systems.  It is not yet complete or usable in a real scenario
but the missing pieces will soon be there.  The early commit is for people
who wants early access and who are not afraid of looking at source.
isakmpd interops with Cisco, Timestep, SSH & Pluto (Linux FreeS/WAN) so
far, so it is not that incomplete.  It is really mostly configuration that
is lacking.
@
text
@@
