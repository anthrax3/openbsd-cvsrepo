head	1.20;
access;
symbols
	OPENBSD_3_7:1.19.0.6
	OPENBSD_3_7_BASE:1.19
	OPENBSD_3_6:1.19.0.4
	OPENBSD_3_6_BASE:1.19
	OPENBSD_3_5:1.19.0.2
	OPENBSD_3_5_BASE:1.19
	OPENBSD_3_4:1.17.0.2
	OPENBSD_3_4_BASE:1.17
	OPENBSD_3_3:1.16.0.4
	OPENBSD_3_3_BASE:1.16
	OPENBSD_3_2:1.16.0.2
	OPENBSD_3_2_BASE:1.16
	OPENBSD_3_1:1.14.0.2
	OPENBSD_3_1_BASE:1.14
	OPENBSD_3_0:1.13.0.4
	OPENBSD_3_0_BASE:1.13
	OPENBSD_2_9:1.13.0.2
	OPENBSD_2_9_BASE:1.13
	OPENBSD_2_8:1.9.0.6
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.9.0.4
	OPENBSD_2_7_BASE:1.9
	OPENBSD_2_6:1.9.0.2
	OPENBSD_2_6_BASE:1.9
	OPENBSD_2_5:1.6.0.2
	OPENBSD_2_5_BASE:1.6
	NIKLAS_981114:1.1.1.1
	NIKLAS:1.1.1;
locks; strict;
comment	@ * @;


1.20
date	2005.04.08.17.21.41;	author cloder;	state dead;
branches;
next	1.19;

1.19
date	2004.02.26.15.27.05;	author hshoexer;	state Exp;
branches;
next	1.18;

1.18
date	2004.02.25.16.01.29;	author hshoexer;	state Exp;
branches;
next	1.17;

1.17
date	2003.06.03.14.39.51;	author ho;	state Exp;
branches;
next	1.16;

1.16
date	2002.06.10.18.08.59;	author ho;	state Exp;
branches;
next	1.15;

1.15
date	2002.06.09.08.13.07;	author todd;	state Exp;
branches;
next	1.14;

1.14
date	2002.01.03.16.27.41;	author ho;	state Exp;
branches;
next	1.13;

1.13
date	2001.01.27.12.03.38;	author niklas;	state Exp;
branches;
next	1.12;

1.12
date	2001.01.27.11.24.43;	author niklas;	state Exp;
branches;
next	1.11;

1.11
date	2001.01.26.11.08.24;	author niklas;	state Exp;
branches;
next	1.10;

1.10
date	2000.12.19.18.54.59;	author mickey;	state Exp;
branches;
next	1.9;

1.9
date	99.08.26.22.30.46;	author niklas;	state Exp;
branches
	1.9.6.1;
next	1.8;

1.8
date	99.07.17.21.54.38;	author niklas;	state Exp;
branches;
next	1.7;

1.7
date	99.04.27.21.02.56;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	99.03.24.14.58.15;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	99.03.02.15.27.36;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	99.02.26.04.07.04;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	98.11.15.01.04.35;	author niklas;	state dead;
branches;
next	1.2;

1.2
date	98.11.15.00.44.11;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	98.11.15.00.03.50;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.11.15.00.03.50;	author niklas;	state Exp;
branches;
next	;

1.9.6.1
date	2001.05.08.12.45.28;	author ho;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Moved regression tests to src/regress/sbin/isakmpd where they belong.
@
text
@/*	$OpenBSD: rsakeygen.c,v 1.19 2004/02/26 15:27:05 hshoexer Exp $	*/
/*	$EOM: rsakeygen.c,v 1.10 2000/12/21 15:18:53 ho Exp $	*/

/*
 * Copyright (c) 1998, 1999 Niels Provos.  All rights reserved.
 * Copyright (c) 1999, 2001 Niklas Hallqvist.  All rights reserved.
 * Copyright (c) 2001 Håkan Olsson.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This code was written under funding by Ericsson Radio Systems.
 */

#include <sys/param.h>
#include <ctype.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include "libcrypto.h"
#include "log.h"
#include "math_mp.h"

#define nibble2bin(y) (tolower (y) < 'a' ? (y) - '0' : tolower (y) - 'a' + 10)
#define hexchar2bin(x) ((nibble2bin ((x)[0]) << 4) + nibble2bin ((x)[1]))
#define nibble2c(x) ((x) >= 10 ? ('a' - 10 + (x)) : ('0' + (x)))

#define TEST_STRING "!Dies ist ein Test"

int
main (void)
{
  u_int8_t enc[256], dec[256], *asn, *foo;
  int len;
  FILE *fd;
  int erg = 0;
  RSA *key;

  libcrypto_init ();

  log_debug_cmd (LOG_CRYPTO, 99);
  memset (dec, '\0', sizeof dec);
  strlcpy (dec, TEST_STRING, 256);

  key = RSA_generate_key (1024, RSA_F4, NULL, NULL);
  if (key == NULL)
    {
      printf("Failed to generate key\n");
      return 0;
    }

  printf ("n: 0x");
  BN_print_fp (stdout, key->n);
  printf ("\ne: 0x");
  BN_print_fp (stdout, key->e);
  printf ("\n");

  printf ("n: 0x");
  BN_print_fp (stdout, key->n);
  printf ("\ne: 0x");
  BN_print_fp (stdout, key->e);
  printf ("\nd: 0x");
  BN_print_fp (stdout, key->d);
  printf ("\np: 0x");
  BN_print_fp (stdout, key->p);
  printf ("\nq: 0x");
  BN_print_fp (stdout, key->q);
  printf ("\n");

  printf ("Testing Signing/Verifying: ");
  /* Sign with Private Key */
  len = RSA_private_encrypt (strlen (dec) + 1, dec, enc, key,
			     RSA_PKCS1_PADDING);
  if (len == -1)
    printf ("SIGN FAILED ");
  else
    {
      /* Decrypt/Verify with Public Key */
      erg = RSA_public_decrypt (len, enc, dec, key, RSA_PKCS1_PADDING);

      if (erg == -1 || strcmp (dec, TEST_STRING))
	printf ("VERIFY FAILED");
      else
	printf ("OKAY");
    }

  printf ("\n");

  len = i2d_RSAPublicKey (key, NULL);
  foo = asn = malloc (len);
  len = i2d_RSAPublicKey (key, &foo);
  fd = fopen ("isakmpd_key.pub", "w");
  fwrite (asn, len, 1, fd);
  fclose (fd);
  free (asn);

  len = i2d_RSAPrivateKey (key, NULL);
  foo = asn = malloc (len);
  len = i2d_RSAPrivateKey (key, &foo);
  fd = fopen ("isakmpd_key", "w");
  fwrite (asn, len, 1, fd);
  fclose (fd);
  free (asn);

  RSA_free (key);

  return 1;
}
@


1.19
log
@remove unused code.  noticed by ho@@
ok ho@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rsakeygen.c,v 1.18 2004/02/25 16:01:29 hshoexer Exp $	*/
@


1.18
log
@Add and document configuration options Logverbose and Loglevel.  As log.c now
depends on conf.c and some regression tests use log.c, add conf.c to
Makefiles where necessary.

ok ho@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rsakeygen.c,v 1.17 2003/06/03 14:39:51 ho Exp $	*/
a48 8

static void asc2bin (u_int8_t *bin, u_int8_t *asc, u_int16_t len)
{
  int i;

  for (i = 0; i < len; i += 2, asc += 2)
    *bin++ = hexchar2bin (asc);
}
@


1.17
log
@Remove clauses 3 and 4. Approved by Niklas Hallqvist and Niels Provos.
@
text
@d1 1
a1 1
/*	$OpenBSD: rsakeygen.c,v 1.16 2002/06/10 18:08:59 ho Exp $	*/
d50 1
a50 1
void asc2bin (u_int8_t *bin, u_int8_t *asc, u_int16_t len)
@


1.16
log
@The dlopen() stuff goes away.
@
text
@d1 1
a1 1
/*	$OpenBSD: rsakeygen.c,v 1.15 2002/06/09 08:13:07 todd Exp $	*/
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Ericsson Radio Systems.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.15
log
@rm trailing whitespace
@
text
@d1 1
a1 1
/*	$OpenBSD: rsakeygen.c,v 1.14 2002/01/03 16:27:41 ho Exp $	*/
a73 8
#ifndef USE_LIBCRYPTO
  if (!libcrypto)
    {
      fprintf (stderr, "I did not find the RSA support, giving up...");
      exit (1);
    }
#endif

d78 1
a78 1
  key = LC (RSA_generate_key, (1024, RSA_F4, NULL, NULL));
d86 1
a86 1
  LC (BN_print_fp, (stdout, key->n));
d88 1
a88 1
  LC (BN_print_fp, (stdout, key->e));
d92 1
a92 1
  LC (BN_print_fp, (stdout, key->n));
d94 1
a94 1
  LC (BN_print_fp, (stdout, key->e));
d96 1
a96 1
  LC (BN_print_fp, (stdout, key->d));
d98 1
a98 1
  LC (BN_print_fp, (stdout, key->p));
d100 1
a100 1
  LC (BN_print_fp, (stdout, key->q));
d105 2
a106 2
  len = LC (RSA_private_encrypt, (strlen (dec) + 1, dec, enc, key,
				  RSA_PKCS1_PADDING));
d112 1
a112 1
      erg = LC (RSA_public_decrypt, (len, enc, dec, key, RSA_PKCS1_PADDING));
d122 1
a122 1
  len = LC (i2d_RSAPublicKey, (key, NULL));
d124 1
a124 1
  len = LC (i2d_RSAPublicKey, (key, &foo));
d130 1
a130 1
  len = LC (i2d_RSAPrivateKey, (key, NULL));
d132 1
a132 1
  len = LC (i2d_RSAPrivateKey, (key, &foo));
d138 1
a138 1
  LC (RSA_free, (key));
@


1.14
log
@str[n]{cpy,cat} -> strl{cpy,cat}, sprintf -> snprintf
@
text
@d1 1
a1 1
/*	$OpenBSD: rsakeygen.c,v 1.13 2001/01/27 12:03:38 niklas Exp $	*/
d87 1
a87 1
  if (key == NULL) 
@


1.13
log
@(c) 2001
@
text
@d1 1
a1 1
/*	$OpenBSD: rsakeygen.c,v 1.12 2001/01/27 11:24:43 niklas Exp $	*/
d84 1
a84 1
  strcpy (dec, TEST_STRING);
@


1.12
log
@Cleanup the MP_FLAVOUR situation.  Still needs work.
@
text
@d1 1
a1 1
/*	$OpenBSD: rsakeygen.c,v 1.11 2001/01/26 11:08:24 niklas Exp $	*/
d6 2
a7 1
 * Copyright (c) 1999 Niklas Hallqvist.  All rights reserved.
@


1.11
log
@apps/certpatch/certpatch.c: Merge with EOM 1.11
regress/rsakeygen/rsakeygen.c: Merge with EOM 1.10
regress/x509/x509test.c: Merge with EOM 1.9

author: ho
Only include <gmp.h> with MP_FLAVOUR_GMP.
@
text
@d1 1
a1 1
/*	$OpenBSD: rsakeygen.c,v 1.10 2000/12/19 18:54:59 mickey Exp $	*/
a43 4
#if MP_FLAVOUR == MP_FLAVOUR_GMP
#  include <gmp.h>
#endif

d46 1
@


1.10
log
@gmp is gone, make it build again
@
text
@d1 2
a2 2
/*	$OpenBSD: rsakeygen.c,v 1.9 1999/08/26 22:30:46 niklas Exp $	*/
/*	$EOM: rsakeygen.c,v 1.9 1999/08/12 22:34:30 niklas Exp $	*/
d43 4
@


1.9
log
@regress/rsakeygen/rsakeygen.c: Merge with EOM 1.9
regress/x509/x509test.c: Merge with EOM 1.7
DESIGN-NOTES: Merge with EOM 1.48
README.PKI: Merge with EOM 1.6
TO-DO: Merge with EOM 1.44
cert.c: Merge with EOM 1.12

author: niklas
Add support for dynamic loading of optional facilities, libcrypto first.
@
text
@d1 1
a1 1
/*	$OpenBSD: rsakeygen.c,v 1.8 1999/07/17 21:54:38 niklas Exp $	*/
a42 1
#include <gmp.h>
@


1.9.6.1
log
@Pull in isakmpd from 2.9 to 2.8 branch.
@
text
@d1 2
a2 2
/*	$OpenBSD: rsakeygen.c,v 1.13 2001/01/27 12:03:38 niklas Exp $	*/
/*	$EOM: rsakeygen.c,v 1.10 2000/12/21 15:18:53 ho Exp $	*/
d6 1
a6 2
 * Copyright (c) 1999, 2001 Niklas Hallqvist.  All rights reserved.
 * Copyright (c) 2001 Håkan Olsson.  All rights reserved.
d43 1
a46 1
#include "math_mp.h"
@


1.8
log
@regress/rsakeygen/Makefile: Merge with EOM 1.4
regress/rsakeygen/rsakeygen.c: Merge with EOM 1.8
regress/x509/Makefile: Merge with EOM 1.6
regress/x509/x509test.c: Merge with EOM 1.6
regress/Makefile: Merge with EOM 1.8
samples/VPN-east.conf: Merge with EOM 1.6
samples/VPN-west.conf: Merge with EOM 1.6
samples/singlehost-east.conf: Merge with EOM 1.3
samples/singlehost-west.conf: Merge with EOM 1.3
sysdep/openbsd/Makefile.sysdep: Merge with EOM 1.5
x509.h: Merge with EOM 1.6
x509.c: Merge with EOM 1.17
DESIGN-NOTES: Merge with EOM 1.46
Makefile: Merge with EOM 1.55
cert.c: Merge with EOM 1.11
cert.h: Merge with EOM 1.6
exchange.c: Merge with EOM 1.109
exchange.h: Merge with EOM 1.26
ike_auth.c: Merge with EOM 1.32
ike_phase_1.c: Merge with EOM 1.7
init.c: Merge with EOM 1.16
isakmpd.conf.5: Merge with EOM 1.27
README.PKI: Merge with EOM 1.1

author: niklas
From Niels Provos, edited by me: certificate support using SSLeay
@
text
@d1 2
a2 2
/*	$OpenBSD: rsakeygen.c,v 1.7 1999/04/27 21:02:56 niklas Exp $	*/
/*	$EOM: rsakeygen.c,v 1.8 1999/07/17 20:44:13 niklas Exp $	*/
d45 1
a45 2
#include <ssl/rsa.h>

d48 3
a50 3
#define nibble2bin(y) (tolower((y)) < 'a' ? (y) - '0': tolower((y)) - 'a' + 10)
#define hexchar2bin(x) ((nibble2bin((x)[0]) << 4) + nibble2bin((x)[1]))
#define nibble2c(x) ((x) >= 10 ? ('a'-10+(x)) : ('0' + (x)))
d59 1
a59 3
    {
      *bin++ = hexchar2bin(asc);
    }
d69 3
d73 7
a79 1
  RSA *key;
d81 3
a83 2
  log_debug_cmd ((enum log_classes)LOG_CRYPTO, 99);
  strcpy(dec, TEST_STRING);
d85 1
a85 1
  key = RSA_generate_key(1024, RSA_F4, NULL, NULL);
d92 4
a95 2
  printf ("n: 0x"); BN_print_fp(stdout, key->n);
  printf ("\ne: 0x"); BN_print_fp (stdout, key->e);
d98 10
a107 5
  printf ("n: 0x"); BN_print_fp (stdout, key->n);
  printf ("\ne: 0x"); BN_print_fp (stdout, key->e);
  printf ("\nd: 0x"); BN_print_fp (stdout, key->d);
  printf ("\np: 0x"); BN_print_fp (stdout, key->p);
  printf ("\nq: 0x"); BN_print_fp (stdout, key->q);
d112 4
a115 3
  if ((len = RSA_private_encrypt (strlen(dec)+1, dec, enc, key,
				  RSA_PKCS1_PADDING)) == -1)
    printf ("FAILED ");
d117 3
a119 2
    /* Decrypt/Verify with Public Key */
    erg = RSA_public_decrypt (len, enc, dec, key, RSA_PKCS1_PADDING);
d121 5
a125 4
  if (erg == -1 || strcmp(dec, TEST_STRING))
    printf ("FAILED ");
  else
    printf ("OKAY ");
d129 3
a131 3
  len = i2d_RSAPublicKey(key, NULL);
  foo = asn = malloc(len);
  len = i2d_RSAPublicKey(key, &foo);
d137 3
a139 3
  len = i2d_RSAPrivateKey(key, NULL);
  foo = asn = malloc(len);
  len = i2d_RSAPrivateKey(key, &foo);
d145 1
a145 1
  RSA_free(key);
@


1.7
log
@regress/exchange/Makefile: Merge with EOM 1.6
regress/exchange/run.sh: Merge with EOM 1.5
regress/rsakeygen/rsakeygen.c: Merge with EOM 1.7
genconstants.sh: Merge with EOM 1.6
genfields.sh: Merge with EOM 1.5

author: niklas
1999
@
text
@d1 2
a2 2
/*	$OpenBSD: rsakeygen.c,v 1.6 1999/03/24 14:58:15 niklas Exp $	*/
/*	$EOM: rsakeygen.c,v 1.7 1999/04/05 18:27:38 niklas Exp $	*/
d5 1
a5 1
 * Copyright (c) 1998 Niels Provos.  All rights reserved.
d45 2
a47 3
#include "gmp_util.h"
#include "asn.h"
#include "pkcs.h"
d53 2
d68 2
a69 4
  char *data = "Niels ist ein Luser!";
  u_int8_t *enc, *dec, *asn;
  u_int32_t enclen;
  u_int16_t len;
d73 1
a73 2
  struct rsa_public_key key;
  struct rsa_private_key priv;
d76 8
a83 1
  pkcs_generate_rsa_keypair (&key, &priv, 1024);
d85 2
a86 2
  printf ("n: 0x"); mpz_out_str (stdout, 16, key.n);
  printf ("\ne: 0x"); mpz_out_str (stdout, 16, key.e);
d89 5
a93 5
  printf ("n: 0x"); mpz_out_str (stdout, 16, priv.n);
  printf ("\ne: 0x"); mpz_out_str (stdout, 16, priv.e);
  printf ("\nd: 0x"); mpz_out_str (stdout, 16, priv.d);
  printf ("\np: 0x"); mpz_out_str (stdout, 16, priv.p);
  printf ("\nq: 0x"); mpz_out_str (stdout, 16, priv.q);
d98 2
a99 2
  if (!pkcs_rsa_encrypt (PKCS_PRIVATE, NULL, &priv, data, strlen(data)+1,
			 &enc, &enclen))
d103 1
a103 1
    erg = pkcs_rsa_decrypt (PKCS_PRIVATE, &key, NULL, enc, &dec, &len);
d105 1
a105 1
  if (!erg || strcmp(data,dec))
d112 3
a114 1
  asn = pkcs_public_key_to_asn (&key);
d116 1
a116 1
  fwrite (asn, asn_get_len (asn), 1, fd);
d120 3
a122 1
  asn = pkcs_private_key_to_asn (&priv);
d124 1
a124 1
  fwrite (asn, asn_get_len (asn), 1, fd);
d128 1
a128 2
  pkcs_free_public_key (&key);
  pkcs_free_private_key (&priv);
@


1.6
log
@Merge with EOM 1.6
RSA fixes and optimiations from Ilya Tsindlekht, via Niels Provos
@
text
@d1 2
a2 2
/*	$OpenBSD: rsakeygen.c,v 1.5 1999/03/02 15:27:36 niklas Exp $	*/
/*	$EOM: rsakeygen.c,v 1.6 1999/03/13 17:43:24 niklas Exp $	*/
d6 1
@


1.5
log
@RCS tags
@
text
@d1 2
a2 2
/*	$OpenBSD: rsakeygen.c,v 1.4 1999/02/26 04:07:04 niklas Exp $	*/
/*	$EOM: rsakeygen.c,v 1.5 1998/10/07 16:40:51 niklas Exp $	*/
d92 1
a92 1
  if (!pkcs_rsa_encrypt (PKCS_PRIVATE, priv.n, priv.d, data, strlen(data)+1,
d97 1
a97 1
    erg = pkcs_rsa_decrypt (PKCS_PRIVATE, key.n, key.e, enc, &dec, &len);
@


1.4
log
@Merge from the Ericsson repository
| revision 1.5
| date: 1998/10/07 16:40:51;  author: niklas;  state: Exp;  lines: +3 -2
| Clean out warnings on alpha
| ----------------------------
| revision 1.4
| date: 1998/08/20 14:09:07;  author: provos;  state: Exp;  lines: +3 -3
| rename pkcs_{set,get}_{public,private}_key to something more understandable,
| it confused me, so i suppose it will also confuse others.
| ----------------------------
| revision 1.3
| date: 1998/08/11 21:06:20;  author: niklas;  state: Exp;  lines: +1 -2
| Remove unused variables
| ----------------------------
| revision 1.2
| date: 1998/08/11 20:30:38;  author: provos;  state: Exp;  lines: +4 -3
| update to reflect recent changes
| ----------------------------
| revision 1.1
| date: 1998/08/09 20:04:41;  author: provos;  state: Exp;
| a tool for generating rsa keypair, a spin off of this might be used later
| as key generation tool for the daemon.
| =============================================================================
@
text
@d1 2
a2 1
/*	$Id: rsakeygen.c,v 1.5 1998/10/07 16:40:51 niklas Exp $	*/
@


1.3
log
@Not clear if we want this
@
text
@d1 1
a1 1
/*	$OpenBSD: rsakeygen.c,v 1.2 1998/11/15 00:44:11 niklas Exp $	*/
@


1.2
log
@openBSD RCS IDs
@
text
@d1 1
a1 1
/*	$OpenBSD: rsakeygen.c,v 1.1.1.1 1998/11/15 00:03:50 niklas Exp $	*/
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$Id: rsakeygen.c,v 1.5 1998/10/07 16:40:51 niklas Exp $	*/
@


1.1.1.1
log
@Initial import of isakmpd, an IKE (ISAKMP/Oakley) implementation for the
OpenBSD IPSEC stack by me, Niklas Hallqvist and Niels Provos, funded by
Ericsson Radio Systems.  It is not yet complete or usable in a real scenario
but the missing pieces will soon be there.  The early commit is for people
who wants early access and who are not afraid of looking at source.
isakmpd interops with Cisco, Timestep, SSH & Pluto (Linux FreeS/WAN) so
far, so it is not that incomplete.  It is really mostly configuration that
is lacking.
@
text
@@
