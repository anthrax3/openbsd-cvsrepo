head	1.26;
access;
symbols
	OPENBSD_6_0:1.24.0.2
	OPENBSD_6_0_BASE:1.24
	OPENBSD_5_9:1.23.0.4
	OPENBSD_5_9_BASE:1.23
	OPENBSD_5_8:1.23.0.6
	OPENBSD_5_8_BASE:1.23
	OPENBSD_5_7:1.23.0.2
	OPENBSD_5_7_BASE:1.23
	OPENBSD_5_6:1.20.0.6
	OPENBSD_5_6_BASE:1.20
	OPENBSD_5_5:1.20.0.4
	OPENBSD_5_5_BASE:1.20
	OPENBSD_5_4:1.19.0.16
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.19.0.14
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.19.0.12
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.19
	OPENBSD_5_1:1.19.0.10
	OPENBSD_5_0:1.19.0.8
	OPENBSD_5_0_BASE:1.19
	OPENBSD_4_9:1.19.0.6
	OPENBSD_4_9_BASE:1.19
	OPENBSD_4_8:1.19.0.4
	OPENBSD_4_8_BASE:1.19
	OPENBSD_4_7:1.19.0.2
	OPENBSD_4_7_BASE:1.19
	OPENBSD_4_6:1.18.0.10
	OPENBSD_4_6_BASE:1.18
	OPENBSD_4_5:1.18.0.6
	OPENBSD_4_5_BASE:1.18
	OPENBSD_4_4:1.18.0.4
	OPENBSD_4_4_BASE:1.18
	OPENBSD_4_3:1.18.0.2
	OPENBSD_4_3_BASE:1.18
	OPENBSD_4_2:1.17.0.4
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.17.0.2
	OPENBSD_4_1_BASE:1.17
	OPENBSD_4_0:1.16.0.2
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.15.0.8
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.15.0.6
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.15.0.4
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.15.0.2
	OPENBSD_3_6_BASE:1.15
	OPENBSD_3_5:1.14.0.4
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.14.0.2
	OPENBSD_3_4_BASE:1.14
	OPENBSD_3_3:1.11.0.6
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.4
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.11.0.2
	OPENBSD_3_1_BASE:1.11
	OPENBSD_3_0:1.10.0.2
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9:1.9.0.16
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_8:1.9.0.14
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.9.0.12
	OPENBSD_2_7_BASE:1.9
	OPENBSD_2_6:1.9.0.10
	OPENBSD_2_6_BASE:1.9
	OPENBSD_2_5:1.9.0.8
	OPENBSD_2_5_BASE:1.9
	OPENBSD_2_4:1.9.0.6
	OPENBSD_2_4_BASE:1.9
	OPENBSD_2_3:1.9.0.4
	OPENBSD_2_3_BASE:1.9
	OPENBSD_2_2:1.9.0.2
	OPENBSD_2_2_BASE:1.9
	OPENBSD_2_1:1.7.0.2
	OPENBSD_2_1_BASE:1.7
	OPENBSD_2_0:1.5.0.2
	OPENBSD_2_0_BASE:1.5
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.26
date	2017.01.21.08.31.44;	author krw;	state Exp;
branches;
next	1.25;
commitid	6pABae7LLaEPI7Ds;

1.25
date	2016.07.28.21.37.10;	author tedu;	state Exp;
branches;
next	1.24;
commitid	h8TCbEtaauJ8N8vq;

1.24
date	2016.06.07.01.29.38;	author tedu;	state Exp;
branches;
next	1.23;
commitid	aJp7bbwjTwgUYbAT;

1.23
date	2015.01.20.18.22.21;	author deraadt;	state Exp;
branches;
next	1.22;
commitid	F55lwc3gS4GN2mLs;

1.22
date	2015.01.16.06.40.00;	author deraadt;	state Exp;
branches;
next	1.21;
commitid	Uu5nFG3wCl0LACBb;

1.21
date	2014.11.26.18.34.51;	author millert;	state Exp;
branches;
next	1.20;
commitid	9QOFSShUOtA0kQLF;

1.20
date	2013.11.15.22.20.04;	author millert;	state Exp;
branches;
next	1.19;

1.19
date	2009.10.27.23.59.34;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2007.09.02.15.19.25;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2007.02.25.16.41.42;	author jmc;	state Exp;
branches;
next	1.16;

1.16
date	2006.03.20.18.55.13;	author dhill;	state Exp;
branches;
next	1.15;

1.15
date	2004.07.17.02.14.33;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2003.07.28.06.13.26;	author tedu;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.02.20.06.16;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2003.04.04.22.12.35;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2002.02.16.21.27.37;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2001.06.04.14.59.49;	author mickey;	state Exp;
branches;
next	1.9;

1.9
date	97.07.05.20.51.23;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	97.06.25.18.34.30;	author kstailey;	state Exp;
branches;
next	1.7;

1.7
date	97.04.16.04.07.37;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	97.01.15.23.41.38;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	96.09.16.02.32.34;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	96.09.01.15.27.29;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.03.21.00.16.29;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.02.22.11.30.54;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.43.46;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.43.46;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.26
log
@Nuke whitespace foolish enough to expose itself during the great
"warning:" rectification.
@
text
@/*	$OpenBSD: main.c,v 1.25 2016/07/28 21:37:10 tedu Exp $	*/
/*	$NetBSD: main.c,v 1.13 1997/07/01 05:37:51 lukem Exp $	*/

/*
 * Copyright (c) 1983, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/stat.h>
#include <sys/time.h>

#include <ufs/ffs/fs.h>
#include <ufs/ufs/dinode.h>
#include <protocols/dumprestore.h>

#include <err.h>
#include <paths.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <limits.h>

#include "restore.h"
#include "extern.h"

int	bflag = 0, cvtflag = 0, dflag = 0, vflag = 0, yflag = 0;
int	hflag = 1, mflag = 1, Nflag = 0;
char	command = '\0';
long	dumpnum = 1;
long	volno = 0;
long	ntrec;
char	*dumpmap;
char	*usedinomap;
ino_t	maxino;
time_t	dumptime;
time_t	dumpdate;
FILE	*terminal;
char	*tmpdir;

static void obsolete(int *, char **[]);
static void usage(void);

int
main(int argc, char *argv[])
{
	int ch;
	ino_t ino;
	char *inputdev;
	char *symtbl = "./restoresymtable";
	char *p, name[PATH_MAX];

	/* Temp files should *not* be readable.  We set permissions later. */
	(void)umask(077);

	if (argc < 2)
		usage();

	if ((inputdev = getenv("TAPE")) == NULL || *inputdev == '\0')
		inputdev = _PATH_DEFTAPE;
	if ((tmpdir = getenv("TMPDIR")) == NULL || *tmpdir == '\0')
		tmpdir = _PATH_TMP;
	if ((tmpdir = strdup(tmpdir)) == NULL)
		err(1, NULL);
	for (p = tmpdir + strlen(tmpdir) - 1; p >= tmpdir && *p == '/'; p--)
		continue;
	obsolete(&argc, &argv);
	while ((ch = getopt(argc, argv, "b:cdf:himNRrs:tvxy")) != -1)
		switch(ch) {
		case 'b':
			/* Change default tape blocksize. */
			bflag = 1;
			ntrec = strtol(optarg, &p, 10);
			if (*p)
				errx(1, "illegal blocksize -- %s", optarg);
			if (ntrec <= 0)
				errx(1, "block size must be greater than 0");
			break;
		case 'c':
			cvtflag = 1;
			break;
		case 'd':
			dflag = 1;
			break;
		case 'f':
			inputdev = optarg;
			break;
		case 'h':
			hflag = 0;
			break;
		case 'i':
		case 'R':
		case 'r':
		case 't':
		case 'x':
			if (command != '\0')
				errx(1,
				    "%c and %c options are mutually exclusive",
				    ch, command);
			command = ch;
			break;
		case 'm':
			mflag = 0;
			break;
		case 'N':
			Nflag = 1;
			break;
		case 's':
			/* Dumpnum (skip to) for multifile dump tapes. */
			dumpnum = strtol(optarg, &p, 10);
			if (*p)
				errx(1, "illegal dump number -- %s", optarg);
			if (dumpnum <= 0)
				errx(1, "dump number must be greater than 0");
			break;
		case 'v':
			vflag = 1;
			break;
		case 'y':
			yflag = 1;
			break;
		default:
			usage();
		}
	argc -= optind;
	argv += optind;

	if (command == '\0')
		errx(1, "none of i, R, r, t or x options specified");

	if (signal(SIGINT, onintr) == SIG_IGN)
		(void)signal(SIGINT, SIG_IGN);
	if (signal(SIGTERM, onintr) == SIG_IGN)
		(void)signal(SIGTERM, SIG_IGN);
	setvbuf(stderr, NULL, _IOLBF, 0);

	atexit(cleanup);

	setinput(inputdev);

	if (argc == 0) {
		argc = 1;
		*--argv = ".";
	}

	switch (command) {
	/*
	 * Interactive mode.
	 */
	case 'i':
		setup();
		extractdirs(1);
		initsymtable(NULL);
		runcmdshell();
		break;
	/*
	 * Incremental restoration of a file system.
	 */
	case 'r':
		setup();
		if (dumptime > 0) {
			/*
			 * This is an incremental dump tape.
			 */
			Vprintf(stdout, "Begin incremental restore\n");
			initsymtable(symtbl);
			extractdirs(1);
			removeoldleaves();
			Vprintf(stdout, "Calculate node updates.\n");
			treescan(".", ROOTINO, nodeupdates);
			findunreflinks();
			removeoldnodes();
		} else {
			/*
			 * This is a level zero dump tape.
			 */
			Vprintf(stdout, "Begin level 0 restore\n");
			initsymtable(NULL);
			extractdirs(1);
			Vprintf(stdout, "Calculate extraction list.\n");
			treescan(".", ROOTINO, nodeupdates);
		}
		createleaves(symtbl);
		createlinks();
		setdirmodes(FORCE);
		checkrestore();
		if (dflag) {
			Vprintf(stdout, "Verify the directory structure\n");
			treescan(".", ROOTINO, verifyfile);
		}
		dumpsymtable(symtbl, (long)1);
		break;
	/*
	 * Resume an incremental file system restoration.
	 */
	case 'R':
		initsymtable(symtbl);
		skipmaps();
		skipdirs();
		createleaves(symtbl);
		createlinks();
		setdirmodes(FORCE);
		checkrestore();
		dumpsymtable(symtbl, (long)1);
		break;
	/*
	 * List contents of tape.
	 */
	case 't':
		setup();
		extractdirs(0);
		initsymtable(NULL);
		while (argc--) {
			canon(*argv++, name, sizeof name);
			ino = dirlookup(name);
			if (ino == 0)
				continue;
			treescan(name, ino, listfile);
		}
		break;
	/*
	 * Batch extraction of tape contents.
	 */
	case 'x':
		setup();
		extractdirs(1);
		initsymtable(NULL);
		while (argc--) {
			canon(*argv++, name, sizeof name);
			ino = dirlookup(name);
			if (ino == 0)
				continue;
			if (mflag)
				pathcheck(name);
			treescan(name, ino, addfile);
		}
		createfiles();
		createlinks();
		setdirmodes(0);
		if (dflag)
			checkrestore();
		break;
	}
	return (0);
}

static void
usage(void)
{

	(void)fprintf(stderr, "usage: %s [-chimRrtvxy] [-b blocksize] [-f file] [-s fileno] [file ...]\n", __progname);
	exit(1);
}

/*
 * obsolete --
 *	Change set of key letters and ordered arguments into something
 *	getopt(3) will like.
 */
static void
obsolete(int *argcp, char **argvp[])
{
	int argc, flags;
	char *ap, **argv, *flagsp, **nargv, *p;
	size_t len;

	/* Setup. */
	argv = *argvp;
	argc = *argcp;

	/* Return if no arguments or first argument has leading dash. */
	ap = argv[1];
	if (argc == 1 || *ap == '-')
		return;

	/* Allocate space for new arguments. */
	if ((*argvp = nargv = calloc(argc + 1, sizeof(char *))) == NULL ||
	    (p = flagsp = malloc(strlen(ap) + 2)) == NULL)
		err(1, NULL);

	*nargv++ = *argv;
	argv += 2;

	for (flags = 0; *ap; ++ap) {
		switch (*ap) {
		case 'b':
		case 'f':
		case 's':
			if (*argv == NULL) {
				warnx("option requires an argument -- %c", *ap);
				usage();
			}
			len = strlen(*argv) + 2 + 1;
			if ((nargv[0] = malloc(len)) == NULL)
				err(1, NULL);
			nargv[0][0] = '-';
			nargv[0][1] = *ap;
			(void)strlcpy(&nargv[0][2], *argv, len-2);
			++argv;
			++nargv;
			break;
		default:
			if (!flags) {
				*p++ = '-';
				flags = 1;
			}
			*p++ = *ap;
			break;
		}
	}

	/* Terminate flags. */
	if (flags) {
		*p = '\0';
		*nargv++ = flagsp;
	} else {
		free(flagsp);
	}

	/* Copy remaining arguments. */
	while ((*nargv++ = *argv++))
		continue;

	/* Update argument count. */
	*argcp = nargv - *argvp - 1;
}
@


1.25
log
@after getenv, check for empty string too. ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.24 2016/06/07 01:29:38 tedu Exp $	*/
d63 1
a63 1
FILE 	*terminal;
@


1.24
log
@per trending style, add continue to emtpy loop bodies.
ok mglocker
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.23 2015/01/20 18:22:21 deraadt Exp $	*/
d84 1
a84 1
	if ((inputdev = getenv("TAPE")) == NULL)
d86 1
a86 1
	if ((tmpdir = getenv("TMPDIR")) == NULL)
@


1.23
log
@Adjust <sys/param.h> comments regarding use of use of MAXFRAG, or
delete <sys/param.h> if now possible
ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.22 2015/01/16 06:40:00 deraadt Exp $	*/
d91 1
a91 1
		;
d347 1
a347 1
		;
@


1.22
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.21 2014/11/26 18:34:51 millert Exp $	*/
a32 1
#include <sys/param.h>	/* MAXFRAG */
@


1.21
log
@Prefer setvbuf() to setlinebuf() for portability; ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.20 2013/11/15 22:20:04 millert Exp $	*/
d33 1
a33 1
#include <sys/param.h>
d48 1
d77 1
a77 1
	char *p, name[MAXPATHLEN];
@


1.20
log
@Include unistd.h as it is the standard location for getopt().
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.19 2009/10/27 23:59:34 deraadt Exp $	*/
d160 1
a160 1
	setlinebuf(stderr);
@


1.19
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.18 2007/09/02 15:19:25 deraadt Exp $	*/
d47 1
@


1.18
log
@use calloc() to avoid malloc(n * m) overflows; checked by djm canacar jsg
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.17 2007/02/25 16:41:42 jmc Exp $	*/
a31 14

#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1983, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)main.c	8.3 (Berkeley) 9/13/94";
#else
static const char rcsid[] = "$OpenBSD: main.c,v 1.17 2007/02/25 16:41:42 jmc Exp $";
#endif
#endif /* not lint */
@


1.17
log
@one application does not need five synopses;
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.16 2006/03/20 18:55:13 dhill Exp $	*/
d43 1
a43 1
static const char rcsid[] = "$OpenBSD: main.c,v 1.16 2006/03/20 18:55:13 dhill Exp $";
d315 1
a315 1
	if ((*argvp = nargv = malloc((argc + 1) * sizeof(char *))) == NULL ||
@


1.16
log
@NetBSD Coverity CID 2305: Fix memory leak.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.15 2004/07/17 02:14:33 deraadt Exp $	*/
d43 1
a43 1
static const char rcsid[] = "$OpenBSD: main.c,v 1.15 2004/07/17 02:14:33 deraadt Exp $";
d289 1
a289 5
	(void)fprintf(stderr, "usage: %s -i [-chmvy] [-b blocksize] [-f file] [-s fileno]\n", __progname);
	(void)fprintf(stderr, "       %s -R [-cvy] [-b blocksize] [-f file] [-s fileno]\n", __progname);
	(void)fprintf(stderr, "       %s -r [-cvy] [-b blocksize] [-f file] [-s fileno]\n", __progname);
	(void)fprintf(stderr, "       %s -t [-chvy] [-b blocksize] [-f file] [-s fileno] [file ...]\n", __progname);
	(void)fprintf(stderr, "       %s -x [-chmvy] [-b blocksize] [-f file] [-s fileno] [file ...]\n", __progname);
@


1.15
log
@some ansi; khalek@@linuxgamers.net
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.14 2003/07/28 06:13:26 tedu Exp $	*/
d43 1
a43 1
static const char rcsid[] = "$OpenBSD: main.c,v 1.14 2003/07/28 06:13:26 tedu Exp $";
d358 2
@


1.14
log
@rcsid should say openbsd.  make 'em const while here.
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.13 2003/06/02 20:06:16 millert Exp $	*/
d43 1
a43 1
static const char rcsid[] = "$OpenBSD$";
d83 1
a83 3
main(argc, argv)
	int argc;
	char *argv[];
d286 1
a286 1
usage()
d303 1
a303 3
obsolete(argcp, argvp)
	int *argcp;
	char **argvp[];
@


1.13
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.12 2003/04/04 22:12:35 deraadt Exp $	*/
d43 1
a43 1
static char rcsid[] = "$NetBSD: main.c,v 1.11 1996/03/15 22:39:39 scottr Exp $";
@


1.12
log
@simple string fixes; ok matthieu tedu tdeval
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.11 2002/02/16 21:27:37 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.11
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.10 2001/06/04 14:59:49 mickey Exp $	*/
d258 1
a258 1
			canon(*argv++, name);
d273 1
a273 1
			canon(*argv++, name);
d315 1
d343 2
a344 1
			if ((nargv[0] = malloc(strlen(*argv) + 2 + 1)) == NULL)
d348 1
a348 1
			(void)strcpy(&nargv[0][2], *argv);
@


1.10
log
@return from main() don't exit
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.9 1997/07/05 20:51:23 millert Exp $	*/
d83 2
a84 2
static void obsolete __P((int *, char **[]));
static void usage __P((void));
@


1.9
log
@vprintf -> Vprintf and dprintf -> Dprintf to avoid confusion
Use err/errx and warn/warnx where it makes sense.
Some sprintf -> snprintf, strcpy -> strncpy, and strcat -> strncat.
Honor $TMPDIR (based on changes from NetBSD)
Use __progname not "restore" (we could be called as rrestore).
Some -Wall happiness.
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.8 1997/06/25 18:34:30 kstailey Exp $	*/
d288 1
a288 2
	exit(0);
	/* NOTREACHED */
@


1.8
log
@(foo *)0 -> NULL
@
text
@d1 2
a2 2
/*	$OpenBSD: main.c,v 1.7 1997/04/16 04:07:37 millert Exp $	*/
/*	$NetBSD: main.c,v 1.11 1996/03/15 22:39:39 scottr Exp $	*/
d52 1
a59 1
#include <errno.h>
d81 1
d98 1
a98 1
	(void) umask(077);
d105 6
d176 1
a176 1
		(void) signal(SIGINT, SIG_IGN);
d178 1
a178 1
		(void) signal(SIGTERM, SIG_IGN);
d209 1
a209 1
			vprintf(stdout, "Begin incremental restore\n");
d213 1
a213 1
			vprintf(stdout, "Calculate node updates.\n");
d221 1
a221 1
			vprintf(stdout, "Begin level 0 restore\n");
d224 1
a224 1
			vprintf(stdout, "Calculate extraction list.\n");
d232 1
a232 1
			vprintf(stdout, "Verify the directory structure\n");
d296 5
a300 5
	(void)fprintf(stderr, "usage: restore -i [-chmvy] [-b blocksize] [-f file] [-s fileno]\n");
	(void)fprintf(stderr, "       restore -R [-cvy] [-b blocksize] [-f file] [-s fileno]\n");
	(void)fprintf(stderr, "       restore -r [-cvy] [-b blocksize] [-f file] [-s fileno]\n");
	(void)fprintf(stderr, "       restore -t [-chvy] [-b blocksize] [-f file] [-s fileno] [file ...]\n");
	(void)fprintf(stderr, "       restore -x [-chmvy] [-b blocksize] [-f file] [-s fileno] [file ...]\n");
d368 2
a369 1
	while (*nargv++ = *argv++);
@


1.7
log
@No need for "pathnames.h" now that _PATH_DEFTAPE is in <paths.h>
Fix rmt -> rst in man page and change ".Nm restore" -> ".Nm"
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.6 1997/01/15 23:41:38 millert Exp $	*/
d215 1
a215 1
			initsymtable((char *)0);
d249 1
a249 1
		initsymtable((char *)0);
d264 1
a264 1
		initsymtable((char *)0);
@


1.6
log
@getopt(3) returns -1 when out of args, not EOF, whee!
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.5 1996/09/16 02:32:34 millert Exp $	*/
d60 1
a65 1
#include "pathnames.h"
@


1.5
log
@Set umask to be read only by owner until we set real file permissions.
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.4 1996/09/01 15:27:29 deraadt Exp $	*/
d105 1
a105 1
	while ((ch = getopt(argc, argv, "b:cdf:himNRrs:tvxy")) != EOF)
@


1.4
log
@lose setuid
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.3 1996/03/21 00:16:29 niklas Exp $	*/
d95 3
@


1.3
log
@From NetBSD: Merge of 960317
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a80 2
uid_t	uid;		/* real uid */
uid_t	euid;		/* effective uid */
a94 4

	uid = getuid();
	euid = geteuid();
	(void) seteuid(uid);
@


1.2
log
@From NetBSD:
support $TAPE.
@
text
@d1 2
a2 1
/*	$NetBSD: main.c,v 1.10 1996/02/06 00:00:22 mrg Exp $	*/
d47 1
a47 1
static char rcsid[] = "$NetBSD: main.c,v 1.10 1996/02/06 00:00:22 mrg Exp $";
d81 2
d97 4
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: main.c,v 1.9 1995/03/18 14:59:46 cgd Exp $	*/
d46 1
a46 1
static char rcsid[] = "$NetBSD: main.c,v 1.9 1995/03/18 14:59:46 cgd Exp $";
d91 1
a91 1
	char *inputdev = _PATH_DEFTAPE;
d98 2
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
