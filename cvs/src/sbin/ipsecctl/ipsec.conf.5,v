head	1.151;
access;
symbols
	OPENBSD_6_1:1.151.0.6
	OPENBSD_6_1_BASE:1.151
	OPENBSD_6_0:1.151.0.4
	OPENBSD_6_0_BASE:1.151
	OPENBSD_5_9:1.151.0.2
	OPENBSD_5_9_BASE:1.151
	OPENBSD_5_8:1.149.0.4
	OPENBSD_5_8_BASE:1.149
	OPENBSD_5_7:1.148.0.2
	OPENBSD_5_7_BASE:1.148
	OPENBSD_5_6:1.145.0.4
	OPENBSD_5_6_BASE:1.145
	OPENBSD_5_5:1.144.0.4
	OPENBSD_5_5_BASE:1.144
	OPENBSD_5_4:1.143.0.2
	OPENBSD_5_4_BASE:1.143
	OPENBSD_5_3:1.142.0.2
	OPENBSD_5_3_BASE:1.142
	OPENBSD_5_2:1.141.0.2
	OPENBSD_5_2_BASE:1.141
	OPENBSD_5_1_BASE:1.136
	OPENBSD_5_1:1.136.0.2
	OPENBSD_5_0:1.133.0.2
	OPENBSD_5_0_BASE:1.133
	OPENBSD_4_9:1.130.0.2
	OPENBSD_4_9_BASE:1.130
	OPENBSD_4_8:1.126.0.2
	OPENBSD_4_8_BASE:1.126
	OPENBSD_4_7:1.124.0.2
	OPENBSD_4_7_BASE:1.124
	OPENBSD_4_6:1.122.0.6
	OPENBSD_4_6_BASE:1.122
	OPENBSD_4_5:1.122.0.2
	OPENBSD_4_5_BASE:1.122
	OPENBSD_4_4:1.118.0.2
	OPENBSD_4_4_BASE:1.118
	OPENBSD_4_3:1.117.0.2
	OPENBSD_4_3_BASE:1.117
	OPENBSD_4_2:1.114.0.2
	OPENBSD_4_2_BASE:1.114
	OPENBSD_4_1:1.113.0.2
	OPENBSD_4_1_BASE:1.113
	OPENBSD_4_0:1.97.0.2
	OPENBSD_4_0_BASE:1.97
	OPENBSD_3_9:1.30.0.2
	OPENBSD_3_9_BASE:1.30
	OPENBSD_3_8:1.19.0.2
	OPENBSD_3_8_BASE:1.19;
locks; strict;
comment	@.\" @;


1.151
date	2015.12.09.21.41.50;	author naddy;	state Exp;
branches;
next	1.150;
commitid	CLwtYUTkBZ3FXV1w;

1.150
date	2015.11.01.21.26.48;	author jmc;	state Exp;
branches;
next	1.149;
commitid	WWHUg7NSwgnfw8Dy;

1.149
date	2015.05.25.19.29.36;	author naddy;	state Exp;
branches;
next	1.148;
commitid	30znlICNP5AFkaPd;

1.148
date	2015.02.28.21.51.57;	author bentley;	state Exp;
branches;
next	1.147;
commitid	NNu2UZnsd5zmNVYD;

1.147
date	2015.01.10.15.03.50;	author sobrado;	state Exp;
branches;
next	1.146;
commitid	afT1L6Xjb6NrXQXU;

1.146
date	2015.01.02.18.28.23;	author sobrado;	state Exp;
branches;
next	1.145;
commitid	innObbNMMMNV9cDY;

1.145
date	2014.03.19.12.49.00;	author sthen;	state Exp;
branches;
next	1.144;

1.144
date	2013.11.01.10.42.38;	author henning;	state Exp;
branches;
next	1.143;

1.143
date	2013.06.29.09.08.41;	author jmc;	state Exp;
branches;
next	1.142;

1.142
date	2012.08.12.01.54.53;	author lteo;	state Exp;
branches;
next	1.141;

1.141
date	2012.07.13.20.44.11;	author jmc;	state Exp;
branches;
next	1.140;

1.140
date	2012.07.13.19.36.07;	author mikeb;	state Exp;
branches;
next	1.139;

1.139
date	2012.07.08.17.51.51;	author naddy;	state Exp;
branches;
next	1.138;

1.138
date	2012.06.30.14.51.31;	author naddy;	state Exp;
branches;
next	1.137;

1.137
date	2012.04.24.14.56.09;	author jmc;	state Exp;
branches;
next	1.136;

1.136
date	2011.11.13.09.52.58;	author jmc;	state Exp;
branches;
next	1.135;

1.135
date	2011.09.03.22.59.08;	author jmc;	state Exp;
branches;
next	1.134;

1.134
date	2011.08.19.19.59.51;	author jmc;	state Exp;
branches;
next	1.133;

1.133
date	2011.07.07.04.17.53;	author deraadt;	state Exp;
branches;
next	1.132;

1.132
date	2011.06.24.21.11.27;	author sthen;	state Exp;
branches;
next	1.131;

1.131
date	2011.06.24.21.10.16;	author sthen;	state Exp;
branches;
next	1.130;

1.130
date	2010.10.06.22.19.20;	author mikeb;	state Exp;
branches;
next	1.129;

1.129
date	2010.09.23.11.43.51;	author mikeb;	state Exp;
branches;
next	1.128;

1.128
date	2010.09.22.14.04.09;	author mikeb;	state Exp;
branches;
next	1.127;

1.127
date	2010.09.19.20.59.20;	author jmc;	state Exp;
branches;
next	1.126;

1.126
date	2010.06.07.08.32.58;	author jmc;	state Exp;
branches;
next	1.125;

1.125
date	2010.06.03.16.57.40;	author reyk;	state Exp;
branches;
next	1.124;

1.124
date	2010.01.02.20.15.15;	author schwarze;	state Exp;
branches;
next	1.123;

1.123
date	2009.10.21.16.07.57;	author sthen;	state Exp;
branches;
next	1.122;

1.122
date	2009.01.29.14.30.48;	author jmc;	state Exp;
branches;
next	1.121;

1.121
date	2009.01.28.18.07.19;	author bluhm;	state Exp;
branches;
next	1.120;

1.120
date	2009.01.20.14.36.19;	author mpf;	state Exp;
branches;
next	1.119;

1.119
date	2008.11.29.11.32.59;	author hshoexer;	state Exp;
branches;
next	1.118;

1.118
date	2008.04.11.00.05.51;	author reyk;	state Exp;
branches;
next	1.117;

1.117
date	2008.02.22.23.51.31;	author hshoexer;	state Exp;
branches;
next	1.116;

1.116
date	2008.02.12.06.12.25;	author jmc;	state Exp;
branches;
next	1.115;

1.115
date	2007.09.17.15.53.00;	author sthen;	state Exp;
branches;
next	1.114;

1.114
date	2007.05.31.19.19.44;	author jmc;	state Exp;
branches;
next	1.113;

1.113
date	2007.03.06.18.26.34;	author hshoexer;	state Exp;
branches;
next	1.112;

1.112
date	2007.02.19.14.20.46;	author jmc;	state Exp;
branches;
next	1.111;

1.111
date	2007.02.19.10.00.13;	author hshoexer;	state Exp;
branches;
next	1.110;

1.110
date	2007.02.16.20.13.20;	author cloder;	state Exp;
branches;
next	1.109;

1.109
date	2006.12.12.21.20.02;	author jmc;	state Exp;
branches;
next	1.108;

1.108
date	2006.12.06.09.54.15;	author jmc;	state Exp;
branches;
next	1.107;

1.107
date	2006.11.24.13.52.13;	author reyk;	state Exp;
branches;
next	1.106;

1.106
date	2006.11.13.14.42.28;	author jmc;	state Exp;
branches;
next	1.105;

1.105
date	2006.11.13.13.46.32;	author jmc;	state Exp;
branches;
next	1.104;

1.104
date	2006.11.13.13.30.51;	author jmc;	state Exp;
branches;
next	1.103;

1.103
date	2006.11.01.03.10.02;	author mcbride;	state Exp;
branches;
next	1.102;

1.102
date	2006.10.19.08.41.18;	author jmc;	state Exp;
branches;
next	1.101;

1.101
date	2006.09.29.10.56.33;	author jmc;	state Exp;
branches;
next	1.100;

1.100
date	2006.09.29.10.51.27;	author jmc;	state Exp;
branches;
next	1.99;

1.99
date	2006.09.26.22.03.44;	author jmc;	state Exp;
branches;
next	1.98;

1.98
date	2006.09.22.13.12.13;	author jmc;	state Exp;
branches;
next	1.97;

1.97
date	2006.09.15.14.03.35;	author jmc;	state Exp;
branches;
next	1.96;

1.96
date	2006.09.15.11.45.04;	author jmc;	state Exp;
branches;
next	1.95;

1.95
date	2006.09.15.11.35.50;	author jmc;	state Exp;
branches;
next	1.94;

1.94
date	2006.09.14.15.09.22;	author hshoexer;	state Exp;
branches;
next	1.93;

1.93
date	2006.09.13.11.40.01;	author jmc;	state Exp;
branches;
next	1.92;

1.92
date	2006.09.12.15.20.58;	author jmc;	state Exp;
branches;
next	1.91;

1.91
date	2006.09.12.13.29.39;	author jmc;	state Exp;
branches;
next	1.90;

1.90
date	2006.09.12.13.28.47;	author jmc;	state Exp;
branches;
next	1.89;

1.89
date	2006.09.11.10.34.53;	author jmc;	state Exp;
branches;
next	1.88;

1.88
date	2006.09.07.12.58.21;	author jmc;	state Exp;
branches;
next	1.87;

1.87
date	2006.09.07.12.38.09;	author jmc;	state Exp;
branches;
next	1.86;

1.86
date	2006.09.07.09.57.02;	author jmc;	state Exp;
branches;
next	1.85;

1.85
date	2006.09.06.11.40.33;	author jmc;	state Exp;
branches;
next	1.84;

1.84
date	2006.09.05.11.33.22;	author jmc;	state Exp;
branches;
next	1.83;

1.83
date	2006.09.05.10.50.02;	author jmc;	state Exp;
branches;
next	1.82;

1.82
date	2006.09.05.10.40.58;	author jmc;	state Exp;
branches;
next	1.81;

1.81
date	2006.09.04.15.51.20;	author jmc;	state Exp;
branches;
next	1.80;

1.80
date	2006.09.04.15.10.37;	author jmc;	state Exp;
branches;
next	1.79;

1.79
date	2006.09.01.10.24.31;	author jmc;	state Exp;
branches;
next	1.78;

1.78
date	2006.08.31.18.44.48;	author jmc;	state Exp;
branches;
next	1.77;

1.77
date	2006.08.31.17.50.43;	author jmc;	state Exp;
branches;
next	1.76;

1.76
date	2006.08.31.11.23.57;	author jmc;	state Exp;
branches;
next	1.75;

1.75
date	2006.08.31.01.16.23;	author jmc;	state Exp;
branches;
next	1.74;

1.74
date	2006.08.30.16.07.29;	author jmc;	state Exp;
branches;
next	1.73;

1.73
date	2006.08.30.14.16.00;	author jmc;	state Exp;
branches;
next	1.72;

1.72
date	2006.08.30.14.08.11;	author jmc;	state Exp;
branches;
next	1.71;

1.71
date	2006.08.30.12.58.25;	author jmc;	state Exp;
branches;
next	1.70;

1.70
date	2006.08.30.12.54.57;	author jmc;	state Exp;
branches;
next	1.69;

1.69
date	2006.08.30.12.50.40;	author jmc;	state Exp;
branches;
next	1.68;

1.68
date	2006.08.30.12.31.07;	author jmc;	state Exp;
branches;
next	1.67;

1.67
date	2006.08.30.12.30.04;	author jmc;	state Exp;
branches;
next	1.66;

1.66
date	2006.08.30.12.27.54;	author jmc;	state Exp;
branches;
next	1.65;

1.65
date	2006.08.30.12.20.11;	author jmc;	state Exp;
branches;
next	1.64;

1.64
date	2006.08.30.11.44.23;	author jmc;	state Exp;
branches;
next	1.63;

1.63
date	2006.08.30.11.41.45;	author jmc;	state Exp;
branches;
next	1.62;

1.62
date	2006.08.29.18.10.31;	author msf;	state Exp;
branches;
next	1.61;

1.61
date	2006.08.29.17.52.40;	author naddy;	state Exp;
branches;
next	1.60;

1.60
date	2006.07.22.16.47.49;	author jmc;	state Exp;
branches;
next	1.59;

1.59
date	2006.06.28.13.15.41;	author hshoexer;	state Exp;
branches;
next	1.58;

1.58
date	2006.06.18.18.18.01;	author hshoexer;	state Exp;
branches;
next	1.57;

1.57
date	2006.06.14.19.04.26;	author naddy;	state Exp;
branches;
next	1.56;

1.56
date	2006.06.13.16.13.41;	author naddy;	state Exp;
branches;
next	1.55;

1.55
date	2006.06.11.21.14.34;	author naddy;	state Exp;
branches;
next	1.54;

1.54
date	2006.06.11.11.13.40;	author hshoexer;	state Exp;
branches;
next	1.53;

1.53
date	2006.06.08.21.15.21;	author naddy;	state Exp;
branches;
next	1.52;

1.52
date	2006.06.02.18.15.26;	author david;	state Exp;
branches;
next	1.51;

1.51
date	2006.06.02.15.56.55;	author naddy;	state Exp;
branches;
next	1.50;

1.50
date	2006.06.02.06.43.05;	author jmc;	state Exp;
branches;
next	1.49;

1.49
date	2006.06.01.22.19.24;	author jmc;	state Exp;
branches;
next	1.48;

1.48
date	2006.06.01.20.29.05;	author naddy;	state Exp;
branches;
next	1.47;

1.47
date	2006.05.28.08.04.34;	author jmc;	state Exp;
branches;
next	1.46;

1.46
date	2006.05.27.17.37.02;	author hshoexer;	state Exp;
branches;
next	1.45;

1.45
date	2006.05.27.17.21.40;	author hshoexer;	state Exp;
branches;
next	1.44;

1.44
date	2006.05.26.09.26.07;	author jmc;	state Exp;
branches;
next	1.43;

1.43
date	2006.05.18.21.27.24;	author miod;	state Exp;
branches;
next	1.42;

1.42
date	2006.04.19.16.10.50;	author hshoexer;	state Exp;
branches;
next	1.41;

1.41
date	2006.04.19.15.49.49;	author hshoexer;	state Exp;
branches;
next	1.40;

1.40
date	2006.04.13.11.55.07;	author hshoexer;	state Exp;
branches;
next	1.39;

1.39
date	2006.04.12.14.48.12;	author hshoexer;	state Exp;
branches;
next	1.38;

1.38
date	2006.03.31.16.30.47;	author jmc;	state Exp;
branches;
next	1.37;

1.37
date	2006.03.31.14.02.08;	author markus;	state Exp;
branches;
next	1.36;

1.36
date	2006.03.31.13.13.51;	author markus;	state Exp;
branches;
next	1.35;

1.35
date	2006.03.31.09.15.18;	author jmc;	state Exp;
branches;
next	1.34;

1.34
date	2006.03.30.12.44.20;	author markus;	state Exp;
branches;
next	1.33;

1.33
date	2006.03.22.16.01.23;	author reyk;	state Exp;
branches;
next	1.32;

1.32
date	2006.03.07.00.30.28;	author reyk;	state Exp;
branches;
next	1.31;

1.31
date	2006.03.07.00.19.58;	author reyk;	state Exp;
branches;
next	1.30;

1.30
date	2006.02.21.12.19.17;	author hshoexer;	state Exp;
branches;
next	1.29;

1.29
date	2006.01.16.23.57.20;	author reyk;	state Exp;
branches;
next	1.28;

1.28
date	2005.12.06.14.27.57;	author markus;	state Exp;
branches;
next	1.27;

1.27
date	2005.11.24.13.53.41;	author hshoexer;	state Exp;
branches;
next	1.26;

1.26
date	2005.11.24.11.53.23;	author hshoexer;	state Exp;
branches;
next	1.25;

1.25
date	2005.10.30.21.26.16;	author jmc;	state Exp;
branches;
next	1.24;

1.24
date	2005.10.30.19.54.07;	author hshoexer;	state Exp;
branches;
next	1.23;

1.23
date	2005.10.30.19.50.59;	author hshoexer;	state Exp;
branches;
next	1.22;

1.22
date	2005.10.16.21.24.45;	author hshoexer;	state Exp;
branches;
next	1.21;

1.21
date	2005.09.23.14.56.06;	author jmc;	state Exp;
branches;
next	1.20;

1.20
date	2005.09.19.15.44.35;	author jmc;	state Exp;
branches;
next	1.19;

1.19
date	2005.08.23.07.48.04;	author jmc;	state Exp;
branches;
next	1.18;

1.18
date	2005.08.22.22.10.02;	author hshoexer;	state Exp;
branches;
next	1.17;

1.17
date	2005.08.22.04.27.18;	author david;	state Exp;
branches;
next	1.16;

1.16
date	2005.08.11.09.26.27;	author hshoexer;	state Exp;
branches;
next	1.15;

1.15
date	2005.08.10.08.49.33;	author jmc;	state Exp;
branches;
next	1.14;

1.14
date	2005.08.09.14.00.07;	author hshoexer;	state Exp;
branches;
next	1.13;

1.13
date	2005.08.05.14.39.02;	author hshoexer;	state Exp;
branches;
next	1.12;

1.12
date	2005.07.23.20.44.36;	author hshoexer;	state Exp;
branches;
next	1.11;

1.11
date	2005.07.10.07.56.56;	author jmc;	state Exp;
branches;
next	1.10;

1.10
date	2005.07.09.22.24.44;	author hshoexer;	state Exp;
branches;
next	1.9;

1.9
date	2005.07.09.22.22.44;	author hshoexer;	state Exp;
branches;
next	1.8;

1.8
date	2005.04.10.14.02.45;	author jmc;	state Exp;
branches;
next	1.7;

1.7
date	2005.04.09.23.39.48;	author hshoexer;	state Exp;
branches;
next	1.6;

1.6
date	2005.04.09.23.32.22;	author hshoexer;	state Exp;
branches;
next	1.5;

1.5
date	2005.04.06.15.36.13;	author msf;	state Exp;
branches;
next	1.4;

1.4
date	2005.04.05.10.07.46;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2005.04.05.07.14.00;	author jmc;	state Exp;
branches;
next	1.2;

1.2
date	2005.04.04.22.22.55;	author hshoexer;	state Exp;
branches;
next	1.1;

1.1
date	2005.04.04.22.19.50;	author hshoexer;	state Exp;
branches;
next	;


desc
@@


1.151
log
@Remove plain DES encryption from IPsec.

DES is insecure since brute force attacks are practical due to its
short key length.

This removes support for DES-CBC encryption in ESP and in IKE main
and quick mode from the kernel, isakmpd(8), ipsecctl(8), and iked(8).

ok mikeb@@
@
text
@.\"	$OpenBSD: ipsec.conf.5,v 1.150 2015/11/01 21:26:48 jmc Exp $
.\"
.\" Copyright (c) 2004 Mathieu Sauve-Frankel  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
.\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: November 1 2015 $
.Dt IPSEC.CONF 5
.Os
.Sh NAME
.Nm ipsec.conf
.Nd IPsec configuration file
.Sh DESCRIPTION
The
.Nm
file specifies rules and definitions for IPsec,
which provides security services for IP datagrams.
IPsec itself is a pair of protocols:
Encapsulating Security Payload (ESP),
which provides integrity and confidentiality;
and Authentication Header (AH),
which provides integrity.
The IPsec protocol itself is described in
.Xr ipsec 4 .
.Pp
In its most basic form, a
.Em flow
is established between hosts and/or networks,
and then Security Associations
.Pq Em SA
are established,
which detail how the desired protection will be achieved.
IPsec uses flows
to determine whether to apply security services to an IP packet or not.
.Pp
Generally speaking
an automated keying daemon,
such as
.Xr isakmpd 8 ,
is used to set up flows and establish SAs,
by specifying an
.Sq ike
line in
.Nm
(see
.Sx AUTOMATIC KEYING ,
below).
An authentication method,
such as public key authentication,
will also have to be set up:
see the PKI section of
.Xr isakmpd 8
for information on the types of authentication available,
and the procedures for setting them up.
.Pp
The keying daemon,
.Xr isakmpd 8 ,
can be enabled to run at boot time via the
.Va isakmpd_flags
variable in
.Xr rc.conf.local 8 .
Note that it will probably need to be run with at least the
.Fl K
option, to avoid
.Xr keynote 4
policy checking.
The
.Nm
configuration itself is loaded at boot time
if the variable
.Va ipsec
is set to
.Dv YES
in
.Xr rc.conf.local 8 .
A utility called
.Xr ipsecctl 8
is also available to load
.Nm
configurations, and can additionally be used
to view and modify IPsec flows.
.Pp
An alternative method of setting up SAs is also possible using
manual keying.
Manual keying is not recommended,
but can be convenient for quick setups and testing.
Those procedures are documented within this page.
.Sh IPSEC.CONF FILE FORMAT
The current line can be extended over multiple lines using a backslash
.Pq Sq \e .
Comments can be put anywhere in the file using a hash mark
.Pq Sq # ,
and extend to the end of the current line.
Care should be taken when commenting out multi-line text:
the comment is effective until the end of the entire block.
.Pp
Argument names not beginning with a letter, digit, or underscore
must be quoted.
.Pp
Addresses can be specified in CIDR notation (matching netblocks),
as symbolic host names, interface names, or interface group names.
.Pp
Certain parameters can be expressed as lists, in which case
.Xr ipsecctl 8
generates all the necessary combinations.
For example:
.Bd -literal -offset indent
ike esp from {192.168.1.1, 192.168.1.2} to \e
	{10.0.0.17, 10.0.0.18} peer 192.168.10.1
.Ed
.Pp
Will expand to:
.Bd -literal -offset indent
ike esp from 192.168.1.1 to 10.0.0.17 peer 192.168.10.1
ike esp from 192.168.1.1 to 10.0.0.18 peer 192.168.10.1
ike esp from 192.168.1.2 to 10.0.0.17 peer 192.168.10.1
ike esp from 192.168.1.2 to 10.0.0.18 peer 192.168.10.1
.Ed
.Pp
Macros can be defined that will later be expanded in context.
Macro names must start with a letter, digit, or underscore,
and may contain any of those characters.
Macro names may not be reserved words (for example
.Ic flow ,
.Ic from ,
.Ic esp ) .
Macros are not expanded inside quotes.
.Pp
For example:
.Bd -literal -offset indent
remote_gw = "192.168.3.12"
flow esp from 192.168.7.0/24 to 192.168.8.0/24 peer $remote_gw
.Ed
.Pp
Additional configuration files can be included with the
.Ic include
keyword, for example:
.Bd -literal -offset indent
include "/etc/macros.conf"
.Ed
.Sh AUTOMATIC KEYING
In this scenario,
.Nm
is used to set up flows and SAs automatically using
.Xr isakmpd 8
with the ISAKMP/Oakley a.k.a. IKEv1 protocol.
To configure automatic keying using the IKEv2 protocol, see
.Xr iked.conf 5
instead.
Some examples of setting up automatic keying:
.Bd -literal -offset 3n
# Set up a VPN:
# First between the gateway machines 192.168.3.1 and 192.168.3.2
# Second between the networks 10.1.1.0/24 and 10.1.2.0/24
ike esp from 192.168.3.1 to 192.168.3.2
ike esp from 10.1.1.0/24 to 10.1.2.0/24 peer 192.168.3.2
.Ed
.Pp
The commands are as follows:
.Bl -tag -width xxxx
.It Xo
.Ic ike
.Op Ar mode
.Op Ar encap
.Op Ar tmode
.Xc
.Ar mode
specifies the IKEv1 mode to use:
one of
.Ar passive ,
.Ar active ,
or
.Ar dynamic .
When
.Ar passive
is specified,
.Xr isakmpd 8
will not immediately start negotiation of this tunnel, but wait for an incoming
request from the remote peer.
When
.Ar active
or
.Ar dynamic
is specified, negotiation will be started at once.
The
.Ar dynamic
mode will additionally enable Dead Peer Detection (DPD) and use the
local hostname as the identity of the local peer, if not specified by
the
.Ic srcid
parameter.
.Ar dynamic
mode should be used for hosts with dynamic IP addresses like road
warriors or dialup hosts.
If omitted,
.Ar active
mode will be used.
.Pp
.Ar encap
specifies the encapsulation protocol to be used.
Possible protocols are
.Ar esp
and
.Ar ah ;
the default is
.Ar esp .
.Pp
.Ar tmode
describes the encapsulation mode to be used.
Possible modes are
.Ar tunnel
and
.Ar transport ;
the default is
.Ar tunnel .
.It Ic proto Ar protocol
The optional
.Ic proto
parameter restricts the flow to a specific IP protocol.
Common protocols are
.Xr icmp 4 ,
.Xr tcp 4 ,
and
.Xr udp 4 .
For a list of all the protocol name to number mappings used by
.Xr ipsecctl 8 ,
see the file
.Pa /etc/protocols .
.It Xo
.Ic from Ar src
.Op Ic port Ar sport
.Op Pq Ar srcnat
.Ic to Ar dst
.Op Ic port Ar dport
.Xc
This rule applies for packets with source address
.Ar src
and destination address
.Ar dst .
The keyword
.Ar any
will match any address (i.e. 0.0.0.0/0).
If the
.Ar src
argument specifies a fictional source ID,
the
.Ar srcnat
parameter can be used to specify the actual source address.
This can be used in outgoing NAT/BINAT scenarios as described below in
.Sx OUTGOING NETWORK ADDRESS TRANSLATION .
Host addresses are parsed as type
.Dq IPV4_ADDR ;
adding the suffix /32 will change the type to
.Dq IPV4_ADDR_SUBNET ,
which can improve interoperability with some IKEv1 implementations.
.Pp
The optional
.Ic port
modifiers restrict the flows to the specified ports.
They are only valid in conjunction with the
.Xr tcp 4
and
.Xr udp 4
protocols.
Ports can be specified by number or by name.
For a list of all port name to number mappings used by
.Xr ipsecctl 8 ,
see the file
.Pa /etc/services .
.It Ic local Ar localip Ic peer Ar remote
The
.Ic local
parameter specifies the address or FQDN of the local endpoint.
Unless we are multi-homed or have aliases,
this option is generally not needed.
.Pp
The
.Ic peer
parameter specifies the address or FQDN of the remote endpoint.
For host-to-host connections where
.Ar dst
is identical to
.Ar remote ,
this option is generally not needed as it will be set to
.Ar dst
automatically.
If it is not specified or if the keyword
.Ar any
is given, the default peer is used.
.It Xo
.Ar mode
.Ic auth Ar algorithm
.Ic enc Ar algorithm
.Ic group Ar group
.Ic lifetime Ar time
.Xc
These parameters define the mode and cryptographic transforms to be
used for the phase 1 negotiation.
During phase 1
the machines authenticate and set up an encrypted channel.
.Pp
The mode can be either
.Ar main ,
which specifies main mode, or
.Ar aggressive ,
which specifies aggressive mode.
Possible values for
.Ic auth ,
.Ic enc ,
and
.Ic group
are described below in
.Sx CRYPTO TRANSFORMS .
.Pp
The
.Ic lifetime
parameter specifies the phase 1 lifetime in seconds.
Two unit specifiers are recognized (ignoring case):
.Ql m
and
.Ql h
for minutes and hours, respectively.
.Pp
If omitted,
.Xr ipsecctl 8
will use the default values
.Ar main ,
.Ar hmac-sha1 ,
.Ar aes ,
.Ar modp3072 ,
and
.Ar 3600 .
.It Xo
.Ic quick auth Ar algorithm
.Ic enc Ar algorithm
.Ic group Ar group
.Ic lifetime Ar time
.Xc
These parameters define the cryptographic transforms to be used for
the phase 2 negotiation.
During phase 2
the actual IPsec negotiations happen.
.Pp
Possible values for
.Ic auth ,
.Ic enc ,
and
.Ic group
are described below in
.Sx CRYPTO TRANSFORMS .
Perfect Forward Secrecy (PFS) is enabled unless
.Ic group Ar none
is specified.
.Pp
The
.Ic lifetime
parameter specifies the phase 2 lifetime in seconds.
Two unit specifiers are recognized (ignoring case):
.Ql m
and
.Ql h
for minutes and hours, respectively.
.Pp
If omitted,
.Xr ipsecctl 8
will use the default values
.Ar hmac-sha2-256
and
.Ar aes ;
PFS will only be used if the remote side requests it.
The default phase 2 lifetime value is
.Ar 1200 .
.It Ic srcid Ar string Ic dstid Ar string
.Ic srcid
defines an ID of type
.Dq USER_FQDN
or
.Dq FQDN
that will be used by
.Xr isakmpd 8
as the identity of the local peer.
If the argument is an email address (bob@@example.com),
.Xr ipsecctl 8
will use USER_FQDN as the ID type.
Anything else is considered to be an FQDN.
If
.Ic srcid
is omitted,
the default is to use the IP address of the connecting machine.
.Pp
.Ic dstid
is similar to
.Ic srcid ,
but instead specifies the ID to be used
by the remote peer.
.It Ic psk Ar string
Use a pre-shared key
.Ar string
for authentication.
If this option is not specified,
public key authentication is used (see
.Xr isakmpd 8 ) .
.It Ic tag Ar string
Add a
.Xr pf 4
tag to all packets of phase 2 SAs created for this connection.
This will allow matching packets for this connection by defining
rules in
.Xr pf.conf 5
using the
.Cm tagged
keyword.
.Pp
The following variables can be used in tags to include information
from the remote peer on runtime:
.Pp
.Bl -tag -width $domain -compact -offset indent
.It Ar $id
The remote phase 1 ID.
It will be expanded to
.Ar id-type/id-value ,
e.g.\&
.Ar fqdn/foo.bar.org .
.It Ar $domain
Extract the domain from IDs of type FQDN or UFQDN.
.El
.Pp
For example, if the ID is
.Ar fqdn/foo.bar.org
or
.Ar ufqdn/user@@bar.org ,
.Dq ipsec-$domain
expands to
.Dq ipsec-bar.org .
The variable expansion for the
.Ar tag
directive occurs only at runtime, not during configuration file parse time.
.El
.Sh PACKET FILTERING
IPsec traffic appears unencrypted on the
.Xr enc 4
interface
and can be filtered accordingly using the
.Ox
packet filter,
.Xr pf 4 .
The grammar for the packet filter is described in
.Xr pf.conf 5 .
.Pp
The following components are relevant to filtering IPsec traffic:
.Bl -ohang -offset indent
.It external interface
Interface for ISAKMP traffic and encapsulated IPsec traffic.
.It proto udp port 500
ISAKMP traffic on the external interface.
.It proto udp port 4500
ISAKMP NAT-Traversal traffic on the external interface.
.It proto ah | esp
Encapsulated IPsec traffic
on the external interface.
.It enc0
Interface for outgoing traffic before it's been encapsulated,
and incoming traffic after it's been decapsulated.
State on this interface should be interface bound;
see
.Xr enc 4
for further information.
.It proto ipencap
[tunnel mode only]
IP-in-IP traffic flowing between gateways
on the enc0 interface.
.It tagged ipsec-example.org
Match traffic of phase 2 SAs using the
.Ic tag
keyword.
.El
.Pp
If the filtering rules specify to block everything by default,
the following rule
would ensure that IPsec traffic never hits the packet filtering engine,
and is therefore passed:
.Bd -literal -offset indent
set skip on enc0
.Ed
.Pp
In the following example, all traffic is blocked by default.
IPsec-related traffic from gateways {192.168.3.1, 192.168.3.2} and
networks {10.0.1.0/24, 10.0.2.0/24} is permitted.
.Bd -literal -offset indent
block on sk0
block on enc0

pass  in on sk0 proto udp from 192.168.3.2 to 192.168.3.1 \e
	port {500, 4500}
pass out on sk0 proto udp from 192.168.3.1 to 192.168.3.2 \e
	port {500, 4500}

pass  in on sk0 proto esp from 192.168.3.2 to 192.168.3.1
pass out on sk0 proto esp from 192.168.3.1 to 192.168.3.2

pass  in on enc0 proto ipencap from 192.168.3.2 to 192.168.3.1 \e
	keep state (if-bound)
pass out on enc0 proto ipencap from 192.168.3.1 to 192.168.3.2 \e
	keep state (if-bound)
pass  in on enc0 from 10.0.2.0/24 to 10.0.1.0/24 \e
	keep state (if-bound)
pass out on enc0 from 10.0.1.0/24 to 10.0.2.0/24 \e
	keep state (if-bound)
.Ed
.Pp
.Xr pf 4
has the ability to filter IPsec-related packets
based on an arbitrary
.Em tag
specified within a ruleset.
The tag is used as an internal marker
which can be used to identify the packets later on.
This could be helpful,
for example,
in scenarios where users are connecting in from differing IP addresses,
or to support queue-based bandwidth control,
since the enc0 interface does not support it.
.Pp
The following
.Xr pf.conf 5
fragment uses queues for all IPsec traffic with special
handling for developers and employees:
.Bd -literal -offset indent
queue std on sk0 bandwidth 100M
queue   deflt parent std bandwidth 10M default
queue   developers parent std bandwidth 75M
queue   employees parent std bandwidth 5M
queue   ipsec parent std bandwidth 10M

pass out on sk0 proto esp set queue ipsec

pass out on sk0 tagged ipsec-developers.bar.org set queue developers
pass out on sk0 tagged ipsec-employees.bar.org set queue employees
.Ed
.Pp
The tags will be assigned by the following
.Nm
example:
.Bd -literal -offset indent
ike esp from 10.1.1.0/24 to 10.1.2.0/24 peer 192.168.3.2 \e
	tag ipsec-$domain
.Ed
.Sh OUTGOING NETWORK ADDRESS TRANSLATION
In some network topologies it is desirable to perform NAT on traffic leaving
through the VPN tunnel.
In order to achieve that,
the
.Ar src
argument is used to negotiate the desired network ID with the peer
and the
.Ar srcnat
parameter defines the true local subnet,
so that a correct SA can be installed on the local side.
.Pp
For example,
if the local subnet is 192.168.1.0/24 and all the traffic
for a specific VPN peer should appear as coming from 10.10.10.1,
the following configuration is used:
.Bd -literal -offset indent
ike esp from 10.10.10.1 (192.168.1.0/24) to 192.168.2.0/24 \e
	peer 10.10.20.1
.Ed
.Pp
Naturally,
a relevant NAT rule is required in
.Xr pf.conf 5 .
For the example above,
this would be:
.Bd -literal -offset indent
match out on enc0 from 192.168.1.0/24 to 192.168.2.0/24 \e
	nat-to 10.10.10.1
.Ed
.Pp
From the peer's point of view,
the local end of the VPN tunnel is declared to be 10.10.10.1
and all the traffic arrives with that source address.
.Sh CRYPTO TRANSFORMS
It is very important that keys are not guessable.
One practical way of generating keys is to use
.Xr openssl 1 .
The following generates a 160-bit (20-byte) key:
.Bd -literal -offset indent
$ openssl rand -hex 20
.Ed
.Pp
The following authentication types are permitted with the
.Ic auth
keyword:
.Bl -column "Authentication" "Key Length" "Description" -offset indent
.It Em "Authentication" Ta Em "Key Length" Ta ""
.It Li hmac-md5 Ta "128 bits" Ta ""
.It Li hmac-ripemd160 Ta "160 bits" Ta "[phase 2 only]"
.It Li hmac-sha1 Ta "160 bits" Ta ""
.It Li hmac-sha2-256 Ta "256 bits" Ta ""
.It Li hmac-sha2-384 Ta "384 bits" Ta ""
.It Li hmac-sha2-512 Ta "512 bits" Ta ""
.El
.Pp
The following cipher types are permitted with the
.Ic enc
keyword:
.Bl -column "aes-128-gmac" "Key Length" "Description" -offset indent
.It Em "Cipher" Ta Em "Key Length" Ta ""
.It Li 3des Ta "168 bits" Ta ""
.It Li aes Ta "128 bits" Ta ""
.It Li aes-128 Ta "128 bits" Ta ""
.It Li aes-192 Ta "192 bits" Ta ""
.It Li aes-256 Ta "256 bits" Ta ""
.It Li aesctr Ta "160 bits" Ta "[phase 2 only, IKE only]"
.It Li aes-128-ctr Ta "160 bits" Ta "[phase 2 only, IKE only]"
.It Li aes-192-ctr Ta "224 bits" Ta "[phase 2 only, IKE only]"
.It Li aes-256-ctr Ta "288 bits" Ta "[phase 2 only, IKE only]"
.It Li aes-128-gcm Ta "160 bits" Ta "[phase 2 only, IKE only]"
.It Li aes-192-gcm Ta "224 bits" Ta "[phase 2 only, IKE only]"
.It Li aes-256-gcm Ta "288 bits" Ta "[phase 2 only, IKE only]"
.It Li aes-128-gmac Ta "160 bits" Ta "[phase 2 only, IKE only]"
.It Li aes-192-gmac Ta "224 bits" Ta "[phase 2 only, IKE only]"
.It Li aes-256-gmac Ta "288 bits" Ta "[phase 2 only, IKE only]"
.It Li blowfish Ta "160 bits" Ta ""
.It Li cast Ta "128 bits" Ta ""
.It Li null Ta "(none)" Ta "[phase 2 only]"
.El
.Pp
3DES requires 24 bytes to form its 168-bit key.
This is because the most significant bit of each byte is used for parity.
.Pp
The keysize of AES-CTR can be 128, 192, or 256 bits.
However as well as the key, a 32-bit nonce has to be supplied.
Thus 160, 224, or 288 bits of key material, respectively, have to be supplied.
The same applies to AES-GCM and AES-GMAC.
.Pp
Using AES-GMAC or NULL with ESP will only provide authentication.
This is useful in setups where AH cannot be used, e.g. when NAT is involved.
.Pp
The following group types are permitted with the
.Ic group
keyword:
.Bl -column "modp1024" "Size" "Description" -offset indent
.It Em Group Ta Em Size Ta ""
.It Li modp768 Ta 768 Ta "[DH group 1]"
.It Li modp1024 Ta 1024 Ta "[DH group 2]"
.It Li modp1536 Ta 1536 Ta "[DH group 5]"
.It Li modp2048 Ta 2048 Ta "[DH group 14]"
.It Li modp3072 Ta 3072 Ta "[DH group 15]"
.It Li modp4096 Ta 4096 Ta "[DH group 16]"
.It Li modp6144 Ta 6144 Ta "[DH group 17]"
.It Li modp8192 Ta 8192 Ta "[DH group 18]"
.It Li none Ta 0 Ta "[phase 2 only]"
.El
.Sh MANUAL FLOWS
In this scenario,
.Nm
is used to set up flows manually.
IPsec uses flows
to determine whether to apply security services to an IP packet or not.
Some examples of setting up flows:
.Bd -literal -offset 3n
# Set up two flows:
# First between the machines 192.168.3.14 and 192.168.3.100
# Second between the networks 192.168.7.0/24 and 192.168.8.0/24
flow esp from 192.168.3.14 to 192.168.3.100
flow esp from 192.168.7.0/24 to 192.168.8.0/24 peer 192.168.3.12
.Ed
.Pp
The following types of flow are available:
.Bl -tag -width xxxx
.It Ic flow esp
ESP can provide the following properties:
authentication, integrity, replay protection, and confidentiality of the data.
If no flow type is specified,
this is the default.
.It Ic flow ah
AH provides authentication, integrity, and replay protection, but not
confidentiality.
.It Ic flow ipip
IPIP does not provide authentication, integrity, replay protection, or
confidentiality.
However, it does allow tunnelling of IP traffic over IP, without setting up
.Xr gif 4
interfaces.
.El
.Pp
The commands are as follows:
.Bl -tag -width xxxx
.It Ic in No or Ic out
This rule applies to incoming or outgoing packets.
If neither
.Ic in
nor
.Ic out
are specified,
.Xr ipsecctl 8
will assume the direction
.Ic out
for this rule and will construct a proper
.Ic in
rule.
Thus packets in both directions will be matched.
.It Ic proto Ar protocol
The optional
.Ic proto
parameter restricts the flow to a specific IP protocol.
Common protocols are
.Xr icmp 4 ,
.Xr tcp 4 ,
and
.Xr udp 4 .
For a list of all the protocol name to number mappings used by
.Xr ipsecctl 8 ,
see the file
.Pa /etc/protocols .
.It Xo
.Ic from Ar src
.Op Ic port Ar sport
.Ic to Ar dst
.Op Ic port Ar dport
.Xc
This rule applies for packets with source address
.Ar src
and destination address
.Ar dst .
The keyword
.Ar any
will match any address (i.e. 0.0.0.0/0).
The optional
.Ic port
modifiers restrict the flows to the specified ports.
They are only valid in conjunction with the
.Xr tcp 4
and
.Xr udp 4
protocols.
Ports can be specified by number or by name.
For a list of all port name to number mappings used by
.Xr ipsecctl 8 ,
see the file
.Pa /etc/services .
.It Ic local Ar localip
The
.Ic local
parameter specifies the address or FQDN of the local endpoint of this
flow and can be usually left out.
.It Ic peer Ar remote
The
.Ic peer
parameter specifies the address or FQDN of the remote endpoint of this
flow.
For host-to-host connections where
.Ar dst
is identical to
.Ar remote ,
the
.Ic peer
specification can be left out as it will be set to
.Ar dst
automatically.
Only if the keyword
.Ar any
is given is a flow without peer created.
.It Ic type Ar modifier
This optional parameter sets up special flows using modifiers.
By default,
.Xr ipsecctl 8
will automatically set up normal flows with the corresponding type.
.Ar modifier
may be one of the following:
.Pp
.Bl -tag -width "acquireXX" -offset indent -compact
.It acquire
Use IPsec and establish SAs dynamically.
Unencrypted traffic is permitted until it is protected by IPsec.
.It bypass
Matching packets are not processed by IPsec.
.It deny
Matching packets are dropped.
.It dontacq
Use IPsec.
If no SAs are available,
does not trigger
.Xr isakmpd 8 .
.It require
Use IPsec and establish SAs dynamically.
Unencrypted traffic is not permitted until it is protected by IPsec.
.It use
Use IPsec.
Unencrypted traffic is permitted.
Does not trigger
.Xr isakmpd 8 .
.El
.El
.Sh MANUAL SECURITY ASSOCIATIONS (SAs)
In this scenario,
.Nm
is used to set up SAs manually.
The security parameters for a flow
are stored in the Security Association Database (SADB).
An example of setting up an SA:
.Bd -literal -offset 3n
# Set up an IPsec SA for flows between 192.168.3.14 and 192.168.3.12
esp from 192.168.3.14 to 192.168.3.12 spi 0xdeadbeef:0xbeefdead \e
	authkey file "auth14:auth12" enckey file "enc14:enc12"
.Ed
.Pp
Parameters specify the peers, Security Parameter Index (SPI),
cryptographic transforms, and key material to be used.
The following rules enter SAs in the SADB:
.Pp
.Bl -tag -width "tcpmd5XX" -offset indent -compact
.It Ic esp
Enter an ESP SA.
.It Ic ah
Enter an AH SA.
.It Ic ipcomp
Enter an IPCOMP SA.
.It Ic ipip
Enter an IPIP pseudo SA.
.It Ic tcpmd5
Enter a TCP MD5 SA.
.El
.Pp
The commands are as follows:
.Bl -tag -width xxxx
.It Ar mode
For ESP and AH
.\".Ic ipcomp
the encapsulation mode can be specified.
Possible modes are
.Ar tunnel
and
.Ar transport .
When left out,
.Ar tunnel
is chosen.
For details on modes see
.Xr ipsec 4 .
.It Ic from Ar src Ic to Ar dst
This SA is for a
.Ar flow
between the peers
.Ar src
and
.Ar dst .
.It Ic spi Ar number
The SPI identifies a specific SA.
.Ar number
is a 32-bit value and needs to be unique.
.It Ic auth Ar algorithm
For ESP and AH
an authentication algorithm can be specified.
Possible values
are described above in
.Sx CRYPTO TRANSFORMS .
.Pp
If no algorithm is specified,
.Xr ipsecctl 8
will choose
.Ar hmac-sha2-256
by default.
.\".It Xo
.\".Ic comp
.\".Aq Ar algorithm
.\".Xc
.\"The compression algorithm to be used.
.\"Possible algorithms are
.\".Ar deflate
.\"and
.\".Ar lzs .
.\"Note that
.\".Ar lzs
.\"is only available with
.\".Xr hifn 4
.\"because of the patent held by Hifn, Inc.
.It Ic enc Ar algorithm
For ESP
an encryption algorithm can be specified.
Possible values
are described above in
.Sx CRYPTO TRANSFORMS .
.Pp
If no algorithm is specified,
.Xr ipsecctl 8
will choose
.Ar aes
by default.
.It Ic authkey Ar keyspec
.Ar keyspec
defines the authentication key to be used.
It is either a hexadecimal string or a path to a file containing the key.
The filename may be given as either an absolute path to the file
or a relative pathname,
and is specified as follows:
.Bd -literal -offset indent
authkey file "filename"
.Ed
.It Ic enckey Ar keyspec
The encryption key is defined similarly to
.Ic authkey .
.It Xo
.Ic tcpmd5
.Ic from Ar src
.Ic to Ar dst
.Ic spi Ar number
.Ic authkey Ar keyspec
.Xc
TCP MD5 signatures are generally used between BGP daemons, such as
.Xr bgpd 8 .
Since
.Xr bgpd 8
itself already provides this functionality,
this option is generally not needed.
More information on TCP MD5 signatures can be found in
.Xr tcp 4 ,
.Xr bgpd.conf 5 ,
and RFC 2385.
.Pp
This rule applies for packets with source address
.Ar src
and destination address
.Ar dst .
The parameter
.Ic spi
is a 32-bit value defining the Security Parameter Index (SPI) for this SA.
The encryption key is defined similarly to
.Ic authkey .
.El
.Pp
Since an SA is directional, a second SA is normally configured in the
reverse direction.
This is done by adding a second, colon-separated, value to
.Ic spi ,
.Ic authkey ,
and
.Ic enckey .
.Sh SEE ALSO
.Xr openssl 1 ,
.Xr enc 4 ,
.Xr ipcomp 4 ,
.Xr ipsec 4 ,
.Xr tcp 4 ,
.Xr pf.conf 5 ,
.Xr ipsecctl 8 ,
.Xr isakmpd 8
.Sh HISTORY
The
.Nm
file format first appeared in
.Ox 3.8 .
@


1.150
log
@replace "can not" with "cannot";
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.149 2015/05/25 19:29:36 naddy Exp $
d25 1
a25 1
.Dd $Mdocdate: May 25 2015 $
a626 1
.It Li des Ta "56 bits" Ta ""
d647 1
a647 5
Use of DES as an encryption algorithm is considered to be insecure
since brute force attacks are practical due its short key length.
.Pp
DES requires 8 bytes to form a 56-bit key and 3DES requires 24 bytes
to form its 168-bit key.
@


1.149
log
@bump up the default Diffie-Hellman group to modp3072; ok mikeb@@ djm@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.148 2015/02/28 21:51:57 bentley Exp $
d25 1
a25 1
.Dd $Mdocdate: February 28 2015 $
d661 1
a661 1
This is useful in setups where AH can not be used, e.g. when NAT is involved.
@


1.148
log
@Reduce usage of predefined strings in manpages.

Predefined strings are not very portable across troff implementations,
and they make the source much harder to read. Usually the intended
character can be written directly.

No output changes, except for two instances where the incorrect escape
was used in the first place.

tweaks + ok schwarze@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.147 2015/01/10 15:03:50 sobrado Exp $
d25 1
a25 1
.Dd $Mdocdate: January 10 2015 $
d348 1
a348 1
.Ar modp1024 ,
@


1.147
log
@tell the truth about DES.

joint work with djm@@ and jsing@@, who suggested stronger words warning people
away from single-DES.

ok djm@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.146 2015/01/02 18:28:23 sobrado Exp $
d25 1
a25 1
.Dd $Mdocdate: January 2 2015 $
d476 1
a476 1
.It proto ah \*(Ba esp
@


1.146
log
@PFS stands for Perfect Forward Secrecy.

ok reyk@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.145 2014/03/19 12:49:00 sthen Exp $
d25 1
a25 1
.Dd $Mdocdate: March 19 2014 $
d648 2
a649 2
Use of DES as an encryption algorithm is not recommended
(except for backwards compatibility) due to its short key length.
@


1.145
log
@Unify ipsec.conf(5)'s copy of the text dealing with multiline comments,
this was missed when unifying text in the other parse.y parsers (see e.g.
pf.conf.5 r1.495). Noticed in a misc@@ post by zeloff at zeloff/org.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.144 2013/11/01 10:42:38 henning Exp $
d25 1
a25 1
.Dd $Mdocdate: November 1 2013 $
d369 1
a369 1
Perfect Forward Security (PFS) is enabled unless
@


1.144
log
@altq -> new queue in examples
From: Arto Jonsson <ajonsson at kapsi.fi>
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.143 2013/06/29 09:08:41 jmc Exp $
d25 1
a25 1
.Dd $Mdocdate: June 29 2013 $
d107 7
a113 7
Lines beginning with
.Sq #
and empty lines are regarded as comments,
and ignored.
Lines may be split using the
.Sq \e
character.
@


1.143
log
@do not use Sx for sections outwith the page;
man4 still to go...
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.142 2012/08/12 01:54:53 lteo Exp $
d25 1
a25 1
.Dd $Mdocdate: August 12 2012 $
d547 5
a551 6
altq on sk0 cbq bandwidth 1000Mb \e
	queue { deflt, developers, employees, ipsec }
    queue deflt bandwidth 10% priority 0 cbq(default ecn)
    queue developers bandwidth 75% priority 7 cbq(borrow red)
    queue employees bandwidth 5% cbq(red)
    queue ipsec bandwidth 10% cbq(red)
d553 1
a553 1
pass out on sk0 proto esp queue ipsec
d555 2
a556 2
pass out on sk0 tagged ipsec-developers.bar.org queue developers
pass out on sk0 tagged ipsec-employees.bar.org queue employees
@


1.142
log
@Explicitly state that only two unit specifiers are recognized instead of
"several."

Note: if anyone adds support for more unit specifiers in the future,
please change this back to "several" (instead of using an exact number)
so that it matches the iked.conf(5) man page. :)

While here, fix a typo in the quick mode section: "phase 1 lifetime" ->
"phase 2 lifetime"

ok mikeb sthen jmc haesbaert henning
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.141 2012/07/13 20:44:11 jmc Exp $
d25 1
a25 1
.Dd $Mdocdate: July 13 2012 $
d69 1
a69 3
see the
.Sx PKI
section of
@


1.141
log
@small tweak;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.140 2012/07/13 19:36:07 mikeb Exp $
d338 1
a338 1
Several unit specifiers are recognized (ignoring case):
d377 2
a378 2
parameter specifies the phase 1 lifetime in seconds.
Several unit specifiers are recognized (ignoring case):
@


1.140
log
@Change the configuration format fed to the isakmpd FIFO to be able
to specify extended options like SA Lifetime. All the hard work was
done by lteo@@, while naddy@@ and me have made sure that defaults and
AH still work; sthen and jmc have looked over the diffs as well.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.139 2012/07/08 17:51:51 naddy Exp $
d25 1
a25 1
.Dd $Mdocdate: July 8 2012 $
d371 1
a371 1
Perfect Forward Security (PFS) is enabled unless the
@


1.139
log
@Disallow manual security associations that use AES-CTR, AES-GCM,
or AES-GMAC.  These algorithms cannot be used safely with static
keys and RFCs 3686, 4106, and 4543 expressly forbid such configurations.

Also include a tweak (with jmc@@) to the key size explanation, for
completeness sake.

ok mikeb@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.138 2012/06/30 14:51:31 naddy Exp $
d25 1
a25 1
.Dd $Mdocdate: June 30 2012 $
d315 1
d335 9
d350 1
d352 1
a352 1
.Ar modp1024 .
d357 1
d371 12
a382 7
If
.Ic group
is specified,
Perfect Forward Security (PFS) is used.
If the value
.Ar none
is used, PFS is disabled.
d391 2
@


1.138
log
@enable use of AES-{192,256}-CTR, and explicitly of AES-128-CTR, for IPsec ESP
ok mikeb@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.137 2012/04/24 14:56:09 jmc Exp $
d25 1
a25 1
.Dd $Mdocdate: April 24 2012 $
d617 10
a626 10
.It Li aesctr Ta "160 bits" Ta "[phase 2 only]"
.It Li aes-128-ctr Ta "160 bits" Ta "[phase 2 only]"
.It Li aes-192-ctr Ta "224 bits" Ta "[phase 2 only]"
.It Li aes-256-ctr Ta "288 bits" Ta "[phase 2 only]"
.It Li aes-128-gcm Ta "160 bits" Ta "[phase 2 only]"
.It Li aes-192-gcm Ta "224 bits" Ta "[phase 2 only]"
.It Li aes-256-gcm Ta "288 bits" Ta "[phase 2 only]"
.It Li aes-128-gmac Ta "160 bits" Ta "[phase 2 only]"
.It Li aes-192-gmac Ta "224 bits" Ta "[phase 2 only]"
.It Li aes-256-gmac Ta "288 bits" Ta "[phase 2 only]"
d639 1
a639 1
The keysize of AES-CTR is actually 128-bit.
d641 1
a641 1
Thus 160 bits of key material have to be supplied.
@


1.137
log
@take a stab at documenting when arguments need quoted, and valid macro
characters;

prompted by a diff from robert peichaer org

thanks gilles and henning for feedback
ok deraadt zinke
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.136 2011/11/13 09:52:58 jmc Exp $
d25 1
a25 1
.Dd $Mdocdate: November 13 2011 $
d590 1
a590 1
$ openssl rand 20 | hexdump -e '20/1 "%02x"'
d618 3
@


1.136
log
@provide a specific section reference; from Lawrence Teo
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.135 2011/09/03 22:59:08 jmc Exp $
d25 1
a25 1
.Dd $Mdocdate: September 3 2011 $
d117 3
d141 2
a142 2
Macro names must start with a letter, and may contain letters, digits
and underscores.
@


1.135
log
@make -column lists pretty again;

specifically, rewrite them to permit some markup in the column headers,
and use "Ta" instead of literal tabs; mandoc does not currently match groff
100%, but a mandoc fix may be some time off, and we've gone enough releases
with poorly formatting column lists.

in some cases i have rewritten the lists as -tag, where -column made
little sense.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.134 2011/08/19 19:59:51 jmc Exp $
d25 1
a25 1
.Dd $Mdocdate: August 19 2011 $
d266 2
a267 1
This can be used in outgoing NAT/BINAT scenarios as described below.
@


1.134
log
@as with other list types, column lists generally do not need a Pp/-compact
construct;

this also sidesteps what seems to be a problem with mandoc, in that
"-column -compact" seems to mess up the formatting. thus these pages should
now have their lists formatted nicely (i.e. correctly aligned and with indent
applied);

as a side note, the fact that headers are not properly marked up is another
issue which will be addressed separately (a mandoc fix is needed, i think).
i have fudged a few of these to mark up properly, since the workaround does
make sense for some pages.

as another side note, i haven;t fixed man7, as i need to prepare a separate
diff for kristaps and ingo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.133 2011/07/07 04:17:53 deraadt Exp $
d25 1
a25 1
.Dd $Mdocdate: July 7 2011 $
d592 3
a594 3
.Bl -column "authenticationXX" "Key Length" -offset indent
.It Em Authentication	Key Length
.It Li hmac-md5 Ta "128 bits"
d596 4
a599 4
.It Li hmac-sha1 Ta "160 bits"
.It Li hmac-sha2-256 Ta "256 bits"
.It Li hmac-sha2-384 Ta "384 bits"
.It Li hmac-sha2-512 Ta "512 bits"
d605 8
a612 8
.Bl -column "authenticationXX" "Key Length" -offset indent
.It Em Cipher	Key Length
.It Li des Ta "56 bits"
.It Li 3des Ta "168 bits"
.It Li aes Ta "128 bits"
.It Li aes-128 Ta "128 bits"
.It Li aes-192 Ta "192 bits"
.It Li aes-256 Ta "256 bits"
d620 2
a621 2
.It Li blowfish Ta "160 bits"
.It Li cast Ta "128 bits"
d643 11
a653 11
.Bl -column "authenticationXX" "Key Length" -offset indent
.It Em Group	Size
.It Li modp768  Ta 768 Ta [DH group 1]
.It Li modp1024 Ta 1024 Ta [DH group 2]
.It Li modp1536 Ta 1536 Ta [DH group 5]
.It Li modp2048 Ta 2048 Ta [DH group 14]
.It Li modp3072 Ta 3072 Ta [DH group 15]
.It Li modp4096 Ta 4096 Ta [DH group 16]
.It Li modp6144 Ta 6144 Ta [DH group 17]
.It Li modp8192 Ta 8192 Ta [DH group 18]
.It Li none Ta 0 Ta [phase 2 only]
@


1.133
log
@We can mention ipcomp, since it works
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.132 2011/06/24 21:11:27 sthen Exp $
d25 1
a25 1
.Dd $Mdocdate: June 24 2011 $
d592 1
a592 2
.Pp
.Bl -column "authenticationXX" "Key Length" -offset indent -compact
d605 1
a605 2
.Pp
.Bl -column "authenticationXX" "Key Length" -offset indent -compact
d643 1
a643 2
.Pp
.Bl -column "authenticationXX" "Key Length" -offset indent -compact
@


1.132
log
@wrap previous onto a second line
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.131 2011/06/24 21:10:16 sthen Exp $
d821 2
a822 2
.\".It Ic ipcomp
.\"Enter an IPCOMP SA.
d945 1
a945 1
.\".Xr ipcomp 4 ,
@


1.131
log
@nat-to rules require a direction
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.130 2010/10/06 22:19:20 mikeb Exp $
d25 1
a25 1
.Dd $Mdocdate: October 6 2010 $
d573 2
a574 1
match out on enc0 from 192.168.1.0/24 to 192.168.2.0/24 nat-to 10.10.10.1
@


1.130
log
@Retire Skipjack

There's not much use for the declassified cipher from the 80's
with a questionable license these days.  According to the FIPS
drafts, Skipjack reaches its EOL in December 2010.

The libc portion will be removed after the ports hackathon.

djm and thib agree, no objections from deraadt
Thanks to jsg for digging up FIPS drafts.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.129 2010/09/23 11:43:51 mikeb Exp $
d25 1
a25 1
.Dd $Mdocdate: September 23 2010 $
d573 1
a573 1
match on enc0 from 192.168.1.0/24 to 192.168.2.0/24 nat-to 10.10.10.1
@


1.129
log
@change description for AES-GMAC a bit.
prompted by reyk
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.128 2010/09/22 14:04:09 mikeb Exp $
d25 1
a25 1
.Dd $Mdocdate: September 22 2010 $
a622 1
.It Li skipjack Ta "80 bits"
d626 2
a627 4
Use of DES or Skipjack as an encryption algorithm is not recommended
(except for backwards compatibility) due to their short key length.
Furthermore, attacks on Skipjack have shown severe weaknesses
in its structure.
@


1.128
log
@Support AES-GCM-16 (as aes-gcm) and ENCR_NULL_AUTH_AES_GMAC
(as aes-gmac) encryption transformations in the ipsec.conf(5).

Available "enc" arguments denoting use of

1) AES-GCM-16:

 aes-128-gcm for 160 bit key (128+nonce)
 aes-192-gcm for 224 bit key (192+nonce)
 aes-256-gcm for 288 bit key (256+nonce)

2) ENCR_NULL_AUTH_AES_GMAC:

 aes-128-gmac for 160 bit key (128+nonce)
 aes-192-gmac for 224 bit key (192+nonce)
 aes-256-gmac for 288 bit key (256+nonce)

Please note that aes-gmac family performs no encryption and provides
no confidentiality and is intended for cases in which confidentiality
is not desired (it can be thought of as AH with NAT-T support).

Also, although this implementation supports manual keying, it's
use is strictly discouraged as AES-GCM security depends on frequent
re-keying.  So it can be thought of as a debug facility only.

Example configuration:

	ike esp from 172.23.61.36 to 172.23.61.156 \
		quick enc aes-256-gcm \
		psk humppa

Thoroughly tested by me and naddy.  Works fine with Linux.

Requires updated pfkeyv2.h include file.

OK naddy
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.127 2010/09/19 20:59:20 jmc Exp $
d25 1
a25 1
.Dd $Mdocdate: September 19 2010 $
d641 1
a641 4
Please note that AES-GMAC performs no encryption and provides no
confidentiality.
.Pp
Using NULL with ESP will only provide authentication.
@


1.127
log
@more wacky macro fixing;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.126 2010/06/07 08:32:58 jmc Exp $
d25 1
a25 1
.Dd $Mdocdate: June 7 2010 $
d615 6
d639 4
@


1.126
log
@fix a quoting wobble for the srcnat keyword; verified by reyk
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.125 2010/06/03 16:57:40 reyk Exp $
d25 1
a25 1
.Dd $Mdocdate: June 3 2010 $
d164 1
a164 1
To configure automatic keying using the IKEv2 protocol, see 
@


1.125
log
@update the manpages for isakmpd(8) and ipsec.conf(5) to point to iked(8)
for IKEv2 and to clarify that a) isakmpd is IKEv1/ISAKMP only and b) iked(8)
is IKEv2 only.  ISAKMP/IKEv1 support is currently not supported by iked(8)
and not worked on, but maybe in the future - I want to get IKEv2 support
first done right.  So keep on using isakmpd(8) for IKEv1 for now...

ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.124 2010/01/02 20:15:15 schwarze Exp $
d25 1
a25 1
.Dd $Mdocdate: January 2 2010 $
d249 1
a249 1
.Oo ( Ar srcnat ) Oc
@


1.124
log
@Various syntax errors in list headers, found by mandoc(1),
also required to fix the mandoc build.

"fine. even if mandoc goes nowhere, it has found some bugs ;)" jmc@@
ok sobrado@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.123 2009/10/21 16:07:57 sthen Exp $
d25 1
a25 1
.Dd $Mdocdate: October 21 2009 $
d162 5
a166 1
.Xr isakmpd 8 .
d185 1
a185 1
specifies the IKE mode to use:
d271 1
a271 1
which can improve interoperability with some IKE implementations.
@


1.123
log
@nat -> match...nat-to in example PF rule. ok mpf@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.122 2009/01/29 14:30:48 jmc Exp $
d25 1
a25 1
.Dd $Mdocdate: January 29 2009 $
d891 1
a891 1
.Bd -literal -offset -indent
@


1.122
log
@tweak previous;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.121 2009/01/28 18:07:19 bluhm Exp $
d25 1
a25 1
.Dd $Mdocdate: January 28 2009 $
d569 1
a569 1
nat on enc0 from 192.168.1.0/24 to 192.168.2.0/24 -> 10.10.10.1
@


1.121
log
@Allow to specify ike and flow explicitly without peer.  The any
keyword as argument for the peer parameter will do that.  An ike
without peer creates the peer-default config.  A flow without peer
acquires a host-to-host SA.

tested by grunk@@, todd@@,  ok grunk@@, hshoexer@@, todd@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.120 2009/01/20 14:36:19 mpf Exp $
d25 1
a25 1
.Dd $Mdocdate: January 20 2009 $
d758 1
a758 1
is given, a flow without peer is created.
@


1.120
log
@Add support to isakmpd(8) and ipsecctl(8) to install SA's with a
different source network than we have negotiated with a peer.
This enables us to do nat/binat on the enc(4) interface.
Very useful to work around rfc 1918 collisions.
Manpage and testing by Mitja Muzenic. Thanks!
OK hshoexer@@, markus@@. "I like it" todd@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.119 2008/11/29 11:32:59 hshoexer Exp $
d25 1
a25 1
.Dd $Mdocdate: November 29 2008 $
d296 6
a301 1
this option is generally not needed.
d753 6
a758 1
specification can be left out.
@


1.119
log
@Explain how /32 changes the address type to IPV4_ADDR_SUBNET. From Mitja
Muzenic (mitja at muzenic dot net), many thanks!
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.118 2008/04/11 00:05:51 reyk Exp $
d25 1
a25 1
.Dd $Mdocdate: April 11 2008 $
d245 1
d256 8
a263 1
Host addresses will be parsed as type
d268 1
d537 33
@


1.118
log
@add support for the "include" directive using code from pfctl/parse.y.

pointed out by Prabhu Gurumurthy

ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.116 2008/02/12 06:12:25 jmc Exp $
d25 1
a25 1
.Dd $Mdocdate: February 22 2008 $
d255 5
@


1.117
log
@Support for specifying aes-{128,192,256}.  Originial idea by Prabhu
Gurumurthy, tweaks and commit-ready diff by Mitja Muzenic!  Thanks
guys!

ok todd@@
@
text
@d25 1
a25 1
.Dd $Mdocdate: February 12 2008 $
d150 7
@


1.116
log
@document modifier types; requested by Aurelien
text from ipsecadm(8), hshoexer, and myself
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.115 2007/09/17 15:53:00 sthen Exp $
d25 1
a25 1
.Dd $Mdocdate: September 17 2007 $
d548 3
@


1.115
log
@Document the syntax used with manual SAs for automatic creation
of the SA matching return traffic; it was already there for spi but
not authkey/enckey (all 3 are required).

assistance and ok from jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.114 2007/05/31 19:19:44 jmc Exp $
d25 1
a25 1
.Dd $Mdocdate: May 31 2007 $
d693 1
a693 12
This optional parameter sets up special flows using the modifiers
.Ar require ,
.Ar use ,
.Ar acquire ,
.Ar dontacq ,
.Ar bypass
or
.Ar deny .
A bypass flow is used to specify a flow for which security processing
will be bypassed: matching packets will not be processed by any other
flows and handled in normal operation.
A deny flow is used to drop any matching packets.
d697 25
@


1.114
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.113 2007/03/06 18:26:34 hshoexer Exp $
d25 1
a25 1
.Dd $Mdocdate$
a812 4
.Pp
It is also possible to specify two values separated by a colon.
.Xr ipsecctl 8
will then generate the matching incoming SA using the second value specified.
d844 8
@


1.113
log
@Explain, why aesctr has 160 bit keys (128 bit aes key + 32 bit nonce).
ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.112 2007/02/19 14:20:46 jmc Exp $
d25 1
a25 1
.Dd April 9, 2005
@


1.112
log
@tweak;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.111 2007/02/19 10:00:13 hshoexer Exp $
d560 1
a560 1
Note that DES requires 8 bytes to form a 56-bit key and 3DES requires 24 bytes
d564 5
a568 1
Note that using NULL with ESP will only provide authentication.
@


1.111
log
@Document NULL encryption.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.110 2007/02/16 20:13:20 cloder Exp $
d565 1
a565 1
This is useful in setups where AH can not be used, eg. when NAT is involved.
@


1.110
log
@Address PR 5380: refer to DH MODP well-known group numbers.
Thanks to sthen <at> symphytum DOT spacehopper DOT org
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.109 2006/12/12 21:20:02 jmc Exp $
d552 1
d563 3
@


1.109
log
@a rewrite of enc.4, hopefully a little more useful than what we previously
had; more can go in here, so feel free...

many thanks to ho for feedback, and angelos and cedric who i harangued
endlessly to explain nat/ipsec to me;

the ipsec.conf.5 change just moves some stuff more appropriate to enc.4;

ok hshoexer
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.108 2006/12/06 09:54:15 jmc Exp $
d569 8
a576 8
.It Li modp768  Ta 768
.It Li modp1024 Ta 1024
.It Li modp1536 Ta 1536
.It Li modp2048 Ta 2048
.It Li modp3072 Ta 3072
.It Li modp4096 Ta 4096
.It Li modp6144 Ta 6144
.It Li modp8192 Ta 8192
@


1.108
log
@SAD -> SADB; ok hshoexer
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.107 2006/11/24 13:52:13 reyk Exp $
d431 4
a476 16
.Pp
.Xr pf 4
is a stateful packet filter,
which means it can track the state of a connection.
It does this
.Em automatically .
States are normally
.Em floating ,
which means they can match packets on any interface.
However this is a potential problem for filtering IPsec traffic:
states need to be interface bound,
to avoid permitting unencrypted traffic should
.Xr isakmpd 8
exit.
Therefore all rules on the enc0 interface should explicitly set
.Dq keep state (if-bound) .
@


1.107
log
@add support to tag ipsec traffic belonging to specific IKE-initiated
phase 2 traffic. this allows policy-based filtering of encrypted and
unencrypted ipsec traffic with pf(4). see ipsec.conf(5) and
isakmpd.conf(5) for details and examples.

this is work in progress and still needs some testing and feedback,
but it is safe to put it in now.

ok hshoexer@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.106 2006/11/13 14:42:28 jmc Exp $
d718 1
a718 1
are stored in the Security Association Database (SAD).
@


1.106
log
@briefly describe phases 1 and 2, and use these terms more
consistently in the rest of the page;

help/ok hshoexer
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.105 2006/11/13 13:46:32 jmc Exp $
d370 35
d435 4
d489 39
@


1.105
log
@previous was not quite right;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.104 2006/11/13 13:30:51 jmc Exp $
d284 3
d315 3
d466 1
a466 1
.It Li hmac-ripemd160 Ta "160 bits" Ta "[quick mode only]"
d482 1
a482 1
.It Li aesctr Ta "160 bits" Ta "[quick mode only]"
d511 1
a511 1
.It Li none Ta 0 Ta [quick mode only]
@


1.104
log
@fix a macro mistake;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.103 2006/11/01 03:10:02 mcbride Exp $
d277 2
a278 1
.Ic mode auth Ar algorithm
@


1.103
log
@Add support for aggressive mode (from the k2k6 IPsec hackathon).

ok hshoexer
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.102 2006/10/19 08:41:18 jmc Exp $
d277 1
a277 1
.Ar mode auth Ar algorithm
@


1.102
log
@note that all rules using enc0 should specify: keep state (if-bound)
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.101 2006/09/29 10:56:33 jmc Exp $
d277 1
a277 1
.Ic main auth Ar algorithm
d281 7
a287 2
These parameters define the cryptographic transforms to be used for
main mode.
d299 1
d310 1
a310 1
quick mode.
@


1.101
log
@add a new section header, since DESCRIPTION is getting so large...
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.100 2006/09/29 10:51:27 jmc Exp $
d411 9
a419 4
pass  in on enc0 proto ipencap from 192.168.3.2 to 192.168.3.1
pass out on enc0 proto ipencap from 192.168.3.1 to 192.168.3.2
pass  in on enc0 from 10.0.2.0/24 to 10.0.1.0/24
pass out on enc0 from 10.0.1.0/24 to 10.0.2.0/24
d422 10
a431 2
Connections on enc0 for which state is being kept
should be interface bound,
d435 2
a436 4
For example:
.Bd -literal -offset 3n
pass out on enc0 from 10.0.1.0/24 to 10.0.2.0/24 keep state (if-bound)
.Ed
@


1.100
log
@make it clearer what needs to be run, and how; push manual keying down
the list; move the rc stuff from ipsecctl to ipsec.conf;

ok hshoexer
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.99 2006/09/26 22:03:44 jmc Exp $
d108 1
a108 4
.Pp
.Nm
has the following format:
.Pp
@


1.99
log
@a better description of what our automatic keying example is up to;
ok hshoexer
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.98 2006/09/22 13:12:13 jmc Exp $
a52 3
Flows and SAs can be loaded, viewed, and modified using the
.Xr ipsecctl 8
utility.
d75 8
a82 4
After that it's simply a case of running the daemon.
Note that
.Xr isakmpd 8
will probably need to be run with at least the
d87 15
d105 6
a110 2
Manual keying can be convenient for quick setups and testing.
These procedures are documented within this page.
@


1.98
log
@- document which parts need to be packet filtered, and why
- move example ruleset into a more logical order
- correct the if-bound example (spotted by hshoexer)

help/ok markus hshoexer
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.97 2006/09/15 14:03:35 jmc Exp $
d141 2
a142 2
# Set up two tunnels:
# First between the machines 192.168.3.1 and 192.168.3.2
@


1.97
log
@reorganise the sections to make more sense;
ok hshoexer ho
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.96 2006/09/15 11:45:04 jmc Exp $
d352 20
d381 1
a381 1
IPsec traffic from gateways {192.168.3.1, 192.168.3.2} and
a382 2
The external interface, sk0,
has to allow the keying daemons to talk to each other.
a386 2
pass  in on sk0 proto esp from 192.168.3.2 to 192.168.3.1
pass out on sk0 proto esp from 192.168.3.1 to 192.168.3.2
d392 2
d406 2
a407 2
.Bd -literal -offset indent
pass on enc0 from 192.168.3.1 to any keep state (if-bound)
@


1.96
log
@clarification;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.95 2006/09/15 11:35:50 jmc Exp $
d341 113
d636 1
a636 1
are described below in
d662 1
a662 1
are described below in
a714 113
.Sh CRYPTO TRANSFORMS
It is very important that keys are not guessable.
One practical way of generating keys is to use
.Xr openssl 1 .
The following generates a 160-bit (20-byte) key:
.Bd -literal -offset indent
$ openssl rand 20 | hexdump -e '20/1 "%02x"'
.Ed
.Pp
The following authentication types are permitted with the
.Ic auth
keyword:
.Pp
.Bl -column "authenticationXX" "Key Length" -offset indent -compact
.It Em Authentication	Key Length
.It Li hmac-md5 Ta "128 bits"
.It Li hmac-ripemd160 Ta "160 bits" Ta "[quick mode only]"
.It Li hmac-sha1 Ta "160 bits"
.It Li hmac-sha2-256 Ta "256 bits"
.It Li hmac-sha2-384 Ta "384 bits"
.It Li hmac-sha2-512 Ta "512 bits"
.El
.Pp
The following cipher types are permitted with the
.Ic enc
keyword:
.Pp
.Bl -column "authenticationXX" "Key Length" -offset indent -compact
.It Em Cipher	Key Length
.It Li des Ta "56 bits"
.It Li 3des Ta "168 bits"
.It Li aes Ta "128 bits"
.It Li aesctr Ta "160 bits" Ta "[quick mode only]"
.It Li blowfish Ta "160 bits"
.It Li cast Ta "128 bits"
.It Li skipjack Ta "80 bits"
.El
.Pp
Use of DES or Skipjack as an encryption algorithm is not recommended
(except for backwards compatibility) due to their short key length.
Furthermore, attacks on Skipjack have shown severe weaknesses
in its structure.
.Pp
Note that DES requires 8 bytes to form a 56-bit key and 3DES requires 24 bytes
to form its 168-bit key.
This is because the most significant bit of each byte is used for parity.
.Pp
The following group types are permitted with the
.Ic group
keyword:
.Pp
.Bl -column "authenticationXX" "Key Length" -offset indent -compact
.It Em Group	Size
.It Li modp768  Ta 768
.It Li modp1024 Ta 1024
.It Li modp1536 Ta 1536
.It Li modp2048 Ta 2048
.It Li modp3072 Ta 3072
.It Li modp4096 Ta 4096
.It Li modp6144 Ta 6144
.It Li modp8192 Ta 8192
.It Li none Ta 0 Ta [quick mode only]
.El
.Sh PACKET FILTERING
IPsec traffic appears unencrypted on the
.Xr enc 4
interface
and can be filtered accordingly using the
.Ox
packet filter,
.Xr pf 4 .
The grammar for the packet filter is described in
.Xr pf.conf 5 .
.Pp
If the filtering rules specify to block everything by default,
the following rule
would ensure that IPsec traffic never hits the packet filtering engine,
and is therefore passed:
.Bd -literal -offset indent
set skip on enc0
.Ed
.Pp
In the following example, all traffic is blocked by default.
IPsec traffic from gateways {192.168.3.1, 192.168.3.2} and
networks {10.0.1.0/24, 10.0.2.0/24} is permitted.
The external interface, sk0,
has to allow the keying daemons to talk to each other.
.Bd -literal -offset indent
block on sk0
block on enc0

pass  in on sk0 proto esp from 192.168.3.2 to 192.168.3.1
pass out on sk0 proto esp from 192.168.3.1 to 192.168.3.2
pass  in on sk0 proto udp from 192.168.3.2 to 192.168.3.1 \e
	port {500, 4500}
pass out on sk0 proto udp from 192.168.3.1 to 192.168.3.2 \e
	port {500, 4500}

pass  in on enc0 proto ipencap from 192.168.3.2 to 192.168.3.1
pass out on enc0 proto ipencap from 192.168.3.1 to 192.168.3.2
pass  in on enc0 from 10.0.2.0/24 to 10.0.1.0/24
pass out on enc0 from 10.0.1.0/24 to 10.0.2.0/24
.Ed
.Pp
Connections on enc0 for which state is being kept
should be interface bound,
to avoid permitting unencrypted traffic should
.Xr isakmpd 8
exit.
For example:
.Bd -literal -offset indent
pass on enc0 from 192.168.3.1 to any keep state (if-bound)
.Ed
@


1.95
log
@add in filtering rules to allow keying daemons to talk;
help/ok markus
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.94 2006/09/14 15:09:22 hshoexer Exp $
d685 1
a685 1
IPsec traffic from hosts {192.168.3.1, 192.168.3.2} and
@


1.94
log
@simplify an example. ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.93 2006/09/13 11:40:01 jmc Exp $
d678 1
a678 1
would ensure that all IPsec traffic never hits the packet filtering engine,
d684 5
a688 4
In the following example, all IPsec traffic is blocked by default,
and only connections from hosts 192.168.3.1 and 192.168.3.2,
and networks 10.0.1.0/24 and 10.0.2.0/24,
are permitted.
d690 1
d692 9
a700 1
pass in on enc0 proto ipencap from 192.168.3.2 to 192.168.3.1
d702 1
a702 1
pass in on enc0 from 10.0.2.0/24 to 10.0.1.0/24
d706 1
a706 1
Connections for which state is being kept
@


1.93
log
@use "proto ipencap" for the gateway filter rules;
pointed out by msf; explained by markus
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.92 2006/09/12 15:20:58 jmc Exp $
d473 1
a473 2
	auth hmac-sha2-256 enc aesctr authkey file "auth14:auth12" \e
	enckey file "enc14:enc12"
@


1.92
log
@note that enc traffic is unecrypted; from mpf
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.91 2006/09/12 13:29:39 jmc Exp $
d691 2
a692 2
pass in on enc0 from 192.168.3.2 to 192.168.3.1
pass out on enc0 from 192.168.3.1 to 192.168.3.2
@


1.91
log
@no need to Xr isakmpd.conf.5;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.90 2006/09/12 13:28:47 jmc Exp $
d667 1
a667 1
IPsec traffic appears on the
d670 1
a670 1
and should be filtered accordingly using the
@


1.90
log
@add a section on packet filtering ipsec traffic;

input henning markus mcbride
ok mcbride hshoexer
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.89 2006/09/11 10:34:53 jmc Exp $
a711 1
.Xr isakmpd.conf 5 ,
@


1.89
log
@improvememnts for `local', `peer', and `psk'; ok hshoexer
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.88 2006/09/07 12:58:21 jmc Exp $
a40 5
IPsec traffic can be packet filtered via
.Xr pf 4
on the
.Xr enc 4
interface.
d666 40
d713 1
@


1.88
log
@note that we can filter ipsec traffic on the enc interface;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.87 2006/09/07 12:38:09 jmc Exp $
d252 3
a254 3
parameter specifies the local address to be used, if we are multi-homed
or have aliases.
It can usually be left out.
d258 1
a258 2
parameter specifies the address or FQDN of the remote endpoint of this
particular flow.
d263 1
a263 3
the
.Ic peer
specification can be left out.
d342 3
a344 6
If not specified, RSA authentication will be used.
By default, the system startup script
.Xr rc 8
generates a key-pair for
.Xr isakmpd 8
when starting, if one does not already exist.
@


1.87
log
@improve the tcpmd5 section; ok claudio hshoexer
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.86 2006/09/07 09:57:02 jmc Exp $
d41 5
d679 1
@


1.86
log
@move all the auth/enc/group stuff into one definitive section;
help from ho hshoexer
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.85 2006/09/06 11:40:33 jmc Exp $
d588 11
a607 6
.Pp
For details on how to enable TCP MD5 signatures see
.Xr tcp 4 .
The mechanism of protecting
.Xr tcp 4
sessions using MD5 is described in RFC 2385.
@


1.85
log
@start to group the parameters for AUTOMATIC KEYING in a more logical way;
ok hshoexer
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.84 2006/09/05 11:33:22 jmc Exp $
d267 2
a268 1
These parameters define the cryptographic transforms to be used for main mode.
d270 2
a271 6
.Ic auth
are
.Ar hmac-md5 ,
.Ar hmac-sha1 ,
.Ar hmac-sha2-256 ,
.Ar hmac-sha2-384 ,
a272 12
.Ar hmac-sha2-512 .
For
.Ic enc
the values
.Ar des ,
.Ar 3des ,
.Ar aes ,
.Ar blowfish ,
and
.Ar cast
are allowed.
For
d274 3
a276 11
the values
.Ar modp768 ,
.Ar modp1024 ,
.Ar modp1536 ,
.Ar modp2048 ,
.Ar modp3072 ,
.Ar modp4096 ,
.Ar modp6144 ,
and
.Ar modp8192
are allowed.
d282 1
a282 1
and group
d289 5
a293 12
Similar to
.Ic main ,
.Ic quick
defines the transforms to be used for quick mode.
However, the possible values for
.Ic auth
are
.Ar hmac-md5 ,
.Ar hmac-sha1 ,
.Ar hmac-ripemd160 ,
.Ar hmac-sha2-256 ,
.Ar hmac-sha2-384 ,
a294 12
.Ar hmac-sha2-512 .
For
.Ic enc
valid values are
.Ar des ,
.Ar 3des ,
.Ar aes ,
.Ar aesctr ,
.Ar blowfish ,
and
.Ar cast .
For
d296 7
a302 10
the values
.Ar modp768 ,
.Ar modp1024 ,
.Ar modp1536 ,
.Ar modp2048 ,
.Ar modp3072 ,
.Ar modp4096 ,
.Ar modp6144 ,
.Ar modp8192 ,
and
d304 5
a308 7
are allowed.
When a group is specified perfect forward security (PFS) will be used.
When the value
.Ar none
is used, PFS will be disabled.
If no quick mode transforms are specified,
the default values
d311 1
a311 2
.Ar aes
are used;
d503 1
a503 4
For
.Ic esp
and
.Ic ah ,
d505 1
a505 1
the encapsulation mode to be used can be specified.
d527 1
a527 4
For both
.Ic esp
and
.Ic ah
d529 3
a531 8
Possible algorithms are
.Ar hmac-md5 ,
.Ar hmac-ripemd160 ,
.Ar hmac-sha1 ,
.Ar hmac-sha2-256 ,
.Ar hmac-sha2-384 ,
and
.Ar hmac-sha2-512 .
d553 5
a557 13
For
.Ic esp
an encryption algorithm needs to be specified.
Possible algorithms are
.Ar 3des-cbc ,
.Ar des-cbc ,
.Ar aes ,
.Ar aesctr ,
.Ar blowfish ,
.Ar cast128 ,
.Ar null ,
and
.Ar skipjack .
d604 26
a629 2
.Sh CRYPTO KEY SIZE
Different cipher types may require different sized keys:
d631 1
a631 1
.Bl -column "CipherXX" "Key Length" -offset indent -compact
d633 7
a639 6
.It Li DES Ta "56 bits"
.It Li 3DES Ta "168 bits"
.It Li AES Ta "variable (128 bits recommended)"
.It Li Blowfish Ta "variable (160 bits recommended)"
.It Li CAST Ta "variable (128 bits maximum and recommended)"
.It Li Skipjack Ta "80 bits"
d651 3
a653 1
Different authentication types may also require different sized keys:
d656 10
a665 7
.It Em Authentication	Key Length
.It Li HMAC-MD5 Ta "128 bits"
.It Li HMAC-RIPEMD160 Ta "160 bits"
.It Li HMAC-SHA1 Ta "160 bits"
.It Li HMAC-SHA2-256 Ta "256 bits"
.It Li HMAC-SHA2-384 Ta "384 bits"
.It Li HMAC-SHA2-512 Ta "512 bits"
a666 8
.Pp
It is very important that keys are not guessable.
One practical way of generating keys is to use
.Xr openssl 1 .
The following generates a 160-bit (20-byte) key:
.Bd -literal -offset indent
$ openssl rand 20 | hexdump -e '20/1 "%02x"'
.Ed
@


1.84
log
@knock out a ton of Aq/Xo/Xc that was either unneeded, or just plain wrong;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.83 2006/09/05 10:50:02 jmc Exp $
d150 13
a162 1
.It Ic ike Op Ar mode
d179 1
a179 1
.Ar srcid
d188 2
a189 5
See
.Xr isakmpd 8
for details on ISAKMP/IKE.
.It Ar encap
The encapsulation protocol to be used.
d193 2
a194 2
.Ar ah .
The default is
d196 3
a198 4
For details on ESP and AH see
.Xr ipsec 4 .
.It Ar tmode
The encapsulation mode to be used can be specified.
d202 3
a204 6
.Ar transport .
When left out,
.Ar tunnel
is chosen.
For details on modes see
.Xr ipsec 4 .
d244 1
a244 1
.It Ic local Ar localip
d249 2
a250 2
Usually this parameter can be left out.
.It Ic peer Ar remote
d361 3
a363 2
.It Ic srcid Ar string
This optional parameter defines an ID of type
d378 3
a380 2
.It Ic dstid Ar string
Similar to
d382 1
a382 5
this optional parameter defines an ID of type
.Dq USER_FQDN
or
.Dq FQDN
to be used
@


1.83
log
@document line splitting using `\';
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.82 2006/09/05 10:40:58 jmc Exp $
d150 1
a150 4
.It Xo
.Ic ike
.Aq Ar mode
.Xc
d179 1
a179 3
.It Xo
.Aq Ar encap
.Xc
d189 1
a189 3
.It Xo
.Aq Ar tmode
.Xc
d200 1
a200 1
.It Ic proto Aq Ar protocol
d214 4
a217 8
.Ic from
.Aq Ar src
.Ic port
.Aq Ar sport
.Ic to
.Aq Ar dst
.Ic port
.Aq Ar dport
d220 1
a220 1
.Aq Ar src
d222 1
a222 1
.Aq Ar dst .
d239 1
a239 1
.It Ic local Aq Ar localip
d245 1
a245 1
.It Ic peer Aq Ar remote
d251 1
a251 1
.Aq Ar dst
d253 1
a253 1
.Aq Ar remote ,
d258 3
a260 6
.Ic main auth
.Aq Ar algorithm
.Ic enc
.Aq Ar algorithm
.Ic group
.Aq Ar group
d303 3
a305 6
.Ic quick auth
.Aq Ar algorithm
.Ic enc
.Aq Ar algorithm
.Ic group
.Aq Ar group
d356 1
a356 4
.It Xo
.Ic srcid
.Aq Ar string
.Xc
d372 1
a372 4
.It Xo
.Ic dstid
.Aq Ar string
.Xc
d381 1
a381 1
.It Ic psk Aq Ar string
d441 1
a441 1
.It Ic proto Aq Ar protocol
d455 4
a458 8
.Ic from
.Aq Ar src
.Ic port
.Aq Ar sport
.Ic to
.Aq Ar dst
.Ic port
.Aq Ar dport
d461 1
a461 1
.Aq Ar src
d463 1
a463 1
.Aq Ar dst .
d480 1
a480 1
.It Ic local Aq Ar localip
d485 1
a485 1
.It Ic peer Aq Ar remote
d491 1
a491 1
.Aq Ar dst
d493 1
a493 1
.Aq Ar remote ,
d497 1
a497 1
.It Ic type Aq Ar modifier
d547 1
a547 3
.It Xo
.Aq Ar mode
.Xc
d563 1
a563 6
.It Xo
.Ic from
.Aq Ar src
.Ic to
.Aq Ar dst
.Xc
d567 1
a567 1
.Aq Ar src
d569 2
a570 5
.Aq Ar dst .
.It Xo
.Ic spi
.Aq Ar number
.Xc
d574 1
a574 4
.It Xo
.Ic auth
.Aq Ar algorithm
.Xc
d608 1
a608 4
.It Xo
.Ic enc
.Aq Ar algorithm
.Xc
d628 1
a628 4
.It Xo
.Ic authkey
.Aq Ar keyspec
.Xc
d642 1
a642 4
.It Xo
.Ic enckey
.Aq Ar keyspec
.Xc
d647 4
a650 8
.Ic from
.Aq Ar src
.Ic to
.Aq Ar dst
.Ic spi
.Aq Ar number
.Ic authkey
.Aq Ar keyspec
d653 1
a653 1
.Aq Ar src
d655 1
a655 1
.Aq Ar dst .
@


1.82
log
@slight text shuffle, and make the isakmpd bits clearer;
ok hshoexer
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.81 2006/09/04 15:51:20 jmc Exp $
d96 3
@


1.81
log
@some wording fixes for the section headers and minor tweaks;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.80 2006/09/04 15:10:37 jmc Exp $
d41 2
d53 3
d61 21
a81 8
is used to set up flows and establish SAs.
The keying daemon can be configured using
.Nm .
The procedures for running the daemon and
using passphrases, host keys, X509 certificates,
or Keynote certificates are documented in
.Xr isakmpd 8 .
Note that the
d83 1
a83 1
option will probably be required to avoid
a90 6
.Pp
The IPsec protocol itself is described in
.Xr ipsec 4 .
Rulesets can be loaded, viewed, and modified via the
.Xr ipsecctl 8
utility.
@


1.80
log
@document comments, address syntax, and list expansion;
remove some duplicate text;

ok hshoexer
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.79 2006/09/01 10:24:31 jmc Exp $
d49 2
a50 2
The flows themselves are a type of route which determine
which packets need to be protected by an SA.
d415 1
a415 1
The following security services are available:
d420 2
d423 1
a423 1
AH provides authentication, integrity, and replay protection, but no
d426 1
a426 1
IPIP provides neither authentication, integrity, replay protection, nor
d428 1
a428 1
However, it allows you to tunnel IP traffic over IP, without setting up
a432 14
For details on ESP and AH see
.Xr ipsec 4 .
When no service is specified,
.Xr ipsecctl 8
will use ESP.
The settings for the security services have to be negotiated by
.Xr isakmpd 8 .
As soon as a packet matches a flow,
.Xr isakmpd 8
automatically starts the negotiation.
See
.Xr isakmpd 8
for details.
.Pp
d540 2
d544 1
a544 1
.Bl -tag -width Ds -offset indent -compact
a556 3
Parameters specify the peers, Security Parameter Index (SPI),
cryptographic transforms, and key material to be used.
.Pp
a689 1
.Pp
@


1.79
log
@a little better text for the sections; ok hshoexer
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.78 2006/08/31 18:44:48 jmc Exp $
d80 25
a118 3
.Pp
Addresses can be specified in CIDR notation (matching netblocks),
as symbolic host names, interface names, or interface group names.
d133 1
a133 7
Parameters specify the packets that will go through the tunnel and which
cryptographic transforms are used for
.Xr isakmpd 8 .
Some parameters are optional.
Certain parameters can be expressed as lists, in which case
.Xr ipsecctl 8
generates all needed rule combinations.
d445 1
a445 5
Parameters specify the packets to which a flow applies.
Some parameters are optional.
Certain parameters can be expressed as lists, in which case
.Xr ipsecctl 8
generates all needed rule combinations.
d569 2
a570 3
Certain parameters can be expressed as lists, in which case
.Xr ipsecctl 8
generates all needed rule combinations.
@


1.78
log
@knock out the cpp/m4 stuff from MACROS; after discussion with many...
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.77 2006/08/31 17:50:43 jmc Exp $
d79 1
a79 1
.Sh MACROS
d94 3
d98 3
a100 1
Rules can also specify IPsec flows and SAs to be established automatically by
a117 3
.Pp
Addresses can be specified in CIDR notation (matching netblocks),
as symbolic host names, interface names or interface group names.
d385 4
a388 2
IPsec uses
.Em flows
a433 3
.Pp
Addresses can be specified in CIDR notation (matching netblocks),
as symbolic host names, interface names or interface group names.
d527 6
a532 5
The security parameters for a
.Ar flow
are stored in the Security Association Database
(SADB).
Some examples of setting up SAs:
d534 1
a534 1
# Set up IPsec SAs for flows between 192.168.3.14 and 192.168.3.12
a559 3
.Pp
Addresses can be specified in CIDR notation (matching netblocks),
as symbolic host names, interface names or interface group names.
@


1.77
log
@some improvements to srcid and destid, as noted by mpf;
ok hshoexer mpf
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.76 2006/08/31 11:23:57 jmc Exp $
d80 1
a80 5
Much like
.Xr cpp 1
or
.Xr m4 1 ,
macros can be defined that will later be expanded in context.
@


1.76
log
@expand DESCRIPTION; input from ho hshoexer naddy
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.75 2006/08/31 01:16:23 jmc Exp $
d346 1
a346 1
.Aq Ar fqdn
d348 5
a352 1
This optional parameter defines either a UFQDN or an FQDN that will be used by
d355 3
a357 1
If the argument is an email address (bob@@example.com), ipsecctl will use UFQDN as the ID type.
d359 4
d365 1
a365 1
.Aq Ar fqdn
d369 6
a374 1
this optional parameter defines a FQDN to be used by the remote peer.
@


1.75
log
@clarify an .Sh; agreed with hshoexer
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.74 2006/08/30 16:07:29 jmc Exp $
d34 43
a76 4
file specifies rules and definitions for
.Xr ipsec 4
IP security services.
The rulesets themselves can be loaded, viewed, and modified via the
d78 1
a78 1
userland utility.
@


1.74
log
@cut down the examples; ok hshoexer
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.73 2006/08/30 14:16:00 jmc Exp $
d475 1
a475 1
.Sh SECURITY ASSOCIATIONS (SAs)
@


1.73
log
@some tcp md5 bits;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.72 2006/08/30 14:08:11 jmc Exp $
d62 1
a62 1
Some examples to set up automatic keying:
d65 3
a67 3
# First between the networks 10.1.1.0/24 and 10.1.2.0/24
# Second between the machines 192.168.3.1 and 192.168.3.2

a68 12
ike esp from 192.168.3.1 to 192.168.3.2

# Using interface group names and symbolic host names
ike esp from egress to 10.1.2.0/24 peer mygate.home.net

# Protect remote bridges (Ethernet frames over IP)
ike esp proto etherip from 192.168.100.1 to 192.168.200.1

# Use bypass flow to exclude local subnets from larger VPNs
flow in from 192.168.62.0/24 to 192.168.62.0/24 type bypass
ike dynamic esp from 192.168.62.0/24 to 192.168.48.0/20 \e
	peer 192.168.3.12
d336 1
a336 1
Some examples to set up flows:
d338 3
a340 1
# Host-to-host
a341 6

# Same as above, but explicitly specifying "in" and "out" rules
flow esp out from 192.168.3.14  to 192.168.3.100
flow esp in  from 192.168.3.100 to 192.168.3.14

# Net-to-net
a342 11

# Same as above, but explicitly specifying "in" and "out" rules
flow esp out from 192.168.7.0/24 to 192.168.8.0/24 peer 192.168.3.12
flow esp in  from 192.168.8.0/24 to 192.168.7.0/24 peer 192.168.3.12

# Same as above, but explicitly specifying the local gateway IP
flow esp from 192.168.7.0/24 to 192.168.8.0/24 \e
	local 192.168.1.1 peer 192.168.3.12

# Protect remote bridges (Ethernet frames over IP)
flow esp proto etherip from 192.168.100.1 to 192.168.200.1
d480 1
a480 1
Some examples to set up SAs:
a485 10

Some examples to set up TCP MD5 signatures:

# Set up keys for TCP MD5 signatures
tcpmd5 from 192.168.3.14 to 192.168.3.27 spi 0x1000:0x1001 \e
	authkey 0xdeadbeef:0xbeefdead

# Set up keys for TCP MD5 signatures; read keys from files
tcpmd5 from 192.168.3.14 to 192.168.3.27 spi 0x1000:0x1001 \e
	authkey file "/path/to/key1:/path/to/key2"
@


1.72
log
@comment out some comp stuff i missed earlier;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.71 2006/08/30 12:58:25 jmc Exp $
d513 10
d536 2
a680 14
RFC 2385 describes a mechanism to protect
.Xr tcp 4
sessions using MD5.
Some examples to set up TCP MD5 signatures:
.Bd -literal -offset 3n
# Set up keys for TCP MD5 signatures
tcpmd5 from 192.168.3.14 to 192.168.3.27 spi 0x1000:0x1001 \e
	authkey 0xdeadbeef:0xbeefdead

# Set up keys for TCP MD5 signatures; read keys from files
tcpmd5 from 192.168.3.14 to 192.168.3.27 spi 0x1000:0x1001 \e
	authkey file "/path/to/key1:/path/to/key2"
.Ed
.Pp
d693 3
@


1.71
log
@better wording for the key generation section;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.70 2006/08/30 12:54:57 jmc Exp $
d597 14
a610 14
.It Xo
.Ic comp
.Aq Ar algorithm
.Xc
The compression algorithm to be used.
Possible algorithms are
.Ar deflate
and
.Ar lzs .
Note that
.Ar lzs
is only available with
.Xr hifn 4
because of the patent held by Hifn, Inc.
@


1.70
log
@kill more redundant text, and an oops;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.69 2006/08/30 12:50:40 jmc Exp $
d731 3
a733 1
One practical way of generating 160-bit (20-byte) keys is a follows:
d738 1
@


1.69
log
@remove some repeated text, and shuffle a little;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.68 2006/08/30 12:31:07 jmc Exp $
d650 1
a650 1
will then generate the matching incoming SA using the second values specified.
a734 13
.Pp
For
.Ic spi ,
.Ic authkey ,
and
.Ic enckey ,
it is possible to specify two colon separated values.
.Xr ipsecctl 8
will then generate the matching incoming SA using the second values for
.Ic spi ,
.Ic authkey ,
and
.Ic enckey .
@


1.68
log
@one more from ho;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.67 2006/08/30 12:30:04 jmc Exp $
d647 4
d655 2
a656 2
The encryption key is defined similar to
.Ar authkey .
d690 1
a690 25
.Pp
The authentication key to be used is a hexadecimal string of arbitrary length
or a path to a file containing the key.
The filename may be given as either an absolute path to the file
or a relative pathname,
and is specified as follows:
.Bd -literal -offset -indent
authkey file "filename"
.Ed
.Pp
It is very important that the key is not guessable.
One practical way of generating 160-bit (20-byte) keys is as follows:
.Bd -literal -offset indent
$ openssl rand 20 | hexdump -e '20/1 "%02x"'
.Ed
.Pp
For both
.Ic spi
and
.Ic authkey
it is possible to specify two values separated by a colon.
.Xr ipsecctl 8
will then generate the matching incoming SA using the second values for
.Ic spi
and
@


1.67
log
@correction; from ho
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.66 2006/08/30 12:27:54 jmc Exp $
d742 1
a742 1
.It Li HMAC-md5 Ta "128 bits"
@


1.66
log
@knock out some redundant text; from ho
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.65 2006/08/30 12:20:11 jmc Exp $
d736 1
a736 2
This is because the most significant bit of each byte is ignored by both
algorithms.
@


1.65
log
@put the PFS stuff in the right place;

from uwe werler;
tweaks/ok hshoexer ho
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.64 2006/08/30 11:44:23 jmc Exp $
a82 12
This is accomplished by the following rules:
.Bl -tag -width xxxx
.It Ic ike esp
Creates an IPsec tunnel using ESP.
.It Ic ike ah
Creates an IPsec tunnel using AH.
.El
.Pp
See
.Xr isakmpd 8
for details on ISAKMP/IKE.
.Pp
d122 4
a343 4
.Pp
See also
.Sx ISAKMP EXAMPLES
below.
@


1.64
log
@knock out ipcomp for now;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.63 2006/08/30 11:41:45 jmc Exp $
d54 1
a54 1
For example,
d56 1
a56 1
remote_gw = \&"192.168.3.12\&"
a260 4
When a group is specified perfect forward security (PFS) will be used.
When the value
.Ar none
is used instead, PFS will be disabled.
d264 3
a266 4
.Ar hmac-sha1
and
.Ar aes
and PFS with the group
d310 1
d312 1
a312 1
.Ar modp8192
d314 4
d323 2
a324 1
and no specific group are chosen.
@


1.63
log
@put this page into a better structure order
(very little text change);

from hshoexer and myself; ok everyone
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.62 2006/08/29 18:10:31 msf Exp $
d552 2
a553 1
.Ic esp ,
d555 1
a555 2
and
.Ic ipcomp
d781 1
a781 1
.Xr ipcomp 4 ,
@


1.62
log
@add support for ufqdn ids in ike rules

ok hshoexer@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.61 2006/08/29 17:52:40 naddy Exp $
d59 25
a83 5
.Sh FLOWS
IPsec uses
.Em flows
to determine whether to apply security services to an IP packet or not.
The following security services are available:
d85 4
a88 12
.It Ic flow esp
ESP can provide the following properties:
authentication, integrity, replay protection, and confidentiality of the data.
.It Ic flow ah
AH provides authentication, integrity, and replay protection, but no
confidentiality.
.It Ic flow ipip
IPIP provides neither authentication, integrity, replay protection, nor
confidentiality.
However, it allows you to tunnel IP traffic over IP, without setting up
.Xr gif 4
interfaces.
a90 10
For details on ESP and AH see
.Xr ipsec 4 .
When no service is specified,
.Xr ipsecctl 8
will use ESP.
The settings for the security services have to be negotiated by
.Xr isakmpd 8 .
As soon as a packet matches a flow,
.Xr isakmpd 8
automatically starts the negotiation.
d93 1
a93 1
for details.
d95 3
a97 1
Parameters specify the packets to which a flow applies.
d106 53
a158 14
.It Ic in No or Ic out
This rule applies to incoming or outgoing packets.
If neither
.Ic in
nor
.Ic out
are specified,
.Xr ipsecctl 8
will assume the direction
.Ic out
for this rule and will construct a proper
.Ic in
rule.
Thus packets in both directions will be matched.
d205 3
a207 2
parameter specifies the address or FQDN of the local endpoint of this
flow and can be usually left out.
d212 1
a212 1
flow.
a219 44
.It Ic type Aq Ar modifier
This optional parameter sets up special flows using the modifiers
.Ar require ,
.Ar use ,
.Ar acquire ,
.Ar dontacq ,
.Ar bypass
or
.Ar deny .
A bypass flow is used to specify a flow for which security processing
will be bypassed: matching packets will not be processed by any other
flows and handled in normal operation.
A deny flow is used to drop any matching packets.
By default,
.Xr ipsecctl 8
will automatically set up normal flows with the corresponding type.
.El
.Sh IPSEC SAs
The security parameters for a
.Ar flow
are stored in the Security Association Database
(SADB).
The following rules enter SAs in the SADB:
.Pp
.Bl -tag -width Ds -offset indent -compact
.It Ic esp
Enter an ESP SA.
.It Ic ah
Enter an AH SA.
.It Ic ipcomp
Enter an IPCOMP SA.
.It Ic ipip
Enter an IPIP pseudo SA.
.El
.Pp
Parameters specify the peers, Security Parameter Index (SPI),
cryptographic transforms, and key material to be used.
Certain parameters can be expressed as lists, in which case
.Xr ipsecctl 8
generates all needed rule combinations.
.Pp
Addresses can be specified in CIDR notation (matching netblocks),
as symbolic host names, interface names or interface group names.
.Bl -tag -width xxxx
d221 6
a226 1
.Aq Ar mode
d228 2
a229 35
For
.Ic esp ,
.Ic ah ,
and
.Ic ipcomp
the encapsulation mode to be used can be specified.
Possible modes are
.Ar tunnel
and
.Ar transport .
When left out,
.Ar tunnel
is chosen.
For details on modes see
.Xr ipsec 4 .
.It Xo
.Ic from
.Aq Ar src
.Ic to
.Aq Ar dst
.Xc
This SA is for a
.Ar flow
between the peers
.Aq Ar src
and
.Aq Ar dst .
.It Xo
.Ic spi
.Aq Ar number
.Xc
The SPI identifies a specific SA.
.Ar number
is a 32-bit value and needs to be unique.
.It Xo
d231 1
a231 8
.Aq Ar algorithm
.Xc
For both
.Ic esp
and
.Ic ah
an authentication algorithm can be specified.
Possible algorithms are
a232 1
.Ar hmac-ripemd160 ,
d238 28
a265 2
.Pp
If no algorithm is specified,
d267 6
a272 3
will choose
.Ar hmac-sha2-256
by default.
d274 1
a274 1
.Ic comp
a275 12
.Xc
The compression algorithm to be used.
Possible algorithms are
.Ar deflate
and
.Ar lzs .
Note that
.Ar lzs
is only available with
.Xr hifn 4
because of the patent held by Hifn, Inc.
.It Xo
d278 2
d281 14
d296 4
a299 5
.Ic esp
an encryption algorithm needs to be specified.
Possible algorithms are
.Ar 3des-cbc ,
.Ar des-cbc ,
a302 2
.Ar cast128 ,
.Ar null ,
d304 18
a321 5
.Ar skipjack .
.Pp
If no algorithm is specified,
.Xr ipsecctl 8
will choose
d323 1
a323 1
by default.
d325 2
a326 2
.Ic authkey
.Aq Ar keyspec
d328 5
a332 9
.Ar keyspec
defines the authentication key to be used.
It is either a hexadecimal string or a path to a file containing the key.
The filename may be given as either an absolute path to the file
or a relative pathname,
and is specified as follows:
.Bd -literal -offset -indent
authkey file "filename"
.Ed
d334 2
a335 2
.Ic enckey
.Aq Ar keyspec
d337 13
a349 2
The encryption key is defined similar to
.Ar authkey .
d352 30
a381 1
Different cipher types may require different sized keys.
d383 14
a396 8
.Bl -column "CipherXX" "Key Length" -offset indent -compact
.It Em Cipher	Key Length
.It Li DES Ta "56 bits"
.It Li 3DES Ta "168 bits"
.It Li AES Ta "variable (128 bits recommended)"
.It Li Blowfish Ta "variable (160 bits recommended)"
.It Li CAST Ta "variable (128 bits maximum and recommended)"
.It Li Skipjack Ta "80 bits"
d399 3
a401 22
Use of DES or Skipjack as an encryption algorithm is not recommended
(except for backwards compatibility) due to their short key length.
Furthermore, attacks on Skipjack have shown severe weaknesses
in its structure.
.Pp
Note that DES requires 8 bytes to form a 56-bit key and 3DES requires 24 bytes
to form its 168-bit key.
This is because the most significant bit of each byte is ignored by both
algorithms.
.Pp
It is very important that keys are not guessable.
One practical way of generating 160-bit (20-byte) keys is a follows:
.Bd -literal -offset indent
$ openssl rand 20 | hexdump -e '20/1 "%02x"'
.Ed
.Pp
For
.Ic spi ,
.Ic authkey ,
and
.Ic enckey ,
it is possible to specify two colon separated values.
d403 2
a404 7
will then generate the matching incoming SA using the second values for
.Ic spi ,
.Ic authkey ,
and
.Ic enckey .
.Sh AUTOMATIC KEYING USING ISAKMP/IKE
Rules can also specify IPsec flows and SAs to be established automatically by
d406 3
a408 8
This is accomplished by the following rules:
.Bl -tag -width xxxx
.It Ic ike esp
Creates an IPsec tunnel using ESP.
.It Ic ike ah
Creates an IPsec tunnel using AH.
.El
.Pp
d411 1
a411 1
for details on ISAKMP/IKE.
d413 1
a413 3
Parameters specify the packets that will go through the tunnel and which
cryptographic transforms are used for
.Xr isakmpd 8 .
d422 14
a435 53
.It Xo
.Ic ike
.Aq Ar mode
.Xc
When
.Ar passive
is specified,
.Xr isakmpd 8
will not immediately start negotiation of this tunnel, but wait for an incoming
request from the remote peer.
When
.Ar active
or
.Ar dynamic
is specified, negotiation will be started at once.
The
.Ar dynamic
mode will additionally enable Dead Peer Detection (DPD) and use the
local hostname as the identity of the local peer, if not specified by
the
.Ar srcid
parameter.
.Ar dynamic
mode should be used for hosts with dynamic IP addresses like road
warriors or dialup hosts.
If omitted,
.Ar active
mode will be used.
.It Xo
.Aq Ar encap
.Xc
The encapsulation protocol to be used.
Possible protocols are
.Ar esp
and
.Ar ah .
The default is
.Ar esp .
For details on ESP and AH see
.Xr ipsec 4 .
.It Xo
.Aq Ar tmode
.Xc
The encapsulation mode to be used can be specified.
Possible modes are
.Ar tunnel
and
.Ar transport .
When left out,
.Ar tunnel
is chosen.
For details on modes see
.Xr ipsec 4 .
d482 2
a483 3
parameter specifies the local address to be used, if we are multi-homed
or have aliases.
Usually this parameter can be left out.
d488 1
a488 1
particular flow.
d496 82
d579 8
a586 1
.Ic main auth
a587 4
.Ic enc
.Aq Ar algorithm
.Ic group
.Aq Ar group
d589 6
a594 4
These parameters define the cryptographic transforms to be used for main mode.
Possible values for
.Ic auth
are
d596 1
d602 2
a603 28
For
.Ic enc
the values
.Ar des ,
.Ar 3des ,
.Ar aes ,
.Ar blowfish ,
and
.Ar cast
are allowed.
For
.Ic group
the values
.Ar modp768 ,
.Ar modp1024 ,
.Ar modp1536 ,
.Ar modp2048 ,
.Ar modp3072 ,
.Ar modp4096 ,
.Ar modp6144 ,
and
.Ar modp8192
are allowed.
When a group is specified perfect forward security (PFS) will be used.
When the value
.Ar none
is used instead, PFS will be disabled.
If omitted,
d605 10
a614 2
will use the default values
.Ar hmac-sha1
d616 6
a621 3
.Ar aes
and PFS with the group
.Ar modp1024 .
a622 2
.Ic quick auth
.Aq Ar algorithm
a624 2
.Ic group
.Aq Ar group
a625 14
Similar to
.Ic main ,
.Ic quick
defines the transforms to be used for quick mode.
However, the possible values for
.Ic auth
are
.Ar hmac-md5 ,
.Ar hmac-sha1 ,
.Ar hmac-ripemd160 ,
.Ar hmac-sha2-256 ,
.Ar hmac-sha2-384 ,
and
.Ar hmac-sha2-512 .
d627 5
a631 4
.Ic enc
valid values are
.Ar des ,
.Ar 3des ,
d635 2
d638 5
a642 18
.Ar cast .
For
.Ic group
the values
.Ar modp768 ,
.Ar modp1024 ,
.Ar modp1536 ,
.Ar modp2048 ,
.Ar modp3072 ,
.Ar modp4096 ,
.Ar modp6144 ,
and
.Ar modp8192
are allowed.
If no quick mode transforms are specified,
the default values
.Ar hmac-sha2-256
and
d644 1
a644 1
and no specific group are chosen.
d646 2
a647 2
.Ic srcid
.Aq Ar fqdn
d649 9
a657 5
This optional parameter defines either a UFQDN or an FQDN that will be used by
.Xr isakmpd 8
as the identity of the local peer.
If the argument is an email address (bob@@example.com), ipsecctl will use UFQDN as the ID type.
Anything else is considered to be an FQDN.
d659 2
a660 2
.Ic dstid
.Aq Ar fqdn
d662 2
a663 25
Similar to
.Ic srcid ,
this optional parameter defines a FQDN to be used by the remote peer.
.It Ic psk Aq Ar string
Use a pre-shared key
.Ar string
for authentication.
If not specified, RSA authentication will be used.
By default, the system startup script
.Xr rc 8
generates a key-pair for
.Xr isakmpd 8
when starting, if one does not already exist.
.El
.Pp
See also
.Sx ISAKMP EXAMPLES
below.
.Sh TCP MD5 SIGNATURES
RFC 2385 describes a mechanism to protect
.Xr tcp 4
sessions using MD5.
A Security Association (SA) for TCP MD5 signatures is set up using the
following rule:
.Bl -tag -width xxxx
d675 15
a722 1
.El
d726 40
a765 56
.Sh EXAMPLES
.Bd -literal
# Host-to-host
flow esp from 192.168.3.14 to 192.168.3.100

# Same as above, but explicitly specifying "in" and "out" rules
flow esp out from 192.168.3.14  to 192.168.3.100
flow esp in  from 192.168.3.100 to 192.168.3.14

# Net-to-net
flow esp from 192.168.7.0/24 to 192.168.8.0/24 peer 192.168.3.12

# Same as above, but explicitly specifying "in" and "out" rules
flow esp out from 192.168.7.0/24 to 192.168.8.0/24 peer 192.168.3.12
flow esp in  from 192.168.8.0/24 to 192.168.7.0/24 peer 192.168.3.12

# Same as above, but explicitly specifying the local gateway IP
flow esp from 192.168.7.0/24 to 192.168.8.0/24 \e
	local 192.168.1.1 peer 192.168.3.12

# Protect remote bridges (Ethernet frames over IP)
flow esp proto etherip from 192.168.100.1 to 192.168.200.1

# Set up IPsec SAs for flows between 192.168.3.14 and 192.168.3.12
esp from 192.168.3.14 to 192.168.3.12 spi 0xdeadbeef:0xbeefdead \e
	auth hmac-sha2-256 enc aesctr authkey file "auth14:auth12" \e
	enckey file "enc14:enc12"
.Ed
.Sh TCP MD5 EXAMPLES
.Bd -literal
# Set up keys for TCP MD5 signatures
tcpmd5 from 192.168.3.14 to 192.168.3.27 spi 0x1000:0x1001 \e
	authkey 0xdeadbeef:0xbeefdead

# Set up keys for TCP MD5 signatures; read keys from files
tcpmd5 from 192.168.3.14 to 192.168.3.27 spi 0x1000:0x1001 \e
	authkey file "/path/to/key1:/path/to/key2"
.Ed
.Sh ISAKMP EXAMPLES
.Bd -literal
# Set up two tunnels:
# First between the networks 10.1.1.0/24 and 10.1.2.0/24
# Second between the machines 192.168.3.1 and 192.168.3.2

ike esp from 10.1.1.0/24 to 10.1.2.0/24 peer 192.168.3.2
ike esp from 192.168.3.1 to 192.168.3.2

# Using interface group names and symbolic host names
ike esp from egress to 10.1.2.0/24 peer mygate.home.net

# Protect remote bridges (Ethernet frames over IP)
ike esp proto etherip from 192.168.100.1 to 192.168.200.1

# Use bypass flow to exclude local subnets from larger VPNs
flow in from 192.168.62.0/24 to 192.168.62.0/24 type bypass
ike dynamic esp from 192.168.62.0/24 to 192.168.48.0/20 peer 192.168.3.12
d767 13
@


1.61
log
@Add support for IKE AH rules to ipsecctl.  Man page input by jmc@@.
ok hshoexer@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.60 2006/07/22 16:47:49 jmc Exp $
d626 1
a626 1
This optional parameter defines a FQDN that will be used by
d629 2
@


1.60
log
@corrections from alexey e. suslikov;
ok hshoexer
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.59 2006/06/28 13:15:41 hshoexer Exp $
d381 1
a381 1
This is accomplished by the following rule:
d385 2
a388 1
Note that AH is not yet supported.
a406 1
.Ic esp
d432 12
@


1.59
log
@document lists, prodded by david@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.58 2006/06/18 18:18:01 hshoexer Exp $
d714 1
a714 1
# Protect remote bridges (IP over Ethernet)
d744 1
a744 1
# Protect remote bridges (IP over Ethernet)
@


1.58
log
@add group "none"; when choosen, pfs will be disabled.

ok david msf
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.57 2006/06/14 19:04:26 naddy Exp $
d95 3
d213 3
d396 3
@


1.57
log
@recover list of key sizes from vpn(8); suggested by markus@@, ok hshoexer@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.56 2006/06/13 16:13:41 naddy Exp $
d538 4
d548 2
a549 1
and no specific group specified.
@


1.56
log
@For IKE, allow main mode SHA2 and quick mode AESCTR transforms,
which were recently added to isakmpd.  ok hshoexer@@, markus@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.55 2006/06/11 21:14:34 naddy Exp $
d331 22
@


1.55
log
@the default encryption algorithm with static keying is AES-CBC now; ok hshoexer@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.54 2006/06/11 11:13:40 hshoexer Exp $
d487 4
a490 1
.Ar hmac-sha1
d492 1
a492 1
.Ar hmac-md5 .
d499 1
a499 1
.Ar blowfish
d512 1
a512 1
.Ar modp6144
d542 1
a542 1
.Ar hmac-sha2-384
d547 1
a547 1
valid values are again
d551 2
a552 1
.Ar blowfish
d564 1
a564 1
.Ar modp6144
@


1.54
log
@Adopt to recent changes (mopd3072 is not the default anymore).
Prodded by david@@, thanks!
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.53 2006/06/08 21:15:21 naddy Exp $
d309 1
a309 1
.Ar aesctr
@


1.53
log
@Add a transport mode specifier to ike rules.  Tunnel mode remains the default.
"looks right" hshoexer@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.52 2006/06/02 18:15:26 david Exp $
d516 2
a517 1
.Ar hmac-sha1 ,
d519 1
a519 2
and
.Ar modp3072 .
d566 2
a567 1
.Ar hmac-sha2-256 ,
d569 1
a569 3
and
.Ar modp3072
are chosen.
@


1.52
log
@correct spelling of specified
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.51 2006/06/02 15:56:55 naddy Exp $
d359 1
a359 1
Note that AH and transport mode are not yet supported.
d401 13
@


1.51
log
@document port modifiers in ike rules
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.50 2006/06/02 06:43:05 jmc Exp $
d391 1
a391 1
local hostname as the identity of the local peer, if not specifed by
@


1.50
log
@mark up keywords using .Ic; ok hshoexer
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.49 2006/06/01 22:19:24 jmc Exp $
d417 2
d421 2
a422 4
.Ic local
.Aq Ar localip
.Ic peer
.Aq Ar remote
d431 14
d450 1
d460 1
a460 1
.Ar peer
@


1.49
log
@address has two `d', and i had to use a dictionary to check ;)
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.48 2006/06/01 20:29:05 naddy Exp $
d49 3
a51 3
.Ar flow ,
.Ar from ,
.Ar esp ) .
d99 1
a99 1
.It Ar in No or Ar out
d102 1
a102 1
.Ar in
d104 1
a104 1
.Ar out
d108 1
a108 1
.Ar out
d110 1
a110 1
.Ar in
d113 1
a113 1
.It Ar proto Aq Ar protocol
d115 1
a115 1
.Ar proto
d127 1
a127 1
.Ar from
d129 1
a129 1
.Ar port
d131 1
a131 1
.Ar to
d133 1
a133 1
.Ar port
d144 1
a144 1
.Ar port
d156 1
a156 1
.It Ar local Aq Ar localip
d158 1
a158 1
.Ar local
d161 1
a161 1
.It Ar peer Aq Ar remote
d163 1
a163 1
.Ar peer
d171 1
a171 1
.Ar peer
d173 1
a173 1
.It Ar type Aq Ar modifier
d218 2
a219 2
.Ar esp ,
.Ar ah
d221 1
a221 1
.Ar ipcomp
d233 1
a233 1
.Ar from
d235 1
a235 1
.Ar to
d245 1
a245 1
.Ar spi
d252 1
a252 1
.Ar auth
d256 1
a256 1
.Ar esp
d258 1
a258 1
.Ar ah
d275 1
a275 1
.Ar comp
d289 1
a289 1
.Ar enc
d293 1
a293 1
.Ar esp
d312 1
a312 1
.Ar authkey
d325 1
a325 1
.Ar enckey
d339 2
a340 2
.Ar spi ,
.Ar authkey ,
d342 1
a342 1
.Ar enckey ,
d346 2
a347 2
.Ar spi ,
.Ar authkey ,
d349 1
a349 1
.Ar enckey .
d373 1
a373 1
.Ar ike
d375 1
a375 1
.Ar esp
d401 1
a401 1
.It Ar proto Aq Ar protocol
d403 1
a403 1
.Ar proto
d415 1
a415 1
.Ar from
d417 1
a417 1
.Ar to
d419 1
a419 1
.Ar local
d421 1
a421 1
.Ar peer
d432 1
a432 1
.Ar local
d437 1
a437 1
.Ar peer
d448 1
a448 1
.Ar main auth
d450 1
a450 1
.Ar enc
d452 1
a452 1
.Ar group
d457 1
a457 1
.Aq Ar auth
d463 1
a463 1
.Aq Ar enc
d473 1
a473 1
.Aq Ar group
d493 1
a493 1
.Ar quick auth
d495 1
a495 1
.Ar enc
d497 1
a497 1
.Ar group
d501 2
a502 2
.Ar main ,
.Ar quick
d505 1
a505 1
.Aq Ar auth
d515 1
a515 1
.Ar enc
d524 1
a524 1
.Aq Ar group
d544 1
a544 1
.Ar srcid
d551 1
a551 1
.Ar dstid
d555 1
a555 1
.Ar srcid ,
d557 1
a557 1
.It Ar psk Aq Ar string
d580 2
a581 2
.Ar tcpmd5
.Ar from
d583 1
a583 1
.Ar to
d585 1
a585 1
.Ar spi
d587 1
a587 1
.Ar authkey
d595 1
a595 1
.Ar spi
d614 1
a614 1
.Ar spi
d616 1
a616 1
.Ar authkey
d620 1
a620 1
.Ar spi
d622 1
a622 1
.Ar authkey .
@


1.48
log
@document port matching in flows; ok hshoexer@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.47 2006/05/28 08:04:34 jmc Exp $
d96 1
a96 1
Adresses can be specified in CIDR notation (matching netblocks),
d211 1
a211 1
Adresses can be specified in CIDR notation (matching netblocks),
d369 1
a369 1
Adresses can be specified in CIDR notation (matching netblocks),
@


1.47
log
@missing `Ar';
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.46 2006/05/27 17:37:02 hshoexer Exp $
d129 2
d133 2
a134 4
.Ar local
.Aq Ar localip
.Ar peer
.Aq Ar remote
d143 14
d161 1
@


1.46
log
@Adresses can be specified in CIDR notation, as symbolic host names, interface
names or interface group names.  So it's time to document this...
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.45 2006/05/27 17:21:40 hshoexer Exp $
d438 1
a438 1
.Aq group
@


1.45
log
@allow to specify groups to be used IKE
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.44 2006/05/26 09:26:07 jmc Exp $
d95 3
a139 1
All addresses are specified either in CIDR notation or as FQDN.
d195 3
d353 3
a412 1
All addresses are specified either in CIDR notation or as FQDN.
a578 1
All addresses are specified either in CIDR notation or as FQDN.
d658 3
@


1.44
log
@vpn.8 removal;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.43 2006/05/18 21:27:24 miod Exp $
d430 2
d450 13
d466 2
a467 1
.Ar hmac-sha1
d469 1
a469 1
.Ar aes .
d475 2
d501 13
d516 2
a517 1
.Ar hmac-sha2-256
d519 1
a519 1
.Ar aes
@


1.43
log
@paramter -> parameter
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.42 2006/04/19 16:10:50 hshoexer Exp $
d634 1
a634 2
.Xr isakmpd 8 ,
.Xr vpn 8
@


1.42
log
@"type" keyword to specify flow type (require, use, etc.)
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.41 2006/04/19 15:49:49 hshoexer Exp $
d431 1
a431 1
These paramters define the cryptographic transforms to be used for main mode.
@


1.41
log
@add hostname resolver.

at least some eyeballing by cloder@@
tested by jean raby, requested/suggested by rod withworth
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.40 2006/04/13 11:55:07 hshoexer Exp $
d158 4
@


1.40
log
@Add support for "local" to ike rules.  Allows to specify the local IP to be
used on a multi-homed machine.  Also, relax order of peer/local keywords.

ok markus@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.39 2006/04/12 14:48:12 hshoexer Exp $
d137 1
a137 1
All addresses are specified in CIDR notation.
d143 1
a143 1
parameter specifies the address of the local endpoint of this particular
d147 2
a148 1
parameter specifies the address of the remote endpoint of this flow.
d401 1
a401 1
All addresses are specified in CIDR notation.
d412 2
a413 1
parameter specifies the address of the remote endpoint of this particular flow.
d536 1
a536 1
All addresses are specified in CIDR notation.
@


1.39
log
@document that tunnel and transport mode can be specified for SAs.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.38 2006/03/31 16:30:47 jmc Exp $
d147 1
a147 2
parameter specifies the address of the remote endpoint of this
flow.
d391 2
d405 5
d411 1
a411 2
parameter specifies the address of the remote endpoint of this particular
flow.
@


1.38
log
@tweaks;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.37 2006/03/31 14:02:08 markus Exp $
d190 18
@


1.37
log
@allow specification of encapsulated protocol for ike; ok hshoexer
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.36 2006/03/31 13:13:51 markus Exp $
d122 1
a122 1
.Em /etc/protocols .
d368 1
a368 1
.Em /etc/protocols .
d565 1
a565 1
# Protect remote bridges (IP over ethernet)
d592 1
a592 1
# Protect remote bridges (IP over ethernet)
@


1.36
log
@allow specification of encapsulated protocol for flows; ok hshoexer
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.35 2006/03/31 09:15:18 jmc Exp $
d356 13
d591 3
@


1.35
log
@uppercase `ip';
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.34 2006/03/30 12:44:20 markus Exp $
d110 13
d551 3
@


1.34
log
@allow specification of outer local ips in flows (SADB_EXT_ADDRESS_SRC); ok hshoexer, reyk
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.33 2006/03/22 16:01:23 reyk Exp $
d535 1
a535 1
# Same as above, but explicitly specifying the local gateway ip
@


1.33
log
@add support for macros in ipsec.conf(5). some bits have already been
there.

requested by david@@
ok hshoexer@@, msf@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.32 2006/03/07 00:30:28 reyk Exp $
d115 2
d129 4
d134 1
a134 1
parameter specifies the address of the remote endpoint of this particular
d534 4
@


1.32
log
@add support for special "bypass" and "deny" flows.

ok hshoexer@@, thanks jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.31 2006/03/07 00:19:58 reyk Exp $
d40 19
@


1.31
log
@add an ike option for road warrior setups (hosts with dynamic ip
addresses).

"ike dynamic esp" will use the system's hostname as the fqdn source id
(instead of the ip address) by default and enable dpd (dead peer
detection) to allow smooth reconnects after an ip address change (i.e.
forced reconnect with consumer adsl lines).

ok hshoexer@@, looks fine markus@@, jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.30 2006/02/21 12:19:17 hshoexer Exp $
d118 12
d533 4
@


1.30
log
@The new default encryption algorithm for main mode is AES instead of 3DES.
Noticed as not being documented by otto@@.

ok otto@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.29 2006/01/16 23:57:20 reyk Exp $
d278 3
a280 1
.Ar passive
d284 1
a284 1
is specified
d288 18
a305 3
If not specified,
.Xr isakmpd 8
will start negotiation at once.
@


1.29
log
@add support for pre-shared keys with "ike esp" using the new keyword
"psk". rsa-sig is recommended and will still be used by default.

ok hshoexer@@, manpage ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.28 2005/12/06 14:27:57 markus Exp $
d340 1
a340 1
.Xr isakmpd 8
d344 1
a344 1
.Ar 3des .
@


1.28
log
@ipip support: ip-in-ip w/o gif(4); ok hshoexer
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.27 2005/11/24 13:53:41 hshoexer Exp $
d394 5
a398 5
.El
.Pp
Note that
.Xr isakmpd 8
will use RSA authentication.
d401 4
a404 1
generates a key-pair when starting, if one does not already exist.
@


1.27
log
@"hmac" not "hmc", notice by <gwyllion at ulyssis dot org>
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.26 2005/11/24 11:53:23 hshoexer Exp $
d52 6
d133 2
@


1.26
log
@Make clear we only have "hmac-sha1" and "hmac-md5".
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.25 2005/10/30 21:26:16 jmc Exp $
d167 1
a167 1
.Ar hmc-sha2-512 .
@


1.25
log
@- SEE ALSO is sorted by section first
- new sentence, new line
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.24 2005/10/30 19:54:07 hshoexer Exp $
a165 2
.Ar hmc-sha2-512 ,
.Ar md5 ,
d167 1
a167 1
.Ar sha1 .
d318 1
a318 1
.Ar sha1
d320 1
a320 1
.Ar md5 .
d334 1
a334 1
.Aq Ar sha1
d336 1
a336 1
.Aq Ar 3des .
@


1.24
log
@Xr ipcomp, sort "SEE ALSO" section
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.23 2005/10/30 19:50:59 hshoexer Exp $
d180 2
a181 1
The compression algorithm to be used.  Possible algorithms are
d499 2
a502 2
.Xr isakmpd.conf 5 ,
.Xr tcp 4 ,
@


1.23
log
@describe ipcomp
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.22 2005/10/16 21:24:45 hshoexer Exp $
d496 1
a497 2
.Xr tcp 4 ,
.Xr isakmpd.conf 5 ,
d500 2
@


1.22
log
@Add keyword "any" for addresses, reduces to "0.0.0.0/0".
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.21 2005/09/23 14:56:06 jmc Exp $
d125 2
d176 13
@


1.21
log
@- beef up DESCRIPTION
- document that paths to key files may be relative or absolute
- reference vpn(8) in SEE ALSO

most of this diff came about from a mail from benjamin pineau who
mailed hshoexer and myself about some possible improvements to this file;

ok hshoexer@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.20 2005/09/19 15:44:35 jmc Exp $
d98 3
d280 3
@


1.20
log
@grammar;

from benjamin pineau;
ok hshoexer@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.19 2005/08/23 07:48:04 jmc Exp $
d33 2
d36 4
a39 3
protocol suite provides security services for IP according to rules or
definitions specified in
.Nm .
d200 4
a203 1
It is either a hexadecimal string or a file specified as follows:
d405 5
a409 2
The authentication key to be used is a hexadecimal string of arbitrary length.
It is also possible to read the key from a file using this format:
d479 2
a480 1
.Xr isakmpd 8
@


1.19
log
@grammar + formatting tweaks;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.18 2005/08/22 22:10:02 hshoexer Exp $
d441 1
a441 1
# Set up IPsec SAs for a flows between 192.168.3.14 and 192.168.3.12
@


1.18
log
@document recent changes

ok deraadt
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.17 2005/08/22 04:27:18 david Exp $
d254 1
a254 1
request of the remote peer.
d300 1
a300 1
.Ar aes,
d318 1
a318 1
.Ar main
d336 1
a336 1
.Ar aes,
d340 1
a340 1
If no quick mode transforms are specified
d345 1
a345 1
are choosen.
d352 1
a352 1
as identity of the local peer.
d358 1
a358 1
.Ar srcid
d363 1
a363 1
.Xr isamkpd 8
d371 1
a371 1
below .
d446 1
a446 2

.Sh TCPMD5 EXAMPLES
d452 1
a452 1
# Set up keys for TCP MD5 signatures, read keys from files
d459 1
a459 1
# First between the networks 10.1.1.0/24 and 10.1.2.0/24.
@


1.17
log
@spelling
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.16 2005/08/11 09:26:27 hshoexer Exp $
d227 145
d445 1
d447 2
d456 9
@


1.16
log
@document recent changes, with jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.15 2005/08/10 08:49:33 jmc Exp $
d186 1
a186 1
If no alogrithm is specified,
@


1.15
log
@- typo
- generate a backslash using `\e', not `\\'
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.14 2005/08/09 14:00:07 hshoexer Exp $
d107 120
d295 5
@


1.14
log
@Document how to read keys from a file.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.13 2005/08/05 14:39:02 hshoexer Exp $
d141 1
a141 1
One practical way of generating 160-bit (20-byte) keys is a follows:
d177 1
a177 1
tcpmd5 from 192.168.3.14 to 192.168.3.27 spi 0x1000:0x1001 \\
d181 1
a181 1
tcpmd5 from 192.168.3.14 to 192.168.3.27 spi 0x1000:0x1001 \\
@


1.13
log
@prepare for authentication and encryption keys, not used yet.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.12 2005/07/23 20:44:36 hshoexer Exp $
d123 1
a123 1
.Aq Ar hex string
d133 1
d135 11
d179 4
@


1.12
log
@document automatic generation of reverse SA rules.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.11 2005/07/10 07:56:56 jmc Exp $
d122 1
a122 1
.Ar key
d133 1
a133 1
The key to be used is a hexadecimal string of arbitrary length.
d137 1
a137 1
.Ar key
d143 1
a143 1
.Ar key .
d166 1
a166 1
	key 0xdeadbeef:0xbeefdead
@


1.11
log
@tweaks;
ok hshoexer@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.10 2005/07/09 22:24:44 hshoexer Exp $
d134 10
d165 2
a166 2
tcpmd5 from 192.168.3.14 to 192.168.3.27 spi 0x1000 key 0xdeadbeef
tcpmd5 from 192.168.3.27 to 192.168.3.14 spi 0x1001 key 0xbeefdead
@


1.10
log
@forgot to .Xr tcp(4)
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.9 2005/07/09 22:22:44 hshoexer Exp $
d154 3
a156 3
# Set up a keys for TCP MD5 signatures
tcpmd5       from 192.168.3.14   to 192.168.3.27 spi 0x1000 key 0xdeadbeef
tcpmd5       from 192.168.3.27   to 192.168.3.14 spi 0x1001 key 0xbeefdead
@


1.9
log
@describe how to setup tcpmd5
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.8 2005/04/10 14:02:45 jmc Exp $
d160 1
@


1.8
log
@misc clean up;
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.7 2005/04/09 23:39:48 hshoexer Exp $
d107 31
d153 4
@


1.7
log
@clarify in/out a bit, add SEE ALSO section.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.6 2005/04/09 23:32:22 hshoexer Exp $
d36 1
a36 1
.Nm ipsec.conf .
d39 2
a40 2
.Ar flows
to determin wether to apply security services to an IP packet or not.
d43 4
a46 4
.It Ar flow esp
ESP can provide the properties authentication, integrity, replay protection,
and confidentiality of the data.
.It Ar flow ah
d55 1
a55 2
will use
.Ar esp .
d58 1
a58 2
As soon as a packet matches a
.Ar flow
d70 1
a70 1
If neiter
d82 8
a89 1
.It Ar from <src> to <dst> peer <remote>
d91 1
a91 1
.Ar <src>
d93 1
a93 1
.Ar <dst> .
d100 1
a100 1
.Ar <dst>
d102 1
a102 1
.Ar <remote>
d106 1
@


1.6
log
@Rewrite, work in progress
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.5 2005/04/06 15:36:13 msf Exp $
d78 3
a80 1
will duplicate this rule using
d82 1
a82 2
and
.Ar out .
d117 5
a121 2
.\".Sh GRAMMAR
.\".Ed
a126 2
.\" .Sh CAVEATS
.\" .Sh BUGS
@


1.5
log
@- change to two clause bsd license
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.4 2005/04/05 10:07:46 tom Exp $
d25 1
a25 1
.Dd July 7, 2004
d32 1
a32 1
.Nm
d34 66
d102 2
a103 57
.Ed
.Sh GRAMMAR
.Nm
in BNF:
.Bd -literal
line		= ( flow-rule | group-rule )

flow-rule	= "flow" [( ah-rule | esp-rule | ipip-rule | ipcomp-rule )]

group-rule	= "group" "{" flow-rule, flow-rule, ... "}"

ah-rule		= "ah" [ "transport" ] [ ( "in" | "out" ) ] [ "log" ]
		  [ "on" ifspec ] hosts [ peers ] [ spi ] [ xform ] [ key ]
		  [ tag ]

ipip-rule	= "ipip" [ ( "in" | "out" ) ] [ "log" ]
		  [ "on" ifspec ] hosts [ peers ] [ spi ] [ tag ]

esp-rule	= "esp" [ "transport" ] [ ( "in" | "out" ) ]  [ "log" ]
		  [ "on" ifspec ] hosts [ peers ] [ spi ] [ xform ] [ key ]
		  [ tag ]

ipcomp-rule	= "ipcomp" [ ( "in" | "out" ) ]  [ "log" ] [ "on" ifspec ]
		   hosts [ peers ] [ cpi ]

hosts		= "from" [
		   [ port ] "to" ( "any" | "self" | host ) [ port ]

cpi		= "cpi" cpispec

cpispec		= ( number | number:number )

spi		= "spi" spispec

spispec		= ( number | number:number )

peers		= "peer"

xform		= "xform" xformspec

xformspec 	= ( tranform | transform:transform )

transform	= ( enc | enc-auth | auth )

auth 		= ( "md5" | "rmd160" | "sha1" | "sha2-256" | "sha2-384" |
		    "sha2-512" )

enc 		= ( "aes" | "blowfish" | "cast" | "des" | "3des" | "skipjack" )

key 		= "key" string

ipspec		= "any" | host | "{" host-list "}"

host           = [ "!" ] ( address [ "/" mask-bits ] | "<" string ">" )

address        = ( interface-name | "(" interface-name ")" | hostname |
                 ipv4-dotted-quad | ipv6-coloned-hex )
d105 10
d116 2
a117 14
.\" The following requests should be uncommented and used where appropriate.
.\" This next request is for sections 2, 3, and 9 function return values only.
.\" .Sh RETURN VALUES
.\" This next request is for sections 1, 6, 7 & 8 only.
.\" .Sh ENVIRONMENT
.\" .Sh FILES
.\" .Sh EXAMPLES
.\" This next request is for sections 1, 4, 6, and 8 only.
.\" .Sh DIAGNOSTICS
.\" The next request is for sections 2, 3, and 9 error and signal handling only.
.\" .Sh ERRORS
.\" .Sh SEE ALSO
.\" .Xr foobar 1
.\" .Sh STANDARDS
@


1.4
log
@The first release this will appear in is OpenBSD 3.8

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.3 2005/04/05 07:14:00 jmc Exp $
a12 2
.\" 3. The name of the author may not be used to endorse or promote products
.\"    derived from this software without specific prior written permission.
@


1.3
log
@cleanup; ok hshoexer@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipsec.conf.5,v 1.2 2005/04/04 22:22:55 hshoexer Exp $
d115 1
a115 1
.Ox 3.7 .
@


1.2
log
@fix cvs id tags
@
text
@d1 1
a1 1
.\"	$OpenBSD:$
d49 2
a50 2
ah-rule		= "ah" [ "transport" ] [ ( "in" | "out" ) ] [ "log" ] 
		  [ "on" ifspec ] hosts [ peers ] [ spi ] [ xform ] [ key ] 
d56 2
a57 2
esp-rule	= "esp" [ "transport" ] [ ( "in" | "out" ) ]  [ "log" ] 
		  [ "on" ifspec ] hosts [ peers ] [ spi ] [ xform ] [ key ] 
d60 1
a60 1
ipcomp-rule	= "ipcomp" [ ( "in" | "out" ) ]  [ "log" ] [ "on" ifspec ] 
d74 1
a74 1
peers		= "peer" 
d84 1
a84 1
 
d115 1
a115 1
.Ox 3.7
@


1.1
log
@Add ipsecctl utility, work in progress

ok deraadt
@
text
@d1 1
a1 1
.\"	$Id: ipsec.conf.5,v 1.1.1.1 2005/02/02 21:31:54 hshoexer Exp $
@

