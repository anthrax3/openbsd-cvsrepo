head	1.71;
access;
symbols
	OPENBSD_6_2:1.71.0.2
	OPENBSD_6_2_BASE:1.71
	OPENBSD_6_1:1.69.0.8
	OPENBSD_6_1_BASE:1.69
	OPENBSD_6_0:1.69.0.4
	OPENBSD_6_0_BASE:1.69
	OPENBSD_5_9:1.69.0.2
	OPENBSD_5_9_BASE:1.69
	OPENBSD_5_8:1.67.0.16
	OPENBSD_5_8_BASE:1.67
	OPENBSD_5_7:1.67.0.8
	OPENBSD_5_7_BASE:1.67
	OPENBSD_5_6:1.67.0.12
	OPENBSD_5_6_BASE:1.67
	OPENBSD_5_5:1.67.0.10
	OPENBSD_5_5_BASE:1.67
	OPENBSD_5_4:1.67.0.6
	OPENBSD_5_4_BASE:1.67
	OPENBSD_5_3:1.67.0.4
	OPENBSD_5_3_BASE:1.67
	OPENBSD_5_2:1.67.0.2
	OPENBSD_5_2_BASE:1.67
	OPENBSD_5_1_BASE:1.62
	OPENBSD_5_1:1.62.0.2
	OPENBSD_5_0:1.61.0.4
	OPENBSD_5_0_BASE:1.61
	OPENBSD_4_9:1.61.0.2
	OPENBSD_4_9_BASE:1.61
	OPENBSD_4_8:1.59.0.4
	OPENBSD_4_8_BASE:1.59
	OPENBSD_4_7:1.59.0.2
	OPENBSD_4_7_BASE:1.59
	OPENBSD_4_6:1.58.0.6
	OPENBSD_4_6_BASE:1.58
	OPENBSD_4_5:1.58.0.2
	OPENBSD_4_5_BASE:1.58
	OPENBSD_4_4:1.57.0.2
	OPENBSD_4_4_BASE:1.57
	OPENBSD_4_3:1.56.0.2
	OPENBSD_4_3_BASE:1.56
	OPENBSD_4_2:1.54.0.2
	OPENBSD_4_2_BASE:1.54
	OPENBSD_4_1:1.53.0.2
	OPENBSD_4_1_BASE:1.53
	OPENBSD_4_0:1.49.0.2
	OPENBSD_4_0_BASE:1.49
	OPENBSD_3_9:1.27.0.2
	OPENBSD_3_9_BASE:1.27
	OPENBSD_3_8:1.17.0.2
	OPENBSD_3_8_BASE:1.17;
locks; strict;
comment	@ * @;


1.71
date	2017.04.19.15.59.38;	author bluhm;	state Exp;
branches;
next	1.70;
commitid	CiHS8CSu2u0AMgvM;

1.70
date	2017.04.14.18.06.28;	author bluhm;	state Exp;
branches;
next	1.69;
commitid	mFgJjuy1SZ9lenK0;

1.69
date	2015.12.09.21.41.50;	author naddy;	state Exp;
branches;
next	1.68;
commitid	CLwtYUTkBZ3FXV1w;

1.68
date	2015.11.04.12.46.13;	author mikeb;	state Exp;
branches;
next	1.67;
commitid	TJX0if8DFoSZbZ4V;

1.67
date	2012.07.10.13.58.33;	author lteo;	state Exp;
branches;
next	1.66;

1.66
date	2012.07.08.17.51.51;	author naddy;	state Exp;
branches;
next	1.65;

1.65
date	2012.07.05.09.02.20;	author mikeb;	state Exp;
branches;
next	1.64;

1.64
date	2012.06.30.14.51.31;	author naddy;	state Exp;
branches;
next	1.63;

1.63
date	2012.06.29.15.01.07;	author mikeb;	state Exp;
branches;
next	1.62;

1.62
date	2011.11.08.13.26.06;	author henning;	state Exp;
branches;
next	1.61;

1.61
date	2010.10.06.22.19.20;	author mikeb;	state Exp;
branches;
next	1.60;

1.60
date	2010.09.22.14.04.09;	author mikeb;	state Exp;
branches;
next	1.59;

1.59
date	2009.08.04.15.05.50;	author jsing;	state Exp;
branches;
next	1.58;

1.58
date	2009.01.20.14.36.19;	author mpf;	state Exp;
branches;
next	1.57;

1.57
date	2008.07.01.15.00.53;	author bluhm;	state Exp;
branches;
next	1.56;

1.56
date	2008.02.22.23.51.31;	author hshoexer;	state Exp;
branches;
next	1.55;

1.55
date	2007.10.13.16.35.18;	author deraadt;	state Exp;
branches;
next	1.54;

1.54
date	2007.03.16.20.51.01;	author markus;	state Exp;
branches;
next	1.53;

1.53
date	2007.01.03.12.17.43;	author markus;	state Exp;
branches;
next	1.52;

1.52
date	2006.11.30.15.51.28;	author markus;	state Exp;
branches;
next	1.51;

1.51
date	2006.11.24.13.52.13;	author reyk;	state Exp;
branches;
next	1.50;

1.50
date	2006.11.01.03.10.02;	author mcbride;	state Exp;
branches;
next	1.49;

1.49
date	2006.06.18.18.18.01;	author hshoexer;	state Exp;
branches;
next	1.48;

1.48
date	2006.06.02.12.29.43;	author markus;	state Exp;
branches;
next	1.47;

1.47
date	2006.06.02.05.59.31;	author hshoexer;	state Exp;
branches;
next	1.46;

1.46
date	2006.06.02.04.51.55;	author hshoexer;	state Exp;
branches;
next	1.45;

1.45
date	2006.06.02.03.31.20;	author hshoexer;	state Exp;
branches;
next	1.44;

1.44
date	2006.06.02.00.33.47;	author hshoexer;	state Exp;
branches;
next	1.43;

1.43
date	2006.06.01.17.32.20;	author naddy;	state Exp;
branches;
next	1.42;

1.42
date	2006.06.01.16.13.01;	author markus;	state Exp;
branches;
next	1.41;

1.41
date	2006.06.01.15.53.39;	author hshoexer;	state Exp;
branches;
next	1.40;

1.40
date	2006.06.01.15.47.26;	author hshoexer;	state Exp;
branches;
next	1.39;

1.39
date	2006.06.01.04.12.34;	author hshoexer;	state Exp;
branches;
next	1.38;

1.38
date	2006.05.31.14.38.31;	author hshoexer;	state Exp;
branches;
next	1.37;

1.37
date	2006.05.30.21.56.05;	author msf;	state Exp;
branches;
next	1.36;

1.36
date	2006.05.29.18.52.56;	author hshoexer;	state Exp;
branches;
next	1.35;

1.35
date	2006.05.28.21.05.09;	author hshoexer;	state Exp;
branches;
next	1.34;

1.34
date	2006.05.28.20.59.23;	author hshoexer;	state Exp;
branches;
next	1.33;

1.33
date	2006.05.28.20.58.24;	author todd;	state Exp;
branches;
next	1.32;

1.32
date	2006.05.27.17.21.40;	author hshoexer;	state Exp;
branches;
next	1.31;

1.31
date	2006.03.31.13.13.51;	author markus;	state Exp;
branches;
next	1.30;

1.30
date	2006.03.30.12.44.20;	author markus;	state Exp;
branches;
next	1.29;

1.29
date	2006.03.22.16.01.23;	author reyk;	state Exp;
branches;
next	1.28;

1.28
date	2006.03.07.00.19.58;	author reyk;	state Exp;
branches;
next	1.27;

1.27
date	2006.01.17.00.05.39;	author deraadt;	state Exp;
branches;
next	1.26;

1.26
date	2006.01.16.23.57.20;	author reyk;	state Exp;
branches;
next	1.25;

1.25
date	2005.12.06.14.27.57;	author markus;	state Exp;
branches;
next	1.24;

1.24
date	2005.11.24.11.52.07;	author hshoexer;	state Exp;
branches;
next	1.23;

1.23
date	2005.11.12.21.49.38;	author hshoexer;	state Exp;
branches;
next	1.22;

1.22
date	2005.11.12.16.43.11;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2005.11.12.12.00.53;	author hshoexer;	state Exp;
branches;
next	1.20;

1.20
date	2005.11.06.22.51.51;	author hshoexer;	state Exp;
branches;
next	1.19;

1.19
date	2005.11.06.10.52.27;	author hshoexer;	state Exp;
branches;
next	1.18;

1.18
date	2005.10.30.19.50.23;	author hshoexer;	state Exp;
branches;
next	1.17;

1.17
date	2005.08.22.17.26.46;	author hshoexer;	state Exp;
branches;
next	1.16;

1.16
date	2005.08.09.12.37.45;	author hshoexer;	state Exp;
branches;
next	1.15;

1.15
date	2005.08.08.13.29.00;	author hshoexer;	state Exp;
branches;
next	1.14;

1.14
date	2005.08.08.09.15.09;	author hshoexer;	state Exp;
branches;
next	1.13;

1.13
date	2005.08.05.14.39.02;	author hshoexer;	state Exp;
branches;
next	1.12;

1.12
date	2005.08.02.15.47.25;	author hshoexer;	state Exp;
branches;
next	1.11;

1.11
date	2005.07.24.10.06.38;	author hshoexer;	state Exp;
branches;
next	1.10;

1.10
date	2005.07.09.21.05.02;	author hshoexer;	state Exp;
branches;
next	1.9;

1.9
date	2005.07.07.21.13.00;	author hshoexer;	state Exp;
branches;
next	1.8;

1.8
date	2005.07.07.21.00.08;	author hshoexer;	state Exp;
branches;
next	1.7;

1.7
date	2005.06.30.19.05.27;	author hshoexer;	state Exp;
branches;
next	1.6;

1.6
date	2005.05.27.19.55.21;	author hshoexer;	state Exp;
branches;
next	1.5;

1.5
date	2005.05.27.05.19.55;	author hshoexer;	state Exp;
branches;
next	1.4;

1.4
date	2005.05.25.17.10.26;	author hshoexer;	state Exp;
branches;
next	1.3;

1.3
date	2005.05.23.20.25.54;	author kjell;	state Exp;
branches;
next	1.2;

1.2
date	2005.04.04.22.22.55;	author hshoexer;	state Exp;
branches;
next	1.1;

1.1
date	2005.04.04.22.19.50;	author hshoexer;	state Exp;
branches;
next	;


desc
@@


1.71
log
@Rename all SA groups to bundles consistently.  The first kernel
commit in 2000 that introduced the features already called them SA
bundles.  The word group is taken by Diffie-Hellman, reusing it
causes confusion.
OK hshoexer@@
@
text
@/*	$OpenBSD: ipsecctl.h,v 1.70 2017/04/14 18:06:28 bluhm Exp $	*/
/*
 * Copyright (c) 2004, 2005 Hans-Joerg Hoexer <hshoexer@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef _IPSECCTL_H_
#define _IPSECCTL_H_

#define IPSECCTL_OPT_DISABLE		0x0001
#define IPSECCTL_OPT_ENABLE		0x0002
#define IPSECCTL_OPT_NOACTION		0x0004
#define IPSECCTL_OPT_VERBOSE		0x0010
#define IPSECCTL_OPT_VERBOSE2		0x0020
#define IPSECCTL_OPT_SHOW		0x0040
#define IPSECCTL_OPT_SHOWALL		0x0080
#define IPSECCTL_OPT_FLUSH		0x0100
#define IPSECCTL_OPT_DELETE		0x0200
#define IPSECCTL_OPT_MONITOR		0x0400
#define IPSECCTL_OPT_SHOWKEY		0x0800

enum {
	ACTION_ADD, ACTION_DELETE
};

#define RULE_FLOW	0x01
#define RULE_SA		0x02
#define RULE_IKE	0x04
#define RULE_BUNDLE	0x08

enum {
	DIRECTION_UNKNOWN, IPSEC_IN, IPSEC_OUT, IPSEC_INOUT
};
enum {
	PROTO_UNKNOWN, IPSEC_ESP, IPSEC_AH, IPSEC_IPCOMP, IPSEC_TCPMD5,
	IPSEC_IPIP
};
enum {
	MODE_UNKNOWN, IPSEC_TRANSPORT, IPSEC_TUNNEL
};
enum {
	ID_UNKNOWN, ID_PREFIX, ID_IPV4, ID_IPV6, ID_FQDN, ID_UFQDN
};
enum {
	TYPE_UNKNOWN, TYPE_USE, TYPE_ACQUIRE, TYPE_REQUIRE, TYPE_DENY,
	TYPE_BYPASS, TYPE_DONTACQ
};
enum {
	AUTHXF_UNKNOWN, AUTHXF_NONE, AUTHXF_HMAC_MD5, AUTHXF_HMAC_RIPEMD160,
	AUTHXF_HMAC_SHA1, AUTHXF_HMAC_SHA2_256, AUTHXF_HMAC_SHA2_384,
	AUTHXF_HMAC_SHA2_512
};
enum {
	ENCXF_UNKNOWN, ENCXF_NONE, ENCXF_3DES_CBC, ENCXF_AES,
	ENCXF_AES_128, ENCXF_AES_192, ENCXF_AES_256, ENCXF_AESCTR,
	ENCXF_AES_128_CTR, ENCXF_AES_192_CTR, ENCXF_AES_256_CTR,
	ENCXF_AES_128_GCM, ENCXF_AES_192_GCM, ENCXF_AES_256_GCM,
	ENCXF_AES_128_GMAC, ENCXF_AES_192_GMAC, ENCXF_AES_256_GMAC,
	ENCXF_BLOWFISH, ENCXF_CAST128, ENCXF_CHACHA20_POLY1305, ENCXF_NULL
};
enum {
	COMPXF_UNKNOWN, COMPXF_DEFLATE, COMPXF_LZS
};
enum {
	GROUPXF_UNKNOWN, GROUPXF_NONE, GROUPXF_768, GROUPXF_1024, GROUPXF_1536,
	GROUPXF_2048, GROUPXF_3072, GROUPXF_4096, GROUPXF_6144, GROUPXF_8192,
};
enum {
	IKE_ACTIVE, IKE_PASSIVE, IKE_DYNAMIC
};
enum {
	IKE_AUTH_RSA, IKE_AUTH_PSK
};
enum {
	IKE_MM=0, IKE_AM, IKE_QM
};


struct ipsec_addr {
	union {
		struct in_addr		v4;
		struct in6_addr		v6;
		u_int8_t		addr8[16];
		u_int16_t		addr16[8];
		u_int32_t		addr32[4];
	} ipa;
#define v4	ipa.v4
#define v6	ipa.v6
#define addr8	ipa.addr8
#define addr16	ipa.addr16
#define addr32	ipa.addr32
};

struct ipsec_addr_wrap {
	struct ipsec_addr	 address;
	struct ipsec_addr	 mask;
	int			 netaddress;
	sa_family_t		 af;
	char			*name;
	struct ipsec_addr_wrap	*next;
	struct ipsec_addr_wrap	*tail;
	struct ipsec_addr_wrap	*srcnat;
};

struct ipsec_hosts {
	struct ipsec_addr_wrap	*src;
	struct ipsec_addr_wrap	*dst;
	u_int16_t		 sport;
	u_int16_t		 dport;
};

struct ipsec_auth {
	char		*srcid;
	char		*dstid;
	u_int8_t	 srcid_type;
	u_int8_t	 dstid_type;
	u_int16_t	 type;
};

struct ipsec_key {
	size_t		 len;
	u_int8_t	*data;
};

struct ike_auth {
	u_int8_t	 type;
	char		*string;
};

struct ipsec_xf {
	char		*name;
	u_int16_t	 id;
	size_t		 keymin;
	size_t		 keymax;
	u_int8_t	 noauth;
	u_int8_t	 nostatic;
};

struct ipsec_transforms {
	const struct ipsec_xf *authxf;
	const struct ipsec_xf *encxf;
	const struct ipsec_xf *compxf;
	const struct ipsec_xf *groupxf;
};

struct ipsec_lifetime {
	int		 lt_bytes;
	int		 lt_seconds;
};

struct ike_mode {
	struct ipsec_transforms	*xfs;
	struct ipsec_lifetime	*life;
	u_int8_t		 ike_exch;
};

extern const struct ipsec_xf authxfs[];
extern const struct ipsec_xf encxfs[];
extern const struct ipsec_xf compxfs[];

TAILQ_HEAD(dst_bundle_queue, ipsec_rule);

/* Complete state of one rule. */
struct ipsec_rule {
	u_int8_t	 type;

	struct ipsec_addr_wrap *src;
	struct ipsec_addr_wrap *dst;
	struct ipsec_addr_wrap *dst2;
	struct ipsec_addr_wrap *local;
	struct ipsec_addr_wrap *peer;
	struct ipsec_auth *auth;
	struct ike_auth *ikeauth;
	struct ipsec_transforms *xfs;
	struct ipsec_transforms *p1xfs;
	struct ipsec_lifetime *p1life;
	struct ipsec_transforms *p2xfs;
	struct ipsec_lifetime *p2life;
	struct ipsec_key  *authkey;
	struct ipsec_key  *enckey;

	char		*tag;		/* pf tag for SAs */
	char		*p1name;	/* Phase 1 Name */
	char		*p2name;	/* Phase 2 Name (IPsec-XX) */
	char		*p2lid;		/* Phase 2 source ID */
	char		*p2rid;		/* Phase 2 destination ID */
	char		*p2nid;		/* Phase 2 source NAT-ID */
	u_int8_t	 satype;	/* encapsulating prococol */
	u_int8_t	 proto;		/* encapsulated protocol */
	u_int8_t	 proto2;
	u_int8_t	 tmode;
	u_int8_t	 direction;
	u_int8_t	 flowtype;
	u_int8_t	 ikemode;
	u_int8_t	 p1ie;
	u_int8_t	 p2ie;
	u_int16_t	 sport;
	u_int16_t	 dport;
	u_int32_t	 spi;
	u_int32_t	 spi2;
	u_int32_t	 nr;

	TAILQ_ENTRY(ipsec_rule) rule_entry;
	TAILQ_ENTRY(ipsec_rule) bundle_entry;
	TAILQ_ENTRY(ipsec_rule) dst_bundle_entry;

	struct dst_bundle_queue	dst_bundle_queue;
	char			*bundle;
};

TAILQ_HEAD(ipsec_rule_queue, ipsec_rule);
TAILQ_HEAD(ipsec_bundle_queue, ipsec_rule);

struct ipsecctl {
	u_int32_t	rule_nr;
	int		opts;
	struct ipsec_rule_queue rule_queue;
	struct ipsec_bundle_queue bundle_queue;
};

int	parse_rules(const char *, struct ipsecctl *);
int	cmdline_symset(char *);
int	ipsecctl_add_rule(struct ipsecctl *, struct ipsec_rule *);
void	ipsecctl_free_rule(struct ipsec_rule *);
void	ipsecctl_get_rules(struct ipsecctl *);
void	ipsecctl_print_rule(struct ipsec_rule *, int);
int	ike_print_config(struct ipsec_rule *, int);
int	ike_ipsec_establish(int, struct ipsec_rule *, const char *);
void	set_ipmask(struct ipsec_addr_wrap *, u_int8_t);

#endif /* _IPSECCTL_H_ */
@


1.70
log
@Up to now ipsecctl(8) grouped SAs with identical src and dst to the
flow which the first SA matched by the flow type.  This behaviour
was mostly undocumented and unexpected.  Make SA bundles explicit
in ipsec.conf(5).  Only group SAs that have the same src and dst
and also the same bundle identifier.
OK hshoexer@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.69 2015/12/09 21:41:50 naddy Exp $	*/
d40 1
a40 1
#define RULE_GROUP	0x08
d172 1
a172 1
TAILQ_HEAD(dst_group_queue, ipsec_rule);
d215 2
a216 2
	TAILQ_ENTRY(ipsec_rule) group_entry;
	TAILQ_ENTRY(ipsec_rule) dst_group_entry;
d218 1
a218 1
	struct dst_group_queue	dst_group_queue;
d223 1
a223 1
TAILQ_HEAD(ipsec_group_queue, ipsec_rule);
d229 1
a229 1
	struct ipsec_group_queue group_queue;
@


1.69
log
@Remove plain DES encryption from IPsec.

DES is insecure since brute force attacks are practical due to its
short key length.

This removes support for DES-CBC encryption in ESP and in IKE main
and quick mode from the kernel, isakmpd(8), ipsecctl(8), and iked(8).

ok mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.68 2015/11/04 12:46:13 mikeb Exp $	*/
d219 1
@


1.68
log
@Decode Chacha20-Poly1305 when dumping SAs;  ok reyk, naddy
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.67 2012/07/10 13:58:33 lteo Exp $	*/
d65 1
a65 1
	ENCXF_UNKNOWN, ENCXF_NONE, ENCXF_3DES_CBC, ENCXF_DES_CBC, ENCXF_AES,
@


1.67
log
@Rename "life" to "lifetime" to match iked.

ok mikeb naddy sthen; procedures ok henning
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.66 2012/07/08 17:51:51 naddy Exp $	*/
d70 1
a70 1
	ENCXF_BLOWFISH, ENCXF_CAST128, ENCXF_NULL
@


1.66
log
@Disallow manual security associations that use AES-CTR, AES-GCM,
or AES-GMAC.  These algorithms cannot be used safely with static
keys and RFCs 3686, 4106, and 4543 expressly forbid such configurations.

Also include a tweak (with jmc@@) to the key size explanation, for
completeness sake.

ok mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.65 2012/07/05 09:02:20 mikeb Exp $	*/
d157 3
a159 3
struct ipsec_life {
	int		 lifetime;
	int		 lifevolume;
d164 1
a164 1
	struct ipsec_life	*life;
d187 1
a187 1
	struct ipsec_life *p1life;
d189 1
a189 1
	struct ipsec_life *p2life;
@


1.65
log
@don't output "esn" string in the rule section as we can't use the
keyword in the grammar to create a esn-enabled rule (no reason to
do so for manual sa configuration).  instead decode sa flags so
that we can also watch changes happening in the realtime with the
monitor mode.  prompted and ok by naddy
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.64 2012/06/30 14:51:31 naddy Exp $	*/
d146 2
a147 1
	int		 noauth;
@


1.64
log
@enable use of AES-{192,256}-CTR, and explicitly of AES-128-CTR, for IPsec ESP
ok mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.63 2012/06/29 15:01:07 mikeb Exp $	*/
a206 1
	u_int8_t	 esn;
@


1.63
log
@Print esn flag when dumping SAs with ESN enabled
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.62 2011/11/08 13:26:06 henning Exp $	*/
d67 1
@


1.62
log
@allow the path to isakmpd's fifo to be specified (aka changed) on the
command line, ok mikeb sthen
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.61 2010/10/06 22:19:20 mikeb Exp $	*/
d206 1
@


1.61
log
@Retire Skipjack

There's not much use for the declassified cipher from the 80's
with a questionable license these days.  According to the FIPS
drafts, Skipjack reaches its EOL in December 2010.

The libc portion will be removed after the ports hackathon.

djm and thib agree, no objections from deraadt
Thanks to jsg for digging up FIPS drafts.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.60 2010/09/22 14:04:09 mikeb Exp $	*/
d236 1
a236 1
int	ike_ipsec_establish(int, struct ipsec_rule *);
@


1.60
log
@Support AES-GCM-16 (as aes-gcm) and ENCR_NULL_AUTH_AES_GMAC
(as aes-gmac) encryption transformations in the ipsec.conf(5).

Available "enc" arguments denoting use of

1) AES-GCM-16:

 aes-128-gcm for 160 bit key (128+nonce)
 aes-192-gcm for 224 bit key (192+nonce)
 aes-256-gcm for 288 bit key (256+nonce)

2) ENCR_NULL_AUTH_AES_GMAC:

 aes-128-gmac for 160 bit key (128+nonce)
 aes-192-gmac for 224 bit key (192+nonce)
 aes-256-gmac for 288 bit key (256+nonce)

Please note that aes-gmac family performs no encryption and provides
no confidentiality and is intended for cases in which confidentiality
is not desired (it can be thought of as AH with NAT-T support).

Also, although this implementation supports manual keying, it's
use is strictly discouraged as AES-GCM security depends on frequent
re-keying.  So it can be thought of as a debug facility only.

Example configuration:

	ike esp from 172.23.61.36 to 172.23.61.156 \
		quick enc aes-256-gcm \
		psk humppa

Thoroughly tested by me and naddy.  Works fine with Linux.

Requires updated pfkeyv2.h include file.

OK naddy
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.59 2009/08/04 15:05:50 jsing Exp $	*/
d69 1
a69 1
	ENCXF_BLOWFISH, ENCXF_CAST128, ENCXF_NULL, ENCXF_SKIPJACK
@


1.59
log
@Specify an ID-type of IPV4_ADDR or IPV6_ADDR if the srcid or dstid is
given as an IPv4 or IPv6 address, rather than treating the IP address as
a FQDN.

ok hshoexer@@ markus@@ todd@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.57 2008/07/01 15:00:53 bluhm Exp $	*/
d66 3
a68 1
	ENCXF_AES_128, ENCXF_AES_192, ENCXF_AES_256, ENCXF_AESCTR, 
d145 1
@


1.58
log
@Add support to isakmpd(8) and ipsecctl(8) to install SA's with a
different source network than we have negotiated with a peer.
This enables us to do nat/binat on the enc(4) interface.
Very useful to work around rfc 1918 collisions.
Manpage and testing by Mitja Muzenic. Thanks!
OK hshoexer@@, markus@@. "I like it" todd@@
@
text
@d53 1
a53 1
	ID_UNKNOWN, ID_PREFIX, ID_FQDN, ID_UFQDN
@


1.57
log
@Isakmpd acquire mode did not work with a config generated from
ipsec.conf.  The config created by isakmpd dynamically was different
from the config that ipsecctl generated out of ipsec.conf.

Both config formats are changed so that they match.  One needs a
passive ike line and a require flow line with the same parameters
in the ipsec.conf.  Then the acquire message generated by the kernel
will trigger isakmpd to generate a config that matches the one that
ipsecctl generated from the ike line.

ok hshoexer, 'sounds good' todd
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.56 2008/02/22 23:51:31 hshoexer Exp $	*/
d110 1
d193 1
@


1.56
log
@Support for specifying aes-{128,192,256}.  Originial idea by Prabhu
Gurumurthy, tweaks and commit-ready diff by Mitja Muzenic!  Thanks
guys!

ok todd@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.55 2007/10/13 16:35:18 deraadt Exp $	*/
d188 1
@


1.55
log
@in all these programs using the same pfctl-derived parse.y, re-unify the
yylex implementation and the code which interacts with yylex.  this also
brings the future potential for include support to all of the parsers.
in the future please do not silly modifications to one of these files
without checking if you are de-unifying the code.
checked by developers in all these areas.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.54 2007/03/16 20:51:01 markus Exp $	*/
d66 2
a67 1
	ENCXF_AESCTR, ENCXF_BLOWFISH, ENCXF_CAST128, ENCXF_NULL, ENCXF_SKIPJACK
@


1.54
log
@move autodetection of the ID type to the parser.  this way the
static flows have the correct ID, too. ok hshoexer, reyk
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.53 2007/01/03 12:17:43 markus Exp $	*/
d222 1
a222 1
int	parse_rules(FILE *, struct ipsecctl *);
@


1.53
log
@do not print secret keys by default, -k restores old behaviour; ok hshoexer
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.52 2006/11/30 15:51:28 markus Exp $	*/
d121 2
a122 1
	u_int8_t	 idtype;
@


1.52
log
@handle multiple SAs with different same src/dst but different port;
store IKE connection string and phase2 IDs in the ipsec rule;
cleanup internal API: pass rules around instead of rule members;
report Brian Candler; fix with hshoexer, msf; ok hshoexer
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.51 2006/11/24 13:52:13 reyk Exp $	*/
d31 1
@


1.51
log
@add support to tag ipsec traffic belonging to specific IKE-initiated
phase 2 traffic. this allows policy-based filtering of encrypted and
unencrypted ipsec traffic with pf(4). see ipsec.conf(5) and
isakmpd.conf(5) for details and examples.

this is work in progress and still needs some testing and feedback,
but it is safe to put it in now.

ok hshoexer@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.50 2006/11/01 03:10:02 mcbride Exp $	*/
d185 3
@


1.50
log
@Add support for aggressive mode (from the k2k6 IPsec hackathon).

ok hshoexer
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.49 2006/06/18 18:18:01 hshoexer Exp $	*/
d184 1
@


1.49
log
@add group "none"; when choosen, pfs will be disabled.

ok david msf
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.48 2006/06/02 12:29:43 markus Exp $	*/
d80 4
d156 1
d177 4
a180 4
	struct ipsec_transforms *mmxfs;
	struct ipsec_life *mmlife;
	struct ipsec_transforms *qmxfs;
	struct ipsec_life *qmlife;
d191 2
@


1.48
log
@print full information about tcpmd5 and ipcomp SAs, too
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.47 2006/06/02 05:59:31 hshoexer Exp $	*/
d71 2
a72 2
	GROUPXF_UNKNOWN, GROUPXF_768, GROUPXF_1024, GROUPXF_1536, GROUPXF_2048,
	GROUPXF_3072, GROUPXF_4096, GROUPXF_6144, GROUPXF_8192,
@


1.47
log
@allow to specify phase 1 and 2 lifetimes.  Right now, these values
can only be set globally (ie. Default-phase-[12]-lifetime).
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.46 2006/06/02 04:51:55 hshoexer Exp $	*/
d156 1
@


1.46
log
@put src and dst host in dedicated structure.  Make the API more
compact which will soon simplify my life.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.45 2006/06/02 03:31:20 hshoexer Exp $	*/
d172 1
d174 1
@


1.45
log
@Generalize parsing of main/quick mode specification.  Preparation
for lifetime support.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.44 2006/06/02 00:33:47 hshoexer Exp $	*/
d104 7
@


1.44
log
@Prepare for parsing lifetimes for ike main and quick mode.  Not enabled yet.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.43 2006/06/01 17:32:20 naddy Exp $	*/
d140 5
@


1.43
log
@Support flows with port modifiers for proto tcp/udp, e.g.
flow proto udp from 1.2.3.4 port ntp to 5.6.7.8

ok hshoexer@@ msf@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.42 2006/06/01 16:13:01 markus Exp $	*/
d135 5
@


1.42
log
@convert pfkey to ipsec_rule and use ipsecctl_print_rule() when dumping
the in-kernel SAs. this way we produce the same output as rule loading
ok hshoexer
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.41 2006/06/01 15:53:39 hshoexer Exp $	*/
d166 2
@


1.41
log
@Add members dst2, proto2 and spi2 to struct ipsec_rule and define
rule type "group".  Needed for grouping.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.40 2006/06/01 15:47:26 hshoexer Exp $	*/
d192 1
@


1.40
log
@Prepare for SA grouping.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.39 2006/06/01 04:12:34 hshoexer Exp $	*/
d39 1
d148 1
d161 1
d167 1
@


1.39
log
@rename list link for ipsec_rule structures from "entries" to "rule_entry".
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.38 2006/05/31 14:38:31 hshoexer Exp $	*/
d139 2
d167 4
d174 1
d180 1
@


1.38
log
@white spaces
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.37 2006/05/30 21:56:05 msf Exp $	*/
d164 1
a164 1
	TAILQ_ENTRY(ipsec_rule) entries;
@


1.37
log
@implement monitor mode for ipsecctl. worked on with markus@@

ok hshoexer@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.36 2006/05/29 18:52:56 hshoexer Exp $	*/
d155 2
a156 2
	u_int8_t         satype;	/* encapsulating prococol */
	u_int8_t         proto;		/* encapsulated protocol */
@


1.36
log
@Need protoype for ipsecctl_free_rule().  While around clean up
prototype for ipsecctl_add_rule.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.35 2006/05/28 21:05:09 hshoexer Exp $	*/
d30 1
@


1.35
log
@whoops, undo last commit.  Of course, set_ipmask() is needed...
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.34 2006/05/28 20:59:23 hshoexer Exp $	*/
d176 2
a177 1
int	ipsecctl_add_rule(struct ipsecctl * ipsec, struct ipsec_rule *);
@


1.34
log
@this one not needed yet.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.33 2006/05/28 20:58:24 todd Exp $	*/
d180 1
@


1.33
log
@fill in AF_INET6 cases
this does not complete v6 support for ipsecctl, but makes progress
ok hshoexer@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.32 2006/05/27 17:21:40 hshoexer Exp $	*/
d100 2
a173 7
struct addr_node {
	struct ipsec_addr_wrap	 addr;
	sa_family_t		 af;
	struct addr_node	*next;
	struct addr_node	*tail;
};

a179 1
void	set_ipmask(struct ipsec_addr_wrap *, u_int8_t);
@


1.32
log
@allow to specify groups to be used IKE
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.31 2006/03/31 13:13:51 markus Exp $	*/
d185 1
@


1.31
log
@allow specification of encapsulated protocol for flows; ok hshoexer
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.30 2006/03/30 12:44:20 markus Exp $	*/
d69 4
d130 1
@


1.30
log
@allow specification of outer local ips in flows (SADB_EXT_ADDRESS_SRC); ok hshoexer, reyk
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.29 2006/03/22 16:01:23 reyk Exp $	*/
d147 2
a148 1
	u_int8_t	 proto;
@


1.29
log
@add support for macros in ipsec.conf(5). some bits have already been
there.

requested by david@@
ok hshoexer@@, msf@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.28 2006/03/07 00:19:58 reyk Exp $	*/
d137 1
@


1.28
log
@add an ike option for road warrior setups (hosts with dynamic ip
addresses).

"ike dynamic esp" will use the system's hostname as the fqdn source id
(instead of the ip address) by default and enable dpd (dead peer
detection) to allow smooth reconnects after an ip address change (i.e.
forced reconnect with consumer adsl lines).

ok hshoexer@@, looks fine markus@@, jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.27 2006/01/17 00:05:39 deraadt Exp $	*/
d173 1
@


1.27
log
@no , after last element in enum
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.26 2006/01/16 23:57:20 reyk Exp $	*/
d69 1
a69 1
	IKE_ACTIVE, IKE_PASSIVE
@


1.26
log
@add support for pre-shared keys with "ike esp" using the new keyword
"psk". rsa-sig is recommended and will still be used by default.

ok hshoexer@@, manpage ok jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.25 2005/12/06 14:27:57 markus Exp $	*/
d69 1
a69 1
	IKE_ACTIVE, IKE_PASSIVE, 
@


1.25
log
@ipip support: ip-in-ip w/o gif(4); ok hshoexer
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.24 2005/11/24 11:52:07 hshoexer Exp $	*/
a49 3
	AUTH_UNKNOWN, AUTH_PSK, AUTH_RSA
};
enum {
d69 4
a72 1
	IKE_ACTIVE, IKE_PASSIVE
d110 5
d139 1
@


1.24
log
@Remove old-style keyed sha1/md5.  We only support hmac-sha1/md5.
Noticed the hard way by <raff at brodewicz dot pl>
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.23 2005/11/12 21:49:38 hshoexer Exp $	*/
d43 2
a44 1
	PROTO_UNKNOWN, IPSEC_ESP, IPSEC_AH, IPSEC_IPCOMP, IPSEC_TCPMD5
@


1.23
log
@add support for interface names as host specifications
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.22 2005/11/12 16:43:11 deraadt Exp $	*/
d61 1
a61 1
	AUTHXF_HMAC_SHA2_512, AUTHXF_MD5, AUTHXF_SHA1
@


1.22
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.21 2005/11/12 12:00:53 hshoexer Exp $	*/
d156 7
@


1.21
log
@handle transport/tunnel mode
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.20 2005/11/06 22:51:51 hshoexer Exp $	*/
d164 1
a164 1
#endif				/* _IPSECCTL_H_ */
@


1.20
log
@Improved address and address mask handling, derived from pfctl stuff.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.19 2005/11/06 10:52:27 hshoexer Exp $	*/
d46 3
d140 1
@


1.19
log
@better handling of ip addresses, prepare for v6.  Partially derived from diff
by todd@@.  Work in progress.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.18 2005/10/30 19:50:23 hshoexer Exp $	*/
d73 19
a91 11
		struct in_addr   v4;
		u_int32_t	 addr32;
	}		 address;
	union {
		struct in_addr	 v4;
		u_int32_t	 mask32;
	}		 mask;
	u_int8_t	 prefixlen;
	int		 netaddress;
	sa_family_t	 af;
	char		*name;
d126 3
a128 3
	struct ipsec_addr *src;
	struct ipsec_addr *dst;
	struct ipsec_addr *peer;
@


1.18
log
@add support for ipcomp.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.17 2005/08/22 17:26:46 hshoexer Exp $	*/
a71 1
	struct in_addr   v4;
d73 8
a80 3
		struct in_addr  mask;
		u_int32_t	mask32;
	}		 v4mask;
@


1.17
log
@Teach ipsecctl to control isakmpd.

ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.16 2005/08/09 12:37:45 hshoexer Exp $	*/
d43 1
a43 1
	PROTO_UNKNOWN, IPSEC_ESP, IPSEC_AH, IPSEC_COMP, IPSEC_TCPMD5
d61 1
a61 1
	ENCXF_UNKNOWN,ENCXF_NONE, ENCXF_3DES_CBC, ENCXF_DES_CBC, ENCXF_AES,
d65 3
d104 1
@


1.16
log
@Rewrite handling of transforms.  Now both ah and esp can be specified and
validated correctly.  Unbreaks ah.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.15 2005/08/08 13:29:00 hshoexer Exp $	*/
d31 4
d37 1
d64 3
d69 1
a69 1
	struct in_addr  v4;
d73 4
a76 3
	}		v4mask;
	int		netaddress;
	sa_family_t	af;
d115 2
d123 1
d141 2
@


1.15
log
@add crypto transforms and static keying rules
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.14 2005/08/08 09:15:09 hshoexer Exp $	*/
d89 5
d105 1
a105 2
	const struct ipsec_xf *authxf;
	const struct ipsec_xf *encxf;
@


1.14
log
@prepare for static keying
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.13 2005/08/05 14:39:02 hshoexer Exp $	*/
d51 3
a53 1
	ENC_NONE
d56 2
a57 1
	AUTH_NONE
d82 10
d100 2
@


1.13
log
@prepare for authentication and encryption keys, not used yet.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.12 2005/08/02 15:47:25 hshoexer Exp $	*/
d38 1
a38 1
	PROTO_UNKNOWN, IPSEC_ESP, IPSEC_AH, IPSEC_COMP
d49 6
@


1.12
log
@Make use of struct ipsec_auth dynamic.
Do not pass IDs to kernel when deleting flows.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.11 2005/07/24 10:06:38 hshoexer Exp $	*/
d81 2
a82 1
	struct ipsec_key  *key;
@


1.11
log
@prepare for combining SAs and flows in one single rule, no functional change
yet.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.10 2005/07/09 21:05:02 hshoexer Exp $	*/
d80 1
a80 1
	struct ipsec_auth  auth;
@


1.10
log
@Provide infrastructure for adding/deleting SAs, will be used by tcpmd5 and
manual keying.  Not used yet.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.9 2005/07/07 21:13:00 hshoexer Exp $	*/
d31 3
a33 3
enum {
	RULE_UNKNOWN, RULE_FLOW, RULE_SA
};
@


1.9
log
@Do not mix rule types with flow types
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.8 2005/07/07 21:00:08 hshoexer Exp $	*/
d32 1
a32 1
	RULE_UNKNOWN, RULE_FLOW, RULE_TCPMD5
d68 5
d81 1
d86 1
@


1.8
log
@add type for rules; will need this for tcpmd5
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.7 2005/06/30 19:05:27 hshoexer Exp $	*/
d70 2
d79 1
a79 1
	u_int8_t	 type;
@


1.7
log
@add -d flag for flow deletion.  Enable flow deletion.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.6 2005/05/27 19:55:21 hshoexer Exp $	*/
d31 3
@


1.6
log
@show flow type (require, use, etc.)
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.5 2005/05/27 05:19:55 hshoexer Exp $	*/
d29 1
@


1.5
log
@Support for dumping the SADB.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.4 2005/05/25 17:10:26 hshoexer Exp $	*/
d42 4
d73 1
@


1.4
log
@prepare for new sysctl interface, not used yet
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.3 2005/05/23 20:25:54 kjell Exp $	*/
d27 1
@


1.3
log
@tap. tap. is this thing on?

KNF, Fix a typo in an ENUM, Xr to ipsec.conf
no binary change

ok hshoexer@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsecctl.h,v 1.2 2005/04/04 22:22:55 hshoexer Exp $	*/
a83 3
int	pfkey_ipsec_establish(struct ipsec_rule *);
int	pfkey_ipsec_flush(void);
int	pfkey_init(void);
@


1.2
log
@fix cvs id tags
@
text
@d1 1
a1 1
/*	$OpenBSD:$	*/
d33 1
a33 1
	PROTO_UNKNWON, IPSEC_ESP, IPSEC_AH, IPSEC_COMP
@


1.1
log
@Add ipsecctl utility, work in progress

ok deraadt
@
text
@d1 1
a1 1
/*	$Id: ipsecctl.h,v 1.6 2005/02/03 16:26:54 hshoexer Exp $	 */
@

