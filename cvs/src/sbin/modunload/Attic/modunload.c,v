head	1.15;
access;
symbols
	OPENBSD_5_6:1.14.0.46
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.44
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.40
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.38
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.36
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.34
	OPENBSD_5_0:1.14.0.32
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.30
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.28
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.24
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.26
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.22
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.20
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.18
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.14.0.16
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.14.0.14
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.12
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.14.0.10
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.14.0.8
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.14.0.6
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.14.0.4
	OPENBSD_3_6_BASE:1.14
	OPENBSD_3_5:1.14.0.2
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.12.0.2
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.10.0.4
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.9.0.2
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9:1.8.0.8
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_8:1.8.0.6
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.4
	OPENBSD_2_7_BASE:1.8
	OPENBSD_2_6:1.8.0.2
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.7.0.2
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.5.0.8
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.6
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.4
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.15
date	2014.10.09.03.43.34;	author tedu;	state dead;
branches;
next	1.14;
commitid	Qvco95xx2Lj9qjX9;

1.14
date	2003.09.19.17.36.03;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2003.07.02.21.44.58;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2003.01.18.23.30.20;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2002.12.11.16.58.39;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2002.01.09.22.22.56;	author ericj;	state Exp;
branches;
next	1.9;

1.9
date	2001.07.07.00.15.14;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	99.08.17.09.13.14;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	98.11.18.16.06.43;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	98.11.18.10.43.04;	author art;	state Exp;
branches;
next	1.5;

1.5
date	97.01.15.23.41.14;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	96.08.05.11.05.21;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	96.07.02.06.37.55;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.06.21.11.39.17;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.43.36;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.43.36;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.15
log
@no more modules
@
text
@/*	$OpenBSD: modunload.c,v 1.14 2003/09/19 17:36:03 deraadt Exp $	*/
/*	$NetBSD: modunload.c,v 1.9 1995/05/28 05:23:05 jtc Exp $	*/

/*
 * Copyright (c) 1993 Terrence R. Lambert.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Terrence R. Lambert.
 * 4. The name Terrence R. Lambert may not be used to endorse or promote
 *    products derived from this software without specific prior written
 *    permission.
 *
 * THIS SOFTWARE IS PROVIDED BY TERRENCE R. LAMBERT ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE TERRENCE R. LAMBERT BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/ioctl.h>
#include <sys/conf.h>
#include <sys/mount.h>
#include <sys/lkm.h>

#include <a.out.h>
#include <err.h>
#include <errno.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "pathnames.h"

static void
usage(void)
{
	extern char *__progname;

	(void)fprintf(stderr, "usage: %s [-i id] [-n name] [-p postunload]\n",
		__progname);
	exit(1);
}

int
main(int argc, char *argv[])
{
	int c, devfd;
	long modnum = -1;
	char *modname = NULL;
	char *endptr, *post = NULL;
	struct lmc_unload ulbuf;

	while ((c = getopt(argc, argv, "i:n:p:")) != -1) {
		switch (c) {
		case 'i':
			modnum = strtol(optarg, &endptr, 0);
			if (modnum < 0 || modnum > INT_MAX || *endptr != '\0')
                                errx(1, "not a valid number");
			break;
		case 'n':
			modname = optarg;
			break;
		case 'p':
			post = optarg;
			break;
		default:
			usage();
			break;
		}
	}
	argc -= optind;
	argv += optind;

	if (argc != 0 || (modnum == -1 && modname == NULL))
		usage();


	/*
	 * Open the virtual device device driver for exclusive use (needed
	 * to ioctl() to retrive the loaded module(s) status).
	 */
	if ((devfd = open(_PATH_LKM, O_RDWR, 0)) == -1)
		err(2, "%s", _PATH_LKM);

	/*
	 * Unload the requested module.
	 */
	ulbuf.name = modname;
	ulbuf.id = (int)modnum;

	if (ioctl(devfd, LMUNLOAD, &ulbuf) == -1) {
		switch (errno) {
		case EINVAL:
			errx(3, "id out of range");
		case ENOENT:
			errx(3, "no such module");
		default:
			err(5, "LMUNLOAD");
		}
	}

	/*
	 * Execute the post-unload program.
	 */
	if (post) {
		execl(post, post, (char *)NULL);
		err(16, "can't exec `%s'", post);
	}
	exit(0);
}
@


1.14
log
@an atexit handler to close a file descriptor?  who wrote this crap..; millert ok
@
text
@d1 1
a1 1
/*	$OpenBSD: modunload.c,v 1.13 2003/07/02 21:44:58 deraadt Exp $	*/
@


1.13
log
@missing protos
@
text
@d1 1
a1 1
/*	$OpenBSD: modunload.c,v 1.12 2003/01/18 23:30:20 deraadt Exp $	*/
a52 2
static int devfd;

a62 6
static void
cleanup(void)
{
	(void)close(devfd);
}

d66 1
a66 1
	int c;
a102 2

	atexit(cleanup);
@


1.12
log
@minor tweaking; andrushock@@korovino.net
@
text
@d1 1
a1 1
/*	$OpenBSD: modunload.c,v 1.11 2002/12/11 16:58:39 deraadt Exp $	*/
d65 1
a65 1
void
@


1.11
log
@ansi
@
text
@d1 1
a1 1
/*	$OpenBSD: modunload.c,v 1.10 2002/01/09 22:22:56 ericj Exp $	*/
d41 1
d50 1
d110 1
a110 1
		err(2, _PATH_LKM);
@


1.10
log
@
add ability to execute script or program after a module is
unloaded.. similar to modload.
millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: modunload.c,v 1.9 2001/07/07 00:15:14 millert Exp $	*/
d54 1
a54 1
usage()
d64 1
a64 1
cleanup()
d70 1
a70 3
main(argc, argv)
	int argc;
	char *argv[];
@


1.9
log
@Can't test an int against LONG_{MIN,MAX}; noticed on alpha
While I'm at it make the strtol() bounds checking more sensible.
@
text
@d1 1
a1 1
/*	$OpenBSD: modunload.c,v 1.8 1999/08/17 09:13:14 millert Exp $	*/
d51 3
a53 1
void
d56 1
d58 2
a59 2
	fprintf(stderr,
	    "usage: modunload [-i <module id>] [-n <module name>]\n");
a62 2
int devfd;

d66 1
a66 2

	close(devfd);
d77 1
a77 1
	char *endptr;
d80 1
a80 1
	while ((c = getopt(argc, argv, "i:n:")) != -1) {
d86 1
a86 1
			break;	/* number */
d89 5
a93 2
			break;	/* name */
		case '?':
a94 2
		default:
			printf("default!\n");
d122 1
a122 1
		case EINVAL:		/* out of range */
d124 1
a124 1
		case ENOENT:		/* no such entry */
d126 1
a126 1
		default:		/* other error (EFAULT, etc) */
d131 8
a138 1
	return 0;
@


1.8
log
@More <sys/file.h> vs. <fcntl.h> and open() flags fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD: modunload.c,v 1.7 1998/11/18 16:06:43 deraadt Exp $	*/
d75 1
a75 1
	int modnum = -1;
d84 1
a84 2
			if (modnum == LONG_MIN || modnum == LONG_MAX ||
			    *endptr != '\0')
d117 1
a117 1
	ulbuf.id = modnum;
@


1.7
log
@better strtol() checking
@
text
@d1 1
a1 1
/*	$OpenBSD: modunload.c,v 1.6 1998/11/18 10:43:04 art Exp $	*/
d41 2
a42 1
#include <sys/file.h>
d44 1
a46 1
#include <err.h>
a47 1
#include <a.out.h>
@


1.6
log
@atoi does not do error checking on numbers, change to strtol.
pr system/641 From <lha@@stacken.kth.se>
@
text
@d1 1
a1 1
/*	$OpenBSD: modunload.c,v 1.5 1997/01/15 23:41:14 millert Exp $	*/
d84 2
a85 1
			if (*endptr != '\0')
@


1.5
log
@getopt(3) returns -1 when out of args, not EOF, whee!
@
text
@d1 1
a1 1
/*	$OpenBSD: modunload.c,v 1.4 1996/08/05 11:05:21 mickey Exp $	*/
d77 1
d83 3
a85 1
			modnum = atoi(optarg);
@


1.4
log
@sync to FreeBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: modunload.c,v 1.3 1996/07/02 06:37:55 deraadt Exp $	*/
d79 1
a79 1
	while ((c = getopt(argc, argv, "i:n:")) != EOF) {
@


1.3
log
@simpler usage line
@
text
@d1 1
a1 1
/*	$OpenBSD: modunload.c,v 1.2 1996/06/21 11:39:17 mickey Exp $	*/
d76 1
a76 1
	char modname[MAXLKMNAME] = "";
d85 1
a85 1
			strcpy(modname, optarg);
d97 1
a97 1
	if (argc != 0 || (modnum == -1 && *modname == '\0'))
@


1.2
log
@updates according to the kernel chenges.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d55 2
a56 2
	fprintf(stderr, "usage:\n");
	fprintf(stderr, "modunload [-i <module id>] [-n <module name>]\n");
@


1.1
log
@Initial revision
@
text
@d1 1
d76 1
a76 1
	char *modname = NULL;
d85 1
a85 1
			modname = optarg;
d97 1
a97 1
	if (argc != 0 || (modnum == -1 && modname == NULL))
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
