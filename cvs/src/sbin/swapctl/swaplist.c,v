head	1.12;
access;
symbols
	OPENBSD_6_1:1.12.0.6
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.4
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.10.0.6
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.8.0.16
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.14
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.10
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.8
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.6
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.4
	OPENBSD_5_0:1.8.0.2
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.7.0.16
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.14
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.10
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.12
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.8
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.6
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.4
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.2
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.4.0.20
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.18
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.16
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.14
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.12
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.10
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.8
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.6
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.3.0.10
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.8
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	VMSWAP2_TAG:1.1.1.1
	VMSWAP1_TAG:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2015.12.10.17.27.00;	author mmcc;	state Exp;
branches;
next	1.11;
commitid	82PdNqu2kKAuXPfA;

1.11
date	2015.08.20.22.02.21;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	0qPuuXwccpVXsXcV;

1.10
date	2015.01.16.06.40.01;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	Uu5nFG3wCl0LACBb;

1.9
date	2014.08.10.05.00.25;	author guenther;	state Exp;
branches;
next	1.8;
commitid	mVeMEMKY1tktqAQ2;

1.8
date	2011.06.24.21.02.09;	author jasper;	state Exp;
branches;
next	1.7;

1.7
date	2007.07.26.17.03.05;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2007.07.16.21.05.46;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2007.07.16.20.59.47;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.07.03.22.32.34;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2000.02.26.04.06.23;	author hugh;	state Exp;
branches;
next	1.2;

1.2
date	99.05.30.17.31.27;	author weingart;	state Exp;
branches;
next	1.1;

1.1
date	99.05.22.21.33.14;	author weingart;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.05.22.21.33.14;	author weingart;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Remove NULL-checks before free(). ok tb@@
@
text
@/*	$OpenBSD: swaplist.c,v 1.11 2015/08/20 22:02:21 deraadt Exp $	*/
/*	$NetBSD: swaplist.c,v 1.8 1998/10/08 10:00:31 mrg Exp $	*/

/*
 * Copyright (c) 1997 Matthew R. Green
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/param.h>	/* dbtob */
#include <sys/types.h>
#include <sys/swap.h>

#include <err.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "swapctl.h"

#define	dbtoqb(b) dbtob((int64_t)(b))

void
list_swap(int pri, int kflag, int pflag, int dolong)
{
	struct	swapent *sep, *fsep;
	long	blocksize;
	char	*header;
	size_t	l;
	int	hlen, totalsize, size, totalinuse, inuse, ncounted, pathmax;
	int	rnswap, nswap, i;

	nswap = swapctl(SWAP_NSWAP, 0, 0);
	if (nswap < 1)
		errx(1, "no swap devices configured");

	fsep = sep = calloc(nswap, sizeof(*sep));
	if (sep == NULL)
		err(1, "calloc");
	rnswap = swapctl(SWAP_STATS, (void *)sep, nswap);
	if (rnswap < 0)
		err(1, "SWAP_STATS");
	if (nswap != rnswap)
		warnx("SWAP_STATS different to SWAP_NSWAP (%d != %d)",
		    rnswap, nswap);

	pathmax = 11;
	if (kflag) {
		header = "1K-blocks";
		blocksize = 1024;
		hlen = strlen(header);
	} else
		header = getbsize(&hlen, &blocksize);

	if (dolong) {
		for (i = rnswap; i-- > 0; sep++)
			if (pathmax < (l = strlen(sep->se_path)))
				pathmax = l;
		sep = fsep;
		(void)printf("%-*s %*s %8s %8s %8s  %s\n",
		    pathmax, "Device", hlen, header,
		    "Used", "Avail", "Capacity", "Priority");
	}
	totalsize = totalinuse = ncounted = 0;
	for (; rnswap-- > 0; sep++) {
		if (pflag && sep->se_priority != pri)
			continue;
		ncounted++;
		size = sep->se_nblks;
		inuse = sep->se_inuse;
		totalsize += size;
		totalinuse += inuse;

		if (dolong) {
			(void)printf("%-*s %*ld ", pathmax, sep->se_path, hlen,
			    (long)(dbtoqb(size) / blocksize));

			(void)printf("%8ld %8ld %5.0f%%    %d\n",
			    (long)(dbtoqb(inuse) / blocksize),
			    (long)(dbtoqb(size - inuse) / blocksize),
			    (double)inuse / (double)size * 100.0,
			    sep->se_priority);
		}
	}
	if (dolong == 0)
		printf("total: %ld %*s allocated, %ld used, "
		    "%ld available\n",
		    (long)(dbtoqb(totalsize) / blocksize),
		    hlen, header,
		    (long)(dbtoqb(totalinuse) / blocksize),
		    (long)(dbtoqb(totalsize - totalinuse) / blocksize));
	else if (ncounted > 1)
		(void)printf("%-*s %*ld %8ld %8ld %5.0f%%\n", pathmax, "Total",
		    hlen,
		    (long)(dbtoqb(totalsize) / blocksize),
		    (long)(dbtoqb(totalinuse) / blocksize),
		    (long)(dbtoqb(totalsize - totalinuse) / blocksize),
		    (double)(totalinuse) / (double)totalsize * 100.0);
	free(fsep);
}
@


1.11
log
@<stdlib.h> is included, so do not need to cast result from
malloc, calloc, realloc*
ok krw millert
@
text
@d1 1
a1 1
/*	$OpenBSD: swaplist.c,v 1.10 2015/01/16 06:40:01 deraadt Exp $	*/
d123 1
a123 2
	if (fsep)
		free(fsep);
@


1.10
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: swaplist.c,v 1.9 2014/08/10 05:00:25 guenther Exp $	*/
d61 1
a61 1
	fsep = sep = (struct swapent *)calloc(nswap, sizeof(*sep));
@


1.9
log
@Only need <stdint.h> and not all of <inttypes.h> here
@
text
@d1 1
a1 1
/*	$OpenBSD: swaplist.c,v 1.8 2011/06/24 21:02:09 jasper Exp $	*/
d32 2
a33 1
#include <sys/param.h>
@


1.8
log
@swapctl -s was showing 1k blocks, regardless of -k. so fix this by showing
1k block when we're supposed to.

fix from tyr@@poczta.fm in pr 6609
ok otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: swaplist.c,v 1.7 2007/07/26 17:03:05 deraadt Exp $	*/
d36 1
a36 1
#include <inttypes.h>
@


1.7
log
@use calloc() instead of malloc(); zinovik@@cs.karelia.ru
@
text
@d1 1
a1 1
/*	$OpenBSD: swaplist.c,v 1.6 2007/07/16 21:05:46 millert Exp $	*/
d71 7
a78 6
		if (kflag) {
			header = "1K-blocks";
			blocksize = 1024;
			hlen = strlen(header);
		} else
			header = getbsize(&hlen, &blocksize);
d109 6
a114 5
		printf("total: %ldk bytes allocated = %ldk used, "
		   "%ldk available\n",
		    (long)(dbtoqb(totalsize) / 1024),
		    (long)(dbtoqb(totalinuse) / 1024),
		    (long)(dbtoqb(totalsize - totalinuse) / 1024));
@


1.6
log
@Remove dead code and fix incorrect comment.  From Igor Zinovik.
@
text
@d1 1
a1 1
/*	$OpenBSD: swaplist.c,v 1.5 2007/07/16 20:59:47 millert Exp $	*/
d54 1
a54 1
	int	rnswap, nswap = swapctl(SWAP_NSWAP, 0, 0), i;
d56 3
a58 4
	if (nswap < 1) {
		puts("no swap devices configured");
		exit(0);
	}
d60 1
a60 1
	fsep = sep = (struct swapent *)malloc(nswap * sizeof(*sep));
d62 1
a62 1
		err(1, "malloc");
d108 2
a109 2
		    printf("total: %ldk bytes allocated = %ldk used, "
			   "%ldk available\n",
d121 1
a121 1
		(void)free(fsep);
@


1.5
log
@No need to include <sys/param.h> or <errno.h>.  Also reorder includes
while here.  Adapted from a diff by Igor Zinovik.
@
text
@d1 1
a1 1
/*	$OpenBSD: swaplist.c,v 1.4 2002/07/03 22:32:34 deraadt Exp $	*/
d42 2
a45 6
/*
 * NOTE:  This file is separate from swapctl.c so that pstat can grab it.
 */

#include "swapctl.h"

d47 1
a47 1
list_swap(int pri, int kflag, int pflag, int tflag, int dolong)
d72 1
a72 1
	if (dolong && tflag == 0) {
d97 1
a97 1
		if (dolong && tflag == 0) {
d108 1
a108 5
	if (tflag)
		(void)printf("%dM/%dM swap space\n",
		    (int)(dbtoqb(totalinuse) / (1024 * 1024)),
		    (int)(dbtoqb(totalsize) / (1024 * 1024)));
	else if (dolong == 0)
@


1.4
log
@ansi
@
text
@d1 1
a1 1
/*	$OpenBSD: swaplist.c,v 1.3 2000/02/26 04:06:23 hugh Exp $	*/
a32 1
#include <sys/stat.h>
a34 1
#include <unistd.h>
d36 1
a36 1
#include <errno.h>
d40 1
a40 1
#include <inttypes.h>
@


1.3
log
@add rcs idents
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d53 1
a53 6
list_swap(pri, kflag, pflag, tflag, dolong)
	int	pri;
	int	kflag;
	int	pflag;
	int	tflag;
	int	dolong;
@


1.2
log
@Output style nit.  From ho@@
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d123 1
a123 1
		    printf("total: %ldk bytes allocated = %ldk used,"
@


1.1.1.1
log
@Initial import of swapctl(8).
@
text
@@
