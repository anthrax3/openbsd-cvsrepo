head	1.23;
access;
symbols
	OPENBSD_6_0:1.23.0.2
	OPENBSD_6_0_BASE:1.23
	OPENBSD_5_9:1.22.0.2
	OPENBSD_5_9_BASE:1.22
	OPENBSD_5_8:1.20.0.4
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.19.0.2
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.18.0.18
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.18.0.16
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.18.0.12
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.18.0.10
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.8
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.6
	OPENBSD_5_0:1.18.0.4
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.18.0.2
	OPENBSD_4_9_BASE:1.18
	OPENBSD_4_8:1.17.0.12
	OPENBSD_4_8_BASE:1.17
	OPENBSD_4_7:1.17.0.8
	OPENBSD_4_7_BASE:1.17
	OPENBSD_4_6:1.17.0.10
	OPENBSD_4_6_BASE:1.17
	OPENBSD_4_5:1.17.0.6
	OPENBSD_4_5_BASE:1.17
	OPENBSD_4_4:1.17.0.4
	OPENBSD_4_4_BASE:1.17
	OPENBSD_4_3:1.17.0.2
	OPENBSD_4_3_BASE:1.17
	OPENBSD_4_2:1.16.0.2
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.14.0.8
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.6
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.14.0.4
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.14.0.2
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.13.0.6
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.4
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.13.0.2
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.11.0.4
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.11.0.2
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.10.0.2
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.1.1.0.2
	OPENBSD_2_6_BASE:1.1.1.1
	VMSWAP2_TAG:1.1.1.1
	VMSWAP1_TAG:1.1.1;
locks; strict;
comment	@ * @;


1.23
date	2016.03.17.19.40.43;	author krw;	state Exp;
branches;
next	1.22;
commitid	aCmYZrmRmWHLuztW;

1.22
date	2015.09.15.17.46.23;	author schwarze;	state Exp;
branches;
next	1.21;
commitid	SDfVYUTUvzvvuESt;

1.21
date	2015.08.14.08.56.21;	author semarie;	state Exp;
branches;
next	1.20;
commitid	9QX82axjFlDjWeSS;

1.20
date	2015.04.18.18.28.37;	author deraadt;	state Exp;
branches;
next	1.19;
commitid	6b2lLILbgCR1fvia;

1.19
date	2015.01.16.06.40.01;	author deraadt;	state Exp;
branches;
next	1.18;
commitid	Uu5nFG3wCl0LACBb;

1.18
date	2010.12.29.12.14.41;	author stsp;	state Exp;
branches;
next	1.17;

1.17
date	2007.11.26.13.36.33;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2007.07.17.18.26.05;	author jmc;	state Exp;
branches;
next	1.15;

1.15
date	2007.07.16.21.05.46;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2005.04.12.06.41.57;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2004.01.12.19.46.08;	author avsm;	state Exp;
branches;
next	1.12;

1.12
date	2003.09.26.16.09.27;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2003.03.03.13.41.23;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2002.07.03.22.32.33;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2002.05.15.23.30.08;	author art;	state Exp;
branches;
next	1.8;

1.8
date	2002.05.15.23.24.43;	author art;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.16.21.27.38;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.06.04.14.59.50;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.02.03.04.44;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2001.03.09.03.13.48;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2000.06.30.16.00.09;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2000.02.26.04.06.23;	author hugh;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	99.05.22.21.33.14;	author weingart;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.05.22.21.33.14;	author weingart;	state Exp;
branches;
next	;

1.2.2.1
date	2000.10.06.20.40.27;	author jason;	state Exp;
branches;
next	;


desc
@@


1.23
log
@Last parameter to execl[e]() functions *must* be cast to a pointer.
Just NULL is not good practise as NULL is theoretically allowed to
be an integer rather than a pointer.

Use (char *)NULL consistently instead of scattering a few (char *)0
and (void *)NULL into the mix.

Prompted by and probably ok deraadt@@ millert@@ kettenis@@

Definitely ok mestre@@ ratchov@@
@
text
@/*	$OpenBSD: swapctl.c,v 1.22 2015/09/15 17:46:23 schwarze Exp $	*/
/*	$NetBSD: swapctl.c,v 1.9 1998/07/26 20:23:15 mycroft Exp $	*/

/*
 * Copyright (c) 1996, 1997 Matthew R. Green
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * swapctl command:
 *	-A		add all devices listed as `sw' in /etc/fstab
 *	-t [blk|noblk]	if -A, add either all block device or all non-block
 *			devices
 *	-a <path>	add this device
 *	-d <path>	remove this swap device
 *	-l		list swap devices
 *	-s		short listing of swap devices
 *	-k		use kilobytes
 *	-p <pri>	use this priority
 *	-c <path>	change priority
 *
 * or, if invoked as "swapon" (compatibility mode):
 *
 *	-a		all devices listed as `sw' in /etc/fstab
 *	-t		same as -t above (feature not present in old
 *			swapon(8) command)
 *	<dev>		add this device
 */

#include <sys/stat.h>
#include <sys/swap.h>
#include <sys/wait.h>

#include <unistd.h>
#include <err.h>
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include <string.h>
#include <fstab.h>
#include <util.h>

#include "swapctl.h"

int	command;

/*
 * Commands for swapctl(8).  These are mutually exclusive.
 */
#define	CMD_A		0x01	/* process /etc/fstab */
#define	CMD_a		0x02	/* add a swap file/device */
#define	CMD_c		0x04	/* change priority of a swap file/device */
#define	CMD_d		0x08	/* delete a swap file/device */
#define	CMD_l		0x10	/* list swap files/devices */
#define	CMD_s		0x20	/* summary of swap files/devices */

#define	SET_COMMAND(cmd) \
do { \
	if (command) \
		usage(); \
	command = (cmd); \
} while (0)

/*
 * Commands that require a "path" argument at the end of the command
 * line, and the ones which require that none exist.
 */
#define	REQUIRE_PATH	(CMD_a | CMD_c | CMD_d)
#define	REQUIRE_NOPATH	(CMD_A | CMD_l | CMD_s)

/*
 * Option flags, and the commands with which they are valid.
 */
int	kflag;		/* display in 1K blocks */
#define	KFLAG_CMDS	(CMD_l | CMD_s)

int	pflag;		/* priority was specified */
#define	PFLAG_CMDS	(CMD_A | CMD_a | CMD_c)

char	*tflag;		/* swap device type (blk or noblk) */
#define	TFLAG_CMDS	(CMD_A)

int	pri;		/* uses 0 as default pri */

static	void change_priority(char *);
static	void add_swap(char *);
static	void del_swap(char *);
static	void do_fstab(void);
static	void usage(void);
static	int  swapon_command(int, char **);

extern	char *__progname;	/* from crt0.o */

int
main(int argc, char *argv[])
{
	const char *errstr;
	int	c;

	if (strcmp(__progname, "swapon") == 0)
		return swapon_command(argc, argv);

	while ((c = getopt(argc, argv, "Aacdlkp:st:")) != -1) {
		switch (c) {
		case 'A':
			SET_COMMAND(CMD_A);
			break;

		case 'a':
			SET_COMMAND(CMD_a);
			break;

		case 'c':
			SET_COMMAND(CMD_c);
			break;

		case 'd':
			SET_COMMAND(CMD_d);
			break;

		case 'l':
			SET_COMMAND(CMD_l);
			break;

		case 'k':
			kflag = 1;
			break;

		case 'p':
			pflag = 1;
			pri = strtonum(optarg, 0, INT_MAX, &errstr);
			if (errstr)
				errx(1, "-p %s: %s", errstr, optarg);
			break;

		case 's':
			SET_COMMAND(CMD_s);
			break;

		case 't':
			if (tflag != NULL)
				usage();
			tflag = optarg;
			break;

		default:
			usage();
			/* NOTREACHED */
		}
	}

	argv += optind;
	argc -= optind;

	/* Did the user specify a command? */
	if (command == 0) {
		if (argc == 0)
			SET_COMMAND(CMD_l);
		else
			usage();
	}

	switch (argc) {
	case 0:
		if (command & REQUIRE_PATH)
			usage();
		break;

	case 1:
		if (command & REQUIRE_NOPATH)
			usage();
		break;

	default:
		usage();
	}

	/* To change priority, you have to specify one. */
	if ((command == CMD_c) && pflag == 0)
		usage();

	/* Sanity-check -t */
	if (tflag != NULL) {
		if (command != CMD_A)
			usage();
		if (strcmp(tflag, "blk") != 0 &&
		    strcmp(tflag, "noblk") != 0)
			usage();
	}

	/* Dispatch the command. */
	switch (command) {
	case CMD_l:
		list_swap(pri, kflag, pflag, 1);
		break;

	case CMD_s:
		list_swap(pri, kflag, pflag, 0);
		break;

	case CMD_c:
		change_priority(argv[0]);
		break;

	case CMD_a:
		add_swap(argv[0]);
		break;

	case CMD_d:
		del_swap(argv[0]);
		break;

	case CMD_A:
		do_fstab();
		break;
	}

	return (0);
}

/*
 * swapon_command: emulate the old swapon(8) program.
 */
int
swapon_command(int argc, char **argv)
{
	int ch, fiztab = 0;

	while ((ch = getopt(argc, argv, "at:")) != -1) {
		switch (ch) {
		case 'a':
			fiztab = 1;
			break;
		case 't':
			if (tflag != NULL)
				usage();
			tflag = optarg;
			break;
		default:
			goto swapon_usage;
		}
	}
	argc -= optind;
	argv += optind;

	if (fiztab) {
		if (argc)
			goto swapon_usage;
		/* Sanity-check -t */
		if (tflag != NULL) {
			if (strcmp(tflag, "blk") != 0 &&
			    strcmp(tflag, "noblk") != 0)
				usage();
		}
		do_fstab();
		return (0);
	} else if (argc == 0 || tflag != NULL)
		goto swapon_usage;

	while (argc) {
		add_swap(argv[0]);
		argc--;
		argv++;
	}
	return (0);

 swapon_usage:
	fprintf(stderr, "usage: %s -a | path\n", __progname);
	return (1);
}

/*
 * change_priority:  change the priority of a swap device.
 */
void
change_priority(char *path)
{

	if (swapctl(SWAP_CTL, path, pri) < 0)
		warn("%s", path);
}

/*
 * add_swap:  add the pathname to the list of swap devices.
 */
void
add_swap(char *path)
{

	if (swapctl(SWAP_ON, path, pri) < 0)
		if (errno != EBUSY)
			err(1, "%s", path);
}

/*
 * del_swap:  remove the pathname from the list of swap devices.
 */
void
del_swap(char *path)
{

	if (swapctl(SWAP_OFF, path, pri) < 0)
		err(1, "%s", path);
}

void
do_fstab(void)
{
	struct	fstab *fp;
	char	*s;
	long	priority;
	struct	stat st;
	mode_t	rejecttype;
	int	gotone = 0;

	/*
	 * Select which mount point types to reject, depending on the
	 * value of the -t parameter.
	 */
	if (tflag != NULL) {
		if (strcmp(tflag, "blk") == 0)
			rejecttype = S_IFREG;
		else if (strcmp(tflag, "noblk") == 0)
			rejecttype = S_IFBLK;
	} else
		rejecttype = 0;

#define PRIORITYEQ	"priority="
#define NFSMNTPT	"nfsmntpt="
#define PATH_MOUNT	"/sbin/mount_nfs"
	while ((fp = getfsent()) != NULL) {
		const char *spec;

		if (strcmp(fp->fs_type, "sw") != 0)
			continue;

		spec = fp->fs_spec;

		if ((s = strstr(fp->fs_mntops, PRIORITYEQ)) != NULL) {
			s += sizeof(PRIORITYEQ) - 1;
			priority = atol(s);
		} else
			priority = pri;

		if ((s = strstr(fp->fs_mntops, NFSMNTPT)) != NULL) {
			char *t;
			pid_t pid;
			int status;

			/*
			 * Skip this song and dance if we're only
			 * doing block devices.
			 */
			if (rejecttype == S_IFREG)
				continue;

			t = strpbrk(s, ",");
			if (t != 0)
				*t = '\0';
			spec = strdup(s + strlen(NFSMNTPT));
			if (spec == NULL)
				err(1, "strdup");

			if (t != 0)
				*t = ',';

			if (strlen(spec) == 0) {
				warnx("empty mountpoint");
				free((char *)spec);
				continue;
			}

			switch (pid = vfork()) {
			case -1:	/* error */
				err(1, "vfork");
			case 0:
				execl(PATH_MOUNT, PATH_MOUNT, fp->fs_spec, spec,
				    (char *)NULL);
				err(1, "execl");
			}
			while (waitpid(pid, &status, 0) < 0)
				if (errno != EINTR)
					err(1, "waitpid");
			if (status != 0) {
				warnx("%s: mount failed", fp->fs_spec);
				free((char *)spec);
				continue;
			}
		} else if (isduid(spec, 0)) {
			if (rejecttype == S_IFBLK)
				continue;
		} else {
			/*
			 * Determine blk-ness.  Don't even consider a
			 * mountpoint outside /dev as a block device.
			 */
			if (rejecttype == S_IFREG) {
				if (strncmp("/dev/", spec, 5) != 0)
					continue;
			}
			if (stat(spec, &st) < 0) {
				warn("%s", spec);
				continue;
			}
			if ((st.st_mode & S_IFMT) == rejecttype)
				continue;

			/*
			 * Do not allow fancy objects to be swap areas.
			 */
			if (!S_ISREG(st.st_mode) &&
			    !S_ISBLK(st.st_mode))
				continue;
		}

		if (swapctl(SWAP_ON, spec, (int)priority) < 0) {
			if (errno != EBUSY)
				warn("%s", spec);
		} else {
			gotone = 1;
			printf("%s: adding %s as swap device at priority %d\n",
			    __progname, fp->fs_spec, (int)priority);
		}

		if (spec != fp->fs_spec)
			free((char *)spec);
	}
	if (gotone == 0)
		exit(1);
}

void
usage(void)
{

	fprintf(stderr, "usage: %s -A [-p priority] [-t blk | noblk]\n",
	    __progname);
	fprintf(stderr, "       %s -a [-p priority] path\n", __progname);
	fprintf(stderr, "       %s -c -p priority path\n", __progname);
	fprintf(stderr, "       %s -d path\n", __progname);
	fprintf(stderr, "       %s [[-l] | -s] [-k]\n", __progname);
	exit(1);
}
@


1.22
log
@update spacing in usage(); reminded by jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: swapctl.c,v 1.21 2015/08/14 08:56:21 semarie Exp $	*/
d402 1
a402 1
				    NULL);
@


1.21
log
@switch from system(3) to vfork(2)+execl(2) for invoking mount_nfs(8) when fstab
contains option for swapping to NFS files.

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: swapctl.c,v 1.20 2015/04/18 18:28:37 deraadt Exp $	*/
d460 1
a460 1
	fprintf(stderr, "usage: %s -A [-p priority] [-t blk|noblk]\n",
@


1.20
log
@Convert many atoi() calls to strtonum(), adding range checks and failure
handling along the way.
Reviews by Brendan MacDonell, Jeremy Devenport, florian, doug, millert
@
text
@d1 1
a1 1
/*	$OpenBSD: swapctl.c,v 1.19 2015/01/16 06:40:01 deraadt Exp $	*/
d55 1
d370 3
a372 2
			char *t, cmd[sizeof(PATH_MOUNT)+PATH_MAX+1+PATH_MAX+1];
			int l;
d396 13
a408 5
			l = snprintf(cmd, sizeof(cmd), "%s %s %s",
			    PATH_MOUNT, fp->fs_spec, spec);
			if (l == -1 || l >= sizeof(cmd))
				errx(1, "path too long");
			if (system(cmd) != 0) {
@


1.19
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: swapctl.c,v 1.18 2010/12/29 12:14:41 stsp Exp $	*/
d61 1
d120 1
d154 3
a156 2
			/* XXX strtol() */
			pri = atoi(optarg);
@


1.18
log
@Fix swapctl -A with DUIDs in /etc/fstab, and plug a small memory leak.
ok jsing@@ (who also pointed out a DPADD tweak missing from my diff)
@
text
@d1 1
a1 1
/*	$OpenBSD: swapctl.c,v 1.17 2007/11/26 13:36:33 deraadt Exp $	*/
a52 1
#include <sys/param.h>
a53 1

@


1.17
log
@if no arguments given, assume a nice default; ok miod jakemsr deanna
@
text
@d1 1
a1 1
/*	$OpenBSD: swapctl.c,v 1.16 2007/07/17 18:26:05 jmc Exp $	*/
d65 1
d399 1
d402 3
@


1.16
log
@sync swapon usage(); from Igor Zinovik
@
text
@d1 1
a1 1
/*	$OpenBSD: swapctl.c,v 1.15 2007/07/16 21:05:46 millert Exp $	*/
a172 4
	/* Did the user specify a command? */
	if (command == 0)
		usage();

d176 8
d449 1
a449 1
	fprintf(stderr, "       %s -l | -s [-k]\n", __progname);
@


1.15
log
@Remove dead code and fix incorrect comment.  From Igor Zinovik.
@
text
@d1 1
a1 1
/*	$OpenBSD: swapctl.c,v 1.14 2005/04/12 06:41:57 deraadt Exp $	*/
d285 1
a285 3
	fprintf(stderr, "usage: %s -a [-t blk|noblk]\n"
			"       %s <path> ...\n",
	    __progname, __progname);
@


1.14
log
@handle snprintf potential -1 case
@
text
@d1 1
a1 1
/*	$OpenBSD: swapctl.c,v 1.13 2004/01/12 19:46:08 avsm Exp $	*/
d211 1
a211 1
		list_swap(pri, kflag, pflag, 0, 1);
d215 1
a215 1
		list_swap(pri, kflag, pflag, 0, 0);
@


1.13
log
@- avoid variable sized static array (from millert@@)
- check for snprintf overflow
- errx -> err for strdup

commit #1000!
@
text
@d1 1
a1 1
/*	$OpenBSD: swapctl.c,v 1.12 2003/09/26 16:09:27 deraadt Exp $	*/
d366 1
d390 3
a392 2
			if (snprintf(cmd, sizeof(cmd), "%s %s %s",
			    PATH_MOUNT, fp->fs_spec, spec) >= sizeof(cmd))
@


1.12
log
@check strdup failure; ok anil millert
@
text
@d1 1
a1 1
/*	$OpenBSD: swapctl.c,v 1.11 2003/03/03 13:41:23 miod Exp $	*/
d365 1
a365 1
			char *t, cmd[strlen(PATH_MOUNT)+1+PATH_MAX+1+PATH_MAX+1];
d379 1
a379 1
				errx(1, "Out of memory");
d389 3
a391 2
			snprintf(cmd, sizeof(cmd), "%s %s %s",
			    PATH_MOUNT, fp->fs_spec, spec);
@


1.11
log
@Fix inaccuracies in comments.
@
text
@d1 1
a1 1
/*	$OpenBSD: swapctl.c,v 1.10 2002/07/03 22:32:33 deraadt Exp $	*/
d378 3
a382 3

			if (spec == NULL)
				errx(1, "Out of memory");
@


1.10
log
@ansi
@
text
@d1 1
a1 1
/*	$OpenBSD: swapctl.c,v 1.9 2002/05/15 23:30:08 art Exp $	*/
d37 2
a38 2
 *	-a <dev>	add this device
 *	-d <dev>	remove this swap device (not supported yet)
d43 1
a43 1
 *	-c		change priority
a110 1
	int  main(int, char *[]);
@


1.9
log
@typo in comment.
From Sam Smith S at mSmith.net
@
text
@d1 1
a1 1
/*	$OpenBSD: swapctl.c,v 1.8 2002/05/15 23:24:43 art Exp $	*/
d119 1
a119 3
main(argc, argv)
	int	argc;
	char	*argv[];
d243 1
a243 3
swapon_command(argc, argv)
	int argc;
	char **argv;
d296 1
a296 2
change_priority(path)
	char	*path;
d307 1
a307 2
add_swap(path)
	char *path;
d319 1
a319 2
del_swap(path)
	char *path;
d327 1
a327 1
do_fstab()
d437 1
a437 1
usage()
@


1.8
log
@Kill commented out stubs for swapoff.
@
text
@d1 1
a1 1
/*	$OpenBSD: swapctl.c,v 1.7 2002/02/16 21:27:38 millert Exp $	*/
d322 1
a322 1
 * del_swap:  remove the pathname to the list of swap devices.
@


1.7
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: swapctl.c,v 1.6 2001/06/04 14:59:50 mickey Exp $	*/
a114 3
#if 0
static	void swapoff_command(int, char **);
#endif
a126 7

#if 0
	if (strcmp(__progname, "swapoff") == 0) {
		swapoff_command(argc, argv);
		/* NOTREACHED */
	}
#endif
@


1.6
log
@return from main() don't exit
@
text
@d1 1
a1 1
/*	$OpenBSD: swapctl.c,v 1.5 2001/06/02 03:04:44 miod Exp $	*/
d108 7
a114 7
static	void change_priority __P((char *));
static	void add_swap __P((char *));
static	void del_swap __P((char *));
	int  main __P((int, char *[]));
static	void do_fstab __P((void));
static	void usage __P((void));
static	int  swapon_command __P((int, char **));
d116 1
a116 1
static	void swapoff_command __P((int, char **));
@


1.5
log
@Various swapctl(8) improvements:
- don't print an error message when trying to enable swap on an
  already active swap point.
- better handling of -t option.
- silently ignores swap points which are neither block devices nor
  regular files, and don't consider swap points not starting with /dev/
  as valid block devices, when invoked with -A.

Work by deraadt@@ and myself, ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: swapctl.c,v 1.4 2001/03/09 03:13:48 deraadt Exp $	*/
d114 1
a114 1
static	void swapon_command __P((int, char **));
d128 2
a129 4
	if (strcmp(__progname, "swapon") == 0) {
		swapon_command(argc, argv);
		/* NOTREACHED */
	}
d248 1
a248 1
	exit(0);
d254 1
a254 1
void
d288 1
a288 1
		exit(0);
d297 1
a297 2
	exit(0);
	/* NOTREACHED */
d300 4
a303 3
	fprintf(stderr, "usage: %s -a [-t blk|noblk]\n", __progname);
	fprintf(stderr, "       %s <path> ...\n", __progname);
	exit(1);
@


1.4
log
@PATH_MAX+1 is wrong.  Not cranking libc/libc_r majors over this, since they just got cranked a little while ago. discussion with millert
@
text
@d1 1
a1 1
/*	$OpenBSD: swapctl.c,v 1.3 2000/06/30 16:00:09 millert Exp $	*/
d329 2
a330 1
		err(1, "%s", path);
d352 1
a352 1
	int	isblk;
d355 12
a376 1
		isblk = 0;
d391 1
a391 2
			if (tflag != NULL &&
			    strcmp(tflag, "blk") == 0)
d417 2
a418 1
			 * Determine blk-ness.
d420 4
d428 2
a429 3
			if (S_ISBLK(st.st_mode))
				isblk = 1;
		}
d431 5
a435 7
		/*
		 * Skip this type if we're told to.
		 */
		if (tflag != NULL) {
			if (strcmp(tflag, "blk") == 0 && isblk == 0)
				continue;
			if (strcmp(tflag, "noblk") == 0 && isblk == 1)
d439 4
a442 3
		if (swapctl(SWAP_ON, spec, (int)priority) < 0)
			warn("%s", spec);
		else {
@


1.3
log
@warnx?/errx? paranoia (use "%s" not a bare string unless it is a
constant).  These are not security holes but it is worth fixing
them anyway both for robustness and so folks looking for examples
in the tree are not misled into doing something potentially dangerous.
Furthermore, it is a bad idea to assume that pathnames will not
include '%' in them and that error routines don't return strings
with '%' in them (especially in light of the possibility of locales).
@
text
@d1 1
a1 1
/*	$OpenBSD: swapctl.c,v 1.2 2000/02/26 04:06:23 hugh Exp $	*/
d373 1
a373 1
			char *t, cmd[2*PATH_MAX+sizeof(PATH_MOUNT)+2];
d399 1
a399 1
				PATH_MOUNT, fp->fs_spec, spec);
@


1.2
log
@add rcs idents
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d409 1
a409 1
				warn(spec);
@


1.2.2.1
log
@Pull in patch from current (more to come...):
Fix (millert):
warnx?/errx? paranoia (use "%s" not a bare string unless it is a
constant).  These are not security holes but it is worth fixing
them anyway both for robustness and so folks looking for examples
in the tree are not misled into doing something potentially dangerous.
Furthermore, it is a bad idea to assume that pathnames will not
include '%' in them and that error routines don't return strings
with '%' in them (especially in light of the possibility of locales).
@
text
@d1 1
a1 1
/*	$OpenBSD: swapctl.c,v 1.2 2000/02/26 04:06:23 hugh Exp $	*/
d409 1
a409 1
				warn("%s", spec);
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@Initial import of swapctl(8).
@
text
@@
