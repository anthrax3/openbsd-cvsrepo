head	1.29;
access;
symbols
	OPENBSD_6_2:1.29.0.2
	OPENBSD_6_2_BASE:1.29
	OPENBSD_6_1:1.27.0.8
	OPENBSD_6_1_BASE:1.27
	OPENBSD_6_0:1.27.0.4
	OPENBSD_6_0_BASE:1.27
	OPENBSD_5_9:1.27.0.2
	OPENBSD_5_9_BASE:1.27
	OPENBSD_5_8:1.25.0.6
	OPENBSD_5_8_BASE:1.25
	OPENBSD_5_7:1.25.0.2
	OPENBSD_5_7_BASE:1.25
	OPENBSD_5_6:1.23.0.4
	OPENBSD_5_6_BASE:1.23
	OPENBSD_5_5:1.22.0.18
	OPENBSD_5_5_BASE:1.22
	OPENBSD_5_4:1.22.0.14
	OPENBSD_5_4_BASE:1.22
	OPENBSD_5_3:1.22.0.12
	OPENBSD_5_3_BASE:1.22
	OPENBSD_5_2:1.22.0.10
	OPENBSD_5_2_BASE:1.22
	OPENBSD_5_1_BASE:1.22
	OPENBSD_5_1:1.22.0.8
	OPENBSD_5_0:1.22.0.6
	OPENBSD_5_0_BASE:1.22
	OPENBSD_4_9:1.22.0.4
	OPENBSD_4_9_BASE:1.22
	OPENBSD_4_8:1.22.0.2
	OPENBSD_4_8_BASE:1.22
	OPENBSD_4_7:1.21.0.4
	OPENBSD_4_7_BASE:1.21
	OPENBSD_4_6:1.21.0.6
	OPENBSD_4_6_BASE:1.21
	OPENBSD_4_5:1.21.0.2
	OPENBSD_4_5_BASE:1.21
	OPENBSD_4_4:1.20.0.8
	OPENBSD_4_4_BASE:1.20
	OPENBSD_4_3:1.20.0.6
	OPENBSD_4_3_BASE:1.20
	OPENBSD_4_2:1.20.0.4
	OPENBSD_4_2_BASE:1.20
	OPENBSD_4_1:1.20.0.2
	OPENBSD_4_1_BASE:1.20
	OPENBSD_4_0:1.19.0.6
	OPENBSD_4_0_BASE:1.19
	OPENBSD_3_9:1.19.0.4
	OPENBSD_3_9_BASE:1.19
	OPENBSD_3_8:1.19.0.2
	OPENBSD_3_8_BASE:1.19
	OPENBSD_3_7:1.17.0.8
	OPENBSD_3_7_BASE:1.17
	OPENBSD_3_6:1.17.0.6
	OPENBSD_3_6_BASE:1.17
	OPENBSD_3_5:1.17.0.4
	OPENBSD_3_5_BASE:1.17
	OPENBSD_3_4:1.17.0.2
	OPENBSD_3_4_BASE:1.17
	OPENBSD_3_3:1.16.0.4
	OPENBSD_3_3_BASE:1.16
	OPENBSD_3_2:1.16.0.2
	OPENBSD_3_2_BASE:1.16
	OPENBSD_3_1:1.15.0.2
	OPENBSD_3_1_BASE:1.15
	OPENBSD_3_0:1.13.0.2
	OPENBSD_3_0_BASE:1.13
	OPENBSD_2_9:1.8.0.6
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_8:1.8.0.4
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.2
	OPENBSD_2_7_BASE:1.8
	OPENBSD_2_6:1.7.0.6
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.4
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.7.0.2
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.5.0.6
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.4
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.29
date	2017.09.01.07.31.45;	author tom;	state Exp;
branches;
next	1.28;
commitid	UDdf2ILSnhfZzIFV;

1.28
date	2017.08.26.08.53.20;	author tom;	state Exp;
branches;
next	1.27;
commitid	bdeWoD0A8anWKv9I;

1.27
date	2015.10.09.01.37.06;	author deraadt;	state Exp;
branches;
next	1.26;
commitid	sbrB3Q5CNxcwZpfU;

1.26
date	2015.10.04.18.49.30;	author deraadt;	state Exp;
branches;
next	1.25;
commitid	zywac3CXxcTvToVU;

1.25
date	2015.01.16.06.39.57;	author deraadt;	state Exp;
branches;
next	1.24;
commitid	Uu5nFG3wCl0LACBb;

1.24
date	2015.01.13.10.07.58;	author mpf;	state Exp;
branches;
next	1.23;
commitid	IZ2rtJyRuzWF0F1j;

1.23
date	2014.04.22.20.43.12;	author tedu;	state Exp;
branches;
next	1.22;

1.22
date	2010.07.02.22.02.06;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2008.10.17.18.49.50;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2006.12.24.00.47.27;	author djm;	state Exp;
branches;
next	1.19;

1.19
date	2005.04.28.11.10.03;	author henning;	state Exp;
branches;
next	1.18;

1.18
date	2005.04.14.10.23.37;	author henning;	state Exp;
branches;
next	1.17;

1.17
date	2003.06.02.20.06.14;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2002.07.03.22.32.32;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2002.02.16.21.27.33;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2001.11.05.07.39.16;	author mpech;	state Exp;
branches;
next	1.13;

1.13
date	2001.07.07.18.26.11;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2001.07.07.00.11.26;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2001.06.22.23.24.25;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2001.06.22.22.06.23;	author mickey;	state Exp;
branches;
next	1.9;

1.9
date	2001.06.04.14.59.47;	author mickey;	state Exp;
branches;
next	1.8;

1.8
date	2000.02.22.19.27.38;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	98.07.08.22.14.37;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	98.07.05.18.45.17;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	97.03.29.20.28.20;	author tholo;	state Exp;
branches;
next	1.4;

1.4
date	97.01.15.23.41.10;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.12.22.03.00.49;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.06.23.14.30.08;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.43.28;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.43.28;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.29
log
@free() the memory we allocate in dmesg.c.  While this memory would be
released on process exit, otto@@ points out that various checks happen
on free(), so this helps detect memory management errors.

Based on a diff from Nan Xiao - thanks.

ok otto@@
@
text
@/*	$OpenBSD: dmesg.c,v 1.28 2017/08/26 08:53:20 tom Exp $	*/
/*	$NetBSD: dmesg.c,v 1.8 1995/03/18 14:54:49 cgd Exp $	*/

/*-
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/msgbuf.h>
#include <sys/sysctl.h>

#include <err.h>
#include <fcntl.h>
#include <kvm.h>
#include <limits.h>
#include <nlist.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>
#include <vis.h>

#ifndef NOKVM
struct nlist nl[] = {
#define	X_MSGBUF	0
	{ "_msgbufp" },
	{ NULL },
};
#endif

void usage(void);

#define	KREAD(addr, var) \
	kvm_read(kd, addr, &var, sizeof(var)) != sizeof(var)

int
main(int argc, char *argv[])
{
	int ch, newl, skip, i;
	char *p;
	struct msgbuf cur;
	char *memf, *nlistf, *bufdata = NULL;
	char *allocated = NULL;
	int startupmsgs = 0;
	char buf[5];

	memf = nlistf = NULL;
	while ((ch = getopt(argc, argv, "sM:N:")) != -1)
		switch(ch) {
		case 's':
			startupmsgs = 1;
			break;
		case 'M':
			memf = optarg;
			break;
		case 'N':
			nlistf = optarg;
			break;
		case '?':
		default:
			usage();
		}
	argc -= optind;
	argv += optind;

	if (memf == NULL && nlistf == NULL) {
		int mib[2], msgbufsize;
		size_t len;

		mib[0] = CTL_KERN;
		mib[1] = startupmsgs ? KERN_CONSBUFSIZE : KERN_MSGBUFSIZE;
		len = sizeof(msgbufsize);
		if (sysctl(mib, 2, &msgbufsize, &len, NULL, 0))
			err(1, "sysctl: %s", startupmsgs ? "KERN_CONSBUFSIZE" :
			    "KERN_MSGBUFSIZE");

		msgbufsize += sizeof(struct msgbuf) - 1;
		allocated = bufdata = calloc(1, msgbufsize);
		if (bufdata == NULL)
			errx(1, "couldn't allocate space for buffer data");

		mib[1] = startupmsgs ? KERN_CONSBUF : KERN_MSGBUF;
		len = msgbufsize;
		if (sysctl(mib, 2, bufdata, &len, NULL, 0))
			err(1, "sysctl: %s",
			    startupmsgs ? "KERN_CONSBUF" : "KERN_MSGBUF");

		if (pledge("stdio", NULL) == -1)
			err(1, "pledge");

		memcpy(&cur, bufdata, sizeof(cur));
		bufdata = ((struct msgbuf *)bufdata)->msg_bufc;
	} else {
#ifndef NOKVM
		struct msgbuf *bufp;
		kvm_t *kd;

		/* Read in kernel message buffer, do sanity checks. */
		if ((kd = kvm_open(nlistf, memf, NULL, O_RDONLY,
		    "dmesg")) == NULL)
			return (1);

		if (pledge("stdio", NULL) == -1)
			err(1, "pledge");

		if (kvm_nlist(kd, nl) == -1)
			errx(1, "kvm_nlist: %s", kvm_geterr(kd));
		if (nl[X_MSGBUF].n_type == 0)
			errx(1, "%s: msgbufp not found",
			    nlistf ? nlistf : "namelist");
		if (KREAD(nl[X_MSGBUF].n_value, bufp))
			errx(1, "kvm_read: %s: (0x%lx)", kvm_geterr(kd),
			    nl[X_MSGBUF].n_value);
		if (KREAD((long)bufp, cur))
			errx(1, "kvm_read: %s (%0lx)", kvm_geterr(kd),
			    (unsigned long)bufp);
		if (cur.msg_magic != MSG_MAGIC)
			errx(1, "magic number incorrect");
		allocated = bufdata = malloc(cur.msg_bufs);
		if (bufdata == NULL)
			errx(1, "couldn't allocate space for buffer data");
		if (kvm_read(kd, (long)&bufp->msg_bufc, bufdata,
		    cur.msg_bufs) != cur.msg_bufs)
			errx(1, "kvm_read: %s", kvm_geterr(kd));
		kvm_close(kd);
#endif
	}

	if (cur.msg_bufx >= cur.msg_bufs)
		cur.msg_bufx = 0;
	/*
	 * The message buffer is circular; start at the read pointer, and
	 * go to the write pointer - 1.
	 */
	for (newl = skip = i = 0, p = bufdata + cur.msg_bufx;
	    i < cur.msg_bufs; i++, p++) {
		if (p == bufdata + cur.msg_bufs)
			p = bufdata;
		ch = *p;
		/* Skip "\n<.*>" syslog sequences. */
		if (skip) {
			if (ch == '>')
				newl = skip = 0;
			continue;
		}
		if (newl && ch == '<') {
			skip = 1;
			continue;
		}
		if (ch == '\0')
			continue;
		newl = ch == '\n';
		vis(buf, ch, 0, 0);
		if (buf[1] == 0)
			putchar(buf[0]);
		else
			printf("%s", buf);
	}
	if (!newl)
		putchar('\n');
	free(allocated);
	return (0);
}

void
usage(void)
{
	extern char *__progname;

	fprintf(stderr, "usage: %s [-s] [-M core] [-N system]\n", __progname);
	exit(1);
}
@


1.28
log
@Be more precise in the messages given by err() after calling sysctl()
in dmesg.c.

Based on a diff from xiao_nan (at) dsi (dot) a-star (dot) edu (dot) sg -
thanks.

ok otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dmesg.c,v 1.27 2015/10/09 01:37:06 deraadt Exp $	*/
d69 1
d104 1
a104 1
		bufdata = calloc(1, msgbufsize);
d145 1
a145 1
		bufdata = malloc(cur.msg_bufs);
d187 1
@


1.27
log
@Change all tame callers to namechange to pledge(2).
@
text
@d1 1
a1 1
/*	$OpenBSD: dmesg.c,v 1.26 2015/10/04 18:49:30 deraadt Exp $	*/
d99 2
a100 1
			err(1, "sysctl: KERN_MSGBUFSIZE");
d110 2
a111 1
			err(1, "sysctl: KERN_MSGBUF");
@


1.26
log
@dmesg has two modes.  The normal sysctl mode, and the -M/-N kvm searcher.
In both cases once the relevant setup is done, it can drop to tame "stdio".
@
text
@d1 1
a1 1
/*	$OpenBSD: dmesg.c,v 1.25 2015/01/16 06:39:57 deraadt Exp $	*/
d111 2
a112 2
		if (tame("stdio", NULL) == -1)
			err(1, "tame");
d126 2
a127 2
		if (tame("stdio", NULL) == -1)
			err(1, "tame");
@


1.25
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: dmesg.c,v 1.24 2015/01/13 10:07:58 mpf Exp $	*/
d111 3
d125 3
@


1.24
log
@Add dmesg -s support, to view the output of rc(8) system startup messages.
Help and feedback by Theo and Miod.
OK deraadt@@, manpage-ok jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dmesg.c,v 1.23 2014/04/22 20:43:12 tedu Exp $	*/
d33 1
a33 1
#include <sys/param.h>
@


1.23
log
@malloc/memset -> calloc. from peter malone
@
text
@d1 1
a1 1
/*	$OpenBSD: dmesg.c,v 1.22 2010/07/02 22:02:06 deraadt Exp $	*/
d69 1
d73 1
a73 1
	while ((ch = getopt(argc, argv, "M:N:")) != -1)
d75 3
d96 1
a96 1
		mib[1] = KERN_MSGBUFSIZE;
d106 1
a106 1
		mib[1] = KERN_MSGBUF;
d186 1
a186 1
	fprintf(stderr, "usage: %s [-M core] [-N system]\n", __progname);
@


1.22
log
@some data structures were still present when NOKVM was defined
@
text
@d1 1
a1 1
/*	$OpenBSD: dmesg.c,v 1.21 2008/10/17 18:49:50 deraadt Exp $	*/
d98 1
a98 1
		bufdata = malloc(msgbufsize);
a101 1
		memset(bufdata, 0, msgbufsize);
@


1.21
log
@init bufdata to NULL for when compiled without KVM support
@
text
@d1 1
a1 1
/*	$OpenBSD: dmesg.c,v 1.20 2006/12/24 00:47:27 djm Exp $	*/
d49 1
d55 1
@


1.20
log
@zap incorrect comment
@
text
@d1 1
a1 1
/*	$OpenBSD: dmesg.c,v 1.19 2005/04/28 11:10:03 henning Exp $	*/
d66 1
a66 1
	char *memf, *nlistf, *bufdata;
@


1.19
log
@tiny doses of KNF, inspired by a diff for sth else from Brian <bwaichu@@yahoo.com>
@
text
@d1 1
a1 1
/*	$OpenBSD: dmesg.c,v 1.18 2005/04/14 10:23:37 henning Exp $	*/
a84 4
	/*
	 * Discard setgid privileges if not the running kernel so that bad
	 * guys can't print interesting stuff from kernel memory.
	 */
@


1.18
log
@shave off a few bytes, alpha floppies fit again now
@
text
@d1 1
a1 1
/*	$OpenBSD: dmesg.c,v 1.17 2003/06/02 20:06:14 millert Exp $	*/
d169 1
a169 1
		(void)vis(buf, ch, 0, 0);
d171 1
a171 1
			(void)putchar(buf[0]);
d173 1
a173 1
			(void)printf("%s", buf);
d176 1
a176 1
		(void)putchar('\n');
d183 3
a185 1
	(void)fprintf(stderr, "usage: dmesg [-M core] [-N system]\n");
@


1.17
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: dmesg.c,v 1.16 2002/07/03 22:32:32 deraadt Exp $	*/
a31 14

#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1991, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)dmesg.c	8.1 (Berkeley) 6/5/93";
#else
static char rcsid[] = "$OpenBSD: dmesg.c,v 1.16 2002/07/03 22:32:32 deraadt Exp $";
#endif
#endif /* not lint */
@


1.16
log
@ansi
@
text
@d1 1
a1 1
/*	$OpenBSD: dmesg.c,v 1.15 2002/02/16 21:27:33 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d43 1
a43 1
static char rcsid[] = "$OpenBSD: dmesg.c,v 1.15 2002/02/16 21:27:33 millert Exp $";
@


1.15
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: dmesg.c,v 1.14 2001/11/05 07:39:16 mpech Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: dmesg.c,v 1.14 2001/11/05 07:39:16 mpech Exp $";
d79 1
a79 3
main(argc, argv)
	int argc;
	char *argv[];
d199 1
a199 1
usage()
@


1.14
log
@kill more registers;

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: dmesg.c,v 1.13 2001/07/07 18:26:11 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: dmesg.c,v 1.13 2001/07/07 18:26:11 deraadt Exp $";
d73 1
a73 1
void usage __P((void));
@


1.13
log
@major -Wall cleanup, almost complete
@
text
@d1 1
a1 1
/*	$OpenBSD: dmesg.c,v 1.12 2001/07/07 00:11:26 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: dmesg.c,v 1.12 2001/07/07 00:11:26 millert Exp $";
d83 2
a84 2
	register int ch, newl, skip, i;
	register char *p;
@


1.12
log
@#include <string.h> for memset() proto
@
text
@d1 1
a1 1
/*	$OpenBSD: dmesg.c,v 1.11 2001/06/22 23:24:25 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: dmesg.c,v 1.11 2001/06/22 23:24:25 deraadt Exp $";
d84 1
a84 1
	register char *p, *ep;
@


1.11
log
@smaller dmesg
@
text
@d1 1
a1 1
/*	$OpenBSD: dmesg.c,v 1.10 2001/06/22 22:06:23 mickey Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: dmesg.c,v 1.10 2001/06/22 22:06:23 mickey Exp $";
d62 1
@


1.10
log
@use sysctl to retreive msgbuf out of live system, keep the kvm iface, remove sgid
@
text
@d1 1
a1 1
/*	$OpenBSD: dmesg.c,v 1.9 2001/06/04 14:59:47 mickey Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: dmesg.c,v 1.9 2001/06/04 14:59:47 mickey Exp $";
d132 1
d161 1
@


1.9
log
@return from main() don't exit
@
text
@d1 1
a1 1
/*	$OpenBSD: dmesg.c,v 1.8 2000/02/22 19:27:38 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: dmesg.c,v 1.8 2000/02/22 19:27:38 deraadt Exp $";
d51 1
a51 1
#include <sys/cdefs.h>
d53 1
d84 1
a84 1
	struct msgbuf *bufp, cur;
a85 1
	kvm_t *kd;
d108 52
a159 3
	if (memf != NULL || nlistf != NULL) {
		setegid(getgid());
		setgid(getgid());
a161 25
	/* Read in kernel message buffer, do sanity checks. */
	if ((kd = kvm_open(nlistf, memf, NULL, O_RDONLY, "dmesg")) == NULL)
		return (1);

	setegid(getgid());
	setgid(getgid());

	if (kvm_nlist(kd, nl) == -1)
		errx(1, "kvm_nlist: %s", kvm_geterr(kd));
	if (nl[X_MSGBUF].n_type == 0)
		errx(1, "%s: msgbufp not found", nlistf ? nlistf : "namelist");
	if (KREAD(nl[X_MSGBUF].n_value, bufp))
		errx(1, "kvm_read: %s: (0x%lx)", kvm_geterr(kd),
		    nl[X_MSGBUF].n_value);
	if (KREAD((long)bufp, cur))
		errx(1, "kvm_read: %s (%0lx)", kvm_geterr(kd),
		    (unsigned long)bufp);
	if (cur.msg_magic != MSG_MAGIC)
		errx(1, "magic number incorrect");
	bufdata = malloc(cur.msg_bufs);
	if (bufdata == NULL)
		errx(1, "couldn't allocate space for buffer data");
	if (kvm_read(kd, (long)&bufp->msg_bufc, bufdata,
	    cur.msg_bufs) != cur.msg_bufs)
		errx(1, "kvm_read: %s", kvm_geterr(kd));
a163 2
	kvm_close(kd);

@


1.8
log
@enlarge msgbuf, somewhat line netbsd did
@
text
@d1 1
a1 1
/*	$OpenBSD: dmesg.c,v 1.7 1998/07/08 22:14:37 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: dmesg.c,v 1.7 1998/07/08 22:14:37 deraadt Exp $";
d115 1
a115 1
		exit (1);
d172 1
a172 1
	exit(0);
@


1.7
log
@whack kmem gid after kvm_openfiles()
@
text
@d1 1
a1 1
/*	$OpenBSD: dmesg.c,v 1.6 1998/07/05 18:45:17 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: dmesg.c,v 1.6 1998/07/05 18:45:17 deraadt Exp $";
d81 1
a81 1
	register int ch, newl, skip;
d84 1
a84 1
	char *memf, *nlistf;
a129 1
	kvm_close(kd);
d132 7
a138 1
	if (cur.msg_bufx >= MSG_BSIZE)
d140 1
d146 4
a149 5
	p = ep = cur.msg_bufc + (cur.msg_bufx - 1 + MSG_BSIZE) % MSG_BSIZE;
	newl = skip = 0;
	do {
		if (++p == cur.msg_bufc + MSG_BSIZE)
			p = cur.msg_bufc;
d169 1
a169 1
	} while (p != ep);
@


1.6
log
@split KREAD() calls
@
text
@d1 1
a1 1
/*	$OpenBSD: dmesg.c,v 1.5 1997/03/29 20:28:20 tholo Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: dmesg.c,v 1.5 1997/03/29 20:28:20 tholo Exp $";
d116 4
@


1.5
log
@Avoid infinite loops; from NetBSD PR 3285
@
text
@d1 1
a1 1
/*	$OpenBSD: dmesg.c,v 1.4 1997/01/15 23:41:10 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: dmesg.c,v 1.4 1997/01/15 23:41:10 millert Exp $";
d120 6
a125 2
	if (KREAD(nl[X_MSGBUF].n_value, bufp) || KREAD((long)bufp, cur))
		errx(1, "kvm_read: %s", kvm_geterr(kd));
@


1.4
log
@getopt(3) returns -1 when out of args, not EOF, whee!
@
text
@d1 1
a1 1
/*	$OpenBSD: dmesg.c,v 1.3 1996/12/22 03:00:49 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: dmesg.c,v 1.3 1996/12/22 03:00:49 deraadt Exp $";
d132 4
a135 4
	p = cur.msg_bufc + cur.msg_bufx;
	ep = cur.msg_bufc + cur.msg_bufx - 1;
	for (newl = skip = 0; p != ep; ++p) {
		if (p == cur.msg_bufc + MSG_BSIZE)
d156 1
a156 1
	}
@


1.3
log
@Deal with _POSIX_SAVED_IDS when relinquishing privileges
@
text
@d1 1
a1 1
/*	$OpenBSD: dmesg.c,v 1.2 1996/06/23 14:30:08 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: dmesg.c,v 1.2 1996/06/23 14:30:08 deraadt Exp $";
d89 1
a89 1
	while ((ch = getopt(argc, argv, "M:N:")) != EOF)
@


1.2
log
@update rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: dmesg.c,v 1.8 1995/03/18 14:54:49 cgd Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: dmesg.c,v 1.8 1995/03/18 14:54:49 cgd Exp $";
d108 2
a109 1
	if (memf != NULL || nlistf != NULL)
d111 1
@


1.1
log
@Initial revision
@
text
@d1 1
d47 1
a47 1
static char rcsid[] = "$NetBSD: dmesg.c,v 1.8 1995/03/18 14:54:49 cgd Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
