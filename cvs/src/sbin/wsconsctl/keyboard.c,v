head	1.13;
access;
symbols
	OPENBSD_6_2:1.13.0.10
	OPENBSD_6_2_BASE:1.13
	OPENBSD_6_1:1.13.0.8
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.4
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.12.0.12
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.4
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.8
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.6
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.2
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.11.0.2
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.10.0.8
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.6
	OPENBSD_5_0:1.10.0.4
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.2
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.9.0.2
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.6.0.8
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.4
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.2
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.5.0.22
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.20
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.18
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.16
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.14
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.12
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.10
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.8
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.6
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.4
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.3.0.4
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.1.0.4
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.2
	OPENBSD_2_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.13
date	2015.12.12.12.31.37;	author jung;	state Exp;
branches;
next	1.12;
commitid	vONlvARvedoqJwDy;

1.12
date	2013.03.21.06.04.05;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2012.08.08.16.44.07;	author shadchin;	state Exp;
branches;
next	1.10;

1.10
date	2010.08.20.00.20.55;	author fgsch;	state Exp;
branches;
next	1.9;

1.9
date	2010.07.01.16.47.58;	author maja;	state Exp;
branches;
next	1.8;

1.8
date	2010.06.28.20.40.39;	author maja;	state Exp;
branches;
next	1.7;

1.7
date	2009.07.15.20.32.28;	author martynas;	state Exp;
branches;
next	1.6;

1.6
date	2008.06.26.05.42.06;	author ray;	state Exp;
branches;
next	1.5;

1.5
date	2003.03.07.00.04.21;	author markus;	state Exp;
branches;
next	1.4;

1.4
date	2002.12.11.18.27.19;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.24.17.45.59;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.30.02.12.57;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	2000.07.01.23.52.45;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.13
log
@add keyboard backlight variable

tested by Bryan Vyhmeister, krw, tb, and myself

ok jcs krw tb
@
text
@/*	$OpenBSD: keyboard.c,v 1.12 2013/03/21 06:04:05 miod Exp $	*/
/*	$NetBSD: keyboard.c 1.1 1998/12/28 14:01:17 hannken Exp $ */

/*-
 * Copyright (c) 1998 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Juergen Hannken-Illjes.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/ioctl.h>
#include <sys/time.h>
#include <dev/wscons/wsksymdef.h>
#include <dev/wscons/wsconsio.h>
#include <err.h>
#include <errno.h>
#include <fcntl.h>
#include <stdio.h>
#include "wsconsctl.h"

static u_int kbtype;
static struct wskbd_bell_data bell;
static struct wskbd_bell_data dfbell;
static struct wscons_keymap mapdata[KS_NUMKEYCODES];
struct wskbd_map_data kbmap = { KS_NUMKEYCODES, mapdata };	/* used in map_parse.y
							   and in util.c */
static struct wskbd_keyrepeat_data repeat;
static struct wskbd_keyrepeat_data dfrepeat;
static int ledstate;
static kbd_t kbdencoding;
static struct field_pc backlight;

struct field keyboard_field_tab[] = {
    { "type",			&kbtype,	FMT_KBDTYPE,	FLG_RDONLY },
    { "bell.pitch",		&bell.pitch,	FMT_UINT,	FLG_MODIFY },
    { "bell.period",		&bell.period,	FMT_UINT,	FLG_MODIFY },
    { "bell.volume",		&bell.volume,	FMT_UINT,	FLG_MODIFY },
    { "bell.pitch.default",	&dfbell.pitch,	FMT_UINT,	FLG_MODIFY },
    { "bell.period.default",	&dfbell.period,	FMT_UINT,	FLG_MODIFY },
    { "bell.volume.default",	&dfbell.volume,	FMT_UINT,	FLG_MODIFY },
    { "map",			&kbmap,		FMT_KBMAP,	FLG_MODIFY|FLG_NOAUTO },
    { "repeat.del1",		&repeat.del1,	FMT_UINT,	FLG_MODIFY },
    { "repeat.deln",		&repeat.delN,	FMT_UINT,	FLG_MODIFY },
    { "repeat.del1.default",	&dfrepeat.del1,	FMT_UINT,	FLG_MODIFY },
    { "repeat.deln.default",	&dfrepeat.delN,	FMT_UINT,	FLG_MODIFY },
    { "ledstate",		&ledstate,	FMT_UINT,	0 },
    { "encoding",		&kbdencoding,	FMT_KBDENC,	FLG_MODIFY },
    { "backlight",		&backlight,	FMT_PC,		FLG_MODIFY|FLG_INIT },
    { NULL }
};

void
keyboard_get_values(int fd)
{
	struct wskbd_backlight kbl;
	struct field *pf;

	if (field_by_value(keyboard_field_tab, &kbtype)->flags & FLG_GET)
		if (ioctl(fd, WSKBDIO_GTYPE, &kbtype) < 0)
			warn("WSKBDIO_GTYPE");

	bell.which = 0;
	if (field_by_value(keyboard_field_tab, &bell.pitch)->flags & FLG_GET)
		bell.which |= WSKBD_BELL_DOPITCH;
	if (field_by_value(keyboard_field_tab, &bell.period)->flags & FLG_GET)
		bell.which |= WSKBD_BELL_DOPERIOD;
	if (field_by_value(keyboard_field_tab, &bell.volume)->flags & FLG_GET)
		bell.which |= WSKBD_BELL_DOVOLUME;
	if (bell.which != 0 && ioctl(fd, WSKBDIO_GETBELL, &bell) < 0)
		warn("WSKBDIO_GETBELL");

	dfbell.which = 0;
	if (field_by_value(keyboard_field_tab, &dfbell.pitch)->flags & FLG_GET)
		dfbell.which |= WSKBD_BELL_DOPITCH;
	if (field_by_value(keyboard_field_tab, &dfbell.period)->flags & FLG_GET)
		dfbell.which |= WSKBD_BELL_DOPERIOD;
	if (field_by_value(keyboard_field_tab, &dfbell.volume)->flags & FLG_GET)
		dfbell.which |= WSKBD_BELL_DOVOLUME;
	if (dfbell.which != 0 &&
	    ioctl(fd, WSKBDIO_GETDEFAULTBELL, &dfbell) < 0)
		warn("WSKBDIO_GETDEFAULTBELL");

	if (field_by_value(keyboard_field_tab, &kbmap)->flags & FLG_GET) {
		kbmap.maplen = KS_NUMKEYCODES;
		if (ioctl(fd, WSKBDIO_GETMAP, &kbmap) < 0)
			warn("WSKBDIO_GETMAP");
		if (ioctl(fd, WSKBDIO_GETENCODING, &kbdencoding) < 0)
			warn("WSKBDIO_GETENCODING");
		ksymenc(kbdencoding);
	}

	repeat.which = 0;
	if (field_by_value(keyboard_field_tab, &repeat.del1)->flags & FLG_GET)
		repeat.which |= WSKBD_KEYREPEAT_DODEL1;
	if (field_by_value(keyboard_field_tab, &repeat.delN)->flags & FLG_GET)
		repeat.which |= WSKBD_KEYREPEAT_DODELN;
	if (repeat.which != 0 &&
	    ioctl(fd, WSKBDIO_GETKEYREPEAT, &repeat) < 0)
		warn("WSKBDIO_GETKEYREPEAT");

	dfrepeat.which = 0;
	if (field_by_value(keyboard_field_tab, &dfrepeat.del1)->flags & FLG_GET)
		dfrepeat.which |= WSKBD_KEYREPEAT_DODEL1;
	if (field_by_value(keyboard_field_tab, &dfrepeat.delN)->flags & FLG_GET)
		dfrepeat.which |= WSKBD_KEYREPEAT_DODELN;
	if (dfrepeat.which != 0 &&
	    ioctl(fd, WSKBDIO_GETDEFAULTKEYREPEAT, &dfrepeat) < 0)
		warn("WSKBDIO_GETDEFAULTKEYREPEAT");

	if (field_by_value(keyboard_field_tab, &ledstate)->flags & FLG_GET)
		if (ioctl(fd, WSKBDIO_GETLEDS, &ledstate) < 0)
			warn("WSKBDIO_GETLEDS");

	if (field_by_value(keyboard_field_tab, &kbdencoding)->flags & FLG_GET)
		if (ioctl(fd, WSKBDIO_GETENCODING, &kbdencoding) < 0)
			warn("WSKBDIO_GETENCODING");

	pf = field_by_value(keyboard_field_tab, &backlight);
	if (pf->flags & FLG_GET && !(pf->flags & FLG_DEAD)) {
		errno = ENOTTY;
		if (ioctl(fd, WSKBDIO_GETBACKLIGHT, &kbl) < 0) {
			if (errno == ENOTTY)
				pf->flags |= FLG_DEAD;
			else
				warn("WSKBDIO_GETBACKLIGHT");
		} else {
			backlight.min = kbl.min;
			backlight.cur = kbl.curval;
			backlight.max = kbl.max;
		}
	}
}

int
keyboard_put_values(int fd)
{
	struct wskbd_backlight kbl;
	struct field *pf;

	bell.which = 0;
	if (field_by_value(keyboard_field_tab, &bell.pitch)->flags & FLG_SET)
		bell.which |= WSKBD_BELL_DOPITCH;
	if (field_by_value(keyboard_field_tab, &bell.period)->flags & FLG_SET)
		bell.which |= WSKBD_BELL_DOPERIOD;
	if (field_by_value(keyboard_field_tab, &bell.volume)->flags & FLG_SET)
		bell.which |= WSKBD_BELL_DOVOLUME;
	if (bell.which != 0 && ioctl(fd, WSKBDIO_SETBELL, &bell) < 0) {
		warn("WSKBDIO_SETBELL");
		return 1;
	}

	dfbell.which = 0;
	if (field_by_value(keyboard_field_tab, &dfbell.pitch)->flags & FLG_SET)
		dfbell.which |= WSKBD_BELL_DOPITCH;
	if (field_by_value(keyboard_field_tab, &dfbell.period)->flags & FLG_SET)
		dfbell.which |= WSKBD_BELL_DOPERIOD;
	if (field_by_value(keyboard_field_tab, &dfbell.volume)->flags & FLG_SET)
		dfbell.which |= WSKBD_BELL_DOVOLUME;
	if (dfbell.which != 0 &&
	    ioctl(fd, WSKBDIO_SETDEFAULTBELL, &dfbell) < 0) {
		warn("WSKBDIO_SETDEFAULTBELL");
		return 1;
	}

	if (field_by_value(keyboard_field_tab, &kbmap)->flags & FLG_SET) {
		if (ioctl(fd, WSKBDIO_SETMAP, &kbmap) < 0) {
			warn("WSKBDIO_SETMAP");
			return 1;
		}
	}

	repeat.which = 0;
	if (field_by_value(keyboard_field_tab, &repeat.del1)->flags & FLG_SET)
		repeat.which |= WSKBD_KEYREPEAT_DODEL1;
	if (field_by_value(keyboard_field_tab, &repeat.delN)->flags & FLG_SET)
		repeat.which |= WSKBD_KEYREPEAT_DODELN;
	if (repeat.which != 0 &&
	    ioctl(fd, WSKBDIO_SETKEYREPEAT, &repeat) < 0) {
		warn("WSKBDIO_SETKEYREPEAT");
		return 1;
	}

	dfrepeat.which = 0;
	if (field_by_value(keyboard_field_tab, &dfrepeat.del1)->flags & FLG_SET)
		dfrepeat.which |= WSKBD_KEYREPEAT_DODEL1;
	if (field_by_value(keyboard_field_tab, &dfrepeat.delN)->flags & FLG_SET)
		dfrepeat.which |= WSKBD_KEYREPEAT_DODELN;
	if (dfrepeat.which != 0 &&
	    ioctl(fd, WSKBDIO_SETDEFAULTKEYREPEAT, &dfrepeat) < 0) {
		warn("WSKBDIO_SETDEFAULTKEYREPEAT");
		return 1;
	}

	if (field_by_value(keyboard_field_tab, &ledstate)->flags & FLG_SET) {
		if (ioctl(fd, WSKBDIO_SETLEDS, &ledstate) < 0) {
			warn("WSKBDIO_SETLEDS");
			return 1;
		}
	}

	if (field_by_value(keyboard_field_tab, &kbdencoding)->flags & FLG_SET) {
		if (ioctl(fd, WSKBDIO_SETENCODING, &kbdencoding) < 0) {
			warn("WSKBDIO_SETENCODING");
			return 1;
		}
	}

	pf = field_by_value(keyboard_field_tab, &backlight);
	if (pf->flags & FLG_SET && !(pf->flags & FLG_DEAD)) {
		kbl.min = backlight.min;
		kbl.curval = backlight.cur;
		kbl.max = backlight.max;
		errno = ENOTTY;
		if (ioctl(fd, WSKBDIO_SETBACKLIGHT, &kbl) < 0) {
			if (errno == ENOTTY)
				pf->flags |= FLG_DEAD;
			else {
				warn("WSKBDIO_SETBACKLIGHT");
				return 1;
			}
		}
	}

	return 0;
}

char *
keyboard_next_device(int index)
{
	static char devname[20];

	snprintf(devname, sizeof(devname), "/dev/wskbd%d", index);
	return (devname);
}
@


1.12
log
@Correctly issue WSKBDIO_GETDEFAULTKEYREPEAT instead of WSKBDIO_GETKEYREPEAT
ioctl when getting the default repeat settings; bug report by ``Creamy'' on
tech@@
@
text
@d1 1
a1 1
/*	$OpenBSD: keyboard.c,v 1.11 2012/08/08 16:44:07 shadchin Exp $	*/
d53 1
d70 1
d77 3
d139 15
d159 3
d227 16
@


1.11
log
@fix type (part from NetBSD)

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: keyboard.c,v 1.10 2010/08/20 00:20:55 fgsch Exp $	*/
d124 2
a125 2
	    ioctl(fd, WSKBDIO_GETKEYREPEAT, &dfrepeat) < 0)
		warn("WSKBDIO_GETKEYREPEAT");
@


1.10
log
@Don't silently ignore errors if we cannot open the device. While I'm here
simplify the code and apply some style(9).
Discussed with and ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: keyboard.c,v 1.9 2010/07/01 16:47:58 maja Exp $	*/
d43 1
a43 1
static int kbtype;
d52 1
a52 1
static int kbdencoding;
@


1.9
log
@Learn wsconsctl to handle more than the first keyboard, mouse and display.
E.g. if we have a /dev/wskbd1 keyboard1 will show up when doing a -a.

wsconsctl keyboard1 will now show you all variables for keyboard1.

feedback and ok miod@@. -moj
@
text
@d1 1
a1 1
/*	$OpenBSD: keyboard.c,v 1.8 2010/06/28 20:40:39 maja Exp $	*/
d73 1
a73 1
keyboard_get_values(const char *pre, int fd)
d137 1
a137 1
keyboard_put_values(const char *pre, int fd)
d210 2
a211 2
int
keyboard_next_device(int *index)
d213 1
a213 4
	char devname[20];
	int fd;

	snprintf(devname, sizeof(devname), "/dev/wskbd%d", *index);
d215 2
a216 6
	if ((fd = open(devname, O_WRONLY)) < 0 &&
	    (fd = open(devname, O_RDONLY)) < 0) {
		if (errno != ENXIO)
			*index = -1;
	}
	return(fd);
@


1.8
log
@A long time ago when wsconsctl was written it expected that ksym was uniq.
That isn't the case. eg thorn, Cyrillic_CHE, L2_tcedilla, L5_scedilla and
L7_zcaron has the same (0xfe). So you have a 20% chance to get the right
output from wsconsctl.

Use the ksym name to decide which ksyms isn't Latin-1. Store that information
in the ksym tables. The use the keyboard encoding to make an educated guess
of which character to return.

Let say your encoding is pl. You have Latin-2 characters in the map.
Then check first for Latin-2 characters if none found try Latin-1.

ok miod@@

-moj
@
text
@d1 1
a1 1
/*	$OpenBSD: keyboard.c,v 1.7 2009/07/15 20:32:28 martynas Exp $	*/
d38 3
d208 16
@


1.7
log
@for rw query and print value that has actually been set in the
similar way that mixerctl does.  so that info for setting things
like brightness makes sense (since we scale, like, 8 values to
per-cent).  also, it consistifies get/put, shrinks code since we
don't need to do that in every single 'driver'.  ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: keyboard.c,v 1.6 2008/06/26 05:42:06 ray Exp $	*/
d101 3
@


1.6
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: keyboard.c,v 1.5 2003/03/07 00:04:21 markus Exp $	*/
d130 1
a130 1
void
d140 1
a140 1
	if (bell.which != 0 && ioctl(fd, WSKBDIO_SETBELL, &bell) < 0)
d142 1
a142 10
	else {
		if (bell.which & WSKBD_BELL_DOPITCH)
			pr_field(pre, field_by_value(keyboard_field_tab,
			    &bell.pitch), " -> ");
		if (bell.which & WSKBD_BELL_DOPERIOD)
			pr_field(pre, field_by_value(keyboard_field_tab,
			    &bell.period), " -> ");
		if (bell.which & WSKBD_BELL_DOVOLUME)
			pr_field(pre, field_by_value(keyboard_field_tab,
			    &bell.volume), " -> ");
d153 1
a153 1
	    ioctl(fd, WSKBDIO_SETDEFAULTBELL, &dfbell) < 0)
d155 1
a155 10
	else {
		if (dfbell.which & WSKBD_BELL_DOPITCH)
			pr_field(pre, field_by_value(keyboard_field_tab,
			    &dfbell.pitch), " -> ");
		if (dfbell.which & WSKBD_BELL_DOPERIOD)
			pr_field(pre, field_by_value(keyboard_field_tab,
			    &dfbell.period), " -> ");
		if (dfbell.which & WSKBD_BELL_DOVOLUME)
			pr_field(pre, field_by_value(keyboard_field_tab,
			    &dfbell.volume), " -> ");
d159 1
a159 1
		if (ioctl(fd, WSKBDIO_SETMAP, &kbmap) < 0)
d161 2
d171 1
a171 1
	    ioctl(fd, WSKBDIO_SETKEYREPEAT, &repeat) < 0)
d173 1
a173 7
	else {
		if (repeat.which & WSKBD_KEYREPEAT_DODEL1)
			pr_field(pre, field_by_value(keyboard_field_tab,
			    &repeat.del1), " -> ");
		if (repeat.which & WSKBD_KEYREPEAT_DODELN)
			pr_field(pre, field_by_value(keyboard_field_tab,
			    &repeat.delN), " -> ");
d182 1
a182 1
	    ioctl(fd, WSKBDIO_SETDEFAULTKEYREPEAT, &dfrepeat) < 0)
d184 1
a184 7
	else {
		if (dfrepeat.which &WSKBD_KEYREPEAT_DODEL1)
			pr_field(pre, field_by_value(keyboard_field_tab,
			    &dfrepeat.del1), " -> ");
		if (dfrepeat.which & WSKBD_KEYREPEAT_DODELN)
			pr_field(pre, field_by_value(keyboard_field_tab,
			    &dfrepeat.delN), " -> ");
d188 1
a188 1
		if (ioctl(fd, WSKBDIO_SETLEDS, &ledstate) < 0)
d190 1
a190 3
		else {
			pr_field(pre, field_by_value(keyboard_field_tab,
			    &ledstate), " -> ");
d195 1
a195 1
		if (ioctl(fd, WSKBDIO_SETENCODING, &kbdencoding) < 0)
d197 1
a197 3
		else {
			pr_field(pre, field_by_value(keyboard_field_tab,
			    &kbdencoding), " -> ");
d200 2
@


1.5
log
@don't print out the complete keyboard map when changed; ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: keyboard.c,v 1.4 2002/12/11 18:27:19 deraadt Exp $	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.4
log
@ansi
@
text
@d1 1
a1 1
/*	$OpenBSD: keyboard.c,v 1.3 2001/10/24 17:45:59 miod Exp $	*/
a185 4
		else {
			pr_field(pre, field_by_value(keyboard_field_tab,
			    &kbmap), " -> ");
		}
@


1.3
log
@- repair usage() output
- when changing display.foo settings, print "display.foo -> bar" like done
for mouse.* and keyboard.*
- use warn() over err() whenever possible and appropriate code path to display
as much as useful information as possible even if one ioctl fails. This is
especially useful to get the display.* settings via wsconsctl -a if your
mouse can't be probed, like on the iBook.

ok mcikye@@
@
text
@d1 1
a1 1
/*	$OpenBSD: keyboard.c,v 1.2 2001/06/30 02:12:57 mickey Exp $	*/
d77 1
a77 3
keyboard_get_values(pre, fd)
	const char *pre;
	int fd;
d138 1
a138 3
keyboard_put_values(pre, fd)
	const char *pre;
	int fd;
d151 2
a152 1
			pr_field(pre, field_by_value(keyboard_field_tab, &bell.pitch), " -> ");
d154 2
a155 1
			pr_field(pre, field_by_value(keyboard_field_tab, &bell.period), " -> ");
d157 2
a158 1
			pr_field(pre, field_by_value(keyboard_field_tab, &bell.volume), " -> ");
d173 2
a174 1
			pr_field(pre, field_by_value(keyboard_field_tab, &dfbell.pitch), " -> ");
d176 2
a177 1
			pr_field(pre, field_by_value(keyboard_field_tab, &dfbell.period), " -> ");
d179 2
a180 1
			pr_field(pre, field_by_value(keyboard_field_tab, &dfbell.volume), " -> ");
d187 2
a188 1
			pr_field(pre, field_by_value(keyboard_field_tab, &kbmap), " -> ");
d202 2
a203 1
			pr_field(pre, field_by_value(keyboard_field_tab, &repeat.del1), " -> ");
d205 2
a206 1
			pr_field(pre, field_by_value(keyboard_field_tab, &repeat.delN), " -> ");
d219 2
a220 1
			pr_field(pre, field_by_value(keyboard_field_tab, &dfrepeat.del1), " -> ");
d222 2
a223 1
			pr_field(pre, field_by_value(keyboard_field_tab, &dfrepeat.delN), " -> ");
d230 2
a231 1
			pr_field(pre, field_by_value(keyboard_field_tab, &ledstate), " -> ");
d239 2
a240 1
			pr_field(pre, field_by_value(keyboard_field_tab, &kbdencoding), " -> ");
@


1.2
log
@make it more sysctl-like, ommit -kmd switches.
no backwards compatibility keeped.
add ability to change screens from cmd line.
@
text
@d1 1
a1 1
/*	$OpenBSD: keyboard.c,v 1.1 2000/07/01 23:52:45 mickey Exp $	*/
d83 1
a83 1
			err(1, "WSKBDIO_GTYPE");
d93 1
a93 1
		err(1, "WSKBDIO_GETBELL");
d104 1
a104 1
		err(1, "WSKBDIO_GETDEFAULTBELL");
d109 1
a109 1
			err(1, "WSKBDIO_GETMAP");
d119 1
a119 1
		err(1, "WSKBDIO_GETKEYREPEAT");
d128 1
a128 1
		err(1, "WSKBDIO_GETKEYREPEAT");
d132 1
a132 1
			err(1, "WSKBDIO_GETLEDS");
d136 1
a136 1
			err(1, "WSKBDIO_GETENCODING");
d152 9
a160 7
		err(1, "WSKBDIO_SETBELL");
	if (bell.which & WSKBD_BELL_DOPITCH)
		pr_field(pre, field_by_value(keyboard_field_tab, &bell.pitch), " -> ");
	if (bell.which & WSKBD_BELL_DOPERIOD)
		pr_field(pre, field_by_value(keyboard_field_tab, &bell.period), " -> ");
	if (bell.which & WSKBD_BELL_DOVOLUME)
		pr_field(pre, field_by_value(keyboard_field_tab, &bell.volume), " -> ");
d171 9
a179 7
		err(1, "WSKBDIO_SETDEFAULTBELL");
	if (dfbell.which & WSKBD_BELL_DOPITCH)
		pr_field(pre, field_by_value(keyboard_field_tab, &dfbell.pitch), " -> ");
	if (dfbell.which & WSKBD_BELL_DOPERIOD)
		pr_field(pre, field_by_value(keyboard_field_tab, &dfbell.period), " -> ");
	if (dfbell.which & WSKBD_BELL_DOVOLUME)
		pr_field(pre, field_by_value(keyboard_field_tab, &dfbell.volume), " -> ");
d183 4
a186 2
			err(1, "WSKBDIO_SETMAP");
		pr_field(pre, field_by_value(keyboard_field_tab, &kbmap), " -> ");
d196 7
a202 5
		err(1, "WSKBDIO_SETKEYREPEAT");
	if (repeat.which & WSKBD_KEYREPEAT_DODEL1)
		pr_field(pre, field_by_value(keyboard_field_tab, &repeat.del1), " -> ");
	if (repeat.which & WSKBD_KEYREPEAT_DODELN)
		pr_field(pre, field_by_value(keyboard_field_tab, &repeat.delN), " -> ");
d211 7
a217 5
		err(1, "WSKBDIO_SETDEFAULTKEYREPEAT");
	if (dfrepeat.which &WSKBD_KEYREPEAT_DODEL1)
		pr_field(pre, field_by_value(keyboard_field_tab, &dfrepeat.del1), " -> ");
	if (dfrepeat.which & WSKBD_KEYREPEAT_DODELN)
		pr_field(pre, field_by_value(keyboard_field_tab, &dfrepeat.delN), " -> ");
d221 4
a224 2
			err(1, "WSKBDIO_SETLEDS");
		pr_field(pre, field_by_value(keyboard_field_tab, &ledstate), " -> ");
d229 4
a232 2
			err(1, "WSKBDIO_SETENCODING");
		pr_field(pre, field_by_value(keyboard_field_tab, &kbdencoding), " -> ");
@


1.1
log
@wscons control tool; initial import from newtbsd tree
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d73 1
a75 3
int keyboard_field_tab_len = sizeof(keyboard_field_tab)/
			      sizeof(keyboard_field_tab[0]);

d77 2
a78 1
keyboard_get_values(fd)
d81 1
a81 1
	if (field_by_value(&kbtype)->flags & FLG_GET)
d86 1
a86 1
	if (field_by_value(&bell.pitch)->flags & FLG_GET)
d88 1
a88 1
	if (field_by_value(&bell.period)->flags & FLG_GET)
d90 1
a90 1
	if (field_by_value(&bell.volume)->flags & FLG_GET)
d96 1
a96 1
	if (field_by_value(&dfbell.pitch)->flags & FLG_GET)
d98 1
a98 1
	if (field_by_value(&dfbell.period)->flags & FLG_GET)
d100 1
a100 1
	if (field_by_value(&dfbell.volume)->flags & FLG_GET)
d106 1
a106 1
	if (field_by_value(&kbmap)->flags & FLG_GET) {
d113 1
a113 1
	if (field_by_value(&repeat.del1)->flags & FLG_GET)
d115 1
a115 1
	if (field_by_value(&repeat.delN)->flags & FLG_GET)
d122 1
a122 1
	if (field_by_value(&dfrepeat.del1)->flags & FLG_GET)
d124 1
a124 1
	if (field_by_value(&dfrepeat.delN)->flags & FLG_GET)
d130 1
a130 1
	if (field_by_value(&ledstate)->flags & FLG_GET)
d134 1
a134 1
	if (field_by_value(&kbdencoding)->flags & FLG_GET)
d140 2
a141 1
keyboard_put_values(fd)
d145 1
a145 1
	if (field_by_value(&bell.pitch)->flags & FLG_SET)
d147 1
a147 1
	if (field_by_value(&bell.period)->flags & FLG_SET)
d149 1
a149 1
	if (field_by_value(&bell.volume)->flags & FLG_SET)
d154 1
a154 1
		pr_field(field_by_value(&bell.pitch), " -> ");
d156 1
a156 1
		pr_field(field_by_value(&bell.period), " -> ");
d158 1
a158 1
		pr_field(field_by_value(&bell.volume), " -> ");
d161 1
a161 1
	if (field_by_value(&dfbell.pitch)->flags & FLG_SET)
d163 1
a163 1
	if (field_by_value(&dfbell.period)->flags & FLG_SET)
d165 1
a165 1
	if (field_by_value(&dfbell.volume)->flags & FLG_SET)
d171 1
a171 1
		pr_field(field_by_value(&dfbell.pitch), " -> ");
d173 1
a173 1
		pr_field(field_by_value(&dfbell.period), " -> ");
d175 1
a175 1
		pr_field(field_by_value(&dfbell.volume), " -> ");
d177 1
a177 1
	if (field_by_value(&kbmap)->flags & FLG_SET) {
d180 1
a180 1
		pr_field(field_by_value(&kbmap), " -> ");
d184 1
a184 1
	if (field_by_value(&repeat.del1)->flags & FLG_SET)
d186 1
a186 1
	if (field_by_value(&repeat.delN)->flags & FLG_SET)
d192 1
a192 1
		pr_field(field_by_value(&repeat.del1), " -> ");
d194 1
a194 1
		pr_field(field_by_value(&repeat.delN), " -> ");
d197 1
a197 1
	if (field_by_value(&dfrepeat.del1)->flags & FLG_SET)
d199 1
a199 1
	if (field_by_value(&dfrepeat.delN)->flags & FLG_SET)
d205 1
a205 1
		pr_field(field_by_value(&dfrepeat.del1), " -> ");
d207 1
a207 1
		pr_field(field_by_value(&dfrepeat.delN), " -> ");
d209 1
a209 1
	if (field_by_value(&ledstate)->flags & FLG_SET) {
d212 1
a212 1
		pr_field(field_by_value(&ledstate), " -> ");
d215 1
a215 1
	if (field_by_value(&kbdencoding)->flags & FLG_SET) {
d218 1
a218 1
		pr_field(field_by_value(&kbdencoding), " -> ");
@

