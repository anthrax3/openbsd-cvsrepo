head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.30
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.26
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.22
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.24
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.16
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.20
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.18
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.14
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.12
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.10
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.8
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.4
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.2
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.0.38
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.40
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.36
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.34
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.32
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.30
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.28
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.26
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.24
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.22
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.20
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.18
	OPENBSD_3_6_BASE:1.1
	OPENBSD_3_5:1.1.0.16
	OPENBSD_3_5_BASE:1.1
	OPENBSD_3_4:1.1.0.14
	OPENBSD_3_4_BASE:1.1
	OPENBSD_3_3:1.1.0.12
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.10
	OPENBSD_3_2_BASE:1.1
	OPENBSD_3_1:1.1.0.8
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.6
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.4
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.2
	OPENBSD_2_8_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2010.06.28.20.40.39;	author maja;	state Exp;
branches;
next	1.1;

1.1
date	2000.07.01.23.52.45;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.2
log
@A long time ago when wsconsctl was written it expected that ksym was uniq.
That isn't the case. eg thorn, Cyrillic_CHE, L2_tcedilla, L5_scedilla and
L7_zcaron has the same (0xfe). So you have a 20% chance to get the right
output from wsconsctl.

Use the ksym name to decide which ksyms isn't Latin-1. Store that information
in the ksym tables. The use the keyboard encoding to make an educated guess
of which character to return.

Let say your encoding is pl. You have Latin-2 characters in the map.
Then check first for Latin-2 characters if none found try Latin-1.

ok miod@@

-moj
@
text
@#! /bin/sh
#
#	$OpenBSD: mkkeysym.sh,v 1.1 2000/07/01 23:52:45 mickey Exp $
#	$NetBSD: mkkeysym.sh 1.1 1998/12/28 14:01:17 hannken Exp $
#
#	Build a table of keysyms from a file describing keysyms as:
#
#	/*BEGINKEYSYMDECL*/
#	#define KS_name 0xval
#	...
#	/*ENDKEYSYMDECL*/
#

AWK=${AWK:-awk}

${AWK} '
BEGIN {
	in_decl = 0;
	printf("/* DO  NOT EDIT: AUTOMATICALLY GENERATED FROM '$1' */\n\n");
	printf("#define\tKEYSYM_ENC_ISO\t0\n");
	printf("#define\tKEYSYM_ENC_L2\t1\n");
	printf("#define\tKEYSYM_ENC_L5\t2\n");
	printf("#define\tKEYSYM_ENC_L7\t3\n");
	printf("#define\tKEYSYM_ENC_KOI\t4\n\n");
	printf("struct ksym {\n\tchar *name;\n\tint value;\n\tint enc;\n};\n\n");
	printf("struct ksym ksym_tab_by_name[] = {\n");
}

END {
	printf("};\n");
}

$1 == "/*BEGINKEYSYMDECL*/" {
	in_decl = 1;
}

$1 == "/*ENDKEYSYMDECL*/" {
	in_decl = 0;
}

$1 ~ /^#[ 	]*define/ && $2 ~ /^KS_/ && $3 ~ /^0x[0-9a-f]*/ {
	if (in_decl) {
		enc="KEYSYM_ENC_ISO"
		if ($2 ~ /^KS_L2_/) { enc="KEYSYM_ENC_L2" }
		if ($2 ~ /^KS_L5_/) { enc="KEYSYM_ENC_L5" }
		if ($2 ~ /^KS_L7_/) { enc="KEYSYM_ENC_L7" }
		if ($2 ~ /^KS_Cyrillic_/) { enc="KEYSYM_ENC_KOI" }
		printf("\t{ \"%s\", %s, %s },\n", substr($2, 4), $3, enc);
	}
}' $1
@


1.1
log
@wscons control tool; initial import from newtbsd tree
@
text
@d3 1
a3 1
#	$OpenBSD$
d20 6
a25 1
	printf("struct ksym {\n\tchar *name;\n\tint value;\n};\n\n");
d42 8
a49 2
	if (in_decl)
		printf("\t{ \"%s\", %s },\n", substr($2, 4), $3);
@

