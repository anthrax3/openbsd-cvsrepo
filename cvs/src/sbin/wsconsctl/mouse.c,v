head	1.15;
access;
symbols
	OPENBSD_6_2_BASE:1.15
	OPENBSD_6_1:1.13.0.20
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.16
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.12
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.14
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.6
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.10
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.8
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.4
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.2
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.12.0.2
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.6
	OPENBSD_5_0:1.11.0.4
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.2
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.10.0.2
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.7.0.8
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.4
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.2
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.6.0.4
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.2
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.5.0.18
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.16
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.14
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.12
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.10
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.8
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.6
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.4
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.1.0.4
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.2
	OPENBSD_2_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.15
date	2017.08.01.23.23.44;	author bru;	state Exp;
branches;
next	1.14;
commitid	FxgcLkZnSRoqEDkm;

1.14
date	2017.07.21.20.38.20;	author bru;	state Exp;
branches;
next	1.13;
commitid	ob8Bi51A764QwCzw;

1.13
date	2012.08.08.16.44.07;	author shadchin;	state Exp;
branches;
next	1.12;

1.12
date	2012.07.14.08.25.12;	author shadchin;	state Exp;
branches;
next	1.11;

1.11
date	2010.08.20.00.20.55;	author fgsch;	state Exp;
branches;
next	1.10;

1.10
date	2010.07.01.16.47.58;	author maja;	state Exp;
branches;
next	1.9;

1.9
date	2009.11.24.16.28.50;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2009.07.15.20.32.28;	author martynas;	state Exp;
branches;
next	1.7;

1.7
date	2008.06.26.05.42.06;	author ray;	state Exp;
branches;
next	1.6;

1.6
date	2007.05.08.20.51.58;	author robert;	state Exp;
branches;
next	1.5;

1.5
date	2002.12.11.18.27.19;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2001.10.24.17.45.59;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.01.10.33.10;	author hugh;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.30.02.12.57;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	2000.07.01.23.52.45;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Handle the flags of mousecfg fields correctly.
@
text
@/*	$OpenBSD: mouse.c,v 1.14 2017/07/21 20:38:20 bru Exp $	*/
/*	$NetBSD: mouse.c,v 1.3 1999/11/15 13:47:30 ad Exp $ */

/*-
 * Copyright (c) 1998 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Juergen Hannken-Illjes.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/ioctl.h>
#include <sys/time.h>
#include <dev/wscons/wsconsio.h>
#include <err.h>
#include <errno.h>
#include <fcntl.h>
#include <stdio.h>
#include "wsconsctl.h"
#include "mousecfg.h"

static u_int mstype;
static u_int resolution;
static u_int samplerate;
static int rawmode;

struct wsmouse_calibcoords wmcoords, wmcoords_save;

struct field mouse_field_tab[] = {
    { "resolution",		&resolution,	FMT_UINT,	FLG_WRONLY },
    { "samplerate",		&samplerate,	FMT_UINT,	FLG_WRONLY },
    { "type",			&mstype,	FMT_MSTYPE,	FLG_RDONLY },
    { "rawmode",		&rawmode,	FMT_UINT,	FLG_MODIFY|FLG_INIT},
    { "scale",			&wmcoords,	FMT_SCALE,	FLG_MODIFY|FLG_INIT},
    /* touchpad configuration (mousecfg): */
    { "tp.tapping",		&cfg_tapping,	FMT_CFG,	FLG_NORDBACK },
    { "tp.scaling",		&cfg_scaling,	FMT_CFG,	FLG_NORDBACK },
    { "tp.swapsides",		&cfg_swapsides,	FMT_CFG,	FLG_NORDBACK },
    { "tp.disable",		&cfg_disable,	FMT_CFG,	FLG_NORDBACK },
    { "tp.param",		&cfg_param,	FMT_CFG,	FLG_WRONLY },
    { NULL }
};

static int dev_index = -1;


void
mouse_init(int devfd, int devidx) {
	struct field *f;
	const char *errstr;
	int err;

	if (dev_index == devidx)
		return;

	if ((err = mousecfg_init(devfd, &errstr))) {
		devidx = -1;
		for (f = mouse_field_tab; f->name != NULL; f++) {
			if (f->format == FMT_CFG)
				f->flags |= FLG_DEAD;
		}
		if (errstr != NULL)
			warnx("mousecfg error: %s (%d)", errstr, err);
	} else {
		for (f = mouse_field_tab; f->name != NULL; f++) {
			if (f->format == FMT_CFG)
				f->flags &= ~FLG_DEAD;
		}
	}

	dev_index = devidx;
}

void
mouse_get_values(int fd)
{
	struct field *f;

	if (field_by_value(mouse_field_tab, &mstype)->flags & FLG_GET)
		if (ioctl(fd, WSMOUSEIO_GTYPE, &mstype) < 0)
			warn("WSMOUSEIO_GTYPE");

	if (field_by_value(mouse_field_tab, &rawmode)->flags & FLG_GET) {
		if (ioctl(fd, WSMOUSEIO_GCALIBCOORDS, &wmcoords) < 0) {
			if (errno == ENOTTY)
				field_by_value(mouse_field_tab,
				    &rawmode)->flags |= FLG_DEAD;
			else
				warn("WSMOUSEIO_GCALIBCOORDS");
		}
		rawmode = wmcoords.samplelen;
	}

	if (field_by_value(mouse_field_tab, &wmcoords)->flags & FLG_GET)
		if (ioctl(fd, WSMOUSEIO_GCALIBCOORDS, &wmcoords) < 0) {
			if (errno == ENOTTY)
				field_by_value(mouse_field_tab,
				    &wmcoords)->flags |= FLG_DEAD;
			else
				warn("WSMOUSEIO_GCALIBCOORDS");
	}

	for (f = mouse_field_tab; f->name != NULL; f++) {
		if (f->format != FMT_CFG || !(f->flags & FLG_GET))
			continue;
		if (f->valp == &cfg_param)
			continue;
		if (mousecfg_get_field((struct wsmouse_parameters *) f->valp)) {
			f->flags |= FLG_DEAD;
			warnx("mousecfg: invalid key in '%s'", f->name);
		}
	}
}

int
mouse_put_values(int fd)
{
	struct field *f;

	if (field_by_value(mouse_field_tab, &resolution)->flags & FLG_SET) {
		if (ioctl(fd, WSMOUSEIO_SRES, &resolution) < 0) {
			warn("WSMOUSEIO_SRES");
			return 1;
		}
	}
	if (field_by_value(mouse_field_tab, &samplerate)->flags & FLG_SET) {
		if (ioctl(fd, WSMOUSEIO_SRATE, &samplerate) < 0) {
			warn("WSMOUSEIO_SRATE");
			return 1;
		}
	}
	if (field_by_value(mouse_field_tab, &rawmode)->flags & FLG_SET) {
		wmcoords.samplelen = rawmode;
		if (ioctl(fd, WSMOUSEIO_SCALIBCOORDS, &wmcoords) < 0) {
			if (errno == ENOTTY) {
				field_by_value(mouse_field_tab,
				    &rawmode)->flags |= FLG_DEAD;
			} else {
				warn("WSMOUSEIO_SCALIBCOORDS");
				return 1;
			}
		}
	}
	if (field_by_value(mouse_field_tab, &wmcoords)->flags & FLG_SET) {
		if (ioctl(fd, WSMOUSEIO_GCALIBCOORDS, &wmcoords_save) < 0) {
			if (errno == ENOTTY)
				field_by_value(mouse_field_tab,
				    &wmcoords)->flags |= FLG_DEAD;
			else
				warn("WSMOUSEIO_GCALIBCOORDS");
		}
		wmcoords.samplelen = wmcoords_save.samplelen;
		if (ioctl(fd, WSMOUSEIO_SCALIBCOORDS, &wmcoords) < 0) {
			if (errno == ENOTTY) {
				field_by_value(mouse_field_tab,
				    &wmcoords)->flags |= FLG_DEAD;
			} else {
				warn("WSMOUSEIO_SCALIBCOORDS");
				return 1;
			}
		}
	}

	for (f = mouse_field_tab; f->name != NULL; f++) {
		if (f->format != FMT_CFG || !(f->flags & FLG_SET))
			continue;
		if (mousecfg_put_field(fd,
		    (struct wsmouse_parameters *) f->valp)) {
			warn("mousecfg error (%s)", f->name);
			return 1;
		}
	}

	return 0;
}

char *
mouse_next_device(int index)
{
	static char devname[20];

	snprintf(devname, sizeof(devname), "/dev/wsmouse%d", index);
	return (devname);
}
@


1.14
log
@Add fields for wsmouse/touchpad configuration.
@
text
@d1 1
a1 1
/*	$OpenBSD: mouse.c,v 1.13 2012/08/08 16:44:07 shadchin Exp $	*/
d85 1
a85 1
	} else if (dev_index > -1) {
@


1.13
log
@fix type (part from NetBSD)

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mouse.c,v 1.12 2012/07/14 08:25:12 shadchin Exp $	*/
d41 1
d56 6
d65 30
d98 2
d123 11
d139 2
d182 10
@


1.12
log
@zap whitespace

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mouse.c,v 1.11 2010/08/20 00:20:55 fgsch Exp $	*/
d42 3
a44 3
static int mstype;
static int resolution;
static int samplerate;
@


1.11
log
@Don't silently ignore errors if we cannot open the device. While I'm here
simplify the code and apply some style(9).
Discussed with and ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mouse.c,v 1.10 2010/07/01 16:47:58 maja Exp $	*/
d47 1
a47 1
struct wsmouse_calibcoords wmcoords, wmcoords_save; 
d64 2
a65 2
	
	if (field_by_value(mouse_field_tab, &rawmode)->flags & FLG_GET) { 
d83 1
a83 1
	}	
d101 1
a101 1
	if (field_by_value(mouse_field_tab, &rawmode)->flags & FLG_SET) { 
@


1.10
log
@Learn wsconsctl to handle more than the first keyboard, mouse and display.
E.g. if we have a /dev/wskbd1 keyboard1 will show up when doing a -a.

wsconsctl keyboard1 will now show you all variables for keyboard1.

feedback and ok miod@@. -moj
@
text
@d1 1
a1 1
/*	$OpenBSD: mouse.c,v 1.9 2009/11/24 16:28:50 matthieu Exp $	*/
d59 1
a59 1
mouse_get_values(const char *pre, int fd)
d87 1
a87 1
mouse_put_values(const char *pre, int fd)
d114 1
a114 1
		if (ioctl(fd, WSMOUSEIO_GCALIBCOORDS, &wmcoords_save) < 0) 
d120 1
d136 2
a137 2
int
mouse_next_device(int *index)
d139 1
a139 2
	char devname[20];
	int fd;
d141 2
a142 8
	snprintf(devname, sizeof(devname), "/dev/wsmouse%d", *index);

	if ((fd = open(devname, O_WRONLY)) < 0 &&
	    (fd = open(devname, O_RDONLY)) < 0) {
		if (errno != ENXIO)
			*index = -1;
	}
	return(fd);
@


1.9
log
@Preserve rawmode when setting scale. ok miod@@, oga@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: mouse.c,v 1.8 2009/07/15 20:32:28 martynas Exp $	*/
d38 2
d133 16
@


1.8
log
@for rw query and print value that has actually been set in the
similar way that mixerctl does.  so that info for setting things
like brightness makes sense (since we scale, like, 8 values to
per-cent).  also, it consistifies get/put, shrinks code since we
don't need to do that in every single 'driver'.  ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mouse.c,v 1.7 2008/06/26 05:42:06 ray Exp $	*/
d45 1
a45 1
struct wsmouse_calibcoords wmcoords; 
d112 7
@


1.7
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mouse.c,v 1.6 2007/05/08 20:51:58 robert Exp $	*/
d84 1
a84 1
void
d88 1
a88 1
		if (ioctl(fd, WSMOUSEIO_SRES, &resolution) < 0)
d90 1
a90 3
		else {
			pr_field(pre, field_by_value(mouse_field_tab,
			    &resolution), " -> ");
d94 1
a94 1
		if (ioctl(fd, WSMOUSEIO_SRATE, &samplerate) < 0)
d96 1
a96 3
		else {
			pr_field(pre, field_by_value(mouse_field_tab,
			    &samplerate), " -> ");
d105 1
a105 1
			} else
d107 2
a108 3
		} else {
			pr_field(pre, field_by_value(mouse_field_tab,
			    &rawmode), " -> ");
d116 1
a116 1
			} else
d118 2
a119 3
		} else {
			pr_field(pre, field_by_value(mouse_field_tab,
			    &wmcoords), " -> ");
d122 2
@


1.6
log
@Introduce the mouse.rawmode and mouse.scale fields for
touchscreen calibration via ioctls.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mouse.c,v 1.5 2002/12/11 18:27:19 deraadt Exp $	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.5
log
@ansi
@
text
@d1 1
a1 1
/*	$OpenBSD: mouse.c,v 1.4 2001/10/24 17:45:59 miod Exp $	*/
d44 1
d50 3
d58 2
d69 20
d108 25
@


1.4
log
@- repair usage() output
- when changing display.foo settings, print "display.foo -> bar" like done
for mouse.* and keyboard.*
- use warn() over err() whenever possible and appropriate code path to display
as much as useful information as possible even if one ioctl fails. This is
especially useful to get the display.* settings via wsconsctl -a if your
mouse can't be probed, like on the iBook.

ok mcikye@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mouse.c,v 1.3 2001/08/01 10:33:10 hugh Exp $	*/
d58 1
a58 3
mouse_get_values(pre, fd)
	const char *pre;
	int fd;
d66 1
a66 3
mouse_put_values(pre, fd)
	const char *pre;
	int fd;
d72 2
a73 1
			pr_field(pre, field_by_value(mouse_field_tab, &resolution), " -> ");
d80 2
a81 1
			pr_field(pre, field_by_value(mouse_field_tab, &samplerate), " -> ");
@


1.3
log
@Correct diagnostic string per PR 1981 by Kaspar Toomik.
@
text
@d1 1
a1 1
/*	$OpenBSD: mouse.c,v 1.2 2001/06/30 02:12:57 mickey Exp $	*/
d64 1
a64 1
			err(1, "WSMOUSEIO_GTYPE");
a71 2
	int tmp;

d73 5
a77 4
		tmp = resolution;
		if (ioctl(fd, WSMOUSEIO_SRES, &tmp) < 0)
			err(1, "WSMOUSEIO_SRES");
		pr_field(pre, field_by_value(mouse_field_tab, &resolution), " -> ");
d80 5
a84 4
		tmp = samplerate;
		if (ioctl(fd, WSMOUSEIO_SRATE, &tmp) < 0)
			err(1, "WSMOUSEIO_SRATE");
		pr_field(pre, field_by_value(mouse_field_tab, &tmp), " -> ");
@


1.2
log
@make it more sysctl-like, ommit -kmd switches.
no backwards compatibility keeped.
add ability to change screens from cmd line.
@
text
@d1 1
a1 1
/*	$OpenBSD: mouse.c,v 1.1 2000/07/01 23:52:45 mickey Exp $	*/
d83 1
a83 1
			err(1, "WSMOUSEIO_SRES");
@


1.1
log
@wscons control tool; initial import from newtbsd tree
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d54 1
a56 3
int mouse_field_tab_len = sizeof(mouse_field_tab)/
			   sizeof(mouse_field_tab[0]);

d58 2
a59 1
mouse_get_values(fd)
d62 1
a62 1
	if (field_by_value(&mstype)->flags & FLG_GET)
d68 2
a69 1
mouse_put_values(fd)
d74 1
a74 1
	if (field_by_value(&resolution)->flags & FLG_SET) {
d78 1
a78 1
		pr_field(field_by_value(&resolution), " -> ");
d80 1
a80 1
	if (field_by_value(&samplerate)->flags & FLG_SET) {
d84 1
a84 1
		pr_field(field_by_value(&tmp), " -> ");
@

