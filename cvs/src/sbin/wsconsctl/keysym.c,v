head	1.8;
access;
symbols
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.8
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.4
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.6
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.7.0.12
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.10
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.6
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.4
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.2
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.8
	OPENBSD_5_0:1.6.0.6
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.4
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.2
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.5.0.6
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.8
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.4
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.2
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.4.0.20
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.18
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.16
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.14
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.12
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.10
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.8
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.2.0.4
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.1.0.6
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.4
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.2
	OPENBSD_2_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.02.15.01.56.16;	author tedu;	state Exp;
branches;
next	1.7;
commitid	oXezhyRmBkTUvUsb;

1.7
date	2012.07.14.08.25.12;	author shadchin;	state Exp;
branches;
next	1.6;

1.6
date	2010.06.28.20.40.39;	author maja;	state Exp;
branches;
next	1.5;

1.5
date	2008.06.26.05.42.06;	author ray;	state Exp;
branches;
next	1.4;

1.4
date	2003.07.10.00.00.58;	author david;	state Exp;
branches;
next	1.3;

1.3
date	2002.12.11.18.27.19;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2002.02.16.21.27.38;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2000.07.01.23.52.45;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.8
log
@These functions turned up in my grep for bcmp. There are already perfectly
good cmp functions written for qsort, but then different versions were written
which (ab)use the fact that bsearch doesn't strictly require the key type to
be the same as the element type. Nevertheless, I think it's clearer and
cleaner to create a complete key struct and search with that. As a bonus, we
don't need two different compare functions just to compare with two different
encoding values.
ok millert
@
text
@/*	$OpenBSD: keysym.c,v 1.7 2012/07/14 08:25:12 shadchin Exp $	*/
/*	$NetBSD: keysym.c,v 1.3 1999/02/08 11:08:23 hannken Exp $ */

/*-
 * Copyright (c) 1998 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Juergen Hannken-Illjes.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <dev/wscons/wsksymdef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "keysym.h"
#include "wsconsctl.h"

#define NUMKSYMS	(sizeof(ksym_tab_by_name)/sizeof(ksym_tab_by_name[0]))

static int first_time = 1;
static struct ksym ksym_tab_by_ksym[NUMKSYMS];
static int encoding = KEYSYM_ENC_ISO;

/* copied from dev/wscons/wskbdutil.c ... */

static const u_char latin1_to_upper[256] = {
/*      0  8  1  9  2  a  3  b  4  c  5  d  6  e  7  f               */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,		/* 0 */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,		/* 0 */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,		/* 1 */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,		/* 1 */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,		/* 2 */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,		/* 2 */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,		/* 3 */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,		/* 3 */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,		/* 4 */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,		/* 4 */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,		/* 5 */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,		/* 5 */
	0x00,  'A',  'B',  'C',  'D',  'E',  'F',  'G',		/* 6 */
	 'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',		/* 6 */
	 'P',  'Q',  'R',  'S',  'T',  'U',  'V',  'W',		/* 7 */
	 'X',  'Y',  'Z', 0x00, 0x00, 0x00, 0x00, 0x00,		/* 7 */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,		/* 8 */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,		/* 8 */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,		/* 9 */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,		/* 9 */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,		/* a */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,		/* a */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,		/* b */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,		/* b */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,		/* c */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,		/* c */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,		/* d */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,		/* d */
	0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,		/* e */
	0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,		/* e */
	0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0x00,		/* f */
	0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0x00,		/* f */
};

static void sort_ksym_tab(void);

static int
cmp_name(const void *a, const void *b)
{
	return(strcmp(((struct ksym *) a)->name, ((struct ksym *) b)->name));
}

static int
cmp_ksym(const void *a, const void *b)
{
	int i;

	i=((struct ksym *) b)->value - ((struct ksym *) a)->value;
	if (i == 0) {
		i=((struct ksym *) a)->enc - ((struct ksym *) b)->enc;
	}
	return(i);
}

static void
sort_ksym_tab(void)
{
	int i;

	for (i = 0; i < NUMKSYMS; i++)
		ksym_tab_by_ksym[i] = ksym_tab_by_name[i];

	qsort(ksym_tab_by_name, NUMKSYMS, sizeof(struct ksym), cmp_name);
	qsort(ksym_tab_by_ksym, NUMKSYMS, sizeof(struct ksym), cmp_ksym);

	first_time = 0;
}

char *
ksym2name(int k)
{
	static char tmp[20];
	struct ksym *r;
	struct ksym key;

	if (first_time)
		sort_ksym_tab();

	key.value = k;
	key.enc = encoding;
	r = bsearch(&key, ksym_tab_by_ksym,
		    NUMKSYMS, sizeof(struct ksym), cmp_ksym);

	if (r == NULL) {
		key.enc = KEYSYM_ENC_ISO;
		r = bsearch(&key, ksym_tab_by_ksym,
			    NUMKSYMS, sizeof(struct ksym), cmp_ksym);
	}

	if (r != NULL)
		return(r->name);
	else {
		snprintf(tmp, sizeof(tmp), "unknown_%d", k);
		return(tmp);
	}
}

int
name2ksym(char *n)
{
	int res;
	struct ksym *r;
	struct ksym key;

	if (first_time)
		sort_ksym_tab();

	key.name = n;
	r = bsearch(&key, ksym_tab_by_name,
		    NUMKSYMS, sizeof(struct ksym), cmp_name);

	if (r != NULL)
		return(r->value);
	else if (sscanf(n, "unknown_%d", &res) == 1)
		return(res);
	else
		return(-1);
}

void
ksymenc(int enc)
{
	switch(KB_ENCODING(enc)) {
	case KB_HU:
	case KB_PL:
	case KB_SI:
		encoding=KEYSYM_ENC_L2;
		break;
	case KB_TR:
		encoding=KEYSYM_ENC_L5;
		break;
	case KB_LT:
	case KB_LV:
		encoding=KEYSYM_ENC_L7;
		break;
	case KB_RU:
	case KB_UA:
		encoding=KEYSYM_ENC_KOI;
		break;
	default:
		encoding=KEYSYM_ENC_ISO;
		break;
	}
}

keysym_t
ksym_upcase(keysym_t ksym)
{
	if (ksym >= KS_f1 && ksym <= KS_f20)
		return(KS_F1 - KS_f1 + ksym);

	if (KS_GROUP(ksym) == KS_GROUP_Ascii && ksym <= 0xff &&
	    latin1_to_upper[ksym] != 0x00)
		return(latin1_to_upper[ksym]);

	return(ksym);
}
@


1.7
log
@zap whitespace

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: keysym.c,v 1.6 2010/06/28 20:40:39 maja Exp $	*/
a84 6
static int qcmp_name(const void *, const void *);
static int qcmp_ksym(const void *, const void *);
static int bcmp_name(const void *, const void *);
static int bcmp_ksym(const void *, const void *);
static int bcmp_ksym_enc(const void *, const void *);

d88 1
a88 1
qcmp_name(const void *a, const void *b)
d94 1
a94 1
qcmp_ksym(const void *a, const void *b)
a104 30
static int
bcmp_name(const void *a, const void *b)
{
	return(strcmp((char *) a, ((struct ksym *) b)->name));
}

static int
bcmp_ksym(const void *a, const void *b)
{
	int i;

	i=((struct ksym *) b)->value - *((int *) a);
	if (i == 0) {
		i=KEYSYM_ENC_ISO - ((struct ksym *) b)->enc;
	}
	return(i);
}

static int
bcmp_ksym_enc(const void *a, const void *b)
{
	int i;

	i=((struct ksym *) b)->value - *((int *) a);
	if (i == 0) {
		i=encoding - ((struct ksym *) b)->enc;
	}
	return(i);
}

d113 2
a114 2
	qsort(ksym_tab_by_name, NUMKSYMS, sizeof(struct ksym), qcmp_name);
	qsort(ksym_tab_by_ksym, NUMKSYMS, sizeof(struct ksym), qcmp_ksym);
d124 1
d129 4
a132 2
	r = bsearch(&k, ksym_tab_by_ksym,
		    NUMKSYMS, sizeof(struct ksym), bcmp_ksym_enc);
d135 3
a137 2
		r = bsearch(&k, ksym_tab_by_ksym,
			    NUMKSYMS, sizeof(struct ksym), bcmp_ksym);
d153 1
d158 3
a160 2
	r = bsearch(n, ksym_tab_by_name,
		    NUMKSYMS, sizeof(struct ksym), bcmp_name);
@


1.6
log
@A long time ago when wsconsctl was written it expected that ksym was uniq.
That isn't the case. eg thorn, Cyrillic_CHE, L2_tcedilla, L5_scedilla and
L7_zcaron has the same (0xfe). So you have a 20% chance to get the right
output from wsconsctl.

Use the ksym name to decide which ksyms isn't Latin-1. Store that information
in the ksym tables. The use the keyboard encoding to make an educated guess
of which character to return.

Let say your encoding is pl. You have Latin-2 characters in the map.
Then check first for Latin-2 characters if none found try Latin-1.

ok miod@@

-moj
@
text
@d1 1
a1 1
/*	$OpenBSD: keysym.c,v 1.5 2008/06/26 05:42:06 ray Exp $	*/
d163 1
a163 1
	
@


1.5
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: keysym.c,v 1.4 2003/07/10 00:00:58 david Exp $	*/
d45 1
d89 1
d102 7
a108 1
	return(((struct ksym *) b)->value - ((struct ksym *) a)->value);
d120 19
a138 1
	return(((struct ksym *) b)->value - *((int *) a));
d163 3
d167 4
a170 2
	r = bsearch(&k, ksym_tab_by_ksym,
		    NUMKSYMS, sizeof(struct ksym), bcmp_ksym);
d198 26
@


1.4
log
@add missing includes
ok deraadt@@ millert@@ tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: keysym.c,v 1.3 2002/12/11 18:27:19 deraadt Exp $	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.3
log
@ansi
@
text
@d1 1
a1 1
/*	$OpenBSD: keysym.c,v 1.2 2002/02/16 21:27:38 millert Exp $	*/
d43 1
@


1.2
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: keysym.c,v 1.1 2000/07/01 23:52:45 mickey Exp $	*/
d98 1
a98 3
qcmp_name(a, b)
	const void *a;
	const void *b;
d104 1
a104 3
qcmp_ksym(a, b)
	const void *a;
	const void *b;
d110 1
a110 3
bcmp_name(a, b)
	const void *a;
	const void *b;
d116 1
a116 3
bcmp_ksym(a, b)
	const void *a;
	const void *b;
d122 1
a122 1
sort_ksym_tab()
d136 1
a136 2
ksym2name(k)
	int k;
d156 1
a156 2
name2ksym(n)
	char *n;
d176 1
a176 2
ksym_upcase(ksym)
	keysym_t ksym;
@


1.1
log
@wscons control tool; initial import from newtbsd tree
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d90 4
a93 4
static int qcmp_name __P((const void *, const void *));
static int qcmp_ksym __P((const void *, const void *));
static int bcmp_name __P((const void *, const void *));
static int bcmp_ksym __P((const void *, const void *));
d95 1
a95 1
static void sort_ksym_tab __P((void));
@

