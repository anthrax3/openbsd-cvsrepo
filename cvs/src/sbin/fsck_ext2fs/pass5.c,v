head	1.18;
access;
symbols
	OPENBSD_6_2_BASE:1.18
	OPENBSD_6_1:1.18.0.12
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.18.0.8
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.4
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.18.0.6
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.2
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.17.0.4
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.16.0.6
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.2
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.15.0.8
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.6
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.4
	OPENBSD_5_0:1.15.0.2
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.13.0.20
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.18
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.14
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.16
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.12
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.10
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.8
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.6
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.4
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.2
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.12.0.12
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.10
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.8
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.12.0.6
	OPENBSD_3_6_BASE:1.12
	OPENBSD_3_5:1.12.0.4
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.12.0.2
	OPENBSD_3_4_BASE:1.12
	OPENBSD_3_3:1.10.0.4
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.2
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.5.0.4
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.4.0.10
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.8
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.6
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	R19970424:1.1.1.1
	BOUYER:1.1.1;
locks; strict;
comment	@ * @;


1.18
date	2015.01.16.06.39.57;	author deraadt;	state Exp;
branches;
next	1.17;
commitid	Uu5nFG3wCl0LACBb;

1.17
date	2014.07.13.16.08.53;	author pelikan;	state Exp;
branches;
next	1.16;
commitid	tQBfngCdLJGooLWH;

1.16
date	2013.04.24.13.46.27;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2011.04.18.03.58.21;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2011.03.12.17.50.47;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2006.03.20.21.35.37;	author dhill;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.11.06.22.13;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.02.20.06.15;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2002.06.09.08.13.05;	author todd;	state Exp;
branches;
next	1.9;

1.9
date	2002.02.16.21.27.34;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2001.09.18.17.43.15;	author art;	state Exp;
branches;
next	1.7;

1.7
date	2001.09.18.03.24.09;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2001.01.31.22.31.11;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2000.04.26.23.26.06;	author jasoni;	state Exp;
branches;
next	1.4;

1.4
date	97.06.14.05.04.12;	author downsj;	state Exp;
branches;
next	1.3;

1.3
date	97.06.14.04.16.58;	author downsj;	state Exp;
branches;
next	1.2;

1.2
date	97.06.14.04.06.31;	author downsj;	state Exp;
branches;
next	1.1;

1.1
date	97.05.30.04.33.54;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.05.30.04.33.54;	author downsj;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@/*	$OpenBSD: pass5.c,v 1.17 2014/07/13 16:08:53 pelikan Exp $	*/
/*	$NetBSD: pass5.c,v 1.7 2000/01/28 16:01:46 bouyer Exp $ */

/*
 * Copyright (c) 1997 Manuel Bouyer.
 * Copyright (c) 1980, 1986, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/param.h>	/* setbit isset */
#include <sys/time.h>
#include <ufs/ufs/dinode.h>
#include <ufs/ext2fs/ext2fs_dinode.h>
#include <ufs/ext2fs/ext2fs.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>

#include "fsutil.h"
#include "fsck.h"
#include "extern.h"


void print_bmap(u_char *,u_int32_t);

void
pass5(void)
{
	int c;
	struct m_ext2fs *fs = &sblock;
	daddr32_t dbase, dmax;
	daddr32_t d;
	long i, j;
	struct inodesc idesc[3];
	struct bufarea *ino_bitmap = NULL, *blk_bitmap = NULL;
	char *ibmap, *bbmap;
	u_int32_t cs_ndir, cs_nbfree, cs_nifree;
	char msg[255];

	cs_ndir = 0;
	cs_nbfree = 0;
	cs_nifree = 0;

	ibmap = malloc(fs->e2fs_bsize);
	bbmap = malloc(fs->e2fs_bsize);
	if (ibmap == NULL || bbmap == NULL) {
		errexit("out of memory\n");
	}

	for (c = 0; c < fs->e2fs_ncg; c++) {
		u_int32_t nbfree = 0;
		u_int32_t nifree = 0;
		u_int32_t ndirs = 0;

		nbfree = 0;
		nifree = fs->e2fs.e2fs_ipg;
		ndirs = 0;

		if (blk_bitmap == NULL) {
			blk_bitmap = getdatablk(letoh32(fs->e2fs_gd[c].ext2bgd_b_bitmap),
				fs->e2fs_bsize);
		} else {
			getblk(blk_bitmap, letoh32(fs->e2fs_gd[c].ext2bgd_b_bitmap),
				fs->e2fs_bsize);
		}
		if (ino_bitmap == NULL) {
			ino_bitmap = getdatablk(letoh32(fs->e2fs_gd[c].ext2bgd_i_bitmap),
				fs->e2fs_bsize);
		} else {
			getblk(ino_bitmap, letoh32(fs->e2fs_gd[c].ext2bgd_i_bitmap),
				fs->e2fs_bsize);
		}
		memset(bbmap, 0, fs->e2fs_bsize);
		memset(ibmap, 0, fs->e2fs_bsize);
		memset(&idesc[0], 0, sizeof idesc);
		for (i = 0; i < 3; i++) {
			idesc[i].id_type = ADDR;
		}

		j = fs->e2fs.e2fs_ipg * c + 1;

		for (i = 0; i < fs->e2fs.e2fs_ipg; j++, i++) {
			if ((j < EXT2_FIRSTINO) && (j != EXT2_ROOTINO)) {
				setbit(ibmap, i);
				nifree--;
				continue;
			}
			if (j > fs->e2fs.e2fs_icount) {
				setbit(ibmap, i);
				continue;
			}
			switch (statemap[j]) {

			case USTATE:
				break;

			case DSTATE:
			case DCLEAR:
			case DFOUND:
				ndirs++;
				/* fall through */

			case FSTATE:
			case FCLEAR:
				nifree--;
				setbit(ibmap, i);
				break;

			default:
				errexit("BAD STATE %d FOR INODE I=%llu\n",
				    statemap[j], (unsigned long long)j);
			}
		}

		/* fill in unused par of the inode map */
		for (i = fs->e2fs.e2fs_ipg / NBBY; i < fs->e2fs_bsize; i++)
			ibmap[i] = 0xff;

		dbase = c * sblock.e2fs.e2fs_bpg +
		    sblock.e2fs.e2fs_first_dblock;
		dmax = (c+1) * sblock.e2fs.e2fs_bpg +
		    sblock.e2fs.e2fs_first_dblock;

		for (i = 0, d = dbase;
		     d < dmax;
		     d ++, i ++) {
			if (testbmap(d) || d >= sblock.e2fs.e2fs_bcount) {
				setbit(bbmap, i);
				continue;
			} else {
				nbfree++;
			}

		}
		cs_nbfree += nbfree;
		cs_nifree += nifree;
		cs_ndir += ndirs;

		if (debug && (letoh16(fs->e2fs_gd[c].ext2bgd_nbfree) != nbfree ||
		    letoh16(fs->e2fs_gd[c].ext2bgd_nifree) != nifree ||
		    letoh16(fs->e2fs_gd[c].ext2bgd_ndirs) != ndirs)) {
			printf("summary info for cg %d is %d, %d, %d,"
					"should be %d, %d, %d\n", c,
					letoh16(fs->e2fs_gd[c].ext2bgd_nbfree),
					letoh16(fs->e2fs_gd[c].ext2bgd_nifree),
					letoh16(fs->e2fs_gd[c].ext2bgd_ndirs),
					nbfree,
					nifree,
					ndirs);
		}
		(void)snprintf(msg, sizeof(msg),
		    "SUMMARY INFORMATIONS WRONG FOR CG #%d", c);
		if ((letoh16(fs->e2fs_gd[c].ext2bgd_nbfree) != nbfree ||
			letoh16(fs->e2fs_gd[c].ext2bgd_nifree) != nifree ||
			letoh16(fs->e2fs_gd[c].ext2bgd_ndirs) != ndirs) &&
			dofix(&idesc[0], msg)) {
			fs->e2fs_gd[c].ext2bgd_nbfree = htole16(nbfree);
			fs->e2fs_gd[c].ext2bgd_nifree = htole16(nifree);
			fs->e2fs_gd[c].ext2bgd_ndirs = htole16(ndirs);
			sbdirty();
		}

		if (debug && memcmp(blk_bitmap->b_un.b_buf, bbmap, fs->e2fs_bsize)) {
			printf("blk_bitmap:\n");
			print_bmap(blk_bitmap->b_un.b_buf, fs->e2fs_bsize);
			printf("bbmap:\n");
			print_bmap(bbmap, fs->e2fs_bsize);
		}

		(void)snprintf(msg, sizeof(msg),
		    "BLK(S) MISSING IN BIT MAPS #%d", c);
		if (memcmp(blk_bitmap->b_un.b_buf, bbmap, fs->e2fs_bsize) &&
			dofix(&idesc[1], msg)) {
			memcpy(blk_bitmap->b_un.b_buf, bbmap, fs->e2fs_bsize);
			dirty(blk_bitmap);
		}
		if (debug && memcmp(ino_bitmap->b_un.b_buf, ibmap, fs->e2fs_bsize)) {
			printf("ino_bitmap:\n");
			print_bmap(ino_bitmap->b_un.b_buf, fs->e2fs_bsize);
			printf("ibmap:\n");
			print_bmap(ibmap, fs->e2fs_bsize);
		}
		(void)snprintf(msg, sizeof(msg),
		    "INODE(S) MISSING IN BIT MAPS #%d", c);
		if (memcmp(ino_bitmap->b_un.b_buf, ibmap, fs->e2fs_bsize) &&
			dofix(&idesc[1], msg)) {
			memcpy(ino_bitmap->b_un.b_buf, ibmap, fs->e2fs_bsize);
			dirty(ino_bitmap);
		}

	}
	if (debug && (fs->e2fs.e2fs_fbcount != cs_nbfree ||
		fs->e2fs.e2fs_ficount != cs_nifree)) {
		printf("summary info bad in superblock: %d, %d should be %d, %d\n",
		fs->e2fs.e2fs_fbcount, fs->e2fs.e2fs_ficount,
		cs_nbfree, cs_nifree);
	}
	if ((fs->e2fs.e2fs_fbcount != cs_nbfree ||
		fs->e2fs.e2fs_ficount != cs_nifree)
	    && dofix(&idesc[0], "SUPERBLK SUMMARY INFORMATION BAD")) {
		fs->e2fs.e2fs_fbcount = cs_nbfree;
		fs->e2fs.e2fs_ficount = cs_nifree;
		sbdirty();
	}
	free(ibmap);
	free(bbmap);
}

void
print_bmap(u_char *map, u_int32_t size)
{
	int i, j;

	i = 0;
	while (i < size) {
		printf("%u: ",i);
		for (j = 0; j < 16; j++, i++)
			printf("%2x ", (u_int)map[i] & 0xff);
		printf("\n");
	}
}
@


1.17
log
@kill fs2hXX/h2fsXX macros with letohXX/htoleXX

The reason being that ext2 structures are little-endian but JBD2 journal
is big-endian.  Don't confuse readers by talking about "file system endian".

ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: pass5.c,v 1.16 2013/04/24 13:46:27 deraadt Exp $	*/
d34 1
a34 1
#include <sys/param.h>
@


1.16
log
@pretty print bigger off_t
ok tedu otto
@
text
@d1 1
a1 1
/*	$OpenBSD: pass5.c,v 1.15 2011/04/18 03:58:21 deraadt Exp $	*/
d84 1
a84 1
			blk_bitmap = getdatablk(fs2h32(fs->e2fs_gd[c].ext2bgd_b_bitmap),
d87 1
a87 1
			getblk(blk_bitmap, fs2h32(fs->e2fs_gd[c].ext2bgd_b_bitmap),
d91 1
a91 1
			ino_bitmap = getdatablk(fs2h32(fs->e2fs_gd[c].ext2bgd_i_bitmap),
d94 1
a94 1
			getblk(ino_bitmap, fs2h32(fs->e2fs_gd[c].ext2bgd_i_bitmap),
d163 3
a165 3
		if (debug && (fs2h16(fs->e2fs_gd[c].ext2bgd_nbfree) != nbfree ||
		    fs2h16(fs->e2fs_gd[c].ext2bgd_nifree) != nifree ||
		    fs2h16(fs->e2fs_gd[c].ext2bgd_ndirs) != ndirs)) {
d168 3
a170 3
					fs2h16(fs->e2fs_gd[c].ext2bgd_nbfree),
					fs2h16(fs->e2fs_gd[c].ext2bgd_nifree),
					fs2h16(fs->e2fs_gd[c].ext2bgd_ndirs),
d177 3
a179 3
		if ((fs2h16(fs->e2fs_gd[c].ext2bgd_nbfree) != nbfree ||
			fs2h16(fs->e2fs_gd[c].ext2bgd_nifree) != nifree ||
			fs2h16(fs->e2fs_gd[c].ext2bgd_ndirs) != ndirs) &&
d181 3
a183 3
			fs->e2fs_gd[c].ext2bgd_nbfree = h2fs16(nbfree);
			fs->e2fs_gd[c].ext2bgd_nifree = h2fs16(nifree);
			fs->e2fs_gd[c].ext2bgd_ndirs = h2fs16(ndirs);
@


1.15
log
@Remove a header file that is only supposed to be used by the kernel.
@
text
@d1 1
a1 1
/*	$OpenBSD: pass5.c,v 1.14 2011/03/12 17:50:47 deraadt Exp $	*/
d134 2
a135 2
				errexit("BAD STATE %d FOR INODE I=%ld\n",
				    statemap[j], j);
@


1.14
log
@These utilities can currently only operate with a 32-bit block number range,
so use daddr32_t
ok jasper
@
text
@d1 1
a1 1
/*	$OpenBSD: pass5.c,v 1.13 2006/03/20 21:35:37 dhill Exp $	*/
a38 1
#include <ufs/ext2fs/ext2fs_extern.h>
@


1.13
log
@NetBSD Coverity CID 2298: Fix memory leak.
NetBSD Coverity CID 2299: Fix memory leak.
NetBSD Coverity CID 2301: Fix memory leak.

ok ray@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pass5.c,v 1.12 2003/06/11 06:22:13 deraadt Exp $	*/
d56 2
a57 2
	daddr_t dbase, dmax;
	daddr_t d;
@


1.12
log
@ansification
@
text
@d1 1
a1 1
/*	$OpenBSD: pass5.c,v 1.11 2003/06/02 20:06:15 millert Exp $	*/
d230 2
@


1.11
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: pass5.c,v 1.10 2002/06/09 08:13:05 todd Exp $	*/
d52 1
a52 1
pass5()
d165 2
a166 2
					  fs2h16(fs->e2fs_gd[c].ext2bgd_nifree) != nifree ||
					  fs2h16(fs->e2fs_gd[c].ext2bgd_ndirs) != ndirs)) {
d233 1
a233 3
print_bmap(map, size)
	u_char *map;
	u_int32_t size;
@


1.10
log
@rm trailing whitespace
@
text
@d1 1
a1 1
/*	$OpenBSD: pass5.c,v 1.9 2002/02/16 21:27:34 millert Exp $	*/
d17 1
a17 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.9
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: pass5.c,v 1.8 2001/09/18 17:43:15 art Exp $	*/
d107 1
a107 1
		}       
d146 1
a146 1
			ibmap[i] = 0xff; 
d236 1
a236 1
void 
@


1.8
log
@cleanups and endianness fixes. Mostly from NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: pass5.c,v 1.7 2001/09/18 03:24:09 deraadt Exp $	*/
d53 1
a53 1
void print_bmap __P((u_char *,u_int32_t));
@


1.7
log
@pull in more includes
@
text
@d1 2
a2 2
/*	$OpenBSD: pass5.c,v 1.6 2001/01/31 22:31:11 deraadt Exp $	*/
/*	$NetBSD: pass5.c,v 1.1 1997/06/11 11:21:58 bouyer Exp $	*/
a37 12
#ifndef lint
#if 0
static char sccsid[] = "@@(#)pass5.c	8.6 (Berkeley) 11/30/94";
#else
#if 0
static char rcsid[] = "$NetBSD: pass5.c,v 1.1 1997/06/11 11:21:58 bouyer Exp $";
#else
static char rcsid[] = "$OpenBSD: pass5.c,v 1.6 2001/01/31 22:31:11 deraadt Exp $";
#endif
#endif
#endif /* not lint */

d59 1
a59 1
	register struct m_ext2fs *fs = &sblock;
d61 2
a62 2
	register daddr_t d;
	register long i, j;
@


1.6
log
@typo; tomo@@ns1.infinitedata.net
@
text
@d1 1
a1 1
/*	$OpenBSD: pass5.c,v 1.5 2000/04/26 23:26:06 jasoni Exp $	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD: pass5.c,v 1.5 2000/04/26 23:26:06 jasoni Exp $";
d52 1
@


1.5
log
@Support for ext2fs rev. 1
@
text
@d1 1
a1 1
/*	$OpenBSD: pass5.c,v 1.4 1997/06/14 05:04:12 downsj Exp $	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD: pass5.c,v 1.4 1997/06/14 05:04:12 downsj Exp $";
d258 1
a258 1
			printf("%2x ", (u_int)map[i]) & 0xff;
@


1.4
log
@s/malloc.h/stdlib.h in pass5.c, and actually malloc() enough memory in
setup() for the superblock!
@
text
@d1 1
a1 1
/*	$OpenBSD: pass5.c,v 1.3 1997/06/14 04:16:58 downsj Exp $	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD: pass5.c,v 1.3 1997/06/14 04:16:58 downsj Exp $";
d69 1
a69 1
	int c, blk, frags, basesize, sumsize, mapsize, savednrpos;
d100 1
a100 1
			blk_bitmap = getdatablk(fs->e2fs_gd[c].ext2bgd_b_bitmap,
d103 1
a103 1
			getblk(blk_bitmap, fs->e2fs_gd[c].ext2bgd_b_bitmap,
d107 1
a107 1
			ino_bitmap = getdatablk(fs->e2fs_gd[c].ext2bgd_i_bitmap,
d110 1
a110 1
			getblk(ino_bitmap, fs->e2fs_gd[c].ext2bgd_i_bitmap,
d150 1
a150 1
				errexit("BAD STATE %d FOR INODE I=%d\n",
d159 6
a164 7
		dbase = c * sblock.e2fs.e2fs_bpg + sblock.e2fs.e2fs_first_dblock +
				cgoverhead;
		dmax = (c+1) * sblock.e2fs.e2fs_bpg + sblock.e2fs.e2fs_first_dblock;

		for (i = 0; i < cgoverhead; i++)
			setbit(bbmap, i); /* blks allocated to fs metadata */
		for (i = cgoverhead, d = dbase;
d179 3
a181 3
		if (debug && (fs->e2fs_gd[c].ext2bgd_nbfree != nbfree ||
					  fs->e2fs_gd[c].ext2bgd_nifree != nifree ||
					  fs->e2fs_gd[c].ext2bgd_ndirs != ndirs)) {
d184 3
a186 3
					fs->e2fs_gd[c].ext2bgd_nbfree,
					fs->e2fs_gd[c].ext2bgd_nifree,
					fs->e2fs_gd[c].ext2bgd_ndirs,
d191 5
a195 4
		snprintf(msg, 255, "SUMMARY INFORMATIONS WRONG FOR CG #%d", c);
		if ((fs->e2fs_gd[c].ext2bgd_nbfree != nbfree ||
			fs->e2fs_gd[c].ext2bgd_nifree != nifree ||
			fs->e2fs_gd[c].ext2bgd_ndirs != ndirs) &&
d197 3
a199 3
			fs->e2fs_gd[c].ext2bgd_nbfree = nbfree;
			fs->e2fs_gd[c].ext2bgd_nifree = nifree;
			fs->e2fs_gd[c].ext2bgd_ndirs = ndirs;
d210 2
a211 1
		snprintf(msg, 255, "BLK(S) MISSING IN BIT MAPS #%d", c);
d223 2
a224 1
		snprintf(msg, 255, "INODE(S) MISSING IN BIT MAPS #%d", c);
@


1.3
log
@Add tags, fix man page.  Purely cosmetic.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD$";
a55 1
#include <malloc.h>
d57 1
@


1.2
log
@Sync with NetBSD.  Purely cosmetic.
@
text
@d1 1
d42 1
d44 3
@


1.1
log
@Initial revision
@
text
@d1 1
a1 3
/*	$NetBSD: pass5.c,v 1.16 1996/09/27 22:45:18 christos Exp $	*/

/* Modified for EXT2FS on NetBSD by Manuel Bouyer, April 1997 */
d4 1
d41 1
a41 1
static char rcsid[] = "$NetBSD: pass5.c,v 1.16 1996/09/27 22:45:18 christos Exp $";
@


1.1.1.1
log
@Initial import of Manuel's fsck_ext2fs, unmodified.
@
text
@@
