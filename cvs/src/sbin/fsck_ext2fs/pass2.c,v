head	1.15;
access;
symbols
	OPENBSD_6_2:1.15.0.4
	OPENBSD_6_2_BASE:1.15
	OPENBSD_6_1:1.15.0.6
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.15.0.2
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.14.0.4
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.14.0.6
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.13.0.4
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.12.0.6
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.2
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.11.0.32
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.30
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.28
	OPENBSD_5_0:1.11.0.26
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.24
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.22
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.18
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.20
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.16
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.14
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.12
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.10
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.8
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.6
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.4
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.2
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.10.0.8
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.6
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.7.0.4
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.3.0.10
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.8
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.6
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.4
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	R19970424:1.1.1.1
	BOUYER:1.1.1;
locks; strict;
comment	@ * @;


1.15
date	2016.04.28.12.17.15;	author krw;	state Exp;
branches;
next	1.14;
commitid	A4fdskp72gjrZWxe;

1.14
date	2015.01.16.06.39.57;	author deraadt;	state Exp;
branches;
next	1.13;
commitid	Uu5nFG3wCl0LACBb;

1.13
date	2014.07.13.16.08.53;	author pelikan;	state Exp;
branches;
next	1.12;
commitid	tQBfngCdLJGooLWH;

1.12
date	2013.04.24.13.46.27;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2005.04.30.13.56.16;	author niallo;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.11.06.22.13;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.02.20.06.15;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2003.04.17.06.48.47;	author tedu;	state Exp;
branches;
next	1.7;

1.7
date	2002.06.09.08.13.05;	author todd;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.16.21.27.34;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.09.18.17.43.15;	author art;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.26.23.26.06;	author jasoni;	state Exp;
branches;
next	1.3;

1.3
date	97.06.14.04.16.56;	author downsj;	state Exp;
branches;
next	1.2;

1.2
date	97.06.14.04.06.29;	author downsj;	state Exp;
branches;
next	1.1;

1.1
date	97.05.30.04.33.54;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.05.30.04.33.54;	author downsj;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Fix fsck'ing. ext2fs_dinode grew extra bits to support ext4
and sizeof(struct ext2fs_dinode) had to be replaced with
EXT2_DINODE_SIZE() and such.

ok beck@@
@
text
@/*	$OpenBSD: pass2.c,v 1.14 2015/01/16 06:39:57 deraadt Exp $	*/
/*	$NetBSD: pass2.c,v 1.6 2000/01/28 16:01:46 bouyer Exp $	*/

/*
 * Copyright (c) 1997 Manuel Bouyer.
 * Copyright (c) 1980, 1986, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/param.h>	/* roundup */
#include <sys/time.h>
#include <ufs/ext2fs/ext2fs_dinode.h>
#include <ufs/ext2fs/ext2fs_dir.h>
#include <ufs/ext2fs/ext2fs.h>

#include <ufs/ufs/dinode.h> /* for IFMT & friends */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <limits.h>

#include "fsck.h"
#include "fsutil.h"
#include "extern.h"

#define MINDIRSIZE	(sizeof (struct ext2fs_dirtemplate))

static int pass2check(struct inodesc *);
static int blksort(const void *, const void *);

void
pass2(void)
{
	struct ext2fs_dinode *dp;
	struct inoinfo **inpp, *inp;
	struct inoinfo **inpend;
	struct inodesc curino;
	struct ext2fs_dinode dino;
	char pathbuf[PATH_MAX + 1];

	switch (statemap[EXT2_ROOTINO]) {

	case USTATE:
		pfatal("ROOT INODE UNALLOCATED");
		if (reply("ALLOCATE") == 0)
			errexit("%s\n", "");
		if (allocdir(EXT2_ROOTINO, EXT2_ROOTINO, 0755) != EXT2_ROOTINO)
			errexit("CANNOT ALLOCATE ROOT INODE\n");
		break;

	case DCLEAR:
		pfatal("DUPS/BAD IN ROOT INODE");
		if (reply("REALLOCATE")) {
			freeino(EXT2_ROOTINO);
			if (allocdir(EXT2_ROOTINO, EXT2_ROOTINO, 0755) != EXT2_ROOTINO)
				errexit("CANNOT ALLOCATE ROOT INODE\n");
			break;
		}
		if (reply("CONTINUE") == 0)
			errexit("%s\n", "");
		break;

	case FSTATE:
	case FCLEAR:
		pfatal("ROOT INODE NOT DIRECTORY");
		if (reply("REALLOCATE")) {
			freeino(EXT2_ROOTINO);
			if (allocdir(EXT2_ROOTINO, EXT2_ROOTINO, 0755) != EXT2_ROOTINO)
				errexit("CANNOT ALLOCATE ROOT INODE\n");
			break;
		}
		if (reply("FIX") == 0)
			errexit("%s\n", "");
		dp = ginode(EXT2_ROOTINO);
		dp->e2di_mode = htole16((letoh16(dp->e2di_mode) & ~IFMT) | IFDIR);
		inodirty();
		break;

	case DSTATE:
		break;

	default:
		errexit("BAD STATE %d FOR ROOT INODE\n", statemap[EXT2_ROOTINO]);
	}

	/*
	 * Sort the directory list into disk block order.
	 */
	qsort((char *)inpsort, (size_t)inplast, sizeof *inpsort, blksort);
	/*
	 * Check the integrity of each directory.
	 */
	memset(&curino, 0, sizeof(struct inodesc));
	curino.id_type = DATA;
	curino.id_func = pass2check;
	inpend = &inpsort[inplast];
	for (inpp = inpsort; inpp < inpend; inpp++) {
		inp = *inpp;
		if (inp->i_isize == 0)
			continue;
		if (inp->i_isize < MINDIRSIZE) {
			direrror(inp->i_number, "DIRECTORY TOO SHORT");
			inp->i_isize = roundup(MINDIRSIZE, sblock.e2fs_bsize);
			if (reply("FIX") == 1) {
				dp = ginode(inp->i_number);
				inossize(dp, inp->i_isize);
				inodirty();
			}
		} else if ((inp->i_isize & (sblock.e2fs_bsize - 1)) != 0) {
			getpathname(pathbuf, sizeof pathbuf, inp->i_number,
			    inp->i_number);
			pwarn("DIRECTORY %s: LENGTH %lu NOT MULTIPLE OF %d",
			    pathbuf, (u_long)inp->i_isize, sblock.e2fs_bsize);
			if (preen)
				printf(" (ADJUSTED)\n");
			inp->i_isize = roundup(inp->i_isize, sblock.e2fs_bsize);
			if (preen || reply("ADJUST") == 1) {
				dp = ginode(inp->i_number);
				inossize(dp, inp->i_isize);
				inodirty();
			}
		}
		memset(&dino, 0, EXT2_DINODE_SIZE(&sblock));
		dino.e2di_mode = htole16(IFDIR);
		inossize(&dino, inp->i_isize);
		memcpy(&dino.e2di_blocks[0], &inp->i_blks[0], (size_t)inp->i_numblks);
		curino.id_number = inp->i_number;
		curino.id_parent = inp->i_parent;
		(void)ckinode(&dino, &curino);
	}
	/*
	 * Now that the parents of all directories have been found,
	 * make another pass to verify the value of `..'
	 */
	for (inpp = inpsort; inpp < inpend; inpp++) {
		inp = *inpp;
		if (inp->i_parent == 0 || inp->i_isize == 0)
			continue;
		if (inp->i_dotdot == inp->i_parent ||
		    inp->i_dotdot == (ino_t)-1)
			continue;
		if (inp->i_dotdot == 0) {
			inp->i_dotdot = inp->i_parent;
			fileerror(inp->i_parent, inp->i_number, "MISSING '..'");
			if (reply("FIX") == 0)
				continue;
			(void)makeentry(inp->i_number, inp->i_parent, "..");
			lncntp[inp->i_parent]--;
			continue;
		}
		fileerror(inp->i_parent, inp->i_number,
		    "BAD INODE NUMBER FOR '..'");
		if (reply("FIX") == 0)
			continue;
		lncntp[inp->i_dotdot]++;
		lncntp[inp->i_parent]--;
		inp->i_dotdot = inp->i_parent;
		(void)changeino(inp->i_number, "..", inp->i_parent);
	}
	/*
	 * Mark all the directories that can be found from the root.
	 */
	propagate();
}

static int
pass2check(struct inodesc *idesc)
{
	struct ext2fs_direct *dirp = idesc->id_dirp;
	struct inoinfo *inp;
	int n, entrysize, ret = 0;
	struct ext2fs_dinode *dp;
	char *errmsg;
	struct ext2fs_direct proto;
	char namebuf[PATH_MAX + 1];
	char pathbuf[PATH_MAX + 1];

	/*
	 * check for "."
	 */
	if (idesc->id_entryno != 0)
		goto chk1;
	if (letoh32(dirp->e2d_ino) != 0 && dirp->e2d_namlen == 1 &&
		dirp->e2d_name[0] == '.') {
		if (letoh32(dirp->e2d_ino) != idesc->id_number) {
			direrror(idesc->id_number, "BAD INODE NUMBER FOR '.'");
			dirp->e2d_ino = htole32(idesc->id_number);
			if (reply("FIX") == 1)
				ret |= ALTERED;
		}
		if (sblock.e2fs.e2fs_rev > E2FS_REV0 &&
		    (sblock.e2fs.e2fs_features_incompat & EXT2F_INCOMPAT_FTYPE)
		    && (dirp->e2d_type != EXT2_FT_DIR)) {
			direrror(idesc->id_number, "BAD TYPE VALUE FOR '.'");
			dirp->e2d_type = EXT2_FT_DIR;
			if (reply("FIX") == 1)
				ret |= ALTERED;
		}
		goto chk1;
	}
	direrror(idesc->id_number, "MISSING '.'");
	proto.e2d_ino = htole32(idesc->id_number);
	proto.e2d_namlen = 1;
	if (sblock.e2fs.e2fs_rev > E2FS_REV0 &&
	    (sblock.e2fs.e2fs_features_incompat & EXT2F_INCOMPAT_FTYPE))
		proto.e2d_type = EXT2_FT_DIR;
	else
		proto.e2d_type = 0;
	(void)strlcpy(proto.e2d_name, ".", sizeof proto.e2d_name);
	entrysize = EXT2FS_DIRSIZ(proto.e2d_namlen);
	if (letoh32(dirp->e2d_ino) != 0 && strcmp(dirp->e2d_name, "..") != 0) {
		pfatal("CANNOT FIX, FIRST ENTRY IN DIRECTORY CONTAINS %s\n",
			dirp->e2d_name);
	} else if (letoh16(dirp->e2d_reclen) < entrysize) {
		pfatal("CANNOT FIX, INSUFFICIENT SPACE TO ADD '.'\n");
	} else if (letoh16(dirp->e2d_reclen) < 2 * entrysize) {
		proto.e2d_reclen = dirp->e2d_reclen;
		memcpy(dirp, &proto, (size_t)entrysize);
		if (reply("FIX") == 1)
			ret |= ALTERED;
	} else {
		n = letoh16(dirp->e2d_reclen) - entrysize;
		proto.e2d_reclen = htole16(entrysize);
		memcpy(dirp, &proto, (size_t)entrysize);
		idesc->id_entryno++;
		lncntp[letoh32(dirp->e2d_ino)]--;
		dirp = (struct ext2fs_direct *)((char *)(dirp) + entrysize);
		memset(dirp, 0, (size_t)n);
		dirp->e2d_reclen = htole16(n);
		if (reply("FIX") == 1)
			ret |= ALTERED;
	}
chk1:
	if (idesc->id_entryno > 1)
		goto chk2;
	inp = getinoinfo(idesc->id_number);
	proto.e2d_ino = htole32(inp->i_parent);
	proto.e2d_namlen = 2;
	if (sblock.e2fs.e2fs_rev > E2FS_REV0 &&
	    (sblock.e2fs.e2fs_features_incompat & EXT2F_INCOMPAT_FTYPE))
		proto.e2d_type = EXT2_FT_DIR;
	else
		proto.e2d_type = 0;
	(void)strlcpy(proto.e2d_name, "..", sizeof proto.e2d_name);
	entrysize = EXT2FS_DIRSIZ(2);
	if (idesc->id_entryno == 0) {
		n = EXT2FS_DIRSIZ(dirp->e2d_namlen);
		if (letoh16(dirp->e2d_reclen) < n + entrysize)
			goto chk2;
		proto.e2d_reclen = htole16(letoh16(dirp->e2d_reclen) - n);
		dirp->e2d_reclen = htole16(n);
		idesc->id_entryno++;
		lncntp[letoh32(dirp->e2d_ino)]--;
		dirp = (struct ext2fs_direct *)((char *)(dirp) + n);
		memset(dirp, 0, (size_t)letoh16(proto.e2d_reclen));
		dirp->e2d_reclen = proto.e2d_reclen;
	}
	if (letoh32(dirp->e2d_ino) != 0 &&
	    dirp->e2d_namlen == 2 &&
	    strncmp(dirp->e2d_name, "..", 2) == 0) {
		inp->i_dotdot = letoh32(dirp->e2d_ino);
		if (sblock.e2fs.e2fs_rev > E2FS_REV0 &&
		    (sblock.e2fs.e2fs_features_incompat & EXT2F_INCOMPAT_FTYPE)
		    && dirp->e2d_type != EXT2_FT_DIR) {
			direrror(idesc->id_number, "BAD TYPE VALUE FOR '..'");
			dirp->e2d_type = EXT2_FT_DIR;
			if (reply("FIX") == 1)
				ret |= ALTERED;
		}
		goto chk2;
	}
	if (letoh32(dirp->e2d_ino) != 0 &&
		dirp->e2d_namlen == 1 &&
		strncmp(dirp->e2d_name, ".", 1) != 0) {
		fileerror(inp->i_parent, idesc->id_number, "MISSING '..'");
		pfatal("CANNOT FIX, SECOND ENTRY IN DIRECTORY CONTAINS %s\n",
			dirp->e2d_name);
		inp->i_dotdot = (ino_t)-1;
	} else if (letoh16(dirp->e2d_reclen) < entrysize) {
		fileerror(inp->i_parent, idesc->id_number, "MISSING '..'");
		pfatal("CANNOT FIX, INSUFFICIENT SPACE TO ADD '..'\n");
		inp->i_dotdot = (ino_t)-1;
	} else if (inp->i_parent != 0) {
		/*
		 * We know the parent, so fix now.
		 */
		inp->i_dotdot = inp->i_parent;
		fileerror(inp->i_parent, idesc->id_number, "MISSING '..'");
		proto.e2d_reclen = dirp->e2d_reclen;
		memcpy(dirp, &proto, (size_t)entrysize);
		if (reply("FIX") == 1)
			ret |= ALTERED;
	}
	idesc->id_entryno++;
	if (letoh32(dirp->e2d_ino) != 0)
		lncntp[letoh32(dirp->e2d_ino)]--;
	return (ret|KEEPON);
chk2:
	if (letoh32(dirp->e2d_ino) == 0)
		return (ret|KEEPON);
	if (dirp->e2d_namlen <= 2 &&
	    dirp->e2d_name[0] == '.' &&
	    idesc->id_entryno >= 2) {
		if (dirp->e2d_namlen == 1) {
			direrror(idesc->id_number, "EXTRA '.' ENTRY");
			dirp->e2d_ino = 0;
			if (reply("FIX") == 1)
				ret |= ALTERED;
			return (KEEPON | ret);
		}
		if (dirp->e2d_name[1] == '.') {
			direrror(idesc->id_number, "EXTRA '..' ENTRY");
			dirp->e2d_ino = 0;
			if (reply("FIX") == 1)
				ret |= ALTERED;
			return (KEEPON | ret);
		}
	}
	idesc->id_entryno++;
	n = 0;
	if (letoh32(dirp->e2d_ino) > maxino ||
		(letoh32(dirp->e2d_ino) < EXT2_FIRSTINO &&
		 letoh32(dirp->e2d_ino) != EXT2_ROOTINO)) {
		fileerror(idesc->id_number, letoh32(dirp->e2d_ino), "I OUT OF RANGE");
		n = reply("REMOVE");
	} else {
again:
		switch (statemap[letoh32(dirp->e2d_ino)]) {
		case USTATE:
			if (idesc->id_entryno <= 2)
				break;
			fileerror(idesc->id_number, letoh32(dirp->e2d_ino), "UNALLOCATED");
			n = reply("REMOVE");
			break;

		case DCLEAR:
		case FCLEAR:
			if (idesc->id_entryno <= 2)
				break;
			if (statemap[letoh32(dirp->e2d_ino)] == FCLEAR)
				errmsg = "DUP/BAD";
			else if (!preen)
				errmsg = "ZERO LENGTH DIRECTORY";
			else {
				n = 1;
				break;
			}
			fileerror(idesc->id_number, letoh32(dirp->e2d_ino), errmsg);
			if ((n = reply("REMOVE")) == 1)
				break;
			dp = ginode(letoh32(dirp->e2d_ino));
			statemap[letoh32(dirp->e2d_ino)] =
			    (letoh16(dp->e2di_mode) & IFMT) == IFDIR ? DSTATE : FSTATE;
			lncntp[letoh32(dirp->e2d_ino)] = letoh16(dp->e2di_nlink);
			goto again;

		case DSTATE:
		case DFOUND:
			inp = getinoinfo(letoh32(dirp->e2d_ino));
			if (inp->i_parent != 0 && idesc->id_entryno > 2) {
				getpathname(pathbuf, sizeof pathbuf,
				    idesc->id_number, idesc->id_number);
				getpathname(namebuf, sizeof namebuf,
				    letoh32(dirp->e2d_ino), letoh32(dirp->e2d_ino));
				pwarn("%s %s %s\n", pathbuf,
				    "IS AN EXTRANEOUS HARD LINK TO DIRECTORY",
				    namebuf);
				if (preen)
					printf(" (IGNORED)\n");
				else if ((n = reply("REMOVE")) == 1)
					break;
			}
			if (idesc->id_entryno > 2)
				inp->i_parent = idesc->id_number;
			/* fall through */

		case FSTATE:
			if (sblock.e2fs.e2fs_rev > E2FS_REV0 &&
			    (sblock.e2fs.e2fs_features_incompat &
				EXT2F_INCOMPAT_FTYPE) &&
			    dirp->e2d_type !=
				inot2ext2dt(typemap[letoh32(dirp->e2d_ino)])) {
				dirp->e2d_type =
				    inot2ext2dt(typemap[letoh32(dirp->e2d_ino)]);
				fileerror(idesc->id_number,
				    letoh32(dirp->e2d_ino),
				    "BAD TYPE VALUE");
				if (reply("FIX") == 1)
					ret |= ALTERED;
			}
			lncntp[letoh32(dirp->e2d_ino)]--;
			break;

		default:
			errexit("BAD STATE %d FOR INODE I=%llu\n",
			    statemap[letoh32(dirp->e2d_ino)],
			    (unsigned long long)letoh32(dirp->e2d_ino));
		}
	}
	if (n == 0)
		return (ret|KEEPON);
	dirp->e2d_ino = 0;
	return (ret|KEEPON|ALTERED);
}

/*
 * Routine to sort disk blocks.
 */
static int
blksort(const void *inpp1, const void *inpp2)
{
	return ((* (struct inoinfo **) inpp1)->i_blks[0] -
		(* (struct inoinfo **) inpp2)->i_blks[0]);
}
@


1.14
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: pass2.c,v 1.13 2014/07/13 16:08:53 pelikan Exp $	*/
d148 1
a148 1
		memset(&dino, 0, sizeof(struct ext2fs_dinode));
@


1.13
log
@kill fs2hXX/h2fsXX macros with letohXX/htoleXX

The reason being that ext2 structures are little-endian but JBD2 journal
is big-endian.  Don't confuse readers by talking about "file system endian".

ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: pass2.c,v 1.12 2013/04/24 13:46:27 deraadt Exp $	*/
d34 1
a34 1
#include <sys/param.h>
d45 1
d64 1
a64 1
	char pathbuf[MAXPATHLEN + 1];
d200 2
a201 2
	char namebuf[MAXPATHLEN + 1];
	char pathbuf[MAXPATHLEN + 1];
@


1.12
log
@pretty print bigger off_t
ok tedu otto
@
text
@d1 1
a1 1
/*	$OpenBSD: pass2.c,v 1.11 2005/04/30 13:56:16 niallo Exp $	*/
d99 1
a99 1
		dp->e2di_mode = h2fs16((fs2h16(dp->e2di_mode) & ~IFMT) | IFDIR);
d148 1
a148 1
		dino.e2di_mode = h2fs16(IFDIR);
d207 1
a207 1
	if (fs2h32(dirp->e2d_ino) != 0 && dirp->e2d_namlen == 1 &&
d209 1
a209 1
		if (fs2h32(dirp->e2d_ino) != idesc->id_number) {
d211 1
a211 1
			dirp->e2d_ino = h2fs32(idesc->id_number);
d226 1
a226 1
	proto.e2d_ino = h2fs32(idesc->id_number);
d235 1
a235 1
	if (fs2h32(dirp->e2d_ino) != 0 && strcmp(dirp->e2d_name, "..") != 0) {
d238 1
a238 1
	} else if (fs2h16(dirp->e2d_reclen) < entrysize) {
d240 1
a240 1
	} else if (fs2h16(dirp->e2d_reclen) < 2 * entrysize) {
d246 2
a247 2
		n = fs2h16(dirp->e2d_reclen) - entrysize;
		proto.e2d_reclen = h2fs16(entrysize);
d250 1
a250 1
		lncntp[fs2h32(dirp->e2d_ino)]--;
d253 1
a253 1
		dirp->e2d_reclen = h2fs16(n);
d261 1
a261 1
	proto.e2d_ino = h2fs32(inp->i_parent);
d272 1
a272 1
		if (fs2h16(dirp->e2d_reclen) < n + entrysize)
d274 2
a275 2
		proto.e2d_reclen = h2fs16(fs2h16(dirp->e2d_reclen) - n);
		dirp->e2d_reclen = h2fs16(n);
d277 1
a277 1
		lncntp[fs2h32(dirp->e2d_ino)]--;
d279 1
a279 1
		memset(dirp, 0, (size_t)fs2h16(proto.e2d_reclen));
d282 1
a282 1
	if (fs2h32(dirp->e2d_ino) != 0 &&
d285 1
a285 1
		inp->i_dotdot = fs2h32(dirp->e2d_ino);
d296 1
a296 1
	if (fs2h32(dirp->e2d_ino) != 0 &&
d303 1
a303 1
	} else if (fs2h16(dirp->e2d_reclen) < entrysize) {
d319 2
a320 2
	if (fs2h32(dirp->e2d_ino) != 0)
		lncntp[fs2h32(dirp->e2d_ino)]--;
d323 1
a323 1
	if (fs2h32(dirp->e2d_ino) == 0)
d345 4
a348 4
	if (fs2h32(dirp->e2d_ino) > maxino ||
		(fs2h32(dirp->e2d_ino) < EXT2_FIRSTINO &&
		 fs2h32(dirp->e2d_ino) != EXT2_ROOTINO)) {
		fileerror(idesc->id_number, fs2h32(dirp->e2d_ino), "I OUT OF RANGE");
d352 1
a352 1
		switch (statemap[fs2h32(dirp->e2d_ino)]) {
d356 1
a356 1
			fileerror(idesc->id_number, fs2h32(dirp->e2d_ino), "UNALLOCATED");
d364 1
a364 1
			if (statemap[fs2h32(dirp->e2d_ino)] == FCLEAR)
d372 1
a372 1
			fileerror(idesc->id_number, fs2h32(dirp->e2d_ino), errmsg);
d375 4
a378 4
			dp = ginode(fs2h32(dirp->e2d_ino));
			statemap[fs2h32(dirp->e2d_ino)] =
			    (fs2h16(dp->e2di_mode) & IFMT) == IFDIR ? DSTATE : FSTATE;
			lncntp[fs2h32(dirp->e2d_ino)] = fs2h16(dp->e2di_nlink);
d383 1
a383 1
			inp = getinoinfo(fs2h32(dirp->e2d_ino));
d388 1
a388 1
				    fs2h32(dirp->e2d_ino), fs2h32(dirp->e2d_ino));
d406 1
a406 1
				inot2ext2dt(typemap[fs2h32(dirp->e2d_ino)])) {
d408 1
a408 1
				    inot2ext2dt(typemap[fs2h32(dirp->e2d_ino)]);
d410 1
a410 1
				    fs2h32(dirp->e2d_ino),
d415 1
a415 1
			lncntp[fs2h32(dirp->e2d_ino)]--;
d420 2
a421 2
			    statemap[fs2h32(dirp->e2d_ino)],
			    (unsigned long long)fs2h32(dirp->e2d_ino));
@


1.11
log
@Support checking filesystems which have or once had large files (>4 GB)
on them.

From NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: pass2.c,v 1.10 2003/06/11 06:22:13 deraadt Exp $	*/
d419 3
a421 2
			errexit("BAD STATE %d FOR INODE I=%d\n",
			    statemap[fs2h32(dirp->e2d_ino)], fs2h32(dirp->e2d_ino));
@


1.10
log
@ansification
@
text
@d1 1
a1 1
/*	$OpenBSD: pass2.c,v 1.9 2003/06/02 20:06:15 millert Exp $	*/
d130 1
a130 1
				dp->e2di_size = h2fs32(inp->i_isize);
d143 1
a143 1
				dp->e2di_size = h2fs32(inp->i_isize);
d149 1
a149 1
		dino.e2di_size = h2fs32(inp->i_isize);
@


1.9
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: pass2.c,v 1.8 2003/04/17 06:48:47 tedu Exp $	*/
d56 1
a56 1
pass2()
d191 1
a191 2
pass2check(idesc)
	struct inodesc *idesc;
d433 1
a433 2
blksort(inpp1, inpp2)
	const void *inpp1, *inpp2;
@


1.8
log
@strings.  mostly from deraadt@@, some from tdeval@@ and myself
@
text
@d1 1
a1 1
/*	$OpenBSD: pass2.c,v 1.7 2002/06/09 08:13:05 todd Exp $	*/
d17 1
a17 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.7
log
@rm trailing whitespace
@
text
@d1 1
a1 1
/*	$OpenBSD: pass2.c,v 1.6 2002/02/16 21:27:34 millert Exp $	*/
d138 2
a139 1
			getpathname(pathbuf, inp->i_number, inp->i_number);
d238 1
a238 1
	(void)strcpy(proto.e2d_name, ".");
d273 1
a273 1
	(void)strcpy(proto.e2d_name, "..");
d390 4
a393 4
				getpathname(pathbuf, idesc->id_number,
				    idesc->id_number);
				getpathname(namebuf, fs2h32(dirp->e2d_ino),
					fs2h32(dirp->e2d_ino));
@


1.6
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: pass2.c,v 1.5 2001/09/18 17:43:15 art Exp $	*/
d206 1
a206 1
	/* 
d287 1
a287 1
	    dirp->e2d_namlen == 2 && 
@


1.5
log
@cleanups and endianness fixes. Mostly from NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: pass2.c,v 1.4 2000/04/26 23:26:06 jasoni Exp $	*/
d56 2
a57 2
static int pass2check __P((struct inodesc *));
static int blksort __P((const void *, const void *));
@


1.4
log
@Support for ext2fs rev. 1
@
text
@d1 2
a2 2
/*	$OpenBSD: pass2.c,v 1.3 1997/06/14 04:16:56 downsj Exp $	*/
/*	$NetBSD: pass2.c,v 1.1 1997/06/11 11:21:53 bouyer Exp $	*/
a37 12
#ifndef lint
#if 0
static char sccsid[] = "@@(#)pass2.c	8.6 (Berkeley) 10/27/94";
#else
#if 0
static char rcsid[] = "$NetBSD: pass2.c,v 1.1 1997/06/11 11:21:53 bouyer Exp $";
#else
static char rcsid[] = "$OpenBSD: pass2.c,v 1.3 1997/06/14 04:16:56 downsj Exp $";
#endif
#endif
#endif /* not lint */

d62 2
a63 2
	register struct ext2fs_dinode *dp;
	register struct inoinfo **inpp, *inp;
d197 2
a198 2
	register struct ext2fs_direct *dirp = idesc->id_dirp;
	register struct inoinfo *inp;
@


1.3
log
@Add tags, fix man page.  Purely cosmetic.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD$";
d115 1
a115 2
		dp->e2di_mode &= ~IFMT;
		dp->e2di_mode |= IFDIR;
d146 1
a146 1
				dp->e2di_size = inp->i_isize;
d151 2
a152 2
			pwarn("DIRECTORY %s: LENGTH %d NOT MULTIPLE OF %d",
				pathbuf, inp->i_isize, sblock.e2fs_bsize);
d158 1
a158 1
				dp->e2di_size = inp->i_isize;
d163 2
a164 2
		dino.e2di_mode = IFDIR;
		dino.e2di_size = inp->i_isize;
d223 1
a223 1
	if (dirp->e2d_ino != 0 && dirp->e2d_namlen == 1 &&
d225 1
a225 1
		if (dirp->e2d_ino != idesc->id_number) {
d227 9
a235 1
			dirp->e2d_ino = idesc->id_number;
d242 1
a242 1
	proto.e2d_ino = idesc->id_number;
d244 5
d251 1
a251 1
	if (dirp->e2d_ino != 0 && strcmp(dirp->e2d_name, "..") != 0) {
d254 1
a254 1
	} else if (dirp->e2d_reclen < entrysize) {
d256 1
a256 1
	} else if (dirp->e2d_reclen < 2 * entrysize) {
d262 2
a263 2
		n = dirp->e2d_reclen - entrysize;
		proto.e2d_reclen = entrysize;
d266 1
a266 1
		lncntp[dirp->e2d_ino]--;
d269 1
a269 1
		dirp->e2d_reclen = n;
d277 1
a277 1
	proto.e2d_ino = inp->i_parent;
d279 5
d285 1
a285 1
	entrysize = EXT2FS_DIRSIZ(proto.e2d_namlen);
d288 1
a288 1
		if (dirp->e2d_reclen < n + entrysize)
d290 2
a291 2
		proto.e2d_reclen = dirp->e2d_reclen - n;
		dirp->e2d_reclen = n;
d293 1
a293 1
		lncntp[dirp->e2d_ino]--;
d295 1
a295 1
		memset(dirp, 0, (size_t)proto.e2d_reclen);
d298 12
a309 4
	if (dirp->e2d_ino != 0 &&
		dirp->e2d_namlen == 2 && 
		strncmp(dirp->e2d_name, "..", dirp->e2d_namlen) == 0) {
		inp->i_dotdot = dirp->e2d_ino;
d312 1
a312 1
	if (dirp->e2d_ino != 0 &&
d314 1
a314 1
		strncmp(dirp->e2d_name, ".", dirp->e2d_namlen) != 0) {
d319 1
a319 1
	} else if (dirp->e2d_reclen < entrysize) {
d335 2
a336 2
	if (dirp->e2d_ino != 0)
		lncntp[dirp->e2d_ino]--;
d339 1
a339 1
	if (dirp->e2d_ino == 0)
d361 4
a364 3
	if (dirp->e2d_ino > maxino ||
		(dirp->e2d_ino < EXT2_FIRSTINO && dirp->e2d_ino != EXT2_ROOTINO)) {
		fileerror(idesc->id_number, dirp->e2d_ino, "I OUT OF RANGE");
d368 1
a368 1
		switch (statemap[dirp->e2d_ino]) {
d372 1
a372 1
			fileerror(idesc->id_number, dirp->e2d_ino, "UNALLOCATED");
d380 1
a380 1
			if (statemap[dirp->e2d_ino] == FCLEAR)
d388 1
a388 1
			fileerror(idesc->id_number, dirp->e2d_ino, errmsg);
d391 4
a394 4
			dp = ginode(dirp->e2d_ino);
			statemap[dirp->e2d_ino] =
			    (dp->e2di_mode & IFMT) == IFDIR ? DSTATE : FSTATE;
			lncntp[dirp->e2d_ino] = dp->e2di_nlink;
d399 1
a399 1
			inp = getinoinfo(dirp->e2d_ino);
d403 2
a404 1
				getpathname(namebuf, dirp->e2d_ino, dirp->e2d_ino);
d418 14
a431 1
			lncntp[dirp->e2d_ino]--;
d436 1
a436 1
			    statemap[dirp->e2d_ino], dirp->e2d_ino);
@


1.2
log
@Sync with NetBSD.  Purely cosmetic.
@
text
@d1 1
d42 1
d44 3
@


1.1
log
@Initial revision
@
text
@d1 1
a1 3
/*	$NetBSD: pass2.c,v 1.17 1996/09/27 22:45:15 christos Exp $	*/

/* Modified for EXT2FS on NetBSD by Manuel Bouyer, April 1997 */
d4 1
d41 1
a41 1
static char rcsid[] = "$NetBSD: pass2.c,v 1.17 1996/09/27 22:45:15 christos Exp $";
@


1.1.1.1
log
@Initial import of Manuel's fsck_ext2fs, unmodified.
@
text
@@
