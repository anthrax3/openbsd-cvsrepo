head	1.20;
access;
symbols
	OPENBSD_6_2:1.20.0.10
	OPENBSD_6_2_BASE:1.20
	OPENBSD_6_1:1.20.0.12
	OPENBSD_6_1_BASE:1.20
	OPENBSD_6_0:1.20.0.8
	OPENBSD_6_0_BASE:1.20
	OPENBSD_5_9:1.20.0.4
	OPENBSD_5_9_BASE:1.20
	OPENBSD_5_8:1.20.0.6
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.20.0.2
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.19.0.4
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.16.0.6
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.2
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.15.0.8
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.6
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.4
	OPENBSD_5_0:1.15.0.2
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.14.0.20
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.18
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.14
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.16
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.12
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.10
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.8
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.14.0.6
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.14.0.4
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.2
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.13.0.4
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.2
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.12.0.8
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.12.0.6
	OPENBSD_3_6_BASE:1.12
	OPENBSD_3_5:1.12.0.4
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.12.0.2
	OPENBSD_3_4_BASE:1.12
	OPENBSD_3_3:1.8.0.4
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.3.0.10
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.8
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.6
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.4
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	R19970424:1.1.1.1
	BOUYER:1.1.1;
locks; strict;
comment	@ * @;


1.20
date	2015.01.16.06.39.57;	author deraadt;	state Exp;
branches;
next	1.19;
commitid	Uu5nFG3wCl0LACBb;

1.19
date	2014.07.13.16.08.53;	author pelikan;	state Exp;
branches;
next	1.18;
commitid	tQBfngCdLJGooLWH;

1.18
date	2014.05.24.02.27.31;	author krw;	state Exp;
branches;
next	1.17;

1.17
date	2014.05.21.17.52.26;	author krw;	state Exp;
branches;
next	1.16;

1.16
date	2013.04.24.13.46.27;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2011.03.12.17.50.46;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2006.03.20.21.35.37;	author dhill;	state Exp;
branches;
next	1.13;

1.13
date	2005.04.30.13.56.15;	author niallo;	state Exp;
branches;
next	1.12;

1.12
date	2003.07.29.18.38.35;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.11.06.22.12;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.02.20.06.15;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2003.04.17.06.48.47;	author tedu;	state Exp;
branches;
next	1.8;

1.8
date	2002.06.09.08.13.05;	author todd;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.16.21.27.34;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.09.18.17.43.15;	author art;	state Exp;
branches;
next	1.5;

1.5
date	2001.07.07.18.26.11;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.26.23.26.05;	author jasoni;	state Exp;
branches;
next	1.3;

1.3
date	97.06.14.04.16.50;	author downsj;	state Exp;
branches;
next	1.2;

1.2
date	97.06.14.04.06.24;	author downsj;	state Exp;
branches;
next	1.1;

1.1
date	97.05.30.04.33.53;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.05.30.04.33.53;	author downsj;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@/*	$OpenBSD: dir.c,v 1.19 2014/07/13 16:08:53 pelikan Exp $	*/
/*	$NetBSD: dir.c,v 1.5 2000/01/28 16:01:46 bouyer Exp $	*/

/*
 * Copyright (c) 1997 Manuel Bouyer.
 * Copyright (c) 1980, 1986, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/param.h>	/* DEV_BSIZE roundup */
#include <sys/time.h>
#include <ufs/ufs/dir.h>
#include <ufs/ext2fs/ext2fs_dinode.h>
#include <ufs/ext2fs/ext2fs_dir.h>
#include <ufs/ext2fs/ext2fs.h>

#include <ufs/ufs/dinode.h> /* for IFMT & friends */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <limits.h>

#include "fsck.h"
#include "fsutil.h"
#include "extern.h"

char	*lfname = "lost+found";
int	lfmode = 01777;
struct	ext2fs_dirtemplate emptydir = { 0, DIRBLKSIZ };
struct	ext2fs_dirtemplate dirhead = {
	0, 12, 1, EXT2_FT_DIR, ".",
	0, DIRBLKSIZ - 12, 2, EXT2_FT_DIR, ".."
};
#undef DIRBLKSIZ

static int expanddir(struct ext2fs_dinode *, char *);
static void freedir(ino_t, ino_t);
static struct ext2fs_direct *fsck_readdir(struct inodesc *);
static struct bufarea *getdirblk(daddr32_t, long);
static int lftempname(char *, ino_t);
static int mkentry(struct inodesc *);
static int chgino(struct  inodesc *);

/*
 * Propagate connected state through the tree.
 */
void
propagate(void)
{
	struct inoinfo **inpp, *inp, *pinp;
	struct inoinfo **inpend;

	/*
	 * Create a list of children for each directory.
	 */
	inpend = &inpsort[inplast];
	for (inpp = inpsort; inpp < inpend; inpp++) {
		inp = *inpp;
		if (inp->i_parent == 0 ||
		    inp->i_number == EXT2_ROOTINO)
			continue;
		pinp = getinoinfo(inp->i_parent);
		inp->i_parentp = pinp;
		inp->i_sibling = pinp->i_child;
		pinp->i_child = inp;
	}
	inp = getinoinfo(EXT2_ROOTINO);
	while (inp) {
		statemap[inp->i_number] = DFOUND;
		if (inp->i_child &&
		    statemap[inp->i_child->i_number] == DSTATE)
			inp = inp->i_child;
		else if (inp->i_sibling)
			inp = inp->i_sibling;
		else
			inp = inp->i_parentp;
	}
}

/*
 * Scan each entry in a directory block.
 */
int
dirscan(struct inodesc *idesc)
{
	struct ext2fs_direct *dp;
	struct bufarea *bp;
	int dsize, n;
	long blksiz;
	char *dbuf = NULL;

	if ((dbuf = malloc(sblock.e2fs_bsize)) == NULL) {
		fprintf(stderr, "out of memory");
		exit(8);
	}

	if (idesc->id_type != DATA)
		errexit("wrong type to dirscan %d\n", idesc->id_type);
	if (idesc->id_entryno == 0 &&
	    (idesc->id_filesize & (sblock.e2fs_bsize - 1)) != 0)
		idesc->id_filesize = roundup(idesc->id_filesize, sblock.e2fs_bsize);
	blksiz = idesc->id_numfrags * sblock.e2fs_bsize;
	if (chkrange(idesc->id_blkno, idesc->id_numfrags)) {
		idesc->id_filesize -= blksiz;
		free(dbuf);
		return (SKIP);
	}
	idesc->id_loc = 0;
	for (dp = fsck_readdir(idesc); dp != NULL; dp = fsck_readdir(idesc)) {
		dsize = letoh16(dp->e2d_reclen);
		memcpy(dbuf, dp, (size_t)dsize);
		idesc->id_dirp = (struct ext2fs_direct *)dbuf;
		if ((n = (*idesc->id_func)(idesc)) & ALTERED) {
			bp = getdirblk(idesc->id_blkno, blksiz);
			memcpy(bp->b_un.b_buf + idesc->id_loc - dsize, dbuf,
			    (size_t)dsize);
			dirty(bp);
			sbdirty();
		}
		if (n & STOP) {
			free(dbuf);
			return (n);
		}
	}
	free(dbuf);
	return (idesc->id_filesize > 0 ? KEEPON : STOP);
}

/*
 * get next entry in a directory.
 */
static struct ext2fs_direct *
fsck_readdir(struct inodesc *idesc)
{
	struct ext2fs_direct *dp, *ndp;
	struct bufarea *bp;
	long size, blksiz, fix, dploc;

	blksiz = idesc->id_numfrags * sblock.e2fs_bsize;
	bp = getdirblk(idesc->id_blkno, blksiz);
	if (idesc->id_loc % sblock.e2fs_bsize == 0 && idesc->id_filesize > 0 &&
	    idesc->id_loc < blksiz) {
		dp = (struct ext2fs_direct *)(bp->b_un.b_buf + idesc->id_loc);
		if (dircheck(idesc, dp))
			goto dpok;
		if (idesc->id_fix == IGNORE)
			return (0);
		fix = dofix(idesc, "DIRECTORY CORRUPTED");
		bp = getdirblk(idesc->id_blkno, blksiz);
		dp = (struct ext2fs_direct *)(bp->b_un.b_buf + idesc->id_loc);
		dp->e2d_reclen = htole16(sblock.e2fs_bsize);
		dp->e2d_ino = 0;
		dp->e2d_namlen = 0;
		dp->e2d_type = 0;
		dp->e2d_name[0] = '\0';
		if (fix)
			dirty(bp);
		idesc->id_loc += sblock.e2fs_bsize;
		idesc->id_filesize -= sblock.e2fs_bsize;
		return (dp);
	}
dpok:
	if (idesc->id_filesize <= 0 || idesc->id_loc >= blksiz)
		return NULL;
	dploc = idesc->id_loc;
	dp = (struct ext2fs_direct *)(bp->b_un.b_buf + dploc);
	idesc->id_loc += letoh16(dp->e2d_reclen);
	idesc->id_filesize -= letoh16(dp->e2d_reclen);
	if ((idesc->id_loc % sblock.e2fs_bsize) == 0)
		return (dp);
	ndp = (struct ext2fs_direct *)(bp->b_un.b_buf + idesc->id_loc);
	if (idesc->id_loc < blksiz && idesc->id_filesize > 0 &&
	    dircheck(idesc, ndp) == 0) {
		size = sblock.e2fs_bsize - (idesc->id_loc % sblock.e2fs_bsize);
		idesc->id_loc += size;
		idesc->id_filesize -= size;
		if (idesc->id_fix == IGNORE)
			return (0);
		fix = dofix(idesc, "DIRECTORY CORRUPTED");
		bp = getdirblk(idesc->id_blkno, blksiz);
		dp = (struct ext2fs_direct *)(bp->b_un.b_buf + dploc);
		dp->e2d_reclen = htole16(letoh16(dp->e2d_reclen) + size);
		if (fix)
			dirty(bp);
	}
	return (dp);
}

/*
 * Verify that a directory entry is valid.
 * This is a superset of the checks made in the kernel.
 */
int
dircheck(struct inodesc *idesc, struct ext2fs_direct *dp)
{
	int size;
	char *cp;
	int spaceleft;
	u_int16_t reclen = letoh16(dp->e2d_reclen);

	spaceleft = sblock.e2fs_bsize - (idesc->id_loc % sblock.e2fs_bsize);
	if (letoh32(dp->e2d_ino) > maxino ||
	    reclen == 0 ||
	    reclen > spaceleft ||
	    (reclen & 0x3) != 0)
		return (0);
	if (dp->e2d_ino == 0)
		return (1);
	if (sblock.e2fs.e2fs_rev < E2FS_REV1 ||
	    (sblock.e2fs.e2fs_features_incompat & EXT2F_INCOMPAT_FTYPE) == 0)
		if (dp->e2d_type != 0)
			return (1);
	size = EXT2FS_DIRSIZ(dp->e2d_namlen);
	if (reclen < size ||
	    idesc->id_filesize < size ||
	    dp->e2d_namlen > EXT2FS_MAXNAMLEN)
		return (0);
	for (cp = dp->e2d_name, size = 0; size < dp->e2d_namlen; size++)
		if (*cp == '\0' || (*cp++ == '/'))
			return (0);
	return (1);
}

void
direrror(ino_t ino, char *errmesg)
{

	fileerror(ino, ino, errmesg);
}

void
fileerror(ino_t cwd, ino_t ino, char *errmesg)
{
	struct ext2fs_dinode *dp;
	char pathbuf[PATH_MAX + 1];

	pwarn("%s ", errmesg);
	pinode(ino);
	printf("\n");
	getpathname(pathbuf, sizeof pathbuf, cwd, ino);
	if ((ino < EXT2_FIRSTINO && ino != EXT2_ROOTINO) || ino > maxino) {
		pfatal("NAME=%s\n", pathbuf);
		return;
	}
	dp = ginode(ino);
	if (ftypeok(dp))
		pfatal("%s=%s\n",
		    (letoh16(dp->e2di_mode) & IFMT) == IFDIR ? "DIR" : "FILE", pathbuf);
	else
		pfatal("NAME=%s\n", pathbuf);
}

void
adjust(struct inodesc *idesc, short lcnt)
{
	struct ext2fs_dinode *dp;

	dp = ginode(idesc->id_number);
	if (letoh16(dp->e2di_nlink) == lcnt) {
		if (linkup(idesc->id_number, (ino_t)0) == 0)
			clri(idesc, "UNREF", 0);
	} else {
		pwarn("LINK COUNT %s", (lfdir == idesc->id_number) ? lfname :
			((letoh16(dp->e2di_mode) & IFMT) == IFDIR ? "DIR" : "FILE"));
		pinode(idesc->id_number);
		printf(" COUNT %d SHOULD BE %d",
			letoh16(dp->e2di_nlink), letoh16(dp->e2di_nlink) - lcnt);
		if (preen) {
			if (lcnt < 0) {
				printf("\n");
				pfatal("LINK COUNT INCREASING");
			}
			printf(" (ADJUSTED)\n");
		}
		if (preen || reply("ADJUST") == 1) {
			dp->e2di_nlink = htole16(letoh16(dp->e2di_nlink) - lcnt);
			inodirty();
		}
	}
}

static int
mkentry(struct inodesc *idesc)
{
	struct ext2fs_direct *dirp = idesc->id_dirp;
	struct ext2fs_direct newent;
	int newlen, oldlen;

	newent.e2d_type = EXT2_FT_UNKNOWN;
	newent.e2d_namlen = strlen(idesc->id_name);
	if (sblock.e2fs.e2fs_rev > E2FS_REV0 &&
	    (sblock.e2fs.e2fs_features_incompat & EXT2F_INCOMPAT_FTYPE))
		newent.e2d_type = inot2ext2dt(typemap[idesc->id_parent]);
	newlen = EXT2FS_DIRSIZ(newent.e2d_namlen);
	if (dirp->e2d_ino != 0)
		oldlen = EXT2FS_DIRSIZ(dirp->e2d_namlen);
	else
		oldlen = 0;
	if (letoh16(dirp->e2d_reclen) - oldlen < newlen)
		return (KEEPON);
	newent.e2d_reclen = htole16(letoh16(dirp->e2d_reclen) - oldlen);
	dirp->e2d_reclen = htole16(oldlen);
	dirp = (struct ext2fs_direct *)(((char *)dirp) + oldlen);
	dirp->e2d_ino = htole32(idesc->id_parent); /* ino to be entered is in id_parent */
	dirp->e2d_reclen = newent.e2d_reclen;
	dirp->e2d_namlen = newent.e2d_namlen;
	dirp->e2d_type = newent.e2d_type;
	memcpy(dirp->e2d_name, idesc->id_name, (size_t)(dirp->e2d_namlen));
	return (ALTERED|STOP);
}

static int
chgino(struct inodesc *idesc)
{
	struct ext2fs_direct *dirp = idesc->id_dirp;
	u_int16_t namlen = dirp->e2d_namlen;

	if (strlen(idesc->id_name) != namlen ||
		strncmp(dirp->e2d_name, idesc->id_name, (int)namlen))
		return (KEEPON);
	dirp->e2d_ino = htole32(idesc->id_parent);
	if (sblock.e2fs.e2fs_rev > E2FS_REV0 &&
	    (sblock.e2fs.e2fs_features_incompat & EXT2F_INCOMPAT_FTYPE))
		dirp->e2d_type = inot2ext2dt(typemap[idesc->id_parent]);
	else
		dirp->e2d_type = 0;
	return (ALTERED|STOP);
}

int
linkup(ino_t orphan, ino_t parentdir)
{
	struct ext2fs_dinode *dp;
	int lostdir;
	ino_t oldlfdir;
	struct inodesc idesc;
	char tempname[BUFSIZ];

	memset(&idesc, 0, sizeof(struct inodesc));
	dp = ginode(orphan);
	lostdir = (letoh16(dp->e2di_mode) & IFMT) == IFDIR;
	pwarn("UNREF %s ", lostdir ? "DIR" : "FILE");
	pinode(orphan);
	if (preen && inosize(dp) == 0)
		return (0);
	if (preen)
		printf(" (RECONNECTED)\n");
	else
		if (reply("RECONNECT") == 0)
			return (0);
	if (lfdir == 0) {
		dp = ginode(EXT2_ROOTINO);
		idesc.id_name = lfname;
		idesc.id_type = DATA;
		idesc.id_func = findino;
		idesc.id_number = EXT2_ROOTINO;
		if ((ckinode(dp, &idesc) & FOUND) != 0) {
			lfdir = idesc.id_parent;
		} else {
			pwarn("NO lost+found DIRECTORY");
			if (preen || reply("CREATE")) {
				lfdir = allocdir(EXT2_ROOTINO, (ino_t)0, lfmode);
				if (lfdir != 0) {
					if (makeentry(EXT2_ROOTINO, lfdir, lfname) != 0) {
						if (preen)
							printf(" (CREATED)\n");
					} else {
						freedir(lfdir, EXT2_ROOTINO);
						lfdir = 0;
						if (preen)
							printf("\n");
					}
				}
			}
		}
		if (lfdir == 0) {
			pfatal("SORRY. CANNOT CREATE lost+found DIRECTORY");
			printf("\n\n");
			return (0);
		}
	}
	dp = ginode(lfdir);
	if ((letoh16(dp->e2di_mode) & IFMT) != IFDIR) {
		pfatal("lost+found IS NOT A DIRECTORY");
		if (reply("REALLOCATE") == 0)
			return (0);
		oldlfdir = lfdir;
		if ((lfdir = allocdir(EXT2_ROOTINO, (ino_t)0, lfmode)) == 0) {
			pfatal("SORRY. CANNOT CREATE lost+found DIRECTORY\n\n");
			return (0);
		}
		if ((changeino(EXT2_ROOTINO, lfname, lfdir) & ALTERED) == 0) {
			pfatal("SORRY. CANNOT CREATE lost+found DIRECTORY\n\n");
			return (0);
		}
		inodirty();
		idesc.id_type = ADDR;
		idesc.id_func = pass4check;
		idesc.id_number = oldlfdir;
		adjust(&idesc, lncntp[oldlfdir] + 1);
		lncntp[oldlfdir] = 0;
		dp = ginode(lfdir);
	}
	if (statemap[lfdir] != DFOUND) {
		pfatal("SORRY. NO lost+found DIRECTORY\n\n");
		return (0);
	}
	(void)lftempname(tempname, orphan);
	if (makeentry(lfdir, orphan, tempname) == 0) {
		pfatal("SORRY. NO SPACE IN lost+found DIRECTORY");
		printf("\n\n");
		return (0);
	}
	lncntp[orphan]--;
	if (lostdir) {
		if ((changeino(orphan, "..", lfdir) & ALTERED) == 0 &&
		    parentdir != (ino_t)-1)
			(void)makeentry(orphan, lfdir, "..");
		dp = ginode(lfdir);
		dp->e2di_nlink = htole16(letoh16(dp->e2di_nlink) +1);
		inodirty();
		lncntp[lfdir]++;
		pwarn("DIR I=%llu CONNECTED. ", (unsigned long long)orphan);
		if (parentdir != (ino_t)-1)
			printf("PARENT WAS I=%llu\n",
			    (unsigned long long)parentdir);
		if (preen == 0)
			printf("\n");
	}
	return (1);
}

/*
 * fix an entry in a directory.
 */
int
changeino(ino_t dir, char *name, ino_t newnum)
{
	struct inodesc idesc;

	memset(&idesc, 0, sizeof(struct inodesc));
	idesc.id_type = DATA;
	idesc.id_func = chgino;
	idesc.id_number = dir;
	idesc.id_fix = DONTKNOW;
	idesc.id_name = name;
	idesc.id_parent = newnum;	/* new value for name */
	return (ckinode(ginode(dir), &idesc));
}

/*
 * make an entry in a directory
 */
int
makeentry(ino_t parent, ino_t ino, char *name)
{
	struct ext2fs_dinode *dp;
	struct inodesc idesc;
	char pathbuf[PATH_MAX + 1];

	if ((parent < EXT2_FIRSTINO && parent != EXT2_ROOTINO)
		|| parent >= maxino ||
	    (ino < EXT2_FIRSTINO && ino < EXT2_ROOTINO) || ino >= maxino)
		return (0);
	memset(&idesc, 0, sizeof(struct inodesc));
	idesc.id_type = DATA;
	idesc.id_func = mkentry;
	idesc.id_number = parent;
	idesc.id_parent = ino;	/* this is the inode to enter */
	idesc.id_fix = DONTKNOW;
	idesc.id_name = name;
	dp = ginode(parent);
	if (inosize(dp) % sblock.e2fs_bsize) {
		inossize(dp, roundup(inosize(dp), sblock.e2fs_bsize));
		inodirty();
	}
	if ((ckinode(dp, &idesc) & ALTERED) != 0)
		return (1);
	getpathname(pathbuf, sizeof pathbuf, parent, parent);
	dp = ginode(parent);
	if (expanddir(dp, pathbuf) == 0)
		return (0);
	return (ckinode(dp, &idesc) & ALTERED);
}

/*
 * Attempt to expand the size of a directory
 */
static int
expanddir(struct ext2fs_dinode *dp, char *name)
{
	daddr32_t lastbn, newblk;
	struct bufarea *bp;
	char *firstblk;

	lastbn = lblkno(&sblock, inosize(dp));
	if (lastbn >= NDADDR - 1 || letoh32(dp->e2di_blocks[lastbn]) == 0 ||
		inosize(dp) == 0)
		return (0);
	if ((newblk = allocblk()) == 0)
		return (0);
	dp->e2di_blocks[lastbn + 1] = dp->e2di_blocks[lastbn];
	dp->e2di_blocks[lastbn] = htole32(newblk);
	inossize(dp, inosize(dp) + sblock.e2fs_bsize);
	dp->e2di_nblock = htole32(letoh32(dp->e2di_nblock) + 1);
	bp = getdirblk(letoh32(dp->e2di_blocks[lastbn + 1]),
		sblock.e2fs_bsize);
	if (bp->b_errs)
		goto bad;
	if ((firstblk = malloc(sblock.e2fs_bsize)) == NULL) {
		fprintf(stderr, "out of memory\n");
		exit(8);
	}
	memcpy(firstblk, bp->b_un.b_buf, sblock.e2fs_bsize);
	bp = getdirblk(newblk, sblock.e2fs_bsize);
	if (bp->b_errs) {
		free(firstblk);
		goto bad;
	}
	memcpy(bp->b_un.b_buf, firstblk, sblock.e2fs_bsize);
	free(firstblk);
	dirty(bp);
	bp = getdirblk(letoh32(dp->e2di_blocks[lastbn + 1]),
		sblock.e2fs_bsize);
	if (bp->b_errs)
		goto bad;
	emptydir.dot_reclen = htole16(sblock.e2fs_bsize);
	memcpy(bp->b_un.b_buf, &emptydir, sizeof emptydir);
	pwarn("NO SPACE LEFT IN %s", name);
	if (preen)
		printf(" (EXPANDED)\n");
	else if (reply("EXPAND") == 0)
		goto bad;
	dirty(bp);
	inodirty();
	return (1);
bad:
	dp->e2di_blocks[lastbn] = dp->e2di_blocks[lastbn + 1];
	dp->e2di_blocks[lastbn + 1] = 0;
	dp->e2di_size = htole32(letoh32(dp->e2di_size) - sblock.e2fs_bsize);
	inossize(dp, inosize(dp) - sblock.e2fs_bsize);
	dp->e2di_nblock = htole32(letoh32(dp->e2di_nblock) - 1);
	freeblk(newblk);
	return (0);
}

/*
 * allocate a new directory
 */
int
allocdir(ino_t parent, ino_t request, int mode)
{
	ino_t ino;
	struct ext2fs_dinode *dp;
	struct bufarea *bp;
	struct ext2fs_dirtemplate *dirp;

	ino = allocino(request, IFDIR|mode);
	dirhead.dot_reclen = htole16(12); /* XXX */
	dirhead.dotdot_reclen = htole16(sblock.e2fs_bsize - 12); /* XXX */
	dirhead.dot_namlen = 1;
	if (sblock.e2fs.e2fs_rev > E2FS_REV0 &&
	    (sblock.e2fs.e2fs_features_incompat & EXT2F_INCOMPAT_FTYPE))
		dirhead.dot_type = EXT2_FT_DIR;
	else
		dirhead.dot_type = 0;
	dirhead.dotdot_namlen = 2;
	if (sblock.e2fs.e2fs_rev > E2FS_REV0 &&
	    (sblock.e2fs.e2fs_features_incompat & EXT2F_INCOMPAT_FTYPE))
		dirhead.dotdot_type = EXT2_FT_DIR;
	else
		dirhead.dotdot_type = 0;
	dirp = &dirhead;
	dirp->dot_ino = htole32(ino);
	dirp->dotdot_ino = htole32(parent);
	dp = ginode(ino);
	bp = getdirblk(letoh32(dp->e2di_blocks[0]), sblock.e2fs_bsize);
	if (bp->b_errs) {
		freeino(ino);
		return (0);
	}
	memcpy(bp->b_un.b_buf, dirp, sizeof(struct ext2fs_dirtemplate));
	dirty(bp);
	dp->e2di_nlink = htole16(2);
	inodirty();
	if (ino == EXT2_ROOTINO) {
		lncntp[ino] = letoh16(dp->e2di_nlink);
		cacheino(dp, ino);
		return(ino);
	}
	if (statemap[parent] != DSTATE && statemap[parent] != DFOUND) {
		freeino(ino);
		return (0);
	}
	cacheino(dp, ino);
	statemap[ino] = statemap[parent];
	if (statemap[ino] == DSTATE) {
		lncntp[ino] = letoh16(dp->e2di_nlink);
		lncntp[parent]++;
	}
	dp = ginode(parent);
	dp->e2di_nlink = htole16(letoh16(dp->e2di_nlink) + 1);
	inodirty();
	return (ino);
}

/*
 * free a directory inode
 */
static void
freedir(ino_t ino, ino_t parent)
{
	struct ext2fs_dinode *dp;

	if (ino != parent) {
		dp = ginode(parent);
		dp->e2di_nlink = htole16(letoh16(dp->e2di_nlink) - 1);
		inodirty();
	}
	freeino(ino);
}

/*
 * generate a temporary name for the lost+found directory.
 */
static int
lftempname(char *bufp, ino_t ino)
{
	ino_t in;
	char *cp;
	int namlen;

	cp = bufp + 2;
	for (in = maxino; in > 0; in /= 10)
		cp++;
	*--cp = 0;
	namlen = cp - bufp;
	in = ino;
	while (cp > bufp) {
		*--cp = (in % 10) + '0';
		in /= 10;
	}
	*cp = '#';
	return (namlen);
}

/*
 * Get a directory block.
 * Insure that it is held until another is requested.
 */
static struct bufarea *
getdirblk(daddr32_t blkno, long size)
{

	if (pdirbp != 0)
		pdirbp->b_flags &= ~B_INUSE;
	pdirbp = getdatablk(blkno, size);
	return (pdirbp);
}
@


1.19
log
@kill fs2hXX/h2fsXX macros with letohXX/htoleXX

The reason being that ext2 structures are little-endian but JBD2 journal
is big-endian.  Don't confuse readers by talking about "file system endian".

ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.c,v 1.18 2014/05/24 02:27:31 krw Exp $	*/
d34 1
a34 1
#include <sys/param.h>
d46 1
d260 1
a260 1
	char pathbuf[MAXPATHLEN + 1];
d484 1
a484 1
	char pathbuf[MAXPATHLEN + 1];
@


1.18
log
@Don't potentially use stack garbage for e2d_type. Initialize
newent.e2d_type to EXT2_FT_UNKNOWN, a.k.a. 0.

Spotted by -Wall.
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.c,v 1.17 2014/05/21 17:52:26 krw Exp $	*/
d134 1
a134 1
		dsize = fs2h16(dp->e2d_reclen);
d175 1
a175 1
		dp->e2d_reclen = h2fs16(sblock.e2fs_bsize);
d191 2
a192 2
	idesc->id_loc += fs2h16(dp->e2d_reclen);
	idesc->id_filesize -= fs2h16(dp->e2d_reclen);
d206 1
a206 1
		dp->e2d_reclen = h2fs16(fs2h16(dp->e2d_reclen) + size);
d223 1
a223 1
	u_int16_t reclen = fs2h16(dp->e2d_reclen);
d226 1
a226 1
	if (fs2h32(dp->e2d_ino) > maxino ||
d272 1
a272 1
		    (fs2h16(dp->e2di_mode) & IFMT) == IFDIR ? "DIR" : "FILE", pathbuf);
d283 1
a283 1
	if (fs2h16(dp->e2di_nlink) == lcnt) {
d288 1
a288 1
			((fs2h16(dp->e2di_mode) & IFMT) == IFDIR ? "DIR" : "FILE"));
d291 1
a291 1
			fs2h16(dp->e2di_nlink), fs2h16(dp->e2di_nlink) - lcnt);
d300 1
a300 1
			dp->e2di_nlink = h2fs16(fs2h16(dp->e2di_nlink) - lcnt);
d323 1
a323 1
	if (fs2h16(dirp->e2d_reclen) - oldlen < newlen)
d325 2
a326 2
	newent.e2d_reclen = h2fs16(fs2h16(dirp->e2d_reclen) - oldlen);
	dirp->e2d_reclen = h2fs16(oldlen);
d328 1
a328 1
	dirp->e2d_ino = h2fs32(idesc->id_parent); /* ino to be entered is in id_parent */
d345 1
a345 1
	dirp->e2d_ino = h2fs32(idesc->id_parent);
d365 1
a365 1
	lostdir = (fs2h16(dp->e2di_mode) & IFMT) == IFDIR;
d407 1
a407 1
	if ((fs2h16(dp->e2di_mode) & IFMT) != IFDIR) {
d444 1
a444 1
		dp->e2di_nlink = h2fs16(fs2h16(dp->e2di_nlink) +1);
d521 1
a521 1
	if (lastbn >= NDADDR - 1 || fs2h32(dp->e2di_blocks[lastbn]) == 0 ||
d527 1
a527 1
	dp->e2di_blocks[lastbn] = h2fs32(newblk);
d529 2
a530 2
	dp->e2di_nblock = h2fs32(fs2h32(dp->e2di_nblock) + 1);
	bp = getdirblk(fs2h32(dp->e2di_blocks[lastbn + 1]),
d547 1
a547 1
	bp = getdirblk(fs2h32(dp->e2di_blocks[lastbn + 1]),
d551 1
a551 1
	emptydir.dot_reclen = h2fs16(sblock.e2fs_bsize);
d564 1
a564 1
	dp->e2di_size = h2fs32(fs2h32(dp->e2di_size) - sblock.e2fs_bsize);
d566 1
a566 1
	dp->e2di_nblock = h2fs32(fs2h32(dp->e2di_nblock) - 1);
d583 2
a584 2
	dirhead.dot_reclen = h2fs16(12); /* XXX */
	dirhead.dotdot_reclen = h2fs16(sblock.e2fs_bsize - 12); /* XXX */
d598 2
a599 2
	dirp->dot_ino = h2fs32(ino);
	dirp->dotdot_ino = h2fs32(parent);
d601 1
a601 1
	bp = getdirblk(fs2h32(dp->e2di_blocks[0]), sblock.e2fs_bsize);
d608 1
a608 1
	dp->e2di_nlink = h2fs16(2);
d611 1
a611 1
		lncntp[ino] = fs2h16(dp->e2di_nlink);
d622 1
a622 1
		lncntp[ino] = fs2h16(dp->e2di_nlink);
d626 1
a626 1
	dp->e2di_nlink = h2fs16(fs2h16(dp->e2di_nlink) + 1);
d641 1
a641 1
		dp->e2di_nlink = h2fs16(fs2h16(dp->e2di_nlink) - 1);
@


1.17
log
@Nuke some trailing whitespace to shrink subsequent diffs.
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.c,v 1.16 2013/04/24 13:46:27 deraadt Exp $	*/
d313 1
@


1.16
log
@pretty print bigger off_t
ok tedu otto
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.c,v 1.15 2011/03/12 17:50:46 deraadt Exp $	*/
d536 1
a536 1
	}	
@


1.15
log
@These utilities can currently only operate with a 32-bit block number range,
so use daddr32_t
ok jasper
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.c,v 1.14 2006/03/20 21:35:37 dhill Exp $	*/
d446 1
a446 1
		pwarn("DIR I=%u CONNECTED. ", orphan);
d448 2
a449 1
			printf("PARENT WAS I=%u\n", parentdir);
@


1.14
log
@NetBSD Coverity CID 2298: Fix memory leak.
NetBSD Coverity CID 2299: Fix memory leak.
NetBSD Coverity CID 2301: Fix memory leak.

ok ray@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.c,v 1.13 2005/04/30 13:56:15 niallo Exp $	*/
d63 1
a63 1
static struct bufarea *getdirblk(daddr_t, long);
d514 1
a514 1
	daddr_t lastbn, newblk;
d674 1
a674 1
getdirblk(daddr_t blkno, long size)
@


1.13
log
@Support checking filesystems which have or once had large files (>4 GB)
on them.

From NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.c,v 1.12 2003/07/29 18:38:35 deraadt Exp $	*/
d129 1
a517 5
	if ((firstblk = malloc(sblock.e2fs_bsize)) == NULL) {
		fprintf(stderr, "out of memory");
		exit(8);
	}

d532 4
d538 2
a539 1
	if (bp->b_errs)
d541 1
d543 1
@


1.12
log
@spaces
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.c,v 1.11 2003/06/11 06:22:12 deraadt Exp $	*/
d366 1
a366 1
	if (preen && fs2h32(dp->e2di_size) == 0)
d494 2
a495 3
	if (fs2h32(dp->e2di_size) % sblock.e2fs_bsize) {
		dp->e2di_size =
			h2fs32(roundup(fs2h32(dp->e2di_size), sblock.e2fs_bsize));
d522 1
a522 1
	lastbn = lblkno(&sblock, fs2h32(dp->e2di_size));
d524 1
a524 1
		fs2h32(dp->e2di_size) == 0)
d530 1
a530 1
	dp->e2di_size = h2fs32(fs2h32(dp->e2di_size) + sblock.e2fs_bsize);
d560 1
@


1.11
log
@ansification
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.c,v 1.10 2003/06/02 20:06:15 millert Exp $	*/
d481 1
a481 1
	
@


1.10
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.c,v 1.9 2003/04/17 06:48:47 tedu Exp $	*/
d72 1
a72 1
propagate()
d108 1
a108 2
dirscan(idesc)
	struct inodesc *idesc;
d156 1
a156 2
fsck_readdir(idesc)
	struct inodesc *idesc;
d217 1
a217 3
dircheck(idesc, dp)
	struct inodesc *idesc;
	struct ext2fs_direct *dp;
d248 1
a248 3
direrror(ino, errmesg)
	ino_t ino;
	char *errmesg;
d255 1
a255 3
fileerror(cwd, ino, errmesg)
	ino_t cwd, ino;
	char *errmesg;
d277 1
a277 3
adjust(idesc, lcnt)
	struct inodesc *idesc;
	short lcnt;
d306 1
a306 2
mkentry(idesc)
	struct inodesc *idesc;
d335 1
a335 2
chgino(idesc)
	struct inodesc *idesc;
d353 1
a353 3
linkup(orphan, parentdir)
	ino_t orphan;
	ino_t parentdir;
d458 1
a458 4
changeino(dir, name, newnum)
	ino_t dir;
	char *name;
	ino_t newnum;
d476 1
a476 3
makeentry(parent, ino, name)
	ino_t parent, ino;
	char *name;
d512 1
a512 3
expanddir(dp, name)
	struct ext2fs_dinode *dp;
	char *name;
d570 1
a570 3
allocdir(parent, request, mode)
	ino_t parent, request;
	int mode;
d630 1
a630 2
freedir(ino, parent)
	ino_t ino, parent;
d646 1
a646 3
lftempname(bufp, ino)
	char *bufp;
	ino_t ino;
d671 1
a671 3
getdirblk(blkno, size)
	daddr_t blkno;
	long size;
@


1.9
log
@strings.  mostly from deraadt@@, some from tdeval@@ and myself
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.c,v 1.8 2002/06/09 08:13:05 todd Exp $	*/
d17 1
a17 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.8
log
@rm trailing whitespace
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.c,v 1.7 2002/02/16 21:27:34 millert Exp $	*/
d275 1
a275 1
	getpathname(pathbuf, cwd, ino);
d524 1
a524 1
	getpathname(pathbuf, parent, parent);
@


1.7
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.c,v 1.6 2001/09/18 17:43:15 art Exp $	*/
d57 1
a57 1
struct	ext2fs_dirtemplate emptydir = { 0, DIRBLKSIZ }; 
@


1.6
log
@cleanups and endianness fixes. Mostly from NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.c,v 1.5 2001/07/07 18:26:11 deraadt Exp $	*/
d64 7
a70 7
static int expanddir __P((struct ext2fs_dinode *, char *));
static void freedir __P((ino_t, ino_t));
static struct ext2fs_direct *fsck_readdir __P((struct inodesc *));
static struct bufarea *getdirblk __P((daddr_t, long));
static int lftempname __P((char *, ino_t));
static int mkentry __P((struct inodesc *));
static int chgino __P((struct  inodesc *));
@


1.5
log
@major -Wall cleanup, almost complete
@
text
@d1 2
a2 2
/*	$OpenBSD: dir.c,v 1.4 2000/04/26 23:26:05 jasoni Exp $	*/
/*	$NetBSD: dir.c,v 1.1 1997/06/11 11:21:46 bouyer Exp $	*/
a37 12
#ifndef lint
#if 0
static char sccsid[] = "@@(#)dir.c	8.5 (Berkeley) 12/8/94";
#else
#if 0
static char rcsid[] = "$NetBSD: dir.c,v 1.1 1997/06/11 11:21:46 bouyer Exp $";
#else
static char rcsid[] = "$OpenBSD: dir.c,v 1.4 2000/04/26 23:26:05 jasoni Exp $";
#endif
#endif
#endif /* not lint */

d40 1
a56 2
/* XXX DIRBLKSIZ id bsize ! */
#define DIRBLKSIZ 0 /* just for now */
d78 1
a78 1
	register struct inoinfo **inpp, *inp, *pinp;
d113 1
a113 1
	register struct inodesc *idesc;
d115 2
a116 2
	register struct ext2fs_direct *dp;
	register struct bufarea *bp;
d162 1
a162 1
	register struct inodesc *idesc;
d164 2
a165 2
	register struct ext2fs_direct *dp, *ndp;
	register struct bufarea *bp;
d269 1
a269 1
	register struct ext2fs_dinode *dp;
d290 1
a290 1
	register struct inodesc *idesc;
d293 1
a293 1
	register struct ext2fs_dinode *dp;
d323 1
a323 1
	register struct ext2fs_direct *dirp = idesc->id_dirp;
d353 1
a353 1
	register struct ext2fs_direct *dirp = idesc->id_dirp;
d373 1
a373 1
	register struct ext2fs_dinode *dp;
d536 1
a536 1
	register struct ext2fs_dinode *dp;
d540 1
a540 1
	register struct bufarea *bp;
d601 1
a601 1
	register struct bufarea *bp;
d678 2
a679 2
	register ino_t in;
	register char *cp;
@


1.4
log
@Support for ext2fs rev. 1
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.c,v 1.3 1997/06/14 04:16:50 downsj Exp $	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD: dir.c,v 1.3 1997/06/14 04:16:50 downsj Exp $";
d554 1
a554 1
	char *cp, *firstblk;
@


1.3
log
@Add tags, fix man page.  Purely cosmetic.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD$";
d72 2
a73 2
	0, 12, 1, ".",
	0, DIRBLKSIZ - 12, 2, ".."
d151 1
a151 1
		dsize = dp->e2d_reclen;
d193 1
a193 1
		dp->e2d_reclen = sblock.e2fs_bsize;
d196 1
d209 2
a210 2
	idesc->id_loc += dp->e2d_reclen;
	idesc->id_filesize -= dp->e2d_reclen;
d224 1
a224 1
		dp->e2d_reclen += size;
a241 1
	u_char namlen;
d243 1
d246 4
a249 4
	if (dp->e2d_ino > maxino ||
	    dp->e2d_reclen == 0 ||
	    dp->e2d_reclen > spaceleft ||
	    (dp->e2d_reclen & 0x3) != 0)
d253 4
d258 1
a258 2
	namlen = dp->e2d_namlen;
	if (dp->e2d_reclen < size ||
d260 1
a260 1
	    namlen > EXT2FS_MAXNAMLEN)
d262 1
a262 1
	for (cp = dp->e2d_name, size = 0; size < namlen; size++)
d296 1
a296 1
		    (dp->e2di_mode & IFMT) == IFDIR ? "DIR" : "FILE", pathbuf);
d309 1
a309 1
	if (dp->e2di_nlink == lcnt) {
d314 1
a314 1
			((dp->e2di_mode & IFMT) == IFDIR ? "DIR" : "FILE"));
d317 1
a317 1
			dp->e2di_nlink, dp->e2di_nlink - lcnt);
d326 1
a326 1
			dp->e2di_nlink -= lcnt;
d341 3
d349 1
a349 1
	if (dirp->e2d_reclen - oldlen < newlen)
d351 2
a352 2
	newent.e2d_reclen = dirp->e2d_reclen - oldlen;
	dirp->e2d_reclen = oldlen;
d354 1
a354 1
	dirp->e2d_ino = idesc->id_parent;	/* ino to be entered is in id_parent */
d357 2
a358 1
	memcpy(dirp->e2d_name, idesc->id_name, (size_t)dirp->e2d_namlen);
d367 1
d369 2
a370 2
	if (strlen(idesc->id_name) != dirp->e2d_namlen ||
		strncmp(dirp->e2d_name, idesc->id_name, (int)dirp->e2d_namlen))
d372 6
a377 1
	dirp->e2d_ino = idesc->id_parent;
d394 1
a394 1
	lostdir = (dp->e2di_mode & IFMT) == IFDIR;
d397 1
a397 1
	if (preen && dp->e2di_size == 0)
d436 1
a436 1
	if ((dp->e2di_mode & IFMT) != IFDIR) {
d473 1
a473 1
		dp->e2di_nlink++;
d530 3
a532 2
	if (dp->e2di_size % sblock.e2fs_bsize) {
		dp->e2di_size = roundup(dp->e2di_size, sblock.e2fs_bsize);
d561 3
a563 3
	lastbn = lblkno(&sblock, dp->e2di_size);
	if (lastbn >= NDADDR - 1 || dp->e2di_blocks[lastbn] == 0 ||
		dp->e2di_size == 0)
d568 4
a571 4
	dp->e2di_blocks[lastbn] = newblk;
	dp->e2di_size += sblock.e2fs_bsize;
	dp->e2di_nblock += 1;
	bp = getdirblk(dp->e2di_blocks[lastbn + 1],
a579 5
	emptydir.dot_reclen = sblock.e2fs_bsize;
	for (cp = &bp->b_un.b_buf[sblock.e2fs_bsize];
	     cp < &bp->b_un.b_buf[sblock.e2fs_bsize];
	     cp += sblock.e2fs_bsize)
		memcpy(cp, &emptydir, sizeof emptydir);
d581 1
a581 1
	bp = getdirblk(dp->e2di_blocks[lastbn + 1],
d585 1
d598 2
a599 2
	dp->e2di_size -= sblock.e2fs_bsize;
	dp->e2di_nblock -= sblock.e2fs_bsize;
a612 1
	char *cp;
d618 14
a631 2
	dirhead.dot_reclen = 12; /* XXX */
	dirhead.dotdot_reclen = sblock.e2fs_bsize - 12; /* XXX */
d633 2
a634 2
	dirp->dot_ino = ino;
	dirp->dotdot_ino = parent;
d636 1
a636 1
	bp = getdirblk(dp->e2di_blocks[0], sblock.e2fs_bsize);
a640 1
	emptydir.dot_reclen = sblock.e2fs_bsize;
a641 4
	for (cp = &bp->b_un.b_buf[sblock.e2fs_bsize];
	     cp < &bp->b_un.b_buf[sblock.e2fs_bsize];
	     cp += sblock.e2fs_bsize)
		memcpy(cp, &emptydir, sizeof emptydir);
d643 1
a643 1
	dp->e2di_nlink = 2;
d646 1
a646 1
		lncntp[ino] = dp->e2di_nlink;
d657 1
a657 1
		lncntp[ino] = dp->e2di_nlink;
d661 1
a661 1
	dp->e2di_nlink++;
d677 1
a677 1
		dp->e2di_nlink--;
@


1.2
log
@Sync with NetBSD.  Purely cosmetic.
@
text
@d1 1
d42 1
d44 3
@


1.1
log
@Initial revision
@
text
@d1 1
a1 3
/*	$NetBSD: dir.c,v 1.20 1996/09/27 22:45:11 christos Exp $	*/

/* Modified for EXT2FS on NetBSD by Manuel Bouyer, April 1997 */
d4 1
d41 1
a41 1
static char rcsid[] = "$NetBSD: dir.c,v 1.20 1996/09/27 22:45:11 christos Exp $";
@


1.1.1.1
log
@Initial import of Manuel's fsck_ext2fs, unmodified.
@
text
@@
