head	1.50;
access;
symbols
	OPENBSD_6_1:1.49.0.4
	OPENBSD_6_1_BASE:1.49
	OPENBSD_6_0:1.44.0.4
	OPENBSD_6_0_BASE:1.44
	OPENBSD_5_9:1.44.0.2
	OPENBSD_5_9_BASE:1.44
	OPENBSD_5_8:1.39.0.4
	OPENBSD_5_8_BASE:1.39
	OPENBSD_5_7:1.38.0.2
	OPENBSD_5_7_BASE:1.38
	OPENBSD_5_6:1.33.0.4
	OPENBSD_5_6_BASE:1.33
	OPENBSD_5_5:1.27.0.4
	OPENBSD_5_5_BASE:1.27
	OPENBSD_5_4:1.25.0.2
	OPENBSD_5_4_BASE:1.25
	OPENBSD_5_3:1.21.0.2
	OPENBSD_5_3_BASE:1.21
	OPENBSD_5_2:1.19.0.2
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.2
	OPENBSD_5_0:1.13.0.4
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.2
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.8.0.2
	OPENBSD_4_8_BASE:1.8;
locks; strict;
comment	@.\" @;


1.50
date	2017.06.01.15.23.43;	author sthen;	state Exp;
branches;
next	1.49;
commitid	D9q0zudmtzKLEI92;

1.49
date	2017.03.27.15.45.19;	author jmc;	state Exp;
branches;
next	1.48;
commitid	qYSx32KIJEdnFKKX;

1.48
date	2017.03.27.10.06.41;	author reyk;	state Exp;
branches;
next	1.47;
commitid	37oqp7mUEkdGuEb4;

1.47
date	2017.03.13.15.07.51;	author patrick;	state Exp;
branches;
next	1.46;
commitid	nbuF7HAS7BkpsKIU;

1.46
date	2017.01.04.12.31.01;	author mikeb;	state Exp;
branches;
next	1.45;
commitid	TO4j3BY30CCpOBrn;

1.45
date	2016.11.28.16.27.32;	author mikeb;	state Exp;
branches;
next	1.44;
commitid	vzozXMjySdmUSFZW;

1.44
date	2015.12.09.21.41.49;	author naddy;	state Exp;
branches;
next	1.43;
commitid	CLwtYUTkBZ3FXV1w;

1.43
date	2015.11.04.12.40.49;	author mikeb;	state Exp;
branches;
next	1.42;
commitid	B4ca1ecJQ735kuxU;

1.42
date	2015.11.01.21.26.48;	author jmc;	state Exp;
branches;
next	1.41;
commitid	WWHUg7NSwgnfw8Dy;

1.41
date	2015.10.31.20.06.42;	author naddy;	state Exp;
branches;
next	1.40;
commitid	5N2TXQrzf8JHmskn;

1.40
date	2015.10.19.21.32.13;	author naddy;	state Exp;
branches;
next	1.39;
commitid	nrZjcGT7qEXN4b7r;

1.39
date	2015.07.14.13.06.37;	author jmc;	state Exp;
branches;
next	1.38;
commitid	No7gb2vpDEH0YM6B;

1.38
date	2015.02.28.21.51.57;	author bentley;	state Exp;
branches;
next	1.37;
commitid	NNu2UZnsd5zmNVYD;

1.37
date	2015.01.15.11.54.31;	author sobrado;	state Exp;
branches;
next	1.36;
commitid	tRES8ejkPiKyBdXu;

1.36
date	2015.01.02.18.28.23;	author sobrado;	state Exp;
branches;
next	1.35;
commitid	innObbNMMMNV9cDY;

1.35
date	2014.08.27.10.28.57;	author reyk;	state Exp;
branches;
next	1.34;
commitid	kDDmioKYpauZKbXI;

1.34
date	2014.08.25.14.36.10;	author reyk;	state Exp;
branches;
next	1.33;
commitid	GmUlpWRlEvPnJtRg;

1.33
date	2014.08.05.16.34.03;	author reyk;	state Exp;
branches;
next	1.32;
commitid	ibPtdYST0WKi65dO;

1.32
date	2014.05.06.13.09.18;	author jmc;	state Exp;
branches;
next	1.31;

1.31
date	2014.05.06.10.24.22;	author markus;	state Exp;
branches;
next	1.30;

1.30
date	2014.04.28.16.23.19;	author jmc;	state Exp;
branches;
next	1.29;

1.29
date	2014.04.28.11.17.15;	author reyk;	state Exp;
branches;
next	1.28;

1.28
date	2014.04.28.11.16.18;	author reyk;	state Exp;
branches;
next	1.27;

1.27
date	2014.02.17.15.07.23;	author markus;	state Exp;
branches;
next	1.26;

1.26
date	2013.11.01.10.42.38;	author henning;	state Exp;
branches;
next	1.25;

1.25
date	2013.07.16.09.45.28;	author schwarze;	state Exp;
branches;
next	1.24;

1.24
date	2013.05.22.10.32.09;	author sthen;	state Exp;
branches;
next	1.23;

1.23
date	2013.03.05.19.16.01;	author sobrado;	state Exp;
branches;
next	1.22;

1.22
date	2013.03.05.14.51.00;	author sobrado;	state Exp;
branches;
next	1.21;

1.21
date	2013.01.08.10.38.19;	author reyk;	state Exp;
branches;
next	1.20;

1.20
date	2012.09.18.12.07.59;	author reyk;	state Exp;
branches;
next	1.19;

1.19
date	2012.06.30.14.51.31;	author naddy;	state Exp;
branches;
next	1.18;

1.18
date	2012.05.23.16.40.07;	author mikeb;	state Exp;
branches;
next	1.17;

1.17
date	2012.04.24.14.56.09;	author jmc;	state Exp;
branches;
next	1.16;

1.16
date	2012.04.18.13.01.29;	author jmc;	state Exp;
branches;
next	1.15;

1.15
date	2011.09.03.22.59.08;	author jmc;	state Exp;
branches;
next	1.14;

1.14
date	2011.08.19.19.59.51;	author jmc;	state Exp;
branches;
next	1.13;

1.13
date	2011.01.21.12.34.11;	author jmc;	state Exp;
branches;
next	1.12;

1.12
date	2011.01.21.11.56.00;	author reyk;	state Exp;
branches;
next	1.11;

1.11
date	2010.12.22.16.40.06;	author reyk;	state Exp;
branches;
next	1.10;

1.10
date	2010.12.22.16.22.27;	author mikeb;	state Exp;
branches;
next	1.9;

1.9
date	2010.09.23.11.42.36;	author mikeb;	state Exp;
branches;
next	1.8;

1.8
date	2010.07.01.02.15.08;	author reyk;	state Exp;
branches;
next	1.7;

1.7
date	2010.06.26.18.32.34;	author reyk;	state Exp;
branches;
next	1.6;

1.6
date	2010.06.23.11.26.13;	author reyk;	state Exp;
branches;
next	1.5;

1.5
date	2010.06.10.14.24.03;	author reyk;	state Exp;
branches;
next	1.4;

1.4
date	2010.06.10.14.08.37;	author reyk;	state Exp;
branches;
next	1.3;

1.3
date	2010.06.07.08.40.21;	author jmc;	state Exp;
branches;
next	1.2;

1.2
date	2010.06.03.21.57.15;	author reyk;	state Exp;
branches;
next	1.1;

1.1
date	2010.06.03.16.41.12;	author reyk;	state Exp;
branches;
next	;


desc
@@


1.50
log
@Expand $eapid in iked tags, allowing PF rules to be written based on EAP
identity (username). OK mikeb@@
@
text
@.\" $OpenBSD: iked.conf.5,v 1.49 2017/03/27 15:45:19 jmc Exp $
.\"
.\" Copyright (c) 2010 - 2014 Reyk Floeter <reyk@@openbsd.org>
.\" Copyright (c) 2004 Mathieu Sauve-Frankel  All rights reserved.
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: March 27 2017 $
.Dt IKED.CONF 5
.Os
.Sh NAME
.Nm iked.conf
.Nd IKEv2 configuration file
.Sh DESCRIPTION
.Nm
is the configuration file for
.Xr iked 8 ,
the Internet Key Exchange version 2 (IKEv2) daemon for IPsec.
IPsec itself is a pair of protocols:
Encapsulating Security Payload (ESP),
which provides integrity and confidentiality;
and Authentication Header (AH),
which provides integrity.
The IPsec protocol itself is described in
.Xr ipsec 4 .
.Pp
In its most basic form, a flow is established between hosts and/or
networks, and then Security Associations (SA) are established,
which detail how the desired protection will be achieved.
IPsec uses flows to determine whether to apply security services to an
IP packet or not.
.Xr iked 8
is used to set up flows and establish SAs automatically,
by specifying
.Sq ikev2
policies in
.Nm
(see
.Sx AUTOMATIC KEYING POLICIES ,
below).
.Pp
Alternative methods of setting up flows and SAs are also possible
using manual keying or automatic keying using the older ISAKMP/Oakley
a.k.a. IKEv1 protocol.
Manual keying is not recommended, but can be convenient for quick
setups and testing.
See
.Xr ipsec.conf 5
and
.Xr isakmpd 8
for more information about manual keying and ISAKMP support.
.Sh IKED.CONF FILE FORMAT
.Nm
is divided into three main sections:
.Bl -tag -width xxxx
.It Sy Macros
User-defined variables may be defined and used later, simplifying the
configuration file.
.It Sy Global Configuration
Global settings for
.Xr iked 8 .
.It Sy Automatic Keying Policies
Policies to set up IPsec flows and SAs automatically.
.El
.Pp
Lines beginning with
.Sq #
and empty lines are regarded as comments,
and ignored.
Lines may be split using the
.Sq \e
character.
.Pp
Argument names not beginning with a letter, digit, or underscore
must be quoted.
.Pp
Addresses can be specified in CIDR notation (matching netblocks),
as symbolic host names, interface names, or interface group names.
.Pp
Additional configuration files can be included with the
.Ic include
keyword, for example:
.Bd -literal -offset indent
include "/etc/macros.conf"
.Ed
.Sh MACROS
Macros can be defined that will later be expanded in context.
Macro names must start with a letter, digit, or underscore,
and may contain any of those characters.
Macro names may not be reserved words (for example
.Ic flow ,
.Ic from ,
.Ic esp ) .
Macros are not expanded inside quotes.
.Pp
For example:
.Bd -literal -offset indent
remote_gw = "192.168.3.12"
ikev2 esp from 192.168.7.0/24 to 192.168.8.0/24 peer $remote_gw
.Ed
.Sh GLOBAL CONFIGURATION
Here are the settings that can be set globally:
.Bl -tag -width xxxx
.It Ic set active
Set
.Xr iked 8
to active mode.
This is the default.
.It Ic set passive
Set
.Xr iked 8
to passive mode.
In passive mode no packets are sent to peers and no connections are
initiated by
.Xr iked 8 .
This option is used for setups using
.Xr sasyncd 8
and
.Xr carp 4
to provide redundancy.
iked will run in passive mode until sasyncd has determined that the host
is the master and can switch to active mode.
.It Ic set couple
Load the negotiated security associations (SAs) and flows into the kernel.
This is the default.
.It Ic set decouple
Don't load the negotiated SAs and flows from the kernel.
This mode is only useful for testing and debugging.
.It Ic set ocsp Ar URL
Enable OCSP and set the URL of the OCSP responder.
Please note that the matching responder and issuer certificates
have to be placed in
.Pa /etc/iked/ocsp/responder.crt
and
.Pa /etc/iked/ocsp/issuer.crt .
.It Ic user Ar name Ar password
.Xr iked 8
supports user-based authentication by tunneling the Extensible
Authentication Protocol (EAP) over IKEv2.
In its most basic form, the users will be authenticated against a
local, integrated password database that is configured with the
.Ic user
lines in
.Nm
and the
.Ar name
and
.Ar password
arguments.
Note that the password has to be specified in plain text which is
required to support different challenge-based EAP methods like
EAP-MD5 or EAP-MSCHAPv2.
.El
.Sh AUTOMATIC KEYING POLICIES
This section is used to configure policies that will be used by
.Xr iked 8
to set up flows and SAs automatically.
Some examples of setting up automatic keying:
.Bd -literal -offset 3n
# Set up a VPN:
# First between the gateway machines 192.168.3.1 and 192.168.3.2
# Second between the networks 10.1.1.0/24 and 10.1.2.0/24
ikev2 esp from 192.168.3.1 to 192.168.3.2
ikev2 esp from 10.1.1.0/24 to 10.1.2.0/24 peer 192.168.3.2
.Ed
.Pp
For incoming connections from remote peers, the policies are evaluated
in sequential order, from first to last.
The last matching policy decides what action is taken; if no policy matches
the connection, the default action is to ignore the connection attempt or
to use the
.Ar default
policy, if set.
Please also see the
.Sx EXAMPLES
section for a detailed example of the policy evaluation.
.Pp
The first time an IKEv2 connection matches a policy, an IKE SA is
created; for subsequent packets the connection is identified by the
IKEv2 parameters that are stored in the SA without evaluating any
policies.
After the connection is closed or times out, the IKE SA is
automatically removed.
.Pp
The commands are as follows:
.Bl -tag -width xxxx
.It Xo
.Ic ikev2
.Op Ar name
.Xc
The mandatory
.Ic ikev2
keyword will identify an IKEv2 automatic keying policy.
.Ar name
is an optional arbitrary string identifying the policy.
The name should only occur once in
.Nm
or any included files.
If omitted,
a name will be generated automatically for the policy.
.It Op Ar eval
The
.Ar eval
option modifies the policy evaluation for this policy.
It can be one of
.Ar quick ,
.Ar skip
or
.Ar default .
If a new incoming connection matches a policy with the
.Ar quick
option set, that policy is considered the last matching policy,
and evaluation of subsequent policies is skipped.
The
.Ar skip
option will disable evaluation of this policy for incoming connections.
The
.Ar default
option sets the default policy and should only be specified once.
.It Op Ar mode
.Ar mode
specifies the IKEv2 mode to use:
one of
.Ar passive
or
.Ar active .
When
.Ar passive
is specified,
.Xr iked 8
will not immediately start negotiation of this tunnel, but wait for an incoming
request from the remote peer.
When
.Ar active
is specified, negotiation will be started at once.
If omitted,
.Ar passive
mode will be used.
.It Op Ar ipcomp
The keyword
.Ar ipcomp
specifies that
.Xr ipcomp 4 ,
the IP Payload Compression protocol, is negotiated in addition to encapsulation.
The optional compression is applied before packets are encapsulated.
.It Op Ar encap
.Ar encap
specifies the encapsulation protocol to be used.
Possible protocols are
.Ar esp
and
.Ar ah ;
the default is
.Ar esp .
.\" .It Op Ar tmode
.\" .Ar tmode
.\" describes the encapsulation mode to be used.
.\" Possible modes are
.\" .Ar tunnel
.\" and
.\" .Ar transport ;
.\" the default is
.\" .Ar tunnel .
.It Op Ar af
This policy only applies to endpoints of the specified address family
which can be either
.Ar inet
or
.Ar inet6 .
Note that this only matters for IKEv2 endpoints and does not
restrict the traffic selectors to negotiate flows with different
address families, e.g. IPv6 flows negotiated by IPv4 endpoints.
.It Ic proto Ar protocol
The optional
.Ic proto
parameter restricts the flow to a specific IP protocol.
Common protocols are
.Xr icmp 4 ,
.Xr tcp 4 ,
and
.Xr udp 4 .
For a list of all the protocol name to number mappings used by
.Xr iked 8 ,
see the file
.Pa /etc/protocols .
.It Xo
.Ic from Ar src
.Op Ic port Ar sport
.Op Pq Ar srcnat
.Ic to Ar dst
.Op Ic port Ar dport
.Xc
Specify one or more traffic selectors for this policy which will be
used to negotiate the IPsec flows between the IKEv2 peers.
During the negotiation, the peers may decide to narrow a flow to a
subset of the configured traffic selector networks to match the
policies on each side.
.Pp
Each traffic selector will apply for packets with source address
.Ar src
and destination address
.Ar dst .
The keyword
.Ar any
will match any address (i.e. 0.0.0.0/0).
If the
.Ar src
argument specifies a fictional source ID,
the
.Ar srcnat
parameter can be used to specify the actual source address.
This can be used in outgoing NAT/BINAT scenarios as described below.
.Pp
The optional
.Ic port
modifiers restrict the traffic selectors to the specified ports.
They are only valid in conjunction with the
.Xr tcp 4
and
.Xr udp 4
protocols.
Ports can be specified by number or by name.
For a list of all port name to number mappings used by
.Xr ipsecctl 8 ,
see the file
.Pa /etc/services .
.It Ic local Ar localip Ic peer Ar remote
The
.Ic local
parameter specifies the address or FQDN of the local endpoint.
Unless the gateway is multi-homed or uses address aliases,
this option is generally not needed.
.Pp
The
.Ic peer
parameter specifies the address or FQDN of the remote endpoint.
For host-to-host connections where
.Ar dst
is identical to
.Ar remote ,
this option is generally not needed as it will be set to
.Ar dst
automatically.
If it is not specified or if the keyword
.Ar any
is given, the default peer is used.
.It Xo
.Ic ikesa
.Ic auth Ar algorithm
.Ic enc Ar algorithm
.Ic prf Ar algorithm
.Ic group Ar group
.Xc
These parameters define the mode and cryptographic transforms to be
used for the IKE SA negotiation, also known as phase 1.
The IKE SA will be used to authenticate the machines and to set up an
encrypted channel for the IKEv2 protocol.
.Pp
Possible values for
.Ic auth ,
.Ic enc ,
.Ic prf ,
.Ic group ,
and the default proposals are described below in
.Sx CRYPTO TRANSFORMS .
If omitted,
.Xr iked 8
will use the default proposals for the IKEv2 protocol.
.It Xo
.Ic childsa
.Ic auth Ar algorithm
.Ic enc Ar algorithm
.Ic group Ar group
.Xc
These parameters define the cryptographic transforms to be used for
the Child SA negotiation, also known as phase 2.
Each Child SA will be used to negotiate the actual IPsec SAs.
The initial Child SA is always negotiated with the initial IKEv2 key
exchange; additional Child SAs may be negotiated with additional
Child SA key exchanges for an established IKE SA.
.Pp
Possible values for
.Ic auth ,
.Ic enc ,
.Ic group ,
and the default proposals are described below in
.Sx CRYPTO TRANSFORMS .
If omitted,
.Xr iked 8
will use the default proposals for the ESP or AH protocol.
The
.Ic group
option will only be used to enable Perfect Forward Secrecy (PFS)
for additional Child SAs exchanges that are not part of the initial
key exchange.
.It Ic srcid Ar string Ic dstid Ar string
.Ic srcid
defines an ID of type
.Dq FQDN ,
.Dq ASN1_DN ,
.Dq IPV4 ,
.Dq IPV6 ,
or
.Dq UFQDN
that will be used by
.Xr iked 8
as the identity of the local peer.
If the argument is an email address (reyk@@example.com),
.Xr iked 8
will use UFQDN as the ID type.
The ASN1_DN type will be used if the string starts with a slash
.Sq /
(/C=DE/../CN=10.0.0.1/emailAddress=reyk@@example.com).
If the argument is an IPv4 address or a compressed IPv6 address,
the ID types IPV4 or IPV6 will be used.
Anything else is considered to be an FQDN.
.Pp
If
.Ic srcid
is omitted,
the default is to use the hostname of the local machine,
see
.Xr hostname 1
to set or print the hostname.
.Pp
.Ic dstid
is similar to
.Ic srcid ,
but instead specifies the ID to be used
by the remote peer.
.It Ic ikelifetime Ar time
The optional
.Ic ikelifetime
parameter defines the IKE SA expiration timeout by the
.Ar time
SA was created.
A zero value disables active IKE SA rekeying.
This is the default.
.Pp
The accepted format of the
.Ar time
specification is described below.
.It Ic lifetime Ar time Op Ic bytes Ar bytes
The optional
.Ic lifetime
parameter defines the Child SA expiration timeout by the
.Ar time
SA was in use and by the number of
.Ar bytes
that were processed using the SA.
Default values are 3 hours and 512 megabytes which means that SA will be
rekeyed before reaching the time limit or 512 megabytes of data
will pass through.
Zero values disable rekeying.
.Pp
Several unit specifiers are recognized (ignoring case):
.Ql m
and
.Ql h
for minutes and hours, and
.Ql K ,
.Ql M
and
.Ql G
for kilo-, mega- and gigabytes accordingly.
.Pp
Please note that rekeying must happen at least several times a day as
IPsec security heavily depends on frequent key renewals.
.It Op Ar ikeauth
Specify a method to be used to authenticate the remote peer.
.Xr iked 8
will automatically determine a method based on public keys or certificates
configured for the peer.
.Ar ikeauth
can be used to override this behaviour.
Non-psk modes will require setting up certificates and RSA or ECDSA public
keys; see
.Xr iked 8
for more information.
.Pp
.Bl -tag -width $domain -compact -offset indent
.It Ic eap Ar type
Use EAP to authenticate the initiator.
The only supported EAP
.Ar type
is currently
.Ar MSCHAP-V2 .
The responder will use RSA public key authentication.
.It Ic ecdsa256
Use ECDSA with a 256-bit elliptic curve key and SHA2-256 for authentication.
.It Ic ecdsa384
Use ECDSA with a 384-bit elliptic curve key and SHA2-384 for authentication.
.It Ic ecdsa521
Use ECDSA with a 521-bit elliptic curve key and SHA2-512 for authentication.
.It Ic psk Ar string
Use a pre-shared key
.Ar string
or hex value (starting with 0x) for authentication.
.It Ic rfc7427
Only use RFC 7427 signatures for authentication.
RFC 7427 signatures currently only support SHA2-256 as the hash.
.It Ic rsa
Use RSA public key authentication with SHA1 as the hash.
.El
.Pp
The default is to allow any signature authentication.
.It Ic config Ar option address
Send one or more optional configuration payloads (CP) to the peer.
The configuration
.Ar option
can be one of the following with the expected address format:
.Pp
.Bl -tag -width Ds -compact -offset indent
.It Ic address Ar address
Assign a static address on the internal network.
.It Ic address Ar address/prefix
Assign a dynamic address on the internal network.
The address will be assigned from an address pool with the size specified by
.Ar prefix .
.It Ic netmask Ar netmask
The IPv4 netmask of the internal network.
.It Ic name-server Ar address
The DNS server address within the internal network.
.It Ic netbios-server Ar address
The NetBIOS name server (WINS) within the internal network.
This option is provided for compatibility with legacy clients.
.It Ic dhcp-server Ar address
The address of an internal DHCP server for further configuration.
.It Ic protected-subnet Ar address/prefix
The address of the protected subnet within the internal network.
.It Ic access-server Ar address
The address of an internal remote access server.
.El
.It Ic tag Ar string
Add a
.Xr pf 4
tag to all packets of IPsec SAs created for this connection.
This will allow matching packets for this connection by defining
rules in
.Xr pf.conf 5
using the
.Cm tagged
keyword.
.Pp
The following variables can be used in tags to include information
from the remote peer on runtime:
.Pp
.Bl -tag -width $domain -compact -offset indent
.It Ar $id
The
.Ic dstid
that was proposed by the remote peer to identify itself.
It will be expanded to
.Ar id-value ,
e.g.\&
.Ar FQDN/foo.example.com .
To limit the size of the derived tag,
.Xr iked 8
will extract the common name
.Sq CN=
from ASN1_DN IDs, for example
.Ar ASN1_ID//C=DE/../CN=10.1.1.1/..
will be expanded to
.Ar 10.1.1.1 .
.It Ar $eapid
For a connection using EAP, the identity (username) used by the remote peer.
.It Ar $domain
Extract the domain from IDs of type FQDN, UFQDN or ASN1_DN.
.It Ar $name
The name of the IKEv2 policy that was configured in
.Nm
or automatically generated by
.Xr iked 8 .
.El
.Pp
For example, if the ID is
.Ar FQDN/foo.example.com
or
.Ar UFQDN/user@@example.com ,
.Dq ipsec-$domain
expands to
.Dq ipsec-example.com .
The variable expansion for the
.Ar tag
directive occurs only at runtime, not during configuration file parse time.
.It Ic tap Ar interface
Send the decapsulated IPsec traffic to the specified
.Xr enc 4
.Ar interface
instead of
.Ar enc0
for filtering and monitoring.
The traffic will be blocked if the specified
.Ar interface
does not exist.
.El
.Sh PACKET FILTERING
IPsec traffic appears unencrypted on the
.Xr enc 4
interface
and can be filtered accordingly using the
.Ox
packet filter,
.Xr pf 4 .
The grammar for the packet filter is described in
.Xr pf.conf 5 .
.Pp
The following components are relevant to filtering IPsec traffic:
.Bl -ohang -offset indent
.It external interface
Interface for IKE traffic and encapsulated IPsec traffic.
.It proto udp port 500
IKE traffic on the external interface.
.It proto udp port 4500
IKE NAT-Traversal traffic on the external interface.
.It proto ah | esp
Encapsulated IPsec traffic
on the external interface.
.It enc0
Default interface for outgoing traffic before it's been encapsulated,
and incoming traffic after it's been decapsulated.
State on this interface should be interface bound;
see
.Xr enc 4
for further information.
.It proto ipencap
[tunnel mode only]
IP-in-IP traffic flowing between gateways
on the enc0 interface.
.It tagged ipsec-example.org
Match traffic of IPsec SAs using the
.Ic tag
keyword.
.El
.Pp
If the filtering rules specify to block everything by default,
the following rule
would ensure that IPsec traffic never hits the packet filtering engine,
and is therefore passed:
.Bd -literal -offset indent
set skip on enc0
.Ed
.Pp
In the following example, all traffic is blocked by default.
IPsec-related traffic from gateways {192.168.3.1, 192.168.3.2} and
networks {10.0.1.0/24, 10.0.2.0/24} is permitted.
.Bd -literal -offset indent
block on ix0
block on enc0

pass  in on ix0 proto udp from 192.168.3.2 to 192.168.3.1 \e
	port {500, 4500}
pass out on ix0 proto udp from 192.168.3.1 to 192.168.3.2 \e
	port {500, 4500}

pass  in on ix0 proto esp from 192.168.3.2 to 192.168.3.1
pass out on ix0 proto esp from 192.168.3.1 to 192.168.3.2

pass  in on enc0 proto ipencap from 192.168.3.2 to 192.168.3.1 \e
	keep state (if-bound)
pass out on enc0 proto ipencap from 192.168.3.1 to 192.168.3.2 \e
	keep state (if-bound)
pass  in on enc0 from 10.0.2.0/24 to 10.0.1.0/24 \e
	keep state (if-bound)
pass out on enc0 from 10.0.1.0/24 to 10.0.2.0/24 \e
	keep state (if-bound)
.Ed
.Pp
.Xr pf 4
has the ability to filter IPsec-related packets
based on an arbitrary
.Em tag
specified within a ruleset.
The tag is used as an internal marker
which can be used to identify the packets later on.
This could be helpful,
for example,
in scenarios where users are connecting in from differing IP addresses,
or to support queue-based bandwidth control,
since the enc0 interface does not support it.
.Pp
The following
.Xr pf.conf 5
fragment uses queues for all IPsec traffic with special
handling for developers and employees:
.Bd -literal -offset indent
queue std on ix0 bandwidth 100M
queue   deflt parent std bandwidth 10M default
queue   developers parent std bandwidth 75M
queue   employees parent std bandwidth 5M
queue   ipsec parent std bandwidth 10M

pass out on ix0 proto esp set queue ipsec

pass out on ix0 tagged ipsec-developers.example.com \e
	set queue developers
pass out on ix0 tagged ipsec-employees.example.com \e
	set queue employees
.Ed
.Pp
The following example assigns the tags in the
.Nm
configuration and also sets an alternative
.Xr enc 4
device:
.Bd -literal -offset indent
ikev2 esp from 10.1.1.0/24 to 10.1.2.0/24 peer 192.168.3.2 \e
	tag ipsec-$domain tap "enc1"
.Ed
.Sh OUTGOING NETWORK ADDRESS TRANSLATION
In some network topologies it is desirable to perform NAT on traffic leaving
through the VPN tunnel.
In order to achieve that,
the
.Ar src
argument is used to negotiate the desired network ID with the peer
and the
.Ar srcnat
parameter defines the true local subnet,
so that a correct SA can be installed on the local side.
.Pp
For example,
if the local subnet is 192.168.1.0/24 and all the traffic
for a specific VPN peer should appear as coming from 10.10.10.1,
the following configuration is used:
.Bd -literal -offset indent
ikev2 esp from 10.10.10.1 (192.168.1.0/24) to 192.168.2.0/24 \e
	peer 10.10.20.1
.Ed
.Pp
Naturally,
a relevant NAT rule is required in
.Xr pf.conf 5 .
For the example above,
this would be:
.Bd -literal -offset indent
match out on enc0 from 192.168.1.0/24 to 192.168.2.0/24 \e
	nat-to 10.10.10.1
.Ed
.Pp
From the peer's point of view,
the local end of the VPN tunnel is declared to be 10.10.10.1
and all the traffic arrives with that source address.
.Sh CRYPTO TRANSFORMS
The following authentication types are permitted with the
.Ic auth
keyword:
.Bl -column "Authentication" "Key Length" "Truncated Length" -offset indent
.It Em "Authentication" Ta Em "Key Length" Ta Em "Truncated Length"
.It Li hmac-md5 Ta "128 bits" Ta "96 bits"
.It Li hmac-sha1 Ta "160 bits" Ta "96 bits"
.It Li hmac-sha2-256 Ta "256 bits" Ta "128 bits"
.It Li hmac-sha2-384 Ta "384 bits" Ta "192 bits"
.It Li hmac-sha2-512 Ta "512 bits" Ta "256 bits"
.El
.Pp
The following pseudo-random function types are permitted with the
.Ic prf
keyword:
.Bl -column "hmac-sha2-512" "Key Length" "[IKE only]" -offset indent
.It Em "PRF" Ta Em "Key Length" Ta ""
.It Li hmac-md5 Ta "128 bits" Ta "[IKE only]"
.It Li hmac-sha1 Ta "160 bits" Ta "[IKE only]"
.It Li hmac-sha2-256 Ta "256 bits" Ta "[IKE only]"
.It Li hmac-sha2-384 Ta "384 bits" Ta "[IKE only]"
.It Li hmac-sha2-512 Ta "512 bits" Ta "[IKE only]"
.El
.Pp
The following cipher types are permitted with the
.Ic enc
keyword:
.Bl -column "chacha20-poly1305" "Key Length" "[ESP only]" -offset indent
.It Em "Cipher" Ta Em "Key Length" Ta ""
.It Li 3des Ta "168 bits" Ta ""
.It Li aes-128 Ta "128 bits" Ta ""
.It Li aes-192 Ta "192 bits" Ta ""
.It Li aes-256 Ta "256 bits" Ta ""
.It Li aes-128-ctr Ta "160 bits" Ta "[ESP only]"
.It Li aes-192-ctr Ta "224 bits" Ta "[ESP only]"
.It Li aes-256-ctr Ta "288 bits" Ta "[ESP only]"
.It Li aes-128-gcm Ta "160 bits" Ta "[ESP only]"
.It Li aes-192-gcm Ta "224 bits" Ta "[ESP only]"
.It Li aes-256-gcm Ta "288 bits" Ta "[ESP only]"
.It Li blowfish Ta "160 bits" Ta "[ESP only]"
.It Li cast Ta "128 bits" Ta "[ESP only]"
.It Li chacha20-poly1305 Ta "288 bits" Ta "[ESP only]"
.El
.Pp
The following cipher types provide only authentication,
not encryption:
.Bl -column "chacha20-poly1305" "Key Length" "[ESP only]" -offset indent
.It Li aes-128-gmac Ta "160 bits" Ta "[ESP only]"
.It Li aes-192-gmac Ta "224 bits" Ta "[ESP only]"
.It Li aes-256-gmac Ta "288 bits" Ta "[ESP only]"
.It Li null Ta "" Ta "[ESP only]"
.El
.Pp
3DES requires 24 bytes to form its 168-bit key.
This is because the most significant bit of each byte is used for parity.
.Pp
The keysize of AES-CTR is actually 128-bit.
However as well as the key, a 32-bit nonce has to be supplied.
Thus 160 bits of key material have to be supplied.
The same applies to AES-GCM, AES-GMAC and Chacha20-Poly1305,
however in the latter case the keysize is 256 bit.
.Pp
Using AES-GMAC or NULL with ESP will only provide authentication.
This is useful in setups where AH cannot be used, e.g. when NAT is involved.
.Pp
The following group types are permitted with the
.Ic group
keyword:
.Bl -column "modp1024-160" "Group" "Size" "Type" -offset indent
.It Em Name Ta Em Group Ta Em Size Ta Em Type
.It Li modp768 Ta grp1 Ta 768 Ta "MODP"
.It Li modp1024 Ta grp2 Ta 1024 Ta "MODP"
.It Li ec2n155 Ta grp3 Ta 155 Ta "EC2N [insecure]"
.It Li ec2n185 Ta grp4 Ta 185 Ta "EC2N [insecure]"
.It Li modp1536 Ta grp5 Ta 1536 Ta "MODP"
.It Li modp2048 Ta grp14 Ta 2048 Ta "MODP"
.It Li modp3072 Ta grp15 Ta 3072 Ta "MODP"
.It Li modp4096 Ta grp16 Ta 4096 Ta "MODP"
.It Li modp6144 Ta grp17 Ta 6144 Ta "MODP"
.It Li modp8192 Ta grp18 Ta 8192 Ta "MODP"
.It Li ecp256 Ta grp19 Ta 256 Ta "ECP"
.It Li ecp384 Ta grp20 Ta 384 Ta "ECP"
.It Li ecp521 Ta grp21 Ta 521 Ta "ECP"
.It Li ecp192 Ta grp25 Ta 192 Ta "ECP"
.It Li ecp224 Ta grp26 Ta 224 Ta "ECP"
.It Li brainpool224 Ta grp27 Ta 224 Ta "ECP, brainpoolP224r1"
.It Li brainpool256 Ta grp28 Ta 256 Ta "ECP, brainpoolP256r1"
.It Li brainpool384 Ta grp29 Ta 384 Ta "ECP, brainpoolP384r1"
.It Li brainpool512 Ta grp30 Ta 512 Ta "ECP, brainpoolP512r1"
.It Li curve25519 Ta - Ta 256 Ta "Curve25519"
.El
.Pp
The currently supported group types are either
MODP (exponentiation groups modulo a prime),
EC2N (elliptic curve groups over GF[2^N]),
ECP (elliptic curve groups modulo a prime),
or the non-standard Curve25519.
Please note that the EC2N groups are considered as insecure and only
provided for backwards compatibility.
.Sh EXAMPLES
The first example is intended for a server with clients connecting to
.Xr iked 8
as an IPsec gateway, or IKEv2 responder, using mutual public key
authentication and additional challenge-based EAP-MSCHAPv2 password
authentication:
.Bd -literal -offset indent
user "test" "password123"

ikev2 "win7" esp \e
	from 0.0.0.0/0 to 172.16.2.0/24 \e
	peer 10.0.0.0/8 local 192.168.56.0/24 \e
	eap "mschap-v2" \e
	config address 172.16.2.1 \e
	tag "$name-$id"
.Ed
.Pp
The next example allows peers to authenticate using a pre-shared key
.Sq foobar :
.Bd -literal -offset indent
ikev2 "big test" \e
	esp proto tcp \e
	from 10.0.0.0/8 port 23 to 20.0.0.0/8 port 40 \e
	from 192.168.1.1 to 192.168.2.2 \e
	peer any local any \e
	ikesa enc 3des auth hmac-sha1 group modp1024 \e
	childsa enc aes-128 auth hmac-sha1 \e
	srcid host.example.com \e
	dstid 192.168.0.254 \e
	psk "foobar"
.Ed
.Pp
The following example illustrates the last matching policy
evaluation for incoming connections on an IKEv2 gateway.
The peer 192.168.1.34 will always match the first policy because of the
.Ar quick
keyword;
connections from the peers 192.168.1.3 and 192.168.1.2 will be matched
by one of the last two policies;
any other connections from 192.168.1.0/24 will be matched by the
.Sq subnet
policy;
and any other connection will be matched by the
.Sq catch all
policy.
.Bd -literal -offset indent
ikev2 quick esp from 10.10.10.0/24 to 10.20.20.0/24 \e
	peer 192.168.1.34
ikev2 "catch all" esp from 10.0.1.0/24 to 10.0.2.0/24 \e
	peer any
ikev2 "subnet" esp from 10.0.3.0/24 to 10.0.4.0/24 \e
	peer 192.168.1.0/24
ikev2 esp from 10.0.5.0/30 to 10.0.5.4/30 peer 192.168.1.2
ikev2 esp from 10.0.5.8/30 to 10.0.5.12/30 peer 192.168.1.3
.Ed
.Sh SEE ALSO
.Xr enc 4 ,
.Xr ipsec 4 ,
.Xr ipsec.conf 5 ,
.Xr pf.conf 5 ,
.Xr ikectl 8 ,
.Xr iked 8
.Sh HISTORY
The
.Nm
file format first appeared in
.Ox 4.8 .
.Sh AUTHORS
The
.Xr iked 8
program was written by
.An Reyk Floeter Aq Mt reyk@@openbsd.org .
@


1.49
log
@correct verb pattern;
@
text
@d1 1
a1 1
.\" $OpenBSD: iked.conf.5,v 1.48 2017/03/27 10:06:41 reyk Exp $
d575 2
@


1.48
log
@Add support for RFC4754 (ECDSA) and RFC7427 authentication.

These modes provide stronger and more flexible ways for
authentication: while RSA public key auth relies on SHA-1 hashes, the
news modes use SHA2-256 and up to SHA2-512 hashes.

Original diff from markus@@ with patches from mikeb@@ and me.

OK mikeb@@ patrick@@
@
text
@d1 1
a1 1
.\" $OpenBSD: iked.conf.5,v 1.47 2017/03/13 15:07:51 patrick Exp $
d18 1
a18 1
.Dd $Mdocdate: March 13 2017 $
d486 1
a486 1
Non-psk modes will require to set up certificates and RSA or ECDSA public
@


1.47
log
@Clarify iked.conf(5) manpage in regards to IP compression.

ok markus@@ reyk@@
@
text
@d1 1
a1 1
.\" $OpenBSD: iked.conf.5,v 1.46 2017/01/04 12:31:01 mikeb Exp $
d18 1
a18 1
.Dd $Mdocdate: January 4 2017 $
d480 8
a487 3
Specify the mode to mutually authenticate the peers.
Non-psk modes will require to set up certificates and RSA public keys;
see
d499 6
d509 3
d513 1
a513 2
Use RSA public key authentication.
This is the default mode if no option is specified.
d515 2
@


1.46
log
@Remove modular exponential groups specified in RFC5114

Brought up by doug@@, ok reyk, djm, doug
@
text
@d1 1
a1 1
.\" $OpenBSD: iked.conf.5,v 1.45 2016/11/28 16:27:32 mikeb Exp $
d18 1
a18 1
.Dd $Mdocdate: November 28 2016 $
d249 4
a252 2
.It Ic ipcomp
Enable optional support for
d254 2
a255 1
the IP Payload Compression protocol.
@


1.45
log
@ikelifetime time spec is the same the one for lifetime
@
text
@d1 1
a1 1
.\" $OpenBSD: iked.conf.5,v 1.44 2015/12/09 21:41:49 naddy Exp $
d18 1
a18 1
.Dd $Mdocdate: December 9 2015 $
a817 3
.It Li modp1024-160 Ta grp22 Ta 2048 Ta "MODP, 160 bit Prime Order Subgroup"
.It Li modp2048-224 Ta grp23 Ta 2048 Ta "MODP, 224 bit Prime Order Subgroup"
.It Li modp2048-256 Ta grp24 Ta 2048 Ta "MODP, 256 bit Prime Order Subgroup"
@


1.44
log
@Remove plain DES encryption from IPsec.

DES is insecure since brute force attacks are practical due to its
short key length.

This removes support for DES-CBC encryption in ESP and in IKE main
and quick mode from the kernel, isakmpd(8), ipsecctl(8), and iked(8).

ok mikeb@@
@
text
@d1 1
a1 1
.\" $OpenBSD: iked.conf.5,v 1.43 2015/11/04 12:40:49 mikeb Exp $
d18 1
a18 1
.Dd $Mdocdate: November 4 2015 $
d446 4
d475 1
a475 1
IPsec security heavily depends on the frequent key renewals.
@


1.43
log
@Support Chacha20-Poly1305 for Child SAs;  ok reyk
@
text
@d1 1
a1 1
.\" $OpenBSD: iked.conf.5,v 1.42 2015/11/01 21:26:48 jmc Exp $
d18 1
a18 1
.Dd $Mdocdate: November 1 2015 $
a759 1
.It Li des Ta "56 bits" Ta "[ESP only]"
d784 1
a784 5
Use of DES as an encryption algorithm is considered to be insecure
since brute force attacks are practical due its short key length.
.Pp
DES requires 8 bytes to form a 56-bit key and 3DES requires 24 bytes
to form its 168-bit key.
@


1.42
log
@replace "can not" with "cannot";
@
text
@d1 1
a1 1
.\" $OpenBSD: iked.conf.5,v 1.41 2015/10/31 20:06:42 naddy Exp $
d18 1
a18 1
.Dd $Mdocdate: October 31 2015 $
d758 1
a758 1
.Bl -column "aes-128-gmac" "Key Length" "[ESP only]" -offset indent
d773 1
d778 1
a778 1
.Bl -column "aes-128-gmac" "Key Length" "[ESP only]" -offset indent
d795 2
a796 1
The same applies to AES-GCM and AES-GMAC.
@


1.41
log
@pasto
@
text
@d1 1
a1 1
.\" $OpenBSD: iked.conf.5,v 1.40 2015/10/19 21:32:13 naddy Exp $
d18 1
a18 1
.Dd $Mdocdate: October 19 2015 $
d797 1
a797 1
This is useful in setups where AH can not be used, e.g. when NAT is involved.
@


1.40
log
@break long lines in examples; ok jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: iked.conf.5,v 1.39 2015/07/14 13:06:37 jmc Exp $
d18 1
a18 1
.Dd $Mdocdate: July 14 2015 $
d746 2
a747 2
.Bl -column "Authentication" "Key Length" "[IKE only]" -offset indent
.It Em "Authentication" Ta Em "Key Length" Ta ""
@


1.39
log
@clarification from trondd;
ok mikeb
@
text
@d1 1
a1 1
.\" $OpenBSD: iked.conf.5,v 1.38 2015/02/28 21:51:57 bentley Exp $
d18 1
a18 1
.Dd $Mdocdate: February 28 2015 $
d681 4
a684 2
pass out on ix0 tagged ipsec-developers.example.com set queue developers
pass out on ix0 tagged ipsec-employees.example.com set queue employees
d723 2
a724 1
match out on enc0 from 192.168.1.0/24 to 192.168.2.0/24 nat-to 10.10.10.1
@


1.38
log
@Reduce usage of predefined strings in manpages.

Predefined strings are not very portable across troff implementations,
and they make the source much harder to read. Usually the intended
character can be written directly.

No output changes, except for two instances where the incorrect escape
was used in the first place.

tweaks + ok schwarze@@
@
text
@d1 1
a1 1
.\" $OpenBSD: iked.conf.5,v 1.37 2015/01/15 11:54:31 sobrado Exp $
d18 1
a18 1
.Dd $Mdocdate: January 15 2015 $
d834 1
a834 1
The first example is intended for clients connecting to
@


1.37
log
@tell the truth about DES.

joint work with djm@@ and jsing@@

ok djm@@
@
text
@d1 1
a1 1
.\" $OpenBSD: iked.conf.5,v 1.36 2015/01/02 18:28:23 sobrado Exp $
d18 1
a18 1
.Dd $Mdocdate: January 2 2015 $
d602 1
a602 1
.It proto ah \*(Ba esp
@


1.36
log
@PFS stands for Perfect Forward Secrecy.

ok reyk@@
@
text
@d1 1
a1 1
.\" $OpenBSD: iked.conf.5,v 1.35 2014/08/27 10:28:57 reyk Exp $
d18 1
a18 1
.Dd $Mdocdate: August 27 2014 $
d781 2
a782 2
Use of DES as an encryption algorithm is not recommended (except for
backwards compatibility) due to the short key length.
@


1.35
log
@Add support for Curve25519 using the public domain code that is found
in OpenSSH.  The "private use" DH group 1034 is based on the value
that was picked by strongswan recently.

OK mikeb@@ markus@@
@
text
@d1 1
a1 1
.\" $OpenBSD: iked.conf.5,v 1.34 2014/08/25 14:36:10 reyk Exp $
d18 1
a18 1
.Dd $Mdocdate: August 25 2014 $
d400 1
a400 1
option will only be used to enable Perfect Forwarding Security (PFS)
@


1.34
log
@Add support for DH groups 27-30 using the Brainpool curves which have
previously been added to LibreSSL's libcrypto.

ok markus@@ mikeb@@
@
text
@d1 1
a1 1
.\" $OpenBSD: iked.conf.5,v 1.33 2014/08/05 16:34:03 reyk Exp $
d18 1
a18 1
.Dd $Mdocdate: August 5 2014 $
d823 1
d829 2
a830 2
or
ECP (elliptic curve groups modulo a prime).
@


1.33
log
@Fix an example, nat-to requires to specify the "out" direction in pf rules.

From "Vigdis" via misc@@
can go in deraadt@@
@
text
@d1 1
a1 1
.\" $OpenBSD: iked.conf.5,v 1.32 2014/05/06 13:09:18 jmc Exp $
d18 1
a18 1
.Dd $Mdocdate: May 6 2014 $
d819 4
@


1.32
log
@zap stray word; ok markus
@
text
@d1 1
a1 1
.\" $OpenBSD: iked.conf.5,v 1.31 2014/05/06 10:24:22 markus Exp $
d721 1
a721 1
match on enc0 from 192.168.1.0/24 to 192.168.2.0/24 nat-to 10.10.10.1
@


1.31
log
@initiate ike sa rekeying (ikesalifetime keyword), re-queue pfkey
events while we are busy initiating child-SAs; ok mikeb@@
@
text
@d1 1
a1 1
.\" $OpenBSD: iked.conf.5,v 1.30 2014/04/28 16:23:19 jmc Exp $
d18 1
a18 1
.Dd $Mdocdate: April 28 2014 $
d443 1
a443 1
SA was in created.
@


1.30
log
@macro fixes for previous; ok reyk
@
text
@d1 1
a1 1
.\" $OpenBSD: iked.conf.5,v 1.29 2014/04/28 11:17:15 reyk Exp $
d438 8
@


1.29
log
@bump copyright
@
text
@d1 1
a1 1
.\" $OpenBSD: iked.conf.5,v 1.28 2014/04/28 11:16:18 reyk Exp $
d487 1
a487 1
.It Ic config Ar option Ar address
d504 1
a504 1
.It Ic netbios-server address
a513 1
.Pp
@


1.28
log
@Add missing documentation for ipcomp(4) support and the configuration
payloads.

ok sthen@@ krw@@
@
text
@d1 1
a1 1
.\" $OpenBSD: iked.conf.5,v 1.27 2014/02/17 15:07:23 markus Exp $
d3 1
a3 1
.\" Copyright (c) 2010-2013 Reyk Floeter <reyk@@openbsd.org>
d18 1
a18 1
.Dd $Mdocdate: February 17 2014 $
@


1.27
log
@basic OCSP support. enable with 'set ocsp "http://10.0.0.10:8888/"'
ok mikeb@@
@
text
@d1 1
a1 1
.\" $OpenBSD: iked.conf.5,v 1.26 2013/11/01 10:42:38 henning Exp $
d18 1
a18 1
.Dd $Mdocdate: November 1 2013 $
d249 4
d487 28
@


1.26
log
@altq -> new queue in examples
From: Arto Jonsson <ajonsson at kapsi.fi>
@
text
@d1 1
a1 1
.\" $OpenBSD: iked.conf.5,v 1.25 2013/07/16 09:45:28 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: July 16 2013 $
d139 7
@


1.25
log
@Add missing .Mt macros for AUTHORS email addresses.
From Jan Stary <hans at stare dot cz>.
ok jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: iked.conf.5,v 1.24 2013/05/22 10:32:09 sthen Exp $
d18 1
a18 1
.Dd $Mdocdate: May 22 2013 $
d627 5
a631 6
altq on ix0 cbq bandwidth 1000Mb \e
	queue { deflt, developers, employees, ipsec }
    queue deflt bandwidth 10% priority 0 cbq(default ecn)
    queue developers bandwidth 75% priority 7 cbq(borrow red)
    queue employees bandwidth 5% cbq(red)
    queue ipsec bandwidth 10% cbq(red)
d633 1
a633 1
pass out on ix0 proto esp queue ipsec
d635 2
a636 2
pass out on ix0 tagged ipsec-developers.example.com queue developers
pass out on ix0 tagged ipsec-employees.example.com queue employees
@


1.24
log
@Move the gmac/null ciphers to a different table block, clearly labelled as
not doing encryption.  ok reyk@@
@
text
@d1 1
a1 1
.\" $OpenBSD: iked.conf.5,v 1.23 2013/03/05 19:16:01 sobrado Exp $
d18 1
a18 1
.Dd $Mdocdate: March 5 2013 $
d854 1
a854 1
.An Reyk Floeter Aq reyk@@openbsd.org .
@


1.23
log
@cross referencing the manual page is better.

change suggested and ok'd by jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: iked.conf.5,v 1.22 2013/03/05 14:51:00 sobrado Exp $
d723 7
a732 2
.It Li blowfish Ta "160 bits" Ta "[ESP only]"
.It Li cast Ta "128 bits" Ta "[ESP only]"
@


1.22
log
@fix program name used in AUTHORS section.

ok mikeb@@
@
text
@d1 1
a1 1
.\" $OpenBSD: iked.conf.5,v 1.21 2013/01/08 10:38:19 reyk Exp $
d18 1
a18 1
.Dd $Mdocdate: January 8 2013 $
d847 1
a847 1
.Nm iked
@


1.21
log
@Remove private CVS tag from an obsolete repository and bump copyright
to 2013 while I'm here... this is my way of saying "happy new year!".
@
text
@d1 1
a1 1
.\" $OpenBSD: iked.conf.5,v 1.20 2012/09/18 12:07:59 reyk Exp $
d18 1
a18 1
.Dd $Mdocdate: September 18 2012 $
d847 1
a847 1
.Nm
@


1.20
log
@update email addresses to match reality.
sure jsg@@ mikeb@@
@
text
@d1 1
a1 2
.\" $OpenBSD: iked.conf.5,v 1.19 2012/06/30 14:51:31 naddy Exp $
.\" $vantronix: iked.conf.5,v 1.10 2010/06/03 16:13:40 reyk Exp $
d3 1
a3 1
.\" Copyright (c) 2010 Reyk Floeter <reyk@@openbsd.org>
d18 1
a18 1
.Dd $Mdocdate: June 30 2012 $
@


1.19
log
@enable use of AES-{192,256}-CTR, and explicitly of AES-128-CTR, for IPsec ESP
ok mikeb@@
@
text
@d1 1
a1 1
.\" $OpenBSD: iked.conf.5,v 1.18 2012/05/23 16:40:07 mikeb Exp $
d4 1
a4 1
.\" Copyright (c) 2010 Reyk Floeter <reyk@@vantronix.net>
d19 1
a19 1
.Dd $Mdocdate: May 23 2012 $
d850 1
a850 1
.An Reyk Floeter Aq reyk@@vantronix.net .
@


1.18
log
@fixup from/to specification
@
text
@d1 1
a1 1
.\" $OpenBSD: iked.conf.5,v 1.17 2012/04/24 14:56:09 jmc Exp $
d19 1
a19 1
.Dd $Mdocdate: April 24 2012 $
d718 3
a720 1
.It Li aes-ctr Ta "160 bits" Ta "[ESP only]"
@


1.17
log
@take a stab at documenting when arguments need quoted, and valid macro
characters;

prompted by a diff from robert peichaer org

thanks gilles and henning for feedback
ok deraadt zinke
@
text
@d1 1
a1 1
.\" $OpenBSD: iked.conf.5,v 1.16 2012/04/18 13:01:29 jmc Exp $
d19 1
a19 1
.Dd $Mdocdate: April 18 2012 $
d787 1
a787 1
	from 172.16.2.0/24 to 0.0.0.0/0 \e
@


1.16
log
@undo an error introduced by myself in previous;
spotted by Sebastian Rother
@
text
@d1 1
a1 1
.\" $OpenBSD: iked.conf.5,v 1.15 2011/09/03 22:59:08 jmc Exp $
d19 1
a19 1
.Dd $Mdocdate: September 3 2011 $
d85 3
d99 2
a100 2
Macro names must start with a letter, and may contain letters, digits
and underscores.
@


1.15
log
@make -column lists pretty again;

specifically, rewrite them to permit some markup in the column headers,
and use "Ta" instead of literal tabs; mandoc does not currently match groff
100%, but a mandoc fix may be some time off, and we've gone enough releases
with poorly formatting column lists.

in some cases i have rewritten the lists as -tag, where -column made
little sense.
@
text
@d1 1
a1 1
.\" $OpenBSD: iked.conf.5,v 1.14 2011/08/19 19:59:51 jmc Exp $
d19 1
a19 1
.Dd $Mdocdate: August 19 2011 $
d724 1
a724 1
 Ta "".It Li null Ta "" Ta "[ESP only]"
@


1.14
log
@as with other list types, column lists generally do not need a Pp/-compact
construct;

this also sidesteps what seems to be a problem with mandoc, in that
"-column -compact" seems to mess up the formatting. thus these pages should
now have their lists formatted nicely (i.e. correctly aligned and with indent
applied);

as a side note, the fact that headers are not properly marked up is another
issue which will be addressed separately (a mandoc fix is needed, i think).
i have fudged a few of these to mark up properly, since the workaround does
make sense for some pages.

as another side note, i haven;t fixed man7, as i need to prepare a separate
diff for kristaps and ingo.
@
text
@d1 1
a1 1
.\" $OpenBSD: iked.conf.5,v 1.13 2011/01/21 12:34:11 jmc Exp $
d19 1
a19 1
.Dd $Mdocdate: January 21 2011 $
d684 2
a685 2
.Bl -column "authenticationXX" "Key Length" -offset indent
.It Em Authentication	Key Length	Truncated Length
d696 2
a697 2
.Bl -column "authenticationXX" "Key Length" -offset indent
.It Em Authentication	Key Length
d708 2
a709 2
.Bl -column "authenticationXX" "Key Length" -offset indent
.It Em Cipher	Key Length
d711 4
a714 4
.It Li 3des Ta "168 bits"
.It Li aes-128 Ta "128 bits"
.It Li aes-192 Ta "192 bits"
.It Li aes-256 Ta "256 bits"
d724 1
a724 1
.It Li null Ta "" Ta "[ESP only]"
d745 2
a746 2
.Bl -column "modpXXXX-XXX" "grpXX" "XXXX" "Alias" -offset indent
.It Em Name	Group	Size	Type
@


1.13
log
@tweak previous;
@
text
@d1 1
a1 1
.\" $OpenBSD: iked.conf.5,v 1.12 2011/01/21 11:56:00 reyk Exp $
d684 1
a684 2
.Pp
.Bl -column "authenticationXX" "Key Length" -offset indent -compact
d696 1
a696 2
.Pp
.Bl -column "authenticationXX" "Key Length" -offset indent -compact
d708 1
a708 2
.Pp
.Bl -column "authenticationXX" "Key Length" -offset indent -compact
d745 1
a745 2
.Pp
.Bl -column "modpXXXX-XXX" "grpXX" "XXXX" "Alias" -offset indent -compact
@


1.12
log
@Reimplement the iked(8) policy evaluation for incoming connections to
use the last matching semantics of PF.  The previous rbtree-based
implementation was broken and tried to do a longest prefix match.  But
instead of prefix match and using radix-trees to fix it I decided with
mikeb@@ to implement it as last matching policy evaluation.  The last
matching policy wins; the "quick" keyword can enforce first matching;
additional keywords like "skip" are specific to iked(8).  See
iked.conf(5) for more details.

The implementation also uses skip steps based on PF's code.  It
significantly speeds up the evaluation of many policies but also adds
a little delay when loading them (only noticeable with thousands of
policies).  This allows iked(8) to scale well with thousands of
configured policies but I also liked the fact to have skip steps in
another piece of code.

ok dhartmei@@ for using his skip step code under the ISC license in policy.c
ok mikeb@@, jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: iked.conf.5,v 1.11 2010/12/22 16:40:06 reyk Exp $
d19 1
a19 1
.Dd $Mdocdate: December 22 2010 $
d210 1
a210 1
.Ar default.
d266 1
a266 1
address families, eg. IPv6 flows negotiated by IPv4 endpoints.
@


1.11
log
@Tweak the grammar a little bit by requiring a "bytes" keyword before the
bytes value ("lifetime 123 bytes 456" instead of "lifetime 123 456").
@
text
@d1 1
a1 1
.\" $OpenBSD: iked.conf.5,v 1.10 2010/12/22 16:22:27 mikeb Exp $
d168 18
a190 3
.Op Ar mode
.Op Ar encap
.\" .Op Ar tmode
d192 3
d202 20
a221 1
.Pp
d240 1
a240 1
.Pp
d249 1
a249 1
.\" .Pp
d258 9
d808 24
@


1.10
log
@child sa rekeying revamp plus numerous bugfixes;
with suggestions and OK from reyk
@
text
@d1 1
a1 1
.\" $OpenBSD: iked.conf.5,v 1.9 2010/09/23 11:42:36 mikeb Exp $
d19 1
a19 1
.Dd $Mdocdate: September 23 2010 $
d379 1
a379 1
.It Ic lifetime Ar time Op Ar bytes
@


1.9
log
@support for aes-gcm

OK reyk
@
text
@d1 1
a1 1
.\" $OpenBSD: iked.conf.5,v 1.8 2010/07/01 02:15:08 reyk Exp $
d19 1
a19 1
.Dd $Mdocdate: July 1 2010 $
d379 26
@


1.8
log
@Add support for the tap extension (ikev2 ... tap "enc1") that will
tell the kernel to send all IPsec traffic for derived SAs to the
specified enc(4) interface instead of enc0.
@
text
@d1 1
a1 1
.\" $OpenBSD: iked.conf.5,v 1.7 2010/06/26 18:32:34 reyk Exp $
d19 1
a19 1
.Dd $Mdocdate: June 26 2010 $
d647 6
d668 1
d670 1
a670 1
Using NULL with ESP will only provide authentication.
@


1.7
log
@Include the Id type in the generated SA tag that is passed to the
kernel, just like isakmpd does it.  In difference to isakmpd, the Id
type is printed in capital letters, eg. FQDN/foo.example.com, because
it is using the existing print_map() API.  For consistency, rename a
few Id types in grammar and code from the RFC-names to the
OpenBSD-style names; including RFC822_ADDR to UFQDN, IPV4_ADDR to just
IPV4, DER_ASN1_DN to ASN1_DN etc.
@
text
@d1 1
a1 1
.\" $OpenBSD: iked.conf.5,v 1.5 2010/06/10 14:24:03 reyk Exp $
d19 1
a19 1
.Dd $Mdocdate: June 23 2010 $
d452 10
d486 1
a486 1
Interface for outgoing traffic before it's been encapsulated,
d566 1
a566 1
The tags will be assigned by the following
d568 3
a570 1
example:
d573 1
a573 1
	tag ipsec-$domain
@


1.6
log
@rename the ec groups to either ec2n or ecp (eg. ec155 -> ec2n155 or
ec521 -> ecp521).  this matches the common naming for ec groups better.
@
text
@d19 1
a19 1
.Dd $Mdocdate: June 10 2010 $
d348 3
a350 3
.Dq DER_ASN1_DN ,
.Dq IPV4_ADDR ,
.Dq IPV6_ADDR ,
d352 1
a352 1
.Dq RFC822_ADDR
d358 2
a359 2
will use RFC822_ADDR as the ID type.
The DER_ASN1_DN type will be used if the string starts with a slash
d363 1
a363 1
the ID types IPV4_ADDR or IPV6_ADDR will be used.
d424 1
a424 1
.Ar foo.example.com .
d429 2
a430 2
from DER_ASN1_DN IDs, for example
.Ar /C=DE/../CN=10.1.1.1/..
d434 1
a434 1
Extract the domain from IDs of type FQDN, RFC822_ADDR or DER_ASN1_DN.
d443 1
a443 1
.Ar foo.example.com
d445 1
a445 1
.Ar user@@example.com ,
@


1.5
log
@don't print keywords as underlined arguments.
@
text
@d1 1
a1 1
.\" $OpenBSD: iked.conf.5,v 1.4 2010/06/10 14:08:37 reyk Exp $
d662 2
a663 2
.It Li ec155 Ta grp3 Ta 155 Ta "EC2N [insecure]"
.It Li ec185 Ta grp4 Ta 185 Ta "EC2N [insecure]"
d670 3
a672 3
.It Li ec256 Ta grp19 Ta 256 Ta "ECP"
.It Li ec384 Ta grp20 Ta 384 Ta "ECP"
.It Li ec521 Ta grp21 Ta 521 Ta "ECP"
d676 2
a677 2
.It Li ec192 Ta grp25 Ta 192 Ta "ECP"
.It Li ec224 Ta grp26 Ta 224 Ta "ECP"
@


1.4
log
@add new commands: the couple/decouple commands will set loading of the
learned flows and SAs to the kernel which is useful for testing and
debugging. the active/passive commands are required to use iked
with sasyncd(8);  sasyncd just needs to call "ikectl active/passive" or
send the appropriate imsg to support iked but this is not implemented yet.
@
text
@d1 1
a1 1
.\" $OpenBSD: iked.conf.5,v 1.3 2010/06/07 08:40:21 jmc Exp $
d19 1
a19 1
.Dd $Mdocdate: June 7 2010 $
d112 1
a112 1
.It Ic set Ar active
d117 1
a117 1
.It Ic set Ar passive
d131 1
a131 1
.It Ic set Ar couple
d134 1
a134 1
.It Ic set Ar decouple
@


1.3
log
@various tweaks; ok reyk
@
text
@d1 1
a1 1
.\" $OpenBSD: iked.conf.5,v 1.2 2010/06/03 21:57:15 reyk Exp $
d19 1
a19 1
.Dd $Mdocdate: June 3 2010 $
d112 25
@


1.2
log
@manpage tweaks
@
text
@d1 1
a1 1
.\" $OpenBSD: iked.conf.5,v 1.1 2010/06/03 16:41:12 reyk Exp $
d50 1
a50 1
.Sx AUTOMATIC KEYING POLICIES,
d58 1
a58 2
Those procedures are not documented within this page,
see
a110 1
The commands are as follows:
d122 1
a122 1
.Ar username
d156 1
a156 1
or any incluced files.
d161 1
a161 1
specifies the IKE mode to use:
d212 1
a212 1
.Oo ( Ar srcnat ) Oc
a291 1
.Pp
d302 1
a302 1
exchange, additional Child SAs may be negotiated with additional
d356 1
a356 1
Non-psk modes will require to set up certificates and RSA public keys,
d402 1
a402 1
will extract the common name 
d656 1
a656 1
MODP (exponentiation groups modulo a prime), 
d695 3
d699 1
a699 5
.Xr iked 8 ,
.Xr ipsec 4 ,
.Xr ipsec.conf 5
.\".Xr ipcomp 4 ,
.Xr pf.conf 5
@


1.1
log
@Import iked, a new implementation of the IKEv2 protocol.

iked(8) is an automatic keying daemon for IPsec, like isakmpd(8), that
IPsec creates flows and SAs automatically.  Unlike isakmpd, iked(8)
implements the newer IKEv2 protocol instead of IKEv1/ISAKMP.  The
daemon is still work-in-progress and not enabled in the builds, but is
already able to establish IKEv2 sessions with some other IKEv2
implementations as a responder.

with lots of help and debugging by jsg@@
ok deraadt@@
@
text
@d1 1
a1 1
.\" $OpenBSD: ipsec.conf.5,v 1.124 2010/01/02 20:15:15 schwarze Exp $
a237 5
Host addresses are parsed as type
.Dq IPV4_ADDR ;
adding the suffix /32 will change the type to
.Dq IPV4_ADDR_SUBNET ,
which can improve interoperability with some IKE implementations.
d256 1
a256 1
Unless we are multi-homed or have aliases,
d370 1
a370 1
.Ar MSCHAP_V2 .
d445 1
a445 1
Interface for ISAKMP traffic and encapsulated IPsec traffic.
d447 1
a447 1
ISAKMP traffic on the external interface.
d449 1
a449 1
ISAKMP NAT-Traversal traffic on the external interface.
@

