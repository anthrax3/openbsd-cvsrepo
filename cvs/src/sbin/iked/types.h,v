head	1.28;
access;
symbols
	OPENBSD_6_1_BASE:1.28
	OPENBSD_6_0:1.25.0.4
	OPENBSD_6_0_BASE:1.25
	OPENBSD_5_9:1.25.0.2
	OPENBSD_5_9_BASE:1.25
	OPENBSD_5_8:1.19.0.4
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.18.0.2
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.18.0.6
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.18.0.4
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.17.0.4
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.17.0.2
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.11.0.2
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.4
	OPENBSD_5_0:1.10.0.2
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.9.0.2
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.6.0.2
	OPENBSD_4_8_BASE:1.6;
locks; strict;
comment	@ * @;


1.28
date	2017.03.27.10.43.53;	author mikeb;	state Exp;
branches;
next	1.27;
commitid	3tQzvpAXTrEiRD3X;

1.27
date	2017.03.27.10.21.19;	author reyk;	state Exp;
branches;
next	1.26;
commitid	luuYVyfWc8UoYDKf;

1.26
date	2017.01.03.17.51.38;	author reyk;	state Exp;
branches;
next	1.25;
commitid	l0crj6yP4TgYYXus;

1.25
date	2016.01.27.20.20.30;	author gsoares;	state Exp;
branches;
next	1.24;
commitid	2W3ORktJMJnylKCL;

1.24
date	2015.11.23.19.28.34;	author reyk;	state Exp;
branches;
next	1.23;
commitid	m6hksQq6WXPE2kks;

1.23
date	2015.10.22.15.55.18;	author reyk;	state Exp;
branches;
next	1.22;
commitid	9R73DxVDj9dmoXct;

1.22
date	2015.10.19.11.25.35;	author reyk;	state Exp;
branches;
next	1.21;
commitid	HzcDW70HFbhaqvT8;

1.21
date	2015.08.21.11.59.28;	author reyk;	state Exp;
branches;
next	1.20;
commitid	CNs9dXqQUQ09vB19;

1.20
date	2015.08.19.14.12.43;	author reyk;	state Exp;
branches;
next	1.19;
commitid	AVPSAC8CcLDWTPgE;

1.19
date	2015.06.11.18.49.09;	author reyk;	state Exp;
branches;
next	1.18;
commitid	r36j1ZCD0yPK3S9O;

1.18
date	2014.02.17.15.07.23;	author markus;	state Exp;
branches;
next	1.17;

1.17
date	2013.01.08.10.38.19;	author reyk;	state Exp;
branches;
next	1.16;

1.16
date	2012.11.29.15.08.08;	author reyk;	state Exp;
branches;
next	1.15;

1.15
date	2012.10.23.14.36.18;	author reyk;	state Exp;
branches;
next	1.14;

1.14
date	2012.10.22.10.25.17;	author reyk;	state Exp;
branches;
next	1.13;

1.13
date	2012.10.11.08.23.12;	author reyk;	state Exp;
branches;
next	1.12;

1.12
date	2012.09.18.12.07.59;	author reyk;	state Exp;
branches;
next	1.11;

1.11
date	2012.07.08.11.48.20;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2011.05.05.12.17.10;	author reyk;	state Exp;
branches;
next	1.9;

1.9
date	2011.01.21.11.56.00;	author reyk;	state Exp;
branches;
next	1.8;

1.8
date	2011.01.17.18.49.35;	author mikeb;	state Exp;
branches;
next	1.7;

1.7
date	2010.12.22.16.22.27;	author mikeb;	state Exp;
branches;
next	1.6;

1.6
date	2010.06.29.21.04.42;	author reyk;	state Exp;
branches;
next	1.5;

1.5
date	2010.06.10.14.17.48;	author reyk;	state Exp;
branches;
next	1.4;

1.4
date	2010.06.10.14.08.37;	author reyk;	state Exp;
branches;
next	1.3;

1.3
date	2010.06.07.14.15.27;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2010.06.03.20.28.22;	author reyk;	state Exp;
branches;
next	1.1;

1.1
date	2010.06.03.16.41.12;	author reyk;	state Exp;
branches;
next	;


desc
@@


1.28
log
@Factor out flows into separate configuration messages

We reach an imsg payload limit with just a few traffic selectors
so in order to load more we need to split them up and send separately.

Suggested and OK reyk
@
text
@/*	$OpenBSD: types.h,v 1.27 2017/03/27 10:21:19 reyk Exp $	*/

/*
 * Copyright (c) 2010-2013 Reyk Floeter <reyk@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef IKED_TYPES_H
#define IKED_TYPES_H

#ifndef IKED_USER
#define IKED_USER		"_iked"
#endif

#ifndef IKED_CONFIG
#define IKED_CONFIG		"/etc/iked.conf"
#endif

#define IKED_SOCKET		"/var/run/iked.sock"

#ifndef IKED_CA
#define IKED_CA			"/etc/iked/"
#endif

#define IKED_CA_DIR		"ca/"
#define IKED_CRL_DIR		"crls/"
#define IKED_CERT_DIR		"certs/"
#define IKED_PUBKEY_DIR		"pubkeys/"
#define IKED_PRIVKEY		IKED_CA "private/local.key"
#define IKED_PUBKEY		"local.pub"

#define IKED_OCSP_RESPCERT	"ocsp/responder.crt"
#define IKED_OCSP_ISSUER	"ocsp/issuer.crt"

#define IKED_OPT_VERBOSE	0x00000001
#define IKED_OPT_NOACTION	0x00000002
#define IKED_OPT_NONATT		0x00000004
#define IKED_OPT_NATT		0x00000008
#define IKED_OPT_PASSIVE	0x00000010
#define IKED_OPT_NOIPV6BLOCKING	0x00000020

#define IKED_IKE_PORT		500
#define IKED_NATT_PORT		4500

#define IKED_NONCE_MIN		16	/* XXX 128 bits */
#define IKED_NONCE_SIZE		32	/* XXX 256 bits */

#define IKED_COOKIE_MIN		1	/* min 1 bytes */
#define IKED_COOKIE_MAX		64	/* max 64 bytes */

#define IKED_ID_SIZE		1024	/* XXX should be dynamic */
#define IKED_PSK_SIZE		1024	/* XXX should be dynamic */
#define IKED_MSGBUF_MAX		8192
#define IKED_CFG_MAX		16	/* maximum CP attributes */
#define IKED_TAG_SIZE		64
#define IKED_CYCLE_BUFFERS	8	/* # of static buffers for mapping */
#define IKED_PASSWORD_SIZE	256	/* limited by most EAP types */

#define IKED_LIFETIME_BYTES	536870912 /* 512 Mb */
#define IKED_LIFETIME_SECONDS	10800	  /* 3 hours */

#define IKED_E			0x1000	/* Decrypted flag */

struct iked_constmap {
	unsigned int	 cm_type;
	const char	*cm_name;
	const char	*cm_descr;
};

struct iked_transform {
	uint8_t				 xform_type;
	uint16_t			 xform_id;
	uint16_t			 xform_length;
	uint16_t			 xform_keylength;
	unsigned int			 xform_score;
	struct iked_constmap		*xform_map;
};

enum imsg_type {
	IMSG_NONE,
	IMSG_CTL_OK,
	IMSG_CTL_FAIL,
	IMSG_CTL_VERBOSE,
	IMSG_CTL_NOTIFY,
	IMSG_CTL_RELOAD,
	IMSG_CTL_RESET,
	IMSG_CTL_COUPLE,
	IMSG_CTL_DECOUPLE,
	IMSG_CTL_ACTIVE,
	IMSG_CTL_PASSIVE,
	IMSG_COMPILE,
	IMSG_UDP_SOCKET,
	IMSG_PFKEY_SOCKET,
	IMSG_IKE_MESSAGE,
	IMSG_CFG_POLICY,
	IMSG_CFG_FLOW,
	IMSG_CFG_USER,
	IMSG_CERTREQ,
	IMSG_CERT,
	IMSG_CERTVALID,
	IMSG_CERTINVALID,
	IMSG_OCSP_FD,
	IMSG_OCSP_URL,
	IMSG_AUTH,
	IMSG_PRIVKEY,
	IMSG_PUBKEY
};

enum privsep_procid {
	PROC_PARENT = 0,
	PROC_CONTROL,
	PROC_CERT,
	PROC_IKEV2,
	PROC_MAX
};

enum flushmode {
	RESET_RELOAD	= 0,
	RESET_ALL,
	RESET_CA,
	RESET_POLICY,
	RESET_SA,
	RESET_USER
};

#ifndef nitems
#define nitems(_a)   (sizeof((_a)) / sizeof((_a)[0]))
#endif

#endif /* IKED_TYPES_H */
@


1.27
log
@Add support to reflect the responder IKEv2 COOKIE.

This fixes connecting to Azure VPN and other implementations that
implement the IKEv2 COOKIE mechanism on the responder side.  Azure
decides to send you a responder COOKIE after too many connection
attempts - we have to keep it and reflect it to establish a
connection.  This implementation is only for the initiator (client)
side, we do not support sending COOKIEs on the responder (server) side
yet.

OK patrick@@ mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: types.h,v 1.26 2017/01/03 17:51:38 reyk Exp $	*/
d107 1
@


1.26
log
@Fix pledge of the ca process by calling the right function on startup.
As a related change, load the local.pub and local.key keys after
privsep and reload them on SIGHUP/reload.

OK mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: types.h,v 1.25 2016/01/27 20:20:30 gsoares Exp $	*/
d58 3
@


1.25
log
@fyx typo. s,dynanic,dynamic,
OK reyk
@
text
@d1 1
a1 1
/*	$OpenBSD: types.h,v 1.24 2015/11/23 19:28:34 reyk Exp $	*/
d111 3
a113 1
	IMSG_AUTH
@


1.24
log
@Replace socket_set_blockmode() and fcntl(fd, F_SETFL, O_NONBLOCK) calls
with the SOCK_NONBLOCK flag to socket() and accept4().

OK claudio@@ jung@@
@
text
@d1 1
a1 1
/*	$OpenBSD: types.h,v 1.23 2015/10/22 15:55:18 reyk Exp $	*/
d59 1
a59 1
#define IKED_ID_SIZE		1024	/* XXX should be dynanic */
@


1.23
log
@iked hereby pledges that it will run with restricted system
operations.  This adds pledge(2) too all processes, including the iked
parent process; the existing privsep design has been improved for
better pledgeability.  There haven't been any serious problems as it
was already sane (eg. by receiving the PFKEYv2 and UDP sockets via fd
passing).  The control socket moved to an independent process to
remove some abilities from the cert process.

Committed in agreement with many but nobody was brave enough to OK it.

Better testing will happen with having it in the tree.
"It's the truth" deraadt@@
"Let's see what happens" benno@@
@
text
@d1 1
a1 1
/*	$OpenBSD: types.h,v 1.22 2015/10/19 11:25:35 reyk Exp $	*/
a119 5
};

enum blockmodes {
	BM_NORMAL,
	BM_NONBLOCK
@


1.22
log
@Remove the ikev1 stub - Since I started iked, it has an empty privsep
process for ISAKMP+IKEv1.  I kept it to let somebody either contribute
the old protocol one day, I never intended to implement IKEv1 myself,
or to add a new kind of pipe to isakmpd to hand off IKEv1 messages.
As IKEv2 is widely supported by all major OS and networking vendors
now, I'm happy to scrap the idea of supporting ISAKMP+IKEv1.  It is
still possible to use isakmpd for legacy VPNs.

OK mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: types.h,v 1.21 2015/08/21 11:59:28 reyk Exp $	*/
d116 2
a118 1
	PROC_CERT,
a120 3

/* Attach the control socket to the following process */
#define PROC_CONTROL	PROC_CERT
@


1.21
log
@Switch iked to C99-style fixed-width integer types.

OK mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: types.h,v 1.20 2015/08/19 14:12:43 reyk Exp $	*/
a115 1
	PROC_IKEV1,
@


1.20
log
@spacing (no binary change, verified with checksums)
@
text
@d1 1
a1 1
/*	$OpenBSD: types.h,v 1.19 2015/06/11 18:49:09 reyk Exp $	*/
d73 1
a73 1
	u_int		 cm_type;
d79 5
a83 5
	u_int8_t			 xform_type;
	u_int16_t			 xform_id;
	u_int16_t			 xform_length;
	u_int16_t			 xform_keylength;
	u_int				 xform_score;
@


1.19
log
@Use "compliant" header guards by avoiding the reserved '_' namespace.

Pointed out by Markus Elfring

OK mikeb@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: types.h,v 1.18 2014/02/17 15:07:23 markus Exp $	*/
d23 1
a23 1
#define IKED_USER	"_iked"
d27 1
a27 1
#define IKED_CONFIG	"/etc/iked.conf"
d29 2
a30 1
#define IKED_SOCKET	"/var/run/iked.sock"
d33 1
a33 1
#define IKED_CA		"/etc/iked/"
a34 6
#define IKED_CA_DIR	"ca/"
#define IKED_CRL_DIR	"crls/"
#define IKED_CERT_DIR	"certs/"
#define IKED_PUBKEY_DIR	"pubkeys/"
#define IKED_PRIVKEY	IKED_CA "private/local.key"
#define IKED_PUBKEY	"local.pub"
d36 9
a44 2
#define IKED_OCSP_RESPCERT        "ocsp/responder.crt"
#define IKED_OCSP_ISSUER          "ocsp/issuer.crt"
@


1.18
log
@basic OCSP support. enable with 'set ocsp "http://10.0.0.10:8888/"'
ok mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: types.h,v 1.17 2013/01/08 10:38:19 reyk Exp $	*/
d19 2
a20 2
#ifndef _IKED_TYPES_H
#define _IKED_TYPES_H
d141 1
a141 1
#endif /* _IKED_TYPES_H */
@


1.17
log
@Remove private CVS tag from an obsolete repository and bump copyright
to 2013 while I'm here... this is my way of saying "happy new year!".
@
text
@d1 1
a1 1
/*	$OpenBSD: types.h,v 1.16 2012/11/29 15:08:08 reyk Exp $	*/
d41 3
d107 2
@


1.16
log
@Prevent VPN traffic leakages in dual-stack hosts/networks.
See http://tools.ietf.org/html/draft-gont-opsec-vpn-leakages.

We forcibly block IPv6 traffic by loading a "flow esp out from ::/0 to
::/0 type deny" unless the protocol is used in any of the flows.  Note
that this will block any IPv6 traffic, superseding routes and pf, on
the host by default when iked is running with IPv4 flows only.  This
auto-blocking feature can be disabled by specifying the "-6" command
line flag to iked.

Thanks to Fernando Gont.

ok mikeb@@
@
text
@d1 1
a1 2
/*	$OpenBSD: types.h,v 1.15 2012/10/23 14:36:18 reyk Exp $	*/
/*	$vantronix: types.h,v 1.24 2010/05/11 12:05:56 reyk Exp $	*/
d4 1
a4 1
 * Copyright (c) 2010 Reyk Floeter <reyk@@openbsd.org>
@


1.15
log
@Allow to overwrite a few more definitions like file paths from the
Makefile.  No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: types.h,v 1.14 2012/10/22 10:25:17 reyk Exp $	*/
d47 1
@


1.14
log
@Fix NAT-T support in iked, both on the initiator and the responder
side.  Also add a new command line option -t to optionally enforce
NAT-T with UDP encapsulation on port 4500.

Tested by mikeb@@ and me
ok mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: types.h,v 1.13 2012/10/11 08:23:12 reyk Exp $	*/
d23 1
d25 1
@


1.13
log
@The RSA public keys will be found in a subdirectory of /etc/iked/
called "pubkeys" not "pubkey".

Found by Michael Cardell "MC" Widerkrantz
@
text
@d1 1
a1 1
/*	$OpenBSD: types.h,v 1.12 2012/09/18 12:07:59 reyk Exp $	*/
d43 2
a44 1
#define IKED_OPT_PASSIVE	0x00000008
@


1.12
log
@update email addresses to match reality.
sure jsg@@ mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: types.h,v 1.11 2012/07/08 11:48:20 deraadt Exp $	*/
d36 1
a36 1
#define IKED_PUBKEY_DIR	"pubkey/"
@


1.11
log
@if you use nitems() in userland, you must define it yourself
discussed with guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: types.h,v 1.10 2011/05/05 12:17:10 reyk Exp $	*/
d5 1
a5 1
 * Copyright (c) 2010 Reyk Floeter <reyk@@vantronix.net>
@


1.10
log
@rename iked_proc* to privsep_proc*.  no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: types.h,v 1.9 2011/01/21 11:56:00 reyk Exp $	*/
d128 4
@


1.9
log
@Reimplement the iked(8) policy evaluation for incoming connections to
use the last matching semantics of PF.  The previous rbtree-based
implementation was broken and tried to do a longest prefix match.  But
instead of prefix match and using radix-trees to fix it I decided with
mikeb@@ to implement it as last matching policy evaluation.  The last
matching policy wins; the "quick" keyword can enforce first matching;
additional keywords like "skip" are specific to iked(8).  See
iked.conf(5) for more details.

The implementation also uses skip steps based on PF's code.  It
significantly speeds up the evaluation of many policies but also adds
a little delay when loading them (only noticeable with thousands of
policies).  This allows iked(8) to scale well with thousands of
configured policies but I also liked the fact to have skip steps in
another piece of code.

ok dhartmei@@ for using his skip step code under the ISC license in policy.c
ok mikeb@@, jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: types.h,v 1.8 2011/01/17 18:49:35 mikeb Exp $	*/
d104 1
a104 1
enum iked_procid {
@


1.8
log
@Add initial acquire mode support and use it whenever Windows peers decide
to drop Child SA based on the inactivity timer.  In this case we instruct
the kernel to send us an acquire message upon receiving a packet for those
hosts and initiate a Child SA creation exchange ourselves.

ok reyk
@
text
@d1 1
a1 1
/*	$OpenBSD: types.h,v 1.7 2010/12/22 16:22:27 mikeb Exp $	*/
d91 1
@


1.7
log
@child sa rekeying revamp plus numerous bugfixes;
with suggestions and OK from reyk
@
text
@d1 1
a1 1
/*	$OpenBSD: types.h,v 1.6 2010/06/29 21:04:42 reyk Exp $	*/
d56 1
a56 1
#define IKED_CYCLE_BUFFERS	4	/* # of static buffers for mapping */
@


1.6
log
@add code to lookup the RSA public keys in /etc/iked/pubkeys/ as an
alternative to X.509 CA verification.  this will be needed to support public
key authentication like isakmpd does;  a few bits are still missing.
@
text
@d1 1
a1 1
/*	$OpenBSD: types.h,v 1.5 2010/06/10 14:17:48 reyk Exp $	*/
d58 3
@


1.5
log
@Add the -S flag which does the same as "set passive" but matches the
isakmpd flag.
@
text
@d1 1
a1 1
/*	$OpenBSD: types.h,v 1.4 2010/06/10 14:08:37 reyk Exp $	*/
d36 1
@


1.4
log
@add new commands: the couple/decouple commands will set loading of the
learned flows and SAs to the kernel which is useful for testing and
debugging. the active/passive commands are required to use iked
with sasyncd(8);  sasyncd just needs to call "ikectl active/passive" or
send the appropriate imsg to support iked but this is not implemented yet.
@
text
@d1 1
a1 1
/*	$OpenBSD: types.h,v 1.3 2010/06/07 14:15:27 jsg Exp $	*/
d42 1
@


1.3
log
@switch iked pki files to /etc/iked, discussed with reyk.
@
text
@d1 1
a1 1
/*	$OpenBSD: types.h,v 1.2 2010/06/03 20:28:22 reyk Exp $	*/
d82 4
@


1.2
log
@Add a new _iked user with uid 101 instead of (ab)using the _isakmpd user.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: types.h,v 1.1 2010/06/03 16:41:12 reyk Exp $	*/
d31 1
a31 1
#define IKED_CA		"/etc/isakmpd/"
@


1.1
log
@Import iked, a new implementation of the IKEv2 protocol.

iked(8) is an automatic keying daemon for IPsec, like isakmpd(8), that
IPsec creates flows and SAs automatically.  Unlike isakmpd, iked(8)
implements the newer IKEv2 protocol instead of IKEv1/ISAKMP.  The
daemon is still work-in-progress and not enabled in the builds, but is
already able to establish IKEv2 sessions with some other IKEv2
implementations as a responder.

with lots of help and debugging by jsg@@
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d23 1
a23 3
#ifndef IKED_USER
#define IKED_USER	"_isakmpd"
#endif
@

