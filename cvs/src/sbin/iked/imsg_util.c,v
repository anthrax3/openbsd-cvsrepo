head	1.11;
access;
symbols
	OPENBSD_6_2:1.11.0.2
	OPENBSD_6_2_BASE:1.11
	OPENBSD_6_1:1.11.0.4
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.10.0.4
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.9.0.8
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.4
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.8.0.4
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.6.0.2
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.4.0.6
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.4
	OPENBSD_5_0:1.4.0.2
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1;
locks; strict;
comment	@ * @;


1.11
date	2017.01.20.14.10.05;	author mikeb;	state Exp;
branches;
next	1.10;
commitid	CfbodF1uD0UR3vwu;

1.10
date	2015.08.21.11.59.27;	author reyk;	state Exp;
branches;
next	1.9;
commitid	CNs9dXqQUQ09vB19;

1.9
date	2014.05.06.11.11.14;	author reyk;	state Exp;
branches;
next	1.8;

1.8
date	2013.10.24.02.55.50;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2013.03.21.04.30.14;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2013.01.08.10.38.19;	author reyk;	state Exp;
branches;
next	1.5;

1.5
date	2012.09.18.12.07.59;	author reyk;	state Exp;
branches;
next	1.4;

1.4
date	2011.05.09.11.15.18;	author reyk;	state Exp;
branches;
next	1.3;

1.3
date	2011.05.05.12.55.52;	author reyk;	state Exp;
branches;
next	1.2;

1.2
date	2011.05.05.12.17.10;	author reyk;	state Exp;
branches;
next	1.1;

1.1
date	2010.12.22.17.43.10;	author reyk;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Constify the data argument for ibuf_new

From and OK markus@@, OK reyk
@
text
@/*	$OpenBSD: imsg_util.c,v 1.10 2015/08/21 11:59:27 reyk Exp $	*/

/*
 * Copyright (c) 2010-2013 Reyk Floeter <reyk@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/queue.h>
#include <sys/socket.h>
#include <sys/uio.h>

#include <netdb.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <errno.h>
#include <fcntl.h>
#include <ctype.h>
#include <event.h>

#include "iked.h"

/*
 * Extending the imsg buffer API for internal use
 */

int
ibuf_cat(struct ibuf *dst, struct ibuf *src)
{
	return (ibuf_add(dst, src->buf, ibuf_size(src)));
}

void
ibuf_zero(struct ibuf *buf)
{
	explicit_bzero(buf->buf, buf->wpos);
}

struct ibuf *
ibuf_new(const void *data, size_t len)
{
	struct ibuf	*buf;

	if ((buf = ibuf_dynamic(len,
	    IKED_MSGBUF_MAX)) == NULL)
		return (NULL);

	ibuf_zero(buf);

	if (data == NULL && len) {
		if (ibuf_advance(buf, len) == NULL) {
			ibuf_free(buf);
			return (NULL);
		}
	} else {
		if (ibuf_add(buf, data, len) != 0) {
			ibuf_free(buf);
			return (NULL);
		}
	}

	return (buf);
}

struct ibuf *
ibuf_static(void)
{
	struct ibuf	*buf;

	if ((buf = ibuf_open(IKED_MSGBUF_MAX)) == NULL)
		return (NULL);

	ibuf_zero(buf);

	return (buf);
}

void *
ibuf_advance(struct ibuf *buf, size_t len)
{
	void	*ptr;

	if ((ptr = ibuf_reserve(buf, len)) != NULL)
		memset(ptr, 0, len);

	return (ptr);
}

void
ibuf_release(struct ibuf *buf)
{
	if (buf == NULL)
		return;
	if (buf->buf != NULL) {
		ibuf_zero(buf);
		free(buf->buf);
	}
	free(buf);
}

size_t
ibuf_length(struct ibuf *buf)
{
	if (buf == NULL || buf->buf == NULL)
		return (0);
	return (ibuf_size(buf));
}

uint8_t *
ibuf_data(struct ibuf *buf)
{
	return (ibuf_seek(buf, 0, 0));
}

void *
ibuf_getdata(struct ibuf *buf, size_t len)
{
	void	*data;

	if ((data = ibuf_seek(buf, buf->rpos, len)) == NULL)
		return (NULL);
	buf->rpos += len;

	return (data);
}

struct ibuf *
ibuf_get(struct ibuf *buf, size_t len)
{
	void		*data;

	if ((data = ibuf_getdata(buf, len)) == NULL)
		return (NULL);

	return (ibuf_new(data, len));
}

struct ibuf *
ibuf_dup(struct ibuf *buf)
{
	if (buf == NULL)
		return (NULL);
	return (ibuf_new(ibuf_data(buf), ibuf_size(buf)));
}

struct ibuf *
ibuf_random(size_t len)
{
	struct ibuf	*buf;
	void		*ptr;

	if ((buf = ibuf_open(len)) == NULL)
		return (NULL);
	if ((ptr = ibuf_reserve(buf, len)) == NULL) {
		ibuf_free(buf);
		return (NULL);
	}
	arc4random_buf(ptr, len);
	return (buf);
}

int
ibuf_setsize(struct ibuf *buf, size_t len)
{
	if (len > buf->size)
		return (-1);
	buf->wpos = len;
	return (0);
}

int
ibuf_prepend(struct ibuf *buf, void *data, size_t len)
{
	struct ibuf	*new;

	/* Swap buffers (we could also use memmove here) */
	if ((new = ibuf_new(data, len)) == NULL)
		return (-1);
	if (ibuf_cat(new, buf) == -1) {
		ibuf_release(new);
		return (-1);
	}
	free(buf->buf);
	memcpy(buf, new, sizeof(*buf));
	free(new);

	return (0);
}
@


1.10
log
@Switch iked to C99-style fixed-width integer types.

OK mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg_util.c,v 1.9 2014/05/06 11:11:14 reyk Exp $	*/
d52 1
a52 1
ibuf_new(void *data, size_t len)
@


1.9
log
@Explicitly zero out the ibufs before releasing the memory to make sure
that included crypto parameters are cleaned.

ok mikeb@@ markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg_util.c,v 1.8 2013/10/24 02:55:50 deraadt Exp $	*/
d121 1
a121 1
u_int8_t *
@


1.8
log
@no need for netinet/ip_var.h (and friends)
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg_util.c,v 1.7 2013/03/21 04:30:14 deraadt Exp $	*/
d48 1
a48 1
	memset(buf->buf, 0, buf->wpos);
d106 2
a107 1
	if (buf->buf != NULL)
d109 1
@


1.7
log
@remove excessive includes
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg_util.c,v 1.6 2013/01/08 10:38:19 reyk Exp $	*/
a22 6
#include <net/if.h>
#include <netinet/in_systm.h>
#include <netinet/in.h>
#include <netinet/ip.h>
#include <netinet/tcp.h>
#include <arpa/inet.h>
a23 1

@


1.6
log
@Remove private CVS tag from an obsolete repository and bump copyright
to 2013 while I'm here... this is my way of saying "happy new year!".
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg_util.c,v 1.5 2012/09/18 12:07:59 reyk Exp $	*/
a18 1
#include <sys/param.h>
@


1.5
log
@update email addresses to match reality.
sure jsg@@ mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg_util.c,v 1.4 2011/05/09 11:15:18 reyk Exp $	*/
d4 1
a4 1
 * Copyright (c) 2010 Reyk Floeter <reyk@@openbsd.org>
@


1.4
log
@rename functions in proc.c to proc_* and move some code from imsg_util.c to
proc.c.  this is the first sync to what i did for relayd but does not include
the multi-instance handling - so no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg_util.c,v 1.3 2011/05/05 12:55:52 reyk Exp $	*/
d4 1
a4 1
 * Copyright (c) 2010 Reyk Floeter <reyk@@vantronix.net>
@


1.3
log
@Move the proc.c-specific runtime state out of struct iked into a sub-struct.
This removes iked-specific stuff from proc.c.
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg_util.c,v 1.2 2011/05/05 12:17:10 reyk Exp $	*/
a41 74
#include "ikev2.h"

void
imsg_event_add(struct imsgev *iev)
{
	if (iev->handler == NULL) {
		imsg_flush(&iev->ibuf);
		return;
	}

	iev->events = EV_READ;
	if (iev->ibuf.w.queued)
		iev->events |= EV_WRITE;

	event_del(&iev->ev);
	event_set(&iev->ev, iev->ibuf.fd, iev->events, iev->handler, iev->data);
	event_add(&iev->ev, NULL);
}

int
imsg_compose_event(struct imsgev *iev, u_int16_t type, u_int32_t peerid,
    pid_t pid, int fd, void *data, u_int16_t datalen)
{
	int	ret;

	if ((ret = imsg_compose(&iev->ibuf, type, peerid,
	    pid, fd, data, datalen)) == -1)
		return (ret);
	imsg_event_add(iev);
	return (ret);
}

int
imsg_composev_event(struct imsgev *iev, u_int16_t type, u_int32_t peerid,
    pid_t pid, int fd, const struct iovec *iov, int iovcnt)
{
	int	ret;

	if ((ret = imsg_composev(&iev->ibuf, type, peerid,
	    pid, fd, iov, iovcnt)) == -1)
		return (ret);
	imsg_event_add(iev);
	return (ret);
}

int
imsg_compose_proc(struct iked *env, enum privsep_procid id,
    u_int16_t type, int fd, void *data, u_int16_t datalen)
{
	return (imsg_compose_event(&env->sc_ps.ps_ievs[id],
	    type, -1, 0, fd, data, datalen));
}

int
imsg_composev_proc(struct iked *env, enum privsep_procid id,
    u_int16_t type, int fd, const struct iovec *iov, int iovcnt)
{
	return (imsg_composev_event(&env->sc_ps.ps_ievs[id],
	    type, -1, 0, fd, iov, iovcnt));
}

int
imsg_forward_proc(struct iked *env, struct imsg *imsg,
    enum privsep_procid id)
{
	return (imsg_compose_proc(env, id, imsg->hdr.type,
	    imsg->fd, imsg->data, IMSG_DATA_SIZE(imsg)));
}

void
imsg_flush_proc(struct iked *env, enum privsep_procid id)
{
	imsg_flush(&env->sc_ps.ps_ievs[id].ibuf);
}
@


1.2
log
@rename iked_proc* to privsep_proc*.  no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg_util.c,v 1.1 2010/12/22 17:43:10 reyk Exp $	*/
d91 1
a91 1
	return (imsg_compose_event(&env->sc_ievs[id],
d99 1
a99 1
	return (imsg_composev_event(&env->sc_ievs[id],
d114 1
a114 1
	imsg_flush(&env->sc_ievs[id].ibuf);
@


1.1
log
@split util.c into two files: imsg_util.c for ibuf/imsg stuff and util for
everything else.  we might need to include util.c in ikectl later.

sure mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d88 1
a88 1
imsg_compose_proc(struct iked *env, enum iked_procid id,
d96 1
a96 1
imsg_composev_proc(struct iked *env, enum iked_procid id,
d105 1
a105 1
    enum iked_procid id)
d112 1
a112 1
imsg_flush_proc(struct iked *env, enum iked_procid id)
@

