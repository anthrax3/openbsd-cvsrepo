head	1.10;
access;
symbols
	OPENBSD_4_9:1.9.0.12
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.10
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.6
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.8
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.4
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.2
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.6.0.20
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.18
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.16
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.14
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.12
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.10
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.4.0.20
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.18
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.16
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.14
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.12
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.10
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.8
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.6
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.4
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2011.04.05.18.51.25;	author thib;	state dead;
branches;
next	1.9;

1.9
date	2008.03.24.16.11.08;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2008.03.15.16.19.02;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2008.03.13.01.49.52;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.11.06.22.14;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.02.20.06.16;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	98.08.06.22.15.29;	author csapuntz;	state Exp;
branches;
next	1.3;

1.3
date	97.03.23.03.52.13;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.06.23.14.31.30;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.43.40;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.43.40;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Remove portalfs.

While it is a terribly cool idea, it's just awful and since noone has stepped
up to the plate to keep it up with the current vop state, retire it to the
attic.

ok krw@@, deraadt@@, guenther@@, miod@@.
comments from jmc@@
@
text
@/*	$OpenBSD: activate.c,v 1.9 2008/03/24 16:11:08 deraadt Exp $	*/
/*	$NetBSD: activate.c,v 1.5 1995/04/23 10:33:18 cgd Exp $	*/

/*
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 * All rights reserved.
 *
 * This code is derived from software donated to Berkeley by
 * Jan-Simon Pendry.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	from: Id: activate.c,v 1.2 1992/05/27 07:09:27 jsp Exp
 *	@@(#)activate.c	8.3 (Berkeley) 4/28/95
 */

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <errno.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/param.h>
#include <sys/socket.h>
#include <sys/un.h>
#include <sys/syslog.h>
#include <sys/uio.h>

#include "portald.h"

/*
 * Scan the providers list and call the
 * appropriate function.
 */
static int
activate_argv(struct portal_cred *pcr, char *key, char **v, int so, int *fdp)
{
	provider *pr;

	for (pr = providers; pr->pr_match; pr++)
		if (strcmp(v[0], pr->pr_match) == 0)
			return ((*pr->pr_func)(pcr, key, v, so, fdp));

	return (ENOENT);
}

static int
get_request(int so, struct portal_cred *pcr, char *key, int klen)
{
	struct iovec iov[2];
	struct msghdr msg;
	int n;

	iov[0].iov_base = (caddr_t)pcr;
	iov[0].iov_len = sizeof(*pcr);
	iov[1].iov_base = key;
	iov[1].iov_len = klen;

	(void)memset(&msg, 0, sizeof(msg));
	msg.msg_iov = iov;
	msg.msg_iovlen = 2;

	n = recvmsg(so, &msg, 0);
	if (n < 0)
		return (errno);

	if (n <= sizeof(*pcr))
		return (EINVAL);

	n -= sizeof(*pcr);
	key[n] = '\0';

	return (0);
}

static void
send_reply(int so, int fd, int error)
{
	int n;
	struct iovec iov;
	struct msghdr msg;
	struct cmsghdr *cmsg;
	struct {
		struct cmsghdr cmsg;
		u_char buf[CMSG_SPACE(sizeof(int))];
	} cmsgbuf;

	/*
	 * Line up error code.  Don't worry about byte ordering
	 * because we must be sending to the local machine.
	 */
	iov.iov_base = (caddr_t)&error;
	iov.iov_len = sizeof(error);

	/*
	 * Build a msghdr
	 */
	(void)memset(&msg, 0, sizeof(msg));
	msg.msg_iov = &iov;
	msg.msg_iovlen = 1;

	/*
	 * If there is a file descriptor to send then
	 * construct a suitable rights control message.
	 */
	if (fd >= 0) {
		msg.msg_control = (caddr_t)&cmsgbuf.buf;
		msg.msg_controllen = sizeof(cmsgbuf.buf);
		cmsg = CMSG_FIRSTHDR(&msg);
		cmsg->cmsg_len = CMSG_LEN(sizeof(int));
		cmsg->cmsg_level = SOL_SOCKET;
		cmsg->cmsg_type = SCM_RIGHTS;
		*(int *)CMSG_DATA(cmsg) = fd;
	}

	/*
	 * Send to kernel...
	 */
	if ((n = sendmsg(so, &msg, 0)) < 0)
		syslog(LOG_ERR, "send: %m");
#ifdef DEBUG
	(void)fprintf(stderr, "sent %d bytes\n", n);
#endif
	sleep(1);	/* XXX */
#ifdef notdef
	if (shutdown(so, 2) < 0)
		syslog(LOG_ERR, "shutdown: %m");
#endif
	/*
	 * Throw away the open file descriptor
	 */
	(void)close(fd);
}

void
activate(qelem *q, int so)
{
	struct portal_cred pcred;
	char key[MAXPATHLEN+1];
	int error;
	char **v;
	int fd = -1;

	/*
	 * Read the key from the socket
	 */
	error = get_request(so, &pcred, key, sizeof(key));
	if (error) {
		syslog(LOG_ERR, "activate: recvmsg: %m");
		goto drop;
	}

#ifdef DEBUG
	(void)fprintf(stderr, "lookup key %s\n", key);
#endif

	/*
	 * Find a match in the configuration file
	 */
	v = conf_match(q, key);

	/*
	 * If a match existed, then find an appropriate portal
	 * otherwise simply return ENOENT.
	 */
	if (v) {
		error = activate_argv(&pcred, key, v, so, &fd);
		if (error)
			fd = -1;
		else if (fd < 0)
			error = -1;
	} else {
		error = ENOENT;
	}

	if (error >= 0)
		send_reply(so, fd, error);

drop:;
	close(so);
}
@


1.9
log
@msg_controllen has to be CMSG_SPACE so that the kernel can account for
each cmsg_len (ie. msg_controllen = sum of CMSG_ALIGN(cmsg_len).  This
works now that kernel fd passing has been fixed to accept a bit of
sloppiness because of this ABI repair.
lots of discussion with kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: activate.c,v 1.8 2008/03/15 16:19:02 deraadt Exp $	*/
@


1.8
log
@Repair the simple cases for msg_controllen where it should just be
CMSG_SIZE(sizeof(int)), not sizeof(buffer) which may be larger because
of alignment; ok kettenis hshoexer
@
text
@d1 1
a1 1
/*	$OpenBSD: activate.c,v 1.7 2008/03/13 01:49:52 deraadt Exp $	*/
d132 1
a132 1
		msg.msg_controllen = CMSG_LEN(sizeof(int));
@


1.7
log
@Correct CMSG_SPACE and CMSG_LEN usage everywhere in the tree. Due to
an extensive discussion with otto, kettenis, millert, and hshoexer
@
text
@d1 1
a1 1
/*	$OpenBSD: activate.c,v 1.6 2003/06/11 06:22:14 deraadt Exp $	*/
d132 1
a132 1
		msg.msg_controllen = sizeof(cmsgbuf.buf);
@


1.6
log
@ansification
@
text
@d1 1
a1 1
/*	$OpenBSD: activate.c,v 1.5 2003/06/02 20:06:16 millert Exp $	*/
d106 1
d109 2
a110 2
		int fd;
	} ctl;
d131 7
a137 6
		ctl.fd = fd;
		ctl.cmsg.cmsg_len = sizeof(ctl);
		ctl.cmsg.cmsg_level = SOL_SOCKET;
		ctl.cmsg.cmsg_type = SCM_RIGHTS;
		msg.msg_control = (caddr_t)&ctl;
		msg.msg_controllen = ctl.cmsg.cmsg_len;
@


1.5
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: activate.c,v 1.4 1998/08/06 22:15:29 csapuntz Exp $	*/
d60 1
a60 6
activate_argv(pcr, key, v, so, fdp)
	struct portal_cred *pcr;
	char *key;
	char **v;
	int so;
	int *fdp;
d72 1
a72 5
get_request(so, pcr, key, klen)
	int so;
	struct portal_cred *pcr;
	char *key;
	int klen;
d101 1
a101 4
send_reply(so, fd, error)
	int so;
	int fd;
	int error;
d158 1
a158 3
activate(q, so)
	qelem *q;
	int so;
@


1.4
log
@

Can't use MSG_EOR with a stream socket.

Thanks to m4@@m.nts.umn.edu (Marshall M. Midden)
@
text
@d1 1
a1 1
/*	$OpenBSD: activate.c,v 1.3 1997/03/23 03:52:13 millert Exp $	*/
d20 1
a20 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.3
log
@Minor updates from lite2 + some KNF and strdup(3) checking.
Also, no need to change umask now that we use mkstemp(3).
@
text
@d1 1
a1 1
/*	$OpenBSD: activate.c,v 1.2 1996/06/23 14:31:30 deraadt Exp $	*/
d157 1
a157 1
	if ((n = sendmsg(so, &msg, MSG_EOR)) < 0)
@


1.2
log
@update rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: activate.c,v 1.5 1995/04/23 10:33:18 cgd Exp $	*/
d7 1
d41 1
a41 1
 *	@@(#)activate.c	8.2 (Berkeley) 3/27/94
d63 7
a69 6
static int activate_argv(pcr, key, v, so, fdp)
struct portal_cred *pcr;
char *key;
char **v;
int so;
int *fdp;
d80 6
a85 5
static int get_request(so, pcr, key, klen)
int so;
struct portal_cred *pcr;
char *key;
int klen;
d91 1
a91 1
	iov[0].iov_base = (caddr_t) pcr;
d96 1
a96 1
	memset(&msg, 0, sizeof(msg));
d113 5
a117 4
static void send_reply(so, fd, error)
int so;
int fd;
int error;
d131 1
a131 1
	iov.iov_base = (caddr_t) &error;
d137 1
a137 1
	memset(&msg, 0, sizeof(msg));
d150 1
a150 1
		msg.msg_control = (caddr_t) &ctl;
d158 1
a158 1
		syslog(LOG_ERR, "send: %s", strerror(errno));
d160 1
a160 1
	fprintf(stderr, "sent %d bytes\n", n);
d162 1
a162 1
	sleep(1);	/*XXX*/
d165 1
a165 1
		syslog(LOG_ERR, "shutdown: %s", strerror(errno));
d170 1
a170 1
	(void) close(fd);
d173 4
a176 3
void activate(q, so)
qelem *q;
int so;
d189 1
a189 1
		syslog(LOG_ERR, "activate: recvmsg: %s", strerror(error));
d194 1
a194 1
	fprintf(stderr, "lookup key %s\n", key);
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
