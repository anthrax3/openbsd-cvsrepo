head	1.10;
access;
symbols
	OPENBSD_4_9:1.9.0.28
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.26
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.22
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.24
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.20
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.18
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.16
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.14
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.12
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.10
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.8
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.6
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.4
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.2
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.5.0.26
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.24
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.22
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.20
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.18
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.16
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.14
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.12
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.10
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.8
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.6
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.4
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2011.04.05.18.51.25;	author thib;	state dead;
branches;
next	1.9;

1.9
date	2004.06.06.00.12.03;	author tedu;	state Exp;
branches;
next	1.8;

1.8
date	2003.07.29.18.38.36;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.11.06.22.14;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.02.20.06.16;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.03.23.04.43.22;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.03.23.03.52.13;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.03.23.03.04.28;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.06.23.14.31.31;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.43.40;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.43.40;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Remove portalfs.

While it is a terribly cool idea, it's just awful and since noone has stepped
up to the plate to keep it up with the current vop state, retire it to the
attic.

ok krw@@, deraadt@@, guenther@@, miod@@.
comments from jmc@@
@
text
@/*	$OpenBSD: conf.c,v 1.9 2004/06/06 00:12:03 tedu Exp $	*/
/*	$NetBSD: conf.c,v 1.4 1995/04/23 10:33:19 cgd Exp $	*/

/*
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 * All rights reserved.
 *
 * This code is derived from software donated to Berkeley by
 * Jan-Simon Pendry.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	from: Id: conf.c,v 1.2 1992/05/27 07:09:27 jsp Exp
 *	@@(#)conf.c	8.2 (Berkeley) 3/27/94
 */

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <errno.h>
#include <limits.h>
#include <regex.h>
#include <sys/types.h>
#include <sys/param.h>
#include <sys/syslog.h>

#include "portald.h"

#define	ALLOC(ty)	(xmalloc(sizeof(ty)))

typedef struct path path;
struct path {
	qelem p_q;		/* 2-way linked list */
	int p_lno;		/* Line number of this record */
	char *p_args;		/* copy of arg string (malloc) */
	char *p_key;		/* Pathname to match (also p_argv[0]) */
	regex_t p_re;		/* RE to match against pathname */
	int p_argc;		/* number of elements in arg string */
	char **p_argv;		/* argv[] pointers into arg string (malloc) */
};

static char *conf_file;		/* XXX for regerror */

/*
 * Add an element to a 2-way list,
 * just after (pred)
 */
static void
ins_que(qelem *elem, qelem *pred)
{
	qelem *p = pred->q_forw;
	elem->q_back = pred;
	elem->q_forw = p;
	pred->q_forw = elem;
	p->q_back = elem;
}

/*
 * Remove an element from a 2-way list
 */
static void
rem_que(qelem *elem)
{
	qelem *p = elem->q_forw;
	qelem *p2 = elem->q_back;
	p2->q_forw = p;
	p->q_back = p2;
}

/*
 * Error checking malloc
 */
static void *
xmalloc(size_t siz)
{
	void *p = malloc(siz);
	if (p)
		return (p);
	syslog(LOG_ALERT, "malloc: failed to get %ld bytes", siz);
	exit(1);
}

/*
 * Insert the path in the list.
 * If there is already an element with the same key then
 * the *second* one is ignored (return 0).  If the key is
 * not found then the path is added to the end of the list
 * and 1 is returned.
 */
static int
pinsert(path *p0, qelem *q0)
{
	qelem *q;

	if (p0->p_argc == 0)
		return (0);

	for (q = q0->q_forw; q != q0; q = q->q_forw) {
		path *p = (path *)q;
		if (strcmp(p->p_key, p0->p_key) == 0)
			return (0);
	}
	ins_que(&p0->p_q, q0->q_back);
	return (1);
}

static path *
palloc(char *cline, int lno)
{
	int c;
	char *s;
	char *key;
	path *p;
	char **ap;

	/*
	 * Implement comment chars
	 */
	s = strchr(cline, '#');
	if (s)
		*s = 0;

	/*
	 * Do a pass through the string to count the number
	 * of arguments
	 */
	c = 0;
	key = strdup(cline);
	if (key == NULL) {
		syslog(LOG_ALERT, "malloc: failed to get %ld bytes",
		    strlen(cline));
		exit(1);
	}
	for (s = key; s != NULL; ) {
		char *val;
		while ((val = strsep(&s, " \t\n")) != NULL && *val == '\0')
			;
		if (val)
			c++;
	}
	c++;
	free(key);

	if (c <= 1)
		return (0);

	/*
	 * Now do another pass and generate a new path structure
	 */
	p = ALLOC(path);
	p->p_argc = 0;
	p->p_argv = xmalloc(c * sizeof(char *));
	p->p_args = strdup(cline);
	if (p->p_args == NULL) {
		syslog(LOG_ALERT, "malloc: failed to get %ld bytes",
		    strlen(cline));
		exit(1);
	}
	ap = p->p_argv;
	for (s = p->p_args; s != NULL; ) {
		char *val;
		while ((val = strsep(&s, " \t\n")) != NULL && *val == '\0')
			;
		if (val) {
			*ap++ = val;
			p->p_argc++;
		}
	}
	*ap = 0;

#ifdef DEBUG
	for (c = 0; c < p->p_argc; c++)
		(void)printf("%sv[%d] = %s\n", c?"\t":"", c, p->p_argv[c]);
#endif

	p->p_key = p->p_argv[0];
	if ((c = regcomp(&(p->p_re), p->p_key, REG_EXTENDED))) {
		char errbuf[BUFSIZ];

		(void)regerror(c, &(p->p_re), errbuf, sizeof(errbuf));
		syslog(LOG_ERR, "%s:%d: regcomp %s: %s",
				conf_file, p->p_lno, p->p_key, errbuf);
	}
	p->p_lno = lno;

	return (p);
}

/*
 * Free a path structure
 */
static void
pfree(path *p)
{
	free(p->p_args);
	regfree(&(p->p_re));
	free((void *)p->p_argv);
	free((void *)p);
}

/*
 * Discard all currently held path structures on q0.
 * and add all the ones on xq.
 */
static void
preplace(qelem *q0, qelem *xq)
{
	/*
	 * While the list is not empty,
	 * take the first element off the list
	 * and free it.
	 */
	while (q0->q_forw != q0) {
		qelem *q = q0->q_forw;
		rem_que(q);
		pfree((path *)q);
	}
	while (xq->q_forw != xq) {
		qelem *q = xq->q_forw;
		rem_que(q);
		ins_que(q, q0);
	}
}

/*
 * Read the lines from the configuration file and
 * add them to the list of paths.
 */
static void
readfp(qelem *q0, FILE *fp)
{
	char cline[LINE_MAX];
	int nread = 0;
	qelem q;

	/*
	 * Make a new empty list.
	 */
	q.q_forw = q.q_back = &q;

	/*
	 * Read the lines from the configuration file.
	 */
	while (fgets(cline, sizeof(cline), fp)) {
		path *p = palloc(cline, nread+1);
		if (p && !pinsert(p, &q))
			pfree(p);
		nread++;
	}

	/*
	 * If some records were read, then throw
	 * away the old list and replace with the
	 * new one.
	 */
	if (nread)
		preplace(q0, &q);
}

/*
 * Read the configuration file (conf) and replace
 * the existing path list with the new version.
 * If the file is not readable, then no changes take place
 */
void
conf_read(qelem *q, char *conf)
{
	FILE *fp = fopen(conf, "r");
	if (fp) {
		conf_file = conf;		/* XXX */
		readfp(q, fp);
		conf_file = NULL;		/* XXX */
		(void)fclose(fp);
	} else {
		syslog(LOG_ERR, "open config file \"%s\": %m", conf);
	}
}


char **
conf_match(qelem *q0, char *key)
{
	qelem *q;

	for (q = q0->q_forw; q != q0; q = q->q_forw) {
		path *p = (path *)q;

		if (regexec(&(p->p_re), key, 0, NULL, 0) == 0)
			return (p->p_argv+1);
	}

	return (0);
}
@


1.9
log
@64bit int fixes
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.c,v 1.8 2003/07/29 18:38:36 deraadt Exp $	*/
@


1.8
log
@spaces
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.c,v 1.7 2003/06/11 06:22:14 deraadt Exp $	*/
d103 1
a103 1
	syslog(LOG_ALERT, "malloc: failed to get %d bytes", siz);
d154 1
a154 1
		syslog(LOG_ALERT, "malloc: failed to get %d bytes",
d179 1
a179 1
		syslog(LOG_ALERT, "malloc: failed to get %d bytes",
@


1.7
log
@ansification
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.c,v 1.6 2003/06/02 20:06:16 millert Exp $	*/
a128 1
	
@


1.6
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.c,v 1.5 1997/03/23 04:43:22 millert Exp $	*/
d73 1
a73 2
ins_que(elem, pred)
	qelem *elem, *pred;
d86 1
a86 2
rem_que(elem)
	qelem *elem;
d98 1
a98 2
xmalloc(siz)
	size_t siz;
d115 1
a115 3
pinsert(p0, q0)
	path *p0;
	qelem *q0;
d133 1
a133 3
palloc(cline, lno)
	char *cline;
	int lno;
d218 1
a218 2
pfree(p)
	path *p;
d231 1
a231 3
preplace(q0, xq)
	qelem *q0;
	qelem *xq;
d255 1
a255 3
readfp(q0, fp)
	qelem *q0;
	FILE *fp;
d291 1
a291 3
conf_read(q, conf)
	qelem *q;
	char *conf;
d305 2
a306 3
char **conf_match(q0, key)
qelem *q0;
char *key;
@


1.5
log
@Use POSIX regexp, not v8 to avoid linking with -lcompat.
Parsing config files w/o regular expressions may be slightly
slower but since this is normally done only once it's not
a big deal.
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.c,v 1.4 1997/03/23 03:52:13 millert Exp $	*/
d20 1
a20 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.4
log
@Minor updates from lite2 + some KNF and strdup(3) checking.
Also, no need to change umask now that we use mkstemp(3).
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.c,v 1.3 1997/03/23 03:04:28 millert Exp $	*/
d50 1
a50 1
#include <regexp.h>
d65 1
a65 1
	regexp *p_re;		/* RE to match against pathname (malloc) */
a70 1
static path *curp;		/* XXX for regerror */
a140 8
void
regerror(s)
	const char *s;
{
	syslog(LOG_ERR, "%s:%d: regcomp %s: %s",
			conf_file, curp->p_lno, curp->p_key, s);
}

d213 6
a218 6
	if (strpbrk(p->p_key, RE_CHARS)) {
		curp = p;			/* XXX */
		p->p_re = regcomp(p->p_key);
		curp = 0;			/* XXX */
	} else {
		p->p_re = 0;
d233 1
a233 2
	if (p->p_re)
		free((void *)p->p_re);
d315 1
a315 1
		conf_file = 0;		/* XXX */
d331 3
a333 7
		if (p->p_re) {
			if (regexec(p->p_re, key))
				return (p->p_argv+1);
		} else {
			if (strncmp(p->p_key, key, strlen(p->p_key)) == 0)
				return (p->p_argv+1);
		}
@


1.3
log
@-Wall happiness, use mkstemp(3) instead of mktemp(3), and some
minor KNF.
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.c,v 1.2 1996/06/23 14:31:31 deraadt Exp $	*/
d7 1
d77 3
a79 2
static void ins_que(elem, pred)
qelem *elem, *pred;
d91 3
a93 2
static void rem_que(elem)
qelem *elem;
d104 3
a106 2
static void *xmalloc(siz)
unsigned siz;
d122 4
a125 3
static int pinsert(p0, q0)
path *p0;
qelem *q0;
d133 1
a133 1
		path *p = (path *) q;
d142 3
a144 2
void regerror(s)
const char *s;
d150 4
a153 3
static path *palloc(cline, lno)
char *cline;
int lno;
d174 5
d199 5
d218 1
a218 1
		printf("%sv[%d] = %s\n", c?"\t":"", c, p->p_argv[c]);
d237 3
a239 2
static void pfree(p)
path *p;
d243 3
a245 3
		free((char *) p->p_re);
	free((char *) p->p_argv);
	free((char *) p);
d252 4
a255 3
static void preplace(q0, xq)
qelem *q0;
qelem *xq;
d265 1
a265 1
		pfree((path *) q);
d278 4
a281 3
static void readfp(q0, fp)
qelem *q0;
FILE *fp;
d316 4
a319 3
void conf_read(q, conf)
qelem *q;
char *conf;
d326 1
a326 1
		(void) fclose(fp);
d328 1
a328 1
		syslog(LOG_ERR, "open config file \"%s\": %s", conf, strerror(errno));
d340 1
a340 1
		path *p = (path *) q;
@


1.2
log
@update rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.c,v 1.4 1995/04/23 10:33:19 cgd Exp $	*/
d140 1
a140 1
	syslog(LOG_ERR, "%s:%s: regcomp %s: %s",
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
