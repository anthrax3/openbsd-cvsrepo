head	1.30;
access;
symbols
	OPENBSD_4_9:1.29.0.6
	OPENBSD_4_9_BASE:1.29
	OPENBSD_4_8:1.29.0.4
	OPENBSD_4_8_BASE:1.29
	OPENBSD_4_7:1.29.0.2
	OPENBSD_4_7_BASE:1.29
	OPENBSD_4_6:1.28.0.8
	OPENBSD_4_6_BASE:1.28
	OPENBSD_4_5:1.28.0.4
	OPENBSD_4_5_BASE:1.28
	OPENBSD_4_4:1.28.0.2
	OPENBSD_4_4_BASE:1.28
	OPENBSD_4_3:1.27.0.12
	OPENBSD_4_3_BASE:1.27
	OPENBSD_4_2:1.27.0.10
	OPENBSD_4_2_BASE:1.27
	OPENBSD_4_1:1.27.0.8
	OPENBSD_4_1_BASE:1.27
	OPENBSD_4_0:1.27.0.6
	OPENBSD_4_0_BASE:1.27
	OPENBSD_3_9:1.27.0.4
	OPENBSD_3_9_BASE:1.27
	OPENBSD_3_8:1.27.0.2
	OPENBSD_3_8_BASE:1.27
	OPENBSD_3_7:1.26.0.8
	OPENBSD_3_7_BASE:1.26
	OPENBSD_3_6:1.26.0.6
	OPENBSD_3_6_BASE:1.26
	OPENBSD_3_5:1.26.0.4
	OPENBSD_3_5_BASE:1.26
	OPENBSD_3_4:1.26.0.2
	OPENBSD_3_4_BASE:1.26
	OPENBSD_3_3:1.22.0.4
	OPENBSD_3_3_BASE:1.22
	OPENBSD_3_2:1.22.0.2
	OPENBSD_3_2_BASE:1.22
	OPENBSD_3_1:1.18.0.2
	OPENBSD_3_1_BASE:1.18
	OPENBSD_3_0:1.14.0.4
	OPENBSD_3_0_BASE:1.14
	OPENBSD_2_9:1.14.0.2
	OPENBSD_2_9_BASE:1.14
	OPENBSD_2_8:1.13.0.14
	OPENBSD_2_8_BASE:1.13
	OPENBSD_2_7:1.13.0.12
	OPENBSD_2_7_BASE:1.13
	OPENBSD_2_6:1.13.0.10
	OPENBSD_2_6_BASE:1.13
	OPENBSD_2_5:1.13.0.8
	OPENBSD_2_5_BASE:1.13
	OPENBSD_2_4:1.13.0.6
	OPENBSD_2_4_BASE:1.13
	OPENBSD_2_3:1.13.0.4
	OPENBSD_2_3_BASE:1.13
	OPENBSD_2_2:1.13.0.2
	OPENBSD_2_2_BASE:1.13
	OPENBSD_2_1:1.7.0.2
	OPENBSD_2_1_BASE:1.7
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.30
date	2011.04.05.18.51.25;	author thib;	state dead;
branches;
next	1.29;

1.29
date	2009.10.27.23.59.33;	author deraadt;	state Exp;
branches;
next	1.28;

1.28
date	2008.06.01.18.38.29;	author sobrado;	state Exp;
branches;
next	1.27;

1.27
date	2005.04.08.20.09.37;	author jaredy;	state Exp;
branches;
next	1.26;

1.26
date	2003.07.29.18.38.36;	author deraadt;	state Exp;
branches;
next	1.25;

1.25
date	2003.07.03.22.41.40;	author tedu;	state Exp;
branches;
next	1.24;

1.24
date	2003.06.11.06.22.14;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	2003.06.02.20.06.16;	author millert;	state Exp;
branches;
next	1.22;

1.22
date	2002.09.06.21.16.34;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2002.07.11.21.23.29;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2002.05.26.09.24.35;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2002.05.22.08.21.02;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2002.02.16.21.27.36;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2001.12.08.23.42.57;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2001.11.17.20.01.53;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2001.11.05.09.58.13;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2001.01.19.17.57.39;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	97.08.20.05.10.25;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	97.08.04.19.25.19;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	97.06.25.18.25.47;	author kstailey;	state Exp;
branches;
next	1.10;

1.10
date	97.06.18.15.49.25;	author kstailey;	state Exp;
branches;
next	1.9;

1.9
date	97.06.18.13.26.45;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	97.06.10.15.35.41;	author kstailey;	state Exp;
branches;
next	1.7;

1.7
date	97.03.23.03.52.14;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	97.03.23.03.04.29;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.01.15.23.41.24;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	96.06.25.21.31.26;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.06.23.14.31.32;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.04.21.23.46.58;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.43.40;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.43.40;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.30
log
@Remove portalfs.

While it is a terribly cool idea, it's just awful and since noone has stepped
up to the plate to keep it up with the current vop state, retire it to the
attic.

ok krw@@, deraadt@@, guenther@@, miod@@.
comments from jmc@@
@
text
@/*	$OpenBSD: mount_portal.c,v 1.29 2009/10/27 23:59:33 deraadt Exp $	*/
/*	$NetBSD: mount_portal.c,v 1.8 1996/04/13 01:31:54 jtc Exp $	*/

/*
 * Copyright (c) 1992, 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software donated to Berkeley by
 * Jan-Simon Pendry.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/wait.h>
#include <sys/socket.h>
#include <sys/un.h>
#include <sys/syslog.h>
#include <sys/mount.h>

#include <err.h>
#include <errno.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "mntopts.h"
#include "pathnames.h"
#include "portald.h"

const struct mntopt mopts[] = {
	MOPT_STDOPTS,
	{ NULL }
};

extern char *__progname;	/* from crt0.o */

static char mountpt[MAXPATHLEN];	/* made available to signal handler */

static void usage(void);

static volatile sig_atomic_t readcf;	/* Set when SIGHUP received */

static void
sigchld(int sig)
{
	int save_errno = errno;
	struct syslog_data sdata = SYSLOG_DATA_INIT;
	pid_t pid;

	while ((pid = waitpid((pid_t) -1, NULL, WNOHANG)) > 0)
		;
	if (pid < 0 && errno != ECHILD)
		syslog_r(LOG_WARNING, &sdata, "waitpid: %m");
	errno = save_errno;
}

static void
sighup(int sig)
{

	readcf = 1;
}

static void
sigterm(int sig)
{
	struct syslog_data sdata = SYSLOG_DATA_INIT;

	if (unmount(mountpt, MNT_FORCE) < 0)
		syslog_r(LOG_WARNING, &sdata,
		    "sigterm: unmounting %s failed: %m", mountpt);
	_exit(1);
}

int
main(int argc, char *argv[])
{
	struct portal_args args;
	struct sockaddr_un un;
	char *conf;
	int mntflags = 0;
	char tag[32];
	fd_set *fdsp;
	int fdssize;

	qelem q;
	int so;
	int error = 0;

	/*
	 * Crack command line args
	 */
	int ch;

	while ((ch = getopt(argc, argv, "o:")) != -1) {
		switch (ch) {
		case 'o':
			getmntopts(optarg, mopts, &mntflags);
			break;
		default:
			error = 1;
			break;
		}
	}

	if (optind != (argc - 2))
		error = 1;

	if (error)
		usage();

	/*
	 * Get config file and mount point
	 */
	conf = argv[optind];
	if (realpath(argv[optind+1], mountpt) == NULL)
		err(1, "realpath %s", argv[optind+1]);

	/*
	 * Construct the listening socket
	 */
	un.sun_family = AF_UNIX;
	if (sizeof(_PATH_TMPPORTAL) >= sizeof(un.sun_path))
		errx(1, "portal socket name too long");
	(void)strlcpy(un.sun_path, _PATH_TMPPORTAL, sizeof un.sun_path);
	so = mkstemp(un.sun_path);
	if (so < 0)
		err(1, "can't create portal socket name: %s", un.sun_path);
	un.sun_len = strlen(un.sun_path);
	(void)close(so);

	so = socket(AF_UNIX, SOCK_STREAM, 0);
	if (so < 0)
		err(1, "socket(2)");

	(void)unlink(un.sun_path);
	/* XXX teeny race? */
	if (bind(so, (struct sockaddr *) &un, sizeof(un)) < 0)
		err(1, "bind(2)");

	(void)listen(so, 5);

	args.pa_socket = so;

	/*
	 * Must fork before mount to get pid in name right.
	 */
	daemon(0, 0);

	(void)snprintf(tag, sizeof(tag), "portal:%ld", (long)getpid());
	args.pa_config = tag;

	/*
	 * Start logging (and change name)
	 */
	openlog("portald", LOG_CONS|LOG_PID, LOG_DAEMON);

	if (mount(MOUNT_PORTAL, mountpt, mntflags, &args)) {
		if (errno == EOPNOTSUPP)
			syslog(LOG_ERR,
			    "mount: Filesystem not supported by kernel");
		else
			syslog(LOG_ERR, "mount: %m");
		exit(1);
	}

	q.q_forw = q.q_back = &q;
	readcf = 1;

	(void)signal(SIGCHLD, sigchld);
	(void)signal(SIGHUP, sighup);
	(void)signal(SIGTERM, sigterm);

	fdssize = howmany(so+1, NFDBITS) * sizeof(fd_mask);
	fdsp = (fd_set *)malloc(fdssize);
	if (fdsp == NULL)
		err(1, "malloc");

	/*
	 * Just loop waiting for new connections and activating them
	 */
	for (;;) {
		struct sockaddr_un un2;
		socklen_t salen = sizeof(un2);
		int so2;
		pid_t pid;
		int rc;

		/*
		 * Check whether we need to re-read the configuration file
		 */
		if (readcf) {
			readcf = 0;
			conf_read(&q, conf);
			continue;
		}

		/*
		 * Accept a new connection
		 * Will get EINTR if a signal has arrived, so just
		 * ignore that error code
		 */
		memset(fdsp, 0, fdssize);
		FD_SET(so, fdsp);
		rc = select(so+1, fdsp, NULL, NULL, NULL);
		if (rc < 0) {
			if (errno == EINTR)
				continue;
			syslog(LOG_ERR, "select: %m");
			exit(1);
		}
		if (rc == 0)
			break;
		so2 = accept(so, (struct sockaddr *) &un2, &salen);
		if (so2 < 0) {
			/*
			 * The unmount function does a shutdown on the socket
			 * which will generated ECONNABORTED on the accept.
			 */
			if (errno == ECONNABORTED)
				break;
			if (errno != EINTR) {
				syslog(LOG_ERR, "accept: %m");
				exit(1);
			}
			continue;
		}

		/*
		 * Now fork a new child to deal with the connection
		 */
	eagain:;
		switch (pid = fork()) {
		case -1:
			if (errno == EAGAIN) {
				sleep(1);
				goto eagain;
			}
			syslog(LOG_ERR, "fork: %m");
			break;
		case 0:
			(void)close(so);
			activate(&q, so2);
			exit(0);
		default:
			(void)close(so2);
			break;
		}
	}
	free(fdsp);
	syslog(LOG_INFO, "%s unmounted", mountpt);
	exit(0);
}

static void
usage(void)
{
	(void)fprintf(stderr,
		"usage: %s [-o options] config mount_point\n", __progname);
	exit(1);
}
@


1.29
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_portal.c,v 1.28 2008/06/01 18:38:29 sobrado Exp $	*/
@


1.28
log
@synchronize synopsis and usage.
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_portal.c,v 1.27 2005/04/08 20:09:37 jaredy Exp $	*/
a34 14

#ifndef lint
char copyright[] =
"@@(#) Copyright (c) 1992, 1993, 1994\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)mount_portal.c	8.6 (Berkeley) 4/26/95";
#else
static char rcsid[] = "$OpenBSD: mount_portal.c,v 1.27 2005/04/08 20:09:37 jaredy Exp $";
#endif
#endif /* not lint */
@


1.27
log
@Sync with recent realpath(3) changes:  on failure, don't use the second
argument "resolved", since it is undefined.

ok and help millert, otto
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_portal.c,v 1.26 2003/07/29 18:38:36 deraadt Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: mount_portal.c,v 1.26 2003/07/29 18:38:36 deraadt Exp $";
d298 1
a298 1
		"usage: %s [-o options] config mount-point\n", __progname);
@


1.26
log
@spaces
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_portal.c,v 1.25 2003/07/03 22:41:40 tedu Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: mount_portal.c,v 1.25 2003/07/03 22:41:40 tedu Exp $";
d156 1
a156 1
		err(1, "realpath %s", mountpt);
@


1.25
log
@use realpath() in helpers instead of doing it ourselves every time.
also fixes pr1662.  from otto moerbeek
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_portal.c,v 1.24 2003/06/11 06:22:14 deraadt Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: mount_portal.c,v 1.24 2003/06/11 06:22:14 deraadt Exp $";
d236 1
a236 1
	
@


1.24
log
@ansification
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_portal.c,v 1.23 2003/06/02 20:06:16 millert Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: mount_portal.c,v 1.23 2003/06/02 20:06:16 millert Exp $";
d76 1
a76 1
static char *mountpt;		/* made available to signal handler */
d155 2
a156 1
	mountpt = argv[optind+1];
@


1.23
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_portal.c,v 1.22 2002/09/06 21:16:34 deraadt Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: mount_portal.c,v 1.22 2002/09/06 21:16:34 deraadt Exp $";
d83 1
a83 2
sigchld(sig)
	int sig;
d97 1
a97 2
sighup(sig)
	int sig;
d104 1
a104 2
sigterm(sig)
	int sig;
d115 1
a115 3
main(argc, argv)
	int argc;
	char *argv[];
d294 1
a294 1
usage()
@


1.22
log
@socklen_t
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_portal.c,v 1.21 2002/07/11 21:23:29 deraadt Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d46 1
a46 1
static char rcsid[] = "$OpenBSD: mount_portal.c,v 1.21 2002/07/11 21:23:29 deraadt Exp $";
@


1.21
log
@malloc() failure tests; rimshot@@pandora.be
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_portal.c,v 1.20 2002/05/26 09:24:35 deraadt Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: mount_portal.c,v 1.20 2002/05/26 09:24:35 deraadt Exp $";
d231 1
a231 1
		int len2 = sizeof(un2);
d261 1
a261 1
		so2 = accept(so, (struct sockaddr *) &un2, &len2);
@


1.20
log
@pid_t cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_portal.c,v 1.19 2002/05/22 08:21:02 deraadt Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: mount_portal.c,v 1.19 2002/05/22 08:21:02 deraadt Exp $";
d223 2
@


1.19
log
@strcpy, sprintf death; mpech ok
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_portal.c,v 1.18 2002/02/16 21:27:36 millert Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: mount_portal.c,v 1.18 2002/02/16 21:27:36 millert Exp $";
d197 1
a197 1
	(void)snprintf(tag, sizeof(tag), "portal:%d", getpid());
@


1.18
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_portal.c,v 1.17 2001/12/08 23:42:57 miod Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: mount_portal.c,v 1.17 2001/12/08 23:42:57 miod Exp $";
d172 1
a172 1
	(void)strcpy(un.sun_path, _PATH_TMPPORTAL);
@


1.17
log
@Don't unlink() the same thing twice, ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_portal.c,v 1.16 2001/11/17 20:01:53 deraadt Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: mount_portal.c,v 1.16 2001/11/17 20:01:53 deraadt Exp $";
d82 1
a82 1
static void usage __P((void));
@


1.16
log
@volatile sig_atomic_t
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_portal.c,v 1.15 2001/11/05 09:58:13 deraadt Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: mount_portal.c,v 1.15 2001/11/05 09:58:13 deraadt Exp $";
a186 1
	(void)unlink(un.sun_path);
@


1.15
log
@some syslog_r uses in signal handlers
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_portal.c,v 1.14 2001/01/19 17:57:39 deraadt Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: mount_portal.c,v 1.14 2001/01/19 17:57:39 deraadt Exp $";
d84 1
a84 1
static sig_atomic_t readcf;	/* Set when SIGHUP received */
@


1.14
log
@mark signal races i cannot fix at the moment
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_portal.c,v 1.13 1997/08/20 05:10:25 millert Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: mount_portal.c,v 1.13 1997/08/20 05:10:25 millert Exp $";
d91 1
d97 1
a97 1
		syslog(LOG_WARNING, "waitpid: %m");	/* XXX signal race */
d113 2
a114 1
	/* XXX signal races */
d116 3
a118 2
		syslog(LOG_WARNING, "sigterm: unmounting %s failed: %m",
		       mountpt);
@


1.13
log
@Print "Filesystem not supported by kernel" not "Operation not supported by
device" (EOPNOTSUPP) so the real problem is obvious.  Idea from Peter Seebach
<seebs@@taniemarie.solon.com>.
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_portal.c,v 1.12 1997/08/04 19:25:19 deraadt Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: mount_portal.c,v 1.12 1997/08/04 19:25:19 deraadt Exp $";
d96 1
a96 1
		syslog(LOG_WARNING, "waitpid: %m");
d112 1
a112 1

@


1.12
log
@save errno in sigchld handlers
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_portal.c,v 1.11 1997/06/25 18:25:47 kstailey Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: mount_portal.c,v 1.11 1997/06/25 18:25:47 kstailey Exp $";
a131 1
	int rc;
d203 6
a208 3
	rc = mount(MOUNT_PORTAL, mountpt, mntflags, &args);
	if (rc < 0) {
		syslog(LOG_ERR, "mount: %m");
@


1.11
log
@(foo *)0 -> NULL
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_portal.c,v 1.10 1997/06/18 15:49:25 kstailey Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: mount_portal.c,v 1.10 1997/06/18 15:49:25 kstailey Exp $";
d90 1
d97 1
@


1.10
log
@dynamically allocate fd_set; deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_portal.c,v 1.9 1997/06/18 13:26:45 deraadt Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: mount_portal.c,v 1.9 1997/06/18 13:26:45 deraadt Exp $";
d92 1
a92 1
	while ((pid = waitpid((pid_t) -1, (int *) 0, WNOHANG)) > 0)
d244 1
a244 2
		rc = select(so+1, fdsp, (fd_set *)0, (fd_set *)0,
		    (struct timeval *)0);
@


1.9
log
@document the tiny race
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_portal.c,v 1.8 1997/06/10 15:35:41 kstailey Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: mount_portal.c,v 1.8 1997/06/10 15:35:41 kstailey Exp $";
d126 2
d215 3
a225 1
		fd_set fdset;
d242 3
a244 3
		FD_ZERO(&fdset);
		FD_SET(so, &fdset);
		rc = select(so+1, &fdset, (fd_set *)0, (fd_set *)0,
d290 1
@


1.8
log
@deal with random pids from fork(2)
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_portal.c,v 1.7 1997/03/23 03:52:14 millert Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: mount_portal.c,v 1.7 1997/03/23 03:52:14 millert Exp $";
d178 1
@


1.7
log
@Minor updates from lite2 + some KNF and strdup(3) checking.
Also, no need to change umask now that we use mkstemp(3).
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_portal.c,v 1.6 1997/03/23 03:04:29 millert Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: mount_portal.c,v 1.6 1997/03/23 03:04:29 millert Exp $";
a184 6
	(void)snprintf(tag, sizeof(tag), "portal:%d", getpid() + 1);
	args.pa_config = tag;

	rc = mount(MOUNT_PORTAL, mountpt, mntflags, &args);
	if (rc < 0)
		err(1, "mount(2)");
d187 1
a187 1
	 * Everything is ready to go - now is a good time to fork
d191 3
d198 6
@


1.6
log
@-Wall happiness, use mkstemp(3) instead of mktemp(3), and some
minor KNF.
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_portal.c,v 1.5 1997/01/15 23:41:24 millert Exp $	*/
d48 1
a48 1
static char sccsid[] = "@@(#)mount_portal.c	8.4 (Berkeley) 3/27/94";
d50 1
a50 1
static char rcsid[] = "$OpenBSD: mount_portal.c,v 1.5 1997/01/15 23:41:24 millert Exp $";
a58 1
#include <sys/stat.h>
d95 1
a95 1
		syslog(LOG_WARNING, "waitpid: %s", strerror(errno));
d112 2
a113 2
		syslog(LOG_WARNING, "sigterm: unmounting %s failed: %s",
		       mountpt, strerror(errno));
a125 1
	mode_t um;
d166 1
a166 1
	strcpy(un.sun_path, _PATH_TMPPORTAL);
a176 1
	um = umask(077);
a180 1
	(void)umask(um);
d185 1
a185 1
	(void)sprintf(tag, "portal:%d", getpid() + 1);
d241 1
a241 1
			syslog(LOG_ERR, "select: %s", strerror(errno));
d255 1
a255 1
				syslog(LOG_ERR, "accept: %s", strerror(errno));
d271 1
a271 1
			syslog(LOG_ERR, "fork: %s", strerror(errno));
@


1.5
log
@getopt(3) returns -1 when out of args, not EOF, whee!
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_portal.c,v 1.4 1996/06/25 21:31:26 deraadt Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: mount_portal.c,v 1.4 1996/06/25 21:31:26 deraadt Exp $";
d59 1
d79 2
d111 1
d166 2
a167 4
	if (sizeof(_PATH_TMPPORTAL) >= sizeof(un.sun_path)) {
		fprintf(stderr, "mount_portal: portal socket name too long\n");
		exit(1);
	}
d169 3
a171 1
	mktemp(un.sun_path);
d173 1
d176 2
a177 4
	if (so < 0) {
		fprintf(stderr, "mount_portal: socket: %s\n", strerror(errno));
		exit(1);
	}
d180 1
a180 1
	(void) unlink(un.sun_path);
d182 3
a184 3
		err(1, NULL);
	(void) unlink(un.sun_path);
	(void) umask(um);
d186 1
a186 1
	(void) listen(so, 5);
d189 1
a189 1
	sprintf(tag, "portal:%d", getpid() + 1);
d194 1
a194 1
		err(1, NULL);
d209 3
a211 3
	signal(SIGCHLD, sigchld);
	signal(SIGHUP, sighup);
	signal(SIGTERM, sigterm);
d278 1
a278 1
			(void) close(so);
d282 1
a282 1
			(void) close(so2);
d294 1
a294 1
		"usage: mount_portal [-o options] config mount-point\n");
@


1.4
log
@umask() AF_UNIX socket; still a small DOS window
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_portal.c,v 1.3 1996/06/23 14:31:32 deraadt Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: mount_portal.c,v 1.3 1996/06/23 14:31:32 deraadt Exp $";
d135 1
a135 1
	while ((ch = getopt(argc, argv, "o:")) != EOF) {
@


1.3
log
@update rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_portal.c,v 1.8 1996/04/13 01:31:54 jtc Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: mount_portal.c,v 1.8 1996/04/13 01:31:54 jtc Exp $";
d123 1
d175 2
d181 1
@


1.2
log
@sync to netbsd 960418
@
text
@d1 1
d50 1
a50 1
static char rcsid[] = "$NetBSD: mount_portal.c,v 1.8 1996/04/13 01:31:54 jtc Exp $";
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: mount_portal.c,v 1.6 1995/06/08 12:38:07 cgd Exp $	*/
d49 1
a49 1
static char rcsid[] = "$NetBSD: mount_portal.c,v 1.6 1995/06/08 12:38:07 cgd Exp $";
d72 1
a72 1
struct mntopt mopts[] = {
d77 2
d103 9
a119 1
	char *mountpt;
d181 1
a181 1
	sprintf(tag, "portal:%d", getpid());
d203 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
