head	1.24;
access;
symbols
	OPENBSD_6_0:1.23.0.6
	OPENBSD_6_0_BASE:1.23
	OPENBSD_5_9:1.23.0.2
	OPENBSD_5_9_BASE:1.23
	OPENBSD_5_8:1.22.0.10
	OPENBSD_5_8_BASE:1.22
	OPENBSD_5_7:1.22.0.2
	OPENBSD_5_7_BASE:1.22
	OPENBSD_5_6:1.22.0.6
	OPENBSD_5_6_BASE:1.22
	OPENBSD_5_5:1.22.0.4
	OPENBSD_5_5_BASE:1.22
	OPENBSD_5_4:1.20.0.2
	OPENBSD_5_4_BASE:1.20
	OPENBSD_5_3:1.19.0.2
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.17.0.14
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.10
	OPENBSD_5_0:1.17.0.8
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.17.0.6
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.17.0.4
	OPENBSD_4_8_BASE:1.17
	OPENBSD_4_7:1.17.0.2
	OPENBSD_4_7_BASE:1.17
	OPENBSD_4_6:1.16.0.4
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.15.0.10
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.8
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.6
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.4
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.2
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.12.0.6
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.4
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.2
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.7.0.4
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6;
locks; strict;
comment	@ * @;


1.24
date	2017.02.11.16.12.36;	author krw;	state Exp;
branches;
next	1.23;
commitid	eWsyZlm9X0T2fxXC;

1.23
date	2016.02.06.19.30.52;	author krw;	state Exp;
branches;
next	1.22;
commitid	5ELOU0S0Zl3aCrHG;

1.22
date	2014.01.20.10.17.20;	author krw;	state Exp;
branches;
next	1.21;

1.21
date	2014.01.13.02.38.52;	author krw;	state Exp;
branches;
next	1.20;

1.20
date	2013.05.02.16.35.27;	author krw;	state Exp;
branches;
next	1.19;

1.19
date	2012.12.04.19.24.03;	author krw;	state Exp;
branches;
next	1.18;

1.18
date	2012.11.15.14.54.18;	author krw;	state Exp;
branches;
next	1.17;

1.17
date	2009.11.26.23.14.29;	author krw;	state Exp;
branches;
next	1.16;

1.16
date	2009.06.06.04.02.42;	author krw;	state Exp;
branches;
next	1.15;

1.15
date	2007.03.02.11.31.17;	author henning;	state Exp;
branches;
next	1.14;

1.14
date	2007.03.02.11.27.36;	author henning;	state Exp;
branches;
next	1.13;

1.13
date	2007.03.02.11.23.23;	author henning;	state Exp;
branches;
next	1.12;

1.12
date	2005.07.09.14.36.15;	author krw;	state Exp;
branches;
next	1.11;

1.11
date	2005.06.01.02.05.55;	author cloder;	state Exp;
branches;
next	1.10;

1.10
date	2005.04.11.20.04.43;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2005.04.11.15.16.29;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2005.04.11.15.16.14;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2004.05.04.22.23.01;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	2004.03.05.23.57.16;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2004.02.07.13.26.35;	author henning;	state Exp;
branches;
next	1.4;

1.4
date	2004.02.04.12.16.56;	author henning;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.04.01.26.44;	author henning;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.04.01.18.26;	author henning;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.18.01.26.20;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Move parse_warning() into parse.c to prepare to replace errwarn.c
with standard daemon log.[ch].

ok mpi@@
@
text
@/*	$OpenBSD: errwarn.c,v 1.23 2016/02/06 19:30:52 krw Exp $	*/

/* Errors and warnings. */

/*
 * Copyright (c) 1996 The Internet Software Consortium.
 * All Rights Reserved.
 * Copyright (c) 1995 RadioMail Corporation.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of RadioMail Corporation, the Internet Software
 *    Consortium nor the names of its contributors may be used to endorse
 *    or promote products derived from this software without specific
 *    prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY RADIOMAIL CORPORATION, THE INTERNET
 * SOFTWARE CONSORTIUM AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL RADIOMAIL CORPORATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This software was written for RadioMail Corporation by Ted Lemon
 * under a contract with Vixie Enterprises.   Further modifications have
 * been made for the Internet Software Consortium under a contract
 * with Vixie Laboratories.
 */

#include <sys/queue.h>
#include <sys/socket.h>

#include <arpa/inet.h>

#include <net/if.h>

#include <netinet/in.h>
#include <netinet/if_ether.h>

#include <signal.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <syslog.h>
#include <unistd.h>

#include "dhcp.h"
#include "dhcpd.h"

char mbuf[1024];

int warnings_occurred;

/*
 * Log an error message, then exit.
 */
void
error(char *fmt, ...)
{
	va_list list;

	va_start(list, fmt);
	vsnprintf(mbuf, sizeof(mbuf), fmt, list);
	va_end(list);

#ifndef DEBUG
	syslog(LOG_ERR, "%s", mbuf);
#endif

	/* Also log it to stderr? */
	if (log_perror) {
		write(STDERR_FILENO, mbuf, strlen(mbuf));
		write(STDERR_FILENO, "\n", 1);
	}

	if (log_perror) {
		fflush(stderr);
	}
	exit(1);
}

/*
 * Log a warning message.
 */
void
warning(char *fmt, ...)
{
	va_list list;

	va_start(list, fmt);
	vsnprintf(mbuf, sizeof(mbuf), fmt, list);
	va_end(list);

#ifndef DEBUG
	syslog(LOG_ERR, "%s", mbuf);
#endif

	if (log_perror) {
		write(STDERR_FILENO, mbuf, strlen(mbuf));
		write(STDERR_FILENO, "\n", 1);
	}
}

/*
 * Log a note.
 */
void
note(char *fmt, ...)
{
	va_list list;

	va_start(list, fmt);
	vsnprintf(mbuf, sizeof(mbuf), fmt, list);
	va_end(list);

#ifndef DEBUG
	syslog(LOG_INFO, "%s", mbuf);
#endif

	if (log_perror) {
		write(STDERR_FILENO, mbuf, strlen(mbuf));
		write(STDERR_FILENO, "\n", 1);
	}
}

#ifdef DEBUG
/*
 * Log a debug message.
 */
void
debug(char *fmt, ...)
{
	va_list list;

	va_start(list, fmt);
	vsnprintf(mbuf, sizeof(mbuf), fmt, list);
	va_end(list);

	syslog(LOG_DEBUG, "%s", mbuf);

	if (log_perror) {
		write(STDERR_FILENO, mbuf, strlen(mbuf));
		write(STDERR_FILENO, "\n", 1);
	}
}
#endif
@


1.23
log
@Eliminate #include inside *.h files and include only needed headers in
each *.c file.

Inspired by mention of header silliness by Edgar Pettijohn and mmcc@@
on tech@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: errwarn.c,v 1.22 2014/01/20 10:17:20 krw Exp $	*/
d64 1
a64 1
static char mbuf[1024];
a160 45

void
parse_warn(char *msg)
{
	static char spaces[81];
	struct iovec iov[6];
	size_t iovcnt;
	int i;

	snprintf(mbuf, sizeof(mbuf), "%s line %d: %s", tlname, lexline, msg);

#ifndef DEBUG
	syslog(LOG_ERR, "%s", mbuf);
	syslog(LOG_ERR, "%s", token_line);
	if (lexchar < 81)
		syslog(LOG_ERR, "%*c", lexchar, '^');
#endif

	if (log_perror) {
		iov[0].iov_base = mbuf;
		iov[0].iov_len = strlen(mbuf);
		iov[1].iov_base = "\n";
		iov[1].iov_len = 1;
		iov[2].iov_base = token_line;
		iov[2].iov_len = strlen(token_line);
		iov[3].iov_base = "\n";
		iov[3].iov_len = 1;
		iovcnt = 4;
		if (lexchar < 81) {
			for (i = 0; i < lexchar; i++) {
				if (token_line[i] == '\t')
					spaces[i] = '\t';
				else
					spaces[i] = ' ';
			}
			iov[4].iov_base = spaces;
			iov[4].iov_len = lexchar - 1;
			iov[5].iov_base = "^\n";
			iov[5].iov_len = 2;
			iovcnt += 2;
		}
		writev(STDERR_FILENO, iov, iovcnt);
	}
	warnings_occurred = 1;
}
@


1.22
log
@Preserve tabs when constructing the "^" line in parse_warn(). Now
error messages line up the "^" correctly even when tabs are present.
@
text
@d1 1
a1 1
/*	$OpenBSD: errwarn.c,v 1.21 2014/01/13 02:38:52 krw Exp $	*/
d43 9
a51 1
#include "dhcpd.h"
d53 7
a59 1
#include <sys/uio.h>
d61 2
@


1.21
log
@warning(), note(), debug(), parse_warn() always return 0, which no
caller checks or saves. So just void them all.
@
text
@d1 1
a1 1
/*	$OpenBSD: errwarn.c,v 1.20 2013/05/02 16:35:27 krw Exp $	*/
d149 1
a149 3
	static char spaces[] =
	    "                                        "
	    "                                        "; /* 80 spaces */
d152 1
d174 6
@


1.20
log
@Bunch of comment/whitespace cleanup. Eliminate some misleading or
pointless ones, make multiline comments readable, nuke '...' in
favour of '.', etc.
@
text
@d1 1
a1 1
/*	$OpenBSD: errwarn.c,v 1.19 2012/12/04 19:24:03 krw Exp $	*/
d83 1
a83 1
int
a99 2

	return (0);
d105 1
a105 1
int
a121 2

	return (0);
d128 1
a128 1
int
a142 2

	return (0);
d146 1
a146 1
int
a183 1
	return (0);
@


1.19
log
@Eliminate hand-rolled pseudo-strerror() %m strangeness by replacing
all occurances of %m with strerror(errno). And then nuking do_percentm()
and related buffer shuffling.

Also simplify parse_warn() so it takes a simple char * of the error,
and thus rely on pointing to error location in input for details.

Makes sense to beck@@
@
text
@d1 1
a1 1
/*	$OpenBSD: errwarn.c,v 1.18 2012/11/15 14:54:18 krw Exp $	*/
d3 1
a3 1
/* Errors and warnings... */
d81 1
a81 1
 * Log a warning message...
d105 1
a105 1
 * Log a note...
d130 1
a130 1
 * Log a debug message...
@


1.18
log
@Shuffle #include's to use the majority idiom everywhere - i.e. use
dhcpd.h to pull in most sys/net/netinet/etc. .h file. Eliminate
superfluous #include's.
@
text
@d1 1
a1 1
/*	$OpenBSD: errwarn.c,v 1.17 2009/11/26 23:14:29 krw Exp $	*/
a47 2
static void do_percentm(char *obuf, size_t size, char *ibuf);

a48 1
static char fbuf[1024];
a59 2
	do_percentm(fbuf, sizeof(fbuf), fmt);

d61 1
a61 1
	vsnprintf(mbuf, sizeof(mbuf), fbuf, list);
a87 2
	do_percentm(fbuf, sizeof(fbuf), fmt);

d89 1
a89 1
	vsnprintf(mbuf, sizeof(mbuf), fbuf, list);
a111 2
	do_percentm(fbuf, sizeof(fbuf), fmt);

d113 1
a113 1
	vsnprintf(mbuf, sizeof(mbuf), fbuf, list);
a136 2
	do_percentm(fbuf, sizeof(fbuf), fmt);

d138 1
a138 1
	vsnprintf(mbuf, sizeof(mbuf), fbuf, list);
a151 38
/*
 * Find %m in the input string and substitute an error message string.
 */
static void
do_percentm(char *obuf, size_t size, char *ibuf)
{
	char ch;
	char *s = ibuf;
	char *t = obuf;
	int prlen;
	size_t fmt_left;
	int saved_errno = errno;

	/*
	 * We wouldn't need this mess if printf handled %m, or if
	 * strerror() had been invented before syslog().
	 */
	for (fmt_left = size; (ch = *s); ++s) {
		if (ch == '%' && s[1] == 'm') {
			++s;
			prlen = snprintf(t, fmt_left, "%s",
			    strerror(saved_errno));
			if (prlen == -1)
				prlen = 0;
			else if (prlen >= fmt_left)
				prlen = fmt_left - 1;
			t += prlen;
			fmt_left -= prlen;
		} else {
			if (fmt_left > 1) {
				*t++ = ch;
				fmt_left--;
			}
		}
	}
	*t = '\0';
}

d153 1
a153 1
parse_warn(char *fmt, ...)
a154 1
	va_list list;
d161 1
a161 5
	do_percentm(mbuf, sizeof(mbuf), fmt);
	snprintf(fbuf, sizeof(fbuf), "%s line %d: %s", tlname, lexline, mbuf);
	va_start(list, fmt);
	vsnprintf(mbuf, sizeof(mbuf), fbuf, list);
	va_end(list);
@


1.17
log
@Silence dhclient by immediately exiting if the interface doesn't exist
or can't return important flags via ioctl. Excess verbiage pointed out
by deraadt@@.

ok henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: errwarn.c,v 1.16 2009/06/06 04:02:42 krw Exp $	*/
d43 2
a44 1
#include <sys/types.h>
a45 2
#include <unistd.h>
#include <errno.h>
a46 1
#include "dhcpd.h"
@


1.16
log
@Nuke debug() unless DEBUG is defined. Elminates debug output from
normal operations.

Prodded by deraadt@@ a while ago.
@
text
@d1 1
a1 1
/*	$OpenBSD: errwarn.c,v 1.15 2007/03/02 11:31:17 henning Exp $	*/
a80 1
	syslog(LOG_CRIT, "exiting.");
a81 1
		fprintf(stderr, "exiting.\n");
@


1.15
log
@caret missing, From: "Matthew R. Dempsky" <mrd@@alkemio.org>
@
text
@d1 1
a1 1
/*	$OpenBSD: errwarn.c,v 1.14 2007/03/02 11:27:36 henning Exp $	*/
d141 1
a155 1
#ifndef DEBUG
a156 1
#endif
d165 1
@


1.14
log
@and the second use of the spaces array might overflow too, in another
way...
@
text
@d1 1
a1 1
/*	$OpenBSD: errwarn.c,v 1.12 2005/07/09 14:36:15 krw Exp $	*/
d241 2
a242 2
			iov[5].iov_base = "\n";
			iov[5].iov_len = 1;
@


1.13
log
@If a syntax error is found past 80 columns, parse_warn accessed memory
outside of the `spaces' array when trying to print the caret marker
found by "Matthew R. Dempsky" <mrd@@alkemio.org>, fix inspired by
a.velichinsky@@gmail.com. discussed with krw
@
text
@d213 1
d237 9
a245 5
		iov[4].iov_base = spaces;
		iov[4].iov_len = lexchar - 1;
		iov[5].iov_base = "\n";
		iov[5].iov_len = 1;
		writev(STDERR_FILENO, iov, sizeof(iov)/sizeof(iov[0]));
@


1.12
log
@Clean out a few more unused/uninitialized variables.

ok henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: errwarn.c,v 1.11 2005/06/01 02:05:55 cloder Exp $	*/
d223 2
a224 3
	if (lexline < 81)
		syslog(LOG_ERR,
		    "%s^", &spaces[sizeof(spaces) - lexchar]);
@


1.11
log
@snprintf returns an int, not a size_t. OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: errwarn.c,v 1.10 2005/04/11 20:04:43 deraadt Exp $	*/
d72 1
a72 1
	syslog(log_priority | LOG_ERR, "%s", mbuf);
d104 1
a104 1
	syslog(log_priority | LOG_ERR, "%s", mbuf);
d130 1
a130 1
	syslog(log_priority | LOG_INFO, "%s", mbuf);
d156 1
a156 1
	syslog(log_priority | LOG_DEBUG, "%s", mbuf);
d221 2
a222 2
	syslog(log_priority | LOG_ERR, "%s", mbuf);
	syslog(log_priority | LOG_ERR, "%s", token_line);
d224 1
a224 1
		syslog(log_priority | LOG_ERR,
@


1.10
log
@use STDERR_FILENO
@
text
@d1 1
a1 1
/*	$OpenBSD: errwarn.c,v 1.9 2005/04/11 15:16:29 deraadt Exp $	*/
d176 1
a176 1
	size_t prlen;
@


1.9
log
@handle snprintf returning -1; ok henning
@
text
@d1 1
a1 1
/*	$OpenBSD: errwarn.c,v 1.7 2004/05/04 22:23:01 mickey Exp $	*/
d77 2
a78 2
		write(2, mbuf, strlen(mbuf));
		write(2, "\n", 1);
d108 2
a109 2
		write(2, mbuf, strlen(mbuf));
		write(2, "\n", 1);
d134 2
a135 2
		write(2, mbuf, strlen(mbuf));
		write(2, "\n", 1);
d160 2
a161 2
		write(2, mbuf, strlen(mbuf));
		write(2, "\n", 1);
d241 1
a241 1
		writev(2, iov, sizeof(iov)/sizeof(iov[0]));
@


1.8
log
@use writev; ok henning
@
text
@d189 3
a191 1
			if (prlen >= fmt_left)
@


1.7
log
@do not overload libc function names causing linker troubles
@
text
@d1 1
a1 1
/*	$OpenBSD: errwarn.c,v 1.6 2004/03/05 23:57:16 deraadt Exp $	*/
d43 3
d210 1
d227 13
a239 6
		write(2, mbuf, strlen(mbuf));
		write(2, "\n", 1);
		write(2, token_line, strlen(token_line));
		write(2, "\n", 1);
		write(2, spaces, lexchar - 1);
		write(2, "^\n", 2);
a240 1

a241 1

@


1.6
log
@remove even more goo
@
text
@d1 1
a1 1
/*	$OpenBSD: errwarn.c,v 1.5 2004/02/07 13:26:35 henning Exp $	*/
d90 1
a90 1
warn(char *fmt, ...)
@


1.5
log
@more KNF From: Emil Mikulic <emikulic@@dmr.ath.cx>
great job.
no binary change.
@
text
@d1 1
a1 1
/*	$OpenBSD: errwarn.c,v 1.4 2004/02/04 12:16:56 henning Exp $	*/
a82 1
	cleanup();
@


1.4
log
@$OpenBSD$, tedu
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d43 2
a45 1
#include <errno.h>
d54 3
a56 2
/* Log an error message, then exit... */

d65 1
a65 1
	vsnprintf(mbuf, sizeof mbuf, fbuf, list);
d74 2
a75 2
		write (2, mbuf, strlen(mbuf));
		write (2, "\n", 1);
d87 3
a89 2
/* Log a warning message... */

d91 1
a91 1
warn(char * fmt, ...)
d98 2
a99 2
	vsnprintf(mbuf, sizeof mbuf, fbuf, list);
 	va_end(list);
d106 2
a107 2
		write (2, mbuf, strlen (mbuf));
		write (2, "\n", 1);
d110 1
a110 1
	return 0;
d113 3
a115 1
/* Log a note... */
d117 1
a117 1
note(char * fmt, ...)
d124 2
a125 2
	vsnprintf(mbuf, sizeof mbuf, fbuf, list);
 	va_end(list);
d128 1
a128 1
	syslog (log_priority | LOG_INFO, "%s", mbuf);
d132 2
a133 2
		write (2, mbuf, strlen (mbuf));
		write (2, "\n", 1);
d136 1
a136 1
	return 0;
d139 3
a141 2
/* Log a debug message... */

d143 1
a143 1
debug(char * fmt, ...)
d150 1
a150 1
	vsnprintf(mbuf, sizeof mbuf, fbuf, list);
d154 1
a154 1
	syslog (log_priority | LOG_DEBUG, "%s", mbuf);
d158 2
a159 2
		write (2, mbuf, strlen (mbuf));
		write (2, "\n", 1);
d162 1
a162 1
	return 0;
d165 3
a167 2
/* Find %m in the input string and substitute an error message string. */

d178 2
a179 2
	/* 
	 * We wouldn't need this mess if printf handled %m, or if 
a200 1

d202 1
a202 1
parse_warn(char * fmt, ...)
d205 4
a208 2
	static char spaces[] = "                                                                                ";
	
d210 1
a210 1
	snprintf(fbuf, sizeof fbuf, "%s line %d: %s", tlname, lexline, mbuf);
d212 1
a212 1
	vsnprintf(mbuf, sizeof mbuf, fbuf, list);
d220 1
a220 1
		    "%s^", &spaces [sizeof spaces - lexchar]);
d224 6
a229 6
		write (2, mbuf, strlen (mbuf));
		write (2, "\n", 1);
		write (2, token_line, strlen (token_line));
		write (2, "\n", 1);
		write (2, spaces, lexchar - 1);
		write (2, "^\n", 2);
d234 1
a234 1
	return 0;
@


1.3
log
@unobfuscate varargs shitz
@
text
@d1 1
a1 1
/* errwarn.c
d3 1
a3 1
   Errors and warnings... */
@


1.2
log
@8579 lines of KNF, ANSO and zap-junk diff without the resulting binary
changing by a single byte.
partly from theo
@
text
@d203 1
a203 2
/* XXXFIX */
	VA_start(list, fmt);
@


1.1
log
@this is where dhclient will start surgery
@
text
@d46 1
a46 1
static void do_percentm PROTO ((char *obuf, size_t size, char *ibuf));
d48 2
a49 2
static char mbuf [1024];
static char fbuf [1024];
d55 2
a56 3
void error (char * fmt, ...)
     KandR (char *fmt;)
     va_dcl
d58 1
a58 1
  va_list list;
d60 1
a60 1
  do_percentm (fbuf, sizeof(fbuf), fmt);
d62 3
a64 3
  va_start (list, fmt);
  vsnprintf (mbuf, sizeof mbuf, fbuf, list);
  va_end (list);
d67 1
a67 1
  syslog (log_priority | LOG_ERR, "%s", mbuf);
d70 13
a82 13
  /* Also log it to stderr? */
  if (log_perror) {
	  write (2, mbuf, strlen (mbuf));
	  write (2, "\n", 1);
  }

  syslog (LOG_CRIT, "exiting.");
  if (log_perror) {
	fprintf (stderr, "exiting.\n");
	fflush (stderr);
  }
  cleanup ();
  exit (1);
d87 2
a88 3
int warn (char * fmt, ...)
     KandR (char *fmt;)
     va_dcl
d90 1
a90 1
  va_list list;
d92 1
a92 1
  do_percentm (fbuf, sizeof(fbuf), fmt);
d94 3
a96 3
  va_start (list, fmt);
  vsnprintf (mbuf, sizeof mbuf, fbuf, list);
  va_end (list);
d99 1
a99 1
  syslog (log_priority | LOG_ERR, "%s", mbuf);
d102 4
a105 4
  if (log_perror) {
	  write (2, mbuf, strlen (mbuf));
	  write (2, "\n", 1);
  }
d107 1
a107 1
  return 0;
d111 2
a112 4

int note (char * fmt, ...)
     KandR (char *fmt;)
     va_dcl
d114 1
a114 1
  va_list list;
d116 1
a116 1
  do_percentm (fbuf, sizeof(fbuf), fmt);
d118 3
a120 3
  va_start (list, fmt);
  vsnprintf (mbuf, sizeof mbuf, fbuf, list);
  va_end (list);
d123 1
a123 1
  syslog (log_priority | LOG_INFO, "%s", mbuf);
d126 4
a129 4
  if (log_perror) {
	  write (2, mbuf, strlen (mbuf));
	  write (2, "\n", 1);
  }
d131 1
a131 1
  return 0;
d136 2
a137 3
int debug (char * fmt, ...)
     KandR (char *fmt;)
     va_dcl
d139 1
a139 1
  va_list list;
d141 1
a141 1
  do_percentm (fbuf, sizeof(fbuf), fmt);
d143 3
a145 3
  va_start (list, fmt);
  vsnprintf (mbuf, sizeof mbuf, fbuf, list);
  va_end (list);
d148 1
a148 1
  syslog (log_priority | LOG_DEBUG, "%s", mbuf);
d151 4
a154 4
  if (log_perror) {
	  write (2, mbuf, strlen (mbuf));
	  write (2, "\n", 1);
  }
d156 1
a156 1
  return 0;
d161 2
a162 4
static void do_percentm (obuf, size, ibuf)
     char *obuf;
     size_t size;
     char *ibuf;
d195 2
a196 3
int parse_warn (char * fmt, ...)
	KandR (char *fmt;)
	va_dcl
d199 1
a199 1
	static char spaces [] = "                                                                                ";
d201 6
a206 6
	do_percentm (mbuf, sizeof(mbuf), fmt);
	snprintf (fbuf, sizeof fbuf, "%s line %d: %s",
		  tlname, lexline, mbuf);
	VA_start (list, fmt);
	vsnprintf (mbuf, sizeof mbuf, fbuf, list);
	va_end (list);
d209 2
a210 2
	syslog (log_priority | LOG_ERR, "%s", mbuf);
	syslog (log_priority | LOG_ERR, "%s", token_line);
d212 2
a213 2
		syslog (log_priority | LOG_ERR,
			"%s^", &spaces [sizeof spaces - lexchar]);
@

