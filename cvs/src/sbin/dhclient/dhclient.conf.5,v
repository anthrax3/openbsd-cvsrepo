head	1.35;
access;
symbols
	OPENBSD_6_2:1.35.0.4
	OPENBSD_6_2_BASE:1.35
	OPENBSD_6_1:1.34.0.4
	OPENBSD_6_1_BASE:1.34
	OPENBSD_6_0:1.32.0.4
	OPENBSD_6_0_BASE:1.32
	OPENBSD_5_9:1.31.0.8
	OPENBSD_5_9_BASE:1.31
	OPENBSD_5_8:1.31.0.10
	OPENBSD_5_8_BASE:1.31
	OPENBSD_5_7:1.31.0.2
	OPENBSD_5_7_BASE:1.31
	OPENBSD_5_6:1.31.0.6
	OPENBSD_5_6_BASE:1.31
	OPENBSD_5_5:1.31.0.4
	OPENBSD_5_5_BASE:1.31
	OPENBSD_5_4:1.30.0.2
	OPENBSD_5_4_BASE:1.30
	OPENBSD_5_3:1.28.0.2
	OPENBSD_5_3_BASE:1.28
	OPENBSD_5_2:1.21.0.8
	OPENBSD_5_2_BASE:1.21
	OPENBSD_5_1_BASE:1.21
	OPENBSD_5_1:1.21.0.4
	OPENBSD_5_0:1.21.0.2
	OPENBSD_5_0_BASE:1.21
	OPENBSD_4_9:1.17.0.10
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.17.0.8
	OPENBSD_4_8_BASE:1.17
	OPENBSD_4_7:1.17.0.4
	OPENBSD_4_7_BASE:1.17
	OPENBSD_4_6:1.17.0.6
	OPENBSD_4_6_BASE:1.17
	OPENBSD_4_5:1.17.0.2
	OPENBSD_4_5_BASE:1.17
	OPENBSD_4_4:1.14.0.4
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.2
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.13.0.2
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.12.0.2
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.11.0.2
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.6.0.2
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.5.0.4
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.2
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.1.0.2
	OPENBSD_3_5_BASE:1.1;
locks; strict;
comment	@.\" @;


1.35
date	2017.07.31.18.56.21;	author anton;	state Exp;
branches;
next	1.34;
commitid	bBDPJPK1CuKNv28K;

1.34
date	2016.09.01.20.06.52;	author jmc;	state Exp;
branches;
next	1.33;
commitid	KJWrVvxMKHCyoezg;

1.33
date	2016.09.01.13.47.24;	author krw;	state Exp;
branches;
next	1.32;
commitid	Z8kN9kfwASYF8rE5;

1.32
date	2016.06.03.02.38.37;	author tedu;	state Exp;
branches;
next	1.31;
commitid	nZjOkjs2NCPq2Z4x;

1.31
date	2013.11.11.15.39.20;	author krw;	state Exp;
branches;
next	1.30;

1.30
date	2013.07.16.09.45.28;	author schwarze;	state Exp;
branches;
next	1.29;

1.29
date	2013.03.02.07.11.19;	author jmc;	state Exp;
branches;
next	1.28;

1.28
date	2013.02.24.12.18.43;	author krw;	state Exp;
branches;
next	1.27;

1.27
date	2013.02.09.16.44.37;	author jmc;	state Exp;
branches;
next	1.26;

1.26
date	2012.11.27.15.51.48;	author krw;	state Exp;
branches;
next	1.25;

1.25
date	2012.10.30.18.39.44;	author krw;	state Exp;
branches;
next	1.24;

1.24
date	2012.10.27.23.08.53;	author krw;	state Exp;
branches;
next	1.23;

1.23
date	2012.09.22.20.09.43;	author jmc;	state Exp;
branches;
next	1.22;

1.22
date	2012.08.22.00.14.42;	author tedu;	state Exp;
branches;
next	1.21;

1.21
date	2011.04.09.19.53.00;	author krw;	state Exp;
branches;
next	1.20;

1.20
date	2011.04.04.11.14.52;	author krw;	state Exp;
branches;
next	1.19;

1.19
date	2011.03.27.06.50.48;	author jmc;	state Exp;
branches;
next	1.18;

1.18
date	2011.03.26.23.17.50;	author krw;	state Exp;
branches;
next	1.17;

1.17
date	2008.10.05.20.36.00;	author jmc;	state Exp;
branches;
next	1.16;

1.16
date	2008.10.05.13.24.40;	author krw;	state Exp;
branches;
next	1.15;

1.15
date	2008.10.05.13.21.08;	author krw;	state Exp;
branches;
next	1.14;

1.14
date	2007.10.16.05.03.23;	author jmc;	state Exp;
branches;
next	1.13;

1.13
date	2007.05.31.19.19.43;	author jmc;	state Exp;
branches;
next	1.12;

1.12
date	2006.12.18.19.11.44;	author stevesk;	state Exp;
branches;
next	1.11;

1.11
date	2006.06.02.15.19.24;	author stevesk;	state Exp;
branches;
next	1.10;

1.10
date	2006.05.31.12.04.24;	author stevesk;	state Exp;
branches;
next	1.9;

1.9
date	2006.05.09.13.14.16;	author jmc;	state Exp;
branches;
next	1.8;

1.8
date	2006.05.09.06.00.27;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2006.05.08.17.25.59;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2005.09.30.20.34.23;	author jaredy;	state Exp;
branches;
next	1.5;

1.5
date	2004.11.01.23.10.18;	author henning;	state Exp;
branches;
next	1.4;

1.4
date	2004.04.15.08.59.47;	author jmc;	state Exp;
branches;
next	1.3;

1.3
date	2004.04.09.18.30.15;	author jmc;	state Exp;
branches;
next	1.2;

1.2
date	2004.04.04.15.12.02;	author jmc;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.18.01.26.20;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.35
log
@Shorten description and remove details regarding the parser implementation.

ok jmc@@ krw@@
@
text
@.\"	$OpenBSD: dhclient.conf.5,v 1.34 2016/09/01 20:06:52 jmc Exp $
.\"
.\" Copyright (c) 1997 The Internet Software Consortium.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of The Internet Software Consortium nor the names
.\"    of its contributors may be used to endorse or promote products derived
.\"    from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE INTERNET SOFTWARE CONSORTIUM AND
.\" CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
.\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
.\" DISCLAIMED.  IN NO EVENT SHALL THE INTERNET SOFTWARE CONSORTIUM OR
.\" CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
.\" LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
.\" USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
.\" ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
.\" OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
.\" OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\" This software has been written for the Internet Software Consortium
.\" by Ted Lemon <mellon@@fugue.com> in cooperation with Vixie
.\" Enterprises.  To learn more about the Internet Software Consortium,
.\" see ``http://www.isc.org/isc''.  To learn more about Vixie
.\" Enterprises, see ``http://www.vix.com''.
.\"
.Dd $Mdocdate: September 1 2016 $
.Dt DHCLIENT.CONF 5
.Os
.Sh NAME
.Nm dhclient.conf
.Nd DHCP client configuration file
.Sh DESCRIPTION
.Nm
is the configuration file for
.Xr dhclient 8 .
.Pp
The
.Nm
file is a free-form ASCII text file that may contain extra tabs and newlines for
formatting purposes.
Keywords in the file are case-insensitive.
Comments may be placed anywhere within the file (except within quotes).
Comments begin with the
.Sq #
character and extend to the end of the current line.
.Pp
The
.Nm
file can be used to configure the behaviour of the client in a wide variety
of ways: protocol timing, information requested from the server, information
required of the server, defaults to use if the server does not provide
certain information, values with which to override information provided by
the server, or values to prepend or append to information provided by the
server.
The configuration file can also be preinitialized with addresses to
use on networks that don't have DHCP servers.
.Sh PROTOCOL TIMING
The timing behaviour of the client need not be configured by the user.
If no timing configuration is provided by the user, a fairly
reasonable timing behaviour will be used by default \- one which
results in fairly timely updates without placing an inordinate load on
the server.
.Pp
The following statements can be used to adjust the timing behaviour of
the DHCP client if required, however:
.Bl -tag -width Ds
.It Ic timeout Ar time ;
The
.Ic timeout
statement determines the amount of time that must pass between the
time that the client begins to try to determine its address and the
time that it decides that it's not going to be able to contact a server.
After the timeout has passed, if there are any static leases defined in the
configuration file, or any leases remaining in the lease database that
have not yet expired, the client will loop through these leases
attempting to validate them, and if it finds one that appears to be
valid, it will use that lease's address.
If there are no valid static leases or unexpired leases in the lease database,
the client will restart the protocol after the defined retry interval.
.Pp
By default,
.Ic timeout
is set to thirty seconds.
.It Ic retry Ar time ;
The
.Ic retry
statement determines the time that must pass after the client has
determined that there is no DHCP server present before it tries again
to contact a DHCP server.
.Pp
By default,
.Ic retry
is set to one second.
.It Ic select-timeout Ar time ;
It is possible (some might say desirable) for there to be more than
one DHCP server serving any given network.
In this case, it is possible that a client may be sent more than one offer
in response to its initial lease discovery message.
It may be that one of these offers is preferable to the other
(e.g., one offer may have the address the client previously used,
and the other may not).
.Pp
The
.Ic select-timeout
is the time after the client sends its first lease discovery request
at which it stops waiting for offers from servers, assuming that it
has received at least one such offer.
If no offers have been received by the time the
.Ic select-timeout
has expired, the client will accept the first offer that arrives.
.Pp
By default,
.Ic select-timeout
is set to zero seconds
i.e. the client will immediately take the first offer it sees.
.It Ic reboot Ar time ;
When the client is restarted, it first tries to reacquire the last
address it had.
This is called the INIT-REBOOT state.
If it is still attached to the same network it was attached to when it last
ran, this is the quickest way to get started.
The
.Ic reboot
statement sets the time that must elapse after the client first tries
to reacquire its old address before it gives up and tries to discover
a new address.
.Pp
The value of
.Ic reboot
is also used to control how long a client will attempt unicast renewal
requests before falling back to using broadcast requests.
.Pp
By default,
.Ic reboot
is set to one second.
.It Ic backoff-cutoff Ar time ;
The client uses an exponential backoff algorithm with some randomness,
so that if many clients try to configure themselves at the same time,
they will not make their requests in lockstep.
The
.Ic backoff-cutoff
statement determines the maximum amount of time that the client is
allowed to back off.
.Pp
By default
.Ic backoff-cutoff
is set to ten seconds.
.It Ic initial-interval Ar time ;
The
.Ic initial-interval
statement sets the amount of time between the first attempt to reach a
server and the second attempt to reach a server.
Each time a message is sent, the interval between messages is incremented by
twice the current interval multiplied by a random number between zero and one.
If it is greater than the backoff-cutoff amount, it is set to that
amount.
.Pp
By default
.Ic initial-interval
is set to one second.
.It Ic link-timeout Ar time ;
The
.Ic link-timeout
statement sets the amount of time to wait for an interface link before timing
out.
The value zero requests that
dhclient not wait for a link state change before timing out.
.Pp
By default
.Ic link-timeout
is set to ten seconds.
.El
.Sh LEASE REQUIREMENTS AND REQUESTS
The DHCP protocol allows the client to request that the server send it
specific information, and not send it other information that it is not
prepared to accept.
The protocol also allows the client to reject offers from servers if they
don't contain information the client needs, or if the information provided
is not satisfactory.
.Pp
There is a variety of data contained in offers that DHCP servers send
to DHCP clients.
The data that can be specifically requested is what are called
.Em DHCP Options .
DHCP Options are defined in
.Xr dhcp-options 5 .
.Bl -tag -width Ds
.It Ic ignore Op Ar option , ... ;
The
.Ic ignore
statement causes the client to discard values provided by the server for
the specified options.
Only option names should be specified in the ignore statement \- not
option values.
Only the last
.Ic ignore
statement has any effect, overriding any previous
.Ic ignore
statement.
.It Ic request Op Ar option , ... ;
The
.Ic request
statement causes the client to request that any server responding to the
client send the client its values for the specified options.
Only option names should be specified in the request statement \- not
option values.
Only the last
.Ic request
statement has any effect, overriding any previous
.Ic request
statement.
.It Ic require Op Ar option , ... ;
The
.Ic require
statement lists options that must be sent in order for an offer to be accepted.
Offers that do not contain all the listed options will be ignored.
Only option names should be specified in the require statement \- not
option values.
Only the last
.Ic require
statement has any effect, overriding any previous
.Ic require
statement.
.It Ic send Ar option option-value ;
The
.Ic send
statement causes the client to send the specified option and value
to the server.
Options that are always sent in the DHCP protocol should not be specified
here.
One use for this statement is to send information to the server
that will allow it to differentiate between this client and other
clients or kinds of clients.
.El
.Sh OPTION MODIFIERS
Options in the lease can be modified before being accepted.
.Pp
Several option modifiers are available.
.Bl -tag -width Ds
.It Ic default Ar option option-value ;
Use
.Ar option-value
for the given
.Ar option ,
if no value is supplied by the server.
.It Ic supersede Ar option option-value ;
Use
.Ar option-value
for the given
.Ar option ,
regardless of the value supplied by the server.
.It Ic prepend Ar option option-value ;
Use
.Ar option-value
for the given
.Ar option ,
and then use the value supplied by the server.
.Ic prepend
can only be used for options which allow more than one value to be given.
The restriction is not enforced \- if violated, the results are unpredictable.
.It Ic append Ar option option-value ;
Use
.Ar option-value
for the given
.Ar option ,
after first using the value supplied by the server.
.Ic append
can only be used for options which allow more than one value to be given.
The restriction is not enforced \- if violated, the results are unpredictable.
.El
.Sh LEASE DECLARATIONS
The lease declaration:
.Pp
.D1 Ic lease No { Ar lease-declaration ; ... ; No }
.Pp
The DHCP client may decide after some period of time (see
.Sx PROTOCOL TIMING )
that it is not going to succeed in contacting a server.
At that time, it consults its own database of old leases and tests each one
that has not yet timed out by pinging the listed router for that lease to
see if that lease could work.
It is possible to define one or more
.Em fixed
leases in the client configuration file for networks where there is no DHCP
or BOOTP service, so that the client can still automatically configure its
address.
This is done with the
.Ic lease
statement.
.Pp
NOTE: the lease statement is also used in the
.Pa /var/db/dhclient.leases. Ns Aq Ar IFNAME
file in order to record leases that have been received from DHCP servers.
Some of the syntax for leases as described below is only needed in the
.Pa /var/db/dhclient.leases. Ns Aq Ar IFNAME
file.
Such syntax is documented here for completeness.
.Pp
A lease statement consists of the lease keyword, followed by a left
curly brace, followed by one or more lease declaration statements,
followed by a right curly brace.
The following lease declarations are possible:
.Pp
.Bl -tag -width Ds -compact
.It Ic bootp ;
The
.Ic bootp
statement is used to indicate that the lease was acquired using the
BOOTP protocol rather than the DHCP protocol.
It is never necessary to specify this in the client configuration file.
The client uses this syntax in its lease database file.
.Pp
.It Ic interface Qq Ar string ;
The
.Ic interface
lease statement is used to indicate the interface on which the lease is valid.
If set, this lease will only be tried on a particular interface.
When the client receives a lease from a server, it always records the
interface number on which it received that lease.
If predefined leases are specified in the
.Nm
file, the interface should also be specified, although this is not required.
.Pp
.It Ic fixed-address Ar ip-address ;
The
.Ic fixed-address
statement is used to set the IP address of a particular lease.
This is required for all lease statements.
The IP address must be specified as a dotted quad (e.g., 12.34.56.78).
.Pp
.It Ic filename Qq Ar string ;
The
.Ic filename
statement specifies the name of the boot filename to use.
This is not used by the standard client, but is included for completeness.
.Pp
.It Ic server-name Qq Ar string ;
The
.Ic server-name
statement specifies the name of the boot server name to use.
This is not used by the standard client, but is included for completeness.
.Pp
.It Ic option Ar option option-value ;
The
.Ic option
statement is used to specify the value of an option supplied by the server,
or, in the case of predefined leases declared in
.Nm dhclient.conf ,
the value that the user wishes the client to use if the
predefined lease is used.
.Pp
.It Ic renew Ar date ;
.It Ic rebind Ar date ;
.It Ic expire Ar date ;
The
.Ic renew
statement defines the time at which the DHCP client should begin trying to
contact its server to renew a lease that it is using.
The
.Ic rebind
statement defines the time at which the DHCP client should begin to try to
contact
.Em any
DHCP server in order to renew its lease.
The
.Ic expire
statement defines the time at which the DHCP client must stop using a lease
if it has not been able to contact a server in order to renew it.
.El
.Pp
These declarations are automatically set in leases acquired by the
DHCP client, but must also be configured in predefined leases \- a
predefined lease whose expiry time has passed will not be used by the
DHCP client.
.Pp
Dates are specified as follows:
.Pp
.D1 <weekday> <year>/<month>/<day> <hour>:<minute>:<second>
.Pp
The weekday is present to make it easy for a human to tell when a
lease expires \- it's specified as a number from zero to six, with zero
being Sunday.
When declaring a predefined lease, it can always be specified as zero.
The year is specified with the century, so it should generally be four
digits except for really long leases.
The month is specified as a number starting with 1 for January.
The day of the month is likewise specified starting with 1.
The hour is a number between 0 and 23,
the minute a number between 0 and 59,
and the second also a number between 0 and 59.
.Sh OTHER DECLARATIONS
.Bl -tag -width Ds
.It Ic reject Ar ip-address ;
The
.Ic reject
statement causes the DHCP client to reject offers from servers who use
the specified address as a server identifier.
This can be used to avoid being configured by rogue or misconfigured DHCP
servers, although it should be a last resort \- better to track down
the bad DHCP server and fix it.
.It Ic interface Qo Ar name Qc No { Ar declaration ; ... ; No }
A client with more than one network interface may require different
behaviour depending on which interface is being configured.
All timing parameters and declarations other than lease
declarations can be enclosed in an interface declaration, and those
parameters will then be used only for the interface that matches the
specified name.
Interfaces for which there is no interface declaration will use the
parameters declared outside of any interface declaration,
or the default settings.
.El
.Sh EXAMPLES
The following configuration file is used on a laptop
which has one interface, ep0 (a 3Com 3C589C).
Booting intervals have been shortened somewhat from the default, because
the client is known to spend most of its time on networks with little DHCP
activity.
The laptop does roam to multiple networks.
.Bd -literal -offset indent
timeout 60;
retry 60;
reboot 10;
select-timeout 5;
initial-interval 2;
reject 192.33.137.209;

interface "ep0" {
    send host-name "andare.fugue.com";
    send dhcp-client-identifier 1:0:a0:24:ab:fb:9c;
    send dhcp-lease-time 3600;
    supersede domain-name "fugue.com rc.vix.com home.vix.com";
    prepend domain-name-servers 127.0.0.1;
    request subnet-mask, broadcast-address, time-offset, routers,
	    domain-name, domain-name-servers, host-name;
    require subnet-mask, domain-name-servers;
}
.Ed
.Pp
This is a very complicated
.Nm
file \- in general, yours should be much simpler.
In many cases, it's sufficient to just create an empty
.Nm
file \- the defaults are usually fine.
.Sh SEE ALSO
.Xr dhclient.leases 5 ,
.Xr dhcp-options 5 ,
.Xr dhcpd.conf 5 ,
.Xr dhclient 8 ,
.Xr dhcpd 8
.Sh STANDARDS
.Rs
.%A R. Droms
.%D March 1997
.%R RFC 2131
.%T Dynamic Host Configuration Protocol
.Re
.Pp
.Rs
.%A S. Alexander
.%A R. Droms
.%D March 1997
.%R RFC 2132
.%T DHCP Options and BOOTP Vendor Extensions
.Re
.Sh AUTHORS
.An -nosplit
.Xr dhclient 8
was written by
.An Ted Lemon Aq Mt mellon@@vix.com
under a contract with Vixie Labs.
.Pp
The current implementation was reworked by
.An Henning Brauer Aq Mt henning@@openbsd.org .
@


1.34
log
@tweak previous;
@
text
@d1 1
a1 1
.\"	$OpenBSD: dhclient.conf.5,v 1.33 2016/09/01 13:47:24 krw Exp $
a45 1
The
d47 1
a47 1
file contains configuration information for
d52 2
a53 4
file is a free-form ASCII text file.
It is parsed by the recursive-descent parser built into
.Xr dhclient 8 .
The file may contain extra tabs and newlines for formatting purposes.
d58 1
a58 1
character and end at the end of the line.
@


1.33
log
@Document new default timeouts/intervals.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dhclient.conf.5,v 1.32 2016/06/03 02:38:37 tedu Exp $
d39 1
a39 1
.Dd $Mdocdate: June 3 2016 $
d130 1
a130 1
is set to zero seconds.
@


1.32
log
@update default value for reboot
@
text
@d1 1
a1 1
.\"	$OpenBSD: dhclient.conf.5,v 1.31 2013/11/11 15:39:20 krw Exp $
d39 1
a39 1
.Dd $Mdocdate: November 11 2013 $
a88 1
By default, this timeout is sixty seconds.
d96 4
d106 4
a109 1
By default, this is five minutes.
d128 1
a128 1
By default, the
d130 2
a131 1
is zero seconds \- that is, the client will take the first offer it sees.
d149 3
a151 1
By default, the reboot timeout is one second.
d160 4
a163 1
It defaults to fifteen seconds.
d173 4
a176 1
It defaults to three seconds.
a181 1
The default value is ten seconds.
d184 4
@


1.31
log
@RFC 2131 and friends state that when renewing a lease the client
will begin by using unicast communications with the server, and
fall back to using broadcast packets if unicast fails.

We were not failing back, but instead doggedly sticking with unicast
attempts until the lease expired.

Instead, try unicast requests for the reboot timeout interval and
then switch to using broadcast requests.

Problem reported by Marc Peters and Dennis den Brok via misc@@.

ok dlg@@ millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: dhclient.conf.5,v 1.30 2013/07/16 09:45:28 schwarze Exp $
d39 1
a39 1
.Dd $Mdocdate: July 16 2013 $
d142 1
a142 1
By default, the reboot timeout is ten seconds.
@


1.30
log
@Add missing .Mt macros for AUTHORS email addresses.
From Jan Stary <hans at stare dot cz>.
ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: dhclient.conf.5,v 1.29 2013/03/02 07:11:19 jmc Exp $
d39 1
a39 1
.Dd $Mdocdate: March 2 2013 $
d136 6
@


1.29
log
@rework some text that ken thought ambiguous; ok krw
@
text
@d1 1
a1 1
.\"	$OpenBSD: dhclient.conf.5,v 1.28 2013/02/24 12:18:43 krw Exp $
d39 1
a39 1
.Dd $Mdocdate: February 24 2013 $
d462 1
a462 1
.An Ted Lemon Aq mellon@@vix.com
d466 1
a466 1
.An Henning Brauer Aq henning@@openbsd.org .
@


1.28
log
@Remove some anachronisms and use consistant form and markup for
"/var/db/dhclient.leases.<IFNAME>".

Tweak and ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: dhclient.conf.5,v 1.27 2013/02/09 16:44:37 jmc Exp $
d39 1
a39 1
.Dd $Mdocdate: February 9 2013 $
d233 5
a237 5
If for some set of options the client should use the value supplied by
the server, but needs to use some default value if no value was supplied
by the server, these values can be defined in the
.Ic default
statement.
d239 5
a243 5
If for some set of options the client should always use its own value
rather than any value supplied by the server, these values can be defined
in the
.Ic supersede
statement.
d245 5
a249 6
If for some set of options the client should use a value you supply,
and then use the values supplied by the server, if any,
these values can be defined in the
.Ic prepend
statement.
The
d251 2
a252 3
statement can only be used for options which allow more than one value to
be given.
This restriction is not enforced \- if violated, the results are unpredictable.
d254 5
a258 6
If for some set of options the client should first use the values
supplied by the server, if any, and then use values you supply, these
values can be defined in the
.Ic append
statement.
The
d260 2
a261 4
statement can only be used for options which allow more than one value to
be given.
This restriction is not enforced \- if you ignore it,
the behaviour will be unpredictable.
@


1.27
log
@get the format of the various options in this file right and, along
the way, cut back on some of the crazy macros that were mostly around
to appease groff;

whilst there, fix the warnings reported by Jan Stary back in january;

lots of help and ok krw
@
text
@d1 1
a1 1
.\"	$OpenBSD: dhclient.conf.5,v 1.26 2012/11/27 15:51:48 krw Exp $
d39 1
a39 1
.Dd $Mdocdate: November 27 2012 $
d49 1
a49 2
.Xr dhclient 8 ,
the Internet Software Consortium DHCP Client.
d289 1
a289 1
.Pa dhclient.leases
d292 1
a292 1
.Pa dhclient.leases
@


1.26
log
@Clean up parsing of option lists. Part 6.

Treat 'ignore' option lists the same as 'request' and 'require'
option lists. i.e.  keep a list of the options rather than using
an ACTION flag. So overriding a previous ignore list will not leave
breadcrumbs and incorrect ACTIONs lying around.

The list will be applied when the new lease is created, and will
override any ACTION specified for the option.

Mention in dhclient.conf(5) that each request/require/ignore statement
will override any previous one.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dhclient.conf.5,v 1.25 2012/10/30 18:39:44 krw Exp $
d39 1
a39 1
.Dd $Mdocdate: October 30 2012 $
d181 1
a181 4
.It Xo
.Ic ignore Op Ar option
.Oo , Ar ... option Oc ;
.Xc
d186 2
a187 2
Only the option names should be specified in the ignore statement \- not
option parameters.
d193 1
a193 4
.It Xo
.Ic request Op Ar option
.Oo , Ar ... option Oc ;
.Xc
d198 2
a199 2
Only the option names should be specified in the request statement \- not
option parameters.
d205 1
a205 4
.It Xo
.Ic require Op Ar option
.Oo , Ar ... option Oc ;
.Xc
d210 2
a211 2
Only the option names should be specified in the require statement \- not
option parameters.
d217 1
a217 4
.It Xo
.Ic send No { Op Ar option declaration
.Oo , Ar ... option declaration Oc }
.Xc
d220 2
a221 4
statement causes the client to send the specified options to the server with
the specified values.
These are full option declarations as described in
.Xr dhcp-options 5 .
d233 1
a233 4
.It Xo
.Ic default No { Op Ar option declaration
.Oo , Ar ... option declaration Oc }
.Xc
d239 1
a239 4
.It Xo
.Ic supersede No { Op Ar option declaration
.Oo , Ar ... option declaration Oc }
.Xc
d245 1
a245 4
.It Xo
.Ic prepend No { Op Ar option declaration
.Oo , Ar ... option declaration Oc }
.Xc
d256 1
a256 4
.It Xo
.Ic append No { Op Ar option declaration
.Oo , Ar ... option declaration Oc }
.Xc
d272 1
a272 4
.Xo
.Ic \	\& lease No { Ar lease-declaration
.Oo Ar ... lease-declaration Oc }
.Xc
d301 2
a302 1
.Bl -tag -width Ds
d310 2
a311 1
.It Ic interface Ar \&"string\&" ;
d321 1
d328 2
a329 1
.It Ic filename Ar \&"string\&" ;
d334 2
a335 1
.It Ic server-name Ar \&"string\&" ;
d340 2
a341 1
.It Ic option Ar option-declaration ;
d349 1
d376 1
a376 5
.Ar \	\&<weekday>
.Sm off
.Ar <year> No / Ar <month> No / Ar <day>
.Ar <hour> : <minute> : <second>
.Sm on
d399 1
a399 4
.It Xo
.Ic interface Ar \&"name\&" No { Ar declarations
.Ar ... No }
.Xc
@


1.25
log
@Nuke dhclient-script and dhclient.conf 'script' directive. Do all
interface and route configuration via ioctl's and routing sockets.

This will break configurations using local enhancements of
dhclient-script, which will now require alternate arrangements.

Committing early to allow time to identify and develop required
alternatives.

Several proddings by deraadt@@.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dhclient.conf.5,v 1.24 2012/10/27 23:08:53 krw Exp $
d39 1
a39 1
.Dd $Mdocdate: October 27 2012 $
d191 5
d206 5
d219 7
@


1.24
log
@Change dhclient.conf directive 'ignore' to take a list of option names
rather than list of option declarations. e.g. 'ignore routers;'
instead of 'ignore routers 1.2.3.4;' The value in the declaration
was being ignored anyway.

While there clean up the related code a bit.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dhclient.conf.5,v 1.23 2012/09/22 20:09:43 jmc Exp $
d39 1
a39 1
.Dd $Mdocdate: September 22 2012 $
d226 1
a226 9
Options in the lease can be modified before being passed to the client
configuration script,
.Xr dhclient-script 8 .
.Pp
The default client configuration script
processes only options 1 (subnet
mask), 3 (routers), 6 (domain name servers), and 15 (domain-name).
Use of option modifiers on other options will have no effect unless
the client configuration script is modified.
d341 1
a341 2
This is not used by the standard client configuration script, but is
included for completeness.
d346 1
a346 1
This is also not used by the standard client configuration script.
d353 1
a353 1
the value that the user wishes the client configuration script to use if the
a420 13
.It Ic script Ar \&"script-name\&" ;
The
.Ic script
statement is used to specify the pathname of the client configuration
script.
This script is used by the DHCP client to set each interface's initial
configuration prior to requesting an address, to test the address once it
has been offered, and to set the interface's final configuration once a
lease has been acquired.
If no lease is acquired, the script is used to test predefined leases, if
any, and also called once if no valid lease can be identified.
For more information, see
.Xr dhclient.leases 5 .
a445 1
    script "/etc/dhclient-script";
a459 1
.Xr dhclient-script 8 ,
@


1.23
log
@last stage of rfc changes, using consistent Rs/Re blocks, and moving the
references into a STANDARDS section;
@
text
@d1 1
a1 1
.\"	$OpenBSD: dhclient.conf.5,v 1.22 2012/08/22 00:14:42 tedu Exp $
d39 1
a39 1
.Dd $Mdocdate: August 22 2012 $
d182 10
a254 8
statement.
.It Xo
.Ic ignore No { Op Ar option declaration
.Oo , Ar ... option declaration Oc }
.Xc
If for some set of options the client should always ignore the
value supplied by the server, these values can be defined in the
.Ic ignore
@


1.22
log
@add ignore keyword to conf file, allowing one to ignore unwanted info
from the server without necessarily speciyfing a supersede value
@
text
@d1 1
a1 1
.\"	$OpenBSD: dhclient.conf.5,v 1.21 2011/04/09 19:53:00 krw Exp $
d39 1
a39 1
.Dd $Mdocdate: April 9 2011 $
d483 15
a497 2
.Pp
RFC 2132, RFC 2131.
@


1.21
log
@We are incorrectly processing option 33 (static route), treating
is as a host route rather than a classful network route. Too
much trouble to fix such an obsolete feature, so ignore option
33 info.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dhclient.conf.5,v 1.20 2011/04/04 11:14:52 krw Exp $
d39 1
a39 1
.Dd $Mdocdate: April 4 2011 $
d245 8
@


1.20
log
@Dump some useless calls to dhclient-script. i.e. MEDIUM, PREINIT,
ARPSEND, ARPCHECK. Drop support for 'media', 'medium' and 'alias'
specifications in dhclient.conf. Old leases still parse but these
options now have no effect.

Be more polite and decline all offers we don't accept. Fix a IMSG
length check.

Many expressions of support at various bars.

ok henning@@ deraadt@@ beck@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: dhclient.conf.5,v 1.19 2011/03/27 06:50:48 jmc Exp $
d39 1
a39 1
.Dd $Mdocdate: March 27 2011 $
d222 1
a222 2
mask), 3 (routers), 6 (domain name servers), 15 (domain-name), and 33
(static routes).
@


1.19
log
@new sentence, new line;
@
text
@d1 1
a1 1
.\"	$OpenBSD: dhclient.conf.5,v 1.18 2011/03/26 23:17:50 krw Exp $
d39 1
a39 1
.Dd $Mdocdate: March 26 2011 $
a354 18
.It Ic medium Ar \&"media setup\&" ;
The
.Ic medium
statement can be used on systems where network interfaces cannot
automatically determine the type of network to which they are connected.
The media setup string is a system-dependent parameter which is passed
to the client configuration script when initializing the interface.
On
.Ux
and UNIX-like systems, the argument is passed on the ifconfig command line
when configuring the interface.
.Pp
The DHCP client automatically declares this parameter if it used a
media type (see the
.Ic media
statement) when configuring the interface in order to obtain a lease.
This statement should be used in predefined leases only if the network
interface requires media type configuration.
a397 21
.Sh ALIAS DECLARATIONS
.Ic alias No { Ar declarations ... No }
.Pp
Some DHCP clients running TCP/IP roaming protocols may require that in
addition to the lease they may acquire via DHCP, their interface also
be configured with a predefined IP alias so that they can have a
permanent IP address even while roaming.
The Internet Software Consortium DHCP client doesn't support roaming with
fixed addresses directly, but in order to facilitate such experimentation,
the DHCP client can be set up to configure an IP alias using the
.Ic alias
declaration.
.Pp
The
.Ic alias
declaration resembles a lease declaration, except that options other than
the subnet-mask option are ignored by the standard client configuration
script, and expiry times are ignored.
A typical alias declaration includes an interface declaration, a fixed-address
declaration for the IP alias address, and a subnet-mask option declaration.
A medium statement should never be included in an alias declaration.
d414 1
a414 1
All timing parameters and declarations other than lease and alias
a420 22
.It Xo
.Ic media Ar \&"media setup\&"
.Oo , Ar \&"media setup\&" , ... Oc ;
.Xc
The
.Ic media
statement defines one or more media configuration parameters which may
be tried while attempting to acquire an IP address.
The DHCP client will cycle through each media setup string on the list,
configuring the interface using that setup and attempting to boot,
and then trying the next one.
This can be used for network interfaces which aren't capable of sensing
the media type unaided \- whichever media type succeeds in getting a request
to the server and hearing the reply is probably right (no guarantees).
.Pp
The media setup is only used for the initial phase of address
acquisition (the DHCPDISCOVER and DHCPOFFER packets).
Once an address has been acquired, the DHCP client will record it in its
lease database and will record the media type used to acquire the address.
Whenever the client tries to renew the lease, it will use that same media type.
The lease must expire before the client will go back to cycling through media
types.
d437 1
a437 2
which has an IP alias of 192.5.5.213, and has one interface,
ep0 (a 3Com 3C589C).
a459 7
    media "media 10baseT/UTP", "media 10base2/BNC";
}

alias {
  interface "ep0";
  fixed-address 192.5.5.213;
  option subnet-mask 255.255.255.255;
@


1.18
log
@Correct described default for initial-interval. It is three, not
ten, seconds.  Use words not numerals consistently when naming
various timing values. Tweak one clumsy sentence.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dhclient.conf.5,v 1.17 2008/10/05 20:36:00 jmc Exp $
d39 1
a39 1
.Dd $Mdocdate: October 5 2008 $
d162 2
a163 1
The default value is ten seconds. The value zero requests that
@


1.17
log
@- talk about the "client configuration script" consistenly
- Xr dhclient-script on first mention, which is section 8 not 5

ok krw
@
text
@d1 1
a1 1
.\"	$OpenBSD: dhclient.conf.5,v 1.16 2008/10/05 13:24:40 krw Exp $
d146 1
a146 1
It defaults to 15 seconds.
d156 1
a156 1
It defaults to ten seconds.
d162 2
a163 2
The default value is 10 seconds, but the special value 0 requests that dhclient
not wait for a link state change before timing out.
@


1.16
log
@Oops. Missed one typo jmc@@ spotted.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dhclient.conf.5,v 1.15 2008/10/05 13:21:08 krw Exp $
d217 1
a217 1
.Xr dhclient-script 5 .
d219 1
a219 2
The default
.Xr dhclient-script 5
d224 1
a224 2
.Xr dhclient-script 5
is modified.
d360 1
a360 1
to the DHCP client configuration script when initializing the interface.
d484 1
a484 1
statement is used to specify the pathname of the DHCP client configuration
a538 1
.Xr dhclient-script 5 ,
d542 1
@


1.15
log
@Clarify discussion of option modifiers. They only affect values passed
to dhclient-script. Our default script only uses a few options so
others are unaffected by option modifiers. PR#5834 is thus rendered
moot.

Feedback & suggestions from jmc@@, ok deraadt@@.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dhclient.conf.5,v 1.14 2007/10/16 05:03:23 jmc Exp $
d39 1
a39 1
.Dd $Mdocdate: October 16 2007 $
d226 1
a226 1
is modified,
@


1.14
log
@"script" does not belong in the lease declaration section;
from Vincent GROSS

ok henning
@
text
@d1 1
a1 1
.\"	$OpenBSD: dhclient.conf.5,v 1.13 2007/05/31 19:19:43 jmc Exp $
d39 1
a39 1
.Dd $Mdocdate$
d215 14
a228 6
In some cases, a client may receive option data from the server which
is not really appropriate for that client, or may not receive
information that it needs, and for which a useful default value exists.
It may also receive information which is useful, but which needs to be
supplemented with local information.
To handle these needs, several option modifiers are available.
d541 1
@


1.13
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: dhclient.conf.5,v 1.12 2006/12/18 19:11:44 stevesk Exp $
a347 13
.It Ic script Ar \&"script-name\&" ;
The
.Ic script
statement is used to specify the pathname of the DHCP client configuration
script.
This script is used by the DHCP client to set each interface's initial
configuration prior to requesting an address, to test the address once it
has been offered, and to set the interface's final configuration once a
lease has been acquired.
If no lease is acquired, the script is used to test predefined leases, if
any, and also called once if no valid lease can be identified.
For more information, see
.Xr dhclient.leases 5 .
d475 13
@


1.12
log
@remove statement for send parameter: "except that the client can
specify a dhcp-lease-time option other than the default requested
lease time, which is two hours".

we don't by default send a dhcp-lease-time option in request/discover.

ok jmc@@, henning@@ 'if you are sure'
@
text
@d1 1
a1 1
.\"	$OpenBSD: dhclient.conf.5,v 1.11 2006/06/02 15:19:24 stevesk Exp $
d39 1
a39 1
.Dd January 1, 1997
@


1.11
log
@backoff-cutoff defaults to 15 seconds; ok henning@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: dhclient.conf.5,v 1.10 2006/05/31 12:04:24 stevesk Exp $
d209 2
a210 4
here, except that the client can specify a
.Ar dhcp-lease-time
option other than the default requested lease time, which is two hours.
The other obvious use for this statement is to send information to the server
@


1.10
log
@clarify link-timeout default as seconds; ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: dhclient.conf.5,v 1.9 2006/05/09 13:14:16 jmc Exp $
d146 1
a146 1
It defaults to two minutes.
@


1.9
log
@new sentence, new line;
@
text
@d1 1
a1 1
.\"	$OpenBSD: dhclient.conf.5,v 1.8 2006/05/09 06:00:27 deraadt Exp $
d162 1
a162 1
The default value is 10, but the special value 0 requests that dhclient
@


1.8
log
@spelling
@
text
@d1 1
a1 1
.\"	$OpenBSD: dhclient.conf.5,v 1.7 2006/05/08 17:25:59 deraadt Exp $
d161 2
a162 1
out. The default value is 10, but the special value 0 requests that dhclient
@


1.7
log
@add 'link-timeout n' seconds option to grammer, from fkr@@hazardous.org
default remains 10 seconds.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dhclient.conf.5,v 1.6 2005/09/30 20:34:23 jaredy Exp $
d160 3
a162 3
statement sets the amount of time too wait for an interface link before timing
out. Theres a default value of 10 and the special value 0 says that dhclient
should not wait for a link state change before timing out.
@


1.6
log
@deploy .An -nosplit; ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: dhclient.conf.5,v 1.5 2004/11/01 23:10:18 henning Exp $
d157 6
@


1.5
log
@much to my surprise a minute has only 60 seconds, and the hour 60 minutes,
not 70 :(
From: Jorden Verwer <J.Verwer@@inter.NL.net>
@
text
@d1 1
a1 1
.\"	$OpenBSD: dhclient.conf.5,v 1.4 2004/04/15 08:59:47 jmc Exp $
d535 1
@


1.4
log
@more AUTHORS update;
ok henning@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: dhclient.conf.5,v 1.3 2004/04/09 18:30:15 jmc Exp $
d415 2
a416 2
the minute a number between 0 and 69,
and the second also a number between 0 and 69.
@


1.3
log
@remove some excess from AUTHORS, and slight update;

requested by henning, and discussed w/ him and deraadt;
ok henning@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: dhclient.conf.5,v 1.2 2004/04/04 15:12:02 jmc Exp $
d539 3
@


1.2
log
@Emil Mikulic pointed out there are two copies of this stuff (thanks!) ...

- correct option is `dhcp-lease-time', not `requested-lease-time'; fixed
w/ help from krw@@
- kill a rake of unnecessary .Pp's
@
text
@d1 1
a1 1
.\"	$OpenBSD: dhclient.conf.5,v 1.1 2004/01/18 01:26:20 deraadt Exp $
a538 3
Funding for this project was provided by the Internet Software Corporation.
Information about the Internet Software Consortium can be found at
.Pa http://www.isc.org/isc .
@


1.1
log
@this is where dhclient will start surgery
@
text
@d1 1
a1 1
.\"	$OpenBSD: dhclient.conf.5,v 1.13 2003/06/25 09:27:57 jmc Exp $
a82 1
.Pp
a171 1
.Pp
d203 1
a203 1
.Ar requested-lease-time
a215 1
.Pp
a265 1
.Pp
a299 1
.Pp
a417 1
.Pp
a438 1
.Pp
@

