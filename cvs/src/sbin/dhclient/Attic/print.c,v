head	1.6;
access;
symbols;
locks; strict;
comment	@ * @;


1.6
date	2004.02.24.16.37.19;	author henning;	state dead;
branches;
next	1.5;

1.5
date	2004.02.24.15.35.56;	author henning;	state Exp;
branches;
next	1.4;

1.4
date	2004.02.07.13.59.45;	author henning;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.06.11.33.22;	author henning;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.04.12.16.56;	author henning;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.18.01.26.20;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.6
log
@bye bye
@
text
@/*	$OpenBSD: print.c,v 1.5 2004/02/24 15:35:56 henning Exp $	*/

/* Turn data structures into printable text. */

/*
 * Copyright (c) 1995, 1996, 1997, 1998 The Internet Software Consortium.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of The Internet Software Consortium nor the names
 *    of its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INTERNET SOFTWARE CONSORTIUM AND
 * CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE INTERNET SOFTWARE CONSORTIUM OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * This software has been written for the Internet Software Consortium
 * by Ted Lemon <mellon@@fugue.com> in cooperation with Vixie
 * Enterprises.  To learn more about the Internet Software Consortium,
 * see ``http://www.vix.com/isc''.  To learn more about Vixie
 * Enterprises, see ``http://www.vix.com''.
 */

#include "dhcpd.h"

char *
print_hw_addr(int htype, int hlen, unsigned char *data)
{
	static char habuf[49];
	char *s;
	int i;

	if (htype == 0 || hlen == 0)
		goto bad;
	else {
		int slen = sizeof(habuf);
		s = habuf;
		for (i = 0; i < hlen; i++) {
			int j;
			j = snprintf(s, slen, "%02x", data[i]);
			if (j <= 0)
				goto bad;

			s += strlen(s);
			slen -= strlen(s) + 1;
			*s++ = ':';
		}
		*--s = 0;
	}
	return (habuf);
bad:
	strlcpy(habuf, "<null>", sizeof(habuf));
	return (habuf);

}

void
dump_packet(struct packet *tp)
{
	struct dhcp_packet *tdp = tp->raw;

	debug("packet length %d", tp->packet_length);
	debug("op = %d  htype = %d  hlen = %d  hops = %d",
	    tdp->op, tdp->htype, tdp->hlen, tdp->hops);
	debug("xid = %x  secs = %d  flags = %x",
	    tdp->xid, tdp->secs, tdp->flags);
	debug("ciaddr = %s", inet_ntoa(tdp->ciaddr));
	debug("yiaddr = %s", inet_ntoa(tdp->yiaddr));
	debug("siaddr = %s", inet_ntoa(tdp->siaddr));
	debug("giaddr = %s", inet_ntoa(tdp->giaddr));
	debug("chaddr = %02x:%02x:%02x:%02x:%02x:%02x",
	    ((unsigned char *)tdp->chaddr)[0],
	    ((unsigned char *)tdp->chaddr)[1],
	    ((unsigned char *)tdp->chaddr)[2],
	    ((unsigned char *)tdp->chaddr)[3],
	    ((unsigned char *)tdp->chaddr)[4],
	    ((unsigned char *)tdp->chaddr)[5]);
	debug("filename = %s", tdp->file);
	debug("server_name = %s", tdp->sname);
	if (tp->options_valid) {
		int i;

		for (i = 0; i < 256; i++)
			if (tp->options[i].data)
				debug("  %s = %s",
				    dhcp_options[i].name,
				    pretty_print_option(i,
					tp->options[i].data,
					tp->options[i].len, 1, 1));
	}
	debug("%s", "");
}

void
dump_raw(unsigned char *buf, int len)
{
	int i, j;
	char lbuf[80];
	int llen = sizeof(lbuf);
	int lbix = 0;

	lbuf[0] = 0;

	for (i = 0; i < len; i++) {
		if ((i & 15) == 0) {
			if (lbix)
				note(lbuf);
			j = snprintf(lbuf, llen, "%03x:", i);
			if (j >= llen)
				return;
			lbix += j;
			llen -= j;
		} else if ((i & 7) == 0) {
			lbuf[lbix++] = ' ';
			len--;
		}
		j = snprintf(&lbuf[lbix], llen, " %02x", buf[i]);
		if (j >= llen)
			return;
		lbix += j;
		llen -= j;
	}
	note(lbuf);
}

void
hash_dump(struct hash_table *table)
{
	int i;
	struct hash_bucket *bp;

	if (!table)
		return;

	for (i = 0; i < table->hash_count; i++) {
		if (!table->buckets[i])
			continue;
		note("hash bucket %d:", i);
		for (bp = table->buckets[i]; bp; bp = bp->next)
			if (bp->len)
				dump_raw(bp->name, bp->len);
			else
				note((char *)bp->name);
	}
}
@


1.5
log
@get rid of tons of structs we never use, a lot of new_someotherjunk functions
in alloc.c we never call, and a shitload of genius comments like
char *script_name; /* name of script */
char *server_name; /* name of server */
etc etc etc...
@
text
@d1 1
a1 1
/*	$OpenBSD: print.c,v 1.4 2004/02/07 13:59:45 henning Exp $	*/
@


1.4
log
@KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: print.c,v 1.3 2004/02/06 11:33:22 henning Exp $	*/
a73 28
}

void
print_lease(struct lease *lease)
{
	struct tm *t;
	char tbuf[32];

	debug("      Lease %s", piaddr(lease->ip_addr));

	t = gmtime(&lease->starts);
	strftime(tbuf, sizeof(tbuf), "%Y/%m/%d %H:%M:%S", t);
	debug("        start %s", tbuf);

	t = gmtime(&lease->ends);
	strftime(tbuf, sizeof(tbuf), "%Y/%m/%d %H:%M:%S", t);
	debug("        end %s", tbuf);

	t = gmtime(&lease->timestamp);
	strftime(tbuf, sizeof(tbuf), "%Y/%m/%d %H:%M:%S", t);
	debug("        stamp %s", tbuf);

	debug("        hardware addr = %s", print_hw_addr(
	    lease->hardware_addr.htype,
	    lease->hardware_addr.hlen,
	    lease->hardware_addr.haddr));
	debug("        host %s  ",
	    lease->host ? lease->host->name : "<none>");
@


1.3
log
@more Knall & Rauch -> ANSI C, KNF and stuff that makes this a bit more
readable. no effect on the binary.
From: Emil Mikulic <emikulic@@dmr.ath.cx>
@
text
@d1 1
a1 1
/*	$OpenBSD: print.c,v 1.2 2004/02/04 12:16:56 henning Exp $	*/
d65 1
a65 1
 			*s++ = ':';
@


1.2
log
@$OpenBSD$, tedu
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d45 2
a46 4
char *print_hw_addr (htype, hlen, data)
	int htype;
	int hlen;
	unsigned char *data;
d48 1
a48 1
	static char habuf [49];
d52 1
a52 1
	if (htype == 0 || hlen == 0) {
d54 1
a54 1
	} else {
d59 1
a59 1
			j = snprintf (s, slen, "%02x", data [i]);
d63 2
a64 2
			s += strlen (s);
			slen -= (strlen(s) + 1);
d69 4
a72 4
	return habuf;
 bad:	
	strlcpy (habuf, "<null>", sizeof habuf);
	return habuf;
d76 2
a77 2
void print_lease (lease)
	struct lease *lease;
d80 1
a80 1
	char tbuf [32];
d82 1
a82 22
	debug ("      Lease %s",
	       piaddr (lease -> ip_addr));
	
	t = gmtime (&lease -> starts);
	strftime (tbuf, sizeof tbuf, "%Y/%m/%d %H:%M:%S", t);
	debug ("        start %s", tbuf);
	
	t = gmtime (&lease -> ends);
	strftime (tbuf, sizeof tbuf, "%Y/%m/%d %H:%M:%S", t);
	debug ("        end %s", tbuf);
	
	t = gmtime (&lease -> timestamp);
	strftime (tbuf, sizeof tbuf, "%Y/%m/%d %H:%M:%S", t);
	debug ("        stamp %s", tbuf);
	
	debug ("        hardware addr = %s",
	       print_hw_addr (lease -> hardware_addr.htype,
			       lease -> hardware_addr.hlen,
			       lease -> hardware_addr.haddr));
	debug ("        host %s  ",
	       lease -> host ? lease -> host -> name : "<none>");
}	
d84 22
a105 2
void dump_packet (tp)
	struct packet *tp;
d107 1
a107 1
	struct dhcp_packet *tdp = tp -> raw;
d109 19
a127 19
	debug ("packet length %d", tp -> packet_length);
	debug ("op = %d  htype = %d  hlen = %d  hops = %d",
	       tdp -> op, tdp -> htype, tdp -> hlen, tdp -> hops);
	debug ("xid = %x  secs = %d  flags = %x",
	       tdp -> xid, tdp -> secs, tdp -> flags);
	debug ("ciaddr = %s", inet_ntoa (tdp -> ciaddr));
	debug ("yiaddr = %s", inet_ntoa (tdp -> yiaddr));
	debug ("siaddr = %s", inet_ntoa (tdp -> siaddr));
	debug ("giaddr = %s", inet_ntoa (tdp -> giaddr));
	debug ("chaddr = %02x:%02x:%02x:%02x:%02x:%02x",
	       ((unsigned char *)(tdp -> chaddr)) [0],
	       ((unsigned char *)(tdp -> chaddr)) [1],
	       ((unsigned char *)(tdp -> chaddr)) [2],
	       ((unsigned char *)(tdp -> chaddr)) [3],
	       ((unsigned char *)(tdp -> chaddr)) [4],
	       ((unsigned char *)(tdp -> chaddr)) [5]);
	debug ("filename = %s", tdp -> file);
	debug ("server_name = %s", tdp -> sname);
	if (tp -> options_valid) {
d130 7
a136 8
		for (i = 0; i < 256; i++) {
			if (tp -> options [i].data)
				debug ("  %s = %s",
					dhcp_options [i].name,
					pretty_print_option
					(i, tp -> options [i].data,
					 tp -> options [i].len, 1, 1));
		}
d138 1
a138 1
	debug ("%s", "");
d141 2
a142 3
void dump_raw (buf, len)
	unsigned char *buf;
	int len;
d145 1
a145 1
	char lbuf [80];
d149 1
a149 1
	lbuf [0] = 0;
d154 2
a155 2
				note (lbuf);
			j = snprintf (lbuf, llen, "%03x:", i);
d158 4
a161 4
			lbix+=j;
			llen-=j;
		} else if ((i & 7) == 0) { 
			lbuf [lbix++] = ' ';
d164 1
a164 1
		j = snprintf (&lbuf [lbix], llen, " %02x", buf [i]);
d170 1
a170 1
	note (lbuf);
d173 2
a174 2
void hash_dump (table)
	struct hash_table *table;
d182 2
a183 2
	for (i = 0; i < table -> hash_count; i++) {
		if (!table -> buckets [i])
d185 4
a188 4
		note ("hash bucket %d:", i);
		for (bp = table -> buckets [i]; bp; bp = bp -> next) {
			if (bp -> len)
				dump_raw (bp -> name, bp -> len);
d190 1
a190 2
				note ((char *)bp -> name);
		}
@


1.1
log
@this is where dhclient will start surgery
@
text
@d1 1
a1 1
/* print.c
d3 1
a3 1
   Turn data structures into printable text. */
@

