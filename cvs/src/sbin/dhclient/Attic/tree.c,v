head	1.15;
access;
symbols
	OPENBSD_3_7:1.13.0.4
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.2
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.9.0.2
	OPENBSD_3_5_BASE:1.9;
locks; strict;
comment	@ * @;


1.15
date	2005.07.17.19.36.25;	author krw;	state dead;
branches;
next	1.14;

1.14
date	2005.07.09.14.36.16;	author krw;	state Exp;
branches;
next	1.13;

1.13
date	2004.05.06.22.29.15;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2004.05.04.22.23.01;	author mickey;	state Exp;
branches;
next	1.11;

1.11
date	2004.05.04.20.28.40;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2004.04.14.20.22.27;	author henning;	state Exp;
branches;
next	1.9;

1.9
date	2004.02.24.17.02.40;	author henning;	state Exp;
branches;
next	1.8;

1.8
date	2004.02.24.13.08.26;	author henning;	state Exp;
branches;
next	1.7;

1.7
date	2004.02.24.00.34.40;	author henning;	state Exp;
branches;
next	1.6;

1.6
date	2004.02.23.20.09.02;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2004.02.07.13.59.45;	author henning;	state Exp;
branches;
next	1.4;

1.4
date	2004.02.07.13.26.35;	author henning;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.04.12.16.56;	author henning;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.04.01.18.26;	author henning;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.18.01.26.20;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.15
log
@No longer used.
@
text
@/*	$OpenBSD: tree.c,v 1.14 2005/07/09 14:36:16 krw Exp $	*/

/* Routines for manipulating parse trees... */

/*
 * Copyright (c) 1995, 1996, 1997 The Internet Software Consortium.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of The Internet Software Consortium nor the names
 *    of its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INTERNET SOFTWARE CONSORTIUM AND
 * CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE INTERNET SOFTWARE CONSORTIUM OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * This software has been written for the Internet Software Consortium
 * by Ted Lemon <mellon@@fugue.com> in cooperation with Vixie
 * Enterprises.  To learn more about the Internet Software Consortium,
 * see ``http://www.vix.com/isc''.  To learn more about Vixie
 * Enterprises, see ``http://www.vix.com''.
 */

#include "dhcpd.h"

pair
cons(caddr_t car, pair cdr)
{
	pair foo = calloc(1, sizeof(*foo));
	if (!foo)
		error("no memory for cons.");
	foo->car = car;
	foo->cdr = cdr;
	return (foo);
}
@


1.14
log
@Clean out a few more unused/uninitialized variables.

ok henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tree.c,v 1.13 2004/05/06 22:29:15 deraadt Exp $	*/
@


1.13
log
@remove more unused code
@
text
@d1 1
a1 1
/*	$OpenBSD: tree.c,v 1.12 2004/05/04 22:23:01 mickey Exp $	*/
a43 2

extern int h_errno;
@


1.12
log
@do not overload libc function names causing linker troubles
@
text
@d1 1
a1 1
/*	$OpenBSD: tree.c,v 1.11 2004/05/04 20:28:40 deraadt Exp $	*/
a46 7
static time_t	tree_evaluate_recurse(int *, unsigned char **, int *,
		    struct tree *);
static time_t	do_host_lookup(int *, unsigned char **, int *,
		    struct dns_host_entry *);
static void	do_data_copy(int *, unsigned char **, int *, unsigned char *,
		    int);

a55 195
}

int
tree_evaluate(struct tree_cache *tree_cache)
{
	unsigned char *bp = tree_cache->value;
	int bc = tree_cache->buf_size;
	int bufix = 0;

	/*
	 * If there's no tree associated with this cache, it evaluates
	 * to a constant and that was detected at startup.
	 */
	if (!tree_cache->tree)
		return (1);

	/* Try to evaluate the tree without allocating more memory... */
	tree_cache->timeout = tree_evaluate_recurse(&bufix, &bp, &bc,
	    tree_cache->tree);

	/* No additional allocation needed? */
	if (bufix <= bc) {
		tree_cache->len = bufix;
		return (1);
	}

	/*
	 * If we can't allocate more memory, return with what we have
	 * (maybe nothing).
	 */
	if (!(bp = calloc(1, bufix)))
		return (0);

	/* Record the change in conditions... */
	bc = bufix;
	bufix = 0;

	/*
	 * Note that the size of the result shouldn't change on the
	 * second call to tree_evaluate_recurse, since we haven't
	 * changed the ``current'' time.
	 */
	tree_evaluate_recurse(&bufix, &bp, &bc, tree_cache->tree);

	/*
	 * Free the old buffer if needed, then store the new buffer
	 * location and size and return.
	 */
	free(tree_cache->value);
	tree_cache->value = bp;
	tree_cache->len = bufix;
	tree_cache->buf_size = bc;
	return (1);
}

static time_t
tree_evaluate_recurse(int *bufix, unsigned char **bufp, int *bufcount,
    struct tree *tree)
{
	int limit;
	time_t t1, t2;

	switch (tree->op) {
	case TREE_CONCAT:
		t1 = tree_evaluate_recurse(bufix, bufp, bufcount,
		    tree->data.concat.left);
		t2 = tree_evaluate_recurse(bufix, bufp, bufcount,
		    tree->data.concat.right);
		if (t1 > t2)
			return (t2);
		return (t1);

	case TREE_HOST_LOOKUP:
		return (do_host_lookup(bufix, bufp, bufcount,
		    tree->data.host_lookup.host));

	case TREE_CONST:
		do_data_copy(bufix, bufp, bufcount,
		    tree->data.const_val.data,
		    tree->data.const_val.len);
		t1 = MAX_TIME;
		return (t1);

	case TREE_LIMIT:
		limit = *bufix + tree->data.limit.limit;
		t1 = tree_evaluate_recurse(bufix, bufp, bufcount,
		    tree->data.limit.tree);
		*bufix = limit;
		return (t1);

	default:
		warning("Bad node id in tree: %d.", tree->op);
		t1 = MAX_TIME;
		return (t1);
	}
}

static time_t
do_host_lookup(int *bufix, unsigned char **bufp, int *bufcount,
    struct dns_host_entry *dns)
{
	struct hostent *h;
	int i;
	int new_len;

	/* If the record hasn't timed out, just copy the data and return. */
	if (cur_time <= dns->timeout) {
		do_data_copy(bufix, bufp, bufcount,
		    dns->data, dns->data_len);
		return (dns->timeout);
	}

	/* Otherwise, look it up... */
	h = gethostbyname(dns->hostname);
	if (h == NULL) {
		switch (h_errno) {
		case HOST_NOT_FOUND:
			warning("%s: host unknown.", dns->hostname);
			break;
		case TRY_AGAIN:
			warning("%s: temporary name server failure",
			    dns->hostname);
			break;
		case NO_RECOVERY:
			warning("%s: name server failed", dns->hostname);
			break;
		case NO_DATA:
			warning("%s: no A record associated with address",
			    dns->hostname);
		}
		/* Okay to try again after a minute. */
		return (cur_time + 60);
	}

	/* Count the number of addresses we got... */
	for (i = 0; h->h_addr_list[i]; i++)
		;

	/* Do we need to allocate more memory? */
	new_len = i * h->h_length;
	if (dns->buf_len < i) {
		unsigned char *buf = calloc(1, new_len);
		/* If we didn't get more memory, use what we have. */
		if (!buf) {
			new_len = dns->buf_len;
			if (!dns->buf_len) {
				dns->timeout = cur_time + 60;
				return (dns->timeout);
			}
		} else {
			if (dns->data)
				free(dns->data);
			dns->data = buf;
			dns->buf_len = new_len;
		}
	}

	/*
	 * Addresses are conveniently stored one to the buffer, so we
	 * have to copy them out one at a time... :'(
	 */
	for (i = 0; i < new_len / h->h_length; i++) {
		memcpy(dns->data + h->h_length * i,
			h->h_addr_list[i], h->h_length);
	}
	dns->data_len = new_len;

	/*
	 * Set the timeout for an hour from now.
	 * XXX: This should really use the time on the DNS reply.
	 */
	dns->timeout = cur_time + 3600;

	do_data_copy(bufix, bufp, bufcount, dns->data, dns->data_len);
	return (dns->timeout);
}

static void
do_data_copy(int *bufix, unsigned char **bufp, int *bufcount,
    unsigned char *data, int len)
{
	int space = *bufcount - *bufix;

	/* If there's more space than we need, use only what we need. */
	if (space > len)
		space = len;

	/*
	 * Copy as much data as will fit, then increment the buffer
	 * index by the amount we actually had to copy, which could be
	 * more.
	 */
	if (space > 0)
		memcpy(*bufp + *bufix, data, space);
	*bufix += len;
@


1.11
log
@remove things not used, spotted by lint mostly; ok henning
@
text
@d1 1
a1 1
/*	$OpenBSD: tree.c,v 1.10 2004/04/14 20:22:27 henning Exp $	*/
d154 1
a154 1
		warn("Bad node id in tree: %d.", tree->op);
d180 1
a180 1
			warn("%s: host unknown.", dns->hostname);
d183 1
a183 1
			warn("%s: temporary name server failure",
d187 1
a187 1
			warn("%s: name server failed", dns->hostname);
d190 1
a190 1
			warn("%s: no A record associated with address",
@


1.10
log
@get rif of the few dmalloc/dfree occurances that were left
@
text
@d1 1
a1 1
/*	$OpenBSD: tree.c,v 1.9 2004/02/24 17:02:40 henning Exp $	*/
a62 13
}

struct dns_host_entry *
enter_dns_host(char *name)
{
	struct dns_host_entry *dh;
	int len = strlen(name) + 1;

	if (!(dh = calloc(1, sizeof(struct dns_host_entry)))
	    || !(dh->hostname = calloc(1, len)))
		error("Can't allocate space for new host.");
	strlcpy(dh->hostname, name, len);
	return (dh);
@


1.9
log
@zap more unused crap
@
text
@d1 1
a1 1
/*	$OpenBSD: tree.c,v 1.8 2004/02/24 13:08:26 henning Exp $	*/
d57 1
a57 1
	pair foo = dmalloc(sizeof(*foo), "cons");
d71 2
a72 2
	if (!(dh = dmalloc(sizeof(struct dns_host_entry), "enter_dns_host"))
	    || !(dh->hostname = dmalloc(len, "enter_dns_host")))
a74 4
	dh->data = NULL;
	dh->data_len = 0;
	dh->buf_len = 0;
	dh->timeout = 0;
d106 1
a106 1
	if (!(bp = dmalloc(bufix, "tree_evaluate")))
d124 1
a124 2
	if (tree_cache->value)
		dfree(tree_cache->value, "tree_evaluate");
d217 1
a217 1
		unsigned char *buf = dmalloc(new_len, "do_host_lookup");
d227 1
a227 1
				dfree(dns->data, "do_host_lookup");
@


1.8
log
@cut more crap - no binary change
@
text
@d1 1
a1 1
/*	$OpenBSD: tree.c,v 1.7 2004/02/24 00:34:40 henning Exp $	*/
d47 6
a52 6
static time_t tree_evaluate_recurse(
    int *, unsigned char **, int *, struct tree *);
static time_t do_host_lookup(
    int *, unsigned char **, int *, struct dns_host_entry *);
static void do_data_copy(
    int *, unsigned char **, int *, unsigned char *, int);
a64 27
struct tree_cache *
tree_cache(struct tree *tree)
{
	struct tree_cache *tc;

	tc = new_tree_cache("tree_cache");
	if (!tc)
		return (NULL);
	tc->value = NULL;
	tc->len = tc->buf_size = 0;
	tc->timeout = 0;
	tc->tree = tree;
	return (tc);
}

struct tree *
tree_host_lookup(char *name)
{
	struct tree *nt;
	nt = new_tree("tree_host_lookup");
	if (!nt)
		error("No memory for host lookup tree node.");
	nt->op = TREE_HOST_LOOKUP;
	nt->data.host_lookup.host = enter_dns_host(name);
	return (nt);
}

a79 78
}

struct tree *
tree_const(unsigned char *data, int len)
{
	struct tree *nt;
	if (!(nt = new_tree("tree_const"))
	    || !(nt->data.const_val.data = dmalloc(len, "tree_const")))
		error("No memory for constant data tree node.");
	nt->op = TREE_CONST;
	memcpy(nt->data.const_val.data, data, len);
	nt->data.const_val.len = len;
	return (nt);
}

struct tree *
tree_concat(struct tree *left, struct tree *right)
{
	struct tree *nt;

	/*
	 * If we're concatenating a null tree to a non-null tree, just
	 * return the non-null tree; if both trees are null, return a
	 * null tree.
	 */
	if (!left)
		return (right);
	if (!right)
		return (left);

	/* If both trees are constant, combine them. */
	if (left->op == TREE_CONST && right->op == TREE_CONST) {
		unsigned char *buf = dmalloc(left->data.const_val.len +
		    right->data.const_val.len, "tree_concat");
		if (!buf)
			error("No memory to concatenate constants.");
		memcpy(buf, left->data.const_val.data,
			left->data.const_val.len);
		memcpy(buf + left->data.const_val.len,
			right->data.const_val.data,
			right->data.const_val.len);
		dfree(left->data.const_val.data, "tree_concat");
		dfree(right->data.const_val.data, "tree_concat");
		left->data.const_val.data = buf;
		left->data.const_val.len += right->data.const_val.len;
		free_tree(right, "tree_concat");
		return (left);
	}

	/* Otherwise, allocate a new node to concatenate the two. */
	if (!(nt = new_tree("tree_concat")))
		error("No memory for data tree concatenation node.");
	nt->op = TREE_CONCAT;
	nt->data.concat.left = left;
	nt->data.concat.right = right;
	return (nt);
}

struct tree *
tree_limit(struct tree *tree, int limit)
{
	struct tree *rv;

	/* If the tree we're limiting is constant, limit it now. */
	if (tree->op == TREE_CONST) {
		if (tree->data.const_val.len > limit)
			tree->data.const_val.len = limit;
		return (tree);
	}

	/* Otherwise, put in a node which enforces the limit on evaluation. */
	rv = new_tree("tree_limit");
	if (!rv)
		return (NULL);
	rv->op = TREE_LIMIT;
	rv->data.limit.tree = tree;
	rv->data.limit.limit = limit;
	return (rv);
@


1.7
log
@cut debug crap
@
text
@d1 1
a1 1
/*	$OpenBSD: tree.c,v 1.6 2004/02/23 20:09:02 deraadt Exp $	*/
d44 2
@


1.6
log
@remove time_t related crud; henning ok
@
text
@d1 1
a1 1
/*	$OpenBSD: tree.c,v 1.5 2004/02/07 13:59:45 henning Exp $	*/
a288 5
#ifdef DEBUG_EVAL
	debug("time: now = %d  dns = %d %d  diff = %d",
	    cur_time, dns->timeout, cur_time - dns->timeout);
#endif

a290 5
#ifdef DEBUG_EVAL
		debug("easy copy: %x %d %x",
		    dns->data, dns->data_len,
		    dns->data ? *(int *)(dns->data) : 0);
#endif
a294 3
#ifdef DEBUG_EVAL
	debug("Looking up %s", dns->hostname);
#endif
a317 4
#ifdef DEBUG_EVAL
	debug("Lookup succeeded; first address is %x", h->h_addr_list[0]);
#endif

a348 4
#ifdef DEBUG_EVAL
	debug("dns -> data: %x  h -> h_addr_list [0]: %x",
	    *(int *)(dns->data), h->h_addr_list[0]);
#endif
a356 4
#ifdef DEBUG_EVAL
	debug("hard copy: %x %d %x",
	    dns->data, dns->data_len, *(int *)(dns->data));
#endif
@


1.5
log
@KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: tree.c,v 1.4 2004/02/07 13:26:35 henning Exp $	*/
d45 1
a45 1
static TIME tree_evaluate_recurse(
d47 1
a47 1
static TIME do_host_lookup(
d239 1
a239 1
static TIME
d244 1
a244 1
	TIME t1, t2;
d281 1
a281 1
static TIME
@


1.4
log
@more KNF From: Emil Mikulic <emikulic@@dmr.ath.cx>
great job.
no binary change.
@
text
@d1 1
a1 1
/*	$OpenBSD: tree.c,v 1.3 2004/02/04 12:16:56 henning Exp $	*/
d298 2
a299 2
		       dns->data, dns->data_len,
		       dns->data ? *(int *)(dns->data) : 0);
d312 1
a312 1
		switch(h_errno) {
@


1.3
log
@$OpenBSD$, tedu
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d3 1
a3 1
/*   Routines for manipulating parse trees... */
d45 9
a53 9
static TIME tree_evaluate_recurse (int *, unsigned char **, int *, struct tree *);
static TIME do_host_lookup (int *, unsigned char **, int *,
					  struct dns_host_entry *);
static void do_data_copy (int *, unsigned char **, int *,
				 unsigned char *, int);

pair cons (car, cdr)
	caddr_t car;
	pair cdr;
d55 1
a55 1
	pair foo = (pair)dmalloc (sizeof *foo, "cons");
d57 4
a60 4
		error ("no memory for cons.");
	foo -> car = car;
	foo -> cdr = cdr;
	return foo;
d63 2
a64 2
struct tree_cache *tree_cache (tree)
	struct tree *tree;
d68 1
a68 1
	tc = new_tree_cache ("tree_cache");
d70 6
a75 6
		return 0;
	tc -> value = (unsigned char *)0;
	tc -> len = tc -> buf_size = 0;
	tc -> timeout = 0;
	tc -> tree = tree;
	return tc;
d78 2
a79 2
struct tree *tree_host_lookup (name)
	char *name;
d82 1
a82 1
	nt = new_tree ("tree_host_lookup");
d84 4
a87 4
		error ("No memory for host lookup tree node.");
	nt -> op = TREE_HOST_LOOKUP;
	nt -> data.host_lookup.host = enter_dns_host (name);
	return nt;
d90 2
a91 2
struct dns_host_entry *enter_dns_host (name)
	char *name;
d94 1
a94 1
	int len = strlen (name) + 1;
d96 9
a104 10
	if (!(dh = (struct dns_host_entry *)dmalloc
	      (sizeof (struct dns_host_entry), "enter_dns_host"))
	    || !(dh -> hostname = dmalloc (len, "enter_dns_host")))
		error ("Can't allocate space for new host.");
	strlcpy (dh -> hostname, name, len);
	dh -> data = (unsigned char *)0;
	dh -> data_len = 0;
	dh -> buf_len = 0;
	dh -> timeout = 0;
	return dh;
d107 2
a108 3
struct tree *tree_const (data, len)
	unsigned char *data;
	int len;
d111 7
a117 8
	if (!(nt = new_tree ("tree_const"))
	    || !(nt -> data.const_val.data =
		 (unsigned char *)dmalloc (len, "tree_const")))
		error ("No memory for constant data tree node.");
	nt -> op = TREE_CONST;
	memcpy (nt -> data.const_val.data, data, len);
	nt -> data.const_val.len = len;
	return nt;
d120 2
a121 2
struct tree *tree_concat (left, right)
	struct tree *left, *right;
d125 5
a129 3
	/* If we're concatenating a null tree to a non-null tree, just
	   return the non-null tree; if both trees are null, return
	   a null tree. */
d131 1
a131 1
		return right;
d133 1
a133 1
		return left;
d136 3
a138 4
	if (left -> op == TREE_CONST && right -> op == TREE_CONST) {
		unsigned char *buf = dmalloc (left -> data.const_val.len
					      + right -> data.const_val.len,
					      "tree_concat");
d140 12
a151 12
			error ("No memory to concatenate constants.");
		memcpy (buf, left -> data.const_val.data,
			left -> data.const_val.len);
		memcpy (buf + left -> data.const_val.len,
			right -> data.const_val.data,
			right -> data.const_val.len);
		dfree (left -> data.const_val.data, "tree_concat");
		dfree (right -> data.const_val.data, "tree_concat");
		left -> data.const_val.data = buf;
		left -> data.const_val.len += right -> data.const_val.len;
		free_tree (right, "tree_concat");
		return left;
d153 1
a153 1
			
d155 6
a160 6
	if (!(nt = new_tree ("tree_concat")))
		error ("No memory for data tree concatenation node.");
	nt -> op = TREE_CONCAT;
	nt -> data.concat.left = left;
	nt -> data.concat.right = right;
	return nt;
d163 2
a164 3
struct tree *tree_limit (tree, limit)
	struct tree *tree;
	int limit;
d169 4
a172 4
	if (tree -> op == TREE_CONST) {
		if (tree -> data.const_val.len > limit)
			tree -> data.const_val.len = limit;
		return tree;
d176 1
a176 1
	rv = new_tree ("tree_limit");
d178 5
a182 5
		return (struct tree *)0;
	rv -> op = TREE_LIMIT;
	rv -> data.limit.tree = tree;
	rv -> data.limit.limit = limit;
	return rv;
d185 2
a186 2
int tree_evaluate (tree_cache)
	struct tree_cache *tree_cache;
d188 2
a189 2
	unsigned char *bp = tree_cache -> value;
	int bc = tree_cache -> buf_size;
d192 6
a197 4
	/* If there's no tree associated with this cache, it evaluates
	   to a constant and that was detected at startup. */
	if (!tree_cache -> tree)
		return 1;
d200 2
a201 2
	tree_cache -> timeout = tree_evaluate_recurse (&bufix, &bp, &bc,
						       tree_cache -> tree);
d205 2
a206 2
		tree_cache -> len = bufix;
		return 1;
d209 6
a214 4
	/* If we can't allocate more memory, return with what we
	   have (maybe nothing). */
	if (!(bp = (unsigned char *)dmalloc (bufix, "tree_evaluate")))
		return 0;
d220 17
a236 13
	/* Note that the size of the result shouldn't change on the
	   second call to tree_evaluate_recurse, since we haven't
	   changed the ``current'' time. */
	tree_evaluate_recurse (&bufix, &bp, &bc, tree_cache -> tree);

	/* Free the old buffer if needed, then store the new buffer
	   location and size and return. */
	if (tree_cache -> value)
		dfree (tree_cache -> value, "tree_evaluate");
	tree_cache -> value = bp;
	tree_cache -> len = bufix;
	tree_cache -> buf_size = bc;
	return 1;
d239 3
a241 5
static TIME tree_evaluate_recurse (bufix, bufp, bufcount, tree)
	int *bufix;
	unsigned char **bufp;
	int *bufcount;
	struct tree *tree;
d246 6
a251 6
	switch (tree -> op) {
	      case TREE_CONCAT:
		t1 = tree_evaluate_recurse (bufix, bufp, bufcount,
					   tree -> data.concat.left);
		t2 = tree_evaluate_recurse (bufix, bufp, bufcount,
					   tree -> data.concat.right);
d253 2
a254 2
			return t2;
		return t1;
d256 8
a263 8
	      case TREE_HOST_LOOKUP:
		return do_host_lookup (bufix, bufp, bufcount,
				       tree -> data.host_lookup.host);

	      case TREE_CONST:
		do_data_copy (bufix, bufp, bufcount,
			      tree -> data.const_val.data,
			      tree -> data.const_val.len);
d265 1
a265 1
		return t1;
d267 4
a270 4
	      case TREE_LIMIT:
		limit = *bufix + tree -> data.limit.limit;
		t1 = tree_evaluate_recurse (bufix, bufp, bufcount,
					    tree -> data.limit.tree);
d272 1
a272 1
		return t1;
d274 2
a275 2
	      default:
		warn ("Bad node id in tree: %d.", tree -> op);
d277 1
a277 1
		return t1;
d281 3
a283 5
static TIME do_host_lookup (bufix, bufp, bufcount, dns)
	int *bufix;
	unsigned char **bufp;
	int *bufcount;
	struct dns_host_entry *dns;
d290 2
a291 2
	debug ("time: now = %d  dns = %d %d  diff = %d",
	       cur_time, dns -> timeout, cur_time - dns -> timeout);
d295 1
a295 1
	if (cur_time <= dns -> timeout) {
d297 3
a299 3
		debug ("easy copy: %x %d %x",
		       dns -> data, dns -> data_len,
		       dns -> data ? *(int *)(dns -> data) : 0);
d301 3
a303 3
		do_data_copy (bufix, bufp, bufcount,
			      dns -> data, dns -> data_len);
		return dns -> timeout;
d306 1
a306 1
	debug ("Looking up %s", dns -> hostname);
d310 1
a310 1
	h = gethostbyname (dns -> hostname);
d312 3
a314 3
		switch (h_errno) {
		      case HOST_NOT_FOUND:
			warn ("%s: host unknown.", dns -> hostname);
d316 3
a318 3
		      case TRY_AGAIN:
			warn ("%s: temporary name server failure",
			      dns -> hostname);
d320 2
a321 2
		      case NO_RECOVERY:
			warn ("%s: name server failed", dns -> hostname);
d323 3
a325 3
		      case NO_DATA:
			warn ("%s: no A record associated with address",
			      dns -> hostname);
d328 1
a328 1
		return cur_time + 60;
d332 1
a332 2
	debug ("Lookup succeeded; first address is %x",
	       h -> h_addr_list [0]);
d336 1
a336 1
	for (i = 0; h -> h_addr_list [i]; i++)
d338 1
a338 1
	
d340 3
a342 4
	new_len = i * h -> h_length;
	if (dns -> buf_len < i) {
		unsigned char *buf =
			(unsigned char *)dmalloc (new_len, "do_host_lookup");
d345 4
a348 4
			new_len = dns -> buf_len;
			if (!dns -> buf_len) {
				dns -> timeout = cur_time + 60;
				return dns -> timeout;
d351 4
a354 4
			if (dns -> data)
				dfree (dns -> data, "do_host_lookup");
			dns -> data = buf;
			dns -> buf_len = new_len;
d358 7
a364 5
	/* Addresses are conveniently stored one to the buffer, so we
	   have to copy them out one at a time... :'( */
	for (i = 0; i < new_len / h -> h_length; i++) {
		memcpy (dns -> data + h -> h_length * i,
			h -> h_addr_list [i], h -> h_length);
d367 2
a368 2
	debug ("dns -> data: %x  h -> h_addr_list [0]: %x",
	       *(int *)(dns -> data), h -> h_addr_list [0]);
d370 1
a370 1
	dns -> data_len = new_len;
d372 5
a376 3
	/* Set the timeout for an hour from now.
	   XXX This should really use the time on the DNS reply. */
	dns -> timeout = cur_time + 3600;
d379 2
a380 2
	debug ("hard copy: %x %d %x",
	       dns -> data, dns -> data_len, *(int *)(dns -> data));
d382 2
a383 2
	do_data_copy (bufix, bufp, bufcount, dns -> data, dns -> data_len);
	return dns -> timeout;
d386 3
a388 6
static void do_data_copy (bufix, bufp, bufcount, data, len)
	int *bufix;
	unsigned char **bufp;
	int *bufcount;
	unsigned char *data;
	int len;
d396 5
a400 2
	/* Copy as much data as will fit, then increment the buffer index
	   by the amount we actually had to copy, which could be more. */
d402 1
a402 1
		memcpy (*bufp + *bufix, data, space);
@


1.2
log
@8579 lines of KNF, ANSO and zap-junk diff without the resulting binary
changing by a single byte.
partly from theo
@
text
@d1 1
a1 1
/* tree.c
d3 1
a3 1
   Routines for manipulating parse trees... */
@


1.1
log
@this is where dhclient will start surgery
@
text
@d45 5
a49 6
static TIME tree_evaluate_recurse PROTO ((int *, unsigned char **, int *,
					  struct tree *));
static TIME do_host_lookup PROTO ((int *, unsigned char **, int *,
					  struct dns_host_entry *));
static void do_data_copy PROTO ((int *, unsigned char **, int *,
				 unsigned char *, int));
@

