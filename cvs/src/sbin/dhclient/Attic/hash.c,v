head	1.10;
access;
symbols
	OPENBSD_3_7:1.9.0.4
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.2
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.5.0.2
	OPENBSD_3_5_BASE:1.5;
locks; strict;
comment	@ * @;


1.10
date	2005.07.11.19.22.07;	author deraadt;	state dead;
branches;
next	1.9;

1.9
date	2004.05.10.15.30.47;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2004.05.04.22.23.01;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	2004.05.04.20.28.40;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2004.05.04.18.58.50;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2004.02.07.13.59.45;	author henning;	state Exp;
branches;
next	1.4;

1.4
date	2004.02.07.13.26.35;	author henning;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.04.12.16.56;	author henning;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.04.01.18.26;	author henning;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.18.01.26.20;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.10
log
@krw stopped use of hash.c
@
text
@/*	$OpenBSD: hash.c,v 1.9 2004/05/10 15:30:47 deraadt Exp $	*/

/* Routines for manipulating hash tables... */

/*
 * Copyright (c) 1995, 1996, 1997, 1998 The Internet Software Consortium.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of The Internet Software Consortium nor the names
 *    of its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INTERNET SOFTWARE CONSORTIUM AND
 * CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE INTERNET SOFTWARE CONSORTIUM OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * This software has been written for the Internet Software Consortium
 * by Ted Lemon <mellon@@fugue.com> in cooperation with Vixie
 * Enterprises.  To learn more about the Internet Software Consortium,
 * see ``http://www.vix.com/isc''.  To learn more about Vixie
 * Enterprises, see ``http://www.vix.com''.
 */

#include "dhcpd.h"

static int do_hash(unsigned char *, int, int);

struct hash_table *
new_hash(void)
{
	struct hash_table *rv = new_hash_table(DEFAULT_HASH_SIZE);

	if (!rv)
		return (rv);
	memset(&rv->buckets[0], 0,
	    DEFAULT_HASH_SIZE * sizeof(struct hash_bucket *));
	return (rv);
}

static int
do_hash(unsigned char *name, int len, int size)
{
	unsigned char *s = name;
	int accum = 0, i = len;

	while (i--) {
		/* Add the character in... */
		accum += *s++;
		/* Add carry back in... */
		while (accum > 255)
			accum = (accum & 255) + (accum >> 8);
	}
	return (accum % size);
}

void add_hash(struct hash_table *table, unsigned char *name, int len,
    unsigned char *pointer)
{
	struct hash_bucket *bp;
	int hashno;

	if (!table)
		return;
	if (!len)
		len = strlen((char *)name);

	hashno = do_hash(name, len, table->hash_count);
	bp = new_hash_bucket();

	if (!bp) {
		warning("Can't add %s to hash table.", name);
		return;
	}
	bp->name = name;
	bp->value = pointer;
	bp->next = table->buckets[hashno];
	bp->len = len;
	table->buckets[hashno] = bp;
}

unsigned char *
hash_lookup(struct hash_table *table, unsigned char *name, int len)
{
	struct hash_bucket *bp;
	int hashno;

	if (!table)
		return (NULL);

	if (!len)
		len = strlen((char *)name);

	hashno = do_hash(name, len, table->hash_count);

	for (bp = table->buckets[hashno]; bp; bp = bp->next)
		if (len == bp->len && !memcmp(bp->name, name, len))
			return (bp->value);

	return (NULL);
}
@


1.9
log
@knf
@
text
@d1 1
a1 1
/*	$OpenBSD: hash.c,v 1.8 2004/05/04 22:23:01 mickey Exp $	*/
@


1.8
log
@do not overload libc function names causing linker troubles
@
text
@d1 1
a1 1
/*	$OpenBSD: hash.c,v 1.7 2004/05/04 20:28:40 deraadt Exp $	*/
d51 1
a61 1
	int accum = 0;
d63 1
a63 1
	int i = len;
d78 1
a79 1
	struct hash_bucket *bp;
d103 1
a104 1
	struct hash_bucket *bp;
@


1.7
log
@remove things not used, spotted by lint mostly; ok henning
@
text
@d1 1
a1 1
/*	$OpenBSD: hash.c,v 1.6 2004/05/04 18:58:50 deraadt Exp $	*/
d90 1
a90 1
		warn("Can't add %s to hash table.", name);
@


1.6
log
@more shrink and lint fixes; henning ok
@
text
@d1 1
a1 1
/*	$OpenBSD: hash.c,v 1.5 2004/02/07 13:59:45 henning Exp $	*/
a97 32
}

void
delete_hash_entry(struct hash_table *table, unsigned char *name, int len)
{
	int hashno;
	struct hash_bucket *bp, *pbp = NULL;

	if (!table)
		return;
	if (!len)
		len = strlen((char *)name);

	hashno = do_hash(name, len, table->hash_count);

	/*
	 * Go through the list looking for an entry that matches; if we
	 * find it, delete it.
	 */
	for (bp = table->buckets[hashno]; bp; bp = bp->next) {
		if ((!bp->len &&
		    !strcmp((char *)bp->name, (char *)name)) ||
		    (bp->len == len && !memcmp(bp->name, name, len))) {
			if (pbp)
				pbp->next = bp->next;
			else
				table->buckets[hashno] = bp->next;
			free_hash_bucket(bp);
			break;
		}
		pbp = bp;	/* jwg, 9/6/96 - nice catch! */
	}
@


1.5
log
@KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: hash.c,v 1.4 2004/02/07 13:26:35 henning Exp $	*/
d50 1
a50 1
	struct hash_table *rv = new_hash_table(DEFAULT_HASH_SIZE, "new_hash");
d87 1
a87 1
	bp = new_hash_bucket("add_hash");
d125 1
a125 1
			free_hash_bucket(bp, "delete_hash_entry");
@


1.4
log
@more KNF From: Emil Mikulic <emikulic@@dmr.ath.cx>
great job.
no binary change.
@
text
@d1 1
a1 1
/*	$OpenBSD: hash.c,v 1.3 2004/02/04 12:16:56 henning Exp $	*/
d133 1
a133 1
hash_lookup (struct hash_table *table, unsigned char *name, int len)
@


1.3
log
@$OpenBSD$, tedu
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d52 2
a53 2
		return rv;
	memset(&rv->buckets [0], 0,
d55 1
a55 1
	return rv;
d84 1
a84 1
		len = strlen ((char *)name);
d95 1
a95 1
	bp->next = table->buckets [hashno];
d104 1
a104 1
	struct hash_bucket *bp, *pbp = (struct hash_bucket *)0;
d109 1
a109 1
		len = strlen ((char *)name);
d113 5
a117 3
	/* Go through the list looking for an entry that matches;
	   if we find it, delete it. */
	for (bp = table->buckets [hashno]; bp; bp = bp->next) {
d119 2
a120 2
		    !strcmp ((char *)bp->name, (char *)name)) ||
		    (bp->len == len && !memcmp (bp->name, name, len))) {
d124 1
a124 1
				table->buckets [hashno] = bp->next;
d139 1
a139 1
		return (unsigned char *)0;
d142 1
a142 1
		len = strlen ((char *)name);
d146 3
a148 3
	for (bp = table->buckets [hashno]; bp; bp = bp->next)
		if (len == bp->len && !memcmp (bp->name, name, len))
			return bp->value;
@


1.2
log
@8579 lines of KNF, ANSO and zap-junk diff without the resulting binary
changing by a single byte.
partly from theo
@
text
@d1 1
a1 1
/* hash.c
d3 1
a3 1
   Routines for manipulating hash tables... */
@


1.1
log
@this is where dhclient will start surgery
@
text
@d45 1
a45 1
static int do_hash PROTO ((unsigned char *, int, int));
d47 2
a48 1
struct hash_table *new_hash ()
d50 1
a50 1
	struct hash_table *rv = new_hash_table (DEFAULT_HASH_SIZE, "new_hash");
d53 2
a54 2
	memset (&rv -> buckets [0], 0,
		DEFAULT_HASH_SIZE * sizeof (struct hash_bucket *));
d58 2
a59 4
static int do_hash (name, len, size)
	unsigned char *name;
	int len;
	int size;
d61 2
a62 2
	register int accum = 0;
	register unsigned char *s = name;
d64 1
d69 1
a69 1
		while (accum > 255) {
a70 1
		}
d72 1
a72 1
	return accum % size;
d75 2
a76 5
void add_hash (table, name, len, pointer)
	struct hash_table *table;
	int len;
	unsigned char *name;
	unsigned char *pointer;
d86 2
a87 2
	hashno = do_hash (name, len, table -> hash_count);
	bp = new_hash_bucket ("add_hash");
d90 1
a90 1
		warn ("Can't add %s to hash table.", name);
d93 5
a97 5
	bp -> name = name;
	bp -> value = pointer;
	bp -> next = table -> buckets [hashno];
	bp -> len = len;
	table -> buckets [hashno] = bp;
d100 2
a101 4
void delete_hash_entry (table, name, len)
	struct hash_table *table;
	int len;
	unsigned char *name;
d111 1
a111 1
	hashno = do_hash (name, len, table -> hash_count);
d115 9
a123 11
	for (bp = table -> buckets [hashno]; bp; bp = bp -> next) {
		if ((!bp -> len &&
		     !strcmp ((char *)bp -> name, (char *)name)) ||
		    (bp -> len == len &&
		     !memcmp (bp -> name, name, len))) {
			if (pbp) {
				pbp -> next = bp -> next;
			} else {
				table -> buckets [hashno] = bp -> next;
			}
			free_hash_bucket (bp, "delete_hash_entry");
d130 2
a131 4
unsigned char *hash_lookup (table, name, len)
	struct hash_table *table;
	unsigned char *name;
	int len;
d142 1
a142 1
	hashno = do_hash (name, len, table -> hash_count);
d144 5
a148 5
	for (bp = table -> buckets [hashno]; bp; bp = bp -> next) {
		if (len == bp -> len && !memcmp (bp -> name, name, len))
			return bp -> value;
	}
	return (unsigned char *)0;
@

