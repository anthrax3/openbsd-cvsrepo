head	1.11;
access;
symbols
	OPENBSD_5_6:1.7.0.6
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.4
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.5.0.40
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.36
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.38
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.34
	OPENBSD_5_0:1.5.0.32
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.30
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.28
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.24
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.26
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.22
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.20
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.18
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.16
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.14
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.12
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.10
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.8
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.6
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.4
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.2
	OPENBSD_3_5_BASE:1.5;
locks; strict;
comment	@ * @;


1.11
date	2014.11.01.16.56.47;	author krw;	state dead;
branches;
next	1.10;
commitid	XT4qSLaubbVajoXv;

1.10
date	2014.11.01.15.49.07;	author krw;	state Exp;
branches;
next	1.9;
commitid	w5Quqsm7xyo3zcuD;

1.9
date	2014.10.29.15.28.51;	author krw;	state Exp;
branches;
next	1.8;
commitid	JuTrpYbMuawgGoRl;

1.8
date	2014.10.27.17.01.28;	author krw;	state Exp;
branches;
next	1.7;
commitid	Yg7bk47z8kd8w06x;

1.7
date	2014.01.19.21.10.04;	author krw;	state Exp;
branches;
next	1.6;

1.6
date	2014.01.19.10.06.09;	author krw;	state Exp;
branches;
next	1.5;

1.5
date	2004.02.07.11.35.59;	author henning;	state Exp;
branches;
next	1.4;

1.4
date	2004.02.04.12.16.56;	author henning;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.04.01.50.22;	author henning;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.04.01.18.26;	author henning;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.18.01.26.20;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.11
log
@And finally move convert.c to the attic.
@
text
@/*	$OpenBSD: convert.c,v 1.10 2014/11/01 15:49:07 krw Exp $	*/

/*
 * Safe copying of option values into and out of the option buffer,
 * which can't be assumed to be aligned.
 */

/*
 * Copyright (c) 1995, 1996 The Internet Software Consortium.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of The Internet Software Consortium nor the names
 *    of its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INTERNET SOFTWARE CONSORTIUM AND
 * CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE INTERNET SOFTWARE CONSORTIUM OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * This software has been written for the Internet Software Consortium
 * by Ted Lemon <mellon@@fugue.com> in cooperation with Vixie
 * Enterprises.  To learn more about the Internet Software Consortium,
 * see ``http://www.vix.com/isc''.  To learn more about Vixie
 * Enterprises, see ``http://www.vix.com''.
 */
@


1.10
log
@Try to ensure that the various lease timeouts are sane. i.e., renew
is before rebind is before expiry. Don't allow lease expiry to be
set past the end of time, but do allow lease lengths >INT32_MAX.

Tweak default times to be more reliably in-line with RFCs.

Nuke getULong(), the last function in convert.c, since its last
uses were in this now re-written code.

Suspicions aroused while diagnosing the expiry problem weerd@@ found.
@
text
@d1 1
a1 1
/*	$OpenBSD: convert.c,v 1.9 2014/10/29 15:28:51 krw Exp $	*/
@


1.9
log
@Calling a function to htonl() a constant 32-bit value into a stack
variable and memcpy() that value into 4 bytes of malloc()'d space
seems roundabout.

Just memcpy() a four byte constant string into the malloc()'d space
as required and kill putULong(). No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: convert.c,v 1.8 2014/10/27 17:01:28 krw Exp $	*/
a44 11

#include "dhcpd.h"

u_int32_t
getULong(unsigned char *buf)
{
	u_int32_t ibuf;

	memcpy(&ibuf, buf, sizeof(ibuf));
	return (ntohl(ibuf));
}
@


1.8
log
@Nuke getLong(), getShort(), getUShort(). Two line functions (memcpy();
ntoh[ls]()) obscure rather than simplify things. Especially when
they are used only once. Just use the expansion.
@
text
@d1 1
a1 1
/*	$OpenBSD: convert.c,v 1.7 2014/01/19 21:10:04 krw Exp $	*/
a54 8
}

void
putULong(unsigned char *obuf, u_int32_t val)
{
	u_int32_t tmp = htonl(val);

	memcpy(obuf, &tmp, sizeof(tmp));
@


1.7
log
@We don't have any (and I can't find elsewhere) signed 16 bit or
signed 8 bit dhcp option types. So nuke getShort() and all 's' and
'b' format support. While here use '%u'/'%lu' and not
'%d'/'%ld' to snprintf() unsigned values.
@
text
@d1 1
a1 1
/*	$OpenBSD: convert.c,v 1.6 2014/01/19 10:06:09 krw Exp $	*/
a54 18
}

int32_t
getLong(unsigned char *(buf))
{
	int32_t ibuf;

	memcpy(&ibuf, buf, sizeof(ibuf));
	return (ntohl(ibuf));
}

u_int16_t
getUShort(unsigned char *buf)
{
	u_int16_t ibuf;

	memcpy(&ibuf, buf, sizeof(ibuf));
	return (ntohs(ibuf));
@


1.6
log
@Nuke unused functions putLong(), putUShort(), putShort().
@
text
@d1 1
a1 1
/*	$OpenBSD: convert.c,v 1.5 2004/02/07 11:35:59 henning Exp $	*/
a69 9

	memcpy(&ibuf, buf, sizeof(ibuf));
	return (ntohs(ibuf));
}

int16_t
getShort(unsigned char *buf)
{
	int16_t ibuf;
@


1.5
log
@more style fixes from Emil Mikulic <emikulic@@dmr.ath.cx>
Thank you very much for this excellent work, it helps a lot.
binary unchanged.
I am still convinced dhclient can be made readable.
@
text
@d1 1
a1 1
/*	$OpenBSD: convert.c,v 1.4 2004/02/04 12:16:56 henning Exp $	*/
a87 24

	memcpy(obuf, &tmp, sizeof(tmp));
}

void
putLong(unsigned char *obuf, int32_t val)
{
	int32_t tmp = htonl(val);

	memcpy(obuf, &tmp, sizeof(tmp));
}

void
putUShort(unsigned char *obuf, unsigned int val)
{
	u_int16_t tmp = htons(val);

	memcpy(obuf, &tmp, sizeof(tmp));
}

void
putShort(unsigned char *obuf, int val)
{
	int16_t tmp = htons(val);
@


1.4
log
@$OpenBSD$, tedu
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d3 4
a6 2
/* Safe copying of option values into and out of the option buffer, which
   can't be assumed to be aligned. */
d51 1
a51 1
	u_int32_t	ibuf;
d60 1
a60 1
	int32_t	ibuf;
d69 1
a69 1
	u_int16_t	ibuf;
d78 1
a78 1
	int16_t	ibuf;
a80 1

d87 1
a87 1
	u_int32_t	tmp = htonl(val);
d89 1
a89 1
	memcpy(obuf, &tmp, sizeof tmp);
d95 1
a95 1
	int32_t	tmp = htonl(val);
d103 1
a103 1
	u_int16_t	tmp = htons(val);
d111 1
a111 1
	int16_t	tmp = htons(val);
a114 1

@


1.3
log
@more KNF
@
text
@d1 1
a1 1
/* convert.c
d3 1
a3 1
   Safe copying of option values into and out of the option buffer, which
@


1.2
log
@8579 lines of KNF, ANSO and zap-junk diff without the resulting binary
changing by a single byte.
partly from theo
@
text
@d108 1
a108 1
putShort (unsigned char *obuf, int val)
@


1.1
log
@this is where dhclient will start surgery
@
text
@d46 2
a47 2
u_int32_t getULong (buf)
	unsigned char *buf;
d49 1
a49 1
	u_int32_t ibuf;
d51 2
a52 2
	memcpy (&ibuf, buf, sizeof (ibuf));
	return ntohl (ibuf);
d55 2
a56 2
int32_t getLong (buf)
	unsigned char *buf;
d58 1
a58 1
	int32_t ibuf;
d60 2
a61 2
	memcpy (&ibuf, buf, sizeof (ibuf));
	return ntohl (ibuf);
d64 2
a65 2
u_int16_t getUShort (buf)
	unsigned char *buf;
d67 1
a67 1
	u_int16_t ibuf;
d69 2
a70 2
	memcpy (&ibuf, buf, sizeof (ibuf));
	return ntohs (ibuf);
d73 2
a74 2
int16_t getShort (buf)
	unsigned char *buf;
d76 1
a76 1
	int16_t ibuf;
d78 3
a80 2
	memcpy (&ibuf, buf, sizeof (ibuf));
	return ntohs (ibuf);
d83 2
a84 3
void putULong (obuf, val)
	unsigned char *obuf;
	u_int32_t val;
d86 3
a88 2
	u_int32_t tmp = htonl (val);
	memcpy (obuf, &tmp, sizeof tmp);
d91 2
a92 3
void putLong (obuf, val)
	unsigned char *obuf;
	int32_t val;
d94 3
a96 2
	int32_t tmp = htonl (val);
	memcpy (obuf, &tmp, sizeof tmp);
d99 2
a100 3
void putUShort (obuf, val)
	unsigned char *obuf;
	unsigned int val;
d102 3
a104 2
	u_int16_t tmp = htons (val);
	memcpy (obuf, &tmp, sizeof tmp);
d107 2
a108 3
void putShort (obuf, val)
	unsigned char *obuf;
	int val;
d110 3
a112 2
	int16_t tmp = htons (val);
	memcpy (obuf, &tmp, sizeof tmp);
@

