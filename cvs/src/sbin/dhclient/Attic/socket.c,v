head	1.7;
access;
symbols;
locks; strict;
comment	@ * @;


1.7
date	2004.02.23.18.21.15;	author henning;	state dead;
branches;
next	1.6;

1.6
date	2004.02.07.17.59.22;	author henning;	state Exp;
branches;
next	1.5;

1.5
date	2004.02.07.13.59.45;	author henning;	state Exp;
branches;
next	1.4;

1.4
date	2004.02.07.13.26.35;	author henning;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.06.11.33.22;	author henning;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.04.12.16.56;	author henning;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.18.01.26.20;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.7
log
@dhclient always uses bpf on openbsd no matter what, it works, and we don't
need to fallback to their raw socket code
suddenly dhclient is so fast...
pb tested and sez ok
@
text
@/*	$OpenBSD: socket.c,v 1.6 2004/02/07 17:59:22 henning Exp $	*/

/* BSD socket interface code... */

/*
 * Copyright (c) 1995, 1996, 1997, 1998, 1999
 * The Internet Software Consortium.   All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of The Internet Software Consortium nor the names
 *    of its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INTERNET SOFTWARE CONSORTIUM AND
 * CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE INTERNET SOFTWARE CONSORTIUM OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * This software has been written for the Internet Software Consortium
 * by Ted Lemon <mellon@@fugue.com> in cooperation with Vixie
 * Enterprises.  To learn more about the Internet Software Consortium,
 * see ``http://www.vix.com/isc''.  To learn more about Vixie
 * Enterprises, see ``http://www.vix.com''.
 */

#include "dhcpd.h"

/*
 * Generic interface registration routine...
 */
int
if_register_socket(struct interface_info *info)
{
	struct sockaddr_in name;
	int sock;
	int flag;

	/* Set up the address we're going to bind to. */
	memset(&name, 0, sizeof(name));
	name.sin_family = AF_INET;
	name.sin_port = local_port;
	name.sin_addr.s_addr = INADDR_ANY;

	/* Make a socket... */
	if ((sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)) < 0)
		error("Can't create dhcp socket: %m");

	/* Set the REUSEADDR option so that we don't fail to start if
	   we're being restarted. */
	flag = 1;
	if (setsockopt(sock, SOL_SOCKET, SO_REUSEADDR,
	    (char *)&flag, sizeof(flag)) < 0)
		error("Can't set SO_REUSEADDR option on dhcp socket: %m");

	flag = 1;
	if (setsockopt(sock, SOL_SOCKET, SO_REUSEPORT,
	    (char *)&flag, sizeof(flag)) < 0)
		error("Can't set SO_REUSEPORT option on dhcp socket: %m");

	/* Set the BROADCAST option so that we can broadcast DHCP responses. */
	if (setsockopt(sock, SOL_SOCKET, SO_BROADCAST,
	    (char *)&flag, sizeof(flag)) < 0)
		error("Can't set SO_BROADCAST option on dhcp socket: %m");

	/* Bind the socket to this interface's IP address. */
	if (bind(sock, (struct sockaddr *)&name, sizeof(name)) < 0)
		error("Can't bind to dhcp address: %m");

	flag = IPSEC_LEVEL_BYPASS;
	if (setsockopt(sock, IPPROTO_IP, IP_AUTH_LEVEL,
	    (char *)&flag, sizeof(flag)) == -1)
		if (errno != EOPNOTSUPP)
			error("Can't bypass auth IPsec on dhcp socket: %m");
	if (setsockopt(sock, IPPROTO_IP, IP_ESP_TRANS_LEVEL,
	    (char *)&flag, sizeof(flag)) == -1)
		if (errno != EOPNOTSUPP)
			error("Can't bypass ESP transport on dhcp socket: %m");
	if (setsockopt(sock, IPPROTO_IP, IP_ESP_NETWORK_LEVEL,
	    (char *)&flag, sizeof(flag)) == -1)
		if (errno != EOPNOTSUPP)
			error("Can't bypass ESP network on dhcp socket: %m");

	return (sock);
}

void
if_register_fallback(struct interface_info *info)
{
	info->wfdesc = if_register_socket(info);
}

ssize_t
send_fallback(struct interface_info *interface, struct packet *packet,
    struct dhcp_packet *raw, size_t len, struct in_addr from,
    struct sockaddr_in *to, struct hardware *hto)
{
	int result;

	result = sendto(interface->wfdesc, (char *)raw, len, 0,
	    (struct sockaddr *)to, sizeof(*to));

	if (result == -1) {
		warn("send_fallback: %m");
		if (errno == ENETUNREACH)
			warn("send_fallback: please consult README file %s",
			    "regarding broadcast address.");
	}
	return (result);
}

/*
 * This just reads in a packet and silently discards it.
 */
void
fallback_discard(struct protocol *protocol)
{
	char buf[1540];
	struct sockaddr_in from;
	socklen_t flen = sizeof(from);
	int status;
	struct interface_info *interface = protocol->local;

	status = recvfrom(interface->wfdesc, buf, sizeof(buf), 0,
	    (struct sockaddr *)&from, &flen);
	if (status == 0)
		warn("fallback_discard: %m");
}
@


1.6
log
@shut it up a bit more
@
text
@d1 1
a1 1
/*	$OpenBSD: socket.c,v 1.5 2004/02/07 13:59:45 henning Exp $	*/
@


1.5
log
@KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: socket.c,v 1.4 2004/02/07 13:26:35 henning Exp $	*/
a106 7

	if (!quiet_interface_discovery)
		note("Sending on   Socket/%s%s%s",
		    info->name,
		    (info->shared_network ? "/" : ""),
		    (info->shared_network ?
		    info->shared_network -> name : ""));
@


1.4
log
@more KNF From: Emil Mikulic <emikulic@@dmr.ath.cx>
great job.
no binary change.
@
text
@d1 1
a1 1
/*	$OpenBSD: socket.c,v 1.3 2004/02/06 11:33:22 henning Exp $	*/
d113 1
a113 1
		        info->shared_network -> name : ""));
@


1.3
log
@more Knall & Rauch -> ANSI C, KNF and stuff that makes this a bit more
readable. no effect on the binary.
From: Emil Mikulic <emikulic@@dmr.ath.cx>
@
text
@d1 1
a1 1
/*	$OpenBSD: socket.c,v 1.2 2004/02/04 12:16:56 henning Exp $	*/
d124 1
a124 1
	  (struct sockaddr *)to, sizeof(*to));
@


1.2
log
@$OpenBSD$, tedu
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d45 5
a49 3
/* Generic interface registration routine... */
int if_register_socket (info)
	struct interface_info *info;
d56 1
a56 1
	memset(&name, 0, sizeof name);
d62 2
a63 2
	if ((sock = socket (AF_INET, SOCK_DGRAM, IPPROTO_UDP)) < 0)
		error ("Can't create dhcp socket: %m");
d68 3
a70 3
	if (setsockopt (sock, SOL_SOCKET, SO_REUSEADDR,
			(char *)&flag, sizeof flag) < 0)
		error ("Can't set SO_REUSEADDR option on dhcp socket: %m");
d73 3
a75 3
	if (setsockopt (sock, SOL_SOCKET, SO_REUSEPORT,
			(char *)&flag, sizeof flag) < 0)
		error ("Can't set SO_REUSEPORT option on dhcp socket: %m");
d78 3
a80 3
	if (setsockopt (sock, SOL_SOCKET, SO_BROADCAST,
			(char *)&flag, sizeof flag) < 0)
		error ("Can't set SO_BROADCAST option on dhcp socket: %m");
d83 2
a84 2
	if (bind (sock, (struct sockaddr *)&name, sizeof name) < 0)
		error ("Can't bind to dhcp address: %m");
d87 2
a88 2
	if (setsockopt (sock, IPPROTO_IP, IP_AUTH_LEVEL,
			(char *)&flag, sizeof flag) == -1)
d90 3
a92 3
			error ("Can't bypass auth IPsec on dhcp socket: %m");
	if (setsockopt (sock, IPPROTO_IP, IP_ESP_TRANS_LEVEL,
			(char *)&flag, sizeof flag) == -1)
d94 3
a96 3
			error ("Can't bypass ESP transport on dhcp socket: %m");
	if (setsockopt (sock, IPPROTO_IP, IP_ESP_NETWORK_LEVEL,
			(char *)&flag, sizeof flag) == -1)
d98 1
a98 1
			error ("Can't bypass ESP network on dhcp socket: %m");
d100 1
a100 1
	return sock;
d103 2
a104 2
void if_register_fallback (info)
	struct interface_info *info;
d106 1
a106 2

	info -> wfdesc = if_register_socket (info);
d109 5
a113 5
		note ("Sending on   Socket/%s%s%s",
		      info -> name,
		      (info -> shared_network ? "/" : ""),
		      (info -> shared_network ?
		       info -> shared_network -> name : ""));
d116 4
a119 8
ssize_t send_fallback (interface, packet, raw, len, from, to, hto)
	struct interface_info *interface;
	struct packet *packet;
	struct dhcp_packet *raw;
	size_t len;
	struct in_addr from;
	struct sockaddr_in *to;
	struct hardware *hto;
d123 2
a124 2
	result = sendto (interface -> wfdesc, (char *)raw, len, 0,
	  (struct sockaddr *)to, sizeof *to);
d127 1
a127 1
		warn ("send_fallback: %m");
d129 2
a130 2
			warn ("send_fallback: please consult README file %s",
			  "regarding broadcast address.");
d132 1
a132 1
	return result;
d135 5
a139 4
/* This just reads in a packet and silently discards it. */

void fallback_discard (protocol)
	struct protocol *protocol;
d141 1
a141 1
	char buf [1540];
d143 1
a143 1
	socklen_t flen = sizeof from;
d145 1
a145 1
	struct interface_info *interface = protocol -> local;
d147 2
a148 2
	status = recvfrom (interface -> wfdesc, buf, sizeof buf, 0,
			   (struct sockaddr *)&from, &flen);
d150 1
a150 1
		warn ("fallback_discard: %m");
@


1.1
log
@this is where dhclient will start surgery
@
text
@d1 1
a1 1
/* socket.c
d3 1
a3 1
   BSD socket interface code... */
@

