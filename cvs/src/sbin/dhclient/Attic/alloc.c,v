head	1.11;
access;
symbols
	OPENBSD_3_7:1.9.0.4
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.2
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.5.0.2
	OPENBSD_3_5_BASE:1.5;
locks; strict;
comment	@ * @;


1.11
date	2005.07.16.18.42.16;	author krw;	state dead;
branches;
next	1.10;

1.10
date	2005.07.11.18.09.09;	author krw;	state Exp;
branches;
next	1.9;

1.9
date	2004.05.04.20.28.40;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2004.05.04.18.58.50;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2004.04.14.20.22.27;	author henning;	state Exp;
branches;
next	1.6;

1.6
date	2004.04.14.20.15.47;	author henning;	state Exp;
branches;
next	1.5;

1.5
date	2004.02.24.15.35.55;	author henning;	state Exp;
branches;
next	1.4;

1.4
date	2004.02.07.11.35.59;	author henning;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.04.12.16.56;	author henning;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.04.01.18.26;	author henning;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.18.01.26.20;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.11
log
@No longer used.
@
text
@/*	$OpenBSD: alloc.c,v 1.10 2005/07/11 18:09:09 krw Exp $	*/

/* Memory allocation... */

/*
 * Copyright (c) 1995, 1996, 1998 The Internet Software Consortium.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of The Internet Software Consortium nor the names
 *    of its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INTERNET SOFTWARE CONSORTIUM AND
 * CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE INTERNET SOFTWARE CONSORTIUM OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * This software has been written for the Internet Software Consortium
 * by Ted Lemon <mellon@@fugue.com> in cooperation with Vixie
 * Enterprises.  To learn more about the Internet Software Consortium,
 * see ``http://www.vix.com/isc''.  To learn more about Vixie
 * Enterprises, see ``http://www.vix.com''.
 */

#include "dhcpd.h"

struct string_list *
new_string_list(size_t size)
{
	struct string_list *rval;

	rval = calloc(1, sizeof(struct string_list) + size);
	if (rval != NULL)
		rval->string = ((char *)rval) + sizeof(struct string_list);
	return (rval);
}
@


1.10
log
@Expunge unused hashing code and variables.
@
text
@d1 1
a1 1
/*	$OpenBSD: alloc.c,v 1.9 2004/05/04 20:28:40 deraadt Exp $	*/
@


1.9
log
@remove things not used, spotted by lint mostly; ok henning
@
text
@d1 1
a1 1
/*	$OpenBSD: alloc.c,v 1.8 2004/05/04 18:58:50 deraadt Exp $	*/
a52 22
	return (rval);
}

struct hash_table *
new_hash_table(int count)
{
	struct hash_table *rval;

	rval = calloc(1, sizeof(struct hash_table) -
	    (DEFAULT_HASH_SIZE * sizeof(struct hash_bucket *)) +
	    (count * sizeof(struct hash_bucket *)));
	if (rval == NULL)
		return (NULL);
	rval->hash_count = count;
	return (rval);
}

struct hash_bucket *
new_hash_bucket(void)
{
	struct hash_bucket *rval = calloc(1, sizeof(struct hash_bucket));

@


1.8
log
@more shrink and lint fixes; henning ok
@
text
@d1 1
a1 1
/*	$OpenBSD: alloc.c,v 1.7 2004/04/14 20:22:27 henning Exp $	*/
a75 6
}

void
free_hash_bucket(struct hash_bucket *ptr)
{
	free(ptr);
@


1.7
log
@get rif of the few dmalloc/dfree occurances that were left
@
text
@d1 1
a1 1
/*	$OpenBSD: alloc.c,v 1.6 2004/04/14 20:15:47 henning Exp $	*/
d46 1
a46 1
new_string_list(size_t size, char * name)
d57 1
a57 1
new_hash_table(int count, char *name)
d71 1
a71 1
new_hash_bucket(char *name)
d79 1
a79 1
free_hash_bucket(struct hash_bucket *ptr, char *name)
@


1.6
log
@turns out more is obsolete now
inspired by diff from Emil Mikulic <emikulic@@dmr.ath.cx>
@
text
@d1 1
a1 1
/*	$OpenBSD: alloc.c,v 1.5 2004/02/24 15:35:55 henning Exp $	*/
a44 23
struct dhcp_packet *dhcp_free_list;
struct packet *packet_free_list;

void *
dmalloc(int size, char *name)
{
	void *foo = calloc(size, sizeof(char));

	if (!foo)
		warn("No memory for %s.", name);
	return (foo);
}

void
dfree(void *ptr, char *name)
{
	if (!ptr) {
		warn("dfree %s: free on null pointer.", name);
		return;
	}
	free(ptr);
}

d50 1
a50 1
	rval = dmalloc(sizeof(struct string_list) + size, name);
d61 1
a61 1
	rval = dmalloc(sizeof(struct hash_table) -
d63 1
a63 1
	    (count * sizeof(struct hash_bucket *)), name);
d73 1
a73 1
	struct hash_bucket *rval = dmalloc(sizeof(struct hash_bucket), name);
d81 1
a81 1
	dfree(ptr, name);
@


1.5
log
@get rid of tons of structs we never use, a lot of new_someotherjunk functions
in alloc.c we never call, and a shitload of genius comments like
char *script_name; /* name of script */
char *server_name; /* name of server */
etc etc etc...
@
text
@d1 1
a1 1
/*	$OpenBSD: alloc.c,v 1.4 2004/02/07 11:35:59 henning Exp $	*/
a67 8
struct tree *
new_tree(char *name)
{
	struct tree *rval = dmalloc(sizeof(struct tree), name);

	return (rval);
}

a78 18
struct tree_cache *free_tree_caches;

struct tree_cache *
new_tree_cache(char *name)
{
	struct tree_cache *rval;

	if (free_tree_caches) {
		rval = free_tree_caches;
		free_tree_caches = (struct tree_cache *)(rval->value);
	} else {
		rval = dmalloc(sizeof(struct tree_cache), name);
		if (!rval)
			error("unable to allocate tree cache for %s.", name);
	}
	return (rval);
}

a102 37
{
	dfree(ptr, name);
}

void
free_hash_table(struct hash_table *ptr, char *name)
{
	dfree(ptr, name);
}

void
free_tree_cache(struct tree_cache *ptr, char *name)
{
	ptr->value = (unsigned char *)free_tree_caches;
	free_tree_caches = ptr;
}

void
free_packet(struct packet *ptr, char *name)
{
	dfree(ptr, name);
}

void
free_dhcp_packet(struct dhcp_packet *ptr, char *name)
{
	dfree(ptr, name);
}

void
free_tree(struct tree *ptr, char *name)
{
	dfree(ptr, name);
}

void
free_string_list(struct string_list *ptr, char *name)
@


1.4
log
@more style fixes from Emil Mikulic <emikulic@@dmr.ath.cx>
Thank you very much for this excellent work, it helps a lot.
binary unchanged.
I am still convinced dhclient can be made readable.
@
text
@d1 1
a1 1
/*	$OpenBSD: alloc.c,v 1.3 2004/02/04 12:16:56 henning Exp $	*/
a67 18
struct packet *
new_packet(char *name)
{
	struct packet *rval;

	rval = dmalloc(sizeof(struct packet), name);
	return (rval);
}

struct dhcp_packet *
new_dhcp_packet(char *name)
{
	struct dhcp_packet *rval;

	rval = dmalloc(sizeof(struct dhcp_packet), name);
	return (rval);
}

a124 148
}

struct lease *
new_leases(int n, char *name)
{
	struct lease *rval = dmalloc(n * sizeof(struct lease), name);

	return (rval);
}

struct lease *
new_lease(char *name)
{
	struct lease *rval = dmalloc(sizeof(struct lease), name);

	return (rval);
}

struct subnet *
new_subnet(char *name)
{
	struct subnet *rval = dmalloc(sizeof(struct subnet), name);

	return (rval);
}

struct class *
new_class(char *name)
{
	struct class *rval = dmalloc(sizeof(struct class), name);

	return (rval);
}

struct shared_network *
new_shared_network(char *name)
{
	struct shared_network *rval =
	    dmalloc(sizeof(struct shared_network), name);

	return (rval);
}

struct group *
new_group(char *name)
{
	struct group *rval = dmalloc(sizeof(struct group), name);

	return (rval);
}

struct protocol *
new_protocol(char *name)
{
	struct protocol *rval = dmalloc(sizeof(struct protocol), name);

	return (rval);
}

struct lease_state *free_lease_states;

struct lease_state *
new_lease_state(char *name)
{
	struct lease_state *rval;

	if (free_lease_states) {
		rval = free_lease_states;
		free_lease_states =
		    (struct lease_state *)(free_lease_states->next);
	} else
		rval = dmalloc(sizeof(struct lease_state), name);
	return (rval);
}

struct domain_search_list *
new_domain_search_list(char *name)
{
	struct domain_search_list *rval =
	    dmalloc(sizeof(struct domain_search_list), name);

	return (rval);
}

struct name_server *
new_name_server(char *name)
{
	struct name_server *rval =
	    dmalloc(sizeof(struct name_server), name);

	return (rval);
}

void
free_name_server(struct name_server *ptr, char *name)
{
	dfree(ptr, name);
}

void
free_domain_search_list(struct domain_search_list *ptr, char *name)
{
	dfree(ptr, name);
}

void
free_lease_state(struct lease_state *ptr, char *name)
{
	if (ptr->prl)
		dfree(ptr->prl, name);
	ptr->next = free_lease_states;
	free_lease_states = ptr;
}

void
free_protocol(struct protocol *ptr, char *name)
{
	dfree(ptr, name);
}

void
free_group(struct group *ptr, char *name)
{
	dfree(ptr, name);
}

void
free_shared_network(struct shared_network *ptr, char *name)
{
	dfree(ptr, name);
}

void
free_class(struct class *ptr, char *name)
{
	dfree(ptr, name);
}

void
free_subnet(struct subnet *ptr, char *name)
{
	dfree(ptr, name);
}

void
free_lease(struct lease *ptr, char *name)
{
	dfree(ptr, name);
@


1.3
log
@$OpenBSD$, tedu
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d55 1
a55 1
	return foo;
d73 2
a74 2
	rval = (struct packet *)dmalloc(sizeof(struct packet), name);
	return rval;
d82 2
a83 3
	rval = (struct dhcp_packet *)dmalloc(sizeof(struct dhcp_packet),
	    name);
	return rval;
d91 1
a91 1
	return rval;
d102 1
a102 1
	return rval;
d120 1
a120 1
	return rval;
d128 1
a128 1
	rval = dmalloc(sizeof (struct hash_table) -
d132 1
a132 1
		return NULL;
d134 1
a134 1
	return rval;
d142 1
a142 1
	return rval;
d150 1
a150 1
	return rval;
d158 1
a158 1
	return rval;
d166 1
a166 1
	return rval;
d174 1
a174 1
	return rval;
d183 1
a183 1
	return rval;
d189 1
a189 2
	struct group *rval =
	    dmalloc(sizeof(struct group), name);
d191 1
a191 1
	return rval;
d199 1
a199 1
	return rval;
d214 2
a215 2
		rval = dmalloc(sizeof (struct lease_state), name);
	return rval;
d222 1
a222 1
	    dmalloc(sizeof (struct domain_search_list), name);
d224 1
a224 1
	return rval;
d231 1
a231 1
	    dmalloc(sizeof (struct name_server), name);
d233 1
a233 1
	return rval;
@


1.2
log
@8579 lines of KNF, ANSO and zap-junk diff without the resulting binary
changing by a single byte.
partly from theo
@
text
@d1 1
a1 1
/* alloc.c
d3 1
a3 1
   Memory allocation... */
@


1.1
log
@this is where dhclient will start surgery
@
text
@d48 2
a49 3
void * dmalloc(size, name)
	int size;
	char *name;
d52 1
d54 1
a54 1
		warn ("No memory for %s.", name);
d58 2
a59 3
void dfree(ptr, name)
	void *ptr;
	char *name;
d62 1
a62 1
		warn ("dfree %s: free on null pointer.", name);
d65 1
a65 1
	free (ptr);
d68 2
a69 2
struct packet *new_packet(name)
	char *name;
d72 1
d77 2
a78 2
struct dhcp_packet *new_dhcp_packet(name)
	char *name;
d81 1
d83 1
a83 1
	          name);
d87 2
a88 2
struct tree *new_tree(name)
	char *name;
d91 1
d95 2
a96 3
struct string_list *new_string_list(size, name)
	size_t size;
	char * name;
d100 2
a101 2
	rval =dmalloc(sizeof(struct string_list) + size, name);
	if (rval != NULL) 
d108 2
a109 2
struct tree_cache *new_tree_cache(name)
	char *name;
d115 1
a115 2
		free_tree_caches =
			(struct tree_cache *)(rval->value);
d124 2
a125 3
struct hash_table *new_hash_table(count, name)
	int count;
	char *name;
d128 4
a131 3
	rval = dmalloc(sizeof (struct hash_table)
          - (DEFAULT_HASH_SIZE * sizeof(struct hash_bucket *))
          + (count * sizeof(struct hash_bucket *)), name);
d138 2
a139 2
struct hash_bucket *new_hash_bucket(name)
	char *name;
d142 1
d146 2
a147 3
struct lease *new_leases(n, name)
	int n;
	char *name;
d150 1
d154 2
a155 2
struct lease *new_lease(name)
	char *name;
d158 1
d162 2
a163 2
struct subnet *new_subnet(name)
	char *name;
d166 1
d170 2
a171 2
struct class *new_class(name)
	char *name;
d174 1
d178 2
a179 2
struct shared_network *new_shared_network(name)
	char *name;
d182 2
a183 1
		dmalloc (sizeof(struct shared_network), name);
d187 2
a188 2
struct group *new_group(name)
	char *name;
d191 2
a192 1
		dmalloc(sizeof(struct group), name);
d196 2
a197 2
struct protocol *new_protocol(name)
	char *name;
d200 1
d206 2
a207 2
struct lease_state *new_lease_state (name)
	char *name;
d214 3
a216 4
			(struct lease_state *)(free_lease_states->next);
	} else {
		rval = dmalloc (sizeof (struct lease_state), name);
	}
d220 2
a221 2
struct domain_search_list *new_domain_search_list (name)
	char *name;
d224 2
a225 1
		dmalloc (sizeof (struct domain_search_list), name);
d229 2
a230 2
struct name_server *new_name_server (name)
	char *name;
d233 2
a234 1
		dmalloc (sizeof (struct name_server), name);
d238 2
a239 3
void free_name_server (ptr, name)
	struct name_server *ptr;
	char *name;
d241 1
a241 1
	dfree (ptr, name);
d244 2
a245 3
void free_domain_search_list (ptr, name)
	struct domain_search_list *ptr;
	char *name;
d247 1
a247 1
	dfree (ptr, name);
d250 2
a251 3
void free_lease_state (ptr, name)
	struct lease_state *ptr;
	char *name;
d254 1
a254 1
		dfree (ptr->prl, name);
d259 2
a260 3
void free_protocol (ptr, name)
	struct protocol *ptr;
	char *name;
d262 1
a262 1
	dfree (ptr, name);
d265 2
a266 3
void free_group (ptr, name)
	struct group *ptr;
	char *name;
d268 1
a268 1
	dfree (ptr, name);
d271 2
a272 3
void free_shared_network (ptr, name)
	struct shared_network *ptr;
	char *name;
d274 1
a274 1
	dfree (ptr, name);
d277 2
a278 3
void free_class (ptr, name)
	struct class *ptr;
	char *name;
d280 1
a280 1
	dfree (ptr, name);
d283 2
a284 3
void free_subnet (ptr, name)
	struct subnet *ptr;
	char *name;
d286 1
a286 1
	dfree (ptr, name);
d289 2
a290 3
void free_lease (ptr, name)
	struct lease *ptr;
	char *name;
d292 1
a292 1
	dfree (ptr, name);
d295 2
a296 3
void free_hash_bucket (ptr, name)
	struct hash_bucket *ptr;
	char *name;
d298 1
a298 1
	dfree (ptr, name);
d301 2
a302 3
void free_hash_table (ptr, name)
	struct hash_table *ptr;
	char *name;
d304 1
a304 1
	dfree (ptr, name);
d307 2
a308 3
void free_tree_cache (ptr, name)
	struct tree_cache *ptr;
	char *name;
d314 2
a315 3
void free_packet (ptr, name)
	struct packet *ptr;
	char *name;
d317 1
a317 1
	dfree (ptr, name);
d320 2
a321 3
void free_dhcp_packet (ptr, name)
	struct dhcp_packet *ptr;
	char *name;
d323 1
a323 1
	dfree (ptr, name);
d326 2
a327 3
void free_tree (ptr, name)
	struct tree *ptr;
	char *name;
d329 1
a329 1
	dfree (ptr, name);
d332 2
a333 3
void free_string_list (ptr, name)
	struct string_list *ptr;
	char *name;
d335 1
a335 1
	dfree (ptr, name);
@

