head	1.9;
access;
symbols
	OPENBSD_5_2:1.7.0.36
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.32
	OPENBSD_5_0:1.7.0.30
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.28
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.26
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.22
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.24
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.20
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.18
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.16
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.14
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.12
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.10
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.8
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.6
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.4
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.5.0.2
	OPENBSD_3_5_BASE:1.5;
locks; strict;
comment	@ * @;


1.9
date	2012.11.09.23.50.39;	author krw;	state dead;
branches;
next	1.8;

1.8
date	2012.11.06.00.05.11;	author krw;	state Exp;
branches;
next	1.7;

1.7
date	2004.05.04.21.48.16;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2004.05.04.20.28.40;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2004.03.02.18.49.21;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2004.02.07.13.26.35;	author henning;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.04.12.16.56;	author henning;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.04.01.18.26;	author henning;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.18.01.26.20;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Remove now unused files.
@
text
@/*	$OpenBSD: inet.c,v 1.8 2012/11/06 00:05:11 krw Exp $	*/

/*
 * Subroutines to manipulate internet addresses in a safely portable
 * way...
 */

/*
 * Copyright (c) 1996 The Internet Software Consortium.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of The Internet Software Consortium nor the names
 *    of its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INTERNET SOFTWARE CONSORTIUM AND
 * CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE INTERNET SOFTWARE CONSORTIUM OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * This software has been written for the Internet Software Consortium
 * by Ted Lemon <mellon@@fugue.com> in cooperation with Vixie
 * Enterprises.  To learn more about the Internet Software Consortium,
 * see ``http://www.vix.com/isc''.  To learn more about Vixie
 * Enterprises, see ``http://www.vix.com''.
 */

#include "dhcpd.h"

int
addr_eq(struct iaddr addr1, struct iaddr addr2)
{
	if (addr1.len != addr2.len)
		return (0);
	return (memcmp(addr1.iabuf, addr2.iabuf, addr1.len) == 0);
}

char *
piaddr(struct iaddr addr)
{
	static char pbuf[32];
	struct in_addr a;
	char *s;

	memcpy(&a, &(addr.iabuf), sizeof(struct in_addr));

	if (addr.len == 0)
		strlcpy(pbuf, "<null address>", sizeof(pbuf));
	else {
		s = inet_ntoa(a);
		if (s != NULL)
			strlcpy(pbuf, s, sizeof(pbuf));
		else
			strlcpy(pbuf, "<invalid address>", sizeof(pbuf));
	}
	return (pbuf);
}
@


1.8
log
@Kill two unused functions, subnet_number() and broadcast_addr().
@
text
@d1 1
a1 1
/*	$OpenBSD: inet.c,v 1.7 2004/05/04 21:48:16 deraadt Exp $	*/
@


1.7
log
@knf
@
text
@d1 1
a1 1
/*	$OpenBSD: inet.c,v 1.6 2004/05/04 20:28:40 deraadt Exp $	*/
a45 44

/*
 * Return just the network number of an internet address...
 */
struct iaddr
subnet_number(struct iaddr addr, struct iaddr mask)
{
	struct iaddr rv;
	int i;

	rv.len = 0;

	/* Both addresses must have the same length... */
	if (addr.len != mask.len)
		return (rv);

	rv.len = addr.len;
	for (i = 0; i < rv.len; i++)
		rv.iabuf[i] = addr.iabuf[i] & mask.iabuf[i];
	return (rv);
}

/*
 * Given a subnet number and netmask, return the address on that subnet
 * for which the host portion of the address is all ones (the standard
 * broadcast address).
 */
struct iaddr
broadcast_addr(struct iaddr subnet, struct iaddr mask)
{
	struct iaddr rv;
	int i;

	if (subnet.len != mask.len) {
		rv.len = 0;
		return (rv);
	}

	for (i = 0; i < subnet.len; i++)
		rv.iabuf[i] = subnet.iabuf[i] | (~mask.iabuf[i] & 255);
	rv.len = subnet.len;

	return (rv);
}
@


1.6
log
@remove things not used, spotted by lint mostly; ok henning
@
text
@d1 1
a1 1
/*	$OpenBSD: inet.c,v 1.5 2004/03/02 18:49:21 deraadt Exp $	*/
d76 1
a77 1
	struct iaddr rv;
d99 2
a100 1
char *piaddr(struct iaddr addr)
d103 1
a104 1
	struct in_addr a;
@


1.5
log
@more pruning; henning ok
@
text
@d1 1
a1 1
/*	$OpenBSD: inet.c,v 1.4 2004/02/07 13:26:35 henning Exp $	*/
a68 43
 * Combine a network number and a integer to produce an internet address.
 * This won't work for subnets with more than 32 bits of host address, but
 * maybe this isn't a problem.
 */
struct iaddr
ip_addr(struct iaddr subnet, struct iaddr mask, u_int32_t host_address)
{
	int i, j, k;
	u_int32_t swaddr;
	unsigned char habuf[sizeof(swaddr)];
	struct iaddr rv;

	swaddr = htonl(host_address);
	memcpy(habuf, &swaddr, sizeof(swaddr));

	/*
	 * Combine the subnet address and the host address.   If the
	 * host address is bigger than can fit in the subnet, return a
	 * zero-length iaddr structure.
	 */
	rv = subnet;
	j = rv.len - sizeof(habuf);
	for (i = sizeof(habuf) - 1; i >= 0; i--) {
		if (mask.iabuf[i + j]) {
			if (habuf[i] > (mask.iabuf[i + j] ^ 0xFF)) {
				rv.len = 0;
				return (rv);
			}
			for (k = i - 1; k >= 0; k--)
				if (habuf[k]) {
					rv.len = 0;
					return (rv);
				}
			rv.iabuf[i + j] |= habuf[i];
			break;
		} else
			rv.iabuf[i + j] = habuf[i];
	}

	return (rv);
}

/*
a88 21
}

u_int32_t
host_addr(struct iaddr addr, struct iaddr mask)
{
	int i;
	u_int32_t swaddr;
	struct iaddr rv;

	rv.len = 0;

	/* Mask out the network bits... */
	rv.len = addr.len;
	for (i = 0; i < rv.len; i++)
		rv.iabuf[i] = addr.iabuf[i] & ~mask.iabuf[i];

	/* Copy out up to 32 bits... */
	memcpy(&swaddr, &rv.iabuf[rv.len - sizeof(swaddr)], sizeof(swaddr));

	/* Swap it and return it. */
	return (ntohl(swaddr));
@


1.4
log
@more KNF From: Emil Mikulic <emikulic@@dmr.ath.cx>
great job.
no binary change.
@
text
@d1 1
a1 1
/*	$OpenBSD: inet.c,v 1.3 2004/02/04 12:16:56 henning Exp $	*/
d53 1
a54 1
	struct iaddr rv;
d78 1
a79 1
	unsigned char habuf[sizeof(swaddr)];
@


1.3
log
@$OpenBSD$, tedu
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d3 4
a6 2
/* Subroutines to manipulate internet addresses in a safely portable
   way... */
d47 3
a49 2
/* Return just the network number of an internet address... */

d60 1
a60 1
		return rv;
d64 2
a65 2
		rv.iabuf [i] = addr.iabuf [i] & mask.iabuf [i];
	return rv;
d68 2
a69 1
/* Combine a network number and a integer to produce an internet address.
d71 1
a71 1
 * maybe this isn't a problem. 
a72 1

d79 1
a79 1
	unsigned char habuf [sizeof swaddr];
d82 1
a82 1
	memcpy(habuf, &swaddr, sizeof swaddr);
d84 5
a88 3
	/* Combine the subnet address and the host address.   If
	   the host address is bigger than can fit in the subnet,
	   return a zero-length iaddr structure. */
d90 4
a93 4
	j = rv.len - sizeof habuf;
	for (i = sizeof habuf - 1; i >= 0; i--) {
		if (mask.iabuf [i + j]) {
			if (habuf [i] > (mask.iabuf [i + j] ^ 0xFF)) {
d95 1
a95 1
				return rv;
d98 1
a98 1
				if (habuf [k]) {
d100 1
a100 1
					return rv;
d107 2
a108 2
		
	return rv;
d111 5
a115 4
/* Given a subnet number and netmask, return the address on that subnet
   for which the host portion of the address is all ones (the standard
   broadcast address). */

d124 1
a124 1
		return rv;
d128 1
a128 1
		rv.iabuf [i] = subnet.iabuf [i] | (~mask.iabuf [i] & 255);
d131 1
a131 1
	return rv;
d146 1
a146 1
		rv.iabuf [i] = addr.iabuf [i] & ~mask.iabuf [i];
d149 1
a149 1
	memcpy(&swaddr, &rv.iabuf [rv.len - sizeof swaddr], sizeof swaddr);
d152 1
a152 1
	return ntohl(swaddr);
d159 2
a160 2
		return 0;
	return memcmp(addr1.iabuf, addr2.iabuf, addr1.len) == 0;
d168 1
a168 1
	
d172 1
a172 1
		strlcpy (pbuf, "<null address>", sizeof(pbuf));
d178 3
a180 3
			strlcpy (pbuf, "<invalid address>", sizeof(pbuf));
	}	
	return(pbuf);
@


1.2
log
@8579 lines of KNF, ANSO and zap-junk diff without the resulting binary
changing by a single byte.
partly from theo
@
text
@d1 1
a1 1
/* inet.c
d3 1
a3 1
   Subroutines to manipulate internet addresses in a safely portable
@


1.1
log
@this is where dhclient will start surgery
@
text
@d47 2
a48 3
struct iaddr subnet_number (addr, mask)
	struct iaddr addr;
	struct iaddr mask;
d70 2
a71 4
struct iaddr ip_addr (subnet, mask, host_address)
	struct iaddr subnet;
	struct iaddr mask;
	u_int32_t host_address;
d78 2
a79 2
	swaddr = htonl (host_address);
	memcpy (habuf, &swaddr, sizeof swaddr);
d92 1
a92 1
			for (k = i - 1; k >= 0; k--) {
d97 1
a97 2
			}
			rv.iabuf [i + j] |= habuf [i];
d100 1
a100 1
			rv.iabuf [i + j] = habuf [i];
d110 2
a111 3
struct iaddr broadcast_addr (subnet, mask)
	struct iaddr subnet;
	struct iaddr mask;
d121 1
a121 1
	for (i = 0; i < subnet.len; i++) {
a122 1
	}
d128 2
a129 3
u_int32_t host_addr (addr, mask)
	struct iaddr addr;
	struct iaddr mask;
d143 1
a143 1
	memcpy (&swaddr, &rv.iabuf [rv.len - sizeof swaddr], sizeof swaddr);
d146 1
a146 1
	return ntohl (swaddr);
d149 2
a150 2
int addr_eq (addr1, addr2)
	struct iaddr addr1, addr2;
d154 1
a154 1
	return memcmp (addr1.iabuf, addr2.iabuf, addr1.len) == 0;
d157 1
a157 2
char *piaddr (addr)
	struct iaddr addr;
d159 1
a159 1
	static char pbuf [32];
d165 1
a165 1
	if (addr.len == 0) {
a166 1
	}
@

