head	1.6;
access;
symbols
	OPENBSD_5_6:1.5.0.6
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.4
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.4.0.46
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.44
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.42
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.40
	OPENBSD_5_0:1.4.0.38
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.36
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.34
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.30
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.32
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.28
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.26
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.24
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.22
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.20
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.18
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.16
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.14
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.12
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.10
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.8
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.6
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3;
locks; strict;
comment	@ * @;


1.6
date	2014.10.09.03.43.34;	author tedu;	state dead;
branches;
next	1.5;
commitid	Qvco95xx2Lj9qjX9;

1.5
date	2013.10.15.02.46.31;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.09.08.13.07;	author todd;	state Exp;
branches;
next	1.3;

1.3
date	2002.02.17.19.42.28;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2002.02.16.21.27.35;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2002.01.08.21.28.38;	author ericj;	state Exp;
branches;
next	;


desc
@@


1.6
log
@no more modules
@
text
@/*	$OpenBSD: modload.h,v 1.5 2013/10/15 02:46:31 deraadt Exp $	*/
/*	$NetBSD: modload.h,v 1.2 2001/11/08 15:33:15 christos Exp $	*/

/*
 * Copyright (c) 1993 Terrence R. Lambert.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Terrence R. Lambert.
 * 4. The name Terrence R. Lambert may not be used to endorse or promote
 *    products derived from this software without specific prior written
 *    permission.
 *
 * THIS SOFTWARE IS PROVIDED BY TERRENCE R. LAMBERT ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE TERRENCE R. LAMBERT BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef __modload_h__
#define __modload_h__

int	elf_mod_sizes(int, size_t *, int *, struct lmc_resrv *,
	    struct stat *);
void	*elf_mod_load(int);
void	elf_linkcmd(char *, size_t, const char *, const char *,
	    const char *, const void *, const char *);
void	elf_mod_symload(int);

#define mod_sizes elf_mod_sizes
#define mod_load elf_mod_load
#define mod_symload elf_mod_symload
#define linkcmd elf_linkcmd

void loadbuf(void *, size_t);
void loadspace(size_t);
void loadsym(void *, size_t);

extern int debug;
extern int verbose;

#endif /* __modload_h__ */
@


1.5
log
@remove last bits of a.out support
@
text
@d1 1
a1 1
/*	$OpenBSD: modload.h,v 1.4 2002/06/09 08:13:07 todd Exp $	*/
@


1.4
log
@rm trailing whitespace
@
text
@d1 1
a1 1
/*	$OpenBSD: modload.h,v 1.3 2002/02/17 19:42:28 millert Exp $	*/
a45 8
int	a_out_mod_sizes(int, size_t *, int *, struct lmc_resrv *,
	    struct stat *);
void	*a_out_mod_load(int);
void	a_out_linkcmd(char *, size_t, const char *, const char *,
	    const char *, const void *, const char *);
void	a_out_mod_symload(int);

#ifndef USE_AOUT
a49 6
#else
#define mod_sizes a_out_mod_sizes
#define mod_load a_out_mod_load
#define mod_symload a_out_mod_symload
#define linkcmd a_out_linkcmd
#endif
@


1.3
log
@Manual cleanup of remaining userland __P use (excluding packages maintained outside the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: modload.h,v 1.2 2002/02/16 21:27:35 millert Exp $	*/
d42 1
a42 1
void	elf_linkcmd(char *, size_t, const char *, const char *, 
d49 1
a49 1
void	a_out_linkcmd(char *, size_t, const char *, const char *, 
@


1.2
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: modload.h,v 1.1 2002/01/08 21:28:38 ericj Exp $	*/
d39 2
a40 2
int	elf_mod_sizes	__P((int, size_t *, int *, struct lmc_resrv *,
			     struct stat *));
d42 2
a43 2
void	elf_linkcmd	__P((char*, size_t, const char*, const char*, 
			     const char*, const void*, const char*));
d46 2
a47 2
int	a_out_mod_sizes __P((int, size_t *, int *, struct lmc_resrv *,
			     struct stat *));
d49 2
a50 2
void	a_out_linkcmd	__P((char*, size_t, const char*, const char*, 
			     const char*, const void*, const char*));
d65 1
a65 1
void loadbuf(void*, size_t);
d67 1
a67 1
void loadsym(void*, size_t);
@


1.1
log
@
add support in modload for ELF
from NetBSD
miod@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d41 1
a41 1
void	*elf_mod_load	__P((int));
d44 1
a44 1
void	elf_mod_symload	__P((int));
d48 1
a48 1
void	*a_out_mod_load	__P((int));
d51 1
a51 1
void	a_out_mod_symload __P((int));
@

