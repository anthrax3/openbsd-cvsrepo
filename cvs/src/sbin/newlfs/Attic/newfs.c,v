head	1.17;
access;
symbols
	OPENBSD_4_0:1.15.0.10
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.15.0.8
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.15.0.6
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.15.0.4
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.15.0.2
	OPENBSD_3_6_BASE:1.15
	OPENBSD_3_5:1.14.0.4
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.14.0.2
	OPENBSD_3_4_BASE:1.14
	OPENBSD_3_3:1.11.0.4
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.2
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.8.0.10
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.8.0.8
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_8:1.8.0.6
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.4
	OPENBSD_2_7_BASE:1.8
	OPENBSD_2_6:1.8.0.2
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.7.0.4
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.7.0.2
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.6.0.6
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.4
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.17
date	2006.09.21.19.43.21;	author pedro;	state dead;
branches;
next	1.16;

1.16
date	2006.09.21.02.46.00;	author pedro;	state Exp;
branches;
next	1.15;

1.15
date	2004.07.17.02.14.33;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2003.06.25.21.24.25;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.02.20.06.16;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2003.03.30.08.32.44;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2002.05.22.08.21.02;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2002.03.14.16.44.24;	author mpech;	state Exp;
branches;
next	1.9;

1.9
date	2002.02.16.21.27.37;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	99.08.17.09.13.14;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	98.07.13.02.11.22;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	97.01.15.23.41.33;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	96.12.04.08.39.31;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.07.01.11.02.55;	author downsj;	state Exp;
branches;
next	1.3;

1.3
date	96.06.23.14.31.54;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.05.22.11.34.56;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.43.43;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.43.43;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Those were supposed to go away...
@
text
@@


1.16
log
@Remove newlfs, okay weingart@@ deraadt@@
@
text
@@


1.15
log
@some ansi; khalek@@linuxgamers.net
@
text
@a0 471
/*	$OpenBSD: newfs.c,v 1.14 2003/06/25 21:24:25 deraadt Exp $	*/
/*	$NetBSD: newfs.c,v 1.5 1996/05/16 07:17:50 thorpej Exp $	*/

/*-
 * Copyright (c) 1989, 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1989, 1992, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)newfs.c	8.5 (Berkeley) 5/24/95";
#else
static char rcsid[] = "$OpenBSD: newfs.c,v 1.14 2003/06/25 21:24:25 deraadt Exp $";
#endif
#endif /* not lint */

/*
 * newfs: friendly front end to mkfs
 */
#include <sys/param.h>
#include <sys/ucred.h>
#include <sys/stat.h>
#include <sys/ioctl.h>
#include <sys/disklabel.h>
#include <sys/mount.h>
#include <sys/sysctl.h>

#include <ufs/ufs/dir.h>
#include <ufs/ufs/dinode.h>

#include <errno.h>
#include <fcntl.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include <paths.h>
#include <util.h>
#include "config.h"
#include "extern.h"

#define	COMPAT			/* allow non-labeled disks */

int	mfs;			/* run as the memory based filesystem */
int	Nflag;			/* run without writing file system */
int	fssize;			/* file system size */
int	ntracks;		/* # tracks/cylinder */
int	nsectors;		/* # sectors/track */
int	nphyssectors;		/* # sectors/track including spares */
int	secpercyl;		/* sectors per cylinder */
int	trackspares = -1;	/* spare sectors per track */
int	cylspares = -1;		/* spare sectors per cylinder */
int	sectorsize;		/* bytes/sector */
#ifdef tahoe
int	realsectorsize;		/* bytes/sector in hardware */
#endif
int	rpm;			/* revolutions/minute of drive */
int	interleave;		/* hardware sector interleave */
int	trackskew = -1;		/* sector 0 skew, per track */
int	headswitch;		/* head switch time, usec */
int	trackseek;		/* track-to-track seek, usec */
int	fsize = 0;		/* fragment size */
int	bsize = 0;		/* block size */
int	cpg = DESCPG;		/* cylinders/cylinder group */
int	cpgflg;			/* cylinders/cylinder group flag was given */
int	minfree = MINFREE;	/* free space threshold */
int	opt = DEFAULTOPT;	/* optimization preference (space or time) */
int	density;		/* number of bytes per inode */
int	maxcontig = MAXCONTIG;	/* max contiguous blocks to allocate */
int	rotdelay = ROTDELAY;	/* rotational delay between blocks */
int	maxbpg;			/* maximum blocks per file in a cyl group */
int	nrpos = NRPOS;		/* # of distinguished rotational positions */
int	bbsize = BBSIZE;	/* boot block size */
int	sbsize = SBSIZE;	/* superblock size */
int	mntflags;		/* flags to be passed to mount */
u_long	memleft;		/* virtual memory available */
caddr_t	membase;		/* start address of memory based filesystem */
#ifdef COMPAT
char	*disktype;
int	unlabeled;
#endif

char	device[MAXPATHLEN];
char	*progname, *special;

static struct disklabel *getdisklabel(char *, int);
static struct disklabel *debug_readlabel(int);
static void rewritelabel(char *, int, struct disklabel *);
static void usage(void);

int
main(int argc, char *argv[])
{
	int ch;
	struct partition *pp;
	struct disklabel *lp;
	struct partition oldpartition;
	struct stat st;
	int debug, lfs, fsi, fso, segsize, maxpartitions;
	char *cp, *opstring;

	if (progname = strrchr(*argv, '/'))
		++progname;
	else
		progname = *argv;

	if (strstr(progname, "mfs")) {
		mfs = 1;
		Nflag++;
	}

	maxpartitions = getmaxpartitions();
	if (maxpartitions > 26)
		fatal("insane maxpartitions value %d", maxpartitions);

	/* -F is mfs only and MUST come first! */
	opstring = "F:B:DLNS:T:a:b:c:d:e:f:i:k:l:t:m:n:o:p:r:s:z:u:x:";
	if (!mfs)
		opstring += 2;

	debug = lfs = segsize = 0;
	while ((ch = getopt(argc, argv, opstring)) != -1)
		switch(ch) {
		case 'B':	/* LFS segment size */
			if ((segsize = atoi(optarg)) < LFS_MINSEGSIZE)
				fatal("%s: bad segment size", optarg);
			break;
		case 'D':
			debug = 1;
			break;
		case 'F':
			if ((mntflags = atoi(optarg)) == 0)
				fatal("%s: bad mount flags", optarg);
			break;
		case 'L':	/* Create lfs */
			lfs = 1;
			break;
		case 'N':
			Nflag++;
			break;
		case 'S':
			if ((sectorsize = atoi(optarg)) <= 0)
				fatal("%s: bad sector size", optarg);
			break;
#ifdef COMPAT
		case 'T':
			disktype = optarg;
			break;
#endif
		case 'a':
			if ((maxcontig = atoi(optarg)) <= 0)
				fatal("%s: bad max contiguous blocks\n",
				    optarg);
			break;
		case 'b':	/* used for LFS */
			if ((bsize = atoi(optarg)) < LFS_MINBLOCKSIZE)
				fatal("%s: bad block size", optarg);
			break;
		case 'c':
			if ((cpg = atoi(optarg)) <= 0)
				fatal("%s: bad cylinders/group", optarg);
			cpgflg++;
			break;
		case 'd':
			if ((rotdelay = atoi(optarg)) < 0)
				fatal("%s: bad rotational delay\n", optarg);
			break;
		case 'e':
			if ((maxbpg = atoi(optarg)) <= 0)
				fatal("%s: bad blocks per file in a cyl group\n",
				    optarg);
			break;
		case 'f':
			if ((fsize = atoi(optarg)) <= 0)
				fatal("%s: bad frag size", optarg);
			break;
		case 'i':
			if ((density = atoi(optarg)) <= 0)
				fatal("%s: bad bytes per inode\n", optarg);
			break;
		case 'k':
			if ((trackskew = atoi(optarg)) < 0)
				fatal("%s: bad track skew", optarg);
			break;
		case 'l':
			if ((interleave = atoi(optarg)) <= 0)
				fatal("%s: bad interleave", optarg);
			break;
		case 'm':		/* used for LFS */
			if ((minfree = atoi(optarg)) < 0 || minfree > 99)
				fatal("%s: bad free space %%\n", optarg);
			break;
		case 'n':
			if ((nrpos = atoi(optarg)) <= 0)
				fatal("%s: bad rotational layout count\n",
				    optarg);
			break;
		case 'o':
			if (strcmp(optarg, "space") == 0)
				opt = FS_OPTSPACE;
			else if (strcmp(optarg, "time") == 0)
				opt = FS_OPTTIME;
			else
				fatal("%s: bad optimization preference %s",
				    optarg, "(options are `space' or `time')");
			break;
		case 'p':
			if ((trackspares = atoi(optarg)) < 0)
				fatal("%s: bad spare sectors per track",
				    optarg);
			break;
		case 'r':
			if ((rpm = atoi(optarg)) <= 0)
				fatal("%s: bad revs/minute\n", optarg);
			break;
		case 's':	/* used for LFS */
			if ((fssize = atoi(optarg)) <= 0)
				fatal("%s: bad file system size", optarg);
			break;
		case 't':	/* compat with "-t fstype" in newfs */
			break;
		case 'z':
			if ((ntracks = atoi(optarg)) <= 0)
				fatal("%s: bad total tracks", optarg);
			break;
		case 'u':
			if ((nsectors = atoi(optarg)) <= 0)
				fatal("%s: bad sectors/track", optarg);
			break;
		case 'x':
			if ((cylspares = atoi(optarg)) < 0)
				fatal("%s: bad spare sectors per cylinder",
				    optarg);
			break;
		case '?':
		default:
			usage();
		}
	argc -= optind;
	argv += optind;

	if (argc != 2 && (mfs || argc != 1))
		usage();

	/*
	 * If the -N flag isn't specified, open the output file.  If no path
	 * prefix, try /dev/r%s and then /dev/%s.
	 */
	special = argv[0];
	if (strchr(special, '/') == NULL) {
		(void)snprintf(device, sizeof device, "%sr%s", _PATH_DEV, special);
		if (stat(device, &st) == -1)
			(void)snprintf(device, sizeof device, "%s%s",
			    _PATH_DEV, special);
		special = device;
	}
	if (!Nflag) {
		fso = open(special,
		    (debug ? O_CREAT : 0) | O_WRONLY, DEFFILEMODE);
		if (fso < 0)
			fatal("%s: %s", special, strerror(errno));
	} else
		fso = -1;

	/* Open the input file. */
	fsi = open(special, O_RDONLY);
	if (fsi < 0)
		fatal("%s: %s", special, strerror(errno));
	if (fstat(fsi, &st) < 0)
		fatal("%s: %s", special, strerror(errno));

	if (!debug && !mfs && !S_ISCHR(st.st_mode))
		(void)printf("%s: %s: not a character-special device\n",
		    progname, special);
	cp = strchr(argv[0], '\0') - 1;
	if (!debug && (cp == 0 || (*cp < 'a' || *cp > ('a' + maxpartitions - 1))
	    && !isdigit(*cp)))
		fatal("%s: can't figure out file system partition", argv[0]);

#ifdef COMPAT
	if (!mfs && disktype == NULL)
		disktype = argv[1];
#endif
	if (debug)
		lp = debug_readlabel(fsi);
	else
		lp = getdisklabel(special, fsi);

	if (isdigit(*cp))
		pp = &lp->d_partitions[0];
	else
		pp = &lp->d_partitions[*cp - 'a'];
	if (pp->p_size == 0)
		fatal("%s: `%c' partition is unavailable", argv[0], *cp);

	/* If we're making a LFS, we break out here */
	exit(make_lfs(fso, lp, pp, minfree, bsize, fsize, segsize));
}

#ifdef COMPAT
char lmsg[] = "%s: can't read disk label; disk type must be specified";
#else
char lmsg[] = "%s: can't read disk label";
#endif

static struct disklabel *
getdisklabel(char *s, int fd)
{
	static struct disklabel lab;

	if (ioctl(fd, DIOCGDINFO, (char *)&lab) < 0) {
#ifdef COMPAT
		if (disktype) {
			struct disklabel *lp;

			unlabeled++;
			lp = getdiskbyname(disktype);
			if (lp == NULL)
				fatal("%s: unknown disk type", disktype);
			return (lp);
		}
#endif
		(void)fprintf(stderr,
		    "%s: ioctl (GDINFO): %s\n", progname, strerror(errno));
		fatal(lmsg, s);
	}
	return (&lab);
}


static struct disklabel *
debug_readlabel(int fd)
{
	static struct disklabel lab;
	int n;

	if ((n = read(fd, &lab, sizeof(struct disklabel))) < 0)
		fatal("unable to read disk label: %s", strerror(errno));
	else if (n < sizeof(struct disklabel))
		fatal("short read of disklabel: %d of %d bytes", n,
			sizeof(struct disklabel));
	return(&lab);
}

static void
rewritelabel(char *s, int fd, struct disklabel *lp)
{
#ifdef COMPAT
	if (unlabeled)
		return;
#endif
	lp->d_checksum = 0;
	lp->d_checksum = dkcksum(lp);
	if (ioctl(fd, DIOCWDINFO, (char *)lp) < 0) {
		(void)fprintf(stderr,
		    "%s: ioctl (WDINFO): %s\n", progname, strerror(errno));
		fatal("%s: can't rewrite disk label", s);
	}
#if vax
	if (lp->d_type == DTYPE_SMD && lp->d_flags & D_BADSECT) {
		int i;
		int cfd;
		daddr_t alt;
		char specname[64];
		char blk[1024];
		char *cp;

		/*
		 * Make name for 'c' partition.
		 */
		strlcpy(specname, s, sizeof specname);
		cp = specname + strlen(specname) - 1;
		if (!isdigit(*cp))
			*cp = 'c';
		cfd = open(specname, O_WRONLY);
		if (cfd < 0)
			fatal("%s: %s", specname, strerror(errno));
		memset(blk, 0, sizeof(blk));
		*(struct disklabel *)(blk + LABELOFFSET) = *lp;
		alt = lp->d_ncylinders * lp->d_secpercyl - lp->d_nsectors;
		for (i = 1; i < 11 && i < lp->d_nsectors; i += 2) {
			if (lseek(cfd, (off_t)(alt + i) * lp->d_secsize,
			    SEEK_SET) == -1)
				fatal("lseek to badsector area: %s",
				    strerror(errno));
			if (write(cfd, blk, lp->d_secsize) < lp->d_secsize)
				fprintf(stderr,
				    "%s: alternate label %d write: %s\n",
				    progname, i/2, strerror(errno));
		}
		close(cfd);
	}
#endif
}

void
usage(void)
{
	if (mfs) {
		fprintf(stderr,
		    "usage: mfs [ -fsoptions ] special-device mount-point\n");
	} else
		fprintf(stderr,
		    "usage: newfs_lfs [ -fsoptions ] special-device%s\n",
#ifdef COMPAT
		    " [device-type]");
#else
		    "");
#endif
	fprintf(stderr, "where fsoptions are:\n");
	fprintf(stderr, "\t-B LFS segment size\n");
	fprintf(stderr, "\t-D debug\n");
	fprintf(stderr, "\t-F mount flags\n");
	fprintf(stderr, "\t-L create LFS file system\n");
	fprintf(stderr,
	    "\t-N do not create file system, just print out parameters\n");
	fprintf(stderr, "\t-S sector size\n");
#ifdef COMPAT
	fprintf(stderr, "\t-T disktype\n");
#endif
	fprintf(stderr, "\t-a maximum contiguous blocks\n");
	fprintf(stderr, "\t-b block size\n");
	fprintf(stderr, "\t-c cylinders/group\n");
	fprintf(stderr, "\t-d rotational delay between contiguous blocks\n");
	fprintf(stderr, "\t-e maximum blocks per file in a cylinder group\n");
	fprintf(stderr, "\t-f frag size\n");
	fprintf(stderr, "\t-i number of bytes per inode\n");
	fprintf(stderr, "\t-k sector 0 skew, per track\n");
	fprintf(stderr, "\t-l hardware sector interleave\n");
	fprintf(stderr, "\t-m minimum free space %%\n");
	fprintf(stderr, "\t-n number of distinguished rotational positions\n");
	fprintf(stderr, "\t-o optimization preference (`space' or `time')\n");
	fprintf(stderr, "\t-p spare sectors per track\n");
	fprintf(stderr, "\t-r revolutions/minute\n");
	fprintf(stderr, "\t-s file system size (sectors)\n");
	fprintf(stderr, "\t-u sectors/track\n");
	fprintf(stderr, "\t-x spare sectors per cylinder\n");
	fprintf(stderr, "\t-z tracks/cylinder\n");
	exit(1);
}
@


1.14
log
@proto repairs
@
text
@d1 1
a1 1
/*	$OpenBSD: newfs.c,v 1.13 2003/06/02 20:06:16 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: newfs.c,v 1.13 2003/06/02 20:06:16 millert Exp $";
d123 1
a123 3
main(argc, argv)
	int argc;
	char *argv[];
d338 1
a338 3
getdisklabel(s, fd)
	char *s;
	int fd;
d363 1
a363 2
debug_readlabel(fd)
	int fd;
d377 1
a377 4
rewritelabel(s, fd, lp)
	char *s;
	int fd;
	struct disklabel *lp;
d428 1
a428 1
usage()
@


1.13
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: newfs.c,v 1.12 2003/03/30 08:32:44 deraadt Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: newfs.c,v 1.12 2003/03/30 08:32:44 deraadt Exp $";
d349 1
a349 1
			struct disklabel *lp, *getdiskbyname();
@


1.12
log
@snprintf
@
text
@d1 1
a1 1
/*	$OpenBSD: newfs.c,v 1.11 2002/05/22 08:21:02 deraadt Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d43 1
a43 1
static char rcsid[] = "$OpenBSD: newfs.c,v 1.11 2002/05/22 08:21:02 deraadt Exp $";
@


1.11
log
@strcpy, sprintf death; mpech ok
@
text
@d1 1
a1 1
/*	$OpenBSD: newfs.c,v 1.10 2002/03/14 16:44:24 mpech Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: newfs.c,v 1.10 2002/03/14 16:44:24 mpech Exp $";
d288 1
a288 1
		(void)sprintf(device, "%sr%s", _PATH_DEV, special);
d290 2
a291 1
			(void)sprintf(device, "%s%s", _PATH_DEV, special);
@


1.10
log
@kill more registers.

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: newfs.c,v 1.9 2002/02/16 21:27:37 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: newfs.c,v 1.9 2002/02/16 21:27:37 millert Exp $";
d413 1
a413 1
		strcpy(specname, s);
@


1.9
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: newfs.c,v 1.8 1999/08/17 09:13:14 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: newfs.c,v 1.8 1999/08/17 09:13:14 millert Exp $";
d131 3
a133 3
	register int ch;
	register struct partition *pp;
	register struct disklabel *lp;
d388 1
a388 1
	register struct disklabel *lp;
d403 1
a403 1
		register i;
@


1.8
log
@More <sys/file.h> vs. <fcntl.h> and open() flags fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD: newfs.c,v 1.7 1998/07/13 02:11:22 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: newfs.c,v 1.7 1998/07/13 02:11:22 millert Exp $";
d121 4
a124 4
static struct disklabel *getdisklabel __P((char *, int));
static struct disklabel *debug_readlabel __P((int));
static void rewritelabel __P((char *, int, struct disklabel *));
static void usage __P((void));
@


1.7
log
@ftpd: sleep for an indeterminate amount for non-existant logins
      to simulate a crypt, like login does.
Use SEEK_* not L_* and kill some 0L's used in lseek while we're there.
@
text
@d1 1
a1 1
/*	$OpenBSD: newfs.c,v 1.6 1997/01/15 23:41:33 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: newfs.c,v 1.6 1997/01/15 23:41:33 millert Exp $";
a58 1
#include <sys/file.h>
d66 1
@


1.6
log
@getopt(3) returns -1 when out of args, not EOF, whee!
@
text
@d1 1
a1 1
/*	$OpenBSD: newfs.c,v 1.5 1996/12/04 08:39:31 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: newfs.c,v 1.5 1996/12/04 08:39:31 deraadt Exp $";
d425 1
a425 1
			    L_SET) == -1)
@


1.5
log
@cooperate with -t from newfs, and rename to /sbin/newfs_lfs as the naming scheme requires
@
text
@d1 1
a1 1
/*	$OpenBSD: newfs.c,v 1.4 1996/07/01 11:02:55 downsj Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: newfs.c,v 1.4 1996/07/01 11:02:55 downsj Exp $";
d159 1
a159 1
	while ((ch = getopt(argc, argv, opstring)) != EOF)
@


1.4
log
@newlfs changes to match new LFS code; based on Lite2.
@
text
@d1 1
a1 1
/*	$OpenBSD: newfs.c,v 1.3 1996/06/23 14:31:54 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: newfs.c,v 1.3 1996/06/23 14:31:54 deraadt Exp $";
d154 1
a154 1
	opstring = "F:B:DLNS:T:a:b:c:d:e:f:i:k:l:m:n:o:p:r:s:t:u:x:";
d257 3
a259 1
		case 't':
d446 1
a446 1
		    "usage: newlfs [ -fsoptions ] special-device%s\n",
a477 1
	fprintf(stderr, "\t-t tracks/cylinder\n");
d480 1
@


1.3
log
@update rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: newfs.c,v 1.5 1996/05/16 07:17:50 thorpej Exp $	*/
d45 1
a45 1
static char sccsid[] = "@@(#)newfs.c	8.3 (Berkeley) 4/22/94";
d47 1
a47 1
static char rcsid[] = "$OpenBSD: newfs.c,v 1.5 1996/05/16 07:17:50 thorpej Exp $";
d331 1
a331 1
	exit(make_lfs(fso, lp, pp, minfree, bsize, segsize));
@


1.2
log
@libutil
@
text
@d1 1
d47 1
a47 1
static char rcsid[] = "$NetBSD: newfs.c,v 1.5 1996/05/16 07:17:50 thorpej Exp $";
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: newfs.c,v 1.4 1995/06/28 02:21:32 thorpej Exp $	*/
d46 1
a46 1
static char rcsid[] = "$NetBSD: newfs.c,v 1.4 1995/06/28 02:21:32 thorpej Exp $";
d72 1
a122 1
static int getmaxpartitions __P((void));
a432 15
}

static int
getmaxpartitions()
{
	int maxpart, mib[2];
	size_t varlen;

	mib[0] = CTL_KERN;
	mib[1] = KERN_MAXPARTITIONS;
	varlen = sizeof(maxpart);
	if (sysctl(mib, 2, &maxpart, &varlen, NULL, 0) < 0)
		fatal("getmaxpartitions: %s", strerror(errno));

	return (maxpart);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
