head	1.10;
access;
symbols
	OPENBSD_4_5:1.9.0.10
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.8
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.6
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.4
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.2
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.8.0.6
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.4
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.2
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.7.0.8
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.6.0.14
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.12
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.10
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.6.0.8
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.6.0.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.6.0.4
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.2
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.5.0.4
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.2
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.2.0.2
	OPENBSD_2_4_BASE:1.2;
locks; strict;
comment	@ * @;


1.10
date	2009.06.03.14.45.49;	author jj;	state dead;
branches;
next	1.9;

1.9
date	2006.12.15.13.04.06;	author jmc;	state Exp;
branches;
next	1.8;

1.8
date	2005.04.08.20.09.38;	author jaredy;	state Exp;
branches;
next	1.7;

1.7
date	2003.07.03.22.41.40;	author tedu;	state Exp;
branches;
next	1.6;

1.6
date	2000.01.22.20.25.02;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	98.12.21.14.19.42;	author art;	state Exp;
branches;
next	1.4;

1.4
date	98.12.21.13.45.33;	author art;	state Exp;
branches;
next	1.3;

1.3
date	98.10.28.18.08.50;	author art;	state Exp;
branches;
next	1.2;

1.2
date	98.09.05.20.00.05;	author art;	state Exp;
branches;
next	1.1;

1.1
date	98.09.05.17.33.29;	author art;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Arla client rename from xfs to nnpfs for later upgrades. Tested on various arches. ok todd@@ beck@@
@
text
@/*	$OpenBSD: mount_xfs.c,v 1.9 2006/12/15 13:04:06 jmc Exp $	*/
/*
 * Copyright (c) 1995, 1996, 1997 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 *
 * 4. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <stdio.h>
#include <sys/param.h>
#include <sys/mount.h>
#include <errno.h>
#include <err.h>
#include <stdlib.h>
#include <unistd.h>
#include <paths.h>
#include "mntopts.h"


extern char *__progname;

static const struct mntopt mopts[] = {
	MOPT_STDOPTS,
	MOPT_ASYNC,
	MOPT_SYNC,
	MOPT_UPDATE,
	MOPT_RELOAD,
	{NULL}
};

static void
usage(void)
{
	fprintf(stderr, "usage: %s [-o options] special node\n",
		__progname);
	exit(1);
}

int
main(int argc, char **argv)
{
	int ch;
	int mntflags = 0;
	char path[MAXPATHLEN];

	optind = optreset = 1;
	while ((ch = getopt(argc, argv, "o:")) != -1)
		switch (ch) {
		case 'o':
			getmntopts(optarg, mopts, &mntflags);
			break;
		case '?':
		default:
			usage();
		}

	argc -= optind;
	argv += optind;

	if (argc != 2)
		usage();

	if (realpath(argv[1], path) == NULL)
		err(1, "realpath %s", argv[1]);

	if (mount(MOUNT_XFS, path, mntflags, argv[0])) {
		if (errno == EOPNOTSUPP)
			errx(1, "Filesystem not supported by kernel");
		else
			err(1, NULL);
	}

	return 0;
}
@


1.9
log
@use "special" and "node" for synopsis/usage() here too;
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_xfs.c,v 1.8 2005/04/08 20:09:38 jaredy Exp $	*/
@


1.8
log
@Sync with recent realpath(3) changes:  on failure, don't use the second
argument "resolved", since it is undefined.

ok and help millert, otto
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_xfs.c,v 1.7 2003/07/03 22:41:40 tedu Exp $	*/
d65 1
a65 1
	fprintf(stderr, "Usage: %s [-o options] device path\n",
@


1.7
log
@use realpath() in helpers instead of doing it ourselves every time.
also fixes pr1662.  from otto moerbeek
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_xfs.c,v 1.6 2000/01/22 20:25:02 deraadt Exp $	*/
d95 1
a95 1
		err(1, "realpath %s", path);
@


1.6
log
@remove extra externs not needed because of unistd.h (rest of tree will be done later.. contact me if you want to help)
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_xfs.c,v 1.5 1998/12/21 14:19:42 art Exp $	*/
d75 1
d94 4
a97 1
	if (mount(MOUNT_XFS, argv[1], mntflags, argv[0])) {
@


1.5
log
@use MOUNT_XFS, not "xfs" as the type of filesystem to mount
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_xfs.c,v 1.4 1998/12/21 13:45:33 art Exp $	*/
a72 1
	extern int optreset;
@


1.4
log
@Nice error message when mount(2) returns EOPNOTSUPP
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_xfs.c,v 1.3 1998/10/28 18:08:50 art Exp $	*/
d94 1
a94 1
	if (mount("xfs", argv[1], mntflags, argv[0])) {
@


1.3
log
@give up the try to start afsd from mount_afs, the argument passing was too ugly
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_xfs.c,v 1.2 1998/09/05 20:00:05 art Exp $	*/
a73 1
	int error;
d94 6
a99 4
	error = mount("xfs", argv[1], mntflags, argv[0]);

	if (error != 0)
		err(1, "mount");
@


1.2
log
@make a link to mount_afs that will automagically start afsd
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_xfs.c,v 1.1 1998/09/05 17:33:29 art Exp $	*/
a76 4
	int afsd = 0;

	if (strstr(__progname, "mount_afs"))
		afsd = 1;
a98 7

#ifdef not_yet
	if (afsd) {
		execl(_PATH_AFSD, "afsd", NULL);
		err(1, "Error starting afsd:");
	}
#endif
@


1.1
log
@code for mounting xfs
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d65 1
a65 1
	fprintf(stderr, "Usage: %s [-a] [-o options] device path\n",
d77 4
a80 3
#ifdef not_yet
	int afsd = 1;
#endif
d83 1
a83 1
	while ((ch = getopt(argc, argv, "ao:")) != -1)
a87 5
#ifdef not_yey
		case 'a':
			afsd = 0;
			break;
#endif
@

