head	1.12;
access;
symbols
	OPENBSD_6_2:1.12.0.10
	OPENBSD_6_2_BASE:1.12
	OPENBSD_6_1:1.12.0.12
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.8
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.4
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.6
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.11.0.22
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.20
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.16
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.14
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.12
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.10
	OPENBSD_5_0:1.11.0.8
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.6
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.10.0.14
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.10
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.8
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.6
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.4
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.2
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.9.0.10
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.8
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.6
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.4
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.2
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.2.0.26
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.24
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.22
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.20
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2015.01.16.06.39.59;	author deraadt;	state Exp;
branches;
next	1.11;
commitid	Uu5nFG3wCl0LACBb;

1.11
date	2009.10.27.23.59.33;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2006.09.30.17.48.22;	author ray;	state Exp;
branches;
next	1.9;

1.9
date	2004.07.05.18.33.38;	author otto;	state Exp;
branches;
next	1.8;

1.8
date	2004.06.22.21.12.00;	author otto;	state Exp;
branches;
next	1.7;

1.7
date	2004.05.18.11.07.53;	author otto;	state Exp;
branches;
next	1.6;

1.6
date	2004.05.18.10.54.08;	author otto;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.11.06.22.13;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.02.20.06.15;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.11.18.20.22.45;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.06.23.14.31.10;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.43.36;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.43.36;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@/*	$OpenBSD: getmntopts.c,v 1.11 2009/10/27 23:59:33 deraadt Exp $	*/
/*	$NetBSD: getmntopts.c,v 1.3 1995/03/18 14:56:58 cgd Exp $	*/

/*-
 * Copyright (c) 1994
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/mount.h>

#include <err.h>
#include <errno.h>
#include <fstab.h>
#include <stdlib.h>
#include <string.h>
#include <limits.h>

#include "mntopts.h"

int
getmntopts(const char *optionp, const struct mntopt *m0, int *flagp)
{
	char *p, *q;
	union mntval val;
	int ret = 0;

	p = q = strdup(optionp);
	if (p == NULL)
		err(1, NULL);
	while (p != NULL) {
		ret |= getmntopt(&p, &val, m0, flagp);
	}
	free(q);
	return (ret);
}

int
getmntopt(char **optionp, union mntval *valuep, const struct mntopt *m0,
    int *flagp)
{
	const struct mntopt *m;
	char *opt, *value, *endp;
	long l;
	int inverse, negative, needval, ret = 0;

	/* Pull out the next option. */
	do {
		if (*optionp == NULL)
			return (0);
		opt = strsep(optionp, ",");
	} while (opt == NULL || *opt == '\0');

	/* Check for "no" prefix. */
	if (opt[0] == 'n' && opt[1] == 'o') {
		negative = 1;
		opt += 2;
	} else
		negative = 0;

	/* Stash the value for options with assignments in them. */
	if ((value = strchr(opt, '=')) != NULL)
		*value++ = '\0';

	/* Scan option table. */
	for (m = m0; m->m_option != NULL; ++m)
		if (strcasecmp(opt, m->m_option) == 0)
			break;

	/* Save flag, or fail if option is not recognised. */
	if (m->m_option) {
		needval = (m->m_oflags & (MFLAG_INTVAL|MFLAG_STRVAL)) != 0;
		if (needval != (value != NULL) && !(m->m_oflags & MFLAG_OPT))
			errx(1, "-o %s: option %s a value", opt,
			    needval ? "needs" : "does not need");
		inverse = (m->m_oflags & MFLAG_INVERSE) ? 1 : 0;
		if (m->m_oflags & MFLAG_SET) {
			if (negative == inverse)
				*flagp |= m->m_flag;
			else
				*flagp &= ~m->m_flag;
		}
		else if (negative == inverse)
			ret = m->m_flag;
	} else
		errx(1, "-o %s: option not supported", opt);

	/* Store the value for options with assignments in them. */
	if (value != NULL) {
		if (m->m_oflags & MFLAG_INTVAL) {
			errno = 0;
			l = strtol(value, &endp, 10);
			if (endp == value || l < 0 || l > INT_MAX ||
			    (l == LONG_MAX && errno == ERANGE))
				errx(1, "%s: illegal value '%s'",
				    opt, value);
			valuep->ival = (int)l;
		} else
			valuep->strval = value;
	} else
		memset(valuep, 0, sizeof(*valuep));
	return (ret);
}
@


1.11
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: getmntopts.c,v 1.10 2006/09/30 17:48:22 ray Exp $	*/
d33 1
a33 1
#include <sys/param.h>
d41 1
@


1.10
log
@Clear errno before calling the strtol functions.

From Paul Stoeber <x0001 at x dot de1 dot cc>.

OK deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: getmntopts.c,v 1.9 2004/07/05 18:33:38 otto Exp $	*/
a31 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)getmntopts.c	8.1 (Berkeley) 3/27/94";
#else
static char rcsid[] = "$OpenBSD: getmntopts.c,v 1.9 2004/07/05 18:33:38 otto Exp $";
#endif
#endif /* not lint */
@


1.9
log
@userquota and groupquota _optionally_ have a value.

ok pedro@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: getmntopts.c,v 1.8 2004/06/22 21:12:00 otto Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: getmntopts.c,v 1.8 2004/06/22 21:12:00 otto Exp $";
d122 1
@


1.8
log
@Rewrite of getmntopts(), making it more robust and getting rid of
the mount_nfs alternative implementation of the same function. Joint
work with millert@@. Fixes PR 3642.

ok pedro@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: getmntopts.c,v 1.7 2004/05/18 11:07:53 otto Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: getmntopts.c,v 1.7 2004/05/18 11:07:53 otto Exp $";
d104 1
a104 1
		if (needval != (value != NULL))
@


1.7
log
@Backout changes accidentally committed in prvious commit.
@
text
@d1 1
a1 1
/*	$OpenBSD: getmntopts.c,v 1.5 2003/06/11 06:22:13 deraadt Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: getmntopts.c,v 1.5 2003/06/11 06:22:13 deraadt Exp $";
d52 2
a53 2
void
getmntopts(const char *options, const struct mntopt *m0, int *flagp)
d55 3
a57 3
	const struct mntopt *m;
	int negative;
	char *opt, *optbuf, *p;
d59 2
a60 2
	/* Copy option string, since it is about to be torn asunder... */
	if ((optbuf = strdup(options)) == NULL)
d62 48
a109 25

	for (opt = optbuf; (opt = strtok(opt, ",")) != NULL; opt = NULL) {
		/* Check for "no" prefix. */
		if (opt[0] == 'n' && opt[1] == 'o') {
			negative = 1;
			opt += 2;
		} else
			negative = 0;

		/*
		 * for options with assignments in them (ie. quotas)
		 * ignore the assignment as it's handled elsewhere
		 */
		p = strchr(opt, '=');
		if (p != NULL)
			 *p = '\0';

		/* Scan option table. */
		for (m = m0; m->m_option != NULL; ++m)
			if (strcasecmp(opt, m->m_option) == 0)
				break;

		/* Save flag, or fail if option is not recognised. */
		if (m->m_option) {
			if (negative == m->m_inverse)
d113 15
d129 4
a132 4
			errx(1, "-o %s: option not supported", opt);
	}

	free(optbuf);
@


1.6
log
@Trailers are really wonders of the past. Remove them from man page and
usage. ok millert@@
@
text
@d52 2
a53 2
int
getmntopts(const char *optionp, const struct mntopt *m0, int *flagp)
d55 3
a57 3
	char *p, *q;
	union mntval val;
	int ret = 0;
d59 2
a60 2
	p = q = strdup(optionp);
	if (p == NULL)
d62 25
a86 47
	while (p != NULL) {
		ret |= getmntopt(&p, &val, m0, flagp);
	}
	free(q);
	return (ret);
}

int
getmntopt(char **optionp, union mntval *valuep, const struct mntopt *m0,
    int *flagp)
{
	const struct mntopt *m;
	char *opt, *value, *endp;
	long l;
	int negative, needval;

	/* Pull out the next option. */
	do {
		opt = strsep(optionp, ",");
	} while (opt == NULL || *opt == '\0');
	if (opt == NULL)
		return (0);

	/* Check for "no" prefix. */
	if (opt[0] == 'n' && opt[1] == 'o') {
		negative = 1;
		opt += 2;
	} else
		negative = 0;

	/* Stash the value for options with assignments in them. */
	if ((value = strchr(opt, '=')) != NULL)
		*value++ = '\0';

	/* Scan option table. */
	for (m = m0; m->m_option != NULL; ++m)
		if (strcasecmp(opt, m->m_option) == 0)
			break;

	/* Save flag, or fail if option is not recognised. */
	if (m->m_option) {
		needval = (m->m_oflags & (MFLAG_INTVAL|MFLAG_STRVAL)) != 0;
		if (needval != (value != NULL))
			errx(1, "-o %s: option %s a value", opt,
			    needval ? "needs" : "does not need");
		if (m->m_oflags & MFLAG_SET) {
			if (negative == (m->m_oflags & MFLAG_INVERSE) ? 1 : 0)
a89 13
		}
	} else
		errx(1, "-o %s: option not supported", opt);

	/* Store the value for options with assignments in them. */
	if (value != NULL) {
		if (m->m_oflags & MFLAG_INTVAL) {
			l = strtol(value, &endp, 10);
			if (endp == value || l < 0 || l > INT_MAX ||
			    (l == LONG_MAX && errno == ERANGE))
				errx(1, "%s: illegal value '%s'",
				    opt, value);
			valuep->ival = (int)l;
d91 4
a94 4
			valuep->strval = value;
	} else
		memset(valuep, 0, sizeof(*valuep));
	return ((m->m_oflags & MFLAG_SET) ? 0 : (negative ? 0 : m->m_flag));
@


1.5
log
@ansification
@
text
@d1 1
a1 1
/*	$OpenBSD: getmntopts.c,v 1.4 2003/06/02 20:06:15 millert Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: getmntopts.c,v 1.4 2003/06/02 20:06:15 millert Exp $";
d52 2
a53 2
void
getmntopts(const char *options, const struct mntopt *m0, int *flagp)
d55 3
a57 3
	const struct mntopt *m;
	int negative;
	char *opt, *optbuf, *p;
d59 2
a60 2
	/* Copy option string, since it is about to be torn asunder... */
	if ((optbuf = strdup(options)) == NULL)
d62 47
a108 25

	for (opt = optbuf; (opt = strtok(opt, ",")) != NULL; opt = NULL) {
		/* Check for "no" prefix. */
		if (opt[0] == 'n' && opt[1] == 'o') {
			negative = 1;
			opt += 2;
		} else
			negative = 0;

		/*
		 * for options with assignments in them (ie. quotas)
		 * ignore the assignment as it's handled elsewhere
		 */
		p = strchr(opt, '=');
		if (p != NULL)
			 *p = '\0';

		/* Scan option table. */
		for (m = m0; m->m_option != NULL; ++m)
			if (strcasecmp(opt, m->m_option) == 0)
				break;

		/* Save flag, or fail if option is not recognised. */
		if (m->m_option) {
			if (negative == m->m_inverse)
d112 13
d126 4
a129 4
			errx(1, "-o %s: option not supported", opt);
	}

	free(optbuf);
@


1.4
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: getmntopts.c,v 1.3 2002/11/18 20:22:45 millert Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: getmntopts.c,v 1.3 2002/11/18 20:22:45 millert Exp $";
d53 1
a53 4
getmntopts(options, m0, flagp)
	const char *options;
	const struct mntopt *m0;
	int *flagp;
@


1.3
log
@fix a typo and earn a minor style point; Michael Knudsen
@
text
@d1 1
a1 1
/*	$OpenBSD: getmntopts.c,v 1.2 1996/06/23 14:31:10 deraadt Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static char rcsid[] = "$OpenBSD: getmntopts.c,v 1.2 1996/06/23 14:31:10 deraadt Exp $";
@


1.2
log
@update rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: getmntopts.c,v 1.3 1995/03/18 14:56:58 cgd Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: getmntopts.c,v 1.3 1995/03/18 14:56:58 cgd Exp $";
d83 1
a83 1
		if (p)
@


1.1
log
@Initial revision
@
text
@d1 1
d41 1
a41 1
static char rcsid[] = "$NetBSD: getmntopts.c,v 1.3 1995/03/18 14:56:58 cgd Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
