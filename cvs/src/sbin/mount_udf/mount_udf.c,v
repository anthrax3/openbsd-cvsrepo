head	1.7;
access;
symbols
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.7.0.12
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.8
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.4
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.6
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.6.0.6
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.4
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.5.0.24
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.22
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.20
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.18
	OPENBSD_5_0:1.5.0.16
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.14
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.12
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.8
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.10
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.6
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.4
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.2
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.4.0.4
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.2
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.3.0.2
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.2.0.4
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.2
	OPENBSD_3_8_BASE:1.2;
locks; strict;
comment	@ * @;


1.7
date	2015.01.16.06.39.59;	author deraadt;	state Exp;
branches;
next	1.6;
commitid	Uu5nFG3wCl0LACBb;

1.6
date	2013.11.12.04.59.02;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2007.12.09.20.54.01;	author jmc;	state Exp;
branches;
next	1.4;

1.4
date	2006.12.15.12.59.11;	author jmc;	state Exp;
branches;
next	1.3;

1.3
date	2006.07.11.16.24.09;	author pedro;	state Exp;
branches;
next	1.2;

1.2
date	2005.04.08.20.09.38;	author jaredy;	state Exp;
branches;
next	1.1;

1.1
date	2005.03.29.17.54.52;	author pedro;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@/*	$OpenBSD: mount_udf.c,v 1.6 2013/11/12 04:59:02 deraadt Exp $	*/

/*
 * Copyright (c) 2005 Pedro Martelletto <pedro@@ambientworks.net>
 * All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/mount.h>
#include <sys/ioctl.h>
#include <sys/cdio.h>

#include <err.h>
#include <fcntl.h>
#include <unistd.h>
#include <limits.h>
#include <stdlib.h>
#include <stdio.h>

#include "mntopts.h"

const struct mntopt opts[] = { MOPT_STDOPTS, { NULL } };

u_int32_t lastblock(char *dev);
__dead void usage(void);


__dead void
usage(void)
{
	extern char *__progname;

	fprintf(stderr, "usage: %s [-o options] special node\n", __progname);

	exit(EXIT_FAILURE);
}

/* Find out media's last block by looking at the LBA of the lead-out track. */
u_int32_t
lastblock(char *dev)
{
	int fd, error;
	struct ioc_read_toc_entry t;
	struct cd_toc_entry te;

	fd = open(dev, O_RDONLY, 0);
	if (fd < 0)
		err(1, "open");

	t.address_format = CD_LBA_FORMAT;
	t.starting_track = CD_TRACK_LEADOUT;
	t.data_len = sizeof(struct cd_toc_entry);
	t.data = &te;

	error = ioctl(fd, CDIOREADTOCENTRIES, &t);

	close(fd);

	return (error == -1 ? 0 : te.addr.lba);
}

int
main(int argc, char **argv)
{
	struct udf_args args;
	char node[PATH_MAX];
	int ch, flags = 0;

	while ((ch = getopt(argc, argv, "o:")) != -1)
		switch (ch) {
		case 'o':
			getmntopts(optarg, opts, &flags);
			break;
		default:
			usage();
		}

	argc -= optind;
	argv += optind;

	if (argc != 2)
		usage();

	args.fspec = argv[0];
	args.lastblock = lastblock(argv[0]);

	if (realpath(argv[1], node) == NULL)
		err(1, "realpath %s", argv[1]);

	if (mount(MOUNT_UDF, node, flags, &args) < 0)
		err(1, "mount");

	exit(0);
}
@


1.6
log
@add a variety of missing prototypes
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_udf.c,v 1.5 2007/12/09 20:54:01 jmc Exp $	*/
d20 1
a20 1
#include <sys/param.h>
d28 1
d78 1
a78 1
	char node[MAXPATHLEN];
@


1.5
log
@update pedro's email address, at his request;
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_udf.c,v 1.4 2006/12/15 12:59:11 jmc Exp $	*/
d34 4
@


1.4
log
@sync usage();
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_udf.c,v 1.3 2006/07/11 16:24:09 pedro Exp $	*/
d4 1
a4 1
 * Copyright (c) 2005 Pedro Martelletto <pedro@@openbsd.org>
@


1.3
log
@Make the mounting process pass a hint to the kernel of where to find the VAT
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_udf.c,v 1.2 2005/04/08 20:09:38 jaredy Exp $	*/
d40 1
a40 1
	fprintf(stderr, "usage: %s special node\n", __progname);
@


1.2
log
@Sync with recent realpath(3) changes:  on failure, don't use the second
argument "resolved", since it is undefined.

ok and help millert, otto
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_udf.c,v 1.1 2005/03/29 17:54:52 pedro Exp $	*/
d22 2
d26 2
d45 24
d92 1
@


1.1
log
@mount_udf, okay deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d66 1
a66 1
		err(1, "realpath %s", node);
@

