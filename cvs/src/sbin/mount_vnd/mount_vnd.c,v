head	1.20;
access;
symbols
	OPENBSD_6_1_BASE:1.20
	OPENBSD_6_0:1.20.0.4
	OPENBSD_6_0_BASE:1.20
	OPENBSD_5_9:1.20.0.2
	OPENBSD_5_9_BASE:1.20
	OPENBSD_5_8:1.17.0.6
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.2
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.15.0.4
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.14.0.4
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.13.0.2
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.12.0.2
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.11.0.6
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.4
	OPENBSD_5_0:1.11.0.2
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.10.0.2
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.9.0.2
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.8.0.4
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.6
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.5.0.2
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.4.0.2
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.3.0.2
	OPENBSD_4_2_BASE:1.3;
locks; strict;
comment	@ * @;


1.20
date	2016.01.24.06.32.33;	author mmcc;	state Exp;
branches;
next	1.19;
commitid	ldMIqXFx4EY1zU6h;

1.19
date	2016.01.24.01.20.44;	author mmcc;	state Exp;
branches;
next	1.18;
commitid	2MMc39aeRI0my424;

1.18
date	2016.01.24.01.02.24;	author gsoares;	state Exp;
branches;
next	1.17;
commitid	2X5r9oyNc3JPmLA1;

1.17
date	2015.01.16.06.39.59;	author deraadt;	state Exp;
branches;
next	1.16;
commitid	Uu5nFG3wCl0LACBb;

1.16
date	2014.10.29.21.30.10;	author tedu;	state Exp;
branches;
next	1.15;
commitid	hxguZrmoVuYZlWSK;

1.15
date	2014.05.30.16.14.19;	author tedu;	state Exp;
branches;
next	1.14;

1.14
date	2013.11.11.23.08.02;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2013.04.23.19.57.02;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2012.09.06.19.41.59;	author tedu;	state Exp;
branches;
next	1.11;

1.11
date	2011.04.18.16.52.11;	author thib;	state Exp;
branches;
next	1.10;

1.10
date	2011.01.29.03.43.13;	author tedu;	state Exp;
branches;
next	1.9;

1.9
date	2010.04.12.01.44.08;	author tedu;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.03.23.24.25;	author krw;	state Exp;
branches;
next	1.7;

1.7
date	2008.08.15.14.41.21;	author jsing;	state Exp;
branches;
next	1.6;

1.6
date	2008.08.14.17.10.29;	author jsing;	state Exp;
branches;
next	1.5;

1.5
date	2008.06.14.01.47.27;	author grunk;	state Exp;
branches;
next	1.4;

1.4
date	2007.09.29.07.10.09;	author fkr;	state Exp;
branches;
next	1.3;

1.3
date	2007.05.27.04.13.40;	author jmc;	state Exp;
branches;
next	1.2;

1.2
date	2007.05.27.03.19.15;	author ray;	state Exp;
branches;
next	1.1;

1.1
date	2007.05.26.03.37.45;	author grunk;	state Exp;
branches;
next	;


desc
@@


1.20
log
@fix 1.18 by removing extra argument from explicit_bzero calls

from kili@@
@
text
@/*	$OpenBSD: mount_vnd.c,v 1.19 2016/01/24 01:20:44 mmcc Exp $	*/
/*
 * Copyright (c) 1993 University of Utah.
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * from: Utah $Hdr: vnconfig.c 1.1 93/12/15$
 *
 *	@@(#)vnconfig.c	8.1 (Berkeley) 12/15/93
 */

#include <sys/param.h>	/* DEV_BSIZE */
#include <sys/ioctl.h>
#include <sys/mount.h>
#include <sys/stat.h>
#include <sys/disklabel.h>

#include <dev/vndioctl.h>

#include <blf.h>
#include <err.h>
#include <errno.h>
#include <fcntl.h>
#include <readpassphrase.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <limits.h>
#include <util.h>

#define DEFAULT_VND	"vnd0"

#define VND_CONFIG	1
#define VND_UNCONFIG	2
#define VND_GET		3

int verbose = 0;
int run_mount_vnd = 0;

__dead void	 usage(void);
int		 config(char *, char *, int, struct disklabel *, char *,
		     size_t);
int		 getinfo(const char *);
char		*get_pkcs_key(char *, char *);

int
main(int argc, char **argv)
{
	int	 ch, rv, action, opt_c, opt_k, opt_K, opt_l, opt_u;
	char	*key, *mntopts, *rounds, *saltopt;
	size_t	 keylen = 0;
	extern char *__progname;
	struct disklabel *dp = NULL;

	if (strcasecmp(__progname, "mount_vnd") == 0)
		run_mount_vnd = 1;

	opt_c = opt_k = opt_K = opt_l = opt_u = 0;
	key = mntopts = rounds = saltopt = NULL;
	action = VND_CONFIG;

	while ((ch = getopt(argc, argv, "ckK:lo:S:t:uv")) != -1) {
		switch (ch) {
		case 'c':
			opt_c = 1;
			break;
		case 'k':
			opt_k = 1;
			break;
		case 'K':
			opt_K = 1;
			rounds = optarg;
			break;
		case 'l':
			opt_l = 1;
			break;
		case 'o':
			mntopts = optarg;
			break;
		case 'S':
			saltopt = optarg;
			break;
		case 't':
			dp = getdiskbyname(optarg);
			if (dp == NULL)
				errx(1, "unknown disk type: %s", optarg);
			break;
		case 'u':
			opt_u = 1;
			break;
		case 'v':
			verbose = 1;
			break;
		default:
			usage();
			/* NOTREACHED */
		}
	}
	argc -= optind;
	argv += optind;

	if (opt_c + opt_l + opt_u > 1)
		errx(1, "-c, -l and -u are mutually exclusive options");

	if (opt_l)
		action = VND_GET;
	else if (opt_u)
		action = VND_UNCONFIG;
	else
		action = VND_CONFIG;	/* default behavior */

	if (saltopt && (!opt_K))
		errx(1, "-S only makes sense when used with -K");

	if (action == VND_CONFIG && argc == 2) {
		int ind_raw, ind_reg;

		if (opt_k || opt_K) {
			fprintf(stderr,
			    "WARNING: Consider using softraid crypto.\n");
		}
		if (opt_k) {
			if (opt_K)
				errx(1, "-k and -K are mutually exclusive");
			key = getpass("Encryption key: ");
			if (key == NULL || (keylen = strlen(key)) == 0)
				errx(1, "Need an encryption key");
		} else if (opt_K) {
			key = get_pkcs_key(rounds, saltopt);
			keylen = BLF_MAXUTILIZED;
		}

		/* fix order of arguments. */
		if (run_mount_vnd) {
			ind_raw = 1;
			ind_reg = 0;
		} else {
			ind_raw = 0;
			ind_reg = 1;
		}
		rv = config(argv[ind_raw], argv[ind_reg], action, dp, key,
		    keylen);
	} else if (action == VND_UNCONFIG && argc == 1)
		rv = config(argv[0], NULL, action, NULL, NULL, 0);
	else if (action == VND_GET)
		rv = getinfo(argc ? argv[0] : NULL);
	else
		usage();

	exit(rv);
}

char *
get_pkcs_key(char *arg, char *saltopt)
{
	char		 passphrase[128] = {'\0'};
	char		 saltbuf[128] = {'\0'}, saltfilebuf[PATH_MAX];
	char		*key = NULL;
	char		*saltfile;
	const char	*errstr;
	int		 rounds;

	rounds = strtonum(arg, 1000, INT_MAX, &errstr);
	if (errstr)
		err(1, "rounds: %s", errstr);
	if (readpassphrase("Encryption key: ", passphrase, sizeof(passphrase),
	    RPP_REQUIRE_TTY) == NULL)
		errx(1, "Unable to read passphrase");
	if (saltopt)
		saltfile = saltopt;
	else {
		printf("Salt file: ");
		fflush(stdout);
		saltfile = fgets(saltfilebuf, sizeof(saltfilebuf), stdin);
		if (saltfile)
			saltfile[strcspn(saltfile, "\n")] = '\0';
	}
	if (!saltfile || saltfile[0] == '\0')
		warnx("Skipping salt file, insecure");
	else {
		int fd;

		fd = open(saltfile, O_RDONLY);
		if (fd == -1) {
			int *s;

			fprintf(stderr, "Salt file not found, attempting to "
			    "create one\n");
			fd = open(saltfile, O_RDWR|O_CREAT|O_EXCL, 0600);
			if (fd == -1)
				err(1, "Unable to create salt file: '%s'",
				    saltfile);
			for (s = (int *)saltbuf;
			    s < (int *)(saltbuf + sizeof(saltbuf)); s++)
				*s = arc4random();
			if (write(fd, saltbuf, sizeof(saltbuf))
			    != sizeof(saltbuf))
				err(1, "Unable to write salt file: '%s'",
				    saltfile);
			fprintf(stderr, "Salt file created as '%s'\n",
			    saltfile);
		} else {
			if (read(fd, saltbuf, sizeof(saltbuf))
			    != sizeof(saltbuf))
				err(1, "Unable to read salt file: '%s'",
				    saltfile);
		}
		close(fd);
	}
	if ((key = calloc(1, BLF_MAXUTILIZED)) == NULL)
		err(1, NULL);
	if (pkcs5_pbkdf2(passphrase, sizeof(passphrase), saltbuf,
	    sizeof (saltbuf), key, BLF_MAXUTILIZED, rounds))
		errx(1, "pkcs5_pbkdf2 failed");
	explicit_bzero(passphrase, sizeof(passphrase));

	return (key);
}

int
getinfo(const char *vname)
{
	int vd, print_all = 0;
	struct vnd_user vnu;

	if (vname == NULL) {
		vname = DEFAULT_VND;
		print_all = 1;
	}

	vd = opendev((char *)vname, O_RDONLY, OPENDEV_PART, NULL);
	if (vd < 0)
		err(1, "open: %s", vname);

	vnu.vnu_unit = -1;

query:
	if (ioctl(vd, VNDIOCGET, &vnu) == -1) {
		if (print_all && errno == ENXIO && vnu.vnu_unit > 0) {
			close(vd);
			return (0);
		} else {
			err(1, "ioctl: %s", vname);
		}
	}

	fprintf(stdout, "vnd%d: ", vnu.vnu_unit);

	if (!vnu.vnu_ino)
		fprintf(stdout, "not in use\n");
	else
		fprintf(stdout, "covering %s on %s, inode %llu\n",
		    vnu.vnu_file, devname(vnu.vnu_dev, S_IFBLK),
		    (unsigned long long)vnu.vnu_ino);

	if (print_all) {
		vnu.vnu_unit++;
		goto query;
	}

	close(vd);

	return (0);
}

int
config(char *dev, char *file, int action, struct disklabel *dp, char *key,
    size_t keylen)
{
	struct vnd_ioctl vndio;
	char *rdev;
	int fd, rv = -1;

	if ((fd = opendev(dev, O_RDONLY, OPENDEV_PART, &rdev)) < 0) {
		err(4, "%s", rdev);
		goto out;
	}

	vndio.vnd_file = file;
	vndio.vnd_secsize = (dp && dp->d_secsize) ? dp->d_secsize : DEV_BSIZE;
	vndio.vnd_nsectors = (dp && dp->d_nsectors) ? dp->d_nsectors : 100;
	vndio.vnd_ntracks = (dp && dp->d_ntracks) ? dp->d_ntracks : 1;
	vndio.vnd_key = (u_char *)key;
	vndio.vnd_keylen = keylen;

	/*
	 * Clear (un-configure) the device
	 */
	if (action == VND_UNCONFIG) {
		rv = ioctl(fd, VNDIOCCLR, &vndio);
		if (rv)
			warn("VNDIOCCLR");
		else if (verbose)
			printf("%s: cleared\n", dev);
	}
	/*
	 * Configure the device
	 */
	if (action == VND_CONFIG) {
		rv = ioctl(fd, VNDIOCSET, &vndio);
		if (rv)
			warn("VNDIOCSET");
		else if (verbose)
			printf("%s: %llu bytes on %s\n", dev, vndio.vnd_size,
			    file);
	}

	close(fd);
	fflush(stdout);
 out:
	if (key)
		explicit_bzero(key, keylen);
	return (rv < 0);
}

__dead void
usage(void)
{
	extern char *__progname;

	if (run_mount_vnd)
		(void)fprintf(stderr,
		    "usage: mount_vnd [-k] [-K rounds] [-o options] "
		    "[-S saltfile] [-t disktype]\n"
		    "\t\t image vnd_dev\n");
	else
		(void)fprintf(stderr,
		    "usage: %s [-ckluv] [-K rounds] [-S saltfile] "
		    "[-t disktype] vnd_dev image\n", __progname);

	exit(1);
}
@


1.19
log
@Immediately zero the stack-allocated buffers for the passphrase and salt rather
than doing so conditionally later on. These were false positives during an
explicit_bzero audit.

ok gsoares@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_vnd.c,v 1.18 2016/01/24 01:02:24 gsoares Exp $	*/
d244 1
a244 1
	explicit_bzero(passphrase, 0, sizeof(passphrase));
d341 1
a341 1
		explicit_bzero(key, 0, keylen);
@


1.18
log
@use explicit_bzero(3) for clearing sensitive data

OK millert@@ mmcc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_vnd.c,v 1.17 2015/01/16 06:39:59 deraadt Exp $	*/
d185 2
a186 2
	char		 passphrase[128];
	char		 saltbuf[128], saltfilebuf[PATH_MAX];
a194 1
	bzero(passphrase, sizeof(passphrase));
d207 1
a207 1
	if (!saltfile || saltfile[0] == '\0') {
d209 1
a209 2
		memset(saltbuf, 0, sizeof(saltbuf));
	} else {
@


1.17
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_vnd.c,v 1.16 2014/10/29 21:30:10 tedu Exp $	*/
d246 1
a246 1
	memset(passphrase, 0, sizeof(passphrase));
d343 1
a343 1
		memset(key, 0, keylen);
@


1.16
log
@dial down the direness of the warning; vnd isn't going anywhere yet
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_vnd.c,v 1.15 2014/05/30 16:14:19 tedu Exp $	*/
d40 1
a40 1
#include <sys/param.h>
d57 1
@


1.15
log
@WARNING: Encrypted vnd is insecure.
Migrate your data to softraid before 5.7.
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_vnd.c,v 1.14 2013/11/11 23:08:02 deraadt Exp $	*/
d147 2
a148 2
			fprintf(stderr, "WARNING: Encrypted vnd is insecure.\n"
			    "Migrate your data to softraid before 5.7.\n");
@


1.14
log
@unused variable
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_vnd.c,v 1.13 2013/04/23 19:57:02 deraadt Exp $	*/
d146 4
@


1.13
log
@simple repair for large ino_t
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_vnd.c,v 1.12 2012/09/06 19:41:59 tedu Exp $	*/
a79 1
	const char *errstr;
@


1.12
log
@move pkcs5_pbkdf5 function to libutil so everybody can play with it
ok deraadt jsing matthew
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_vnd.c,v 1.11 2011/04/18 16:52:11 thib Exp $	*/
d279 3
a281 2
		fprintf(stdout, "covering %s on %s, inode %d\n", vnu.vnu_file,
		    devname(vnu.vnu_dev, S_IFBLK), vnu.vnu_ino);
@


1.11
log
@Deprecate vnds in favour of svnds.

In effect, this removes the "old" vndX nodes, and renames
the svndX nodes to vndX.

Old svndX nodes will still continue to work though, for now.

Cleanup accordingly.

ok deraadt@@, todd@@
comments and ok on the man page bits from jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_vnd.c,v 1.10 2011/01/29 03:43:13 tedu Exp $	*/
a57 2

#include "pbkdf2.h"
@


1.10
log
@no need for fopen, when opendev gives us a perfectly good fd.
from "maurice"
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_vnd.c,v 1.9 2010/04/12 01:44:08 tedu Exp $	*/
d61 1
a61 1
#define DEFAULT_VND	"svnd0"
@


1.9
log
@remove pkcs5 implementation here and use the one from bioctl.  no libcrypto
dependency.  and some other tweaks.  from mikeb.  ok djm
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_vnd.c,v 1.8 2008/09/03 23:24:25 krw Exp $	*/
a298 1
	FILE *f;
d300 1
a300 1
	int rv = -1;
d302 1
a302 1
	if (opendev(dev, O_RDONLY, OPENDEV_PART, &rdev) < 0)
a303 3
	f = fopen(rdev, "r");
	if (f == NULL) {
		warn("%s", rdev);
d306 1
d318 1
a318 1
		rv = ioctl(fileno(f), VNDIOCCLR, &vndio);
d328 1
a328 1
		rv = ioctl(fileno(f), VNDIOCSET, &vndio);
d336 1
a336 1
	fclose(f);
@


1.8
log
@Replace -s (sector size) option with more general -t (disktype)
option which makes the vnd device emulate the geometry of the
specified disktab(5) entry. No change in behaviour or geometry
unless -t is used.

API for vnd configuration ioctl (VNDIOCSET) changes, so mount_vnd
must be in sync with kernel.

Tested & ok jsing@@ 'Lovely' deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_vnd.c,v 1.7 2008/08/15 14:41:21 jsing Exp $	*/
d52 1
a52 1
#include <pwd.h>
d59 1
a59 1
#include "pkcs5_pbkdf2.h"
d183 3
a185 1
	char		 keybuf[128], saltbuf[128], saltfilebuf[PATH_MAX];
a186 1
	char		*key = NULL;
d193 4
a196 4
	key = getpass("Encryption key: ");
	if (!key || strlen(key) == 0)
		errx(1, "Need an encryption key");
	strncpy(keybuf, key, sizeof(keybuf));
d216 2
a217 1
			fprintf(stderr, "Salt file not found, attempting to create one\n");
d227 4
a230 2
				err(1, "Unable to write salt file: '%s'", saltfile);
			fprintf(stderr, "Salt file created as '%s'\n", saltfile);
d234 2
a235 1
				err(1, "Unable to read salt file: '%s'", saltfile);
d239 4
a242 2
	if (pkcs5_pbkdf2((u_int8_t**)&key, BLF_MAXUTILIZED, keybuf,
	    sizeof(keybuf), saltbuf, sizeof(saltbuf), rounds, 0))
d244 1
@


1.7
log
@Add -s option to usage().

Prompted by jmc@@

ok jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_vnd.c,v 1.4 2007/09/29 07:10:09 fkr Exp $	*/
d44 1
d71 2
a72 1
int		 config(char *, char *, int, size_t, char *, size_t);
d81 1
a81 1
	size_t	 keylen = 0, secsize = 0;
d84 1
d93 1
a93 1
	while ((ch = getopt(argc, argv, "ckK:lo:s:S:uv")) != -1) {
d114 4
a117 4
		case 's':
			secsize = strtonum(optarg, 512, 65536, &errstr);
			if (errstr || (secsize & 0x1ff) != 0)
				errx(1, "invalid sector size: %s", optarg);
d168 1
a168 1
		rv = config(argv[ind_raw], argv[ind_reg], action, secsize, key,
d171 1
a171 1
		rv = config(argv[0], NULL, action, 0, NULL, 0);
d287 1
a287 1
config(char *dev, char *file, int action, size_t secsize, char *key,
d303 3
a305 1
	vndio.vnd_secsize = secsize;
d347 1
a347 1
		    "[-S saltfile] [-s secsize]\n"
d352 1
a352 1
		    "[-s secsize] vnd_dev image\n", __progname);
@


1.6
log
@Allow the sector size to be specified by the user when configuring a
vnd(4) device, via a new -s option to vnconfig/mount_vnd. This allows us
to create disklabels and file systems that are suitable for use on
devices that have a non-512 byte sector size (eg. CDROMs).

With help from krw@@ and feedback from pedro@@.

ok krw@@, pedro@@
@
text
@d341 3
a343 2
		    "usage: %s [-k] [-K rounds] [-o options] "
		    "[-S saltfile] image vnd_dev\n", __progname);
d346 2
a347 2
		    "usage: %s [-ckluv] [-K rounds] [-S saltfile] vnd_dev "
		    "image\n", __progname);
@


1.5
log
@finish djm@@'s job of making mount_vnd -Wall clean, and mark this in the
Makefile.

ok djm@@, "get the M's out of my tree" deraadt@@
@
text
@d70 1
a70 1
int		 config(char *, char *, int, char *, size_t);
d79 2
a80 1
	size_t	 keylen = 0;
d90 1
a90 1
	while ((ch = getopt(argc, argv, "ckK:lo:S:uv")) != -1) {
d111 5
d165 2
a166 1
		rv = config(argv[ind_raw], argv[ind_reg], action, key, keylen);
d168 1
a168 1
		rv = config(argv[0], NULL, action, NULL, 0);
d284 2
a285 1
config(char *dev, char *file, int action, char *key, size_t keylen)
d300 1
@


1.4
log
@default to svnds now to accomodate change in the vnd driver.
from Piotr Durlej with man-page nits from me
tested henning@@, krw@@, thib@@ and myself.
ok thib@@, grunk@@, krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_vnd.c,v 1.3 2007/05/27 04:13:40 jmc Exp $	*/
d282 1
a282 1
	int rv;
a288 1
		rv = -1;
@


1.3
log
@sync usage(); ok grunk
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_vnd.c,v 1.2 2007/05/27 03:19:15 ray Exp $	*/
d60 1
a60 1
#define DEFAULT_VND	"vnd0"
@


1.2
log
@Prevent buf[-1] access if strlen(buf) == 0.

Simplify some if-else statements while here.

OK grunk@@ and tedu@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_vnd.c,v 1.1 2007/05/26 03:37:45 grunk Exp $	*/
d333 1
a333 1
		    "usage: %s [-ckluv] [-o mntopts] [-K rounds] "
@


1.1
log
@make mount_vnd a C program by pulling in the vnconfig(8) source and adding
a mount_vnd(8) interface to it.  merge manpages as well.
next goal is to have this here completely replace the usr.sbin/vnconfig
directory.

prodded by many, manpage discussion and help jmc@@, "go ahead" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vnconfig.c,v 1.27 2007/04/10 15:28:55 tedu Exp $	*/
d192 2
d195 1
a195 1
	if (!saltfile || saltfile[0] == '\n') {
d197 1
a197 1
		saltfile = NULL;
a198 5
		size_t len = strlen(saltfile);
		if (saltfile[len - 1] == '\n')
			saltfile[len - 1] = 0;
	}
	if (saltfile) {
a222 2
	} else {
		memset(saltbuf, 0, sizeof(saltbuf));
@

