head	1.18;
access;
symbols
	OPENBSD_6_2:1.18.0.10
	OPENBSD_6_2_BASE:1.18
	OPENBSD_6_1:1.18.0.12
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.18.0.8
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.4
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.18.0.6
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.2
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.16.0.16
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.14
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.10
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.8
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.6
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.4
	OPENBSD_5_0:1.16.0.2
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.14.0.6
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.4
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.2
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.13.0.8
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.4
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.2
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.12.0.8
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.6
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.4
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.2
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.10.0.4
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.2
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.8.0.8
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.7.0.4
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.3.0.10
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.8
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.6
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.4
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.18
date	2015.01.20.18.22.21;	author deraadt;	state Exp;
branches;
next	1.17;
commitid	F55lwc3gS4GN2mLs;

1.17
date	2015.01.16.06.39.57;	author deraadt;	state Exp;
branches;
next	1.16;
commitid	Uu5nFG3wCl0LACBb;

1.16
date	2011.05.08.14.38.40;	author otto;	state Exp;
branches;
next	1.15;

1.15
date	2011.04.16.16.37.21;	author otto;	state Exp;
branches;
next	1.14;

1.14
date	2009.10.27.23.59.32;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2008.06.10.23.10.29;	author otto;	state Exp;
branches;
next	1.12;

1.12
date	2006.03.22.20.24.32;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2006.03.12.02.28.28;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2005.04.16.18.15.41;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2005.04.16.17.37.25;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.02.20.06.15;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.08.23.09.09.04;	author gluk;	state Exp;
branches;
next	1.6;

1.6
date	2001.11.05.07.39.16;	author mpech;	state Exp;
branches;
next	1.5;

1.5
date	2001.07.07.18.26.12;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.28.21.22.47;	author gluk;	state Exp;
branches;
next	1.3;

1.3
date	99.03.01.07.45.18;	author d;	state Exp;
branches
	1.3.10.1;
next	1.2;

1.2
date	96.06.23.14.30.32;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.43.32;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.43.32;	author deraadt;	state Exp;
branches;
next	;

1.3.10.1
date	2001.06.06.04.06.55;	author jason;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Adjust <sys/param.h> comments regarding use of use of MAXFRAG, or
delete <sys/param.h> if now possible
ok guenther
@
text
@/*	$OpenBSD: pass3.c,v 1.17 2015/01/16 06:39:57 deraadt Exp $	*/
/*	$NetBSD: pass3.c,v 1.8 1995/03/18 14:55:54 cgd Exp $	*/

/*
 * Copyright (c) 1980, 1986, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/time.h>
#include <ufs/ufs/dinode.h>
#include <ufs/ffs/fs.h>
#include <stdio.h>
#include "fsck.h"
#include "extern.h"

static int info_pos;

static int
pass3_info(char *buf, size_t buflen)
{
	return (snprintf(buf, buflen, "phase 3, directory %d/%ld",
	    info_pos, inplast) > 0);
}

void
pass3(void)
{
	struct inoinfo **inpp, *inp, *pinp;
	ino_t orphan;
	int loopcnt;

	info_fn = pass3_info;
	for (inpp = &inpsort[inplast - 1]; inpp >= inpsort; inpp--) {
		info_pos++;
		inp = *inpp;
		if (inp->i_number == ROOTINO ||
		    (inp->i_parent != 0 && GET_ISTATE(inp->i_number) != DSTATE))
			continue;
		if (GET_ISTATE(inp->i_number) == DCLEAR)
			continue;
		for (loopcnt = 0; ; loopcnt++) {
			orphan = inp->i_number;
			if (inp->i_parent == 0 ||
			    GET_ISTATE(inp->i_parent) != DSTATE ||
			    loopcnt > numdirs)
				break;
			inp = getinoinfo(inp->i_parent);
		}
		if (linkup(orphan, inp->i_dotdot)) {
			inp->i_parent = inp->i_dotdot = lfdir;
			ILNCOUNT(lfdir)--;
			pinp = getinoinfo(inp->i_parent);
			inp->i_sibling = pinp->i_child;
			pinp->i_child = inp;
			SET_ISTATE(orphan, GET_ISTATE(inp->i_parent));
		}
		propagate(orphan);
	}
	info_fn = NULL;
}
@


1.17
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: pass3.c,v 1.16 2011/05/08 14:38:40 otto Exp $	*/
a32 1
#include <sys/param.h>	/* MAXFRAG */
@


1.16
log
@Small memory optimization from NetBSD; ok krw@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pass3.c,v 1.15 2011/04/16 16:37:21 otto Exp $	*/
d33 1
a33 1
#include <sys/param.h>
@


1.15
log
@Blend in some code from netbsd and freebsd that reduces memory consumption
and speeds things up in a lot of cases.
Prompted by Amit Kulkarni; ok krw@@ on a slighly diffrenent incarnation
@
text
@d1 1
a1 1
/*	$OpenBSD: pass3.c,v 1.14 2009/10/27 23:59:32 deraadt Exp $	*/
a77 1
			inp->i_parentp = pinp;
@


1.14
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: pass3.c,v 1.13 2008/06/10 23:10:29 otto Exp $	*/
d76 1
a76 1
			lncntp[lfdir]--;
@


1.13
log
@reduce mem usage by about 20% by packing state and type of an inode in a single
byte. Original diff by drahn@@; twists by me; ok millert@@ thib@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pass3.c,v 1.12 2006/03/22 20:24:32 deraadt Exp $	*/
a31 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)pass3.c	8.1 (Berkeley) 6/5/93";
#else
static const char rcsid[] = "$OpenBSD: pass3.c,v 1.12 2006/03/22 20:24:32 deraadt Exp $";
#endif
#endif /* not lint */
@


1.12
log
@earlier asprintf diff caused malloc in signal handler.  clarify the
code a bit more so that this mistake will not be done again
@
text
@d1 1
a1 1
/*	$OpenBSD: pass3.c,v 1.10 2005/04/16 18:15:41 millert Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: pass3.c,v 1.10 2005/04/16 18:15:41 millert Exp $";
d70 1
a70 1
		    (inp->i_parent != 0 && statemap[inp->i_number] != DSTATE))
d72 1
a72 1
		if (statemap[inp->i_number] == DCLEAR)
d77 1
a77 1
			    statemap[inp->i_parent] != DSTATE ||
d89 1
a89 1
			statemap[orphan] = statemap[inp->i_parent];
@


1.11
log
@use asprintf instead of a static buffer; dhill, tested by pedro
@
text
@d52 1
a52 1
pass3_info(char *buf)
d54 1
a54 1
	return (asprintf(&buf, "phase 3, directory %d/%ld",
@


1.10
log
@Since the return value from the *_info functions is only actually used as a
boolean, make it so.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pass3.c,v 1.9 2005/04/16 17:37:25 deraadt Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: pass3.c,v 1.9 2005/04/16 17:37:25 deraadt Exp $";
d52 1
a52 1
pass3_info(char *buf, int buflen)
d54 1
a54 1
	return (snprintf(buf, buflen, "phase 3, directory %d/%ld",
@


1.9
log
@while snprintf and strlcpy and strlcat have this nice >buflen API (and the
-1 mess as well), it is probably not wise to make other functions do the same
thing.  make them return strlen().  ok uwe marco
@
text
@d1 1
a1 1
/*	$OpenBSD: pass3.c,v 1.8 2003/06/02 20:06:15 millert Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: pass3.c,v 1.8 2003/06/02 20:06:15 millert Exp $";
d54 2
a55 4
	if (snprintf(buf, buflen, "phase 3, directory %d/%ld",
	    info_pos, inplast) > 0)
		return (strlen(buf));
	return (0);
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: pass3.c,v 1.7 2002/08/23 09:09:04 gluk Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: pass3.c,v 1.7 2002/08/23 09:09:04 gluk Exp $";
d54 4
a57 2
	return snprintf(buf, buflen, "phase 3, directory %d/%ld",
		info_pos, inplast);
@


1.7
log
@- Convert function definitions to new style
- eliminate trailing whitespace
- remove casts that aren't needed.
- make rcsid strings const, for -Wall compilation.

 from tedu <grendel@@zeitbombe.org>
@
text
@d1 1
a1 1
/*	$OpenBSD: pass3.c,v 1.6 2001/11/05 07:39:16 mpech Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: pass3.c,v 1.6 2001/11/05 07:39:16 mpech Exp $";
@


1.6
log
@kill more registers;

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: pass3.c,v 1.5 2001/07/07 18:26:12 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: pass3.c,v 1.5 2001/07/07 18:26:12 deraadt Exp $";
d56 1
a56 3
pass3_info(buf, buflen)
	char *buf;
	int buflen;
d63 1
a63 1
pass3()
@


1.5
log
@major -Wall cleanup, almost complete
@
text
@d1 1
a1 1
/*	$OpenBSD: pass3.c,v 1.4 2001/05/28 21:22:47 gluk Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: pass3.c,v 1.4 2001/05/28 21:22:47 gluk Exp $";
d67 1
a67 1
	register struct inoinfo **inpp, *inp, *pinp;
@


1.4
log
@Fix directory state tracking.

- If the lost+found directory is created by fsck, it will do a cacheino()
  which sets the inoinfo's i_parent and i_dotdot to 0, but they never get
  set to ROOTINO. This means that propagate will never find lost+found and
  its descendents, subdirectories will remain DSTATE (instead of DFOUND)
  even though they are correctly linked in, and pass4.c will try to
  clear them unsuccessfully, thinking that there is no link count from the
  DSTATE directory's parent. The result is that you need to run fsck twice
  and get "EXTRANEOUS HARD LINK TO DIRECTORY" error (which are unexpected
  and fatal when running in preen mode). The fix is to set i_parent and
  i_dotdot to "parent" after the second cacheino() call in dir.c:allocdir().
  From NetBSD via FreeBSD.
- modify propagate() so it be able to start from any point in the tree.
- minor tweaks to get more generality in state propagation.

In other words fsck doesn't leave unremovable directories anymore.

costa@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: pass3.c,v 1.3 1999/03/01 07:45:18 d Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: pass3.c,v 1.3 1999/03/01 07:45:18 d Exp $";
d60 1
a60 1
	return snprintf(buf, buflen, "phase 3, directory %d/%d",
@


1.3
log
@SIGINFO support
@
text
@d1 1
a1 1
/*	$OpenBSD: pass3.c,v 1.2 1996/06/23 14:30:32 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: pass3.c,v 1.2 1996/06/23 14:30:32 deraadt Exp $";
d67 1
a67 1
	register struct inoinfo **inpp, *inp;
d76 1
a76 1
		    !(inp->i_parent == 0 || statemap[inp->i_number] == DSTATE))
d88 10
a97 5
		(void)linkup(orphan, inp->i_dotdot);
		inp->i_parent = inp->i_dotdot = lfdir;
		lncntp[lfdir]--;
		statemap[orphan] = DFOUND;
		propagate();
@


1.3.10.1
log
@Pull in patch from current:
Fix (gluk):
Fix directory state tracking.

- If the lost+found directory is created by fsck, it will do a cacheino()
  which sets the inoinfo's i_parent and i_dotdot to 0, but they never get
  set to ROOTINO. This means that propagate will never find lost+found and
  its descendents, subdirectories will remain DSTATE (instead of DFOUND)
  even though they are correctly linked in, and pass4.c will try to
  clear them unsuccessfully, thinking that there is no link count from the
  DSTATE directory's parent. The result is that you need to run fsck twice
  and get "EXTRANEOUS HARD LINK TO DIRECTORY" error (which are unexpected
  and fatal when running in preen mode). The fix is to set i_parent and
  i_dotdot to "parent" after the second cacheino() call in dir.c:allocdir().
  From NetBSD via FreeBSD.
- modify propagate() so it be able to start from any point in the tree.
- minor tweaks to get more generality in state propagation.

In other words fsck doesn't leave unremovable directories anymore.

costa@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: pass3.c,v 1.3 1999/03/01 07:45:18 d Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: pass3.c,v 1.3 1999/03/01 07:45:18 d Exp $";
d67 1
a67 1
	register struct inoinfo **inpp, *inp, *pinp;
d76 1
a76 1
		    (inp->i_parent != 0 && statemap[inp->i_number] != DSTATE))
d88 5
a92 10
		if (linkup(orphan, inp->i_dotdot)) {
			inp->i_parent = inp->i_dotdot = lfdir;
			lncntp[lfdir]--;
			pinp = getinoinfo(inp->i_parent);
			inp->i_parentp = pinp;
			inp->i_sibling = pinp->i_child;
			pinp->i_child = inp;
			statemap[orphan] = statemap[inp->i_parent];
		}
		propagate(orphan);
@


1.2
log
@update rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: pass3.c,v 1.8 1995/03/18 14:55:54 cgd Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: pass3.c,v 1.8 1995/03/18 14:55:54 cgd Exp $";
d49 1
d53 11
d71 1
d73 1
d94 1
@


1.1
log
@Initial revision
@
text
@d1 1
d41 1
a41 1
static char rcsid[] = "$NetBSD: pass3.c,v 1.8 1995/03/18 14:55:54 cgd Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
