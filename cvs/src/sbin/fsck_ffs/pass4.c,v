head	1.25;
access;
symbols
	OPENBSD_6_2:1.25.0.2
	OPENBSD_6_2_BASE:1.25
	OPENBSD_6_1:1.24.0.12
	OPENBSD_6_1_BASE:1.24
	OPENBSD_6_0:1.24.0.8
	OPENBSD_6_0_BASE:1.24
	OPENBSD_5_9:1.24.0.4
	OPENBSD_5_9_BASE:1.24
	OPENBSD_5_8:1.24.0.6
	OPENBSD_5_8_BASE:1.24
	OPENBSD_5_7:1.24.0.2
	OPENBSD_5_7_BASE:1.24
	OPENBSD_5_6:1.22.0.8
	OPENBSD_5_6_BASE:1.22
	OPENBSD_5_5:1.22.0.6
	OPENBSD_5_5_BASE:1.22
	OPENBSD_5_4:1.22.0.2
	OPENBSD_5_4_BASE:1.22
	OPENBSD_5_3:1.20.0.8
	OPENBSD_5_3_BASE:1.20
	OPENBSD_5_2:1.20.0.6
	OPENBSD_5_2_BASE:1.20
	OPENBSD_5_1_BASE:1.20
	OPENBSD_5_1:1.20.0.4
	OPENBSD_5_0:1.20.0.2
	OPENBSD_5_0_BASE:1.20
	OPENBSD_4_9:1.19.0.6
	OPENBSD_4_9_BASE:1.19
	OPENBSD_4_8:1.19.0.4
	OPENBSD_4_8_BASE:1.19
	OPENBSD_4_7:1.19.0.2
	OPENBSD_4_7_BASE:1.19
	OPENBSD_4_6:1.18.0.8
	OPENBSD_4_6_BASE:1.18
	OPENBSD_4_5:1.18.0.4
	OPENBSD_4_5_BASE:1.18
	OPENBSD_4_4:1.18.0.2
	OPENBSD_4_4_BASE:1.18
	OPENBSD_4_3:1.17.0.4
	OPENBSD_4_3_BASE:1.17
	OPENBSD_4_2:1.17.0.2
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.15.0.4
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.2
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.13.0.2
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.12.0.2
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.10.0.6
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.4
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.2
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.7.0.4
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.4.0.12
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.10
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.8
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.6
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.4
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.2
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.25
date	2017.04.13.07.30.21;	author jsg;	state Exp;
branches;
next	1.24;
commitid	X6zbJDFVX01gsK09;

1.24
date	2015.01.20.18.22.21;	author deraadt;	state Exp;
branches;
next	1.23;
commitid	F55lwc3gS4GN2mLs;

1.23
date	2015.01.16.06.39.57;	author deraadt;	state Exp;
branches;
next	1.22;
commitid	Uu5nFG3wCl0LACBb;

1.22
date	2013.06.11.16.42.04;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2013.04.24.13.46.29;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2011.04.16.16.37.21;	author otto;	state Exp;
branches;
next	1.19;

1.19
date	2009.10.27.23.59.32;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2008.06.10.23.10.29;	author otto;	state Exp;
branches;
next	1.17;

1.17
date	2007.06.25.19.59.55;	author otto;	state Exp;
branches;
next	1.16;

1.16
date	2007.04.10.16.08.17;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2006.03.22.20.24.32;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2006.03.12.02.28.28;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2006.01.25.06.25.46;	author tedu;	state Exp;
branches;
next	1.12;

1.12
date	2005.04.16.18.15.41;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2005.04.16.17.37.25;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2003.10.11.01.43.45;	author tedu;	state Exp;
branches;
next	1.9;

1.9
date	2003.08.25.23.28.15;	author tedu;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.02.20.06.15;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.08.23.09.09.04;	author gluk;	state Exp;
branches;
next	1.6;

1.6
date	2002.06.09.08.13.05;	author todd;	state Exp;
branches;
next	1.5;

1.5
date	2001.11.05.07.39.16;	author mpech;	state Exp;
branches;
next	1.4;

1.4
date	99.03.01.07.45.18;	author d;	state Exp;
branches;
next	1.3;

1.3
date	96.10.20.08.36.39;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	96.06.23.14.30.32;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.43.32;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.43.32;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.25
log
@fix wrongly indented lines
@
text
@/*	$OpenBSD: pass4.c,v 1.24 2015/01/20 18:22:21 deraadt Exp $	*/
/*	$NetBSD: pass4.c,v 1.11 1996/09/27 22:45:17 christos Exp $	*/

/*
 * Copyright (c) 1980, 1986, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/param.h>	/* isset clrbit */
#include <sys/time.h>
#include <ufs/ufs/dinode.h>
#include <ufs/ffs/fs.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "fsutil.h"
#include "fsck.h"
#include "extern.h"

static ino_t info_inumber;

static int
pass4_info(char *buf, size_t buflen)
{
	return (snprintf(buf, buflen, "phase 4, inode %llu/%llu",
	    (unsigned long long)info_inumber,
	    (unsigned long long)lastino) > 0);
}

void
pass4(void)
{
	ino_t inumber;
	struct zlncnt *zlnp;
	union dinode *dp;
	struct inodesc idesc;
	int n, c, i;

	memset(&idesc, 0, sizeof(struct inodesc));
	idesc.id_type = ADDR;
	idesc.id_func = pass4check;
	info_fn = pass4_info;
	for (c = 0; c < sblock.fs_ncg; c++) {
		inumber = c * sblock.fs_ipg;
		for (i = 0; i < inostathead[c].il_numalloced; i++, inumber++) {
			if (inumber < ROOTINO)
				continue;
			idesc.id_number = inumber;
			switch (GET_ISTATE(inumber)) {

			case FSTATE:
			case DFOUND:
				n = ILNCOUNT(inumber);
				if (n) {
					adjust(&idesc, (short)n);
					break;
				}
				for (zlnp = zlnhead; zlnp; zlnp = zlnp->next)
					if (zlnp->zlncnt == inumber) {
						zlnp->zlncnt = zlnhead->zlncnt;
						zlnp = zlnhead;
						zlnhead = zlnhead->next;
						free((char *)zlnp);
						clri(&idesc, "UNREF", 1);
						break;
					}
				break;

			case DSTATE:
				clri(&idesc, "UNREF", 1);
				break;

			case DCLEAR:
				dp = ginode(inumber);
				if (DIP(dp, di_size) == 0) {
					clri(&idesc, "ZERO LENGTH", 1);
					break;
				}
				/* FALLTHROUGH */
			case FCLEAR:
				clri(&idesc, "BAD/DUP", 1);
				break;

			case USTATE:
				break;

			default:
				errexit("BAD STATE %d FOR INODE I=%llu\n",
				    GET_ISTATE(inumber),
				    (unsigned long long)inumber);
			}
		}
	}
	info_fn = NULL;
}

int
pass4check(struct inodesc *idesc)
{
	struct dups *dlp;
	int nfrags, res = KEEPON;
	daddr_t blkno = idesc->id_blkno;

	for (nfrags = idesc->id_numfrags; nfrags > 0; blkno++, nfrags--) {
		if (chkrange(blkno, 1)) {
			res = SKIP;
		} else if (testbmap(blkno)) {
			for (dlp = duplist; dlp; dlp = dlp->next) {
				if (dlp->dup != blkno)
					continue;
				dlp->dup = duplist->dup;
				dlp = duplist;
				duplist = duplist->next;
				free(dlp);
				break;
			}
			if (dlp == 0) {
				clrbmap(blkno);
				n_blks--;
			}
		}
	}
	return (res);
}
@


1.24
log
@Adjust <sys/param.h> comments regarding use of use of MAXFRAG, or
delete <sys/param.h> if now possible
ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: pass4.c,v 1.23 2015/01/16 06:39:57 deraadt Exp $	*/
d73 1
a73 1
 			idesc.id_number = inumber;
@


1.23
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: pass4.c,v 1.22 2013/06/11 16:42:04 deraadt Exp $	*/
d33 1
a33 1
#include <sys/param.h>	/* MAXFRAG isset clrbit */
@


1.22
log
@final removal of daddr64_t.  daddr_t has been 64 bit for a long enough
test period; i think 3 years ago the last bugs fell out.
ok otto beck others
@
text
@d1 1
a1 1
/*	$OpenBSD: pass4.c,v 1.21 2013/04/24 13:46:29 deraadt Exp $	*/
d33 1
a33 1
#include <sys/param.h>
@


1.21
log
@pretty print bigger off_t
ok tedu otto
@
text
@d1 1
a1 1
/*	$OpenBSD: pass4.c,v 1.20 2011/04/16 16:37:21 otto Exp $	*/
d127 1
a127 1
	daddr64_t blkno = idesc->id_blkno;
@


1.20
log
@Blend in some code from netbsd and freebsd that reduces memory consumption
and speeds things up in a lot of cases.
Prompted by Amit Kulkarni; ok krw@@ on a slighly diffrenent incarnation
@
text
@d1 1
a1 1
/*	$OpenBSD: pass4.c,v 1.19 2009/10/27 23:59:32 deraadt Exp $	*/
d50 3
a52 2
	return (snprintf(buf, buflen, "phase 4, inode %d/%d",
	    info_inumber, lastino) > 0);
d113 3
a115 2
				errexit("BAD STATE %d FOR INODE I=%d\n",
			    	GET_ISTATE(inumber), inumber);
@


1.19
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: pass4.c,v 1.18 2008/06/10 23:10:29 otto Exp $	*/
d69 1
a69 1
		for (i = 0; i < cginosused[c]; i++, inumber++) {
d77 1
a77 1
				n = lncntp[inumber];
@


1.18
log
@reduce mem usage by about 20% by packing state and type of an inode in a single
byte. Original diff by drahn@@; twists by me; ok millert@@ thib@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pass4.c,v 1.17 2007/06/25 19:59:55 otto Exp $	*/
a31 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)pass4.c	8.1 (Berkeley) 6/5/93";
#else
static const char rcsid[] = "$OpenBSD: pass4.c,v 1.17 2007/06/25 19:59:55 otto Exp $";
#endif
#endif /* not lint */
@


1.17
log
@Teach fsck_ffs about 64-bit block addresses. ok (and help) moritz@@ pedro@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pass4.c,v 1.16 2007/04/10 16:08:17 millert Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: pass4.c,v 1.16 2007/04/10 16:08:17 millert Exp $";
d81 1
a81 1
			switch (statemap[inumber]) {
d121 1
a121 1
			    	statemap[inumber], inumber);
@


1.16
log
@Add support for checking ffs2 filesystems.  From pedro@@ based on
the ufs2 changes in FreeBSD by Kirk Mckusick.
@
text
@d1 1
a1 1
/*	$OpenBSD: pass4.c,v 1.15 2006/03/22 20:24:32 deraadt Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: pass4.c,v 1.15 2006/03/22 20:24:32 deraadt Exp $";
d133 1
a133 1
	daddr_t blkno = idesc->id_blkno;
@


1.15
log
@earlier asprintf diff caused malloc in signal handler.  clarify the
code a bit more so that this mistake will not be done again
@
text
@d1 1
a1 1
/*	$OpenBSD: pass4.c,v 1.13 2006/01/25 06:25:46 tedu Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: pass4.c,v 1.13 2006/01/25 06:25:46 tedu Exp $";
d67 1
a67 1
	struct ufs1_dinode *dp;
d69 1
a69 1
	int n;
d75 15
a89 11
	for (inumber = ROOTINO; inumber <= lastino; inumber++) {
		info_inumber = inumber;
		idesc.id_number = inumber;
		switch (statemap[inumber]) {

		case FSTATE:
		case DFOUND:
			n = lncntp[inumber];
			if (n)
				adjust(&idesc, (short)n);
			else {
d99 16
a114 2
			}
			break;
d116 1
a116 8
		case DSTATE:
			clri(&idesc, "UNREF", 1);
			break;

		case DCLEAR:
			dp = ginode(inumber);
			if (dp->di_size == 0) {
				clri(&idesc, "ZERO LENGTH", 1);
d118 4
a122 11
			/* FALLTHROUGH */
		case FCLEAR:
			clri(&idesc, "BAD/DUP", 1);
			break;

		case USTATE:
			break;

		default:
			errexit("BAD STATE %d FOR INODE I=%d\n",
			    statemap[inumber], inumber);
@


1.14
log
@use asprintf instead of a static buffer; dhill, tested by pedro
@
text
@d56 1
a56 1
pass4_info(char *buf)
d58 1
a58 1
	return (asprintf(&buf, "phase 4, inode %d/%d",
@


1.13
log
@spell fall through as FALLTHROUGH
@
text
@d1 1
a1 1
/*	$OpenBSD: pass4.c,v 1.12 2005/04/16 18:15:41 millert Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: pass4.c,v 1.12 2005/04/16 18:15:41 millert Exp $";
d56 1
a56 1
pass4_info(char *buf, int buflen)
d58 1
a58 1
	return (snprintf(buf, buflen, "phase 4, inode %d/%d",
@


1.12
log
@Since the return value from the *_info functions is only actually used as a
boolean, make it so.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pass4.c,v 1.11 2005/04/16 17:37:25 deraadt Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: pass4.c,v 1.11 2005/04/16 17:37:25 deraadt Exp $";
d108 1
a108 1
			/* fall through */
@


1.11
log
@while snprintf and strlcpy and strlcat have this nice >buflen API (and the
-1 mess as well), it is probably not wise to make other functions do the same
thing.  make them return strlen().  ok uwe marco
@
text
@d1 1
a1 1
/*	$OpenBSD: pass4.c,v 1.10 2003/10/11 01:43:45 tedu Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: pass4.c,v 1.10 2003/10/11 01:43:45 tedu Exp $";
d58 2
a59 4
	if (snprintf(buf, buflen, "phase 4, inode %d/%d",
	    info_inumber, lastino) > 0)
		return (strlen(buf));
	return (0);
@


1.10
log
@consistent newlines, from tom cosgrove at arches-consulting.com.
@
text
@d1 1
a1 1
/*	$OpenBSD: pass4.c,v 1.9 2003/08/25 23:28:15 tedu Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: pass4.c,v 1.9 2003/08/25 23:28:15 tedu Exp $";
d58 4
a61 2
	return snprintf(buf, buflen, "phase 4, inode %d/%d",
		info_inumber, lastino);
@


1.9
log
@rename struct dinode to ufs1_dinode.  clears the namespace and makes
way for some future work.  no function changes yet.
help testing otto@@ and markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pass4.c,v 1.8 2003/06/02 20:06:15 millert Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: pass4.c,v 1.8 2003/06/02 20:06:15 millert Exp $";
d117 1
a117 1
			errexit("BAD STATE %d FOR INODE I=%d",
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: pass4.c,v 1.7 2002/08/23 09:09:04 gluk Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: pass4.c,v 1.7 2002/08/23 09:09:04 gluk Exp $";
d67 1
a67 1
	struct dinode *dp;
@


1.7
log
@- Convert function definitions to new style
- eliminate trailing whitespace
- remove casts that aren't needed.
- make rcsid strings const, for -Wall compilation.

 from tedu <grendel@@zeitbombe.org>
@
text
@d1 1
a1 1
/*	$OpenBSD: pass4.c,v 1.6 2002/06/09 08:13:05 todd Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: pass4.c,v 1.6 2002/06/09 08:13:05 todd Exp $";
@


1.6
log
@rm trailing whitespace
@
text
@d1 1
a1 1
/*	$OpenBSD: pass4.c,v 1.5 2001/11/05 07:39:16 mpech Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: pass4.c,v 1.5 2001/11/05 07:39:16 mpech Exp $";
d60 1
a60 3
pass4_info(buf, buflen)
        char * buf;
	int buflen;
d67 1
a67 1
pass4()
d129 1
a129 2
pass4check(idesc)
	struct inodesc *idesc;
d145 1
a145 1
				free((char *)dlp);
@


1.5
log
@kill more registers;

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: pass4.c,v 1.4 1999/03/01 07:45:18 d Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: pass4.c,v 1.4 1999/03/01 07:45:18 d Exp $";
d64 1
a64 1
	return snprintf(buf, buflen, "phase 4, inode %d/%d", 
@


1.4
log
@SIGINFO support
@
text
@d1 1
a1 1
/*	$OpenBSD: pass4.c,v 1.3 1996/10/20 08:36:39 tholo Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: pass4.c,v 1.3 1996/10/20 08:36:39 tholo Exp $";
d71 2
a72 2
	register ino_t inumber;
	register struct zlncnt *zlnp;
d132 1
a132 1
	register struct inodesc *idesc;
d134 1
a134 1
	register struct dups *dlp;
@


1.3
log
@Sync with NetBSD 961019
@
text
@d1 1
a1 1
/*	$OpenBSD: pass4.c,v 1.2 1996/06/23 14:30:32 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: pass4.c,v 1.2 1996/06/23 14:30:32 deraadt Exp $";
d49 1
d57 11
d80 1
d82 1
d127 1
@


1.2
log
@update rcsid
@
text
@d1 2
a2 2
/*	$OpenBSD: pass4.c,v 1.9 1995/03/18 14:55:56 cgd Exp $	*/
/*	$NetBSD: pass4.c,v 1.9 1995/03/18 14:55:56 cgd Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: pass4.c,v 1.9 1995/03/18 14:55:56 cgd Exp $";
d51 2
@


1.1
log
@Initial revision
@
text
@d1 1
d41 1
a41 1
static char rcsid[] = "$NetBSD: pass4.c,v 1.9 1995/03/18 14:55:56 cgd Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
