head	1.9;
access;
symbols
	OPENBSD_5_8:1.7.0.40
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.32
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.36
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.34
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.30
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.28
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.26
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.24
	OPENBSD_5_0:1.7.0.22
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.20
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.18
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.14
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.16
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.12
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.10
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.8
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.6
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.4
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.2
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.3.0.12
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.10
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.8
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.1.1.1.0.6
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.4
	OPENBSD_3_0_BASE:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.2
	OPENBSD_2_9_BASE:1.1.1.1
	ver1:1.1.1.1
	apple19980218:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2016.01.11.23.33.52;	author krw;	state dead;
branches;
next	1.8;
commitid	GhyilNrgbDb6EzA6;

1.8
date	2016.01.11.07.54.07;	author jasper;	state Exp;
branches;
next	1.7;
commitid	DI30r1mqHPQNkhTm;

1.7
date	2006.05.11.17.20.40;	author martin;	state Exp;
branches;
next	1.6;

1.6
date	2006.04.29.15.03.32;	author martin;	state Exp;
branches;
next	1.5;

1.5
date	2006.04.29.00.43.41;	author martin;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.27.19.52.21;	author martin;	state Exp;
branches;
next	1.3;

1.3
date	2003.04.26.02.47.11;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.09.08.13.08;	author todd;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.24.00.14.10;	author drahn;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.24.00.14.10;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Nuke now unused files.

ok deraadt@@
@
text
@/*	$OpenBSD: pathname.c,v 1.8 2016/01/11 07:54:07 jasper Exp $	*/

/*
 * pathname.c -
 *
 * Written by Eryk Vershen
 */

/*
 * Copyright 1997,1998 by Apple Computer, Inc.
 *              All Rights Reserved
 *
 * Permission to use, copy, modify, and distribute this software and
 * its documentation for any purpose and without fee is hereby granted,
 * provided that the above copyright notice appears in all copies and
 * that both the copyright notice and this permission notice appear in
 * supporting documentation.
 *
 * APPLE COMPUTER DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE.
 *
 * IN NO EVENT SHALL APPLE COMPUTER BE LIABLE FOR ANY SPECIAL, INDIRECT, OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN ACTION OF CONTRACT,
 * NEGLIGENCE, OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */


// for strncmp()
#include <string.h>

#include "pathname.h"
#include "file_media.h"

/*
 * Defines
 */


/*
 * Types
 */


/*
 * Global Constants
 */


/*
 * Global Variables
 */


/*
 * Forward declarations
 */


/*
 * Routines
 */

MEDIA
open_pathname_as_media(char *path, int oflag)
{
    MEDIA	m = 0;

    m = open_file_as_media(path, oflag);
    return m;
}


MEDIA_ITERATOR
first_media_kind(long *state)
{
    *state = 0;
    return next_media_kind(state);
}


MEDIA_ITERATOR
next_media_kind(long *state)
{
    MEDIA_ITERATOR result;
    long ix;

    result = 0;
    ix = *state;

    switch (ix) {
    case 0:
	result = create_file_iterator();
	ix = 1;
	if (result != 0) {
		break;
	}
	/* fall through to next interface */

    case 1:
	ix = 2;
	if (result != 0) {
		break;
	}
	/* fall through to next interface */

    case 2:
	ix = 3;
	if (result != 0) {
		break;
	}
	/* fall through to next interface */

    case 3:
    default:
	break;
    }

    *state = ix;
    return result;
}


@


1.8
log
@add rcs ids
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.7
log
@remove a bunch of linux and NeXT defines and, in turn, -D__unix__
@
text
@d1 2
@


1.6
log
@remove get_linux_name() and an accompanying variable;
this function was a stub after the last cleanup
@
text
@a92 1
#if defined(__linux__) || defined(__unix__)
a93 1
#endif
@


1.5
log
@With last pdisk and full functionality for mac68k now in place, start
cleaning the maze of ifdef's not relevant for us.

This round wipes most linux and/or MacOS-only bits, more to come.
@
text
@a63 4
/*
 * Note that open_pathname_as_media() and get_linux_name() have almost
 * identical structures.  If one changes the other must also!
 */
a70 9
}


char *
get_linux_name(char *path)
{
    char	*result = 0;

    return result;
@


1.4
log
@update for pdisk 0.8a2, from NetBSD, retaining our local changes;
summing it up:

- Clean up sources - fix naming, delete old email addresses
- Added support for display of Mac volume names
- Fix block 0 display to show logical offset of drivers
- Require confirmation of quit without write
- Fix iteration to not complain about missing devices
- Warn when creating/writing a map with more than 15 entries

and, most important, add do_update_dpme() which allows us to partition
OpenBSD slices without previous MacOS setup.

Tested with shared MacOS install on macppc, procedure there remains the
same.

grammer and spelling help and ok jmc@@

ok miod@@
@
text
@a71 58
#if !defined(__linux__) && !defined(__unix__)
    long	id;
    long	bus;
	
    if (strncmp("/dev/", path, 5) == 0) {
	if (strncmp("/dev/scsi", path, 9) == 0) {
	    if (path[9] >= '0' && path[9] <= '7' && path[10] == 0) {
		// scsi[0-7]
		id = path[9] - '0';
		m = open_old_scsi_as_media(id);
	    } else if (path[9] >= '0' && path[9] <= '7' && path[10] == '.'
		    && path[11] >= '0' && path[11] <= '7' && path[12] == 0) {
		// scsi[0-7].[0-7]
		id = path[11] - '0';
		bus = path[9] - '0';
		m = open_scsi_as_media(bus, id);
	    }
	} else if (strncmp("/dev/ata", path, 8) == 0
		|| strncmp("/dev/ide", path, 8) == 0) {
	    if (path[8] >= '0' && path[8] <= '7' && path[9] == 0) {
		// ata[0-7], ide[0-7]
		bus = path[8] - '0';
		m = open_ata_as_media(bus, 0);
	    } else if (path[8] >= '0' && path[8] <= '7' && path[9] == '.'
		    && path[10] >= '0' && path[10] <= '1' && path[11] == 0) {
		// ata[0-7].[0-1], ide[0-7].[0-1]
		id = path[10] - '0';
		bus = path[8] - '0';
		m = open_ata_as_media(bus, id);
	    }
	} else if (strncmp("/dev/sd", path, 7) == 0) {
	    if (path[7] >= 'a' && path[7] <= 'z' && path[8] == 0) {
		// sd[a-z]
		id = path[7] - 'a';
		m = open_linux_scsi_as_media(id, 0);
	    } else if (path[7] >= 'a' && path[7] <= 'z' && path[8] == '.'
		    && path[9] >= 'a' && path[9] <= 'z' && path[10] == 0) {
		// sd[a-z][a-z]
		bus = path[7] - 'a';
		id = path[9] - 'a';
		id += bus * 26;
		m = open_linux_scsi_as_media(id, 0);
	    }
	} else if (strncmp("/dev/scd", path, 8) == 0) {
	    if (path[8] >= '0' && path[8] <= '9' && path[9] == 0) {
		// scd[0-9]
		id = path[8] - '0';
		m = open_linux_scsi_as_media(id, 1);
	    }
	} else if (strncmp("/dev/hd", path, 7) == 0) {
	    if (path[7] >= 'a' && path[7] <= 'z' && path[8] == 0) {
		// hd[a-z]
		id = path[7] - 'a';
		m = open_linux_ata_as_media(id);
	    }
	}
    } else
#endif
d73 1
a73 3
    {
	m = open_file_as_media(path, oflag);
    }
a81 37
#if !defined(__linux__) && !defined(__unix__)
    long	id;
    long	bus;

    if (strncmp("/dev/", path, 5) == 0) {
	if (strncmp("/dev/scsi", path, 9) == 0) {
	    if (path[9] >= '0' && path[9] <= '7' && path[10] == 0) {
		/* old scsi */
		// scsi[0-7]
		id = path[9] - '0';
		result = linux_old_scsi_name(id);
	    } else if (path[9] >= '0' && path[9] <= '7' && path[10] == '.'
		    && path[11] >= '0' && path[11] <= '7' && path[12] == 0) {
		/* new scsi */
		// scsi[0-7].[0-7]
		id = path[11] - '0';
		bus = path[9] - '0';
		result = linux_scsi_name(bus, id);
	    }
	} else if (strncmp("/dev/ata", path, 8) == 0
		|| strncmp("/dev/ide", path, 8) == 0) {
	    if (path[8] >= '0' && path[8] <= '7' && path[9] == 0) {
		/* ata/ide - master device */
		// ata[0-7], ide[0-7]
		bus = path[8] - '0';
		result = linux_ata_name(bus, 0);
	    } else if (path[8] >= '0' && path[8] <= '7' && path[9] == '.'
		    && path[10] >= '0' && path[10] <= '1' && path[11] == 0) {
		/* ata/ide */
		// ata[0-7].[0-1], ide[0-7].[0-1]
		id = path[10] - '0';
		bus = path[8] - '0';
		result = linux_ata_name(bus, id);
	    }
	}
    }
#endif
a115 3
#if !defined(__linux__) && !defined(__unix__)
	result = create_ata_iterator();
#endif
a122 3
#if !defined(__linux__) && !defined(__unix__)
	result = create_scsi_iterator();
#endif
@


1.3
log
@remove a bit more junk
@
text
@d4 1
a4 1
 * Written by Eryk Vershen (eryk@@apple.com)
d65 1
a65 1
 * Note that open_pathname_as_media() and get_mklinux_name() have almost
d79 1
d84 1
d92 1
d97 1
d104 1
d106 8
a113 1
		m = open_mklinux_scsi_as_media(id, 0);
d117 1
d119 1
a119 1
		m = open_mklinux_scsi_as_media(id, 1);
d123 1
d125 1
a125 1
		m = open_mklinux_ata_as_media(id);
d139 1
a139 1
get_mklinux_name(char *path)
d150 1
d152 1
a152 1
		result = mklinux_old_scsi_name(id);
d156 1
d159 1
a159 1
		result = mklinux_scsi_name(bus, id);
d165 1
d167 1
a167 1
		result = mklinux_ata_name(bus, 0);
d171 1
d174 1
a174 1
		result = mklinux_ata_name(bus, id);
d196 1
a196 1
    long index;
d199 1
a199 1
    index = *state;
d201 1
a201 1
    switch (index) {
d206 1
a206 1
	index = 1;
d216 1
a216 1
	index = 2;
d226 1
a226 1
	index = 3;
d237 1
a237 1
    *state = index;
@


1.2
log
@rm trailing whitespace
@
text
@a34 6
#ifndef __linux__
#include "SCSI_media.h"
#include "ATA_media.h"
#endif


@


1.1
log
@Initial revision
@
text
@d9 17
a25 17
 *              All Rights Reserved 
 *  
 * Permission to use, copy, modify, and distribute this software and 
 * its documentation for any purpose and without fee is hereby granted, 
 * provided that the above copyright notice appears in all copies and 
 * that both the copyright notice and this permission notice appear in 
 * supporting documentation. 
 *  
 * APPLE COMPUTER DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE 
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
 * FOR A PARTICULAR PURPOSE. 
 *  
 * IN NO EVENT SHALL APPLE COMPUTER BE LIABLE FOR ANY SPECIAL, INDIRECT, OR 
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM 
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN ACTION OF CONTRACT, 
 * NEGLIGENCE, OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION 
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. 
d167 1
a167 1
    
d224 1
a224 1
 
@


1.1.1.1
log
@Import of pdisk from apple, BSD licensed code. Archive dated Feb 18 1998 
This is a HFS partition editing tool.
@
text
@@
