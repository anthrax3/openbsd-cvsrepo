head	1.12;
access;
symbols
	OPENBSD_5_8:1.5.0.34
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.26
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.30
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.28
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.24
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.22
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.20
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.18
	OPENBSD_5_0:1.5.0.16
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.14
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.12
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.8
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.10
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.6
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.4
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.2
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.4.0.6
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.4
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.2
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.2.0.16
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.14
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.12
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.10
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.8
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.6
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.1.1.1.0.6
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.4
	OPENBSD_3_0_BASE:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.2
	OPENBSD_2_9_BASE:1.1.1.1
	ver1:1.1.1.1
	apple19980218:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2016.01.16.22.01.26;	author krw;	state dead;
branches;
next	1.11;
commitid	nXtqVWqNIn73oPaD;

1.11
date	2016.01.16.21.41.41;	author krw;	state Exp;
branches;
next	1.10;
commitid	N0CsQGsGtplNR8ev;

1.10
date	2016.01.16.21.29.07;	author krw;	state Exp;
branches;
next	1.9;
commitid	Ps7EsBgpdFrGcD1r;

1.9
date	2016.01.16.20.00.50;	author krw;	state Exp;
branches;
next	1.8;
commitid	2koPB3ak72axl95m;

1.8
date	2016.01.12.16.08.37;	author krw;	state Exp;
branches;
next	1.7;
commitid	SiCi2OiU3VeQsi4m;

1.7
date	2016.01.11.07.54.07;	author jasper;	state Exp;
branches;
next	1.6;
commitid	DI30r1mqHPQNkhTm;

1.6
date	2015.08.20.22.02.21;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	0qPuuXwccpVXsXcV;

1.5
date	2007.12.09.23.35.22;	author chl;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.29.00.43.41;	author martin;	state Exp;
branches;
next	1.3;

1.3
date	2006.04.27.19.52.21;	author martin;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.09.08.13.08;	author todd;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.24.00.14.07;	author drahn;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.24.00.14.07;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Another to the attic.
@
text
@/*	$OpenBSD: media.c,v 1.11 2016/01/16 21:41:41 krw Exp $	*/

/*
 * media.c -
 *
 * Written by Eryk Vershen
 */

/*
 * Copyright 1997,1998 by Apple Computer, Inc.
 *              All Rights Reserved
 *
 * Permission to use, copy, modify, and distribute this software and
 * its documentation for any purpose and without fee is hereby granted,
 * provided that the above copyright notice appears in all copies and
 * that both the copyright notice and this permission notice appear in
 * supporting documentation.
 *
 * APPLE COMPUTER DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE.
 *
 * IN NO EVENT SHALL APPLE COMPUTER BE LIABLE FOR ANY SPECIAL, INDIRECT, OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN ACTION OF CONTRACT,
 * NEGLIGENCE, OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */


// for printf()
#include <stdio.h>
// for malloc() & free()
#include <stdlib.h>

#include "media.h"


/*
 * Defines
 */


/*
 * Types
 */


/*
 * Global Constants
 */


/*
 * Global Variables
 */

/*
 * Forward declarations
 */


/*
 * Routines
 */


MEDIA
new_media(long size)
{
    return malloc(size);
}


void
delete_media(MEDIA m)
{
    if (m == 0) {
	return;
    }
    free(m);
}


long long
media_total_size(MEDIA m)
{
    if (m == 0) {
	return 0;
    } else {
	return m->size_in_bytes;
    }
}
@


1.11
log
@There can be only one. 'grain' that is. i.e. DEV_BSIZE. No need to track
or store. Just use.

No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: media.c,v 1.10 2016/01/16 21:29:07 krw Exp $	*/
@


1.10
log
@There can be only one. 'kind' that is. No need to allocate or track the
media kind since it will always be the same -- a file.

No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: media.c,v 1.9 2016/01/16 20:00:50 krw Exp $	*/
a81 11
}


unsigned long
media_granularity(MEDIA m)
{
    if (m == 0) {
	return 0;
    } else {
	return m->grain;
    }
@


1.9
log
@Start peeling away excess layers of abstraction.

Since 'file' is the only kind of media, no need to call the appropriate
functions via pointers. Just call the _file_ variants directly.
Nuke the fields do_read(), do_write(), do_close(), do_os_reload()
and the functions read_media(), write_media(), close_media() and
os_reload_media().

No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: media.c,v 1.8 2016/01/12 16:08:37 krw Exp $	*/
a56 1
static long media_kind = 0;
a65 6
long
allocate_media_kind(void)
{
    media_kind++;
    return media_kind;
}
@


1.8
log
@Remove media interation types, structures and functions. They are not used
anywhere, as evidenced by everything still compiling after they are gone.
@
text
@d1 1
a1 1
/*	$OpenBSD: media.c,v 1.7 2016/01/11 07:54:07 jasper Exp $	*/
a109 57
    }
}


long
read_media(MEDIA m, long long offset, unsigned long count, void *address)
{
    long result;

    if (m != 0 && m->do_read != 0) {
	//printf("media: read type %d, offset %Ld, count %d\n\t", m->kind, offset, count);
	result = (*m->do_read)(m, offset, count, address);
	//printf(" - returns %d\n", result);
	return result;
    } else {
	return 0;
    }
}


long
write_media(MEDIA m, long long offset, unsigned long count, void *address)
{
    long result;

    if (m != 0 && m->do_write != 0) {
	//printf("media: write type %d, offset %Ld, count %d\n\t", m->kind, offset, count);
	result = (*m->do_write)(m, offset, count, address);
	//printf(" - returns %d\n", result);
	return result;
    } else {
	return 0;
    }
}


void
close_media(MEDIA m)
{
    if (m == 0) {
	return;
    }
    if (m->kind != 0) {
	if (m->do_close != 0) {
	    (*m->do_close)(m);
	}
	m->kind = 0;
	delete_media(m);
    }
}


void
os_reload_media(MEDIA m)
{
    if (m != 0 && m->do_os_reload != 0) {
	(*m->do_os_reload)(m);
@


1.7
log
@add rcs ids
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a167 7
}


MEDIA_ITERATOR
new_media_iterator(long size)
{
    return malloc(size);
@


1.6
log
@<stdlib.h> is included, so do not need to cast result from
malloc, calloc, realloc*
ok krw millert
@
text
@d1 2
@


1.5
log
@remove unused functions

initially from tobias@@, but I removed some other unused one

ok martin@@ tobias@@
@
text
@d76 1
a76 1
    return (MEDIA) malloc(size);
d172 1
a172 1
    return (MEDIA_ITERATOR) malloc(size);
@


1.4
log
@With last pdisk and full functionality for mac68k now in place, start
cleaning the maze of ifdef's not relevant for us.

This round wipes most linux and/or MacOS-only bits, more to come.
@
text
@a173 49


void
private_delete_media_iterator(MEDIA_ITERATOR m)
{
    if (m == 0) {
	return;
    }
    free(m);
}


void
reset_media_iterator(MEDIA_ITERATOR m)
{
    if (m != 0 && m->do_reset != 0) {
	(*m->do_reset)(m);
    }
}


char *
step_media_iterator(MEDIA_ITERATOR m)
{
    char *result;

    if (m != 0 && m->do_step != 0) {
	result = (*m->do_step)(m);
    } else {
	result = 0;
    }
    return result;
}


void
delete_media_iterator(MEDIA_ITERATOR m)
{
    if (m == 0) {
	return;
    }
    if (m->kind != 0) {
	if (m->do_delete != 0) {
	    (*m->do_delete)(m);
	}
	m->kind = 0;
	private_delete_media_iterator(m);
    }
}
@


1.3
log
@update for pdisk 0.8a2, from NetBSD, retaining our local changes;
summing it up:

- Clean up sources - fix naming, delete old email addresses
- Added support for display of Mac volume names
- Fix block 0 display to show logical offset of drivers
- Require confirmation of quit without write
- Fix iteration to not complain about missing devices
- Warn when creating/writing a map with more than 15 entries

and, most important, add do_update_dpme() which allows us to partition
OpenBSD slices without previous MacOS setup.

Tested with shared MacOS install on macppc, procedure there remains the
same.

grammer and spelling help and ok jmc@@

ok miod@@
@
text
@a168 6
#if !defined(__linux__) && !defined(__unix__)
#pragma mark -
#endif



@


1.2
log
@rm trailing whitespace
@
text
@d4 1
a4 1
 * Written by Eryk Vershen (eryk@@apple.com)
d55 1
a55 1
static media_kind = 0;
d169 1
d171 1
@


1.1
log
@Initial revision
@
text
@d9 17
a25 17
 *              All Rights Reserved 
 *  
 * Permission to use, copy, modify, and distribute this software and 
 * its documentation for any purpose and without fee is hereby granted, 
 * provided that the above copyright notice appears in all copies and 
 * that both the copyright notice and this permission notice appear in 
 * supporting documentation. 
 *  
 * APPLE COMPUTER DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE 
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
 * FOR A PARTICULAR PURPOSE. 
 *  
 * IN NO EVENT SHALL APPLE COMPUTER BE LIABLE FOR ANY SPECIAL, INDIRECT, OR 
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM 
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN ACTION OF CONTRACT, 
 * NEGLIGENCE, OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION 
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. 
d116 1
a116 1
    
d132 1
a132 1
    
d203 1
a203 1
    
@


1.1.1.1
log
@Import of pdisk from apple, BSD licensed code. Archive dated Feb 18 1998 
This is a HFS partition editing tool.
@
text
@@
