head	1.27;
access;
symbols
	OPENBSD_5_8:1.3.0.40
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.32
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.36
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.34
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.30
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.28
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.26
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.24
	OPENBSD_5_0:1.3.0.22
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.20
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.18
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.14
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.16
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.12
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.10
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.8
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.6
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.4
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.2
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.2.0.16
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.14
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.12
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.10
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.8
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.6
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.1.1.1.0.6
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.4
	OPENBSD_3_0_BASE:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.2
	OPENBSD_2_9_BASE:1.1.1.1
	ver1:1.1.1.1
	apple19980218:1.1.1;
locks; strict;
comment	@ * @;


1.27
date	2016.01.30.17.23.09;	author krw;	state dead;
branches;
next	1.26;
commitid	nXIR7MNdWGOpKz0h;

1.26
date	2016.01.30.17.09.11;	author krw;	state Exp;
branches;
next	1.25;
commitid	ckpV9XGgFAiDBI9u;

1.25
date	2016.01.29.22.51.43;	author krw;	state Exp;
branches;
next	1.24;
commitid	T4U3iDofClirvhXD;

1.24
date	2016.01.28.13.01.33;	author krw;	state Exp;
branches;
next	1.23;
commitid	00cCpXcvPr6DmCk2;

1.23
date	2016.01.27.16.38.37;	author krw;	state Exp;
branches;
next	1.22;
commitid	OxtaH45RCrnSeCna;

1.22
date	2016.01.27.14.19.59;	author krw;	state Exp;
branches;
next	1.21;
commitid	EqZjPBGHnNBMYpZq;

1.21
date	2016.01.25.23.43.20;	author krw;	state Exp;
branches;
next	1.20;
commitid	Qe66eD6zrMyPrXqP;

1.20
date	2016.01.25.21.51.23;	author krw;	state Exp;
branches;
next	1.19;
commitid	0afQloq2paFkikl3;

1.19
date	2016.01.24.01.38.32;	author krw;	state Exp;
branches;
next	1.18;
commitid	g7Azk2rL78IOOfnI;

1.18
date	2016.01.23.14.10.05;	author krw;	state Exp;
branches;
next	1.17;
commitid	bcC8H31SMEjEk8SE;

1.17
date	2016.01.22.17.22.35;	author krw;	state Exp;
branches;
next	1.16;
commitid	ZJun1E2b9HZgaBGA;

1.16
date	2016.01.17.23.18.19;	author krw;	state Exp;
branches;
next	1.15;
commitid	vC4VO4mr30PnBRSq;

1.15
date	2016.01.17.19.15.55;	author krw;	state Exp;
branches;
next	1.14;
commitid	mHBjhdgm2kvWAkWc;

1.14
date	2016.01.17.18.57.52;	author krw;	state Exp;
branches;
next	1.13;
commitid	Rl8zxjpMi2a93hiE;

1.13
date	2016.01.17.18.44.59;	author krw;	state Exp;
branches;
next	1.12;
commitid	leFr8OHidfOIWdIJ;

1.12
date	2016.01.17.18.26.51;	author krw;	state Exp;
branches;
next	1.11;
commitid	9GTOoEz5fUEQ7iWl;

1.11
date	2016.01.17.18.23.30;	author krw;	state Exp;
branches;
next	1.10;
commitid	JmzV97SaRCDIs0Gg;

1.10
date	2016.01.17.16.26.26;	author krw;	state Exp;
branches;
next	1.9;
commitid	JomFzbWltJFhj4Ev;

1.9
date	2016.01.17.16.15.59;	author krw;	state Exp;
branches;
next	1.8;
commitid	pxt9IRDGideJOJo6;

1.8
date	2016.01.17.16.07.06;	author krw;	state Exp;
branches;
next	1.7;
commitid	MHlLpCG6jqCnA9Ts;

1.7
date	2016.01.17.14.28.25;	author krw;	state Exp;
branches;
next	1.6;
commitid	6tkl4uDyqk6o4dzS;

1.6
date	2016.01.15.16.39.20;	author krw;	state Exp;
branches;
next	1.5;
commitid	jCu7JX5yifR514Uo;

1.5
date	2016.01.11.17.55.45;	author jasper;	state Exp;
branches;
next	1.4;
commitid	m85VTdlsVhWAtyII;

1.4
date	2016.01.11.07.54.07;	author jasper;	state Exp;
branches;
next	1.3;
commitid	DI30r1mqHPQNkhTm;

1.3
date	2006.04.27.19.52.21;	author martin;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.09.08.13.08;	author todd;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.24.00.13.59;	author drahn;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.24.00.13.59;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.27
log
@Another to the attic.
@
text
@/*	$OpenBSD: dpme.h,v 1.26 2016/01/30 17:09:11 krw Exp $	*/

/*
 * dpme.h - Disk Partition Map Entry (dpme)
 *
 * Written by Eryk Vershen
 *
 * This file describes structures and values related to the standard
 * Apple SCSI disk partitioning scheme.
 *
 * Each entry is (and shall remain) 512 bytes long.
 *
 * For more information see:
 *	"Inside Macintosh: Devices" pages 3-12 to 3-15.
 *	"Inside Macintosh - Volume V" pages V-576 to V-582
 *	"Inside Macintosh - Volume IV" page IV-292
 *
 * There is a kernel file with much of the same info (under different names):
 *	/usr/src/mklinux-1.0DR2/osfmk/src/mach_kernel/ppc/POWERMAC/mac_label.h
 */

/*
 * Copyright 1996 by Apple Computer, Inc.
 *              All Rights Reserved
 *
 * Permission to use, copy, modify, and distribute this software and
 * its documentation for any purpose and without fee is hereby granted,
 * provided that the above copyright notice appears in all copies and
 * that both the copyright notice and this permission notice appear in
 * supporting documentation.
 *
 * APPLE COMPUTER DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE.
 *
 * IN NO EVENT SHALL APPLE COMPUTER BE LIABLE FOR ANY SPECIAL, INDIRECT, OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN ACTION OF CONTRACT,
 * NEGLIGENCE, OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
#ifndef __dpme__
#define __dpme__

#define	BLOCK0_SIGNATURE	0x4552	/* i.e. 'ER' */
#define	DPME_SIGNATURE		0x504D	/* i.e. 'PM' */

#define	DPISTRLEN	32

#endif /* __dpme__ */
@


1.26
log
@Fold struct dpme into struct entry. Same reasons as for folding
struct block0 into struct partition_map. Easier to read code.
@
text
@d1 1
a1 1
/*	$OpenBSD: dpme.h,v 1.25 2016/01/29 22:51:43 krw Exp $	*/
@


1.25
log
@Fold struct block0 into struct partition map. There can be only one
and read/write_block0() can move the data from/to disk to/from
appropriate fields anywhere. Removes a bunch of dereferencing,
malloc'ing and pointer checking.
@
text
@d1 1
a1 1
/*	$OpenBSD: dpme.h,v 1.24 2016/01/28 13:01:33 krw Exp $	*/
a48 34

/*
 * Each partition map entry (blocks 1 through n) has this format
 */
struct dpme {
    uint16_t	dpme_signature;		/* "PM" */
    uint8_t	dpme_reserved_1[2];
    uint32_t	dpme_map_entries;	/* # of partition entries */
    uint32_t	dpme_pblock_start;	/* physical block start of partition */
    uint32_t	dpme_pblocks;		/* physical block count of partition */
    char	dpme_name[DPISTRLEN+1];	/* name of partition + NUL */
    char	dpme_type[DPISTRLEN+1];	/* type of partition + NUL */
    uint32_t	dpme_lblock_start;	/* logical block start of partition */
    uint32_t	dpme_lblocks;		/* logical block count of partition */
    uint32_t	dpme_flags;
#define	DPME_OS_SPECIFIC_1	(1<<8)
#define	DPME_OS_SPECIFIC_2	(1<<7)
#define	DPME_OS_PIC_CODE	(1<<6)
#define	DPME_WRITABLE		(1<<5)
#define	DPME_READABLE		(1<<4)
#define	DPME_BOOTABLE		(1<<3)
#define	DPME_IN_USE		(1<<2)
#define	DPME_ALLOCATED		(1<<1)
#define	DPME_VALID		(1<<0)
    uint32_t	dpme_boot_block;	/* logical block start of boot code */
    uint32_t	dpme_boot_bytes;	/* byte count of boot code */
    uint16_t	dpme_load_addr;		/* memory address of boot code */
    uint8_t	dpme_reserved_2[4];
    uint32_t	dpme_goto_addr;		/* memory jump address of boot code */
    uint8_t	dpme_reserved_3[4];
    uint32_t	dpme_checksum;		/* of the boot code. */
    char	dpme_processor_id[17];	/* processor type + NUL */
    uint8_t	dpme_reserved_4[376];
};
@


1.24
log
@Use consistent 'return' idiom -- no parenthesis since that was the style
of the existing code.
@
text
@d1 1
a1 1
/*	$OpenBSD: dpme.h,v 1.23 2016/01/27 16:38:37 krw Exp $	*/
a48 18

struct ddmap {
    uint32_t	ddBlock;	/* 1st driver's starting sbBlkSize block */
    uint16_t	ddSize;		/* size of 1st driver (512-byte blks) */
    uint16_t	ddType;		/* system type (1 for Mac+) */
};

struct block0 {
    uint16_t		sbSig;		/* "ER" */
    uint16_t		sbBlkSize;	/* physical block size of device */
    uint32_t		sbBlkCount;	/* # of physical blocks on device */
    uint16_t		sbDevType;	/* device type */
    uint16_t		sbDevId;	/* device id */
    uint32_t		sbData;		/* not used */
    uint16_t		sbDrvrCount;	/* driver descriptor count */
    struct ddmap	sbDDMap[8];	/* driver descriptor map*/
    uint8_t		sbReserved[430];
};
@


1.23
log
@On-disk partition name/types/processorid may or may not be NUL
terminated after all. So add an extra byte for a NUL in the in-memory
struct's.
@
text
@d1 1
a1 1
/*	$OpenBSD: dpme.h,v 1.22 2016/01/27 14:19:59 krw Exp $	*/
d51 1
a51 1
    uint32_t	ddBlock;	/* 1st driver's starting block (in sbBlkSize blocks!) */
@


1.22
log
@Check block 0 signature, physical block size and physical block count when
reading partition map.

Check for unmapped physical blocks and overlapping partitions when reading
partition map.

No need for duplicate checks in validate_map(), so remove validate.c from
build and 'v' command from code and docs.
@
text
@d1 1
a1 1
/*	$OpenBSD: dpme.h,v 1.21 2016/01/25 23:43:20 krw Exp $	*/
d77 2
a78 2
    char	dpme_name[DPISTRLEN];	/* name of partition */
    char	dpme_type[DPISTRLEN];	/* type of partition */
d98 1
a98 1
    char	dpme_processor_id[16];	/* processor type */
@


1.21
log
@Use new read/write_block0 and read/write_dpme which handle any
endian or alignment issues forcefully. Removes need for convert_*
functions so unhook convert.c from build. read/write_block become
static functions inside file_media.c.

Tweak struct block0 to stop trying to handle alignment issues by clever
declaration. Rely on the new functions to accurately translate between
on-disk and in-memory layouts.

Enables pdisk to work on amd64 and likely other architectures if
it's ever desirable. Does bring back DEV_BSIZE to pdisk.c since the
in-memory structure will *not* be 512 bytes on other archs.
@
text
@d1 1
a1 1
/*	$OpenBSD: dpme.h,v 1.20 2016/01/25 21:51:23 krw Exp $	*/
d57 3
a59 3
    uint16_t		sbSig;		/* unique value for SCSI block 0 */
    uint16_t		sbBlkSize;	/* block size of device */
    uint32_t		sbBlkCount;	/* number of blocks on device */
@


1.20
log
@Tweak fields in struct dpme to be more consistent with Apple's info.

Better comments, make all reserved fields uint8_t arrays, don't
claim uint32_t fields are actually pointers.
@
text
@d1 1
a1 1
/*	$OpenBSD: dpme.h,v 1.19 2016/01/24 01:38:32 krw Exp $	*/
a49 15
struct block0 {
    uint16_t   sbSig;          /* unique value for SCSI block 0 */
    uint16_t   sbBlkSize;      /* block size of device */
    uint32_t   sbBlkCount;     /* number of blocks on device */
    uint16_t   sbDevType;      /* device type */
    uint16_t   sbDevId;        /* device id */
    uint32_t   sbData;         /* not used */
    uint16_t   sbDrvrCount;    /* driver descriptor count */
    uint16_t   sbMap[247];     /* descriptor map */
};

/*
 * Where &sbMap[0] is actually an array struct ddmap[sbDrvrCount]
 * kludge to get around alignment junk
 */
d56 11
a69 3
 *
 * Since dpme is assumed to be the same size as the physical sector size,
 * support is limited to 512-byte sector devices!
@


1.19
log
@Whitespace fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD: dpme.h,v 1.18 2016/01/23 14:10:05 krw Exp $	*/
a49 4
/*
 * Since block0 is assumed to be the same size as the physical sector size,
 * support is limited to 512-byte sector devices!
 */
d51 8
a58 8
    uint16_t	sbSig;		/* unique value for SCSI block 0 */
    uint16_t	sbBlkSize;	/* block size of device */
    uint32_t	sbBlkCount;	/* number of blocks on device */
    uint16_t	sbDevType;	/* device type */
    uint16_t	sbDevId;	/* device id */
    uint32_t	sbData;		/* not used */
    uint16_t	sbDrvrCount;	/* driver descriptor count */
    uint16_t	sbMap[247];	/* descriptor map */
d79 9
a87 9
    uint16_t	dpme_signature;
    uint16_t	dpme_reserved_1;
    uint32_t	dpme_map_entries;
    uint32_t	dpme_pblock_start;
    uint32_t	dpme_pblocks;
    char	dpme_name[DPISTRLEN];  /* name of partition */
    char	dpme_type[DPISTRLEN];  /* type of partition */
    uint32_t	dpme_lblock_start;
    uint32_t	dpme_lblocks;
a88 2
#define	DPME_DISKDRIVER		(1<<9)
#define	DPME_CHAINABLE		(1<<8)
d98 9
a106 10
    uint32_t	dpme_boot_block;
    uint32_t	dpme_boot_bytes;
    uint8_t    *dpme_load_addr;
    uint8_t    *dpme_load_addr_2;
    uint8_t    *dpme_goto_addr;
    uint8_t    *dpme_goto_addr_2;
    uint32_t	dpme_checksum;
    char	dpme_process_id[16];
    uint32_t	dpme_boot_args[32];
    uint32_t	dpme_reserved_3[62];
@


1.18
log
@Add comments to ensure future spelunkers realize that struct block0
and struct dpme must be 512-bytes long at the moment.

Use this fact to avoid using DEV_BSIZE and thus replace #include
<param.h> with #include <types.h> in pdisk.c.

Constrain media size to UINT32_MAX, the actual limit, instead of
LONG_MAX, which could be way more on some theoretical future arch
running pdisk. And do the constraint inside open_partition_map().
@
text
@d1 1
a1 1
/*	$OpenBSD: dpme.h,v 1.17 2016/01/22 17:22:35 krw Exp $	*/
d46 1
a48 1
#define	DPME_SIGNATURE	0x504D		/* i.e. 'PM' */
@


1.17
log
@Whitespace fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD: dpme.h,v 1.16 2016/01/17 23:18:19 krw Exp $	*/
d50 4
d76 6
a81 1
/* Each partition map entry (blocks 1 through n) has this format */
@


1.16
log
@Change "//" comments to "/**/". Nuke really stupid ones.
@
text
@d1 1
a1 1
/*	$OpenBSD: dpme.h,v 1.15 2016/01/17 19:15:55 krw Exp $	*/
d74 10
a83 10
    uint16_t     dpme_signature          ;
    uint16_t     dpme_reserved_1         ;
    uint32_t     dpme_map_entries        ;
    uint32_t     dpme_pblock_start       ;
    uint32_t     dpme_pblocks            ;
    char    dpme_name[DPISTRLEN]    ;  /* name of partition */
    char    dpme_type[DPISTRLEN]    ;  /* type of partition */
    uint32_t     dpme_lblock_start       ;
    uint32_t     dpme_lblocks            ;
    uint32_t     dpme_flags		    ;
d95 10
a104 10
    uint32_t     dpme_boot_block         ;
    uint32_t     dpme_boot_bytes         ;
    uint8_t     *dpme_load_addr          ;
    uint8_t     *dpme_load_addr_2        ;
    uint8_t     *dpme_goto_addr          ;
    uint8_t     *dpme_goto_addr_2        ;
    uint32_t     dpme_checksum           ;
    char    dpme_process_id[16]     ;
    uint32_t     dpme_boot_args[32]      ;
    uint32_t     dpme_reserved_3[62]     ;
@


1.15
log
@Kill leading, imbedded, trailing whitespace.
@
text
@d1 1
a1 1
/*	$OpenBSD: dpme.h,v 1.14 2016/01/17 18:57:52 krw Exp $	*/
d3 18
a20 18
//
// dpme.h - Disk Partition Map Entry (dpme)
//
// Written by Eryk Vershen
//
// This file describes structures and values related to the standard
// Apple SCSI disk partitioning scheme.
//
// Each entry is (and shall remain) 512 bytes long.
//
// For more information see:
//	"Inside Macintosh: Devices" pages 3-12 to 3-15.
//	"Inside Macintosh - Volume V" pages V-576 to V-582
//	"Inside Macintosh - Volume IV" page IV-292
//
// There is a kernel file with much of the same info (under different names):
//	/usr/src/mklinux-1.0DR2/osfmk/src/mach_kernel/ppc/POWERMAC/mac_label.h
//
d61 4
a64 2
// Where &sbMap[0] is actually an array struct ddmap[sbDrvrCount]
// kludge to get around alignment junk
d72 1
a72 1
// Each partition map entry (blocks 1 through n) has this format
@


1.14
log
@Remove a bunch of ridiculous and uninformative comments like "// Defines".
@
text
@d1 1
a1 1
/*	$OpenBSD: dpme.h,v 1.13 2016/01/17 18:44:59 krw Exp $	*/
d51 8
a58 8
    uint16_t 	sbSig;		/* unique value for SCSI block 0 */
    uint16_t 	sbBlkSize;	/* block size of device */
    uint32_t 	sbBlkCount;	/* number of blocks on device */
    uint16_t 	sbDevType;	/* device type */
    uint16_t 	sbDevId;	/* device id */
    uint32_t 	sbData;		/* not used */
    uint16_t 	sbDrvrCount;	/* driver descriptor count */
    uint16_t 	sbMap[247];	/* descriptor map */
d64 3
a66 3
    uint32_t 	ddBlock;	/* 1st driver's starting block (in sbBlkSize blocks!) */
    uint16_t 	ddSize;		/* size of 1st driver (512-byte blks) */
    uint16_t 	ddType;		/* system type (1 for Mac+) */
@


1.13
log
@The great de-typedef'ification concludes with u32 -> uint32_t. And a
bunch of consequent printf() format corrections.
@
text
@d1 1
a1 1
/*	$OpenBSD: dpme.h,v 1.12 2016/01/17 18:26:51 krw Exp $	*/
a44 3
//
// Defines
//
a49 6
//
// Types
//


// Physical block zero of the disk has this format
a103 15


//
// Global Constants
//


//
// Global Variables
//


//
// Forward declarations
//
@


1.12
log
@The great de-typedef'ification continues. u16 -> uint16_t.
@
text
@d1 1
a1 1
/*	$OpenBSD: dpme.h,v 1.11 2016/01/17 18:23:30 krw Exp $	*/
a55 1
typedef	unsigned long	u32;
d62 1
a62 1
    u32 	sbBlkCount;	/* number of blocks on device */
d65 1
a65 1
    u32 	sbData;		/* not used */
d73 1
a73 1
    u32 	ddBlock;	/* 1st driver's starting block (in sbBlkSize blocks!) */
d83 3
a85 3
    u32     dpme_map_entries        ;
    u32     dpme_pblock_start       ;
    u32     dpme_pblocks            ;
d88 3
a90 3
    u32     dpme_lblock_start       ;
    u32     dpme_lblocks            ;
    u32     dpme_flags		    ;
d102 2
a103 2
    u32     dpme_boot_block         ;
    u32     dpme_boot_bytes         ;
d108 1
a108 1
    u32     dpme_checksum           ;
d110 2
a111 2
    u32     dpme_boot_args[32]      ;
    u32     dpme_reserved_3[62]     ;
@


1.11
log
@The great de-typedef'ification continues. u8 -> uint8_t.
@
text
@d1 1
a1 1
/*	$OpenBSD: dpme.h,v 1.10 2016/01/17 16:26:26 krw Exp $	*/
a55 1
typedef	unsigned short	u16;
d61 2
a62 2
    u16 	sbSig;		/* unique value for SCSI block 0 */
    u16 	sbBlkSize;	/* block size of device */
d64 2
a65 2
    u16 	sbDevType;	/* device type */
    u16 	sbDevId;	/* device id */
d67 2
a68 2
    u16 	sbDrvrCount;	/* driver descriptor count */
    u16 	sbMap[247];	/* descriptor map */
d75 2
a76 2
    u16 	ddSize;		/* size of 1st driver (512-byte blks) */
    u16 	ddType;		/* system type (1 for Mac+) */
d82 2
a83 2
    u16     dpme_signature          ;
    u16     dpme_reserved_1         ;
@


1.10
log
@The great de-typedef'ification continues. DDMap -> struct ddmap.
@
text
@d1 1
a1 1
/*	$OpenBSD: dpme.h,v 1.9 2016/01/17 16:15:59 krw Exp $	*/
a55 1
typedef	unsigned char	u8;
d106 4
a109 4
    u8     *dpme_load_addr          ;
    u8     *dpme_load_addr_2        ;
    u8     *dpme_goto_addr          ;
    u8     *dpme_goto_addr_2        ;
@


1.9
log
@The great de-typedef'ification continues. Block0 -> struct block0.
@
text
@d1 1
a1 1
/*	$OpenBSD: dpme.h,v 1.8 2016/01/17 16:07:06 krw Exp $	*/
d73 1
a73 1
// Where &sbMap[0] is actually an array DDMap[sbDrvrCount]
d75 1
a75 1
struct DDMap {
a79 1
typedef struct DDMap DDMap;
@


1.8
log
@The great de-typedef'ification continues. DPME -> struct dpme.
@
text
@d1 1
a1 1
/*	$OpenBSD: dpme.h,v 1.7 2016/01/17 14:28:25 krw Exp $	*/
d62 1
a62 1
struct Block0 {
a71 1
typedef struct Block0 Block0;
@


1.7
log
@A/UX is no more, was m68k only, and we have no sentimental reasons for
keeping support.
@
text
@d1 1
a1 1
/*	$OpenBSD: dpme.h,v 1.6 2016/01/15 16:39:20 krw Exp $	*/
a117 1
typedef struct dpme DPME;
@


1.6
log
@Replace bitfield_get() and bitfield_set() abstraction with simple masking
operations since all the uses but 1 are for 1 bit fields. No functional
change intended.

Unhook bitfield.c from build.
@
text
@d1 1
a1 1
/*	$OpenBSD: dpme.h,v 1.5 2016/01/11 17:55:45 jasper Exp $	*/
a52 8
// A/UX only stuff (tradition!)
#define	dpme_bzb	dpme_boot_args
#define	BZBMAGIC 0xABADBABE	/* BZB magic number */
#define	FST	((u8) 0x1)	/* standard UNIX FS */
#define	FSTEFS	((u8) 0x2)	/* Autorecovery FS */
#define	FSTSFS	((u8) 0x3)	/* Swap FS */


a118 29



// A/UX only data structures (sentimental reasons?)

// BZB (Block Zero Block, but I can't remember the etymology)
// Where &dpme_boot_args[0] is actually the address of a struct bzb
// kludge to get around alignment junk
struct	bzb			/* block zero block format */
{
    u32  bzb_magic;		/* magic number */
    u8   bzb_cluster;		/* Autorecovery cluster grouping */
    u8   bzb_type;		/* FS type */
    u16  bzb_inode;		/* bad block inode number */
    u32  bzb_flags;
#define	BZB_ROOT	(1<<31)
#define	BZB_USR		(1<<30)
#define	BZB_CRIT	(1<<29)
#define	BZB_SLICE_SHIFT	16
#define	BZB_SLICE_MASK	0x1f
    u32  bzb_tmade;		/* time of FS creation */
    u32  bzb_tmount;		/* time of last mount */
    u32  bzb_tumount;		/* time of last umount */
    u32  bzb_fill2[7];		/* for expansion of ABM (ha!ha!) */
    u8   bzb_mount_point[64];	/* default mount point name */
};
typedef	struct bzb	BZB;


@


1.5
log
@- remove some unused data structures/fields
- unifdef notdef

ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dpme.h,v 1.4 2016/01/11 07:54:07 jasper Exp $	*/
a44 2
#include "bitfield.h"

d103 12
a114 1
    u32     dpme_flags;
a127 25
#define	dpme_diskdriver_set(p, v)	bitfield_set(&p->dpme_flags, 9, 1, v)
#define	dpme_chainable_set(p, v)	bitfield_set(&p->dpme_flags, 8, 1, v)

#define	dpme_os_specific_1_set(p, v)	bitfield_set(&p->dpme_flags, 8, 1, v)
#define	dpme_os_specific_2_set(p, v)	bitfield_set(&p->dpme_flags, 7, 1, v)
#define	dpme_os_pic_code_set(p, v)	bitfield_set(&p->dpme_flags, 6, 1, v)
#define	dpme_writable_set(p, v)		bitfield_set(&p->dpme_flags, 5, 1, v)
#define	dpme_readable_set(p, v)		bitfield_set(&p->dpme_flags, 4, 1, v)
#define	dpme_bootable_set(p, v)		bitfield_set(&p->dpme_flags, 3, 1, v)
#define	dpme_in_use_set(p, v)		bitfield_set(&p->dpme_flags, 2, 1, v)
#define	dpme_allocated_set(p, v)	bitfield_set(&p->dpme_flags, 1, 1, v)
#define	dpme_valid_set(p, v)		bitfield_set(&p->dpme_flags, 0, 1, v)

#define	dpme_diskdriver_get(p)		bitfield_get(p->dpme_flags, 9, 1)
#define	dpme_chainable_get(p)		bitfield_get(p->dpme_flags, 8, 1)

#define	dpme_os_specific_1_get(p)	bitfield_get(p->dpme_flags, 8, 1)
#define	dpme_os_specific_2_get(p)	bitfield_get(p->dpme_flags, 7, 1)
#define	dpme_os_pic_code_get(p)		bitfield_get(p->dpme_flags, 6, 1)
#define	dpme_writable_get(p)		bitfield_get(p->dpme_flags, 5, 1)
#define	dpme_readable_get(p)		bitfield_get(p->dpme_flags, 4, 1)
#define	dpme_bootable_get(p)		bitfield_get(p->dpme_flags, 3, 1)
#define	dpme_in_use_get(p)		bitfield_get(p->dpme_flags, 2, 1)
#define	dpme_allocated_get(p)		bitfield_get(p->dpme_flags, 1, 1)
#define	dpme_valid_get(p)		bitfield_get(p->dpme_flags, 0, 1)
d142 5
d155 1
a155 9
#define	bzb_root_set(p, v)		bitfield_set(&p->bzb_flags, 31, 1, v)
#define	bzb_usr_set(p, v)		bitfield_set(&p->bzb_flags, 30, 1, v)
#define	bzb_crit_set(p, v)		bitfield_set(&p->bzb_flags, 29, 1, v)
#define	bzb_slice_set(p, v)		bitfield_set(&p->bzb_flags, 20, 5, v)

#define	bzb_root_get(p)			bitfield_get(p->bzb_flags, 31, 1)
#define	bzb_usr_get(p)			bitfield_get(p->bzb_flags, 30, 1)
#define	bzb_crit_get(p)			bitfield_get(p->bzb_flags, 29, 1)
#define	bzb_slice_get(p)		bitfield_get(p->bzb_flags, 20, 5)
@


1.4
log
@add rcs ids
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a105 12
#if 0
    u32     dpme_reserved_2    : 23 ;  /* Bit 9 through 31.        */
    u32     dpme_os_specific_1 :  1 ;  /* Bit 8.                   */
    u32     dpme_os_specific_2 :  1 ;  /* Bit 7.                   */
    u32     dpme_os_pic_code   :  1 ;  /* Bit 6.                   */
    u32     dpme_writable      :  1 ;  /* Bit 5.                   */
    u32     dpme_readable      :  1 ;  /* Bit 4.                   */
    u32     dpme_bootable      :  1 ;  /* Bit 3.                   */
    u32     dpme_in_use        :  1 ;  /* Bit 2.                   */
    u32     dpme_allocated     :  1 ;  /* Bit 1.                   */
    u32     dpme_valid         :  1 ;  /* Bit 0.                   */
#endif
a147 9
// Alternate block map (aka bad block remaping) [Never really used]
struct abm		/* altblk map info stored in bzb */
{
    u32  abm_size;	/* size of map in bytes */
    u32  abm_ents;	/* number of used entries */
    u32  abm_start;	/* start of altblk map */
};
typedef	struct abm ABM;

a157 8
#if 0
    u16  bzb_root:1,		/* FS is a root FS */
	 bzb_usr:1,		/* FS is a usr FS */
	 bzb_crit:1,		/* FS is a critical FS */
	 bzb_rsrvd:8,		/* reserved for later use */
	 bzb_slice:5;		/* slice number to associate with plus one */
    u16  bzb_filler;		/* pad bitfield to 32 bits */
#endif
a160 1
    ABM  bzb_abm;		/* altblk map info */
@


1.3
log
@update for pdisk 0.8a2, from NetBSD, retaining our local changes;
summing it up:

- Clean up sources - fix naming, delete old email addresses
- Added support for display of Mac volume names
- Fix block 0 display to show logical offset of drivers
- Require confirmation of quit without write
- Fix iteration to not complain about missing devices
- Warn when creating/writing a map with more than 15 entries

and, most important, add do_update_dpme() which allows us to partition
OpenBSD slices without previous MacOS setup.

Tested with shared MacOS install on macppc, procedure there remains the
same.

grammer and spelling help and ok jmc@@

ok miod@@
@
text
@d1 2
@


1.2
log
@rm trailing whitespace
@
text
@d4 1
a4 1
// Written by Eryk Vershen (eryk@@apple.com)
d48 1
a48 1
#define	BLOCK0_SIGNATURE	0x4552	/* Signature value.         */
d51 1
a51 1
#define	DPME_SIGNATURE	0x504D
@


1.1
log
@Initial revision
@
text
@d22 17
a38 17
 *              All Rights Reserved 
 *  
 * Permission to use, copy, modify, and distribute this software and 
 * its documentation for any purpose and without fee is hereby granted, 
 * provided that the above copyright notice appears in all copies and 
 * that both the copyright notice and this permission notice appear in 
 * supporting documentation. 
 *  
 * APPLE COMPUTER DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE 
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
 * FOR A PARTICULAR PURPOSE. 
 *  
 * IN NO EVENT SHALL APPLE COMPUTER BE LIABLE FOR ANY SPECIAL, INDIRECT, OR 
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM 
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN ACTION OF CONTRACT, 
 * NEGLIGENCE, OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION 
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. 
@


1.1.1.1
log
@Import of pdisk from apple, BSD licensed code. Archive dated Feb 18 1998 
This is a HFS partition editing tool.
@
text
@@
