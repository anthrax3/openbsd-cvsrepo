head	1.20;
access;
symbols
	OPENBSD_6_2:1.20.0.6
	OPENBSD_6_2_BASE:1.20
	OPENBSD_6_1:1.20.0.8
	OPENBSD_6_1_BASE:1.20
	OPENBSD_6_0:1.20.0.4
	OPENBSD_6_0_BASE:1.20
	OPENBSD_5_9:1.20.0.2
	OPENBSD_5_9_BASE:1.20
	OPENBSD_5_8:1.3.0.40
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.32
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.36
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.34
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.30
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.28
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.26
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.24
	OPENBSD_5_0:1.3.0.22
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.20
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.18
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.14
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.16
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.12
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.10
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.8
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.6
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.4
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.2
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.2.0.16
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.14
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.12
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.10
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.8
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.6
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.1.1.1.0.6
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.4
	OPENBSD_3_0_BASE:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.2
	OPENBSD_2_9_BASE:1.1.1.1
	ver1:1.1.1.1
	apple19980218:1.1.1;
locks; strict;
comment	@ * @;


1.20
date	2016.01.30.17.09.11;	author krw;	state Exp;
branches;
next	1.19;
commitid	ckpV9XGgFAiDBI9u;

1.19
date	2016.01.29.22.51.43;	author krw;	state Exp;
branches;
next	1.18;
commitid	T4U3iDofClirvhXD;

1.18
date	2016.01.25.23.43.20;	author krw;	state Exp;
branches;
next	1.17;
commitid	Qe66eD6zrMyPrXqP;

1.17
date	2016.01.25.22.12.22;	author krw;	state Exp;
branches;
next	1.16;
commitid	kVpV4q40FW96TpRH;

1.16
date	2016.01.23.03.46.18;	author krw;	state Exp;
branches;
next	1.15;
commitid	HhlQ6dIQMjX8YGSD;

1.15
date	2016.01.22.12.31.04;	author krw;	state Exp;
branches;
next	1.14;
commitid	3OQZJKas0yPP6L3H;

1.14
date	2016.01.21.15.33.21;	author krw;	state Exp;
branches;
next	1.13;
commitid	YzEQpnBPgLX85u7F;

1.13
date	2016.01.18.17.57.35;	author krw;	state Exp;
branches;
next	1.12;
commitid	nIKs6pPbVKcIxae8;

1.12
date	2016.01.18.16.41.41;	author krw;	state Exp;
branches;
next	1.11;
commitid	bciL8XKP8aKEWDlM;

1.11
date	2016.01.18.15.30.00;	author krw;	state Exp;
branches;
next	1.10;
commitid	aMBITFjwes8vTDZh;

1.10
date	2016.01.17.19.39.20;	author krw;	state Exp;
branches;
next	1.9;
commitid	slCzBfkhwAcLWsXe;

1.9
date	2016.01.17.18.57.52;	author krw;	state Exp;
branches;
next	1.8;
commitid	Rl8zxjpMi2a93hiE;

1.8
date	2016.01.17.15.57.12;	author krw;	state Exp;
branches;
next	1.7;
commitid	9OUrU3poCOjYi22w;

1.7
date	2016.01.16.22.28.14;	author krw;	state Exp;
branches;
next	1.6;
commitid	IIP5iNpDONoW4Jjm;

1.6
date	2016.01.16.20.00.50;	author krw;	state Exp;
branches;
next	1.5;
commitid	2koPB3ak72axl95m;

1.5
date	2016.01.12.16.08.37;	author krw;	state Exp;
branches;
next	1.4;
commitid	SiCi2OiU3VeQsi4m;

1.4
date	2016.01.11.07.54.07;	author jasper;	state Exp;
branches;
next	1.3;
commitid	DI30r1mqHPQNkhTm;

1.3
date	2006.04.27.19.52.21;	author martin;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.09.08.13.08;	author todd;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.24.00.14.06;	author drahn;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.24.00.14.06;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Fold struct dpme into struct entry. Same reasons as for folding
struct block0 into struct partition_map. Easier to read code.
@
text
@/*	$OpenBSD: file_media.h,v 1.19 2016/01/29 22:51:43 krw Exp $	*/

/*
 * file_media.h -
 *
 * Written by Eryk Vershen
 */

/*
 * Copyright 1997,1998 by Apple Computer, Inc.
 *              All Rights Reserved
 *
 * Permission to use, copy, modify, and distribute this software and
 * its documentation for any purpose and without fee is hereby granted,
 * provided that the above copyright notice appears in all copies and
 * that both the copyright notice and this permission notice appear in
 * supporting documentation.
 *
 * APPLE COMPUTER DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE.
 *
 * IN NO EVENT SHALL APPLE COMPUTER BE LIABLE FOR ANY SPECIAL, INDIRECT, OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN ACTION OF CONTRACT,
 * NEGLIGENCE, OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef __file_media__
#define __file_media__

int	read_block0(int, struct partition_map *);
int	write_block0(int, struct partition_map *);

int	read_dpme(int, uint64_t, struct entry *);
int	write_dpme(int, uint64_t, struct entry *);

#endif /* __file_media__ */
@


1.19
log
@Fold struct block0 into struct partition map. There can be only one
and read/write_block0() can move the data from/to disk to/from
appropriate fields anywhere. Removes a bunch of dereferencing,
malloc'ing and pointer checking.
@
text
@d1 1
a1 1
/*	$OpenBSD: file_media.h,v 1.18 2016/01/25 23:43:20 krw Exp $	*/
d36 2
a37 2
int	read_dpme(int, uint64_t, struct dpme *);
int	write_dpme(int, uint64_t, struct dpme *);
@


1.18
log
@Use new read/write_block0 and read/write_dpme which handle any
endian or alignment issues forcefully. Removes need for convert_*
functions so unhook convert.c from build. read/write_block become
static functions inside file_media.c.

Tweak struct block0 to stop trying to handle alignment issues by clever
declaration. Rely on the new functions to accurately translate between
on-disk and in-memory layouts.

Enables pdisk to work on amd64 and likely other architectures if
it's ever desirable. Does bring back DEV_BSIZE to pdisk.c since the
in-memory structure will *not* be 512 bytes on other archs.
@
text
@d1 1
a1 1
/*	$OpenBSD: file_media.h,v 1.17 2016/01/25 22:12:22 krw Exp $	*/
d33 2
a34 2
int	read_block0(int, struct block0 *);
int	write_block0(int, struct block0 *);
@


1.17
log
@Add read/write_block0 and read/write_dpme functions, not yet used.
@
text
@d1 1
a1 1
/*	$OpenBSD: file_media.h,v 1.16 2016/01/23 03:46:18 krw Exp $	*/
a31 3

int	read_block(int, uint64_t, void *);
int	write_block(int, uint64_t, void *);
@


1.16
log
@Flip read_block() and write_block() back to taking sector addresses
instead of off_t values. Do the DEV_BSIZE multiplication in these two
functions.

Easier to read code and kills two #include <sys/param.h>.

Kill unused label.
@
text
@d1 1
a1 1
/*	$OpenBSD: file_media.h,v 1.15 2016/01/22 12:31:04 krw Exp $	*/
d35 6
@


1.15
log
@Merge read_block() and read_file_media() into read_block(). Ditto
write_block() and write_file_media(). One layer of read/write
wrappers for pread/pwrite should be enough for anyone.
@
text
@d1 1
a1 1
/*	$OpenBSD: file_media.h,v 1.14 2016/01/21 15:33:21 krw Exp $	*/
d33 2
a34 2
int	read_block(int, off_t, void *);
int	write_block(int, off_t, void *);
@


1.14
log
@Hoist all file opening and ioctl calls into main(), passing a pointer to
a valid map to edit(). Should enable pledging a la fdisk at some point.

Since edit() always gets a valid map (and maintains its validity even when
'I'nitializing a new one) many checks for (map == NULL) are junked.

Remove some dances around block sizes by using DEV_BSIZE everywhere
since we don't support non-DEV_BSIZE (a.k.a. 512-byte) sectors.

Remove many superfluous #include statements.
@
text
@d1 1
a1 1
/*	$OpenBSD: file_media.h,v 1.13 2016/01/18 17:57:35 krw Exp $	*/
d33 2
a34 2
long read_file_media(int, long long, unsigned long, void *);
long write_file_media(int, long long, unsigned long, void *);
@


1.13
log
@struct file_media had 1 field left. And one place where struct
file_media was actually stored. So move the last field (fd) into
the place formerly used to store pointer to the instance. As a
result we can just pass fd's around rather than pointers to a struct
containing a fd.

close_file_media() becomes empty but for a close(). So just use
close() and nuke close_file_media().
@
text
@d1 1
a1 1
/*	$OpenBSD: file_media.h,v 1.12 2016/01/18 16:41:41 krw Exp $	*/
a32 2

int open_file_as_media(char *, int);
@


1.12
log
@Discard a whack of double and triple checking lseek/read/write parameters.
Just use pread/pwrite and report error emanating from them. No more
uses of size_in_byte field of struct file_media, so toss that too.
@
text
@d1 1
a1 1
/*	$OpenBSD: file_media.h,v 1.11 2016/01/18 15:30:00 krw Exp $	*/
d34 3
a36 8
struct file_media {
    int		fd;
};

struct file_media *open_file_as_media(char *, int);
long read_file_media(struct file_media *, long long, unsigned long, void *);
long write_file_media(struct file_media *, long long, unsigned long, void *);
long close_file_media(struct file_media *m);
@


1.11
log
@os_reload_file_media() doesn't do anything except tell you if you passed it
a NULL pointer. And the result is ignored. Nuke it. This removes the only
use of the 'regular_file' field of struct file_media. So nuke that too.
@
text
@d1 1
a1 1
/*	$OpenBSD: file_media.h,v 1.10 2016/01/17 19:39:20 krw Exp $	*/
a34 1
    long long	size_in_bytes;  /* offset granularity */
@


1.10
log
@Reduce namespace pollution by eliminating parameter names from forward
declarations.
@
text
@d1 1
a1 1
/*	$OpenBSD: file_media.h,v 1.9 2016/01/17 18:57:52 krw Exp $	*/
a36 1
    int		regular_file;
a42 1
long os_reload_file_media(struct file_media *m);
@


1.9
log
@Remove a bunch of ridiculous and uninformative comments like "// Defines".
@
text
@d1 1
a1 1
/*	$OpenBSD: file_media.h,v 1.8 2016/01/17 15:57:12 krw Exp $	*/
d40 3
a42 3
struct file_media *open_file_as_media(char *file, int oflag);
long read_file_media(struct file_media *m, long long offset, unsigned long count, void *address);
long write_file_media(struct file_media *m, long long offset, unsigned long count, void *address);
@


1.8
log
@Let the great de-typedef'ification begin. MEDIA -> struct file_media *.
@
text
@d1 1
a1 1
/*	$OpenBSD: file_media.h,v 1.7 2016/01/16 22:28:14 krw Exp $	*/
a33 9
/*
 * Defines
 */


/*
 * Types
 */

a39 14

/*
 * Global Constants
 */


/*
 * Global Variables
 */


/*
 * Forward declarations
 */
@


1.7
log
@Move last field (size_in_bytes) in struct media to struct file_media
and replace MEDIA with FILE_MEDIA everywhere. media.h becomes unused.
@
text
@d1 1
a1 1
/*	$OpenBSD: file_media.h,v 1.6 2016/01/16 20:00:50 krw Exp $	*/
a41 1
typedef struct file_media *FILE_MEDIA;
d63 5
a67 5
FILE_MEDIA open_file_as_media(char *file, int oflag);
long read_file_media(FILE_MEDIA m, long long offset, unsigned long count, void *address);
long write_file_media(FILE_MEDIA m, long long offset, unsigned long count, void *address);
long close_file_media(FILE_MEDIA m);
long os_reload_file_media(FILE_MEDIA m);
@


1.6
log
@Start peeling away excess layers of abstraction.

Since 'file' is the only kind of media, no need to call the appropriate
functions via pointers. Just call the _file_ variants directly.
Nuke the fields do_read(), do_write(), do_close(), do_os_reload()
and the functions read_media(), write_media(), close_media() and
os_reload_media().

No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: file_media.h,v 1.5 2016/01/12 16:08:37 krw Exp $	*/
a32 2
#include "media.h"

d42 7
d64 5
a68 5
MEDIA open_file_as_media(char *file, int oflag);
long read_file_media(MEDIA m, long long offset, unsigned long count, void *address);
long write_file_media(MEDIA m, long long offset, unsigned long count, void *address);
long close_file_media(MEDIA m);
long os_reload_file_media(MEDIA m);
@


1.5
log
@Remove media interation types, structures and functions. They are not used
anywhere, as evidenced by everything still compiling after they are gone.
@
text
@d1 1
a1 1
/*	$OpenBSD: file_media.h,v 1.4 2016/01/11 07:54:07 jasper Exp $	*/
d60 4
@


1.4
log
@add rcs ids
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a59 1
MEDIA_ITERATOR create_file_iterator(void);
@


1.3
log
@update for pdisk 0.8a2, from NetBSD, retaining our local changes;
summing it up:

- Clean up sources - fix naming, delete old email addresses
- Added support for display of Mac volume names
- Fix block 0 display to show logical offset of drivers
- Require confirmation of quit without write
- Fix iteration to not complain about missing devices
- Warn when creating/writing a map with more than 15 entries

and, most important, add do_update_dpme() which allows us to partition
OpenBSD slices without previous MacOS setup.

Tested with shared MacOS install on macppc, procedure there remains the
same.

grammer and spelling help and ok jmc@@

ok miod@@
@
text
@d1 2
@


1.2
log
@rm trailing whitespace
@
text
@d4 1
a4 1
 * Written by Eryk Vershen (eryk@@apple.com)
@


1.1
log
@Initial revision
@
text
@d9 17
a25 17
 *              All Rights Reserved 
 *  
 * Permission to use, copy, modify, and distribute this software and 
 * its documentation for any purpose and without fee is hereby granted, 
 * provided that the above copyright notice appears in all copies and 
 * that both the copyright notice and this permission notice appear in 
 * supporting documentation. 
 *  
 * APPLE COMPUTER DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE 
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
 * FOR A PARTICULAR PURPOSE. 
 *  
 * IN NO EVENT SHALL APPLE COMPUTER BE LIABLE FOR ANY SPECIAL, INDIRECT, OR 
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM 
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN ACTION OF CONTRACT, 
 * NEGLIGENCE, OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION 
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. 
@


1.1.1.1
log
@Import of pdisk from apple, BSD licensed code. Archive dated Feb 18 1998 
This is a HFS partition editing tool.
@
text
@@
