head	1.23;
access;
symbols
	OPENBSD_2_9:1.22.0.6
	OPENBSD_2_9_BASE:1.22
	OPENBSD_2_8:1.22.0.4
	OPENBSD_2_8_BASE:1.22
	OPENBSD_2_7:1.22.0.2
	OPENBSD_2_7_BASE:1.22
	OPENBSD_2_6:1.16.0.2
	OPENBSD_2_6_BASE:1.16
	OPENBSD_2_5:1.6.0.2
	OPENBSD_2_5_BASE:1.6;
locks; strict;
comment	@.\" @;


1.23
date	2001.05.30.02.11.40;	author deraadt;	state dead;
branches;
next	1.22;

1.22
date	2000.03.18.22.55.58;	author aaron;	state Exp;
branches;
next	1.21;

1.21
date	2000.03.05.00.28.50;	author aaron;	state Exp;
branches;
next	1.20;

1.20
date	2000.02.19.21.46.46;	author aaron;	state Exp;
branches;
next	1.19;

1.19
date	2000.01.24.07.25.37;	author kjell;	state Exp;
branches;
next	1.18;

1.18
date	2000.01.18.21.49.01;	author aaron;	state Exp;
branches;
next	1.17;

1.17
date	2000.01.07.05.20.16;	author kjell;	state Exp;
branches;
next	1.16;

1.16
date	99.10.12.05.05.00;	author ericj;	state Exp;
branches;
next	1.15;

1.15
date	99.07.08.14.06.31;	author aaron;	state Exp;
branches;
next	1.14;

1.14
date	99.07.08.03.20.45;	author aaron;	state Exp;
branches;
next	1.13;

1.13
date	99.07.08.03.19.14;	author aaron;	state Exp;
branches;
next	1.12;

1.12
date	99.07.08.03.10.03;	author aaron;	state Exp;
branches;
next	1.11;

1.11
date	99.07.06.19.15.01;	author kjell;	state Exp;
branches;
next	1.10;

1.10
date	99.06.04.02.45.17;	author aaron;	state Exp;
branches;
next	1.9;

1.9
date	99.05.28.22.59.59;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	99.05.16.19.56.13;	author alex;	state Exp;
branches;
next	1.7;

1.7
date	99.04.29.17.57.35;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	99.04.02.16.21.35;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	99.03.06.23.18.23;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	99.02.25.00.20.54;	author kjell;	state Exp;
branches;
next	1.3;

1.3
date	99.02.10.22.12.52;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	99.02.07.01.54.18;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	99.02.07.00.48.29;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.23
log
@Remove ipf.  Darren Reed has interpreted his (old, new, whichever)
licence in a way that makes ipf not free according to the rules we
established over 5 years ago, at www.openbsd.org/goals.html (and those
same basic rules govern the other *BSD projects too).  Specifically,
Darren says that modified versions are not permitted.  But software
which OpenBSD uses and redistributes must be free to all (be they
people or companies), for any purpose they wish to use it, including
modification, use, peeing on, or even integration into baby mulching
machines or atomic bombs to be dropped on Australia.  Furthermore, we
know of a number of companies using ipf with modification like us, who
are now in the same situation, and we hope that some of them will work
with us to fill this gap that now exists in OpenBSD (temporarily, we
hope).
@
text
@.\"	$OpenBSD: ipf.8,v 1.22 2000/03/18 22:55:58 aaron Exp $
.Dd January 6, 2000
.Dt IPF 8
.Os
.Sh NAME
.Nm ipf
.Nd "manage IP packet filtering and firewalling rules"
.Sh SYNOPSIS
.Nm ipf
.Op Fl AdDEInoPrsUvVyzZ
.Op Fl l Ar category
.Op Fl F Ar list
.Op Fl F Ar table
.Op Fl f Ar filename
.Sh DESCRIPTION
The
.Nm
utility allows the insertion and removal of TCP/IP packet filtering and
firewalling rules.
.Nm
can be used for anything from very simple tasks (i.e., preventing a host from
replying to ping packets), to installing complex rulesets for a firewall to
protect an entire network.
.Pp
Based on the specified rules,
.Nm
can explicitly deny/permit any inbound or outbound packet on any interface,
filter by IP networks or hosts, selectively filter packets by protocol and/or
protocol options, keep packet state information for TCP, UDP, and ICMP packet
flows, track fragment state information for IP packets (applying the same rules
to all fragments), and much more.
.Pp
.Nm
provides special capabilities for the most common Internet protocols.
Both TCP and UDP packets may be filtered by port number or port range, or ICMP
packets by type/code.
Rules may filter packets on any arbitrary combination of
TCP flags, IP options, IP security classes, or Type of Service (TOS).
.Nm
also supports inverted host/net matching.
.Pp
To get started, follow these steps:
.Bl -enum -offset indent
.It
Edit
.Pa /etc/rc.conf
and set
.Cm ipfilter=YES .
This will cause
.Nm
to install the ruleset specified in
.Pa /etc/ipf.rules
each time the system is booted.
.It
Check that the kernel has been compiled with
.Cm option IPFILTER
(see
.Xr options 4 ) .
Refer to
.Xr afterboot 8
for further instructions on compiling a custom kernel.
.It
Edit
.Pa /etc/sysctl.conf
and set
.Cm net.inet.ip.forwarding=1
if this machine is to act as a firewall that also routes traffic or does
Network Address Translation (NAT).
.El
.Pp
Once these steps are complete a rule file may be created.
A very simple rule file might contain the following:
.Pp
.Dl pass in from any to any
.Dl pass out from any to any
.Pp
Here we're passing all packets and not doing any filtering.
This is a
recommended starting point since it allows the current configuration to be
tested before formulating and installing a more restrictive ruleset.
For example, the following:
.Pp
.Dl "block in on we0 proto tcp from foo/32 to any"
.Pp
This would block all incoming TCP packets on interface
.Dq we0
from host
.Dq foo
to any internal destination.
If this file is
.Pa /etc/ipf.rules
(the default location), the following command will flush the kernel's current
ruleset, install the new ruleset, and enable
.Pq Fl E
.Nm ipf :
.Pp
.Dl "ipf -Fa -f /etc/ipf.rules -E"
.Pp
(This is the exact command executed by the
.Pa /etc/rc
script at boot-time if
.Cm ipfilter=YES
in
.Pa /etc/rc.conf . )
.Pp
Please see
.Xr ipf 5
for a complete description of the
.Nm
rules file format and the example files in
.Pa /usr/share/ipf .
.Pp
In addition to
.Dq active
rulesets (those installed into the kernel which dictate the current filtering
policies),
.Nm
can maintain a separate
.Dq inactive
ruleset simultaneously.
Inactive rulesets are useful for debugging pending or
proposed changes to the active ruleset (see
.Fl I
option below).
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl A
Apply changes to the active ruleset.
This is the default.
.It Fl I
Apply changes to the inactive ruleset.
.It Fl D
Disable the filter (if enabled).
.It Fl E
Enable the filter (if disabled).
.It Fl F Ar list
Flush filter lists.
.Ar list
is one of
.Sq i
(input rules),
.Sq o
(output rules),
or
.Sq a
(all filtering rules).
.It Fl F Ar table
Flush entries from state tables.
If
.Ar table
is
.Sq s ,
.Nm
removes any state information about connections that are non-fully established.
If
.Sq S ,
.Nm
removes the entire state table.
Only one of the two options may be specified.
A fully established connection will appear in
.Ic ipfstat -s output
as
.Dq 4/4 ;
any deviations indicate a connection that has not completed the three-way
handshake.
.It Fl P
Add rules as temporary entries in the authentication rule table.
.It Fl V
Show version information.
This will display the version information compiled
into the ipf binary and retrieve it from the kernel code (if running/present).
If it is present in the kernel, information about its current state will be
displayed (whether logging is active, default filtering, etc).
.It Fl d
Enable debug mode.
Causes a hexdump of filter rules to be generated as it processes each one.
.It Fl f Ar filename
Read, parse, and process the
.Nm
rules contained in
.Ar filename .
If
.Ar filename
is
.Ql - ,
.Nm
reads from the standard input.
All valid rules are installed into the kernel's internal rule list using the
interface described by
.Xr ipf 4 .
Blank lines and lines beginning with
.Ql #
(comments) are ignored.
.It Fl l Ar category
Packet logging.
.Ar category
is one of
.Cm pass ,
.Cm block ,
or
.Cm nomatch .
Any packet which exits filtering and matches the set category is logged.
This
is useful for causing all packets which don't match any of the loaded rules to
be logged.
.It Fl n
No change.
Prevent
.Nm
from actually changing the state of the in-kernel filtering configuration.
.It Fl o
Force rules to be added/deleted to/from the output list rather than the
(default) input list.
.It Fl r
Remove matching filter rules rather than add them to the in-kernel lists.
.It Fl s
Swap the active and inactive rulesets.
.It Fl v
Enable verbose mode.
.Nm
will echo each of the successfully processed rules to the standard output.
The
original rule and any error messages that result will be echoed to standard
error.
.It Fl y
Force
.Nm
to synchronize the IP filter's in-kernel network interface list with the
current system interface list.
In particular, if an interface's IP address
changes (i.e., due to a DHCP operation),
.Nm
must be executed with this option.
.It Fl z
For each rule in the input file, display its statistics, then reset them to 0.
.It Fl Z
Globally reset all in-kernel filtering statistics to 0 (does not affect
fragment or state statistics).
.El
.Sh EXAMPLES
To flush all in-kernel filtering lists, install the ruleset contained in
.Pa /etc/ipf.rules
into the active list, and enable IP filtering:
.Pp
.Dl ipf -A -Fa -f /etc/ipf.rules -E
.Pp
It is advisable to work with an inactive filtering list before commiting new
rules to the active in-kernel filtering list.
To load a ruleset into the inactive list:
.Pp
.Dl ipf -I -Fa -f /etc/ipf.rules
.Pp
The verbose
.Pq Fl v
option is useful for verifying that rules are being processed as
expected and is often used in conjunction with the inactive
.Pq Fl I
ruleset:
.Pp
.Dl ipf -I -Fa -vf /etc/ipf.rules
.Pp
After the inactive ruleset has been tested and seems to be processed correctly,
use the
.Fl s
option to swap it with the active ruleset so that it represents the new
filtering policy for the system:
.Pp
.Dl ipf -s
.Pp
Consider a system manager who administers
.Nm
remotely and has made changes to the
.Pa /etc/ipf.rules
file on the remote system.
The following command sequence is noteworthy:
.Pp
.Dl ipf -I -Fa -f /etc/ipf.rules
.Dl ipf -s; sleep 10; ipf -s
.Pp
The first command installs the new ruleset into the inactive filtering list.
The second command first swaps the inactive (new) rules with the active (old)
rules.
After entering the second command, type some characters.
If the characters are echoed the new ruleset is possibly valid.
If not, within 10
seconds the old ruleset will be re-installed.
This trick is useful for minimizing service disruptions.
.Sh NOTES
Rules are checked in the order they are specified.
The last matching rule wins, except when the
.Dq quick
keyword is present (see
.Xr ipf 5 ) .
.Pp
Note that
.Fl F Ns No a
does not affect the state table.
To view the current state table, use the
.Xr ipfstat 8
program:
.Pp
.Dl ipfstat -s
.Pp
To remove all active state entries:
.Pp
.Dl ipf -FS
.Sh FILES
.Bl -tag -width /usr/share/ipf/example.* -compact
.It /usr/share/ipf/example.*
sample rule files
.It /dev/ipfauth
ipf authentication socket
.It /dev/ipl
ipf logging socket
.It /dev/ipstate
ipf state socket
.El
.Sh SEE ALSO
.Xr ipftest 1 ,
.Xr ipf 4 ,
.Xr ipl 4 ,
.Xr ipnat 4 ,
.Xr ipf 5 ,
.Xr ipfstat 8 ,
.Xr ipmon 8 ,
.Xr ipnat 8
.Pp
http://coombs.anu.edu.au/~avalon
@


1.22
log
@Remove hard sentence breaks, and some other cleanup along the way.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipf.8,v 1.21 2000/03/05 00:28:50 aaron Exp $
@


1.21
log
@Finish standardizing options list introduction.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipf.8,v 1.20 2000/02/19 21:46:46 aaron Exp $
d34 4
a37 3
provides special capabilities for the most common Internet protocols. Both
TCP and UDP packets may be filtered by port number or port range, or ICMP
packets by type/code. Rules may filter packets on any arbitrary combination of
d71 2
a72 2
Once these steps are complete a rule file may be created. A very
simple rule file might contain the following:
d77 2
a78 1
Here we're passing all packets and not doing any filtering. This is a
d80 2
a81 2
tested before formulating and installing a more restrictive ruleset. For
example, the following:
d89 2
a90 1
to any internal destination. If this file is
d120 2
a121 1
ruleset simultaneously. Inactive rulesets are useful for debugging pending or
d129 2
a130 1
Apply changes to the active ruleset. This is the default.
d149 2
a150 1
Flush entries from state tables. If
d159 2
a160 1
removes the entire state table. Only one of the two options may be specified.
d170 2
a171 1
Show version information.  This will display the version information compiled
d176 2
a177 2
Enable debug mode. Causes a hexdump of filter rules to be generated as it
processes each one.
d203 2
a204 1
Any packet which exits filtering and matches the set category is logged. This
d208 2
a209 1
No change. Prevent
d222 2
a223 1
will echo each of the successfully processed rules to the standard output. The
d230 2
a231 1
current system interface list. In particular, if an interface's IP address
d249 2
a250 2
rules to the active in-kernel filtering list. To load a ruleset into the
inactive list:
d275 2
a276 1
file on the remote system. The following command sequence is noteworthy:
d283 6
a288 4
rules. After entering the second command, type some characters. If the
characters are echoed the new ruleset is possibly valid. If not, within 10
seconds the old ruleset will be re-installed. This trick is useful for
minimizing service disruptions.
d290 2
a291 2
Rules are checked in the order they are specified. The last matching rule
wins, except when the
d298 2
a299 1
does not affect the state table. To view the current state table, use the
a329 2


@


1.20
log
@Re-order SEE ALSO entries.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipf.8,v 1.19 2000/01/24 07:25:37 kjell Exp $
d122 1
a122 1
The following options are available:
@


1.19
log
@correct Xrs. marc@@snafu.org.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipf.8,v 1.18 2000/01/18 21:49:01 aaron Exp $
d304 1
a309 1
.Xr ipftest 1 ,
@


1.18
log
@Repair duplicate word occurences; (as found by a Perl script sent to us from
Tom Christiansen <tchrist@@perl.com>).
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipf.8,v 1.17 2000/01/07 05:20:16 kjell Exp $
d309 1
a309 1
.Xr ipftest 8 ,
@


1.17
log
@Update documentation to reflect 3.3.6 changes.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipf.8,v 1.16 1999/10/12 05:05:00 ericj Exp $
d23 1
a23 1
to protect an entire network.
@


1.16
log
@correct ipfilter url
@
text
@d1 2
a2 2
.\"	$OpenBSD: ipf.8,v 1.15 1999/07/08 14:06:31 aaron Exp $
.Dd July 7, 1999
d10 1
a10 1
.Op Fl AdDEInorsUvyzZ
d160 7
d205 2
a208 2
.It Fl r
Remove matching filter rules rather than add them to the in-kernel lists.
@


1.15
log
@whoops, forgot -E flag in an example
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipf.8,v 1.14 1999/07/08 03:20:45 aaron Exp $
d306 2
a307 1
http://coombs.anu.edu.au/ipfilter
@


1.14
log
@clarify what we mean by firewall
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipf.8,v 1.13 1999/07/08 03:19:14 aaron Exp $
d227 1
a227 1
.Dl ipf -A -Fa -f /etc/ipf.rules
@


1.13
log
@complete SYNOPSIS and document -l option
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipf.8,v 1.12 1999/07/08 03:10:03 aaron Exp $
d66 2
a67 2
if this machine is to act as a firewall. This step is not necessary for hosts
which are only filtering packets for themselves, but won't hurt either way.
@


1.12
log
@complete rewrite; this man page is now useful
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipf.8,v 1.11 1999/07/06 19:15:01 kjell Exp $
d11 3
d180 11
@


1.11
log
@Whoops. Missed man page. removed -U
@
text
@d1 2
a2 2
.\"	$OpenBSD: ipf.8,v 1.10 1999/06/04 02:45:17 aaron Exp $
.Dd February 6, 1999
d7 1
a7 1
.Nd "alters packet filtering lists for IP packet input and output"
d10 1
a10 3
.Op Fl AdDEInorsvyzZ
.Op Fl l Ar block|pass|nomatch
.Op Fl F Ar i|o|a|s|S
d13 1
d15 105
a119 13
opens the filenames listed (treating
.Sq \-
as stdin) and parses the
file for a set of rules which are to be added or removed from the packet
filter rule set.
.Pp
Each rule processed by
.Nm
is added to the kernel's internal lists if there are no parsing problems.
Rules are added to the end of the internal lists, matching the order in
which they appear when given to
.Nm ipf .
.Sh OPTIONS
d122 3
a124 4
Set the list to make changes to the active list (default).
.It Fl d
Turn debug mode on.  Causes a hexdump of filter rules to be generated as
it processes each one.
d126 1
a126 1
Disable the filter (if enabled).  Not effective for loadable kernel versions.
d128 32
a159 18
Enable the filter (if disabled).  Not effective for loadable kernel versions.
.It Fl F Ar i|o|a
This option specifies which filter list to flush.  The parameter should
either be "i" (input), "o" (output) or "a" (remove all filter rules).
Either a single letter or an entire word starting with the appropriate
letter maybe used.  This option maybe before, or after, any other with
the order on the command line being that used to execute options.
.It Fl F Ar s|S
To flush entries from the state table, the
.Fl -F
option is used in
conjunction with either "s" (removes state information about any non-fully
established connections) or "S" (deletes the entire state table).  Only
one of the two options may be given.  A fully established connection
will show up in
.Li ipfstat -s
output as 4/4, with deviations either way indicating it is not
fully established any more.
d161 8
a168 1
This option specifies which files
d170 7
a176 14
should use to get input from for modifying the packet filter rule lists.
.It Fl I
Set the list to make changes to the inactive list.
.It Fl l Ar pass|block|nomatch
Use of the
.Fl l
flag toggles default logging of packets.  Valid arguments to this option are
.Ar pass ,
.Ar block
and
.Ar nomatch .
When an option is set, any packet which exits filtering and matches the
set category is logged.  This is most useful for causing all packets
which don't match any of the loaded rules to be logged.
d178 1
a178 1
This flag (no-change) prevents
d180 1
a180 2
from actually making any ioctl calls or doing anything which would
alter the currently running kernel.
d182 4
a185 2
Force rules by default to be added/deleted to/from the output list, rather
than the (default) input list.
d187 1
a187 3
Remove matching filter rules rather than add them to the internal lists
.It Fl s
Swap the active filter list in use to be the "other" one.
d189 5
a193 1
Turn verbose mode on.  Displays information relating to rule processing.
d195 7
a201 2
Manually resync the in-kernel interface list maintained by IP Filter with
the current interface status list.
d203 1
a203 2
For each rule in the input file, reset the statistics for it to zero and
display the statistics prior to them being zeroed.
d205 2
a206 2
Zero global statistics held in the kernel for filtering only (this doesn't
affect fragment or state statistics).
d208 63
d272 9
a280 15
.Bl -tag -width /usr/share/ipf -compact
.It Pa /usr/share/ipf
location of sample configuration files
.It Pa /dev/ipauth
name of the
.Nm
auth socket
.It Pa /dev/ipl
name of the
.Nm
logging socket
.It Pa /dev/ipstate
name of the
.Nm
state socket
a282 1
.Xr ipftest 1 ,
d288 1
d292 2
a293 6
http://coombs.anu.edu.au/ipfilter/
.Sh DIAGNOSTICS
Needs to be run as root for the packet filtering lists to actually
be affected inside the kernel.
.Sh BUGS
If you find any, please send email to me at darrenr@@pobox.com.
@


1.10
log
@start to remove non-escaped trailing whitespace, it can confuse troff; pjanzen@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipf.8,v 1.9 1999/05/28 22:59:59 aaron Exp $
d10 1
a10 1
.Op Fl AdDEInorsUvyzZ
a84 3
.It Fl U
(SOLARIS 2 ONLY) Block packets traveling along the data stream which aren't
recognized as IP packets.  They will be printed out on the console.
@


1.9
log
@more .El madness
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipf.8,v 1.8 1999/05/16 19:56:13 alex Exp $
d105 1
a105 1
name of the 
d109 1
a109 1
name of the 
d113 1
a113 1
name of the 
@


1.8
log
@Cleanup xrefs under SEE ALSO.  Specifically:

  - Sort xrefs by section, and then alphabetically.
  - Add missing commas between xref items.
  - Remove commas from the last xref entry.
  - Remove duplicate entries.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipf.8,v 1.7 1999/04/29 17:57:35 espie Exp $
d99 1
d116 1
d126 1
a126 1
.br
@


1.7
log
@Unfortunate side effect of the mandoc macros:
.Nd takes at most 9 arguments.

Hence, if the description is longer than that, you lose.
Unless you get it to be just one argument, by quoting it.

Automated search of other such manpages to do, or a way to fix
.Nd if someone knows enough troff...
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipf.8,v 1.6 1999/04/02 16:21:35 aaron Exp $
a116 1
.Xr ipnat 8 ,
d122 2
a123 1
.Xr ipmon 8
@


1.6
log
@.Pp macros do not belong immiedately after .Sh section header lines
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipf.8,v 1.5 1999/03/06 23:18:23 deraadt Exp $
d7 1
a7 1
.Nd alters packet filtering lists for IP packet input and output
@


1.5
log
@match usage and man page
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipf.8,v 1.4 1999/02/25 00:20:54 kjell Exp $
a14 1
.Pp
d16 3
a18 1
opens the filenames listed (treating "\-" as stdin) and parses the
d102 1
a102 1
Location of sample configuration files
d104 1
a104 1
Name of the 
d108 1
a108 1
Name of the 
d112 1
a112 1
Name of the 
@


1.4
log
@Moved to section 8. change title.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipf.8,v 1.3 1999/02/10 22:12:52 deraadt Exp $
d13 1
a13 2
.Fl f Ar filename
.Op Fl f Ar filename ...
@


1.3
log
@Xr repairs
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipf.8,v 1.2 1999/02/07 01:54:18 millert Exp $
d3 1
a3 1
.Dt IPF 1
@


1.2
log
@convert to mdoc
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipf.8,v 1.1 1999/02/07 00:48:29 deraadt Exp $
d117 1
a117 1
.Xr ipnat 1 ,
@


1.1
log
@man pages belong in section 8
@
text
@d1 18
a18 24
.\"	$OpenBSD: ipf.1,v 1.13 1998/09/15 09:55:44 pattonme Exp $
.TH IPF 1
.SH NAME
ipf \- alters packet filtering lists for IP packet input and output
.SH SYNOPSIS
.B ipf
[
.B \-AdDEInorsUvyzZ
] [
.B \-l
<block|pass|nomatch>
] [
.B \-F
<i|o|a|s|S>
]
.B \-f
<\fIfilename\fP>
[
.B \-f
<\fIfilename\fP>
[...]]
.SH DESCRIPTION
.PP
\fBipf\fP opens the filenames listed (treating "\-" as stdin) and parses the
d21 3
a23 2
.PP
Each rule processed by \fBipf\fP
d26 5
a30 4
which they appear when given to \fBipf\fP.
.SH OPTIONS
.TP
.B \-A
d32 1
a32 2
.TP
.B \-d
d35 1
a35 2
.TP
.B \-D
d37 1
a37 2
.TP
.B \-E
d39 1
a39 2
.TP
.BR \-F \0<i|o|a>
d45 5
a49 4
.TP
.BR \-F \0<s|S>
To flush entries from the state table, the \fB-F\fP option is used in
conjuction with either "s" (removes state information about any non-fully
d52 5
a56 4
will show up in \fBipfstat -s\fP output as 4/4, with deviations either
way indicating it is not fully established any more.
.TP
.BR \-f \0<filename>
d58 3
a60 4
\fBipf\fP should use to get input from for modifying the packet filter rule
lists.
.TP
.B \-I
d62 8
a69 4
.TP
.B \-l \0<pass|block|nomatch>
Use of the \fB-l\fP flag toggles default logging of packets.  Valid
arguments to this option are \fBpass\fP, \fBblock\fP and \fBnomatch\fP.
d73 6
a78 6
.TP
.B \-n
This flag (no-change) prevents \fBipf\fP from actually making any ioctl
calls or doing anything which would alter the currently running kernel.
.TP
.B \-o
d81 1
a81 2
.TP
.B \-r
d83 1
a83 2
.TP
.B \-s
d85 4
a88 6
.TP
.B \-U
(SOLARIS 2 ONLY) Block packets travelling along the data stream which aren't
recognised as IP packets.  They will be printed out on the console.
.TP
.B \-v
d90 1
a90 2
.TP
.B \-y
d93 1
a93 2
.TP
.B \-z
d96 1
a96 2
.TP
.B \-Z
d99 25
a123 11
.DT
.SH FILES
\fI/usr/share/ipf\fP -- sample configuration files.
.br
/dev/ipauth
.br
/dev/ipl
.br
/dev/ipstate
.SH SEE ALSO
ipftest(1), ipnat(1), ipf(4), ipl(4), ipnat(4), ipf(5), ipnat(5), ipfstat(8), ipmon(8)
d126 1
a126 2
.SH DIAGNOSTICS
.PP
d129 2
a130 3
.SH BUGS
.PP
If you find any, please send email to me at darrenr@@pobox.com
@

