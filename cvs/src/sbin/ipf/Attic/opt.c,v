head	1.17;
access;
symbols
	OPENBSD_2_9:1.16.0.2
	OPENBSD_2_9_BASE:1.16
	OPENBSD_2_8:1.14.0.4
	OPENBSD_2_8_BASE:1.14
	OPENBSD_2_7:1.14.0.2
	OPENBSD_2_7_BASE:1.14
	OPENBSD_2_6:1.10.0.4
	OPENBSD_2_6_BASE:1.10
	OPENBSD_2_5:1.10.0.2
	OPENBSD_2_5_BASE:1.10
	OPENBSD_2_4:1.9.0.2
	OPENBSD_2_4_BASE:1.9
	OPENBSD_2_3:1.8.0.2
	OPENBSD_2_3_BASE:1.8
	OPENBSD_2_2:1.7.0.2
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.6.0.4
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.6.0.2
	OPENBSD_2_0_BASE:1.6;
locks; strict;
comment	@ * @;


1.17
date	2001.05.30.02.11.42;	author deraadt;	state dead;
branches;
next	1.16;

1.16
date	2001.01.30.04.26.01;	author kjell;	state Exp;
branches;
next	1.15;

1.15
date	2001.01.17.05.00.59;	author fgsch;	state Exp;
branches;
next	1.14;

1.14
date	2000.03.13.23.40.19;	author kjell;	state Exp;
branches;
next	1.13;

1.13
date	2000.02.16.22.34.21;	author kjell;	state Exp;
branches;
next	1.12;

1.12
date	2000.02.01.19.30.00;	author kjell;	state Exp;
branches;
next	1.11;

1.11
date	99.12.15.05.20.24;	author kjell;	state Exp;
branches;
next	1.10;

1.10
date	99.02.05.05.58.42;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	98.09.15.09.55.44;	author pattonme;	state Exp;
branches;
next	1.8;

1.8
date	98.01.26.04.13.37;	author dgregor;	state Exp;
branches;
next	1.7;

1.7
date	97.06.23.17.11.28;	author kstailey;	state Exp;
branches;
next	1.6;

1.6
date	96.10.08.07.33.31;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	96.07.18.05.11.02;	author dm;	state Exp;
branches;
next	1.4;

1.4
date	96.06.23.14.30.55;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.05.10.21.39.52;	author dm;	state Exp;
branches;
next	1.2;

1.2
date	96.01.25.05.41.27;	author dm;	state Exp;
branches;
next	1.1;

1.1
date	96.01.07.02.33.33;	author dm;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Remove ipf.  Darren Reed has interpreted his (old, new, whichever)
licence in a way that makes ipf not free according to the rules we
established over 5 years ago, at www.openbsd.org/goals.html (and those
same basic rules govern the other *BSD projects too).  Specifically,
Darren says that modified versions are not permitted.  But software
which OpenBSD uses and redistributes must be free to all (be they
people or companies), for any purpose they wish to use it, including
modification, use, peeing on, or even integration into baby mulching
machines or atomic bombs to be dropped on Australia.  Furthermore, we
know of a number of companies using ipf with modification like us, who
are now in the same situation, and we hope that some of them will work
with us to fill this gap that now exists in OpenBSD (temporarily, we
hope).
@
text
@/*	$OpenBSD: opt.c,v 1.16 2001/01/30 04:26:01 kjell Exp $	*/

/*
 * Copyright (C) 1993-2000 by Darren Reed.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that this notice is preserved and due credit is given
 * to the original author and the contributors.
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/time.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netinet/in_systm.h>
#include <netinet/ip.h>
#ifndef	linux
#include <netinet/ip_var.h>
#endif
#include <netinet/tcp.h>
#include <net/if.h>
#include <arpa/inet.h>
#include <netinet/ip_fil_compat.h>
#include <netinet/tcpip.h>
#include <netinet/ip_fil.h>
#include "ipf.h"

#if !defined(lint)
static const char sccsid[] = "@@(#)opt.c	1.8 4/10/96 (C) 1993-2000 Darren Reed";
static const char rcsid[] = "@@(#)$IPFilter: opt.c,v 2.2 2000/03/13 22:10:26 darrenr Exp $";
#endif

extern	int	opts;

struct	ipopt_names	ionames[] ={
	{ IPOPT_NOP,	0x000001,	1,	"nop" },
	{ IPOPT_RR,	0x000002,	7,	"rr" },		/* 1 route */
	{ IPOPT_ZSU,	0x000004,	3,	"zsu" },
	{ IPOPT_MTUP,	0x000008,	3,	"mtup" },
	{ IPOPT_MTUR,	0x000010,	3,	"mtur" },
	{ IPOPT_ENCODE,	0x000020,	3,	"encode" },
	{ IPOPT_TS,	0x000040,	8,	"ts" },		/* 1 TS */
	{ IPOPT_TR,	0x000080,	3,	"tr" },
	{ IPOPT_SECURITY,0x000100,	11,	"sec" },
	{ IPOPT_SECURITY,0x000100,	11,	"sec-class" },
	{ IPOPT_LSRR,	0x000200,	7,	"lsrr" },	/* 1 route */
	{ IPOPT_E_SEC,	0x000400,	3,	"e-sec" },
	{ IPOPT_CIPSO,	0x000800,	3,	"cipso" },
	{ IPOPT_SATID,	0x001000,	4,	"satid" },
	{ IPOPT_SSRR,	0x002000,	7,	"ssrr" },	/* 1 route */
	{ IPOPT_ADDEXT,	0x004000,	3,	"addext" },
	{ IPOPT_VISA,	0x008000,	3,	"visa" },
	{ IPOPT_IMITD,	0x010000,	3,	"imitd" },
	{ IPOPT_EIP,	0x020000,	3,	"eip" },
	{ IPOPT_FINN,	0x040000,	3,	"finn" },
	{ 0, 		0,	0,	(char *)NULL }     /* must be last */
};

struct	ipopt_names	secclass[] = {
	{ IPSO_CLASS_RES4,	0x01,	0, "reserv-4" },
	{ IPSO_CLASS_TOPS,	0x02,	0, "topsecret" },
	{ IPSO_CLASS_SECR,	0x04,	0, "secret" },
	{ IPSO_CLASS_RES3,	0x08,	0, "reserv-3" },
	{ IPSO_CLASS_CONF,	0x10,	0, "confid" },
	{ IPSO_CLASS_UNCL,	0x20,	0, "unclass" },
	{ IPSO_CLASS_RES2,	0x40,	0, "reserv-2" },
	{ IPSO_CLASS_RES1,	0x80,	0, "reserv-1" },
	{ 0, 0, 0, NULL }	/* must be last */
};


static	u_char	seclevel __P((char *));
int addipopt __P((char *, struct ipopt_names *, int, char *));

static u_char seclevel(slevel)
char *slevel;
{
	struct ipopt_names *so;

	for (so = secclass; so->on_name; so++)
		if (!strcasecmp(slevel, so->on_name))
			break;

	if (!so->on_name) {
		fprintf(stderr, "no such security level: %s\n", slevel);
		return 0;
	}
	return (u_char)so->on_value;
}


int addipopt(op, io, len, class)
char *op;
struct ipopt_names *io;
int len;
char *class;
{
	int olen = len;
	struct in_addr ipadr;
	u_short val;
	u_char lvl;
	char *s;

	if ((len + io->on_siz) > 48) {
		fprintf(stderr, "options too long\n");
		return 0;
	}
	len += io->on_siz;
	*op++ = io->on_value;
	if (io->on_siz > 1) {
		s = op;
		*op++ = io->on_siz;
		*op++ = IPOPT_MINOFF;

		if (class) {
			switch (io->on_value)
			{
			case IPOPT_SECURITY :
				lvl = seclevel(class);
				*(op - 1) = lvl;
				break;
			case IPOPT_LSRR :
			case IPOPT_SSRR :
				ipadr.s_addr = inet_addr(class);
				s[IPOPT_OLEN] = IPOPT_MINOFF - 1 + 4;
				bcopy((char *)&ipadr, op, sizeof(ipadr));
				break;
			case IPOPT_SATID :
				val = atoi(class);
				bcopy((char *)&val, op, 2);
				break;
			}
		}

		op += io->on_siz - 3;
		if (len & 3) {
			*op++ = IPOPT_NOP;
			len++;
		}
	}
	if (opts & OPT_DEBUG)
		fprintf(stderr, "bo: %s %d %#x: %d\n",
			io->on_name, io->on_value, io->on_bit, len);
	return len - olen;
}


u_32_t buildopts(cp, op, len)
char *cp, *op;
int len;
{
	struct ipopt_names *io;
	u_32_t msk = 0;
	char *s, *t;
	int inc;

	for (s = strtok(cp, ","); s; s = strtok(NULL, ",")) {
		if ((t = strchr(s, '=')))
			*t++ = '\0';
		for (io = ionames; io->on_name; io++) {
			if (strcasecmp(s, io->on_name) || (msk & io->on_bit))
				continue;
			if ((inc = addipopt(op, io, len, t))) {
				op += inc;
				len += inc;
			}
			msk |= io->on_bit;
			break;
		}
		if (!io->on_name) {
			fprintf(stderr, "unknown IP option name %s\n", s);
			return 0;
		}
	}
	*op++ = IPOPT_EOL;
	len++;
	return len;
}
@


1.16
log
@reimplement local ipf mods and import some missed patches
@
text
@d1 1
a1 1
/*	$OpenBSD: opt.c,v 1.15 2001/01/17 05:00:59 fgsch Exp $	*/
@


1.15
log
@1st part of ipf userland code.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d25 1
a25 1
#include <netinet/ip_compat.h>
@


1.14
log
@Import of Darren Reed's IPFilter 3.3.11. See sbin/ipf/HISTORY for detailed
changelog. Documentation changes are now way behind. Volunteers?
@
text
@d4 1
a4 1
 * Copyright (C) 1993-1998 by Darren Reed.
d25 1
a25 1
#include <netinet/ip_fil_compat.h>
d31 2
a32 2
static const char sccsid[] = "@@(#)opt.c	1.8 4/10/96 (C) 1993-1995 Darren Reed";
static const char rcsid[] = "@@(#)$IPFilter: opt.c,v 2.1 1999/08/04 17:30:15 darrenr Exp $";
@


1.13
log
@Import IPFilter 3.3.9. Primarily, bugfixes since 3.3.8. See sbin/ipf/HISTORY
for details.
@
text
@@


1.12
log
@Update to IPFilter 3.3.8. Man pages still to go. See sbin/ipf/HISTORY
for details.
@
text
@@


1.11
log
@Import of Darren Reed's IPFilter 3.3.4, including OpenBSD patches.

Many, many enhancements and improvements, including new in-kernel
proxies, enhancements to logging, and many bugfixes.

Note: Man pages have not yet been re-converted to mdoc.
@
text
@d1 2
a2 1
/* $OpenBSD$ */
d32 1
a32 1
static const char rcsid[] = "@@(#)$Id: opt.c,v 2.1 1999/08/04 17:30:15 darrenr Exp $";
@


1.10
log
@ipf 3.2.10; work by kjell
@
text
@d1 1
a1 1
/*     $OpenBSD: opt.c,v 1.9 1998/09/15 09:55:44 pattonme Exp $      */
d24 1
a24 5
#if defined(__OpenBSD__)
# include <netinet/ip_fil_compat.h>
#else
# include <netinet/ip_compat.h>
#endif
d31 1
a31 1
static const char rcsid[] = "@@(#)$Id: opt.c,v 1.9 1998/09/15 09:55:44 pattonme Exp $";
@


1.9
log
@Updated to v3.2.9 of Darren's codebase. His code reimplements variable
locking, replaces u_long's with u_32_t to properly handle 64bit archs.
Wrapped OpenBSD specific preprocessor logic.
@
text
@d1 1
a1 1
/*     $OpenBSD: opt.c,v 1.8 1998/01/26 04:13:37 dgregor Exp $      */
d3 1
a3 1
 * Copyright (C) 1993-1997 by Darren Reed.
d35 1
a35 1
static const char rcsid[] = "@@(#)$Id$";
@


1.8
log
@IPF 3.2.3
@
text
@d1 1
a1 1
/*     $OpenBSD$      */
d24 5
a28 1
#include "ip_fil_compat.h"
d30 1
a30 1
#include "ip_fil.h"
d35 1
a35 1
static const char rcsid[] = "@@(#)$Id: opt.c,v 2.0.2.9.2.1 1997/11/12 10:58:44 darrenr Exp $";
@


1.7
log
@fix tag
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d3 1
a3 1
 * (C)opyright 1993,1994,1995 by Darren Reed.
d11 1
d18 1
d20 1
a21 1
#include <netinet/tcpip.h>
d23 1
d25 1
d29 3
a31 3
#ifndef	lint
static	char	sccsid[] = "@@(#)opt.c	1.8 4/10/96 (C) 1993-1995 Darren Reed";
static	char	rcsid[] = "$DRId: opt.c,v 2.0.1.1 1997/01/09 15:14:44 darrenr Exp $";
d73 3
d93 57
a149 1
u_long buildopts(cp, op)
d151 1
d154 1
a154 2
	u_char lvl;
	u_long msk = 0;
d156 1
a156 1
	int len = 0;
d164 3
a166 19
			if ((len + io->on_siz) > 48) {
				fprintf(stderr, "options too long\n");
				return 0;
			}
			len += io->on_siz;
			*op++ = io->on_value;
			if (io->on_siz > 1) {
				*op++ = io->on_siz;
				*op++ = IPOPT_MINOFF;

				if (t && !strcasecmp(s, "sec-class")) {
					lvl = seclevel(t);
					*(op - 1) = lvl;
				}
				op += io->on_siz - 3;
				if (len & 3) {
					*op++ = IPOPT_NOP;
					len++;
				}
a167 4
			if (opts & OPT_DEBUG)
				fprintf(stderr, "bo: %s %d %#x: %d\n",
					io->on_name, io->on_value,
					io->on_bit, len);
@


1.6
log
@Prototype & Stylistic fixes for high -W gcc levels
@
text
@d1 1
d27 1
a27 1
static	char	rcsid[] = "$Id: opt.c,v 1.5 1996/07/18 05:11:02 dm Exp $";
@


1.5
log
@ipfilter 3.1.0
@
text
@d20 1
d26 1
a26 1
static	char	rcsid[] = "$Id: opt.c,v 1.1.1.1 1996/06/23 07:27:14 darrenr Exp $";
@


1.4
log
@update rcsid
@
text
@a0 2
/*	$OpenBSD$	*/

d25 1
@


1.3
log
@ipfilter 3.0.4
@
text
@d1 2
@


1.2
log
@IP filter 3.0.1
@
text
@d24 1
a24 1
static	char	sccsid[] = "@@(#)opt.c	1.6 11/11/95 (C) 1993-1995 Darren Reed";
d61 1
a61 1
	{ IPSO_CLASS_RES1,	0x40,	0, "reserv-1" },
d110 1
a110 1
					*op = lvl;
@


1.1
log
@from beurton@@fnet.fr:  Darren Reed's IP filter
@
text
@d20 1
a20 1
#include <netinet/ip_fil.h>
@
