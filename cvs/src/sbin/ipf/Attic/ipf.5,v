head	1.27;
access;
symbols
	OPENBSD_2_9:1.26.0.2
	OPENBSD_2_9_BASE:1.26
	OPENBSD_2_8:1.25.0.4
	OPENBSD_2_8_BASE:1.25
	OPENBSD_2_7:1.25.0.2
	OPENBSD_2_7_BASE:1.25
	OPENBSD_2_6:1.16.0.2
	OPENBSD_2_6_BASE:1.16
	OPENBSD_2_5:1.12.0.2
	OPENBSD_2_5_BASE:1.12
	OPENBSD_2_4:1.11.0.2
	OPENBSD_2_4_BASE:1.11
	OPENBSD_2_3:1.10.0.2
	OPENBSD_2_3_BASE:1.10
	OPENBSD_2_2:1.9.0.2
	OPENBSD_2_2_BASE:1.9
	OPENBSD_2_1:1.8.0.2
	OPENBSD_2_1_BASE:1.8
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4;
locks; strict;
comment	@# @;


1.27
date	2001.05.30.02.11.39;	author deraadt;	state dead;
branches;
next	1.26;

1.26
date	2001.01.30.04.26.01;	author kjell;	state Exp;
branches;
next	1.25;

1.25
date	2000.04.26.21.04.00;	author deraadt;	state Exp;
branches;
next	1.24;

1.24
date	2000.04.13.19.59.39;	author kjell;	state Exp;
branches;
next	1.23;

1.23
date	2000.04.12.21.47.58;	author aaron;	state Exp;
branches;
next	1.22;

1.22
date	2000.03.18.22.55.58;	author aaron;	state Exp;
branches;
next	1.21;

1.21
date	2000.03.14.21.31.34;	author aaron;	state Exp;
branches;
next	1.20;

1.20
date	2000.03.06.21.46.55;	author aaron;	state Exp;
branches;
next	1.19;

1.19
date	2000.02.19.21.46.46;	author aaron;	state Exp;
branches;
next	1.18;

1.18
date	2000.01.24.07.25.37;	author kjell;	state Exp;
branches;
next	1.17;

1.17
date	2000.01.07.05.20.15;	author kjell;	state Exp;
branches;
next	1.16;

1.16
date	99.09.09.19.20.21;	author aaron;	state Exp;
branches;
next	1.15;

1.15
date	99.07.09.21.48.16;	author kjell;	state Exp;
branches;
next	1.14;

1.14
date	99.07.08.05.05.10;	author kjell;	state Exp;
branches;
next	1.13;

1.13
date	99.06.04.02.45.17;	author aaron;	state Exp;
branches;
next	1.12;

1.12
date	99.02.05.05.58.41;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	98.09.15.09.55.44;	author pattonme;	state Exp;
branches;
next	1.10;

1.10
date	98.01.26.04.13.34;	author dgregor;	state Exp;
branches;
next	1.9;

1.9
date	97.07.14.01.21.41;	author angelos;	state Exp;
branches;
next	1.8;

1.8
date	97.04.09.11.44.27;	author kstailey;	state Exp;
branches;
next	1.7;

1.7
date	97.04.09.11.34.31;	author kstailey;	state Exp;
branches;
next	1.6;

1.6
date	97.02.26.14.09.22;	author kstailey;	state Exp;
branches;
next	1.5;

1.5
date	97.02.11.22.23.38;	author kstailey;	state Exp;
branches;
next	1.4;

1.4
date	96.07.18.05.11.01;	author dm;	state Exp;
branches;
next	1.3;

1.3
date	96.06.23.14.30.53;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.01.25.05.41.25;	author dm;	state Exp;
branches;
next	1.1;

1.1
date	96.01.07.02.33.32;	author dm;	state Exp;
branches;
next	;


desc
@@


1.27
log
@Remove ipf.  Darren Reed has interpreted his (old, new, whichever)
licence in a way that makes ipf not free according to the rules we
established over 5 years ago, at www.openbsd.org/goals.html (and those
same basic rules govern the other *BSD projects too).  Specifically,
Darren says that modified versions are not permitted.  But software
which OpenBSD uses and redistributes must be free to all (be they
people or companies), for any purpose they wish to use it, including
modification, use, peeing on, or even integration into baby mulching
machines or atomic bombs to be dropped on Australia.  Furthermore, we
know of a number of companies using ipf with modification like us, who
are now in the same situation, and we hope that some of them will work
with us to fill this gap that now exists in OpenBSD (temporarily, we
hope).
@
text
@.\"	$OpenBSD: ipf.5,v 1.26 2001/01/30 04:26:01 kjell Exp $
.\"
.TH IPF 5
.SH NAME
ipf \- IP packet filter rule syntax
.SH DESCRIPTION
.PP
A rule file for \fBipf\fP may have any name or even be stdin.  As
\fBipfstat\fP produces parseable rules as output when displaying the internal
kernel filter lists, it is quite plausible to use its output to feed back
into \fBipf\fP.  Thus, to remove all filters on input packets, the following
could be done:
.nf

\fC# ipfstat \-i | ipf \-rf \-\fP
.fi
.SH GRAMMAR
.PP
The format used by \fBipf\fP for construction of filtering rules can be
described using the following grammar in BNF:
\fC
.nf
filter-rule = [ insert ] action in-out [ options ] [ tos ] [ ttl ]
	      [ proto ] [ ip ] [ group ].

insert	= "@@" decnumber .
action	= block | "pass" | log | "count" | skip | auth | call .
in-out	= "in" | "out" .
options	= [ log ] [ "quick" ] [ "on" interface-name [ dup ] [ froute ] ] .
tos	= "tos" decnumber | "tos" hexnumber .
ttl	= "ttl" decnumber .
proto	= "proto" protocol .
ip	= srcdst [ flags ] [ with withopt ] [ icmp ] [ keep ] .
group	= [ "head" decnumber ] [ "group" decnumber ] .

block	= "block" [ return-icmp[return-code] | "return-rst" ] .
auth    = "auth" | "preauth" .
log	= "log" [ "body" ] [ "first" ] [ "or-block" ] [ "level" loglevel ] .
call	= "call" [ "now" ] function-name .
skip	= "skip" decnumber .
dup	= "dup-to" interface-name[":"ipaddr] .
froute	= "fastroute" | "to" interface-name .
protocol = "tcp/udp" | "udp" | "tcp" | "icmp" | decnumber .
srcdst	= "all" | fromto .
fromto	= "from" [ "!" ] object "to" [ "!" ] object .

return-icmp = "return-icmp" | "return-icmp-as-dest" .
object	= addr [ port-comp | port-range ] .
addr	= "any" | nummask | host-name [ "mask" ipaddr | "mask" hexnumber ] .
port-comp = "port" compare port-num .
port-range = "port" port-num range port-num .
flags	= "flags" flag { flag } [ "/" flag { flag } ] .
with	= "with" | "and" .
icmp	= "icmp-type" icmp-type [ "code" decnumber ] .
return-code = "("icmp-code")" .
keep	= "keep" "state" | "keep" "frags" .
loglevel = facility"."priority | priority .

nummask	= host-name [ "/" decnumber ] .
host-name = ipaddr | hostname | "any" .
ipaddr	= host-num "." host-num "." host-num "." host-num .
host-num = digit [ digit [ digit ] ] .
port-num = service-name | decnumber .

withopt = [ "not" | "no" ] opttype [ withopt ] .
opttype = "ipopts" | "short" | "frag" | "opt" ipopts  .
optname	= ipopts [ "," optname ] .
ipopts  = optlist | "sec-class" [ secname ] .
secname	= seclvl [ "," secname ] .
seclvl  = "unclass" | "confid" | "reserv-1" | "reserv-2" | "reserv-3" |
	  "reserv-4" | "secret" | "topsecret" .
icmp-type = "unreach" | "echo" | "echorep" | "squench" | "redir" |
	    "timex" | "paramprob" | "timest" | "timestrep" | "inforeq" |
	    "inforep" | "maskreq" | "maskrep"  | decnumber .
icmp-code = decumber | "net-unr" | "host-unr" | "proto-unr" | "port-unr" |
	    "needfrag" | "srcfail" | "net-unk" | "host-unk" | "isolate" |
	    "net-prohib" | "host-prohib" | "net-tos" | "host-tos" |
	    "filter-prohib" | "host-preced" | "cutoff-preced" .
optlist	= "nop" | "rr" | "zsu" | "mtup" | "mtur" | "encode" | "ts" |
	  "tr" | "sec" | "lsrr" | "e-sec" | "cipso" | "satid" | "ssrr" |
	  "addext" | "visa" | "imitd" | "eip" | "finn" .
facility = "kern" | "user" | "mail" | "daemon" | "auth" | "syslog" |
	   "lpr" | "news" | "uucp" | "cron" | "ftp" | "authpriv" |
	   "audit" | "logalert" | "local0" | "local1" | "local2" |
	   "local3" | "local4" | "local5" | "local6" | "local7" .
priority = "emerg" | "alert" | "crit" | "err" | "warn" | "notice" |
	   "info" | "debug" . 

hexnumber = "0" "x" hexstring .
hexstring = hexdigit [ hexstring ] .
decnumber = digit [ decnumber ] .

compare = "=" | "!=" | "<" | ">" | "<=" | ">=" | "eq" | "ne" | "lt" |
	  "gt" | "le" | "ge" .
range	= "<>" | "><" .
hexdigit = digit | "a" | "b" | "c" | "d" | "e" | "f" .
digit	= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" .
flag	= "F" | "S" | "R" | "P" | "A" | "U" .
.fi
.PP
This syntax is somewhat simplified for readability, some combinations
that match this grammar are disallowed by the software because they do
not make sense (such as tcp \fBflags\fP for non-TCP packets).
.SH FILTER RULES
.PP
The "briefest" valid rules are (currently) no-ops and are of the form:
.nf
       block in all
       pass in all
       log out all
       count in all
.fi
.PP
Filter rules are checked in order, with the last matching rule
determining the fate of the packet (but see the \fBquick\fP option,
below).
.PP
Filters are installed by default at the end of the kernel's filter
lists, prepending the rule with \fB@@n\fP will cause it to be inserted
as the n'th entry in the current list. This is especially useful when
modifying and testing active filter rulesets. See ipf(1) for more
information.
.SH ACTIONS
.PP
The action indicates what to do with the packet if it matches the rest
of the filter rule. Each rule MUST have an action. The following
actions are recognised:
.TP
.B block
indicates that the packet should be flagged to be dropped. In response
to blocking a packet, the filter may be instructed to send a reply
packet, either an ICMP packet (\fBreturn-icmp\fP), an ICMP packet
masquerading as being from the original packet's destination
(\fBreturn-icmp-as-dest\fP), or a TCP "reset" (\fBreturn-rst\fP).  An
ICMP packet may be generated in response to any IP packet, and its
type may optionally be specified, but a TCP reset may only be used
with a rule which is being applied to TCP packets.  When using
\fBreturn-icmp\fP or \fBreturn-icmp-as-dest\fP, it is possible to specify
the actual unreachable `type'.  That is, whether it is a network
unreachable, port unreachable or even administratively
prohibitied. This is done by enclosing the ICMP code associated with
it in parenthesis directly following \fBreturn-icmp\fP or
\fBreturn-icmp-as-dest\fP as follows:
.nf
        block return-icmp(11) ...
.fi
.PP
Would return a Type-Of-Service (TOS) ICMP unreachable error.
.TP
.B pass
will flag the packet to be let through the filter.  
.TP
.B log
causes the packet to be logged (as described in the LOGGING section
below) and has no effect on whether the packet will be allowed through
the filter.
.TP
.B count
causes the packet to be included in the accounting statistics kept by
the filter, and has no effect on whether the packet will be allowed through
the filter. These statistics are viewable with ipfstat(8).
.TP
.B call
this action is used to invoke the named function in the kernel, which
must conform to a specific calling interface. Customised actions and
semantics can thus be implemented to supplement those available. This
feature is for use by knowledgeable hackers, and is not currently
documented.
.TP
.B "skip <n>"
causes the filter to skip over the next \fIn\fP filter rules.  If a rule is
inserted or deleted inside the region being skipped over, then the value of
\fIn\fP is adjusted appropriately.
.TP
.B auth
this allows authentication to be performed by a user-space program running
and waiting for packet information to validate.  The packet is held for a
period of time in an internal buffer whilst it waits for the program to return
to the kernel the \fIreal\fP flags for whether it should be allowed through
or not.  Such a program might look at the source address and request some sort
of authentication from the user (such as a password) before allowing the
packet through or telling the kernel to drop it if from an unrecognised source.
.TP
.B preauth
tells the filter that for packets of this class, it should look in the
pre-authenticated list for further clarification.  If no further matching
rule is found, the packet will be dropped (the FR_PREAUTH is not the same
as FR_PASS).  If a further matching rule is found, the result from that is
used in its instead.  This might be used in a situation where a person
\fIlogs in\fP to the firewall and it sets up some temporary rules defining
the access for that person.
.PP
The next word must be either \fBin\fP or \fBout\fP.  Each packet
moving through the kernel is either inbound (just been received on an
interface, and moving towards the kernel's protocol processing) or
outbound (transmitted or forwarded by the stack, and on its way to an
interface). There is a requirement that each filter rule explicitly
state which side of the I/O it is to be used on.
.SH OPTIONS
.PP
The list of options is brief, and all are indeed optional. Where
options are used, they must be present in the order shown here. These
are the currently supported options:
.TP
.B log
indicates that, should this be the last matching rule, the packet
header will be written to the \fBipl\fP log (as described in the
LOGGING section below).
.TP
.B quick
allows "short-cut" rules in order to speed up the filter or override
later rules.  If a packet matches a filter rule which is marked as
\fBquick\fP, this rule will be the last rule checked, allowing a
"short-circuit" path to avoid processing later rules for this
packet. The current status of the packet (after any effects of the
current rule) will determine whether it is passed or blocked.
.IP
If this option is missing, the rule is taken to be a "fall-through"
rule, meaning that the result of the match (block/pass) is saved and
that processing will continue to see if there are any more matches.
.TP
.B on
allows an interface name to be incorporated into the matching
procedure. Interface names are as printed by "netstat \-i". If this
option is used, the rule will only match if the packet is going
through that interface in the specified direction (in/out). If this
option is absent, the rule is taken to be applied to a packet
regardless of the interface it is present on (i.e. on all interfaces).
Filter rulesets are common to all interfaces, rather than having a
filter list for each interface.
.IP
This option is especially useful for simple IP-spoofing protection:
packets should only be allowed to pass inbound on the interface from
which the specified source address would be expected, others may be
logged and/or dropped.
.TP
.B dup-to
causes the packet to be copied, and the duplicate packet to be sent
outbound on the specified interface, optionally with the destination
IP address changed to that specified. This is useful for off-host
logging, using a network sniffer.
.TP
.B to
causes the packet to be moved to the outbound queue on the
specified interface. This can be used to circumvent kernel routing
decisions, and even to bypass the rest of the kernel processing of the
packet (if applied to an inbound rule). It is thus possible to
construct a firewall that behaves transparently, like a filtering hub
or switch, rather than a router. The \fBfastroute\fP keyword is a
synonym for this option.
.SH MATCHING PARAMETERS
.PP 
The keywords described in this section are used to describe attributes
of the packet to be used when determining whether rules match or don't
match. The following general-purpose attributes are provided for
matching, and must be used in this order:
.TP
.B tos
packets with different Type-Of-Service values can be filtered.
Individual service levels or combinations can be filtered upon.  The
value for the TOS mask can either be represented as a hex number or a
decimal integer value.
.TP
.B ttl
packets may also be selected by their Time-To-Live value.  The value given in
the filter rule must exactly match that in the packet for a match to occur.
This value can only be given as a decimal integer value.
.TP
.B proto
allows a specific protocol to be matched against.  All protocol names
found in \fB/etc/protocols\fP are recognised and may be used.
However, the protocol may also be given as a DECIMAL number, allowing
for rules to match your own protocols, or new ones which would
out-date any attempted listing.
.IP
The special protocol keyword \fBtcp/udp\fP may be used to match either
a TCP or a UDP packet, and has been added as a convenience to save
duplication of otherwise-identical rules.
.\" XXX grammar should reflect this (/etc/protocols)
.PP
The \fBfrom\fP and \fBto\fP keywords are used to match against IP
addresses (and optionally port numbers). Rules must specify BOTH
source and destination parameters.
.PP 
IP addresses may be specified in one of two ways: as a numerical
address\fB/\fPmask, or as a hostname \fBmask\fP netmask.  The hostname
may either be a valid hostname, from either the hosts file or DNS
(depending on your configuration and library) or of the dotted numeric
form.  There is no special designation for networks but network names
are recognised.  Note that having your filter rules depend on DNS
results can introduce an avenue of attack, and is discouraged.
.PP
There is a special case for the hostname \fBany\fP which is taken to
be 0.0.0.0/0 (see below for mask syntax) and matches all IP addresses.
Only the presence of "any" has an implied mask, in all other
situations, a hostname MUST be accompanied by a mask.  It is possible
to give "any" a hostmask, but in the context of this language, it is
non-sensical.
.PP
The numerical format "x\fB/\fPy" indicates that a mask of y
consecutive 1 bits set is generated, starting with the MSB, so a y value
of 16 would give 0xffff0000. The symbolic "x \fBmask\fP y" indicates
that the mask y is in dotted IP notation or a hexadecimal number of
the form 0x12345678.  Note that all the bits of the IP address
indicated by the bitmask must match the address on the packet exactly;
there isn't currently a way to invert the sense of the match, or to
match ranges of IP addresses which do not express themselves easily as
bitmasks (anthropomorphization; it's not just for breakfast anymore).
.PP
If a \fBport\fP match is included, for either or both of source and
destination, then it is only applied to
.\" XXX - "may only be" ? how does this apply to other protocols? will it not match, or will it be ignored?
TCP and UDP packets. If there is no \fBproto\fP match parameter,
packets from both protocols are compared. This is equivalent to "proto
tcp/udp".  When composing \fBport\fP comparisons, either the service
name or an integer port number may be used. Port comparisons may be
done in a number of forms, with a number of comparison operators, or
port ranges may be specified. When the port appears as part of the
\fBfrom\fP object, it matches the source port number, when it appears
as part of the \fBto\fP object, it matches the destination port number.
See the examples for more information.
.PP
The \fBall\fP keyword is essentially a synonym for "from any to any"
with no other match parameters.
.PP
Following the source and destination matching parameters, the
following additional parameters may be used:
.TP
.B with
is used to match irregular attributes that some packets may have
associated with them.  To match the presence of IP options in general,
use \fBwith ipopts\fP. To match packets that are too short to contain
a complete header, use \fBwith short\fP. To match fragmented packets,
use \fBwith frag\fP.  For more specific filtering on IP options,
individual options can be listed.
.IP
Before any parameter used after the \fBwith\fP keyword, the word
\fBnot\fP or \fBno\fP may be inserted to cause the filter rule to only
match if the option(s) is not present.
.IP
Multiple consecutive \fBwith\fP clauses are allowed.  Alternatively,
the keyword \fBand\fP may be used in place of \fBwith\fP, this is
provided purely to make the rules more readable ("with ... and ...").
When multiple clauses are listed, all those must match to cause a
match of the rule.
.\" XXX describe the options more specifically in a separate section
.TP
.B flags
is only effective for TCP filtering.  Each of the letters possible
represents one of the possible flags that can be set in the TCP
header.  The association is as follows:
.LP
.nf
        F - FIN
        S - SYN
        R - RST
        P - PUSH
        A - ACK
        U - URG
.fi
.IP
The various flag symbols may be used in combination, so that "SA"
would represent a SYN-ACK combination present in a packet.  There is
nothing preventing the specification of combinations, such as "SFR",
that would not normally be generated by law-abiding TCP
implementations.  However, to guard against weird aberrations, it is
necessary to state which flags you are filtering against.  To allow
this, it is possible to set a mask indicating which TCP flags you wish
to compare (i.e., those you deem significant).  This is done by
appending "/<flags>" to the set of TCP flags you wish to match
against, e.g.:
.LP
.nf
	... flags S
			# becomes "flags S/AUPRFS" and will match
			# packets with ONLY the SYN flag set.

	... flags SA
			# becomes "flags SA/AUPRFS" and will match any
			# packet with only the SYN and ACK flags set.

	... flags S/SA
			# will match any packet with just the SYN flag set
			# out of the SYN-ACK pair; the common "establish"
			# keyword action.  "S/SA" will NOT match a packet
			# with BOTH SYN and ACK set, but WILL match "SFP".
.fi
.TP
.B icmp-type
is only effective when used with \fBproto icmp\fP and must NOT be used
in conjuction with \fBflags\fP.  There are a number of types, which can be
referred to by an abbreviation recognised by this language, or the numbers
with which they are associated can be used.  The most important from
a security point of view is the ICMP redirect.
.SH KEEP HISTORY
.PP
The second last parameter which can be set for a filter rule is whether or not
to record historical information for that packet, and what sort to keep. The
following information can be kept:
.TP
.B state
keeps information about the flow of a communication session. State can
be kept for TCP, UDP, and ICMP packets.
.TP
.B frags
keeps information on fragmented packets, to be applied to later
fragments.
.PP
allowing packets which match these to flow straight through, rather
than going through the access control list.
.SH GROUPS
The last pair of parameters control filter rule "grouping".  By default, all
filter rules are placed in group 0 if no other group is specified.  To add a
rule to a non-default group, the group must first be started by creating a
group \fIhead\fP.  If a packet matches a rule which is the \fIhead\fP of a
group, the filter processing then switches to the group, using that rule as
the default for the group.  If \fBquick\fP is used with a \fBhead\fP rule, rule
processing isn't stopped until it has returned from processing the group.
.PP
A rule may be both the head for a new group and a member of a non-default
group (\fBhead\fP and \fBgroup\fP may be used together in a rule).
.TP
.B "head <n>"
indicates that a new group (number n) should be created.
.TP
.B "group <n>"
indicates that the rule should be put in group (number n) rather than group 0.
.SH LOGGING
.PP
When a packet is logged, with either the \fBlog\fP action or option,
the headers of the packet are written to the \fBipl\fP packet logging
psuedo-device. Immediately following the \fBlog\fP keyword, the
following qualifiers may be used (in order):
.TP
.B body
indicates that the first 128 bytes of the packet contents will be
logged after the headers. 
.TP
.B first
If log is being used in conjunction with a "keep" option, it is recommended
that this option is also applied so that only the triggering packet is logged
and not every packet which thereafter matches state information.
.TP
.B or-block
indicates that, if for some reason the filter is unable to log the
packet (such as the log reader being too slow) then the rule should be
interpreted as if the action was \fBblock\fP for this packet.
.TP
.B "level <loglevel>"
indicates what logging facility and priority, or just priority with
the default facility being used, will be used to log information about 
this packet using ipmon's -s option.
.PP
See ipl(4) for the format of records written
to this device. The ipmon(8) program can be used to read and format
this log.
.SH EXAMPLES
.PP
The \fBquick\fP option is good for rules such as:
\fC
.nf
block in quick from any to any with ipopts
.fi
.PP
which will match any packet with a non-standard header length (IP
options present) and abort further processing of later rules,
recording a match and also that the packet should be blocked.
.PP
The "fall-through" rule parsing allows for effects such as this:
.LP
.nf
        block in from any to any port < 6000
        pass in from any to any port >= 6000
        block in from any to any port > 6003
.fi
.PP
which sets up the range 6000-6003 as being permitted and all others being
denied.  Note that the effect of the first rule is overridden by subsequent
rules.  Another (easier) way to do the same is:
.LP
.nf
        block in from any to any port 6000 <> 6003
        pass in from any to any port 5999 >< 6004
.fi
.PP
Note that both the "block" and "pass" are needed here to effect a
result as a failed match on the "block" action does not imply a pass,
only that the rule hasn't taken effect.  To then allow ports < 1024, a
rule such as:
.LP
.nf
        pass in quick from any to any port < 1024
.fi
.PP
would be needed before the first block.  To create a new group for
processing all inbound packets on le0/le1/lo0, with the default being to block
all inbound packets, we would do something like:
.LP
.nf
       block in all
       block in quick on le0 all head 100
       block in quick on le1 all head 200
       block in quick on lo0 all head 300
.fi
.PP

and to then allow ICMP packets in on le0, only, we would do:
.LP
.nf
       pass in proto icmp all group 100
.fi
.PP
Note that because only inbound packets on le0 are used processed by group 100,
there is no need to respecify the interface name.  Likewise, we could further
breakup processing of TCP, etc, as follows:
.LP
.nf
       block in proto tcp all head 110 group 100
       pass in from any to any port = 23 group 110
.fi
.PP
and so on.  The last line, if written without the groups would be:
.LP
.nf
       pass in on le0 proto tcp from any to any port = telnet
.fi
.PP
Note, that if we wanted to say "port = telnet", "proto tcp" would
need to be specified as the parser interprets each rule on its own and
qualifies all service/port names with the protocol specified.
.SH FILES
/dev/ipauth
.br
/dev/ipl
.br
/dev/ipstate
.br
/etc/hosts
.br
/etc/services
.SH SEE ALSO
ipftest(1), iptest(1), mkfilters(1), ipf(4), ipnat(5), ipf(8), ipfstat(8)
@


1.26
log
@reimplement local ipf mods and import some missed patches
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipf.5,v 1.25 2000/04/26 21:04:00 deraadt Exp $
@


1.25
log
@no, that is wrong
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipf.5,v 1.24 2000/04/13 19:59:39 kjell Exp $
d36 1
a36 1
block	= "block" [ icmp[return-code] | "return-rst" ] .
d47 1
a47 1
icmp	= "return-icmp" | "return-icmp-as-dest" .
@


1.24
log
@Long overdue documentation update for IPFilter. These
are taken directly from the ipf distribution, and are
not mandoc'ed. ipf(8), ipfstat(8), and ipnat(8) are yet
to go and must be done manually. (sigh)
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d5 1
a5 1
ipf, ipf.conf \- IP packet filter rule syntax
@


1.23
log
@Trailing whitespace begone!
@
text
@d1 9
a9 14
.\"	$OpenBSD: ipf.5,v 1.22 2000/03/18 22:55:58 aaron Exp $
.Dd July 9, 1999
.Dt IPF 5
.Os
.Sh NAME
.Nm ipf
.Nd "IP packet filter rule syntax"
.Sh DESCRIPTION
A rule file for
.Nm
may have any name or even be stdin.
As
.Xr ipfstat 8
produces parseable rules as output when displaying the internal
d11 1
a11 3
into
.Nm ipf .
Thus, to remove all filters on input packets, the following
d15 5
a19 7
.Dl # ipfstat -i | ipf -rf -
.Pp
.Sh GRAMMAR
.Pp
The format used by
.Nm
for construction of filtering rules can be
d21 2
a22 1
.Bd -literal
d77 2
a78 1
	    "net-prohib" | "host-prohib" | "net-tos" | "host-tos" .
d87 1
a87 1
	   "info" | "debug" .
d99 2
a100 2
.Ed
.Pp
d103 3
a105 4
not make sense (such as tcp
.Cm flags
for non-TCP packets).
.Sh FILTER RULES
d107 7
a113 7
.Bd -literal -offset indent
block in all
pass in all
log out all
count in all
.Ed
.Pp
d115 3
a117 4
determining the fate of the packet (but see the
.Cm quick
option, below).
.Pp
d119 6
a124 7
lists, prepending the rule with
.Cm @@n
will cause it to be inserted
as the n'th entry in the current list.
This is especially useful when
modifying and testing active filter rulesets.
.Sh ACTIONS
d126 5
a130 10
of the filter rule.
Each rule
.Em must
have an action.
The following actions are recognized:
.Pp
.Bl -tag -width XXXXXXXX -offset indent
.It block
indicates that the packet should be flagged to be dropped.
In response
d132 22
a153 32
packet, either an ICMP packet
.Pq Cm return-icmp ,
an ICMP packet masquerading as being from the original packet's destination (
.Pq Cm return-icmp-as-dest ,
or a TCP reset
.Pq Cm return-rst .
An ICMP packet may be generated in response to
any IP packet, and its type may optionally be specified, but a TCP
reset may only be used with a rule which is being applied to TCP
packets.
When using
.Cm return-icmp
or
.Cm return-icmp-as-dest ,
it is possible to specify the actual unreachable `type'.
That is, whether
it is a network unreachable, port unreachable or even administratively
prohibited.
This is done by enclosing the ICMP code associated with it
in parenthesis directly following
.Cm return-icmp
or
.Cm return-icmp-as-dest
as follows:
.Bd -literal -offset indent
block return-icmp(11) ...
.Ed
.Pp
would return a Type-Of-Service (TOS) ICMP unreachable error.
.It pass
will flag the packet to be let through the filter.
.It log
d157 2
a158 1
.It count
d161 3
a163 4
the filter.
These statistics are viewable with
.Xr ipfstat 8 .
.It call
d165 3
a167 4
must conform to a specific calling interface.
Customized actions and
semantics can thus be implemented to supplement those available.
This feature is for use by knowledgeable hackers, and is not currently
d169 7
a175 9
.It "skip <n>"
causes the filter to skip over the next
.Cm n
filter rules.
If a rule is inserted or deleted inside the region being
skipped over, then the value of
.Cm n
is adjusted appropriately.
.It auth
d177 1
a177 2
and waiting for packet information to validate.
The packet is held for a
d179 2
a180 5
to the kernel the
.Em real
flags for whether it should be allowed through
or not.
Such a program might look at the source address and request some sort
d183 2
a184 1
.It preauth
d186 1
a186 2
pre-authenticated list for further clarification.
If no further matching
d188 3
a190 6
as FR_PASS).
If a further matching rule is found, the result from that is
used in its instead.
This might be used in a situation where a person
.Em logs in
to the firewall and it sets up some temporary rules defining
d192 4
a195 8
.El
.Pp
The next word must be either
.Cm in
or
.Cm out .
Each packet moving through the kernel is either inbound (just been received
on an interface, and moving towards the kernel's protocol processing) or
d197 1
a197 2
interface).
There is a requirement that each filter rule explicitly
d199 7
a205 7
.Sh OPTIONS
The list of options is brief, and all are indeed optional.
Where options are used, they must be present in the order shown here.
These are the currently supported options:
.Pp
.Bl -tag -width dup-to -offset indent
.It log
d207 4
a210 4
header will be written to the
.Pa ipl
log (as described in the LOGGING section below).
.It quick
d212 2
a213 4
later rules.
If a packet matches a filter rule which is marked as
.Cm quick ,
this rule will be the last rule checked, allowing a
d215 1
a215 2
packet.
The current status of the packet (after any effects of the
d217 1
a217 1
.Pp
d221 2
a222 1
.It on
d224 5
a228 7
procedure.
Interface names are as printed by
.Ic "netstat -i" .
If this option is used, the rule will only match if the packet is going
through that interface in the specified direction (in/out).
If this option is absent, the rule is taken to be applied to a packet
regardless of the interface it is present on (i.e., on all interfaces).
d231 1
a231 1
.Pp
d236 2
a237 1
.It dup-to
d240 4
a243 3
IP address changed to that specified.
This is useful for off-host logging, using a network sniffer.
.It to
d245 1
a245 2
specified interface.
This can be used to circumvent kernel routing
d247 1
a247 2
packet (if applied to an inbound rule).
It is thus possible to
d249 4
a252 5
or switch, rather than a router.
The
.Cm fastroute
keyword is a synonym for this option.
.Sh MATCHING PARAMETERS
d255 1
a255 2
match.
The following general-purpose attributes are provided for
d257 2
a258 3
.Pp
.Bl -tag -width XXXXXXX -offset indent
.It tos
d260 2
a261 2
Individual service levels or combinations can be filtered upon.
The value for the TOS mask can either be represented as a hex number or a
d263 3
a265 3
.It ttl
packets may also be selected by their Time-To-Live value.
The value given in
d268 4
a271 5
.It proto
allows a specific protocol to be matched against.
All protocol names found in
.Pn /etc/protocols
are recognized and may be used.
d275 2
a276 4
.Pp
The special protocol keyword
.Cm tcp/udp
may be used to match either
d280 3
a282 10
.El
.Pp
The
.Cm from
and
.Cm to
keywords are used to match against IP
addresses (and optionally port numbers).
Rules must specify
.Em both
d284 1
a284 1
.Pp
d286 1
a286 4
address/mask, or as a hostname
.Cm mask
netmask.
The hostname
d288 6
a293 14
(depending on your configuration and library), an interface name
(in the case of IP address aliases, only the first IP address is used)
or of the dotted numeric
form.
There is no special designation for networks but network names
are recognized.
Note that having your filter rules depend on DNS
results can introduce an avenue of attack, and is
.Em highly
discouraged.
.Pp
There is a special case for the hostname
.Cm any
which is taken to
d296 1
a296 2
situations, a hostname MUST be accompanied by a mask.
It is possible
d299 2
a300 2
.Pp
The numerical format "x/y" indicates that a mask of y
d302 1
a302 2
of 16 would give 0xffff0000.
The symbolic "x mask y" indicates
d304 1
a304 2
the form 0x12345678.
Note that all the bits of the IP address
d309 2
a310 4
.Pp
If a
.Cm port
match is included, for either or both of source and
d313 4
a316 11
TCP and UDP packets.
If there is no
.Cm proto
match parameter,
packets from both protocols are compared.
This is equivalent to "proto tcp/udp".
When composing
.Cm port
comparisons, either the service
name or an integer port number may be used.
Port comparisons may be
d318 3
a320 7
port ranges may be specified.
When the port appears as part of the
.Cm from
object, it matches the source port number, when it appears
as part of the
.Cm to
object, it matches the destination port number.
d322 2
a323 4
.Pp
The
.Cm all
keyword is essentially a synonym for "from any to any"
d325 1
a325 1
.Pp
d328 2
a329 2
.Bl -tag -width XXXXXXX -offset indent
.It with
d331 4
a334 9
associated with them.
To match the presence of IP options in general, use
.Cm "with ipopts" .
To match packets that are too short to contain
a complete header, use
.Cm "with short" .
To match fragmented packets,
.Cm "with frag" .
For more specific filtering on IP options,
d336 3
a338 8
.Pp
Before any parameter used after the
.Cm with
keyword, the word
.Cm not
or
.Cm no
may be inserted to cause the filter rule to only
d340 3
a342 9
.Pp
Multiple consecutive
.Cm with
clauses are allowed.
Alternatively, the keyword
.Cm and
may be used in place of
.Cm with ,
this is
d347 3
a349 3
.It flags
is only effective for TCP filtering.
Each of the letters possible
d351 3
a353 3
header.
The association is as follows:
.Bd -literal
d360 2
a361 2
.Ed
.Pp
d363 1
a363 2
would represent a SYN-ACK combination present in a packet.
There is
d366 2
a367 4
implementations.
However, to guard against weird aberrations, it is
necessary to state which flags you are filtering against.
To allow
d369 1
a369 2
to compare (i.e., those you deem significant).
This is done by
d372 18
a389 19
.Bd -literal
 ... flags S
		# becomes "flags S/AUPRFS" and
		# will match packets with ONLY
		# the SYN flag set.

 ... flags SA
		# becomes "flags SA/AUPRFS" and will match
		# any packet with only the SYN and ACK
		# flags set.

 ... flags S/SA
		# will match any packet with just the SYN
		# flag set out of the SYN-ACK pair; the
		# common "establish" keyword action.
		# "S/SA" will NOT match a packet with BOTH
		# SYN and ACK set, but WILL match "SFP".
.Ed
.It icmp-type
d391 15
a405 16
in conjunction with \fBflags\fP.
There are a number of types, which can be
referred to by an abbreviation recognized by this language, or the numbers
with which they are associated can be used.
The most important from a security point of view is the ICMP redirect.
.El
.Sh KEEP HISTORY
The second last parameter that can be set for a filter rule is whether or not
to record historical information for that packet, and what sort to keep.
The following information can be kept:
.Pp
.Bl -tag -width XXXXXXX -offset indent
.It state
keeps information about the flow of a communication session.
State can be kept for TCP, UDP, and ICMP packets.
.It frags
d408 1
a408 2
.El
.Pp
d411 3
a413 5
.Sh GROUPS
The last pair of parameters control filter rule "grouping".
By default, all
filter rules are placed in group 0 if no other group is specified.
To add a
d415 5
a419 13
group
.Cm head .
If a packet matches a rule which is the
.Cm head
of a group, the filter processing then switches to the group, using
that rule as the default for the group.
If
.Cm quick
is used with a
.Cm head
rule, rule processing isn't stopped until it has returned from processing
the group.
.Pp
d421 3
a423 12
group
.Pf ( Cm head
and
.Cm group
may be used together in a rule).
.Pp
There may be only one
.Cm head
rule per
.Cm group.
.Bl -tag -width XXXXXXXXX -offset indent
.It "head <n>"
d425 2
a426 1
.It "group <n>"
d428 2
a429 2
.El
.Sh LOGGING
d432 1
a432 2
pseudo-device.
Immediately following the \fBlog\fP keyword, the
d434 2
a435 2
.Bl -tag -width XXXXXXXX -offset indent
.It body
d437 8
a444 8
logged after the headers.
.It first
If log is being used in conjunction with a
.Cm keep
option, it is recommended that this option is also applied so that only
the triggering packet is logged and not every packet which thereafter
matches state information.
.It or-block
d447 12
a458 20
interpreted as if the action was
.Cm block
for this packet.
.It "level <loglevel>"
indicates the logging facility and priority that will be used to log
information about this packet using
.Xr ipmon 8 's
.Fl s
option.
If no facility is specified, the default facility is assumed.
.El
.Pp
See
.Xr ipl 4
for the format of records written
to this device.
The
.Xr ipmon 8
program can be used to read and format this log.
.Sh EXAMPLES
d460 5
a464 3
.Pp
.Dl block in quick from any to any with ipopts
.Pp
d468 1
a468 1
.Pp
d470 2
a471 1
.Bd -literal
d475 2
a476 2
.Ed
.Pp
d478 4
a481 4
denied.
Note that the effect of the first rule is overridden by subsequent rules.
Another (easier) way to do the same is:
.Bd -literal
d484 2
a485 2
.Ed
.Pp
d488 8
a495 7
only that the rule hasn't taken effect.
To then allow ports < 1024, a rule such as:
.Pp
.Dl pass in quick from any to any port < 1024
.Pp
would be needed before the first block.
To create a new group for
d498 2
a499 1
.Bd -literal
d504 3
a506 2
.Ed
.Pp
d508 5
a512 3
.Pp
.Dl pass in proto icmp all group 100
.Pp
d514 4
a517 3
there is no need to respecify the interface name.
Likewise, we could further breakup processing of TCP, etc, as follows:
.Bd -literal
d520 8
a527 7
.Ed
.Pp
and so on.
The last line, if written without the groups would be:
.Pp
.Dl pass in on le0 proto tcp from any to any port = telnet
.Pp
d531 12
a542 24
.Sh FILES
.Bl -tag -width /usr/share/ipf -compact
.It /etc/services
port names
.It /etc/hosts
host names
.It /usr/share/ipf
sample configuration files
.It /dev/ipauth
.It /dev/ipl
.It /dev/ipstate
.El
.Sh SEE ALSO
.Xr ipftest 1 ,
.Xr ipf 4 ,
.Xr ipl 4 ,
.Xr ipnat 4 ,
.Xr hosts 5 ,
.Xr ipnat 5 ,
.Xr services 5 ,
.Xr ipf 8 ,
.Xr ipfstat 8 ,
.Xr ipmon 8 ,
.Xr ipnat 8
@


1.22
log
@Remove hard sentence breaks, and some other cleanup along the way.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipf.5,v 1.21 2000/03/14 21:31:34 aaron Exp $
d9 1
a9 1
A rule file for 
d16 1
a16 1
into 
d26 1
a26 1
The format used by 
d94 1
a94 1
	   "info" | "debug" . 
d110 1
a110 1
not make sense (such as tcp 
d123 1
a123 1
determining the fate of the packet (but see the 
d128 1
a128 1
lists, prepending the rule with 
d186 1
a186 1
These statistics are viewable with 
d229 1
a229 1
The next word must be either 
d480 1
a480 1
		# becomes "flags S/AUPRFS" and 
@


1.21
log
@Suffix "i.e." and "e.g." with a comma. Just another really picky man page
commit, as we want our documentation to be as consistently formatted as
possible (it's getting there :-)).
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipf.5,v 1.20 2000/03/06 21:46:55 aaron Exp $
d11 2
a12 1
may have any name or even be stdin.  As
d17 1
a17 1
.Nm ipf .  
d131 2
a132 1
as the n'th entry in the current list. This is especially useful when
d136 2
a137 1
of the filter rule. Each rule
d139 2
a140 1
have an action. The following actions are recognized:
d144 2
a145 1
indicates that the packet should be flagged to be dropped. In response
d156 2
a157 1
packets. When using
d161 2
a162 1
it is possible to specify the actual unreachable `type'. That is, whether
d164 2
a165 1
prohibited. This is done by enclosing the ICMP code associated with it
d185 2
a186 1
the filter. These statistics are viewable with 
d190 4
a193 3
must conform to a specific calling interface. Customized actions and
semantics can thus be implemented to supplement those available. This
feature is for use by knowledgeable hackers, and is not currently
d198 2
a199 1
filter rules.  If a rule is inserted or deleted inside the region being
d205 2
a206 1
and waiting for packet information to validate.  The packet is held for a
d211 2
a212 1
or not.  Such a program might look at the source address and request some sort
d217 2
a218 1
pre-authenticated list for further clarification.  If no further matching
d220 4
a223 2
as FR_PASS).  If a further matching rule is found, the result from that is
used in its instead.  This might be used in a situation where a person
d236 2
a237 1
interface). There is a requirement that each filter rule explicitly
d240 3
a242 3
The list of options is brief, and all are indeed optional. Where
options are used, they must be present in the order shown here. These
are the currently supported options:
d252 2
a253 1
later rules.  If a packet matches a filter rule which is marked as
d257 2
a258 1
packet. The current status of the packet (after any effects of the
d266 2
a267 1
procedure. Interface names are as printed by
d270 2
a271 2
through that interface in the specified direction (in/out). If this
option is absent, the rule is taken to be applied to a packet
d283 2
a284 2
IP address changed to that specified. This is useful for off-host
logging, using a network sniffer.
d287 2
a288 1
specified interface. This can be used to circumvent kernel routing
d290 2
a291 1
packet (if applied to an inbound rule). It is thus possible to
d293 2
a294 1
or switch, rather than a router. The
d300 2
a301 1
match. The following general-purpose attributes are provided for
d307 2
a308 2
Individual service levels or combinations can be filtered upon.  The
value for the TOS mask can either be represented as a hex number or a
d311 2
a312 1
packets may also be selected by their Time-To-Live value.  The value given in
d316 2
a317 2
allows a specific protocol to be matched against.  All protocol names
found in
d337 2
a338 1
addresses (and optionally port numbers). Rules must specify
d345 2
a346 1
netmask.  The hostname
d351 4
a354 2
form.  There is no special designation for networks but network names
are recognized.  Note that having your filter rules depend on DNS
d364 2
a365 1
situations, a hostname MUST be accompanied by a mask.  It is possible
d371 2
a372 1
of 16 would give 0xffff0000. The symbolic "x mask y" indicates
d374 2
a375 1
the form 0x12345678.  Note that all the bits of the IP address
d386 2
a387 1
TCP and UDP packets. If there is no
d390 3
a392 2
packets from both protocols are compared. This is equivalent to "proto
tcp/udp".  When composing
d395 2
a396 1
name or an integer port number may be used. Port comparisons may be
d398 2
a399 1
port ranges may be specified. When the port appears as part of the
d417 2
a418 2
associated with them.  To match the presence of IP options in general,
use
d439 2
a440 2
clauses are allowed.  Alternatively,
the keyword
d450 2
a451 1
is only effective for TCP filtering.  Each of the letters possible
d453 2
a454 1
header.  The association is as follows:
d465 2
a466 1
would represent a SYN-ACK combination present in a packet.  There is
d469 4
a472 2
implementations.  However, to guard against weird aberrations, it is
necessary to state which flags you are filtering against.  To allow
d474 2
a475 1
to compare (i.e., those you deem significant).  This is done by
d498 2
a499 1
in conjunction with \fBflags\fP.  There are a number of types, which can be
d501 2
a502 2
with which they are associated can be used.  The most important from
a security point of view is the ICMP redirect.
d506 2
a507 2
to record historical information for that packet, and what sort to keep. The
following information can be kept:
d511 2
a512 2
keeps information about the flow of a communication session. State can
be kept for TCP, UDP, and ICMP packets.
d521 4
a524 2
The last pair of parameters control filter rule "grouping".  By default, all
filter rules are placed in group 0 if no other group is specified.  To add a
d531 2
a532 1
that rule as the default for the group.  If
d559 2
a560 1
pseudo-device. Immediately following the \fBlog\fP keyword, the
d583 2
a584 1
option. If no facility is specified, the default facility is assumed. If no facility is specified, the default facility is assumed.
d590 4
a593 2
to this device. The ipmon(8) program can be used to read and format
this log.
d611 3
a613 2
denied.  Note that the effect of the first rule is overridden by subsequent
rules.  Another (easier) way to do the same is:
d621 2
a622 2
only that the rule hasn't taken effect.  To then allow ports < 1024, a
rule such as:
d626 2
a627 1
would be needed before the first block.  To create a new group for
d642 2
a643 2
there is no need to respecify the interface name.  Likewise, we could further
breakup processing of TCP, etc, as follows:
d649 2
a650 1
and so on.  The last line, if written without the groups would be:
@


1.20
log
@Do not leave `(' characters dangling at the end of lines; instead, use the
appropriate mdoc macros to handle these cases.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipf.5,v 1.19 2000/02/19 21:46:46 aaron Exp $
d252 1
a252 1
regardless of the interface it is present on (i.e. on all interfaces).
@


1.19
log
@Re-order SEE ALSO entries.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipf.5,v 1.18 2000/01/24 07:25:37 kjell Exp $
d494 2
a495 2
group (
.Cm head
@


1.18
log
@correct Xrs. marc@@snafu.org.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipf.5,v 1.17 2000/01/07 05:20:15 kjell Exp $
a616 1
.Xr ipf 8 ,
a617 1
.Xr ipnat 8 ,
d624 1
d626 2
a627 1
.Xr ipmon 8 
@


1.17
log
@Update documentation to reflect 3.3.6 changes.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipf.5,v 1.16 1999/09/09 19:20:21 aaron Exp $
d618 1
a618 1
.Xr ipftest 8 ,
@


1.16
log
@typo: inbould -> inbound; mason@@netbsd.org
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipf.5,v 1.15 1999/07/09 21:48:16 kjell Exp $
d43 1
a43 1
block	= "block" [ "return-icmp"[return-code] | "return-rst" ] .
d45 1
a45 1
log	= "log" [ "body" ] [ "first" ] [ "or-block" ] .
d52 1
a52 1
fromto	= "from" object "to" object .
d54 1
d64 1
d88 6
d138 1
a138 1
.Bl -tag -width preauth -offset indent
d142 6
a147 4
packet, either an ICMP packet (
.Cm return-icmp )
or a TCP reset (
.Cm return-rst ) .
d151 17
a167 1
packets.
d185 7
a191 2
.It skip
This action is not currently implemented.
d193 9
a201 1
This action is not currently implemented.
d203 8
a210 1
This action is not currently implemented.
d321 3
a323 1
(depending on your configuration and library) or of the dotted numeric
d326 3
a328 1
results can introduce an avenue of attack, and is discouraged.
d462 1
a462 1
The second last parameter which can be set for a filter rule is whether on not
d481 11
a491 4
group \fIhead\fP.  If a packet matches a rule which is the \fIhead\fP of a
group, the filter processing then switches to the group, using that rule as
the default for the group.  If \fBquick\fP is used with a \fBhead\fP rule, rule
processing isn't stopped until it has returned from processing the group.
d494 5
a498 1
group (\fBhead\fP and \fBgroup\fP may be used together in a rule).
d500 4
a503 1
There may be only one \fBhead\fP rule per group.
d520 5
a524 1
??
d526 11
a536 1
indicates that, if for some reason the filter is unable to log the packet (such as the log reader being too slow) then the rule should be interpreted as if the action was \fBblock\fP for this packet.
@


1.15
log
@First cut at mdoc'ing this one. More cleanup and content changes coming after defcon.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipf.5,v 1.14 1999/07/08 05:05:10 kjell Exp $
d498 1
a498 1
processing all inbould packets on le0/le1/lo0, with the default being to block
@


1.14
log
@There can be only one "HEAD" rule per group.
@
text
@d1 13
a13 8
.\"	$OpenBSD: ipf.5,v 1.13 1999/06/04 02:45:17 aaron Exp $
.TH IPF 5
.SH NAME
ipf \- IP packet filter rule syntax
.SH DESCRIPTION
.PP
A rule file for \fBipf\fP may have any name or even be stdin.  As
\fBipfstat\fP produces parseable rules as output when displaying the internal
d15 3
a17 1
into \fBipf\fP.  Thus, to remove all filters on input packets, the following
d21 7
a27 5
\fC# ipfstat \-i | ipf \-rf \-\fP
.fi
.SH GRAMMAR
.PP
The format used by \fBipf\fP for construction of filtering rules can be
d29 1
a29 2
\fC
.nf
d97 2
a98 2
.fi
.PP
d101 4
a104 3
not make sense (such as tcp \fBflags\fP for non-TCP packets).
.SH FILTER RULES
.PP
d106 7
a112 7
.nf
       block in all
       pass in all
       log out all
       count in all
.fi
.PP
d114 4
a117 3
determining the fate of the packet (but see the \fBquick\fP option,
below).
.PP
d119 3
a121 1
lists, prepending the rule with \fB@@n\fP will cause it to be inserted
d123 2
a124 4
modifying and testing active filter rulesets. See ipf(1) for more
information.
.SH ACTIONS
.PP
d126 6
a131 4
of the filter rule. Each rule MUST have an action. The following
actions are recognized:
.TP
.B block
d134 5
a138 2
packet, either an ICMP packet (\fBreturn-icmp\fP) or a TCP "reset"
(\fBreturn-rst\fP).  An ICMP packet may be generated in response to
d142 1
a142 2
.TP
.B pass
d144 1
a144 2
.TP
.B log
d148 1
a148 2
.TP
.B count
d151 3
a153 3
the filter. These statistics are viewable with ipfstat(8).
.TP
.B call
d159 1
a159 2
.TP
.B "skip <n>"
d161 1
a161 2
.TP
.B auth
d163 1
a163 2
.TP
.B preauth
d165 8
a172 4
.PP
The next word must be either \fBin\fP or \fBout\fP.  Each packet
moving through the kernel is either inbound (just been received on an
interface, and moving towards the kernel's protocol processing) or
d176 1
a176 2
.SH OPTIONS
.PP
d180 3
a182 2
.TP
.B log
d184 4
a187 4
header will be written to the \fBipl\fP log (as described in the
LOGGING section below).
.TP
.B quick
d190 2
a191 1
\fBquick\fP, this rule will be the last rule checked, allowing a
d195 1
a195 1
.IP
d199 1
a199 2
.TP
.B on
d201 3
a203 2
procedure. Interface names are as printed by "netstat \-i". If this
option is used, the rule will only match if the packet is going
d209 1
a209 1
.IP
d214 6
a219 5
.TP
.B dup-to
causes the packet to be copied, and the duplicate packet to be sent outbound on the specified interface, optionally with the destination IP address changed to that specified. This is useful for off-host logging, using a network sniffer.
.TP
.B to
d225 4
a228 4
or switch, rather than a router. The \fBfastroute\fP keyword is a
synonym for this option.
.SH MATCHING PARAMETERS
.PP
d233 3
a235 2
.TP
.B tos
d240 1
a240 2
.TP
.B ttl
d244 1
a244 2
.TP
.B proto
d246 3
a248 1
found in \fB/etc/protocols\fP are recognized and may be used.
d252 4
a255 2
.IP
The special protocol keyword \fBtcp/udp\fP may be used to match either
d259 9
a267 3
.PP
The \fBfrom\fP and \fBto\fP keywords are used to match against IP
addresses (and optionally port numbers). Rules must specify BOTH
d269 1
a269 1
.PP
d271 3
a273 1
address\fB/\fPmask, or as a hostname \fBmask\fP netmask.  The hostname
d279 4
a282 2
.PP
There is a special case for the hostname \fBany\fP which is taken to
d288 2
a289 2
.PP
The numerical format "x\fB/\fPy" indicates that a mask of y
d291 1
a291 1
of 16 would give 0xffff0000. The symbolic "x \fBmask\fP y" indicates
d298 4
a301 2
.PP
If a \fBport\fP match is included, for either or both of source and
d304 3
a306 1
TCP and UDP packets. If there is no \fBproto\fP match parameter,
d308 3
a310 1
tcp/udp".  When composing \fBport\fP comparisons, either the service
d314 5
a318 2
\fBfrom\fP object, it matches the source port number, when it appears
as part of the \fBto\fP object, it matches the destination port number.
d320 4
a323 2
.PP
The \fBall\fP keyword is essentially a synonym for "from any to any"
d325 1
a325 1
.PP
d328 2
a329 2
.TP
.B with
d332 8
a339 3
use \fBwith ipopts\fP. To match packets that are too short to contain
a complete header, use \fBwith short\fP. To match fragmented packets,
use \fBwith frag\fP.  For more specific filtering on IP options,
d341 8
a348 3
.IP
Before any parameter used after the \fBwith\fP keyword, the word
\fBnot\fP or \fBno\fP may be inserted to cause the filter rule to only
d350 9
a358 3
.IP
Multiple consecutive \fBwith\fP clauses are allowed.  Alternatively,
the keyword \fBand\fP may be used in place of \fBwith\fP, this is
d363 1
a363 2
.TP
.B flags
d367 1
a367 2
.LP
.nf
d374 2
a375 2
.fi
.IP
d386 19
a404 18
.LP
.nf
	... flags S
			# becomes "flags S/AUPRFS" and will match
			# packets with ONLY the SYN flag set.

	... flags SA
			# becomes "flags SA/AUPRFS" and will match any
			# packet with only the SYN and ACK flags set.

	... flags S/SA
			# will match any packet with just the SYN flag set
			# out of the SYN-ACK pair; the common "establish"
			# keyword action.  "S/SA" will NOT match a packet
			# with BOTH SYN and ACK set, but WILL match "SFP".
.fi
.TP
.B icmp-type
d410 2
a411 2
.SH KEEP HISTORY
.PP
d415 3
a417 2
.TP
.B state
d420 1
a420 2
.TP
.B frags
d423 2
a424 1
.PP
d427 1
a427 1
.SH GROUPS
d435 1
a435 1
.PP
d438 1
a438 1
.PP
d440 2
a441 2
.TP
.B "head <n>"
d443 1
a443 2
.TP
.B "group <n>"
d445 2
a446 2
.SH LOGGING
.PP
d451 2
a452 2
.TP
.B body
d455 1
a455 2
.TP
.B first
d457 1
a457 2
.TP
.B or-block
d459 5
a463 2
.PP
See ipl(4) for the format of records written
d466 1
a466 2
.SH EXAMPLES
.PP
d468 3
a470 5
\fC
.nf
block in quick from any to any with ipopts
.fi
.PP
d474 1
a474 1
.PP
d476 1
a476 2
.LP
.nf
d480 2
a481 2
.fi
.PP
d485 1
a485 2
.LP
.nf
d488 2
a489 2
.fi
.PP
d494 3
a496 5
.LP
.nf
        pass in quick from any to any port < 1024
.fi
.PP
d500 1
a500 2
.LP
.nf
d505 2
a506 3
.fi
.PP

d508 3
a510 5
.LP
.nf
       pass in proto icmp all group 100
.fi
.PP
d514 1
a514 2
.LP
.nf
d517 2
a518 2
.fi
.PP
d520 3
a522 5
.LP
.nf
       pass in on le0 proto tcp from any to any port = telnet
.fi
.PP
d526 24
a549 17
.SH FILES
\fI/etc/services\fP -- port names
.br
\fI/etc/hosts\fP -- host names
.br
\fI/usr/share/ipf\fP -- sample configuration files
.br
/dev/ipauth
.br
/dev/ipl
.br
/dev/ipstate
.br
.SH SEE ALSO
ipf(1), ipftest(1), ipnat(1), ipf(4), ipl(4), ipnat(4), hosts(5), ipnat(5), services(5), ipfstat(8), ipmon(8)
.br
http://coombs.anu.edu.au/ipfilter/
@


1.13
log
@start to remove non-escaped trailing whitespace, it can confuse troff; pjanzen@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipf.5,v 1.12 1999/02/05 05:58:41 deraadt Exp $
d149 1
d152 1
d155 1
d383 2
@


1.12
log
@ipf 3.2.10; work by kjell
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipf.5,v 1.11 1998/09/15 09:55:44 pattonme Exp $
d129 1
a129 1
will flag the packet to be let through the filter.  
d210 1
a210 1
.PP 
d242 1
a242 1
.PP 
d395 1
a395 1
logged after the headers. 
@


1.11
log
@Updated to v3.2.9 of Darren's codebase. His code reimplements variable
locking, replaces u_long's with u_32_t to properly handle 64bit archs.
Wrapped OpenBSD specific preprocessor logic.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipf.5,v 1.10 1998/01/26 04:13:34 dgregor Exp $
d450 3
a452 3
       block in on le0 quick all head 100
       block in on le1 quick all head 200
       block in on lo0 quick all head 300
@


1.10
log
@IPF 3.2.3
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipf.5,v 1.9 1997/07/14 01:21:41 angelos Exp $
d486 7
d494 3
a496 1
ipf(1), ipftest(1), mkfilters(1), ipmon(8), ipf(4), hosts(5), services(5)
@


1.9
log
@Fixed typo (missing "any" in example rule).
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipf.5,v 1.8 1997/04/09 11:44:27 kstailey Exp $
d8 1
a8 1
\fBipfstat\fP produces parsable rules as output when displaying the internal
d22 2
a23 1
filter-rule = [ insert ] action in-out [ options ] [ match ] [ keep ]
d26 1
a26 1
action	= block | "pass" | log | "count" | call .
d29 5
a33 2
match	= [ tos ] [ ttl ] [ proto ] [ ip ] .
keep  	= "keep state" | "keep frags" .
d36 5
a40 4
log   	= "log" [ "body" ] [ "first" ] [ "or-block" ] .
call  	= "call" [ "now" ] function-name .

dup   	= "dup-to" interface-name[":"ipaddr] .
a41 6

tos   	= "tos" decnumber | "tos" hexnumber .
ttl   	= "ttl" decnumber .
proto	= "proto" protocol .
ip    	= srcdst [ flags ] [ with withopt ] [ icmp ] [ keep ] .

a49 1

d54 1
d72 1
a72 1
icmp-code = decnumber | "net-unr" | "host-unr" | "proto-unr" | "port-unr" |
d75 3
a77 3
optlist	= "nop" | "rr" | "zsu" | "mtup" | "mtur" | "encode" | "ts" | "tr" |
	  "sec" | "lsrr" | "e-sec" | "cipso" | "satid" | "ssrr" | "addext" |
	  "visa" | "imitd" | "eip" | "finn" .
d83 2
a84 2
compare = "=" | "!=" | "<" | ">" | "<=" | ">=" | "eq" | "ne" | "lt" | "gt" |
	  "le" | "ge" .
a97 9
       block in
       pass in
       log in
       count in
.fi
.PP
These are supposed to be the same as, but currently differ from:
.\" XXX How, why do they differ??
.nf
d99 2
a100 2
       pass in from any to any
       log in all
d147 6
a220 1
.\" XXX TOS mask??  not in grammar!
d276 4
a279 1
port ranges may be specified. See the examples for more information.
d355 3
a357 2
The last parameter which can be set for a filter rule is whether on not to
record historical information for that packet, and what sort to keep. The following information can be kept:
d369 17
d444 36
a479 1
would be needed before the first block.  
d487 1
a487 1
ipf(1), ipftest(1), ipf(4), hosts(5), services(5)
@


1.8
log
@add tags
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d407 1
a407 1
        block in from any to port > 6003
@


1.7
log
@spelling
@
text
@d1 1
@


1.6
log
@FILES sections
@
text
@d7 1
a7 1
\fBipfstat\fP produces parseable rules as output when displaying the internal
d72 1
a72 1
icmp-code = decumber | "net-unr" | "host-unr" | "proto-unr" | "port-unr" |
d126 1
a126 1
actions are recognised:
d152 1
a152 1
must conform to a specific calling interface. Customised actions and
d233 1
a233 1
found in \fB/etc/protocols\fP are recognised and may be used.
d252 1
a252 1
are recognised.  Note that having your filter rules depend on DNS
d350 2
a351 2
in conjuction with \fBflags\fP.  There are a number of types, which can be
referred to by an abbreviation recognised by this language, or the numbers
d373 1
a373 1
psuedo-device. Immediately following the \fBlog\fP keyword, the
@


1.5
log
@IPF 1.3.7
@
text
@d429 1
a429 1
/etc/services
d431 3
a433 1
/etc/hosts
d435 1
a435 1
ipf(1), ipftest(1)
@


1.4
log
@ipfilter 3.1.0
@
text
@a0 1
.LP
d3 1
a3 1
ipf - IP packet filtering format.
d13 1
a13 1
\fC# ipfstat -i | ipf -rf -\fP
d15 1
d21 20
a40 2
filter-rule = [ insert ] action in-out [ options ] [ tos ] [ ttl ]
              [ proto ] [ ip ] .
a41 14
insert  = "@@" decnumber .
action  = block | "pass" | log | "count" | call .
in-out  = "in" | "out" .
options = [ log ] [ "quick" ] [ "on" interface-name [ dup ] [ froute ] ] .
tos     = "tos" decnumber | "tos" hexnumber .
ttl     = "ttl" decnumber .
proto   = "proto" protocol .
ip      = srcdst [ flags ] [ with withopt ] [ icmp ] [ keep ] .

block   = "block" [ "return-icmp"[return-code] | "return-rst" ] .
log     = "log" [ "body" ] [ "first" ] .
call    = "call" [ "now" ] function-name .
dup     = "dup-to" interface-name[":"ipaddr] .
froute  = "fastroute" | "to" interface-name .
d43 2
a44 2
srcdst  = "all" | fromto .
fromto  = "from" object "to" object .
d46 2
a47 2
object  = addr [ port-comp | port-range ] .
addr    = "any" | nummask | host-name [ "mask" ipaddr | "mask" hexnumber ] .
d50 4
a53 3
flags   = "flags" flag { flag } [ "/" flag { flag } ] .
with    = "with" | "and" .
icmp    = "icmp-type" icmp-type [ "code" decnumber ] .
a54 1
keep    = "keep" "state" | "keep" "frags" .
d56 1
a56 1
nummask = host-name [ "/" decnumber ] .
d58 1
a58 1
ipaddr  = host-num "." host-num "." host-num "." host-num .
d64 1
a64 1
optname = ipopts [ "," optname ] .
d66 1
a66 1
secname = seclvl [ "," secname ] .
d68 1
a68 1
          "reserv-4" | "secret" | "topsecret" .
d70 2
a71 2
            "timex" | "paramprob" | "timest" | "timestrep" | "inforeq" |
            "inforep" | "maskreq" | "maskrep"  | decnumber .
d73 5
a77 5
            "needfrag" | "srcfail" | "net-unk" | "host-unk" | "isolate" |
            "net-prohib" | "host-prohib" | "net-tos" | "host-tos" .
optlist = "nop" | "rr" | "zsu" | "mtup" | "mtur" | "encode" | "ts" | "tr" |
          "sec" | "lsrr" | "e-sec" | "cipso" | "satid" | "ssrr" | "addext" |
          "visa" | "imitd" | "eip" | "finn" .
d84 2
a85 2
          "le" | "ge" .
range   = "<>" | "><" .
d87 2
a88 2
digit   = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" .
flag    = "F" | "S" | "R" | "P" | "A" | "U" .
d91 6
a96 1
The "briefest" valid rule is of the form:
a97 1

d101 1
d104 2
a105 1
These can also be written like:
d107 4
a110 1
       block in all pass in from any to any
d113 109
a221 75
The action, one of either block, log or pass, indicates what to do with
the packet if it matches the rest of the filter rule.  Block indicates that
the packet should be dropped here and not let through, log write the packet
header to the \fBipl\fP packet logging psuedo-device (and has no further
effect on validity of packet to be allowed through the filter) and pass which
will allow the packet through.  Each rule MUST have one of these three
keywords.
.PP
In response to blocking a packet, the filter may be instructed to send a
reply packet, either an ICMP unreachable (\fBreturn-icmp\fP)or a TCP
"reset" (\fBreturn-rst\fP).  An ICMP packet may be generated in response
to any IP packet but a TCP reset may only be used with a rule which is
being applied to TCP packets.
.PP
When a packet header is logged with the \fBlog\fP keyword, the optional
\fBbody\fP keyword indicates that the first 128 bytes of the packet contents
will be logged to the \fBipl\fP packet logging psuedo-device after the
headers.
.PP
The next word must be either \fBin\fP or \fBout\fP.  As each packet moving
through the kernel is either an inbound packet or outbound, there is a
requirement that each filter rule be explicitly stated as to which side of
the IO it is to be used on.
.PP
The list of options is brief, and indeed all are optional.  The presence
of the \fBlog\fP option indicates, that should this be the last matching
rule, the packet header will be written to the \fBipl\fP log. The \fBquick\fP
option allows "short-cut" rules in order to speed up the filter.  If a
packet header matches a filter rule which is marked as \fBquick\fP, it will
result in a quick-match and stop processing at this point.  This is good for
rules such as "block in quick from any to any with ipopts" which will match
any packet with a non-standard header length (IP options present) and abort
further processing, recording a match and also that the packet should be
blocked.  If this command is missing, the rule is taken to be a
"fall-through" rule, meaning that the result of the match is used
(block/pass) and that it will continue processing to see if there are any
more matches.  This allows for effects such as this:
.LP
.nf
        block in from any to any port < 6000
        pass in from any to any port >= 6000
        block in from any to port > 6003
.fi
.PP
which sets up the range 6000-6003 as being permitted and all others being
denied.  Another (easier) way to do the same is:
.LP
.nf
        block in from any to any port 6000 <> 6003
        pass in from any to any port 5999 >< 6004
.fi
.PP
Note that both the "block" and "pass" are needed here to affect a result
as a failed "block" does not imply a pass, only that the rule hasn't taken
effect.  To then allow ports < 1024, a rule such as:
.LP
.nf
        pass in quick from any to any port < 1024
.fi
.PP
would be needed before the first block.  Expect to see a "between" operator
as soon as I can work out how to fit in in.
.PP
The \fBon\fP command allows an interface name to be incorporated into the
matching procedure.  That it is a match and not actually associated with
the interface itself is a result of the way this was implemented.  Indeed,
there is nothing to stop you using this with every rule if you so wish.
If it is absent, the rule is taken to be applied to a packet regardless of
the interface it is present on.
.PP
The \fBall\fP command is essentially an alias for "from any to any" with
no other commands.
.PP
Using \fBtos\fP, packets with different service capabilities can be filtered
upon.  Individual service levels or combinations can be filtered upon.  The
d224 4
a227 2
.PP
Packets may also be selected by their \fBttl\fP value.  The value given in
d230 81
a310 47
.PP
The \fBproto\fP command allows a specific protocol to be matched against.
All protocol names found in \fB/etc/protocols\fP are recognised and maybe
used.  However, the protocol may also be given as a DECIMAL number, allowing
for rules to match your own protocols, or new ones which would out-date any
attempted listing.
.PP
To match against BOTH source and destination addresses, the \fBfrom\fP and
\fBto\fP commands are used.  They both support a large variety of valid
syntaxes, including the "x/y" format.  There is a special case for the
hostname \fBany\fP which is taken to be 0.0.0.0/0 and matches all IP numbers.
If a \fBport\fP match is included, then it is only applied to TCP/UDP
packets.  If the \fBproto\fP command is left out, packets from both protocols
are compared.  The hostname may either be a valid hostname, from either the
hosts file or DNS (depending on your configuration and library) or of the
dotted numeric form.  There is no special designation for networks but
network names are recognised.
.PP
"x/y" indicates that a mask of y consecutive bits set is generated, starting
with the MSB, so a value of 16 would give 0xffff0000.
.PP
"x mask y" indicates that the mask y is in dotted IP notation or a hexadecimal
number of the form 0x12345678.
.PP
Only the presence of "any" has an implied mask, in all other situations,
a hostname MUST be accompanied by a mask.  It is possible to give "any" a
hostmask, but in the context of this language, it is non-sensical.
.PP
When composing
\fBport\fP comparisons, either the service name may be used or an integer
port number.
.PP
The \fBwith\fP command is used to nominate irregular attributes that some
packets ma have associated with them.  Alternatively, the keyword \fBand\fP
maybe used in place of \fBwith\fP.  This is provided to make the rules more
readable and serves no other purpose.  To filter IP options, in general,
use \fBipopts\fP.  For more specific filtering on IP options, individual
options can be listed.  When listed, all those listed must be found in a
packet to cause a match.
.PP
Before any option used after the \fBwith\fP keyword, the word \fBnot\fp
maybe inserted to cause the filter rule to only match if the option(s) is
not present.
.PP
The \fBflags\fP command is only effective for TCP filtering.  Each of the
letters possible represents one of the possible flags that can be set in the
TCP header.  The association is as follows:
d320 11
a330 8
.PP
The various flag symbols maybe used in combination, so that "SA" would
represent a SYN-ACK combination present in a packet.  There is nothing
preventing combinations, such as "SFR".  However, to guard against weird
abberations, it is necessary to state which flags you are filtering against.
To allow this, it is possible to set a mask indicating which TCP flags you
wich to compare (ie those you deem significant).  This is done by appending
"/<flags>" to the set of TCP flags you wish to match against. eg:
d334 2
a335 2
			# becomes "flags S/AUPRFS" and will match a
			# packet with ONLY the SYN flag set.
d347 8
d356 10
a365 5
The next parameter set for the filter rule is the optional \fBicmp-type\fP.
It is only effective when used with \fB"proto icmp"\fP and must NOT be used
in conjuction with \fBflags\fP.  There are a number of types which can be
refered to by an abbreviation recognised by this language or the numbers
with which they are associated can be used.
d367 1
a367 4
The last parameter which can be set for a filter rule is whether on not to
record state information for that packet, and what sort to keep.  Either
information relating to the packet's `flow' or if fragment details can be
kept, allowing packets which match these to flow straight through, rather
d369 59
d430 1
@


1.3
log
@update rcsid
@
text
@a0 2
.\"	$OpenBSD$
.\"
d24 2
a25 2
insert  = "@@" decnumber
action  = block | "pass" | log | "count" .
d27 1
a27 1
options = [ log ] [ "quick" ] [ "on" interface-name] .
d33 5
a37 2
block   = "block" [ "return-icmp" [ return-code ] | "return-rst" ].
log	= "log" [ "body" ] [ "first" ] .
d43 1
a43 1
addr    = "any" | nummask | host-name [ "mask" ipaddr | hexnumber ] .
d47 4
a50 4
with    = "with" | "and"  .
icmp    = "icmp-type" icmp-type .
return-code = "(" icmp-code ")" .
keep	= "keep" "state" | "keep" "frags" .
d59 4
a62 3
opttype = "ipopts" | "short" | "frag" | "opt" ipopts .
ipopts  = "nop" | "rr" | "ts" | "security" | "sec-class" [ "=" seclvl ] |
	  "lsrr" | "satid" | "rsrr" .
d64 1
a64 1
	  "reserv-4" | "secret" | "topsecret" .
d69 5
a73 2
	    "needfrag" | "srcfail" | "net-unk" | "host-unk" | "isolate" |
	    "net-prohib" | "host-prohib" | "net-tos" | "host-tos" .
d80 1
a80 1
	  "le" | "ge" .
@


1.2
log
@IP filter 3.0.1
@
text
@d1 2
@


1.1
log
@from beurton@@fnet.fr:  Darren Reed's IP filter
@
text
@d25 1
a25 1
action  = block | "pass" | log .
d31 1
a31 1
ip      = srcdst [ flags ] [ with withopt ] [ icmp ] .
d33 2
a34 2
block   = "block" [ "return-icmp" ] [ "return-rst" ].
log	= "log" [ "body" ] .
d46 2
d64 3
d255 1
a255 1
The last parameter set for the filter rule is the optional \fBicmp-type\fP.
d260 6
@
