head	1.6;
access;
symbols
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4;
locks; strict;
comment	@ * @;


1.6
date	2001.05.30.02.11.36;	author deraadt;	state dead;
branches;
next	1.5;

1.5
date	2001.01.17.05.00.58;	author fgsch;	state Exp;
branches;
next	1.4;

1.4
date	2000.03.13.23.40.19;	author kjell;	state Exp;
branches;
next	1.3;

1.3
date	2000.02.16.22.34.21;	author kjell;	state Exp;
branches;
next	1.2;

1.2
date	2000.02.01.19.30.00;	author kjell;	state Exp;
branches;
next	1.1;

1.1
date	99.12.14.04.17.17;	author kjell;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Remove ipf.  Darren Reed has interpreted his (old, new, whichever)
licence in a way that makes ipf not free according to the rules we
established over 5 years ago, at www.openbsd.org/goals.html (and those
same basic rules govern the other *BSD projects too).  Specifically,
Darren says that modified versions are not permitted.  But software
which OpenBSD uses and redistributes must be free to all (be they
people or companies), for any purpose they wish to use it, including
modification, use, peeing on, or even integration into baby mulching
machines or atomic bombs to be dropped on Australia.  Furthermore, we
know of a number of companies using ipf with modification like us, who
are now in the same situation, and we hope that some of them will work
with us to fill this gap that now exists in OpenBSD (temporarily, we
hope).
@
text
@/*	$OpenBSD: facpri.c,v 1.5 2001/01/17 05:00:58 fgsch Exp $	*/

/*
 * Copyright (C) 1993-2000 by Darren Reed.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that this notice is preserved and due credit is given
 * to the original author and the contributors.
 */
#include <stdio.h>
#include <string.h>
#include <limits.h>
#include <sys/types.h>
#if !defined(__SVR4) && !defined(__svr4__)
#include <strings.h>
#endif
#include <stdlib.h>
#include <unistd.h>
#include <stddef.h>
#include <syslog.h>
#include "facpri.h"

#if !defined(lint)
static const char rcsid[] = "@@(#)$IPFilter: facpri.c,v 1.3 2000/03/13 22:10:18 darrenr Exp $";
#endif

typedef	struct	table	{
	char	*name;
	int	value;
} table_t;

table_t	facs[] = {
	{ "kern", LOG_KERN },	{ "user", LOG_USER },
	{ "mail", LOG_MAIL },	{ "daemon", LOG_DAEMON },
	{ "auth", LOG_AUTH },	{ "syslog", LOG_SYSLOG },
	{ "lpr", LOG_LPR },	{ "news", LOG_NEWS },
	{ "uucp", LOG_UUCP },
#if LOG_CRON == LOG_CRON2 
	{ "cron2", LOG_CRON1 },
#else
	{ "cron", LOG_CRON1 },
#endif
#ifdef	LOG_FTP
	{ "ftp", LOG_FTP },
#endif
#ifdef	LOG_AUTHPRIV
	{ "authpriv", LOG_AUTHPRIV },
#endif
#ifdef	LOG_AUDIT
	{ "audit", LOG_AUDIT },
#endif
#ifdef	LOG_LFMT
	{ "logalert", LOG_LFMT },
#endif
#if LOG_CRON == LOG_CRON1
	{ "cron", LOG_CRON2 },
#else
	{ "cron2", LOG_CRON2 },
#endif
	{ "local0", LOG_LOCAL0 },	{ "local1", LOG_LOCAL1 },
	{ "local2", LOG_LOCAL2 },	{ "local3", LOG_LOCAL3 },
	{ "local4", LOG_LOCAL4 },	{ "local5", LOG_LOCAL5 },
	{ "local6", LOG_LOCAL6 },	{ "local7", LOG_LOCAL7 },
	{ NULL, 0 }
};


/*
 * map a facility number to its name
 */
char *
fac_toname(facpri)
	int facpri;
{
	int	i, j, fac;

	fac = facpri & LOG_FACMASK;
	j = fac >> 3;
	if (j < 24) {
		if (facs[j].value == fac)
			return facs[j].name;
		for (i = 0; facs[i].name; i++)
			if (fac == facs[i].value)
				return facs[i].name;
	}

	return NULL;
}


/*
 * map a facility name to its number
 */
int
fac_findname(name)
	char *name;
{
	int	i;

	for (i = 0; facs[i].name; i++)
		if (!strcmp(facs[i].name, name))
			return facs[i].value;
	return -1;
}


table_t	pris[] = {
	{ "emerg", LOG_EMERG },		{ "alert", LOG_ALERT  },
	{ "crit", LOG_CRIT },		{ "err", LOG_ERR  },
	{ "warn", LOG_WARNING },	{ "notice", LOG_NOTICE  },
	{ "info", LOG_INFO },		{ "debug", LOG_DEBUG  },
	{ NULL, 0 }
};


/*
 * map a priority name to its number
 */
int
pri_findname(name)
	char *name;
{
	int	i;

	for (i = 0; pris[i].name; i++)
		if (!strcmp(pris[i].name, name))
			return pris[i].value;
	return -1;
}


/*
 * map a priority number to its name
 */
char *
pri_toname(facpri)
	int facpri;
{
	int	i, pri;

	pri = facpri & LOG_PRIMASK;
	if (pris[pri].value == pri)
		return pris[pri].name;
	for (i = 0; pris[i].name; i++)
		if (pri == pris[i].value)
			return pris[i].name;
	return NULL;
}
@


1.5
log
@1st part of ipf userland code.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.4
log
@Import of Darren Reed's IPFilter 3.3.11. See sbin/ipf/HISTORY for detailed
changelog. Documentation changes are now way behind. Volunteers?
@
text
@d4 1
a4 1
 * Copyright (C) 1993-1998 by Darren Reed.
d24 1
a24 1
static const char rcsid[] = "@@(#)$IPFilter: facpri.c,v 1.2 1999/08/01 11:10:45 darrenr Exp $";
@


1.3
log
@Import IPFilter 3.3.9. Primarily, bugfixes since 3.3.8. See sbin/ipf/HISTORY
for details.
@
text
@@


1.2
log
@Update to IPFilter 3.3.8. Man pages still to go. See sbin/ipf/HISTORY
for details.
@
text
@@


1.1
log
@New ipfilter files. Preparing for merge of ipfilter 3.3.4.
@
text
@d1 2
a2 1
/* $OpenBSD$ */
d24 1
a24 1
static const char rcsid[] = "@@(#)$Id: facpri.c,v 1.2 1999/08/01 11:10:45 darrenr Exp $";
@

