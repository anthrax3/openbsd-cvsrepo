head	1.46;
access;
symbols
	OPENBSD_6_2:1.46.0.2
	OPENBSD_6_2_BASE:1.46
	OPENBSD_6_1:1.45.0.4
	OPENBSD_6_1_BASE:1.45
	OPENBSD_6_0:1.44.0.4
	OPENBSD_6_0_BASE:1.44
	OPENBSD_5_9:1.44.0.2
	OPENBSD_5_9_BASE:1.44
	OPENBSD_5_8:1.43.0.4
	OPENBSD_5_8_BASE:1.43
	OPENBSD_5_7:1.40.0.2
	OPENBSD_5_7_BASE:1.40
	OPENBSD_5_6:1.37.0.6
	OPENBSD_5_6_BASE:1.37
	OPENBSD_5_5:1.37.0.4
	OPENBSD_5_5_BASE:1.37
	OPENBSD_5_4:1.36.0.16
	OPENBSD_5_4_BASE:1.36
	OPENBSD_5_3:1.36.0.14
	OPENBSD_5_3_BASE:1.36
	OPENBSD_5_2:1.36.0.12
	OPENBSD_5_2_BASE:1.36
	OPENBSD_5_1_BASE:1.36
	OPENBSD_5_1:1.36.0.10
	OPENBSD_5_0:1.36.0.8
	OPENBSD_5_0_BASE:1.36
	OPENBSD_4_9:1.36.0.6
	OPENBSD_4_9_BASE:1.36
	OPENBSD_4_8:1.36.0.4
	OPENBSD_4_8_BASE:1.36
	OPENBSD_4_7:1.36.0.2
	OPENBSD_4_7_BASE:1.36
	OPENBSD_4_6:1.34.0.14
	OPENBSD_4_6_BASE:1.34
	OPENBSD_4_5:1.34.0.10
	OPENBSD_4_5_BASE:1.34
	OPENBSD_4_4:1.34.0.8
	OPENBSD_4_4_BASE:1.34
	OPENBSD_4_3:1.34.0.6
	OPENBSD_4_3_BASE:1.34
	OPENBSD_4_2:1.34.0.4
	OPENBSD_4_2_BASE:1.34
	OPENBSD_4_1:1.34.0.2
	OPENBSD_4_1_BASE:1.34
	OPENBSD_4_0:1.33.0.4
	OPENBSD_4_0_BASE:1.33
	OPENBSD_3_9:1.33.0.2
	OPENBSD_3_9_BASE:1.33
	OPENBSD_3_8:1.32.0.2
	OPENBSD_3_8_BASE:1.32
	OPENBSD_3_7:1.31.0.6
	OPENBSD_3_7_BASE:1.31
	OPENBSD_3_6:1.31.0.4
	OPENBSD_3_6_BASE:1.31
	OPENBSD_3_5:1.31.0.2
	OPENBSD_3_5_BASE:1.31
	OPENBSD_3_4:1.30.0.2
	OPENBSD_3_4_BASE:1.30
	OPENBSD_3_3:1.27.0.2
	OPENBSD_3_3_BASE:1.27
	OPENBSD_3_2:1.26.0.2
	OPENBSD_3_2_BASE:1.26
	OPENBSD_3_1:1.24.0.2
	OPENBSD_3_1_BASE:1.24
	OPENBSD_3_0:1.22.0.2
	OPENBSD_3_0_BASE:1.22
	OPENBSD_2_9:1.20.0.2
	OPENBSD_2_9_BASE:1.20
	OPENBSD_2_8:1.18.0.4
	OPENBSD_2_8_BASE:1.18
	OPENBSD_2_7:1.18.0.2
	OPENBSD_2_7_BASE:1.18
	OPENBSD_2_6:1.17.0.2
	OPENBSD_2_6_BASE:1.17
	OPENBSD_2_5:1.14.0.4
	OPENBSD_2_5_BASE:1.14
	OPENBSD_2_4:1.14.0.2
	OPENBSD_2_4_BASE:1.14
	OPENBSD_2_3:1.13.0.4
	OPENBSD_2_3_BASE:1.13
	OPENBSD_2_2:1.13.0.2
	OPENBSD_2_2_BASE:1.13
	OPENBSD_2_1:1.7.0.2
	OPENBSD_2_1_BASE:1.7
	OPENBSD_2_0:1.5.0.2
	OPENBSD_2_0_BASE:1.5
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.46
date	2017.04.03.20.59.19;	author fcambus;	state Exp;
branches;
next	1.45;
commitid	P1EnG6WkdPsROwWC;

1.45
date	2016.09.01.09.50.38;	author deraadt;	state Exp;
branches;
next	1.44;
commitid	VmwtjpjasA2BbeCx;

1.44
date	2015.11.16.18.35.31;	author deraadt;	state Exp;
branches;
next	1.43;
commitid	nPonU05m1PlXnmIz;

1.43
date	2015.04.23.02.13.18;	author deraadt;	state Exp;
branches;
next	1.42;
commitid	zBYH1OA680gJPoSA;

1.42
date	2015.04.18.18.28.37;	author deraadt;	state Exp;
branches;
next	1.41;
commitid	6b2lLILbgCR1fvia;

1.41
date	2015.03.15.00.41.27;	author millert;	state Exp;
branches;
next	1.40;
commitid	IbVxlqGw2UipKdDr;

1.40
date	2015.01.21.19.38.53;	author naddy;	state Exp;
branches;
next	1.39;
commitid	8Msc3KSKt57diFvw;

1.39
date	2015.01.21.19.29.52;	author naddy;	state Exp;
branches;
next	1.38;
commitid	v51OE8Ye2r0w74vY;

1.38
date	2015.01.16.06.40.01;	author deraadt;	state Exp;
branches;
next	1.37;
commitid	Uu5nFG3wCl0LACBb;

1.37
date	2013.11.22.04.12.48;	author deraadt;	state Exp;
branches;
next	1.36;

1.36
date	2009.12.24.10.06.35;	author sobrado;	state Exp;
branches;
next	1.35;

1.35
date	2009.10.27.23.59.34;	author deraadt;	state Exp;
branches;
next	1.34;

1.34
date	2006.10.18.21.58.55;	author cloder;	state Exp;
branches;
next	1.33;

1.33
date	2005.12.02.01.05.38;	author deraadt;	state Exp;
branches;
next	1.32;

1.32
date	2005.05.19.09.28.24;	author jmc;	state Exp;
branches;
next	1.31;

1.31
date	2004.01.24.19.14.09;	author deraadt;	state Exp;
branches;
next	1.30;

1.30
date	2003.07.30.20.56.19;	author avsm;	state Exp;
branches;
next	1.29;

1.29
date	2003.06.02.20.06.17;	author millert;	state Exp;
branches;
next	1.28;

1.28
date	2003.04.16.15.01.58;	author mickey;	state Exp;
branches;
next	1.27;

1.27
date	2002.12.08.16.50.07;	author millert;	state Exp;
branches;
next	1.26;

1.26
date	2002.07.03.22.32.33;	author deraadt;	state Exp;
branches;
next	1.25;

1.25
date	2002.05.26.09.24.35;	author deraadt;	state Exp;
branches;
next	1.24;

1.24
date	2002.02.16.21.27.38;	author millert;	state Exp;
branches;
next	1.23;

1.23
date	2001.11.05.07.39.17;	author mpech;	state Exp;
branches;
next	1.22;

1.22
date	2001.07.09.07.04.47;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2001.07.07.18.26.22;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2001.01.19.17.57.43;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2001.01.15.20.04.07;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2000.01.15.07.00.43;	author ericj;	state Exp;
branches;
next	1.17;

1.17
date	99.09.03.18.11.51;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	99.07.19.00.16.38;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	99.04.29.22.25.04;	author alex;	state Exp;
branches;
next	1.14;

1.14
date	98.04.25.04.45.38;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	97.09.04.00.51.53;	author mickey;	state Exp;
branches;
next	1.12;

1.12
date	97.08.24.16.36.26;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	97.07.25.04.45.53;	author mickey;	state Exp;
branches;
next	1.10;

1.10
date	97.07.25.01.26.47;	author mickey;	state Exp;
branches;
next	1.9;

1.9
date	97.06.23.07.03.30;	author downsj;	state Exp;
branches;
next	1.8;

1.8
date	97.06.22.22.29.06;	author downsj;	state Exp;
branches;
next	1.7;

1.7
date	97.01.15.23.41.42;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	96.12.22.02.59.53;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	96.09.20.07.12.57;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.09.02.12.21.57;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.09.02.12.19.31;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.06.23.14.32.42;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.43.50;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.43.50;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.46
log
@warn format string should be literal.

OK deraadt@@, millert@@
@
text
@/*	$OpenBSD: shutdown.c,v 1.45 2016/09/01 09:50:38 deraadt Exp $	*/
/*	$NetBSD: shutdown.c,v 1.9 1995/03/18 15:01:09 cgd Exp $	*/

/*
 * Copyright (c) 1988, 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/resource.h>
#include <sys/syslog.h>
#include <sys/types.h>
#include <sys/wait.h>

#include <ctype.h>
#include <fcntl.h>
#include <sys/termios.h>
#include <pwd.h>
#include <setjmp.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>
#include <limits.h>
#include <errno.h>
#include <err.h>

#include "pathnames.h"

#ifdef DEBUG
#undef _PATH_NOLOGIN
#define	_PATH_NOLOGIN	"./nologin"
#undef _PATH_FASTBOOT
#define	_PATH_FASTBOOT	"./fastboot"
#endif

#define	H		*60*60
#define	M		*60
#define	S		*1
#define	NOLOG_TIME	5*60
struct interval {
	int timeleft, timetowait;
} tlist[] = {
	{ 10 H,  5 H },
	{  5 H,  3 H },
	{  2 H,  1 H },
	{  1 H, 30 M },
	{ 30 M, 10 M },
	{ 20 M, 10 M },
	{ 10 M,  5 M },
	{  5 M,  3 M },
	{  2 M,  1 M },
	{  1 M, 30 S },
	{ 30 S, 30 S },
	{    0,    0 }
};
#undef H
#undef M
#undef S

static time_t offset, shuttime;
static int dofast, dohalt, doreboot, dopower, dodump, mbuflen, nosync;
static sig_atomic_t killflg;
static char *whom, mbuf[BUFSIZ];

void badtime(void);
void __dead die_you_gravy_sucking_pig_dog(void);
void doitfast(void);
void __dead finish(int);
void getoffset(char *);
void __dead loop(void);
void nolog(void);
void timeout(int);
void timewarn(int);
void usage(void);

int
main(int argc, char *argv[])
{
	int arglen, ch, len, readstdin = 0;
	struct passwd *pw;
	char *p, *endp;
	pid_t forkpid;

	if (pledge("stdio rpath wpath cpath getpw tty id proc exec", NULL) == -1)
		err(1, "pledge");

#ifndef DEBUG
	if (geteuid())
		errx(1, "NOT super-user");
#endif
	while ((ch = getopt(argc, argv, "dfhknpr-")) != -1)
		switch (ch) {
		case '-':
			readstdin = 1;
			break;
		case 'd':
			dodump = 1;
			break;
		case 'f':
			dofast = 1;
			break;
		case 'h':
			dohalt = 1;
			break;
		case 'k':
			killflg = 1;
			break;
		case 'n':
			nosync = 1;
			break;
		case 'p':
			dopower = 1;
			break;
		case 'r':
			doreboot = 1;
			break;
		default:
			usage();
		}
	argc -= optind;
	argv += optind;

	if (argc < 1)
		usage();

	if (dofast && nosync) {
		(void)fprintf(stderr,
		    "shutdown: incompatible switches -f and -n.\n");
		usage();
	}
	if (doreboot && dohalt) {
		(void)fprintf(stderr,
		    "shutdown: incompatible switches -h and -r.\n");
		usage();
	}
	if (doreboot && dopower) {
		(void)fprintf(stderr,
		    "shutdown: incompatible switches -p and -r.\n");
		usage();
	}
	getoffset(*argv++);

	if (*argv) {
		for (p = mbuf, len = sizeof(mbuf); *argv; ++argv) {
			arglen = strlen(*argv);
			if ((len -= arglen) <= 2)
				break;
			if (p != mbuf)
				*p++ = ' ';
			memcpy(p, *argv, arglen);
			p += arglen;
		}
		*p = '\n';
		*++p = '\0';
	}

	if (readstdin) {
		p = mbuf;
		endp = mbuf + sizeof(mbuf) - 2;
		for (;;) {
			if (!fgets(p, endp - p + 1, stdin))
				break;
			for (; *p &&  p < endp; ++p)
				;
			if (p == endp) {
				*p = '\n';
				*++p = '\0';
				break;
			}
		}
	}
	mbuflen = strlen(mbuf);

	if (offset) {
		char *ct = ctime(&shuttime);

		if (ct)
			printf("Shutdown at %.24s.\n", ct);
		else
			printf("Shutdown soon.\n");
	} else
		(void)printf("Shutdown NOW!\n");

	if (!(whom = getlogin()))
		whom = (pw = getpwuid(getuid())) ? pw->pw_name : "???";

#ifdef DEBUG
	(void)putc('\n', stdout);
#else
	(void)setpriority(PRIO_PROCESS, 0, PRIO_MIN);

	forkpid = fork();
	if (forkpid == -1)
		err(1, "fork");
	if (forkpid) {
		(void)printf("shutdown: [pid %ld]\n", (long)forkpid);
		exit(0);
	}
	setsid();
#endif
	openlog("shutdown", LOG_CONS, LOG_AUTH);
	loop();
	/* NOTREACHED */
}

void
loop(void)
{
	struct interval *tp;
	u_int sltime;
	int logged;

	if (offset <= NOLOG_TIME) {
		logged = 1;
		nolog();
	} else
		logged = 0;
	tp = tlist;
	if (tp->timeleft < offset)
		(void)sleep((u_int)(offset - tp->timeleft));
	else {
		while (offset < tp->timeleft)
			++tp;
		/*
		 * Warn now, if going to sleep more than a fifth of
		 * the next wait time.
		 */
		if ((sltime = offset - tp->timeleft)) {
			if (sltime > tp->timetowait / 5)
				timewarn(offset);
			(void)sleep(sltime);
		}
	}
	for (;; ++tp) {
		timewarn(tp->timeleft);
		if (!logged && tp->timeleft <= NOLOG_TIME) {
			logged = 1;
			nolog();
		}
		(void)sleep((u_int)tp->timetowait);
		if (!tp->timeleft)
			break;
	}
	die_you_gravy_sucking_pig_dog();
}

static jmp_buf alarmbuf;

static char *restricted_environ[] = {
	"PATH=" _PATH_STDPATH,
	NULL
};

void
timewarn(int timeleft)
{
	static char hostname[HOST_NAME_MAX+1];
	char wcmd[PATH_MAX + 4];
	extern char **environ;
	static int first;
	FILE *pf;

	if (!first++)
		(void)gethostname(hostname, sizeof(hostname));

	/* undoc -n option to wall suppresses normal wall banner */
	(void)snprintf(wcmd, sizeof(wcmd), "%s -n", _PATH_WALL);
	environ = restricted_environ;
	if (!(pf = popen(wcmd, "w"))) {
		syslog(LOG_ERR, "shutdown: can't find %s: %m", _PATH_WALL);
		return;
	}

	(void)fprintf(pf,
	    "\007*** %sSystem shutdown message from %s@@%s ***\007\n",
	    timeleft ? "": "FINAL ", whom, hostname);

	if (timeleft > 10*60) {
		struct tm *tm = localtime(&shuttime);

		fprintf(pf, "System going down at %d:%02d\n\n",
		    tm->tm_hour, tm->tm_min);
	} else if (timeleft > 59)
		(void)fprintf(pf, "System going down in %d minute%s\n\n",
		    timeleft / 60, (timeleft > 60) ? "s" : "");
	else if (timeleft)
		(void)fprintf(pf, "System going down in 30 seconds\n\n");
	else
		(void)fprintf(pf, "System going down IMMEDIATELY\n\n");

	if (mbuflen)
		(void)fwrite(mbuf, sizeof(*mbuf), mbuflen, pf);

	/*
	 * play some games, just in case wall doesn't come back
	 * probably unnecessary, given that wall is careful.
	 */
	if (!setjmp(alarmbuf)) {
		(void)signal(SIGALRM, timeout);
		(void)alarm((u_int)30);
		(void)pclose(pf);
		(void)alarm((u_int)0);
		(void)signal(SIGALRM, SIG_DFL);
	}
}

void
timeout(int signo)
{
	longjmp(alarmbuf, 1);		/* XXX signal/longjmp resource leaks */
}

void
die_you_gravy_sucking_pig_dog(void)
{

	syslog(LOG_NOTICE, "%s by %s: %s",
	    doreboot ? "reboot" : dopower ? "power-down" : dohalt ? "halt" :
	    "shutdown", whom, mbuf);
	(void)sleep(2);

	(void)printf("\r\nSystem shutdown time has arrived\007\007\r\n");
	if (killflg) {
		(void)printf("\rbut you'll have to do it yourself\r\n");
		finish(0);
	}
	if (dofast)
		doitfast();

	if (pledge("stdio rpath wpath cpath tty id proc exec", NULL) == -1)
		err(1, "pledge");

#ifdef DEBUG
	if (doreboot)
		(void)printf("reboot");
	else if (dopower)
		(void)printf("power-down");
	else if (dohalt)
		(void)printf("halt");
	if (nosync)
		(void)printf(" no sync");
	if (dofast)
		(void)printf(" no fsck");
	if (dodump)
		(void)printf(" with dump");
	(void)printf("\nkill -HUP 1\n");
#else
	if (dohalt || dopower || doreboot) {
		char *args[10];
		char **arg, *path;

		if (pledge("stdio exec", NULL) == -1)
			err(1, "pledge");

		arg = &args[0];
		if (doreboot) {
			path = _PATH_REBOOT;
			*arg++ = "reboot";
		} else {
			path = _PATH_HALT;
			*arg++ = "halt";
		}
		*arg++ = "-l";
		if (dopower)
			*arg++ = "-p";
		if (nosync)
			*arg++ = "-n";
		if (dodump)
			*arg++ = "-d";
		*arg++ = NULL;
		execve(path, args, NULL);
		syslog(LOG_ERR, "shutdown: can't exec %s: %m.", path);
		warn("%s", path);
	}
	if (access(_PATH_RC, R_OK) != -1) {
		pid_t pid;
		struct termios t;
		int fd;

		switch ((pid = fork())) {
		case -1:
			break;
		case 0:
			if (revoke(_PATH_CONSOLE) == -1)
				perror("revoke");
			if (setsid() == -1)
				perror("setsid");
			fd = open(_PATH_CONSOLE, O_RDWR);
			if (fd == -1)
				perror("open");
			dup2(fd, 0);
			dup2(fd, 1);
			dup2(fd, 2);
			if (fd > 2)
				close(fd);

			/* At a minimum... */
			tcgetattr(0, &t);
			t.c_oflag |= (ONLCR | OPOST);
			tcsetattr(0, TCSANOW, &t);

			execl(_PATH_BSHELL, "sh", _PATH_RC, "shutdown", (char *)NULL);
			_exit(1);
		default:
			waitpid(pid, NULL, 0);
		}
	}
	(void)kill(1, SIGTERM);		/* to single user */
#endif
	finish(0);
}

#define	ATOI2(p)	(p[0] - '0') * 10 + (p[1] - '0'); p += 2;

void
getoffset(char *timearg)
{
	struct tm *lt;
	int this_year;
	time_t now;
	char *p;

	if (!strcasecmp(timearg, "now")) {		/* now */
		offset = 0;
		return;
	}

	(void)time(&now);
	if (*timearg == '+') {				/* +minutes */
		const char *errstr;

		offset = strtonum(++timearg, 0, INT_MAX, &errstr);
		if (errstr)
			badtime();
		offset *= 60;
		shuttime = now + offset;
		return;
	}

	/* handle hh:mm by getting rid of the colon */
	for (p = timearg; *p; ++p) {
		if (!isascii((unsigned char)*p) || !isdigit((unsigned char)*p)) {
			if (*p == ':' && strlen(p) == 3) {
				p[0] = p[1];
				p[1] = p[2];
				p[2] = '\0';
			} else
				badtime();
		}
	}

	unsetenv("TZ");					/* OUR timezone */
	lt = localtime(&now);				/* current time val */

	switch (strlen(timearg)) {
	case 10:
		this_year = lt->tm_year;
		lt->tm_year = ATOI2(timearg);
		/*
		 * check if the specified year is in the next century.
		 * allow for one year of user error as many people will
		 * enter n - 1 at the start of year n.
		 */
		if (lt->tm_year < (this_year % 100) - 1)
			lt->tm_year += 100;
		/* adjust for the year 2000 and beyond */
		lt->tm_year += (this_year - (this_year % 100));
		/* FALLTHROUGH */
	case 8:
		lt->tm_mon = ATOI2(timearg);
		if (--lt->tm_mon < 0 || lt->tm_mon > 11)
			badtime();
		/* FALLTHROUGH */
	case 6:
		lt->tm_mday = ATOI2(timearg);
		if (lt->tm_mday < 1 || lt->tm_mday > 31)
			badtime();
		/* FALLTHROUGH */
	case 4:
		lt->tm_hour = ATOI2(timearg);
		if (lt->tm_hour < 0 || lt->tm_hour > 23)
			badtime();
		lt->tm_min = ATOI2(timearg);
		if (lt->tm_min < 0 || lt->tm_min > 59)
			badtime();
		lt->tm_sec = 0;
		if ((shuttime = mktime(lt)) == -1)
			badtime();
		if ((offset = shuttime - now) < 0)
			errx(1, "that time is already past.");
		break;
	default:
		badtime();
	}
}

void
doitfast(void)
{
	int fastfd;

	if ((fastfd = open(_PATH_FASTBOOT, O_WRONLY|O_CREAT|O_TRUNC,
	    0664)) >= 0) {
		dprintf(fastfd, "fastboot file for fsck\n");
		close(fastfd);
	}
}

void
nolog(void)
{
	int logfd;
	struct tm *tm;

	(void)unlink(_PATH_NOLOGIN);	/* in case linked to another file */
	(void)signal(SIGINT, finish);
	(void)signal(SIGHUP, finish);
	(void)signal(SIGQUIT, finish);
	(void)signal(SIGTERM, finish);
	tm = localtime(&shuttime);
	if (tm && (logfd = open(_PATH_NOLOGIN, O_WRONLY|O_CREAT|O_TRUNC,
	    0664)) >= 0) {
		dprintf(logfd,
		    "\n\nNO LOGINS: System going down at %d:%02d\n\n",
		    tm->tm_hour, tm->tm_min);
		close(logfd);
	}
}

void
finish(int signo)
{
	if (!killflg)
		(void)unlink(_PATH_NOLOGIN);
	if (signo == 0)
		exit(0);
	else
		_exit(0);
}

void
badtime(void)
{
	errx(1, "bad time format.");
}

void
usage(void)
{
	fprintf(stderr,
	    "usage: shutdown [-] [-dfhknpr] time [warning-message ...]\n");
	exit(1);
}
@


1.45
log
@Aggressively use dprintf, rather than crazy unchecked writes.  Use
localtime() since it tends to work better than ctime() when some
filesystems are absent.
ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: shutdown.c,v 1.44 2015/11/16 18:35:31 deraadt Exp $	*/
d400 1
a400 1
		warn(path);
@


1.44
log
@initially, pledge "stdio rpath wpath cpath getpw tty id proc exec", yes
it sounds like a lot, but this will eventually run the /etc/rc scripts
to shutdown, then run reboot or halt.  After looking at getpw*, drop
pledge "getpw".  Later drop to just "stdio exec"...

This depends on new pledge semantics for revoke(2).

with help from jca
ok guenther millert semarie tedu jca
@
text
@d1 1
a1 1
/*	$OpenBSD: shutdown.c,v 1.43 2015/04/23 02:13:18 deraadt Exp $	*/
d201 8
a208 3
	if (offset)
		(void)printf("Shutdown at %.24s.\n", ctime(&shuttime));
	else
d305 6
a310 4
	if (timeleft > 10*60)
		(void)fprintf(pf, "System going down at %5.5s\n\n",
		    ctime(&shuttime) + 11);
	else if (timeleft > 59)
a523 1
#define	FSMSG	"fastboot file for fsck\n"
d531 2
a532 2
		(void)write(fastfd, FSMSG, sizeof(FSMSG) - 1);
		(void)close(fastfd);
a535 1
#define	NOMSG	"\n\nNO LOGINS: System going down at "
d540 1
a540 1
	char *ct;
d547 2
a548 1
	if ((logfd = open(_PATH_NOLOGIN, O_WRONLY|O_CREAT|O_TRUNC,
d550 4
a553 6
		(void)write(logfd, NOMSG, sizeof(NOMSG) - 1);
		ct = ctime(&shuttime);
		(void)write(logfd, ct + 11, 5);
		(void)write(logfd, "\n\n", 2);
		(void)write(logfd, mbuf, strlen(mbuf));
		(void)close(logfd);
@


1.43
log
@error in strtonum() conversion; found by Nathanael Rensen
@
text
@d1 1
a1 1
/*	$OpenBSD: shutdown.c,v 1.42 2015/04/18 18:28:37 deraadt Exp $	*/
d111 3
d349 4
d371 3
@


1.42
log
@Convert many atoi() calls to strtonum(), adding range checks and failure
handling along the way.
Reviews by Brendan MacDonell, Jeremy Devenport, florian, doug, millert
@
text
@d1 1
a1 1
/*	$OpenBSD: shutdown.c,v 1.41 2015/03/15 00:41:27 millert Exp $	*/
d443 1
a443 1
		if (errstr);
@


1.41
log
@tzfile.h is an internal header that should never have been installed.
What's worse, the tzfile.h that gets installed is over 20 years old
and doesn't match the real tzfile.h in libc/time.  This makes the
tree safe for /usr/include/tzfile.h removal.  The TM_YEAR_BASE
define has been moved to time.h temporarily until its usage is
replaced by 1900 in the tree.  Actual removal of tzfile.h is pending
a ports build.  Based on a diff from deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: shutdown.c,v 1.40 2015/01/21 19:38:53 naddy Exp $	*/
d440 4
a443 1
		if (!isdigit((unsigned char)*++timearg))
d445 1
a445 1
		offset = atoi(timearg) * 60;
@


1.40
log
@Build the argument list for halt/reboot without excessive use of
the conditional operator.  Adapted from NetBSD.  ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: shutdown.c,v 1.39 2015/01/21 19:29:52 naddy Exp $	*/
a48 1
#include <tzfile.h>
@


1.39
log
@Use plain "-p" to specify "halt and power down", for consistency
and compatibility with other BSDs.  Adapted from FreeBSD.
Still permit the combination "-hp" as requested by many.
ok sthen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: shutdown.c,v 1.38 2015/01/16 06:40:01 deraadt Exp $	*/
d362 23
a384 14
	if (doreboot) {
		execle(_PATH_REBOOT, "reboot", "-l",
		    (nosync ? "-n" : (dodump ? "-d" : NULL)),
		    (dodump ? "-d" : NULL), (char *)NULL, (char *)NULL);
		syslog(LOG_ERR, "shutdown: can't exec %s: %m.", _PATH_REBOOT);
		warn(_PATH_REBOOT);
	}
	else if (dohalt || dopower) {
		execle(_PATH_HALT, "halt", "-l",
		    (dopower ? "-p" : (nosync ? "-n" : (dodump ? "-d" : NULL))),
		    (nosync ? "-n" : (dodump ? "-d" : NULL)),
		    (dodump ? "-d" : NULL), (char *)NULL, (char *)NULL);
		syslog(LOG_ERR, "shutdown: can't exec %s: %m.", _PATH_HALT);
		warn(_PATH_HALT);
@


1.38
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: shutdown.c,v 1.37 2013/11/22 04:12:48 deraadt Exp $	*/
d161 1
a161 1
	if (dopower && !dohalt) {
d163 1
a163 1
		    "shutdown: switch -p must be used with -h.\n");
d336 2
a337 1
	    doreboot ? "reboot" : dohalt ? "halt" : "shutdown", whom, mbuf);
d350 2
d369 1
a369 1
	else if (dohalt) {
d552 2
a553 1
	fprintf(stderr, "usage: shutdown [-] [-dfhknpr] time [warning-message ...]\n");
@


1.37
log
@Whole bunch of (unsigned char) casts carefully added for ctype calls.
Careful second audit by millert
@
text
@d1 1
a1 1
/*	$OpenBSD: shutdown.c,v 1.36 2009/12/24 10:06:35 sobrado Exp $	*/
d33 1
a33 1
#include <sys/param.h>
d51 1
d277 2
a278 2
	static char hostname[MAXHOSTNAMELEN];
	char wcmd[MAXPATHLEN + 4];
@


1.36
log
@spelling fixes, from Brad Tilley; we will not fix src/sbin/dump/dump.h
as neither arrayified not arrayfied exist -- sanctioned dictionaries
like Merriam-Webster ones suggest a few alternatives (e.g., arrayed),
however these made up words are easy to understand and we are not
certain that current ones are not ok.

ok jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: shutdown.c,v 1.35 2009/10/27 23:59:34 deraadt Exp $	*/
d428 1
a428 1
		if (!isdigit(*++timearg))
d437 1
a437 1
		if (!isascii(*p) || !isdigit(*p)) {
@


1.35
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: shutdown.c,v 1.34 2006/10/18 21:58:55 cloder Exp $	*/
d313 1
a313 1
	 * probably unecessary, given that wall is careful.
@


1.34
log
@Replace gcc __attribute with __dead. Recompile yields no binary change.
@
text
@d1 1
a1 1
/*	$OpenBSD: shutdown.c,v 1.33 2005/12/02 01:05:38 deraadt Exp $	*/
a31 14

#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1988, 1990, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)shutdown.c	8.2 (Berkeley) 2/16/94";
#else
static char rcsid[] = "$OpenBSD: shutdown.c,v 1.33 2005/12/02 01:05:38 deraadt Exp $";
#endif
#endif /* not lint */
@


1.33
log
@more sig_atomic_t
@
text
@d1 1
a1 1
/*	$OpenBSD: shutdown.c,v 1.32 2005/05/19 09:28:24 jmc Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: shutdown.c,v 1.32 2005/05/19 09:28:24 jmc Exp $";
d107 1
a107 1
void __attribute ((noreturn)) die_you_gravy_sucking_pig_dog(void);
d109 1
a109 1
void __attribute ((noreturn)) finish(int);
d111 1
a111 1
void __attribute ((noreturn)) loop(void);
@


1.32
log
@sort options + sync usage();
@
text
@d1 1
a1 1
/*	$OpenBSD: shutdown.c,v 1.31 2004/01/24 19:14:09 deraadt Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: shutdown.c,v 1.31 2004/01/24 19:14:09 deraadt Exp $";
d102 2
a103 1
static int dofast, dohalt, doreboot, dopower, dodump, killflg, mbuflen, nosync;
@


1.31
log
@minor knf
@
text
@d1 1
a1 1
/*	$OpenBSD: shutdown.c,v 1.30 2003/07/30 20:56:19 avsm Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: shutdown.c,v 1.30 2003/07/30 20:56:19 avsm Exp $";
d561 1
a561 1
	fprintf(stderr, "usage: shutdown [-dfhknpr] shutdowntime [ message ]\n");
@


1.30
log
@NULL -> (char *)NULL in execle; ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: shutdown.c,v 1.29 2003/06/02 20:06:17 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: shutdown.c,v 1.29 2003/06/02 20:06:17 millert Exp $";
d119 2
d122 1
a122 2
	struct passwd *pw;
	int arglen, ch, len, readstdin;
a127 1
	readstdin = 0;
a153 1
		case '?':
d200 2
a201 1
			for (; *p &&  p < endp; ++p);
a222 2
	{
		pid_t forkpid;
d224 6
a229 7
		forkpid = fork();
		if (forkpid == -1)
			err(1, "fork");
		if (forkpid) {
			(void)printf("shutdown: [pid %ld]\n", (long)forkpid);
			exit(0);
		}
d248 1
a248 2
	}
	else
a288 1
	static int first;
a289 1
	FILE *pf;
d292 2
d430 2
a432 2
	time_t now;
	int this_year;
d463 1
a463 1
	switch(strlen(timearg)) {
@


1.29
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: shutdown.c,v 1.28 2003/04/16 15:01:58 mickey Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: shutdown.c,v 1.28 2003/04/16 15:01:58 mickey Exp $";
d378 1
a378 1
		    (dodump ? "-d" : NULL), NULL, NULL);
d386 1
a386 1
		    (dodump ? "-d" : NULL), NULL, NULL);
@


1.28
log
@use errx instead of fprintf+exit; millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: shutdown.c,v 1.27 2002/12/08 16:50:07 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d43 1
a43 1
static char rcsid[] = "$OpenBSD: shutdown.c,v 1.27 2002/12/08 16:50:07 millert Exp $";
@


1.27
log
@GNU semantics say that if optstring begins with '-' then
each non-option shall be treated as arguments to option '\1'.

BSD getopt match '-' in optstring with a '-' on the command line.
This is used to support deprecated options like "su -" that would
otherwise prevent the use of getopt().

Resolving this simply requires that the leading '-' be moved somewhere
else (I moved it to the end of optstring) since position within
optstring is not meaningful.
@
text
@d1 1
a1 1
/*	$OpenBSD: shutdown.c,v 1.26 2002/07/03 22:32:33 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: shutdown.c,v 1.26 2002/07/03 22:32:33 deraadt Exp $";
d128 2
a129 4
	if (geteuid()) {
		(void)fprintf(stderr, "shutdown: NOT super-user\n");
		exit(1);
	}
d505 2
a506 5
		if ((offset = shuttime - now) < 0) {
			(void)fprintf(stderr,
			    "shutdown: that time is already past.\n");
			exit(1);
		}
@


1.26
log
@ansi
@
text
@d1 1
a1 1
/*	$OpenBSD: shutdown.c,v 1.25 2002/05/26 09:24:35 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: shutdown.c,v 1.25 2002/05/26 09:24:35 deraadt Exp $";
d134 1
a134 1
	while ((ch = getopt(argc, argv, "-dfhknpr")) != -1)
@


1.25
log
@pid_t cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: shutdown.c,v 1.24 2002/02/16 21:27:38 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: shutdown.c,v 1.24 2002/02/16 21:27:38 millert Exp $";
d121 1
a121 3
main(argc, argv)
	int argc;
	char *argv[];
d248 1
a248 1
loop()
d297 1
a297 2
timewarn(timeleft)
	int timeleft;
d348 1
a348 2
timeout(signo)
	int signo;
d354 1
a354 1
die_you_gravy_sucking_pig_dog()
d437 1
a437 2
getoffset(timearg)
	char *timearg;
d520 1
a520 1
doitfast()
d533 1
a533 1
nolog()
d555 1
a555 2
finish(signo)
	int signo;
d566 1
a566 1
badtime()
d572 1
a572 1
usage()
@


1.24
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: shutdown.c,v 1.23 2001/11/05 07:39:17 mpech Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: shutdown.c,v 1.23 2001/11/05 07:39:17 mpech Exp $";
d232 1
a232 1
		int forkpid;
d238 1
a238 1
			(void)printf("shutdown: [pid %d]\n", forkpid);
@


1.23
log
@kill more registers;

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: shutdown.c,v 1.22 2001/07/09 07:04:47 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: shutdown.c,v 1.22 2001/07/09 07:04:47 deraadt Exp $";
d109 10
a118 10
void badtime __P((void));
void __attribute ((noreturn)) die_you_gravy_sucking_pig_dog __P((void));
void doitfast __P((void));
void __attribute ((noreturn)) finish __P((int));
void getoffset __P((char *));
void __attribute ((noreturn)) loop __P((void));
void nolog __P((void));
void timeout __P((int));
void timewarn __P((int));
void usage __P((void));
@


1.22
log
@correct type on last arg to execl(); nordin@@cse.ogi.edu
@
text
@d1 1
a1 1
/*	$OpenBSD: shutdown.c,v 1.21 2001/07/07 18:26:22 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: shutdown.c,v 1.21 2001/07/07 18:26:22 deraadt Exp $";
d125 1
a125 1
	register char *p, *endp;
d442 1
a442 1
	register char *timearg;
d444 2
a445 2
	register struct tm *lt;
	register char *p;
@


1.21
log
@major -Wall cleanup, almost complete
@
text
@d1 1
a1 1
/*	$OpenBSD: shutdown.c,v 1.20 2001/01/19 17:57:43 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: shutdown.c,v 1.20 2001/01/19 17:57:43 deraadt Exp $";
d427 1
a427 1
			execl(_PATH_BSHELL, "sh", _PATH_RC, "shutdown", NULL);
@


1.20
log
@mark signal races i cannot fix at the moment
@
text
@d1 1
a1 1
/*	$OpenBSD: shutdown.c,v 1.19 2001/01/15 20:04:07 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: shutdown.c,v 1.19 2001/01/15 20:04:07 deraadt Exp $";
d464 2
a465 2
	for (p = timearg; *p; ++p)
		if (!isascii(*p) || !isdigit(*p))
d470 1
a470 2
			}
			else
d472 2
@


1.19
log
@use _exit() in term handler if real signal
@
text
@d1 1
a1 1
/*	$OpenBSD: shutdown.c,v 1.18 2000/01/15 07:00:43 ericj Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: shutdown.c,v 1.18 2000/01/15 07:00:43 ericj Exp $";
d354 1
a354 1
	longjmp(alarmbuf, 1);
@


1.18
log
@add 'd' to usage. mention rc.shutdown in the man page.
@
text
@d1 1
a1 1
/*	$OpenBSD: shutdown.c,v 1.17 1999/09/03 18:11:51 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: shutdown.c,v 1.17 1999/09/03 18:11:51 deraadt Exp $";
d564 4
a567 1
	exit(0);
@


1.17
log
@have shutdown code run /etc/rc with arg of "shutdown"; rc.shutdown becomes  completely admin-editable
@
text
@d1 1
a1 1
/*	$OpenBSD: shutdown.c,v 1.16 1999/07/19 00:16:38 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: shutdown.c,v 1.16 1999/07/19 00:16:38 deraadt Exp $";
a51 1
#include <sys/time.h>
d54 2
d66 1
a124 1
	extern int optind;
d576 1
a576 1
	fprintf(stderr, "usage: shutdown [-fhknpr] shutdowntime [ message ]\n");
@


1.16
log
@if we run /etc/rc.shutdown ourselves, do it on /dev/console
@
text
@d1 1
a1 1
/*	$OpenBSD: shutdown.c,v 1.15 1999/04/29 22:25:04 alex Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: shutdown.c,v 1.15 1999/04/29 22:25:04 alex Exp $";
d399 1
a399 1
	if (access(_PATH_RCSHUTDOWN, R_OK) != -1) {
d426 1
a426 1
			execl(_PATH_BSHELL, "sh", _PATH_RCSHUTDOWN, NULL);
@


1.15
log
@Y2K fix: allow 'shutdown yymmddhhmm' to work in the next century.
@
text
@d1 1
a1 1
/*	$OpenBSD: shutdown.c,v 1.14 1998/04/25 04:45:38 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: shutdown.c,v 1.14 1998/04/25 04:45:38 millert Exp $";
d58 1
d401 2
d408 18
d427 1
a427 1
			exit(1);
@


1.14
log
@run rc.shutdown even if -r or -h is not specified
@
text
@d1 1
a1 1
/*	$OpenBSD: shutdown.c,v 1.13 1997/09/04 00:51:53 mickey Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: shutdown.c,v 1.13 1997/09/04 00:51:53 mickey Exp $";
d425 1
d457 1
d459 9
@


1.13
log
@use err()/warn()/__progname where appropriate, consolidate string, some -Wall
@
text
@d1 1
a1 1
/*	$OpenBSD: shutdown.c,v 1.12 1997/08/24 16:36:26 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: shutdown.c,v 1.12 1997/08/24 16:36:26 deraadt Exp $";
d397 13
@


1.12
log
@give shutdown daemon own session; dima@@tejblum.dnttm.rssi.ru
@
text
@d1 1
a1 1
/*	$OpenBSD: shutdown.c,v 1.11 1997/07/25 04:45:53 mickey Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: shutdown.c,v 1.11 1997/07/25 04:45:53 mickey Exp $";
d66 2
d233 2
a234 4
		if (forkpid == -1) {
			perror("shutdown: fork");
			exit(1);
		}
d388 1
a388 1
		perror("shutdown");
d396 1
a396 1
		perror("shutdown");
d524 1
a524 2
	(void)fprintf(stderr, "shutdown: bad time format.\n");
	exit(1);
@


1.11
log
@do -d for reboot and halt
@
text
@d1 1
a1 1
/*	$OpenBSD: shutdown.c,v 1.10 1997/07/25 01:26:47 mickey Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: shutdown.c,v 1.10 1997/07/25 01:26:47 mickey Exp $";
d240 1
@


1.10
log
@-Wall
@
text
@d1 1
a1 1
/*	$OpenBSD: shutdown.c,v 1.9 1997/06/23 07:03:30 downsj Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: shutdown.c,v 1.9 1997/06/23 07:03:30 downsj Exp $";
d101 1
a101 1
static int dofast, dohalt, doreboot, dopower, killflg, mbuflen, nosync;
d132 1
a132 1
	while ((ch = getopt(argc, argv, "-fhknpr")) != -1)
d137 3
d378 2
d383 3
a385 2
		execle(_PATH_REBOOT, "reboot", "-l", (nosync ? "-n" : NULL),
		    NULL, NULL);
d391 3
a393 2
		    (dopower ? "-p" : (nosync ? "-n" : NULL)),
		    (nosync ? "-n" : NULL), NULL, NULL);
@


1.9
log
@Slightly cleaner.  (Change nosync to an int, like the rest.)
@
text
@d1 1
a1 1
/*	$OpenBSD: shutdown.c,v 1.8 1997/06/22 22:29:06 downsj Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: shutdown.c,v 1.8 1997/06/22 22:29:06 downsj Exp $";
d83 12
a94 4
	10 H,  5 H,	 5 H,  3 H,	 2 H,  1 H,	1 H, 30 M,
	30 M, 10 M,	20 M, 10 M,	10 M,  5 M,	5 M,  3 M,
	 2 M,  1 M,	 1 M, 30 S,	30 S, 30 S,
	 0, 0,
d105 1
a105 1
void die_you_gravy_sucking_pig_dog __P((void));
d107 1
a107 1
void finish __P((int));
d109 1
a109 1
void loop __P((void));
d266 1
a266 1
		if (sltime = offset - tp->timeleft) {
@


1.8
log
@Support halt -p.
@
text
@d1 1
a1 1
/*	$OpenBSD: shutdown.c,v 1.7 1997/01/15 23:41:42 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: shutdown.c,v 1.7 1997/01/15 23:41:42 millert Exp $";
d93 2
a94 2
static int dofast, dohalt, doreboot, dopower, killflg, mbuflen;
static char *nosync, *whom, mbuf[BUFSIZ];
a122 1
	nosync = NULL;
d139 1
a139 1
			nosync = "-n";
d370 2
a371 1
		execle(_PATH_REBOOT, "reboot", "-l", nosync, NULL, NULL);
d376 3
a378 6
		if (dopower) {
			execle(_PATH_HALT, "halt", "-l", "-p", nosync, NULL,
				NULL);
		} else {
			execle(_PATH_HALT, "halt", "-l", nosync, NULL, NULL);
		}
@


1.7
log
@getopt(3) returns -1 when out of args, not EOF, whee!
@
text
@d1 1
a1 1
/*	$OpenBSD: shutdown.c,v 1.6 1996/12/22 02:59:53 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: shutdown.c,v 1.6 1996/12/22 02:59:53 deraadt Exp $";
d93 1
a93 1
static int dofast, dohalt, doreboot, killflg, mbuflen;
d125 1
a125 1
	while ((ch = getopt(argc, argv, "-fhknr")) != -1)
d142 3
d168 5
d376 6
a381 1
		execle(_PATH_HALT, "halt", "-l", nosync, NULL, NULL);
d518 1
a518 1
	fprintf(stderr, "usage: shutdown [-fhknr] shutdowntime [ message ]\n");
@


1.6
log
@MAXHOSTNAMELEN, not +1
@
text
@d1 1
a1 1
/*	$OpenBSD: shutdown.c,v 1.5 1996/09/20 07:12:57 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: shutdown.c,v 1.5 1996/09/20 07:12:57 deraadt Exp $";
d125 1
a125 1
	while ((ch = getopt(argc, argv, "-fhknr")) != EOF)
@


1.5
log
@call execle with the correct params; netbsd pr#2737, augustss@@cs.chalmers.se
@
text
@d1 1
a1 1
/*	$OpenBSD: shutdown.c,v 1.4 1996/09/02 12:21:57 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: shutdown.c,v 1.4 1996/09/02 12:21:57 deraadt Exp $";
d282 1
a282 1
	static char hostname[MAXHOSTNAMELEN + 1];
@


1.4
log
@whoops
@
text
@d1 1
a1 1
/*	$OpenBSD: shutdown.c,v 1.3 1996/09/02 12:19:31 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: shutdown.c,v 1.3 1996/09/02 12:19:31 deraadt Exp $";
d363 1
a363 1
		execle(_PATH_REBOOT, "reboot", "-l", nosync, 0);
d368 1
a368 1
		execle(_PATH_HALT, "halt", "-l", nosync, 0);
@


1.3
log
@bad environ init; from brian@@saturn.net
@
text
@d1 1
a1 1
/*	$OpenBSD: shutdown.c,v 1.2 1996/06/23 14:32:42 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: shutdown.c,v 1.2 1996/06/23 14:32:42 deraadt Exp $";
d285 1
@


1.2
log
@update rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: shutdown.c,v 1.9 1995/03/18 15:01:09 cgd Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: shutdown.c,v 1.9 1995/03/18 15:01:09 cgd Exp $";
d272 5
d291 1
@


1.1
log
@Initial revision
@
text
@d1 1
d47 1
a47 1
static char rcsid[] = "$NetBSD: shutdown.c,v 1.9 1995/03/18 15:01:09 cgd Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
