head	1.22;
access;
symbols
	OPENBSD_3_7:1.21.0.2
	OPENBSD_3_7_BASE:1.21
	OPENBSD_3_6:1.20.0.6
	OPENBSD_3_6_BASE:1.20
	OPENBSD_3_5:1.20.0.4
	OPENBSD_3_5_BASE:1.20
	OPENBSD_3_4:1.20.0.2
	OPENBSD_3_4_BASE:1.20
	OPENBSD_3_3:1.19.0.2
	OPENBSD_3_3_BASE:1.19
	OPENBSD_3_2:1.17.0.2
	OPENBSD_3_2_BASE:1.17
	OPENBSD_3_1:1.16.0.2
	OPENBSD_3_1_BASE:1.16
	OPENBSD_3_0:1.15.0.4
	OPENBSD_3_0_BASE:1.15
	OPENBSD_2_9:1.15.0.2
	OPENBSD_2_9_BASE:1.15
	OPENBSD_2_8:1.14.0.4
	OPENBSD_2_8_BASE:1.14
	OPENBSD_2_7:1.14.0.2
	OPENBSD_2_7_BASE:1.14
	OPENBSD_2_6:1.13.0.2
	OPENBSD_2_6_BASE:1.13
	OPENBSD_2_5:1.7.0.2
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.22
date	2005.05.26.01.30.48;	author pedro;	state dead;
branches;
next	1.21;

1.21
date	2005.02.27.14.53.51;	author pedro;	state Exp;
branches;
next	1.20;

1.20
date	2003.06.02.20.06.15;	author millert;	state Exp;
branches;
next	1.19;

1.19
date	2003.02.28.11.25.34;	author tedu;	state Exp;
branches;
next	1.18;

1.18
date	2003.02.09.07.26.45;	author jmc;	state Exp;
branches;
next	1.17;

1.17
date	2002.06.26.21.32.02;	author fgsch;	state Exp;
branches;
next	1.16;

1.16
date	2002.02.11.18.43.51;	author mpech;	state Exp;
branches;
next	1.15;

1.15
date	2000.11.09.17.53.00;	author aaron;	state Exp;
branches;
next	1.14;

1.14
date	2000.03.18.22.56.00;	author aaron;	state Exp;
branches;
next	1.13;

1.13
date	99.09.23.04.12.02;	author alex;	state Exp;
branches;
next	1.12;

1.12
date	99.07.21.01.07.55;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	99.07.09.13.35.49;	author aaron;	state Exp;
branches;
next	1.10;

1.10
date	99.07.04.18.59.40;	author aaron;	state Exp;
branches;
next	1.9;

1.9
date	99.06.04.02.45.18;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	99.05.23.14.11.18;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	98.12.15.01.20.38;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	98.11.28.19.56.26;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	98.09.17.04.14.55;	author aaron;	state Exp;
branches;
next	1.4;

1.4
date	98.06.15.17.55.47;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	96.06.23.14.31.28;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.04.21.23.46.52;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.43.40;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.43.40;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.22
log
@bye bye
@
text
@.\"	$OpenBSD: mount_null.8,v 1.21 2005/02/27 14:53:51 pedro Exp $
.\"	$NetBSD: mount_null.8,v 1.4 1996/04/10 20:57:19 thorpej Exp $
.\"
.\" Copyright (c) 1992, 1993, 1994
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software donated to Berkeley by
.\" John Heidemann of the UCLA Ficus project.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @@(#)mount_null.8	8.4 (Berkeley) 4/19/94
.\"
.Dd April 19, 1994
.Dt MOUNT_NULL 8
.Os
.Sh NAME
.Nm mount_null
.Nd demonstrate the use of a null file system layer
.Sh SYNOPSIS
.Nm mount_null
.Op Fl o Ar options
.Ar target
.Ar mount_point
.Sh DESCRIPTION
The
.Nm
command creates a
null layer, duplicating a sub-tree of the file system
namespace under another part of the global file system namespace.
It is implemented using a stackable layers technique, and its
.Do
null-nodes
.Dc
stack above
all lower-layer vnodes (not just above directory vnodes).
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl o Ar options
Options are specified with a
.Fl o
flag followed by a comma separated string of options.
See the
.Xr mount 8
man page for possible options and their meanings.
.El
.Pp
The null layer has two purposes.
First, it serves as a demonstration of layering by proving a layer
which does nothing.
Second, the null layer can serve as a prototype layer.
Since it provides all necessary layer framework,
new file system layers can be created very easily by starting
with a null layer.
.Pp
The remainder of this man page examines the null layer as a basis
for constructing new layers.
.\"
.\"
.Sh INSTANTIATING NEW NULL LAYERS
New null layers are created with
.Nm mount_null .
.Nm
takes two arguments: the pathname
of the lower vfs (target-pn) and the pathname where the null
layer will appear in the namespace (mount-point-pn).
After the null layer is put into place, the contents
of target-pn subtree will be aliased under mount-point-pn.
.\"
.\"
.Sh OPERATION OF A NULL LAYER
The null layer is the minimum file system layer,
simply bypassing all possible operations to the lower layer
for processing there.
The majority of its activity centers
on the bypass routine, through which nearly all vnode operations
pass.
.Pp
The bypass routine accepts arbitrary vnode operations for
handling by the lower layer.
It begins by examining vnode
operation arguments and replacing any null-nodes by their
lower-layer equivalents.
It then invokes the operation on the lower layer.
Finally, it replaces the null-nodes
in the arguments and, if a vnode is returned by the operation,
stacks a null-node on top of the returned vnode.
.Pp
Although bypass handles most operations,
.Em vop_getattr ,
.Em vop_inactive ,
.Em vop_reclaim ,
and
.Em vop_print
are not bypassed.
.Em vop_getattr
must change the fsid being returned.
.Em vop_inactive
and
.Em vop_reclaim
are not bypassed so that
they can handle freeing null-layer specific data.
.Em vop_print
is not bypassed to avoid excessive debugging
information.
.\"
.\"
.Sh INSTANTIATING VNODE STACKS
Mounting associates the null layer with a lower layer,
in effect stacking two VFSes.
Vnode stacks are instead created on demand as files are accessed.
.Pp
The initial mount creates a single vnode stack for the
root of the new null layer.
All other vnode stacks are created as a result of vnode operations on
null vnode stacks.
.Pp
New vnode stacks come into existence as a result of
an operation which returns a vnode.
The bypass routine stacks a null-node above the new
vnode before returning it to the caller.
.Pp
For example, imagine mounting a null layer with
.Bd -literal -offset indent
# mount_null /usr/include /dev/layer/null
.Ed
.Pp
Changing directory to
.Pa /dev/layer/null
will assign
the root null-node (which was created when the null layer was mounted).
Now consider opening
.Pa sys .
A
.Em vop_lookup
would be
done on the root null-node.
This operation would bypass through
to the lower layer which would return a vnode representing
the UFS
.Pa sys .
Null_bypass then builds a null-node
aliasing the UFS
.Pa sys
and returns this to the caller.
Later operations on the null-node
.Pa sys
will repeat this
process when constructing other vnode stacks.
.\"
.\"
.Sh CREATING OTHER FILE SYSTEM LAYERS
One of the easiest ways to construct new file system layers is to make
a copy of the null layer, rename all files and variables, and
then begin modifying the copy.
.Xr sed 1
can be used to easily rename
all variables.
.Pp
The umap layer is an example of a layer descended from the
null layer.
.\"
.\"
.Sh INVOKING OPERATIONS ON LOWER LAYERS
There are two techniques to invoke operations on a lower layer
when the operation cannot be completely bypassed.
Each method is appropriate in different situations.
In both cases, it is the responsibility of the aliasing layer to make
the operation arguments "correct" for the lower layer
by mapping any vnode arguments to the lower layer.
.Pp
The first approach is to call the aliasing layer's bypass routine.
This method is most suitable when you wish to invoke the operation
currently being handled on the lower layer.
It has the advantage that the bypass routine already must do argument mapping.
An example of this is
.Em null_getattrs
in the null layer.
.Pp
A second approach is to directly invoke vnode operations on
the lower layer with the
.Em VOP_OPERATIONNAME
interface.
The advantage of this method is that it is easy to invoke
arbitrary operations on the lower layer.
The disadvantage is that vnodes arguments must be manually mapped.
.\"
.\"
.Sh SEE ALSO
.Xr mount 2 ,
.Xr mount 8 ,
.Xr umount 8
.Pp
UCLA Technical Report CSD-910056,
.Em "Stackable Layers: an Architecture for File System Development" .
.Sh HISTORY
The
.Nm
utility first appeared in
.Bx 4.4 .
@


1.21
log
@be -> by, ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount_null.8,v 1.20 2003/06/02 20:06:15 millert Exp $
@


1.20
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount_null.8,v 1.19 2003/02/28 11:25:34 tedu Exp $
d76 1
a76 1
new file system layers can be created very easily be starting
@


1.19
log
@typos. ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount_null.8,v 1.18 2003/02/09 07:26:45 jmc Exp $
d18 1
a18 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
@


1.18
log
@typos;
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount_null.8,v 1.17 2002/06/26 21:32:02 fgsch Exp $
d143 1
a143 1
this or other null vnode stacks.
d202 1
a202 1
It has the advantage the bypass routine already must do argument mapping.
d207 1
a207 1
A second approach is to directly invoked vnode operations on
@


1.17
log
@Missing .Xr's from Margarida Sequeira <niness@@devilness.org>.
Remove unmount(2) per millert suggestion; millert@@ ok.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount_null.8,v 1.16 2002/02/11 18:43:51 mpech Exp $
d197 1
a197 1
by mapping an vnode arguments to the lower layer.
@


1.16
log
@Initial patch.
When you give command examples in a manual page prefix them with
	$ command
or
	# command

deraadt@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount_null.8,v 1.15 2000/11/09 17:53:00 aaron Exp $
d217 3
a219 1
.Xr mount 8
@


1.15
log
@Change all option list specifications to ".Bl -tag -width Ds". Most man
pages just needed their -width parameter tweaked to "Ds", which provides
a nice width of 6 constant characters. For consistency more than anything.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount_null.8,v 1.14 2000/03/18 22:56:00 aaron Exp $
d152 1
a152 1
mount_null /usr/include /dev/layer/null
@


1.14
log
@Remove hard sentence breaks, and some other cleanup along the way.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount_null.8,v 1.13 1999/09/23 04:12:02 alex Exp $
d65 1
a65 1
.Bl -tag -width indent
@


1.13
log
@Typo fixes.
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount_null.8,v 1.12 1999/07/21 01:07:55 deraadt Exp $
d93 2
a94 2
layer will appear in the namespace (mount-point-pn).  After
the null layer is put into place, the contents
d101 2
a102 1
for processing there.  The majority of its activity centers
d107 2
a108 1
handling by the lower layer.  It begins by examining vnode
d110 3
a112 2
lower-layer equivalents.  It then invokes the operation
on the lower layer.  Finally, it replaces the null-nodes
d137 2
a138 2
in effect stacking two VFSes.  Vnode stacks are instead
created on demand as files are accessed.
d141 2
a142 2
root of the new null layer.  All other vnode stacks
are created as a result of vnode operations on
d164 2
a165 1
done on the root null-node.  This operation would bypass through
d193 3
a195 3
when the operation cannot be completely bypassed.  Each method
is appropriate in different situations.  In both cases,
it is the responsibility of the aliasing layer to make
d201 2
a202 2
currently being handled on the lower layer.  It has the advantage
the bypass routine already must do argument mapping.
d212 2
a213 2
arbitrary operations on the lower layer.  The disadvantage
is that vnodes arguments must be manually mapped.
@


1.12
log
@use .Ar on later .It Fl lines
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount_null.8,v 1.11 1999/07/09 13:35:49 aaron Exp $
d178 1
a178 1
then begin modifyng the copy.
@


1.11
log
@- remove all trailing whitespace
     * except when it is escaped with a `\' at the end of the line
- fix remaining .Nm usage as well
- this is from a patch I received from kwesterback@@home.com, who has been
  working on some scripts for fixing formatting errors in mdoc'd man pages

Ok, so there could be a cost/benefit debate with this commit, but since I have
the patch we might as well commit it...
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount_null.8,v 1.10 1999/07/04 18:59:40 aaron Exp $
d66 1
a66 1
.It Fl o
@


1.10
log
@trash some old leftover macros and replace them with -mdoc macros
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount_null.8,v 1.9 1999/06/04 02:45:18 aaron Exp $
d143 1
a143 1
an operation which returns a vnode. 
@


1.9
log
@start to remove non-escaped trailing whitespace, it can confuse troff; pjanzen@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount_null.8,v 1.8 1999/05/23 14:11:18 aaron Exp $
d214 1
a214 1
.sp
@


1.8
log
@remove argument from .Os macros so value in /usr/share/tmac/mdoc/doc-common
is used instead; kwesterback@@home.com
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount_null.8,v 1.7 1998/12/15 01:20:38 aaron Exp $
d88 1
a88 1
New null layers are created with 
d113 2
a114 2
Although bypass handles most operations, 
.Em vop_getattr , 
d143 1
a143 1
an operation which returns a vnode.  
d152 1
a152 1
Changing directory to 
d156 1
a156 1
Now consider opening 
d162 2
a163 2
to the lower layer which would return a vnode representing 
the UFS 
d166 1
a166 1
aliasing the UFS 
d169 1
a169 1
Later operations on the null-node 
d171 1
a171 1
will repeat this 
d179 1
a179 1
.Xr sed 1 
d183 1
a183 1
The umap layer is an example of a layer descended from the 
d188 1
a188 1
There are two techniques to invoke operations on a lower layer 
d199 1
a199 1
An example of this is 
@


1.7
log
@always give .Nm macros an argument in SYNOPSIS sections; krw@@tcn.net
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount_null.8,v 1.6 1998/11/28 19:56:26 aaron Exp $
d42 1
a42 1
.Os BSD 4.4
@


1.6
log
@kill redundant .Nm macro arguments; other misc fixes
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount_null.8,v 1.5 1998/09/17 04:14:55 aaron Exp $
d47 1
a47 1
.Nm
@


1.5
log
@sbin/ man page fixes
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount_null.8,v 1.4 1998/06/15 17:55:47 mickey Exp $
d47 1
a47 1
.Nm mount_null
d53 1
a53 1
.Nm mount_null
d90 1
a90 1
.Nm mount_null
d219 1
a219 1
.Nm mount_null
@


1.4
log
@use Bx macro for BSD versions
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount_null.8,v 1.3 1996/06/23 14:31:28 deraadt Exp $
d50 1
a50 1
.Ar mount-point
d56 1
a56 1
name space under another part of the global file system namespace.
d89 3
a91 3
.Xr mount_null 8 .
.Xr Mount_null 8
takes two arguments, the pathname
d102 1
a102 1
on the bypass routine, though which nearly all vnode operations
d106 1
a106 1
handling by the lower layer.  It begins by examing vnode
d120 1
a120 1
.Em Vop_getattr
d122 4
a125 2
.Em Vop_inactive
and vop_reclaim are not bypassed so that
d127 1
a127 1
.Em Vop_print
d151 1
d158 3
a160 1
A vop_lookup would be
d178 3
a180 1
then begin modifyng the copy.  Sed can be used to easily rename
@


1.3
log
@update rcsid
@
text
@d1 1
a1 1
.\"	$OpenBSD: mount_null.8,v 1.4 1996/04/10 20:57:19 thorpej Exp $
d213 2
a214 1
utility first appeared in 4.4BSD.
@


1.2
log
@sync to netbsd 960418
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
.\"	$NetBSD: mount_null.8,v 1.3 1995/07/12 07:08:27 cgd Exp $
d190 1
a190 1
the the bypass routine already must do argument mapping.
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
