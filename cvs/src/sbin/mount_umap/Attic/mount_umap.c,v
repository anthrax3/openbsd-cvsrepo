head	1.16;
access;
symbols
	OPENBSD_3_7:1.14.0.8
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.14.0.6
	OPENBSD_3_6_BASE:1.14
	OPENBSD_3_5:1.14.0.4
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.14.0.2
	OPENBSD_3_4_BASE:1.14
	OPENBSD_3_3:1.10.0.4
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.2
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.8.0.4
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.8.0.2
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_8:1.7.0.14
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.12
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.7.0.10
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.8
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.7.0.6
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.7.0.4
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.7.0.2
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.16
date	2005.05.26.01.30.48;	author pedro;	state dead;
branches;
next	1.15;

1.15
date	2005.04.08.20.09.38;	author jaredy;	state Exp;
branches;
next	1.14;

1.14
date	2003.07.03.22.41.40;	author tedu;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.11.06.22.14;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.02.20.06.16;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2003.05.12.23.41.16;	author tedu;	state Exp;
branches;
next	1.10;

1.10
date	2002.06.09.08.13.08;	author todd;	state Exp;
branches;
next	1.9;

1.9
date	2002.02.16.21.27.36;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2001.01.31.22.32.30;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	97.08.24.08.07.20;	author downsj;	state Exp;
branches;
next	1.6;

1.6
date	97.08.20.05.10.27;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.01.15.23.41.26;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	96.06.23.14.31.40;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.04.21.23.47.03;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.03.25.18.12.21;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.43.41;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.43.41;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.16
log
@bye bye
@
text
@/*	$OpenBSD: mount_umap.c,v 1.15 2005/04/08 20:09:38 jaredy Exp $	*/
/*	$NetBSD: mount_umap.c,v 1.5 1996/04/13 01:32:05 jtc Exp $	*/

/*
 * Copyright (c) 1992, 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software donated to Berkeley by
 * Jan-Simon Pendry.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef lint
char copyright[] =
"@@(#) Copyright (c) 1992, 1993, 1994\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)mount_umap.c	8.3 (Berkeley) 3/27/94";
#else
static char rcsid[] = "$OpenBSD: mount_umap.c,v 1.15 2005/04/08 20:09:38 jaredy Exp $";
#endif
#endif /* not lint */

#include <sys/param.h>
#include <sys/mount.h>
#include <sys/stat.h>

#include <miscfs/umapfs/umap.h>

#include <err.h>
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "mntopts.h"

#define ROOTUSER 0
/*
 * This define controls whether any user but the superuser can own and
 * write mapfiles.  If other users can, system security can be gravely
 * compromised.  If this is not a concern, undefine SECURITY.
 */
#define MAPSECURITY 1

/*
 * This routine provides the user interface to mounting a umap layer.
 * It takes 4 mandatory parameters.  The mandatory arguments are the place
 * where the next lower level is mounted, the place where the umap layer is to
 * be mounted, the name of the user mapfile, and the name of the group
 * mapfile.  The routine checks the ownerships and permissions on the
 * mapfiles, then opens and reads them.  Then it calls mount(), which
 * will, in turn, call the umap version of mount.
 */

const struct mntopt mopts[] = {
	MOPT_STDOPTS,
	{ NULL }
};

void	usage(void);

int
main(int argc, char *argv[])
{
	static char not[] = "; not mounted.";
	struct stat statbuf;
	struct umap_args args;
	FILE *fp, *gfp;
	long d1, d2;
	u_long umapdata[UMAPFILEENTRIES][2];
	u_long gmapdata[GMAPFILEENTRIES][2];
	int ch, count, gnentries, mntflags, unentries;
	char *gmapfile, *umapfile, *source, target[MAXPATHLEN], buf[20];

	mntflags = 0;
	umapfile = gmapfile = NULL;
	while ((ch = getopt(argc, argv, "g:o:u:")) != -1)
		switch (ch) {
		case 'g':
			gmapfile = optarg;
			break;
		case 'o':
			getmntopts(optarg, mopts, &mntflags);
			break;
		case 'u':
			umapfile = optarg;
			break;
		case '?':
		default:
			usage();
		}
	argc -= optind;
	argv += optind;

	if (argc != 2 || umapfile == NULL || gmapfile == NULL)
		usage();

	source = argv[0];
	if (realpath(argv[1], target) == NULL)
		err(1, "realpath %s", argv[1]);

	/* Read in uid mapping data. */
	if ((fp = fopen(umapfile, "r")) == NULL)
		err(1, "%s%s", umapfile, not);

#ifdef MAPSECURITY
	/*
	 * Check that group and other don't have write permissions on
	 * this umapfile, and that the umapfile belongs to root.
	 */
	if (fstat(fileno(fp), &statbuf))
		err(1, "%s%s", umapfile, not);
	if (statbuf.st_mode & S_IWGRP || statbuf.st_mode & S_IWOTH) {
		strmode(statbuf.st_mode, buf);
		err(1, "%s: improper write permissions (%s)%s",
		    umapfile, buf, not);
	}
	if (statbuf.st_uid != ROOTUSER)
		errx(1, "%s does not belong to root%s", umapfile, not);
#endif /* MAPSECURITY */

	if ((fscanf(fp, "%d\n", &unentries)) != 1)
		errx(1, "%s: nentries not found%s", umapfile, not);
	if (unentries > UMAPFILEENTRIES)
		errx(1,
		    "maximum number of entries is %d%s", UMAPFILEENTRIES, not);
#if 0
	(void)printf("reading %d entries\n", unentries);
#endif
	for (count = 0; count < unentries; ++count) {
		if ((fscanf(fp, "%lu %lu\n", &d1, &d2)) != 2) {
			if (ferror(fp))
				err(1, "%s%s", umapfile, not);
			if (feof(fp))
				errx(1, "%s: unexpected end-of-file%s",
				    umapfile, not);
			errx(1, "%s: illegal format (line %d)%s",
			    umapfile, count + 2, not);
		}
		umapdata[count][0] = d1;
		umapdata[count][1] = d2;
#if 0
		/* Fix a security hole. */
		if (umapdata[count][1] == 0)
			errx(1, "mapping id 0 not permitted (line %d)%s",
			    count + 2, not);
#endif
	}

	/* Read in gid mapping data. */
	if ((gfp = fopen(gmapfile, "r")) == NULL)
		err(1, "%s%s", gmapfile, not);

#ifdef MAPSECURITY
	/*
	 * Check that group and other don't have write permissions on
	 * this group mapfile, and that the file belongs to root.
	 */
	if (fstat(fileno(gfp), &statbuf))
		err(1, "%s%s", gmapfile, not);
	if (statbuf.st_mode & S_IWGRP || statbuf.st_mode & S_IWOTH) {
		strmode(statbuf.st_mode, buf);
		err(1, "%s: improper write permissions (%s)%s",
		    gmapfile, buf, not);
	}
	if (statbuf.st_uid != ROOTUSER)
		errx(1, "%s does not belong to root%s", gmapfile, not);
#endif /* MAPSECURITY */

	if ((fscanf(gfp, "%d\n", &gnentries)) != 1)
		errx(1, "%s: nentries not found%s", gmapfile, not);
	if (gnentries > GMAPFILEENTRIES)
		errx(1,
		    "maximum number of entries is %d%s", GMAPFILEENTRIES, not);
#if 0
	(void)printf("reading %d group entries\n", gnentries);
#endif

	for (count = 0; count < gnentries; ++count) {
		if ((fscanf(gfp, "%lu %lu\n", &d1, &d2)) != 2) {
			if (ferror(gfp))
				err(1, "%s%s", gmapfile, not);
			if (feof(gfp))
				errx(1, "%s: unexpected end-of-file%s",
				    gmapfile, not);
			errx(1, "%s: illegal format (line %d)%s",
			    gmapfile, count + 2, not);
		}
		gmapdata[count][0] = d1;
		gmapdata[count][1] = d2;
	}


	/* Setup mount call args. */
	args.la.target = source;
	args.unentries = unentries;
	args.umapdata  = umapdata;
	args.gnentries = gnentries;
	args.gmapdata  = gmapdata;

	if (mount(MOUNT_UMAP, target, mntflags, &args)) {
		if (errno == EOPNOTSUPP)
			errx(1, "%s: Filesystem not supported by kernel",
			    argv[1]);
		else
			err(1, "%s", argv[1]);
	}
	exit(0);
}

void
usage(void)
{
	(void)fprintf(stderr,
"usage: mount_umap [-o options] -u usermap -g groupmap target_fs mount_point\n");
	exit(1);
}
@


1.15
log
@Sync with recent realpath(3) changes:  on failure, don't use the second
argument "resolved", since it is undefined.

ok and help millert, otto
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_umap.c,v 1.14 2003/07/03 22:41:40 tedu Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: mount_umap.c,v 1.14 2003/07/03 22:41:40 tedu Exp $";
@


1.14
log
@use realpath() in helpers instead of doing it ourselves every time.
also fixes pr1662.  from otto moerbeek
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_umap.c,v 1.13 2003/06/11 06:22:14 deraadt Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: mount_umap.c,v 1.13 2003/06/11 06:22:14 deraadt Exp $";
d128 1
a128 1
		err(1, "realpath %s", target);
@


1.13
log
@ansification
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_umap.c,v 1.12 2003/06/02 20:06:16 millert Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: mount_umap.c,v 1.12 2003/06/02 20:06:16 millert Exp $";
d101 1
a101 1
	char *gmapfile, *umapfile, *source, *target, buf[20];
d127 2
a128 1
	target = argv[1];
d229 1
a229 1
	if (mount(MOUNT_UMAP, argv[1], mntflags, &args)) {
@


1.12
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_umap.c,v 1.11 2003/05/12 23:41:16 tedu Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: mount_umap.c,v 1.11 2003/05/12 23:41:16 tedu Exp $";
d91 1
a91 3
main(argc, argv)
	int argc;
	char *argv[];
d239 1
a239 1
usage()
@


1.11
log
@update for mount args changes
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_umap.c,v 1.10 2002/06/09 08:13:08 todd Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d46 1
a46 1
static char rcsid[] = "$OpenBSD: mount_umap.c,v 1.10 2002/06/09 08:13:08 todd Exp $";
@


1.10
log
@rm trailing whitespace
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_umap.c,v 1.9 2002/02/16 21:27:36 millert Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: mount_umap.c,v 1.9 2002/02/16 21:27:36 millert Exp $";
d104 2
a105 2
	id_t umapdata[UMAPFILEENTRIES][2];
	id_t gmapdata[GMAPFILEENTRIES][2];
d228 1
a228 1
	args.target = source;
@


1.9
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_umap.c,v 1.8 2001/01/31 22:32:30 deraadt Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: mount_umap.c,v 1.8 2001/01/31 22:32:30 deraadt Exp $";
d79 1
a79 1
 * It takes 4 mandatory parameters.  The mandatory arguments are the place 
d84 1
a84 1
 * will, in turn, call the umap version of mount. 
d142 1
a142 1
	 * this umapfile, and that the umapfile belongs to root. 
d190 1
a190 1
	 * this group mapfile, and that the file belongs to root. 
@


1.8
log
@errx() misuse; tomo@@ns1.infinitedata.net
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_umap.c,v 1.7 1997/08/24 08:07:20 downsj Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: mount_umap.c,v 1.7 1997/08/24 08:07:20 downsj Exp $";
d92 1
a92 1
void	usage __P((void));
@


1.7
log
@More err()/warn()/etc. argument fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_umap.c,v 1.6 1997/08/20 05:10:27 millert Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: mount_umap.c,v 1.6 1997/08/20 05:10:27 millert Exp $";
d204 1
a204 1
		errx(1, "nentries not found%s", gmapfile, not);
@


1.6
log
@Print "Filesystem not supported by kernel" not "Operation not supported by
device" (EOPNOTSUPP) so the real problem is obvious.  Idea from Peter Seebach
<seebs@@taniemarie.solon.com>.
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_umap.c,v 1.5 1997/01/15 23:41:26 millert Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: mount_umap.c,v 1.5 1997/01/15 23:41:26 millert Exp $";
d239 1
a239 1
			err(1, argv[1]);
@


1.5
log
@getopt(3) returns -1 when out of args, not EOF, whee!
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_umap.c,v 1.4 1996/06/23 14:31:40 deraadt Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: mount_umap.c,v 1.4 1996/06/23 14:31:40 deraadt Exp $";
d61 1
d234 7
a240 2
	if (mount(MOUNT_UMAP, argv[1], mntflags, &args))
		err(1, NULL);
@


1.4
log
@update rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_umap.c,v 1.5 1996/04/13 01:32:05 jtc Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: mount_umap.c,v 1.5 1996/04/13 01:32:05 jtc Exp $";
d110 1
a110 1
	while ((ch = getopt(argc, argv, "g:o:u:")) != EOF)
@


1.3
log
@sync to netbsd 960418
@
text
@d1 1
d50 1
a50 1
static char rcsid[] = "$NetBSD: mount_umap.c,v 1.5 1996/04/13 01:32:05 jtc Exp $";
@


1.2
log
@Changed according to the kernel.
@
text
@d1 1
a1 1
/*	$NetBSD: mount_umap.c,v 1.4 1995/04/24 13:23:11 cgd Exp $	*/
d49 1
a49 1
static char rcsid[] = "$NetBSD: mount_umap.c,v 1.4 1995/04/24 13:23:11 cgd Exp $";
d85 1
a85 1
struct mntopt mopts[] = {
@


1.1
log
@Initial revision
@
text
@d102 4
a105 4
	u_long mapdata[MAPFILEENTRIES][2];
	u_long gmapdata[GMAPFILEENTRIES][2];
	int ch, count, gnentries, mntflags, nentries;
	char *gmapfile, *mapfile, *source, *target, buf[20];
d108 1
a108 1
	mapfile = gmapfile = NULL;
d118 1
a118 1
			mapfile = optarg;
d127 1
a127 1
	if (argc != 2 || mapfile == NULL || gmapfile == NULL)
d134 2
a135 2
	if ((fp = fopen(mapfile, "r")) == NULL)
		err(1, "%s%s", mapfile, not);
d140 1
a140 1
	 * this mapfile, and that the mapfile belongs to root. 
d143 1
a143 1
		err(1, "%s%s", mapfile, not);
d147 1
a147 1
		    mapfile, buf, not);
d150 1
a150 1
		errx(1, "%s does not belong to root%s", mapfile, not);
d153 3
a155 3
	if ((fscanf(fp, "%d\n", &nentries)) != 1)
		errx(1, "%s: nentries not found%s", mapfile, not);
	if (nentries > MAPFILEENTRIES)
d157 1
a157 1
		    "maximum number of entries is %d%s", MAPFILEENTRIES, not);
d159 1
a159 1
	(void)printf("reading %d entries\n", nentries);
d161 1
a161 1
	for (count = 0; count < nentries; ++count) {
d164 1
a164 1
				err(1, "%s%s", mapfile, not);
d167 1
a167 1
				    mapfile, not);
d169 1
a169 1
			    mapfile, count + 2, not);
d171 2
a172 2
		mapdata[count][0] = d1;
		mapdata[count][1] = d2;
d175 1
a175 1
		if (mapdata[count][1] == 0)
d203 1
a203 1
	if (gnentries > MAPFILEENTRIES)
d227 2
a228 2
	args.nentries = nentries;
	args.mapdata = mapdata;
d230 1
a230 1
	args.gmapdata = gmapdata;
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
