head	1.16;
access;
symbols
	OPENBSD_6_0:1.16.0.4
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.2
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.15.0.6
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.14.0.16
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.14
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.10
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.8
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.6
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.4
	OPENBSD_5_0:1.14.0.2
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.12.0.16
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.14
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.10
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.12
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.8
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.6
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.4
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.2
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.10.0.2
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.9.0.6
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.4
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.2
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.8.0.8
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8;
locks; strict;
comment	@ * @;


1.16
date	2015.12.30.21.38.28;	author millert;	state Exp;
branches;
next	1.15;
commitid	9dIsraPKgn7A5Mv9;

1.15
date	2015.01.16.06.39.59;	author deraadt;	state Exp;
branches;
next	1.14;
commitid	Uu5nFG3wCl0LACBb;

1.14
date	2011.06.27.23.40.07;	author tedu;	state Exp;
branches;
next	1.13;

1.13
date	2011.06.27.19.47.22;	author tedu;	state Exp;
branches;
next	1.12;

1.12
date	2007.04.14.17.07.28;	author grunk;	state Exp;
branches;
next	1.11;

1.11
date	2007.04.09.20.22.41;	author pedro;	state Exp;
branches;
next	1.10;

1.10
date	2006.12.15.12.53.59;	author jmc;	state Exp;
branches;
next	1.9;

1.9
date	2005.04.08.20.09.37;	author jaredy;	state Exp;
branches;
next	1.8;

1.8
date	2003.07.03.22.41.40;	author tedu;	state Exp;
branches;
next	1.7;

1.7
date	2003.07.02.22.38.54;	author avsm;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.11.06.22.14;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.10.16.41.29;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2003.05.24.21.48.06;	author tedu;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.20.03.38.04;	author tedu;	state Exp;
branches;
next	1.2;

1.2
date	2003.05.20.03.19.57;	author tedu;	state Exp;
branches;
next	1.1;

1.1
date	2003.05.20.03.18.23;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Remove use of sysexits.h.  OK guenther@@
@
text
@/* $OpenBSD: mount_ntfs.c,v 1.15 2015/01/16 06:39:59 deraadt Exp $ */
/* $NetBSD: mount_ntfs.c,v 1.9 2003/05/03 15:37:08 christos Exp $ */

/*
 * Copyright (c) 1994 Christopher G. Demetriou
 * Copyright (c) 1999 Semen Ustimenko
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Christopher G. Demetriou.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Id: mount_ntfs.c,v 1.1.1.1 1999/02/03 03:51:19 semenu Exp
 */

#include <sys/types.h>
#include <sys/mount.h>
#include <sys/stat.h>

#include <err.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <limits.h>

#include <mntopts.h>

static const struct mntopt mopts[] = {
	MOPT_STDOPTS,
	{ NULL }
};

static __dead void usage(void);
static mode_t a_mask(char *);

int
main(int argc, char *argv[])
{
	struct ntfs_args args;
	struct stat sb;
	int c, mntflags, set_gid, set_uid, set_mask;
	char *dev, dir[PATH_MAX];

	mntflags = set_gid = set_uid = set_mask = 0;
	memset(&args, 0, sizeof(args));

	while ((c = getopt(argc, argv, "aiu:g:m:o:")) !=  -1) {
		switch (c) {
		case 'u':
			args.uid = strtoul(optarg, NULL, 10);
			set_uid = 1;
			break;
		case 'g':
			args.gid = strtoul(optarg, NULL, 10);
			set_gid = 1;
			break;
		case 'm':
			args.mode =  a_mask(optarg);
			set_mask = 1;
			break;
		case 'i':
			args.flag |= NTFS_MFLAG_CASEINS;
			break;
		case 'a':
			args.flag |= NTFS_MFLAG_ALLNAMES;
			break;
		case 'o':
			getmntopts(optarg, mopts, &mntflags);
			break;
		default:
			usage();
			break;
		}
	}

	if (optind + 2 != argc)
		usage();

	dev = argv[optind];
	if (realpath(argv[optind + 1], dir) == NULL)
		err(1, "realpath %s", argv[optind + 1]);

	args.fspec = dev;
	args.export_info.ex_root = 65534;	/* unchecked anyway on NTFS */

	mntflags |= MNT_RDONLY;
	if (mntflags & MNT_RDONLY)
		args.export_info.ex_flags = MNT_EXRDONLY;
	else
		args.export_info.ex_flags = 0;
	if (!set_gid || !set_uid || !set_mask) {
		if (stat(dir, &sb) == -1)
			err(1, "stat %s", dir);

		if (!set_uid)
			args.uid = sb.st_uid;
		if (!set_gid)
			args.gid = sb.st_gid;
		if (!set_mask)
			args.mode = sb.st_mode & (S_IRWXU | S_IRWXG | S_IRWXO);
	}
	if (mount(MOUNT_NTFS, dir, mntflags, &args) < 0)
		err(1, "%s on %s", dev, dir);

	exit(0);
}

static mode_t
a_mask(char *s)
{
	int done, rv;
	char *ep;

	done = 0;
	if (*s >= '0' && *s <= '7') {
		done = 1;
		rv = strtol(optarg, &ep, 8);
	}
	if (!done || rv < 0 || *ep)
		errx(1, "invalid file mode: %s", s);
	return (rv);
}

static void
usage(void)
{
	fprintf(stderr,
	    "usage: mount_ntfs [-ai] [-g gid] [-m mask] [-o options] [-u uid]"
	    " special node\n");
	exit(1);
}
@


1.15
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/* $OpenBSD: mount_ntfs.c,v 1.14 2011/06/27 23:40:07 tedu Exp $ */
a44 1
#include <sysexits.h>
d115 1
a115 1
			err(EX_OSERR, "stat %s", dir);
d125 1
a125 1
		err(EX_OSERR, "%s on %s", dev, dir);
d152 1
a152 1
	exit(EX_USAGE);
@


1.14
log
@cleanup this file a little, review by krw
@
text
@d1 1
a1 1
/* $OpenBSD: mount_ntfs.c,v 1.13 2011/06/27 19:47:22 tedu Exp $ */
d37 1
a37 1
#include <sys/param.h>
d47 1
d65 1
a65 1
	char *dev, dir[MAXPATHLEN];
@


1.13
log
@cleanup the ntfs man page, and enforce readonly operation.
ok deraadt jmc krw
@
text
@d1 1
a1 1
/* $OpenBSD: mount_ntfs.c,v 1.12 2007/04/14 17:07:28 grunk Exp $ */
a36 1
#include <sys/cdefs.h>
a37 1
#define NTFS
d40 1
a40 1
#include <ctype.h>
a41 2
#include <grp.h>
#include <pwd.h>
a46 1
#include <util.h>
a51 3
#ifdef MNT_GETARGS
	MOPT_GETARGS,
#endif
d55 2
a56 7
#ifndef __dead2
#define __dead2 __attribute__((__noreturn__))
#endif

static void	usage(void) __dead2;
mode_t a_mask(char *);
int main(int, char **);
d67 1
a67 1
	(void)memset(&args, '\0', sizeof(args));
a91 1
		case '?':
a97 2
	mntflags |= MNT_RDONLY;

d106 3
a108 1
	args.export_info.ex_root = 65534;	/* unchecked anyway on DOS fs */
d127 1
a127 9
#ifdef MNT_GETARGS
	if (mntflags & MNT_GETARGS) {
		char buf[1024];
		(void)snprintb(buf, sizeof(buf), NTFS_MFLAG_BITS, args.flag);
		printf("uid=%d, gid=%d, mode=0%o, flags=%s\n", args.uid,
		    args.gid, args.mode, buf);
	}
#endif
	exit (0);
d130 1
a130 1
mode_t
@


1.12
log
@documentation of -o option was missing both in man page and usage()

ok jmc@@
@
text
@d1 1
a1 1
/* $OpenBSD: mount_ntfs.c,v 1.11 2007/04/09 20:22:41 pedro Exp $ */
d111 2
@


1.11
log
@Correctly handle option '-m', okay mickey@@ grunk@@
@
text
@d1 1
a1 1
/* $OpenBSD: mount_ntfs.c,v 1.10 2006/12/15 12:53:59 jmc Exp $ */
d170 2
a171 1
	    "usage: mount_ntfs [-ai] [-g gid] [-m mask] [-u uid] special node\n");
@


1.10
log
@sort options; sync usage;
@
text
@d1 1
a1 1
/* $OpenBSD: mount_ntfs.c,v 1.9 2005/04/08 20:09:37 jaredy Exp $ */
d68 1
d93 1
a93 1
			args.mode = atoi(optarg);
d148 16
@


1.9
log
@Sync with recent realpath(3) changes:  on failure, don't use the second
argument "resolved", since it is undefined.

ok and help millert, otto
@
text
@d1 1
a1 1
/* $OpenBSD: mount_ntfs.c,v 1.8 2003/07/03 22:41:40 tedu Exp $ */
d153 1
a153 1
	    "usage: mount_ntfs [-a] [-i] [-u user] [-g group] [-m mask] bdev dir\n");
@


1.8
log
@use realpath() in helpers instead of doing it ourselves every time.
also fixes pr1662.  from otto moerbeek
@
text
@d1 1
a1 1
/* $OpenBSD: mount_ntfs.c,v 1.7 2003/07/02 22:38:54 avsm Exp $ */
d116 1
a116 1
		err(1, "realpath %s", dir);
@


1.7
log
@convert strncat -> strlcat
millert@@ ok
@
text
@d1 1
a1 1
/* $OpenBSD: mount_ntfs.c,v 1.6 2003/06/11 06:22:14 deraadt Exp $ */
d76 1
a76 1
	char *dev, *dir, ndir[MAXPATHLEN];
d115 2
a116 10
	dir = argv[optind + 1];
	if (dir[0] != '/') {
		warnx("\"%s\" is a relative path", dir);
		if (getcwd(ndir, sizeof(ndir)) == NULL)
			err(EX_OSERR, "getcwd");
		strlcat(ndir, "/", sizeof(ndir));
		strlcat(ndir, dir, sizeof(ndir));
		dir = ndir;
		warnx("using \"%s\" instead", dir);
	}
@


1.6
log
@ansification
@
text
@d1 1
a1 1
/* $OpenBSD: mount_ntfs.c,v 1.5 2003/06/10 16:41:29 deraadt Exp $ */
d120 2
a121 2
		strncat(ndir, "/", sizeof(ndir) - strlen(ndir) - 1);
		strncat(ndir, dir, sizeof(ndir) - strlen(ndir) - 1);
@


1.5
log
@boring cleanups
@
text
@d1 1
a1 1
/* $OpenBSD: mount_ntfs.c,v 1.4 2003/05/24 21:48:06 tedu Exp $ */
a68 1
int mount_ntfs(int argc, char **argv);
a71 6
{
	return mount_ntfs(argc, argv);
}

int
mount_ntfs(int argc, char *argv[])
@


1.4
log
@rename export to export_info for c++ safety.  report by naddy@@
@
text
@d1 1
a1 1
/* $OpenBSD: mount_ntfs.c,v 1.3 2003/05/20 03:38:04 tedu Exp $ */
d34 1
a34 1
 * Id: mount_ntfs.c,v 1.1.1.1 1999/02/03 03:51:19 semenu Exp 
a70 1
#ifndef MOUNT_NOMAIN
d72 1
a72 3
main(argc, argv)
	int argc;
	char **argv;
a75 1
#endif
d78 1
a78 3
mount_ntfs(argc, argv)
	int argc;
	char **argv;
d83 1
a83 8
	char *dev, *dir, ndir[MAXPATHLEN+1];
#ifdef __FreeBSD__
#if __FreeBSD_version >= 300000
	struct vfsconf vfc;
#else
	struct vfsconf *vfc;
#endif
#endif
a149 31
#ifdef __FreeBSD__
#if __FreeBSD_version >= 300000
	c = getvfsbyname("ntfs", &vfc);
	if (c && vfsisloadable("ntfs")) {
		if (vfsload("ntfs"))
#else
	vfc = getvfsbyname("ntfs");
	if (!vfc && vfsisloadable("ntfs")) {
		if (vfsload("ntfs"))
#endif
			err(EX_OSERR, "vfsload(ntfs)");
		endvfsent();	/* clear cache */
#if __FreeBSD_version >= 300000
		c = getvfsbyname("ntfs", &vfc);
#else
		vfc = getvfsbyname("ntfs");
#endif
	}
#if __FreeBSD_version >= 300000
	if (c)
#else
	if (!vfc)
#endif
		errx(EX_OSERR, "ntfs filesystem is not available");

#if __FreeBSD_version >= 300000
	if (mount(vfc.vfc_name, dir, mntflags, &args) < 0)
#else
	if (mount(vfc->vfc_index, dir, mntflags, &args) < 0)
#endif
#else
a150 1
#endif
d165 1
a165 1
usage()
d167 2
a168 1
	fprintf(stderr, "usage: mount_ntfs [-a] [-i] [-u user] [-g group] [-m mask] bdev dir\n");
@


1.3
log
@un __P
@
text
@d1 1
a1 1
/* $OpenBSD: mount_ntfs.c,v 1.2 2003/05/20 03:19:57 tedu Exp $ */
d147 1
a147 1
	args.export.ex_root = 65534;	/* unchecked anyway on DOS fs */
d149 1
a149 1
		args.export.ex_flags = MNT_EXRDONLY;
d151 1
a151 1
		args.export.ex_flags = 0;
@


1.2
log
@$OpenBSD$ tags
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d67 3
a69 3
static void	usage __P((void)) __dead2;
int main __P((int, char **));
int mount_ntfs __P((int argc, char **argv));
@


1.1
log
@mount_ntfs, from NetBSD via Julien Bordet
@
text
@d1 1
a1 1
/* $Id */
@

