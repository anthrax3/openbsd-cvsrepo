head	1.11;
access;
symbols
	OPENBSD_3_2:1.10.0.2
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.8.0.6
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.8.0.4
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.8.0.2
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_8:1.2.0.8
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.6
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.11
date	2003.03.13.00.33.47;	author deraadt;	state dead;
branches;
next	1.10;

1.10
date	2002.06.10.19.58.20;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2002.06.09.08.13.09;	author todd;	state Exp;
branches;
next	1.8;

1.8
date	2001.01.28.22.45.17;	author niklas;	state Exp;
branches;
next	1.7;

1.7
date	2000.12.15.02.50.39;	author provos;	state Exp;
branches;
next	1.6;

1.6
date	2000.12.15.01.06.51;	author provos;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.14.23.28.59;	author provos;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.11.21.21.18;	author provos;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.11.20.32.15;	author provos;	state Exp;
branches;
next	1.2;

1.2
date	99.03.27.21.18.02;	author provos;	state Exp;
branches;
next	1.1;

1.1
date	98.11.14.23.37.29;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.11
log
@thought we had already deleted this
@
text
@/*	$OpenBSD: spi.c,v 1.10 2002/06/10 19:58:20 espie Exp $	*/

/*
 * Copyright 1997-2000 Niels Provos <provos@@citi.umich.edu>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Niels Provos.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * spi.c:
 * SPI handling functions
 */

#ifndef lint
static char rcsid[] = "$OpenBSD: spi.c,v 1.10 2002/06/10 19:58:20 espie Exp $";
#endif

#define _SPI_C_

#include <sys/types.h>
#include <sys/queue.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include "config.h"
#include "photuris.h"
#include "state.h"
#include "attributes.h"
#include "buffer.h"
#include "spi.h"
#include "secrets.h"
#include "schedule.h"
#include "log.h"
#ifdef IPSEC
#include "kernel.h"
#endif


TAILQ_HEAD(spilist, spiob) spihead;

void
spi_init(void)
{
	TAILQ_INIT(&spihead);
}

time_t
getspilifetime(struct stateob *st)
{
     /* XXX - destination depend lifetimes */
     return (st->spi_lifetime);
}

int
make_spi(struct stateob *st, char *local_address,
	 u_int8_t *SPI, time_t *lifetime,
	 u_int8_t **attributes, u_int16_t *attribsize)
{
     u_int32_t tmp = 0;
     int i, flags = 0;

     if(*attributes == NULL) {           /* We are in need of attributes */
	  if (select_attrib(st, attributes, attribsize) == -1) {
	       log_print("select_attrib() in make_spi()");
	       return (-1);
	  }
     }
	
#ifdef IPSEC
     /* Let the kernel reserve a SPI for us */
     for (i=0; i<*attribsize; i += (*attributes)[i+1]+2)
	  if ((*attributes)[i] == AT_ESP_ATTRIB)
	       flags |= IPSEC_OPT_ENC;
	  else if ((*attributes)[i] == AT_AH_ATTRIB)
	       flags |= IPSEC_OPT_AUTH;

     tmp = kernel_reserve_spi(local_address, st->address, flags);
#else
     /* Just grab a random number, this should be uniq */
     tmp = arc4random();
#endif
     for (i = SPI_SIZE - 1; i >= 0; i--) {
	  SPI[i] = tmp & 0xFF;
	  tmp = tmp >> 8;
     }
	
     *lifetime = getspilifetime(st) + (arc4random() & 0x1F);

     return (0);
}


int
spi_insert(struct spiob *ob)
{
	TAILQ_INSERT_TAIL(&spihead, ob, next);

	return (1);
}

int
spi_unlink(struct spiob *ob)
{
	LOG_DBG((LOG_SPI, 45, "%s: unlinking %s spi %x", __func__,
		 ob->flags & SPI_OWNER ? "Owner" : "User",
		 ntohl(*(u_int32_t *)ob->SPI)));

	TAILQ_REMOVE(&spihead, ob, next);
	free(ob);
	
	return (1);
}

struct spiob *
spi_new(char *address, u_int8_t *spi)
{
     struct spiob *p;

     if (spi_find(address, spi) != NULL)
	  return (NULL);
     if ((p = calloc(1, sizeof(struct spiob))) == NULL)
	  return (NULL);

     if ((p->address = strdup(address)) == NULL) {
	  free(p);
	  return (NULL);
     }
     bcopy(spi, p->SPI, SPI_SIZE);

     return (p);
}

int
spi_value_reset(struct spiob *ob)
{
	if (ob->address != NULL) {
		free(ob->address);
		ob->address = NULL;
	}
	if (ob->local_address != NULL) {
		free(ob->local_address);
		ob->local_address = NULL;
	}
	if (ob->attributes != NULL) {
		free(ob->attributes);
		ob->attributes = NULL;
	}
	if (ob->sessionkey != NULL) {
		memset(ob->sessionkey, 0, ob->sessionkeysize);
		free(ob->sessionkey);
		ob->sessionkey = NULL;
	}

	return (1);
}


struct spiob *
spi_find_attrib(char *address, u_int8_t *attrib, u_int16_t attribsize)
{
     struct spiob *tmp;
     u_int16_t i;

     for (tmp = TAILQ_FIRST(&spihead); tmp; tmp = TAILQ_NEXT(tmp, next)) {
          if (!strcmp(address, tmp->address)) {
	       for (i = 0; i < attribsize; i += attrib[i + 1] + 2) {
		    if (attrib[i] == AT_AH_ATTRIB ||
			attrib[i] == AT_ESP_ATTRIB)
			    continue;
		    if (!isinattrib(tmp->attributes, tmp->attribsize, attrib[i]))
			 break;
	       }
	       if (i == attribsize)
		    return (tmp);
	  }
     }

     return (NULL);
}

/*
 * find the spi ob with matching address
 * Alas this is tweaked, for SPI_OWNER compare with local_address
 * and for user compare with address.
 */

struct spiob *
spi_find(char *address, u_int8_t *spi)
{
	struct spiob *tmp;

	for (tmp = TAILQ_FIRST(&spihead); tmp; tmp = TAILQ_NEXT(tmp, next)) {
		if (bcmp(spi, tmp->SPI, SPI_SIZE))
			continue;

		if (address == NULL)
			break;

		if (tmp->flags & SPI_OWNER ?
		    !strcmp(address, tmp->local_address) :
		    !strcmp(address, tmp->address))
			break;
	}

	return (tmp);
}

void
spi_expire(void)
{
	struct spiob *tmp, *next;
	time_t tm;

	tm = time(NULL);
	for (tmp = TAILQ_FIRST(&spihead); tmp; tmp = next) {
		next = TAILQ_NEXT(tmp, next);

		if (tmp->lifetime == -1 || tmp->lifetime > tm)
			continue;

		LOG_DBG((LOG_SPI, 30, 
			 "%s: expiring %s spi %x to %s", __func__,
			 tmp->flags & SPI_OWNER ? "Owner" : "User",
			 ntohl(*(u_int32_t *)tmp->SPI), tmp->address));

#ifdef IPSEC
		kernel_unlink_spi(tmp);
#endif
		spi_value_reset(tmp);
		spi_unlink(tmp);
	}
}

void
spi_update_insert(struct spiob *spi)
{
	time_t tm = time(NULL);
	int seconds;

	seconds = spi->lifetime - tm;
	if (seconds < 0)
		seconds = 0;
	seconds = seconds * 9 / 10;

	schedule_insert(UPDATE, seconds, spi->SPI, SPI_SIZE);
}

void
spi_update(int sock, u_int8_t *spinr)
{
	struct stateob *st;
	struct spiob *spi, *nspi;
	struct sockaddr_in sin;
	
	/* We are to create a new SPI */
	if ((spi = spi_find(NULL, spinr)) == NULL) {
		log_print("spi_find() in schedule_process()");
		return;
	}

	if (!(spi->flags & SPI_OWNER))
		return;

	if (spi->flags & SPI_UPDATED) {
		LOG_DBG((LOG_SPI, 55, "%s: SPI %x already updated", __func__,
			 ntohl(*(u_int32_t *)spinr)));
		return;
	}

	LOG_DBG((LOG_SPI, 45, "%s: updating SPI %x", __func__,
		 ntohl(*(u_int32_t *)spinr)));


	if ((st = state_find_cookies(spi->address, spi->icookie, NULL)) == NULL) {
		/*
		 * This happens always when an exchange expires but
		 * updates are still scheduled for it.
		 */
		LOG_DBG((LOG_SPI, 65, "%s: state_find_cookies()", __func__));
		return;
	}

	if (st->oSPIattrib != NULL)
		free(st->oSPIattrib);
	if ((st->oSPIattrib = calloc(spi->attribsize, sizeof(u_int8_t))) == NULL) {
		log_error("calloc() in schedule_process()");
		return;
	}
	st->oSPIattribsize = spi->attribsize;
	bcopy(spi->attributes, st->oSPIattrib, st->oSPIattribsize);

	/* We can keep our old attributes, this is only an update */
	if (make_spi(st, spi->local_address, st->oSPI, &(st->olifetime),
		     &(st->oSPIattrib), &(st->oSPIattribsize)) == -1) {
		log_print("%s: make_spi()", __func__);
		return;
	}

	packet_size = PACKET_BUFFER_SIZE;
	if (photuris_spi_update(st, packet_buffer, &packet_size) == -1) {
		log_print("%s: photuris_spi_update()", __func__);
		return;
	}

	/* Send the packet */
	sin.sin_port = htons(st->port);
	sin.sin_family = AF_INET;
	sin.sin_addr.s_addr = inet_addr(st->address);
		
	if (sendto(sock, packet_buffer, packet_size, 0,
		   (struct sockaddr *) &sin, sizeof(sin)) != packet_size) {
		log_error("sendto() in schedule_process()");
		return;
	}
	
#ifdef DEBUG
	printf("Sending SPI UPDATE to %s.\n", st->address);
#endif
	/* Insert Owner SPI */
	if ((nspi = spi_new(st->address, st->oSPI)) == NULL) {
		log_error("spi_new() in handle_spi_needed()");
		return;
	}
	if ((nspi->local_address = strdup(spi->local_address)) == NULL) {
		log_error("strdup() in handle_spi_needed()");
		spi_value_reset(nspi);
		return;
	}
	bcopy(st->icookie, nspi->icookie, COOKIE_SIZE);
	nspi->flags |= SPI_OWNER;
	nspi->attribsize = st->oSPIattribsize;
	nspi->attributes = calloc(nspi->attribsize, sizeof(u_int8_t));
	if (nspi->attributes == NULL) {
		log_error("calloc() in handle_spi_needed()");
		spi_value_reset(nspi);
		return;
	}
	bcopy(st->oSPIattrib, nspi->attributes, nspi->attribsize);
	nspi->lifetime = time(NULL) + st->olifetime;

	make_session_keys(st, nspi);

	spi_insert(nspi);
	spi_update_insert(nspi);

#ifdef IPSEC
	kernel_insert_spi(st, nspi);
#endif

	/* Our old SPI has been updated, dont update it again */
	spi->flags |= SPI_UPDATED;
}
@


1.10
log
@kill __FUNCTION__
add __attribute__((format...)
Fix one bad call.

okay provos@@
@
text
@d1 1
a1 1
/*	$OpenBSD: spi.c,v 1.9 2002/06/09 08:13:09 todd Exp $	*/
d38 1
a38 1
static char rcsid[] = "$OpenBSD: spi.c,v 1.9 2002/06/09 08:13:09 todd Exp $";
@


1.9
log
@rm trailing whitespace
@
text
@d1 1
a1 1
/*	$OpenBSD: spi.c,v 1.8 2001/01/28 22:45:17 niklas Exp $	*/
d38 1
a38 1
static char rcsid[] = "$OpenBSD: spi.c,v 1.8 2001/01/28 22:45:17 niklas Exp $";
d131 1
a131 1
	LOG_DBG((LOG_SPI, 45, __FUNCTION__": unlinking %s spi %x",
d248 2
a249 2
		LOG_DBG((LOG_SPI, 30, __FUNCTION__
			 ": expiring %s spi %x to %s",
d292 1
a292 1
		LOG_DBG((LOG_SPI, 55, __FUNCTION__": SPI %x already updated",
d297 1
a297 1
	LOG_DBG((LOG_SPI, 45, __FUNCTION__": updating SPI %x",
d306 1
a306 1
		LOG_DBG((LOG_SPI, 65, __FUNCTION__": state_find_cookies()"));
d322 1
a322 1
		log_print(__FUNCTION__": make_spi()");
d328 1
a328 1
		log_print(__FUNCTION__": photuris_spi_update()");
@


1.8
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d38 1
a38 1
static char rcsid[] = "$OpenBSD: spi.c,v 1.7 2000/12/15 02:50:39 provos Exp $";
d49 3
a51 3
#include <sys/socket.h> 
#include <netinet/in.h> 
#include <arpa/inet.h> 
d103 1
a103 1
     
d113 1
a113 1
	  
d156 1
a156 1
     
d162 1
a162 1
{ 
d185 4
a188 4
struct spiob * 
spi_find_attrib(char *address, u_int8_t *attrib, u_int16_t attribsize) 
{ 
     struct spiob *tmp; 
d191 1
a191 1
     for (tmp = TAILQ_FIRST(&spihead); tmp; tmp = TAILQ_NEXT(tmp, next)) { 
d194 1
a194 1
		    if (attrib[i] == AT_AH_ATTRIB || 
d203 1
a203 1
     } 
d205 2
a206 2
     return (NULL); 
} 
d208 1
a208 1
/* 
d302 1
a302 1
		/* 
d326 1
a326 1
	packet_size = PACKET_BUFFER_SIZE; 
d333 2
a334 2
	sin.sin_port = htons(st->port); 
	sin.sin_family = AF_INET; 
d336 1
a336 1
		    
d342 1
a342 1
	       
@


1.7
log
@update email address in copyright.
@
text
@d1 2
d38 1
a38 1
static char rcsid[] = "$Id: spi.c,v 1.6 2000/12/15 01:06:51 provos Exp $";
@


1.6
log
@handle pfkey soft updates. only update when SA has been used.
@
text
@d2 1
a2 1
 * Copyright 1997,1998 Niels Provos <provos@@physnet.uni-hamburg.de>
d36 1
a36 1
static char rcsid[] = "$Id: spi.c,v 1.5 2000/12/14 23:28:59 provos Exp $";
@


1.5
log
@queue pfkey acquire and expire messages if we are currently waiting for
another pfkey transaction to return. some cleanup.
@
text
@d36 1
a36 1
static char rcsid[] = "$Id: spi.c,v 1.4 2000/12/11 21:21:18 provos Exp $";
d56 1
d243 1
a243 3
		if (tmp->lifetime == -1 || 
		    tmp->lifetime + (tmp->flags & SPI_OWNER ? 
				     CLEANUP_TIMEOUT : 0) > tm)
d257 120
@


1.4
log
@proper logging.
@
text
@d36 1
a36 1
static char rcsid[] = "$Id: spi.c,v 1.3 2000/12/11 20:32:15 provos Exp $";
d41 2
d63 7
a69 1
static struct spiob *spiob = NULL;
d75 1
a75 1
     return st->spi_lifetime;
d89 1
a89 1
	       return -1;
d113 1
a113 1
     return 0;
d120 1
a120 12
     struct spiob *tmp;

     ob->next = NULL;

     if(spiob == NULL) {
	  spiob = ob;
	  return 1;
     }
     
     tmp=spiob;
     while(tmp->next!=NULL)
	  tmp = tmp->next;
d122 1
a122 2
     tmp->next = ob;
     return 1;
d128 3
a130 6
     struct spiob *tmp;
     if(spiob == ob) {
	  spiob = ob->next;
	  free(ob);
	  return 1;
     }
d132 4
a135 8
     for(tmp=spiob; tmp!=NULL; tmp=tmp->next) {
	  if(tmp->next==ob) {
	       tmp->next=ob->next;
	       free(ob);
	       return 1;
	  }
     }
     return 0;
d142 1
d144 1
a144 1
	  return NULL;
d146 1
a146 1
	  return NULL;
d150 1
a150 1
	  return NULL;
d154 1
a154 1
     return p;
d160 17
a176 8
     if (ob->address != NULL)
	  free(ob->address);
     if (ob->local_address != NULL)
	  free(ob->local_address);
     if (ob->attributes != NULL)
	  free(ob->attributes);
     if (ob->sessionkey != NULL)
	  free(ob->sessionkey);
d178 1
a178 1
     return 1;
d185 1
a185 1
     struct spiob *tmp = spiob; 
d188 6
a193 5
     while(tmp!=NULL) { 
          if(!strcmp(address, tmp->address)) {
	       for(i=0;i<attribsize; i += attrib[i+1]+2) {
		    if (attrib[i] == AT_AH_ATTRIB || attrib[i] == AT_ESP_ATTRIB)
			 continue;
d198 1
a198 1
		    return tmp;
a199 1
          tmp = tmp->next; 
d201 2
a202 1
     return NULL; 
d214 1
a214 11
     struct spiob *tmp = spiob;
     while(tmp!=NULL) {
          if ((address == NULL || (tmp->flags & SPI_OWNER ? 
	      !strcmp(address, tmp->local_address) :
	      !strcmp(address, tmp->address))) &&
	     !bcmp(spi, tmp->SPI, SPI_SIZE))
	       return tmp;
	  tmp = tmp->next;
     }
     return NULL;
}
d216 12
a227 5
struct spiob *
spi_root(void)
{
     return spiob;
}
d229 1
a229 12
void
spi_cleanup()
{
     struct spiob *p;
     struct spiob *tmp = spiob;
     while(tmp!=NULL) {
	  p = tmp;
	  tmp = tmp->next;
	  spi_value_reset(p);
	  free(p);
     }
     spiob = NULL;
d235 16
a250 2
     struct spiob *tmp = spiob, *p;
     time_t tm;
a251 17
     tm = time(NULL);
     while (tmp != NULL) {
	  if (tmp->lifetime == -1 || 
	      tmp->lifetime + (tmp->flags & SPI_OWNER ? 
			       CLEANUP_TIMEOUT : 0) > tm) {
	       tmp = tmp->next;
	       continue;
	  }
#ifdef DEBUG
	  {
	       int i = BUFFER_SIZE;
	       bin2hex(buffer, &i, tmp->SPI, 4);
	       printf("Expiring %s spi %s to %s\n", 
		      tmp->flags & SPI_OWNER ? "Owner" : "User",
		      buffer, tmp->address);
	  }
#endif
d253 1
a253 1
	  kernel_unlink_spi(tmp);
d255 3
a257 5
	  p = tmp;
	  tmp = tmp->next;
	  spi_value_reset(p);
	  spi_unlink(p);
     }
@


1.3
log
@remove lots of unnecssary code, on the way to new spd framework.
@
text
@d36 1
a36 1
static char rcsid[] = "$Id: spi.c,v 1.2 1999/03/27 21:18:02 provos Exp $";
d55 1
a55 1
#include "errlog.h"
d80 1
a80 1
	       log_error(0, "select_attrib() in make_spi()");
@


1.2
log
@convert the kernel module to PFKEYv2, support for binding incoming and
outgoing SA-pairs, fix a bug in SPI generation. the daemon registers
with pfkey but does not yet handle expiration or acquire messages. well,
there are NO acquire messages at the moment, so dynamic keyed vpn or
stuff does not work :-\ - all this done in canada. thanks again to
dugsong and linh for the ride. linh is sleeping now.
@
text
@d36 1
a36 1
static char rcsid[] = "$Id: spi.c,v 1.1 1998/11/14 23:37:29 deraadt Exp $";
a105 18
}

int
spi_set_tunnel(struct stateob *st, struct spiob *spi)
{
     if (st->flags & IPSEC_OPT_TUNNEL) {
	  spi->flags |= SPI_TUNNEL;
	  spi->isrc = st->isrc;
	  spi->ismask = st->ismask;
	  spi->idst = st->idst;
	  spi->idmask = st->idmask;
     } else {
	  spi->isrc = inet_addr(spi->local_address);
	  spi->ismask = inet_addr("255.255.255.255");
	  spi->idst = inet_addr(spi->address);
	  spi->idmask = inet_addr("255.255.255.255");
     }
     return 1;
@


1.1
log
@move ipsec tools into .
@
text
@d36 1
a36 1
static char rcsid[] = "$Id: spi.c,v 1.6 1998/06/30 16:58:35 provos Exp $";
d76 1
a76 1
     u_int16_t i;
a84 3
     /* Just grab a random number, this should be uniq */
     for(i=0; i<SPI_SIZE; i++) {
	  if(i%4 == 0) {
d86 8
a93 9
	       int i, flags = 0;

	       for (i=0; i<*attribsize; i += (*attributes)[i+1]+2)
		    if ((*attributes)[i] == AT_ESP_ATTRIB)
			 flags |= IPSEC_OPT_ENC;
		    else if ((*attributes)[i] == AT_AH_ATTRIB)
			 flags |= IPSEC_OPT_AUTH;
		    
	       tmp = kernel_reserve_spi(local_address, flags);
d95 2
a96 1
	       tmp = arc4random();
d98 1
a98 1
	  }
@

