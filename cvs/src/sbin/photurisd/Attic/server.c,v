head	1.14;
access;
symbols
	OPENBSD_3_2:1.13.0.2
	OPENBSD_3_2_BASE:1.13
	OPENBSD_3_1:1.12.0.2
	OPENBSD_3_1_BASE:1.12
	OPENBSD_3_0:1.9.0.4
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9:1.9.0.2
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_8:1.1.0.8
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.6
	OPENBSD_2_7_BASE:1.1
	OPENBSD_2_6:1.1.0.4
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.2
	OPENBSD_2_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.14
date	2003.03.13.00.33.47;	author deraadt;	state dead;
branches;
next	1.13;

1.13
date	2002.06.09.08.13.09;	author todd;	state Exp;
branches;
next	1.12;

1.12
date	2002.03.29.20.35.55;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2001.11.30.20.31.49;	author provos;	state Exp;
branches;
next	1.10;

1.10
date	2001.11.17.19.54.57;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2001.01.28.22.45.17;	author niklas;	state Exp;
branches;
next	1.8;

1.8
date	2001.01.17.19.41.08;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2000.12.15.02.50.39;	author provos;	state Exp;
branches;
next	1.6;

1.6
date	2000.12.14.23.28.59;	author provos;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.12.01.53.42;	author provos;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.11.21.21.18;	author provos;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.11.20.32.15;	author provos;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.11.02.16.50;	author provos;	state Exp;
branches;
next	1.1;

1.1
date	98.11.14.23.37.28;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.14
log
@thought we had already deleted this
@
text
@/*	$OpenBSD: server.c,v 1.13 2002/06/09 08:13:09 todd Exp $	*/

/*
 * Copyright 1997-2000 Niels Provos <provos@@citi.umich.edu>
 * All rights reserved.
 *
 * Parts derived from code by Angelos D. Keromytis, kermit@@forthnet.gr
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Niels Provos.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * server.c:
 * SERVER handling functions
 */

#ifndef lint
static char rcsid[] = "$OpenBSD: server.c,v 1.13 2002/06/09 08:13:09 todd Exp $";
#endif

#define _SERVER_C_
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <sys/ioctl.h>
#include <net/if.h>
#include <string.h>
#include <unistd.h>
#ifdef _AIX
#include <sys/select.h>
#endif
#include <errno.h>
#include "config.h"
#include "photuris.h"
#include "server.h"
#include "api.h"
#include "packet.h"
#include "schedule.h"
#include "log.h"
#include "buffer.h"
#ifdef IPSEC
#include "spi.h"
#include "attributes.h"
#include "kernel.h"
#endif

int
init_server(void)
{
     struct sockaddr_in sin, *sin2;
     struct protoent *proto;
     int sock, d, i, ip, on = 1;
     struct ifconf ifconf;
     void *newbuf;
     char buf[4096];

     readfds = normfds = NULL;

     if (global_port == 0) {
#ifndef PHOTURIS_PORT
	  struct servent *ser;

	  if ((ser = getservbyname("photuris", "udp")) == (struct servent *) NULL)
	       log_fatal("getservbyname(\"photuris\") in init_server()");

	  global_port = ser->s_port;
#else
	  global_port = PHOTURIS_PORT;
#endif
     }

     if ((proto = getprotobyname("udp")) == (struct protoent *) NULL)
          log_fatal("getprotobyname() in init_server()");

     if ((global_socket = socket(PF_INET, SOCK_DGRAM, proto->p_proto)) < 0)
          log_fatal("socket() in init_server()");

     setsockopt(global_socket, SOL_SOCKET, SO_REUSEADDR, (void *)&on,
		sizeof(on));
#ifdef IPSEC
     kernel_set_socket_policy(global_socket);
#endif	

     /* get the local addresses */

     ifconf.ifc_len = sizeof(buf);
     ifconf.ifc_buf = buf;
     bzero(buf, 1024);

     if (ioctl(global_socket, SIOCGIFCONF, &ifconf) == -1)
          log_fatal("ioctl() in init_server()");

     sin.sin_port = htons(global_port);
     sin.sin_addr.s_addr = INADDR_ANY;
     sin.sin_family = AF_INET;

     if (bind(global_socket, (struct sockaddr *)&sin, sizeof(struct sockaddr)) < 0)
	  log_fatal("bind() in init_server()");

     /* Save interfaces addresses here */
     addresses = NULL;
     sockets = NULL;
     i = 0;

#ifdef IPSEC
     /* We also listen on pfkeyv2 for notify messages */
     newbuf = realloc(addresses, (i + 1) * sizeof(char *));
     if (newbuf == NULL) {
	  if (addresses != NULL)
	       free (addresses);
	  log_fatal("realloc() in init_server()");
     }
     addresses = (char **) newbuf;

     addresses[i + 1] = (char *) NULL;

     newbuf = realloc(sockets, (i + 1) * sizeof(int));
     if (newbuf == NULL) {
	  if (sockets != NULL)
	       free (sockets);
	  log_fatal("realloc() in init_server()");
     }
     sockets = (int *) newbuf;

     sockets[i] = kernel_get_socket();

     i++;                    /* Next interface */
#endif

     for (ip = 0, d = 0; d < ifconf.ifc_len; d += IFNAMSIZ +
#if defined(__NetBSD__) || defined(__OpenBSD__) || defined(_AIX)
	       buf[IFNAMSIZ + d]
#else
	       sizeof(struct sockaddr)
#endif
	       , i++, ip++) {
	  sin2 = (struct sockaddr_in *) &buf[IFNAMSIZ + d];

	  if (sin2->sin_family != AF_INET) {
	       i--; ip--;
	       continue;
	  }

	  newbuf =  realloc(addresses, (i + 1) * sizeof(char *));
	  if (newbuf == NULL) {
	       if (addresses != NULL)
		    free (addresses);
	       log_fatal("realloc() in init_server()");
	  }
	  addresses = (char **) newbuf;
	
	  addresses[i] = strdup(inet_ntoa(sin2->sin_addr));
	  if (addresses[i] == (char *) NULL)
	       log_fatal("strdup() in init_server()");

	  newbuf = realloc(sockets, (i + 1)* sizeof(int));
	  if (newbuf == NULL) {
	       if (sockets != NULL)
		    free (sockets);
	       log_fatal("realloc() in init_server()");
	  }
	  sockets = (int *) newbuf;

	  if ((sock = socket(PF_INET, SOCK_DGRAM, proto->p_proto)) < 0)
	       log_fatal("socket() in init_server()");
	  setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, (void *)&on,
		     sizeof(on));
#ifdef IPSEC
	  kernel_set_socket_policy(sock);
#endif	
	  sockets[i] = sock;

#ifdef DEBUG
	  printf("Local interface %s, address %s.\n", buf + d,
		 addresses[i]);
#endif

	  bzero((void *)&sin, sizeof(sin));
	  sin.sin_port = htons(global_port);
	  sin.sin_addr.s_addr = inet_addr(addresses[i]);
	  sin.sin_family = AF_INET;

	  if (bind(sockets[i], (struct sockaddr *)&sin, sizeof(struct sockaddr)) < 0)
	       log_fatal("bind() in init_server()");

     }

     num_ifs = i;

#ifdef DEBUG
     printf("%d local interfaces supporting IP found.\n", ip);
#endif

     return 1;
}

int
server(void)
{
     struct sockaddr_in sin;
     struct timeval timeout;
     int i, d, size;

     setvbuf(stdout, (char *)NULL, _IOLBF, 0);

     size = howmany(sockets[num_ifs-1], NFDBITS) * sizeof(fd_mask);
     normfds = (fd_set *)malloc(size);
     if (normfds == NULL)
	  log_fatal("malloc(%d) for fd_set", size);

     readfds = (fd_set *)malloc(size);
     if (readfds == NULL)
	  log_fatal("malloc(%d) for fd_set", size);

     memset((void *)normfds, 0, size);

     for (i = 0; i < num_ifs; i++)
	  FD_SET(sockets[i], normfds);

     while (1) {
	  extern volatile sig_atomic_t wantconfig;

	  if (wantconfig) {
		reconfig(0);
		wantconfig = 0;
	  }

	  bcopy(normfds, readfds, size);

	  /* Timeout till next job */
	  timeout.tv_usec = 0;
	  timeout.tv_sec = schedule_next();

#ifdef DEBUG2
	  printf("Sleeping for %ld seconds\n", timeout.tv_sec);
#endif

	  if (select(sockets[num_ifs-1]+1,
		     readfds, (fd_set *) NULL, (fd_set *) NULL,
		     (timeout.tv_sec == -1 ? NULL : &timeout)) < 0) {
	       if (errno == EINTR)
                    continue;
	       else
                    log_fatal("select() in server()");
	  }

	  for (i=0; i<num_ifs; i++) {
	       if (FD_ISSET(sockets[i], readfds)) {
#ifdef IPSEC
		    if (i == 1)       /* PF_ENCAP NOTIFIES */
			 kernel_handle_notify(sockets[i]);
		    else {
#endif
			    d = sizeof(struct sockaddr_in);
			    if (recvfrom(sockets[i],
#ifdef BROKEN_RECVFROM
				    (char *) buffer, 1,
#else
				    (char *) NULL, 0,
#endif
				    MSG_PEEK,
				    (struct sockaddr *)&sin, &d) == -1) {
				    log_error("recvfrom() in server()");
				    return -1;
			    }
			    handle_packet(sockets[i], addresses[i]);
 		    }
	       }
	  }

#ifdef IPSEC
	  /*
	   * Deal with queue acquire and expire message, since we
	   * dont have proper timeout code, it needs to go here.
	   */
	  kernel_handle_queue();
#endif

	  schedule_process(global_socket);
	  fflush(stdout);
	  fflush(stderr);
     }

     /* We will never reach this place - it's called limbo */

}
@


1.13
log
@rm trailing whitespace
@
text
@d1 1
a1 1
/*	$OpenBSD: server.c,v 1.12 2002/03/29 20:35:55 deraadt Exp $	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: server.c,v 1.12 2002/03/29 20:35:55 deraadt Exp $";
@


1.12
log
@-Wall
@
text
@d1 1
a1 1
/*	$OpenBSD: server.c,v 1.11 2001/11/30 20:31:49 provos Exp $	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: server.c,v 1.11 2001/11/30 20:31:49 provos Exp $";
d45 1
a45 1
#include <stdlib.h> 
d47 1
a47 1
#include <sys/types.h>  
d50 6
a55 6
#include <sys/socket.h>  
#include <netinet/in.h>  
#include <arpa/inet.h>  
#include <netdb.h> 
#include <sys/ioctl.h> 
#include <net/if.h> 
d58 3
a60 3
#ifdef _AIX 
#include <sys/select.h> 
#endif 
d79 4
a82 4
     struct sockaddr_in sin, *sin2; 
     struct protoent *proto; 
     int sock, d, i, ip, on = 1; 
     struct ifconf ifconf; 
d89 1
a89 1
#ifndef PHOTURIS_PORT  
d96 1
a96 1
#else  
d98 1
a98 1
#endif  
d102 2
a103 2
          log_fatal("getprotobyname() in init_server()"); 
 
d105 3
a107 3
          log_fatal("socket() in init_server()"); 
     
     setsockopt(global_socket, SOL_SOCKET, SO_REUSEADDR, (void *)&on, 
d111 3
a113 1
#endif	  
d115 6
a120 8
     /* get the local addresses */ 
 
     ifconf.ifc_len = sizeof(buf); 
     ifconf.ifc_buf = buf; 
     bzero(buf, 1024); 
 
     if (ioctl(global_socket, SIOCGIFCONF, &ifconf) == -1) 
          log_fatal("ioctl() in init_server()"); 
d123 3
a125 3
     sin.sin_addr.s_addr = INADDR_ANY; 
     sin.sin_family = AF_INET; 
     
d127 2
a128 2
	  log_fatal("bind() in init_server()"); 
 
d136 1
a136 1
     newbuf = realloc(addresses, (i + 1) * sizeof(char *)); 
d140 1
a140 1
	  log_fatal("realloc() in init_server()"); 
d143 2
a144 2
     
     addresses[i + 1] = (char *) NULL; 
d159 1
a159 1
     for (ip = 0, d = 0; d < ifconf.ifc_len; d += IFNAMSIZ + 
d161 4
a164 4
	       buf[IFNAMSIZ + d] 
#else 
	       sizeof(struct sockaddr) 
#endif 
d166 3
a168 3
	  sin2 = (struct sockaddr_in *) &buf[IFNAMSIZ + d]; 
 
	  if (sin2->sin_family != AF_INET) { 
d170 4
a173 4
	       continue; 
	  } 
 
	  newbuf =  realloc(addresses, (i + 1) * sizeof(char *)); 
d177 1
a177 1
	       log_fatal("realloc() in init_server()"); 
d180 4
a183 4
	     
	  addresses[i] = strdup(inet_ntoa(sin2->sin_addr)); 
	  if (addresses[i] == (char *) NULL) 
	       log_fatal("strdup() in init_server()"); 
d194 3
a196 3
	       log_fatal("socket() in init_server()"); 
	  setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, (void *)&on, 
		     sizeof(on)); 
d199 1
a199 1
#endif	  
d202 4
a205 4
#ifdef DEBUG 
	  printf("Local interface %s, address %s.\n", buf + d, 
		 addresses[i]); 
#endif 
d210 2
a211 2
	  sin.sin_family = AF_INET; 
     
d213 3
a215 3
	       log_fatal("bind() in init_server()"); 
  
     } 
d218 4
a221 4
 
#ifdef DEBUG 
     printf("%d local interfaces supporting IP found.\n", ip); 
#endif 
d226 1
a226 1
int 
d229 2
a230 2
     struct sockaddr_in sin; 
     struct timeval timeout; 
d244 1
a244 1
     memset((void *)normfds, 0, size); 
d267 2
a268 2
	  if (select(sockets[num_ifs-1]+1, 
		     readfds, (fd_set *) NULL, (fd_set *) NULL, 
d270 2
a271 2
	       if (errno == EINTR) 
                    continue; 
d273 1
a273 1
                    log_fatal("select() in server()"); 
d284 1
a284 1
			    if (recvfrom(sockets[i], 
d288 1
a288 1
				    (char *) NULL, 0, 
d292 1
a292 1
				    log_error("recvfrom() in server()"); 
d301 1
a301 1
	  /* 
@


1.11
log
@remove pipe based interface; only support PF_KEY; okay deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: server.c,v 1.10 2001/11/17 19:54:57 deraadt Exp $	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: server.c,v 1.10 2001/11/17 19:54:57 deraadt Exp $";
a80 1
     struct stat sb;
@


1.10
log
@volatile sig_atomic_t
@
text
@d1 1
a1 1
/*	$OpenBSD: server.c,v 1.9 2001/01/28 22:45:17 niklas Exp $	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: server.c,v 1.9 2001/01/28 22:45:17 niklas Exp $";
d131 3
a133 26
     addresses = (char **) calloc(1+1, sizeof(char *)); 
     if (addresses == (char **) NULL) 
	  log_fatal("calloc() in init_server()"); 
     addresses[1] = (char *) NULL; 
 
     sockets = (int *) calloc(1+1, sizeof(int)); 
     if (sockets == (int *) NULL) 
	  log_fatal("calloc() in init_server()"); 
     sockets[1] = -1;
 
     if (lstat(PHOTURIS_FIFO, &sb) == -1) {
	  if (errno != ENOENT)
	       log_fatal("stat() in init_server()");
	  if (mkfifo(PHOTURIS_FIFO, 0660) == -1)
	       log_fatal("mkfifo() in init_server()");
     } else if (!(sb.st_mode & S_IFIFO))
	  log_print("%s is not a FIFO in init_server()", PHOTURIS_FIFO);

     /* We listen on a named pipe */
#if defined(linux) || defined(_AIX)
     if ((sockets[0] = open(PHOTURIS_FIFO, O_RDWR| O_NONBLOCK, 0)) == -1)
#else
     if ((sockets[0] = open(PHOTURIS_FIFO, O_RDONLY | O_NONBLOCK, 0)) == -1)
#endif
	  log_fatal("open() in init_server()");
     i = 1;                  /* One interface already */
d137 1
a137 1
     newbuf = realloc(addresses, (i + 2) * sizeof(char *)); 
d147 1
a147 1
     newbuf = realloc(sockets, (i + 2)* sizeof(int));
a155 1
     sockets[i+1] = -1;
d174 1
a174 1
	  newbuf =  realloc(addresses, (i + 2) * sizeof(char *)); 
a184 1
	  addresses[i + 1] = (char *) NULL; 
d186 1
a186 1
	  newbuf = realloc(sockets, (i + 2)* sizeof(int));
a193 2
	  sockets[i+1] = -1;

d282 1
a282 1
		    else
d284 2
a285 5
			 if (addresses[i] == NULL)
				 process_api(sockets[i], global_socket); 
			 else {
				 d = sizeof(struct sockaddr_in);
				 if (recvfrom(sockets[i], 
d287 1
a287 1
					      (char *) buffer, 1,
d289 1
a289 1
					      (char *) NULL, 0, 
d291 6
a296 7
					      MSG_PEEK,
					      (struct sockaddr *)&sin,
					      &d) == -1) {
					 log_error("recvfrom() in server()"); 
					 return -1;
				 }
				 handle_packet(sockets[i], addresses[i]);
d298 1
a298 1
	       } 
@


1.9
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: server.c,v 1.8 2001/01/17 19:41:08 deraadt Exp $";
d278 1
a278 1
	  extern sig_atomic_t wantconfig;
@


1.8
log
@remove signal race, by checking signal flag in main loop; Niels looked at it
@
text
@d1 2
d40 1
a40 1
static char rcsid[] = "$Id: server.c,v 1.7 2000/12/15 02:50:39 provos Exp $";
@


1.7
log
@update email address in copyright.
@
text
@d38 1
a38 1
static char rcsid[] = "$Id: server.c,v 1.6 2000/12/14 23:28:59 provos Exp $";
d276 7
@


1.6
log
@queue pfkey acquire and expire messages if we are currently waiting for
another pfkey transaction to return. some cleanup.
@
text
@d2 1
a2 1
 * Copyright 1997,1998 Niels Provos <provos@@physnet.uni-hamburg.de>
d38 1
a38 1
static char rcsid[] = "$Id: server.c,v 1.5 2000/12/12 01:53:42 provos Exp $";
@


1.5
log
@listen to pfkeyv2 acquire messages and set up SAs accordingly.
@
text
@d38 1
a38 1
static char rcsid[] = "$Id: server.c,v 1.4 2000/12/11 21:21:18 provos Exp $";
d322 8
@


1.4
log
@proper logging.
@
text
@d38 1
a38 1
static char rcsid[] = "$Id: server.c,v 1.3 2000/12/11 20:32:15 provos Exp $";
d83 1
a83 1
     char buf[1024];
d114 1
a114 1
     ifconf.ifc_len = 1024; 
d157 1
a157 1
     /* We also listen on PF_ENCAP for notify messages */
@


1.3
log
@remove lots of unnecssary code, on the way to new spd framework.
@
text
@d38 1
a38 1
static char rcsid[] = "$Id: server.c,v 1.2 2000/12/11 02:16:50 provos Exp $";
d66 1
a66 1
#include "errlog.h"
d92 1
a92 1
	       crit_error(1, "getservbyname(\"photuris\") in init_server()");
d101 1
a101 1
          crit_error(1, "getprotobyname() in init_server()"); 
d104 1
a104 1
          crit_error(1, "socket() in init_server()"); 
d119 1
a119 1
          crit_error(1, "ioctl() in init_server()"); 
d126 1
a126 1
	  crit_error(1, "bind() in init_server()"); 
d131 1
a131 1
	  crit_error(1, "calloc() in init_server()"); 
d136 1
a136 1
	  crit_error(1, "calloc() in init_server()"); 
d141 1
a141 1
	       crit_error(1, "stat() in init_server()");
d143 1
a143 1
	       crit_error(1, "mkfifo() in init_server()");
d145 1
a145 1
	  log_error(0, "%s is not a FIFO in init_server()", PHOTURIS_FIFO);
d153 1
a153 1
	  crit_error(1, "open() in init_server()");
d162 1
a162 1
	  crit_error(1, "realloc() in init_server()"); 
d172 1
a172 1
	  crit_error(1, "realloc() in init_server()");
d200 1
a200 1
	       crit_error(1, "realloc() in init_server()"); 
d206 1
a206 1
	       crit_error(1, "strdup() in init_server()"); 
d213 1
a213 1
	       crit_error(1, "realloc() in init_server()");
d220 1
a220 1
	       crit_error(1, "socket() in init_server()"); 
d239 1
a239 1
	       crit_error(1, "bind() in init_server()"); 
d264 1
a264 1
	  crit_error(1, "malloc(%d) for fd_set", size);
d268 1
a268 1
	  crit_error(1, "malloc(%d) for fd_set", size);
d292 1
a292 1
                    crit_error(1, "select() in server()"); 
d315 1
a315 1
					 log_error(1, "recvfrom() in server()"); 
@


1.2
log
@make it use bignum.
@
text
@d38 1
a38 1
static char rcsid[] = "$Id: server.c,v 1.1 1998/11/14 23:37:28 deraadt Exp $";
d288 1
a288 1
		     (timeout.tv_sec == -1 ? NULL : &timeout)) < 0) 
d293 1
@


1.1
log
@move ipsec tools into .
@
text
@d38 1
a38 1
static char rcsid[] = "$Id: server.c,v 1.7 1998/08/17 22:12:42 provos Exp $";
d272 1
a272 1
     for (i=0; i<num_ifs; i++)
d302 4
a305 4
			 process_api(sockets[i], global_socket); 
			 else if (strcmp("127.0.0.1", inet_ntoa(sin.sin_addr))) {
			 d = sizeof(struct sockaddr_in);
			 if (recvfrom(sockets[i], 
d307 1
a307 1
				      (char *) buffer, 1,
d309 1
a309 1
				      (char *) NULL, 0, 
d311 8
a318 12
				      MSG_PEEK, 
				      (struct sockaddr *) &sin, &d) == -1) {
			      log_error(1, "recvfrom() in server()"); 
			      return -1;
			 }
			 handle_packet(sockets[i], addresses[i]);
 		    } else {
			 /* XXX - flush it. APUE */
			 d = sizeof(struct sockaddr_in);
			 recvfrom(sockets[i], (char *)buffer, BUFFER_SIZE, 0,
				  (struct sockaddr *) &sin, &d);
		    }
@

