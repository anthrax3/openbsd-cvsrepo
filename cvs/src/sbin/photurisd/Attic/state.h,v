head	1.9;
access;
symbols
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.7.0.6
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.7.0.4
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.7.0.2
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.0.4
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.2
	OPENBSD_2_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.9
date	2003.03.13.00.33.47;	author deraadt;	state dead;
branches;
next	1.8;

1.8
date	2002.06.09.08.13.09;	author todd;	state Exp;
branches;
next	1.7;

1.7
date	2001.01.28.22.45.18;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	2000.12.15.02.50.40;	author provos;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.15.02.42.09;	author provos;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.11.20.32.15;	author provos;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.11.02.16.51;	author provos;	state Exp;
branches;
next	1.2;

1.2
date	99.12.17.18.57.03;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	98.11.14.23.37.29;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.9
log
@thought we had already deleted this
@
text
@/* $OpenBSD: state.h,v 1.8 2002/06/09 08:13:09 todd Exp $ */
/*
 * Copyright 1997-2000 Niels Provos <provos@@citi.umich.edu>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Niels Provos.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * state.h:
 * state object
 */

#ifndef _STATE_H_
#define _STATE_H_

#include <sys/queue.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <ssl/bn.h>
#include <time.h>
#include "userdefs.h"
#ifdef NEED_UTYPES
#include "utypes.h"
#endif

#include "packets.h"

/* Possible values of flags */
#define IPSEC_OPT_ENC		0x0001  /* Negotiate encryption */
#define IPSEC_OPT_AUTH		0x0002  /* Negotiate authentication */
#define IPSEC_OPT_REPLAY	0x0100  /* Encryption with replay protection */
#define IPSEC_OPT_ENC_AUTH	0x0200  /* Encryption with authentication */
#define IPSEC_OPT_XOR		0x0400  /* Encryption with XOR */
#define IPSEC_OPT_COMPRESS	0x0800  /* Encryption with COMPRESS */
#define IPSEC_NOTIFY		0x1000  /* State created by kernel notify */

struct stateob {
  TAILQ_ENTRY(stateob) next;	   /* Linked list */

  int initiator;                   /* Boolean */
  int phase;                       /* Actual phase in the exchange */

  char *user;                      /* User name for which do the exchange */
  int flags;                       /* Possible flags for this exchange */

  char address[16];                /* Remote address */
  u_int16_t port;                  /* Remote port for Photuris daemon */
  u_int16_t sport, dport;          /* Only used by notify at the moment */
  u_int8_t protocol;               /* to pass back to the kernel */

  u_int8_t icookie[COOKIE_SIZE];   /* Initator cookie */
  u_int8_t rcookie[COOKIE_SIZE];   /* Responder cookie */
  u_int8_t counter;                /* Connection counter */
  u_int8_t resource;               /* Received a resource limit */

  u_int8_t *verification;          /* Verification field of last touched message */
  u_int16_t versize;

  u_int8_t *scheme;                 /* Selected exchange scheme, holds gen. */
  u_int16_t schemesize;             /* Size including value ... */

  u_int8_t *roschemes;              /* Responder offered schemes */
  u_int16_t roschemesize;           /* Responder offered schemes size */

  u_int8_t oSPI[SPI_SIZE];          /* Owner SPI */
  u_int8_t oSPITBV[3];              /* Three Byte Value */
  u_int8_t *oSPIident;              /* Owner SPI identification */
  u_int8_t *oSPIattrib;             /* Owner SPI attributes */
  u_int16_t oSPIattribsize;
  u_int8_t *oSPIoattrib;            /* Owner SPI offered attributes */
  u_int16_t oSPIoattribsize;
  u_int8_t *oSPIsecret;             /* Owner SPI secret keys */
  u_int16_t oSPIsecretsize;
  u_int8_t *oSPIidentver;           /* Owner SPI Identity Verification */
  u_int16_t oSPIidentversize;
  u_int8_t *oSPIidentchoice;        /* Owner SPI Identity Choice */
  u_int16_t oSPIidentchoicesize;
  void *oSPIprivacyctx;
  time_t olifetime;                 /* Owner SPI lifetime */

  u_int8_t uSPI[SPI_SIZE];          /* User SPI */
  u_int8_t uSPITBV[3];              /* Three Byte Value */
  u_int8_t *uSPIident;              /* User SPI identification */
  u_int8_t *uSPIattrib;             /* User SPI attributes */
  u_int16_t uSPIattribsize;
  u_int8_t *uSPIoattrib;            /* User SPI offered attributes */
  u_int16_t uSPIoattribsize;
  u_int8_t *uSPIsecret;             /* User SPI secret keys */
  u_int16_t uSPIsecretsize;
  u_int8_t *uSPIidentver;           /* User SPI Identity Verification */
  u_int16_t uSPIidentversize;
  u_int8_t *uSPIidentchoice;        /* User SPI Identity Choice */
  u_int16_t uSPIidentchoicesize;
  void *uSPIprivacyctx;
  time_t ulifetime;                 /* User SPI lifetime */

  BIGNUM *modulus;			/* Modulus for look up in cache */
  BIGNUM *generator;			/* Generator for look up in cache */
  u_int8_t *texchange;              /* Their exchange value */
  size_t texchangesize;
  u_int8_t *exchangevalue;          /* Our exchange value */
  size_t exchangesize;
  u_int8_t *shared;                 /* Shared secret */
  size_t sharedsize;

  int retries;                      /* Number of retransmits */
  u_int8_t *packet;                 /* Buffer for retransmits */
  size_t packetlen;
  u_int8_t packetsig[16];           /* MD5 hash of an old packet */

  time_t lifetime;                  /* Lifetime for the exchange */
  time_t exchange_lifetime;         /* Use this as default */
  time_t spi_lifetime;              /* Use this as default */
};

/* Prototypes */
void state_init(void);

int state_insert(struct stateob *);
int state_unlink(struct stateob *);
struct stateob *state_new(void);
int state_value_reset(struct stateob *);
struct stateob *state_root(void);
struct stateob *state_find(char *);
struct stateob *state_find_next(struct stateob *, char *);
struct stateob *state_find_icookie(u_int8_t *);
struct stateob *state_find_cookies(char *, u_int8_t *, u_int8_t *);
int state_save_verification(struct stateob *st, u_int8_t *buf, u_int16_t len);
void state_copy_flags(struct stateob *src, struct stateob *dst);
void state_cleanup(void);
void state_expire(void);

#define EXCHANGE_TIMEOUT       60
#define EXCHANGE_LIFETIME    1800

#endif
@


1.8
log
@rm trailing whitespace
@
text
@d1 1
a1 1
/* $OpenBSD: state.h,v 1.7 2001/01/28 22:45:18 niklas Exp $ */
@


1.7
log
@$OpenBSD$
@
text
@d1 1
a1 1
/* $OpenBSD: state.h,v 1.6 2000/12/15 02:50:40 provos Exp $ */
d32 1
a32 1
 * state.h: 
d68 1
a68 1
  
d88 1
a88 1
  u_int8_t oSPI[SPI_SIZE];          /* Owner SPI */ 
@


1.6
log
@update email address in copyright.
@
text
@d1 1
a30 1
/* $Id: state.h,v 1.5 2000/12/15 02:42:09 provos Exp $ */
@


1.5
log
@more cleanup; send SPI needed message if we have state but no SPI on
acquire.
@
text
@d2 1
a2 1
 * Copyright 1997,1998 Niels Provos <provos@@physnet.uni-hamburg.de>
d30 1
a30 1
/* $Id: state.h,v 1.4 2000/12/11 20:32:15 provos Exp $ */
@


1.4
log
@remove lots of unnecssary code, on the way to new spd framework.
@
text
@d30 1
a30 1
/* $Id: state.h,v 1.3 2000/12/11 02:16:51 provos Exp $ */
d39 1
d61 1
a61 1
  struct stateob *next;            /* Linked list */
d140 2
d149 1
@


1.3
log
@make it use bignum.
@
text
@d30 1
a30 1
/* $Id: state.h,v 1.2 1999/12/17 18:57:03 deraadt Exp $ */
a52 1
#define IPSEC_OPT_TUNNEL	0x0004  /* Negotiate tunne mode */
a66 2
  in_addr_t isrc, ismask;          /* Accept source for tunnel */
  in_addr_t idst, idmask;          /* Accept destination for tunnel */
@


1.2
log
@fix inclusion problems
@
text
@d30 1
a30 1
/* $Id: state.h,v 1.1 1998/11/14 23:37:29 deraadt Exp $ */
d41 1
a41 1
#include <gmp.h>
d122 2
a123 2
  mpz_t modulus;                    /* Modulus for look up in cache */
  mpz_t generator;                  /* Generator for look up in cache */
d125 1
a125 1
  u_int16_t texchangesize;
d127 1
a127 1
  u_int16_t exchangesize;
d129 1
a129 1
  u_int16_t sharedsize;
d133 1
a133 1
  u_int16_t packetlen;
@


1.1
log
@move ipsec tools into .
@
text
@d30 1
a30 1
/* $Id: state.h,v 1.7 1998/05/18 21:25:41 provos Exp $ */
d39 1
@

