head	1.9;
access;
symbols
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.7.0.6
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.7.0.4
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.7.0.2
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_8:1.2.0.8
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.6
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.9
date	2003.03.13.00.33.47;	author deraadt;	state dead;
branches;
next	1.8;

1.8
date	2002.06.09.08.13.08;	author todd;	state Exp;
branches;
next	1.7;

1.7
date	2001.01.28.22.45.10;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	2000.12.15.02.50.38;	author provos;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.14.23.28.57;	author provos;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.11.21.21.17;	author provos;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.11.20.32.15;	author provos;	state Exp;
branches;
next	1.2;

1.2
date	99.03.27.21.18.00;	author provos;	state Exp;
branches;
next	1.1;

1.1
date	98.11.14.23.37.24;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.9
log
@thought we had already deleted this
@
text
@/*	$OpenBSD: handle_spi_update.c,v 1.8 2002/06/09 08:13:08 todd Exp $	*/

/*
 * Copyright 1997-2000 Niels Provos <provos@@citi.umich.edu>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Niels Provos.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * handle_spi_update:
 * receive a SPI_UPDATE packet; return -1 on failure, 0 on success
 *
 */

#ifndef lint
static char rcsid[] = "$OpenBSD: handle_spi_update.c,v 1.8 2002/06/09 08:13:08 todd Exp $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "config.h"
#include "photuris.h"
#include "packets.h"
#include "state.h"
#include "cookie.h"
#include "buffer.h"
#include "packet.h"
#include "encrypt.h"
#include "validity.h"
#include "attributes.h"
#include "secrets.h"
#include "schedule.h"
#include "scheme.h"
#include "log.h"
#include "spi.h"
#ifdef IPSEC
#include "kernel.h"
#endif

int
handle_spi_update(u_char *packet, int size, char *address,
			char *local_address)
{
        struct packet_sub parts[] = {
	     { "Verification", FLD_VARPRE, 0, 0, },
	     { "Attributes", FLD_ATTRIB, FMD_ATT_FILL, 0, },
	     { NULL }
	};
        struct packet spi_msg = {
	     "SPI Update",
	     SPI_UPDATE_MIN, 0, parts
	};
	struct spi_update *header;
	struct stateob *st;
	struct spiob *spi;
	time_t lifetime;
	u_int8_t *attributes;
	u_int16_t i, attribsize, tmp;
	u_int8_t signature[22];  /* XXX - constant */

	if (size < SPI_UPDATE_MIN)
	     return -1;	/* packet too small  */

	header = (struct spi_update *) packet;

	st = state_find_cookies(address, header->icookie, header->rcookie);
	if (st == NULL) {
	     packet_size = PACKET_BUFFER_SIZE;
	     photuris_error_message(st, packet_buffer, &packet_size,
				    header->icookie, header->rcookie,
				    0, BAD_COOKIE);
	     send_packet();
	     return 0;
	}

	if (st->phase != SPI_UPDATE && st->phase != SPI_NEEDED)
	     return 0;     /* We don't want this packet */

	/* Decrypt message */
	tmp = size - SPI_UPDATE_MIN;
	if (packet_decrypt(st, SPI_UPDATE_VERIFICATION(header), &tmp) == -1) {
	     log_print("packet_decrypt() in handle_spi_update()");
	     goto verification_failed;
	}

	/* Verify message structure*/
	if (packet_check((u_int8_t *)header, size - packet[size-1], &spi_msg) == -1) {
	     log_print("bad packet structure in handle_spi_update()");
	     return -1;
	}

	i = get_validity_verification_size(st);
	if (!i || i != parts[0].size || i > sizeof(signature)) {
	     log_print("verification size mismatch in handle_spi_update()");
	     goto verification_failed;
	}
	bcopy(parts[0].where, signature, i);
	
	attributes = parts[1].where;
	attribsize = parts[1].size;

	if (!isattribsubset(st->oSPIoattrib,st->oSPIoattribsize,
			    attributes, attribsize)) {
	     log_print("attributes are not a subset in handle_spi_update()");
	     return 0;
	}

	if (!verify_validity_verification(st, signature, packet, size)) {
	verification_failed:
	     log_print("verification failed in handle_spi_update()");
	     packet_size = PACKET_BUFFER_SIZE;
	     photuris_error_message(st, packet_buffer, &packet_size,
				    header->icookie, header->rcookie,
				    0, VERIFICATION_FAILURE);
	     send_packet();
	     return 0;
	}

	lifetime = (header->lifetime[0]<<16) + (header->lifetime[1]<<8) +
	     header->lifetime[2];

	if (lifetime == 0) {
	     /* Delete specified security association */
	     if ((spi = spi_find(st->address, header->SPI)) == NULL) {
		  log_print("spi_find() in handle_spi_update()");
		  return -1;
	     }
#ifdef IPSEC
	     kernel_unlink_spi(spi);
#endif
	     spi_value_reset(spi);
	     spi_unlink(spi);
	     return 0;
	}

	/* The State object always retains the latest SPI pairs */
	bcopy(header->SPI, st->uSPI, SPI_SIZE);

	if ((spi = spi_new(st->address, header->SPI)) == NULL) {
	     log_print("spi_new() in handle_spi_update()");
	     return -1;
	}
	if ((spi->local_address = strdup(local_address)) == NULL) {
	     log_error("strdup() in handle_spi_update()");
	     return -1;
	}
	if((spi->attributes = calloc(attribsize, sizeof(u_int8_t))) == NULL) {
	     log_error("calloc() in handle_spi_update()");
	     return -1;
	}
	spi->flags |= st->flags & IPSEC_NOTIFY ? SPI_NOTIFY : 0;
	bcopy(attributes, spi->attributes, attribsize);
	spi->attribsize = attribsize;
	bcopy(st->icookie, spi->icookie, COOKIE_SIZE);
	spi->lifetime = time(NULL) + lifetime;

	make_session_keys(st, spi);

	spi_insert(spi);
#ifdef IPSEC
	kernel_insert_spi(st, spi);
#endif
	return 0;
}
@


1.8
log
@rm trailing whitespace
@
text
@d1 1
a1 1
/*	$OpenBSD: handle_spi_update.c,v 1.7 2001/01/28 22:45:10 niklas Exp $	*/
d39 1
a39 1
static char rcsid[] = "$OpenBSD: handle_spi_update.c,v 1.7 2001/01/28 22:45:10 niklas Exp $";
@


1.7
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d39 1
a39 1
static char rcsid[] = "$OpenBSD: handle_spi_update.c,v 1.6 2000/12/15 02:50:38 provos Exp $";
d65 1
a65 1
handle_spi_update(u_char *packet, int size, char *address, 
d74 1
a74 1
	     "SPI Update", 
d158 1
a158 1
	} 
d164 2
a165 2
	     log_print("spi_new() in handle_spi_update()"); 
	     return -1; 
@


1.6
log
@update email address in copyright.
@
text
@d1 2
d39 1
a39 1
static char rcsid[] = "$Id: handle_spi_update.c,v 1.5 2000/12/14 23:28:57 provos Exp $";
@


1.5
log
@queue pfkey acquire and expire messages if we are currently waiting for
another pfkey transaction to return. some cleanup.
@
text
@d2 1
a2 1
 * Copyright 1997,1998 Niels Provos <provos@@physnet.uni-hamburg.de>
d37 1
a37 1
static char rcsid[] = "$Id: handle_spi_update.c,v 1.4 2000/12/11 21:21:17 provos Exp $";
@


1.4
log
@proper logging.
@
text
@d37 1
a37 1
static char rcsid[] = "$Id: handle_spi_update.c,v 1.3 2000/12/11 20:32:15 provos Exp $";
d153 1
a154 1
	     spi_value_reset(spi);
@


1.3
log
@remove lots of unnecssary code, on the way to new spd framework.
@
text
@d37 1
a37 1
static char rcsid[] = "$Id: handle_spi_update.c,v 1.2 1999/03/27 21:18:00 provos Exp $";
d56 1
a56 1
#include "errlog.h"
d104 1
a104 1
	     log_error(0, "packet_decrypt() in handle_spi_update()");
d110 1
a110 1
	     log_error(0, "bad packet structure in handle_spi_update()");
d116 1
a116 1
	     log_error(0, "verification size mismatch in handle_spi_update()");
d126 1
a126 1
	     log_error(0, "attributes are not a subset in handle_spi_update()");
d132 1
a132 1
	     log_error(0, "verification failed in handle_spi_update()");
d147 1
a147 1
		  log_error(0, "spi_find() in handle_spi_update()");
d162 1
a162 1
	     log_error(0, "spi_new() in handle_spi_update()"); 
d166 1
a166 1
	     log_error(1, "strdup() in handle_spi_update()");
d170 1
a170 1
	     log_error(1, "calloc() in handle_spi_update()");
@


1.2
log
@convert the kernel module to PFKEYv2, support for binding incoming and
outgoing SA-pairs, fix a bug in SPI generation. the daemon registers
with pfkey but does not yet handle expiration or acquire messages. well,
there are NO acquire messages at the moment, so dynamic keyed vpn or
stuff does not work :-\ - all this done in canada. thanks again to
dugsong and linh for the ride. linh is sleeping now.
@
text
@d37 1
a37 1
static char rcsid[] = "$Id: handle_spi_update.c,v 1.1 1998/11/14 23:37:24 deraadt Exp $";
a177 2

	spi_set_tunnel(st, spi);
@


1.1
log
@move ipsec tools into .
@
text
@d37 1
a37 1
static char rcsid[] = "$Id: handle_spi_update.c,v 1.6 1998/05/18 21:25:28 provos Exp $";
d157 3
@

