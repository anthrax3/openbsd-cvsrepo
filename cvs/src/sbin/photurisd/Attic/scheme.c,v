head	1.7;
access;
symbols
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.5.0.6
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.4
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.1.0.8
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.6
	OPENBSD_2_7_BASE:1.1
	OPENBSD_2_6:1.1.0.4
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.2
	OPENBSD_2_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2003.03.13.00.33.47;	author deraadt;	state dead;
branches;
next	1.6;

1.6
date	2002.06.09.08.13.08;	author todd;	state Exp;
branches;
next	1.5;

1.5
date	2001.01.28.22.45.16;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.50.39;	author provos;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.11.21.21.18;	author provos;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.11.02.16.50;	author provos;	state Exp;
branches;
next	1.1;

1.1
date	98.11.14.23.37.28;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.7
log
@thought we had already deleted this
@
text
@/*	$OpenBSD: scheme.c,v 1.6 2002/06/09 08:13:08 todd Exp $	*/

/*
 * Copyright 1997-2000 Niels Provos <provos@@citi.umich.edu>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Niels Provos.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * scheme.c:
 * SCHEME handling functions
 */

#ifndef lint
static char rcsid[] = "$OpenBSD: scheme.c,v 1.6 2002/06/09 08:13:08 todd Exp $";
#endif

#define _SCHEME_C_

#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include "config.h"
#include "attributes.h"
#include "buffer.h"
#include "scheme.h"
#include "log.h"

u_int8_t *
scheme_get_gen(u_int8_t *scheme)
{
     int header;
     switch(ntohs(*(u_int16_t *)scheme)) {
     case DH_G_2_MD5:
     case DH_G_3_MD5:
     case DH_G_2_DES_MD5:
     case DH_G_5_MD5:
     case DH_G_3_DES_MD5:
     case DH_G_2_3DES_SHA1:
     case DH_G_5_DES_MD5:
     case DH_G_3_3DES_SHA1:
     case DH_G_5_3DES_SHA1:
	  return NULL;
     case DH_G_VAR_MD5:
     case DH_G_VAR_DES_MD5:
     case DH_G_VAR_3DES_SHA1:
	  if (scheme[2] == 255 && scheme[3] == 255)
	       header = 8;
	  else if (scheme[2] == 255)
	       header = 4;
	  else
	       header = 2;
	  return scheme+2+header;
     default:
          log_print("Unknown scheme in scheme_get_gen()");
          return NULL;
     }
}

u_int8_t *
scheme_get_mod(u_int8_t *scheme)
{
     int header;
     switch(ntohs(*(u_int16_t *)scheme)) {
     case DH_G_2_MD5:
     case DH_G_3_MD5:
     case DH_G_2_DES_MD5:
     case DH_G_5_MD5:
     case DH_G_3_DES_MD5:
     case DH_G_2_3DES_SHA1:
     case DH_G_5_DES_MD5:
     case DH_G_3_3DES_SHA1:
     case DH_G_5_3DES_SHA1:
	  return scheme+2;
	  break;
     case DH_G_VAR_MD5:
     case DH_G_VAR_DES_MD5:
     case DH_G_VAR_3DES_SHA1:
	  if (scheme[2] == 255 && scheme[3] == 255)
	       header = 8;
	  else if (scheme[2] == 255)
	       header = 4;
	  else
	       header = 2;
	  if (varpre2octets(scheme+2) > 2)
	       return scheme+2+header+varpre2octets(scheme+2+header);
	  else
	       return scheme+2;
	  break;
     default:
	  log_print("Unknown scheme in scheme_get_mod()");
	  return NULL;
     }
}

size_t
scheme_get_len(u_int8_t *scheme)
{
     return 2 + varpre2octets(scheme + 2);
}

u_int16_t
scheme_get_ref(u_int8_t *scheme)
{
     switch(ntohs(*(u_int16_t *)scheme)) {
     case DH_G_2_MD5:
     case DH_G_2_DES_MD5:
     case DH_G_2_3DES_SHA1:
	  return DH_G_2_MD5;
     case DH_G_3_MD5:
     case DH_G_3_DES_MD5:
     case DH_G_3_3DES_SHA1:
	  return DH_G_3_MD5;
     case DH_G_5_MD5:
     case DH_G_5_DES_MD5:
     case DH_G_5_3DES_SHA1:
	  return DH_G_5_MD5;
     case DH_G_VAR_MD5:
     case DH_G_VAR_DES_MD5:
     case DH_G_VAR_3DES_SHA1:
          return DH_G_VAR_MD5;
     default:
          log_print("Unknown scheme in scheme_get_ref()");
          return 0;
     }
}

size_t
varpre2octets(u_int8_t *varpre)
{
	int blocks, header;
	size_t size;

	/* XXX - only support a few octets at the moment */
	if(varpre[0] == 255 && varpre[1] == 255)
		return (0);

	size = 0;
	if (varpre[0] == 255) {
		blocks = 3;
		varpre++;
		size = 65280;
		header = 4;
	} else {
		header = 2;
		blocks = 2;
	}

	while (blocks--) {
		size = (size << 8) + *varpre;
		varpre++;
	}
	size = (size + 7) / 8;

	return (size + header);
}

@


1.6
log
@rm trailing whitespace
@
text
@d1 1
a1 1
/*	$OpenBSD: scheme.c,v 1.5 2001/01/28 22:45:16 niklas Exp $	*/
d38 1
a38 1
static char rcsid[] = "$OpenBSD: scheme.c,v 1.5 2001/01/28 22:45:16 niklas Exp $";
@


1.5
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d38 1
a38 1
static char rcsid[] = "$OpenBSD: scheme.c,v 1.4 2000/12/15 02:50:39 provos Exp $";
d45 3
a47 3
#include <sys/socket.h> 
#include <netinet/in.h> 
#include <arpa/inet.h> 
d58 9
a66 9
     switch(ntohs(*(u_int16_t *)scheme)) { 
     case DH_G_2_MD5: 
     case DH_G_3_MD5:  
     case DH_G_2_DES_MD5:  
     case DH_G_5_MD5:  
     case DH_G_3_DES_MD5:  
     case DH_G_2_3DES_SHA1:  
     case DH_G_5_DES_MD5:  
     case DH_G_3_3DES_SHA1:  
d69 3
a71 3
     case DH_G_VAR_MD5: 
     case DH_G_VAR_DES_MD5: 
     case DH_G_VAR_3DES_SHA1: 
d79 3
a81 3
     default: 
          log_print("Unknown scheme in scheme_get_gen()"); 
          return NULL; 
d84 3
a86 3
 
u_int8_t * 
scheme_get_mod(u_int8_t *scheme) 
d91 8
a98 8
     case DH_G_3_MD5: 
     case DH_G_2_DES_MD5: 
     case DH_G_5_MD5: 
     case DH_G_3_DES_MD5: 
     case DH_G_2_3DES_SHA1: 
     case DH_G_5_DES_MD5: 
     case DH_G_3_3DES_SHA1: 
     case DH_G_5_3DES_SHA1: 
d124 1
a124 1
     return 2 + varpre2octets(scheme + 2); 
d130 4
a133 4
     switch(ntohs(*(u_int16_t *)scheme)) { 
     case DH_G_2_MD5: 
     case DH_G_2_DES_MD5:  
     case DH_G_2_3DES_SHA1:  
d135 3
a137 3
     case DH_G_3_MD5:  
     case DH_G_3_DES_MD5:  
     case DH_G_3_3DES_SHA1: 
d139 3
a141 3
     case DH_G_5_MD5:  
     case DH_G_5_DES_MD5:  
     case DH_G_5_3DES_SHA1: 
d143 3
a145 3
     case DH_G_VAR_MD5: 
     case DH_G_VAR_DES_MD5: 
     case DH_G_VAR_3DES_SHA1: 
d147 4
a150 4
     default: 
          log_print("Unknown scheme in scheme_get_ref()"); 
          return 0; 
     } 
d153 1
a153 1
size_t 
d162 1
a162 1
     
@


1.4
log
@update email address in copyright.
@
text
@d1 2
d38 1
a38 1
static char rcsid[] = "$Id: scheme.c,v 1.3 2000/12/11 21:21:18 provos Exp $";
@


1.3
log
@proper logging.
@
text
@d2 1
a2 1
 * Copyright 1997 Niels Provos <provos@@physnet.uni-hamburg.de>
d36 1
a36 1
static char rcsid[] = "$Id: scheme.c,v 1.2 2000/12/11 02:16:50 provos Exp $";
@


1.2
log
@make it use bignum.
@
text
@d36 1
a36 1
static char rcsid[] = "$Id: scheme.c,v 1.1 1998/11/14 23:37:28 deraadt Exp $";
d50 1
a50 1
#include "errlog.h"
d78 1
a78 1
          log_error(0, "Unknown scheme in scheme_get_gen()"); 
d114 1
a114 1
	  log_error(0, "Unknown scheme in scheme_get_mod()");
d146 1
a146 1
          log_error(0, "Unknown scheme in scheme_get_ref()"); 
@


1.1
log
@move ipsec tools into .
@
text
@d36 1
a36 1
static char rcsid[] = "$Id: scheme.c,v 1.1.1.1 1997/07/18 22:48:50 provos Exp $";
d122 1
a122 1
     return 2 + varpre2octets(scheme+2); 
d154 2
a155 23
     int blocks, header;
     size_t size;
     mpz_t offset, a;

     mpz_init(offset);
     mpz_init(a);

     /* XXX - only support a few octets at the moment */

     if(*varpre == 255 && *(varpre+1) == 255) {
          blocks = 6;
          varpre += 2;
          mpz_set_ui(offset, 16776960);
	  header = 8;
     } else if (*varpre == 255) {
	  blocks = 3;
	  varpre++;
	  mpz_set_ui(offset, 65280);
	  header = 4;
     } else {
	  header = 2;
	  blocks = 2;
     }
d157 20
a176 10
     while(blocks--) {
	  mpz_mul_ui(a, a, 256);
	  mpz_add_ui(a, a, *varpre);
	  varpre++;
     }
     mpz_add(offset, offset, a);
     mpz_cdiv_q_ui(offset, offset, 8);
     size = mpz_get_ui(offset) + header;
     mpz_clear(offset);
     mpz_clear(a);
d178 1
a178 1
     return size;
@

