head	1.6;
access;
symbols
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.1.0.8
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.6
	OPENBSD_2_7_BASE:1.1
	OPENBSD_2_6:1.1.0.4
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.2
	OPENBSD_2_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2003.03.13.00.33.47;	author deraadt;	state dead;
branches;
next	1.5;

1.5
date	2002.06.09.08.13.08;	author todd;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.28.22.45.12;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.01.58.27;	author provos;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.11.02.16.50;	author provos;	state Exp;
branches;
next	1.1;

1.1
date	98.11.14.23.37.25;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.6
log
@thought we had already deleted this
@
text
@/* $OpenBSD: modulus.h,v 1.5 2002/06/09 08:13:08 todd Exp $ */
/*
 * Copyright 1997-2000 Niels Provos <provos@@citi.umich.edu>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Niels Provos.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * modulus.h:
 * modulus handling functions
 */

#ifndef _MODULUS_H_
#define _MODULUS_H_
#include <sys/queue.h>

/* Possible values for the status field */

#define MOD_UNUSED     0
#define MOD_COMPUTING  1
#define MOD_PRIME      2
#define MOD_NOTPRIME   3

#define MOD_PRIME_ITER 5                    /* Do each cycle */
#define MOD_PRIME_MAX  20                   /* > => Is prime */
#define MOD_PRIME_TIME 4                    /* max time in mod_check_prime */

#define MOD_TIMEOUT    120

struct moduli_cache {
     TAILQ_ENTRY(moduli_cache) next;	/* Link to next member */

     BIGNUM *modulus;			/* Modulus for computation */
     BIGNUM *generator;			/* Used generator */
     BIGNUM *private_value;		/* Our own private value */
     u_int8_t *exchangevalue;		/* Our own exchange value */
     size_t exchangesize;
     int iterations;			/* primality check iterations */
     int status;			/* Status of the modulus */
     time_t lifetime;			/* For modulus + exchange value */
};

/* Prototypes */
void mod_init(void);

int mod_insert(struct moduli_cache *ob);
int mod_unlink(struct moduli_cache *ob);

struct moduli_cache *mod_new_modgen(BIGNUM *, BIGNUM *);
struct moduli_cache *mod_new_modulus(BIGNUM *);

int mod_value_reset(struct moduli_cache *ob);

struct moduli_cache *mod_find_modgen(BIGNUM *, BIGNUM *);
struct moduli_cache *mod_find_modgen_next(struct moduli_cache *, BIGNUM *,
					  BIGNUM *);
struct moduli_cache *mod_find_modulus(BIGNUM *);
struct moduli_cache *mod_find_generator(BIGNUM *);
struct moduli_cache *mod_find_modulus_next(struct moduli_cache *, BIGNUM *);
struct moduli_cache *mod_find_generator_next(struct moduli_cache *, BIGNUM *);

void mod_check_prime(int iter, int tm);

void mod_cleanup(void);


#endif
@


1.5
log
@rm trailing whitespace
@
text
@d1 1
a1 1
/* $OpenBSD: modulus.h,v 1.4 2001/01/28 22:45:12 niklas Exp $ */
@


1.4
log
@$OpenBSD$
@
text
@d1 1
a1 1
/* $OpenBSD: modulus.h,v 1.3 2000/12/15 01:58:27 provos Exp $ */
d31 2
a32 2
/* 
 * modulus.h: 
d34 1
a34 1
 */ 
@


1.3
log
@more cleanup. remove last vestiges of gmp.
@
text
@d1 1
a30 1
/* $Id: modulus.h,v 1.2 2000/12/11 02:16:50 provos Exp $ */
@


1.2
log
@make it use bignum.
@
text
@d2 1
a2 1
 * Copyright 1997 Niels Provos <provos@@physnet.uni-hamburg.de>
d30 1
a30 1
/* $Id: modulus.h,v 1.1 1998/11/14 23:37:25 deraadt Exp $ */
d38 1
a38 10

#undef EXTERN

#ifdef _MODULUS_C_
#define EXTERN
#else
#define EXTERN extern
#endif

#include "gmp.h"
d54 2
a55 1
     struct moduli_cache *next;		/* Link to next member */
d67 2
@


1.1
log
@move ipsec tools into .
@
text
@d30 1
a30 1
/* $Id: modulus.h,v 1.1.1.1 1997/07/18 22:48:49 provos Exp $ */
d63 9
a71 9
     struct moduli_cache *next;             /* Link to next member */
     mpz_t modulus;                         /* Modulus for computation */
     mpz_t generator;                       /* Used generator */
     mpz_t private_value;                   /* Our own private value */
     u_int8_t *exchangevalue;               /* Our own exchange value */
     u_int16_t exchangesize;
     int iterations;                        /* primality check iterations */
     int status;                            /* Status of the modulus */
     time_t lifetime;                       /* For modulus + exchange value */
d78 2
a79 2
struct moduli_cache *mod_new_modgen(mpz_t m, mpz_t g);
struct moduli_cache *mod_new_modulus(mpz_t m);
d83 7
a89 6
struct moduli_cache *mod_find_modgen(mpz_t modulus, mpz_t generator);
struct moduli_cache *mod_find_modgen_next(struct moduli_cache *ob, mpz_t modulus, mpz_t generator);
struct moduli_cache *mod_find_modulus(mpz_t modulus);
struct moduli_cache *mod_find_generator(mpz_t generator);
struct moduli_cache *mod_find_modulus_next(struct moduli_cache *ob, mpz_t modulus);
struct moduli_cache *mod_find_generator_next(struct moduli_cache *ob, mpz_t generator);
@

