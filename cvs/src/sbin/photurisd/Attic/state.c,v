head	1.11;
access;
symbols
	OPENBSD_3_2:1.10.0.2
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.8.0.6
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.8.0.4
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.8.0.2
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_8:1.1.0.8
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.6
	OPENBSD_2_7_BASE:1.1
	OPENBSD_2_6:1.1.0.4
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.2
	OPENBSD_2_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.11
date	2003.03.13.00.33.47;	author deraadt;	state dead;
branches;
next	1.10;

1.10
date	2002.06.10.19.58.20;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2002.06.09.08.13.09;	author todd;	state Exp;
branches;
next	1.8;

1.8
date	2001.01.28.22.45.18;	author niklas;	state Exp;
branches;
next	1.7;

1.7
date	2000.12.16.08.42.19;	author provos;	state Exp;
branches;
next	1.6;

1.6
date	2000.12.15.02.50.40;	author provos;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.15.02.42.09;	author provos;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.11.21.21.18;	author provos;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.11.20.32.15;	author provos;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.11.02.16.51;	author provos;	state Exp;
branches;
next	1.1;

1.1
date	98.11.14.23.37.29;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.11
log
@thought we had already deleted this
@
text
@/*	$OpenBSD: state.c,v 1.10 2002/06/10 19:58:20 espie Exp $	*/

/*
 * Copyright 1997-2000 Niels Provos <provos@@citi.umich.edu>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Niels Provos.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * state.c:
 * functions for handling states
 */

#include <sys/types.h>
#include <sys/queue.h>

#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <sys/time.h>

#define _STATE_C_

#include "photuris.h"
#include "state.h"
#include "schedule.h"
#include "log.h"

TAILQ_HEAD(statelist, stateob) statehead;

void
state_init(void)
{
	TAILQ_INIT(&statehead);
}

int
state_insert(struct stateob *ob)
{
	TAILQ_INSERT_TAIL(&statehead, ob, next);

	return (1);
}

int
state_unlink(struct stateob *ob)
{
	TAILQ_REMOVE(&statehead, ob, next);

	return (1);
}

int
state_save_verification(struct stateob *st, u_int8_t *buf, u_int16_t len)
{
	if (st->verification == NULL || len > st->versize) {
		if (st->verification != NULL)
			free(st->verification);

		st->verification = calloc(len, sizeof(u_int8_t));
		if (st->verification == NULL) {
			log_error("%s: calloc()", __func__);
			return (-1);
		}
	}

	bcopy(buf, st->verification, len);
	st->versize = len;

	return (0);
}


/*
 * Copies configuration flags from one state to the other
 */

void
state_copy_flags(struct stateob *src, struct stateob *dst)
{
	dst->initiator = src->initiator;

	if (src->user != NULL)
		dst->user = strdup(src->user);

	dst->flags = src->flags;

	strncpy(dst->address, src->address, sizeof(src->address)-1);
	dst->address[sizeof(dst->address)-1] = 0;

	dst->lifetime = src->lifetime;
	dst->exchange_lifetime = src->exchange_lifetime;
	dst->spi_lifetime = src->spi_lifetime;
}

struct stateob *
state_new(void)
{
	struct stateob *p;

	if((p = calloc(1, sizeof(struct stateob)))==NULL) {
		log_error("%s: calloc", __func__);
		return (NULL);
	}

	p->modulus = BN_new();
	p->generator = BN_new();

	p->exchange_lifetime = exchange_lifetime;
	p->spi_lifetime = spi_lifetime;

	return (p);
}

int
state_value_reset(struct stateob *ob)
{
     BN_clear_free(ob->modulus);
     BN_clear_free(ob->generator);

     if (ob->texchange != NULL)
	  free(ob->texchange);
     if (ob->exchangevalue != NULL)
	  free(ob->exchangevalue);

     if (ob->verification != NULL)
	  free(ob->verification);
     if (ob->roschemes != NULL)
	  free(ob->roschemes);
     if (ob->scheme != NULL)
	  free(ob->scheme);
     if (ob->shared != NULL)
	  free(ob->shared);

     if (ob->user != NULL)
	  free(ob->user);

     if (ob->oSPIident != NULL)
	  free(ob->oSPIident);
     if (ob->oSPIattrib != NULL)
	  free(ob->oSPIattrib);
     if (ob->oSPIoattrib != NULL)
	  free(ob->oSPIoattrib);
     if (ob->oSPIsecret != NULL)
	  free(ob->oSPIsecret);
     if (ob->oSPIidentver != NULL)
	  free(ob->oSPIidentver);
     if (ob->oSPIidentchoice != NULL)
	  free(ob->oSPIidentchoice);
     if (ob->oSPIprivacyctx != NULL)
	  free(ob->oSPIprivacyctx);

     if (ob->uSPIident != NULL)
	  free(ob->uSPIident);
     if (ob->uSPIattrib != NULL)
	  free(ob->uSPIattrib);
     if (ob->uSPIoattrib != NULL)
	  free(ob->uSPIoattrib);
     if (ob->uSPIsecret != NULL)
	  free(ob->uSPIsecret);
     if (ob->uSPIidentver != NULL)
	  free(ob->uSPIidentver);
     if (ob->uSPIidentchoice != NULL)
	  free(ob->uSPIidentchoice);
     if (ob->uSPIprivacyctx != NULL)
	  free(ob->uSPIprivacyctx);

     if (ob->packet != NULL)
	  free(ob->packet);

     return (1);
}

/*
 * find the state ob with matching address
 */

struct stateob *
state_find(char *address)
{
	struct stateob *tmp;

	for (tmp = TAILQ_FIRST(&statehead); tmp; tmp = TAILQ_NEXT(tmp, next)) {
		if (address == NULL || !strcmp(address, tmp->address))
			break;
	}

	return (tmp);
}

struct stateob *
state_find_next(struct stateob *prev, char *address)
{
     struct stateob *tmp;

     for (tmp = TAILQ_NEXT(prev, next); tmp; tmp = TAILQ_NEXT(tmp, next)) {
	     if (address == NULL || !strcmp(address, tmp->address))
		     break;
     }

     return (tmp);
}

struct stateob *
state_find_icookie(u_int8_t *cookie)
{
	struct stateob *tmp;

	for (tmp = TAILQ_FIRST(&statehead); tmp; tmp = TAILQ_NEXT(tmp, next)) {
		if (!bcmp(tmp->icookie, cookie, COOKIE_SIZE))
			break;
	}

	return (tmp);
}

struct stateob *
state_find_cookies(char *address, u_int8_t *icookie, u_int8_t *rcookie)
{
     struct stateob *tmp;


     for (tmp = state_find(address); tmp;
	  tmp = state_find_next(tmp, address)) {
	  if (!bcmp(tmp->icookie, icookie, COOKIE_SIZE) &&
	      (rcookie == NULL || !bcmp(tmp->rcookie, rcookie, COOKIE_SIZE)))
		  break;
     }

     return (tmp);
}

void
state_cleanup(void)
{
     struct stateob *p;

     while ((p = TAILQ_FIRST(&statehead))) {
	     TAILQ_REMOVE(&statehead, p, next);

	     state_value_reset(p);
	     free(p);
     }
}

void
state_expire(void)
{
	struct stateob *tmp, *next;
	time_t tm;

	tm = time(NULL);
	for (tmp = TAILQ_FIRST(&statehead); tmp; tmp = next) {
		next = TAILQ_NEXT(tmp, next);

		if ((tmp->retries < max_retries || tmp->resource) &&
		    (tmp->lifetime == -1 || tmp->lifetime > tm))
			continue;

		LOG_DBG((LOG_MISC, 35, 
			 "%s: Expiring state to %s in phase %d",
			 __func__, tmp->address, tmp->phase));

		state_value_reset(tmp);
		state_unlink(tmp);
	}
}
@


1.10
log
@kill __FUNCTION__
add __attribute__((format...)
Fix one bad call.

okay provos@@
@
text
@d1 1
a1 1
/*	$OpenBSD: state.c,v 1.9 2002/06/09 08:13:09 todd Exp $	*/
@


1.9
log
@rm trailing whitespace
@
text
@d1 1
a1 1
/*	$OpenBSD: state.c,v 1.8 2001/01/28 22:45:18 niklas Exp $	*/
d85 1
a85 1
			log_error(__FUNCTION__": calloc()");
d125 1
a125 1
		log_error(__FUNCTION__": calloc");
d283 3
a285 3
		LOG_DBG((LOG_MISC, 35, __FUNCTION__
			 ": Expiring state to %s in phase %d",
			 tmp->address, tmp->phase));
@


1.8
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d76 1
a76 1
int 
d105 1
a105 1
     
d131 1
a131 1
  
d140 1
a140 1
{ 
d197 1
a197 1
/* 
d214 4
a217 4
struct stateob * 
state_find_next(struct stateob *prev, char *address) 
{ 
     struct stateob *tmp; 
d220 1
a220 1
	     if (address == NULL || !strcmp(address, tmp->address)) 
d222 1
a222 1
     } 
d224 2
a225 2
     return (tmp); 
} 
d240 2
a241 2
struct stateob * 
state_find_cookies(char *address, u_int8_t *icookie, u_int8_t *rcookie) 
d245 1
a245 1
     
d248 1
a248 1
	  if (!bcmp(tmp->icookie, icookie, COOKIE_SIZE) && 
@


1.7
log
@typo
@
text
@d1 2
@


1.6
log
@update email address in copyright.
@
text
@d282 1
a282 1
			 ": Expiring state to %s in phase %d\n",
@


1.5
log
@more cleanup; send SPI needed message if we have state but no SPI on
acquire.
@
text
@d2 1
a2 1
 * Copyright 1997,1998 Niels Provos <provos@@physnet.uni-hamburg.de>
@


1.4
log
@proper logging.
@
text
@d35 2
a36 1
#define _STATE_C_
a37 3
#ifdef DEBUG
#include <stdio.h>
#endif
d42 3
d50 7
a56 1
static struct stateob *stateob = NULL;
d61 1
a61 3
     struct stateob *tmp;

     ob->next = NULL;
d63 1
a63 11
     if(stateob == NULL) {
	  stateob = ob;
	  return 1;
     }
     
     tmp=stateob;
     while(tmp->next!=NULL)
	  tmp = tmp->next;

     tmp->next = ob;
     return 1;
d69 1
a69 6
     struct stateob *tmp;
     if(stateob == ob) {
	  stateob = ob->next;
	  free(ob);
	  return 1;
     }
d71 1
a71 8
     for(tmp=stateob; tmp!=NULL; tmp=tmp->next) {
	  if(tmp->next==ob) {
	       tmp->next=ob->next;
	       free(ob);
	       return 1;
	  }
     }
     return 0;
d77 13
a89 9
     if (st->verification == NULL || len > st->versize) {
	  if (st->verification != NULL)
	       free(st->verification);

	  if ((st->verification = calloc(len, sizeof(u_int8_t))) == NULL) {
	       log_error("calloc() in state_save_verification()");
	       return -1;
	  }
     }
d91 1
a91 3
     bcopy(buf, st->verification, len);
     st->versize = len;
     return 0;
d102 1
a102 1
     dst->initiator = src->initiator;
d104 2
a105 2
     if (src->user != NULL)
	  dst->user = strdup(src->user);
d107 1
a107 1
     dst->flags = src->flags;
d109 2
a110 2
     strncpy(dst->address, src->address, sizeof(src->address)-1);
     dst->address[sizeof(dst->address)-1] = 0;
d112 3
a114 3
     dst->lifetime = src->lifetime;
     dst->exchange_lifetime = src->exchange_lifetime;
     dst->spi_lifetime = src->spi_lifetime;
d120 1
a120 1
     struct stateob *p;
d122 4
a125 2
     if((p = calloc(1, sizeof(struct stateob)))==NULL)
	  return NULL;
d127 2
a128 2
     p->modulus = BN_new();
     p->generator = BN_new();
d130 2
a131 2
     p->exchange_lifetime = exchange_lifetime;
     p->spi_lifetime = spi_lifetime;
d133 1
a133 1
     return p;
d192 1
a192 1
     return 1;
d200 1
a200 1
state_root(void)
d202 6
a207 2
     return stateob;
}
d209 1
a209 10
struct stateob *
state_find(char *address)
{
     struct stateob *tmp = stateob;
     while (tmp != NULL) {
          if (address == NULL || !strcmp(address, tmp->address))
	       return tmp;
	  tmp = tmp->next;
     }
     return NULL;
d215 5
a219 5
     struct stateob *tmp = prev->next; 
     while(tmp!=NULL) { 
          if(address == NULL || !strcmp(address, tmp->address)) 
               return tmp; 
          tmp = tmp->next; 
d221 2
a222 1
     return NULL; 
d225 12
d243 3
a245 2
     tmp = state_find(address);
     while(tmp!=NULL) {
d248 1
a248 2
	       return tmp;
	  tmp = state_find_next(tmp, address);
d251 1
a251 1
     return NULL;
d255 1
a255 1
state_cleanup()
d258 6
a263 6
     struct stateob *tmp = stateob;
     while(tmp!=NULL) {
	  p = tmp;
	  tmp = tmp->next;
	  state_value_reset(p);
	  free(p);
a264 1
     stateob = NULL;
d270 2
a271 2
     struct stateob *tmp = stateob, *p;
     time_t tm;
d273 15
a287 16
     tm = time(NULL);
     while (tmp != NULL) {
	  if ((tmp->retries < max_retries || tmp->resource) &&
	      (tmp->lifetime == -1 || tmp->lifetime > tm)) {
	       tmp = tmp->next;
	       continue;
	  }
#ifdef DEBUG
	  printf("Expiring state to %s in phase %d\n",
		tmp->address, tmp->phase);
#endif
	  p = tmp;
	  tmp = tmp->next;
	  state_value_reset(p);
	  state_unlink(p);
     }
@


1.3
log
@remove lots of unnecssary code, on the way to new spd framework.
@
text
@d47 1
a47 1
#include "errlog.h"
d99 1
a99 1
	       log_error(1, "calloc() in state_save_verification()");
@


1.2
log
@make it use bignum.
@
text
@a122 4
     dst->isrc = src->isrc;
     dst->ismask = src->ismask;
     dst->idst = src->idst;
     dst->idmask = src->idmask;
@


1.1
log
@move ipsec tools into .
@
text
@d144 2
a145 2
     mpz_init(p->modulus);
     mpz_init(p->generator);
d156 2
a157 2
     mpz_clear(ob->modulus);
     mpz_clear(ob->generator);
@

