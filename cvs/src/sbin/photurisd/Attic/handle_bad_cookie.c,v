head	1.6;
access;
symbols
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.1.0.8
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.6
	OPENBSD_2_7_BASE:1.1
	OPENBSD_2_6:1.1.0.4
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.2
	OPENBSD_2_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2003.03.13.00.33.46;	author deraadt;	state dead;
branches;
next	1.5;

1.5
date	2002.06.09.08.13.08;	author todd;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.28.22.45.08;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.02.50.38;	author provos;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.11.21.21.17;	author provos;	state Exp;
branches;
next	1.1;

1.1
date	98.11.14.23.37.23;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.6
log
@thought we had already deleted this
@
text
@/*	$OpenBSD: handle_bad_cookie.c,v 1.5 2002/06/09 08:13:08 todd Exp $	*/

/*
 * Copyright 1997-2000 Niels Provos <provos@@citi.umich.edu>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Niels Provos.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * handle_bad_cookie:
 * receive a BAD_COOKIE packet; return -1 on failure, 0 on success
 *
 */

#ifndef lint
static char rcsid[] = "$OpenBSD: handle_bad_cookie.c,v 1.5 2002/06/09 08:13:08 todd Exp $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <sys/time.h>
#include "config.h"
#include "photuris.h"
#include "packets.h"
#include "state.h"
#include "cookie.h"
#include "buffer.h"
#include "packet.h"
#include "schedule.h"
#include "log.h"
#include "server.h"
#include "packet.h"
#include "api.h"

int
handle_bad_cookie(u_char *packet, int size, char *address)
{
	struct error_message *header;
	struct stateob *st, *newst;

	if (size != ERROR_MESSAGE_PACKET_SIZE)
	     return -1;	/* packet too small/big  */

	header = (struct error_message *) packet;

	if ((st = state_find_cookies(address, header->icookie,
				     header->rcookie)) == NULL) {
	     log_print("No state for BAD_COOKIE message from %s",
		       address);
	     return -1;
	}

	if ((st->retries < max_retries &&
	     (st->phase == VALUE_REQUEST || st->phase == IDENTITY_REQUEST)) ||
	     (st->phase != VALUE_REQUEST && st->phase != IDENTITY_REQUEST &&
	      st->phase != SPI_NEEDED && st->phase != SPI_UPDATE)) {
	     log_print("Ignored BAD_COOKIE message from %s", address);
	
	     return 0;                 /* Nothing needs to be done */
	}

	if (st->phase == SPI_UPDATE) {
	     st->lifetime = time(NULL);

	     log_print("Expired exchange on BAD_COOKIE from %s",
		       address);
	     return 0;
	}

	schedule_remove(TIMEOUT, st->icookie);
	state_unlink(st);

        /* Set up a new state object */
        if ((newst = state_new()) == NULL) {
             log_error("state_new() in handle_bad_cookie()");
             return -1;
        }

	newst->flags = st->flags;
	if (st->user != NULL)
	     newst->user = strdup(st->user);

	state_value_reset(st);

	if (start_exchange(global_socket, newst, address, global_port) == -1) {
	     log_print("start_exchange() in handle_bad_cookie()");
	     state_value_reset(st);
	     return -1;
	}

        state_insert(newst);

	return 0;
}
@


1.5
log
@rm trailing whitespace
@
text
@d1 1
a1 1
/*	$OpenBSD: handle_bad_cookie.c,v 1.4 2001/01/28 22:45:08 niklas Exp $	*/
d39 1
a39 1
static char rcsid[] = "$OpenBSD: handle_bad_cookie.c,v 1.4 2001/01/28 22:45:08 niklas Exp $";
@


1.4
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d39 1
a39 1
static char rcsid[] = "$OpenBSD: handle_bad_cookie.c,v 1.3 2000/12/15 02:50:38 provos Exp $";
d71 1
a71 1
	if ((st = state_find_cookies(address, header->icookie, 
d73 1
a73 1
	     log_print("No state for BAD_COOKIE message from %s", 
d78 1
a78 1
	if ((st->retries < max_retries && 
d82 2
a83 2
	     log_print("Ignored BAD_COOKIE message from %s", address); 
	     
@


1.3
log
@update email address in copyright.
@
text
@d1 2
d39 1
a39 1
static char rcsid[] = "$Id: handle_bad_cookie.c,v 1.2 2000/12/11 21:21:17 provos Exp $";
@


1.2
log
@proper logging.
@
text
@d2 1
a2 1
 * Copyright 1997 Niels Provos <provos@@physnet.uni-hamburg.de>
d37 1
a37 1
static char rcsid[] = "$Id: handle_bad_cookie.c,v 1.1 1998/11/14 23:37:23 deraadt Exp $";
@


1.1
log
@move ipsec tools into .
@
text
@d37 1
a37 1
static char rcsid[] = "$Id: handle_bad_cookie.c,v 1.1.1.1 1997/07/18 22:48:50 provos Exp $";
d53 1
a53 1
#include "errlog.h"
d71 1
a71 1
	     log_error(0, "No state for BAD_COOKIE message from %s", 
d80 1
a80 1
	     log_error(0, "Ignored BAD_COOKIE message from %s", address); 
d88 1
a88 1
	     log_error(0, "Expired exchange on BAD_COOKIE from %s",
d98 1
a98 1
             log_error(1, "state_new() in handle_bad_cookie()");
d109 1
a109 1
	     log_error(0, "start_exchange() in handle_bad_cookie()");
@

