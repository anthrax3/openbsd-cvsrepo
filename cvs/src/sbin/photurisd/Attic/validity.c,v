head	1.6;
access;
symbols
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.1.0.8
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.6
	OPENBSD_2_7_BASE:1.1
	OPENBSD_2_6:1.1.0.4
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.2
	OPENBSD_2_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2003.03.13.00.33.47;	author deraadt;	state dead;
branches;
next	1.5;

1.5
date	2002.06.09.08.13.09;	author todd;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.28.22.45.18;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.02.50.40;	author provos;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.11.21.21.18;	author provos;	state Exp;
branches;
next	1.1;

1.1
date	98.11.14.23.37.30;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.6
log
@thought we had already deleted this
@
text
@/*	$OpenBSD: validity.c,v 1.5 2002/06/09 08:13:09 todd Exp $	*/

/*
 * Copyright 1997-2000 Niels Provos <provos@@citi.umich.edu>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Niels Provos.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * validity.c:
 * validity verification
 */

#ifndef lint
static char rcsid[] = "$OpenBSD: validity.c,v 1.5 2002/06/09 08:13:09 todd Exp $";
#endif

#define _VALIDITY_C_

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <md5.h>
#include <sha1.h>
#include "config.h"
#include "scheme.h"
#include "exchange.h"
#include "log.h"
#include "state.h"
#include "attributes.h"
#include "validity.h"
#include "identity.h"
#include "buffer.h"

int valsign(struct stateob *st, struct idxform *hash, u_int8_t *signature,
	    u_int8_t *packet, u_int16_t psize);
int valverify(struct stateob *st, struct idxform *hash, u_int8_t *signature,
	      u_int8_t *packet, u_int16_t psize);

u_int16_t
get_validity_verification_size(struct stateob *st)
{
     switch(ntohs(*((u_int16_t *)st->scheme))) {
     case DH_G_2_MD5:
     case DH_G_3_MD5:
     case DH_G_5_MD5:
     case DH_G_2_DES_MD5:
     case DH_G_3_DES_MD5:
     case DH_G_5_DES_MD5:
	  return (128/8)+2;            /* Two octets for varpre size */
     case DH_G_2_3DES_SHA1:
     case DH_G_3_3DES_SHA1:
     case DH_G_5_3DES_SHA1:
	  return (160/8)+2;
     default:
	  log_print("validitiy.c: Unknown exchange scheme: %d\n",
		    *((u_int16_t *)st->scheme));
	  return 0;
     }
}

int
create_validity_verification(struct stateob *st, u_int8_t *buffer,
			     u_int8_t *packet, u_int16_t size)
{
     struct idxform *hash;

     switch(ntohs(*((u_int16_t *)st->scheme))) {
     case DH_G_2_MD5:
     case DH_G_3_MD5:
     case DH_G_5_MD5:
     case DH_G_2_DES_MD5:
     case DH_G_3_DES_MD5:
     case DH_G_5_DES_MD5:
	  hash = get_hash(HASH_MD5);
	  break;
     case DH_G_2_3DES_SHA1:
     case DH_G_3_3DES_SHA1:
     case DH_G_5_3DES_SHA1:
          hash = get_hash(HASH_SHA1);
	  break;
     default:
          log_print("validity.c: Unknown exchange scheme: %d\n",
                    *((u_int16_t *)st->scheme));
          return 0;
     }

     if(valsign(st, hash, buffer+2, packet, size)) {
          /* Create varpre number from digest */
          buffer[0] = (hash->hashsize >> 5) & 0xFF;
          buffer[1] = (hash->hashsize << 3) & 0xFF;
     }

     state_save_verification(st, buffer, hash->hashsize+2);

     return hash->hashsize+2;
}

int
verify_validity_verification(struct stateob *st, u_int8_t *buffer,
                    u_int8_t *packet, u_int16_t size)
{
     struct idxform *hash;

     switch(ntohs(*((u_int16_t *)st->scheme))) {
     case DH_G_2_MD5:
     case DH_G_3_MD5:
     case DH_G_5_MD5:
     case DH_G_2_DES_MD5:
     case DH_G_3_DES_MD5:
     case DH_G_5_DES_MD5:
	  if (varpre2octets(buffer) != 18)
	       return 0;
	  hash = get_hash(HASH_MD5);
	  break;
     case DH_G_2_3DES_SHA1:
     case DH_G_3_3DES_SHA1:
     case DH_G_5_3DES_SHA1:
	  if (varpre2octets(buffer) != 22)
	       return 0;
	  hash = get_hash(HASH_SHA1);
	  break;
     default:
	  log_print("validity.c: Unknown exchange scheme: %d\n",
                    *((u_int16_t *)st->scheme));
          return 0;
     }

     state_save_verification(st, buffer, hash->hashsize+2);

     return valverify(st, hash, buffer+2, packet, size);
}


int
valsign(struct stateob *st, struct idxform *hash, u_int8_t *signature,
	u_int8_t *packet, u_int16_t psize)
{
     u_int8_t key[HASH_MAX];
     u_int16_t keylen = HASH_MAX;

     create_verification_key(st, key, &keylen, 1); /* Owner direction */

     hash->Init(hash->ctx);

     hash->Update(hash->ctx, key, keylen);

     hash->Update(hash->ctx, st->icookie, COOKIE_SIZE);
     hash->Update(hash->ctx, st->rcookie, COOKIE_SIZE);

     packet += 2*COOKIE_SIZE; psize -= 2*COOKIE_SIZE;
     hash->Update(hash->ctx, packet, 4 + SPI_SIZE);

     hash->Update(hash->ctx, st->oSPIidentver, st->oSPIidentversize);
     hash->Update(hash->ctx, st->uSPIidentver, st->uSPIidentversize);

     packet += 4 + SPI_SIZE + hash->hashsize + 2;
     psize -=  4 + SPI_SIZE + hash->hashsize + 2;
     hash->Update(hash->ctx, packet, psize);

     /* Data fill */
     hash->Final(NULL, hash->ctx);

     hash->Update(hash->ctx, key, keylen);
     hash->Final(signature, hash->ctx);

     return hash->hashsize;
}

/* We assume that the verification field is zeroed */

int
valverify(struct stateob *st, struct idxform *hash, u_int8_t *signature,
	  u_int8_t *packet, u_int16_t psize)
{
     u_int8_t digest[HASH_MAX];
     u_int8_t key[HASH_MAX];
     u_int16_t keylen = HASH_MAX;

     create_verification_key(st, key, &keylen, 0); /* User direction */

     hash->Init(hash->ctx);

     hash->Update(hash->ctx, key, keylen);

     hash->Update(hash->ctx, st->icookie, COOKIE_SIZE);
     hash->Update(hash->ctx, st->rcookie, COOKIE_SIZE);

     packet += 2*COOKIE_SIZE; psize -= 2*COOKIE_SIZE;
     hash->Update(hash->ctx, packet, 4 + SPI_SIZE);

     hash->Update(hash->ctx, st->uSPIidentver, st->uSPIidentversize);
     hash->Update(hash->ctx, st->oSPIidentver, st->oSPIidentversize);

     packet += 4 + SPI_SIZE + hash->hashsize + 2;
     psize -=  4 + SPI_SIZE + hash->hashsize + 2;
     hash->Update(hash->ctx, packet, psize);

     /* Data fill */
     hash->Final(NULL, hash->ctx);

     hash->Update(hash->ctx, key, keylen);
     hash->Final(digest, hash->ctx);

     return !bcmp(digest,signature,hash->hashsize);
}
@


1.5
log
@rm trailing whitespace
@
text
@d1 1
a1 1
/*	$OpenBSD: validity.c,v 1.4 2001/01/28 22:45:18 niklas Exp $	*/
d38 1
a38 1
static char rcsid[] = "$OpenBSD: validity.c,v 1.4 2001/01/28 22:45:18 niklas Exp $";
@


1.4
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d38 1
a38 1
static char rcsid[] = "$OpenBSD: validity.c,v 1.3 2000/12/15 02:50:40 provos Exp $";
d47 3
a49 3
#include <sys/socket.h> 
#include <netinet/in.h> 
#include <arpa/inet.h> 
d83 1
a83 1
	  log_print("validitiy.c: Unknown exchange scheme: %d\n", 
d90 1
a90 1
create_validity_verification(struct stateob *st, u_int8_t *buffer, 
d95 7
a101 7
     switch(ntohs(*((u_int16_t *)st->scheme))) { 
     case DH_G_2_MD5: 
     case DH_G_3_MD5: 
     case DH_G_5_MD5: 
     case DH_G_2_DES_MD5: 
     case DH_G_3_DES_MD5: 
     case DH_G_5_DES_MD5: 
d104 3
a106 3
     case DH_G_2_3DES_SHA1: 
     case DH_G_3_3DES_SHA1: 
     case DH_G_5_3DES_SHA1: 
d109 4
a112 4
     default: 
          log_print("validity.c: Unknown exchange scheme: %d\n",  
                    *((u_int16_t *)st->scheme)); 
          return 0; 
d115 5
a119 5
     if(valsign(st, hash, buffer+2, packet, size)) { 
          /* Create varpre number from digest */ 
          buffer[0] = (hash->hashsize >> 5) & 0xFF; 
          buffer[1] = (hash->hashsize << 3) & 0xFF; 
     } 
d126 4
a129 4
int 
verify_validity_verification(struct stateob *st, u_int8_t *buffer,  
                    u_int8_t *packet, u_int16_t size) 
{ 
d132 7
a138 7
     switch(ntohs(*((u_int16_t *)st->scheme))) {  
     case DH_G_2_MD5:  
     case DH_G_3_MD5:  
     case DH_G_5_MD5:  
     case DH_G_2_DES_MD5:  
     case DH_G_3_DES_MD5:  
     case DH_G_5_DES_MD5:  
d143 3
a145 3
     case DH_G_2_3DES_SHA1:  
     case DH_G_3_3DES_SHA1:  
     case DH_G_5_3DES_SHA1:  
d150 5
a154 5
     default:  
	  log_print("validity.c: Unknown exchange scheme: %d\n",   
                    *((u_int16_t *)st->scheme));  
          return 0;  
     }  
d159 1
a159 1
} 
d163 2
a164 2
valsign(struct stateob *st, struct idxform *hash, u_int8_t *signature,  
	u_int8_t *packet, u_int16_t psize) 
d170 3
a172 3
 
     hash->Init(hash->ctx); 
 
d184 1
a184 1
     packet += 4 + SPI_SIZE + hash->hashsize + 2; 
d189 1
a189 1
     hash->Final(NULL, hash->ctx); 
d192 1
a192 1
     hash->Final(signature, hash->ctx); 
d200 1
a200 1
valverify(struct stateob *st, struct idxform *hash, u_int8_t *signature,   
d208 3
a210 3
 
     hash->Init(hash->ctx); 
 
d222 1
a222 1
     packet += 4 + SPI_SIZE + hash->hashsize + 2; 
d227 1
a227 1
     hash->Final(NULL, hash->ctx); 
d230 1
a230 1
     hash->Final(digest, hash->ctx); 
@


1.3
log
@update email address in copyright.
@
text
@d1 2
d38 1
a38 1
static char rcsid[] = "$Id: validity.c,v 1.2 2000/12/11 21:21:18 provos Exp $";
@


1.2
log
@proper logging.
@
text
@d2 1
a2 1
 * Copyright 1997 Niels Provos <provos@@physnet.uni-hamburg.de>
d36 1
a36 1
static char rcsid[] = "$Id: validity.c,v 1.1 1998/11/14 23:37:30 deraadt Exp $";
@


1.1
log
@move ipsec tools into .
@
text
@d36 1
a36 1
static char rcsid[] = "$Id: validity.c,v 1.2 1997/09/02 17:26:50 provos Exp $";
d53 1
a53 1
#include "errlog.h"
d81 1
a81 1
	  log_error(0, "validitiy.c: Unknown exchange scheme: %d\n", 
d108 1
a108 1
          log_error(0, "validity.c: Unknown exchange scheme: %d\n",  
d149 1
a149 1
	  log_error(0, "validity.c: Unknown exchange scheme: %d\n",   
@

