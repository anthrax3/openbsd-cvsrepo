head	1.21;
access;
symbols
	OPENBSD_6_2:1.21.0.12
	OPENBSD_6_2_BASE:1.21
	OPENBSD_6_1:1.21.0.14
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.21.0.10
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.21.0.6
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.21.0.8
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.21.0.2
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.21.0.4
	OPENBSD_5_6_BASE:1.21
	OPENBSD_5_5:1.20.0.4
	OPENBSD_5_5_BASE:1.20
	OPENBSD_5_4:1.19.0.28
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.19.0.26
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.19.0.24
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.19
	OPENBSD_5_1:1.19.0.22
	OPENBSD_5_0:1.19.0.20
	OPENBSD_5_0_BASE:1.19
	OPENBSD_4_9:1.19.0.18
	OPENBSD_4_9_BASE:1.19
	OPENBSD_4_8:1.19.0.16
	OPENBSD_4_8_BASE:1.19
	OPENBSD_4_7:1.19.0.12
	OPENBSD_4_7_BASE:1.19
	OPENBSD_4_6:1.19.0.14
	OPENBSD_4_6_BASE:1.19
	OPENBSD_4_5:1.19.0.10
	OPENBSD_4_5_BASE:1.19
	OPENBSD_4_4:1.19.0.8
	OPENBSD_4_4_BASE:1.19
	OPENBSD_4_3:1.19.0.6
	OPENBSD_4_3_BASE:1.19
	OPENBSD_4_2:1.19.0.4
	OPENBSD_4_2_BASE:1.19
	OPENBSD_4_1:1.19.0.2
	OPENBSD_4_1_BASE:1.19
	OPENBSD_4_0:1.17.0.10
	OPENBSD_4_0_BASE:1.17
	OPENBSD_3_9:1.17.0.8
	OPENBSD_3_9_BASE:1.17
	OPENBSD_3_8:1.17.0.6
	OPENBSD_3_8_BASE:1.17
	OPENBSD_3_7:1.17.0.4
	OPENBSD_3_7_BASE:1.17
	OPENBSD_3_6:1.17.0.2
	OPENBSD_3_6_BASE:1.17
	OPENBSD_3_5:1.15.0.2
	OPENBSD_3_5_BASE:1.15
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.12.0.2
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5;
locks; strict;
comment	@# @;


1.21
date	2014.04.19.14.22.32;	author henning;	state Exp;
branches;
next	1.20;

1.20
date	2013.10.12.12.16.10;	author henning;	state Exp;
branches;
next	1.19;

1.19
date	2006.12.24.18.52.43;	author miod;	state Exp;
branches;
next	1.18;

1.18
date	2006.10.28.14.29.05;	author mcbride;	state Exp;
branches;
next	1.17;

1.17
date	2004.07.16.23.44.24;	author frantzen;	state Exp;
branches;
next	1.16;

1.16
date	2004.06.10.19.02.16;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2004.03.10.18.49.49;	author mcbride;	state Exp;
branches;
next	1.14;

1.14
date	2004.01.05.02.55.28;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	2003.08.21.19.12.08;	author frantzen;	state Exp;
branches;
next	1.12;

1.12
date	2003.01.09.17.33.19;	author henning;	state Exp;
branches;
next	1.11;

1.11
date	2003.01.03.21.37.44;	author cedric;	state Exp;
branches;
next	1.10;

1.10
date	2002.12.06.16.16.15;	author henning;	state Exp;
branches;
next	1.9;

1.9
date	2002.11.18.22.49.15;	author henning;	state Exp;
branches;
next	1.8;

1.8
date	2002.09.14.17.51.53;	author henning;	state Exp;
branches;
next	1.7;

1.7
date	2002.09.14.17.50.17;	author henning;	state Exp;
branches;
next	1.6;

1.6
date	2002.06.06.22.22.44;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	2001.07.16.22.30.47;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	2001.07.16.21.09.36;	author markus;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.26.22.38.28;	author smart;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.25.16.12.33;	author kjell;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.24.21.04.15;	author kjell;	state Exp;
branches;
next	;


desc
@@


1.21
log
@remove altq bits here, too
(i was convinced i committed that yesterday already, hrm)
@
text
@#	$OpenBSD: Makefile,v 1.20 2013/10/12 12:16:10 henning Exp $

PROG=	pfctl
SRCS=	pfctl.c parse.y pfctl_parser.c pf_print_state.c
SRCS+=	pfctl_osfp.c pfctl_radix.c pfctl_table.c
SRCS+=	pfctl_optimize.c pf_ruleset.c pfctl_queue.c
CFLAGS+= -Wall -Wmissing-prototypes -Wno-uninitialized
CFLAGS+= -Wstrict-prototypes -I${.CURDIR}
YFLAGS=
MAN=	pfctl.8

# Ruleset and Anchor handling
.PATH: ${.CURDIR}/../../sys/net

LDADD+=	-lm
DPADD+=	${LIBM}

.include <bsd.prog.mk>
@


1.20
log
@config bits for the bandwidth shaping part of the new queueing subsystem
syntax worked out with many in ljubljana using a whiteboard, testing &
looking over by many, ok phessler sthen
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.19 2006/12/24 18:52:43 miod Exp $
d4 2
a5 2
SRCS=	pfctl.c parse.y pfctl_parser.c pf_print_state.c pfctl_altq.c
SRCS+=	pfctl_osfp.c pfctl_radix.c pfctl_table.c pfctl_qstats.c
@


1.19
log
@Remove m88k compiler flags tweak which is no longer necessary since a long time
already.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.18 2006/10/28 14:29:05 mcbride Exp $
d6 1
a6 1
SRCS+=	pfctl_optimize.c pf_ruleset.c
@


1.18
log
@Load all rules into memory before loading into the kernel, and add support
for anchors loaded inline in pf.conf, enclosed in a brace-delimited
block ("{" "}").

anchor on fxp0 {
	pass in proto tcp port 22
}

The anchor name is optional on inline loaded anchors.

testing ckuethe@@
ok henning@@ dhartmei@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.17 2004/07/16 23:44:24 frantzen Exp $
a18 8

# XXX
.if (${MACHINE_ARCH} == "m88k")
parse.o: parse.y
	${YACC.y} ${.IMPSRC}
	${COMPILE.c} -fno-schedule-insns2 -o ${.TARGET} y.tab.c
	rm -f y.tab.c
.endif
@


1.17
log
@'pfctl -o' ruleset optimizer that doesnt change the meaning of the final ruleset
- remove identical and subsetted rules
- when advantageous merge rules w/ similar addresses into a table and one rule
- re-order rules to improve skip step performance (can do better w/ kernel mods)
- 'pfctl -oo' will load the currently running ruleset and use it as a profile
to direct the optimization of quicked rules
ok henning@@ mcbride@@.  man page help from jmc@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.16 2004/06/10 19:02:16 miod Exp $
d6 1
a6 1
SRCS+=	pfctl_optimize.c
d11 3
@


1.16
log
@Work around an uncovered gcc problem on m88k until it receives proper cure.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.15 2004/03/10 18:49:49 mcbride Exp $
d6 1
@


1.15
log
@Actually use SRCS+= so that we don't have a wrapped line.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.14 2004/01/05 02:55:28 espie Exp $
d15 8
@


1.14
log
@include path fixes for gcc3.
tests otto@@, okay millert@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.13 2003/08/21 19:12:08 frantzen Exp $
d4 2
a5 2
SRCS=	pfctl.c parse.y pfctl_parser.c pf_print_state.c pfctl_altq.c pfctl_osfp.c
SRCS+=	pfctl_radix.c pfctl_table.c pfctl_qstats.c
@


1.13
log
@Add Michal Zalewski's p0f v2 style passive OS fingerprinting to PF.
Exposes the source IP's operating system to the filter language.
Interesting policy decisions are now enforceable:
.	block proto tcp from any os SCO
.	block proto tcp from any os Windows to any port smtp
.	rdr ... from any os "Windows 98" to port WWW -> 127.0.0.1 port 8001
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.12 2003/01/09 17:33:19 henning Exp $
d7 1
a7 1
CFLAGS+= -Wstrict-prototypes
@


1.12
log
@first attack at pfctl queue statistics, to be displayed with pfctl -vsq

This commit is dedicated to the cute KLM girls who made part of this
possible with giving me a seat in the plane where you actually have enough
place to hack. Thanks, girls.

ok markus@@ dhartmei@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.11 2003/01/03 21:37:44 cedric Exp $
d4 1
a4 1
SRCS=	pfctl.c parse.y pfctl_parser.c pf_print_state.c pfctl_altq.c
@


1.11
log
@Bring in userland code for accessing PF radix tables.
ok dhartmei@@ mcbride@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.10 2002/12/06 16:16:15 henning Exp $
d5 1
a5 1
SRCS+=	pfctl_radix.c pfctl_table.c
@


1.10
log
@style
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.9 2002/11/18 22:49:15 henning Exp $
d5 1
@


1.9
log
@altq and pf merged

this isn't 100% done yet: the print_ stuff isn't finished, some features
will be added later, and there is no documetation yet, but committing now
enables a few more people to work on.

print_altq_node stuff hacked by Daniel at euroBSDcon; lotsa stuff from kjc,
debugging help also pb and camiel. lots of good ideas by theo.

"commit now" theo philipp daniel
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.7 2002/09/14 17:50:17 henning Exp $
d9 1
a9 1
 
@


1.8
log
@oooooooopsie
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.6 2002/06/06 22:22:44 mickey Exp $
d4 3
a6 2
SRCS=	pfctl.c parse.y pfctl_parser.c pf_print_state.c
CFLAGS+= -Wall
d9 3
@


1.7
log
@bit more clue in rdr/nat rules wrt address family examination
don't take the af from host_node structs based on interface lookups, most
interfaces will have both IPv4 and IPv6 addresses. Most rdr/nat rules will
at least have one IP address specified from whoch we take the af for the
whole rule. The rare exceptional cases require the user to specify the af.

ok frantzen@@
@
text
@d5 1
a5 2
CFLAGS+= -Wall -Werror -Wmissing-prototypes -Wno-uninitialized
CFLAGS+= -Wstrict-prototypes
@


1.6
log
@split out the pf_state printing functions to be used elsewhere, no functional change; dhartmei@@ ok
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.5 2001/07/16 22:30:47 mickey Exp $
d5 2
a6 1
CFLAGS+= -Wall
@


1.5
log
@get rid of cleanfiles by getting rid of cleanfiles; markus@@ ok
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.4 2001/07/16 21:09:36 markus Exp $
d4 1
a4 1
SRCS=	pfctl.c parse.y pfctl_parser.c
@


1.4
log
@add a yacc parser for pf.conf and nat.conf, with help from mickey@@,
plus: -n now turns off all operations, and just parses the conf files
ok deraadt@@
@
text
@d1 1
a1 4
#
#	$OpenBSD: Makefile,v 1.3 2001/06/26 22:38:28 smart Exp $

CLEANFILES+=parse.c y.tab.h
d4 3
a6 1
SRCS=	pfctl.c parse.c pfctl_parser.c
a7 4

DEBUG=-g

CFLAGS+= -Wall
@


1.3
log
@Add -Wall
@
text
@d2 3
a4 1
#	$OpenBSD: Makefile,v 1.2 2001/06/25 16:12:33 kjell Exp $
d7 1
a7 1
SRCS=	pfctl.c pfctl_parser.c
d9 2
@


1.2
log
@pfctl now has a manpage. likely needs fleshing out.
@
text
@d2 1
a2 1
#	$OpenBSD: Makefile,v 1.1 2001/06/24 21:04:15 kjell Exp $
d4 5
a8 3
PROG = pfctl
SRCS = pfctl.c pfctl_parser.c
MAN = pfctl.8
@


1.1
log
@Move and rename packet filter userland.
grr. CVS: making easy things difficult, and directory operations impossible.
@
text
@d2 1
a2 1
#	$OpenBSD: Makefile,v 1.1 2001/06/24 20:18:12 kjell Exp $
d6 1
a6 1
MAN=
@

