head	1.13;
access;
symbols
	OPENBSD_6_1:1.13.0.18
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.16
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.12
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.14
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.6
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.10
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.8
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.4
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.2
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.12.0.12
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.10
	OPENBSD_5_0:1.12.0.8
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.6
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.4
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.11.0.20
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.16
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.14
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.12
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.10
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.8
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.6
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.4
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.2
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.10.0.12
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.10
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.8
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.6
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.10.0.4
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.2
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.7.0.20
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.7.0.18
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_8:1.7.0.16
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.14
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.7.0.12
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.10
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.7.0.8
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.7.0.6
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.7.0.4
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.7.0.2
	OPENBSD_2_1_BASE:1.7
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2012.12.04.02.27.00;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2009.10.27.23.59.34;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2005.04.20.13.05.51;	author jmc;	state Exp;
branches;
next	1.10;

1.10
date	2002.07.03.22.32.34;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2002.05.29.19.23.34;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2002.02.16.21.27.38;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	97.03.04.05.48.00;	author tholo;	state Exp;
branches;
next	1.6;

1.6
date	97.01.15.23.41.44;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	96.10.30.08.17.05;	author tholo;	state Exp;
branches;
next	1.4;

1.4
date	96.08.30.00.53.26;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.06.23.14.32.48;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.04.21.23.47.38;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.43.51;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.43.51;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.13
log
@remove some unnecessary sys/cdefs.h inclusions
@
text
@/*	$OpenBSD: ttyflags.c,v 1.12 2009/10/27 23:59:34 deraadt Exp $	*/
/*	$NetBSD: ttyflags.c,v 1.8 1996/04/09 05:20:30 cgd Exp $	*/

/*
 * Copyright (c) 1996 Theo de Raadt
 * Copyright (c) 1994 Christopher G. Demetriou
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Christopher G. Demetriou.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/ioctl.h>

#include <err.h>
#include <errno.h>
#include <fcntl.h>
#include <limits.h>
#include <paths.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ttyent.h>
#include <unistd.h>

int all(int);
int ttys(char **, int);
int ttyflags(struct ttyent *, int);
void usage(void);

int nflag, vflag;

/*
 * Ttyflags sets the device-specific tty flags, based on the contents
 * of /etc/ttys.  It can either set all of the ttys' flags, or set
 * the flags of the ttys specified on the command line.
 */
int
main(int argc, char *argv[])
{
	int aflag, ch, rval, pflag = 0;

	aflag = nflag = vflag = 0;
	while ((ch = getopt(argc, argv, "panv")) != -1)
		switch (ch) {
		case 'a':
			aflag = 1;
			break;
		case 'n':		/* undocumented */
			nflag = 1;
			break;
		case 'p':
			pflag = 1;
			break;
		case 'v':
			vflag = 1;
			break;
		case '?':
		default:
			usage();
		}
	argc -= optind;
	argv += optind;

	if (aflag && argc != 0)
		usage();

	if (setttyent() == 0)
		err(1, "setttyent");

	if (aflag)
		rval = all(pflag);
	else
		rval = ttys(argv, pflag);

	if (endttyent() == 0)
		warn("endttyent");

	exit(rval);
}

/*
 * Change all /etc/ttys entries' flags.
 */
int
all(int print)
{
	struct ttyent *tep;
	int rval;

	rval = 0;
	for (tep = getttyent(); tep != NULL; tep = getttyent())
		if (ttyflags(tep, print))
			rval = 1;
	return (rval);
}

/*
 * Change the specified ttys' flags.
 */
int
ttys(char **ttylist, int print)
{
	struct ttyent *tep;
	int rval;

	rval = 0;
	for (; *ttylist != NULL; ttylist++) {
		tep = getttynam(*ttylist);
		if (tep == NULL) {
			warnx("couldn't find an entry in %s for \"%s\"",
			    _PATH_TTYS, *ttylist);
			rval = 1;
			continue;
		}

		if (ttyflags(tep, print))
			rval = 1;
	}
	return (rval);
}


/*
 * Actually do the work; find out what the new flags value should be,
 * open the device, and change the flags.
 */
int
ttyflags(struct ttyent *tep, int print)
{
	int fd, flags = 0, rval = 0, st, sep = 0;
	char path[PATH_MAX];
	char strflags[256];

	st = tep->ty_status;
	strflags[0] = '\0';

	/* Find the full device path name. */
	(void)snprintf(path, sizeof path, "%s%s", _PATH_DEV, tep->ty_name);

	if (print == 0) {
		/* Convert ttyent.h flags into ioctl flags. */
		if (st & TTY_LOCAL) {
			flags |= TIOCFLAG_CLOCAL;
			(void)strlcat(strflags, "local", sizeof strflags);
			sep++;
		}
		if (st & TTY_RTSCTS) {
			flags |= TIOCFLAG_CRTSCTS;
			if (sep++)
				(void)strlcat(strflags, "|", sizeof strflags);
			(void)strlcat(strflags, "rtscts", sizeof strflags);
		}
		if (st & TTY_SOFTCAR) {
			flags |= TIOCFLAG_SOFTCAR;
			if (sep++)
				(void)strlcat(strflags, "|", sizeof strflags);
			(void)strlcat(strflags, "softcar", sizeof strflags);
		}
		if (st & TTY_MDMBUF) {
			flags |= TIOCFLAG_MDMBUF;
			if (sep++)
				(void)strlcat(strflags, "|", sizeof strflags);
			(void)strlcat(strflags, "mdmbuf", sizeof strflags);
		}
		if (vflag)
			printf("%s setting flags to: %s\n", path, strflags);
	}

	if (nflag)
		return (0);

	/* Open the device NON-BLOCKING, set the flags, and close it. */
	if ((fd = open(path, O_RDONLY | O_NONBLOCK, 0)) == -1) {
		if (!(errno == ENXIO ||
		      (errno == ENOENT && (st & TTY_ON) == 0)))
			rval = 1;
		if (vflag)
			warn("open %s", path);
		return (rval);
	}
	if (print == 0) {
		if (ioctl(fd, TIOCSFLAGS, &flags) == -1)
			if (errno != ENOTTY || vflag) {
				warn("TIOCSFLAGS on %s", path);
				rval = (errno != ENOTTY);
			}
	} else {
		if (ioctl(fd, TIOCGFLAGS, &flags) == -1)
			if (errno != ENOTTY || vflag) {
				warn("TIOCGFLAGS on %s", path);
				rval = (errno != ENOTTY);
			}
		if (flags & TIOCFLAG_CLOCAL) {
			(void)strlcat(strflags, "local", sizeof strflags);
			sep++;
		}
		if (flags & TIOCFLAG_CRTSCTS) {
			if (sep++)
				(void)strlcat(strflags, "|", sizeof strflags);
			(void)strlcat(strflags, "rtscts", sizeof strflags);
		}
		if (flags & TIOCFLAG_SOFTCAR) {
			if (sep++)
				(void)strlcat(strflags, "|", sizeof strflags);
			(void)strlcat(strflags, "softcar", sizeof strflags);
		}
		if (flags & TIOCFLAG_MDMBUF) {
			if (sep++)
				(void)strlcat(strflags, "|", sizeof strflags);
			(void)strlcat(strflags, "mdmbuf", sizeof strflags);
		}
		printf("%s flags are: %s\n", path, strflags);
	}
	if (close(fd) == -1) {
		warn("close %s", path);
		return (1);
	}
	return (rval);
}

/*
 * Print usage information when a bogus set of arguments is given.
 */
void
usage(void)
{
	(void)fprintf(stderr, "usage: ttyflags [-pv] [-a | tty ...]\n");
	exit(1);
}
@


1.12
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: ttyflags.c,v 1.11 2005/04/20 13:05:51 jmc Exp $	*/
a35 1
#include <sys/cdefs.h>
@


1.11
log
@simplify synopsis somewhat, sort options, and sync usage();
@
text
@d1 1
a1 1
/*	$OpenBSD: ttyflags.c,v 1.10 2002/07/03 22:32:34 deraadt Exp $	*/
a33 10

#ifndef lint
char copyright[] =
"@@(#) Copyright (c) 1994 Christopher G. Demetriou\n\
	All rights reserved.\n";
#endif /* not lint */

#ifndef lint
static char rcsid[] = "$OpenBSD: ttyflags.c,v 1.10 2002/07/03 22:32:34 deraadt Exp $";
#endif /* not lint */
@


1.10
log
@ansi
@
text
@d1 1
a1 1
/*	$OpenBSD: ttyflags.c,v 1.9 2002/05/29 19:23:34 deraadt Exp $	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD: ttyflags.c,v 1.9 2002/05/29 19:23:34 deraadt Exp $";
d262 1
a262 1
	(void)fprintf(stderr, "usage: ttyflags [-v] [-p] [-a | tty ... ]\n");
@


1.9
log
@more strlcat
@
text
@d1 1
a1 1
/*	$OpenBSD: ttyflags.c,v 1.8 2002/02/16 21:27:38 millert Exp $	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD: ttyflags.c,v 1.8 2002/02/16 21:27:38 millert Exp $";
d73 1
a73 3
main(argc, argv)
	int argc;
	char *argv[];
d120 1
a120 2
all(print)
	int print;
d136 1
a136 3
ttys(ttylist, print)
	char **ttylist;
	int print;
d163 1
a163 3
ttyflags(tep, print)
	struct ttyent *tep;
	int print;
d260 1
a260 1
usage()
@


1.8
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: ttyflags.c,v 1.7 1997/03/04 05:48:00 tholo Exp $	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD: ttyflags.c,v 1.7 1997/03/04 05:48:00 tholo Exp $";
d186 1
a186 1
			(void)strcat(strflags, "local");
d192 2
a193 2
				(void)strcat(strflags, "|");
			(void)strcat(strflags, "rtscts");
d198 2
a199 2
				(void)strcat(strflags, "|");
			(void)strcat(strflags, "softcar");
d204 2
a205 2
				(void)strcat(strflags, "|");
			(void)strcat(strflags, "mdmbuf");
d236 1
a236 1
			(void)strcat(strflags, "local");
d241 2
a242 2
				(void)strcat(strflags, "|");
			(void)strcat(strflags, "rtscts");
d246 2
a247 2
				(void)strcat(strflags, "|");
			(void)strcat(strflags, "softcar");
d251 2
a252 2
				(void)strcat(strflags, "|");
			(void)strcat(strflags, "mdmbuf");
@


1.7
log
@Initialize path earlier so we never try to use it before it has been
initialized; from Time Pierce <twpierce@@mail.bsd.uchicago.edu>
@
text
@d1 1
a1 1
/*	$OpenBSD: ttyflags.c,v 1.6 1997/01/15 23:41:44 millert Exp $	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD: ttyflags.c,v 1.6 1997/01/15 23:41:44 millert Exp $";
d60 4
a63 4
int all __P((int));
int ttys __P((char **, int));
int ttyflags __P((struct ttyent *, int));
void usage __P((void));
@


1.6
log
@getopt(3) returns -1 when out of args, not EOF, whee!
@
text
@d1 1
a1 1
/*	$OpenBSD: ttyflags.c,v 1.5 1996/10/30 08:17:05 tholo Exp $	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD: ttyflags.c,v 1.5 1996/10/30 08:17:05 tholo Exp $";
d179 3
a210 3
	/* Find the full device path name. */
	(void)snprintf(path, sizeof path, "%s%s", _PATH_DEV, tep->ty_name);

d232 1
a232 1
				warn("TIOCSFLAGS on %s", path);
@


1.5
log
@Really set flags...
@
text
@d1 1
a1 1
/*	$OpenBSD: ttyflags.c,v 1.4 1996/08/30 00:53:26 deraadt Exp $	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD: ttyflags.c,v 1.4 1996/08/30 00:53:26 deraadt Exp $";
d80 1
a80 1
	while ((ch = getopt(argc, argv, "panv")) != EOF)
@


1.4
log
@add -p for printing; cleanup error handling
@
text
@d1 1
a1 1
/*	$OpenBSD: ttyflags.c,v 1.3 1996/06/23 14:32:48 deraadt Exp $	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD: ttyflags.c,v 1.3 1996/06/23 14:32:48 deraadt Exp $";
d172 1
a172 1
	int fd, flags = 0, rval, st = 0, sep = 0;
d174 4
a177 1
	char strflags[256] = "";
@


1.3
log
@update rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: ttyflags.c,v 1.8 1996/04/09 05:20:30 cgd Exp $	*/
d5 1
d42 1
a42 1
static char rcsid[] = "$OpenBSD: ttyflags.c,v 1.8 1996/04/09 05:20:30 cgd Exp $";
d60 3
a62 3
int change_all __P((void));
int change_ttyflags __P((struct ttyent *));
int change_ttys __P((char **));
d77 1
a77 1
	int aflag, ch, rval;
d80 1
a80 1
	while ((ch = getopt(argc, argv, "anv")) != EOF)
d88 3
a103 2
	rval = 0;

d108 1
a108 1
		rval = change_all();
d110 1
a110 1
		rval = change_ttys(argv);
d122 2
a123 1
change_all()
d130 1
a130 1
		if (change_ttyflags(tep))
d139 1
a139 1
change_ttys(ttylist)
d141 1
d156 1
a156 1
		if (change_ttyflags(tep))
d168 1
a168 1
change_ttyflags(tep)
d170 1
d172 1
a172 1
	int fd, flags, rval, st, sep;
d174 1
a174 1
	char strflags[256];
d176 27
a202 10
	st = tep->ty_status;
	sep = flags = rval = 0;
	strflags[0] = '\0';


	/* Convert ttyent.h flags into ioctl flags. */
	if (st & TTY_LOCAL) {
		flags |= TIOCFLAG_CLOCAL;
		(void)strcat(strflags, "local");
		sep++;
a203 21
	if (st & TTY_RTSCTS) {
		flags |= TIOCFLAG_CRTSCTS;
		if (sep++)
			(void)strcat(strflags, "|");
		(void)strcat(strflags, "rtscts");
	}
	if (st & TTY_SOFTCAR) {
		flags |= TIOCFLAG_SOFTCAR;
		if (sep++)
			(void)strcat(strflags, "|");
		(void)strcat(strflags, "softcar");
	}
	if (st & TTY_MDMBUF) {
		flags |= TIOCFLAG_MDMBUF;
		if (sep++)
			(void)strcat(strflags, "|");
		(void)strcat(strflags, "mdmbuf");
	}

	if (strflags[0] == '\0')
		(void)strcpy(strflags, "none");
a207 2
	if (vflag)
		warnx("setting flags on %s to %s", path, strflags);
d216 1
a216 1
		if (rval || vflag)
d220 15
a234 4
	if (ioctl(fd, TIOCSFLAGS, &flags) == -1)
		if (errno != ENOTTY || vflag) {
			warn("TIOCSFLAGS on %s", path);
			rval = (errno != ENOTTY);
d236 17
d266 1
a266 1
	(void)fprintf(stderr, "usage: ttyflags [-v] [-a | tty ... ]\n");
@


1.2
log
@sync to netbsd 960418
@
text
@d1 1
d41 1
a41 1
static char rcsid[] = "$NetBSD: ttyflags.c,v 1.8 1996/04/09 05:20:30 cgd Exp $";
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: ttyflags.c,v 1.6 1995/08/13 05:24:03 cgd Exp $	*/
d40 1
a40 1
static char rcsid[] = "$NetBSD: ttyflags.c,v 1.6 1995/08/13 05:24:03 cgd Exp $";
d54 1
d157 1
d159 1
a159 1
 * Acutually do the work; find out what the new flags value should be,
d166 1
a166 1
	int fd, flags, rval, st;
d168 1
d171 3
a173 1
	flags = rval = 0;
d176 1
a176 1
	if (st & TTY_LOCAL)
d178 4
a181 1
	if (st & TTY_RTSCTS)
d183 5
a187 1
	if (st & TTY_SOFTCAR)
d189 5
a193 1
	if (st & TTY_MDMBUF)
d195 7
d207 1
a207 1
		warnx("setting flags on %s to %0x", path, flags);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
