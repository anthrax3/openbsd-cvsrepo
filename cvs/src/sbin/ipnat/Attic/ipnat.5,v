head	1.19;
access;
symbols
	OPENBSD_2_9:1.18.0.2
	OPENBSD_2_9_BASE:1.18
	OPENBSD_2_8:1.15.0.4
	OPENBSD_2_8_BASE:1.15
	OPENBSD_2_7:1.15.0.2
	OPENBSD_2_7_BASE:1.15
	OPENBSD_2_6:1.11.0.2
	OPENBSD_2_6_BASE:1.11
	OPENBSD_2_5:1.6.0.4
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3;
locks; strict;
comment	@# @;


1.19
date	2001.05.30.02.11.48;	author deraadt;	state dead;
branches;
next	1.18;

1.18
date	2001.03.09.18.16.44;	author marc;	state Exp;
branches;
next	1.17;

1.17
date	2001.01.20.20.16.10;	author fgsch;	state Exp;
branches;
next	1.16;

1.16
date	2001.01.17.07.43.33;	author fgsch;	state Exp;
branches;
next	1.15;

1.15
date	2000.04.26.21.04.00;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2000.04.13.19.59.39;	author kjell;	state Exp;
branches;
next	1.13;

1.13
date	2000.03.18.22.55.59;	author aaron;	state Exp;
branches;
next	1.12;

1.12
date	2000.01.24.07.27.02;	author kjell;	state Exp;
branches;
next	1.11;

1.11
date	99.10.12.05.07.42;	author ericj;	state Exp;
branches;
next	1.10;

1.10
date	99.07.09.13.35.49;	author aaron;	state Exp;
branches;
next	1.9;

1.9
date	99.07.07.10.50.11;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	99.07.02.20.11.46;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	99.06.18.01.44.19;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	98.09.15.09.57.29;	author pattonme;	state Exp;
branches;
next	1.5;

1.5
date	98.01.26.04.13.48;	author dgregor;	state Exp;
branches;
next	1.4;

1.4
date	97.02.11.22.24.18;	author kstailey;	state Exp;
branches;
next	1.3;

1.3
date	96.07.18.05.08.38;	author dm;	state Exp;
branches;
next	1.2;

1.2
date	96.06.23.14.31.01;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	96.05.10.21.39.55;	author dm;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Remove ipf.  Darren Reed has interpreted his (old, new, whichever)
licence in a way that makes ipf not free according to the rules we
established over 5 years ago, at www.openbsd.org/goals.html (and those
same basic rules govern the other *BSD projects too).  Specifically,
Darren says that modified versions are not permitted.  But software
which OpenBSD uses and redistributes must be free to all (be they
people or companies), for any purpose they wish to use it, including
modification, use, peeing on, or even integration into baby mulching
machines or atomic bombs to be dropped on Australia.  Furthermore, we
know of a number of companies using ipf with modification like us, who
are now in the same situation, and we hope that some of them will work
with us to fill this gap that now exists in OpenBSD (temporarily, we
hope).
@
text
@.\"	$OpenBSD: ipnat.5,v 1.18 2001/03/09 18:16:44 marc Exp $
.\"
.TH IPNAT 5
.SH NAME
ipnat \- IP NAT file format
.SH DESCRIPTION
The format for files accepted by ipnat is described by the following grammar:
.LP
.nf
ipmap :: = mapblock | redir | map .

map ::= mapit ifname ipmask "->" ipmask [ mapport ] .
map ::= mapit ifname fromto "->" ipmask [ mapport ] .
mapblock ::= "map-block" ifname ipmask "->" ipmask [ ports ] .
redir ::= "rdr" ifname ipmask dport "->" ip [ "," ip ] [ ports ] options .

dport ::= "port" portnum [ "-" portnum ] .
ports ::= "ports" numports | "auto" .
mapit ::= "map" | "bimap" .
fromto ::= "from" object "to" object .
ipmask ::= ip "/" bits | ip "/" mask | ip "netmask" mask .
mapport ::= "portmap" tcpudp portnumber ":" portnumber .
options ::= [ tcpudp ] [ rr ] .

object  = addr [ port-comp | port-range ] .
addr    = "any" | nummask | host-name [ "mask" ipaddr | "mask" hexnumber ] .
port-comp = "port" compare port-num .
port-range = "port" port-num range port-num .

rr ::= "round-robin" .
tcpudp ::= "tcp" | "udp" | "tcp/udp" .
portnumber ::= number { numbers } | "auto" .
ifname ::= 'A' - 'Z' { 'A' - 'Z' } numbers .

numbers ::= '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' .
.fi
.PP
For standard NAT functionality, a rule should start with \fBmap\fP and then
proceeds to specify the interface for which outgoing packets will have their
source address rewritten.
.PP
Packets which will be rewritten can only be selected by matching the original
source address.  A netmask must be specified with the IP address.
.PP
The address selected for replacing the original is chosen from an IP#/netmask
pair.  A netmask of all 1's indicating a hostname is valid.  A netmask of
31 1's (255.255.255.254) is considered invalid as there is no space for
allocating host IP#'s after consideration for broadcast and network
addresses.
.PP
When remapping TCP and UDP packets, it is also possible to change the source
port number.  Either TCP or UDP or both can be selected by each rule, with a
range of port numbers to remap into given as \fBport-number:port-number\fP.
.SH COMMANDS
There are four commands recognised by IP Filter's NAT code:
.TP
.B map
that is used for mapping one address or network to another in an unregulated
round robin fashion;
.TP
.B rdr
that is used for redirecting packets to one IP address and port pair to
another;
.TP
.B bimap
for setting up bidirectional NAT between an external IP address and an internal
IP address and
.TP
.B map-block
which sets up static IP address based translation, based on a algorithm to
squeeze the addresses to be translated into the destination range.
.SH MATCHING
.PP
For basic NAT and redirection of packets, the address subject to change is used
along with its protocol to check if a packet should be altered.  The packet
\fImatching\fP part of the rule is to the left of the "->" in each rule.
.PP
Matching of packets has now been extended to allow more complex compares.
In place of the address which is to be translated, an IP address and port
number comparison can be made using the same expressions available with
\fBipf\fP.  A simple NAT rule could be written as:
.LP
.nf
map de0 10.1.0.0/16 -> 201.2.3.4/32
.fi
.LP
or as
.LP
.nf
map de0 from 10.1.0.0/16 to any -> 201.2.3.4/32
.fi
.LP
Only IP address and port numbers can be compared against.  This is available
with all NAT rules.
.SH TRANSLATION
.PP
To the right of the "->" is the address and port specificaton which will be
written into the packet providing it has already successful matched the
prior constraints.  The case of redirections (\fBrdr\fP) is the simpliest:
the new destination address is that specified in the rule.  For \fBmap\fP
rules, the destination address will be one for which the tuple combining
the new source and destination is known to be unique.  If the packet is
either a TCP or UDP packet, the destination and source ports come into the
equation too.  If the tuple already exists, IP Filter will increment the
port number first, within the available range specified with \fBportmap\fP
and if there exists no unique tuple, the source address will be incremented
within the specified netmask.  If a unique tuple cannot be determined, then
the packet will not be translated.  The \fBmap-block\fP is more limited in
how it searches for a new, free and unique tuple, in that it will used an
algorithm to determine what the new source address should be, along with the
range of available ports - the IP address is never changed and nor does the
port number ever exceed its alloted range.
.SH KERNEL PROXIES
.PP
IP Filter comes with a few, simple, proxies built into the code that is loaded
into the kernel to allow secondary channels to be opened without forcing the
packets through a user program.
.SH TRNSPARENT PROXIES
.PP
True transparent proxying should be performed using the redirect (\fBrdr\fP)
rules directing ports to localhost (127.0.0.1) with the proxy program doing
a lookup through \fB/dev/ipnat\fP to determine the real source and address
of the connection.
.SH LOAD-BALANCING
.PP
Two options for use with \fBrdr\fP are available to support primitive,
\fIround-robin\fP based load balancing.  The first option allows for a
\fBrdr\fP to specify a second destination, as follows:
.LP
.nf
rdr le0 203.1.2.3/32 port 80 -> 203.1.2.3,203.1.2.4 port 80 tcp
.fi
.LP
This would send alternate connections to either 203.1.2.3 or 203.1.2.4.
In scenarios where the load is being spread amongst a larger set of
servers, you can use:
.LP
.nf
rdr le0 203.1.2.3/32 port 80 -> 203.1.2.3,203.1.2.4 port 80 tcp round-robin
rdr le0 203.1.2.3/32 port 80 -> 203.1.2.5 port 80 tcp round-robin
.fi
.LP
In this case, a connection will be redirected to 203.1.2.3, then 203.1.2.4
and then 203.1.2.5 before going back to 203.1.2.3.  In accomplishing this,
the rule is removed from the top of the list and added to the end,
automatically, as required.  This will not effect the display of rules
using "ipnat -l", only the internal application order.
.SH EXAMPLES
.PP
This section deals with the \fBmap\fP command and it's variations.
.PP
To change IP#'s used internally from network 10 into an ISP provided 8 bit
subnet at 209.1.2.0 through the ppp0 interface, the following would be used:
.LP
.nf
map ppp0 10.0.0.0/8 -> 209.1.2.0/24
.fi
.PP
The obvious problem here is we're trying to squeeze over 16,000,000 IP
addresses into a 254 address space.  To increase the scope, remapping for TCP
and/or UDP, port remapping can be used;
.LP
.nf
map ppp0 10.0.0.0/8 -> 209.1.2.0/24 portmap tcp/udp 1025:65000
.fi
.PP
which falls only 527,566 `addresses' short of the space available in network
10.  If we were to combine these rules, they would need to be specified as
follows:
.LP
.nf
map ppp0 10.0.0.0/8 -> 209.1.2.0/24 portmap tcp/udp 1025:65000
map ppp0 10.0.0.0/8 -> 209.1.2.0/24
.fi
.PP
so that all TCP/UDP packets were port mapped and only other protocols, such as
ICMP, only have their IP# changed.  In some instaces, it is more appropriate
to use the keyword \fBauto\fP in place of an actual range of port numbers if
you want to guarantee simultaneous access to all within the given range.
However, in the above case, it would default to 1 port per IP address, since
we need to squeeze 24 bits of address space into 8.  A good example of how
this is used might be:
.LP
.nf
map ppp0 172.192.0.0/16 -> 209.1.2.0/24 portmap tcp/udp auto
.fi
.PP
which would result in each IP address being given a small range of ports to
use (252).  The problem here is that the \fBmap\fP directive tells the NAT
code to use the next address/port pair available for an outgoing connection,
resulting in no easily discernable relation between external addresses/ports
and internal ones.  This is overcome by using \fBmap-block\fP as follows:
.LP
.nf
map-block ppp0 172.192.0.0/16 -> 209.1.2.0/24 ports auto
.fi
.PP
For example, this would result in 172.192.0.0/24 being mapped to 209.1.2.0/32
with each address, from 172.192.0.0 to 172.192.0.255 having 252 ports of its
own.  As opposed to the above use of \fBmap\fP, if for some reason the user
of (say) 172.192.0.2 wanted 260 simultaneous connections going out, they would
be limited to 252 with \fBmap-block\fP but would just \fImove on\fP to the next
IP address with the \fBmap\fP command.
.SH FILES
/dev/ipnat
.br
/etc/services
.br
/etc/hosts
.SH SEE ALSO
ipnat(4), hosts(5), ipf(5), services(5), ipf(8), ipnat(8)
@


1.18
log
@add missing sub-header
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipnat.5,v 1.17 2001/01/20 20:16:10 fgsch Exp $
@


1.17
log
@fix cut & pasto error from previous commit.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipnat.5,v 1.16 2001/01/17 07:43:33 fgsch Exp $
d204 1
@


1.16
log
@nice page to start with; load balancing added here.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipnat.5,v 1.15 2000/04/26 21:04:00 deraadt Exp $
d15 1
a15 1
redir ::= "rdr" ifname [ fromspec ] ipmask "->" ip [ ports ] [ tcpudp ] .
@


1.15
log
@no, that is wrong
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipnat.5,v 1.14 2000/04/13 19:59:39 kjell Exp $
d13 1
d16 2
d20 1
d23 6
d30 1
a30 1
fromspec ::= "from" ip "/" ipmask .
d75 20
a94 4
along with its protocol to check if a packet should be altered.  In the case
of redirects, it is also possible to select packets on a source address basis
using the \fBfrom\fP keyword, as well as the manditory destination port.  The
packet \fImatching\fP part of the rule is to the left of the "->" in each rule.
d124 24
@


1.14
log
@Long overdue documentation update for IPFilter. These
are taken directly from the ipf distribution, and are
not mandoc'ed. ipf(8), ipfstat(8), and ipnat(8) are yet
to go and must be done manually. (sigh)
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d5 1
a5 1
ipnat, ipnat.conf \- IP NAT file format
@


1.13
log
@Remove hard sentence breaks, and some other cleanup along the way.
@
text
@d1 105
a105 89
.\"      $OpenBSD: ipnat.5,v 1.12 2000/01/24 07:27:02 kjell Exp $
.Dd June 5, 1999
.Dt IPNAT 5
.Os
.Sh NAME
.Nm ipnat
.Nd IP NAT file format
.Sh DESCRIPTION
Files processed by
.Xr ipnat 8
are normal text files containing either a valid NAT rule or a comment on each
non-blank line.
Comment lines begin with a
.Ql #
and are ignored, as are blank lines.
Valid NAT rules are described by the following grammar:
.Bd -literal -offset indent
natrule     ::= maprule | rdrrule | bimaprule

maprule     ::= "map" ifname source "->" destination [mapoption]
rdrrule     ::= "rdr" ifname destination port "->" target
bimaprule   ::= "bimap" ifname source "->" destination

source      ::= destination
destination ::= host "/" mask
target      ::= host "port" port porttype

portrange   ::= port ":" port
portmap     ::= "portmap" porttype portrange
proxy       ::= "proxy port" port [ "/" protocol ]
mapoption   ::= proxy | portmap

porttype    ::= "tcp" | "udp" | "tcpudp" | "tcp/udp"

protocol    ::= <name from /etc/protocols> | <# from /etc/protocols>
port        ::= <unsigned 16 bit value> | <name from /etc/services>
host        ::= 'any' | <IP addr> | <interface name> | <host name>
mask        ::= <non-numeric> | <IP addr> | <hex value> | <bit count>
ifname      ::= <interface name>
.Ed
.Pp
Elements in a rule are usually separated by whitespace (blanks or tabs).
In the case of the
.Ql \&/
in
.Fa host
rule or the
.Ql \&:
in the
.Fa portrange
rule, there must be no whitespace before or after it.
In the case of the
.Ql \&/
in the
.Fa proxy
rule there must be whitespace before but no whitespace after.
.Pp
In the
.Fa host
and
.Fa mask
rules, the alternatives are evaluated in the order given.
.Pp
For the
.Fa mask
rule, if the element begins with a non-digit the mask is taken to be all zeros.
A
.Ql \&.
in the element causes the element to be interpreted as a numeric IP
address of the form 1.2.3.4.
An
.Ql x
in the element causes the element to be interpreted as a 32 bit hex value.
If all
else fails the element is interpreted as the number of sequential 1's to place
as the most significant bits in the 32 bit network mask.
Whatever the interpretation method, a result network mask of all 1's, indicating a
hostname, is valid.
A network mask of 31 1's (255.255.255.254)
is considered invalid as there is no space for allocating host
.Tn IP Ns #\&'s
after consideration for broadcast and network addresses.
.Sh EXAMPLES
To change
.Tn IP
numbers used internally from network 10 into an ISP provided 8-bit
subnet at 209.1.2.0 through the ppp0 interface,
the following would be used:
.Bd -literal -offset indent
d107 7
a113 11
.Ed
.Pp
The obvious problem here is we're trying to squeeze over 16,000,000
.Tn IP
addresses into a 254 address space.
To increase the scope, remapping for
.Tn TCP
and/or
.Tn UDP ,
port remapping can be used:
.Bd -literal -offset indent
d115 4
a118 6
.Ed
.Pp
which falls only 527,566
.Sq addresses
short of the space available in network 10.
If we were to combine these rules, they would need to be specified as
d120 2
a121 1
.Bd -literal -offset indent
d124 37
a160 41
.Ed
.Pp
so that all
.Tn TCP Ns / Tn UDP
packets were port mapped and other protocols, such as
.Tn ICMP ,
have only their
.Tn IP Ns #
changed.
.Pp
Further examples can be found in the file
.Pa \&/use\&/share\&/ipf\&/nat\&.1
.Sh FILES
.Bl -tag -width "/usr/share/ipf/nat.1" -compact
.It Pa /dev/ipnat
.It Pa /etc/services
.It Pa /etc/protocols
.It Pa /etc/hosts
.It Pa /usr/share/ipf/nat.1
example rules
.It Pa /usr/share/ipf/nat.2
system requirements for use of NAT
.It Pa /etc/ipnat.rules
actual rule list
.El
.Sh SEE ALSO
.Xr ipf 8 ,
.Xr ipftest 1 ,
.Xr ipf 4 ,
.Xr ipl 4 ,
.Xr ipnat 4 ,
.Xr hosts 5 ,
.Xr ipf 5 ,
.Xr services 5
.Xr protocols 5
.Xr ipfstat 8 ,
.Xr ipmon 8 ,
.Xr ipnat 8
.Pp
http://coombs.anu.edu.au/~avalon

@


1.12
log
@Correct Xrs. marc@@snafu.org
@
text
@d1 1
a1 1
.\"      $OpenBSD: ipnat.5,v 1.11 1999/10/12 05:07:42 ericj Exp $
d12 2
a13 1
non-blank line. Comment lines begin with a
d15 2
a16 2
and are ignored, as are blank lines. Valid NAT rules
are described by the following grammar:
d51 2
a52 2
rule, there must be no whitespace before or after it. In the case
of the
d70 2
a71 1
address of the form 1.2.3.4. An
d73 2
a74 1
in the element causes the element to be interpreted as a 32 bit hex value. If all
d78 2
a79 1
hostname, is valid.  A network mask of 31 1's (255.255.255.254)
d95 2
a96 1
addresses into a 254 address space. To increase the scope, remapping for
d107 2
a108 2
short of the space available in network
10.  If we were to combine these rules, they would need to be specified as
@


1.11
log
@fix ipfilter url for ipnat pages also
@
text
@d1 1
a1 1
.\"      $OpenBSD: ipnat.5,v 1.10 1999/07/09 13:35:49 aaron Exp $
d134 1
a134 1
.Xr ipf 1 ,
@


1.10
log
@- remove all trailing whitespace
     * except when it is escaped with a `\' at the end of the line
- fix remaining .Nm usage as well
- this is from a patch I received from kwesterback@@home.com, who has been
  working on some scripts for fixing formatting errors in mdoc'd man pages

Ok, so there could be a cost/benefit debate with this commit, but since I have
the patch we might as well commit it...
@
text
@d1 1
a1 1
.\"      $OpenBSD: ipnat.5,v 1.9 1999/07/07 10:50:11 aaron Exp $
d147 1
a147 1
http://coombs.anu.edu.au/ipfilter/
@


1.9
log
@The proper order of the ``introductory'' macros in a man page is .Dd/.Dt/.Os.
Out of the approximately 1450 man pages, only about 90 of them were wrong.
Thanks to kwesterback@@home.com for coming up with a script and patch to repair
this. The patch also inserted a .Os macro in the few man pages that were
missing one.
@
text
@d1 1
a1 1
.\"      $OpenBSD: ipnat.5,v 1.8 1999/07/02 20:11:46 aaron Exp $
d42 1
a42 1
In the case of the 
d46 1
a46 1
rule or the 
d51 1
a51 1
of the 
d59 1
a59 1
and 
d69 1
a69 1
address of the form 1.2.3.4. An 
d73 1
a73 1
as the most significant bits in the 32 bit network mask. 
@


1.8
log
@consistent .Dd usage; proper format is: .Dd Month DD, YYYY
@
text
@d1 1
a1 1
.\"      $OpenBSD: ipnat.5,v 1.7 1999/06/18 01:44:19 aaron Exp $
d3 1
a4 1
.Dt IPNAT 5
@


1.7
log
@new ipnat(4) and ipnat(5) mdoc-style man pages; kwesterback@@home.com
@
text
@d1 2
a2 2
.\"      $OpenBSD: ipnat.5,v 1.6 1998/09/15 09:57:29 pattonme Exp $
.Dd 5 June, 1999
@


1.6
log
@Updated to v3.2.9 of Darren's codebase. His code reimplements variable
locking, replaces u_long's with u_32_t to properly handle 64bit archs.
Wrapped OpenBSD specific preprocessor logic.
@
text
@d1 85
a85 43
.\"      $OpenBSD: ipnat.5,v 1.5 1998/01/26 04:13:48 dgregor Exp $
.TH IPNAT 5
.SH NAME
ipnat \- IP NAT file format
.SH DESCRIPTION
The format for files accepted by ipnat is described by the following grammar:
.LP
.nf
ipmap :: = mapit ifname ipmask "->" ipmask [ mapport ] .

mapit ::= "map" | "rdr" .
ipmask ::= ip "/" bits | ip "/" mask | ip "netmask" mask .
mapport ::= "portmap" tcpudp portnumber ":" portnumber .

tcpudp ::= "tcp" | "udp" | "tcp/udp" .
portnumber ::= number { numbers } .
ifname ::= 'A' - 'Z' { 'A' - 'Z' } numbers .

numbers ::= '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' .
.fi
.PP
For standard NAT functionality, a rule should start with \fBmap\fP and then
proceeds to specify the interface for which outgoing packets will have their
source address rewritten.
.PP
Packets which will be rewritten can only be selected by matching the original
source address.  A netmask must be specified with the IP address.
.PP
The address selected for replacing the original is chosen from an IP#/netmask
pair.  A netmask of all 1's indicating a hostname is valid.  A netmask of
31 1's (255.255.255.254) is considered invalid as there is no space for
allocating host IP#'s after consideration for broadcast and network
addresses.
.PP
When remapping TCP and UDP packets, it is also possible to change the source
port number.  Either TCP or UDP or both can be selected by each rule, with a
range of port numbers to remap into given as \fBport-number:port-number\fP.
.SH Examples
.PP
To change IP numbers used internally from network 10 into an ISP provided 8 bit
subnet at 209.1.2.0 through the ppp0 interface, the following would be used:
.LP
.nf
d87 10
a96 7
.fi
.PP
The obvious problem here is we're trying to squeeze over 16,000,000 IP
addresses into a 254 address space.  To increase the scope, remapping for TCP
and/or UDP, port remapping can be used;
.LP
.nf
d98 5
a102 3
.fi
.PP
which falls only 527,566 `addresses' short of the space available in network
d105 1
a105 2
.LP
.nf
d108 39
a146 13
.fi
.PP
so that all TCP/UDP packets were port mapped and only other protocols, such as
ICMP, only have their IP# changed.
.SH FILES
/etc/services
.br
/etc/hosts
.br
/dev/ipnat
.SH SEE ALSO
ipf(1), ipftest(1), ipnat(1), ipf(4), ipl(4), ipnat(4), ipf(5), ipfstat(8), ipmon(8)
.br
d148 1
@


1.5
log
@IPF 3.2.3
@
text
@d1 1
a1 1
.\"      $OpenBSD$
d40 2
a41 2
To change IP#'s used internally from network 10 into an ISP provided 8 bit
subnet at 209.1.2.0, the following would be used:
d44 1
a44 1
map 10.0.0.0/8 -> 209.1.2.0/24
d52 1
a52 1
map 10.0.0.0/8 -> 209.1.2.0/24 portmap tcp/udp 1025:65000
d60 2
a61 2
map 10.0.0.0/8 -> 209.1.2.0/24 portmap tcp/udp 1025:65000
map 10.0.0.0/8 -> 209.1.2.0/24
d70 2
d73 3
a75 1
ipnat(1), ipf(5), ipnat(4), ipnat(5)
@


1.4
log
@IPF 1.3.7
@
text
@d1 1
@


1.3
log
@ipfilter 3.1.0
@
text
@a0 1
.LP
d3 1
a3 1
ipnat - IP NAT file format
d67 1
d70 1
a70 1
ipnat(1), ipf(5), ipnat(4)
@


1.2
log
@update rcsid
@
text
@a0 2
.\"	$OpenBSD$
.\"
@


1.1
log
@ipfilter 3.0.4
@
text
@d1 2
@
