head	1.21;
access;
symbols
	OPENBSD_2_9:1.20.0.2
	OPENBSD_2_9_BASE:1.20
	OPENBSD_2_8:1.19.0.4
	OPENBSD_2_8_BASE:1.19
	OPENBSD_2_7:1.19.0.2
	OPENBSD_2_7_BASE:1.19
	OPENBSD_2_6:1.16.0.2
	OPENBSD_2_6_BASE:1.16
	OPENBSD_2_5:1.9.0.4
	OPENBSD_2_5_BASE:1.9
	OPENBSD_2_4:1.9.0.2
	OPENBSD_2_4_BASE:1.9
	OPENBSD_2_3:1.7.0.2
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.6.0.4
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3;
locks; strict;
comment	@# @;


1.21
date	2001.05.30.02.11.47;	author deraadt;	state dead;
branches;
next	1.20;

1.20
date	2001.01.20.20.50.55;	author fgsch;	state Exp;
branches;
next	1.19;

1.19
date	2000.04.13.19.59.39;	author kjell;	state Exp;
branches;
next	1.18;

1.18
date	2000.03.18.22.55.58;	author aaron;	state Exp;
branches;
next	1.17;

1.17
date	2000.01.24.07.27.02;	author kjell;	state Exp;
branches;
next	1.16;

1.16
date	99.10.12.05.07.42;	author ericj;	state Exp;
branches;
next	1.15;

1.15
date	99.07.09.13.35.49;	author aaron;	state Exp;
branches;
next	1.14;

1.14
date	99.07.07.10.50.11;	author aaron;	state Exp;
branches;
next	1.13;

1.13
date	99.07.02.20.11.46;	author aaron;	state Exp;
branches;
next	1.12;

1.12
date	99.06.18.01.46.40;	author aaron;	state Exp;
branches;
next	1.11;

1.11
date	99.06.18.01.44.19;	author aaron;	state Exp;
branches;
next	1.10;

1.10
date	99.06.11.16.57.14;	author aaron;	state Exp;
branches;
next	1.9;

1.9
date	98.09.26.06.53.05;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	98.09.15.09.57.29;	author pattonme;	state Exp;
branches;
next	1.7;

1.7
date	98.01.26.04.13.47;	author dgregor;	state Exp;
branches;
next	1.6;

1.6
date	97.04.09.02.29.03;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	97.02.11.22.24.17;	author kstailey;	state Exp;
branches;
next	1.4;

1.4
date	97.02.07.02.01.29;	author kstailey;	state Exp;
branches;
next	1.3;

1.3
date	96.07.18.05.08.38;	author dm;	state Exp;
branches;
next	1.2;

1.2
date	96.06.23.14.31.00;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	96.05.10.21.39.55;	author dm;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Remove ipf.  Darren Reed has interpreted his (old, new, whichever)
licence in a way that makes ipf not free according to the rules we
established over 5 years ago, at www.openbsd.org/goals.html (and those
same basic rules govern the other *BSD projects too).  Specifically,
Darren says that modified versions are not permitted.  But software
which OpenBSD uses and redistributes must be free to all (be they
people or companies), for any purpose they wish to use it, including
modification, use, peeing on, or even integration into baby mulching
machines or atomic bombs to be dropped on Australia.  Furthermore, we
know of a number of companies using ipf with modification like us, who
are now in the same situation, and we hope that some of them will work
with us to fill this gap that now exists in OpenBSD (temporarily, we
hope).
@
text
@.\"	$OpenBSD: ipnat.4,v 1.20 2001/01/20 20:50:55 fgsch Exp $
.\"
.TH IPNAT 4
.SH NAME
ipnat \- Network Address Translation kernel interface
.SH SYNOPSIS
#include <netinet/ip_compat.h>
.br
#include <netinet/ip_fil.h>
.br
#include <netinet/ip_proxy.h>
.br
#include <netinet/ip_nat.h>
.SH IOCTLS
.PP
To add and delete rules to the NAT list, two 'basic' ioctls are provided
for use.  The ioctl's are called as:
.LP
.nf
	ioctl(fd, SIOCADNAT, struct ipnat **)
	ioctl(fd, SIOCRMNAT, struct ipnat **)
	ioctl(fd, SIOCGNATS, struct natstat **)
	ioctl(fd, SIOCGNATL, struct natlookup **)
.fi
.PP
Unlike \fBipf(4)\fP, there is only a single list supported by the kernel NAT
interface.  An inactive list which can be swapped to is not currently
supported.

These ioctl's are implemented as being routing ioctls and thus the same rules
for the various routing ioctls and the file descriptor are employed, mainly
being that the fd must be that of the device associated with the module
(i.e., /dev/ipl).
.LP
.PP
The strcture used with the NAT interface is described below:
.LP
.nf
typedef struct  ipnat   {
        struct  ipnat   *in_next;
        void    *in_ifp;
        u_short in_flags;
        u_short in_pnext;
        u_short in_port[2];
        struct  in_addr in_in[2];
        struct  in_addr in_out[2];
        struct  in_addr in_nextip;
        int     in_space;
        int     in_redir; /* 0 if it's a mapping, 1 if it's a hard redir */
        char    in_ifname[IFNAMSIZ];
} ipnat_t;

#define in_pmin         in_port[0]      /* Also holds static redir port */
#define in_pmax         in_port[1]
#define in_nip          in_nextip.s_addr
#define in_inip         in_in[0].s_addr
#define in_inmsk        in_in[1].s_addr
#define in_outip        in_out[0].s_addr
#define in_outmsk       in_out[1].s_addr

.fi
.PP
Recognised values for in_redir:
.LP
.nf
#define NAT_MAP         0
#define NAT_REDIRECT    1
.fi
.PP
.LP
\fBNAT statistics\fP
Statistics on the number of packets mapped, going in and out are kept,
the number of times a new entry is added and deleted (through expiration) to
the NAT table and the current usage level of the NAT table.
.PP
Pointers to the NAT table inside the kernel, as well as to the top of the
internal NAT lists constructed with the \fBSIOCADNAT\fP ioctls.  The table
itself is a hash table of size NAT_SIZE (default size is 367).
.PP
To retrieve the statistics, the \fBSIOCGNATS\fP ioctl must be used, with
the appropriate structure passed by reference, as follows:
.nf
	ioctl(fd, SIOCGNATS, struct natstat *)

typedef struct  natstat {
        u_long  ns_mapped[2];
        u_long  ns_added;
        u_long  ns_expire;
        u_long  ns_inuse;
        nat_t   ***ns_table;
        ipnat_t *ns_list;
} natstat_t;
.fi
.SH BUGS
It would be nice if there were more flexibility when adding and deleting
filter rules.
.SH FILES
/dev/ipnat
.SH SEE ALSO
ipf(4), ipnat(5), ipf(8), ipnat(8), ipfstat(8)
@


1.20
log
@sync with 3.4.16.
@
text
@d1 1
a1 1
.\"	$OpenBSD: ipnat.4,v 1.19 2000/04/13 19:59:39 kjell Exp $
@


1.19
log
@Long overdue documentation update for IPFilter. These
are taken directly from the ipf distribution, and are
not mandoc'ed. ipf(8), ipfstat(8), and ipnat(8) are yet
to go and must be done manually. (sigh)
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d20 4
a23 2
	ioctl(fd, SIOCADNAT, struct ipnat *)
	ioctl(fd, SIOCRMNAT, struct ipnat *)
@


1.18
log
@Remove hard sentence breaks, and some other cleanup along the way.
@
text
@d1 48
a48 65
.\"      $OpenBSD: ipnat.4,v 1.17 2000/01/24 07:27:02 kjell Exp $
.Dd June 5, 1999
.Dt IPNAT 4
.Os
.Sh NAME
.Nm ipnat
.Nd Network Address Translation kernel interface
.Sh SYNOPSIS
.Fd #include <netinet/ip_fil_compat.h>
.Fd #include <netinet/ip_fil.h>
.Fd #include <netinets/ip_proxy.h>
.Fd #include <netinet/ip_nat.h>
.Sh DESCRIPTION
Unlike
.Xr ipf 4 ,
only a single list is supported by the kernel NAT
interface.
An inactive list which can be swapped to is not currently supported.
.Pp
.Pp
To add/delete rules to/from the NAT list, two
.Dq basic
ioctl's are provided:
.Bd -literal -offset indent
.Fn ioctl fd SIOCADNAT "struct ipnat *"
.Fn ioctl fd SIOCRMNAT "struct ipnat *"
.Ed
.Pp
To retrieve NAT statistics
.Bd -literal -offset indent
.Fn ioctl fd SIOCGNATS "struct natstat *"
.Ed
.Pp
is provided.
.Pp
These ioctl's are implemented as routing ioctl's, so the rules
for routing ioctl's and the file descriptor
.Ar fd
must be followed.
The most important rule is that the file descriptor
.Fa fd
must be for the device associated with the module (i.e.,
.Pa /dev/ipl ) .
.Pp
The structure
.Fa ipnat
and associated macros are defined as:
.Bd -literal -offset indent
typedef	struct	ipnat	{
	struct	ipnat	*in_next;
	void	*in_ifp;
	void	*in_apr;
	u_int	in_space;
	u_int	in_use;
	struct	in_addr	in_nextip;
	u_short	in_pnext;
	u_short	in_flags;
	u_short	in_port[2];
	struct	in_addr	in_in[2];
	struct	in_addr	in_out[2];
	int	in_redir;
	char	in_ifname[IFNAMSIZ];
	char	in_plabel[APR_LABELLEN];
	char	in_p;
	u_short	in_dport;
d51 39
a89 33
#define	in_pmin		in_port[0]
#define	in_pmax		in_port[1]
#define	in_nip		in_nextip.s_addr
#define	in_inip		in_in[0].s_addr
#define	in_inmsk	in_in[1].s_addr
#define	in_outip	in_out[0].s_addr
#define	in_outmsk	in_out[1].s_addr
.Ed
.Pp
Where recognised values for
.Fa in_redir
are:
.Bd -literal -offset indent
#define	NAT_MAP		0x01
#define	NAT_REDIRECT	0x02
#define	NAT_BIMAP	(NAT_MAP|NAT_REDIRECT)
.Ed
.Pp
The structure
.Fa natstat
is defined as:
.Bd -literal -offset indent
typedef	struct	natstat	{
	u_long	ns_mapped[2];
	u_long	ns_rules;
	u_long	ns_added;
	u_long	ns_expire;
	u_long	ns_inuse;
	u_long	ns_logged;
	u_long	ns_logfail;
	nat_t	**ns_table[2];
	ipnat_t	*ns_list;
	void	*ns_apslist;
d91 2
a92 22
.Ed
.Pp
The NAT kernel tables are hash tables of size
.Dv NAT_SIZE
(default is 367).
.Sh FILES
.Bl -tag -width /dev/ipnat -compact
.It Pa /dev/ipnat
.El
.Sh SEE ALSO
.Xr ipf 8 ,
.Xr ipftest 1 ,
.Xr ipf 4 ,
.Xr ipl 4 ,
.Xr ipf 5 ,
.Xr ipnat 5 ,
.Xr ipnat 8 ,
.Xr ipfstat 8 ,
.Xr ipmon 8
.Pp
http://coombs.anu.edu.au/~avalon
.Sh BUGS
d95 4
a98 1

@


1.17
log
@Correct Xrs. marc@@snafu.org
@
text
@d1 1
a1 1
.\"      $OpenBSD: ipnat.4,v 1.16 1999/10/12 05:07:42 ericj Exp $
d17 2
a18 2
interface. An inactive list which can be swapped to is not currently
supported.
@


1.16
log
@fix ipfilter url for ipnat pages also
@
text
@d1 1
a1 1
.\"      $OpenBSD: ipnat.4,v 1.15 1999/07/09 13:35:49 aaron Exp $
d112 1
a112 1
.Xr ipf 1 ,
@


1.15
log
@- remove all trailing whitespace
     * except when it is escaped with a `\' at the end of the line
- fix remaining .Nm usage as well
- this is from a patch I received from kwesterback@@home.com, who has been
  working on some scripts for fixing formatting errors in mdoc'd man pages

Ok, so there could be a cost/benefit debate with this commit, but since I have
the patch we might as well commit it...
@
text
@d1 1
a1 1
.\"      $OpenBSD: ipnat.4,v 1.14 1999/07/07 10:50:11 aaron Exp $
d122 1
a122 1
http://coombs.anu.edu.au/ipfilter/
@


1.14
log
@The proper order of the ``introductory'' macros in a man page is .Dd/.Dt/.Os.
Out of the approximately 1450 man pages, only about 90 of them were wrong.
Thanks to kwesterback@@home.com for coming up with a script and patch to repair
this. The patch also inserted a .Os macro in the few man pages that were
missing one.
@
text
@d1 1
a1 1
.\"      $OpenBSD: ipnat.4,v 1.13 1999/07/02 20:11:46 aaron Exp $
d78 1
a78 1
.Fa in_redir 
d86 1
a86 1
The structure 
@


1.13
log
@consistent .Dd usage; proper format is: .Dd Month DD, YYYY
@
text
@d1 1
a1 1
.\"      $OpenBSD: ipnat.4,v 1.12 1999/06/18 01:46:40 aaron Exp $
d3 1
a4 1
.Dt IPNAT 4
@


1.12
log
@whoops
@
text
@d1 2
a2 2
.\"      $OpenBSD: ipnat.4,v 1.11 1999/06/18 01:44:19 aaron Exp $
.Dd 5 June, 1999
@


1.11
log
@new ipnat(4) and ipnat(5) mdoc-style man pages; kwesterback@@home.com
@
text
@d1 1
a1 1
.\"      $OpenBSD: ipnat.4,v 1.10 1999/06/11 16:57:14 aaron Exp $
d24 1
a24 1
.Bd -ragged -offset indent
a25 1
.br
@


1.10
log
@<netinets/ip_proxy.h> -> <netinet/ip_proxy.h>; ryker@@ugrad.cs.ualberta.ca
@
text
@d1 17
a17 23
.\"      $OpenBSD: ipnat.4,v 1.9 1998/09/26 06:53:05 deraadt Exp $
.TH IPNAT 4
.SH NAME
ipnat \- Network Address Translation kernel interface
.SH SYNOPSIS
.nf
#include <netinet/ip_fil_compat.h>
#include <netinet/ip_fil.h>
#include <netinet/ip_proxy.h>
#include <netinet/ip_nat.h>
.fi
.SH IOCTLS
.PP
To add and delete rules to the NAT list, two 'basic' ioctls are provided
for use.  The ioctl's are called as:
.LP
.nf
	ioctl(fd, SIOCADNAT, struct ipnat *)
	ioctl(fd, SIOCRMNAT, struct ipnat *)
.fi
.PP
Unlike \fBipf(4)\fP, there is only a single list supported by the kernel NAT
interface.  An inactive list which can be swapped to is not currently
d19 48
a66 22

These ioctl's are implemented as being routing ioctls and thus the same rules
for the various routing ioctls and the file descriptor are employed, mainly
being that the fd must be that of the device associated with the module
(i.e., /dev/ipl).
.LP
.PP
The strcture used with the NAT interface is described below:
.LP
.nf
typedef struct  ipnat   {
        struct  ipnat   *in_next;
        void    *in_ifp;
        u_short in_flags;
        u_short in_pnext;
        u_short in_port[2];
        struct  in_addr in_in[2];
        struct  in_addr in_out[2];
        struct  in_addr in_nextip;
        int     in_space;
        int     in_redir; /* 0 if it's a mapping, 1 if it's a hard redir */
        char    in_ifname[IFNAMSIZ];
d69 33
a101 39
#define in_pmin         in_port[0]      /* Also holds static redir port */
#define in_pmax         in_port[1]
#define in_nip          in_nextip.s_addr
#define in_inip         in_in[0].s_addr
#define in_inmsk        in_in[1].s_addr
#define in_outip        in_out[0].s_addr
#define in_outmsk       in_out[1].s_addr

.fi
.PP
Recognised values for in_redir:
.LP
.nf
#define NAT_MAP         0x01
#define NAT_REDIRECT    0x02
.fi
.PP
.LP
\fBNAT statistics\fP
Statistics on the number of packets mapped, going in and out are kept,
the number of times a new entry is added and deleted (through expiration) to
the NAT table and the current usage level of the NAT table.
.PP
Pointers to the NAT table inside the kernel, as well as to the top of the
internal NAT lists constructed with the \fBSIOCADNAT\fP ioctls.  The table
itself is a hash table of size NAT_SIZE (default size is 367).
.PP
To retrieve the statistics, the \fBSIOCGNATS\fP ioctl must be used, with
the appropriate structure passed by reference, as follows:
.nf
	ioctl(fd, SIOCGNATS, struct natstat *)

typedef struct  natstat {
        u_long  ns_mapped[2];
        u_long  ns_added;
        u_long  ns_expire;
        u_long  ns_inuse;
        nat_t   ***ns_table;
        ipnat_t *ns_list;
d103 20
a122 8
.fi
.SH FILES
\fI/usr/share/ipf\fP -- sample configuration files.
.br
/dev/ipnat
.SH SEE ALSO
ipf(1), ipftest(1), ipnat(1), ipf(4), ipl(4), ipf(5), ipnat(5), ipfstat(8), ipmon(8)
.br
d124 1
a124 1
.SH BUGS
d127 1
@


1.9
log
@NAT in_redir flags changed; garath@@code.ridgefield.org
@
text
@d1 1
a1 1
.\"      $OpenBSD: ipnat.4,v 1.8 1998/09/15 09:57:29 pattonme Exp $
d9 1
a9 1
#include <netinets/ip_proxy.h>
@


1.8
log
@Updated to v3.2.9 of Darren's codebase. His code reimplements variable
locking, replaces u_long's with u_32_t to properly handle 64bit archs.
Wrapped OpenBSD specific preprocessor logic.
@
text
@d1 1
a1 1
.\"      $OpenBSD: ipnat.4,v 1.7 1998/01/26 04:13:47 dgregor Exp $
d62 2
a63 2
#define NAT_MAP         0
#define NAT_REDIRECT    1
@


1.7
log
@IPF 3.2.3
@
text
@d1 1
a1 1
.\"      $OpenBSD$
d7 4
a10 4
#include <sys/ip_fil_compat.h>
#include <sys/ip_fil.h>
#include <sys/ip_proxy.h>
#include <sys/ip_nat.h>
d90 8
a100 2
.SH SEE ALSO
ipfstat(1), ipf(1), ipnat(1), ipf(4), ipnat(5)
@


1.6
log
@the the
@
text
@d1 1
d6 2
d9 3
@


1.5
log
@IPF 1.3.7
@
text
@d62 1
a62 1
Statistics on the the number of packets mapped, going in and out are kept,
@


1.4
log
@more SEE ALSO cross-refs
@
text
@d3 1
a3 1
ipnat - Network Address Translation kernel interface
d23 1
a23 1
(ie /dev/ipl).
d88 1
a88 1
ipnat(1), ipfstat(1), ipf(1), ipf(4), ipnat(5)
@


1.3
log
@ipfilter 3.1.0
@
text
@d88 1
a88 1
ipfstat(1), ipf(1), ipf(4), ipnat(5)
@


1.2
log
@update rcsid
@
text
@a0 2
.\"	$OpenBSD$
.\"
@


1.1
log
@ipfilter 3.0.4
@
text
@d1 2
@
