head	1.24;
access;
symbols
	OPENBSD_2_9:1.22.0.2
	OPENBSD_2_9_BASE:1.22
	OPENBSD_2_8:1.21.0.2
	OPENBSD_2_8_BASE:1.21
	OPENBSD_2_7:1.19.0.2
	OPENBSD_2_7_BASE:1.19
	OPENBSD_2_6:1.16.0.2
	OPENBSD_2_6_BASE:1.16
	OPENBSD_2_5:1.5.0.2
	OPENBSD_2_5_BASE:1.5;
locks; strict;
comment	@.\" @;


1.24
date	2001.05.30.02.11.48;	author deraadt;	state dead;
branches;
next	1.23;

1.23
date	2001.04.30.17.09.16;	author brad;	state Exp;
branches;
next	1.22;

1.22
date	2000.12.21.21.20.46;	author reinhard;	state Exp;
branches;
next	1.21;

1.21
date	2000.08.02.15.22.06;	author provos;	state Exp;
branches;
next	1.20;

1.20
date	2000.08.01.06.26.36;	author hugh;	state Exp;
branches;
next	1.19;

1.19
date	2000.04.13.16.23.53;	author kjell;	state Exp;
branches;
next	1.18;

1.18
date	2000.03.18.22.55.59;	author aaron;	state Exp;
branches;
next	1.17;

1.17
date	2000.01.21.05.18.33;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	99.10.12.05.07.42;	author ericj;	state Exp;
branches;
next	1.15;

1.15
date	99.10.05.19.00.09;	author aaron;	state Exp;
branches;
next	1.14;

1.14
date	99.08.10.22.32.23;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	99.07.21.12.38.37;	author aaron;	state Exp;
branches;
next	1.12;

1.12
date	99.07.09.13.35.49;	author aaron;	state Exp;
branches;
next	1.11;

1.11
date	99.07.07.05.40.04;	author kjell;	state Exp;
branches;
next	1.10;

1.10
date	99.07.06.04.46.11;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	99.06.04.02.45.17;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	99.06.03.17.53.11;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	99.05.28.22.59.59;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	99.05.15.02.17.53;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	99.02.25.00.29.55;	author kjell;	state Exp;
branches;
next	1.4;

1.4
date	99.02.24.18.35.56;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	99.02.10.22.12.53;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	99.02.07.22.08.03;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	99.02.07.00.48.29;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Remove ipf.  Darren Reed has interpreted his (old, new, whichever)
licence in a way that makes ipf not free according to the rules we
established over 5 years ago, at www.openbsd.org/goals.html (and those
same basic rules govern the other *BSD projects too).  Specifically,
Darren says that modified versions are not permitted.  But software
which OpenBSD uses and redistributes must be free to all (be they
people or companies), for any purpose they wish to use it, including
modification, use, peeing on, or even integration into baby mulching
machines or atomic bombs to be dropped on Australia.  Furthermore, we
know of a number of companies using ipf with modification like us, who
are now in the same situation, and we hope that some of them will work
with us to fill this gap that now exists in OpenBSD (temporarily, we
hope).
@
text
@.Dd October 10, 1998
.Dt IPNAT 8
.Os
.Sh NAME
.Nm ipnat
.Nd manage IP network address translation rules
.Sh SYNOPSIS
.Nm ipnat
.Op Fl CFlnrsv
.Op Fl f Ar filename
.Sh DESCRIPTION
The
.Nm
utility
provides control over the kernel's network address translation (NAT).
The NAT facility remaps IP addresses from one range to another.
It can be used to provide internal networks with Internet connectivity by
mapping several private IP addresses to a single routeable
.Pq i.e., Dq real
Internet address.
.Pp
In other words, when properly configured on a gateway, the NAT provides
Internet access to connected computers lacking officially assigned IP
addresses.
It is discussed in RFC 1631.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl f Ar filename
File from which rules are read.
.It Fl C
Delete all entries in the NAT list.
.It Fl F
Flush all active mappings from the NAT table.
.It Fl l
Display the current rule list and active mappings.
.It Fl n
Do not alter the NAT table.
.It Fl r
Remove, rather than add, entries specified in the rule list.
.It Fl s
Display statistics.
.It Fl v
Verbosity.
Displays detailed information pertaining to rule processing.
.El
.Pp
Certain configuration requirements must be met before
.Nm
will work:
.Bl -enum -offset indent
.It
Network address translation requires packet forwarding capabilities.
Ensure the
.Pa /etc/sysctl.conf
file contains the assignment
.Cm net.inet.ip.forwarding=1 .
.It
Packet filtering (see
.Xr ipf 8 )
must be enabled, even if it's not being used.
Check the
.Pa /etc/rc.conf
file and make sure it contains the assignment
.Cm ipfilter=YES .
.It
The kernel must be configured with
.Cm option IPFILTER
(and
.Cm option IPFILTER_LOG
if
.Xr ipmon 8
is needed).
Both options are compiled into the default (GENERIC) kernel that comes with
the system.
.It
Finally, enable NAT itself by setting
.Cm ipnat=YES
in
.Pa /etc/rc.conf .
This will cause
.Pa /etc/netstart
to run
.Nm
at boot-time with
.Pa /etc/ipnat.rules
as the rule list to install.
.El
.Pp
The
.Nm
utility operates on a list of rules, specified by
.Fl f Ar filename .
This file is typically
.Pa /etc/ipnat.rules ;
standard input is represented by a single dash
.Pq Ql - .
Each rule is parsed, then sequentially added to
the kernel's internal NAT list.
Like
.Xr ipf 8 ,
if an entry contradicts another previously added, the newer will take
precedence.
.Pp
Comments (beginning with a
.Ql # )
and blank lines are ignored as
.Nm
parses the file.
Entries may be separated by spaces or tabs.
Each rule must begin with either
.Em map ,
.Em bimap ,
or
.Em rdr .
See below for rule syntax, or refer to
.Pa /usr/share/ipf/nat.1
for sample rule entries.
.Ss Mapping rules
.Em map
tells the NAT how a range of addresses should be translated.
The entries use the following format:
.Pp
.Bd -unfilled -offset indent -compact
map ifname internal/mask -> external/mask options
.Ed
.Pp
The
.Em ifname
field is the interface to which packets are sent.
A gateway with a PPP link would probably use
.Dq ppp0
or
.Dq tun0 ,
while an Ethernet connection would instead have the name of its device.
In the presence of multiple network devices, you wish to use the device
which is on the external side.
.Pp
As a quick example:
.Bd -literal -offset indent
map ep1 10.1.1.0/24 -> ep1/32 portmap tcp/udp 10000:20000
.Ed
.Pp
This rule would remap all connections originating from 10.1.1.0 through
10.1.1.254 to the externally-connected network.
Note that
.Dq ep1
is the name of the
.Em outside
interface on the gateway; that is, the interface with the external
.Pq i.e., Dq real
IP address.
Do not specify internal interface names, use their addresses instead.
.Pp
The address range of the LAN goes in the
.Em internal
field.
This is usually one of the three blocks of address space the Internet
Assigned Numbers Authority has allocated for private networks (RFC 1918):
.Pp
.Bd -unfilled -offset indent -compact
10.0.0.0    - 10.255.255.255   (ie. 10/8)
172.16.0.0  - 172.31.255.255   (ie. 172.16/12)
192.168.0.0 - 192.168.255.255  (ie. 192.168/16)
.Ed
.Pp
The
.Em external
address is the offically assigned IP number of the gateway or network.
.Pp
.Em mask
is the netmask of the address.
This mask is 32 bits long, and is divided into four 8-bit numbers.
.Pp
.Bd -unfilled -offset indent -compact
11111111.0.0.0			Class A - 8 bits set.
11111111.11111111.0.0 		Class B - 16 bits set.
11111111.11111111.11111111.0	Class C - 24 bits set.
.Ed
.Pp
The number of bits set in the mask is placed following the IP address.
.Pp
Both
.Em internal
and
.Em external
may be an actual IP address, the name of an interface, or a hostname.
If it is a network number, however, a problem may arise.
For example:
.Pp
.Bd -unfilled -offset indent -compact
map ppp0 10.0.0.0/8 -> 209.1.2.0/24
.Ed
.Pp
16,000,000 IP addresses are being squeezed into an address space of only 254.
This is solved by the
.Em portmap
option, which remaps ports instead of IP addresses.
The protocol is specified by following the option with either
.Em tcp ,
.Em udp ,
.Em tcp/udp ,
or
.Em tcpudp
(the last two have the same effect).
The syntax to assign a range of ports is
.Dq portnumber:portnumber .
This looks like:
.Pp
.Bd -unfilled -offset indent -compact
map ppp0 10.0.0.0/8 -> 209.1.2.0/24 portmap tcp/udp 1025:65000
map ppp0 10.0.0.0/8 -> 209.1.2.0/24
.Ed
.Pp
That will cut the number down from ~16,000,000 addresses short to only 527,566.
.Pp
.Ss Bi-directional mapping rules
.Em bimap
is used to create static, bidirectional NAT mappings.
Standard
.Em map
rules only create NAT mappings when the connection is initiated from the
internal IP address.
For example, using the following rule:
.Pp
.Bd -unfilled -offset indent -compact
map ppp0 10.0.0.3/32 -> 209.1.2.3/32
.Ed
.Pp
NAT mappings will only be created if the machine at 10.0.0.3 initiates the
connection.
To create a truly bidirectional NAT entry,
.Em bimap
is necessary.
Using the following rule, for example, clients on the
ppp0 side of the NAT box can initiate requests to 209.1.2.3.
This traffic will be mapped to 10.0.0.3 as expected:
.Pp
.Bd -unfilled -offset indent -compact
bimap ppp0 10.0.0.3/32 -> 209.1.2.3/32
.Ed
.Pp
To be genuinely useful,
.Em bimap
should be used in conjunction with either proxy arp, or
.Xr ifconfig 8
aliases.
For example, if we create two bimap entries such as:
.Pp
.Bd -unfilled -offset indent -compact
bimap fxp0 10.0.0.3/32 -> 209.1.2.3/32
bimap fxp0 10.0.0.4/32 -> 209.1.2.4/32
.Ed
.Pp
It is necessary to do either:
.Pp
.Bd -unfilled -offset indent -compact
arp -s 209.1.2.3 00:40:aa:bb:cc:dd pub
arp -s 209.1.2.4 00:40:aa:bb:cc:dd pub
.Ed
.Pp
(where 00:40:aa:bb:cc:dd is the MAC address of fxp0) or
.Pp
.Bd -unfilled -offset indent -compact
ifconfig fxp0 alias 209.1.2.3 netmask 255.255.255.255
ifconfig fxp0 alias 209.1.2.4 netmask 255.255.255.255
.Ed
.Pp
Note that since
.Xr ipnat 8
works on the principle of first match (as apposed to
.Xr ipf 1
which is last match), it is customary to put all
.Em rdr
rules before any and all
.Em (bi)map
rules. This is particularly vital if the network ranges in question
verlap.
Otherwise the
.Em rdr
rules simply
.Em will not work .
.Ss Redirection rules
.Em rdr
tells the NAT how to redirect incoming packets.
It is useful if one wishes to
redirect a connection through a proxy, or to another box on the private
network.
The format of this directive is:
.Pp
rdr ifname external/mask port service -> internal port service protocol
.Pp
This setup is best described by an example of an actual entry:
.Pp
.Bd -unfilled -offset indent -compact
rdr xl0 0.0.0.0/0 port 25 -> 204.213.176.10 port smtp
.Ed
.Pp
This redirects all smtp packets received on xl0 to 204.213.176.10, port 25.
A netmask is not needed on the
.Em internal
address; it is always 32.
The
.Em external
and
.Em internal
fields, similar to the
.Em map
directive, may be actual addresses, hostnames, or interfaces.
Likewise, the
.Em service
field may be the name of a service, or a port number.
The
.Em protocol
of the service may be selected by appending
.Em tcp ,
.Em udp ,
.Em tcp/udp ,
or
.Em tcpudp
(the last two have the same effect) to the end of the line.
TCP is the default.
.Sh FILES
.Bl -tag -width /usr/share/ipf/nat.1 -compact
.It Pa /etc/ipnat.rules
default system rule list
.It Pa /usr/share/ipf/nat.1
example rules
.It Pa /usr/share/ipf/nat.2
system requirements for use of the NAT
.It Pa /usr/share/ipf/nat.3
example rules for use with ppp
.It Pa /dev/ipnat
device file
.El
.Sh BUGS
.Em bimap
should really only be used with single IP addresses (x.x.x.x/32).
Bimapping
other CIDR ranges will result in unexpected, and possibly random mappings
into the destination address block.
.Sh SEE ALSO
.Xr ipnat 4 ,
.Xr ipnat 5 ,
.Xr ipf 8
.Pp
http://coombs.anu.edu.au/~avalon
@


1.23
log
@the -> to
@
text
@@


1.22
log
@add /usr/share/ipf/nat.3; ok aaron@@
@
text
@d16 1
a16 1
The NAT facility remaps IP addresses from one range the another.
@


1.21
log
@RFC 1918 obsoletes 1597
@
text
@d331 2
@


1.20
log
@fix netmask notation; pr1343
@
text
@d159 1
a159 1
Assigned Numbers Authority has allocated for private networks (RFC 1597):
@


1.19
log
@Add a note regarding bimap and ipnat's "First Match" policy.
This question comes up fairly regularly. from mep@@netsec.net
@
text
@d162 2
a163 2
10.0.0.0    - 10.255.255.255   (ie. 10/24)
172.16.0.0  - 172.31.255.255   (ie. 172.16/20)
@


1.18
log
@Remove hard sentence breaks, and some other cleanup along the way.
@
text
@d217 1
a217 1
.Ss Bidirectional mapping rules
d269 14
@


1.17
log
@use net/mask notation for the private networks
@
text
@d44 2
a45 1
Verbosity. Displays detailed information pertaining to rule processing.
d61 2
a62 1
must be enabled, even if it's not being used. Check the
d99 2
a100 1
the kernel's internal NAT list. Like
d109 3
a111 2
parses the file. Entries may be separated by spaces or tabs. Each rule must
begin with either
d121 2
a122 2
tells the NAT how a range of addresses should be translated. The entries use
the following format:
d130 2
a131 2
field is the interface to which packets are sent. A gateway with a PPP link
would probably use
d157 2
a158 1
field. This is usually one of the three blocks of address space the Internet
d172 2
a173 2
is the netmask of the address. This mask is 32 bits long, and is divided into
four 8-bit numbers.
d187 3
a189 2
may be an actual IP address, the name of an interface, or a hostname. If it is
a network number, however, a problem may arise. For example:
d198 2
a199 2
option, which remaps ports instead of IP addresses. The protocol is specified
by following the option with either
d205 2
a206 1
(the last two have the same effect). The syntax to assign a range of ports is
d219 2
a220 1
is used to create static, bidirectional NAT mappings. Standard
d223 2
a224 1
internal IP address. For example, using the following rule:
d231 2
a232 1
connection. To create a truly bidirectional NAT entry,
d234 4
a237 3
is necessary. Using the following rule, for example, clients on the
ppp0 side of the NAT box can initiate requests to 209.1.2.3. This
traffic will be mapped to 10.0.0.3 as expected:
d247 2
a248 1
aliases. For example, if we create two bimap entries such as:
d271 2
a272 1
tells the NAT how to redirect incoming packets. It is useful if one wishes to
d274 2
a275 1
network. The format of this directive is:
d285 2
a286 2
This redirects all smtp packets received on xl0 to 204.213.176.10, port 25. A
netmask is not needed on the
d288 2
a289 1
address; it is always 32. The
d295 2
a296 1
directive, may be actual addresses, hostnames, or interfaces. Likewise, the
d298 2
a299 1
field may be the name of a service, or a port number. The
d307 2
a308 1
(the last two have the same effect) to the end of the line. TCP is the default.
d322 2
a323 1
should really only be used with single IP addresses (x.x.x.x/32). Bimapping
@


1.16
log
@fix ipfilter url for ipnat pages also
@
text
@d157 3
a159 3
10.0.0.0    - 10.255.255.255
172.16.0.0  - 172.31.255.255
192.168.0.0 - 192.168.255.255
d171 1
a171 1
11111111.0.0.0				Class A - 8 bits set.
@


1.15
log
@Better NAT documentation.
@
text
@d312 1
a312 1
http://coombs.anu.edu.au/ipfilter/
@


1.14
log
@must be external interface.  Why do people keep adding stuff to the FAQ
and not putting it into the man pages?  What's the point of that?
@
text
@d6 1
a6 1
.Nd user interface to the NAT
d12 1
d14 12
a25 5
provides control over the kernel's network address translation (NAT). The NAT
remaps IP addresses from one range to another. In other words, when properly
configured on a gateway, the NAT provides Internet access to connected
computers lacking officially assigned IP addresses. It is discussed in RFC
1631.
d30 1
a30 1
File from which rules are read from.
d36 1
a36 1
Display the current entries and mappings.
d49 38
a86 2
will work. These are listed in
.Pa /usr/share/ipf/nat.2 .
d88 1
d90 2
a91 2
operates on a list of rules, specified by
.Ar filename .
d94 3
a96 1
stdin is represented by "\-". Each rule is parsed, then sequentially added to
d112 4
a115 1
.Pp
d135 16
d210 1
d257 1
d293 2
a294 1
.It Pa /dev/ipnat
d299 2
a300 2
.It Pa /etc/ipnat.rules
actual rule list
a307 1
.Xr ipf 4 ,
@


1.13
log
@describe the -f flag in the options list
@
text
@d82 2
@


1.12
log
@- remove all trailing whitespace
     * except when it is escaped with a `\' at the end of the line
- fix remaining .Nm usage as well
- this is from a patch I received from kwesterback@@home.com, who has been
  working on some scripts for fixing formatting errors in mdoc'd man pages

Ok, so there could be a cost/benefit debate with this commit, but since I have
the patch we might as well commit it...
@
text
@d6 1
a6 1
.Nd User interface to the NAT
d19 1
a19 1
Options are as follows:
d21 2
d56 1
a56 1
.Dq # )
@


1.11
log
@First REAL cut at documenting bimap.
@
text
@d141 1
a141 1
is used to create static, bidirectional NAT mappings. Standard 
@


1.10
log
@first cut at documenting bimap
@
text
@d141 44
a184 3
is not documented, because kjell@@openbsd.org and aaron@@openbsd.org
have not gotten around to documenting it.
You can mail them and express your distaste... especially to kjell!
d229 5
@


1.9
log
@start to remove non-escaped trailing whitespace, it can confuse troff; pjanzen@@
@
text
@d59 2
a60 1
.Em map
d139 5
@


1.8
log
@check for interface names before hostnames
@
text
@d24 1
a24 1
Flush all active mappings from the NAT table. 
d30 1
a30 1
Remove, rather than add, entries specified in the rule list. 
d34 1
a34 1
Verbosity. Displays detailed information pertaining to rule processing. 
d43 1
a43 1
operates on a list of rules, specified by 
d45 1
a45 1
This file is typically 
d48 1
a48 1
the kernel's internal NAT list. Like 
d61 1
a61 1
.Em rdr .  
d63 1
a63 1
.Em map 
d72 1
a72 1
.Em ifname 
d108 2
a109 2
.Em internal 
and 
d120 1
a120 1
.Em portmap 
d123 1
a123 1
.Em tcp , 
d126 1
a126 1
or 
d132 1
a132 1
.Bd -unfilled -offset indent -compact 
d135 1
a135 1
.Ed 
d149 1
a149 1
rdr xl0 0.0.0.0/0 port 25 -> 204.213.176.10 port smtp 
d155 1
a155 1
address; it is always 32. The 
d157 1
a157 1
and 
d161 1
a161 1
directive, may be actual addresses, hostnames, or interfaces. Likewise, the 
d163 1
a163 1
field may be the name of a service, or a port number. The 
d165 2
a166 2
of the service may be selected by appending 
.Em tcp , 
@


1.7
log
@more .El madness
@
text
@d111 1
a111 1
may be an actual IP address, a hostname, or the name of an interface. If it is
@


1.6
log
@ethernet -> Ethernet, other repairs
@
text
@d181 1
@


1.5
log
@Moved to section 8. Changed title and incorrect reference to ipf(1).
@
text
@d12 6
a17 2
.Nm ipnat
provides control over the kernel's network address translation (NAT). The NAT remaps IP addresses from one range to another. In other words, when properly configured on a gateway, the NAT provides internet access to connected computers lacking officially assigned IP addresses. It is discussed in RFC 1631.
d34 1
a34 1
Verbosity, displays detailed information pertaining to rule processing. 
d38 1
a38 1
.Nm ipnat
d42 1
a42 1
.Nm ipnat
d50 2
a51 1
if an entry contradicts another previously added, the newer will take precedence. 
d53 6
a58 3
Comments (beginning with a ``#'') and blank lines are ignored as
.Nm ipnat
parses the file. Entries may be separated by spaces or tabs. Each rule must begin with either
d64 2
a65 1
tells the NAT how a range of addresses should be translated. The entries use the following format:
d73 6
a78 1
field is the interface to which packets are sent. A gateway with a PPP link would probably use ``ppp0'' or ``tun0'', while an ethernet connection would instead have the name of its device. 
d82 2
a83 1
field. This is usually one of the three blocks of address space the Internet Assigned Numbers Authority has allocated for private networks (RFC 1597):
d96 2
a97 1
is the netmask of the address. This mask is 32 bits long, and is divided into four 8 bit numbers.
d111 2
a112 1
may be an actual IP address, a hostname, or the name of an interface. If it is a network number, however, a problem may arise. For example:
d118 2
a119 1
16,000,000 IP addresses are being squeezed into an address space of only 254. This is solved by the
d121 2
a122 1
option, which remaps ports instead of IP addresses. The protocol is specified by following the option with either
d128 3
a130 1
(the last two have the same effect). The syntax to assign a range of ports is ``portnumber:portnumber''. This looks like:
d140 3
a142 1
tells the NAT how to redirect incoming packets. It is useful if one wishes to redirect a connection through a proxy, or to another box on the private network. The format of this directive is:
d152 2
a153 1
This redirects all smtp packets received on xl0 to 204.213.176.10, port 25. A netmask is not needed on the
d176 1
a176 1
Example rules.
d178 1
a178 1
System requirements for use of the NAT.
d180 1
a180 1
Actual rule list.
d182 1
d185 2
a186 3
.Xr ipf 8 ,
.Xr ipf 4
.br
@


1.4
log
@172.16/12 -- fix end of range; hugh
@
text
@d2 1
a2 1
.Dt IPNAT 1
d45 1
a45 1
.Xr ipf 1 ,
@


1.3
log
@Xr repairs
@
text
@d72 1
a72 1
172.16.0.0  - 172.16.255.255
@


1.2
log
@tweak
@
text
@d158 4
a161 1
.Xr ipnat 4
@


1.1
log
@man pages belong in section 8
@
text
@d158 1
a158 1
.Xr ipnat 4 .
@

