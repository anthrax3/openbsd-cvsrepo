head	1.19;
access;
symbols
	OPENBSD_4_3:1.18.0.2
	OPENBSD_4_3_BASE:1.18
	OPENBSD_4_2:1.17.0.10
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.17.0.8
	OPENBSD_4_1_BASE:1.17
	OPENBSD_4_0:1.17.0.6
	OPENBSD_4_0_BASE:1.17
	OPENBSD_3_9:1.17.0.4
	OPENBSD_3_9_BASE:1.17
	OPENBSD_3_8:1.17.0.2
	OPENBSD_3_8_BASE:1.17
	OPENBSD_3_7:1.15.0.8
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.15.0.6
	OPENBSD_3_6_BASE:1.15
	OPENBSD_3_5:1.15.0.4
	OPENBSD_3_5_BASE:1.15
	OPENBSD_3_4:1.15.0.2
	OPENBSD_3_4_BASE:1.15
	OPENBSD_3_3:1.11.0.2
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.10.0.8
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.10.0.6
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.10.0.4
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9:1.10.0.2
	OPENBSD_2_9_BASE:1.10
	OPENBSD_2_8:1.9.0.10
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.9.0.8
	OPENBSD_2_7_BASE:1.9
	OPENBSD_2_6:1.9.0.6
	OPENBSD_2_6_BASE:1.9
	OPENBSD_2_5:1.9.0.4
	OPENBSD_2_5_BASE:1.9
	OPENBSD_2_4:1.9.0.2
	OPENBSD_2_4_BASE:1.9
	OPENBSD_2_3:1.8.0.4
	OPENBSD_2_3_BASE:1.8
	OPENBSD_2_2:1.8.0.2
	OPENBSD_2_2_BASE:1.8
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	mickey:1.1.1.1
	SGI082896:1.1.1;
locks; strict;
comment	@ * @;


1.19
date	2008.05.07.11.55.21;	author claudio;	state dead;
branches;
next	1.18;

1.18
date	2007.12.30.13.46.13;	author sobrado;	state Exp;
branches;
next	1.17;

1.17
date	2005.04.12.15.26.47;	author cloder;	state Exp;
branches;
next	1.16;

1.16
date	2005.03.23.18.03.52;	author jmc;	state Exp;
branches;
next	1.15;

1.15
date	2003.06.02.20.06.17;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2003.04.26.03.26.43;	author krw;	state Exp;
branches;
next	1.13;

1.13
date	2003.04.06.00.45.12;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2003.04.04.00.46.24;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2003.03.11.02.32.31;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2001.03.08.21.41.49;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	98.06.01.07.23.41;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	97.07.30.23.28.58;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	97.07.30.22.24.48;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	97.06.30.06.33.31;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	97.01.17.07.12.25;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.01.15.23.41.11;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.10.02.06.51.49;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	96.09.22.20.48.10;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.09.05.13.59.00;	author mickey;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.09.05.13.59.00;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.19
log
@RIP routed.

You were a nice thing in the 4.2BSD times but now it is time for you to go.
Superseded by the shiny privseped ripd that does not have the evil habit to
use kernel internals in userland.

OK everybody in the onsen 'cause it unbreaks the tree
@
text
@/*	$OpenBSD: rtquery.c,v 1.18 2007/12/30 13:46:13 sobrado Exp $	*/

/*-
 * Copyright (c) 1982, 1986, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

char copyright[] =
"@@(#) Copyright (c) 1982, 1986, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";

#if !defined(lint)
static char sccsid[] = "@@(#)query.c	8.1 (Berkeley) 6/5/93";
#endif

#include <sys/cdefs.h>
#include <sys/param.h>
#include <sys/protosw.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <netinet/in.h>
#define RIPVERSION RIPv2
#include <protocols/routed.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <errno.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#ifdef sgi
#include <strings.h>
#include <bstring.h>
#endif

#ifndef sgi
#define _HAVE_SIN_LEN
#endif

#define	WTIME	15		/* Time to wait for all responses */
#define	STIME	(250*1000)	/* usec to wait for another response */

int	s;

char	*pgmname;

union {
	struct rip rip;
	char	packet[MAXPACKETSIZE+MAXPATHLEN];
} omsg_buf;
#define OMSG omsg_buf.rip
int omsg_len = sizeof(struct rip);

union {
	struct	rip rip;
	char	packet[MAXPACKETSIZE+1024];
	} imsg_buf;
#define IMSG imsg_buf.rip

int	nflag;				/* numbers, no names */
int	pflag;				/* play the `gated` game */
int	ripv2 = 1;			/* use RIP version 2 */
int	wtime = WTIME;
int	rflag;				/* 1=ask about a particular route */
int	trace;
int	not_trace;

struct timeval sent;			/* when query sent */

static void rip_input(struct sockaddr_in*, int);
static int out(char *);
static void trace_loop(char *argv[]);
static void query_loop(char *argv[], int);
static int getnet(char *, struct netinfo *);
static u_int std_mask(u_int);


int
main(int argc, char *argv[])
{
	int ch, bsize;
	char *p, *options, *value;

	OMSG.rip_nets[0].n_dst = RIP_DEFAULT;
	OMSG.rip_nets[0].n_family = RIP_AF_UNSPEC;
	OMSG.rip_nets[0].n_metric = htonl(HOPCNT_INFINITY);

	pgmname = argv[0];
	while ((ch = getopt(argc, argv, "np1w:r:t:")) != -1)
		switch (ch) {
		case 'n':
			not_trace = 1;
			nflag = 1;
			break;

		case 'p':
			not_trace = 1;
			pflag = 1;
			break;

		case '1':
			ripv2 = 0;
			break;

		case 'w':
			not_trace = 1;
			wtime = (int)strtoul(optarg, &p, 0);
			if (*p != '\0'
			    || wtime <= 0)
				goto usage;
			break;

		case 'r':
			not_trace = 1;
			if (rflag)
				goto usage;
			rflag = getnet(optarg, &OMSG.rip_nets[0]);
			if (!rflag) {
				struct hostent *hp = gethostbyname(optarg);
				if (hp == 0) {
					fprintf(stderr, "%s: %s:",
						pgmname, optarg);
					herror(0);
					exit(1);
				}
				bcopy(hp->h_addr, &OMSG.rip_nets[0].n_dst,
				      sizeof(OMSG.rip_nets[0].n_dst));
				OMSG.rip_nets[0].n_family = RIP_AF_INET;
				OMSG.rip_nets[0].n_mask = -1;
				rflag = 1;
			}
			break;

		case 't':
			trace = 1;
			options = optarg;
			while (*options != '\0') {
				char *traceopts[] = {
#				    define TRACE_ON	0
					"on",
#				    define TRACE_MORE	1
					"more",
#				    define TRACE_OFF	2
					"off",
#				    define TRACE_DUMP	3
					"dump",
					0
				};
				switch (getsubopt(&options,traceopts,&value)) {
				case TRACE_ON:
					OMSG.rip_cmd = RIPCMD_TRACEON;
					if (!value
					    || strlen(value) > MAXPATHLEN)
						goto usage;
					break;
				case TRACE_MORE:
					if (value)
						goto usage;
					OMSG.rip_cmd = RIPCMD_TRACEON;
					value = "";
					break;
				case TRACE_OFF:
					if (value)
						goto usage;
					OMSG.rip_cmd = RIPCMD_TRACEOFF;
					value = "";
					break;
				case TRACE_DUMP:
					if (value)
						goto usage;
					OMSG.rip_cmd = RIPCMD_TRACEON;
					value = "dump/../table";
					break;
				default:
					goto usage;
				}
				strlcpy((char*)OMSG.rip_tracefile, value,
				    (char*)&omsg_buf + sizeof omsg_buf -
				    (char*)OMSG.rip_tracefile);
				omsg_len += strlen(value) - sizeof(OMSG.ripun);
			}
			break;

		default:
			goto usage;
	}
	argv += optind;
	argc -= optind;
	if ((not_trace && trace) || argc == 0) {
usage:		fprintf(stderr,
		    "usage: %s [-1np] [-r addr] [-t op] [-w timeout]"
		    " host ...\n", pgmname);
		exit(1);
	}

	s = socket(AF_INET, SOCK_DGRAM, 0);
	if (s < 0) {
		perror("socket");
		exit(2);
	}

	/* be prepared to receive a lot of routes */
	for (bsize = 127*1024; ; bsize -= 1024) {
		if (setsockopt(s, SOL_SOCKET, SO_RCVBUF,
		    &bsize, sizeof(bsize)) == 0)
			break;
		if (bsize <= 4*1024) {
			perror("setsockopt SO_RCVBUF");
			break;
		}
	}

	if (trace)
		trace_loop(argv);
	else
		query_loop(argv, argc);
	/* NOTREACHED */
}


/* tell the target hosts about tracing
 */
static void
trace_loop(char *argv[])
{
	struct sockaddr_in myaddr;
	int res;

	if (geteuid() != 0) {
		(void)fprintf(stderr, "-t requires UID 0\n");
		exit(1);
	}

	if (ripv2) {
		OMSG.rip_vers = RIPv2;
	} else {
		OMSG.rip_vers = RIPv1;
	}

	bzero(&myaddr, sizeof(myaddr));
	myaddr.sin_family = AF_INET;
#ifdef _HAVE_SIN_LEN
	myaddr.sin_len = sizeof(myaddr);
#endif
	myaddr.sin_port = htons(IPPORT_RESERVED-1);
	while (bind(s, (struct sockaddr *)&myaddr, sizeof(myaddr)) < 0) {
		if (errno != EADDRINUSE || myaddr.sin_port == 0) {
			perror("bind");
			exit(2);
		}
		myaddr.sin_port = htons(ntohs(myaddr.sin_port)-1);
	}

	res = 1;
	while (*argv != 0) {
		if (out(*argv++) <= 0)
			res = 0;
	}
	exit(res);
}


/* query all of the listed hosts
 */
static void
query_loop(char *argv[], int argc)
{
	struct seen {
		struct seen *next;
		struct in_addr addr;
	} *seen, *sp;
	int answered = 0;
	int cc;
	fd_set bits;
	struct timeval now, delay;
	struct sockaddr_in from;
	socklen_t fromlen;

	OMSG.rip_cmd = (pflag) ? RIPCMD_POLL : RIPCMD_REQUEST;
	if (ripv2) {
		OMSG.rip_vers = RIPv2;
	} else {
		OMSG.rip_vers = RIPv1;
		OMSG.rip_nets[0].n_mask = 0;
	}

	/* ask the first (valid) host */
	seen = 0;
	while (0 > out(*argv++)) {
		if (*argv == 0)
			exit(1);
		answered++;
	}

	FD_ZERO(&bits);
	for (;;) {
		FD_SET(s, &bits);
		delay.tv_sec = 0;
		delay.tv_usec = STIME;
		cc = select(s+1, &bits, 0,0, &delay);
		if (cc > 0) {
			fromlen = sizeof(from);
			cc = recvfrom(s, imsg_buf.packet,
			    sizeof(imsg_buf.packet), 0,
			    (struct sockaddr *)&from, &fromlen);
			if (cc < 0) {
				perror("recvfrom");
				exit(1);
			}

			/*
			 * count the distinct responding hosts.
			 * You cannot match responding hosts with
			 * addresses to which queries were transmitted,
			 * because a router might respond with a
			 * different source address.
			 */
			for (sp = seen; sp != 0; sp = sp->next) {
				if (sp->addr.s_addr == from.sin_addr.s_addr)
					break;
			}
			if (sp == 0) {
				sp = malloc(sizeof(*sp));
				sp->addr = from.sin_addr;
				sp->next = seen;
				seen = sp;
				answered++;
			}

			rip_input(&from, cc);
			continue;
		}

		if (cc < 0) {
			if ( errno == EINTR)
				continue;
			perror("select");
			exit(1);
		}

		/* After a pause in responses, probe another host.
		 * This reduces the intermingling of answers.
		 */
		while (*argv != 0 && 0 > out(*argv++))
			answered++;

		/* continue until no more packets arrive
		 * or we have heard from all hosts
		 */
		if (answered >= argc)
			break;

		/* or until we have waited a long time
		 */
		if (gettimeofday(&now, 0) < 0) {
			perror("gettimeofday(now)");
			exit(1);
		}
		if (sent.tv_sec + wtime <= now.tv_sec)
			break;
	}

	/* fail if there was no answer */
	exit (answered >= argc ? 0 : 1);
}


/* sent do one host
 */
static int
out(char *host)
{
	struct sockaddr_in router;
	struct hostent *hp;

	if (gettimeofday(&sent, 0) < 0) {
		perror("gettimeofday(sent)");
		return -1;
	}

	bzero(&router, sizeof(router));
	router.sin_family = AF_INET;
#ifdef _HAVE_SIN_LEN
	router.sin_len = sizeof(router);
#endif
	if (!inet_aton(host, &router.sin_addr)) {
		hp = gethostbyname(host);
		if (hp == 0) {
			herror(host);
			return -1;
		}
		bcopy(hp->h_addr, &router.sin_addr, sizeof(router.sin_addr));
	}
	router.sin_port = htons(RIP_PORT);

	if (sendto(s, &omsg_buf, omsg_len, 0,
	    (struct sockaddr *)&router, sizeof(router)) < 0) {
		perror(host);
		return -1;
	}

	return 0;
}


/*
 * Handle an incoming RIP packet.
 */
static void
rip_input(struct sockaddr_in *from,
	  int size)
{
	struct netinfo *n, *lim;
	struct in_addr in;
	char *name;
	char net_buf[80];
	u_int mask, dmask;
	char *sp;
	int i;
	struct hostent *hp;
	struct netent *np;
	struct netauth *a;

	if (nflag) {
		printf("%s:", inet_ntoa(from->sin_addr));
	} else {
		hp = gethostbyaddr((char*)&from->sin_addr,
		    sizeof(struct in_addr), AF_INET);
		if (hp == 0) {
			printf("%s:", inet_ntoa(from->sin_addr));
		} else {
			printf("%s (%s):", hp->h_name,
			    inet_ntoa(from->sin_addr));
		}
	}
	if (IMSG.rip_cmd != RIPCMD_RESPONSE) {
		printf("\n    unexpected response type %d\n", IMSG.rip_cmd);
		return;
	}
	printf(" RIPv%d%s %d bytes\n", IMSG.rip_vers,
	    (IMSG.rip_vers != RIPv1 && IMSG.rip_vers != RIPv2) ? " ?" : "",
	    size);
	if (size > MAXPACKETSIZE) {
		if (size > sizeof(imsg_buf) - sizeof(*n)) {
			printf("       at least %d bytes too long\n",
			    size-MAXPACKETSIZE);
			size = sizeof(imsg_buf) - sizeof(*n);
		} else {
			printf("       %d bytes too long\n",
			    size-MAXPACKETSIZE);
		}
	} else if (size%sizeof(*n) != sizeof(struct rip)%sizeof(*n)) {
		printf("    response of bad length=%d\n", size);
	}

	n = IMSG.rip_nets;
	lim = (struct netinfo *)((char*)n + size) - 1;
	for (; n <= lim; n++) {
		name = "";
		if (n->n_family == RIP_AF_INET) {
			in.s_addr = n->n_dst;
			(void)strlcpy(net_buf, inet_ntoa(in), sizeof(net_buf));

			mask = ntohl(n->n_mask);
			dmask = mask & -mask;
			if (mask != 0) {
				sp = &net_buf[strlen(net_buf)];
				if (IMSG.rip_vers == RIPv1) {
					snprintf(sp,
					    net_buf + sizeof net_buf - sp,
					    " mask=%#x ? ",mask);
					mask = 0;
				} else if (mask + dmask == 0) {
					for (i = 0;
					    (i != 32 && ((1<<i)&mask) == 0);
					    i++)
						continue;
					snprintf(sp,
					    net_buf + sizeof net_buf - sp,
					    "/%d",32-i);
				} else
					snprintf(sp,
					    net_buf + sizeof net_buf - sp,
					    " (mask %#x)", mask);
			}

			if (!nflag) {
				if (mask == 0) {
					mask = std_mask(in.s_addr);
					if ((ntohl(in.s_addr) & ~mask) != 0)
						mask = 0;
				}
				/* Without a netmask, do not worry about
				 * whether the destination is a host or a
				 * network. Try both and use the first name
				 * we get.
				 *
				 * If we have a netmask we can make a
				 * good guess.
				 */
				if ((in.s_addr & ~mask) == 0) {
					np = getnetbyaddr(in.s_addr,
							  AF_INET);
					if (np != 0)
						name = np->n_name;
					else if (in.s_addr == 0)
						name = "default";
				}
				if (name[0] == '\0' &&
				    ((in.s_addr & ~mask) != 0 ||
				    mask == 0xffffffff)) {
					hp = gethostbyaddr((char*)&in,
					    sizeof(in), AF_INET);
					if (hp != 0)
						name = hp->h_name;
				}
			}

		} else if (n->n_family == RIP_AF_AUTH) {
			a = (struct netauth*)n;
			(void)printf("    authentication type %d: ",
			    a->a_type);
			for (i = 0; i < sizeof(a->au.au_pw); i++)
				(void)printf("%02x ", a->au.au_pw[i]);
			putc('\n', stdout);
			continue;

		} else {
			snprintf(net_buf, sizeof net_buf,
			    "(af %#x) %d.%d.%d.%d",
			    ntohs(n->n_family),
			    (char)(n->n_dst >> 24),
			    (char)(n->n_dst >> 16),
			    (char)(n->n_dst >> 8),
			    (char)n->n_dst);
		}

		(void)printf("  %-18s metric %2d %-10s",
		    net_buf, ntohl(n->n_metric), name);

		if (n->n_nhop != 0) {
			in.s_addr = n->n_nhop;
			if (nflag)
				hp = 0;
			else
				hp = gethostbyaddr((char*)&in, sizeof(in),
				    AF_INET);
			(void)printf(" nhop=%-15s%s",
			    (hp != 0) ? hp->h_name : inet_ntoa(in),
			    (IMSG.rip_vers == RIPv1) ? " ?" : "");
		}
		if (n->n_tag != 0)
			(void)printf(" tag=%#x%s", n->n_tag,
			    (IMSG.rip_vers == RIPv1) ? " ?" : "");
		putc('\n', stdout);
	}
}


/* Return the classical netmask for an IP address.
 */
static u_int
std_mask(u_int addr)			/* in network order */
{
	NTOHL(addr);			/* was a host, not a network */

	if (addr == 0)			/* default route has mask 0 */
		return 0;
	if (IN_CLASSA(addr))
		return IN_CLASSA_NET;
	if (IN_CLASSB(addr))
		return IN_CLASSB_NET;
	return IN_CLASSC_NET;
}


/* get a network number as a name or a number, with an optional "/xx"
 * netmask.
 */
static int				/* 0=bad */
getnet(char *name,
       struct netinfo *rt)
{
	int i;
	struct netent *nentp;
	u_int mask;
	struct in_addr in;
	char hname[MAXHOSTNAMELEN+1];
	char *mname, *p;

	/* Detect and separate "1.2.3.4/24" */
	if (0 != (mname = strrchr(name,'/'))) {
		i = (int)(mname - name);
		if (i > sizeof(hname)-1)	/* name too long */
			return 0;
		bcopy(name, hname, i);
		hname[i] = '\0';
		mname++;
		name = hname;
	}

	nentp = getnetbyname(name);
	if (nentp != 0) {
		in.s_addr = nentp->n_net;
	} else if (inet_aton(name, &in) == 1) {
		NTOHL(in.s_addr);
	} else {
		return 0;
	}

	if (mname == 0) {
		mask = std_mask(in.s_addr);
		if ((~mask & in.s_addr) != 0)
			mask = 0xffffffff;
	} else {
		mask = (u_int)strtoul(mname, &p, 0);
		if (*p != '\0' || mask > 32)
			return 0;
		mask = 0xffffffff << (32-mask);
	}

	rt->n_dst = htonl(in.s_addr);
	rt->n_family = RIP_AF_INET;
	rt->n_mask = htonl(mask);
	return 1;
}
@


1.18
log
@usage messages should have the form "usage: command [arguments]"

ok jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rtquery.c,v 1.17 2005/04/12 15:26:47 cloder Exp $	*/
@


1.17
log
@A little bit of cleanup (missing format string arguments, some signed/
unsigned conversion). OK henning
@
text
@d1 1
a1 1
/*	$OpenBSD: rtquery.c,v 1.16 2005/03/23 18:03:52 jmc Exp $	*/
d214 3
a216 3
usage:		fprintf(stderr, "%s: [-1np] [-r addr] [-t op] [-w timeout]"
		    " host ...\n",
		    pgmname);
@


1.16
log
@- remove references to gated
- add -t to synopsis
- sort options
- sync usage()
- use Rs/Re for references
- fix list placement
- make clear that rtquery queries ripv1/2 routing daemons

much help + ok henning@@ claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rtquery.c,v 1.15 2003/06/02 20:06:17 millert Exp $	*/
d40 1
d301 1
a301 1
	int fromlen;
@


1.15
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: rtquery.c,v 1.14 2003/04/26 03:26:43 krw Exp $	*/
d213 2
a214 3
usage:		fprintf(stderr, "%s: [-np1] [-r tgt_rt] [-w wtime]"
		    " host1 [host2 ...]\n"
		    "or\t-t {on=filename|more|off} host1 host2 ...\n",
@


1.14
log
@strcpy -> strlcpy.

ok dhartmei@@ deraadt@@ (and tdeval@@ with stylistic reservations)
@
text
@d1 1
a1 1
/*	$OpenBSD: rtquery.c,v 1.13 2003/04/06 00:45:12 deraadt Exp $	*/
d15 1
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.13
log
@string handling; ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: rtquery.c,v 1.12 2003/04/04 00:46:24 deraadt Exp $	*/
d204 3
a206 1
				strcpy((char*)OMSG.rip_tracefile, value);
@


1.12
log
@knf & one snprintf; tedu ok
@
text
@d1 1
a1 1
/*	$OpenBSD: rtquery.c,v 1.11 2003/03/11 02:32:31 deraadt Exp $	*/
d495 3
a497 1
					sprintf(sp," mask=%#x ? ",mask);
d504 3
a506 1
					sprintf(sp, "/%d",32-i);
d508 3
a510 1
					sprintf(sp," (mask %#x)", mask);
@


1.11
log
@strcpy -> strlcpy; Hans-Joerg.Hoexer@@yerbouti.franken.de
@
text
@d1 1
a1 1
/*	$OpenBSD: rtquery.c,v 1.10 2001/03/08 21:41:49 deraadt Exp $	*/
d106 1
a106 2
main(int argc,
     char *argv[])
d216 3
a218 3
			" host1 [host2 ...]\n"
			"or\t-t {on=filename|more|off} host1 host2 ...\n",
			pgmname);
d231 1
a231 1
			       &bsize, sizeof(bsize)) == 0)
d273 1
a273 2
		if (errno != EADDRINUSE
		    || myaddr.sin_port == 0) {
a304 1

d330 2
a331 2
				      sizeof(imsg_buf.packet), 0,
				      (struct sockaddr *)&from, &fromlen);
d336 3
a338 1
			/* count the distinct responding hosts.
d423 1
a423 1
		   (struct sockaddr *)&router, sizeof(router)) < 0) {
a449 1

d454 1
a454 1
				   sizeof(struct in_addr), AF_INET);
d456 1
a456 2
			printf("%s:",
			       inet_ntoa(from->sin_addr));
d459 1
a459 1
			       inet_ntoa(from->sin_addr));
d467 2
a468 2
	       (IMSG.rip_vers != RIPv1 && IMSG.rip_vers != RIPv2) ? " ?" : "",
	       size);
d472 1
a472 1
			       size-MAXPACKETSIZE);
d476 1
a476 1
			       size-MAXPACKETSIZE);
d495 1
a495 1
					(void)sprintf(sp," mask=%#x ? ",mask);
d499 2
a500 3
					     (i != 32
					      && ((1<<i)&mask) == 0);
					     i++)
d502 3
a504 4
					(void)sprintf(sp, "/%d",32-i);
				} else {
					(void)sprintf(sp," (mask %#x)", mask);
				}
d529 3
a531 3
				if (name[0] == '\0'
				    && ((in.s_addr & ~mask) != 0
					|| mask == 0xffffffff)) {
d533 1
a533 2
							   sizeof(in),
							   AF_INET);
d542 1
a542 1
				     a->a_type);
d549 7
a555 6
			(void)sprintf(net_buf, "(af %#x) %d.%d.%d.%d",
				      ntohs(n->n_family),
				      (char)(n->n_dst >> 24),
				      (char)(n->n_dst >> 16),
				      (char)(n->n_dst >> 8),
				      (char)n->n_dst);
d559 1
a559 1
			     net_buf, ntohl(n->n_metric), name);
d567 1
a567 1
						   AF_INET);
d569 2
a570 2
				     (hp != 0) ? hp->h_name : inet_ntoa(in),
				     (IMSG.rip_vers == RIPv1) ? " ?" : "");
d574 1
a574 1
				     (IMSG.rip_vers == RIPv1) ? " ?" : "");
d611 1
a611 3

	/* Detect and separate "1.2.3.4/24"
	 */
@


1.10
log
@whack exit(-#)
@
text
@d1 1
a1 1
/*	$OpenBSD: rtquery.c,v 1.9 1998/06/01 07:23:41 deraadt Exp $	*/
d491 1
a491 1
			(void)strcpy(net_buf, inet_ntoa(in));
@


1.9
log
@no -v option; mason@@primenet.com.au
@
text
@d1 1
a1 1
/*	$OpenBSD: rtquery.c,v 1.8 1997/07/30 23:28:58 deraadt Exp $	*/
d320 1
a320 1
			exit(-1);
@


1.8
log
@new routed DOES NOT EVEN COMPILE LET ALONE WORK.  TEST YOUR WORK!
Also, put back the damn security check in input.c that has been deleted
TWO SEPERATE TIMES NOW!  I CURSE anyone who deletes that check again.
@
text
@d1 1
a1 1
/*	$OpenBSD: rtquery.c,v 1.6 1997/06/30 06:33:31 deraadt Exp $	*/
d216 1
a216 1
usage:		fprintf(stderr, "%s: [-np1v] [-r tgt_rt] [-w wtime]"
@


1.7
log
@update to sgi-02apr97
still have problems w/ defaults from pppd
@
text
@d1 1
a1 1
/*	$OpenBSD: rtquery.c,v 1.5 1997/01/17 07:12:25 millert Exp $	*/
a66 11
#define MD5_DIGEST_LEN 16
typedef struct {
	u_int32_t state[4];		/* state (ABCD) */
	u_int32_t count[2];		/* # of bits, modulo 2^64 (LSB 1st) */
	unsigned char buffer[64];	/* input buffer */
} MD5_CTX;
extern void MD5Init(MD5_CTX*);
extern void MD5Update(MD5_CTX*, u_char*, u_int);
extern void MD5Final(u_char[MD5_DIGEST_LEN], MD5_CTX*);


d92 2
a93 4
int	trace, not_trace;		/* send trace command or not */
int	auth_type = RIP_AUTH_NONE;
char	passwd[RIP_AUTH_PW_LEN];
u_long	keyid;
a102 1
static int parse_quote(char **, char *, char *, char *, int);
d105 1
a105 1
void
d110 1
a110 1
	char *p, *options, *value, delim;
d117 1
a117 1
	while ((ch = getopt(argc, argv, "np1w:r:t:a:")) != -1)
a209 25
		case 'a':
			not_trace = 1;
			p = strchr(optarg,'=');
			if (!p)
				goto usage;
			*p++ = '\0';
			if (!strcasecmp("passwd",optarg))
				auth_type = RIP_AUTH_PW;
			else if (!strcasecmp("md5_passwd",optarg))
				auth_type = RIP_AUTH_MD5;
			else
				goto usage;
			if (0 > parse_quote(&p,"|",&delim,
					    passwd,sizeof(passwd)))
				goto usage;
			if (auth_type == RIP_AUTH_MD5
			    && delim == '|') {
				keyid = strtoul(p+1,&p,0);
				if (keyid > 255 || *p != '\0')
					goto usage;
			} else if (delim != '\0') {
				goto usage;
			}
			break;

d217 2
a218 3
			" [-a type=passwd] host1 [host2 ...]\n"
			"or\t-t {on=filename|more|off|dump}"
			" host1 [host2 ...]\n",
a295 2
#	define NA0 (OMSG.rip_auths[0])
#	define NA2 (OMSG.rip_auths[2])
a305 1
	MD5_CTX md5_ctx;
a310 26
		if (auth_type == RIP_AUTH_PW) {
			OMSG.rip_nets[1] = OMSG.rip_nets[0];
			NA0.a_family = RIP_AF_AUTH;
			NA0.a_type = RIP_AUTH_PW;
			bcopy(passwd, NA0.au.au_pw,
			      RIP_AUTH_PW_LEN);
			omsg_len += sizeof(OMSG.rip_nets[0]);

		} else if (auth_type == RIP_AUTH_MD5) {
			OMSG.rip_nets[1] = OMSG.rip_nets[0];
			NA0.a_family = RIP_AF_AUTH;
			NA0.a_type = RIP_AUTH_MD5;
			NA0.au.a_md5.md5_keyid = (int8_t)keyid;
			NA0.au.a_md5.md5_auth_len = RIP_AUTH_PW_LEN;
			NA0.au.a_md5.md5_seqno = 0;
			NA0.au.a_md5.md5_pkt_len = sizeof(OMSG.rip_nets[1]);
			NA2.a_family = RIP_AF_AUTH;
			NA2.a_type = 1;
			bcopy(passwd, NA2.au.au_pw, sizeof(NA2.au.au_pw));
			MD5Init(&md5_ctx);
			MD5Update(&md5_ctx, (u_char *)&NA0,
				  (char *)(&NA2+1) - (char *)&NA0);
			MD5Final(NA2.au.au_pw, &md5_ctx);
			omsg_len += 2*sizeof(OMSG.rip_nets[0]);
		}

d395 1
a395 1
/* send to one host
a433 54
 * Convert string to printable characters
 */
static char *
qstring(u_char *s, int len)
{
	static char buf[8*20+1];
	char *p;
	u_char *s2, c;


	for (p = buf; len != 0 && p < &buf[sizeof(buf)-1]; len--) {
		c = *s++;
		if (c == '\0') {
			for (s2 = s+1; s2 < &s[len]; s2++) {
				if (*s2 != '\0')
					break;
			}
			if (s2 >= &s[len])
			    goto exit;
		}

		if (c >= ' ' && c < 0x7f && c != '\\') {
			*p++ = c;
			continue;
		}
		*p++ = '\\';
		switch (c) {
		case '\\':
			*p++ = '\\';
			break;
		case '\n':
			*p++= 'n';
			break;
		case '\r':
			*p++= 'r';
			break;
		case '\t':
			*p++ = 't';
			break;
		case '\b':
			*p++ = 'b';
			break;
		default:
			p += sprintf(p,"%o",c);
			break;
		}
	}
exit:
	*p = '\0';
	return buf;
}


/*
d449 1
a449 1
	struct netauth *na;
d546 5
a550 27
			na = (struct netauth*)n;
			if (na->a_type == RIP_AUTH_PW
			    && n == IMSG.rip_nets) {
				(void)printf("  Password Authentication:"
					     " \"%s\"\n",
					     qstring(na->au.au_pw,
						     RIP_AUTH_PW_LEN));
				continue;
			}

			if (na->a_type == RIP_AUTH_MD5
			    && n == IMSG.rip_nets) {
				(void)printf("  MD5 Authentication"
					     " len=%d KeyID=%d"
					     " seqno=%d"
					     " rsvd=%#x,%#x\n",
					     na->au.a_md5.md5_pkt_len,
					     na->au.a_md5.md5_keyid,
					     na->au.a_md5.md5_seqno,
					     na->au.a_md5.rsvd[0],
					     na->au.a_md5.rsvd[1]);
				continue;
			}
			(void)printf("  Authentication type %d: ",
				     ntohs(na->a_type));
			for (i = 0; i < sizeof(na->au.au_pw); i++)
				(void)printf("%02x ", na->au.au_pw[i]);
a652 61
}


/* strtok(), but honoring backslash
 */
static int				/* -1=bad */
parse_quote(char **linep,
	    char *delims,
	    char *delimp,
	    char *buf,
	    int	lim)
{
	char c, *pc, *p;


	pc = *linep;
	if (*pc == '\0')
		return -1;

	for (;;) {
		if (lim == 0)
			return -1;
		c = *pc++;
		if (c == '\0')
			break;

		if (c == '\\' && pc != '\0') {
			if ((c = *pc++) == 'n') {
				c = '\n';
			} else if (c == 'r') {
				c = '\r';
			} else if (c == 't') {
				c = '\t';
			} else if (c == 'b') {
				c = '\b';
			} else if (c >= '0' && c <= '7') {
				c -= '0';
				if (*pc >= '0' && *pc <= '7') {
					c = (c<<3)+(*pc++ - '0');
					if (*pc >= '0' && *pc <= '7')
					    c = (c<<3)+(*pc++ - '0');
				}
			}

		} else {
			for (p = delims; *p != '\0'; ++p) {
				if (*p == c)
					goto exit;
			}
		}

		*buf++ = c;
		--lim;
	}
exit:
	if (delimp != 0)
		*delimp = c;
	*linep = pc-1;
	if (lim != 0)
		*buf = '\0';
	return 0;
@


1.6
log
@s_addr is not long
@
text
@d67 11
d103 4
a106 2
int	trace;
int	not_trace;
d116 1
d119 1
a119 1
int
d124 1
a124 1
	char *p, *options, *value;
d131 1
a131 1
	while ((ch = getopt(argc, argv, "np1w:r:t:")) != -1)
d224 25
d256 3
a258 2
			" host1 [host2 ...]\n"
			"or\t-t {on=filename|more|off} host1 host2 ...\n",
d336 2
d348 1
d354 26
d464 1
a464 1
/* sent do one host
d503 54
d572 1
a572 1
	struct netauth *a;
d669 27
a695 5
			a = (struct netauth*)n;
			(void)printf("    authentication type %d: ",
				     a->a_type);
			for (i = 0; i < sizeof(a->au.au_pw); i++)
				(void)printf("%02x ", a->au.au_pw[i]);
d798 61
@


1.5
log
@r?index -> strr?chr
@
text
@d1 1
a1 1
/*	$OpenBSD: $	*/
d527 1
a527 1
					np = getnetbyaddr((long)in.s_addr,
@


1.4
log
@getopt(3) returns -1 when out of args, not EOF, whee!
@
text
@d619 1
a619 1
	if (0 != (mname = rindex(name,'/'))) {
@


1.3
log
@update to the latest version from Sep 12.
@
text
@d117 1
a117 1
	while ((ch = getopt(argc, argv, "np1w:r:t:")) != EOF)
@


1.2
log
@Fix OpenBSD tags
@
text
@d173 2
a182 3
					strcpy((char*)OMSG.rip_tracefile,value);
					omsg_len += (strlen(value)
						     - sizeof(OMSG.ripun));
d188 1
a188 1
					OMSG.rip_tracefile[0] = '\0';
d194 7
a200 1
					OMSG.rip_tracefile[0] = '\0';
d205 2
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.1.1.1
log
@new routed from SGI.
rip1, rip2, icmp, rdisc.
@
text
@@
