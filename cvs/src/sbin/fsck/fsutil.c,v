head	1.22;
access;
symbols
	OPENBSD_6_2_BASE:1.22
	OPENBSD_6_1:1.22.0.8
	OPENBSD_6_1_BASE:1.22
	OPENBSD_6_0:1.22.0.4
	OPENBSD_6_0_BASE:1.22
	OPENBSD_5_9:1.22.0.2
	OPENBSD_5_9_BASE:1.22
	OPENBSD_5_8:1.21.0.4
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.20.0.2
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.18.0.18
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.18.0.16
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.18.0.12
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.18.0.10
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.8
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.6
	OPENBSD_5_0:1.18.0.4
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.18.0.2
	OPENBSD_4_9_BASE:1.18
	OPENBSD_4_8:1.17.0.4
	OPENBSD_4_8_BASE:1.17
	OPENBSD_4_7:1.17.0.2
	OPENBSD_4_7_BASE:1.17
	OPENBSD_4_6:1.16.0.14
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.10
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.8
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.6
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.16.0.4
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.16.0.2
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.15.0.2
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.13.0.10
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.8
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.6
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.4
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.13.0.2
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.12.0.2
	OPENBSD_3_4_BASE:1.12
	OPENBSD_3_3:1.8.0.4
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.2.0.16
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.14
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.12
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.10
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.8
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.6
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.4
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.2
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.1.0.2
	OPENBSD_2_1_BASE:1.1;
locks; strict;
comment	@ * @;


1.22
date	2015.09.27.05.25.00;	author guenther;	state Exp;
branches;
next	1.21;
commitid	PQh1CHLROh0mqpnf;

1.21
date	2015.05.29.15.57.36;	author deraadt;	state Exp;
branches;
next	1.20;
commitid	VDx2WmQh1k2U00FL;

1.20
date	2015.01.16.06.39.57;	author deraadt;	state Exp;
branches;
next	1.19;
commitid	Uu5nFG3wCl0LACBb;

1.19
date	2014.10.08.16.27.53;	author deraadt;	state Exp;
branches;
next	1.18;
commitid	0zFRxN2apca4J66f;

1.18
date	2010.08.12.15.26.34;	author jsing;	state Exp;
branches;
next	1.17;

1.17
date	2009.10.27.23.59.32;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2007.02.17.15.57.14;	author grunk;	state Exp;
branches;
next	1.15;

1.15
date	2006.05.28.15.43.41;	author thib;	state Exp;
branches;
next	1.14;

1.14
date	2006.05.27.22.30.09;	author thib;	state Exp;
branches;
next	1.13;

1.13
date	2003.09.25.04.15.29;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2003.07.29.18.38.35;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.26.08.01.54;	author tedu;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.02.20.06.14;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2003.04.16.02.57.51;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2002.09.06.21.16.16;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2002.07.03.22.32.32;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.19.19.39.38;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.16.21.27.34;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.07.03.13.03.44;	author ian;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.15.22.03.03;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	97.07.25.19.13.18;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	96.10.20.08.36.25;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.22
log
@lint is dead: delete the trivial uses of /* VARARGS[0-9]+ */
(others require more care)
@
text
@/*	$OpenBSD: fsutil.c,v 1.21 2015/05/29 15:57:36 deraadt Exp $	*/
/*	$NetBSD: fsutil.c,v 1.2 1996/10/03 20:06:31 christos Exp $	*/

/*
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdarg.h>
#include <errno.h>
#include <fstab.h>
#include <limits.h>
#include <err.h>

#include <sys/types.h>
#include <sys/stat.h>

#include "fsutil.h"

static const char *dev = NULL;
static const char *origdev = NULL;
static int hot = 0;
static int preen = 0;

extern char *__progname;

static void vmsg(int, const char *, va_list);

void
setcdevname(const char *cd, const char *ocd, int pr)
{
	dev = cd;
	origdev = ocd;
	preen = pr;
}

const char *
cdevname(void)
{
	return dev;
}

int
hotroot(void)
{
	return hot;
}

void
errexit(const char *fmt, ...)
{
	va_list ap;

	va_start(ap, fmt);
	(void) vfprintf(stderr, fmt, ap);
	va_end(ap);
	exit(8);
}

static void
vmsg(int fatal, const char *fmt, va_list ap)
{
	if (!fatal && preen) {
		if (origdev)
			printf("%s (%s): ", dev, origdev);
		else
			printf("%s: ", dev);
	}

	(void) vprintf(fmt, ap);
	
	if (fatal && preen) {
		printf("\n");
		if (origdev)
			printf("%s (%s): ", dev, origdev);
		else
			printf("%s: ", dev);
		printf("UNEXPECTED INCONSISTENCY; RUN %s MANUALLY.\n",
		    __progname);
		exit(8);
	}
}

void
pfatal(const char *fmt, ...)
{
	va_list ap;

	va_start(ap, fmt);
	vmsg(1, fmt, ap);
	va_end(ap);
}

void
pwarn(const char *fmt, ...)
{
	va_list ap;

	va_start(ap, fmt);
	vmsg(0, fmt, ap);
	va_end(ap);
}

void
xperror(const char *s)
{
	pfatal("%s (%s)", s, strerror(errno));
}

void
panic(const char *fmt, ...)
{
	va_list ap;

	va_start(ap, fmt);
	vmsg(1, fmt, ap);
	va_end(ap);
	exit(8);
}

char *
unrawname(char *name)
{
	char *dp;
	struct stat stb;

	if ((dp = strrchr(name, '/')) == NULL)
		return (name);
	if (stat(name, &stb) < 0)
		return (name);
	if (!S_ISCHR(stb.st_mode))
		return (name);
	if (dp[1] != 'r')
		return (name);
	(void)memmove(&dp[1], &dp[2], strlen(&dp[2]) + 1);
	return (name);
}

char *
rawname(char *name)
{
	static char rawbuf[PATH_MAX];
	char *dp;

	if ((dp = strrchr(name, '/')) == NULL)
		return (0);
	*dp = 0;
	(void)strlcpy(rawbuf, name, sizeof rawbuf);
	*dp = '/';
	(void)strlcat(rawbuf, "/r", sizeof rawbuf);
	(void)strlcat(rawbuf, &dp[1], sizeof rawbuf);
	return (rawbuf);
}

char *
blockcheck(char *origname)
{
	struct stat stslash, stblock, stchar;
	char *newname, *raw;
	struct fstab *fsp;
	int retried = 0;

	hot = 0;
	if (stat("/", &stslash) < 0) {
		xperror("/");
		printf("Can't stat root\n");
		return (origname);
	}
	newname = origname;
retry:
	if (stat(newname, &stblock) < 0)
		return (origname);

	if (S_ISBLK(stblock.st_mode)) {
		if (stslash.st_dev == stblock.st_rdev)
			hot++;
		raw = rawname(newname);
		if (stat(raw, &stchar) < 0) {
			xperror(raw);
			printf("Can't stat %s\n", raw);
			return (origname);
		}
		if (S_ISCHR(stchar.st_mode)) {
			return (raw);
		} else {
			printf("%s is not a character device\n", raw);
			return (origname);
		}
	} else if (S_ISCHR(stblock.st_mode) && !retried) {
		newname = unrawname(newname);
		retried++;
		goto retry;
	} else if ((fsp = getfsfile(newname)) != 0 && !retried) {
		newname = fsp->fs_spec;
		retried++;
		goto retry;
	}
	/*
	 * Not a block or character device, just return name and
	 * let the user decide whether to use it.
	 */
	return (origname);
}


void *
emalloc(size_t s)
{
	void *p;

	if (s == 0)
		err(1, "malloc failed");
	p = malloc(s);
	if (p == NULL)
		err(1, "malloc failed");
	return p;
}


void *
ereallocarray(void *p, size_t n, size_t s)
{
	void *newp;

	if (n == 0 || s == 0) {
		free(p);
		err(1, "realloc failed");
	}
	newp = reallocarray(p, n, s);
	if (newp == NULL) {
		free(p);
		err(1, "realloc failed");
	}
	return newp;
}


char *
estrdup(const char *s)
{
	char *p = strdup(s);
	if (p == NULL)
		err(1, "strdup failed");
	return p;
}
@


1.21
log
@do not need non-NULL-check before free(p), other minor refactoring
from Benjamin Baier
@
text
@d1 1
a1 1
/*	$OpenBSD: fsutil.c,v 1.20 2015/01/16 06:39:57 deraadt Exp $	*/
a75 1
/*VARARGS*/
a110 1
/*VARARGS*/
a120 1
/*VARARGS*/
@


1.20
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: fsutil.c,v 1.19 2014/10/08 16:27:53 deraadt Exp $	*/
d255 2
a256 1
	if (s == 0)
d258 1
d261 1
a261 2
		if (p)
			free(p);
@


1.19
log
@replace internal erealloc() with ereallocarray(), and then use it to
spot mult int overflow
@
text
@d1 1
a1 1
/*	$OpenBSD: fsutil.c,v 1.18 2010/08/12 15:26:34 jsing Exp $	*/
a32 1
#include <sys/param.h>
d39 1
d172 1
a172 1
	static char rawbuf[MAXPATHLEN];
@


1.18
log
@Print the real device name followed by the disklabel UID in parenthesis
when fsck is run against a disklabel UID. This allows a user to determine
which device is really being scanned.

ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fsutil.c,v 1.16 2007/02/17 15:57:14 grunk Exp $	*/
d251 1
a251 1
erealloc(void *p, size_t s)
d257 1
a257 1
	newp = realloc(p, s);
@


1.17
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d48 1
d57 1
a57 1
setcdevname(const char *cd, int pr)
d60 1
d91 6
a96 2
	if (!fatal && preen)
		(void) printf("%s: ", dev);
d101 7
a107 4
		(void) printf("\n");
		(void) printf(
		    "%s: UNEXPECTED INCONSISTENCY; RUN %s MANUALLY.\n",
		    dev, __progname);
@


1.16
log
@silence fsck_{e2fs,ffs} when being put to work on non-existing filenames

idea from and ok pedro@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fsutil.c,v 1.15 2006/05/28 15:43:41 thib Exp $	*/
a31 3
#ifndef lint
static const char rcsid[] = "$OpenBSD: fsutil.c,v 1.15 2006/05/28 15:43:41 thib Exp $";
#endif /* not lint */
@


1.15
log
@revert a part of last commit causes newline
proplems during boot.

pointed out by sturm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fsutil.c,v 1.14 2006/05/27 22:30:09 thib Exp $	*/
d33 1
a33 1
static const char rcsid[] = "$OpenBSD: fsutil.c,v 1.14 2006/05/27 22:30:09 thib Exp $";
d195 1
a195 3
	if (stat(newname, &stblock) < 0) {
		xperror(newname);
		printf("Can't stat %s\n", newname);
d197 1
a197 1
	}
@


1.14
log
@newline fix + s/perror/xperror since we are
using a home rolled version.

ok pedro@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fsutil.c,v 1.13 2003/09/25 04:15:29 deraadt Exp $	*/
d33 1
a33 1
static const char rcsid[] = "$OpenBSD: fsutil.c,v 1.13 2003/09/25 04:15:29 deraadt Exp $";
d96 1
a96 1
	printf("\n");
d98 1
@


1.13
log
@p = realloc(p is not allowed
@
text
@d1 1
a1 1
/*	$OpenBSD: fsutil.c,v 1.12 2003/07/29 18:38:35 deraadt Exp $	*/
d33 1
a33 1
static const char rcsid[] = "$OpenBSD: fsutil.c,v 1.12 2003/07/29 18:38:35 deraadt Exp $";
d96 1
a96 1

a97 1
		(void) printf("\n");
d128 1
a128 1
perror(const char *s)
d188 1
a188 1
		perror("/");
d195 1
a195 1
		perror(newname);
d204 1
a204 1
			perror(raw);
@


1.12
log
@spaces
@
text
@d1 1
a1 1
/*	$OpenBSD: fsutil.c,v 1.11 2003/06/26 08:01:54 tedu Exp $	*/
d33 1
a33 1
static const char rcsid[] = "$OpenBSD: fsutil.c,v 1.11 2003/06/26 08:01:54 tedu Exp $";
d249 2
d253 4
a256 2
	p = realloc(p, s);
	if (p == NULL)
d258 2
a259 1
	return p;
@


1.11
log
@const the rcsid, and make it say OpenBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: fsutil.c,v 1.10 2003/06/02 20:06:14 millert Exp $	*/
d33 1
a33 1
static const char rcsid[] = "$OpenBSD$";
d82 1
a82 1
	
d111 1
a111 1
	
d122 1
a122 1
	
d138 1
a138 1
	
@


1.10
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: fsutil.c,v 1.9 2003/04/16 02:57:51 deraadt Exp $	*/
d33 1
a33 1
static char rcsid[] = "$NetBSD: fsutil.c,v 1.2 1996/10/03 20:06:31 christos Exp $";
@


1.9
log
@string cleaning
@
text
@d1 1
a1 1
/*	$OpenBSD: fsutil.c,v 1.8 2002/09/06 21:16:16 deraadt Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.8
log
@support long names; henning ok
@
text
@d1 1
a1 1
/*	$OpenBSD: fsutil.c,v 1.7 2002/07/03 22:32:32 deraadt Exp $	*/
d163 1
a163 1
	(void)strcpy(&dp[1], &dp[2]);
@


1.7
log
@ansi
@
text
@d1 1
a1 1
/*	$OpenBSD: fsutil.c,v 1.6 2002/02/19 19:39:38 millert Exp $	*/
d40 1
d155 1
a155 1
	if ((dp = strrchr(name, '/')) == 0)
d170 1
a170 1
	static char rawbuf[32];
d173 1
a173 1
	if ((dp = strrchr(name, '/')) == 0)
d176 1
a176 1
	(void)strcpy(rawbuf, name);
d178 2
a179 2
	(void)strcat(rawbuf, "/r");
	(void)strcat(rawbuf, &dp[1]);
@


1.6
log
@We live in an ANSI C world.  Remove lots of gratuitous #ifdef __STDC__ cruft.
@
text
@d1 1
a1 1
/*	$OpenBSD: fsutil.c,v 1.5 2002/02/16 21:27:34 millert Exp $	*/
d62 1
a62 3
setcdevname(cd, pr)
	const char *cd;
	int pr;
d69 1
a69 1
cdevname()
d75 1
a75 1
hotroot()
d93 1
a93 4
vmsg(fatal, fmt, ap)
	int fatal;
	const char *fmt;
	va_list ap;
d132 1
a132 2
perror(s)
	const char *s;
d149 1
a149 2
unrawname(name)
	char *name;
d167 1
a167 2
rawname(name)
	char *name;
d183 1
a183 2
blockcheck(origname)
	char *origname;
d236 1
a236 2
emalloc(s)
	size_t s;
d250 1
a250 3
erealloc(p, s)
	void *p;
	size_t s;
d262 1
a262 2
estrdup(s)
	const char *s;
@


1.5
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: fsutil.c,v 1.4 2001/07/03 13:03:44 ian Exp $	*/
a42 1
#ifdef __STDC__
a43 3
#else
#include <varargs.h>
#endif
a83 1
#ifdef __STDC__
a84 5
#else
errexit(fmt, va_alist)
	char *fmt;
	va_dcl
#endif
a87 1
#ifdef __STDC__
a88 3
#else
	va_start(ap);
#endif
a115 1
#ifdef __STDC__
a116 5
#else
pfatal(fmt, va_alist)
	char *fmt;
	va_dcl
#endif
a119 1
#ifdef __STDC__
a120 3
#else
	va_start(ap);
#endif
a126 1
#ifdef __STDC__
a127 5
#else
pwarn(fmt, va_alist)
	char *fmt;
	va_dcl
#endif
a130 1
#ifdef __STDC__
a131 3
#else
	va_start(ap);
#endif
a143 1
#ifdef __STDC__
a144 5
#else
panic(fmt, va_alist)
	char *fmt;
	va_dcl
#endif
a147 1
#ifdef __STDC__
a148 3
#else
	va_start(ap);
#endif
@


1.4
log
@Put missing \n's in som error messages; consolidate redundant "if" (OK theo@@).
@
text
@d1 1
a1 1
/*	$OpenBSD: fsutil.c,v 1.3 2001/05/15 22:03:03 deraadt Exp $	*/
d63 1
a63 1
static void vmsg __P((int, const char *, va_list));
@


1.3
log
@do not permit emalloc/erealloc of 0 sized objects
@
text
@d1 1
a1 1
/*	$OpenBSD: fsutil.c,v 1.2 1997/07/25 19:13:18 mickey Exp $	*/
d119 1
a119 1
	if (fatal && preen)
a120 2

	if (fatal && preen) {
@


1.2
log
@#if __STDC__ --> #ifdef __STDC__
@
text
@d1 1
a1 1
/*	$OpenBSD: fsutil.c,v 1.1 1996/10/20 08:36:25 tholo Exp $	*/
d294 5
a298 1
	void *p = malloc(s);
d310 2
@


1.1
log
@Sync with NetBSD 961019
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d43 1
a43 1
#if __STDC__
d88 1
a88 1
#if __STDC__
d98 1
a98 1
#if __STDC__
d132 1
a132 1
#if __STDC__
d142 1
a142 1
#if __STDC__
d153 1
a153 1
#if __STDC__
d163 1
a163 1
#if __STDC__
d180 1
a180 1
#if __STDC__
d190 1
a190 1
#if __STDC__
@
