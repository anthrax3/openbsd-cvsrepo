head	1.6;
access;
symbols
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.10
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.6
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.8
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.5.0.68
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.64
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.62
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.60
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.58
	OPENBSD_5_0:1.5.0.56
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.54
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.52
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.48
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.50
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.46
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.44
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.42
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.40
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.38
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.36
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.34
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.32
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.30
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.28
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.26
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.24
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.22
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.20
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.18
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.16
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.14
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.12
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.10
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.8
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.6
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.4
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.6
date	2014.06.16.18.33.33;	author tobias;	state Exp;
branches;
next	1.5;
commitid	PhPZAfTlrgjKIup9;

1.5
date	98.01.11.20.40.31;	author provos;	state Exp;
branches;
next	1.4;

1.4
date	97.02.28.08.36.11;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.06.23.14.30.42;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.06.10.04.38.16;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	96.05.22.11.23.54;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Merge NetBSD commit:
Move to 2 clause license, approved by Wolfgang Solfrank.

ok deraadt@@, krw@@
@
text
@/*	$OpenBSD: dosfs.h,v 1.5 1998/01/11 20:40:31 provos Exp $	*/
/*	$NetBSD: dosfs.h,v 1.5 1997/10/17 11:19:41 ws Exp $	*/

/*
 * Copyright (C) 1995, 1996, 1997 Wolfgang Solfrank
 * Copyright (c) 1995 Martin Husemann
 * Some structure declaration borrowed from Paul Popelka
 * (paulp@@uts.amdahl.com), see /sys/msdosfs/ for reference.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef DOSFS_H
#define DOSFS_H

#define DOSBOOTBLOCKSIZE 512

typedef	u_int32_t	cl_t;	/* type holding a cluster number */

/*
 * architecture independent description of all the info stored in a
 * FAT boot block.
 */
struct bootblock {
	u_int	BytesPerSec;		/* bytes per sector */
	u_int	SecPerClust;		/* sectors per cluster */
	u_int	ResSectors;		/* number of reserved sectors */
	u_int	FATs;			/* number of FATs */
	u_int	RootDirEnts;		/* number of root directory entries */
	u_int	Media;			/* media descriptor */
	u_int	FATsmall;		/* number of sectors per FAT */
	u_int	SecPerTrack;		/* sectors per track */
	u_int	Heads;			/* number of heads */
	u_int32_t Sectors;		/* total number of sectors */
	u_int32_t HiddenSecs;		/* # of hidden sectors */
	u_int32_t HugeSectors;		/* # of sectors if bpbSectors == 0 */
	u_int	FSInfo;			/* FSInfo sector */
	u_int	Backup;			/* Backup of Bootblocks */
	cl_t	RootCl;			/* Start of Root Directory */
	cl_t	FSFree;			/* Number of free clusters acc. FSInfo */
	cl_t	FSNext;			/* Next free cluster acc. FSInfo */

	/* and some more calculated values */
	u_int	flags;			/* some flags: */
#define	FAT32		1		/* this is a FAT32 filesystem */
					/*
					 * Maybe, we should separate out
					 * various parts of FAT32?	XXX
					 */
	int	ValidFat;		/* valid fat if FAT32 non-mirrored */
	cl_t	ClustMask;		/* mask for entries in FAT */
	cl_t	NumClusters;		/* # of entries in a FAT */
	u_int32_t NumSectors;		/* how many sectors are there */
	u_int32_t FATsecs;		/* how many sectors are in FAT */
	u_int32_t NumFatEntries;	/* how many entries really are there */
	u_int	ClusterOffset;		/* at what sector would sector 0 start */
	u_int	ClusterSize;		/* Cluster size in bytes */

	/* Now some statistics: */
	u_int	NumFiles;		/* # of plain files */
	u_int	NumFree;		/* # of free clusters */
	u_int	NumBad;			/* # of bad clusters */
};

struct fatEntry {
	cl_t	next;			/* pointer to next cluster */
	cl_t	head;			/* pointer to start of chain */
	u_int32_t length;		/* number of clusters on chain */
	int	flags;			/* see below */
};

#define	CLUST_FREE	0		/* 0 means cluster is free */
#define	CLUST_FIRST	2		/* 2 is the minimum valid cluster number */
#define	CLUST_RSRVD	0xfffffff6	/* start of reserved clusters */
#define	CLUST_BAD	0xfffffff7	/* a cluster with a defect */
#define	CLUST_EOFS	0xfffffff8	/* start of EOF indicators */
#define	CLUST_EOF	0xffffffff	/* standard value for last cluster */

/*
 * Masks for cluster values
 */
#define	CLUST12_MASK	0xfff
#define	CLUST16_MASK	0xffff
#define	CLUST32_MASK	0xfffffff

#define	FAT_USED	1		/* This fat chain is used in a file */

#define	DOSLONGNAMELEN	256		/* long name maximal length */
#define LRFIRST		0x40		/* first long name record */
#define	LRNOMASK	0x1f		/* mask to extract long record
					 * sequence number */

/*
 * Architecture independent description of a directory entry
 */
struct dosDirEntry {
	struct dosDirEntry
		*parent,		/* previous tree level */
		*next,			/* next brother */
		*child;			/* if this is a directory */
	char name[8+1+3+1];		/* alias name first part */
	char lname[DOSLONGNAMELEN];	/* real name */
	uint flags;			/* attributes */
	cl_t head;			/* cluster no */
	u_int32_t size;			/* filesize in bytes */
	uint fsckflags;			/* flags during fsck */
};
/* Flags in fsckflags: */
#define	DIREMPTY	1
#define	DIREMPWARN	2

/*
 *  TODO-list of unread directories
 */
struct dirTodoNode {
	struct dosDirEntry *dir;
	struct dirTodoNode *next;
};

#endif
@


1.5
log
@FAT32 support from NetBSD by Wolfgang Solfrank.
@
text
@d1 1
a1 1
/*	$OpenBSD: dosfs.h,v 1.4 1997/02/28 08:36:11 millert Exp $	*/
a17 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Martin Husemann
 *	and Wolfgang Solfrank.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
@


1.4
log
@From NetBSD (ws)
Fix handling of clusters marked bad; Noted by Rafal Boni
@
text
@d1 2
a2 2
/*	$OpenBSD: dosfs.h,v 1.3 1996/06/23 14:30:42 deraadt Exp $	*/
/*	$NetBSD: dosfs.h,v 1.4 1997/01/03 14:32:48 ws Exp $	*/
d5 1
a5 1
 * Copyright (C) 1995, 1996 Wolfgang Solfrank
d7 1
a7 1
 * Some structure declaration borrowed from Paul Popelka 
d43 1
a43 3
#define	MAX12BITCLUSTERS	4078

typedef	u_int16_t	cl_t;	/* type holding a cluster number */
a54 1
	u_int32_t Sectors;		/* total number of sectors */
d56 1
a56 1
	u_int	FATsecs;		/* number of sectors per FAT */
d59 1
d62 5
d69 8
a76 1
	int	Is16BitFat;		/* 0 for 12 bit, 1 for 16 bit */
d79 1
d83 1
a83 1
	
d99 11
a109 4
#define	CLUST_RSRVD	0xfff0		/* start of reserved clusters */
#define	CLUST_BAD	0xfff7		/* a cluster with a defect */
#define	CLUST_EOFS	0xfff8		/* start of EOF indicators */
#define	CLUST_EOF	0xffff		/* standard value for last cluster */
@


1.3
log
@update rcsid
@
text
@d1 2
a2 2
/*	$OpenBSD: dosfs.h,v 1.1.4.1 1996/05/31 18:41:42 jtc Exp $	*/
/*	$NetBSD: dosfs.h,v 1.1.4.1 1996/05/31 18:41:42 jtc Exp $	*/
d76 1
@


1.2
log
@from ws;
Check return values of malloc
Generate full pathnames only on request
Minor cleanup, RCS Ids in .h files
Don't allocate data structures for non-directories
Free any data structures when finishing a check (at the latest)
@
text
@d1 1
@


1.1
log
@add fsck_msdos
@
text
@d1 1
d81 1
a81 1
	struct dosDirEntry *dirp;	/* corresponding file name */
d91 2
a105 1
	char *fullpath;			/* path name from root to this directory */
@
