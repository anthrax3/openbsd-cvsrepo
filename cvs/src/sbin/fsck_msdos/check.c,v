head	1.18;
access;
symbols
	OPENBSD_6_2:1.18.0.10
	OPENBSD_6_2_BASE:1.18
	OPENBSD_6_1:1.18.0.8
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.18.0.4
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.2
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.17.0.6
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.2
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.16.0.4
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.15.0.10
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.6
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.4
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.2
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.6
	OPENBSD_5_0:1.14.0.4
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.2
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.12.0.4
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.11.0.16
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.12
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.10
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.8
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.6
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.4
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.2
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.10.0.8
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.6
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.4
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.2
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.8.0.8
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.6
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.4
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.7.0.10
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_8:1.7.0.8
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.6
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.7.0.4
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.2
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.6.0.4
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.2
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.5.0.4
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.18
date	2015.10.14.16.58.55;	author deraadt;	state Exp;
branches;
next	1.17;
commitid	7vEhrQZryjO1AvBa;

1.17
date	2015.01.16.06.39.58;	author deraadt;	state Exp;
branches;
next	1.16;
commitid	Uu5nFG3wCl0LACBb;

1.16
date	2014.06.16.18.33.33;	author tobias;	state Exp;
branches;
next	1.15;
commitid	PhPZAfTlrgjKIup9;

1.15
date	2012.03.31.17.53.34;	author krw;	state Exp;
branches;
next	1.14;

1.14
date	2010.12.17.19.36.03;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2010.11.17.12.31.11;	author jsing;	state Exp;
branches;
next	1.12;

1.12
date	2009.10.27.23.59.33;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2006.05.27.22.30.09;	author thib;	state Exp;
branches;
next	1.10;

1.10
date	2004.07.17.02.14.33;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2003.07.29.18.38.35;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2001.07.07.18.26.12;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	99.03.25.01.45.01;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	98.01.11.20.40.30;	author provos;	state Exp;
branches;
next	1.5;

1.5
date	97.03.02.05.25.52;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.02.28.08.36.10;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.06.23.14.30.41;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.06.10.04.38.15;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	96.05.22.11.23.53;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Since the fsck_* programs now only handle one filesystem, this creates
a point where open() and disklabel reading have completed.  After that
point, pledge "stdio".

As a result, an fsck of a hostile partition (noone ever does that, or
do they? :) is done by a program with SUBSTANTIALLY less system call
exposure.
ok semarie
@
text
@/*	$OpenBSD: check.c,v 1.17 2015/01/16 06:39:58 deraadt Exp $	*/
/*	$NetBSD: check.c,v 1.8 1997/10/17 11:19:29 ws Exp $	*/

/*
 * Copyright (C) 1995, 1996, 1997 Wolfgang Solfrank
 * Copyright (c) 1995 Martin Husemann
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/ioctl.h>
#include <sys/dkio.h>
#include <sys/disklabel.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <stdio.h>
#include <unistd.h>
#include <limits.h>
#include <fcntl.h>
#include <util.h>
#include <err.h>

#include "ext.h"

struct disklabel lab;

int
checkfilesys(const char *fname)
{
	int dosfs;
	struct bootblock boot;
	struct fatEntry *fat = NULL;
	char *realdev;
	int i;
	int mod = 0;

	rdonly = alwaysno;

	dosfs = opendev(fname, rdonly ? O_RDONLY : O_RDWR, 0, &realdev);
	if (dosfs < 0 && !rdonly) {
		dosfs = opendev(fname, O_RDONLY, 0, &realdev);
		rdonly = 1;
	}
	if (dosfs < 0) {
		xperror("Can't open");
		return (8);
	}

	if (!preen) {
		printf("** %s", realdev);
		if (strncmp(fname, realdev, PATH_MAX) != 0)
			printf(" (%s)", fname);
		if (rdonly)
			printf(" (NO WRITE)");
		printf("\n");
	}

	if (ioctl(dosfs, DIOCGDINFO, (char *)&lab) < 0)
		pfatal("can't read disk label for %s\n", fname);

	if (pledge("stdio", NULL) == -1)
		err(1, "pledge");

	if (readboot(dosfs, &boot) != FSOK) {
		(void)close(dosfs);
		return (8);
	}

	if (!preen) {
		if (boot.ValidFat < 0)
			printf("** Phase 1 - Read and Compare FATs\n");
		else
			printf("** Phase 1 - Read FAT\n");
	}

	mod |= readfat(dosfs, &boot, boot.ValidFat >= 0 ? boot.ValidFat : 0, &fat);
	if (mod & FSFATAL) {
		(void)close(dosfs);
		return 8;
	}

	if (boot.ValidFat < 0)
		for (i = 1; i < boot.FATs; i++) {
			struct fatEntry *currentFat;
			mod |= readfat(dosfs, &boot, i, &currentFat);

			if (mod & FSFATAL) {
				free(fat);
				(void)close(dosfs);
				return 8;
			}

			mod |= comparefat(&boot, fat, currentFat, i);
			free(currentFat);
			if (mod & FSFATAL) {
				free(fat);
				(void)close(dosfs);
				return (8);
			}
		}

	if (!preen)
		printf("** Phase 2 - Check Cluster Chains\n");

	mod |= checkfat(&boot, fat);
	if (mod & FSFATAL) {
		free(fat);
		(void)close(dosfs);
		return (8);
	}

	if (mod & FSFATMOD)
		mod |= writefat(dosfs, &boot, fat); /* delay writing fats?	XXX */
	if (mod & FSFATAL) {
		free(fat);
		(void)close(dosfs);
		return (8);
	}

	if (!preen)
		printf("** Phase 3 - Check Directories\n");

	mod |= resetDosDirSection(&boot, fat);
	if (mod & FSFATAL) {
		free(fat);
		close(dosfs);
		return 8;
	}

	if (mod & FSFATMOD)
		mod |= writefat(dosfs, &boot, fat); /* delay writing fats?	XXX */
	if (mod & FSFATAL) {
		finishDosDirSection();
		free(fat);
		(void)close(dosfs);
		return (8);
	}

	mod |= handleDirTree(dosfs, &boot, fat);
	if (mod & FSFATAL) {
		finishDosDirSection();
		free(fat);
		(void)close(dosfs);
		return (8);
	}

	if (!preen)
		printf("** Phase 4 - Check for Lost Files\n");

	mod |= checklost(dosfs, &boot, fat);
	if (mod & FSFATAL) {
		finishDosDirSection();
		free(fat);
		(void)close(dosfs);
		return 8;
	}

	if (mod & FSFATMOD)
		mod |= writefat(dosfs, &boot, fat); /* delay writing fats?    XXX */

	finishDosDirSection();
	free(fat);
	(void)close(dosfs);
	if (mod & FSFATAL)
		return 8;

	if (boot.NumBad)
		pwarn("%d files, %d free (%d clusters), %d bad (%d clusters)\n",
		      boot.NumFiles,
		      boot.NumFree * boot.ClusterSize / 1024, boot.NumFree,
		      boot.NumBad * boot.ClusterSize / 1024, boot.NumBad);
	else
		pwarn("%d files, %d free (%d clusters)\n",
		      boot.NumFiles,
		      boot.NumFree * boot.ClusterSize / 1024, boot.NumFree);

	if (mod & (FSFATAL | FSERROR))
		return (8);
	if (mod) {
		pwarn("\n***** FILE SYSTEM WAS MODIFIED *****\n");
		return (4);
	}
	return (0);
}
@


1.17
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: check.c,v 1.16 2014/06/16 18:33:33 tobias Exp $	*/
d41 1
d80 3
@


1.16
log
@Merge NetBSD commit:
Move to 2 clause license, approved by Wolfgang Solfrank.

ok deraadt@@, krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: check.c,v 1.15 2012/03/31 17:53:34 krw Exp $	*/
d29 1
a29 1
#include <sys/param.h>
d38 1
@


1.15
log
@Make fsck_msdos work with non-512-byte sector devices. Problem noted
by and fixes tested by Alexey Vatchenko.

Add a bunch of tests and error messages so whatever media/devices
this breaks will be more easily fixed.

Ignore invalid signatures since we have other checks and many media
have missing signatures.

Use character device to read disk even when called directly.
@
text
@d1 1
a1 1
/*	$OpenBSD: check.c,v 1.14 2010/12/17 19:36:03 millert Exp $	*/
a15 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Martin Husemann
 *	and Wolfgang Solfrank.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
@


1.14
log
@Add missing util.h include for opendev()
@
text
@d1 1
a1 1
/*	$OpenBSD: check.c,v 1.13 2010/11/17 12:31:11 jsing Exp $	*/
d37 3
d50 2
d82 3
@


1.13
log
@Switch fsck_msdos(8) to opendev(3) so that it can handle disklabel UIDs.
@
text
@d1 1
a1 1
/*	$OpenBSD: check.c,v 1.11 2006/05/27 22:30:09 thib Exp $	*/
d43 1
@


1.12
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d36 1
d52 1
a56 2
	if (!preen)
		printf("** %s", fname);
d58 1
a58 1
	dosfs = open(fname, rdonly ? O_RDONLY : O_RDWR, 0);
d60 1
a60 5
		dosfs = open(fname, O_RDONLY, 0);
		if (dosfs >= 0)
			pwarn(" (NO WRITE)\n");
		else if (!preen)
			printf("\n");
d62 1
a62 3
	} else if (!preen)
		printf("\n");

d66 9
@


1.11
log
@newline fix + s/perror/xperror since we are
using a home rolled version.

ok pedro@@
@
text
@d1 1
a1 1
/*	$OpenBSD: check.c,v 1.10 2004/07/17 02:14:33 deraadt Exp $	*/
a34 5


#ifndef lint
static char rcsid[] = "$OpenBSD: check.c,v 1.10 2004/07/17 02:14:33 deraadt Exp $";
#endif /* not lint */
@


1.10
log
@some ansi; khalek@@linuxgamers.net
@
text
@d1 1
a1 1
/*	$OpenBSD: check.c,v 1.9 2003/07/29 18:38:35 deraadt Exp $	*/
d38 1
a38 1
static char rcsid[] = "$OpenBSD: check.c,v 1.9 2003/07/29 18:38:35 deraadt Exp $";
d75 1
a75 1
		perror("Can't open");
@


1.9
log
@spaces
@
text
@d1 1
a1 1
/*	$OpenBSD: check.c,v 1.8 2001/07/07 18:26:12 deraadt Exp $	*/
d38 1
a38 1
static char rcsid[] = "$OpenBSD: check.c,v 1.8 2001/07/07 18:26:12 deraadt Exp $";
d51 1
a51 2
checkfilesys(fname)
	const char *fname;
@


1.8
log
@major -Wall cleanup, almost complete
@
text
@d1 1
a1 1
/*	$OpenBSD: check.c,v 1.7 1999/03/25 01:45:01 aaron Exp $	*/
d38 1
a38 1
static char rcsid[] = "$OpenBSD: check.c,v 1.7 1999/03/25 01:45:01 aaron Exp $";
d162 1
a162 1
	
@


1.7
log
@Checking -> Check for consistency
@
text
@d1 1
a1 1
/*	$OpenBSD: check.c,v 1.6 1998/01/11 20:40:30 provos Exp $	*/
d38 1
a38 1
static char rcsid[] = "$OpenBSD: check.c,v 1.6 1998/01/11 20:40:30 provos Exp $";
d85 1
a85 1
	if (!preen)
d90 1
@


1.6
log
@FAT32 support from NetBSD by Wolfgang Solfrank.
@
text
@d1 1
a1 1
/*	$OpenBSD: check.c,v 1.5 1997/03/02 05:25:52 millert Exp $	*/
d38 1
a38 1
static char rcsid[] = "$OpenBSD: check.c,v 1.5 1997/03/02 05:25:52 millert Exp $";
d136 1
a136 1
		printf("** Phase 3 - Checking Directories\n");
d163 1
a163 1
		printf("** Phase 4 - Checking for Lost Files\n");
@


1.5
log
@Update based on latest NetBSD version.
Now uses functions from util.[ch] instead of local ones.
Also some anal KNF from me...
@
text
@d1 2
a2 2
/*	$OpenBSD: check.c,v 1.4 1997/02/28 08:36:10 millert Exp $	*/
/*	$NetBSD: check.c,v 1.6 1997/01/03 14:32:48 ws Exp $	*/
d5 1
a5 1
 * Copyright (C) 1995, 1996 Wolfgang Solfrank
d38 1
a38 1
static char rcsid[] = "$OpenBSD: check.c,v 1.4 1997/02/28 08:36:10 millert Exp $";
d56 1
a56 1
	struct fatEntry * fat = NULL;
d74 1
a74 1
	
d86 10
a95 4
		printf("** Phase 1 - Read and Compare FATs\n");
	
	for (i = 0; i < boot.FATs; i++) {
		struct fatEntry *currentFat;
d97 4
a100 1
		mod |= readfat(dosfs, &boot, i, &currentFat);
d102 1
a102 2
		if (mod & FSFATAL) {
			if (fat)
d104 5
a108 8
			(void)close(dosfs);
			return (8);
		}
			
		if (fat == NULL)
			fat  = currentFat;
		else {
			mod |= comparefat(&boot, fat, currentFat, i + 1);
a115 1
	}
d119 1
a119 1
	
d126 1
a126 1
		
d138 11
a148 1
	if (resetDosDirSection(&boot) & FSFATAL) {
d166 10
a175 1
	
d179 2
d191 1
@


1.4
log
@From NetBSD (ws)
Fix handling of clusters marked bad; Noted by Rafal Boni
@
text
@d1 1
a1 1
/*	$OpenBSD: check.c,v 1.3 1996/06/23 14:30:41 deraadt Exp $	*/
d38 1
a38 1
static char rcsid[] = "$OpenBSD$";
d77 1
a77 1
		return 8;
d81 2
a82 2
		close(dosfs);
		return 8;
d96 2
a97 2
			close(dosfs);
			return 8;
d107 2
a108 2
				close(dosfs);
				return 8;
d119 2
a120 2
		close(dosfs);
		return 8;
d127 2
a128 2
		close(dosfs);
		return 8;
d136 2
a137 2
		close(dosfs);
		return 8;
d144 2
a145 2
		close(dosfs);
		return 8;
d155 1
a155 1
	close(dosfs);
d167 1
a167 1
		return 8;
d170 1
a170 1
		return 4;
d172 1
a172 1
	return 0;
@


1.3
log
@update rcsid
@
text
@d1 2
a2 2
/*	$OpenBSD: check.c,v 1.1.4.1 1996/05/31 18:41:33 jtc Exp $	*/
/*	$NetBSD: check.c,v 1.1.4.1 1996/05/31 18:41:33 jtc Exp $	*/
d38 1
a38 1
static char rcsid[] = "$OpenBSD: check.c,v 1.1.4.1 1996/05/31 18:41:33 jtc Exp $";
d157 9
a165 3
	pwarn("%d files, %d free (%d clusters)\n",
	      boot.NumFiles, boot.NumFree * boot.ClusterSize / 1024,
	      boot.NumFree);
@


1.2
log
@from ws;
Check return values of malloc
Generate full pathnames only on request
Minor cleanup, RCS Ids in .h files
Don't allocate data structures for non-directories
Free any data structures when finishing a check (at the latest)
@
text
@d1 1
d38 1
a38 1
static char rcsid[] = "$NetBSD: check.c,v 1.1.4.1 1996/05/31 18:41:33 jtc Exp $";
@


1.1
log
@add fsck_msdos
@
text
@d1 1
a1 1
/*	$NetBSD: check.c,v 1.1 1996/05/14 17:39:29 ws Exp $	*/
d37 1
a37 1
static char rcsid[] = "$NetBSD: check.c,v 1.1 1996/05/14 17:39:29 ws Exp $";
a53 1
	struct dosDirEntry *rootDir;
d92 3
a94 1
		if (mod&FSFATAL) {
d103 3
a105 1
			if (mod&FSFATAL) {
d116 2
a117 1
	if (mod&FSFATAL) {
d122 1
a122 1
	if (mod&FSFATMOD)
d124 2
a125 1
	if (mod&FSFATAL) {
d132 3
a134 5
	
	rootDir = malloc(sizeof(struct dosDirEntry));
	memset(rootDir, 0, sizeof(struct dosDirEntry));
	rootDir->fullpath = strdup("/");
	if (resetDosDirSection(&boot)&FSFATAL) {
d138 5
a142 10
	
	mod = readDosDirSection(dosfs, &boot, fat, rootDir);
	if (mod&FSFATAL) {
		close(dosfs);
		return 8;
	}
	
	if (mod&FSFATMOD)
		mod |= writefat(dosfs, &boot, fat); /* delay writing fats?	XXX */
	if (mod&FSFATAL) {
a146 31
	/*
	 * process the directory todo list
	 */
	while (pendingDirectories) {
		struct dosDirEntry *dir = pendingDirectories->dir;
		struct dirTodoNode *n = pendingDirectories->next;

		/*
		 * remove TODO entry now, the list might change during
		 * directory reads
		 */
		free(pendingDirectories);
		pendingDirectories = n;

		/*
		 * handle subdirectory
		 */
		mod |= readDosDirSection(dosfs, &boot, fat, dir);
		if (mod&FSFATAL) {
			close(dosfs);
			return 8;
		}
		if (mod&FSFATMOD)
			mod |= writefat(dosfs, &boot, fat); /* delay writing fats? XXX */
		if (mod&FSFATAL) {
			close(dosfs);
			return 8;
		}
	}
	finishDosDirSection();

d150 1
a150 1
	mod |= checklost(dosfs, &boot, fat, rootDir);
d152 2
d155 1
d159 1
a159 1
	if (mod&(FSFATAL|FSERROR))
@
