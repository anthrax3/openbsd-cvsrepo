head	1.18;
access;
symbols
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.18.0.4
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.2
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.17.0.6
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.2
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.16.0.12
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.10
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.6
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.4
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.2
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.10
	OPENBSD_5_0:1.14.0.8
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.6
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.4
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.2
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.13.0.20
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.16
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.14
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.12
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.10
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.8
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.6
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.4
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.2
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.12.0.8
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.12.0.6
	OPENBSD_3_6_BASE:1.12
	OPENBSD_3_5:1.12.0.4
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.12.0.2
	OPENBSD_3_4_BASE:1.12
	OPENBSD_3_3:1.9.0.4
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.7.0.8
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.7.0.6
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_8:1.7.0.4
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.2
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.6.0.10
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.8
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.6
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.4
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.2
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.18
date	2015.12.08.15.56.42;	author tedu;	state Exp;
branches;
next	1.17;
commitid	TkpsRkE1aMxKv8To;

1.17
date	2015.01.16.06.39.59;	author deraadt;	state Exp;
branches;
next	1.16;
commitid	Uu5nFG3wCl0LACBb;

1.16
date	2012.07.09.12.58.01;	author krw;	state Exp;
branches;
next	1.15;

1.15
date	2012.07.08.14.30.58;	author krw;	state Exp;
branches;
next	1.14;

1.14
date	2009.10.27.23.59.33;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2005.04.08.20.09.36;	author jaredy;	state Exp;
branches;
next	1.12;

1.12
date	2003.07.03.22.41.40;	author tedu;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.11.06.22.13;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.02.20.06.15;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.04.23.18.54.12;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2002.02.16.21.27.36;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2000.01.22.20.25.00;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	97.08.20.05.10.19;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.06.20.14.40.00;	author kstailey;	state Exp;
branches;
next	1.4;

1.4
date	97.05.30.08.48.58;	author downsj;	state Exp;
branches;
next	1.3;

1.3
date	97.04.24.08.28.54;	author downsj;	state Exp;
branches;
next	1.2;

1.2
date	97.01.15.23.41.18;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.06.27.07.20.28;	author downsj;	state Exp;
branches;
next	;


desc
@@


1.18
log
@spaces to tabs
@
text
@/*	$OpenBSD: mount_ext2fs.c,v 1.17 2015/01/16 06:39:59 deraadt Exp $	*/
/*	$NetBSD: mount_ffs.c,v 1.3 1996/04/13 01:31:19 jtc Exp $	*/

/*-
 * Copyright (c) 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/mount.h>

#include <err.h>
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <limits.h>

#include "mntopts.h"

void	ext2fs_usage(void);

static const struct mntopt mopts[] = {
	MOPT_STDOPTS,
	MOPT_UPDATE,
	{ NULL }
};

int
main(int argc, char *argv[])
{
	struct ufs_args args;		/* XXX ffs_args */
	int ch, mntflags;
	char fs_name[PATH_MAX], *errcause;

	mntflags = 0;
	optind = optreset = 1;		/* Reset for parse of new argv. */
	while ((ch = getopt(argc, argv, "o:")) != -1)
		switch (ch) {
		case 'o':
			getmntopts(optarg, mopts, &mntflags);
			break;
		case '?':
		default:
			ext2fs_usage();
		}
	argc -= optind;
	argv += optind;

	if (argc != 2)
		ext2fs_usage();

	args.fspec = argv[0];		/* The name of the device file. */
	if (realpath(argv[1], fs_name) == NULL)	/* The mount point. */
		err(1, "realpath %s", argv[1]);

#define DEFAULT_ROOTUID	-2
	args.export_info.ex_root = DEFAULT_ROOTUID;
	if (mntflags & MNT_RDONLY)
		args.export_info.ex_flags = MNT_EXRDONLY;
	else
		args.export_info.ex_flags = 0;

	if (mount(MOUNT_EXT2FS, fs_name, mntflags, &args) < 0) {
		switch (errno) {
		case EMFILE:
			errcause = "mount table full";
			break;
		case EINVAL:
			errcause =
			    "specified device does not match mounted device";
			break;
		case EOPNOTSUPP:
			errcause = "filesystem not supported by kernel";
			break;
		default:
			errcause = strerror(errno);
			break;
		}
		errx(1, "%s on %s: %s", args.fspec, fs_name, errcause);
	}
	exit(0);
}

void
ext2fs_usage(void)
{
	(void)fprintf(stderr,
		"usage: mount_ext2fs [-o options] special node\n");
	exit(1);
}
@


1.17
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_ext2fs.c,v 1.16 2012/07/09 12:58:01 krw Exp $	*/
d78 1
a78 1
        args.fspec = argv[0];		/* The name of the device file. */
@


1.16
log
@Revert previous.

The standards gpds are jealous gods. kettenis@@ and beck@@ have shown
EROFS is the wrong thing to return. So revert to EACCES until a
better error code is decided on.
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_ext2fs.c,v 1.15 2012/07/08 14:30:58 krw Exp $	*/
d33 1
a33 1
#include <sys/param.h>
d42 1
d59 1
a59 1
	char fs_name[MAXPATHLEN], *errcause;
@


1.15
log
@Return EROFS when a read-write mount of a read-only sd(4) device
is attempted. This is instead of the current EACCES and is intended
to result in better error messages from mount(8).

Tweak default EROFS error text to mention fsck'ing in mount_ext2fs
and mount_msdos since they both have fsck's like ffs.

ok deraadt@@ aja@@ ian@@ phessler@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_ext2fs.c,v 1.14 2009/10/27 23:59:33 deraadt Exp $	*/
a98 4
			break;
		case EROFS:
			errcause =
			    "filesystem must be mounted read-only; you may need to run fsck";
@


1.14
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_ext2fs.c,v 1.13 2005/04/08 20:09:36 jaredy Exp $	*/
d99 4
@


1.13
log
@Sync with recent realpath(3) changes:  on failure, don't use the second
argument "resolved", since it is undefined.

ok and help millert, otto
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_ext2fs.c,v 1.12 2003/07/03 22:41:40 tedu Exp $	*/
a31 14

#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1993, 1994\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)mount_ufs.c	8.2 (Berkeley) 3/27/94";
#else
static char rcsid[] = "$OpenBSD: mount_ext2fs.c,v 1.12 2003/07/03 22:41:40 tedu Exp $";
#endif
#endif /* not lint */
@


1.12
log
@use realpath() in helpers instead of doing it ourselves every time.
also fixes pr1662.  from otto moerbeek
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_ext2fs.c,v 1.11 2003/06/11 06:22:13 deraadt Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: mount_ext2fs.c,v 1.11 2003/06/11 06:22:13 deraadt Exp $";
d93 1
a93 1
		err(1, "realpath %s", fs_name);
@


1.11
log
@ansification
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_ext2fs.c,v 1.10 2003/06/02 20:06:15 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: mount_ext2fs.c,v 1.10 2003/06/02 20:06:15 millert Exp $";
d72 1
a72 1
	char *fs_name, *errcause;
d92 2
a93 1
	fs_name = argv[1];		/* The mount point. */
@


1.10
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_ext2fs.c,v 1.9 2002/04/23 18:54:12 espie Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: mount_ext2fs.c,v 1.9 2002/04/23 18:54:12 espie Exp $";
d68 1
a68 3
main(argc, argv)
	int argc;
	char * const argv[];
d123 1
a123 1
ext2fs_usage()
@


1.9
log
@In mount.h, rename field export -> export_info, to avoid collision with C++.
Synch files that use that field.

(This argument is an internal interface specific to OpenBSD, so it won't
cause compatibility problems.)

(No bump, not an ABI change).

ok art, millert...
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_ext2fs.c,v 1.8 2002/02/16 21:27:36 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d43 1
a43 1
static char rcsid[] = "$OpenBSD: mount_ext2fs.c,v 1.8 2002/02/16 21:27:36 millert Exp $";
@


1.8
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_ext2fs.c,v 1.7 2000/01/22 20:25:00 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: mount_ext2fs.c,v 1.7 2000/01/22 20:25:00 deraadt Exp $";
d101 1
a101 1
	args.export.ex_root = DEFAULT_ROOTUID;
d103 1
a103 1
		args.export.ex_flags = MNT_EXRDONLY;
d105 1
a105 1
		args.export.ex_flags = 0;
@


1.7
log
@remove extra externs not needed because of unistd.h (rest of tree will be done later.. contact me if you want to help)
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_ext2fs.c,v 1.6 1997/08/20 05:10:19 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: mount_ext2fs.c,v 1.6 1997/08/20 05:10:19 millert Exp $";
d63 1
a63 1
void	ext2fs_usage __P((void));
@


1.6
log
@Print "Filesystem not supported by kernel" not "Operation not supported by
device" (EOPNOTSUPP) so the real problem is obvious.  Idea from Peter Seebach
<seebs@@taniemarie.solon.com>.
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_ext2fs.c,v 1.5 1997/06/20 14:40:00 kstailey Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: mount_ext2fs.c,v 1.5 1997/06/20 14:40:00 kstailey Exp $";
a75 1
	extern int optreset;
@


1.5
log
@Now that mount(2) sets errno to EFTYPE, not EINVAL for "invalid file system"
we can use NLS for the text, not a hardcode English message.
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_ext2fs.c,v 1.4 1997/05/30 08:48:58 downsj Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: mount_ext2fs.c,v 1.4 1997/05/30 08:48:58 downsj Exp $";
d116 3
@


1.4
log
@No longer enforce read-only mounts.
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_ext2fs.c,v 1.3 1997/04/24 08:28:54 downsj Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: mount_ext2fs.c,v 1.3 1997/04/24 08:28:54 downsj Exp $";
d114 1
a114 2
			if (mntflags & MNT_UPDATE)
				errcause =
a115 2
			else 
				errcause = "incorrect super block";
@


1.3
log
@Enforce read only mounts.  No exceptions.
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_ext2fs.c,v 1.2 1997/01/15 23:41:18 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: mount_ext2fs.c,v 1.2 1997/01/15 23:41:18 millert Exp $";
a99 8

#if 1
	/*
	 * This version of ext2fs is buggy.  Enforce read only mounts.
	 * If the user wants a writeable mount, they remove this code.
	 */
	mntflags |= MNT_RDONLY;
#endif
@


1.2
log
@getopt(3) returns -1 when out of args, not EOF, whee!
@
text
@d1 1
a1 1
/*	$OpenBSD: mount_ext2fs.c,v 1.1 1996/06/27 07:20:28 downsj Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: mount_ext2fs.c,v 1.1 1996/06/27 07:20:28 downsj Exp $";
d100 8
@


1.1
log
@Add mount_ext2fs; stripped down mount_ffs and the man page from FreeBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: mount_ffs.c,v 1.4 1996/06/23 14:31:20 deraadt Exp $";
d83 1
a83 1
	while ((ch = getopt(argc, argv, "o:")) != EOF)
@
