head	1.5;
access;
symbols
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.58
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.54
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.44
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.52
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.50
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.48
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.46
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.42
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.40
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.38
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.36
	OPENBSD_5_0:1.5.0.34
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.32
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.30
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.26
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.28
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.24
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.22
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.20
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.18
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.16
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.14
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.4.0.2
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.3.0.8
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.6
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.4
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.2.0.16
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.14
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.12
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.10
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.8
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2003.07.31.21.48.02;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.04.22.36.12;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.29.02.05.35;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.12.21.22.23.40;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.30;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.30;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.5
log
@various cleanups; david says results are same
@
text
@/* $OpenBSD: bitstring_test.c,v 1.4 2003/01/04 22:36:12 deraadt Exp $	 */
/* $NetBSD: bitstring_test.c,v 1.4 1995/04/29 05:44:35 cgd Exp $	 */

/*
 * this is a simple program to test bitstring.h
 * inspect the output, you should notice problems
 * choose the ATT or BSD flavor
 */
/* #define ATT /*- */
#define BSD			/*-*/

/*
 * include the following define if you want the program to link. this
 * corrects a misspeling in bitstring.h
 */
#define _bitstr_size bitstr_size

#include <stdio.h>
#include <stdlib.h>

/* #ifdef NOTSOGOOD */
#include "bitstring.h"
/* #else */
/* #include "gbitstring.h" */
/* #endif */

int             TEST_LENGTH;
#define DECL_TEST_LENGTH	37	/* a mostly random number */

static void
clearbits(bitstr_t *b, int n)
{
	register int    i = bitstr_size(n);

	while (i--)
		*(b + i) = 0;
}

static void
printbits(bitstr_t *b, int n)
{
	register int    i;
	int             jc, js;

	bit_ffc(b, n, &jc);
	bit_ffs(b, n, &js);
	(void) printf("%3d %3d ", jc, js);
	for (i = 0; i < n; i++) {
		(void) putchar((bit_test(b, i) ? '1' : '0'));
	}
	(void) putchar('\n');
}

int
main(int argc, char *argv[])
{
	int             i;
	bitstr_t       *bs;
	bitstr_t        bit_decl(bss, DECL_TEST_LENGTH);

	if (argc > 1)
		TEST_LENGTH = atoi(argv[1]);
	else
		TEST_LENGTH = DECL_TEST_LENGTH;

	if (TEST_LENGTH < 4) {
		fprintf(stderr, "TEST_LENGTH must be at least 4, but it is %d\n",
			TEST_LENGTH);
		exit(1);
	}
	(void) printf("Testing with TEST_LENGTH = %d\n\n", TEST_LENGTH);

	(void) printf("test _bit_byte, _bit_mask, and bitstr_size\n");
	(void) printf("  i   _bit_byte(i)   _bit_mask(i) bitstr_size(i)\n");
	for (i = 0; i < TEST_LENGTH; i++) {
		(void) printf("%3d%15d%15d%15d\n",
			      i, _bit_byte(i), _bit_mask(i), bitstr_size(i));
	}

	bs = bit_alloc(TEST_LENGTH);
	clearbits(bs, TEST_LENGTH);
	(void) printf("\ntest bit_alloc, clearbits, bit_ffc, bit_ffs\n");
	(void) printf("be:   0  -1 ");
	for (i = 0; i < TEST_LENGTH; i++)
		(void) putchar('0');
	(void) printf("\nis: ");
	printbits(bs, TEST_LENGTH);

	(void) printf("\ntest bit_set\n");
	for (i = 0; i < TEST_LENGTH; i += 3) {
		bit_set(bs, i);
	}
	(void) printf("be:   1   0 ");
	for (i = 0; i < TEST_LENGTH; i++)
		(void) putchar(*("100" + (i % 3)));
	(void) printf("\nis: ");
	printbits(bs, TEST_LENGTH);

	(void) printf("\ntest bit_clear\n");
	for (i = 0; i < TEST_LENGTH; i += 6) {
		bit_clear(bs, i);
	}
	(void) printf("be:   0   3 ");
	for (i = 0; i < TEST_LENGTH; i++)
		(void) putchar(*("000100" + (i % 6)));
	(void) printf("\nis: ");
	printbits(bs, TEST_LENGTH);

	(void) printf("\ntest bit_test using previous bitstring\n");
	(void) printf("  i    bit_test(i)\n");
	for (i = 0; i < TEST_LENGTH; i++) {
		(void) printf("%3d%15d\n",
			      i, bit_test(bs, i));
	}

	clearbits(bs, TEST_LENGTH);
	(void) printf("\ntest clearbits\n");
	(void) printf("be:   0  -1 ");
	for (i = 0; i < TEST_LENGTH; i++)
		(void) putchar('0');
	(void) printf("\nis: ");
	printbits(bs, TEST_LENGTH);

	(void) printf("\ntest bit_nset and bit_nclear\n");
	bit_nset(bs, 1, TEST_LENGTH - 2);
	(void) printf("be:   0   1 0");
	for (i = 0; i < TEST_LENGTH - 2; i++)
		(void) putchar('1');
	(void) printf("0\nis: ");
	printbits(bs, TEST_LENGTH);

	bit_nclear(bs, 2, TEST_LENGTH - 3);
	(void) printf("be:   0   1 01");
	for (i = 0; i < TEST_LENGTH - 4; i++)
		(void) putchar('0');
	(void) printf("10\nis: ");
	printbits(bs, TEST_LENGTH);

	bit_nclear(bs, 0, TEST_LENGTH - 1);
	(void) printf("be:   0  -1 ");
	for (i = 0; i < TEST_LENGTH; i++)
		(void) putchar('0');
	(void) printf("\nis: ");
	printbits(bs, TEST_LENGTH);
	bit_nset(bs, 0, TEST_LENGTH - 2);
	(void) printf("be: %3d   0 ", TEST_LENGTH - 1);
	for (i = 0; i < TEST_LENGTH - 1; i++)
		(void) putchar('1');
	putchar('0');
	(void) printf("\nis: ");
	printbits(bs, TEST_LENGTH);
	bit_nclear(bs, 0, TEST_LENGTH - 1);
	(void) printf("be:   0  -1 ");
	for (i = 0; i < TEST_LENGTH; i++)
		(void) putchar('0');
	(void) printf("\nis: ");
	printbits(bs, TEST_LENGTH);

	(void) printf("\n");
	(void) printf("first 1 bit should move right 1 position each line\n");
	for (i = 0; i < TEST_LENGTH; i++) {
		bit_nclear(bs, 0, TEST_LENGTH - 1);
		bit_nset(bs, i, TEST_LENGTH - 1);
		(void) printf("%3d ", i);
		printbits(bs, TEST_LENGTH);
	}

	(void) printf("\n");
	(void) printf("first 0 bit should move right 1 position each line\n");
	for (i = 0; i < TEST_LENGTH; i++) {
		bit_nset(bs, 0, TEST_LENGTH - 1);
		bit_nclear(bs, i, TEST_LENGTH - 1);
		(void) printf("%3d ", i);
		printbits(bs, TEST_LENGTH);
	}

	(void) printf("\n");
	(void) printf("first 0 bit should move left 1 position each line\n");
	for (i = 0; i < TEST_LENGTH; i++) {
		bit_nclear(bs, 0, TEST_LENGTH - 1);
		bit_nset(bs, 0, TEST_LENGTH - 1 - i);
		(void) printf("%3d ", i);
		printbits(bs, TEST_LENGTH);
	}

	(void) printf("\n");
	(void) printf("first 1 bit should move left 1 position each line\n");
	for (i = 0; i < TEST_LENGTH; i++) {
		bit_nset(bs, 0, TEST_LENGTH - 1);
		bit_nclear(bs, 0, TEST_LENGTH - 1 - i);
		(void) printf("%3d ", i);
		printbits(bs, TEST_LENGTH);
	}

	(void) printf("\n");
	(void) printf("0 bit should move right 1 position each line\n");
	for (i = 0; i < TEST_LENGTH; i++) {
		bit_nset(bs, 0, TEST_LENGTH - 1);
		bit_nclear(bs, i, i);
		(void) printf("%3d ", i);
		printbits(bs, TEST_LENGTH);
	}

	(void) printf("\n");
	(void) printf("1 bit should move right 1 position each line\n");
	for (i = 0; i < TEST_LENGTH; i++) {
		bit_nclear(bs, 0, TEST_LENGTH - 1);
		bit_nset(bs, i, i);
		(void) printf("%3d ", i);
		printbits(bs, TEST_LENGTH);
	}

	(void) free(bs);
	(void) exit(0);
}
@


1.4
log
@spelling
@
text
@d1 2
a2 2
/*	$OpenBSD: bitstring_test.c,v 1.3 2001/01/29 02:05:35 niklas Exp $	*/
/*	$NetBSD: bitstring_test.c,v 1.4 1995/04/29 05:44:35 cgd Exp $	*/
d9 2
a10 2
/*#define ATT /*-*/
#define BSD /*-*/
d12 3
a14 3
/* include the following define if you want the
 * program to link. this corrects a misspeling
 * in bitstring.h
d17 1
a17 1
 
d27 1
a27 1
int TEST_LENGTH;
d30 2
a31 2
int
main(int argc, char *argv[])
d33 1
a33 152
  void clearbits();
  void printbits();
  int i;
  bitstr_t *bs;
  bitstr_t bit_decl(bss, DECL_TEST_LENGTH);

  if (argc > 1)
	TEST_LENGTH = atoi(argv[1]);
  else
	TEST_LENGTH = DECL_TEST_LENGTH;

  if (TEST_LENGTH < 4) {
	fprintf(stderr, "TEST_LENGTH must be at least 4, but it is %d\n",
		TEST_LENGTH);
	exit(1);
  }

  (void) printf("Testing with TEST_LENGTH = %d\n\n", TEST_LENGTH);

  (void) printf("test _bit_byte, _bit_mask, and bitstr_size\n");
  (void) printf("  i   _bit_byte(i)   _bit_mask(i) bitstr_size(i)\n");
  for (i=0; i<TEST_LENGTH; i++) {
    (void) printf("%3d%15d%15d%15d\n",
      i, _bit_byte(i), _bit_mask(i), bitstr_size(i));
    }

  bs = bit_alloc(TEST_LENGTH);
  clearbits(bs, TEST_LENGTH);
  (void) printf("\ntest bit_alloc, clearbits, bit_ffc, bit_ffs\n");
  (void) printf("be:   0  -1 ");
  for (i=0; i < TEST_LENGTH; i++)
	(void) putchar('0');
  (void) printf("\nis: ");
  printbits(bs, TEST_LENGTH);

  (void) printf("\ntest bit_set\n");
  for (i=0; i<TEST_LENGTH; i+=3) {
    bit_set(bs, i); 
    }
  (void) printf("be:   1   0 ");
  for (i=0; i < TEST_LENGTH; i++)
	(void) putchar(*("100" + (i % 3)));
  (void) printf("\nis: ");
  printbits(bs, TEST_LENGTH);

  (void) printf("\ntest bit_clear\n");
  for (i=0; i<TEST_LENGTH; i+=6) {
    bit_clear(bs, i); 
    }
  (void) printf("be:   0   3 ");
  for (i=0; i < TEST_LENGTH; i++)
	(void) putchar(*("000100" + (i % 6)));
  (void) printf("\nis: ");
  printbits(bs, TEST_LENGTH);

  (void) printf("\ntest bit_test using previous bitstring\n");
  (void) printf("  i    bit_test(i)\n");
  for (i=0; i<TEST_LENGTH; i++) {
    (void) printf("%3d%15d\n",
      i, bit_test(bs, i));
    }

  clearbits(bs, TEST_LENGTH);
  (void) printf("\ntest clearbits\n");
  (void) printf("be:   0  -1 ");
  for (i=0; i < TEST_LENGTH; i++)
	(void) putchar('0');
  (void) printf("\nis: ");
  printbits(bs, TEST_LENGTH);

  (void) printf("\ntest bit_nset and bit_nclear\n");
  bit_nset(bs, 1, TEST_LENGTH - 2);
  (void) printf("be:   0   1 0");
  for (i=0; i < TEST_LENGTH - 2; i++)
	(void) putchar('1');
  (void) printf("0\nis: ");
  printbits(bs, TEST_LENGTH);

  bit_nclear(bs, 2, TEST_LENGTH - 3);
  (void) printf("be:   0   1 01");
  for (i=0; i < TEST_LENGTH - 4; i++)
        (void) putchar('0');
  (void) printf("10\nis: ");
  printbits(bs, TEST_LENGTH);

  bit_nclear(bs, 0, TEST_LENGTH - 1);
  (void) printf("be:   0  -1 ");
  for (i=0; i < TEST_LENGTH; i++)
	(void) putchar('0');
  (void) printf("\nis: ");
  printbits(bs, TEST_LENGTH);
  bit_nset(bs, 0, TEST_LENGTH - 2);
  (void) printf("be: %3d   0 ",TEST_LENGTH - 1);
  for (i=0; i < TEST_LENGTH - 1; i++)
	(void) putchar('1');
  putchar('0');
  (void) printf("\nis: ");
  printbits(bs, TEST_LENGTH);
  bit_nclear(bs, 0, TEST_LENGTH - 1);
  (void) printf("be:   0  -1 ");
  for (i=0; i < TEST_LENGTH; i++)
	(void) putchar('0');
  (void) printf("\nis: ");
  printbits(bs, TEST_LENGTH);

  (void) printf("\n");
  (void) printf("first 1 bit should move right 1 position each line\n");
  for (i=0; i<TEST_LENGTH; i++) {
    bit_nclear(bs, 0, TEST_LENGTH - 1);
    bit_nset(bs, i, TEST_LENGTH - 1);
    (void) printf("%3d ", i); printbits(bs, TEST_LENGTH);
    }

  (void) printf("\n");
  (void) printf("first 0 bit should move right 1 position each line\n");
  for (i=0; i<TEST_LENGTH; i++) {
    bit_nset(bs, 0, TEST_LENGTH - 1);
    bit_nclear(bs, i, TEST_LENGTH - 1);
    (void) printf("%3d ", i); printbits(bs, TEST_LENGTH);
    }

  (void) printf("\n");
  (void) printf("first 0 bit should move left 1 position each line\n");
  for (i=0; i<TEST_LENGTH; i++) {
    bit_nclear(bs, 0, TEST_LENGTH - 1);
    bit_nset(bs, 0, TEST_LENGTH - 1 - i);
    (void) printf("%3d ", i); printbits(bs, TEST_LENGTH);
    }

  (void) printf("\n");
  (void) printf("first 1 bit should move left 1 position each line\n");
  for (i=0; i<TEST_LENGTH; i++) {
    bit_nset(bs, 0, TEST_LENGTH - 1);
    bit_nclear(bs, 0, TEST_LENGTH - 1 - i);
    (void) printf("%3d ", i); printbits(bs, TEST_LENGTH);
    }

  (void) printf("\n");
  (void) printf("0 bit should move right 1 position each line\n");
  for (i=0; i<TEST_LENGTH; i++) {
    bit_nset(bs, 0, TEST_LENGTH - 1);
    bit_nclear(bs, i, i);
    (void) printf("%3d ", i); printbits(bs, TEST_LENGTH);
    }

  (void) printf("\n");
  (void) printf("1 bit should move right 1 position each line\n");
  for (i=0; i<TEST_LENGTH; i++) {
    bit_nclear(bs, 0, TEST_LENGTH - 1);
    bit_nset(bs, i, i);
    (void) printf("%3d ", i); printbits(bs, TEST_LENGTH);
    }
d35 2
a36 2
  (void)free(bs);
  (void)exit(0);
d38 3
a40 4
void
clearbits(b, n)
  bitstr_t *b;
  int n;
d42 10
a51 3
  register int i = bitstr_size(n);
  while(i--) 
    *(b + i) = 0;
d53 3
a55 4
void
printbits(b, n)
  bitstr_t *b;
  int n;
d57 155
a211 2
  register int i;
  int jc, js;
d213 2
a214 7
  bit_ffc(b, n, &jc);
  bit_ffs(b, n, &js);
  (void) printf("%3d %3d ", jc, js);
  for (i=0; i< n; i++) {
    (void) putchar((bit_test(b, i) ? '1' : '0'));
    }
  (void)putchar('\n');
@


1.3
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD: bitstring_test.c,v 1.4 1995/04/29 05:44:35 cgd Exp $	*/
d6 1
a6 1
 * inspect the ouput, you should notice problems
@


1.2
log
@-Wall madness.
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d29 1
d34 1
a34 1
  int b, i;
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
