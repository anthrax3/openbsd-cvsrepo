head	1.6;
access;
symbols
	OPENBSD_6_1:1.6.0.8
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.6
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.2.0.44
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.42
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.38
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.36
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.34
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.32
	OPENBSD_5_0:1.2.0.30
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.28
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.26
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.22
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.24
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.20
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.18
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.16
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.14
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.12
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.10
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.8
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.6
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.4
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.1.0.2
	OPENBSD_3_5_BASE:1.1;
locks; strict;
comment	@# @;


1.6
date	2015.05.05.20.18.35;	author millert;	state Exp;
branches;
next	1.5;
commitid	JRapCkxkCi8g7af7;

1.5
date	2015.05.05.20.16.44;	author millert;	state Exp;
branches;
next	1.4;
commitid	wdWybGbh21KmcNQl;

1.4
date	2014.10.09.11.29.04;	author millert;	state Exp;
branches;
next	1.3;
commitid	PUc8DR1Nfa8o98TS;

1.3
date	2014.10.08.22.16.28;	author millert;	state Exp;
branches;
next	1.2;
commitid	0REYgbQKm3WkpOBR;

1.2
date	2004.05.10.17.03.23;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.29.20.11.09;	author millert;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Updated fifotest.out
@
text
@
Opened fifo fi.fo.fum

Testing empty FIFO:
	poll POLLIN|POLLOUT, timeout=0
		1 fd(s) ready, revents == POLLOUT
	poll POLLIN, timeout=0
		0 fd(s) ready
	poll POLLOUT, timeout=0
		1 fd(s) ready, revents == POLLOUT
	poll (none), timeout=0
		0 fd(s) ready
	select read write, timeout=0
		1 fd(s) ready, writeable
	select read, timeout=0
		0 fd(s) ready
	select write, timeout=0
		1 fd(s) ready, writeable
	select (none), timeout=0
		0 fd(s) ready

Testing full FIFO:
	poll POLLIN|POLLOUT, timeout=0
		1 fd(s) ready, revents == POLLIN POLLOUT
	poll POLLIN, timeout=0
		1 fd(s) ready, revents == POLLIN
	poll POLLOUT, timeout=0
		1 fd(s) ready, revents == POLLOUT
	poll (none), timeout=0
		0 fd(s) ready
	select read write, timeout=0
		2 fd(s) ready, readable, writeable
	select read, timeout=0
		1 fd(s) ready, readable
	select write, timeout=0
		1 fd(s) ready, writeable
	select (none), timeout=0
		0 fd(s) ready
	received 'test' from FIFO

Opened fifo fi.fo.fum

Testing empty FIFO:
	poll POLLIN|POLLOUT, timeout=-1
		1 fd(s) ready, revents == POLLOUT
	poll POLLIN, timeout=-1
poll: Interrupted system call
	poll POLLOUT, timeout=-1
		1 fd(s) ready, revents == POLLOUT
	poll (none), timeout=-1
poll: Interrupted system call
	select read write, timeout=-1
		1 fd(s) ready, writeable
	select read, timeout=-1
		0 fd(s) ready
	select write, timeout=-1
		1 fd(s) ready, writeable
	select (none), timeout=-1
		0 fd(s) ready

Testing full FIFO:
	poll POLLIN|POLLOUT, timeout=-1
		1 fd(s) ready, revents == POLLIN POLLOUT
	poll POLLIN, timeout=-1
		1 fd(s) ready, revents == POLLIN
	poll POLLOUT, timeout=-1
		1 fd(s) ready, revents == POLLOUT
	poll (none), timeout=-1
poll: Interrupted system call
	select read write, timeout=-1
		2 fd(s) ready, readable, writeable
	select read, timeout=-1
		1 fd(s) ready, readable
	select write, timeout=-1
		1 fd(s) ready, writeable
	select (none), timeout=-1
		0 fd(s) ready
	received 'test' from FIFO

Opened fifo fi.fo.fum (nonblocking)

Testing empty FIFO:
	poll POLLIN|POLLOUT, timeout=0
		1 fd(s) ready, revents == POLLOUT
	poll POLLIN, timeout=0
		0 fd(s) ready
	poll POLLOUT, timeout=0
		1 fd(s) ready, revents == POLLOUT
	poll (none), timeout=0
		0 fd(s) ready
	select read write, timeout=0
		1 fd(s) ready, writeable
	select read, timeout=0
		0 fd(s) ready
	select write, timeout=0
		1 fd(s) ready, writeable
	select (none), timeout=0
		0 fd(s) ready

Testing full FIFO:
	poll POLLIN|POLLOUT, timeout=0
		1 fd(s) ready, revents == POLLIN POLLOUT
	poll POLLIN, timeout=0
		1 fd(s) ready, revents == POLLIN
	poll POLLOUT, timeout=0
		1 fd(s) ready, revents == POLLOUT
	poll (none), timeout=0
		0 fd(s) ready
	select read write, timeout=0
		2 fd(s) ready, readable, writeable
	select read, timeout=0
		1 fd(s) ready, readable
	select write, timeout=0
		1 fd(s) ready, writeable
	select (none), timeout=0
		0 fd(s) ready
	received 'test' from FIFO

Opened fifo fi.fo.fum (nonblocking)

Testing empty FIFO:
	poll POLLIN|POLLOUT, timeout=-1
		1 fd(s) ready, revents == POLLOUT
	poll POLLIN, timeout=-1
poll: Interrupted system call
	poll POLLOUT, timeout=-1
		1 fd(s) ready, revents == POLLOUT
	poll (none), timeout=-1
poll: Interrupted system call
	select read write, timeout=-1
		1 fd(s) ready, writeable
	select read, timeout=-1
		0 fd(s) ready
	select write, timeout=-1
		1 fd(s) ready, writeable
	select (none), timeout=-1
		0 fd(s) ready

Testing full FIFO:
	poll POLLIN|POLLOUT, timeout=-1
		1 fd(s) ready, revents == POLLIN POLLOUT
	poll POLLIN, timeout=-1
		1 fd(s) ready, revents == POLLIN
	poll POLLOUT, timeout=-1
		1 fd(s) ready, revents == POLLOUT
	poll (none), timeout=-1
poll: Interrupted system call
	select read write, timeout=-1
		2 fd(s) ready, readable, writeable
	select read, timeout=-1
		1 fd(s) ready, readable
	select write, timeout=-1
		1 fd(s) ready, writeable
	select (none), timeout=-1
		0 fd(s) ready
	received 'test' from FIFO

Opened fifo for reading fi.fo.fum (nonblocking)

Testing EOF FIFO behavior (pass 0):
	poll POLLIN|POLLOUT, timeout=-1
		1 fd(s) ready, revents == POLLIN POLLHUP
	received EOF from FIFO

Testing EOF FIFO behavior (pass 1):
	poll POLLIN|POLLOUT, timeout=-1
		1 fd(s) ready, revents == POLLIN POLLHUP
	received EOF from FIFO

Opened fifo for reading fi.fo.fum (nonblocking)

Testing EOF FIFO behavior (pass 2):
	poll POLLIN, timeout=-1
		1 fd(s) ready, revents == POLLIN POLLHUP
	received EOF from FIFO

Testing EOF FIFO behavior (pass 3):
	poll POLLIN, timeout=-1
		1 fd(s) ready, revents == POLLIN POLLHUP
	received EOF from FIFO

Opened fifo for reading fi.fo.fum (nonblocking)

Testing EOF FIFO behavior (pass 4):
	poll POLLOUT, timeout=-1
		1 fd(s) ready, revents == POLLHUP
	received EOF from FIFO

Testing EOF FIFO behavior (pass 5):
	poll POLLOUT, timeout=-1
		1 fd(s) ready, revents == POLLHUP
	received EOF from FIFO

Opened fifo for reading fi.fo.fum (nonblocking)

Testing EOF FIFO behavior (pass 6):
	poll (none), timeout=-1
		1 fd(s) ready, revents == POLLHUP
	received EOF from FIFO

Testing EOF FIFO behavior (pass 7):
	poll (none), timeout=-1
		1 fd(s) ready, revents == POLLHUP
	received EOF from FIFO

Opened fifo for reading fi.fo.fum (nonblocking)

Testing EOF FIFO behavior (pass 8):
	select read write, timeout=-1
		0 fd(s) ready
	received EOF from FIFO

Testing EOF FIFO behavior (pass 9):
	select read write, timeout=-1
		1 fd(s) ready, readable
	received EOF from FIFO

Opened fifo for reading fi.fo.fum (nonblocking)

Testing EOF FIFO behavior (pass 10):
	select read, timeout=-1
		0 fd(s) ready
	received EOF from FIFO

Testing EOF FIFO behavior (pass 11):
	select read, timeout=-1
		1 fd(s) ready, readable
	received EOF from FIFO

Opened fifo for reading fi.fo.fum (nonblocking)

Testing EOF FIFO behavior (pass 12):
	select write, timeout=-1
		0 fd(s) ready
	received EOF from FIFO

Testing EOF FIFO behavior (pass 13):
	select write, timeout=-1
		0 fd(s) ready
	received EOF from FIFO

Opened fifo for reading fi.fo.fum (nonblocking)

Testing EOF FIFO behavior (pass 14):
	select (none), timeout=-1
		0 fd(s) ready
	received EOF from FIFO

Testing EOF FIFO behavior (pass 15):
	select (none), timeout=-1
		0 fd(s) ready
	received EOF from FIFO
@


1.5
log
@fifofs now respects the flags a descriptor was opened with.
Also add tests for when no FD events are specified.
A few tests still don't pass which will be addressed shortly.
@
text
@d13 1
a13 1
	select read write
d15 1
a15 1
	select read
d17 1
a17 1
	select write
d19 1
a19 1
	select
d31 1
a31 1
	select read write
d33 1
a33 1
	select read
d35 1
a35 1
	select write
d37 1
a37 1
	select
d52 1
a52 1
	select read write
d54 1
a54 1
	select read
d56 1
a56 1
	select write
d58 1
a58 1
	select
d70 1
a70 1
	select read write
d72 1
a72 1
	select read
d74 1
a74 1
	select write
d76 1
a76 1
	select
d91 1
a91 1
	select read write
d93 1
a93 1
	select read
d95 1
a95 1
	select write
d97 1
a97 1
	select
d109 1
a109 1
	select read write
d111 1
a111 1
	select read
d113 1
a113 1
	select write
d115 1
a115 1
	select
d130 1
a130 1
	select read write
d132 1
a132 1
	select read
d134 1
a134 1
	select write
d136 1
a136 1
	select
d148 1
a148 1
	select read write
d150 1
a150 1
	select read
d152 1
a152 1
	select write
d154 1
a154 1
	select
d162 1
a162 1
		1 fd(s) ready, revents == POLLOUT
d186 1
a186 1
		1 fd(s) ready, revents == POLLOUT
d191 1
a191 1
		1 fd(s) ready, revents == POLLOUT
d198 1
a198 1
poll: Interrupted system call
d203 1
a203 1
poll: Interrupted system call
d209 2
a210 2
	select read write
		1 fd(s) ready, writeable
d214 2
a215 2
	select read write
		1 fd(s) ready, writeable
d221 1
a221 1
	select read
d226 1
a226 1
	select read
d233 2
a234 2
	select write
		1 fd(s) ready, writeable
d238 2
a239 2
	select write
		1 fd(s) ready, writeable
d245 1
a245 1
	select
d250 1
a250 1
	select
@


1.4
log
@Add POLLHUP to expected revents for POLLIN on writer EOF.
@
text
@d11 2
d19 2
d29 2
d37 2
d50 2
d58 2
d68 2
d76 2
d89 2
d97 2
d107 2
d115 2
d128 2
d136 2
d146 2
d154 2
d167 1
a167 1
		1 fd(s) ready, revents == POLLOUT
d197 12
d213 1
a213 1
Testing EOF FIFO behavior (pass 7):
d220 1
a220 1
Testing EOF FIFO behavior (pass 8):
d225 1
a225 1
Testing EOF FIFO behavior (pass 9):
d227 1
a227 1
		0 fd(s) ready
d232 1
a232 1
Testing EOF FIFO behavior (pass 10):
d237 1
a237 1
Testing EOF FIFO behavior (pass 11):
d240 12
@


1.3
log
@Add tests for EOF behavior (which currently fail) and expected output.
The expected output for the POLLIN test could also include POLLHUP,
though it does not currently do so.
@
text
@d142 1
a142 1
		1 fd(s) ready, revents == POLLIN
d147 1
a147 1
		1 fd(s) ready, revents == POLLIN
@


1.2
log
@Check select in addition to poll (they should produce the same results).
Run tests 4 times: with and without blocking and with and without a
timeout for poll/select.  Results match Solaris.
@
text
@d125 72
@


1.1
log
@Simple FIFO regress for O_RDWR using poll, read and write.
@
text
@d1 64
a64 1
sucessfully opened fifo
d67 5
a71 1
	testing POLLIN|POLLOUT
d73 3
a75 1
	testing POLLIN
d77 9
a85 1
	testing POLLOUT
d87 23
d112 1
a112 1
	testing POLLIN|POLLOUT
d114 1
a114 1
	testing POLLIN
d116 1
a116 1
	testing POLLOUT
d118 6
@

