head	1.7;
access;
symbols
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.7.0.8
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.4
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.3.0.44
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.42
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.38
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.36
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.34
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.32
	OPENBSD_5_0:1.3.0.30
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.28
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.26
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.22
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.24
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.20
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.18
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.16
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.14
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.12
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.10
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.8
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.6
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.4
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.2.0.2
	OPENBSD_3_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.7
date	2015.11.14.14.47.56;	author miod;	state Exp;
branches;
next	1.6;
commitid	2pkGyPKPBHGgYDCE;

1.6
date	2015.05.12.19.38.13;	author millert;	state Exp;
branches;
next	1.5;
commitid	XCOYDslDSYgPMam6;

1.5
date	2015.05.05.20.16.44;	author millert;	state Exp;
branches;
next	1.4;
commitid	wdWybGbh21KmcNQl;

1.4
date	2014.10.08.22.16.28;	author millert;	state Exp;
branches;
next	1.3;
commitid	0REYgbQKm3WkpOBR;

1.3
date	2004.05.10.17.03.23;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.29.22.02.07;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.29.20.11.09;	author millert;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Various *syncron* -> *synchron* typos.
@
text
@/*
 * Copyright (c) 2004, 2014-2015 Todd C. Miller <Todd.Miller@@courtesan.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/stat.h>
#include <sys/wait.h>
#include <errno.h>
#include <fcntl.h>
#include <poll.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#ifndef INFTIM
#define	INFTIM	-1
#endif

void usage(void);
void sigalrm(int);
void sigusr1(int);
void dopoll(pid_t, int, int, char *, int);
void doselect(pid_t, int, int, int);
void runtest(char *, int, int);
void eoftest(char *, int, int);

#if defined(__OpenBSD__) || defined(__FreeBSD__) || defined(__NetBSD__) || \
    defined(__linux__)
extern char *__progname;
#else
char *__progname;
#endif

/*
 * Test FIFOs and poll(2) both with an emtpy and full FIFO.
 */
int
main(int argc, char **argv)
{
	struct sigaction sa;
#if !defined(__OpenBSD__) && !defined(__FreeBSD__) && !defined(__NetBSD__) && \
    !defined(__linux__)
	__progname = argv[0];
#endif
	if (argc != 2)
		usage();

	/* Just want EINTR from SIGALRM */
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = 0;
	sa.sa_handler = sigalrm;
	sigaction(SIGALRM, &sa, NULL);

	/* SIGUSR1 is used for synchronization only. */
	sa.sa_flags = SA_RESTART;
	sa.sa_handler = sigusr1;
	sigaction(SIGUSR1, &sa, NULL);

	runtest(argv[1], 0, 0);
	runtest(argv[1], 0, INFTIM);
	runtest(argv[1], O_NONBLOCK, 0);
	runtest(argv[1], O_NONBLOCK, INFTIM);
	eoftest(argv[1], O_NONBLOCK, INFTIM);

	exit(0);
}

void
runtest(char *fifo, int flags, int timeout)
{
	ssize_t nread;
	int fd;
	char buf[BUFSIZ];

	(void)unlink(fifo);
	if (mkfifo(fifo, 0644) != 0) {
		printf("mkfifo %s: %s\n", fifo, strerror(errno));
		exit(1);
	}

	/* Note: O_RDWR not required by POSIX */
	alarm(2);
	if ((fd = open(fifo, O_RDWR | flags, 0644)) == -1) {
		printf("open %s: %s\n", fifo, strerror(errno));
		exit(1);
	}
	alarm(0);
	(void)unlink(fifo);
	printf("\nOpened fifo %s%s\n", fifo,
	    (flags & O_NONBLOCK) ? " (nonblocking)" : "");

	printf("\nTesting empty FIFO:\n");
	dopoll(-1, fd, POLLIN|POLLOUT, "POLLIN|POLLOUT", timeout);
	dopoll(-1, fd, POLLIN, "POLLIN", timeout);
	dopoll(-1, fd, POLLOUT, "POLLOUT", timeout);
	dopoll(-1, fd, 0, "(none)", timeout);
	doselect(-1, fd, fd, timeout);
	doselect(-1, fd, -1, timeout);
	doselect(-1, -1, fd, timeout);
	doselect(-1, -1, -1, timeout);

	if (write(fd, "test", 4) != 4) {
		printf("write error: %s\n", strerror(errno));
		exit(1);
	}

	printf("\nTesting full FIFO:\n");
	dopoll(-1, fd, POLLIN|POLLOUT, "POLLIN|POLLOUT", timeout);
	dopoll(-1, fd, POLLIN, "POLLIN", timeout);
	dopoll(-1, fd, POLLOUT, "POLLOUT", timeout);
	dopoll(-1, fd, 0, "(none)", timeout);
	doselect(-1, fd, fd, timeout);
	doselect(-1, fd, -1, timeout);
	doselect(-1, -1, fd, timeout);
	doselect(-1, -1, -1, timeout);

	if ((nread = read(fd, buf, sizeof(buf))) <= 0) {
		printf("read error: %s\n", (nread == 0) ? "EOF" : strerror(errno));
		exit(1);
	}
	buf[nread] = '\0';
	printf("\treceived '%s' from FIFO\n", buf);
}

pid_t
eof_writer(const char *fifo, int flags)
{
	int fd;
	pid_t pid;
	sigset_t mask, omask;

	/* Block SIGUSR1 (in child). */
	sigemptyset(&mask);
	sigaddset(&mask, SIGUSR1);
	sigprocmask(SIG_BLOCK, &mask, &omask);

	switch ((pid = fork())) {
	case -1:
		printf("fork: %s\n", strerror(errno));
		return -1;
	case 0:
		/* child */
		break;
	default:
		/* parent */
		sigprocmask(SIG_SETMASK, &omask, NULL);
		return pid;
	}

	/* Wait for reader. */
	sigemptyset(&mask);
	sigsuspend(&mask);
	sigprocmask(SIG_SETMASK, &omask, NULL);

	/* connect to FIFO. */
	alarm(2);
	fd = open(fifo, O_WRONLY | flags, 0644);
	alarm(0);
	if (fd == -1) {
		printf("open %s O_WRONLY: %s\n", fifo, strerror(errno));
		return -1;
	}

	/*
	 * We need to give the reader time to call poll() or select()
	 * before we close the fd.  This is racey...
	 */
	usleep(100000);
	close(fd);
	_exit(0);
}

void
eoftest(char *fifo, int flags, int timeout)
{
	ssize_t nread;
	int fd = -1, pass, status;
	pid_t writer;
	char buf[BUFSIZ];

	/*
	 * Test all combinations of select and poll.
	 */
	for (pass = 0; pass < 16; pass++) {
		/*
		 * We run each test twice, once with a fresh fifo,
		 * and once with a reused one.
		 */
		if ((pass & 1) == 0) {
			if (fd != -1)
				close(fd);
			(void)unlink(fifo);
			if (mkfifo(fifo, 0644) != 0) {
				printf("mkfifo %s: %s\n", fifo, strerror(errno));
				exit(1);
			}

			/* XXX - also verify that we get alarm for O_RDWR */
			alarm(2);
			if ((fd = open(fifo, O_RDONLY | flags, 0644)) == -1) {
				printf("open %s: %s\n", fifo, strerror(errno));
				exit(1);
			}
			alarm(0);

			printf("\nOpened fifo for reading %s%s\n", fifo,
			    (flags & O_NONBLOCK) ? " (nonblocking)" : "");
		}

		printf("\nTesting EOF FIFO behavior (pass %d):\n", pass);

		/*
		 * The writer will sleep for a bit to give the reader time
		 * to call select() before anything has been written.
		 */
		writer = eof_writer(fifo, flags);
		if (writer == -1)
			exit(1);

		switch (pass) {
		case 0:
		case 1:
		    dopoll(writer, fd, POLLIN|POLLOUT, "POLLIN|POLLOUT", timeout);
		    break;
		case 2:
		case 3:
		    dopoll(writer, fd, POLLIN, "POLLIN", timeout);
		    break;
		case 4:
		case 5:
		    dopoll(writer, fd, POLLOUT, "POLLOUT", timeout);
		    break;
		case 6:
		case 7:
		    dopoll(writer, fd, 0, "(none)", timeout);
		    break;
		case 8:
		case 9:
		    doselect(writer, fd, fd, timeout);
		    break;
		case 10:
		case 11:
		    doselect(writer, fd, -1, timeout);
		    break;
		case 12:
		case 13:
		    doselect(writer, -1, fd, timeout);
		    break;
		case 14:
		case 15:
		    doselect(writer, -1, -1, timeout);
		    break;
		}
		wait(&status);
		if ((nread = read(fd, buf, sizeof(buf))) < 0) {
			printf("read error: %s\n", strerror(errno));
			exit(1);
		}
		buf[nread] = '\0';
		printf("\treceived %s%s%s from FIFO\n", nread ? "'" : "",
		    nread ? buf : "EOF", nread ? "'" : "");
	}
	close(fd);
	(void)unlink(fifo);
}

void
dopoll(pid_t writer, int fd, int events, char *str, int timeout)
{
	struct pollfd pfd;
	int nready;

	pfd.fd = fd;
	pfd.events = events;

	printf("\tpoll %s, timeout=%d\n", str, timeout);
	pfd.events = events;
	if (writer != -1)
		kill(writer, SIGUSR1);
	alarm(2);
	nready = poll(&pfd, 1, timeout);
	alarm(0);
	if (nready < 0) {
		printf("poll: %s\n", strerror(errno));
		return;
	}
	printf("\t\t%d fd(s) ready%s", nready, nready ? ", revents ==" : "");
	if (pfd.revents & POLLIN)
		printf(" POLLIN");
	if (pfd.revents & POLLOUT)
		printf(" POLLOUT");
	if (pfd.revents & POLLERR)
		printf(" POLLERR");
	if (pfd.revents & POLLHUP)
		printf(" POLLHUP");
	if (pfd.revents & POLLNVAL)
		printf(" POLLNVAL");
	printf("\n");
}

void
doselect(pid_t writer, int rfd, int wfd, int timeout)
{
	struct timeval tv, *tvp;
	fd_set *rfds = NULL, *wfds = NULL;
	int nready, maxfd;

	if (timeout == INFTIM)
		tvp = NULL;
	else {
		tv.tv_sec = timeout / 1000;
		tv.tv_usec = (timeout % 1000) * 1000;
		tvp = &tv;
	}
	tv.tv_sec = tv.tv_usec = 0;
	maxfd = rfd > wfd ? rfd : wfd;
	if (rfd != -1) {
		rfds = calloc(howmany(maxfd + 1, NFDBITS), sizeof(fd_mask));
		if (rfds == NULL) {
			printf("unable to allocate memory\n");
			exit(1);
		}
		FD_SET(rfd, rfds);
	}
	if (wfd != -1) {
		wfds = calloc(howmany(maxfd + 1, NFDBITS), sizeof(fd_mask));
		if (wfds == NULL) {
			printf("unable to allocate memory\n");
			exit(1);
		}
		FD_SET(wfd, wfds);
	}

	printf("\tselect%s%s, timeout=%d\n", rfds ? " read" : "",
	    wfds ? " write" : rfds ? "" : " (none)", timeout);
	if (writer != -1)
		kill(writer, SIGUSR1);
	alarm(2);
	nready = select(maxfd + 1, rfds, wfds, NULL, &tv);
	alarm(0);
	if (nready < 0) {
		printf("select: %s\n", strerror(errno));
		goto cleanup;
	}
	printf("\t\t%d fd(s) ready", nready);
	if (rfds != NULL && FD_ISSET(rfd, rfds))
		printf(", readable");
	if (wfds != NULL && FD_ISSET(wfd, wfds))
		printf(", writeable");
	printf("\n");
cleanup:
	free(rfds);
	free(wfds);
}

void
sigalrm(int dummy)
{
	/* Just cause EINTR */
	return;
}

void
sigusr1(int dummy)
{
	return;
}

void
usage(void)
{
	fprintf(stderr, "usage: %s fifoname\n", __progname);
	exit(1);
}
@


1.6
log
@Race less.
@
text
@d68 1
a68 1
	/* SIGUSR1 is used for syncronization only. */
@


1.5
log
@fifofs now respects the flags a descriptor was opened with.
Also add tests for when no FD events are specified.
A few tests still don't pass which will be addressed shortly.
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2014 Todd C. Miller <Todd.Miller@@courtesan.com>
d35 3
a37 2
void dopoll(int, int, char *, int);
void doselect(int, int, int);
d62 1
a62 1
	/* Just warn EINTR from SIGALRM */
d68 5
d95 1
d107 8
a114 8
	dopoll(fd, POLLIN|POLLOUT, "POLLIN|POLLOUT", timeout);
	dopoll(fd, POLLIN, "POLLIN", timeout);
	dopoll(fd, POLLOUT, "POLLOUT", timeout);
	dopoll(fd, 0, "(none)", timeout);
	doselect(fd, fd, timeout);
	doselect(fd, -1, timeout);
	doselect(-1, fd, timeout);
	doselect(-1, -1, timeout);
d122 8
a129 8
	dopoll(fd, POLLIN|POLLOUT, "POLLIN|POLLOUT", timeout);
	dopoll(fd, POLLIN, "POLLIN", timeout);
	dopoll(fd, POLLOUT, "POLLOUT", timeout);
	dopoll(fd, 0, "(none)", timeout);
	doselect(fd, fd, timeout);
	doselect(fd, -1, timeout);
	doselect(-1, fd, timeout);
	doselect(-1, -1, timeout);
d139 1
a139 1
int
d143 2
d146 6
a151 1
	switch (fork()) {
d160 2
a161 1
		return 0;
d164 12
a175 12
	/* Wait for the reader to connect. */
	for (;;) {
		alarm(2);
		fd = open(fifo, O_WRONLY | flags, 0644);
		alarm(0);
		if (fd != -1)
			break;
		if (errno != ENOENT && errno != ENXIO) {
			printf("open %s O_WRONLY: %s\n", fifo, strerror(errno));
			return -1;
		}
		usleep(10000);
d179 2
a180 2
	 * We need to give the reader time to call select() before
	 * we close the fd.  This is racey...
d191 2
a192 1
	int fd = -1, rval, pass, status;
d230 2
a231 2
		rval = eof_writer(fifo, flags);
		if (rval == -1)
d237 1
a237 1
		    dopoll(fd, POLLIN|POLLOUT, "POLLIN|POLLOUT", timeout);
d241 1
a241 1
		    dopoll(fd, POLLIN, "POLLIN", timeout);
d245 1
a245 1
		    dopoll(fd, POLLOUT, "POLLOUT", timeout);
d249 1
a249 1
		    dopoll(fd, 0, "(none)", timeout);
d253 1
a253 1
		    doselect(fd, fd, timeout);
d257 1
a257 1
		    doselect(fd, -1, timeout);
d261 1
a261 1
		    doselect(-1, fd, timeout);
d265 1
a265 1
		    doselect(-1, -1, timeout);
d282 1
a282 1
dopoll(int fd, int events, char *str, int timeout)
d292 2
d316 1
a316 1
doselect(int rfd, int wfd, int timeout)
d350 2
a351 1

d374 6
@


1.4
log
@Add tests for EOF behavior (which currently fail) and expected output.
The expected output for the POLLIN test could also include POLLHUP,
though it does not currently do so.
@
text
@d103 1
d107 1
d118 1
d122 1
d182 1
a182 1
	for (pass = 0; pass < 12; pass++) {
d233 1
a233 1
		    doselect(fd, fd, timeout);
d237 1
a237 1
		    doselect(fd, -1, timeout);
d241 4
d247 4
d330 2
a331 2
	printf("\tselect%s%s\n", rfds ? " read" : "",
	    wfds ? " write" : "");
@


1.3
log
@Check select in addition to poll (they should produce the same results).
Run tests 4 times: with and without blocking and with and without a
timeout for poll/select.  Results match Solaris.
@
text
@d2 1
a2 1
 * Copyright (c) 2004 Todd C. Miller <Todd.Miller@@courtesan.com>
d19 1
a19 1
#include <sys/poll.h>
d22 1
d38 1
d53 1
d61 6
d71 1
a78 1
	struct sigaction sa;
a88 5
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = 0;
	sa.sa_handler = sigalrm;
	sigaction(SIGALRM, &sa, NULL);

d126 125
@


1.2
log
@Add copyright, remove old test results from a comment and enhance
compilation on FreeBSD and NetBSD.
@
text
@d17 1
a17 1
#include <sys/types.h>
d28 4
d34 3
a36 1
void dopoll(int, int, char *);
d48 2
a49 1
int main(int argc, char **argv)
d51 2
a52 7
	struct sigaction sa;
	ssize_t nread;
	int fd;
	char *fifo, buf[BUFSIZ];

#if defined(__OpenBSD__) || defined(__FreeBSD__) || defined(__NetBSD__) || \
    defined(__linux__)
d58 16
a73 1
	fifo = argv[1];
d86 1
a86 1
	if ((fd = open(fifo, O_RDWR, 0644)) == -1) {
d92 2
a93 1
	printf("sucessfully opened fifo\n");
d96 6
a101 3
	dopoll(fd, POLLIN|POLLOUT, "POLLIN|POLLOUT");
	dopoll(fd, POLLIN, "POLLIN");
	dopoll(fd, POLLOUT, "POLLOUT");
d109 6
a114 3
	dopoll(fd, POLLIN|POLLOUT, "POLLIN|POLLOUT");
	dopoll(fd, POLLIN, "POLLIN");
	dopoll(fd, POLLOUT, "POLLOUT");
a121 2

	exit(0);
d125 1
a125 1
dopoll(int fd, int events, char *str)
d133 1
a133 1
	printf("\ttesting %s\n", str);
d136 1
a136 1
	nready = poll(&pfd, 1, 0);
d154 54
@


1.1
log
@Simple FIFO regress for O_RDWR using poll, read and write.
@
text
@d1 16
d32 2
a33 1
#if defined(__OpenBSD__) || defined(__linux__)
d40 1
a40 8
 * Test FIFOs and poll(2)
 * Expected results:
 *  testing POLLIN|POLLOUT
 *  1 fd(s) ready, revents == POLLOUT
 *  testing POLLIN
 *  0 fd(s) ready
 *  testing POLLOUT
 *  1 fd(s) ready, revents == POLLOUT
d49 2
a50 1
#if !defined(__OpenBSD__) && !defined(__linux__)
@

