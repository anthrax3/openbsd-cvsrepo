head	1.3;
access;
symbols
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.26
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.16
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.24
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.22
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.20
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.18
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.14
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.12
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.10
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.8
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.4
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.2
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.16
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.18
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.14
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.12
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.10
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.8
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.6
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.4
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.2
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.1.0.2
	OPENBSD_3_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2010.06.20.17.56.07;	author phessler;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.01.19.08.40;	author otto;	state Exp;
branches;
next	1.1;

1.1
date	2005.05.03.18.26.54;	author otto;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Add some missing includes, so we do not have implicit function
declarations.

OK miod@@ stsp@@
@
text
@/*	$OpenBSD: mmap_4g.c,v 1.2 2006/02/01 19:08:40 otto Exp $	*/

/*
 * Public domain. 2005, Otto Moerbeek <otto@@drijf.net>
 */

#include <sys/types.h>
#include <sys/mman.h>
#include <err.h>
#include <fcntl.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>

/*
 * Write near the 4g boundary using a mmaped file and check if the
 * bytes do not wrap to offset 0.
 */

int
main()
{
	int fd, i;
	off_t offset;
	size_t sz;
	char *p, buf[100];
	const char * file = "foo";

	fd = open(file, O_WRONLY | O_CREAT | O_TRUNC, 0666);
	if (fd == -1)
		err(1, "open");

	sz = sizeof(buf);
	offset = 4LL * 1024LL * 1024LL * 1024LL - sz/2;

	if (lseek(fd, offset, SEEK_SET) != offset)
		err(1, "lseek");
	memset(buf, 0, sz);
	if (write(fd, buf, sz) != sz)
		err(1, "write");
	close(fd);

	fd = open(file, O_RDWR, 0);
	if (fd == -1)
		err(1, "open");
	p = mmap(NULL, 100, PROT_READ | PROT_WRITE, MAP_FILE | MAP_SHARED,
	    fd, offset);
	if (p == MAP_FAILED)
		err(1, "mmap");
	for (i = 0; i < sz; i++)
		p[i] = i + 1;
	if (munmap(p, sz) == -1)
		err(1, "munmap");
	close(fd);

	fd = open(file, O_RDONLY, 0);
	if (fd == -1)
		err(1, "open");
	if (read(fd, buf, sz) != sz)
		err(1, "read");
	for (i = 0; i < sz; i++)
		if (buf[i])
			errx(1, "nonzero byte 0x%02x found at offset %zu", 
			    buf[i], i);

	if (lseek(fd, offset, SEEK_SET) != offset)
		err(1, "lseek");
	if (read(fd, buf, sz) != sz)
		err(1, "read");
	for (i = 0; i < sz; i++)
		if (buf[i] != i + 1)
			err(1, "incorrect value 0x%02x at offset %llx",
			    p[i], offset + i);

	close(fd);
	unlink(file);
	return 0;
}
@


1.2
log
@double semicolon; from Daniel Matic in PR 4929
@
text
@d1 1
a1 1
/*	$OpenBSD: mmap_4g.c,v 1.1 2005/05/03 18:26:54 otto Exp $	*/
d12 1
@


1.1
log
@Test writing to a mmapped file around the 4GB offset.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d32 1
a32 1
	sz = sizeof(buf);;
@

