head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.2
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.2.0.18
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.14
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.4
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.12
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.10
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.8
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.2
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.1.0.6
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.4
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.2;
locks; strict;
comment	@ * @;


1.5
date	2017.07.13.11.24.58;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	fVR85DrsU8nNEZXu;

1.4
date	2017.07.12.22.56.22;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	2tXnTJhbgdlmNrEB;

1.3
date	2017.07.07.10.49.12;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	SzkFMlNiyigSD2M0;

1.2
date	2013.03.21.21.59.55;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2011.10.07.20.16.55;	author ariane;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Round VM_MAXUSER_ADDRESS down to next page to make mmap_hint regress
pass on sparc64.
@
text
@/*	$OpenBSD: mmap_hint.c,v 1.4 2017/07/12 22:56:22 bluhm Exp $	*/
/*
 * Copyright (c) 2011 Ariane van der Steldt <ariane@@stack.nl>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/types.h>
#include <sys/mman.h>
#include <sys/tree.h>
#include <machine/pmap.h>
#include <machine/vmparam.h>
#include <err.h>
#include <sysexits.h>
#include <stdio.h>

#define MAX_HINT_DIST	(2UL * 1024 * 1024 * 1024)

int	errors = 0;

void *
mmap_hint(void *hint)
{
	void	*p;
	size_t	 delta;

	p = mmap(hint, 1, PROT_READ|PROT_WRITE, MAP_ANON|MAP_PRIVATE, -1, 0);
	if (p == MAP_FAILED) {
		warn("mmap(addr=%p, len=1) failed", hint);
		errors++;
		return MAP_FAILED;
	} else if (p == NULL) {
		warnx("mmap(addr=%p, len=1) mapped at address 0", hint);
		errors++;
		return MAP_FAILED;
	} else
		fprintf(stderr, "    -> %p\n", p);

	if (hint > p)
		delta = hint - p;
	else
		delta = p - hint;

	if (hint != NULL && delta > MAX_HINT_DIST) {
		warnx("hinted allocation more than %#zx bytes away from hint: "
		    "hint %p, result %p", delta, hint, p);
		errors++;
		return MAP_FAILED;
	}
	return p;
}

int
main()
{
	void	*p, *hint;

	/* Check that unhinted allocation works properly. */
	hint = NULL;
	fprintf(stderr, "1: Checking hint %p mmap\n", hint);
	p = mmap_hint(hint);

	/* Check hinted allocation at top of map. */
	hint = (void *)((VM_MAXUSER_ADDRESS & ~PAGE_MASK) - PAGE_SIZE);
	fprintf(stderr, "2: Checking hint page below "
	    "VM_MAXUSER_ADDRESS %p mmap\n", hint);
	p = mmap_hint(hint);

	/* Check hinted allocation at bottom of map. */
	hint = (void *)VM_MIN_ADDRESS;
	fprintf(stderr, "3: Checking hint VM_MIN_ADDRESS %p mmap\n", hint);
	p = mmap_hint(hint);

	/*
	 * Check that hinted allocation doesn't overwrite existing allocation.
	 */
	if (p == MAP_FAILED) {
		fprintf(stderr, "4: Skipping test: required previous test "
		    "to succeed");
		goto skip4;
	}
	hint = p;
	fprintf(stderr, "4: Checking hint %p mmap, which is in use\n", hint);
	p = mmap_hint(hint);
	if (p == hint) {
		warnx("hinted allocation %p overwrites previous allocation %p",
		    hint, p);
		errors++;
	}

skip4:
	return errors;
}
@


1.4
log
@We cannot mmap(2) memory at VM_MAXUSER_ADDRESS as the full allocated
page must be below that address.  Subtract PAGE_SIZE from the hint
address, then regress passes.
@
text
@d1 1
a1 1
/*	$OpenBSD: mmap_hint.c,v 1.3 2017/07/07 10:49:12 bluhm Exp $	*/
d36 1
a36 1
	size_t	 pd;
d51 1
a51 1
		pd = hint - p;
d53 1
a53 1
		pd = p - hint;
d55 3
a57 4
	if (hint != NULL && pd > MAX_HINT_DIST) {
		warnx("hinted allocation more than 0x%lx "
		    "bytes away from hint: "
		    "hint %p, result %p", pd, hint, p);
d67 1
a67 1
	void	*p, *p_prev;
d70 3
a72 2
	fprintf(stderr, "1: Checking hint NULL mmap\n");
	p = mmap_hint(NULL);
d75 4
a78 3
	fprintf(stderr, "2: Checking hint VM_MAXUSER_ADDRESS-page 0x%lx mmap\n",
	    (unsigned long)VM_MAXUSER_ADDRESS - PAGE_SIZE);
	p = mmap_hint((void*)VM_MAXUSER_ADDRESS - PAGE_SIZE);
d81 3
a83 3
	fprintf(stderr, "3: Checking hint VM_MIN_ADDRESS 0x%lx mmap\n",
	    (unsigned long)VM_MIN_ADDRESS);
	p = mmap_hint((void*)VM_MIN_ADDRESS);
d93 6
a98 7
	p_prev = p;
	fprintf(stderr, "4: Checking hint 0x%lx mmap, which is in use\n",
	    p_prev);
	p = mmap_hint(p_prev);
	if (p == p_prev) {
		warnx("hinted allocation %p "
		    "overwrites previous allocation", p_prev);
d101 1
a102 1

@


1.3
log
@Make mmap_hint.c compile on i386 by adding includes.  Unfortunately
test is still failing.
@
text
@d1 1
a1 1
/*	$OpenBSD: mmap_hint.c,v 1.2 2013/03/21 21:59:55 deraadt Exp $	*/
d75 3
a77 3
	fprintf(stderr, "2: Checking hint VM_MAXUSER_ADDRESS 0x%lx mmap\n",
	    (unsigned long)VM_MAXUSER_ADDRESS);
	p = mmap_hint((void*)VM_MAXUSER_ADDRESS);
@


1.2
log
@sys/param.h, not machine/param.h
@
text
@d1 1
a1 1
/*	$OpenBSD: mmap_hint.c,v 1.1 2011/10/07 20:16:55 ariane Exp $	*/
d21 2
@


1.1
log
@Test hint-based mmap allocations.

A hint-based allocation may only fail if no memory is available near the
allocation. The value of near is chosen to be 2GB in this scenario.
@
text
@d1 1
a1 1
/*	$OpenBSD: mmap0.c,v 1.1 2011/10/07 19:43:07 ariane Exp $	*/
d18 1
a20 1
#include <machine/param.h>
@

