head	1.3;
access;
symbols
	OPENBSD_6_1:1.3.0.4
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.1.1.1.0.42
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.32
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.40
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.38
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.36
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.34
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.30
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.28
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.26
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.24
	OPENBSD_5_0:1.1.1.1.0.22
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.20
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.18
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.14
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.16
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.12
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.10
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.8
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.6
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.4
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.2
	OPENBSD_4_0_BASE:1.1.1.1
	mmap_fixed:1.1.1.1
	kurt:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2016.08.27.04.35.19;	author guenther;	state Exp;
branches;
next	1.2;
commitid	PONCt8WOG9ZD1h6O;

1.2
date	2016.08.25.05.12.06;	author deraadt;	state Exp;
branches;
next	1.1;
commitid	OOcKNmSKlZzlkc6M;

1.1
date	2006.04.06.20.39.03;	author kurt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.04.06.20.39.03;	author kurt;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Pull in <stdio.h> for NULL

ok deraadt@@
@
text
@/*	$OpenBSD: mmap_fixed.c,v 1.2 2016/08/25 05:12:06 deraadt Exp $	*/

/*
 * Public domain. 2006, Kurt Miller <kurt@@intricatesoftware.com>
 */

#include <sys/types.h>
#include <sys/mman.h>
#include <err.h>
#include <stdio.h>

#define MEM_SIZE        1024*1024

/*
 * Repetitively call mmap with MMAP_FIXED on the same region of memory
 * to ensure process datasize is properly calculated.
 */

int
main(void)
{
	void *mem_area;
	int i;

	mem_area = mmap(0, MEM_SIZE, PROT_NONE, MAP_ANON, -1, 0);

	for (i = 0; i < 20000; i++) {
		if (mmap(mem_area, MEM_SIZE, PROT_READ|PROT_WRITE,
		    MAP_ANON|MAP_FIXED, -1, 0) == MAP_FAILED)
			err(1, NULL);
	}

	return (0);
}
@


1.2
log
@do not request RWX mappings, RW will do
@
text
@d1 1
a1 1
/*	$OpenBSD: mmap_fixed.c,v 1.1.1.1 2006/04/06 20:39:03 kurt Exp $	*/
d10 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d27 1
a27 1
		if (mmap(mem_area, MEM_SIZE, PROT_READ|PROT_WRITE|PROT_EXEC,
@


1.1.1.1
log
@add a regress that repetitively calls mmap with MMAP_FIXED on the same
region of memory to ensure process datasize is properly calculated.
this time in the righ place *sigh* ok pedro@@
@
text
@@
