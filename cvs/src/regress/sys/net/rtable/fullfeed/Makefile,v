head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.2
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.0.4
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.2
	OPENBSD_5_9_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2016.09.07.20.53.34;	author vgross;	state Exp;
branches;
next	1.1;
commitid	AzCU8JJKnN9IIP4V;

1.1
date	2015.11.04.09.45.52;	author mpi;	state Exp;
branches;
next	;
commitid	FEdk7nPXQjqIFBhN;


desc
@@


1.2
log
@add objdir to fix regress test
@
text
@#	$OpenBSD: Makefile,v 1.1 2015/11/04 09:45:52 mpi Exp $

PROG=	fullfeed
SRCS=	main.c util.c rtable.c


REGRESS_TARGETS+=	inet inet6

# XXX route entries are sorted because the radix tree stores dup chains
# XXX from the most specific to least specific
.SUFFIXES: .txt .sorted
.txt.sorted: 
	sort $< > $@@

CLEANFILES+=		*.sorted

${REGRESS_TARGETS}: ${PROG} ${.TARGET}-fullfeed.sorted
	${.OBJDIR}/${PROG} ${.TARGET} ${TOPDIR}/${.TARGET}-fullfeed.txt | \
		sort | diff -u ${.TARGET}-fullfeed.sorted /dev/stdin

.include <bsd.regress.mk>
@


1.1
log
@Basic framework to test the rtable_* API directly from userland.

You can replace inet{,6}-fullfeed.txt with a dump of your fullfeed table
to really stress this test framework.  I did not commit them because CVS
certainly doesn't like ~7M file.
@
text
@d1 1
a1 1
#	$OpenBSD$
d18 1
a18 1
	${PROG} ${.TARGET} ${TOPDIR}/${.TARGET}-fullfeed.txt | \
@

