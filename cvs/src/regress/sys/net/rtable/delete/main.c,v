head	1.5;
access;
symbols
	OPENBSD_6_0:1.4.0.2
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3;
locks; strict;
comment	@ * @;


1.5
date	2016.11.15.10.43.41;	author mpi;	state Exp;
branches;
next	1.4;
commitid	HmW3eebLmXnV8JJk;

1.4
date	2016.07.19.10.52.56;	author mpi;	state Exp;
branches;
next	1.3;
commitid	zEXTxgD8kqjgybKP;

1.3
date	2015.12.03.15.15.04;	author mpi;	state Exp;
branches;
next	1.2;
commitid	EzPopRwGLnsCCvRH;

1.2
date	2015.11.12.14.32.02;	author mpi;	state Exp;
branches;
next	1.1;
commitid	F3DXfaxpha7MAVyW;

1.1
date	2015.11.04.09.45.52;	author mpi;	state Exp;
branches;
next	;
commitid	FEdk7nPXQjqIFBhN;


desc
@@


1.5
log
@rtable_init() now creates the default routing table.
@
text
@/*	$OpenBSD: main.c,v 1.4 2016/07/19 10:52:56 mpi Exp $ */

/*
 * Copyright (c) 2015 Martin Pieuchot
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include "srp_compat.h"

#include <sys/socket.h>
#include <net/route.h>

#include <err.h>
#include <stdio.h>
#include <stdlib.h>

#include "util.h"

#ifdef ART
#include <net/rtable.h>
#include <net/art.h>

#include <assert.h>

extern void  *rtable_get(unsigned int, sa_family_t);
#endif /* ART */

__dead void
usage(void)
{
	extern const char *__progname;
	fprintf(stderr, "Usage: %s <file>\n", __progname);
	exit(1);
}

int
main(int argc, char *argv[])
{
	char *filename;

	if (argc != 2)
		usage();

	filename = argv[1];

	rtable_init();

	do_from_file(0, AF_INET6, filename, route_insert);

	rtable_walk(0, AF_INET6, rtentry_delete, NULL);

	rtable_walk(0, AF_INET6, rtentry_dump, NULL);

#ifdef ART
	struct art_root *ar;
	ar = rtable_get(0, AF_INET6);
	assert(ar != NULL);
	assert(ar->ar_root.ref == NULL);
#endif /* ART */

	return (0);
}
@


1.4
log
@Adapt test to the srp_swap() area.
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.3 2015/12/03 15:15:04 mpi Exp $ */
a57 2
	if (rtable_add(0))
		errx(1, "can't add rtable\n");
@


1.3
log
@Sync to recent changes including SRP protection of rtable_get(), use
of a SRPL for the multipath list and rtable_delete() API change.
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.2 2015/11/12 14:32:02 mpi Exp $ */
d71 1
a71 1
	assert(ar->ar_root == NULL);
@


1.2
log
@ART-specific bits to make sure root tables are properly freed.

While here make sure we test the special "default route" case.
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.1 2015/11/04 09:45:52 mpi Exp $ */
d19 2
a36 1
extern void   rtable_put(void *);
a71 1
	rtable_put(ar);
@


1.1
log
@Basic framework to test the rtable_* API directly from userland.

You can replace inet{,6}-fullfeed.txt with a dump of your fullfeed table
to really stress this test framework.  I did not commit them because CVS
certainly doesn't like ~7M file.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d28 10
d63 10
@

