head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.4
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.4.0.2
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3;
locks; strict;
comment	@ * @;


1.5
date	2016.09.21.07.13.02;	author mpi;	state Exp;
branches;
next	1.4;
commitid	en2xKk3FxrQBWfDn;

1.4
date	2016.06.07.07.57.59;	author mpi;	state Exp;
branches;
next	1.3;
commitid	pbrgUisI2WcZJYWo;

1.3
date	2015.12.04.12.30.57;	author mpi;	state Exp;
branches;
next	1.2;
commitid	FDjzUApnybCU2nev;

1.2
date	2015.12.03.15.15.04;	author mpi;	state Exp;
branches;
next	1.1;
commitid	EzPopRwGLnsCCvRH;

1.1
date	2015.11.04.09.45.52;	author mpi;	state Exp;
branches;
next	;
commitid	FEdk7nPXQjqIFBhN;


desc
@@


1.5
log
@Test ART implementation by default.

RADIX code can be tested by doing "make RADIX=1"
@
text
@/* 	$OpenBSD: kern_compat.h,v 1.4 2016/06/07 07:57:59 mpi Exp $ */

#ifndef _KERN_COMPAT_H_
#define _KERN_COMPAT_H_

#include <sys/socket.h>
#include <sys/domain.h>
#include <sys/queue.h>
#include <sys/mutex.h>
#include <sys/task.h>
#include <arpa/inet.h>

#include <assert.h>
#include <err.h>
#include <errno.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "srp_compat.h"

#define DIAGNOSTIC
#define INET
#define INET6

#define KASSERT(x)		assert(x)
#define KERNEL_ASSERT_LOCKED()	/* nothing */
#define KERNEL_LOCK()		/* nothing */
#define KERNEL_UNLOCK()		/* nothing */

#define panic(x...) errx(1, x)

#define malloc(size, bucket, flag)		calloc(1, size)
#define mallocarray(nelems, size, bucket, flag)	calloc(nelems, size)
#define free(x, bucket, size)			free(x)

struct pool {
	size_t pr_size;
};

#define	pool_init(a, b, c, d, e, f, g)	do { (a)->pr_size = (b); } while (0)
#define pool_setipl(pp, ipl)		/* nothing */
#define pool_get(pp, flags)		malloc((pp)->pr_size, 0, 0)
#define	pool_put(pp, rp)		free((rp), 0, 0)

#define	log(lvl, x...)	fprintf(stderr, x)

#define min(a, b) (a < b ? a : b)
#define max(a, b) (a < b ? b : a)

#ifndef nitems
#define nitems(_a) (sizeof((_a)) / sizeof((_a)[0]))
#endif

#define rtref(_rt)		((_rt)->rt_refcnt++)
#define rtfree(_rt)		(assert(--(_rt)->rt_refcnt >= 0))

#define mtx_enter(_mtx)		/* nothing */
#define mtx_leave(_mtx)		/* nothing */

#define task_add(_tq, _t)	((_t)->t_func((_t)->t_arg))

extern struct domain *domains[];

#define IPL_SOFTNET	0

#define rw_init(rwl, name)
#define rw_enter_write(rwl)
#define rw_exit_write(rwl)
#define rw_assert_wrlock(rwl)

#endif /* _KERN_COMPAT_H_ */
@


1.4
log
@Adapt compat layers after recent changes: srp_swap() and the GC task
for ART.
@
text
@d1 1
a1 1
/* 	$OpenBSD: kern_compat.h,v 1.3 2015/12/04 12:30:57 mpi Exp $ */
d67 5
@


1.3
log
@Sync after rt_mask() removal.
@
text
@d1 1
a1 1
/* 	$OpenBSD: kern_compat.h,v 1.2 2015/12/03 15:15:04 mpi Exp $ */
d9 2
d43 1
d56 7
a62 2
#define rtref(_rt)	((_rt)->rt_refcnt++)
#define rtfree(_rt)	(assert(--(_rt)->rt_refcnt >= 0))
d65 2
@


1.2
log
@Sync to recent changes including SRP protection of rtable_get(), use
of a SRPL for the multipath list and rtable_delete() API change.
@
text
@d1 1
a1 1
/* 	$OpenBSD: kern_compat.h,v 1.1 2015/11/04 09:45:52 mpi Exp $ */
d27 2
@


1.1
log
@Basic framework to test the rtable_* API directly from userland.

You can replace inet{,6}-fullfeed.txt with a dump of your fullfeed table
to really stress this test framework.  I did not commit them because CVS
certainly doesn't like ~7M file.
@
text
@d1 1
a1 1
/* 	$OpenBSD$ */
d18 2
@

