head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.2
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.4
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.3.0.12
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.10
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.8
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.6
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.4
	OPENBSD_5_5_BASE:1.3;
locks; strict;
comment	@# @;


1.5
date	2017.03.03.21.34.14;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	qAvEjax3lixKW4Ec;

1.4
date	2016.10.26.14.06.33;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	yHSLNN6nxp0Yf6eY;

1.3
date	2013.08.13.08.47.10;	author florian;	state Exp;
branches;
next	1.2;

1.2
date	2013.08.11.15.46.26;	author florian;	state Exp;
branches;
next	1.1;

1.1
date	2013.08.11.10.01.56;	author florian;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Do not use an obsolete copy of a Perl module from CPAN for testing.
Require that the p5-Net-Flow package is installed and use it.
@
text
@#! /usr/bin/perl
# $OpenBSD: template.pl,v 1.4 2016/10/26 14:06:33 bluhm Exp $

# Copyright (c) 2013 Florian Obser <florian@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


use strict;
use warnings;

use IO::Socket::INET;
use Net::Flow;

my $port = 9996;

sub usage
{
	print STDERR "$0 [9|10]\n";
	exit(1);
}

{
	my $id2name = {
		  1 => 'octetDeltaCount',
		  2 => 'packetDeltaCount',
		  4 => 'protocolIdentifier',
		  5 => 'ipClassOfService',
		  7 => 'sourceTransportPort',
		  8 => 'sourceIPv4Address',
		 10 => 'ingressInterface',
		 11 => 'destinationTransportPort',
		 12 => 'destinationIPv4Address',
		 14 => 'egressInterface',
		 21 => 'flowEndSysUpTime',
		 22 => 'flowStartSysUpTime',
		 27 => 'sourceIPv6Address',
		 28 => 'destinationIPv6Address',
		150 => 'flowStartSeconds',
		151 => 'flowEndSeconds',
		152 => 'flowStartMilliseconds',
		153 => 'flowEndMilliseconds',
	};
	sub id2name { return $id2name->{$_[0]} || $_[0]; }
}

if (scalar(@@ARGV) != 1 || ($ARGV[0] != 9 && $ARGV[0] != 10)) {
	usage();
}

if (`ifconfig pflow0 2>&1` ne "pflow0: no such interface\n") {
	system('ifconfig', 'pflow0', 'destroy');
}

my $sock = IO::Socket::INET->new( LocalPort =>$port, Proto => 'udp');
my $pid = fork();
if (!defined $pid) {
	die 'cannot fork';
} elsif ( $pid == 0) {
	my ($packet, $header_ref, $template_ref, $flow_ref, $errors_ref);
	$sock->recv($packet,1548);
	($header_ref, $template_ref, $flow_ref, $errors_ref) =
	    Net::Flow::decode(\$packet, $template_ref);
	foreach my $template (@@$template_ref) {
		print('Template Id: ', $template->{TemplateId}, "\n");
		foreach my $template_elem (@@{$template->{Template}}) {
			print(id2name($template_elem->{Id}), '(',
			    $template_elem->{Length}, ')', "\n");
		}
	}
} else {
	close($sock);
	system('ifconfig', 'pflow0', 'flowsrc', '127.0.0.1', 'flowdst',
	    '127.0.0.1:9996', 'pflowproto', $ARGV[0]);
	waitpid($pid, 0);
	system('ifconfig', 'pflow0', 'destroy');
}
@


1.4
log
@Cleanup pflow test before fixing it.  Be more verbose to make
debugging easier.  Handle EINPROGRESS connect(2) error correctly.
Perl pack Q fails on 32 bit machines, add workaround.  Restore
interfaces in END block, works also if script dies.
OK florian@@
@
text
@d2 1
a2 1
# $OpenBSD: template.pl,v 1.3 2013/08/13 08:47:10 florian Exp $
a21 1
use lib '.';
@


1.3
log
@Sync with pflow changes.
@
text
@d2 1
a2 1
# $OpenBSD: template.pl,v 1.2 2013/08/11 15:46:26 florian Exp $
a64 1
	
d73 1
a73 1
	($header_ref, $template_ref, $flow_ref, $errors_ref) = 
@


1.2
log
@typo
@
text
@d2 1
a2 1
# $OpenBSD$
d52 2
@


1.1
log
@pflow(4) template regression tests
@
text
@d38 1
a38 1
		  4 => 'protocolIdentifier ',
@

