head	1.7;
access;
symbols
	OPENBSD_6_2:1.7.0.2
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.7.0.4
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.4.0.2
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.4
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.2.0.12
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.10
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.6
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.2;
locks; strict;
comment	@# @;


1.7
date	2017.01.18.23.03.44;	author bluhm;	state Exp;
branches;
next	1.6;
commitid	CeKCY3OcQDpvUbop;

1.6
date	2016.10.20.19.16.05;	author bluhm;	state Exp;
branches;
next	1.5;
commitid	uBbyZx0hTaqwReOG;

1.5
date	2016.10.20.18.17.04;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	kIXnsv0X637NWchi;

1.4
date	2016.05.22.22.13.33;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	1AiC2RYVGPeCEPmz;

1.3
date	2014.12.19.21.41.20;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	SeHiTyo2F64te6y4;

1.2
date	2012.07.10.12.45.58;	author bluhm;	state Exp;
branches;
next	1.1;

1.1
date	2011.09.21.23.48.23;	author bluhm;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Do not use privileged or NFS source ports for UDP packets as inetd
ignores such packets.  This should avoid some sporadic failures.
While there, use variable names consistently in all tests.
@
text
@#!/usr/local/bin/python2.7
# send 2 non-overlapping ping6 fragments

import os
import threading
from addr import *
from scapy.all import *

class Sniff1(threading.Thread):
	filter = None
	captured = None
	packet = None
	def run(self):
		self.captured = sniff(iface=SRC_IF, filter=self.filter,
		    count=1, timeout=3)
		if self.captured:
			self.packet = self.captured[0]

dstaddr=sys.argv[1]
pid=os.getpid()
eid=pid & 0xffff
payload="ABCDEFGHIJKLOMNO"
packet=IPv6(src=SRC_OUT6, dst=dstaddr)/ICMPv6EchoRequest(id=eid, data=payload)
fid=pid & 0xffffffff
frag0=IPv6ExtHdrFragment(nh=58, id=fid, m=1)/str(packet)[40:56]
frag1=IPv6ExtHdrFragment(nh=58, id=fid, offset=2)/str(packet)[56:64]
pkt0=IPv6(src=SRC_OUT6, dst=dstaddr)/frag0
pkt1=IPv6(src=SRC_OUT6, dst=dstaddr)/frag1
eth=[]
eth.append(Ether(src=SRC_MAC, dst=PF_MAC)/pkt0)
eth.append(Ether(src=SRC_MAC, dst=PF_MAC)/pkt1)

sniffer = Sniff1();
sniffer.filter = "ip6 and src %s and dst %s and icmp6" % (dstaddr, SRC_OUT6)
sniffer.start()
time.sleep(1)
sendp(eth, iface=SRC_IF)
sniffer.join(timeout=5)
a = sniffer.packet

if a and a.type == ETH_P_IPV6 and \
    ipv6nh[a.payload.nh] == 'ICMPv6' and \
    icmp6types[a.payload.payload.type] == 'Echo Reply':
	id=a.payload.payload.id
	print "id=%#x" % (id)
	if id != eid:
		print "WRONG ECHO REPLY ID"
		exit(2)
	data=a.payload.payload.data
	print "payload=%s" % (data)
	if data == payload:
		exit(0)
	print "PAYLOAD!=%s" % (payload)
	exit(1)
print "NO ECHO REPLY"
exit(2)
@


1.6
log
@By removing all the sleeps I created a race in the pf tests.  The
packet was sent and its reply received before the sniffer was up
and running.  So sleep a second after starting the sniffer thread
but before sending the packet.  With pf_forward 0m51.54s, pf_fragment
1m33.59s, pf_state 0m03.64s the test are still faster than with
forking.
@
text
@d20 2
a21 1
pid=os.getpid() & 0xffff
d23 4
a26 3
packet=IPv6(src=SRC_OUT6, dst=dstaddr)/ICMPv6EchoRequest(id=pid, data=payload)
frag0=IPv6ExtHdrFragment(nh=58, id=pid, m=1)/str(packet)[40:56]
frag1=IPv6ExtHdrFragment(nh=58, id=pid, offset=2)/str(packet)[56:64]
d46 1
a46 1
	if id != pid:
@


1.5
log
@Replace fork() and sleep() with a Python thread for sniffing packets.
This reduces test execution time from 2m21.95s to 1m09.80s.
@
text
@d34 1
@


1.4
log
@Fix tests:  Restrict getpid() to lower 16 bit so that it can still
be used as packet id.  Now scapy calls nexthopmtu with this name
explicitly in icmp structure.
@
text
@d5 1
d9 10
d31 6
a36 4
if os.fork() == 0:
	time.sleep(1)
	sendp(eth, iface=SRC_IF)
	os._exit(0)
a37 3
ans=sniff(iface=SRC_IF, timeout=3, filter=
    "ip6 and src "+dstaddr+" and dst "+SRC_OUT6+" and icmp6")
a=ans[0]
@


1.3
log
@Use a simpler expression to check the ether type in scapy.  This
makes the fragment tests work on FreeBSD.  From Ilya Bakulin.
@
text
@d9 1
a9 1
pid=os.getpid()
@


1.2
log
@Kill trailing whitespaces.
@
text
@d28 1
a28 1
if a and a.type == scapy.layers.dot11.ETHER_TYPES.IPv6 and \
@


1.1
log
@Add tests for pf fragment reassembly with all kinds of overlapping.
Some fragments contain invalid data, this must be replaced to
reassemble a valid packet.
@
text
@d5 1
a5 1
from addr import * 
@

