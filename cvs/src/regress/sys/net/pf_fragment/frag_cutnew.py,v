head	1.7;
access;
symbols
	OPENBSD_6_2:1.7.0.6
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.7.0.4
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.4.0.2
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.4
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.2.0.12
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.10
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.6
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.2;
locks; strict;
comment	@# @;


1.7
date	2017.01.18.23.03.44;	author bluhm;	state Exp;
branches;
next	1.6;
commitid	CeKCY3OcQDpvUbop;

1.6
date	2016.10.20.19.16.05;	author bluhm;	state Exp;
branches;
next	1.5;
commitid	uBbyZx0hTaqwReOG;

1.5
date	2016.10.20.18.17.04;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	kIXnsv0X637NWchi;

1.4
date	2016.05.22.22.13.33;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	1AiC2RYVGPeCEPmz;

1.3
date	2014.12.19.21.41.20;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	SeHiTyo2F64te6y4;

1.2
date	2012.07.10.12.45.58;	author bluhm;	state Exp;
branches;
next	1.1;

1.1
date	2011.09.21.23.48.23;	author bluhm;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Do not use privileged or NFS source ports for UDP packets as inetd
ignores such packets.  This should avoid some sporadic failures.
While there, use variable names consistently in all tests.
@
text
@#!/usr/local/bin/python2.7
# start of new fragment overlaps old one

# |--------|
#     |>>>>>----|

# If the tail of an older fragment overlaps the beginning of the
# current fragment, cut the newer fragment.
#                 m_adj(frent->fe_m, precut);
# Newer data wins.

import os
import threading
from addr import *
from scapy.all import *

class Sniff1(threading.Thread):
	filter = None
	captured = None
	packet = None
	def run(self):
		self.captured = sniff(iface=SRC_IF, filter=self.filter,
		    count=1, timeout=3)
		if self.captured:
			self.packet = self.captured[0]

dstaddr=sys.argv[1]
pid=os.getpid()
eid=pid & 0xffff
payload="ABCDEFGHIJKLOMNO"
dummy="01234567"
packet=IP(src=SRC_OUT, dst=dstaddr)/ICMP(type='echo-request', id=eid)/payload
frag0=str(packet)[20:36]
frag1=dummy+str(packet)[36:44]
fid=pid & 0xffff
pkt0=IP(src=SRC_OUT, dst=dstaddr, proto=1, id=fid, frag=0, flags='MF')/frag0
pkt1=IP(src=SRC_OUT, dst=dstaddr, proto=1, id=fid, frag=1)/frag1
eth=[]
eth.append(Ether(src=SRC_MAC, dst=PF_MAC)/pkt0)
eth.append(Ether(src=SRC_MAC, dst=PF_MAC)/pkt1)

sniffer = Sniff1();
sniffer.filter = "ip and src %s and dst %s and icmp" % (dstaddr, SRC_OUT)
sniffer.start()
time.sleep(1)
sendp(eth, iface=SRC_IF)
sniffer.join(timeout=5)
a = sniffer.packet

if a and a.type == ETH_P_IP and \
    a.payload.proto == 1 and \
    a.payload.frag == 0 and a.payload.flags == 0 and \
    icmptypes[a.payload.payload.type] == 'echo-reply':
	id=a.payload.payload.id
	print "id=%#x" % (id)
	if id != eid:
		print "WRONG ECHO REPLY ID"
		exit(2)
	load=a.payload.payload.payload.load
	print "payload=%s" % (load)
	if load == payload:
		exit(0)
	print "PAYLOAD!=%s" % (payload)
	exit(1)
print "NO ECHO REPLY"
exit(2)
@


1.6
log
@By removing all the sleeps I created a race in the pf tests.  The
packet was sent and its reply received before the sniffer was up
and running.  So sleep a second after starting the sniffer thread
but before sending the packet.  With pf_forward 0m51.54s, pf_fragment
1m33.59s, pf_state 0m03.64s the test are still faster than with
forking.
@
text
@d28 2
a29 1
pid=os.getpid() & 0xffff
d32 1
a32 1
packet=IP(src=SRC_OUT, dst=dstaddr)/ICMP(id=pid)/payload
d35 3
a37 2
pkt0=IP(src=SRC_OUT, dst=dstaddr, proto=1, id=pid, frag=0, flags='MF')/frag0
pkt1=IP(src=SRC_OUT, dst=dstaddr, proto=1, id=pid, frag=1)/frag1
d56 1
a56 1
	if id != pid:
@


1.5
log
@Replace fork() and sleep() with a Python thread for sniffing packets.
This reduces test execution time from 2m21.95s to 1m09.80s.
@
text
@d43 1
@


1.4
log
@Fix tests:  Restrict getpid() to lower 16 bit so that it can still
be used as packet id.  Now scapy calls nexthopmtu with this name
explicitly in icmp structure.
@
text
@d13 1
d17 10
d40 6
a45 4
if os.fork() == 0:
	time.sleep(1)
	sendp(eth, iface=SRC_IF)
	os._exit(0)
a46 3
ans=sniff(iface=SRC_IF, timeout=3, filter=
    "ip and src "+dstaddr+" and dst "+SRC_OUT+" and icmp")
a=ans[0]
@


1.3
log
@Use a simpler expression to check the ether type in scapy.  This
makes the fragment tests work on FreeBSD.  From Ilya Bakulin.
@
text
@d17 1
a17 1
pid=os.getpid()
@


1.2
log
@Kill trailing whitespaces.
@
text
@d37 1
a37 1
if a and a.type == scapy.layers.dot11.ETHER_TYPES.IPv4 and \
@


1.1
log
@Add tests for pf fragment reassembly with all kinds of overlapping.
Some fragments contain invalid data, this must be replaced to
reassemble a valid packet.
@
text
@d13 1
a13 1
from addr import * 
@

