head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.6
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.4
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.2.0.8
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.6
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.4
	OPENBSD_5_6_BASE:1.2;
locks; strict;
comment	@# @;


1.4
date	2015.08.24.23.12.53;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	io7tL4yJ4LeVqmMX;

1.3
date	2015.08.17.22.06.50;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	dA9USfvUvCKUBfV4;

1.2
date	2014.07.18.23.54.55;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	q1ZGA4d2w2OgeX39;

1.1
date	2014.07.12.22.43.31;	author bluhm;	state Exp;
branches;
next	;
commitid	8kciCoVC9NsnDpq4;


desc
@@


1.4
log
@Extend the pf forward and fragment tests with a second challenge
for path MTU discovery.  The router behind the pf machine has MTU
1300.  The ICMP packet generated by the router matches the pf state
and is NATed correctly.  Additionally the pf machine itself has an
interface MTU 1400.  So when pf is sending a packet is has to
generate a correct "fragmentation needed" or "packet too big" ICMP
response.  This is done with pf route-to and reply-to.
@
text
@# pf on PF must have these rules in the regress anchor

pass to { $PF_IN/24   $PF_IN6/64 }
pass to { $RT_IN/24   $RT_IN6/64 }
pass to { $ECO_IN/24  $ECO_IN6/64 }
pass to { $ECO_OUT/24 $ECO_OUT6/64 }
pass to { $RDR_IN/24  $RDR_IN6/64 }
pass to { $RDR_OUT/24 $RDR_OUT6/64 }

pass in  to { $RDR_IN/24   $RDR_OUT/24 }  rdr-to $ECO_IN
pass out to { $ECO_OUT/24  $RDR_OUT/24 }  nat-to $PF_OUT
pass in  to { $RDR_IN6/64  $RDR_OUT6/64 } rdr-to $ECO_IN6
pass out to { $ECO_OUT6/64 $RDR_OUT6/64 } nat-to $PF_OUT6

pass in  to $AF_IN/24  af-to inet6 from $PF_OUT6 to $ECO_IN6/120 tag af
pass out                     inet6                               tagged af
pass in  to $AF_IN6/64 af-to inet  from $PF_OUT  to $ECO_IN/24   tag af
pass out                     inet                                tagged af

pass in  to $RTT_IN/24                             tag rtt
pass out                route-to $RT_IN@@$PF_IFOUT  tagged rtt
pass in  to $RTT_IN6/64                            tag rtt
pass out                route-to $RT_IN6@@$PF_IFOUT tagged rtt

pass in  from $RPT_OUT/24  reply-to $SRC_OUT@@$PF_IFIN  tag rpt
pass out                                               tagged rpt
pass in  from $RPT_OUT6/64 reply-to $SRC_OUT6@@$PF_IFIN tag rpt
pass out                                               tagged rpt
@


1.3
log
@Add forwarding tests for pf route-to and reply-to.  Keep pf forward
and pf fragment tests in sync.
@
text
@d20 4
a23 4
pass in  to $RTT_IN/24                          tag rtt
pass out                route-to $RT_IN@@$PF_IF  tagged rtt
pass in  to $RTT_IN6/64                         tag rtt
pass out                route-to $RT_IN6@@$PF_IF tagged rtt
d25 4
a28 4
pass in  from $RPT_OUT/24  reply-to $SRC_OUT@@$PF_IF  tag rpt
pass out                                             tagged rpt
pass in  from $RPT_OUT6/64 reply-to $SRC_OUT6@@$PF_IF tag rpt
pass out                                             tagged rpt
@


1.2
log
@The pf forward tests were running rdr-to and nat-to simultaneously
only.  Change address layout and add individual tests for each
feature rdr-to and nat-to and rdr-to together with nat-to.
@
text
@d19 10
@


1.1
log
@Automatically load the required pf rules into the kernel of the
remote test machine.
@
text
@d3 6
a8 4
pass to { $PF_IN/24 $PF_IN6/64 }
pass to { $RT_IN/24 $RT_IN6/64 }
pass to { $ECO_IN/24 $ECO_IN6/64 }
pass to { $RDR_IN/24 $RDR_IN6/64 }
d10 4
a13 4
pass in  to $RDR_IN/24  rdr-to $ECO_IN  tag rdr
pass out                nat-to $PF_OUT  tagged rdr
pass in  to $RDR_IN6/64 rdr-to $ECO_IN6 tag rdr
pass out                nat-to $PF_OUT6 tagged rdr
@

