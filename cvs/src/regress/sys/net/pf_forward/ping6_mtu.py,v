head	1.11;
access;
symbols
	OPENBSD_6_2:1.11.0.2
	OPENBSD_6_2_BASE:1.11
	OPENBSD_6_1:1.11.0.4
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.7.0.2
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.3.0.12
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.10
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.6
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3;
locks; strict;
comment	@# @;


1.11
date	2017.01.18.23.03.44;	author bluhm;	state Exp;
branches;
next	1.10;
commitid	CeKCY3OcQDpvUbop;

1.10
date	2016.10.20.21.05.58;	author bluhm;	state Exp;
branches;
next	1.9;
commitid	V0KwVY2KraO9zTRW;

1.9
date	2016.10.20.19.16.05;	author bluhm;	state Exp;
branches;
next	1.8;
commitid	uBbyZx0hTaqwReOG;

1.8
date	2016.10.20.17.25.50;	author bluhm;	state Exp;
branches;
next	1.7;
commitid	Hiho3cf4tCtZw4ja;

1.7
date	2016.05.22.22.13.33;	author bluhm;	state Exp;
branches;
next	1.6;
commitid	1AiC2RYVGPeCEPmz;

1.6
date	2015.09.11.15.57.37;	author bluhm;	state Exp;
branches;
next	1.5;
commitid	7dkMbqm14825sRDk;

1.5
date	2015.08.24.23.12.53;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	io7tL4yJ4LeVqmMX;

1.4
date	2014.12.19.21.41.20;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	SeHiTyo2F64te6y4;

1.3
date	2012.07.10.17.28.57;	author bluhm;	state Exp;
branches;
next	1.2;

1.2
date	2012.07.10.16.52.45;	author bluhm;	state Exp;
branches;
next	1.1;

1.1
date	2012.07.10.12.43.54;	author bluhm;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Do not use privileged or NFS source ports for UDP packets as inetd
ignores such packets.  This should avoid some sporadic failures.
While there, use variable names consistently in all tests.
@
text
@#!/usr/local/bin/python2.7
# check wether path mtu to dst is as expected

import os
import threading
from addr import *
from scapy.all import *

# usage: ping6_mtu src dst size icmp6-size

# work around the broken sniffing of packages with bad checksum
#a=srp1(eth, iface=SRC_IF, timeout=2)
class Sniff1(threading.Thread):
	filter = None
	captured = None
	packet = None
	def run(self):
		self.captured = sniff(iface=SRC_IF, filter=self.filter,
		    count=1, timeout=3)
		if self.captured:
			self.packet = self.captured[0]

srcaddr=sys.argv[1]
dstaddr=sys.argv[2]
size=int(sys.argv[3])
expect=int(sys.argv[4])
eid=os.getpid() & 0xffff
hdr=IPv6(src=srcaddr, dst=dstaddr)/ICMPv6EchoRequest(id=eid)
payload="a" * (size - len(str(hdr)))
ip=hdr/payload
iplen=IPv6(str(ip)).plen
eth=Ether(src=SRC_MAC, dst=PF_MAC)/ip

sniffer = Sniff1();
# pcap cannot access icmp6, check for packet too big, avoid neighbor discovery
sniffer.filter = "ip6 and dst %s and icmp6 and ip6[40] = 2 and ip6[41] = 0" \
    % srcaddr
sniffer.start()
time.sleep(1)
sendp(eth, iface=SRC_IF)
sniffer.join(timeout=5)
a = sniffer.packet

if a is None:
	print "no packet sniffed"
	exit(2)
if a and a.type == ETH_P_IPV6 and \
    ipv6nh[a.payload.nh] == 'ICMPv6' and \
    icmp6types[a.payload.payload.type] == 'Packet too big':
	mtu=a.payload.payload.mtu
	print "mtu=%d" % (mtu)
	if mtu != expect:
		print "MTU!=%d" % (expect)
		exit(1)
	iip=a.payload.payload.payload
	iiplen=iip.plen
	if iiplen != iplen:
		print "inner IPv6 plen %d!=%d" % (iiplen, iplen)
		exit(1)
	isrc=iip.src
	if isrc != srcaddr:
		print "inner IPv6 src %d!=%d" % (isrc, srcaddr)
		exit(1)
	idst=iip.dst
	if idst != dstaddr:
		print "inner IPv6 dst %d!=%d" % (idst, dstaddr)
		exit(1)
	exit(0)
print "MTU=UNKNOWN"
exit(2)
@


1.10
log
@During sniffing filter strictly on icmp6 "packet too big" to avoid
that "neighbor discovery" confuses the test.
@
text
@d27 2
a28 2
pid=os.getpid() & 0xffff
hdr=IPv6(src=srcaddr, dst=dstaddr)/ICMPv6EchoRequest(id=pid)
@


1.9
log
@By removing all the sleeps I created a race in the pf tests.  The
packet was sent and its reply received before the sniffer was up
and running.  So sleep a second after starting the sniffer thread
but before sending the packet.  With pf_forward 0m51.54s, pf_fragment
1m33.59s, pf_state 0m03.64s the test are still faster than with
forking.
@
text
@d35 3
a37 1
sniffer.filter = "ip6 and dst %s and icmp6" % srcaddr
d44 3
@


1.8
log
@Replace fork() and sleep() with a Python thread for sniffing packets.
This reduces test execution time from 1m20.34s to 0m37.32s.
@
text
@d37 1
@


1.7
log
@Fix tests:  Restrict getpid() to lower 16 bit so that it can still
be used as packet id.  Now scapy calls nexthopmtu with this name
explicitly in icmp structure.
@
text
@d5 1
d11 12
d34 6
a39 12
# work around the broken sniffing of packages with bad checksum
#a=srp1(eth, iface=SRC_IF, timeout=2)
if os.fork() == 0:
	time.sleep(1)
	sendp(eth, iface=SRC_IF)
	os._exit(0)
ans=sniff(iface=SRC_IF, timeout=3, filter=
    "ip6 and dst "+srcaddr+" and icmp6")
if len(ans) == 0:
	print "no packet sniffed"
	exit(2)
a=ans[0]
@


1.6
log
@fter fixing poll(2) semantics in dynamic TCP buffer size update,
making netcat non-blocking and fixing ip6_forward() ICMP6 checksum,
this test can be made more aggressive.  Delete the path MTU route
before sending TCP streams through the pf firewall.  This checks
that PMTU discovery works with outgoing interface MTU and router
MTU.
Test IPv4 and IPv6 protocols ICMP echo, UDP, TCP with pf nat-to,
rdr-to, af-to, route-to, reply-to.  Some af-to cases seem to be
broken.
@
text
@d14 1
a14 1
pid=os.getpid()
@


1.5
log
@Extend the pf forward and fragment tests with a second challenge
for path MTU discovery.  The router behind the pf machine has MTU
1300.  The ICMP packet generated by the router matches the pf state
and is NATed correctly.  Additionally the pf machine itself has an
interface MTU 1400.  So when pf is sending a packet is has to
generate a correct "fragmentation needed" or "packet too big" ICMP
response.  This is done with pf route-to and reply-to.
@
text
@d42 12
a53 3
	len=a.payload.payload.payload.plen
	if len != iplen:
		print "IPv6 plen %d!=%d" % (len, iplen)
@


1.4
log
@Use a simpler expression to check the ether type in scapy.  This
makes the fragment tests work on FreeBSD.  From Ilya Bakulin.
@
text
@d8 6
a13 2
dstaddr=sys.argv[1]
expect=int(sys.argv[2])
d15 3
a17 2
payload="a" * 1452
ip=IPv6(src=SRC_OUT6, dst=dstaddr)/ICMPv6EchoRequest(id=pid, data=payload)
d28 1
a28 1
    "ip6 and dst "+SRC_OUT6+" and icmp6")
@


1.3
log
@Add a workaround that scapy srp1() cannot detect ICMP6 error replies
with broken checksums in the quoted IPv6 packet.  Fork a process
to sendp() the packet in the background and sniff() the reply
manually in the foreground.
@
text
@d29 1
a29 1
if a and a.type == scapy.layers.dot11.ETHER_TYPES.IPv6 and \
@


1.2
log
@Add a subtest to the MTU ping that checks wether the ip length of
the original packet and the icmp quoted packet are the same.
@
text
@d15 14
a28 1
a=srp1(eth, iface=SRC_IF, timeout=2)
@


1.1
log
@Add a test suite to route ip packets through a box running pf.  You
have to setup four machines manually as described in the makefile.
The test uses netcat and scapy to send ping or udp echo packets or
tcp streams along the routers.  It analyzes the returned reply or
icmp error packets.  It tests the forward and net/rdr and net64
paths.
@
text
@d12 4
a15 2
a=srp1(Ether(src=SRC_MAC, dst=PF_MAC)/IPv6(src=SRC_OUT6, dst=dstaddr)/
    ICMPv6EchoRequest(id=pid, data=payload), iface=SRC_IF, timeout=2)
d21 8
a28 4
	if mtu == expect:
		exit(0)
	print "MTU!=%d" % (expect)
	exit(1)
@

