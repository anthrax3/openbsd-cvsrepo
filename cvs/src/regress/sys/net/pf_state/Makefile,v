head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.4
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.5.0.4
	OPENBSD_6_1_BASE:1.5
	bluhm_20161019:1.1.1.1
	bluhm:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2017.07.07.23.15.27;	author bluhm;	state Exp;
branches;
next	1.5;
commitid	o44bwTTe61BAwrkn;

1.5
date	2017.02.27.23.05.21;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	W4sRdEDrJlbgmuC0;

1.4
date	2016.11.21.22.56.35;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	RPwHsfGbEmb36hR3;

1.3
date	2016.11.09.12.43.36;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	KmAoTmuhuGgcwJup;

1.2
date	2016.10.20.16.31.37;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	M6nQiwYW6Kzr65WL;

1.1
date	2016.10.19.16.39.50;	author bluhm;	state Exp;
branches
	1.1.1.1;
next	;
commitid	DXnLPNyXQsmQXUte;

1.1.1.1
date	2016.10.19.16.39.50;	author bluhm;	state Exp;
branches;
next	;
commitid	DXnLPNyXQsmQXUte;


desc
@@


1.6
log
@Remove useless make depend targets.
@
text
@#	$OpenBSD: Makefile,v 1.5 2017/02/27 23:05:21 bluhm Exp $

# The following ports must be installed:
#
# python-2.7          interpreted object-oriented programming language
# py-libdnet          python interface to libdnet
# scapy               powerful interactive packet manipulation in python

.include <bsd.own.mk>

.if ! (make(clean) || make(cleandir) || make(obj))
# Check wether all required python packages are installed.  If some
# are missing print a warning and skip the tests, but do not fail.
PYTHON_IMPORT !!= python2.7 -c 'from scapy.all import *' 2>&1 || true
PF_ENABLED !!=	${SUDO} pfctl -si | grep '^Status: Enabled ' || true
PF_ANCHOR !!=	${SUDO} pfctl -sr | grep '^anchor "regress" all$$' || true
.endif

.if ! empty(PYTHON_IMPORT)
.BEGIN:
	@@true
regress:
	@@echo '${PYTHON_IMPORT}'
	@@echo Install python and the scapy module for additional tests.
	@@echo SKIPPED
.endif

.if ! empty(PF_ENABLED) && empty(PF_ANCHOR)
.BEGIN:
	@@true
regress:
	@@echo This test cannot run with pf filtering packets on localhost.
	@@echo Either disable pf or add a line 'anchor "regress"' to pf.conf.
	@@echo There the test will add a stateless rule that passes all packets.
	@@echo SKIPPED
.endif

# This test needs a manual setup of two machines
# Set up machines: LOCAL REMOTE
# LOCAL is the machine where this makefile is running.
# REMOTE is running OpenBSD with echo server to test PMTU
# FAKE is an non existing machine in a non existing network.
# REMOTE_SSH is the hostname to log in on the REMOTE machine.

# Configure Addresses on the machines.
# Adapt interface and addresse variables to your local setup.
#
LOCAL_IF ?=
REMOTE_SSH ?=

LOCAL_ADDR ?=
REMOTE_ADDR ?=
FAKE_NET ?=
FAKE_NET_ADDR ?=

.if empty (LOCAL_IF) || empty (REMOTE_SSH) || \
    empty (LOCAL_ADDR) || \
    empty (REMOTE_ADDR) || \
    empty (FAKE_NET) || \
    empty (FAKE_NET_ADDR)
.BEGIN:
	@@true
regress:
	@@echo This tests needs a remote machine to operate on
	@@echo LOCAL_IF REMOTE_SSH LOCAL_ADDR REMOTE_ADDR FAKE_NET FAKE_NET_ADDR
	@@echo are empty.  Fill out these variables for additional tests.
	@@echo SKIPPED
.endif

.MAIN: all

.if make (regress) || make (all)
.BEGIN: pf.conf addr.py
	@@echo
	${SUDO} true
	ssh -t ${REMOTE_SSH} ${SUDO} true
	rm -f stamp-pfctl
.endif

# Create python include file containing the addresses.
addr.py: Makefile
	rm -f $@@ $@@.tmp
	echo 'LOCAL_IF = "${LOCAL_IF}"' >>$@@.tmp
.for var in LOCAL REMOTE FAKE_NET
	echo '${var}_ADDR = "${${var}_ADDR}"' >>$@@.tmp
.endfor
	echo 'FAKE_NET = "${FAKE_NET}"' >>$@@.tmp
	mv $@@.tmp $@@

# load the pf rules into the kernel of the REMOTE machine
stamp-pfctl: addr.py pf.conf
	cat addr.py ${.CURDIR}/pf.conf | pfctl -n -f -
	cat addr.py ${.CURDIR}/pf.conf | \
	    ssh ${REMOTE_SSH} ${SUDO} pfctl -a regress -f -
.if ! empty(PF_ANCHOR)
	echo 'pass on ${LOCAL_IF} no state' | ${SUDO} pfctl -a regress -f -
.endif
	@@date >$@@

# Set variables so that make runs with and without obj directory.
# Only do that if necessary to keep visible output short.
.if ${.CURDIR} == ${.OBJDIR}
PYTHON =	python2.7 -u ./
.else
PYTHON =	PYTHONPATH=${.OBJDIR} python2.7 -u ${.CURDIR}/
.endif

TARGETS +=	challenge-ack
run-regress-challenge-ack: stamp-pfctl
	@@echo '\n======== $@@ ========'
	${SUDO} ${PYTHON}challenge_ack.py

.if ! empty(PF_ANCHOR)
TARGETS +=	cleanup
run-regress-cleanup:
	@@echo '\n======== $@@ ========'
	${SUDO} pfctl -a regress -Fr
.endif

REGRESS_TARGETS =	${TARGETS:S/^/run-regress-/}

CLEANFILES +=		addr.py *.pyc *.log stamp-*

.PHONY: check-setup check-setup-local check-setup-remote

# Check wether the address, route and remote setup is correct
check-setup: check-setup-local check-setup-remote

check-setup-local:
	@@echo '\n======== $@@ ========'
	ping -n -c 1 ${LOCAL_ADDR}  # LOCAL_ADDR
	route -n get -inet ${LOCAL_ADDR} | grep -q 'flags: .*LOCAL'  # LOCAL_ADDR
	ping -n -c 1 ${REMOTE_ADDR}  # REMOTE_ADDR
	route -n get -inet ${REMOTE_ADDR} | fgrep -q 'interface: ${LOCAL_IF}'  # REMOTE_ADDR LOCAL_IF
	! ping -n -c 1 -w 1 ${FAKE_NET_ADDR}  # FAKE_NET_ADDR
.for ip in FAKE_NET FAKE_NET_ADDR
	route -n get -inet ${${ip}} | grep -q 'flags: .*BLACKHOLE'  # ${ip}
.endfor

check-setup-remote:
	@@echo '\n======== $@@ ========'
	ssh ${REMOTE_SSH} ping -n -c 1 ${REMOTE_ADDR}  # REMOTE_ADDR
	ssh ${REMOTE_SSH} route -n get -inet ${REMOTE_ADDR} | grep -q 'flags: .*LOCAL'  # REMOTE_ADDR
	ssh ${REMOTE_SSH} ping -n -c 1 ${LOCAL_ADDR}  # LOCAL_ADDR
.for ip in FAKE_NET FAKE_NET_ADDR
	ssh ${REMOTE_SSH} route -n get -inet ${${ip}} | fgrep -q 'gateway: ${LOCAL_ADDR}'  # ${ip} LOCAL_ADDR
.endfor
	ssh ${REMOTE_SSH} netstat -na -f inet -p tcp | fgrep ' *.7 '
	ssh ${REMOTE_SSH} ${SUDO} pfctl -sr | grep '^anchor "regress" all$$'
	ssh ${REMOTE_SSH} ${SUDO} pfctl -si | grep '^Status: Enabled '

.include <bsd.regress.mk>
@


1.5
log
@This test cannot pass while pf on localhost filters packets statefully.
If the local pf is enabled, write a temporary stateless pass rule
into the regress anchor.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.4 2016/11/21 22:56:35 bluhm Exp $
a78 2

depend: addr.py
@


1.4
log
@Print better error message if test fails.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.3 2016/11/09 12:43:36 bluhm Exp $
d9 2
d14 3
a16 1
PYTHON_IMPORT != python2.7 -c 'from scapy.all import *' 2>&1 || true
d18 1
d20 2
d24 11
a34 1
	@@echo install python and the scapy module for additional tests
d61 2
d77 1
d97 3
d114 7
@


1.3
log
@Use netstat -n in target check-setup to avoid DNS timeout.
Requested by mpi@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.2 2016/10/20 16:31:37 bluhm Exp $
d108 3
a110 2
	route -n get -inet ${FAKE_NET_ADDR} | grep -q 'flags: .*BLACKHOLE'  # FAKE_NET_ADDR
	route -n get -inet -net ${FAKE_NET} | grep -q 'flags: .*BLACKHOLE'  # FAKE_NET
@


1.2
log
@Make the test faster.  Move all the packet matching code into the
pcap filter.  That means the first packet sniffed is the correct
one.  In the success case, we can stop without waiting for a timeout.
OK sashan@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.1.1.1 2016/10/19 16:39:50 bluhm Exp $
d24 1
a24 1
# REMOTE is running OpenBSD with echo and chargen server to test PMTU
d119 1
a119 1
	ssh ${ECO_SSH} netstat -a -f inet -p tcp | fgrep ' *.echo '
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
#	$OpenBSD$
d90 1
a90 1
	${SUDO} ${PYTHON}challenge_ack.py ${FAKE_NET_ADDR} ${REMOTE_ADDR}
@


1.1.1.1
log
@Add a test suite for pf state handling.  It needs a remote machine
to exchange packets, the remote kernel is tested.  For now it only
contains a challenge ack test written by sashan@@.
OK sashan@@
@
text
@@
