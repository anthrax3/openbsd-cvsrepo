head	1.2;
access;
symbols
	OPENBSD_6_1:1.1.0.10
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.6
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.2
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.4
	OPENBSD_5_8_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2017.08.15.04.11.20;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	LHIvCN212Bjl0MLN;

1.1
date	2015.07.28.12.31.29;	author bluhm;	state Exp;
branches;
next	;
commitid	o6wdSs3EDVW9tmqt;


desc
@@


1.2
log
@Add tests for pf divert-packet.  Currently UDP packets are tested
with in and out rules.  A single packet, the initial packet or the
response packet are diverted and reinjected.
@
text
@# test divert-reply with udp with out and in packet

use strict;
use warnings;
use Socket;

our %args = (
    protocol => "udp",
    client => { func => \&write_read_datagram },
    server => { func => \&read_write_datagram },
    divert => "reply",
);
@


1.1
log
@Add more and deeper tests for pf divert-reply rules.  Especially
the combination of sending and receiving multiple packets over one
socket is tested for UDP, raw IP and ICMP.
@
text
@d9 2
a10 16
    client => {
	func => sub {
	    my $self = shift;
	    write_datagram($self);
	    read_datagram($self);
	},
    },
    server => {
	func => sub {
	    my $self = shift;
	    read_datagram($self);
	    $self->{toaddr} = $self->{fromaddr};
	    $self->{toport} = $self->{fromport};
	    write_datagram($self);
	},
    },
@

