head	1.3;
access;
symbols
	OPENBSD_6_1:1.3.0.8
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.6
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.4
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.2.0.10
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.8
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.2
	OPENBSD_5_4_BASE:1.2;
locks; strict;
comment	@# @;


1.3
date	2015.07.28.12.31.29;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	o6wdSs3EDVW9tmqt;

1.2
date	2013.06.04.04.17.42;	author bluhm;	state Exp;
branches;
next	1.1;

1.1
date	2013.06.03.21.07.45;	author bluhm;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Add more and deeper tests for pf divert-reply rules.  Especially
the combination of sending and receiving multiple packets over one
socket is tested for UDP, raw IP and ICMP.
@
text
@# test divert-reply with udp

use strict;
use warnings;

our %args = (
    protocol => "udp",
    client => { func => \&write_datagram, noin => 1, },
    server => { func => \&read_datagram, noout => 1, },
    divert => "reply",
);
@


1.2
log
@Add tests for raw IP divert.  Set effective user ID to 0 only during
privileged operations for raw sockets and bind any.
@
text
@d7 4
a10 4
	protocol => "udp",
	client => { func => \&write_datagram, noin => 1, },
	server => { func => \&read_datagram, noout => 1, },
	divert => "reply",
@


1.1
log
@Add tests for UDP divert.
@
text
@d1 1
a1 1
# test divert-to with udp
@

