head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.4
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.6.0.6
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.5.0.8
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.6
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.4
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	bluhm_20130603:1.1.1.1
	bluhm:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2016.11.15.16.00.50;	author bluhm;	state Exp;
branches;
next	1.6;
commitid	GFMbw7tGYp1GtemC;

1.6
date	2015.07.28.12.31.29;	author bluhm;	state Exp;
branches;
next	1.5;
commitid	o6wdSs3EDVW9tmqt;

1.5
date	2013.11.03.00.32.36;	author bluhm;	state Exp;
branches;
next	1.4;

1.4
date	2013.06.05.04.34.27;	author bluhm;	state Exp;
branches;
next	1.3;

1.3
date	2013.06.04.04.17.42;	author bluhm;	state Exp;
branches;
next	1.2;

1.2
date	2013.06.03.21.07.45;	author bluhm;	state Exp;
branches;
next	1.1;

1.1
date	2013.06.03.05.06.38;	author bluhm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.06.03.05.06.38;	author bluhm;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Mark pf states created by this regress test with a label.  Remove
all such states before basic testing to make sure that these subtests
are independent.
@
text
@#!/usr/bin/perl
#	$OpenBSD: remote.pl,v 1.6 2015/07/28 12:31:29 bluhm Exp $

# Copyright (c) 2010-2015 Alexander Bluhm <bluhm@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

BEGIN {
	if ($> == 0 && $ENV{SUDO_UID}) {
		$> = $ENV{SUDO_UID};
	}
}

use File::Basename;
use File::Copy;
use Getopt::Std;
use Socket;
use Socket6;

use Client;
use Server;
use Remote;
require 'funcs.pl';

sub usage {
	die <<"EOF";
usage:
    remote.pl af bindaddr connectaddr connectport test-args.pl
	Only start remote relay.
    remote.pl af bindaddr connectaddr connectport bindport test-args.pl
	Only start remote relay with fixed port, needed for reuse.
    remote.pl af localaddr fakeaddr remotessh test-args.pl
	Run test with local client and server.  Remote relay is
	started automatically with ssh on remotessh.
    remote.pl af localaddr fakeaddr remotessh clientport serverport test-args.pl
	Run test with local client and server and fixed port, needed for reuse.
    -f	flush regress states
EOF
}

my $command = "$0 @@ARGV";
my $test;
our %args;
if (@@ARGV) {
	$test = pop;
	do $test
	    or die "Do test file $test failed: ", $@@ || $!;
}
my %opts;
getopts("f", \%opts) or usage();
my($af, $domain, $protocol);
if (@@ARGV) {
	$af = shift;
	$domain =
	    $af eq "inet" ? AF_INET :
	    $af eq "inet6" ? AF_INET6 :
	    die "address family must be 'inet' or 'inet6\n";
	$protocol = $args{protocol};
	$protocol = $protocol->({ %args, af => $af, domain => $domain, })
	    if ref $protocol eq 'CODE';
}
my $mode =
	@@ARGV >= 3 && $ARGV[0] !~ /^\d+$/ && $ARGV[2] =~ /^\d+$/ ? "divert" :
	@@ARGV >= 3 && $ARGV[0] !~ /^\d+$/ && $ARGV[2] !~ /^\d+$/ ? "auto"   :
	usage();
my($clientport, $serverport, $bindport);
if (@@ARGV == 5 && $mode eq "auto") {
	($clientport, $serverport) = @@ARGV[3,4];
} elsif (@@ARGV == 4 && $mode eq "divert") {
	($bindport) = $ARGV[3];
} elsif (@@ARGV != 3) {
	usage();
}

my($c, $l, $r, $s, $logfile);
my $divert	= $args{divert} || "to";
my $local	= $divert eq "to" ? "client" : "server";
my $remote	= $divert eq "to" ? "server" : "client";
if ($mode eq "divert") {
	$local		= $divert eq "to" ? "server" : "client";
	$remote		= $divert eq "to" ? "client" : "server";
	$logfile	= dirname($0)."/remote.log";
}
my $srcaddr	= $ARGV[0];
my $dstaddr	= $ARGV[1];
if ($mode eq "divert" xor $divert eq "reply") {
	($srcaddr, $dstaddr) = ($dstaddr, $srcaddr);
}

if ($local eq "server") {
	$l = $s = Server->new(
	    %args,
	    %{$args{server}},
	    logfile		=> $logfile,
	    af			=> $af,
	    domain		=> $domain,
	    protocol		=> $protocol,
	    listenaddr		=> $mode ne "divert" ? $ARGV[0] :
		$af eq "inet" ? "127.0.0.1" : "::1",
	    listenport		=> $serverport || $bindport,
	    srcaddr		=> $srcaddr,
	    dstaddr		=> $dstaddr,
	) if $args{server};
}
if ($mode eq "auto") {
	$r = Remote->new(
	    %args,
	    opts		=> \%opts,
	    logfile		=> "$remote.log",
	    testfile		=> $test,
	    af			=> $af,
	    remotessh		=> $ARGV[2],
	    bindaddr		=> $ARGV[1],
	    bindport		=> $remote eq "client" ?
		$clientport : $serverport,
	    connect		=> $remote eq "client",
	    connectaddr		=> $ARGV[0],
	    connectport		=> $s ? $s->{listenport} : 0,
	);
	$r->run->up;
	$r->loggrep(qr/^Diverted$/, 10)
	    or die "no Diverted in $r->{logfile}";
}
if ($local eq "client") {
	$l = $c = Client->new(
	    %args,
	    %{$args{client}},
	    logfile		=> $logfile,
	    af			=> $af,
	    domain		=> $domain,
	    protocol		=> $protocol,
	    connectaddr		=> $ARGV[1],
	    connectport		=> $r ? $r->{listenport} : $ARGV[2],
	    bindany		=> $mode eq "divert",
	    bindaddr		=> $ARGV[0],
	    bindport		=> $clientport || $bindport,
	    srcaddr		=> $srcaddr,
	    dstaddr		=> $dstaddr,
	) if $args{client};
}
$l->{log}->print("local command: $command\n") if $l;

if ($mode eq "divert") {
	open(my $log, '<', $l->{logfile})
	    or die "Remote log file open failed: $!";
	$SIG{__DIE__} = sub {
		die @@_ if $^S;
		copy($log, \*STDERR);
		warn @@_;
		exit 255;
	};
	copy($log, \*STDERR);

	my @@cmd = qw(pfctl -a regress -f -);
	my $pf;
	do { local $> = 0; open($pf, '|-', @@cmd) }
	    or die "Open pipe to pf '@@cmd' failed: $!";
	if ($local eq "server") {
		my $port = $protocol =~ /^(tcp|udp)$/ ?
		    "port $s->{listenport}" : "";
		my $divertport = $port || "port 1";  # XXX bad pf syntax
		print $pf "pass in log $af proto $protocol ".
		    "from $ARGV[1] to $ARGV[0] $port ".
		    "divert-to $s->{listenaddr} $divertport ".
		    "label regress\n";
	} else {
		my $port = $protocol =~ /^(tcp|udp)$/ ?
		    "port $ARGV[2]" : "";
		print $pf "pass out log $af proto $protocol ".
		    "from $c->{bindaddr} to $ARGV[1] $port divert-reply ".
		    "label regress\n";
	}
	close($pf) or die $! ?
	    "Close pipe to pf '@@cmd' failed: $!" :
	    "pf '@@cmd' failed: $?";
	if ($opts{f}) {
		@@cmd = qw(pfctl -k label -k regress);
		do { local $> = 0; system(@@cmd) }
		    and die "Execute '@@cmd' failed: $!";
	}
	print STDERR "Diverted\n";

	$l->run;
	copy($log, \*STDERR);
	$l->up;
	copy($log, \*STDERR);
	$l->down;
	copy($log, \*STDERR);

	exit;
}

$s->run if $s;
$c->run->up if $c;
$s->up if $s;

$c->down if $c;
$r->down if $r;
$s->down if $s;

check_logs($c || $r, $s || $r, %args);
@


1.6
log
@Add more and deeper tests for pf divert-reply rules.  Especially
the combination of sending and receiving multiple packets over one
socket is tested for UDP, raw IP and ICMP.
@
text
@d2 1
a2 1
#	$OpenBSD: remote.pl,v 1.5 2013/11/03 00:32:36 bluhm Exp $
d29 1
d50 1
d62 2
d121 1
d177 2
a178 1
		    "divert-to $s->{listenaddr} $divertport\n";
d183 2
a184 1
		    "from $c->{bindaddr} to $ARGV[1] $port divert-reply\n";
d189 5
@


1.5
log
@Add divert tests that reuse protocol and port.  They show what
happens when we close the socket but the divert state remains.  If
a new socket uses the same protocol and port, it will use the old
dangling state.  Without searching for the correct rule, the divert-to
will fail.  There are real life corner cases where this occurred.
@
text
@d2 1
a2 1
#	$OpenBSD: remote.pl,v 1.4 2013/06/05 04:34:27 bluhm Exp $
d4 1
a4 1
# Copyright (c) 2010-2013 Alexander Bluhm <bluhm@@openbsd.org>
a84 1
my $func	= \&write_read_stream;
a100 1
	    func		=> $func,
d112 1
a112 1
	);
a133 1
	    func		=> $func,
d147 1
a147 1
	);
d149 1
a149 1
$l->{log}->print("local command: $command\n");
@


1.4
log
@Add tests for ICMP and ICMP6 divert-to.
@
text
@d2 1
a2 1
#	$OpenBSD: remote.pl,v 1.3 2013/06/04 04:17:42 bluhm Exp $
d40 1
a40 1
    remote.pl af bindaddr connectaddr connectport [test-args.pl]
d42 3
a44 1
    remote.pl af localaddr fakeaddr remotessh [test-args.pl]
d47 2
d52 1
d72 2
a73 2
	@@ARGV == 3 && $ARGV[0] !~ /^\d+$/ && $ARGV[2] =~ /^\d+$/ ? "divert"  :
	@@ARGV == 3 && $ARGV[0] !~ /^\d+$/ && $ARGV[2] !~ /^\d+$/ ? "auto"   :
d75 8
d111 1
d124 2
d147 1
d152 1
@


1.3
log
@Add tests for raw IP divert.  Set effective user ID to 0 only during
privileged operations for raw sockets and bind any.
@
text
@d2 1
a2 1
#	$OpenBSD: remote.pl,v 1.2 2013/06/03 21:07:45 bluhm Exp $
d50 1
a50 1
if (@@ARGV and -f $ARGV[-1]) {
d55 1
a55 1
my($af, $domain);
d62 3
d72 4
a75 4
my $func = \&write_read_stream;
my $divert = $args{divert} || "to";
my $local = $divert eq "to" ? "client" : "server";
my $remote = $divert eq "to" ? "server" : "client";
d78 1
d81 5
d92 1
d94 2
a95 2
	    logfile		=> $logfile,
	    listendomain	=> $domain,
d98 2
a104 1
	    af			=> $af,
d107 1
d123 1
d125 2
a126 2
	    logfile		=> $logfile,
	    connectdomain	=> $domain,
d131 2
d152 1
a152 1
		my $port = $args{protocol} =~ /^(tcp|udp)$/ ?
d155 1
a155 1
		print $pf "pass in log $af proto $args{protocol} ".
d159 1
a159 1
		my $port = $args{protocol} =~ /^(tcp|udp)$/ ?
d161 1
a161 1
		print $pf "pass out log $af proto $args{protocol} ".
@


1.2
log
@Add tests for UDP divert.
@
text
@d2 1
a2 1
#	$OpenBSD: remote.pl,v 1.1.1.1 2013/06/03 05:06:38 bluhm Exp $
d20 7
d83 1
d98 1
a100 1
	    sudo		=> $ENV{SUDO},
d111 1
d132 3
a134 3
	my @@sudo = $ENV{SUDO} ? $ENV{SUDO} : ();
	my @@cmd = (@@sudo, qw(pfctl -a regress -f -));
	open(my $pf, '|-', @@cmd)
d137 3
d141 2
a142 2
		    "from $ARGV[1] to $ARGV[0] port $s->{listenport} ".
		    "divert-to $s->{listenaddr} port $s->{listenport}\n";
d144 2
d147 1
a147 2
		    "from $c->{bindaddr} to $ARGV[1] port $ARGV[2] ".
		    "divert-reply\n";
d172 1
a172 1
check_logs($c, $s, %args);
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
#	$OpenBSD$
d74 1
d84 1
a84 1
	    %{$args{relay}},
d101 1
d128 1
a128 1
		print $pf "pass in log $af proto tcp ".
d132 1
a132 1
		print $pf "pass out log $af proto tcp ".
@


1.1.1.1
log
@Add a regression test suite for the pf divert-to and divert-reply
feature.  It requires two machines, the local host is running the
regression test, the remote host gets pf divert rules installed.
The diverted TCP connections are running between these hosts in
both directions.  The remote host is controlled via ssh.
@
text
@@
