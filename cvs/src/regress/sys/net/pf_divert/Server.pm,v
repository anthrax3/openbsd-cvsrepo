head	1.4;
access;
symbols
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.3.0.18
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.14
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.4
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.12
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.10
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.8
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.6
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.2
	OPENBSD_5_4_BASE:1.3
	bluhm_20130603:1.1.1.1
	bluhm:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2017.08.15.04.11.20;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	LHIvCN212Bjl0MLN;

1.3
date	2013.06.05.04.34.27;	author bluhm;	state Exp;
branches;
next	1.2;

1.2
date	2013.06.04.04.17.42;	author bluhm;	state Exp;
branches;
next	1.1;

1.1
date	2013.06.03.05.06.38;	author bluhm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.06.03.05.06.38;	author bluhm;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Add tests for pf divert-packet.  Currently UDP packets are tested
with in and out rules.  A single packet, the initial packet or the
response packet are diverted and reinjected.
@
text
@#	$OpenBSD: Server.pm,v 1.3 2013/06/05 04:34:27 bluhm Exp $

# Copyright (c) 2010-2013 Alexander Bluhm <bluhm@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

package Server;
use parent 'Proc';
use Carp;
use Socket qw(IPPROTO_TCP TCP_NODELAY);
use Socket6;
use IO::Socket;
use IO::Socket::INET6;

sub new {
	my $class = shift;
	my %args = @@_;
	$args{logfile} ||= "server.log";
	$args{up} ||= "Accepted";
	$args{down} ||= "Shutdown $class";
	my $self = Proc::new($class, %args);
	$self->{domain}
	    or croak "$class domain not given";
	$self->{protocol}
	    or croak "$class protocol not given";
	my $ls = do { local $> = 0; IO::Socket::INET6->new(
	    Type	=> $self->{socktype},
	    Proto	=> $self->{protocol},
	    ReuseAddr	=> 1,
	    Domain	=> $self->{domain},
	    $self->{listenaddr} ? (LocalAddr => $self->{listenaddr}) : (),
	    $self->{listenport} ? (LocalPort => $self->{listenport}) : (),
	) } or die ref($self), " socket failed: $!";
	if ($self->{oobinline}) {
		setsockopt($ls, SOL_SOCKET, SO_OOBINLINE, pack('i', 1))
		    or die ref($self), " set oobinline listen failed: $!";
	}
	if ($self->{sndbuf}) {
		setsockopt($ls, SOL_SOCKET, SO_SNDBUF,
		    pack('i', $self->{sndbuf}))
		    or die ref($self), " set sndbuf listen failed: $!";
	}
	if ($self->{rcvbuf}) {
		setsockopt($ls, SOL_SOCKET, SO_RCVBUF,
		    pack('i', $self->{rcvbuf}))
		    or die ref($self), " set rcvbuf listen failed: $!";
	}
	if ($self->{protocol} eq "tcp") {
		setsockopt($ls, IPPROTO_TCP, TCP_NODELAY, pack('i', 1))
		    or die ref($self), " set nodelay listen failed: $!";
		listen($ls, 1)
		    or die ref($self), " socket failed: $!";
	}
	my $log = $self->{log};
	print $log "listen sock: ",$ls->sockhost()," ",$ls->sockport(),"\n";
	$self->{listenaddr} = $ls->sockhost() unless $self->{listenaddr};
	$self->{listenport} = $ls->sockport() unless $self->{listenport};
	$self->{ls} = $ls;
	return $self;
}

sub child {
	my $self = shift;

	my $as = $self->{ls};
	if ($self->{protocol} eq "tcp") {
		$as = $self->{ls}->accept()
		    or die ref($self), " socket accept failed: $!";
		print STDERR "accept sock: ",$as->sockhost()," ",
		    $as->sockport(),"\n";
		print STDERR "accept peer: ",$as->peerhost()," ",
		    $as->peerport(),"\n";
	}
	$as->blocking($self->{nonblocking} ? 0 : 1)
	    or die ref($self), " non-blocking accept failed: $!";

	open(STDIN, '<&', $as)
	    or die ref($self), " dup STDIN failed: $!";
	open(STDOUT, '>&', $as)
	    or die ref($self), " dup STDOUT failed: $!";
}

1;
@


1.3
log
@Add tests for ICMP and ICMP6 divert-to.
@
text
@d1 1
a1 1
#	$OpenBSD: Server.pm,v 1.2 2013/06/04 04:17:42 bluhm Exp $
d33 1
@


1.2
log
@Add tests for raw IP divert.  Set effective user ID to 0 only during
privileged operations for raw sockets and bind any.
@
text
@d1 1
a1 1
#	$OpenBSD: Server.pm,v 1.1.1.1 2013/06/03 05:06:38 bluhm Exp $
d34 4
a37 3
	$self->{protocol} ||= "tcp";
	$self->{listendomain}
	    or croak "$class listen domain not given";
d42 1
a42 1
	    Domain	=> $self->{listendomain},
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
#	$OpenBSD$
d37 2
a38 1
	my $ls = IO::Socket::INET6->new(
d44 1
a44 1
	) or die ref($self), " socket failed: $!";
@


1.1.1.1
log
@Add a regression test suite for the pf divert-to and divert-reply
feature.  It requires two machines, the local host is running the
regression test, the remote host gets pf divert rules installed.
The diverted TCP connections are running between these hosts in
both directions.  The remote host is controlled via ssh.
@
text
@@
