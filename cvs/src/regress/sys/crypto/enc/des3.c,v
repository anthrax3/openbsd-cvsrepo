head	1.9;
access;
symbols
	OPENBSD_6_2:1.9.0.14
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.9.0.12
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.8
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.6
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.4
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.8.0.18
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.16
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.12
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.10
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.8
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.6
	OPENBSD_5_0:1.8.0.4
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.2
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.7.0.26
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.22
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.24
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.20
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.18
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.16
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.14
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.12
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.10
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.8
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.6
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.4
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4;
locks; strict;
comment	@ * @;


1.9
date	2014.08.15.15.13.38;	author mikeb;	state Exp;
branches;
next	1.8;
commitid	ogvJR77KSDoUI4rO;

1.8
date	2010.10.15.10.39.12;	author jsg;	state Exp;
branches;
next	1.7;

1.7
date	2004.07.22.15.11.37;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2003.07.31.21.48.07;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.06.23.21.46.10;	author wcobb;	state Exp;
branches;
next	1.4;

1.4
date	2002.04.03.21.33.41;	author markus;	state Exp;
branches;
next	1.3;

1.3
date	2002.04.03.18.42.16;	author fgsch;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.25.10.00.47;	author markus;	state Exp;
branches;
next	1.1;

1.1
date	2002.03.21.15.08.53;	author markus;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Convert 3DES regress test from /dev/crypto to using kernel source code
directly with a simplified CBC implementation.
@
text
@/*      $OpenBSD: des3.c,v 1.8 2010/10/15 10:39:12 jsg Exp $  */

/*
 * Copyright (c) 2002 Markus Friedl.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <openssl/des.h>
#include <err.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

/* Stubs */

u_int32_t deflate_global(u_int8_t *, u_int32_t, int, u_int8_t **);

u_int32_t
deflate_global(u_int8_t *data, u_int32_t size, int comp, u_int8_t **out)
{
	return 0;
}

void	explicit_bzero(void *, size_t);

void
explicit_bzero(void *b, size_t len)
{
	bzero(b, len);
}


/* Simulate CBC mode */

static int
docrypt(const unsigned char *key, size_t klen, const unsigned char *iv0,
    const unsigned char *in, unsigned char *out, size_t len, int encrypt)
{
	u_int8_t block[8], iv[8], iv2[8], *ivp = iv, *nivp;
	u_int8_t ctx[384];
	int i, j, error = 0;

	memcpy(iv, iv0, 8);
	memset(ctx, 0, sizeof(ctx));
	error = des3_setkey(ctx, key, klen);
	if (error)
		return -1;
	for (i = 0; i < len / 8; i ++) {
		bcopy(in, block, 8);
		in += 8;
		if (encrypt) {
			for (j = 0; j < 8; j++)
				block[j] ^= ivp[j];
			des3_encrypt(ctx, block);
			memcpy(ivp, block, 8);
		} else {
			nivp = ivp == iv ? iv2 : iv;
			memcpy(nivp, block, 8);
			des3_decrypt(ctx, block);
			for (j = 0; j < 8; j++)
				block[j] ^= ivp[j];
			ivp = nivp;
		}
		bcopy(block, out, 8);
		out += 8;
	}
	return 0;
}

static int
match(unsigned char *a, unsigned char *b, size_t len)
{
	int i;

	if (memcmp(a, b, len) == 0)
		return (1);

	warnx("decrypt/plaintext mismatch");

	for (i = 0; i < len; i++)
		printf("%2.2x", a[i]);
	printf("\n");
	for (i = 0; i < len; i++)
		printf("%2.2x", b[i]);
	printf("\n");

	return (0);
}

#define SZ 16

int
main(int argc, char **argv)
{
	DES_key_schedule ks1, ks2, ks3;
	unsigned char iv0[8], iv[8], key[24] = "012345670123456701234567";
	unsigned char b1[SZ], b2[SZ];
	int i, fail = 0;
	u_int32_t rand = 0;

	/* setup data and iv */
	for (i = 0; i < sizeof(b1); i++ ) {
		if (i % 4 == 0)
                        rand = arc4random();
		b1[i] = rand;
		rand >>= 8;
	}
	for (i = 0; i < sizeof(iv0); i++ ) {
		if (i % 4 == 0)
                        rand = arc4random();
		iv0[i] = rand;
		rand >>= 8;
	}
	memset(b2, 0, sizeof(b2));

	/* keysetup for software */
        DES_set_key((void *) key, &ks1);
        DES_set_key((void *) (key+8), &ks2);
        DES_set_key((void *) (key+16), &ks3);

	/* encrypt with software, decrypt with /dev/crypto */
	memcpy(iv, iv0, sizeof(iv0));
        DES_ede3_cbc_encrypt((void *)b1, (void*)b2, sizeof(b1), &ks1, &ks2,
	    &ks3, (void*)iv, DES_ENCRYPT);
	memcpy(iv, iv0, sizeof(iv0));
	if (docrypt(key, sizeof(key), iv, b2, b2, sizeof(b1), 0) < 0) {
		warnx("decryption failed");
		fail++;
	}
	if (!match(b1, b2, sizeof(b1)))
		fail++;
	else
		printf("ok, decrypted\n");

	/* encrypt with kernel functions, decrypt with openssl */
	memset(b2, 0, sizeof(b2));
	memcpy(iv, iv0, sizeof(iv0));
	if (docrypt(key, sizeof(key), iv, b1, b2, sizeof(b1), 1) < 0) {
		warnx("encryption failed");
		fail++;
	}
	memcpy(iv, iv0, sizeof(iv0));
        DES_ede3_cbc_encrypt((void *)b2, (void*)b2, sizeof(b1), &ks1, &ks2,
	    &ks3, (void*)iv, DES_DECRYPT);
	if (!match(b1, b2, sizeof(b1)))
		fail++;
	else
		printf("ok, encrypted\n");

	exit((fail > 0) ? 1 : 0);
}
@


1.8
log
@libdes -> libcrypto
@
text
@d1 1
a1 1
/*      $OpenBSD: des3.c,v 1.7 2004/07/22 15:11:37 miod Exp $  */
a26 1
#include <sys/types.h>
a27 3
#include <sys/ioctl.h>
#include <sys/sysctl.h>
#include <crypto/cryptodev.h>
d36 1
a36 44
static int
syscrypt(const unsigned char *key, size_t klen, const unsigned char *iv,
    const unsigned char *in, unsigned char *out, size_t len, int encrypt)
{
	struct session_op session;
	struct crypt_op cryp;
	int cryptodev_fd = -1, fd = -1;

	if ((cryptodev_fd = open("/dev/crypto", O_RDWR, 0)) < 0) {
		warn("/dev/crypto");
		goto err;
	}
	if (ioctl(cryptodev_fd, CRIOGET, &fd) == -1) {
		warn("CRIOGET failed");
		goto err;
	}
	memset(&session, 0, sizeof(session));
	session.cipher = CRYPTO_3DES_CBC;
	session.key = (caddr_t) key;
	session.keylen = klen;
	if (ioctl(fd, CIOCGSESSION, &session) == -1) {
		warn("CIOCGSESSION");
		goto err;
	}
	memset(&cryp, 0, sizeof(cryp));
	cryp.ses = session.ses;
	cryp.op = encrypt ? COP_ENCRYPT : COP_DECRYPT;
	cryp.flags = 0;
	cryp.len = len;
	cryp.src = (caddr_t) in;
	cryp.dst = (caddr_t) out;
	cryp.iv = (caddr_t) iv;
	cryp.mac = 0;
	if (ioctl(fd, CIOCCRYPT, &cryp) == -1) {
		warn("CIOCCRYPT");
		goto err;
	}
	if (ioctl(fd, CIOCFSESSION, &session.ses) == -1) {
		warn("CIOCFSESSION");
		goto err;
	}
	close(fd);
	close(cryptodev_fd);
	return (0);
d38 1
a38 7
err:
	if (fd != -1)
		close(fd);
	if (cryptodev_fd != -1)
		close(cryptodev_fd);
	return (-1);
}
d40 2
a41 2
static int
getallowsoft(void)
d43 2
a44 2
	int mib[2], old;
	size_t olen;
d46 1
a46 1
	olen = sizeof(old);
d48 4
a51 6
	mib[0] = CTL_KERN;
	mib[1] = KERN_CRYPTODEVALLOWSOFT;
	if (sysctl(mib, 2, &old, &olen, NULL, 0) < 0)
		err(1, "sysctl failed");

	return old;
a53 5
static void
setallowsoft(int new)
{
	int mib[2], old;
	size_t olen, nlen;
d55 1
a55 1
	olen = nlen = sizeof(new);
d57 33
a89 5
	mib[0] = CTL_KERN;
	mib[1] = KERN_CRYPTODEVALLOWSOFT;

	if (sysctl(mib, 2, &old, &olen, &new, nlen) < 0)
		err(1, "sysctl failed");
d120 1
a120 1
	int allowed = 0, i, fail = 0;
a122 6
	if (geteuid() == 0) {
		allowed = getallowsoft();
		if (allowed == 0)
			setallowsoft(1);
	}

d148 2
a149 2
	if (syscrypt(key, sizeof(key), iv, b2, b2, sizeof(b1), 0) < 0) {
		warnx("decrypt with /dev/crypto failed");
d155 1
a155 1
		printf("ok, encrypt with software, decrypt with /dev/crypto\n");
d157 1
a157 1
	/* encrypt with /dev/crypto, decrypt with software */
d160 2
a161 2
	if (syscrypt(key, sizeof(key), iv, b1, b2, sizeof(b1), 1) < 0) {
		warnx("encrypt with /dev/crypto failed");
d170 1
a170 1
		printf("ok, encrypt with /dev/crypto, decrypt with software\n");
a171 2
	if (geteuid() == 0 && allowed == 0)
		setallowsoft(0);
@


1.7
log
@Spell reserved correctly; ok from copyright holders when in licence blocks.
@
text
@d1 1
a1 1
/*      $OpenBSD: des3.c,v 1.6 2003/07/31 21:48:07 deraadt Exp $  */
d32 1
a32 1
#include <des.h>
d149 1
a149 1
	des_key_schedule ks1, ks2, ks3;
d177 3
a179 3
        des_set_key((void *) key, ks1);
        des_set_key((void *) (key+8), ks2);
        des_set_key((void *) (key+16), ks3);
d183 2
a184 2
        des_ede3_cbc_encrypt((void *)b1, (void*)b2, sizeof(b1), ks1, ks2, ks3,
	    (void*)iv, DES_ENCRYPT);
d203 2
a204 2
        des_ede3_cbc_encrypt((void *)b2, (void*)b2, sizeof(b1), ks1, ks2, ks3,
	    (void*)iv, DES_DECRYPT);
@


1.6
log
@various cleanups; david says results are same
@
text
@d1 1
a1 1
/*      $OpenBSD: des3.c,v 1.5 2002/06/23 21:46:10 wcobb Exp $  */
d4 1
a4 1
 * Copyright (c) 2002 Markus Friedl.  All rights reserverd.
@


1.5
log
@initialize some variables.
ok markus@@
@
text
@d1 1
a1 1
/*      $OpenBSD: des3.c,v 1.4 2002/04/03 21:33:41 markus Exp $  */
d40 1
a40 1
int
d93 1
a93 1
int
d109 1
a109 1
void
d124 1
a124 1
int
@


1.4
log
@fix alignment problems on sparc64; with fgsch@@
@
text
@d1 1
a1 1
/*      $OpenBSD: des3.c,v 1.3 2002/04/03 18:42:16 fgsch Exp $  */
d152 2
a153 2
	int allowed, i, fail = 0;
	u_int32_t rand;
@


1.3
log
@o fix warnings.
o rearrange headers.
o remove unused var.

markus@@ ok
@
text
@d1 1
a1 1
/*      $OpenBSD: des3.c,v 1.2 2002/03/25 10:00:47 markus Exp $  */
d153 1
d162 12
a173 4
	for (i = 0; i < sizeof(b1);  i+= sizeof(u_int32_t))
		*(u_int32_t *)(b1 + i) = arc4random();
	for (i = 0; i < sizeof(iv0); i+= sizeof(u_int32_t))
		*(u_int32_t *)(iv0 + 1) = arc4random();
@


1.2
log
@clear before reuse
@
text
@d1 1
a1 1
/*      $OpenBSD: des3.c,v 1.1 2002/03/21 15:08:53 markus Exp $  */
d32 3
d36 2
a37 1
#include <fcntl.h>
a38 2
#include <err.h>
#include <des.h>
d46 1
a46 1
	int cryptodev_fd = -1, fd = -1, i;
@


1.1
log
@move md5.c, add des-ede3 test
@
text
@d1 1
a1 1
/*      $OpenBSD: md5.c,v 1.2 2002/03/19 20:10:25 markus Exp $  */
d185 1
@

