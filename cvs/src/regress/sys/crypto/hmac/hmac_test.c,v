head	1.3;
access;
symbols
	OPENBSD_6_0:1.3.0.22
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.12
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.20
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.18
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.16
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.14
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.10
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.8
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.6
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.4
	OPENBSD_5_0:1.3.0.2
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.2.0.10
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.8
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.6
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.3
date	2011.04.04.16.46.22;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2008.09.02.12.55.44;	author djm;	state Exp;
branches;
next	1.1;

1.1
date	2008.08.12.15.49.08;	author damien;	state Exp;
branches;
next	;


desc
@@


1.3
log
@provide fake copies of explicit_bzero in the test scaffolds for kernel code
@
text
@/*-
 * Copyright (c) 2008 Damien Bergamini <damien.bergamini@@free.fr>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <stdio.h>
#include <crypto/md5.h>
#include <crypto/sha1.h>
#include <crypto/sha2.h>
#include <crypto/hmac.h>
#include <string.h>

static void
print_hex(unsigned char *buf, int len)
{
	int i;

	printf("digest = 0x");
	for (i = 0; i < len; i++)
		printf("%02x", buf[i]);
	printf("\n");
}

int
main(void)
{
	HMAC_MD5_CTX md5;
	HMAC_SHA1_CTX sha1;
	HMAC_SHA256_CTX sha256;
	u_int8_t data[50], output[32];

	HMAC_MD5_Init(&md5, "\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b", 16);
	HMAC_MD5_Update(&md5, "Hi There", 8);
	HMAC_MD5_Final(output, &md5);
	print_hex(output, MD5_DIGEST_LENGTH);

	HMAC_MD5_Init(&md5, "Jefe", 4);
	HMAC_MD5_Update(&md5, "what do ya want for nothing?", 28);
	HMAC_MD5_Final(output, &md5);
	print_hex(output, MD5_DIGEST_LENGTH);

	HMAC_MD5_Init(&md5, "\xAA\xAA\xAA\xAA\xAA\xAA\xAA\xAA\xAA\xAA\xAA\xAA\xAA\xAA\xAA\xAA", 16);
	memset(data, 0xDD, sizeof data);
	HMAC_MD5_Update(&md5, data, sizeof data);
	HMAC_MD5_Final(output, &md5);
	print_hex(output, MD5_DIGEST_LENGTH);

	HMAC_SHA1_Init(&sha1, "\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b", 16);
	HMAC_SHA1_Update(&sha1, "Hi There", 8);
	HMAC_SHA1_Final(output, &sha1);
	print_hex(output, SHA1_DIGEST_LENGTH);

	HMAC_SHA1_Init(&sha1, "Jefe", 4);
	HMAC_SHA1_Update(&sha1, "what do ya want for nothing?", 28);
	HMAC_SHA1_Final(output, &sha1);
	print_hex(output, SHA1_DIGEST_LENGTH);

	HMAC_SHA1_Init(&sha1, "\xAA\xAA\xAA\xAA\xAA\xAA\xAA\xAA\xAA\xAA\xAA\xAA\xAA\xAA\xAA\xAA", 16);
	memset(data, 0xDD, sizeof data);
	HMAC_SHA1_Update(&sha1, data, sizeof data);
	HMAC_SHA1_Final(output, &sha1);
	print_hex(output, SHA1_DIGEST_LENGTH);

	HMAC_SHA256_Init(&sha256, "\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b", 16);
	HMAC_SHA256_Update(&sha256, "Hi There", 8);
	HMAC_SHA256_Final(output, &sha256);
	print_hex(output, SHA256_DIGEST_LENGTH);

	HMAC_SHA256_Init(&sha256, "Jefe", 4);
	HMAC_SHA256_Update(&sha256, "what do ya want for nothing?", 28);
	HMAC_SHA256_Final(output, &sha256);
	print_hex(output, SHA256_DIGEST_LENGTH);

	HMAC_SHA256_Init(&sha256, "\xAA\xAA\xAA\xAA\xAA\xAA\xAA\xAA\xAA\xAA\xAA\xAA\xAA\xAA\xAA\xAA", 16);
	memset(data, 0xDD, sizeof data);
	HMAC_SHA256_Update(&sha256, data, sizeof data);
	HMAC_SHA256_Final(output, &sha256);
	print_hex(output, SHA256_DIGEST_LENGTH);

	return 0;
}

void
explicit_bzero(void *b, size_t len)
{
	bzero(b, len);
}
@


1.2
log
@fix builds for when obj/ present
fix gcc warnings
add licenses
ok damien@@
@
text
@d93 6
@


1.1
log
@test vectors for HMAC-MD5, HMAC-SHA1, HMAC-SHA256, AES-128-CMAC,
AES Key Wrap.

ok djm@@
@
text
@d1 16
d22 1
d24 1
a24 1
void
a41 1
	int i;
@

