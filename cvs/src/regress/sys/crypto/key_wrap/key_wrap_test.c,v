head	1.5;
access;
symbols
	OPENBSD_6_1:1.4.0.12
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.8
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.3.0.16
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.14
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.10
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.8
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.6
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.4
	OPENBSD_5_0:1.3.0.2
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.2.0.10
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.8
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.6
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.5
date	2017.05.02.17.08.30;	author mikeb;	state Exp;
branches;
next	1.4;
commitid	zrTmrFxQdgARtKgS;

1.4
date	2014.11.19.20.02.54;	author deraadt;	state Exp;
branches;
next	1.3;
commitid	RmjX3YNU1OvCRlyX;

1.3
date	2011.04.04.16.46.22;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2008.09.02.12.55.44;	author djm;	state Exp;
branches;
next	1.1;

1.1
date	2008.08.12.15.49.08;	author damien;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Convert CMAC and Key Wrap regress tests over to the new AES

OK stsp@@
@
text
@/*-
 * Copyright (c) 2008 Damien Bergamini <damien.bergamini@@free.fr>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <string.h>
#include <stdio.h>
#include <crypto/aes.h>
#include <crypto/key_wrap.h>

static void
print_hex(const char *str, unsigned char *buf, int len)
{
	int i;

	printf("%s", str);
	for (i = 0; i < len; i++) {
		if ((i % 8) == 0)
			printf(" ");
		printf("%02X", buf[i]);
	}
	printf("\n");
}

static void
do_test(u_int kek_len, u_int data_len)
{
	aes_key_wrap_ctx ctx;
	u_int8_t kek[32], data[32];
	u_int8_t output[64];
	u_int i;

	for (i = 0; i < kek_len; i++)
		kek[i] = i;
	printf("Input:\n");
	print_hex("KEK:\n  ", kek, kek_len);
	for (i = 0; i < 16; i++)
		data[i] = i * 16 + i;
	for (; i < data_len; i++)
		data[i] = i - 16;
	print_hex("Key Data:\n  ", data, data_len);
	aes_key_wrap_set_key(&ctx, kek, kek_len);
	aes_key_wrap(&ctx, data, data_len / 8, output);
	print_hex("Ciphertext:\n  ", output, data_len + 8);
	aes_key_unwrap(&ctx, output, output, data_len / 8);
	printf("Output:\n");
	print_hex("Key Data:\n  ", output, data_len);
	printf("====\n");
}

int
main(void)
{
	do_test(16, 16);
	do_test(24, 16);
	do_test(32, 16);
	do_test(24, 24);
	do_test(32, 24);
	do_test(32, 32);

	return 0;
}

void
explicit_bzero(void *b, size_t len)
{
	bzero(b, len);
}
@


1.4
log
@do not need an ovbcopy replacement anymore
@
text
@d19 1
a19 1
#include <crypto/rijndael.h>
@


1.3
log
@provide fake copies of explicit_bzero in the test scaffolds for kernel code
@
text
@a21 3
void
ovbcopy(const void *src, void *dst, size_t len);

a33 7
}

void
ovbcopy(const void *src, void *dst, size_t len)
{
	/* userspace does not have ovbcopy: fake it */
	memmove(dst, src, len);
@


1.2
log
@fix builds for when obj/ present
fix gcc warnings
add licenses
ok damien@@
@
text
@d84 6
@


1.1
log
@test vectors for HMAC-MD5, HMAC-SHA1, HMAC-SHA256, AES-128-CMAC,
AES Key Wrap.

ok djm@@
@
text
@d1 17
d23 3
d46 1
a46 1
void
d52 1
a52 1
	int i;
@

