head	1.6;
access;
symbols
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.10
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.8
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.6
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.5.0.46
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.42
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.40
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.38
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.36
	OPENBSD_5_0:1.5.0.34
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.32
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.30
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.26
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.28
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.24
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.22
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.20
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.18
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.16
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.14
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5;
locks; strict;
comment	@ * @;


1.6
date	2014.04.18.14.38.21;	author guenther;	state Exp;
branches;
next	1.5;

1.5
date	2003.08.19.19.24.07;	author jason;	state Exp;
branches;
next	1.4;

1.4
date	2003.08.19.19.17.54;	author jason;	state Exp;
branches;
next	1.3;

1.3
date	2003.08.19.05.49.22;	author jason;	state Exp;
branches;
next	1.2;

1.2
date	2003.08.19.05.37.57;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	2003.08.19.05.25.14;	author jason;	state Exp;
branches;
next	;


desc
@@


1.6
log
@It's been a quarter century: we can assume volatile is present with that name.
@
text
@/*	$OpenBSD: simm13.c,v 1.5 2003/08/19 19:24:07 jason Exp $	*/

/*
 * Copyright (c) 2003 Jason L. Wright (jason@@thought.net)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * check that "popc immediate, %rd" gets the correct value.  It is
 * emulated on most SPARC v9 implementations.
 */

#include <sys/types.h>
#include <sys/mman.h>
#include <machine/instr.h>
#include <err.h>
#include <stdio.h>

#define	SIGN_EXT13(v)	(((int64_t)(v) << 51) >> 51)

void gen_simm(u_int32_t *, int);
int64_t a_popc_imm(void *, int);
int64_t c_popc(int64_t);
int main(void);

void
gen_simm(u_int32_t *p, int imm)
{
	/*
	 * generate the following asm, and flush the pipeline
	 *	retl
	 *	 popc imm, %o0
	 */
	p[0] = I_JMPLri(I_G0, I_O7, 8);
	__asm volatile("iflush %0+0" : : "r" (p + 0));
	p[1] = _I_OP3_R_RI(I_O0, IOP3_POPC, I_G0, imm);
	__asm volatile("iflush %0+0" : : "r" (p + 1));
	__asm volatile("nop;nop;nop;nop;nop");
}

int64_t
a_popc_imm(void *v, int i)
{
	int64_t (*func)(void) = v, r;

	if (mprotect(v, 2 * sizeof(union instr), PROT_READ|PROT_WRITE) == -1)
		err(1, "mprotect");
	gen_simm(v, i);

	if (mprotect(v, 2 * sizeof(union instr), PROT_READ|PROT_EXEC) == -1)
		err(1, "mprotect");
	r = (*func)();

	if (mprotect(v, 2 * sizeof(union instr), PROT_NONE) == -1)
		err(1, "mprotect");

	return (r);
}

int64_t
c_popc(int64_t v)
{
	int64_t bit, r;

	for (bit = 1, r = 0; bit; bit <<= 1)
		if (v & bit)
			r++;
	return (r);
}

int
main()
{
	void *v;
	int i, a, c;
	int r = 0;

	v = mmap(NULL, 2 * sizeof(union instr), PROT_NONE, MAP_ANON, -1, 0);
	if (v == MAP_FAILED)
		err(1, "mmap");

	for (i = -4096; i <= 4095; i++) {
		a = a_popc_imm(v, i);
		c = c_popc(SIGN_EXT13(i));
		if (c != a) {
			printf("BAD: %d: asm %d, c %d\n", i, a, c);
			r = 1;
		}
	}

	return (r);
}
@


1.5
log
@X should have R; deraadt, so now the page is in one of three states: none, X|R, W|R at all times.
@
text
@d1 1
a1 1
/*	$OpenBSD: simm13.c,v 1.4 2003/08/19 19:17:54 jason Exp $	*/
d56 1
a56 1
	__asm __volatile("iflush %0+0" : : "r" (p + 0));
d58 2
a59 2
	__asm __volatile("iflush %0+0" : : "r" (p + 1));
	__asm __volatile("nop;nop;nop;nop;nop");
@


1.4
log
@Keep the permissions on the page we're messing with as strict as possible
(ie. W^X semantics).  based on discussion with Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: simm13.c,v 1.3 2003/08/19 05:49:22 jason Exp $	*/
d71 1
a71 1
	if (mprotect(v, 2 * sizeof(union instr), PROT_EXEC) == -1)
@


1.3
log
@cleaning... I'm done, I swear.
@
text
@d1 1
a1 1
/*	$OpenBSD: simm13.c,v 1.2 2003/08/19 05:37:57 jason Exp $	*/
d65 1
a65 1
	int (*func)(void) = v;
d67 2
d70 9
a78 1
	return ((*func)());
d99 1
a99 2
	v = mmap(NULL, 2 * sizeof(union instr), PROT_WRITE|PROT_EXEC|PROT_READ,
	    MAP_ANON, -1, 0);
@


1.2
log
@flush instruction cache nicely
@
text
@d1 1
a1 1
/*	$OpenBSD: simm13.c,v 1.1 2003/08/19 05:25:14 jason Exp $	*/
d29 5
d42 5
d56 1
a56 1
	__asm __volatile("iflush %0+0" : : "r" (&p[0]));
d58 1
a58 1
	__asm __volatile("iflush %0+0" : : "r" (&p[1]));
d62 2
a63 2
int
testit(void *v)
d67 1
d95 1
a95 1
		gen_simm(v, i);
a96 1
		a = testit(v);
@


1.1
log
@replace the brain dead perl implementation with an devious C implementation
(based on discussion with drahn... insanity is all mine tho =)
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d46 1
d48 2
@

