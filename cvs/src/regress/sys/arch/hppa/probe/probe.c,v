head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.2
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.4
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.2.0.10
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.8
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.6
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.4
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.1.0.42
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.38
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.36
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.34
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.32
	OPENBSD_5_0:1.1.0.30
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.28
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.26
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.22
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.24
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.20
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.18
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.16
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.14
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.12
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.10
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.8
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.6
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.4
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.2
	OPENBSD_3_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2017.01.13.15.28.02;	author kettenis;	state Exp;
branches;
next	1.2;
commitid	6VXlcLUtzDQhqinK;

1.2
date	2014.04.18.14.38.21;	author guenther;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.12.22.54.13;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Let these hppa-specific tests print "SKIPPED" on non-hppa architectures.
Include some missing header files while I'm there.
@
text
@/*	$OpenBSD: probe.c,v 1.2 2014/04/18 14:38:21 guenther Exp $	*/

/*
 * Written by Michael Shalayeff, 2004. Public Domain.
 */

#include <sys/param.h>
#include <signal.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <err.h>

#ifdef __hppa__

char moo[] = "moo";	/* writable */
const char blah[] = "blah";	/* not */
volatile char *label;

#define	prober(r,a)	__asm volatile(	\
    "prober	(%2),%1,%0" : "=r" (r) : "r" (3), "r" (a));
#define	proberi(r,a)	__asm volatile(	\
    "proberi	(%2),%1,%0" : "=r" (r) : "i" (3), "r" (a));
#define	probew(r,a)	__asm volatile(	\
    "probew	(%2),%1,%0" : "=r" (r) : "r" (3), "r" (a));
#define	probewi(r,a)	__asm volatile(	\
    "probewi	(%2),%1,%0" : "=r" (r) : "i" (3), "r" (a));

void
sigsegv(int sig, siginfo_t *sip, void *scp)
{
	char buf[1024];

	snprintf(buf, sizeof buf, "%s not decoded\n", label);
	write(STDOUT_FILENO, buf, strlen(buf));
        _exit(1);
}

int
main(int argc, char *argv[])
{
	struct sigaction sa;
	int rv;

	sa.sa_sigaction = &sigsegv;
	sa.sa_flags = SA_SIGINFO;
	sigemptyset(&sa.sa_mask);
	sigaction(SIGSEGV, &sa, NULL);

#define	test_probe(n,a,r)	\
	label = #n;		\
	n(rv, a);		\
	if (rv != (r))		\
		errx(1, "%s(%p) returned %d", label, (a), rv);

	test_probe(prober, 1, 0);
	test_probe(prober, &blah, 1);

	test_probe(proberi, 1, 0);
	test_probe(proberi, &blah, 1);

	test_probe(probew, 1, 0);
	test_probe(probew, &blah, 0);
	test_probe(probew, &moo, 1);

	test_probe(probewi, 1, 0);
	test_probe(probewi, &blah, 0);
	test_probe(probewi, &moo, 1);

	exit(0);
}

#else

int
main(int argc, char *argv[])
{
	printf("SKIPPED\n");
	exit(0);
}

#endif
@


1.2
log
@It's been a quarter century: we can assume volatile is present with that name.
@
text
@d1 1
a1 1
/*	$OpenBSD: probe.c,v 1.1 2004/05/12 22:54:13 mickey Exp $	*/
d11 2
d15 2
d73 11
@


1.1
log
@a test for probe instructions
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d17 1
a17 1
#define	prober(r,a)	__asm __volatile(	\
d19 1
a19 1
#define	proberi(r,a)	__asm __volatile(	\
d21 1
a21 1
#define	probew(r,a)	__asm __volatile(	\
d23 1
a23 1
#define	probewi(r,a)	__asm __volatile(	\
@

