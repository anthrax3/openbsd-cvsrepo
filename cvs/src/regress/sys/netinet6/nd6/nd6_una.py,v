head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.2
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.0.20
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.10
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.18
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.16
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.14
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.12
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.8
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.6
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.4
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.2;
locks; strict;
comment	@# @;


1.2
date	2017.03.01.00.05.21;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	5O6VrHQNBYYOu82K;

1.1
date	2012.01.31.00.14.02;	author bluhm;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Use consistent address schema with local and remote machine.  Fill
variables with example IPs from my daily test run.
@
text
@#!/usr/local/bin/python2.7
# send Unsolicited Neighbor Advertisement

print "send unsolicited neighbor advertisement packet"

import os
from addr import *
from scapy.all import *

# link-local solicited-node multicast address
def nsma(a):
	n = inet_pton(socket.AF_INET6, a)
	return inet_ntop(socket.AF_INET6, in6_getnsma(n))

# ethernet multicast address of multicast address
def nsmac(a):
	n = inet_pton(socket.AF_INET6, a)
	return in6_getnsmac(n)

# ethernet multicast address of solicited-node multicast address
def nsmamac(a):
	return nsmac(nsma(a))

# link-local address
def lla(m):
	return "fe80::"+in6_mactoifaceid(m)

ip=IPv6(src=lla(LOCAL_MAC), dst="ff02::1")/ICMPv6ND_NA(tgt=LOCAL_ADDR6)
eth=Ether(src=LOCAL_MAC, dst=nsmac("ff02::1"))/ip

sendp(eth, iface=LOCAL_IF)
time.sleep(1)

exit(0)
@


1.1
log
@Add test suite for IPv6 neighbor discovery protocol.  Send all kind
of solicitations to remote host and check responses.  This can be
used to test both pf neighbor discovery states and the IPv6 stack.
@
text
@d4 2
d28 2
a29 2
ip=IPv6(src=lla(SRC_MAC), dst="ff02::1")/ICMPv6ND_NA(tgt=SRC_OUT6)
eth=Ether(src=SRC_MAC, dst=nsmac("ff02::1"))/ip
d31 1
a31 1
sendp(eth, iface=SRC_IF)
@

