head	1.3;
access;
symbols
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.4
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.2.0.8
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.6
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.4
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.1.0.14
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.12
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.8
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.6
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.4
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2017.03.01.00.05.21;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	5O6VrHQNBYYOu82K;

1.2
date	2014.12.19.21.41.20;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	SeHiTyo2F64te6y4;

1.1
date	2012.01.31.00.14.02;	author bluhm;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Use consistent address schema with local and remote machine.  Fill
variables with example IPs from my daily test run.
@
text
@#!/usr/local/bin/python2.7
# send Address Resolution neighbor solicitation
# expect an neighbor advertisement answer and check it

print "send address resolution neighbor solicitation packet"

import os
from addr import *
from scapy.all import *

# link-local solicited-node multicast address
def nsma(a):
	n = inet_pton(socket.AF_INET6, a)
	return inet_ntop(socket.AF_INET6, in6_getnsma(n))

# ethernet multicast address of multicast address
def nsmac(a):
	n = inet_pton(socket.AF_INET6, a)
	return in6_getnsmac(n)

# ethernet multicast address of solicited-node multicast address
def nsmamac(a):
	return nsmac(nsma(a))

# link-local address
def lla(m):
	return "fe80::"+in6_mactoifaceid(m)

ip=IPv6(src=LOCAL_ADDR6, dst=nsma(REMOTE_ADDR6))/ICMPv6ND_NS(tgt=REMOTE_ADDR6)
eth=Ether(src=LOCAL_MAC, dst=nsmamac(REMOTE_ADDR6))/ip

if os.fork() == 0:
	time.sleep(1)
	sendp(eth, iface=LOCAL_IF)
	os._exit(0)

ans=sniff(iface=LOCAL_IF, timeout=3, filter=
    "ip6 and src "+REMOTE_ADDR6+" and dst "+LOCAL_ADDR6+" and icmp6")
for a in ans:
	if a and a.type == ETH_P_IPV6 and \
	    ipv6nh[a.payload.nh] == 'ICMPv6' and \
	    icmp6types[a.payload.payload.type] == 'Neighbor Advertisement':
		tgt=a.payload.payload.tgt
		print "target=%s" % (tgt)
		if tgt == REMOTE_ADDR6:
			exit(0)
		print "TARGET!=%s" % (REMOTE_ADDR6)
		exit(1)
print "NO NEIGHBOR ADVERTISEMENT"
exit(2)
@


1.2
log
@Use a simpler expression to check the ether type in scapy.  This
makes the fragment tests work on FreeBSD.  From Ilya Bakulin.
@
text
@d5 2
d29 2
a30 2
ip=IPv6(src=SRC_OUT6, dst=nsma(DST_IN6))/ICMPv6ND_NS(tgt=DST_IN6)
eth=Ether(src=SRC_MAC, dst=nsmamac(DST_IN6))/ip
d34 1
a34 1
	sendp(eth, iface=SRC_IF)
d37 2
a38 2
ans=sniff(iface=SRC_IF, timeout=3, filter=
    "ip6 and src "+DST_IN6+" and dst "+SRC_OUT6+" and icmp6")
d45 1
a45 1
		if tgt == DST_IN6:
d47 1
a47 1
		print "TARGET!=%s" % (DST_IN6)
@


1.1
log
@Add test suite for IPv6 neighbor discovery protocol.  Send all kind
of solicitations to remote host and check responses.  This can be
used to test both pf neighbor discovery states and the IPv6 stack.
@
text
@d38 1
a38 1
	if a and a.type == scapy.layers.dot11.ETHER_TYPES.IPv6 and \
@

