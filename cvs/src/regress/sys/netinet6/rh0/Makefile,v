head	1.10;
access;
symbols
	OPENBSD_6_0:1.4.0.12
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.10
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.8
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.6
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4;
locks; strict;
comment	@# @;


1.10
date	2017.03.01.00.58.22;	author bluhm;	state Exp;
branches;
next	1.9;
commitid	79BTddPZSnsqarDG;

1.9
date	2017.03.01.00.05.21;	author bluhm;	state Exp;
branches;
next	1.8;
commitid	5O6VrHQNBYYOu82K;

1.8
date	2017.02.28.16.14.35;	author bluhm;	state Exp;
branches;
next	1.7;
commitid	NrfmA6Z2z8YWBQ43;

1.7
date	2016.10.19.14.31.19;	author tb;	state Exp;
branches;
next	1.6;
commitid	r0ZXVh0JShv1yn7K;

1.6
date	2016.09.02.21.30.34;	author bluhm;	state Exp;
branches;
next	1.5;
commitid	sbZCO4zszQKrda5x;

1.5
date	2016.08.31.22.44.29;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	wQLTIpNOdX9pBNCe;

1.4
date	2013.11.17.20.16.27;	author bluhm;	state Exp;
branches;
next	1.3;

1.3
date	2013.11.13.23.13.04;	author bluhm;	state Exp;
branches;
next	1.2;

1.2
date	2013.10.31.01.24.06;	author bluhm;	state Exp;
branches;
next	1.1;

1.1
date	2013.10.20.13.45.44;	author bluhm;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Avoid warnings from ssh -t, check remote SUDO at beginning.
@
text
@#	$OpenBSD: Makefile,v 1.9 2017/03/01 00:05:21 bluhm Exp $

# The following ports must be installed:
#
# python-2.7		interpreted object-oriented programming language
# py-libdnet		python interface to libdnet
# scapy			powerful interactive packet manipulation in python

.if ! (make(clean) || make(cleandir) || make(obj))
# Check wether all required python packages are installed.  If some
# are missing print a warning and skip the tests, but do not fail.
PYTHON_IMPORT !!= python2.7 -c 'from scapy.all import *' 2>&1 || true
.endif

.if ! empty(PYTHON_IMPORT)
.BEGIN:
	@@true
regress:
	@@echo '${PYTHON_IMPORT}'
	@@echo Install python and the scapy module for additional tests.
	@@echo SKIPPED
.endif

# This test needs a manual setup of two machines
# Set up machines: LOCAL REMOTE
# LOCAL is the machine where this makefile is running.
# REMOTE is running OpenBSD, pf gets disabled to test the IPv6 stack.
# OTHER is an address on REMOTE, but configured on another interface.
# OTHER_FAKE source routed host, no packets reach this host,
#     it represents just bunch of addresses in the OTHER net.

# Configure Addresses on the machines.
# Adapt interface and address variables to your local setup.

LOCAL_IF ?=	em1
LOCAL_MAC ?=	00:1b:21:0e:6e:8e
REMOTE_MAC ?=	00:04:23:b0:68:8e

LOCAL_ADDR6 ?=	fdd7:e83e:66bc:81::21
REMOTE_ADDR6 ?=	fdd7:e83e:66bc:81::22
OTHER_ADDR6 ?=	fdd7:e83e:66bc:82::22
OTHER_FAKE1_ADDR6 ?=	fdd7:e83e:66bc:82::dead
OTHER_FAKE2_ADDR6 ?=	fdd7:e83e:66bc:82::beef

REMOTE_SSH ?=

.if empty (LOCAL_IF) || empty (LOCAL_MAC) || empty (REMOTE_MAC) || \
    empty (LOCAL_ADDR6) || empty (REMOTE_ADDR6) || empty(OTHER_ADDR6) || \
    empty (OTHER_FAKE1_ADDR6) || empty (OTHER_FAKE2_ADDR6) || \
    empty (REMOTE_SSH)
.BEGIN:
	@@true
regress:
	@@echo This tests needs a remote machine to operate on.
	@@echo LOCAL_IF LOCAL_MAC REMOTE_MAC LOCAL_ADDR6 REMOTE_ADDR6
	@@echo OTHER_ADDR6 OTHER_FAKE1_ADDR6 OTHER_FAKE2_ADDR6 REMOTE_SSH
	@@echo Fill out these variables for additional tests.
	@@echo SKIPPED
.endif

.MAIN: all

.if make (regress) || make (all)
.BEGIN: addr.py
	@@echo
	${SUDO} true
	ssh -t ${REMOTE_SSH} ${SUDO} true
	rm -f stamp-stack stamp-pf
.endif

depend: addr.py

# Create python include file containing the addresses.
addr.py: Makefile
	rm -f $@@ $@@.tmp
	echo 'LOCAL_IF = "${LOCAL_IF}"' >>$@@.tmp
	echo 'LOCAL_MAC = "${LOCAL_MAC}"' >>$@@.tmp
	echo 'REMOTE_MAC = "${REMOTE_MAC}"' >>$@@.tmp
.for var in LOCAL_ADDR REMOTE_ADDR OTHER_FAKE1_ADDR OTHER_FAKE2_ADDR
	echo '${var}6 = "${${var}6}"' >>$@@.tmp
.endfor
	mv $@@.tmp $@@

# Set variables so that make runs with and without obj directory.
# Only do that if necessary to keep visible output short.
.if ${.CURDIR} == ${.OBJDIR}
PYTHON =	python2.7 ./
.else
PYTHON =	PYTHONPATH=${.OBJDIR} python2.7 ${.CURDIR}/
.endif

stamp-stack:
	rm -f stamp-stack stamp-pf
	-ssh ${REMOTE_SSH} ${SUDO} pfctl -d
	ssh ${REMOTE_SSH} ${SUDO} pfctl -a regress -Fr
	date >$@@

stamp-pf:
	rm -f stamp-stack stamp-pf
	echo 'pass proto tcp from port ssh no state\n'\
	    'pass proto tcp to port ssh no state'|\
	    ssh ${REMOTE_SSH} ${SUDO} pfctl -a regress -f -
	-ssh ${REMOTE_SSH} ${SUDO} pfctl -e
	date >$@@

RH0_SCRIPTS !!=		cd ${.CURDIR} && ls -1 rh0*.py

.for s in ${RH0_SCRIPTS}
run-regress-${s}: addr.py stamp-stack
	@@echo '\n======== $@@ ========'
	${SUDO} ${PYTHON}${s}
.endfor

REGRESS_TARGETS =	${RH0_SCRIPTS:S/^/run-regress-/}

# After running the tests, turn on pf on remote machine.
# This is the expected default configuration.
REGRESS_TARGETS +=      stamp-pf

CLEANFILES +=		addr.py *.pyc *.log stamp-*

.PHONY: check-setup check-setup-local check-setup-remote

# Check wether the address, route and remote setup is correct
check-setup: check-setup-local check-setup-remote

check-setup-local:
	@@echo '\n======== $@@ ========'
	ping6 -n -c 1 ${LOCAL_ADDR6}  # LOCAL_ADDR6
	route -n get -inet6 ${LOCAL_ADDR6} |\
	    grep -q 'flags: .*LOCAL'  # LOCAL_ADDR6
	ping6 -n -c 1 ${REMOTE_ADDR6}  # REMOTE_ADDR6
	route -n get -inet6 ${REMOTE_ADDR6} |\
	    grep -q 'interface: ${LOCAL_IF}$$'  # REMOTE_ADDR6 LOCAL_IF
.for ip in OTHER_ADDR6 OTHER_FAKE1_ADDR6 OTHER_FAKE2_ADDR6
	route -n get -inet6 ${${ip}} |\
	    grep -q 'gateway: ${REMOTE_ADDR6}$$'  # ${ip} REMOTE_ADDR6
.endfor
	ndp -n ${REMOTE_ADDR6} |\
	    grep -q ' ${REMOTE_MAC} '  # REMOTE_ADDR6 REMOTE_MAC

check-setup-remote:
	@@echo '\n======== $@@ ========'
	ssh ${REMOTE_SSH} ping6 -n -c 1 ${REMOTE_ADDR6}  # REMOTE_ADDR6
	ssh ${REMOTE_SSH} route -n get -inet6 ${REMOTE_ADDR6} |\
	    grep -q 'flags: .*LOCAL'  # REMOTE_ADDR6
	ssh ${REMOTE_SSH} ping6 -n -c 1 ${LOCAL_ADDR6}  # LOCAL_ADDR6
	ssh ${REMOTE_SSH} ping6 -n -c 1 ${OTHER_ADDR6}  # OTHER_ADDR6
	ssh ${REMOTE_SSH} route -n get -inet6 ${OTHER_ADDR6} |\
	    grep -q 'flags: .*LOCAL'  # OTHER_ADDR6
.for ip in OTHER_FAKE1_ADDR6 OTHER_FAKE2_ADDR6
	ssh ${REMOTE_SSH} route -n get -inet6 ${${ip}} |\
	    grep -q 'if address: ${OTHER_ADDR6}$$'  # ${ip} OTHER_ADDR6
.endfor
	ssh ${REMOTE_SSH} ndp -n ${LOCAL_ADDR6} |\
	    grep -q ' ${LOCAL_MAC} '  # LOCAL_ADDR6 LOCAL_MAC

.include <bsd.regress.mk>
@


1.9
log
@Use consistent address schema with local and remote machine.  Fill
variables with example IPs from my daily test run.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.8 2017/02/28 16:14:35 bluhm Exp $
d67 1
d94 2
a95 2
	-ssh -t ${REMOTE_SSH} ${SUDO} pfctl -d
	ssh -t ${REMOTE_SSH} ${SUDO} pfctl -a regress -Fr
d102 2
a103 2
	    ssh -t ${REMOTE_SSH} ${SUDO} pfctl -a regress -f -
	-ssh -t ${REMOTE_SSH} ${SUDO} pfctl -e
@


1.8
log
@IPv6 packets with routing header 0 are dropped by pf, but answered
with ICMP6 parameter problem by the network stack.  This test expects
the ICMP6 packets, so disable pf on the remote machine temporarily.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.7 2016/10/19 14:31:19 tb Exp $
d16 2
d25 6
a30 10
# Set up machines: SRC DST
# SRC is the machine where this makefile is running.
# DST is running OpenBSD with pf disabled to test the IPv6 stack.
# SRT source routed host, no packets reach this host,
#     it represents just bunch of addresses
#
# +---+   1   +---+       +---+
# |SRC| ----> |DST|       |SRT|
# +---+       +---+       +---+
#     out    in   out    in   out
d34 19
a52 14
#
SRC_IF ?=
SRC_MAC ?=
DST_MAC ?=

SRC_OUT6 ?=
DST_IN6 ?=
DST_OUT6 ?=
SRT_IN6 ?=
SRT_OUT6 ?=

.if empty (SRC_IF) || empty (SRC_MAC) || empty (DST_MAC) || \
    empty (SRC_OUT6) || empty (DST_IN6) || empty (DST_OUT6) || \
    empty (SRT_IN6) || empty (SRT_OUT6) || empty (REMOTE_SSH)
d55 2
a56 2
	@@echo SRC_IF SRC_MAC DST_MAC SRC_OUT6 DST_IN6 DST_OUT6
	@@echo SRT_IN6 SRT_OUT6 REMOTE_SSH are empty.
d75 4
a78 4
	echo 'SRC_IF = "${SRC_IF}"' >>$@@.tmp
	echo 'SRC_MAC = "${SRC_MAC}"' >>$@@.tmp
	echo 'DST_MAC = "${DST_MAC}"' >>$@@.tmp
.for var in SRC_OUT DST_IN DST_OUT SRT_IN SRT_OUT
d121 1
a121 1
.PHONY: check-setup
d124 3
a126 1
check-setup:
d128 28
a155 8
	route -n get -inet6 ${SRC_OUT6} | grep -q 'flags: .*LOCAL'
	ping6 -n -c 1 ${SRC_OUT6}
	route -n get -inet6 ${DST_IN6} | grep -q 'interface: ${SRC_IF}$$'
	ping6 -n -c 1 ${DST_IN6}
	route -n get -inet6 ${DST_OUT6} | grep -q 'gateway: ${DST_IN6}$$'
	ping6 -n -c 1 ${DST_OUT6}
	route -n get -inet6 ${SRT_IN6} | grep -q 'gateway: ${DST_IN6}$$'
	ndp -n ${DST_IN6} | grep -q ' ${DST_MAC} '
@


1.7
log
@The clean:, cleandir:, and obj: targets of src/Makefile descend into
regress/ and run python to set the IMPORT_PYTHON variable in several
test Makefiles. This results in W^X violations during 'make build'.
Avoid doing that.

ok bluhm
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.6 2016/09/02 21:30:34 bluhm Exp $
d12 1
a12 1
PYTHON_IMPORT != python2.7 -c 'from scapy.all import *' 2>&1 || true
d14 1
d18 1
a18 1
	@@echo install python and the scapy module for additional tests
d49 1
a49 1
    empty (SRT_IN6) || empty (SRT_OUT6)
d51 1
a51 1
	@@echo this tests needs a remote machine to operate on
d53 2
a54 2
	@@echo SRT_IN6 SRT_OUT6 are empty
	@@echo fill out these variables for additional tests
d58 9
d88 13
a100 6
# Send ping6 packet without routing header type 0
TARGETS +=	rh0-none
run-regress-rh0-none: addr.py
	@@echo '\n======== $@@ ========'
	@@echo Check without routing header type 0
	${SUDO} ${PYTHON}rh0_none.py
d102 1
a102 6
# Send ping6 packet with routing header type 0 but empty address list
TARGETS +=	rh0-empty
run-regress-rh0-empty: addr.py
	@@echo '\n======== $@@ ========'
	@@echo Check routing header type 0 with empty address list
	${SUDO} ${PYTHON}rh0_empty.py
d104 2
a105 3
TARGETS +=	rh0-final
# Send ping6 packet with routing header type 0 to the final destination
run-regress-rh0-final: addr.py
d107 2
a108 2
	@@echo Check routing header type 0 to the final destination
	${SUDO} ${PYTHON}rh0_final.py
d110 1
a110 6
TARGETS +=	rh0-route
# Send ping6 packet with routing header type 0 to be source routed
run-regress-rh0-route: addr.py
	@@echo '\n======== $@@ ========'
	@@echo Check routing header type 0 to be source routed
	${SUDO} ${PYTHON}rh0_route.py
d112 3
a114 6
# Send with fragment and routing header type 0 but empty address list
TARGETS +=	rh0-frag-empty
run-regress-rh0-frag-empty: addr.py
	@@echo '\n======== $@@ ========'
	@@echo Check fragment and routing header type 0 with empty address list
	${SUDO} ${PYTHON}rh0_frag_empty.py
d116 1
a116 24
TARGETS +=	rh0-frag-final
# Send with fragment and routing header type 0 to the final destination
run-regress-rh0-frag-final: addr.py
	@@echo '\n======== $@@ ========'
	@@echo Check fragment and routing header type 0 to the final destination
	${SUDO} ${PYTHON}rh0_frag_final.py

TARGETS +=	rh0-frag-route
# Send with fragment and routing header type 0 to be source routed
run-regress-rh0-frag-route: addr.py
	@@echo '\n======== $@@ ========'
	@@echo Check fragment and routing header type 0 to be source routed
	${SUDO} ${PYTHON}rh0_frag_route.py

TARGETS +=	rh0-frag2
# Send with fragment and routing header type 0 to be source routed
run-regress-rh0-frag2: addr.py
	@@echo '\n======== $@@ ========'
	@@echo Check routing header type 0 in the second fragment
	${SUDO} ${PYTHON}rh0_frag2.py

REGRESS_TARGETS =	${TARGETS:S/^/run-regress-/}

CLEANFILES +=		addr.py *.pyc *.log
a130 3
.if defined(REMOTE_SSH)
	ssh ${REMOTE_SSH} ${SUDO} pfctl -si | grep '^Status: Disabled '
.endif
@


1.6
log
@Print SKIPPED if a regress test cannot be executed for some reason.
This allows to identify such tests by looking at their output.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.5 2016/08/31 22:44:29 bluhm Exp $
d9 1
d13 1
@


1.5
log
@Split the check-setup target into smaller parts to make it easier
to configure the regression test machines.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.4 2013/11/17 20:16:27 bluhm Exp $
d16 1
d52 1
@


1.4
log
@Adapt the IPv6 routing header type 0 tests to the current behaviour.
As header scanning is back, there is always a icmp6 parameter problem
response.  Add tests that hide the routing header behind an atomic
fragment header to get the RFC 5095 behaviour.  One test puts the
routing header into the second fragment so that it cannot be detected
without reassembly.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.3 2013/11/13 23:13:04 bluhm Exp $
d138 2
a139 1
	route -n get -inet6 ${SRC_OUT6} | grep 'interface: lo0$$'
d141 1
a141 1
	route -n get -inet6 ${DST_IN6} | grep 'interface: ${SRC_IF}$$'
d143 1
a143 1
	route -n get -inet6 ${DST_OUT6} | grep 'gateway: ${DST_IN6}$$'
d145 2
a146 2
	route -n get -inet6 ${SRT_IN6} | grep 'gateway: ${DST_IN6}$$'
	ndp -n ${DST_IN6} | grep ' ${DST_MAC} '
@


1.3
log
@Add a check-setup target to make sure that all addresses and routes
are configured correctly.  Add a scapy test that creates a packet
without routing header to check the setup.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.2 2013/10/31 01:24:06 bluhm Exp $
d102 28
d146 3
@


1.2
log
@Do not fail the regression tests if python or the scapy package is
not installed.  Print a warning, explain the problem and skip the
test in this case.  Also skip the test if the environment has not
been configured for the remote test target machine.  Fix the Makefile
to run the tests with or without an obj directory.  Finally link
the netinet6 regression tests into the build.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.1 2013/10/20 13:45:44 bluhm Exp $
d74 3
a76 3
# Check routes.  This ensures that and the local routing tables is set up.
TARGETS +=	route6
run-regress-route6:
d78 2
a79 14
.for ip in DST_OUT SRT_IN
	@@echo Check route6 destination ${ip}6 gateway DST_IN6:
	route -n get -inet6 ${${ip}6}/64 | grep 'gateway: ${DST_IN6}$$'
.endfor

# Ping all addresses.  This ensures that the ip addresses are configured
# and all routing tables are set up to allow bidirectional packet flow.
TARGETS +=	ping6
run-regress-ping6:
	@@echo '\n======== $@@ ========'
.for ip in SRC_OUT DST_IN DST_OUT
	@@echo Check ping6 ${ip}6:
	ping6 -n -c 1 ${${ip}6}
.endfor
d105 13
@


1.1
log
@Use scapy to test IPv6 packets with routing header type 0.
@
text
@d1 1
a1 1
#	$OpenBSD$
d9 9
d33 19
a51 9
SRC_IF ?=	tun0
SRC_MAC ?=	fe:e1:ba:d1:56:1f
DST_MAC ?=	70:5f:ca:21:8d:70

SRC_OUT6 ?=	fdd7:e83e:66bc:7:fce1:baff:fed2:26be
DST_IN6 ?=	fdd7:e83e:66bc:7:725f:caff:fe21:8d70
DST_OUT6 ?=	fdd7:e83e:66bc:70:725f:caff:fe21:8d70
SRT_IN6 ?=	fdd7:e83e:66bc:70::1
SRT_OUT6 ?=	fdd7:e83e:66bc:71::1
d66 17
d93 3
a95 4
.for i in empty final route
# Send hand-crafted routing header type 0 packets
TARGETS +=	rh0-${i}
run-regress-rh0-${i}: addr.py
d97 16
a112 3
	@@echo Check routing header type 0 ${i}
	${SUDO} python2.7 rh0_${i}.py
.endfor
@

