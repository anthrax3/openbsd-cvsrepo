head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.6
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.4
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.3.0.2
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.6
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.4
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.1.0.6
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.4
	OPENBSD_5_5_BASE:1.1;
locks; strict;
comment	@# @;


1.6
date	2017.03.01.00.05.21;	author bluhm;	state Exp;
branches;
next	1.5;
commitid	5O6VrHQNBYYOu82K;

1.5
date	2017.02.28.16.14.36;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	NrfmA6Z2z8YWBQ43;

1.4
date	2017.01.18.23.03.44;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	CeKCY3OcQDpvUbop;

1.3
date	2016.05.22.22.13.33;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	1AiC2RYVGPeCEPmz;

1.2
date	2014.12.19.21.41.20;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	SeHiTyo2F64te6y4;

1.1
date	2013.11.17.20.16.27;	author bluhm;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Use consistent address schema with local and remote machine.  Fill
variables with example IPs from my daily test run.
@
text
@#!/usr/local/bin/python2.7
# send a ping6 packet with routing header type 0
# the address list is empty
# hide the routing header in a second fragment to preclude header scan
# we expect an echo reply, as there are no more hops

print "send with fragment and routing header type 0 to be source routed"

import os
from addr import *
from scapy.all import *

pid=os.getpid()
eid=pid & 0xffff
payload="ABCDEFGHIJKLMNOP"
packet=IPv6(src=LOCAL_ADDR6, dst=REMOTE_ADDR6)/\
    IPv6ExtHdrDestOpt()/\
    IPv6ExtHdrRouting(addresses=[])/\
    ICMPv6EchoRequest(id=eid, data=payload)
frag=[]
fid=pid & 0xffffffff
frag.append(IPv6ExtHdrFragment(nh=60, id=fid, m=1)/str(packet)[40:48])
frag.append(IPv6ExtHdrFragment(nh=60, id=fid, offset=1)/str(packet)[48:80])
eth=[]
for f in frag:
	pkt=IPv6(src=LOCAL_ADDR6, dst=REMOTE_ADDR6)/f
	eth.append(Ether(src=LOCAL_MAC, dst=REMOTE_MAC)/pkt)

if os.fork() == 0:
	time.sleep(1)
	sendp(eth, iface=LOCAL_IF)
	os._exit(0)

ans=sniff(iface=LOCAL_IF, timeout=3, filter=
    "ip6 and dst "+LOCAL_ADDR6+" and icmp6")
for a in ans:
	if a and a.type == ETH_P_IPV6 and \
	    ipv6nh[a.payload.nh] == 'ICMPv6' and \
	    icmp6types[a.payload.payload.type] == 'Echo Reply':
		reply=a.payload.payload
		id=reply.id
		print "id=%#x" % (id)
		if id != eid:
			print "WRONG ECHO REPLY ID"
			exit(2)
		data=reply.data
		print "payload=%s" % (data)
		if data != payload:
			print "WRONG PAYLOAD"
			exit(2)
		exit(0)
print "NO ICMP6 ECHO REPLY"
exit(1)
@


1.5
log
@IPv6 packets with routing header 0 are dropped by pf, but answered
with ICMP6 parameter problem by the network stack.  This test expects
the ICMP6 packets, so disable pf on the remote machine temporarily.
@
text
@d16 1
a16 1
packet=IPv6(src=SRC_OUT6, dst=DST_IN6)/\
d26 2
a27 2
	pkt=IPv6(src=SRC_OUT6, dst=DST_IN6)/f
	eth.append(Ether(src=SRC_MAC, dst=DST_MAC)/pkt)
d31 1
a31 1
	sendp(eth, iface=SRC_IF)
d34 2
a35 2
ans=sniff(iface=SRC_IF, timeout=3, filter=
    "ip6 and dst "+SRC_OUT6+" and icmp6")
@


1.4
log
@Do not use privileged or NFS source ports for UDP packets as inetd
ignores such packets.  This should avoid some sporadic failures.
While there, use variable names consistently in all tests.
@
text
@d7 2
@


1.3
log
@Fix tests:  Restrict getpid() to lower 16 bit so that it can still
be used as packet id.  Now scapy calls nexthopmtu with this name
explicitly in icmp structure.
@
text
@d11 2
a12 1
pid=os.getpid() & 0xffff
d17 1
a17 1
    ICMPv6EchoRequest(id=pid, data=payload)
d19 3
a21 2
frag.append(IPv6ExtHdrFragment(nh=60, id=pid, m=1)/str(packet)[40:48])
frag.append(IPv6ExtHdrFragment(nh=60, id=pid, offset=1)/str(packet)[48:80])
d41 1
a41 1
		if id != pid:
@


1.2
log
@Use a simpler expression to check the ether type in scapy.  This
makes the fragment tests work on FreeBSD.  From Ilya Bakulin.
@
text
@d11 1
a11 1
pid=os.getpid()
@


1.1
log
@Adapt the IPv6 routing header type 0 tests to the current behaviour.
As header scanning is back, there is always a icmp6 parameter problem
response.  Add tests that hide the routing header behind an atomic
fragment header to get the RFC 5095 behaviour.  One test puts the
routing header into the second fragment so that it cannot be detected
without reassembly.
@
text
@d33 1
a33 1
	if a and a.type == scapy.layers.dot11.ETHER_TYPES.IPv6 and \
@

