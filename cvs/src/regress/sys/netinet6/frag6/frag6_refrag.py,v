head	1.7;
access;
symbols
	OPENBSD_6_0:1.4.0.2
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.4
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.2.0.4
	OPENBSD_5_6_BASE:1.2;
locks; strict;
comment	@# @;


1.7
date	2017.03.01.00.05.21;	author bluhm;	state Exp;
branches;
next	1.6;
commitid	5O6VrHQNBYYOu82K;

1.6
date	2017.01.18.23.03.44;	author bluhm;	state Exp;
branches;
next	1.5;
commitid	CeKCY3OcQDpvUbop;

1.5
date	2016.11.17.17.27.05;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	edSHo2pc3VKAdOlz;

1.4
date	2016.05.22.22.13.33;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	1AiC2RYVGPeCEPmz;

1.3
date	2014.12.19.21.41.20;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	SeHiTyo2F64te6y4;

1.2
date	2014.07.11.20.03.10;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	aY5WXvFzveS9SKOk;

1.1
date	2014.07.11.18.25.50;	author bluhm;	state Exp;
branches;
next	;
commitid	k6I89Y30DnVfNl4F;


desc
@@


1.7
log
@Use consistent address schema with local and remote machine.  Fill
variables with example IPs from my daily test run.
@
text
@#!/usr/local/bin/python2.7

print "fragments of a large packet that has to be refragmented by reflector"

# |--------|
#          |------------------|
#                              ...
#                                 |------------------|
#                                                    |----|

import os
from addr import *
from scapy.all import *

pid=os.getpid()
eid=pid & 0xffff
payload=100 * "ABCDEFGHIJKLMNOP"
packet=IPv6(src=LOCAL_ADDR6, dst=REMOTE_ADDR6)/ \
    ICMPv6EchoRequest(id=eid, data=payload)
request_cksum=ICMPv6Unknown(str(packet.payload)).cksum
print "request cksum=%#x" % (request_cksum)
frag=[]
fid=pid & 0xffffffff
frag.append(IPv6ExtHdrFragment(nh=58, id=fid, m=1)/str(packet)[40:56])
offset=2
chunk=4
while 40+8*(offset+chunk) < len(payload):
	frag.append(IPv6ExtHdrFragment(nh=58, id=fid, offset=offset, m=1)/
	    str(packet)[40+(8*offset):40+8*(offset+chunk)])
	offset+=chunk
frag.append(IPv6ExtHdrFragment(nh=58, id=fid, offset=offset)/
    str(packet)[40+(8*offset):])
eth=[]
for f in frag:
	pkt=IPv6(src=LOCAL_ADDR6, dst=REMOTE_ADDR6)/f
	eth.append(Ether(src=LOCAL_MAC, dst=REMOTE_MAC)/pkt)

if os.fork() == 0:
	time.sleep(1)
	sendp(eth, iface=LOCAL_IF)
	os._exit(0)

ans=sniff(iface=LOCAL_IF, timeout=3, filter=
    "ip6 and src "+REMOTE_ADDR6+" and dst "+LOCAL_ADDR6+" and proto ipv6-frag")
for a in ans:
	if a and a.type == ETH_P_IPV6 and \
	    ipv6nh[a.payload.nh] == 'Fragment Header' and \
	    a.payload.payload.offset == 0 and \
	    ipv6nh[a.payload.payload.nh] == 'ICMPv6' and \
	    icmp6types[a.payload.payload.payload.type] == 'Echo Reply':
		id=a.payload.payload.payload.id
		print "id=%#x" % (id)
		if id != eid:
			print "WRONG ECHO REPLY ID"
			exit(2)
		reply_cksum=a.payload.payload.payload.cksum
		print "reply cksum=%#x" % (reply_cksum)
		# change request checksum incrementaly and check with reply
		diff_cksum=~(~reply_cksum+~(~request_cksum+~0x8000+0x8100))
		if  diff_cksum != -1:
			print "CHECKSUM ERROR diff cksum=%#x" % (diff_cksum)
			exit(1)
		exit(0)
print "NO ECHO REPLY"
exit(2)
@


1.6
log
@Do not use privileged or NFS source ports for UDP packets as inetd
ignores such packets.  This should avoid some sporadic failures.
While there, use variable names consistently in all tests.
@
text
@d18 2
a19 1
packet=IPv6(src=SRC_OUT6, dst=DST_IN6)/ICMPv6EchoRequest(id=eid, data=payload)
d35 2
a36 2
	pkt=IPv6(src=SRC_OUT6, dst=DST_IN6)/f
	eth.append(Ether(src=SRC_MAC, dst=DST_MAC)/pkt)
d40 1
a40 1
	sendp(eth, iface=SRC_IF)
d43 2
a44 2
ans=sniff(iface=SRC_IF, timeout=3, filter=
    "ip6 and src "+DST_IN6+" and dst "+SRC_OUT6+" and proto ipv6-frag")
@


1.5
log
@Put all make targets in a loop and print a little more what each
IPv6 fragment header test is doing.
@
text
@d15 2
a16 1
pid=os.getpid() & 0xffff
d18 1
a18 1
packet=IPv6(src=SRC_OUT6, dst=DST_IN6)/ICMPv6EchoRequest(id=pid, data=payload)
d22 2
a23 1
frag.append(IPv6ExtHdrFragment(nh=58, id=pid, m=1)/str(packet)[40:56])
d27 1
a27 1
	frag.append(IPv6ExtHdrFragment(nh=58, id=pid, offset=offset, m=1)/
d30 1
a30 1
frag.append(IPv6ExtHdrFragment(nh=58, id=pid, offset=offset)/
d52 1
a52 1
		if id != pid:
@


1.4
log
@Fix tests:  Restrict getpid() to lower 16 bit so that it can still
be used as packet id.  Now scapy calls nexthopmtu with this name
explicitly in icmp structure.
@
text
@d2 2
a3 1
# send fragments of a large packet that has to be refragmented by reflector
@


1.3
log
@Use a simpler expression to check the ether type in scapy.  This
makes the fragment tests work on FreeBSD.  From Ilya Bakulin.
@
text
@d14 1
a14 1
pid=os.getpid()
@


1.2
log
@Verify the checksum of the echo reply fragment based on the echo
request.
@
text
@d42 1
a42 1
	if a and a.type == scapy.layers.dot11.ETHER_TYPES.IPv6 and \
@


1.1
log
@Add a test that sends a large ICMP6 packet in many small fragments.
The echo reply has to be fragmented.
@
text
@d17 2
d52 7
@

