head	1.4;
access;
symbols
	OPENBSD_6_1:1.3.0.4
	OPENBSD_6_1_BASE:1.3;
locks; strict;
comment	@# @;


1.4
date	2017.09.07.19.00.26;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	QGdsdG3K0GwPkf2q;

1.3
date	2017.03.01.00.05.21;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	5O6VrHQNBYYOu82K;

1.2
date	2017.01.18.23.03.44;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	CeKCY3OcQDpvUbop;

1.1
date	2016.11.21.18.15.02;	author bluhm;	state Exp;
branches;
next	;
commitid	dMJ15cFOzYg7Nymc;


desc
@@


1.4
log
@Link regress/sys/netinet/frag to build.  Get IPv4 and IPv6 fragment
tests into common shape.  Add some missing test cases.
@
text
@#!/usr/local/bin/python2.7

print "ping6 fragment with mf=1 that overlaps fragment with mf=0 at the end"

#           |----|
#      |XXXXXXXXX|
# |---------|

import os
from addr import *
from scapy.all import *

pid=os.getpid()
eid=pid & 0xffff
payload="ABCDEFGHIJKLMNOP"
packet=IPv6(src=LOCAL_ADDR6, dst=REMOTE_ADDR6)/ \
    ICMPv6EchoRequest(id=eid, data=payload)
frag=[]
fid=pid & 0xffffffff
frag.append(IPv6ExtHdrFragment(nh=58, id=fid, offset=2)/str(packet)[56:64])
frag.append(IPv6ExtHdrFragment(nh=58, id=fid, offset=1, m=1)/str(packet)[48:64])
frag.append(IPv6ExtHdrFragment(nh=58, id=fid, m=1)/str(packet)[40:56])
eth=[]
for f in frag:
	pkt=IPv6(src=LOCAL_ADDR6, dst=REMOTE_ADDR6)/f
	eth.append(Ether(src=LOCAL_MAC, dst=REMOTE_MAC)/pkt)

if os.fork() == 0:
	time.sleep(1)
	sendp(eth, iface=LOCAL_IF)
	os._exit(0)

ans=sniff(iface=LOCAL_IF, timeout=3, filter=
    "ip6 and src "+REMOTE_ADDR6+" and dst "+LOCAL_ADDR6+" and icmp6")
for a in ans:
	if a and a.type == ETH_P_IPV6 and \
	    ipv6nh[a.payload.nh] == 'ICMPv6' and \
	    icmp6types[a.payload.payload.type] == 'Echo Reply':
		id=a.payload.payload.id
		print "id=%#x" % (id)
		if id != eid:
			print "WRONG ECHO REPLY ID"
			exit(2)
		data=a.payload.payload.data
		print "payload=%s" % (data)
		if data == payload:
			print "ECHO REPLY"
			exit(1)
		print "PAYLOAD!=%s" % (payload)
		exit(2)
print "no echo reply"
exit(0)
@


1.3
log
@Use consistent address schema with local and remote machine.  Fill
variables with example IPs from my daily test run.
@
text
@d5 3
a7 3
#      |---------|
#           |XXXX|
# |----|
d20 3
a22 3
frag.append(IPv6ExtHdrFragment(nh=58, id=fid, offset=1)/str(packet)[48:64])
frag.append(IPv6ExtHdrFragment(nh=58, id=fid, m=1, offset=2)/str(packet)[56:64])
frag.append(IPv6ExtHdrFragment(nh=58, id=fid, m=1)/str(packet)[40:48])
@


1.2
log
@Do not use privileged or NFS source ports for UDP packets as inetd
ignores such packets.  This should avoid some sporadic failures.
While there, use variable names consistently in all tests.
@
text
@d16 2
a17 1
packet=IPv6(src=SRC_OUT6, dst=DST_IN6)/ICMPv6EchoRequest(id=eid, data=payload)
d25 2
a26 2
	pkt=IPv6(src=SRC_OUT6, dst=DST_IN6)/f
	eth.append(Ether(src=SRC_MAC, dst=DST_MAC)/pkt)
d30 1
a30 1
	sendp(eth, iface=SRC_IF)
d33 2
a34 2
ans=sniff(iface=SRC_IF, timeout=3, filter=
    "ip6 and src "+DST_IN6+" and dst "+SRC_OUT6+" and icmp6")
@


1.1
log
@Test that IPv6 framents with invalid length or more-fragment bit
drop the whole fragment cache.
@
text
@d13 2
a14 1
pid=os.getpid() & 0xffff
d16 1
a16 1
packet=IPv6(src=SRC_OUT6, dst=DST_IN6)/ICMPv6EchoRequest(id=pid, data=payload)
d18 4
a21 3
frag.append(IPv6ExtHdrFragment(nh=58, id=pid, offset=1)/str(packet)[48:64])
frag.append(IPv6ExtHdrFragment(nh=58, id=pid, m=1, offset=2)/str(packet)[56:64])
frag.append(IPv6ExtHdrFragment(nh=58, id=pid, m=1)/str(packet)[40:48])
d40 1
a40 1
		if id != pid:
@

