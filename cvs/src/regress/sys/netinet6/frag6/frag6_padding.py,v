head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.2
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.4
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.2.0.2
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.1.0.2
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.4
	OPENBSD_5_8_BASE:1.1;
locks; strict;
comment	@# @;


1.5
date	2017.03.01.00.05.21;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	5O6VrHQNBYYOu82K;

1.4
date	2017.01.18.23.03.44;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	CeKCY3OcQDpvUbop;

1.3
date	2016.11.17.17.27.05;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	edSHo2pc3VKAdOlz;

1.2
date	2016.05.22.22.13.33;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	1AiC2RYVGPeCEPmz;

1.1
date	2015.04.15.21.29.15;	author bluhm;	state Exp;
branches;
next	;
commitid	NtrzJZn7KuD1llpY;


desc
@@


1.5
log
@Use consistent address schema with local and remote machine.  Fill
variables with example IPs from my daily test run.
@
text
@#!/usr/local/bin/python2.7

print "non-overlapping ping6 fragments with ethernet padding"

# |--------|XX|
#          |----|XX|

import os
from addr import *
from scapy.all import *

pid=os.getpid()
eid=pid & 0xffff
payload="ABCDEFGHIJKLMNOP"
padding="0123"
packet=IPv6(src=LOCAL_ADDR6, dst=REMOTE_ADDR6)/ \
    ICMPv6EchoRequest(id=eid, data=payload)
frag=[]
fid=pid & 0xffffffff
frag.append(IPv6ExtHdrFragment(nh=58, id=fid, m=1)/str(packet)[40:56])
frag.append(IPv6ExtHdrFragment(nh=58, id=fid, offset=2)/str(packet)[56:64])
eth=[]
for f in frag:
	pkt=str(IPv6(src=LOCAL_ADDR6, dst=REMOTE_ADDR6)/f) + padding
	eth.append(Ether(src=LOCAL_MAC, dst=REMOTE_MAC, type=0x86dd)/pkt)

if os.fork() == 0:
	time.sleep(1)
	sendp(eth, iface=LOCAL_IF)
	os._exit(0)

ans=sniff(iface=LOCAL_IF, timeout=3, filter=
    "ip6 and src "+REMOTE_ADDR6+" and dst "+LOCAL_ADDR6+" and icmp6")
for a in ans:
	if a and a.type == ETH_P_IPV6 and \
	    ipv6nh[a.payload.nh] == 'ICMPv6' and \
	    icmp6types[a.payload.payload.type] == 'Echo Reply':
		id=a.payload.payload.id
		print "id=%#x" % (id)
		if id != eid:
			print "WRONG ECHO REPLY ID"
			exit(2)
		data=a.payload.payload.data
		print "payload=%s" % (data)
		if data == payload:
			exit(0)
		print "PAYLOAD!=%s" % (payload)
		exit(1)
print "NO ECHO REPLY"
exit(2)
@


1.4
log
@Do not use privileged or NFS source ports for UDP packets as inetd
ignores such packets.  This should avoid some sporadic failures.
While there, use variable names consistently in all tests.
@
text
@d16 2
a17 1
packet=IPv6(src=SRC_OUT6, dst=DST_IN6)/ICMPv6EchoRequest(id=eid, data=payload)
d24 2
a25 2
	pkt=str(IPv6(src=SRC_OUT6, dst=DST_IN6)/f) + padding
	eth.append(Ether(src=SRC_MAC, dst=DST_MAC, type=0x86dd)/pkt)
d29 1
a29 1
	sendp(eth, iface=SRC_IF)
d32 2
a33 2
ans=sniff(iface=SRC_IF, timeout=3, filter=
    "ip6 and src "+DST_IN6+" and dst "+SRC_OUT6+" and icmp6")
@


1.3
log
@Put all make targets in a loop and print a little more what each
IPv6 fragment header test is doing.
@
text
@d12 2
a13 1
pid=os.getpid() & 0xffff
d16 1
a16 1
packet=IPv6(src=SRC_OUT6, dst=DST_IN6)/ICMPv6EchoRequest(id=pid, data=payload)
d18 3
a20 2
frag.append(IPv6ExtHdrFragment(nh=58, id=pid, m=1)/str(packet)[40:56])
frag.append(IPv6ExtHdrFragment(nh=58, id=pid, offset=2)/str(packet)[56:64])
d39 1
a39 1
		if id != pid:
@


1.2
log
@Fix tests:  Restrict getpid() to lower 16 bit so that it can still
be used as packet id.  Now scapy calls nexthopmtu with this name
explicitly in icmp structure.
@
text
@d2 2
a3 1
# send 2 non-overlapping ping6 fragments with ethernet padding
@


1.1
log
@Test that ping6 fragments with ethernet padding get reassembled
correctly.
@
text
@d11 1
a11 1
pid=os.getpid()
@

