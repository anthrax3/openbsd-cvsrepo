head	1.9;
access;
symbols
	OPENBSD_6_1:1.9.0.4
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.6.0.2
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.8
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.6
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.3.0.6
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.4
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2;
locks; strict;
comment	@# @;


1.9
date	2017.03.01.00.05.21;	author bluhm;	state Exp;
branches;
next	1.8;
commitid	5O6VrHQNBYYOu82K;

1.8
date	2017.01.18.23.03.44;	author bluhm;	state Exp;
branches;
next	1.7;
commitid	CeKCY3OcQDpvUbop;

1.7
date	2016.11.17.17.27.05;	author bluhm;	state Exp;
branches;
next	1.6;
commitid	edSHo2pc3VKAdOlz;

1.6
date	2016.05.22.22.13.33;	author bluhm;	state Exp;
branches;
next	1.5;
commitid	1AiC2RYVGPeCEPmz;

1.5
date	2014.12.19.21.41.20;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	SeHiTyo2F64te6y4;

1.4
date	2013.07.23.22.25.49;	author bluhm;	state Exp;
branches;
next	1.3;

1.3
date	2012.01.23.18.46.17;	author bluhm;	state Exp;
branches;
next	1.2;

1.2
date	2012.01.11.21.37.44;	author bluhm;	state Exp;
branches;
next	1.1;

1.1
date	2012.01.10.17.21.52;	author bluhm;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Use consistent address schema with local and remote machine.  Fill
variables with example IPs from my daily test run.
@
text
@#!/usr/local/bin/python2.7

print "ping6 fragment that overlaps the first fragment with the head"

# |---------|
#      |XXXXXXXXX|
# |----|
#      |----|
#           |----|

import os
from addr import *
from scapy.all import *

pid=os.getpid()
eid=pid & 0xffff
payload="ABCDEFGHIJKLMNOP"
dummy="0123456701234567"
packet=IPv6(src=LOCAL_ADDR6, dst=REMOTE_ADDR6)/ \
    ICMPv6EchoRequest(id=eid, data=payload)
frag=[]
fid=pid & 0xffffffff
frag.append(IPv6ExtHdrFragment(nh=58, id=fid, m=1)/str(packet)[40:56])
frag.append(IPv6ExtHdrFragment(nh=58, id=fid, offset=1)/dummy)
frag.append(IPv6ExtHdrFragment(nh=58, id=fid, m=1)/str(packet)[40:48])
frag.append(IPv6ExtHdrFragment(nh=58, id=fid, offset=1, m=1)/str(packet)[48:56])
frag.append(IPv6ExtHdrFragment(nh=58, id=fid, offset=2)/str(packet)[56:64])
eth=[]
for f in frag:
	pkt=IPv6(src=LOCAL_ADDR6, dst=REMOTE_ADDR6)/f
	eth.append(Ether(src=LOCAL_MAC, dst=REMOTE_MAC)/pkt)

if os.fork() == 0:
	time.sleep(1)
	sendp(eth, iface=LOCAL_IF)
	os._exit(0)

ans=sniff(iface=LOCAL_IF, timeout=3, filter=
    "ip6 and src "+REMOTE_ADDR6+" and dst "+LOCAL_ADDR6+" and icmp6")
for a in ans:
	if a and a.type == ETH_P_IPV6 and \
	    ipv6nh[a.payload.nh] == 'ICMPv6' and \
	    icmp6types[a.payload.payload.type] == 'Echo Reply':
		id=a.payload.payload.id
		print "id=%#x" % (id)
		if id != eid:
			print "WRONG ECHO REPLY ID"
			exit(2)
		data=a.payload.payload.data
		print "payload=%s" % (data)
		if data == payload:
			exit(0)
		print "PAYLOAD!=%s" % (payload)
		exit(2)
print "NO ECHO REPLY"
exit(1)
@


1.8
log
@Do not use privileged or NFS source ports for UDP packets as inetd
ignores such packets.  This should avoid some sporadic failures.
While there, use variable names consistently in all tests.
@
text
@d19 2
a20 1
packet=IPv6(src=SRC_OUT6, dst=DST_IN6)/ICMPv6EchoRequest(id=eid, data=payload)
d30 2
a31 2
	pkt=IPv6(src=SRC_OUT6, dst=DST_IN6)/f
	eth.append(Ether(src=SRC_MAC, dst=DST_MAC)/pkt)
d35 1
a35 1
	sendp(eth, iface=SRC_IF)
d38 2
a39 2
ans=sniff(iface=SRC_IF, timeout=3, filter=
    "ip6 and src "+DST_IN6+" and dst "+SRC_OUT6+" and icmp6")
@


1.7
log
@Put all make targets in a loop and print a little more what each
IPv6 fragment header test is doing.
@
text
@d15 2
a16 1
pid=os.getpid() & 0xffff
d19 1
a19 1
packet=IPv6(src=SRC_OUT6, dst=DST_IN6)/ICMPv6EchoRequest(id=pid, data=payload)
d21 6
a26 5
frag.append(IPv6ExtHdrFragment(nh=58, id=pid, m=1)/str(packet)[40:56])
frag.append(IPv6ExtHdrFragment(nh=58, id=pid, offset=1)/dummy)
frag.append(IPv6ExtHdrFragment(nh=58, id=pid, m=1)/str(packet)[40:48])
frag.append(IPv6ExtHdrFragment(nh=58, id=pid, offset=1, m=1)/str(packet)[48:56])
frag.append(IPv6ExtHdrFragment(nh=58, id=pid, offset=2)/str(packet)[56:64])
d45 1
a45 1
		if id != pid:
@


1.6
log
@Fix tests:  Restrict getpid() to lower 16 bit so that it can still
be used as packet id.  Now scapy calls nexthopmtu with this name
explicitly in icmp structure.
@
text
@d2 2
a3 2
# send ping6 fragment that overlaps the first fragment with the head
# send complete packet fragments and check that they generate a reply.
@


1.5
log
@Use a simpler expression to check the ether type in scapy.  This
makes the fragment tests work on FreeBSD.  From Ilya Bakulin.
@
text
@d15 1
a15 1
pid=os.getpid()
@


1.4
log
@fix typo in fragment payload
@
text
@d38 1
a38 1
	if a and a.type == scapy.layers.dot11.ETHER_TYPES.IPv6 and \
@


1.3
log
@After overlapping IPv6 fragments have been dropped, new fragments
with the same id get reassembled into a valid packet.  Adapt test.
@
text
@d16 1
a16 1
payload="ABCDEFGHIJKLOMNO"
@


1.2
log
@Do not read dstaddr from command line, get it from addr.py.
@
text
@d3 1
a3 1
# send fragments to complete the packet and check that they are dropped
d49 1
a49 2
			print "ECHO REPLY"
			exit(1)
d52 2
a53 2
print "no echo reply"
exit(0)
@


1.1
log
@According to RFC 5722 we drop all IPv6 fragments that belong to a
packet with overlaps.  Adapt existing tests and add one more.
@
text
@a14 1
dstaddr=sys.argv[1]
d18 1
a18 1
packet=IPv6(src=SRC_OUT6, dst=dstaddr)/ICMPv6EchoRequest(id=pid, data=payload)
d27 1
a27 1
	pkt=IPv6(src=SRC_OUT6, dst=dstaddr)/f
d36 1
a36 1
    "ip6 and src "+dstaddr+" and dst "+SRC_OUT6+" and icmp6")
@

