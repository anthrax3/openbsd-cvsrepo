head	1.8;
access;
symbols
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.5.0.2
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.3.0.8
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.6
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.2
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2;
locks; strict;
comment	@# @;


1.8
date	2017.03.01.00.05.21;	author bluhm;	state Exp;
branches;
next	1.7;
commitid	5O6VrHQNBYYOu82K;

1.7
date	2017.01.18.23.03.44;	author bluhm;	state Exp;
branches;
next	1.6;
commitid	CeKCY3OcQDpvUbop;

1.6
date	2016.11.17.17.27.05;	author bluhm;	state Exp;
branches;
next	1.5;
commitid	edSHo2pc3VKAdOlz;

1.5
date	2016.05.22.22.13.33;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	1AiC2RYVGPeCEPmz;

1.4
date	2014.12.19.21.41.20;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	SeHiTyo2F64te6y4;

1.3
date	2013.07.23.22.25.49;	author bluhm;	state Exp;
branches;
next	1.2;

1.2
date	2012.01.11.21.37.44;	author bluhm;	state Exp;
branches;
next	1.1;

1.1
date	2012.01.06.21.52.15;	author bluhm;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Use consistent address schema with local and remote machine.  Fill
variables with example IPs from my daily test run.
@
text
@#!/usr/local/bin/python2.7

print "send 3 non-overlapping ping6 fragments in all possible orders"

# |----|
#      |----|
#           |----|

import os
from addr import *
from scapy.all import *

permute=[]
permute.append([0,1,2])
permute.append([0,2,1])
permute.append([1,0,2])
permute.append([2,0,1])
permute.append([1,2,0])
permute.append([2,1,0])

pid=os.getpid()
payload="ABCDEFGHIJKLMNOP"
for p in permute:
	pid += 1
	eid=pid & 0xffff
	packet=IPv6(src=LOCAL_ADDR6, dst=REMOTE_ADDR6)/ \
	    ICMPv6EchoRequest(id=eid, data=payload)
	frag=[]
	fid=pid & 0xffffffff
	frag.append(IPv6ExtHdrFragment(nh=58, id=fid, m=1)/ \
	    str(packet)[40:48])
	frag.append(IPv6ExtHdrFragment(nh=58, id=fid, offset=1, m=1)/ \
	    str(packet)[48:56])
	frag.append(IPv6ExtHdrFragment(nh=58, id=fid, offset=2)/ \
	    str(packet)[56:64])
	eth=[]
	for i in range(3):
		pkt=IPv6(src=LOCAL_ADDR6, dst=REMOTE_ADDR6)/frag[p[i]]
		eth.append(Ether(src=LOCAL_MAC, dst=REMOTE_MAC)/pkt)

	if os.fork() == 0:
		time.sleep(1)
		sendp(eth, iface=LOCAL_IF)
		os._exit(0)

	ans=sniff(iface=LOCAL_IF, timeout=3, filter=
	    "ip6 and src "+REMOTE_ADDR6+" and dst "+LOCAL_ADDR6+" and icmp6")
	for a in ans:
		if a and a.type == ETH_P_IPV6 and \
		    ipv6nh[a.payload.nh] == 'ICMPv6' and \
		    icmp6types[a.payload.payload.type] == 'Echo Reply':
			id=a.payload.payload.id
			print "id=%#x" % (id)
			if id != eid:
				print "WRONG ECHO REPLY ID"
				exit(2)
			data=a.payload.payload.data
			print "payload=%s" % (data)
			if data == payload:
				break
			print "PAYLOAD!=%s" % (payload)
			exit(1)
	else:
		print "NO ECHO REPLY"
		exit(2)
@


1.7
log
@Do not use privileged or NFS source ports for UDP packets as inetd
ignores such packets.  This should avoid some sporadic failures.
While there, use variable names consistently in all tests.
@
text
@d26 1
a26 1
	packet=IPv6(src=SRC_OUT6, dst=DST_IN6)/ \
d38 2
a39 2
		pkt=IPv6(src=SRC_OUT6, dst=DST_IN6)/frag[p[i]]
		eth.append(Ether(src=SRC_MAC, dst=DST_MAC)/pkt)
d43 1
a43 1
		sendp(eth, iface=SRC_IF)
d46 2
a47 2
	ans=sniff(iface=SRC_IF, timeout=3, filter=
	    "ip6 and src "+DST_IN6+" and dst "+SRC_OUT6+" and icmp6")
@


1.6
log
@Put all make targets in a loop and print a little more what each
IPv6 fragment header test is doing.
@
text
@d21 1
a21 1
pid=os.getpid() & 0xffff
d25 1
d27 1
a27 1
	    ICMPv6EchoRequest(id=pid, data=payload)
d29 2
a30 1
	frag.append(IPv6ExtHdrFragment(nh=58, id=pid, m=1)/ \
d32 1
a32 1
	frag.append(IPv6ExtHdrFragment(nh=58, id=pid, offset=1, m=1)/ \
d34 1
a34 1
	frag.append(IPv6ExtHdrFragment(nh=58, id=pid, offset=2)/ \
d54 1
a54 1
			if id != pid:
@


1.5
log
@Fix tests:  Restrict getpid() to lower 16 bit so that it can still
be used as packet id.  Now scapy calls nexthopmtu with this name
explicitly in icmp structure.
@
text
@d2 2
a3 1
# send 3 non-overlapping ping6 fragments in all possible orders
@


1.4
log
@Use a simpler expression to check the ether type in scapy.  This
makes the fragment tests work on FreeBSD.  From Ilya Bakulin.
@
text
@d20 1
a20 1
pid=os.getpid()
@


1.3
log
@fix typo in fragment payload
@
text
@d46 1
a46 1
		if a and a.type == scapy.layers.dot11.ETHER_TYPES.IPv6 and \
@


1.2
log
@Do not read dstaddr from command line, get it from addr.py.
@
text
@d21 1
a21 1
payload="ABCDEFGHIJKLOMNO"
@


1.1
log
@Add tests for IPv6 fragment reassembly.  Hand-crafted ping6
echo-request fragments are sent by scapy to the target machine.
There they get reassembled and a echo-reply comes back.  The ping6
payload is checked.
@
text
@a19 1
dstaddr=sys.argv[1]
a21 1

d24 1
a24 1
	packet=IPv6(src=SRC_OUT6, dst=dstaddr)/ \
d35 1
a35 1
		pkt=IPv6(src=SRC_OUT6, dst=dstaddr)/frag[p[i]]
d44 1
a44 1
	    "ip6 and src "+dstaddr+" and dst "+SRC_OUT6+" and icmp6")
@

