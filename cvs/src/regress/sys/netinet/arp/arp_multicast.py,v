head	1.2;
access;
symbols
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.1.0.4
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	bluhm_20151105:1.1.1.1
	bluhm:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2016.12.12.21.33.40;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	5DgFXtgdMpSKBBTv;

1.1
date	2015.11.05.01.49.12;	author bluhm;	state Exp;
branches
	1.1.1.1;
next	;
commitid	wFKigL0B7MsvNV9p;

1.1.1.1
date	2015.11.05.01.49.12;	author bluhm;	state Exp;
branches;
next	;
commitid	wFKigL0B7MsvNV9p;


desc
@@


1.2
log
@Set promiscuous mode during srp1() to receive the arp reply directed
to the ethernet multicast address.  This fixes the test on my
hardware setup, it was only passing in qemu before.  At least scapy
2.3.3p1 is needed to support the promisc=1 parameter here.
@
text
@#!/usr/local/bin/python2.7
# send Address Resolution Protocol Request with ethernet multicast sender
# expect Address Resolution Protocol response and check all fields
# RFC 826  An Ethernet Address Resolution Protocol
# Packet Generation

import os
from addr import *
from scapy.all import *

arp=ARP(op='who-has', hwsrc="33:33:33:33:33:33", psrc=LOCAL_ADDR,
    hwdst="ff:ff:ff:ff:ff:ff", pdst=REMOTE_ADDR)
eth=Ether(src=LOCAL_MAC, dst="ff:ff:ff:ff:ff:ff")/arp

e=srp1(eth, iface=LOCAL_IF, promisc=1, timeout=2)

if e and e.type == ETH_P_ARP:
	a=e.payload
	if a.hwtype != ARPHDR_ETHER:
		print "HWTYPE=%#0.4x != ARPHDR_ETHER" % (a.hwtype)
		exit(1)
	if a.ptype != ETH_P_IP:
		print "PTYPE=%#0.4x != ETH_P_IP" % (a.ptype)
		exit(1)
	if a.hwlen != 6:
		print "HWLEN=%d != 6" % (a.hwlen)
		exit(1)
	if a.plen != 4:
		print "PLEN=%d != 4" % (a.plen)
		exit(1)
	if a.op != 2:
		print "OP=%s != is-at" % (a.op)
		exit(1)
	if a.hwsrc != REMOTE_MAC:
		print "HWLOCAL=%s != REMOTE_MAC" % (a.hwsrc)
		exit(1)
	if a.psrc != REMOTE_ADDR:
		print "PLOCAL=%s != REMOTE_ADDR" % (a.psrc)
		exit(1)
	if a.hwdst != "33:33:33:33:33:33":
		print "HWREMOTE=%s != 33:33:33:33:33:33" % (a.hwdst)
		exit(1)
	if a.pdst != LOCAL_ADDR:
		print "PREMOTE=%s != LOCAL_ADDR" % (a.pdst)
		exit(1)
	print "arp reply"
	exit(0)

print "NO ARP REPLY"
exit(2)
@


1.1
log
@Initial revision
@
text
@d15 1
a15 1
e=srp1(eth, iface=LOCAL_IF, timeout=2)
@


1.1.1.1
log
@Add regression tests for the ARP implementation in the kernel.  Send
multiple ARP packets to a remote machine with Scapy.  Check ARP 
replies, table entries and log messages.  All log messages in 
in_arpinput() are generated.  Proxy ARP is also tested.
@
text
@@
