head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.1.0.6
	OPENBSD_6_2_BASE:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.8
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.4
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	bluhm_20151105:1.1.1.1
	bluhm:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2015.11.05.01.49.12;	author bluhm;	state Exp;
branches
	1.1.1.1;
next	;
commitid	wFKigL0B7MsvNV9p;

1.1.1.1
date	2015.11.05.01.49.12;	author bluhm;	state Exp;
branches;
next	;
commitid	wFKigL0B7MsvNV9p;


desc
@@



1.1
log
@Initial revision
@
text
@#!/usr/local/bin/python2.7
# send Gratuitous Address Resolution Protocol Reply
# expect no answer
# RFC 2002  IP Mobility Support
# 4.6. ARP, Proxy ARP, and Gratuitous ARP

import os
from addr import *
from scapy.all import *

arp=ARP(op='is-at', hwsrc=LOCAL_MAC, psrc=REMOTE_ADDR,
    hwdst=LOCAL_MAC, pdst=REMOTE_ADDR)
eth=Ether(src=LOCAL_MAC, dst="ff:ff:ff:ff:ff:ff")/arp

e=srp1(eth, iface=LOCAL_IF, timeout=2)

if e and e.type == ETH_P_ARP:
	a=e.payload
	a.show()
	print "ARP REPLY"
	exit(1)

print "no arp reply"
exit(0)
@


1.1.1.1
log
@Add regression tests for the ARP implementation in the kernel.  Send
multiple ARP packets to a remote machine with Scapy.  Check ARP 
replies, table entries and log messages.  All log messages in 
in_arpinput() are generated.  Proxy ARP is also tested.
@
text
@@
