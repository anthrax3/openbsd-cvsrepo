head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.6
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.4
	OPENBSD_6_1_BASE:1.4;
locks; strict;
comment	@# @;


1.4
date	2017.01.19.15.00.38;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	2HBNFHpffGEI4NUd;

1.3
date	2017.01.19.13.41.48;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	KNLNF7T5eUyhBmtZ;

1.2
date	2017.01.18.23.03.44;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	CeKCY3OcQDpvUbop;

1.1
date	2017.01.18.19.26.59;	author bluhm;	state Exp;
branches;
next	;
commitid	xgGC5bPElBQiKZYG;


desc
@@


1.4
log
@Our kernel does not generate IPv6 atomic fragments anymore.  Check
that the test does not receive any.
@
text
@#!/usr/local/bin/python2.7

import os
from addr import *
from scapy.all import *

e=Ether(src=LOCAL_MAC, dst=REMOTE_MAC)
ip6=IPv6(src=FAKE_NET_ADDR6, dst=REMOTE_ADDR6)
tport=os.getpid() & 0xffff

print "Send SYN packet, receive SYN+ACK."
syn=TCP(sport=tport, dport='chargen', seq=1, flags='S', window=(2**16)-1)
synack=srp1(e/ip6/syn, iface=LOCAL_IF, timeout=5)

if synack is None:
	print "ERROR: no SYN+ACK from chargen server received"
	exit(1)

print "Send ACK packet, receive chargen data."
ack=TCP(sport=synack.dport, dport=synack.sport, seq=2, flags='A',
    ack=synack.seq+1, window=(2**16)-1)
data=srp1(e/ip6/ack, iface=LOCAL_IF, timeout=5)

if data is None:
	print "ERROR: no data from chargen server received"
	exit(1)

print "Fill our receive buffer."
time.sleep(1)

print "Send ICMP6 packet too big packet with MTU 1272."
icmp6=ICMPv6PacketTooBig(mtu=1272)/data.payload
# srp1 cannot be used, fragment answer will not match outgoing ICMP6 packet
if os.fork() == 0:
	time.sleep(1)
	sendp(e/IPv6(src=LOCAL_ADDR6, dst=REMOTE_ADDR6)/icmp6, iface=LOCAL_IF)
	os._exit(0)

print "Path MTU discovery will not resend data, ICMP6 packet is ignored."
ans=sniff(iface=LOCAL_IF, timeout=3, filter=
    "ip6 and src "+ip6.dst+" and dst "+ip6.src+" and proto ipv6-frag")

print "IPv6 atomic fragments must not be generated."
frag=None
for a in ans:
	fh=a.payload.payload
	if fh.offset != 0 or fh.nh != (ip6/syn).nh:
		continue
	th=fh.payload
	if th.sport != syn.dport or th.dport != syn.sport:
		continue
	frag=a
	break

if frag is not None:
	print "ERROR: matching IPv6 fragment TCP answer found"
	exit(1)

print "Send ACK again to trigger retransmit."
data=srp1(e/ip6/ack, iface=LOCAL_IF, timeout=5)

if data is None:
	print "ERROR: no data retransmit from chargen server received"
	exit(1)

print "Cleanup the other's socket with a reset packet."
rst=TCP(sport=synack.dport, dport=synack.sport, seq=2, flags='AR',
    ack=synack.seq+1)
sendp(e/ip6/rst, iface=LOCAL_IF)

len = data.plen + len(IPv6())
print "len=%d" % len
if len != 1500:
	print "ERROR: TCP data packet len is %d, expected 1500." % len
	exit(1)

exit(0)
@


1.3
log
@Sending a PMTU ICMP packet will trigger a TCP retransmit.  The test
assumed that it would have to send an additional ACK for that.
There was a race where the test could miss the TCP retransmit before
it did send the ACK.  Sniff for the TCP retransmit before sending
the ICMP packet and do not send the ACK.
@
text
@d33 1
a33 1
# srp1 cannot be used, fragment answer will not match outgoing icmp packet
d39 1
a39 1
print "Path MTU discovery will resend first data with length 1272."
d43 2
d54 10
a63 2
else:
	print "ERROR: no fragement retransmit from chargen server received"
d71 4
a74 13
if frag.offset != 0:
	print "ERROR: TCP fragment is not atomic, offset is %d." % frag.offset
	exit(1)

if frag.m != 0:
	print "ERROR: TCP fragment is not atomic, more fragment bit is set."
	exit(1)

print "Atomic fragment contains 8 octet header, so expected len is 1280"
flen = frag.plen + len(IPv6())
print "flen=%d" % flen
if flen != 1280:
	print "ERROR: TCP atomic fragment len is %d, expected 1280." % flen
@


1.2
log
@Do not use privileged or NFS source ports for UDP packets as inetd
ignores such packets.  This should avoid some sporadic failures.
While there, use variable names consistently in all tests.
@
text
@d33 1
a33 4
sendp(e/IPv6(src=LOCAL_ADDR6, dst=REMOTE_ADDR6)/icmp6, iface=LOCAL_IF)

print "Path MTU discovery will resend first data with length 1272."
# srp1 cannot be used, fragment answer will not match on outgoing udp packet
d36 1
a36 1
	sendp(e/ip6/ack, iface=LOCAL_IF)
d39 1
@


1.1
log
@Add tests that generate IPv6 atomic fragments for UDP and TCP by
sending an ICMP6 too big packet with MTU 1272.
@
text
@d9 1
a9 1
port=os.getpid() & 0xffff
d12 1
a12 1
syn=TCP(sport=port, dport='chargen', seq=1, flags='S', window=(2**16)-1)
@

