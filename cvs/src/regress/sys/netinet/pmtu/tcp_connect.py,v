head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.6
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.4
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.1.1.1.0.2
	OPENBSD_6_0_BASE:1.1.1.1
	bluhm_20160711:1.1.1.1
	bluhm:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2017.01.19.15.00.38;	author bluhm;	state Exp;
branches;
next	1.5;
commitid	2HBNFHpffGEI4NUd;

1.5
date	2017.01.19.13.41.48;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	KNLNF7T5eUyhBmtZ;

1.4
date	2017.01.18.23.03.44;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	CeKCY3OcQDpvUbop;

1.3
date	2017.01.18.19.26.59;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	xgGC5bPElBQiKZYG;

1.2
date	2016.12.13.00.19.05;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	07EgSBbmWY1CSIHP;

1.1
date	2016.07.11.13.15.20;	author bluhm;	state Exp;
branches
	1.1.1.1;
next	;
commitid	o9Py7Outx9ANKkwG;

1.1.1.1
date	2016.07.11.13.15.20;	author bluhm;	state Exp;
branches;
next	;
commitid	o9Py7Outx9ANKkwG;


desc
@@


1.6
log
@Our kernel does not generate IPv6 atomic fragments anymore.  Check
that the test does not receive any.
@
text
@#!/usr/local/bin/python2.7

import os
from addr import *
from scapy.all import *

ip=IP(src=FAKE_NET_ADDR, dst=REMOTE_ADDR)
tport=os.getpid() & 0xffff

print "Send SYN packet, receive SYN+ACK."
syn=TCP(sport=tport, dport='chargen', seq=1, flags='S', window=(2**16)-1)
synack=sr1(ip/syn, iface=LOCAL_IF, timeout=5)

if synack is None:
	print "ERROR: no SYN+ACK from chargen server received"
	exit(1)

print "Send ACK packet, receive chargen data."
ack=TCP(sport=synack.dport, dport=synack.sport, seq=2, flags='A',
    ack=synack.seq+1, window=(2**16)-1)
data=sr1(ip/ack, iface=LOCAL_IF, timeout=5)

if data is None:
	print "ERROR: no data from chargen server received"
	exit(1)

print "Fill our receive buffer."
time.sleep(1)

print "Send ICMP fragmentation needed packet with MTU 1300."
icmp=ICMP(type="dest-unreach", code="fragmentation-needed",
    nexthopmtu=1300)/data
# sr1 cannot be used, TCP data will not match outgoing ICMP packet
if os.fork() == 0:
	time.sleep(1)
	send(IP(src=LOCAL_ADDR, dst=REMOTE_ADDR)/icmp, iface=LOCAL_IF)
	os._exit(0)

print "Path MTU discovery will resend first data with length 1300."
ans=sniff(iface=LOCAL_IF, timeout=3, count=1, filter=
    "ip and src %s and tcp port %u and dst %s and tcp port %u" %
    (ip.dst, syn.dport, ip.src, syn.sport))

if len(ans) == 0:
	print "ERROR: no data retransmit from chargen server received"
	exit(1)
data=ans[0]

print "Cleanup the other's socket with a reset packet."
rst=TCP(sport=synack.dport, dport=synack.sport, seq=2, flags='AR',
    ack=synack.seq+1)
send(ip/rst, iface=LOCAL_IF)

len = data.len
print "len=%d" % len
if len != 1300:
	print "ERROR: TCP data packet len is %d, expected 1300." % len
	exit(1)

exit(0)
@


1.5
log
@Sending a PMTU ICMP packet will trigger a TCP retransmit.  The test
assumed that it would have to send an additional ACK for that.
There was a race where the test could miss the TCP retransmit before
it did send the ACK.  Sniff for the TCP retransmit before sending
the ICMP packet and do not send the ACK.
@
text
@d33 1
a33 1
# sr1 cannot be used, tcp data will not match outgoing icmp packet
d59 1
@


1.4
log
@Do not use privileged or NFS source ports for UDP packets as inetd
ignores such packets.  This should avoid some sporadic failures.
While there, use variable names consistently in all tests.
@
text
@d33 5
a37 1
send(IP(src=LOCAL_ADDR, dst=REMOTE_ADDR)/icmp, iface=LOCAL_IF)
d40 3
a42 1
data=sr1(ip/ack, iface=LOCAL_IF, timeout=5)
d44 1
a44 1
if data is None:
d47 1
@


1.3
log
@Add tests that generate IPv6 atomic fragments for UDP and TCP by
sending an ICMP6 too big packet with MTU 1272.
@
text
@d8 1
a8 1
port=os.getpid() & 0xffff
d11 1
a11 1
syn=TCP(sport=port, dport='chargen', seq=1, flags='S', window=(2**16)-1)
@


1.2
log
@Print better error messages in case an expected packet is missing.
@
text
@d18 1
a18 1
print "Send ack packet, receive chargen data."
@


1.1
log
@Initial revision
@
text
@d14 4
d23 4
d37 4
@


1.1.1.1
log
@Add regression tests for the path MTU discovery implementation in 
the kernel.  Generate TCP and TCP6 and UDP6 packets with Scapy, 
check the kernel's reaction to ICMP fragmentation needed and ICMP6
packet too big.
OK mpi@@
@
text
@@
