head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.6
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.4
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.1.1.1.0.2
	OPENBSD_6_0_BASE:1.1.1.1
	bluhm_20160711:1.1.1.1
	bluhm:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2017.01.19.15.00.38;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	2HBNFHpffGEI4NUd;

1.4
date	2017.01.18.23.03.44;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	CeKCY3OcQDpvUbop;

1.3
date	2017.01.18.19.26.59;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	xgGC5bPElBQiKZYG;

1.2
date	2016.12.13.00.19.05;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	07EgSBbmWY1CSIHP;

1.1
date	2016.07.11.13.15.20;	author bluhm;	state Exp;
branches
	1.1.1.1;
next	;
commitid	o9Py7Outx9ANKkwG;

1.1.1.1
date	2016.07.11.13.15.20;	author bluhm;	state Exp;
branches;
next	;
commitid	o9Py7Outx9ANKkwG;


desc
@@


1.5
log
@Our kernel does not generate IPv6 atomic fragments anymore.  Check
that the test does not receive any.
@
text
@#!/usr/local/bin/python2.7

import os
import string
import random
from addr import *
from scapy.all import *

e=Ether(src=LOCAL_MAC, dst=REMOTE_MAC)
ip6=IPv6(src=FAKE_NET_ADDR6, dst=REMOTE_ADDR6)
uport=os.getpid() & 0xffff
# inetd ignores UDP packets from privileged port or nfs
if uport < 1024 or uport == 2049:
	uport+=1024

print "Send UDP packet with 1400 octets payload, receive echo."
data=''.join(random.choice(string.ascii_uppercase + string.ascii_lowercase +
    string.digits) for _ in range(1400))
udp=UDP(sport=uport, dport='echo')/data
echo=srp1(e/ip6/udp, iface=LOCAL_IF, timeout=5)

if echo is None:
	print "ERROR: no UDP answer from echo server received"
	exit(1)

print "Send ICMP6 packet too big packet with MTU 1300."
icmp6=ICMPv6PacketTooBig(mtu=1300)/echo.payload
sendp(e/IPv6(src=LOCAL_ADDR6, dst=REMOTE_ADDR6)/icmp6, iface=LOCAL_IF)

print "Clear route cache at echo socket by sending from different address."
sendp(e/IPv6(src=LOCAL_ADDR6, dst=REMOTE_ADDR6)/udp, iface=LOCAL_IF)

print "Path MTU discovery will send UDP fragment with maximum length 1300."
# srp1 cannot be used, fragment answer will not match on outgoing UDP packet
if os.fork() == 0:
	time.sleep(1)
	sendp(e/ip6/udp, iface=LOCAL_IF)
	os._exit(0)

ans=sniff(iface=LOCAL_IF, timeout=3, filter=
    "ip6 and src "+ip6.dst+" and dst "+ip6.src+" and proto ipv6-frag")

for a in ans:
	fh=a.payload.payload
	if fh.offset != 0 or fh.nh != (ip6/udp).nh:
		continue
	uh=fh.payload
	if uh.sport != udp.dport or uh.dport != udp.sport:
		continue
	frag=a
	break
else:
	print "ERROR: no matching IPv6 fragment UDP answer found"
	exit(1)

print "UDP echo has IPv6 and UDP header, so expected payload len is 1448."
elen = echo.plen + len(IPv6())
print "elen=%d" % elen
if elen != 1448:
	print "ERROR: UDP echo payload len is %d, expected 1448." % elen
	exit(1)

print "Fragments contain multiple of 8 octets, so expected len is 1296."
flen = frag.plen + len(IPv6())
print "flen=%d" % flen
if flen != 1296:
	print "ERROR: UDP fragment len is %d, expected 1296." % flen
	exit(1)

exit(0)
@


1.4
log
@Do not use privileged or NFS source ports for UDP packets as inetd
ignores such packets.  This should avoid some sporadic failures.
While there, use variable names consistently in all tests.
@
text
@d34 1
a34 1
# srp1 cannot be used, fragment answer will not match on outgoing udp packet
d56 1
a56 1
print "UDP echo has IPv6 and UDP header, so expected payload len is 1448"
d63 1
a63 1
print "Fragments contain multiple of 8 octets, so expected len is 1296"
@


1.3
log
@Add tests that generate IPv6 atomic fragments for UDP and TCP by
sending an ICMP6 too big packet with MTU 1272.
@
text
@d11 4
a14 4
port=os.getpid() & 0xffff
# inetd ignores packets from privileged port or nfs
if port < 1024 or port == 2049:
	port+=1024
d19 1
a19 1
udp=UDP(sport=port, dport='echo')/data
@


1.2
log
@Print better error messages in case an expected packet is missing.
@
text
@d12 3
d60 1
a60 1
	print "ERROR: UDP echo paylod len is %d, expected 1448." % elen
@


1.1
log
@Initial revision
@
text
@d19 4
@


1.1.1.1
log
@Add regression tests for the path MTU discovery implementation in 
the kernel.  Generate TCP and TCP6 and UDP6 packets with Scapy, 
check the kernel's reaction to ICMP fragmentation needed and ICMP6
packet too big.
OK mpi@@
@
text
@@
