head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.4
	OPENBSD_6_2_BASE:1.2
	bluhm_20170907:1.1.1.1
	bluhm:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2017.09.07.19.00.26;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	QGdsdG3K0GwPkf2q;

1.1
date	2017.09.07.15.09.00;	author bluhm;	state Exp;
branches
	1.1.1.1;
next	;
commitid	UWCvybRFQoTa62xl;

1.1.1.1
date	2017.09.07.15.09.00;	author bluhm;	state Exp;
branches;
next	;
commitid	UWCvybRFQoTa62xl;


desc
@@


1.2
log
@Link regress/sys/netinet/frag to build.  Get IPv4 and IPv6 fragment
tests into common shape.  Add some missing test cases.
@
text
@#!/usr/local/bin/python2.7

print "udp fragments with splitted payload"

# |--------|
#          |----|

import os
from addr import *
from scapy.all import *

pid=os.getpid()
uport=pid & 0xffff
# inetd ignores UDP packets from privileged port or nfs
if uport < 1024 or uport == 2049:
	uport+=1024
payload="ABCDEFGHIJKLMNOP"
packet=IP(src=LOCAL_ADDR, dst=REMOTE_ADDR)/ \
    UDP(sport=uport, dport=7)/payload
frag=[]
fid=pid & 0xffff
frag.append(IP(src=LOCAL_ADDR, dst=REMOTE_ADDR, proto=17, id=fid,
    flags='MF')/str(packet)[20:36])
frag.append(IP(src=LOCAL_ADDR, dst=REMOTE_ADDR, proto=17, id=fid,
    frag=2)/str(packet)[36:44])
eth=[]
for f in frag:
	eth.append(Ether(src=LOCAL_MAC, dst=REMOTE_MAC)/f)

if os.fork() == 0:
	time.sleep(1)
	sendp(eth, iface=LOCAL_IF)
	os._exit(0)

ans=sniff(iface=LOCAL_IF, timeout=3, filter=
    "ip and src "+REMOTE_ADDR+" and dst "+LOCAL_ADDR+" and udp")
for a in ans:
	if a and a.type == ETH_P_IP and \
	    a.payload.proto == 17 and \
	    a.payload.frag == 0 and a.payload.flags == 0 and \
	    a.payload.payload.sport == 7:
		port=a.payload.payload.dport
		print "port=%d" % (port)
		if port != uport:
			print "WRONG UDP ECHO REPLY PORT"
			exit(2)
		data=a.payload.payload.payload.load
		print "payload=%s" % (data)
		if data == payload:
			exit(0)
		print "PAYLOAD!=%s" % (payload)
		exit(1)
print "NO UDP ECHO REPLY"
exit(2)
@


1.1
log
@Initial revision
@
text
@d22 4
a25 4
frag.append(IP(src=LOCAL_ADDR, dst=REMOTE_ADDR, proto=17, id=fid, flags='MF')/ \
    str(packet)[20:36])
frag.append(IP(src=LOCAL_ADDR, dst=REMOTE_ADDR, proto=17, id=fid, frag=2)/ \
    str(packet)[36:44])
@


1.1.1.1
log
@Copy IPv6 fragment test cases to IPv4 and adapt to the different 
behavior.  All tests are run once with pf fragment reassembly and
once with pf disabled and IP input reassembly.  Three sub tests are
currently disabled as the IP stack behaves differently than pf.
@
text
@@
