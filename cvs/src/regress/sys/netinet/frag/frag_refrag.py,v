head     1.1;
branch   1.1.1;
access   ;
symbols  bluhm_20170907:1.1.1.1 bluhm:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     2017.09.07.15.09.01;  author bluhm;  state Exp;
branches 1.1.1.1;
next     ;
commitid        UWCvybRFQoTa62xl;

1.1.1.1
date     2017.09.07.15.09.01;  author bluhm;  state Exp;
branches ;
next     ;
commitid        UWCvybRFQoTa62xl;


desc
@@



1.1
log
@Initial revision
@
text
@#!/usr/local/bin/python2.7

print "fragments of a large packet that has to be refragmented by reflector"

# |--------|
#          |------------------|
#                              ...
#                                 |------------------|
#                                                    |----|

import os
from addr import *
from scapy.all import *

pid=os.getpid()
eid=pid & 0xffff
payload=100 * "ABCDEFGHIJKLMNOP"
packet=IP(src=LOCAL_ADDR, dst=REMOTE_ADDR)/ \
    ICMP(type='echo-request', id=eid)/payload
request_cksum=ICMP(str(packet.payload)).chksum
print "request cksum=%#x" % (request_cksum)
frag=[]
fid=pid & 0xffff
frag.append(IP(src=LOCAL_ADDR, dst=REMOTE_ADDR, proto=1, id=fid, flags='MF')/
    str(packet)[20:36])
offset=2
chunk=4
while 40+8*(offset+chunk) < len(payload):
	frag.append(IP(src=LOCAL_ADDR, dst=REMOTE_ADDR, proto=1, id=fid,
	    flags='MF', frag=offset)/
	    str(packet)[20+(8*offset):20+8*(offset+chunk)])
	offset+=chunk
frag.append(IP(src=LOCAL_ADDR, dst=REMOTE_ADDR, proto=1, id=fid, frag=offset)/
    str(packet)[20+(8*offset):])
eth=[]
for f in frag:
	eth.append(Ether(src=LOCAL_MAC, dst=REMOTE_MAC)/f)

if os.fork() == 0:
	time.sleep(1)
	sendp(eth, iface=LOCAL_IF)
	os._exit(0)

ans=sniff(iface=LOCAL_IF, timeout=3, filter=
    "ip and src "+REMOTE_ADDR+" and dst "+LOCAL_ADDR+" and icmp")
for a in ans:
	if a and a.type == ETH_P_IP and \
	    a.payload.proto == 1 and \
	    a.payload.frag == 0 and a.payload.flags == 1 and \
	    icmptypes[a.payload.payload.type] == 'echo-reply':
		id=a.payload.payload.id
		print "id=%#x" % (id)
		if id != eid:
			print "WRONG ECHO REPLY ID"
			exit(2)
		reply_cksum=a.payload.payload.chksum
		print "reply cksum=%#x" % (reply_cksum)
		# change request checksum incrementaly and check with reply
		diff_cksum=~(~reply_cksum+~(~request_cksum+~0x0800+0x0000))
		if diff_cksum != -1:
			print "CHECKSUM ERROR diff cksum=%#x" % (diff_cksum)
			exit(1)
		exit(0)
print "NO ECHO REPLY"
exit(2)
@


1.1.1.1
log
@Copy IPv6 fragment test cases to IPv4 and adapt to the different 
behavior.  All tests are run once with pf fragment reassembly and
once with pf disabled and IP input reassembly.  Three sub tests are
currently disabled as the IP stack behaves differently than pf.
@
text
@@
