head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.2
	OPENBSD_6_2_BASE:1.3;
locks; strict;
comment	@# @;


1.3
date	2017.08.15.17.16.39;	author sf;	state Exp;
branches;
next	1.2;
commitid	dfMjSpxfupSDxEgA;

1.2
date	2017.05.29.13.49.40;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	uvGrUDDpsVmttNVC;

1.1
date	2017.05.29.11.01.16;	author sf;	state Exp;
branches;
next	;
commitid	FXwPKnNAsiqtDvGB;


desc
@@


1.3
log
@Add test cases for msdosfs bug

Add a test that writes a big file, reads it again, and compares the result.
This detects the bug that briefly was in msdosfs.

Also add tests that create lots of files in a directory. Do this in the root
dir and a subdir because these work completely differently on msdosfs.  Need to
enlarge the used disk images for this test.

ok bluhm@@
@
text
@# $OpenBSD: Makefile.inc,v 1.2 2017/05/29 13:49:40 bluhm Exp $

PERL_REQUIRE != perl -e 'eval { require File::Slurp } or print $$@@'

TESTS1=		create read mmap
TESTS2=		many_files_root many_files_subdir file_write
TESTS= ${TESTS1} ${TESTS2}

FILEOPS_MNT=	/mnt/regress-fileops
FILEOPS_PROG=	${.OBJDIR}/../fileops
CLEANFILES=	diskimage stamp-*

.poison !defined (MOUNT)
.poison !defined (NEWFS)

.PHONY: disk mount unconfig clean

disk: unconfig
	dd if=/dev/urandom of=diskimage bs=1M count=64
	vnconfig vnd0 diskimage
	${NEWFS} /dev/rvnd0c

mount: disk
	mkdir -p ${FILEOPS_MNT}
	${MOUNT} /dev/vnd0c ${FILEOPS_MNT}

unconfig:
	-umount -f /dev/vnd0c 2>/dev/null || true
	-rmdir ${FILEOPS_MNT} 2>/dev/null || true
	-vnconfig -u vnd0 2>/dev/null || true
	-rm -f stamp-setup diskimage

stamp-setup:
	@@echo '\n======== $@@ ========'
	${.MAKE} -C ${.CURDIR} mount
	date >$@@

${.OBJDIR}/../fileops:
	${.MAKE} -C ${.CURDIR}/.. fileops

.for t in ${TESTS1}
REGRESS_TARGETS+=	run-regress-${t}
run-regress-${t}: stamp-setup ${.OBJDIR}/../fileops
	@@echo '\n======== $@@ ========'
	cd ${FILEOPS_MNT} && \
	    ${FILEOPS_PROG} ${t} ${FILEOPS_MNT}/file
.endfor

.for t in ${TESTS2}
REGRESS_TARGETS+=	run-regress-${t}
.if ! empty(PERL_REQUIRE)
run-regress-${t}:
	@@echo "${PERL_REQUIRE}"
	@@echo "Install the p5-File-Slurp package to run the fileops ${t} subtest"
	@@echo SKIPPED
.else
run-regress-${t}: stamp-setup
	@@echo '\n======== $@@ ========'
	perl ${.CURDIR}/../fileops2.pl ${t} ${FILEOPS_MNT}
.endif
.endfor

REGRESS_TARGETS+=	run-regress-cleanup
run-regress-cleanup:
	@@echo '\n======== $@@ ========'
	umount ${FILEOPS_MNT}
	${.MAKE} -C ${.CURDIR} unconfig
@


1.2
log
@Minor regress test cleanup.
OK sf@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.inc,v 1.1 2017/05/29 11:01:16 sf Exp $
d3 5
a7 1
TESTS=		create read mmap
d19 1
a19 1
	dd if=/dev/urandom of=diskimage bs=1M count=32
d41 1
a41 1
.for t in ${TESTS}
d47 14
@


1.1
log
@Regress test for sparse files & mmap with different FSs

This test creates a file with a hole in the middle and then checks that
when reading or mmaping the whole file, the data is correct.

This catches the bug introduced by the
"Implement VFS read clustering for MSDOSFS" commit that hat to be
reverted.

For now, we run the test with FAT16, FAT32, FFS

With much advice from bluhm@@
@
text
@d1 1
a1 1
# $OpenBSD$
d7 1
a7 3
IMG=		${.OBJDIR}/diskimage
CLEANFILES=	${IMG} stamp-*

d15 2
a16 2
	dd if=/dev/urandom of=${IMG} bs=1M count=32
	vnconfig vnd0 ${IMG}
d27 1
a27 1
	-rm -f stamp-setup ${IMG}
@

