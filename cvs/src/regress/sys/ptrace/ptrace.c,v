head	1.8;
access;
symbols
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.7.0.10
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.8
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.6
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.4
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.6.0.4
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.5.0.18
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.16
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.14
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.12
	OPENBSD_5_0:1.5.0.10
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.8
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.6
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.4
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.4.0.22
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.20
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.18
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.16
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.14
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.12
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.10
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.8
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.6
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.4
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.2
	OPENBSD_3_5_BASE:1.4;
locks; strict;
comment	@ * @;


1.8
date	2016.09.01.11.01.42;	author guenther;	state Exp;
branches;
next	1.7;
commitid	x8hPjOx9QTXwJkWj;

1.7
date	2014.03.18.22.36.30;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2014.01.10.14.16.42;	author jsing;	state Exp;
branches;
next	1.5;

1.5
date	2009.03.14.16.54.26;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2004.03.03.23.13.49;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2004.03.03.22.45.22;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.28.02.33.28;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.31.22.09.35;	author miod;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Delete sparc and vax bits
@
text
@/*	$OpenBSD: ptrace.c,v 1.7 2014/03/18 22:36:30 miod Exp $	*/
/*
 * Copyright (c) 2004, Mark Kettenis.
 * Copyright (c) 2004, Miodrag Vallat.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/ptrace.h>
#include <sys/wait.h>

#include <machine/reg.h>

#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

/*
 * This tests checks whether ptrace will correctly cope with unaligned pc.
 */
int
main(void)
{
	pid_t pid;
	int status;

	pid = fork();
	if (pid == 0) {
		ptrace(PT_TRACE_ME, 0, 0, 0);
		raise(SIGTRAP);
		exit(EXIT_FAILURE);
	} else {
		struct reg regs;

		waitpid(pid, &status, 0);
		ptrace(PT_GETREGS, pid, (caddr_t)&regs, 0);

		/*
		 * Make sure amd64 is tested before i386
		 */

#if defined(__alpha__)
		regs.r_regs[R_ZERO]|= 0x07;
#elif defined(__x86_64__)
		regs.r_rip |= 0x07;
#elif defined(__arm__)
		regs.r_pc |= 0x03;
#elif defined(__hppa__)
		regs.r_pcoqh |= 0x03;
		regs.r_pcoqt |= 0x03;
#elif defined(__i386__)
		regs.r_eip |= 0x03;
#elif defined(__mips64__)
		regs.r_regs[PC] |= 0x03;
#elif defined(__powerpc__)
		regs.pc |= 0x03;
#elif defined(__sh__)
		regs.r_spc |= 0x01;
#elif defined( __sparcv9__)
		regs.r_pc |= 0x07;
		regs.r_npc |= 0x07;
#elif defined( __m88k__)
		/*
		 * The following code is for 88100 only, but should work with
		 * 88110 too, even though it sets the DELAY bit in exip.
		 */
		regs.sxip |= 0x03;
		regs.snip |= 0x03;
		regs.sfip |= 0x03;
#endif
		ptrace(PT_SETREGS, pid, (caddr_t)&regs, 0);
		ptrace(PT_CONTINUE, pid, (caddr_t)1, 0);
	}
	exit(EXIT_SUCCESS);
}
@


1.7
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@d1 1
a1 1
/*	$OpenBSD: ptrace.c,v 1.6 2014/01/10 14:16:42 jsing Exp $	*/
a40 2
 *
 * Platforms known to fail at the moment are: sparc.
d60 1
a60 2
		 * Make sure amd64 is tested before i386,
		 * and sparc64 before sparc.
a82 3
#elif defined(__sparc__)
		regs.r_pc |= 0x03;
		regs.r_npc |= 0x03;
a90 2
#elif defined(__vax__)
		regs.pc |= 0x03;
@


1.6
log
@Make this work on hppa.
@
text
@d1 1
a1 1
/*	$OpenBSD: ptrace.c,v 1.4 2004/03/03 23:13:49 miod Exp $	*/
a70 2
		regs.r_pc |= 0x03;
#elif defined(__m68k__)
@


1.5
log
@Add mips64 and sh support to this test.
@
text
@d75 2
a76 2
		regs.r_pc |= 0x03;
		regs.r_npc |= 0x03;
@


1.4
log
@... and add alpha too, which I forgot earlier.
@
text
@d1 1
a1 1
/*	$OpenBSD: ptrace.c,v 1.3 2004/03/03 22:45:22 miod Exp $	*/
d42 1
a42 1
 * Platforms known to fail at the moment are: sparc, m68060.
d79 2
d83 2
d94 1
a94 3
		 * 88110 too, as it does not set the DELAY bit in exip.
		 * Though we might want to test the behaviour with delay set
		 * in exip too...
@


1.3
log
@Add arm to the victims.
@
text
@d1 1
a1 1
/*	$OpenBSD: ptrace.c,v 1.2 2004/02/28 02:33:28 deraadt Exp $	*/
d66 3
a68 1
#if defined(__x86_64__)
@


1.2
log
@struct reg changed
@
text
@d1 1
a1 1
/*	$OpenBSD: ptrace.c,v 1.1 2004/01/31 22:09:35 miod Exp $	*/
d68 2
@


1.1
log
@Simple unaligned-pc ptrace evil test.

Code initially for sparc from Mark Kettenis, KNF and other architectures
snippets by yours truly.

Regress at your own risc on sparc and m68060 for now.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d67 1
a67 1
		regs.regs[tRIP] |= 0x07;
@

