head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.2
	OPENBSD_6_1_BASE:1.2
	bluhm_20170113:1.1.1.1
	bluhm:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2017.01.13.01.33.14;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	Fnujr5zqs4CdXD6a;

1.1
date	2017.01.13.01.01.19;	author bluhm;	state Exp;
branches
	1.1.1.1;
next	;
commitid	H6ck70du9VfL32Yl;

1.1.1.1
date	2017.01.13.01.01.19;	author bluhm;	state Exp;
branches;
next	;
commitid	H6ck70du9VfL32Yl;


desc
@@


1.2
log
@Make mount points and makefiles for file system tests consistent.
Link tests to the build.
@
text
@/*	$OpenBSD$	*/

#include <sys/param.h>
#include <sys/mman.h>
#include <sys/queue.h>
#include <sys/socket.h>
#include <sys/sysctl.h>

#include <netinet/in.h>
#include <netinet/tcp.h>
#include <netinet/tcp_seq.h>
#include <netinet/tcp_timer.h>
#include <netinet/tcp_var.h>

#include <err.h>
#include <fcntl.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>

#define FILE	"sysctl-net.inet.tcp.always_keepalive"
#define CLIENT	"/mnt/regress-nfs-client"
#define SERVER	"/mnt/regress-nfs-server"

int
main(void)
{
	char *p, path[PATH_MAX];
	int mib[] = { CTL_NET, PF_INET, IPPROTO_TCP, TCPCTL_ALWAYS_KEEPALIVE };
	u_int miblen = sizeof(mib) / sizeof(mib[0]);
	int fd, val;
	size_t len;

	/*
	 * Get current value of sysctl net.inet.tcp.always_keepalive
	 * and write it into a file on the NFS server.
	 */
	snprintf(path, sizeof(path), "%s/%s", SERVER, FILE);
	if ((fd = open(path, O_WRONLY|O_CREAT|O_TRUNC, 0777)) == -1)
		err(1, "open write '%s'", path);
	len = sizeof(int);
	if (sysctl(mib, miblen, &val, &len, NULL, 0) == -1)
		err(1, "sysctl get keepalive");
	if (len != sizeof(int))
		errx(1, "len is not %zu: %zu", sizeof(int), len);
	if (write(fd, &val, len) == -1)
		err(1, "write");
	if (close(fd) == -1)
		err(1, "close write");

	/*
	 * Map file on NFS client and read value to
	 * sysctl net.inet.tcp.always_keepalive.
	 */
	snprintf(path, sizeof(path), "%s/%s", CLIENT, FILE);
	if ((fd = open(path, O_RDWR)) == -1)
		err(1, "open mmap '%s'", path);
	p = mmap(NULL, len, PROT_READ|PROT_WRITE, MAP_SHARED, fd, 0);
	if (p == MAP_FAILED)
		err(1, "mmap");
	if (sysctl(mib, miblen, NULL, 0, p, sizeof(int)) == -1)
		err(1, "sysctl set keepalive");
	if (close(fd) == -1)
		err(1, "close mmap");

	return (0);
}
@


1.1
log
@Initial revision
@
text
@d1 2
d23 2
a24 2
#define CLIENT	"/mnt/nfs-client"
#define SERVER	"/mnt/nfs-server"
@


1.1.1.1
log
@Use a NFS mount via loopback for testing file system operations.
By changing files directly on the server and accessing them on the
client or vice versa, specific kernel behavior can be triggered.
Especially using file mmap(2) over NFS is tested.
@
text
@@
