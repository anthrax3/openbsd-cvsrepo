head	1.10;
access;
symbols;
locks; strict;
comment	@# @;


1.10
date	2015.10.09.06.44.14;	author semarie;	state dead;
branches;
next	1.9;
commitid	OMHrQoEqoUBdOfmt;

1.9
date	2015.10.06.15.45.31;	author semarie;	state Exp;
branches;
next	1.8;
commitid	kygDv7OutdysOJJQ;

1.8
date	2015.10.06.15.24.54;	author semarie;	state Exp;
branches;
next	1.7;
commitid	HTnJdT3baTvUm83F;

1.7
date	2015.09.30.11.36.07;	author semarie;	state Exp;
branches;
next	1.6;
commitid	TMIPnGR2J26p7mlU;

1.6
date	2015.09.28.15.40.18;	author semarie;	state Exp;
branches;
next	1.5;
commitid	r1EbZLbyjDs5Df4X;

1.5
date	2015.09.27.17.55.39;	author semarie;	state Exp;
branches;
next	1.4;
commitid	4qvYBxoHcISbHhT5;

1.4
date	2015.09.24.06.52.22;	author semarie;	state Exp;
branches;
next	1.3;
commitid	TUvbBaBL9IIGZInz;

1.3
date	2015.09.24.06.25.54;	author semarie;	state Exp;
branches;
next	1.2;
commitid	zJVLAfTNVIOkVoSl;

1.2
date	2015.09.10.11.18.10;	author semarie;	state Exp;
branches;
next	1.1;
commitid	wGhTUOQVKI9rH3bX;

1.1
date	2015.08.24.09.21.10;	author semarie;	state Exp;
branches;
next	;
commitid	PMLVZe5EVtqaJvpn;


desc
@@


1.10
log
@follow tame->pledge in regress
@
text
@#	$OpenBSD: tests.out,v 1.9 2015/10/06 15:45:31 semarie Exp $
test(test_nop): tame=("",NULL) status=0 exit=0
test(test_inet): tame=("",NULL) status=9 signal=9 tamed_syscall=97
test(test_inet): tame=("abort",NULL) status=134 signal=6 coredump=present tamed_syscall=97
test(test_inet): tame=("inet",NULL) status=0 exit=0
test(test_kill): tame=("inet",NULL) status=9 signal=9 tamed_syscall=37
test(test_kill): tame=("proc",NULL) status=2 signal=2 tamed_syscall=not_found
test(test_allowed_syscalls): tame=("malloc",NULL) status=0 exit=0
test(test_allowed_syscalls): tame=("rw",NULL) status=0 exit=0
test(test_allowed_syscalls): tame=("stdio",NULL) status=0 exit=0
test(test_allowed_syscalls): tame=("rpath",NULL) status=0 exit=0
test(test_allowed_syscalls): tame=("wpath",NULL) status=0 exit=0
test(test_allowed_syscalls): tame=("tmppath",NULL) status=0 exit=0
test(test_allowed_syscalls): tame=("inet",NULL) status=0 exit=0
test(test_allowed_syscalls): tame=("unix",NULL) status=0 exit=0
test(test_allowed_syscalls): tame=("dns",NULL) status=0 exit=0
test(test_allowed_syscalls): tame=("getpw",NULL) status=0 exit=0
test(test_allowed_syscalls): tame=("cmsg",NULL) status=9 signal=9 tamed_syscall=89
test(test_allowed_syscalls): tame=("ioctl",NULL) status=9 signal=9 tamed_syscall=89
test(test_allowed_syscalls): tame=("proc",NULL) status=9 signal=9 tamed_syscall=89
test(test_allowed_syscalls): tame=("cpath",NULL) status=9 signal=9 tamed_syscall=89
test(test_allowed_syscalls): tame=("abort",NULL) status=134 signal=6 coredump=present tamed_syscall=89
test(test_allowed_syscalls): tame=("fattr",NULL) status=9 signal=9 tamed_syscall=89
test(test_rpath): tame=("rpath",NULL) status=0 exit=0
test(test_wpath): tame=("wpath",NULL) status=0 exit=0
test(test_cpath): tame=("cpath",NULL) status=0 exit=0
test(test_wpaths): tame=("stdio rpath",NULL)
 open_close("/etc/passwd") fd=3 errno=0
 open_close("generic") fd=3 errno=0
 open_close("../../../../../../../../../../../../../../../etc/passwd") fd=3 errno=0
 open_close("/nonexistent") fd=-1 errno=2
 status=0 exit=0
test(test_wpaths): tame=("stdio rpath",{NULL})
 open_close("/etc/passwd") fd=-1 errno=2
 open_close("generic") fd=-1 errno=2
 open_close("../../../../../../../../../../../../../../../etc/passwd") fd=-1 errno=2
 open_close("/nonexistent") fd=-1 errno=2
 status=0 exit=0
test(test_wpaths): tame=("stdio rpath",{"/",NULL})
 open_close("/etc/passwd") fd=3 errno=0
 open_close("generic") fd=3 errno=0
 open_close("../../../../../../../../../../../../../../../etc/passwd") fd=3 errno=0
 open_close("/nonexistent") fd=-1 errno=2
 status=0 exit=0
test(test_wpaths): tame=("stdio rpath",{"/etc",NULL})
 open_close("/etc/passwd") fd=3 errno=0
 open_close("generic") fd=-1 errno=2
 open_close("../../../../../../../../../../../../../../../etc/passwd") fd=3 errno=0
 open_close("/nonexistent") fd=-1 errno=2
 status=0 exit=0
test(test_wpaths): tame=("stdio rpath",{"/etc/",NULL})
 open_close("/etc/passwd") fd=3 errno=0
 open_close("generic") fd=-1 errno=2
 open_close("../../../../../../../../../../../../../../../etc/passwd") fd=3 errno=0
 open_close("/nonexistent") fd=-1 errno=2
 status=0 exit=0
test(test_wpaths): tame=("stdio rpath",{"/etc/passwd",NULL})
 open_close("/etc/passwd") fd=3 errno=0
 open_close("generic") fd=-1 errno=2
 open_close("../../../../../../../../../../../../../../../etc/passwd") fd=3 errno=0
 open_close("/nonexistent") fd=-1 errno=2
 status=0 exit=0
test(test_wpaths): tame=("stdio rpath",{"/bin",NULL})
 open_close("/etc/passwd") fd=-1 errno=2
 open_close("generic") fd=-1 errno=2
 open_close("../../../../../../../../../../../../../../../etc/passwd") fd=-1 errno=2
 open_close("/nonexistent") fd=-1 errno=2
 status=0 exit=0
test(test_wpaths): tame=("stdio rpath",{"generic",NULL})
 open_close("/etc/passwd") fd=-1 errno=2
 open_close("generic") fd=3 errno=0
 open_close("../../../../../../../../../../../../../../../etc/passwd") fd=-1 errno=2
 open_close("/nonexistent") fd=-1 errno=2
 status=0 exit=0
test(test_wpaths): tame=("stdio rpath",{"",NULL})
 open_close("/etc/passwd") fd=-1 errno=2
 open_close("generic") fd=3 errno=0
 open_close("../../../../../../../../../../../../../../../etc/passwd") fd=-1 errno=2
 open_close("/nonexistent") fd=-1 errno=2
 status=0 exit=0
test(test_wpaths): tame=("stdio rpath",{".",NULL})
 open_close("/etc/passwd") fd=-1 errno=2
 open_close("generic") fd=3 errno=0
 open_close("../../../../../../../../../../../../../../../etc/passwd") fd=-1 errno=2
 open_close("/nonexistent") fd=-1 errno=2
 status=0 exit=0
test(test_tame): tame=("stdio rpath",NULL) status=0 exit=0
test(test_tame): tame=("malloc rw rpath",NULL) status=0 exit=0
test(test_tame): tame=("stdio rpath wpath",NULL) status=0 exit=0
test(test_tame): tame=("stdio rpath wpath",{"/sbin",NULL}) status=256 exit=1 (errno: "Operation not permitted")
test(test_tame): tame=("stdio rpath wpath",{"/",NULL}) status=256 exit=1 (errno: "Operation not permitted")
test(test_tame): tame=("stdio",NULL) status=256 exit=1 (errno: "Operation not permitted")
test(test_tame): tame=("unix",NULL) status=256 exit=1 (errno: "Operation not permitted")
test(test_stat): tame=("stdio rpath",{"/usr/share/man",NULL})
 stat("/usr/share/man/man8/afterboot.8"): realpath=failed(2) uid=0 gid=7 mode=100444
 stat("/usr/share/man/man8/"): realpath=failed(2) uid=0 gid=0 mode=40755
 stat("/usr/share/man"): realpath=failed(2) uid=0 gid=0 mode=40755
 stat("/usr/share"): realpath=failed(2) errno=2
 stat("/usr"): realpath="/usr" errno=2
 stat("/"): realpath="/" errno=2
 stat("/usr/bin/gzip"): realpath=failed(2) errno=2
 status=0 exit=0
test(test_mmap): tame=("rpath malloc prot_exec",{"/dev/zero",NULL}) status=0 exit=0
test(test_mmap): tame=("rpath malloc",{"/dev/zero",NULL}) status=9 signal=9 tamed_syscall=197
@


1.9
log
@update "cmsg" tests: it lost TAME_SELF flag.
@
text
@d1 1
a1 1
#	$OpenBSD: tests.out,v 1.8 2015/10/06 15:24:54 semarie Exp $
@


1.8
log
@add some tests for rpath, wpath, cpath
@
text
@d1 1
a1 1
#	$OpenBSD: tests.out,v 1.7 2015/09/30 11:36:07 semarie Exp $
a15 1
test(test_allowed_syscalls): tame=("cmsg",NULL) status=0 exit=0
d18 1
d93 1
a93 1
test(test_tame): tame=("cmsg",NULL) status=256 exit=1 (errno: "Operation not permitted")
@


1.7
log
@implement new "prot_exec" tame(2) request:
- by default, a tamed-program don't have the possibility to use PROT_EXEC for
  mmap(2) or mprotect(2)
- for that, use the request "prot_exec" (that could be dropped later)

initial idea from deraadt@@ and kettenis@@

"make complete sense" beck@@
ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: tests.out,v 1.6 2015/09/28 15:40:18 semarie Exp $
d24 3
@


1.6
log
@make using tame path "/" work.
and add a regress test for that.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: tests.out,v 1.5 2015/09/27 17:55:39 semarie Exp $
d100 2
@


1.5
log
@add a tame(2) regress for stat(2) and realpath(3)
@
text
@d1 1
a1 1
#	$OpenBSD: tests.out,v 1.4 2015/09/24 06:52:22 semarie Exp $
d34 6
@


1.4
log
@tame("xxx", NULL) and tame("xxx", {NULL}) are not the same
- change output of regress to reflect that
- add test
@
text
@d1 1
a1 1
#	$OpenBSD: tests.out,v 1.3 2015/09/24 06:25:54 semarie Exp $
d85 9
@


1.3
log
@refactor a bit regress tame
- unit tests are functions in main.c
- use test name in output
- add grabbing stdout output of tests
@
text
@d1 24
a24 24
#	$OpenBSD: tests.out,v 1.2 2015/09/10 11:18:10 semarie Exp $
test(test_nop): tame=("",{NULL}) status=0 exit=0
test(test_inet): tame=("",{NULL}) status=9 signal=9 tamed_syscall=97
test(test_inet): tame=("abort",{NULL}) status=134 signal=6 coredump=present tamed_syscall=97
test(test_inet): tame=("inet",{NULL}) status=0 exit=0
test(test_kill): tame=("inet",{NULL}) status=9 signal=9 tamed_syscall=37
test(test_kill): tame=("proc",{NULL}) status=2 signal=2 tamed_syscall=not_found
test(test_allowed_syscalls): tame=("malloc",{NULL}) status=0 exit=0
test(test_allowed_syscalls): tame=("rw",{NULL}) status=0 exit=0
test(test_allowed_syscalls): tame=("stdio",{NULL}) status=0 exit=0
test(test_allowed_syscalls): tame=("rpath",{NULL}) status=0 exit=0
test(test_allowed_syscalls): tame=("wpath",{NULL}) status=0 exit=0
test(test_allowed_syscalls): tame=("tmppath",{NULL}) status=0 exit=0
test(test_allowed_syscalls): tame=("inet",{NULL}) status=0 exit=0
test(test_allowed_syscalls): tame=("unix",{NULL}) status=0 exit=0
test(test_allowed_syscalls): tame=("cmsg",{NULL}) status=0 exit=0
test(test_allowed_syscalls): tame=("dns",{NULL}) status=0 exit=0
test(test_allowed_syscalls): tame=("getpw",{NULL}) status=0 exit=0
test(test_allowed_syscalls): tame=("ioctl",{NULL}) status=9 signal=9 tamed_syscall=89
test(test_allowed_syscalls): tame=("proc",{NULL}) status=9 signal=9 tamed_syscall=89
test(test_allowed_syscalls): tame=("cpath",{NULL}) status=9 signal=9 tamed_syscall=89
test(test_allowed_syscalls): tame=("abort",{NULL}) status=134 signal=6 coredump=present tamed_syscall=89
test(test_allowed_syscalls): tame=("fattr",{NULL}) status=9 signal=9 tamed_syscall=89
test(test_wpaths): tame=("stdio rpath",{NULL})
d30 6
d78 3
a80 3
test(test_tame): tame=("stdio rpath",{NULL}) status=0 exit=0
test(test_tame): tame=("malloc rw rpath",{NULL}) status=0 exit=0
test(test_tame): tame=("stdio rpath wpath",{NULL}) status=0 exit=0
d83 2
a84 2
test(test_tame): tame=("stdio",{NULL}) status=256 exit=1 (errno: "Operation not permitted")
test(test_tame): tame=("cmsg",{NULL}) status=256 exit=1 (errno: "Operation not permitted")
@


1.2
log
@convert tame(2) regress to new API
@
text
@d1 78
a78 23
#	$OpenBSD: tests.out,v 1.1 2015/08/24 09:21:10 semarie Exp $
test(1): tame=("",{NULL}) status=0 exit=0
test(2): tame=("",{NULL}) status=9 signal=9 tamed_syscall=97
test(3): tame=("abort",{NULL}) status=134 signal=6 coredump=present tamed_syscall=97
test(4): tame=("inet",{NULL}) status=0 exit=0
test(5): tame=("inet",{NULL}) status=9 signal=9 tamed_syscall=37
test(6): tame=("proc",{NULL}) status=2 signal=2 tamed_syscall=not_found
test(7): tame=("dns",{NULL}) status=0 exit=0
test(8): tame=("inet",{NULL}) status=0 exit=0
test(9): tame=("proc",{NULL}) status=9 signal=9 tamed_syscall=89
test(10): tame=("rpath",{NULL}) status=0 exit=0
test(11): tame=("rpath",{"/etc/passwd",NULL}) status=0 exit=0
test(12): tame=("rpath",{"/etc/",NULL}) status=0 exit=0
test(13): tame=("rpath",{"/etc",NULL}) status=0 exit=0
test(14): tame=("rpath",{"/bin",NULL}) status=512 exit=2 (errno: "No such file or directory")
test(15): tame=("rpath",{NULL}) status=0 exit=0
test(16): tame=("rpath",{"generic",NULL}) status=0 exit=0
test(17): tame=("rpath",{"./",NULL}) status=0 exit=0
test(18): tame=("rpath",{".",NULL}) status=0 exit=0
test(19): tame=("rpath",{".",NULL}) status=512 exit=2 (errno: "No such file or directory")
test(20): tame=("rpath wpath",{NULL}) status=0 exit=0
test(21): tame=("rpath",{NULL}) status=256 exit=1 (errno: "Operation not permitted")
test(22): tame=("rpath",{NULL}) status=256 exit=1 (errno: "Operation not permitted")
@


1.1
log
@add new (extensible) testsuite for tame(2)
@
text
@d1 23
a23 23
#	$OpenBSD$
test(1): tame=(0x0,{NULL}) status=0 exit=0
test(2): tame=(0x0,{NULL}) status=9 signal=9 tamed_syscall=97
test(3): tame=(0x8000000,{NULL}) status=134 signal=6 coredump=present tamed_syscall=97
test(4): tame=(0x83,{NULL}) status=0 exit=0
test(5): tame=(0x83,{NULL}) status=9 signal=9 tamed_syscall=37
test(6): tame=(0x1000,{NULL}) status=2 signal=2 tamed_syscall=not_found
test(7): tame=(0xd,{NULL}) status=0 exit=0
test(8): tame=(0x83,{NULL}) status=0 exit=0
test(9): tame=(0x1000,{NULL}) status=9 signal=9 tamed_syscall=89
test(10): tame=(0x13,{NULL}) status=0 exit=0
test(11): tame=(0x13,{"/etc/passwd",NULL}) status=0 exit=0
test(12): tame=(0x13,{"/etc/",NULL}) status=0 exit=0
test(13): tame=(0x13,{"/etc",NULL}) status=0 exit=0
test(14): tame=(0x13,{"/bin",NULL}) status=512 exit=2 (errno: "No such file or directory")
test(15): tame=(0x13,{NULL}) status=0 exit=0
test(16): tame=(0x13,{"generic",NULL}) status=0 exit=0
test(17): tame=(0x13,{"./",NULL}) status=0 exit=0
test(18): tame=(0x13,{".",NULL}) status=0 exit=0
test(19): tame=(0x13,{".",NULL}) status=512 exit=2 (errno: "No such file or directory")
test(20): tame=(0x33,{NULL}) status=0 exit=0
test(21): tame=(0x13,{NULL}) status=256 exit=1 (errno: "Operation not permitted")
test(22): tame=(0x13,{NULL}) status=256 exit=1 (errno: "Operation not permitted")
@

