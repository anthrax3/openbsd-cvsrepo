head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.4
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.4.0.26
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.16
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.24
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.22
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.20
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.18
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.14
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.12
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.10
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.8
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.4
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.2
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.24
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.26
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.22
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.20
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.18
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.16
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.14
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.12
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.10
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.8
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.6
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.4
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.2
	OPENBSD_3_5_BASE:1.3;
locks; strict;
comment	@ * @;


1.5
date	2016.09.20.23.05.27;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	5GU2P4d8AX6RwJst;

1.4
date	2010.06.26.22.54.04;	author blambert;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.28.02.22.29;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2003.12.07.15.45.57;	author markus;	state Exp;
branches;
next	1.1;

1.1
date	2003.12.02.05.48.48;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.5
log
@To make debugging the kqueue test easier, always print the assertion
failure before returning.
@
text
@/* $OpenBSD: kqueue-tun.c,v 1.4 2010/06/26 22:54:04 blambert Exp $ */
/* $Gateweaver: tunkq.c,v 1.2 2003/11/27 22:47:41 cmaxwell Exp $ */
/*
 * Copyright 2003 Christopher J. Maxwell <cmaxwell@@themanor.net>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <sys/uio.h>

#include <netinet/in.h>
#include <net/if.h>
#include <net/if_tun.h>

#include <err.h>
#include <errno.h>
#include <event.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#include "main.h"

#define TUN0		"tun98"
#define TUN1		"tun99"
#define TUN0_ADDR	"192.0.2.1"
#define TUN1_ADDR	"192.0.2.2"
#define TUN_MAXWAIT	5
#define TUN_PINGDEL	1

struct buffer {
	u_char *buf;
	size_t len;
	size_t a;
};

int state;
int tunfd[2];
struct buffer tpkt;
u_char pktbuf[TUNMTU];
struct event tunwev[2];
struct timeval exittv = {TUN_MAXWAIT, 0};

void
tunnel_write(int fd, short which, void *arg)
{
	uint32_t type = htonl(AF_INET);
	struct iovec iv[2];
	int rlen;
	int fdkey = (fd == tunfd[0]) ? 0 : 1;

	iv[0].iov_base = &type;
	iv[0].iov_len = sizeof(type);
	iv[1].iov_base = tpkt.buf;
	iv[1].iov_len = tpkt.len;

	state++;
	if ((rlen = writev(fd, iv, 2)) > 0)
		fprintf(stderr, "Tunnel %d wrote %ld bytes\n",
		    fdkey, (long)(rlen - sizeof(type)));
	else
		errx(1, "Write to tunnel %d failed", fdkey);
}

void
tunnel_read(int fd, short which, void *arg)
{
	struct iovec iv[2];
	uint32_t type;
	int rlen;
	int fdkey = (fd == tunfd[0]) ? 0 : 1;
	int oppfdkey = (fd == tunfd[0]) ? 1 : 0;

	iv[0].iov_base = &type;
	iv[0].iov_len = sizeof(type);
	iv[1].iov_base = tpkt.buf;
	iv[1].iov_len = tpkt.a;

	state++;
	if ((rlen = readv(fd, iv, 2)) > 0) {
		fprintf(stderr, "Tunnel %d read %ld bytes\n",
		    fdkey, (long)(rlen - sizeof(type)));
		tpkt.len = rlen - sizeof(type);

		/* add write event on opposite tunnel */
		event_add(&tunwev[oppfdkey], &exittv);
	} else
		errx(1, "Read from tunnel %d failed", fdkey);
}

void
tunnel_ping(int fd, short which, void *arg)
{
	system("ping -c 1 -I " TUN0_ADDR " " TUN1_ADDR " >/dev/null &");
}

/*
 * +------------+     +------------+
 * |    TUN0    |     |    TUN1    |
 * | TUN0_ADDR  |     | TUN1_ADDR  |
 * +------------+     +------------+
 *
 * Set up both tunnel devices (TUN0, TUN1)
 * This works because the routing table prefers the opposing end of the ptp
 * interfaces.
 * Set up one read and one write event per tunnel.
 * The read events add the write event.
 */
int
do_tun(void)
{
	struct event tunrev[2];
	struct event pingev;
	struct timeval pingtv = {TUN_PINGDEL, 0};

	/* read buffer */
	tpkt.buf = (u_char *)&pktbuf;
	tpkt.len = 0;
	tpkt.a = sizeof(pktbuf);

	event_init();

	/* tun0 */
	if ((tunfd[0] = open("/dev/" TUN0, O_RDWR)) < 0)
		errx(1, "Cannot open /dev/" TUN0);
	event_set(&tunrev[0], tunfd[0], EV_READ, tunnel_read, NULL);
	event_set(&tunwev[0], tunfd[0], EV_WRITE, tunnel_write, NULL);
	event_add(&tunrev[0], &exittv);

	/* tun1 */
	if ((tunfd[1] = open("/dev/" TUN1, O_RDWR)) < 0)
		errx(1, "Cannot open /dev/" TUN1);
	event_set(&tunrev[1], tunfd[1], EV_READ, tunnel_read, NULL);
	event_set(&tunwev[1], tunfd[1], EV_WRITE, tunnel_write, NULL);
	event_add(&tunrev[1], &exittv);

	/* ping */
	evtimer_set(&pingev, tunnel_ping, NULL);
	event_add(&pingev, &pingtv);

	/* configure the interfaces */
	system("ifconfig " TUN0 " " TUN0_ADDR
	    " netmask 255.255.255.255 " TUN1_ADDR);
	system("ifconfig " TUN1 " " TUN1_ADDR
	    " netmask 255.255.255.255 " TUN0_ADDR);

	state = 0;
	if (event_dispatch() < 0)
		errx(errno, "Event handler failed");

	return (state != 4);
}
@


1.4
log
@Do not print "Read from tunnel foo failed" in the failure case of a
function named "tunnel_write", tell people that a write failed.

ok claudio@@
@
text
@d1 1
a1 1
/* $OpenBSD: kqueue-tun.c,v 1.3 2004/02/28 02:22:29 deraadt Exp $ */
d29 1
d33 1
d37 2
a39 1
#include <err.h>
d45 2
@


1.3
log
@regress tests full of warnings make me go red
@
text
@d1 1
a1 1
/* $OpenBSD: kqueue-tun.c,v 1.2 2003/12/07 15:45:57 markus Exp $ */
d81 1
a81 1
		errx(1, "Read from tunnel %d failed", fdkey);
@


1.2
log
@- use tun98 and tun99 and not interfere with existing tun(4)
- use IPs from the example rage
- destroy tun98/99 after the test
- test all of select/poll and kqueue
ok deraadt
@
text
@d1 1
a1 1
/* $OpenBSD: $ */
d78 2
a79 2
		fprintf(stderr, "Tunnel %d wrote %d bytes\n",
				fdkey, rlen - sizeof(type));
d100 2
a101 2
		fprintf(stderr, "Tunnel %d read %d bytes\n",
				fdkey, rlen - sizeof(type));
@


1.1
log
@tun(4) select+kq tests from Christopher Maxwell <cmaxwell@@themanor.net> w/ little mods of mine
@
text
@d1 1
d43 4
a46 2
#define TUN0_ADDR	"172.16.0.1"
#define TUN1_ADDR	"172.16.0.2"
d118 2
a119 2
 * |    tun0    |     |    tun1    |
 * | 172.16.0.1 |     | 172.16.0.2 |
d122 1
a122 1
 * Set up both tunnel devices (tun0, tun1)
d143 2
a144 2
	if ((tunfd[0] = open("/dev/tun0", O_RDWR)) < 0)
		errx(1, "Cannot open /dev/tun0");
d150 2
a151 2
	if ((tunfd[1] = open("/dev/tun1", O_RDWR)) < 0)
		errx(1, "Cannot open /dev/tun1");
d161 1
a161 1
	system("ifconfig tun0 " TUN0_ADDR
d163 1
a163 1
	system("ifconfig tun1 " TUN1_ADDR
@

