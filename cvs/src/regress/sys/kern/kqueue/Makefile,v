head	1.19;
access;
symbols
	OPENBSD_6_0:1.18.0.4
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.2
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.17.0.4
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.16.0.14
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.12
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.10
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.6
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.4
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.2
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.4
	OPENBSD_5_0:1.15.0.2
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.14.0.4
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.2
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.13.0.20
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.22
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.18
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.16
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.14
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.12
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.10
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.8
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.6
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.4
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.2
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.12.0.4
	OPENBSD_3_6_BASE:1.12
	OPENBSD_3_5:1.12.0.2
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3;
locks; strict;
comment	@# @;


1.19
date	2016.09.20.23.05.27;	author bluhm;	state Exp;
branches;
next	1.18;
commitid	5GU2P4d8AX6RwJst;

1.18
date	2015.12.05.10.51.49;	author blambert;	state Exp;
branches;
next	1.17;
commitid	k6b93i7fxnCQSNsx;

1.17
date	2015.04.25.20.47.49;	author guenther;	state Exp;
branches;
next	1.16;
commitid	zyJI4ajMKoXgqRf1;

1.16
date	2012.07.08.12.31.03;	author guenther;	state Exp;
branches;
next	1.15;

1.15
date	2011.07.07.02.00.51;	author guenther;	state Exp;
branches;
next	1.14;

1.14
date	2010.08.04.05.57.21;	author guenther;	state Exp;
branches;
next	1.13;

1.13
date	2004.12.29.04.39.17;	author david;	state Exp;
branches;
next	1.12;

1.12
date	2003.12.07.15.52.52;	author markus;	state Exp;
branches;
next	1.11;

1.11
date	2003.12.07.15.45.57;	author markus;	state Exp;
branches;
next	1.10;

1.10
date	2003.12.02.21.26.33;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2003.12.02.05.48.48;	author mickey;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.15.16.41.34;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.12.05.08.51;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.12.05.06.47;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	2002.09.02.20.01.44;	author avsm;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.19.03.05.07;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.02.21.48.05;	author art;	state Exp;
branches;
next	1.2;

1.2
date	2002.02.27.17.11.51;	author art;	state Exp;
branches;
next	1.1;

1.1
date	2002.01.07.00.01.00;	author provos;	state Exp;
branches;
next	;


desc
@@


1.19
log
@To make debugging the kqueue test easier, always print the assertion
failure before returning.
@
text
@#	$OpenBSD: Makefile,v 1.18 2015/12/05 10:51:49 blambert Exp $

PROG=	kqueue-test
CFLAGS+=-Wall
SRCS=	kqueue-pipe.c kqueue-fork.c main.c kqueue-process.c kqueue-random.c \
	kqueue-pty.c kqueue-tun.c kqueue-signal.c kqueue-fdpass.c \
	kqueue-flock.c kqueue-timer.c
LDADD=	-levent -lutil
DPADD=	${LIBEVENT} ${LIBUTIL}

kq-pipe: ${PROG}
	./${PROG} -p
kq-fork: ${PROG}
	./${PROG} -f
kq-process: ${PROG}
	./${PROG} -P
kq-random: ${PROG}
	./${PROG} -r
kq-tun: ${PROG}
	@@-${SUDO} sh -c 'cd /dev && sh MAKEDEV tun98 tun99'
	@@EVENT_SHOW_METHOD=yes EVENT_NOPOLL=yes EVENT_NOSELECT=yes ${SUDO} ./${PROG} -t
	@@EVENT_SHOW_METHOD=yes EVENT_NOPOLL=yes EVENT_NOKQUEUE=yes ${SUDO} ./${PROG} -t
	@@EVENT_SHOW_METHOD=yes EVENT_NOSELECT=yes EVENT_NOKQUEUE=yes ${SUDO} ./${PROG} -t
	@@-${SUDO} rm -f /dev/tun98 /dev/tun99
kq-pty: ${PROG}
	${SUDO} ./${PROG} -T
kq-signal: ${PROG}
	./${PROG} -s
kq-fdpass: ${PROG}
	./${PROG} -F
kq-flock: ${PROG}
	./${PROG} -l
kq-timer: ${PROG}
	./${PROG} -i

REGRESS_TARGETS=kq-pipe kq-fork kq-process kq-random kq-pty kq-signal \
	kq-fdpass kq-flock kq-timer
# kq-tun broke at some point, apparently from a change in tun routing
REGRESS_ROOT_TARGETS=${REGRESS_TARGETS}
.PHONY: ${REGRESS_TARGETS}

.include <bsd.regress.mk>
@


1.18
log
@simplistic regress test for KEVENT_TIMER kqueue(2) calls

ok and prodding tedu@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.17 2015/04/25 20:47:49 guenther Exp $
d38 1
a38 1
# kq-tun broke at some point, apparently from a change in tun routing 
@


1.17
log
@Disable kq-tun test, as it's been broken for a while and not because of kq
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.16 2012/07/08 12:31:03 guenther Exp $
d7 1
a7 1
	kqueue-flock.c
d33 2
d37 1
a37 1
	kq-fdpass kq-flock
@


1.16
log
@Add a test for kevent(EV_DELETE) screwing with POSIX file locks
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.15 2011/07/07 02:00:51 guenther Exp $
d34 1
a34 1
REGRESS_TARGETS=kq-pipe kq-fork kq-process kq-random kq-tun kq-pty kq-signal \
d36 1
@


1.15
log
@Add tests for kqueue EVFILT_SIGNAL and that they can't be passed over
sockets
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.14 2010/08/04 05:57:21 guenther Exp $
d6 2
a7 1
	kqueue-pty.c kqueue-tun.c kqueue-signal.c kqueue-fdpass.c
d31 2
d35 1
a35 1
	kq-fdpass
@


1.14
log
@tun* interfaces are now automatically destroyed on last close when
originally created by opening /dev/tun*
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.13 2004/12/29 04:39:17 david Exp $
d6 1
a6 1
	kqueue-pty.c kqueue-tun.c
d26 4
d31 2
a32 1
REGRESS_TARGETS=kq-pipe kq-fork kq-process kq-random kq-tun kq-pty
@


1.13
log
@define REGRESS_ROOT_TARGETS for tests that require root privileges
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.12 2003/12/07 15:52:52 markus Exp $
a22 2
	@@-${SUDO} ifconfig tun98 destroy
	@@-${SUDO} ifconfig tun99 destroy
@


1.12
log
@destroy, not delete tunXX
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.11 2003/12/07 15:45:57 markus Exp $
d30 1
@


1.11
log
@- use tun98 and tun99 and not interfere with existing tun(4)
- use IPs from the example rage
- destroy tun98/99 after the test
- test all of select/poll and kqueue
ok deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.10 2003/12/02 21:26:33 deraadt Exp $
d23 2
a24 2
	@@-${SUDO} ifconfig tun98 delete
	@@-${SUDO} ifconfig tun99 delete
@


1.10
log
@delete nasty mickey change
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.9 2003/12/02 05:48:48 mickey Exp $
d19 7
a25 4
	@@EVENT_SHOW_METHOD=yes EVENT_NOKQUEUE=yes ${SUDO} ./${PROG} -t
	@@EVENT_SHOW_METHOD=yes EVENT_NOSELECT=yes ${SUDO} ./${PROG} -t
	@@${SUDO} ifconfig tun0 -alias down
	@@${SUDO} ifconfig tun1 -alias down
@


1.9
log
@tun(4) select+kq tests from Christopher Maxwell <cmaxwell@@themanor.net> w/ little mods of mine
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.8 2003/06/15 16:41:34 mickey Exp $
a27 4

clean:
	@@${SUDO} ifconfig tun0 -alias down
	@@${SUDO} ifconfig tun1 -alias down
@


1.8
log
@better LDADD
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.7 2003/06/12 05:08:51 mickey Exp $
d6 3
a8 3
	kqueue-pty.c
LDADD=	-lutil
DPADD=	${DPUTIL}
d18 5
d26 1
a26 1
REGRESS_TARGETS=kq-pipe kq-fork kq-process kq-random kq-pty
d28 4
@


1.7
log
@ugh. cleanup debugging
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.6 2003/06/12 05:06:47 mickey Exp $
d7 1
a7 1
LDADD=	${LIBUTIL}
@


1.6
log
@test for kqueue on ptys (to verify pr3209)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.5 2002/09/02 20:01:44 avsm Exp $
a8 1
SUDO=sudo
@


1.5
log
@Rename a bunch of the old bsd.regress.mk variables into the new ones.

ok art@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.4 2002/06/19 03:05:07 mickey Exp $
d4 6
a9 1
SRCS=	kqueue-pipe.c kqueue-fork.c main.c kqueue-process.c kqueue-random.c
d19 2
d22 1
a22 1
REGRESS_TARGETS=kq-pipe kq-fork kq-process kq-random
@


1.4
log
@regress for the kqueu for random
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.3 2002/03/02 21:48:05 art Exp $
d15 2
a16 2
REGRESSTARGETS=kq-pipe kq-fork kq-process kq-random
.PHONY: ${REGRESSTARGETS}
@


1.3
log
@A start for testing EVFILT_PROC, not done yet, but this is a good check point.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.2 2002/02/27 17:11:51 art Exp $
d4 1
a4 1
SRCS= kqueue-pipe.c kqueue-fork.c main.c kqueue-process.c
d12 2
d15 1
a15 1
REGRESSTARGETS=kq-pipe kq-fork kq-process
@


1.2
log
@Add a test for inheriting kqueue descriptors on fork.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.1 2002/01/07 00:01:00 provos Exp $
d4 1
a4 1
SRCS= kqueue-pipe.c kqueue-fork.c main.c
d10 2
d13 1
a13 1
REGRESSTARGETS=kq-pipe kq-fork
@


1.1
log
@simple kqueue test for pipes
@
text
@d1 12
a12 1
#	$OpenBSD: Makefile,v 1.1 2002/01/03 15:03:42 art Exp $
a13 1
PROG=	kqueue-pipe
@

