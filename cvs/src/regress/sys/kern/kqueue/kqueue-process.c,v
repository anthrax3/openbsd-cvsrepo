head	1.12;
access;
symbols
	OPENBSD_6_2:1.12.0.2
	OPENBSD_6_2_BASE:1.12
	OPENBSD_6_1:1.12.0.4
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.10.0.2
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.5.0.22
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.20
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.18
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.14
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.12
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.10
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.8
	OPENBSD_5_0:1.5.0.6
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.4
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.2
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.4.0.26
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.28
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.24
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.22
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.20
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.18
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.16
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.14
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.12
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.10
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.8
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.1.0.2
	OPENBSD_3_1_BASE:1.1;
locks; strict;
comment	@ * @;


1.12
date	2016.09.20.23.05.27;	author bluhm;	state Exp;
branches;
next	1.11;
commitid	5GU2P4d8AX6RwJst;

1.11
date	2016.09.04.18.08.04;	author bluhm;	state Exp;
branches;
next	1.10;
commitid	tL9OtfuRM16iZLbT;

1.10
date	2016.07.14.05.55.08;	author guenther;	state Exp;
branches;
next	1.9;
commitid	lclMlOztWVAw0FCc;

1.9
date	2016.03.17.19.40.43;	author krw;	state Exp;
branches;
next	1.8;
commitid	aCmYZrmRmWHLuztW;

1.8
date	2015.08.13.10.26.54;	author uebayasi;	state Exp;
branches;
next	1.7;
commitid	RZtvbHYUQ76CSLdC;

1.7
date	2015.08.02.02.42.22;	author uebayasi;	state Exp;
branches;
next	1.6;
commitid	EoxTgjfM1EDIEe2e;

1.6
date	2015.08.02.00.47.25;	author uebayasi;	state Exp;
branches;
next	1.5;
commitid	toEtwvzdugxlRmte;

1.5
date	2010.08.04.05.55.29;	author guenther;	state Exp;
branches;
next	1.4;

1.4
date	2003.07.31.21.48.08;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2003.06.12.04.52.40;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.11.06.16.36;	author jsyn;	state Exp;
branches;
next	1.1;

1.1
date	2002.03.02.21.48.05;	author art;	state Exp;
branches;
next	;


desc
@@


1.12
log
@To make debugging the kqueue test easier, always print the assertion
failure before returning.
@
text
@/*	$OpenBSD: kqueue-process.c,v 1.11 2016/09/04 18:08:04 bluhm Exp $	*/
/*
 *	Written by Artur Grabowski <art@@openbsd.org> 2002 Public Domain
 */

#include <sys/types.h>
#include <sys/event.h>
#include <sys/wait.h>

#include <err.h>
#include <errno.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#include "main.h"

static int process_child(void);

static void
usr1handler(int signum)
{
	/* nada */
}

int
do_process(void)
{
	struct kevent ke;
	int kq, status;
	pid_t pid, pid2;
	int didfork, didchild;
	int i;
	struct timespec ts;

	/*
	 * Timeout in case something doesn't work.
	 */
	ts.tv_sec = 10;
	ts.tv_nsec = 0;

	ASS((kq = kqueue()) >= 0,
	    warn("kqueue"));

	/*
	 * Install a signal handler so that we can use pause() to synchronize
	 * with the child with the parent.
	 */
	signal(SIGUSR1, usr1handler);

	switch ((pid = fork())) {
	case -1:
		err(1, "fork");
	case 0:
		_exit(process_child());
	}

	sleep(2);	/* wait for child to settle down. */

	EV_SET(&ke, pid, EVFILT_PROC, EV_ADD|EV_ENABLE|EV_CLEAR,
	    NOTE_EXIT|NOTE_FORK|NOTE_EXEC|NOTE_TRACK, 0, NULL);
	ASS(kevent(kq, &ke, 1, NULL, 0, NULL) == 0,
	    warn("can't register events on kqueue"));

	/* negative case */
	EV_SET(&ke, pid + (1ULL << 30), EVFILT_PROC, EV_ADD|EV_ENABLE|EV_CLEAR,
	    NOTE_EXIT|NOTE_FORK|NOTE_EXEC|NOTE_TRACK, 0, NULL);
	ASS(kevent(kq, &ke, 1, NULL, 0, NULL) != 0,
	    warnx("can register bogus pid on kqueue"));
	ASS(errno == ESRCH,
	    warn("register bogus pid on kqueue returned wrong error"));

	kill(pid, SIGUSR1);	/* sync 1 */

	didfork = didchild = 0;

	pid2 = -1;
	for (i = 0; i < 2; i++) {
		ASS(kevent(kq, NULL, 0, &ke, 1, &ts) == 1,
		    warnx("didn't receive event"));
		ASSX(ke.filter == EVFILT_PROC);
		switch (ke.fflags) {
		case NOTE_CHILD:
			didchild = 1;
			ASSX((pid_t)ke.data == pid);
			pid2 = ke.ident;
			fprintf(stderr, "child %d (from %d)\n", pid2, pid);
			break;
		case NOTE_FORK:
			didfork = 1;
			ASSX(ke.ident == pid);
			fprintf(stderr, "fork\n");
			break;
		case NOTE_TRACKERR:
			errx(1, "child tracking failed due to resource shortage");
		default:
			errx(1, "kevent returned weird event 0x%x pid %d",
			    ke.fflags, (pid_t)ke.ident);
		}
	}

	ASSX(pid2 != -1);

	/* Both children now sleeping. */

	ASSX(didchild == 1);
	ASSX(didfork == 1);

	kill(pid2, SIGUSR1);	/* sync 2.1 */
	kill(pid, SIGUSR1);	/* sync 2 */

	/* Wait for child's exit. */
	if (wait(&status) < 0)
		err(1, "wait");
	/* Wait for child-child's exec/exit to receive two events at once. */
	sleep(1);

	for (i = 0; i < 2; i++) {
		ASS(kevent(kq, NULL, 0, &ke, 1, &ts) == 1,
		    warnx("didn't receive event"));
		ASSX(ke.filter == EVFILT_PROC);
		switch (ke.fflags) {
		case NOTE_EXIT:
			ASSX((pid_t)ke.ident == pid);
			fprintf(stderr, "child exit %d\n", pid);
			break;
		case NOTE_EXEC | NOTE_EXIT:
			ASSX((pid_t)ke.ident == pid2);
			fprintf(stderr, "child-child exec/exit %d\n", pid2);
			break;
		default:
			errx(1, "kevent returned weird event 0x%x pid %d",
			    ke.fflags, (pid_t)ke.ident);
		}
	}

	if (!WIFEXITED(status))
		errx(1, "child didn't exit?");

	close(kq);
	return (WEXITSTATUS(status) != 0);
}

static int
process_child(void)
{
	signal(SIGCHLD, SIG_IGN);	/* ignore our children. */

	pause();

	/* fork and see if tracking works. */
	switch (fork()) {
	case -1:
		err(1, "fork");
	case 0:
		/* sync 2.1 */
		pause();
		execl("/usr/bin/true", "true", (char *)NULL);
		err(1, "execl(true)");
	}

	/* sync 2 */
	pause();

	return 0;
}
@


1.11
log
@When passing the (1ULL << 32) to EV_SET, it gets casted to __uintptr_t.
On 32 bit architectues, the high bit is lost and the test fails.
Create an invalid pid in the lower 32 bits.
OK guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kqueue-process.c,v 1.10 2016/07/14 05:55:08 guenther Exp $	*/
a9 2
#include <stdlib.h>
#include <stdio.h>
d12 3
d16 2
a17 1
#include <signal.h>
a20 4
#define ASS(cond, mess) do { if (!(cond)) { mess; return 1; } } while (0)

#define ASSX(cond) ASS(cond, warnx("assertion " #cond " failed on line %d", __LINE__))

a26 2
int do_process(void);

d43 2
a44 1
	ASS((kq = kqueue()) >= 0, warn("kqueue"));
d103 1
a103 2
	if (pid2 == -1)
		return (1);
d109 1
a109 1
	
@


1.10
log
@Prevent silly states via knotes on pids > 2^32 and on nonexistent signals.

ok tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kqueue-process.c,v 1.9 2016/03/17 19:40:43 krw Exp $	*/
d70 1
a70 1
	EV_SET(&ke, pid + (1ULL << 32), EVFILT_PROC, EV_ADD|EV_ENABLE|EV_CLEAR,
@


1.9
log
@Last parameter to execl[e]() functions *must* be cast to a pointer.
Just NULL is not good practise as NULL is theoretically allowed to
be an integer rather than a pointer.

Use (char *)NULL consistently instead of scattering a few (char *)0
and (void *)NULL into the mix.

Prompted by and probably ok deraadt@@ millert@@ kettenis@@

Definitely ok mestre@@ ratchov@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kqueue-process.c,v 1.8 2015/08/13 10:26:54 uebayasi Exp $	*/
d13 1
d68 8
@


1.8
log
@NOTE_FORK|NOTE_TRACK knote can track grandchild processes.  Wait for
both child/grandchild process events.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d154 1
a154 1
		execl("/usr/bin/true", "true", (void *)NULL);
@


1.7
log
@Kill a useless assignment.
@
text
@d108 1
d111 2
d114 1
a114 2
	for (i = 0; i < 1; i++) {
		/* make sure we get an exit note */
d121 5
a125 1
			fprintf(stderr, "exit %d\n", pid);
@


1.6
log
@Refactor to prepare a future change; no functional changes.
@
text
@a117 1
			didchild = 1;
@


1.5
log
@Confirm that a NOTE_EXIT knote is delivered when the child exits
Fix a C thinko
@
text
@d1 1
a1 1
/*	$OpenBSD: kqueue-process.c,v 1.4 2003/07/31 21:48:08 deraadt Exp $	*/
d111 15
a125 13
	/* make sure we get an exit note */
	ASS(kevent(kq, NULL, 0, &ke, 1, &ts) == 1,
	    warnx("didn't receive event"));
	ASSX(ke.filter == EVFILT_PROC);
	switch (ke.fflags) {
	case NOTE_EXIT:
		didchild = 1;
		ASSX((pid_t)ke.ident == pid);
		fprintf(stderr, "exit %d\n", pid);
		break;
	default:
		errx(1, "kevent returned weird event 0x%x pid %d",
		    ke.fflags, (pid_t)ke.ident);
@


1.4
log
@various cleanups; david says results are same
@
text
@d1 1
a1 1
/*	$OpenBSD: kqueue-process.c,v 1.3 2003/06/12 04:52:40 mickey Exp $	*/
d82 1
a82 1
			fprintf(stderr, "child %d\n", pid2);
d102 2
a103 1
	ASSX(didchild == didfork == 1);
d110 15
@


1.3
log
@-Wall and calc fix in the random
@
text
@d1 1
a1 1
/*	$OpenBSD: kqueue-process.c,v 1.2 2002/06/11 06:16:36 jsyn Exp $	*/
d22 1
a22 1
void
d27 2
@


1.2
log
@kill err(3) newlines; ok miod@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kqueue-process.c,v 1.1 2002/03/02 21:48:05 art Exp $	*/
d70 1
d95 3
d129 1
a129 1
		execl("/usr/bin/true", "true", NULL);
@


1.1
log
@A start for testing EVFILT_PROC, not done yet, but this is a good check point.
@
text
@d1 1
a1 1
/*	$OpenBSD: kqueue-fork.c,v 1.1 2002/02/27 17:11:51 art Exp $	*/
d89 1
a89 1
			errx(1, "kevent returned weird event 0x%x pid %d\n",
@

