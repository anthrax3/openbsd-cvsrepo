head	1.9;
access;
symbols
	OPENBSD_6_1:1.9.0.2
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.8.0.4
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.7.0.16
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.14
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.12
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.10
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.6
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.4
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.2
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.4
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.5.0.30
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.28
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.24
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.26
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.22
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.20
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.18
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.16
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.14
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.12
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.10
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.8
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.6
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.4
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.2
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2;
locks; strict;
comment	@ * @;


1.9
date	2016.09.20.23.05.27;	author bluhm;	state Exp;
branches;
next	1.8;
commitid	5GU2P4d8AX6RwJst;

1.8
date	2015.12.05.10.51.49;	author blambert;	state Exp;
branches;
next	1.7;
commitid	k6b93i7fxnCQSNsx;

1.7
date	2012.07.08.12.31.03;	author guenther;	state Exp;
branches;
next	1.6;

1.6
date	2011.07.07.02.00.51;	author guenther;	state Exp;
branches;
next	1.5;

1.5
date	2003.12.02.05.48.48;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.12.05.06.47;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	2002.06.19.03.05.07;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.02.21.48.05;	author art;	state Exp;
branches;
next	1.1;

1.1
date	2002.02.27.17.11.51;	author art;	state Exp;
branches;
next	;


desc
@@


1.9
log
@To make debugging the kqueue test easier, always print the assertion
failure before returning.
@
text
@/*	$OpenBSD: main.c,v 1.8 2015/12/05 10:51:49 blambert Exp $	*/
/*
 *	Written by Artur Grabowski <art@@openbsd.org> 2002 Public Domain
 */

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#include "main.h"

int
main(int argc, char **argv)
{
	extern char *__progname;
	int ret, c;

	ret = 0;
	while ((c = getopt(argc, argv, "fFilpPrstT")) != -1) {
		switch (c) {
		case 'f':
			ret |= check_inheritance();
			break;
		case 'F':
			ret |= do_fdpass();
			break;
		case 'i':
			ret |= do_timer();
			break;
		case 'l':
			ret |= do_flock();
			break;
		case 'p':
			ret |= do_pipe();
			break;
		case 'P':
			ret |= do_process();
			break;
		case 'r':
			ret |= do_random();
			break;
		case 's':
			ret |= do_signal();
			break;
		case 't':
			ret |= do_tun();
			break;
		case 'T':
			ret |= do_pty();
			break;
		default:
			fprintf(stderr, "Usage: %s -[fPprTt]\n", __progname);
			exit(1);
		}
	}

	return (ret);
}
@


1.8
log
@simplistic regress test for KEVENT_TIMER kqueue(2) calls

ok and prodding tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.7 2012/07/08 12:31:03 guenther Exp $	*/
d6 1
a7 1
#include <stdio.h>
d10 1
a10 10
int do_pipe(void);
int check_inheritance(void);
int do_process(void);
int do_signal(void);
int do_random(void);
int do_pty(void);
int do_tun(void);
int do_fdpass(void);
int do_flock(void);
int do_timer(void);
@


1.7
log
@Add a test for kevent(EV_DELETE) screwing with POSIX file locks
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.6 2011/07/07 02:00:51 guenther Exp $	*/
d19 1
d28 1
a28 1
	while ((c = getopt(argc, argv, "fFlpPrstT")) != -1) {
d35 3
@


1.6
log
@Add tests for kqueue EVFILT_SIGNAL and that they can't be passed over
sockets
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.5 2003/12/02 05:48:48 mickey Exp $	*/
d18 1
d27 1
a27 1
	while ((c = getopt(argc, argv, "fFpPrstT")) != -1) {
d34 3
@


1.5
log
@tun(4) select+kq tests from Christopher Maxwell <cmaxwell@@themanor.net> w/ little mods of mine
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.4 2003/06/12 05:06:47 mickey Exp $	*/
d13 1
d17 1
d26 1
a26 1
	while ((c = getopt(argc, argv, "fPprTt")) != -1) {
d28 6
a36 3
		case 'f':
			ret |= check_inheritance();
			break;
d42 3
@


1.4
log
@test for kqueue on ptys (to verify pr3209)
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.3 2002/06/19 03:05:07 mickey Exp $	*/
d15 1
d24 1
a24 1
	while ((c = getopt(argc, argv, "fPprT")) != -1) {
d38 3
d45 1
a45 1
			fprintf(stderr, "Usage: %s -[fPprt]\n", __progname);
@


1.3
log
@regress for the kqueu for random
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.2 2002/03/02 21:48:05 art Exp $	*/
d14 1
d23 1
a23 1
	while ((c = getopt(argc, argv, "fPpr")) != -1) {
d37 3
d41 1
a41 1
			fprintf(stderr, "Usage: %s -[fPpr]\n", __progname);
@


1.2
log
@A start for testing EVFILT_PROC, not done yet, but this is a good check point.
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.1 2002/02/27 17:11:51 art Exp $	*/
d10 4
a13 3
extern int do_pipe(void);
extern int check_inheritance(void);
extern int do_process(void);
d18 1
d22 1
a22 1
	while ((c = getopt(argc, argv, "pfP")) != -1) {
d33 3
d37 1
a37 1
			fprintf(stderr, "Usage: kqtest -P|p|f\n");
@


1.1
log
@Add a test for inheriting kqueue descriptors on fork.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d12 1
d20 1
a20 1
	while ((c = getopt(argc, argv, "pf")) != -1) {
d28 3
d32 1
a32 1
			fprintf(stderr, "Usage: kqtest -P|p\n");
@

