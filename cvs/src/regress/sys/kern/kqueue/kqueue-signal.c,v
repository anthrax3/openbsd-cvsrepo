head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.2
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.4
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.2.0.2
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.1.0.12
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.20
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.18
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.16
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.14
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.10
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.8
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.6
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.4
	OPENBSD_5_0:1.1.0.2
	OPENBSD_5_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2016.09.20.23.05.27;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	5GU2P4d8AX6RwJst;

1.2
date	2016.07.14.05.55.08;	author guenther;	state Exp;
branches;
next	1.1;
commitid	lclMlOztWVAw0FCc;

1.1
date	2011.07.07.02.00.51;	author guenther;	state Exp;
branches;
next	;


desc
@@


1.3
log
@To make debugging the kqueue test easier, always print the assertion
failure before returning.
@
text
@/*	$OpenBSD: kqueue-signal.c,v 1.2 2016/07/14 05:55:08 guenther Exp $	*/
/*
 *	Written by Philip Guenther <guenther@@openbsd.org> 2011 Public Domain
 */

#include <sys/types.h>
#include <sys/event.h>
#include <sys/socket.h>
#include <sys/un.h>
#include <sys/wait.h>

#include <err.h>
#include <errno.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "main.h"

volatile sig_atomic_t saw_usr1 = 0;
volatile sig_atomic_t result = 0;
int kq;

int
sigtest(int signum, int catch)
{
	struct kevent ke;
	struct timespec ts;

	ts.tv_sec = 10;
	ts.tv_nsec = 0;

	ASS(kevent(kq, NULL, 0, &ke, 1, &ts) == 1,
	    warn("can't fetch event on kqueue"));
	ASSX(ke.filter == EVFILT_SIGNAL);
	ASSX(ke.ident == signum);
	ASSX(ke.data == catch);
	return (0);
}

void
usr1handler(int signum)
{
	saw_usr1 = 1;
	result = sigtest(SIGUSR1, 1);
}

int
do_signal(void)
{
	struct kevent ke;
	pid_t pid = getpid();
	sigset_t mask;

	ASS((kq = kqueue()) >= 0, warn("kqueue"));

	signal(SIGUSR1, usr1handler);
	signal(SIGUSR2, SIG_IGN);

	EV_SET(&ke, SIGUSR1, EVFILT_SIGNAL, EV_ADD|EV_ENABLE, 0, 0, NULL);
	ASS(kevent(kq, &ke, 1, NULL, 0, NULL) == 0,
	    warn("can't register events on kqueue"));
	EV_SET(&ke, SIGUSR2, EVFILT_SIGNAL, EV_ADD|EV_ENABLE, 0, 0, NULL);
	ASS(kevent(kq, &ke, 1, NULL, 0, NULL) == 0,
	    warn("can't register events on kqueue"));

	EV_SET(&ke, 10000, EVFILT_SIGNAL, EV_ADD|EV_ENABLE, 0, 0, NULL);
	ASS(kevent(kq, &ke, 1, NULL, 0, NULL) != 0,
	    warnx("registered bogus signal on kqueue"));
	ASS(errno == EINVAL,
	    warn("registering bogus signal on kqueue returned wrong error"));

	ASSX(saw_usr1 == 0);
	kill(pid, SIGUSR1);
	ASSX(saw_usr1 == 1);

	kill(pid, SIGUSR2);
	ASSX(sigtest(SIGUSR2, 1) == 0);
	kill(pid, SIGUSR2);
	kill(pid, SIGUSR2);
	ASSX(sigtest(SIGUSR2, 2) == 0);

	sigemptyset(&mask);
	sigaddset(&mask, SIGUSR1);
	sigaddset(&mask, SIGUSR2);
	sigprocmask(SIG_BLOCK, &mask, NULL);

	signal(SIGUSR1, SIG_DFL);
	kill(pid, SIGUSR1);
	kill(pid, SIGUSR2);

	close(kq);

	return (0);
}
@


1.2
log
@Prevent silly states via knotes on pids > 2^32 and on nonexistent signals.

ok tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kqueue-signal.c,v 1.1 2011/07/07 02:00:51 guenther Exp $	*/
d12 4
a16 1
#include <stdio.h>
a17 2
#include <err.h>
#include <errno.h>
a18 3
#include <signal.h>

#define ASS(cond, mess) do { if (!(cond)) { mess; return 1; } } while (0)
d20 1
a20 1
#define ASSX(cond) ASS(cond, warnx("assertion " #cond " failed on line %d", __LINE__))
a49 3

int do_signal(void);

d80 1
a80 2
	if (sigtest(SIGUSR2, 1))
		return (1);
d83 1
a83 2
	if (sigtest(SIGUSR2, 2))
		return (1);
a97 1

@


1.1
log
@Add tests for kqueue EVFILT_SIGNAL and that they can't be passed over
sockets
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d73 6
@

