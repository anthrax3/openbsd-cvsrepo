head	1.3;
access;
symbols
	OPENBSD_6_0:1.2.0.4
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.1.0.20
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.18
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.16
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.14
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.10
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.8
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.6
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.4
	OPENBSD_5_0:1.1.0.2
	OPENBSD_5_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2016.09.20.23.05.27;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	5GU2P4d8AX6RwJst;

1.2
date	2015.08.13.10.14.41;	author uebayasi;	state Exp;
branches;
next	1.1;
commitid	fmYctgOMNVMAWM2z;

1.1
date	2011.07.07.02.00.51;	author guenther;	state Exp;
branches;
next	;


desc
@@


1.3
log
@To make debugging the kqueue test easier, always print the assertion
failure before returning.
@
text
@/*	$OpenBSD: kqueue-fdpass.c,v 1.2 2015/08/13 10:14:41 uebayasi Exp $	*/
/*
 *	Written by Philip Guenther <guenther@@openbsd.org> 2011 Public Domain
 */

#include <sys/types.h>
#include <sys/event.h>
#include <sys/socket.h>
#include <sys/un.h>
#include <sys/wait.h>

#include <err.h>
#include <errno.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "main.h"

int
do_fdpass(void)
{
	struct msghdr msg;
	union {
		struct cmsghdr hdr;
		char buf[CMSG_SPACE(sizeof(int))];
	} cmsgbuf;
	struct kevent ke;
	struct cmsghdr *cmp;
	pid_t pid;
	int pfd[2], fd, status;

	ASS(socketpair(PF_LOCAL, SOCK_STREAM, 0, pfd) == 0,
	    warn("socketpair"));

	pid = fork();
	if (pid == -1)
		err(1, "fork");
	if (pid == 0) {
		close(pfd[0]);

		/* a kqueue with event to pass */
		fd = kqueue();
		EV_SET(&ke, SIGHUP, EVFILT_SIGNAL, EV_ADD|EV_ENABLE,
		    0, 0, NULL);
		if (kevent(fd, &ke, 1, NULL, 0, NULL) != 0)
			err(1, "can't register events on kqueue");

		memset(&cmsgbuf.buf, 0, sizeof cmsgbuf.buf);
		memset(&msg, 0, sizeof msg);
		msg.msg_control = &cmsgbuf.buf;
		msg.msg_controllen = sizeof(cmsgbuf);

		cmp = CMSG_FIRSTHDR(&msg);
		cmp->cmsg_len = CMSG_LEN(sizeof(int));
		cmp->cmsg_level = SOL_SOCKET;
		cmp->cmsg_type = SCM_RIGHTS;

		*(int *)CMSG_DATA(cmp) = fd;

		if (sendmsg(pfd[1], &msg, 0) == 0)
			errx(1, "sendmsg succeeded when it shouldn't");
		if (errno != EINVAL)
			err(1, "child sendmsg");
		printf("sendmsg failed with EINVAL as expected\n");
		close(pfd[1]);
		exit(0);
	}

	close(pfd[1]);
	wait(&status);
	close(pfd[0]);

	return (0);
}
@


1.2
log
@Zero-clear test buffers.  Close fds.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d12 4
a16 1
#include <stdio.h>
a17 2
#include <err.h>
#include <errno.h>
a18 3
#include <signal.h>

#define ASS(cond, mess) do { if (!(cond)) { mess; return 1; } } while (0)
d20 1
a20 4
#define ASSX(cond) ASS(cond, warnx("assertion " #cond " failed on line %d", __LINE__))


int do_fdpass(void);
a77 1

@


1.1
log
@Add tests for kqueue EVFILT_SIGNAL and that they can't be passed over
sockets
@
text
@d56 1
d73 1
d79 1
@

