head	1.7;
access;
symbols
	OPENBSD_6_0:1.6.0.4
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.4.0.50
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.48
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.46
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.42
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.40
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.38
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.36
	OPENBSD_5_0:1.4.0.34
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.32
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.30
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.26
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.28
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.24
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.22
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.20
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.18
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.16
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.14
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.12
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.10
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.8
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.3.0.6
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.4
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3;
locks; strict;
comment	@ * @;


1.7
date	2016.09.20.23.05.27;	author bluhm;	state Exp;
branches;
next	1.6;
commitid	5GU2P4d8AX6RwJst;

1.6
date	2015.08.13.10.13.05;	author uebayasi;	state Exp;
branches;
next	1.5;
commitid	VdylrtOU0f88DZfU;

1.5
date	2015.08.01.00.04.01;	author uebayasi;	state Exp;
branches;
next	1.4;
commitid	e681LeogUaQtSird;

1.4
date	2003.07.31.21.48.08;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2002.02.27.17.11.51;	author art;	state Exp;
branches;
next	1.2;

1.2
date	2002.01.07.00.11.07;	author provos;	state Exp;
branches;
next	1.1;

1.1
date	2002.01.07.00.01.00;	author provos;	state Exp;
branches;
next	;


desc
@@


1.7
log
@To make debugging the kqueue test easier, always print the assertion
failure before returning.
@
text
@/*	$OpenBSD: kqueue-pipe.c,v 1.6 2015/08/13 10:13:05 uebayasi Exp $	*/
/*
 * Copyright 2001 Niels Provos <provos@@citi.umich.edu>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Niels Provos.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/time.h>
#include <sys/event.h>

#include <err.h>
#include <fcntl.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>

#include "main.h"

int
do_pipe(void)
{
	int kq;
	int n;
	int fd[2];
	struct kevent ev;
	struct timespec ts;
	char buf[8000];

	ASS(pipe(fd) == 0,
	    warn("pipe"));
	ASS(fcntl(fd[1], F_SETFL, O_NONBLOCK) == 0,
	    warn("fcntl"));

	ASS((kq = kqueue()) >= 0,
	    warn("fcntl"));

	memset(&ev, 0, sizeof(ev));
	ev.ident = fd[1];
	ev.filter = EVFILT_WRITE;
	ev.flags = EV_ADD | EV_ENABLE;
	n = kevent(kq, &ev, 1, NULL, 0, NULL);
	ASSX(n != -1);

	memset(buf, 0, sizeof(buf));
	while ((n = write(fd[1], buf, sizeof(buf))) == sizeof(buf))
		;

	ts.tv_sec = 0;
	ts.tv_nsec = 0;
	n = kevent(kq, NULL, 0, &ev, 1, &ts);
	ASSX(n == 0);

	read(fd[0], buf, sizeof(buf));

	ts.tv_sec = 0;
	ts.tv_nsec = 0;
	n = kevent(kq, NULL, 0, &ev, 1, &ts);
	ASSX(n != -1 && n != 0);

	close(fd[0]);
	close(fd[1]);
	return (0);
}
@


1.6
log
@Zero-clear test buffer.  Close fds.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d31 1
d35 3
d39 1
a40 2
#include <fcntl.h>
#include <string.h>
d42 1
a42 1
int do_pipe(void);
d54 4
a57 4
	if (pipe(fd) == -1)
		return (1);
	if (fcntl(fd[1], F_SETFL, O_NONBLOCK) == -1)
		return (1);
d59 2
a60 2
	if ((kq = kqueue()) == -1)
		return (1);
d67 2
a68 3
	if (n == -1)
		return (1);
	
d76 1
a76 2
	if (n != 0)
		return (1);
d83 1
a83 2
	if (n == -1 || n == 0)
		return (1);
@


1.5
log
@SPC -> TAB
@
text
@d37 1
d59 1
d67 1
d85 2
@


1.4
log
@various cleanups; david says results are same
@
text
@d1 1
a1 1
/*	$OpenBSD: kqueue-pipe.c,v 1.3 2002/02/27 17:11:51 art Exp $	*/
d43 11
a53 11
        int kq;
        int n;
        int fd[2];
        struct kevent ev;
        struct timespec ts;
        char buf[8000];

        if (pipe(fd) == -1)
                return (1);
        if (fcntl(fd[1], F_SETFL, O_NONBLOCK) == -1)
                return (1);
d56 1
a56 1
                return (1);
d58 15
a72 15
        ev.ident = fd[1];
        ev.filter = EVFILT_WRITE;
        ev.flags = EV_ADD | EV_ENABLE;
        n = kevent(kq, &ev, 1, NULL, 0, NULL);
        if (n == -1)
                return (1);
        
        while ((n = write(fd[1], buf, sizeof(buf))) == sizeof(buf))
                ;

        ts.tv_sec = 0;
        ts.tv_nsec = 0;
        n = kevent(kq, NULL, 0, &ev, 1, &ts);
        if (n != 0)
                return (1);
d76 5
a80 5
        ts.tv_sec = 0;
        ts.tv_nsec = 0;
        n = kevent(kq, NULL, 0, &ev, 1, &ts);
        if (n == -1 || n == 0)
                return (1);
d82 1
a82 1
        return (0);
@


1.3
log
@Add a test for inheriting kqueue descriptors on fork.
@
text
@d1 1
a1 1
/*	$OpenBSD: kqueue-pipe.c,v 1.2 2002/01/07 00:11:07 provos Exp $	*/
d37 2
@


1.2
log
@better.
@
text
@d1 1
a1 1
/*	$OpenBSD: kqueue-pipe.c,v 1.1 2002/01/07 00:01:00 provos Exp $	*/
d39 1
a39 1
main(int argc, char **argv)
d49 1
a49 1
                exit(1);
d51 1
a51 1
                exit(1);
d54 1
a54 1
                exit(1);
d61 1
a61 1
                exit(1);
d70 1
a70 1
                exit(1);
d78 1
a78 1
                exit(1);
d80 1
a80 1
        exit(0);
@


1.1
log
@simple kqueue test for pipes
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d53 1
a53 4
        while ((n = write(fd[1], buf, sizeof(buf))) == sizeof(buf))
                ;

        if ((kq = kqueue()) == -1)
d63 10
a72 1
        read(fd[0], buf, sizeof(buf));
@

