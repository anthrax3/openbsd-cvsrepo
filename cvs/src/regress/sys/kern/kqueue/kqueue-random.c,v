head	1.10;
access;
symbols
	OPENBSD_6_2:1.10.0.6
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.4
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.9.0.4
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.8.0.6
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.4
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.7.0.16
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.14
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.10
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.8
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.6
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.4
	OPENBSD_5_0:1.7.0.2
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.4.0.30
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.26
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.28
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.24
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.22
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.20
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.18
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.16
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.14
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.12
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.10
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.8
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.1.0.4
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.2
	OPENBSD_3_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.10
date	2016.09.20.23.05.27;	author bluhm;	state Exp;
branches;
next	1.9;
commitid	5GU2P4d8AX6RwJst;

1.9
date	2015.08.13.10.12.04;	author uebayasi;	state Exp;
branches;
next	1.8;
commitid	IKIZMp8CKCM6gN0n;

1.8
date	2014.11.22.18.58.33;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	XBNLBaov0updeobz;

1.7
date	2011.07.07.01.42.05;	author guenther;	state Exp;
branches;
next	1.6;

1.6
date	2011.07.06.05.32.04;	author guenther;	state Exp;
branches;
next	1.5;

1.5
date	2011.01.07.06.17.33;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2003.07.31.21.48.08;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2003.07.31.03.23.41;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	2003.06.12.04.52.40;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	2002.06.19.03.05.07;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.10
log
@To make debugging the kqueue test easier, always print the assertion
failure before returning.
@
text
@/*	$OpenBSD: kqueue-random.c,v 1.9 2015/08/13 10:12:04 uebayasi Exp $	*/
/*	Written by Michael Shalayeff, 2002, Public Domain	*/

#include <sys/param.h>
#include <sys/event.h>
#include <sys/wait.h>
#include <sys/fcntl.h>

#include <dev/rndvar.h>

#include <err.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "main.h"

int
do_random(void)
{
	int n, fd, kq;
	struct timespec ts;
	struct kevent ev;
	u_int32_t buf[BUFSIZ];

	ASS((fd = open("/dev/random", O_RDONLY)) >= 0,
	    warn("open: /dev/random"));
	ASS(fcntl(fd, F_SETFL, O_NONBLOCK) == 0,
	    warn("fcntl"));

	ASS((kq = kqueue()) >= 0,
	    warn("kqueue"));

	memset(&ev, 0, sizeof(ev));
	ev.ident = fd;
	ev.filter = EVFILT_READ;
	ev.flags = EV_ADD | EV_ENABLE;
	n = kevent(kq, &ev, 1, NULL, 0, NULL);
	ASSX(n != -1);

	ts.tv_sec = 0;
	ts.tv_nsec = 0;
	n = kevent(kq, NULL, 0, &ev, 1, &ts);
	ASSX(n >= 0);

	n = MIN((ev.data + 7) / 8, sizeof(buf));
	ASSX(read(fd, buf, n) > 0);

	close(kq);
	close(fd);

	return (0);
}
@


1.9
log
@Zero-clear test buffer.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a3 6
#include <stdlib.h>
#include <stdio.h>
#include <err.h>
#include <unistd.h>
#include <string.h>

d11 7
a17 1
int do_random(void);
d27 7
a33 15
	if ((fd = open("/dev/random", O_RDONLY)) < 0) {
		warn("open: /dev/random");
		return (1);
	}
	if (fcntl(fd, F_SETFL, O_NONBLOCK) == -1) {
		warn("fcntl");
		close(fd);
		return (1);
	}

	if ((kq = kqueue()) < 0) {
		warn("kqueue");
		close(fd);
		return (1);
	}
d40 1
a40 6
	if (n == -1) {
		warn("kevent");
		close(kq);
		close(fd);
		return (1);
	}
d44 2
a45 4
	if (kevent(kq, NULL, 0, &ev, 1, &ts) < 0) {
		warn("kevent2");
		return (1);
	}
d48 1
a48 4
	if (read(fd, buf, n) < 1) {
		warnx("read %d", n);
		return (1);
	}
@


1.8
log
@using /dev/random is ok
@
text
@d1 1
a1 1
/*	$OpenBSD: kqueue-random.c,v 1.7 2011/07/07 01:42:05 guenther Exp $	*/
d8 1
d43 1
@


1.7
log
@braces rock!
@
text
@d1 1
a1 1
/*	$OpenBSD: kqueue-random.c,v 1.6 2011/07/06 05:32:04 guenther Exp $	*/
d26 2
a27 2
	if ((fd = open("/dev/arandom", O_RDONLY)) < 0) {
		warn("open: /dev/arandom");
@


1.6
log
@Switch to a device that isn't deprecated and return more info on
read failure
@
text
@d1 1
a1 1
/*	$OpenBSD: kqueue-random.c,v 1.5 2011/01/07 06:17:33 deraadt Exp $	*/
d61 1
a61 1
	if (read(fd, buf, n) < 1)
d64 1
@


1.5
log
@do not rely on rndvar.h leaking shit into the namespace
@
text
@d1 1
a1 1
/*	$OpenBSD: kqueue-random.c,v 1.4 2003/07/31 21:48:08 deraadt Exp $	*/
d26 2
a27 2
	if ((fd = open("/dev/srandom", O_RDONLY)) < 0) {
		warn("open: /dev/srandom");
d62 1
@


1.4
log
@various cleanups; david says results are same
@
text
@d1 1
a1 1
/*	$OpenBSD: kqueue-random.c,v 1.3 2003/07/31 03:23:41 mickey Exp $	*/
d24 1
a24 1
	u_int32_t buf[POOLWORDS];
@


1.3
log
@fix the license
@
text
@d1 1
a1 1
/*	$OpenBSD: kqueue-random.c,v 1.2 2003/06/12 04:52:40 mickey Exp $	*/
d15 2
@


1.2
log
@-Wall and calc fix in the random
@
text
@d1 2
a2 2
/*	$OpenBSD: kqueue-random.c,v 1.1 2002/06/19 03:05:07 mickey Exp $	*/
/*	Copyright (c) 2002 Michael Shalayeff, Public Domain	*/
@


1.1
log
@regress for the kqueu for random
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d19 1
a19 1
	int n, fd, kq, status;
d58 1
a58 1
	n = MIN((ev.data + 31) / 32, sizeof(buf));
@

