head	1.5;
access;
symbols
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.28
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.18
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.26
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.24
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.22
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.20
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.16
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.14
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.12
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.10
	OPENBSD_5_0:1.5.0.8
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.6
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.3.0.4
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.16
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.14
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.12
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.10
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.8
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.6
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.4
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.2
	OPENBSD_3_8_BASE:1.2;
locks; strict;
comment	@# @;


1.5
date	2009.10.13.20.53.40;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2009.09.18.19.19.15;	author kettenis;	state Exp;
branches;
next	1.3;

1.3
date	2009.04.10.20.57.04;	author kettenis;	state Exp;
branches;
next	1.2;

1.2
date	2005.04.22.00.38.24;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2005.04.21.17.45.54;	author miod;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Make sure we do not loop when allocating an extent region with EX_CONFLICTOK
and the whole extent is used; the current code computations would wrap.
Found the hard way by jsg@@, fix discuss with kettenis@@, and you get a
regress test for free (which will spin if you compile it again an old
subr_extent.c)
@
text
@# $OpenBSD: tests,v 1.4 2009/09/18 19:19:15 kettenis Exp $
# $NetBSD: tests,v 1.9 2005/03/15 18:27:23 bouyer Exp $

#fill up an extent, should coalesce into one allocation
extent test1 0 0x4f
alloc_region 0x00 0x10
alloc_region 0x20 0x10
alloc_region 0x40 0x10
alloc_region 0x10 0x10
alloc_subregion 0 0x4f 0x10
print

#check whether subregion is obeyed (PR kern/7539)
extent test2 0 0x2f EX_NOCOALESCE
alloc_region 0x00 0x10
alloc_subregion 0x20 0x2f 0x10
print

#check overlap into subregion (fixed in 1.25)
extent test3 0 0x3f EX_NOCOALESCE
alloc_region 0x00 0x20
alloc_region 0x30 0x10
alloc_subregion 0x10 0x3f 0x10
print

#check overflow in boundary check, before an allocated region (fixed in 1.32)
extent test4 0xf0000000 0xffffffff
alloc_region 0xf1000000 0x1
boundary 0x20000000
alloc_subregion 0xf0000000 0xffffffff 0x1
print

#check overflow in boundary check, before the subregion end (fixed in 1.32)
extent test5 0xf0000000 0xffffffff
boundary 0x20000000
alloc_subregion 0xf0000000 0xffffffff 0x1
print

#check allocation beyond last boundary line (to be fixed)
# last two allocations should succeed without boundary "fixups"
extent test6 0 11
boundary 8
alloc_subregion 0 11 8
alloc_subregion 0 11 2
alloc_subregion 0 11 2
print

#check allocation beyond last boundary line (to be fixed)
# last allocation should be bumped to the next boundary and exactly fit
# the remaining space
extent test7 0 11
boundary 8
alloc_subregion 0 11 7
alloc_subregion 0 11 4
print

#don't allocate a region pasts the end of subregion (i.e., the second
#alloc_subregion should fail).  subr_extent.c prior to rev. 1.43 allocates
#region starts from 0x10.
extent test8 0 0x4f EX_NOCOALESCE
alloc_region 0x30 0x10
alloc_subregion 0 0xf 0x10
alloc_subregion 0 0xf 0x10
print

#When allocating a region with a boundary constraint, check that we properly
#detect overlaps once the candidate region has been aligned.
#subr_extent.c prior 1.45 could corrupt the extent map in this situation
extent test9 0 0x4f
boundary 0
alloc_subregion 0 0x10 4
alloc_subregion 0xd 0x20 2
boundary 8
alloc_subregion 0 0x4f 8
print

#check that free works
extent test10 0xc0002000 0xffffe000 EX_BOUNDZERO
boundary 0x10000
align 0x10000
alloc_subregion 0xc0002000 0xffffe000 0x2000
alloc_subregion 0xc0002000 0xffffe000 0x2000
print
free 0xc0020000 0x2000
print
alloc_subregion 0xc0002000 0xffffe000 0x10000
print
#If we have something like that in the EX_NOCOALESCE case:
#extent `test11' (0x10 - 0x20), flags = 0x2
#  0x10 - 0x13
#  0x1e - 0x1f
#  0x20 - 0x20
#then a new extent of size 1 could be allocated at 0x20.
# fixed in 1.51
extent test11 0x10 0x20 EX_NOCOALESCE
alloc_subregion 0x10 0x13 0x4
alloc_subregion 0x1e 0x1f 0x2
alloc_subregion 0x20 0x20 0x1
alloc_subregion 0x20 0x20 0x1
alloc_subregion 0x10 0x20 0x1
print

# Overlapping regions should result in a failure
extent test12 0x00000000 0xffffffff
alloc_region 0xfce00000 0x100
alloc_region 0xfce00000 0x100000

# But not if we specify EX_CONFLICTOK
extent test13 0x00000000 0xffffffff
alloc_region 0xfce00000 0x100
alloc_region 0xfce00000 0x100000 EX_CONFLICTOK
print

# Check partial overlap
extent test14 0x00000000 0xffffffff
alloc_region 0xfce00000 0x1000
alloc_region 0xfce00100 0x1000 EX_CONFLICTOK
print

# Check multiple overlaps
extent test15 0x00000000 0xffffffff
alloc_region 0xfce00000 0x100
alloc_region 0xfee00000 0x100
alloc_region 0xf8000000 0x8000000 EX_CONFLICTOK
print

# Check coallescing in combination with overlaps
extent test16 0x00000000 0xffffffff
alloc_region 0x0 0xa0000
alloc_region 0xf0000 0x1ff10000
alloc_region 0xa0000 0x60000 EX_CONFLICTOK
print

# Check allocation of a conflicting region in an otherwise filled
# extent does not trigger an infinite loop
extent test17 0x00000000 -1L EX_FILLED
alloc_region 0 0x4000 EX_CONFLICTOK
print
@


1.4
log
@Add regression test for overlapping allocation that should coallesce but
currently doesn't.
@
text
@d1 1
a1 1
# $OpenBSD: tests,v 1.3 2009/04/10 20:57:04 kettenis Exp $
d132 6
@


1.3
log
@Add EX_CONFLICTOK flag that allows an allocation to conflict with existing
allocations, making sure that the union of all space is allocated.

ok deraadt@@
@
text
@d1 1
a1 1
# $OpenBSD: tests,v 1.2 2005/04/22 00:38:24 miod Exp $
d125 7
@


1.2
log
@Do not trigger (valid) DIAGNOSTIC complaints with an incorrect test.
@
text
@d1 1
a1 1
# $OpenBSD: tests,v 1.1 2005/04/21 17:45:54 miod Exp $
d101 24
@


1.1
log
@Add a regression test for the extent subroutines; from NetBSD.
@
text
@d1 1
a1 1
# $OpenBSD$
d16 1
a16 1
alloc_subregion 0x20 0x30 0x10
@

