head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.30
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.32
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.28
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.18
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.26
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.24
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.22
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.20
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.16
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.14
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.12
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.10
	OPENBSD_5_0:1.4.0.8
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.6
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.0.16
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.14
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.12
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.10
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.8
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.6
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.4
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.2
	OPENBSD_3_8_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2009.10.13.20.53.40;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.18.19.19.15;	author kettenis;	state Exp;
branches;
next	1.2;

1.2
date	2009.04.10.20.57.04;	author kettenis;	state Exp;
branches;
next	1.1;

1.1
date	2005.04.21.17.45.54;	author miod;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Make sure we do not loop when allocating an extent region with EX_CONFLICTOK
and the whole extent is used; the current code computations would wrap.
Found the hard way by jsg@@, fix discuss with kettenis@@, and you get a
regress test for free (which will spin if you compile it again an old
subr_extent.c)
@
text
@# $OpenBSD: extest.exp,v 1.3 2009/09/18 19:19:15 kettenis Exp $
# $NetBSD: extest.exp,v 1.9 2005/03/15 18:27:23 bouyer Exp $
# real output must start in line 5

output for test1
result: 0x30
extent `test1' (0x0 - 0x4f), flags = 0x0
     0x0 - 0x4f
output for test2
result: 0x20
extent `test2' (0x0 - 0x2f), flags = 0x2
     0x0 - 0xf
     0x20 - 0x2f
output for test3
result: 0x20
extent `test3' (0x0 - 0x3f), flags = 0x2
     0x0 - 0x1f
     0x20 - 0x2f
     0x30 - 0x3f
output for test4
result: 0xf0000000
extent `test4' (0xf0000000 - 0xffffffff), flags = 0x0
     0xf0000000 - 0xf0000000
     0xf1000000 - 0xf1000000
output for test5
result: 0xf0000000
extent `test5' (0xf0000000 - 0xffffffff), flags = 0x0
     0xf0000000 - 0xf0000000
output for test6
result: 0x0
result: 0x8
result: 0xa
extent `test6' (0x0 - 0xb), flags = 0x0
     0x0 - 0xb
output for test7
result: 0x0
result: 0x8
extent `test7' (0x0 - 0xb), flags = 0x0
     0x0 - 0x6
     0x8 - 0xb
output for test8
result: 0x0
error: Resource temporarily unavailable
extent `test8' (0x0 - 0x4f), flags = 0x2
     0x0 - 0xf
     0x30 - 0x3f
output for test9
result: 0x0
result: 0xd
result: 0x10
extent `test9' (0x0 - 0x4f), flags = 0x0
     0x0 - 0x3
     0xd - 0xe
     0x10 - 0x17
output for test10
result: 0xc0010000
result: 0xc0020000
extent `test10' (0xc0002000 - 0xffffe000), flags = 0x0
     0xc0010000 - 0xc0011fff
     0xc0020000 - 0xc0021fff
extent `test10' (0xc0002000 - 0xffffe000), flags = 0x0
     0xc0010000 - 0xc0011fff
result: 0xc0022000
extent `test10' (0xc0002000 - 0xffffe000), flags = 0x0
     0xc0010000 - 0xc0011fff
     0xc0022000 - 0xc0031fff
output for test11
result: 0x10
result: 0x1e
result: 0x20
error: Resource temporarily unavailable
result: 0x14
extent `test11' (0x10 - 0x20), flags = 0x2
     0x10 - 0x13
     0x14 - 0x14
     0x1e - 0x1f
     0x20 - 0x20
output for test12
error: Resource temporarily unavailable
output for test13
extent `test13' (0x0 - 0xffffffff), flags = 0x0
     0xfce00000 - 0xfcefffff
output for test14
extent `test14' (0x0 - 0xffffffff), flags = 0x0
     0xfce00000 - 0xfce010ff
output for test15
extent `test15' (0x0 - 0xffffffff), flags = 0x0
     0xf8000000 - 0xffffffff
output for test16
extent `test16' (0x0 - 0xffffffff), flags = 0x0
     0x0 - 0x1fffffff
output for test17
extent `test17' (0x0 - 0xffffffffffffffff), flags = 0x0
     0x0 - 0xffffffffffffffff
@


1.3
log
@Add regression test for overlapping allocation that should coallesce but
currently doesn't.
@
text
@d1 1
a1 1
# $OpenBSD: extest.exp,v 1.2 2009/04/10 20:57:04 kettenis Exp $
d92 3
@


1.2
log
@Add EX_CONFLICTOK flag that allows an allocation to conflict with existing
allocations, making sure that the union of all space is allocated.

ok deraadt@@
@
text
@d1 1
a1 1
# $OpenBSD: extest.exp,v 1.1 2005/04/21 17:45:54 miod Exp $
d89 3
@


1.1
log
@Add a regression test for the extent subroutines; from NetBSD.
@
text
@d1 1
a1 1
# $OpenBSD$
d78 11
@

