head	1.2;
access;
symbols
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.30
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.20
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.28
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.26
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.24
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.22
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.18
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.16
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.14
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.12
	OPENBSD_5_0:1.2.0.10
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.8
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.6
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.0.16
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.14
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.12
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.10
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.8
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.6
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.4
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.2
	OPENBSD_3_8_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2009.04.10.20.57.04;	author kettenis;	state Exp;
branches;
next	1.1;

1.1
date	2005.04.21.17.45.54;	author miod;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Add EX_CONFLICTOK flag that allows an allocation to conflict with existing
allocations, making sure that the union of all space is allocated.

ok deraadt@@
@
text
@# $OpenBSD: extest.awk,v 1.1 2005/04/21 17:45:54 miod Exp $
# $NetBSD: extest.awk,v 1.6 2002/02/21 03:59:25 mrg Exp $

BEGIN {
	first = 1;

	printf("#include <sys/types.h>\n")
	printf("#include <sys/extent.h>\n\n")
	printf("#include <stdio.h>\n")
	printf("#include <stdlib.h>\n")
	printf("#include <string.h>\n")
	printf("int main(void) {\n")
	printf("struct extent *ex; int error; long result;\n")
}

END {
	printf("exit (0);\n")
	printf("}\n")
}

$1 == "extent" {
	if (first == 0) {
		printf("extent_destroy(ex);\n")
	}

	align = "EX_NOALIGN";
	boundary = "EX_NOBOUNDARY";

	printf("printf(\"output for %s\\n\");\n", $2)

	if ($5 == "") {
		flags = "0";
	} else {
		flags = $5;
	}
	printf("ex = extent_create(\"%s\", %s, %s, 0, 0, 0, %s);\n",
	       $2, $3, $4, flags)

	first = 0;
}

$1 == "align" {
	align = $2;
}

$1 == "boundary" {
	boundary = $2;
}

$1 == "alloc_region" {
	if ($4 == "") {
		flags = "0";
	} else {
		flags = $4;
	}
	printf("error = extent_alloc_region(ex, %s, %s, %s);\n",
	       $2, $3, flags)
	printf("if (error)\n\tprintf(\"error: %%s\\n\", strerror(error));\n")
}

$1 == "alloc_subregion" {
	printf("error = extent_alloc_subregion(ex, %s, %s, %s,\n",
	       $2, $3, $4)
	printf("\t%s, 0, %s, 0, &result);\n", align, boundary)
	printf("if (error)\n\tprintf(\"error: %%s\\n\", strerror(error));\n")
	printf("else\n\tprintf(\"result: 0x%%lx\\n\", result);\n")
}

$1 == "free" {
	printf("error = extent_free(ex, %s, %s, 0);\n", $2, $3)
	printf("if (error)\n\tprintf(\"error: %%s\\n\", strerror(error));\n")
}

$1 == "print" {
	printf("extent_print(ex);\n")
}
@


1.1
log
@Add a regression test for the extent subroutines; from NetBSD.
@
text
@d1 1
a1 1
# $OpenBSD$
d51 7
a57 2
	printf("error = extent_alloc_region(ex, %s, %s, 0);\n",
	       $2, $3)
@

