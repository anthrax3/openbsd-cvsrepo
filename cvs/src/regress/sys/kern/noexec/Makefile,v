head	1.15;
access;
symbols
	OPENBSD_6_1:1.15.0.2
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.13.0.12
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.10
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.8
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.6
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.4
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.12.0.40
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.38
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.36
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.34
	OPENBSD_5_0:1.12.0.32
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.30
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.28
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.24
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.26
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.22
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.20
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.18
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.16
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.14
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.12
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.10
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.8
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.6
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.12.0.4
	OPENBSD_3_6_BASE:1.12
	OPENBSD_3_5:1.12.0.2
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3;
locks; strict;
comment	@# @;


1.15
date	2016.09.01.10.12.35;	author tedu;	state Exp;
branches;
next	1.14;
commitid	2lceGrvBe2E5rzGa;

1.14
date	2016.08.19.17.39.37;	author kettenis;	state Exp;
branches;
next	1.13;
commitid	qcaOTtSdemTgLgOp;

1.13
date	2014.01.10.13.45.00;	author jsing;	state Exp;
branches;
next	1.12;

1.12
date	2004.03.04.07.24.01;	author david;	state Exp;
branches;
next	1.11;

1.11
date	2004.03.01.22.42.32;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2004.03.01.22.12.36;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2004.02.28.03.29.15;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2004.02.27.17.36.15;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2004.02.23.08.06.56;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2003.07.31.15.57.29;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.03.00.08.58;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	2003.04.23.21.46.04;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.03.15.28.49;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.02.20.01.44;	author avsm;	state Exp;
branches;
next	1.1;

1.1
date	2002.08.31.22.56.01;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.15
log
@remove references to sparc (and even a vax ref that escaped notice)
@
text
@#	$OpenBSD: Makefile,v 1.14 2016/08/19 17:39:37 kettenis Exp $

.if ${MACHINE} == "sparc64" || \
    ${MACHINE} == "alpha" || ${MACHINE} == "armv7" || \
    ${MACHINE_ARCH} == "amd64" || ${MACHINE} == "i386" || \
    ${MACHINE} == "hppa"

PROG=	noexec
SRCS=	noexec.c testfly.S
CFLAGS+=-Wall
LDSTATIC= ${STATIC}
REGRESS_TARGETS=	nxtext-mmap	nxtext-mprotect \
		nxdata	nxdata-mmap	nxdata-mprotect \
		nxbss	nxbss-mmap	nxbss-mprotect \
		nxheap	nxheap-mmap	nxheap-mprotect \
		nxmmap			nxmmap-mprotect \
		nxstack	nxstack-mmap	nxstack-mprotect
REGRESS_SKIP_TARGETS+=	nxtext-mmap
.PHONY: ${REGRESS_TARGETS}

nxtext-mmap: ${PROG}
	@@./${PROG} -T -m

nxtext-mprotect: ${PROG}
	@@./${PROG} -T -p

nxdata: ${PROG}
	@@./${PROG} -D

nxdata-mprotect: ${PROG}
	@@./${PROG} -D -p

nxdata-mmap: ${PROG}
	@@./${PROG} -D -m

nxbss: ${PROG}
	@@./${PROG} -B

nxbss-mmap: ${PROG}
	@@./${PROG} -B -m

nxbss-mprotect: ${PROG}
	@@./${PROG} -B -p

nxheap: ${PROG}
	@@./${PROG} -H

nxheap-mmap: ${PROG}
	@@./${PROG} -H -m

nxheap-mprotect: ${PROG}
	@@./${PROG} -H -p

nxstack: ${PROG}
	@@./${PROG} -S

nxstack-mmap: ${PROG}
	@@./${PROG} -S -m

nxstack-mprotect: ${PROG}
	@@./${PROG} -S -p

nxmmap: ${PROG}
	@@./${PROG} -m

nxmmap-mprotect: ${PROG}
	@@./${PROG} -m -p

.else
REGRESS_TARGETS=		# this architecture has no test for this
.endif

.include <bsd.regress.mk>
@


1.14
log
@Add support for arm and enable on armv7.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.13 2014/01/10 13:45:00 jsing Exp $
d3 1
a3 1
.if ${MACHINE} == "sparc64" || ${MACHINE} == "sparc" || \
@


1.13
log
@Do not include MD assembly code in a sys regress test. Untested on alpha,
however it has a much better chance of compiling than it did previously.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.12 2004/03/04 07:24:01 david Exp $
d4 1
a4 1
    ${MACHINE} == "alpha" || \
@


1.12
log
@actually SKIP nxtext-mmap, rather than returning a fake SUCCESS
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.11 2004/03/01 22:42:32 deraadt Exp $
d9 1
@


1.11
log
@oops
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.10 2004/03/01 22:12:36 deraadt Exp $
d17 1
d21 1
a21 1
	@@echo ./${PROG} -T -m not being run
@


1.10
log
@looks like powerpc will not do W^X for some time..
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.9 2004/02/28 03:29:15 deraadt Exp $
d4 1
a4 1
    ${MACHINE} == "alpha" \
@


1.9
log
@avoid bad functions; tedu ok
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.8 2004/02/27 17:36:15 deraadt Exp $
d4 1
a4 1
    ${MACHINE} == "alpha" || ${MACHINE_ARCH} == "powerpc" || \
@


1.8
log
@change amd64's MACHINE_ARCH from x86_64 to amd64.  There are many many
reasons for this, quite a few of them technical, and not all of them
in response to Intel's broken ia32e crud.  The gcc toolchain stays at
x86_64 for now.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.7 2004/02/23 08:06:56 deraadt Exp $
d20 1
a20 1
	@@./${PROG} -T -m
@


1.7
log
@let this run on a few more archs
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.6 2003/07/31 15:57:29 deraadt Exp $
d5 1
a5 1
    ${MACHINE_ARCH} == "x86_64" || ${MACHINE} == "i386" || \
@


1.6
log
@do not do -Werror here
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.5 2003/05/03 00:08:58 mickey Exp $
d4 2
a5 2
    ${MACHINE} == "alpha" || ${MACHINE} == "macppc" || \
    ${MACHINE} == "mvmeppc" || ${MACHINE} == "i386" || \
@


1.5
log
@implement and enable a mmaping pages test (mmap over .data etc,
as it was suggested by art@@ some time ago).
implement noexec test for mmap()ed memory and enable it.
add more padding on the data allocated to prevent changing
protection on unrelated data and such.
implement cache flushing (for hppa now).
be careful w/ data allocations sizes and such.
some other cleanups.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.4 2003/04/23 21:46:04 mickey Exp $
d9 1
a9 1
CFLAGS+=-Wall -Werror
@


1.4
log
@implement mmap tests and enable the .text test (with padding now)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.3 2002/09/03 15:28:49 mickey Exp $
d11 6
a16 6
REGRESS_TARGETS=	nxtext-mprotect \
		nxdata	nxdata-mprotect \
		nxbss	nxbss-mprotect \
		nxheap	nxheap-mprotect \
		nxmmap	nxmmap-mprotect \
		nxstack	nxstack-mprotect
d19 3
d31 3
d37 3
d46 3
d54 3
@


1.3
log
@those targets are all phony
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.2 2002/09/02 20:01:44 avsm Exp $
d15 1
d20 1
a20 1
#	@@./${PROG} -T -p
d45 6
@


1.2
log
@Rename a bunch of the old bsd.regress.mk variables into the new ones.

ok art@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.1 2002/08/31 22:56:01 mickey Exp $
d11 1
a11 1
REGRESS_TARGETS=nxtext-mprotect \
d16 1
d19 1
a19 1
	#@@./${PROG} -T -p
@


1.1
log
@a combined non-exec test set.
allows reusing same testing code for:
- text & mprotect (not finished, not enabled);
- data, data & mprotect;
- bss, bss & mprotect;
- heap, heap & mprotect;
- stack, stack & mprotect.
also a test for mmaping pages in those areas
and see how it allows execution (suggested by art@@),
not enabled yet.
all tested on i386 and hppa.
@
text
@d1 1
a1 1
#	$OpenBSD$
d11 1
a11 1
REGRESSTARGETS=		nxtext-mprotect \
d45 1
a45 1
REGRESSTARGETS=		# this architecture has no test for this
@

