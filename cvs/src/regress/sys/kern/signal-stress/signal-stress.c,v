head	1.3;
access;
symbols
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.34
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.24
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.32
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.30
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.28
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.26
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.22
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.20
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.18
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.16
	OPENBSD_5_0:1.3.0.14
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.12
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.10
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.6
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.8
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.4
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.2
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.2.0.16
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.14
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.12
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.10
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.8
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.6
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.4
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2;
locks; strict;
comment	@ * @;


1.3
date	2008.04.13.00.22.17;	author djm;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.05.15.06.59;	author art;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.05.02.58.35;	author art;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Use arc4random_buf() when requesting more than a single word of output

Use arc4random_uniform() when the desired random number upper bound
is not a power of two

ok deraadt@@ millert@@
@
text
@/*	$OpenBSD: signal-stress.c,v 1.2 2004/08/05 15:06:59 art Exp $	*/
/*
 *	Written by Artur Grabowski <art@@openbsd.org> 2004 Public Domain.
 */
#include <sys/types.h>
#include <sys/mman.h>
#include <sys/wait.h>

#include <signal.h>
#include <unistd.h>
#include <stdlib.h>
#include <err.h>

int nprocs, nsigs;
pid_t *pids;
pid_t next, prev;
sig_atomic_t usr1, usr2;

void
sighand(int sig)
{
	if (sig == SIGUSR1 && ++usr1 <= nsigs) {
		if (kill(next, sig))
			_exit(1);
	}
	if (sig == SIGUSR2 && ++usr2 <= nsigs) {
		if (kill(prev, sig))
			_exit(1);
	}
}

void
do_child(void)
{
	int i;

	/*
	 * Step 1 - suspend and wait for SIGCONT so that all siblings have
	 * been started before the next step.
	 */
	raise(SIGSTOP);

	/* Find our neighbours. */
	for (i = 0; i < nprocs; i++) {
		if (pids[i] != getpid())
			continue;
		if (i + 1 == nprocs)
			next = pids[0];
		else
			next = pids[i + 1];
		if (i == 0)
			prev = pids[nprocs - 1];
		else
			prev = pids[i - 1];
	}

	signal(SIGUSR1, sighand);
	signal(SIGUSR2, sighand);

	/* Step 2 - wait again until everyone is ready. */
	raise(SIGSTOP);

	while (usr1 < nsigs || usr2 < nsigs)
		pause();

	/* Step 3 - wait again until everyone is ready. */
	raise(SIGSTOP);
}

void
wait_stopped(pid_t pid)
{
	int status;

	if (waitpid(pid, &status, WUNTRACED) != pid)
		err(1, "waitpid");
	if (!WIFSTOPPED(status))
		errx(1, "child %d not stopped", pid);
}

void
cleanup(void)
{
	int i;

	for (i = 0; i < nprocs; i++)
		kill(pids[i], 9);
}

void
alrmhand(int sig)
{
	cleanup();
	_exit(1);
}

int
main()
{
	int i;
	pid_t pid;

	nprocs = 35;

	nsigs = 1000;

	if ((pids = mmap(NULL, getpagesize(), PROT_READ|PROT_WRITE,
	    MAP_ANON|MAP_SHARED, -1, 0)) == MAP_FAILED)
		err(1, "mmap");

	for (i = 0; i < nprocs; i++) {
		switch((pid = fork())) {
		case 0:
			do_child();
			_exit(0);
		case -1:
			err(1, "fork");
		}
		pids[i] = pid;
	}

	atexit(cleanup);
	signal(SIGALRM, alrmhand);
	alarm(120);			/* Die after two minutes. */

	/* Step 1. Wait until all children have went to sleep */
	for (i = 0; i < nprocs; i++)
		wait_stopped(pids[i]);
	/* And wake them */
	for (i = 0; i < nprocs; i++)
		kill(pids[i], SIGCONT);

	/* Step 2. Repeat. */
	for (i = 0; i < nprocs; i++)
		wait_stopped(pids[i]);
	for (i = 0; i < nprocs; i++)
		kill(pids[i], SIGCONT);

	/*
	 * Now all children are ready for action.
	 * Send the first signals and wait until they all exit.
	 */
	kill(pids[arc4random_uniform(nprocs)], SIGUSR1);
	kill(pids[arc4random_uniform(nprocs)], SIGUSR2);

	/*
	 * The signal game is running, now insert noise in the process.
	 */
	for (i = 0; i < nprocs; i++) {
		pid_t pid = pids[arc4random_uniform(nprocs)];
		kill(pid, SIGSTOP);
		wait_stopped(pid);
		kill(pid, SIGCONT);
	}
		

	/* Step 3. Repeat. */
	for (i = 0; i < nprocs; i++)
		wait_stopped(pids[i]);
	for (i = 0; i < nprocs; i++)
		kill(pids[i], SIGCONT);

	/* Wait for everyone to finish. */
	for (i = 0; i < nprocs; i++) {
		int status;

		if (waitpid(pids[i], &status, WUNTRACED) != pids[i])
			err(1, "waitpid");
		if (!WIFEXITED(status))
			errx(1, "child %d not stopped (%d)", pids[i], status);
		if (WEXITSTATUS(status) != 0)
			warnx("child %d status: %d", i, status);
	}

	return (0);
}
@


1.2
log
@Be nice to poor people with small machines and low limits.
@
text
@d1 1
a1 1
/*	$OpenBSD: signal-stress.c,v 1.1 2004/08/05 02:58:35 art Exp $	*/
d143 2
a144 2
	kill(pids[arc4random() % nprocs], SIGUSR1);
	kill(pids[arc4random() % nprocs], SIGUSR2);
d150 1
a150 1
		pid_t pid = pids[arc4random() % nprocs];
@


1.1
log
@A test that tests sends such a huge amount of signals that something
should happen if signal delivery is not robust.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d103 1
a103 1
	nprocs = 100;
@

