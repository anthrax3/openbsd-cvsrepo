head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.14
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.10
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.8
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.6
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.4.0.46
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.42
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.40
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.38
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.36
	OPENBSD_5_0:1.4.0.34
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.32
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.30
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.26
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.28
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.24
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.22
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.20
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.18
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.16
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.14
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.12
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.10
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.8
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.1.0.2
	OPENBSD_3_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2014.07.19.18.11.12;	author miod;	state Exp;
branches;
next	1.4;
commitid	6SZBdJNimvltHyGR;

1.4
date	2003.09.02.23.52.17;	author david;	state Exp;
branches;
next	1.3;

1.3
date	2003.07.31.21.48.09;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2003.07.31.03.23.41;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	2002.11.26.18.31.59;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Make sure struct sockaddr_in gets completely initialized by setting it to zero
before setting the few fields we are interested in; Doug Hogan
@
text
@/*	$OpenBSD: rcvtimeo.c,v 1.4 2003/09/02 23:52:17 david Exp $	*/

/*	Written by Michael Shalayeff, 2002, Public Domain */

#include <sys/param.h>
#include <sys/socket.h>

#include <netinet/in.h>

#include <signal.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include <err.h>

volatile int back;

static void
sigalarm(int sig, siginfo_t *sip, void *scp)
{
	if (!back)
		_exit(1);
}

int
main(int argc, char *argv[])
{
	struct sockaddr_in sin;
	struct sigaction sa;
	struct timeval tv;
	u_char buf[16];
	int s;

	sa.sa_sigaction = &sigalarm;
	sa.sa_flags = SA_SIGINFO;
	sigemptyset(&sa.sa_mask);
	sigaction(SIGALRM, &sa, NULL);

	if ((s = socket(AF_INET, SOCK_DGRAM, 0)) < 0)
		err(1, "socket");

	memset(&sin, 0, sizeof(sin));
	sin.sin_len = sizeof(sin);
	sin.sin_family = AF_INET;
	sin.sin_port = htons(30000);	/* XXX assuming nothing is there */
	sin.sin_addr.s_addr = htonl(INADDR_LOOPBACK);
	if (bind(s, (struct sockaddr *)&sin, sizeof(sin)) < 0)
		err(1, "bind");

	tv.tv_sec = 1;
	tv.tv_usec = 0;
	if (setsockopt(s, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv)) < 0)
		err(1, "setsockopt1");

	back = 0;
	alarm(2);
	errno = 0;
	if (recv(s, buf, sizeof(buf), 0) < 0 && errno != EAGAIN)
		err(1, "recv1");
	back = 1;

	tv.tv_sec = 0;
	tv.tv_usec = 1;
	if (setsockopt(s, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv)) < 0)
		err(1, "setsockopt2");

	back = 0;
	alarm(2);
	errno = 0;
	if (recv(s, buf, sizeof(buf), 0) < 0 && errno != EAGAIN)
		err(1, "recv2");
	back = 1;

	exit (0);
}
@


1.4
log
@add missing includes
ok deraadt@@ tedu@@ dhartmei@@ krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rcvtimeo.c,v 1.3 2003/07/31 21:48:09 deraadt Exp $	*/
d14 1
d44 1
@


1.3
log
@various cleanups; david says results are same
@
text
@d1 1
a1 1
/*	$OpenBSD: rcvtimeo.c,v 1.2 2003/07/31 03:23:41 mickey Exp $	*/
d13 1
@


1.2
log
@fix the license
@
text
@d1 1
a1 1
/*	$OpenBSD: rcvtimeo.c,v 1.1 2002/11/26 18:31:59 mickey Exp $	*/
d18 1
a18 1
void
@


1.1
log
@test for working timeouts on recv, currently failing
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d3 1
a3 1
/*	Copyright (c) 2002 Michael Shalayeff. Public Domain */
@

