head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.18
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.16
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.12
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.10
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.8
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.6
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.4
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	bluhm_20130103:1.1.1.1
	bluhm:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2013.08.09.19.51.11;	author bluhm;	state Exp;
branches;
next	1.2;

1.2
date	2013.01.08.21.42.19;	author bluhm;	state Exp;
branches;
next	1.1;

1.1
date	2013.01.03.17.36.38;	author bluhm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.01.03.17.36.38;	author bluhm;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Move the check for required perl packages into Makefile.inc so that
make obj always runs through als sudirs.
@
text
@#	$OpenBSD: Makefile.inc,v 1.2 2013/01/08 21:42:19 bluhm Exp $

# The following ports must be installed for the regression tests:
# p5-BSD-Socket-Splice	perl interface to OpenBSD socket splicing
# p5-IO-Socket-INET6	object interface for AF_INET and AF_INET6 domain sockets
# p5-Socket6		Perl defines relating to AF_INET6 sockets
#
# Check wether all required perl packages are installed.  If some
# are missing print a warning and skip the tests, but do not fail.

PERL_REQUIRE !=	perl -Mstrict -Mwarnings -e ' \
    eval { require BSD::Socket::Splice } or print $@@; \
    eval { require IO::Socket::INET6 } or print $@@; \
    eval { require Socket6 } or print $@@; \
'
.if ! empty (PERL_REQUIRE) && ! defined (TARGETS)
regress:
	@@echo "${PERL_REQUIRE}"
	@@echo install these perl packages for additional tests
.endif

# Fill out these variables if you want to test socket splicing with
# the relay process running on a remote machine.  You have to specify
# a local and remote ip address for the tcp connections.  To control
# the remote machine you need a hostname for ssh to log in.  All the
# test files must be in the same directory local and remote.

LOCAL_ADDR ?=
REMOTE_ADDR ?=
REMOTE_SSH ?=

# Automatically generate regress targets from test cases in directory.

.if ! defined (TARGETS)
ARGS !=			cd ${.CURDIR} && ls args-*.pl
TARGETS ?=		${ARGS}
.endif
REGRESS_TARGETS =	${TARGETS:S/^/run-regress-/}
CLEANFILES +=		*.log ktrace.out stamp-*

# Set variables so that make runs with and without obj directory.
# Only do that if necessary to keep visible output short.

.if ${.CURDIR} == ${.OBJDIR}
PERLINC =	-I..
PERLPATH =
.else
PERLINC =	-I${.CURDIR}/..
PERLPATH =	${.CURDIR}/
.endif

# make perl syntax check for all args files

.PHONY: syntax

syntax: stamp-syntax

stamp-syntax: ${ARGS}
.for a in ${ARGS}
	@@perl -c ${PERLPATH}$a
.endfor
	@@date >$@@
@


1.2
log
@Add performance test for socket splicing.  Two tcpbench processes
are used as server and client.  Between them is a relay process
that can either copy or splice the data.  Benchmarking is done for
TCP and UDP and for copy and splice.  All tests are executed on
localhost per default.  Alternatively the relay process can be
started on a remote machine.
Depending on hardware and environment socket splicing has increased
my throughput by 30% or up to 150% in this test.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.1.1.1 2013/01/03 17:36:38 bluhm Exp $
d7 3
d11 9
a19 3
TARGETS ?=		${ARGS}
.if empty (TARGETS)
ARGS !=			cd ${.CURDIR} && ls args-*.pl
a20 2
REGRESS_TARGETS =	${TARGETS:S/^/run-regress-/}
CLEANFILES +=		*.log ktrace.out stamp-*
d31 9
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
#	$OpenBSD$
d8 2
d11 1
a11 1
TARGETS ?=		${ARGS}
d13 1
a13 1
CLEANFILES =		*.log ktrace.out stamp-*
@


1.1.1.1
log
@Reengineer the socket splicing regression tests:
- Move the tests from splice to new sosplice directory for consistent naming.
- Split the API tests and the TCP splicing tests into separate directories.
- Create some tests for the upcoming UDP splicing.
- Tests can be run in obj directories now.
- The API tests can run both on a local and on a remote machine now.
- Fix the forking TCP tests which splice and read or write simultaneously.
- Bunch of little fixes for races in the tests.
- Deduplicate code, move checks into common functions.
@
text
@@
