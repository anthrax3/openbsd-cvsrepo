head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.10
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.8
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.6
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.4
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.1.1.1.0.10
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.8
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.4
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.2
	OPENBSD_5_3_BASE:1.1.1.1
	bluhm_20130103:1.1.1.1
	bluhm:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2014.08.18.21.53.40;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	54rS1ujzSdM1HbEe;

1.1
date	2013.01.03.17.36.39;	author bluhm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.01.03.17.36.39;	author bluhm;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Make out of band data tests more reliable.  As multiple tcp urgent
bytes cannot be handled correctly, allow another variation.
@
text
@# test inline out-of-band data

use strict;
use warnings;

our %args = (
    client => {
	func => \&write_oob,
    },
    relay => {
	oobinline => 1,
    },
    server => {
	func => \&read_oob,
	oobinline => 1,
    },
    len => 251,
    md5 => [
	"24b69642243fee9834bceee5b47078ae",
	"5aa8135a1340e173a7d7a5fa048a999e",
	"e5be513d9d2b877b6841bbb4790c67dc",
	"5cf8c3fd08f541ae07361a11f17213fe",
	"8d509bd55cfabd400403d857386b4956",
    ],
);
@


1.1
log
@Initial revision
@
text
@d23 1
@


1.1.1.1
log
@Reengineer the socket splicing regression tests:
- Move the tests from splice to new sosplice directory for consistent naming.
- Split the API tests and the TCP splicing tests into separate directories.
- Create some tests for the upcoming UDP splicing.
- Tests can be run in obj directories now.
- The API tests can run both on a local and on a remote machine now.
- Fix the forking TCP tests which splice and read or write simultaneously.
- Bunch of little fixes for races in the tests.
- Deduplicate code, move checks into common functions.
@
text
@@
