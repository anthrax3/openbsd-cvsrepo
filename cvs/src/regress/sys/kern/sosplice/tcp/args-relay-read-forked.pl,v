head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.16
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.14
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.4
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.12
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.10
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.8
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.2
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.1.1.1.0.2
	OPENBSD_5_3_BASE:1.1.1.1
	bluhm_20130103:1.1.1.1
	bluhm:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2013.03.30.20.12.32;	author bluhm;	state Exp;
branches;
next	1.1;

1.1
date	2013.01.03.17.36.39;	author bluhm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.01.03.17.36.39;	author bluhm;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Make forking socket splicing tests more reliable on slow machines.
Their intention is to test kernel stability.  Instead of failing,
add a timeout and ignore errors.
@
text
@# test concurrent read and splice

use strict;
use warnings;
use POSIX;
use Time::HiRes;

our %args = (
    client => {
	func => sub { errignore(@@_); write_stream(@@_); },
	len => 2**20,
	nocheck => 1,
    },
    relay => {
	# terminate in time on slow machines
	alarm => 25,
	down => "Alarm|Shutdown",
	nonblocking => 1,
	func => sub {
	    defined(my $pid = fork())
		or die "relay func: fork failed: $!";
	    if ($pid == 0) {
		alarm(25);
		my $n;
		do {
		    $n = sysread(STDIN, my $buf, 10);
		} while (!defined($n) || $n);
		POSIX::_exit(0);
	    }
	    # give the userland a moment to read, even if splicing
	    sleep .1;
	    relay(@@_);
	    kill 9, $pid;
	    waitpid($pid, 0);
	},
	# As sysread() may extract data from the socket before splicing starts,
	# the spliced content length is not reliable.  Disable the checks.
	nocheck => 1,
    },
    server => {
	func => sub { sleep 2; read_stream(@@_); },
	nocheck => 1,
    },
    len => 1048576,
    md5 => '6649bbec13f3d7efaedf01c0cfa54f88',
);
@


1.1
log
@Initial revision
@
text
@d10 1
d12 1
d15 3
d23 1
d34 1
@


1.1.1.1
log
@Reengineer the socket splicing regression tests:
- Move the tests from splice to new sosplice directory for consistent naming.
- Split the API tests and the TCP splicing tests into separate directories.
- Create some tests for the upcoming UDP splicing.
- Tests can be run in obj directories now.
- The API tests can run both on a local and on a remote machine now.
- Fix the forking TCP tests which splice and read or write simultaneously.
- Bunch of little fixes for races in the tests.
- Deduplicate code, move checks into common functions.
@
text
@@
