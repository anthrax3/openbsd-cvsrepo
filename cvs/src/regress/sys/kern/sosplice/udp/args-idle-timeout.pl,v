head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.18
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.16
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.6
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.14
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.12
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.10
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.8
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	bluhm_20130103:1.1.1.1
	bluhm:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2013.01.05.13.53.42;	author bluhm;	state Exp;
branches;
next	1.1;

1.1
date	2013.01.03.17.36.39;	author bluhm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.01.03.17.36.39;	author bluhm;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Add more tests for UDP socket splicing and enhance existing tests.
@
text
@# test idle timeout, must not be too long

use strict;
use warnings;

my @@lengths = (1, 2);

our %args = (
    client => {
	func => sub { sleep 1; write_datagram(@@_); },
	lengths => \@@lengths,
	sleep => 3,
	nocheck => 1,
    },
    relay => {
	idle => 2,
	timeout => 1,
    },
    len => 1,
    lengths => "1",
    md5 => "68b329da9893e34099c7d8ad5cb9c940",
);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
# test idle timeout
d6 2
d10 4
a13 1
	func => sub { sleep 1; write_datagram(@@_); sleep 3; },
d19 3
a21 2
    len => 251,
    md5 => "bc3a3f39af35fe5b1687903da2b00c7f",
@


1.1.1.1
log
@Reengineer the socket splicing regression tests:
- Move the tests from splice to new sosplice directory for consistent naming.
- Split the API tests and the TCP splicing tests into separate directories.
- Create some tests for the upcoming UDP splicing.
- Tests can be run in obj directories now.
- The API tests can run both on a local and on a remote machine now.
- Fix the forking TCP tests which splice and read or write simultaneously.
- Bunch of little fixes for races in the tests.
- Deduplicate code, move checks into common functions.
@
text
@@
