head	1.1;
access;
symbols
	OPENBSD_6_1:1.1.0.20
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.16
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.6
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.14
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.12
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.10
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.8
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.4
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.2
	OPENBSD_5_3_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2013.01.17.17.58.28;	author bluhm;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Improve socket splicing tests:
- One more UDP test.
- Enforce that kernel returns EFBIG where appropriate.
- Better comments in test files.
@
text
@# test maximum data length then copy packets,
# relay sleeps before processing

use strict;
use warnings;
use List::Util qw(sum);

my @@lengths = (5, 4, 3, 2, 1, 0);

our %args = (
    client => {
	lengths => \@@lengths,
    },
    relay => {
	func => sub { sleep 3; relay(@@_); relay_copy(@@_); },
	max => 9,
	big => 1,
	timeout => 1,
	nocheck => 1,
    },
    len => sum(@@lengths),
    lengths => "@@lengths",
    md5 => "464ddb107046ee0a42f43b202e826b8f",
);
@
