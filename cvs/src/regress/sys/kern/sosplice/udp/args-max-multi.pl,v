head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.20
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.16
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.6
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.14
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.12
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.10
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.8
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2;
locks; strict;
comment	@# @;


1.2
date	2013.01.17.17.58.28;	author bluhm;	state Exp;
branches;
next	1.1;

1.1
date	2013.01.05.13.53.42;	author bluhm;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Improve socket splicing tests:
- One more UDP test.
- Enforce that kernel returns EFBIG where appropriate.
- Better comments in test files.
@
text
@# test maximum data length with maximum reached and multiple packets in rcvbuf

use strict;
use warnings;

our %args = (
    client => {
	lengths => [ 1, 2, 3 ],
	nocheck => 1,
    },
    relay => {
	funcs => sub { sleep 3; relay(@@_); },
	max => 4,
	big => 0,
    },
    len => 3,
    lengths => "1 2",
    md5 => "52f58714e430f1fc84346961c240054b",
);
@


1.1
log
@Add more tests for UDP socket splicing and enhance existing tests.
@
text
@d1 1
a1 1
# test maximum data length with maximum reached with multiple packets in rcvbuf
d14 1
@

