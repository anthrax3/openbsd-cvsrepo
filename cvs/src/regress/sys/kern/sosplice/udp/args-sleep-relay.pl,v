head	1.1;
access;
symbols
	OPENBSD_6_2:1.1.0.22
	OPENBSD_6_2_BASE:1.1
	OPENBSD_6_1:1.1.0.20
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.16
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.6
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.14
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.12
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.10
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.8
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.4
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.2
	OPENBSD_5_3_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2013.01.05.13.53.42;	author bluhm;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Add more tests for UDP socket splicing and enhance existing tests.
@
text
@# test with multiple packets, relay sleeps before processing

use strict;
use warnings;
use List::Util qw(sum);

my @@lengths = (0, 1, 2, 3, 4, 5);

our %args = (
    client => {
	lengths => \@@lengths,
    },
    relay => {
	func => sub { sleep 3; relay(@@_); },
    },
    len => sum(@@lengths),
    lengths => "@@lengths",
    md5 => "553af7b8fc0e205ead2562ab61a2ad13",
);
@
