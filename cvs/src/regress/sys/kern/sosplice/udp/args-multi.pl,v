head	1.3;
access;
symbols
	OPENBSD_6_0:1.3.0.8
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.4
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.2.0.10
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.8
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	bluhm_20130103:1.1.1.1
	bluhm:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2014.08.18.21.49.17;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	43PmjVxjCajzbZLL;

1.2
date	2013.01.05.13.53.42;	author bluhm;	state Exp;
branches;
next	1.1;

1.1
date	2013.01.03.17.36.39;	author bluhm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.01.03.17.36.39;	author bluhm;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Make the multiple UDP packet test more reliable.  The receive buffer
limit also counts the mbufs in it, so packets could be dropped.
Increase both send and receive socket buffer size.
@
text
@# test with mutiple packets

use strict;
use warnings;
use List::Util qw(sum);

my @@lengths = (251, 16384, 0, 1, 2, 3, 4, 5);

our %args = (
    client => {
	lengths => \@@lengths,
	sndbuf => 30000,
    },
    relay => {
	rcvbuf => 30000,
	sndbuf => 30000,
    },
    server => {
	rcvbuf => 30000,
    },
    len => sum(@@lengths),
    lengths => "@@lengths",
    md5 => "544464f20384567028998e1a1a4c5b1e",
);
@


1.2
log
@Add more tests for UDP socket splicing and enhance existing tests.
@
text
@d12 1
a12 1
	sndbuf => 20000,
d15 2
a16 2
	rcvbuf => 20000,
	sndbuf => 20000,
d19 1
a19 1
	rcvbuf => 20000,
@


1.1
log
@Initial revision
@
text
@a18 1
	num => scalar @@lengths,
d23 1
a23 1
    md5 => "f5b58b46c97b566fc8d34080c475d637",
@


1.1.1.1
log
@Reengineer the socket splicing regression tests:
- Move the tests from splice to new sosplice directory for consistent naming.
- Split the API tests and the TCP splicing tests into separate directories.
- Create some tests for the upcoming UDP splicing.
- Tests can be run in obj directories now.
- The API tests can run both on a local and on a remote machine now.
- Fix the forking TCP tests which splice and read or write simultaneously.
- Bunch of little fixes for races in the tests.
- Deduplicate code, move checks into common functions.
@
text
@@
