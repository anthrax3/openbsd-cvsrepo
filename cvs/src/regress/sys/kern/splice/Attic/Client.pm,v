head	1.3;
access;
symbols
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.6
	OPENBSD_5_0:1.1.0.4
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2013.01.03.17.48.15;	author bluhm;	state dead;
branches;
next	1.2;

1.2
date	2012.07.09.14.23.17;	author bluhm;	state Exp;
branches;
next	1.1;

1.1
date	2011.01.07.22.06.08;	author bluhm;	state Exp;
branches;
next	;


desc
@@


1.3
log
@The socket splicing tests have been moved from directory splice to
sosplice.
@
text
@#	$OpenBSD: Client.pm,v 1.2 2012/07/09 14:23:17 bluhm Exp $

# Copyright (c) 2010-2012 Alexander Bluhm <bluhm@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

package Client;
use parent 'Proc';
use Carp;
use Socket qw(IPPROTO_TCP TCP_NODELAY);
use Socket6;
use IO::Socket;
use IO::Socket::INET6;

sub new {
	my $class = shift;
	my %args = @@_;
	$args{logfile} ||= "client.log";
	$args{up} ||= "Connected";
	$args{down} ||= $args{alarm} ? "Alarm" :
	    "Shutdown|Broken pipe|Connection reset by peer";
	my $self = Proc::new($class, %args);
	$self->{connectdomain}
	    or croak "$class connect domain not given";
	$self->{connectaddr}
	    or croak "$class connect addr not given";
	$self->{connectport}
	    or croak "$class connect port not given";
	return $self;
}

sub child {
	my $self = shift;

	my $cs = IO::Socket::INET6->new(
	    Proto	=> "tcp",
	    Domain	=> $self->{connectdomain},
	    Blocking	=> ($self->{nonblocking} ? 0 : 1),
	) or die ref($self), " socket connect failed: $!";
	if ($self->{oobinline}) {
		setsockopt($cs, SOL_SOCKET, SO_OOBINLINE, pack('i', 1))
		    or die ref($self), " set oobinline connect failed: $!";
	}
	if ($self->{sndbuf}) {
		setsockopt($cs, SOL_SOCKET, SO_SNDBUF,
		    pack('i', $self->{sndbuf}))
		    or die ref($self), " set sndbuf connect failed: $!";
	}
	if ($self->{rcvbuf}) {
		setsockopt($cs, SOL_SOCKET, SO_RCVBUF,
		    pack('i', $self->{rcvbuf}))
		    or die ref($self), " set rcvbuf connect failed: $!";
	}
	setsockopt($cs, IPPROTO_TCP, TCP_NODELAY, pack('i', 1))
	    or die ref($self), " set nodelay connect failed: $!";
	my @@rres = getaddrinfo($self->{connectaddr}, $self->{connectport},
	    $self->{connectdomain}, SOCK_STREAM);
	$cs->connect($rres[3])
	    or die ref($self), " connect failed: $!";
	print STDERR "connect sock: ",$cs->sockhost()," ",$cs->sockport(),"\n";
	print STDERR "connect peer: ",$cs->peerhost()," ",$cs->peerport(),"\n";

	open(STDOUT, '>&', $cs)
	    or die ref($self), " dup STDOUT failed: $!";
	open(STDIN, '<&', $cs)
	    or die ref($self), " dup STDIN failed: $!";
}

1;
@


1.2
log
@Modern Perl deferes signal handlers between opcodes.  To send TCP
resets at the indended moments into the spliced stream, terminate
the client or server process with the alarm default action.
@
text
@d1 1
a1 1
#	$OpenBSD: Client.pm,v 1.1 2011/01/07 22:06:08 bluhm Exp $
@


1.1
log
@Add kernel regression tests for socket splicing.
@
text
@d1 1
a1 1
#	$OpenBSD$
d3 1
a3 1
# Copyright (c) 2010 Alexander Bluhm <bluhm@@openbsd.org>
d33 2
a34 1
	$args{down} ||= "Shutdown|Broken pipe|Connection reset by peer";
@

