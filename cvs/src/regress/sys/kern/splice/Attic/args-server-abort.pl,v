head	1.4;
access;
symbols
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.4
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2013.01.03.17.48.15;	author bluhm;	state dead;
branches;
next	1.3;

1.3
date	2012.07.09.14.23.17;	author bluhm;	state Exp;
branches;
next	1.2;

1.2
date	2011.03.13.03.15.41;	author bluhm;	state Exp;
branches;
next	1.1;

1.1
date	2011.01.07.22.06.08;	author bluhm;	state Exp;
branches;
next	;


desc
@@


1.4
log
@The socket splicing tests have been moved from directory splice to
sosplice.
@
text
@# test server reads and exits after reading some data

use strict;
use warnings;

our %args = (
    client => {
	func => sub { errignore(@@_); write_char(@@_); },
	len => 2**30,  # not reached
	sndbuf => 2**10,  # small buffer triggers error during write
	# the error message seems to be timing dependent
	down => "Client print failed: (Broken pipe|Connection reset by peer)",
	nocheck => 1,
	error => 54,
    },
    relay => {
	func => sub { errignore(@@_); relay(@@_); },
	rcvbuf => 2**10,
	sndbuf => 2**10,
	down => "Broken pipe|Connection reset by peer",
	nocheck => 1,
	errorin => 0,  # syscall has read the error and resetted it
	errorout => 54,
    },
    server => {
	alarm => 3,
	nocheck => 1,
    },
    noecho => 1,
);

1;
@


1.3
log
@Modern Perl deferes signal handlers between opcodes.  To send TCP
resets at the indended moments into the spliced stream, terminate
the client or server process with the alarm default action.
@
text
@@


1.2
log
@Make regression tests more reliable.
@
text
@d26 1
a26 2
	func => sub { $SIG{ALRM} = sub { print STDERR "\nShutdown\n"; exit 0 };
	  alarm(3); read_char(@@_); },
@


1.1
log
@Add kernel regression tests for socket splicing.
@
text
@d13 1
d28 1
@

