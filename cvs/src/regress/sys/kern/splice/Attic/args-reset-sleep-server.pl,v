head	1.3;
access;
symbols
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2;
locks; strict;
comment	@# @;


1.3
date	2013.01.03.17.48.15;	author bluhm;	state dead;
branches;
next	1.2;

1.2
date	2012.07.09.14.23.17;	author bluhm;	state Exp;
branches;
next	1.1;

1.1
date	2012.07.09.09.48.04;	author bluhm;	state Exp;
branches;
next	;


desc
@@


1.3
log
@The socket splicing tests have been moved from directory splice to
sosplice.
@
text
@# test delay before server read, client sends reset during splice

use strict;
use warnings;

our %args = (
    client => {
	alarm => 1,
	func => sub { solingerout(@@_); write_char(@@_); },
	len => 2**19,
	nocheck => 1,
    },
    relay => {
	func => sub { errignore(@@_); relay(@@_); },
	rcvbuf => 2**10,
	sndbuf => 2**10,
	down => "Broken pipe|Connection reset by peer",
	nocheck => 1,
    },
    server => {
	func => sub { sleep 3; read_char(@@_); },
	nocheck => 1,
    },
    len => 131072,
    md5 => "31e5ad3d0d2aeb1ad8aaa847dfa665c2",
);

1;
@


1.2
log
@Modern Perl deferes signal handlers between opcodes.  To send TCP
resets at the indended moments into the spliced stream, terminate
the client or server process with the alarm default action.
@
text
@@


1.1
log
@Add a socket splicing test that sends a reset from the client while
the socket buffers are filled.
@
text
@d8 2
a9 2
	func => sub { $SIG{ALRM} = sub { print STDERR "\nShutdown\n"; exit 0 };
	    solingerout(@@_); alarm(1); write_char(@@_); },
@

