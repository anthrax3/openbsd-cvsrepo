head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.32
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.30
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.26
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.16
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.24
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.22
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.20
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.18
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.14
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.12
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.10
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.8
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.4
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.2
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.24
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.26
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.22
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.20
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.18
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.16
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.14
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.12
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.10
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.8
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.6
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.4
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.2
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.2.0.6
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2010.06.21.23.13.27;	author pirofti;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.15.23.35.12;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2002.05.21.22.01.34;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2002.04.30.23.22.58;	author millert;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Fix fpe handler in regress test. Tested and `looks good' phessler@@.
@
text
@/* Placed in the public domain by Todd C. Miller on April 30, 2002 */

#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <unistd.h>

void check_oflow(void);
void check_div0(int);
void timedout(int);
void div0_handler(int);
__dead void usage(void);

/*
 * Check signal(SIGFPE, SIG_IGN) for overflow and divide by zero.
 */
int
main(int argc, char **argv)
{
	int ch, oflag, zflag;

	oflag = zflag = 0;
	while ((ch = getopt(argc, argv, "oz")) != -1) {
		switch (ch) {
		case 'o':
			oflag = 1;
			break;
		case 'z':
			zflag = 1;
			break;
		}
	}

	if (oflag && zflag)
		usage();

	signal(SIGFPE, div0_handler);
	signal(SIGALRM, timedout);

	if (oflag)
		check_oflow();
	else
		check_div0(0);

	exit(0);
}

void
check_oflow(void)
{
	double d, od;

	od = 0;
	d = 256;
	do {
		od = d;
		alarm(10);
		d *= d;
		alarm(0);
	} while (d != od);
}

void
check_div0(int zero)
{
	int i;

	alarm(10);
	i = 1 / zero;
	alarm(0);
}

void
timedout(int sig)
{
	_exit(1);
}

void
div0_handler(int sig)
{
	_exit(0);
}

__dead void
usage(void)
{
	extern char *__progname;

	(void)fprintf(stderr, "usage: %s -o | -z\n", __progname);
	exit(1);
}
@


1.3
log
@Fool gcc3 into not detecting we want a divide by zero at compile time.
@
text
@d11 1
d37 1
a37 1
	signal(SIGFPE, SIG_IGN);
d77 6
@


1.2
log
@public domain
@
text
@d9 1
a9 1
void check_div0(void);
d42 1
a42 1
		check_div0();
d63 1
a63 1
check_div0(void)
d68 1
a68 1
	i = 1 / 0;
@


1.1
log
@Test some floating point exception problems when SIG_IGN is in effect.
@
text
@d1 2
a15 1

@

