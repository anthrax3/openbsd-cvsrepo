head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.52
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.2.0.50
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.46
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.36
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.44
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.42
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.40
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.38
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.34
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.32
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.30
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.28
	OPENBSD_5_0:1.2.0.26
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.24
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.22
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.18
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.20
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.16
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.14
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.12
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.10
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.8
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.6
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.4
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.2
	OPENBSD_3_8_BASE:1.2;
locks; strict;
comment	@ * @;


1.2
date	2005.07.15.07.28.33;	author otto;	state Exp;
branches;
next	1.1;

1.1
date	2005.07.13.14.53.54;	author otto;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Make globals accessed from sig handler volatile. From millert@@
@
text
@/*	$OpenBSD: fpsig.c,v 1.1 2005/07/13 14:53:54 otto Exp $	*/

/*
 * Public domain.  2005, Otto Moerbeek
 *
 * Try to check if fp registers are properly saved and restored while
 * calling a signal hander.  This is not supposed to catch all that
 * can go wrong, but trashed fp registers will typically get caught.
 */
 
#include <err.h>
#include <signal.h>
#include <unistd.h>

#define LIMIT	10.0

volatile sig_atomic_t count;

volatile double g1;
volatile double g2;

void
handler(int signo)
{
	double a, b, c = 0.0;

	if (signo)
		alarm(1);
	for (a = 0.0; a < LIMIT; a++)
		for (b = 0.0; b < LIMIT; b++)
			c += a * a + b * b;

	if (signo) {
		g1 = c;
		count++;
	} else
		g2 = c;
}

int
main()
{
	signal(SIGALRM, handler);
	/* initialize global vars */
	handler(0);
	handler(1);
	
	while (count < 10) {
		handler(0);
		if (g1 != g2)
			errx(1, "%f %f", g1, g2);
	}
	return (0);
}
@


1.1
log
@As mickey@@ pointed out, this test does not belong in libm. Move to
correct place.
@
text
@d1 1
a1 1
/*	$OpenBSD: fpsig.c,v 1.1 2005/07/13 07:08:00 otto Exp $	*/
d8 1
a8 1
 * can go wrong, but trashed fp regsiters will typically get caught.
d19 2
a20 2
double g1;
double g2;
@

