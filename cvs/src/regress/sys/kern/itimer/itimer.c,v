head	1.2;
access;
symbols
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.12
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.10
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.8
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.6
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.4
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.1.0.38
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.36
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.34
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.32
	OPENBSD_5_0:1.1.0.30
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.28
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.26
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.22
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.24
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.20
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.18
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.16
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.14
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.12
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.10
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.8
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.6
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.4
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.2
	OPENBSD_3_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.2
date	2013.09.12.23.06.44;	author krw;	state Exp;
branches;
next	1.1;

1.1
date	2004.07.28.21.32.51;	author art;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Misc time_t tweaks. %ld / (long)tv_sec -> %lld / (long long)tv_sec.
Eliminate unneeded casts. suggestions from & ok millert@@ guenther@@
@
text
@/*	$OpenBSD: itimer.c,v 1.1 2004/07/28 21:32:51 art Exp $	*/
/*
 *	Written by Artur Grabowski <art@@openbsd.org> 2004 Public Domain.
 */
#include <sys/types.h>
#include <sys/time.h>
#include <sys/resource.h>

#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <time.h>
#include <err.h>
#include <signal.h>

void sighand(int);

volatile sig_atomic_t ticks;

#define TIMEOUT	2

int
main(int argc, char **argv)
{
	struct timeval stv, tv;
	struct itimerval itv;
	struct rusage ru;
	int which, sig;
	int ch;

	while ((ch = getopt(argc, argv, "rvp")) != -1) {
		switch (ch) {
		case 'r':
			which = ITIMER_REAL;
			sig = SIGALRM;
			break;
		case 'v':
			which = ITIMER_VIRTUAL;
			sig = SIGVTALRM;
			break;
		case 'p':
			which = ITIMER_PROF;
			sig = SIGPROF;
			break;
		default:
			fprintf(stderr, "Usage: itimer [-rvp]\n");
			exit(1);
		}
	}

	signal(sig, sighand);

	itv.it_value.tv_sec = 0;
	itv.it_value.tv_usec = 100000;
	itv.it_interval = itv.it_value;

	if (setitimer(which, &itv, NULL) != 0)
		err(1, "setitimer");

	gettimeofday(&stv, NULL);
	while (ticks != TIMEOUT * 10)
		;

	switch (which) {
	case ITIMER_REAL:
		gettimeofday(&tv, NULL);
		timersub(&tv, &stv, &tv);
		break;
	case ITIMER_VIRTUAL:
	case ITIMER_PROF:
		if (getrusage(RUSAGE_SELF, &ru) != 0)
			err(1, "getrusage");
		tv = ru.ru_utime;
		break;
	}
	stv.tv_sec = TIMEOUT;
	stv.tv_usec = 0;

	if (timercmp(&stv, &tv, <))
		timersub(&tv, &stv, &tv);
	else
		timersub(&stv, &tv, &tv);

	if (tv.tv_sec != 0 || tv.tv_usec > 100000)
		errx(1, "timer difference too big: %lld.%ld",
		    (long long)tv.tv_sec, tv.tv_usec);

	return (0);
}

void
sighand(int signum)
{
	ticks++;
}
@


1.1
log
@Very crude tests that check that itimers are at least pretending to work.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d85 2
a86 2
		errx(1, "timer difference too big: %ld.%ld", (long)tv.tv_sec,
		    (long)tv.tv_usec);
@

