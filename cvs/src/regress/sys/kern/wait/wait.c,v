head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.2
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.0.52
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.42
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.50
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.48
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.46
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.44
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.40
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.38
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.36
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.34
	OPENBSD_5_0:1.1.0.32
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.30
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.28
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.24
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.26
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.22
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.20
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.18
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.16
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.14
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.12
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.10
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.8
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.6
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.4
	OPENBSD_3_6_BASE:1.1
	OPENBSD_3_5:1.1.0.2
	OPENBSD_3_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.2
date	2017.03.08.19.25.00;	author deraadt;	state Exp;
branches;
next	1.1;
commitid	CDMDLOhIsT4H2YHY;

1.1
date	2003.11.04.07.38.08;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.2
log
@don't use __syscall to emulate _exit, just call _exit
@
text
@/*	$OpenBSD: wait.c,v 1.1 2003/11/04 07:38:08 mickey Exp $	*/
/*
 *	Written by Artur Grabowski <art@@openbsd.org> 2002 Public Domain.
 */
#include <sys/types.h>
#include <sys/syscall.h>
#include <sys/wait.h>
#include <unistd.h>
#include <stdlib.h>
#include <err.h>

int
main()
{
	int status;

	switch (fork()) {
	case -1:
		err(1, "fork");
	case 0:
		_exit(17);
		abort();
	}

	if (wait(&status) < 0)
		err(1, "wait");

	if (!WIFEXITED(status))
		errx(1, "child didn't exit gracefully");

	if (WEXITSTATUS(status) != 17)
		errx(1, "wrong exit status");

	return 0;
}
@


1.1
log
@old __syscall test is really a wait() test
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d17 1
a17 1
	switch(fork()) {
d21 1
a21 1
		__syscall((u_int64_t)SYS_exit, 17, 0);
@

