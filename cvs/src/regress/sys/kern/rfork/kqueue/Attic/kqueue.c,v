head	1.2;
access;
symbols
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.8
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.4
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.2
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.2
date	2012.04.12.14.00.22;	author guenther;	state dead;
branches;
next	1.1;

1.1
date	2010.08.04.06.05.26;	author guenther;	state Exp;
branches;
next	;


desc
@@


1.2
log
@rfork RIP
@
text
@/*	$OpenBSD: kqueue.c,v 1.1 2010/08/04 06:05:26 guenther Exp $	*/
/*
 * Written by Philip Guenther <guenther@@openbsd.org>, 2010 Public Domain.
 *
 * Verify that having a process exit while it has knotes attached to it
 * that are from a kqueue that is open in another process doesn't cause
 * problems.
 */
#include <sys/param.h>
#include <sys/event.h>
#include <sys/time.h>
#include <sys/wait.h>
#include <err.h>
#include <fcntl.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int
main(int argc, char *argv[])
{
	struct kevent ev;
	int status;
	int kq;

	if ((kq = kqueue()) < 0)
		err(1, "kqueue");

	signal(SIGINT, SIG_IGN);
	EV_SET(&ev, SIGINT, EVFILT_SIGNAL, EV_ADD|EV_ENABLE, 0, 0, 0);

	switch(rfork(RFPROC)) {
	case -1:
		err(1, "rfork");
	case 0:
		if (kevent(kq, &ev, 1, NULL, 0, NULL))
			err(1, "kevent");
		raise(SIGINT);
		_exit(0);
	}

	if (wait(&status) < 0)
		err(1, "wait");

	if (!WIFEXITED(status))
		err(1, "child error");

	return WEXITSTATUS(status) != 0;
}
@


1.1
log
@Regression test for the recent rfork+kqueue fix
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@

