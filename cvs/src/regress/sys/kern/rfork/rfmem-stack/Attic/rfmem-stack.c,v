head	1.6;
access;
symbols
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.36
	OPENBSD_5_0:1.5.0.34
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.32
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.30
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.26
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.28
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.24
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.22
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.20
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.18
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.16
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.14
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.3.0.6
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.4
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3;
locks; strict;
comment	@ * @;


1.6
date	2012.04.12.14.00.22;	author guenther;	state dead;
branches;
next	1.5;

1.5
date	2003.08.02.01.24.37;	author david;	state Exp;
branches;
next	1.4;

1.4
date	2003.07.31.21.48.09;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2002.02.22.01.06.58;	author art;	state Exp;
branches;
next	1.2;

1.2
date	2002.02.21.21.14.37;	author art;	state Exp;
branches;
next	1.1;

1.1
date	2002.02.21.21.07.11;	author art;	state Exp;
branches;
next	;


desc
@@


1.6
log
@rfork RIP
@
text
@/*	$OpenBSD: rfmem-stack.c,v 1.5 2003/08/02 01:24:37 david Exp $	*/
/*
 * Written by Artur Grabowski <art@@openbsd.org>, 2002 Public Domain.
 */
#include <sys/param.h>
#include <sys/wait.h>
#include <sys/mman.h>

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <err.h>

#define MAGIC "inherited"

int
main(int argc, char *argv[])
{
	char *map, *map2;
	int status;

	map = alloca(sizeof(MAGIC));
	memset(map, 0, sizeof(MAGIC));

	map2 = alloca(sizeof(MAGIC));
	memset(map2, 0, sizeof(MAGIC));

	switch(rfork(RFFDG|RFPROC|RFMEM)) {
	case -1:
		err(1, "fork");
	case 0:
		memcpy(map, MAGIC, sizeof(MAGIC));
		sleep(1);
		if (memcmp(map2, MAGIC, sizeof(MAGIC)) == 0) {
			write(2, "child stack polluted\n", 21);
			_exit(1);
		}
		_exit(0);
	}

	memcpy(map2, MAGIC, sizeof(MAGIC));

	if (wait(&status) < 0)
		err(1, "wait");

	if (!WIFEXITED(status))
		err(1, "child error");

	if (memcmp(map, MAGIC, sizeof(MAGIC)) == 0)
		return 1;

	return WEXITSTATUS(status) != 0;
}
@


1.5
log
@add missing includes
ok deraadt@@ tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rfmem-stack.c,v 1.4 2003/07/31 21:48:09 deraadt Exp $	*/
@


1.4
log
@various cleanups; david says results are same
@
text
@d1 1
a1 1
/*	$OpenBSD: rfmem-stack.c,v 1.3 2002/02/22 01:06:58 art Exp $	*/
d12 1
@


1.3
log
@Ugh. fix numerous bugs.
@
text
@d1 1
a1 1
/*	$OpenBSD: rfmem-stack.c,v 1.2 2002/02/21 21:14:37 art Exp $	*/
d17 1
a17 1
main()
@


1.2
log
@Yeah, yeah, don't use stderr in a child sharing memory with the parent, gubble, gubble...
@
text
@d1 1
a1 1
/*	$OpenBSD: rfmem-stack.c,v 1.1 2002/02/21 21:07:11 art Exp $	*/
d34 1
a34 1
		if (memcmp(map2, MAGIC, sizeof(MAGIC)) == 0);
d36 2
d40 2
@


1.1
log
@Make sure that the stack is not shared.
@
text
@d1 1
a1 1
/*	$OpenBSD: rfmem.c,v 1.1 2002/02/17 05:10:40 art Exp $	*/
d35 1
a35 1
			fprintf(stderr, "child stack polluted\n");
d49 1
a49 1
}@

