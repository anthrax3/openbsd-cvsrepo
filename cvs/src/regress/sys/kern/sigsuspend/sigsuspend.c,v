head	1.2;
access;
symbols
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.2.0.30
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.26
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.16
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.24
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.22
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.20
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.18
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.14
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.12
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.10
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.8
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.4
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.2
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.0.18
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.20
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.16
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.14
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.12
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.10
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.8
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.6
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.4
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.2
	OPENBSD_3_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.2
date	2010.06.20.17.57.09;	author phessler;	state Exp;
branches;
next	1.1;

1.1
date	2005.05.31.09.27.28;	author art;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Add some missing includes, so we do not have implicit function
declarations.

OK miod@@, millert@@
@
text
@/*	$OpenBSD: sigsuspend.c,v 1.1 2005/05/31 09:27:28 art Exp $	*/
/*
 *	Written by Artur Grabowski <art@@openbsd.org> 2005, Public domain.
 */

#include <stdlib.h>
#include <signal.h>
#include <string.h>
#include <unistd.h>
#include <err.h>
#include <sys/types.h>
#include <sys/wait.h>

sig_atomic_t gotusr1;
sig_atomic_t gotusr2;

void
usr1handler(int signo)
{
	gotusr1 = 1;
}

void
usr2handler(int signo)
{
	gotusr2 = 1;
}

int
main()
{
	sigset_t set, oset;
	struct sigaction sa;
	pid_t pid, ppid;
	int status;

	ppid = getpid();

	memset(&sa, 0, sizeof(sa));
	sigemptyset(&sa.sa_mask);
	sa.sa_handler = usr1handler;
	if (sigaction(SIGUSR1, &sa, NULL))
		err(1, "sigaction(USR1)");

	sa.sa_handler = usr2handler;
	if (sigaction(SIGUSR2, &sa, NULL))
		err(1, "sigaction(USR2)");

	/*
	 * Set the procmask to mask the early USR1 the child will send us.
	 */
	sigemptyset(&set);
	sigaddset(&set, SIGUSR1);
	sigaddset(&set, SIGUSR2);
	if (sigprocmask(SIG_BLOCK, &set, &oset))
		err(1, "sigprocmask");

	switch((pid = fork())) {
	case 0:
		/*
		 * In the child. 
		 */

		kill(ppid, SIGUSR1);	/* Tell the parent we're ready. */

		sigemptyset(&set);
		sigaddset(&set, SIGUSR2);
		sigsuspend(&set);

		/*
		 * Check that sigsuspend didn't change the signal mask.
		 */
		if (sigprocmask(SIG_SETMASK, NULL, &oset))
			err(1, "sigprocmask");
		if (!sigismember(&oset, SIGUSR1) ||
		    !sigismember(&oset, SIGUSR2))
			errx(1, "sigprocmask is bad");

		/* Check that we got the sigusr1 that we expected. */
		if (!gotusr1)
			errx(1, "didn't get usr1");
		if (gotusr2)
			errx(1, "got incorrect usr2");
		
		sigemptyset(&set);
		sigaddset(&set, SIGUSR1);
		sigsuspend(&set);

		if (!gotusr2)
			errx(1, "didn't get usr2");

		_exit(0);
	case -1:
		err(1, "fork");
	default:
		/*
		 * In the parent.
		 * Waiting for the initial USR1 that tells us the child
		 * is ready.
		 */
		while (gotusr1 == 0)
			sigsuspend(&oset);

		/*
		 * Check that sigsuspend didn't change the signal mask.
		 */
		if (sigprocmask(SIG_SETMASK, NULL, &oset))
			err(1, "sigprocmask");
		if (!sigismember(&oset, SIGUSR1) ||
		    !sigismember(&oset, SIGUSR2))
			errx(1, "sigprocmask is bad");

		/*
		 * Deliberately send USR2 first to confuse.
		 */
		kill(pid, SIGUSR2);
		kill(pid, SIGUSR1);

		if (waitpid(pid, &status, 0) != pid)
			err(1, "waitpid");

		if (WIFEXITED(status))
			exit(WEXITSTATUS(status));
		exit(1);
	}
	/* NOTREACHED */
}


@


1.1
log
@Test the semantics of sigsuspend.

For some reason this test doesn't fail which means the code is correct and
my reading of the code is incorrect. That can be either a good or bad
sign depending on how you look at it.

millert@@ says it "looks correct"
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d5 2
d8 1
@

