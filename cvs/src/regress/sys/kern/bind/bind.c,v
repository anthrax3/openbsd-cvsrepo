head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.0.8
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.2
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.6
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.4
	OPENBSD_5_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.2
date	2017.02.25.07.28.32;	author jsg;	state Exp;
branches;
next	1.1;
commitid	o45S2hSKbgrOD8tL;

1.1
date	2015.02.10.00.44.55;	author claudio;	state Exp;
branches;
next	;
commitid	ogwBC353q19Gi8MM;


desc
@@


1.2
log
@Add missing includes to avoid implicit function declarations.
@
text
@#include <sys/socket.h>
#include <netinet/in.h>
#include <strings.h>
#include <string.h>
#include <err.h>

int
main(int argc, char **argv)
{
	struct sockaddr_in addr1, addr2;
	int fd1, fd2, enable = 1;

	addr1.sin_family = AF_INET;
	addr1.sin_port = htons(6666);
	addr1.sin_addr.s_addr = INADDR_ANY;
	/* fill sin_zero explicitly with garbage */
	memset(addr1.sin_zero, 0xd0, sizeof(addr1.sin_zero));

	addr2.sin_family = AF_INET;
	addr2.sin_port = htons(6666);
	addr2.sin_addr.s_addr = htonl(INADDR_LOOPBACK);
	/* fill sin_zero explicitly with garbage */
	memset(addr2.sin_zero, 0xd0, sizeof(addr2.sin_zero));


	if ((fd1 = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)) == -1)
		err(1, "socket1");

	if (setsockopt(fd1, SOL_SOCKET, SO_REUSEPORT, &enable,
	    sizeof(int)) < 0)
		err(1, "setsockopt1");

	if (bind(fd1, (struct sockaddr *)&addr1, sizeof(addr1)) == -1)
		err(1, "bind1");

	if ((fd2 = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)) == -1)
		err(1, "socket1");

	if (setsockopt(fd2, SOL_SOCKET, SO_REUSEPORT, &enable,
	    sizeof(int)) < 0)
		err(1, "setsockopt2");

	if (bind(fd2, (struct sockaddr *)&addr2, sizeof(addr2)) == -1)
		err(1, "bind2");

	return 0;
}
@


1.1
log
@Test that bind works the way it should. This fails at the moment because
of the garbage in sin_zero.
@
text
@d4 1
@

