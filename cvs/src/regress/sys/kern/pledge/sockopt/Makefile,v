head	1.3;
access;
symbols
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	bluhm_20170328:1.1.1.1
	bluhm:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2017.04.12.11.55.41;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	7QXrc9Z5UylzcnD9;

1.2
date	2017.03.28.17.41.56;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	KtQivMSR9da0zJev;

1.1
date	2017.03.28.16.12.45;	author bluhm;	state Exp;
branches
	1.1.1.1;
next	;
commitid	oGGFVmA63UGLXlJk;

1.1.1.1
date	2017.03.28.16.12.45;	author bluhm;	state Exp;
branches;
next	;
commitid	oGGFVmA63UGLXlJk;


desc
@@


1.3
log
@Add comment how the test works.
@
text
@# $OpenBSD$

# This table lists pledge(2), socket(2), getsockopt(2), and setsockopt(2)
# calls with their expected outcome.  The constants are compiled into
# the sockopt.c program using the C preprocessor.  For each line the
# program is built and run.  The test checks the ktrace output and
# core file.

#	promises	domain		type		protocol	call	level		optname			optval	errno		abort
TESTS =	inet		AF_INET		SOCK_STREAM	IPPROTO_TCP	get	SOL_SOCKET	SO_ERROR		0	0		0	\
	inet		AF_INET		SOCK_STREAM	IPPROTO_TCP	set	SOL_SOCKET	SO_ERROR		0	ENOPROTOOPT	0	\
	inet		AF_INET		SOCK_DGRAM	IPPROTO_UDP	set	SOL_SOCKET	SO_RCVBUF		10000	0		0	\
	unix		AF_LOCAL	SOCK_STREAM	0		set	SOL_SOCKET	SO_RCVBUF		10000	0		0	\
	inet		AF_INET		SOCK_STREAM	IPPROTO_TCP	get	SOL_SOCKET	SO_TIMESTAMP		0	0		0	\
	inet		AF_INET		SOCK_STREAM	IPPROTO_TCP	set	SOL_SOCKET	SO_RTABLE		0	22		inet	\
	0		AF_INET		SOCK_STREAM	IPPROTO_TCP	set	SOL_SOCKET	SO_RTABLE		0	0		0	\
	inet		AF_INET		SOCK_STREAM	IPPROTO_TCP	set	IPPROTO_TCP	TCP_NODELAY		0	0		0	\
	inet		AF_INET		SOCK_DGRAM	IPPROTO_UDP	get	IPPROTO_IP	IP_OPTIONS		0	0		0	\
	inet		AF_INET		SOCK_DGRAM	IPPROTO_UDP	set	IPPROTO_IP	IP_OPTIONS		1	1		inet	\
	inet		AF_INET		SOCK_DGRAM	IPPROTO_UDP	get	IPPROTO_IP	IP_TOS			0	0		0	\
	inet		AF_INET		SOCK_DGRAM	IPPROTO_UDP	set	IPPROTO_IP	IP_TOS			1	0		0	\
	0		AF_INET		SOCK_DGRAM	IPPROTO_UDP	set	IPPROTO_IP	IP_MULTICAST_IF		1	49		0	\
	inet		AF_INET		SOCK_DGRAM	IPPROTO_UDP	set	IPPROTO_IP	IP_MULTICAST_IF		1	1		inet	\
	inet+mcast	AF_INET		SOCK_DGRAM	IPPROTO_UDP	set	IPPROTO_IP	IP_MULTICAST_IF		1	49		0	\
	inet		AF_INET		SOCK_DGRAM	IPPROTO_UDP	set	IPPROTO_IP	IP_MULTICAST_LOOP	1	1		inet	\
	inet+mcast	AF_INET		SOCK_DGRAM	IPPROTO_UDP	set	IPPROTO_IP	IP_MULTICAST_LOOP	1	22		0	\
	inet		AF_INET		SOCK_DGRAM	IPPROTO_UDP	get	IPPROTO_ICMP	0			0	1		inet	\
	inet		AF_INET6	SOCK_DGRAM	IPPROTO_UDP	set	IPPROTO_ICMPV6	0			0	1		inet	\
	inet		AF_INET6	SOCK_DGRAM	IPPROTO_UDP	get	IPPROTO_IPV6	IPV6_TCLASS		0	0		0	\
	inet		AF_INET6	SOCK_DGRAM	IPPROTO_UDP	get	IPPROTO_IPV6	IPV6_V6ONLY		0	1		inet	\
	inet		AF_INET6	SOCK_DGRAM	IPPROTO_UDP	set	IPPROTO_IPV6	IPV6_MULTICAST_LOOP	1	1		inet	\
	inet+mcast	AF_INET6	SOCK_DGRAM	IPPROTO_UDP	set	IPPROTO_IPV6	IPV6_MULTICAST_LOOP	1	0		0	\
	inet		AF_INET6	SOCK_DGRAM	IPPROTO_UDP	set	IPPROTO_IPV6	IPV6_JOIN_GROUP		0	1		inet	\
	inet+mcast	AF_INET6	SOCK_DGRAM	IPPROTO_UDP	set	IPPROTO_IPV6	IPV6_JOIN_GROUP		0	EINVAL		0	\

WARNINGS =	yes
CLEANFILES =	sockopt sockopt.o ktrace.out
REGRESS_TARGETS	=

.for promises domain type protocol call level optname optval errno abort in ${TESTS}
REGRESS_TARGETS +=	run-regress-${promises}-${domain}-${type}-${protocol}-${call}-${level}-${optname}-${optval}-${errno}-${abort}
run-regress-${promises}-${domain}-${type}-${protocol}-${call}-${level}-${optname}-${optval}-${errno}-${abort}:
	@@echo "\n$@@"
	rm -f sockopt sockopt.core
	cd ${.CURDIR} && \
	    COPTS='-DPROMISES=\"${promises}\" -DDOMAIN=${domain} \
	    -DTYPE=${type} -DPROTOCOL=${protocol} -DCALL=\"${call}\" \
	    -DLEVEL=${level} -DOPTNAME=${optname} -DOPTVAL=${optval} \
	    -DERRNO=${errno}' ${.MAKE} sockopt
.if "${abort}" == 0
	ktrace ./sockopt
	! [ -f sockopt.core ]
.else
	sh -c 'ktrace ./sockopt ; [ $$? = 134 ]'
	[ -f sockopt.core ]
	kdump | fgrep -q 'PLDG  ${call}sockopt, "${abort}", errno ${errno} '
.endif
.endfor

.include <bsd.regress.mk>
@


1.2
log
@Make the test also work with obj directory.
from semarie@@
@
text
@d1 7
a7 1
# $OpenBSD $
@


1.1
log
@Initial revision
@
text
@d39 3
a41 2
	COPTS='-DPROMISES=\"${promises}\" -DDOMAIN=${domain} -DTYPE=${type} \
	    -DPROTOCOL=${protocol} -DCALL=\"${call}\" \
@


1.1.1.1
log
@Call get/setsockopt(2) with various sockets and check which options
cause aborts due to pledge(2) restrictions.
@
text
@@
