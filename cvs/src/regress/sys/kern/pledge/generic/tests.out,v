head	1.13;
access;
symbols
	OPENBSD_6_1:1.13.0.2
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.12.0.4
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12;
locks; strict;
comment	@# @;


1.13
date	2017.02.19.19.59.12;	author tb;	state Exp;
branches;
next	1.12;
commitid	h6uTilcx9rCoSBMB;

1.12
date	2016.01.09.06.13.43;	author semarie;	state Exp;
branches;
next	1.11;
commitid	dcaV4x1VpVc8yivT;

1.11
date	2015.11.14.07.45.56;	author semarie;	state Exp;
branches;
next	1.10;
commitid	d4w0j8ZyBbT5qoN1;

1.10
date	2015.10.30.07.24.20;	author semarie;	state Exp;
branches;
next	1.9;
commitid	3tjL8emT1xXXpIC5;

1.9
date	2015.10.29.10.23.55;	author semarie;	state Exp;
branches;
next	1.8;
commitid	Lkty49WIn8PfqvJa;

1.8
date	2015.10.26.18.52.19;	author semarie;	state Exp;
branches;
next	1.7;
commitid	GSr8DcEToMYp39H4;

1.7
date	2015.10.20.06.44.51;	author semarie;	state Exp;
branches;
next	1.6;
commitid	GOlUmMnRqPNxVh7U;

1.6
date	2015.10.18.13.01.40;	author semarie;	state Exp;
branches;
next	1.5;
commitid	pTfuR0UA3oDzz3la;

1.5
date	2015.10.18.12.54.25;	author semarie;	state Exp;
branches;
next	1.4;
commitid	ihI5rtz1NsGSHgE6;

1.4
date	2015.10.18.12.53.32;	author semarie;	state Exp;
branches;
next	1.3;
commitid	oidNdWJXGRAScNUI;

1.3
date	2015.10.18.12.26.21;	author semarie;	state Exp;
branches;
next	1.2;
commitid	COcdJhV8JCc9BxqK;

1.2
date	2015.10.09.11.38.05;	author semarie;	state Exp;
branches;
next	1.1;
commitid	EccnxJocNG6QZ9Um;

1.1
date	2015.10.09.06.44.13;	author semarie;	state Exp;
branches;
next	;
commitid	OMHrQoEqoUBdOfmt;


desc
@@


1.13
log
@Clean up regress/sys/kern/pledge/generic tests: many tests failed because
wlpaths is disabled in GENERIC kernels: remove or disable failing test
cases. Also remove the test_mmap() function testing the prot_exec promise
since it would need to be run on a wxallowed partition.

from semarie
@
text
@#	$OpenBSD: tests.out,v 1.12 2016/01/09 06:13:43 semarie Exp $
test(test_nop): pledge=("",NULL) status=0 exit=0
test(test_inet): pledge=("",NULL) status=134 signal=6 coredump=present pledged_syscall=97
test(test_inet): pledge=("abort",NULL) status=5632 exit=22 (errno: "Invalid argument")
test(test_inet): pledge=("stdio",NULL) status=134 signal=6 coredump=present pledged_syscall=97
test(test_inet): pledge=("inet",NULL) status=134 signal=6 coredump=present pledged_syscall=6
test(test_inet): pledge=("stdio inet",NULL) status=0 exit=0
test(test_kill): pledge=("fattr",NULL) status=134 signal=6 coredump=present pledged_syscall=122
test(test_kill): pledge=("stdio",NULL) status=2 signal=2 pledged_syscall=not_found
test(test_rpath): pledge=("stdio rpath",NULL) status=0 exit=0
test(test_wpath): pledge=("stdio wpath",NULL) status=0 exit=0
test(test_cpath): pledge=("cpath",NULL) status=0 exit=0
test(test_pledge): pledge=("stdio rpath",NULL) status=0 exit=0
test(test_pledge): pledge=("stdio rpath wpath",NULL) status=0 exit=0
test(test_pledge): pledge=("stdio",NULL) status=256 exit=1 (errno: "Operation not permitted")
test(test_pledge): pledge=("stdio unix",NULL) status=256 exit=1 (errno: "Operation not permitted")
test(test_request_stdio): pledge=skip status=0 exit=0
test(test_request_tty): pledge=skip status=0 exit=0
@


1.12
log
@drop "abort" promise, and make it the default behaviour.
The current code has already setted it by default since 1.74

any pledge failure tries to make a coredump (default rules for coredump still
applies: so setuid binaries don't create them locally).

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: tests.out,v 1.11 2015/11/14 07:45:56 semarie Exp $
a12 60
test(test_wpaths): pledge=("stdio rpath",NULL)
 open_close("/etc/passwd") fd=3 errno=0
 open_close("generic") fd=3 errno=0
 open_close("../../../../../../../../../../../../../../../etc/passwd") fd=3 errno=0
 open_close("/nonexistent") fd=-1 errno=2
 status=0 exit=0
test(test_wpaths): pledge=("stdio rpath",{NULL})
 open_close("/etc/passwd") fd=-1 errno=2
 open_close("generic") fd=-1 errno=2
 open_close("../../../../../../../../../../../../../../../etc/passwd") fd=-1 errno=2
 open_close("/nonexistent") fd=-1 errno=2
 status=0 exit=0
test(test_wpaths): pledge=("stdio rpath",{"/",NULL})
 open_close("/etc/passwd") fd=3 errno=0
 open_close("generic") fd=3 errno=0
 open_close("../../../../../../../../../../../../../../../etc/passwd") fd=3 errno=0
 open_close("/nonexistent") fd=-1 errno=2
 status=0 exit=0
test(test_wpaths): pledge=("stdio rpath",{"/etc",NULL})
 open_close("/etc/passwd") fd=3 errno=0
 open_close("generic") fd=-1 errno=2
 open_close("../../../../../../../../../../../../../../../etc/passwd") fd=3 errno=0
 open_close("/nonexistent") fd=-1 errno=2
 status=0 exit=0
test(test_wpaths): pledge=("stdio rpath",{"/etc/",NULL})
 open_close("/etc/passwd") fd=3 errno=0
 open_close("generic") fd=-1 errno=2
 open_close("../../../../../../../../../../../../../../../etc/passwd") fd=3 errno=0
 open_close("/nonexistent") fd=-1 errno=2
 status=0 exit=0
test(test_wpaths): pledge=("stdio rpath",{"/etc/passwd",NULL})
 open_close("/etc/passwd") fd=3 errno=0
 open_close("generic") fd=-1 errno=2
 open_close("../../../../../../../../../../../../../../../etc/passwd") fd=3 errno=0
 open_close("/nonexistent") fd=-1 errno=2
 status=0 exit=0
test(test_wpaths): pledge=("stdio rpath",{"/bin",NULL})
 open_close("/etc/passwd") fd=-1 errno=2
 open_close("generic") fd=-1 errno=2
 open_close("../../../../../../../../../../../../../../../etc/passwd") fd=-1 errno=2
 open_close("/nonexistent") fd=-1 errno=2
 status=0 exit=0
test(test_wpaths): pledge=("stdio rpath",{"generic",NULL})
 open_close("/etc/passwd") fd=-1 errno=2
 open_close("generic") fd=3 errno=0
 open_close("../../../../../../../../../../../../../../../etc/passwd") fd=-1 errno=2
 open_close("/nonexistent") fd=-1 errno=2
 status=0 exit=0
test(test_wpaths): pledge=("stdio rpath",{"",NULL})
 open_close("/etc/passwd") fd=-1 errno=2
 open_close("generic") fd=3 errno=0
 open_close("../../../../../../../../../../../../../../../etc/passwd") fd=-1 errno=2
 open_close("/nonexistent") fd=-1 errno=2
 status=0 exit=0
test(test_wpaths): pledge=("stdio rpath",{".",NULL})
 open_close("/etc/passwd") fd=-1 errno=2
 open_close("generic") fd=3 errno=0
 open_close("../../../../../../../../../../../../../../../etc/passwd") fd=-1 errno=2
 open_close("/nonexistent") fd=-1 errno=2
 status=0 exit=0
a14 2
test(test_pledge): pledge=("stdio rpath wpath",{"/sbin",NULL}) status=256 exit=1 (errno: "Operation not permitted")
test(test_pledge): pledge=("stdio rpath wpath",{"/",NULL}) status=256 exit=1 (errno: "Operation not permitted")
a16 11
test(test_stat): pledge=("stdio rpath",{"/usr/share/man",NULL})
 stat("/usr/share/man/man8/afterboot.8"): realpath="/usr/share/man/man8/afterboot.8" uid=0 gid=7 mode=100444
 stat("/usr/share/man/man8/"): realpath="/usr/share/man/man8" uid=0 gid=0 mode=40755
 stat("/usr/share/man"): realpath="/usr/share/man" uid=0 gid=0 mode=40755
 stat("/usr/share"): realpath="/usr/share" uid=0 gid=0 mode=40111
 stat("/usr"): realpath="/usr" uid=0 gid=0 mode=40111
 stat("/"): realpath="/" uid=0 gid=0 mode=40111
 stat("/usr/bin/gzip"): realpath=failed(2) errno=2
 status=0 exit=0
test(test_mmap): pledge=("stdio rpath prot_exec",{"/dev/zero",NULL}) status=0 exit=0
test(test_mmap): pledge=("stdio rpath",{"/dev/zero",NULL}) status=134 signal=6 coredump=present pledged_syscall=197
@


1.11
log
@regress: pledge: update SYS_kill syscall number
@
text
@d1 1
a1 1
#	$OpenBSD: tests.out,v 1.10 2015/10/30 07:24:20 semarie Exp $
d3 4
a6 4
test(test_inet): pledge=("",NULL) status=9 signal=9 pledged_syscall=97
test(test_inet): pledge=("abort",NULL) status=134 signal=6 coredump=present pledged_syscall=97
test(test_inet): pledge=("stdio",NULL) status=9 signal=9 pledged_syscall=97
test(test_inet): pledge=("inet",NULL) status=9 signal=9 pledged_syscall=6
d8 1
a8 1
test(test_kill): pledge=("fattr",NULL) status=9 signal=9 pledged_syscall=122
d89 1
a89 1
test(test_mmap): pledge=("stdio rpath",{"/dev/zero",NULL}) status=9 signal=9 pledged_syscall=197
@


1.10
log
@regress: pledge

- for calling ioctl(2), we need "stdio" now: change test_request_tty
- for calling kill(2), we need "stdio" now: change test_kill
@
text
@d1 1
a1 1
#	$OpenBSD: tests.out,v 1.9 2015/10/29 10:23:55 semarie Exp $
d8 1
a8 1
test(test_kill): pledge=("fattr",NULL) status=9 signal=9 pledged_syscall=37
@


1.9
log
@regress pledge: rpath isn't needed anymore for mkdir()

make the cpath test more strict.
@
text
@d1 1
a1 1
#	$OpenBSD: tests.out,v 1.8 2015/10/26 18:52:19 semarie Exp $
d9 1
a9 1
test(test_kill): pledge=("proc",NULL) status=2 signal=2 pledged_syscall=not_found
@


1.8
log
@update regress suite for pledge
@
text
@d1 1
a1 1
#	$OpenBSD: tests.out,v 1.7 2015/10/20 06:44:51 semarie Exp $
d12 1
a12 1
test(test_cpath): pledge=("rpath cpath",NULL) status=0 exit=0
@


1.7
log
@update regress for pledge after whitelisted-path view inclusion
@
text
@d1 1
a1 1
#	$OpenBSD: tests.out,v 1.6 2015/10/18 13:01:40 semarie Exp $
d5 3
a7 1
test(test_inet): pledge=("inet",NULL) status=0 exit=0
d10 2
a11 17
test(test_allowed_syscalls): pledge=("malloc",NULL) status=0 exit=0
test(test_allowed_syscalls): pledge=("rw",NULL) status=0 exit=0
test(test_allowed_syscalls): pledge=("stdio",NULL) status=0 exit=0
test(test_allowed_syscalls): pledge=("rpath",NULL) status=0 exit=0
test(test_allowed_syscalls): pledge=("wpath",NULL) status=0 exit=0
test(test_allowed_syscalls): pledge=("tmppath",NULL) status=0 exit=0
test(test_allowed_syscalls): pledge=("inet",NULL) status=0 exit=0
test(test_allowed_syscalls): pledge=("unix",NULL) status=0 exit=0
test(test_allowed_syscalls): pledge=("dns",NULL) status=0 exit=0
test(test_allowed_syscalls): pledge=("getpw",NULL) status=0 exit=0
test(test_allowed_syscalls): pledge=("ioctl",NULL) status=9 signal=9 pledged_syscall=89
test(test_allowed_syscalls): pledge=("proc",NULL) status=9 signal=9 pledged_syscall=89
test(test_allowed_syscalls): pledge=("cpath",NULL) status=9 signal=9 pledged_syscall=89
test(test_allowed_syscalls): pledge=("abort",NULL) status=134 signal=6 coredump=present pledged_syscall=89
test(test_allowed_syscalls): pledge=("fattr",NULL) status=9 signal=9 pledged_syscall=89
test(test_rpath): pledge=("rpath",NULL) status=0 exit=0
test(test_wpath): pledge=("wpath",NULL) status=0 exit=0
a73 1
test(test_pledge): pledge=("malloc rw rpath",NULL) status=0 exit=0
d78 1
a78 1
test(test_pledge): pledge=("unix",NULL) status=256 exit=1 (errno: "Operation not permitted")
d88 3
a90 2
test(test_mmap): pledge=("rpath malloc prot_exec",{"/dev/zero",NULL}) status=0 exit=0
test(test_mmap): pledge=("rpath malloc",{"/dev/zero",NULL}) status=9 signal=9 pledged_syscall=197
@


1.6
log
@regress pledge: test kill()

since "inet" has PLEDGE_SELF, and now calling kill() to self is permitted with PLEDGE_SELF, try this with "fattr"
@
text
@d1 1
a1 1
#	$OpenBSD: tests.out,v 1.5 2015/10/18 12:54:25 semarie Exp $
d94 6
a99 6
 stat("/usr/share/man/man8/afterboot.8"): realpath=failed(2) uid=0 gid=7 mode=100444
 stat("/usr/share/man/man8/"): realpath=failed(2) uid=0 gid=0 mode=40755
 stat("/usr/share/man"): realpath=failed(2) uid=0 gid=0 mode=40755
 stat("/usr/share"): realpath=failed(2) errno=2
 stat("/usr"): realpath="/usr" errno=2
 stat("/"): realpath="/" errno=2
@


1.5
log
@regress pledge: remove cmsg

it has no sens to keep it.
@
text
@d1 1
a1 1
#	$OpenBSD: tests.out,v 1.4 2015/10/18 12:53:32 semarie Exp $
d6 1
a6 1
test(test_kill): pledge=("inet",NULL) status=9 signal=9 pledged_syscall=37
@


1.4
log
@regress pledge: cpath test

you need to read the directory before creating something in. add rpath
@
text
@d1 1
a1 1
#	$OpenBSD: tests.out,v 1.3 2015/10/18 12:26:21 semarie Exp $
a17 1
test(test_allowed_syscalls): pledge=("cmsg",NULL) status=5632 exit=22 (errno: "Invalid argument")
@


1.3
log
@regress pledge: cmsg is deprecated
@
text
@d1 1
a1 1
#	$OpenBSD: tests.out,v 1.2 2015/10/09 11:38:05 semarie Exp $
d26 1
a26 1
test(test_cpath): pledge=("cpath",NULL) status=0 exit=0
@


1.2
log
@add "tty" regress for pledge
@
text
@d1 1
a1 1
#	$OpenBSD: tests.out,v 1.1 2015/10/09 06:44:13 semarie Exp $
d18 1
a18 1
test(test_allowed_syscalls): pledge=("cmsg",NULL) status=9 signal=9 pledged_syscall=89
@


1.1
log
@follow tame->pledge in regress
@
text
@d1 1
a1 1
#	$OpenBSD: tests.out,v 1.9 2015/10/06 15:45:31 semarie Exp $
d105 1
@

