head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.6
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.4
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.4.0.4
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4;
locks; strict;
comment	@ * @;


1.5
date	2017.02.21.15.46.25;	author tb;	state Exp;
branches;
next	1.4;
commitid	ZgMsBDaVsJfQDEJ9;

1.4
date	2015.10.30.07.24.20;	author semarie;	state Exp;
branches;
next	1.3;
commitid	3tjL8emT1xXXpIC5;

1.3
date	2015.10.26.18.52.19;	author semarie;	state Exp;
branches;
next	1.2;
commitid	GSr8DcEToMYp39H4;

1.2
date	2015.10.09.11.42.54;	author semarie;	state Exp;
branches;
next	1.1;
commitid	2tpbfVWE1iTqAAej;

1.1
date	2015.10.09.11.38.05;	author semarie;	state Exp;
branches;
next	;
commitid	EccnxJocNG6QZ9Um;


desc
@@


1.5
log
@Make test_request_tty() also pass in environments without tty by opening a
pseudo-tty and testing on the slave instead of stderr.

nicm confirms that this approach is fine
bluhm tested in his environment and the tests now pass

from semarie
@
text
@/*	$OpenBSD: test_tty.c,v 1.4 2015/10/30 07:24:20 semarie Exp $ */
/*
 * Copyright (c) 2015 Sebastien Marie <semarie@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/ioctl.h>
#include <sys/termios.h>
#include <sys/ttycom.h>

#include <errno.h>
#include <fcntl.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <util.h>


void
test_request_tty()
{
	int amaster, fd;
	struct termios ts; /* sys/termios.h */
	struct winsize ws; /* sys/ttycom.h */

	/* get a tty */
	if (openpty(&amaster, &fd, NULL, NULL, NULL) == -1)
		_exit(errno);
	close(amaster);

	/* tests that need tty+proc (stdio for pledge(2) */
	if (pledge("stdio tty proc", NULL) == -1)
		_exit(errno);

	/* TIOCSPGRP (tty+proc) */
	if ((tcsetpgrp(fd, 1) == -1) && (errno != ENOTTY))
		_exit(errno);
	errno = 0; /* discard error */

	/* tests that only need tty (and stdio for calling ioctl(2)) */	
	if (pledge("stdio tty", NULL) == -1)
		_exit(errno);


	/* TIOCGETA */
	if (ioctl(fd, TIOCGETA, &ts) == -1)
		_exit(errno);

	/* TIOCGWINSZ */
	if (ioctl(fd, TIOCGWINSZ, &ws) == -1)
		_exit(errno);

	/* TIOCSBRK */
	if ((ioctl(fd, TIOCSBRK, NULL) == -1) && (errno != ENOTTY))
		_exit(errno);
	errno = 0; /* discard error */

	/* TIOCCDTR */
	if ((ioctl(fd, TIOCCDTR, NULL) == -1) && (errno != ENOTTY))
		_exit(errno);
	errno = 0; /* discard error */

	/* TIOCSETA */
	if (tcsetattr(fd, TCSANOW, &ts) == -1)
		_exit(errno);
	
	/* TIOCSETAW */
	if (tcsetattr(fd, TCSADRAIN, &ts) == -1)
		_exit(errno);
	
	/* TIOCSETAF */
	if (tcsetattr(fd, TCSAFLUSH, &ts) == -1)
		_exit(errno);
}
@


1.4
log
@regress: pledge

- for calling ioctl(2), we need "stdio" now: change test_request_tty
- for calling kill(2), we need "stdio" now: change test_kill
@
text
@d1 1
a1 1
/*	$OpenBSD: test_tty.c,v 1.3 2015/10/26 18:52:19 semarie Exp $ */
d27 1
d33 1
a33 1
	int fd = STDERR_FILENO;
d37 4
a40 1
	/* TODO: get a tty */
@


1.3
log
@update regress suite for pledge
@
text
@d1 1
a1 1
/*	$OpenBSD: test_tty.c,v 1.2 2015/10/09 11:42:54 semarie Exp $ */
d47 2
a48 2
	/* tests that only need tty */	
	if (pledge("tty", NULL) == -1)
@


1.2
log
@regress pledge

add missing $OpenBSD$ header
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d38 2
a39 2
	/* tests that need tty+proc (malloc for self) */
	if (pledge("tty proc malloc", NULL) == -1)
@


1.1
log
@add "tty" regress for pledge
@
text
@d1 1
@

