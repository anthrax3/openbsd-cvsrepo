head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.12
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.2.0.14
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.10
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.8
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.6
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.4
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.1.0.10
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.6
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.4
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.2
	OPENBSD_5_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.2
date	2014.05.20.01.25.24;	author guenther;	state Exp;
branches;
next	1.1;

1.1
date	2012.03.05.02.40.21;	author guenther;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Use errc/warnc to simplify code.
Also, in 'ftp', always put the error message last, after the hostname/ipaddr.

ok jsing@@ krw@@ millert@@
@
text
@/* $OpenBSD: main-thread-exited.c,v 1.1 2012/03/05 02:40:21 guenther Exp $ */
/* PUBLIC DOMAIN Mar 2012 <guenther@@openbsd.org> */


#include <sys/types.h>
#include <sys/wait.h>
#include <err.h>
#include <errno.h>
#include <pthread.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

void *
tmain(void *arg)
{
	sleep(1);
	printf("sending SIGKILL\n");
	kill(getpid(), SIGKILL);
	sleep(1);
	printf("still running!\n");
	exit(1);
}

int
main(int argc, char **argv)
{
	pid_t pid;
	pthread_t t;
	int r;

	pid = fork();
	if (pid == -1)
		err(1, "fork");
	if (pid > 0) {
		int status;

		if (waitpid(pid, &status, 0) != pid)
			err(1, "waitpid");
		exit(! WIFSIGNALED(status) || WTERMSIG(status) != SIGKILL);
	}

	/* in child */
	if ((r = pthread_create(&t, NULL, tmain, NULL)))
		errc(1, r, "pthread_create");
	pthread_exit(NULL);
	abort();
}
@


1.1
log
@If the main thread exits, the process should still be able to get
signals
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d47 1
a47 1
		errx(1, "pthread_create: %s", strerror(r));
@

