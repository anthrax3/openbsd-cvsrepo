head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.56
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.52
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.42
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.50
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.48
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.46
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.44
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.40
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.38
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.36
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.34
	OPENBSD_5_0:1.4.0.32
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.30
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.28
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.24
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.26
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.22
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.20
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.18
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.16
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.14
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.12
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.10
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.8
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.6
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.4
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.2
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.6
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.4
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2003.11.04.07.28.05;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	2003.07.31.21.48.07;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2002.02.13.16.24.25;	author art;	state Exp;
branches;
next	1.1;

1.1
date	2002.02.08.21.39.22;	author art;	state Exp;
branches;
next	;


desc
@@


1.4
log
@a simpler test for __syscall args alignment
@
text
@/*	$OpenBSD$	*/

/*
 * Written by Michael Shalayeff <mickey@@openbsd.org> 2003 Public Domain.
 */

#include <sys/types.h>
#include <sys/syscall.h>
#include <unistd.h>
#include <stdlib.h>
#include <fcntl.h>
#include <err.h>

int
main(void)
{
	extern off_t __syscall();
	off_t off;
	int fd;

	if ((fd = open("/etc/passwd", O_RDONLY)) < 0)
		err(1, "/etc/passwd");

	off = __syscall((u_int64_t)SYS_lseek, fd, 0, (off_t)1, SEEK_SET);
	if (off < 0)
		err(1, "lseek");

	off = __syscall((u_int64_t)SYS_lseek, fd, 0, (off_t)0, SEEK_CUR);
	if (off != 1)
		errx(1, "lseek: wrong position %llu", off);

	return 0;
}
@


1.3
log
@various cleanups; david says results are same
@
text
@d1 2
a2 1
/*	$OpenBSD: __syscall.c,v 1.2 2002/02/13 16:24:25 art Exp $	*/
d4 1
a4 1
 *	Written by Artur Grabowski <art@@openbsd.org> 2002 Public Domain.
d6 1
a8 1
#include <sys/wait.h>
d11 1
d15 1
a15 1
main(int argc, char *argv[])
d17 3
a19 9
	int status;

	switch(fork()) {
	case -1:
		err(1, "fork");
	case 0:
		__syscall((u_int64_t)SYS_exit, (u_int64_t)17);
		abort();
	}
d21 2
a22 2
	if (wait(&status) < 0)
		err(1, "wait");
d24 3
a26 2
	if (!WIFEXITED(status))
		errx(1, "child didn't exit gracefully");
d28 3
a30 2
	if (WEXITSTATUS(status) != 17)
		errx(1, "wrong exit status");
@


1.2
log
@The syscall numer is quad to __syscall(2).
@
text
@d1 1
a1 1
/*	$OpenBSD: __syscall.c,v 1.2 2002/02/13 16:15:20 art Exp $	*/
d13 1
a13 1
main()
@


1.1
log
@same as the test for syscall(2), but for __syscall(2)
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.c,v 1.1 2002/02/08 21:33:32 art Exp $	*/
d21 1
a21 1
		__syscall(SYS_exit, (u_int64_t)17);
@

