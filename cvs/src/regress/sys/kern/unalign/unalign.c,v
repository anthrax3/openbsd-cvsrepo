head	1.2;
access;
symbols
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.2.0.38
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.34
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.24
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.32
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.30
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.28
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.26
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.22
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.20
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.18
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.16
	OPENBSD_5_0:1.2.0.14
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.12
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.10
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.6
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.8
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.1.0.12
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.10
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.8
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.6
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.4
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.2
	OPENBSD_3_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.2
date	2008.07.26.10.25.04;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2005.04.26.21.37.05;	author miod;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Make sure the test array is 64 bit aligned, this now makes sparc fail this
test.
@
text
@/*	$OpenBSD: unalign.c,v 1.1 2005/04/26 21:37:05 miod Exp $	*/
/* Written by Miod Vallat, 2004 AD -- this file is in the public domain */

/*
 * This test checks for the ability, for 32 bit systems, to correctly
 * access a long long (64 bit) value aligned on a 32 bit boundary, but not
 * on a 64 bit boundary.
 *
 * All architectures should pass this test; on m88k this requires assistance
 * from the kernel to recover from the misaligned operand exception: see
 * double_reg_fixup() in arch/m88k/m88k/trap.c for details.
 */

#include <stdio.h>
#include <sys/types.h>

uint32_t array[5];

int
unalign_read(uint64_t *addr)
{
	uint64_t t;

	t = *addr;
#if BYTE_ORDER == BIG_ENDIAN
	if (t != 0x13579aceffffabcdULL)
#else
	if (t != 0xffffabcd13579aceULL)
#endif
		return (1);

	return (0);
}

void
unalign_write(uint64_t *addr)
{
	uint64_t t;

	t = 0xdeadbeaffadebabeULL;
	*addr = t;
}

int
main(int argc, char *argv[])
{
#if !defined(__LP64__)
	uint32_t *addr = array;

	/* align on a 64 bit boundary */
	if (((uint32_t)addr & 7) != 0)
		addr++;

	addr[0] = 0x12345678;
	addr[1] = 0x13579ace;
	addr[2] = 0xffffabcd;
	addr[3] = 0x2468fedc;

	if (unalign_read((uint64_t *)(addr + 1)))
		return (1);

	unalign_write((uint64_t *)(addr + 1));

#if BYTE_ORDER == BIG_ENDIAN
	if (addr[1] != 0xdeadbeaf || addr[2] != 0xfadebabe)
#else
	if (addr[1] != 0xfadebabe || addr[2] != 0xdeadbeaf)
#endif
		return (1);
#endif	/* __LP64__ */

	return (0);
}
@


1.1
log
@A regress test for accessing long long on a long aligned, but not long long
aligned, boundary on 32 bit systems.
Written a while ago for m88k, eventually turned into a real regress test.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d17 2
d20 1
a20 1
main(int argc, char *argv[])
d22 1
a22 4
#if !defined(__LP64__)
	long array[4] = { 0x12345678, 0x13579ace, 0xffffabcd, 0x2468fedc };
	long long t;
	unsigned int i;
d24 1
a24 1
	t = *(long long *)(array + 1);
d32 8
d41 22
a62 1
	*(long long *)(array + 1) = t;
d65 1
a65 1
	if (array[1] != 0xdeadbeaf || array[2] != 0xfadebabe)
d67 1
a67 1
	if (array[1] != 0xfadebabe || array[2] != 0xdeadbeaf)
d70 1
a71 1
#endif	/* __LP64__ */
@

