head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.2
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.4
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.3.0.8
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.4
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.2.0.4
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.1.0.32
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.28
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.26
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.24
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.22
	OPENBSD_5_0:1.1.0.20
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.18
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.16
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.12
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.14
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.10
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.8
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.6
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.4
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.2
	OPENBSD_4_1_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2017.03.08.19.28.47;	author deraadt;	state Exp;
branches;
next	1.3;
commitid	m15f2dxc4qR2El8M;

1.3
date	2015.01.19.00.22.30;	author guenther;	state Exp;
branches;
next	1.2;
commitid	RqjZigDpMJeDnQTG;

1.2
date	2014.07.20.01.38.40;	author guenther;	state Exp;
branches;
next	1.1;
commitid	0acpjAf5myNxgwB5;

1.1
date	2006.10.23.15.18.47;	author espie;	state Exp;
branches;
next	;


desc
@@


1.4
log
@warning cleanups; ok guenther
@
text
@/* $OpenBSD: getpeereid_test.c,v 1.3 2015/01/19 00:22:30 guenther Exp $ */
/* Written by Marc Espie in 2006 */
/* Public domain */
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/stat.h>
#include <sys/un.h>
#include <sys/wait.h>
#include <err.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <errno.h>

char path[1024];
char *dir;

char *
check_id(int fd)
{
	uid_t sockuid, myuid;
	gid_t sockgid, mygid;
	static char problem[1024];

	if (getpeereid(fd, &sockuid, &sockgid) == -1) {
		snprintf(problem, sizeof problem, "getpeereid: %s", 
		    strerror(errno));
		return problem;
	}
	myuid = geteuid();
	mygid = getgid();
	if (myuid != sockuid) {
		snprintf(problem, sizeof problem, "uid discrepancy %ld vs %ld",
			(long)myuid, (long)sockuid);
		return problem;
	}
	if (mygid != sockgid) {
		snprintf(problem, sizeof problem, "gid discrepancy %ld vs %ld",
			(long)mygid, (long)sockgid);
		return problem;
	}
	return NULL;
}

void
client(struct sockaddr_un *sun)
{
	int s;
	int i;
	int r;
	char *problem;

	s = socket(AF_UNIX, SOCK_STREAM, 0);
	if (s == -1)
		err(1, "Bad socket");

	/* XXX make sure the server started alright */
	for (i = 0; i < 10; i++) {
		r = connect(s, (struct sockaddr *)sun, sizeof(*sun));
		if (r == 0) {
			problem = check_id(s);
			if (problem)
				errx(1, "%s", problem);
			exit(0);
		}
		sleep(5);
	}
	errx(1, "Could not connect after 10 tries");
}


void
server(struct sockaddr_un *sun)
{
	int s, fd;
	struct sockaddr_storage client_addr;
	socklen_t client_len;
	char *problem;

	s = socket(AF_UNIX, SOCK_STREAM, 0);
	if (s == -1)
		err(1, "Bad socket");

	if (bind(s, (struct sockaddr *)sun, sizeof(*sun)) != 0)
		err(1, "bind");
	if (listen(s, 5) != 0) {
		int saved_errno = errno;
		unlink(path);
		rmdir(dir);
		errc(1, saved_errno, "listen");
	}
	fd = accept(s, (struct sockaddr *)&client_addr, &client_len);
	if (fd == -1) {
		int saved_errno = errno;
		unlink(path);
		rmdir(dir);
		errc(1, saved_errno, "accept");
	}
	problem = check_id(fd);
	if (problem)  {
		unlink(path);
		rmdir(dir);
		errx(1, "%s", problem);
	}
	unlink(path);
	rmdir(dir);
}



int
main()
{
	pid_t pid;
	struct sockaddr_un sun;
	char dir_template[] = "/tmp/peer.XXXXXX";

	dir = mkdtemp(dir_template);
	if (!dir)
		err(1, "mkdtemp");
	snprintf(path, sizeof path, "%s/%s", dir, "socket");

	memset(&sun, 0, sizeof(struct sockaddr_un));
	if (strlcpy(sun.sun_path, path, sizeof(sun.sun_path)) >=
	    sizeof(sun.sun_path))
		errx(1, "Memory error");
	sun.sun_family = AF_UNIX;

	/* let's make those two rendez-vous, a bit artificial */
	pid = fork();
	if (pid == -1)
		err(1, "can't fork");
	if (pid == 0) {
		client(&sun);
		exit(0);
	} else {
		int status;

		server(&sun);
		waitpid(pid, &status, 0);
		if (WIFEXITED(status) && WEXITSTATUS(status) == 0) {
			printf("getpeereid test okay\n");
			exit(0);
		} else
			errx(1, "Problem with child\n");
	}
}
@


1.3
log
@The kernel doesn't actually care what a sockaddr's sa_len is on input,
so don't waste code setting it
@
text
@d1 1
a1 1
/* $OpenBSD: getpeereid_test.c,v 1.2 2014/07/20 01:38:40 guenther Exp $ */
d64 1
a64 1
				errx(1, problem);
d104 1
a104 1
		errx(1, problem);
@


1.2
log
@Make sure the correct errno is reported by warn* or err* and not
the errno of an intervening cleanup operation like close/unlink/etc.

Diff from Doug Hogan (doug (at) acyclic.org)
@
text
@d1 1
a1 1
/* $OpenBSD: getpeereid_test.c,v 1.1 2006/10/23 15:18:47 espie Exp $ */
a127 1
	sun.sun_len = sizeof(sun);
@


1.1
log
@regression test for getpeereid. okay claudio
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d88 1
d91 1
a91 1
		err(1, "listen");
d95 1
d98 1
a98 1
		err(1, "accept");
@

