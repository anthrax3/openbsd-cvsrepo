head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.24
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.22
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.18
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.8
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.16
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.14
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.12
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.10
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.6
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3;
locks; strict;
comment	@ * @;


1.3
date	2012.06.29.00.34.39;	author matthew;	state Exp;
branches;
next	1.2;

1.2
date	2012.06.29.00.29.17;	author matthew;	state Exp;
branches;
next	1.1;

1.1
date	2012.06.29.00.21.55;	author matthew;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Fix year in public domain declaration.  Also, include <stddef.h> for
POSIX compatibility so the test doesn't depend on <signal.h> defining
NULL.
@
text
@/*	$OpenBSD: sigpending.c,v 1.2 2012/06/29 00:29:17 matthew Exp $	*/
/*
 * Written by Matthew Dempsky, 2012.
 * Public domain.
 */

#include <assert.h>
#include <signal.h>
#include <stddef.h>

int
main()
{
	sigset_t set;

	assert(sigemptyset(&set) == 0);
	assert(sigaddset(&set, SIGUSR1) == 0);
	assert(sigprocmask(SIG_BLOCK, &set, NULL) == 0);
	assert(raise(SIGUSR1) == 0);
	assert(sigemptyset(&set) == 0);
	assert(sigpending(&set) == 0);
	assert(sigismember(&set, SIGUSR1) == 1);

	return (0);
}
@


1.2
log
@Clear out the sigset_t again before calling sigpending() to make sure
sigpending() actually sets it and it wasn't just still set from
calling sigprocmask().
@
text
@d1 1
a1 1
/*	$OpenBSD: sigpending.c,v 1.1 2012/06/29 00:21:55 matthew Exp $	*/
d3 1
a3 1
 * Written by Matthew Dempsky, 2011.
d9 1
@


1.1
log
@add a regress test for sigpending(); add licensing notice to stackjmp.c
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d19 1
@

