head	1.3;
access;
symbols
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.12
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.10
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.8
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.6
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.4
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.2.0.6
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2;
locks; strict;
comment	@ * @;


1.3
date	2013.12.21.05.45.04;	author guenther;	state Exp;
branches;
next	1.2;

1.2
date	2012.06.29.00.21.55;	author matthew;	state Exp;
branches;
next	1.1;

1.1
date	2012.06.23.05.54.49;	author matthew;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Match the type to the calls
@
text
@/*	$OpenBSD: stackjmp.c,v 1.2 2012/06/29 00:21:55 matthew Exp $	*/
/*
 * Written by Matthew Dempsky, 2012.
 * Public domain.
 */

#include <assert.h>
#include <setjmp.h>
#include <signal.h>
#include <string.h>
#include <unistd.h>

static sigjmp_buf jb;
static char buf[SIGSTKSZ];
static volatile int handled;

static int
isaltstack()
{
	stack_t os;
	assert(sigaltstack(NULL, &os) == 0);
	return (os.ss_flags & SS_ONSTACK) != 0;
}

static void
inthandler(int signo)
{
	assert(isaltstack());
	handled = 1;
	siglongjmp(jb, 1);
}

int
main()
{
	struct sigaction sa;
	stack_t stack;

	memset(&sa, 0, sizeof(sa));
	sa.sa_handler = inthandler;
	sa.sa_flags = SA_ONSTACK;
	assert(sigaction(SIGINT, &sa, NULL) == 0);

	memset(&stack, 0, sizeof(stack));
	stack.ss_sp = buf;
	stack.ss_size = sizeof(buf);
	stack.ss_flags = 0;
	assert(sigaltstack(&stack, NULL) == 0);

	assert(!isaltstack());
	sigsetjmp(jb, 1);
	assert(!isaltstack());
	if (!handled) {
		kill(getpid(), SIGINT);
		assert(0); /* Shouldn't reach here. */
	}

	return (0);
}
@


1.2
log
@add a regress test for sigpending(); add licensing notice to stackjmp.c
@
text
@d1 1
a1 1
/*	$OpenBSD: stackjmp.c,v 1.1 2012/06/23 05:54:49 matthew Exp $	*/
d13 1
a13 1
static jmp_buf jb;
@


1.1
log
@add (currently failing) stackjmp regress test
@
text
@d1 6
a6 1
/*	$OpenBSD$	*/
@

