head	1.14;
access;
symbols
	OPENBSD_6_0:1.12.0.38
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.28
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.36
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.34
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.32
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.30
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.26
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.24
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.22
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.20
	OPENBSD_5_0:1.12.0.18
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.16
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.14
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.10
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.12
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.8
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.6
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.4
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.2
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.11.0.6
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.4
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.2
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.10.0.10
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.8
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.6
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	JASON_0:1.1.1.1
	JASON:1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2016.09.06.04.35.03;	author ratchov;	state dead;
branches;
next	1.13;
commitid	BLrL2CXkbwInHj9w;

1.13
date	2016.08.27.04.32.44;	author guenther;	state Exp;
branches;
next	1.12;
commitid	BhFApl6JTNF0bcbP;

1.12
date	2007.04.25.15.27.54;	author jason;	state Exp;
branches;
next	1.11;

1.11
date	2005.09.27.02.53.43;	author drahn;	state Exp;
branches;
next	1.10;

1.10
date	2003.08.06.16.15.44;	author jason;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.04.02.41.57;	author jason;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.04.01.31.04;	author jason;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.02.19.15.38;	author jason;	state Exp;
branches;
next	1.6;

1.6
date	2003.02.05.04.39.34;	author jason;	state Exp;
branches;
next	1.5;

1.5
date	2003.02.04.08.01.50;	author jason;	state Exp;
branches;
next	1.4;

1.4
date	2003.02.04.07.49.34;	author jason;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.04.07.38.51;	author jason;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.01.18.09.27;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	2003.02.01.17.58.18;	author jason;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.02.01.17.58.18;	author jason;	state Exp;
branches;
next	;


desc
@@


1.14
log
@remove test programs for the audio driver, as we've better
converage with base tools and programs in regress/lib/libsndio

ok deraadt
@
text
@/*	$OpenBSD: autest.c,v 1.13 2016/08/27 04:32:44 guenther Exp $	*/

/*
 * Copyright (c) 2002 Jason L. Wright (jason@@thought.net)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/ioctl.h>
#include <sys/audioio.h>
#include <sys/time.h>
#include <err.h>
#include <errno.h>
#include <fcntl.h>
#include <limits.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

/* XXX ADPCM is currently pretty broken... diagnosis and fix welcome */
#undef	USE_ADPCM

#include "adpcm.h"
#include "law.h"

struct ausrate {
	struct timeval	tv_begin;
	struct timeval	tv_end;
	u_int		r_rate;		/* requested rate */
	u_int		s_rate;		/* rate from audio layer */
	u_int		c_rate;		/* computed rate */
	int		bps;		/* bytes per sample */
	int		bytes;		/* number of bytes played */
	float		err;
};

int main(int, char **);
void check_encoding(int, audio_encoding_t *, int);
void check_encoding_mono(int, audio_encoding_t *, int);
void check_encoding_stereo(int, audio_encoding_t *, int);
void enc_ulaw_8(int, audio_encoding_t *, int, int);
void enc_alaw_8(int, audio_encoding_t *, int, int);
void enc_ulinear_8(int, audio_encoding_t *, int, int);
void enc_ulinear_16(int, audio_encoding_t *, int, int, int);
void enc_slinear_8(int, audio_encoding_t *, int, int);
void enc_slinear_16(int, audio_encoding_t *, int, int, int);
void enc_adpcm_8(int, audio_encoding_t *, int, int);
void audio_wait(int);
void check_srate(struct ausrate *);
void mark_time(struct timeval *);
int get_int(const char *, int *);
int get_double(const char *, double *);

#define	PLAYFREQ	440.0
#define	PLAYSECS	2
double playfreq = PLAYFREQ;

#define	DEFAULT_DEV	"/dev/sound"

int
get_double(const char *buf, double *d)
{
	char *ep;
	long dd;

	errno = 0;
	dd = strtod(buf, &ep);
	if (buf[0] == '\0' || *ep != '\0')
		return (-1);
	if (errno == ERANGE && (dd == -HUGE_VAL || dd == HUGE_VAL))
		return (-1);
	*d = dd;
	return (0);
}

int
get_int(const char *buf, int *i)
{
	char *ep;
	long lv;

	errno = 0;
	lv = strtol(buf, &ep, 10);
	if (buf[0] == '\0' || *ep != '\0')
		return (-1);
	if (errno == ERANGE && (lv == LONG_MAX || lv == LONG_MIN))
		return (-1);
	if (lv < INT_MIN || lv > INT_MAX)
		return (-1);
	*i = lv;
	return (0);
}

int
main(int argc, char **argv)
{
	audio_info_t ainfo;
	char *fname = NULL;
	int fd, i, c;
	int rate = 8000;

	while ((c = getopt(argc, argv, "f:r:t:")) != -1) {
		switch (c) {
		case 'f':
			fname = optarg;
			break;
		case 'r':
			if (get_int(optarg, &rate) || rate <= 0) {
				fprintf(stderr, "%s bad rate %s\n",
				    argv[0], optarg);
				return (1);
			}
			break;
		case 't':
			if (get_double(optarg, &playfreq) || playfreq <= 0.0) {
				fprintf(stderr, "%s bad freq %s\n",
				    argv[0], optarg);
				return (1);
			}
			break;
		case '?':
		default:
			fprintf(stderr, "%s [-f device]\n", argv[0]);
			return (1);
		}
	}

	if (fname == NULL)
		fname = DEFAULT_DEV;

	fd = open(fname, O_RDWR, 0);
	if (fd == -1)
		err(1, "open");


	if (ioctl(fd, AUDIO_GETINFO, &ainfo) == -1)
		err(1, "%s: audio_getinfo", fname);

	for (i = 0; ; i++) {
		audio_encoding_t enc;

		enc.index = i;
		if (ioctl(fd, AUDIO_GETENC, &enc) == -1)
			break;
		check_encoding(fd, &enc, rate);
	}
	close(fd);

	return (0);
}

void
check_srate(struct ausrate *rt)
{
	struct timeval t;
	float tm, b, r, err;

	timersub(&rt->tv_end, &rt->tv_begin, &t);
	tm = (float)t.tv_sec + ((float)t.tv_usec / 1000000.0);
	b = (float)rt->bytes / (float)rt->bps;
	r = b / tm;

	err = fabs((float)rt->s_rate - r);
	err /= r * 0.01;
	rt->err = err;
	rt->c_rate = rintf(r);
	printf("(s %u c %u e %3.1f%%)",
	    rt->s_rate, rt->c_rate, rt->err);
}

void
check_encoding(int fd, audio_encoding_t *enc, int rate)
{
	printf("%s:%d%s",
	    enc->name,
	    enc->precision,
	    (enc->flags & AUDIO_ENCODINGFLAG_EMULATED) ? "*" : "");
	fflush(stdout);
	check_encoding_mono(fd, enc, rate);
	check_encoding_stereo(fd, enc, rate);
	printf("\n");
}

void
mark_time(struct timeval *tv)
{
	if (gettimeofday(tv, NULL) == -1)
		err(1, "gettimeofday");
}

void
check_encoding_mono(int fd, audio_encoding_t *enc, int rate)
{
	int skipped = 0;

	printf("...mono");
	fflush(stdout);

	if (enc->precision == 8) {
		switch (enc->encoding) {
		case AUDIO_ENCODING_ULAW:
			enc_ulaw_8(fd, enc, 1, rate);
			break;
		case AUDIO_ENCODING_ALAW:
			enc_alaw_8(fd, enc, 1, rate);
			break;
		case AUDIO_ENCODING_ULINEAR:
		case AUDIO_ENCODING_ULINEAR_LE:
		case AUDIO_ENCODING_ULINEAR_BE:
			enc_ulinear_8(fd, enc, 1, rate);
			break;
		case AUDIO_ENCODING_SLINEAR:
		case AUDIO_ENCODING_SLINEAR_LE:
		case AUDIO_ENCODING_SLINEAR_BE:
			enc_slinear_8(fd, enc, 1, rate);
			break;
		case AUDIO_ENCODING_ADPCM:
			enc_adpcm_8(fd, enc, 1, rate);
			break;
		default:
			skipped = 1;
		}
	}

	if (enc->precision == 16) {
		switch (enc->encoding) {
		case AUDIO_ENCODING_ULINEAR_LE:
			enc_ulinear_16(fd, enc, 1, LITTLE_ENDIAN, rate);
			break;
		case AUDIO_ENCODING_ULINEAR_BE:
			enc_ulinear_16(fd, enc, 1, BIG_ENDIAN, rate);
			break;
		case AUDIO_ENCODING_SLINEAR_LE:
			enc_slinear_16(fd, enc, 1, LITTLE_ENDIAN, rate);
			break;
		case AUDIO_ENCODING_SLINEAR_BE:
			enc_slinear_16(fd, enc, 1, BIG_ENDIAN, rate);
			break;
		default:
			skipped = 1;
		}
	}

	if (skipped)
		printf("[skip]");
}

void
check_encoding_stereo(int fd, audio_encoding_t *enc, int rate)
{
	int skipped = 0;

	printf("...stereo");
	fflush(stdout);

	if (enc->precision == 8) {
		switch (enc->encoding) {
		case AUDIO_ENCODING_ULAW:
			enc_ulaw_8(fd, enc, 2, rate);
			break;
		case AUDIO_ENCODING_ALAW:
			enc_alaw_8(fd, enc, 2, rate);
			break;
		case AUDIO_ENCODING_ULINEAR:
		case AUDIO_ENCODING_ULINEAR_LE:
		case AUDIO_ENCODING_ULINEAR_BE:
			enc_ulinear_8(fd, enc, 2, rate);
			break;
		case AUDIO_ENCODING_SLINEAR:
		case AUDIO_ENCODING_SLINEAR_LE:
		case AUDIO_ENCODING_SLINEAR_BE:
			enc_slinear_8(fd, enc, 2, rate);
			break;
		case AUDIO_ENCODING_ADPCM:
			enc_adpcm_8(fd, enc, 2, rate);
			break;
		default:
			skipped = 1;
		}
	}

	if (enc->precision == 16) {
		switch (enc->encoding) {
		case AUDIO_ENCODING_ULINEAR_LE:
			enc_ulinear_16(fd, enc, 2, LITTLE_ENDIAN, rate);
			break;
		case AUDIO_ENCODING_ULINEAR_BE:
			enc_ulinear_16(fd, enc, 2, BIG_ENDIAN, rate);
			break;
		case AUDIO_ENCODING_SLINEAR_LE:
			enc_slinear_16(fd, enc, 2, LITTLE_ENDIAN, rate);
			break;
		case AUDIO_ENCODING_SLINEAR_BE:
			enc_slinear_16(fd, enc, 2, BIG_ENDIAN, rate);
			break;
		default:
			skipped = 1;
		}
	}

	if (skipped)
		printf("[skip]");
}

void
enc_ulinear_8(int fd, audio_encoding_t *enc, int chans, int rate)
{
	audio_info_t inf;
	struct ausrate rt;
	u_int8_t *samples = NULL, *p;
	int i, j;

	AUDIO_INITINFO(&inf);
	inf.play.precision = enc->precision;
	inf.play.encoding = enc->encoding;
	inf.play.channels = chans;
	inf.play.sample_rate = rate;; 

	if (ioctl(fd, AUDIO_SETINFO, &inf) == -1) {
		printf("[%s]", strerror(errno));
		goto out;
	}

	if (ioctl(fd, AUDIO_GETINFO, &inf) == -1) {
		printf("[getinfo: %s]", strerror(errno));
		goto out;
	}
	rt.r_rate = inf.play.sample_rate;
	rt.s_rate = inf.play.sample_rate;
	rt.bps = 1 * chans;
	rt.bytes = inf.play.sample_rate * chans * PLAYSECS;

	samples = (u_int8_t *)malloc(inf.play.sample_rate * chans);
	if (samples == NULL) {
		warn("malloc");
		goto out;
	}

	for (i = 0, p = samples; i < inf.play.sample_rate; i++) {
		float d;
		u_int8_t v;

		d = 127.0 * sinf(((float)i / (float)inf.play.sample_rate) *
		    (2 * M_PI * playfreq));
		d = rintf(d + 127.0);
		v = d;

		for (j = 0; j < chans; j++) {
			*p = v;
			p++;
		}
	}

	mark_time(&rt.tv_begin);
	for (i = 0; i < PLAYSECS; i++)
		write(fd, samples, inf.play.sample_rate * chans);
	audio_wait(fd);
	mark_time(&rt.tv_end);
	check_srate(&rt);

out:
	if (samples != NULL)
		free(samples);
}

void
enc_slinear_8(int fd, audio_encoding_t *enc, int chans, int rate)
{
	audio_info_t inf;
	struct ausrate rt;
	int8_t *samples = NULL, *p;
	int i, j;

	AUDIO_INITINFO(&inf);
	inf.play.precision = enc->precision;
	inf.play.encoding = enc->encoding;
	inf.play.channels = chans;
	inf.play.sample_rate = rate;; 

	if (ioctl(fd, AUDIO_SETINFO, &inf) == -1) {
		printf("[%s]", strerror(errno));
		goto out;
	}

	if (ioctl(fd, AUDIO_GETINFO, &inf) == -1) {
		printf("[getinfo: %s]", strerror(errno));
		goto out;
	}
	rt.r_rate = inf.play.sample_rate;
	rt.s_rate = inf.play.sample_rate;
	rt.bps = 1 * chans;
	rt.bytes = inf.play.sample_rate * chans * PLAYSECS;

	samples = (int8_t *)malloc(inf.play.sample_rate * chans);
	if (samples == NULL) {
		warn("malloc");
		goto out;
	}

	for (i = 0, p = samples; i < inf.play.sample_rate; i++) {
		float d;
		int8_t v;

		d = 127.0 * sinf(((float)i / (float)inf.play.sample_rate) *
		    (2 * M_PI * playfreq));
		d = rintf(d);
		v = d;

		for (j = 0; j < chans; j++) {
			*p = v;
			p++;
		}
	}

	mark_time(&rt.tv_begin);
	for (i = 0; i < PLAYSECS; i++)
		write(fd, samples, inf.play.sample_rate * chans);
	audio_wait(fd);
	mark_time(&rt.tv_end);
	check_srate(&rt);

out:
	if (samples != NULL)
		free(samples);
}

void
enc_slinear_16(int fd, audio_encoding_t *enc, int chans, int order, int rate)
{
	audio_info_t inf;
	struct ausrate rt;
	u_int8_t *samples = NULL, *p;
	int i, j;

	AUDIO_INITINFO(&inf);
	inf.play.precision = enc->precision;
	inf.play.encoding = enc->encoding;
	inf.play.channels = chans;
	inf.play.sample_rate = rate;; 

	if (ioctl(fd, AUDIO_SETINFO, &inf) == -1) {
		printf("[%s]", strerror(errno));
		goto out;
	}

	if (ioctl(fd, AUDIO_GETINFO, &inf) == -1) {
		printf("[getinfo: %s]", strerror(errno));
		goto out;
	}
	rt.r_rate = inf.play.sample_rate;
	rt.s_rate = inf.play.sample_rate;
	rt.bps = 2 * chans;
	rt.bytes = 2 * inf.play.sample_rate * chans * PLAYSECS;

	samples = (int8_t *)malloc(inf.play.sample_rate * chans * 2);
	if (samples == NULL) {
		warn("malloc");
		goto out;
	}

	for (i = 0, p = samples; i < inf.play.sample_rate; i++) {
		float d;
		int16_t v;

		d = 32767.0 * sinf(((float)i / (float)inf.play.sample_rate) *
		    (2 * M_PI * playfreq));
		d = rintf(d);
		v = d;

		for (j = 0; j < chans; j++) {
			if (order == LITTLE_ENDIAN) {
				*p = (v & 0x00ff) >> 0;
				p++;
				*p = (v & 0xff00) >> 8;
				p++;
			} else {
				*p = (v & 0xff00) >> 8;
				p++;
				*p = (v & 0x00ff) >> 0;
				p++;
			}
		}
	}

	mark_time(&rt.tv_begin);
	for (i = 0; i < PLAYSECS; i++)
		write(fd, samples, inf.play.sample_rate * chans * 2);
	audio_wait(fd);
	mark_time(&rt.tv_end);
	check_srate(&rt);

out:
	if (samples != NULL)
		free(samples);
}

void
enc_ulinear_16(int fd, audio_encoding_t *enc, int chans, int order, int rate)
{
	audio_info_t inf;
	struct ausrate rt;
	u_int8_t *samples = NULL, *p;
	int i, j;

	AUDIO_INITINFO(&inf);
	inf.play.precision = enc->precision;
	inf.play.encoding = enc->encoding;
	inf.play.channels = chans;
	inf.play.sample_rate = rate;; 

	if (ioctl(fd, AUDIO_SETINFO, &inf) == -1) {
		printf("[%s]", strerror(errno));
		goto out;
	}

	if (ioctl(fd, AUDIO_GETINFO, &inf) == -1) {
		printf("[getinfo: %s]", strerror(errno));
		goto out;
	}

	samples = (u_int8_t *)malloc(inf.play.sample_rate * chans * 2);
	if (samples == NULL) {
		warn("malloc");
		goto out;
	}
	rt.r_rate = inf.play.sample_rate;
	rt.s_rate = inf.play.sample_rate;
	rt.bps = 2 * chans;
	rt.bytes = 2 * inf.play.sample_rate * chans * PLAYSECS;

	for (i = 0, p = samples; i < inf.play.sample_rate; i++) {
		float d;
		u_int16_t v;

		d = 32767.0 * sinf(((float)i / (float)inf.play.sample_rate) *
		    (2 * M_PI * playfreq));
		d = rintf(d + 32767.0);
		v = d;

		for (j = 0; j < chans; j++) {
			if (order == LITTLE_ENDIAN) {
				*p = (v >> 0) & 0xff;
				p++;
				*p = (v >> 8) & 0xff;
				p++;
			} else {
				*p = (v >> 8) & 0xff;
				p++;
				*p = (v >> 0) & 0xff;
				p++;
			}
		}
	}

	mark_time(&rt.tv_begin);
	for (i = 0; i < PLAYSECS; i++)
		write(fd, samples, inf.play.sample_rate * chans * 2);
	audio_wait(fd);
	mark_time(&rt.tv_end);
	check_srate(&rt);

out:
	if (samples != NULL)
		free(samples);
}

void
enc_adpcm_8(int fd, audio_encoding_t *enc, int chans, int rate)
{
	audio_info_t inf;
	struct adpcm_state adsts;
	int16_t *samples = NULL;
	int i, j;
	char *outbuf = NULL, *sbuf = NULL, *p;

	AUDIO_INITINFO(&inf);
	inf.play.precision = enc->precision;
	inf.play.encoding = enc->encoding;
	inf.play.channels = chans;
	inf.play.sample_rate = rate;; 

	if (ioctl(fd, AUDIO_SETINFO, &inf) == -1) {
		printf("[%s]", strerror(errno));
		goto out;
	}

	if (ioctl(fd, AUDIO_GETINFO, &inf) == -1) {
		printf("[getinfo: %s]", strerror(errno));
		goto out;
	}

	bzero(&adsts, sizeof(adsts));

	samples = (int16_t *)malloc(inf.play.sample_rate * sizeof(*samples));
	if (samples == NULL) {
		warn("malloc");
		goto out;
	}

	sbuf = (char *)malloc(inf.play.sample_rate / 2);
	if (sbuf == NULL) {
		warn("malloc");
		goto out;
	}

	for (i = 0; i < inf.play.sample_rate; i++) {
		float d;

		d = 32767.0 * sinf(((float)i / (float)inf.play.sample_rate) *
		    (2 * M_PI * playfreq));
		samples[i] = rintf(d);
	}

	outbuf = (char *)malloc((inf.play.sample_rate / 2) * chans);
	if (outbuf == NULL) {
		warn("malloc");
		goto out;
	}

	for (i = 0; i < PLAYSECS; i++) {
		adpcm_coder(samples, sbuf, inf.play.sample_rate, &adsts);

		for (i = 0, p = outbuf; i < inf.play.sample_rate / 2; i++) {
			for (j = 0; j < chans; j++, p++) {
				*p = sbuf[i];
			}
		}

		write(fd, outbuf, (inf.play.sample_rate / 2) * chans);
	}
	audio_wait(fd);

out:
	if (samples != NULL)
		free(samples);
	if (outbuf != NULL)
		free(outbuf);
	if (sbuf != NULL)
		free(sbuf);
}

void
enc_ulaw_8(int fd, audio_encoding_t *enc, int chans, int rate)
{
	audio_info_t inf;
	int16_t *samples = NULL;
	int i, j;
	u_int8_t *outbuf = NULL, *p;
	struct ausrate rt;

	AUDIO_INITINFO(&inf);
	inf.play.precision = enc->precision;
	inf.play.encoding = enc->encoding;
	inf.play.channels = chans;
	inf.play.sample_rate = rate;; 

	if (ioctl(fd, AUDIO_SETINFO, &inf) == -1) {
		printf("[%s]", strerror(errno));
		goto out;
	}

	if (ioctl(fd, AUDIO_GETINFO, &inf) == -1) {
		printf("[getinfo: %s]", strerror(errno));
		goto out;
	}
	rt.r_rate = inf.play.sample_rate;
	rt.s_rate = inf.play.sample_rate;
	rt.bps = 1 * chans;
	rt.bytes = inf.play.sample_rate * chans * PLAYSECS;

	samples = (int16_t *)calloc(inf.play.sample_rate, sizeof(*samples));
	if (samples == NULL) {
		warn("malloc");
		goto out;
	}

	outbuf = (u_int8_t *)malloc(inf.play.sample_rate * chans);
	if (outbuf == NULL) {
		warn("malloc");
		goto out;
	}

	for (i = 0; i < inf.play.sample_rate; i++) {
		float x;

		x = 32765.0 * sinf(((float)i / (float)inf.play.sample_rate) *
		    (2 * M_PI * playfreq));
		samples[i] = x;
	}

	for (i = 0, p = outbuf; i < inf.play.sample_rate; i++) {
		for (j = 0; j < chans; j++) {
			*p = linear2ulaw(samples[i]);
			p++;
		}
	}

	mark_time(&rt.tv_begin);
	for (i = 0; i < PLAYSECS; i++) {
		write(fd, outbuf, inf.play.sample_rate * chans);
	}
	audio_wait(fd);
	mark_time(&rt.tv_end);
	check_srate(&rt);

out:
	if (samples != NULL)
		free(samples);
	if (outbuf != NULL)
		free(outbuf);
}

void
enc_alaw_8(int fd, audio_encoding_t *enc, int chans, int rate)
{
	audio_info_t inf;
	struct ausrate rt;
	int16_t *samples = NULL;
	int i, j;
	u_int8_t *outbuf = NULL, *p;

	AUDIO_INITINFO(&inf);
	inf.play.precision = enc->precision;
	inf.play.encoding = enc->encoding;
	inf.play.channels = chans;
	inf.play.sample_rate = rate;; 

	if (ioctl(fd, AUDIO_SETINFO, &inf) == -1) {
		printf("[%s]", strerror(errno));
		goto out;
	}

	if (ioctl(fd, AUDIO_GETINFO, &inf) == -1) {
		printf("[getinfo: %s]", strerror(errno));
		goto out;
	}
	rt.r_rate = inf.play.sample_rate;
	rt.s_rate = inf.play.sample_rate;
	rt.bps = 1* chans;
	rt.bytes = inf.play.sample_rate * chans * PLAYSECS;

	samples = (int16_t *)calloc(inf.play.sample_rate, sizeof(*samples));
	if (samples == NULL) {
		warn("malloc");
		goto out;
	}

	outbuf = (u_int8_t *)malloc(inf.play.sample_rate * chans);
	if (outbuf == NULL) {
		warn("malloc");
		goto out;
	}

	for (i = 0; i < inf.play.sample_rate; i++) {
		float x;

		x = 32767.0 * sinf(((float)i / (float)inf.play.sample_rate) *
		    (2 * M_PI * playfreq));
		samples[i] = x;
	}

	for (i = 0, p = outbuf; i < inf.play.sample_rate; i++) {
		for (j = 0; j < chans; j++) {
			*p = linear2alaw(samples[i]);
			p++;
		}
	}

	mark_time(&rt.tv_begin);
	for (i = 0; i < PLAYSECS; i++) {
		write(fd, outbuf, inf.play.sample_rate * chans);
	}
	audio_wait(fd);
	mark_time(&rt.tv_end);
	check_srate(&rt);


out:
	if (samples != NULL)
		free(samples);
	if (outbuf != NULL)
		free(outbuf);
}

void
audio_wait(int fd)
{
	if (ioctl(fd, AUDIO_DRAIN, NULL) == -1)
		warn("drain");
}
@


1.13
log
@Pull in <sys/time.h> for gettimeofday()
Sort #includes

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: autest.c,v 1.12 2007/04/25 15:27:54 jason Exp $	*/
@


1.12
log
@- add ability to specify a tone to be played (defaults to 440hz)
- stop using atoi ... use strtod/strtol
- fixing timing stuff for alaw/8
@
text
@d1 1
a1 1
/*	$OpenBSD: autest.c,v 1.11 2005/09/27 02:53:43 drahn Exp $	*/
d32 3
a34 1
#include <string.h>
d36 2
a37 1
#include <err.h>
d40 1
a40 1
#include <math.h>
a41 2
#include <errno.h>
#include <limits.h>
@


1.11
log
@report time duration required to play sample then % error of sample rate.
from PR 4304. Also added support for different sample rate requests.
ok jason@@
@
text
@d1 1
a1 1
/*	$OpenBSD: autest.c,v 1.10 2003/08/06 16:15:44 jason Exp $	*/
d40 1
d73 2
d78 1
d83 34
d124 1
a124 1
	while ((c = getopt(argc, argv, "f:r:")) != -1) {
d130 12
a141 1
			rate = atoi(optarg);
d366 1
a366 1
		    (2 * M_PI * PLAYFREQ));
d427 1
a427 1
		    (2 * M_PI * PLAYFREQ));
d488 1
a488 1
		    (2 * M_PI * PLAYFREQ));
d558 1
a558 1
		    (2 * M_PI * PLAYFREQ));
d632 1
a632 1
		    (2 * M_PI * PLAYFREQ));
d709 1
a709 1
		    (2 * M_PI * PLAYFREQ));
d739 1
d759 4
d780 1
a780 1
		    (2 * M_PI * PLAYFREQ));
d791 1
d796 3
@


1.10
log
@don't repeat the numeric frequency 10 times... use a #define
@
text
@d1 1
a1 1
/*	$OpenBSD: autest.c,v 1.9 2003/06/04 02:41:57 jason Exp $	*/
d47 11
d59 10
a68 10
void check_encoding(int, audio_encoding_t *);
void check_encoding_mono(int, audio_encoding_t *);
void check_encoding_stereo(int, audio_encoding_t *);
void enc_ulaw_8(int, audio_encoding_t *, int);
void enc_alaw_8(int, audio_encoding_t *, int);
void enc_ulinear_8(int, audio_encoding_t *, int);
void enc_ulinear_16(int, audio_encoding_t *, int, int);
void enc_slinear_8(int, audio_encoding_t *, int);
void enc_slinear_16(int, audio_encoding_t *, int, int);
void enc_adpcm_8(int, audio_encoding_t *, int);
d70 2
d84 1
d86 1
a86 1
	while ((c = getopt(argc, argv, "f:")) != -1) {
d91 3
d118 1
a118 1
		check_encoding(fd, &enc);
d126 20
a145 1
check_encoding(int fd, audio_encoding_t *enc)
d152 2
a153 2
	check_encoding_mono(fd, enc);
	check_encoding_stereo(fd, enc);
d158 8
a165 1
check_encoding_mono(int fd, audio_encoding_t *enc)
d175 1
a175 1
			enc_ulaw_8(fd, enc, 1);
d178 1
a178 1
			enc_alaw_8(fd, enc, 1);
d183 1
a183 1
			enc_ulinear_8(fd, enc, 1);
d188 1
a188 1
			enc_slinear_8(fd, enc, 1);
d191 1
a191 1
			enc_adpcm_8(fd, enc, 1);
d201 1
a201 1
			enc_ulinear_16(fd, enc, 1, LITTLE_ENDIAN);
d204 1
a204 1
			enc_ulinear_16(fd, enc, 1, BIG_ENDIAN);
d207 1
a207 1
			enc_slinear_16(fd, enc, 1, LITTLE_ENDIAN);
d210 1
a210 1
			enc_slinear_16(fd, enc, 1, BIG_ENDIAN);
d222 1
a222 1
check_encoding_stereo(int fd, audio_encoding_t *enc)
d232 1
a232 1
			enc_ulaw_8(fd, enc, 2);
d235 1
a235 1
			enc_alaw_8(fd, enc, 2);
d240 1
a240 1
			enc_ulinear_8(fd, enc, 2);
d245 1
a245 1
			enc_slinear_8(fd, enc, 2);
d248 1
a248 1
			enc_adpcm_8(fd, enc, 2);
d258 1
a258 1
			enc_ulinear_16(fd, enc, 2, LITTLE_ENDIAN);
d261 1
a261 1
			enc_ulinear_16(fd, enc, 2, BIG_ENDIAN);
d264 1
a264 1
			enc_slinear_16(fd, enc, 2, LITTLE_ENDIAN);
d267 1
a267 1
			enc_slinear_16(fd, enc, 2, BIG_ENDIAN);
d279 1
a279 1
enc_ulinear_8(int fd, audio_encoding_t *enc, int chans)
d282 1
d290 1
d301 4
d327 1
d331 2
d340 1
a340 1
enc_slinear_8(int fd, audio_encoding_t *enc, int chans)
d343 1
d351 1
d362 4
d388 1
d392 2
d401 1
a401 1
enc_slinear_16(int fd, audio_encoding_t *enc, int chans, int order)
d404 1
d412 1
d423 4
d458 1
d462 2
d471 1
a471 1
enc_ulinear_16(int fd, audio_encoding_t *enc, int chans, int order)
d474 1
d482 1
d499 4
d528 1
d532 2
d541 1
a541 1
enc_adpcm_8(int fd, audio_encoding_t *enc, int chans)
d553 1
d616 1
a616 1
enc_ulaw_8(int fd, audio_encoding_t *enc, int chans)
d622 1
d628 1
d639 4
d671 1
d676 2
d687 1
a687 1
enc_alaw_8(int fd, audio_encoding_t *enc, int chans)
d698 1
@


1.9
log
@fix a few more prints... stupid monoaural devices...
@
text
@d1 1
a1 1
/*	$OpenBSD: autest.c,v 1.8 2003/06/04 01:31:04 jason Exp $	*/
d60 1
d268 1
a268 1
		    (2 * M_PI * 440.0));
d320 1
a320 1
		    (2 * M_PI * 440.0));
d372 1
a372 1
		    (2 * M_PI * 440.0));
d433 1
a433 1
		    (2 * M_PI * 440.0));
d503 1
a503 1
		    (2 * M_PI * 440.0));
d574 1
a574 1
		    (2 * M_PI * 440.0));
d636 1
a636 1
		    (2 * M_PI * 440.0));
@


1.8
log
@fix printing when AUDIO_SETINFO fails
@
text
@d1 1
a1 1
/*	$OpenBSD: autest.c,v 1.7 2003/06/02 19:15:38 jason Exp $	*/
d252 1
a252 1
		warn("getinfo");
d304 1
a304 1
		warn("getinfo");
d356 1
a356 1
		warn("getinfo");
d417 1
a417 1
		warn("getinfo");
d480 1
a480 1
		warn("getinfo");
d553 1
a553 1
		warn("getinfo");
d610 1
a610 1
		warn("setinfo");
d615 1
a615 1
		warn("getinfo");
@


1.7
log
@more license cleaning
@
text
@d1 1
a1 1
/*	$OpenBSD: autest.c,v 1.6 2003/02/05 04:39:34 jason Exp $	*/
d39 1
d247 1
a247 1
		warn("setinfo");
d299 1
a299 1
		warn("setinfo");
d351 1
a351 1
		warn("setinfo");
d412 1
a412 1
		warn("setinfo");
d475 1
a475 1
		warn("setinfo");
d548 1
a548 1
		warn("setinfo");
@


1.6
log
@- combine 16 bit le/be functions
- clean up format switch
@
text
@d1 1
a1 1
/*	$OpenBSD: autest.c,v 1.5 2003/02/04 08:01:50 jason Exp $	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Jason L. Wright
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.5
log
@don't need double precision anywhere in here
@
text
@d1 1
a1 1
/*	$OpenBSD: autest.c,v 1.4 2003/02/04 07:49:34 jason Exp $	*/
d58 1
a58 2
void enc_ulinear_be_16(int, audio_encoding_t *, int);
void enc_ulinear_le_16(int, audio_encoding_t *, int);
d60 1
a60 2
void enc_slinear_be_16(int, audio_encoding_t *, int);
void enc_slinear_le_16(int, audio_encoding_t *, int);
d125 57
d184 2
d188 4
a191 3
	switch (enc->encoding) {
	case AUDIO_ENCODING_ULAW:
		if (enc->precision == 8) {
d193 2
a194 4
		}
		break;
	case AUDIO_ENCODING_ALAW:
		if (enc->precision == 8) {
d196 4
a199 4
		}
		break;
	case AUDIO_ENCODING_ULINEAR:
		if (enc->precision == 8) {
d201 4
a204 16
		}
		break;
	case AUDIO_ENCODING_ULINEAR_LE:
		if (enc->precision == 8)
			enc_ulinear_8(fd, enc, 2);
		else if (enc->precision == 16)
			enc_ulinear_le_16(fd, enc, 2);
		break;
	case AUDIO_ENCODING_ULINEAR_BE:
		if (enc->precision == 8)
			enc_ulinear_8(fd, enc, 2);
		else if (enc->precision == 16)
			enc_ulinear_be_16(fd, enc, 2);
		break;
	case AUDIO_ENCODING_SLINEAR:
		if (enc->precision == 8) {
d206 6
a212 21
		break;
	case AUDIO_ENCODING_SLINEAR_LE:
		if (enc->precision == 8)
			enc_slinear_8(fd, enc, 2);
		else if (enc->precision == 16)
			enc_slinear_le_16(fd, enc, 2);
		break;
	case AUDIO_ENCODING_SLINEAR_BE:
		if (enc->precision == 8)
			enc_slinear_8(fd, enc, 2);
		else if (enc->precision == 16)
			enc_slinear_be_16(fd, enc, 2);
		break;
#ifdef USE_ADPCM
	case AUDIO_ENCODING_ADPCM:
		if (enc->precision == 8)
			enc_adpcm_8(fd, enc, 2);
		break;
#endif
	default:
		printf("[skip]");
a213 1
}
d215 16
a230 9
void
check_encoding_mono(int fd, audio_encoding_t *enc)
{
	printf("...mono");
	fflush(stdout);
	switch (enc->encoding) {
	case AUDIO_ENCODING_ULAW:
		if (enc->precision == 8) {
			enc_ulaw_8(fd, enc, 1);
d232 3
a234 47
		break;
	case AUDIO_ENCODING_ALAW:
		if (enc->precision == 8) {
			enc_alaw_8(fd, enc, 1);
		}
		break;
	case AUDIO_ENCODING_ULINEAR:
		if (enc->precision == 8) {
			enc_ulinear_8(fd, enc, 1);
		}
		break;
	case AUDIO_ENCODING_ULINEAR_LE:
		if (enc->precision == 8)
			enc_ulinear_8(fd, enc, 1);
		else if (enc->precision == 16)
			enc_ulinear_le_16(fd, enc, 1);
		break;
	case AUDIO_ENCODING_ULINEAR_BE:
		if (enc->precision == 8)
			enc_ulinear_8(fd, enc, 1);
		else if (enc->precision == 16)
			enc_ulinear_be_16(fd, enc, 1);
		break;
	case AUDIO_ENCODING_SLINEAR:
		if (enc->precision == 8) {
			enc_slinear_8(fd, enc, 1);
		}
		break;
	case AUDIO_ENCODING_SLINEAR_LE:
		if (enc->precision == 8)
			enc_slinear_8(fd, enc, 1);
		else if (enc->precision == 16)
			enc_slinear_le_16(fd, enc, 1);
		break;
	case AUDIO_ENCODING_SLINEAR_BE:
		if (enc->precision == 8)
			enc_slinear_8(fd, enc, 1);
		else if (enc->precision == 16)
			enc_slinear_be_16(fd, enc, 1);
		break;
#ifdef USE_ADPCM
	case AUDIO_ENCODING_ADPCM:
		if (enc->precision == 8)
			enc_adpcm_8(fd, enc, 1);
		break;
#endif
	default:
a235 1
	}
d343 1
a343 55
enc_slinear_be_16(int fd, audio_encoding_t *enc, int chans)
{
	audio_info_t inf;
	u_int8_t *samples = NULL, *p;
	int i, j;

	AUDIO_INITINFO(&inf);
	inf.play.precision = enc->precision;
	inf.play.encoding = enc->encoding;
	inf.play.channels = chans;

	if (ioctl(fd, AUDIO_SETINFO, &inf) == -1) {
		warn("setinfo");
		goto out;
	}

	if (ioctl(fd, AUDIO_GETINFO, &inf) == -1) {
		warn("getinfo");
		goto out;
	}

	samples = (int8_t *)malloc(inf.play.sample_rate * chans * 2);
	if (samples == NULL) {
		warn("malloc");
		goto out;
	}

	for (i = 0, p = samples; i < inf.play.sample_rate; i++) {
		float d;
		int16_t v;

		d = 32767.0 * sinf(((float)i / (float)inf.play.sample_rate) *
		    (2 * M_PI * 440.0));
		d = rintf(d);
		v = d;

		for (j = 0; j < chans; j++) {
			*p = (v & 0xff00) >> 8;
			p++;
			*p = (v & 0x00ff) >> 0;
			p++;
		}
	}

	for (i = 0; i < PLAYSECS; i++)
		write(fd, samples, inf.play.sample_rate * chans * 2);
	audio_wait(fd);

out:
	if (samples != NULL)
		free(samples);
}

void
enc_slinear_le_16(int fd, audio_encoding_t *enc, int chans)
d380 11
a390 4
			*p = (v & 0x00ff) >> 0;
			p++;
			*p = (v & 0xff00) >> 8;
			p++;
d404 1
a404 1
enc_ulinear_le_16(int fd, audio_encoding_t *enc, int chans)
d441 11
a451 58
			*p = (v >> 0) & 0xff;
			p++;
			*p = (v >> 8) & 0xff;
			p++;
		}
	}

	for (i = 0; i < PLAYSECS; i++)
		write(fd, samples, inf.play.sample_rate * chans * 2);
	audio_wait(fd);

out:
	if (samples != NULL)
		free(samples);
}

void
enc_ulinear_be_16(int fd, audio_encoding_t *enc, int chans)
{
	audio_info_t inf;
	u_int8_t *samples = NULL, *p;
	int i, j;

	AUDIO_INITINFO(&inf);
	inf.play.precision = enc->precision;
	inf.play.encoding = enc->encoding;
	inf.play.channels = chans;

	if (ioctl(fd, AUDIO_SETINFO, &inf) == -1) {
		warn("setinfo");
		goto out;
	}

	if (ioctl(fd, AUDIO_GETINFO, &inf) == -1) {
		warn("getinfo");
		goto out;
	}

	samples = (u_int8_t *)malloc(inf.play.sample_rate * chans * 2);
	if (samples == NULL) {
		warn("malloc");
		goto out;
	}

	for (i = 0, p = samples; i < inf.play.sample_rate; i++) {
		float d;
		u_int16_t v;

		d = 32767.0 * sinf(((float)i / (float)inf.play.sample_rate) *
		    (2 * M_PI * 440.0));
		d = rintf(d + 32767.0);
		v = d;

		for (j = 0; j < chans; j++) {
			*p = (v >> 8) & 0xff;
			p++;
			*p = (v >> 0) & 0xff;
			p++;
@


1.4
log
@hack at stereo adpcm
@
text
@d1 1
a1 1
/*	$OpenBSD: autest.c,v 1.3 2003/02/04 07:38:51 jason Exp $	*/
d277 1
a277 1
		double d;
d280 1
a280 1
		d = 127.0 * sin(((double)i / (double)inf.play.sample_rate) *
d282 1
a282 1
		d = rint(d + 127.0);
d329 1
a329 1
		double d;
d332 1
a332 1
		d = 127.0 * sin(((double)i / (double)inf.play.sample_rate) *
d334 1
a334 1
		d = rint(d);
d381 1
a381 1
		double d;
d384 1
a384 1
		d = 32767.0 * sin(((double)i / (double)inf.play.sample_rate) *
d386 1
a386 1
		d = rint(d);
d435 1
a435 1
		double d;
d438 1
a438 1
		d = 32767.0 * sin(((double)i / (double)inf.play.sample_rate) *
d440 1
a440 1
		d = rint(d);
d489 1
a489 1
		double d;
d492 1
a492 1
		d = 32767.0 * sin(((double)i / (double)inf.play.sample_rate) *
d494 1
a494 1
		d = rint(d + 32767.0);
d543 1
a543 1
		double d;
d546 1
a546 1
		d = 32767.0 * sin(((double)i / (double)inf.play.sample_rate) *
d548 1
a548 1
		d = rint(d + 32767.0);
d607 1
a607 1
		double d;
d609 1
a609 1
		d = 32767.0 * sin(((double)i / (double)inf.play.sample_rate) *
d611 1
a611 1
		samples[i] = rint(d);
d680 1
a680 1
		x = 32765.0 * sin(((double)i / (double)inf.play.sample_rate) *
d742 1
a742 1
		x = 32767.0 * sin(((double)i / (double)inf.play.sample_rate) *
@


1.3
log
@free memory if pointer is -not- NULL...
@
text
@d1 1
a1 1
/*	$OpenBSD: autest.c,v 1.2 2003/02/01 18:09:27 jason Exp $	*/
d45 3
d176 6
d237 1
a237 1
#if 0
d574 2
a575 2
	int i;
	char *outbuf = NULL;
d600 2
a601 2
	outbuf = (char *)malloc(inf.play.sample_rate / 2);
	if (outbuf == NULL) {
d614 6
d621 9
a629 2
		adpcm_coder(samples, outbuf, inf.play.sample_rate, &adsts);
		write(fd, outbuf, inf.play.sample_rate / 2);
d638 2
@


1.2
log
@add -f flag so the device can be specified, and make sure the device is
an audio device (ioctl(... AUDIO_GETINFO ...) should do).
@
text
@d1 1
a1 1
/*	$OpenBSD: autest.c,v 1.1.1.1 2003/02/01 17:58:18 jason Exp $	*/
d612 1
a612 1
	if (samples == NULL)
d614 1
a614 1
	if (outbuf == NULL)
d674 1
a674 1
	if (samples == NULL)
d676 1
a676 1
	if (outbuf == NULL)
d736 1
a736 1
	if (samples == NULL)
d738 1
a738 1
	if (outbuf == NULL)
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d48 1
a48 1
int main(void);
d65 2
d68 1
a68 1
main()
d70 18
a87 1
	int fd, i;
d89 1
a89 1
	fd = open("/dev/sound", O_RDWR, 0);
d93 3
@


1.1.1.1
log
@audio encoding tester
@
text
@@
