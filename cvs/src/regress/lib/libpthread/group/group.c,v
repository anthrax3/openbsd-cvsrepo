head	1.6;
access;
symbols
	OPENBSD_6_0:1.6.0.44
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.34
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.42
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.40
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.38
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.36
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.32
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.30
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.28
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.26
	OPENBSD_5_0:1.6.0.24
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.22
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.20
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.16
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.18
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.14
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.12
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.10
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.8
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.6
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.4
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.2
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.4.0.2
	OPENBSD_3_3_BASE:1.4;
locks; strict;
comment	@ * @;


1.6
date	2005.10.30.23.59.43;	author fgsch;	state Exp;
branches;
next	1.5;

1.5
date	2003.07.31.21.48.04;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2001.09.12.12.07.39;	author fgsch;	state Exp;
branches;
next	1.3;

1.3
date	2001.09.11.04.57.32;	author pvalchev;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.23.04.26.05;	author fgsch;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.15.14.37.11;	author fgsch;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.08.15.14.37.11;	author fgsch;	state Exp;
branches;
next	;


desc
@@


1.6
log
@-Wall cleanup.
@
text
@/*	$OpenBSD: group.c,v 1.5 2003/07/31 21:48:04 deraadt Exp $	*/

/* David Leonard <d@@openbsd.org>, 2001. Public Domain. */

/*
 * Test getgrgid_r() across multiple threads to see if the members list changes.
 */

#include <sys/types.h>
#include <grp.h>
#include <pthread.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include "test.h"

int	getgrgid_r(gid_t, struct group *, char *, size_t, struct group **);

char fail[] = "fail";

pthread_cond_t done;
volatile int done_count;

pthread_mutex_t display;
pthread_mutex_t display2;

static void *
test(void *arg)
{
	gid_t gid = *(gid_t *)arg;
	gid_t ogid;
	struct group grpbuf;
	struct group *grp;
	char **p;
	char buffer[5000];
	char buf[2048];
	char *cpy[128];
	int i;
	int count1, count2;
	char *s;
	char *oname;
	char *opasswd;
	size_t len;

	/* Acquire lock for running first part. */
	CHECKr(pthread_mutex_lock(&display));

	/* Store magic name to test for non-alteration */
	grpbuf.gr_name = fail;

	/* Call getgrgid_r() */
	printf("gid %d\n", gid);
	CHECKr(getgrgid_r(gid, &grpbuf, buffer, sizeof(buffer), &grp));

	/* Test for non-alteration of group structure */
	ASSERT(grp->gr_name != fail);

	/* We must get the right group */
	ASSERT(grp->gr_gid == gid);

	s = buf;	/* Keep our private buffer on the stack */
	len = sizeof(buf);

	/* copy gr_name */
	strlcpy(oname = s, grp->gr_name, len);
	len -= 1 + strlen(s);
	s += 1 + strlen(s);

	/* copy gr_passwd */
	strlcpy(opasswd = s, grp->gr_passwd, len);
	len -= 1 + strlen(s);
	s += 1 + strlen(s);

	/* copy gr_gid */
	ogid = grp->gr_gid;

	/* copy gr_mem */
	for (i = 0, p = grp->gr_mem; *p; p++) {
		strlcpy(cpy[i] = s, *p, len);
		i++;
		len -= 1 + strlen(s);
		s += 1 + strlen(s);
	}
	cpy[i] = NULL;

#if 0
	printf("now:    %s:%s:%d:", grp->gr_name, grp->gr_passwd, grp->gr_gid);
	for (p = grp->gr_mem; *p; p++) 
		printf("%s%s", *p, *(p+1) == NULL ? "": ",");
	printf("\n");
#endif

#ifdef DEBUG /* debugging this program */
	printf("buf = \"");
	for (i = 0; i < s - buf; i++)
		if (buf[i] == '\0')	printf("\\0");
		else printf("%c", buf[i]);
	printf("\"\n");
#endif

	/* Inform main that we have finished */
	done_count++;
	CHECKr(pthread_cond_signal(&done));

	/* Allow other threads to run first part */
	CHECKr(pthread_mutex_unlock(&display));

	/* Acquire lock for the second part */
	CHECKr(pthread_mutex_lock(&display2));

	count1 = 0;
	printf("before: %s:%s:%d:", oname, opasswd, ogid);
	for (p = cpy; *p; p++)  {
		count1++;
		printf("%s%s", *p, *(p+1) == NULL ? "": ",");
	}
	printf("\n");

	count2 = 0;
	printf("after:  %s:%s:%d:", grp->gr_name, grp->gr_passwd, grp->gr_gid);
	for (p = grp->gr_mem; *p; p++)  {
		count2++;
		printf("%s%s", *p, *(p+1) == NULL ? "": ",");
	}
	printf("\n");

	CHECKr(pthread_mutex_unlock(&display2));

	if (count1 != count2)
		return "gr_mem length changed";
	for (i = 0; i < count1; i++)
		if (strcmp(cpy[i], grp->gr_mem[i]) != 0)
			return "gr_mem list changed";
	if (strcmp(grp->gr_name, oname) != 0)
		return "gr_name changed";
	if (strcmp(grp->gr_passwd, opasswd) != 0)
		return "gr_passwd changed";
	if (grp->gr_gid != ogid)
		return "gr_gid changed";
	return NULL;
}


#define NGRPS	5
int
main(int argc, char *argv[])
{
	pthread_t thread[NGRPS];
	int gid;
	int failed;
	void *result;

	CHECKr(pthread_mutex_init(&display, NULL));
	CHECKr(pthread_mutex_init(&display2, NULL));

	CHECKr(pthread_cond_init(&done, NULL));
	done_count = 0;

	pthread_mutex_lock(&display);
	pthread_mutex_lock(&display2);

	/* Get separate threads to do a group open separately */
	for (gid = 0; gid < NGRPS; gid++) {
		int *n = (int *)malloc(sizeof(int));
		*n = gid;

		CHECKr(pthread_create(&thread[gid], NULL, test, (void *)n));
	}

	/* Allow all threads to run their first part */
	while (done_count < NGRPS) 
		pthread_cond_wait(&done, &display);

	/* Allow each thread to run the 2nd part of its test */
	CHECKr(pthread_mutex_unlock(&display2));

	/* Wait for each thread to terminate, collecting results. */
	failed = 0;
	for (gid = 0; gid < NGRPS; gid++) {
		CHECKr(pthread_join(thread[gid], &result));
		if (result != NULL) {
			fprintf(stderr, "gid %d: %s\n", gid, (char *)result);
			failed++;
		}
	}

	if (!failed) {
		SUCCEED;
	} else {
		exit(1);
	}
}
@


1.5
log
@various cleanups; david says results are same
@
text
@d1 1
a1 1
/*	$OpenBSD: group.c,v 1.4 2001/09/12 12:07:39 fgsch Exp $	*/
d43 1
d62 1
d65 2
a66 1
	strcpy(oname = s, grp->gr_name);
d70 2
a71 1
	strcpy(opasswd = s, grp->gr_passwd);
d79 3
a81 1
		strcpy(cpy[i] = s, *p); i++;
@


1.4
log
@Fix test.
@
text
@d1 1
a1 1
/*	$OpenBSD: group.c,v 1.3 2001/09/11 04:57:32 pvalchev Exp $	*/
d27 1
a27 1
void *
d140 1
a140 1
main()
@


1.3
log
@match getgrgid_r() change
@
text
@d1 2
a2 1
/*	$OpenBSD: group.c,v 1.2 2001/08/23 04:26:05 fgsch Exp $	*/
d9 2
d14 1
a14 2
#include <grp.h>
#include <sys/types.h>
d17 1
a17 1
struct group * getgrgid_r(gid_t, struct group *, char *, size_t, struct group **);
d27 2
a28 2
void*
test(void* arg)
d35 1
a42 1
	size_t size = 0;
d52 1
a52 1
	CHECKn(grp = getgrgid_r(gid, &grpbuf, buf, size, &grp));
d158 4
a161 1
		CHECKr(pthread_create(&thread[gid], NULL, test, (void *)&gid));
@


1.2
log
@while im here, remove -Wall warnings.
@
text
@d1 1
a1 1
/*	$OpenBSD: group.c,v 1.1.1.1 2001/08/15 14:37:11 fgsch Exp $	*/
d15 1
a15 1
struct group * getgrgid_r(gid_t, struct group *);
d40 1
d50 1
a50 1
	CHECKn(grp = getgrgid_r(gid, &grpbuf));
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD: test_group.c,v 1.2 2000/01/08 09:01:29 d Exp $	*/
d28 1
a28 1
	gid_t gid = (int)arg;
d155 1
a155 1
		CHECKr(pthread_create(&thread[gid], NULL, test, (void *)gid));
@


1.1.1.1
log
@Regression tests for libc_r (pthreads) library.
Thanks to pval@@ for resolving the license stuff.
@
text
@@
