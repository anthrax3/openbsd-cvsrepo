head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.24
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.22
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.18
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.8
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.16
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.14
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.12
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.10
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.6
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.36
	OPENBSD_5_0:1.3.0.34
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.32
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.30
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.26
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.28
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.24
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.22
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.20
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.18
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.16
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.14
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.12
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.10
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.8
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.2
	OPENBSD_3_3_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2012.02.20.02.19.15;	author guenther;	state Exp;
branches;
next	1.3;

1.3
date	2003.07.31.21.48.05;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.16.23.05.14;	author marc;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.03.10.08.55;	author wcobb;	state Exp;
branches;
next	;


desc
@@


1.4
log
@This test needs a large nprocs ulimit, so just have it raise its own
@
text
@/*	$OpenBSD: pthread_specific.c,v 1.3 2003/07/31 21:48:05 deraadt Exp $	*/

/*
 * Copyright (c) 2002 CubeSoft Communications, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistribution of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Neither the name of CubeSoft Communications, nor the names of its
 *    contributors may be used to endorse or promote products derived from
 *    this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
 * USE OF THIS SOFTWARE EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/resource.h>
#include <pthread.h>
#include <pthread_np.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include "test.h"

#define NTHREADS	128

pthread_key_t key;
int destroy_run = 0;

static void *
run_thread(void *arg)
{
	int i;

	CHECKe(write(STDOUT_FILENO, ".", 1));
	for (i = 0; i < 32767; i++) {
		void *p;

		p = pthread_getspecific(key);
		if (p == NULL) {
			CHECKr(pthread_setspecific(key, pthread_self()));
		} else {
			ASSERT(p == pthread_self());
		}
		fflush(stderr);
	}

	return (NULL);
}

static void
destroy_key(void *keyp)
{
	destroy_run++;
}

int
main(int argc, char *argv[])
{
	pthread_t threads[NTHREADS];
	struct rlimit nproc;
	int i;

	CHECKe(getrlimit(RLIMIT_NPROC, &nproc));
	nproc.rlim_cur = nproc.rlim_max;
	CHECKe(setrlimit(RLIMIT_NPROC, &nproc));
	
	CHECKr(pthread_key_create(&key, destroy_key));
	for (i = 0; i < NTHREADS; i++) {
		CHECKr(pthread_create(&threads[i], NULL, run_thread, NULL));
	}
	for (i = 0; i < NTHREADS; i++) {
		CHECKr(pthread_join(threads[i], NULL));
	}
	CHECKe(write(STDOUT_FILENO, "\n", 1));
	
	CHECKr(pthread_key_delete(key));

	ASSERT(destroy_run > 0);

	SUCCEED;
}
@


1.3
log
@various cleanups; david says results are same
@
text
@d1 1
a1 1
/*	$OpenBSD: pthread_specific.c,v 1.2 2002/06/16 23:05:14 marc Exp $	*/
d28 2
d73 1
d76 4
@


1.2
log
@
write output to stdout instead of fprintf to stderr.  This brings it
in line with all of the other pthread regression tests.
@
text
@d1 1
a1 1
/*	$OpenBSD: pthread_specific.c,v 1.1 2002/05/03 10:08:55 wcobb Exp $	*/
d40 1
a40 1
void *
d61 1
a61 1
void
d68 1
a68 1
main()
@


1.1
log
@test pthread_key_create(), pthread_key_delete(), pthread_getspecific()
and pthread_setspecific().

ok fgsch@@.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d45 1
a45 1
	fprintf(stderr, ".");
d80 1
a80 1
	fprintf(stderr, "\n");
@

