head	1.1;
access;
symbols
	OPENBSD_6_2_BASE:1.1
	OPENBSD_6_1:1.1.0.60
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.56
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.46
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.54
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.52
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.50
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.48
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.44
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.42
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.40
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.38
	OPENBSD_5_0:1.1.0.36
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.34
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.32
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.28
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.30
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.26
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.24
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.22
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.20
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.18
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.16
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.14
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.12
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.10
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.8
	OPENBSD_3_6_BASE:1.1
	OPENBSD_3_5:1.1.0.6
	OPENBSD_3_5_BASE:1.1
	OPENBSD_3_4:1.1.0.4
	OPENBSD_3_4_BASE:1.1
	OPENBSD_3_3:1.1.0.2
	OPENBSD_3_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.1
date	2002.10.12.03.39.21;	author marc;	state Exp;
branches;
next	;


desc
@@


1.1
log
@oops, add the test
@
text
@/* $OpenBSD$ */
/* PUBLIC DOMAIN Oct 2002 <marc@@snafu.org> */

/*
 * test signal delivery of pending signals
 */

#include <signal.h>
#include <stdio.h>
#include <unistd.h>

#include "test.h"

static pthread_mutex_t	sync_mutex;

volatile sig_atomic_t	got_signal;

/*
 * sigusr1 signal handler.
 */
static void
sighandler(int signo)
{
	got_signal += 1;
}

/*
 * Install a signal handler for sigusr1 and then wait for it to
 * occur.
 */
static void *
do_nothing (void *arg)
{
	SET_NAME("nothing");

	ASSERT(signal(SIGUSR1, sighandler) != SIG_ERR);
	CHECKr(pthread_mutex_lock(&sync_mutex));
	ASSERT(got_signal != 0);
	CHECKr(pthread_mutex_unlock(&sync_mutex));
	return 0;
}

int
main (int argc, char *argv[])
{
	pthread_t pthread;

	/* Initialize and lock a mutex. */
	CHECKr(pthread_mutex_init(&sync_mutex, NULL));
	CHECKr(pthread_mutex_lock(&sync_mutex));

	/* start a thread that will wait on the mutex we now own */
	CHECKr(pthread_create(&pthread, NULL, do_nothing, NULL));

	/*
	 * Give the thread time to run and install its signal handler.
	 * The thread should be blocked waiting for the mutex we own.
	 * Give it a signal and then release the mutex and see if the
	 * signal is ever processed.
	 */
	sleep(2);
	CHECKr(pthread_kill(pthread, SIGUSR1));
	CHECKr(pthread_mutex_unlock(&sync_mutex));
	CHECKr(pthread_join(pthread, NULL));
	SUCCEED;
}
@
