head	1.10;
access;
symbols
	OPENBSD_6_1:1.10.0.22
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.18
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.8
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.16
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.14
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.12
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.10
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.6
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.4
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.2
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.6.0.24
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.22
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.20
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.16
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.18
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.14
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.12
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.10
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.8
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.6
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.4
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.2
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.4.0.10
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.8
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3;
locks; strict;
comment	@ * @;


1.10
date	2012.03.24.21.39.10;	author guenther;	state Exp;
branches;
next	1.9;

1.9
date	2012.02.23.07.54.40;	author guenther;	state Exp;
branches;
next	1.8;

1.8
date	2012.02.20.04.43.49;	author guenther;	state Exp;
branches;
next	1.7;

1.7
date	2011.09.23.10.39.08;	author uwe;	state Exp;
branches;
next	1.6;

1.6
date	2005.12.19.05.22.57;	author tedu;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.30.23.59.43;	author fgsch;	state Exp;
branches;
next	1.4;

1.4
date	2003.07.31.21.48.05;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2001.11.03.04.33.48;	author marc;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.20.16.43.15;	author todd;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.15.14.37.12;	author fgsch;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.08.15.14.37.12;	author fgsch;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Another tiny test case
@
text
@/*	$OpenBSD: pthread_mutex.c,v 1.9 2012/02/23 07:54:40 guenther Exp $	*/
/*
 * Copyright (c) 1993, 1994, 1995, 1996 by Chris Provenzano and contributors, 
 * proven@@mit.edu All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Chris Provenzano,
 *	the University of California, Berkeley, and contributors.
 * 4. Neither the name of Chris Provenzano, the University, nor the names of
 *   contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY CHRIS PROVENZANO AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL CHRIS PROVENZANO, THE REGENTS OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */ 

/* ==== test_pthread_cond.c =========================================
 * Copyright (c) 1993 by Chris Provenzano, proven@@athena.mit.edu
 *
 * Description : Test pthread_mutex(). Run this after test_create()
 *
 *  1.23 94/05/04 proven
 *      -Started coding this file.
 */

#include <sys/time.h>
#include <errno.h>
#include <pthread.h>
#include <pthread_np.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include "test.h"

int contention_variable;

static void * 
thread_contention(void *arg)
{
	pthread_mutex_t *mutex = arg;

	SET_NAME("cntntn");

	CHECKr(pthread_mutex_lock(mutex));
	ASSERT(contention_variable == 1);
	contention_variable = 2;
	CHECKr(pthread_mutex_unlock(mutex));
	pthread_exit(NULL);
}

static void
test_contention_lock(pthread_mutex_t *mutex)
{
	pthread_t thread;

	printf("  test_contention_lock()\n");
	CHECKr(pthread_mutex_lock(mutex));
	contention_variable = 0;
	CHECKr(pthread_create(&thread, NULL, thread_contention, mutex));
	pthread_yield();
	contention_variable = 1;
	CHECKr(pthread_mutex_unlock(mutex));
	sleep(1);
	CHECKr(pthread_mutex_lock(mutex));
	ASSERT(contention_variable == 2);
	CHECKr(pthread_mutex_unlock(mutex));
	CHECKr(pthread_join(thread, NULL));
}

static void
test_nocontention_lock(pthread_mutex_t *mutex)
{
	printf("  test_nocontention_lock()\n");
	CHECKr(pthread_mutex_lock(mutex));
	CHECKr(pthread_mutex_unlock(mutex));
}

static void
test_debug_double_lock(pthread_mutex_t *mutex)
{
	printf("  test_debug_double_lock()\n");
	CHECKr(pthread_mutex_lock(mutex));
	ASSERTe(pthread_mutex_lock(mutex), == EDEADLK);
	CHECKr(pthread_mutex_unlock(mutex));
}

static void
test_debug_double_unlock(pthread_mutex_t *mutex)
{
	printf("  test_debug_double_unlock()\n");
	CHECKr(pthread_mutex_lock(mutex));
	CHECKr(pthread_mutex_unlock(mutex));
	/* Posix D10 says undefined behaviour? */
	ASSERTe(pthread_mutex_unlock(mutex), != 0);
}

static void
test_nocontention_trylock(pthread_mutex_t *mutex)
{
	printf("  test_nocontention_trylock()\n");
	CHECKr(pthread_mutex_trylock(mutex));
	CHECKr(pthread_mutex_unlock(mutex));
}

static void
test_mutex_static(void)
{
	pthread_mutex_t mutex_static = PTHREAD_MUTEX_INITIALIZER;

	printf("test_mutex_static()\n");
	test_nocontention_lock(&mutex_static);
	test_nocontention_trylock(&mutex_static);
	test_contention_lock(&mutex_static);
}

static void
test_mutex_fast(void)
{
	pthread_mutex_t mutex_fast; 

	printf("test_mutex_fast()\n");
	CHECKr(pthread_mutex_init(&mutex_fast, NULL));
	test_nocontention_lock(&mutex_fast);
	test_nocontention_trylock(&mutex_fast);
	test_contention_lock(&mutex_fast);
	CHECKr(pthread_mutex_destroy(&mutex_fast));
}

static void
test_mutex_debug(void)
{
	pthread_mutexattr_t mutex_debug_attr; 
	pthread_mutex_t mutex_debug; 

	printf("test_mutex_debug()\n");
	CHECKr(pthread_mutexattr_init(&mutex_debug_attr));
	CHECKr(pthread_mutexattr_settype(&mutex_debug_attr, 
	    PTHREAD_MUTEX_ERRORCHECK));
	CHECKr(pthread_mutex_init(&mutex_debug, &mutex_debug_attr));
	CHECKr(pthread_mutexattr_destroy(&mutex_debug_attr));
	test_nocontention_lock(&mutex_debug);
	test_nocontention_trylock(&mutex_debug);
	test_contention_lock(&mutex_debug);
	test_debug_double_lock(&mutex_debug);
	test_debug_double_unlock(&mutex_debug);
	CHECKr(pthread_mutex_destroy(&mutex_debug));
}

static void
test_mutex_recursive_lock(pthread_mutex_t *mutex)
{
	int i;
	int j = 9;

	printf("  %s()\n", __func__);
	CHECKr(pthread_mutex_lock(mutex));
	for (i = 0; i < j; i++)
		CHECKr(pthread_mutex_lock(mutex));
	for (i = 0; i < j; i++)
		CHECKr(pthread_mutex_unlock(mutex));
	CHECKr(pthread_mutex_unlock(mutex));
}

static void
test_mutex_recursive_trylock(pthread_mutex_t *mutex)
{
	int i;
	int j = 9;

	printf("  %s()\n", __func__);
	CHECKr(pthread_mutex_trylock(mutex));
	for (i = 0; i < j; i++)
		CHECKr(pthread_mutex_trylock(mutex));
	for (i = 0; i < j; i++)
		CHECKr(pthread_mutex_unlock(mutex));
	CHECKr(pthread_mutex_unlock(mutex));
}

static void
test_mutex_recursive(void)
{
	pthread_mutexattr_t mutex_recursive_attr; 
	pthread_mutex_t mutex_recursive; 

	printf("test_mutex_recursive()\n");
	CHECKr(pthread_mutexattr_init(&mutex_recursive_attr));
	CHECKr(pthread_mutexattr_settype(&mutex_recursive_attr, 
	    PTHREAD_MUTEX_RECURSIVE));
	CHECKr(pthread_mutex_init(&mutex_recursive, &mutex_recursive_attr));
	CHECKr(pthread_mutexattr_destroy(&mutex_recursive_attr));
	test_mutex_recursive_lock(&mutex_recursive);
	test_mutex_recursive_trylock(&mutex_recursive);
	/* Posix D10 says undefined behaviour? */
	ASSERTe(pthread_mutex_unlock(&mutex_recursive), != 0);
	CHECKr(pthread_mutex_destroy(&mutex_recursive));
}

static void *
thread_deadlock(void *arg)
{
	pthread_mutex_t *mutex = arg;; 

	/* intentionally deadlock this thread */
	CHECKr(pthread_mutex_lock(mutex));
	CHECKr(pthread_mutex_lock(mutex));

	/* never reached */
	abort();
}

static void
test_mutex_normal(void)
{
	pthread_mutexattr_t mutex_normal_attr; 
	pthread_mutex_t mutex_normal; 
	pthread_t thread;
	struct timespec ts;

	printf("test_mutex_normal()\n");
	CHECKr(pthread_mutexattr_init(&mutex_normal_attr));
	CHECKr(pthread_mutexattr_settype(&mutex_normal_attr, 
	    PTHREAD_MUTEX_NORMAL));
	CHECKr(pthread_mutex_init(&mutex_normal, &mutex_normal_attr));
	CHECKr(pthread_mutexattr_destroy(&mutex_normal_attr));
	test_nocontention_lock(&mutex_normal);
	test_nocontention_trylock(&mutex_normal);
	test_contention_lock(&mutex_normal);

	/* test self-deadlock with timeout */
	CHECKr(pthread_mutex_lock(&mutex_normal));
	CHECKe(clock_gettime(CLOCK_REALTIME, &ts));
	ts.tv_sec += 2;
	ASSERTe(pthread_mutex_timedlock(&mutex_normal, &ts), == ETIMEDOUT);
	CHECKr(pthread_mutex_unlock(&mutex_normal));
	/* verify that it can still be locked and unlocked */
	CHECKr(pthread_mutex_lock(&mutex_normal));
	CHECKr(pthread_mutex_unlock(&mutex_normal));
	CHECKr(pthread_create(&thread, NULL, thread_deadlock, &mutex_normal));
	sleep(1);
}

int
main(int argc, char *argv[])
{
	test_mutex_static();
	test_mutex_fast();
	test_mutex_debug();
	test_mutex_recursive();
	test_mutex_normal();
	SUCCEED;
}
@


1.9
log
@Check that PTHREAD_MUTEX_NORMAL mutexes will self-deadlock and that
pthread_mutex_timedlock() will block and then timeout on self-deadlock
@
text
@d1 1
a1 1
/*	$OpenBSD: pthread_mutex.c,v 1.8 2012/02/20 04:43:49 guenther Exp $	*/
d252 3
@


1.8
log
@Round-robin behavior isn't guaranteed by SCHED_OTHER and the kernel
doesn't have SCHED_FIFO or SCHED_RR support, so use sleep(1) to 'ensure'
the second thread gets the lock when expected
@
text
@d1 1
a1 1
/*	$OpenBSD: pthread_mutex.c,v 1.7 2011/09/23 10:39:08 uwe Exp $	*/
d44 2
d85 1
d158 1
d208 1
d216 41
d264 1
@


1.7
log
@Add a test for recursive pthread_mutex_trylock()

ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pthread_mutex.c,v 1.6 2005/12/19 05:22:57 tedu Exp $	*/
d48 1
d79 1
a79 1
	pthread_yield();
@


1.6
log
@after mutex_unlock, there's no guarantee that a waiting thread will
start running.  calling pthread_yield makes test pass with rthreads
@
text
@d1 1
a1 1
/*	$OpenBSD: pthread_mutex.c,v 1.5 2005/10/30 23:59:43 fgsch Exp $	*/
d163 30
a196 2
	int i;
	int j = 9;
d203 2
a204 7

	CHECKr(pthread_mutex_lock(&mutex_recursive));
	for (i = 0; i < j; i++)
		CHECKr(pthread_mutex_lock(&mutex_recursive));
	for (i = 0; i < j; i++)
		CHECKr(pthread_mutex_unlock(&mutex_recursive));
	CHECKr(pthread_mutex_unlock(&mutex_recursive));
@


1.5
log
@-Wall cleanup.
@
text
@d1 1
a1 1
/*	$OpenBSD: pthread_mutex.c,v 1.4 2003/07/31 21:48:05 deraadt Exp $	*/
d78 1
@


1.4
log
@various cleanups; david says results are same
@
text
@d1 1
a1 1
/*	$OpenBSD: pthread_mutex.c,v 1.3 2001/11/03 04:33:48 marc Exp $	*/
d125 1
d137 1
d154 1
@


1.3
log
@
Fix pthread_mutex regression test... undefined behavior does not
mean != EPERM in one test, minor changes to recursive mutex test.

remove printf in signal test signal handler, run test long enough
to ensure signal hander is called at least twice, reduce output.

Note: running these tests over a remote console may indicate bogus
falures due to console output latency.  Any test that takes longer
than 5 seconds to complete may be flagged as a failure.
@
text
@d1 1
a1 1
/*	$OpenBSD: pthread_mutex.c,v 1.2 2001/09/20 16:43:15 todd Exp $	*/
d52 2
a53 3
void * 
thread_contention(arg)
	void *arg;
d66 2
a67 3
void
test_contention_lock(mutex)
	pthread_mutex_t *mutex;
d83 2
a84 3
void
test_nocontention_lock(mutex)
	pthread_mutex_t *mutex;
d91 2
a92 3
void
test_debug_double_lock(mutex)
	pthread_mutex_t *mutex;
d100 2
a101 3
void
test_debug_double_unlock(mutex)
	pthread_mutex_t *mutex;
d110 2
a111 3
void
test_nocontention_trylock(mutex)
	pthread_mutex_t *mutex;
d118 2
a119 2
void
test_mutex_static()
d128 1
a128 1
void
d140 2
a141 2
void
test_mutex_debug()
d158 2
a159 2
void
test_mutex_recursive()
d184 1
a184 1
main()
@


1.2
log
@per man page and gcc 3.0.1, exit requires prototype from stdlib.h
@
text
@d1 1
a1 1
/*	$OpenBSD: pthread_mutex.c,v 1.1.1.1 2001/08/15 14:37:12 fgsch Exp $	*/
d112 1
a112 1
	ASSERTe(pthread_mutex_unlock(mutex), != EPERM);
d170 1
d179 1
a179 1
	for (i = 0; i < 9; i++)
d181 1
a181 1
	for (i = 0; i < 9; i++)
d186 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD: test_pthread_mutex.c,v 1.7 2001/03/13 00:04:38 d Exp $	*/
d47 1
@


1.1.1.1
log
@Regression tests for libc_r (pthreads) library.
Thanks to pval@@ for resolving the license stuff.
@
text
@@
