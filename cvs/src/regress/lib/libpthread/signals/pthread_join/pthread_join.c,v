head	1.1;
access;
symbols
	OPENBSD_6_2_BASE:1.1
	OPENBSD_6_1:1.1.0.24
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.20
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.10
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.18
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.16
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.14
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.12
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.8
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.6
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.4
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.2;
locks; strict;
comment	@ * @;


1.1
date	2011.10.01.10.26.59;	author fgsch;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Add tests to check signal handling during pthread_join(3) and
pthread_mutex_lock(3). Currently failing.
@
text
@/*	$OpenBSD$	*/
/*
 * Federico G. Schwindt <fgsch@@openbsd.org>, 2011. Public Domain.
 */
#include <pthread.h>
#include <signal.h>
#include <unistd.h>
#include "test.h"

volatile sig_atomic_t hits = 0;

void
handler(int sig)
{
	hits++;
}

void *
thr_sleep(void *arg)
{
	return ((caddr_t)NULL + sleep(5));
}

void *
thr_join(void *arg)
{
	pthread_t tid = *(pthread_t *)arg;
	void *retval;

	CHECKr(pthread_join(tid, &retval));
	return (retval);
}

int
main(int argc, char **argv)
{
	struct sigaction sa;
	pthread_t tid[2];
	void *retval;

	bzero(&sa, sizeof(sa));
	sa.sa_handler = handler;
	CHECKe(sigaction(SIGUSR1, &sa, NULL));

	CHECKr(pthread_create(&tid[0], NULL, thr_sleep, NULL));
	CHECKr(pthread_create(&tid[1], NULL, thr_join, &tid[0]));
	sleep(2);

	CHECKr(pthread_kill(tid[1], SIGUSR1));
	sleep(2);

	ASSERT(hits == 1);
	CHECKr(pthread_join(tid[1], &retval));
	ASSERT(retval == (void *)0);
	SUCCEED;
}
@
