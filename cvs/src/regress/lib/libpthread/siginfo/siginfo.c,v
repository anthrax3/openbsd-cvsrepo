head	1.11;
access;
symbols
	OPENBSD_6_1:1.11.0.2
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.10.0.54
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.44
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.52
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.50
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.48
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.46
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.42
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.40
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.38
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.36
	OPENBSD_5_0:1.10.0.34
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.32
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.30
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.26
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.28
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.24
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.22
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.20
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.18
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.16
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.14
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.12
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.10
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.8
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.6
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.8.0.2
	OPENBSD_3_3_BASE:1.8;
locks; strict;
comment	@ * @;


1.11
date	2016.09.01.11.04.37;	author guenther;	state Exp;
branches;
next	1.10;
commitid	KuWvRpnYuhRil85r;

1.10
date	2003.07.31.21.48.06;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.19.00.59.54;	author pvalchev;	state Exp;
branches;
next	1.8;

1.8
date	2002.10.27.21.49.45;	author marc;	state Exp;
branches;
next	1.7;

1.7
date	2002.10.23.22.30.04;	author marc;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.21.18.50.17;	author marc;	state Exp;
branches;
next	1.5;

1.5
date	2002.10.12.03.37.45;	author marc;	state Exp;
branches;
next	1.4;

1.4
date	2002.10.09.03.02.33;	author marc;	state Exp;
branches;
next	1.3;

1.3
date	2002.10.07.22.49.42;	author marc;	state Exp;
branches;
next	1.2;

1.2
date	2002.10.07.22.17.07;	author marc;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.07.21.27.16;	author marc;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Tighten up the siginfo check
@
text
@/* $OpenBSD: siginfo.c,v 1.10 2003/07/31 21:48:06 deraadt Exp $ */
/* PUBLIC DOMAIN Oct 2002 <marc@@snafu.org> */

/*
 * test SA_SIGINFO support.   Also check that SA_RESETHAND does the right
 * thing.
 */

#include <signal.h>
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

#include "test.h"

#define BOGUS	(char *)0x987230

static void
act_handler(int signal, siginfo_t *siginfo, void *context)
{
	struct sigaction sa;
	char * str;

	CHECKe(sigaction(SIGSEGV, NULL, &sa));
	ASSERT(sa.sa_handler == SIG_DFL);
	ASSERT(siginfo != NULL);
	asprintf(&str, "act_handler: signal %d, siginfo %p, context %p\n"
		 "addr %p, code %d, trap %d\n", signal, siginfo, context,
		 siginfo->si_addr, siginfo->si_code, siginfo->si_trapno);
	write(STDOUT_FILENO, str, strlen(str));
	free(str);
 	ASSERT(siginfo->si_addr == BOGUS);
	ASSERT(siginfo->si_code == SEGV_MAPERR ||
	       siginfo->si_code == SEGV_ACCERR);
	SUCCEED;
}
 
int
main(int argc, char **argv)
{
	struct sigaction act;

	act.sa_sigaction = act_handler;
	sigemptyset(&act.sa_mask);
	act.sa_flags = SA_SIGINFO | SA_RESETHAND | SA_NODEFER;
	CHECKe(sigaction(SIGSEGV, &act, NULL));
	*BOGUS = 1;
	PANIC("How did we get here?");
}
@


1.10
log
@various cleanups; david says results are same
@
text
@d1 1
a1 1
/* $OpenBSD: siginfo.c,v 1.9 2003/06/19 00:59:54 pvalchev Exp $ */
d33 2
a34 2
	ASSERT(siginfo->si_code != SI_USER);
	ASSERT(siginfo->si_code > 0 && siginfo->si_code <= NSIGSEGV);
@


1.9
log
@free memory allocated by asprintf; ok marco
@
text
@d1 1
a1 1
/* $OpenBSD: siginfo.c,v 1.8 2002/10/27 21:49:45 marc Exp $ */
d12 1
d18 1
a18 1
void
@


1.8
log
@remove MD bits from test.
This test fails on sparc64 due to that arch not reporting
the address correctly -- not a pthreads issue
@
text
@d1 1
a1 1
/* $OpenBSD: siginfo.c,v 1.7 2002/10/23 22:30:04 marc Exp $ */
d30 1
@


1.7
log
@remove 0x in front of %p -- not needed
@
text
@d1 1
a1 1
/* $OpenBSD: siginfo.c,v 1.6 2002/10/21 18:50:17 marc Exp $ */
d30 3
a32 2
 	ASSERT(siginfo->si_addr == BOGUS &&
	       siginfo->si_code == 1 && siginfo->si_trapno == 2);
@


1.6
log
@
Clean up the siginfo test.   pthreads siginfo delivery code still
being tested.
@
text
@d1 1
a1 1
/* $OpenBSD: siginfo.c,v 1.5 2002/10/12 03:37:45 marc Exp $ */
d26 2
a27 2
	asprintf(&str, "act_handler: signal %d, siginfo 0x%p, context 0x%p\n"
		 "addr 0x%p, code %d, trap %d\n", signal, siginfo, context,
@


1.5
log
@signal deliver to blocked thread test
@
text
@d1 1
a1 1
/* $OpenBSD: siginfo.c,v 1.4 2002/10/09 03:02:33 marc Exp $ */
d11 1
d15 2
d21 1
d26 5
a30 1
 	ASSERT(siginfo->si_addr == (char *) 0x987234 &&
d32 1
d42 1
a42 1
	act.sa_flags = SA_SIGINFO | SA_RESETHAND;
d44 2
a45 2
	*(char *) 0x987234 = 1;
	SUCCEED;
@


1.4
log
@clean-up.   check that SA_RESETHAND does the right thing, too.
full library support for this is still pending.
@
text
@d1 1
a1 1
/* $OpenBSD: siginfo.c,v 1.3 2002/10/07 22:49:42 marc Exp $ */
d4 4
a7 2
/* test SA_SIGINFO support.   Also check that SA_RESETHAND does the right
   thing.  */
a8 1
#include <assert.h>
@


1.3
log
@more meaningful error
@
text
@d1 1
a1 1
/* $OpenBSD: siginfo.c,v 1.2 2002/10/07 22:17:07 marc Exp $ */
d4 2
a5 1
/* test SA_SIGINFO support */
d16 4
@


1.2
log
@use/check SA_RESETHAND, too.
Note: until SA_RESETHAND support is fixed the test loops on SIGSEGV
@
text
@d1 1
a1 1
/* $OpenBSD: siginfo.c,v 1.1 2002/10/07 21:27:16 marc Exp $ */
d15 1
a15 1
	ASSERT(siginfo);
@


1.1
log
@add pthread siginfo support test
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d15 2
a16 1
 	ASSERT(siginfo && siginfo->si_addr == (char *) 0x987234 &&
d27 1
a27 1
	act.sa_flags = SA_SIGINFO;
@

