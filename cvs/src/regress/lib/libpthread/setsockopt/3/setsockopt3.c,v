head	1.4;
access;
symbols
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.18
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.8
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.16
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.14
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.12
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.10
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.6
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_5_0:1.2.0.8
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.6
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2012.02.22.20.33.51;	author fgsch;	state Exp;
branches;
next	1.3;

1.3
date	2011.12.12.15.53.08;	author fgsch;	state Exp;
branches;
next	1.2;

1.2
date	2010.01.03.23.02.33;	author fgsch;	state Exp;
branches;
next	1.1;

1.1
date	2009.12.26.01.34.18;	author fgsch;	state Exp;
branches;
next	;


desc
@@


1.4
log
@similar change to the setsockopt1.c one: use the resolution of the monotonic
clock from clock_getres(). while here use a different port when binding.
@
text
@/*	$OpenBSD: setsockopt3.c,v 1.3 2011/12/12 15:53:08 fgsch Exp $	*/
/*
 * Federico G. Schwindt <fgsch@@openbsd.org>, 2009. Public Domain.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <sys/wait.h>
#include <netinet/in.h>
#include <err.h>
#include <netdb.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "test.h"

static void *
sock_connect(void *arg)
{
	struct timeval to;
	pid_t child_pid;
	int status;
	int s;

	CHECKe(s = socket(AF_INET, SOCK_STREAM, 0));
	to.tv_sec = 2;
	to.tv_usec = 0.5 * 1e6;
	CHECKe(setsockopt(s, SOL_SOCKET, SO_RCVTIMEO, &to, sizeof(to)));
	CHECKe(child_pid = fork());
	if (child_pid == 0) {
		char *argv[3];
		char fdstr[3];
		snprintf(fdstr, sizeof(fdstr), "%d", s);
		argv[0] = "setsockopt3a";
		argv[1] = fdstr;
		argv[2] = NULL;
		execv(argv[0], argv);
		_exit(NOTOK);
	}
	ASSERTe(wait(&status), == child_pid);
	ASSERT(WIFEXITED(status));
	ASSERT(WEXITSTATUS(status) == 0);
	return (NULL);
}

static void *
sock_accept(void *arg)
{
	pthread_t connect_thread;
	struct sockaddr_in sin;
	int s;

	CHECKe(s = socket(AF_INET, SOCK_STREAM, 0));
	bzero(&sin, sizeof(sin));
	sin.sin_family = AF_INET;
	sin.sin_len = sizeof(sin);
	sin.sin_port = htons(6545);
	sin.sin_addr.s_addr = htonl(INADDR_LOOPBACK);
	CHECKe(bind(s, (struct sockaddr *)&sin, sizeof(sin)));
	CHECKe(listen(s, 2));

	CHECKr(pthread_create(&connect_thread, NULL, sock_connect, NULL));
	CHECKr(pthread_join(connect_thread, NULL));
	return (NULL);
}

int
main(int argc, char **argv)
{
	pthread_t accept_thread;

	CHECKr(pthread_create(&accept_thread, NULL, sock_accept, NULL));
	CHECKr(pthread_join(accept_thread, NULL));
	SUCCEED;
}
@


1.3
log
@better output on error.
@
text
@d1 1
a1 1
/*	$OpenBSD: setsockopt3.c,v 1.2 2010/01/03 23:02:33 fgsch Exp $	*/
d57 1
a57 1
	sin.sin_port = htons(6543);
@


1.2
log
@Use CHECKx macro and enable setsockopt tests.
@
text
@d1 1
a1 1
/*	$OpenBSD: setsockopt3.c,v 1.1 2009/12/26 01:34:18 fgsch Exp $	*/
d42 1
a42 1
	CHECKr(WEXITSTATUS(status));
@


1.1
log
@Add tests to check timeout on sockets under different situations. kurt@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d42 1
a42 1
	ASSERT(WEXITSTATUS(status) == 0);
@

