head	1.5;
access;
symbols
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.18
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.8
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.16
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.14
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.12
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.10
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.6
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	OPENBSD_5_0:1.1.0.8
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.6
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.2
	OPENBSD_4_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2012.02.26.21.08.06;	author fgsch;	state Exp;
branches;
next	1.4;

1.4
date	2012.02.20.01.31.12;	author fgsch;	state Exp;
branches;
next	1.3;

1.3
date	2012.02.19.23.58.57;	author fgsch;	state Exp;
branches;
next	1.2;

1.2
date	2011.12.12.15.53.08;	author fgsch;	state Exp;
branches;
next	1.1;

1.1
date	2009.12.26.01.34.18;	author fgsch;	state Exp;
branches;
next	;


desc
@@


1.5
log
@similar change to the setsockopt1.c one: use the resolution of the monotonic
clock from clock_getres(). while here use a different port when binding.
@
text
@/*	$OpenBSD: setsockopt2.c,v 1.4 2012/02/20 01:31:12 fgsch Exp $	*/
/*
 * Federico G. Schwindt <fgsch@@openbsd.org>, 2009. Public Domain.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <sys/wait.h>
#include <sys/time.h>
#include <netinet/in.h>
#include <err.h>
#include <fcntl.h>
#include <netdb.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "test.h"

/* resolution of the monotonic clock */
struct timespec mono_res;

static void
alarm_handler(int sig)
{
	_exit(NOTOK);
}

void
check_timeout(int s, int sec, struct timespec *to)
{
	struct timespec t1, t2, e;
	char buf[BUFSIZ];

	ASSERT(signal(SIGALRM, alarm_handler) != SIG_ERR);
	CHECKe(alarm(sec));
	CHECKe(clock_gettime(CLOCK_MONOTONIC, &t1));
	ASSERT(read(s, &buf, sizeof(buf)) == -1);
	CHECKe(clock_gettime(CLOCK_MONOTONIC, &t2));
	ASSERT(errno == EAGAIN);
	timespecsub(&t2, &t1, &e);

	/*
	 * verify that the difference between the duration and the
	 * timeout is less than the resolution of the clock
	 */
	if (timespeccmp(&e, to, <))
		timespecsub(to, &e, &t1);
	else
		timespecsub(&e, to, &t1);
	ASSERT(timespeccmp(&t1, &mono_res, <=));
}

static void *
sock_connect(void *arg)
{
	struct sockaddr_in sin;
	struct timeval to;
	struct timespec ts;
	pid_t child_pid;
	int status;
	int s, s2, s3;

	CHECKe(clock_getres(CLOCK_MONOTONIC, &mono_res));
	CHECKe(s = socket(AF_INET, SOCK_STREAM, 0));
	CHECKe(s2 = dup(s));
	CHECKe(s3 = fcntl(s, F_DUPFD, s));
	bzero(&sin, sizeof(sin));
	sin.sin_family = AF_INET;
	sin.sin_len = sizeof(sin);
	sin.sin_port = htons(6544);
	sin.sin_addr.s_addr = htonl(INADDR_LOOPBACK);
	CHECKe(connect(s, (struct sockaddr *)&sin, sizeof(sin)));
	to.tv_sec = 2;
	to.tv_usec = 0.5 * 1e6;
	TIMEVAL_TO_TIMESPEC(&to, &ts);
	CHECKe(setsockopt(s, SOL_SOCKET, SO_RCVTIMEO, &to, sizeof(to)));
	CHECKe(child_pid = fork());
	if (child_pid == 0) {
		to.tv_sec = 1;
		to.tv_usec = 0.5 * 1e6;
		TIMEVAL_TO_TIMESPEC(&to, &ts);
		CHECKe(setsockopt(s, SOL_SOCKET, SO_RCVTIMEO, &to, sizeof(to)));
		check_timeout(s, 2, &ts);
		check_timeout(s2, 2, &ts);
		check_timeout(s3, 2, &ts);
		return (NULL);
	}
	sleep(2);
	ts.tv_sec = 1;	/* the fd timeout was changed in the child */
	check_timeout(s, 2, &ts);
	check_timeout(s2, 2, &ts);
	check_timeout(s3, 2, &ts);
	CHECKe(s2 = dup(s));
	CHECKe(s3 = fcntl(s, F_DUPFD, s));
	check_timeout(s2, 2, &ts);
	check_timeout(s3, 2, &ts);
	CHECKe(close(s));
	CHECKe(close(s2));
	CHECKe(close(s3));
	ASSERTe(wait(&status), == child_pid);
	ASSERT(WIFEXITED(status));
	CHECKr(WEXITSTATUS(status));
	return (NULL);
}

static void *
sock_accept(void *arg)
{
	pthread_t connect_thread;
	struct sockaddr_in sin;
	int s;

	CHECKe(s = socket(AF_INET, SOCK_STREAM, 0));
	bzero(&sin, sizeof(sin));
	sin.sin_family = AF_INET;
	sin.sin_len = sizeof(sin);
	sin.sin_port = htons(6544);
	sin.sin_addr.s_addr = htonl(INADDR_LOOPBACK);
	CHECKe(bind(s, (struct sockaddr *)&sin, sizeof(sin)));
	CHECKe(listen(s, 2));

	CHECKr(pthread_create(&connect_thread, NULL, sock_connect, NULL));
	CHECKr(pthread_join(connect_thread, NULL));
	return (NULL);
}

int
main(int argc, char **argv)
{
	pthread_t accept_thread;

	CHECKr(pthread_create(&accept_thread, NULL, sock_accept, NULL));
	CHECKr(pthread_join(accept_thread, NULL));
	SUCCEED;
}
@


1.4
log
@ops. compare against the socket timeout, not the alarm one.
sometimes these tests are incorrectly marked as failing (ktrace shows
the read is returning within the specified timeout) but there are other
times where they're taking slightly longer than expected.
for now both cases are marked as failure.
@
text
@d1 1
a1 1
/*	$OpenBSD: setsockopt2.c,v 1.3 2012/02/19 23:58:57 fgsch Exp $	*/
d9 1
d19 3
d29 1
a29 1
check_timeout(int s, int sec, struct timeval *to)
d31 1
a31 2
	struct timeval t1, t2;
	struct timeval e;
d36 1
a36 1
	CHECKe(gettimeofday(&t1, NULL));
d38 1
a38 1
	CHECKe(gettimeofday(&t2, NULL));
d40 11
a50 4
	timersub(&t2, &t1, &e);
	if (!timercmp(&e, to, <))
		PANIC("%ld.%ld > %ld.%ld",
		    e.tv_sec, e.tv_usec, to->tv_sec, to->tv_usec);
d58 1
d63 1
d70 1
a70 1
	sin.sin_port = htons(6543);
d75 1
d81 1
d83 3
a85 3
		check_timeout(s, 2, &to);
		check_timeout(s2, 2, &to);
		check_timeout(s3, 2, &to);
d89 4
a92 3
	check_timeout(s, 2, &to);
	check_timeout(s2, 2, &to);
	check_timeout(s3, 2, &to);
d95 2
a96 2
	check_timeout(s2, 2, &to);
	check_timeout(s3, 2, &to);
d117 1
a117 1
	sin.sin_port = htons(6543);
@


1.3
log
@fix tests.
@
text
@d1 1
a1 1
/*	$OpenBSD: setsockopt2.c,v 1.2 2011/12/12 15:53:08 fgsch Exp $	*/
d28 1
a28 1
	struct timeval e, max;
d38 3
a40 3
	max.tv_sec = sec;
	max.tv_usec = 0;
	ASSERT(timercmp(&e, &max, <));
@


1.2
log
@better output on error.
@
text
@d1 1
a1 1
/*	$OpenBSD: setsockopt2.c,v 1.1 2009/12/26 01:34:18 fgsch Exp $	*/
d28 1
a28 1
	struct timeval e, d;
d38 3
a40 2
	timersub(&e, to, &d);
	ASSERT(d.tv_sec <= 1 && (d.tv_usec / 1000) <= 100);
@


1.1
log
@Add tests to check timeout on sockets under different situations. kurt@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d24 1
a24 1
int
d39 1
a39 1
	return ((d.tv_sec > 1 || (d.tv_usec / 1000) > 100) ? 1 : 0);
d68 3
a70 3
		CHECKr(check_timeout(s, 2, &to));
		CHECKr(check_timeout(s2, 2, &to));
		CHECKr(check_timeout(s3, 2, &to));
d74 3
a76 3
	CHECKr(check_timeout(s, 2, &to));
	CHECKr(check_timeout(s2, 2, &to));
	CHECKr(check_timeout(s3, 2, &to));
d79 2
a80 2
	CHECKr(check_timeout(s2, 2, &to));
	CHECKr(check_timeout(s3, 2, &to));
@

