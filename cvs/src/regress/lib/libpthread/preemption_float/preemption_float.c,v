head	1.5;
access;
symbols
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.28
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.24
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.14
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.22
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.20
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.18
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.16
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.12
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.10
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.8
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.6
	OPENBSD_5_0:1.5.0.4
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.4.0.30
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.26
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.28
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.24
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.22
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.20
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.18
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.16
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.14
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.12
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.10
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.8
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3;
locks; strict;
comment	@ * @;


1.5
date	2010.12.26.13.50.20;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2003.07.31.21.48.05;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.23.00.52.52;	author marc;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.23.20.21.22;	author marc;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.15.14.37.12;	author fgsch;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.08.15.14.37.12;	author fgsch;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Use sizeof(double) instead of hardcoding 8.
@
text
@/*	$OpenBSD: preemption_float.c,v 1.4 2003/07/31 21:48:05 deraadt Exp $	*/
/*
 * Copyright (c) 1993, 1994, 1995, 1996 by Chris Provenzano and contributors, 
 * proven@@mit.edu All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Chris Provenzano,
 *	the University of California, Berkeley, and contributors.
 * 4. Neither the name of Chris Provenzano, the University, nor the names of
 *   contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY CHRIS PROVENZANO AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL CHRIS PROVENZANO, THE REGENTS OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */ 

/* Test to see if floating point state is being properly maintained
   for each thread.  Different threads doing floating point operations
   simultaneously should not interfere with one another.  This
   includes operations that might change some FPU flags, such as
   rounding modes, at least implicitly.  */

#include <pthread.h>
#include <math.h>
#include <stdio.h>
#include "test.h"

int limit = 2;
int float_passed = 0;
int float_failed = 1;

static void *
log_loop (void *x) {
  int i;
  double d, d1, d2;
  /* sleep (1); */
  for (i = 0; i < limit; i++) {
    d = 42.0;
    d = log (exp (d));
    d = (d + 39.0) / d;
    if (i == 0)
      d1 = d;
    else {
		d2 = d;
		d = sin(d);
		/* if (d2 != d1) { */
		if (memcmp (&d2, &d1, sizeof(double))) {
			printf("log loop: %f != %f\n", d1, d2);
			pthread_exit(&float_failed);
		}
	}
  }
  pthread_exit(&float_passed);
}

static void *
trig_loop (void *x) {
  int i;
  double d, d1, d2;
  /* sleep (1);  */
  for (i = 0; i < limit; i++) {
    d = 35.0;
    d *= M_PI;
    d /= M_LN2;
    d = sin (d);
    d = cos (1 / d);
    if (i == 0)
      d1 = d;
    else {
		d2 = d;
		d = sin(d);
		/* if (d2 != d1) { */
		if (memcmp (&d2, &d1, sizeof(double))) {
			printf("trig loop: %f != %f\n", d1, d2);
  			pthread_exit(&float_failed);
		}
	}
  }
  pthread_exit(&float_passed);
}

static int
floatloop(void)
{
	pthread_t thread[2];
	int *x, *y;

	CHECKr(pthread_create (&thread[0], NULL, trig_loop, NULL));
	CHECKr(pthread_create (&thread[1], NULL, log_loop, NULL));
	CHECKr(pthread_join(thread[0], (void **) &x));	
	CHECKr(pthread_join(thread[1], (void **) &y));	

	/* Return 0 for success */
	return ((*y == float_failed)?2:0) | 
	       ((*x == float_failed)?1:0);
}

int
main(int argc, char *argv[])
{
	pthread_t thread;
	int *result;

	/* single active thread, trig test */
	for(limit = 2; limit < 100000; limit *=4) {
		CHECKr(pthread_create (&thread, NULL, trig_loop, NULL));
		CHECKr(pthread_join(thread, (void **) &result));
		ASSERT(*result == 0);
	}

	/* single active thread, log test */
	for(limit = 2; limit < 100000; limit *=4) {
		CHECKr(pthread_create (&thread, NULL, log_loop, NULL));
		CHECKr(pthread_join(thread, (void **) &result));
		ASSERT(*result == 0);
	}

	/* run both threads concurrently using a higher limit */
	limit *= 4;
	ASSERT(floatloop() == 0);
	SUCCEED;
}
@


1.4
log
@various cleanups; david says results are same
@
text
@d1 1
a1 1
/*	$OpenBSD: preemption_float.c,v 1.3 2003/01/23 00:52:52 marc Exp $	*/
d65 1
a65 1
		if (memcmp (&d2, &d1, 8)) {
d91 1
a91 1
		if (memcmp (&d2, &d1, 8)) {
@


1.3
log
@print out the bad values when the test fails
@
text
@d1 1
a1 1
/*	$OpenBSD: preemption_float.c,v 1.2 2002/06/23 20:21:22 marc Exp $	*/
d50 2
a51 1
void *log_loop (void *x) {
d74 2
a75 1
void *trig_loop (void *x) {
d100 1
a100 1
int
d117 1
a117 1
main()
@


1.2
log
@
Fix pthread floatting point preemption test and enable it.  Next
step is to figure out why it fails on i386, yet works on sparc
@
text
@d1 1
a1 1
/*	$OpenBSD: preemption_float.c,v 1.1.1.1 2001/08/15 14:37:12 fgsch Exp $	*/
d65 1
d90 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD: test_preemption_float.c,v 1.3 2000/01/06 06:58:34 d Exp $	*/
d97 1
a97 1
floatloop(pthread_attr_t *attrp)
d102 2
a103 2
	CHECKr(pthread_create (&thread[0], attrp, trig_loop, 0));
	CHECKr(pthread_create (&thread[1], attrp, log_loop, 0));
a111 1
#define N 10
d115 2
a116 2
	pthread_attr_t attr;
	int i;
d118 5
a122 12
	/* Try with float point state not preserved */

	CHECKr(pthread_attr_init(&attr));
	CHECKr(pthread_attr_setfloatstate(&attr, PTHREAD_NOFLOAT));

	for(limit = 2; limit < 100000; limit *=4)
		if (floatloop(&attr) != 0)
			break;

	if (limit >= 100000) {
		printf("results are INDETERMINATE\n");
		SUCCEED; /* XXX */
d125 5
a129 12
	limit *= 4;  /* just to make sure */

	printf("using limit = %d\n", limit);

	for (i = 0; i < 32; i++) {
		/* Try the failure mode one more time. */
		if (floatloop(&attr) == 0) {
			printf("%d ", i);
			fflush(stdout);
		}
		/* Now see if saving float state will get rid of failure. */
		ASSERT(floatloop(NULL) == 0);
d132 3
@


1.1.1.1
log
@Regression tests for libc_r (pthreads) library.
Thanks to pval@@ for resolving the license stuff.
@
text
@@
