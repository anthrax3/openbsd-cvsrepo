head	1.9;
access;
symbols
	OPENBSD_6_1:1.9.0.2
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.7.0.12
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.10
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.8
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.6
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.4
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.6.0.42
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.40
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.38
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.36
	OPENBSD_5_0:1.6.0.34
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.32
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.30
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.26
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.28
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.24
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.22
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.20
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.18
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.16
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.14
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.12
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.10
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5;
locks; strict;
comment	@ * @;


1.9
date	2016.09.20.17.25.06;	author otto;	state Exp;
branches;
next	1.8;
commitid	mpyfomZtFo6mUYXg;

1.8
date	2016.09.20.17.04.34;	author otto;	state Exp;
branches;
next	1.7;
commitid	BnHSEKwDcDMsxpX3;

1.7
date	2013.10.06.21.46.10;	author guenther;	state Exp;
branches;
next	1.6;

1.6
date	2003.07.31.21.48.04;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.17.05.44.38;	author marc;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.17.04.33.33;	author marc;	state Exp;
branches;
next	1.3;

1.3
date	2001.09.20.16.43.15;	author todd;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.23.04.26.05;	author fgsch;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.15.14.37.10;	author fgsch;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.08.15.14.37.10;	author fgsch;	state Exp;
branches;
next	;


desc
@@


1.9
log
@switch master & slave; prompted by bluhm@@
@
text
@/*	$OpenBSD: cancel.c,v 1.8 2016/09/20 17:04:34 otto Exp $	*/
/* David Leonard <d@@openbsd.org>, 1999. Public Domain. */

#include <pthread.h>
#include <pthread_np.h>
#include <unistd.h>
#include <util.h>
#include <stdio.h>
#include <fcntl.h>
#include <stdlib.h>
#include "test.h"

static pthread_cond_t cond;
static pthread_mutex_t mutex;
static struct timespec expiretime;

static volatile int pv_state = 0;

static void
p(void)
{
	CHECKr(pthread_mutex_lock(&mutex));
	if (pv_state <= 0) {
		CHECKr(pthread_cond_timedwait(&cond, &mutex, &expiretime));
	}
	pv_state--;
	CHECKr(pthread_mutex_unlock(&mutex));
}

static void
v(void)
{
	int needsignal;

	CHECKr(pthread_mutex_lock(&mutex));
	pv_state++;
	needsignal = (pv_state == 1);
	if (needsignal)
		CHECKr(pthread_cond_signal(&cond));
	CHECKr(pthread_mutex_unlock(&mutex));
}

static void
c1handler(void *arg)
{
	CHECKe(close(*(int *)arg));
	v();
}

static void *
child1fn(void *arg)
{
	int fd, dummy;
	char buf[1024];
	int len;

	SET_NAME("c1");
	CHECKr(pthread_setcanceltype(PTHREAD_CANCEL_ASYNCHRONOUS, NULL));
	/* something that will block */
	CHECKe(openpty(&dummy, &fd, NULL, NULL, NULL));
	pthread_cleanup_push(c1handler, (void *)&fd);
	v();
	while (1) {
		CHECKe(len = read(fd, &buf, sizeof buf));
		printf("child 1 read %d bytes\n", len);
	}
	pthread_cleanup_pop(0);
	PANIC("child 1");
}

static int c2_in_test = 0;

static void
c2handler(void *arg)
{
	ASSERT(c2_in_test);
	v();
}

static int message_seen = 0;
static void *
child2fn(void *arg)
{
	SET_NAME("c2");

	CHECKr(pthread_setcanceltype(PTHREAD_CANCEL_DEFERRED, NULL));
	pthread_cleanup_push(c2handler, NULL);
	v();

	while (1) {
		struct timespec now;
		struct timespec end;

		/*
		 * XXX Be careful not to call any cancellation points
		 * until pthread_testcancel()
		 */

		CHECKe(clock_gettime(CLOCK_REALTIME, &end));
		end.tv_sec ++;

		while (1) {
			CHECKe(clock_gettime(CLOCK_REALTIME, &now));
			if (timespeccmp(&now, &end, >=))
				break;
			pthread_yield();
		}

		/* XXX write() contains a cancellation point */
		/* printf("child 2 testing for cancel\n"); */

		c2_in_test = 1;
		pthread_testcancel();
		printf("you should see this message exactly once\n");
		message_seen++;
		c2_in_test = 0;
		ASSERT(message_seen == 1);
		v();
	}
	pthread_cleanup_pop(0);
	PANIC("child 2");
}

static int c3_cancel_survived;

static void
c3handler(void *arg)
{
	printf("(fyi, cancellation of self %s instantaneous)\n",
		(c3_cancel_survived ? "was not" : "was"));
	v();
}

static void *
child3fn(void *arg)
{
	SET_NAME("c3");
	pthread_cleanup_push(c3handler, NULL);

	/* Cancel myself */
	CHECKr(pthread_setcanceltype(PTHREAD_CANCEL_ASYNCHRONOUS, NULL));
	c3_cancel_survived = 0;
	pthread_cancel(pthread_self());
	c3_cancel_survived = 1;
	pthread_testcancel();
	pthread_cleanup_pop(0);

	PANIC("child 3");
}

static int c4_cancel_early;

static void
c4handler(void *arg)
{
	printf("early = %d\n", c4_cancel_early);
	ASSERT(c4_cancel_early == 0);
	v();
}

static void *
child4fn(void *arg)
{
	SET_NAME("c4");
	pthread_cleanup_push(c4handler, NULL);

	/* Cancel myself */
	CHECKr(pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, NULL));

	c4_cancel_early = 3;
	pthread_cancel(pthread_self());

	c4_cancel_early = 2;
	pthread_testcancel();

	c4_cancel_early = 1;
	CHECKr(pthread_setcancelstate(PTHREAD_CANCEL_ENABLE, NULL));

	c4_cancel_early = 0;
	pthread_testcancel();

	pthread_cleanup_pop(0);

	PANIC("child 4");
}

int
main(int argc, char *argv[])
{
	pthread_t child1, child2, child3, child4;

	/* Set up our control flow */
	CHECKr(pthread_mutex_init(&mutex, NULL));
	CHECKr(pthread_cond_init(&cond, NULL));
	CHECKe(clock_gettime(CLOCK_REALTIME, &expiretime));
	expiretime.tv_sec += 5; /* this test shouldn't run over 5 seconds */

	CHECKr(pthread_create(&child1, NULL, child1fn, NULL));
	CHECKr(pthread_create(&child2, NULL, child2fn, NULL));
	p();
	p();

	CHECKr(pthread_cancel(child1));
	p();

	/* Give thread 2 a chance to go through its deferred loop once */
	p();
	CHECKr(pthread_cancel(child2));
	p();

	/* Child 3 cancels itself */
	CHECKr(pthread_create(&child3, NULL, child3fn, NULL));
	p();

	/* Child 4 also cancels itself */
	CHECKr(pthread_create(&child4, NULL, child4fn, NULL));
	p();

	/* Make sure they're all gone */
	CHECKr(pthread_join(child4, NULL));
	CHECKr(pthread_join(child3, NULL));
	CHECKr(pthread_join(child2, NULL));
	CHECKr(pthread_join(child1, NULL));

	exit(0);
}
@


1.8
log
@don't depend on /dev/tty, in bluhm's framework there is no such thing
use openpty(3) instead
@
text
@d1 1
a1 1
/*	$OpenBSD: cancel.c,v 1.7 2013/10/06 21:46:10 guenther Exp $	*/
d60 1
a60 1
	CHECKe(openpty(&fd, &dummy, NULL, NULL, NULL));
@


1.7
log
@Add a test to verify that disabling cancelation defers it until reenabled.
Add missing pthread_cleanup_pop() calls (they're required to be matched).
@
text
@d1 1
a1 1
/*	$OpenBSD: cancel.c,v 1.6 2003/07/31 21:48:04 deraadt Exp $	*/
d7 1
d53 1
a53 1
	int fd;
d60 1
a60 1
	CHECKe(fd = open("/dev/tty", O_RDONLY));
@


1.6
log
@various cleanups; david says results are same
@
text
@d1 1
a1 1
/*	$OpenBSD: cancel.c,v 1.5 2002/02/17 05:44:38 marc Exp $	*/
d66 1
d119 1
d145 1
d150 36
d189 1
a189 1
	pthread_t child1, child2, child3;
d214 4
d219 1
@


1.5
log
@use semaphore to sync threads, not sleep
@
text
@d1 1
a1 1
/*	$OpenBSD: cancel.c,v 1.4 2002/02/17 04:33:33 marc Exp $	*/
d18 3
a20 1
void p() {
d29 3
a31 1
void v() {
d42 1
a42 1
void
d49 2
a50 3
void *
child1fn(arg)
	void *arg;
d71 1
a71 1
void
d79 2
a80 3
void *
child2fn(arg)
	void *arg;
d123 1
a123 1
void
d131 2
a132 3
void *
child3fn(arg)
	void *arg;
d148 1
a148 1
main()
@


1.4
log
@a state variable used by multiple threads needs to be volatile
@
text
@d1 1
a1 1
/*	$OpenBSD: cancel.c,v 1.3 2001/09/20 16:43:15 todd Exp $	*/
d114 1
d166 1
a166 1
	sleep(2);
@


1.3
log
@per man page and gcc 3.0.1, exit requires prototype from stdlib.h
@
text
@d1 1
a1 1
/*	$OpenBSD: cancel.c,v 1.2 2001/08/23 04:26:05 fgsch Exp $	*/
d16 2
a17 1
static int pv_state = 0;
@


1.2
log
@while im here, remove -Wall warnings.
@
text
@d1 1
a1 1
/*	$OpenBSD: cancel.c,v 1.1.1.1 2001/08/15 14:37:10 fgsch Exp $	*/
d9 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD: test_cancel.c,v 1.4 2001/01/16 21:47:12 brad Exp $	*/
d37 1
a37 1
c1handler(void *fd)
d39 1
a39 1
	CHECKe(close((int)fd));
d55 1
a55 1
	pthread_cleanup_push(c1handler, (void *)fd);
@


1.1.1.1
log
@Regression tests for libc_r (pthreads) library.
Thanks to pval@@ for resolving the license stuff.
@
text
@@
