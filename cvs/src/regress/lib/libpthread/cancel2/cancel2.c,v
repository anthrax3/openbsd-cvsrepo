head	1.3;
access;
symbols
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.8
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.4
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.2.0.52
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.50
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.48
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.46
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.42
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.40
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.38
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.36
	OPENBSD_5_0:1.2.0.34
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.32
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.30
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.26
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.28
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.24
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.22
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.20
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.18
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.16
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.14
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.12
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.10
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.8
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.6
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.4
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.2
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.1.0.2
	OPENBSD_3_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2015.09.14.08.35.44;	author guenther;	state Exp;
branches;
next	1.2;
commitid	cMOHdFQ9g2ZuWWZ0;

1.2
date	2003.07.31.21.48.04;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.19.21.23.46;	author marc;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Check pselect, poll, and ppoll too
@
text
@/* $OpenBSD: cancel2.c,v 1.2 2003/07/31 21:48:04 deraadt Exp $ */
/* PUBLIC DOMAIN <marc@@snafu.org> */

/*
 * Check that a thread waiting on a select or poll without timeout can be
 * cancelled.
 */

#include <sys/types.h>
#include <sys/time.h>

#include <poll.h>
#include <pthread.h>
#include <unistd.h>

#include "test.h"

static void *
select_thread(void *arg)
{
	int read_fd = *(int*) arg;
	fd_set read_fds;
	int result;

	FD_ZERO(&read_fds);
	FD_SET(read_fd, &read_fds);
	result = select(read_fd + 1, &read_fds, NULL, NULL, NULL);
	printf("select returned %d\n", result);
	return 0;
}


static void *
pselect_thread(void *arg)
{
	int read_fd = *(int*) arg;
	fd_set read_fds;
	int result;

	FD_ZERO(&read_fds);
	FD_SET(read_fd, &read_fds);
	result = pselect(read_fd + 1, &read_fds, NULL, NULL, NULL, NULL);
	printf("pselect returned %d\n", result);
	return 0;
}

static void *
poll_thread(void *arg)
{
	int read_fd = *(int*) arg;
	struct pollfd pfd;
	int result;

	pfd.fd = read_fd;
	pfd.events = POLLIN;

	result = poll(&pfd, 1, -1);
	printf("poll returned %d\n", result);
	return arg;
}


static void *
ppoll_thread(void *arg)
{
	int read_fd = *(int*) arg;
	struct pollfd pfd;
	int result;

	pfd.fd = read_fd;
	pfd.events = POLLIN;

	result = ppoll(&pfd, 1, NULL, NULL);
	printf("ppoll returned %d\n", result);
	return arg;
}

int
main(int argc, char *argv[])
{
	pthread_t thread;
	void *result = NULL;
	int pipe_fd[2];

	CHECKe(pipe(pipe_fd));

	printf("trying select\n");
	CHECKr(pthread_create(&thread, NULL, select_thread, pipe_fd));
	sleep(1);
	CHECKr(pthread_cancel(thread));
	CHECKr(pthread_join(thread, &result));
	ASSERT(result == PTHREAD_CANCELED);

	printf("trying pselect\n");
	CHECKr(pthread_create(&thread, NULL, pselect_thread, pipe_fd));
	sleep(1);
	CHECKr(pthread_cancel(thread));
	CHECKr(pthread_join(thread, &result));
	ASSERT(result == PTHREAD_CANCELED);

	printf("trying poll\n");
	CHECKr(pthread_create(&thread, NULL, poll_thread, pipe_fd));
	sleep(1);
	CHECKr(pthread_cancel(thread));
	CHECKr(pthread_join(thread, &result));
	ASSERT(result == PTHREAD_CANCELED);

	printf("trying ppoll\n");
	CHECKr(pthread_create(&thread, NULL, ppoll_thread, pipe_fd));
	sleep(1);
	CHECKr(pthread_cancel(thread));
	CHECKr(pthread_join(thread, &result));
	ASSERT(result == PTHREAD_CANCELED);

	SUCCEED;
}
@


1.2
log
@various cleanups; david says results are same
@
text
@d1 1
a1 1
/* $OpenBSD: cancel2.c,v 1.1 2003/01/19 21:23:46 marc Exp $ */
d5 1
a5 1
 * Check that a thread waiting on a select without timeout can be
d12 1
d32 46
d82 1
d86 2
d89 1
a89 1
	sleep(2);
d91 24
a114 1
	CHECKr(pthread_join(thread, NULL));
@


1.1
log
@add test to ensure select can be cancelled.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d17 1
a17 1
void *
@

