head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.20
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.22
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.18
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.8
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.16
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.14
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.12
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.10
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.6
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.38
	OPENBSD_5_0:1.4.0.36
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.34
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.32
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.28
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.30
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.26
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.24
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.22
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.20
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.18
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.16
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.14
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.12
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.10
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.8
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.6
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.4
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.2
	OPENBSD_3_3_BASE:1.4;
locks; strict;
comment	@ * @;


1.5
date	2012.02.20.01.51.32;	author guenther;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.27.08.48.41;	author marc;	state Exp;
branches;
next	1.3;

1.3
date	2002.10.21.18.58.57;	author marc;	state Exp;
branches;
next	1.2;

1.2
date	2001.11.11.23.26.35;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.15.14.37.13;	author fgsch;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.08.15.14.37.13;	author fgsch;	state Exp;
branches;
next	;


desc
@@


1.5
log
@SIGSTOP, SIGKILL, and (for threaded programs) SIGTHR are unblockable
@
text
@/*	$OpenBSD: sigsuspend.c,v 1.4 2003/01/27 08:48:41 marc Exp $	*/
/*
 * Copyright (c) 1998 Daniel M. Eischen <eischen@@vigrid.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Daniel M. Eischen.
 * 4. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY DANIEL M. EISCHEN AND CONTRIBUTORS ``AS IS''
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */
#include <stdlib.h>
#include <unistd.h>

#include <errno.h>
#include <pthread.h>
#include <signal.h>
#include <stdio.h>
#include <string.h>

#include <pthread_np.h>
#include "test.h"

static int	sigcounts[NSIG + 1];
static int	sigfifo[NSIG + 1];
static int	fifo_depth = 0;
static sigset_t suspender_mask;
static pthread_t suspender_tid;


static void *
sigsuspender (void *arg)
{
	int save_count, status, i;
	sigset_t run_mask;

	SET_NAME("sigsuspender");

	/* Run with all signals blocked. */
	sigfillset (&run_mask);
	CHECKe(sigprocmask (SIG_SETMASK, &run_mask, NULL));

	/* Allow these signals to wake us up during a sigsuspend. */
	sigfillset (&suspender_mask);		/* Default action	*/
	sigdelset (&suspender_mask, SIGINT);	/* terminate		*/
	sigdelset (&suspender_mask, SIGHUP);	/* terminate		*/
	sigdelset (&suspender_mask, SIGQUIT);	/* create core image	*/
	sigdelset (&suspender_mask, SIGURG);	/* ignore		*/
	sigdelset (&suspender_mask, SIGIO);	/* ignore		*/
	sigdelset (&suspender_mask, SIGUSR2);	/* terminate		*/
	sigdelset (&suspender_mask, SIGSTOP);	/* unblockable		*/
	sigdelset (&suspender_mask, SIGKILL);	/* unblockable		*/

	while (sigcounts[SIGINT] == 0) {
		save_count = sigcounts[SIGUSR2];

		status = sigsuspend (&suspender_mask);
		if ((status == 0) || (errno != EINTR)) {
			DIE(errno, "Unable to suspend for signals, "
				"return value %d\n",
				status);
		}
		for (i = 0; i < fifo_depth; i++)
			printf ("Sigsuspend woke up by signal %d (%s)\n",
				sigfifo[i], strsignal(sigfifo[i]));
		fifo_depth = 0;
	}

	return (arg);
}


static void
sighandler (int signo)
{
	int save_errno = errno;
	char buf[8192];
	sigset_t set;
	sigset_t tmp;
	pthread_t self;

	if ((signo >= 0) && (signo <= NSIG))
		sigcounts[signo]++;

	/*
	 * If we are running on behalf of the suspender thread,
	 * ensure that we have the correct mask set.   NOTE: per
	 * POSIX the current signo will be part of the mask unless
	 * SA_NODEFER was specified.   Since it isn't in this test
	 * add the current signal to the original suspender_mask
	 * before checking.
	 */
	self = pthread_self ();
	if (self == suspender_tid) {
		sigfifo[fifo_depth] = signo;
		fifo_depth++;
		snprintf(buf, sizeof buf,
		    "  -> Suspender thread signal handler caught "
			"signal %d (%s)\n", signo, strsignal(signo));
		write(STDOUT_FILENO, buf, strlen(buf));
		sigprocmask (SIG_SETMASK, NULL, &set);
		tmp = suspender_mask;
		sigaddset(&tmp, signo);
		sigdelset(&tmp, SIGTHR);
		sigdelset(&set, SIGTHR);
		ASSERT(set == tmp);
	} else {
		snprintf(buf, sizeof buf,
		    "  -> Main thread signal handler caught "
			"signal %d (%s)\n", signo, strsignal(signo));
		write(STDOUT_FILENO, buf, strlen(buf));
	}
	errno = save_errno;
}


int main (int argc, char *argv[])
{
	pthread_attr_t	pattr;
	struct sigaction act;
	sigset_t	oldset;
	sigset_t	newset;

	/* Initialize our signal counts. */
	memset ((void *) sigcounts, 0, NSIG * sizeof (int));

	/* Ignore signal SIGIO. */
	sigemptyset (&act.sa_mask);
	sigaddset (&act.sa_mask, SIGIO);
	act.sa_handler = SIG_IGN;
	act.sa_flags = 0;
	CHECKe(sigaction (SIGIO, &act, NULL));

	/* Install a signal handler for SIGURG. */
	sigemptyset (&act.sa_mask);
	sigaddset (&act.sa_mask, SIGURG);
	act.sa_handler = sighandler;
	act.sa_flags = SA_RESTART;
	CHECKe(sigaction (SIGURG, &act, NULL));

	/* Install a signal handler for SIGXCPU */
	sigemptyset (&act.sa_mask);
	sigaddset (&act.sa_mask, SIGXCPU);
	CHECKe(sigaction (SIGXCPU, &act, NULL));

	/* Get our current signal mask. */
	CHECKe(sigprocmask (SIG_SETMASK, NULL, &oldset));

	/* Mask out SIGUSR1 and SIGUSR2. */
	newset = oldset;
	sigaddset (&newset, SIGUSR1);
	sigaddset (&newset, SIGUSR2);
	CHECKe(sigprocmask (SIG_SETMASK, &newset, NULL));

	/* Install a signal handler for SIGUSR1 and SIGUSR2 */
	sigemptyset (&act.sa_mask);
	sigaddset (&act.sa_mask, SIGUSR1);
	sigaddset (&act.sa_mask, SIGUSR2);
	act.sa_handler = sighandler;
	act.sa_flags = SA_RESTART;
	CHECKe(sigaction (SIGUSR1, &act, NULL));
	CHECKe(sigaction (SIGUSR2, &act, NULL));

	/*
	 * Initialize the thread attribute.
	 */
	CHECKr(pthread_attr_init (&pattr));
	CHECKr(pthread_attr_setdetachstate (&pattr, PTHREAD_CREATE_JOINABLE));

	/*
	 * Create the sigsuspender thread.
	 */
	CHECKr(pthread_create (&suspender_tid, &pattr, sigsuspender, NULL));

	/*
	 * Verify that an ignored signal doesn't cause a wakeup.
	 * We don't have a handler installed for SIGIO.
	 */
	CHECKr(pthread_kill (suspender_tid, SIGIO));
	sleep (1);
	CHECKe(kill (getpid (), SIGIO));
	sleep (1);
	/* sigsuspend should not wake up for ignored signal SIGIO */
	ASSERT(sigcounts[SIGIO] == 0);

	/*
	 * Verify that a signal with a default action of ignore, for
	 * which we have a signal handler installed, will release a
	 * sigsuspend.
	 */
	CHECKr(pthread_kill (suspender_tid, SIGURG));
	sleep (1);
	CHECKe(kill (getpid (), SIGURG));
	sleep (1);
	/* sigsuspend should wake up for SIGURG */
	ASSERT(sigcounts[SIGURG] == 2);

	/*
	 * Verify that a SIGUSR2 signal will release a sigsuspended
	 * thread.
	 */
	CHECKr(pthread_kill (suspender_tid, SIGUSR2));
	sleep (1);
	CHECKe(kill (getpid (), SIGUSR2));
	sleep (1);
	/* sigsuspend should wake up for SIGUSR2 */
	ASSERT(sigcounts[SIGUSR2] == 2);

	/*
	 * Verify that a signal, blocked in both the main and
	 * sigsuspender threads, does not cause the signal handler
	 * to be called.
	 */
	CHECKr(pthread_kill (suspender_tid, SIGUSR1));
	sleep (1);
	CHECKe(kill (getpid (), SIGUSR1));
	sleep (1);
	/* signal handler should not be called for USR1 */
	ASSERT(sigcounts[SIGUSR1] == 0);
#if 0
	/*
	 * Verify that we can still kill the process for a signal
	 * not being waited on by sigwait.
	 */
	CHECKe(kill (getpid (), SIGPIPE));
	PANIC("SIGPIPE did not terminate process");

	/*
	 * Wait for the thread to finish.
	 */
	CHECKr(pthread_join (suspender_tid, NULL));
#endif
	SUCCEED;
}

@


1.4
log
@
Another incorrect regression test.   POSIX specifies that signal
handlers will be called with the current signal masked unless the
handler was installed with the SA_NODEFER flag.   The test did
not check this (and the pthread code was incorrect by not setting
the mask).   This fixes the test.  The pthread lib part of the fix
will be made in a short while.  Untill then the test will fail.
@
text
@d1 1
a1 1
/*	$OpenBSD: sigsuspend.c,v 1.3 2002/10/21 18:58:57 marc Exp $	*/
d73 2
d126 2
d228 1
a228 1
	/* sigsuspend should wake yp for SIGUSR2 */
@


1.3
log
@
regression tests should test for proper operation, not what the code
being tested does.   A signal should only be delivered to one thread.
@
text
@d1 1
a1 1
/*	$OpenBSD: sigsuspend.c,v 1.2 2001/11/11 23:26:35 deraadt Exp $	*/
d99 1
d107 5
a111 1
	 * ensure that we have the correct mask set.
d122 3
a124 1
		ASSERT(set == suspender_mask);
@


1.2
log
@signal race fixes
@
text
@d1 1
a1 1
/*	$OpenBSD: sigsuspend.c,v 1.1.1.1 2001/08/15 14:37:13 fgsch Exp $	*/
d207 1
a207 1
	ASSERT(sigcounts[SIGURG] == 3);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD: test_sigsuspend.c,v 1.3 2000/01/06 06:58:34 d Exp $	*/
d96 2
d112 2
a113 1
		printf ("  -> Suspender thread signal handler caught "
d115 1
d118 5
d124 1
a124 3
	else
		printf ("  -> Main thread signal handler caught "
			"signal %d (%s)\n", signo, strsignal(signo));
@


1.1.1.1
log
@Regression tests for libc_r (pthreads) library.
Thanks to pval@@ for resolving the license stuff.
@
text
@@
