head	1.2;
access;
symbols
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.16
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.6
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.14
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.12
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.10
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.8
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.0.2
	OPENBSD_5_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.2
date	2012.08.22.22.51.27;	author fgsch;	state Exp;
branches;
next	1.1;

1.1
date	2012.02.27.23.40.37;	author fgsch;	state Exp;
branches;
next	;


desc
@@


1.2
log
@correct check.
@
text
@/*	$OpenBSD: blocked_join.c,v 1.1 2012/02/27 23:40:37 fgsch Exp $	*/
/*
 * Federico G. Schwindt <fgsch@@openbsd.org>, 2012. Public Domain.
 */

#include <sys/types.h>
#include <sys/wait.h>
#include <pthread.h>
#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include "test.h"

void *
deadlock_detector(void *arg)
{
	sleep(10);
	PANIC("deadlock detected");
}

void *
joiner(void *arg)
{
	pthread_t mainthread = *(pthread_t *)arg;
	ASSERT(pthread_join(mainthread, NULL) == EDEADLK);
	return (NULL);
}

int
main(int argc, char **argv)
{
	pthread_t d, t, self = pthread_self();
	pid_t pid;

	switch ((pid = fork())) {
	case -1:
		PANIC("cannot fork");
		/* NOTREACHED */

	case 0:
		/* child */
		break;

	default:
		CHECKe(waitpid(pid, NULL, 0));
		_exit(0);
		/* NOTREACHED */
	}

        CHECKr(pthread_create(&d, NULL, deadlock_detector, NULL));
	CHECKr(pthread_create(&t, NULL, joiner, &self));
	CHECKr(pthread_join(t, NULL));
	SUCCEED;
}
@


1.1
log
@test based on python's dubious test_3_join_in_forked_from_thread test.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d45 1
a45 1
		CHECKr(waitpid(pid, NULL, 0));
@

