head	1.6;
access;
symbols
	OPENBSD_6_0:1.4.0.54
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.44
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.52
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.50
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.48
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.46
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.42
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.40
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.38
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.36
	OPENBSD_5_0:1.4.0.34
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.32
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.30
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.26
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.28
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.24
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.22
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.20
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.18
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.16
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.14
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.12
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.10
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.8
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3;
locks; strict;
comment	@ * @;


1.6
date	2016.09.20.17.25.06;	author otto;	state Exp;
branches;
next	1.5;
commitid	mpyfomZtFo6mUYXg;

1.5
date	2016.09.20.17.04.35;	author otto;	state Exp;
branches;
next	1.4;
commitid	BnHSEKwDcDMsxpX3;

1.4
date	2003.07.31.21.48.05;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2001.09.20.16.43.15;	author todd;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.23.04.26.05;	author fgsch;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.15.14.37.12;	author fgsch;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.08.15.14.37.12;	author fgsch;	state Exp;
branches;
next	;


desc
@@


1.6
log
@switch master & slave; prompted by bluhm@@
@
text
@/*	$OpenBSD: poll.c,v 1.5 2016/09/20 17:04:35 otto Exp $	*/
/* David Leonard <d@@openbsd.org>, 2001. Public Domain. */

#include <pthread.h>
#include <fcntl.h>
#include <poll.h>
#include <paths.h>
#include <unistd.h>
#include <stdlib.h>
#include <util.h>
#include "test.h"


#define POLLALL	(POLLIN|POLLOUT|POLLERR|POLLNVAL)

static void
print_pollfd(struct pollfd *p)
{

	printf("{fd=%d, events=< %s%s%s> revents=< %s%s%s%s%s>}",
		p->fd,
		p->events & POLLIN ? "in " : "",
		p->events & POLLOUT ? "out " : "",
		p->events & ~(POLLIN|POLLOUT) ? "XXX " : "",
		p->revents & POLLIN ? "in " : "",
		p->revents & POLLOUT ? "out " : "",
		p->revents & POLLERR ? "err " : "",
		p->revents & POLLHUP ? "hup " : "",
		p->revents & POLLNVAL ? "nval " : ""
	);
}

static void *
writer(void *arg)
{
	int fd = *(int *)arg;
	const char msg[1] = { '!' };

	ASSERTe(write(fd, &msg, sizeof msg), == sizeof msg);
	return NULL;
}

static void *
reader(void *arg)
{
	int fd = *(int *)arg;
	char buf[1];

	ASSERTe(read(fd, &buf, sizeof buf), == sizeof buf);
	return NULL;
}

int
main(int argc, char *argv[])
{
	pthread_t t;
	void *result;
	int null, zero, tty, dummy;
	int tube[2];
	struct pollfd p[3];

	/* Try an empty poll set */
	ASSERTe(poll(NULL, 0, 0), == 0);

	CHECKe(zero = open(_PATH_DEV "zero", O_RDONLY));
	CHECKe(null = open(_PATH_DEV "null", O_WRONLY));
	CHECKe(openpty(&dummy, &tty, NULL, NULL, NULL));

	/* Try both descriptors being ready */
	p[0].fd = zero;
	p[0].events = POLLIN|POLLOUT;
	p[0].revents = 0;
	p[1].fd = null;
	p[1].events = POLLIN|POLLOUT;
	p[1].revents = 0;

	ASSERTe(poll(p, 2, 0), == 2);	/* if 4 then bug in kernel not fixed */
	printf("zero p[0]="); print_pollfd(&p[0]); putchar('\n');
	printf("null p[1]="); print_pollfd(&p[1]); putchar('\n');
	ASSERT((p[0].revents & POLLIN) == POLLIN);
	ASSERT((p[1].revents & POLLOUT) == POLLOUT);

	/*
	 * Try one of the descriptors being invalid
	 * and the other ready
	 */
	printf("closing zero\n");
	close(zero);

	p[0].fd = zero;
	p[0].events = POLLIN|POLLOUT;
	p[1].fd = null;
	p[1].events = POLLIN|POLLOUT;
	ASSERTe(poll(p, 2, 0), == 2);	/* again, old kernels had this bug */
	printf("zero p[0]="); print_pollfd(&p[0]); putchar('\n');
	printf("null p[1]="); print_pollfd(&p[1]); putchar('\n');
	ASSERT((p[0].revents & POLLNVAL) == POLLNVAL);
	ASSERT((p[1].revents & POLLOUT) == POLLOUT);

	printf("closing null\n");
	close(null);

	/* 
	 * New pipes. the write end should be writable (buffered)
	 */
	CHECKe(pipe(tube));
	CHECKe(fcntl(tube[0], F_SETFL, O_NONBLOCK));
	CHECKe(fcntl(tube[1], F_SETFL, O_NONBLOCK));

	p[0].fd = tube[0];
	p[0].events = POLLIN;
	p[1].fd = tube[1]; 
	p[1].events = POLLOUT;
	ASSERTe(poll(p, 2, 0), == 1);
	printf("rpipe p[0]="); print_pollfd(&p[0]); putchar('\n');
	printf("wpipe p[1]="); print_pollfd(&p[1]); putchar('\n');
	ASSERT(p[0].revents == 0);
	ASSERT(p[1].revents == POLLOUT);

	/* Start a writing thread to the write end [1] */
	printf("bg writing to wpipe\n");
	CHECKr(pthread_create(&t, NULL, writer, (void *)&tube[1]));
	/* The read end [0] should soon be ready for read (POLLIN) */
	p[0].fd = tube[0];
	p[0].events = POLLIN;
	ASSERTe(poll(p, 1, INFTIM), == 1);
	printf("rpipe p[0]="); print_pollfd(&p[0]); putchar('\n');
	ASSERT(p[0].revents == POLLIN);
	reader((void *)&tube[0]);	/* consume */
	CHECKr(pthread_join(t, &result));

	SUCCEED;
}
@


1.5
log
@don't depend on /dev/tty, in bluhm's framework there is no such thing
use openpty(3) instead
@
text
@d1 1
a1 1
/*	$OpenBSD: poll.c,v 1.4 2003/07/31 21:48:05 deraadt Exp $	*/
d67 1
a67 1
	CHECKe(openpty(&tty, &dummy, NULL, NULL, NULL));
@


1.4
log
@various cleanups; david says results are same
@
text
@d1 1
a1 1
/*	$OpenBSD: poll.c,v 1.3 2001/09/20 16:43:15 todd Exp $	*/
d10 1
d58 1
a58 1
	int null, zero, tty;
d67 1
a67 1
	CHECKe(tty  = open(_PATH_DEV "tty", O_WRONLY));
@


1.3
log
@per man page and gcc 3.0.1, exit requires prototype from stdlib.h
@
text
@d1 1
a1 1
/*	$OpenBSD: poll.c,v 1.2 2001/08/23 04:26:05 fgsch Exp $	*/
d16 1
a16 2
print_pollfd(p)
	struct pollfd *p;
d33 1
a33 2
writer(arg)
	void *arg;
d43 1
a43 2
reader(arg)
	void *arg;
d53 1
a53 3
main(argc, argv)
	int argc;
	char **argv;
@


1.2
log
@while im here, remove -Wall warnings.
@
text
@d1 1
a1 1
/*	$OpenBSD: poll.c,v 1.1.1.1 2001/08/15 14:37:12 fgsch Exp $	*/
d9 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD: test_poll.c,v 1.2 2000/01/06 06:55:37 d Exp $	*/
d36 1
a36 1
	int fd = (int)arg;
d47 1
a47 1
	int fd = (int)arg;
d125 1
a125 1
	CHECKr(pthread_create(&t, NULL, writer, (void *)tube[1]));
d132 1
a132 1
	reader((void *)tube[0]);	/* consume */
@


1.1.1.1
log
@Regression tests for libc_r (pthreads) library.
Thanks to pval@@ for resolving the license stuff.
@
text
@@
