head	1.2;
access;
symbols
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.2.0.14
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.10
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.8
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.6
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.4
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.1.0.6
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.2
	OPENBSD_5_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.2
date	2014.05.20.01.25.24;	author guenther;	state Exp;
branches;
next	1.1;

1.1
date	2013.06.21.06.47.20;	author guenther;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Use errc/warnc to simplify code.
Also, in 'ftp', always put the error message last, after the hostname/ipaddr.

ok jsing@@ krw@@ millert@@
@
text
@/*	$OpenBSD: earlysig.c,v 1.1 2013/06/21 06:47:20 guenther Exp $	*/

/*
 * Public domain.  2005, Otto Moerbeek; 2013, Philip Guenther
 *
 * Try to create the case where a signal is delivered to a process before
 * the pthread fork() wrapper can unlock the ld.so bind lock.
 */

#include <sys/types.h>
#include <sys/time.h>
#include <sys/utsname.h>
#include <sys/wait.h>

#include <err.h>
#include <pthread.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

void dohup(int signo)
{
	struct utsname name;
	uname(&name);			/* anything that'll require binding */
}

void *tmain(void *arg)
{
	return (arg);
}

int
main()
{
	pthread_t tid;
	pid_t pid, rpid;
	int r, status;

	if (signal(SIGHUP, dohup) == SIG_ERR)
		err(1, "signal");

	/* make sure the thread library is fully active */
	if ((r = pthread_create(&tid, NULL, tmain, NULL)))
		errc(1, r, "pthread_create");
	pthread_join(tid, NULL);

	/* make sure kill() and all the symbols in fork() are bound */
	kill(0, 0);
	if ((pid = fork()) <= 0) {
		if (pid == -1)
			err(1, "fork");
		_exit(0);
	}
	if (waitpid(pid, &status, 0) == -1)
		err(1, "waitpid");


	switch(pid = fork()) {
	case -1:
		err(1, "fork");
		break;
	case 0:
		sleep(2);
		_exit(0);
	default:
		kill(pid, SIGHUP);
		sleep(3);
		if ((rpid = waitpid(pid, &status, WNOHANG)) == -1)
			err(1, "waitpid");
		if (rpid == 0) {
			/* took too long */
			kill(pid, SIGKILL);
			if (waitpid(pid, &status, 0) == -1)
				err(1, "waitpid");
		}
		if (WIFEXITED(status) && WEXITSTATUS(status) == 0)
			exit(0);
		else if (WIFEXITED(status))
			errx(1, "child exited with status %d",
			    WEXITSTATUS(status));
		else if (WTERMSIG(status) == SIGKILL)
			errx(1, "failed: child hung");
		errx(1, "child killed by signal %d", WTERMSIG(status));
	}
}
@


1.1
log
@Add earlysig test to check whether the pthread fork() wrapper
has a critical section where getting a signal causes a hang.  Based on
otto@@ earlysig kernel regress; suggested by miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: earlysig.c,v 1.2 2007/08/01 21:32:53 miod Exp $	*/
d46 1
a46 1
		errx(1, "pthread_create: %s", strerror(r));
@

