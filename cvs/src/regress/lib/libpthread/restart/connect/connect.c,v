head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.0.20
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.10
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.18
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.16
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.14
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.12
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.8
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.6
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.4
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.2;
locks; strict;
comment	@ * @;


1.2
date	2016.08.09.02.25.35;	author guenther;	state Exp;
branches;
next	1.1;
commitid	EtP812RgLMeBT5zT;

1.1
date	2011.09.18.16.36.58;	author fgsch;	state Exp;
branches;
next	;


desc
@@


1.2
log
@When interrupted, connect() should leave the socket connecting in the
background, similar to a non-blocking socket.  Return EALREADY whenever
already connecting, not just for non-blocking sockets.  Fix from {Free,Net}BSD

Prompted by a report from Michael Reed (m.reed (at) mykolab.com)
ok millert@@
@
text
@/*	$OpenBSD: connect.c,v 1.1 2011/09/18 16:36:58 fgsch Exp $	*/
/*
 * Federico G. Schwindt <fgsch@@openbsd.org>, 2011. Public Domain.
 */
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <pthread.h>
#include <signal.h>
#include <unistd.h>
#include "test.h"

volatile sig_atomic_t hits = 0;

void
handler(int sig)
{
	hits++;
}

void *
thr_connect(void *arg)
{
	struct sockaddr_in sa;
	int s;

	CHECKe(s = socket(AF_INET, SOCK_STREAM, 0));
	bzero(&sa, sizeof(sa));
	sa.sin_family = AF_INET;
	sa.sin_port = htons(23);
	sa.sin_addr.s_addr = htonl(0xc7b98903);	/* cvs.openbsd.org */
	ASSERT(connect(s, (struct sockaddr *)&sa, sizeof(sa)) == -1);
	int err = errno;
	ASSERT(connect(s, (struct sockaddr *)&sa, sizeof(sa)) == -1);
	ASSERT(errno == EALREADY);
	return ((caddr_t)NULL + err);
}

int
main(int argc, char **argv)
{
	struct sigaction sa;
	pthread_t tid;
	void *retval;

	bzero(&sa, sizeof(sa));
	sa.sa_handler = handler;
	sa.sa_flags = SA_RESTART;
	CHECKe(sigaction(SIGUSR1, &sa, NULL));

	CHECKr(pthread_create(&tid, NULL, thr_connect, NULL));
	sleep(2);

	/* Should interrupt it. */
	CHECKr(pthread_kill(tid, SIGUSR1));
	sleep(1);

	CHECKr(pthread_join(tid, &retval));
	ASSERT(retval == (void *)EINTR);
	ASSERT(hits == 1);
	SUCCEED;
}
@


1.1
log
@test for interrupted connect.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d33 4
a36 1
	return ((caddr_t)NULL + errno);
@

