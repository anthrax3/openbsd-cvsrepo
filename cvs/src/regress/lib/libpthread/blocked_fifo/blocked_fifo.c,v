head	1.2;
access;
symbols
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.18
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.8
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.16
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.14
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.12
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.10
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.6
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2;
locks; strict;
comment	@ * @;


1.2
date	2012.07.08.11.35.37;	author guenther;	state Exp;
branches;
next	1.1;

1.1
date	2012.03.19.17.41.57;	author oga;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Enhance the blocking test and add a test for closing while half-open
@
text
@/*	$OpenBSD: blocked_fifo.c,v 1.1 2012/03/19 17:41:57 oga Exp $	*/
/*
 * Copyright (c) 2012 Owain G. Ainsworth <oga@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * Test fifo opening blocking the file descriptor table and thus all other
 * opens in the process.
 * Symptoms are that the main thread will sleep on fifor (in the fifo open) and
 * the deadlocker on fdlock (in open of any other file).
 */

#include <sys/types.h>
#include <sys/stat.h>

#include <pthread.h>
#include <unistd.h>
#include <fcntl.h>
#include "test.h"

#define FIFO	"pthread.fifo"
#define FILE	"/etc/services"	/* just any file to deadlock on */

int	free_fd, expected_fd;

static void *
deadlock_detector(void *arg)
{
	sleep(10);
	unlink(FIFO);
	PANIC("deadlock detected");
}

static void *
fifo_deadlocker(void *arg)
{
	int	fd;

	/* let other fifo open start */
	sleep(3);

	/* open a random temporary file, if we don't deadlock this'll succeed */
	CHECKe(fd = open(FILE, O_RDONLY));
	CHECKe(close(fd));

	/* open fifo to unblock other thread */
	CHECKe(fd = open(FIFO, O_WRONLY));
	CHECKe(write(fd, "test", 4));
	CHECKe(close(fd));

	return ((caddr_t)NULL + errno);
}

static void *
fifo_closer(void *arg)
{
	int	fd;

	/* let other fifo open start */
	sleep(3);

	/* open a random temporary file and dup2 it over the FIFO */
	CHECKe(fd = open(FILE, O_RDONLY));
	CHECKe(dup2(fd, expected_fd));
	CHECKe(close(fd));
	CHECKe(close(expected_fd));

	/* open fifo to unblock other thread */
	CHECKe(fd = open(FIFO, O_WRONLY));
	CHECKe(write(fd, "test", 4));
	CHECKe(close(fd));

	return ((caddr_t)NULL + errno);
}

int
main(int argc, char *argv[])
{
	pthread_t	 test_thread, deadlock_finder;
	struct stat	 st;
	char		 buf[5];
	int		 fd;
	ssize_t		 rlen;

	unlink(FIFO);
	CHECKe(mkfifo(FIFO, S_IRUSR | S_IWUSR));

	CHECKr(pthread_create(&deadlock_finder, NULL,
	    deadlock_detector, NULL));

	/*
	 * Verify that other threads can still do fd-table operations
	 * while a thread is blocked opening a FIFO
	 */
	CHECKr(pthread_create(&test_thread, NULL, fifo_deadlocker, NULL));

	/* Open fifo (this will sleep until we have readers) */
	CHECKe(fd = open(FIFO, O_RDONLY));

	CHECKe(fstat(fd, &st));
	ASSERT(S_ISFIFO(st.st_mode));
	CHECKe(rlen = read(fd, buf, sizeof buf));
	ASSERT(rlen == 4);

	CHECKr(pthread_join(test_thread, NULL));

	CHECKe(close(fd));


	/*
	 * Verify that if a thread is blocked opening a FIFO and another
	 * thread targets the half-open fd with dup2 that it doesn't blow up.
	 */
	CHECKr(pthread_create(&test_thread, NULL, fifo_closer, NULL));

	free_fd = open("/dev/null", O_RDONLY);
	expected_fd = dup(free_fd);
	close(expected_fd);

	/* Open fifo (this will sleep until we have readers) */
	CHECKe(fd = open(FIFO, O_RDONLY));

	ASSERT(fd == expected_fd);
	ASSERT(close(fd) == -1);
	ASSERT(errno == EBADF);

	CHECKr(pthread_join(test_thread, NULL));

	CHECKe(close(free_fd));


	/* clean up */
	unlink(FIFO);

	SUCCEED;
}
@


1.1
log
@Add a (failing) test for a deadlock with fifos and threads.

The ``sleep until we have a writer'' behaviour of an open() on a fifo
does so with the file descriptor table locked, so if we are waiting for
another thread to be our writer we will hang forever.

Found this using zotero and firefox.

ok fgsch@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dup2_race.c,v 1.3 2006/10/06 13:11:58 kurt Exp $	*/
d33 1
a33 1
#define FIFO	"/tmp/pthread.fifo"
d36 2
d60 24
d91 3
a93 1
	pthread_t	 deadlock_thread, deadlock_finder;
d95 1
d97 1
a99 2
	CHECKr(pthread_create(&deadlock_thread, NULL,
	    fifo_deadlocker, NULL));
d103 30
a132 1
	/* Open fifo (this will sleep until we have readers */
d135 8
a142 1
	CHECKr(pthread_join(deadlock_thread, NULL));
d144 1
@

