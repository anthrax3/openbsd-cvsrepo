head	1.1;
access;
symbols
	OPENBSD_6_1:1.1.0.20
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.18
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.8
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.16
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.14
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.12
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.10
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.6
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.4
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.2
	OPENBSD_5_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.1
date	2012.05.03.09.07.17;	author pirofti;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Add pthread spinlock support.

Implementation, documentation and naive regression tests for:
- pthread_spin_init()
- pthread_spin_destroy()
- pthread_spin_lock()
- pthread_spin_trylock()
- pthread_spin_unlock()

Implementation okay guenther@@, documentation okay jmc@@.
@
text
@/*	$OpenBSD$	*/
/* Paul Irofti <pirofti@@openbsd.org>, 2012. Public Domain. */

#include <stdio.h>
#include <stdlib.h>

#include <errno.h>
#include <pthread.h>
#include <unistd.h>

#include "test.h"

void *
foo(void *arg)
{
	int rc = 0;
	pthread_spinlock_t l = (pthread_spinlock_t)arg;
	rc = pthread_spin_trylock(&l);
	if (rc != 0 && rc != EBUSY) {
		PANIC("pthread_trylock returned %d", rc);
	}
	if (rc == 0) {
		CHECKr(pthread_spin_unlock(&l));
	}
	CHECKr(pthread_spin_lock(&l));
	CHECKr(pthread_spin_unlock(&l));
	return NULL;
}

int main()
{
	int i;
	pthread_t thr[10];
	pthread_spinlock_t l;

	_CHECK(pthread_spin_init(&l, PTHREAD_PROCESS_SHARED), == ENOTSUP,
	    strerror(_x));

	CHECKr(pthread_spin_init(&l, PTHREAD_PROCESS_PRIVATE));
	for (i = 0; i < 10; i++) {
		printf("Thread %d started\n", i);
		CHECKr(pthread_create(&thr[i], NULL, foo, (void *)l));
	}
	for (i = 0; i < 10; i++) {
		CHECKr(pthread_join(thr[i], NULL));
	}
	CHECKr(pthread_spin_destroy(&l));

	SUCCEED;
}
@
