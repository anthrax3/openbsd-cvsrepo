head	1.1;
access;
symbols
	OPENBSD_6_2_BASE:1.1
	OPENBSD_6_1:1.1.0.22
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.18
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.8
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.16
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.14
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.12
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.10
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.6
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.4
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.2
	OPENBSD_5_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.1
date	2012.04.11.18.39.24;	author pirofti;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Add a simple barrier regression test.
@
text
@/*	$OpenBSD$	*/
/* Paul Irofti <pirofti@@openbsd.org>, 2012. Public Domain. */

#include <stdio.h>

#include <pthread.h>
#include <errno.h>

#include "test.h"

void *
foo(void *arg)
{
	int rc = 0;
	pthread_barrier_t b = (pthread_barrier_t)arg;
	rc = pthread_barrier_wait(&b);
	if (rc != 0 && rc != PTHREAD_BARRIER_SERIAL_THREAD)
		PANIC("pthread_barrier_wait returned %d", rc);
	return NULL;
}

int main()
{
	int i;
	pthread_t thr[10];
	pthread_barrier_t b;

	pthread_barrierattr_t attr;
	CHECKr(pthread_barrierattr_init(&attr));
	CHECKr(pthread_barrierattr_getpshared(&attr, &i));
	_CHECK(i, == PTHREAD_PROCESS_PRIVATE, strerror(_x));
	CHECKr(pthread_barrierattr_setpshared(&attr, i));
	_CHECK(pthread_barrierattr_setpshared(&attr, PTHREAD_PROCESS_SHARED), == ENOTSUP, strerror(_x));

	CHECKr(pthread_barrier_init(&b, &attr, 10));
	for (i = 0; i < 10; i++) {
		printf("Thread %d started\n", i);
		CHECKr(pthread_create(&thr[i], NULL, foo, (void *)b));
	}
	for (i = 0; i < 10; i++) {
		CHECKr(pthread_join(thr[i], NULL));
	}
	CHECKr(pthread_barrierattr_destroy(&attr));
	CHECKr(pthread_barrier_destroy(&b));

	SUCCEED;
}
@
