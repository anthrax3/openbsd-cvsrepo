head	1.6;
access;
symbols
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.22
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.18
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.8
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.16
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.14
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.12
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.10
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.6
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.4
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.2
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.36
	OPENBSD_5_0:1.5.0.34
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.32
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.30
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.26
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.28
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.24
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.22
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.20
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.18
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.16
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.14
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.4.0.2
	OPENBSD_3_3_BASE:1.4;
locks; strict;
comment	@ * @;


1.6
date	2012.04.13.10.15.49;	author guenther;	state Exp;
branches;
next	1.5;

1.5
date	2003.09.02.23.52.17;	author david;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.17.19.42.27;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.02.16.21.27.32;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.20.15.33.17;	author todd;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.15.14.37.10;	author fgsch;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.08.15.14.37.10;	author fgsch;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Make it easier to compile regress tests on other OSes
@
text
@/*	$OpenBSD: test.h,v 1.5 2003/09/02 23:52:17 david Exp $	*/

#ifndef _h_test_
#define _h_test_

#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <errno.h>
#include <string.h>
#include <stdarg.h>
#include <unistd.h>

static void __vpanic(const char *, const char *, const char *, 
	int, const char *, va_list) __attribute__((__noreturn__));
static void __panic(const char *, const char *, const char *,
	int, const char *, ...) __attribute__((__noreturn__));

#if defined(__OpenBSD__) || defined(__FreeBSD__)
#include <pthread.h>
#include <pthread_np.h>
void	_thread_dump_info(void);
int	_thread_sys_write(int, const char*, size_t);
void	_thread_sys__exit(int) __attribute__((__noreturn__));
#define SET_NAME(x)	pthread_set_name_np(pthread_self(), x)
#define DUMP_INFO()	_thread_dump_info()
#else
#define	_thread_sys_write(fd,buf,len)	write(fd,buf,len)
#define	_thread_sys__exit(ret)		_exit(ret)
#define	strlcat(dst,src,siz)		strcat(dst,src)
#define SET_NAME(x)	/* nada */
#define DUMP_INFO()	/* nada */
#endif

static void
__vpanic(type, errstr, filenm, lineno, fmt, ap)
	const char *type; 
	const char *errstr;
	const char *filenm;
	int lineno; 
	const char *fmt; 
	va_list ap;
{
	char buf[1024];

	/* "<type> at <filenm>:<lineno>: <fmt ap...>:<errstr>" */
	snprintf(buf, sizeof buf, "%s at %s:%d\n", type, filenm, lineno);
	_thread_sys_write(2, buf, strlen(buf));
	vsnprintf(buf, sizeof buf, fmt, ap);
	if (errstr != NULL) {
		strlcat(buf, ": ", sizeof buf);
		strlcat(buf, errstr, sizeof buf);
	}
	strlcat(buf, "\n", sizeof buf);
	_thread_sys_write(2, buf, strlen(buf));

	DUMP_INFO();
	_thread_sys__exit(1);

	_thread_sys_write(2, "[locking]\n", 10);
	while(1);
}

static void
__panic(type, errstr, filenm, lineno, fmt)
	const char *type;
	const char *errstr;
	const char *filenm;
	int lineno; 
	const char *fmt;
{
	va_list ap;

	va_start(ap, fmt);
	__vpanic(type, errstr, filenm, lineno, fmt, ap);
	va_end(ap);
}

#define DIE(e, m, args...) \
	__panic("died", strerror(e), __FILE__, __LINE__, m , ## args)

#define PANIC(m, args...)  \
	__panic("panic", NULL, __FILE__, __LINE__, m, ## args)

#define ASSERT(x) do { \
	if (!(x)) \
		__panic("assert failed", NULL, __FILE__, __LINE__, "%s", #x); \
} while(0)

#define ASSERTe(x,rhs) do { \
	int _x; \
	_x = (x); \
	if (!(_x rhs)) { \
	    if (_x > 0) \
		__panic("assert failed", strerror(_x), __FILE__, __LINE__,  \
		    "%s %s", #x, #rhs); \
	    else \
		__panic("assert failed", NULL, __FILE__, __LINE__, \
		    "%s [=%d] %s", #x, _x, #rhs); \
	} \
} while(0)

#define _T(x) __builtin_classify_type(x)

#define _CHECK(x, rhs, efn) do { \
	typeof(x) _x; \
	_x = (x); \
	if (!(_x rhs)) \
		__panic("check failed", efn, __FILE__, __LINE__, \
		   ((_T(0) == _T(_x)   )? "failed check %s (=%d) %s " : \
		    (_T("") == _T(_x)  )? "failed check %s (=%s) %s " : \
		    (_T('x') == _T(_x) )? "failed check %s (=%c) %s " : \
		    (_T(0L) == _T(_x)  )? "failed check %s (=%ld) %s " : "?") \
		    , #x, _x, #rhs); \
} while(0)

#define CHECKr(x) _CHECK(x, == 0, strerror(_x))
#define CHECKe(x) _CHECK(x, != -1, strerror(errno))
#define CHECKn(x) _CHECK(x, != 0, strerror(errno))
#define CHECKhn(x) _CHECK(x, != 0, hstrerror(h_errno))

#define SUCCEED 	exit(0)

#define OK		(0)
#define NOTOK		(-1)

#endif /* _h_test_ */
@


1.5
log
@add missing includes
ok deraadt@@ tedu@@ dhartmei@@ krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: test.h,v 1.4 2002/02/17 19:42:27 millert Exp $	*/
d12 1
d14 1
a14 4
int	_thread_sys_write(int, const char*, size_t);
__dead void _thread_sys__exit(int) __attribute__((__noreturn__));

static __dead void __vpanic(const char *, const char *, const char *, 
d16 1
a16 1
static __dead void __panic(const char *, const char *, const char *,
d23 2
d28 3
@


1.4
log
@Manual cleanup of remaining userland __P use (excluding packages maintained outside the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: test.h,v 1.3 2002/02/16 21:27:32 millert Exp $	*/
d7 1
@


1.3
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: test.h,v 1.2 2001/09/20 15:33:17 todd Exp $	*/
d15 4
a18 4
static __dead void __vpanic __P((const char *, const char *, const char *, 
	int, const char *, va_list)) __attribute__((__noreturn__));
static __dead void __panic __P((const char *, const char *, const char *,
	int, const char *, ...)) __attribute__((__noreturn__));
@


1.2
log
@comment extra tokens at end of #endif directive
@
text
@d1 1
a1 1
/*	$OpenBSD: test.h,v 1.1.1.1 2001/08/15 14:37:10 fgsch Exp $	*/
d12 2
a13 2
int	_thread_sys_write __P((int, const char*, size_t));
__dead void _thread_sys__exit __P((int)) __attribute__((__noreturn__));
d23 1
a23 1
void	_thread_dump_info __P((void));
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d123 1
a123 1
#endif _h_test_
@


1.1.1.1
log
@Regression tests for libc_r (pthreads) library.
Thanks to pval@@ for resolving the license stuff.
@
text
@@
