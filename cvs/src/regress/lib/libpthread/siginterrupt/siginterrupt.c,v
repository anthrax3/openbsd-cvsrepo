head	1.1;
access;
symbols
	OPENBSD_6_2:1.1.0.26
	OPENBSD_6_2_BASE:1.1
	OPENBSD_6_1:1.1.0.24
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.20
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.10
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.18
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.16
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.14
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.12
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.8
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.6
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.4
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.2;
locks; strict;
comment	@ * @;


1.1
date	2011.09.13.23.50.17;	author fgsch;	state Exp;
branches;
next	;


desc
@@


1.1
log
@first round of tests to check system calls restarting with pthreads.
guenther@@ ok
@
text
@/*	$OpenBSD$	*/
/*
 * Federico G. Schwindt <fgsch@@openbsd.org>, 2011. Public Domain.
 */
#include <pthread.h>
#include <signal.h>
#include <unistd.h>
#include "test.h"

volatile sig_atomic_t hits = 0;

void
handler(int sig)
{
	hits++;
}

void *
blocker(void *arg)
{
	int fds[2];
	char buf;

	CHECKe(pipe(fds));
	ASSERT(read(fds[0], &buf, 1) == -1);
	return ((caddr_t)NULL + errno);
}

int
main(int argc, char **argv)
{
	pthread_t tid;
	void *retval;

	ASSERT(signal(SIGUSR1, handler) != SIG_ERR);

	CHECKr(pthread_create(&tid, NULL, blocker, NULL));
	sleep(1);

	/* With signal(3) system calls will be restarted. */
	CHECKr(pthread_kill(tid, SIGUSR1));
	sleep(1);

	/* Same as default with signal(3). */
	CHECKe(siginterrupt(SIGUSR1, 0));
	CHECKr(pthread_kill(tid, SIGUSR1));
	sleep(1);

	/* Should interrupt the call now. */
	CHECKe(siginterrupt(SIGUSR1, 1));
	CHECKr(pthread_kill(tid, SIGUSR1));
	sleep(1);

	CHECKr(pthread_join(tid, &retval));
	ASSERT(retval == (void *)EINTR);
	ASSERT(hits == 3);
	SUCCEED;
}
@
