head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.48
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.44
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.34
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.42
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.40
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.38
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.36
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.32
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.30
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.28
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.26
	OPENBSD_5_0:1.4.0.24
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.22
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.20
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.16
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.18
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.14
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.12
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.10
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.8
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.6
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.4
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.2
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.3.0.10
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.8
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.2
	OPENBSD_3_3_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2005.10.30.23.59.43;	author fgsch;	state Exp;
branches;
next	1.3;

1.3
date	2003.07.31.21.48.06;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2002.10.12.19.02.51;	author marc;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.10.00.45.20;	author marc;	state Exp;
branches;
next	;


desc
@@


1.4
log
@-Wall cleanup.
@
text
@/* $OpenBSD: socket3.c,v 1.3 2003/07/31 21:48:06 deraadt Exp $ */
/* PUBLIC DOMAIN Oct 2002 <marc@@snafu.org> */

/* Test blocking/non-blocking mode inheritance on accept */

#include <sys/types.h>
#include <sys/socket.h>

#include <netinet/in.h>

#include <fcntl.h>
#include <poll.h>
#include <pthread.h>
#include <string.h>
#include <unistd.h>

#include "test.h"

/*
 * connect to the test port passed in arg, then close the connection
 * and return.
 */
static void *
sock_connect(void *arg)
{
	struct sockaddr_in sin;
	int port;
	int sock;

	SET_NAME("connect");
	port = *(int *)arg;
	CHECKe(sock = socket(AF_INET, SOCK_STREAM, 0));
	sin.sin_family = AF_INET;
	sin.sin_port = htons(port);
	sin.sin_addr.s_addr = htonl(INADDR_LOOPBACK);
	CHECKe(connect(sock, (struct sockaddr *)&sin, sizeof sin));
	CHECKe(close(sock));
	return NULL;
}

/*
 * listen for a connection, accept it using a non-blocking socket, and
 * verify that the blocking mode of the socket returned from accept is
 * also non-blocking
 */
static void *
sock_accept(void *arg)
{
	pthread_t connect_thread;
	struct pollfd fds;
	struct sockaddr_in sa;
	struct sockaddr accept_sa;
	int accept_fd;
	int accept_sa_size;
	int flags;
	int listen_fd;
	int port;

	SET_NAME("accept");

	/* listen for a connection */

	port = 6543;
	memset(&sa, 0, sizeof sa);
	sa.sin_family = AF_INET;
	sa.sin_addr.s_addr = htonl(INADDR_LOOPBACK);
	sa.sin_port = htons(port);
	CHECKe(listen_fd = socket(AF_INET, SOCK_STREAM, 0));
	printf("listen_fd = %d\n", listen_fd);
	while (1) {
		if (bind(listen_fd, (struct sockaddr *)&sa, sizeof(sa)) == 0)
			break;
		if (errno == EADDRINUSE) {
			sa.sin_port = htons(++port);
			continue;
		}
		DIE(errno, "bind");
	}
	CHECKe(listen(listen_fd, 2));

	/* Create another thread to connect to the listening socket. */
	CHECKr(pthread_create(&connect_thread, NULL, sock_connect,
	    (void *)&port));

	/*
	 * Use poll to check for a pending connection as the socket
	 * passed to accept will be in non-blocking mode.
	 */
	fds.fd = listen_fd;
	fds.events = POLLIN;
	CHECKe(poll(&fds, 1, INFTIM));

	/*
	 * set non blocking mode on the listening socket and close stdin
	 * (fd 0) so the accept will use fd 0 (needed to test boundary
	 * condition in the pthread accept code).
	 */
	flags = fcntl(listen_fd, F_GETFL);
        CHECKr(fcntl(listen_fd, F_SETFL, flags |= O_NONBLOCK));
	CHECKe(close(STDIN_FILENO));
	accept_sa_size = sizeof accept_sa;
	CHECKe(accept_fd = accept(listen_fd, &accept_sa, &accept_sa_size));
	/* verify O_NONBLOCK on the accepted fd */
	flags = fcntl(accept_fd, F_GETFL);
	printf("accept_fd = %d, flags = %x\n", accept_fd, flags);
	ASSERT(flags & O_NONBLOCK);
	CHECKe(close(listen_fd));
	CHECKe(close(accept_fd));
	CHECKr(pthread_join(connect_thread, NULL));
	return NULL;
}

int
main(int argc, char * argv[])
{
	pthread_t accept_thread;

	CHECKr(pthread_create(&accept_thread, NULL, sock_accept, NULL));
	CHECKr(pthread_join(accept_thread, NULL));
	SUCCEED;
}
@


1.3
log
@various cleanups; david says results are same
@
text
@d1 1
a1 1
/* $OpenBSD: socket3.c,v 1.2 2002/10/12 19:02:51 marc Exp $ */
d31 1
a31 1
	port = (int)arg;
d83 1
a83 1
			      (void*)port));
@


1.2
log
@
Enable test for proper inheritance of NONBLOCK flag on accept.
The test will fail -- a reminder that I still need to fix this.
@
text
@d1 1
a1 1
/* $OpenBSD: socket3.c,v 1.1 2002/10/10 00:45:20 marc Exp $ */
d23 1
a23 1
void *
d46 1
a46 1
void *
@


1.1
log
@add socket test to check blocking/non-blocking mode on accept.
Enable test in makefile
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d103 1
d106 1
a106 2
	/* XXX the above should abort if flags & O_NOBLOCK is zero */
	/* ASSERT(flags & O_NONBLOCK); */
@

