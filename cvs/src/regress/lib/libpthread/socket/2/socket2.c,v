head	1.7;
access;
symbols
	OPENBSD_6_0:1.7.0.4
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.6.0.42
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.40
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.38
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.36
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.32
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.30
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.28
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.26
	OPENBSD_5_0:1.6.0.24
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.22
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.20
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.16
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.18
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.14
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.12
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.10
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.8
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.6
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.4
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.2
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.5.0.8
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.6
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.4
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.2
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3;
locks; strict;
comment	@ * @;


1.7
date	2015.11.04.21.29.20;	author tedu;	state Exp;
branches;
next	1.6;
commitid	2n9YnV0TYIBw2cK8;

1.6
date	2005.10.30.23.59.43;	author fgsch;	state Exp;
branches;
next	1.5;

1.5
date	2004.02.28.08.06.47;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2003.07.31.21.48.06;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2002.01.02.16.15.32;	author fgsch;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.20.16.43.16;	author todd;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.15.14.37.10;	author fgsch;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.08.15.14.37.10;	author fgsch;	state Exp;
branches;
next	;


desc
@@


1.7
log
@replace setbuf with setvbuf, from Frederic Nowak
@
text
@/*	$OpenBSD: socket2.c,v 1.6 2005/10/30 23:59:43 fgsch Exp $	*/
/*
 * Copyright (c) 1993, 1994, 1995, 1996 by Chris Provenzano and contributors, 
 * proven@@mit.edu All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Chris Provenzano,
 *	the University of California, Berkeley, and contributors.
 * 4. Neither the name of Chris Provenzano, the University, nor the names of
 *   contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY CHRIS PROVENZANO AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL CHRIS PROVENZANO, THE REGENTS OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */ 

/* ==== test_sock_1.c =========================================================
 * Copyright (c) 1993 by Chris Provenzano, proven@@athena.mit.edu
 *
 * Description : Test pthread_create() and pthread_exit() calls.
 *
 *  1.00 93/08/03 proven
 *      -Started coding this file.
 */

#include <pthread.h>
#include <pthread_np.h>
#include <errno.h>
#include <stdio.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>
#include <string.h>
#include <stdlib.h>
#include "test.h"

struct sockaddr_in a_sout;

#define MESSAGE5 "This should be message #5"
#define MESSAGE6 "This should be message #6"

static void *
sock_write(void *arg)
{
	int fd = *(int *)arg;

	SET_NAME("writer");
	CHECKe(write(fd, MESSAGE5, sizeof(MESSAGE5)));
	return(NULL);
}

static pthread_mutex_t waiter_mutex = PTHREAD_MUTEX_INITIALIZER;

static void *
waiter(void *arg)
{
	int status;
	pid_t pid;

	SET_NAME("waiter");
	CHECKr(pthread_mutex_lock(&waiter_mutex));
	printf("waiting for child\n");
	CHECKe(pid = wait(&status));
	ASSERT(WIFEXITED(status));
	ASSERT(WEXITSTATUS(status) == 0);
	printf("child exited\n");
	CHECKr(pthread_mutex_unlock(&waiter_mutex));
	return (NULL);
}

static void *
sock_accept(void *arg)
{
	pthread_t thread, wthread;
	struct sockaddr a_sin;
	int a_sin_size, a_fd, fd;
	u_int16_t port;
	char buf[1024];
	pid_t pid;

	port = 3276;
	a_sout.sin_family = AF_INET;
	a_sout.sin_port = htons(port);
	a_sout.sin_addr.s_addr = INADDR_ANY;

	CHECKe(a_fd = socket(AF_INET, SOCK_STREAM, 0));

	while(1) {
		if (bind(a_fd, (struct sockaddr *)&a_sout, sizeof(a_sout))==0)
			break;
		if (errno == EADDRINUSE) { 
			a_sout.sin_port = htons((++port));
			continue;
		}
		DIE(errno, "bind");
	}

	printf("listening on port %d\n", port);

	CHECKe(listen(a_fd, 2));
		
	printf("%d: This should be message #1\n", getpid());

	CHECKr(pthread_mutex_init(&waiter_mutex, NULL));
	CHECKr(pthread_mutex_lock(&waiter_mutex));
	CHECKr(pthread_create(&wthread, NULL, waiter, NULL));

	snprintf(buf, sizeof buf, "%d", port);

	CHECKe(pid = fork());
	switch(pid) {
	case 0:
		execl("socket2a", "socket2a", "fork okay", buf, (char *)NULL);
		DIE(errno, "execl");
	default:
		break;
	}
	CHECKr(pthread_mutex_unlock(&waiter_mutex));
	pthread_yield();

	a_sin_size = sizeof(a_sin);
	CHECKe(fd = accept(a_fd, &a_sin, &a_sin_size));
	CHECKe(close(fd)); 

	sleep(1);

	printf("%d: This should be message #4\n", getpid());

	a_sin_size = sizeof(a_sin);
	memset(&a_sin, 0, sizeof(a_sin));
	CHECKe(fd = accept(a_fd, &a_sin, &a_sin_size));

	/* Setup a write thread */

	CHECKr(pthread_create(&thread, NULL, sock_write, &fd));
	CHECKe(read(fd, buf, 1024));

	printf("%d: %s\n", getpid(), buf); /* message 6 */

	CHECKe(close(fd));

	if (pthread_mutex_trylock(&waiter_mutex) == EBUSY) {
		sleep(2);
		if (pthread_mutex_trylock(&waiter_mutex) == EBUSY) {
			/* forcibly kill child */
			CHECKe(kill(pid, SIGKILL));
			PANIC("child %d took too long to exit", pid);
		}
	}
	CHECKr(pthread_join(wthread, NULL));

	return(NULL);
}

int
main(int argc, char *argv[])
{
	pthread_t thread;

	setvbuf(stdout, NULL, _IONBF, 0);
	setvbuf(stderr, NULL, _IONBF, 0);

	CHECKr(pthread_create(&thread, NULL, sock_accept, 
	    (void *)0xdeadbeaf));

	CHECKr(pthread_join(thread, NULL));

	SUCCEED;
}
@


1.6
log
@-Wall cleanup.
@
text
@d1 1
a1 1
/*	$OpenBSD: socket2.c,v 1.5 2004/02/28 08:06:47 deraadt Exp $	*/
d180 2
a181 2
	setbuf(stdout, NULL);
	setbuf(stderr, NULL);
@


1.5
log
@kill bad functions; some sort of ok from marc who is trying to confuse me
@
text
@d1 1
a1 1
/*	$OpenBSD: socket2.c,v 1.4 2003/07/31 21:48:06 deraadt Exp $	*/
d75 1
a75 1
waiter(int sig)
@


1.4
log
@various cleanups; david says results are same
@
text
@d1 1
a1 1
/*	$OpenBSD: socket2.c,v 1.3 2002/01/02 16:15:32 fgsch Exp $	*/
d128 1
a128 1
	sprintf(buf, "%d", port);
@


1.3
log
@Be sure both programs are using the same port.
@
text
@d1 1
a1 1
/*	$OpenBSD: socket2.c,v 1.2 2001/09/20 16:43:16 todd Exp $	*/
d62 2
a63 3
void *
sock_write(arg)
	void *arg;
d74 2
a75 2
void*
waiter(sig)
d91 2
a92 3
void *
sock_accept(arg)
	void *arg;
d176 1
a176 1
main()
@


1.2
log
@per man page and gcc 3.0.1, exit requires prototype from stdlib.h
@
text
@d1 1
a1 1
/*	$OpenBSD: socket2.c,v 1.1.1.1 2001/08/15 14:37:10 fgsch Exp $	*/
d130 2
d135 1
a135 1
		execl("socket2a", "socket2a", "fork okay", (char *)NULL);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD: test_sock_2.c,v 1.6 2001/07/09 07:04:40 deraadt Exp $	*/
d54 1
@


1.1.1.1
log
@Regression tests for libc_r (pthreads) library.
Thanks to pval@@ for resolving the license stuff.
@
text
@@
