head	1.48;
access;
symbols
	OPENBSD_6_2_BASE:1.48
	OPENBSD_6_1:1.47.0.6
	OPENBSD_6_1_BASE:1.47
	OPENBSD_6_0:1.47.0.2
	OPENBSD_6_0_BASE:1.47
	OPENBSD_5_9:1.46.0.2
	OPENBSD_5_9_BASE:1.46
	OPENBSD_5_8:1.45.0.8
	OPENBSD_5_8_BASE:1.45
	OPENBSD_5_7:1.45.0.6
	OPENBSD_5_7_BASE:1.45
	OPENBSD_5_6:1.45.0.4
	OPENBSD_5_6_BASE:1.45
	OPENBSD_5_5:1.44.0.4
	OPENBSD_5_5_BASE:1.44
	OPENBSD_5_4:1.43.0.2
	OPENBSD_5_4_BASE:1.43
	OPENBSD_5_3:1.41.0.2
	OPENBSD_5_3_BASE:1.41
	OPENBSD_5_2:1.39.0.2
	OPENBSD_5_2_BASE:1.39
	OPENBSD_5_1_BASE:1.30
	OPENBSD_5_1:1.30.0.2
	OPENBSD_5_0:1.27.0.8
	OPENBSD_5_0_BASE:1.27
	OPENBSD_4_9:1.27.0.6
	OPENBSD_4_9_BASE:1.27
	OPENBSD_4_8:1.27.0.4
	OPENBSD_4_8_BASE:1.27
	OPENBSD_4_7:1.27.0.2
	OPENBSD_4_7_BASE:1.27
	OPENBSD_4_6:1.26.0.14
	OPENBSD_4_6_BASE:1.26
	OPENBSD_4_5:1.26.0.10
	OPENBSD_4_5_BASE:1.26
	OPENBSD_4_4:1.26.0.8
	OPENBSD_4_4_BASE:1.26
	OPENBSD_4_3:1.26.0.6
	OPENBSD_4_3_BASE:1.26
	OPENBSD_4_2:1.26.0.4
	OPENBSD_4_2_BASE:1.26
	OPENBSD_4_1:1.26.0.2
	OPENBSD_4_1_BASE:1.26
	OPENBSD_4_0:1.24.0.4
	OPENBSD_4_0_BASE:1.24
	OPENBSD_3_9:1.24.0.2
	OPENBSD_3_9_BASE:1.24
	OPENBSD_3_8:1.23.0.6
	OPENBSD_3_8_BASE:1.23
	OPENBSD_3_7:1.23.0.4
	OPENBSD_3_7_BASE:1.23
	OPENBSD_3_6:1.23.0.2
	OPENBSD_3_6_BASE:1.23
	OPENBSD_3_5:1.21.0.2
	OPENBSD_3_5_BASE:1.21
	OPENBSD_3_4:1.19.0.2
	OPENBSD_3_4_BASE:1.19
	OPENBSD_3_3:1.18.0.2
	OPENBSD_3_3_BASE:1.18
	cwd/Makefile:1.15;
locks; strict;
comment	@# @;


1.48
date	2017.07.07.23.55.21;	author bluhm;	state Exp;
branches;
next	1.47;
commitid	HPFM3FepOktcWNt0;

1.47
date	2016.05.10.03.59.55;	author guenther;	state Exp;
branches;
next	1.46;
commitid	oidWs45lfemjml47;

1.46
date	2015.09.14.08.02.59;	author guenther;	state Exp;
branches;
next	1.45;
commitid	gSaj1kCg4rlv6oL9;

1.45
date	2014.07.03.21.12.24;	author miod;	state Exp;
branches;
next	1.44;
commitid	tsdASf3OqPDRAjuB;

1.44
date	2013.08.01.21.26.30;	author kettenis;	state Exp;
branches;
next	1.43;

1.43
date	2013.06.21.06.47.20;	author guenther;	state Exp;
branches;
next	1.42;

1.42
date	2013.03.25.08.03.18;	author guenther;	state Exp;
branches;
next	1.41;

1.41
date	2012.11.06.00.22.26;	author fgsch;	state Exp;
branches;
next	1.40;

1.40
date	2012.08.19.18.55.55;	author fgsch;	state Exp;
branches;
next	1.39;

1.39
date	2012.05.03.09.07.17;	author pirofti;	state Exp;
branches;
next	1.38;

1.38
date	2012.04.13.19.04.09;	author kurt;	state Exp;
branches;
next	1.37;

1.37
date	2012.04.11.18.39.24;	author pirofti;	state Exp;
branches;
next	1.36;

1.36
date	2012.03.19.17.42.40;	author oga;	state Exp;
branches;
next	1.35;

1.35
date	2012.02.21.13.02.28;	author kurt;	state Exp;
branches;
next	1.34;

1.34
date	2012.02.20.17.06.11;	author kurt;	state Exp;
branches;
next	1.33;

1.33
date	2012.02.20.04.45.09;	author guenther;	state Exp;
branches;
next	1.32;

1.32
date	2012.02.20.04.08.52;	author guenther;	state Exp;
branches;
next	1.31;

1.31
date	2012.02.19.06.47.31;	author guenther;	state Exp;
branches;
next	1.30;

1.30
date	2012.01.04.17.38.24;	author mpi;	state Exp;
branches;
next	1.29;

1.29
date	2011.10.01.10.27.44;	author fgsch;	state Exp;
branches;
next	1.28;

1.28
date	2011.09.13.23.50.17;	author fgsch;	state Exp;
branches;
next	1.27;

1.27
date	2010.01.03.23.02.33;	author fgsch;	state Exp;
branches;
next	1.26;

1.26
date	2006.10.13.18.04.07;	author kurt;	state Exp;
branches;
next	1.25;

1.25
date	2006.09.22.18.38.58;	author kurt;	state Exp;
branches;
next	1.24;

1.24
date	2005.10.31.04.39.19;	author fgsch;	state Exp;
branches;
next	1.23;

1.23
date	2004.07.10.06.44.51;	author david;	state Exp;
branches;
next	1.22;

1.22
date	2004.06.11.19.26.13;	author marc;	state Exp;
branches;
next	1.21;

1.21
date	2004.03.07.06.20.57;	author marc;	state Exp;
branches;
next	1.20;

1.20
date	2004.01.15.22.22.52;	author marc;	state Exp;
branches;
next	1.19;

1.19
date	2003.07.10.21.02.44;	author marc;	state Exp;
branches;
next	1.18;

1.18
date	2003.02.05.06.39.46;	author marc;	state Exp;
branches;
next	1.17;

1.17
date	2003.02.05.06.00.58;	author marc;	state Exp;
branches;
next	1.16;

1.16
date	2003.01.30.04.36.27;	author marc;	state Exp;
branches;
next	1.15;

1.15
date	2003.01.19.21.23.45;	author marc;	state Exp;
branches;
next	1.14;

1.14
date	2002.11.12.03.17.16;	author marc;	state Exp;
branches;
next	1.13;

1.13
date	2002.10.21.18.47.44;	author marc;	state Exp;
branches;
next	1.12;

1.12
date	2002.10.12.03.37.45;	author marc;	state Exp;
branches;
next	1.11;

1.11
date	2002.10.07.21.27.15;	author marc;	state Exp;
branches;
next	1.10;

1.10
date	2002.06.23.20.21.22;	author marc;	state Exp;
branches;
next	1.9;

1.9
date	2002.05.03.10.12.02;	author wcobb;	state Exp;
branches;
next	1.8;

1.8
date	2002.02.23.01.25.11;	author art;	state Exp;
branches;
next	1.7;

1.7
date	2001.11.11.20.20.53;	author marc;	state Exp;
branches;
next	1.6;

1.6
date	2001.11.11.01.16.26;	author marc;	state Exp;
branches;
next	1.5;

1.5
date	2001.11.10.02.44.48;	author marc;	state Exp;
branches;
next	1.4;

1.4
date	2001.11.09.00.13.31;	author marc;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.23.04.11.03;	author fgsch;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.22.15.26.59;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.15.14.37.10;	author fgsch;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.08.15.14.37.10;	author fgsch;	state Exp;
branches;
next	;


desc
@@


1.48
log
@Remove all references to "make depend" from regress.
@
text
@# $OpenBSD: Makefile,v 1.47 2016/05/10 03:59:55 guenther Exp $

# disabled because it requires a buggy behavior that uthread had:
#	dup2_race

# disabled because they relu on non-standard behaviour:
#	blocked_close blocked_dup2
#	blocked_join process_kill

# disabled because it relies on non-standard behaviour and the diff to
# fix it caused panics:
#	blocked_fifo

SUBDIR+= barrier blocked_shutdown \
	 cancel cancel2 cancel_wait close close_race closefrom cwd \
	 dlopen \
	 earlysig errno execve fork \
	 group netdb pcap poll preemption preemption_float \
	 pthread_atfork pthread_cond_timedwait pthread_create \
	 pthread_join pthread_kill pthread_mutex \
	 pthread_rwlock pthread_specific \
	 readdir restart \
	 select semaphore setjmp sigdeliver siginfo \
	 siginterrupt signal signals signodefer sigsuspend sigwait sleep \
	 socket spinlock stack stdarg stdio switch system

.if defined(REGRESS_FULL) || make(clean) || make(cleandir) || make(obj)
SUBDIR+= malloc_duel setsockopt
.endif

# Not available or disabled: fcntl, getaddrinfo, pause, pw, sigmask, stdfiles

install:

.PHONY: testall
testall:
	rm -f /tmp/thread-{shared,static,debug}
	make cleandir && make obj && \
	REGRESS_LOG=/tmp/thread-shared make
	(export LDFLAGS="-static ${NOPIE_LDFLAGS}"; make clean && \
	 REGRESS_LOG=/tmp/thread-static make)
	(export DEBUG=-g; make clean && \
	 REGRESS_LOG=/tmp/thread-debug make)
	@@echo "\n\nTest Results:"
	@@(shared=$$(grep FAIL /tmp/thread-shared) || true; \
	  if [ "$$shared" ]; then \
	     echo "** SHARED lib failures:"; echo "$$shared"; echo; \
	  else \
	     echo "No SHARED lib failures"; \
	  fi)
	@@(static=$$(grep FAIL /tmp/thread-static) || true; \
	  if [ "$$static" ]; then \
	     echo "** STATIC lib failures:"; echo "$$static"; echo; \
	  else \
	     echo "No STATIC lib failures"; \
	  fi)
	@@(debug=$$(grep FAIL /tmp/thread-debug) || true; \
	  if [ "$$debug" ]; then \
	     echo "** DEBUG lib failures:"; echo "$$debug"; echo; \
	  else \
	     echo "No DEBUG lib failures"; \
	  fi)

.include <bsd.own.mk>
.include <bsd.subdir.mk>
@


1.47
log
@Test that various calls can be interrupted in a non-threaded process,
then dlopen() libpthread and do that again in a second thread,
and then verify that they're all correctly acting as cancellation points.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.46 2015/09/14 08:02:59 guenther Exp $
d38 1
a38 1
	make cleandir && make obj && make depend && \
@


1.46
log
@Add regress for cancellation of wait/waitpid/wait3/wait4
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.45 2014/07/03 21:12:24 miod Exp $
d15 3
a17 2
	 cancel cancel2 cancel_wait close close_race closefrom cwd earlysig \
	 errno execve fork \
@


1.45
log
@Enter the REGRESS_FULL target subdirs for clean, cleandir and obj targets.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.44 2013/08/01 21:26:30 kettenis Exp $
d15 1
a15 1
	 cancel cancel2 close close_race closefrom cwd earlysig \
@


1.44
log
@Some tests are currently failing.  Only run those if the REGRESS_FULL
variable is set.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.43 2013/06/21 06:47:20 guenther Exp $
d26 1
a26 1
.if defined(REGRESS_FULL)
@


1.43
log
@Add earlysig test to check whether the pthread fork() wrapper
has a critical section where getting a signal causes a hang.  Based on
otto@@ earlysig kernel regress; suggested by miod@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.42 2013/03/25 08:03:18 guenther Exp $
d14 15
a28 10
SUBDIR= barrier blocked_shutdown \
	cancel cancel2 close close_race closefrom cwd earlysig \
	errno execve fork \
	group malloc_duel netdb pcap poll preemption preemption_float \
	pthread_atfork pthread_cond_timedwait pthread_create \
	pthread_join pthread_kill pthread_mutex \
	pthread_rwlock pthread_specific \
	readdir restart select semaphore setjmp setsockopt sigdeliver siginfo \
	siginterrupt signal signals signodefer sigsuspend sigwait sleep \
	socket spinlock stack stdarg stdio switch system
@


1.42
log
@Disable the blocked_{close,dup2,fifo} tests, as we know they fail
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.41 2012/11/06 00:22:26 fgsch Exp $
d15 2
a16 1
	cancel cancel2 close close_race closefrom cwd errno execve fork \
@


1.41
log
@temporarily fix the static tests in testall by using NOPIE_LDFLAGS.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.40 2012/08/19 18:55:55 fgsch Exp $
d6 2
a7 1
# disabled because it relies in non-standard behaviour:
d10 5
a14 1
SUBDIR= barrier blocked_close blocked_dup2 blocked_fifo blocked_shutdown \
@


1.40
log
@document some more disabled tests.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.39 2012/05/03 09:07:17 pirofti Exp $
d28 1
a28 1
	(export LDFLAGS=-static; make clean && \
d52 1
@


1.39
log
@Add pthread spinlock support.

Implementation, documentation and naive regression tests for:
- pthread_spin_init()
- pthread_spin_destroy()
- pthread_spin_lock()
- pthread_spin_trylock()
- pthread_spin_unlock()

Implementation okay guenther@@, documentation okay jmc@@.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.38 2012/04/13 19:04:09 kurt Exp $
d5 3
@


1.38
log
@Remove suspend_np1 from regress build.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.37 2012/04/11 18:39:24 pirofti Exp $
d14 1
a14 1
	socket stack stdarg stdio switch system
@


1.37
log
@Add a simple barrier regression test.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.36 2012/03/19 17:42:40 oga Exp $
d14 1
a14 1
	socket stack stdarg stdio suspend_np1 switch system
@


1.36
log
@Add blocked_fifo.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.35 2012/02/21 13:02:28 kurt Exp $
d6 2
a7 2
SUBDIR= blocked_close blocked_dup2 blocked_fifo blocked_shutdown cancel \
	cancel2 close close_race closefrom cwd errno execve fork \
@


1.35
log
@Add pthread_suspend_np regress test. okay guenther@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.34 2012/02/20 17:06:11 kurt Exp $
d6 2
a7 2
SUBDIR= blocked_close blocked_dup2 blocked_shutdown cancel cancel2 \
	close close_race closefrom cwd errno execve fork \
@


1.34
log
@- remove invalid potions of blocked_* regress tests
- reenable blocked_* regress tests. while this behaivor
  is not specifited by posix, deadlocking is not a reasonable
  behaivor and some ports depend on this to work.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.33 2012/02/20 04:45:09 guenther Exp $
d14 1
a14 1
	socket stack stdarg stdio switch system
@


1.33
log
@Disable the dup2_race test, as it requires a buggy behavior that uthreads
happened to exhibit
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.32 2012/02/20 04:08:52 guenther Exp $
a2 2
# disabled because they assume uthread's particular undefined behavior:
#	blocked_close blocked_dup2 blocked_shutdown
d6 1
a6 1
SUBDIR= cancel cancel2 \
@


1.32
log
@Enable the errno test; add a quick rwlocks test
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.31 2012/02/19 06:47:31 guenther Exp $
d3 1
a3 1
# disabled because they assume uthread's particular undefined behavior;
d5 2
d9 1
a9 1
	close close_race closefrom cwd dup2_race errno execve fork \
@


1.31
log
@Add regress test for stack attributes
Disable some tests that depended on uthread's particular undefined behavior
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.30 2012/01/04 17:38:24 mpi Exp $
d7 1
a7 1
	close close_race closefrom cwd dup2_race execve fork \
d10 2
a11 1
	pthread_join pthread_kill pthread_mutex pthread_specific \
@


1.30
log
@link new semaphore tests
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.29 2011/10/01 10:27:44 fgsch Exp $
d3 4
a6 1
SUBDIR= blocked_close blocked_dup2 blocked_shutdown cancel cancel2 \
d13 1
a13 1
	socket stdarg stdio switch system
@


1.29
log
@enter signals.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.28 2011/09/13 23:50:17 fgsch Exp $
d8 1
a8 1
	readdir restart select setjmp setsockopt sigdeliver siginfo \
@


1.28
log
@first round of tests to check system calls restarting with pthreads.
guenther@@ ok
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.27 2010/01/03 23:02:33 fgsch Exp $
d9 2
a10 2
	siginterrupt signal signodefer sigsuspend sigwait sleep socket \
	stdarg stdio switch system
@


1.27
log
@Use CHECKx macro and enable setsockopt tests.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.26 2006/10/13 18:04:07 kurt Exp $
d3 3
a5 4
SUBDIR= blocked_close blocked_dup2 blocked_shutdown cancel cancel2 close \
	closefrom close_race cwd dup2_race execve fork group \
	malloc_duel netdb pcap poll \
	preemption preemption_float \
d7 4
a10 3
	pthread_join pthread_kill pthread_mutex pthread_specific readdir \
	select setjmp setsockopt signal sigdeliver siginfo signodefer \
	sigsuspend sigwait sleep socket stdarg stdio switch system
@


1.26
log
@add blocked_shutdown
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.25 2006/09/22 18:38:58 kurt Exp $
d9 2
a10 2
	select setjmp signal sigdeliver siginfo signodefer sigsuspend \
	sigwait sleep socket stdarg stdio switch system
@


1.25
log
@add blocked_close, blocked_dup2, close_race and dup2_race
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.24 2005/10/31 04:39:19 fgsch Exp $
d3 2
a4 2
SUBDIR= blocked_close blocked_dup2 cancel cancel2 close closefrom \
	close_race cwd dup2_race execve fork group \
@


1.24
log
@enter pthread_atfork
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.23 2004/07/10 06:44:51 david Exp $
d3 2
a4 1
SUBDIR= cancel cancel2 close closefrom cwd execve fork group \
@


1.23
log
@update comment about disabled tests; ok marc@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.22 2004/06/11 19:26:13 marc Exp $
d5 2
a6 1
	preemption preemption_float pthread_cond_timedwait pthread_create \
@


1.22
log
@remove test that sometimes fails until problem is understood
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.21 2004/03/07 06:20:57 marc Exp $
d10 1
a10 1
# Not available or disabled: fcntl, pause, and pw
@


1.21
log
@remove test that always fails from makefile
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.20 2004/01/15 22:22:52 marc Exp $
d8 1
a8 1
	sigwait sleep socket stdarg stdfiles stdio switch system
@


1.20
log
@regression for pthread version of closefrom
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.19 2003/07/10 21:02:44 marc Exp $
d7 1
a7 1
	select setjmp signal sigdeliver siginfo sigmask signodefer sigsuspend \
@


1.19
log
@Add sigmask test
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.18 2003/02/05 06:39:46 marc Exp $
d3 2
a4 1
SUBDIR= cancel cancel2 close cwd execve fork group malloc_duel netdb pcap poll \
@


1.18
log
@clean up the testall target
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.17 2003/02/05 06:00:58 marc Exp $
d6 1
a6 1
	select setjmp signal sigdeliver siginfo signodefer sigsuspend \
@


1.17
log
@add stdfiles test for proper fd handling
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.16 2003/01/30 04:36:27 marc Exp $
d16 1
a16 1
	make clean && make obj && make depend && \
d18 1
a18 1
	(export COPTS=-static; make clean && make obj && make depend && \
d20 1
a20 1
	(export DEBUG=-g; make clean && make obj && make depend && \
@


1.16
log
@add "testall" target for development testing
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.15 2003/01/19 21:23:45 marc Exp $
d7 1
a7 1
	sigwait sleep socket stdarg stdio switch system
@


1.15
log
@add test to ensure select can be cancelled.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.14 2002/11/12 03:17:16 marc Exp $
d9 1
a9 1
# Not available or disabled: fcntl, pause, preemption_float and pw
d12 29
@


1.14
log
@
dueling mallocs -- test for proper serialization when multiple threads
try to malloc at the same time
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.13 2002/10/21 18:47:44 marc Exp $
d3 1
a3 1
SUBDIR= cancel close cwd execve fork group malloc_duel netdb pcap poll \
@


1.13
log
@Add new tests
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.12 2002/10/12 03:37:45 marc Exp $
d3 1
a3 1
SUBDIR= cancel close cwd execve fork group netdb pcap poll \
@


1.12
log
@signal deliver to blocked thread test
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.11 2002/10/07 21:27:15 marc Exp $
d5 3
a7 3
	pthread_join pthread_mutex pthread_specific readdir select \
	setjmp signal sigdeliver siginfo sigsuspend sigwait sleep \
	socket stdarg stdio switch system
@


1.11
log
@add pthread siginfo support test
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.10 2002/06/23 20:21:22 marc Exp $
d6 2
a7 2
	setjmp signal siginfo sigsuspend sigwait sleep socket stdarg stdio \
	switch system
@


1.10
log
@
Fix pthread floatting point preemption test and enable it.  Next
step is to figure out why it fails on i386, yet works on sparc
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.9 2002/05/03 10:12:02 wcobb Exp $
d6 1
a6 1
	setjmp signal sigsuspend sigwait sleep socket stdarg stdio \
@


1.9
log
@+pthread_specific

ok fgsch@@.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.8 2002/02/23 01:25:11 art Exp $
d4 1
a4 1
	preemption pthread_cond_timedwait pthread_create \
@


1.8
log
@no more need to explicitly specify regress: _SUBDIRUSE targets anymore.
XXX - what about the install targets?
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.7 2001/11/11 20:20:53 marc Exp $
d5 3
a7 2
	pthread_join pthread_mutex readdir select setjmp signal \
	sigsuspend sigwait sleep socket stdarg stdio switch system
@


1.7
log
@bring back test, this time in the public domain
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.6 2001/11/11 01:16:26 marc Exp $
a8 2

regress: _SUBDIRUSE
@


1.6
log
@remove files that have a copyright theo doesn't like
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.5 2001/11/10 02:44:48 marc Exp $
d3 1
a3 1
SUBDIR= cancel close cwd execve fork group netdb poll \
@


1.5
log
@Add a pcap/pthread test as it was reported that using
libpcap blocked all threads.   That no longer seems to be a problem
as this test passes using the latest threads lib.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.4 2001/11/09 00:13:31 marc Exp $
d3 1
a3 1
SUBDIR= cancel close cwd execve fork group netdb pcap poll \
@


1.4
log
@another pthread regression test: system/waitpid/wait4
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.3 2001/08/23 04:11:03 fgsch Exp $
d3 1
a3 1
SUBDIR= cancel close cwd execve fork group netdb poll \
@


1.3
log
@Uncomment SUBDIR in libc_r/Makefile and remove libc_r from SUBDIR.
Makes easy to test without actually doing the regress in make build.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.2 2001/08/22 15:26:59 deraadt Exp $
d6 1
a6 1
	sigsuspend sigwait sleep socket stdarg stdio switch
@


1.2
log
@You are not allowed to break entire architectures
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.1.1.1 2001/08/15 14:37:10 fgsch Exp $
d3 4
a6 4
#SUBDIR= cancel close cwd execve fork group netdb poll \
#	preemption pthread_cond_timedwait pthread_create \
#	pthread_join pthread_mutex readdir select setjmp signal \
#	sigsuspend sigwait sleep socket stdarg stdio switch
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
# $OpenBSD$
d3 4
a6 4
SUBDIR= cancel close cwd execve fork group netdb poll \
	preemption pthread_cond_timedwait pthread_create \
	pthread_join pthread_mutex readdir select setjmp signal \
	sigsuspend sigwait sleep socket stdarg stdio switch
@


1.1.1.1
log
@Regression tests for libc_r (pthreads) library.
Thanks to pval@@ for resolving the license stuff.
@
text
@@
