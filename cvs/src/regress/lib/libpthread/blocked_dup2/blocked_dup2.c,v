head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.20
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.22
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.18
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.8
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.16
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.14
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.12
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.10
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.6
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.22
	OPENBSD_5_0:1.3.0.20
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.18
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.16
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.12
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.14
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.10
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.8
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.6
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.4
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.2
	OPENBSD_4_1_BASE:1.3;
locks; strict;
comment	@ * @;


1.4
date	2012.02.20.17.06.11;	author kurt;	state Exp;
branches;
next	1.3;

1.3
date	2006.10.06.13.11.58;	author kurt;	state Exp;
branches;
next	1.2;

1.2
date	2006.10.03.16.06.52;	author kurt;	state Exp;
branches;
next	1.1;

1.1
date	2006.09.22.18.31.06;	author kurt;	state Exp;
branches;
next	;


desc
@@


1.4
log
@- remove invalid potions of blocked_* regress tests
- reenable blocked_* regress tests. while this behaivor
  is not specifited by posix, deadlocking is not a reasonable
  behaivor and some ports depend on this to work.
@
text
@/*	$OpenBSD: blocked_dup2.c,v 1.3 2006/10/06 13:11:58 kurt Exp $	*/
/*
 * Copyright (c) 2006 Kurt Miller <kurt@@intricatesoftware.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * Test dup2() racing with other threads using the same file
 * descriptor, with some of them blocking on data that will never
 * arrive.
 */

#include <pthread.h>
#include <unistd.h>
#include <fcntl.h>
#include <time.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include "test.h"

#define ITERATIONS	100
#define WAITING_THREADS	5

static void *
deadlock_detector(void *arg)
{
	sleep(15);
	PANIC("deadlock detected");
}

static void *
waiting_read(void *arg)
{
	int fd = *(int *)arg;
	struct sockaddr remote_addr;
	char readBuf;
	int n, remote_addr_len = sizeof(struct sockaddr);

	n = recvfrom(fd, &readBuf, 1, 0, &remote_addr, &remote_addr_len);

	if (n == -1)
		return ((caddr_t)NULL + errno);
	else
		return (NULL);
}

int
main(int argc, char *argv[])
{
	pthread_t waiting_threads[WAITING_THREADS];
	pthread_t deadlock_thread;
	struct sockaddr_in addr;
	int fd, newfd, i, j;
	void *value_ptr;
	struct timespec rqtp;

	rqtp.tv_sec = 0;
	rqtp.tv_nsec = 1000000;

	bzero((char *) &addr, sizeof addr);
	addr.sin_family = AF_INET;
	addr.sin_addr.s_addr = htonl(INADDR_LOOPBACK);
	addr.sin_port = htons(0);

	CHECKr(pthread_create(&deadlock_thread, NULL,
	    deadlock_detector, NULL));

	CHECKe(fd = socket(AF_INET, SOCK_DGRAM, 0));
 	CHECKr(bind(fd, (struct sockaddr *)&addr, sizeof(addr)));

	CHECKe(newfd = socket(AF_INET, SOCK_DGRAM, 0));
 	CHECKr(bind(newfd, (struct sockaddr *)&addr, sizeof(addr)));

	for (i = 0; i < ITERATIONS; i++) {
		for (j = 0; j < WAITING_THREADS; j++)
			CHECKr(pthread_create(&waiting_threads[j], NULL,
			    waiting_read, (void *)&newfd));
		nanosleep(&rqtp, NULL);
		CHECKe(dup2(fd, newfd));
		for (j = 0; j < WAITING_THREADS; j++) {
			CHECKr(pthread_join(waiting_threads[j], &value_ptr));
			ASSERT(value_ptr == (void *)EBADF);
		}
	}	
	SUCCEED;
}
@


1.3
log
@eliminate warnings on 64bit archs
@
text
@d1 1
a1 1
/*	$OpenBSD: blocked_dup2.c,v 1.2 2006/10/03 16:06:52 kurt Exp $	*/
a33 1
#define BUSY_THREADS	5
d39 1
a39 1
	sleep(60);
a58 11
static void *
busy_thread(void *arg)
{
	int fd = *(int *)arg;

	/* loop until error */
	while(fcntl(fd, F_GETFD, NULL) != -1);

	return ((caddr_t)NULL + errno);
}

a61 1
	pthread_t busy_threads[BUSY_THREADS];
a86 3
		for (j = 0; j < BUSY_THREADS; j++)
			CHECKr(pthread_create(&busy_threads[j], NULL,
			    busy_thread, (void *)&newfd));
a91 4
		for (j = 0; j < BUSY_THREADS; j++) {
			CHECKr(pthread_join(busy_threads[j], &value_ptr));
			ASSERT(value_ptr == (void *)EBADF);
		}
@


1.2
log
@correct check for proper return value of dup2
@
text
@d1 1
a1 1
/*	$OpenBSD: blocked_dup2.c,v 1.1 2006/09/22 18:31:06 kurt Exp $	*/
d47 1
a47 1
	int fd = (int)arg;
d55 1
a55 1
		return ((void *)errno);
d57 1
a57 1
		return (0);
d63 1
a63 1
	int fd = (int)arg;
d68 1
a68 1
	return ((void *)errno);
d102 1
a102 1
			    busy_thread, (void *)newfd));
d105 1
a105 1
			    waiting_read, (void *)newfd));
@


1.1
log
@Test dup2() racing with other threads using the same file
descriptor, with some of them blocking on data that will never
arrive.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d107 1
a107 1
		CHECKr(dup2(fd, newfd));
@

