head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.24
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.20
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.10
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.18
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.16
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.14
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.12
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.8
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.6
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.4
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	OPENBSD_5_0:1.4.0.32
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.30
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.28
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.24
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.26
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.22
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.20
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.18
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.16
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.14
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.12
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.10
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.8
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.6
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.4
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.2
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.2
	OPENBSD_3_3_BASE:1.2;
locks; strict;
comment	@ * @;


1.5
date	2011.11.25.00.31.43;	author guenther;	state Exp;
branches;
next	1.4;

1.4
date	2003.09.18.01.59.58;	author henning;	state Exp;
branches;
next	1.3;

1.3
date	2003.07.31.21.48.04;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2002.12.13.20.21.04;	author marc;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.15.14.37.11;	author fgsch;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.08.15.14.37.11;	author fgsch;	state Exp;
branches;
next	;


desc
@@


1.5
log
@The execve()-vs-threads test should test not just that the thread library
doesn't blow up but also that (1) a failed execve doesn't kill other
threads, and (2) a successful execve does make other threads vanish
@
text
@/*	$OpenBSD: execve.c,v 1.4 2003/09/18 01:59:58 henning Exp $	*/
/*
 * Copyright (c) 1993, 1994, 1995, 1996 by Chris Provenzano and contributors, 
 * proven@@mit.edu All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Chris Provenzano,
 *	the University of California, Berkeley, and contributors.
 * 4. Neither the name of Chris Provenzano, the University, nor the names of
 *   contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY CHRIS PROVENZANO AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL CHRIS PROVENZANO, THE REGENTS OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */ 

/*
 * Copyright (c) 1994 by Chris Provenzano, proven@@athena.mit.edu
 *
 * Test execve() and dup2() calls.
 */

#include <pthread.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>
#include <stdio.h>
#include "test.h"

extern char **environ;
char *bad_argv[] = {
	"/NO SUCH FILE",
	NULL
};
char *new_argv[] = {
	"/bin/sh",
	"-c",
	"sleep 3; echo 'This line should appear after the execve'",
	NULL
};

char * should_succeed = "This line should be displayed\n";

void *
other(void *arg)
{
	sleep(2);
	printf("%s\n", (char *)arg);
	return NULL;
}

int
main(int argc, char *argv[])
{
	int fd;
	pthread_t t1;

	printf("This is the first message\n");
	if (isatty(STDOUT_FILENO)) {
		char *ttynm;

		CHECKn(ttynm = ttyname(STDOUT_FILENO));
		printf("tty is %s\n", ttynm);
		CHECKe(fd = open(ttynm, O_RDWR));
	} else {
		printf("IGNORED: stdout is not a tty: this test needs a tty\n");
		SUCCEED;
	}

	CHECKn(printf("This output is necessary to set the stdout fd to NONBLOCKING\n"));

	/* create another thread to make things interesting */
	CHECKr(pthread_create(&t1, NULL, other, "Should see this too"));

	/* do a dup2 */
	CHECKe(dup2(fd, STDOUT_FILENO));
	CHECKe(write(STDOUT_FILENO, should_succeed,
	    (size_t)strlen(should_succeed)));
	CHECKn(execve(bad_argv[0], bad_argv, environ));
	pthread_join(t1, NULL);
	CHECKr(pthread_create(&t1, NULL, other, "failed!"));
	sleep(1);
	CHECKe(execve(new_argv[0], new_argv, environ));
	DIE(errno, "execve %s", new_argv[0]);
}

@


1.4
log
@from marc:

brad@@ reported that the libpthread execve regression test failed on
alpha and macppc.   The test was somewhat bogus and depended upon the
compiler picking the global when a global and local were named the
same.   Anyway, this patch should fix it.  Tested on Henning's alpha
(bet he forgot he gave me an account :-), i386, and sparc64.
@
text
@d1 1
a1 1
/*	$OpenBSD: execve.c,v 1.3 2003/07/31 21:48:04 deraadt Exp $	*/
d49 4
d54 3
a56 2
	"/bin/echo",
	"This line should appear after the execve",
d62 8
d74 1
d90 3
d97 4
d104 1
@


1.3
log
@various cleanups; david says results are same
@
text
@d1 1
a1 1
/*	$OpenBSD: execve.c,v 1.2 2002/12/13 20:21:04 marc Exp $	*/
d49 1
a49 1
char *argv[] = {
d80 2
a81 2
	CHECKe(execve(argv[0], argv, environ));
	DIE(errno, "execve %s", argv[0]);
@


1.2
log
@don't fail if stdout is not a tty.
Print a test ignored message, instead.
@
text
@d1 1
a1 1
/*	$OpenBSD: execve.c,v 1.1.1.1 2001/08/15 14:37:11 fgsch Exp $	*/
d58 1
a58 1
main()
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD: test_execve.c,v 1.5 2000/10/04 05:50:58 d Exp $	*/
d69 4
a72 2
	} else
		PANIC("stdout is not a tty: this test needs a tty");
@


1.1.1.1
log
@Regression tests for libc_r (pthreads) library.
Thanks to pval@@ for resolving the license stuff.
@
text
@@
