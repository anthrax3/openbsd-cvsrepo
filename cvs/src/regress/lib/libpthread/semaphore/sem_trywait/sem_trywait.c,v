head	1.2;
access;
symbols
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.2.0.22
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.18
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.8
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.16
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.14
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.12
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.10
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.6
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	mpi_20120104:1.1.1.1
	mpi:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2012.03.03.09.36.26;	author guenther;	state Exp;
branches;
next	1.1;

1.1
date	2012.01.04.17.36.40;	author mpi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.01.04.17.36.40;	author mpi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@While we guarantee that a zero-filled sem_t variable will trigger
EINVAL errors, a sem_t on the stack may have garbage, so make the
tests portable by moving the sem_t from function to file scope.

problem found by miod@@
@
text
@/*	$OpenBSD: sem_trywait.c,v 1.1.1.1 2012/01/04 17:36:40 mpi Exp $	*/
/*
 * Martin Pieuchot <mpi@@openbsd.org>, 2011. Public Domain.
 */

#include <errno.h>
#include <unistd.h>
#include <semaphore.h>
#include "test.h"

sem_t sem;

int
main(int argc, char **argv)
{
	int val;

	CHECKn(sem_trywait(&sem));
	ASSERT(errno == EINVAL);

	CHECKr(sem_init(&sem, 0, 0));

	CHECKn(sem_trywait(&sem));
	ASSERT(errno == EAGAIN);

	CHECKr(sem_post(&sem));
	CHECKr(sem_trywait(&sem));

	CHECKe(sem_getvalue(&sem, &val));
	ASSERT(val == 0);

	CHECKe(sem_destroy(&sem));

	SUCCEED;
}
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d11 2
a15 1
	sem_t sem;
@


1.1.1.1
log
@Basic semaphore tests

ok guenther@@
@
text
@@
