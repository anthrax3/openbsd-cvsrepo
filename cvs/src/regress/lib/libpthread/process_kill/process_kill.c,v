head	1.1;
access;
symbols
	OPENBSD_6_2_BASE:1.1
	OPENBSD_6_1:1.1.0.22
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.18
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.8
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.16
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.14
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.12
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.10
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.6
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.4
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.2
	OPENBSD_5_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.1
date	2012.03.07.22.01.29;	author fgsch;	state Exp;
branches;
next	;


desc
@@


1.1
log
@another questionable hang.
@
text
@/*	$OpenBSD$	*/
/*
 * Federico G. Schwindt <fgsch@@openbsd.org>, 2012. Public Domain.
 */

#include <pthread.h>
#include <signal.h>
#include <stdlib.h>
#include <unistd.h>
#include "test.h"

void
deadlock(int sig)
{
	PANIC("deadlock detected");
}

void
handler(int sig)
{

}

void *
killer(void *arg)
{
	sleep(2);
	CHECKe(kill(getpid(), SIGUSR1)); 
	return (NULL);
}

int
main(int argc, char **argv)
{
	pthread_t t;

	ASSERT(signal(SIGALRM, deadlock) != SIG_ERR);
	ASSERT(signal(SIGUSR1, handler) != SIG_ERR);
	CHECKr(pthread_create(&t, NULL, killer, NULL));
	alarm(5);
	sleep(15);
	CHECKr(pthread_join(t, NULL));
	SUCCEED;
}
@
