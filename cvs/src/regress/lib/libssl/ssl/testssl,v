head	1.10;
access;
symbols
	OPENBSD_6_1:1.10.0.8
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.4
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.8.0.6
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.4
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.3.0.4
	OPENBSD_5_6_BASE:1.3;
locks; strict;
comment	@# @;


1.10
date	2015.09.27.18.20.18;	author bcook;	state Exp;
branches;
next	1.9;
commitid	o1zgNjysdfJnOCDH;

1.9
date	2015.08.27.07.19.17;	author doug;	state Exp;
branches;
next	1.8;
commitid	y8QCM8pr2cMj2Ngk;

1.8
date	2014.12.12.12.23.35;	author jsing;	state Exp;
branches;
next	1.7;
commitid	gxqSStuVgiX4ci8o;

1.7
date	2014.12.10.15.06.50;	author jsing;	state Exp;
branches;
next	1.6;
commitid	0sJBSZowonz5bZNe;

1.6
date	2014.12.06.13.13.21;	author jsing;	state Exp;
branches;
next	1.5;
commitid	mDzC6xMa1PoMJbIf;

1.5
date	2014.12.03.22.33.35;	author bcook;	state Exp;
branches;
next	1.4;
commitid	8VdwSm9GBFBafIpi;

1.4
date	2014.10.13.13.42.39;	author jsing;	state Exp;
branches;
next	1.3;
commitid	ptBwbKwDLp8yGHNE;

1.3
date	2014.07.11.10.45.17;	author jsing;	state Exp;
branches;
next	1.2;
commitid	ZBL0dkCpxb9HxtJb;

1.2
date	2014.06.21.16.48.05;	author jsing;	state Exp;
branches;
next	1.1;
commitid	GxgcHXireXkTV4Nf;

1.1
date	2014.05.24.14.56.32;	author jsing;	state Exp;
branches;
next	;


desc
@@


1.10
log
@check if openssl(1) actually works before proceeding

It was possible for this test to pass even if the openssl command itself was
missing.
@
text
@#!/bin/sh

key="$1"
cert="$2"
CA="-CAfile $3"
ssltest="${4-./ssltest} -key $key -cert $cert -c_key $key -c_cert $cert"
openssl=${5-openssl}
extra="$6"

$openssl version || exit 1

if $openssl x509 -in $cert -text -noout | fgrep 'DSA Public Key' >/dev/null; then
  dsa_cert=YES
else
  dsa_cert=NO
fi

#############################################################################

echo test sslv2/sslv3
$ssltest $extra || exit 1

echo test sslv2/sslv3 with server authentication
$ssltest -server_auth $CA $extra || exit 1

echo test sslv2/sslv3 with client authentication
$ssltest -client_auth $CA $extra || exit 1

echo test sslv2/sslv3 with both client and server authentication
$ssltest -server_auth -client_auth $CA $extra || exit 1

echo test sslv2/sslv3 via BIO pair
$ssltest $extra || exit 1

if [ $dsa_cert = NO ]; then
  echo 'test sslv2/sslv3 w/o (EC)DHE via BIO pair'
  $ssltest -bio_pair -no_dhe -no_ecdhe $extra || exit 1
fi

echo test sslv2/sslv3 with 1024bit DHE via BIO pair
$ssltest -bio_pair -dhe1024dsa -v $extra || exit 1

echo test sslv2/sslv3 with server authentication
$ssltest -bio_pair -server_auth $CA $extra || exit 1

echo test sslv2/sslv3 with client authentication via BIO pair
$ssltest -bio_pair -client_auth $CA $extra || exit 1

echo test sslv2/sslv3 with both client and server authentication via BIO pair
$ssltest -bio_pair -server_auth -client_auth $CA $extra || exit 1

echo test sslv2/sslv3 with both client and server authentication via BIO pair and app verify
$ssltest -bio_pair -server_auth -client_auth -app_verify $CA $extra || exit 1

echo "Testing ciphersuites"
for protocol in TLSv1.2; do
  echo "Testing ciphersuites for $protocol"
  for cipher in `$openssl ciphers "$protocol+aRSA" | tr ':' ' '`; do
    echo "Testing $cipher"
    $ssltest -cipher $cipher
    if [ $? -ne 0 ] ; then
      echo "Failed $cipher"
      exit 1
    fi
  done
done

#############################################################################

if $openssl no-dh; then
  echo skipping anonymous DH tests
else
  echo test tls1 with 1024bit anonymous DH, multiple handshakes
  $ssltest -v -bio_pair -tls1 -cipher ADH -dhe1024dsa -num 10 -f -time $extra || exit 1
fi

#if $openssl no-rsa; then
#  echo skipping RSA tests
#else
#  echo 'test tls1 with 1024bit RSA, no (EC)DHE, multiple handshakes'
#  ./ssltest -v -bio_pair -tls1 -cert ../apps/server2.pem -no_dhe -no_ecdhe -num 10 -f -time $extra || exit 1
#
#  if $openssl no-dh; then
#    echo skipping RSA+DHE tests
#  else
#    echo test tls1 with 1024bit RSA, 1024bit DHE, multiple handshakes
#    ./ssltest -v -bio_pair -tls1 -cert ../apps/server2.pem -dhe1024dsa -num 10 -f -time $extra || exit 1
#  fi
#fi

#
# DTLS tests
#

echo test dtlsv1
$ssltest -dtls1 $extra || exit 1

echo test dtlsv1 with server authentication
$ssltest -dtls1 -server_auth $CA $extra || exit 1

echo test dtlsv1 with client authentication
$ssltest -dtls1 -client_auth $CA $extra || exit 1

echo test dtlsv1 with both client and server authentication
$ssltest -dtls1 -server_auth -client_auth $CA $extra || exit 1

echo "Testing DTLS ciphersuites"
for protocol in SSLv3; do
  echo "Testing ciphersuites for $protocol"
  for cipher in `$openssl ciphers "RSA+$protocol" | tr ':' '\n' |
    grep -v RC4`; do
    echo "Testing $cipher"
    $ssltest -cipher $cipher -dtls1
    if [ $? -ne 0 ] ; then
      echo "Failed $cipher"
      exit 1
    fi
  done
done

#
# Next Protocol Negotiation tests
#
echo "Testing NPN..."
$ssltest -bio_pair -tls1 -npn_client || exit 1
$ssltest -bio_pair -tls1 -npn_server || exit 1
$ssltest -bio_pair -tls1 -npn_server_reject || exit 1
$ssltest -bio_pair -tls1 -npn_client -npn_server_reject || exit 1
$ssltest -bio_pair -tls1 -npn_client -npn_server || exit 1
$ssltest -bio_pair -tls1 -npn_client -npn_server -num 2 || exit 1
$ssltest -bio_pair -tls1 -npn_client -npn_server -num 2 -reuse || exit 1

#
# ALPN tests
#
echo "Testing ALPN..."
$ssltest -bio_pair -tls1 -alpn_client foo -alpn_server bar || exit 1
$ssltest -bio_pair -tls1 -alpn_client foo -alpn_server foo \
  -alpn_expected foo || exit 1
$ssltest -bio_pair -tls1 -alpn_client foo,bar -alpn_server foo \
  -alpn_expected foo || exit 1
$ssltest -bio_pair -tls1 -alpn_client bar,foo -alpn_server foo \
  -alpn_expected foo || exit 1
$ssltest -bio_pair -tls1 -alpn_client bar,foo -alpn_server foo,bar \
  -alpn_expected foo || exit 1
$ssltest -bio_pair -tls1 -alpn_client bar,foo -alpn_server bar,foo \
  -alpn_expected bar || exit 1
$ssltest -bio_pair -tls1 -alpn_client foo,bar -alpn_server bar,foo \
  -alpn_expected bar || exit 1
$ssltest -bio_pair -tls1 -alpn_client baz -alpn_server bar,foo || exit 1
@


1.9
log
@Remove SSLv3 support from LibreSSL regression tests.
@
text
@d10 2
@


1.8
log
@Increase cipher suite test coverage by including all cipher suites that
use RSA authentication, rather than only those that use RSA key exchange.
@
text
@a17 12
echo test sslv3
$ssltest -ssl3 $extra || exit 1

echo test sslv3 with server authentication
$ssltest -ssl3 -server_auth $CA $extra || exit 1

echo test sslv3 with client authentication
$ssltest -ssl3 -client_auth $CA $extra || exit 1

echo test sslv3 with both client and server authentication
$ssltest -ssl3 -server_auth -client_auth $CA $extra || exit 1

a29 12
echo test sslv3 via BIO pair
$ssltest -bio_pair -ssl3 $extra || exit 1

echo test sslv3 with server authentication via BIO pair
$ssltest -bio_pair -ssl3 -server_auth $CA $extra || exit 1

echo test sslv3 with client authentication via BIO pair
$ssltest -bio_pair -ssl3 -client_auth $CA $extra || exit 1

echo test sslv3 with both client and server authentication via BIO pair
$ssltest -bio_pair -ssl3 -server_auth -client_auth $CA $extra || exit 1

d54 1
a54 1
for protocol in SSLv3 TLSv1.2; do
d58 1
a58 5
    prot=""
    if [ $protocol = "SSLv3" ] ; then
      prot="-ssl3"
    fi
    $ssltest -cipher $cipher $prot
@


1.7
log
@Add regress for ALPN.

Based on OpenSSL.
@
text
@d80 1
a80 1
  for cipher in `$openssl ciphers "RSA+$protocol" | tr ':' ' '`; do
d88 2
a89 2
	  echo "Failed $cipher"
	  exit 1
d141 2
a142 2
	  echo "Failed $cipher"
	  exit 1
@


1.6
log
@The -ssl2 flag does nothing - remove the flag and any tests that were
using it.
@
text
@d158 19
@


1.5
log
@Allow overriding the path to the testssl and openssl binaries.

This is needed by the portable tree to point directly to the newly-built
binaries when running unit tests.

discussed with jsing@@ and others
@
text
@a17 14
echo test sslv2
$ssltest -ssl2 $extra || exit 1

echo test sslv2 with server authentication
$ssltest -ssl2 -server_auth $CA $extra || exit 1

if [ $dsa_cert = NO ]; then
  echo test sslv2 with client authentication
  $ssltest -ssl2 -client_auth $CA $extra || exit 1

  echo test sslv2 with both client and server authentication
  $ssltest -ssl2 -server_auth -client_auth $CA $extra || exit 1
fi

a41 14
echo test sslv2 via BIO pair
$ssltest -bio_pair -ssl2 $extra || exit 1

echo test sslv2 with server authentication via BIO pair
$ssltest -bio_pair -ssl2 -server_auth $CA $extra || exit 1

if [ $dsa_cert = NO ]; then
  echo test sslv2 with client authentication via BIO pair
  $ssltest -bio_pair -ssl2 -client_auth $CA $extra || exit 1

  echo test sslv2 with both client and server authentication via BIO pair
  $ssltest -bio_pair -ssl2 -server_auth -client_auth $CA $extra || exit 1
fi

d78 1
a78 1
for protocol in TLSv1.2 SSLv3; do
@


1.4
log
@Add NPN regress tests from OpenSSL. However, unlike OpenSSL, actually exit
with a failure if the NPN verification fails.
@
text
@d6 3
a8 1
extra="$4"
d10 1
a10 3
ssltest="./ssltest -key $key -cert $cert -c_key $key -c_cert $cert"

if openssl x509 -in $cert -text -noout | fgrep 'DSA Public Key' >/dev/null; then
d108 1
a108 1
  for cipher in `openssl ciphers "RSA+$protocol" | tr ':' ' '`; do
d124 1
a124 1
if openssl no-dh; then
d131 1
a131 1
#if openssl no-rsa; then
d137 1
a137 1
#  if openssl no-dh; then
d164 1
a164 1
  for cipher in `openssl ciphers "RSA+$protocol" | tr ':' '\n' |
@


1.3
log
@Remove PSK from the ssl regress.
@
text
@d146 1
a146 1
# DTLS
d174 12
@


1.2
log
@Add DTLS support to ssltest and wire up some regress tests.

ok miod@@
@
text
@a144 16
echo test tls1 with PSK
$ssltest -tls1 -cipher PSK -psk abc123 $extra || exit 1

echo test tls1 with PSK via BIO pair
$ssltest -bio_pair -tls1 -cipher PSK -psk abc123 $extra || exit 1

if openssl no-srp; then
  echo skipping SRP tests
else
  echo test tls1 with SRP
  $ssltest -tls1 -cipher SRP -srpuser test -srppass abc123

  echo test tls1 with SRP via BIO pair
  $ssltest -bio_pair -tls1 -cipher SRP -srpuser test -srppass abc123
fi

@


1.1
log
@Move ssltest.c to a regress test.
@
text
@d161 29
a189 1
exit 0
@

