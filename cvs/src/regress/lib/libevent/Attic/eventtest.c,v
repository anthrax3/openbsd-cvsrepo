head	1.13;
access;
symbols
	OPENBSD_4_7:1.12.0.6
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.8
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.4
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.2
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.10.0.2
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.9.0.8
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.6
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.4
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.2
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.6.0.2
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.5.0.2
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.3.0.4
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.2
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.2.0.2
	OPENBSD_3_4_BASE:1.2;
locks; strict;
comment	@ * @;


1.13
date	2010.06.26.23.31.11;	author nicm;	state dead;
branches;
next	1.12;

1.12
date	2008.05.04.21.14.32;	author brad;	state Exp;
branches;
next	1.11;

1.11
date	2008.05.02.06.09.11;	author brad;	state Exp;
branches;
next	1.10;

1.10
date	2007.09.19.02.06.45;	author todd;	state Exp;
branches;
next	1.9;

1.9
date	2006.01.23.20.19.34;	author brad;	state Exp;
branches;
next	1.8;

1.8
date	2005.12.25.02.51.24;	author brad;	state Exp;
branches;
next	1.7;

1.7
date	2005.12.18.03.57.02;	author brad;	state Exp;
branches;
next	1.6;

1.6
date	2005.04.22.01.28.04;	author brad;	state Exp;
branches;
next	1.5;

1.5
date	2004.12.22.00.54.39;	author david;	state Exp;
branches;
next	1.4;

1.4
date	2004.11.25.16.48.47;	author brad;	state Exp;
branches;
next	1.3;

1.3
date	2004.01.05.19.23.04;	author markus;	state Exp;
branches;
next	1.2;

1.2
date	2003.07.31.21.48.04;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2003.06.15.16.34.53;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.13
log
@New libevent regression tests from upstream.

help and ok phessler
@
text
@/*	$OpenBSD: eventtest.c,v 1.12 2008/05/04 21:14:32 brad Exp $	*/
/*	$NetBSD: eventtest.c,v 1.3 2004/08/07 21:09:47 provos Exp $	*/

/*
 * Copyright (c) 2003, 2004 Niels Provos <provos@@citi.umich.edu>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/tree.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/queue.h>
#include <sys/socket.h>
#include <sys/signal.h>
#include <unistd.h>
#include <netdb.h>
#include <fcntl.h>
#include <signal.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <errno.h>

#include <event.h>

#include "event-internal.h"

static int pair[2];
static int test_ok;
static int called;
static char wbuf[4096];
static char rbuf[4096];
static int woff;
static int roff;
static int usepersist;
static struct timeval tset;
static struct timeval tcalled;
static struct event_base *event_base;

#define TEST1	"this is a test"
#define SECONDS	1

void
simple_read_cb(int fd, short event, void *arg)
{
	char buf[256];
	int len;

	len = read(fd, buf, sizeof(buf));

	if (len) {
		if (!called) {
			if (event_add(arg, NULL) == -1)
				exit(1);
		}
	} else if (called == 1)
		test_ok = 1;

	called++;
}

void
simple_write_cb(int fd, short event, void *arg)
{
	int len;

	len = write(fd, TEST1, strlen(TEST1) + 1);
	if (len == -1)
		test_ok = 0;
	else
		test_ok = 1;
}

void
multiple_write_cb(int fd, short event, void *arg)
{
	struct event *ev = arg;
	int len;

	len = 128;
	if (woff + len >= sizeof(wbuf))
		len = sizeof(wbuf) - woff;

	len = write(fd, wbuf + woff, len);
	if (len == -1) {
		fprintf(stderr, "%s: write\n", __func__);
		if (usepersist)
			event_del(ev);
		return;
	}

	woff += len;

	if (woff >= sizeof(wbuf)) {
		shutdown(fd, SHUT_WR);
		if (usepersist)
			event_del(ev);
		return;
	}

	if (!usepersist) {
		if (event_add(ev, NULL) == -1)
			exit(1);
	}
}

void
multiple_read_cb(int fd, short event, void *arg)
{
	struct event *ev = arg;
	int len;

	len = read(fd, rbuf + roff, sizeof(rbuf) - roff);
	if (len == -1)
		fprintf(stderr, "%s: read\n", __func__);
	if (len <= 0) {
		if (usepersist)
			event_del(ev);
		return;
	}

	roff += len;
	if (!usepersist) {
		if (event_add(ev, NULL) == -1) 
			exit(1);
	}
}

void
timeout_cb(int fd, short event, void *arg)
{
	struct timeval tv;
	int diff;

	gettimeofday(&tcalled, NULL);
	if (timercmp(&tcalled, &tset, >))
		timersub(&tcalled, &tset, &tv);
	else
		timersub(&tset, &tcalled, &tv);

	diff = tv.tv_sec*1000 + tv.tv_usec/1000 - SECONDS * 1000;
	if (diff < 0)
		diff = -diff;

	if (diff < 100)
		test_ok = 1;
}

void
signal_cb(int fd, short event, void *arg)
{
	struct event *ev = arg;

	signal_del(ev);
	test_ok = 1;
}

struct both {
	struct event ev;
	int nread;
};

void
combined_read_cb(int fd, short event, void *arg)
{
	struct both *both = arg;
	char buf[128];
	int len;

	len = read(fd, buf, sizeof(buf));
	if (len == -1)
		fprintf(stderr, "%s: read\n", __func__);
	if (len <= 0)
		return;

	both->nread += len;
	if (event_add(&both->ev, NULL) == -1)
		exit(1);
}

void
combined_write_cb(int fd, short event, void *arg)
{
	struct both *both = arg;
	char buf[128];
	int len;

	len = sizeof(buf);
	if (len > both->nread)
		len = both->nread;

	len = write(fd, buf, len);
	if (len == -1)
		fprintf(stderr, "%s: write\n", __func__);
	if (len <= 0) {
		shutdown(fd, SHUT_WR);
		return;
	}

	both->nread -= len;
	if (event_add(&both->ev, NULL) == -1)
		exit(1);
}

/* Test infrastructure */

int
setup_test(char *name)
{

	fprintf(stdout, "%s", name);

	if (socketpair(AF_UNIX, SOCK_STREAM, 0, pair) == -1) {
		fprintf(stderr, "%s: socketpair\n", __func__);
		exit(1);
	}

        if (fcntl(pair[0], F_SETFL, O_NONBLOCK) == -1)
		fprintf(stderr, "fcntl(O_NONBLOCK)");

        if (fcntl(pair[1], F_SETFL, O_NONBLOCK) == -1)
		fprintf(stderr, "fcntl(O_NONBLOCK)");

	test_ok = 0;
	called = 0;
	return (0);
}

int
cleanup_test(void)
{
	close(pair[0]);
	close(pair[1]);

	if (test_ok)
		fprintf(stdout, "OK\n");
	else {
		fprintf(stdout, "FAILED\n");
		exit(1);
	}

	return (0);
}

void
test_simpleread(void)
{
	struct event ev;

	/* Very simple read test */
	setup_test("Simple read: ");
	
	write(pair[0], TEST1, strlen(TEST1)+1);
	shutdown(pair[0], SHUT_WR);

	event_set(&ev, pair[1], EV_READ, simple_read_cb, &ev);
	if (event_add(&ev, NULL) == -1)
		exit(1);
	event_dispatch();

	cleanup_test();
}

void
test_simplewrite(void)
{
	struct event ev;

	/* Very simple write test */
	setup_test("Simple write: ");
	
	event_set(&ev, pair[0], EV_WRITE, simple_write_cb, &ev);
	if (event_add(&ev, NULL) == -1)
		exit(1);
	event_dispatch();

	cleanup_test();
}

void
test_multiple(void)
{
	struct event ev, ev2;
	int i;

	/* Multiple read and write test */
	setup_test("Multiple read/write: ");
	memset(rbuf, 0, sizeof(rbuf));
	for (i = 0; i < sizeof(wbuf); i++)
		wbuf[i] = i;

	roff = woff = 0;
	usepersist = 0;

	event_set(&ev, pair[0], EV_WRITE, multiple_write_cb, &ev);
	if (event_add(&ev, NULL) == -1)
		exit(1);
	event_set(&ev2, pair[1], EV_READ, multiple_read_cb, &ev2);
	if (event_add(&ev2, NULL) == -1)
		exit(1);
	event_dispatch();

	if (roff == woff)
		test_ok = memcmp(rbuf, wbuf, sizeof(wbuf)) == 0;

	cleanup_test();
}

void
test_persistent(void)
{
	struct event ev, ev2;
	int i;

	/* Multiple read and write test with persist */
	setup_test("Persist read/write: ");
	memset(rbuf, 0, sizeof(rbuf));
	for (i = 0; i < sizeof(wbuf); i++)
		wbuf[i] = i;

	roff = woff = 0;
	usepersist = 1;

	event_set(&ev, pair[0], EV_WRITE|EV_PERSIST, multiple_write_cb, &ev);
	if (event_add(&ev, NULL) == -1)
		exit(1);
	event_set(&ev2, pair[1], EV_READ|EV_PERSIST, multiple_read_cb, &ev2);
	if (event_add(&ev2, NULL) == -1)
		exit(1);
	event_dispatch();

	if (roff == woff)
		test_ok = memcmp(rbuf, wbuf, sizeof(wbuf)) == 0;

	cleanup_test();
}

void
test_combined(void)
{
	struct both r1, r2, w1, w2;

	setup_test("Combined read/write: ");
	memset(&r1, 0, sizeof(r1));
	memset(&r2, 0, sizeof(r2));
	memset(&w1, 0, sizeof(w1));
	memset(&w2, 0, sizeof(w2));

	w1.nread = 4096;
	w2.nread = 8192;

	event_set(&r1.ev, pair[0], EV_READ, combined_read_cb, &r1);
	event_set(&w1.ev, pair[0], EV_WRITE, combined_write_cb, &w1);
	event_set(&r2.ev, pair[1], EV_READ, combined_read_cb, &r2);
	event_set(&w2.ev, pair[1], EV_WRITE, combined_write_cb, &w2);
	if (event_add(&r1.ev, NULL) == -1)
		exit(1);
	if (event_add(&w1.ev, NULL))
		exit(1);
	if (event_add(&r2.ev, NULL))
		exit(1);
	if (event_add(&w2.ev, NULL))
		exit(1);

	event_dispatch();

	if (r1.nread == 8192 && r2.nread == 4096)
		test_ok = 1;

	cleanup_test();
}

void
test_simpletimeout(void)
{
	struct timeval tv;
	struct event ev;

	setup_test("Simple timeout: ");

	tv.tv_usec = 0;
	tv.tv_sec = SECONDS;
	evtimer_set(&ev, timeout_cb, NULL);
	evtimer_add(&ev, &tv);

	gettimeofday(&tset, NULL);
	event_dispatch();

	cleanup_test();
}

void
test_simplesignal(void)
{
	struct event ev;
	struct itimerval itv;

	setup_test("Simple signal: ");
	signal_set(&ev, SIGALRM, signal_cb, &ev);
	signal_add(&ev, NULL);

	memset(&itv, 0, sizeof(itv));
	itv.it_value.tv_sec = 1;
	if (setitimer(ITIMER_REAL, &itv, NULL) == -1)
		goto skip_simplesignal;

	event_dispatch();
 skip_simplesignal:
	signal_del(&ev);

	cleanup_test();
}

void
test_immediatesignal(void)
{
	struct event ev;

	printf("Immediate signal: ");
	signal_set(&ev, SIGUSR1, signal_cb, &ev);
	signal_add(&ev, NULL);
	raise(SIGUSR1);
	event_loop(EVLOOP_NONBLOCK);
	signal_del(&ev);
	cleanup_test();
}

void
test_signal_dealloc(void)
{
	/* make sure that signal_event is event_del'ed and pipe closed */
	struct event ev;
	struct event_base *base = event_init();

	printf("Signal dealloc: ");
	signal_set(&ev, SIGUSR1, signal_cb, &ev);
	signal_add(&ev, NULL);
	signal_del(&ev);
	event_base_free(base);
	errno = EINTR;
	if (base->sig.ev_signal_added) {
		printf("ev_signal not removed (evsignal_dealloc needed) ");
		test_ok = 0;
	} else if (close(base->sig.ev_signal_pair[0]) != -1 ||
	    errno != EBADF) {
		/* fd must be closed, so second close gives -1, EBADF */
		printf("signal pipe still open (evsignal_dealloc needed) ");
		test_ok = 0;
	} else {
		test_ok = 1;
	}
	cleanup_test();
}

void
test_signal_pipeloss(void)
{
	/* make sure that the base1 pipe is closed correctly. */
	struct event_base *base1, *base2;
	int pipe1;

	printf("Signal pipeloss: ");
	base1 = event_init();
	pipe1 = base1->sig.ev_signal_pair[0];
	base2 = event_init();
	event_base_free(base2);
	event_base_free(base1);
	if (close(pipe1) != -1 || errno!=EBADF) {
		/* fd must be closed, so second close gives -1, EBADF */
		printf("signal pipe not closed. ");
		test_ok = 0;
	} else {
		test_ok = 1;
	}
	cleanup_test();
}

void
test_loopexit(void)
{
	struct timeval tv, tv_start, tv_end;
	struct event ev;

	setup_test("Loop exit: ");

	tv.tv_usec = 0;
	tv.tv_sec = 60*60*24;
	evtimer_set(&ev, timeout_cb, NULL);
	evtimer_add(&ev, &tv);

	tv.tv_usec = 0;
	tv.tv_sec = 1;
	event_loopexit(&tv);

	gettimeofday(&tv_start, NULL);
	event_dispatch();
	gettimeofday(&tv_end, NULL);
	timersub(&tv_end, &tv_start, &tv_end);

	evtimer_del(&ev);

	if (tv.tv_sec < 2)
		test_ok = 1;

	cleanup_test();
}

void
test_evbuffer(void) {
	struct evbuffer *evb;

	evb = evbuffer_new();
	setup_test("Evbuffer: ");

	evbuffer_add_printf(evb, "%s/%d", "hello", 1);

	if (EVBUFFER_LENGTH(evb) == 7 &&
	    strcmp((char*)EVBUFFER_DATA(evb), "hello/1") == 0)
	    test_ok = 1;
	
	cleanup_test();
}

void
test_evbuffer_find(void)
{
	u_char* p;
	char* test1 = "1234567890\r\n";
	char* test2 = "1234567890\r";
#define EVBUFFER_INITIAL_LENGTH 256
	char test3[EVBUFFER_INITIAL_LENGTH];
	unsigned int i;
	struct evbuffer * buf = evbuffer_new();

	/* make sure evbuffer_find doesn't match past the end of the buffer */
	fprintf(stdout, "Testing evbuffer_find 1: ");
	evbuffer_add(buf, (u_char*)test1, strlen(test1));
	evbuffer_drain(buf, strlen(test1));	  
	evbuffer_add(buf, (u_char*)test2, strlen(test2));
	p = evbuffer_find(buf, (u_char*)"\r\n", 2);
	if (p == NULL) {
		fprintf(stdout, "OK\n");
	} else {
		fprintf(stdout, "FAILED\n");
		exit(1);
	}

	/*
	 * drain the buffer and do another find; in r309 this would
	 * read past the allocated buffer causing a valgrind error.
	 */
	fprintf(stdout, "Testing evbuffer_find 2: ");
	evbuffer_drain(buf, strlen(test2));
	for (i = 0; i < EVBUFFER_INITIAL_LENGTH; ++i)
		test3[i] = 'a';
	test3[EVBUFFER_INITIAL_LENGTH - 1] = 'x';
	evbuffer_add(buf, (u_char *)test3, EVBUFFER_INITIAL_LENGTH);
	p = evbuffer_find(buf, (u_char *)"xy", 2);
	if (p == NULL) {
		printf("OK\n");
	} else {
		fprintf(stdout, "FAILED\n");
		exit(1);
	}

	/* simple test for match at end of allocated buffer */
	fprintf(stdout, "Testing evbuffer_find 3: ");
	p = evbuffer_find(buf, (u_char *)"ax", 2);
	if (p != NULL && strncmp((char*)p, "ax", 2) == 0) {
		printf("OK\n");
	} else {
		fprintf(stdout, "FAILED\n");
		exit(1);
	}

	evbuffer_free(buf);
}

void
readcb(struct bufferevent *bev, void *arg)
{
	if (EVBUFFER_LENGTH(bev->input) == 8333) {
		bufferevent_disable(bev, EV_READ);
		test_ok++;
	}
}

void
writecb(struct bufferevent *bev, void *arg)
{
	if (EVBUFFER_LENGTH(bev->output) == 0)
		test_ok++;
}

void
errorcb(struct bufferevent *bev, short what, void *arg)
{
	test_ok = -2;
}

void
test_bufferevent(void)
{
	struct bufferevent *bev1, *bev2;
	char buffer[8333];
	int i;

	setup_test("Bufferevent: ");

	bev1 = bufferevent_new(pair[0], readcb, writecb, errorcb, NULL);
	bev2 = bufferevent_new(pair[1], readcb, writecb, errorcb, NULL);

	bufferevent_disable(bev1, EV_READ);
	bufferevent_enable(bev2, EV_READ);

	for (i = 0; i < sizeof(buffer); i++)
		buffer[0] = i;

	bufferevent_write(bev1, buffer, sizeof(buffer));

	event_dispatch();

	bufferevent_free(bev1);
	bufferevent_free(bev2);

	if (test_ok != 2)
		test_ok = 0;

	cleanup_test();
}

struct test_pri_event {
	struct event ev;
	int count;
};

void
test_priorities_cb(int fd, short what, void *arg)
{
	struct test_pri_event *pri = arg;
	struct timeval tv;

	if (pri->count == 3) {
		event_loopexit(NULL);
		return;
	}

	pri->count++;

	timerclear(&tv);
	event_add(&pri->ev, &tv);
}

void
test_priorities(int npriorities)
{
	char buf[32];
	struct test_pri_event one, two;
	struct timeval tv;

	snprintf(buf, sizeof(buf), "Priorities %d: ", npriorities);
	setup_test(buf);

	event_base_priority_init(event_base, npriorities);

	memset(&one, 0, sizeof(one));
	memset(&two, 0, sizeof(two));

	event_set(&one.ev, -1, 0, test_priorities_cb, &one);
	if (event_priority_set(&one.ev, 0) == -1) {
		fprintf(stderr, "%s: failed to set priority", __func__);
		exit(1);
	}

	event_set(&two.ev, -1, 0, test_priorities_cb, &two);
	if (event_priority_set(&two.ev, npriorities - 1) == -1) {
		fprintf(stderr, "%s: failed to set priority", __func__);
		exit(1);
	}

	timerclear(&tv);

	if (event_add(&one.ev, &tv) == -1)
		exit(1);
	if (event_add(&two.ev, &tv) == -1)
		exit(1);

	event_dispatch();

	event_del(&one.ev);
	event_del(&two.ev);

	if (npriorities == 1) {
		if (one.count == 3 && two.count == 3)
			test_ok = 1;
	} else if (npriorities == 2) {
		/* Two is called once because event_loopexit is priority 1 */
		if (one.count == 3 && two.count == 1)
			test_ok = 1;
	} else {
		if (one.count == 3 && two.count == 0)
			test_ok = 1;
	}

	cleanup_test();
}

static void
test_multiple_cb(int fd, short event, void *arg)
{
	if (event & EV_READ)
		test_ok |= 1;
	else if (event & EV_WRITE)
		test_ok |= 2;
}

void
test_multiple_events_for_same_fd(void)
{
   struct event e1, e2;

   setup_test("Multiple events for same fd: ");

   event_set(&e1, pair[0], EV_READ, test_multiple_cb, NULL);
   event_add(&e1, NULL);
   event_set(&e2, pair[0], EV_WRITE, test_multiple_cb, NULL);
   event_add(&e2, NULL);
   event_loop(EVLOOP_ONCE);
   event_del(&e2);
   write(pair[1], TEST1, strlen(TEST1)+1);
   event_loop(EVLOOP_ONCE);
   event_del(&e1);
   
   if (test_ok != 3)
	   test_ok = 0;

   cleanup_test();
}

void
read_once_cb(int fd, short event, void *arg)
{
	char buf[256];
	int len;

	len = read(fd, buf, sizeof(buf));

	if (called) {
		test_ok = 0;
	} else if (len) {
		/* Assumes global pair[0] can be used for writing */
		write(pair[0], TEST1, strlen(TEST1)+1);
		test_ok = 1;
	}

	called++;
}

void
test_want_only_once(void)
{
	struct event ev;
	struct timeval tv;

	/* Very simple read test */
	setup_test("Want read only once: ");
	
	write(pair[0], TEST1, strlen(TEST1)+1);

	/* Setup the loop termination */
	timerclear(&tv);
	tv.tv_sec = 1;
	event_loopexit(&tv);
	
	event_set(&ev, pair[1], EV_READ, read_once_cb, &ev);
	if (event_add(&ev, NULL) == -1)
		exit(1);
	event_dispatch();

	cleanup_test();
}

int
main (int argc, char **argv)
{
	setvbuf(stdout, NULL, _IONBF, 0);

	/* Initalize the event library */
	event_base = event_init();

	test_evbuffer();
	test_evbuffer_find();
	
	test_bufferevent();

	test_simpleread();

	test_simplewrite();

	test_multiple();

	test_persistent();

	test_combined();

	test_simpletimeout();

	test_simplesignal();
	test_immediatesignal();

	test_loopexit();

	test_priorities(1);
	test_priorities(2);
	test_priorities(3);

	test_multiple_events_for_same_fd();

	test_want_only_once();

	test_signal_dealloc();
	test_signal_pipeloss();

	return (0);
}

@


1.12
log
@Some additional tests.

From the libevent SVN repo.

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: eventtest.c,v 1.11 2008/05/02 06:09:11 brad Exp $	*/
@


1.11
log
@Update to libevent 1.3e while retaining our local changes.

"No objection" millert@@
"the diff looks and works fine" reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: eventtest.c,v 1.10 2007/09/19 02:06:45 todd Exp $	*/
d32 1
d35 1
d38 2
a39 1
#include <sys/timeout.h>
d41 1
a44 1
#include <unistd.h>
d49 2
d452 50
a533 1
	setup_test("Evbuffer: ");
d536 1
d541 1
a541 1
	    strcmp(EVBUFFER_DATA(evb), "hello/1") == 0)
d548 55
d814 5
a831 1

a835 4
	test_evbuffer();

	test_bufferevent();

d843 3
@


1.10
log
@permit this to compile with gcc 2.x
ok cloder@@
@
text
@d1 1
a1 1
/*	$OpenBSD: eventtest.c,v 1.9 2006/01/23 20:19:34 brad Exp $	*/
d433 14
d717 2
@


1.9
log
@add a buffered event test.

From libevent CVS
@
text
@d1 1
a1 1
/*	$OpenBSD: eventtest.c,v 1.8 2005/12/25 02:51:24 brad Exp $	*/
d464 1
d467 1
a467 1
	struct evbuffer *evb = evbuffer_new();
@


1.8
log
@add two more tests.

From libevent CVS
@
text
@d1 1
a1 1
/*	$OpenBSD: eventtest.c,v 1.7 2005/12/18 03:57:02 brad Exp $	*/
d463 15
d704 2
@


1.7
log
@rename test functions with meaningful names instead of 1 2 3, etc.

From libevent CVS
@
text
@d1 1
a1 1
/*	$OpenBSD: eventtest.c,v 1.6 2005/04/22 01:28:04 brad Exp $	*/
a42 1
#include <err.h>
d237 1
a237 1
                warn("fcntl(O_NONBLOCK)");
d240 1
a240 1
                warn("fcntl(O_NONBLOCK)");
d591 75
d695 4
@


1.6
log
@test event priorities.
@
text
@d1 1
a1 1
/*	$OpenBSD: eventtest.c,v 1.5 2004/12/22 00:54:39 david Exp $	*/
d265 1
a265 1
test1(void)
d284 1
a284 1
test2(void)
d300 1
a300 1
test3(void)
d329 1
a329 1
test4(void)
d358 1
a358 1
test5(void)
d393 1
a393 1
test6(void)
d412 1
a412 1
test7(void)
d434 1
a434 1
test8(void)
d486 1
a486 1
test9(void)
d600 1
a600 1
	test1();
d602 1
a602 1
	test2();
d604 1
a604 1
	test3();
d606 1
a606 1
	test4();
d608 1
a608 1
	test5();
d610 1
a610 1
	test6();
d612 1
a612 1
	test7();
d614 1
a614 1
	test8();
d616 1
a616 1
	test9();
@


1.5
log
@some -Wimplicit-function-declaration cleaning; ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: eventtest.c,v 1.4 2004/11/25 16:48:47 brad Exp $	*/
d16 1
a16 4
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Niels Provos.
 * 4. The name of the author may not be used to endorse or promote products
d36 1
d57 1
d516 76
d598 1
a598 1
	event_init();
d617 4
@


1.4
log
@add regress test support for bufferevents

From NetBSD

ok markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: eventtest.c,v 1.3 2004/01/05 19:23:04 markus Exp $	*/
d45 1
@


1.3
log
@regress test for kqueue+EOF; marius aamodt eriksen
@
text
@d1 2
a2 2
/*	$OpenBSD: eventtest.c,v 1.2 2003/07/31 21:48:04 deraadt Exp $	*/
/*	$NetBSD: eventtest.c,v 1.2 2003/06/13 04:09:18 itojun Exp $	*/
d5 1
a5 1
 * Copyright 2003 Niels Provos <provos@@citi.umich.edu>
a33 4
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

d62 1
a62 1
static void
d71 4
a74 2
		if (!called)
			event_add(arg, NULL);
d81 1
a81 1
static void
d93 1
a93 1
static void
d120 4
a123 2
	if (!usepersist)
		event_add(ev, NULL);
d126 1
a126 1
static void
d142 4
a145 2
	if (!usepersist)
		event_add(ev, NULL);
d148 1
a148 1
static void
d168 1
a168 1
static void
d178 1
a178 1
	struct event ev, ev1;
d182 1
a182 29
static void
eof_read_cb(int fd, short event, void *arg)
{
	struct both *both = arg;
	char buf[256];
	int ret;

	ret = read(fd, buf, sizeof(buf));
	test_ok = both->nread == 0 && ret == 0;

	if (both->nread > 0)
		event_add(&both->ev, NULL);
	else
		event_del(&both->ev1);

	both->nread -= ret;
}

static void
eof_timeout_cb(int fd, short event, void *arg)
{
	struct both *both = arg;

	event_del(&both->ev);

	test_ok = 0;
}

static void
d196 2
a197 1
	event_add(&both->ev, NULL);
d200 1
a200 1
static void
d220 2
a221 1
	event_add(&both->ev, NULL);
d226 1
a226 1
static int
d237 6
d248 1
a248 1
static int
d264 2
a265 2
int
main(int argc, char **argv)
d267 1
a267 11
	struct event ev, ev2;
	struct timeval tv;
	struct itimerval itv;
	struct both r1, r2, w1, w2;
	int i, fd, n, tmp;
	char template[] = "/tmp/eventXXXX";

	setvbuf(stdout, NULL, _IONBF, 0);

	/* Initalize the event library */
	event_init();
d276 2
a277 1
	event_add(&ev, NULL);
d281 6
d292 2
a293 1
	event_add(&ev, NULL);
d297 7
d315 2
a316 1
	event_add(&ev, NULL);
d318 2
a319 1
	event_add(&ev2, NULL);
d326 7
d344 2
a345 1
	event_add(&ev, NULL);
d347 2
a348 1
	event_add(&ev2, NULL);
d355 6
d375 8
a382 4
	event_add(&r1.ev, NULL);
	event_add(&w1.ev, NULL);
	event_add(&r2.ev, NULL);
	event_add(&w2.ev, NULL);
d390 7
a396 1
	
d409 7
d431 1
d433 5
a437 1
	setup_test("EOF Behavior: ");
d439 1
a439 2
	if ((fd = mkstemp(template)) == -1)
		return (1);
d441 4
a444 1
	unlink(template);
d446 10
a455 2
	n = strlen(TEST1) + 1;
	r1.nread = n;
d457 5
a461 3
	while (n > 0) {
		if ((tmp = write(fd, TEST1, n)) == -1)
			return (1);
d463 6
a468 1
		n -= tmp;
d470 21
d492 1
a492 2
	if (lseek(fd, 0, SEEK_SET) == -1)
		return (1);
d494 2
a495 2
	event_set(&r1.ev, fd, EV_READ, eof_read_cb, &r1);
	event_add(&r1.ev, NULL);
d497 7
a503 4
	tv.tv_usec = 0;
	tv.tv_sec = SECONDS;
	evtimer_set(&r1.ev1, eof_timeout_cb, &r1);
	evtimer_add(&r1.ev1, &tv);
d507 6
d514 27
d544 1
@


1.2
log
@various cleanups; david says results are same
@
text
@d1 1
a1 1
/*	$OpenBSD: eventtest.c,v 1.1 2003/06/15 16:34:53 mickey Exp $	*/
d176 1
a176 1
	struct event ev;
d181 28
d289 2
a290 1
	int i;
d411 32
a444 1

@


1.1
log
@libevent regress from niels
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d66 1
a66 1
void
d83 1
a83 1
void
d95 1
a95 1
void
d126 1
a126 1
void
d146 1
a146 1
void
d166 1
a166 1
void
d180 1
a180 1
void
d197 1
a197 1
void
d222 1
a222 1
int
d238 1
a238 1
int
d255 1
a255 1
main (int argc, char **argv)
@

