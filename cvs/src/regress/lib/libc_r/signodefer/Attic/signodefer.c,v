head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2003.01.19.23.08.33;	author deraadt;	state dead;
branches;
next	1.2;

1.2
date	2002.10.23.22.30.04;	author marc;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.21.18.46.35;	author marc;	state Exp;
branches;
next	;


desc
@@


1.3
log
@repository move to libpthread
@
text
@/* $OpenBSD: signodefer.c,v 1.2 2002/10/23 22:30:04 marc Exp $ */
/* PUBLIC DOMAIN Oct 2002 <marc@@snafu.org> */

/*
 * test signal delivery of active signals (SA_NODEFER)
 */

#include <signal.h>
#include <stdio.h>
#include <unistd.h>

#include "test.h"

volatile sig_atomic_t sigactive;
volatile sig_atomic_t sigcount;
volatile sig_atomic_t was_active;

void
act_handler(int signal, siginfo_t *siginfo, void *context)
{
	char *str;

	/* how many times has the handler been called */
	was_active += sigactive++;
	sigcount += 1;

	/* verify siginfo since we asked for it. */
	ASSERT(siginfo != NULL);

	asprintf(&str,
		 "%sact_handler/%d, signal %d, siginfo %p, context %p\n",
		 was_active ? "[recurse] " : "",
		 sigcount, signal, siginfo, context);
	CHECKe(write(STDOUT_FILENO, str, strlen(str)));
	/* Odd times entered send ourself the same signal */
	if (sigcount & 1)
		CHECKe(kill(getpid(), SIGUSR1));

	sigactive = 0;
}
 
int
main(int argc, char **argv)
{
	struct sigaction act;

	act.sa_sigaction = act_handler;
	sigemptyset(&act.sa_mask);
	act.sa_flags = SA_SIGINFO;
	ASSERT(sigaction(SIGUSR1, &act, NULL) == 0);

	/* see if the signal handler recurses */
	CHECKe(kill(getpid(), SIGUSR1));
	sleep(1);
        ASSERT(was_active == 0);
	
	/* allow recursive handlers, see that it is handled right */
	act.sa_flags |= SA_NODEFER;
	ASSERT(sigaction(SIGUSR1, &act, NULL) == 0);

	/* see if the signal handler recurses */
	CHECKe(kill(getpid(), SIGUSR1));
	sleep(1);
	ASSERT(was_active == 1);
	
	SUCCEED;
}
@


1.2
log
@remove 0x in front of %p -- not needed
@
text
@d1 1
a1 1
/* $OpenBSD: signodefer.c,v 1.1 2002/10/21 18:46:35 marc Exp $ */
@


1.1
log
@
Add test for non-deferred signal handling in threads.   pthreads code
that makes this test work is being tested.
@
text
@d1 1
a1 1
/* $OpenBSD: siginfo.c,v 1.5 2002/10/12 03:37:45 marc Exp $ */
d31 1
a31 1
		 "%sact_handler/%d, signal %d, siginfo 0x%p, context 0x%p\n",
@

