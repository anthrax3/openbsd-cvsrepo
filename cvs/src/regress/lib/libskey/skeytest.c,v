head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.12
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.14
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.10
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.8
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.6
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.3.0.26
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.22
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.20
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.18
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.16
	OPENBSD_5_0:1.3.0.14
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.12
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.10
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.6
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.8
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.4
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.2
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.2.0.20
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.18
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.16
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.14
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.12
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.10
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.8
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.6
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.4
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.2
	OPENBSD_3_4_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2014.03.25.04.29.49;	author lteo;	state Exp;
branches;
next	1.3;

1.3
date	2008.06.26.05.42.05;	author ray;	state Exp;
branches;
next	1.2;

1.2
date	2003.07.31.21.48.07;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2003.06.15.16.40.27;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update the libskey regression tests:

- Remove the MD4 data sets since MD4 has been removed from base

- Add new data sets for RMD-160 (suggested by millert@@)

- Ensure that the default algorithm is "md5" (as documented on the skey man
  pages)

- Ensure that skey_set_algorithm() will not blindly accept an
  unsupported algorithm

- Ensure that skey_set_algorithm() recognizes the algorithms in the
  provided data set

- Ensure that skey_get_algorithm() returns the algorithm set by
  skey_set_algorithm()

looks good to millert@@
@
text
@/*	$OpenBSD: skeytest.c,v 1.3 2008/06/26 05:42:05 ray Exp $	*/
/*	$NetBSD: skeytest.c,v 1.3 2002/02/21 07:38:18 itojun Exp $	*/

/*-
 * Copyright (c) 2000 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This is a regression test for the S/Key implementation against the data set
 * from Appendix C of RFC2289 without the MD4 set (MD4 support was removed from
 * OpenBSD base in March 2014) and with the addition of an RIPEMD-160 set.
 */

#include <stdio.h>
#include <string.h>
#include "skey.h"

struct regRes {
	char *algo, *zero, *one, *nine;
	};

struct regPass {
	char *passphrase, *seed;
	struct regRes res[4];
	} regPass[] = {
		{ "This is a test.", "TeSt", { 
			{ "md5", "9E876134D90499DD", "7965E05436F5029F", "50FE1962C4965880" },
			{ "rmd160","3A1BFB10A64B4CCD", "39D56BF655E65DE7", "42F84BA862941033" },
			{ "sha1","BB9E6AE1979D8FF4", "63D936639734385B", "87FEC7768B73CCF9" },
			{ NULL } } },
		{ "AbCdEfGhIjK", "alpha1", { 
			{ "md5", "87066DD9644BF206", "7CD34C1040ADD14B", "5AA37A81F212146C" },
			{ "rmd160","726EDD1BB5DB3642", "46A231C501A1D2CE", "848664EF3A300CC9" },
			{ "sha1","AD85F658EBE383C9", "D07CE229B5CF119B", "27BC71035AAF3DC6" },
			{ NULL } } },
		{ "OTP's are good", "correct", { 
			{ "md5", "F205753943DE4CF9", "DDCDAC956F234937", "B203E28FA525BE47" },
			{ "rmd160","F90D03CC969208C8", "B6F5D25A08A90009", "C890C1F05018BA5F" },
			{ "sha1","D51F3E99BF8E6F0B", "82AEB52D943774E4", "4F296A74FE1567EC" },
			{ NULL } } },
		{ NULL }
	};

int
main(int argc, char *argv[])
{
	char data[16], prn[64];
	struct regPass *rp;
	int i = 0;
	int errors = 0;
	int j;

	if (strcmp(skey_get_algorithm(), "md5") != 0) {
		errors++;
		printf("default algorithm is not md5\n");
	}

	if (skey_set_algorithm("md4") != NULL) {
		errors++;
		printf("accepted unsupported algorithm md4\n");
	}

	for(rp = regPass; rp->passphrase; rp++) {
		struct regRes *rr;

		i++;
		for(rr = rp->res; rr->algo; rr++) {
			if (skey_set_algorithm(rr->algo) == NULL) {
				errors++;
				printf("Set %d: %s algorithm is not supported\n",
				    i, rr->algo);
				continue;
			}

			if (strcmp(skey_get_algorithm(), rr->algo) != 0) {
				errors++;
				printf("Set %d: unable to set algorithm to %s\n",
				    i, rr->algo);
				continue;
			}

			keycrunch(data, rp->seed, rp->passphrase);
			btoa8(prn, data);

			if(strcasecmp(prn, rr->zero)) {
				errors++;
				printf("Set %d, round 0, %s: Expected %s and got %s\n",
				    i, rr->algo, rr->zero, prn);
			}

			f(data);
			btoa8(prn, data);

			if(strcasecmp(prn, rr->one)) {
				errors++;
				printf("Set %d, round 1, %s: Expected %s and got %s\n",
				    i, rr->algo, rr->one, prn);
			}

			for(j=1; j<99; j++)
				f(data);
			btoa8(prn, data);

			if(strcasecmp(prn, rr->nine)) {
				errors++;
				printf("Set %d, round 99, %s: Expected %s and got %s\n",
				    i, rr->algo, rr->nine, prn);
			}
		}
	}

	printf("%d errors\n", errors);
	return(errors ? 1 : 0);
}
@


1.3
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: skeytest.c,v 1.2 2003/07/31 21:48:07 deraadt Exp $	*/
d30 5
a34 2
/* This is a regression test for the S/Key implementation
	against the data set from Appendix C of RFC2289 */
a48 1
			{ "md4", "D1854218EBBB0B51", "63473EF01CD0B444", "C5E612776E6C237A" }, 
d50 1
a53 1
			{ "md4", "50076F47EB1ADE4E", "65D20D1949B5F7AB", "D150C82CCE6F62D1" }, 
d55 1
a58 1
			{ "md4", "849C79D4F6F55388", "8C0992FB250847B1", "3F3BF4B4145FD74B" },
d60 1
d74 11
a84 1
	
d90 13
a102 1
			skey_set_algorithm(rr->algo);
@


1.2
log
@various cleanups; david says results are same
@
text
@d1 1
a1 1
/*	$OpenBSD: skeytest.c,v 1.1 2003/06/15 16:40:27 mickey Exp $	*/
a15 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.1
log
@libskey regress from netbsd
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d70 3
a72 2
int main()
	{
d79 1
a79 2
	for(rp = regPass; rp->passphrase; rp++)
		{
d83 1
a83 2
		for(rr = rp->res; rr->algo; rr++)
			{
d89 1
a89 2
			if(strcasecmp(prn, rr->zero))
				{
d91 3
a93 2
				printf("Set %d, round 0, %s: Expected %s and got %s\n", i, rr->algo, rr->zero, prn);
				}
d98 1
a98 2
			if(strcasecmp(prn, rr->one))
				{
d100 3
a102 2
				printf("Set %d, round 1, %s: Expected %s and got %s\n", i, rr->algo, rr->one, prn);
				}
d108 1
a108 2
			if(strcasecmp(prn, rr->nine))
				{
d110 2
a111 3
				printf("Set %d, round 99, %s: Expected %s and got %s\n", i, rr->algo, rr->nine, prn);
				}

d114 1
d118 1
a118 1
	}
@

