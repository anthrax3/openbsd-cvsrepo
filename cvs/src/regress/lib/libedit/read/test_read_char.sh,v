head	1.2;
access;
symbols
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.4
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2;
locks; strict;
comment	@# @;


1.2
date	2016.02.11.20.54.06;	author schwarze;	state Exp;
branches;
next	1.1;
commitid	uZ3KkinhgQq1HyTI;

1.1
date	2016.02.11.15.37.20;	author schwarze;	state Exp;
branches;
next	;
commitid	HXxulMOT7085CpbX;


desc
@@


1.2
log
@Test the C/POSIX locale too, in addition to UTF-8.
@
text
@#!/bin/sh
#
# Copyright (c) 2016 Ingo Schwarze <schwarze@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

testrc()
{
	stdin=$1
	e_utf8=$2
	e_ascii=$3
	[ -n "$e_ascii" ] || e_ascii=$e_utf8
	result=`echo -n "$stdin" | LC_CTYPE=en_US.UTF-8 ./test_read_char`
	if [ "$result" != "${e_utf8}" ]; then
		echo "input:    >>>$stdin<<<"
		echo "expected: >>>$e_utf8<<< UTF-8"
		echo "result:   >>>$result<<<"
		exit 1;
	fi
	result=`echo -n "$stdin" | LC_CTYPE=C ./test_read_char`
	if [ "$result" != "${e_ascii}" ]; then
		echo "input:    >>>$stdin<<<"
		echo "expected: >>>$e_ascii<<< ASCII"
		echo "result:   >>>$result<<<"
		exit 1;
	fi
}

# Valid ASCII.
testrc "" "0."
testrc "a" "61,0."
testrc "ab" "61,62,0."

# Valid UTF-8.
testrc "\0303\0251" "e9,0." "c3,a9,0."

# Incomplete UTF-8.
testrc "\0303" "0." "c3,0."
testrc "\0303a" "*61,0." "c3,61,0."
testrc "\0303ab" "*61,62,0." "c3,61,62,0."

# UTF-16 surrogate.
testrc "\0355\0277\0277ab" "*61,62,0." "ed,bf,bf,61,62,0."

# Isolated UTF-8 continuation bytes.
testrc "\0200" "*0." "80,0."
testrc "\0200ab" "*61,62,0." "80,61,62,0."
testrc "a\0200bc" "61,*62,63,0." "61,80,62,63,0."
testrc "\0200\0303\0251" "*e9,0." "80,c3,a9,0."
testrc "\0200\0303ab" "*61,62,0." "80,c3,61,62,0."

# Invalid bytes.
testrc "\0377ab" "*61,62,0." "ff,61,62,0."
testrc "\0355\0277\0377ab" "*61,62,0." "ed,bf,ff,61,62,0."

exit 0
@


1.1
log
@Slowly start a unit test suite for libedit; Christos is right that
fiddling with the internals of that code is dangerous without it.
Intentionally not linked to the build yet, because many of the tests
still fail: The related bugfixes are too intrusive right now and will
go in after unlock.
@
text
@d20 5
a24 3
	expected=$2
	result=`echo -n "$stdin" | ./test_read_char`
	if [ "$result" != "${expected}" ]; then
d26 8
a33 1
		echo "expected: >>>$expected<<<"
d39 1
d43 22
a64 12
testrc "\0303\0251" "e9,0."		# valid UTF-8
testrc "\0303" "0."			# incomplete UTF-8
testrc "\0303a" "*61,0."
testrc "\0303ab" "*61,62,0."
testrc "\0355\0277\0277ab" "*61,62,0."	# surrogate
testrc "\0200" "*0."			# isolated continuation byte
testrc "\0200ab" "*61,62,0."
testrc "a\0200bc" "61,*62,63,0."
testrc "\0200\0303\0251" "*e9,0."
testrc "\0200\0303ab" "*61,62,0."
testrc "\0377ab" "*61,62,0."		# invalid byte
testrc "\0355\0277\0377ab" "*61,62,0."
@

