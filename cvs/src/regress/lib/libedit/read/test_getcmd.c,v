head	1.8;
access;
symbols
	OPENBSD_6_1:1.7.0.4
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.6.0.2
	OPENBSD_6_0_BASE:1.6;
locks; strict;
comment	@ * @;


1.8
date	2017.07.05.15.31.45;	author bluhm;	state Exp;
branches;
next	1.7;
commitid	eYx6IbLq0jXNHWKX;

1.7
date	2016.09.08.05.37.35;	author otto;	state Exp;
branches;
next	1.6;
commitid	Jd4qk1M31zDhBWZE;

1.6
date	2016.05.25.09.28.13;	author schwarze;	state Exp;
branches;
next	1.5;
commitid	x7V9JuRf1Mwvv67X;

1.5
date	2016.05.22.23.16.00;	author schwarze;	state Exp;
branches;
next	1.4;
commitid	OjyMph15OiztwSpy;

1.4
date	2016.05.10.11.24.56;	author schwarze;	state Exp;
branches;
next	1.3;
commitid	q2nhjZGz3JSWyaPd;

1.3
date	2016.04.11.21.33.03;	author schwarze;	state Exp;
branches;
next	1.2;
commitid	FJB2JuLIq3pDRXf5;

1.2
date	2016.03.22.12.24.45;	author schwarze;	state Exp;
branches;
next	1.1;
commitid	6Y2cimFUtUVzqLMh;

1.1
date	2016.03.01.16.12.11;	author schwarze;	state Exp;
branches;
next	;
commitid	WpEedg9ROj05L4FI;


desc
@@


1.8
log
@Implement the generated dependency with a stamp file to avoid needless
recompiling of the test programs.  Add some RCS ids.
@
text
@/*	$OpenBSD$	*/
/*
 * Copyright (c) 2016 Ingo Schwarze <schwarze@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <assert.h>
#include <err.h>
#include <errno.h>
#include <locale.h>
#include <stdio.h>
#include <stdlib.h>

#include "read.c"
#include "glue.c"

#define N_KEYS 256

/*
 * Unit test steering program for editline/read.c, read_getcmd().
 */

int
main()
{
	EditLine	 el;
	struct macros	*ma;
	int		 irc;
	wchar_t		 ch;
	el_action_t	 cmdnum;

	if (setlocale(LC_CTYPE, "") == NULL)
		err(1, "setlocale");

	el.el_flags = CHARSET_IS_UTF8;
	el.el_infd = STDIN_FILENO;
	el.el_state.metanext = 0;

	el.el_map.alt = NULL;
	if ((el.el_map.key = calloc(N_KEYS, sizeof(el_action_t))) == NULL)
		err(1, NULL);
	el.el_map.key[(unsigned char)'c'] = ED_SEQUENCE_LEAD_IN;
	el.el_map.key[(unsigned char)'i'] = ED_INSERT;
	el.el_map.key[(unsigned char)'s'] = ED_SEQUENCE_LEAD_IN;
	el.el_map.current = el.el_map.key;
	if ((el.el_signal = calloc(1, sizeof(*el.el_signal))) == NULL)
		err(1, NULL);

	if (read_init(&el) != 0)
		err(1, "read_init");
	ma = &el.el_read->macros;
	el.el_read->read_errno = ENOMSG;

	do {
		irc = read_getcmd(&el, &cmdnum, &ch);
		switch (irc) {
		case 0:
			fputs("OK ", stdout);
			switch (cmdnum) {
			case ED_COMMAND:
				fputs("command", stdout);
				break;
			case ED_INSERT:
				fputs("insert", stdout);
				break;
			default:
				printf("cmdnum=%u", cmdnum);
				break;
			}
			printf(" L'%lc'", ch);
			break;
		case -1:
			fputs("EOF", stdout);
			break;
		default:
			printf("ret(%d)", irc);
			break;
		}
		if (el.el_read->read_errno != ENOMSG)
			printf(" read_errno=%d", el.el_read->read_errno);
		if (ma->level > -1)
			printf(" macro[%d]=%ls(%d)", ma->level,
			    *ma->macro, ma->offset);
		putchar('\n');
	} while (irc == 0);

	return 0;
}
@


1.7
log
@fix test after the errno reshuffle; ok swarsche@@
@
text
@d1 1
@


1.6
log
@deal with the el_errno -> read_errno cleanup, read.c rev. 1.43
@
text
@a44 1
	el.el_read->read_errno = ENOMSG;
d62 1
d89 1
a89 1
		if (el.el_read->read_errno != 0)
@


1.5
log
@cope with simplified chared/read interface
@
text
@d45 1
a45 1
	el.el_errno = ENOMSG;
d89 2
a90 2
		if (el.el_errno != 0)
			printf(" el_errno=%d", el.el_errno);
@


1.4
log
@adapt to recently changed internal interface of read_getcmd()
@
text
@d37 1
a37 1
	c_macro_t	*ma;
a59 6
	ma = &el.el_chared.c_macro;
	ma->level = -1;
	ma->offset = 0;
	if ((ma->macro = calloc(EL_MAXMACRO, sizeof(*ma->macro))) == NULL)
		err(1, NULL);

d62 1
@


1.3
log
@cope with the deletion of Char, use wchar_t
@
text
@d72 1
a72 1
		case OKCMD:
d87 1
a87 1
		case 0:
d100 1
a100 1
	} while (irc);
@


1.2
log
@initialize el_state.metanext before testing read_getcmd()
@
text
@d39 1
a39 1
	Char		 ch;
@


1.1
log
@More unit tests for libedit.
Those that still fail are commented out in the Makefiles for now;
i have patches for them.
@
text
@d48 1
@

