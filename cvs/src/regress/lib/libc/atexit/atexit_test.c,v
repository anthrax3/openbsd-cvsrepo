head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.6
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.4
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.7.0.8
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.6
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.4
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.6.0.28
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.24
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.22
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.20
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.18
	OPENBSD_5_0:1.6.0.16
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.14
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.12
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.8
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.10
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.6
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.4
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.2
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.5.0.18
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.16
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.14
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2;
locks; strict;
comment	@ * @;


1.8
date	2015.10.25.04.11.00;	author guenther;	state Exp;
branches;
next	1.7;
commitid	5T4p85EjwpbkPuUJ;

1.7
date	2014.06.18.19.01.10;	author kettenis;	state Exp;
branches;
next	1.6;
commitid	mzNWHuut8FFaBZJD;

1.6
date	2007.09.03.14.42.44;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2003.09.02.23.52.16;	author david;	state Exp;
branches;
next	1.4;

1.4
date	2003.07.31.21.48.02;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2002.10.21.20.40.50;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.14.22.03.14;	author dhartmei;	state Exp;
branches;
next	1.1;

1.1
date	2002.07.29.19.51.41;	author dhartmei;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Use dprintf() instead of fprintf() in the signal handler
@
text
@/*	$OpenBSD: atexit_test.c,v 1.7 2014/06/18 19:01:10 kettenis Exp $ */

/*
 * Copyright (c) 2002 Daniel Hartmeier
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *    - Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *    - Redistributions in binary form must reproduce the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer in the documentation and/or other materials provided
 *      with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Effort sponsored in part by the Defense Advanced Research Projects
 * Agency (DARPA) and Air Force Research Laboratory, Air Force
 * Materiel Command, USAF, under agreement number F30602-01-2-0537.
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <signal.h>
#include <unistd.h>
#include "stdlib/atexit.h"

void	handle_first(void);
void	handle_middle(void);
void	handle_last(void);
void	handle_invalid(void *);
void	handle_cleanup(void);
void	handle_signal(int);

static int counter;

int
main(int argc, char *argv[])
{
	int i;

	if (argc != 2 || (strcmp(argv[1], "-valid") &&
	    strcmp(argv[1], "-invalid-atexit") &&
	    strcmp(argv[1], "-invalid-cleanup"))) {
		fprintf(stderr, "%s -valid/-invalid-atexit/-invalid-cleanup\n",
		    argv[0]);
		return (1);
	}
	fprintf(stderr, "main()\n");
	if (atexit(handle_last)) {
		perror("atexit(handle_last) failed");
		return (1);
	}
	for (i = 0; i < 65535; ++i) {
		if (atexit(handle_middle)) {
			perror("atexit(handle_middle) failed");
			return (1);
		}
	}
	if (atexit(handle_first)) {
		perror("atexit(handle_first) failed");
		return (1);
	}
	/* this is supposed to segfault */
	if (!strcmp(argv[1], "-invalid-atexit")) {
		signal(SIGSEGV, handle_signal);
		__atexit->fns[0].fn_ptr = handle_invalid;
	} else if (!strcmp(argv[1], "-invalid-cleanup")) {
		struct atexit *p = __atexit;

		signal(SIGSEGV, handle_signal);
		while (p != NULL && p->next != NULL)
			p = p->next;
		if (p == NULL)
			fprintf(stderr, "p == NULL, no page found\n");
		p->fns[0].fn_ptr = handle_invalid;
	}
	__atexit_register_cleanup(handle_cleanup);
	counter = 0;
	fprintf(stderr, "main() returns\n");
	return (0);
}

void
handle_first(void)
{
	fprintf(stderr, "handle_first() counter == %i\n", counter);
}

void
handle_middle(void)
{
	counter++;
}

void
handle_last(void)
{
	fprintf(stderr, "handle_last() counter == %i\n", counter);
}

void
handle_cleanup(void)
{
	fprintf(stderr, "handle_cleanup()\n");
}

void
handle_invalid(void *arg)
{
	fprintf(stderr, "handle_invalid() THIS SHOULD HAVE SEGFAULTED INSTEAD!\n");
}

void
handle_signal(int sigraised)
{
	switch (sigraised) {
	case SIGSEGV:
		dprintf(STDERR_FILENO, "SIGSEGV\n");
		exit(0);
	default:
		dprintf(STDERR_FILENO, "unexpected signal caught\n");
		exit(1);
	}
}
@


1.7
log
@Always call atexit handlers as if they were registered with __cxa_atexit.
The extra argument doesn't hurt genuine atexit handlers and this fixes a
bug where we didn't provide the argument (effectively passing garbage) for
functions registered with __cxa_atexit in the main executable.

Pointed out by Dmitriy Ivanov <dimitry@@google.com> and Elliott Hughes
<enh@@google.com>.

ok matthew@@
@
text
@d1 1
a1 1
/*	$OpenBSD: atexit_test.c,v 1.6 2007/09/03 14:42:44 millert Exp $ */
d41 1
d135 1
a135 1
		fprintf(stderr, "SIGSEGV\n");
d138 1
a138 1
		fprintf(stderr, "unexpected signal caught\n");
@


1.6
log
@Adapt atexit() regress to recent changes and add __cxa_atexit() regress.
__cxa_atexit() regress from kurt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: atexit_test.c,v 1.5 2003/09/02 23:52:16 david Exp $ */
d46 1
a46 1
void	handle_invalid(void);
d82 1
a82 1
		__atexit->fns[0].fn_ptr.std_func = handle_invalid;
d91 1
a91 1
		p->fns[0].fn_ptr.std_func = handle_invalid;
d124 1
a124 1
handle_invalid(void)
@


1.5
log
@add missing includes
ok deraadt@@ tedu@@ dhartmei@@ krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: atexit_test.c,v 1.4 2003/07/31 21:48:02 deraadt Exp $ */
d82 1
a82 1
		__atexit->fns[0] = handle_invalid;
d91 1
a91 1
		p->fns[0] = handle_invalid;
@


1.4
log
@various cleanups; david says results are same
@
text
@d1 1
a1 1
/*	$OpenBSD: atexit_test.c,v 1.3 2002/10/21 20:40:50 mickey Exp $ */
d39 1
@


1.3
log
@do not use an absolute path in include; dhartmei@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: atexit_test.c,v 1.2 2002/09/14 22:03:14 dhartmei Exp $ */
d42 5
a46 5
void	handle_first();
void	handle_middle();
void	handle_last();
void	handle_invalid();
void	handle_cleanup();
d99 1
a99 1
handle_first()
d105 1
a105 1
handle_middle()
d111 1
a111 1
handle_last()
d117 1
a117 1
handle_cleanup()
d123 1
a123 1
handle_invalid()
@


1.2
log
@Move __cleanup into mprotect'ed page to prevent unintentional modifications
similar to the atexit handlers. Idea and help deraadt@@, ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: atexit_test.c,v 1.1 2002/07/29 19:51:41 dhartmei Exp $ */
d40 1
a40 1
#include "/usr/src/lib/libc/stdlib/atexit.h"
@


1.1
log
@Try to modify __atexit directly and see if our function gets called.
@
text
@d1 1
a1 1
/*	$OpenBSD: atexit_test.c,v 1.0 2002/07/29 21:45:00 dhartmei Exp $ */
a41 3
extern struct atexit *__atexit;
extern void (*__cleanup)();

d57 4
a60 2
	    strcmp(argv[1], "-invalid"))) {
		fprintf(stderr, "%s -valid/-invalid\n", argv[0]);
d79 1
a79 1
	if (strcmp(argv[1], "-valid")) {
d82 9
d92 1
a92 1
	__cleanup = handle_cleanup;
@

