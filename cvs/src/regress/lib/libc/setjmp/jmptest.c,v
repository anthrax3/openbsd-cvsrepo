head	1.7;
access;
symbols
	OPENBSD_6_0:1.7.0.54
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.44
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.52
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.50
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.48
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.46
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.42
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.40
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.38
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.36
	OPENBSD_5_0:1.7.0.34
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.32
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.30
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.26
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.28
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.24
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.22
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.20
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.18
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.16
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.14
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.12
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.10
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.8
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.5.0.6
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.3.0.10
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.8
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.6
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.4
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.2
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2003.09.02.23.52.16;	author david;	state Exp;
branches;
next	1.6;

1.6
date	2003.07.31.21.48.03;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2001.11.11.23.26.35;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.29.02.05.45;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	98.06.03.08.08.11;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.12.21.22.23.43;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.34;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.34;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.7
log
@add missing includes
ok deraadt@@ tedu@@ dhartmei@@ krw@@
@
text
@/*	$OpenBSD: jmptest.c,v 1.6 2003/07/31 21:48:03 deraadt Exp $	*/
/*	$NetBSD: jmptest.c,v 1.2 1995/01/01 20:55:35 jtc Exp $	*/

/*
 * Copyright (c) 1994 Christopher G. Demetriou
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Christopher G. Demetriou
 *	for the NetBSD Project.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <err.h>
#include <setjmp.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#if (TEST_SETJMP + TEST_U_SETJMP + TEST_SIGSETJMP) != 1
#error one of TEST_SETJMP, TEST_U_SETJMP, or TEST_SIGSETJMP must be defined
#endif

#ifdef TEST_SETJMP
#define BUF		jmp_buf
#define	SET(b, m)	setjmp(b)
#define	JMP(b, v)	longjmp(b, v)
#endif

#ifdef TEST_U_SETJMP
#define BUF		jmp_buf
#define	SET(b, m)	_setjmp(b)
#define	JMP(b, v)	_longjmp(b, v)
#endif

#ifdef TEST_SIGSETJMP
#define BUF		sigjmp_buf
#define	SET(b, m)	sigsetjmp(b, m)
#define	JMP(b, v)	siglongjmp(b, v)
#endif

int expectsignal;

static void
aborthandler(int signo)
{

	if (expectsignal)
		_exit(0);
	else {
		warnx("kill(SIGABRT) succeeded");
		_exit(1);
	}
}

int
main(int argc, char *argv[])
{
	struct sigaction sa;
	BUF jb;
	sigset_t ss;
	int i, x;

	i = getpid();

#ifdef TEST_SETJMP
	expectsignal = 0;
#endif
#ifdef TEST_U_SETJMP
	expectsignal = 1;
#endif
#ifdef TEST_SIGSETJMP
	if (argc != 2 ||
	    (strcmp(argv[1], "save") && strcmp(argv[1], "nosave"))) {
		fprintf(stderr, "usage: %s [save|nosave]\n", argv[0]);
		exit(1);
	}
	expectsignal = (strcmp(argv[1], "save") != 0);
#endif

	sa.sa_handler = aborthandler;
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = 0;
	if (sigaction(SIGABRT, &sa, NULL) == -1)
		err(1, "sigaction failed");

	if (sigemptyset(&ss) == -1)
		err(1, "sigemptyset failed");
	if (sigaddset(&ss, SIGABRT) == -1)
		err(1, "sigaddset failed");
	if (sigprocmask(SIG_BLOCK, &ss, NULL) == -1)
		err(1, "sigprocmask (1) failed");

	x = SET(jb, !expectsignal);
	if (x != 0) {
		if (x != i)
			errx(1, "setjmp returned wrong value");

		kill(i, SIGABRT);
		if (expectsignal)
			errx(1, "kill(SIGABRT) failed");
		else
			exit(0);
	}

	if (sigprocmask(SIG_UNBLOCK, &ss, NULL) == -1)
		err(1, "sigprocmask (2) failed");

	JMP(jb, i);

	errx(1, "jmp failed");
}
@


1.6
log
@various cleanups; david says results are same
@
text
@d1 1
a1 1
/*	$OpenBSD: jmptest.c,v 1.5 2001/11/11 23:26:35 deraadt Exp $	*/
d41 1
@


1.5
log
@signal race fixes
@
text
@d1 1
a1 1
/*	$OpenBSD: jmptest.c,v 1.4 2001/01/29 02:05:45 niklas Exp $	*/
d67 2
a68 3
void
aborthandler(signo)
	int signo;
d80 1
a80 3
main(argc, argv)
	int argc;
	char *argv[];
@


1.4
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD: jmptest.c,v 1.2 1995/01/01 20:55:35 jtc Exp $	*/
d73 5
a77 3
		exit(0);
	else
		errx(1, "kill(SIGABRT) succeeded");
@


1.3
log
@use sigemptyset()
@
text
@d1 1
@


1.2
log
@-Wall madness.
@
text
@d105 1
a105 1
	sa.sa_mask = 0;
@


1.1
log
@Initial revision
@
text
@d35 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
