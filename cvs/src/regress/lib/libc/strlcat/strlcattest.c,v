head	1.2;
access;
symbols
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.2.0.12
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.8
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.6
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.4
	OPENBSD_5_7_BASE:1.2;
locks; strict;
comment	@ * @;


1.2
date	2014.12.03.18.25.18;	author millert;	state Exp;
branches;
next	1.1;
commitid	GNjyNcU84nuECMvH;

1.1
date	2014.12.02.17.48.34;	author millert;	state Exp;
branches;
next	;
commitid	1xjVyUKYVSleCnFJ;


desc
@@


1.2
log
@Fill the buffer with 'z' instead of 'a' since 'a' is part of the
string we are testing.
Add tests to verify that we get SIGSEGV when passed a NULL src or dst.
It is better to crash than for an implementation to check for NULL
and try to recover.
@
text
@/*	$OpenBSD: strlcattest.c,v 1.1 2014/12/02 17:48:34 millert Exp $ */

/*
 * Copyright (c) 2014 Todd C. Miller <Todd.Miller@@courtesan.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <setjmp.h>
#include <signal.h>
#include <unistd.h>

volatile sig_atomic_t got_signal;
sigjmp_buf jmpenv;

void
handler(int signo)
{
        got_signal = signo;
	siglongjmp(jmpenv, 1);
}

int
main(int argc, char *argv[])
{
	char *buf, *cp, *ep;
	struct sigaction sa;
	size_t len, bufsize;
	int failures = 0;

	/* Enable malloc security options. */
	setenv("MALLOC_OPTIONS", "S", 0);

	bufsize = getpagesize(); /* trigger guard pages easily */
	buf = malloc(bufsize);
	if (buf == NULL) {
		fprintf(stderr, "unable to allocate memory\n");
		return 1;
	}
	memset(buf, 'z', bufsize);
	ep = buf + bufsize;

	/* Test appending to an unterminated string. */
	len = strlcat(buf, "abcd", bufsize);
	if (len != 4 + bufsize) {
		fprintf(stderr,
		    "strlcat: failed unterminated buffer test (1a)\n");
		failures++;
	}
	/* Make sure we only wrote where expected. */
	for (cp = buf; cp < ep; cp++) {
		if (*cp != 'z') {
			fprintf(stderr,
			    "strlcat: failed unterminated buffer test (1b)\n");
			failures++;
			break;
		}
	}

	/* Test appending to a full string. */
	ep[-1] = '\0';
	len = strlcat(buf, "abcd", bufsize);
	if (len != 4 + bufsize - 1) {
		fprintf(stderr, "strlcat: failed full buffer test (2a)\n");
		failures++;
	}
	/* Make sure we only wrote where expected. */
	for (cp = buf; cp < ep - 1; cp++) {
		if (*cp != 'z') {
			fprintf(stderr,
			    "strlcat: failed full buffer test (2b)\n");
			failures++;
			break;
		}
	}

	/* Test appending to an empty string. */
	ep[-1] = 'z';
	buf[0] = '\0';
	len = strlcat(buf, "abcd", bufsize);
	if (len != 4) {
		fprintf(stderr, "strlcat: failed empty buffer test (3a)\n");
		failures++;
	}
	/* Make sure we only wrote where expected. */
	if (memcmp(buf, "abcd", sizeof("abcd")) != 0) {
		fprintf(stderr, "strlcat: failed empty buffer test (3b)\n");
		failures++;
	}
	for (cp = buf + len + 1; cp < ep; cp++) {
		if (*cp != 'z') {
			fprintf(stderr,
			    "strlcat: failed empty buffer test (3c)\n");
			failures++;
			break;
		}
	}

	/* Test appending to a NUL-terminated string. */
	memcpy(buf, "abcd", sizeof("abcd"));
	len = strlcat(buf, "efgh", bufsize);
	if (len != 8) {
		fprintf(stderr, "strlcat: failed empty buffer test (4a)\n");
		failures++;
	}
	/* Make sure we only wrote where expected. */
	if (memcmp(buf, "abcdefgh", sizeof("abcdefgh")) != 0) {
		fprintf(stderr, "strlcat: failed empty buffer test (4b)\n");
		failures++;
	}
	for (cp = buf + len + 1; cp < ep; cp++) {
		if (*cp != 'z') {
			fprintf(stderr,
			    "strlcat: failed empty buffer test (4c)\n");
			failures++;
			break;
		}
	}

        /*
         * The following tests should result in SIGSEGV, however some
         * systems may erroneously report SIGBUS.
         * These tests assume that strlcat() is signal-safe.
         */
        memset(&sa, 0, sizeof(sa));
        sigemptyset(&sa.sa_mask);
        sa.sa_handler = handler;
        sigaction(SIGSEGV, &sa, NULL);
        sigaction(SIGBUS, &sa, NULL);

        /* Test copying to a NULL buffer with non-zero size. */
        got_signal = 0;
        if (sigsetjmp(jmpenv, 1) == 0) {
                len = strlcat(NULL, "abcd", sizeof(buf));
                fprintf(stderr, "strlcat: failed NULL dst test (5a), "
                    "expected signal %d, got len %zu\n", SIGSEGV, len);
                failures++;
        } else if (got_signal != SIGSEGV) {
                fprintf(stderr, "strlcat: failed NULL dst test (5b), "
                    "expected signal %d, got %d\n", SIGSEGV, got_signal);
                failures++;
        }

        /* Test copying from a NULL src. */
	memcpy(buf, "abcd", sizeof("abcd"));
        got_signal = 0;
        if (sigsetjmp(jmpenv, 1) == 0) {
                len = strlcat(buf, NULL, sizeof(buf));
                fprintf(stderr, "strlcat: failed NULL src test (6a), "
                    "expected signal %d, got len %zu\n", SIGSEGV, len);
                failures++;
        } else if (got_signal != SIGSEGV) {
                fprintf(stderr, "strlcat: failed NULL src test (6b), "
                    "expected signal %d, got %d\n", SIGSEGV, got_signal);
                failures++;
        }

	return failures;
}
@


1.1
log
@Add simple strlcat regress
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d24 2
d28 12
a39 1
int main(int argc, char *argv[])
d42 2
a44 1
	size_t len, bufsize;
d55 1
a55 1
	memset(buf, 'a', bufsize);
d61 2
a62 1
		fprintf(stderr, "strlcat: failed unterminated buffer test (1a)");
d67 3
a69 2
		if (*cp != 'a') {
			fprintf(stderr, "strlcat: failed unterminated buffer test (1b)");
d79 1
a79 1
		fprintf(stderr, "strlcat: failed full buffer test (2a)");
d84 3
a86 2
		if (*cp != 'a') {
			fprintf(stderr, "strlcat: failed full buffer test (2b)");
d93 1
a93 1
	ep[-1] = 'a';
d97 1
a97 1
		fprintf(stderr, "strlcat: failed empty buffer test (3a)");
d102 1
a102 1
		fprintf(stderr, "strlcat: failed empty buffer test (3b)");
d106 3
a108 2
		if (*cp != 'a') {
			fprintf(stderr, "strlcat: failed empty buffer test (3c)");
d118 1
a118 1
		fprintf(stderr, "strlcat: failed empty buffer test (4a)");
d123 1
a123 1
		fprintf(stderr, "strlcat: failed empty buffer test (4b)");
d127 3
a129 2
		if (*cp != 'a') {
			fprintf(stderr, "strlcat: failed empty buffer test (4c)");
d134 38
@

