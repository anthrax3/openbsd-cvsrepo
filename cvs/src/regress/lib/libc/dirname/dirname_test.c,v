head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.6
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.4
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.3.0.36
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.26
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.34
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.32
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.30
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.28
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.24
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.22
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.20
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.18
	OPENBSD_5_0:1.3.0.16
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.14
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.12
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.8
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.10
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.6
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.4
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.2
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.1.0.2
	OPENBSD_4_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2017.02.25.07.28.32;	author jsg;	state Exp;
branches;
next	1.3;
commitid	o45S2hSKbgrOD8tL;

1.3
date	2007.10.20.12.37.09;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2007.10.20.12.35.54;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2007.05.17.03.02.32;	author ray;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Add missing includes to avoid implicit function declarations.
@
text
@/*
 * Copyright (c) 2007 Bret S. Lambert <blambert@@gsipt.net>
 *
 * Public domain.
 */

#include <sys/param.h>

#include <libgen.h>
#include <stdio.h>
#include <string.h>
#include <limits.h>
#include <errno.h>
#include <err.h>

int
main(void)
{
	char path[2 * MAXPATHLEN];
	char dname[128];
	const char *dir = "junk";
	const char *fname = "/file.name.ext";
	char *str;
	int i;

	/* Test normal functioning */
	strlcpy(path, "/", sizeof(path));
	strlcpy(dname, "/", sizeof(dname));
	strlcat(path, dir, sizeof(path)); 
	strlcat(dname, dir, sizeof(dname)); 
	strlcat(path, fname, sizeof(path));
	str = dirname(path);
	if (strcmp(str, dname) != 0)
		errx(1, "0: dirname(%s) = %s != %s", path, str, dname);

	/*
	 * There are four states that require special handling:
	 *
	 * 1) path is NULL
	 * 2) path is the empty string
	 * 3) path is composed entirely of slashes
	 * 4) the resulting name is larger than MAXPATHLEN
	 *
	 * The first two cases require that a pointer
	 * to the string "." be returned.
	 *
	 * The third case requires that a pointer
	 * to the string "/" be returned.
	 *
	 * The final case requires that NULL be returned
	 * and errno * be set to ENAMETOOLONG.
	 */
	/* Case 1 */
	str = dirname(NULL);
	if (strcmp(str, ".") != 0)
		errx(1, "1: dirname(NULL) = %s != .", str);

	/* Case 2 */
	strlcpy(path, "", sizeof(path));
	str = dirname(path);
	if (strcmp(str, ".") != 0)
		errx(1, "2: dirname(%s) = %s != .", path, str);

	/* Case 3 */
	for (i = 0; i < MAXPATHLEN - 1; i++)
		strlcat(path, "/", sizeof(path));	/* path cleared above */
	str = dirname(path);
	if (strcmp(str, "/") != 0)
		errx(1, "3: dirname(%s) = %s != /", path, str);

	/* Case 4 */
	strlcpy(path, "/", sizeof(path));		/* reset path */
	for (i = 0; i <= MAXPATHLEN; i += strlen(dir))
		strlcat(path, dir, sizeof(path));
	strlcat(path, fname, sizeof(path));
	str = dirname(path);
	if (str != NULL)
		errx(1, "4: dirname(%s) = %s != NULL", path, str);
	if (errno != ENAMETOOLONG)
		errx(1, "4: dirname(%s) sets errno to %d", path, errno);

	return (0);
}
@


1.3
log
@Give more details on failure.
@
text
@d14 1
@


1.2
log
@Make this work on 64 bit platforms by using strlen() instead of sizeof()...
worked by accident.
@
text
@d33 1
a33 1
		goto fail;
d55 1
a55 1
		goto fail;
d61 1
a61 1
		goto fail;
d68 1
a68 1
		goto fail;
d76 4
a79 2
	if (str != NULL || errno != ENAMETOOLONG)
		goto fail;
a81 2
fail:
	return (1);
@


1.1
log
@Add basename(3) and dirname(3) regression tests, from tbert.

OK otto@@.
@
text
@d72 1
a72 1
	for (i = 0; i <= MAXPATHLEN; i += sizeof(dir))
@

