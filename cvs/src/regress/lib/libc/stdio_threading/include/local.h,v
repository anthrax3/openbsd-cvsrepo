head	1.5;
access;
symbols
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.14
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.10
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.8
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.6
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.2.0.18
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.14
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.12
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.10
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.8
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.4
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.2
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.0.2
	OPENBSD_4_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2014.07.20.01.38.40;	author guenther;	state Exp;
branches;
next	1.4;
commitid	0acpjAf5myNxgwB5;

1.4
date	2014.07.20.01.26.17;	author guenther;	state Exp;
branches;
next	1.3;
commitid	bqeheLIfutE17kMg;

1.3
date	2014.05.20.01.25.24;	author guenther;	state Exp;
branches;
next	1.2;

1.2
date	2010.05.08.19.16.33;	author naddy;	state Exp;
branches;
next	1.1;

1.1
date	2009.11.19.08.06.06;	author guenther;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Make sure the correct errno is reported by warn* or err* and not
the errno of an intervening cleanup operation like close/unlink/etc.

Diff from Doug Hogan (doug (at) acyclic.org)
@
text
@/*
 * Copyright (c) 2008 Bret S. Lambert <blambert@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <err.h>
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <pthread.h>

#define THREAD_COUNT 64

#define TEXT	"barnacles"
#define	TEXT_N	"barnacles\n"

void	run_threads(void (*)(void *), void *);

static pthread_rwlock_t	start;
static void	(*real_func)(void *);

static void *
thread(void *arg)
{
	int	r;

	if ((r = pthread_rwlock_rdlock(&start)))
		errc(1, r, "could not obtain lock in thread");
	real_func(arg);
	if ((r = pthread_rwlock_unlock(&start)))
		errc(1, r, "could not release lock in thread");
	return NULL;
}

void
run_threads(void (*func)(void *), void *arg)
{
	pthread_t	self, pthread[THREAD_COUNT];
	int	i, r;

	self = pthread_self();
	real_func = func;
	if ((r = pthread_rwlock_init(&start, NULL)))
		errc(1, r, "could not initialize lock");

	if ((r = pthread_rwlock_wrlock(&start)))		/* block */
		errc(1, r, "could not lock lock");

	for (i = 0; i < THREAD_COUNT; i++)
		if ((r = pthread_create(&pthread[i], NULL, thread, arg))) {
			warnc(r, "could not create thread");
			pthread[i] = self;
		}


	if ((r = pthread_rwlock_unlock(&start)))		/* unleash */
		errc(1, r, "could not release lock");

	sleep(1);

	if ((r = pthread_rwlock_wrlock(&start)))		/* sync */
		errx(1, "parent could not sync with children: %s",
		    strerror(r));

	for (i = 0; i < THREAD_COUNT; i++)
		if (! pthread_equal(pthread[i], self) &&
		    (r = pthread_join(pthread[i], NULL)))
			warnc(r, "could not join thread");
}

@


1.4
log
@Add missing include.  Tickled by Doug Hogan (doug (at) acyclic.org)
@
text
@d18 1
@


1.3
log
@Use errc/warnc to simplify code.
Also, in 'ftp', always put the error message last, after the hostname/ipaddr.

ok jsing@@ krw@@ millert@@
@
text
@d17 1
@


1.2
log
@* add #includes to pull in missing prototypes, as pointed out by gcc4
* fix CFLAGS syntax for make depend

ok blambert@@
@
text
@d39 1
a39 1
		errx(1, "could not obtain lock in thread: %s", strerror(r));
d42 1
a42 1
		errx(1, "could not release lock in thread: %s", strerror(r));
d55 1
a55 1
		errx(1, "could not initialize lock: %s", strerror(r));
d58 1
a58 1
		errx(1, "could not lock lock: %s", strerror(r));
d62 1
a62 1
			warnx("could not create thread: %s", strerror(r));
d68 1
a68 1
		errx(1, "could not release lock: %s", strerror(r));
d79 1
a79 1
			warnx("could not join thread: %s", strerror(r));
@


1.1
log
@Add regression tests for stdio threading.  Originally by blambert with
some further hacking by me
@
text
@d18 1
@

