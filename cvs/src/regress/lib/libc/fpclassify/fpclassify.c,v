head	1.1;
access;
symbols
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.32
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.22
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.30
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.28
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.26
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.24
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.20
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.18
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.16
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.14
	OPENBSD_5_0:1.1.0.12
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.10
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.8
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.4
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.6
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.1
date	2008.09.07.20.36.10;	author martynas;	state Exp;
branches;
next	;


desc
@@


1.1
log
@- replace dtoa w/ David's gdtoa, version 2008-03-15
- provide proper dtoa locks
- use the real strtof implementation
- add strtold, __hdtoa, __hldtoa
- add %a/%A support
- don't lose precision in printf, don't round to double anymore
- implement extended-precision versions of libc functions: fpclassify,
isnan, isinf, signbit, isnormal, isfinite, now that the ieee.h is
fixed
- separate vax versions of strtof, and __hdtoa
- add complex math support.  added functions: cacos, casin, catan,
ccos, csin, ctan, cacosh, casinh, catanh, ccosh, csinh, ctanh, cexp,
clog, cabs, cpow, csqrt, carg, cimag, conj, cproj, creal, cacosf,
casinf, catanf, ccosf, csinf, ctanf, cacoshf, casinhf, catanhf,
ccoshf, csinhf, ctanhf, cexpf, clogf, cabsf, cpowf, csqrtf, cargf,
cimagf, conjf, cprojf, crealf
- add fdim, fmax, fmin
- add log2. (adapted implementation e_log.c.  could be more acruate
& faster, but it's good enough for now)
- remove wrappers & cruft in libm, supposed to work-around mistakes
in SVID, etc.;  use ieee versions.  fixes issues in python 2.6 for
djm@@
- make _digittoint static
- proper definitions for i386, and amd64 in ieee.h
- sh, powerpc don't really have extended-precision
- add missing definitions for mips64 (quad), m{6,8}k (96-bit) float.h
for LDBL_*
- merge lead to frac for m{6,8}k, for gdtoa to work properly
- add FRAC*BITS & EXT_TO_ARRAY32 definitions in ieee.h, for hdtoa&ldtoa
to use
- add EXT_IMPLICIT_NBIT definition, which indicates implicit
normalization bit
- add regression tests for libc: fpclassify and printf
- arith.h & gd_qnan.h definitions
- update ieee.h: hppa doesn't have quad-precision, hppa64 does
- add missing prototypes to gdtoaimp
- on 64-bit platforms make sure gdtoa doesn't use a long when it
really wants an int
- etc., what i may have forgotten...
- bump libm major, due to removed&changed symbols
- no libc bump, since this is riding on djm's libc major crank from
a day ago

discussed with / requested by / testing theo, sthen@@, djm@@, jsg@@,
merdely@@, jsing@@, tedu@@, brad@@, jakemsr@@, and others.
looks good to millert@@
parts of the diff ok kettenis@@

this commit does not include:
- man page changes
@
text
@/*	$OpenBSD$	*/
/*-
 * Copyright (c) 2003 Mike Barcroft <mike@@FreeBSD.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $FreeBSD: src/tools/regression/lib/libc/gen/test-fpclassify.c,v 1.3 2003/03/27 05:32:28 das Exp $
 */

#include <assert.h>
#include <float.h>
#include <math.h>
#include <stdlib.h>

int
main(void)
{

	assert(fpclassify((float)0) == FP_ZERO);
	assert(fpclassify((float)-0.0) == FP_ZERO);
	assert(fpclassify((float)1) == FP_NORMAL);
	assert(fpclassify((float)1000) == FP_NORMAL);
#ifndef __alpha__
	assert(fpclassify(0x1.2p-150f) == FP_SUBNORMAL);
#endif /* !__alpha__ */
	assert(fpclassify(HUGE_VALF) == FP_INFINITE);
	assert(fpclassify((float)HUGE_VAL) == FP_INFINITE);
	assert(fpclassify((float)HUGE_VALL) == FP_INFINITE);
	assert(fpclassify(NAN) == FP_NAN);

	assert(fpclassify((double)0) == FP_ZERO);
	assert(fpclassify((double)-0) == FP_ZERO);
	assert(fpclassify((double)1) == FP_NORMAL);
	assert(fpclassify((double)1000) == FP_NORMAL);
#ifndef __alpha__
	assert(fpclassify(0x1.2p-1075) == FP_SUBNORMAL);
#endif /* !__alpha__ */
	assert(fpclassify(HUGE_VAL) == FP_INFINITE);
	assert(fpclassify((double)HUGE_VALF) == FP_INFINITE);
	assert(fpclassify((double)HUGE_VALL) == FP_INFINITE);
	assert(fpclassify((double)NAN) == FP_NAN);

	assert(fpclassify((long double)0) == FP_ZERO);
	assert(fpclassify((long double)-0.0) == FP_ZERO);
	assert(fpclassify((long double)1) == FP_NORMAL);
	assert(fpclassify((long double)1000) == FP_NORMAL);
#if (LDBL_MANT_DIG > DBL_MANT_DIG)
	assert(fpclassify(0x1.2p-16383L) == FP_SUBNORMAL);
#endif /* (LDBL_MANT_DIG > DBL_MANT_DIG) */
	assert(fpclassify(HUGE_VALL) == FP_INFINITE);
	assert(fpclassify((long double)HUGE_VALF) == FP_INFINITE);
	assert(fpclassify((long double)HUGE_VAL) == FP_INFINITE);
	assert(fpclassify((long double)NAN) == FP_NAN);

	return (0);
}
@
