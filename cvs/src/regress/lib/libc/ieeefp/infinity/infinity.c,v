head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.58
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.2.0.56
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.52
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.42
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.50
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.48
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.46
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.44
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.40
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.38
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.36
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.34
	OPENBSD_5_0:1.2.0.32
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.30
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.28
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.24
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.26
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.22
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.20
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.18
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.16
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.14
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.12
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.10
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.8
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.6
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.4
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.2
	OPENBSD_3_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.2
date	2004.01.16.19.34.37;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.15.18.53.24;	author miod;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Test more ways of producing a positive infinity, and then test negative
infinity as well to prevent entropy leak; the usual suspects still fail
all tests.
@
text
@/*	$OpenBSD: infinity.c,v 1.1 2004/01/15 18:53:24 miod Exp $	*/
/*
 * Written by Miodrag Vallat, 2004 - Public Domain
 * Inspired from Perl's t/op/arith test #134
 */

#include <math.h>
#include <signal.h>
#include <unistd.h>

void
sigfpe(int signum)
{
	/* looks like we don't handle fp overflow correctly... */
	_exit(1);
}

int
main(int argc, char *argv[])
{
	int opt;
	double d, two;
	int i;
	char method = 'a';

	while ((opt = getopt(argc, argv, "amnp")) != -1)
		method = (char)opt;

	signal(SIGFPE, sigfpe);

	switch (method) {
	case 'a':
		/* try to produce +Inf through addition */
		d = 1.0;
		for (i = 2000; i != 0; i--) {
			d = d + d;
		}
		/* result should be _positive_ infinity */
		if (!isinf(d) || copysign(1.0, d) < 0.0)
			return (1);
		break;
	case 'm':
		/* try to produce +Inf through multiplication */
		d = 1.0;
		two = 2.0;
		for (i = 2000; i != 0; i--) {
			d = d * two;
		}
		/* result should be _positive_ infinity */
		if (!isinf(d) || copysign(1.0, d) < 0.0)
			return (1);
		break;
	case 'n':
		/* try to produce -Inf through subtraction */
		d = -1.0;
		for (i = 2000; i != 0; i--) {
			d = d + d;
		}
		/* result should be _negative_ infinity */
		if (!isinf(d) || copysign(1.0, d) > 0.0)
			return (1);
		break;
	case 'p':
		/* try to produce -Inf through multiplication */
		d = -1.0;
		two = 2.0;
		for (i = 2000; i != 0; i--) {
			d = d * two;
		}
		/* result should be _negative_ infinity */
		if (!isinf(d) || copysign(1.0, d) > 0.0)
			return (1);
		break;
	}

	return (0);
}
@


1.1
log
@Add a new regression test, which checks that we handle fp overflow correctly,
and produce a correct infinity.

Currently, this tests fails on 68060 (060sp is to blame) and 88100 processors,
and maybe more.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d9 1
d21 2
a22 1
	double d, u;
d24 4
d31 43
a73 3
	d = 1.0;
	for (i = 2000; i != 0; i--) {
		d = d * 2.0;
d76 1
a76 2
	/* result should be _positive_ infinity */
	return ((isinf(d) && copysign(1.0, d) > 0.0) ? 0 : 1);
@

