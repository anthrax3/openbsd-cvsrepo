head	1.4;
access;
symbols
	OPENBSD_6_0:1.4.0.10
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.8
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.6
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.3.0.6
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.2
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.1.0.2
	OPENBSD_5_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2014.07.20.01.58.37;	author guenther;	state Exp;
branches;
next	1.3;
commitid	aJlk4wBMavX2B5tS;

1.3
date	2013.03.28.09.35.58;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2013.03.25.03.33.28;	author guenther;	state Exp;
branches;
next	1.1;

1.1
date	2013.01.01.17.43.07;	author mpi;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Fix ordering breakage, moving the fclose() test last again.
Also correct some format strings.

From Doug Hogan (doug (at) acyclic.org)
@
text
@/*	$OpenBSD: open_memstreamtest.c,v 1.3 2013/03/28 09:35:58 mpi Exp $ */

/*
 * Copyright (c) 2011 Martin Pieuchot <mpi@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <err.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#define OFFSET 16384

const char start[] = "start";
const char hello[] = "hello";

int
main(void)
{
	FILE	*fp;
	char	*buf = (char *)0xff;
	size_t	 size = 0;
	off_t	 off;
	int	 i, failures = 0;

	if ((fp = open_memstream(&buf, &size)) == NULL) {
		warn("open_memstream failed");
		return (1);
	}

	off = ftello(fp);
	if (off != 0) {
		warnx("ftello failed. (1)");
		failures++;
	}

	if (fflush(fp) != 0) {
		warnx("fflush failed. (2)");
		failures++;
	}

	if (size != 0) {
		warnx("string should be empty. (3)");
		failures++;
	}

	if (buf == (char *)0xff) {
		warnx("buf not updated. (4)");
		failures++;
	}

	if (fseek(fp, OFFSET, SEEK_SET) != 0) {
		warnx("failed to fseek. (5)");
		failures++;
	}

	if (fprintf(fp, hello) == EOF) {
		warnx("fprintf failed. (6)");
		failures++;
	}

	if (fflush(fp) == EOF) {
		warnx("fflush failed. (7)");
		failures++;
	}

	if (size != OFFSET + sizeof(hello)-1) {
		warnx("failed, size %zu should be %zu. (8)",
		    size, OFFSET + sizeof(hello)-1);
		failures++;
	}

	if (fseek(fp, 0, SEEK_SET) != 0) {
		warnx("failed to fseek. (9)");
		failures++;
	}

	if (fprintf(fp, start) == EOF) {
		warnx("fprintf failed. (10)");
		failures++;
	}

	if (fflush(fp) == EOF) {
		warnx("fflush failed. (11)");
		failures++;
	}

	if (size != sizeof(start)-1) {
		warnx("failed, size %zu should be %zu. (12)",
		    size, sizeof(start)-1);
		failures++;
	}

	/* Needed for sparse files */
	if (strncmp(buf, start, sizeof(start)-1) != 0) {
		warnx("failed, buffer didn't start with '%s'. (13)", start);
		failures++;
	}
	for (i = sizeof(start)-1; i < OFFSET; i++)
		if (buf[i] != '\0') {
			warnx("failed, buffer non zero (offset %d). (14)", i);
			failures++;
			break;
		}

	if (memcmp(buf + OFFSET, hello, sizeof(hello)-1) != 0) {
		warnx("written string incorrect. (15)");
		failures++;
	}

	/* verify that simply seeking past the end doesn't increase the size */
	if (fseek(fp, 100, SEEK_END) != 0) {
		warnx("failed to fseek. (16)");
		failures++;
	}

	if (fflush(fp) == EOF) {
		warnx("fflush failed. (17)");
		failures++;
	}

	if (size != OFFSET + sizeof(hello)-1) {
		warnx("failed, size %zu should be %zu. (18)",
		    size, OFFSET + sizeof(hello)-1);
		failures++;
	}

	if (fseek(fp, 8, SEEK_SET) != 0) {
		warnx("failed to fseek. (19)");
		failures++;
	}

	if (ftell(fp) != 8) {
		warnx("failed seek test. (20)");
		failures++;
	}

	/* Try to seek backward */
	if (fseek(fp, -1, SEEK_CUR) != 0) {
		warnx("failed to fseek. (21)");
		failures++;
	}

	if (ftell(fp) != 7) {
		warnx("failed seeking backward. (22)");
		failures++;
	}

	if (fseek(fp, 5, SEEK_CUR) != 0) {
		warnx("failed to fseek. (23)");
		failures++;
	}

	if (fclose(fp) == EOF) {
		warnx("fclose failed. (24)");
		failures++;
	}

	if (size != 12) {
		warnx("failed, size %zu should be %u.  (25)",
		    size, 12);
		failures++;
	}

	free(buf);

	return (failures);
}
@


1.3
log
@More tests for negative seeks, prodded by matthew@@
@
text
@d1 1
a1 1
/*	$OpenBSD: open_memstreamtest.c,v 1.2 2013/03/25 03:33:28 guenther Exp $ */
d81 1
a81 1
		warnx("failed, size %zu should be %u. (8)",
d102 1
a102 1
		warnx("failed, size %zu should be %u. (12)",
d130 2
a131 2
	if (fclose(fp) == EOF) {
		warnx("fclose failed. (17)");
d136 1
a136 1
		warnx("failed, size %zu should be %u. (18)",
d159 16
@


1.2
log
@Add some more tests; prodded by mpi@@
@
text
@d1 2
a2 1
/*	$OpenBSD: open_memstreamtest.c,v 1.1 2013/01/01 17:43:07 mpi Exp $ */
d138 21
@


1.1
log
@Simple tests for fmemopen(3) and open_memstream(3)
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d26 3
d36 1
a36 1
	int	 i = 0, failures = 0;
d69 1
a69 1
	if (fprintf(fp, "hello") == EOF) {
d74 23
a96 2
	if (fclose(fp) == EOF) {
		warnx("fclose failed. (7)");
d100 3
a102 2
	if (size != OFFSET + 5) {
		warnx("failed, size %zu should be %u\n", size, OFFSET + 5);
d107 7
a113 3
	while (i != OFFSET)
		if (buf[i++] != '\0') {
			warnx("failed, buffer non zero'ed (offset %d). (8)", i);
d118 19
a136 2
	if (memcmp(buf + OFFSET, "hello", 5) != 0) {
		warnx("written string incorrect. (9)");
@

