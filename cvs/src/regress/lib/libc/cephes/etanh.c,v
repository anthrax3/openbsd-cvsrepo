head	1.1;
access;
symbols
	OPENBSD_6_2:1.1.0.28
	OPENBSD_6_2_BASE:1.1
	OPENBSD_6_1:1.1.0.26
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.22
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.12
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.20
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.18
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.16
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.14
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.10
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.8
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.6
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.4
	OPENBSD_5_0:1.1.0.2
	OPENBSD_5_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.1
date	2011.07.02.18.11.01;	author martynas;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Import Steve Moshier's printf/scanf tester.
@
text
@/*	$OpenBSD$	*/

/*
 * Copyright (c) 2008 Stephen L. Moshier <steve@@moshier.net>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*							xtanh.c		*/
/* hyperbolic tangent check routine */
/* this subroutine is used by the exponential function routine */
/* by Stephen L. Moshier. */



#include "ehead.h"


void etanh( x, y )
unsigned short *x, *y;
{
unsigned short e[NE], r[NE], j[NE], xx[NE], m2[NE];
short i, n;
long lj;

emov( x, r );
r[NE-1] &= (unsigned short )0x7fff;
if( ecmp(r, eone) >= 0 )
	{
/* tanh(x) = (exp(x) - exp(-x)) / (exp(x) + exp(-x))
 * Note eexp() calls xtanh, but with an argument less than (1 + log 2)/2.
 */
	eexp( r, e );
	ediv( e, eone, r );
	esub( r, e, xx );
	eadd( r, e, j );
	ediv( j, xx, y );
	return;
	}

emov( etwo, m2 );
eneg( m2 );

n = NBITS/8;	/* Number of terms to do in the continued fraction */
lj = 2 * n + 1;
ltoe( &lj, j );

emov( j, e );
emul( x, x, xx );

/* continued fraction */
for( i=0; i<n; i++)
	{
	ediv( e, xx, r );
	eadd( m2, j, j );
	eadd( r, j, e );
	}

ediv( e, x, y );
}
@
