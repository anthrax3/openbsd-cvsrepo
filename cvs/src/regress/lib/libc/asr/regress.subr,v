head	1.4;
access;
symbols
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.4
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.2.0.14
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.4
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.12
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.10
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.8
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.2
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.1.1.1.0.4
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.2
	OPENBSD_5_2_BASE:1.1.1.1
	eric_g2k12:1.1.1.1
	eric:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2017.03.14.20.22.06;	author eric;	state Exp;
branches;
next	1.3;
commitid	BDCUUrB3PXw8J0eM;

1.3
date	2017.03.10.17.23.48;	author eric;	state Exp;
branches;
next	1.2;
commitid	fjRD5UmQmNzb6pN3;

1.2
date	2013.03.28.09.36.03;	author eric;	state Exp;
branches;
next	1.1;

1.1
date	2012.07.13.17.49.53;	author eric;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.07.13.17.49.53;	author eric;	state Exp;
branches;
next	;


desc
@@


1.4
log
@copy /etc/services in test directory
@
text
@#!/bin/sh
#	$OpenBSD: regress.subr,v 1.3 2017/03/10 17:23:48 eric Exp $

set -e

fail()
{
	echo "*** ERROR: $@@"
	exit 1
}

regress()
{
	local cmd="$1"
	local bin0="/bin/${cmd}${A}"
	local bin1="/bin/${cmd}${B}"
	local out="${OUTDIR}/test-${COUNT}.out"
	local out0="${OUTDIR}/test-${COUNT}${A}.out"
	local out1="${OUTDIR}/test-${COUNT}${B}.out"
	local err0="${OUTDIR}/test-${COUNT}${A}.err"
	local err1="${OUTDIR}/test-${COUNT}${B}.err"
	local outdiff="${OUTDIR}/test-${COUNT}${A}${B}.diff"
	shift

	test -x "${ROOTDIR}${bin0}" || fail "${ROOTDIR}${bin0}" not executable
	test -x "${ROOTDIR}${bin1}" || fail "${ROOTDIR}${bin1}" not executable

	echo -n "${cmd} $@@ ."

	set +e
	chroot -u bin "${ROOTDIR}" ${bin0} $@@ > ${out0}
	echo -n .
	chroot -u bin "${ROOTDIR}" ${bin1} $@@ > ${out1}
	echo -n "."

	diff -u ${out0} ${out1} > ${outdiff}
	set -e
	if test -s ${outdiff}; then
		FAIL=$((FAIL+1))
		echo fail
		echo "### FAIL [#${COUNT} env=${REGRESSENV}] ${cmd} $@@" >> $ERR
		cat ${outdiff} >> $ERR
		echo >> $ERR
	else
		rm ${outdiff}
		rm ${out1}
		mv ${out0} ${out}
		OK=$((OK+1))
		echo ok
		echo "### OK [#${COUNT} env=$REGRESSENV] ${cmd} $@@" >> $OUT
		cat ${out} >> $OUT
		echo >> $OUT
	fi

	COUNT=$((COUNT+1))
}

regress_setenv()
{
	local _name="$1"

	echo "==> using env $_name"

	mkdir -p "${ROOTDIR}/etc/"
	cp /etc/hosts "${ROOTDIR}/etc/"
	cp /etc/resolv.conf "${ROOTDIR}/etc/"
	cp /etc/protocols "${ROOTDIR}/etc/"
	cp /etc/networks "${ROOTDIR}/etc/"
	cp /etc/services "${ROOTDIR}/etc/"

	case $_name in
	empty)
		rm -f "${ROOTDIR}/etc/*"
		;;
	local)
		;;
	file)
		grep -v lookup /etc/resolv.conf > "${ROOTDIR}/etc/resolv.conf"
		echo "lookup file" >> "${ROOTDIR}/etc/resolv.conf"
		;;
	bind)
		grep -v lookup /etc/resolv.conf > "${ROOTDIR}/etc/resolv.conf"
		echo "lookup bind" >> "${ROOTDIR}/etc/resolv.conf"
		;;
	*)
		fail unknown env $_name
		;;
	esac
	REGRESSENV=$_name
}

regress_digest()
{
	echo "===> done"
 	test -f $ERR && (echo; cat $ERR; echo "===> errfile=$ERR")
	echo "===> logfile=$OUT"
	echo "===> run=$COUNT ok=$OK fail=$FAIL error=$ERROR"

}

# needed for chroot
test "$(id -u)" -ne 0 && fail need root privileges to run this script

# we really really want to avoid erasing /etc later
test "${RUNDIR}" || fail RUNDIR is not set

ROOTDIR=$(readlink -fn ${RUNDIR})
test "${ROOTDIR}" == "/" && fail RUNDIR is root dir: ${RUNDIR}

COUNT=0
OK=0
FAIL=0
ERROR=0
A=${A:=.a}
B=${B:=.b}

OUTDIR=$(mktemp -d -p $ROOTDIR)
chmod a+rx ${OUTDIR}
echo "===> ${OUTDIR}"

OUT=$OUTDIR/regress.log
ERR=$OUTDIR/regress.err
@


1.3
log
@refresh the test infrastructure a bit.
@
text
@d2 1
a2 1
#	$OpenBSD: regress.subr,v 1.2 2013/03/28 09:36:03 eric Exp $
d69 1
@


1.2
log
@add a test case for the icmpv6 issue spotted by naddy
@
text
@d2 1
a2 9
#	$OpenBSD: regress.subr,v 1.1.1.1 2012/07/13 17:49:53 eric Exp $

TOTAL=0
FAIL=0
OK=0

EXT0=.std
EXT1=.asr
EFLAG=-ee
d14 10
a23 5
	local out;
	local _cmd=$1;
	local _bin0=/bin/$_cmd$EXT0
	local _bin1=/bin/$_cmd$EXT1
	shift;
d25 2
a26 1
	TOTAL=$((TOTAL+1))
d28 1
a28 7
	# XXX with user "bin"
	test -x $_RUNDIR$_bin0 || fail $_RUNDIR$_bin0 not executable
	test -x $_RUNDIR$_bin1 || fail $_RUNDIR$_bin1 not executable

	out=/tmp/asr_regress

	echo -n $_cmd $EFLAG $@@ "."
d31 1
a31 1
	chroot -u bin "$_RUNDIR" $_bin0 $EFLAG $@@ > $out.0
d33 2
a34 2
	chroot -u bin "$_RUNDIR" $_bin1 $EFLAG $@@ > $out.1
	echo -n ". "
d36 1
a36 1
	diff -u $out.0 $out.1 > $out.diff
d38 1
a38 1
	if test -s $out.diff; then
d41 3
a43 3
		echo "*** FAIL (env=$REGRESSENV)" $_cmd $EFLAG $@@ >> $REG
		tail -n +3 $out.diff >> $REG
		echo >> $REG
d45 3
d50 2
a51 2
		echo "OK (env=$REGRESSENV)" $_cmd $EFLAG $@@ >> $OUT
		cat $out.0 >> $OUT
d54 2
a55 1
	rm $out.diff $out.0 $out.1
d62 1
a62 1
	echo "===> using env $_name"
d64 5
a68 4
	cp /etc/hosts $_RUNDIR/etc/
	cp /etc/resolv.conf $_RUNDIR/etc/
	cp /etc/protocols $_RUNDIR/etc/
	cp /etc/networks $_RUNDIR/etc/
d72 1
a72 1
		rm -f $_RUNDIR/etc/*
d77 2
a78 2
		grep -v lookup /etc/resolv.conf > $_RUNDIR/etc/resolv.conf
		echo "lookup file" >> $_RUNDIR/etc/resolv.conf
d81 2
a82 2
		grep -v lookup /etc/resolv.conf > $_RUNDIR/etc/resolv.conf
		echo "lookup bind" >> $_RUNDIR/etc/resolv.conf
d93 5
a97 3
	echo
	cat $REG
	echo "===>" run=$TOTAL fail=$FAIL
a99 1

d104 15
a118 7
test "$RUNDIR" || fail RUNDIR is not set
_RUNDIR=$(readlink -fn ${RUNDIR})
test "$_RUNDIR" == / && fail RUNDIR is root dir: $RUNDIR

OUT=$_RUNDIR/output.log
REG=$_RUNDIR/regress.log
ETC=$_RUNDIR/etc
d120 2
a121 2
echo -n > $REG
echo -n > $OUT
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
#	$OpenBSD: Makefile,v 1.117 2011/09/17 16:59:53 pirofti Exp $
d112 1
@


1.1.1.1
log
@import regression suite for asr
@
text
@@
