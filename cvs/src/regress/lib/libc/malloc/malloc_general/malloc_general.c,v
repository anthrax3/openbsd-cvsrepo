head	1.3;
access;
symbols
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.4
	OPENBSD_6_1_BASE:1.3;
locks; strict;
comment	@ * @;


1.3
date	2017.01.24.16.03.28;	author otto;	state Exp;
branches;
next	1.2;
commitid	FBHkmWun5Huo3l5y;

1.2
date	2017.01.24.15.54.53;	author otto;	state Exp;
branches;
next	1.1;
commitid	cKWANSfqvHWTQ1j7;

1.1
date	2017.01.23.11.06.32;	author otto;	state Exp;
branches;
next	;
commitid	6m3on0hzKwJrY6WY;


desc
@@


1.3
log
@fix make clean and warnings
@
text
@/*	$OpenBSD	*/
/*
 * Copyright (c) 2017 Otto Moerbeek <otto@@drijf.net>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <err.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/* $define VERBOSE */

#define N 1000

size_t
size(void)
{
	int p = arc4random_uniform(13) + 3;
	return arc4random_uniform(1 << p);
}

struct { void *p; size_t sz; } a[N];

extern char *malloc_options;

void
fill(u_char *p, size_t sz)
{
	size_t i;

	for (i = 0; i < sz; i++)
		p[i] = i % 256;
}

void
check(u_char *p, size_t sz)
{
	size_t i;

	for (i = 0; i < sz; i++)
		if (p[i] != i % 256)
			errx(1, "check");
}

int
main(int argc, char *argv[])
{
	int count, p, i;
	void * q;
	size_t sz;

	if (argc == 1)
		errx(1, "usage: malloc_options");

	malloc_options = argv[1];

	for (count = 0; count < 800000; count++) {
		if (count % 10000 == 0) {
			printf(".");
			fflush(stdout);
		}
		p = arc4random_uniform(2);
		i = arc4random_uniform(N);
		switch (p) {
		case 0:
			if (a[i].p) {
#ifdef VERBOSE
				printf("F %p\n", a[i].p);
#endif
				if (a[i].p)
					check(a[i].p, a[i].sz);
				free(a[i].p);
				a[i].p = NULL;
			}
			sz = size();
#ifdef VERBOSE
			printf("M %zu=", sz);
#endif
			a[i].p = malloc(sz);
			a[i].sz = sz;
#ifdef VERBOSE
			printf("%p\n", a[i].p);
#endif
			if (a[i].p)
				fill(a[i].p, sz);
			break;
		case 1:
			sz = size();
#ifdef VERBOSE
			printf("R %p %zu=", a[i].p, sz);
#endif
			q = realloc(a[i].p, sz);
#ifdef VERBOSE
			printf("%p\n", q);
#endif
			if (a[i].p && q)
				check(q, a[i].sz < sz ? a[i].sz : sz);
			if (q) {
				a[i].p = q;
				a[i].sz = sz;
				fill(a[i].p, sz);
			}
			break;
		}
	}
	for (i = 0; i < N; i++) {
		if (a[i].p)
			check(a[i].p, a[i].sz);
		free(a[i].p);
	}
	printf("\n");
	return 0;
}
@


1.2
log
@make sure realloc preserves data
@
text
@d18 1
@


1.1
log
@test malloc/realloc/free with some flag combo's
@
text
@d26 2
a27 1
size_t size(void)
d33 1
a33 1
void *a[N];
d37 19
d77 1
a77 1
			if (a[i]) {
d79 1
a79 1
				printf("F %p\n", a[i]);
d81 4
a84 2
				free(a[i]);
				a[i] = NULL;
d90 2
a91 1
			a[i] = malloc(sz);
d93 1
a93 1
			printf("%p\n", a[i]);
d95 2
a96 2
			if (a[i])
				memset(a[i], 0xff, sz);
d101 1
a101 1
			printf("R %p %zu=", a[i], sz);
d103 1
a103 1
			q = realloc(a[i], sz);
d107 2
d110 3
a112 3
				a[i]= q;
				if (a[i])
					memset(a[i], 0xff, sz);
d117 5
a121 2
	for (i = 0; i < N; i++)
		free(a[i]);
@

