head	1.4;
access;
symbols
	OPENBSD_6_0:1.4.0.52
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.42
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.50
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.48
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.46
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.44
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.40
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.38
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.36
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.34
	OPENBSD_5_0:1.4.0.32
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.30
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.28
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.24
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.26
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.22
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.20
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.18
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.16
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.14
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.12
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.10
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.8
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.6
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.4
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.2
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3;
locks; strict;
comment	@ * @;


1.4
date	2003.12.25.18.49.57;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2003.08.15.23.13.07;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2003.07.31.21.48.03;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2003.07.15.10.06.31;	author otto;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Test a large negative malloc value as well.
@
text
@/*	$OpenBSD: malloc_errno.c,v 1.3 2003/08/15 23:13:07 deraadt Exp $	*/
/*
 * Public domain.  2003, Otto Moerbeek
 */
#include <err.h>
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>

static void
testerrno(size_t sz)
{
	void *p;

	errno = -1;
	p = malloc(sz);

	if (p == NULL && errno != ENOMEM)
		errx(1, "fail: %lx %p %d", (unsigned long)sz, p, errno);

	/* if alloc succeeded, test if errno did not change */
	if (p != NULL && errno != -1) 
		errx(1, "fail: %lx %p %d", (unsigned long)sz, p, errno);

	free(p);
}

/*
 * Provide some (silly) arguments to malloc(), and check if ERRNO is set
 * correctly.
 */
int
main(int argc, char *argv[])
{
	size_t i;

	testerrno(1);
	testerrno(100000);
	testerrno(-1);
	testerrno(-1000);
	testerrno(-10000);
	testerrno(-10000000);
	for (i = 0; i < 0x10; i++)
		testerrno(i * 0x10000000);
	return 0;
}
@


1.3
log
@remove extra \n in {warn,err}{,x} calls
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc_errno.c,v 1.2 2003/07/31 21:48:03 deraadt Exp $	*/
d42 1
@


1.2
log
@various cleanups; david says results are same
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc_errno.c,v 1.1 2003/07/15 10:06:31 otto Exp $	*/
d19 1
a19 1
		errx(1, "fail: %lx %p %d\n", (unsigned long)sz, p, errno);
d23 1
a23 1
		errx(1, "fail: %lx %p %d\n", (unsigned long)sz, p, errno);
@


1.1
log
@Test if malloc() sets errno correctly if it returns NULL.
ok tdeval@@ henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d33 1
a33 1
main()
@

