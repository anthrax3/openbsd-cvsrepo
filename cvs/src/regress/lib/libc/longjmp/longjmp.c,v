head	1.4;
access;
symbols
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.60
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.50
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.58
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.56
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.54
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.52
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.48
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.46
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.44
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.42
	OPENBSD_5_0:1.4.0.40
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.38
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.36
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.32
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.34
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.30
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.28
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.26
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.24
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.22
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.20
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.18
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.16
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.14
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.12
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.10
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.8
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.6
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4;
locks; strict;
comment	@ * @;


1.4
date	2002.02.18.11.27.45;	author art;	state Exp;
branches;
next	1.3;

1.3
date	2002.01.04.13.48.52;	author art;	state Exp;
branches;
next	1.2;

1.2
date	2002.01.04.13.33.17;	author art;	state Exp;
branches;
next	1.1;

1.1
date	2002.01.04.13.02.57;	author art;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Clean up.
@
text
@/*	$OpenBSD: longjmp.c,v 1.3 2002/01/04 13:48:52 art Exp $	*/
/*
 *	Artur Grabowski <art@@openbsd.org>, 2002 Public Domain.
 */

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <setjmp.h>
#include <err.h>
#include <sys/types.h>
#include <sys/time.h>
#include <sys/resource.h>


jmp_buf buf;

/*
 * When longjmp is passed the incorrect arg (0), it should translate it into
 * something better.
 *
 * The rlimit is here in case we start spinning.
 */
int
main(int argc, char **argv)
{
	struct rlimit rl;
	volatile int i, expect;
	int (*sj)(jmp_buf);
	void (*lj)(jmp_buf, int);
	int ch;
	extern char *__progname;

	sj = setjmp;
	lj = longjmp;

	while ((ch = getopt(argc, argv, "_")) != -1) {
		switch (ch) {
		case '_':
			sj = _setjmp;
			lj = _longjmp;
			break;
		default:
			fprintf(stderr, "Usage: %s [-_]\n", __progname);
			exit(1);
		}
	}

	rl.rlim_cur = 2;
	rl.rlim_max = 2;
	if (setrlimit(RLIMIT_CPU, &rl) < 0)
		err(1, "setrlimit");

	expect = 0;
	i = (*sj)(buf);
	if (i == 0 && expect != 0)
		errx(1, "setjmp returns 0 on longjmp(.., 0)");
	if (expect == 0) {
		expect = -1;
		(*lj)(buf, 0);
	}

	expect = 0;
	i = (*sj)(buf);
	if (i != expect)
		errx(1, "bad return from setjmp %d/%d", expect, i);
	if (expect < 1000)
		(*lj)(buf, expect += 2);

	return 0;
}
@


1.3
log
@Test _longjmp too. (Don't hate me for the '_' option).

sigsetjmp should be tested too, but that wasn't as easy to fit in here
(and it wasn't broken on alpha anyway).
@
text
@d1 1
a1 1
/*	$OpenBSD: longjmp.c,v 1.2 2002/01/04 13:33:17 art Exp $	*/
d3 1
a3 1
 * Artur Grabowski <art@@openbsd.org> Public Domain.
@


1.2
log
@More explicit tests of longjmp.
@
text
@d1 1
a1 1
/*	$OpenBSD: longjmp.c,v 1.1 2002/01/04 13:02:57 art Exp $	*/
d6 3
d25 1
a25 1
main()
d29 19
d55 1
a55 1
	i = setjmp(buf);
d60 1
a60 1
		longjmp(buf, 0);
d64 1
a64 1
	i = setjmp(buf);
d68 1
a68 1
		longjmp(buf, expect += 2);
@


1.1
log
@test for what longjmp(.., 0) does
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d19 1
a19 2
 * Test is simple. rlimit the cpu time and throw an incorrect longjmp. If 0
 * is not translated we'll spin until we hit the cpu time limit.
d25 1
d32 6
a37 1
	if (setjmp(buf) == 0)
d39 8
@

