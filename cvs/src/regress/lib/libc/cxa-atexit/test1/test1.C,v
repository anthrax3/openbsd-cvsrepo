head	1.1;
access;
symbols
	OPENBSD_6_2_BASE:1.1
	OPENBSD_6_1:1.1.0.40
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.36
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.26
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.34
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.32
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.30
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.28
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.24
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.22
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.20
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.18
	OPENBSD_5_0:1.1.0.16
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.14
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.12
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.8
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.10
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.6
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.4
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.2
	OPENBSD_4_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.1
date	2007.09.03.14.42.44;	author millert;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Adapt atexit() regress to recent changes and add __cxa_atexit() regress.
__cxa_atexit() regress from kurt@@
@
text
@/*      $OpenBSD$	*/

/*
 * Copyright (c) 2007 Kurt Miller <kurt@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <dlfcn.h>
#include <err.h>
#include <stdio.h>

int check1, check2;

int
main()
{
	void *libgd1, *libgd2;
	void (*gd_test)();
	int i;

	for (i=0; i < 50; i++) {
		check1 = check2 = 1;

		libgd1 = dlopen(LIBGD1, RTLD_LAZY);
		if (libgd1 == NULL)
                	errx(1, "dlopen(%s, RTLD_LAZY) FAILED\n", LIBGD1);

        	gd_test = (void (*)())dlsym(libgd1, "gd_test1");
		if (gd_test == NULL)
			errx(1, "dlsym(libgd1, \"gd_test1\") FAILED\n");

		(*gd_test)();

		libgd2 = dlopen(LIBGD2, RTLD_LAZY);
		if (libgd2 == NULL)
                	errx(1, "dlopen(%s, RTLD_LAZY) FAILED\n", LIBGD2);

        	gd_test = (void (*)())dlsym(libgd2, "gd_test2");
		if (gd_test == NULL)
			errx(1, "dlsym(libgd2, \"gd_test2\") FAILED\n");

		(*gd_test)();

		dlclose(libgd1);
		dlclose(libgd2);

		if (check1 || check2)
			errx(1, "global destructors not called\n");
	}

	return (0);
}
@
