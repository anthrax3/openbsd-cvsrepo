head	1.1;
access;
symbols
	OPENBSD_6_2:1.1.0.40
	OPENBSD_6_2_BASE:1.1
	OPENBSD_6_1:1.1.0.42
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.38
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.28
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.36
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.34
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.32
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.30
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.26
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.24
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.22
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.20
	OPENBSD_5_0:1.1.0.18
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.16
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.14
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.10
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.12
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.8
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.6
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.4
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.2
	OPENBSD_4_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.1
date	2007.05.17.03.02.32;	author ray;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Add basename(3) and dirname(3) regression tests, from tbert.

OK otto@@.
@
text
@/*
 * Copyright (c) 2007 Bret S. Lambert <blambert@@gsipt.net>
 *
 * Public domain.
 */

#include <sys/param.h>

#include <libgen.h>
#include <stdio.h>
#include <string.h>
#include <limits.h>
#include <errno.h>

int
main(void)
{
	char path[2 * MAXPATHLEN];
	const char *dir = "junk/";
	const char *fname = "file.name.ext";
	char *str;
	int i;

	/* Test normal functioning */
	strlcpy(path, "/", sizeof(path));
	strlcat(path, dir, sizeof(path)); 
	strlcat(path, fname, sizeof(path));
	str = basename(path);
	if (strcmp(str, fname) != 0)
		goto fail;

	/*
	 * There are four states that require special handling:
	 *
	 * 1) path is NULL
	 * 2) path is the empty string
	 * 3) path is composed entirely of slashes
	 * 4) the resulting name is larger than MAXPATHLEN
	 *
	 * The first two cases require that a pointer
	 * to the string "." be returned.
	 *
	 * The third case requires that a pointer
	 * to the string "/" be returned.
	 *
	 * The final case requires that NULL be returned
	 * and errno * be set to ENAMETOOLONG.
	 */
	/* Case 1 */
	str = basename(NULL);
	if (strcmp(str, ".") != 0)
		goto fail;

	/* Case 2 */
	strlcpy(path, "", sizeof(path));
	str = basename(path);
	if (strcmp(str, ".") != 0)
		goto fail;

	/* Case 3 */
	for (i = 0; i < MAXPATHLEN - 1; i++)
		strlcat(path, "/", sizeof(path));	/* path cleared above */
	str = basename(path);
	if (strcmp(str, "/") != 0)
		goto fail;

	/* Case 4 */
	strlcpy(path, "/", sizeof(path));
	strlcat(path, dir, sizeof(path));
	for (i = 0; i <= MAXPATHLEN; i += sizeof(fname))
		strlcat(path, fname, sizeof(path));
	str = basename(path);
	if (str != NULL || errno != ENAMETOOLONG)
		goto fail;

	return (0);
fail:
	return (1);
}
@
