head	1.3;
access;
symbols
	OPENBSD_6_1:1.3.0.4
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.1.0.12
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.2
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.10
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.8
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.6
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.4
	OPENBSD_5_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2017.01.12.17.30.30;	author mpi;	state Exp;
branches;
next	1.2;
commitid	AKGN5nXGgjXK0syA;

1.2
date	2016.11.22.13.39.46;	author mpi;	state Exp;
branches;
next	1.1;
commitid	J1Y0uVLqERLrLXQG;

1.1
date	2013.08.09.16.20.10;	author syl;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Remove more checks testing for empty option strings.

These tests never passed and as recently reported by Helg via
yasuoka@@ some fuse plugins depends on this behavior.
@
text
@/*
 * Copyright (c) Sylvestre Gallon <ccna.syl@@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <string.h>
#include <fuse_opt.h>

#define ADD_ARG(fa, a)	if (fuse_opt_add_arg(fa, a) != 0) \
				return (1);

char *argstest[] = {
	"-d",
	"test",
	"--test",
	"-o foo",
	"barfoo"
};

int
main(int ac, char **av)
{
	struct fuse_args args = FUSE_ARGS_INIT(ac, av);
	int len, i;

	len = sizeof(argstest) / sizeof(*argstest);

	for (i = 0; i < len; i++)
		ADD_ARG(&args, argstest[i]);

	if (!args.allocated)
		return (1);
	if (fuse_opt_add_arg(&args, NULL) != -1)
		return (2);

	for (i = 0; i < len; i++)
		if (strcmp(args.argv[i+1], argstest[i]) != 0)
			return (4);

	if (args.argc != len + 1)
		return (5);

	fuse_opt_free_args(&args);
	if (args.allocated)
		return (6);
	return (0);
}

@


1.2
log
@Return different error number to know which test is failing.
@
text
@a45 2
	if (fuse_opt_add_arg(&args, "") != -1)
		return (3);
@


1.1
log
@Add regress test for fuse_opt.
@
text
@d45 1
a45 1
		return (1);
d47 1
a47 1
		return (1);
d51 1
a51 1
			return (1);
d54 1
a54 1
		return (1);
d58 1
a58 1
		return (1);
@

