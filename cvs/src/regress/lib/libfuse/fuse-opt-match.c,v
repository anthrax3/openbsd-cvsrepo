head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.2
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.4
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.1.0.12
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.2
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.10
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.8
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.6
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.4
	OPENBSD_5_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2017.01.04.11.55.31;	author stsp;	state Exp;
branches;
next	1.2;
commitid	hUnXwfrnsw4oqpia;

1.2
date	2016.11.22.13.39.46;	author mpi;	state Exp;
branches;
next	1.1;
commitid	J1Y0uVLqERLrLXQG;

1.1
date	2013.08.09.16.20.10;	author syl;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Remove a check for empty option strings from our fuse regress tests.

Some fuse plugins rely on empty options (exfat-fuse, ntfs-3g) so this part
of the regress test was bogus. It ended up misleading mpi@@ and myself when
we made a change in libfuse/fuse_opt.c r1.17 which broke some fuse plugins.

Regression with broken exfat-fuse reported by Helg via yasuoka@@.
This commit just fixes our regress test. libfuse is not yet fixed.

ok mpi@@
@
text
@/*
 * Copyright (c) Sylvestre Gallon <ccna.syl@@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <string.h>
#include <fuse_opt.h>

const struct fuse_opt nullopts[] = {
	FUSE_OPT_END
};

const int nullresults[] = {
	0, 0, 0, 0, 0, 0
};

const struct fuse_opt badopts[] = {
	FUSE_OPT_KEY("-p ", 0),
	FUSE_OPT_KEY("-C", 1),
	FUSE_OPT_KEY("-V", 3),
	FUSE_OPT_KEY("--version", 3),
	FUSE_OPT_KEY("-h", 2),
	FUSE_OPT_END
};

static int
match_opts(const struct fuse_opt *opts, const int *results)
{
	if (fuse_opt_match(opts, NULL) != 0)
		return (1);

	if (fuse_opt_match(opts, "bar=") != results[0])
		return (3);
	if (fuse_opt_match(opts, "--foo=") != results[1])
		return (4);
	if (fuse_opt_match(opts, "bar=%s") != results[2])
		return (5);
	if (fuse_opt_match(opts, "--foo=%lu") != results[3])
		return (6);
	if (fuse_opt_match(opts, "-x ") != results[4])
		return (7);
	if (fuse_opt_match(opts, "-x %s") != results[5])
		return (8);

	return (0);
}

int
main(int ac, char **av)
{
	if (match_opts(nullopts, nullresults) != 0)
		return (1);
	if (match_opts(badopts, nullresults) != 0)
		return (1);
	return (0);
}

@


1.2
log
@Return different error number to know which test is failing.
@
text
@a41 2
	if (fuse_opt_match(opts, "") != 0)
		return (2);
@


1.1
log
@Add regress test for fuse_opt.
@
text
@d43 1
a43 1
		return (1);
d46 1
a46 1
		return (1);
d48 1
a48 1
		return (1);
d50 1
a50 1
		return (1);
d52 1
a52 1
		return (1);
d54 1
a54 1
		return (1);
d56 1
a56 1
		return (1);
@

