head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.12
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.2.0.10
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.6
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.4
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.1.0.4
	OPENBSD_5_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.2
date	2015.04.07.01.27.07;	author guenther;	state Exp;
branches;
next	1.1;
commitid	oQvh7XA3Kql35r0J;

1.1
date	2014.11.23.08.46.49;	author guenther;	state Exp;
branches;
next	;
commitid	liKRzPtz82V0rCuw;


desc
@@


1.2
log
@Make pthread_atfork() track the DSO that called it like atexit() does,
unregistering callbacks if the DSO is unloaded.  Move the callback
handling from libpthread to libc, though libpthread still overrides the
inner call to handle locking and thread-library reinitialization.
Major version bump for both libc and libpthread.

verification that this fixes various ports ajacoutot@@
asm assistance miod@@; ok millert@@ deraadt@@
@
text
@/*      $OpenBSD: pthread_atfork_test.c,v 1.1 2014/11/23 08:46:49 guenther Exp $       */

/*
 * Copyright (c) 2014 Philip Guenther <guenther@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/wait.h>
#include <dlfcn.h>
#include <err.h>
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

void *libaa, *libab;

FILE *otherf;

#define CALLBACK(file, name)					\
	static void name(void)					\
	{							\
		fprintf(file, "testp "#name"\n");		\
		fflush(file);					\
	}

#define	ATFORK_CALLBACKS(name)	\
	CALLBACK(stdout, name##_prepare) \
	CALLBACK(stdout, name##_parent) \
	CALLBACK(otherf, name##_child)

ATFORK_CALLBACKS(atfork1)
ATFORK_CALLBACKS(atfork2)
ATFORK_CALLBACKS(atfork3)

static void
atfork_dlclose(void)
{
	printf("exe atfork_dlclose begin\n");
	dlclose(libaa);
	dlclose(libab);
	printf("exe atfork_dlclose end\n");
	fflush(stdout);
}

static void
aa_atfork(void)
{
	void (*func)(FILE *) = dlsym(libaa, "aa_atfork");
	if (func == NULL)
		errx(1, "dlsym(libaa, aa_atfork): %s", dlerror());
	func(otherf);
}

static void
ab_atfork(void)
{
	void (*func)(FILE *) = dlsym(libab, "ab_atfork");
	if (func == NULL)
		errx(1, "dlsym(libab, ab_atfork): %s", dlerror());
	func(otherf);
}

#define	REGISTER(prep, parent, child)					\
	do {								\
		int _r = pthread_atfork(prep, parent, child);		\
		if (_r)							\
			errc(1, _r, "pthread_atfork(%s,%s,%s)",		\
			    #prep, #parent, #child);			\
	} while (0)

#define	REGISTER_ALL(name) \
	REGISTER(name##_prepare, name##_parent, name##_child)

int
main(int argc, char **argv)
{
	pid_t pid;
	int test, status;

	otherf = fdopen(3, "w");
	if (otherf == NULL)
		otherf = stderr;

	libaa = dlopen(LIBAA, RTLD_LAZY);
	if (libaa == NULL)
               	errx(1, "dlopen(%s, RTLD_LAZY): %s", LIBAA, dlerror());

	libab = dlopen(LIBAB, RTLD_LAZY);
	if (libab == NULL)
               	errx(1, "dlopen(%s, RTLD_LAZY): %s", LIBAB, dlerror());

	if (argc != 2)
		test = 0;
	else
		test = atoi(argv[1]);

	switch (test) {
	case 0:
		/* 1, aa, 2, ab, 3, then fork */
		REGISTER_ALL(atfork1);
		aa_atfork();
		REGISTER_ALL(atfork2);
		ab_atfork();
		REGISTER_ALL(atfork3);
		break;

	case 1:
		/* 1, aa, 2, ab, 3, then dlclose aa and bb, then fork */
		REGISTER_ALL(atfork1);
		aa_atfork();
		REGISTER_ALL(atfork2);
		ab_atfork();
		REGISTER_ALL(atfork3);
		dlclose(libaa);
		dlclose(libab);
		break;

	case 2:
		/* 1, aa, atfork_dlclose, ab, 3, then fork */
		REGISTER_ALL(atfork1);
		aa_atfork();
		REGISTER(atfork_dlclose, NULL, NULL);
		ab_atfork();
		REGISTER_ALL(atfork3);
		break;

	case 3:
		/* 1, aa, 2, ab, atfork_dlclose, then fork */
		REGISTER_ALL(atfork1);
		aa_atfork();
		REGISTER_ALL(atfork2);
		ab_atfork();
		REGISTER(atfork_dlclose, NULL, NULL);
		break;

	}

	fflush(stdout);
	fflush(otherf);
	pid = fork();

	waitpid(pid, &status, 0);
	return (0);
}
@


1.1
log
@Add regress for atexit() vs DSO unloading and start on a similar test
for pthread_atfork()
@
text
@d1 1
a1 1
/*      $OpenBSD$       */
d19 1
d90 1
a90 1
	int test;
d154 1
@

