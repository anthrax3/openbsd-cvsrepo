head	1.4;
access;
symbols
	OPENBSD_6_0:1.4.0.12
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.10
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.8
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.6
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3;
locks; strict;
comment	@// @;


1.4
date	2013.08.01.21.26.30;	author kettenis;	state Exp;
branches;
next	1.3;

1.3
date	2013.01.07.05.22.51;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2012.09.07.05.01.20;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2012.09.06.22.13.44;	author matthew;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Some tests are currently failing.  Only run those if the REGRESS_FULL
variable is set.
@
text
@/* $OpenBSD: init_priority_test.cc,v 1.3 2013/01/07 05:22:51 miod Exp $ */

#include <cassert>
#include <cstdio>

namespace {
const int kNumTests = 10;
int counter = 0;
int log[kNumTests];

struct Test {
	Test(int x);
};

Test::Test(int x)
{
	if (counter < kNumTests)
		log[counter] = x;
	fprintf(stderr, "%d\n", x);
	counter++;
}

#if __GNUC__ < 4
#define TEST(n) Test test_##n (n) __attribute__((init_priority (n)))
#else
#define TEST(n) Test test_##n __attribute__((init_priority (n))) (n)
#endif
TEST(12597);
TEST(20840);
TEST(31319);
TEST(17071);
TEST(47220);
TEST(40956);
TEST(28373);
TEST(8742);
TEST(14117);
TEST(6407);
#undef TEST
}

int
main()
{
	int i;

	assert(counter == kNumTests);
	for (i = 1; i < kNumTests; i++)
		assert(log[i] >= log[i - 1]);

	return (0);
}
@


1.3
log
@gcc 3 needs the same syntax as gcc 2
@
text
@d1 1
a1 1
/* $OpenBSD: init_priority_test.cc,v 1.2 2012/09/07 05:01:20 miod Exp $ */
d4 1
d19 1
@


1.2
log
@Give this a chance to build with gcc2. ok matthew@@
@
text
@d1 1
a1 1
/* $OpenBSD: init_priority_test.cc,v 1.1 2012/09/06 22:13:44 matthew Exp $ */
d21 1
a21 1
#if __GNUC__ < 3
@


1.1
log
@Add a (currently failing) regress test for GNU C++'s init_priority
attribute.  See "info --index-search=init_priority gcc" for details on
how this feature is supposed to work.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d21 5
a25 1
#define TEST(n) Test test_##n __attribute__((init_priority(n))) (n);
@

