head	1.5;
access;
symbols
	OPENBSD_6_0:1.5.0.54
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.44
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.52
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.50
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.48
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.46
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.42
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.40
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.38
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.36
	OPENBSD_5_0:1.5.0.34
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.32
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.30
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.26
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.28
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.24
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.22
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.20
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.18
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.16
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.14
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.3.0.6
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.4
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3;
locks; strict;
comment	@ * @;


1.5
date	2003.09.02.23.52.16;	author david;	state Exp;
branches;
next	1.4;

1.4
date	2003.08.02.01.24.35;	author david;	state Exp;
branches;
next	1.3;

1.3
date	2002.02.18.11.09.48;	author art;	state Exp;
branches;
next	1.2;

1.2
date	2002.01.31.16.47.02;	author art;	state Exp;
branches;
next	1.1;

1.1
date	2002.01.31.16.35.46;	author art;	state Exp;
branches;
next	;


desc
@@


1.5
log
@add missing includes
ok deraadt@@ tedu@@ dhartmei@@ krw@@
@
text
@/*	$OpenBSD: dtors.c,v 1.4 2003/08/02 01:24:35 david Exp $	*/
/*
 *	Written by Artur Grabowski <art@@openbsd.org>, 2002 Public Domain.
 */
#include <sys/types.h>
#include <sys/mman.h>
#include <sys/wait.h>

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <err.h>
#include <unistd.h>

void zap(void) __attribute__((destructor));

void *destarea;

#define MAGIC "destructed"

void
zap(void)
{
	memcpy(destarea, MAGIC, sizeof(MAGIC));
}

/*
 * XXX - horrible abuse of exit(3), minherit(2) and fork(2).
 */
int
main(int argc, char **argv)
{
	int status, ch;
	int fallthru = 0;

	while ((ch = getopt(argc, argv, "f")) != -1) {
		switch(ch) {
		case 'f':
			fallthru = 1;
			break;
		default:
			fprintf(stderr, "Usage: dtors [-f]\n");
			exit(1);
		}
	}

	destarea = mmap(NULL, getpagesize(), PROT_READ|PROT_WRITE, MAP_ANON,
	    -1, 0);
	if (destarea == MAP_FAILED)
		err(1, "mmap");

	if (minherit(destarea, getpagesize(), MAP_INHERIT_SHARE) != 0)
		err(1, "minherit");

	memset(destarea, 0, sizeof(MAGIC));

	switch(fork()) {
	case -1:
		err(1, "fork");
	case 0:
		/*
		 * Yes, it's exit(), not _exit(). We _want_ to run the
		 * destructors in the child.
		 */
		if (fallthru)
			return (0);
		else
			exit(0);
	}

	if (wait(&status) < 0)
		err(1, "wait");		/* XXX uses exit() */

	if (!WIFEXITED(status) || WEXITSTATUS(status) != 0)
		err(1, "child error");	/* XXX uses exit() */

	_exit(memcmp(destarea, MAGIC, sizeof(MAGIC)) != 0);
}	
@


1.4
log
@add missing includes
ok deraadt@@ tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dtors.c,v 1.3 2002/02/18 11:09:48 art Exp $	*/
d10 1
@


1.3
log
@Also test is dtors are run if we return from main.
@
text
@d1 1
a1 1
/*	$OpenBSD: dtors.c,v 1.2 2002/01/31 16:47:02 art Exp $	*/
d12 1
@


1.2
log
@fork, not vfork, fix comment.
@
text
@d1 1
a1 1
/*	$OpenBSD: dtors.c,v 1.1 2002/01/31 16:35:46 art Exp $	*/
d3 1
a3 1
 * Written by Artur Grabowski <art@@openbsd.org> Public Domain.
d26 1
a26 1
 * XXX - horrible abuse of exit(), minherit and fork().
d29 1
a29 1
main()
d31 13
a43 1
	int status;
d63 4
a66 1
		exit(0);
@


1.1
log
@Simple (ehmm) test for static destructors.
Not for the faint-hearted.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d26 1
a26 1
 * XXX - horrible abuse of exit(), minherit and vfork().
@

