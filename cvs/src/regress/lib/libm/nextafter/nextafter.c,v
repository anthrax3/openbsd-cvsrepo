head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.26
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.22
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.12
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.20
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.18
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.16
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.14
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.10
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.8
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.6
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.4
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.2
date	2011.07.09.03.33.07;	author martynas;	state Exp;
branches;
next	1.1;

1.1
date	2011.04.16.20.41.23;	author martynas;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Adapt tests for extended-precision.
@
text
@/*	$OpenBSD: nextafter.c,v 1.1 2011/04/16 20:41:23 martynas Exp $	*/

/*
 * Written by Martynas Venckus.  Public domain
 */

#include <assert.h>
#include <math.h>

#define	test(f, r)	(					\
	((f) == (r) && signbit((f)) == signbit((r))) ||		\
	(isnan((f)) && isnan((r)))				\
)

int
main(int argc, char *argv[])
{
	assert(test(nextafter(0.0, 0.0), 0.0));
	assert(test(nextafter(-0.0, 0.0), 0.0));
	assert(test(nextafter(0.0, -0.0), -0.0));
	assert(test(nextafter(-0.0, -0.0), -0.0));

	assert(test(nextafterf(0.0F, 0.0F), 0.0F));
	assert(test(nextafterf(-0.0F, 0.0F), 0.0F));
	assert(test(nextafterf(0.0F, -0.0F), -0.0F));
	assert(test(nextafterf(-0.0F, -0.0F), -0.0F));

	assert(test(nextafterl(0.0L, 0.0L), 0.0L));
	assert(test(nextafterl(-0.0L, 0.0L), 0.0L));
	assert(test(nextafterl(0.0L, -0.0L), -0.0L));
	assert(test(nextafterf(-0.0L, -0.0L), -0.0L));

	assert(test(nextafter(NAN, 1.0), NAN));
	assert(test(nextafter(1.0, NAN), NAN));
	assert(test(nextafter(NAN, NAN), NAN));

	assert(test(nextafterf(NAN, 1.0F), NAN));
	assert(test(nextafterf(1.0F, NAN), NAN));
	assert(test(nextafterf(NAN, NAN), NAN));

	assert(test(nextafterl(NAN, 1.0L), NAN));
	assert(test(nextafterl(1.0L, NAN), NAN));
	assert(test(nextafterl(NAN, NAN), NAN));

	assert(test(nextafter(0x1.fffffffffffffp+0, INFINITY), 0x1p1));
	assert(test(nextafter(0x1p1, -INFINITY), 0x1.fffffffffffffp+0));

	assert(test(nextafterf(0x1.fffffep+0f, INFINITY), 0x1p1f));
	assert(test(nextafterf(0x1p1f, -INFINITY), 0x1.fffffep+0f));

	return (0);
}
@


1.1
log
@Test nextafter and nextafterf for zero, nan and some basic
functionality.  Fix pending.
@
text
@d1 1
a1 1
/*	$OpenBSD: rint.c,v 1.10 2011/04/10 17:06:44 martynas Exp $	*/
d23 9
a31 4
	assert(test(nextafterf(0.0, 0.0), 0.0));
	assert(test(nextafterf(-0.0, 0.0), 0.0));
	assert(test(nextafterf(0.0, -0.0), -0.0));
	assert(test(nextafterf(-0.0, -0.0), -0.0));
d37 2
a38 2
	assert(test(nextafterf(NAN, 1.0), NAN));
	assert(test(nextafterf(1.0, NAN), NAN));
d40 4
@

