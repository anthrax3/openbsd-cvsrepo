head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.8
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.6
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.4.0.6
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4;
locks; strict;
comment	@ * @;


1.5
date	2015.05.08.21.30.37;	author miod;	state Exp;
branches;
next	1.4;
commitid	rgPflDHV0t1CLcwd;

1.4
date	2014.07.11.08.48.52;	author bcook;	state Exp;
branches;
next	1.3;
commitid	N0G13a8lQ20okx2N;

1.3
date	2014.07.08.14.17.38;	author bcook;	state Exp;
branches;
next	1.2;
commitid	EeaIoOiEwoJqCa85;

1.2
date	2014.06.22.16.57.34;	author jsing;	state Exp;
branches;
next	1.1;
commitid	W1ulS4aTQ9P5fc4H;

1.1
date	2014.06.22.14.30.52;	author jsing;	state Exp;
branches;
next	;
commitid	bCrthIqD1mkpfxeH;


desc
@@


1.5
log
@Make this run on strict alignment architectures.
@
text
@/*	$OpenBSD: biotest.c,v 1.4 2014/07/11 08:48:52 bcook Exp $	*/
/*
 * Copyright (c) 2014 Joel Sing <jsing@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <stdint.h>
#include <stdlib.h>
#include <string.h>

#include <netinet/in.h>

#include <openssl/bio.h>
#include <openssl/err.h>

struct bio_get_host_ip_test {
	char *input;
	uint32_t ip;
	int ret;
};

struct bio_get_host_ip_test bio_get_host_ip_tests[] = {
	{"", 0, 0},
	{".", 0, 0},
	{"1", 0, 0},
	{"1.2", 0, 0},
	{"1.2.3", 0, 0},
	{"1.2.3.", 0, 0},
	{"1.2.3.4", 0x01020304, 1},
	{"1.2.3.256", 0, 0},
	{"1:2:3::4", 0, 0},
	{"0.0.0.0", INADDR_ANY, 1},
	{"127.0.0.1", INADDR_LOOPBACK, 1},
	{"localhost", INADDR_LOOPBACK, 1},
	{"255.255.255.255", INADDR_BROADCAST, 1},
	{"0xff.0xff.0xff.0xff", 0, 0},
};

#define N_BIO_GET_IP_TESTS \
    (sizeof(bio_get_host_ip_tests) / sizeof(*bio_get_host_ip_tests))

struct bio_get_port_test {
	char *input;
	unsigned short port;
	int ret;
};

struct bio_get_port_test bio_get_port_tests[] = {
	{NULL, 0, 0},
	{"", 0, 0},
	{"-1", 0, 0},
	{"0", 0, 1},
	{"1", 1, 1},
	{"12345", 12345, 1},
	{"65535", 65535, 1},
	{"65536", 0, 0},
	{"999999999999", 0, 0},
	{"xyzzy", 0, 0},
	{"https", 443, 1},
	{"imaps", 993, 1},
	{"telnet", 23, 1},
};

#define N_BIO_GET_PORT_TESTS \
    (sizeof(bio_get_port_tests) / sizeof(*bio_get_port_tests))

static int
do_bio_get_host_ip_tests(void)
{
	struct bio_get_host_ip_test *bgit;
	union {
		unsigned char c[4];
		uint32_t i;
	} ip;
	int failed = 0;
	size_t i;
	int ret;

	for (i = 0; i < N_BIO_GET_IP_TESTS; i++) {
		bgit = &bio_get_host_ip_tests[i];
		memset(&ip, 0, sizeof(ip));
		
		ret = BIO_get_host_ip(bgit->input, ip.c);
		if (ret != bgit->ret) {
			fprintf(stderr, "FAIL: test %zi (\"%s\") %s, want %s\n",
			    i, bgit->input, ret ? "success" : "failure",
			    bgit->ret ? "success" : "failure");
			failed = 1;
			continue;
		}
		if (ret && ntohl(ip.i) != bgit->ip) {
			fprintf(stderr, "FAIL: test %zi (\"%s\") returned ip "
			    "%x != %x\n", i, bgit->input,
			    ntohl(ip.i), bgit->ip);
			failed = 1;
		}
	}

	return failed;
}

static int
do_bio_get_port_tests(void)
{
	struct bio_get_port_test *bgpt;
	unsigned short port;
	int failed = 0;
	size_t i;
	int ret;

	for (i = 0; i < N_BIO_GET_PORT_TESTS; i++) {
		bgpt = &bio_get_port_tests[i];
		port = 0;
		
		ret = BIO_get_port(bgpt->input, &port);
		if (ret != bgpt->ret) {
			fprintf(stderr, "FAIL: test %zi (\"%s\") %s, want %s\n",
			    i, bgpt->input, ret ? "success" : "failure",
			    bgpt->ret ? "success" : "failure");
			failed = 1;
			continue;
		}
		if (ret && port != bgpt->port) {
			fprintf(stderr, "FAIL: test %zi (\"%s\") returned port "
			    "%u != %u\n", i, bgpt->input, port, bgpt->port);
			failed = 1;
		}
	}

	return failed;
}

int
main(int argc, char **argv)
{
	int ret = 0;

	ret |= do_bio_get_host_ip_tests();
	ret |= do_bio_get_port_tests();

	return (ret);
}
@


1.4
log
@replace u_int32_t with uint32_t

ok beck@@
@
text
@d1 1
a1 1
/*	$OpenBSD: biotest.c,v 1.3 2014/07/08 14:17:38 bcook Exp $	*/
d84 4
a87 1
	unsigned char ip[4];
d94 1
a94 1
		memset(ip, 0, sizeof(*ip));
d96 1
a96 1
		ret = BIO_get_host_ip(bgit->input, ip);
d104 1
a104 1
		if (ret && ntohl(*((uint32_t *)ip)) != bgit->ip) {
d107 1
a107 1
			    ntohl(*((uint32_t *)ip)), bgit->ip);
@


1.3
log
@string.h is the correct file, not strings.h

ok beck@@ jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: biotest.c,v 1.2 2014/06/22 16:57:34 jsing Exp $	*/
d20 1
d31 1
a31 1
	u_int32_t ip;
d101 1
a101 1
		if (ret && ntohl(*((u_int32_t *)ip)) != bgit->ip) {
d104 1
a104 1
			    ntohl(*((u_int32_t *)ip)), bgit->ip);
@


1.2
log
@Add regress tests for BIO_get_host_ip().
@
text
@d1 1
a1 1
/*	$OpenBSD: biotest.c,v 1.1 2014/06/22 14:30:52 jsing Exp $	*/
d21 1
a21 1
#include <strings.h>
@


1.1
log
@Add a skeleton regress for crypto/bio, which currently only covers
BIO_get_port() and fails since the current code believes that "-1" is a
valid port.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d18 2
d21 3
d28 26
d80 32
d145 6
a150 1
	return do_bio_get_port_tests();
@

