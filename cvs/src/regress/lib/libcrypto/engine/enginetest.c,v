head	1.6;
access;
symbols
	OPENBSD_6_0:1.6.0.2
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.4
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.2.0.4
	OPENBSD_5_6_BASE:1.2;
locks; strict;
comment	@ * @;


1.6
date	2016.05.30.22.00.43;	author bcook;	state Exp;
branches;
next	1.5;
commitid	W9TxswyKOYv26X1q;

1.5
date	2015.09.13.14.07.10;	author bcook;	state Exp;
branches;
next	1.4;
commitid	TFzEF8jxGQmUpfSY;

1.4
date	2015.09.12.15.25.33;	author bcook;	state Exp;
branches;
next	1.3;
commitid	Z2OtLaDDpURHSB60;

1.3
date	2014.08.16.18.47.40;	author bcook;	state Exp;
branches;
next	1.2;
commitid	vKHUwbY98Rlo94hg;

1.2
date	2014.05.24.13.57.18;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2014.04.17.07.52.08;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Gix misleading indent pointed out by GCC 6.1.

ok beck@@ jsing@@
@
text
@/* crypto/engine/enginetest.c */
/* Written by Geoff Thorpe (geoff@@geoffthorpe.net) for the OpenSSL
 * project 2000.
 */
/* ====================================================================
 * Copyright (c) 1999-2001 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>
#include <string.h>

#include <openssl/buffer.h>
#include <openssl/crypto.h>
#include <openssl/engine.h>
#include <openssl/err.h>

static void display_engine_list(void)
{
	ENGINE *h;
	int loop;

	h = ENGINE_get_first();
	loop = 0;
	printf("listing available engine types\n");
	while (h) {
		printf("engine %i, id = \"%s\", name = \"%s\"\n",
		    loop++, ENGINE_get_id(h), ENGINE_get_name(h));
		h = ENGINE_get_next(h);
	}

	printf("end of list\n");
	/*
	 * ENGINE_get_first() increases the struct_ref counter, so we must call
	 * ENGINE_free() to decrease it again
	 */
	ENGINE_free(h);
}

int main(int argc, char *argv[])
{
	ENGINE *block[512];
	char *id, *name;
	ENGINE *ptr;
	int loop;
	int to_return = 1;
	ENGINE *new_h1 = NULL;
	ENGINE *new_h2 = NULL;
	ENGINE *new_h3 = NULL;
	ENGINE *new_h4 = NULL;

	ERR_load_crypto_strings();

	memset(block, 0, 512 * sizeof(ENGINE *));
	if (((new_h1 = ENGINE_new()) == NULL) ||
	   !ENGINE_set_id(new_h1, "test_id0") ||
	   !ENGINE_set_name(new_h1, "First test item") ||
	   ((new_h2 = ENGINE_new()) == NULL) ||
	   !ENGINE_set_id(new_h2, "test_id1") ||
	   !ENGINE_set_name(new_h2, "Second test item") ||
	   ((new_h3 = ENGINE_new()) == NULL) ||
	   !ENGINE_set_id(new_h3, "test_id2") ||
	   !ENGINE_set_name(new_h3, "Third test item") ||
	   ((new_h4 = ENGINE_new()) == NULL) ||
	   !ENGINE_set_id(new_h4, "test_id3") ||
	   !ENGINE_set_name(new_h4, "Fourth test item")) {
		printf("Couldn't set up test ENGINE structures\n");
		goto end;
	}

	printf("\nenginetest beginning\n\n");
	display_engine_list();
	if (!ENGINE_add(new_h1)) {
		printf("Add failed!\n");
		goto end;
	}
	display_engine_list();
	ptr = ENGINE_get_first();
	if (!ENGINE_remove(ptr)) {
		printf("Remove failed!\n");
		goto end;
	}
	if (ptr)
		ENGINE_free(ptr);
	display_engine_list();
	if (!ENGINE_add(new_h3) || !ENGINE_add(new_h2)) {
		printf("Add failed!\n");
		goto end;
	}
	display_engine_list();
	if (!ENGINE_remove(new_h2)) {
		printf("Remove failed!\n");
		goto end;
	}
	display_engine_list();
	if (!ENGINE_add(new_h4)) {
		printf("Add failed!\n");
		goto end;
	}
	display_engine_list();
	if (ENGINE_add(new_h3)) {
		printf("Add *should* have failed but didn't!\n");
		goto end;
	} else
		printf("Add that should fail did.\n");
	ERR_clear_error();
	if (ENGINE_remove(new_h2)) {
		printf("Remove *should* have failed but didn't!\n");
		goto end;
	} else
		printf("Remove that should fail did.\n");
	ERR_clear_error();
	if (!ENGINE_remove(new_h3)) {
		printf("Remove failed!\n");
		goto end;
	}
	display_engine_list();
	if (!ENGINE_remove(new_h4)) {
		printf("Remove failed!\n");
		goto end;
	}
	display_engine_list();
	/*
	 * Depending on whether there's any hardware support compiled
	 * in, this remove may be destined to fail.
	 */
	ptr = ENGINE_get_first();
	if (ptr)
		if (!ENGINE_remove(ptr))
			printf("Remove failed!i - probably no hardware "
				"support present.\n");
	if (ptr)
		ENGINE_free(ptr);
	display_engine_list();

	if (!ENGINE_add(new_h1) || !ENGINE_remove(new_h1)) {
		printf("Couldn't add and remove to an empty list!\n");
		goto end;
	} else
		printf("Successfully added and removed to an empty list!\n");

	printf("About to beef up the engine-type list\n");
	for (loop = 0; loop < 512; loop++) {
		if (asprintf(&id, "id%i", loop) == -1)
			goto end;
		if (asprintf(&name, "Fake engine type %i", loop) == -1)
			goto end;

		if (((block[loop] = ENGINE_new()) == NULL) ||
		    !id || !ENGINE_set_id(block[loop], id) ||
		    !name || !ENGINE_set_name(block[loop], name)) {
			printf("Couldn't create block of ENGINE structures.\n");
			goto end;
		}
	}

	for (loop = 0; loop < 512; loop++) {
		if (!ENGINE_add(block[loop])) {
			printf("\nAdding stopped at %i, (%s,%s)\n",
				loop, ENGINE_get_id(block[loop]),
				ENGINE_get_name(block[loop]));
			break;
		}
		printf(".");
		fflush(stdout);
	}
	printf("\nAbout to empty the engine-type list\n");
	while ((ptr = ENGINE_get_first()) != NULL) {
		if (!ENGINE_remove(ptr)) {
			printf("\nRemove failed!\n");
			goto end;
		}
		ENGINE_free(ptr);
		printf("."); fflush(stdout);
	}
	for (loop = 0; loop < 512; loop++) {
		free((void *)ENGINE_get_id(block[loop]));
		free((void *)ENGINE_get_name(block[loop]));
	}
	printf("\nTests completed happily\n");
	to_return = 0;
end:
	if (to_return)
		ERR_print_errors_fp(stderr);
	if (new_h1) ENGINE_free(new_h1);
	if (new_h2) ENGINE_free(new_h2);
	if (new_h3) ENGINE_free(new_h3);
	if (new_h4) ENGINE_free(new_h4);
	for (loop = 0; loop < 512; loop++)
		if (block[loop])
			ENGINE_free(block[loop]);
	ENGINE_cleanup();
	CRYPTO_cleanup_all_ex_data();
	ERR_free_strings();
	ERR_remove_thread_state(NULL);
	CRYPTO_mem_leaks_fp(stderr);
	return to_return;
}
@


1.5
log
@remove e_os2.h includes
ok jsing@@
@
text
@d211 4
a214 3
			goto cleanup_loop;
		} else
			printf("."); fflush(stdout);
a215 1
cleanup_loop:
@


1.4
log
@Cleanup enginetest a bit.

It was the only thing preventing -Werror from building on some systems due to
the unchecked asprintf's.
@
text
@a60 1
#include <openssl/e_os2.h>
@


1.3
log
@replace sprintf/strdup with asprintf in engine test
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
a62 7
#ifdef OPENSSL_NO_ENGINE
int main(int argc, char *argv[])
{
    printf("No ENGINE support\n");
    return(0);
}
#else
d69 1
a69 1
	{
d76 1
a76 2
	while(h)
		{
d78 1
a78 1
			loop++, ENGINE_get_id(h), ENGINE_get_name(h));
d80 2
a81 1
		}
d83 4
a86 2
	/* ENGINE_get_first() increases the struct_ref counter, so we 
           must call ENGINE_free() to decrease it again */
d88 1
a88 1
	}
d91 1
a91 1
	{
d105 12
a116 13
	if(((new_h1 = ENGINE_new()) == NULL) ||
			!ENGINE_set_id(new_h1, "test_id0") ||
			!ENGINE_set_name(new_h1, "First test item") ||
			((new_h2 = ENGINE_new()) == NULL) ||
			!ENGINE_set_id(new_h2, "test_id1") ||
			!ENGINE_set_name(new_h2, "Second test item") ||
			((new_h3 = ENGINE_new()) == NULL) ||
			!ENGINE_set_id(new_h3, "test_id2") ||
			!ENGINE_set_name(new_h3, "Third test item") ||
			((new_h4 = ENGINE_new()) == NULL) ||
			!ENGINE_set_id(new_h4, "test_id3") ||
			!ENGINE_set_name(new_h4, "Fourth test item"))
		{
d119 2
a120 1
		}
d123 1
a123 2
	if(!ENGINE_add(new_h1))
		{
d126 1
a126 1
		}
d129 1
a129 2
	if(!ENGINE_remove(ptr))
		{
d132 1
a132 1
		}
d136 1
a136 2
	if(!ENGINE_add(new_h3) || !ENGINE_add(new_h2))
		{
d139 1
a139 1
		}
d141 1
a141 2
	if(!ENGINE_remove(new_h2))
		{
d144 1
a144 1
		}
d146 1
a146 2
	if(!ENGINE_add(new_h4))
		{
d149 1
a149 1
		}
d151 1
a151 2
	if(ENGINE_add(new_h3))
		{
d154 1
a154 2
		}
	else
d157 1
a157 2
	if(ENGINE_remove(new_h2))
		{
d160 1
a160 2
		}
	else
d163 1
a163 2
	if(!ENGINE_remove(new_h3))
		{
d166 1
a166 1
		}
d168 1
a168 2
	if(!ENGINE_remove(new_h4))
		{
d171 1
a171 1
		}
d173 4
a176 2
	/* Depending on whether there's any hardware support compiled
	 * in, this remove may be destined to fail. */
d178 2
a179 2
	if(ptr)
		if(!ENGINE_remove(ptr))
d185 2
a186 2
	if(!ENGINE_add(new_h1) || !ENGINE_remove(new_h1))
		{
d189 1
a189 2
		}
	else
d191 1
d193 10
a202 10
	for(loop = 0; loop < 512; loop++)
		{
		asprintf(&id, "id%i", loop);
		asprintf(&name, "Fake engine type %i", loop);
		if(((block[loop] = ENGINE_new()) == NULL) ||
				!id || !ENGINE_set_id(block[loop], id) ||
				!name || !ENGINE_set_name(block[loop], name))
			{
			printf("Couldn't create block of ENGINE structures.\n"
				"I'll probably also core-dump now, damn.\n");
a203 1
			}
d205 4
a208 4
	for(loop = 0; loop < 512; loop++)
		{
		if(!ENGINE_add(block[loop]))
			{
d213 1
a213 2
			}
		else
d215 1
a215 1
		}
d218 2
a219 4
	while((ptr = ENGINE_get_first()) != NULL)
		{
		if(!ENGINE_remove(ptr))
			{
d222 1
a222 1
			}
d225 2
a226 3
		}
	for(loop = 0; loop < 512; loop++)
		{
d229 1
a229 1
		}
d233 1
a233 1
	if(to_return)
d235 6
a240 6
	if(new_h1) ENGINE_free(new_h1);
	if(new_h2) ENGINE_free(new_h2);
	if(new_h3) ENGINE_free(new_h3);
	if(new_h4) ENGINE_free(new_h4);
	for(loop = 0; loop < 512; loop++)
		if(block[loop])
d248 1
a248 2
	}
#endif
@


1.2
log
@remove OPENSSL_malloc and CRYPTO_malloc goo from the regress tests.
ok miod@@ jsing@@ guenther@@
@
text
@d98 1
a98 2
	char buf[256];
	const char *id, *name;
d209 2
a210 4
		sprintf(buf, "id%i", loop);
		id = BUF_strdup(buf);
		sprintf(buf, "Fake engine type %i", loop);
		name = BUF_strdup(buf);
d212 2
a213 2
				!ENGINE_set_id(block[loop], id) ||
				!ENGINE_set_name(block[loop], name))
@


1.1
log
@move enginetest to regress as was done with the other tests
@
text
@a107 12
	/* enable memory leak checking unless explicitly disabled */
	if (!((getenv("OPENSSL_DEBUG_MEMORY") != NULL) && (0 == strcmp(getenv("OPENSSL_DEBUG_MEMORY"), "off"))))
		{
		CRYPTO_malloc_debug_init();
		CRYPTO_set_mem_debug_options(V_CRYPTO_MDEBUG_ALL);
		}
	else
		{
		/* OPENSSL_DEBUG_MEMORY=off */
		CRYPTO_set_mem_debug_functions(0, 0, 0, 0, 0);
		}
	CRYPTO_mem_ctrl(CRYPTO_MEM_CHECK_ON);
d249 2
a250 2
		OPENSSL_free((void *)ENGINE_get_id(block[loop]));
		OPENSSL_free((void *)ENGINE_get_name(block[loop]));
@

