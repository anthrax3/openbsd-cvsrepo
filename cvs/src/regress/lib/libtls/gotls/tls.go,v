head	1.9;
access;
symbols
	OPENBSD_6_1:1.9.0.2
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.4.0.4
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.2.0.6
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.4
	OPENBSD_5_7_BASE:1.2;
locks; strict;
comment	@# @;


1.9
date	2017.03.07.13.00.25;	author jsing;	state Exp;
branches;
next	1.8;
commitid	cBQXNXUiiARAAJ5T;

1.8
date	2017.03.07.12.58.02;	author jsing;	state Exp;
branches;
next	1.7;
commitid	nVccrDRohEJ6yiY7;

1.7
date	2017.03.07.12.52.13;	author jsing;	state Exp;
branches;
next	1.6;
commitid	XOje683HEuV4Pvp5;

1.6
date	2017.03.07.12.32.42;	author jsing;	state Exp;
branches;
next	1.5;
commitid	01MQow75TYCe3a3m;

1.5
date	2017.03.07.12.29.31;	author jsing;	state Exp;
branches;
next	1.4;
commitid	QdKyYllyxjBteIiV;

1.4
date	2015.10.13.13.58.33;	author jsing;	state Exp;
branches;
next	1.3;
commitid	29Jaq9jIQUHlkDvG;

1.3
date	2015.10.13.12.56.20;	author jsing;	state Exp;
branches;
next	1.2;
commitid	yAcV5KegFTS4XU3u;

1.2
date	2015.02.22.15.14.32;	author jsing;	state Exp;
branches;
next	1.1;
commitid	IYDmj8mqnK9qAXnY;

1.1
date	2014.10.31.14.10.55;	author jsing;	state Exp;
branches;
next	;
commitid	WRZYBxhqHZwGZozf;


desc
@@


1.9
log
@Allow ciphers to be set on the TLS config.
@
text
@// Package tls provides a Go interface to the libtls library.
package tls

/*
#cgo LDFLAGS: -ltls -lssl -lcrypto

#include <stdlib.h>

#include <tls.h>

typedef void *tls;
*/
import "C"

import (
	"errors"
	"time"
	"unsafe"
)

var (
	errWantPollIn  = errors.New("want poll in")
	errWantPollOut = errors.New("want poll out")
)

// ProtocolVersion represents a TLS protocol version.
type ProtocolVersion uint32

// String returns the string representation of a protocol version.
func (pv ProtocolVersion) String() string {
	name, ok := protocolNames[pv]
	if !ok {
		return "unknown protocol version"
	}
	return name
}

const (
	ProtocolTLSv10 ProtocolVersion = C.TLS_PROTOCOL_TLSv1_0
	ProtocolTLSv11 ProtocolVersion = C.TLS_PROTOCOL_TLSv1_1
	ProtocolTLSv12 ProtocolVersion = C.TLS_PROTOCOL_TLSv1_2
	ProtocolsAll   ProtocolVersion = C.TLS_PROTOCOLS_ALL
)

var protocolNames = map[ProtocolVersion]string{
	ProtocolTLSv10: "TLSv1.0",
	ProtocolTLSv11: "TLSv1.1",
	ProtocolTLSv12: "TLSv1.2",
	ProtocolsAll:   "all",
}

// ProtocolVersionFromString returns the protocol version with the given name.
func ProtocolVersionFromString(version string) (ProtocolVersion, error) {
	for proto, name := range protocolNames {
		if version == name {
			return proto, nil
		}
	}
	return 0, errors.New("unknown protocol version")
}

// TLSConfig provides configuration options for a TLS context.
type TLSConfig struct {
	tlsCfg *C.struct_tls_config
}

// TLS encapsulates the TLS context.
type TLS struct {
	cfg *TLSConfig
	ctx *C.struct_tls
}

// Init initialises the TLS library.
func Init() error {
	if C.tls_init() != 0 {
		return errors.New("initialisation failed")
	}
	return nil
}

// NewConfig returns a new TLS configuration.
func NewConfig() (*TLSConfig, error) {
	cfg := C.tls_config_new()
	if cfg == nil {
		return nil, errors.New("failed to allocate config")
	}
	return &TLSConfig{
		tlsCfg: cfg,
	}, nil
}

// Error returns the error message from the TLS configuration.
func (c *TLSConfig) Error() error {
	if msg := C.tls_config_error(c.tlsCfg); msg != nil {
		return errors.New(C.GoString(msg))
	}
	return errors.New("unknown error")
}

// SetCAFile sets the CA file to be used for connections.
func (c *TLSConfig) SetCAFile(filename string) error {
	caFile := C.CString(filename)
	defer C.free(unsafe.Pointer(caFile))
	if C.tls_config_set_ca_file(c.tlsCfg, caFile) != 0 {
		return c.Error()
	}
	return nil
}

// SetCiphers sets the cipher suites enabled for the connection.
func (c *TLSConfig) SetCiphers(ciphers string) error {
	cipherStr := C.CString(ciphers)
	defer C.free(unsafe.Pointer(cipherStr))
	if C.tls_config_set_ciphers(c.tlsCfg, cipherStr) != 0 {
		return c.Error()
	}
	return nil
}

// SetProtocols sets the protocol versions enabled for the connection.
func (c *TLSConfig) SetProtocols(proto ProtocolVersion) error {
	if C.tls_config_set_protocols(c.tlsCfg, C.uint32_t(proto)) != 0 {
		return c.Error()
	}
	return nil
}

// InsecureNoVerifyCert disables certificate verification for the connection.
func (c *TLSConfig) InsecureNoVerifyCert() {
	C.tls_config_insecure_noverifycert(c.tlsCfg)
}

// InsecureNoVerifyName disables server name verification for the connection.
func (c *TLSConfig) InsecureNoVerifyName() {
	C.tls_config_insecure_noverifyname(c.tlsCfg)
}

// SetSecure enables verification for the connection.
func (c *TLSConfig) SetVerify() {
	C.tls_config_verify(c.tlsCfg)
}

// Free frees resources associated with the TLS configuration.
func (c *TLSConfig) Free() {
	if c.tlsCfg == nil {
		return
	}
	C.tls_config_free(c.tlsCfg)
	c.tlsCfg = nil
}

// NewClient returns a new TLS client context, using the optional configuration.
// If no configuration is specified the default configuration will be used.
func NewClient(config *TLSConfig) (*TLS, error) {
	var sslCfg *C.struct_tls_config
	if config != nil {
		sslCfg = config.tlsCfg
	}
	ctx := C.tls_client()
	if ctx == nil {
		return nil, errors.New("tls client failed")
	}
	if C.tls_configure(ctx, sslCfg) != 0 {
		return nil, errors.New("tls configure failed")
	}
	return &TLS{
		cfg: config,
		ctx: ctx,
	}, nil
}

// Error returns the error message from the TLS context.
func (t *TLS) Error() error {
	if msg := C.tls_error(t.ctx); msg != nil {
		return errors.New(C.GoString(msg))
	}
	return errors.New("unknown error")
}

// PeerCertProvided returns whether the peer provided a certificate.
func (t *TLS) PeerCertProvided() bool {
	return C.tls_peer_cert_provided(t.ctx) == 1
}

// PeerCertContainsName checks whether the peer certificate contains
// the specified name.
func (t *TLS) PeerCertContainsName(name string) bool {
	n := C.CString(name)
	defer C.free(unsafe.Pointer(n))
	return C.tls_peer_cert_contains_name(t.ctx, n) == 1
}

// PeerCertIssuer returns the issuer of the peer certificate.
func (t *TLS) PeerCertIssuer() (string, error) {
	issuer := C.tls_peer_cert_issuer(t.ctx)
	if issuer == nil {
		return "", errors.New("no issuer returned")
	}
	return C.GoString(issuer), nil
}

// PeerCertSubject returns the subject of the peer certificate.
func (t *TLS) PeerCertSubject() (string, error) {
	subject := C.tls_peer_cert_subject(t.ctx)
	if subject == nil {
		return "", errors.New("no subject returned")
	}
	return C.GoString(subject), nil
}

// PeerCertHash returns a hash of the peer certificate.
func (t *TLS) PeerCertHash() (string, error) {
	hash := C.tls_peer_cert_hash(t.ctx)
	if hash == nil {
		return "", errors.New("no hash returned")
	}
	return C.GoString(hash), nil
}

// PeerCertNotBefore returns the notBefore time from the peer
// certificate.
func (t *TLS) PeerCertNotBefore() (time.Time, error) {
	notBefore := C.tls_peer_cert_notbefore(t.ctx)
	if notBefore == -1 {
		return time.Time{}, errors.New("no notBefore time returned")
	}
	return time.Unix(int64(notBefore), 0), nil
}

// PeerCertNotAfter returns the notAfter time from the peer
// certificate.
func (t *TLS) PeerCertNotAfter() (time.Time, error) {
	notAfter := C.tls_peer_cert_notafter(t.ctx)
	if notAfter == -1 {
		return time.Time{}, errors.New("no notAfter time")
	}
	return time.Unix(int64(notAfter), 0), nil
}

// ConnVersion returns the protocol version of the connection.
func (t *TLS) ConnVersion() (ProtocolVersion, error) {
	ver := C.tls_conn_version(t.ctx)
	if ver == nil {
		return 0, errors.New("no connection version")
	}
	return ProtocolVersionFromString(C.GoString(ver))
}

// ConnCipher returns the cipher suite used for the connection.
func (t *TLS) ConnCipher() (string, error) {
	cipher := C.tls_conn_cipher(t.ctx)
	if cipher == nil {
		return "", errors.New("no connection cipher")
	}
	return C.GoString(cipher), nil
}

// Connect attempts to establish an TLS connection to the specified host on
// the given port. The host may optionally contain a colon separated port
// value if the port string is specified as an empty string.
func (t *TLS) Connect(host, port string) error {
	h := C.CString(host)
	var p *C.char
	if port != "" {
		p = C.CString(port)
	}
	defer C.free(unsafe.Pointer(h))
	defer C.free(unsafe.Pointer(p))
	if C.tls_connect(t.ctx, h, p) != 0 {
		return t.Error()
	}
	return nil
}

// Handshake attempts to complete the TLS handshake.
func (t *TLS) Handshake() error {
	ret := C.tls_handshake(t.ctx)
	switch {
	case ret == C.TLS_WANT_POLLIN:
		return errWantPollIn
	case ret == C.TLS_WANT_POLLOUT:
		return errWantPollOut
	case ret != 0:
		return t.Error()
	}
	return nil
}

// Read reads data the TLS connection into the given buffer.
func (t *TLS) Read(buf []byte) (int, error) {
	ret := C.tls_read(t.ctx, unsafe.Pointer(&buf[0]), C.size_t(len(buf)))
	switch {
	case ret == C.TLS_WANT_POLLIN:
		return -1, errWantPollIn
	case ret == C.TLS_WANT_POLLOUT:
		return -1, errWantPollOut
	case ret < 0:
		return -1, t.Error()
	}
	return int(ret), nil
}

// Write writes the given data to the TLS connection.
func (t *TLS) Write(buf []byte) (int, error) {
	p := C.CString(string(buf))
	defer C.free(unsafe.Pointer(p))
	ret := C.tls_write(t.ctx, unsafe.Pointer(p), C.size_t(len(buf)))
	switch {
	case ret == C.TLS_WANT_POLLIN:
		return -1, errWantPollIn
	case ret == C.TLS_WANT_POLLOUT:
		return -1, errWantPollOut
	case ret < 0:
		return -1, t.Error()
	}
	return int(ret), nil
}

// Close closes the TLS connection.
func (t *TLS) Close() error {
	ret := C.tls_close(t.ctx)
	switch {
	case ret == C.TLS_WANT_POLLIN:
		return errWantPollIn
	case ret == C.TLS_WANT_POLLOUT:
		return errWantPollOut
	case ret != 0:
		return t.Error()
	}
	return nil
}

// Free frees resources associated with the TLS context.
func (t *TLS) Free() {
	if t.ctx == nil {
		return
	}
	C.tls_free(t.ctx)
	t.ctx = nil
}
@


1.8
log
@Provide support for libtls protocols and allow for protocols to be set on
a TLS config. The ConnVersion function now also returns a protocol version
instead of a string.
@
text
@d110 10
@


1.7
log
@Add handling for errors on the TLS config and properly check/handle
failures when setting the CA file.
@
text
@d26 36
d110 8
d231 1
a231 1
func (t *TLS) ConnVersion() (string, error) {
d234 1
a234 1
		return "", errors.New("no connection version")
d236 1
a236 1
	return C.GoString(ver), nil
@


1.6
log
@libtls errors are much more descriptive these days - return them directly
and avoid adding redundant/duplicate information.
@
text
@d56 8
d65 1
a65 1
func (c *TLSConfig) SetCAFile(filename string) {
d68 4
a71 1
	C.tls_config_set_ca_file(c.tlsCfg, caFile)
@


1.5
log
@We no longer need to keep pointers following tls_config_set_*() calls.
@
text
@a16 1
	"fmt"
d108 1
a108 1
func (t *TLS) Error() string {
d110 1
a110 1
		return C.GoString(msg)
d112 1
a112 1
	return ""
d205 1
a205 1
		return fmt.Errorf("connect failed: %v", t.Error())
d219 1
a219 1
		return fmt.Errorf("handshake failed: %v", t.Error())
d233 1
a233 1
		return -1, fmt.Errorf("read failed: %v", t.Error())
d249 1
a249 1
		return -1, fmt.Errorf("write failed: %v", t.Error())
d263 1
a263 1
		return fmt.Errorf("close failed: %v", t.Error())
@


1.4
log
@Add test coverage for peer certificate info and connection info.
@
text
@a28 1
	caFile *C.char
d59 3
a61 5
	if c.caFile != nil {
		C.free(unsafe.Pointer(c.caFile))
	}
	c.caFile = C.CString(filename)
	C.tls_config_set_ca_file(c.tlsCfg, c.caFile)
@


1.3
log
@Make regress work again post hackathon tls_handshake/tls_read/tls_write
changes.
@
text
@d18 1
d117 78
@


1.2
log
@Update for recent verify related naming changes.
@
text
@d21 5
d135 14
d151 7
a157 2
	var inlen C.size_t
	if C.tls_read(t.ctx, unsafe.Pointer(&buf[0]), C.size_t(len(buf)), (*C.size_t)(unsafe.Pointer(&inlen))) != 0 {
d160 1
a160 1
	return int(inlen), nil
a164 1
	var outlen C.size_t
d167 7
a173 1
	if C.tls_write(t.ctx, unsafe.Pointer(p), C.size_t(len(buf)), (*C.size_t)(unsafe.Pointer(&outlen))) != 0 {
d176 1
a176 1
	return int(outlen), nil
d181 7
a187 1
	if C.tls_close(t.ctx) != 0 {
@


1.1
log
@Update regress for the libressl to libtls rename.
@
text
@d66 3
a68 3
// InsecureNoVerifyHost disables hostname verification for the connection.
func (c *TLSConfig) InsecureNoVerifyHost() {
	C.tls_config_insecure_noverifyhost(c.tlsCfg)
@

