head	1.7;
access;
symbols
	OPENBSD_6_2:1.7.0.4
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.5.0.8
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.4
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.4
	OPENBSD_5_7_BASE:1.3;
locks; strict;
comment	@ * @;


1.7
date	2017.04.30.03.53.31;	author jsing;	state Exp;
branches;
next	1.6;
commitid	GyYqM7XeXZT8mHtf;

1.6
date	2017.04.10.17.12.30;	author jsing;	state Exp;
branches;
next	1.5;
commitid	uRsosqKNwS5HOY1K;

1.5
date	2015.09.11.13.10.42;	author beck;	state Exp;
branches;
next	1.4;
commitid	ucxf0FJxy86BwCNQ;

1.4
date	2015.09.11.12.57.24;	author beck;	state Exp;
branches;
next	1.3;
commitid	m3aLgSQB1I17TKWq;

1.3
date	2015.02.22.15.14.32;	author jsing;	state Exp;
branches;
next	1.2;
commitid	IYDmj8mqnK9qAXnY;

1.2
date	2014.12.07.16.56.17;	author bcook;	state Exp;
branches;
next	1.1;
commitid	ig91zabTuUs7Q4W8;

1.1
date	2014.11.01.11.55.27;	author jsing;	state Exp;
branches;
next	;
commitid	QNBSYdzwXq8mAQJU;


desc
@@


1.7
log
@Add missing tls_init() and tls_free() calls.
@
text
@/*	$OpenBSD: verifytest.c,v 1.6 2017/04/10 17:12:30 jsing Exp $	*/
/*
 * Copyright (c) 2014 Joel Sing <jsing@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <err.h>
#include <stdio.h>
#include <stdlib.h>

#include <openssl/x509v3.h>
#include <tls.h>

extern int tls_check_name(struct tls *ctx, X509 *cert, const char *name,
    int *match);

struct alt_name {
	const char name[128];
	int name_len;
	int name_type;
};

struct verify_test {
	const char common_name[128];
	int common_name_len;
	struct alt_name alt_name1;
	struct alt_name alt_name2;
	struct alt_name alt_name3;
	const char name[128];
	int want_return;
	int want_match;
};

struct verify_test verify_tests[] = {
	{
		/* CN without SANs - matching. */
		.common_name = "www.openbsd.org",
		.common_name_len = -1,
		.name = "www.openbsd.org",
		.want_return = 0,
		.want_match = 1,
	},
	{
		/* Zero length name - non-matching. */
		.common_name = "www.openbsd.org",
		.common_name_len = -1,
		.name = "",
		.want_return = 0,
		.want_match = 0,
	},
	{
		/* CN wildcard without SANs - matching. */
		.common_name = "*.openbsd.org",
		.common_name_len = -1,
		.name = "www.openbsd.org",
		.want_return = 0,
		.want_match = 1,
	},
	{
		/* CN without SANs - non-matching. */
		.common_name = "www.openbsdfoundation.org",
		.common_name_len = -1,
		.name = "www.openbsd.org",
		.want_return = 0,
		.want_match = 0,
	},
	{
		/* CN wildcard without SANs - invalid CN wildcard. */
		.common_name = "w*.openbsd.org",
		.common_name_len = -1,
		.name = "www.openbsd.org",
		.want_return = 0,
		.want_match = 0,
	},
	{
		/* CN wildcard without SANs - invalid CN wildcard. */
		.common_name = "www.*.org",
		.common_name_len = -1,
		.name = "www.openbsd.org",
		.want_return = 0,
		.want_match = 0,
	},
	{
		/* CN wildcard without SANs - invalid CN wildcard. */
		.common_name = "www.openbsd.*",
		.common_name_len = -1,
		.name = "www.openbsd.org",
		.want_return = 0,
		.want_match = 0,
	},
	{
		/* CN wildcard without SANs - invalid CN wildcard. */
		.common_name = "*",
		.common_name_len = -1,
		.name = "www.openbsd.org",
		.want_return = 0,
		.want_match = 0,
	},
	{
		/* CN wildcard without SANs - invalid CN wildcard. */
		.common_name = "*.org",
		.common_name_len = -1,
		.name = "www.openbsd.org",
		.want_return = 0,
		.want_match = 0,
	},
	{
		/* CN wildcard without SANs - invalid CN wildcard. */
		.common_name = "*.org",
		.common_name_len = -1,
		.name = "openbsd.org",
		.want_return = 0,
		.want_match = 0,
	},
	{
		/* CN IPv4 without SANs - matching. */
		.common_name = "1.2.3.4",
		.common_name_len = -1,
		.name = "1.2.3.4",
		.want_return = 0,
		.want_match = 1,
	},
	{
		/* CN IPv4 wildcard without SANS - invalid IP wildcard. */
		.common_name = "*.2.3.4",
		.common_name_len = -1,
		.name = "1.2.3.4",
		.want_return = 0,
		.want_match = 0,
	},
	{
		/* CN IPv6 without SANs - matching. */
		.common_name = "cafe::beef",
		.common_name_len = -1,
		.name = "cafe::beef",
		.want_return = 0,
		.want_match = 1,
	},
	{
		/* CN without SANs - error due to embedded NUL in CN. */
		.common_name = {
			0x77, 0x77, 0x77, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
			0x62, 0x73, 0x64, 0x2e, 0x6f, 0x72, 0x67, 0x00,
			0x6e, 0x61, 0x73, 0x74, 0x79, 0x2e, 0x6f, 0x72,
			0x67,
		},
		.common_name_len = 25,
		.name = "www.openbsd.org",
		.want_return = -1,
		.want_match = 0,
	},
	{
		/* CN wildcard without SANs - invalid non-matching name. */
		.common_name = "*.openbsd.org",
		.common_name_len = -1,
		.name = ".openbsd.org",
		.want_return = 0,
		.want_match = 0,
	},
	{
		/* CN with SANs - matching on first SAN. */
		.common_name = "www.openbsd.org",
		.common_name_len = -1,
		.alt_name1 = {
			.name = "www.openbsd.org",
			.name_len = -1,
			.name_type = GEN_DNS,
		},
		.alt_name2 = {
			.name = "ftp.openbsd.org",
			.name_len = -1,
			.name_type = GEN_DNS,
		},
		.name = "www.openbsd.org",
		.want_return = 0,
		.want_match = 1,
	},
	{
		/* SANs only - matching on first SAN. */
		.common_name_len = 0,
		.alt_name1 = {
			.name = "www.openbsd.org",
			.name_len = -1,
			.name_type = GEN_DNS,
		},
		.alt_name2 = {
			.name = "ftp.openbsd.org",
			.name_len = -1,
			.name_type = GEN_DNS,
		},
		.name = "www.openbsd.org",
		.want_return = 0,
		.want_match = 1,
	},
	{
		/* SANs only - matching on second SAN. */
		.common_name_len = 0,
		.alt_name1 = {
			.name = "www.openbsd.org",
			.name_len = -1,
			.name_type = GEN_DNS,
		},
		.alt_name2 = {
			.name = "ftp.openbsd.org",
			.name_len = -1,
			.name_type = GEN_DNS,
		},
		.name = "ftp.openbsd.org",
		.want_return = 0,
		.want_match = 1,
	},
	{
		/* SANs only - non-matching. */
		.common_name_len = 0,
		.alt_name1 = {
			.name = "www.openbsd.org",
			.name_len = -1,
			.name_type = GEN_DNS,
		},
		.alt_name2 = {
			.name = "ftp.openbsd.org",
			.name_len = -1,
			.name_type = GEN_DNS,
		},
		.name = "mail.openbsd.org",
		.want_return = 0,
		.want_match = 0,
	},
	{
		/* CN with SANs - matching on second SAN. */
		.common_name = "www.openbsd.org",
		.common_name_len = -1,
		.alt_name1 = {
			.name = "www.openbsd.org",
			.name_len = -1,
			.name_type = GEN_DNS,
		},
		.alt_name2 = {
			.name = "ftp.openbsd.org",
			.name_len = -1,
			.name_type = GEN_DNS,
		},
		.name = "ftp.openbsd.org",
		.want_return = 0,
		.want_match = 1,
	},
	{
		/* CN with SANs - matching on wildcard second SAN. */
		.common_name = "www.openbsdfoundation.org",
		.common_name_len = -1,
		.alt_name1 = {
			.name = "www.openbsdfoundation.org",
			.name_len = -1,
			.name_type = GEN_DNS,
		},
		.alt_name2 = {
			.name = "*.openbsd.org",
			.name_len = -1,
			.name_type = GEN_DNS,
		},
		.name = "www.openbsd.org",
		.want_return = 0,
		.want_match = 1,
	},
	{
		/* CN with SANs - non-matching invalid wildcard. */
		.common_name = "www.openbsdfoundation.org",
		.common_name_len = -1,
		.alt_name1 = {
			.name = "www.openbsdfoundation.org",
			.name_len = -1,
			.name_type = GEN_DNS,
		},
		.alt_name2 = {
			.name = "*.org",
			.name_len = -1,
			.name_type = GEN_DNS,
		},
		.name = "www.openbsd.org",
		.want_return = 0,
		.want_match = 0,
	},
	{
		/* CN with SANs - non-matching IPv4 due to GEN_DNS SAN. */
		.common_name = "www.openbsd.org",
		.common_name_len = -1,
		.alt_name1 = {
			.name = "www.openbsd.org",
			.name_len = -1,
			.name_type = GEN_DNS,
		},
		.alt_name2 = {
			.name = "1.2.3.4",
			.name_len = -1,
			.name_type = GEN_DNS,
		},
		.name = "1.2.3.4",
		.want_return = 0,
		.want_match = 0,
	},
	{
		/* CN with SANs - matching IPv4 on GEN_IPADD SAN. */
		.common_name = "www.openbsd.org",
		.common_name_len = -1,
		.alt_name1 = {
			.name = "www.openbsd.org",
			.name_len = -1,
			.name_type = GEN_DNS,
		},
		.alt_name2 = {
			.name = {0x01, 0x02, 0x03, 0x04},
			.name_len = 4,
			.name_type = GEN_IPADD,
		},
		.name = "1.2.3.4",
		.want_return = 0,
		.want_match = 1,
	},
	{
		/* CN with SANs - matching IPv6 on GEN_IPADD SAN. */
		.common_name = "www.openbsd.org",
		.common_name_len = -1,
		.alt_name1 = {
			.name = "www.openbsd.org",
			.name_len = -1,
			.name_type = GEN_DNS,
		},
		.alt_name2 = {
			.name = {
				0xca, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xef,
			},
			.name_len = 16,
			.name_type = GEN_IPADD,
		},
		.name = "cafe::beef",
		.want_return = 0,
		.want_match = 1,
	},
	{
		/* CN with SANs - error due to embedded NUL in GEN_DNS. */
		.common_name = "www.openbsd.org.nasty.org",
		.common_name_len = -1,
		.alt_name1 = {
			.name = "www.openbsd.org.nasty.org",
			.name_len = -1,
			.name_type = GEN_DNS,
		},
		.alt_name2 = {
			.name = {
				0x77, 0x77, 0x77, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
				0x62, 0x73, 0x64, 0x2e, 0x6f, 0x72, 0x67, 0x00,
				0x6e, 0x61, 0x73, 0x74, 0x79, 0x2e, 0x6f, 0x72,
				0x67,
			},
			.name_len = 25,
			.name_type = GEN_DNS,
		},
		.name = "www.openbsd.org",
		.want_return = -1,
		.want_match = 0,
	},
	{
		/* CN with SAN - non-matching due to non-matching SAN. */
		.common_name = "www.openbsd.org",
		.common_name_len = -1,
		.alt_name1 = {
			.name = "ftp.openbsd.org",
			.name_len = -1,
			.name_type = GEN_DNS,
		},
		.name = "www.openbsd.org",
		.want_return = 0,
		.want_match = 0,
	},
	{
		/* CN with SAN - error due to illegal dNSName. */
		.common_name = "www.openbsd.org",
		.common_name_len = -1,
		.alt_name1 = {
			.name = " ",
			.name_len = -1,
			.name_type = GEN_DNS,
		},
		.name = "www.openbsd.org",
		.want_return = -1,
		.want_match = 0,
	},
};

#define N_VERIFY_TESTS \
    (sizeof(verify_tests) / sizeof(*verify_tests))

static void
alt_names_add(STACK_OF(GENERAL_NAME) *alt_name_stack, struct alt_name *alt)
{
	ASN1_STRING *alt_name_str;
	GENERAL_NAME *alt_name;

	if ((alt_name = GENERAL_NAME_new()) == NULL)
		errx(1, "failed to malloc GENERAL_NAME");
	alt_name->type = alt->name_type;

	if ((alt_name_str = ASN1_STRING_new()) == NULL)
		errx(1, "failed to malloc alt name");
	if (ASN1_STRING_set(alt_name_str, alt->name, alt->name_len) == 0)
		errx(1, "failed to set alt name");

	switch (alt_name->type) {
	case GEN_DNS:
		alt_name->d.dNSName = alt_name_str;
		break;
	case GEN_IPADD:
		alt_name->d.iPAddress = alt_name_str;
		break;
	default:
		errx(1, "unknown alt name type (%i)", alt_name->type);
	}

	if (sk_GENERAL_NAME_push(alt_name_stack, alt_name) == 0)
		errx(1, "failed to push alt_name");
}

static void
cert_add_alt_names(X509 *cert, struct verify_test *vt)
{
	STACK_OF(GENERAL_NAME) *alt_name_stack = NULL;

	if (vt->alt_name1.name_type == 0)
		return;

	if ((alt_name_stack = sk_GENERAL_NAME_new_null()) == NULL)
		errx(1, "failed to malloc sk_GENERAL_NAME");

	if (vt->alt_name1.name_type != 0)
		alt_names_add(alt_name_stack, &vt->alt_name1);
	if (vt->alt_name2.name_type != 0)
		alt_names_add(alt_name_stack, &vt->alt_name2);
	if (vt->alt_name3.name_type != 0)
		alt_names_add(alt_name_stack, &vt->alt_name3);

	if (X509_add1_ext_i2d(cert, NID_subject_alt_name,
	    alt_name_stack, 0, 0) == 0)
		errx(1, "failed to set subject alt name");

	sk_GENERAL_NAME_pop_free(alt_name_stack, GENERAL_NAME_free);
}

static int
do_verify_test(int test_no, struct verify_test *vt)
{
	struct tls *tls;
	X509_NAME *name;
	X509 *cert;
	int failed = 1;
	int match;

	/* Build certificate structure. */
	if ((cert = X509_new()) == NULL)
		errx(1, "failed to malloc X509");

	if (vt->common_name_len != 0) {
		if ((name = X509_NAME_new()) == NULL)
			errx(1, "failed to malloc X509_NAME");
		if (X509_NAME_add_entry_by_NID(name, NID_commonName,
		    MBSTRING_ASC, (unsigned char *)vt->common_name,
		    vt->common_name_len, -1, 0) == 0)
			errx(1, "failed to add name entry");
		if (X509_set_subject_name(cert, name) == 0)
			errx(1, "failed to set subject name");
		X509_NAME_free(name);
	}

	if ((tls = tls_client()) == NULL)
		errx(1, "failed to malloc tls_client");

	cert_add_alt_names(cert, vt);

	match = 1;

	if (tls_check_name(tls, cert, vt->name, &match) != vt->want_return) {
		fprintf(stderr, "FAIL: test %i failed for check name '%s': "
		    "%s\n", test_no, vt->name, tls_error(tls));
		goto done;
	}
	if (match != vt->want_match) {
		fprintf(stderr, "FAIL: test %i failed to match name '%s'\n",
		    test_no, vt->name);
		goto done;
	}

	failed = 0;

 done:
	X509_free(cert);
	tls_free(tls);

	return (failed);
}

int
main(int argc, char **argv)
{
	int failed = 0;
	size_t i;

	tls_init();

	for (i = 0; i < N_VERIFY_TESTS; i++)
		failed += do_verify_test(i, &verify_tests[i]);

	return (failed);
}
@


1.6
log
@Rework and significantly extend TLS name verification tests to match
changes in libtls.
@
text
@d1 1
a1 1
/*	$OpenBSD: verifytest.c,v 1.5 2015/09/11 13:10:42 beck Exp $	*/
d507 1
d517 2
@


1.5
log
@regress test that we do not allow a wildcard match for ".openbsd.org"
against a wildcard of "*.openbsd.org"
@
text
@d1 1
a1 1
/*	$OpenBSD: verifytest.c,v 1.4 2015/09/11 12:57:24 beck Exp $	*/
d25 8
a32 1
extern int tls_check_name(struct tls *ctx, X509 *cert, const char *name);
d36 4
a39 3
	const char alt_name[128];
	int alt_name_len;
	int alt_name_type;
d41 2
a42 1
	int want;
d47 1
d49 1
d51 2
a52 1
		.want = 0,
d55 1
d57 1
d59 2
a60 1
		.want = -1,
d63 1
d65 1
d67 2
a68 1
		.want = 0,
d71 1
d73 1
d75 2
a76 1
		.want = -1,
d79 1
d81 1
d83 2
a84 1
		.want = -1,
d87 1
d89 1
d91 2
a92 1
		.want = -1,
d95 1
d97 1
d99 2
a100 1
		.want = -1,
d103 1
d105 1
d107 2
a108 1
		.want = -1,
d111 1
d113 1
d115 2
a116 1
		.want = -1,
d119 1
d121 1
d123 2
a124 1
		.want = -1,
d127 1
d129 1
d131 2
a132 1
		.want = 0,
d135 1
d137 1
d139 2
a140 1
		.want = -1,
d143 1
d145 1
d147 75
a221 1
		.want = 0,
d224 18
d243 11
a253 3
		.alt_name = "ftp.openbsd.org",
		.alt_name_len = -1,
		.alt_name_type = GEN_DNS,
d255 2
a256 1
		.want = 0,
d259 1
d261 11
a271 3
		.alt_name = "*.openbsd.org",
		.alt_name_len = -1,
		.alt_name_type = GEN_DNS,
d273 2
a274 1
		.want = 0,
d277 1
d279 11
a289 3
		.alt_name = "*.org",
		.alt_name_len = -1,
		.alt_name_type = GEN_DNS,
d291 2
a292 1
		.want = -1,
d295 1
d297 11
a307 3
		.alt_name = "1.2.3.4",
		.alt_name_len = -1,
		.alt_name_type = GEN_DNS,
d309 2
a310 1
		.want = -1,
d313 1
d315 11
a325 3
		.alt_name = {0x1, 0x2, 0x3, 0x4},
		.alt_name_len = 4,
		.alt_name_type = GEN_IPADD,
d327 2
a328 1
		.want = 0,
d331 1
d333 13
a345 3
		.alt_name = {
			0xca, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xef,
a346 2
		.alt_name_len = 16,
		.alt_name_type = GEN_IPADD,
d348 2
a349 1
		.want = 0,
d352 47
a398 3
		.common_name = "*.openbsd.org",
		.name = ".openbsd.org",
		.want = -1,
d405 55
d463 1
a463 3
	STACK_OF(GENERAL_NAME) *alt_name_stack = NULL;
	ASN1_STRING *alt_name_str;
	GENERAL_NAME *alt_name;
d466 2
a467 1
	struct tls *tls;
d472 13
a484 8
	if ((name = X509_NAME_new()) == NULL)
		errx(1, "failed to malloc X509_NAME");
	if (X509_NAME_add_entry_by_NID(name, NID_commonName, MBSTRING_ASC,
	    (unsigned char *)vt->common_name, -1, -1, 0) == 0)
		errx(1, "failed to add name entry");
	if (X509_set_subject_name(cert, name) == 0)
		errx(1, "failed to set subject name");
	X509_NAME_free(name);
d488 13
a500 32
	if (vt->alt_name_type != 0) {
		if ((alt_name_stack = sk_GENERAL_NAME_new_null()) == NULL)
			errx(1, "failed to malloc sk_GENERAL_NAME");
		if ((alt_name = GENERAL_NAME_new()) == NULL)
			errx(1, "failed to malloc GENERAL_NAME");
		alt_name->type = vt->alt_name_type;

		if ((alt_name_str = ASN1_STRING_new()) == NULL)
			errx(1, "failed to malloc alt name");
		if (ASN1_STRING_set(alt_name_str, vt->alt_name,
		    vt->alt_name_len) == 0)
			errx(1, "failed to set alt name");

		switch (alt_name->type) {
		case GEN_DNS:
			alt_name->d.dNSName = alt_name_str;
			break;

		case GEN_IPADD:
			alt_name->d.iPAddress = alt_name_str;
			break;

		default:
			errx(1, "unknown alt name type (%i)", alt_name->type);
		}
	
		if (sk_GENERAL_NAME_push(alt_name_stack, alt_name) == 0)
			errx(1, "failed to push alt_name");
		if (X509_add1_ext_i2d(cert, NID_subject_alt_name,
		    alt_name_stack, 0, 0) == 0)
			errx(1, "failed to set subject alt name");
		sk_GENERAL_NAME_pop_free(alt_name_stack, GENERAL_NAME_free);
d503 1
a503 6
	if (tls_check_name(tls, cert, vt->name) != vt->want) {
		fprintf(stderr, "FAIL: test %i failed with common name "
		    "'%s', alt name '%s' and name '%s'\n", test_no,
		    vt->common_name, vt->alt_name, vt->name);
		return (1);
	}
d505 1
d508 1
a508 1
	return (0);
@


1.4
log
@fix verify to allow for servername->name
ok jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: verifytest.c,v 1.3 2015/02/22 15:14:32 jsing Exp $	*/
d152 5
@


1.3
log
@Update for recent verify related naming changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: verifytest.c,v 1.2 2014/12/07 16:56:17 bcook Exp $	*/
d25 1
a25 1
extern int tls_check_servername(struct tls *ctx, X509 *cert, const char *name);
d32 1
a32 1
	const char servername[128];
d39 1
a39 1
		.servername = "www.openbsd.org",
d44 1
a44 1
		.servername = "",
d49 1
a49 1
		.servername = "www.openbsd.org",
d54 1
a54 1
		.servername = "www.openbsd.org",
d59 1
a59 1
		.servername = "www.openbsd.org",
d64 1
a64 1
		.servername = "www.openbsd.org",
d69 1
a69 1
		.servername = "www.openbsd.org",
d74 1
a74 1
		.servername = "www.openbsd.org",
d79 1
a79 1
		.servername = "www.openbsd.org",
d84 1
a84 1
		.servername = "openbsd.org",
d89 1
a89 1
		.servername = "1.2.3.4",
d94 1
a94 1
		.servername = "1.2.3.4",
d99 1
a99 1
		.servername = "cafe::beef",
d107 1
a107 1
		.servername = "ftp.openbsd.org",
d115 1
a115 1
		.servername = "www.openbsd.org",
d123 1
a123 1
		.servername = "www.openbsd.org",
d131 1
a131 1
		.servername = "1.2.3.4",
d139 1
a139 1
		.servername = "1.2.3.4",
d150 1
a150 1
		.servername = "cafe::beef",
d216 1
a216 1
	if (tls_check_servername(tls, cert, vt->servername) != vt->want) {
d218 2
a219 2
		    "'%s', alt name '%s' and servername '%s'\n", test_no,
		    vt->common_name, vt->alt_name, vt->servername);
@


1.2
log
@Allow specific libtls hostname validation errors to propagate.

Remove direct calls to printf from the tls_check_hostname() path. This allows
NUL byte error messages to bubble up to the caller, to be logged in a
program-appropriate way. It also removes non-portable calls to getprogname().

ok jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: verifytest.c,v 1.1 2014/11/01 11:55:27 jsing Exp $	*/
d25 1
a25 1
extern int tls_check_hostname(struct tls *ctx, X509 *cert, const char *host);
d32 1
a32 1
	const char hostname[128];
d39 1
a39 1
		.hostname = "www.openbsd.org",
d44 1
a44 1
		.hostname = "",
d49 1
a49 1
		.hostname = "www.openbsd.org",
d54 1
a54 1
		.hostname = "www.openbsd.org",
d59 1
a59 1
		.hostname = "www.openbsd.org",
d64 1
a64 1
		.hostname = "www.openbsd.org",
d69 1
a69 1
		.hostname = "www.openbsd.org",
d74 1
a74 1
		.hostname = "www.openbsd.org",
d79 1
a79 1
		.hostname = "www.openbsd.org",
d84 1
a84 1
		.hostname = "openbsd.org",
d89 1
a89 1
		.hostname = "1.2.3.4",
d94 1
a94 1
		.hostname = "1.2.3.4",
d99 1
a99 1
		.hostname = "cafe::beef",
d107 1
a107 1
		.hostname = "ftp.openbsd.org",
d115 1
a115 1
		.hostname = "www.openbsd.org",
d123 1
a123 1
		.hostname = "www.openbsd.org",
d131 1
a131 1
		.hostname = "1.2.3.4",
d139 1
a139 1
		.hostname = "1.2.3.4",
d150 1
a150 1
		.hostname = "cafe::beef",
d216 1
a216 1
	if (tls_check_hostname(tls, cert, vt->hostname) != vt->want) {
d218 2
a219 2
		    "'%s', alt name '%s' and hostname '%s'\n", test_no,
		    vt->common_name, vt->alt_name, vt->hostname);
@


1.1
log
@Initial regress for libtls hostname verification.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d23 1
d25 1
a25 1
extern int tls_check_hostname(X509 *cert, const char *host);
d166 1
d179 2
d216 1
a216 1
	if (tls_check_hostname(cert, vt->hostname) != vt->want) {
@

