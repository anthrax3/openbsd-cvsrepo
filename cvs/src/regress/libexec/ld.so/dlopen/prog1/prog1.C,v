head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.50
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.48
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.44
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.34
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.42
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.40
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.38
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.36
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.32
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.30
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.28
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.26
	OPENBSD_5_0:1.4.0.24
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.22
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.20
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.16
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.18
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.14
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.12
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.10
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.8
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.6
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.4
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.2
	OPENBSD_3_9_BASE:1.4
	DLOPEN_DRAHN:1.1.1.1
	DLOPEN_TEST:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2005.09.19.18.39.38;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.18.19.58.50;	author drahn;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.17.01.55.23;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.13.20.51.39;	author drahn;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.09.13.20.51.39;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.4
log
@ansi clean so that all gcc versions can compile these; ok drahn
@
text
@/*
 * Public Domain 2003 Dale Rahn
 *
 * $OpenBSD: prog1.C,v 1.3 2005/09/18 19:58:50 drahn Exp $
 */
#include <iostream>
#include <dlfcn.h>
#include <string.h>
#include <stdio.h>
typedef char * (cp_func)(void);
int a;
int
main()
{
	void *handle1;
	void *handle2;
	char **libname;
	char *str;
	cp_func *func;
	int ret = 0;

	std::cout << "main\n";
	handle1 = dlopen("libaa.so.0.0", DL_LAZY);
	if (handle1 == NULL) {
		std::cout << "handle1 open libaa failed\n";
		return (1);
	}
	handle2 = dlopen("libab.so.0.0", DL_LAZY);
	if (handle2 == NULL) {
		std::cout << "handle2 open libab failed\n";
		return (1);
	}

	libname = (char **)dlsym(handle1, "libname");
	if (strcmp(*libname, "libaa") != 0) {
		std::cout << "handle1 is " << *libname << "\n";
		return (1);
	}

	libname = (char **)dlsym(handle2, "libname");
	if (strcmp(*libname, "libab") != 0) {
		std::cout << "handle2 is " << *libname << "\n";
		return (1);
	}

	func = (cp_func*)dlsym(handle1, "lib_entry");
	str = (*func)();
	if (strcmp(str, "libaa:aa") != 0) {
		printf("func should have returned libaa:aa returned %s\n", str);
		ret = 1;
	}

	func = (cp_func*)dlsym(handle2, "lib_entry");
	str = (*func)();
	if (strcmp(str, "libab:ab") != 0) {
		printf("func should have returned libab:ab returned %s\n", str);
		ret = 1;
	}

	dlclose(handle1);
	dlclose(handle2);

	return ret;
}
@


1.3
log
@Make these tests more regress like, self diagnosing, less verbose.
@
text
@d4 1
a4 1
 * $OpenBSD: prog1.C,v 1.2 2005/09/17 01:55:23 drahn Exp $
d9 1
@


1.2
log
@more like a real regression test, not just printfs.
@
text
@d4 1
a4 1
 * $OpenBSD: prog1.C,v 1.1.1.1 2005/09/13 20:51:39 drahn Exp $
d9 1
a9 1
typedef void (v_func)(void);
d17 3
a19 1
	v_func *func;
d45 6
a50 2
	func = (v_func*)dlsym(handle1, "lib_entry");
	(*func)();
d52 6
a57 2
	func = (v_func*)dlsym(handle2, "lib_entry");
	(*func)();
d62 1
a62 1
	return 0;
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
 * $OpenBSD: prog1.C,v 1.1 2003/02/01 19:56:17 drahn Exp $
d8 1
d22 2
a23 1
		std::cout << "handle1 failed\n";
d27 2
a28 1
		std::cout << "handle1 failed\n";
d30 1
a30 1
	std::cout << "loaded \n";
d32 5
a36 1
	std::cout << "handle1 is " << *libname << "\n";
d38 5
a42 1
	std::cout << "handle2 is " << *libname << "\n";
d45 1
a48 1
	std::cout << "closing \n";
a50 1
	std::cout << "all done \n";
@


1.1.1.1
log
@dlopen regress tests.
@
text
@@
