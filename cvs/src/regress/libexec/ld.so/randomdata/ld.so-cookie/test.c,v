head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.16
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.12
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.10
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.8
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.6
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3;
locks; strict;
comment	@ * @;


1.4
date	2014.02.16.00.33.44;	author martynas;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.15.11.12;	author matthew;	state Exp;
branches;
next	1.2;

1.2
date	2012.08.16.20.38.13;	author matthew;	state Exp;
branches;
next	1.1;

1.1
date	2012.08.16.18.19.36;	author matthew;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update ld.so-cookie test which is currently broken and gets in the
way of SSP testing.  For some reason this diff keeps escaping from
cvs commit...

Basic idea:
* Use dl_iterate_phdr() to iterate all loaded ELF program headers.
* Check that we actually find a header for ld.so.
* For ld.so, check that we find a PT_OPENBSD_RANDOMIZE segment.
* For each PT_OPENBSD_RANDOMIZE segment, check that at least one
byte in the memory range is non-zero.

Written by matthew@@.
"Please go ahaed" kettenis@@.
"Move fast" deraadt@@, a week ago.
@
text
@#include <sys/types.h>
#include <sys/exec_elf.h>

#include <assert.h>
#include <dlfcn.h>
#include <link.h>
#include <stddef.h>
#include <string.h>

static int
nonzero(char *s, size_t n)
{
	size_t i;

	for (i = 0; i < n; i++)
		if (s[i] != 0)
			return (1);

	return (0);
}

static int foundldso = 0;

static int
callback(struct dl_phdr_info *info, size_t size, void *cookie)
{
	int i;
	int foundrandomize = 0;

	assert(size >= sizeof(struct dl_phdr_info));

	if (strcmp(info->dlpi_name, "/usr/libexec/ld.so") != 0)
		return (0);
	foundldso = 1;

	for (i = 0; i < info->dlpi_phnum; i++)
		if (info->dlpi_phdr[i].p_type == PT_OPENBSD_RANDOMIZE) {
			foundrandomize = 1;
			assert(nonzero((char *)(info->dlpi_phdr[i].p_vaddr +
			    info->dlpi_addr), info->dlpi_phdr[i].p_memsz));
		}

	assert(foundrandomize);
	return (0);
}

int
main()
{
	dl_iterate_phdr(callback, NULL);
	assert(foundldso);
	return (0);
}
@


1.3
log
@Double check that we're not testing libc's __guard.  Changing ld.so's
__guard symbol to HIDDEN causes dlsym() to return a pointer to libc's
__guard instead, which can cause the test to wrongly pass even if
ld.so's random data segments are not being initialized properly.
@
text
@d1 3
d6 1
d8 38
d50 2
a51 14
	void *dso;
	long *guardptr;
	long guard;
	extern long __guard[];

	dso = dlopen("ld.so", RTLD_LOCAL|RTLD_LAZY);
	assert(dso != NULL);
	guardptr = dlsym(dso, "__guard");
	assert(guardptr != NULL);
	assert(guardptr != &__guard[0]);

	guard = *guardptr;
	assert(guard != 0);

@


1.2
log
@Use dlopen("ld.so") instead of dlopen("/usr/libexec/ld.so") so we get
a reference to the already loaded ld.so instead of loading another
instance.
@
text
@d11 1
d17 1
@


1.1
log
@Add a test case to verify ld.so's randomdata section is initialized
too, since interpreters will be initialized by a slightly different
code path than executables.
@
text
@d12 1
a12 1
	dso = dlopen("/usr/libexec/ld.so", RTLD_LOCAL|RTLD_LAZY);
@

