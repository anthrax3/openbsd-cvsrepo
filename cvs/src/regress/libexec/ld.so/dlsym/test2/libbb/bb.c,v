head	1.3;
access;
symbols
	OPENBSD_6_1:1.3.0.46
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.44
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.34
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.42
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.40
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.38
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.36
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.32
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.30
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.28
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.26
	OPENBSD_5_0:1.3.0.24
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.22
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.20
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.16
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.18
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.14
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.12
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.10
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.8
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.6
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.4
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.2
	OPENBSD_3_9_BASE:1.3
	kurt_20050915:1.1.1.1
	kurt:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2005.09.28.14.57.10;	author kurt;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.16.23.30.25;	author kurt;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.15.22.16.27;	author kurt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.09.15.22.16.27;	author kurt;	state Exp;
branches;
next	;


desc
@@


1.3
log
@make sure dlsym(RTLD_DEFAULT,...) can see symbols in own object group
@
text
@/*	$OpenBSD: bb.c,v 1.2 2005/09/16 23:30:25 kurt Exp $	*/

/*
 * Copyright (c) 2005 Kurt Miller <kurt@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <dlfcn.h>
#include <stdio.h>

int bbSymbol;

/*
 * bbTest1 checks dlsym symbol visibility from a single dlopened object
 * group that looks like libbb -> libcc. This was opened from libaa in
 * the main object group. So the default search order will be prog2 ->
 * libaa -> libbb -> libcc. only dlsym(RTLD_DEFAULT,...) should see
 * symbols in prog2 and libaa. the rest are limited to libbb and libcc.
 */
int
bbTest1(void *libbb)
{
	int ret = 0;

	/* check RTLD_DEFAULT can see symbols in main object group */
	if (dlsym(RTLD_DEFAULT, "mainSymbol") == NULL) {
		printf("dlsym(RTLD_DEFAULT, \"mainSymbol\") == NULL\n");
		ret = 1;
	}

	/* check RTLD_DEFAULT can see symbols in the libbb object group */
	if (dlsym(RTLD_DEFAULT, "bbSymbol") == NULL) {
		printf("dlsym(RTLD_DEFAULT, \"bbSymbol\") == NULL\n");
		ret = 1;
	}

	/* check RTLD_SELF can *not* see symbols in main object group */
	if (dlsym(RTLD_SELF, "aaSymbol") != NULL) {
		printf("dlsym(RTLD_SELF, \"aaSymbol\") != NULL\n");
		ret = 1;
	}

	/* check RTLD_NEXT can *not* see symbols in main object group */
	if (dlsym(RTLD_NEXT, "aaSymbol") != NULL) {
		printf("dlsym(RTLD_NEXT, \"aaSymbol\") != NULL\n");
		ret = 1;
	}

	/* check NULL can *not* see symbols in main object group */
	if (dlsym(NULL, "aaSymbol") != NULL) {
		printf("dlsym(NULL, \"aaSymbol\") != NULL\n");
		ret = 1;
	}

	/* check RTLD_SELF can see symbols in local object group */
	if (dlsym(RTLD_SELF, "ccSymbol") == NULL) {
		printf("dlsym(RTLD_SELF, \"ccSymbol\") == NULL\n");
		ret = 1;
	}

	/* check RTLD_NEXT can see symbols in local object group */
	if (dlsym(RTLD_NEXT, "ccSymbol") == NULL) {
		printf("dlsym(RTLD_NEXT, \"ccSymbol\") == NULL\n");
		ret = 1;
	}

	/* check NULL can see symbols in local object group */
	if (dlsym(NULL, "ccSymbol") == NULL) {
		printf("dlsym(NULL, \"ccSymbol\") == NULL\n");
		ret = 1;
	}

	/* check RTLD_NEXT skips libbb and can't find bbSymbol */
	if (dlsym(RTLD_NEXT, "bbSymbol") != NULL) {
		printf("dlsym(RTLD_NEXT, \"bbSymbol\") != NULL\n");
		ret = 1;
	}

	/* check dlsym(libbb,..) can *not* see symbols in libaa */
	if (dlsym(libbb, "aaSymbol") != NULL) {
		printf("dlsym(libbb, \"aaSymbol\") != NULL\n");
		ret = 1;
	}

	/* check dlsym(libbb,..) can see symbols in libcc */
	if (dlsym(libbb, "ccSymbol") == NULL) {
		printf("dlsym(libbb, \"ccSymbol\") == NULL\n");
		ret = 1;
	}

	return (ret);
}
@


1.2
log
@return 1 instead of -1 on error. noticed by theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: bb.c,v 1.1.1.1 2005/09/15 22:16:27 kurt Exp $	*/
d39 6
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d39 1
a39 1
		ret = -1;
d45 1
a45 1
		ret = -1;
d51 1
a51 1
		ret = -1;
d57 1
a57 1
		ret = -1;
d63 1
a63 1
		ret = -1;
d69 1
a69 1
		ret = -1;
d75 1
a75 1
		ret = -1;
d81 1
a81 1
		ret = -1;
d87 1
a87 1
		ret = -1;
d93 1
a93 1
		ret = -1;
@


1.1.1.1
log
@add more complex tests for dlsym. some tests may change after more
discussion.
@
text
@@
