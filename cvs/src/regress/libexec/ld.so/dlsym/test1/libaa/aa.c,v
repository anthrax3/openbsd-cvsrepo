head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.50
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.48
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.44
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.34
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.42
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.40
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.38
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.36
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.32
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.30
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.28
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.26
	OPENBSD_5_0:1.3.0.24
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.22
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.20
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.16
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.18
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.14
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.12
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.10
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.8
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.6
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.4
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.2
	OPENBSD_3_9_BASE:1.3
	kurt_20050914:1.1.1.1
	kurt:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2005.09.16.23.30.25;	author kurt;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.15.13.28.31;	author kurt;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.14.15.59.37;	author kurt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.09.14.15.59.37;	author kurt;	state Exp;
branches;
next	;


desc
@@


1.3
log
@return 1 instead of -1 on error. noticed by theo.
@
text
@/*	$OpenBSD: aa.c,v 1.2 2005/09/15 13:28:31 kurt Exp $	*/

/*
 * Copyright (c) 2005 Kurt Miller <kurt@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 */

#include <dlfcn.h>
#include <stdio.h>
#include "aa.h"

int aaSymbol;

void
sigprocmask() {
}

/*
 * aaTest verifies dlsym works as expected with a simple case of duplicate
 * symbols. prog1, libaa and libc all have the sigprocmask symbol and are
 * linked with prog1 with libaa before libc. Depending on how dlsym is called
 * the symbol for sigprocmask should come from prog1, libaa or libc.
 */
int
aaTest()
{
	int ret = 0;
	void *value;
	void *libaa_handle = dlopen("libaa.so", RTLD_LAZY);
	void *libc_handle = dlopen("libc.so", RTLD_LAZY);
	void *libaa_sigprocmask = dlsym(libaa_handle, "sigprocmask");
	void *libc_sigprocmask = dlsym(libc_handle, "sigprocmask");

	dlclose(libaa_handle);
	dlclose(libc_handle);

	/* basic sanity check */
	if (libaa_sigprocmask == &sigprocmask || libc_sigprocmask == &sigprocmask ||
	    libc_sigprocmask == libaa_sigprocmask || libaa_sigprocmask == NULL ||
	    libc_sigprocmask == NULL) {
		printf("dlsym(handle, ...)\n FAILED\n");
		printf("sigprocmask       == %p\n", &sigprocmask);
		printf("libaa_sigprocmask == %p\n", libaa_sigprocmask);
		printf("libc_sigprocmask  == %p\n", libc_sigprocmask);
		return (1);
	}

	value = dlsym(RTLD_DEFAULT, "sigprocmask");
	if (value != &sigprocmask) {
		printf("dlsym(RTLD_DEFAULT, \"sigprocmask\") == %p FAILED\n", value);
		printf("\twas expecting == %p (&sigprocmask)\n", &sigprocmask);
		ret = 1;
	}

	value = dlsym(RTLD_SELF, "sigprocmask");
	if (value != libaa_sigprocmask) {
		printf("dlsym(RTLD_SELF, \"sigprocmask\") == %p FAILED\n", value);
		printf("\twas expecting == %p (libaa_sigprocmask)\n", libaa_sigprocmask);
		printf("FAILED\n");
		ret = 1;
	}

	value = dlsym(RTLD_NEXT, "sigprocmask");
	if (value != libc_sigprocmask) {
		printf("dlsym(RTLD_NEXT, \"sigprocmask\") == %p FAILED\n", value);
		printf("\twas expecting == %p (libc_sigprocmask)\n", libc_sigprocmask);
		ret = 1;
	}

	value = dlsym(NULL, "sigprocmask");
	if (value != libaa_sigprocmask) {
		printf("dlsym(NULL, \"sigprocmask\") == %p FAILED\n", value);
		printf("\twas expecting == %p (libaa_sigprocmask)\n", libaa_sigprocmask);
		ret = 1;
	}

	return (ret);
}
@


1.2
log
@- close dlopen'ed libs for code correctness
- less verbose on success
- add a symbol for prog2 test
- fix comment

some feedback drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: aa.c,v 1.1.1.1 2005/09/14 15:59:37 kurt Exp $	*/
d57 1
a57 1
		return (-1);
d64 1
a64 1
		ret = -1;
d72 1
a72 1
		ret = -1;
d79 1
a79 1
		ret = -1;
d86 1
a86 1
		ret = -1;
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d24 2
d34 1
a34 1
 * the symbol for sigprocmask should come from prog1 libaa or libc.
d41 4
a44 2
	void *libaa_sigprocmask = dlsym(dlopen("libaa.so", RTLD_LAZY), "sigprocmask");
	void *libc_sigprocmask = dlsym(dlopen("libc.so", RTLD_LAZY), "sigprocmask");
d46 2
a47 3
	printf("sigprocmask       == %p\n", &sigprocmask);
	printf("libaa_sigprocmask == %p\n", libaa_sigprocmask);
	printf("libc_sigprocmask  == %p\n", libc_sigprocmask);
d54 3
@


1.1.1.1
log
@Add a regress test for dlsym special handles. Checks that duplicate symbols
are handled right for a simple case.
@
text
@@
