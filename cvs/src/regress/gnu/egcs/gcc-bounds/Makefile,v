head	1.16;
access;
symbols
	OPENBSD_6_1:1.16.0.4
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.14.0.12
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.2
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.14.0.10
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.8
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.6
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.4
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.12.0.14
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.12
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.10
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.8
	OPENBSD_5_0:1.12.0.6
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.4
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.2
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.10.0.14
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.16
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.12
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.10
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.8
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.6
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.4
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.2
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.9.0.8
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.6
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.4
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.2
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.4.0.2
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3;
locks; strict;
comment	@# @;


1.16
date	2016.09.25.21.35.12;	author bluhm;	state Exp;
branches;
next	1.15;
commitid	Ng7pnKonlZp9gAE2;

1.15
date	2016.09.24.01.01.38;	author bluhm;	state Exp;
branches;
next	1.14;
commitid	EiLgJldGKML0VKMv;

1.14
date	2013.12.28.03.19.02;	author martynas;	state Exp;
branches;
next	1.13;

1.13
date	2013.08.06.19.11.53;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2010.05.14.09.59.53;	author avsm;	state Exp;
branches;
next	1.11;

1.11
date	2010.05.10.18.20.31;	author drahn;	state Exp;
branches;
next	1.10;

1.10
date	2006.07.11.11.59.53;	author avsm;	state Exp;
branches;
next	1.9;

1.9
date	2004.08.08.13.11.10;	author avsm;	state Exp;
branches;
next	1.8;

1.8
date	2004.07.09.22.24.41;	author avsm;	state Exp;
branches;
next	1.7;

1.7
date	2004.04.27.18.02.07;	author avsm;	state Exp;
branches;
next	1.6;

1.6
date	2004.04.23.21.50.08;	author avsm;	state Exp;
branches;
next	1.5;

1.5
date	2004.04.23.21.36.14;	author avsm;	state Exp;
branches;
next	1.4;

1.4
date	2003.10.07.22.24.26;	author avsm;	state Exp;
branches;
next	1.3;

1.3
date	2003.09.05.20.50.29;	author avsm;	state Exp;
branches;
next	1.2;

1.2
date	2003.08.06.13.54.30;	author avsm;	state Exp;
branches;
next	1.1;

1.1
date	2003.06.26.18.37.28;	author avsm;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Adapt more places where binutils-2.17 has changed the format of the
linker warning massages.
@
text
@# $OpenBSD: Makefile,v 1.15 2016/09/24 01:01:38 bluhm Exp $

C_MODULES?=	strlcpy strlcat getcwd memcpy fread memcpy declare \
		sscanf vararray md builtins
CPP_MODULES?=	snprintf sscanf

C_STRLCPY=	1 2 3 4 5 6
C_STRLCAT=	1 2 3 4 5 6
C_GETCWD=	1 2 3 4
C_MEMCPY=	1 2 3 4 5 6 8
C_FREAD=	1 2 3 4
C_DECLARE=	1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
C_SSCANF=	1 2 3 4 5 6
C_VARARRAY=	1 2 3
C_MD=		1 2 3 4 5 6
C_BUILTINS=	1

CPP_SNPRINTF=	1 2 3 4 5
CPP_SSCANF=	1

TCC=		gcc
TCFLAGS=	-Wbounded -Wformat -pedantic
TCXX=		g++
TCXXFLAGS=	${TCFLAGS}
REGRESS_TARGETS= ${C_TARGETS} ${CPP_TARGETS}

.for i in ${C_MODULES}
.  for j in ${C_${i:U}}
C_TARGETS+= c-${i}-${j} 
c-${i}-${j}:
	${TCC} ${TCFLAGS} -o /dev/null ${i}-${j}.c 2>&1 | sed '/^\/tmp\//d;s/(\.text+0x[0-9a-f]*)//' | diff -u - ${.CURDIR}/${i}-${j}.c${EXP}
.  endfor
.endfor

.for i in ${CPP_MODULES}
.  for j in ${CPP_${i:U}}
CPP_TARGETS+= cpp-${i}-${j}
cpp-${i}-${j}:
	${TCXX} ${TCXXFLAGS} -o /dev/null ${i}-${j}.cpp 2>&1 | grep -v 'misused' | sed '/^\/tmp\//d;s/(\.text+0x[0-9a-f]*)//' | diff -u - ${.CURDIR}/${i}-${j}.cpp${EXP}
.  endfor
.endfor

generate:
.for i in ${C_TARGETS}
	-${TCC} ${TCFLAGS} -o /dev/null ${i:C/^c-//g}.c 2>&1 | sed '/^\/tmp\//d;s/(\.text+0x[0-9a-f]*)//' >${i:C/^c-//g}.c${EXP}
.endfor
.for i in ${CPP_TARGETS}
	-${TCXX} ${TCXXFLAGS} -o /dev/null ${i:C/^cpp-//g}.cpp 2>&1 | sed '/^\/tmp\//d;s/(\.text+0x[0-9a-f]*)//' >${i:C/^cpp-//g}.cpp${EXP}
.endfor

.PHONY:	${REGRESS_TARGETS} generate regress

NOOBJ= Yes

.include <bsd.regress.mk>
.if ${COMPILER_VERSION:L} == "gcc3" 
EXP=		.exp.gcc3
.else
EXP=		.exp.gcc4
.endif
@


1.15
log
@Format of warning messages has changed in binutils-2.17.  Remove
variable line number in text segment.  Adapt expected gcc linker
output in regress test.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.14 2013/12/28 03:19:02 martynas Exp $
d39 1
a39 1
	${TCXX} ${TCXXFLAGS} -o /dev/null ${i}-${j}.cpp 2>&1 | grep -v 'misused' | sed '/^\/tmp\//d' | diff -u - ${.CURDIR}/${i}-${j}.cpp${EXP}
d45 1
a45 1
	-${TCC} ${TCFLAGS} -o /dev/null ${i:C/^c-//g}.c 2>&1 | sed '/^\/tmp\//d' >${i:C/^c-//g}.c${EXP}
d48 1
a48 1
	-${TCXX} ${TCXXFLAGS} -o /dev/null ${i:C/^cpp-//g}.cpp 2>&1 | sed '/^\/tmp\//d' >${i:C/^cpp-//g}.cpp${EXP}
@


1.14
log
@- adjust getcwd-1.c.exp.gcc{3,4} after the getwd linker warning got added
- adjust gcc-builtins to use the same approach as gcc-bounds
- enable gcc-bounds and gcc-builtins in the default regression suite
now that everything passes
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.13 2013/08/06 19:11:53 miod Exp $
d31 1
a31 1
	${TCC} ${TCFLAGS} -o /dev/null ${i}-${j}.c 2>&1 | sed '/^\/tmp\//d' | diff -u - ${.CURDIR}/${i}-${j}.c${EXP}
@


1.13
log
@Remove support for COMPILER_VERSION == gcc2.
Change the logic depending upon COMPILER_VERSION everywhere, to assume gcc4
is the norm and to explicitely test for gcc3 when a different behaviour
is required.
No functional change intended. Be sure to `make install' in share/mk before
attempting to do anything.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.12 2010/05/14 09:59:53 avsm Exp $
d31 1
a31 1
	${TCC} ${TCFLAGS} -o /dev/null ${i}-${j}.c 2>&1 | diff -u - ${.CURDIR}/${i}-${j}.c${EXP}
d39 1
a39 1
	${TCXX} ${TCXXFLAGS} -o /dev/null ${i}-${j}.cpp 2>&1 | grep -v 'misused' | diff -u - ${.CURDIR}/${i}-${j}.cpp${EXP}
d45 1
a45 1
	-${TCC} ${TCFLAGS} -o /dev/null ${i:C/^c-//g}.c >${i:C/^c-//g}.c${EXP} 2>&1
d48 1
a48 1
	-${TCXX} ${TCXXFLAGS} -o /dev/null ${i:C/^cpp-//g}.cpp >${i:C/^cpp-//g}.cpp${EXP} 2>&1
@


1.12
log
@add failing regress test for gcc3 -Wbounded for 0-length arrays, spotted by nicm@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.11 2010/05/10 18:20:31 drahn Exp $
d58 1
a58 1
.elif ${COMPILER_VERSION:L} == "gcc4" 
a59 2
.else
EXP=		.exp
@


1.11
log
@Switch to using COMPILER_VERSION instead of USE_GCC3, allows for more flexible
complier picking, eg supporting gcc2, gcc3, and gcc4. based on diff by Marco,
with fixes from espie@@.
ok espie@@ general mumbling of approval of others.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.10 2006/07/11 11:59:53 avsm Exp $
d10 1
a10 1
C_MEMCPY=	1 2 3 4 5 6
@


1.10
log
@add another regress for the recent -Wbounded fixes
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.9 2004/08/08 13:11:10 avsm Exp $
d56 1
a56 1
.if ${USE_GCC3:L:Myes}
d58 2
@


1.9
log
@check for variable sized array in format arguments
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.8 2004/07/09 22:24:41 avsm Exp $
d13 1
a13 1
C_SSCANF=	1 2 3 4 5
@


1.8
log
@NOOBJ=1, needed since gcc-bounds was connected to regress, noticed by david@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.7 2004/04/27 18:02:07 avsm Exp $
d14 1
a14 1
C_VARARRAY=	1 2
@


1.7
log
@regress check for macro presence/failure in bounded attrib declaration
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.6 2004/04/23 21:50:08 avsm Exp $
d52 2
@


1.6
log
@fill in the blanks for gcc2
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.5 2004/04/23 21:36:14 avsm Exp $
d12 1
a12 1
C_DECLARE=	1 2 3 4 5 6 7 8 9 10 11 12 13
@


1.5
log
@Lots more regression tests to test builtins for gcc3 and various icky
corner cases.  need to separate gcc2/gcc3 output expectations since
the error formats have diverged.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.4 2003/10/07 22:24:26 avsm Exp $
d54 1
a54 1
.if defined(USE_GCC3)
@


1.4
log
@add a few regression tests for the recently fixed md functions
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.3 2003/09/05 20:50:29 avsm Exp $
d4 1
a4 1
		sscanf vararray md
d13 1
a13 1
C_SSCANF=	1 2
d16 1
d31 1
a31 1
	${TCC} ${TCFLAGS} -o /dev/null ${i}-${j}.c 2>&1 | diff -u - ${.CURDIR}/${i}-${j}.c.exp
d39 1
a39 1
	${TCXX} ${TCXXFLAGS} -o /dev/null ${i}-${j}.cpp 2>&1 | grep -v 'misused' | diff -u - ${.CURDIR}/${i}-${j}.cpp.exp
d45 1
a45 1
	-${TCC} ${TCFLAGS} -o /dev/null ${i:C/^c-//g}.c >${i:C/^c-//g}.c.exp 2>&1
d48 1
a48 1
	-${TCXX} ${TCXXFLAGS} -o /dev/null ${i:C/^cpp-//g}.cpp >${i:C/^cpp-//g}.cpp.exp 2>&1
d54 5
@


1.3
log
@no longer warn on '0' bound size, add new test for the negative case
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.2 2003/08/06 13:54:30 avsm Exp $
d3 2
a4 1
C_MODULES?=	strlcpy strlcat getcwd memcpy fread memcpy declare sscanf vararray
d15 1
@


1.2
log
@- fix makefile targets so c++ targets do get checked correctly
- update sscanf-cpp regress results to current error format
- add checks for variable length arrays to make sure they are ignored
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.1 2003/06/26 18:37:28 avsm Exp $
d7 1
a7 1
C_STRLCAT=	1 2 3 4 5
@


1.1
log
@various regression tests for -Wbounded
@
text
@d1 1
a1 1
# $OpenBSD$
d3 1
a3 1
C_MODULES?=	strlcpy strlcat getcwd memcpy fread memcpy declare sscanf
d13 1
d26 2
a27 2
C_TARGETS+= ${i}-${j} 
${i}-${j}:
d34 2
a35 2
CPP_TARGETS+= ${i}-${j}
${i}-${j}:
a36 1

d42 1
a42 1
	-${TCC} ${TCFLAGS} -o /dev/null ${i}.c >${i}.c.exp 2>&1
d45 1
a45 1
	-${TCXX} ${TCXXFLAGS} -o /dev/null ${i}.cpp >${i}.cpp.exp 2>&1
@

