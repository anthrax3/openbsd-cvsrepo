head	1.7;
access;
symbols
	OPENBSD_6_2_BASE:1.7;
locks; strict;
comment	@# @;


1.7
date	2017.08.22.20.14.57;	author anton;	state Exp;
branches;
next	1.6;
commitid	VuHaVgjwvlebBt9w;

1.6
date	2017.07.22.13.50.54;	author anton;	state Exp;
branches;
next	1.5;
commitid	6r4QszwV0bHrjk08;

1.5
date	2017.07.19.20.09.35;	author anton;	state Exp;
branches;
next	1.4;
commitid	9MGMBJiyBYpL0tDy;

1.4
date	2017.07.05.19.27.26;	author anton;	state Exp;
branches;
next	1.3;
commitid	psa7ha1wQQGA2NPN;

1.3
date	2017.07.05.06.31.59;	author anton;	state Exp;
branches;
next	1.2;
commitid	l3TaM7dOrpz93VaH;

1.2
date	2017.06.17.09.55.01;	author anton;	state Exp;
branches;
next	1.1;
commitid	8vDoOJmn24XQ0XDS;

1.1
date	2017.06.05.14.10.11;	author anton;	state Exp;
branches;
next	;
commitid	gyBA1jDSy3L9LYuX;


desc
@@


1.7
log
@Make the edit regress tests respect the KSH variable just like the main regress
tests. Makes it easier to run all tests using another binary:

  $ pwd
  /usr/src/regress/bin/ksh
  $ make KSH=/usr/src/bin/ksh/obj/ksh
@
text
@# $OpenBSD: subr.sh,v 1.6 2017/07/22 13:50:54 anton Exp $
#
# Copyright (c) 2016 Ingo Schwarze <schwarze@@openbsd.org>
# Copyright (c) 2017 Anton Lindqvist <anton@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

testseq() {
	stdin=$1
	exp=$(echo "$2")
	act=$(echo -n "$stdin" | ./edit -p "$PS1" ${KSH:-/bin/ksh} -r)
	[ $? = 0 ] && [ "$exp" = "$act" ] && return 0

	echo input:
	echo ">>>$stdin<<<"
	echo -n "$stdin" | hexdump -Cv
	echo expected:
	echo ">>>$exp<<<"
	echo -n "$exp" | hexdump -Cv
	echo actual:
	echo ">>>$act<<<"
	echo -n "$act" | hexdump -Cv

	exit 1
}
@


1.6
log
@Add missing RCS IDs and zap redundant SRCS from Makefile.
@
text
@d1 1
a1 1
# $OpenBSD$
d21 1
a21 1
	act=$(echo -n "$stdin" | ./edit -p "$PS1" ksh -r)
@


1.5
log
@The first version of the edit program used to test csh, ksh and mail was based
on the following reasoning: once the program to test has written some data it
has entered the main-loop and is by now ready to receive user input. At this
point it should be safe to start writing input and once the program once again
enters a blocking reading state, its done processing the input. This approach
was sensitive to timing and determining when a shell is done processing its
input (if ever) is tricky.

This iteration of the edit program takes a new approach and uses presence of a
prompt for synchronisation of I/O. It doesn't solve all problems but is a step
in the right direction.

Joint work with bluhm@@
@
text
@d1 2
@


1.4
log
@Revert previously added tests for file completion that are currently failing.

Prodded by bluhm@@
@
text
@d19 2
a20 2
	act=$(echo -n "$stdin" | ./edit ksh -r)
	[ "$exp" = "$act" ] && return 0
d32 1
a32 1
	return 1
@


1.3
log
@Add tests for file completion in ksh emacs mode, currently failing.

While here, pass the v option to hexdump in order to output all data.
@
text
@a15 8
genseq() {
	n=$1
	while [ $# -ge 1 ]; do
		shift
		jot -n -b "$1" -s '' "$n"
	done
}

@


1.2
log
@Pass the command to execute as an argument. Allows the edit program to be
reused.
@
text
@d16 8
d32 1
a32 1
	echo -n "$stdin" | hexdump -C
d35 1
a35 1
	echo -n "$exp" | hexdump -C
d38 1
a38 1
	echo -n "$act" | hexdump -C
@


1.1
log
@Add new edit regress files.

Absent from my previous commit.
@
text
@d19 1
a19 1
	act=$(echo -n "$stdin" | ./edit)
@

