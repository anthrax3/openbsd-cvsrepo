head	1.6;
access;
symbols
	OPENBSD_6_2_BASE:1.6;
locks; strict;
comment	@ * @;


1.6
date	2017.07.22.13.50.54;	author anton;	state Exp;
branches;
next	1.5;
commitid	6r4QszwV0bHrjk08;

1.5
date	2017.07.19.20.09.35;	author anton;	state Exp;
branches;
next	1.4;
commitid	9MGMBJiyBYpL0tDy;

1.4
date	2017.06.25.08.31.44;	author anton;	state Exp;
branches;
next	1.3;
commitid	XETaJgoI3EcJk7zR;

1.3
date	2017.06.18.17.49.44;	author anton;	state Exp;
branches;
next	1.2;
commitid	atPhXtx79h6fbKYH;

1.2
date	2017.06.17.09.55.01;	author anton;	state Exp;
branches;
next	1.1;
commitid	8vDoOJmn24XQ0XDS;

1.1
date	2017.06.05.14.10.11;	author anton;	state Exp;
branches;
next	;
commitid	gyBA1jDSy3L9LYuX;


desc
@@


1.6
log
@Add missing RCS IDs and zap redundant SRCS from Makefile.
@
text
@/* $OpenBSD$ */
/*
 * Copyright (c) 2017 Anton Lindqvist <anton@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <err.h>
#include <errno.h>
#include <poll.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <termios.h>
#include <unistd.h>
#include <util.h>

#define	WRTIM	50	/* input write timeout */
#define	PRTIM	5000	/* prompt read timeout */

static size_t		findprompt(const char *, const char *);
static void		sighandler(int);
static void __dead	usage(void);

static volatile sig_atomic_t	gotsig;

int
main(int argc, char *argv[])
{
	const char	*linefeed = "\003\004\n\r";
	const char	*prompt = "";
	char		 in[BUFSIZ], out[BUFSIZ];
	struct pollfd	 pfd;
	struct winsize	 ws;
	pid_t		 pid;
	ssize_t		 n;
	size_t		 nin, nprompt, nread, nwrite;
	int		 c, nready, ptyfd, readprompt, ret, timeout;

	while ((c = getopt(argc, argv, "p:")) != -1) {
		switch (c) {
		case 'p':
			prompt = optarg;
			break;
		default:
			usage();
		}
	}
	argc -= optind;
	argv += optind;
	if (argc == 0 || strlen(prompt) == 0)
		usage();

	nin = 0;
	for (;;) {
		if (nin == sizeof(in))
			errx(1, "input buffer too small");

		n = read(0, in + nin, sizeof(in) - nin);
		if (n == -1)
			err(1, "read");
		if (n == 0)
			break;

		nin += n;
	}

	if (signal(SIGCHLD, sighandler) == SIG_ERR)
		err(1, "signal: SIGCHLD");
	if (signal(SIGINT, sighandler) == SIG_ERR)
		err(1, "signal: SIGINT");

	memset(&ws, 0, sizeof(ws));
	ws.ws_col = 80,
	ws.ws_row = 24;

	pid = forkpty(&ptyfd, NULL, NULL, &ws);
	if (pid == -1)
		err(1, "forkpty");
	if (pid == 0) {
		execvp(*argv, argv);
		err(1, "%s", *argv);
	}

	nprompt = nread = nwrite = ret = 0;
	readprompt = 1;
	while (!gotsig) {
		pfd.fd = ptyfd;
		if (!readprompt && nwrite < nin)
			pfd.events = POLLOUT;
		else
			pfd.events = POLLIN;
		timeout = readprompt ? PRTIM : WRTIM;
		nready = poll(&pfd, 1, timeout);
		if (nready == -1) {
			if (errno == EINTR)
				continue;
			err(1, "poll");
		}
		if (nready == 0) {
			if (timeout == PRTIM)
				ret = 1;
			break;
		}
		if (pfd.revents & (POLLERR | POLLNVAL))
			errc(1, EBADF, NULL);

		if (pfd.revents & (POLLIN | POLLHUP)) {
			if (nread == sizeof(out))
				errx(1, "output buffer too small");

			n = read(ptyfd, out + nread, sizeof(out) - 1 - nread);
			if (n == -1)
				err(1, "read");
			nread += n;
			out[nread] = '\0';

			if (readprompt &&
			    (n = findprompt(out + nprompt, prompt)) > 0) {
				nprompt += n;
				readprompt = 0;
			}
		} else if (pfd.revents & POLLOUT) {
			if (strchr(linefeed, in[nwrite]) != NULL)
				readprompt = 1;

			n = write(ptyfd, in + nwrite, 1);
			if (n == -1)
				err(1, "write");
			nwrite += n;
		}
	}
	close(ptyfd);

	printf("%.*s", (int)nread, out);

	return ret;
}

static size_t
findprompt(const char *str, const char *prompt)
{
	char	*cp;
	size_t	 len;

	if ((cp = strstr(str, prompt)) == NULL)
		return 0;
	len = strlen(prompt);

	return (cp - str) + len;
}

static void
sighandler(int sig)
{
	gotsig = sig;
}

static void __dead
usage(void)
{
	fprintf(stderr, "usage: edit -p prompt command [args]\n");
	exit(1);
}
@


1.5
log
@The first version of the edit program used to test csh, ksh and mail was based
on the following reasoning: once the program to test has written some data it
has entered the main-loop and is by now ready to receive user input. At this
point it should be safe to start writing input and once the program once again
enters a blocking reading state, its done processing the input. This approach
was sensitive to timing and determining when a shell is done processing its
input (if ever) is tricky.

This iteration of the edit program takes a new approach and uses presence of a
prompt for synchronisation of I/O. It doesn't solve all problems but is a step
in the right direction.

Joint work with bluhm@@
@
text
@d1 1
@


1.4
log
@Capture SIGINT and print out all received output so far. Useful when debugging
broken tests.
@
text
@d28 4
d40 22
a61 10
	char		in[BUFSIZ], out[BUFSIZ];
	struct termios	tio;
	struct pollfd	pfd;
	struct winsize	ws;
	pid_t		pid;
	ssize_t		n;
	size_t		nin, nread, nwrite;
	int		nready, ptyfd;

	if (argc < 2)
d69 1
a69 1
		n = read(0, &in[nin], sizeof(in) - nin);
d91 2
a92 2
		execvp(argv[1], &argv[1]);
		err(1, "%s", argv[1]);
d95 2
a96 3
	nread = nwrite = 0;
	pfd.fd = ptyfd;
	pfd.events = (POLLIN | POLLOUT);
d98 7
a104 1
		nready = poll(&pfd, 1, 10);
d110 5
a114 2
		if (nready == 0)
			break;	/* timeout */
d122 1
a122 1
			n = read(ptyfd, &out[nread], sizeof(out) - nread);
d126 7
d134 2
a135 7
			if (nread == 0)
				continue;

			if (tcgetattr(ptyfd, &tio) == -1)
				err(1, "tcgetattr");
			if ((tio.c_lflag & ICANON) == ICANON)
				continue;
d137 1
a137 1
			n = write(ptyfd, &in[nwrite], 1);
a140 2
			if (nwrite == nin)
				pfd.events &= ~(POLLOUT);
d145 14
a158 1
	printf("%.*s\n", (int)nread, out);
d160 1
a160 1
	return 0;
d172 1
a172 1
	fprintf(stderr, "usage: edit command [args]\n");
@


1.3
log
@Don't write input if ICANON is enabled. Also, write one byte at a time.
@
text
@d28 1
a28 1
static void		sigchld(int);
d31 1
a31 1
static volatile sig_atomic_t	gotsigchld;
d62 4
a65 2
	if (signal(SIGCHLD, sigchld) == SIG_ERR)
		err(1, "signal");
d82 1
a82 1
	while (!gotsigchld) {
d127 1
a127 1
sigchld(int sig)
d129 1
a129 1
	gotsigchld = sig == SIGCHLD;
@


1.2
log
@Pass the command to execute as an argument. Allows the edit program to be
reused.
@
text
@d37 1
d104 6
a109 1
			n = write(ptyfd, &in[nwrite], nin - nwrite);
@


1.1
log
@Add new edit regress files.

Absent from my previous commit.
@
text
@d22 1
d28 2
a29 1
static void	sigchld(int);
d34 1
a34 1
main(void)
d44 3
d72 2
a73 3
		/* Run restricted shell ignoring ~/.profile. */
		execlp("ksh", "ksh", "-r", NULL);
		err(1, "ksh");
d122 7
@

