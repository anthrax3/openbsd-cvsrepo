head	1.1;
access;
symbols
	OPENBSD_6_0:1.1.0.46
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.36
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.44
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.42
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.40
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.38
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.34
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.32
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.30
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.28
	OPENBSD_5_0:1.1.0.26
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.24
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.22
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.18
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.20
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.16
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.14
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.12
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.10
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.8
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.6
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.4
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.2
	OPENBSD_3_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.1
date	2005.04.08.17.12.50;	author cloder;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Moved these tests here from sbin/isakmpd/regress.  They mostly work
but are not enabled by default yet.
@
text
@/*	$OpenBSD: rsakeygen.c,v 1.19 2004/02/26 15:27:05 hshoexer Exp $	*/
/*	$EOM: rsakeygen.c,v 1.10 2000/12/21 15:18:53 ho Exp $	*/

/*
 * Copyright (c) 1998, 1999 Niels Provos.  All rights reserved.
 * Copyright (c) 1999, 2001 Niklas Hallqvist.  All rights reserved.
 * Copyright (c) 2001 Håkan Olsson.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This code was written under funding by Ericsson Radio Systems.
 */

#include <sys/param.h>
#include <ctype.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include "libcrypto.h"
#include "log.h"
#include "math_mp.h"

#define nibble2bin(y) (tolower (y) < 'a' ? (y) - '0' : tolower (y) - 'a' + 10)
#define hexchar2bin(x) ((nibble2bin ((x)[0]) << 4) + nibble2bin ((x)[1]))
#define nibble2c(x) ((x) >= 10 ? ('a' - 10 + (x)) : ('0' + (x)))

#define TEST_STRING "!Dies ist ein Test"

int
main (void)
{
  u_int8_t enc[256], dec[256], *asn, *foo;
  int len;
  FILE *fd;
  int erg = 0;
  RSA *key;

  libcrypto_init ();

  log_debug_cmd (LOG_CRYPTO, 99);
  memset (dec, '\0', sizeof dec);
  strlcpy (dec, TEST_STRING, 256);

  key = RSA_generate_key (1024, RSA_F4, NULL, NULL);
  if (key == NULL)
    {
      printf("Failed to generate key\n");
      return 1;
    }

  printf ("n: 0x");
  BN_print_fp (stdout, key->n);
  printf ("\ne: 0x");
  BN_print_fp (stdout, key->e);
  printf ("\n");

  printf ("n: 0x");
  BN_print_fp (stdout, key->n);
  printf ("\ne: 0x");
  BN_print_fp (stdout, key->e);
  printf ("\nd: 0x");
  BN_print_fp (stdout, key->d);
  printf ("\np: 0x");
  BN_print_fp (stdout, key->p);
  printf ("\nq: 0x");
  BN_print_fp (stdout, key->q);
  printf ("\n");

  printf ("Testing Signing/Verifying: ");
  /* Sign with Private Key */
  len = RSA_private_encrypt (strlen (dec) + 1, dec, enc, key,
			     RSA_PKCS1_PADDING);
  if (len == -1)
    printf ("SIGN FAILED ");
  else
    {
      /* Decrypt/Verify with Public Key */
      erg = RSA_public_decrypt (len, enc, dec, key, RSA_PKCS1_PADDING);

      if (erg == -1 || strcmp (dec, TEST_STRING))
	printf ("VERIFY FAILED");
      else
	printf ("OKAY");
    }

  printf ("\n");

  len = i2d_RSAPublicKey (key, NULL);
  foo = asn = malloc (len);
  len = i2d_RSAPublicKey (key, &foo);
  fd = fopen ("isakmpd_key.pub", "w");
  fwrite (asn, len, 1, fd);
  fclose (fd);
  free (asn);

  len = i2d_RSAPrivateKey (key, NULL);
  foo = asn = malloc (len);
  len = i2d_RSAPrivateKey (key, &foo);
  fd = fopen ("isakmpd_key", "w");
  fwrite (asn, len, 1, fd);
  fclose (fd);
  free (asn);

  RSA_free (key);

  return 0;
}
@
