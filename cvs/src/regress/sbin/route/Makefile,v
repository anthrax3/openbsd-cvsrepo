head	1.21;
access;
symbols
	OPENBSD_6_1:1.14.0.4
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.10.0.4
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.6.0.6
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.4
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.2.0.40
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.36
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.34
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.32
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.30
	OPENBSD_5_0:1.2.0.28
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.26
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.24
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.20
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.22
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.18
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.16
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.14
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.12
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.10
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.8
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.6
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.4
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.2
	OPENBSD_3_7_BASE:1.2;
locks; strict;
comment	@# @;


1.21
date	2017.09.05.11.03.08;	author mpi;	state Exp;
branches;
next	1.20;
commitid	39bFJwcASNNctdKd;

1.20
date	2017.09.05.10.53.02;	author mpi;	state Exp;
branches;
next	1.19;
commitid	ZhOjkaYy5aNOMehx;

1.19
date	2017.08.10.13.08.39;	author mpi;	state Exp;
branches;
next	1.18;
commitid	IY4l2PTmm5EjyfU3;

1.18
date	2017.08.10.13.06.12;	author mpi;	state Exp;
branches;
next	1.17;
commitid	OHiySXmCkfSToEb1;

1.17
date	2017.07.27.12.44.07;	author mpi;	state Exp;
branches;
next	1.16;
commitid	1aFbKKj8WwqfBVJq;

1.16
date	2017.07.07.23.55.21;	author bluhm;	state Exp;
branches;
next	1.15;
commitid	HPFM3FepOktcWNt0;

1.15
date	2017.05.30.11.57.59;	author bluhm;	state Exp;
branches;
next	1.14;
commitid	pqMddMV0opASz5VS;

1.14
date	2016.09.01.09.57.45;	author mpi;	state Exp;
branches;
next	1.13;
commitid	RBSKFaRrD0riUooD;

1.13
date	2016.08.31.11.00.15;	author claudio;	state Exp;
branches;
next	1.12;
commitid	IDpLloSAN0PvBB2y;

1.12
date	2016.08.31.10.33.15;	author claudio;	state Exp;
branches;
next	1.11;
commitid	qmiRyAioxODAAlM8;

1.11
date	2016.08.22.17.43.29;	author mpi;	state Exp;
branches;
next	1.10;
commitid	Z3k9SZE6cRD97RiP;

1.10
date	2015.12.02.11.05.35;	author mpi;	state Exp;
branches;
next	1.9;
commitid	2w2ip0379TxwBl48;

1.9
date	2015.11.30.09.46.08;	author mpi;	state Exp;
branches;
next	1.8;
commitid	bbPnPTK2czyIeWsz;

1.8
date	2015.10.27.12.48.14;	author mpi;	state Exp;
branches;
next	1.7;
commitid	kqIfpaVsejtz0gRW;

1.7
date	2015.08.31.08.34.46;	author mpi;	state Exp;
branches;
next	1.6;
commitid	bDuBRYQpFQ7YID6z;

1.6
date	2015.03.02.21.43.28;	author claudio;	state Exp;
branches;
next	1.5;
commitid	wcKH2m3SLnKKlzth;

1.5
date	2014.11.26.11.55.08;	author mpi;	state Exp;
branches;
next	1.4;
commitid	xB0RjjmJRYn2KAJc;

1.4
date	2014.05.31.14.15.53;	author claudio;	state Exp;
branches;
next	1.3;

1.3
date	2014.04.18.16.38.28;	author claudio;	state Exp;
branches;
next	1.2;

1.2
date	2004.12.29.04.39.17;	author david;	state Exp;
branches;
next	1.1;

1.1
date	2004.09.24.12.54.13;	author markus;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Document new test.
@
text
@# $OpenBSD: Makefile,v 1.20 2017/09/05 10:53:02 mpi Exp $

RDOMAIN?=	5

.MAIN: all

.ifmake !obj && !clean && !cleandir && !regress
.if (${.TARGET} != all && ! make(all)) || (${.TARGET} == all)

.SILENT: .BEGIN .END

.BEGIN:
	-${SUDO} ifconfig lo10001 up rdomain ${RDOMAIN} 192.0.2.1/32
	-${SUDO} ifconfig lo10002 up rdomain ${RDOMAIN} 192.0.2.2/32
	-${SUDO} ifconfig lo10003 up rdomain ${RDOMAIN} 192.0.2.3/32
	-${SUDO} ifconfig lo10004 up rdomain ${RDOMAIN} 192.0.2.4/32

.END:
	-${SUDO} ifconfig lo10001 destroy
	-${SUDO} ifconfig lo10002 destroy
	-${SUDO} ifconfig lo10003 destroy
	-${SUDO} ifconfig lo10004 destroy

.endif
.endif

RCMD=		${SUDO} route -T ${RDOMAIN} -n

netmask:
.for mod in -net -dst
.for cmd in add delete
	${RCMD} -t ${cmd} ${mod} 192.0.3/24 192.0.2.1
	${RCMD} -t ${cmd} ${mod} 192.0.4.0 -netmask 255.255.255.0 192.0.2.1
.endfor
.endfor

# check that more specific routes work properly (rn_dupedkey behaviour)
n=	1
RTTEST_TARGETS+:=rttest${n}
rttest${n}:
	${RCMD} add 10/8 192.0.2.1
	${RCMD} add 10.0/16 192.0.2.4
	${RCMD} add 10.0/10 192.0.2.4
	${RCMD} add 10.8/16 192.0.2.3
	${RCMD} add 10.8.0/24 192.0.2.1
	${RCMD} add 10.8.1/24 192.0.2.2
	${RCMD} add 10.8.3/24 192.0.2.3
	${RCMD} add 10.8.4/24 192.0.2.4
	${RCMD} show -inet 2>&1 | \
		diff -u ${.CURDIR}/${.TARGET}.ok /dev/stdin

# can we add multiple pathes
n=	2
RTTEST_TARGETS+:=rttest${n}
rttest${n}:
	${RCMD} add -mpath 10.8.1/24 192.0.2.3
	${RCMD} add -mpath 10.8.1/24 192.0.2.4
	${RCMD} show -inet 2>&1 | \
		diff -u ${.CURDIR}/${.TARGET}.ok /dev/stdin

# but we can not readd the same multipath route twice
n=	3
RTTEST_TARGETS+:=rttest${n}
rttest${n}:
	${RCMD} add -mpath 10.8.1/24 192.0.2.3
	${RCMD} add -mpath 10.8.1/24 192.0.2.3 && exit 1 || exit 0
	${RCMD} show -inet 2>&1 | \
		diff -u ${.CURDIR}/${.TARGET}.ok /dev/stdin


# do priorities work
n=	4
RTTEST_TARGETS+:=rttest${n}
rttest${n}:
	${RCMD} add -priority 16 10.8.1/24 192.0.2.1
	${RCMD} add -priority 17 10.8.1/24 192.0.2.2
	${RCMD} add -priority 18 10.8.1/24 192.0.2.3
	${RCMD} show -inet 2>&1 | \
		diff -u ${.CURDIR}/${.TARGET}.ok /dev/stdin

# priority and multipath
n=	5
RTTEST_TARGETS+:=rttest${n}
rttest${n}:
	${RCMD} add -mpath -priority 16 10.8.1/24 192.0.2.2
	${RCMD} add -mpath -priority 17 10.8.1/24 192.0.2.2
	${RCMD} add -mpath -priority 18 10.8.1/24 192.0.2.2
	! ${RCMD} add -mpath -priority 17 10.8.1/24 192.0.2.2
	${RCMD} show -inet 2>&1 | \
		diff -u ${.CURDIR}/${.TARGET}.ok /dev/stdin

# priority but failing multipath because of same gateway
n=	6
RTTEST_TARGETS+:=rttest${n}
rttest${n}:
	${RCMD} add -priority 16 10.8.1/24 192.0.2.1
	${RCMD} add -priority 17 10.8.1/24 192.0.2.2
	${RCMD} add -priority 18 10.8.1/24 192.0.2.3
	! ${RCMD} add -priority 17 10.8.1/24 192.0.2.2
	${RCMD} show -inet 2>&1 | \
		diff -u ${.CURDIR}/${.TARGET}.ok /dev/stdin

# deletion of priority route in the middle
n=	7
RTTEST_TARGETS+:=rttest${n}
rttest${n}:
	${RCMD} add -priority 16 10.8.1/24 192.0.2.1
	${RCMD} add -priority 17 10.8.1/24 192.0.2.2
	${RCMD} add -priority 18 10.8.1/24 192.0.2.3
	${RCMD} delete -priority 17 10.8.1/24
	${RCMD} show -inet 2>&1 | \
		diff -u ${.CURDIR}/${.TARGET}.ok /dev/stdin

# readd of same route fail even if interface is down
n=	8
RTTEST_TARGETS+:=rttest${n}
rttest${n}:
	${RCMD} add -priority 16 10.8.1/24 192.0.2.1
	${RCMD} add -priority 17 10.8.1/24 192.0.2.2
	${RCMD} add -priority 18 10.8.1/24 192.0.2.3
	${SUDO} ifconfig lo10002 down
	! ${RCMD} add -priority 17 10.8.1/24 192.0.2.2
	@@# Work around a race that mess up the route reference counts
	@@sleep .1
	${RCMD} show -inet 2>&1 | \
		diff -u ${.CURDIR}/${.TARGET}.ok /dev/stdin

# deletion of priority route in the middle after reprio because of iface down
n=	9
RTTEST_TARGETS+:=rttest${n}
rttest${n}:
	${RCMD} add -priority 16 10.8.1/24 192.0.2.1
	${RCMD} add -priority 17 10.8.1/24 192.0.2.2
	${RCMD} add -priority 18 10.8.1/24 192.0.2.3
	${SUDO} ifconfig lo10002 down
	${RCMD} delete -priority 17 10.8.1/24
	${RCMD} show -inet 2>&1 | \
		diff -u ${.CURDIR}/${.TARGET}.ok /dev/stdin

# addition of priority route works even if interface is down
n=	10
RTTEST_TARGETS+:=rttest${n}
rttest${n}:
	${SUDO} ifconfig lo10002 down
	${RCMD} add -priority 16 10.8.1/24 192.0.2.1
	${RCMD} add -priority 17 10.8.1/24 192.0.2.2
	${RCMD} add -priority 18 10.8.1/24 192.0.2.3
	${RCMD} show -inet 2>&1 | \
		diff -u ${.CURDIR}/${.TARGET}.ok /dev/stdin

# same as 10 but different order
n=	11
RTTEST_TARGETS+:=rttest${n}
rttest${n}:
	${SUDO} ifconfig lo10002 down
	${RCMD} add -priority 16 10.8.1/24 192.0.2.1
	${RCMD} add -priority 18 10.8.1/24 192.0.2.3
	${RCMD} add -priority 17 10.8.1/24 192.0.2.2
	${RCMD} show -inet 2>&1 | \
		diff -u ${.CURDIR}/${.TARGET}.ok /dev/stdin

# change non-mpath route (even though the route was marked as mpath)
n=	12
RTTEST_TARGETS+:=rttest${n}
rttest${n}:
	${RCMD} add -mpath 10.8.1/24 192.0.2.3
	${RCMD} change -mpath 10.8.1/24 192.0.2.4
	${RCMD} show -inet 2>&1 | \
		diff -u ${.CURDIR}/${.TARGET}.ok /dev/stdin

# Cannot change the gateway of an mpath route
n=	13
RTTEST_TARGETS+:=rttest${n}
rttest${n}:
	${RCMD} add -mpath 10.8.1/24 192.0.2.3
	${RCMD} add -mpath 10.8.1/24 192.0.2.4
	! ${RCMD} change -mpath 10.8.1/24 192.0.2.1

# Changing MTU should not change the ifa
n=	14
RTTEST_TARGETS+:=rttest${n}
rttest${n}:
	${SUDO} ifconfig lo10001 inet6 eui64
	${SUDO} ifconfig lo10002 inet6 fd88::1/64
	${SUDO} ifconfig lo10003 inet6 fd99::1/64
	${RCMD} add -inet6 fd88::666 fd99::1
	${RCMD} change fd88::666 -mtu 1500
	${RCMD} show -inet6 2>&1 | \
		diff -u ${.CURDIR}/${.TARGET}.ok /dev/stdin

# Changing the ifa should not change the gw
n=	15
RTTEST_TARGETS+:=rttest${n}
rttest${n}:
	${RCMD} add 10.0/16 192.0.2.4
	${RCMD} change 10.0/16 -ifa 192.0.2.2
	${RCMD} show -inet 2>&1 | \
		diff -u ${.CURDIR}/${.TARGET}.ok /dev/stdin

# Changing ifp should not change the gw
n=	16
RTTEST_TARGETS+:=rttest${n}
rttest${n}:
	${SUDO} ifconfig lo10001 inet6 eui64
	${SUDO} ifconfig lo10002 inet6 fd88::1/64
	${SUDO} ifconfig lo10003 inet6 fd99::1/64
	${RCMD} add -inet6 fd88::666 fd99::1
	${RCMD} change fd88::666 -ifp lo10002
	${RCMD} show -inet6 2>&1 | \
		diff -u ${.CURDIR}/${.TARGET}.ok /dev/stdin

# Removing 2nd-last multipath route (head)
n=	17
RTTEST_TARGETS+:=rttest${n}
rttest${n}:
	${RCMD} add -mpath 10.8.1/24 192.0.2.3
	${RCMD} add -mpath 10.8.1/24 192.0.2.4
	${RCMD} delete -mpath 10.8.1/24 192.0.2.3
	${RCMD} show -inet -gateway 2>&1 | \
		diff -u ${.CURDIR}/${.TARGET}.ok /dev/stdin

# Removing 2nd-last multipath route (tail)
n=	18
RTTEST_TARGETS+:=rttest${n}
rttest${n}:
	${RCMD} add -mpath 10.8.1/24 192.0.2.3
	${RCMD} add -mpath 10.8.1/24 192.0.2.4
	${RCMD} delete -mpath 10.8.1/24 192.0.2.4
	${RCMD} show -inet -gateway 2>&1 | \
		diff -u ${.CURDIR}/${.TARGET}.ok /dev/stdin

# Removing 2nd-last multipath route (head of dupedkey chain)
n=	19
RTTEST_TARGETS+:=rttest${n}
rttest${n}:
	${RCMD} add 10.8.1/24 192.0.2.1
	${RCMD} add -mpath 10.8.1/25 192.0.2.3
	${RCMD} add -mpath 10.8.1/25 192.0.2.4
	${RCMD} add 10.8.1/26 192.0.2.2
	${RCMD} delete -mpath 10.8.1/25 192.0.2.3
	${RCMD} show -inet -gateway 2>&1 | \
		diff -u ${.CURDIR}/${.TARGET}.ok /dev/stdin

# RTM_GET for mpath routes does not need a gateway argument
n=	20
RTTEST_TARGETS+:=rttest${n}
rttest${n}:
	${SUDO} ifconfig lo10001 inet6 fd88::1/64
	${SUDO} ifconfig lo10002 inet6 fd88::2/64
	${RCMD} add -inet6 2001:ee0:2001:c0::/64 fd88::1
	${RCMD} add -inet6 -mpath 2001:ee0:2001:c0::/64 fd88::2
	${RCMD} get -inet6 2001:ee0:2001:c0::/64 2>&1 | \
		diff -u ${.CURDIR}/${.TARGET}.ok /dev/stdin

# Verify order of multiple priorities
n=	21
RTTEST_TARGETS+:=rttest${n}
rttest${n}:
	${RCMD} add 10.8.1/24 -gateway 192.0.2.3 -priority 4
	${RCMD} add 10.8.1/24 -gateway 192.0.2.3 -priority 3
	${RCMD} add 10.8.1/24 -gateway 192.0.2.3 -priority 5
	${RCMD} show -inet 2>&1 | \
		diff -u ${.CURDIR}/${.TARGET}.ok /dev/stdin

# Can change the MTU of an mpath route that exists
n=	22
RTTEST_TARGETS+:=rttest${n}
rttest${n}:
	${RCMD} add -mpath 10.8.1/24 192.0.2.3
	${RCMD} add -mpath 10.8.1/24 192.0.2.4
	${RCMD} change -mpath -mtu 1000 10.8.1/24 192.0.2.4
	${RCMD} show -inet 2>&1 | \
		diff -u ${.CURDIR}/${.TARGET}.ok /dev/stdin

# Can't change the MTU of an mpath route without gateway
n=	23
RTTEST_TARGETS+:=rttest${n}
rttest${n}:
	${RCMD} add -mpath 10.8.1/24 192.0.2.3
	${RCMD} add -mpath 10.8.1/24 192.0.2.4
	! ${RCMD} change -mpath -mtu 1000 10.8.1/24

# Can change and lock the MTU of an mpath route that exists
# (route can't just lock so this is mostly the same as rttest22)
n=	24
RTTEST_TARGETS+:=rttest${n}
rttest${n}:
	${RCMD} add -mpath 10.8.1/24 192.0.2.3
	${RCMD} add -mpath 10.8.1/24 192.0.2.4
	${RCMD} change -mpath -lock -mtu 1000 10.8.1/24 192.0.2.4
	${RCMD} show -inet 2>&1 | \
		diff -u ${.CURDIR}/${.TARGET}.ok /dev/stdin

# Can't change the MTU of an mpath route that has a wrong gateway
n=	25
RTTEST_TARGETS+:=rttest${n}
rttest${n}:
	${RCMD} add -mpath 10.8.1/24 192.0.2.3
	${RCMD} add -mpath 10.8.1/24 192.0.2.4
	! ${RCMD} change -mpath -mtu 1000 10.8.1/24 192.0.2.1

# Can change the MTU of an non-mpath route without gateway
n=	26
RTTEST_TARGETS+:=rttest${n}
rttest${n}:
	${RCMD} add -mpath 10.8.1/24 192.0.2.3
	${RCMD} change -mpath -mtu 1000 10.8.1/24
	${RCMD} show -inet 2>&1 | \
		diff -u ${.CURDIR}/${.TARGET}.ok /dev/stdin

# Can change the MTU and gateway of an non-mpath route at the same time
n=	27
RTTEST_TARGETS+:=rttest${n}
rttest${n}:
	${RCMD} add -mpath 10.8.1/24 192.0.2.3
	${RCMD} change -mpath -mtu 1000 10.8.1/24 192.0.2.4
	${RCMD} show -inet 2>&1 | \
		diff -u ${.CURDIR}/${.TARGET}.ok /dev/stdin

# Can't delete RTF_LOCAL route
n=	28
RTTEST_TARGETS+:=rttest${n}
rttest${n}:
	! ${RCMD} delete 192.0.2.1 192.0.2.1

# Can't change/set expire on a RTF_LOCAL route
n=	29
RTTEST_TARGETS+:=rttest${n}
rttest${n}:
	! ${RCMD} change -expire 30 192.0.2.1 192.0.2.2


# Ensure that all MPATH routes on vlan99 are taken down
n=	30
RTTEST_TARGETS+:=rttest${n}
rttest${n}:
	${SUDO} ifconfig vether99 rdomain ${RDOMAIN} lladdr fe:e1:ba:d4:c8:1d up
	${SUDO} ifconfig vlan99 rdomain ${RDOMAIN} parent vether99 vnetid 3 up
	${SUDO} ifconfig vether99 10.1.254.56/14
	${SUDO} ifconfig vlan99 inet alias 10.1.255.1/14 
	${SUDO} ifconfig vlan99 inet alias 10.1.255.2/14 
	${SUDO} ifconfig vlan99 inet alias 10.1.255.3/14
	${SUDO} ifconfig vlan99 down
	${RCMD} show -inet 2>&1 | \
		diff -u ${.CURDIR}/${.TARGET}.ok /dev/stdin
	${SUDO} ifconfig vlan99 destroy
	${SUDO} ifconfig vether99 destroy


REGRESS_TARGETS=netmask ${RTTEST_TARGETS}
REGRESS_ROOT_TARGETS=${REGRESS_TARGETS}
.PHONY: ${REGRESS_TARGETS}

.include <bsd.regress.mk>
@


1.20
log
@Test that all MPATH routes attached to an interface are taken down when
the link state change.

Issue reported by gerhard@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.19 2017/08/10 13:08:39 mpi Exp $
d333 1
a333 1
#
@


1.19
log
@Use "! cmd" for commands that are expected to fail.

Suggested by bluhm@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.18 2017/08/10 13:06:12 mpi Exp $
d331 18
@


1.18
log
@Test that 'route change' has no effect on a RTF_LOCAL route.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.17 2017/07/27 12:44:07 mpi Exp $
d88 1
a88 1
	${RCMD} add -mpath -priority 17 10.8.1/24 192.0.2.2 && exit 1 || exit 0
d99 1
a99 1
	${RCMD} add -priority 17 10.8.1/24 192.0.2.2 && exit 1 || exit 0
d122 1
a122 1
	${RCMD} add -priority 17 10.8.1/24 192.0.2.2 && exit 1 || exit 0
d177 1
a177 1
	${RCMD} change -mpath 10.8.1/24 192.0.2.1 && exit 1 || exit 0
d281 1
a281 1
	${RCMD} change -mpath -mtu 1000 10.8.1/24 && exit 1 || exit 0
d300 1
a300 1
	${RCMD} change -mpath -mtu 1000 10.8.1/24 192.0.2.1 && exit 1 || exit 0
d324 1
a324 1
	${RCMD} delete 192.0.2.1 192.0.2.1 && exit 1 || exit 0
d330 1
a330 1
	${RCMD} change -expire 30 192.0.2.1 192.0.2.2 && exit 1 || exit 0
@


1.17
log
@Work around for rttest8 that some times fail due to a reference count
race in the kernel.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.16 2017/07/07 23:55:21 bluhm Exp $
d325 6
@


1.16
log
@Remove all references to "make depend" from regress.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.15 2017/05/30 11:57:59 bluhm Exp $
d123 2
@


1.15
log
@Remove the .INTERRUPT target, it prevented to terminate the test
with Ctrl-C in some situations.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.14 2016/09/01 09:57:45 mpi Exp $
d7 1
a7 1
.ifmake !obj && !clean && !cleandir && !depend && !regress
@


1.14
log
@Test that RTF_LOCAL routes cannot be deleted from userland.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.13 2016/08/31 11:00:15 claudio Exp $
d10 1
a10 1
.SILENT: .BEGIN .END .INTERRUPT
a23 6
.INTERRUPT:
	-${SUDO} ifconfig lo10001 destroy
	-${SUDO} ifconfig lo10002 destroy
	-${SUDO} ifconfig lo10003 destroy
	-${SUDO} ifconfig lo10004 destroy

d181 1
a181 1
	${SUDO} ifconfig lo10001 inet6 eui64 
d202 1
a202 1
	${SUDO} ifconfig lo10001 inet6 eui64 
@


1.13
log
@Add a bunch of regress test to verify the RTM_CHANGE behaviour of mpath
and non-mpath routes. Some of the tests currently fail.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.12 2016/08/31 10:33:15 claudio Exp $
d323 6
@


1.12
log
@Document what the various test here do. With mpi@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.11 2016/08/22 17:43:29 mpi Exp $
d266 55
@


1.11
log
@Use a reachable next hop for test 13, which make it fail as it should.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.10 2015/12/02 11:05:35 mpi Exp $
d43 1
d58 1
d67 1
d77 1
d87 1
d98 1
d109 1
d120 1
d132 1
d144 1
d155 1
d166 1
@


1.10
log
@Check that routes to the same destination but with a different priority
are inserted in the right order.

Currently failing with ART.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.9 2015/11/30 09:46:08 mpi Exp $
d163 1
d169 1
a169 1
	${RCMD} change -mpath 10.8.1/24 192.0.2.5 && exit 1 || exit 0
@


1.9
log
@Rewrite the "netmask" rule testing the "-dst" and "-net" options
of route(8) to populate the test routing table (number 5) and use
different subnets since we're not passing the "-mpath" flags.

Breakage reported by daniel@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.8 2015/10/27 12:48:14 mpi Exp $
d246 9
@


1.8
log
@Check that RTM_GET works without RTAX_GATEWAY argument for multipath
route entries.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.7 2015/08/31 08:34:46 mpi Exp $
a4 4
NET=	192.0.3.0
MASK=	255.255.255.0
GW=	192.0.2.1

d33 2
d36 1
d38 2
a39 3
.for mod in -net -dst
	@@${SUDO} route -nt ${cmd} ${mod} ${NET}/24 ${GW}
	@@${SUDO} route -nt ${cmd} ${mod} ${NET} -netmask ${MASK} ${GW}
a41 2

RCMD=		${SUDO} route -T ${RDOMAIN} -n
@


1.7
log
@No more connected routes on loopback interfaces.

Those tests now pass even if you have an AUTOCONF'd address on your machine.

Note that the global list of prefixes is *still* not rtable ID aware.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.6 2015/03/02 21:43:28 claudio Exp $
d237 11
@


1.6
log
@Add three extra checks that test proper removal of the P flag. Currently 2 fail
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.5 2014/11/26 11:55:08 mpi Exp $
d14 1
a14 1
.SILENT: .BEGIN .END
@


1.5
log
@Add 3 regression tests for "route change" dealing with -ifp, -ifa and
-mtu.  Triggered by a report from Florian Riehm on tech@@.

Note that two of these tests are using IPv6 addresses and expose another
bug with ::1.  I'll deal with this afterward unless someone else(tm)
fixes it.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.4 2014/05/31 14:15:53 claudio Exp $
d206 33
@


1.4
log
@Add a basic test for RTM_CHANGE
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.3 2014/04/18 16:38:28 claudio Exp $
d173 33
@


1.3
log
@Introduce some regress tests against our routing table. At least that way
there is a chance that we do not break the network stack even more.
These regress tests already found a few issues.
The framework is ugly and does not properly recover from failures. Somebody
more skilled can come up with a better solution.
mpi@@, blambert@@ and sthen@@ support this
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.2 2004/12/29 04:39:17 david Exp $
d158 15
@


1.2
log
@define REGRESS_ROOT_TARGETS for tests that require root privileges
@
text
@d1 3
a3 1
# $OpenBSD: Makefile,v 1.1 2004/09/24 12:54:13 markus Exp $
d9 28
d45 115
a159 1
REGRESS_TARGETS=netmask
@


1.1
log
@simple route regress test
@
text
@d1 1
a1 1
# $OpenBSD: $
d16 1
@

