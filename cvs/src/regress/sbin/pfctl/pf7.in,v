head	1.5;
access;
symbols
	OPENBSD_6_0:1.5.0.52
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.42
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.50
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.48
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.46
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.44
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.40
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.38
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.36
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.34
	OPENBSD_5_0:1.5.0.32
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.30
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.28
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.24
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.26
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.22
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.20
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.18
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.16
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.14
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.12
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.10
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.8
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.6
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.4
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.2
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.3.0.8
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.6
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.4
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2;
locks; strict;
comment	@# @;


1.5
date	2004.02.04.18.37.56;	author mcbride;	state Exp;
branches;
next	1.4;

1.4
date	2003.12.05.16.55.40;	author henning;	state Exp;
branches;
next	1.3;

1.3
date	2001.11.13.07.01.03;	author dhartmei;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.15.21.53.09;	author dhartmei;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.25.21.54.26;	author frantzen;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Test 'pass proto { tcp udp icmp } modulate state' type rules
@
text
@# test modulate state

block	       out log on tun1000000		 all
block	       in  log on tun1000000		 all

block return-rst  out log on tun1000000 proto tcp all
block return-rst  in  log on tun1000000 proto tcp all
block return-icmp out log on tun1000000 proto udp all
block return-icmp in  log on tun1000000 proto udp all

block out log quick on tun1000000 from ! 157.161.48.183 to any

block in quick on tun1000000 from any to 255.255.255.255

block in log quick on tun1000000 from 10.0.0.0/8		to any
block in log quick on tun1000000 from 172.16.0.0/12	to any
block in log quick on tun1000000 from 192.168.0.0/16	to any
block in log quick on tun1000000 from 255.255.255.255/32 to any

pass out on tun1000000 inet proto icmp all icmp-type 8 code 0 keep state
pass in  on tun1000000 inet proto icmp all icmp-type 8 code 0 keep state

pass out on tun1000000 proto udp all keep state

pass in on tun1000000 proto udp from any to any port = domain keep state

pass out on tun1000000 proto tcp all modulate state
pass in on tun1000000 proto { tcp udp icmp } all modulate state
pass in on tun1000000 proto { udp tcp icmp } all flags S/SA synproxy state

pass in on tun1000000 proto tcp from any to any port = ssh    modulate state
pass in on tun1000000 proto tcp from any to any port = smtp   modulate state
pass in on tun1000000 proto tcp from any to any port = domain modulate state
pass in on tun1000000 proto tcp from any to any port = auth   modulate state
@


1.4
log
@lo1, tun0, tun1 don't exist any more. thus, create the interfaces we need for
regress purposes before starting and destroy them afterwards.
lo1 -> lo1000000
tun0 -> tun1000000
tun1 -> tun1000001

ok markus@@
@
text
@d28 2
@


1.3
log
@Use more common interface names like lo0, tun0, enc0 for regress tests,
so they run anywhere. From jason@@.
@
text
@d3 2
a4 2
block	       out log on tun0		 all
block	       in  log on tun0		 all
d6 4
a9 4
block return-rst  out log on tun0 proto tcp all
block return-rst  in  log on tun0 proto tcp all
block return-icmp out log on tun0 proto udp all
block return-icmp in  log on tun0 proto udp all
d11 1
a11 1
block out log quick on tun0 from ! 157.161.48.183 to any
d13 1
a13 1
block in quick on tun0 from any to 255.255.255.255
d15 4
a18 4
block in log quick on tun0 from 10.0.0.0/8		to any
block in log quick on tun0 from 172.16.0.0/12	to any
block in log quick on tun0 from 192.168.0.0/16	to any
block in log quick on tun0 from 255.255.255.255/32 to any
d20 2
a21 2
pass out on tun0 inet proto icmp all icmp-type 8 code 0 keep state
pass in  on tun0 inet proto icmp all icmp-type 8 code 0 keep state
d23 1
a23 1
pass out on tun0 proto udp all keep state
d25 1
a25 1
pass in on tun0 proto udp from any to any port = domain keep state
d27 1
a27 1
pass out on tun0 proto tcp all modulate state
d29 4
a32 4
pass in on tun0 proto tcp from any to any port = ssh    modulate state
pass in on tun0 proto tcp from any to any port = smtp   modulate state
pass in on tun0 proto tcp from any to any port = domain modulate state
pass in on tun0 proto tcp from any to any port = auth   modulate state
@


1.2
log
@Update regress tests. Some input syntax has changed (inet/inet6) as well
as some output format (netmasks, inet/inet6, return-icmp).
@
text
@d3 2
a4 2
block	       out log on kue0		 all
block	       in  log on kue0		 all
d6 4
a9 4
block return-rst  out log on kue0 proto tcp all
block return-rst  in  log on kue0 proto tcp all
block return-icmp out log on kue0 proto udp all
block return-icmp in  log on kue0 proto udp all
d11 1
a11 1
block out log quick on kue0 from ! 157.161.48.183 to any
d13 1
a13 1
block in quick on kue0 from any to 255.255.255.255
d15 4
a18 4
block in log quick on kue0 from 10.0.0.0/8		to any
block in log quick on kue0 from 172.16.0.0/12	to any
block in log quick on kue0 from 192.168.0.0/16	to any
block in log quick on kue0 from 255.255.255.255/32 to any
d20 2
a21 2
pass out on kue0 inet proto icmp all icmp-type 8 code 0 keep state
pass in  on kue0 inet proto icmp all icmp-type 8 code 0 keep state
d23 1
a23 1
pass out on kue0 proto udp all keep state
d25 1
a25 1
pass in on kue0 proto udp from any to any port = domain keep state
d27 1
a27 1
pass out on kue0 proto tcp all modulate state
d29 4
a32 4
pass in on kue0 proto tcp from any to any port = ssh    modulate state
pass in on kue0 proto tcp from any to any port = smtp   modulate state
pass in on kue0 proto tcp from any to any port = domain modulate state
pass in on kue0 proto tcp from any to any port = auth   modulate state
@


1.1
log
@PF ISN randomization.  Or in trekkie techno-babble, ISN phase modulation.
@
text
@d20 2
a21 2
pass out on kue0 proto icmp all icmp-type 8 code 0 keep state
pass in  on kue0 proto icmp all icmp-type 8 code 0 keep state
@

