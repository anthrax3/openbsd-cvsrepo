head	1.15;
access;
symbols
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.14.0.20
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.10
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.14.0.18
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.16
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.14
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.12
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.8
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.6
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.4
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.2
	OPENBSD_5_0:1.12.0.2
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.11.0.6
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.9.0.14
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.10
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.8
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.6
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.4
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.2
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.8.0.12
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.10
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.8
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.6
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.4
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5;
locks; strict;
comment	@# @;


1.15
date	2016.09.01.16.18.09;	author henning;	state Exp;
branches;
next	1.14;
commitid	1YZeac6u4qmzjapG;

1.14
date	2011.12.12.21.41.29;	author mikeb;	state Exp;
branches;
next	1.13;

1.13
date	2011.11.27.10.33.37;	author henning;	state Exp;
branches;
next	1.12;

1.12
date	2011.07.08.06.17.58;	author mcbride;	state Exp;
branches;
next	1.11;

1.11
date	2010.01.13.01.08.38;	author mcbride;	state Exp;
branches;
next	1.10;

1.10
date	2009.10.06.14.11.07;	author jsg;	state Exp;
branches;
next	1.9;

1.9
date	2006.10.06.17.09.41;	author mcbride;	state Exp;
branches;
next	1.8;

1.8
date	2003.12.05.16.55.40;	author henning;	state Exp;
branches;
next	1.7;

1.7
date	2003.07.29.20.28.33;	author cedric;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.18.20.27.01;	author henning;	state Exp;
branches;
next	1.5;

1.5
date	2003.03.11.14.04.57;	author henning;	state Exp;
branches;
next	1.4;

1.4
date	2003.03.08.14.30.27;	author henning;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.01.04.26.19;	author dhartmei;	state Exp;
branches;
next	1.2;

1.2
date	2002.12.24.13.59.32;	author mcbride;	state Exp;
branches;
next	1.1;

1.1
date	2002.12.18.16.49.54;	author dhartmei;	state Exp;
branches;
next	;


desc
@@


1.15
log
@no route-to/reply-to/dup-to on block rules, aka make this pass again
triggered by bluhm's *meep, secret*
@
text
@@@0 pass in quick on enc0 all flags S/SA
  [ Skip steps: i=3 d=3 r=end p=6 sa=8 da=4 sp=end dp=6 ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
@@1 pass in quick on enc0 inet all flags S/SA
  [ Skip steps: i=3 d=3 r=end p=6 sa=8 da=4 sp=end dp=6 ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
@@2 pass in quick on enc0 inet6 all flags S/SA
  [ Skip steps: r=end p=6 sa=8 da=4 sp=end dp=6 ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
@@3 pass out quick on tun1000000 inet all flags S/SA route-to tun1000001
  [ Skip steps: i=end d=6 r=end f=5 p=6 sa=8 sp=end dp=6 ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
@@4 pass out quick on tun1000000 inet from any to 192.168.1.1 flags S/SA route-to tun1000001
  [ Skip steps: i=end d=6 r=end p=6 sa=8 sp=end dp=6 ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
@@5 pass out quick on tun1000000 inet6 from any to fec0::1 flags S/SA route-to tun1000001
  [ Skip steps: i=end r=end sa=8 sp=end ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
@@6 pass in on tun1000000 inet proto tcp from any to any port = 21 flags S/SA dup-to 192.168.1.1@@tun1000001
  [ Skip steps: i=end d=end r=end p=8 sa=8 da=8 sp=end dp=8 ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
@@7 pass in on tun1000000 inet6 proto tcp from any to any port = 21 flags S/SA dup-to fec0::1@@tun1000001
  [ Skip steps: i=end d=end r=end sp=end ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
@@8 pass in quick on tun1000000 inet from 192.168.1.1 to 10.1.1.1 flags S/SA route-to tun1000001
  [ Skip steps: i=end d=end r=end p=10 sp=end dp=10 ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
@@9 pass in quick on tun1000000 inet6 from fec0::/64 to fec1::2 flags S/SA route-to tun1000001
  [ Skip steps: i=end d=end r=end sp=end ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
@@10 pass in on tun1000000 inet proto tcp from any to any port = 21 flags S/SA reply-to 192.168.1.1@@tun1000001
  [ Skip steps: i=end d=end r=end p=12 sa=12 da=12 sp=end dp=12 ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
@@11 pass in on tun1000000 inet6 proto tcp from any to any port = 21 flags S/SA reply-to fec0::1@@tun1000001
  [ Skip steps: i=end d=end r=end sp=end ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
@@12 pass in quick on tun1000000 inet from 192.168.1.1 to 10.1.1.1 flags S/SA reply-to tun1000001
  [ Skip steps: i=end d=end r=end p=end sp=end dp=end ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
@@13 pass in quick on tun1000000 inet6 from fec0::/64 to fec1::2 flags S/SA reply-to tun1000001
  [ Skip steps: i=end d=end r=end p=end sp=end dp=end ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
@@14 pass in quick on tun1000000 inet from 192.168.1.1 to 10.1.1.1 flags S/SA dup-to 192.168.1.100@@tun1000001
  [ Skip steps: i=end d=end r=end p=end sp=end dp=end ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
@@15 pass in quick on tun1000000 inet6 from fec0::/64 to fec1::2 flags S/SA dup-to fec1::2@@tun1000001
  [ Skip steps: i=end d=end r=end f=end p=end sa=end da=end sp=end dp=end ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
@


1.14
log
@fixup regression tests wrt skip steps (fixed in pfctl.c rev1.305);
ok henning mcbride (a while back)
@
text
@d25 1
a25 1
@@6 block drop in on tun1000000 inet proto tcp from any to any port = 21 dup-to 192.168.1.1@@tun1000001
d29 1
a29 1
@@7 block drop in on tun1000000 inet6 proto tcp from any to any port = 21 dup-to fec0::1@@tun1000001
d41 1
a41 1
@@10 block drop in on tun1000000 inet proto tcp from any to any port = 21 reply-to 192.168.1.1@@tun1000001
d45 1
a45 1
@@11 block drop in on tun1000000 inet6 proto tcp from any to any port = 21 reply-to fec0::1@@tun1000001
@


1.13
log
@adjust for port numbers instead of names by default
From: Lawrence Teo <lteo at devio at us>
@
text
@d2 1
a2 1
  [ Skip steps: i=3 r=3 d=end p=6 sa=8 da=4 sp=end dp=6 ]
d6 1
a6 1
  [ Skip steps: i=3 r=3 d=end p=6 sa=8 da=4 sp=end dp=6 ]
d10 1
a10 1
  [ Skip steps: d=end p=6 sa=8 da=4 sp=end dp=6 ]
d14 1
a14 1
  [ Skip steps: i=end r=6 d=end f=5 p=6 sa=8 sp=end dp=6 ]
d18 1
a18 1
  [ Skip steps: i=end r=6 d=end p=6 sa=8 sp=end dp=6 ]
d22 1
a22 1
  [ Skip steps: i=end d=end sa=8 sp=end ]
d26 1
a26 1
  [ Skip steps: i=end r=end d=end p=8 sa=8 da=8 sp=end dp=8 ]
d30 1
a30 1
  [ Skip steps: i=end r=end d=end sp=end ]
d34 1
a34 1
  [ Skip steps: i=end r=end d=end p=10 sp=end dp=10 ]
d38 1
a38 1
  [ Skip steps: i=end r=end d=end sp=end ]
d42 1
a42 1
  [ Skip steps: i=end r=end d=end p=12 sa=12 da=12 sp=end dp=12 ]
d46 1
a46 1
  [ Skip steps: i=end r=end d=end sp=end ]
d50 1
a50 1
  [ Skip steps: i=end r=end d=end p=end sp=end dp=end ]
d54 1
a54 1
  [ Skip steps: i=end r=end d=end p=end sp=end dp=end ]
d58 1
a58 1
  [ Skip steps: i=end r=end d=end p=end sp=end dp=end ]
d62 1
a62 1
  [ Skip steps: i=end r=end d=end f=end p=end sa=end da=end sp=end dp=end ]
@


1.12
log
@Update regress tests for the following changes:
- if_addr RB_TREE (Address sort differently on an interface)
- skip steps changes
	- RDOMAIN
	- reordering of address/port tests
- fastroute is gone
- keep state is no longer printed by default
- lo0 now has link-local scope address in addition to ::1
@
text
@d25 1
a25 1
@@6 block drop in on tun1000000 inet proto tcp from any to any port = ftp dup-to 192.168.1.1@@tun1000001
d29 1
a29 1
@@7 block drop in on tun1000000 inet6 proto tcp from any to any port = ftp dup-to fec0::1@@tun1000001
d41 1
a41 1
@@10 block drop in on tun1000000 inet proto tcp from any to any port = ftp reply-to 192.168.1.1@@tun1000001
d45 1
a45 1
@@11 block drop in on tun1000000 inet6 proto tcp from any to any port = ftp reply-to fec0::1@@tun1000001
@


1.11
log
@Update regress output files to -current behaviour
- non-pool translation/routing specification
- leftover bits from nat-to/rdr-to/binat-to
@
text
@d1 2
a2 2
@@0 pass in quick on enc0 all flags S/SA keep state fastroute
  [ Skip steps: i=3 d=3 p=6 sa=8 sp=end da=4 dp=6 ]
d5 2
a6 2
@@1 pass in quick on enc0 inet all flags S/SA keep state fastroute
  [ Skip steps: i=3 d=3 p=6 sa=8 sp=end da=4 dp=6 ]
d9 2
a10 2
@@2 pass in quick on enc0 inet6 all flags S/SA keep state fastroute
  [ Skip steps: p=6 sa=8 sp=end da=4 dp=6 ]
d13 2
a14 2
@@3 pass out quick on tun1000000 inet all flags S/SA keep state route-to tun1000001
  [ Skip steps: i=end d=6 f=5 p=6 sa=8 sp=end dp=6 ]
d17 2
a18 2
@@4 pass out quick on tun1000000 inet from any to 192.168.1.1 flags S/SA keep state route-to tun1000001
  [ Skip steps: i=end d=6 p=6 sa=8 sp=end dp=6 ]
d21 2
a22 2
@@5 pass out quick on tun1000000 inet6 from any to fec0::1 flags S/SA keep state route-to tun1000001
  [ Skip steps: i=end sa=8 sp=end ]
d26 1
a26 1
  [ Skip steps: i=end d=end p=8 sa=8 sp=end da=8 dp=8 ]
d30 1
a30 1
  [ Skip steps: i=end d=end sp=end ]
d33 2
a34 2
@@8 pass in quick on tun1000000 inet from 192.168.1.1 to 10.1.1.1 flags S/SA keep state route-to tun1000001
  [ Skip steps: i=end d=end p=10 sp=end dp=10 ]
d37 2
a38 2
@@9 pass in quick on tun1000000 inet6 from fec0::/64 to fec1::2 flags S/SA keep state route-to tun1000001
  [ Skip steps: i=end d=end sp=end ]
d42 1
a42 1
  [ Skip steps: i=end d=end p=12 sa=12 sp=end da=12 dp=12 ]
d46 1
a46 1
  [ Skip steps: i=end d=end sp=end ]
d49 2
a50 2
@@12 pass in quick on tun1000000 inet from 192.168.1.1 to 10.1.1.1 flags S/SA keep state reply-to tun1000001
  [ Skip steps: i=end d=end p=end sp=end dp=end ]
d53 2
a54 2
@@13 pass in quick on tun1000000 inet6 from fec0::/64 to fec1::2 flags S/SA keep state reply-to tun1000001
  [ Skip steps: i=end d=end p=end sp=end dp=end ]
d57 2
a58 2
@@14 pass in quick on tun1000000 inet from 192.168.1.1 to 10.1.1.1 flags S/SA keep state dup-to 192.168.1.100@@tun1000001
  [ Skip steps: i=end d=end p=end sp=end dp=end ]
d61 2
a62 2
@@15 pass in quick on tun1000000 inet6 from fec0::/64 to fec1::2 flags S/SA keep state dup-to fec1::2@@tun1000001
  [ Skip steps: i=end d=end f=end p=end sa=end sp=end da=end dp=end ]
@


1.10
log
@more updates for new pf with source-hash manually added to
loaded output as it doesn't currently appear as it should.

ok henning@@
@
text
@d25 1
a25 1
@@6 block drop in on tun1000000 inet proto tcp from any to any port = ftp dup-to (tun1000001 192.168.1.1)
d29 1
a29 1
@@7 block drop in on tun1000000 inet6 proto tcp from any to any port = ftp dup-to (tun1000001 fec0::1)
d41 1
a41 1
@@10 block drop in on tun1000000 inet proto tcp from any to any port = ftp reply-to (tun1000001 192.168.1.1)
d45 1
a45 1
@@11 block drop in on tun1000000 inet6 proto tcp from any to any port = ftp reply-to (tun1000001 fec0::1)
d57 1
a57 1
@@14 pass in quick on tun1000000 inet from 192.168.1.1 to 10.1.1.1 flags S/SA keep state dup-to (tun1000001 192.168.1.100)
d61 1
a61 1
@@15 pass in quick on tun1000000 inet6 from fec0::/64 to fec1::2 flags S/SA keep state dup-to (tun1000001 fec1::2)
@


1.9
log
@Handle default 'flags S/SA keep state', 'no state' and 'flags any'.
@
text
@d1 1
a1 1
@@0 pass in quick on enc0 fastroute all flags S/SA keep state
d5 1
a5 1
@@1 pass in quick on enc0 fastroute inet all flags S/SA keep state
d9 1
a9 1
@@2 pass in quick on enc0 fastroute inet6 all flags S/SA keep state
d13 1
a13 1
@@3 pass out quick on tun1000000 route-to tun1000001 inet all flags S/SA keep state
d17 1
a17 1
@@4 pass out quick on tun1000000 route-to tun1000001 inet from any to 192.168.1.1 flags S/SA keep state
d21 1
a21 1
@@5 pass out quick on tun1000000 route-to tun1000001 inet6 from any to fec0::1 flags S/SA keep state
d25 1
a25 1
@@6 block drop in on tun1000000 dup-to (tun1000001 192.168.1.1) inet proto tcp from any to any port = ftp
d29 1
a29 1
@@7 block drop in on tun1000000 dup-to (tun1000001 fec0::1) inet6 proto tcp from any to any port = ftp
d33 1
a33 1
@@8 pass in quick on tun1000000 route-to tun1000001 inet from 192.168.1.1 to 10.1.1.1 flags S/SA keep state
d37 1
a37 1
@@9 pass in quick on tun1000000 route-to tun1000001 inet6 from fec0::/64 to fec1::2 flags S/SA keep state
d41 1
a41 1
@@10 block drop in on tun1000000 reply-to (tun1000001 192.168.1.1) inet proto tcp from any to any port = ftp
d45 1
a45 1
@@11 block drop in on tun1000000 reply-to (tun1000001 fec0::1) inet6 proto tcp from any to any port = ftp
d49 1
a49 1
@@12 pass in quick on tun1000000 reply-to tun1000001 inet from 192.168.1.1 to 10.1.1.1 flags S/SA keep state
d53 1
a53 1
@@13 pass in quick on tun1000000 reply-to tun1000001 inet6 from fec0::/64 to fec1::2 flags S/SA keep state
d57 1
a57 1
@@14 pass in quick on tun1000000 dup-to (tun1000001 192.168.1.100) inet from 192.168.1.1 to 10.1.1.1 flags S/SA keep state
d61 1
a61 1
@@15 pass in quick on tun1000000 dup-to (tun1000001 fec1::2) inet6 from fec0::/64 to fec1::2 flags S/SA keep state
@


1.8
log
@lo1, tun0, tun1 don't exist any more. thus, create the interfaces we need for
regress purposes before starting and destroy them afterwards.
lo1 -> lo1000000
tun0 -> tun1000000
tun1 -> tun1000001

ok markus@@
@
text
@d1 1
a1 1
@@0 pass in quick on enc0 fastroute all
d5 1
a5 1
@@1 pass in quick on enc0 fastroute inet all
d9 1
a9 1
@@2 pass in quick on enc0 fastroute inet6 all
d13 1
a13 1
@@3 pass out quick on tun1000000 route-to tun1000001 inet all
d17 1
a17 1
@@4 pass out quick on tun1000000 route-to tun1000001 inet from any to 192.168.1.1
d21 1
a21 1
@@5 pass out quick on tun1000000 route-to tun1000001 inet6 from any to fec0::1
d33 1
a33 1
@@8 pass in quick on tun1000000 route-to tun1000001 inet from 192.168.1.1 to 10.1.1.1
d37 1
a37 1
@@9 pass in quick on tun1000000 route-to tun1000001 inet6 from fec0::/64 to fec1::2
d49 1
a49 1
@@12 pass in quick on tun1000000 reply-to tun1000001 inet from 192.168.1.1 to 10.1.1.1
d53 1
a53 1
@@13 pass in quick on tun1000000 reply-to tun1000001 inet6 from fec0::/64 to fec1::2
d57 1
a57 1
@@14 pass in quick on tun1000000 dup-to (tun1000001 192.168.1.100) inet from 192.168.1.1 to 10.1.1.1
d61 1
a61 1
@@15 pass in quick on tun1000000 dup-to (tun1000001 fec1::2) inet6 from fec0::/64 to fec1::2
@


1.7
log
@Big Sync
@
text
@d13 1
a13 1
@@3 pass out quick on tun0 route-to tun1 inet all
d17 1
a17 1
@@4 pass out quick on tun0 route-to tun1 inet from any to 192.168.1.1
d21 1
a21 1
@@5 pass out quick on tun0 route-to tun1 inet6 from any to fec0::1
d25 1
a25 1
@@6 block drop in on tun0 dup-to (tun1 192.168.1.1) inet proto tcp from any to any port = ftp
d29 1
a29 1
@@7 block drop in on tun0 dup-to (tun1 fec0::1) inet6 proto tcp from any to any port = ftp
d33 1
a33 1
@@8 pass in quick on tun0 route-to tun1 inet from 192.168.1.1 to 10.1.1.1
d37 1
a37 1
@@9 pass in quick on tun0 route-to tun1 inet6 from fec0::/64 to fec1::2
d41 1
a41 1
@@10 block drop in on tun0 reply-to (tun1 192.168.1.1) inet proto tcp from any to any port = ftp
d45 1
a45 1
@@11 block drop in on tun0 reply-to (tun1 fec0::1) inet6 proto tcp from any to any port = ftp
d49 1
a49 1
@@12 pass in quick on tun0 reply-to tun1 inet from 192.168.1.1 to 10.1.1.1
d53 1
a53 1
@@13 pass in quick on tun0 reply-to tun1 inet6 from fec0::/64 to fec1::2
d57 1
a57 1
@@14 pass in quick on tun0 dup-to (tun1 192.168.1.100) inet from 192.168.1.1 to 10.1.1.1
d61 1
a61 1
@@15 pass in quick on tun0 dup-to (tun1 fec1::2) inet6 from fec0::/64 to fec1::2
@


1.6
log
@regen; output formatting change
@
text
@d1 1
a1 1
@@0 pass in quick on enc0 fastroute all 
d5 1
a5 1
@@1 pass in quick on enc0 fastroute inet all 
d9 1
a9 1
@@2 pass in quick on enc0 fastroute inet6 all 
d13 1
a13 1
@@3 pass out quick on tun0 route-to tun1 inet all 
d17 1
a17 1
@@4 pass out quick on tun0 route-to tun1 inet from any to 192.168.1.1 
d21 1
a21 1
@@5 pass out quick on tun0 route-to tun1 inet6 from any to fec0::1 
d25 1
a25 1
@@6 block drop in on tun0 dup-to (tun1 192.168.1.1) inet proto tcp from any to any port = ftp 
d29 1
a29 1
@@7 block drop in on tun0 dup-to (tun1 fec0::1) inet6 proto tcp from any to any port = ftp 
d33 1
a33 1
@@8 pass in quick on tun0 route-to tun1 inet from 192.168.1.1 to 10.1.1.1 
d37 1
a37 1
@@9 pass in quick on tun0 route-to tun1 inet6 from fec0::/64 to fec1::2 
d41 1
a41 1
@@10 block drop in on tun0 reply-to (tun1 192.168.1.1) inet proto tcp from any to any port = ftp 
d45 1
a45 1
@@11 block drop in on tun0 reply-to (tun1 fec0::1) inet6 proto tcp from any to any port = ftp 
d49 1
a49 1
@@12 pass in quick on tun0 reply-to tun1 inet from 192.168.1.1 to 10.1.1.1 
d53 1
a53 1
@@13 pass in quick on tun0 reply-to tun1 inet6 from fec0::/64 to fec1::2 
d57 1
a57 1
@@14 pass in quick on tun0 dup-to (tun1 192.168.1.100) inet from 192.168.1.1 to 10.1.1.1 
d61 1
a61 1
@@15 pass in quick on tun0 dup-to (tun1 fec1::2) inet6 from fec0::/64 to fec1::2 
@


1.5
log
@regen
@
text
@d2 3
a4 4
[ Skip steps: i=3 d=3 p=6 sa=8 sp=end da=4 dp=6 ]
[ queue: qname= qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

d6 3
a8 4
[ Skip steps: i=3 d=3 p=6 sa=8 sp=end da=4 dp=6 ]
[ queue: qname= qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

d10 3
a12 4
[ Skip steps: p=6 sa=8 sp=end da=4 dp=6 ]
[ queue: qname= qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

d14 3
a16 4
[ Skip steps: i=end d=6 f=5 p=6 sa=8 sp=end dp=6 ]
[ queue: qname= qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

d18 3
a20 4
[ Skip steps: i=end d=6 p=6 sa=8 sp=end dp=6 ]
[ queue: qname= qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

d22 3
a24 4
[ Skip steps: i=end sa=8 sp=end ]
[ queue: qname= qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

d26 3
a28 4
[ Skip steps: i=end d=end p=8 sa=8 sp=end da=8 dp=8 ]
[ queue: qname= qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

d30 3
a32 4
[ Skip steps: i=end d=end sp=end ]
[ queue: qname= qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

d34 3
a36 4
[ Skip steps: i=end d=end p=10 sp=end dp=10 ]
[ queue: qname= qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

d38 3
a40 4
[ Skip steps: i=end d=end sp=end ]
[ queue: qname= qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

d42 3
a44 4
[ Skip steps: i=end d=end p=12 sa=12 sp=end da=12 dp=12 ]
[ queue: qname= qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

d46 3
a48 4
[ Skip steps: i=end d=end sp=end ]
[ queue: qname= qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

d50 3
a52 4
[ Skip steps: i=end d=end p=end sp=end dp=end ]
[ queue: qname= qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

d54 3
a56 4
[ Skip steps: i=end d=end p=end sp=end dp=end ]
[ queue: qname= qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

d58 3
a60 4
[ Skip steps: i=end d=end p=end sp=end dp=end ]
[ queue: qname= qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

d62 3
a64 4
[ Skip steps: i=end d=end f=end p=end sa=end sp=end da=end dp=end ]
[ queue: qname= qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

@


1.4
log
@regen after pfctl output change
@
text
@d3 1
a3 1
[ Queue: qname= qid=0 pqname= pqid=0 ]
d8 1
a8 1
[ Queue: qname= qid=0 pqname= pqid=0 ]
d13 1
a13 1
[ Queue: qname= qid=0 pqname= pqid=0 ]
d18 1
a18 1
[ Queue: qname= qid=0 pqname= pqid=0 ]
d23 1
a23 1
[ Queue: qname= qid=0 pqname= pqid=0 ]
d28 1
a28 1
[ Queue: qname= qid=0 pqname= pqid=0 ]
d33 1
a33 1
[ Queue: qname= qid=0 pqname= pqid=0 ]
d38 1
a38 1
[ Queue: qname= qid=0 pqname= pqid=0 ]
d43 1
a43 1
[ Queue: qname= qid=0 pqname= pqid=0 ]
d48 1
a48 1
[ Queue: qname= qid=0 pqname= pqid=0 ]
d53 1
a53 1
[ Queue: qname= qid=0 pqname= pqid=0 ]
d58 1
a58 1
[ Queue: qname= qid=0 pqname= pqid=0 ]
d63 1
a63 1
[ Queue: qname= qid=0 pqname= pqid=0 ]
d68 1
a68 1
[ Queue: qname= qid=0 pqname= pqid=0 ]
d73 1
a73 1
[ Queue: qname= qid=0 pqname= pqid=0 ]
d78 1
a78 1
[ Queue: qname= qid=0 pqname= pqid=0 ]
@


1.3
log
@Remove skip step for action (scrub vs. non-scrub), as scrub rules are
stored in a separate list now. Regress tests still pass after
sed "s/ a=end / /g", other skip steps are not affected.
@
text
@d3 1
d8 1
d13 1
d18 1
d23 1
d28 1
d33 1
d38 1
d43 1
d48 1
d53 1
d58 1
d63 1
d68 1
d73 1
d78 1
@


1.2
log
@Add "reply-to" keyword to regress test.
@
text
@d2 1
a2 1
[ Skip steps: a=end i=3 d=3 p=6 sa=8 sp=end da=4 dp=6 ]
d6 1
a6 1
[ Skip steps: a=end i=3 d=3 p=6 sa=8 sp=end da=4 dp=6 ]
d10 1
a10 1
[ Skip steps: a=end p=6 sa=8 sp=end da=4 dp=6 ]
d14 1
a14 1
[ Skip steps: a=end i=end d=6 f=5 p=6 sa=8 sp=end dp=6 ]
d18 1
a18 1
[ Skip steps: a=end i=end d=6 p=6 sa=8 sp=end dp=6 ]
d22 1
a22 1
[ Skip steps: a=end i=end sa=8 sp=end ]
d26 1
a26 1
[ Skip steps: a=end i=end d=end p=8 sa=8 sp=end da=8 dp=8 ]
d30 1
a30 1
[ Skip steps: a=end i=end d=end sp=end ]
d34 1
a34 1
[ Skip steps: a=end i=end d=end p=10 sp=end dp=10 ]
d38 1
a38 1
[ Skip steps: a=end i=end d=end sp=end ]
d42 1
a42 1
[ Skip steps: a=end i=end d=end p=12 sa=12 sp=end da=12 dp=12 ]
d46 1
a46 1
[ Skip steps: a=end i=end d=end sp=end ]
d50 1
a50 1
[ Skip steps: a=end i=end d=end p=end sp=end dp=end ]
d54 1
a54 1
[ Skip steps: a=end i=end d=end p=end sp=end dp=end ]
d58 1
a58 1
[ Skip steps: a=end i=end d=end p=end sp=end dp=end ]
d62 1
a62 1
[ Skip steps: a=end i=end d=end f=end p=end sa=end sp=end da=end dp=end ]
@


1.1
log
@Load regress rules into anchor regress:regress and compare the output
of pfctl -vvsr with expected output. This verifies that skip step
values don't change unexpectedly.
@
text
@d34 16
d53 1
a53 1
@@9 pass in quick on tun0 route-to tun1 inet6 from fec0::/64 to fec1::2 
d57 1
a57 1
@@10 pass in quick on tun0 dup-to (tun1 192.168.1.100) inet from 192.168.1.1 to 10.1.1.1 
d61 1
a61 1
@@11 pass in quick on tun0 dup-to (tun1 fec1::2) inet6 from fec0::/64 to fec1::2 
@

