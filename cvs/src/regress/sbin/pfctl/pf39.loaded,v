head	1.14;
access;
symbols
	OPENBSD_6_2:1.14.0.16
	OPENBSD_6_2_BASE:1.14
	OPENBSD_6_1:1.14.0.14
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.14.0.10
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.2
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.14.0.8
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.6
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.4
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.13.0.4
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.12.0.8
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.6
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.4
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.2
	OPENBSD_5_0:1.11.0.2
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.9.0.18
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.16
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.12
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.14
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.10
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.8
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.6
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.4
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.2
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.8.0.12
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.10
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.8
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.6
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.4
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5;
locks; strict;
comment	@# @;


1.14
date	2014.06.24.12.41.59;	author mikeb;	state Exp;
branches;
next	1.13;
commitid	4yzbAuHLtQcGSnXF;

1.13
date	2013.08.01.19.28.36;	author mikeb;	state Exp;
branches;
next	1.12;

1.12
date	2011.12.12.21.41.29;	author mikeb;	state Exp;
branches;
next	1.11;

1.11
date	2011.07.13.21.29.07;	author mcbride;	state Exp;
branches;
next	1.10;

1.10
date	2011.07.08.06.17.58;	author mcbride;	state Exp;
branches;
next	1.9;

1.9
date	2006.10.06.17.09.41;	author mcbride;	state Exp;
branches;
next	1.8;

1.8
date	2004.02.19.07.45.43;	author kjc;	state Exp;
branches;
next	1.7;

1.7
date	2003.07.29.20.28.34;	author cedric;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.18.20.27.01;	author henning;	state Exp;
branches;
next	1.5;

1.5
date	2003.03.11.14.04.57;	author henning;	state Exp;
branches;
next	1.4;

1.4
date	2003.03.08.14.30.27;	author henning;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.19.09.32.47;	author camield;	state Exp;
branches;
next	1.2;

1.2
date	2003.01.01.04.26.19;	author dhartmei;	state Exp;
branches;
next	1.1;

1.1
date	2002.12.18.16.49.54;	author dhartmei;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Fixup the test after new queue code has been added.

You can't load a ruleset with undefined queues into the anchor.
Change the test to use "set prio" since the whole purpose of it
is to test the flexibility of the pf.conf language, not a
particular queue feature.
@
text
@@@0 pass in log quick on lo0 inet proto tcp all tos 0x08 fragment label "blah"
  [ Skip steps: i=end d=end r=end f=end p=5 sa=end da=end sp=end dp=end ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
@@1 pass in log quick on lo0 inet proto tcp all user = 3 group = 32767 flags S/SA tos 0x08 set ( prio 2 ) allow-opts label "blah"
  [ Skip steps: i=end d=end r=end f=end p=5 sa=end da=end sp=end dp=end ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
@@2 pass in log quick on lo0 inet proto tcp all user = 3 group = 0 flags S/SA tos 0x08 set ( prio 2 ) allow-opts label "blah"
  [ Skip steps: i=end d=end r=end f=end p=5 sa=end da=end sp=end dp=end ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
@@3 pass in log quick on lo0 inet proto tcp all user = 0 group = 32767 flags S/SA tos 0x08 set ( prio 2 ) allow-opts label "blah"
  [ Skip steps: i=end d=end r=end f=end p=5 sa=end da=end sp=end dp=end ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
@@4 pass in log quick on lo0 inet proto tcp all user = 0 group = 0 flags S/SA tos 0x08 set ( prio 2 ) allow-opts label "blah"
  [ Skip steps: i=end d=end r=end f=end sa=end da=end sp=end dp=end ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
@@5 pass in log quick on lo0 inet proto icmp all icmp-type echorep code 0 set ( prio 2 ) label "blah"
  [ Skip steps: i=end d=end r=end f=end sa=end da=end sp=end dp=end ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
@@6 pass in log quick on lo0 inet proto tcp all flags S/SA
  [ Skip steps: i=end d=end r=end f=end p=8 sa=end da=end sp=end dp=end ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
@@7 pass in log quick on lo0 inet proto tcp all flags S/SA tos 0x08 set ( prio 2 ) label "blah"
  [ Skip steps: i=end d=end r=end f=end sa=end da=end sp=end dp=end ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
@@8 pass in log quick on lo0 inet proto icmp all icmp-type echorep code 0 tos 0x08
  [ Skip steps: i=end d=end r=end f=end sa=end da=end sp=end dp=end ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
@@9 pass in log quick on lo0 inet proto tcp all flags S/SA allow-opts
  [ Skip steps: i=end d=end r=end f=end p=end sa=end da=end sp=end dp=end ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
@


1.13
log
@more set queue fallout fixups
@
text
@d5 1
a5 1
@@1 pass in log quick on lo0 inet proto tcp all user = 3 group = 32767 flags S/SA tos 0x08 set ( queue blah ) allow-opts label "blah"
d7 1
a7 1
  [ queue: qname=blah qid=1 pqname= pqid=1 ]
d9 1
a9 1
@@2 pass in log quick on lo0 inet proto tcp all user = 3 group = 0 flags S/SA tos 0x08 set ( queue blah ) allow-opts label "blah"
d11 1
a11 1
  [ queue: qname=blah qid=1 pqname= pqid=1 ]
d13 1
a13 1
@@3 pass in log quick on lo0 inet proto tcp all user = 0 group = 32767 flags S/SA tos 0x08 set ( queue blah ) allow-opts label "blah"
d15 1
a15 1
  [ queue: qname=blah qid=1 pqname= pqid=1 ]
d17 1
a17 1
@@4 pass in log quick on lo0 inet proto tcp all user = 0 group = 0 flags S/SA tos 0x08 set ( queue blah ) allow-opts label "blah"
d19 1
a19 1
  [ queue: qname=blah qid=1 pqname= pqid=1 ]
d21 1
a21 1
@@5 pass in log quick on lo0 inet proto icmp all icmp-type echorep code 0 set ( queue blah ) label "blah"
d23 1
a23 1
  [ queue: qname=blah qid=1 pqname= pqid=1 ]
d29 1
a29 1
@@7 pass in log quick on lo0 inet proto tcp all flags S/SA tos 0x08 set ( queue blah ) label "blah"
d31 1
a31 1
  [ queue: qname=blah qid=1 pqname= pqid=1 ]
@


1.12
log
@fixup regression tests wrt skip steps (fixed in pfctl.c rev1.305);
ok henning mcbride (a while back)
@
text
@d5 1
a5 1
@@1 pass in log quick on lo0 inet proto tcp all user = 3 group = 32767 flags S/SA tos 0x08 allow-opts label "blah" queue blah
d9 1
a9 1
@@2 pass in log quick on lo0 inet proto tcp all user = 3 group = 0 flags S/SA tos 0x08 allow-opts label "blah" queue blah
d13 1
a13 1
@@3 pass in log quick on lo0 inet proto tcp all user = 0 group = 32767 flags S/SA tos 0x08 allow-opts label "blah" queue blah
d17 1
a17 1
@@4 pass in log quick on lo0 inet proto tcp all user = 0 group = 0 flags S/SA tos 0x08 allow-opts label "blah" queue blah
d21 1
a21 1
@@5 pass in log quick on lo0 inet proto icmp all icmp-type echorep code 0 label "blah" queue blah
d29 1
a29 1
@@7 pass in log quick on lo0 inet proto tcp all flags S/SA tos 0x08 label "blah" queue blah
@


1.11
log
@Must now specify correct protocol (tcp, udp) for user and group attributes.
@
text
@d2 1
a2 1
  [ Skip steps: i=end r=end d=end f=end p=5 sa=end da=end sp=end dp=end ]
d6 1
a6 1
  [ Skip steps: i=end r=end d=end f=end p=5 sa=end da=end sp=end dp=end ]
d10 1
a10 1
  [ Skip steps: i=end r=end d=end f=end p=5 sa=end da=end sp=end dp=end ]
d14 1
a14 1
  [ Skip steps: i=end r=end d=end f=end p=5 sa=end da=end sp=end dp=end ]
d18 1
a18 1
  [ Skip steps: i=end r=end d=end f=end sa=end da=end sp=end dp=end ]
d22 1
a22 1
  [ Skip steps: i=end r=end d=end f=end sa=end da=end sp=end dp=end ]
d26 1
a26 1
  [ Skip steps: i=end r=end d=end f=end p=8 sa=end da=end sp=end dp=end ]
d30 1
a30 1
  [ Skip steps: i=end r=end d=end f=end sa=end da=end sp=end dp=end ]
d34 1
a34 1
  [ Skip steps: i=end r=end d=end f=end sa=end da=end sp=end dp=end ]
d38 1
a38 1
  [ Skip steps: i=end r=end d=end f=end p=end sa=end da=end sp=end dp=end ]
@


1.10
log
@Update regress tests for the following changes:
- if_addr RB_TREE (Address sort differently on an interface)
- skip steps changes
	- RDOMAIN
	- reordering of address/port tests
- fastroute is gone
- keep state is no longer printed by default
- lo0 now has link-local scope address in addition to ::1
@
text
@d2 1
a2 1
  [ Skip steps: i=end r=end d=end f=end sa=end da=end sp=end dp=end ]
d5 1
a5 1
@@1 pass in log quick on lo0 inet proto icmp all user = 3 group = 32767 icmp-type echorep code 0 tos 0x08 allow-opts label "blah" queue blah
d9 1
a9 1
@@2 pass in log quick on lo0 inet proto icmp all user = 3 group = 0 icmp-type echorep code 0 tos 0x08 allow-opts label "blah" queue blah
d13 1
a13 1
@@3 pass in log quick on lo0 inet proto icmp all user = 0 group = 32767 icmp-type echorep code 0 tos 0x08 allow-opts label "blah" queue blah
d17 5
a21 1
@@4 pass in log quick on lo0 inet proto icmp all user = 0 group = 0 icmp-type echorep code 0 tos 0x08 allow-opts label "blah" queue blah
d25 2
a26 2
@@5 pass in log quick on lo0 inet proto tcp all flags S/SA
  [ Skip steps: i=end r=end d=end f=end p=7 sa=end da=end sp=end dp=end ]
d29 1
a29 1
@@6 pass in log quick on lo0 inet proto tcp all flags S/SA tos 0x08 label "blah" queue blah
d33 1
a33 1
@@7 pass in log quick on lo0 inet proto icmp all icmp-type echorep code 0 tos 0x08
d37 1
a37 1
@@8 pass in log quick on lo0 inet proto tcp all flags S/SA allow-opts
@


1.9
log
@Handle default 'flags S/SA keep state', 'no state' and 'flags any'.
@
text
@d1 2
a2 2
@@0 pass in log quick on lo0 inet proto tcp all tos 0x08 keep state fragment label "blah"
  [ Skip steps: i=end d=end f=end sa=end sp=end da=end dp=end ]
d5 2
a6 2
@@1 pass in log quick on lo0 inet proto icmp all user = 3 group = 32767 icmp-type echorep code 0 tos 0x08 keep state allow-opts label "blah" queue blah
  [ Skip steps: i=end d=end f=end p=5 sa=end sp=end da=end dp=end ]
d9 2
a10 2
@@2 pass in log quick on lo0 inet proto icmp all user = 3 group = 0 icmp-type echorep code 0 tos 0x08 keep state allow-opts label "blah" queue blah
  [ Skip steps: i=end d=end f=end p=5 sa=end sp=end da=end dp=end ]
d13 2
a14 2
@@3 pass in log quick on lo0 inet proto icmp all user = 0 group = 32767 icmp-type echorep code 0 tos 0x08 keep state allow-opts label "blah" queue blah
  [ Skip steps: i=end d=end f=end p=5 sa=end sp=end da=end dp=end ]
d17 2
a18 2
@@4 pass in log quick on lo0 inet proto icmp all user = 0 group = 0 icmp-type echorep code 0 tos 0x08 keep state allow-opts label "blah" queue blah
  [ Skip steps: i=end d=end f=end sa=end sp=end da=end dp=end ]
d21 2
a22 2
@@5 pass in log quick on lo0 inet proto tcp all flags S/SA keep state
  [ Skip steps: i=end d=end f=end p=7 sa=end sp=end da=end dp=end ]
d25 2
a26 2
@@6 pass in log quick on lo0 inet proto tcp all flags S/SA tos 0x08 keep state label "blah" queue blah
  [ Skip steps: i=end d=end f=end sa=end sp=end da=end dp=end ]
d29 2
a30 2
@@7 pass in log quick on lo0 inet proto icmp all icmp-type echorep code 0 tos 0x08 keep state
  [ Skip steps: i=end d=end f=end sa=end sp=end da=end dp=end ]
d33 2
a34 2
@@8 pass in log quick on lo0 inet proto tcp all flags S/SA keep state allow-opts
  [ Skip steps: i=end d=end f=end p=end sa=end sp=end da=end dp=end ]
@


1.8
log
@regen; qid change.
@
text
@d21 1
a21 1
@@5 pass in log quick on lo0 inet proto tcp all keep state
d25 1
a25 1
@@6 pass in log quick on lo0 inet proto tcp all tos 0x08 keep state label "blah" queue blah
d29 1
a29 1
@@7 pass in log quick on lo0 inet proto icmp all icmp-type echorep code 0 tos 0x08
d33 1
a33 1
@@8 pass in log quick on lo0 inet proto tcp all flags S/SA allow-opts
@


1.7
log
@Big Sync
@
text
@d7 1
a7 1
  [ queue: qname=blah qid=0 pqname= pqid=0 ]
d11 1
a11 1
  [ queue: qname=blah qid=0 pqname= pqid=0 ]
d15 1
a15 1
  [ queue: qname=blah qid=0 pqname= pqid=0 ]
d19 1
a19 1
  [ queue: qname=blah qid=0 pqname= pqid=0 ]
d27 1
a27 1
  [ queue: qname=blah qid=0 pqname= pqid=0 ]
@


1.6
log
@regen; output formatting change
@
text
@d1 1
a1 1
@@0 pass in log quick on lo0 inet proto tcp all tos 0x08 keep state fragment label "blah" 
d5 1
a5 1
@@1 pass in log quick on lo0 inet proto icmp all user = 3 group = 32767 icmp-type echorep code 0 tos 0x08 keep state allow-opts label "blah" queue blah 
d9 1
a9 1
@@2 pass in log quick on lo0 inet proto icmp all user = 3 group = 0 icmp-type echorep code 0 tos 0x08 keep state allow-opts label "blah" queue blah 
d13 1
a13 1
@@3 pass in log quick on lo0 inet proto icmp all user = 0 group = 32767 icmp-type echorep code 0 tos 0x08 keep state allow-opts label "blah" queue blah 
d17 1
a17 1
@@4 pass in log quick on lo0 inet proto icmp all user = 0 group = 0 icmp-type echorep code 0 tos 0x08 keep state allow-opts label "blah" queue blah 
d21 1
a21 1
@@5 pass in log quick on lo0 inet proto tcp all keep state 
d25 1
a25 1
@@6 pass in log quick on lo0 inet proto tcp all tos 0x08 keep state label "blah" queue blah 
d29 1
a29 1
@@7 pass in log quick on lo0 inet proto icmp all icmp-type echorep code 0 tos 0x08 
d33 1
a33 1
@@8 pass in log quick on lo0 inet proto tcp all flags S/SA allow-opts 
@


1.5
log
@regen
@
text
@d2 3
a4 4
[ Skip steps: i=end d=end f=end sa=end sp=end da=end dp=end ]
[ queue: qname= qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

d6 3
a8 4
[ Skip steps: i=end d=end f=end p=5 sa=end sp=end da=end dp=end ]
[ queue: qname=blah qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

d10 3
a12 4
[ Skip steps: i=end d=end f=end p=5 sa=end sp=end da=end dp=end ]
[ queue: qname=blah qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

d14 3
a16 4
[ Skip steps: i=end d=end f=end p=5 sa=end sp=end da=end dp=end ]
[ queue: qname=blah qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

d18 3
a20 4
[ Skip steps: i=end d=end f=end sa=end sp=end da=end dp=end ]
[ queue: qname=blah qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

d22 3
a24 4
[ Skip steps: i=end d=end f=end p=7 sa=end sp=end da=end dp=end ]
[ queue: qname= qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

d26 3
a28 4
[ Skip steps: i=end d=end f=end sa=end sp=end da=end dp=end ]
[ queue: qname=blah qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

d30 3
a32 4
[ Skip steps: i=end d=end f=end sa=end sp=end da=end dp=end ]
[ queue: qname= qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

d34 3
a36 4
[ Skip steps: i=end d=end f=end p=end sa=end sp=end da=end dp=end ]
[ queue: qname= qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

@


1.4
log
@regen after pfctl output change
@
text
@d3 1
a3 1
[ Queue: qname= qid=0 pqname= pqid=0 ]
d8 1
a8 1
[ Queue: qname=blah qid=0 pqname= pqid=0 ]
d13 1
a13 1
[ Queue: qname=blah qid=0 pqname= pqid=0 ]
d18 1
a18 1
[ Queue: qname=blah qid=0 pqname= pqid=0 ]
d23 1
a23 1
[ Queue: qname=blah qid=0 pqname= pqid=0 ]
d28 1
a28 1
[ Queue: qname= qid=0 pqname= pqid=0 ]
d33 1
a33 1
[ Queue: qname=blah qid=0 pqname= pqid=0 ]
d38 1
a38 1
[ Queue: qname= qid=0 pqname= pqid=0 ]
d43 1
a43 1
[ Queue: qname= qid=0 pqname= pqid=0 ]
@


1.3
log
@Labels are quoted in rule output now.
@
text
@d3 1
d8 1
d13 1
d18 1
d23 1
d28 1
d33 1
d38 1
d43 1
@


1.2
log
@Remove skip step for action (scrub vs. non-scrub), as scrub rules are
stored in a separate list now. Regress tests still pass after
sed "s/ a=end / /g", other skip steps are not affected.
@
text
@d1 1
a1 1
@@0 pass in log quick on lo0 inet proto tcp all tos 0x08 keep state fragment label blah 
d5 1
a5 1
@@1 pass in log quick on lo0 inet proto icmp all user = 3 group = 32767 icmp-type echorep code 0 tos 0x08 keep state allow-opts label blah queue blah 
d9 1
a9 1
@@2 pass in log quick on lo0 inet proto icmp all user = 3 group = 0 icmp-type echorep code 0 tos 0x08 keep state allow-opts label blah queue blah 
d13 1
a13 1
@@3 pass in log quick on lo0 inet proto icmp all user = 0 group = 32767 icmp-type echorep code 0 tos 0x08 keep state allow-opts label blah queue blah 
d17 1
a17 1
@@4 pass in log quick on lo0 inet proto icmp all user = 0 group = 0 icmp-type echorep code 0 tos 0x08 keep state allow-opts label blah queue blah 
d25 1
a25 1
@@6 pass in log quick on lo0 inet proto tcp all tos 0x08 keep state label blah queue blah 
@


1.1
log
@Load regress rules into anchor regress:regress and compare the output
of pfctl -vvsr with expected output. This verifies that skip step
values don't change unexpectedly.
@
text
@d2 1
a2 1
[ Skip steps: a=end i=end d=end f=end sa=end sp=end da=end dp=end ]
d6 1
a6 1
[ Skip steps: a=end i=end d=end f=end p=5 sa=end sp=end da=end dp=end ]
d10 1
a10 1
[ Skip steps: a=end i=end d=end f=end p=5 sa=end sp=end da=end dp=end ]
d14 1
a14 1
[ Skip steps: a=end i=end d=end f=end p=5 sa=end sp=end da=end dp=end ]
d18 1
a18 1
[ Skip steps: a=end i=end d=end f=end sa=end sp=end da=end dp=end ]
d22 1
a22 1
[ Skip steps: a=end i=end d=end f=end p=7 sa=end sp=end da=end dp=end ]
d26 1
a26 1
[ Skip steps: a=end i=end d=end f=end sa=end sp=end da=end dp=end ]
d30 1
a30 1
[ Skip steps: a=end i=end d=end f=end sa=end sp=end da=end dp=end ]
d34 1
a34 1
[ Skip steps: a=end i=end d=end f=end p=end sa=end sp=end da=end dp=end ]
@

