head	1.16;
access;
symbols
	OPENBSD_6_2:1.16.0.22
	OPENBSD_6_2_BASE:1.16
	OPENBSD_6_1:1.16.0.24
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.16.0.20
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.10
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.16.0.18
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.16
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.14
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.12
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.8
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.6
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.4
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.2
	OPENBSD_5_0:1.15.0.2
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.14.0.18
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.16
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.12
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.14
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.10
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.8
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.6
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.14.0.4
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.14.0.2
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.13.0.12
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.10
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.8
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.6
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.4
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.13.0.2
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.10.0.2
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4;
locks; strict;
comment	@# @;


1.16
date	2011.11.27.10.33.37;	author henning;	state Exp;
branches;
next	1.15;

1.15
date	2011.07.08.06.17.58;	author mcbride;	state Exp;
branches;
next	1.14;

1.14
date	2006.10.06.17.09.41;	author mcbride;	state Exp;
branches;
next	1.13;

1.13
date	2004.02.04.18.37.56;	author mcbride;	state Exp;
branches;
next	1.12;

1.12
date	2003.12.05.16.55.40;	author henning;	state Exp;
branches;
next	1.11;

1.11
date	2003.07.29.20.28.34;	author cedric;	state Exp;
branches;
next	1.10;

1.10
date	2002.12.06.11.09.48;	author henning;	state Exp;
branches;
next	1.9;

1.9
date	2002.12.05.14.13.37;	author henning;	state Exp;
branches;
next	1.8;

1.8
date	2002.10.07.13.43.02;	author henning;	state Exp;
branches;
next	1.7;

1.7
date	2002.04.24.18.10.25;	author dhartmei;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.27.18.23.39;	author dhartmei;	state Exp;
branches;
next	1.5;

1.5
date	2001.11.13.07.01.03;	author dhartmei;	state Exp;
branches;
next	1.4;

1.4
date	2001.09.15.23.25.23;	author wilfried;	state Exp;
branches;
next	1.3;

1.3
date	2001.09.15.21.53.09;	author dhartmei;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.03.08.16.01;	author markus;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.25.21.54.26;	author frantzen;	state Exp;
branches;
next	;


desc
@@


1.16
log
@adjust for port numbers instead of names by default
From: Lawrence Teo <lteo at devio at us>
@
text
@block drop out log on tun1000000 all
block drop in log on tun1000000 all
block return-rst out log on tun1000000 proto tcp all
block return-rst in log on tun1000000 proto tcp all
block return-icmp(port-unr, port-unr) out log on tun1000000 proto udp all
block return-icmp(port-unr, port-unr) in log on tun1000000 proto udp all
block drop out log quick on tun1000000 inet from ! 157.161.48.183 to any
block drop in quick on tun1000000 inet from any to 255.255.255.255
block drop in log quick on tun1000000 inet from 10.0.0.0/8 to any
block drop in log quick on tun1000000 inet from 172.16.0.0/12 to any
block drop in log quick on tun1000000 inet from 192.168.0.0/16 to any
block drop in log quick on tun1000000 inet from 255.255.255.255 to any
pass out on tun1000000 inet proto icmp all icmp-type echoreq code 0
pass in on tun1000000 inet proto icmp all icmp-type echoreq code 0
pass out on tun1000000 proto udp all
pass in on tun1000000 proto udp from any to any port = 53
pass out on tun1000000 proto tcp all flags S/SA modulate state
pass in on tun1000000 proto tcp all flags S/SA modulate state
pass in on tun1000000 proto udp all
pass in on tun1000000 proto icmp all
pass in on tun1000000 proto udp all
pass in on tun1000000 proto tcp all flags S/SA synproxy state
pass in on tun1000000 proto icmp all
pass in on tun1000000 proto tcp from any to any port = 22 flags S/SA modulate state
pass in on tun1000000 proto tcp from any to any port = 25 flags S/SA modulate state
pass in on tun1000000 proto tcp from any to any port = 53 flags S/SA modulate state
pass in on tun1000000 proto tcp from any to any port = 113 flags S/SA modulate state
@


1.15
log
@Update regress tests for the following changes:
- if_addr RB_TREE (Address sort differently on an interface)
- skip steps changes
	- RDOMAIN
	- reordering of address/port tests
- fastroute is gone
- keep state is no longer printed by default
- lo0 now has link-local scope address in addition to ::1
@
text
@d16 1
a16 1
pass in on tun1000000 proto udp from any to any port = domain
d24 4
a27 4
pass in on tun1000000 proto tcp from any to any port = ssh flags S/SA modulate state
pass in on tun1000000 proto tcp from any to any port = smtp flags S/SA modulate state
pass in on tun1000000 proto tcp from any to any port = domain flags S/SA modulate state
pass in on tun1000000 proto tcp from any to any port = auth flags S/SA modulate state
@


1.14
log
@Handle default 'flags S/SA keep state', 'no state' and 'flags any'.
@
text
@d13 4
a16 4
pass out on tun1000000 inet proto icmp all icmp-type echoreq code 0 keep state
pass in on tun1000000 inet proto icmp all icmp-type echoreq code 0 keep state
pass out on tun1000000 proto udp all keep state
pass in on tun1000000 proto udp from any to any port = domain keep state
d19 3
a21 3
pass in on tun1000000 proto udp all keep state
pass in on tun1000000 proto icmp all keep state
pass in on tun1000000 proto udp all keep state
d23 1
a23 1
pass in on tun1000000 proto icmp all keep state
@


1.13
log
@Test 'pass proto { tcp udp icmp } modulate state' type rules
@
text
@d17 2
a18 2
pass out on tun1000000 proto tcp all modulate state
pass in on tun1000000 proto tcp all modulate state
d24 4
a27 4
pass in on tun1000000 proto tcp from any to any port = ssh modulate state
pass in on tun1000000 proto tcp from any to any port = smtp modulate state
pass in on tun1000000 proto tcp from any to any port = domain modulate state
pass in on tun1000000 proto tcp from any to any port = auth modulate state
@


1.12
log
@lo1, tun0, tun1 don't exist any more. thus, create the interfaces we need for
regress purposes before starting and destroy them afterwards.
lo1 -> lo1000000
tun0 -> tun1000000
tun1 -> tun1000001

ok markus@@
@
text
@d18 6
@


1.11
log
@Big Sync
@
text
@d1 21
a21 21
block drop out log on tun0 all
block drop in log on tun0 all
block return-rst out log on tun0 proto tcp all
block return-rst in log on tun0 proto tcp all
block return-icmp(port-unr, port-unr) out log on tun0 proto udp all
block return-icmp(port-unr, port-unr) in log on tun0 proto udp all
block drop out log quick on tun0 inet from ! 157.161.48.183 to any
block drop in quick on tun0 inet from any to 255.255.255.255
block drop in log quick on tun0 inet from 10.0.0.0/8 to any
block drop in log quick on tun0 inet from 172.16.0.0/12 to any
block drop in log quick on tun0 inet from 192.168.0.0/16 to any
block drop in log quick on tun0 inet from 255.255.255.255 to any
pass out on tun0 inet proto icmp all icmp-type echoreq code 0 keep state
pass in on tun0 inet proto icmp all icmp-type echoreq code 0 keep state
pass out on tun0 proto udp all keep state
pass in on tun0 proto udp from any to any port = domain keep state
pass out on tun0 proto tcp all modulate state
pass in on tun0 proto tcp from any to any port = ssh modulate state
pass in on tun0 proto tcp from any to any port = smtp modulate state
pass in on tun0 proto tcp from any to any port = domain modulate state
pass in on tun0 proto tcp from any to any port = auth modulate state
@


1.10
log
@block -> block drop
@
text
@d1 21
a21 21
block drop out log on tun0 all 
block drop in log on tun0 all 
block return-rst out log on tun0 proto tcp all 
block return-rst in log on tun0 proto tcp all 
block return-icmp(port-unr, port-unr) out log on tun0 proto udp all 
block return-icmp(port-unr, port-unr) in log on tun0 proto udp all 
block drop out log quick on tun0 inet from ! 157.161.48.183 to any 
block drop in quick on tun0 inet from any to 255.255.255.255 
block drop in log quick on tun0 inet from 10.0.0.0/8 to any 
block drop in log quick on tun0 inet from 172.16.0.0/12 to any 
block drop in log quick on tun0 inet from 192.168.0.0/16 to any 
block drop in log quick on tun0 inet from 255.255.255.255 to any 
pass out on tun0 inet proto icmp all icmp-type echoreq code 0 keep state 
pass in on tun0 inet proto icmp all icmp-type echoreq code 0 keep state 
pass out on tun0 proto udp all keep state 
pass in on tun0 proto udp from any to any port = domain keep state 
pass out on tun0 proto tcp all modulate state 
pass in on tun0 proto tcp from any to any port = ssh modulate state 
pass in on tun0 proto tcp from any to any port = smtp modulate state 
pass in on tun0 proto tcp from any to any port = domain modulate state 
pass in on tun0 proto tcp from any to any port = auth modulate state 
@


1.9
log
@no more rule numbers in output
@
text
@d1 2
a2 2
block out log on tun0 all 
block in log on tun0 all 
d7 6
a12 6
block out log quick on tun0 inet from ! 157.161.48.183 to any 
block in quick on tun0 inet from any to 255.255.255.255 
block in log quick on tun0 inet from 10.0.0.0/8 to any 
block in log quick on tun0 inet from 172.16.0.0/12 to any 
block in log quick on tun0 inet from 192.168.0.0/16 to any 
block in log quick on tun0 inet from 255.255.255.255 to any 
@


1.8
log
@adjust for new return-icmp
@
text
@d1 21
a21 21
@@0 block out log on tun0 all 
@@1 block in log on tun0 all 
@@2 block return-rst out log on tun0 proto tcp all 
@@3 block return-rst in log on tun0 proto tcp all 
@@4 block return-icmp(port-unr, port-unr) out log on tun0 proto udp all 
@@5 block return-icmp(port-unr, port-unr) in log on tun0 proto udp all 
@@6 block out log quick on tun0 inet from ! 157.161.48.183 to any 
@@7 block in quick on tun0 inet from any to 255.255.255.255 
@@8 block in log quick on tun0 inet from 10.0.0.0/8 to any 
@@9 block in log quick on tun0 inet from 172.16.0.0/12 to any 
@@10 block in log quick on tun0 inet from 192.168.0.0/16 to any 
@@11 block in log quick on tun0 inet from 255.255.255.255 to any 
@@12 pass out on tun0 inet proto icmp all icmp-type echoreq code 0 keep state 
@@13 pass in on tun0 inet proto icmp all icmp-type echoreq code 0 keep state 
@@14 pass out on tun0 proto udp all keep state 
@@15 pass in on tun0 proto udp from any to any port = domain keep state 
@@16 pass out on tun0 proto tcp all modulate state 
@@17 pass in on tun0 proto tcp from any to any port = ssh modulate state 
@@18 pass in on tun0 proto tcp from any to any port = smtp modulate state 
@@19 pass in on tun0 proto tcp from any to any port = domain modulate state 
@@20 pass in on tun0 proto tcp from any to any port = auth modulate state 
@


1.7
log
@Add dynamic (in-kernel) interface name -> address translation. Instead of
using just the interface name instead of an address and reloading the rule
set whenever the interface changes its address, the interface name can be
put in parentheses, and the kernel will keep track of changes and update
rules. There is no additional cost for evaluating rules (per packet),
the cost occurs when an interface changes address (and the rules are
traversed and updated where necessary).
@
text
@d5 2
a6 2
@@4 block return-icmp out log on tun0 proto udp all 
@@5 block return-icmp in log on tun0 proto udp all 
@


1.6
log
@And adjust regress tests to match the rule number output.
@
text
@d7 2
a8 2
@@6 block out log quick on tun0 inet from ! 157.161.48.183/32 to any 
@@7 block in quick on tun0 inet from any to 255.255.255.255/32 
d12 1
a12 1
@@11 block in log quick on tun0 inet from 255.255.255.255/32 to any 
@


1.5
log
@Use more common interface names like lo0, tun0, enc0 for regress tests,
so they run anywhere. From jason@@.
@
text
@d2 20
a21 20
@@0 block in log on tun0 all 
@@0 block return-rst out log on tun0 proto tcp all 
@@0 block return-rst in log on tun0 proto tcp all 
@@0 block return-icmp out log on tun0 proto udp all 
@@0 block return-icmp in log on tun0 proto udp all 
@@0 block out log quick on tun0 inet from ! 157.161.48.183/32 to any 
@@0 block in quick on tun0 inet from any to 255.255.255.255/32 
@@0 block in log quick on tun0 inet from 10.0.0.0/8 to any 
@@0 block in log quick on tun0 inet from 172.16.0.0/12 to any 
@@0 block in log quick on tun0 inet from 192.168.0.0/16 to any 
@@0 block in log quick on tun0 inet from 255.255.255.255/32 to any 
@@0 pass out on tun0 inet proto icmp all icmp-type echoreq code 0 keep state 
@@0 pass in on tun0 inet proto icmp all icmp-type echoreq code 0 keep state 
@@0 pass out on tun0 proto udp all keep state 
@@0 pass in on tun0 proto udp from any to any port = domain keep state 
@@0 pass out on tun0 proto tcp all modulate state 
@@0 pass in on tun0 proto tcp from any to any port = ssh modulate state 
@@0 pass in on tun0 proto tcp from any to any port = smtp modulate state 
@@0 pass in on tun0 proto tcp from any to any port = domain modulate state 
@@0 pass in on tun0 proto tcp from any to any port = auth modulate state 
@


1.4
log
@return-icmp / icmp-type tests, ok dhartmei@@
@
text
@d1 21
a21 21
@@0 block out log on kue0 all 
@@0 block in log on kue0 all 
@@0 block return-rst out log on kue0 proto tcp all 
@@0 block return-rst in log on kue0 proto tcp all 
@@0 block return-icmp out log on kue0 proto udp all 
@@0 block return-icmp in log on kue0 proto udp all 
@@0 block out log quick on kue0 inet from ! 157.161.48.183/32 to any 
@@0 block in quick on kue0 inet from any to 255.255.255.255/32 
@@0 block in log quick on kue0 inet from 10.0.0.0/8 to any 
@@0 block in log quick on kue0 inet from 172.16.0.0/12 to any 
@@0 block in log quick on kue0 inet from 192.168.0.0/16 to any 
@@0 block in log quick on kue0 inet from 255.255.255.255/32 to any 
@@0 pass out on kue0 inet proto icmp all icmp-type echoreq code 0 keep state 
@@0 pass in on kue0 inet proto icmp all icmp-type echoreq code 0 keep state 
@@0 pass out on kue0 proto udp all keep state 
@@0 pass in on kue0 proto udp from any to any port = domain keep state 
@@0 pass out on kue0 proto tcp all modulate state 
@@0 pass in on kue0 proto tcp from any to any port = ssh modulate state 
@@0 pass in on kue0 proto tcp from any to any port = smtp modulate state 
@@0 pass in on kue0 proto tcp from any to any port = domain modulate state 
@@0 pass in on kue0 proto tcp from any to any port = auth modulate state 
@


1.3
log
@Update regress tests. Some input syntax has changed (inet/inet6) as well
as some output format (netmasks, inet/inet6, return-icmp).
@
text
@d5 2
a6 2
@@0 block return-icmp(3,3) out log on kue0 proto udp all 
@@0 block return-icmp(3,3) in log on kue0 proto udp all 
@


1.2
log
@sync with output format changes (pfctl)
@
text
@d5 10
a14 10
@@0 block return-icmp out log on kue0 proto udp all 
@@0 block return-icmp in log on kue0 proto udp all 
@@0 block out log quick on kue0 from ! 157.161.48.183 to any 
@@0 block in quick on kue0 from any to 255.255.255.255 
@@0 block in log quick on kue0 from 10.0.0.0/255.0.0.0 to any 
@@0 block in log quick on kue0 from 172.16.0.0/255.240.0.0 to any 
@@0 block in log quick on kue0 from 192.168.0.0/255.255.0.0 to any 
@@0 block in log quick on kue0 from 255.255.255.255 to any 
@@0 pass out on kue0 proto icmp all icmp-type echoreq code 0 keep state 
@@0 pass in on kue0 proto icmp all icmp-type echoreq code 0 keep state 
@


1.1
log
@PF ISN randomization.  Or in trekkie techno-babble, ISN phase modulation.
@
text
@d1 21
a21 21
@@1 block out log on kue0 all 
@@1 block in log on kue0 all 
@@1 block return-rst out log on kue0 proto tcp all 
@@1 block return-rst in log on kue0 proto tcp all 
@@1 block return-icmp out log on kue0 proto udp all 
@@1 block return-icmp in log on kue0 proto udp all 
@@1 block out log quick on kue0 from ! 157.161.48.183 to any 
@@1 block in quick on kue0 from any to 255.255.255.255 
@@1 block in log quick on kue0 from 10.0.0.0/255.0.0.0 to any 
@@1 block in log quick on kue0 from 172.16.0.0/255.240.0.0 to any 
@@1 block in log quick on kue0 from 192.168.0.0/255.255.0.0 to any 
@@1 block in log quick on kue0 from 255.255.255.255 to any 
@@1 pass out on kue0 proto icmp all icmp-type echoreq code 0 keep state 
@@1 pass in on kue0 proto icmp all icmp-type echoreq code 0 keep state 
@@1 pass out on kue0 proto udp all keep state 
@@1 pass in on kue0 proto udp from any to any port = domain keep state 
@@1 pass out on kue0 proto tcp all modulate state 
@@1 pass in on kue0 proto tcp from any to any port = ssh modulate state 
@@1 pass in on kue0 proto tcp from any to any port = smtp modulate state 
@@1 pass in on kue0 proto tcp from any to any port = domain modulate state 
@@1 pass in on kue0 proto tcp from any to any port = auth modulate state 
@

