head	1.6;
access;
symbols
	OPENBSD_5_5:1.5.0.4
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.4.0.38
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.36
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.34
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.32
	OPENBSD_5_0:1.4.0.30
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.28
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.26
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.22
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.24
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.20
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.18
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.16
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.14
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.12
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.10
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.8
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.6
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.4
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.3.0.2
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.2.0.4
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.2
	OPENBSD_3_3_BASE:1.2;
locks; strict;
comment	@# @;


1.6
date	2014.04.18.10.48.23;	author henning;	state dead;
branches;
next	1.5;

1.5
date	2013.10.12.12.18.52;	author henning;	state Exp;
branches;
next	1.4;

1.4
date	2004.05.03.12.56.02;	author kjc;	state Exp;
branches;
next	1.3;

1.3
date	2003.12.05.16.55.40;	author henning;	state Exp;
branches;
next	1.2;

1.2
date	2003.03.11.15.10.31;	author henning;	state Exp;
branches;
next	1.1;

1.1
date	2003.03.11.11.14.59;	author henning;	state Exp;
branches;
next	;


desc
@@


1.6
log
@stop testing altq stuffz
how many tests I wrote back then... (of which the majority is pointless)
@
text
@# more complicated case to provoke queue id assignment errors:
# -two same named queues must have same qid on all interfaces
# -two differently named queues must not share a qid, even on different ifs

altq on lo0 tbrsize 1824 bandwidth 10Mb cbq queue { eins zwei drei }
altq on tun1000000 tbrsize 1824 bandwidth 128000b cbq queue { vier zwei fuenf }
oldqueue eins bandwidth 10% cbq(default)
oldqueue zwei bandwidth 60% { sub2 sub3 }
oldqueue  sub2 bandwidth 50%
oldqueue  sub3 bandwidth 50%
oldqueue drei bandwidth 30% subseven
oldqueue vier bandwidth 25% cbq(default)
oldqueue fuenf bandwidth 15% subseven
oldqueue  subseven bandwidth 90%

@


1.5
log
@adopt existing altq regress to queueing changes; queuespecs for altq use
"oldqueue" as keyword for the transition phase
@
text
@@


1.4
log
@more altq bandwidth tweaks for "make pfaltq".
@
text
@d7 8
a14 8
queue eins bandwidth 10% cbq(default)
queue zwei bandwidth 60% { sub2 sub3 }
queue  sub2 bandwidth 50%
queue  sub3 bandwidth 50%
queue drei bandwidth 30% subseven
queue vier bandwidth 25% cbq(default)
queue fuenf bandwidth 15% subseven
queue  subseven bandwidth 90%
@


1.3
log
@lo1, tun0, tun1 don't exist any more. thus, create the interfaces we need for
regress purposes before starting and destroy them afterwards.
lo1 -> lo1000000
tun0 -> tun1000000
tun1 -> tun1000001

ok markus@@
@
text
@d6 1
a6 1
altq on tun1000000 tbrsize 1824 bandwidth 33600b cbq queue { vier zwei fuenf }
d8 1
a8 1
queue zwei bandwidth 80% { sub2 sub3 }
d11 3
a13 3
queue drei bandwidth 10% subseven
queue vier bandwidth 50% cbq(default)
queue fuenf bandwidth 50% subseven
@


1.2
log
@add comments saying what we are testing
@
text
@d6 1
a6 1
altq on tun0 tbrsize 1824 bandwidth 33600b cbq queue { vier zwei fuenf }
@


1.1
log
@more complicated cbq queue id assigment verification
@
text
@d1 4
@

