head	1.20;
access;
symbols
	OPENBSD_5_5:1.19.0.4
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.17.0.8
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.17.0.6
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.17.0.4
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.2
	OPENBSD_5_0:1.16.0.2
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.15.0.18
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.16
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.12
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.14
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.10
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.8
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.6
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.4
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.2
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.14.0.14
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.14.0.12
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.14.0.10
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.14.0.8
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.14.0.6
	OPENBSD_3_6_BASE:1.14
	OPENBSD_3_5:1.14.0.4
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.14.0.2
	OPENBSD_3_4_BASE:1.14
	OPENBSD_3_3:1.13.0.2
	OPENBSD_3_3_BASE:1.13;
locks; strict;
comment	@# @;


1.20
date	2014.04.18.10.48.23;	author henning;	state dead;
branches;
next	1.19;

1.19
date	2013.10.12.12.18.44;	author henning;	state Exp;
branches;
next	1.18;

1.18
date	2013.07.31.16.20.11;	author mikeb;	state Exp;
branches;
next	1.17;

1.17
date	2011.11.27.10.33.37;	author henning;	state Exp;
branches;
next	1.16;

1.16
date	2011.07.08.06.17.58;	author mcbride;	state Exp;
branches;
next	1.15;

1.15
date	2006.10.06.17.09.41;	author mcbride;	state Exp;
branches;
next	1.14;

1.14
date	2003.07.29.20.28.34;	author cedric;	state Exp;
branches;
next	1.13;

1.13
date	2003.03.03.14.18.04;	author henning;	state Exp;
branches;
next	1.12;

1.12
date	2003.03.02.23.40.52;	author henning;	state Exp;
branches;
next	1.11;

1.11
date	2003.03.02.12.38.15;	author henning;	state Exp;
branches;
next	1.10;

1.10
date	2002.12.24.13.45.51;	author mcbride;	state Exp;
branches;
next	1.9;

1.9
date	2002.12.17.00.35.34;	author henning;	state Exp;
branches;
next	1.8;

1.8
date	2002.12.13.21.53.41;	author henning;	state Exp;
branches;
next	1.7;

1.7
date	2002.12.08.00.20.17;	author henning;	state Exp;
branches;
next	1.6;

1.6
date	2002.12.07.20.53.05;	author henning;	state Exp;
branches;
next	1.5;

1.5
date	2002.12.05.14.13.37;	author henning;	state Exp;
branches;
next	1.4;

1.4
date	2002.12.05.13.09.32;	author henning;	state Exp;
branches;
next	1.3;

1.3
date	2002.11.27.16.09.48;	author henning;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.25.16.32.21;	author henning;	state Exp;
branches;
next	1.1;

1.1
date	2002.11.24.20.46.54;	author henning;	state Exp;
branches;
next	;


desc
@@


1.20
log
@stop testing altq stuffz
how many tests I wrote back then... (of which the majority is pointless)
@
text
@ext_if = "lo0"
altq on lo0 cbq bandwidth 10Mb tbrsize 1824 queue { deflt http ssh mail rsets }
oldqueue deflt bandwidth 10% priority 0 cbq( red ecn default ) 
oldqueue http bandwidth 1.50Mb priority 3 { http_vhosts http_cust1 }
oldqueue http_vhosts bandwidth 40% cbq( red borrow ) 
oldqueue http_cust1 bandwidth 500Kb 
oldqueue mail bandwidth 10% 
oldqueue ssh bandwidth 200Kb priority 7 cbq( borrow ) 
oldqueue rsets bandwidth 150Kb priority 0 cbq( red ) 
block return in on lo0 inet all set ( queue rsets )
pass in on lo0 inet proto tcp from any to any port = 80 flags S/SA set ( queue http )
pass out on lo0 inet proto tcp from any to any port = 22 flags S/SA set ( queue ssh )
pass in on lo0 inet proto tcp from any to any port = 22 flags S/SA set ( queue ssh )
pass out on lo0 inet proto tcp from any to any port = 25 flags S/SA set ( queue mail )
pass out on lo0 inet all flags S/SA
@


1.19
log
@adopt existing altq regress to queueing changes; queuespecs for altq use
"oldqueue" as keyword for the transition phase
@
text
@@


1.18
log
@fixup pfctl regress fallout from the "set tos" and "set queue" changes
@
text
@d3 7
a9 7
queue deflt bandwidth 10% priority 0 cbq( red ecn default ) 
queue http bandwidth 1.50Mb priority 3 { http_vhosts http_cust1 }
queue http_vhosts bandwidth 40% cbq( red borrow ) 
queue http_cust1 bandwidth 500Kb 
queue mail bandwidth 10% 
queue ssh bandwidth 200Kb priority 7 cbq( borrow ) 
queue rsets bandwidth 150Kb priority 0 cbq( red ) 
@


1.17
log
@adjust for port numbers instead of names by default
From: Lawrence Teo <lteo at devio at us>
@
text
@d10 5
a14 5
block return in on lo0 inet all queue rsets
pass in on lo0 inet proto tcp from any to any port = 80 flags S/SA queue http
pass out on lo0 inet proto tcp from any to any port = 22 flags S/SA queue ssh
pass in on lo0 inet proto tcp from any to any port = 22 flags S/SA queue ssh
pass out on lo0 inet proto tcp from any to any port = 25 flags S/SA queue mail
@


1.16
log
@Update regress tests for the following changes:
- if_addr RB_TREE (Address sort differently on an interface)
- skip steps changes
	- RDOMAIN
	- reordering of address/port tests
- fastroute is gone
- keep state is no longer printed by default
- lo0 now has link-local scope address in addition to ::1
@
text
@d11 4
a14 4
pass in on lo0 inet proto tcp from any to any port = www flags S/SA queue http
pass out on lo0 inet proto tcp from any to any port = ssh flags S/SA queue ssh
pass in on lo0 inet proto tcp from any to any port = ssh flags S/SA queue ssh
pass out on lo0 inet proto tcp from any to any port = smtp flags S/SA queue mail
@


1.15
log
@Handle default 'flags S/SA keep state', 'no state' and 'flags any'.
@
text
@d11 5
a15 5
pass in on lo0 inet proto tcp from any to any port = www flags S/SA keep state queue http
pass out on lo0 inet proto tcp from any to any port = ssh flags S/SA keep state queue ssh
pass in on lo0 inet proto tcp from any to any port = ssh flags S/SA keep state queue ssh
pass out on lo0 inet proto tcp from any to any port = smtp flags S/SA keep state queue mail
pass out on lo0 inet all flags S/SA keep state
@


1.14
log
@Big Sync
@
text
@d11 5
a15 5
pass in on lo0 inet proto tcp from any to any port = www keep state queue http
pass out on lo0 inet proto tcp from any to any port = ssh keep state queue ssh
pass in on lo0 inet proto tcp from any to any port = ssh keep state queue ssh
pass out on lo0 inet proto tcp from any to any port = smtp keep state queue mail
pass out on lo0 inet all keep state
@


1.13
log
@regen
@
text
@d10 6
a15 6
block return in on lo0 inet all queue rsets 
pass in on lo0 inet proto tcp from any to any port = www keep state queue http 
pass out on lo0 inet proto tcp from any to any port = ssh keep state queue ssh 
pass in on lo0 inet proto tcp from any to any port = ssh keep state queue ssh 
pass out on lo0 inet proto tcp from any to any port = smtp keep state queue mail 
pass out on lo0 inet all keep state 
@


1.12
log
@regen after pfctl changes
@
text
@d2 1
a2 1
altq on lo0 cbq bandwidth 10.00Mb tbrsize 1824 queue { deflt http ssh mail rsets }
d6 1
a6 1
queue http_cust1 bandwidth 500.00Kb 
d8 2
a9 2
queue ssh bandwidth 200.00Kb priority 7 cbq( borrow ) 
queue rsets bandwidth 150.00Kb priority 0 cbq( red ) 
@


1.11
log
@cbq control keyword is gone
@
text
@d3 1
a3 1
queue deflt bandwidth 1.00Mb priority 0 cbq( red ecn default ) 
d5 1
a5 1
queue http_vhosts bandwidth 600.00Kb cbq( red borrow ) 
d7 1
a7 1
queue mail bandwidth 1.00Mb 
@


1.10
log
@add cbq "control" keyword to regress test
@
text
@d2 1
a2 2
altq on lo0 cbq bandwidth 10.00Mb tbrsize 1824 queue { ctrl deflt http ssh mail rsets }
queue ctrl bandwidth 500.00Kb priority 0 cbq( control ) 
@


1.9
log
@"cosmetical changes if at all". yeah.
@
text
@d2 2
a3 1
altq on lo0 cbq bandwidth 10.00Mb tbrsize 1824 queue { deflt http ssh mail rsets }
@


1.8
log
@adjust after minor output change (whitespace)
@
text
@d3 1
a3 1
queue deflt bandwidth 1000.00Kb priority 0 cbq( red ecn default ) 
d7 1
a7 1
queue mail bandwidth 1000.00Kb 
@


1.7
log
@adjust after syntax change
@
text
@d10 5
a14 5
block return in on lo0 inet all queue rsets
pass in on lo0 inet proto tcp from any to any port = www keep state queue http
pass out on lo0 inet proto tcp from any to any port = ssh keep state queue ssh
pass in on lo0 inet proto tcp from any to any port = ssh keep state queue ssh
pass out on lo0 inet proto tcp from any to any port = smtp keep state queue mail
@


1.6
log
@now that we use the MTU from the interface instead of assuming 1500 the
tbrsize and the minimum useful bandwidth are different on lo0/lo1. cope with
that.
@
text
@d2 1
a2 1
altq on lo0 scheduler cbq bandwidth 10.00Mb tbrsize 1824 queue { deflt http ssh mail rsets }
@


1.5
log
@no more rule numbers in output
@
text
@d2 1
a2 1
altq on lo0 scheduler cbq bandwidth 10.00Mb tbrsize 6000 queue { deflt http ssh mail rsets }
d8 2
a9 2
queue ssh bandwidth 100.00Kb priority 7 cbq( borrow ) 
queue rsets bandwidth 7.50Kb priority 0 cbq( red ) 
@


1.4
log
@adjust after pfctl output changes
@
text
@d10 6
a15 6
@@0 block return in on lo0 inet all queue rsets
@@1 pass in on lo0 inet proto tcp from any to any port = www keep state queue http
@@2 pass out on lo0 inet proto tcp from any to any port = ssh keep state queue ssh
@@3 pass in on lo0 inet proto tcp from any to any port = ssh keep state queue ssh
@@4 pass out on lo0 inet proto tcp from any to any port = smtp keep state queue mail
@@5 pass out on lo0 inet all keep state 
@


1.3
log
@adjust after printing changes
@
text
@d1 1
a1 1
ext_if = lo0
@


1.2
log
@adjust; slightly off due to 1K = 1000 fix
@
text
@d2 2
a3 2
altq on lo0 scheduler 1 bandwidth 10.00Mb tbrsize 6000 queue { deflt http ssh mail rsets }
queue deflt bandwidth 1000.00Kb priority 0 cbq( red ecn default )
d5 5
a9 5
queue http_vhosts bandwidth 600.00Kb priority 1 cbq( red borrow )
queue http_cust1 bandwidth 500.00Kb priority 1
queue mail bandwidth 1000.00Kb priority 1
queue ssh bandwidth 100.00Kb priority 7 cbq( borrow )
queue rsets bandwidth 7.50Kb priority 0 cbq( red )
@


1.1
log
@gack.
@
text
@d3 1
a3 1
queue deflt bandwidth 1023.99Kb priority 0 cbq( red ecn default )
d5 3
a7 3
queue http_vhosts bandwidth 614.38Kb priority 1 cbq( red borrow )
queue http_cust1 bandwidth 512.00Kb priority 1
queue mail bandwidth 1023.99Kb priority 1
d9 1
a9 1
queue rsets bandwidth 7.32Kb priority 0 cbq( red )
@

