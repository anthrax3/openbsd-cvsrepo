head	1.11;
access;
symbols
	OPENBSD_6_2:1.11.0.12
	OPENBSD_6_2_BASE:1.11
	OPENBSD_6_1:1.11.0.14
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.10
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.8
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.6
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.4
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.10.0.4
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.9.0.10
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.8
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.6
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.4
	OPENBSD_5_0:1.9.0.2
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.7.0.18
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.16
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.12
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.14
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.10
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.8
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.6
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.4
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.2
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.6.0.14
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.12
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.10
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5;
locks; strict;
comment	@# @;


1.11
date	2014.06.24.12.41.59;	author mikeb;	state Exp;
branches;
next	1.10;
commitid	4yzbAuHLtQcGSnXF;

1.10
date	2013.07.31.16.20.11;	author mikeb;	state Exp;
branches;
next	1.9;

1.9
date	2011.07.13.21.29.07;	author mcbride;	state Exp;
branches;
next	1.8;

1.8
date	2011.07.08.06.17.58;	author mcbride;	state Exp;
branches;
next	1.7;

1.7
date	2006.10.06.17.09.41;	author mcbride;	state Exp;
branches;
next	1.6;

1.6
date	2003.07.29.20.28.34;	author cedric;	state Exp;
branches;
next	1.5;

1.5
date	2003.01.19.09.32.47;	author camield;	state Exp;
branches;
next	1.4;

1.4
date	2002.12.13.21.53.41;	author henning;	state Exp;
branches;
next	1.3;

1.3
date	2002.12.05.14.13.37;	author henning;	state Exp;
branches;
next	1.2;

1.2
date	2002.12.05.13.09.32;	author henning;	state Exp;
branches;
next	1.1;

1.1
date	2002.12.04.11.35.41;	author henning;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Fixup the test after new queue code has been added.

You can't load a ruleset with undefined queues into the anchor.
Change the test to use "set prio" since the whole purpose of it
is to test the flexibility of the pf.conf language, not a
particular queue feature.
@
text
@body1 = "pass in log quick on lo0 inet proto icmp all "
body2 = "pass in log quick on lo0 inet proto tcp all "
o_user = "user root "
o_user2 = "user bin "
o_group = "group wheel "
o_group2 = "group nobody "
o_flags = "flags S/SA "
o_icmpspec = "icmp-type 0 code 0 "
o_tos = "tos 0x08 "
o_keep = "keep state "
o_fragment = "fragment "
o_allowopts = "allow-opts "
o_label = "label blah"
o_prio = "set prio 2"
pass in log quick on lo0 inet proto tcp all tos 0x08 fragment label "blah"
pass in log quick on lo0 inet proto tcp all user = 3 group = 32767 flags S/SA tos 0x08 set ( prio 2 ) allow-opts label "blah"
pass in log quick on lo0 inet proto tcp all user = 3 group = 0 flags S/SA tos 0x08 set ( prio 2 ) allow-opts label "blah"
pass in log quick on lo0 inet proto tcp all user = 0 group = 32767 flags S/SA tos 0x08 set ( prio 2 ) allow-opts label "blah"
pass in log quick on lo0 inet proto tcp all user = 0 group = 0 flags S/SA tos 0x08 set ( prio 2 ) allow-opts label "blah"
pass in log quick on lo0 inet proto icmp all icmp-type echorep code 0 set ( prio 2 ) label "blah"
pass in log quick on lo0 inet proto tcp all flags S/SA
pass in log quick on lo0 inet proto tcp all flags S/SA tos 0x08 set ( prio 2 ) label "blah"
pass in log quick on lo0 inet proto icmp all icmp-type echorep code 0 tos 0x08
pass in log quick on lo0 inet proto tcp all flags S/SA allow-opts
@


1.10
log
@fixup pfctl regress fallout from the "set tos" and "set queue" changes
@
text
@d14 1
a14 1
o_qname = "queue blah"
d16 5
a20 5
pass in log quick on lo0 inet proto tcp all user = 3 group = 32767 flags S/SA tos 0x08 set ( queue blah ) allow-opts label "blah"
pass in log quick on lo0 inet proto tcp all user = 3 group = 0 flags S/SA tos 0x08 set ( queue blah ) allow-opts label "blah"
pass in log quick on lo0 inet proto tcp all user = 0 group = 32767 flags S/SA tos 0x08 set ( queue blah ) allow-opts label "blah"
pass in log quick on lo0 inet proto tcp all user = 0 group = 0 flags S/SA tos 0x08 set ( queue blah ) allow-opts label "blah"
pass in log quick on lo0 inet proto icmp all icmp-type echorep code 0 set ( queue blah ) label "blah"
d22 1
a22 1
pass in log quick on lo0 inet proto tcp all flags S/SA tos 0x08 set ( queue blah ) label "blah"
@


1.9
log
@Must now specify correct protocol (tcp, udp) for user and group attributes.
@
text
@d16 5
a20 5
pass in log quick on lo0 inet proto tcp all user = 3 group = 32767 flags S/SA tos 0x08 allow-opts label "blah" queue blah
pass in log quick on lo0 inet proto tcp all user = 3 group = 0 flags S/SA tos 0x08 allow-opts label "blah" queue blah
pass in log quick on lo0 inet proto tcp all user = 0 group = 32767 flags S/SA tos 0x08 allow-opts label "blah" queue blah
pass in log quick on lo0 inet proto tcp all user = 0 group = 0 flags S/SA tos 0x08 allow-opts label "blah" queue blah
pass in log quick on lo0 inet proto icmp all icmp-type echorep code 0 label "blah" queue blah
d22 1
a22 1
pass in log quick on lo0 inet proto tcp all flags S/SA tos 0x08 label "blah" queue blah
@


1.8
log
@Update regress tests for the following changes:
- if_addr RB_TREE (Address sort differently on an interface)
- skip steps changes
	- RDOMAIN
	- reordering of address/port tests
- fastroute is gone
- keep state is no longer printed by default
- lo0 now has link-local scope address in addition to ::1
@
text
@d16 5
a20 4
pass in log quick on lo0 inet proto icmp all user = 3 group = 32767 icmp-type echorep code 0 tos 0x08 allow-opts label "blah" queue blah
pass in log quick on lo0 inet proto icmp all user = 3 group = 0 icmp-type echorep code 0 tos 0x08 allow-opts label "blah" queue blah
pass in log quick on lo0 inet proto icmp all user = 0 group = 32767 icmp-type echorep code 0 tos 0x08 allow-opts label "blah" queue blah
pass in log quick on lo0 inet proto icmp all user = 0 group = 0 icmp-type echorep code 0 tos 0x08 allow-opts label "blah" queue blah
@


1.7
log
@Handle default 'flags S/SA keep state', 'no state' and 'flags any'.
@
text
@d15 9
a23 9
pass in log quick on lo0 inet proto tcp all tos 0x08 keep state fragment label "blah"
pass in log quick on lo0 inet proto icmp all user = 3 group = 32767 icmp-type echorep code 0 tos 0x08 keep state allow-opts label "blah" queue blah
pass in log quick on lo0 inet proto icmp all user = 3 group = 0 icmp-type echorep code 0 tos 0x08 keep state allow-opts label "blah" queue blah
pass in log quick on lo0 inet proto icmp all user = 0 group = 32767 icmp-type echorep code 0 tos 0x08 keep state allow-opts label "blah" queue blah
pass in log quick on lo0 inet proto icmp all user = 0 group = 0 icmp-type echorep code 0 tos 0x08 keep state allow-opts label "blah" queue blah
pass in log quick on lo0 inet proto tcp all flags S/SA keep state
pass in log quick on lo0 inet proto tcp all flags S/SA tos 0x08 keep state label "blah" queue blah
pass in log quick on lo0 inet proto icmp all icmp-type echorep code 0 tos 0x08 keep state
pass in log quick on lo0 inet proto tcp all flags S/SA keep state allow-opts
@


1.6
log
@Big Sync
@
text
@d20 4
a23 4
pass in log quick on lo0 inet proto tcp all keep state
pass in log quick on lo0 inet proto tcp all tos 0x08 keep state label "blah" queue blah
pass in log quick on lo0 inet proto icmp all icmp-type echorep code 0 tos 0x08
pass in log quick on lo0 inet proto tcp all flags S/SA allow-opts
@


1.5
log
@Labels are quoted in rule output now.
@
text
@d15 9
a23 9
pass in log quick on lo0 inet proto tcp all tos 0x08 keep state fragment label "blah" 
pass in log quick on lo0 inet proto icmp all user = 3 group = 32767 icmp-type echorep code 0 tos 0x08 keep state allow-opts label "blah" queue blah 
pass in log quick on lo0 inet proto icmp all user = 3 group = 0 icmp-type echorep code 0 tos 0x08 keep state allow-opts label "blah" queue blah 
pass in log quick on lo0 inet proto icmp all user = 0 group = 32767 icmp-type echorep code 0 tos 0x08 keep state allow-opts label "blah" queue blah 
pass in log quick on lo0 inet proto icmp all user = 0 group = 0 icmp-type echorep code 0 tos 0x08 keep state allow-opts label "blah" queue blah 
pass in log quick on lo0 inet proto tcp all keep state 
pass in log quick on lo0 inet proto tcp all tos 0x08 keep state label "blah" queue blah 
pass in log quick on lo0 inet proto icmp all icmp-type echorep code 0 tos 0x08 
pass in log quick on lo0 inet proto tcp all flags S/SA allow-opts 
@


1.4
log
@adjust after minor output change (whitespace)
@
text
@d15 5
a19 5
pass in log quick on lo0 inet proto tcp all tos 0x08 keep state fragment label blah 
pass in log quick on lo0 inet proto icmp all user = 3 group = 32767 icmp-type echorep code 0 tos 0x08 keep state allow-opts label blah queue blah 
pass in log quick on lo0 inet proto icmp all user = 3 group = 0 icmp-type echorep code 0 tos 0x08 keep state allow-opts label blah queue blah 
pass in log quick on lo0 inet proto icmp all user = 0 group = 32767 icmp-type echorep code 0 tos 0x08 keep state allow-opts label blah queue blah 
pass in log quick on lo0 inet proto icmp all user = 0 group = 0 icmp-type echorep code 0 tos 0x08 keep state allow-opts label blah queue blah 
d21 1
a21 1
pass in log quick on lo0 inet proto tcp all tos 0x08 keep state label blah queue blah 
@


1.3
log
@no more rule numbers in output
@
text
@d16 4
a19 4
pass in log quick on lo0 inet proto icmp all user = 3 group = 32767 icmp-type echorep code 0 tos 0x08 keep state allow-opts label blah queue blah
pass in log quick on lo0 inet proto icmp all user = 3 group = 0 icmp-type echorep code 0 tos 0x08 keep state allow-opts label blah queue blah
pass in log quick on lo0 inet proto icmp all user = 0 group = 32767 icmp-type echorep code 0 tos 0x08 keep state allow-opts label blah queue blah
pass in log quick on lo0 inet proto icmp all user = 0 group = 0 icmp-type echorep code 0 tos 0x08 keep state allow-opts label blah queue blah
d21 1
a21 1
pass in log quick on lo0 inet proto tcp all tos 0x08 keep state label blah queue blah
@


1.2
log
@adjust after pfctl output changes
@
text
@d15 9
a23 9
@@0 pass in log quick on lo0 inet proto tcp all tos 0x08 keep state fragment label blah 
@@1 pass in log quick on lo0 inet proto icmp all user = 3 group = 32767 icmp-type echorep code 0 tos 0x08 keep state allow-opts label blah queue blah
@@2 pass in log quick on lo0 inet proto icmp all user = 3 group = 0 icmp-type echorep code 0 tos 0x08 keep state allow-opts label blah queue blah
@@3 pass in log quick on lo0 inet proto icmp all user = 0 group = 32767 icmp-type echorep code 0 tos 0x08 keep state allow-opts label blah queue blah
@@4 pass in log quick on lo0 inet proto icmp all user = 0 group = 0 icmp-type echorep code 0 tos 0x08 keep state allow-opts label blah queue blah
@@5 pass in log quick on lo0 inet proto tcp all keep state 
@@6 pass in log quick on lo0 inet proto tcp all tos 0x08 keep state label blah queue blah
@@7 pass in log quick on lo0 inet proto icmp all icmp-type echorep code 0 tos 0x08 
@@8 pass in log quick on lo0 inet proto tcp all flags S/SA allow-opts 
@


1.1
log
@test opts in another than the classical order
@
text
@d1 14
a14 14
body1 = pass in log quick on lo0 inet proto icmp all 
body2 = pass in log quick on lo0 inet proto tcp all 
o_user = user root 
o_user2 = user bin 
o_group = group wheel 
o_group2 = group nobody 
o_flags = flags S/SA 
o_icmpspec = icmp-type 0 code 0 
o_tos = tos 0x08 
o_keep = keep state 
o_fragment = fragment 
o_allowopts = allow-opts 
o_label = label blah
o_qname = queue blah
@

