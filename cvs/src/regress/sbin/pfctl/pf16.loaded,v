head	1.15;
access;
symbols
	OPENBSD_6_2:1.15.0.26
	OPENBSD_6_2_BASE:1.15
	OPENBSD_6_1:1.15.0.24
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.15.0.20
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.10
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.18
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.16
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.15.0.14
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.15.0.12
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.8
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.6
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.4
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.2
	OPENBSD_5_0:1.14.0.2
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.13.0.6
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.4
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.2
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.12.0.4
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.11.0.10
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.8
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.6
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.4
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.2
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.9.0.12
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.10
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.8
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.6
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.4
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.2
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6;
locks; strict;
comment	@# @;


1.15
date	2011.12.12.21.41.29;	author mikeb;	state Exp;
branches;
next	1.14;

1.14
date	2011.07.08.06.17.58;	author mcbride;	state Exp;
branches;
next	1.13;

1.13
date	2009.10.06.14.11.07;	author jsg;	state Exp;
branches;
next	1.12;

1.12
date	2009.04.06.12.41.47;	author henning;	state Exp;
branches;
next	1.11;

1.11
date	2006.10.17.08.15.32;	author mcbride;	state Exp;
branches;
next	1.10;

1.10
date	2006.10.06.17.09.41;	author mcbride;	state Exp;
branches;
next	1.9;

1.9
date	2003.12.05.16.55.40;	author henning;	state Exp;
branches;
next	1.8;

1.8
date	2003.07.29.20.28.34;	author cedric;	state Exp;
branches;
next	1.7;

1.7
date	2003.05.18.20.27.01;	author henning;	state Exp;
branches;
next	1.6;

1.6
date	2003.03.11.14.04.57;	author henning;	state Exp;
branches;
next	1.5;

1.5
date	2003.03.08.14.30.27;	author henning;	state Exp;
branches;
next	1.4;

1.4
date	2003.02.22.23.26.39;	author mcbride;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.01.04.26.19;	author dhartmei;	state Exp;
branches;
next	1.2;

1.2
date	2002.12.31.20.02.49;	author mcbride;	state Exp;
branches;
next	1.1;

1.1
date	2002.12.18.16.49.54;	author dhartmei;	state Exp;
branches;
next	;


desc
@@


1.15
log
@fixup regression tests wrt skip steps (fixed in pfctl.c rev1.305);
ok henning mcbride (a while back)
@
text
@@@0 match out on lo0 inet from 192.168.1.1 to any nat-to 10.0.0.1
  [ Skip steps: i=4 r=end f=4 sp=end ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
@@1 match in on lo0 inet proto tcp from any to 1.2.3.4 port = 2222 rdr-to 10.0.0.10 port 22
  [ Skip steps: i=4 r=end f=4 sp=end ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
@@2 match out on lo0 inet from 192.168.1.1 to any nat-to 10.0.0.1 static-port
  [ Skip steps: i=4 r=end f=4 p=end sp=end dp=end ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
@@3 match in on lo0 inet from any to 10.0.0.1 rdr-to 192.168.1.1
  [ Skip steps: d=end r=end p=end sa=end sp=end dp=end ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
@@4 pass in on lo1000000 all no state
  [ Skip steps: i=end d=end r=end f=end p=end sa=end da=end sp=end dp=end ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
@


1.14
log
@Update regress tests for the following changes:
- if_addr RB_TREE (Address sort differently on an interface)
- skip steps changes
	- RDOMAIN
	- reordering of address/port tests
- fastroute is gone
- keep state is no longer printed by default
- lo0 now has link-local scope address in addition to ::1
@
text
@d2 1
a2 1
  [ Skip steps: i=4 d=end f=4 sp=end ]
d6 1
a6 1
  [ Skip steps: i=4 d=end f=4 sp=end ]
d10 1
a10 1
  [ Skip steps: i=4 d=end f=4 p=end sp=end dp=end ]
d14 1
a14 1
  [ Skip steps: r=end d=end p=end sa=end sp=end dp=end ]
d18 1
a18 1
  [ Skip steps: i=end r=end d=end f=end p=end sa=end da=end sp=end dp=end ]
@


1.13
log
@more updates for new pf with source-hash manually added to
loaded output as it doesn't currently appear as it should.

ok henning@@
@
text
@d2 1
a2 1
  [ Skip steps: i=4 f=4 sp=end ]
d6 1
a6 1
  [ Skip steps: i=4 f=4 sp=end ]
d10 1
a10 1
  [ Skip steps: i=4 f=4 p=end sp=end dp=end ]
d14 1
a14 1
  [ Skip steps: d=end p=end sa=end sp=end dp=end ]
d18 1
a18 1
  [ Skip steps: i=end d=end f=end p=end sa=end sp=end da=end dp=end ]
@


1.12
log
@scrub gone
@
text
@d1 2
a2 2
@@0 nat on lo0 inet from 192.168.1.1 to any -> 10.0.0.1
  [ Skip steps: i=end d=end f=end p=end sa=end sp=end da=end dp=end ]
d5 2
a6 2
@@0 rdr on lo0 inet proto tcp from any to 1.2.3.4 port = 2222 -> 10.0.0.10 port 22
  [ Skip steps: i=end d=end f=end p=end sa=end sp=end da=end dp=end ]
d9 2
a10 2
@@0 binat on lo0 inet from 192.168.1.1 to any -> 10.0.0.1
  [ Skip steps: i=end d=end f=end p=end sa=end sp=end da=end dp=end ]
d13 5
a17 1
@@0 pass in on lo1000000 all no state
@


1.11
log
@'flags S/SA' not implicit if the rule is stateless.
@
text
@a12 4
@@0 scrub in on lo0 all fragment reassemble
  [ Skip steps: i=end d=end f=end p=end sa=end sp=end da=end dp=end ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
@


1.10
log
@Handle default 'flags S/SA keep state', 'no state' and 'flags any'.
@
text
@d17 1
a17 1
@@0 pass in on lo1000000 all flags S/SA no state
@


1.9
log
@lo1, tun0, tun1 don't exist any more. thus, create the interfaces we need for
regress purposes before starting and destroy them afterwards.
lo1 -> lo1000000
tun0 -> tun1000000
tun1 -> tun1000001

ok markus@@
@
text
@d17 1
a17 1
@@0 pass in on lo1000000 all
@


1.8
log
@Big Sync
@
text
@d17 1
a17 1
@@0 pass in on lo1 all
@


1.7
log
@regen; output formatting change
@
text
@d13 1
a13 1
@@0 scrub in on lo0 all fragment reassemble 
d17 1
a17 1
@@0 pass in on lo1 all 
@


1.6
log
@regen
@
text
@d2 3
a4 4
[ Skip steps: i=end d=end f=end p=end sa=end sp=end da=end dp=end ]
[ queue: qname= qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

d6 3
a8 4
[ Skip steps: i=end d=end f=end p=end sa=end sp=end da=end dp=end ]
[ queue: qname= qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

d10 3
a12 4
[ Skip steps: i=end d=end f=end p=end sa=end sp=end da=end dp=end ]
[ queue: qname= qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

d14 3
a16 4
[ Skip steps: i=end d=end f=end p=end sa=end sp=end da=end dp=end ]
[ queue: qname= qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

d18 3
a20 4
[ Skip steps: i=end d=end f=end p=end sa=end sp=end da=end dp=end ]
[ queue: qname= qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

@


1.5
log
@regen after pfctl output change
@
text
@d3 1
a3 1
[ Queue: qname= qid=0 pqname= pqid=0 ]
d8 1
a8 1
[ Queue: qname= qid=0 pqname= pqid=0 ]
d13 1
a13 1
[ Queue: qname= qid=0 pqname= pqid=0 ]
d18 1
a18 1
[ Queue: qname= qid=0 pqname= pqid=0 ]
d23 1
a23 1
[ Queue: qname= qid=0 pqname= pqid=0 ]
@


1.4
log
@Make the pfload regression tests check translation rules as well as
filter rules.
@
text
@d3 1
d8 1
d13 1
d18 1
d23 1
@


1.3
log
@Remove skip step for action (scrub vs. non-scrub), as scrub rules are
stored in a separate list now. Regress tests still pass after
sed "s/ a=end / /g", other skip steps are not affected.
@
text
@d1 12
@


1.2
log
@Adjust tests for kernel split of scrub into it's own ruleset type.
@
text
@d2 1
a2 1
[ Skip steps: a=end i=end d=end f=end p=end sa=end sp=end da=end dp=end ]
d6 1
a6 1
[ Skip steps: a=end i=end d=end f=end p=end sa=end sp=end da=end dp=end ]
@


1.1
log
@Load regress rules into anchor regress:regress and compare the output
of pfctl -vvsr with expected output. This verifies that skip step
values don't change unexpectedly.
@
text
@d2 1
a2 1
[ Skip steps: d=end f=end p=end sa=end sp=end da=end dp=end ]
d5 1
a5 1
@@1 pass in on lo1 all 
@

