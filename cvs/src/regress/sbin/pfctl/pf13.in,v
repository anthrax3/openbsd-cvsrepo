head	1.8;
access;
symbols
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.7.0.22
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.12
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.20
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.18
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.16
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.14
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.10
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.8
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.6
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.4
	OPENBSD_5_0:1.7.0.2
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.6.0.6
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.4
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.5.0.26
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.22
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.20
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.18
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.16
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.14
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.12
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.10
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.8
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.6
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.4
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.2
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.4.0.4
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.2
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.1.0.2
	OPENBSD_3_1_BASE:1.1;
locks; strict;
comment	@# @;


1.8
date	2016.09.01.16.18.09;	author henning;	state Exp;
branches;
next	1.7;
commitid	1YZeac6u4qmzjapG;

1.7
date	2011.07.08.06.17.58;	author mcbride;	state Exp;
branches;
next	1.6;

1.6
date	2009.09.23.14.08.33;	author jsg;	state Exp;
branches;
next	1.5;

1.5
date	2003.12.05.16.55.40;	author henning;	state Exp;
branches;
next	1.4;

1.4
date	2002.12.24.13.59.32;	author mcbride;	state Exp;
branches;
next	1.3;

1.3
date	2002.11.24.20.42.17;	author henning;	state Exp;
branches;
next	1.2;

1.2
date	2002.07.20.19.52.59;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2001.11.26.16.53.27;	author jasoni;	state Exp;
branches;
next	;


desc
@@


1.8
log
@no route-to/reply-to/dup-to on block rules, aka make this pass again
triggered by bluhm's *meep, secret*
@
text
@pass in quick on enc0 from any to any
pass in quick on enc0 inet from any to any
pass in quick on enc0 inet6 from any to any

pass out quick on tun1000000 inet from any to any route-to tun1000001
pass out quick on tun1000000 from any to 192.168.1.1 route-to tun1000001
pass out quick on tun1000000 from any to fec0::1 route-to tun1000001

pass in on tun1000000 proto tcp from any to any port = 21 dup-to (tun1000001 192.168.1.1)
pass in on tun1000000 proto tcp from any to any port = 21 dup-to (tun1000001 fec0::1)

pass in quick on tun1000000 from 192.168.1.1/32 to 10.1.1.1/32 route-to tun1000001
pass in quick on tun1000000 from fec0::1/64 to fec1::2/128 route-to tun1000001

pass in on tun1000000 proto tcp from any to any port = 21 reply-to (tun1000001 192.168.1.1)
pass in on tun1000000 proto tcp from any to any port = 21 reply-to (tun1000001 fec0::1)

pass in quick on tun1000000 from 192.168.1.1/32 to 10.1.1.1/32 reply-to tun1000001
pass in quick on tun1000000 from fec0::1/64 to fec1::2/128 reply-to tun1000001

pass in quick on tun1000000 from 192.168.1.1/32 to 10.1.1.1/32 dup-to (tun1000001 192.168.1.100)
pass in quick on tun1000000 from fec0::1/64 to fec1::2/128 dup-to (tun1000001 fec1::2)
@


1.7
log
@Update regress tests for the following changes:
- if_addr RB_TREE (Address sort differently on an interface)
- skip steps changes
	- RDOMAIN
	- reordering of address/port tests
- fastroute is gone
- keep state is no longer printed by default
- lo0 now has link-local scope address in addition to ::1
@
text
@d9 2
a10 2
block in on tun1000000 proto tcp from any to any port = 21 dup-to (tun1000001 192.168.1.1)
block in on tun1000000 proto tcp from any to any port = 21 dup-to (tun1000001 fec0::1)
d15 2
a16 2
block in on tun1000000 proto tcp from any to any port = 21 reply-to (tun1000001 192.168.1.1)
block in on tun1000000 proto tcp from any to any port = 21 reply-to (tun1000001 fec0::1)
@


1.6
log
@More tweaks to try to catchup to recent pf changes.
pfopt5 part from sthen@@

ok henning@@ sthen@@
@
text
@d1 3
a3 3
pass in quick on enc0 from any to any fastroute
pass in quick on enc0 inet from any to any fastroute
pass in quick on enc0 inet6 from any to any fastroute
@


1.5
log
@lo1, tun0, tun1 don't exist any more. thus, create the interfaces we need for
regress purposes before starting and destroy them afterwards.
lo1 -> lo1000000
tun0 -> tun1000000
tun1 -> tun1000001

ok markus@@
@
text
@d1 3
a3 3
pass in quick on enc0 fastroute all
pass in quick on enc0 fastroute inet all
pass in quick on enc0 fastroute inet6 all
d5 3
a7 3
pass out quick on tun1000000 route-to tun1000001 inet all
pass out quick on tun1000000 route-to tun1000001 from any to 192.168.1.1
pass out quick on tun1000000 route-to tun1000001 from any to fec0::1
d9 2
a10 2
block in on tun1000000 dup-to (tun1000001 192.168.1.1) proto tcp from any to any port = 21
block in on tun1000000 dup-to (tun1000001 fec0::1) proto tcp from any to any port = 21
d12 2
a13 2
pass in quick on tun1000000 route-to tun1000001 from 192.168.1.1/32 to 10.1.1.1/32
pass in quick on tun1000000 route-to tun1000001 from fec0::1/64 to fec1::2/128
d15 2
a16 2
block in on tun1000000 reply-to (tun1000001 192.168.1.1) proto tcp from any to any port = 21
block in on tun1000000 reply-to (tun1000001 fec0::1) proto tcp from any to any port = 21
d18 2
a19 2
pass in quick on tun1000000 reply-to tun1000001 from 192.168.1.1/32 to 10.1.1.1/32
pass in quick on tun1000000 reply-to tun1000001 from fec0::1/64 to fec1::2/128
d21 2
a22 2
pass in quick on tun1000000 dup-to (tun1000001 192.168.1.100) from 192.168.1.1/32 to 10.1.1.1/32
pass in quick on tun1000000 dup-to (tun1000001 fec1::2) from fec0::1/64 to fec1::2/128
@


1.4
log
@Add "reply-to" keyword to regress test.
@
text
@d5 3
a7 3
pass out quick on tun0 route-to tun1 inet all
pass out quick on tun0 route-to tun1 from any to 192.168.1.1
pass out quick on tun0 route-to tun1 from any to fec0::1
d9 2
a10 2
block in on tun0 dup-to (tun1 192.168.1.1) proto tcp from any to any port = 21
block in on tun0 dup-to (tun1 fec0::1) proto tcp from any to any port = 21
d12 2
a13 2
pass in quick on tun0 route-to tun1 from 192.168.1.1/32 to 10.1.1.1/32
pass in quick on tun0 route-to tun1 from fec0::1/64 to fec1::2/128
d15 2
a16 2
block in on tun0 reply-to (tun1 192.168.1.1) proto tcp from any to any port = 21
block in on tun0 reply-to (tun1 fec0::1) proto tcp from any to any port = 21
d18 2
a19 2
pass in quick on tun0 reply-to tun1 from 192.168.1.1/32 to 10.1.1.1/32
pass in quick on tun0 reply-to tun1 from fec0::1/64 to fec1::2/128
d21 2
a22 2
pass in quick on tun0 dup-to (tun1 192.168.1.100) from 192.168.1.1/32 to 10.1.1.1/32
pass in quick on tun0 dup-to (tun1 fec1::2) from fec0::1/64 to fec1::2/128
@


1.3
log
@make succeed again; explicit address family needed in one more case now
@
text
@d15 6
@


1.2
log
@adapt to new dup-to syntax
@
text
@d5 1
a5 1
pass out quick on tun0 route-to tun1 all
@


1.1
log
@add tests for fastroute options
@
text
@d9 2
a10 2
block in on tun0 dup-to tun1:192.168.1.1 proto tcp from any to any port = 21
block in on tun0 dup-to tun1:fec0::1 proto tcp from any to any port = 21
d15 2
a16 2
pass in quick on tun0 dup-to tun1:192.168.1.100 from 192.168.1.1/32 to 10.1.1.1/32
pass in quick on tun0 dup-to tun1:fec1::2 from fec0::1/64 to fec1::2/128
@

