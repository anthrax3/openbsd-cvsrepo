head	1.2;
access;
symbols
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.16
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.6
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.14
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.12
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.10
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.8
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2;
locks; strict;
comment	@ * @;


1.2
date	2012.12.23.16.12.29;	author kettenis;	state Exp;
branches;
next	1.1;

1.1
date	2012.12.23.15.11.10;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Check proper alignment in destructors too.
@
text
@#include <emmintrin.h>
#include <pthread.h>

void foo_init(void) __attribute__((constructor));
void foo_fini(void) __attribute__((destructor));

void *
foo(void *arg)
{
	__m128i xmm_alpha;

	if ((((unsigned long)&xmm_alpha) & 15) != 0)
		exit(1);
}

void
foo_init(void)
{
	foo(NULL);
}

void
foo_fini(void)
{
	foo(NULL);
}

int
main(void)
{
	pthread_t thread;

	foo(NULL);
	pthread_create(&thread, NULL, foo, NULL);
	return 0;
}
@


1.1
log
@Regression test for proper stack alignment for SSE2 instructions.
@
text
@d4 2
a5 1
void foobar(void) __attribute__((constructor));
d17 7
a23 1
foobar(void)
@

