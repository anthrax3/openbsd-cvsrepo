head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.2
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.3.0.8
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.4
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.2.0.6
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.4
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.1.0.34
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.32
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.30
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.28
	OPENBSD_5_0:1.1.0.26
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.24
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.22
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.18
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.20
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.16
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.14
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.12
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.10
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.8
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.6
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.4
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.2
	OPENBSD_3_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2017.02.25.07.28.32;	author jsg;	state Exp;
branches;
next	1.3;
commitid	o45S2hSKbgrOD8tL;

1.3
date	2014.09.27.06.28.45;	author doug;	state Exp;
branches;
next	1.2;
commitid	f4Emp3aOD3XoUoYk;

1.2
date	2013.10.28.08.47.43;	author jsg;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.31.20.53.49;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Add missing includes to avoid implicit function declarations.
@
text
@/*	$OpenBSD: blt.c,v 1.3 2014/09/27 06:28:45 doug Exp $	*/
/*
 *	Written by Mark Kettenis <kettenis@@openbsd.org> 2004 Public Domain
 */

#include <sys/types.h>
#include <sys/mman.h>

#include <assert.h>
#include <stddef.h>
#include <string.h>
#include <unistd.h>

typedef unsigned FbStip;
typedef unsigned FbBits;
typedef int FbStride;
typedef int Bool;

extern void fbBlt (FbBits *, FbStride, int, FbBits *, FbStride, int,
		   int,	int, int, FbBits, int, Bool, Bool);

FbBits map[] = { 0x77ff7700, 0x11335577 };

int
main (void)
{
	int pagesize;
	FbBits *src;
	FbBits *dst;
	int srcX, dstX;
	int bpp;
	int alu = 1;
	FbBits pm = 0xffffffff;

	pagesize = getpagesize();

	src = mmap(NULL, 2 * pagesize, PROT_READ|PROT_WRITE, MAP_ANON, -1, 0);
	assert(src != MAP_FAILED);

	dst = mmap(NULL, 2 * pagesize, PROT_READ|PROT_WRITE, MAP_ANON, -1, 0);
	assert(dst != MAP_FAILED);

	mprotect((char *)src + pagesize, pagesize, PROT_NONE);
	src = (FbBits *)((char *)src + (pagesize - sizeof map));
	memcpy (src, map, sizeof map);

	for (bpp = 8; bpp <= 32; bpp += 8)
		for (dstX = 0; dstX < 64; dstX += bpp)
			for (srcX = 0; srcX < 32; srcX += bpp)
				fbBlt(src, 1, srcX, dst, 256, dstX,
				    (32 - srcX), 2, alu, pm, bpp, 0, 0);

	for (bpp = 8; bpp <= 32; bpp += 8)
		for (dstX = 0; dstX < 64; dstX += bpp)
			for (srcX = 0; srcX < 32; srcX += bpp)
				fbBlt(src, 1, srcX, dst, 256, dstX,
				    (64 - srcX), 1, alu, pm, bpp, 0, 0);

	return 0;
}
@


1.3
log
@Fix mmap() calls that check for a result other than MAP_FAILED.

ok tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: blt.c,v 1.2 2013/10/28 08:47:43 jsg Exp $	*/
d12 1
@


1.2
log
@include string.h for memcpy()
@
text
@d1 1
a1 1
/*	$OpenBSD: blt.c,v 1.1 2005/08/31 20:53:49 kettenis Exp $	*/
d37 1
a37 1
	assert(src);
d40 1
a40 1
	assert(dst);
@


1.1
log
@Add regression test for fbBlt().
permission from deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d11 1
@

