head	1.6;
access;
symbols
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.8
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.6
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.4
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.5.0.6
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.4
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.4.0.34
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.32
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.30
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.28
	OPENBSD_5_0:1.4.0.26
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.24
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.22
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.18
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.20
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.16
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.14
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.12
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.10
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.8
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.6
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.4
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.2
	OPENBSD_3_8_BASE:1.4;
locks; strict;
comment	@ * @;


1.6
date	2014.09.27.06.28.45;	author doug;	state Exp;
branches;
next	1.5;
commitid	f4Emp3aOD3XoUoYk;

1.5
date	2013.10.28.08.47.43;	author jsg;	state Exp;
branches;
next	1.4;

1.4
date	2005.08.27.14.00.57;	author kettenis;	state Exp;
branches;
next	1.3;

1.3
date	2005.08.27.06.50.03;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.25.19.41.23;	author kettenis;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.15.18.53.42;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Fix mmap() calls that check for a result other than MAP_FAILED.

ok tedu@@
@
text
@/*	$OpenBSD: bltone.c,v 1.5 2013/10/28 08:47:43 jsg Exp $	*/
/*
 *	Written by Mark Kettenis <kettenis@@openbsd.org> 2004 Public Domain
 */

#include <sys/types.h>
#include <sys/mman.h>

#include <assert.h>
#include <stddef.h>
#include <string.h>

typedef unsigned FbStip;
typedef unsigned FbBits;
typedef int FbStride;

extern void fbBltOne (FbStip *, FbStride, int, FbBits *, FbStride, int, int,
		      int, int, FbBits, FbBits, FbBits, FbBits);

FbStip mask[] = { 0x77ff7700, 0x11335577 };

int
main (void)
{
	int pagesize;
	FbStip *src;
	FbBits *dst;
	int srcX, dstX;
	int dstBpp;

	pagesize = getpagesize();

	src = mmap(NULL, 2 * pagesize, PROT_READ|PROT_WRITE, MAP_ANON, -1, 0);
	assert(src != MAP_FAILED);

	dst = mmap(NULL, 2 * pagesize, PROT_READ|PROT_WRITE, MAP_ANON, -1, 0);
	assert(dst != MAP_FAILED);

	mprotect((char *)src + pagesize, pagesize, PROT_NONE);
	src = (FbStip *)((char *)src + (pagesize - sizeof mask));
	memcpy (src, mask, sizeof mask);

	for (dstBpp = 8; dstBpp <= 32; dstBpp += 8)
		for (dstX = 0; dstX < 64; dstX += 8)
			for (srcX = 0; srcX < 32; srcX++)
				fbBltOne(src, 1, srcX, dst, 128, dstX, dstBpp,
				    (32 - srcX) * dstBpp, 2,
				    0, 0, 0xffffffff, 0);

	for (dstBpp = 8; dstBpp <= 32; dstBpp += 8)
		for (dstX = 0; dstX < 64; dstX += 8)
			for (srcX = 0; srcX < 32; srcX++)
				fbBltOne(src, 1, srcX, dst, 128, dstX, dstBpp,
				    (64 - srcX) * dstBpp, 1,
				    0, 0, 0xffffffff, 0);

  return 0;
}
@


1.5
log
@include string.h for memcpy()
@
text
@d1 1
a1 1
/*	$OpenBSD: bltone.c,v 1.4 2005/08/27 14:00:57 kettenis Exp $	*/
d34 1
a34 1
	assert(src);
d37 1
a37 1
	assert(dst);
@


1.4
log
@Provide prototype for the function we actually use.
KNF.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bltone.c,v 1.2 2005/08/25 19:41:23 kettenis Exp $	*/
d11 1
@


1.3
log
@backout unapproved diff
@
text
@d1 1
a1 1
/*	$OpenBSD: bltone.c,v 1.1 2005/08/15 18:53:42 kettenis Exp $	*/
d16 2
a17 2
extern void fbBltOne24 (FbStip *, FbStride, int, FbBits *, FbStride, int, int,
			int, int, FbBits, FbBits, FbBits, FbBits);
d24 31
a54 31
  int pagesize;
  FbStip *src;
  FbBits *dst;
  int srcX, dstX;
  int dstBpp;

  pagesize = getpagesize();

  src = mmap(NULL, 2 * pagesize, PROT_READ|PROT_WRITE, MAP_ANON, -1, 0);
  assert (src);

  dst = mmap(NULL, 2 * pagesize, PROT_READ|PROT_WRITE, MAP_ANON, -1, 0);
  assert (dst);

  mprotect((char *)src + pagesize, pagesize, PROT_NONE);
  src = (FbStip *)((char *)src + (pagesize - sizeof mask));
  memcpy (src, mask, sizeof mask);

  for (dstBpp = 8; dstBpp <= 32; dstBpp += 8)
    for (dstX = 0; dstX < 64; dstX += 8)
      for (srcX = 0; srcX < 32; srcX++)
	fbBltOne(src, 1, srcX, dst, 128, dstX, dstBpp,
		 (32 - srcX) * dstBpp, 2,
		 0, 0, 0xffffffff, 0);

  for (dstBpp = 8; dstBpp <= 32; dstBpp += 8)
    for (dstX = 0; dstX < 64; dstX += 8)
      for (srcX = 0; srcX < 32; srcX++)
	fbBltOne(src, 1, srcX, dst, 128, dstX, dstBpp,
		 (64 - srcX) * dstBpp, 1,
		 0, 0, 0xffffffff, 0);
@


1.2
log
@Provide prototype for the function we actually use.
KNF.
@
text
@d16 2
a17 2
extern void fbBltOne (FbStip *, FbStride, int, FbBits *, FbStride, int, int,
		      int, int, FbBits, FbBits, FbBits, FbBits);
d24 31
a54 31
	int pagesize;
	FbStip *src;
	FbBits *dst;
	int srcX, dstX;
	int dstBpp;

	pagesize = getpagesize();

	src = mmap(NULL, 2 * pagesize, PROT_READ|PROT_WRITE, MAP_ANON, -1, 0);
	assert(src);

	dst = mmap(NULL, 2 * pagesize, PROT_READ|PROT_WRITE, MAP_ANON, -1, 0);
	assert(dst);

	mprotect((char *)src + pagesize, pagesize, PROT_NONE);
	src = (FbStip *)((char *)src + (pagesize - sizeof mask));
	memcpy (src, mask, sizeof mask);

	for (dstBpp = 8; dstBpp <= 32; dstBpp += 8)
		for (dstX = 0; dstX < 64; dstX += 8)
			for (srcX = 0; srcX < 32; srcX++)
				fbBltOne(src, 1, srcX, dst, 128, dstX, dstBpp,
				    (32 - srcX) * dstBpp, 2,
				    0, 0, 0xffffffff, 0);

	for (dstBpp = 8; dstBpp <= 32; dstBpp += 8)
		for (dstX = 0; dstX < 64; dstX += 8)
			for (srcX = 0; srcX < 32; srcX++)
				fbBltOne(src, 1, srcX, dst, 128, dstX, dstBpp,
				    (64 - srcX) * dstBpp, 1,
				    0, 0, 0xffffffff, 0);
@


1.1
log
@Add regression test for fbBltOne().
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d16 2
a17 2
extern void fbBltOne24 (FbStip *, FbStride, int, FbBits *, FbStride, int, int,
			int, int, FbBits, FbBits, FbBits, FbBits);
d24 31
a54 31
  int pagesize;
  FbStip *src;
  FbBits *dst;
  int srcX, dstX;
  int dstBpp;

  pagesize = getpagesize();

  src = mmap(NULL, 2 * pagesize, PROT_READ|PROT_WRITE, MAP_ANON, -1, 0);
  assert (src);

  dst = mmap(NULL, 2 * pagesize, PROT_READ|PROT_WRITE, MAP_ANON, -1, 0);
  assert (dst);

  mprotect((char *)src + pagesize, pagesize, PROT_NONE);
  src = (FbStip *)((char *)src + (pagesize - sizeof mask));
  memcpy (src, mask, sizeof mask);

  for (dstBpp = 8; dstBpp <= 32; dstBpp += 8)
    for (dstX = 0; dstX < 64; dstX += 8)
      for (srcX = 0; srcX < 32; srcX++)
	fbBltOne(src, 1, srcX, dst, 128, dstX, dstBpp,
		 (32 - srcX) * dstBpp, 2,
		 0, 0, 0xffffffff, 0);

  for (dstBpp = 8; dstBpp <= 32; dstBpp += 8)
    for (dstX = 0; dstX < 64; dstX += 8)
      for (srcX = 0; srcX < 32; srcX++)
	fbBltOne(src, 1, srcX, dst, 128, dstX, dstBpp,
		 (64 - srcX) * dstBpp, 1,
		 0, 0, 0xffffffff, 0);
@

