head	1.72;
access;
symbols
	OPENBSD_6_1:1.54.0.4
	OPENBSD_6_1_BASE:1.54
	OPENBSD_6_0:1.50.0.2
	OPENBSD_6_0_BASE:1.50
	OPENBSD_5_9:1.48.0.2
	OPENBSD_5_9_BASE:1.48
	OPENBSD_5_8:1.44.0.8
	OPENBSD_5_8_BASE:1.44
	OPENBSD_5_7:1.44.0.6
	OPENBSD_5_7_BASE:1.44
	OPENBSD_5_6:1.44.0.4
	OPENBSD_5_6_BASE:1.44
	OPENBSD_5_5:1.40.0.4
	OPENBSD_5_5_BASE:1.40
	OPENBSD_5_4:1.33.0.2
	OPENBSD_5_4_BASE:1.33
	OPENBSD_5_3:1.25.0.2
	OPENBSD_5_3_BASE:1.25
	OPENBSD_5_2:1.24.0.2
	OPENBSD_5_2_BASE:1.24
	OPENBSD_5_1_BASE:1.23
	OPENBSD_5_1:1.23.0.2
	OPENBSD_5_0:1.22.0.4
	OPENBSD_5_0_BASE:1.22
	OPENBSD_4_9:1.22.0.2
	OPENBSD_4_9_BASE:1.22
	OPENBSD_4_8:1.16.0.4
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.2
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.15.0.4
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.13.0.2
	OPENBSD_4_5_BASE:1.13;
locks; strict;
comment	@# @;


1.72
date	2017.06.23.19.56.57;	author schwarze;	state Exp;
branches;
next	1.71;
commitid	YUXw8uNAEHdtW315;

1.71
date	2017.06.23.19.16.49;	author schwarze;	state Exp;
branches;
next	1.70;
commitid	rtY3OIWFhKOgS9Rx;

1.70
date	2017.06.23.19.07.25;	author schwarze;	state Exp;
branches;
next	1.69;
commitid	pcK0hL9ec95igpRQ;

1.69
date	2017.06.17.19.17.41;	author schwarze;	state Exp;
branches;
next	1.68;
commitid	5g3GEZu0THI2jDNJ;

1.68
date	2017.06.08.18.25.16;	author schwarze;	state Exp;
branches;
next	1.67;
commitid	7n1kQCIlvsw7GHlM;

1.67
date	2017.06.07.21.05.19;	author schwarze;	state Exp;
branches;
next	1.66;
commitid	6nKRO0WNRbea1bty;

1.66
date	2017.06.03.12.23.13;	author schwarze;	state Exp;
branches;
next	1.65;
commitid	tlKFLVJWEvv9FeRN;

1.65
date	2017.06.01.14.55.24;	author schwarze;	state Exp;
branches;
next	1.64;
commitid	unDGu9KOAgvJxvpn;

1.64
date	2017.05.31.15.35.22;	author schwarze;	state Exp;
branches;
next	1.63;
commitid	i5GRSGNwObCDeoGV;

1.63
date	2017.05.15.17.24.48;	author schwarze;	state Exp;
branches;
next	1.62;
commitid	SlAHdqVKOQrkZuVt;

1.62
date	2017.05.15.13.36.05;	author schwarze;	state Exp;
branches;
next	1.61;
commitid	GHdS36eSEVavh2eS;

1.61
date	2017.05.14.20.02.00;	author schwarze;	state Exp;
branches;
next	1.60;
commitid	5Fgd1RChN75p2OFZ;

1.60
date	2017.05.14.13.20.02;	author schwarze;	state Exp;
branches;
next	1.59;
commitid	hoBNAJYb9y7xLn8d;

1.59
date	2017.05.02.17.51.32;	author schwarze;	state Exp;
branches;
next	1.58;
commitid	FtlVJ0oMhEZGatQH;

1.58
date	2017.05.02.17.44.31;	author schwarze;	state Exp;
branches;
next	1.57;
commitid	nrNfcg8OnLul3GZe;

1.57
date	2017.04.28.14.11.01;	author schwarze;	state Exp;
branches;
next	1.56;
commitid	yEWzbSsJU36uovFS;

1.56
date	2017.04.27.22.27.43;	author schwarze;	state Exp;
branches;
next	1.55;
commitid	MThURTgVathq3ccr;

1.55
date	2017.04.27.22.07.06;	author schwarze;	state Exp;
branches;
next	1.54;
commitid	5s9tsYcknJScGX3I;

1.54
date	2017.01.25.07.24.34;	author jmc;	state Exp;
branches;
next	1.53;
commitid	uLz9WTQglel6ay4n;

1.53
date	2016.09.03.13.37.41;	author guenther;	state Exp;
branches;
next	1.52;
commitid	6T3r4QcMFKe3Fo5T;

1.52
date	2016.09.01.10.55.27;	author jmc;	state Exp;
branches;
next	1.51;
commitid	Maq2uCciOtT0eeEW;

1.51
date	2016.08.10.17.37.01;	author jmc;	state Exp;
branches;
next	1.50;
commitid	O5Tjd8GzDmHmRMb3;

1.50
date	2016.05.13.17.52.59;	author jmc;	state Exp;
branches;
next	1.49;
commitid	f2QKduxdEDlqPVsG;

1.49
date	2016.03.10.09.00.45;	author jmc;	state Exp;
branches;
next	1.48;
commitid	V22VxDvxrO4xVfDa;

1.48
date	2016.01.24.20.10.48;	author schwarze;	state Exp;
branches;
next	1.47;
commitid	IHgJFdt538B2OF26;

1.47
date	2015.12.06.08.55.09;	author schwarze;	state Exp;
branches;
next	1.46;
commitid	MQj3TtRpwW3h65HZ;

1.46
date	2015.12.01.22.27.28;	author jmc;	state Exp;
branches;
next	1.45;
commitid	eUEJRnjrPoI0U4z7;

1.45
date	2015.12.01.07.50.06;	author deraadt;	state Exp;
branches;
next	1.44;
commitid	Rh8AZFtVMVCiwPts;

1.44
date	2014.06.24.12.41.19;	author jmc;	state Exp;
branches;
next	1.43;
commitid	bSJwYa6pY55tv97H;

1.43
date	2014.03.31.12.51.12;	author jmc;	state Exp;
branches;
next	1.42;

1.42
date	2014.03.18.22.36.30;	author miod;	state Exp;
branches;
next	1.41;

1.41
date	2014.03.06.17.41.28;	author jmc;	state Exp;
branches;
next	1.40;

1.40
date	2014.01.04.18.27.03;	author jmc;	state Exp;
branches;
next	1.39;

1.39
date	2013.09.30.18.27.17;	author jmc;	state Exp;
branches;
next	1.38;

1.38
date	2013.09.04.19.39.19;	author patrick;	state Exp;
branches;
next	1.37;

1.37
date	2013.08.21.13.22.03;	author jmc;	state Exp;
branches;
next	1.36;

1.36
date	2013.08.05.07.24.19;	author jmc;	state Exp;
branches;
next	1.35;

1.35
date	2013.08.05.07.16.19;	author jmc;	state Exp;
branches;
next	1.34;

1.34
date	2013.08.05.07.09.42;	author jmc;	state Exp;
branches;
next	1.33;

1.33
date	2013.06.02.14.33.18;	author jmc;	state Exp;
branches;
next	1.32;

1.32
date	2013.03.26.18.28.11;	author jmc;	state Exp;
branches;
next	1.31;

1.31
date	2013.03.14.21.47.57;	author jmc;	state Exp;
branches;
next	1.30;

1.30
date	2013.03.14.21.37.00;	author jmc;	state Exp;
branches;
next	1.29;

1.29
date	2013.03.14.21.22.52;	author jmc;	state Exp;
branches;
next	1.28;

1.28
date	2013.03.14.18.25.39;	author jmc;	state Exp;
branches;
next	1.27;

1.27
date	2013.03.14.18.18.26;	author jmc;	state Exp;
branches;
next	1.26;

1.26
date	2013.03.10.21.57.04;	author jmc;	state Exp;
branches;
next	1.25;

1.25
date	2012.08.23.14.44.42;	author jmc;	state Exp;
branches;
next	1.24;

1.24
date	2012.06.20.19.23.45;	author jmc;	state Exp;
branches;
next	1.23;

1.23
date	2011.10.03.06.58.16;	author jmc;	state Exp;
branches;
next	1.22;

1.22
date	2011.01.02.13.02.23;	author jmc;	state Exp;
branches;
next	1.21;

1.21
date	2010.12.03.20.22.45;	author jmc;	state Exp;
branches;
next	1.20;

1.20
date	2010.12.03.08.06.26;	author jmc;	state Exp;
branches;
next	1.19;

1.19
date	2010.09.26.15.13.32;	author jmc;	state Exp;
branches;
next	1.18;

1.18
date	2010.09.01.17.32.53;	author jmc;	state Exp;
branches;
next	1.17;

1.17
date	2010.08.31.17.58.16;	author jmc;	state Exp;
branches;
next	1.16;

1.16
date	2010.02.10.08.36.33;	author jmc;	state Exp;
branches;
next	1.15;

1.15
date	2009.05.18.15.37.09;	author jmc;	state Exp;
branches;
next	1.14;

1.14
date	2009.04.13.12.40.05;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	2008.12.31.10.55.11;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2008.12.11.14.49.02;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2008.11.23.17.07.36;	author jmc;	state Exp;
branches;
next	1.10;

1.10
date	2008.11.07.20.20.33;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2008.11.03.12.17.01;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2008.11.03.12.14.46;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2008.11.01.17.59.27;	author grunk;	state Exp;
branches;
next	1.6;

1.6
date	2008.11.01.16.17.30;	author grunk;	state Exp;
branches;
next	1.5;

1.5
date	2008.11.01.15.01.49;	author grunk;	state Exp;
branches;
next	1.4;

1.4
date	2008.11.01.07.49.54;	author jmc;	state Exp;
branches;
next	1.3;

1.3
date	2008.10.31.14.42.44;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2008.10.31.14.26.56;	author jmc;	state Exp;
branches;
next	1.1;

1.1
date	2008.10.31.14.11.04;	author jmc;	state Exp;
branches;
next	;


desc
@@


1.72
log
@delete unused "lastline" state variable and some commented out lines;
no functional change
@
text
@#!/usr/bin/perl
#
# $OpenBSD: mdoclint,v 1.71 2017/06/23 19:16:49 schwarze Exp $
# $NetBSD: mdoclint,v 1.77 2017/06/08 10:19:56 wiz Exp $
#
# Copyright (c) 2001-2017 Thomas Klausner
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR, THOMAS KLAUSNER,
# ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

use strict;
use warnings;

$| = 1;

package Parser;
use Getopt::Std;

use constant {
	OPENBSD => 1,
	NETBSD => 0,
};

use vars qw(
	$opt_D $opt_F $opt_h
	$opt_m $opt_o $opt_p $opt_S $opt_v $opt_w $opt_x
);


my $arch=`uname -m`;
chomp($arch);
my $options="DFhmopSvwx";

sub usage
{
	print STDERR <<"EOF";
mdoclint: verify man page correctness
usage:	mdoclint [-$options] file ...
	-D	warn about bad casing and archs in .Dt
	-F	fix whitespace problems (asks before overwriting)
	-h	display this help text
	-m	warn about man pages that are not in mdoc(7) format
	-o	warn about non-empty .Os strings
	-p	warn about punctuation problems
	-S	warn about any .Sh weirdness
	-v	verbose output
	-w	show section header in warnings
	-x	warn about cross-references with missing targets
Default is -DmopSx if no flag is specified.
EOF
	exit(0);
}

# constants to build
my %sections;
my $arches_re;
my $sections_re;
my $esections_re;

# and the code that builds them
{
	my @@sections = (
		"NAME",
		NETBSD ? "LIBRARY" : undef,
		"SYNOPSIS",
		"DESCRIPTION",
		OPENBSD ? "CONTEXT" : undef ,
		NETBSD ? "IMPLEMENTATION NOTES" : undef,
		"RETURN VALUES",
		"ENVIRONMENT",
		"FILES",
		"EXIT STATUS",
		"EXAMPLES",
		"DIAGNOSTICS",
		NETBSD ? "COMPATIBILITY" : undef,
		"ERRORS",
		NETBSD ? "CODE REFERENCES" : undef,
		"SEE ALSO",
		"STANDARDS",
		"HISTORY",
		"AUTHORS",
		"CAVEATS",
		"BUGS",
		NETBSD ? "SECURITY CONSIDERATIONS" : undef
	);

	my $i = 1;
	for my $sh (@@sections) {
		if (defined $sh) {
			$sections{$sh} = $i++;
		}
	}
	my @@arches;
	if (OPENBSD) {
		@@arches =
		    (qw(alpha amd64 arm64 armv7 hppa i386
		    landisk loongson luna88k macppc mips64 octeon sgi
		    socppc sparc64));
	}
	if (NETBSD) {
		@@arches =
		    (qw(acorn26 acorn32 algor alpha amiga arc atari
		    bebox cats cesfic cobalt dreamcast
		    emips evbarm evbmips evbppc
		    evbsh3 evbsh5 hp300 hpcarm hpcmips hpcsh hppa
		    i386 ibmnws luna68k mac68k macppc mipsco mmeye
		    mvme68k mvmeppc netwinder news68k newsmips next68k
		    pc532 playstation2 pmax pmppc prep sandpoint sbmips
		    sgimips shark sparc sparc64 sun2 sun3 vax walnut
		    x68k x86 x86_64 xen));
	}
	my $a = join('|', @@arches);
	$arches_re = qr{(?:$a)}o;
	if (OPENBSD) {
		$sections_re = qr{(?:3p|[1-9])}o;
		$esections_re = qr{(?:3p|[0-9])}o;
	}
	if (NETBSD) {
		$sections_re = qr{[1-9](?:lua)?}o;
		$esections_re = qr{[0-9](?:lua)?}o;
	}
}

sub debug
{
	my $self = shift;
    	print STDOUT "debug: $self->{fn}:$self->{ln}: @@_\n" if $opt_v;
}

sub warning
{
	my $self = shift;
	my $extra = "";
	if ($opt_w) {
		$extra = $self->{current_section_header}.":";
	}
	print STDOUT "$self->{fn}:$extra$self->{ln}: ", join('', @@_), "\n";
}

sub handle_options
{
	getopts($options);
	$opt_h and usage();

	# default to all warnings if no flag is set
	unless ($opt_D or $opt_m or $opt_o or $opt_p or $opt_S or $opt_x) {
		$opt_D = $opt_m = $opt_o = $opt_p = $opt_S = $opt_x = 1;
	}
}


sub verify_xref
{
	my ($self, $page, $section, $pre, $post) = @@_;
	if ($self->{names}{$page.$section}) {
		$self->warning("Xref to itself (use .Nm instead)") if $opt_x;
	}
	# try to find corresponding man page
	if (OPENBSD) {
		open my $saveout, '>&', STDOUT;
		open my $saveerr, '>&', STDERR;
		open STDOUT, '>', '/dev/null';
		open STDERR, '>', '/dev/null';
		my $irc = system 'man', '-M', '/usr/share/man:/usr/X11R6/man',
		    '-s', $section, '-f', $page;
		open STDOUT, '>&', $saveout;
		open STDERR, '>&', $saveerr;
		return 1 unless $irc;
	} else {
		for my $dir ('/usr/share/man', '/usr/X11R7/man') {
			for my $a ('', $arch) {
				for my $page ("man$section/$a/$page.$section") {
					return 1 if -f "$dir/$page";
				}
			}
		}
	}
	return 1 if -f "./$page.$section";
	return 1 if -f "./$page.mdoc";

	$self->warning($pre."trailing Xref to $page($section)$post") if $opt_x;
	return 0;
}

sub new
{
	my ($class, $fn) = @@_;

	my $o = {
		mandoc_p => 1,
		all => [],
		changes => 0,
		shseen => {},
		current_section_header => '',
		sec => '0',
		names => { $fn => 1 },
		fn => $fn
	};
	$o->{sec} = $1 if $fn =~ /\.(.+?)$/;
	open my $input, '<', $fn or die "can't open input file $fn";
	$o->{file} = $input;
	$o->{ln} = 0;
	bless $o, $class;
}

sub next_line
{
	my ($self) = @@_;

	my $l = readline($self->{file});
	if (defined $l) {
		$self->{ln}++;
	}
	return $l;
}

sub close
{
	my ($self) = @@_;

	close($self->{file});
}

sub parse_macro_args
{
	my ($s, $string) = @@_;
	$_ = $string;
	my @@params = ();
	while (!/^$/) {
		if (s/^\"(.*?)\"\s*//) {
			push(@@params, $1);
		} elsif (s/^(\S+)\s*//) {
			push(@@params, $1);
		}
	}
	return @@params;
}

sub set_section_header
{
	my ($s, $section_header) = @@_;
	$section_header = join(' ', $s->parse_macro_args($section_header));

	if (not $sections{$section_header}) {
		$s->warning("unknown section header: ",
		    "`$section_header'") if $opt_S;
	} else {
		$s->{shseen}->{$section_header} = 1;
	}

	$s->{current_section_header} = $section_header;
}

sub process_and_save_line
{
	my ($s, $input) = @@_;
	my $result = $s->process_line($input);
	# note that process_line chomps \n, then re-adds it,
	# so we detect a change on last lines without a \n.
	if ($result ne "$input") {
		$s->{changes} = 1;
	}
	push(@@{$s->{all}}, $result);
}

sub process_line
{
	my $s;
	($s, $_) = @@_;
	chomp;
	# always cut trailing spaces
	s/\s+$//o;
	# comments
	if (/^\.\\\"/) {
		return "$_\n";
	}
	if (/^\.TH\s+/o) {
		$s->warning("not mandoc") if $opt_m;
		$s->{mandoc_p} = 0;
		return "$_\n";
	}
	if (/^\.Dt\s+/o) {
		if (/^\.Dt\s+(?:[A-Z\d._-]+)\s+($sections_re)(?:\s+$arches_re)?$/o)  {
			$s->{sec} = $1;
		} else {
			$s->warning("bad .Dt: `$_'") if $opt_D;
		}
	}

	if ($s->{mandoc_p}) {
		if (/^\.Sh\s+(.*)$/o) {
			my $line = $_;
			$s->set_section_header($1);
			return "$line\n";
		}
	} else {
		if (/^\.SH\s+(.*)$/o) {
			my $line = $_;
			$s->set_section_header($1);
			return "$line\n";
		}
	}

	if ($s->{current_section_header} eq "NAME") {
		if (/^\.Nm\s+(\S+)/o) {
			$s->{names}{$1.$s->{sec}} = 1;
		}
	}
	if (/^\.Os\s+(.+)/o) {
		$s->warning(".Os used with argument `$1'") if $opt_o;
	}
	if (/^\./o and /Ns [\.();,\[\]\{\}:]/o) {
		$s->warning("possible Ns abuse: `$_'") if $opt_p;
	}

	my $destruct = $_;
	if ($s->{mandoc_p}) {
		$destruct =~ s/\\\&([\w\.])/$1/o;
		if ($destruct =~ /^\.Xr\s+([\w\:\.\-\+\/]+)\s+($esections_re)(.*)/o) {
			$s->debug("Xref to $1($2) found: `$_'");
			$s->verify_xref($1, $2, "", "");
			if ($3 =~ /^\S/o) {
				$s->warning("No space after section number in Xref: `$_'") if $opt_x;
			}
		} elsif ($destruct =~ /^\.Xr/o) {
			$s->warning("Weird Xref found: `$_'") if $opt_x;
		}
	} else {
		$destruct =~ s/\\f.//go;
		if ($destruct !~ /^\.\\\"/o) {
			while ($destruct =~ s/([-\w.]+)\s*\(($esections_re)\)//o) {
				$s->debug("possible Xref to $1($2) found: `$_'");
				$s->verify_xref($1, $2, "possible ", ": `$_'");
				# so that we have a chance to find more than one
				# per line
				$destruct =~ s/(\w+)\s*\(($sections_re)\)//o;
			}
		}
	}
	return "$_\n";
}

sub finish
{
	my ($s) = @@_;

	if ($s->{mandoc_p}) {
		foreach my $i (qw(NAME SYNOPSIS DESCRIPTION)) {
			if (not ($s->{shseen}{$i})) {
				$s->warning("missing $i section") if $opt_S;
			}
		}
	}
}

package main;

sub handle_file
{
	my $parser = Parser->new($_[0]);

	while ($_ = $parser->next_line) {
		$parser->process_and_save_line($_);
	}

	$parser->finish;
	$parser->close;
	if ($Parser::opt_F and $parser->{changes}) {
		open OUT, ">$_[0].new" or
		    die "can't open output file `$_[0].new'";
		for my $l (@@{$parser->{all}}) {
			print OUT $l
		}
		close OUT;
		system("mv -i $_[0].new $_[0]");
	}
}

Parser->handle_options;
foreach my $file (@@ARGV) {
	handle_file($file);
}
@


1.71
log
@delete warning about missing whitespace before trailing punctuation;
mandoc handles this now, not in exactly the same way, but catching
all the important cases, and with less false positives;
no objection from jmc@@
@
text
@d3 1
a3 1
# $OpenBSD: mdoclint,v 1.70 2017/06/23 19:07:25 schwarze Exp $
a211 1
		lastline => '',
a299 2
#	    	/^.TH\s*[\w-_".]+\s*([1-9])/;
#	    	$section = $1;
a301 3
#	if (/^.Dt\s*[\w-_".]+\s*([1-9])/) {
#	    	$section = $1;
#	}
a359 1
	$s->{lastline} = $_;
@


1.70
log
@delete -r, RCS id checks are now covered by mandoc,
and garbage collect the unused "inliteral" state variable;
ok jmc@@
@
text
@d3 1
a3 1
# $OpenBSD: mdoclint,v 1.69 2017/06/17 19:17:41 schwarze Exp $
a336 5
	}
	if (/^\... .*[^\s][\.();,\[\]\{\}:]$/o
	    and not /\s\.\.\.$/o and not /\\&.$/o) {
		$s->warning("punctuation in format string ",
		    "without space: `$_'") if $opt_p;
@


1.69
log
@delete the -d option and the "use .Fn or .Xr for functions" check,
both covered by mandoc now; OK jmc@@
@
text
@d3 1
a3 1
# $OpenBSD: mdoclint,v 1.68 2017/06/08 18:25:16 schwarze Exp $
d46 1
a46 1
	$opt_m $opt_o $opt_p $opt_r $opt_S $opt_v $opt_w $opt_x
d52 1
a52 1
my $options="DFhmoprSvwx";
a64 1
	-r	warn about missing RCS Id
d69 1
a69 1
Default is -DmoprSx if no flag is specified.
d166 2
a167 4
	unless ($opt_D or $opt_m
	    or $opt_o or $opt_p or $opt_r or $opt_S or $opt_x) {
		$opt_D = $opt_m =
		    $opt_o = $opt_p = $opt_r = $opt_S = $opt_x = 1;
a213 3
		oxrcsidseen => 0,
		nxrcsidseen => 0,
		inliteral => 0,
a293 14
	if (/\$OpenBSD\b.*\$/o) {
		$s->{oxrcsidseen}++;
		if (OPENBSD and ($s->{oxrcsidseen} > 1)) {
		    $s->warning("RCS Id seen twice") if $opt_r;
		}
		return "$_\n";
	}
	if (/[\$]NetBSD\b.*\$/o) {
		$s->{nxrcsidseen}++;
		if (NETBSD and ($s->{nxrcsidseen} > 1)) {
		    $s->warning("RCS Id seen twice") if $opt_r;
		}
		return "$_\n";
	}
a370 9
	if (/^\.Bd\b.*-(?:literal|unfilled)\b/o) {
		$s->{inliteral} = 1;
	}
	if ($s->{inliteral} == 1) {
		if (/^\.Ed\b/o) {
		    $s->{inliteral} = 0;
		}
	}

a378 6
	if (NETBSD and not $s->{nxrcsidseen}) {
		$s->warning("Missing RCS Id") if $opt_r;
	}
	if (OPENBSD and not $s->{oxrcsidseen}) {
		$s->warning("Missing RCS Id") if $opt_r;
	}
@


1.68
log
@delete -e and -l, now covered by mandoc; OK jmc@@ wiz@@
@
text
@d3 1
a3 1
# $OpenBSD: mdoclint,v 1.67 2017/06/07 21:05:19 schwarze Exp $
d45 1
a45 1
	$opt_D $opt_d $opt_F $opt_h
d52 1
a52 1
my $options="DdFhmoprSvwx";
a59 1
	-d	warn about bad date strings (in .Dd only)
d70 1
a70 1
Default is -DdmoprSx if no flag is specified.
d80 1
a80 1
my $valid_date_re;
a142 6
	if (OPENBSD) {
		$valid_date_re = qr{\$Mdocdate\b};
	}
	if (NETBSD) {
		$valid_date_re = qr{(?:January|February|March|April|May|June|July|August|September|October|November|December)\s*[1-9][0-9]*,\s*(?:198[0-9]|199[0-9]|200[0-9]|201[0-7])$}o;
	}
d167 1
a167 1
	unless ($opt_D or $opt_d or $opt_m
d169 1
a169 1
		$opt_D = $opt_d = $opt_m =
a365 3
	if ((/^([^\.]\w+)\(\)/o or /^[^\.].*\s(\w+)\(\)/o) and not $s->{inliteral}) {
		$s->warning("use .Fn or .Xr for functions: `$1()'") if $opt_p;
	}
a390 5

	if (/^\.Dd/o and not /^\.Dd\s+$valid_date_re/o) {
		$s->warning("Invalid date found: `$_'") if $opt_d;
	}

@


1.67
log
@Remove "new sentence, new line" detection, covered by mandoc.
OK jmc@@ wiz@@
@
text
@d3 2
a4 2
# $OpenBSD: mdoclint,v 1.66 2017/06/03 12:23:13 schwarze Exp $
# $NetBSD: mdoclint,v 1.76 2017/06/07 19:17:29 wiz Exp $
d45 1
a45 1
	$opt_D $opt_d $opt_e $opt_F $opt_h $opt_l
d52 1
a52 1
my $options="DdeFhlmoprSvwx";
d55 1
a55 3
	{
	my $default = OPENBSD ? "-DdmoprSx" : "-DdelmoprSx";

a60 1
	-e	warn about unsorted errors (for functions)
a62 1
	-l	warn about unknown libraries
d71 1
a71 1
Default is $default if no flag is specified.
a75 60

my %libraries = (
    "libarchive" => 1,
    "libarm" => 1,
    "libarm32" => 1,
    "libbluetooth" => 1,
    "libc" => 1,
    "libcdk" => 1,
    "libcompat" => 1,
    "libcrypt" => 1,
    "libcurses" => 1,
    "libdm" => 1,
    "libedit" => 1,
    "libelf" => 1,
    "libevent" => 1,
    "libexecinfo" => 1,
    "libfetch" => 1,
    "libform" => 1,
    "libi386" => 1,
    "libintl" => 1,
    "libipsec" => 1,
    "libiscsi" => 1,
    "libisns" => 1,
    "libkvm" => 1,
    "libm" => 1,
    "libm68k" => 1,
    "libmagic" => 1,
    "libmandoc" => 1,
    "libmenu" => 1,
    "libmj" => 1,
    "libnetpgp" => 1,
    "libnetpgpverify" => 1,
    "libnpf" => 1,
    "libossaudio" => 1,
    "libpam" => 1,
    "libpcap" => 1,
    "libpci" => 1,
    "libperfuse" => 1,
    "libpmc" => 1,
    "libposix" => 1,
    "libppath" => 1,
    "libprop" => 1,
    "libpthread" => 1,
    "libpthread_dbg" => 1,
    "libpuffs" => 1,
    "libquota" => 1,
    "librefuse" => 1,
    "libresolv" => 1,
    "librt" => 1,
    "librumpclient" => 1,
    "libsaslc" => 1,
    "libssp" => 1,
    "libtermcap" => 1,
    "libterminfo" => 1,
    "libusbhid" => 1,
    "libutil" => 1,
    "libx86_64" => 1,
    "libz" => 1
);

d174 1
a174 1
	unless ($opt_D or $opt_d or $opt_e or $opt_l or $opt_m
a177 1
		$opt_e = $opt_l = 1 if NETBSD;
a227 1
		last_error_name => '',
a361 6

	if (/^\.Lb\s+(\S+)/o) {
		if (not $libraries{$1}) {
			$s->warning("Unknown library `$1' used as Lb argument") if $opt_l;
		}
	}
a412 23
	}

	# Check whether the list of possible errors for a function is
	# sorted alphabetically.
	#
	# Error names should not be sorted across different lists.
	# (see bind(2) for an example.)
	#
	/^\.Bl\s+/o and $s->{last_error_name} = "";

	if ($s->{current_section_header} eq "ERRORS" and
	    /^\.It\s+(Bq\s+)?(Er\s+)?(E[\w_]+)$/o) {
		my $current_error_name = $3;

		if ($s->{last_error_name} eq $current_error_name) {
			$s->warning("Duplicate item for ",
			    $current_error_name, ".") if $opt_e;
		} elsif ($current_error_name lt $s->{last_error_name}) {
			$s->warning("$s->{last_error_name} and ",
			    "$current_error_name are not in ",
			    "alphabetical order.") if $opt_e;
		}
		$s->{last_error_name} = $current_error_name;
@


1.66
log
@delete -n option, now covered by mandoc; OK jmc@@
@
text
@d3 2
a4 2
# $OpenBSD: mdoclint,v 1.65 2017/06/01 14:55:24 schwarze Exp $
# $NetBSD: mdoclint,v 1.74 2017/06/01 14:38:50 wiz Exp $
a435 6
	}

	if (/(\w\w)\.\s+[A-Z]/o and not /^.%T/ and not $s->{inliteral}) {
		if ("$1" ne "St") {
			$s->warning("new sentence, new line: `$_'") if $opt_p;
		}
@


1.65
log
@Delete -f.  What matters is covered by mandoc.
OK jmc@@ wiz@@
@
text
@d3 1
a3 1
# $OpenBSD: mdoclint,v 1.64 2017/05/31 15:35:22 schwarze Exp $
d46 1
a46 1
	$opt_m $opt_n $opt_o $opt_p $opt_r $opt_S $opt_v $opt_w $opt_x
d52 1
a52 1
my $options="aDdeFfHhlmnoprSvwXx";
d56 1
a56 1
	my $default = OPENBSD ? "-DdmnoprSx" : "-DdelmnoprSx";
a67 1
	-n	warn about .Nd's ending in '.'
d238 2
a239 3
	unless ($opt_D or $opt_d or $opt_e or $opt_l
		or $opt_m or $opt_n or $opt_o or $opt_p or $opt_r
		or $opt_S or $opt_x) {
d241 1
a241 2
		    $opt_n = $opt_o = $opt_p = $opt_r = $opt_S =
		    $opt_x = 1;
a435 4
	}

	if (/^\.Nd.*\.$/o) {
		$s->warning(".Nd ends with a dot: `$_'") if $opt_n;
@


1.64
log
@remove -X, it was just migrated to mandoc -Wstyle; OK wiz@@
@
text
@d3 2
a4 2
# $OpenBSD: mdoclint,v 1.63 2017/05/15 17:24:48 schwarze Exp $
# $NetBSD: mdoclint,v 1.72 2017/05/16 13:27:39 wiz Exp $
d45 1
a45 1
	$opt_D $opt_d $opt_e $opt_F $opt_f $opt_h $opt_l
d56 1
a56 1
	my $default = OPENBSD ? "-DdfmnoprSx" : "-DdeflmnoprSx";
a64 1
	-f	warn about possible incorrect .Fn syntax
d239 1
a239 1
	unless ($opt_D or $opt_d or $opt_e or $opt_f or $opt_l
d242 1
a242 1
		$opt_D = $opt_d = $opt_f = $opt_m =
a431 3
	if (/^\.Fn.*,.+/o) {
		$s->warning("possible .Fn misuse: `$_'") if $opt_f;
	}
@


1.63
log
@Delete the -H option.
What it did was nothing but bad advice nowadays.
OK jmc@@ wiz@@
@
text
@d3 2
a4 2
# $OpenBSD: mdoclint,v 1.62 2017/05/15 13:36:05 schwarze Exp $
# $NetBSD: mdoclint,v 1.71 2017/05/15 09:33:03 wiz Exp $
d46 1
a46 2
	$opt_m $opt_n $opt_o $opt_p $opt_r $opt_S $opt_v $opt_w
	$opt_X $opt_x
d56 1
a56 1
	my $default = OPENBSD ? "-DdfmnoprSXx" : "-DdeflmnoprSXx";
a75 1
	-X	warn about explicit mentions of the *BSD system names
a82 7
my %short = (
    "Free" => ".Fx",
    "Net" => ".Nx",
    "DragonFly" => ".Dx",
    "Open" => ".Ox"
);

d242 1
a242 1
		or $opt_S or $opt_X or $opt_x) {
d245 1
a245 1
		    $opt_X = $opt_x = 1;
a434 14
	}

	if (/\b(Free|Net|DragonFly|Open)BSD\b/o
	    and not /\b(?:www|ftp)\.(?:Free|Net|DragonFly|Open)BSD\.org\b/o
	    and not /\bOpenBSD\::.*3p\b/o
	    and not /\/pub\/OpenBSD\//o
	    and not /\@@(?:Free|Net|Open)BSD\.(?i:org)\b/o) {
		$s->warning("verbose mention of `$1BSD' instead of "
		    . "`$short{$1}': `$_'") if $opt_X;
	}
	if (/^\./o and (/Bx (Open)/o or /Bx (Free)/o
			or /Bx (DragonFly)/o or /Bx (Net)/o)) {
		$s->warning("`.Bx $1' found -- use $short{$1} instead")
		    if $opt_X;
@


1.62
log
@Delete the obsolete 9-argument-check for .Sh.
Delete the section ordering check covered by mandoc.
Some simplifications and forgotten -a cleanup.
OK jmc@@ wiz@@
@
text
@d3 1
a3 1
# $OpenBSD: mdoclint,v 1.61 2017/05/14 20:02:00 schwarze Exp $
d45 1
a45 1
	$opt_D $opt_d $opt_e $opt_F $opt_f $opt_H $opt_h $opt_l
a66 1
	-H	warn about characters that produce problems in HTML output
d249 1
a249 1
	unless ($opt_D or $opt_d or $opt_e or $opt_f or $opt_H or $opt_l
a443 12
	}
	if (OPENBSD) {
		if (/^(?:[<>])/o or /[^\\][<>]/o) {
			$s->warning("use \*(Lt \*(Gt (or .Aq) ",
			    "instead of < >: `$_'") if $opt_H;
		}
	}
	if (NETBSD) {
		if (/^(?:[<>&])/o or /[^\\][<>&]/o) {
			$s->warning("use \*[Lt] \*[Gt] (or .Aq) \*[Am] ",
			    "instead of < > &: `$_'") if $opt_H;
		}
@


1.61
log
@delete the -a option, it's now fully covered by mandoc -Tlint;
OK jmc@@ wiz@@
@
text
@d3 2
a4 2
# $OpenBSD: mdoclint,v 1.60 2017/05/14 13:20:02 schwarze Exp $
# $NetBSD: mdoclint,v 1.70 2017/05/14 18:04:23 wiz Exp $
a41 1
	SECTION_NAME => 2,
d57 1
a57 1
	my $default = OPENBSD ? "-aDdfmnoprSXx" : "-aDdeflmnoprSXx";
a61 1
	-a	warn about SEE ALSO section problems
a304 2
		lastsh => 0,
		in_section => 0,
a349 3
	if (@@params > 9 and OPENBSD) {
		$s->warning("$string holds >9 parameters");
	}
a357 6
	if ($section_header eq 'NAME') {
		$s->{in_section} = SECTION_NAME;
	} else {
		$s->{in_section} = 0;
	}

a361 4
		if ($s->{lastsh} >= $sections{$section_header}) {
			$s->warning("section header ",
			    "`$section_header' in wrong order") if $opt_S;
		}
a362 1
		$s->{lastsh} = $sections{$section_header};
d437 1
a437 1
	if ($s->{in_section} == SECTION_NAME) {
@


1.60
log
@remove the -s option, it is fully covered by mandoc -Tlint;
OK jmc@@
@
text
@d3 2
a4 2
# $OpenBSD: mdoclint,v 1.59 2017/05/02 17:51:32 schwarze Exp $
# $NetBSD: mdoclint,v 1.68 2017/05/02 13:59:10 wiz Exp $
a42 1
	SECTION_SEE_ALSO => 3,
d46 1
a46 1
	$opt_a $opt_D $opt_d $opt_e $opt_F $opt_f $opt_H $opt_h $opt_l
d252 1
a252 2
	unless ($opt_a or $opt_D or $opt_d or $opt_e
		or $opt_f or $opt_H or $opt_l
d255 1
a255 1
		$opt_a = $opt_D = $opt_d = $opt_f = $opt_m =
a307 3
		sasection => 0,
		saname => '',
		sarest => ',',
a359 12
sub end_of_section
{
	my ($s) = @@_;

	if ($s->{in_section} == SECTION_SEE_ALSO and not $s->{sarest} eq "") {
		$s->warning("unneeded characters at end of SEE ALSO: ",
		    "`$s->{sarest}'") if $opt_a;
		# to avoid a second warning at EOF
		$s->{sarest} = "";
	}
}

a364 2
	end_of_section($s);

a366 2
	} elsif ($section_header eq 'SEE ALSO') {
		$s->{in_section} = SECTION_SEE_ALSO;
a458 27
	} elsif ($s->{in_section} == SECTION_SEE_ALSO) {
		if (/^\.Xr\s+(\S+)\s+($sections_re)\s?(.*)?$/o) {
			my ($saname, $sasection, $sarest) = ($1, $2, $3);
			$saname =~ s/^\\&//o;
			if ($s->{sasection} gt $sasection
			    or ($s->{sasection} eq $sasection and
			    (lc($s->{saname}) gt lc($saname)))) {
				$s->warning("SEE ALSO: `.Xr $s->{saname} ",
				    "$s->{sasection}' should be after ",
				    "`.Xr $saname $sasection'") if $opt_a;
			}
			if ($s->{sarest} ne ",") {
				$s->warning("SEE ALSO: .Xr not separated ",
				    "by comma, but `$s->{sarest}'") if $opt_a;
			}
			$s->{saname} = $saname;
			$s->{sasection} = $sasection;
			$s->{sarest} = $sarest;
		}
		if (/^\.Rs(?:\s+|$)/o) {
			if ($s->{sarest} ne "") {
				$s->warning("SEE ALSO: Not necessary to ",
				    "separate .Xr from .Rs by ",
				    "`$s->{sarest}'") if $opt_a;
			}
			$s->{sarest} = "";
		}
a594 6

	end_of_section($s);

#    	if (not ($fn =~ /$section$/)) {
#		$s->warning("section doesn't match (internal value: $section)");
#    	}
@


1.59
log
@Remove -P (warnings about paragraph problems).
These are fully covered by mandoc -Tlint.
OK jmc@@ wiz@@, and also committed to pkgsrc.
@
text
@d3 1
a3 1
# $OpenBSD: mdoclint,v 1.57 2017/04/28 14:11:01 schwarze Exp $
d48 1
a48 1
	$opt_m $opt_n $opt_o $opt_p $opt_r $opt_S $opt_s $opt_v $opt_w
d55 1
a55 1
my $options="aDdeFfHhlmnoprSsvwXx";
d59 1
a59 1
	my $default = OPENBSD ? "-aDdfmnoprSsXx" : "-aDdeflmnoprSsXx";
a78 1
	-s	warn about whitespace problems
d256 1
a256 1
		or $opt_S or $opt_s or $opt_X or $opt_x) {
d259 1
a259 1
		    $opt_s = $opt_X = $opt_x = 1;
d425 1
a425 4
	if (/\s+$/o) {
		$s->warning("trailing space: `$_'") if $opt_s;
		s/\s+$//o;
	}
@


1.58
log
@bugfix: treat .Bd -unfilled like .Bd -literal;
OK jmc@@ wiz@@, and also committed upstream to pkgsrc
@
text
@d4 1
a4 1
# $NetBSD: mdoclint,v 1.65 2017/04/25 13:17:38 wiz Exp $
d48 1
a48 2
	$opt_m
	$opt_n $opt_o $opt_P $opt_p $opt_r $opt_S $opt_s $opt_v $opt_w
d55 1
a55 1
my $options="aDdeFfHhlmnoPprSsvwXx";
d59 1
a59 1
	my $default = OPENBSD ? "-aDdfmnoPprSsXx" : "-aDdeflmnoPprSsXx";
a75 1
	-P	warn about paragraph problems
d256 1
a256 2
		or $opt_m or $opt_n
		or $opt_o or $opt_P or $opt_p or $opt_r
d259 1
a259 1
		    $opt_n = $opt_o = $opt_P = $opt_p = $opt_r = $opt_S =
a404 5
	if ($s->{lastline} =~ /^\.Pp/o) {
		$s->warning("Paragraph problem: section header after .Pp")
		    if $opt_P;
	}

a607 9
	} elsif (/^$/o) {
		$s->warning("Paragraph problem: empty line -- ",
		    "use .Pp for paragraphs") if $opt_P;
	}
	if ($s->{lastline} =~ /^\.Pp/o and /^(\.Ss|\.Pp)/o) {
		$s->warning("Paragraph problem: $1 after .Pp") if $opt_P;
	}
	if (/^\.Pp/o and $s->{lastline} =~ /^(\.S[Ssh])/o) {
		$s->warning("Paragraph problem: .Pp after $1") if $opt_P;
a645 4
	}

	if ($s->{lastline} =~ /^\.Pp/o) {
		$s->warning("Paragraph problem: .Pp at EOF") if $opt_P;
@


1.57
log
@Start deleting redundant features that are already covered
by mandoc(1) -Tlint, as suggested by the upstream author
and maintainer Thomas Klausner <wiz @@ NetBSD>.
The ultimate goal is to get rid of mdoclint and integrate
all its functionality into mandoc, but that will still take
some time, so simplify mdoclint for the time being.
jmc@@ "go ahead", OK wiz@@, also committed upstream

This first patch removes the AUTHORS check that mandoc does, too.
@
text
@d3 1
a3 1
# $OpenBSD: mdoclint,v 1.56 2017/04/27 22:27:43 schwarze Exp $
d609 1
a609 1
	if (/^\.Bd\b.*-literal\b/o) {
@


1.56
log
@Merge trivial patches from pkgsrc to get rid of gratuitious differences;
no functional change on OpenBSD: rev.s 1.50, 1.52, 1.62, 1.63
Of course, keep intentional differences.
@
text
@d3 1
a3 1
# $OpenBSD: mdoclint,v 1.55 2017/04/27 22:07:06 schwarze Exp $
a43 1
	SECTION_AUTHORS => 4
d47 1
a47 1
	$opt_A $opt_a $opt_D $opt_d $opt_e $opt_F $opt_f $opt_H $opt_h $opt_l
d56 1
a56 1
my $options="AaDdeFfHhlmnoPprSsvwXx";
d60 1
a60 1
	my $default = OPENBSD ? "-AaDdfmnoPprSsXx" : "-AaDdeflmnoPprSsXx";
a64 1
	-A	warn about missing .An in AUTHORS section
d256 1
a256 1
	unless ($opt_A or $opt_a or $opt_D or $opt_d or $opt_e
d261 1
a261 1
		$opt_A = $opt_a = $opt_D = $opt_d = $opt_f = $opt_m =
a316 1
		inauthors => 0,
a378 6

	if ($s->{in_section} == SECTION_AUTHORS) {
	    if (!$s->{an_found}) {
		$s->warning("missing .An in AUTHORS section") if $opt_A;
	    }
	}
a391 2
	} elsif ($section_header eq 'AUTHORS') {
		$s->{in_section} = SECTION_AUTHORS;
a517 4
		}
	} elsif ($s->{in_section} == SECTION_AUTHORS) {
		if (/^\.An / && not /^\.An -(no|)split/) {
			$s->{an_found} = 1;
@


1.55
log
@Detect links to self by parsing .Nm in SYNOPSIS.
Functionality suggested and patch OK'ed by jmc@@.
Patch also accepted upstream in pkgsrc by wiz@@.
@
text
@d3 2
a4 2
# $OpenBSD: mdoclint,v 1.54 2017/01/25 07:24:34 jmc Exp $
# $NetBSD: mdoclint,v 1.49 2014/06/23 18:10:21 wiz Exp $
d6 1
a6 1
# Copyright (c) 2001-2013 Thomas Klausner
d143 1
d209 2
a210 1
		    bebox cats cesfic cobalt dreamcast evbarm evbmips evbppc
d232 1
a232 1
		$valid_date_re = qr{(?:January|February|March|April|May|June|July|August|September|October|November|December)\s*[1-9][0-9]*,\s*(?:198[0-9]|199[0-9]|200[0-9]|201[0-4])$}o;
d298 1
@


1.54
log
@+arm64;
@
text
@d3 1
a3 1
# $OpenBSD: mdoclint,v 1.53 2016/09/03 13:37:41 guenther Exp $
d42 3
a44 2
	SECTION_SEE_ALSO => 2,
	SECTION_AUTHORS => 3
d272 1
a272 1
	if ("$page.$section" eq $self->{fn}) {
d322 2
d326 1
d394 3
a396 1
	if ($section_header eq 'SEE ALSO') {
d475 5
a479 3
	    if (! /^\.Dt\s+(?:[A-Z\d._-]+)\s+$sections_re(?:\s+$arches_re)?$/o)  {
		    $s->warning("bad .Dt: `$_'") if $opt_D;
	    }
d496 5
a500 1
	if ($s->{in_section} == SECTION_SEE_ALSO) {
d527 1
a527 2
	}
	if ($s->{in_section} == SECTION_AUTHORS) {
@


1.53
log
@Retire zaurus, as it hasn't made the EABI jump and will be permanently broken
shortly when we use the hardware thread register in userland
@
text
@d3 1
a3 1
# $OpenBSD: mdoclint,v 1.52 2016/09/01 10:55:27 jmc Exp $
d200 1
a200 1
		    (qw(alpha amd64 armv7 hppa i386
@


1.52
log
@no more sparc;
@
text
@d3 1
a3 1
# $OpenBSD: mdoclint,v 1.51 2016/08/10 17:37:01 jmc Exp $
d202 1
a202 1
		    socppc sparc64 zaurus));
@


1.51
log
@no more armish;
@
text
@d3 1
a3 1
# $OpenBSD: mdoclint,v 1.50 2016/05/13 17:52:59 jmc Exp $
d202 1
a202 1
		    socppc sparc sparc64 zaurus));
@


1.50
log
@no more hppa64;
@
text
@d3 1
a3 1
# $OpenBSD: mdoclint,v 1.49 2016/03/10 09:00:45 jmc Exp $
d200 1
a200 1
		    (qw(alpha amd64 armish armv7 hppa i386
@


1.49
log
@un-vax;
@
text
@d3 1
a3 1
# $OpenBSD: mdoclint,v 1.48 2016/01/24 20:10:48 schwarze Exp $
d200 1
a200 1
		    (qw(alpha amd64 armish armv7 hppa hppa64 i386
@


1.48
log
@In the OpenBSD-specific part of verify_xref(), discard the standard error
output from man -f:  Messages "man: nothing appropriate" are not helpful.
If no matching manual exists anywhere, a more specific message follows
right afterwards.  If a matching manual exists in the current directory,
such messages are just wrong.
Issue reported by jmc@@.
@
text
@d3 1
a3 1
# $OpenBSD: mdoclint,v 1.47 2015/12/06 08:55:09 schwarze Exp $
d202 1
a202 1
		    socppc sparc sparc64 vax zaurus));
@


1.47
log
@Check .Xr links by forking "man -f" rather than manually looking
through manual page directories.  It's slower but more robust
because it doesn't require MLINKS.
Fragility noticed and patch OK'ed by jmc@@.
@
text
@d3 1
a3 1
# $OpenBSD: mdoclint,v 1.46 2015/12/01 22:27:28 jmc Exp $
d277 1
d279 1
d283 1
@


1.46
log
@sync and update the list of supported archs;
feedback/ok schwarze
@
text
@d3 1
a3 1
# $OpenBSD: mdoclint,v 1.45 2015/12/01 07:50:06 deraadt Exp $
d275 13
a287 5
	for my $dir ("/usr/share/man",
	    OPENBSD ? "/usr/X11R6/man" : "/usr/X11R7/man") {
		for my $a ("", $arch) {
			for my $page ("man$section/$a/$page.$section") {
				return 1 if -f "$dir/$page";
@


1.45
log
@Send Aviion to same place as Nova II
discussed with jsg
@
text
@d3 1
a3 1
# $OpenBSD: mdoclint,v 1.44 2014/06/24 12:41:19 jmc Exp $
d200 3
a202 4
		    (qw(alpha amd64 arm armish armv7 cats hppa
		    hppa64 i386 landisk loongson luna88k macppc mips64
		    octeon sgi socppc sparc sparc64 vax
		    zaurus));
@


1.44
log
@do not prompt for overwrite when none is neccessary using the -F option
(which is off by default anyway);

netbsd -r1.49, from wiz@@netbsd
@
text
@d3 1
a3 1
# $OpenBSD: mdoclint,v 1.43 2014/03/31 12:51:12 jmc Exp $
d200 1
a200 1
		    (qw(alpha amd64 arm armish armv7 aviion cats hppa
@


1.43
log
@recognise CONTEXT sections, for man9;
@
text
@d3 2
a4 2
# $OpenBSD: mdoclint,v 1.42 2014/03/18 22:36:30 miod Exp $
# $NetBSD: mdoclint,v 1.46 2014/02/24 09:37:48 wiz Exp $
d410 2
a411 3
	my $s;
	($s, $_) = @@_;
	my $result = $s->process_line($_);
d414 1
a414 1
	if ($result ne $_) {
@


1.42
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@d3 1
a3 1
# $OpenBSD: mdoclint,v 1.41 2014/03/06 17:41:28 jmc Exp $
d171 1
@


1.41
log
@- for netbsd, accept 2014 dates
- netbsd have changed hp700 to hppa (from wiz@@netbsd)
- update rcsid
@
text
@d3 1
a3 1
# $OpenBSD: mdoclint,v 1.40 2014/01/04 18:27:03 jmc Exp $
d199 1
a199 1
		    (qw(alpha amd64 arm armish armv7 aviion cats hp300 hppa
d201 1
a201 1
		    mvme68k mvme88k octeon sgi socppc sparc sparc64 vax
@


1.40
log
@accept [0-9]lua as a valid section name (netbsd only);
from wiz@@netbsd
@
text
@d3 2
a4 2
# $OpenBSD: mdoclint,v 1.39 2013/09/30 18:27:17 jmc Exp $
# $NetBSD: mdoclint,v 1.43 2013/09/30 09:36:45 wiz Exp $
d208 1
a208 1
		    evbsh3 evbsh5 hp300 hp700 hpcarm hpcmips hpcsh
d229 1
a229 1
		$valid_date_re = qr{(?:January|February|March|April|May|June|July|August|September|October|November|December)\s*[1-9][0-9]*,\s*(?:198[0-9]|199[0-9]|200[0-9]|201[0-3])$}o;
@


1.39
log
@netbsd recognise "CODE REFERENCES" section header; from wiz@@netbsd
@
text
@d3 1
a3 1
# $OpenBSD: mdoclint,v 1.38 2013/09/04 19:39:19 patrick Exp $
d222 2
a223 2
		$sections_re = qr{[1-9]}o;
		$esections_re = qr{[0-9]}o;
@


1.38
log
@Beagle has been replaced by armv7.
@
text
@d3 2
a4 2
# $OpenBSD: mdoclint,v 1.37 2013/08/21 13:22:03 jmc Exp $
# $NetBSD: mdoclint,v 1.41 2013/08/21 11:22:15 wiz Exp $
d180 1
@


1.37
log
@recognise dragonfly; from jan stary
@
text
@d3 1
a3 1
# $OpenBSD: mdoclint,v 1.36 2013/08/05 07:24:19 jmc Exp $
d198 1
a198 1
		    (qw(alpha amd64 arm armish aviion beagle cats hp300 hppa
@


1.36
log
@stop -F from removing Sh lines; -r1.39
from wiz@@netbsd
@
text
@d3 2
a4 2
# $OpenBSD: mdoclint,v 1.35 2013/08/05 07:16:19 jmc Exp $
# $NetBSD: mdoclint,v 1.39 2013/08/02 13:16:54 wiz Exp $
d85 1
a85 1
	-X	warn about explicit mentions of FreeBSD, NetBSD, or OpenBSD
d96 1
d527 2
a528 2
	if (/\b(Free|Net|Open)BSD\b/o
	    and not /\b(?:www|ftp)\.(?:Free|Net|Open)BSD\.org\b/o
d535 2
a536 1
	if (/^\./o and (/Bx (Open)/o or /Bx (Free)/o or /Bx (Net)/o)) {
@


1.35
log
@Make Bq and Er optional for errors. -r1.35.
from wiz@@netbsd
@
text
@d3 2
a4 2
# $OpenBSD: mdoclint,v 1.34 2013/08/05 07:09:42 jmc Exp $
# $NetBSD: mdoclint,v 1.35 2013/07/30 18:46:29 wiz Exp $
d464 1
d466 1
a466 1
			return "$_\n";
d470 1
d472 1
a472 1
			return "$_\n";
@


1.34
log
@integrate support for an -A option, which warns if an AUTHORS section
does not contain any An macros;

from wiz@@netbsd
@
text
@d3 2
a4 2
# $OpenBSD: mdoclint,v 1.33 2013/06/02 14:33:18 jmc Exp $
# $NetBSD: mdoclint,v 1.34 2013/07/30 18:37:56 wiz Exp $
d622 2
a623 2
	    /^\.It\s+Bq\s+Er\s+(E[\w_]+)$/o) {
		my $current_error_name = $1;
@


1.33
log
@from wiz@@netbsd:

Log Message:
Remove "my" before $_, since perl 5.18 complains about it.
@
text
@d3 2
a4 2
# $OpenBSD: mdoclint,v 1.32 2013/03/26 18:28:11 jmc Exp $
# $NetBSD: mdoclint,v 1.33 2013/06/02 11:58:36 wiz Exp $
d41 3
a43 1
	NETBSD => 0
d47 1
a47 1
	$opt_a $opt_D $opt_d $opt_e $opt_F $opt_f $opt_H $opt_h $opt_l
d56 1
a56 1
my $options="aDdeFfHhlmnoPprSsvwXx";
d60 1
a60 1
	my $default = OPENBSD ? "-aDdfmnoPprSsXx" : "-aDdelfmnoPprSsXx";
d65 1
d253 1
a253 1
	unless ($opt_a or $opt_D or $opt_d or $opt_e
d258 1
a258 1
		$opt_a = $opt_D = $opt_d = $opt_f = $opt_m =
d302 2
a303 1
		insa => 0,
d352 18
d375 2
d378 5
a382 10
		$s->{insa} = 1;
	} elsif ($s->{insa} == 1) {
		if (not $s->{sarest} eq "") {
			$s->warning("unneeded characters at end of ",
			    "SEE ALSO: ", "`$s->{sarest}'") if $opt_a;
			# to avoid a second warning at EOF
			$s->{sarest} = "";
		}
		# finished SEE ALSO section
		$s->{insa} = 2;
d474 1
a474 1
	if ($s->{insa} == 1) {
d502 5
d655 1
a655 4
	if ($s->{insa} > 0 and not $s->{sarest} eq "") {
		$s->warning("unneeded characters at end of SEE ALSO: ",
		    "`$s->{sarest}'") if $opt_a;
	}
@


1.32
log
@accept "octeon" as a valid obsd arch;
@
text
@d3 2
a4 2
# $OpenBSD: mdoclint,v 1.31 2013/03/14 21:47:57 jmc Exp $
# $NetBSD: mdoclint,v 1.29 2013/03/10 22:14:40 wiz Exp $
d333 1
a333 1
	my $_ = $string;
d388 2
a389 1
	my ($s, $_) = @@_;
d401 2
a402 1
	my ($s, $_) = @@_;
d654 1
a654 1
	while (my $_ = $parser->next_line) {
@


1.31
log
@more or less sync to latest netbsd revision (1.29):

- libj -> libmj (my error)
- fix some incorrect warnings about `new sentence, new line' (1.25)

stuff we don;t have:

- the -A and -O options (not fully implemented on netbsd anyway)
- $order (not currently used on netbsd)

also we have a couple of fixes not yet in netbsd:

- -l added correctly to usage
- correct line number reporting for dup rcs ids
@
text
@d3 1
a3 1
# $OpenBSD: mdoclint,v 1.30 2013/03/14 21:37:00 jmc Exp $
d196 2
a197 1
		    mvme68k mvme88k sgi socppc sparc sparc64 vax zaurus));
@


1.30
log
@- some indent fixes
- pull in 1.24: do not warn about () in literal strings or when used
as macro argument
@
text
@d3 2
a4 2
# $OpenBSD: mdoclint,v 1.29 2013/03/14 21:22:52 jmc Exp $
# $NetBSD: mdoclint,v 1.24 2013/03/06 22:09:01 wiz Exp $
d124 1
a124 1
    "libj" => 1,
d522 4
a525 2
	if (/\w\w\.\s+[A-Z]/o) {
		$s->warning("new sentence, new line: `$_'") if $opt_p;
@


1.29
log
@sync with -r1.22: add an -l option, to check library names in Lb; this is
off by default on openbsd, and the libraries checked are netbsd ones (we
can tweak this later if we ever want to start using Lb)

also rolls in 1.2{3,6,7,8}, which simply added some libraries to the list.
@
text
@d3 2
a4 2
# $OpenBSD: mdoclint,v 1.28 2013/03/14 18:25:39 jmc Exp $
# $NetBSD: mdoclint,v 1.22 2013/03/06 21:26:45 wiz Exp $
d250 4
a253 4
	    or $opt_f or $opt_H or $opt_l
	    or $opt_m or $opt_n
	    or $opt_o or $opt_P or $opt_p or $opt_r
	    or $opt_S or $opt_s or $opt_X or $opt_x) {
d257 1
a257 1
		    $opt_e = $opt_l = 1 if NETBSD;
d533 1
a533 1
	if (/(\w+)\(\)/o) {
@


1.28
log
@sync to 1.21. we already had 1.19 and 1.20; this one just accepts 2013
for netbsd;
@
text
@d3 2
a4 2
# $OpenBSD: mdoclint,v 1.27 2013/03/14 18:18:26 jmc Exp $
# $NetBSD: mdoclint,v 1.21 2013/01/01 01:42:08 jnemeth Exp $
d6 1
a6 1
# Copyright (c) 2001-2012 Thomas Klausner
d45 2
a46 1
	$opt_a $opt_D $opt_d $opt_e $opt_F $opt_f $opt_H $opt_h $opt_m
d54 1
a54 1
my $options="aDdeFfHhmnoPprSsvwXx";
d58 1
a58 1
	my $default = OPENBSD ? "-aDdfmnoPprSsXx" : "-aDdefmnoPprSsXx";
d71 1
d96 58
d249 4
a252 2
	unless ($opt_a or $opt_D or $opt_d or $opt_e or $opt_f or $opt_H
	    or $opt_m or $opt_n or $opt_o or $opt_P or $opt_p or $opt_r
d257 1
a257 1
		    $opt_e = 1 if NETBSD;
d508 5
@


1.27
log
@partial sync to 1.18:
- zap trailing whitespace
- report duplicate rcs id
(including a fix from wiz to correctly report the line number of the dup,
which isn't yet committed in netbsd)
@
text
@d3 2
a4 2
# $OpenBSD: mdoclint,v 1.26 2013/03/10 21:57:04 jmc Exp $
# $NetBSD: mdoclint,v 1.18 2012/02/22 15:31:35 wiz Exp $
d163 1
a163 1
		$valid_date_re = qr{(?:January|February|March|April|May|June|July|August|September|October|November|December)\s*[1-9][0-9]*,\s*(?:198[0-9]|199[0-9]|200[0-9]|201[0-2])$}o;
@


1.26
log
@bump the copyright, and accept "2012" for netbsd; with the exception of
one change (coming next), syncs mdoclint to netbsd -r1.17;
@
text
@d3 2
a4 2
# $OpenBSD: mdoclint,v 1.25 2012/08/23 14:44:42 jmc Exp $
# $NetBSD: mdoclint,v 1.17 2012/01/02 18:01:00 wiz Exp $
d58 1
a58 1
	
d316 1
a316 1
		$s->warning("Paragraph problem: section header after .Pp") 
d345 4
a348 2
		$s->{oxrcsidseen} = 1;
		# nothing else to do
d352 4
a355 2
		$s->{nxrcsidseen} = 1;
		# nothing else to do
d444 1
a444 1
		$s->warning("`.Bx $1' found -- use $short{$1} instead") 
d592 1
a592 1
			print OUT $l 
@


1.25
log
@recognise "beagle";
@
text
@d3 2
a4 2
# $OpenBSD: mdoclint,v 1.24 2012/06/20 19:23:45 jmc Exp $
# $NetBSD: mdoclint,v 1.12 2010/08/30 12:20:44 wiz Exp $
d6 1
a6 1
# Copyright (c) 2001-2010 Thomas Klausner
d163 1
a163 1
		$valid_date_re = qr{(?:January|February|March|April|May|June|July|August|September|October|November|December)\s*[1-9][0-9]*,\s*(?:198[0-9]|199[0-9]|200[0-9]|201[01])$}o;
@


1.24
log
@no more mac68k;
@
text
@d3 1
a3 1
# $OpenBSD: mdoclint,v 1.23 2011/10/03 06:58:16 jmc Exp $
d134 1
a134 1
		    (qw(alpha amd64 arm armish aviion cats hp300 hppa
@


1.23
log
@when checking Xrs, look in man* subdirs, not cat*;
code diff from wiz@@netbsd
@
text
@d3 1
a3 1
# $OpenBSD: mdoclint,v 1.22 2011/01/02 13:02:23 jmc Exp $
d135 2
a136 3
		    hppa64 i386 landisk loongson luna88k mac68k macppc
		    mips64 mvme68k mvme88k sgi socppc sparc sparc64 vax
		    zaurus));
@


1.22
log
@permit 2011; from Thomas Klausner
@
text
@d3 1
a3 1
# $OpenBSD: mdoclint,v 1.21 2010/12/03 20:22:45 jmc Exp $
d211 1
a211 2
			for my $page ("cat$section/$a/$page.0",
			    "man$section/$a/$page.$section") {
@


1.21
log
@really turn -H off;
@
text
@d3 1
a3 1
# $OpenBSD: mdoclint,v 1.20 2010/12/03 08:06:26 jmc Exp $
d164 1
a164 1
		$valid_date_re = qr{(?:January|February|March|April|May|June|July|August|September|October|November|December)\s*[1-9][0-9]*,\s*(?:198[0-9]|199[0-9]|200[0-9]|2010)$}o;
@


1.20
log
@turn off -H by default (<> warning), since mandoc does not have the same
html issues as nroff did;

from Thomas Klausner
@
text
@d3 1
a3 1
# $OpenBSD: mdoclint,v 1.19 2010/09/26 15:13:32 jmc Exp $
d193 1
a193 1
		$opt_a = $opt_D = $opt_d = $opt_f = $opt_H = $opt_m =
@


1.19
log
@allow "mips64";
@
text
@d3 1
a3 1
# $OpenBSD: mdoclint,v 1.18 2010/09/01 17:32:53 jmc Exp $
d57 1
a57 1
	my $default = OPENBSD ? "-aDdfHmnoPprSsXx" : "-aDdefHmnoPprSsXx";
@


1.18
log
@some very minor tweaks to bring us in line with mdoclint -r1.12 and
mdoclint.1 -r1.2; some minor os-specific differences remain
@
text
@d3 1
a3 1
# $OpenBSD: mdoclint,v 1.17 2010/08/31 17:58:16 jmc Exp $
d136 2
a137 1
		    mvme68k mvme88k sgi socppc sparc sparc64 vax zaurus));
@


1.17
log
@- catching up with upstream mdoclint, recognise IMPLEMENTATION NOTES and
COMPATIBILTY as sections. these remain defined only for netbsd, since we
do not use these sections.

- contrariwise, undefine EXIT STATUS as being netbsd only. despite some
misgivings, i think we probably do need to ressurect this section. i'll
start to make these changes soon.
@
text
@d3 2
a4 2
# $OpenBSD: mdoclint,v 1.16 2010/02/10 08:36:33 jmc Exp $
# $NetBSD: mdoclint,v 1.26 2008/11/22 14:47:28 wiz Exp $
d6 1
a6 1
# Copyright (c) 2001-2008 Thomas Klausner
d147 1
a147 1
		    x68k x86_64));
d163 1
a163 1
		$valid_date_re = qr{(?:January|February|March|April|May|June|July|August|September|October|November|December)\s*[1-9][0-9]*,\s*(?:198[0-9]|199[0-9]|200[012345678])$}o;
d350 1
a350 1
	if (/\$NetBSD\b.*\$/o) {
@


1.16
log
@accept loongson in .Dt; ok espie
@
text
@d3 1
a3 1
# $OpenBSD: mdoclint,v 1.15 2009/05/18 15:37:09 jmc Exp $
d107 1
a107 1
		NETBSD ? "EXIT STATUS" : undef,
d111 1
d114 1
@


1.15
log
@sync with netbsd; no change for openbsd users
from wiz
@
text
@d3 1
a3 1
# $OpenBSD: mdoclint,v 1.14 2009/04/13 12:40:05 espie Exp $
d133 2
a134 2
		    hppa64 i386 landisk luna88k mac68k macppc mvme68k
		    mvme88k sgi socppc sparc sparc64 vax zaurus));
@


1.14
log
@A few tweaks:
- display only section headers in warning messages if -w (asked by jmc@@)
- better fix option: have process_line return the processed line, and use
that info.
- return proper line for comments (noticed by Thomas Klausner)
- let more code run always, only display warnings when wanted
- sorting of see also should be case-insensitive (noticed by jmc@@)
@
text
@d3 1
a3 1
# $OpenBSD: mdoclint,v 1.13 2008/12/31 10:55:11 espie Exp $
d139 1
a139 1
		    bebox cats cesfic cobalt dreamcast evbarm evbmips
@


1.13
log
@reorg code a bit so that we can share with Thomas Klausner:
use OPENBSD/NETBSD constant to choose the behavior, and have the same
program in both OSes.

Also some minor cleanups, like no longer needing to check for comments
that have been stripped already.

work with wiz@@netbsd.org and jmc@@
@
text
@d3 1
a3 1
# $OpenBSD: mdoclint,v 1.12 2008/12/11 14:49:02 espie Exp $
d46 1
a46 1
	$opt_n $opt_o $opt_P $opt_p $opt_r $opt_S $opt_s $opt_v
d53 1
a53 1
my $options="aDdeFfHhmnoPprSsvXx";
d79 1
d174 5
a178 1
	print STDOUT "$self->{fn}:$self->{current_section_header}:$self->{ln}: ", join('', @@_), "\n";
d202 1
a202 1
		$self->warning("Xref to itself (use .Nm instead)");
d216 1
a216 1
	$self->warning($pre."trailing Xref to $page($section)$post");
d226 1
a226 1
		all => '',
d288 1
d290 1
a290 1
		    $s->{insa} = 1;
d292 17
a308 20
		    if (not $s->{sarest} eq "") {
			    $s->warning("unneeded characters at end of ",
				    "SEE ALSO: ", "`$s->{sarest}'") if $opt_a;
			    # to avoid a second warning at EOF
			    $s->{sarest} = "";
		    }
		    # finished SEE ALSO section
		    $s->{insa} = 2;
	}
	if ($opt_S) {
		if (not $sections{$section_header}) {
			$s->warning("unknown section header: ",
			    "`$section_header'");
		} else {
			if ($s->{lastsh} >= $sections{$section_header}) {
				$s->warning("section header ",
				    "`$section_header' in wrong order");
			}
			$s->{shseen}->{$section_header} = 1;
			$s->{lastsh} = $sections{$section_header};
d310 2
d313 1
d315 2
a316 1
		$s->warning("Paragraph problem: section header after .Pp");
d322 12
a341 1
		$s->{changes} = 1;
d346 1
a346 1
		return;
d351 1
a351 1
		return;
d355 1
a355 1
		return;
d362 1
a362 1
		return;
d367 1
a367 1
	if ($opt_D and /^\.Dt\s+/o) {
d369 1
a369 1
		$s->warning("bad .Dt: `$_'");
d376 1
a376 1
			return;
d381 1
a381 1
			return;
d385 1
a385 2
	if ($opt_a) {
	    if ($s->{insa} == 1) {
d387 16
a402 15
		    my ($saname, $sasection, $sarest) = ($1, $2, $3);
		    $saname =~ s/^\\&//o;
		    if ($s->{sasection} gt $sasection
			or ($s->{sasection} eq $sasection and
			    ($s->{saname} cmp $saname) > 0)) {
			$s->warning("SEE ALSO: `.Xr $s->{saname} $s->{sasection}' should "
				. "be after `.Xr $saname $sasection'");
		    }
		    if ($s->{sarest} ne ",") {
			$s->warning("SEE ALSO: .Xr not separated by ".
				"comma, but `$s->{sarest}'");
		    }
		    $s->{saname} = $saname;
		    $s->{sasection} = $sasection;
		    $s->{sarest} = $sarest;
d405 6
a410 5
		    if ($s->{sarest} ne "") {
			$s->warning("SEE ALSO: Not necessary to separate".
				" .Xr from .Rs by `$s->{sarest}'");
		    }
		    $s->{sarest} = "";
a411 1
	    }
d414 2
a415 2
	if ($opt_f and /^\.Fn.*,.+/o) {
		$s->warning("possible .Fn misuse: `$_'");
d418 1
a418 1
		if ($opt_H and (/^(?:[<>])/o or /[^\\][<>]/o)) {
d420 1
a420 1
			    "instead of < >: `$_'");
d424 1
a424 1
		if ($opt_H and (/^(?:[<>&])/o or /[^\\][<>&]/o)) {
d426 1
a426 1
			    "instead of < > &: `$_'");
d430 14
a443 12
	if ($opt_X) {
		if (/\b(Free|Net|Open)BSD\b/o
		    and not /\b(?:www|ftp)\.(?:Free|Net|Open)BSD\.org\b/o
		    and not /\bOpenBSD\::.*3p\b/o
		    and not /\/pub\/OpenBSD\//o
		    and not /\@@(?:Free|Net|Open)BSD\.(?i:org)\b/o) {
			$s->warning("verbose mention of `$1BSD' instead of "
			    . "`$short{$1}': `$_'");
		}
		if (/^\./o and (/Bx (Open)/o or /Bx (Free)/o or /Bx (Net)/o)) {
			$s->warning("`.Bx $1' found -- use $short{$1} instead");
		}
d445 3
a447 4
	if ($opt_o) {
		if (/^\.Os\s+(.+)/o) {
			$s->warning(".Os used with argument `$1'");
		}
d450 10
a459 4
	if ($opt_n) {
		if (/^\.Nd.*\.$/o) {
			$s->warning(".Nd ends with a dot: `$_'");
		}
d461 2
a462 15
	if ($opt_p) {
		if (/\w\w\.\s+[A-Z]/o) {
			$s->warning("new sentence, new line: `$_'");
		}
		if (/^\... .*[^\s][\.();,\[\]\{\}:]$/o
		    and not /\s\.\.\.$/o and not /\\&.$/o) {
			$s->warning("punctuation in format string ",
			    "without space: `$_'");
		}
		if (/^\./o and /Ns [\.();,\[\]\{\}:]/o) {
			$s->warning("possible Ns abuse: `$_'");
		}
		if (/(\w+)\(\)/o) {
			$s->warning("use .Fn or .Xr for functions: `$1()'");
		}
d464 3
a466 3
	if ($opt_x) {
	    if ($s->{mandoc_p}) {
		my $destruct = $_;
d469 5
a473 5
		    $s->debug("Xref to $1($2) found: `$_'");
		    $s->verify_xref($1, $2, "", "");
		    if ($3 =~ /^\S/o) {
			$s->warning("No space after section number in Xref: `$_'");
		    }
d475 1
a475 1
		    $s->warning("Weird Xref found: `$_'");
d477 1
a477 2
	    } else {
		my $destruct = $_;
d480 7
a486 7
		    while ($destruct =~ s/([-\w.]+)\s*\(($esections_re)\)//o) {
			$s->debug("possible Xref to $1($2) found: `$_'");
			$s->verify_xref($1, $2, "possible ", ": `$_'");
			# so that we have a chance to find more than one
			# per line
			$destruct =~ s/(\w+)\s*\(($sections_re)\)//o;
		    }
a487 1
	    }
d489 3
a491 4
	if ($opt_d) {
		if (/^\.Dd/o and not /^\.Dd\s+$valid_date_re/o) {
			$s->warning("Invalid date found: `$_'");
		}
d494 6
a499 17
	if ($opt_P) {
		if (/^\.Bd\b.*-literal\b/o) {
			$s->{inliteral} = 1;
		}
		if ($s->{inliteral} == 1) {
			if (/^\.Ed\b/o) {
			    $s->{inliteral} = 0;
		    }
		} elsif (/^$/o) {
			$s->warning("Paragraph problem: empty line -- ",
			    "use .Pp for paragraphs");
		}
		if ($s->{lastline} =~ /^\.Pp/o and /^(\.Ss|\.Pp)/o) {
			$s->warning("Paragraph problem: $1 after .Pp");
		}
		if (/^\.Pp/o and $s->{lastline} =~ /^(\.S[Ssh])/o) {
			$s->warning("Paragraph problem: .Pp after $1");
d501 9
d515 16
a530 19
	if ($opt_e) {
		# Error names should not be sorted across different lists.
		# (see bind(2) for an example.)
		#
		/^\.Bl\s+/o and $s->{last_error_name} = "";

		if ($s->{current_section_header} eq "ERRORS" and
		    /^\.It\s+Bq\s+Er\s+(E[\w_]+)$/o) {
			my $current_error_name = $1;

			if ($s->{last_error_name} eq $current_error_name) {
				$s->warning("Duplicate item for "
					. "$current_error_name.");
			} elsif ($current_error_name lt $s->{last_error_name}) {
				$s->warning("$s->{last_error_name} and "
					. "$current_error_name are not in "
					. "alphabetical order.");
			}
			$s->{last_error_name} = $current_error_name;
d532 1
d536 1
a536 1
	$s->{all} .= "$_\n";
d544 1
a544 1
	    $s->warning("Missing RCS Id") if $opt_r;
d547 1
a547 1
	    $s->warning("Missing RCS Id") if $opt_r;
d550 2
a551 2
	if ($opt_P and $s->{lastline} =~ /^\.Pp/o) {
	    $s->warning("Paragraph problem: .Pp at EOF");
d554 3
a556 2
	if ($opt_a and $s->{insa} > 0 and not $s->{sarest} eq "") {
	    $s->warning("unneeded characters at end of SEE ALSO: `$s->{sarest}'");
d562 5
a566 4
	if ($s->{mandoc_p} and $opt_S) {
	    foreach my $i (qw (NAME SYNOPSIS DESCRIPTION)) {
		if (not ($s->{shseen}{$i})) {
		    $s->warning("missing $i section");
a567 1
	    }
d578 1
a578 1
		$parser->process_line($_);
d586 3
a588 1
		print OUT $parser->{all};
d596 1
a596 1
    handle_file($file);
@


1.12
log
@reorg code so that it can be cut further.
discussed with jmc@@ and Thomas Klausner (wiz@@netbsd.org)
@
text
@d3 2
a4 2
# $OpenBSD: mdoclint,v 1.11 2008/11/23 17:07:36 jmc Exp $
# $NetBSD: mdoclint,v 1.18 2008/01/05 09:03:50 wiz Exp $
d39 5
d55 4
a58 1
sub usage {
d81 1
a81 1
Default is -aDdfHmnoPprSsXx if no flag is specified.
d93 70
a162 17
my %sections = (
		"NAME" => 1,
		"SYNOPSIS" => 2,
		"DESCRIPTION" => 3,
		"RETURN VALUES" => 4,
		"ENVIRONMENT" => 5,
		"FILES" => 6,
		"EXAMPLES" => 7,
		"DIAGNOSTICS" => 8,
		"ERRORS" => 9,
		"SEE ALSO" => 10,
		"STANDARDS" => 11,
		"HISTORY" => 12,
		"AUTHORS" => 13,
		"CAVEATS" => 14,
		"BUGS" => 15
);
d164 1
a164 1
sub debug 
d170 1
a170 1
sub warning 
d173 1
a173 1
	print STDOUT "$self->{fn}:$self->{ln}: @@_\n";
d176 1
a176 1
sub handle_options 
d182 2
a183 2
	unless ($opt_a or $opt_D or $opt_d or $opt_e or $opt_f or $opt_H 
	    or $opt_m or $opt_n or $opt_o or $opt_P or $opt_p or $opt_r 
d185 2
a186 2
		$opt_a = $opt_D = $opt_d = $opt_f = $opt_H = $opt_m = 
		    $opt_n = $opt_o = $opt_P = $opt_p = $opt_r = $opt_S = 
d188 1
d193 1
a193 1
sub verify_xref 
d200 2
a201 1
	for my $dir ("/usr/share/man", "/usr/X11R6/man") {
d203 1
a203 1
			for my $page ("cat$section/$a/$page.0", 
d224 2
a225 1
		rcsidseen => 0,
d234 1
a234 1
		current_section => '',
d261 54
d319 6
d326 12
a337 1
	    $s->{rcsidseen} = 1;
d340 5
a344 4
	    $s->warning("not mandoc") if $opt_m;
	    $s->{mandoc_p} = 0;
#	    /^.TH\s*[\w-_".]+\s*([1-9])/;
#	    $section = $1;
d347 1
a347 1
#	    $section = $1;
d350 1
a350 1
	    if (! /^\.Dt\s+(?:[A-Z\d._-]+)\s+[1-9](?:\s+(?:alpha|amd64|arm|armish|aviion|cats|hp300|hppa|hppa64|i386|landisk|luna88k|mac68k|macppc|mvme68k|mvme88k|sgi|socppc|sparc|sparc64|vax|zaurus))?$/o)  {
d355 12
d368 2
a369 16
	    if ($s->{insa} == 0) {
		if (/^\.Sh\s+SEE ALSO$/o) {
		    $s->{insa} = 1;
		}
	    } elsif ($s->{insa} == 1) {
		if (/^\.Sh\s+/o) {
		    if (not $s->{sarest} eq "") {
			$s->warning("unneeded characters at end of SEE ALSO:".
				"`$s->{sarest}'");
			# to avoid a second warning at EOF
			$s->{sarest} = "";
		    }
		    # finished SEE ALSO section
		    $s->{insa} = 2;
		}
		if (/^\.Xr\s+(\S+)\s+(3p|[1-9])\s?(.*)?$/o) {
d397 1
a397 1
	    $s->warning("possible .Fn misuse: `$_'");
d399 5
a403 2
	if ($opt_H and not /^\.\\\"/o and (/^(?:[<>])/o or /[^\\][<>]/o)) {
	    $s->warning("use \*(Lt \*(Gt (or .Aq) instead of < >: `$_'");
d405 4
a408 10
	if ($opt_S) {
	    if (/^\.Sh\s+(.*)\s*$/o) {
		if (not $sections{$1}) {
		    $s->warning("unknown section header: `$1'");
		} else {
		    if ($s->{lastsh} >= $sections{$1}) {
			$s->warning("section header `$1' in wrong order");
		    }
		    $s->{shseen}->{$1} = 1;
		    $s->{lastsh} = $sections{$1};
a409 1
	    }
d412 11
a422 6
	if ($opt_s) {
	    if (/\s+$/o) {
		$s->warning("trailing space: `$_'");
		if ($opt_F) {
		    s/\s+$//o;
		    $s->{changes} = 1;
a423 19
	    }
# this check only bought us something for phantasia.6
#	    # we don't want to match at BOF
#	    if (/.\.\t/) {
#		$s->warning("tab after dot (`.') -- probably malformatting: $_");
#	    }
	}
	if ($opt_X) {
	    if (not /^\.\\\"/o and /\b(Free|Net|Open)BSD\b/o
		and not /\b(?:www|ftp)\.(?:Free|Net|Open)BSD\.org\b/o
		and not /\bOpenBSD\::.*3p\b/o
		and not /\/pub\/OpenBSD\//o
		and not /\@@(?:Free|Net|Open)BSD\.(?i:org)\b/o) {
		$s->warning("verbose mention of `$1BSD' instead of "
			. "`$short{$1}': `$_'");
	    }
	    if (/^\./o and (/Bx (Open)/o or /Bx (Free)/o or /Bx (Net)/o)) {
		$s->warning("`.Bx $1' found -- use $short{$1} instead");
	    }
d426 3
a428 4
	    if (/^\.Os/o && !/^\.Os\s*$/o) {
		/^\.Os(.*)/o;
		$s->warning(".Os used with argument `$1'");
	    }
d432 3
a434 3
	    if (/^\.Nd/o and /\.\s*$/o) {
		$s->warning(".Nd ends with a dot: `$_'");
	    }
d437 14
a450 13
	    if (not /^\.\\\"/o and /\w\w\.\s+[A-Z]/o) {
		$s->warning("new sentence, new line: `$_'");
	    }
	    if (not /^\.\\\"/o and /^\... .*[^\s][\.();,\[\]\{\}:]$/o
		and not /\s\.\.\.$/o and not /\\&.$/o) {
		$s->warning("punctuation in format string without space: `$_'");
	    }
	    if (not /^\.\\\"/o and /^\./o and /Ns [\.();,\[\]\{\}:]/o) {
		$s->warning("possible Ns abuse: `$_'");
	    }
	    if (/(\w+)\(\)/o) {
		$s->warning("use .Fn or .Xr for functions: `$1()'");
	    }
d456 1
a456 1
		if ($destruct =~ /^\.Xr\s+([\w\:\.\-\+\/]+)\s+(3p|[0-9])(.*)/o) {
d469 1
a469 1
		    while ($destruct =~ s/([-\w.]+)\s*\((3p|[0-9])\)//o) {
d474 1
a474 1
			$destruct =~ s/(\w+)\s*\((3p|[0-9])\)//o;
d480 3
a482 3
	    if (/^\.Dd/o and not /^\.Dd [\$]Mdocdate\b/o) {
		$s->warning("Invalid date found: `$_'");
	    }
d486 17
a502 17
	    if (/^\.Bd\b.*-literal/o) {
		$s->{inliteral} = 1;
	    }
	    if ($s->{inliteral} == 1) {
		if (/^\.Ed\b/o) {
		    $s->{inliteral} = 0;
		}
	    } elsif (/^$/o) {
		$s->warning("Paragraph problem: empty line -- use .Pp for".
			" paragraphs");
	    }
	    if ($s->{lastline} =~ /^\.Pp/o and (/^(\.S[sh])/o or /^(\.Pp)/o)) {
		$s->warning("Paragraph problem: $1 after .Pp");
	    }
	    if (/^\.Pp/o and $s->{lastline} =~ /^(\.S[sh])/o) {
		$s->warning("Paragraph problem: .Pp after $1");
	    }
a508 2
		/^\.Sh\s+(.*)$/o and $s->{current_section} = $1;

d514 1
a514 1
		if ($s->{current_section} eq "ERRORS" and
d538 5
a542 2
	if ($opt_r and not $s->{rcsidseen}) {
	    $s->warning("Missing RCS Id");
d567 1
a567 1
sub handle_file 
d578 1
a578 1
		open OUT, ">$_[0].new" or 
@


1.11
log
@expand -p to warn about "new sentence, new line" errors;
from wiz@@netbsd
@
text
@d3 1
a3 1
# $OpenBSD: mdoclint,v 1.10 2008/11/07 20:20:33 espie Exp $
d34 3
a38 2
$| = 1;

d45 1
a45 3
my $fn;
my $file;
my $line;
d47 1
d75 1
a75 1
    exit(0);
d78 1
d101 1
a101 1
		);
d103 4
a106 2
sub debug {
    print STDOUT "debug: $fn:$line: $_[0]\n" if $opt_v;
d109 4
a112 2
sub warning {
    print STDOUT "$fn:$line: $_[0]\n";
d115 34
a148 28
sub handle_options {
    getopts($options);
    $opt_h and usage();

    # default to all warnings if no flag is set
    unless ($opt_a or $opt_D or $opt_d or $opt_e or $opt_f or $opt_H or $opt_m
	or $opt_n or $opt_o or $opt_P or $opt_p or $opt_r or $opt_S or $opt_s
	or $opt_X or $opt_x) {
	$opt_a = $opt_D = $opt_d = $opt_f = $opt_H = $opt_m = $opt_n =
	    $opt_o = $opt_P = $opt_p = $opt_r = $opt_S = $opt_s = $opt_X =
	    $opt_x = 1;
    }
}

sub verify_xref {
    # try to find corresponding man page
    my $xreftarget = "/usr/share/man/cat$_[2]/$_[1].0";
    my $xreftarget2 = "/usr/share/man/cat$_[2]/$arch/$_[1].0";
    my $xreftarget3 = "./$_[1].$_[2]";
    my $xreftarget4 = "/usr/X11R6/man/cat$_[2]/$_[1].0";
    my $xreftarget5 = "/usr/X11R6/man/man$_[2]/$_[1].$_[2]";
    if ("$_[1].$_[2]" eq $fn) {
	warning("Xref to itself (use .Nm instead)");
    }
    if (not -f $xreftarget and not -f $xreftarget2
	and not -f $xreftarget3
	and not -f $xreftarget4 and not -f $xreftarget5) {
	warning("$_[0]trailing Xref to $_[1]($_[2])$_[3]");
a149 2
    }
    return 1;
d152 49
a200 25
sub handle_file {
    my $mandoc_p = 1;
    my $destruct;
    my $all = "";
    my $last = "";
    my $changes = 0;
    my $rcsidseen = 0;
#    my $section = 0;
    my $lastsh = 0;
    my $saname = "";
    my $sasection = 0;
    my $sarest = ",";
    my $insa = 0;
    my $inliteral = 0;
    my %shseen = ();
    my $last_error_name = "";
    my $current_section = "";

    $line = 0;
    $fn = $_[0];
    open INPUT, $_[0] or die "can't open input file $_[0]";

    while (<INPUT>) {
	$line++;
	chomp();
d202 1
a202 1
	    $rcsidseen = 1;
d205 2
a206 2
	    warning("not mandoc") if $opt_m;
	    $mandoc_p = 0;
d215 1
a215 1
		warning("bad .Dt: `$_'");
d220 1
a220 1
	    if ($insa eq 0) {
d222 1
a222 1
		    $insa = 1;
d224 1
a224 1
	    } elsif ($insa eq 1) {
d226 3
a228 3
		    if (not $sarest eq "") {
			warning("unneeded characters at end of SEE ".
				"ALSO: `$sarest'");
d230 1
a230 1
			$sarest = "";
d233 1
a233 1
		    $insa = 2;
d236 7
a242 7
		    my ($newsaname, $newsasection, $newsarest) = ($1, $2, $3);
		    $newsaname =~ s/^\\&//o;
		    if ($sasection gt $newsasection
			or ($sasection eq $newsasection and
			    ($saname cmp $newsaname) > 0)) {
			warning("SEE ALSO: `.Xr $saname $sasection' should "
				. "be after `.Xr $newsaname $newsasection'");
d244 3
a246 3
		    if ($sarest ne ",") {
			warning("SEE ALSO: .Xr not separated by ".
				"comma, but `$sarest'");
d248 3
a250 3
		    $saname = $newsaname;
		    $sasection = $newsasection;
		    $sarest = $newsarest;
d253 3
a255 3
		    if ($sarest ne "") {
			warning("SEE ALSO: Not necessary to separate".
				" .Xr from .Rs by `$sarest'");
d257 1
a257 1
		    $sarest = "";
d263 1
a263 1
	    warning("possible .Fn misuse: `$_'");
d266 1
a266 1
	    warning("use \*(Lt \*(Gt (or .Aq) instead of < >: `$_'");
d271 1
a271 1
		    warning("unknown section header: `$1'");
d273 2
a274 2
		    if ($lastsh >= $sections{$1}) {
			warning("section header `$1' in wrong order");
d276 2
a277 2
		    $shseen{$1} = 1;
		    $lastsh = $sections{$1};
d284 1
a284 1
		warning("trailing space: `$_'");
d287 1
a287 1
		    $changes = 1;
d293 1
a293 1
#		warning("tab after dot (`.') -- probably malformatting: $_");
d302 1
a302 1
		warning("verbose mention of `$1BSD' instead of "
d306 1
a306 1
		warning("`.Bx $1' found -- use $short{$1} instead");
d312 1
a312 1
		warning(".Os used with argument `$1'");
d318 1
a318 1
		warning(".Nd ends with a dot: `$_'");
d323 1
a323 1
		warning("new sentence, new line: `$_'");
d327 1
a327 1
		warning("punctuation in format string without space: `$_'");
d330 1
a330 1
		warning("possible Ns abuse: `$_'");
d333 1
a333 1
		warning("use .Fn or .Xr for functions: `$1()'");
d337 2
a338 2
	    if ($mandoc_p) {
		$destruct = $_;
d341 2
a342 2
		    debug("Xref to $1($2) found: `$_'");
		    verify_xref("", $1, $2, "");
d344 1
a344 1
			warning("No space after section number in Xref: `$_'");
d347 1
a347 1
		    warning("Weird Xref found: `$_'");
d350 1
a350 1
		$destruct = $_;
d354 2
a355 2
			debug("possible Xref to $1($2) found: `$_'");
			verify_xref("possible ", $1, $2, ": `$_'");
d365 1
a365 1
		warning("Invalid date found: `$_'");
d371 1
a371 1
		$inliteral = 1;
d373 1
a373 1
	    if ($inliteral eq 1) {
d375 1
a375 1
		    $inliteral = 0;
d378 1
a378 1
		warning("Paragraph problem: empty line -- use .Pp for".
d381 2
a382 2
	    if ($last =~ /^\.Pp/o and (/^(\.S[sh])/o or /^(\.Pp)/o)) {
		warning("Paragraph problem: $1 after .Pp");
d384 2
a385 2
	    if (/^\.Pp/o and $last =~ /^(\.S[sh])/o) {
		warning("Paragraph problem: .Pp after $1");
d393 1
a393 1
		/^\.Sh\s+(.*)$/o and $current_section = $1;
d398 1
a398 1
		/^\.Bl\s+/o and $last_error_name = "";
d400 1
a400 1
		if ($current_section eq "ERRORS" and
d404 2
a405 2
			if ($last_error_name eq $current_error_name) {
				warning("Duplicate item for "
d407 2
a408 2
			} elsif ($current_error_name lt $last_error_name) {
				warning("$last_error_name and "
d412 1
a412 1
			$last_error_name = $current_error_name;
d416 3
a418 3
	$last = $_;
	$all .= "$_\n";
    }
d420 3
a422 3
    if ($opt_r and not $rcsidseen) {
	warning("Missing RCS Id");
    }
d424 3
a426 3
    if ($opt_P and $last =~ /^\.Pp/o) {
	warning("Paragraph problem: .Pp at EOF");
    }
d428 3
a430 3
    if ($opt_a and $insa > 0 and not $sarest eq "") {
	warning("unneeded characters at end of SEE ALSO: `$sarest'");
    }
d432 3
a434 10
#    if (not ($fn =~ /$section$/)) {
#	warning("section doesn't match (internal value: $section)");
#    }
    close INPUT;
    if ($opt_F and $changes) {
	open OUT, ">$_[0].new" or die "can't open output file `$_[0].new'";
	print OUT $all;
	close OUT;
	system("mv -i $_[0].new $_[0]");
    }
d436 8
a443 4
    if ($mandoc_p and $opt_S) {
	foreach my $i (qw (NAME SYNOPSIS DESCRIPTION)) {
	    if (not ($shseen{$i})) {
		warning("missing $i section");
a445 1
    }
d448 23
a470 3
chomp($arch);
handle_options();
foreach $file (@@ARGV) {
@


1.10
log
@clean-up regexps, replacing some . (any char) with \. (actual dot),
adding grouping parentheses, compiling whatever's compilable with /o,
restricting words with word boundaries. /b

okay grunk@@, jmc@@ (with help from jmc@@)

#10000 !

Oddly fitting, as my first commit was concerned with manpages as well...
@
text
@d3 1
a3 1
# $OpenBSD: mdoclint,v 1.9 2008/11/03 12:17:01 espie Exp $
d289 3
@


1.9
log
@handle Xrefs to XFree as well
okay grunk@@, jmc@@
@
text
@d3 1
a3 1
# $OpenBSD: mdoclint,v 1.8 2008/11/03 12:14:46 espie Exp $
d168 1
a168 1
	if (/\$OpenBSD.*\$/) {
d171 1
a171 1
	if (/^\.TH/) {
d180 2
a181 2
	if ($opt_D and /^.Dt/) {
	    if (! /^.Dt\s+([A-Z0-9._-]+)\s+[1-9](\s+(alpha|amd64|arm|armish|aviion|cats|hp300|hppa|hppa64|i386|landisk|luna88k|mac68k|macppc|mvme68k|mvme88k|sgi|socppc|sparc|sparc64|vax|zaurus)|)$/)  {
d188 1
a188 1
		if (/^.Sh\s+SEE ALSO$/) {
d192 1
a192 1
		if (/^.Sh\s+/) {
d202 3
a204 5
		if (/^.Xr\s+(\S+)\s+(3p|[1-9])\s?(.*)?$/) {
		    my $newsaname = $1;
		    my $newsasection = $2;
		    my $newsarest = $3;
		    $newsaname =~ s/^\\&//;
d211 1
a211 1
		    if (not $sarest eq ",") {
d219 2
a220 2
		if (/^.Rs(\s+|$)/) {
		    if (not $sarest eq "") {
d229 1
a229 1
	if ($opt_f and /^\.Fn.*,.+/) {
d232 1
a232 1
	if ($opt_H and not /^\.\\\"/ and (/^([<>])/ or /[^\\][<>]/)) {
d236 1
a236 1
	    if (/^\.Sh\s+(.*)\s*$/) {
d250 1
a250 1
	    if (/\s+$/) {
d253 1
a253 1
		    s/\s+$//;
d264 5
a268 5
	    if (not /^.\\\"/ and /(Free|Net|Open)BSD/
		and not /(www|ftp).(Free|Net|Open)BSD\.org/
		and not /OpenBSD\::.*3p/
		and not /\/pub\/OpenBSD\//
		and not /@@(Free|Net|Open)BSD\.[oO][rR][gG]/) {
d272 1
a272 1
	    if (/^./ and (/Bx (Open)/ or /Bx (Free)/ or /Bx (Net)/)) {
d277 2
a278 2
	    if (/^.Os/ && !/^.Os\s*$/) {
		/^.Os(.*)/;
d284 1
a284 1
	    if (/^.Nd/ and /\.\s*$/) {
d289 2
a290 2
	    if (not /^.\\\"/ and /^\... .*[^\s][\.();,\[\]\{\}:]$/
		and not /\s\.\.\.$/ and not /\\&.$/) {
d293 1
a293 1
	    if (not /^.\\\"/ and /^\./ and /Ns [\.();,\[\]\{\}:]/) {
d296 1
a296 1
	    if (/(\w+)\(\)/) {
d303 2
a304 2
		$destruct =~ s/\\\&([\w\.])/$1/;
		if ($destruct =~ /^\.Xr\s+([\w\:\.\-\+\/]+)\s+(3p|[0-9])(.*)/) {
d307 1
a307 1
		    if ($3 =~ /^\S/) {
d310 1
a310 1
		} elsif ($destruct =~ /^\.Xr/) {
d315 3
a317 3
		$destruct =~ s/\\f.//g;
		if (not $destruct =~ /^\.\\\"/) {
		    while ($destruct =~ s/([-\w.]+)\s*\((3p|[0-9])\)//) {
d322 1
a322 1
			$destruct =~ s/(\w+)\s*\((3p|[0-9])\)//;
d328 1
a328 1
	    if (/^.Dd/ and not /^.Dd [\$]Mdocdate/) {
d334 1
a334 1
	    if (/^\.Bd.*-literal/) {
d338 1
a338 1
		if (/^\.Ed/) {
d341 1
a341 1
	    } elsif (/^$/) {
d345 1
a345 1
	    if ($last =~ /^.Pp/ and (/^(\.S[sh])/ or /^(\.Pp)/)) {
d348 1
a348 1
	    if (/^.Pp/ and $last =~ /^(\.S[sh])/) {
d357 1
a357 1
		/^\.Sh\s+(.*)$/ and $current_section = $1;
d362 1
a362 1
		/^\.Bl\s+/ and $last_error_name = "";
d365 1
a365 1
		    /^\.It\s+Bq\s+Er\s+(E[\w_]+)$/) {
d388 1
a388 1
    if ($opt_P and $last =~ /^.Pp/) {
@


1.8
log
@handle 3p manpages correctly

Also remove some warnings for OpenBSD, since /pub/OpenBSD
will occur very often in tool samples.

okay grunk@@, jmc@@
@
text
@d3 1
a3 1
# $OpenBSD: mdoclint,v 1.7 2008/11/01 17:59:27 grunk Exp $
d129 2
d135 2
a136 1
	and not -f $xreftarget3) {
@


1.7
log
@in option parsing, use a simle DeMorgan transformation, fix indentation,
and clarify the comment above.

ok espie@@
@
text
@d3 1
a3 1
# $OpenBSD: mdoclint,v 1.6 2008/11/01 16:17:30 grunk Exp $
d199 1
a199 1
		if (/^.Xr\s+(\S+)\s+([1-9]+)\s?(.*)?$/) {
d204 1
a204 1
		    if ($sasection > $newsasection
d265 2
d303 1
a303 1
		if ($destruct =~ /^\.Xr\s+([\w\.\-\+\/]+)\s+([0-9])(.*)/) {
d316 1
a316 1
		    while ($destruct =~ s/([-\w.]+)\s*\(([0-9])\)//) {
d321 1
a321 1
			$destruct =~ s/(\w+)\s*\(([0-9])\)//;
@


1.6
log
@make usage() a fatal function instead of a string.  It is just used once,
and it greatly improves code flow there.  Also, print usage to STDERR instead
of STDOUT.  Use an EOF-heredoc instead of a clumsily escaped \t\n-string.

ok espie@@
@
text
@d3 1
a3 1
# $OpenBSD: mdoclint,v 1.5 2008/11/01 15:01:49 grunk Exp $
d114 7
a120 10
    # default to all warnings
    if (not $opt_a and not $opt_D and not $opt_d and not $opt_e and
	not $opt_f and
	not $opt_H and not $opt_m and not $opt_n and not $opt_o and
	not $opt_P and not $opt_p and not $opt_r and not $opt_S and
	not $opt_s and not $opt_X and not $opt_x) {
	$opt_a = $opt_D = $opt_d = $opt_f =
	    $opt_H = $opt_m = $opt_n = $opt_o = $opt_P =
	    $opt_p = $opt_r = $opt_S = $opt_s =
	    $opt_X = $opt_x = 1;
@


1.5
log
@cleanup: zap trailing whitespaces, trim superlong lines
replace one '&&' by 'and' to not get bitten by operator precedence later on

no functional change otherwise
jmc@@ tells me to just go ahead for standard stuff like this.
@
text
@d3 1
a3 1
# $OpenBSD: mdoclint,v 1.4 2008/11/01 07:49:54 jmc Exp $
d50 27
a76 22
my $usage = "mdoclint: verify man page correctness\n".
    "usage:\tmdoclint [-$options] file ...\n\n".
    "  -a\twarn about SEE ALSO section problems\n".
    "  -D\twarn about bad casing and archs in .Dt\n".
    "  -d\twarn about bad date strings (in .Dd only)\n".
    "  -e\twarn about unsorted errors (for functions)\n".
    "  -F\tfix whitespace problems (asks before overwriting)\n".
    "  -f\twarn about possible incorrect .Fn syntax\n".
    "  -H\twarn about characters that produce problems in HTML output\n".
    "  -h\tdisplay this help text\n".
    "  -m\twarn about man pages that are not in mdoc(7) format\n".
    "  -n\twarn about .Nd's ending in '.'\n".
    "  -o\twarn about non-empty .Os strings\n".
    "  -P\twarn about paragraph problems\n".
    "  -p\twarn about punctuation problems\n".
    "  -r\twarn about missing RCS Id\n".
    "  -S\twarn about any .Sh weirdness\n".
    "  -s\twarn about whitespace problems\n".
    "  -v\tverbose output\n".
    "  -X\twarn about explicit mentions of FreeBSD, NetBSD, or OpenBSD\n".
    "  -x\twarn about cross-references with missing targets\n\n".
    "Default is -aDdfHmnoPprSsXx if no flag is specified.\n";
d112 1
a112 5

    if ($opt_h) {
	print $usage;
	exit 0;
    };
@


1.4
log
@- since mdocdate fills in the date automatically, we no longer have to check
that a valid date is entered. instead, just make sure there is an
mdocdate tag there. saves us bumping the year too. ok millert
- adjust man page accordingly
- remove -e from default options list in usage()
- add a HISTORY section
@
text
@d3 1
a3 1
# $OpenBSD: mdoclint,v 1.3 2008/10/31 14:42:44 millert Exp $
d43 1
a43 1
	
d209 2
a210 2
			warning("SEE ALSO: `.Xr $saname $sasection' ".
				"should be after `.Xr $newsaname $newsasection'");
d249 1
a249 1
	
d268 2
a269 1
		warning("verbose mention of `$1BSD' instead of `$short{$1}': `$_'");
d363 2
a364 1
		if ($current_section eq "ERRORS" && /^\.It\s+Bq\s+Er\s+(E[\w_]+)$/) {
d368 2
a369 1
				warning("Duplicate item for $current_error_name.");
d371 3
a373 1
				warning("$last_error_name and $current_error_name are not in alphabetical order.");
d378 1
a378 1
		
d394 1
a394 1
	
@


1.3
log
@Prevent Mdocdate from getting expanded inline.
@
text
@d3 1
a3 1
# $OpenBSD: mdoclint,v 1.2 2008/10/31 14:26:56 jmc Exp $
d71 1
a71 1
    "Default is -aDdefHmnoPprSsXx if no flag is specified.\n";
d326 1
a326 1
	    if (/^.Dd/ and not /^.Dd\s*.Mdocdate:\s*(January|February|March|April|May|June|July|August|September|October|November|December)\s*[1-9][0-9]*\s*(198[0-9]|199[0-9]|200[012345678])\s*\$$/) {
@


1.2
log
@turn off -e by default, since we do not currently sort the errors
in the man page;
@
text
@d3 1
a3 1
# $OpenBSD: mdoclint,v 1.1 2008/10/31 14:11:04 jmc Exp $
d326 1
a326 1
	    if (/^.Dd/ and not /^.Dd\s*\$Mdocdate: October 31 2008 $$/) {
@


1.1
log
@add mdoclint, a perl script for checking man pages;
not hooked up to the build, since there are no tests;

from wiz@@netbsd
@
text
@d3 1
a3 1
# $OpenBSD$
d119 1
a119 1
	$opt_a = $opt_D = $opt_d = $opt_e = $opt_f =
d326 1
a326 1
	    if (/^.Dd/ and not /^.Dd\s*\$Mdocdate:\s*(January|February|March|April|May|June|July|August|September|October|November|December)\s*[1-9][0-9]*\s*(198[0-9]|199[0-9]|200[012345678])\s*\$$/) {
@

