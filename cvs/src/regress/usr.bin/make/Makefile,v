head	1.47;
access;
symbols
	OPENBSD_6_1:1.44.0.4
	OPENBSD_6_1_BASE:1.44
	OPENBSD_6_0:1.41.0.4
	OPENBSD_6_0_BASE:1.41
	OPENBSD_5_9:1.41.0.2
	OPENBSD_5_9_BASE:1.41
	OPENBSD_5_8:1.38.0.6
	OPENBSD_5_8_BASE:1.38
	OPENBSD_5_7:1.38.0.4
	OPENBSD_5_7_BASE:1.38
	OPENBSD_5_6:1.35.0.6
	OPENBSD_5_6_BASE:1.35
	OPENBSD_5_5:1.35.0.4
	OPENBSD_5_5_BASE:1.35
	OPENBSD_5_4:1.33.0.4
	OPENBSD_5_4_BASE:1.33
	OPENBSD_5_3:1.33.0.2
	OPENBSD_5_3_BASE:1.33
	OPENBSD_5_2:1.31.0.6
	OPENBSD_5_2_BASE:1.31
	OPENBSD_5_1_BASE:1.31
	OPENBSD_5_1:1.31.0.4
	OPENBSD_5_0:1.31.0.2
	OPENBSD_5_0_BASE:1.31
	OPENBSD_4_9:1.29.0.6
	OPENBSD_4_9_BASE:1.29
	OPENBSD_4_8:1.29.0.4
	OPENBSD_4_8_BASE:1.29
	OPENBSD_4_7:1.29.0.2
	OPENBSD_4_7_BASE:1.29
	OPENBSD_4_6:1.28.0.6
	OPENBSD_4_6_BASE:1.28
	OPENBSD_4_5:1.28.0.2
	OPENBSD_4_5_BASE:1.28
	OPENBSD_4_4:1.27.0.4
	OPENBSD_4_4_BASE:1.27
	OPENBSD_4_3:1.27.0.2
	OPENBSD_4_3_BASE:1.27
	OPENBSD_4_2:1.26.0.2
	OPENBSD_4_2_BASE:1.26
	OPENBSD_4_1:1.24.0.2
	OPENBSD_4_1_BASE:1.24
	OPENBSD_4_0:1.23.0.6
	OPENBSD_4_0_BASE:1.23
	OPENBSD_3_9:1.23.0.4
	OPENBSD_3_9_BASE:1.23
	OPENBSD_3_8:1.23.0.2
	OPENBSD_3_8_BASE:1.23
	OPENBSD_3_7:1.22.0.2
	OPENBSD_3_7_BASE:1.22
	OPENBSD_3_6:1.20.0.10
	OPENBSD_3_6_BASE:1.20
	OPENBSD_3_5:1.20.0.8
	OPENBSD_3_5_BASE:1.20
	OPENBSD_3_4:1.20.0.6
	OPENBSD_3_4_BASE:1.20
	OPENBSD_3_3:1.20.0.4
	OPENBSD_3_3_BASE:1.20
	OPENBSD_3_2:1.20.0.2
	OPENBSD_3_2_BASE:1.20
	OPENBSD_3_1:1.15.0.2
	OPENBSD_3_1_BASE:1.15
	OPENBSD_3_0:1.11.0.2
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.4.0.2
	OPENBSD_2_8_BASE:1.4
	make:1.1.1.1
	espie:1.1.1;
locks; strict;
comment	@# @;


1.47
date	2017.07.20.21.32.10;	author espie;	state Exp;
branches;
next	1.46;
commitid	jJV1StEStU731coF;

1.46
date	2017.07.07.16.31.37;	author bluhm;	state Exp;
branches;
next	1.45;
commitid	6qP9HfCkErMnVsbN;

1.45
date	2017.07.07.14.12.43;	author espie;	state Exp;
branches;
next	1.44;
commitid	SMdzAoThdS00BxTQ;

1.44
date	2017.01.29.10.03.09;	author espie;	state Exp;
branches;
next	1.43;
commitid	HcqO2zyP5LK2N1BT;

1.43
date	2016.10.31.23.05.42;	author tb;	state Exp;
branches;
next	1.42;
commitid	SQcmibSRs89yN3sw;

1.42
date	2016.10.31.11.43.20;	author jasper;	state Exp;
branches;
next	1.41;
commitid	wIvB0i4U8JGxQwF6;

1.41
date	2015.12.21.11.31.40;	author espie;	state Exp;
branches;
next	1.40;
commitid	dDqVqISXgBhNQqlp;

1.40
date	2015.11.29.09.21.01;	author espie;	state Exp;
branches;
next	1.39;
commitid	zapfLZEjrjw2SHzX;

1.39
date	2015.11.08.10.47.22;	author espie;	state Exp;
branches;
next	1.38;
commitid	BWoVkSGXotHCTbqO;

1.38
date	2014.12.08.03.43.12;	author jsg;	state Exp;
branches;
next	1.37;
commitid	ozoj6c7hJ4hbPlL7;

1.37
date	2014.12.07.15.02.27;	author jsg;	state Exp;
branches;
next	1.36;
commitid	TqMY04vEONwRTGZF;

1.36
date	2014.09.17.02.20.07;	author lteo;	state Exp;
branches;
next	1.35;
commitid	VICNbsUcD7bi7N1D;

1.35
date	2014.01.06.12.34.42;	author espie;	state Exp;
branches;
next	1.34;

1.34
date	2014.01.06.12.31.56;	author espie;	state Exp;
branches;
next	1.33;

1.33
date	2012.08.20.08.33.50;	author espie;	state Exp;
branches;
next	1.32;

1.32
date	2012.08.17.22.19.44;	author espie;	state Exp;
branches;
next	1.31;

1.31
date	2011.06.30.14.24.51;	author espie;	state Exp;
branches;
next	1.30;

1.30
date	2011.06.30.13.12.45;	author espie;	state Exp;
branches;
next	1.29;

1.29
date	2009.11.11.00.16.47;	author fgsch;	state Exp;
branches;
next	1.28;

1.28
date	2008.11.24.16.22.38;	author espie;	state Exp;
branches;
next	1.27;

1.27
date	2007.09.17.13.58.38;	author espie;	state Exp;
branches;
next	1.26;

1.26
date	2007.08.06.06.52.30;	author espie;	state Exp;
branches;
next	1.25;

1.25
date	2007.08.05.11.10.11;	author espie;	state Exp;
branches;
next	1.24;

1.24
date	2006.09.17.19.02.13;	author espie;	state Exp;
branches;
next	1.23;

1.23
date	2005.07.15.19.43.42;	author espie;	state Exp;
branches;
next	1.22;

1.22
date	2004.11.29.16.26.58;	author espie;	state Exp;
branches;
next	1.21;

1.21
date	2004.11.21.12.58.12;	author espie;	state Exp;
branches;
next	1.20;

1.20
date	2002.09.09.10.05.34;	author espie;	state Exp;
branches;
next	1.19;

1.19
date	2002.09.02.20.01.44;	author avsm;	state Exp;
branches;
next	1.18;

1.18
date	2002.04.16.16.15.30;	author espie;	state Exp;
branches;
next	1.17;

1.17
date	2002.04.16.14.43.56;	author espie;	state Exp;
branches;
next	1.16;

1.16
date	2002.04.16.12.00.14;	author espie;	state Exp;
branches;
next	1.15;

1.15
date	2002.02.26.16.54.47;	author espie;	state Exp;
branches;
next	1.14;

1.14
date	2002.01.03.01.07.28;	author art;	state Exp;
branches;
next	1.13;

1.13
date	2002.01.01.23.07.13;	author art;	state Exp;
branches;
next	1.12;

1.12
date	2001.11.21.21.55.52;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2001.07.11.13.12.18;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2001.05.26.21.12.27;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2001.05.15.13.40.02;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2001.05.15.13.33.09;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2001.05.14.13.19.24;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2000.12.31.16.44.14;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2000.11.24.14.52.25;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2000.07.24.21.53.27;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2000.07.23.15.31.14;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2000.07.18.20.15.38;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2000.07.17.21.40.09;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.07.17.21.40.09;	author espie;	state Exp;
branches;
next	;


desc
@@


1.47
log
@extra test because mk38 triggers two issues and fixing the first one
makes the second one vanish
@
text
@# $OpenBSD: Makefile,v 1.46 2017/07/07 16:31:37 bluhm Exp $

REGRESS_TARGETS=     t1  t2  t3  t4  t5  t6  t7  t8  t9 \
		t10 t11 t12 t13 t14 t15 t16 t17 t18 t19 \
		t20 t21 t22 t23 t24 t25 t26 t27 t28 t29 \
		t30 t31 t32 t33 t34 t35 t36 t37 t38 t38j t39 \
		t40 t41 t42 t42bis t43 t44 t45 t46 t47

# We don't pass t14 t17 t18 t20
# and t16 yields piss poor performance

t14:
	# make currently incorrectly uses annotations for suffixes
	# rules for non-suffixes rules.
	@@echo DISABLED

t17:
	# Bug in cond-parser, ends up having too many open conds.
	@@echo DISABLED

t18:
	# Another test case: this one holds too many open conditionals,
	# and exactly enough closes...
	@@echo DISABLED

t20:
	# Some posix tests we don't pass yet, and won't until I've
	# added a `magic' status for variables (as SHELL is very,
	# very special, according to POSIX/Single Unix).
	@@echo DISABLED

MALLOC_OPTIONS?=J
t1: t1.out
	env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -e -r -f ${.CURDIR}/mk1 | diff - t1.out

# This is a POSIX test. pmake does not pass variables to submakes until
# after OpenBSD 2.7.
t2:
	cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk2| diff - t2.out

t3:
	cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk3 -f mk3a|diff - t3.out
	cd ${.CURDIR} && cat mk3a |env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk3 -f -|diff - t3.out
	cd ${.CURDIR} && cat mk3 |env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f - -f mk3a|diff - t3.out
	cd ${.CURDIR} && cat mk3 mk3a|env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f - |diff - t3.out

t4:
	cd ${.CURDIR} && cat mk4 mk4a|env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f - |diff - t4.out
	# Splitting files along conditionals should not work
	if cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk4 -f mk4a 2>/dev/null || test $$? -ge 128 ; then false; fi

# Another POSIX test, checking that MAKEFLAGS does work
t5:
	# first check that make does fail as expected
	if cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mkfail 2>/dev/null || test $$? -ge 128; then false; fi
	# first form of MAKEFLAGS
	cd ${.CURDIR} && env -i PATH=${PATH} MAKEFLAGS=-n MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mkfail
	# second form of MAKEFLAGS
	cd ${.CURDIR} && env -i PATH=${PATH} MAKEFLAGS=n MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mkfail

t6:
	cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} A=good -r -f mk6 | diff - t6.out

# This test passes since the cond parser has been rewritten.
t7:
	if cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk7 2>/dev/null || test $$? -ge 128; then false; fi

# check for existent/non existent files
t8:
	touch goodfile phony
	cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk8 | diff - t8.out

t9:
	cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk9 2>&1 | diff - t9.out

# verify that systemV extended variables work as expected
t10:	z.a
	cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk10 |diff - t10.out

# check for substitution parser in some confusing situations
t11:
	cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk11 |diff - t11.out
	cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk11 A=t|diff - t11.out2

# Check for filename expansions.
t12:
	cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk12 |diff - t12.out

# Verify whitespace handling.
t13:
	cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk13 |diff - t13.out

t14:
	if cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk14 2>/dev/null || test $$? -ge 128; then false; fi

t15:
	touch t15file
	cd ${.CURDIR} && ulimit -t 2 && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk15 2>/dev/null

t16:
	cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk16

t17:
	cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk17

t18:
	cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk18

t19:
	cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} SHELL=/bin/zsh ${MAKE} -r -f mk19 | diff - t19.out

t20:
	cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} SHELL=/bin/sh -r -f mk20 | diff - t20.out

t21:
	cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk21 | diff - t21.out

t22:
	cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk22 b | diff - t22.out

t23:
	cd ${.CURDIR} && ulimit -t 60 && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk22 a 2>&1| diff - t23.out

t24:
	if cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk23 a 2>/dev/null || test $$? -ge 128; then false; fi

t25:
	touch ${.OBJDIR}/t25.1st
	rm -f ${.OBJDIR}/t25.2nd
	if cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk24 t25.2nd 2>/dev/null || test $$? -ge 128; then false; fi

t26:
	touch ${.OBJDIR}/f26.2nd
	rm -f ${.OBJDIR}/f26
	if cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk24 f26 2>/dev/null || test $$? -ge 128; then false; fi

t27:
	touch ${.OBJDIR}/t27.2nd
	rm -f ${.OBJDIR}/t27.3rd
	if cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk24 t27.3rd 2>/dev/null || test $$? -ge 128; then false; fi

t28:
	cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk25 all >/dev/null

t29:
	rm -f t29dep t29.targ t29.targ2 libt29.a
	cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk26 all | diff - t29.out
	cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk26 all | diff - t29.out2

t30:
	cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk27 all | diff - t30.out

t31:
	cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk28 all

t32:
	cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} B="A" ${MAKE} -r -f mk32 all | diff - t32.out

t33:
	cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} B=0 ${MAKE} -r -f mk32 all | diff - t33.out

t34:
	cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} B=1 ${MAKE} -r -f mk32 all | diff - t34.out

t35:
	cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} B=2 ${MAKE} -r -f mk32 all | diff - t35.out

t36:
	if echo '$$$$(A:&)' | env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f - 2>/dev/null|| test $$? -ge 128; then false; fi

z.a:
	touch $@@

t37:
	if cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} B=2 ${MAKE} -r -f mk33 all; then false; else true; fi

t38:
	cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk34 | diff - t38.out

t38j:
	cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk34 -j2 | diff - t38.out

t39:
	cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk35 2>&1 | diff - t39.out

t40:
	cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk36 2>/dev/null

t41:
	if cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk37 2>/dev/null || test $$? -ge 128; then false; fi

t42:
	if cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk38 2>/dev/null || test $$? -ge 128; then false; fi

t42bis:
	if cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk38bis 2>/dev/null || test $$? -ge 128; then false; fi

t43:
	cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -j2 -f mk39 b 2>&1 | diff - t43.out
	cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -j2 -f mk39 a 2>&1 | diff - t43.out

t44:
	if cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk40 2>/dev/null || test $$? -ge 128; then false; fi

t45:
	if cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk41 2>/dev/null || test $$? -ge 128; then false; fi

# this file should fail, but NOT segfault
t46:
	if cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk42 a 2>/dev/null; then \
	    false; \
	    else \
		if test $$? -ge 1 -a $$? -lt 128; then \
		    true; else \
		    false; fi; \
	    fi

t47: tok.o
	test -f tok.o || exit 1

t1.out:
	echo MACHINE_ARCH=${MACHINE_ARCH} >$@@

.PHONY: ${REGRESS_TARGETS} regress

CLEANFILES+=t1.out z.a a.a a.b mk34.b goodfile phony t15file \
	t25.1st t25.2nd f26.2nd f26 t27.2nd t27.3rd \
	libt29.a t29dep t29.targ t29.targ2 t38.b tok tok.o tok.d

.include <bsd.regress.mk>
@


1.46
log
@Disable tests that fail due to known make bugs, fix the others.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.45 2017/07/07 14:12:43 espie Exp $
d7 1
a7 1
		t40 t41 t42 t43 t44 t45 t46 t47
d27 3
a29 3
        # Some posix tests we don't pass yet, and won't until I've
        # added a `magic' status for variables (as SHELL is very,
        # very special, according to POSIX/Single Unix).
d194 3
@


1.45
log
@trigger default .l.o  rule and check the produced file has the right name
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.44 2017/01/29 10:03:09 espie Exp $
d3 7
a9 1
# We don't pass t7, t13, t14, t17, t19, t20 t21 t26
d11 20
a30 4
REGRESS_TARGETS=t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 \
	t13 t14 t15 t16 t17 t18 t19 t20 t21 t22 t23 t24 \
	t25 t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 \
	t37 t38 t38j t39 t40 t41 t42 t43 t44 t45 t46 t47
a35 1

d64 1
a64 1
# This test currently fails, and will until the cond parser is rewritten.
d89 1
a89 1
# Verify whitespace handling. Currently failing.
d113 1
a113 1
	cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk20 | diff - t20.out
d216 1
a216 1
	test -f tok.o  || exit 1
d225 1
a225 1
	libt29.a t29dep t29.targ t29.targ2 tok tok.o tok.d
@


1.44
log
@ouch, smallest regress ever. Can't believe no-one got bitten by this
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.43 2016/10/31 23:05:42 tb Exp $
d8 1
a8 1
	t37 t38 t38j t39 t40 t41 t42 t43 t44 t45 t46
d194 3
d204 1
a204 1
	libt29.a t29dep t29.targ t29.targ2
@


1.43
log
@MALLOC_OPTION 'A' no longer exists.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.42 2016/10/31 11:43:20 jasper Exp $
d8 1
a8 1
	t37 t38 t38j t39 t40 t41 t42 t43 t44 t45
d184 9
a192 1

@


1.42
log
@fix a few suspicious (according to emacs) lines
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.41 2015/12/21 11:31:40 espie Exp $
d10 1
a10 1
MALLOC_OPTIONS?=AJ
@


1.41
log
@add parsing tests that must not segfault based on Jonathan Gray initial
report.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.41 2015/12/21 11:24:58 espie Exp $
d58 1
a58 1
	
d123 1
a123 1
	
d180 1
a180 1
	
d183 1
a183 1
	
@


1.40
log
@now that targets are dedup'd, we can fix that one too.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.39 2015/11/08 10:47:22 espie Exp $
d8 1
a8 1
	t37 t38 t38j t39 t40 t41 t42 t43
d177 7
@


1.39
log
@groupling tests that now pass
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.38 2014/12/08 03:43:12 jsg Exp $
d176 1
@


1.38
log
@Add some more makefiles that often cause a crash.
Found with the afl fuzzer.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.37 2014/12/07 15:02:27 jsg Exp $
d8 1
a8 1
	t37 t38 t38j t39 t40 t41 t42
d173 4
@


1.37
log
@Add a test which would previously often cause make to crash when run
with malloc.conf J/Junk.  This problem was fixed by espie in
targequiv.c rev 1.6.  Crash found with the afl fuzzer.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.36 2014/09/17 02:20:07 lteo Exp $
d8 1
a8 1
	t37 t38 t38j t39 t40
d167 6
@


1.36
log
@Stop using the Z malloc option which has been tedu'd by tedu@@ sometime
ago.

ok espie@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.35 2014/01/06 12:34:42 espie Exp $
d8 1
a8 1
	t37 t38 t38j t39
d164 3
@


1.35
log
@add a proper test for error message location as well.
trim excess copy&paste from former targets
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.34 2014/01/06 12:31:56 espie Exp $
d10 1
a10 1
MALLOC_OPTIONS?=AZJ
@


1.34
log
@turn mk34 into a proper full-fledged test.
forgot to link t37 into the build
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.33 2012/08/20 08:33:50 espie Exp $
d8 1
a8 1
	t37 t38 t38j
d157 1
a157 1
	cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} B=2 ${MAKE} -r -f mk34 | diff - t38.out
d160 5
a164 1
	cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} B=2 ${MAKE} -r -f mk34 -j2 | diff - t38.out
@


1.33
log
@consensus says this should be an error
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.32 2012/08/17 22:19:44 espie Exp $
d5 4
a8 1
REGRESS_TARGETS=t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 t14 t15 t16 t17 t18 t19 t20 t21 t22 t23 t24 t25 t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36
d156 5
d166 1
a166 1
CLEANFILES+=t1.out z.a a.a a.b goodfile phony t15file \
@


1.32
log
@ouch, this should not work
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.31 2011/06/30 14:24:51 espie Exp $
d151 1
a151 1
	cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} B=2 ${MAKE} -r -f mk33 all | diff - t36.out
@


1.31
log
@regress for fixed bug
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.30 2011/06/30 13:12:45 espie Exp $
d149 3
@


1.30
log
@"normal" failure implies actual exit. If $? >= 128, that means a signal
was received, usually a segfault, which is not good at all...
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.29 2009/11/11 00:16:47 fgsch Exp $
d5 1
a5 1
REGRESS_TARGETS=t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 t14 t15 t16 t17 t18 t19 t20 t21 t22 t23 t24 t25 t26 t27 t28 t29 t30 t31 t32 t33 t34 t35
d143 3
@


1.29
log
@Regress for skipping evaluation of else-type conditional if previous
corresponding one evaluted to true. espie@@ ok.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.28 2008/11/24 16:22:38 espie Exp $
d26 1
a26 1
	if cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk4 -f mk4a 2>/dev/null; then false; fi
d31 1
a31 1
	if cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mkfail 2>/dev/null; then false; fi
d42 1
a42 1
	if cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk7 2>/dev/null; then false; fi
d70 1
a70 1
	if cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk14 2>/dev/null; then false; fi
d101 1
a101 1
	if cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk23 a 2>/dev/null; then false; fi
d106 1
a106 1
	if cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk24 t25.2nd 2>/dev/null; then false; fi
d111 1
a111 1
	if cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk24 f26 2>/dev/null; then false; fi
d116 1
a116 1
	if cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk24 t27.3rd 2>/dev/null; then false; fi
@


1.28
log
@new regress test, bug from NetBSD
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.27 2007/09/17 13:58:38 espie Exp $
d5 1
a5 1
REGRESS_TARGETS=t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 t14 t15 t16 t17 t18 t19 t20 t21 t22 t23 t24 t25 t26 t27 t28 t29 t30 t31
d131 12
@


1.27
log
@Add a test for .BEGIN/.END keywords
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.26 2007/08/06 06:52:30 espie Exp $
d5 1
a5 1
REGRESS_TARGETS=t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 t14 t15 t16 t17 t18 t19 t20 t21 t22 t23 t24 t25 t26 t27 t28 t29 t30
d128 3
@


1.26
log
@Add a regress test for -lthing dependencies. As bizarre as it may seem,
gmake does the same thing, and it's infrequently used in some ports.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.25 2007/08/05 11:10:11 espie Exp $
d5 1
a5 1
REGRESS_TARGETS=t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 t14 t15 t16 t17 t18 t19 t20 t21 t22 t23 t24 t25 t26 t27 t28 t29
d125 3
@


1.25
log
@check curly targets work. No need to look at the output. If curly targets don't
expand correctly, the Makefile will fail. If it works, then it's okay.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.24 2006/09/17 19:02:13 espie Exp $
d5 1
a5 1
REGRESS_TARGETS=t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 t14 t15 t16 t17 t18 t19 t20 t21 t22 t23 t24 t25 t26 t27 t28
d121 5
d135 2
a136 1
	t25.1st t25.2nd f26.2nd f26 t27.2nd t27.3rd
@


1.24
log
@fix badly named regress, and add suffixes rules.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.23 2005/07/15 19:43:42 espie Exp $
d5 1
a5 1
REGRESS_TARGETS=t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 t14 t15 t16 t17 t18 t19 t20 t21 t22 t23 t24 t25 t26 t27
d118 3
@


1.23
log
@testcase for recent bug-report.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.22 2004/11/29 16:26:58 espie Exp $
d3 1
a3 1
# We don't pass t7, t13, t14, t17, t19, t20 t21
d5 1
a5 1
REGRESS_TARGETS=t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 t14 t15 t16 t17 t18 t19 t20 t21 t22 t23 t24
d101 16
a116 1
	if cd ${.CURDIR} && env -i PATH=${PATH} MALLOC_OPTIONS=${MALLOC_OPTIONS} ${MAKE} -r -f mk24 a 2>/dev/null; then false; fi
d124 1
a124 1
.PHONY: t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 t14 t15 t16 t17 t18 t19 t20 t21 t22 t23 t24 regress
d126 2
a127 1
CLEANFILES+=t1.out z.a a.a a.b goodfile phony t15file
@


1.22
log
@checking lazy evaluation of recursive variables
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.21 2004/11/21 12:58:12 espie Exp $
d5 1
a5 1
REGRESS_TARGETS=t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 t14 t15 t16 t17 t18 t19 t20 t21 t22 t23
d100 3
d109 1
a109 1
.PHONY: t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 t14 t15 t16 t17 t18 t19 t20 t21 t22 t23 regress
@


1.21
log
@subtle bug in for loop expansions,
reported by Florent Thoumie.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.20 2002/09/09 10:05:34 espie Exp $
d5 1
a5 1
REGRESS_TARGETS=t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 t14 t15 t16 t17 t18 t19 t20 t21
d94 6
d106 1
a106 1
.PHONY: t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 t14 t15 t16 t17 t18 t19 t20 t21 regress
@


1.20
log
@Some posix tests we don't pass yet, and won't until I've added a `magic'
status for variables (as SHELL is very, very special, according to
POSIX/Single Unix).
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.19 2002/09/02 20:01:44 avsm Exp $
d3 1
a3 1
# We don't pass t7, t13, t14, t17, t19, t20
d5 1
a5 1
REGRESS_TARGETS=t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 t14 t15 t16 t17 t18 t19 t20
d91 3
d100 1
a100 1
.PHONY: t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 t14 t15 t16 t17 t18 t19 t20 regress
@


1.19
log
@Rename a bunch of the old bsd.regress.mk variables into the new ones.

ok art@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.18 2002/04/16 16:15:30 espie Exp $
d3 1
a3 1
# We don't pass t7, t13, t14, t17
d5 1
a5 1
REGRESS_TARGETS=t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 t14 t15 t16 t17 t18
d85 6
d97 1
a97 1
.PHONY: t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 t14 t15 t16 t17 t18 regress
@


1.18
log
@and Makefile, oops.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.17 2002/04/16 14:43:56 espie Exp $
d5 1
a5 1
REGRESSTARGETS=t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 t14 t15 t16 t17 t18
@


1.17
log
@Bug in cond-parser, ends up having too many open conds.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.16 2002/04/16 12:00:14 espie Exp $
d5 1
a5 1
REGRESSTARGETS=t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 t14 t15 t16 t17
d82 3
d91 1
a91 1
.PHONY: t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 t14 t15 t16 t17 regress
@


1.16
log
@Stumbled upon a very inefficient construct by mistake...
Enter it as a regression test, so it can get fixed.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.15 2002/02/26 16:54:47 espie Exp $
d3 3
a5 2
# We don't pass t7, t13, t14...
REGRESSTARGETS=t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 t14 t15 t16
d79 3
d88 1
a88 1
.PHONY: t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 t14 t15 regress
@


1.15
log
@Add test for PR 2311
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.14 2002/01/03 01:07:28 art Exp $
d4 1
a4 1
REGRESSTARGETS=t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 t14 t15
d74 3
@


1.14
log
@Add some missing CLEANFILES.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.13 2002/01/01 23:07:13 art Exp $
d4 1
a4 1
REGRESSTARGETS=t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 t14
d71 4
d81 1
a81 1
.PHONY: t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 t14 regress
d83 1
a83 1
CLEANFILES+=t1.out z.a a.a a.b goodfile phony
@


1.13
log
@convert to bsd.regress.mk. This allows us to have the tests
correctly sorted, now that one failing test doesn't keep the others from
running.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.12 2001/11/21 21:55:52 espie Exp $
d79 1
a79 1
CLEANFILES+=t1.out z.a a.a a.b
@


1.12
log
@make currently incorrectly uses annotations for suffixes rules for
non-suffixes rules.
@
text
@d1 1
a1 4
# $OpenBSD: Makefile,v 1.11 2001/07/11 13:12:18 espie Exp $

NOMAN=
NOPROG=
d4 1
a4 1
regress: t1 t2 t3 t4 t5 t6 t8 t9 t10 t11 t12 t7 t13 t14
d81 1
a81 1
.include <bsd.prog.mk>
@


1.11
log
@Space stripping
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.10 2001/05/26 21:12:27 espie Exp $
d6 2
a7 2
# We don't pass t7 and t13...
regress: t1 t2 t3 t4 t5 t6 t8 t9 t10 t11 t12 t7 t13
d71 3
d80 1
a80 1
.PHONY: t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 regress
d82 1
a82 1
CLEANFILES+=t1.out z.a
@


1.10
log
@Check curly braces expansion.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.9 2001/05/15 13:40:02 espie Exp $
d6 2
a7 1
regress: t1 t2 t3 t4 t5 t6 t8 t9 t10 t11 t12 t7
d66 4
@


1.9
log
@Fun with parsing
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.8 2001/05/15 13:33:09 espie Exp $
d6 1
a6 1
regress: t1 t2 t3 t4 t5 t6 t8 t9 t10 t11 t7
d61 4
@


1.8
log
@reorder tests. Test 7 fails. That's known.

Add VAR:sh=cmd check
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.7 2001/05/14 13:19:24 espie Exp $
d6 1
a6 1
regress: t1 t2 t3 t4 t5 t6 t8 t9 t10 t7
d57 5
d68 1
a68 1
.PHONY: t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 regress
@


1.7
log
@Got two questions about it already: yes, t7 fails, and will until the cond
parser gets fixed.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.6 2000/12/31 16:44:14 espie Exp $
d6 1
a6 1
regress: t1 t2 t3 t4 t5 t6 t7 t8 t9 t10
@


1.6
log
@Some tests for SysV extended local variables ${@@D} and the likes.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.5 2000/11/24 14:52:25 espie Exp $
d41 1
@


1.5
log
@MALLOC_OPTIONS=AZJ by default.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.4 2000/07/24 21:53:27 espie Exp $
d6 1
a6 1
regress: t1 t2 t3 t4 t5 t6 t7 t8 t9
d51 4
d56 3
d62 1
a62 1
.PHONY: t1 t2 t3 t4 t5 t6 t7 t8 t9 regress
d64 1
a64 1
CLEANFILES+=t1.out
@


1.4
log
@Some variable substitutions
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.3 2000/07/23 15:31:14 espie Exp $
d8 1
d10 1
a10 1
	env -i PATH=${PATH} ${MAKE} -e -r -f ${.CURDIR}/mk1 | diff - t1.out
d16 1
a16 1
	cd ${.CURDIR} && env -i PATH=${PATH} ${MAKE} -r -f mk2| diff - t2.out
d19 4
a22 4
	cd ${.CURDIR} && env -i PATH=${PATH} ${MAKE} -r -f mk3 -f mk3a|diff - t3.out
	cd ${.CURDIR} && cat mk3a |env -i PATH=${PATH} ${MAKE} -r -f mk3 -f -|diff - t3.out
	cd ${.CURDIR} && cat mk3 |env -i PATH=${PATH} ${MAKE} -r -f - -f mk3a|diff - t3.out
	cd ${.CURDIR} && cat mk3 mk3a|env -i PATH=${PATH} ${MAKE} -r -f - |diff - t3.out
d25 1
a25 1
	cd ${.CURDIR} && cat mk4 mk4a|env -i PATH=${PATH} ${MAKE} -r -f - |diff - t4.out
d27 1
a27 1
	if cd ${.CURDIR} && env -i PATH=${PATH} ${MAKE} -r -f mk4 -f mk4a 2>/dev/null; then false; fi
d32 1
a32 1
	if cd ${.CURDIR} && env -i PATH=${PATH} ${MAKE} -r -f mkfail 2>/dev/null; then false; fi
d34 1
a34 1
	cd ${.CURDIR} && env -i PATH=${PATH} MAKEFLAGS=-n ${MAKE} -r -f mkfail
d36 1
a36 1
	cd ${.CURDIR} && env -i PATH=${PATH} MAKEFLAGS=n ${MAKE} -r -f mkfail
d39 1
a39 1
	cd ${.CURDIR} && env -i PATH=${PATH} ${MAKE} A=good -r -f mk6 | diff - t6.out
d42 1
a42 1
	if cd ${.CURDIR} && env -i PATH=${PATH} ${MAKE} -r -f mk7 2>/dev/null; then false; fi
d47 1
a47 1
	cd ${.CURDIR} && env -i PATH=${PATH} ${MAKE} -r -f mk8 | diff - t8.out
d50 1
a50 1
	cd ${.CURDIR} && env -i PATH=${PATH} ${MAKE} -r -f mk9 2>&1 | diff - t9.out
@


1.3
log
@Regression test, existing/non-existing files used as targets,
depending on .PHONY and such
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.2 2000/07/18 20:15:38 espie Exp $
d6 1
a6 1
regress: t1 t2 t3 t4 t5 t6 t7 t8
d48 3
d54 1
a54 1
.PHONY: t1 t2 t3 t4 t5 t6 t7 t8 regress
@


1.2
log
@Trip piss-poor conditional parser.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.1.1.1 2000/07/17 21:40:09 espie Exp $
d6 1
a6 1
regress: t1 t2 t3 t4 t5 t6 t7
d43 5
d51 1
a51 1
.PHONY: t1 t2 t3 t4 t5 t6 t7 regress
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
# $OpenBSD$
d6 1
a6 1
regress: t1 t2 t3 t4 t5 t6
d40 3
d46 1
a46 1
.PHONY: t1 t2 t3 t4 t5 t6 regress
@


1.1.1.1
log
@make regression tests.
Some of these we don't even pass, currently.
@
text
@@
