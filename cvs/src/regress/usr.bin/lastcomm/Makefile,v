head	1.2;
access;
symbols
	OPENBSD_6_2_BASE:1.2
	bluhm_20170608:1.1.1.1
	bluhm:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2017.06.11.19.43.16;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	0F9jxEJSsTe0UU8c;

1.1
date	2017.06.08.17.29.33;	author bluhm;	state Exp;
branches
	1.1.1.1;
next	;
commitid	p28OZcyMxVqRJamD;

1.1.1.1
date	2017.06.08.17.29.33;	author bluhm;	state Exp;
branches;
next	;
commitid	p28OZcyMxVqRJamD;


desc
@@


1.2
log
@Fix a test race, wait after kill in case writing the core dump takes
a while.  Adjust wrong comments.  Mention regress- in program name
to make clear where violations seen in process accounting happend.
@
text
@# $OpenBSD: Makefile,v 1.1.1.1 2017/06/08 17:29:33 bluhm Exp $

# Start with a clean /var/account/acct accounting file and turn on
# process accounting with accton(8).  Each test executes a command
# with a unique name and checks the flags in the lastcomm(1) output.
# Run tests with fork, su, core, xsig, pledge, trap accounting.

PROG=		crash
CLEANFILES=	regress-* stamp-*

.if make (regress) || make (all)
.BEGIN:
	@@echo
	rm -f stamp-rotate
.endif

# Rotate accouting files and keep statistics, from /etc/daily.
stamp-rotate:
	@@echo '\n======== $@@ ========'
	${SUDO} touch /var/account/acct
	-${SUDO} mv -f /var/account/acct.2 /var/account/acct.3
	-${SUDO} mv -f /var/account/acct.1 /var/account/acct.2
	-${SUDO} mv -f /var/account/acct.0 /var/account/acct.1
	${SUDO} cp -f /var/account/acct /var/account/acct.0
	${SUDO} sa -sq
	${SUDO} accton /var/account/acct
	date >$@@

TARGETS+=	fork
run-regress-fork:
	@@echo '\n======== $@@ ========'
	# Create shell program, fork a sub shell, and check the -F flag.
	cp -f /bin/sh regress-fork
	./regress-fork -c '( : ) &'
	lastcomm regress-fork | grep -q ' -F '

TARGETS+=	su
run-regress-su:
	@@echo '\n======== $@@ ========'
	# Create shell program, run as super user, and check the -S flag.
	cp -f /bin/sh regress-su
	${SUDO} ./regress-su -c ':'
	lastcomm regress-su | grep -q ' -S '

TARGETS+=	core
run-regress-core:
	@@echo '\n======== $@@ ========'
	# Create shell program, abort sub shell, and check the -DX flag.
	cp -f /bin/sh regress-core
	rm -f regress-core.core
	ulimit -c 100000; ./regress-core -c '( : ) & kill -SEGV $$!; wait'
	lastcomm regress-core | grep -q ' -FDX '

TARGETS+=	xsig
run-regress-xsig:
	@@echo '\n======== $@@ ========'
	# Create shell program, kill sub shell, and check the -X flag.
	cp -f /bin/sh regress-xsig
	./regress-xsig -c '( : ) & kill -KILL $$!; wait'
	lastcomm regress-xsig | grep -q ' -FX '

TARGETS+=	pledge
run-regress-pledge:
	@@echo '\n======== $@@ ========'
	# Create perl program, violate pledge, and check the -P flag.
	cp -f /usr/bin/perl regress-pledge
	ulimit -c 0; ! ./regress-pledge -MOpenBSD::Pledge -e\
	    'pledge("stdio") or die $$!; chdir("/")'
	lastcomm regress-pledge | grep -q ' -S*XP '

TARGETS+=	trap
run-regress-trap: ${PROG}
	@@echo '\n======== $@@ ========'
	# Build crashing program, run SIGSEGV handler, and check the -T flag.
	cp -f ${PROG} regress-trap
	./regress-trap
	lastcomm regress-trap | grep -q ' -S*T '

REGRESS_TARGETS=	${TARGETS:S/^/run-regress-/}
${REGRESS_TARGETS}:	stamp-rotate

.include <bsd.regress.mk>
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
# $OpenBSD$
d9 1
a9 1
CLEANFILES=	bin-* stamp-*
d33 3
a35 3
	cp -f /bin/sh bin-fork
	./bin-fork -c '( : ) &'
	lastcomm bin-fork | grep -q ' -F '
d41 3
a43 3
	cp -f /bin/sh bin-su
	${SUDO} ./bin-su -c ':'
	lastcomm bin-su | grep -q ' -S '
d49 4
a52 4
	cp -f /bin/sh bin-core
	rm -f bin-core.core
	ulimit -c 100000; ./bin-core -c '( : ) & kill -SEGV $$!'
	lastcomm bin-core | grep -q ' -FDX '
d58 3
a60 3
	cp -f /bin/sh bin-xsig
	./bin-xsig -c '( : ) & kill -KILL $$!'
	lastcomm bin-xsig | grep -q ' -FX '
d65 3
a67 3
	# Create perl program, kill sub shell, and check the -X flag.
	cp -f /usr/bin/perl bin-pledge
	ulimit -c 0; ! ./bin-pledge -MOpenBSD::Pledge -e\
d69 1
a69 1
	lastcomm bin-pledge | grep -q ' -S*XP '
d74 4
a77 4
	# Create perl program, kill sub shell, and check the -X flag.
	cp -f ${PROG} bin-trap
	./bin-trap
	lastcomm bin-trap | grep -q ' -S*T '
@


1.1.1.1
log
@Start with a clean /var/account/acct accounting file and turn on
process accounting with accton(8).  Each test executes a command
with a unique name and checks the flags in the lastcomm(1) output.
Run tests with fork, su, core, xsig, pledge, trap accounting.
@
text
@@
