head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.68
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.66
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.62
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.52
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.60
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.58
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.56
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.54
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.50
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.48
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.46
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.44
	OPENBSD_5_0:1.4.0.42
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.40
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.38
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.34
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.36
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.32
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.30
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.28
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.26
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.24
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.22
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.20
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.18
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.16
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.14
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.12
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.10
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.8
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.6
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.1.1.1.0.2
	OPENBSD_2_9_BASE:1.1.1.1
	espie:1.1.1.1
	tsort-regress:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2001.07.12.14.06.04;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2001.07.09.10.50.29;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2001.07.09.10.48.04;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2001.02.22.18.12.40;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.02.22.18.12.40;	author espie;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Better tsort checker: parses cycle output, and checks that it's correct
with respect to the input.

Additional testcase, based on libcurses, that failed in the past.

Activate t5, t6. Check cycles output everywhere.
@
text
@#!/usr/bin/perl

# Written by Marc Espie, 2001.
# Public domain

%order=();

%exception=();
%ok=();


open(SORTED, shift) or die "No sorted output\n";
while(<SORTED>) {
	chomp;
	while (m/^tsort: cycle in data/) {
		@@list = ();
		while (<SORTED>) {
			chomp;
			last if m/^tsort: cycle in data/;
			last unless m/^tsort:\s+/;
			push(@@list, $');
		}
		for $i (1 .. @@list) {
			$exception{$list[$i-1].' '.$list[$i % @@list]} = 1;
		}
		$break{$list[1]} = 1;
	}
	$order{$_} = $i++;
}
close(SORTED);

@@pairs=();

open(PAIRS, shift) or die "No pairs\n";
while (<PAIRS>) {
	chomp;
	push(@@pairs, split(/\s+/, $_));
	while (@@pairs >= 2) {
	    $b = pop @@pairs;
	    $a = pop @@pairs;
	    if (defined $exception{"$a $b"}) {
	    	$ok{"$a $b"} = 1;
	    }
	    next if $break{$a} = 1;
	    next unless $order{$a} < $order{$b};
	    die "Bad pair $a $b\n";
    	}
}
close(PAIRS);

while (($key, $v) = each %exception) {
	next if $v != 1;
	die "Bogus cycle edge $key\n" unless $ok{$key};
}
@


1.3
log
@I forgot about this change: let the perl tsort-checker run faster
by not slurping the whole file in one go.
@
text
@d8 4
d15 13
d32 2
d39 6
a44 1
	    ($a, $b) = (pop @@pairs, pop @@pairs);
d50 5
@


1.2
log
@Add test that tsort fails (incorrect detection of cycle).
Based on a test case found by Dragos Ruiu (dr@@kyx.net)
@
text
@@


1.1
log
@Initial revision
@
text
@d16 9
a24 2
undef $/;
$_ = <PAIRS>;
a25 6
@@pairs = split(/\s+/, $_);
while (@@pairs > 0) {
	($a, $b) = (pop @@pairs, pop @@pairs);
	next unless $order{$a} < $order{$b};
	die "Bad pair $a $b\n";
}
@


1.1.1.1
log
@plop
@
text
@@
