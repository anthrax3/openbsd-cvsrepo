head	1.42;
access;
symbols
	OPENBSD_6_1_BASE:1.42
	OPENBSD_6_0:1.41.0.36
	OPENBSD_6_0_BASE:1.41
	OPENBSD_5_9:1.41.0.26
	OPENBSD_5_9_BASE:1.41
	OPENBSD_5_8:1.41.0.34
	OPENBSD_5_8_BASE:1.41
	OPENBSD_5_7:1.41.0.32
	OPENBSD_5_7_BASE:1.41
	OPENBSD_5_6:1.41.0.30
	OPENBSD_5_6_BASE:1.41
	OPENBSD_5_5:1.41.0.28
	OPENBSD_5_5_BASE:1.41
	OPENBSD_5_4:1.41.0.24
	OPENBSD_5_4_BASE:1.41
	OPENBSD_5_3:1.41.0.22
	OPENBSD_5_3_BASE:1.41
	OPENBSD_5_2:1.41.0.20
	OPENBSD_5_2_BASE:1.41
	OPENBSD_5_1_BASE:1.41
	OPENBSD_5_1:1.41.0.18
	OPENBSD_5_0:1.41.0.16
	OPENBSD_5_0_BASE:1.41
	OPENBSD_4_9:1.41.0.14
	OPENBSD_4_9_BASE:1.41
	OPENBSD_4_8:1.41.0.12
	OPENBSD_4_8_BASE:1.41
	OPENBSD_4_7:1.41.0.8
	OPENBSD_4_7_BASE:1.41
	OPENBSD_4_6:1.41.0.10
	OPENBSD_4_6_BASE:1.41
	OPENBSD_4_5:1.41.0.6
	OPENBSD_4_5_BASE:1.41
	OPENBSD_4_4:1.41.0.4
	OPENBSD_4_4_BASE:1.41
	OPENBSD_4_3:1.41.0.2
	OPENBSD_4_3_BASE:1.41
	OPENBSD_4_2:1.40.0.2
	OPENBSD_4_2_BASE:1.40
	OPENBSD_4_1:1.39.0.2
	OPENBSD_4_1_BASE:1.39
	OPENBSD_4_0:1.37.0.2
	OPENBSD_4_0_BASE:1.37;
locks; strict;
comment	@# @;


1.42
date	2016.09.29.05.58.22;	author otto;	state Exp;
branches;
next	1.41;
commitid	oRx0gLpa5IlX7oO7;

1.41
date	2008.02.02.16.23.44;	author xsa;	state Exp;
branches;
next	1.40;

1.40
date	2007.03.15.13.05.23;	author bluhm;	state Exp;
branches;
next	1.39;

1.39
date	2007.02.22.02.42.50;	author ray;	state Exp;
branches;
next	1.38;

1.38
date	2006.09.19.22.35.13;	author niallo;	state Exp;
branches;
next	1.37;

1.37
date	2006.08.29.21.28.45;	author david;	state Exp;
branches;
next	1.36;

1.36
date	2006.08.23.16.26.17;	author niallo;	state Exp;
branches;
next	1.35;

1.35
date	2006.08.11.08.15.44;	author xsa;	state Exp;
branches;
next	1.34;

1.34
date	2006.08.02.04.30.31;	author niallo;	state Exp;
branches;
next	1.33;

1.33
date	2006.07.29.05.57.02;	author ray;	state Exp;
branches;
next	1.32;

1.32
date	2006.07.28.06.29.09;	author ray;	state Exp;
branches;
next	1.31;

1.31
date	2006.05.05.01.29.59;	author ray;	state Exp;
branches;
next	1.30;

1.30
date	2006.05.05.01.11.37;	author ray;	state Exp;
branches;
next	1.29;

1.29
date	2006.05.01.18.43.41;	author niallo;	state Exp;
branches;
next	1.28;

1.28
date	2006.04.29.05.36.25;	author ray;	state Exp;
branches;
next	1.27;

1.27
date	2006.04.28.20.24.20;	author xsa;	state Exp;
branches;
next	1.26;

1.26
date	2006.04.28.20.11.45;	author xsa;	state Exp;
branches;
next	1.25;

1.25
date	2006.04.26.18.42.09;	author xsa;	state Exp;
branches;
next	1.24;

1.24
date	2006.04.25.02.15.33;	author ray;	state Exp;
branches;
next	1.23;

1.23
date	2006.04.25.01.42.54;	author ray;	state Exp;
branches;
next	1.22;

1.22
date	2006.04.20.17.17.22;	author xsa;	state Exp;
branches;
next	1.21;

1.21
date	2006.04.17.15.52.18;	author xsa;	state Exp;
branches;
next	1.20;

1.20
date	2006.04.17.12.03.19;	author ray;	state Exp;
branches;
next	1.19;

1.19
date	2006.04.14.15.01.23;	author ray;	state Exp;
branches;
next	1.18;

1.18
date	2006.04.13.04.21.05;	author ray;	state Exp;
branches;
next	1.17;

1.17
date	2006.04.13.04.01.19;	author ray;	state Exp;
branches;
next	1.16;

1.16
date	2006.04.12.22.54.23;	author ray;	state Exp;
branches;
next	1.15;

1.15
date	2006.04.01.06.19.29;	author ray;	state Exp;
branches;
next	1.14;

1.14
date	2006.03.28.09.43.54;	author xsa;	state Exp;
branches;
next	1.13;

1.13
date	2006.03.27.21.57.32;	author niallo;	state Exp;
branches;
next	1.12;

1.12
date	2006.03.27.08.21.01;	author ray;	state Exp;
branches;
next	1.11;

1.11
date	2006.03.24.15.26.22;	author xsa;	state Exp;
branches;
next	1.10;

1.10
date	2006.03.24.05.14.48;	author ray;	state Exp;
branches;
next	1.9;

1.9
date	2006.03.23.03.18.29;	author ray;	state Exp;
branches;
next	1.8;

1.8
date	2006.03.21.08.32.10;	author xsa;	state Exp;
branches;
next	1.7;

1.7
date	2006.03.17.14.06.00;	author xsa;	state Exp;
branches;
next	1.6;

1.6
date	2006.03.16.03.54.43;	author ray;	state Exp;
branches;
next	1.5;

1.5
date	2006.03.15.02.36.46;	author ray;	state Exp;
branches;
next	1.4;

1.4
date	2006.03.14.03.33.30;	author ray;	state Exp;
branches;
next	1.3;

1.3
date	2006.03.14.01.51.35;	author ray;	state Exp;
branches;
next	1.2;

1.2
date	2006.03.12.00.36.00;	author ray;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.11.06.22.47;	author ray;	state Exp;
branches;
next	;


desc
@@


1.42
log
@Fix tests
- rlog lines end with ';' these days
- error message in low-mem conditions changed
@
text
@#	$OpenBSD: Makefile,v 1.41 2008/02/02 16:23:44 xsa Exp $

# Regression tests by Niall O'Higgins <niallo@@openbsd.org>.
# ksh -> Makefile by Ray Lai <ray@@cyth.net>.

CI?=		ci
CO?=		co
MERGE?=		merge
RCS?=		rcs
RCSCLEAN?=	rcsclean
RCSDIFF?=	rcsdiff
RCSMERGE?=	rcsmerge
RLOG?=		rlog

DIFF=		diff -u

CLEANFILES=	RCS blah.c blah.c,v description file1 file2 file3 \
		file file,v newfile newfile,v test test,v \
		test-truncated truncated.out foo foo,v bar bar,v

# XXX - These may need to be done in order.
#	(At least start with ci-initial.)
LTESTS= ci-initial \
	ci-mflag \
	ci-lflag \
	ci-rflag \
	co-lflag \
	ci-rev \
	co-perm \
	co-perm2 \
	ci-perm \
	ci-perm2 \
	ci-dinvalid \
	ci-dold \
	ci-wflag \
	rcsdiff-uflag \
	rcsdiff-rflag \
	rcs-mflag \
	rcs-mflag2 \
	co-RCSINIT \
	ci-nflag \
	ci-Nflag \
	ci-sflag \
	co-lflag2 \
	rcsclean \
	rcsdiff \
	rcsdiff-symbols \
	merge-eflag \
	rcsmerge \
	rcsmerge-symbols \
	ci-dflag \
	ci-xflag \
	comma \
	rcs-aflag \
	rcs-eflag \
	rcs-Aflag \
	rcs-tflag-stdin \
	rcs-tflag-stdin2 \
	rcs-tflag-stdin3 \
	rcs-tflag-inline \
	rcs-tflag-file \
	rcs-oflag \
	rcs-lock-unlock \
	co-lock-filemodes \
	co-unlock-filemodes \
	ci-filemodes \
	rcs-iflag \
	rlog-lflag \
	rlog-rflag \
	ci-nofile \
	ci-revert \
	ci-keywords \
	ci-keywords2 \
	ci-parse-keywords \
	ci-parse-keywords2 \
	co-parse-truncated \
	ci-2files \

.for t in ${LTESTS}
REGRESS_TARGETS+=test-${t}
.endfor

test-ci-initial: clean
	@@echo 'this is a test file' > test
	@@echo "a test file" | ${CI} -q -l test
	@@grep -q 'this is a test file' test,v

# Testing 'ci test' with non-interactive log message
test-ci-mflag:
	@@echo 'another revision' >> test
	@@${CI} -q -m'a second revision' test
	@@test ! -e test
	@@grep -q 'another revision' test,v

# Testing 'co -l test'
test-ci-lflag:
	@@${CO} -q -l test
	@@test -e test

# Testing 'ci -r1.30 test' with non-interactive log message
test-ci-rflag:
	@@echo "new stuff" >> test
	@@${CI} -q -r1.30 -m'bumped rev' test
	@@test ! -e test

# Testing 'co -l test'
test-co-lflag:
	@@${CO} -q -l test
	@@test -e test

# Testing 'ci test' (should be rev 1.31) with non-interactive log message
test-ci-rev:
	@@echo "a third revision" >> test
	@@${CI} -q -m'this should be rev 1.31' test
	@@grep -q '1.31' test,v

# Testing 'co -u test' - ensuring permissions are 0444
test-co-perm:
	@@${CO} -q -u test
	@@eval 'test `stat -f%p test` = 100444'

# Testing 'co -l test' - ensuring permissions are 0644
test-co-perm2:
	@@rm -rf test
	@@${CO} -q -l test
	@@eval 'test `stat -f%p test` = 100644'

# Testing 'ci -u' - ensuring permissions are 0444
test-ci-perm:
	@@echo "a line for ci -u" >> test
	@@${CI} -q -m'message for ci -u' -u test
	@@eval 'test `stat -f%p test` = 100444'

# Testing 'ci -l' - ensuring permissions are 0644
test-ci-perm2:
	@@rm -rf test
	@@${CO} -q -l test
	@@echo "a line for ci -l" >> test
	@@${CI} -q -m'message for ci -l' -l test
	@@eval 'test `stat -f%p test` = 100644'

# Testing ci with an invalid date
test-ci-dinvalid:
	@@echo 'some text for invalid date text' >> test
	@@if @@${CI} -q -d'an invalid date' -m'invalid date' -l test 2>/dev/null; then false; fi
	@@if grep 'some text for invalid date text' test,v; then false; fi

# Testing ci with a date older than previous revision
test-ci-dold:
	@@echo 'some text for old date test' >> test
	@@if ${CI} -q -d'1990-01-12 04:00:00+00' -m'old dated revision' -l test 2>/dev/null; then false; fi
	@@if grep 'some text for old date test' test,v; then false; fi

# Testing ci -wtestuser
test-ci-wflag:
	@@rm -rf test
	@@${CO} -q -l test
	@@echo "blah blah" >> test
	@@echo "output for ci -w" >> test
	@@${CI} -q -wtestuser -mcomment -l test
	@@grep -q 'author testuser' test,v

# Testing 'rcsdiff -u test' after adding another line
test-rcsdiff-uflag:
	@@echo "a line for rcsdiff test" >> test
	@@${RCSDIFF} -q -u test | tail -n 5 |		\
	    ${DIFF} ${.CURDIR}/rcsdiff-uflag.out -

# Testing 'rcsdiff -u -r1.2 test'
test-rcsdiff-rflag:
	@@${RCSDIFF} -q -u -r1.2 test | tail -n +3 |	\
	    ${DIFF} ${.CURDIR}/rcsdiff-rflag.out -

# Testing 'rcs -m1.2:logmessage'
test-rcs-mflag:
	@@${RCS} -q -m1.2:logmessage test
	@@grep -q 'logmessage' test,v

# Testing 'rcs -m'1.2:a new log message''
test-rcs-mflag2:
	@@${RCS} -q -m1.1:'a new log message, one which is quite long and set by rcsprog' test
	@@grep -q 'a new log message, one which is quite long and set by rcsprog' test,v

# Testing RCSINIT environment variable
test-co-RCSINIT:
	@@rm -rf test
	@@RCSINIT=-l ${CO} -q test
	@@eval 'test `stat -f%p test` = 100644'

# Testing check-in with symbol
test-ci-nflag:
	@@echo "something to check in with a symbol" >> test
	@@${CI} -q -n'symbolname' -m'test symbols' -l test
	@@grep -q 'symbolname' test,v

# Testing check-in, forcing symbol
test-ci-Nflag:
	@@echo "something to check in with a forced symbol" >> test
	@@${CI} -q -N'symbolname' -m'test force symbol' -l test
	@@grep -q 'test force symbol' test,v

# Trying some jiggerypokery with state
test-ci-sflag:
	@@echo "blahblah" >>  test
	@@if ${CI} -q -l -s'SPACE S' -m"state with a space" test; then false; fi
	@@if grep -q 'SPACE S' test,v; then false; fi

# Trying to check it out
test-co-lflag2:
	@@rm -rf test
	@@${CO} -q -l test
	@@test -e test

test-rcsclean: clean
	@@touch file
	@@${RCSCLEAN} -q file
	@@${RCSCLEAN} -q1.1 file
	@@${RCSCLEAN} -qsym file
	@@test -f file

	@@echo . | ${CI} -q -nsym file
	@@${CO} -q file
	@@${RCSCLEAN} -q file
	@@test ! -f file
	@@${CO} -q file
	@@${RCSCLEAN} -q1.1 file
	@@test ! -f file
	@@${CO} -q file
	@@${RCSCLEAN} -qsym file
	@@test ! -f file

	@@${CO} -q -l file
	@@${RCSCLEAN} -q file
	@@test -f file
	@@${RCSCLEAN} -q -u file
	@@test ! -f file
	@@${CO} -q -l file
	@@echo change >> file
	@@${RCSCLEAN} -q file
	@@${RCSCLEAN} -q -u file
	@@test -f file

test-merge-eflag: clean
	@@echo "line1\nline2\nfile1new" > file1
	@@echo "line1\nline2" > file2
	@@echo "line1\nfile3new\nline2" > file3
	@@${MERGE} -p -q -e file1 file2 file3 | \
	    ${DIFF} ${.CURDIR}/merge-eflag.out -

test-rcsmerge:
	@@cp -f ${.CURDIR}/rev1 blah.c
	@@echo "descr" | ${CI} -q -l -m"first rev" blah.c
	@@cp -f ${.CURDIR}/rev2 blah.c
	@@${CI} -q -l -m"second rev" blah.c
	@@cp -f ${.CURDIR}/rev3 blah.c
	@@${CI} -q -l -m"third rev" blah.c

	@@${RCSMERGE} -q -r1.1 -r1.3 -p blah.c |				\
	    ${DIFF} ${.CURDIR}/rcsmerge.out -

test-rcsmerge-symbols: clean
	@@mkdir RCS
	@@cp -f ${.CURDIR}/rev1 blah.c
	@@echo "descr" | ${CI} -q -l -nsym1 -m"first rev" blah.c
	@@cp -f ${.CURDIR}/rev2 blah.c
	@@${CI} -q -l -nsym2 -m"second rev" blah.c
	@@cp -f ${.CURDIR}/rev3 blah.c
	@@${CI} -q -l -nsym3 -m"third rev" blah.c

	@@${RCSMERGE} -q -rsym1 -rsym3 -p blah.c |		\
	    ${DIFF} ${.CURDIR}/rcsmerge.out -

test-rcsdiff:
	@@rm -rf blah.c,v

	@@cp -f ${.CURDIR}/rev1 blah.c
	@@echo "descr" | ${CI} -q -l -m"first rev" blah.c
	@@cp -f ${.CURDIR}/rev2 blah.c
	@@${CI} -q -l -m"second rev" blah.c
	@@cp -f ${.CURDIR}/rev3 blah.c
	@@${CI} -q -l -m"third rev" blah.c

	@@${RCSDIFF} -q -r1.1 -r1.3 -u blah.c | tail -n +3 |		\
	    ${DIFF} ${.CURDIR}/rcsdiff.out -

test-rcsdiff-symbols: clean
	@@mkdir RCS
	@@cp -f ${.CURDIR}/rev1 blah.c
	@@echo "descr" | ${CI} -q -l -nsym1 -m"first rev" blah.c
	@@cp -f ${.CURDIR}/rev2 blah.c
	@@${CI} -q -l -nsym2 -m"second rev" blah.c
	@@cp -f ${.CURDIR}/rev3 blah.c
	@@${CI} -q -l -nsym3 -m"third rev" blah.c

	@@${RCSDIFF} -q -rsym1 -rsym3 -u blah.c | tail -n +3 |		\
	    ${DIFF} ${.CURDIR}/rcsdiff.out -

# Testing 'ci -d'2037-01-12 04:00:00+00' -l test
test-ci-dflag: clean
	@@echo "some text for date test" >> test
	@@echo . | ${CI} -q -d'2037-01-12 04:00:00+00' -m'dated revision' -l test
	@@grep -q 'dated revision' test,v

test-ci-xflag:
	@@mkdir -p RCS
	@@rm -rf RCS/file*
	@@touch file
	@@echo . | ${CI} -q -x,abcd/,v file
	@@test -e RCS/file,abcd
	@@test ! -e RCS/file,v

	@@mv -f RCS/file,abcd RCS/file,v
	@@${CO} -q -l file
	@@echo revision >> file
	@@echo . | ${CI} -q -x,abcd/,v/xyz file
	@@test ! -e RCS/file,abcd
	@@fgrep -q revision RCS/file,v
	@@test ! -e RCS/filexyz

	@@touch file
	@@echo more >> file
	@@echo . | ${CI} -q -x file
	@@fgrep -q more RCS/file

test-comma:
	@@rm -rf RCS
	@@mkdir -p RCS
	@@touch file,notext
	@@echo . | ${CI} -q file,notext
	@@test -e RCS/file,notext,v
	@@test ! -e RCS/file,v

# Testing 'rcs -afoo,bar,baz'
test-rcs-aflag: clean
	@@echo "." | ${RCS} -q -i test
	@@${RCS} -q -afoo,bar,baz test
	@@${RLOG} test | ${DIFF} ${.CURDIR}/rcs-aflag.out -

# Testing 'rcs -efoo,bar,baz'
test-rcs-eflag: test-rcs-aflag
	@@${RCS} -q -efoo,bar,baz test
	@@${RLOG} test | ${DIFF} ${.CURDIR}/rcs-eflag.out -

# Testing  'rcs -Atest newfile'
test-rcs-Aflag: test-rcs-aflag
	@@echo "." | ${RCS} -q -i newfile
	@@${RCS} -q -Atest newfile
	@@${RLOG} newfile | ${DIFF} ${.CURDIR}/rcs-Aflag.out -

test-rcs-tflag-stdin: clean
	@@echo 'This is a description.' | ${RCS} -q -i -t file
	@@fgrep -q 'This is a description.' file,v

test-rcs-tflag-stdin2: clean
	@@echo '.This is not the description end.' | ${RCS} -q -i -t file
	@@fgrep -q '.This is not the description end.' file,v

test-rcs-tflag-stdin3: clean
	@@echo "This is the description end.\n.\nThis should not be here." | \
	    ${RCS} -q -i -t file
	@@fgrep -q 'This should not be here.' file,v || \
	    case "$$?" in 1) exit 0;; esac && exit 1

test-rcs-tflag-inline: clean
	@@${RCS} -q -i '-t-This is a description.' file
	@@fgrep -q 'This is a description.' file,v

test-rcs-tflag-file: clean
	@@echo 'This is a description.' > description
	@@${RCS} -q -i -tdescription file
	@@fgrep -q 'This is a description.' file,v

# Testing deletion of ranges
test-rcs-oflag: clean
	@@cp ${.CURDIR}/rev3 blah.c
	@@echo "blah" | ${CI} -q blah.c
	@@${CO} -q -l blah.c
	@@echo "blah2" >> blah.c
	@@echo "blah2" | ${CI} -q blah.c
	@@${CO} -q -l blah.c
	@@echo "blah3" >> blah.c
	@@echo "blah3" | ${CI} -q blah.c
	@@${CO} -q -l blah.c
	@@echo "blah4" >> blah.c
	@@echo "blah4" | ${CI} -q blah.c
	@@${CO} -q -l blah.c
	@@echo "blah5" >> blah.c
	@@echo "blah5" | ${CI} -q blah.c
	@@${CO} -q -l blah.c
	@@echo "blah6" >> blah.c
	@@echo "blah6" | ${CI} -q blah.c
	@@${CO} -q -l blah.c
	@@${RCS} -q -o1.3:1.5 blah.c
	@@tr '\n' ' ' < blah.c,v | grep -q '[[:space:]]1.3[[:space:]]' || \
	    case "$$?" in 1) exit 0;; esac && exit 1
	@@tr '\n' ' ' < blah.c,v | grep -q '[[:space:]]1.4[[:space:]]' || \
	    case "$$?" in 1) exit 0;; esac && exit 1
	@@tr '\n' ' ' < blah.c,v | grep -q '[[:space:]]1.5[[:space:]]' || \
	    case "$$?" in 1) exit 0;; esac && exit 1
	
test-rcs-lock-unlock: clean
	@@touch file
	@@mkdir -p RCS
	@@echo . | ${CI} -q -l file
	@@echo sometext > file
	@@echo . | ${CI} -q file

	@@${RCS} -q -l file
	@@${RLOG} file | fgrep -x -A 1 'locks: strict' | head -n 2 | fgrep -q 1.2
	@@${RCS} -q -u file
	@@${RLOG} file | fgrep -x -A 1 'locks: strict' | head -n 2 | fgrep -q 1.2 || \
	    case "$$?" in 1) exit 0;; esac && exit 1

	@@${RCS} -q -l1.1 file
	@@${RLOG} file | fgrep -x -A 1 'locks: strict' | head -n 2 | fgrep -q 1.1
	@@${RCS} -q -u1.1 file
	@@${RLOG} file | fgrep -x -A 1 'locks: strict' | head -n 2 | fgrep -q 1.1 || \
	    case "$$?" in 1) exit 0;; esac && exit 1

	@@${RCS} -q -l1.2 file
	@@${RLOG} file | fgrep -x -A 1 'locks: strict' | head -n 2 | fgrep -q 1.2
	@@${RCS} -q -u1.2 file
	@@${RLOG} file | fgrep -x -A 1 'locks: strict' | head -n 2 | fgrep -q 1.2 || \
	    case "$$?" in 1) exit 0;; esac && exit 1

	@@${RCS} -q -u file
	@@${RCS} -q -l file
	@@${RCS} -q -l file
	@@${RCS} -q -l1.3 file || case "$$?" in 1) exit 0;; esac && exit 1
	@@${RCS} -q -u1.3 file || case "$$?" in 1) exit 0;; esac && exit 1

# Testing 'co -l blah.c' for permissions inheritance
test-co-lock-filemodes:
	@@rm -rf RCS/blah.c,v blah.c
	@@mkdir -p RCS
	@@cp ${.CURDIR}/rev3 blah.c
	@@chmod 444 blah.c
	@@echo "blah" | ${CI} -q blah.c
	@@chmod 755 RCS/blah.c,v
	@@${CO} -q -l blah.c
	@@eval 'test `stat -f%p blah.c` = 100755'
	@@rm -rf blah.c
	@@chmod 666 RCS/blah.c,v
	@@${CO} -q -l blah.c
	@@eval 'test `stat -f%p blah.c` = 100644'
	@@rm -rf blah.c
	@@chmod 600 RCS/blah.c,v
	@@${CO} -q -l blah.c
	@@eval 'test `stat -f%p blah.c` = 100600'
	@@rm -rf blah.c
	@@chmod 604 RCS/blah.c,v
	@@${CO} -q -l blah.c
	@@eval 'test `stat -f%p blah.c` = 100604'
	@@rm -rf blah.c
	@@chmod 754 RCS/blah.c,v
	@@${CO} -q -l blah.c
	@@eval 'test `stat -f%p blah.c` = 100754'
	

# Testing 'co -u blah.c' for permissions inheritance
test-co-unlock-filemodes: test-co-lock-filemodes
	@@rm -rf RCS/blah.c,v blah.c
	@@mkdir -p RCS
	@@cp ${.CURDIR}/rev3 blah.c
	@@echo "blah" | ${CI} -q blah.c
	@@chmod 755 RCS/blah.c,v
	@@${CO} -q -u blah.c
	@@eval 'test `stat -f%p blah.c` = 100555'
	@@rm -rf blah.c
	@@chmod 666 RCS/blah.c,v
	@@${CO} -q -u blah.c
	@@eval 'test `stat -f%p blah.c` = 100444'
	@@rm -rf blah.c
	@@chmod 600 RCS/blah.c,v
	@@${CO} -q -u blah.c
	@@eval 'test `stat -f%p blah.c` = 100400'
	@@rm -rf blah.c
	@@chmod 604 RCS/blah.c,v
	@@${CO} -q -u blah.c
	@@eval 'test `stat -f%p blah.c` = 100404'
	@@rm -rf blah.c
	@@chmod 754 RCS/blah.c,v
	@@${CO} -q -u blah.c
	@@eval 'test `stat -f%p blah.c` = 100554'

# Testing 'ci blah.c' for permissions inheritance
test-ci-filemodes: test-co-unlock-filemodes
	@@rm -rf RCS/blah.c,v blah.c
	@@mkdir -p RCS
	@@cp ${.CURDIR}/rev3 blah.c
	@@chmod 755 blah.c
	@@echo "blah" | ${CI} -q blah.c
	@@eval 'test `stat -f%p RCS/blah.c,v` = 100555'
	@@rm -rf RCS/blah.c,v blah.c
	@@cp ${.CURDIR}/rev3 blah.c
	@@chmod 666 blah.c
	@@echo "blah" | ${CI} -q blah.c
	@@eval 'test `stat -f%p RCS/blah.c,v` = 100444'
	@@rm -rf RCS/blah.c,v blah.c
	@@cp ${.CURDIR}/rev3 blah.c
	@@chmod 700 blah.c
	@@echo "blah" | ${CI} -q blah.c
	@@eval 'test `stat -f%p RCS/blah.c,v` = 100500'
	@@rm -rf RCS/blah.c,v blah.c
	@@cp ${.CURDIR}/rev3 blah.c
	@@chmod 606 blah.c
	@@echo "blah" | ${CI} -q blah.c
	@@eval 'test `stat -f%p RCS/blah.c,v` = 100404'

# Test various operations on a file with no revisions.
test-rcs-iflag: clean
	@@mkdir -p RCS
	@@echo . | ${RCS} -i -q file
	@@test -f RCS/file,v
	@@${CO} -q file
	@@test -f file
	@@test ! -s file
	@@rm -f file
	@@${CO} -q -l file
	@@echo text >> file
	@@${CI} -q file
	@@fgrep -q 1.1 RCS/file,v

test-rlog-lflag: clean
	@@mkdir RCS
	@@touch file
	@@echo rev1 | ${CI} -q -l file
	@@${RLOG} -l file | fgrep -q 'revision 1.1'
	@@echo line >> file
	@@echo rev2 | ${CI} -q file
	@@${RLOG} -l file | fgrep -q 'revision 1.2' ||	\
	    case "$$?" in 1) exit 0;; esac && exit 1

# Test various cases for the -r flag
test-rlog-rflag: clean
	@@touch file
	@@echo "foo" > file
	@@echo "descr" | ${CI} -q -m"first rev" -d'2006-01-01 00:00:00+00' \
		-wfoo file
	@@${CO} -q -l file
	@@echo "foo" >> file
	@@${CI} -q -m"second rev" -d'2006-01-01 00:00:00+00' -wfoo file
	@@${CO} -q -l file
	@@echo "foo" >> file
	@@${CI} -q -m"third rev" -d'2006-01-01 00:00:00+00' -wfoo file

	@@${RLOG} -r1.1 file | ${DIFF} ${.CURDIR}/rlog-rflag1.out -
	@@${RLOG} -r1.1:1.3 file | ${DIFF} ${.CURDIR}/rlog-rflag2.out -
	@@${RLOG} -r1.2: file | ${DIFF} ${.CURDIR}/rlog-rflag3.out -
	@@${RLOG} -r:1.1 file | ${DIFF} ${.CURDIR}/rlog-rflag4.out -

test-rlog-zflag: clean
	@@touch file
	@@echo "descr" | ${CI} -q -m"first rev" -d'2006-01-01 00:00:00+00' \
		-wfoo file
	@@${RLOG} -zLT file | ${DIFF} ${.CURDIR}/rlog-zflag1.out -
	@@${RLOG} -z+03:14:23 file | ${DIFF} ${.CURDIR}/rlog-zflag2.out -
	@@${RLOG} -z+03:14 file | ${DIFF} ${.CURDIR}/rlog-zflag3.out -
	@@${RLOG} -z+0314 file | ${DIFF} ${.CURDIR}/rlog-zflag4.out -
	@@${RLOG} -z-03:14:23 file | ${DIFF} ${.CURDIR}/rlog-zflag5.out -

test-ci-nofile:
	@@${CI} -q nonexistent || case "$$?" in 1) exit 0;; esac && exit 1

test-ci-revert: clean
	@@mkdir RCS
	@@touch file
	@@echo . | ${CI} -q -l file
	@@${CI} -q -mm -l file
	@@# Make sure reverting doesn't unlock file.
	@@${CI} -q -mm -l file

test-ci-keywords: clean
	@@mkdir RCS
	@@sed 's/.*/$$&$$/' ${.CURDIR}/keywords.in > file
	@@sed 's/^[A-Z][A-Z]*[a-z][a-z]*: .*/$$&$$/' ${.CURDIR}/keywords.out > newfile
	@@echo . | ${CI} -q -u file
	@@sed -e 's,${USER},USER,' -e "s/\($$[A-Z][a-z]*: \).*file,v/\1file,v/" \
	    -e 's,[0-9][0-9][0-9][0-9]/[0-9][0-9]/[0-9][0-9] [0-9][0-9]:[0-9][0-9]:[0-9][0-9],YYYY/MM/DD HH:MI:SS,' \
	    file | ${DIFF} newfile -

# Lots of expansion.
test-ci-keywords2: clean
	@@perl -e 'print "\$$Id\$$\n" x 10000;' > file
	@@echo . | ${CI} -l -q file

test-ci-parse-keywords: clean
	@@echo '$Id' > test
	@@echo . | ${CI} -q -k test

test-ci-parse-keywords2: clean
	@@echo '$Id: blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah' > test 
	@@echo . | ${CI} -q -k test

# Check for correct EOF handling in rcs parser
test-co-parse-truncated: clean
	@@sh -c 'ulimit -d 5000 && ${CO} -q ${.CURDIR}/test-truncated > truncated.out 2>&1' || \
	    case "$$?" in 1) exit 0;; esac && exit 1
	@@grep -q 'co: could not parse admin data' truncated.out

test-ci-2files: clean
	@@touch foo bar
	@@${CI} -q -t-first -l foo
	@@test -f foo,v -a ! -f bar,v
	@@${CI} -q -t-second -l foo bar
	@@test -f foo,v -a -f bar,v

clean:
	@@rm -rf ${CLEANFILES}

.include <bsd.regress.mk>
@


1.41
log
@Enable `rlog-rflag' test now that rlog output matches GNU RCS.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.40 2007/03/15 13:05:23 bluhm Exp $
d599 1
a599 1
	@@grep -q 'co: problem parsing deltatexts' truncated.out
@


1.40
log
@When commiting multiple files with ci, the flags from the previous
files affected the later ones.

ok niallo@@ xsa@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.39 2007/02/22 02:42:50 ray Exp $
d69 1
@


1.39
log
@Fix regression tests.  False positives happened whenever the date/time
contained 1.3, 1.4, or 1.5.

``hahahahahaha'' joris@@.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.38 2006/09/19 22:35:13 niallo Exp $
d18 2
a19 1
		file file,v newfile newfile,v test test,v test-truncated truncated.out
d76 1
d599 7
@


1.38
log
@- bump ulimit -d value for EOF test case so that it works on amd64 and sparc64 (thanks to pedro@@ for
  testing on his sparc64).
- use ${.CURDIR} to make this work properly with an obj/ dir.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.37 2006/08/29 21:28:45 david Exp $
d391 1
a391 1
	@@fgrep -q '1.3' blah.c,v || \
d393 1
a393 1
	@@fgrep -q '1.4' blah.c,v || \
d395 1
a395 1
	@@fgrep -q '1.5' blah.c,v || \
@


1.37
log
@fix output location of truncated files test
ok niallo@@ deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.36 2006/08/23 16:26:17 niallo Exp $
d594 1
a594 1
	@@sh -c 'ulimit -d 1000 && ${CO} -q test-truncated > truncated.out 2>&1' || \
@


1.36
log
@- add regression test for rcs parser's handling of truncated files.

ok xsa@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.35 2006/08/11 08:15:44 xsa Exp $
d594 1
a594 1
	@@sh -c 'ulimit -d 1000 && ${CO} -q test-truncated > ${.CURDIR}/truncated.out 2>&1' || \
@


1.35
log
@add tests for merge -e; OK ray@@.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.34 2006/08/02 04:30:31 niallo Exp $
d18 1
a18 1
		file file,v newfile newfile,v test test,v
d74 1
d591 6
@


1.34
log
@- add regression tests for two problems with keyword parsing.

ok ray@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.33 2006/07/29 05:57:02 ray Exp $
d8 1
d17 2
a18 2
CLEANFILES=	RCS blah.c blah.c,v description file file,v newfile	\
		newfile,v test test,v
d47 1
d238 7
@


1.33
log
@Add regression test for files with lots of keywords.

OK xsa@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.32 2006/07/28 06:29:09 ray Exp $
d70 2
d573 8
@


1.32
log
@Remove $Log$ check from keyword expansion test, which is the only
keyword we don't do yet.  Now we can enable the test.

OK niallo@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.31 2006/05/05 01:29:59 ray Exp $
d69 1
d566 5
@


1.31
log
@o GNU ci returns 0 when a file is reverted (co -l file; ci file).
o Don't unlock file after revert.
o Fix spelling.

Passes extra tests in GNU rcstest.

OK niallo@@.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.30 2006/05/05 01:11:37 ray Exp $
d68 1
a68 1
	#ci-keywords \
@


1.30
log
@Output to a different filename so the tests work without an obj/
directory.  Also change diff -u to ${DIFF}.

OK xsa@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.29 2006/05/01 18:43:41 niallo Exp $
d67 1
d548 8
@


1.29
log
@- add tests for -oranges.

ok joris@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.28 2006/04/29 05:36:25 ray Exp $
d551 1
a551 1
	@@sed 's/^[A-Z][A-Z]*[a-z][a-z]*: .*/$$&$$/' ${.CURDIR}/keywords.out > keywords.out
d555 1
a555 1
	    file | diff -u keywords.out -
@


1.28
log
@Add tests for keywords in ci, not enabled yet.  We are still missing
$Log$ functionality.

OK xsa@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.27 2006/04/28 20:24:20 xsa Exp $
d59 1
d356 28
@


1.27
log
@add another variant of `rlog -z' usage (still not enabled);
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.26 2006/04/28 20:11:45 xsa Exp $
d66 1
d518 9
@


1.26
log
@add various tests for `rlog -z' (not enabled yet);
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.25 2006/04/26 18:42:09 xsa Exp $
a506 1
	@@echo "foo" > file
d513 1
@


1.25
log
@DIFF=diff -u
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.24 2006/04/25 02:15:33 ray Exp $
d504 10
@


1.24
log
@Back out previous tests, the keywords all expanded and destroyed
my tests.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.22 2006/04/20 17:17:22 xsa Exp $
d14 2
d155 1
a155 1
	    diff -u ${.CURDIR}/rcsdiff-uflag.out -
d160 1
a160 1
	    diff -u ${.CURDIR}/rcsdiff-rflag.out -
d240 1
a240 1
	    diff -u ${.CURDIR}/rcsmerge.out -
d252 1
a252 1
	    diff -u ${.CURDIR}/rcsmerge.out -
d265 1
a265 1
	    diff -u ${.CURDIR}/rcsdiff.out -
d277 1
a277 1
	    diff -u ${.CURDIR}/rcsdiff.out -
d318 1
a318 1
	@@${RLOG} test | diff -u ${.CURDIR}/rcs-aflag.out -
d323 1
a323 1
	@@${RLOG} test | diff -u ${.CURDIR}/rcs-eflag.out -
d329 1
a329 1
	@@${RLOG} newfile | diff -u ${.CURDIR}/rcs-Aflag.out -
d500 4
a503 4
	@@${RLOG} -r1.1 file | diff -u ${.CURDIR}/rlog-rflag1.out -
	@@${RLOG} -r1.1:1.3 file | diff -u ${.CURDIR}/rlog-rflag2.out -
	@@${RLOG} -r1.2: file | diff -u ${.CURDIR}/rlog-rflag3.out -
	@@${RLOG} -r:1.1 file | diff -u ${.CURDIR}/rlog-rflag4.out -
@


1.23
log
@Regression tests for keywords for ci.

OK xsa@@
@
text
@a505 8
test-ci-keywords: clean
	@@mkdir RCS
	@@cp ${.CURDIR}/keywords.in file
	@@echo . | ${CI} -q -u file
	@@sed -e 's,${USER},USER,' -e "s/\($$[A-Z][a-z]*: \).*file,v/\1file,v/" \
	    -e 's,[0-9][0-9][0-9][0-9]/[0-9][0-9]/[0-9][0-9] [0-9][0-9]:[0-9][0-9]:[0-9][0-9],YYYY/MM/DD HH:MI:SS,' \
	    file | diff -u ${.CURDIR}/keywords.out -

@


1.22
log
@add various tests for `rlog -r' (not enabled yet); OK ray@@.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.21 2006/04/17 15:52:18 xsa Exp $
d505 8
@


1.21
log
@quiet a bit more test-rcs-iflag;
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.20 2006/04/17 12:03:19 ray Exp $
d484 18
@


1.20
log
@Relieve checkin_update and checkin_init of the responsibility of
calling rcs_close() so we don't try to rcs_close() the same file
twice if the working file does not exist, resulting in a core dump.

The current code also returns the status of the last file, so if
we do:

	$ touch file
	$ ci nonexistent file

that will return 0.  GNU returns 1.  Fix that.

Additionally, it returns -1 on error, which turns into 255.  It
should return 1.

OK niallo@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.19 2006/04/14 15:01:23 ray Exp $
d470 1
a470 1
	@@${CO} -l file
@


1.19
log
@Regression tests for rlog -l.

OK joris@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.18 2006/04/13 04:21:05 ray Exp $
d63 1
d484 3
@


1.18
log
@Regression tests for ci and co for revision-less RCS files.

OK joris@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.15 2006/04/01 06:19:29 ray Exp $
d62 1
d473 10
@


1.17
log
@Somehow the regression tests and commit message were both gone from
the last commit.  This adds the missing symbols regression tests.
Also includes an rcsclean regression test.

Previous commit, which included these tests, OK joris@@
@
text
@d60 2
a61 1
	ci-filemodes
d458 14
@


1.16
log
@Better match GNU behavior for rcs -l and rcs -u.
Save 2 bytes of newlines.

OK joris@@
@
text
@d9 1
d41 1
d43 1
d45 1
d197 29
d237 12
d262 12
d275 1
a275 1
test-ci-dflag:
d277 1
a277 1
	@@${CI} -q -d'2037-01-12 04:00:00+00' -m'dated revision' -l test
@


1.15
log
@Add rcs -l, rcs -u, and regression tests.

``put it all in'' joris@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.14 2006/03/28 09:43:54 xsa Exp $
d317 2
a318 1
	@@${RCS} -q -u file || case "$$?" in 1) exit 0;; esac && exit 1
a319 1
	@@${RCS} -q -l file || case "$$?" in 1) exit 0;; esac && exit 1
@


1.14
log
@enable the following tests:
 - rcs-aflag
 - rcs-eflag
 - rcs-Aflag
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.13 2006/03/27 21:57:32 niallo Exp $
d53 1
d291 31
@


1.13
log
@- add regression tests for file mode support.

ok ray@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.12 2006/03/27 08:21:01 ray Exp $
d45 3
@


1.12
log
@Fix and clean up -t flag:
 - Add comments.
 - Support -t-inline-comments-like-man-page-says.
 - -tfilename still works.
 - When using -t (read description from stdin) don't end when first
   character is `.'.  Instead, end if whole line consists of one `.'.
 - Add regression test.

I also changed the regression Makefile to have a trailing slash on
the final element.  As long as we have a blank line it will be fine,
plus it will save us some trouble when adding new tests.

After adding line breaks, ``rest looks fine.'' xsa@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.11 2006/03/24 15:26:22 xsa Exp $
d50 3
d287 78
@


1.11
log
@add test for `rcs -Aoldfile'; not enabled yet. ray@@ likes it.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.10 2006/03/24 05:14:48 ray Exp $
d13 2
a14 1
CLEANFILES=	RCS blah.c blah.c,v file file,v newfile newfile,v test test,v
d44 6
a49 1
	comma
d261 23
@


1.10
log
@Allow the -x flag to be used without an extension.

``that makes sense'' xsa@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.9 2006/03/23 03:18:29 ray Exp $
d13 1
a13 1
CLEANFILES=	RCS blah.c blah.c,v file file,v test test,v
d249 6
@


1.9
log
@Missing CLEANFILES.

``i guess so'' xsa@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.8 2006/03/21 08:32:10 xsa Exp $
d226 4
a229 5
	@@# XXX - Coming soon
	@@#touch file
	@@#echo more >> file
	@@#${CI} -q -x file
	@@#fgrep -q more RCS/file
@


1.8
log
@add tests for `rcs -a' and `rcs -e', just not enabled yet.
"Looks good" ray@@.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.7 2006/03/17 14:06:00 xsa Exp $
d13 1
a13 1
CLEANFILES=	blah.c blah.c,v test test,v RCS
@


1.7
log
@cleanup; OK ray@@.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.6 2006/03/16 03:54:43 ray Exp $
d11 1
d239 11
@


1.6
log
@Quiet, please.

``sure.'' xsa and ``Yup, thats cool.'' niallo
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.5 2006/03/15 02:36:46 ray Exp $
d14 33
a46 12
# XXX - These may need to be done in order.  (At least start with
#	test-ci-initial.)
REGRESS_TARGETS= test-ci-initial test-ci-mflag test-ci-lflag
REGRESS_TARGETS+=test-ci-rflag test-co-lflag test-ci-rev test-co-perm
REGRESS_TARGETS+=test-co-perm2 test-ci-perm test-ci-perm2
REGRESS_TARGETS+=test-ci-dinvalid test-ci-dold test-ci-wflag
REGRESS_TARGETS+=test-rcsdiff-uflag
REGRESS_TARGETS+=test-rcsdiff-rflag test-rcs-mflag test-rcs-mflag2
REGRESS_TARGETS+=test-co-RCSINIT test-ci-nflag test-ci-Nflag
REGRESS_TARGETS+=test-ci-sflag test-co-lflag2 test-rcsdiff
REGRESS_TARGETS+=test-rcsmerge
REGRESS_TARGETS+=test-ci-dflag test-ci-xflag test-comma
@


1.5
log
@Fix and enable rcsmerge test.

rcsmerge stuff ok niallo
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.4 2006/03/14 03:33:30 ray Exp $
d192 1
a192 1
	@@echo . | ${CI} -x,abcd/,v file
d197 1
a197 1
	@@${CO} -l file
d199 1
a199 1
	@@echo . | ${CI} -x,abcd/,v/xyz file
d207 1
a207 1
	@@#${CI} -x file
@


1.4
log
@ci currently doesn't parse the -x flag at all, defaulting to ",v/" every
time.  I rewrote checkin_choose_rcsfile() to handle it using these rules:
 - If a directory structure is given (ci -x,abcd dir/dir2/file) then all
   RCS files are under dir/dir2.
 - If the RCS/ directory exists, use it.  Otherwise use current directory.
 - If the -x flag is specified, use those slash-separated extensions.
   Otherwise, use the default (",v/").
 - Look in the rcs directory (RCS/ or current directory) for a file
   with a matching extension, for each extension.  Each extension is
   tried in order.  If a file exists, it is used.  If no file exists
   with any extension, the first one is used.
 - The empty extension is treated as no extension, because I can't
   figure out what its special meaning is.

It sounds complicated, and the code is kinda complicated as well, but it
makes sense if you think about it.

ok niallo
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.3 2006/03/14 01:51:35 ray Exp $
d24 1
a24 1
#REGRESS_TARGETS+=test-rcsmerge
@


1.3
log
@OpenRCS currently strips any text in a filename up to and including
the last comma, assuming that it is a `,v' extension.  GNU RCS does
not do this.  This removes that check.

ok niallo
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.2 2006/03/12 00:36:00 ray Exp $
d12 1
a12 1
CLEANFILES=	blah.c blah.c,v test test,v
d25 1
a25 1
REGRESS_TARGETS+=test-ci-dflag test-comma
d188 22
d217 3
@


1.2
log
@Remove $Id$ tags, which broke regression tests were are not really
necessary for the tests.

ok niallo
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.1 2006/03/11 06:22:47 ray Exp $
d25 1
a25 1
REGRESS_TARGETS+=test-ci-dflag
d187 8
@


1.1
log
@RCS regression tests.

ok joris, niallo, otto, and xsa
@
text
@d1 1
a1 1
#	$OpenBSD$
a166 1
	    sed 's/\($$Id: blah.c,v [0-9]*\.[0-9]* \)[^$$]*/\1/' |	\
a179 1
	    sed 's/\($$Id: blah.c,v [0-9]*\.[0-9]* \)[^$$]*/\1/' |	\
@

