head	1.3;
access;
symbols
	OPENBSD_5_2:1.2.0.28
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.26
	OPENBSD_5_0:1.2.0.24
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.22
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.20
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.16
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.18
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.14
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.12
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.10
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.8
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.6
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.4
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.2
	OPENBSD_3_9_BASE:1.2;
locks; strict;
comment	@ * @;


1.3
date	2012.07.28.19.07.07;	author guenther;	state dead;
branches;
next	1.2;

1.2
date	2005.12.09.03.34.34;	author cloder;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.02.21.24.09;	author grunk;	state Exp;
branches;
next	;


desc
@@


1.3
log
@lint is with us no more; remove regress tests
@
text
@/*	$OpenBSD: test-10.c,v 1.2 2005/12/09 03:34:34 cloder Exp $	*/

/*
 * Placed in the public domain by Chad Loder <cloder@@openbsd.org>.
 *
 * Test lint warning about literal char assignments.
 */
#include <limits.h>

/* ARGSUSED */
int
main(int argc, char *argv[])
{
	unsigned char c;

	c = '\377';	/* should not warn, because c is a char type */
	c = -1;		/* should warn, because rvalue is not a char literal */
	c++;
	
	return 0;
}


@


1.2
log
@Test how lint deals with warning for signed/unsigned char conversions
involving character literals (as opposed to literals of other integral
types).
@
text
@d1 1
a1 1
/*	$OpenBSD: test-10.c,v 1.1 2005/12/02 21:24:09 grunk Exp $	*/
@


1.1
log
@add test that lint gets keywords from comments out of #define macros
ok cloder@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d4 1
a4 1
 * Placed in the public domain by Alexander von Gernler <grunk@@openbsd.org>
d6 1
a6 1
 * Test if lint keywords in #define macros are preserved
d8 1
d11 10
a20 2
void
foo(int bar) {
a22 11
#define	S(x)	do { foo(x); } while (/* CONSTCOND */ 0)
#define	T(x)	do { foo(x); } while (0)

/* ARGSUSED */
int
main(int argc, char *argv[]) {
	S(1);
	T(1);

	do { foo(1); } while (/* CONSTCOND */ 0);
	do { foo(1); } while (0);
a23 2
	return (0);
}
@

