head	1.4;
access;
symbols
	OPENBSD_5_2:1.3.0.20
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.18
	OPENBSD_5_0:1.3.0.16
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.14
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.12
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.8
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.10
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.6
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.4
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.2
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.2.0.8
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.6
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.4
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.2
	OPENBSD_3_9_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2012.07.28.19.07.07;	author guenther;	state dead;
branches;
next	1.3;

1.3
date	2007.10.08.08.18.35;	author gilles;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.03.01.04.06;	author cloder;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.02.22.11.46;	author cloder;	state Exp;
branches;
next	;


desc
@@


1.4
log
@lint is with us no more; remove regress tests
@
text
@/*      $OpenBSD: test-11.c,v 1.3 2007/10/08 08:18:35 gilles Exp $	*/

/*
 * Placed in the public domain by Chad Loder <cloder@@openbsd.org>.
 *
 * Test lint parsing of gcc's __attribute__ syntax.
 */

/* Define this here so we don't need to pull in a header */
void exit(int);

/*
 * A function prototype with a single attribute before.
 */
__attribute__((__noreturn__)) void foo1(void);

/*
 * A function prototype with a multiple attributes before.
 */
__attribute__((__noreturn__))
__attribute__((__pure__))
__attribute__((__section__("text")))
void foo2(void);

/*
 * A function prototype with a single attribute after.
 */
void foo3(void) __attribute__((__noreturn__));

/*
 * A function prototype with multiple attributes after.
 */
void foo4(void)
	__attribute__((__noreturn__))
	__attribute__((__pure__))
	__attribute__((__section__("text")));

/*
 * A function prototype with multiple attributes after,
 * one of which (volatile) is stupidly also a C keyword.
 */
__attribute__((__noreturn__)) void foo5(const char *, ...)
	__attribute__((volatile, __format__ (printf, 1, 2)));

/*
 * A function prototype with unnamed parameters having attributes.
 */
void foo6(char[], int __attribute__((unused)));

/*
 * A function prototype with named parameters having attributes.
 */
void foo7(char func[], int i __attribute__((unused)));

/*
 * A function definition with a single attribute before.
 */
__attribute__((__noreturn__)) void
foo8(void)
{
	exit(0);
}

/*
 * A function definition with multiple attributes before.
 */
__attribute__((__noreturn__))
__attribute__((__pure__))
__attribute__((__section__("text")))
void
foo9(void)
{
	exit(0);
}

/*
 * A struct type having members with attributes.
 */
typedef
struct mystruct {
	unsigned char	c_data[128]	__packed;
	unsigned int	u_data[128]	__packed;
} mystruct_t;


/*
 * A struct with attributes.
 */
struct mystruct2 {
	unsigned char	c_data[128];
} __packed;

/*
 * A typedef with an attribute after the typename.
 */
typedef int more_aligned_int __attribute__ ((aligned (8)));

/*
 * A typedef with attributes before the typename.
 */
typedef short __attribute__((__may_alias__)) short_a;


/*
 * A variable declaration with attributes.
 */
int sh __attribute__((__section__ ("shared")));

/*
 * A variable declaration with attributes and initializer.
 */
int sh2 __attribute__((__section__ ("shared"))) = 0;

/*
 * A simple indirection: "pointer to 8-bit aligned pointer to char"
 */
char * __attribute__((__aligned__(8))) *pac;

/*
 * A really tough one with multiple indirections that even older
 * gcc has problems with.
 */
void (****f)(void) __attribute__((__noreturn__));

int
main(int argc, char* argv[])
{
	return 0;
}





@


1.3
log
@attribute packed -> __packed

OK millert
@
text
@d1 1
a1 1
/*      $OpenBSD: test-11.c,v 1.2 2005/12/03 01:04:06 cloder Exp $	*/
@


1.2
log
@Add a couple more __attribute__ test cases to test 11, and hook up 11
now that lint deals with attributes.
@
text
@d1 1
a1 1
/*      $OpenBSD: test-11.c,v 1.1 2005/12/02 22:11:46 cloder Exp $	*/
d81 2
a82 2
	unsigned char	c_data[128]	__attribute__((__packed__));
	unsigned int	u_data[128]	__attribute__((__packed__));
d91 1
a91 1
} __attribute__((__packed__));
@


1.1
log
@Test gcc attribute parsing. Not hooked up yet.
@
text
@d1 1
a1 1
/*      $OpenBSD$	*/
d38 16
d59 1
a59 1
foo5(void)
d71 1
a71 1
foo6(void)
@

