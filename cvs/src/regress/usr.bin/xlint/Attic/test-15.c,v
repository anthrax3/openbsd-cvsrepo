head	1.3;
access;
symbols
	OPENBSD_5_2:1.2.0.28
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.26
	OPENBSD_5_0:1.2.0.24
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.22
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.20
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.16
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.18
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.14
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.12
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.10
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.8
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.6
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.4
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.2
	OPENBSD_3_9_BASE:1.2;
locks; strict;
comment	@ * @;


1.3
date	2012.07.28.19.07.07;	author guenther;	state dead;
branches;
next	1.2;

1.2
date	2005.12.17.20.05.49;	author cloder;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.16.03.02.22;	author cloder;	state Exp;
branches;
next	;


desc
@@


1.3
log
@lint is with us no more; remove regress tests
@
text
@/*	$OpenBSD: test-15.c,v 1.2 2005/12/17 20:05:49 cloder Exp $	*/

/*
 * Placed in the public domain by Chad Loder <cloder@@openbsd.org>.
 *
 * Test lint dealing with division by zero.
 */

/* ARGSUSED */
void dbzd(double d) { }
/* ARGSUSED */
void dbzf(float f) { }
/* ARGSUSED */
void dbzi(int i) { }
/* ARGSUSED */
void dbzl(long L) { }

/*ARGSUSED*/
int
main(int argc, char* argv[])
{
	double d;
	long L;
	int i;
	float f;

	i = 1 / 0;
	f = 1.0f / 0.0f;
	d = 1.0 / 0.0;
	L = 1L / 0L;

	dbzd(1.0 / 0.0);
	dbzf(1.0f / 0.0f);
	dbzi(1 / 0);
	dbzl(1L / 0L);

	i = 1 % 0;
	L = 1L % 0L;

	i++;
	f++;
	d++;
	L++;

	return 0;
}



@


1.2
log
@Add some tests with modulus operator too
@
text
@d1 1
a1 1
/*	$OpenBSD: test-15.c,v 1.1 2005/12/16 03:02:22 cloder Exp $	*/
@


1.1
log
@Add a regression test for lint catching division by zero.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d27 12
a38 9
	i = 0 / 0;
	f = 0.0f / 0.0f;
	d = 0.0 / 0.0;
	L = 0L / 0L;

	dbzd(0.0 / 0.0);
	dbzf(0.0f / 0.0f);
	dbzi(0 / 0);
	dbzl(0L / 0L);
@

