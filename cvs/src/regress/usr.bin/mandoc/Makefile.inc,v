head	1.24;
access;
symbols
	OPENBSD_6_2_BASE:1.24
	OPENBSD_6_1:1.22.0.4
	OPENBSD_6_1_BASE:1.22
	OPENBSD_6_0:1.20.0.8
	OPENBSD_6_0_BASE:1.20
	OPENBSD_5_9:1.20.0.2
	OPENBSD_5_9_BASE:1.20
	OPENBSD_5_8:1.20.0.6
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.20.0.4
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.12.0.4
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.10.0.4
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.7.0.8
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.6
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.4
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.4.0.4
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.2
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.1.0.2
	OPENBSD_4_7_BASE:1.1;
locks; strict;
comment	@# @;


1.24
date	2017.07.04.14.53.23;	author schwarze;	state Exp;
branches;
next	1.23;
commitid	b0KXfVBm69j6HJWE;

1.23
date	2017.05.30.19.29.31;	author schwarze;	state Exp;
branches;
next	1.22;
commitid	aKw7GZmlWwBhe2SM;

1.22
date	2017.03.08.22.53.35;	author schwarze;	state Exp;
branches;
next	1.21;
commitid	S0sHiOvvLc7ECRCI;

1.21
date	2017.03.05.19.57.35;	author schwarze;	state Exp;
branches;
next	1.20;
commitid	sq8H3jx8MULV7ZHu;

1.20
date	2015.02.03.19.37.25;	author schwarze;	state Exp;
branches;
next	1.19;
commitid	ilaeedLFSTwMFPNJ;

1.19
date	2014.12.30.08.52.55;	author schwarze;	state Exp;
branches;
next	1.18;
commitid	Yt62Q6ycacw9G6FH;

1.18
date	2014.11.07.00.40.27;	author schwarze;	state Exp;
branches;
next	1.17;
commitid	1t9HbFCLQvwDUAvI;

1.17
date	2014.10.30.17.45.58;	author schwarze;	state Exp;
branches;
next	1.16;
commitid	fyNAYKQkC9PADY26;

1.16
date	2014.10.27.18.09.36;	author schwarze;	state Exp;
branches;
next	1.15;
commitid	fUcCPqSe29LXItaw;

1.15
date	2014.10.27.15.05.45;	author schwarze;	state Exp;
branches;
next	1.14;
commitid	uH26xJIO0rvE0sXD;

1.14
date	2014.08.14.00.07.55;	author schwarze;	state Exp;
branches;
next	1.13;
commitid	qxvEsoevApwZPuwi;

1.13
date	2014.08.11.04.18.18;	author schwarze;	state Exp;
branches;
next	1.12;
commitid	OrK7ZCs0XQIBx79v;

1.12
date	2014.07.02.06.35.26;	author schwarze;	state Exp;
branches;
next	1.11;
commitid	VxiAs39EZkz90nnc;

1.11
date	2014.06.20.18.27.51;	author schwarze;	state Exp;
branches;
next	1.10;
commitid	mLT3bl90uvOuwvq2;

1.10
date	2013.12.24.15.58.07;	author schwarze;	state Exp;
branches;
next	1.9;

1.9
date	2013.11.10.17.43.11;	author schwarze;	state Exp;
branches;
next	1.8;

1.8
date	2013.11.10.14.58.44;	author schwarze;	state Exp;
branches;
next	1.7;

1.7
date	2011.11.17.16.28.45;	author schwarze;	state Exp;
branches;
next	1.6;

1.6
date	2011.07.24.20.26.52;	author schwarze;	state Exp;
branches;
next	1.5;

1.5
date	2011.05.31.08.00.25;	author schwarze;	state Exp;
branches;
next	1.4;

1.4
date	2010.06.27.19.56.11;	author phessler;	state Exp;
branches;
next	1.3;

1.3
date	2010.04.25.17.15.48;	author schwarze;	state Exp;
branches;
next	1.2;

1.2
date	2010.04.23.00.31.00;	author schwarze;	state Exp;
branches;
next	1.1;

1.1
date	2009.10.28.03.20.42;	author schwarze;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Messages of the -Wbase level now print STYLE:.  Since this
causes horrible churn anyway, profit of the opportunity to stop
excessive testing, such that this is hopefully the last instance
of such churn.  Consistently use OpenBSD RCS tags, blank .Os,
blank fourth .TH argument, and Mdocdate like everywhere else.
Use -Ios=OpenBSD for platform-independent predictable output.
@
text
@# $OpenBSD: Makefile.inc,v 1.23 2017/05/30 19:29:31 schwarze Exp $

.include "Makefile.sub"

# --- programs ---

DIFF = diff -au
MANDOC ?= mandoc

# --- lists of targets ---

SKIP_ASCII ?=
SKIP_TMAN ?=
SKIP_MARKDOWN ?=

_ASCIIFILES =
_ASCIIDIFFS =
_MANFILES =
_MANDIFFS =
.for t in ${REGRESS_TARGETS}
.  if empty(SKIP_ASCII:MALL) && empty(SKIP_ASCII:M${t})
_ASCIIFILES += ${t}.mandoc_ascii
_ASCIIDIFFS += ${t}.diff_ascii
.    if empty(SKIP_TMAN:MALL) && empty(SKIP_TMAN:M${t})
_MANFILES += ${t}.in_man ${t}.mandoc_man
_MANDIFFS += ${t}.diff_man
.    endif
.  endif
.  if empty(SKIP_MARKDOWN:MALL) && empty(SKIP_MARKDOWN:M${t})
_MARKDOWNFILES += ${t}.mandoc_markdown
_MARKDOWNDIFFS += ${t}.diff_markdown
.  endif
.endfor

_UTF8FILES = ${UTF8_TARGETS:C/$/.mandoc_utf8/}
_UTF8DIFFS = ${UTF8_TARGETS:C/$/.diff_utf8/}

_HTMLFILES = ${HTML_TARGETS:C/$/.mandoc_html/}
_HTMLDIFFS = ${HTML_TARGETS:C/$/.diff_html/}

_LINTFILES =
_LINTDIFFS =
.for t in ${LINT_TARGETS}
_LINTFILES += ${t}.mandoc_lint
_LINTDIFFS += ${t}.diff_lint
.endfor

_HTMLVALS = ${REGRESS_TARGETS:C/$/.validate_html/}

# --- convenience targets ---

# Note that bsd.regress.mk automatically adds REGRESS_TARGETS to all.
all: clean

ascii: ascii-clean ${_ASCIIDIFFS}

utf8: utf8-clean ${_UTF8DIFFS}

html: html-clean ${_HTMLDIFFS}

markdown: markdown-clean ${_MARKDOWNDIFFS}

tman: tman-clean ${_MANDIFFS}

lint: lint-clean ${_LINTDIFFS}

htmlval: ${_HTMLVALS}

# --- suffix rules ---

.SUFFIXES:	.diff_ascii .diff_html .diff_lint \
		.diff_man .diff_markdown .diff_utf8 \
		.in .in_man \
		.mandoc_ascii .mandoc_html .mandoc_lint \
		.mandoc_man .mandoc_markdown .mandoc_utf8 \
		.out_ascii .out_lint .out_utf8

.in.mandoc_ascii:
	@@${MANDOC} ${MOPTS} -Ios=OpenBSD -Tascii ${.IMPSRC} > ${.TARGET}

.mandoc_ascii.diff_ascii:
	@@${DIFF} ${.CURDIR}/${.IMPSRC:S/mandoc_ascii$/out_ascii/} ${.IMPSRC}

.in.mandoc_utf8:
	@@${MANDOC} ${MOPTS} -Ios=OpenBSD -Tutf8 ${.IMPSRC} > ${.TARGET}

.mandoc_utf8.diff_utf8:
	@@${DIFF} ${.CURDIR}/${.IMPSRC:S/mandoc_utf8$/out_utf8/} ${.IMPSRC}

.in.mandoc_html:
	@@${MANDOC} ${MOPTS} -Thtml ${.IMPSRC} | \
		sed -n '/^BEGINTEST/,/^ENDTEST/p' > ${.TARGET}

.mandoc_html.diff_html:
	@@${DIFF} ${.CURDIR}/${.IMPSRC:S/mandoc_html$/out_html/} ${.IMPSRC}

.in.mandoc_markdown:
	@@${MANDOC} ${MOPTS} -Ios=OpenBSD -Tmarkdown ${.IMPSRC} > ${.TARGET}

.mandoc_markdown.diff_markdown:
	@@${DIFF} ${.CURDIR}/${.IMPSRC:S/mandoc_markdown$/out_markdown/} \
		${.IMPSRC}

.in.in_man:
	@@${MANDOC} ${MOPTS} -Ios=OpenBSD -Tman ${.IMPSRC} > ${.TARGET}

.in_man.mandoc_man:
	@@${MANDOC} -man -Tascii -Omdoc ${.IMPSRC} > ${.TARGET}

.in.mandoc_lint:
	@@-${MANDOC} ${MOPTS} -Ios=OpenBSD -Tlint -Wall ${.IMPSRC} 2>&1 | \
		sed -E 's/^mandoc: \/[^:]+\//mandoc: /' > ${.TARGET}

.mandoc_lint.diff_lint:
	@@${DIFF} ${.CURDIR}/${.IMPSRC:S/mandoc_lint$/out_lint/} ${.IMPSRC}

# --- single-file targets ---

.for t in ${REGRESS_TARGETS}
.  if empty(SKIP_ASCII:MALL) && empty(SKIP_ASCII:M${t})
.    if empty(SKIP_TMAN:MALL) && empty(SKIP_TMAN:M${t})
${t}.diff_man: ${t}.mandoc_man
	@@${DIFF} ${.CURDIR}/${t}.out_ascii ${.ALLSRC}
.    else
${t}.diff_man:
.    endif
${t}: ${t}.diff_ascii ${t}.diff_man
.  else
${t}:
.  endif
${t}.validate_html: ${t}.in
	@@-${MANDOC} ${MOPTS} -Thtml ${.ALLSRC} | validate
.endfor

.for t in ${UTF8_TARGETS}
${t}: ${t}.diff_utf8
.endfor

.for t in ${HTML_TARGETS}
${t}: ${t}.diff_html
.endfor

.for t in ${REGRESS_TARGETS}
.  if empty(SKIP_MARKDOWN:MALL) && empty(SKIP_MARKDOWN:M${t})
${t}: ${t}.diff_markdown
.  endif
.endfor

.for t in ${LINT_TARGETS}
${t}: ${t}.diff_lint
.endfor

# --- phony targets ---

clean: ${_CLEAN_TARGETS}

ascii-clean:
.if !empty(_ASCIIFILES)
	@@rm -f ${_ASCIIFILES}
.endif

utf8-clean:
.if !empty(_UTF8FILES)
	@@rm -f ${_UTF8FILES}
.endif

html-clean:
.if !empty(_HTMLFILES)
	@@rm -f ${_HTMLFILES}
.endif

markdown-clean:
.if !empty(_MARKDOWNFILES)
	@@rm -f ${_MARKDOWNFILES}
.endif

tman-clean:
.if !empty(_MANFILES)
	@@rm -f ${_MANFILES}
.endif

lint-clean:
.if !empty(_LINTFILES)
	@@rm -f ${_LINTFILES}
.endif

.PHONY: ${_ASCIIDIFFS} ${_UTF8DIFFS} ${_HTMLDIFFS} ${_MARKDOWNDIFFS} \
	${_MANDIFFS} ${_LINTDIFFS} ${_HTMLVALS}


# ----------------------------------------------------------------------
# development targets, may affect version-controlled files
# ----------------------------------------------------------------------

# --- the groff program ---

NROFF	 = /usr/local/bin/nroff -c

.ifdef MOPTS
NOPTS	?= ${MOPTS}
.else
NOPTS	?= -mandoc -Wall
.endif

# --- the list of targets ---

SKIP_GROFF_ASCII += ${SKIP_GROFF}
SKIP_GROFF_UTF8  += ${SKIP_GROFF}

_OUTFILES =
_HTMLOUTFILES =
_MARKDOWNOUTFILES =
_LINTOUTFILES =
.for t in ${REGRESS_TARGETS}
.  if empty(SKIP_GROFF_ASCII:M${t}) && \
      empty(SKIP_ASCII:M${t}) && empty(SKIP_ASCII:MALL)
_OUTFILES += ${t}.out_ascii
.  endif
.endfor

.for t in ${UTF8_TARGETS}
.  if empty(SKIP_GROFF_UTF8:M${t})
_OUTFILES += ${t}.out_utf8
.  endif
.endfor

.for t in ${HTML_TARGETS}
_HTMLOUTFILES += ${t}.out_html
.endfor

.for t in ${REGRESS_TARGETS}
.  if empty(SKIP_MARKDOWN:MALL) && empty(SKIP_MARKDOWN:M${t})
_MARKDOWNOUTFILES += ${t}.out_markdown
.  endif
.endfor

.for t in ${LINT_TARGETS}
_LINTOUTFILES += ${t}.out_lint
.endfor

# --- the convenience targets ---

groff: obj-check ${_OUTFILES}

html-out: obj-check ${_HTMLOUTFILES}

markdown-out: obj-check ${_MARKDOWNOUTFILES}

lint-out: obj-check ${_LINTOUTFILES}

# --- single-file targets ---

.for t in ${REGRESS_TARGETS}
.  if empty(SKIP_ASCII:M${t}) && empty(SKIP_ASCII:MALL)
.    if empty(SKIP_GROFF_ASCII:M${t})
${t}.out_ascii: ${t}.in
	${NROFF} ${NOPTS} -Tascii ${.ALLSRC} > ${.TARGET}
.    else
.PHONY: ${t}.out_ascii
${t}.out_ascii:
	@@echo "TODO: groff disabled for: ${.TARGET}"
.    endif
.  endif
.endfor

.for t in ${UTF8_TARGETS}
.  if empty(SKIP_GROFF_UTF8:M${t})
${t}.out_utf8: ${t}.in
	${NROFF} ${NOPTS} -Tutf8 ${.ALLSRC} > ${.TARGET}
.  else
.PHONY: ${t}.out_utf8
${t}.out_utf8:
	@@echo "TODO: groff disabled for: ${.TARGET}"
.  endif
.endfor

.for t in ${HTML_TARGETS}
${t}.out_html: ${t}.in
	${MANDOC} ${MOPTS} -Thtml ${.ALLSRC} | \
		sed -n '/^BEGINTEST/,/^ENDTEST/p' > ${.TARGET}
.endfor

.for t in ${REGRESS_TARGETS}
.  if empty(SKIP_MARKDOWN:MALL) && empty(SKIP_MARKDOWN:M${t})
${t}.out_markdown: ${t}.in
	${MANDOC} ${MOPTS} -Ios=OpenBSD -Tmarkdown ${.ALLSRC} > ${.TARGET}
.  endif
.endfor

.for t in ${LINT_TARGETS}
${t}.out_lint: ${t}.in
	-${MANDOC} ${MOPTS} -Ios=OpenBSD -Tlint -Wall ${.ALLSRC} \
		> ${.TARGET} 2>&1
.endfor

# --- phony targets ---

groff-clean: obj-check
.if !empty(_OUTFILES)
	rm -f ${_OUTFILES}
.endif

html-out-clean: obj-check
.if !empty(_HTMLOUTFILES)
	rm -f ${_HTMLOUTFILES}
.endif

markdown-out-clean: obj-check
.if !empty(_MARKDOWNOUTFILES)
	rm -f ${_MARKDOWNOUTFILES}
.endif

lint-out-clean: obj-check
.if !empty(_LINTOUTFILES)
	rm -f ${_LINTOUTFILES}
.endif

obj-clean:
	rm -rf ${.CURDIR}/obj/*
	rm -f ${.CURDIR}/obj
	cd ${.CURDIR} && ${MAKE} clean

obj-check:
	@@test ! -e ${.CURDIR}/obj || \
		(echo '*** obj exists, run make obj-clean first'; false)
@


1.23
log
@STYLE message about useless macros we don't want (Bt Tn Ud);
not a WARNING because they don't endanger portability
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.inc,v 1.22 2017/03/08 22:53:35 schwarze Exp $
d79 1
a79 1
	@@${MANDOC} ${MOPTS} -Tascii ${.IMPSRC} > ${.TARGET}
d85 1
a85 1
	@@${MANDOC} ${MOPTS} -Tutf8 ${.IMPSRC} > ${.TARGET}
d98 1
a98 1
	@@${MANDOC} ${MOPTS} -Tmarkdown ${.IMPSRC} > ${.TARGET}
d105 1
a105 1
	@@${MANDOC} ${MOPTS} -Tman ${.IMPSRC} > ${.TARGET}
d111 1
a111 1
	@@-${MANDOC} ${MOPTS} -Tlint -Wall ${.IMPSRC} 2>&1 | \
d286 1
a286 1
	${MANDOC} ${MOPTS} -Tmarkdown ${.ALLSRC} > ${.TARGET}
d292 2
a293 1
	-${MANDOC} ${MOPTS} -Tlint -Wall ${.ALLSRC} > ${.TARGET} 2>&1
@


1.22
log
@Now that markdown output is tested for almost everything, test all
input files in -T markdown output mode by default and only mark
those files with SKIP_MARKDOWN that are not to be tested.
Much easier to read, and almost minus 40 lines of Makefile code.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.inc,v 1.21 2017/03/05 19:57:35 schwarze Exp $
d111 1
a111 1
	@@-${MANDOC} ${MOPTS} -Tlint ${.IMPSRC} 2>&1 | \
d292 1
a292 1
	-${MANDOC} ${MOPTS} -Tlint ${.ALLSRC} > ${.TARGET} 2>&1
@


1.21
log
@Infrastructure for -T markdown tests.

This is needed because -T marksdown is expected to receive less
maintenance than -T ascii, so we need automation to make sure
that regular parser maintenance doesn't break this output mode.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.inc,v 1.20 2015/02/03 19:37:25 schwarze Exp $
d14 1
d29 4
a40 3
_MARKDOWNFILES = ${MARKDOWN_TARGETS:C/$/.mandoc_markdown/}
_MARKDOWNDIFFS = ${MARKDOWN_TARGETS:C/$/.diff_markdown/}

d143 2
a144 1
.for t in ${MARKDOWN_TARGETS}
d146 1
d231 2
a232 1
.for t in ${MARKDOWN_TARGETS}
d234 1
d283 2
a284 1
.for t in ${MARKDOWN_TARGETS}
d287 1
@


1.20
log
@Make the mandoc test suite completely silent.
Not even i looked at the 966 mandoc command lines
and the 787 diff command lines it was spewing,
and it was almost unusable without REGRESS_FAIL_EARLY
because any errors got lost among all the noise.

If you want to debug the Makefiles, use "make -dl".
If you want to see the -Tman TODOs, use "grep -RF SKIP_TMAN".
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.inc,v 1.19 2014/12/30 08:52:55 schwarze Exp $
d36 3
d59 2
d69 2
a70 1
.SUFFIXES:	.diff_ascii .diff_html .diff_lint .diff_man .diff_utf8 \
d73 1
a73 1
		.mandoc_man .mandoc_utf8 \
d95 7
d141 4
d168 5
d183 2
a184 2
.PHONY: ${_ASCIIDIFFS} ${_UTF8DIFFS} ${_HTMLDIFFS} ${_MANDIFFS} \
	${_LINTDIFFS} ${_HTMLVALS}
d208 1
d227 4
d241 2
d277 5
d297 5
@


1.19
log
@let the "make groff" maintainer target show groff warnings
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.inc,v 1.18 2014/11/07 00:40:27 schwarze Exp $
a70 1
	@@echo "${MANDOC} ${MOPTS} -Tascii ${.IMPSRC:T} > ${.TARGET}"
a73 1
	@@echo "${DIFF} ${.IMPSRC:S/mandoc_ascii$/out_ascii/} ${.IMPSRC}"
a76 1
	@@echo "${MANDOC} ${MOPTS} -Tutf8 ${.IMPSRC:T} > ${.TARGET}"
a79 1
	@@echo "${DIFF} ${.IMPSRC:S/mandoc_utf8$/out_utf8/} ${.IMPSRC}"
a82 1
	@@echo "${MANDOC} ${MOPTS} -Thtml ${.IMPSRC:T} > ${.TARGET}"
a86 1
	@@echo "${DIFF} ${.IMPSRC:S/mandoc_html$/out_html/} ${.IMPSRC}"
a89 1
	@@echo "${MANDOC} ${MOPTS} -Tman ${.IMPSRC:T} > ${.TARGET}"
d93 1
a93 1
	${MANDOC} -man -Tascii -Omdoc ${.IMPSRC} > ${.TARGET}
a95 1
	@@echo "${MANDOC} ${MOPTS} -Tlint ${.IMPSRC:T} > ${.TARGET} 2>&1"
a99 1
	@@echo "${DIFF} ${.IMPSRC:S/mandoc_lint$/out_lint/} ${.IMPSRC}"
a107 1
	@@echo "${DIFF} ${t}.out_ascii ${.ALLSRC}"
a110 3
.      if empty(SKIP_TMAN:MSILENT)
	@@echo "TODO: -Tman disabled for: ${.TARGET}"
.      endif
a114 1
	@@echo "TODO: -Tascii disabled for: ${.TARGET}"
a116 1
	@@echo "${MANDOC} ${MOPTS} -Thtml ${t}.in | validate"
d138 1
a138 1
	rm -f ${_ASCIIFILES}
d143 1
a143 1
	rm -f ${_UTF8FILES}
d148 1
a148 1
	rm -f ${_HTMLFILES}
d153 1
a153 1
	rm -f ${_MANFILES}
d158 1
a158 1
	rm -f ${_LINTFILES}
@


1.18
log
@at the end of make obj-clean, run make clean in the right directory
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.inc,v 1.17 2014/10/30 17:45:58 schwarze Exp $
d191 1
a191 1
NOPTS	?= -mandoc
@


1.17
log
@for convenience, let obj-clean imply clean
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.inc,v 1.16 2014/10/27 18:09:36 schwarze Exp $
d288 1
a288 1
	${MAKE} clean
@


1.16
log
@allow to separately skip groff-mandoc comparisons in -Tascii and -Tutf8 mode
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.inc,v 1.15 2014/10/27 15:05:45 schwarze Exp $
d288 1
@


1.15
log
@Infrastructure for testing HTML output;
this is relevant because we use the HTML output module
for man.cgi(8), where broken output can cause security issues.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.inc,v 1.14 2014/08/14 00:07:55 schwarze Exp $
d196 2
a197 1
SKIP_GROFF ?=
d203 1
a203 1
.  if empty(SKIP_GROFF:M${t}) && \
d210 1
a210 1
.  if empty(SKIP_GROFF:M${t})
d235 1
a235 1
.    if empty(SKIP_GROFF:M${t})
d247 1
a247 1
.  if empty(SKIP_GROFF:M${t})
@


1.14
log
@Add a simple target to validate the syntax of -Thtml output.
Not hooked to the build yet because there are still too many bugs.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.inc,v 1.13 2014/08/11 04:18:18 schwarze Exp $
d33 3
d54 2
d60 1
a60 1
html: ${_HTMLVALS}
d64 4
a67 2
.SUFFIXES:	.diff_ascii .diff_lint .diff_man .diff_utf8 .in .in_man \
		.mandoc_ascii .mandoc_lint .mandoc_man .mandoc_utf8 \
d86 9
d139 4
d161 5
d176 2
a177 1
.PHONY: ${_ASCIIDIFFS} ${_HTMLVALS} ${_LINTDIFFS} ${_MANDIFFS} ${_UTF8DIFFS}
d199 1
d214 4
d226 2
d256 6
d272 5
@


1.13
log
@start catching up with recent code changes, but no new files yet
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.inc,v 1.12 2014/07/02 06:35:26 schwarze Exp $
d40 2
d55 2
d114 3
d151 1
a151 1
.PHONY: ${_ASCIIDIFFS} ${_LINTDIFFS} ${_MANDIFFS} ${_UTF8DIFFS}
@


1.12
log
@Do not tun the .PHONY parts of ${LINT_TARGETS} twice.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.inc,v 1.11 2014/06/20 18:27:51 schwarze Exp $
d60 2
a61 2
	@@echo "${MANDOC} -Tascii ${.IMPSRC:T} > ${.TARGET}"
	@@${MANDOC} -Tascii ${.IMPSRC} > ${.TARGET}
d68 2
a69 2
	@@echo "${MANDOC} -Tutf8 ${.IMPSRC:T} > ${.TARGET}"
	@@${MANDOC} -Tutf8 ${.IMPSRC} > ${.TARGET}
d76 2
a77 2
	@@echo "${MANDOC} -Tman ${.IMPSRC:T} > ${.TARGET}"
	@@${MANDOC} -Tman ${.IMPSRC} > ${.TARGET}
d80 1
a80 1
	${MANDOC} -Tascii -Omdoc ${.IMPSRC} > ${.TARGET}
d83 2
a84 2
	@@echo "${MANDOC} -Tlint ${.IMPSRC:T} > ${.TARGET} 2>&1"
	@@-${MANDOC} -Tlint ${.IMPSRC} 2>&1 | \
d153 7
a159 1
NROFF = /usr/local/bin/nroff -c -mandoc
d196 1
a196 1
	${NROFF} -Tascii ${.ALLSRC} > ${.TARGET}
d208 1
a208 1
	${NROFF} -Tutf8 ${.ALLSRC} > ${.TARGET}
d218 1
a218 1
	-${MANDOC} -Tlint ${.ALLSRC} > ${.TARGET} 2>&1
@


1.11
log
@Infrastructure for regression tests of mandoc messages.
Even though messages are not going to be as stable as formatted output,
that is, even though the *.out_lint files are expected to change now and then,
from now on, i want to be able to catch unintended changes in messages.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.inc,v 1.10 2013/12/24 15:58:07 schwarze Exp $
d43 1
a43 1
all: clean ${LINT_TARGETS}
@


1.10
log
@When i replaced the very ugly .in: suffix rule in my previous commit,
that inadvertently disabled the -Tman tests.  Oops.
Enable them again.
Fortunately, in the meantime, nothing slipped.
@
text
@d1 3
a3 1
# $OpenBSD: Makefile.inc,v 1.9 2013/11/10 17:43:11 schwarze Exp $
a9 1

d33 6
d43 1
a43 1
all: ascii-clean utf8-clean tman-clean
d51 1
d55 3
a57 3
.SUFFIXES:	.diff_ascii .diff_utf8 .diff_man .in .in_man \
		.mandoc_ascii .mandoc_utf8 .mandoc_man \
		.out_ascii .out_utf8
d82 8
a104 1

d110 1
a111 1
.endfor
d116 3
d122 1
a122 1
clean: ascii-clean utf8-clean tman-clean
d139 6
a144 2
.PHONY: ascii ascii-clean utf8 utf8-clean tman tman-clean \
	${_ASCIIDIFFS} ${_UTF8DIFFS} ${_MANDIFFS}
a154 1

d160 1
d167 1
d174 3
d178 1
a178 1
# --- the convenience target ---
d180 1
a180 3
groff: ${_OUTFILES}
	@@test ! -e ${.CURDIR}/obj || \
		(echo "*** obj exists, run make obj-clean"; exit 1)
d182 1
d198 1
d210 4
d217 2
a218 1
groff-clean: obj-clean
d220 6
d227 1
a227 1
obj-clean: clean
d231 3
a233 2
.PHONY: groff groff-clean obj-clean

@


1.9
log
@Framework extension to support -Tutf8 tests.

New per-directory variables UTF8_TARGETS and SKIP_ASCII,
intended as subsets of REGRESS_TARGETS.

New .PHONY targets "utf8" and "utf8-clean" to only do -Tutf8 tests;
of course, "all" and "clean" also include this functionality.

While here, prefix internal variables with an underscore.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.inc,v 1.8 2013/11/10 14:58:44 schwarze Exp $
d90 1
a90 1
${t}: ${t}.diff_ascii
@


1.8
log
@prettier whitespace in variable assignments
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.inc,v 1.7 2011/11/17 16:28:45 schwarze Exp $
d11 2
a12 2
ASCIIFILES = ${REGRESS_TARGETS:C/$/.mandoc_ascii/}
ASCIIDIFFS = ${REGRESS_TARGETS:C/$/.diff_ascii/}
d14 17
a30 3
MANFILES = ${REGRESS_TARGETS:C/$/.mandoc_man/} ${REGRESS_TARGETS:C/$/.in_man/}
MANDIFFS = ${REGRESS_TARGETS:C/$/.diff_man/}
SKIP_TMAN ?=
d35 2
a36 1
all: ascii-clean tman-clean
d38 1
a38 1
ascii: ascii-clean ${ASCIIDIFFS}
d40 3
a42 1
tman: tman-clean ${MANDIFFS}
d47 3
a49 5
.SUFFIXES:	.diff_ascii .diff_man .in .in_man \
		.mandoc_ascii .mandoc_man .out_ascii

.in: ${.PREFIX}.diff_ascii ${.PREFIX}.diff_man
	@@:
d52 2
a53 2
	@@echo "${MANDOC} ${.IMPSRC:T} > ${.TARGET}"
	@@${MANDOC} ${.IMPSRC} > ${.TARGET}
d59 8
d72 1
a72 1
	${MANDOC} -Omdoc ${.IMPSRC} > ${.TARGET}
d78 2
a79 1
.  if empty(SKIP_TMAN:MALL) && empty(SKIP_TMAN:M${t})
d83 1
a83 1
.  else
d85 1
a85 1
.    if empty(SKIP_TMAN:MSILENT)
d87 1
d89 5
d95 4
d104 1
a104 1
clean: ascii-clean tman-clean
d107 8
a114 1
	rm -f ${ASCIIFILES}
d117 3
a119 1
	rm -f ${MANFILES}
d121 2
a122 1
.PHONY: ascii ascii-clean tman tman-clean ${ASCIIDIFFS} ${MANDIFFS}
d131 1
a131 1
NROFF = /usr/local/bin/nroff -c -mandoc -Tascii
d138 1
a138 1
OUTFILES =
d140 6
d147 1
a147 1
OUTFILES += ${t}.out_ascii
d154 1
a154 1
groff: ${REGRESS_TARGETS:C/$/.out_ascii/}
d162 2
a163 1
.  if empty(SKIP_GROFF:M${t})
d165 2
a166 2
	${NROFF} ${.ALLSRC} > ${.TARGET}
.  else
d170 11
d188 1
a188 1
	rm -f ${OUTFILES}
@


1.7
log
@Complete overhaul of the mandoc(1) test suite.
* Test the recently introduced -Tman output mode, too.
* Specify date and OS arguments in all tests.
* Remove the kludge of sed(1)ing away the page footer lines.
* New make(1) variables SKIP_TMAN, SKIP_GROFF.
* Drop obsolete, clumsy make(1) variable GROFF_TARGETS.
* Delete obsolete mdoc/Bl/E*.sh error reporting tests.
* Silence char/N/basic.
* New targets:
- ascii, ascii-clean - to run -Tascii tests only
- tman, tman-clean - to run the new -Tman tests only
- obj-clean - maintainer only, needed before groff-clean and groff
- groff-clean - maintainer only, affects checked-in files
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.inc,v 1.6 2011/07/24 20:26:52 schwarze Exp $
d5 2
a6 2
DIFF=diff -au
MANDOC?=mandoc
d11 2
a12 2
ASCIIFILES=${REGRESS_TARGETS:C/$/.mandoc_ascii/}
ASCIIDIFFS=${REGRESS_TARGETS:C/$/.diff_ascii/}
d14 3
a16 3
MANFILES=${REGRESS_TARGETS:C/$/.mandoc_man/} ${REGRESS_TARGETS:C/$/.in_man/}
MANDIFFS=${REGRESS_TARGETS:C/$/.diff_man/}
SKIP_TMAN?=
d87 1
a87 1
NROFF=/usr/local/bin/nroff -c -mandoc -Tascii
d92 1
a92 1
SKIP_GROFF?=
d94 1
a94 1
OUTFILES=
d97 1
a97 1
OUTFILES+=${t}.out_ascii
@


1.6
log
@Theo reported that make cleandir deleted too much, triggering this cleanup:

Since quite some time, the groff output files are checked into CVS.
* thus, no longer provide a "groff-clean" target to delete them
* from official targets, no longer call the "groff" target generating them
* do not reimplement "clean" and "cleandir", simply use the official targets
@
text
@d1 3
a3 1
# $OpenBSD: Makefile.inc,v 1.5 2011/05/31 08:00:25 schwarze Exp $
d7 80
a86 1
#MANDOCOPTS=-Wall
a87 2
SED=sed
SH=/bin/sh
a88 1
CLEANFILES=*.mandoc_ascii
d90 32
a121 1
all: clean
d123 1
a123 1
groff: ${GROFF_TARGETS:C/$/.out_ascii/}
d125 2
a126 1
.SUFFIXES: .in .out_ascii .sh
d128 3
a130 5
.in:
	@@echo "  -> ${*}"
	@@${MANDOC} ${MANDOCOPTS} ${.CURDIR}/${*}.in | ${SED} '$$d' \
		> ${*}.mandoc_ascii
	@@${DIFF} ${.CURDIR}/${*}.out_ascii ${*}.mandoc_ascii
d132 1
a132 3
.in.out_ascii:
	@@echo "  -> ${*}"
	@@${NROFF} ${<} | ${SED} '$$d' > ${@@}
a133 4
.sh:
	@@echo "  -> ${*}"
	@@MANDOC="${MANDOC}" MANDOCOPTS="${MANDOCOPTS}" \
		${SH} ${.CURDIR}/${*}.sh 
@


1.5
log
@When running "make obj" before "make regress", the desired output
files *.out_ascii and the actual output files *.mandoc_ascii do not
live in the same directories, so explicitely tell diff(1) where to
find the former.  Problem reported by deraadt@@.
While here, purge an obsolete knob from the optional MANDOCOPTS variable
and update the path to the ports groff (only needed by mandoc developers
to generate desired output files).
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.inc,v 1.4 2010/06/27 19:56:11 phessler Exp $
d10 2
a31 10

clean:
	rm -f *.mandoc_ascii *.core

groff-clean:
.if defined(GROFF_TARGETS)
	rm -f ${GROFF_TARGETS:C/$/.out_ascii/}
.endif

cleandir: groff-clean clean
@


1.4
log
@add the groff target to the 'make depend' step, so we build dependencies.

while here, fix building the groff built pages

OK schwarze@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.inc,v 1.3 2010/04/25 17:15:48 schwarze Exp $
d5 2
a6 2
#MANDOCOPTS=-fstrict -Wall
NROFF=nroff -mandoc
d20 1
a20 1
	@@${DIFF} ${*}.out_ascii ${*}.mandoc_ascii
@


1.3
log
@Let the clean target remove cores,
and let the cleandir target call groff-clean as well.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.inc,v 1.2 2010/04/23 00:31:00 schwarze Exp $
d24 1
a24 1
	@@${NROFF} ${.CURDIR}/${<} | ${SED} '$$d' > ${@@}
@


1.2
log
@Do not run the tests with -fstrict -Wall by default.
I want to test some features that -fstrict does not allow.
And as long as i do not test for specific error messages,
having -Wall on by default just causes useless noise.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.inc,v 1.1 2009/10/28 03:20:42 schwarze Exp $
d32 1
a32 1
	rm -f *.mandoc_ascii
d38 2
@


1.1
log
@Add the first batch of mandoc(1) regression tests, testing for a few bugs
fixed in 1.9.9 and some older, rather subtle issues in list displays.

Directory layout and naming scheme was chosen such that later inclusion
of tests for -man and -Thtml will not force us to rename everything,
even though the layout might still seem a bit sparse right now.
More tests will slowly be added while investigating and fixing issues.
@
text
@d1 1
a1 1
# $OpenBSD$
d5 1
a5 1
MANDOCOPTS=-fstrict -Wall
@

