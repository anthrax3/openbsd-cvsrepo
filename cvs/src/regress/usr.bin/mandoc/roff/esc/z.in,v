head	1.3;
access;
symbols
	OPENBSD_6_1:1.2.0.10
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.6
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.4
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.1.0.14
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.12
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.10
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.6
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.4
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.2
	OPENBSD_5_2_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2017.07.04.14.53.27;	author schwarze;	state Exp;
branches;
next	1.2;
commitid	b0KXfVBm69j6HJWE;

1.2
date	2015.04.29.18.32.57;	author schwarze;	state Exp;
branches;
next	1.1;
commitid	Jraw3F5Czk5tAif5;

1.1
date	2012.05.28.13.00.51;	author schwarze;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Messages of the -Wbase level now print STYLE:.  Since this
causes horrible churn anyway, profit of the opportunity to stop
excessive testing, such that this is hopefully the last instance
of such churn.  Consistently use OpenBSD RCS tags, blank .Os,
blank fourth .TH argument, and Mdocdate like everywhere else.
Use -Ios=OpenBSD for platform-independent predictable output.
@
text
@.\" $OpenBSD$
.Dd $Mdocdate: July 4 2017 $
.Dt ESC-Z 1
.Os
.Sh NAME
.Nm esc-z
.Nd the roff escape z sequence
.Sh DESCRIPTION
single z with ASCII char: >\zx<
.br
single z with escape char: >\z\(ci<
.br
.ds mystr mytext
single z with defined string (\*[mystr]): >\z\*[mystr]<
.br
single z with font escape: >\z\fBxbold\fP<
.br
single z with nospace escape: >\z\c
new line<
.br
single z with overstrike: >\z\o'ab'c<
.br
single z near the end of the line: >\z<
.br
double z: >\z\zx<
@


1.2
log
@Replace the kludge for the \z escape sequence by an actual
implementation.  As a side effect, minus ten lines of code.

As another side effect, this also fixes the assertion failure that
used to be triggered by "\z\o'ab'c" at the beginning of an output
line, found by jsg@@ with afl (test case 022/Apr27).
@
text
@d1 2
a2 1
.Dd April 29, 2015
d4 1
a4 1
.Os OpenBSD
@


1.1
log
@Implement the roff \z escape sequence, intended to output the next
character without advancing the cursor position; implement it to
simply skip the next character, as it will usually be overwritten.

With this change, the pod2man(1) preamble user-defined string \*:,
intended to render as a diaeresis or umlaut diacritic above the
preceding character, is rendered in a slightly less ugly way,
though still not correctly.  It was rendered as "z.." and is now
rendered as ".".

Given that the definition of \*: uses elaborate manual \h positioning,
there is little chance for mandoc(1) to ever render it correctly,
but at least we can refrain from printing out a spurious "z", and
we can make the \z do something semi-reasonable for easier cases.
@
text
@d1 1
a1 1
.Dd May 28, 2012
d20 3
a22 1
single z with undefined escape: >\z\a<
@

