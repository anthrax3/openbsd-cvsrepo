head	1.6;
access;
symbols
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2;
locks; strict;
comment	@# @;


1.6
date	2017.07.04.14.53.27;	author schwarze;	state Exp;
branches;
next	1.5;
commitid	b0KXfVBm69j6HJWE;

1.5
date	2017.06.25.12.48.58;	author schwarze;	state Exp;
branches;
next	1.4;
commitid	sEarNP5yvw5NJVzM;

1.4
date	2017.06.17.22.46.26;	author schwarze;	state Exp;
branches;
next	1.3;
commitid	cZz8ExRoPNYxAmqE;

1.3
date	2017.06.11.19.48.28;	author schwarze;	state Exp;
branches;
next	1.2;
commitid	Ja7YNtdzMnyr3Ti7;

1.2
date	2017.03.08.13.17.28;	author schwarze;	state Exp;
branches;
next	1.1;
commitid	VW5BBU3pOCDWw0N2;

1.1
date	2017.03.07.20.00.02;	author schwarze;	state Exp;
branches;
next	;
commitid	nIuTuKCGxqHDocIn;


desc
@@


1.6
log
@Messages of the -Wbase level now print STYLE:.  Since this
causes horrible churn anyway, profit of the opportunity to stop
excessive testing, such that this is hopefully the last instance
of such churn.  Consistently use OpenBSD RCS tags, blank .Os,
blank fourth .TH argument, and Mdocdate like everywhere else.
Use -Ios=OpenBSD for platform-independent predictable output.
@
text
@mandoc: infinite.in:14:5: ERROR: input stack limit exceeded, infinite loop?
mandoc: infinite.in:20:5: ERROR: input stack limit exceeded, infinite loop?
@


1.5
log
@cope with changes in BASE messages
@
text
@d1 2
a2 5
mandoc: infinite.in:13:5: ERROR: input stack limit exceeded, infinite loop?
mandoc: infinite.in:19:5: ERROR: input stack limit exceeded, infinite loop?
mandoc: infinite.in:3:5: BASE: operating system explicitly specified: Os OpenBSD (OpenBSD)
mandoc: infinite.in:1:5: BASE: Mdocdate missing: Dd March (OpenBSD)
mandoc: infinite.in: BASE: RCS id missing: (OpenBSD)
@


1.4
log
@churn related to the new style message about RCS ids
@
text
@d3 3
a5 2
mandoc: infinite.in:1:5: STYLE: Mdocdate missing: Dd March
mandoc: infinite.in: STYLE: RCS id missing
@


1.3
log
@churn caused by the new Mdocdate messages, no easy way to avoid this :(
@
text
@d4 1
@


1.2
log
@prevent infinite recursion while expanding the arguments
of a user-defined macro; issue found by tb@@ with afl(1)
@
text
@d3 1
@


1.1
log
@If a user-defined macro is aborted because it exceeds the stack
limit, usually due to infinite recursion, discard whatever remains
in all those open stack levels.  Otherwise, insane constructions
like the following could generate macros of enormous size, causing
mandoc(1) to die from memory exhaustion:

.de m  \" original macro definition
.m     \" recursion to blow up the stack
.de m  \" definition to be run during the call of .m marked (*)
very long plain text (some kilobytes)
.m     \" expand the above a thousand times while unwinding the stack
..     \" end of the original definition
.m     \" (*) recursively generate a ridiculously large macro
..     \" end of recursively generated definition
.m     \" execute the giant macro, exhausting memory

Very creative abuse found by tb@@ with afl(1).
@
text
@d2 1
@

