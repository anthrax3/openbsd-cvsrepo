head	1.11;
access;
symbols
	OPENBSD_6_2:1.11.0.4
	OPENBSD_6_2_BASE:1.11
	OPENBSD_6_1:1.10.0.4
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.9.0.8
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.6
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.4
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.1.0.10
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.6
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.4
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.2
	OPENBSD_5_2_BASE:1.1;
locks; strict;
comment	@# @;


1.11
date	2017.07.04.14.53.27;	author schwarze;	state Exp;
branches;
next	1.10;
commitid	b0KXfVBm69j6HJWE;

1.10
date	2017.03.07.20.00.02;	author schwarze;	state Exp;
branches;
next	1.9;
commitid	nIuTuKCGxqHDocIn;

1.9
date	2015.02.03.19.37.25;	author schwarze;	state Exp;
branches;
next	1.8;
commitid	ilaeedLFSTwMFPNJ;

1.8
date	2015.01.07.12.19.17;	author schwarze;	state Exp;
branches;
next	1.7;
commitid	Uhmq3PK0fBjvMjMc;

1.7
date	2015.01.01.09.06.39;	author schwarze;	state Exp;
branches;
next	1.6;
commitid	dTA7EdzuaQgVRS9Z;

1.6
date	2014.12.30.10.28.56;	author schwarze;	state Exp;
branches;
next	1.5;
commitid	vjGwLOQiGRR7EyiE;

1.5
date	2014.07.07.11.34.41;	author schwarze;	state Exp;
branches;
next	1.4;
commitid	SxiKID1BRkm7SsXU;

1.4
date	2014.07.03.21.23.08;	author schwarze;	state Exp;
branches;
next	1.3;
commitid	fILxF31MgcuaKrF8;

1.3
date	2014.06.29.23.23.16;	author schwarze;	state Exp;
branches;
next	1.2;
commitid	reFB2LXVMqk7piJJ;

1.2
date	2014.03.30.19.43.19;	author schwarze;	state Exp;
branches;
next	1.1;

1.1
date	2012.06.02.23.18.31;	author schwarze;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Messages of the -Wbase level now print STYLE:.  Since this
causes horrible churn anyway, profit of the opportunity to stop
excessive testing, such that this is hopefully the last instance
of such churn.  Consistently use OpenBSD RCS tags, blank .Os,
blank fourth .TH argument, and Mdocdate like everywhere else.
Use -Ios=OpenBSD for platform-independent predictable output.
@
text
@# $OpenBSD: Makefile,v 1.10 2017/03/07 20:00:02 schwarze Exp $

REGRESS_TARGETS	 = append cond escname factorial indir infinite startde TH Dd
LINT_TARGETS	 = escname indir infinite

# groff-1.22.3 defect:
# infinite recursion aborts output completely

SKIP_GROFF	 = infinite

.include <bsd.regress.mk>


# --- additions to public targets ---

all ascii: ascii-diff-opt

ascii-clean: ascii-clean-opt

groff: TH.out_ascii_opt Dd.out_ascii_opt

groff-clean: groff-clean-opt


# --- local rules ---

ascii-diff-opt: TH.mandoc_ascii_opt Dd.mandoc_ascii_opt
	@@${DIFF} ${.CURDIR}/TH.out_ascii_opt TH.mandoc_ascii_opt
	@@${DIFF} ${.CURDIR}/Dd.out_ascii_opt Dd.mandoc_ascii_opt

TH.mandoc_ascii_opt: TH.in
	@@${MANDOC} -Ios=OpenBSD -Tascii -man ${.ALLSRC} > ${.TARGET}

Dd.mandoc_ascii_opt: Dd.in
	@@${MANDOC} -Ios=OpenBSD -Tascii -mdoc ${.ALLSRC} > ${.TARGET}

ascii-clean-opt:
	@@rm -f TH.mandoc_ascii_opt Dd.mandoc_ascii_opt

TH.out_ascii_opt: TH.in
	/usr/local/bin/nroff -c -man -Tascii ${.ALLSRC} > ${.TARGET}

Dd.out_ascii_opt: Dd.in
	/usr/local/bin/nroff -c -mdoc -Tascii ${.ALLSRC} > ${.TARGET}

groff-clean-opt:
	rm -f TH.out_ascii_opt Dd.out_ascii_opt
@


1.10
log
@If a user-defined macro is aborted because it exceeds the stack
limit, usually due to infinite recursion, discard whatever remains
in all those open stack levels.  Otherwise, insane constructions
like the following could generate macros of enormous size, causing
mandoc(1) to die from memory exhaustion:

.de m  \" original macro definition
.m     \" recursion to blow up the stack
.de m  \" definition to be run during the call of .m marked (*)
very long plain text (some kilobytes)
.m     \" expand the above a thousand times while unwinding the stack
..     \" end of the original definition
.m     \" (*) recursively generate a ridiculously large macro
..     \" end of recursively generated definition
.m     \" execute the giant macro, exhausting memory

Very creative abuse found by tb@@ with afl(1).
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.9 2015/02/03 19:37:25 schwarze Exp $
d32 1
a32 1
	@@${MANDOC} -Tascii -man ${.ALLSRC} > ${.TARGET}
d35 1
a35 1
	@@${MANDOC} -Tascii -mdoc ${.ALLSRC} > ${.TARGET}
@


1.9
log
@Make the mandoc test suite completely silent.
Not even i looked at the 966 mandoc command lines
and the 787 diff command lines it was spewing,
and it was almost unusable without REGRESS_FAIL_EARLY
because any errors got lost among all the noise.

If you want to debug the Makefiles, use "make -dl".
If you want to see the -Tman TODOs, use "grep -RF SKIP_TMAN".
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.8 2015/01/07 12:19:17 schwarze Exp $
d3 7
a9 2
REGRESS_TARGETS = append cond escname factorial indir startde TH Dd
LINT_TARGETS	= escname indir
@


1.8
log
@Bugfix: When the invocation of a user-defined macro follows a roff
conditional request on the same input line, don't skip the first few
bytes of its content.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.7 2015/01/01 09:06:39 schwarze Exp $
d23 2
a24 2
	${DIFF} ${.CURDIR}/TH.out_ascii_opt TH.mandoc_ascii_opt
	${DIFF} ${.CURDIR}/Dd.out_ascii_opt Dd.mandoc_ascii_opt
d27 1
a27 1
	${MANDOC} -Tascii -man ${.ALLSRC} > ${.TARGET}
d30 1
a30 1
	${MANDOC} -Tascii -mdoc ${.ALLSRC} > ${.TARGET}
d33 1
a33 1
	rm -f TH.mandoc_ascii_opt Dd.mandoc_ascii_opt
@


1.7
log
@The roff(7) language is Turing-complete, even the part implemented
in mandoc(1).  So practice some recursive programming to make sure
it doesn't get broken.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.6 2014/12/30 10:28:56 schwarze Exp $
d3 1
a3 1
REGRESS_TARGETS = append escname factorial indir startde TH Dd
@


1.6
log
@Test the weird construct of a user-defined macro starting (but not
ending!) the definition of another user defined macro.
Mandoc already handles this correctly, make sure it won't get broken.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.5 2014/07/07 11:34:41 schwarze Exp $
d3 1
a3 1
REGRESS_TARGETS = append escname indir startde TH Dd
@


1.5
log
@implement .dei and .ami
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.4 2014/07/03 21:23:08 schwarze Exp $
d3 1
a3 1
REGRESS_TARGETS = append escname indir TH Dd
@


1.4
log
@MANDOCERR_NOARGS reported three completely unrelated classes of problems.
Split the roff(7) parts out of it and report the request names for these cases.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.3 2014/06/29 23:23:16 schwarze Exp $
d3 2
a4 2
REGRESS_TARGETS = escname TH Dd
LINT_TARGETS	= escname
@


1.3
log
@Use the freshly improved roff_getname() function
for the main roff request parsing routine, roff_parse().

In request or macro invocations, escape sequences now terminate the
request or macro name; what follows is treated as arguments.  Besides,
the names of user-defined macros can now contain backslashes (eek!).
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.2 2014/03/30 19:43:19 schwarze Exp $
d4 1
@


1.2
log
@make -Tascii explicit, to be safe when -Tlocale becomes the default
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.1 2012/06/02 23:18:31 schwarze Exp $
d3 1
a3 1
REGRESS_TARGETS=TH Dd
@


1.1
log
@In groff, trying to redefine standard man(7) macros before .TH has no effect;
after .TH, it works.  Trying to redefine standard mdoc(7) macros before .Dd
works when calling groff with the -mdoc command line option, but does not
when calling groff with -mandoc; after .Dd, it always works.

Arguably, one might call that buggy behaviour in groff, but it is very
unlikely that anybody will change groff in this respect (certainly, i'm
not volunteering).  So let's be bug-compatible.

This fixes the vertical spacing in sox(1).
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.2 2011/11/17 16:28:46 schwarze Exp $
d26 1
a26 1
	${MANDOC} -man ${.ALLSRC} > ${.TARGET}
d29 1
a29 1
	${MANDOC} -mdoc ${.ALLSRC} > ${.TARGET}
@

