head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.14
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.12
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.8
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.2.0.4
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.1.0.4
	OPENBSD_5_5_BASE:1.1;
locks; strict;
comment	@# @;


1.5
date	2015.02.17.17.16.12;	author schwarze;	state Exp;
branches;
next	1.4;
commitid	OFJD5u0rlv8RzJvR;

1.4
date	2014.12.16.01.21.37;	author schwarze;	state Exp;
branches;
next	1.3;
commitid	tQ5akar4jZojCYGJ;

1.3
date	2014.08.26.11.32.56;	author schwarze;	state Exp;
branches;
next	1.2;
commitid	QJnN8iCFzEXgbRZx;

1.2
date	2014.04.07.15.05.12;	author schwarze;	state Exp;
branches;
next	1.1;

1.1
date	2013.10.04.02.19.47;	author schwarze;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Let .it accept numerical expressions, not just numerical constants.
For .it, ignore scaling units in roff_getnum().
Inside parentheses, skip whitespace after a sign in roff_getnum().
Parse and ignore unary plus in roff_getnum().
As a bonus, get rid of the only call to mandoc_strntoi() in roff.c.
@
text
@COND-NUMERIC(1)             General Commands Manual            COND-NUMERIC(1)



NNAAMMEE
       cond-numeric - roff conditions involving numbers

DDEESSCCRRIIPPTTIIOONN
       positive number: plain (t) negated (f)

       negative number: plain (f) negated (t)

       second number missing: ok

       operator "<": smaller (t) equal (f) greater (f)

       operator "<=": smaller (t) equal (t) greater (f)

       operator "=": smaller (f) equal (t) greater (f)

       operator "==": smaller (f) equal (t) greater (f)

       operator ">=": smaller (f) equal (t) greater (t)

       operator ">": smaller (f) equal (f) greater (t)

       with negative numbers: mm (t) mp (t) pm (t)

       operator "&": 00 (f) 01 (f) 10 (f) 11 (t)

       operator ":": 00 (f) 01 (t) 10 (t) 11 (t)

       with scaling units: 1i>2c (t) 1i-6P (f)

       unmatched parenthesis: (f) one (t)

       negated unmatched parenthesis: (f) zero (t)



OpenBSD                        December 16, 2014               COND-NUMERIC(1)
@


1.4
log
@When a numerical condition errors out after consuming at least one
character of input, treat it as false, do not retry it as a string
comparison condition.  This also fixes a read buffer overrun that
happened when the numerical condition advanced to the end of the
input line before erroring out, found by jsg@@ with afl.
@
text
@d33 2
@


1.3
log
@inevitable churn caused by the section title change
@
text
@d33 1
d35 1
d37 3
a39 1
OpenBSD                          April 7, 2014                 COND-NUMERIC(1)
@


1.2
log
@Almost complete implementation of roff(7) numerical expressions.
Support all binary operators except ';' (scale conversion).
Fully support chained operations and nested parentheses.
Use this for the .nr, .if, and .ie requests.
While here, fix parsing of integer numbers in roff_getnum().
@
text
@d1 1
a1 1
COND-NUMERIC(1)            OpenBSD Reference Manual            COND-NUMERIC(1)
@


1.1
log
@Test numerical conditions; related to roff.c rev. 1.56.
@
text
@d29 1
d31 1
d33 3
a35 1
OpenBSD                         October 3, 2013                COND-NUMERIC(1)
@

