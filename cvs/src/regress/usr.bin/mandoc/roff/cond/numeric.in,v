head	1.5;
access;
symbols
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.4.0.12
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.8
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.2.0.4
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.1.0.4
	OPENBSD_5_5_BASE:1.1;
locks; strict;
comment	@# @;


1.5
date	2017.07.04.14.53.26;	author schwarze;	state Exp;
branches;
next	1.4;
commitid	b0KXfVBm69j6HJWE;

1.4
date	2015.02.17.17.16.12;	author schwarze;	state Exp;
branches;
next	1.3;
commitid	OFJD5u0rlv8RzJvR;

1.3
date	2014.12.16.01.21.37;	author schwarze;	state Exp;
branches;
next	1.2;
commitid	tQ5akar4jZojCYGJ;

1.2
date	2014.04.07.15.05.12;	author schwarze;	state Exp;
branches;
next	1.1;

1.1
date	2013.10.04.02.19.47;	author schwarze;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Messages of the -Wbase level now print STYLE:.  Since this
causes horrible churn anyway, profit of the opportunity to stop
excessive testing, such that this is hopefully the last instance
of such churn.  Consistently use OpenBSD RCS tags, blank .Os,
blank fourth .TH argument, and Mdocdate like everywhere else.
Use -Ios=OpenBSD for platform-independent predictable output.
@
text
@.\" $OpenBSD$
.TH COND-NUMERIC 1 "December 16, 2014"
.SH NAME
cond-numeric \- roff conditions involving numbers
.SH DESCRIPTION
positive number:
plain
.ie 42 (t)
.el (f)
negated
.ie !42 (t)
.el (f)
.PP
negative number:
plain
.ie -42 (t)
.el (f)
negated
.ie !-42 (t)
.el (f)
.PP
second number missing:
.ie 42=bad worse
.el ok
.PP
operator "<":
smaller
.ie 1<2 (t)
.el (f)
equal
.ie 1<1 (t)
.el (f)
greater
.ie 2<1 (t)
.el (f)
.PP
operator "<=":
smaller
.ie 1<=2 (t)
.el (f)
equal
.ie 1<=1 (t)
.el (f)
greater
.ie 2<=1 (t)
.el (f)
.PP
operator "=":
smaller
.ie 1=2 (t)
.el (f)
equal
.ie 1=1 (t)
.el (f)
greater
.ie 2=1 (t)
.el (f)
.PP
operator "==":
smaller
.ie 1==2 (t)
.el (f)
equal
.ie 1==1 (t)
.el (f)
greater
.ie 2==1 (t)
.el (f)
.PP
operator ">=":
smaller
.ie 1>=2 (t)
.el (f)
equal
.ie 1>=1 (t)
.el (f)
greater
.ie 2>=1 (t)
.el (f)
.PP
operator ">":
smaller
.ie 1>2 (t)
.el (f)
equal
.ie 1>1 (t)
.el (f)
greater
.ie 2>1 (t)
.el (f)
.PP
with negative numbers:
mm
.ie -2<-1 (t)
.el (f)
mp
.ie -2<1 (t)
.el (f)
pm
.ie 1>-2 (t)
.el (f)
.PP
operator "&":
00
.ie 0&0 (t)
.el (f)
01
.ie 0&1 (t)
.el (f)
10
.ie 1&0 (t)
.el (f)
11
.ie 1&1 (t)
.el (f)
.PP
operator ":":
00
.ie 0:0 (t)
.el (f)
01
.ie 0:1 (t)
.el (f)
10
.ie 1:0 (t)
.el (f)
11
.ie 1:1 (t)
.el (f)
.PP
with scaling units:
1i>2c
.ie 1i>2c (t)
.el (f)
1i-6P
.ie 1i-6P (t)
.el (f)
.PP
unmatched parenthesis:
.ie (
(t)
.el (f)
one
.ie (1 (t)
.el (f)
.PP
negated unmatched parenthesis:
.ie !(
(t)
.el (f)
zero
.ie !(0 (t)
.el (f)
@


1.4
log
@Let .it accept numerical expressions, not just numerical constants.
For .it, ignore scaling units in roff_getnum().
Inside parentheses, skip whitespace after a sign in roff_getnum().
Parse and ignore unary plus in roff_getnum().
As a bonus, get rid of the only call to mandoc_strntoi() in roff.c.
@
text
@d1 2
a2 1
.TH COND-NUMERIC 1 "December 16, 2014" OpenBSD
@


1.3
log
@When a numerical condition errors out after consuming at least one
character of input, treat it as false, do not retry it as a string
comparison condition.  This also fixes a read buffer overrun that
happened when the numerical condition advanced to the end of the
input line before erroring out, found by jsg@@ with afl.
@
text
@d130 8
@


1.2
log
@Almost complete implementation of roff(7) numerical expressions.
Support all binary operators except ';' (scale conversion).
Fully support chained operations and nested parentheses.
Use this for the .nr, .if, and .ie requests.
While here, fix parsing of integer numbers in roff_getnum().
@
text
@d1 1
a1 1
.TH COND-NUMERIC 1 "April 7, 2014" OpenBSD
d128 16
@


1.1
log
@Test numerical conditions; related to roff.c rev. 1.56.
@
text
@d1 1
a1 1
.TH COND-NUMERIC 1 "October 3, 2013" OpenBSD
d100 28
@

