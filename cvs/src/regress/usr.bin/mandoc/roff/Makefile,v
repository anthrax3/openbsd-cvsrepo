head	1.22;
access;
symbols
	OPENBSD_6_1:1.20.0.12
	OPENBSD_6_1_BASE:1.20
	OPENBSD_6_0:1.20.0.8
	OPENBSD_6_0_BASE:1.20
	OPENBSD_5_9:1.20.0.2
	OPENBSD_5_9_BASE:1.20
	OPENBSD_5_8:1.20.0.6
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.20.0.4
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.18.0.4
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.14.0.4
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.13.0.2
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.12.0.4
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.2
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.2
	OPENBSD_5_0:1.7.0.2
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.6.0.2
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.1.0.2
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@# @;


1.22
date	2017.05.08.15.33.43;	author schwarze;	state Exp;
branches;
next	1.21;
commitid	wam7mxa5wtd9m7Af;

1.21
date	2017.05.07.17.30.58;	author schwarze;	state Exp;
branches;
next	1.20;
commitid	pfMPALNhm77dpGFF;

1.20
date	2015.02.06.16.05.51;	author schwarze;	state Exp;
branches;
next	1.19;
commitid	Bj9alpGWXCQILmH9;

1.19
date	2014.08.14.02.00.53;	author schwarze;	state Exp;
branches;
next	1.18;
commitid	pqgg86JpQ4OXDxJ3;

1.18
date	2014.07.07.11.34.41;	author schwarze;	state Exp;
branches;
next	1.17;
commitid	SxiKID1BRkm7SsXU;

1.17
date	2014.07.05.12.33.54;	author schwarze;	state Exp;
branches;
next	1.16;
commitid	IbTbYyU1XoSImvHA;

1.16
date	2014.06.20.18.27.51;	author schwarze;	state Exp;
branches;
next	1.15;
commitid	mLT3bl90uvOuwvq2;

1.15
date	2014.03.30.19.47.32;	author schwarze;	state Exp;
branches;
next	1.14;

1.14
date	2013.10.03.22.04.07;	author schwarze;	state Exp;
branches;
next	1.13;

1.13
date	2013.07.13.12.51.38;	author schwarze;	state Exp;
branches;
next	1.12;

1.12
date	2012.07.18.16.55.54;	author schwarze;	state Exp;
branches;
next	1.11;

1.11
date	2012.07.07.18.27.36;	author schwarze;	state Exp;
branches;
next	1.10;

1.10
date	2012.06.02.23.18.31;	author schwarze;	state Exp;
branches;
next	1.9;

1.9
date	2012.05.28.13.00.51;	author schwarze;	state Exp;
branches;
next	1.8;

1.8
date	2011.11.17.16.28.46;	author schwarze;	state Exp;
branches;
next	1.7;

1.7
date	2011.07.24.20.26.52;	author schwarze;	state Exp;
branches;
next	1.6;

1.6
date	2011.02.05.18.19.12;	author schwarze;	state Exp;
branches;
next	1.5;

1.5
date	2011.01.17.00.15.19;	author schwarze;	state Exp;
branches;
next	1.4;

1.4
date	2011.01.12.20.56.40;	author schwarze;	state Exp;
branches;
next	1.3;

1.3
date	2011.01.03.22.27.21;	author schwarze;	state Exp;
branches;
next	1.2;

1.2
date	2010.12.09.20.56.30;	author schwarze;	state Exp;
branches;
next	1.1;

1.1
date	2010.04.25.17.35.31;	author schwarze;	state Exp;
branches;
next	;


desc
@@


1.22
log
@Basic implementation of the roff(7) .ti (temporary indent) request.
Needed by about four dozen ports (thanks to naddy@@ for the research).
@
text
@# $OpenBSD: Makefile,v 1.21 2017/05/07 17:30:58 schwarze Exp $

SUBDIR  = args cond esc scale string
SUBDIR += br cc de ds ft ig it ll na nr ps rm sp ta ti tr

.include "../Makefile.sub"
.include <bsd.subdir.mk>
@


1.21
log
@Basic implementation of the roff(7) .ta (define tab stops) request.
This is the first feature made possible by the parser reorganization.
Improves the formatting of the SYNOPSIS in many Xenocara GL manuals.
Also important for ports, as reported by many, including naddy@@.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.20 2015/02/06 16:05:51 schwarze Exp $
d4 1
a4 1
SUBDIR += br cc de ds ft ig it ll na nr ps rm sp ta tr
@


1.20
log
@replace the last legacy generic message type, "argument count wrong",
by more specific messages, improving diagnostics for .cc .tr .Bl -column
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.19 2014/08/14 02:00:53 schwarze Exp $
d4 1
a4 1
SUBDIR += br cc de ds ft ig it ll na nr ps rm sp tr
@


1.19
log
@new regression tests collected during recent work
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.18 2014/07/07 11:34:41 schwarze Exp $
d4 1
a4 1
SUBDIR += br cc de ds ft ig it ll na nr ps rm sp
@


1.18
log
@implement .dei and .ami
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.17 2014/07/05 12:33:54 schwarze Exp $
d3 1
a3 1
SUBDIR  = args cond esc string
@


1.17
log
@Cleanup with respect to bad macro arguments.
* Fix .Sm with invalid arg: move arg out and toggle mode.
* Promote "unknown standard" from WARNING to ERROR, it loses information.
* Delete MANDOCERR_BADWIDTH, it would only indicate a mandoc(1) bug.
* Do not report MANDOCERR_BL_LATETYPE when there is no type at all.
* Mention macro names, arguments and fallbacks.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.16 2014/06/20 18:27:51 schwarze Exp $
d4 1
a4 1
SUBDIR += br cc de ds ft it ll na nr ps rm sp
@


1.16
log
@Infrastructure for regression tests of mandoc messages.
Even though messages are not going to be as stable as formatted output,
that is, even though the *.out_lint files are expected to change now and then,
from now on, i want to be able to catch unintended changes in messages.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.15 2014/03/30 19:47:32 schwarze Exp $
d4 1
a4 1
SUBDIR += br cc de ds it ll na nr ps rm sp
@


1.15
log
@Implement the roff(7) .ll (line length) request.
Found by naddy@@ in the textproc/enchant(1) port.
Of course, do not use this in new manuals.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.14 2013/10/03 22:04:07 schwarze Exp $
d6 1
a6 2
ascii groff groff-clean obj-clean tman: _SUBDIRUSE

@


1.14
log
@Expand references to number registers in exactly the same way as
references to user-defined strings.  While here, make number registers
signed int, like in groff.

Inspired by NetBSD roff.c rev. 1.8 and read.c rev. 1.7
written by Christos Zoulas on March 21, 2013, but implemented
in a completely different way, without hacking into read.c,
where this functionality really doesn't belong.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.13 2013/07/13 12:51:38 schwarze Exp $
d4 1
a4 1
SUBDIR += br cc de ds it na nr ps rm sp
@


1.13
log
@Rudimentary implementation of the .it request (input line trap).
As with any low-level roff request involving subtle interactions
with macro internals, this implementation is not exact, but it
does handle the simplest cases.

This request occurs in man(7) code generated from DocBook,
for example mysql(1) and yasm_arch(7).
Thanks to brad@@ for reporting the issue back in January 2011.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.12 2012/07/18 16:55:54 schwarze Exp $
d4 1
a4 1
SUBDIR += br cc de ds it na ps rm sp
@


1.12
log
@enable more tests, some were forgotten along the way
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.11 2012/07/07 18:27:36 schwarze Exp $
d4 1
a4 1
SUBDIR += br cc de ds na ps rm sp
@


1.11
log
@Support the .cc request; code by kristaps@@, tests by me.
Needed for sqlite3(1) as reported by espie@@.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.10 2012/06/02 23:18:31 schwarze Exp $
d3 2
a4 1
SUBDIR+= args esc cond string br cc de na ps rm sp
@


1.10
log
@In groff, trying to redefine standard man(7) macros before .TH has no effect;
after .TH, it works.  Trying to redefine standard mdoc(7) macros before .Dd
works when calling groff with the -mdoc command line option, but does not
when calling groff with -mandoc; after .Dd, it always works.

Arguably, one might call that buggy behaviour in groff, but it is very
unlikely that anybody will change groff in this respect (certainly, i'm
not volunteering).  So let's be bug-compatible.

This fixes the vertical spacing in sox(1).
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.9 2012/05/28 13:00:51 schwarze Exp $
d3 1
a3 1
SUBDIR+= args esc cond string br de na ps rm sp
@


1.9
log
@Implement the roff \z escape sequence, intended to output the next
character without advancing the cursor position; implement it to
simply skip the next character, as it will usually be overwritten.

With this change, the pod2man(1) preamble user-defined string \*:,
intended to render as a diaeresis or umlaut diacritic above the
preceding character, is rendered in a slightly less ugly way,
though still not correctly.  It was rendered as "z.." and is now
rendered as ".".

Given that the definition of \*: uses elaborate manual \h positioning,
there is little chance for mandoc(1) to ever render it correctly,
but at least we can refrain from printing out a spurious "z", and
we can make the \z do something semi-reasonable for easier cases.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.8 2011/11/17 16:28:46 schwarze Exp $
d3 1
a3 1
SUBDIR+= args esc cond string br na ps rm sp
@


1.8
log
@Complete overhaul of the mandoc(1) test suite.
* Test the recently introduced -Tman output mode, too.
* Specify date and OS arguments in all tests.
* Remove the kludge of sed(1)ing away the page footer lines.
* New make(1) variables SKIP_TMAN, SKIP_GROFF.
* Drop obsolete, clumsy make(1) variable GROFF_TARGETS.
* Delete obsolete mdoc/Bl/E*.sh error reporting tests.
* Silence char/N/basic.
* New targets:
- ascii, ascii-clean - to run -Tascii tests only
- tman, tman-clean - to run the new -Tman tests only
- obj-clean - maintainer only, needed before groff-clean and groff
- groff-clean - maintainer only, affects checked-in files
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.7 2011/07/24 20:26:52 schwarze Exp $
d3 1
a3 1
SUBDIR+= args cond string br na ps rm sp
@


1.7
log
@Theo reported that make cleandir deleted too much, triggering this cleanup:

Since quite some time, the groff output files are checked into CVS.
* thus, no longer provide a "groff-clean" target to delete them
* from official targets, no longer call the "groff" target generating them
* do not reimplement "clean" and "cleandir", simply use the official targets
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.6 2011/02/05 18:19:12 schwarze Exp $
d5 1
a5 1
groff: _SUBDIRUSE
@


1.6
log
@some more tests found in my tree
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.5 2011/01/17 00:15:19 schwarze Exp $
d5 1
a5 1
groff groff-clean: _SUBDIRUSE
@


1.5
log
@Refrain from throwing fatal errors for
* .br .sp .nf .fi .na with arguments - just skip the arguments
* .TH lacking arguments - use empty strings instead like groff
* .TH with excessive arguments - skip those
Reminded by Joerg Sonnenberger, ok kristaps@@.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.4 2011/01/12 20:56:40 schwarze Exp $
d3 1
a3 1
SUBDIR+= args cond string br na rm sp
@


1.4
log
@Implement the roff .rm request (remove macro).
Using the new roff_getname() function, this is really simple.
Breaks mandoc of the habit of reporting an error in each pod2man(1) preamble.
Reminded by a report from brad@@.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.3 2011/01/03 22:27:21 schwarze Exp $
d3 1
a3 1
SUBDIR+= args cond string rm
@


1.3
log
@Unify roff macro argument parsing (in roff.c, roff_userdef()) and man macro
argument parsing (in man_argv.c, man_args()), both having different bugs,
to use one common macro argument parser (in mandoc.c, mandoc_getarg()),
because from the point of view of roff, man macros are just roff macros,
hence their arguments are parsed in exactly the same way.

While doing so, fix these bugs:
 * Escaped blanks (i.e. those preceded by an odd number of backslashes)
   were mishandled as argument separators in unquoted arguments to
   user-defined roff macros.
 * Unescaped blanks preceded by an even number of backslashes were not
   recognized as argument separators in unquoted arguments to man macros.
 * Escaped backslashes (i.e. pairs of backslashes) were not reduced
   to single backslashes both in unquoted and quoted arguments both
   to user-defined roff macros and to man macros.
 * Escaped quotes (i.e. pairs of quotes inside quoted arguments) were
   not reduced to single quotes in man macros.

OK kristaps@@

Note that mdoc macro argument parsing is yet another beast for no good
reason and is probably afflicted by similar bugs.  But i don't attempt
to fix that right now because it is intricately entangled with lots of
unrelated high-level mdoc(7) functionality, like delimiter handling and
column list phrase handling.  Disentagling that would waste too much
time now.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.2 2010/12/09 20:56:30 schwarze Exp $
d3 1
a3 1
SUBDIR+= args cond string
@


1.2
log
@Roff only interpolates \* strings when the leading backslash is not escaped.
Kristaps@@ agrees with the idea, even though he didn't review the final patch.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.1 2010/04/25 17:35:31 schwarze Exp $
d3 1
a3 1
SUBDIR+= cond string
@


1.1
log
@Test handling of roff conditional instructions;
committing the desired results, too, because groff is doing
page-layout formatting for man(7) even in ASCII output mode
and we do not imitate that in mandoc.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.5 2010/02/17 22:35:17 schwarze Exp $
d3 1
a3 1
SUBDIR+= cond
@

