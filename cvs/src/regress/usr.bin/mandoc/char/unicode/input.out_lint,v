head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.6
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.4
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.1.0.6
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.4
	OPENBSD_5_7_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2015.10.13.23.30.42;	author schwarze;	state Exp;
branches;
next	1.1;
commitid	A4ygCil1Mn9VDkml;

1.1
date	2014.12.19.04.57.11;	author schwarze;	state Exp;
branches;
next	;
commitid	bjUOzumNjzY2mijc;


desc
@@


1.2
log
@Reject the escape sequences \[uD800] to \[uDFFF] in the parser.
These surrogates are not valid Unicode codepoints,
so treat them just like any other undefined character escapes:
Warn about them and do not produce output.
Issue noticed while talking to stsp@@, semarie@@, and bentley@@.
@
text
@mandoc: input.in:10:21: ERROR: skipping bad character: 0x0
mandoc: input.in:11:21: ERROR: skipping bad character: 0x1f
mandoc: input.in:12:21: ERROR: skipping bad character: 0x7f
mandoc: input.in:13:7: ERROR: skipping bad character: 0x80
mandoc: input.in:14:7: ERROR: skipping bad character: 0xbf
mandoc: input.in:20:15: ERROR: skipping bad character: 0xc0
mandoc: input.in:20:16: ERROR: skipping bad character: 0x80
mandoc: input.in:21:15: ERROR: skipping bad character: 0xc1
mandoc: input.in:21:16: ERROR: skipping bad character: 0xbf
mandoc: input.in:22:9: ERROR: skipping bad character: 0xc2
mandoc: input.in:24:11: ERROR: skipping bad character: 0xc2
mandoc: input.in:31:17: ERROR: skipping bad character: 0xc0
mandoc: input.in:31:18: ERROR: skipping bad character: 0x80
mandoc: input.in:31:19: ERROR: skipping bad character: 0x80
mandoc: input.in:32:17: ERROR: skipping bad character: 0xe0
mandoc: input.in:32:18: ERROR: skipping bad character: 0x81
mandoc: input.in:32:19: ERROR: skipping bad character: 0xbf
mandoc: input.in:33:17: ERROR: skipping bad character: 0xe0
mandoc: input.in:33:18: ERROR: skipping bad character: 0x82
mandoc: input.in:33:19: ERROR: skipping bad character: 0x80
mandoc: input.in:34:17: ERROR: skipping bad character: 0xe0
mandoc: input.in:34:18: ERROR: skipping bad character: 0x9f
mandoc: input.in:34:19: ERROR: skipping bad character: 0xbf
mandoc: input.in:41:25: ERROR: skipping bad character: 0xed
mandoc: input.in:41:26: ERROR: skipping bad character: 0xa0
mandoc: input.in:41:27: ERROR: skipping bad character: 0x80
mandoc: input.in:41:17: WARNING: invalid escape sequence: \[uD800]
mandoc: input.in:42:25: ERROR: skipping bad character: 0xed
mandoc: input.in:42:26: ERROR: skipping bad character: 0xbf
mandoc: input.in:42:27: ERROR: skipping bad character: 0xbf
mandoc: input.in:42:17: WARNING: invalid escape sequence: \[uDFFF]
mandoc: input.in:50:19: ERROR: skipping bad character: 0xf0
mandoc: input.in:50:20: ERROR: skipping bad character: 0x80
mandoc: input.in:50:21: ERROR: skipping bad character: 0x80
mandoc: input.in:50:22: ERROR: skipping bad character: 0x80
mandoc: input.in:51:19: ERROR: skipping bad character: 0xf0
mandoc: input.in:51:20: ERROR: skipping bad character: 0x80
mandoc: input.in:51:21: ERROR: skipping bad character: 0x81
mandoc: input.in:51:22: ERROR: skipping bad character: 0xbf
mandoc: input.in:52:19: ERROR: skipping bad character: 0xf0
mandoc: input.in:52:20: ERROR: skipping bad character: 0x80
mandoc: input.in:52:21: ERROR: skipping bad character: 0x82
mandoc: input.in:52:22: ERROR: skipping bad character: 0x80
mandoc: input.in:53:19: ERROR: skipping bad character: 0xf0
mandoc: input.in:53:20: ERROR: skipping bad character: 0x80
mandoc: input.in:53:21: ERROR: skipping bad character: 0x9f
mandoc: input.in:53:22: ERROR: skipping bad character: 0xbf
mandoc: input.in:54:19: ERROR: skipping bad character: 0xf0
mandoc: input.in:54:20: ERROR: skipping bad character: 0x80
mandoc: input.in:54:21: ERROR: skipping bad character: 0xa0
mandoc: input.in:54:22: ERROR: skipping bad character: 0x80
mandoc: input.in:55:19: ERROR: skipping bad character: 0xf0
mandoc: input.in:55:20: ERROR: skipping bad character: 0x8f
mandoc: input.in:55:21: ERROR: skipping bad character: 0xbf
mandoc: input.in:55:22: ERROR: skipping bad character: 0xbf
mandoc: input.in:62:31: ERROR: skipping bad character: 0xf4
mandoc: input.in:62:32: ERROR: skipping bad character: 0x90
mandoc: input.in:62:33: ERROR: skipping bad character: 0x80
mandoc: input.in:62:34: ERROR: skipping bad character: 0x80
mandoc: input.in:62:21: WARNING: invalid escape sequence: \[u110000]
mandoc: input.in:63:31: ERROR: skipping bad character: 0xf4
mandoc: input.in:63:32: ERROR: skipping bad character: 0xbf
mandoc: input.in:63:33: ERROR: skipping bad character: 0xbf
mandoc: input.in:63:34: ERROR: skipping bad character: 0xbf
mandoc: input.in:63:21: WARNING: invalid escape sequence: \[u13FFFF]
mandoc: input.in:64:31: ERROR: skipping bad character: 0xf5
mandoc: input.in:64:32: ERROR: skipping bad character: 0x80
mandoc: input.in:64:33: ERROR: skipping bad character: 0x80
mandoc: input.in:64:34: ERROR: skipping bad character: 0x80
mandoc: input.in:64:21: WARNING: invalid escape sequence: \[u140000]
mandoc: input.in:65:31: ERROR: skipping bad character: 0xf7
mandoc: input.in:65:32: ERROR: skipping bad character: 0xbf
mandoc: input.in:65:33: ERROR: skipping bad character: 0xbf
mandoc: input.in:65:34: ERROR: skipping bad character: 0xbf
mandoc: input.in:65:21: WARNING: invalid escape sequence: \[u1FFFFF]
mandoc: input.in:66:33: ERROR: skipping bad character: 0xf8
mandoc: input.in:66:34: ERROR: skipping bad character: 0x88
mandoc: input.in:66:35: ERROR: skipping bad character: 0x80
mandoc: input.in:66:36: ERROR: skipping bad character: 0x80
mandoc: input.in:66:37: ERROR: skipping bad character: 0x80
mandoc: input.in:66:23: WARNING: invalid escape sequence: \[u200000]
@


1.1
log
@Rewrite the low-level UTF-8 parser from scratch.
It accepted invalid byte sequences like 0xc080-c1bf, 0xe08080-e09fbf,
0xeda080-edbfbf, and 0xf0808080-f08fbfbf, produced valid roff Unicode
escape sequences from them, and the algorithm contained strong
defenses against any attempt to fix it.

This cures an assertion failure in the terminal formatter caused
by sneaking in ASCII 0x08 (backspace) by "encoding" it as an (invalid)
multibyte UTF-8 sequence, found by jsg@@ with afl.

As a bonus, the new algorithm also reduces the code in the function
by about 20%.
@
text
@d27 1
d31 1
@

