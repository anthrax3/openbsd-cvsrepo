head	1.7;
access;
symbols
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.3.0.12
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.8
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.4
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.1.0.4
	OPENBSD_5_6_BASE:1.1;
locks; strict;
comment	@# @;


1.7
date	2017.07.04.14.53.24;	author schwarze;	state Exp;
branches;
next	1.6;
commitid	b0KXfVBm69j6HJWE;

1.6
date	2017.06.25.12.48.57;	author schwarze;	state Exp;
branches;
next	1.5;
commitid	sEarNP5yvw5NJVzM;

1.5
date	2017.06.17.22.46.24;	author schwarze;	state Exp;
branches;
next	1.4;
commitid	cZz8ExRoPNYxAmqE;

1.4
date	2017.06.11.19.48.26;	author schwarze;	state Exp;
branches;
next	1.3;
commitid	Ja7YNtdzMnyr3Ti7;

1.3
date	2015.02.12.12.20.47;	author schwarze;	state Exp;
branches;
next	1.2;
commitid	SViaEKzwzmf0o0kW;

1.2
date	2015.02.02.18.26.06;	author schwarze;	state Exp;
branches;
next	1.1;
commitid	JF1v3mbtU0RfAJKN;

1.1
date	2014.07.02.11.42.56;	author schwarze;	state Exp;
branches;
next	;
commitid	aUdrdtDM8sKwymS7;


desc
@@


1.7
log
@Messages of the -Wbase level now print STYLE:.  Since this
causes horrible churn anyway, profit of the opportunity to stop
excessive testing, such that this is hopefully the last instance
of such churn.  Consistently use OpenBSD RCS tags, blank .Os,
blank fourth .TH argument, and Mdocdate like everywhere else.
Use -Ios=OpenBSD for platform-independent predictable output.
@
text
@mandoc: broken.in:14:2: WARNING: blocks badly nested: Bo breaks Bl
mandoc: broken.in:24:2: WARNING: blocks badly nested: Bo breaks Bd
mandoc: broken.in:26:2: ERROR: inserting missing end of block: It breaks Bd
@


1.6
log
@cope with changes in BASE messages
@
text
@d1 3
a3 6
mandoc: broken.in:13:2: WARNING: blocks badly nested: Bo breaks Bl
mandoc: broken.in:23:2: WARNING: blocks badly nested: Bo breaks Bd
mandoc: broken.in:25:2: ERROR: inserting missing end of block: It breaks Bd
mandoc: broken.in:3:5: BASE: operating system explicitly specified: Os OpenBSD (OpenBSD)
mandoc: broken.in:1:5: BASE: Mdocdate missing: Dd February (OpenBSD)
mandoc: broken.in: BASE: RCS id missing: (OpenBSD)
@


1.5
log
@churn related to the new style message about RCS ids
@
text
@d4 3
a6 2
mandoc: broken.in:1:5: STYLE: Mdocdate missing: Dd February
mandoc: broken.in: STYLE: RCS id missing
@


1.4
log
@churn caused by the new Mdocdate messages, no easy way to avoid this :(
@
text
@d5 1
@


1.3
log
@Delete the mdoc_node.pending pointer and the function calculating
it, make_pending(), which was the most difficult function of the
whole mdoc(7) parser.  After almost five years of maintaining this
hellhole, i just noticed the pointer isn't needed after all.

Blocks are always rewound in the reverse order they were opened;
that even holds for broken blocks.  Consequently, it is sufficient
to just mark broken blogs with the flag MDOC_BROKEN and breaking
blocks with the flag MDOC_ENDED.  When rewinding, instead of iterating
the pending pointers, just iterate from each broken block to its
parents, rewinding all that are MDOC_ENDED and stopping after
processing the first ancestor that it not MDOC_BROKEN.  For ENDBODY
markers, use the mdoc_node.body pointer in place of the former
mdoc_node.pending.

This also fixes an assertion failure found by jsg@@ with afl,
test case #467 (Bo Bl It Bd Bc It), where (surprise surprise)
the pending pointer got corrupted.

Improved functionality, minus one function, minus one struct field,
minus 50 lines of code.
@
text
@d4 1
@


1.2
log
@Simplify: Do not call rew_dohalt() from make_pending(),
the calling macro handler already found the breaking block.
No functional change except tiny variations in error messages.
@
text
@d2 2
@


1.1
log
@Clean up warnings related to macros and nesting.
* Hierarchical naming of enum mandocerr items.
* Improve the wording to make it comprehensible.
* Mention the offending macro.
* Garbage collect one chunk of ancient, long unreachable code.
@
text
@d1 1
a1 1
mandoc: broken.in:13:2: WARNING: blocks badly nested: Bc breaks Bl
@

