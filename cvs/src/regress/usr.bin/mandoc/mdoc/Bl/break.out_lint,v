head	1.14;
access;
symbols
	OPENBSD_6_2_BASE:1.14
	OPENBSD_6_1:1.10.0.4
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.9.0.8
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.6
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.4
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.1.0.4
	OPENBSD_5_6_BASE:1.1;
locks; strict;
comment	@# @;


1.14
date	2017.07.04.14.53.24;	author schwarze;	state Exp;
branches;
next	1.13;
commitid	b0KXfVBm69j6HJWE;

1.13
date	2017.06.25.12.48.57;	author schwarze;	state Exp;
branches;
next	1.12;
commitid	sEarNP5yvw5NJVzM;

1.12
date	2017.06.17.22.46.24;	author schwarze;	state Exp;
branches;
next	1.11;
commitid	cZz8ExRoPNYxAmqE;

1.11
date	2017.06.11.19.48.26;	author schwarze;	state Exp;
branches;
next	1.10;
commitid	Ja7YNtdzMnyr3Ti7;

1.10
date	2016.08.20.15.58.16;	author schwarze;	state Exp;
branches;
next	1.9;
commitid	g44rlhr1yUH2kxKq;

1.9
date	2015.02.12.13.00.27;	author schwarze;	state Exp;
branches;
next	1.8;
commitid	iMgtO2LMSIEj6vCq;

1.8
date	2015.02.03.01.13.48;	author schwarze;	state Exp;
branches;
next	1.7;
commitid	s14aWOWk6kaFd6xV;

1.7
date	2015.02.02.19.22.46;	author schwarze;	state Exp;
branches;
next	1.6;
commitid	nRZ0i192CtxdrWIy;

1.6
date	2015.02.02.18.26.06;	author schwarze;	state Exp;
branches;
next	1.5;
commitid	JF1v3mbtU0RfAJKN;

1.5
date	2015.02.02.04.26.03;	author schwarze;	state Exp;
branches;
next	1.4;
commitid	aVQDMaIveEZUjjaV;

1.4
date	2014.12.18.19.22.47;	author schwarze;	state Exp;
branches;
next	1.3;
commitid	gEOgPFvFGEiQs5LO;

1.3
date	2014.12.18.03.09.42;	author schwarze;	state Exp;
branches;
next	1.2;
commitid	gf4J2ZJoC3QosoVG;

1.2
date	2014.08.17.18.42.07;	author schwarze;	state Exp;
branches;
next	1.1;
commitid	sx8BHByh8NPOG90r;

1.1
date	2014.07.02.11.42.56;	author schwarze;	state Exp;
branches;
next	;
commitid	aUdrdtDM8sKwymS7;


desc
@@


1.14
log
@Messages of the -Wbase level now print STYLE:.  Since this
causes horrible churn anyway, profit of the opportunity to stop
excessive testing, such that this is hopefully the last instance
of such churn.  Consistently use OpenBSD RCS tags, blank .Os,
blank fourth .TH argument, and Mdocdate like everywhere else.
Use -Ios=OpenBSD for platform-independent predictable output.
@
text
@mandoc: break.in:14:2: WARNING: blocks badly nested: Bl breaks Bo
mandoc: break.in:22:2: WARNING: blocks badly nested: Bl breaks Bo
mandoc: break.in:23:2: ERROR: skipping item outside list: It 
mandoc: break.in:33:2: WARNING: blocks badly nested: Bl breaks Bd
mandoc: break.in:42:2: WARNING: blocks badly nested: Bl breaks Bd
mandoc: break.in:43:2: ERROR: skipping item outside list: It 
mandoc: break.in:54:2: WARNING: blocks badly nested: Bl breaks Bd
mandoc: break.in:57:2: WARNING: blocks badly nested: Bl breaks Bd
mandoc: break.in:59:2: ERROR: inserting missing end of block: Sh breaks Bd
mandoc: break.in:64:2: WARNING: blocks badly nested: Bl breaks Bd
mandoc: break.in:65:2: ERROR: skipping column outside column list: Ta
mandoc: break.in:72:2: WARNING: blocks badly nested: Bl breaks Bo
mandoc: break.in:74:2: ERROR: inserting missing end of block: Sh breaks Bo
mandoc: break.in:77:2: WARNING: blocks badly nested: Bl breaks Bo
mandoc: break.in:76:25: ERROR: appending missing end of block: Bo
mandoc: break.in:75:2: ERROR: appending missing end of block: Bl
mandoc: break.in:76:2: WARNING: empty list item: Bl -enum It
mandoc: break.in:76:2: ERROR: skipping all arguments: It before broken block
@


1.13
log
@cope with changes in BASE messages
@
text
@d1 18
a18 21
mandoc: break.in:13:2: WARNING: blocks badly nested: Bl breaks Bo
mandoc: break.in:21:2: WARNING: blocks badly nested: Bl breaks Bo
mandoc: break.in:22:2: ERROR: skipping item outside list: It 
mandoc: break.in:32:2: WARNING: blocks badly nested: Bl breaks Bd
mandoc: break.in:41:2: WARNING: blocks badly nested: Bl breaks Bd
mandoc: break.in:42:2: ERROR: skipping item outside list: It 
mandoc: break.in:53:2: WARNING: blocks badly nested: Bl breaks Bd
mandoc: break.in:56:2: WARNING: blocks badly nested: Bl breaks Bd
mandoc: break.in:58:2: ERROR: inserting missing end of block: Sh breaks Bd
mandoc: break.in:63:2: WARNING: blocks badly nested: Bl breaks Bd
mandoc: break.in:64:2: ERROR: skipping column outside column list: Ta
mandoc: break.in:71:2: WARNING: blocks badly nested: Bl breaks Bo
mandoc: break.in:73:2: ERROR: inserting missing end of block: Sh breaks Bo
mandoc: break.in:76:2: WARNING: blocks badly nested: Bl breaks Bo
mandoc: break.in:75:25: ERROR: appending missing end of block: Bo
mandoc: break.in:74:2: ERROR: appending missing end of block: Bl
mandoc: break.in:3:5: BASE: operating system explicitly specified: Os OpenBSD (OpenBSD)
mandoc: break.in:1:5: BASE: Mdocdate missing: Dd August (OpenBSD)
mandoc: break.in:75:2: WARNING: empty list item: Bl -enum It
mandoc: break.in:75:2: ERROR: skipping all arguments: It before broken block
mandoc: break.in: BASE: RCS id missing: (OpenBSD)
@


1.12
log
@churn related to the new style message about RCS ids
@
text
@d17 2
a18 1
mandoc: break.in:1:5: STYLE: Mdocdate missing: Dd August
d21 1
a21 1
mandoc: break.in: STYLE: RCS id missing
@


1.11
log
@churn caused by the new Mdocdate messages, no easy way to avoid this :(
@
text
@d20 1
@


1.10
log
@When scanning upwards for a column list to put a .Ta macro in,
ignore body end markers of lists breaking other blocks.
Fixing a logical error that caused a NULL deref found by tb@@ with afl(1).
@
text
@d17 1
@


1.9
log
@Do not confuse .Bl -column lists that just broken another block
with newly opened .Bl -column lists;
fixing an assertion failure jsg@@ found with afl:
test case #481, Bl It Bl -column It Bd El text text El
@
text
@d10 9
a18 7
mandoc: break.in:61:2: WARNING: blocks badly nested: Bl breaks Bo
mandoc: break.in:63:2: ERROR: inserting missing end of block: Sh breaks Bo
mandoc: break.in:66:2: WARNING: blocks badly nested: Bl breaks Bo
mandoc: break.in:65:25: ERROR: appending missing end of block: Bo
mandoc: break.in:64:2: ERROR: appending missing end of block: Bl
mandoc: break.in:65:2: WARNING: empty list item: Bl -enum It
mandoc: break.in:65:2: ERROR: skipping all arguments: It before broken block
@


1.8
log
@Finally delete the kitchensink functions rew_sub() and rew_dohalt().
They were a maintenance and auditing nightmare because if you changed
one bit in there, stuff tended to break at seemingly unrelated places.
No functional change except getting rid of one bogus error message,
but minus 80 lines of code.
@
text
@d7 10
a16 7
mandoc: break.in:49:2: WARNING: blocks badly nested: Bl breaks Bo
mandoc: break.in:51:2: ERROR: inserting missing end of block: Sh breaks Bo
mandoc: break.in:54:2: WARNING: blocks badly nested: Bl breaks Bo
mandoc: break.in:53:25: ERROR: appending missing end of block: Bo
mandoc: break.in:52:2: ERROR: appending missing end of block: Bl
mandoc: break.in:53:2: WARNING: empty list item: Bl -enum It
mandoc: break.in:53:2: ERROR: skipping all arguments: It before broken block
@


1.7
log
@Simplify and reindent make_pending().  No functional change
except that some error messages become less confusing.
Now the function is almost readable (but still requires
nineteen lines of comments for fourteen lines of code).
@
text
@a8 1
mandoc: break.in:51:2: ERROR: inserting missing end of block: Sh breaks It
@


1.6
log
@Simplify: Do not call rew_dohalt() from make_pending(),
the calling macro handler already found the breaking block.
No functional change except tiny variations in error messages.
@
text
@d7 1
a7 1
mandoc: break.in:49:2: WARNING: blocks badly nested: Bl breaks It
d10 1
a10 1
mandoc: break.in:54:2: WARNING: blocks badly nested: Bl breaks It
@


1.5
log
@Get rid of all calls to rew_sub() in blk_exp_close(); only ten calls
remain in other functions.  As a bonus, this fixes an assertion failure
jsg@@ found some time ago with afl (test case 982) and improves minor
details in error reporting.
@
text
@d1 2
a2 2
mandoc: break.in:13:2: WARNING: blocks badly nested: El breaks Bo
mandoc: break.in:21:2: WARNING: blocks badly nested: El breaks Bo
d4 2
a5 2
mandoc: break.in:32:2: WARNING: blocks badly nested: El breaks Bd
mandoc: break.in:41:2: WARNING: blocks badly nested: El breaks Bd
d7 1
a7 1
mandoc: break.in:49:2: WARNING: blocks badly nested: El breaks It
d10 1
a10 1
mandoc: break.in:54:2: WARNING: blocks badly nested: El breaks It
@


1.4
log
@When the head of a list item is extended with a partial explicit
macro (for example .Xo) and never closed again, the item ends up
without a body block.  This can even happen for list types that
usually don't have heads in the first place.  So even in this
case, check for the existence of the body before accessing it.
NULL pointer access found by jsg@@ with afl.
@
text
@a9 1
mandoc: break.in:51:2: ERROR: inserting missing end of block: Sh breaks Bl
@


1.3
log
@The code is already careful to not add items to lists that were
already closed.  In this respect, also consider lists closed
that have broken another block, their closure pending until the
end of the broken block.  This avoids syntax tree corruption
leading to a NULL pointer access found by jsg@@ with afl.
@
text
@d8 8
a15 2
mandoc: break.in:48:25: ERROR: appending missing end of block: Bo
mandoc: break.in:47:2: ERROR: appending missing end of block: Bl
@


1.2
log
@Segfault fixes from kristaps@@.
Note that .It and .Nm blocks without bodies cannot be generated by
valid mdoc(7) syntax but are a adequate representations of invalid
mdoc(7) constructs like Bl -hang It Bo Sh and Sh SYNOPSIS Nm Bo Sh.
@
text
@d2 8
a9 4
mandoc: break.in:23:2: WARNING: blocks badly nested: El breaks Bd
mandoc: break.in:30:2: WARNING: blocks badly nested: El breaks It
mandoc: break.in:29:25: ERROR: appending missing end of block: Bo
mandoc: break.in:28:2: ERROR: appending missing end of block: Bl
@


1.1
log
@Clean up warnings related to macros and nesting.
* Hierarchical naming of enum mandocerr items.
* Improve the wording to make it comprehensible.
* Mention the offending macro.
* Garbage collect one chunk of ancient, long unreachable code.
@
text
@d3 3
@

