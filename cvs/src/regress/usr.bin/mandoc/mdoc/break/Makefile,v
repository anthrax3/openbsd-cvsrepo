head	1.7;
access;
symbols
	OPENBSD_6_2:1.7.0.6
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.7.0.4
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.3.0.6
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.4
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.2.0.4
	OPENBSD_5_7_BASE:1.2;
locks; strict;
comment	@# @;


1.7
date	2017.03.08.22.53.36;	author schwarze;	state Exp;
branches;
next	1.6;
commitid	S0sHiOvvLc7ECRCI;

1.6
date	2017.03.08.14.45.33;	author schwarze;	state Exp;
branches;
next	1.5;
commitid	IAH4cvMDT5QLFL1l;

1.5
date	2017.03.05.19.59.26;	author schwarze;	state Exp;
branches;
next	1.4;
commitid	oe0SPH5Gl3TsCzFo;

1.4
date	2016.08.20.17.58.09;	author schwarze;	state Exp;
branches;
next	1.3;
commitid	ruds5O2o6F2jNWeX;

1.3
date	2015.04.05.14.43.10;	author schwarze;	state Exp;
branches;
next	1.2;
commitid	OILdzs9noIanocKo;

1.2
date	2015.02.12.13.52.12;	author schwarze;	state Exp;
branches;
next	1.1;
commitid	YdleMpqIEn5SQL56;

1.1
date	2014.12.22.23.26.20;	author schwarze;	state Exp;
branches;
next	;
commitid	7lnT7ht5X6HoJfAt;


desc
@@


1.7
log
@Now that markdown output is tested for almost everything, test all
input files in -T markdown output mode by default and only mark
those files with SKIP_MARKDOWN that are not to be tested.
Much easier to read, and almost minus 40 lines of Makefile code.
@
text
@# $OpenBSD: Makefile,v 1.6 2017/03/08 14:45:33 schwarze Exp $

REGRESS_TARGETS	= brokenbreaker twice tail two notopen
LINT_TARGETS	= brokenbreaker twice tail two notopen

# It's hard to keep stuff together in next-line scope.

SKIP_TMAN	= tail

# groff-1.22.3 defect:
# - non-matching enclosure end macro prints a closing delimiter

SKIP_GROFF	= brokenbreaker notopen

.include <bsd.regress.mk>
@


1.6
log
@enable -T markdown tests of filled displays and tagged lists
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.5 2017/03/05 19:59:26 schwarze Exp $
a4 1
MARKDOWN_TARGETS = brokenbreaker twice tail two notopen
@


1.5
log
@first batch of -T markdown tests
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.4 2016/08/20 17:58:09 schwarze Exp $
d5 1
a5 1
MARKDOWN_TARGETS = brokenbreaker twice two notopen
@


1.4
log
@When a mismatching end macro occurs while at least two nested blocks
are open, all except the innermost open block got a bogus MDOC_ENDED
marker, in some situations triggering segfaults down the road
which tb@@ found with afl(1).
Fix the logic error by figuring out up front whether an end macro
has a matching body, and if it hasn't, don't mark any blocks as broken.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.3 2015/04/05 14:43:10 schwarze Exp $
d5 1
@


1.3
log
@Arguments to end macros of broken partial explicit blocks
must go inside the breaking block.  For example, in
.It Ic cmd Oo
.Ar optional_arg Oc Ar mandatory_arg
the mandatory_arg is still inside the .It block.
Used for example by mutella(1).
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.2 2015/02/12 13:52:12 schwarze Exp $
d3 2
a4 2
REGRESS_TARGETS	= brokenbreaker twice tail two
LINT_TARGETS	= brokenbreaker twice tail two
d13 1
a13 1
SKIP_GROFF	= brokenbreaker
@


1.2
log
@After almost five years and 92 revisions, mdoc_macro.c rev. 1.139
finally fixed the four issues explained in the mdoc_macro.c rev. 1.47
commit message.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.1 2014/12/22 23:26:20 schwarze Exp $
d3 6
a8 2
REGRESS_TARGETS	= brokenbreaker twice two
LINT_TARGETS	= brokenbreaker twice two
@


1.1
log
@The code already pays attention not to close the same block twice.
Similarly, avoid having the same block break two other blocks.
In some situations, this could lead to an endless loop in rew_sub()
found by jsg@@ with afl.
Minimal example:  .Po Ao Pc Bo Pc Ac Bc
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.5 2014/07/06 19:08:57 schwarze Exp $
d3 2
a4 2
REGRESS_TARGETS	= twice
LINT_TARGETS	= twice
d9 1
a9 1
SKIP_GROFF	= twice
@

