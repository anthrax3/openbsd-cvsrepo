head	1.5;
access;
symbols
	OPENBSD_6_1:1.1.0.12
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.8
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.2
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.6
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.4
	OPENBSD_5_7_BASE:1.1;
locks; strict;
comment	@# @;


1.5
date	2017.07.04.14.53.26;	author schwarze;	state Exp;
branches;
next	1.4;
commitid	b0KXfVBm69j6HJWE;

1.4
date	2017.06.25.12.48.57;	author schwarze;	state Exp;
branches;
next	1.3;
commitid	sEarNP5yvw5NJVzM;

1.3
date	2017.06.17.22.46.25;	author schwarze;	state Exp;
branches;
next	1.2;
commitid	cZz8ExRoPNYxAmqE;

1.2
date	2017.06.11.19.48.27;	author schwarze;	state Exp;
branches;
next	1.1;
commitid	Ja7YNtdzMnyr3Ti7;

1.1
date	2015.02.10.17.47.19;	author schwarze;	state Exp;
branches;
next	;
commitid	myoCaafpofcJyStw;


desc
@@


1.5
log
@Messages of the -Wbase level now print STYLE:.  Since this
causes horrible churn anyway, profit of the opportunity to stop
excessive testing, such that this is hopefully the last instance
of such churn.  Consistently use OpenBSD RCS tags, blank .Os,
blank fourth .TH argument, and Mdocdate like everywhere else.
Use -Ios=OpenBSD for platform-independent predictable output.
@
text
@mandoc: call.in:10:2: WARNING: skipping empty macro: St
@


1.4
log
@cope with changes in BASE messages
@
text
@d1 1
a1 4
mandoc: call.in:9:2: WARNING: skipping empty macro: St
mandoc: call.in:3:5: BASE: operating system explicitly specified: Os OpenBSD (OpenBSD)
mandoc: call.in:1:5: BASE: Mdocdate missing: Dd February (OpenBSD)
mandoc: call.in: BASE: RCS id missing: (OpenBSD)
@


1.3
log
@churn related to the new style message about RCS ids
@
text
@d2 3
a4 2
mandoc: call.in:1:5: STYLE: Mdocdate missing: Dd February
mandoc: call.in: STYLE: RCS id missing
@


1.2
log
@churn caused by the new Mdocdate messages, no easy way to avoid this :(
@
text
@d3 1
@


1.1
log
@Be more careful to not generate empty .In, .St, and .Xr nodes.
That could happen when their first argument was another called macro,
causing a NULL pointer access in .St validation found by jsg@@ with afl.

Make in_line_argn() easier to understand by using one state
variable rather than two.
@
text
@d2 1
@

