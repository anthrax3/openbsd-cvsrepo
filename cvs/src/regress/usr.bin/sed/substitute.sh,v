head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.4
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.2
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.3.0.10
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.18
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.16
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.14
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.12
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.8
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.6
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.4
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2;
locks; strict;
comment	@# @;


1.4
date	2016.05.30.16.31.02;	author schwarze;	state Exp;
branches;
next	1.3;
commitid	biNaedrE4mhDnBsb;

1.3
date	2011.09.17.09.20.28;	author schwarze;	state Exp;
branches;
next	1.2;

1.2
date	2011.07.24.13.16.18;	author schwarze;	state Exp;
branches;
next	1.1;

1.1
date	2011.06.23.11.53.57;	author schwarze;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Some tests for \<; will be fixed by martijn@@'s upcoming commit to process.c
@
text
@#!/bin/sh
#
#	$OpenBSD: substitute.sh,v 1.3 2011/09/17 09:20:28 schwarze Exp $
#
# Copyright (c) 2011 Ingo Schwarze <schwarze@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this test suite for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# Test suite for the sed(1) -E substitute command, checking
# the handling of multiple zero-length matches in particular.

# error counter
err=0

# test function for one specific flag; arguments are:
# input string
# regular expression to replace
# substitution flag
# wanted output
tf() {
	in=$1
	patt="s/$2/x/$3"
	want=$4
	hexwant=`echo $want | hexdump -C`
	hexout=`echo "$in" | sed -E "$patt" | hexdump -C`
	if [ "X$hexout" != "X$hexwant" ]; then
		echo "patt: $patt input: \"$in\\\\n\""
		echo "want:" $hexwant
		echo "got: " $hexout
	fi
	[ -z "$in" ] && want=""
	hexwant=`echo -n $want | hexdump -C`
	hexout=`echo -n "$in" | sed -E "$patt" | hexdump -C`
	if [ "X$hexout" != "X$hexwant" ]; then
		echo "patt: $patt input: \"$in\\\\0\""
		echo "want:" $hexwant
		echo "got: " $hexout
	fi
}

# test function for various flags; arguments are:
# input string
# regular expression to replace
# wanted output for /g (global substitution)
# wanted output for /1 (substitution of first match) and so on
t() {
	# global substitution
	in=$1
	expr=$2
	want=$3
	shift 3
	tf "$in" "$expr" g "$want"

	# substitution with specific index
	num=1
	while [ $# -gt 0 ]; do
		want=$1
		shift
		tf "$in" "$expr" "$num" "$want"
		num=$((num+1))
	done

	# substitution with excessive index
	tf "$in" "$expr" "$num" "$in"
}

t '' ^ x x
t '' '()' x x
t '' '$' x x
t '' '^|$' x x
t a ^ xa xa
t a '()' xax xa ax
t a '$' ax ax
t a '\<' xa xa
t a '^|a' x x
t a '^|$' xax xa ax
t a '^|a|$' x x
t a 'a|$' x x
t a '\<|a' x x
t ab ^ xab xab
t ab '()' xaxbx xab axb abx
t ab '$' abx abx
t ab '\<' xab xab
t ab '^|a' xb xb
t ab '^|b' xax xab ax
t ab '^|$' xabx xab abx
t ab '^|a|$' xbx xb abx
t ab '^|b|$' xax xab ax
t ab '^|a|b|$' xx xb ax
t ab '^|ab|$' x x
t ab 'a|()' xbx xb abx
t ab 'a|$' xbx xb abx
t ab 'ab|$' x x
t ab 'b|()' xax xab ax
t ab 'b|$' ax ax
t ab '\<|a' xb xb
t ab '\<|b' xax xab ax
t abc '^|b' xaxc xabc axc
t abc '^|b|$' xaxcx xabc axc abcx
t abc '^|bc|$' xax xabc ax
t abc 'ab|()' xcx xc abcx
t abc 'ab|$' xcx xc abcx
t abc 'b|()' xaxcx xabc axc abcx
t abc 'bc|()' xax xabc ax
t abc 'b|$' axcx axc abcx
t aa a xx xa ax
t aa 'a|()' xx xa ax
t aa 'a*' x x
t a:a: '\<' xa:xa: xa:a: a:xa:
t a:a: '\<..' xx xa: a:x

exit $err
@


1.3
log
@Also test input files ending without a newline,
and catch NUL characters in the sed output.
That requires using hexdump(1), which also makes
the test suite output more intelligible in case of errors.
Of course, many tests still fail, until i commit my patch to sed.
@
text
@d3 1
a3 1
#	$OpenBSD: substitute.sh,v 1.2 2011/07/24 13:16:18 schwarze Exp $
d84 1
d89 1
d93 1
d106 2
d119 2
@


1.2
log
@Also run the new tests of "sed -E 's/..." with the input lacking a
trailing newline.  Will be fixed by a commit to sed/process.c right
afterwards.  While here, assert my copyright and add a license.
OK otto@@
@
text
@d3 1
a3 1
#	$OpenBSD$
d32 1
a32 2
	expr=$2
	flag=$3
d34 15
a48 7
	out=`echo "$in" | sed -E "s/$expr/x/$flag"`
	[ "X$out" = "X$want" ] || \
		echo "$in/$expr/$flag/$want/$out ($((++err)))"
	[ -z "$in" ] && return
	out=`echo -n "$in" | sed -E "s/$expr/x/$flag"`
	[ "X$out" = "X$want" ] || \
		echo "-n:$in/$expr/$flag/$want/$out ($((++err)))"
@


1.1
log
@regression tests for the sed substitute command
most of these still fail, a patch to fix them is on tech@@ for review
ok to commit the tests  deraadt@@ otto@@
@
text
@d2 19
d25 20
a44 1
# test function; arguments are:
d55 1
a55 2
	out=`echo "$in" | sed -E "s/$expr/x/g"`
	[ "X$out" = "X$want" ] || echo "$in/$expr/g/$want/$out ($((++err)))"
d62 1
a62 3
		out=`echo "$in" | sed -E "s/$expr/x/$num"`
		[ "X$out" = "X$want" ] || \
			echo "$in/$expr/$num/$want/$out ($((++err)))"
d67 1
a67 2
	out=`echo "$in" | sed -E "s/$expr/x/$num"`
	[ "X$out" = "X$in" ] || echo "$in/$expr/$num/=/$out ($((++err)))"
@

