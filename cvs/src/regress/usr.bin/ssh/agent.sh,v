head	1.11;
access;
symbols
	OPENBSD_6_1:1.11.0.12
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.8
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.4
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.6
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.10.0.6
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.4
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.7.0.22
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.20
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.18
	OPENBSD_5_0:1.7.0.16
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.14
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.12
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.8
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.10
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.6
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.4
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.2
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.6.0.24
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.22
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.20
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.18
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.16
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.14
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.12
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.10
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.8
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.6
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6;
locks; strict;
comment	@# @;


1.11
date	2015.03.03.22.35.19;	author markus;	state Exp;
branches;
next	1.10;
commitid	m52xwEKWrNr11xhO;

1.10
date	2014.02.27.21.21.25;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2013.12.06.13.52.46;	author markus;	state Exp;
branches;
next	1.8;

1.8
date	2013.05.17.00.37.40;	author dtucker;	state Exp;
branches;
next	1.7;

1.7
date	2007.11.25.15.35.09;	author jmc;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.15.13.08.56;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.17.22.22.45;	author markus;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.16.01.09.47;	author markus;	state Exp;
branches;
next	1.3;

1.3
date	2002.02.15.14.41.38;	author markus;	state Exp;
branches;
next	1.2;

1.2
date	2002.02.15.10.15.13;	author markus;	state Exp;
branches;
next	1.1;

1.1
date	2002.02.14.23.18.00;	author markus;	state Exp;
branches;
next	;


desc
@@


1.11
log
@make it possible to run tests w/o ssh1 support; ok djm@@
@
text
@#	$OpenBSD: agent.sh,v 1.10 2014/02/27 21:21:25 djm Exp $
#	Placed in the Public Domain.

tid="simple agent test"

SSH_AUTH_SOCK=/nonexistent ${SSHADD} -l > /dev/null 2>&1
if [ $? -ne 2 ]; then
	fail "ssh-add -l did not fail with exit code 2"
fi

trace "start agent"
eval `${SSHAGENT} -s` > /dev/null
r=$?
if [ $r -ne 0 ]; then
	fail "could not start ssh-agent: exit code $r"
else
	${SSHADD} -l > /dev/null 2>&1
	if [ $? -ne 1 ]; then
		fail "ssh-add -l did not fail with exit code 1"
	fi
	trace "overwrite authorized keys"
	printf '' > $OBJ/authorized_keys_$USER
	for t in ${SSH_KEYTYPES}; do
		# generate user key for agent
		rm -f $OBJ/$t-agent
		${SSHKEYGEN} -q -N '' -t $t -f $OBJ/$t-agent ||\
			 fail "ssh-keygen for $t-agent failed"
		# add to authorized keys
		cat $OBJ/$t-agent.pub >> $OBJ/authorized_keys_$USER
		# add privat key to agent
		${SSHADD} $OBJ/$t-agent > /dev/null 2>&1
		if [ $? -ne 0 ]; then
			fail "ssh-add did succeed exit code 0"
		fi
	done
	${SSHADD} -l > /dev/null 2>&1
	r=$?
	if [ $r -ne 0 ]; then
		fail "ssh-add -l failed: exit code $r"
	fi
	# the same for full pubkey output
	${SSHADD} -L > /dev/null 2>&1
	r=$?
	if [ $r -ne 0 ]; then
		fail "ssh-add -L failed: exit code $r"
	fi

	trace "simple connect via agent"
	for p in ${SSH_PROTOCOLS}; do
		${SSH} -$p -F $OBJ/ssh_proxy somehost exit 5$p
		r=$?
		if [ $r -ne 5$p ]; then
			fail "ssh connect with protocol $p failed (exit code $r)"
		fi
	done

	trace "agent forwarding"
	for p in ${SSH_PROTOCOLS}; do
		${SSH} -A -$p -F $OBJ/ssh_proxy somehost ${SSHADD} -l > /dev/null 2>&1
		r=$?
		if [ $r -ne 0 ]; then
			fail "ssh-add -l via agent fwd proto $p failed (exit code $r)"
		fi
		${SSH} -A -$p -F $OBJ/ssh_proxy somehost \
			"${SSH} -$p -F $OBJ/ssh_proxy somehost exit 5$p"
		r=$?
		if [ $r -ne 5$p ]; then
			fail "agent fwd proto $p failed (exit code $r)"
		fi
	done

	trace "delete all agent keys"
	${SSHADD} -D > /dev/null 2>&1
	r=$?
	if [ $r -ne 0 ]; then
		fail "ssh-add -D failed: exit code $r"
	fi

	trace "kill agent"
	${SSHAGENT} -k > /dev/null
fi
@


1.10
log
@keep return values that are printed in error messages;
from portable
@
text
@d1 1
a1 1
#	$OpenBSD: agent.sh,v 1.9 2013/12/06 13:52:46 markus Exp $
d23 1
a23 1
	for t in ed25519 rsa rsa1; do
d49 1
a49 1
	for p in 1 2; do
d58 1
a58 1
	for p in 1 2; do
@


1.9
log
@test ed25519 support; from djm@@
@
text
@d1 1
a1 1
#	$OpenBSD: agent.sh,v 1.8 2013/05/17 00:37:40 dtucker Exp $
d37 3
a39 2
	if [ $? -ne 0 ]; then
		fail "ssh-add -l failed: exit code $?"
d43 3
a45 2
	if [ $? -ne 0 ]; then
		fail "ssh-add -L failed: exit code $?"
d51 3
a53 2
		if [ $? -ne 5$p ]; then
			fail "ssh connect with protocol $p failed (exit code $?)"
d60 3
a62 2
		if [ $? -ne 0 ]; then
			fail "ssh-add -l via agent fwd proto $p failed (exit code $?)"
d66 3
a68 2
		if [ $? -ne 5$p ]; then
			fail "agent fwd proto $p failed (exit code $?)"
d74 3
a76 2
	if [ $? -ne 0 ]; then
		fail "ssh-add -D failed: exit code $?"
@


1.8
log
@replace 'echo -n' with 'printf' since it's more portable
@
text
@d1 1
a1 1
#	$OpenBSD: agent.sh,v 1.7 2007/11/25 15:35:09 jmc Exp $
d23 1
a23 1
	for t in rsa rsa1; do
@


1.7
log
@more existant -> existent, from Martynas Venckus;
pfctl changes: ok henning
ssh changes: ok deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: agent.sh,v 1.6 2002/03/15 13:08:56 markus Exp $
d22 1
a22 1
	echo -n > $OBJ/authorized_keys_$USER
@


1.6
log
@allow specification of binary-under-test with
	$TEST_SSH_{SSH,SSHD,SSHAGENT,SSHADD,SSHKEYGEN,SSHKEYSCAN}
@
text
@d1 1
a1 1
#	$OpenBSD: agent.sh,v 1.5 2002/02/17 22:22:45 markus Exp $
d6 1
a6 1
SSH_AUTH_SOCK=/nonexistant ${SSHADD} -l > /dev/null 2>&1
@


1.5
log
@try agent forwarding, too.
@
text
@d1 1
a1 1
#	$OpenBSD: agent.sh,v 1.4 2002/02/16 01:09:47 markus Exp $
d6 1
a6 1
SSH_AUTH_SOCK=/nonexistant ssh-add -l > /dev/null 2>&1
d12 1
a12 1
eval `ssh-agent -s` > /dev/null
d17 1
a17 1
	ssh-add -l > /dev/null 2>&1
d26 1
a26 1
		ssh-keygen -q -N '' -t $t -f $OBJ/$t-agent ||\
d31 1
a31 1
		ssh-add $OBJ/$t-agent > /dev/null 2>&1
d36 1
a36 1
	ssh-add -l > /dev/null 2>&1
d41 1
a41 1
	ssh-add -L > /dev/null 2>&1
d48 1
a48 1
		ssh -$p -F $OBJ/ssh_proxy somehost exit 5$p
d56 1
a56 1
		ssh -A -$p -F $OBJ/ssh_proxy somehost ssh-add -l > /dev/null 2>&1
d60 2
a61 2
		ssh -A -$p -F $OBJ/ssh_proxy somehost \
			"ssh -$p -F $OBJ/ssh_proxy somehost exit 5$p"
d68 1
a68 1
	ssh-add -D > /dev/null 2>&1
d74 1
a74 1
	ssh-agent -k > /dev/null
@


1.4
log
@$OpenBSD$, public domain
@
text
@d1 1
a1 1
#	$OpenBSD: $
d51 13
@


1.3
log
@we don't need a listening sshd for most of our tests, just
connect client and server w/o TCP:
	ssh -o 'proxycommand sshd -i -f $OBJ/sshd_proxy'
@
text
@d1 3
@


1.2
log
@delete agent keys, too
@
text
@d43 1
a43 1
	trace  "simple connect via agent"
d45 1
a45 1
		ssh -o "Protocol=$p" -F $OBJ/ssh_config somehost exit 5$p
d51 1
a51 1
	trace  "delete all agent keys"
@


1.1
log
@serveral tests for ssh-keygen/ssh/sshd/ssh-add/ssh-agent

note that these tests will start sshd on 127.0.0.1:4242
and will fail if the realpath of /usr/src/usr.sbin/ssh/obj/ contains
a group or world writeable directory.
@
text
@d35 6
a40 1
		fail "ssh-add -l did succeed exit code 0"
d47 1
a47 1
			fail "ssh connect with protocol $p failed"
d50 6
@

