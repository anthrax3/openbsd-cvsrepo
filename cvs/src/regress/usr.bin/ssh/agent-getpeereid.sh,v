head	1.9;
access;
symbols
	OPENBSD_6_1:1.8.0.4
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.6.0.2
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.5.0.10
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.12
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.8
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.6
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.4.0.22
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.20
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.18
	OPENBSD_5_0:1.4.0.16
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.14
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.12
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.8
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.10
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.6
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.4
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.2
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.3.0.6
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.4
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.2
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.2.0.2
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.1.0.12
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.10
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.8
	OPENBSD_3_6_BASE:1.1
	OPENBSD_3_5:1.1.0.6
	OPENBSD_3_5_BASE:1.1
	OPENBSD_3_4:1.1.0.4
	OPENBSD_3_4_BASE:1.1
	OPENBSD_3_3:1.1.0.2
	OPENBSD_3_3_BASE:1.1;
locks; strict;
comment	@# @;


1.9
date	2017.09.13.14.58.26;	author bluhm;	state Exp;
branches;
next	1.8;
commitid	0ptM9aBfMdlWfJrS;

1.8
date	2017.01.06.02.51.16;	author djm;	state Exp;
branches;
next	1.7;
commitid	W4nWatBIcykmqU1X;

1.7
date	2016.09.26.21.34.38;	author bluhm;	state Exp;
branches;
next	1.6;
commitid	78ojOtQPiUY00oy2;

1.6
date	2016.05.03.14.41.04;	author djm;	state Exp;
branches;
next	1.5;
commitid	2xWxVsTi6MxN7avu;

1.5
date	2013.05.17.10.33.09;	author dtucker;	state Exp;
branches;
next	1.4;

1.4
date	2007.11.25.15.35.09;	author jmc;	state Exp;
branches;
next	1.3;

1.3
date	2006.07.06.12.01.53;	author grunk;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.14.21.25.56;	author grunk;	state Exp;
branches;
next	1.1;

1.1
date	2002.12.09.16.05.02;	author markus;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Print SKIPPED if sudo and doas configuration is missing.  Prevents
that running the regression test with wrong environment is reported
as failure.  Keep the fatal there to avoid interfering with other
setups for portable ssh.
OK dtucker@@
@
text
@#	$OpenBSD: agent-getpeereid.sh,v 1.8 2017/01/06 02:51:16 djm Exp $
#	Placed in the Public Domain.

tid="disallow agent attach from other uid"

UNPRIV=nobody
ASOCK=${OBJ}/agent
SSH_AUTH_SOCK=/nonexistent

case "x$SUDO" in
	xsudo) sudo=1;;
	xdoas) ;;
	x)
		if [ -x /usr/local/bin/sudo -a -f /etc/sudoers ]; then
			sudo=1
			SUDO=/usr/local/sbin/sudo
		elif [ -f /etc/doas.conf ]; then
			SUDO=/usr/bin/doas
		else
			echo neither sudo and sudoers nor doas.conf exist
			echo SKIPPED
			fatal "need SUDO to switch to uid $UNPRIV," \
			    "test won't work without"
		fi ;;
	*) fatal 'unsupported $SUDO - "doas" and "sudo" are allowed' ;;
esac

trace "start agent"
eval `${SSHAGENT} -s -a ${ASOCK}` > /dev/null
r=$?
if [ $r -ne 0 ]; then
	fail "could not start ssh-agent: exit code $r"
else
	chmod 644 ${SSH_AUTH_SOCK}

	${SSHADD} -l > /dev/null 2>&1
	r=$?
	if [ $r -ne 1 ]; then
		fail "ssh-add failed with $r != 1"
	fi
	if test -z "$sudo" ; then
		# doas
		${SUDO} -n -u ${UNPRIV} ${SSHADD} -l 2>/dev/null
	else
		# sudo
		< /dev/null ${SUDO} -S -u ${UNPRIV} ${SSHADD} -l 2>/dev/null
	fi
	r=$?
	if [ $r -lt 2 ]; then
		fail "ssh-add did not fail for ${UNPRIV}: $r < 2"
	fi

	trace "kill agent"
	${SSHAGENT} -k > /dev/null
fi

rm -f ${OBJ}/agent
@


1.8
log
@use correct ssh-add program; bz#2654, from Colin Watson
@
text
@d1 1
a1 1
#	$OpenBSD: agent-getpeereid.sh,v 1.7 2016/09/26 21:34:38 bluhm Exp $
d20 2
@


1.7
log
@Allow to run ssh regression tests as root.  If the user is already
root, the test should not expect that SUDO is set.  If ssh needs
another user, use sudo or doas to switch from root if necessary.
OK dtucker@@
@
text
@d1 1
a1 1
#	$OpenBSD: agent-getpeereid.sh,v 1.6 2016/05/03 14:41:04 djm Exp $
d34 1
a34 1
	ssh-add -l > /dev/null 2>&1
d41 1
a41 1
		${SUDO} -n -u ${UNPRIV} ssh-add -l 2>/dev/null
d44 1
a44 1
		< /dev/null ${SUDO} -S -u ${UNPRIV} ssh-add -l 2>/dev/null
@


1.6
log
@support doas
@
text
@d1 1
a1 1
#	$OpenBSD: agent-getpeereid.sh,v 1.5 2013/05/17 10:33:09 dtucker Exp $
d13 10
a22 1
	x) fatal "need SUDO to switch to uid $UNPRIV, test won't work without";;
@


1.5
log
@don't redirect stdout from sudo.  from portable
@
text
@d1 1
a1 1
#	$OpenBSD: agent-getpeereid.sh,v 1.4 2007/11/25 15:35:09 jmc Exp $
d10 6
a15 3
if [ -z "$SUDO" ]; then
	fatal "need SUDO to switch to uid $UNPRIV, test won't work without"
fi
d30 7
a36 2

	< /dev/null ${SUDO} -S -u ${UNPRIV} ssh-add -l 2>/dev/null
@


1.4
log
@more existant -> existent, from Martynas Venckus;
pfctl changes: ok henning
ssh changes: ok deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: agent-getpeereid.sh,v 1.3 2006/07/06 12:01:53 grunk Exp $
d28 1
a28 1
	< /dev/null ${SUDO} -S -u ${UNPRIV} ssh-add -l > /dev/null 2>&1
@


1.3
log
@in this test, $SUDO is not used to gain privileges but to switch to nobody.
thus, we need the SUDO variable to be set.  if not set, the test would
also pass ok, but only because exit status 2 and 127 looked the same to the
test.

ok markus@@
@
text
@d1 1
a1 1
#	$OpenBSD: agent-getpeereid.sh,v 1.2 2005/11/14 21:25:56 grunk Exp $
d8 1
a8 1
SSH_AUTH_SOCK=/nonexistant
@


1.2
log
@all other scripts in this dir use $SUDO, not 'sudo', so pull this even
ok markus@@
@
text
@d1 1
a1 1
#	$OpenBSD: agent-getpeereid.sh,v 1.1 2002/12/09 16:05:02 markus Exp $
d9 4
@


1.1
log
@make sure getpeereid works in the agent; XXX test needs sudo
@
text
@d1 1
a1 1
#	$OpenBSD: $
d24 1
a24 1
	< /dev/null sudo -S -u ${UNPRIV} ssh-add -l > /dev/null 2>&1
@

