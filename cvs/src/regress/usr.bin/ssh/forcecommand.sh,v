head	1.3;
access;
symbols
	OPENBSD_6_1:1.3.0.12
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.8
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.4
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.2.0.8
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.2
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.1.0.28
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.26
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.24
	OPENBSD_5_0:1.1.0.22
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.20
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.18
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.14
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.16
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.12
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.10
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.8
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.6
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.4
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.2
	OPENBSD_4_0_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2015.03.03.22.35.19;	author markus;	state Exp;
branches;
next	1.2;
commitid	m52xwEKWrNr11xhO;

1.2
date	2013.05.17.00.37.40;	author dtucker;	state Exp;
branches;
next	1.1;

1.1
date	2006.07.19.13.09.28;	author dtucker;	state Exp;
branches;
next	;


desc
@@


1.3
log
@make it possible to run tests w/o ssh1 support; ok djm@@
@
text
@#	$OpenBSD: forcecommand.sh,v 1.2 2013/05/17 00:37:40 dtucker Exp $
#	Placed in the Public Domain.

tid="forced command"

cp $OBJ/sshd_proxy $OBJ/sshd_proxy_bak

cp /dev/null $OBJ/authorized_keys_$USER
for t in ${SSH_KEYTYPES}; do
	printf 'command="true" ' >>$OBJ/authorized_keys_$USER
	cat $OBJ/$t.pub >> $OBJ/authorized_keys_$USER
done

for p in ${SSH_PROTOCOLS}; do
	trace "forced command in key option proto $p"
	${SSH} -$p -F $OBJ/ssh_proxy somehost false \ ||
	    fail "forced command in key proto $p"
done

cp /dev/null $OBJ/authorized_keys_$USER
for t in ${SSH_KEYTYPES}; do
	printf 'command="false" ' >> $OBJ/authorized_keys_$USER
	cat $OBJ/$t.pub >> $OBJ/authorized_keys_$USER
done

cp $OBJ/sshd_proxy_bak $OBJ/sshd_proxy
echo "ForceCommand true" >> $OBJ/sshd_proxy

for p in ${SSH_PROTOCOLS}; do
	trace "forced command in sshd_config overrides key option proto $p"
	${SSH} -$p -F $OBJ/ssh_proxy somehost false \ ||
	    fail "forced command in key proto $p"
done

cp $OBJ/sshd_proxy_bak $OBJ/sshd_proxy
echo "ForceCommand false" >> $OBJ/sshd_proxy
echo "Match User $USER" >> $OBJ/sshd_proxy
echo "    ForceCommand true" >> $OBJ/sshd_proxy

for p in ${SSH_PROTOCOLS}; do
	trace "forced command with match proto $p"
	${SSH} -$p -F $OBJ/ssh_proxy somehost false \ ||
	    fail "forced command in key proto $p"
done
@


1.2
log
@replace 'echo -n' with 'printf' since it's more portable
@
text
@d1 1
a1 1
#	$OpenBSD: forcecommand.sh,v 1.1 2006/07/19 13:09:28 dtucker Exp $
d8 5
a12 4
printf 'command="true" ' >$OBJ/authorized_keys_$USER
cat $OBJ/rsa.pub >> $OBJ/authorized_keys_$USER
printf 'command="true" ' >>$OBJ/authorized_keys_$USER
cat $OBJ/rsa1.pub >> $OBJ/authorized_keys_$USER
d14 1
a14 1
for p in 1 2; do
d20 5
a24 4
printf 'command="false" ' >$OBJ/authorized_keys_$USER
cat $OBJ/rsa.pub >> $OBJ/authorized_keys_$USER
printf 'command="false" ' >>$OBJ/authorized_keys_$USER
cat $OBJ/rsa1.pub >> $OBJ/authorized_keys_$USER
d29 1
a29 1
for p in 1 2; do
d40 1
a40 1
for p in 1 2; do
@


1.1
log
@Add regress test for ForceCommand
@
text
@d1 1
a1 1
#	$OpenBSD$
d8 1
a8 1
echo -n 'command="true" ' >$OBJ/authorized_keys_$USER
d10 1
a10 1
echo -n 'command="true" ' >>$OBJ/authorized_keys_$USER
d19 1
a19 1
echo -n 'command="false" ' >$OBJ/authorized_keys_$USER
d21 1
a21 1
echo -n 'command="false" ' >>$OBJ/authorized_keys_$USER
@

