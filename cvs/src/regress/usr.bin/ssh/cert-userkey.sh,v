head	1.17;
access;
symbols
	OPENBSD_6_1:1.17.0.2
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.16.0.2
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.14.0.2
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.14.0.4
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.6
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.4
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.11.0.2
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.10.0.2
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.8.0.6
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.4
	OPENBSD_5_0:1.8.0.2
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.7.0.2
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.6.0.2
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3;
locks; strict;
comment	@# @;


1.17
date	2016.11.30.03.01.33;	author djm;	state Exp;
branches;
next	1.16;
commitid	4P5Q7bqTWgOCl8ov;

1.16
date	2016.05.03.12.15.49;	author dtucker;	state Exp;
branches;
next	1.15;
commitid	VM1Ag2QflWEvMTg0;

1.15
date	2016.05.02.09.52.00;	author djm;	state Exp;
branches;
next	1.14;
commitid	0m5tVoJOU30lUWTB;

1.14
date	2015.07.10.06.23.25;	author markus;	state Exp;
branches;
next	1.13;
commitid	77ck9U2QYRgsdGVX;

1.13
date	2015.07.03.04.39.23;	author djm;	state Exp;
branches;
next	1.12;
commitid	QhSmdQrRbvDNFqW5;

1.12
date	2013.12.06.13.52.46;	author markus;	state Exp;
branches;
next	1.11;

1.11
date	2013.05.17.00.37.40;	author dtucker;	state Exp;
branches;
next	1.10;

1.10
date	2013.01.18.00.45.29;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2012.10.19.05.10.42;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2011.05.17.07.13.31;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2010.08.31.12.24.09;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2010.06.29.23.59.54;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2010.05.07.11.31.26;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2010.04.16.01.58.45;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2010.03.04.10.38.23;	author djm;	state Exp;
branches;
next	1.2;

1.2
date	2010.03.03.00.47.23;	author djm;	state Exp;
branches;
next	1.1;

1.1
date	2010.02.26.20.33.21;	author djm;	state Exp;
branches;
next	;


desc
@@


1.17
log
@test new behaviour of cert force-command restriction vs. authorized_key/
principals
@
text
@#	$OpenBSD: cert-userkey.sh,v 1.16 2016/05/03 12:15:49 dtucker Exp $
#	Placed in the Public Domain.

tid="certified user keys"

rm -f $OBJ/authorized_keys_$USER $OBJ/user_ca_key* $OBJ/cert_user_key*
cp $OBJ/sshd_proxy $OBJ/sshd_proxy_bak
cp $OBJ/ssh_proxy $OBJ/ssh_proxy_bak

PLAIN_TYPES=`$SSH -Q key-plain | sed 's/^ssh-dss/ssh-dsa/;s/^ssh-//'`

if echo "$PLAIN_TYPES" | grep '^rsa$' >/dev/null 2>&1 ; then
	PLAIN_TYPES="$PLAIN_TYPES rsa-sha2-256 rsa-sha2-512"
fi

kname() {
	case $ktype in
	rsa-sha2-*) ;;
	# subshell because some seds will add a newline
	*) n=$(echo $1 | sed 's/^dsa/ssh-dss/;s/^rsa/ssh-rsa/;s/^ed/ssh-ed/') ;;
	esac
	echo "$n*,ssh-rsa*,ssh-ed25519*"
}

# Create a CA key
${SSHKEYGEN} -q -N '' -t rsa  -f $OBJ/user_ca_key ||\
	fail "ssh-keygen of user_ca_key failed"

# Generate and sign user keys
for ktype in $PLAIN_TYPES $EXTRA_TYPES ; do
	verbose "$tid: sign user ${ktype} cert"
	${SSHKEYGEN} -q -N '' -t ${ktype} \
	    -f $OBJ/cert_user_key_${ktype} || \
		fatal "ssh-keygen of cert_user_key_${ktype} failed"
	# Generate RSA/SHA2 certs for rsa-sha2* keys.
	case $ktype in
	rsa-sha2-*)	tflag="-t $ktype" ;;
	*)		tflag="" ;;
	esac
	${SSHKEYGEN} -q -s $OBJ/user_ca_key -z $$ \
	    -I "regress user key for $USER" \
	    -n ${USER},mekmitasdigoat $tflag $OBJ/cert_user_key_${ktype} || \
		fatal "couldn't sign cert_user_key_${ktype}"
done

# Test explicitly-specified principals
for ktype in $EXTRA_TYPES $PLAIN_TYPES ; do
	t=$(kname $ktype)
	for privsep in yes no ; do
		_prefix="${ktype} privsep $privsep"

		# Setup for AuthorizedPrincipalsFile
		rm -f $OBJ/authorized_keys_$USER
		(
			cat $OBJ/sshd_proxy_bak
			echo "UsePrivilegeSeparation $privsep"
			echo "AuthorizedPrincipalsFile " \
			    "$OBJ/authorized_principals_%u"
			echo "TrustedUserCAKeys $OBJ/user_ca_key.pub"
			echo "PubkeyAcceptedKeyTypes ${t}"
		) > $OBJ/sshd_proxy
		(
			cat $OBJ/ssh_proxy_bak
			echo "PubkeyAcceptedKeyTypes ${t}"
		) > $OBJ/ssh_proxy

		# Missing authorized_principals
		verbose "$tid: ${_prefix} missing authorized_principals"
		rm -f $OBJ/authorized_principals_$USER
		${SSH} -2i $OBJ/cert_user_key_${ktype} \
		    -F $OBJ/ssh_proxy somehost true >/dev/null 2>&1
		if [ $? -eq 0 ]; then
			fail "ssh cert connect succeeded unexpectedly"
		fi

		# Empty authorized_principals
		verbose "$tid: ${_prefix} empty authorized_principals"
		echo > $OBJ/authorized_principals_$USER
		${SSH} -2i $OBJ/cert_user_key_${ktype} \
		    -F $OBJ/ssh_proxy somehost true >/dev/null 2>&1
		if [ $? -eq 0 ]; then
			fail "ssh cert connect succeeded unexpectedly"
		fi

		# Wrong authorized_principals
		verbose "$tid: ${_prefix} wrong authorized_principals"
		echo gregorsamsa > $OBJ/authorized_principals_$USER
		${SSH} -2i $OBJ/cert_user_key_${ktype} \
		    -F $OBJ/ssh_proxy somehost true >/dev/null 2>&1
		if [ $? -eq 0 ]; then
			fail "ssh cert connect succeeded unexpectedly"
		fi

		# Correct authorized_principals
		verbose "$tid: ${_prefix} correct authorized_principals"
		echo mekmitasdigoat > $OBJ/authorized_principals_$USER
		${SSH} -2i $OBJ/cert_user_key_${ktype} \
		    -F $OBJ/ssh_proxy somehost true >/dev/null 2>&1
		if [ $? -ne 0 ]; then
			fail "ssh cert connect failed"
		fi

		# authorized_principals with bad key option
		verbose "$tid: ${_prefix} authorized_principals bad key opt"
		echo 'blah mekmitasdigoat' > $OBJ/authorized_principals_$USER
		${SSH} -2i $OBJ/cert_user_key_${ktype} \
		    -F $OBJ/ssh_proxy somehost true >/dev/null 2>&1
		if [ $? -eq 0 ]; then
			fail "ssh cert connect succeeded unexpectedly"
		fi

		# authorized_principals with command=false
		verbose "$tid: ${_prefix} authorized_principals command=false"
		echo 'command="false" mekmitasdigoat' > \
		    $OBJ/authorized_principals_$USER
		${SSH} -2i $OBJ/cert_user_key_${ktype} \
		    -F $OBJ/ssh_proxy somehost true >/dev/null 2>&1
		if [ $? -eq 0 ]; then
			fail "ssh cert connect succeeded unexpectedly"
		fi


		# authorized_principals with command=true
		verbose "$tid: ${_prefix} authorized_principals command=true"
		echo 'command="true" mekmitasdigoat' > \
		    $OBJ/authorized_principals_$USER
		${SSH} -2i $OBJ/cert_user_key_${ktype} \
		    -F $OBJ/ssh_proxy somehost false >/dev/null 2>&1
		if [ $? -ne 0 ]; then
			fail "ssh cert connect failed"
		fi

		# Setup for principals= key option
		rm -f $OBJ/authorized_principals_$USER
		(
			cat $OBJ/sshd_proxy_bak
			echo "UsePrivilegeSeparation $privsep"
			echo "PubkeyAcceptedKeyTypes ${t}"
		) > $OBJ/sshd_proxy
		(
			cat $OBJ/ssh_proxy_bak
			echo "PubkeyAcceptedKeyTypes ${t}"
		) > $OBJ/ssh_proxy

		# Wrong principals list
		verbose "$tid: ${_prefix} wrong principals key option"
		(
			printf 'cert-authority,principals="gregorsamsa" '
			cat $OBJ/user_ca_key.pub
		) > $OBJ/authorized_keys_$USER
		${SSH} -2i $OBJ/cert_user_key_${ktype} \
		    -F $OBJ/ssh_proxy somehost true >/dev/null 2>&1
		if [ $? -eq 0 ]; then
			fail "ssh cert connect succeeded unexpectedly"
		fi

		# Correct principals list
		verbose "$tid: ${_prefix} correct principals key option"
		(
			printf 'cert-authority,principals="mekmitasdigoat" '
			cat $OBJ/user_ca_key.pub
		) > $OBJ/authorized_keys_$USER
		${SSH} -2i $OBJ/cert_user_key_${ktype} \
		    -F $OBJ/ssh_proxy somehost true >/dev/null 2>&1
		if [ $? -ne 0 ]; then
			fail "ssh cert connect failed"
		fi
	done
done

basic_tests() {
	auth=$1
	if test "x$auth" = "xauthorized_keys" ; then
		# Add CA to authorized_keys
		(
			printf 'cert-authority '
			cat $OBJ/user_ca_key.pub
		) > $OBJ/authorized_keys_$USER
	else
		echo > $OBJ/authorized_keys_$USER
		extra_sshd="TrustedUserCAKeys $OBJ/user_ca_key.pub"
	fi

	for ktype in $PLAIN_TYPES ; do
		t=$(kname $ktype)
		for privsep in yes no ; do
			_prefix="${ktype} privsep $privsep $auth"
			# Simple connect
			verbose "$tid: ${_prefix} connect"
			(
				cat $OBJ/sshd_proxy_bak
				echo "UsePrivilegeSeparation $privsep"
				echo "PubkeyAcceptedKeyTypes ${t}"
				echo "$extra_sshd"
			) > $OBJ/sshd_proxy
			(
				cat $OBJ/ssh_proxy_bak
				echo "PubkeyAcceptedKeyTypes ${t}"
			) > $OBJ/ssh_proxy

			${SSH} -2i $OBJ/cert_user_key_${ktype} \
			    -F $OBJ/ssh_proxy somehost true
			if [ $? -ne 0 ]; then
				fail "ssh cert connect failed"
			fi

			# Revoked keys
			verbose "$tid: ${_prefix} revoked key"
			(
				cat $OBJ/sshd_proxy_bak
				echo "UsePrivilegeSeparation $privsep"
				echo "RevokedKeys $OBJ/cert_user_key_revoked"
				echo "PubkeyAcceptedKeyTypes ${t}"
				echo "$extra_sshd"
			) > $OBJ/sshd_proxy
			cp $OBJ/cert_user_key_${ktype}.pub \
			    $OBJ/cert_user_key_revoked
			${SSH} -2i $OBJ/cert_user_key_${ktype} \
			    -F $OBJ/ssh_proxy somehost true >/dev/null 2>&1
			if [ $? -eq 0 ]; then
				fail "ssh cert connect succeeded unexpecedly"
			fi
			verbose "$tid: ${_prefix} revoked via KRL"
			rm $OBJ/cert_user_key_revoked
			${SSHKEYGEN} -kqf $OBJ/cert_user_key_revoked \
			    $OBJ/cert_user_key_${ktype}.pub
			${SSH} -2i $OBJ/cert_user_key_${ktype} \
			    -F $OBJ/ssh_proxy somehost true >/dev/null 2>&1
			if [ $? -eq 0 ]; then
				fail "ssh cert connect succeeded unexpecedly"
			fi
			verbose "$tid: ${_prefix} empty KRL"
			${SSHKEYGEN} -kqf $OBJ/cert_user_key_revoked
			${SSH} -2i $OBJ/cert_user_key_${ktype} \
			    -F $OBJ/ssh_proxy somehost true >/dev/null 2>&1
			if [ $? -ne 0 ]; then
				fail "ssh cert connect failed"
			fi
		done

		# Revoked CA
		verbose "$tid: ${ktype} $auth revoked CA key"
		(
			cat $OBJ/sshd_proxy_bak
			echo "RevokedKeys $OBJ/user_ca_key.pub"
			echo "PubkeyAcceptedKeyTypes ${t}"
			echo "$extra_sshd"
		) > $OBJ/sshd_proxy
		${SSH} -2i $OBJ/cert_user_key_${ktype} -F $OBJ/ssh_proxy \
		    somehost true >/dev/null 2>&1
		if [ $? -eq 0 ]; then
			fail "ssh cert connect succeeded unexpecedly"
		fi
	done

	verbose "$tid: $auth CA does not authenticate"
	(
		cat $OBJ/sshd_proxy_bak
		echo "PubkeyAcceptedKeyTypes ${t}"
		echo "$extra_sshd"
	) > $OBJ/sshd_proxy
	verbose "$tid: ensure CA key does not authenticate user"
	${SSH} -2i $OBJ/user_ca_key \
	    -F $OBJ/ssh_proxy somehost true >/dev/null 2>&1
	if [ $? -eq 0 ]; then
		fail "ssh cert connect with CA key succeeded unexpectedly"
	fi
}

basic_tests authorized_keys
basic_tests TrustedUserCAKeys

test_one() {
	ident=$1
	result=$2
	sign_opts=$3
	auth_choice=$4
	auth_opt=$5

	if test "x$auth_choice" = "x" ; then
		auth_choice="authorized_keys TrustedUserCAKeys"
	fi

	for auth in $auth_choice ; do
		for ktype in rsa ed25519 ; do
			cat $OBJ/sshd_proxy_bak > $OBJ/sshd_proxy
			if test "x$auth" = "xauthorized_keys" ; then
				# Add CA to authorized_keys
				(
					printf "cert-authority${auth_opt} "
					cat $OBJ/user_ca_key.pub
				) > $OBJ/authorized_keys_$USER
			else
				echo > $OBJ/authorized_keys_$USER
				echo "TrustedUserCAKeys $OBJ/user_ca_key.pub" \
				    >> $OBJ/sshd_proxy
				echo "PubkeyAcceptedKeyTypes ${t}*" \
				    >> $OBJ/sshd_proxy
				if test "x$auth_opt" != "x" ; then
					echo $auth_opt >> $OBJ/sshd_proxy
				fi
			fi

			verbose "$tid: $ident auth $auth expect $result $ktype"
			${SSHKEYGEN} -q -s $OBJ/user_ca_key \
			    -I "regress user key for $USER" \
			    $sign_opts $OBJ/cert_user_key_${ktype} ||
				fail "couldn't sign cert_user_key_${ktype}"

			${SSH} -2i $OBJ/cert_user_key_${ktype} \
			    -F $OBJ/ssh_proxy somehost true >/dev/null 2>&1
			rc=$?
			if [ "x$result" = "xsuccess" ] ; then
				if [ $rc -ne 0 ]; then
					fail "$ident failed unexpectedly"
				fi
			else
				if [ $rc -eq 0 ]; then
					fail "$ident succeeded unexpectedly"
				fi
			fi
		done
	done
}

test_one "correct principal"	success "-n ${USER}"
test_one "host-certificate"	failure "-n ${USER} -h"
test_one "wrong principals"	failure "-n foo"
test_one "cert not yet valid"	failure "-n ${USER} -V20200101:20300101"
test_one "cert expired"		failure "-n ${USER} -V19800101:19900101"
test_one "cert valid interval"	success "-n ${USER} -V-1w:+2w"
test_one "wrong source-address"	failure "-n ${USER} -Osource-address=10.0.0.0/8"
test_one "force-command"	failure "-n ${USER} -Oforce-command=false"

# Behaviour is different here: TrustedUserCAKeys doesn't allow empty principals
test_one "empty principals"	success "" authorized_keys
test_one "empty principals"	failure "" TrustedUserCAKeys

# Check explicitly-specified principals: an empty principals list in the cert
# should always be refused.

# AuthorizedPrincipalsFile
rm -f $OBJ/authorized_keys_$USER
echo mekmitasdigoat > $OBJ/authorized_principals_$USER
test_one "AuthorizedPrincipalsFile principals" success "-n mekmitasdigoat" \
    TrustedUserCAKeys "AuthorizedPrincipalsFile $OBJ/authorized_principals_%u"
test_one "AuthorizedPrincipalsFile no principals" failure "" \
    TrustedUserCAKeys "AuthorizedPrincipalsFile $OBJ/authorized_principals_%u"

# principals= key option
rm -f $OBJ/authorized_principals_$USER
test_one "principals key option principals" success "-n mekmitasdigoat" \
    authorized_keys ',principals="mekmitasdigoat"'
test_one "principals key option no principals" failure "" \
    authorized_keys ',principals="mekmitasdigoat"'

# command= options vs. force-command in key
test_one "force-command match true" success \
    "-n ${USER} -Oforce-command=true" \
    authorized_keys ',command="true"'
test_one "force-command match true" failure \
    "-n ${USER} -Oforce-command=false" \
    authorized_keys ',command="false"'
test_one "force-command mismatch 1" failure \
    "-n ${USER} -Oforce-command=false" \
    authorized_keys ',command="true"'
test_one "force-command mismatch 2" failure \
    "-n ${USER} -Oforce-command=true" \
    authorized_keys ',command="false"'

# Wrong certificate
cat $OBJ/sshd_proxy_bak > $OBJ/sshd_proxy
for ktype in $PLAIN_TYPES ; do
	t=$(kname $ktype)
	# Self-sign
	${SSHKEYGEN} -q -s $OBJ/cert_user_key_${ktype} -I \
	    "regress user key for $USER" \
	    -n $USER $OBJ/cert_user_key_${ktype} ||
		fatal "couldn't sign cert_user_key_${ktype}"
	verbose "$tid: user ${ktype} connect wrong cert"
	${SSH} -2i $OBJ/cert_user_key_${ktype} -F $OBJ/ssh_proxy \
	    somehost true >/dev/null 2>&1
	if [ $? -eq 0 ]; then
		fail "ssh cert connect $ident succeeded unexpectedly"
	fi
done

rm -f $OBJ/authorized_keys_$USER $OBJ/user_ca_key* $OBJ/cert_user_key*
rm -f $OBJ/authorized_principals_$USER

@


1.16
log
@Use a subshell for constructing key types to work around different sed
behaviours for -portable.
@
text
@d1 1
a1 1
#	$OpenBSD: cert-userkey.sh,v 1.15 2016/05/02 09:52:00 djm Exp $
d356 14
@


1.15
log
@unit and regress tests for SHA256/512; ok markus
@
text
@d1 1
a1 1
#	$OpenBSD: cert-userkey.sh,v 1.14 2015/07/10 06:23:25 markus Exp $
d19 2
a20 1
	*) echo -n $1 | sed 's/^dsa/ssh-dss/;s/^rsa/ssh-rsa/;s/^ed/ssh-ed/' ;;
d22 1
a22 1
	echo "*,ssh-rsa*,ssh-ed25519*"
@


1.14
log
@Adapt tests, now that DSA if off by default; use PubkeyAcceptedKeyTypes
and PubkeyAcceptedKeyTypes to test DSA.
@
text
@d1 1
a1 1
#	$OpenBSD: cert-userkey.sh,v 1.13 2015/07/03 04:39:23 djm Exp $
d12 4
d17 4
a20 1
	echo -n $1 | sed 's/^dsa/ssh-dss/;s/^rsa/ssh-rsa/;s/^ed/ssh-ed/'
d29 1
a29 1
for ktype in $PLAIN_TYPES ; do 
d33 10
a42 4
		fail "ssh-keygen of cert_user_key_${ktype} failed"
	${SSHKEYGEN} -q -s $OBJ/user_ca_key -I "regress user key for $USER" \
	    -z $$ -n ${USER},mekmitasdigoat $OBJ/cert_user_key_${ktype} ||
		fail "couldn't sign cert_user_key_${ktype}"
d46 1
a46 1
for ktype in $PLAIN_TYPES ; do 
d83 1
a83 1
	
d182 2
a183 2
	
	for ktype in $PLAIN_TYPES ; do 
d199 1
a199 1
	
d239 1
a239 1
	
d254 1
a254 1
	
d302 1
a302 1
			
d358 1
a358 1
for ktype in $PLAIN_TYPES ; do 
d364 1
a364 1
		fail "couldn't sign cert_user_key_${ktype}"
@


1.13
log
@legacy v00 certificates are gone; adapt and don't try to test them;
"sure" markus@@ dtucker@@
@
text
@d1 1
a1 1
#	$OpenBSD: cert-userkey.sh,v 1.12 2013/12/06 13:52:46 markus Exp $
d8 1
d12 5
d34 1
d46 1
d48 4
d124 1
d126 4
d171 1
d179 1
d182 4
d199 1
d232 1
d245 1
d283 2
d346 1
@


1.12
log
@test ed25519 support; from djm@@
@
text
@d1 1
a1 1
#	$OpenBSD: cert-userkey.sh,v 1.11 2013/05/17 00:37:40 dtucker Exp $
a10 7
type_has_legacy() {
	case $1 in
		ed25519*|ecdsa*) return 1 ;;
	esac
	return 0
}

a23 8
	type_has_legacy $ktype || continue
	cp $OBJ/cert_user_key_${ktype} $OBJ/cert_user_key_${ktype}_v00
	cp $OBJ/cert_user_key_${ktype}.pub $OBJ/cert_user_key_${ktype}_v00.pub
	verbose "$tid: sign host ${ktype}_v00 cert"
	${SSHKEYGEN} -q -t v00 -s $OBJ/user_ca_key -I \
	    "regress user key for $USER" \
	    -n ${USER},mekmitasdigoat $OBJ/cert_user_key_${ktype}_v00 ||
		fatal "couldn't sign cert_user_key_${ktype}_v00"
d27 1
a27 1
for ktype in $PLAIN_TYPES rsa_v00 dsa_v00 ; do 
d153 1
a153 1
	for ktype in $PLAIN_TYPES rsa_v00 dsa_v00 ; do 
d245 1
a245 6
		for ktype in rsa rsa_v00 ; do
			case $ktype in
			*_v00) keyv="-t v00" ;;
			*) keyv="" ;;
			esac

d265 1
a265 2
			    $sign_opts $keyv \
			    $OBJ/cert_user_key_${ktype} ||
d317 1
a317 5
for ktype in $PLAIN_TYPES rsa_v00 dsa_v00 ; do 
	case $ktype in
	*_v00) args="-t v00" ;;
	*) args="" ;;
	esac
d319 1
a319 1
	${SSHKEYGEN} $args -q -s $OBJ/cert_user_key_${ktype} -I \
@


1.11
log
@replace 'echo -n' with 'printf' since it's more portable
@
text
@d1 1
a1 1
#	$OpenBSD: cert-userkey.sh,v 1.10 2013/01/18 00:45:29 djm Exp $
d9 9
d23 1
a23 1
for ktype in rsa dsa ecdsa ; do 
d31 1
a31 2
	# v00 ecdsa certs do not exist
	test "${ktype}" = "ecdsa" && continue
d34 1
d38 1
a38 1
		fail "couldn't sign cert_user_key_${ktype}_v00"
d42 1
a42 1
for ktype in rsa dsa ecdsa rsa_v00 dsa_v00 ; do 
d168 1
a168 1
	for ktype in rsa dsa ecdsa rsa_v00 dsa_v00 ; do 
d338 1
a338 1
for ktype in rsa dsa ecdsa rsa_v00 dsa_v00 ; do 
@


1.10
log
@Tests for Key Revocation Lists (KRLs)
@
text
@d1 1
a1 1
#	$OpenBSD: cert-userkey.sh,v 1.9 2012/10/19 05:10:42 djm Exp $
d123 1
a123 1
			echo -n 'cert-authority,principals="gregorsamsa" '
d135 1
a135 1
			echo -n 'cert-authority,principals="mekmitasdigoat" '
d151 1
a151 1
			echo -n 'cert-authority '
d261 1
a261 1
					echo -n "cert-authority${auth_opt} "
@


1.9
log
@include a serial number when generating certs
@
text
@d1 1
a1 1
#	$OpenBSD: cert-userkey.sh,v 1.8 2011/05/17 07:13:31 djm Exp $
d181 1
a181 1
				echo "RevokedKeys $OBJ/cert_user_key_${ktype}.pub"
d184 2
d190 16
@


1.8
log
@fatal() if asked to generate a legacy ECDSA cert (these don't exist)
and fix the regress test that was trying to generate them :)
@
text
@d1 1
a1 1
#	$OpenBSD: cert-userkey.sh,v 1.7 2010/08/31 12:24:09 djm Exp $
d19 2
a20 3
	${SSHKEYGEN} -q -s $OBJ/user_ca_key -I \
	    "regress user key for $USER" \
	    -n ${USER},mekmitasdigoat $OBJ/cert_user_key_${ktype} ||
@


1.7
log
@tests for ECDSA certificates
@
text
@d1 1
a1 1
#	$OpenBSD: cert-userkey.sh,v 1.6 2010/06/29 23:59:54 djm Exp $
d24 1
a24 1
	test "{ktype}" = "ecdsa" && continue
@


1.6
log
@regress tests for key options in AuthorizedPrincipals
@
text
@d1 1
a1 1
#	$OpenBSD: cert-userkey.sh,v 1.5 2010/05/07 11:31:26 djm Exp $
d14 1
a14 1
for ktype in rsa dsa ; do 
d23 2
d34 1
a34 1
for ktype in rsa dsa rsa_v00 dsa_v00 ; do 
d160 1
a160 1
	for ktype in rsa dsa rsa_v00 dsa_v00 ; do 
d235 5
d259 1
a259 1
			    $sign_opts \
d312 1
a312 1
for ktype in rsa dsa rsa_v00 dsa_v00 ; do 
@


1.5
log
@regress tests for AuthorizedPrincipalsFile and "principals=" key option.
feedback and ok markus@@
@
text
@d1 1
a1 1
#	$OpenBSD: cert-userkey.sh,v 1.4 2010/04/16 01:58:45 djm Exp $
d78 30
@


1.4
log
@regression tests for v01 certificate format
includes interop tests for v00 certs
@
text
@d1 1
a1 1
#	$OpenBSD: cert-userkey.sh,v 1.3 2010/03/04 10:38:23 djm Exp $
d21 1
a21 1
	    -n $USER $OBJ/cert_user_key_${ktype} ||
d27 1
a27 1
	    -n $USER $OBJ/cert_user_key_${ktype}_v00 ||
d31 84
d195 1
d207 1
a207 1
					echo -n 'cert-authority '
d214 3
a216 1
	
d255 18
d274 1
d294 1
@


1.3
log
@additional regression tests for revoked keys and TrustedUserCAKeys
@
text
@d1 1
a1 1
#	$OpenBSD: cert-userkey.sh,v 1.2 2010/03/03 00:47:23 djm Exp $
d23 6
d44 1
a44 1
	for ktype in rsa dsa ; do 
d117 12
a128 20
		cat $OBJ/sshd_proxy_bak > $OBJ/sshd_proxy
		if test "x$auth" = "xauthorized_keys" ; then
			# Add CA to authorized_keys
			(
				echo -n 'cert-authority '
				cat $OBJ/user_ca_key.pub
			) > $OBJ/authorized_keys_$USER
		else
			echo > $OBJ/authorized_keys_$USER
			echo "TrustedUserCAKeys $OBJ/user_ca_key.pub" >> \
			    $OBJ/sshd_proxy

		fi
		
		verbose "$tid: $ident auth $auth expect $result"
		${SSHKEYGEN} -q -s $OBJ/user_ca_key \
		    -I "regress user key for $USER" \
		    $sign_opts \
		    $OBJ/cert_user_key_rsa ||
			fail "couldn't sign cert_user_key_rsa"
a129 6
		${SSH} -2i $OBJ/cert_user_key_rsa -F $OBJ/ssh_proxy \
		    somehost true >/dev/null 2>&1
		rc=$?
		if [ "x$result" = "xsuccess" ] ; then
			if [ $rc -ne 0 ]; then
				fail "$ident failed unexpectedly"
d131 19
a149 3
		else
			if [ $rc -eq 0 ]; then
				fail "$ident succeeded unexpectedly"
d151 1
a151 1
		fi
d169 5
a173 1
for ktype in rsa dsa ; do 
d175 1
a175 1
	${SSHKEYGEN} -q -s $OBJ/cert_user_key_${ktype} -I \
@


1.2
log
@add an extra test to ensure that authentication with the wrong
certificate fails as it should (and it does)
@
text
@d1 1
a1 1
#	$OpenBSD: cert-userkey.sh,v 1.1 2010/02/26 20:33:21 djm Exp $
d9 1
a9 1
# Create a CA key and add it to authorized_keys
a11 4
(
	echo -n 'cert-authority '
	cat $OBJ/user_ca_key.pub
) > $OBJ/authorized_keys_$USER
d25 13
a37 2
# Basic connect tests
for privsep in yes no ; do
d39 33
a71 1
		verbose "$tid: user ${ktype} cert connect privsep $privsep"
d74 2
a75 1
			echo "UsePrivilegeSeparation $privsep"
a76 1

d78 3
a80 3
		    somehost true
		if [ $? -ne 0 ]; then
			fail "ssh cert connect failed"
d83 13
a95 1
done
d97 2
a98 5
verbose "$tid: ensure CA key does not authenticate user"
${SSH} -2i $OBJ/user_ca_key -F $OBJ/ssh_proxy somehost true >/dev/null 2>&1
if [ $? -eq 0 ]; then
	fail "ssh cert connect with CA key succeeded unexpectedly"
fi
d104 5
a108 2
	
	verbose "$tid: test user cert connect $ident expect $result"
d110 12
a121 4
	${SSHKEYGEN} -q -s $OBJ/user_ca_key -I "regress user key for $USER" \
	    $sign_opts \
	    $OBJ/cert_user_key_rsa ||
		fail "couldn't sign cert_user_key_rsa"
a122 6
	${SSH} -2i $OBJ/cert_user_key_rsa -F $OBJ/ssh_proxy \
	    somehost true >/dev/null 2>&1
	rc=$?
	if [ "x$result" = "xsuccess" ] ; then
		if [ $rc -ne 0 ]; then
			fail "ssh cert connect $ident failed unexpectedly"
d124 19
a142 3
	else
		if [ $rc -eq 0 ]; then
			fail "ssh cert connect $ident succeeded unexpectedly"
d144 1
a144 2
	fi
	cleanup
d147 2
a148 2
test_one "host-certificate"	failure "-h"
test_one "empty principals"	success ""
d150 9
a158 5
test_one "cert not yet valid"	failure "-V20200101:20300101"
test_one "cert expired"		failure "-V19800101:19900101"
test_one "cert valid interval"	success "-V-1w:+2w"
test_one "wrong source-address"	failure "-Osource-address=10.0.0.0/8"
test_one "force-command"	failure "-Oforce-command=false"
d176 1
@


1.1
log
@regression tests for certified keys
@
text
@d1 1
a1 1
#	$OpenBSD$
a26 1

d87 15
@

