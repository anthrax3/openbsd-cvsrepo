head	1.61;
access;
symbols
	OPENBSD_6_2:1.61.0.4
	OPENBSD_6_2_BASE:1.61
	OPENBSD_6_1:1.59.0.4
	OPENBSD_6_1_BASE:1.59
	OPENBSD_6_0:1.53.0.2
	OPENBSD_6_0_BASE:1.53
	OPENBSD_5_9:1.51.0.4
	OPENBSD_5_9_BASE:1.51
	OPENBSD_5_8:1.51.0.6
	OPENBSD_5_8_BASE:1.51
	OPENBSD_5_7:1.51.0.2
	OPENBSD_5_7_BASE:1.51
	OPENBSD_5_6:1.48.0.4
	OPENBSD_5_6_BASE:1.48
	OPENBSD_5_5:1.47.0.4
	OPENBSD_5_5_BASE:1.47
	OPENBSD_5_4:1.46.0.2
	OPENBSD_5_4_BASE:1.46
	OPENBSD_5_3:1.37.0.14
	OPENBSD_5_3_BASE:1.37
	OPENBSD_5_2:1.37.0.12
	OPENBSD_5_2_BASE:1.37
	OPENBSD_5_1_BASE:1.37
	OPENBSD_5_1:1.37.0.10
	OPENBSD_5_0:1.37.0.8
	OPENBSD_5_0_BASE:1.37
	OPENBSD_4_9:1.37.0.6
	OPENBSD_4_9_BASE:1.37
	OPENBSD_4_8:1.37.0.4
	OPENBSD_4_8_BASE:1.37
	OPENBSD_4_7:1.37.0.2
	OPENBSD_4_7_BASE:1.37
	OPENBSD_4_6:1.35.0.8
	OPENBSD_4_6_BASE:1.35
	OPENBSD_4_5:1.35.0.4
	OPENBSD_4_5_BASE:1.35
	OPENBSD_4_4:1.35.0.2
	OPENBSD_4_4_BASE:1.35
	OPENBSD_4_3:1.31.0.2
	OPENBSD_4_3_BASE:1.31
	OPENBSD_4_2:1.28.0.10
	OPENBSD_4_2_BASE:1.28
	OPENBSD_4_1:1.28.0.8
	OPENBSD_4_1_BASE:1.28
	OPENBSD_4_0:1.28.0.6
	OPENBSD_4_0_BASE:1.28
	OPENBSD_3_9:1.28.0.4
	OPENBSD_3_9_BASE:1.28
	OPENBSD_3_8:1.28.0.2
	OPENBSD_3_8_BASE:1.28
	OPENBSD_3_7:1.27.0.2
	OPENBSD_3_7_BASE:1.27
	OPENBSD_3_6:1.23.0.2
	OPENBSD_3_6_BASE:1.23
	OPENBSD_3_5:1.15.0.2
	OPENBSD_3_5_BASE:1.15
	OPENBSD_3_4:1.14.0.6
	OPENBSD_3_4_BASE:1.14
	OPENBSD_3_3:1.14.0.4
	OPENBSD_3_3_BASE:1.14
	OPENBSD_3_2:1.14.0.2
	OPENBSD_3_2_BASE:1.14
	OPENBSD_3_1:1.13.0.2
	OPENBSD_3_1_BASE:1.13;
locks; strict;
comment	@# @;


1.61
date	2017.07.28.10.32.08;	author dtucker;	state Exp;
branches;
next	1.60;
commitid	Mjta430wecZFk78Z;

1.60
date	2017.04.30.23.34.55;	author djm;	state Exp;
branches;
next	1.59;
commitid	gKq3obgPsgFIm4Ff;

1.59
date	2017.02.07.23.03.11;	author dtucker;	state Exp;
branches;
next	1.58;
commitid	Kpj66KulafzxE2Op;

1.58
date	2016.12.16.01.06.27;	author dtucker;	state Exp;
branches;
next	1.57;
commitid	Q8QqRgY9IYItm25a;

1.57
date	2016.11.25.03.02.01;	author dtucker;	state Exp;
branches;
next	1.56;
commitid	Z9mSws7m6PBiJvJt;

1.56
date	2016.11.25.02.56.49;	author dtucker;	state Exp;
branches;
next	1.55;
commitid	GBjpW35Acgyi33yX;

1.55
date	2016.11.25.02.49.18;	author dtucker;	state Exp;
branches;
next	1.54;
commitid	UHbwvD6gA2MHhAwH;

1.54
date	2016.08.23.06.36.23;	author djm;	state Exp;
branches;
next	1.53;
commitid	VCmdV7ITWykS1x6I;

1.53
date	2016.04.15.02.57.10;	author djm;	state Exp;
branches;
next	1.52;
commitid	KE9IhimlY2SuwAVP;

1.52
date	2016.04.14.23.21.42;	author djm;	state Exp;
branches;
next	1.51;
commitid	OIq1rzYfWHbzyYVv;

1.51
date	2015.03.03.22.35.19;	author markus;	state Exp;
branches;
next	1.50;
commitid	m52xwEKWrNr11xhO;

1.50
date	2015.01.18.19.50.15;	author djm;	state Exp;
branches;
next	1.49;
commitid	t9sHQVRRKnN0GJE4;

1.49
date	2015.01.17.18.54.30;	author djm;	state Exp;
branches;
next	1.48;
commitid	KSJNIY0SlrgkI6I4;

1.48
date	2014.07.06.07.42.03;	author djm;	state Exp;
branches;
next	1.47;
commitid	PRBp6lhSh5VPEYWp;

1.47
date	2013.11.09.05.41.34;	author dtucker;	state Exp;
branches;
next	1.46;

1.46
date	2013.06.21.02.26.26;	author djm;	state Exp;
branches;
next	1.45;

1.45
date	2013.05.30.20.12.32;	author dtucker;	state Exp;
branches;
next	1.44;

1.44
date	2013.05.17.10.30.07;	author dtucker;	state Exp;
branches;
next	1.43;

1.43
date	2013.05.17.10.23.52;	author dtucker;	state Exp;
branches;
next	1.42;

1.42
date	2013.05.17.04.29.14;	author dtucker;	state Exp;
branches;
next	1.41;

1.41
date	2013.05.17.00.37.40;	author dtucker;	state Exp;
branches;
next	1.40;

1.40
date	2013.04.07.02.16.03;	author dtucker;	state Exp;
branches;
next	1.39;

1.39
date	2013.04.06.06.00.22;	author dtucker;	state Exp;
branches;
next	1.38;

1.38
date	2013.03.23.11.09.43;	author dtucker;	state Exp;
branches;
next	1.37;

1.37
date	2010.02.24.06.21.56;	author djm;	state Exp;
branches;
next	1.36;

1.36
date	2009.10.08.18.04.27;	author markus;	state Exp;
branches;
next	1.35;

1.35
date	2008.06.28.13.57.25;	author djm;	state Exp;
branches;
next	1.34;

1.34
date	2008.06.10.15.28.49;	author dtucker;	state Exp;
branches;
next	1.33;

1.33
date	2008.06.10.15.21.41;	author dtucker;	state Exp;
branches;
next	1.32;

1.32
date	2008.06.09.18.06.32;	author dtucker;	state Exp;
branches;
next	1.31;

1.31
date	2007.12.21.04.13.53;	author djm;	state Exp;
branches;
next	1.30;

1.30
date	2007.10.26.05.30.01;	author djm;	state Exp;
branches;
next	1.29;

1.29
date	2007.10.24.03.32.35;	author djm;	state Exp;
branches;
next	1.28;

1.28
date	2005.05.20.23.14.15;	author djm;	state Exp;
branches;
next	1.27;

1.27
date	2005.02.27.11.33.30;	author dtucker;	state Exp;
branches;
next	1.26;

1.26
date	2005.01.14.04.21.18;	author david;	state Exp;
branches;
next	1.25;

1.25
date	2004.12.06.10.49.56;	author dtucker;	state Exp;
branches;
next	1.24;

1.24
date	2004.11.25.09.39.27;	author dtucker;	state Exp;
branches;
next	1.23;

1.23
date	2004.06.25.01.25.12;	author djm;	state Exp;
branches;
next	1.22;

1.22
date	2004.06.24.19.32.00;	author djm;	state Exp;
branches;
next	1.21;

1.21
date	2004.06.22.22.55.56;	author dtucker;	state Exp;
branches;
next	1.20;

1.20
date	2004.06.22.22.45.52;	author dtucker;	state Exp;
branches;
next	1.19;

1.19
date	2004.06.13.15.16.54;	author djm;	state Exp;
branches;
next	1.18;

1.18
date	2004.06.13.15.04.08;	author djm;	state Exp;
branches;
next	1.17;

1.17
date	2004.06.13.13.51.02;	author dtucker;	state Exp;
branches;
next	1.16;

1.16
date	2004.04.27.09.47.30;	author djm;	state Exp;
branches;
next	1.15;

1.15
date	2004.02.24.16.56.30;	author markus;	state Exp;
branches;
next	1.14;

1.14
date	2002.04.15.15.19.48;	author markus;	state Exp;
branches;
next	1.13;

1.13
date	2002.03.26.15.14.33;	author markus;	state Exp;
branches;
next	1.12;

1.12
date	2002.03.23.16.38.09;	author markus;	state Exp;
branches;
next	1.11;

1.11
date	2002.03.21.22.27.00;	author markus;	state Exp;
branches;
next	1.10;

1.10
date	2002.03.15.13.08.56;	author markus;	state Exp;
branches;
next	1.9;

1.9
date	2002.02.18.14.30.12;	author markus;	state Exp;
branches;
next	1.8;

1.8
date	2002.02.18.12.52.26;	author markus;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.18.11.40.42;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.18.10.09.20;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.16.01.09.47;	author markus;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.16.00.27.34;	author markus;	state Exp;
branches;
next	1.3;

1.3
date	2002.02.15.14.41.38;	author markus;	state Exp;
branches;
next	1.2;

1.2
date	2002.02.15.00.35.13;	author markus;	state Exp;
branches;
next	1.1;

1.1
date	2002.02.14.23.18.00;	author markus;	state Exp;
branches;
next	;


desc
@@


1.61
log
@Don't call fatal from stop_sshd since it calls cleanup which calls stop_sshd
which will probably fail in the same way.  Instead, just bail.
Differentiate between sshd dying without cleanup and not shutting down.
@
text
@#	$OpenBSD: test-exec.sh,v 1.60 2017/04/30 23:34:55 djm Exp $
#	Placed in the Public Domain.

USER=`id -un`
#SUDO=sudo

if [ ! -z "$TEST_SSH_PORT" ]; then
	PORT="$TEST_SSH_PORT"
else
	PORT=4242
fi

OBJ=$1
if [ "x$OBJ" = "x" ]; then
	echo '$OBJ not defined'
	exit 2
fi
if [ ! -d $OBJ ]; then
	echo "not a directory: $OBJ"
	exit 2
fi
SCRIPT=$2
if [ "x$SCRIPT" = "x" ]; then
	echo '$SCRIPT not defined'
	exit 2
fi
if [ ! -f $SCRIPT ]; then
	echo "not a file: $SCRIPT"
	exit 2
fi
if sh -n $SCRIPT; then
	true
else
	echo "syntax error in $SCRIPT"
	exit 2
fi
unset SSH_AUTH_SOCK

SRC=`dirname ${SCRIPT}`

# defaults
SSH=ssh
SSHD=sshd
SSHAGENT=ssh-agent
SSHADD=ssh-add
SSHKEYGEN=ssh-keygen
SSHKEYSCAN=ssh-keyscan
SFTP=sftp
SFTPSERVER=/usr/libexec/sftp-server
SCP=scp

# Interop testing
PLINK=/usr/local/bin/plink
PUTTYGEN=/usr/local/bin/puttygen
CONCH=/usr/local/bin/conch

if [ "x$TEST_SSH_SSH" != "x" ]; then
	SSH="${TEST_SSH_SSH}"
fi
if [ "x$TEST_SSH_SSHD" != "x" ]; then
	SSHD="${TEST_SSH_SSHD}"
fi
if [ "x$TEST_SSH_SSHAGENT" != "x" ]; then
	SSHAGENT="${TEST_SSH_SSHAGENT}"
fi
if [ "x$TEST_SSH_SSHADD" != "x" ]; then
	SSHADD="${TEST_SSH_SSHADD}"
fi
if [ "x$TEST_SSH_SSHKEYGEN" != "x" ]; then
	SSHKEYGEN="${TEST_SSH_SSHKEYGEN}"
fi
if [ "x$TEST_SSH_SSHKEYSCAN" != "x" ]; then
	SSHKEYSCAN="${TEST_SSH_SSHKEYSCAN}"
fi
if [ "x$TEST_SSH_SFTP" != "x" ]; then
	SFTP="${TEST_SSH_SFTP}"
fi
if [ "x$TEST_SSH_SFTPSERVER" != "x" ]; then
	SFTPSERVER="${TEST_SSH_SFTPSERVER}"
fi
if [ "x$TEST_SSH_SCP" != "x" ]; then
	SCP="${TEST_SSH_SCP}"
fi
if [ "x$TEST_SSH_PLINK" != "x" ]; then
	PLINK="${TEST_SSH_PLINK}"
fi
if [ "x$TEST_SSH_PUTTYGEN" != "x" ]; then
	PUTTYGEN="${TEST_SSH_PUTTYGEN}"
fi
if [ "x$TEST_SSH_CONCH" != "x" ]; then
	CONCH="${TEST_SSH_CONCH}"
fi

# Path to sshd must be absolute for rexec
case "$SSHD" in
/*) ;;
*) SSHD=`which $SSHD` ;;
esac

case "$SSHAGENT" in
/*) ;;
*) SSHAGENT=`which $SSHAGENT` ;;
esac

# Logfiles.
# SSH_LOGFILE should be the debug output of ssh(1) only
# SSHD_LOGFILE should be the debug output of sshd(8) only
# REGRESS_LOGFILE is the output of the test itself stdout and stderr
if [ "x$TEST_SSH_LOGFILE" = "x" ]; then
	TEST_SSH_LOGFILE=$OBJ/ssh.log
fi
if [ "x$TEST_SSHD_LOGFILE" = "x" ]; then
	TEST_SSHD_LOGFILE=$OBJ/sshd.log
fi
if [ "x$TEST_REGRESS_LOGFILE" = "x" ]; then
	TEST_REGRESS_LOGFILE=$OBJ/regress.log
fi

# truncate logfiles
>$TEST_SSH_LOGFILE
>$TEST_SSHD_LOGFILE
>$TEST_REGRESS_LOGFILE

# Create wrapper ssh with logging.  We can't just specify "SSH=ssh -E..."
# because sftp and scp don't handle spaces in arguments.
SSHLOGWRAP=$OBJ/ssh-log-wrapper.sh
echo "#!/bin/sh" > $SSHLOGWRAP
echo "exec ${SSH} -E${TEST_SSH_LOGFILE} "'"$@@"' >>$SSHLOGWRAP

chmod a+rx $OBJ/ssh-log-wrapper.sh
REAL_SSH="$SSH"
SSH="$SSHLOGWRAP"

# Some test data.  We make a copy because some tests will overwrite it.
# The tests may assume that $DATA exists and is writable and $COPY does
# not exist.  Tests requiring larger data files can call increase_datafile_size
# [kbytes] to ensure the file is at least that large.
DATANAME=data
DATA=$OBJ/${DATANAME}
cat ${SSHAGENT} >${DATA}
COPY=$OBJ/copy
rm -f ${COPY}

increase_datafile_size()
{
	while [ `du -k ${DATA} | cut -f1` -lt $1 ]; do
		cat ${SSHAGENT} >>${DATA}
	done
}

# these should be used in tests
export SSH SSHD SSHAGENT SSHADD SSHKEYGEN SSHKEYSCAN SFTP SFTPSERVER SCP
#echo $SSH $SSHD $SSHAGENT $SSHADD $SSHKEYGEN $SSHKEYSCAN $SFTP $SFTPSERVER $SCP

stop_sshd ()
{
	if [ -f $PIDFILE ]; then
		pid=`$SUDO cat $PIDFILE`
		if [ "X$pid" = "X" ]; then
			echo no sshd running
		else
			if [ $pid -lt 2 ]; then
				echo bad pid for sshd: $pid
			else
				$SUDO kill $pid
				trace "wait for sshd to exit"
				i=0;
				while [ -f $PIDFILE -a $i -lt 5 ]; do
					i=`expr $i + 1`
					sleep $i
				done
				if test -f $PIDFILE; then
					if $SUDO kill -0 $pid; then
						echo "sshd didn't exit " \
						    "port $PORT pid $pid"
					else
						echo "sshd died without cleanup"
					fi
					exit 1
				fi
			fi
		fi
	fi
}

# helper
cleanup ()
{
	if [ "x$SSH_PID" != "x" ]; then
		if [ $SSH_PID -lt 2 ]; then
			echo bad pid for ssh: $SSH_PID
		else
			kill $SSH_PID
		fi
	fi
	stop_sshd
}

start_debug_log ()
{
	echo "trace: $@@" >$TEST_REGRESS_LOGFILE
	echo "trace: $@@" >$TEST_SSH_LOGFILE
	echo "trace: $@@" >$TEST_SSHD_LOGFILE
}

save_debug_log ()
{
	echo $@@ >>$TEST_REGRESS_LOGFILE
	echo $@@ >>$TEST_SSH_LOGFILE
	echo $@@ >>$TEST_SSHD_LOGFILE
	(cat $TEST_REGRESS_LOGFILE; echo) >>$OBJ/failed-regress.log
	(cat $TEST_SSH_LOGFILE; echo) >>$OBJ/failed-ssh.log
	(cat $TEST_SSHD_LOGFILE; echo) >>$OBJ/failed-sshd.log
}

trace ()
{
	start_debug_log $@@
	if [ "X$TEST_SSH_TRACE" = "Xyes" ]; then
		echo "$@@"
	fi
}

verbose ()
{
	start_debug_log $@@
	if [ "X$TEST_SSH_QUIET" != "Xyes" ]; then
		echo "$@@"
	fi
}


fail ()
{
	save_debug_log "FAIL: $@@"
	RESULT=1
	echo "$@@"

}

fatal ()
{
	save_debug_log "FATAL: $@@"
	printf "FATAL: "
	fail "$@@"
	cleanup
	exit $RESULT
}

RESULT=0
PIDFILE=$OBJ/pidfile

trap fatal 3 2

# create server config
cat << EOF > $OBJ/sshd_config
	Port			$PORT
	AddressFamily		inet
	ListenAddress		127.0.0.1
	#ListenAddress		::1
	PidFile			$PIDFILE
	AuthorizedKeysFile	$OBJ/authorized_keys_%u
	LogLevel		DEBUG3
	AcceptEnv		_XXX_TEST_*
	AcceptEnv		_XXX_TEST
	Subsystem	sftp	$SFTPSERVER
EOF

# This may be necessary if /usr/src and/or /usr/obj are group-writable,
# but if you aren't careful with permissions then the unit tests could
# be abused to locally escalate privileges.
if [ ! -z "$TEST_SSH_UNSAFE_PERMISSIONS" ]; then
	echo "StrictModes no" >> $OBJ/sshd_config
fi

if [ ! -z "$TEST_SSH_SSHD_CONFOPTS" ]; then
	trace "adding sshd_config option $TEST_SSH_SSHD_CONFOPTS"
	echo "$TEST_SSH_SSHD_CONFOPTS" >> $OBJ/sshd_config
fi

# server config for proxy connects
cp $OBJ/sshd_config $OBJ/sshd_proxy

# allow group-writable directories in proxy-mode
echo 'StrictModes no' >> $OBJ/sshd_proxy

# create client config
cat << EOF > $OBJ/ssh_config
Host *
	Hostname		127.0.0.1
	HostKeyAlias		localhost-with-alias
	Port			$PORT
	User			$USER
	GlobalKnownHostsFile	$OBJ/known_hosts
	UserKnownHostsFile	$OBJ/known_hosts
	PubkeyAuthentication	yes
	ChallengeResponseAuthentication	no
	HostbasedAuthentication	no
	PasswordAuthentication	no
	BatchMode		yes
	StrictHostKeyChecking	yes
	LogLevel		DEBUG3
EOF

if [ ! -z "$TEST_SSH_SSH_CONFOPTS" ]; then
	trace "adding ssh_config option $TEST_SSH_SSH_CONFOPTS"
	echo "$TEST_SSH_SSH_CONFOPTS" >> $OBJ/ssh_config
fi

rm -f $OBJ/known_hosts $OBJ/authorized_keys_$USER

SSH_KEYTYPES="rsa ed25519"

trace "generate keys"
for t in ${SSH_KEYTYPES}; do
	# generate user key
	if [ ! -f $OBJ/$t ] || [ ${SSHKEYGEN} -nt $OBJ/$t ]; then
		rm -f $OBJ/$t
		${SSHKEYGEN} -q -N '' -t $t  -f $OBJ/$t ||\
			fail "ssh-keygen for $t failed"
	fi

	# known hosts file for client
	(
		printf 'localhost-with-alias,127.0.0.1,::1 '
		cat $OBJ/$t.pub
	) >> $OBJ/known_hosts

	# setup authorized keys
	cat $OBJ/$t.pub >> $OBJ/authorized_keys_$USER
	echo IdentityFile $OBJ/$t >> $OBJ/ssh_config

	# use key as host key, too
	$SUDO cp $OBJ/$t $OBJ/host.$t
	echo HostKey $OBJ/host.$t >> $OBJ/sshd_config

	# don't use SUDO for proxy connect
	echo HostKey $OBJ/$t >> $OBJ/sshd_proxy
done
chmod 644 $OBJ/authorized_keys_$USER

# Activate Twisted Conch tests if the binary is present
REGRESS_INTEROP_CONCH=no
if test -x "$CONCH" ; then
	REGRESS_INTEROP_CONCH=yes
fi

# If PuTTY is present and we are running a PuTTY test, prepare keys and
# configuration
REGRESS_INTEROP_PUTTY=no
if test -x "$PUTTYGEN" -a -x "$PLINK" ; then
	REGRESS_INTEROP_PUTTY=yes
fi
case "$SCRIPT" in
*putty*)	;;
*)		REGRESS_INTEROP_PUTTY=no ;;
esac

if test "$REGRESS_INTEROP_PUTTY" = "yes" ; then
	mkdir -p ${OBJ}/.putty

	# Add a PuTTY key to authorized_keys
	rm -f ${OBJ}/putty.rsa2
	if ! puttygen -t rsa -o ${OBJ}/putty.rsa2 \
	    --new-passphrase /dev/null < /dev/null > /dev/null; then
		echo "Your installed version of PuTTY is too old to support --new-passphrase; trying without (may require manual interaction) ..." >&2
		puttygen -t rsa -o ${OBJ}/putty.rsa2 < /dev/null > /dev/null
	fi
	puttygen -O public-openssh ${OBJ}/putty.rsa2 \
	    >> $OBJ/authorized_keys_$USER

	# Convert rsa2 host key to PuTTY format
	${SRC}/ssh2putty.sh 127.0.0.1 $PORT $OBJ/rsa > \
	    ${OBJ}/.putty/sshhostkeys
	${SRC}/ssh2putty.sh 127.0.0.1 22 $OBJ/rsa >> \
	    ${OBJ}/.putty/sshhostkeys

	# Setup proxied session
	mkdir -p ${OBJ}/.putty/sessions
	rm -f ${OBJ}/.putty/sessions/localhost_proxy
	echo "Protocol=ssh" >> ${OBJ}/.putty/sessions/localhost_proxy
	echo "HostName=127.0.0.1" >> ${OBJ}/.putty/sessions/localhost_proxy
	echo "PortNumber=$PORT" >> ${OBJ}/.putty/sessions/localhost_proxy
	echo "ProxyMethod=5" >> ${OBJ}/.putty/sessions/localhost_proxy
	echo "ProxyTelnetCommand=sh ${SRC}/sshd-log-wrapper.sh ${TEST_SSHD_LOGFILE} ${SSHD} -i -f $OBJ/sshd_proxy" >> ${OBJ}/.putty/sessions/localhost_proxy
	echo "ProxyLocalhost=1" >> ${OBJ}/.putty/sessions/localhost_proxy

	REGRESS_INTEROP_PUTTY=yes
fi

# create a proxy version of the client config
(
	cat $OBJ/ssh_config
	echo proxycommand ${SUDO} sh ${SRC}/sshd-log-wrapper.sh ${TEST_SSHD_LOGFILE} ${SSHD} -i -f $OBJ/sshd_proxy
) > $OBJ/ssh_proxy

# check proxy config
${SSHD} -t -f $OBJ/sshd_proxy	|| fatal "sshd_proxy broken"

start_sshd ()
{
	# start sshd
	$SUDO ${SSHD} -f $OBJ/sshd_config "$@@" -t || fatal "sshd_config broken"
	$SUDO ${SSHD} -f $OBJ/sshd_config "$@@" -E$TEST_SSHD_LOGFILE

	trace "wait for sshd"
	i=0;
	while [ ! -f $PIDFILE -a $i -lt 10 ]; do
		i=`expr $i + 1`
		sleep $i
	done

	test -f $PIDFILE || fatal "no sshd running on port $PORT"
}

# source test body
. $SCRIPT

# kill sshd
cleanup
if [ $RESULT -eq 0 ]; then
	verbose ok $tid
else
	echo failed $tid
fi
exit $RESULT
@


1.60
log
@eliminate explicit specification of protocol in tests and loops over
protocol. We only support SSHv2 now.
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.59 2017/02/07 23:03:11 dtucker Exp $
d172 9
a180 2
				test -f $PIDFILE && \
				    fatal "sshd didn't exit port $PORT pid $pid"
@


1.59
log
@Remove deprecated SSH1 options RSAAuthentication and
RhostsRSAAuthentication from regression test sshd_config.
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.58 2016/12/16 01:06:27 dtucker Exp $
a93 6
SSH_PROTOCOLS=2
#SSH_PROTOCOLS=`$SSH -Q protocol-version`
if [ "x$TEST_SSH_PROTOCOLS" != "x" ]; then
	SSH_PROTOCOLS="${TEST_SSH_PROTOCOLS}"
fi

a242 5
ssh_version ()
{
	echo ${SSH_PROTOCOLS} | grep -q "$1"
}

a247 6
if ssh_version 1; then
	PROTO="2,1"
else
	PROTO="2"
fi

d305 2
a306 5
if ssh_version 1; then
	SSH_KEYTYPES="rsa rsa1"
else
	SSH_KEYTYPES="rsa ed25519"
fi
@


1.58
log
@Move the "stop sshd" code into its own helper function.  Patch from
Zev Weiss <zev at bewilderbeest.net>, ok djm@@
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.57 2016/11/25 03:02:01 dtucker Exp $
a305 1
	RSAAuthentication	yes
a309 1
	RhostsRSAAuthentication	no
@


1.57
log
@Allow PuTTY interop tests to run unattended.  bz#2639, patch from
cjwatson at debian.org.
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.56 2016/11/25 02:56:49 dtucker Exp $
d161 1
a161 2
# helper
cleanup ()
a162 7
	if [ "x$SSH_PID" != "x" ]; then
		if [ $SSH_PID -lt 2 ]; then
			echo bad pid for ssh: $SSH_PID
		else
			kill $SSH_PID
		fi
	fi
d183 13
@


1.56
log
@Reverse args to sshd-log-wrapper.  Matches change in portable, where it
allows sshd do be optionally run under Valgrind.
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.55 2016/11/25 02:49:18 dtucker Exp $
d374 5
a378 1
	puttygen -t rsa -o ${OBJ}/putty.rsa2 < /dev/null > /dev/null
d391 2
a392 1
	echo "Hostname=127.0.0.1" >> ${OBJ}/.putty/sessions/localhost_proxy
d396 1
@


1.55
log
@Fix typo in trace message; from portable.
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.54 2016/08/23 06:36:23 djm Exp $
d390 1
a390 1
	echo "ProxyTelnetCommand=sh ${SRC}/sshd-log-wrapper.sh ${SSHD} ${TEST_SSHD_LOGFILE} -i -f $OBJ/sshd_proxy" >> ${OBJ}/.putty/sessions/localhost_proxy
d398 1
a398 1
	echo proxycommand ${SUDO} sh ${SRC}/sshd-log-wrapper.sh ${SSHD} ${TEST_SSHD_LOGFILE} -i -f $OBJ/sshd_proxy
@


1.54
log
@remove Protocol directive from client/server configs that causes
spammy deprecation warnings

hardcode SSH_PROTOCOLS=2, since that's all we support on the server
now (the client still may support both, so it could get confused)
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.53 2016/04/15 02:57:10 djm Exp $
d313 1
a313 1
	trace "adding ssh_config option $TEST_SSH_SSHD_CONFOPTS"
@


1.53
log
@missing bit of Include regress
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.52 2016/04/14 23:21:42 djm Exp $
d94 2
a95 1
SSH_PROTOCOLS=`$SSH -Q protocol-version`
a262 1
	Protocol		$PROTO
a294 1
	Protocol		$PROTO
@


1.52
log
@add test knob and warning for StrictModes
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.51 2015/03/03 22:35:19 markus Exp $
d136 1
@


1.51
log
@make it possible to run tests w/o ssh1 support; ok djm@@
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.50 2015/01/18 19:50:15 djm Exp $
d272 7
@


1.50
log
@didn't mean to commit these changes
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.48 2014/07/06 07:42:03 djm Exp $
d94 5
d242 5
d252 6
d261 1
a261 1
	Protocol		2,1
d287 1
a287 1
	Protocol		2,1
d312 5
d318 1
a318 1
for t in rsa rsa1; do
@


1.49
log
@unit test for hostkeys in ssh-agent
@
text
@a132 13
# Colourise output if we are attached to a tty
if tty >/dev/null 2>&1 ; then
	_R=`tput setaf 8 2>/dev/null`
	_G=`tput setaf 2 2>/dev/null`
	_B=`tput bold 2>/dev/null`
	_N=`tput sgr0 2>/dev/null`
else
	_R=""
	_G=""
	_B=""
	_N=""
fi

d219 1
d224 2
a225 3
	echo "${_B}$@@${_N}"
	cleanup
	exit $RESULT
d231 1
a231 1
	printf "${_B}FATAL: $@@${_N}"
a245 1
	LoginGraceTime		15m
a254 1
	StrictModes		no
d398 1
a398 1
	verbose ${_G}ok $tid${_N}
d400 1
a400 1
	echo ${_R}failed $tid${_N}
@


1.48
log
@add a hook to the cleanup() function to kill $SSH_PID if it is set

use it to kill the mux master started in multiplex.sh (it was being left
around on fatal failures)
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.47 2013/11/09 05:41:34 dtucker Exp $
d133 13
a231 1

d236 3
a238 2
	echo "$@@"

d244 1
a244 1
	printf "FATAL: "
d259 1
d269 1
d413 1
a413 1
	verbose ok $tid
d415 1
a415 1
	echo failed $tid
@


1.47
log
@Use smaller test data files to speed up tests.  Grow test datafiles
where necessary for a specific test.
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.46 2013/06/21 02:26:26 djm Exp $
d157 7
d170 1
a170 1
				echo bad pid for ssh: $pid
@


1.46
log
@unbreak sftp-cmds for renamed test data (s/ls/data/)
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.45 2013/05/30 20:12:32 dtucker Exp $
d97 6
a102 1
*) SSHD=`which sshd` ;;
d135 2
a136 1
# not exist.
d139 1
a139 1
cat ${SSH} ${SSHD} >${DATA}
d142 7
@


1.45
log
@use ssh and sshd as testdata since it needs to be >256k for the rekey test
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.44 2013/05/17 10:30:07 dtucker Exp $
d131 2
a132 1
DATA=$OBJ/data
@


1.44
log
@wait a bit longer for startup and use case for absolute path.  from portable
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.43 2013/05/17 10:23:52 dtucker Exp $
d132 1
a132 2
cp /bin/ls ${DATA}
chmod u+w ${DATA}
@


1.43
log
@Use SUDO when cat'ing pid files and running the sshd log wrapper so that
it works with a restrictive umask and the pid files are not world readable.
Changes from -portable.
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.42 2013/05/17 04:29:14 dtucker Exp $
d95 4
a98 3
if [ ! -x /$SSHD ]; then
	SSHD=`which sshd`
fi
d364 1
a364 1
	while [ ! -f $PIDFILE -a $i -lt 5 ]; do
@


1.42
log
@Move the setting of DATA and COPY into test-exec.sh
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.41 2013/05/17 00:37:40 dtucker Exp $
d144 1
a144 1
		pid=`cat $PIDFILE`
d349 1
a349 1
	echo proxycommand sh ${SRC}/sshd-log-wrapper.sh ${SSHD} ${TEST_SSHD_LOGFILE} -i -f $OBJ/sshd_proxy
@


1.41
log
@replace 'echo -n' with 'printf' since it's more portable
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.40 2013/04/07 02:16:03 dtucker Exp $
d126 9
@


1.40
log
@use -E option for ssh and sshd to write debuging logs to ssh{,d}.log and
save the output from any failing tests.  If a test fails the debug output
from ssh and sshd for the failing tests (and only the failing tests) should
be available in failed-ssh{,d}.log.
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.39 2013/04/06 06:00:22 dtucker Exp $
d201 1
a201 1
	echo -n "FATAL: "
d277 1
a277 1
		echo -n 'localhost-with-alias,127.0.0.1,::1 '
@


1.39
log
@Split the regress log into 3 parts: the debug output from ssh, the debug
log from sshd and the output from the client command (ssh, scp or sftp).
Somewhat functional now, will become more useful when ssh/sshd -E is added.
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.38 2013/03/23 11:09:43 dtucker Exp $
d118 9
d156 17
d175 1
a175 1
	echo "trace: $@@" >>$TEST_REGRESS_LOGFILE
d183 1
a183 1
	echo "verbose: $@@" >>$TEST_REGRESS_LOGFILE
d192 1
a192 1
	echo "FAIL: $@@" >>$TEST_REGRESS_LOGFILE
d195 1
d200 1
a200 1
	echo "FATAL: $@@" >>$TEST_REGRESS_LOGFILE
d221 1
a221 1
	LogLevel		DEBUG
d256 1
d350 1
a350 1
	$SUDO ${SSHD} -f $OBJ/sshd_config -e "$@@" >>$TEST_SSHD_LOGFILE 2>&1
@


1.38
log
@Only regenerate host keys if they don't exist or if ssh-keygen has changed
since they were.  Reduces test runtime by 5-30% depending on machine
speed.
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.37 2010/02/24 06:21:56 djm Exp $
d99 4
d104 1
a104 1
	TEST_SSH_LOGFILE=/dev/null
d106 11
d149 1
a149 1
	echo "trace: $@@" >>$TEST_SSH_LOGFILE
d157 1
a157 1
	echo "verbose: $@@" >>$TEST_SSH_LOGFILE
d166 1
a166 1
	echo "FAIL: $@@" >>$TEST_SSH_LOGFILE
d173 1
a173 1
	echo "FATAL: $@@" >>$TEST_SSH_LOGFILE
d304 1
a304 1
	echo "ProxyTelnetCommand=sh ${SRC}/sshd-log-wrapper.sh ${SSHD} ${TEST_SSH_LOGFILE} -i -f $OBJ/sshd_proxy" >> ${OBJ}/.putty/sessions/localhost_proxy 
d312 1
a312 1
	echo proxycommand sh ${SRC}/sshd-log-wrapper.sh ${SSHD} ${TEST_SSH_LOGFILE} -i -f $OBJ/sshd_proxy
d322 1
a322 1
	$SUDO ${SSHD} -f $OBJ/sshd_config -e "$@@" >>$TEST_SSH_LOGFILE 2>&1
@


1.37
log
@wait for sshd to fully stop in cleanup() function; avoids races in tests
that do multiple start_sshd/cleanup cycles; "I hate pidfiles" deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.36 2009/10/08 18:04:27 markus Exp $
d226 5
a230 3
	rm -f $OBJ/$t
	${SSHKEYGEN} -q -N '' -t $t  -f $OBJ/$t ||\
		fail "ssh-keygen for $t failed"
@


1.36
log
@re-enable protocol v1 for the tests.
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.35 2008/06/28 13:57:25 djm Exp $
d116 1
a116 1
				echo bad pid for ssd: $pid
d119 8
@


1.35
log
@very basic regress test against Twisted Conch in "make interop"
target (conch is available in ports/devel/py-twisted/conch);
ok markus@@
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.34 2008/06/10 15:28:49 dtucker Exp $
d165 1
d191 1
@


1.34
log
@Add quotes
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.33 2008/06/10 15:21:41 dtucker Exp $
d55 1
d90 3
d238 6
@


1.33
log
@Use a more portable construct for checking if we're running a putty test
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.32 2008/06/09 18:06:32 dtucker Exp $
d238 1
a238 1
if test -x $PUTTYGEN -a -x $PLINK ; then
@


1.32
log
@Don't generate putty keys if we're not going to use them.  ok djm
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.31 2007/12/21 04:13:53 djm Exp $
d238 9
a246 1
if test -x $PUTTYGEN -a -x $PLINK && [[ $SCRIPT = *putty* ]] ; then
@


1.31
log
@basic (crypto, kex and transfer) interop regression tests against putty

To run these, install the net/putty port and run "make interop" - the
tests aren't run by default yet.
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.30 2007/10/26 05:30:01 djm Exp $
d235 2
a236 1
# If PuTTY is present, prepare keys and configuration
d238 1
a238 1
if test -x $PUTTYGEN -a -x $PLINK ; then
@


1.30
log
@remove "echo -E" crap that I added in last commit and use printf(1) for
cases where we strictly require echo not to reprocess escape characters.
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.29 2007/10/24 03:32:35 djm Exp $
d52 4
d83 6
d235 28
d275 2
a276 2
	$SUDO ${SSHD} -f $OBJ/sshd_config -t	|| fatal "sshd_config broken"
	$SUDO ${SSHD} -f $OBJ/sshd_config -e >>$TEST_SSH_LOGFILE 2>&1
@


1.29
log
@comprehensive tests for sftp escaping its interaction with globbing;
ok dtucker@@
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.28 2005/05/20 23:14:15 djm Exp $
a5 1
ECHOE="echo -E"
d112 1
a112 1
	$ECHOE "trace: $@@" >>$TEST_SSH_LOGFILE
d114 1
a114 1
		$ECHOE "$@@"
d120 1
a120 1
	$ECHOE "verbose: $@@" >>$TEST_SSH_LOGFILE
d122 1
a122 1
		$ECHOE "$@@"
d129 1
a129 1
	$ECHOE "FAIL: $@@" >>$TEST_SSH_LOGFILE
d131 1
a131 1
	$ECHOE "$@@"
d136 2
a137 2
	$ECHOE "FATAL: $@@" >>$TEST_SSH_LOGFILE
	$ECHOE -n "FATAL: "
@


1.28
log
@force addressfamily=inet for tests, unbreaking dynamic-forward regress for
recently committed nc SOCKS5 changes
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.27 2005/02/27 11:33:30 dtucker Exp $
d6 1
d113 1
a113 1
	echo "trace: $@@" >>$TEST_SSH_LOGFILE
d115 1
a115 1
		echo "$@@"
d121 1
a121 1
	echo "verbose: $@@" >>$TEST_SSH_LOGFILE
d123 1
a123 1
		echo "$@@"
d130 1
a130 1
	echo "FAIL: $@@" >>$TEST_SSH_LOGFILE
d132 1
a132 1
	echo "$@@"
d137 2
a138 2
	echo "FATAL: $@@" >>$TEST_SSH_LOGFILE
	echo -n "FATAL: "
@


1.27
log
@Add optional capability to log output from regress commands; ok markus@@
Use with: make TEST_SSH_LOGFILE=/tmp/regress.log
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.26 2005/01/14 04:21:18 david Exp $
d151 1
@


1.26
log
@pass the SUDO make variable to the individual sh tests; ok dtucker@@ markus@@
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.25 2004/12/06 10:49:56 dtucker Exp $
d39 2
d85 4
d112 1
d120 1
d129 1
d136 1
d155 1
a155 1
	LogLevel		QUIET
d227 1
a227 1
	echo proxycommand ${SSHD} -i -f $OBJ/sshd_proxy
d237 1
a237 1
	$SUDO ${SSHD} -f $OBJ/sshd_config
@


1.25
log
@Check if TEST_SSH_SSHD is a full path to sshd before searching; ok markus@@
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.24 2004/11/25 09:39:27 dtucker Exp $
a4 1
SUDO=
@


1.24
log
@Remove obsolete RhostsAuthentication from test config; ok markus@@
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.23 2004/06/25 01:25:12 djm Exp $
d80 3
a82 1
SSHD=`which sshd`
@


1.23
log
@clean reexec-specific junk out of text-exec.sh and simplify; idea markus@@
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.22 2004/06/24 19:32:00 djm Exp $
a174 1
	RhostsAuthentication	no
@


1.22
log
@regress test for re-exec corner cases
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.21 2004/06/22 22:55:56 dtucker Exp $
a236 21
}

# Start a sshd and then delete it
start_sshd_copy_zap ()
{
	cp ${SSHD} $OBJ/sshd.copy
	SSHD_CPY=`which $OBJ/sshd.copy`

	# start sshd
	$SUDO $SSHD_CPY -f $OBJ/sshd_config -t	|| fatal "sshd_config broken"
	$SUDO $SSHD_CPY -f $OBJ/sshd_config

	trace "wait for sshd"
	i=0;
	while [ ! -f $PIDFILE -a $i -lt 5 ]; do
		i=`expr $i + 1`
		sleep $i
	done

	test -f $PIDFILE || fatal "no sshd running on port $PORT"
	rm -f $OBJ/sshd.copy
@


1.21
log
@Allow setting of port for regress from TEST_SSH_PORT variable; ok markus@@
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.20 2004/06/22 22:45:52 dtucker Exp $
d79 3
d237 21
@


1.20
log
@Add TEST_SSH_SSHD_CONFOPTS and TEST_SSH_SSH_CONFOPTS to allow adding
arbitary options to sshd_config and ssh_config during tests.  ok markus@@
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.19 2004/06/13 15:16:54 djm Exp $
a3 1
PORT=4242
d7 6
@


1.19
log
@remove duplicate setting of $SCP; spotted by markus@@
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.18 2004/06/13 15:04:08 djm Exp $
d142 5
d172 5
@


1.18
log
@regress test for client multiplexing; ok markus@@
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.17 2004/06/13 13:51:02 dtucker Exp $
a37 1
SCP=scp
a50 3
fi
if [ "x$TEST_SSH_SCP" != "x" ]; then
	SCP="${TEST_SSH_SCP}"
@


1.17
log
@Add scp regression test; with & ok markus@@
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.16 2004/04/27 09:47:30 djm Exp $
d38 1
d53 3
d143 1
@


1.16
log
@regress test for environment passing, SendEnv & AcceptEnv options; ok markus@@
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.15 2004/02/24 16:56:30 markus Exp $
d44 1
d70 3
d75 2
a76 2
export SSH SSHD SSHAGENT SSHADD SSHKEYGEN SSHKEYSCAN SFTP SFTPSERVER
#echo $SSH $SSHD $SSHAGENT $SSHADD $SSHKEYGEN $SSHKEYSCAN $SFTP $SFTPSERVER
@


1.15
log
@allow arguments in ${TEST_SSH_XXX}
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.14 2002/04/15 15:19:48 markus Exp $
d133 2
@


1.14
log
@typo
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.13 2002/03/26 15:14:33 markus Exp $
d46 1
a46 1
	SSH=${TEST_SSH_SSH}
d49 1
a49 1
	SSHD=${TEST_SSH_SSHD}
d52 1
a52 1
	SSHAGENT=${TEST_SSH_SSHAGENT}
d55 1
a55 1
	SSHADD=${TEST_SSH_SSHADD}
d58 1
a58 1
	SSHKEYGEN=${TEST_SSH_SSHKEYGEN}
d61 1
a61 1
	SSHKEYSCAN=${TEST_SSH_SSHKEYSCAN}
d64 1
a64 1
	SFTP=${TEST_SSH_SFTP}
d67 1
a67 1
	SFTPSERVER=${TEST_SSH_SFTPSERVER}
@


1.13
log
@test interop w/ ssh.com 2.x/3.x
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.12 2002/03/23 16:38:09 markus Exp $
d67 1
a67 1
	SFTPSERVER=${TEST_SSH_SFTP}
@


1.12
log
@some tests for stderr handling
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.11 2002/03/21 22:27:00 markus Exp $
d161 1
a161 1
rm -f $OBJ/known_hosts
@


1.11
log
@basic sftp put/get test
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.10 2002/03/15 13:08:56 markus Exp $
d160 2
@


1.10
log
@allow specification of binary-under-test with
	$TEST_SSH_{SSH,SSHD,SSHAGENT,SSHADD,SSHKEYGEN,SSHKEYSCAN}
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.9 2002/02/18 14:30:12 markus Exp $
d42 2
d63 6
d71 2
a72 2
export SSH SSHD SSHAGENT SSHADD SSHKEYGEN SSHKEYSCAN
#echo $SSH $SSHD $SSHAGENT $SSHADD $SSHKEYGEN $SSHKEYSCAN
@


1.9
log
@call fatal on ^C, print ok on success
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.8 2002/02/18 12:52:26 markus Exp $
d35 31
a145 1
	KerberosAuthentication	no
d157 2
a158 1
	ssh-keygen -q -N '' -t $t  -f $OBJ/$t || fail "ssh-keygen for $t failed"
d182 1
a182 1
	echo proxycommand sshd -i -f $OBJ/sshd_proxy
d186 1
a186 1
sshd -t -f $OBJ/sshd_proxy	|| fatal "sshd_proxy broken"
d191 2
a192 2
	$SUDO sshd -f $OBJ/sshd_config -t	|| fatal "sshd_config broken"
	$SUDO sshd -f $OBJ/sshd_config
@


1.8
log
@no printf+\r, just use echo
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.7 2002/02/18 11:40:42 markus Exp $
d84 1
a84 1
trap cleanup 3 2
d179 1
a179 1
	trace ok $tid
@


1.7
log
@don't mark tests as slow, have some slow tests print out information by default
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.6 2002/02/18 10:09:20 markus Exp $
d62 1
a62 1
		printf "$@@"
@


1.6
log
@relax restrictions for 'proxy-mode' tests (StrictModes=no), because
sshd only accepts connections from stdin. allows testing with 775 /usr/obj
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.5 2002/02/16 01:09:47 markus Exp $
d54 1
a54 1
	if [ "X$TEST_DEBUG_SSH" = "Xyes" ]; then
d58 8
@


1.5
log
@$OpenBSD$, public domain
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.4 2002/02/16 00:27:34 markus Exp $
d90 3
@


1.4
log
@add some (disabled) tests for interop with ssh.com serves.
@
text
@d1 2
a2 1
#	$OpenBSD: test-exec.sh,v 1.3 2002/02/15 14:41:38 markus Exp $
@


1.3
log
@we don't need a listening sshd for most of our tests, just
connect client and server w/o TCP:
	ssh -o 'proxycommand sshd -i -f $OBJ/sshd_proxy'
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.2 2002/02/15 00:35:13 markus Exp $
d53 1
a53 1
	if [ "X$DEBUG_SSH_TEST" = "Xyes" ]; then
d108 1
@


1.2
log
@chmod 644 authorized_keys
@
text
@d1 1
a1 1
#	$OpenBSD: test-exec.sh,v 1.1 2002/02/14 23:18:00 markus Exp $
d37 12
a48 1
	test -f $PIDFILE && $SUDO kill `cat $PIDFILE`
d53 3
a55 1
	# echo "$@@"
d88 1
a88 1
cp $OBJ/sshd_config $OBJ/sshd_config_proxy
d107 1
d131 1
a131 1
	echo HostKey $OBJ/$t >> $OBJ/sshd_config_proxy
d135 8
a142 10
# start sshd
$SUDO sshd -f $OBJ/sshd_config -t	|| fatal "sshd_config broken"
$SUDO sshd -f $OBJ/sshd_config

trace "wait for sshd"
i=0;
while [ ! -f $PIDFILE -a $i -lt 5 ]; do
	i=`expr $i + 1`
	sleep $i
done
d144 12
a155 1
test -f $PIDFILE			|| fatal "no sshd running on port $PORT"
d157 2
a158 2
# check proxy config
sshd -t -f $OBJ/sshd_config_proxy	|| fail "sshd_config_proxy broken"
@


1.1
log
@serveral tests for ssh-keygen/ssh/sshd/ssh-add/ssh-agent

note that these tests will start sshd on 127.0.0.1:4242
and will fail if the realpath of /usr/src/usr.sbin/ssh/obj/ contains
a group or world writeable directory.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.1 2002/01/17 13:21:28 markus Exp $
d119 1
@

