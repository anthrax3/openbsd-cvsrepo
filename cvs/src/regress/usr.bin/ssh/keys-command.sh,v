head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.2
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.4
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.3.0.6
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.4
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.2.0.6
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.10
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.8
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2;
locks; strict;
comment	@# @;


1.4
date	2016.09.26.21.34.38;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	78ojOtQPiUY00oy2;

1.3
date	2015.05.21.06.40.02;	author djm;	state Exp;
branches;
next	1.2;
commitid	1cUCWxtCLwXKvDUD;

1.2
date	2012.12.06.06.06.54;	author dtucker;	state Exp;
branches;
next	1.1;

1.1
date	2012.11.22.22.49.30;	author djm;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Allow to run ssh regression tests as root.  If the user is already
root, the test should not expect that SUDO is set.  If ssh needs
another user, use sudo or doas to switch from root if necessary.
OK dtucker@@
@
text
@#	$OpenBSD: keys-command.sh,v 1.3 2015/05/21 06:40:02 djm Exp $
#	Placed in the Public Domain.

tid="authorized keys from command"

if [ -z "$SUDO" -a ! -w /var/run ]; then
	fatal "need SUDO to create file in /var/run, test won't work without"
fi

rm -f $OBJ/keys-command-args

touch $OBJ/keys-command-args
chmod a+rw $OBJ/keys-command-args

expected_key_text=`awk '{ print $2 }' < $OBJ/rsa.pub`
expected_key_fp=`$SSHKEYGEN -lf $OBJ/rsa.pub | awk '{ print $2 }'`

# Establish a AuthorizedKeysCommand in /var/run where it will have
# acceptable directory permissions.
KEY_COMMAND="/var/run/keycommand_${LOGNAME}"
cat << _EOF | $SUDO sh -c "rm -f '$KEY_COMMAND' ; cat > '$KEY_COMMAND'"
#!/bin/sh
echo args: "\$@@" >> $OBJ/keys-command-args
echo "$PATH" | grep -q mekmitasdigoat && exit 7
test "x\$1" != "x${LOGNAME}" && exit 1
if test $# -eq 6 ; then
	test "x\$2" != "xblah" && exit 2
	test "x\$3" != "x${expected_key_text}" && exit 3
	test "x\$4" != "xssh-rsa" && exit 4
	test "x\$5" != "x${expected_key_fp}" && exit 5
	test "x\$6" != "xblah" && exit 6
fi
exec cat "$OBJ/authorized_keys_${LOGNAME}"
_EOF
$SUDO chmod 0755 "$KEY_COMMAND"

if [ -x $KEY_COMMAND ]; then
	cp $OBJ/sshd_proxy $OBJ/sshd_proxy.bak

	verbose "AuthorizedKeysCommand with arguments"
	(
		grep -vi AuthorizedKeysFile $OBJ/sshd_proxy.bak
		echo AuthorizedKeysFile none
		echo AuthorizedKeysCommand $KEY_COMMAND %u blah %k %t %f blah
		echo AuthorizedKeysCommandUser ${LOGNAME}
	) > $OBJ/sshd_proxy

	# Ensure that $PATH is sanitised in sshd
	env PATH=$PATH:/sbin/mekmitasdigoat \
	    ${SSH} -F $OBJ/ssh_proxy somehost true
	if [ $? -ne 0 ]; then
		fail "connect failed"
	fi

	verbose "AuthorizedKeysCommand without arguments"
	# Check legacy behavior of no-args resulting in username being passed.
	(
		grep -vi AuthorizedKeysFile $OBJ/sshd_proxy.bak
		echo AuthorizedKeysFile none
		echo AuthorizedKeysCommand $KEY_COMMAND
		echo AuthorizedKeysCommandUser ${LOGNAME}
	) > $OBJ/sshd_proxy

	# Ensure that $PATH is sanitised in sshd
	env PATH=$PATH:/sbin/mekmitasdigoat \
	    ${SSH} -F $OBJ/ssh_proxy somehost true
	if [ $? -ne 0 ]; then
		fail "connect failed"
	fi
else
	echo "SKIPPED: $KEY_COMMAND not executable (/var/run mounted noexec?)"
fi

$SUDO rm -f $KEY_COMMAND
@


1.3
log
@regress test for AuthorizedKeysCommand arguments
@
text
@d1 1
a1 1
#	$OpenBSD: keys-command.sh,v 1.2 2012/12/06 06:06:54 dtucker Exp $
d6 1
a6 1
if [ -z "$SUDO" ]; then
@


1.2
log
@Fix some problems with the keys-command test:
 - use string comparison rather than numeric comparison
 - check for existing KEY_COMMAND file and don't clobber if it exists
 - clean up KEY_COMMAND file if we do create it.
 - check that KEY_COMMAND is executable (which it won't be if eg /var/run
   is mounted noexec).
ok djm.
@
text
@d1 1
a1 1
#	$OpenBSD: keys-command.sh,v 1.1 2012/11/22 22:49:30 djm Exp $
d10 8
d21 1
a21 1
cat << _EOF | $SUDO sh -c "cat > '$KEY_COMMAND'"
d23 2
d26 7
d37 2
a38 7
cp $OBJ/sshd_proxy $OBJ/sshd_proxy.bak
(
	grep -vi AuthorizedKeysFile $OBJ/sshd_proxy.bak
	echo AuthorizedKeysFile none
	echo AuthorizedKeysCommand $KEY_COMMAND
	echo AuthorizedKeysCommandUser ${LOGNAME}
) > $OBJ/sshd_proxy
d40 27
a66 2
if [ -x $KEY_COMMAND ]; then
	${SSH} -F $OBJ/ssh_proxy somehost true
@


1.1
log
@regress for AuthorizedKeysCommand; hints from markus@@
@
text
@d1 1
a1 1
#	$OpenBSD$
d15 1
a15 1
test "x\$1" -ne "x${LOGNAME}" && exit 1
d28 7
a34 3
${SSH} -F $OBJ/ssh_proxy somehost true
if [ $? -ne 0 ]; then
	fail "connect failed"
d36 2
@

