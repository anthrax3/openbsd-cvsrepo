head	1.7;
access;
symbols
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.6.0.10
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.6
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5;
locks; strict;
comment	@# @;


1.7
date	2017.04.30.23.34.55;	author djm;	state Exp;
branches;
next	1.6;
commitid	gKq3obgPsgFIm4Ff;

1.6
date	2015.07.10.06.23.25;	author markus;	state Exp;
branches;
next	1.5;
commitid	77ck9U2QYRgsdGVX;

1.5
date	2015.02.21.20.51.02;	author djm;	state Exp;
branches;
next	1.4;
commitid	2ajwppXw8iE8foLa;

1.4
date	2015.01.27.12.01.36;	author djm;	state Exp;
branches;
next	1.3;
commitid	0gfttXhWhXxuowzA;

1.3
date	2015.01.20.08.02.33;	author djm;	state Exp;
branches;
next	1.2;
commitid	Ruyuc4ofHyfig8fp;

1.2
date	2015.01.19.06.01.32;	author djm;	state Exp;
branches;
next	1.1;
commitid	rZ5upI5gwgXzw8mk;

1.1
date	2015.01.17.18.54.30;	author djm;	state Exp;
branches;
next	;
commitid	KSJNIY0SlrgkI6I4;


desc
@@


1.7
log
@eliminate explicit specification of protocol in tests and loops over
protocol. We only support SSHv2 now.
@
text
@#	$OpenBSD: hostkey-agent.sh,v 1.6 2015/07/10 06:23:25 markus Exp $
#	Placed in the Public Domain.

tid="hostkey agent"

rm -f $OBJ/agent-key.* $OBJ/ssh_proxy.orig $OBJ/known_hosts.orig

trace "start agent"
eval `${SSHAGENT} -s` > /dev/null
r=$?
[ $r -ne 0 ] && fatal "could not start ssh-agent: exit code $r"

grep -vi 'hostkey' $OBJ/sshd_proxy > $OBJ/sshd_proxy.orig
echo "HostKeyAgent $SSH_AUTH_SOCK" >> $OBJ/sshd_proxy.orig

trace "load hostkeys"
for k in `${SSH} -Q key-plain` ; do
	${SSHKEYGEN} -qt $k -f $OBJ/agent-key.$k -N '' || fatal "ssh-keygen $k"
	(
		printf 'localhost-with-alias,127.0.0.1,::1 '
		cat $OBJ/agent-key.$k.pub
	) >> $OBJ/known_hosts.orig
	${SSHADD} $OBJ/agent-key.$k >/dev/null 2>&1 || \
		fatal "couldn't load key $OBJ/agent-key.$k"
	echo "Hostkey $OBJ/agent-key.${k}" >> $OBJ/sshd_proxy.orig
	# Remove private key so the server can't use it.
	rm $OBJ/agent-key.$k || fatal "couldn't rm $OBJ/agent-key.$k"
done
cp $OBJ/known_hosts.orig $OBJ/known_hosts

unset SSH_AUTH_SOCK

for ps in no yes; do
	for k in `${SSH} -Q key-plain` ; do
		verbose "key type $k privsep=$ps"
		cp $OBJ/sshd_proxy.orig $OBJ/sshd_proxy
		echo "UsePrivilegeSeparation $ps" >> $OBJ/sshd_proxy
		echo "HostKeyAlgorithms $k" >> $OBJ/sshd_proxy
		opts="-oHostKeyAlgorithms=$k -F $OBJ/ssh_proxy"
		cp $OBJ/known_hosts.orig $OBJ/known_hosts
		SSH_CONNECTION=`${SSH} $opts host 'echo $SSH_CONNECTION'`
		if [ $? -ne 0 ]; then
			fail "privsep=$ps failed"
		fi
		if [ "$SSH_CONNECTION" != "UNKNOWN 65535 UNKNOWN 65535" ]; then
			fail "bad SSH_CONNECTION key type $k privsep=$ps"
		fi
	done
done

trace "kill agent"
${SSHAGENT} -k > /dev/null

@


1.6
log
@Adapt tests, now that DSA if off by default; use PubkeyAcceptedKeyTypes
and PubkeyAcceptedKeyTypes to test DSA.
@
text
@d1 1
a1 1
#	$OpenBSD: hostkey-agent.sh,v 1.5 2015/02/21 20:51:02 djm Exp $
d43 1
a43 1
			fail "protocol $p privsep=$ps failed"
@


1.5
log
@correct paths to configuration files being written/updated;
they live in $OBJ not cwd; some by Roumen Petrov
@
text
@d1 1
a1 1
#	$OpenBSD: hostkey-agent.sh,v 1.4 2015/01/27 12:01:36 djm Exp $
a33 2
	cp $OBJ/sshd_proxy.orig $OBJ/sshd_proxy
	echo "UsePrivilegeSeparation $ps" >> $OBJ/sshd_proxy
d36 3
@


1.4
log
@use printf instead of echo -n to reduce diff against -portable
@
text
@d1 1
a1 1
#	$OpenBSD: hostkey-agent.sh,v 1.3 2015/01/20 08:02:33 djm Exp $
d25 1
a25 1
	echo "Hostkey $OBJ/agent-key.${k}" >> sshd_proxy.orig
@


1.3
log
@this test would accidentally delete agent.sh if run without obj/
@
text
@d1 1
a1 1
#	$OpenBSD: hostkey-agent.sh,v 1.2 2015/01/19 06:01:32 djm Exp $
d20 1
a20 1
		echo -n 'localhost-with-alias,127.0.0.1,::1 '
@


1.2
log
@be a bit more careful in these tests to ensure that
known_hosts is clean
@
text
@d1 1
a1 1
#	$OpenBSD: hostkey-agent.sh,v 1.1 2015/01/17 18:54:30 djm Exp $
d6 1
a6 1
rm -f $OBJ/agent.* $OBJ/ssh_proxy.orig $OBJ/known_hosts.orig
d18 1
a18 1
	${SSHKEYGEN} -qt $k -f $OBJ/agent.$k -N '' || fatal "ssh-keygen $k"
d21 1
a21 1
		cat $OBJ/agent.$k.pub
d23 3
a25 3
	${SSHADD} $OBJ/agent.$k >/dev/null 2>&1 || \
		fatal "couldn't load key $OBJ/agent.$k"
	echo "Hostkey $OBJ/agent.${k}" >> sshd_proxy.orig
d27 1
a27 1
	rm $OBJ/agent.$k || fatal "couldn't rm $OBJ/agent.$k"
@


1.1
log
@unit test for hostkeys in ssh-agent
@
text
@d1 1
a1 1
#	$OpenBSD$
d6 1
a6 4
# Need full names here since they are used in HostKeyAlgorithms
HOSTKEY_TYPES="ecdsa-sha2-nistp256 ssh-ed25519 ssh-rsa ssh-dss"

rm -f $OBJ/agent.* $OBJ/ssh_proxy.orig
a14 2
echo "LogLevel debug3" >> $OBJ/sshd_proxy.orig
rm $OBJ/known_hosts
d17 1
a17 1
for k in $HOSTKEY_TYPES ; do
d22 1
a22 1
	) >> $OBJ/known_hosts
d29 1
d36 1
a36 1
	for k in $HOSTKEY_TYPES ; do
d39 1
@

