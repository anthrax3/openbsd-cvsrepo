head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.4
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.3.0.12
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.8
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.4
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.2.0.28
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.26
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.22
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.20
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.18
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.16
	OPENBSD_5_0:1.2.0.14
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.12
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.10
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.6
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.8
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2;
locks; strict;
comment	@# @;


1.4
date	2017.04.30.23.34.55;	author djm;	state Exp;
branches;
next	1.3;
commitid	gKq3obgPsgFIm4Ff;

1.3
date	2015.03.03.22.35.19;	author markus;	state Exp;
branches;
next	1.2;
commitid	m52xwEKWrNr11xhO;

1.2
date	2008.06.30.08.07.34;	author djm;	state Exp;
branches;
next	1.1;

1.1
date	2008.06.10.23.13.43;	author dtucker;	state Exp;
branches;
next	;


desc
@@


1.4
log
@eliminate explicit specification of protocol in tests and loops over
protocol. We only support SSHv2 now.
@
text
@#	$OpenBSD: key-options.sh,v 1.3 2015/03/03 22:35:19 markus Exp $
#	Placed in the Public Domain.

tid="key options"

origkeys="$OBJ/authkeys_orig"
authkeys="$OBJ/authorized_keys_${USER}"
cp $authkeys $origkeys

# Test command= forced command
for c in 'command="echo bar"' 'no-pty,command="echo bar"'; do
	sed "s/.*/$c &/" $origkeys >$authkeys
	verbose "key option $c"
	r=`${SSH} -q -F $OBJ/ssh_proxy somehost echo foo`
	if [ "$r" = "foo" ]; then
		fail "key option forced command not restricted"
	fi
	if [ "$r" != "bar" ]; then
		fail "key option forced command not executed"
	fi
done

# Test no-pty
sed 's/.*/no-pty &/' $origkeys >$authkeys
verbose "key option proto no-pty"
r=`${SSH} -q -F $OBJ/ssh_proxy somehost tty`
if [ -f "$r" ]; then
	fail "key option failed no-pty (pty $r)"
fi

# Test environment=
echo 'PermitUserEnvironment yes' >> $OBJ/sshd_proxy
sed 's/.*/environment="FOO=bar" &/' $origkeys >$authkeys
verbose "key option environment"
r=`${SSH} -q -F $OBJ/ssh_proxy somehost 'echo $FOO'`
if [ "$r" != "bar" ]; then
	fail "key option environment not set"
fi

# Test from= restriction
start_sshd
for f in 127.0.0.1 '127.0.0.0\/8'; do
	cat  $origkeys >$authkeys
	${SSH} -q -F $OBJ/ssh_proxy somehost true
	if [ $? -ne 0 ]; then
		fail "key option failed without restriction"
	fi

	sed 's/.*/from="'"$f"'" &/' $origkeys >$authkeys
	from=`head -1 $authkeys | cut -f1 -d ' '`
	verbose "key option $from"
	r=`${SSH} -q -F $OBJ/ssh_proxy somehost 'echo true'`
	if [ "$r" = "true" ]; then
		fail "key option $from not restricted"
	fi

	r=`${SSH} -q -F $OBJ/ssh_config somehost 'echo true'`
	if [ "$r" != "true" ]; then
		fail "key option $from not allowed but should be"
	fi
done

rm -f "$origkeys"
@


1.3
log
@make it possible to run tests w/o ssh1 support; ok djm@@
@
text
@d1 1
a1 1
#	$OpenBSD: key-options.sh,v 1.2 2008/06/30 08:07:34 djm Exp $
d11 1
a11 2
for p in ${SSH_PROTOCOLS}; do
    for c in 'command="echo bar"' 'no-pty,command="echo bar"'; do
d13 2
a14 2
	verbose "key option proto $p $c"
	r=`${SSH} -$p -q -F $OBJ/ssh_proxy somehost echo foo`
a20 1
    done
d25 5
a29 7
for p in ${SSH_PROTOCOLS}; do
	verbose "key option proto $p no-pty"
	r=`${SSH} -$p -q -F $OBJ/ssh_proxy somehost tty`
	if [ -f "$r" ]; then
		fail "key option failed proto $p no-pty (pty $r)"
	fi
done
d34 5
a38 7
for p in ${SSH_PROTOCOLS}; do
	verbose "key option proto $p environment"
	r=`${SSH} -$p -q -F $OBJ/ssh_proxy somehost 'echo $FOO'`
	if [ "$r" != "bar" ]; then
		fail "key option environment not set"
	fi
done
d42 1
a42 2
for p in ${SSH_PROTOCOLS}; do
    for f in 127.0.0.1 '127.0.0.0\/8'; do
d44 1
a44 1
	${SSH} -$p -q -F $OBJ/ssh_proxy somehost true
d46 1
a46 1
		fail "key option proto $p failed without restriction"
d51 2
a52 2
	verbose "key option proto $p $from"
	r=`${SSH} -$p -q -F $OBJ/ssh_proxy somehost 'echo true'`
d54 1
a54 1
		fail "key option proto $p $from not restricted"
d57 1
a57 1
	r=`${SSH} -$p -q -F $OBJ/ssh_config somehost 'echo true'`
d59 1
a59 1
		fail "key option proto $p $from not allowed but should be"
a60 1
    done
@


1.2
log
@shell portability: use "=" instead of "==" in test(1) expressions,
double-quote string with backslash escaped /
@
text
@d1 1
a1 1
#	$OpenBSD: key-options.sh,v 1.1 2008/06/10 23:13:43 dtucker Exp $
d11 1
a11 1
for p in 1 2; do
d27 1
a27 1
for p in 1 2; do
d38 1
a38 1
for p in 1 2; do
d48 1
a48 1
for p in 1 2; do
@


1.1
log
@Add regress test for key options.  ok djm@@
@
text
@d1 1
a1 1
#	$OpenBSD$
d56 1
a56 1
	sed 's/.*/from="'$f'" &/' $origkeys >$authkeys
d60 1
a60 1
	if [ "$r" == "true" ]; then
@

