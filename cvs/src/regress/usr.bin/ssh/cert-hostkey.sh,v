head	1.14;
access;
symbols
	OPENBSD_6_1:1.14.0.4
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.14.0.2
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.4
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.9.0.6
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.4
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.6.0.8
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.6
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.4
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.4.0.2
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3;
locks; strict;
comment	@# @;


1.14
date	2016.05.02.09.52.00;	author djm;	state Exp;
branches;
next	1.13;
commitid	0m5tVoJOU30lUWTB;

1.13
date	2015.07.10.06.23.25;	author markus;	state Exp;
branches;
next	1.12;
commitid	77ck9U2QYRgsdGVX;

1.12
date	2015.07.03.04.39.23;	author djm;	state Exp;
branches;
next	1.11;
commitid	QhSmdQrRbvDNFqW5;

1.11
date	2015.01.19.06.01.32;	author djm;	state Exp;
branches;
next	1.10;
commitid	rZ5upI5gwgXzw8mk;

1.10
date	2014.12.04.22.31.50;	author djm;	state Exp;
branches;
next	1.9;
commitid	oxUss7NKYP0zzQwk;

1.9
date	2014.01.26.10.22.10;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2013.12.06.13.52.46;	author markus;	state Exp;
branches;
next	1.7;

1.7
date	2013.05.17.00.37.40;	author dtucker;	state Exp;
branches;
next	1.6;

1.6
date	2011.05.20.02.43.36;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2010.08.31.12.24.09;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2010.04.16.01.58.45;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2010.03.04.10.38.23;	author djm;	state Exp;
branches;
next	1.2;

1.2
date	2010.03.03.00.47.23;	author djm;	state Exp;
branches;
next	1.1;

1.1
date	2010.02.26.20.33.21;	author djm;	state Exp;
branches;
next	;


desc
@@


1.14
log
@unit and regress tests for SHA256/512; ok markus
@
text
@#	$OpenBSD: cert-hostkey.sh,v 1.13 2015/07/10 06:23:25 markus Exp $
#	Placed in the Public Domain.

tid="certified host keys"

rm -f $OBJ/known_hosts-cert* $OBJ/host_ca_key* $OBJ/host_revoked_*
rm -f $OBJ/cert_host_key* $OBJ/host_krl_*

# Allow all hostkey/pubkey types, prefer certs for the client
types=""
for i in `$SSH -Q key`; do
	if [ -z "$types" ]; then
		types="$i"
		continue
	fi
	case "$i" in
	*cert*)	types="$i,$types";;
	*)	types="$types,$i";;
	esac
done
(
	echo "HostKeyAlgorithms ${types}"
	echo "PubkeyAcceptedKeyTypes *"
) >> $OBJ/ssh_proxy
cp $OBJ/sshd_proxy $OBJ/sshd_proxy_bak
(
	echo "HostKeyAlgorithms *"
	echo "PubkeyAcceptedKeyTypes *"
) >> $OBJ/sshd_proxy_bak

HOSTS='localhost-with-alias,127.0.0.1,::1'

kh_ca() {
	for k in "$@@" ; do
		printf "@@cert-authority $HOSTS "
		cat $OBJ/$k || fatal "couldn't cat $k"
	done
}
kh_revoke() {
	for k in "$@@" ; do
		printf "@@revoked * "
		cat $OBJ/$k || fatal "couldn't cat $k"
	done
}

# Create a CA key and add it to known hosts. Ed25519 chosen for speed.
# RSA for testing RSA/SHA2 signatures.
${SSHKEYGEN} -q -N '' -t ed25519  -f $OBJ/host_ca_key ||\
	fail "ssh-keygen of host_ca_key failed"
${SSHKEYGEN} -q -N '' -t rsa  -f $OBJ/host_ca_key2 ||\
	fail "ssh-keygen of host_ca_key failed"

kh_ca host_ca_key.pub host_ca_key2.pub > $OBJ/known_hosts-cert.orig
cp $OBJ/known_hosts-cert.orig $OBJ/known_hosts-cert

# Plain text revocation files
touch $OBJ/host_revoked_empty
touch $OBJ/host_revoked_plain
touch $OBJ/host_revoked_cert
cat $OBJ/host_ca_key.pub $OBJ/host_ca_key2.pub > $OBJ/host_revoked_ca

PLAIN_TYPES=`$SSH -Q key-plain | sed 's/^ssh-dss/ssh-dsa/g;s/^ssh-//'`

if echo "$PLAIN_TYPES" | grep '^rsa$' >/dev/null 2>&1 ; then
	PLAIN_TYPES="$PLAIN_TYPES rsa-sha2-256 rsa-sha2-512"
fi

# Prepare certificate, plain key and CA KRLs
${SSHKEYGEN} -kf $OBJ/host_krl_empty || fatal "KRL init failed"
${SSHKEYGEN} -kf $OBJ/host_krl_plain || fatal "KRL init failed"
${SSHKEYGEN} -kf $OBJ/host_krl_cert || fatal "KRL init failed"
${SSHKEYGEN} -kf $OBJ/host_krl_ca $OBJ/host_ca_key.pub $OBJ/host_ca_key2.pub \
	|| fatal "KRL init failed"

# Generate and sign host keys
serial=1
for ktype in $PLAIN_TYPES ; do
	verbose "$tid: sign host ${ktype} cert"
	# Generate and sign a host key
	${SSHKEYGEN} -q -N '' -t ${ktype} \
	    -f $OBJ/cert_host_key_${ktype} || \
		fatal "ssh-keygen of cert_host_key_${ktype} failed"
	${SSHKEYGEN} -ukf $OBJ/host_krl_plain \
	    $OBJ/cert_host_key_${ktype}.pub || fatal "KRL update failed"
	cat $OBJ/cert_host_key_${ktype}.pub >> $OBJ/host_revoked_plain
	case $ktype in
	rsa-sha2-*)	tflag="-t $ktype"; ca="$OBJ/host_ca_key2" ;;
	*)		tflag=""; ca="$OBJ/host_ca_key" ;;
	esac
	${SSHKEYGEN} -h -q -s $ca -z $serial $tflag \
	    -I "regress host key for $USER" \
	    -n $HOSTS $OBJ/cert_host_key_${ktype} ||
		fatal "couldn't sign cert_host_key_${ktype}"
	${SSHKEYGEN} -ukf $OBJ/host_krl_cert \
	    $OBJ/cert_host_key_${ktype}-cert.pub || \
		fatal "KRL update failed"
	cat $OBJ/cert_host_key_${ktype}-cert.pub >> $OBJ/host_revoked_cert
	serial=`expr $serial + 1`
done

attempt_connect() {
	_ident="$1"
	_expect_success="$2"
	shift; shift
	verbose "$tid: $_ident expect success $_expect_success"
	cp $OBJ/known_hosts-cert.orig $OBJ/known_hosts-cert
	${SSH} -2 -oUserKnownHostsFile=$OBJ/known_hosts-cert \
	    -oGlobalKnownHostsFile=$OBJ/known_hosts-cert \
	    "$@@" -F $OBJ/ssh_proxy somehost true
	_r=$?
	if [ "x$_expect_success" = "xyes" ] ; then
		if [ $_r -ne 0 ]; then
			fail "ssh cert connect $_ident failed"
		fi
	else
		if [ $_r -eq 0 ]; then
			fail "ssh cert connect $_ident succeeded unexpectedly"
		fi
	fi
}

# Basic connect and revocation tests.
for privsep in yes no ; do
	for ktype in $PLAIN_TYPES ; do
		verbose "$tid: host ${ktype} cert connect privsep $privsep"
		(
			cat $OBJ/sshd_proxy_bak
			echo HostKey $OBJ/cert_host_key_${ktype}
			echo HostCertificate $OBJ/cert_host_key_${ktype}-cert.pub
			echo UsePrivilegeSeparation $privsep
		) > $OBJ/sshd_proxy

		#               test name                         expect success
		attempt_connect "$ktype basic connect"			"yes"
		attempt_connect "$ktype empty KRL"			"yes" \
		    -oRevokedHostKeys=$OBJ/host_krl_empty
		attempt_connect "$ktype KRL w/ plain key revoked"	"no" \
		    -oRevokedHostKeys=$OBJ/host_krl_plain
		attempt_connect "$ktype KRL w/ cert revoked"		"no" \
		    -oRevokedHostKeys=$OBJ/host_krl_cert
		attempt_connect "$ktype KRL w/ CA revoked"		"no" \
		    -oRevokedHostKeys=$OBJ/host_krl_ca
		attempt_connect "$ktype empty plaintext revocation"	"yes" \
		    -oRevokedHostKeys=$OBJ/host_revoked_empty
		attempt_connect "$ktype plain key plaintext revocation"	"no" \
		    -oRevokedHostKeys=$OBJ/host_revoked_plain
		attempt_connect "$ktype cert plaintext revocation"	"no" \
		    -oRevokedHostKeys=$OBJ/host_revoked_cert
		attempt_connect "$ktype CA plaintext revocation"	"no" \
		    -oRevokedHostKeys=$OBJ/host_revoked_ca
	done
done

# Revoked certificates with key present
kh_ca host_ca_key.pub host_ca_key2.pub > $OBJ/known_hosts-cert.orig
for ktype in $PLAIN_TYPES ; do
	test -f "$OBJ/cert_host_key_${ktype}.pub" || fatal "no pubkey"
	kh_revoke cert_host_key_${ktype}.pub >> $OBJ/known_hosts-cert.orig
done
cp $OBJ/known_hosts-cert.orig $OBJ/known_hosts-cert
for privsep in yes no ; do
	for ktype in $PLAIN_TYPES ; do
		verbose "$tid: host ${ktype} revoked cert privsep $privsep"
		(
			cat $OBJ/sshd_proxy_bak
			echo HostKey $OBJ/cert_host_key_${ktype}
			echo HostCertificate $OBJ/cert_host_key_${ktype}-cert.pub
			echo UsePrivilegeSeparation $privsep
		) > $OBJ/sshd_proxy

		cp $OBJ/known_hosts-cert.orig $OBJ/known_hosts-cert
		${SSH} -2 -oUserKnownHostsFile=$OBJ/known_hosts-cert \
		    -oGlobalKnownHostsFile=$OBJ/known_hosts-cert \
			-F $OBJ/ssh_proxy somehost true >/dev/null 2>&1
		if [ $? -eq 0 ]; then
			fail "ssh cert connect succeeded unexpectedly"
		fi
	done
done

# Revoked CA
kh_ca host_ca_key.pub host_ca_key2.pub > $OBJ/known_hosts-cert.orig
kh_revoke host_ca_key.pub host_ca_key2.pub >> $OBJ/known_hosts-cert.orig
cp $OBJ/known_hosts-cert.orig $OBJ/known_hosts-cert
for ktype in $PLAIN_TYPES ; do
	verbose "$tid: host ${ktype} revoked cert"
	(
		cat $OBJ/sshd_proxy_bak
		echo HostKey $OBJ/cert_host_key_${ktype}
		echo HostCertificate $OBJ/cert_host_key_${ktype}-cert.pub
	) > $OBJ/sshd_proxy
	cp $OBJ/known_hosts-cert.orig $OBJ/known_hosts-cert
	${SSH} -2 -oUserKnownHostsFile=$OBJ/known_hosts-cert \
	    -oGlobalKnownHostsFile=$OBJ/known_hosts-cert \
		-F $OBJ/ssh_proxy somehost true >/dev/null 2>&1
	if [ $? -eq 0 ]; then
		fail "ssh cert connect succeeded unexpectedly"
	fi
done

# Create a CA key and add it to known hosts
kh_ca host_ca_key.pub host_ca_key2.pub > $OBJ/known_hosts-cert.orig
cp $OBJ/known_hosts-cert.orig $OBJ/known_hosts-cert

test_one() {
	ident=$1
	result=$2
	sign_opts=$3

	for kt in rsa ed25519 ; do
		case $ktype in
		rsa-sha2-*)	tflag="-t $ktype"; ca="$OBJ/host_ca_key2" ;;
		*)		tflag=""; ca="$OBJ/host_ca_key" ;;
		esac
		${SSHKEYGEN} -q -s $ca $tflag -I "regress host key for $USER" \
		    $sign_opts $OBJ/cert_host_key_${kt} ||
			fatal "couldn't sign cert_host_key_${kt}"
		(
			cat $OBJ/sshd_proxy_bak
			echo HostKey $OBJ/cert_host_key_${kt}
			echo HostCertificate $OBJ/cert_host_key_${kt}-cert.pub
		) > $OBJ/sshd_proxy

		cp $OBJ/known_hosts-cert.orig $OBJ/known_hosts-cert
		${SSH} -2 -oUserKnownHostsFile=$OBJ/known_hosts-cert \
		    -oGlobalKnownHostsFile=$OBJ/known_hosts-cert \
		    -F $OBJ/ssh_proxy somehost true >/dev/null 2>&1
		rc=$?
		if [ "x$result" = "xsuccess" ] ; then
			if [ $rc -ne 0 ]; then
				fail "ssh cert connect $ident failed unexpectedly"
			fi
		else
			if [ $rc -eq 0 ]; then
				fail "ssh cert connect $ident succeeded unexpectedly"
			fi
		fi
	done
}

test_one "user-certificate"	failure "-n $HOSTS"
test_one "empty principals"	success "-h"
test_one "wrong principals"	failure "-h -n foo"
test_one "cert not yet valid"	failure "-h -V20200101:20300101"
test_one "cert expired"		failure "-h -V19800101:19900101"
test_one "cert valid interval"	success "-h -V-1w:+2w"
test_one "cert has constraints"	failure "-h -Oforce-command=false"

# Check downgrade of cert to raw key when no CA found
for ktype in $PLAIN_TYPES ; do
	rm -f $OBJ/known_hosts-cert $OBJ/cert_host_key*
	verbose "$tid: host ${ktype} ${v} cert downgrade to raw key"
	# Generate and sign a host key
	${SSHKEYGEN} -q -N '' -t ${ktype} -f $OBJ/cert_host_key_${ktype} || \
		fail "ssh-keygen of cert_host_key_${ktype} failed"
	case $ktype in
	rsa-sha2-*)	tflag="-t $ktype"; ca="$OBJ/host_ca_key2" ;;
	*)		tflag=""; ca="$OBJ/host_ca_key" ;;
	esac
	${SSHKEYGEN} -h -q $tflag -s $ca $tflag \
	    -I "regress host key for $USER" \
	    -n $HOSTS $OBJ/cert_host_key_${ktype} ||
		fatal "couldn't sign cert_host_key_${ktype}"
	(
		printf "$HOSTS "
		cat $OBJ/cert_host_key_${ktype}.pub
	) > $OBJ/known_hosts-cert
	(
		cat $OBJ/sshd_proxy_bak
		echo HostKey $OBJ/cert_host_key_${ktype}
		echo HostCertificate $OBJ/cert_host_key_${ktype}-cert.pub
	) > $OBJ/sshd_proxy

	${SSH} -2 -oUserKnownHostsFile=$OBJ/known_hosts-cert \
	    -oGlobalKnownHostsFile=$OBJ/known_hosts-cert \
		-F $OBJ/ssh_proxy somehost true
	if [ $? -ne 0 ]; then
		fail "ssh cert connect failed"
	fi
done

# Wrong certificate
kh_ca host_ca_key.pub host_ca_key2.pub > $OBJ/known_hosts-cert.orig
cp $OBJ/known_hosts-cert.orig $OBJ/known_hosts-cert
for kt in $PLAIN_TYPES ; do
	verbose "$tid: host ${kt} connect wrong cert"
	rm -f $OBJ/cert_host_key*
	# Self-sign key
	${SSHKEYGEN} -q -N '' -t ${kt} -f $OBJ/cert_host_key_${kt} || \
		fail "ssh-keygen of cert_host_key_${kt} failed"
	case $kt in
	rsa-sha2-*)	tflag="-t $kt" ;;
	*)		tflag="" ;;
	esac
	${SSHKEYGEN} $tflag -h -q -s $OBJ/cert_host_key_${kt} \
	    -I "regress host key for $USER" \
	    -n $HOSTS $OBJ/cert_host_key_${kt} ||
		fatal "couldn't sign cert_host_key_${kt}"
	(
		cat $OBJ/sshd_proxy_bak
		echo HostKey $OBJ/cert_host_key_${kt}
		echo HostCertificate $OBJ/cert_host_key_${kt}-cert.pub
	) > $OBJ/sshd_proxy

	cp $OBJ/known_hosts-cert.orig $OBJ/known_hosts-cert
	${SSH} -2 -oUserKnownHostsFile=$OBJ/known_hosts-cert \
	    -oGlobalKnownHostsFile=$OBJ/known_hosts-cert \
		-F $OBJ/ssh_proxy -q somehost true >/dev/null 2>&1
	if [ $? -eq 0 ]; then
		fail "ssh cert connect $ident succeeded unexpectedly"
	fi
done

rm -f $OBJ/known_hosts-cert* $OBJ/host_ca_key* $OBJ/cert_host_key*
@


1.13
log
@Adapt tests, now that DSA if off by default; use PubkeyAcceptedKeyTypes
and PubkeyAcceptedKeyTypes to test DSA.
@
text
@d1 1
a1 1
#	$OpenBSD: cert-hostkey.sh,v 1.12 2015/07/03 04:39:23 djm Exp $
d33 15
a47 1
# Create a CA key and add it to known hosts. Ed25519 chosed for speed.
d50 4
a53 5
(
	printf '@@cert-authority '
	printf "$HOSTS "
	cat $OBJ/host_ca_key.pub
) > $OBJ/known_hosts-cert.orig
d60 1
a60 1
cp $OBJ/host_ca_key.pub $OBJ/host_revoked_ca
d64 4
d72 1
a72 1
${SSHKEYGEN} -kf $OBJ/host_krl_ca $OBJ/host_ca_key.pub \
d77 1
a77 1
for ktype in $PLAIN_TYPES ; do 
d86 5
a90 1
	${SSHKEYGEN} -h -q -s $OBJ/host_ca_key -z $serial \
d124 1
a124 1
	for ktype in $PLAIN_TYPES ; do 
d155 5
a159 9
(
	printf '@@cert-authority '
	printf "$HOSTS "
	cat $OBJ/host_ca_key.pub
	for ktype in $PLAIN_TYPES ; do
		test -f "$OBJ/cert_host_key_${ktype}.pub" || fatal "no pubkey"
		printf "@@revoked * `cat $OBJ/cert_host_key_${ktype}.pub`\n"
	done
) > $OBJ/known_hosts-cert.orig
d162 1
a162 1
	for ktype in $PLAIN_TYPES ; do 
d182 2
a183 8
(
	printf '@@cert-authority '
	printf "$HOSTS "
	cat $OBJ/host_ca_key.pub
	printf '@@revoked '
	printf "* "
	cat $OBJ/host_ca_key.pub
) > $OBJ/known_hosts-cert.orig
d185 1
a185 1
for ktype in $PLAIN_TYPES ; do 
d202 1
a202 5
(
	printf '@@cert-authority '
	printf "$HOSTS "
	cat $OBJ/host_ca_key.pub
) > $OBJ/known_hosts-cert.orig
d211 5
a215 2
		${SSHKEYGEN} -q -s $OBJ/host_ca_key \
		    -I "regress host key for $USER" \
d217 1
a217 1
			fail "couldn't sign cert_host_key_${kt}"
d223 1
a223 1
	
d250 1
a250 1
for ktype in $PLAIN_TYPES ; do 
d254 1
a254 2
	${SSHKEYGEN} -q -N '' -t ${ktype} \
	    -f $OBJ/cert_host_key_${ktype} || \
d256 5
a260 1
	${SSHKEYGEN} -t ${v} -h -q -s $OBJ/host_ca_key \
d263 1
a263 1
		fail "couldn't sign cert_host_key_${ktype}"
d273 1
a273 1
	
d283 1
a283 5
(
	printf '@@cert-authority '
	printf "$HOSTS "
	cat $OBJ/host_ca_key.pub
) > $OBJ/known_hosts-cert.orig
d285 2
a286 1
for kt in $PLAIN_TYPES ; do 
d289 1
a289 2
	${SSHKEYGEN} -q -N '' -t ${kt} \
	    -f $OBJ/cert_host_key_${kt} || \
d291 5
a295 1
	${SSHKEYGEN} -t ${v} -h -q -s $OBJ/cert_host_key_${kt} \
d298 1
a298 2
		fail "couldn't sign cert_host_key_${kt}"
	verbose "$tid: host ${kt} connect wrong cert"
@


1.12
log
@legacy v00 certificates are gone; adapt and don't try to test them;
"sure" markus@@ dtucker@@
@
text
@d1 1
a1 1
#	$OpenBSD: cert-hostkey.sh,v 1.11 2015/01/19 06:01:32 djm Exp $
d8 17
d26 4
@


1.11
log
@be a bit more careful in these tests to ensure that
known_hosts is clean
@
text
@d1 1
a1 1
#	$OpenBSD: cert-hostkey.sh,v 1.10 2014/12/04 22:31:50 djm Exp $
a29 7
type_has_legacy() {
	case $1 in
		ed25519*|ecdsa*) return 1 ;;
	esac
	return 0
}

a56 12
	type_has_legacy $ktype || continue
	cp $OBJ/cert_host_key_${ktype} $OBJ/cert_host_key_${ktype}_v00
	cp $OBJ/cert_host_key_${ktype}.pub $OBJ/cert_host_key_${ktype}_v00.pub
	verbose "$tid: sign host ${ktype}_v00 cert"
	${SSHKEYGEN} -t v00 -h -q -s $OBJ/host_ca_key \
	    -I "regress host key for $USER" \
	    -n $HOSTS $OBJ/cert_host_key_${ktype}_v00 ||
		fatal "couldn't sign cert_host_key_${ktype}_v00"
	${SSHKEYGEN} -ukf $OBJ/host_krl_cert \
	    $OBJ/cert_host_key_${ktype}_v00-cert.pub || \
		fatal "KRL update failed"
	cat $OBJ/cert_host_key_${ktype}_v00-cert.pub >> $OBJ/host_revoked_cert
d82 1
a82 1
	for ktype in $PLAIN_TYPES rsa_v00 dsa_v00; do 
d117 1
a117 1
	for ktype in $PLAIN_TYPES rsa_v00 dsa_v00; do
d124 1
a124 1
	for ktype in $PLAIN_TYPES rsa_v00 dsa_v00; do 
d153 1
a153 1
for ktype in $PLAIN_TYPES rsa_v00 dsa_v00 ; do 
d182 1
a182 7
	for kt in rsa rsa_v00 ; do
		case $kt in
		*_v00) args="-t v00" ;;
		*) args="" ;;
		esac

		verbose "$tid: host cert connect $ident $kt expect $result"
d185 1
a185 2
		    $sign_opts $args \
		    $OBJ/cert_host_key_${kt} ||
d219 27
a245 30
for v in v01 v00 ;  do 
	for ktype in $PLAIN_TYPES ; do 
		type_has_legacy $ktype || continue
		rm -f $OBJ/known_hosts-cert $OBJ/cert_host_key*
		verbose "$tid: host ${ktype} ${v} cert downgrade to raw key"
		# Generate and sign a host key
		${SSHKEYGEN} -q -N '' -t ${ktype} \
		    -f $OBJ/cert_host_key_${ktype} || \
			fail "ssh-keygen of cert_host_key_${ktype} failed"
		${SSHKEYGEN} -t ${v} -h -q -s $OBJ/host_ca_key \
		    -I "regress host key for $USER" \
		    -n $HOSTS $OBJ/cert_host_key_${ktype} ||
			fail "couldn't sign cert_host_key_${ktype}"
		(
			printf "$HOSTS "
			cat $OBJ/cert_host_key_${ktype}.pub
		) > $OBJ/known_hosts-cert
		(
			cat $OBJ/sshd_proxy_bak
			echo HostKey $OBJ/cert_host_key_${ktype}
			echo HostCertificate $OBJ/cert_host_key_${ktype}-cert.pub
		) > $OBJ/sshd_proxy
		
		${SSH} -2 -oUserKnownHostsFile=$OBJ/known_hosts-cert \
		    -oGlobalKnownHostsFile=$OBJ/known_hosts-cert \
			-F $OBJ/ssh_proxy somehost true
		if [ $? -ne 0 ]; then
			fail "ssh cert connect failed"
		fi
	done
d255 24
a278 27
for v in v01 v00 ;  do 
	for kt in $PLAIN_TYPES ; do 
		type_has_legacy $kt || continue
		rm -f $OBJ/cert_host_key*
		# Self-sign key
		${SSHKEYGEN} -q -N '' -t ${kt} \
		    -f $OBJ/cert_host_key_${kt} || \
			fail "ssh-keygen of cert_host_key_${kt} failed"
		${SSHKEYGEN} -t ${v} -h -q -s $OBJ/cert_host_key_${kt} \
		    -I "regress host key for $USER" \
		    -n $HOSTS $OBJ/cert_host_key_${kt} ||
			fail "couldn't sign cert_host_key_${kt}"
		verbose "$tid: host ${kt} connect wrong cert"
		(
			cat $OBJ/sshd_proxy_bak
			echo HostKey $OBJ/cert_host_key_${kt}
			echo HostCertificate $OBJ/cert_host_key_${kt}-cert.pub
		) > $OBJ/sshd_proxy
	
		cp $OBJ/known_hosts-cert.orig $OBJ/known_hosts-cert
		${SSH} -2 -oUserKnownHostsFile=$OBJ/known_hosts-cert \
		    -oGlobalKnownHostsFile=$OBJ/known_hosts-cert \
			-F $OBJ/ssh_proxy -q somehost true >/dev/null 2>&1
		if [ $? -eq 0 ]; then
			fail "ssh cert connect $ident succeeded unexpectedly"
		fi
	done
@


1.10
log
@add tests for new client RevokedHostKeys option;
refactor to make it a bit more readable
@
text
@d1 1
a1 1
#	$OpenBSD: cert-hostkey.sh,v 1.9 2014/01/26 10:22:10 djm Exp $
d6 1
a6 1
rm -f $OBJ/known_hosts-cert $OBJ/host_ca_key* $OBJ/host_revoked_*
d19 2
a20 1
) > $OBJ/known_hosts-cert
d83 1
d140 2
a141 1
) > $OBJ/known_hosts-cert
d152 1
d170 2
a171 1
) > $OBJ/known_hosts-cert
d179 1
d193 2
a194 1
) > $OBJ/known_hosts-cert
d219 1
d282 2
a283 1
) > $OBJ/known_hosts-cert
d303 1
d313 1
a313 1
rm -f $OBJ/known_hosts-cert $OBJ/host_ca_key* $OBJ/cert_host_key*
@


1.9
log
@automatically generate revoked keys from listed keys rather than
manually specifying each type; from portable
@
text
@d1 1
a1 1
#	$OpenBSD: cert-hostkey.sh,v 1.8 2013/12/06 13:52:46 markus Exp $
d6 2
a7 1
rm -f $OBJ/known_hosts-cert $OBJ/host_ca_key* $OBJ/cert_host_key*
d12 2
a13 2
# Create a CA key and add it to known hosts
${SSHKEYGEN} -q -N '' -t rsa  -f $OBJ/host_ca_key ||\
d21 6
d36 7
d44 1
d50 5
a54 2
		fail "ssh-keygen of cert_host_key_${ktype} failed"
	${SSHKEYGEN} -h -q -s $OBJ/host_ca_key \
d57 6
a62 1
		fail "couldn't sign cert_host_key_${ktype}"
d70 5
a74 1
		fail "couldn't sign cert_host_key_${ktype}_v00"
d77 21
a97 1
# Basic connect tests
d108 18
a125 6
		${SSH} -2 -oUserKnownHostsFile=$OBJ/known_hosts-cert \
		    -oGlobalKnownHostsFile=$OBJ/known_hosts-cert \
			-F $OBJ/ssh_proxy somehost true
		if [ $? -ne 0 ]; then
			fail "ssh cert connect failed"
		fi
@


1.8
log
@test ed25519 support; from djm@@
@
text
@d1 1
a1 1
#	$OpenBSD: cert-hostkey.sh,v 1.7 2013/05/17 00:37:40 dtucker Exp $
d75 4
a78 24
	printf '@@revoked '
	printf "* "
	cat $OBJ/cert_host_key_rsa.pub
	printf '@@revoked '
	printf "* "
	cat $OBJ/cert_host_key_ecdsa-sha2-nistp256.pub
	printf '@@revoked '
	printf "* "
	cat $OBJ/cert_host_key_ecdsa-sha2-nistp384.pub
	printf '@@revoked '
	printf "* "
	cat $OBJ/cert_host_key_ecdsa-sha2-nistp521.pub
	printf '@@revoked '
	printf "* "
	cat $OBJ/cert_host_key_ed25519.pub
	printf '@@revoked '
	printf "* "
	cat $OBJ/cert_host_key_dsa.pub
	printf '@@revoked '
	printf "* "
	cat $OBJ/cert_host_key_rsa_v00.pub
	printf '@@revoked '
	printf "* "
	cat $OBJ/cert_host_key_dsa_v00.pub
@


1.7
log
@replace 'echo -n' with 'printf' since it's more portable
@
text
@d1 1
a1 1
#	$OpenBSD: cert-hostkey.sh,v 1.6 2011/05/20 02:43:36 djm Exp $
d20 9
d30 1
a30 1
for ktype in rsa dsa ecdsa ; do 
d40 1
a40 2
	# v00 ecdsa certs do not exist
	test "${ktype}" = "ecdsa" && continue
d43 1
d52 1
a52 1
	for ktype in rsa dsa ecdsa rsa_v00 dsa_v00; do 
d80 10
a89 1
	cat $OBJ/cert_host_key_ecdsa.pub
d101 1
a101 1
	for ktype in rsa dsa ecdsa rsa_v00 dsa_v00; do 
d128 1
a128 1
for ktype in rsa dsa ecdsa rsa_v00 dsa_v00 ; do 
d199 2
a200 3
	for ktype in rsa dsa ecdsa ; do 
		# v00 ecdsa certs do not exist.
		test "${v}${ktype}" = "v00ecdsa" && continue
d237 2
a238 3
	for kt in rsa dsa ecdsa ; do 
		# v00 ecdsa certs do not exist.
		test "${v}${ktype}" = "v00ecdsa" && continue
@


1.6
log
@another attempt to generate a v00 ECDSA key that broke the test
@
text
@d1 1
a1 1
#	$OpenBSD: cert-hostkey.sh,v 1.5 2010/08/31 12:24:09 djm Exp $
d15 2
a16 2
	echo -n '@@cert-authority '
	echo -n "$HOSTS "
d63 2
a64 2
	echo -n '@@cert-authority '
	echo -n "$HOSTS "
d66 2
a67 2
	echo -n '@@revoked '
	echo -n "* "
d69 2
a70 2
	echo -n '@@revoked '
	echo -n "* "
d72 2
a73 2
	echo -n '@@revoked '
	echo -n "* "
d75 2
a76 2
	echo -n '@@revoked '
	echo -n "* "
d78 2
a79 2
	echo -n '@@revoked '
	echo -n "* "
d103 2
a104 2
	echo -n '@@cert-authority '
	echo -n "$HOSTS "
d106 2
a107 2
	echo -n '@@revoked '
	echo -n "* "
d127 2
a128 2
	echo -n '@@cert-authority '
	echo -n "$HOSTS "
d195 1
a195 1
			echo -n "$HOSTS "
d215 2
a216 2
	echo -n '@@cert-authority '
	echo -n "$HOSTS "
@


1.5
log
@tests for ECDSA certificates
@
text
@d1 1
a1 1
#	$OpenBSD: cert-hostkey.sh,v 1.4 2010/04/16 01:58:45 djm Exp $
d32 1
a32 1
	test "{ktype}" = "ecdsa" && continue
@


1.4
log
@regression tests for v01 certificate format
includes interop tests for v00 certs
@
text
@d1 1
a1 1
#	$OpenBSD: cert-hostkey.sh,v 1.3 2010/03/04 10:38:23 djm Exp $
d21 1
a21 1
for ktype in rsa dsa ; do 
d31 2
d43 1
a43 1
	for ktype in rsa dsa rsa_v00 dsa_v00; do 
d71 3
d83 1
a83 1
	for ktype in rsa dsa rsa_v00 dsa_v00; do 
d110 1
a110 1
for ktype in rsa dsa rsa_v00 dsa_v00 ; do 
d181 3
a183 1
	for ktype in rsa dsa ; do 
d220 3
a222 1
	for kt in rsa dsa ; do 
@


1.3
log
@additional regression tests for revoked keys and TrustedUserCAKeys
@
text
@d1 1
a1 1
#	$OpenBSD: cert-hostkey.sh,v 1.2 2010/03/03 00:47:23 djm Exp $
d31 6
d41 1
a41 1
	for ktype in rsa dsa ; do 
d70 6
d78 1
a78 1
	for ktype in rsa dsa ; do 
d105 1
a105 1
for ktype in rsa dsa ; do 
d131 18
d150 12
a161 19
	verbose "$tid: test host cert connect $ident expect $result"

	${SSHKEYGEN} -q -s $OBJ/host_ca_key -I "regress host key for $USER" \
	    $sign_opts \
	    $OBJ/cert_host_key_rsa ||
		fail "couldn't sign cert_host_key_rsa"
	(
		cat $OBJ/sshd_proxy_bak
		echo HostKey $OBJ/cert_host_key_rsa
		echo HostCertificate $OBJ/cert_host_key_rsa-cert.pub
	) > $OBJ/sshd_proxy

	${SSH} -2 -oUserKnownHostsFile=$OBJ/known_hosts-cert \
	    -oGlobalKnownHostsFile=$OBJ/known_hosts-cert \
	    -F $OBJ/ssh_proxy somehost true >/dev/null 2>&1
	rc=$?
	if [ "x$result" = "xsuccess" ] ; then
		if [ $rc -ne 0 ]; then
			fail "ssh cert connect $ident failed unexpectedly"
d163 1
a163 5
	else
		if [ $rc -eq 0 ]; then
			fail "ssh cert connect $ident succeeded unexpectedly"
		fi
	fi
d175 29
a203 26
rm -f $OBJ/known_hosts-cert $OBJ/cert_host_key*
for ktype in rsa dsa ; do 
	verbose "$tid: host ${ktype} cert downgrade to raw key"
	# Generate and sign a host key
	${SSHKEYGEN} -q -N '' -t ${ktype} \
	    -f $OBJ/cert_host_key_${ktype} || \
		fail "ssh-keygen of cert_host_key_${ktype} failed"
	${SSHKEYGEN} -h -q -s $OBJ/host_ca_key -I "regress host key for $USER" \
	    -n $HOSTS $OBJ/cert_host_key_${ktype} ||
		fail "couldn't sign cert_host_key_${ktype}"
	(
		echo -n "$HOSTS "
		cat $OBJ/cert_host_key_${ktype}.pub
	) > $OBJ/known_hosts-cert
	(
		cat $OBJ/sshd_proxy_bak
		echo HostKey $OBJ/cert_host_key_${ktype}
		echo HostCertificate $OBJ/cert_host_key_${ktype}-cert.pub
	) > $OBJ/sshd_proxy
	
	${SSH} -2 -oUserKnownHostsFile=$OBJ/known_hosts-cert \
	    -oGlobalKnownHostsFile=$OBJ/known_hosts-cert \
		-F $OBJ/ssh_proxy somehost true
	if [ $? -ne 0 ]; then
		fail "ssh cert connect failed"
	fi
d212 25
a236 19
for ktype in rsa dsa ; do 
	# Self-sign key
	${SSHKEYGEN} -h -q -s $OBJ/cert_host_key_${ktype} \
	    -I "regress host key for $USER" \
	    -n $HOSTS $OBJ/cert_host_key_${ktype} ||
		fail "couldn't sign cert_host_key_${ktype}"
	verbose "$tid: host ${ktype} connect wrong cert"
	(
		cat $OBJ/sshd_proxy_bak
		echo HostKey $OBJ/cert_host_key_${ktype}
		echo HostCertificate $OBJ/cert_host_key_${ktype}-cert.pub
	) > $OBJ/sshd_proxy

	${SSH} -2 -oUserKnownHostsFile=$OBJ/known_hosts-cert \
	    -oGlobalKnownHostsFile=$OBJ/known_hosts-cert \
		-F $OBJ/ssh_proxy -q somehost true >/dev/null 2>&1
	if [ $? -eq 0 ]; then
		fail "ssh cert connect $ident succeeded unexpectedly"
	fi
@


1.2
log
@add an extra test to ensure that authentication with the wrong
certificate fails as it should (and it does)
@
text
@d1 1
a1 1
#	$OpenBSD: cert-hostkey.sh,v 1.1 2010/02/26 20:33:21 djm Exp $
d52 62
@


1.1
log
@regression tests for certified keys
@
text
@d1 1
a1 1
#	$OpenBSD$
d119 27
@

