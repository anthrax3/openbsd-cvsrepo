head	1.11;
access;
symbols
	OPENBSD_6_2_BASE:1.11
	OPENBSD_6_1:1.9.0.8
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.4
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.8.0.6
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.7.0.4
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.6.0.6
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.5.0.42
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.40
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.38
	OPENBSD_5_0:1.5.0.36
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.34
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.32
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.28
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.30
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.26
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.24
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.22
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.20
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.18
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.16
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.14
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.12
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.10
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.8
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.6
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.4
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4;
locks; strict;
comment	@# @;


1.11
date	2017.09.26.22.39.25;	author dtucker;	state Exp;
branches;
next	1.10;
commitid	oyKElsGr5qukSusy;

1.10
date	2017.04.30.23.34.55;	author djm;	state Exp;
branches;
next	1.9;
commitid	gKq3obgPsgFIm4Ff;

1.9
date	2016.02.17.02.24.17;	author djm;	state Exp;
branches;
next	1.8;
commitid	0fIUPrkITixgIuYb;

1.8
date	2015.03.03.22.35.19;	author markus;	state Exp;
branches;
next	1.7;
commitid	m52xwEKWrNr11xhO;

1.7
date	2014.05.03.18.46.14;	author dtucker;	state Exp;
branches;
next	1.6;

1.6
date	2013.03.07.00.20.34;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2002.12.09.15.28.46;	author markus;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.15.13.08.56;	author markus;	state Exp;
branches;
next	1.3;

1.3
date	2002.02.16.01.09.47;	author markus;	state Exp;
branches;
next	1.2;

1.2
date	2002.02.15.14.41.38;	author markus;	state Exp;
branches;
next	1.1;

1.1
date	2002.02.14.23.18.00;	author markus;	state Exp;
branches;
next	;


desc
@@


1.11
log
@UsePrivilegeSeparation is gone, stop trying to test it.
@
text
@#	$OpenBSD: proxy-connect.sh,v 1.10 2017/04/30 23:34:55 djm Exp $
#	Placed in the Public Domain.

tid="proxy connect"

for c in no yes; do
	verbose "plain username comp=$c"
	opts="-oCompression=$c -F $OBJ/ssh_proxy"
	SSH_CONNECTION=`${SSH} $opts 999.999.999.999 'echo $SSH_CONNECTION'`
	if [ $? -ne 0 ]; then
		fail "ssh proxyconnect comp=$c failed"
	fi
	if [ "$SSH_CONNECTION" != "UNKNOWN 65535 UNKNOWN 65535" ]; then
		fail "bad SSH_CONNECTION comp=$c: " \
		    "$SSH_CONNECTION"
	fi
done

verbose "username with style"
${SSH} -F $OBJ/ssh_proxy ${USER}:style@@999.999.999.999 true || \
	fail "ssh proxyconnect failed"
@


1.10
log
@eliminate explicit specification of protocol in tests and loops over
protocol. We only support SSHv2 now.
@
text
@d1 1
a1 1
#	$OpenBSD: proxy-connect.sh,v 1.9 2016/02/17 02:24:17 djm Exp $
d6 11
a16 17
mv $OBJ/sshd_proxy $OBJ/sshd_proxy.orig

for ps in no yes; do
	cp $OBJ/sshd_proxy.orig $OBJ/sshd_proxy
	echo "UsePrivilegeSeparation $ps" >> $OBJ/sshd_proxy
	for c in no yes; do
		verbose "plain username privsep=$ps comp=$c"
		opts="-oCompression=$c -F $OBJ/ssh_proxy"
		SSH_CONNECTION=`${SSH} $opts 999.999.999.999 'echo $SSH_CONNECTION'`
		if [ $? -ne 0 ]; then
			fail "ssh proxyconnect privsep=$ps comp=$c failed"
		fi
		if [ "$SSH_CONNECTION" != "UNKNOWN 65535 UNKNOWN 65535" ]; then
			fail "bad SSH_CONNECTION privsep=$ps comp=$c: " \
			    "$SSH_CONNECTION"
		fi
	done
@


1.9
log
@include bad $SSH_CONNECTION in failure output
@
text
@d1 1
a1 1
#	$OpenBSD: proxy-connect.sh,v 1.8 2015/03/03 22:35:19 markus Exp $
d9 14
a22 17
  cp $OBJ/sshd_proxy.orig $OBJ/sshd_proxy
  echo "UsePrivilegeSeparation $ps" >> $OBJ/sshd_proxy

  for p in ${SSH_PROTOCOLS}; do
    for c in no yes; do
	verbose "plain username protocol $p privsep=$ps comp=$c"
	opts="-$p -oCompression=$c -F $OBJ/ssh_proxy"
	SSH_CONNECTION=`${SSH} $opts 999.999.999.999 'echo $SSH_CONNECTION'`
	if [ $? -ne 0 ]; then
		fail "ssh proxyconnect protocol $p privsep=$ps comp=$c failed"
	fi
	if [ "$SSH_CONNECTION" != "UNKNOWN 65535 UNKNOWN 65535" ]; then
		fail "bad SSH_CONNECTION protocol $p privsep=$ps comp=$c: " \
		    "$SSH_CONNECTION"
	fi
    done
  done
d25 3
a27 5
for p in ${SSH_PROTOCOLS}; do
	verbose "username with style protocol $p"
	${SSH} -$p -F $OBJ/ssh_proxy ${USER}:style@@999.999.999.999 true || \
		fail "ssh proxyconnect protocol $p failed"
done
@


1.8
log
@make it possible to run tests w/o ssh1 support; ok djm@@
@
text
@d1 1
a1 1
#	$OpenBSD: proxy-connect.sh,v 1.7 2014/05/03 18:46:14 dtucker Exp $
d21 2
a22 1
		fail "bad SSH_CONNECTION protocol $p privsep=$ps comp=$c"
@


1.7
log
@Add tests for with and without compression, with and without privsep.
@
text
@d1 1
a1 1
#	$OpenBSD: proxy-connect.sh,v 1.6 2013/03/07 00:20:34 djm Exp $
d12 1
a12 1
  for p in 1 2; do
d27 1
a27 1
for p in 1 2; do
@


1.6
log
@repeat test with a style appended to the username
@
text
@d1 1
a1 1
#	$OpenBSD: proxy-connect.sh,v 1.5 2002/12/09 15:28:46 markus Exp $
d6 11
a16 7
verbose "plain username"
for p in 1 2; do
	${SSH} -$p -F $OBJ/ssh_proxy 999.999.999.999 true
	if [ $? -ne 0 ]; then
		fail "ssh proxyconnect protocol $p failed"
	fi
	SSH_CONNECTION=`${SSH} -$p -F $OBJ/ssh_proxy 999.999.999.999 'echo $SSH_CONNECTION'`
d18 1
a18 1
		fail "ssh proxyconnect protocol $p failed"
d21 1
a21 1
		fail "bad SSH_CONNECTION"
d23 2
a26 1
verbose "username with style"
d28 1
a31 1

@


1.5
log
@check $SSH_CONNECTION
@
text
@d1 1
a1 1
#	$OpenBSD: proxy-connect.sh,v 1.4 2002/03/15 13:08:56 markus Exp $
d6 1
d20 7
@


1.4
log
@allow specification of binary-under-test with
	$TEST_SSH_{SSH,SSHD,SSHAGENT,SSHADD,SSHKEYGEN,SSHKEYSCAN}
@
text
@d1 1
a1 1
#	$OpenBSD: proxy-connect.sh,v 1.3 2002/02/16 01:09:47 markus Exp $
d10 7
@


1.3
log
@$OpenBSD$, public domain
@
text
@d1 1
a1 1
#	$OpenBSD: $
d7 1
a7 1
	ssh -$p -F $OBJ/ssh_proxy 999.999.999.999 true
@


1.2
log
@we don't need a listening sshd for most of our tests, just
connect client and server w/o TCP:
	ssh -o 'proxycommand sshd -i -f $OBJ/sshd_proxy'
@
text
@d1 3
@


1.1
log
@serveral tests for ssh-keygen/ssh/sshd/ssh-add/ssh-agent

note that these tests will start sshd on 127.0.0.1:4242
and will fail if the realpath of /usr/src/usr.sbin/ssh/obj/ contains
a group or world writeable directory.
@
text
@d4 1
a4 3
	ssh -$p -F $OBJ/ssh_config \
		-o "proxycommand sshd -i -f $OBJ/sshd_config_proxy" \
		999.999.999.999 true
@

