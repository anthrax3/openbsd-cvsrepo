head	1.9;
access;
symbols
	OPENBSD_6_1:1.9.0.10
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.8
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.4
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.6
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.8.0.8
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.6
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.6.0.8
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.6
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.4
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.4.0.18
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.16
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.12
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.14
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.10
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.8
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.6
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.4
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.2
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.2.0.2
	OPENBSD_4_0_BASE:1.2;
locks; strict;
comment	@# @;


1.9
date	2015.03.03.22.35.19;	author markus;	state Exp;
branches;
next	1.8;
commitid	m52xwEKWrNr11xhO;

1.8
date	2013.05.17.00.37.40;	author dtucker;	state Exp;
branches;
next	1.7;

1.7
date	2013.04.06.06.00.22;	author dtucker;	state Exp;
branches;
next	1.6;

1.6
date	2011.06.03.05.35.10;	author dtucker;	state Exp;
branches;
next	1.5;

1.5
date	2011.05.23.03.31.31;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2006.12.13.08.36.36;	author dtucker;	state Exp;
branches;
next	1.3;

1.3
date	2006.11.06.09.27.43;	author markus;	state Exp;
branches;
next	1.2;

1.2
date	2006.07.22.01.50.00;	author dtucker;	state Exp;
branches;
next	1.1;

1.1
date	2006.07.17.12.08.02;	author dtucker;	state Exp;
branches;
next	;


desc
@@


1.9
log
@make it possible to run tests w/o ssh1 support; ok djm@@
@
text
@#	$OpenBSD: cfgmatch.sh,v 1.8 2013/05/17 00:37:40 dtucker Exp $
#	Placed in the Public Domain.

tid="sshd_config match"

pidfile=$OBJ/remote_pid
fwdport=3301
fwd="-L $fwdport:127.0.0.1:$PORT"

echo "ExitOnForwardFailure=yes" >> $OBJ/ssh_config
echo "ExitOnForwardFailure=yes" >> $OBJ/ssh_proxy

start_client()
{
	rm -f $pidfile
	${SSH} -q -$p $fwd "$@@" somehost \
	    exec sh -c \'"echo \$\$ > $pidfile; exec sleep 100"\' \
	    >>$TEST_REGRESS_LOGFILE 2>&1 &
	client_pid=$!
	# Wait for remote end
	n=0
	while test ! -f $pidfile ; do
		sleep 1
		n=`expr $n + 1`
		if test $n -gt 60; then
			kill $client_pid
			fatal "timeout waiting for background ssh"
		fi
	done	
}

stop_client()
{
	pid=`cat $pidfile`
	if [ ! -z "$pid" ]; then
		kill $pid
	fi
	wait
}

cp $OBJ/sshd_proxy $OBJ/sshd_proxy_bak
echo "PermitOpen 127.0.0.1:1" >>$OBJ/sshd_config
echo "Match Address 127.0.0.1" >>$OBJ/sshd_config
echo "PermitOpen 127.0.0.1:$PORT" >>$OBJ/sshd_config

grep -v AuthorizedKeysFile $OBJ/sshd_proxy_bak > $OBJ/sshd_proxy
echo "AuthorizedKeysFile /dev/null" >>$OBJ/sshd_proxy
echo "PermitOpen 127.0.0.1:1" >>$OBJ/sshd_proxy
echo "Match user $USER" >>$OBJ/sshd_proxy
echo "AuthorizedKeysFile /dev/null $OBJ/authorized_keys_%u" >>$OBJ/sshd_proxy
echo "Match Address 127.0.0.1" >>$OBJ/sshd_proxy
echo "PermitOpen 127.0.0.1:$PORT" >>$OBJ/sshd_proxy

start_sshd

#set -x

# Test Match + PermitOpen in sshd_config.  This should be permitted
for p in ${SSH_PROTOCOLS}; do
	trace "match permitopen localhost proto $p"
	start_client -F $OBJ/ssh_config
	${SSH} -q -$p -p $fwdport -F $OBJ/ssh_config somehost true || \
	    fail "match permitopen permit proto $p"
	stop_client
done

# Same but from different source.  This should not be permitted
for p in ${SSH_PROTOCOLS}; do
	trace "match permitopen proxy proto $p"
	start_client -F $OBJ/ssh_proxy
	${SSH} -q -$p -p $fwdport -F $OBJ/ssh_config somehost true && \
	    fail "match permitopen deny proto $p"
	stop_client
done

# Retry previous with key option, should also be denied.
cp /dev/null $OBJ/authorized_keys_$USER
for t in ${SSH_KEYTYPES}; do
	printf 'permitopen="127.0.0.1:'$PORT'" ' >> $OBJ/authorized_keys_$USER
	cat $OBJ/$t.pub >> $OBJ/authorized_keys_$USER
done
for p in ${SSH_PROTOCOLS}; do
	trace "match permitopen proxy w/key opts proto $p"
	start_client -F $OBJ/ssh_proxy
	${SSH} -q -$p -p $fwdport -F $OBJ/ssh_config somehost true && \
	    fail "match permitopen deny w/key opt proto $p"
	stop_client
done

# Test both sshd_config and key options permitting the same dst/port pair.
# Should be permitted.
for p in ${SSH_PROTOCOLS}; do
	trace "match permitopen localhost proto $p"
	start_client -F $OBJ/ssh_config
	${SSH} -q -$p -p $fwdport -F $OBJ/ssh_config somehost true || \
	    fail "match permitopen permit proto $p"
	stop_client
done

cp $OBJ/sshd_proxy_bak $OBJ/sshd_proxy
echo "PermitOpen 127.0.0.1:1 127.0.0.1:$PORT 127.0.0.2:2" >>$OBJ/sshd_proxy
echo "Match User $USER" >>$OBJ/sshd_proxy
echo "PermitOpen 127.0.0.1:1 127.0.0.1:2" >>$OBJ/sshd_proxy

# Test that a Match overrides a PermitOpen in the global section
for p in ${SSH_PROTOCOLS}; do
	trace "match permitopen proxy w/key opts proto $p"
	start_client -F $OBJ/ssh_proxy
	${SSH} -q -$p -p $fwdport -F $OBJ/ssh_config somehost true && \
	    fail "match override permitopen proto $p"
	stop_client
done

cp $OBJ/sshd_proxy_bak $OBJ/sshd_proxy
echo "PermitOpen 127.0.0.1:1 127.0.0.1:$PORT 127.0.0.2:2" >>$OBJ/sshd_proxy
echo "Match User NoSuchUser" >>$OBJ/sshd_proxy
echo "PermitOpen 127.0.0.1:1 127.0.0.1:2" >>$OBJ/sshd_proxy

# Test that a rule that doesn't match doesn't override, plus test a
# PermitOpen entry that's not at the start of the list
for p in ${SSH_PROTOCOLS}; do
	trace "nomatch permitopen proxy w/key opts proto $p"
	start_client -F $OBJ/ssh_proxy
	${SSH} -q -$p -p $fwdport -F $OBJ/ssh_config somehost true || \
	    fail "nomatch override permitopen proto $p"
	stop_client
done
@


1.8
log
@replace 'echo -n' with 'printf' since it's more portable
@
text
@d1 1
a1 1
#	$OpenBSD: cfgmatch.sh,v 1.7 2013/04/06 06:00:22 dtucker Exp $
d59 1
a59 1
for p in 1 2; do
d68 1
a68 1
for p in 1 2; do
d77 6
a82 5
printf 'permitopen="127.0.0.1:'$PORT'" ' >$OBJ/authorized_keys_$USER
cat $OBJ/rsa.pub >> $OBJ/authorized_keys_$USER
printf 'permitopen="127.0.0.1:'$PORT'" ' >>$OBJ/authorized_keys_$USER
cat $OBJ/rsa1.pub >> $OBJ/authorized_keys_$USER
for p in 1 2; do
d92 1
a92 1
for p in 1 2; do
d106 1
a106 1
for p in 1 2; do
d121 1
a121 1
for p in 1 2; do
@


1.7
log
@Split the regress log into 3 parts: the debug output from ssh, the debug
log from sshd and the output from the client command (ssh, scp or sftp).
Somewhat functional now, will become more useful when ssh/sshd -E is added.
@
text
@d1 1
a1 1
#	$OpenBSD: cfgmatch.sh,v 1.6 2011/06/03 05:35:10 dtucker Exp $
d77 1
a77 1
echo -n 'permitopen="127.0.0.1:'$PORT'" ' >$OBJ/authorized_keys_$USER
d79 1
a79 1
echo -n 'permitopen="127.0.0.1:'$PORT'" ' >>$OBJ/authorized_keys_$USER
@


1.6
log
@use OBJ to find test configs, patch from Tim Rice
@
text
@d1 1
a1 1
#	$OpenBSD: cfgmatch.sh,v 1.5 2011/05/23 03:31:31 djm Exp $
d18 1
a18 1
	    >>$TEST_SSH_LOGFILE 2>&1 &
@


1.5
log
@include testing of multiple/overridden AuthorizedKeysFiles
refactor to simply daemon start/stop and get rid of racy constructs
@
text
@d1 1
a1 1
#	$OpenBSD: cfgmatch.sh,v 1.4 2006/12/13 08:36:36 dtucker Exp $
d10 2
a11 2
echo "ExitOnForwardFailure=yes" >> ssh_config
echo "ExitOnForwardFailure=yes" >> ssh_proxy
@


1.4
log
@Additional test for multiple PermitOpen entries.  ok djm@@
@
text
@d1 1
a1 1
#	$OpenBSD: cfgmatch.sh,v 1.3 2006/11/06 09:27:43 markus Exp $
d10 22
d38 1
a41 1

d46 2
d49 2
a59 1
	rm -f $pidfile
d61 1
a61 4
	${SSH} -$p $fwd -F $OBJ/ssh_config -f somehost \
	    exec sh -c \'"echo \$\$ > $pidfile; exec sleep 100"\' >>$TEST_SSH_LOGFILE 2>&1 ||\
	    fail "match permitopen proto $p sshd failed"
	sleep 1;
a68 1
	rm -f $pidfile
d70 1
a70 4
	${SSH} -q -$p $fwd -F $OBJ/ssh_proxy -f somehost \
	    exec sh -c \'"echo \$\$ > $pidfile; exec sleep 100"\' >>$TEST_SSH_LOGFILE 2>&1 ||\
	    fail "match permitopen proxy proto $p sshd failed"
	sleep 1;
a81 1
	rm -f $pidfile
d83 1
a83 4
	${SSH} -q -$p $fwd -F $OBJ/ssh_proxy -f somehost \
	    exec sh -c \'"echo \$\$ > $pidfile; exec sleep 100"\' >>$TEST_SSH_LOGFILE 2>&1 ||\
	    fail "match permitopen w/key opt proto $p sshd failed"
	sleep 1;
a91 1
	rm -f $pidfile
d93 1
a93 4
	${SSH} -$p $fwd -F $OBJ/ssh_config -f somehost \
	    exec sh -c \'"echo \$\$ > $pidfile; exec sleep 100"\' >>$TEST_SSH_LOGFILE 2>&1 ||\
	    fail "match permitopen proto $p sshd failed"
	sleep 1;
a105 1
	rm -f $pidfile
d107 1
a107 4
	${SSH} -q -$p $fwd -F $OBJ/ssh_proxy -f somehost \
	    exec sh -c \'"echo \$\$ > $pidfile; exec sleep 100"\' >>$TEST_SSH_LOGFILE 2>&1 ||\
	    fail "match override permitopen proto $p sshd failed"
	sleep 1;
a120 1
	rm -f $pidfile
d122 1
a122 4
	${SSH} -q -$p $fwd -F $OBJ/ssh_proxy -f somehost \
	    exec sh -c \'"echo \$\$ > $pidfile; exec sleep 100"\' >>$TEST_SSH_LOGFILE 2>&1 ||\
	    fail "nomatch override permitopen proto $p sshd failed"
	sleep 1;
@


1.3
log
@fix quoting for non-(c)sh login shells.
@
text
@d1 1
a1 1
#	$OpenBSD: cfgmatch.sh,v 1.2 2006/07/22 01:50:00 dtucker Exp $
d104 19
@


1.2
log
@Test that PermitOpen after a Match overrides global setting; ok djm@@
@
text
@d1 1
a1 1
#	$OpenBSD: cfgmatch.sh,v 1.1 2006/07/17 12:08:02 dtucker Exp $
d37 1
a37 1
	    "echo \$\$ > $pidfile; exec sleep 100" >>$TEST_SSH_LOGFILE 2>&1 ||\
d50 1
a50 1
	    "echo \$\$ > $pidfile; exec sleep 100" >>$TEST_SSH_LOGFILE 2>&1 ||\
d67 1
a67 1
	    "echo \$\$ > $pidfile; exec sleep 100" >>$TEST_SSH_LOGFILE 2>&1 ||\
d81 1
a81 1
	    "echo \$\$ > $pidfile; exec sleep 100" >>$TEST_SSH_LOGFILE 2>&1 ||\
d99 1
a99 1
	    "echo \$\$ > $pidfile; exec sleep 100" >>$TEST_SSH_LOGFILE 2>&1 ||\
@


1.1
log
@Regress test for Match + PermitOpen.  ok djm@@
@
text
@d1 1
a1 1
#	$OpenBSD: forwarding.sh,v 1.6 2006/07/11 18:51:21 markus Exp $
d18 2
d86 18
@

