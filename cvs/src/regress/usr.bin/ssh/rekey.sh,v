head	1.17;
access;
symbols
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.17.0.4
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.16.0.6
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.15.0.4
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.14.0.4
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.1.0.40
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.38
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.36
	OPENBSD_5_0:1.1.0.34
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.32
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.30
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.26
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.28
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.24
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.22
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.20
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.18
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.16
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.14
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.12
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.10
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.8
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.6
	OPENBSD_3_6_BASE:1.1
	OPENBSD_3_5:1.1.0.4
	OPENBSD_3_5_BASE:1.1
	OPENBSD_3_4:1.1.0.2
	OPENBSD_3_4_BASE:1.1;
locks; strict;
comment	@# @;


1.17
date	2016.01.29.05.18.15;	author dtucker;	state Exp;
branches;
next	1.16;
commitid	ZQguNuKlwZ8d40zw;

1.16
date	2015.02.14.12.43.16;	author markus;	state Exp;
branches;
next	1.15;
commitid	CryrfG77uMBl1a0K;

1.15
date	2014.04.21.22.15.37;	author djm;	state Exp;
branches;
next	1.14;

1.14
date	2013.11.21.03.18.51;	author djm;	state Exp;
branches;
next	1.13;

1.13
date	2013.11.09.05.41.34;	author dtucker;	state Exp;
branches;
next	1.12;

1.12
date	2013.11.08.01.06.14;	author dtucker;	state Exp;
branches;
next	1.11;

1.11
date	2013.11.07.01.12.51;	author dtucker;	state Exp;
branches;
next	1.10;

1.10
date	2013.11.07.00.12.05;	author dtucker;	state Exp;
branches;
next	1.9;

1.9
date	2013.11.04.12.27.42;	author dtucker;	state Exp;
branches;
next	1.8;

1.8
date	2013.05.17.04.29.14;	author dtucker;	state Exp;
branches;
next	1.7;

1.7
date	2013.05.16.05.48.31;	author dtucker;	state Exp;
branches;
next	1.6;

1.6
date	2013.05.16.04.26.10;	author dtucker;	state Exp;
branches;
next	1.5;

1.5
date	2013.05.16.03.33.30;	author dtucker;	state Exp;
branches;
next	1.4;

1.4
date	2013.05.16.02.10.35;	author dtucker;	state Exp;
branches;
next	1.3;

1.3
date	2013.04.07.02.16.03;	author dtucker;	state Exp;
branches;
next	1.2;

1.2
date	2013.04.06.06.00.22;	author dtucker;	state Exp;
branches;
next	1.1;

1.1
date	2003.03.28.13.58.28;	author markus;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Add regression test for RekeyLimit parsing of >32bit values (4G and 8G).
@
text
@#	$OpenBSD: rekey.sh,v 1.16 2015/02/14 12:43:16 markus Exp $
#	Placed in the Public Domain.

tid="rekey"

LOG=${TEST_SSH_LOGFILE}

rm -f ${LOG}
cp $OBJ/sshd_proxy $OBJ/sshd_proxy_bak

# Test rekeying based on data volume only.
# Arguments will be passed to ssh.
ssh_data_rekeying()
{
	_kexopt=$1 ; shift
	_opts="$@@"
	if ! test -z "$_kexopts" ; then
		cp $OBJ/sshd_proxy_bak $OBJ/sshd_proxy
		echo "$_kexopt" >> $OBJ/sshd_proxy
		_opts="$_opts -o$_kexopt"
	fi
	rm -f ${COPY} ${LOG}
	_opts="$_opts -oCompression=no"
	${SSH} <${DATA} $_opts -v -F $OBJ/ssh_proxy somehost "cat > ${COPY}"
	if [ $? -ne 0 ]; then
		fail "ssh failed ($@@)"
	fi
	cmp ${DATA} ${COPY}		|| fail "corrupted copy ($@@)"
	n=`grep 'NEWKEYS sent' ${LOG} | wc -l`
	n=`expr $n - 1`
	trace "$n rekeying(s)"
	if [ $n -lt 1 ]; then
		fail "no rekeying occured ($@@)"
	fi
}

increase_datafile_size 300

opts=""
for i in `${SSH} -Q kex`; do
	opts="$opts KexAlgorithms=$i"
done
for i in `${SSH} -Q cipher`; do
	opts="$opts Ciphers=$i"
done
for i in `${SSH} -Q mac`; do
	opts="$opts MACs=$i"
done

for opt in $opts; do
	verbose "client rekey $opt"
	ssh_data_rekeying "$opt" -oRekeyLimit=256k
done

# AEAD ciphers are magical so test with all KexAlgorithms
if ${SSH} -Q cipher-auth | grep '^.*$' >/dev/null 2>&1 ; then
  for c in `${SSH} -Q cipher-auth`; do
    for kex in `${SSH} -Q kex`; do
	verbose "client rekey $c $kex"
	ssh_data_rekeying "KexAlgorithms=$kex" -oRekeyLimit=256k -oCiphers=$c
    done
  done
fi

for s in 16 1k 128k 256k; do
	verbose "client rekeylimit ${s}"
	ssh_data_rekeying "" -oCompression=no -oRekeyLimit=$s
done

for s in 5 10; do
	verbose "client rekeylimit default ${s}"
	rm -f ${COPY} ${LOG}
	${SSH} < ${DATA} -oCompression=no -oRekeyLimit="default $s" -F \
		$OBJ/ssh_proxy somehost "cat >${COPY};sleep $s;sleep 3"
	if [ $? -ne 0 ]; then
		fail "ssh failed"
	fi
	cmp ${DATA} ${COPY}		|| fail "corrupted copy"
	n=`grep 'NEWKEYS sent' ${LOG} | wc -l`
	n=`expr $n - 1`
	trace "$n rekeying(s)"
	if [ $n -lt 1 ]; then
		fail "no rekeying occured"
	fi
done

for s in 5 10; do
	verbose "client rekeylimit default ${s} no data"
	rm -f ${COPY} ${LOG}
	${SSH} -oCompression=no -oRekeyLimit="default $s" -F \
		$OBJ/ssh_proxy somehost "sleep $s;sleep 3"
	if [ $? -ne 0 ]; then
		fail "ssh failed"
	fi
	n=`grep 'NEWKEYS sent' ${LOG} | wc -l`
	n=`expr $n - 1`
	trace "$n rekeying(s)"
	if [ $n -lt 1 ]; then
		fail "no rekeying occured"
	fi
done

for s in 16 1k 128k 256k; do
	verbose "server rekeylimit ${s}"
	cp $OBJ/sshd_proxy_bak $OBJ/sshd_proxy
	echo "rekeylimit ${s}" >>$OBJ/sshd_proxy
	rm -f ${COPY} ${LOG}
	${SSH} -oCompression=no -F $OBJ/ssh_proxy somehost "cat ${DATA}" \
	    > ${COPY}
	if [ $? -ne 0 ]; then
		fail "ssh failed"
	fi
	cmp ${DATA} ${COPY}		|| fail "corrupted copy"
	n=`grep 'NEWKEYS sent' ${LOG} | wc -l`
	n=`expr $n - 1`
	trace "$n rekeying(s)"
	if [ $n -lt 1 ]; then
		fail "no rekeying occured"
	fi
done

for s in 5 10; do
	verbose "server rekeylimit default ${s} no data"
	cp $OBJ/sshd_proxy_bak $OBJ/sshd_proxy
	echo "rekeylimit default ${s}" >>$OBJ/sshd_proxy
	rm -f ${COPY} ${LOG}
	${SSH} -oCompression=no -F $OBJ/ssh_proxy somehost "sleep $s;sleep 3"
	if [ $? -ne 0 ]; then
		fail "ssh failed"
	fi
	n=`grep 'NEWKEYS sent' ${LOG} | wc -l`
	n=`expr $n - 1`
	trace "$n rekeying(s)"
	if [ $n -lt 1 ]; then
		fail "no rekeying occured"
	fi
done

verbose "rekeylimit parsing"
for size in 16 1k 1K 1m 1M 1g 1G 4G 8G; do
    for time in 1 1m 1M 1h 1H 1d 1D 1w 1W; do
	case $size in
		16)	bytes=16 ;;
		1k|1K)	bytes=1024 ;;
		1m|1M)	bytes=1048576 ;;
		1g|1G)	bytes=1073741824 ;;
		4g|4G)	bytes=4294967296 ;;
		8g|8G)	bytes=8589934592 ;;
	esac
	case $time in
		1)	seconds=1 ;;
		1m|1M)	seconds=60 ;;
		1h|1H)	seconds=3600 ;;
		1d|1D)	seconds=86400 ;;
		1w|1W)	seconds=604800 ;;
	esac

	b=`$SUDO ${SSHD} -T -o "rekeylimit $size $time" -f $OBJ/sshd_proxy | \
	    awk '/rekeylimit/{print $2}'`
	s=`$SUDO ${SSHD} -T -o "rekeylimit $size $time" -f $OBJ/sshd_proxy | \
	    awk '/rekeylimit/{print $3}'`

	if [ "$bytes" != "$b" ]; then
		fatal "rekeylimit size: expected $bytes bytes got $b"
	fi
	if [ "$seconds" != "$s" ]; then
		fatal "rekeylimit time: expected $time seconds got $s"
	fi
    done
done

rm -f ${COPY} ${DATA}
@


1.16
log
@test server rekey limit
@
text
@d1 1
a1 1
#	$OpenBSD: rekey.sh,v 1.15 2014/04/21 22:15:37 djm Exp $
d140 1
a140 1
for size in 16 1k 1K 1m 1M 1g 1G; do
d147 2
@


1.15
log
@repair regress tests broken by server-side default cipher/kex/mac changes
by ensuring that the option under test is included in the server's
algorithm list
@
text
@d1 1
a1 1
#	$OpenBSD: rekey.sh,v 1.14 2013/11/21 03:18:51 djm Exp $
d103 19
a121 1
echo "rekeylimit default 5" >>$OBJ/sshd_proxy
d124 2
@


1.14
log
@use new "ssh -Q cipher-auth" query to obtain lists of authenticated
encryption ciphers instead of specifying them manually; ensures that
the new chacha20poly1305@@openssh.com mode is tested;

ok markus@@ and naddy@@ as part of the diff to add
chacha20poly1305@@openssh.com
@
text
@d1 1
a1 1
#	$OpenBSD: rekey.sh,v 1.13 2013/11/09 05:41:34 dtucker Exp $
d9 1
d15 7
d23 2
a24 2
	${SSH} <${DATA} -oCompression=no $@@ -v -F $OBJ/ssh_proxy somehost \
		"cat > ${COPY}"
d52 1
a52 1
	ssh_data_rekeying -oRekeyLimit=256k -o$opt
d60 1
a60 1
	ssh_data_rekeying -oRekeyLimit=256k -oCiphers=$c -oKexAlgorithms=$kex
d67 1
a67 1
	ssh_data_rekeying -oCompression=no -oRekeyLimit=$s
@


1.13
log
@Use smaller test data files to speed up tests.  Grow test datafiles
where necessary for a specific test.
@
text
@d1 1
a1 1
#	$OpenBSD: rekey.sh,v 1.12 2013/11/08 01:06:14 dtucker Exp $
d47 3
a49 3
# GCM is magical so test with all KexAlgorithms
if ${SSH} -Q cipher | grep gcm@@openssh.com >/dev/null ; then
  for c in `${SSH} -Q cipher | grep gcm@@openssh.com`; do
d134 1
a134 1
		fatal "rekeylimit size: expected $bytes got $b"
d137 1
a137 1
		fatal "rekeylimit time: expected $time got $s"
@


1.12
log
@Rekey less frequently during tests to speed them up
@
text
@d1 1
a1 1
#	$OpenBSD: rekey.sh,v 1.11 2013/11/07 01:12:51 dtucker Exp $
d28 2
@


1.11
log
@Factor out the data transfer rekey tests
@
text
@d1 1
a1 1
#	$OpenBSD: rekey.sh,v 1.10 2013/11/07 00:12:05 dtucker Exp $
d42 1
a42 1
	ssh_data_rekeying -oRekeyLimit=16 -o$opt
d50 1
a50 1
	ssh_data_rekeying -oRekeyLimit=16 -oCiphers=$c -oKexAlgorithms=$kex
@


1.10
log
@Test rekeying for every Cipher, MAC and KEX, plus test every KEX with
the GCM ciphers.
@
text
@d1 1
a1 1
#	$OpenBSD: rekey.sh,v 1.9 2013/11/04 12:27:42 dtucker Exp $
d10 19
d42 1
a42 14
	rm -f ${COPY} ${LOG}
	cat $DATA | \
		${SSH} -oCompression=no -oRekeyLimit=16 -o$opt \
			-v -F $OBJ/ssh_proxy somehost "cat > ${COPY}"
	if [ $? -ne 0 ]; then
		fail "ssh failed"
	fi
	cmp $DATA ${COPY}		|| fail "corrupted copy"
	n=`grep 'NEWKEYS sent' ${LOG} | wc -l`
	n=`expr $n - 1`
	trace "$n rekeying(s)"
	if [ $n -lt 1 ]; then
		fail "no rekeying occured"
	fi
d50 1
a50 15
	rm -f ${COPY} ${LOG}
	cat $DATA | \
		${SSH} -oCompression=no -oRekeyLimit=16 \
			-oCiphers=$c -oKexAlgorithms=$kex \
			-v -F $OBJ/ssh_proxy somehost "cat > ${COPY}"
	if [ $? -ne 0 ]; then
		fail "ssh failed"
	fi
	cmp $DATA ${COPY}		|| fail "corrupted copy"
	n=`grep 'NEWKEYS sent' ${LOG} | wc -l`
	n=`expr $n - 1`
	trace "$n rekeying(s)"
	if [ $n -lt 1 ]; then
		fail "no rekeying occured"
	fi
d57 1
a57 14
	rm -f ${COPY} ${LOG}
	cat $DATA | \
		${SSH} -oCompression=no -oRekeyLimit=$s \
			-v -F $OBJ/ssh_proxy somehost "cat > ${COPY}"
	if [ $? -ne 0 ]; then
		fail "ssh failed"
	fi
	cmp $DATA ${COPY}		|| fail "corrupted copy"
	n=`grep 'NEWKEYS sent' ${LOG} | wc -l`
	n=`expr $n - 1`
	trace "$n rekeying(s)"
	if [ $n -lt 1 ]; then
		fail "no rekeying occured"
	fi
d63 2
a64 3
	cat $DATA | \
		${SSH} -oCompression=no -oRekeyLimit="default $s" -F \
			$OBJ/ssh_proxy somehost "cat >${COPY};sleep $s;sleep 3"
d68 1
a68 1
	cmp $DATA ${COPY}		|| fail "corrupted copy"
@


1.9
log
@Test rekeying with all KexAlgorithms.
@
text
@d1 1
a1 1
#	$OpenBSD: rekey.sh,v 1.8 2013/05/17 04:29:14 dtucker Exp $
d10 52
a61 4
kexalgs="curve25519-sha256@@libssh.org ecdh-sha2-nistp256 \
ecdh-sha2-nistp384 ecdh-sha2-nistp521 diffie-hellman-group-exchange-sha256 \
diffie-hellman-group-exchange-sha1 diffie-hellman-group14-sha1 \
diffie-hellman-group1-sha1"
d64 1
a64 2
    for a in $kexalgs; do
	verbose "client rekeylimit ${s} ${a}"
d67 1
a67 1
		${SSH} -oCompression=no -oRekeyLimit=$s -oKexAlgorithms=$a \
a78 1
    done
@


1.8
log
@Move the setting of DATA and COPY into test-exec.sh
@
text
@d1 1
a1 1
#	$OpenBSD: rekey.sh,v 1.7 2013/05/16 05:48:31 dtucker Exp $
d10 5
d16 2
a17 1
	verbose "client rekeylimit ${s}"
d20 1
a20 1
		${SSH} -oCompression=no -oRekeyLimit=$s \
d32 1
@


1.7
log
@add tests for RekeyLimit parsing
@
text
@d1 1
a1 1
#	$OpenBSD: rekey.sh,v 1.6 2013/05/16 04:26:10 dtucker Exp $
a5 2
DATA=${OBJ}/data
COPY=${OBJ}/copy
d8 1
a8 2
rm -f ${COPY} ${LOG} ${DATA}
dd if=/dev/zero of=${DATA} bs=1k count=512 > /dev/null 2>&1
@


1.6
log
@add server-side rekey test
@
text
@d1 1
a1 1
#	$OpenBSD: rekey.sh,v 1.5 2013/05/16 03:33:30 dtucker Exp $
d4 1
a4 1
tid="rekey during transfer data"
d79 31
@


1.5
log
@test rekeying when there's no data being transferred
@
text
@d1 1
a1 1
#	$OpenBSD: rekey.sh,v 1.4 2013/05/16 02:10:35 dtucker Exp $
d14 1
a14 1
	verbose "rekeylimit ${s}"
d32 1
a32 1
	verbose "rekeylimit default ${s}"
d50 1
a50 1
	verbose "rekeylimit default ${s} no data"
d54 16
@


1.4
log
@Add test for time-based rekeying
@
text
@d1 1
a1 1
#	$OpenBSD: rekey.sh,v 1.3 2013/04/07 02:16:03 dtucker Exp $
d14 1
a14 1
	trace "rekeylimit ${s}"
d31 2
a32 2
for s in 5 10 15 ; do
	trace "rekeylimit default ${s}"
d36 1
a36 1
			$OBJ/ssh_proxy somehost "cat >${COPY};sleep $s;sleep 5"
d41 16
@


1.3
log
@use -E option for ssh and sshd to write debuging logs to ssh{,d}.log and
save the output from any failing tests.  If a test fails the debug output
from ssh and sshd for the failing tests (and only the failing tests) should
be available in failed-ssh{,d}.log.
@
text
@d1 1
a1 1
#	$OpenBSD: rekey.sh,v 1.2 2013/04/06 06:00:22 dtucker Exp $
d15 1
a15 1
	rm -f ${COPY}
d30 19
@


1.2
log
@Split the regress log into 3 parts: the debug output from ssh, the debug
log from sshd and the output from the client command (ssh, scp or sftp).
Somewhat functional now, will become more useful when ssh/sshd -E is added.
@
text
@d1 1
a1 1
#	$OpenBSD: rekey.sh,v 1.1 2003/03/28 13:58:28 markus Exp $
d18 1
a18 2
			-v -F $OBJ/ssh_proxy somehost "cat > ${COPY}" \
		2> ${LOG}
@


1.1
log
@test rekeying (disabled)
@
text
@d1 1
a1 1
#	$OpenBSD: transfer.sh,v 1.1 2002/03/27 00:03:37 markus Exp $
d8 1
a8 1
LOG=${OBJ}/log
d31 1
a31 1
rm -f ${COPY} ${LOG} ${DATA}
@

