head	1.20;
access;
symbols
	OPENBSD_6_2:1.20.0.2
	OPENBSD_6_2_BASE:1.20
	OPENBSD_6_1:1.19.0.4
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.16.0.2
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.15.0.4
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.6
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.12.0.4
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.11.0.6
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.2
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.8.0.4
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.2
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.10
	OPENBSD_5_0:1.7.0.8
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.6
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.4
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.6.0.16
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.12
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.10
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.8
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.6
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.4
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.5.0.6
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.4
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.2
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.4.0.12
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.10
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.8
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.6
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4;
locks; strict;
comment	@# @;


1.20
date	2017.04.30.23.34.55;	author djm;	state Exp;
branches;
next	1.19;
commitid	gKq3obgPsgFIm4Ff;

1.19
date	2017.01.30.05.22.14;	author djm;	state Exp;
branches;
next	1.18;
commitid	2OMxATsPEs8Qowb9;

1.18
date	2017.01.30.04.54.07;	author djm;	state Exp;
branches;
next	1.17;
commitid	Fqy4k0qFKzTDzUz9;

1.17
date	2017.01.06.02.09.25;	author dtucker;	state Exp;
branches;
next	1.16;
commitid	aQPvD4IAbzTs1PBP;

1.16
date	2016.04.14.23.57.17;	author djm;	state Exp;
branches;
next	1.15;
commitid	b5RVWgLdHhHzZUVI;

1.15
date	2015.03.03.22.35.19;	author markus;	state Exp;
branches;
next	1.14;
commitid	m52xwEKWrNr11xhO;

1.14
date	2015.02.23.20.32.15;	author djm;	state Exp;
branches;
next	1.13;
commitid	B7dYvcGBwMXfood0;

1.13
date	2015.02.21.20.51.02;	author djm;	state Exp;
branches;
next	1.12;
commitid	2ajwppXw8iE8foLa;

1.12
date	2014.07.15.15.54.15;	author millert;	state Exp;
branches;
next	1.11;
commitid	z7plx8Gkj6l2sxem;

1.11
date	2013.06.10.21.56.43;	author dtucker;	state Exp;
branches;
next	1.10;

1.10
date	2013.05.17.04.29.14;	author dtucker;	state Exp;
branches;
next	1.9;

1.9
date	2013.04.07.02.16.03;	author dtucker;	state Exp;
branches;
next	1.8;

1.8
date	2012.06.01.00.47.35;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2010.01.11.02.53.44;	author dtucker;	state Exp;
branches;
next	1.6;

1.6
date	2006.07.11.18.51.21;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2005.03.10.10.20.39;	author dtucker;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.15.13.08.56;	author markus;	state Exp;
branches;
next	1.3;

1.3
date	2002.02.16.01.09.47;	author markus;	state Exp;
branches;
next	1.2;

1.2
date	2002.02.15.14.41.38;	author markus;	state Exp;
branches;
next	1.1;

1.1
date	2002.02.14.23.18.00;	author markus;	state Exp;
branches;
next	;


desc
@@


1.20
log
@eliminate explicit specification of protocol in tests and loops over
protocol. We only support SSHv2 now.
@
text
@#	$OpenBSD: forwarding.sh,v 1.19 2017/01/30 05:22:14 djm Exp $
#	Placed in the Public Domain.

tid="local and remote forwarding"

start_sshd

base=33
last=$PORT
fwd=""
CTL=$OBJ/ctl-sock

for j in 0 1 2; do
	for i in 0 1 2; do
		a=$base$j$i
		b=`expr $a + 50`
		c=$last
		# fwd chain: $a -> $b -> $c
		fwd="$fwd -L$a:127.0.0.1:$b -R$b:127.0.0.1:$c"
		last=$a
	done
done

trace "start forwarding, fork to background"
rm -f $CTL
${SSH} -S $CTL -M -F $OBJ/ssh_config -f $fwd somehost sleep 10

trace "transfer over forwarded channels and check result"
${SSH} -F $OBJ/ssh_config -p$last -o 'ConnectionAttempts=4' \
	somehost cat ${DATA} > ${COPY}
test -s ${COPY}		|| fail "failed copy of ${DATA}"
cmp ${DATA} ${COPY}	|| fail "corrupted copy of ${DATA}"

${SSH} -F $OBJ/ssh_config -S $CTL -O exit somehost

for d in L R; do
	trace "exit on -$d forward failure"

	# this one should succeed
	${SSH}  -F $OBJ/ssh_config \
	    -$d ${base}01:127.0.0.1:$PORT \
	    -$d ${base}02:127.0.0.1:$PORT \
	    -$d ${base}03:127.0.0.1:$PORT \
	    -$d ${base}04:127.0.0.1:$PORT \
	    -oExitOnForwardFailure=yes somehost true
	if [ $? != 0 ]; then
		fatal "connection failed, should not"
	else
		# this one should fail
		${SSH} -q -F $OBJ/ssh_config \
		    -$d ${base}01:127.0.0.1:$PORT \
		    -$d ${base}02:127.0.0.1:$PORT \
		    -$d ${base}03:127.0.0.1:$PORT \
		    -$d ${base}01:localhost:$PORT \
		    -$d ${base}04:127.0.0.1:$PORT \
		    -oExitOnForwardFailure=yes somehost true
		r=$?
		if [ $r != 255 ]; then
			fail "connection not termintated, but should ($r)"
		fi
	fi
done

trace "simple clear forwarding"
${SSH} -F $OBJ/ssh_config -oClearAllForwardings=yes somehost true

trace "clear local forward"
rm -f $CTL
${SSH} -S $CTL -M -f -F $OBJ/ssh_config -L ${base}01:127.0.0.1:$PORT \
    -oClearAllForwardings=yes somehost sleep 10
if [ $? != 0 ]; then
	fail "connection failed with cleared local forwarding"
else
	# this one should fail
	${SSH} -F $OBJ/ssh_config -p ${base}01 somehost true \
	     >>$TEST_REGRESS_LOGFILE 2>&1 && \
		fail "local forwarding not cleared"
fi
${SSH} -F $OBJ/ssh_config -S $CTL -O exit somehost

trace "clear remote forward"
rm -f $CTL
${SSH} -S $CTL -M -f -F $OBJ/ssh_config -R ${base}01:127.0.0.1:$PORT \
    -oClearAllForwardings=yes somehost sleep 10
if [ $? != 0 ]; then
	fail "connection failed with cleared remote forwarding"
else
	# this one should fail
	${SSH} -F $OBJ/ssh_config -p ${base}01 somehost true \
	     >>$TEST_REGRESS_LOGFILE 2>&1 && \
		fail "remote forwarding not cleared"
fi
${SSH} -F $OBJ/ssh_config -S $CTL -O exit somehost

trace "stdio forwarding"
cmd="${SSH} -F $OBJ/ssh_config"
$cmd -o "ProxyCommand $cmd -q -W localhost:$PORT somehost" somehost true
if [ $? != 0 ]; then
	fail "stdio forwarding"
fi

echo "LocalForward ${base}01 127.0.0.1:$PORT" >> $OBJ/ssh_config
echo "RemoteForward ${base}02 127.0.0.1:${base}01" >> $OBJ/ssh_config

trace "config file: start forwarding, fork to background"
rm -f $CTL
${SSH} -S $CTL -M -F $OBJ/ssh_config -f somehost sleep 10

trace "config file: transfer over forwarded channels and check result"
${SSH} -F $OBJ/ssh_config -p${base}02 -o 'ConnectionAttempts=4' \
	somehost cat ${DATA} > ${COPY}
test -s ${COPY}		|| fail "failed copy of ${DATA}"
cmp ${DATA} ${COPY}	|| fail "corrupted copy of ${DATA}"

${SSH} -F $OBJ/ssh_config -S $CTL -O exit somehost

trace "transfer over chained unix domain socket forwards and check result"
rm -f $OBJ/unix-[123].fwd
rm -f $CTL $CTL.[123]
${SSH} -S $CTL -M -f -F $OBJ/ssh_config -R${base}01:[$OBJ/unix-1.fwd] somehost sleep 10
${SSH} -S $CTL.1 -M -f -F $OBJ/ssh_config -L[$OBJ/unix-1.fwd]:[$OBJ/unix-2.fwd] somehost sleep 10
${SSH} -S $CTL.2 -M -f -F $OBJ/ssh_config -R[$OBJ/unix-2.fwd]:[$OBJ/unix-3.fwd] somehost sleep 10
${SSH} -S $CTL.3 -M -f -F $OBJ/ssh_config -L[$OBJ/unix-3.fwd]:127.0.0.1:$PORT somehost sleep 10
${SSH} -F $OBJ/ssh_config -p${base}01 -o 'ConnectionAttempts=4' \
	somehost cat ${DATA} > ${COPY}
test -s ${COPY}			|| fail "failed copy ${DATA}"
cmp ${DATA} ${COPY}		|| fail "corrupted copy of ${DATA}"

${SSH} -F $OBJ/ssh_config -S $CTL -O exit somehost
${SSH} -F $OBJ/ssh_config -S $CTL.1 -O exit somehost
${SSH} -F $OBJ/ssh_config -S $CTL.2 -O exit somehost
${SSH} -F $OBJ/ssh_config -S $CTL.3 -O exit somehost

@


1.19
log
@fully unbreak: some $SSH invocations did not have -F specified and
could pick up the ~/.ssh/config of the user running the tests
@
text
@d1 1
a1 1
#	$OpenBSD: forwarding.sh,v 1.18 2017/01/30 04:54:07 djm Exp $
a22 14
for p in ${SSH_PROTOCOLS}; do
	q=`expr 3 - $p`
	if ! ssh_version $q; then
		q=$p
	fi
	trace "start forwarding, fork to background"
	rm -f $CTL
	${SSH} -S $CTL -M -$p -F $OBJ/ssh_config -f $fwd somehost sleep 10

	trace "transfer over forwarded channels and check result"
	${SSH} -$q -F $OBJ/ssh_config -p$last -o 'ConnectionAttempts=4' \
		somehost cat ${DATA} > ${COPY}
	test -s ${COPY}		|| fail "failed copy of ${DATA}"
	cmp ${DATA} ${COPY}	|| fail "corrupted copy of ${DATA}"
d24 11
a34 2
	${SSH} -F $OBJ/ssh_config -S $CTL -O exit somehost
done
a35 1
for p in ${SSH_PROTOCOLS}; do
d37 1
a37 1
	trace "exit on -$d forward failure, proto $p"
d40 1
a40 1
	${SSH} -$p -F $OBJ/ssh_config \
d50 1
a50 1
		${SSH} -q -$p -F $OBJ/ssh_config \
a62 1
done
d64 2
a65 32
for p in ${SSH_PROTOCOLS}; do
	trace "simple clear forwarding proto $p"
	${SSH} -$p -F $OBJ/ssh_config -oClearAllForwardings=yes somehost true

	trace "clear local forward proto $p"
	rm -f $CTL
	${SSH} -S $CTL -M -$p -f -F $OBJ/ssh_config -L ${base}01:127.0.0.1:$PORT \
	    -oClearAllForwardings=yes somehost sleep 10
	if [ $? != 0 ]; then
		fail "connection failed with cleared local forwarding"
	else
		# this one should fail
		${SSH} -$p -F $OBJ/ssh_config -p ${base}01 somehost true \
		     >>$TEST_REGRESS_LOGFILE 2>&1 && \
			fail "local forwarding not cleared"
	fi
	${SSH} -F $OBJ/ssh_config -S $CTL -O exit somehost
	
	trace "clear remote forward proto $p"
	rm -f $CTL
	${SSH} -S $CTL -M -$p -f -F $OBJ/ssh_config -R ${base}01:127.0.0.1:$PORT \
	    -oClearAllForwardings=yes somehost sleep 10
	if [ $? != 0 ]; then
		fail "connection failed with cleared remote forwarding"
	else
		# this one should fail
		${SSH} -$p -F $OBJ/ssh_config -p ${base}01 somehost true \
		     >>$TEST_REGRESS_LOGFILE 2>&1 && \
			fail "remote forwarding not cleared"
	fi
	${SSH} -F $OBJ/ssh_config -S $CTL -O exit somehost
done
d67 34
a100 9
for p in 2; do
	trace "stdio forwarding proto $p"
	cmd="${SSH} -$p -F $OBJ/ssh_config"
	$cmd -o "ProxyCommand $cmd -q -W localhost:$PORT somehost" \
		somehost true
	if [ $? != 0 ]; then
		fail "stdio forwarding proto $p"
	fi
done
a103 10
for p in ${SSH_PROTOCOLS}; do
	trace "config file: start forwarding, fork to background"
	rm -f $CTL
	${SSH} -S $CTL -M -$p -F $OBJ/ssh_config -f somehost sleep 10

	trace "config file: transfer over forwarded channels and check result"
	${SSH} -F $OBJ/ssh_config -p${base}02 -o 'ConnectionAttempts=4' \
		somehost cat ${DATA} > ${COPY}
	test -s ${COPY}		|| fail "failed copy of ${DATA}"
	cmp ${DATA} ${COPY}	|| fail "corrupted copy of ${DATA}"
d105 28
a132 2
	${SSH} -F $OBJ/ssh_config -S $CTL -O exit somehost
done
a133 18
for p in 2; do
	trace "transfer over chained unix domain socket forwards and check result"
	rm -f $OBJ/unix-[123].fwd
	rm -f $CTL $CTL.[123]
	${SSH} -S $CTL -M -f -F $OBJ/ssh_config -R${base}01:[$OBJ/unix-1.fwd] somehost sleep 10
	${SSH} -S $CTL.1 -M -f -F $OBJ/ssh_config -L[$OBJ/unix-1.fwd]:[$OBJ/unix-2.fwd] somehost sleep 10
	${SSH} -S $CTL.2 -M -f -F $OBJ/ssh_config -R[$OBJ/unix-2.fwd]:[$OBJ/unix-3.fwd] somehost sleep 10
	${SSH} -S $CTL.3 -M -f -F $OBJ/ssh_config -L[$OBJ/unix-3.fwd]:127.0.0.1:$PORT somehost sleep 10
	${SSH} -F $OBJ/ssh_config -p${base}01 -o 'ConnectionAttempts=4' \
		somehost cat ${DATA} > ${COPY}
	test -s ${COPY}			|| fail "failed copy ${DATA}"
	cmp ${DATA} ${COPY}		|| fail "corrupted copy of ${DATA}"

	${SSH} -F $OBJ/ssh_config -S $CTL -O exit somehost
	${SSH} -F $OBJ/ssh_config -S $CTL.1 -O exit somehost
	${SSH} -F $OBJ/ssh_config -S $CTL.2 -O exit somehost
	${SSH} -F $OBJ/ssh_config -S $CTL.3 -O exit somehost
done
@


1.18
log
@partially unbreak: was not specifying hostname on some $SSH invocations
@
text
@d1 1
a1 1
#	$OpenBSD: forwarding.sh,v 1.17 2017/01/06 02:09:25 dtucker Exp $
d38 1
a38 1
	${SSH} -S $CTL -O exit somehost
d53 1
a53 1
		fail "connection failed, should not"
d87 1
a87 1
	${SSH} -S $CTL -O exit somehost
d101 1
a101 1
	${SSH} -S $CTL -O exit somehost
d127 1
a127 1
	${SSH} -S $CTL -O exit somehost
d143 4
a146 4
	${SSH} -S $CTL -O exit somehost
	${SSH} -S $CTL.1 -O exit somehost
	${SSH} -S $CTL.2 -O exit somehost
	${SSH} -S $CTL.3 -O exit somehost
@


1.17
log
@Make forwarding test less racy by using unix domain sockets instead of
TCP ports where possible.  Patch from cjwatson at debian.org via bz#2659.
@
text
@d1 1
a1 1
#	$OpenBSD: forwarding.sh,v 1.16 2016/04/14 23:57:17 djm Exp $
d83 1
a83 1
		${SSH} -$p -F $OBJ/ssh_config -p ${base}01 true \
d97 1
a97 1
		${SSH} -$p -F $OBJ/ssh_config -p ${base}01 true \
@


1.16
log
@unbreak test for recent ssh de-duplicated forwarding change
@
text
@d1 1
a1 1
#	$OpenBSD: forwarding.sh,v 1.15 2015/03/03 22:35:19 markus Exp $
a11 1
rm -f $CTL
d29 2
a30 1
	${SSH} -$p -F $OBJ/ssh_config -f $fwd somehost sleep 10
d38 1
a38 1
	sleep 10
d76 2
a77 1
	${SSH} -$p -f -F $OBJ/ssh_config -L ${base}01:127.0.0.1:$PORT \
d87 1
a87 1
	sleep 10
d90 2
a91 1
	${SSH} -$p -f -F $OBJ/ssh_config -R ${base}01:127.0.0.1:$PORT \
d101 1
a101 1
	sleep 10
d118 1
d133 5
a137 4
	${SSH} -f -F $OBJ/ssh_config -R${base}01:[$OBJ/unix-1.fwd] somehost sleep 10
	${SSH} -f -F $OBJ/ssh_config -L[$OBJ/unix-1.fwd]:[$OBJ/unix-2.fwd] somehost sleep 10
	${SSH} -f -F $OBJ/ssh_config -R[$OBJ/unix-2.fwd]:[$OBJ/unix-3.fwd] somehost sleep 10
	${SSH} -f -F $OBJ/ssh_config -L[$OBJ/unix-3.fwd]:127.0.0.1:$PORT somehost sleep 10
d143 4
a146 2
	#wait
	sleep 10
@


1.15
log
@make it possible to run tests w/o ssh1 support; ok djm@@
@
text
@d1 1
a1 1
#	$OpenBSD: forwarding.sh,v 1.14 2015/02/23 20:32:15 djm Exp $
d60 1
a60 1
		    -$d ${base}01:127.0.0.1:$PORT \
@


1.14
log
@fix a race condition by using a mux socket rather than an
ineffectual wait statement
@
text
@d1 1
a1 1
#	$OpenBSD: forwarding.sh,v 1.13 2015/02/21 20:51:02 djm Exp $
d24 1
a24 1
for p in 1 2; do
d26 3
d41 1
a41 1
for p in 1 2; do
d71 1
a71 1
for p in 1 2; do
d114 1
a114 1
for p in 1 2; do
@


1.13
log
@correct paths to configuration files being written/updated;
they live in $OBJ not cwd; some by Roumen Petrov
@
text
@d1 1
a1 1
#	$OpenBSD: forwarding.sh,v 1.12 2014/07/15 15:54:15 millert Exp $
d11 3
d113 1
a113 1
	${SSH} -$p -F $OBJ/ssh_config -f somehost sleep 10
d121 1
a121 1
	wait
@


1.12
log
@Add support for Unix domain socket forwarding.  A remote TCP port
may be forwarded to a local Unix domain socket and vice versa or
both ends may be a Unix domain socket.  This is a reimplementation
of the streamlocal patches by William Ahern from:
    http://www.25thandclement.com/~william/projects/streamlocal.html
OK djm@@ markus@@
@
text
@d1 1
a1 1
#	$OpenBSD: forwarding.sh,v 1.11 2013/06/10 21:56:43 dtucker Exp $
d106 2
a107 2
echo "LocalForward ${base}01 127.0.0.1:$PORT" >> ssh_config
echo "RemoteForward ${base}02 127.0.0.1:${base}01" >> ssh_config
@


1.11
log
@Add test for forward config parsing
@
text
@d1 1
a1 1
#	$OpenBSD: forwarding.sh,v 1.10 2013/05/17 04:29:14 dtucker Exp $
d29 1
a29 1
	test -f ${COPY}		|| fail "failed copy of ${DATA}"
d115 1
a115 1
	test -f ${COPY}		|| fail "failed copy of ${DATA}"
d119 16
@


1.10
log
@Move the setting of DATA and COPY into test-exec.sh
@
text
@d1 1
a1 1
#	$OpenBSD: forwarding.sh,v 1.9 2013/04/07 02:16:03 dtucker Exp $
d104 15
@


1.9
log
@use -E option for ssh and sshd to write debuging logs to ssh{,d}.log and
save the output from any failing tests.  If a test fails the debug output
from ssh and sshd for the failing tests (and only the failing tests) should
be available in failed-ssh{,d}.log.
@
text
@d1 1
a1 1
#	$OpenBSD: forwarding.sh,v 1.8 2012/06/01 00:47:35 djm Exp $
d28 3
a30 3
		somehost cat /bin/ls > $OBJ/ls.copy
	test -f $OBJ/ls.copy			|| fail "failed copy /bin/ls"
	cmp /bin/ls $OBJ/ls.copy		|| fail "corrupted copy of /bin/ls"
@


1.8
log
@append to rather than truncate test log; bz#2013 from openssh AT
roumenpetrov.info
@
text
@d1 1
a1 1
#	$OpenBSD: forwarding.sh,v 1.7 2010/01/11 02:53:44 dtucker Exp $
d77 1
a77 1
		     2>>$TEST_SSH_LOGFILE && \
d90 1
a90 1
		     2>>$TEST_SSH_LOGFILE && \
@


1.7
log
@regress test for stdio forwarding
@
text
@d1 1
a1 1
#	$OpenBSD: forwarding.sh,v 1.6 2006/07/11 18:51:21 markus Exp $
d77 1
a77 1
		     2>${TEST_SSH_LOGFILE} && \
d90 1
a90 1
		     2>${TEST_SSH_LOGFILE} && \
@


1.6
log
@add test for ExitOnForwardFailure=yes
@
text
@d1 1
a1 1
#	$OpenBSD: forwarding.sh,v 1.5 2005/03/10 10:20:39 dtucker Exp $
d94 10
@


1.5
log
@Regress test for ClearAllForwardings (bz #994); ok markus@@
@
text
@d1 1
a1 1
#	$OpenBSD: forwarding.sh,v 1.4 2002/03/15 13:08:56 markus Exp $
d33 30
@


1.4
log
@allow specification of binary-under-test with
	$TEST_SSH_{SSH,SSHD,SSHAGENT,SSHADD,SSHKEYGEN,SSHKEYSCAN}
@
text
@d1 1
a1 1
#	$OpenBSD: forwarding.sh,v 1.3 2002/02/16 01:09:47 markus Exp $
d32 31
@


1.3
log
@$OpenBSD$, public domain
@
text
@d1 1
a1 1
#	$OpenBSD: $
d24 1
a24 1
	ssh -$p -F $OBJ/ssh_config -f $fwd somehost sleep 10
d27 1
a27 1
	ssh -$q -F $OBJ/ssh_config -p$last -o 'ConnectionAttempts=4' \
@


1.2
log
@we don't need a listening sshd for most of our tests, just
connect client and server w/o TCP:
	ssh -o 'proxycommand sshd -i -f $OBJ/sshd_proxy'
@
text
@d1 3
@


1.1
log
@serveral tests for ssh-keygen/ssh/sshd/ssh-add/ssh-agent

note that these tests will start sshd on 127.0.0.1:4242
and will fail if the realpath of /usr/src/usr.sbin/ssh/obj/ contains
a group or world writeable directory.
@
text
@d3 2
@

