head	1.6;
access;
symbols
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.5.0.4
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.2.0.4
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2;
locks; strict;
comment	@# @;


1.6
date	2017.04.30.23.34.55;	author djm;	state Exp;
branches;
next	1.5;
commitid	gKq3obgPsgFIm4Ff;

1.5
date	2017.03.11.23.44.16;	author djm;	state Exp;
branches;
next	1.4;
commitid	8C4nMIhibPP7VMvr;

1.4
date	2016.12.16.02.48.55;	author djm;	state Exp;
branches;
next	1.3;
commitid	m7e0byAJfmIrQ8yo;

1.3
date	2016.12.16.01.01.07;	author djm;	state Exp;
branches;
next	1.2;
commitid	KGdhyNROh5gDP9Tq;

1.2
date	2015.09.24.07.15.39;	author djm;	state Exp;
branches;
next	1.1;
commitid	JcAsl6UDc1anu94N;

1.1
date	2015.09.24.06.16.53;	author djm;	state Exp;
branches;
next	;
commitid	5OZyjCM8FhoxLlNA;


desc
@@


1.6
log
@eliminate explicit specification of protocol in tests and loops over
protocol. We only support SSHv2 now.
@
text
@#	$OpenBSD: cert-file.sh,v 1.5 2017/03/11 23:44:16 djm Exp $
#	Placed in the Public Domain.

tid="ssh with certificates"

rm -f $OBJ/user_ca_key* $OBJ/user_key*
rm -f $OBJ/cert_user_key*

# Create a CA key
${SSHKEYGEN} -q -N '' -t ed25519 -f $OBJ/user_ca_key1 ||\
	fatal "ssh-keygen failed"
${SSHKEYGEN} -q -N '' -t ed25519  -f $OBJ/user_ca_key2 ||\
	fatal "ssh-keygen failed"

# Make some keys and certificates.
${SSHKEYGEN} -q -N '' -t ed25519 -f $OBJ/user_key1 || \
	fatal "ssh-keygen failed"
${SSHKEYGEN} -q -N '' -t ed25519 -f $OBJ/user_key2 || \
	fatal "ssh-keygen failed"
${SSHKEYGEN} -q -N '' -t ed25519 -f $OBJ/user_key3 || \
	fatal "ssh-keygen failed"
${SSHKEYGEN} -q -N '' -t ed25519 -f $OBJ/user_key4 || \
	fatal "ssh-keygen failed"
${SSHKEYGEN} -q -N '' -t ed25519 -f $OBJ/user_key5 || \
	fatal "ssh-keygen failed"

# Move the certificate to a different address to better control
# when it is offered.
${SSHKEYGEN} -q -s $OBJ/user_ca_key1 -I "regress user key for $USER" \
	-z $$ -n ${USER} $OBJ/user_key1 ||
		fatal "couldn't sign user_key1 with user_ca_key1"
mv $OBJ/user_key1-cert.pub $OBJ/cert_user_key1_1.pub
${SSHKEYGEN} -q -s $OBJ/user_ca_key2 -I "regress user key for $USER" \
	-z $$ -n ${USER} $OBJ/user_key1 ||
		fatal "couldn't sign user_key1 with user_ca_key2"
mv $OBJ/user_key1-cert.pub $OBJ/cert_user_key1_2.pub
${SSHKEYGEN} -q -s $OBJ/user_ca_key1 -I "regress user key for $USER" \
	-z $$ -n ${USER} $OBJ/user_key3 ||
		fatal "couldn't sign user_key3 with user_ca_key1"
rm $OBJ/user_key3.pub # to test use of private key w/o public half.
${SSHKEYGEN} -q -s $OBJ/user_ca_key1 -I "regress user key for $USER" \
	-z $$ -n ${USER} $OBJ/user_key4 ||
		fatal "couldn't sign user_key4 with user_ca_key1"
rm $OBJ/user_key4 $OBJ/user_key4.pub # to test no matching pub/private key case.

trace 'try with identity files'
opts="-F $OBJ/ssh_proxy -oIdentitiesOnly=yes"
opts2="$opts -i $OBJ/user_key1 -i $OBJ/user_key2"
echo "cert-authority $(cat $OBJ/user_ca_key1.pub)" > $OBJ/authorized_keys_$USER

# Make a clean config that doesn't have any pre-added identities.
cat $OBJ/ssh_proxy | grep -v IdentityFile > $OBJ/no_identity_config

# XXX: verify that certificate used was what we expect. Needs exposure of
# keys via enviornment variable or similar.

	# Key with no .pub should work - finding the equivalent *-cert.pub.
verbose "identity cert with no plain public file"
${SSH} -F $OBJ/no_identity_config -oIdentitiesOnly=yes \
    -i $OBJ/user_key3 somehost exit 52
[ $? -ne 52 ] && fail "ssh failed"

# CertificateFile matching private key with no .pub file should work.
verbose "CertificateFile with no plain public file"
${SSH} -F $OBJ/no_identity_config -oIdentitiesOnly=yes \
    -oCertificateFile=$OBJ/user_key3-cert.pub \
    -i $OBJ/user_key3 somehost exit 52
[ $? -ne 52 ] && fail "ssh failed"

# Just keys should fail
verbose "plain keys"
${SSH} $opts2 somehost exit 52
r=$?
if [ $r -eq 52 ]; then
	fail "ssh succeeded with no certs"
fi

# Keys with untrusted cert should fail.
verbose "untrusted cert"
opts3="$opts2 -oCertificateFile=$OBJ/cert_user_key1_2.pub"
${SSH} $opts3 somehost exit 52
r=$?
if [ $r -eq 52 ]; then
	fail "ssh succeeded with bad cert"
fi

# Good cert with bad key should fail.
verbose "good cert, bad key"
opts3="$opts -i $OBJ/user_key2"
opts3="$opts3 -oCertificateFile=$OBJ/cert_user_key1_1.pub"
${SSH} $opts3 somehost exit 52
r=$?
if [ $r -eq 52 ]; then
	fail "ssh succeeded with no matching key"
fi

# Keys with one trusted cert, should succeed.
verbose "single trusted"
opts3="$opts2 -oCertificateFile=$OBJ/cert_user_key1_1.pub"
${SSH} $opts3 somehost exit 52
r=$?
if [ $r -ne 52 ]; then
	fail "ssh failed with trusted cert and key"
fi

# Multiple certs and keys, with one trusted cert, should succeed.
verbose "multiple trusted"
opts3="$opts2 -oCertificateFile=$OBJ/cert_user_key1_2.pub"
opts3="$opts3 -oCertificateFile=$OBJ/cert_user_key1_1.pub"
${SSH} $opts3 somehost exit 52
r=$?
if [ $r -ne 52 ]; then
	fail "ssh failed with multiple certs"
fi

#next, using an agent in combination with the keys
SSH_AUTH_SOCK=/nonexistent ${SSHADD} -l > /dev/null 2>&1
if [ $? -ne 2 ]; then
	fatal "ssh-add -l did not fail with exit code 2"
fi

trace "start agent"
eval `${SSHAGENT} -s` > /dev/null
r=$?
if [ $r -ne 0 ]; then
	fatal "could not start ssh-agent: exit code $r"
fi

# add private keys to agent
${SSHADD} -k $OBJ/user_key2 > /dev/null 2>&1
if [ $? -ne 0 ]; then
	fatal "ssh-add did not succeed with exit code 0"
fi
${SSHADD} -k $OBJ/user_key1 > /dev/null 2>&1
if [ $? -ne 0 ]; then
	fatal "ssh-add did not succeed with exit code 0"
fi

# try ssh with the agent and certificates
opts="-F $OBJ/ssh_proxy"
# with no certificates, shoud fail
${SSH} $opts somehost exit 52
if [ $? -eq 52 ]; then
	fail "ssh connect with agent in succeeded with no cert"
fi

#with an untrusted certificate, should fail
opts="$opts -oCertificateFile=$OBJ/cert_user_key1_2.pub"
${SSH} $opts somehost exit 52
if [ $? -eq 52 ]; then
	fail "ssh connect with agent in succeeded with bad cert"
fi

#with an additional trusted certificate, should succeed
opts="$opts -oCertificateFile=$OBJ/cert_user_key1_1.pub"
${SSH} $opts somehost exit 52
if [ $? -ne 52 ]; then
	fail "ssh connect with agent in failed with good cert"
fi

trace "kill agent"
${SSHAGENT} -k > /dev/null

#cleanup
rm -f $OBJ/user_ca_key* $OBJ/user_key*
rm -f $OBJ/cert_user_key*
@


1.5
log
@regress tests for loading certificates without public keys;
bz#2617 based on patch from Adam Eijdenberg; ok markus@@ dtucker@@
@
text
@d1 1
a1 1
#	$OpenBSD: cert-file.sh,v 1.4 2016/12/16 02:48:55 djm Exp $
a56 1
for p in ${SSH_PROTOCOLS}; do
d58 57
a114 58
	verbose "protocol $p: identity cert with no plain public file"
	${SSH} -F $OBJ/no_identity_config -oIdentitiesOnly=yes \
	    -i $OBJ/user_key3 somehost exit 5$p
	[ $? -ne 5$p ] && fail "ssh failed"

	# CertificateFile matching private key with no .pub file should work.
	verbose "protocol $p: CertificateFile with no plain public file"
	${SSH} -F $OBJ/no_identity_config -oIdentitiesOnly=yes \
	    -oCertificateFile=$OBJ/user_key3-cert.pub \
	    -i $OBJ/user_key3 somehost exit 5$p
	[ $? -ne 5$p ] && fail "ssh failed"

	# Just keys should fail
	verbose "protocol $p: plain keys"
	${SSH} $opts2 somehost exit 5$p
	r=$?
	if [ $r -eq 5$p ]; then
		fail "ssh succeeded with no certs in protocol $p"
	fi

	# Keys with untrusted cert should fail.
	verbose "protocol $p: untrusted cert"
	opts3="$opts2 -oCertificateFile=$OBJ/cert_user_key1_2.pub"
	${SSH} $opts3 somehost exit 5$p
	r=$?
	if [ $r -eq 5$p ]; then
		fail "ssh succeeded with bad cert in protocol $p"
	fi

	# Good cert with bad key should fail.
	verbose "protocol $p: good cert, bad key"
	opts3="$opts -i $OBJ/user_key2"
	opts3="$opts3 -oCertificateFile=$OBJ/cert_user_key1_1.pub"
	${SSH} $opts3 somehost exit 5$p
	r=$?
	if [ $r -eq 5$p ]; then
		fail "ssh succeeded with no matching key in protocol $p"
	fi

	# Keys with one trusted cert, should succeed.
	verbose "protocol $p: single trusted"
	opts3="$opts2 -oCertificateFile=$OBJ/cert_user_key1_1.pub"
	${SSH} $opts3 somehost exit 5$p
	r=$?
	if [ $r -ne 5$p ]; then
		fail "ssh failed with trusted cert and key in protocol $p"
	fi

	# Multiple certs and keys, with one trusted cert, should succeed.
	verbose "protocol $p: multiple trusted"
	opts3="$opts2 -oCertificateFile=$OBJ/cert_user_key1_2.pub"
	opts3="$opts3 -oCertificateFile=$OBJ/cert_user_key1_1.pub"
	${SSH} $opts3 somehost exit 5$p
	r=$?
	if [ $r -ne 5$p ]; then
		fail "ssh failed with multiple certs in protocol $p"
	fi
done
a139 1
# note: ssh agent only uses certificates in protocol 2
d142 1
a142 1
${SSH} -2 $opts somehost exit 52
d144 1
a144 1
	fail "ssh connect with agent in protocol 2 succeeded with no cert"
d149 1
a149 1
${SSH} -2 $opts somehost exit 52
d151 1
a151 1
	fail "ssh connect with agent in protocol 2 succeeded with bad cert"
d156 1
a156 1
${SSH} -2 $opts somehost exit 52
d158 1
a158 1
	fail "ssh connect with agent in protocol 2 failed with good cert"
@


1.4
log
@revert to rev1.2; the new bits in this test depend on changes to ssh
that aren't yet committed
@
text
@d1 1
a1 1
#	$OpenBSD: cert-file.sh,v 1.2 2015/09/24 07:15:39 djm Exp $
d20 7
d31 1
a31 1
		fail "couldn't sign user_key1 with user_ca_key1"
d35 1
a35 1
		fail "couldn't sign user_key1 with user_ca_key2"
d37 8
d51 6
d58 13
d72 1
d80 1
d89 1
d99 1
d108 1
a114 8
	fi

	#Keys with trusted certificate specified in config options, should succeed.
	opts3="$opts2 -oCertificateFile=$OBJ/cert_user_key1_1.pub"
	${SSH} $opts3 somehost exit 5$p
	r=$?
	if [ $r -ne 5$p ]; then
		fail "ssh failed with trusted cert in config in protocol $p"
@


1.3
log
@regression test for certificates along with private key with no
public half. bz#2617, mostly from Adam Eijdenberg
@
text
@a19 7
${SSHKEYGEN} -q -N '' -t ed25519 -f $OBJ/user_key3 || \
	fatal "ssh-keygen failed"
${SSHKEYGEN} -q -N '' -t ed25519 -f $OBJ/user_key4 || \
	fatal "ssh-keygen failed"
${SSHKEYGEN} -q -N '' -t ed25519 -f $OBJ/user_key5 || \
	fatal "ssh-keygen failed"

d24 1
a24 1
		fatal "couldn't sign user_key1 with user_ca_key1"
d28 1
a28 1
		fatal "couldn't sign user_key1 with user_ca_key2"
a29 8
${SSHKEYGEN} -q -s $OBJ/user_ca_key1 -I "regress user key for $USER" \
	-z $$ -n ${USER} $OBJ/user_key3 ||
		fatal "couldn't sign user_key3 with user_ca_key1"
rm $OBJ/user_key3.pub # to test use of private key w/o public half.
${SSHKEYGEN} -q -s $OBJ/user_ca_key1 -I "regress user key for $USER" \
	-z $$ -n ${USER} $OBJ/user_key4 ||
		fatal "couldn't sign user_key4 with user_ca_key1"
rm $OBJ/user_key4 $OBJ/user_key4.pub # to test no matching pub/private key case.
a35 6
# Make a clean config that doesn't have any pre-added identities.
cat $OBJ/ssh_proxy | grep -v IdentityFile > $OBJ/no_identity_config

# XXX: verify that certificate used was what we expect. Needs exposure of
# keys via enviornment variable or similar.

a36 13
	# Key with no .pub should work - finding the equivalent *-cert.pub.
	verbose "protocol $p: identity cert with no plain public file"
	${SSH} -F $OBJ/no_identity_config -oIdentitiesOnly=yes \
	    -i $OBJ/user_key3 somehost exit 5$p
	[ $? -ne 5$p ] && fail "ssh failed"

	# CertificateFile matching private key with no .pub file should work.
	verbose "protocol $p: CertificateFile with no plain public file"
	${SSH} -F $OBJ/no_identity_config -oIdentitiesOnly=yes \
	    -oCertificateFile=$OBJ/user_key3-cert.pub \
	    -i $OBJ/user_key3 somehost exit 5$p
	[ $? -ne 5$p ] && fail "ssh failed"

a37 1
	verbose "protocol $p: plain keys"
a44 1
	verbose "protocol $p: untrusted cert"
a52 1
	verbose "protocol $p: good cert, bad key"
a61 1
	verbose "protocol $p: single trusted"
a69 1
	verbose "protocol $p: multiple trusted"
d76 8
@


1.2
log
@fix command-line option to match what was actually committed
@
text
@d1 1
a1 1
#	$OpenBSD: cert-file.sh,v 1.1 2015/09/24 06:16:53 djm Exp $
d20 7
d31 1
a31 1
		fail "couldn't sign user_key1 with user_ca_key1"
d35 1
a35 1
		fail "couldn't sign user_key1 with user_ca_key2"
d37 8
d51 6
d58 13
d72 1
d80 1
d89 1
d99 1
d108 1
a114 8
	fi

	#Keys with trusted certificate specified in config options, should succeed.
	opts3="$opts2 -oCertificateFile=$OBJ/cert_user_key1_1.pub"
	${SSH} $opts3 somehost exit 5$p
	r=$?
	if [ $r -ne 5$p ]; then
		fail "ssh failed with trusted cert in config in protocol $p"
@


1.1
log
@regress test for CertificateFile; patch from Meghana Bhat via bz#2436
@
text
@d1 1
a1 1
#	$OpenBSD: multicert.sh,v 1.1 2014/12/22 08:06:03 djm Exp $
d45 1
a45 1
	opts3="$opts2 -z $OBJ/cert_user_key1_2.pub"
d53 2
a54 1
	opts3="$opts -i $OBJ/user_key2 -z $OBJ/cert_user_key1_1.pub"
d62 1
a62 1
	opts3="$opts2 -z $OBJ/cert_user_key1_1.pub"
d70 2
a71 1
	opts3="$opts2 -z $OBJ/cert_user_key1_2.pub -z $OBJ/cert_user_key1_1.pub"
d120 1
a120 1
opts="$opts -z $OBJ/cert_user_key1_2.pub"
d127 1
a127 1
opts="$opts -z $OBJ/cert_user_key1_1.pub"
@

