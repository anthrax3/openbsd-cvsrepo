head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	2017.07.22.13.50.54;	author anton;	state Exp;
branches;
next	1.3;
commitid	6r4QszwV0bHrjk08;

1.3
date	2017.07.19.20.09.35;	author anton;	state Exp;
branches;
next	1.2;
commitid	9MGMBJiyBYpL0tDy;

1.2
date	2017.07.19.15.17.49;	author anton;	state Exp;
branches;
next	1.1;
commitid	1zGNj4InvE2teNRV;

1.1
date	2017.06.28.15.09.41;	author anton;	state Exp;
branches;
next	;
commitid	VaAuIHC66W9L4Bq2;


desc
@@


1.4
log
@Add missing RCS IDs and zap redundant SRCS from Makefile.
@
text
@#!/bin/sh
#
# $OpenBSD$
#
# Copyright (c) 2017 Anton Lindqvist <anton@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

testseq() {
	stdin=$1
	exp=$(echo "$2")
	act=$(echo -n "$stdin" | ./edit -p 'Subject: ' mail -En unknown)
	[ $? = 0 ] && [ "$exp" = "$act" ] && return 0

	echo input:
	echo ">>>${stdin}<<<"
	echo -n "$stdin" | hexdump -C
	echo expected:
	echo ">>>${exp}<<<"
	echo -n "$exp" | hexdump -C
	echo actual:
	echo ">>>${act}<<<"
	echo -n "$act" | hexdump -C

	exit 1
}

# Create a fake HOME with a minimal .mailrc.
tmp=$(mktemp -d)
trap 'rm -r $tmp' 0
cat >$tmp/.mailrc <<!
set ask
!

HOME=$tmp
MALLOC_OPTIONS=S
export HOME MALLOC_OPTIONS

# VERASE: Delete character.
testseq "\0177" "Subject: "
testseq "a\0177" "Subject: a\b \b"

# VINTR: Kill letter.
testseq "\0003" \
	"Subject: ^C\r\n(Interrupt -- one more to kill letter)\r\nSubject: "

# VKILL: Kill line.
testseq "\0025" "Subject: "
testseq "ab\0025" "Subject: ab\b\b  \b\b"

# VWERASE: Delete word.
testseq "\0027" "Subject: "
testseq "ab\0027" "Subject: ab\b\b  \b\b"
testseq "ab cd\0027\0027" "Subject: ab cd\b\b  \b\b\b\b\b   \b\b\b"
@


1.3
log
@The first version of the edit program used to test csh, ksh and mail was based
on the following reasoning: once the program to test has written some data it
has entered the main-loop and is by now ready to receive user input. At this
point it should be safe to start writing input and once the program once again
enters a blocking reading state, its done processing the input. This approach
was sensitive to timing and determining when a shell is done processing its
input (if ever) is tricky.

This iteration of the edit program takes a new approach and uses presence of a
prompt for synchronisation of I/O. It doesn't solve all problems but is a step
in the right direction.

Joint work with bluhm@@
@
text
@d3 2
@


1.2
log
@Fix failing tests when executed as a user without a ~/.mailrc configuration file.

While here, fix a flaky test.
@
text
@a16 2
set -e

d20 2
a21 2
	act=$(echo -n "$stdin" | ./edit mail -En unknown)
	[ "$exp" = "$act" ] && return 0
d33 1
a33 1
	return 1
a45 3

# NL: New line.
testseq "\n" "Subject: \r\n"
@


1.1
log
@Add regression tests for mail.
@
text
@d38 8
d47 1
a47 1
export MALLOC_OPTIONS
d57 1
a57 1
testseq "\0003\0003" \
@

