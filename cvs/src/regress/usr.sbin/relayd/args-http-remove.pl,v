head	1.8;
access;
symbols
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.8.0.14
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.10
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.8
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.6
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.4
	OPENBSD_5_6_BASE:1.8;
locks; strict;
comment	@# @;


1.8
date	2014.07.13.23.59.57;	author benno;	state Exp;
branches;
next	1.7;
commitid	00QzKfdnlM5irvq9;

1.7
date	2014.07.13.00.32.08;	author benno;	state Exp;
branches;
next	1.6;
commitid	ri182Vf5Hw0I7rh1;

1.6
date	2014.07.11.11.48.50;	author reyk;	state Exp;
branches;
next	1.5;
commitid	6F05OKHLwEQdKZuE;

1.5
date	2014.07.10.20.02.32;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	H83MrCtZN1xW2NwF;

1.4
date	2014.07.10.19.42.59;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	nk40kclwQAcI5z4r;

1.3
date	2014.07.09.16.48.55;	author reyk;	state Exp;
branches;
next	1.2;
commitid	tyiEIIip8IP7h6pK;

1.2
date	2014.06.22.14.18.01;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	9lcQYgJu0eGKsg3G;

1.1
date	2014.05.02.14.50.26;	author andre;	state Exp;
branches;
next	;


desc
@@


1.8
log
@fix regress tests after log changes. noticed by bluhm@@.
everybody stand back. i know regular expressions.
@
text
@use strict;
use warnings;

my %header = (
	"X-Header-Foo" => "foo",
	"X-Header-Bar" => "bar",
);
our %args = (
    client => {
	func => \&http_client,
	loggrep => {
	    "X-Header-Foo: foo" => 0,
	    "X-Header-Bar: bar" => 1,
	},
    },
    relayd => {
	protocol => [ "http",
	    'match response header remove X-Header-Foo',
	    'match response header log "*Foo"',
	],
	loggrep => { qr/ (?:done|last write \(done\)), GET \{X-Header-Foo: foo \(removed\)\s*\};/ => 1 },
    },
    server => {
	func => \&http_server,
	header => \%header,
	loggrep => {
	    "X-Header-Foo: foo" => 1,
	    "X-Header-Bar: bar" => 1,
	},
    },
);

1;
@


1.7
log
@improve log output for relays. adjust regress tests
ok reyk
@
text
@d21 1
a21 1
	loggrep => { qr/ (?:done|last write \(done\)), \{X-Header-Foo: foo \(removed\)\s*\};/ => 1 },
@


1.6
log
@Simplify the code that handles the HTTP headers by using an RB tree
with associated lists instead of the complicated lookup table and
"others" list.  This might add a little malloc overhead for common
headers but also fixes some issues like the handling of repeated
headers -  for example, handling of multiple "Set-Cookie" headers.

ok bluhm@@ (regress part)
ok benno@@
@
text
@d21 1
a21 1
	loggrep => { qr/ (?:done|last write \(done\)), \[X-Header-Foo: foo \(removed\)\s*\]/ => 1 },
@


1.5
log
@Print "%s (removed)" into relayd log and test for that string.
suggested by reyk@@
@
text
@d19 1
a19 1
	    'match response header log "*"',
@


1.4
log
@To make sure that at least anything is tested, add a length check
per default for the default length value in check_logs().  If a
test doesn't want this check, it has to disable it explicitly with
nocheck.  Also remove unneeded nocheck switches for deeper testing.
@
text
@d21 1
a21 1
	loggrep => { qr/ (?:done|last write \(done\)), \[X-Header-Foo: foo \*removed\*\s*\]/ => 1 },
@


1.3
log
@Update and extend the regress tests to use the new grammar of the
filtering rules.  Some of the filenames are based on the old grammar,
we keep them for now and just update the contents to have a
before/after comparison of the features.

Most of the work was done by Andre de Oliveira (andre@@)

OK bluhm@@ benno@@
@
text
@a10 1
	nocheck => 1,
@


1.2
log
@Fix the relayd regression tests.  Now they pass with and without
an obj directory.  The relayd process can also run on a remote
machine for different timing.
@
text
@d11 1
d19 2
a20 1
	    'response header remove X-Header-Foo log',
d22 1
a22 1
	loggrep => { qr/ (?:done|last write \(done\)), \[X-Header-Foo: foo\s*\]/ => 1 },
@


1.1
log
@Add regression tests to relayd to cover a few key types/actions combinations.

ok reyk
@
text
@d20 1
a20 1
	loggrep => { qr/done, \[X-Header-Foo: foo\s*\]/ => 1 },
@

