head	1.16;
access;
symbols
	OPENBSD_6_1:1.16.0.10
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.16.0.6
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.2
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.16.0.4
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.13.0.4
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.11.0.4
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.6.0.8
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.4
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.2
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2;
locks; strict;
comment	@# @;


1.16
date	2015.07.20.05.34.16;	author bluhm;	state Exp;
branches;
next	1.15;
commitid	z0hAhY1IWpp7tf4t;

1.15
date	2015.05.22.19.09.18;	author bluhm;	state Exp;
branches;
next	1.14;
commitid	DHpp83NEgNDFXx2X;

1.14
date	2015.05.17.22.49.03;	author bluhm;	state Exp;
branches;
next	1.13;
commitid	ZmEdEsG37OVW32LM;

1.13
date	2014.12.14.20.30.51;	author bluhm;	state Exp;
branches;
next	1.12;
commitid	xPf6lEUBthwKchlj;

1.12
date	2014.08.18.22.58.19;	author bluhm;	state Exp;
branches;
next	1.11;
commitid	Lrki66TGIJh8PoUM;

1.11
date	2014.07.10.22.33.44;	author bluhm;	state Exp;
branches;
next	1.10;
commitid	naDS69G80hzQMyBX;

1.10
date	2014.06.22.14.18.01;	author bluhm;	state Exp;
branches;
next	1.9;
commitid	9lcQYgJu0eGKsg3G;

1.9
date	2014.05.12.21.30.42;	author andre;	state Exp;
branches;
next	1.8;

1.8
date	2014.05.09.11.49.26;	author andre;	state Exp;
branches;
next	1.7;

1.7
date	2014.05.02.14.10.03;	author andre;	state Exp;
branches;
next	1.6;

1.6
date	2013.01.21.20.16.57;	author bluhm;	state Exp;
branches;
next	1.5;

1.5
date	2012.12.28.20.36.25;	author bluhm;	state Exp;
branches;
next	1.4;

1.4
date	2012.11.28.00.40.36;	author bluhm;	state Exp;
branches;
next	1.3;

1.3
date	2012.11.02.17.44.49;	author bluhm;	state Exp;
branches;
next	1.2;

1.2
date	2011.09.02.10.45.36;	author bluhm;	state Exp;
branches;
next	1.1;

1.1
date	2011.09.01.17.33.17;	author bluhm;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Allow to use $curdir, $objdir, $host, $hostname in the test config
file.  They are substituted automatically, to avoid this in each
single test.
@
text
@#	$OpenBSD: Relayd.pm,v 1.15 2015/05/22 19:09:18 bluhm Exp $

# Copyright (c) 2010-2015 Alexander Bluhm <bluhm@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

package Relayd;
use parent 'Proc';
use Carp;
use Cwd;
use Sys::Hostname;
use File::Basename;

sub new {
	my $class = shift;
	my %args = @@_;
	$args{logfile} ||= "relayd.log";
	$args{up} ||= $args{dryrun} || "relay_launch: ";
	$args{down} ||= $args{dryrun} ? "relayd.conf:" : "parent terminating";
	$args{func} = sub { Carp::confess "$class func may not be called" };
	$args{conffile} ||= "relayd.conf";
	$args{forward}
	    or croak "$class forward not given";
	my $self = Proc::new($class, %args);
	ref($self->{protocol}) eq 'ARRAY'
	    or $self->{protocol} = [ split("\n", $self->{protocol} || "") ];
	ref($self->{relay}) eq 'ARRAY'
	    or $self->{relay} = [ split("\n", $self->{relay} || "") ];
	$self->{listenaddr}
	    or croak "$class listen addr not given";
	$self->{listenport}
	    or croak "$class listen port not given";
	$self->{connectaddr}
	    or croak "$class connect addr not given";
	$self->{connectport}
	    or croak "$class connect port not given";

	my $test = basename($self->{testfile} || "");
	# tls does not allow a too long session id, so truncate it
	substr($test, 25, length($test) - 25, "") if length($test) > 25;
	open(my $fh, '>', $self->{conffile})
	    or die ref($self), " conf file $self->{conffile} create failed: $!";
	print $fh "log all\n";
	print $fh "prefork 1\n";  # only crashes of first child are observed
	print $fh "table <table-$test> { $self->{connectaddr} }\n"
	    if defined($self->{table});

	# substitute variables in config file
	my $curdir = dirname($0) || ".";
	my $objdir = getcwd();
	my $hostname = hostname();
	(my $host = $hostname) =~ s/\..*//;
	my $connectport = $self->{connectport};
	my $connectaddr = $self->{connectaddr};
	my $listenaddr = $self->{listenaddr};
	my $listenport = $self->{listenport};

	my @@protocol = @@{$self->{protocol}};
	my $proto = shift @@protocol;
	$proto = defined($proto) ? "$proto " : "";
	unshift @@protocol,
	    $self->{forward} eq "splice" ? "tcp splice" :
	    $self->{forward} eq "copy"   ? "tcp no splice" :
	    die ref($self), " invalid forward $self->{forward}"
	    unless grep { /splice/ } @@protocol;
	print $fh "${proto}protocol proto-$test {";
	if ($self->{inspectssl}) {
		$self->{listenssl} = $self->{forwardssl} = 1;
		print $fh "\n\ttls ca cert ca.crt";
		print $fh "\n\ttls ca key ca.key password ''";
	}
	# substitute variables in config file
	foreach (@@protocol) {
		s/(\$[a-z]+)/$1/eeg;
	}
	print $fh  map { "\n\t$_" } @@protocol;
	print $fh  "\n}\n";

	my @@relay = @@{$self->{relay}};
	print $fh  "relay relay-$test {";
	print $fh  "\n\tprotocol proto-$test"
	    unless grep { /^protocol / } @@relay;
	my $tls = $self->{listenssl} ? " tls" : "";
	print $fh  "\n\tlisten on $self->{listenaddr} ".
	    "port $self->{listenport}$tls" unless grep { /^listen / } @@relay;
	my $withtls = $self->{forwardssl} ? " with tls" : "";
	print $fh  "\n\tforward$withtls to $self->{connectaddr} ".
	    "port $self->{connectport}" unless grep { /^forward / } @@relay;
	# substitute variables in config file
	foreach (@@relay) {
		s/(\$[a-z]+)/$1/eeg;
	}
	print $fh  map { "\n\t$_" } @@relay;
	print $fh  "\n}\n";

	return $self;
}

sub child {
	my $self = shift;
	my @@sudo = $ENV{SUDO} ? $ENV{SUDO} : ();
	my @@ktrace = $ENV{KTRACE} ? ($ENV{KTRACE}, "-i") : ();
	my $relayd = $ENV{RELAYD} ? $ENV{RELAYD} : "relayd";
	my @@cmd = (@@sudo, @@ktrace, $relayd, "-dvv", "-f", $self->{conffile});
	print STDERR "execute: @@cmd\n";
	exec @@cmd;
	die ref($self), " exec '@@cmd' failed: $!";
}

1;
@


1.15
log
@Add tests for relayd TLS inspection with plain SSL and HTTPS.
@
text
@d1 1
a1 1
#	$OpenBSD: Relayd.pm,v 1.14 2015/05/17 22:49:03 bluhm Exp $
d23 2
d63 3
@


1.14
log
@Add test cases for a crash reported by Bertrand PROVOST.  When a
HTTP client writes multiple requests or chunks in a single transfer,
relayd invokes the libevent callback manually for the next data.
If the callback closes the session, this results in an use after
free.
Test an invalid second request method, test an invalid header line
in the second PUT request, test an invalid second chunked length
for a PUT request.  Also test multiple valid HTTP 1.1 PUT requests
with chunked body.
To detect crashes of relayd, start it with "prefork 1" and grep for
"lost child" log messages.  Unfortunately only the first child is
monitored by the parent.
@
text
@d1 1
a1 1
#	$OpenBSD: Relayd.pm,v 1.13 2014/12/14 20:30:51 bluhm Exp $
d3 1
a3 1
# Copyright (c) 2010-2014 Alexander Bluhm <bluhm@@openbsd.org>
d75 5
@


1.13
log
@By now relayd expects tls in its config file and writes tls into
its log file.  Change regression tests form ssl to tls.
@
text
@d1 1
a1 1
#	$OpenBSD: Relayd.pm,v 1.12 2014/08/18 22:58:19 bluhm Exp $
d55 1
@


1.12
log
@Make the perl modules consistent for the multiple regression tests.
This includes coding style, better error messages and variable
naming.
@
text
@d1 1
a1 1
#	$OpenBSD: Relayd.pm,v 1.11 2014/07/10 22:33:44 bluhm Exp $
d50 1
a50 1
	# ssl does not allow a too long session id, so truncate it
d85 1
a85 1
	my $ssl = $self->{listenssl} ? " ssl" : "";
d87 3
a89 3
	    "port $self->{listenport}$ssl" unless grep { /^listen / } @@relay;
	my $withssl = $self->{forwardssl} ? " with ssl" : "";
	print $fh  "\n\tforward$withssl to $self->{connectaddr} ".
@


1.11
log
@Test relayd error message for a broken config file.
@
text
@d1 1
a1 1
#	$OpenBSD: Relayd.pm,v 1.10 2014/06/22 14:18:01 bluhm Exp $
d3 1
a3 1
# Copyright (c) 2010-2012 Alexander Bluhm <bluhm@@openbsd.org>
d29 1
a29 1
	$args{up} ||= "Started";
a100 10
sub up {
	my $self = Proc::up(shift, @@_);
	my $timeout = shift || 10;
	my $regex = $self->{dryrun} || "relay_launch: ";
	$self->loggrep(qr/$regex/, $timeout)
	    or croak ref($self), " no $regex in $self->{logfile} ".
		"after $timeout seconds";
	return $self;
}

a102 1
	print STDERR $self->{up}, "\n";
d106 1
a106 1
	my @@cmd = (@@sudo, @@ktrace, $relayd, '-dvv', '-f', $self->{conffile});
d109 1
a109 1
	die "Exec @@cmd failed: $!";
@


1.10
log
@Fix the relayd regression tests.  Now they pass with and without
an obj directory.  The relayd process can also run on a remote
machine for different timing.
@
text
@d1 1
a1 1
#	$OpenBSD: Relayd.pm,v 1.9 2014/05/12 21:30:42 andre Exp $
d30 1
a30 1
	$args{down} ||= $args{dryrun} ? "no actions" : "parent terminating";
@


1.9
log
@Refactors "dummyrun" flag as "dryrun" with an approach similar to the one used
for client/server processes checks through $self->{down} state control
variable, while here, do not instantiate a client when noclient is defined,
reflecting server object instantiation behaviour.

ok bluhm
@
text
@d1 1
a1 1
#	$OpenBSD: Relayd.pm,v 1.8 2014/05/09 11:49:26 andre Exp $
d58 7
d74 4
a81 4
	my $connectport = $self->{connectport};
	my $connectaddr = $self->{connectaddr};
	my $listenaddr = $self->{listenaddr};
	my $listenport = $self->{listenport};
d91 3
a93 5
	my @@raux = @@relay;
	@@relay = ();
	foreach my $s (@@raux) {
		$s =~ s/(\$\w+)/$1/eeg;
		push @@relay, $s;
d105 1
a105 1
	my $lsock = $self->loggrep(qr/$regex/, $timeout)
@


1.8
log
@Adds $relayd->{dummyrun} and $client->{noclient} flags to relayd tests
framework. These flags can be set from test file which eases performing
dry-runs of relayd long enough to do relayd.conf parsing, thus enabling the
grammar/parser-only tests.  While here, fix and improves args-http-mark.pl to a
correct use-case.

ok reyk
@
text
@d1 1
a1 1
#	$OpenBSD: Relayd.pm,v 1.7 2014/05/02 14:10:03 andre Exp $
d30 1
a30 1
	$args{down} ||= "parent terminating";
d99 4
a102 4
	my $dummyrun = $self->{dummyrun} || 0;
	my $lsock = $self->loggrep(qr/relay_launch: /, $timeout)
	    or croak ref($self), " no relay_launch in $self->{logfile} ".
		"after $timeout seconds" unless $dummyrun;
@


1.7
log
@Extends relayd regress-tests framework to support tweaks from test-code: tables
definition on relayd.conf, customization of client/server cookies,
client/server headers and request path.

ok reyk
@
text
@d1 1
a1 1
#	$OpenBSD: Relayd.pm,v 1.6 2013/01/21 20:16:57 bluhm Exp $
d99 1
d102 1
a102 1
		"after $timeout seconds";
@


1.6
log
@Add ssl tests for https chunked and https contentlength over relayd.
@
text
@d1 1
a1 1
#	$OpenBSD: Relayd.pm,v 1.5 2012/12/28 20:36:25 bluhm Exp $
d55 2
d71 4
d84 6
@


1.5
log
@Allow the relayd regression tests to run the relayd on a different
host from client and server.  Real TCP connections not running on
localhost provide a different timing uncovering more bugs.
@
text
@d1 1
a1 1
#	$OpenBSD: Relayd.pm,v 1.4 2012/11/28 00:40:36 bluhm Exp $
d50 2
@


1.4
log
@Set used environment variables explicitly in makefile and use them
consistently in relayd regression test.
@
text
@d1 1
a1 1
#	$OpenBSD: Relayd.pm,v 1.3 2012/11/02 17:44:49 bluhm Exp $
d49 1
a49 1
	my $test = basename($self->{test} || "");
a88 8
}

sub down {
	my $self = shift;
	my @@sudo = $ENV{SUDO} ? $ENV{SUDO} : ();
	my @@cmd = (@@sudo, '/bin/kill', $self->{pid});
	system(@@cmd);
	return Proc::down($self, @@_);
@


1.3
log
@Ktrace the relayd during the test if the KTRACE environment variable
is set.
@
text
@d1 1
a1 1
#	$OpenBSD: Relayd.pm,v 1.2 2011/09/02 10:45:36 bluhm Exp $
d93 1
a93 1
	my @@sudo = $ENV{SUDO} || ();
d102 3
a104 3
	my @@sudo = $ENV{SUDO} || ();
	my @@ktrace = $ENV{KTRACE} ? qw(ktrace -i) : ();
	my $relayd = $ENV{RELAYD} || "relayd";
@


1.2
log
@Add tests for relayd protocol http 1.0 and 1.1.
@
text
@d1 1
a1 1
#	$OpenBSD: Relayd.pm,v 1.1 2011/09/01 17:33:17 bluhm Exp $
d3 1
a3 1
# Copyright (c) 2010,2011 Alexander Bluhm <bluhm@@openbsd.org>
d103 1
d105 2
a106 1
	my @@cmd = (@@sudo, $relayd, '-dvv', '-f', $self->{conffile});
@


1.1
log
@Add regression tests for relaying connections through relayd.  This
is useful to ensure that socket splicing is working correctly.
Server, relayd, client with different config are started for each
subtest.  Data must pass unmodified.
@
text
@d1 1
a1 1
#	$OpenBSD$
d49 1
d52 1
a52 1
	my $test = basename($self->{test} || "");
@

