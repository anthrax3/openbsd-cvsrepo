head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.6
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.2
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.2.0.8
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2;
locks; strict;
comment	@# @;


1.7
date	2016.05.03.19.13.04;	author bluhm;	state Exp;
branches;
next	1.6;
commitid	QUorL89Z4jPT2RKR;

1.6
date	2015.06.25.19.29.57;	author bluhm;	state Exp;
branches;
next	1.5;
commitid	7rKQ3g1MlOMYaffv;

1.5
date	2014.08.18.22.58.19;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	Lrki66TGIJh8PoUM;

1.4
date	2014.07.11.16.13.11;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	w0GDsVLD1jCOz3Uz;

1.3
date	2014.06.22.14.18.01;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	9lcQYgJu0eGKsg3G;

1.2
date	2013.01.04.14.01.49;	author bluhm;	state Exp;
branches;
next	1.1;

1.1
date	2012.12.28.20.36.25;	author bluhm;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Fix some Perl statements perlcritic was bitching about: Variable
declared in conditional statement.
@
text
@#	$OpenBSD: Remote.pm,v 1.6 2015/06/25 19:29:57 bluhm Exp $

# Copyright (c) 2010-2014 Alexander Bluhm <bluhm@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

package Remote;
use parent 'Proc';
use Carp;
use Cwd;
use File::Basename;

my %PIPES;

sub close_pipes {
	my @@pipes = @@_ ? @@_ : keys %PIPES
	    or return;
	foreach (@@pipes) {
		# file descriptor cannot be a hash key, so use hash value
		my $fh = $PIPES{$_};
		# also print new line as close is delayed by forked processes
		print $fh "close\n";
		close($fh);
	}
	sleep 1;  # give other end a chance to finish process
	delete @@PIPES{@@pipes};
}

END {
	close_pipes();
}

sub new {
	my $class = shift;
	my %args = @@_;
	$args{logfile} ||= "remote.log";
	$args{up} ||= "listen sock: ";
	$args{down} ||= $args{dryrun} ? "relayd.conf" : "parent terminating";
	$args{func} = sub { Carp::confess "$class func may not be called" };
	$args{remotessh}
	    or croak "$class remote ssh host not given";
	$args{forward}
	    or croak "$class forward not given";
	my $self = Proc::new($class, %args);
	$self->{listenaddr}
	    or croak "$class listen addr not given";
	$self->{connectaddr}
	    or croak "$class connect addr not given";
	$self->{connectport}
	    or croak "$class connect port not given";
	return $self;
}

sub run {
	my $self = Proc::run(shift, @@_);
	$PIPES{$self->{pipe}} = $self->{pipe};
	return $self;
}

sub up {
	my $self = Proc::up(shift, @@_);
	my $lsock = $self->loggrep(qr/^listen sock: /)
	    or croak ref($self), " no 'listen sock: ' in $self->{logfile}";
	my($addr, $port) = $lsock =~ /: (\S+) (\S+)$/
	    or croak ref($self), " no listen addr and port in $self->{logfile}";
	$self->{listenaddr} = $addr;
	$self->{listenport} = $port;
	return $self;
}

sub child {
	my $self = shift;

	my @@opts = $ENV{SSH_OPTIONS} ? split(' ', $ENV{SSH_OPTIONS}) : ();
	my @@sudo = $ENV{SUDO} ? "SUDO=$ENV{SUDO}" : ();
	my @@ktrace = $ENV{KTRACE} ? "KTRACE=$ENV{KTRACE}" : ();
	my @@relayd = $ENV{RELAYD} ? "RELAYD=$ENV{RELAYD}" : ();
	my $dir = dirname($0);
	$dir = getcwd() if ! $dir || $dir eq ".";
	my @@cmd = ("ssh", @@opts, $self->{remotessh},
	    @@sudo, @@ktrace, @@relayd, "perl",
	    "-I", $dir, "$dir/".basename($0), $self->{forward},
	    $self->{listenaddr}, $self->{connectaddr}, $self->{connectport},
	    ($self->{testfile} ? "$dir/".basename($self->{testfile}) : ()));
	print STDERR "execute: @@cmd\n";
	exec @@cmd;
	die ref($self), " exec '@@cmd' failed: $!";
}

sub close_child {
	my $self = shift;
	close_pipes(delete $self->{pipe});
	return $self;
}

1;
@


1.6
log
@Align the three variants of Remote.pm.
@
text
@d1 1
a1 1
#	$OpenBSD: Remote.pm,v 1.5 2014/08/18 22:58:19 bluhm Exp $
d87 1
a87 1
	my @@opts = split(' ', $ENV{SSH_OPTIONS}) if $ENV{SSH_OPTIONS};
@


1.5
log
@Make the perl modules consistent for the multiple regression tests.
This includes coding style, better error messages and variable
naming.
@
text
@d1 1
a1 1
#	$OpenBSD: Remote.pm,v 1.4 2014/07/11 16:13:11 bluhm Exp $
d86 1
d91 2
a92 2
	my $curdir = dirname($0) || ".";
	$curdir = getcwd() if $curdir eq ".";
d95 1
a95 1
	    "-I", $curdir, "$curdir/".basename($0), $self->{forward},
d97 1
a97 1
	    ($self->{testfile} ? "$curdir/".basename($self->{testfile}) : ()));
@


1.4
log
@Fix dryrun for remote relayd test.
@
text
@d1 1
a1 1
#	$OpenBSD: Remote.pm,v 1.3 2014/06/22 14:18:01 bluhm Exp $
d3 1
a3 1
# Copyright (c) 2010-2013 Alexander Bluhm <bluhm@@openbsd.org>
d50 1
a50 1
	$args{up} ||= "Started";
d75 2
a76 4
	my $timeout = shift || 10;
	my $lsock = $self->loggrep(qr/^listen sock: /, $timeout)
	    or croak ref($self), " no listen sock in $self->{logfile} ".
		"after $timeout seconds";
a85 2

	print STDERR $self->{up}, "\n";
d91 4
a94 4
	$curdir = getcwd() if $curdir eq '.';
	my @@cmd = ('ssh', @@opts, $self->{remotessh},
	    @@sudo, @@ktrace, @@relayd, 'perl',
	    '-I', $curdir, "$curdir/".basename($0), $self->{forward},
d99 1
a99 1
	die "Exec @@cmd failed: $!";
@


1.3
log
@Fix the relayd regression tests.  Now they pass with and without
an obj directory.  The relayd process can also run on a remote
machine for different timing.
@
text
@d1 1
a1 1
#	$OpenBSD: Remote.pm,v 1.2 2013/01/04 14:01:49 bluhm Exp $
d51 1
a51 1
	$args{down} ||= $args{dryrun} ? "no actions" : "parent terminating";
@


1.2
log
@Sync relayd tests with socket splicing tests.
@
text
@d1 1
a1 1
#	$OpenBSD: Remote.pm,v 1.1 2012/12/28 20:36:25 bluhm Exp $
d51 1
a51 1
	$args{down} ||= "parent terminating";
d94 2
a95 2
	my $dir = dirname($0);
	$dir = getcwd() if ! $dir || $dir eq '.';
d98 1
a98 1
	    '-I', $dir, "$dir/".basename($0), $self->{forward},
d100 1
a100 1
	    ($self->{testfile} ? "$dir/".basename($self->{testfile}) : ()));
@


1.1
log
@Allow the relayd regression tests to run the relayd on a different
host from client and server.  Real TCP connections not running on
localhost provide a different timing uncovering more bugs.
@
text
@d1 1
a1 1
#	$OpenBSD$
d3 1
a3 1
# Copyright (c) 2010-2012 Alexander Bluhm <bluhm@@openbsd.org>
d98 1
a98 1
	    '-I', $dir, $dir.'/'.basename($0), $self->{forward},
d100 1
a100 1
	    ($self->{testfile} ? $dir.'/'.basename($self->{testfile}) : ()));
@

