head	1.5;
access;
symbols
	OPENBSD_6_0:1.5.0.10
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.8
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.6
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5;
locks; strict;
comment	@# @;


1.5
date	2014.07.10.10.19.06;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	loXzT9dsd77X1DLN;

1.4
date	2014.07.09.16.48.55;	author reyk;	state Exp;
branches;
next	1.3;
commitid	tyiEIIip8IP7h6pK;

1.3
date	2014.06.22.14.18.01;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	9lcQYgJu0eGKsg3G;

1.2
date	2014.05.08.15.55.32;	author andre;	state Exp;
branches;
next	1.1;

1.1
date	2014.05.05.12.31.56;	author andre;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Implement non-persistent connections in a cleaner way.  Every test
that offers multiple requets per HTTP connection is run twice.
First all requests are run over a single TCP connection.  Then for
each requests a separate TCP connection is established.  If a
requests during a persistent connection fails, a reconnect is done
as relayd cancels the whole connection.  This allows stricter tests
for filters.
OK reyk@@
@
text
@use strict;
use warnings;

my @@lengths = (1, 2, 4, 0, 3, 5);
our %args = (
    client => {
	func => \&http_client,
	lengths => \@@lengths,
	loggrep => {
		qr/403 Forbidden/ => 4,
	},
    },
    relayd => {
	protocol => [ "http",
	    'return error',
	    'pass',
	    'block request url log file "$curdir/args-http-filter-url-file.in" value "*" label "test_reject_label"',
	],
	loggrep => {
		qr/Forbidden/ => 4,
		qr/\[test_reject_label\, foo\.bar\/0\]/ => 2,
		qr/\[test_reject_label\, foo\.bar\/3\]/ => 2,
	},
    },
    server => {
	func => \&http_server,
    },
    lengths => [1, 2, 4, 5],
);

1;
@


1.4
log
@Update and extend the regress tests to use the new grammar of the
filtering rules.  Some of the filenames are based on the old grammar,
we keep them for now and just update the contents to have a
before/after comparison of the features.

Most of the work was done by Andre de Oliveira (andre@@)

OK bluhm@@ benno@@
@
text
@d10 1
a10 5
		qr/403 Forbidden/ => 2,
		qr/Server: OpenBSD relayd/ => 2,
		qr/Connection: close/ => 2,
		qr/Content-Length\: 3/ => 0,
		qr/Content-Length\: 4/ => 1,
a11 2
	mreqs => 1,
	httpnok => 1,
d20 3
a22 3
		qr/Forbidden/ => 2,
		qr/\[test_reject_label\, foo\.bar\/0\]/ => 1,
		qr/\[test_reject_label\, foo\.bar\/3\]/ => 1,
a26 3
	lengths => (1, 2, 4),
	mreqs => 4,
	nocheck => 1,
d28 1
@


1.3
log
@Fix the relayd regression tests.  Now they pass with and without
an obj directory.  The relayd process can also run on a remote
machine for different timing.
@
text
@d4 1
a4 1
my @@lengths = (1, 2, 4, 0, 3);
d7 1
a7 1
	func => sub { eval { http_client(@@_) }; warn $@@ },
d9 9
a17 1
	loggrep => qr/Forbidden/,
d22 2
a23 3
	    'label test_reject_label',
	    'url filter file "$curdir/args-http-filter-url-file.in" log',
	    'no label',
d26 3
a28 2
		qr/rejecting request/ => 1,
		qr/\[test_reject_label\, foo\.bar\/0\:/ => 1
d34 2
@


1.2
log
@Adjust this test contents from path keytype to url keytype to match the name of
the test file.

ok reyk
@
text
@d15 1
a15 1
	    'url filter file args-http-filter-url-file.in log',
@


1.1
log
@Replacing test files from previous commit to the right directory. There is no
trigger to run tests from relayd directory, so previous had no practical
effect.
@
text
@d15 1
a15 1
	    'path filter file args-http-filter-url-file.in log',
d20 1
a20 1
		qr/\[test_reject_label\, \/0\:/ => 1
@

