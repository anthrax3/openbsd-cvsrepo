head	1.5;
access;
symbols
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.4.0.4
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.2.0.6
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.4
	OPENBSD_5_8_BASE:1.2;
locks; strict;
comment	@# @;


1.5
date	2017.07.14.14.41.03;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	VrvXrAQYX3zpm11W;

1.4
date	2016.08.25.23.37.03;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	3HKSZ4c1OTMRjKfZ;

1.3
date	2016.08.25.22.56.13;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	aCXnzxhgJDfwKCFJ;

1.2
date	2015.07.20.05.37.49;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	k8VK1TtQP5xAiPzp;

1.1
date	2015.07.18.22.11.34;	author benno;	state Exp;
branches;
next	;
commitid	tCw6ZnA3ALMQ8qf7;


desc
@@


1.5
log
@Do not mix Perl read() with sysread().  Data could get stuck in the
buffered IO and test run-regress-args-http-chunked.pl would fail
on slow hardware.  Limit debug output to one line per 1% of data.
Improve function write_syswrite().  Sync with httpd regress.  Fix
whitespace.
@
text
@# test that a slow (in this case sleeping) client causes relayd to slow down
# reading from the server (instead of balooning its buffers)

use strict;
use warnings;
use Errno ':POSIX';

my @@errors = (EWOULDBLOCK);
my $errors = "(". join("|", map { $! = $_ } @@errors). ")";

my $size = 2**21;

our %args = (
    client => {
	fast => 1,
	max => 100,
	func => sub {
	    my $self = shift;
	    http_request($self , $size, "1.0", "");
	    http_response($self , $size);
	    print STDERR "going to sleep\n";
	    ${$self->{server}}->loggrep(qr/blocked write/, 8)
		or die "no blocked write in server.log";
	    read_char($self, $size);
	    return;
	},
	rcvbuf => 2**12,
	nocheck => 1,
    },
    relayd => {
	protocol => [ "http",
	    "tcp socket buffer 1024",
	    "match request header log",
	    "match request path log",
	],
    },
    server => {
	fast => 1,
	func => \&http_server,
	sndbuf => 2**12,
	sndtimeo => 2,
	loggrep => qr/blocked write .*: $errors/,

    },
    lengths => [$size],
);

1;
@


1.4
log
@Set relayd socket buffer size to reasonable value to make test pass
in different environments.
@
text
@d22 2
a23 2
	    ${$self->{server}}->loggrep(qr/short write \($errors\)/, 8)
		or die "no short write in server.log";
d42 1
a42 1
	loggrep => 'short write',
@


1.3
log
@Make relayd test slow-consumer more reliable.  Set SO_SNDTIMEO
sockopt correctly with Perl pack on i386.  Make it possible to grep
in each others client and server logfile.  Client does not simply
sleep but waits for short write at server.
@
text
@d32 1
a32 1
	    "tcp socket buffer 64",
@


1.2
log
@Fix white spaces.
@
text
@d6 4
d18 3
a20 2
	    http_request(@@_, $size, "1.0", "");
	    http_response(@@_, $size);
d22 3
a24 2
	    sleep 8;
	    read_char(@@_, $size);
d27 1
a27 1
	rcvbuf => 2**8,
d40 1
a40 1
	sndbuf => 2**8,
@


1.1
log
@add relayd regression test args-http-slow-consumer.pl
ok reyk@@, bluhm@@
@
text
@d14 9
a22 9
            http_request(@@_, $size, "1.0", "");
            http_response(@@_, $size);
            print STDERR "going to sleep\n";
            sleep 8;
            read_char(@@_, $size);
            return;
        },
        rcvbuf => 2**8,
        nocheck => 1,
d25 5
a29 5
        protocol => [ "http",
            "tcp socket buffer 64",
            "match request header log",
            "match request path log",
        ],
d32 5
a36 5
        fast => 1,
        func => \&http_server,
        sndbuf => 2**8,
        sndtimeo => 2,
        loggrep => 'short write',
@

