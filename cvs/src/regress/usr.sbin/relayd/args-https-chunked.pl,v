head	1.5;
access;
symbols
	OPENBSD_6_0:1.5.0.6
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.4.0.6
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.1.0.8
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.4
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.2
	OPENBSD_5_3_BASE:1.1;
locks; strict;
comment	@# @;


1.5
date	2015.04.29.08.45.53;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	1yMvczIkXPCE59EH;

1.4
date	2014.07.20.19.18.32;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	KBUibY42i7baeqrn;

1.3
date	2014.07.10.10.19.06;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	loXzT9dsd77X1DLN;

1.2
date	2014.07.09.16.48.55;	author reyk;	state Exp;
branches;
next	1.1;
commitid	tyiEIIip8IP7h6pK;

1.1
date	2013.01.21.20.16.57;	author bluhm;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Make some regular expressions more strict.  This allows the tests
to pass also if relayd is compiled with DEBUG.
@
text
@# test chunked https 1.1 connection over http relay

use strict;
use warnings;

my @@lengths = ([ 251, 10000, 10 ], 1, [2, 3]);
our %args = (
    client => {
	func => \&http_client,
	lengths => \@@lengths,
	http_vers => ["1.1"],
	ssl => 1,
    },
    relayd => {
	protocol => [ "http",
	    "match request header log foo",
	    "match response header log Transfer-Encoding",
	],
	loggrep => {
		"{Transfer-Encoding: chunked}" => 1,
		qr/\[\(null\)\]/ => 0,
	},
	forwardssl => 1,
	listenssl => 1,
    },
    server => {
	func => \&http_server,
	ssl => 1,
    },
    lengths => \@@lengths,
    md5 => [
	"bc3a3f39af35fe5b1687903da2b00c7f",
	"fccd8d69acceb0cc35f2fd4e2f6938d3",
	"c47658d102d5b989e0da09ce403f7463",
	"68b329da9893e34099c7d8ad5cb9c940",
	"897316929176464ebc9ad085f31e7284",
	"0ade138937c4b9cb36a28e2edb6485fc",
    ],
);

1;
@


1.4
log
@A HTTP connection may have multiple requests with content.  Allow
to specify an array of md5 hashes in the test arguments and check
all of them in the client and server log files.  So test that relayd
does not modify the http body.
@
text
@d20 1
a20 1
		"Transfer-Encoding: chunked" => 1,
@


1.3
log
@Implement non-persistent connections in a cleaner way.  Every test
that offers multiple requets per HTTP connection is run twice.
First all requests are run over a single TCP connection.  Then for
each requests a separate TCP connection is established.  If a
requests during a persistent connection fails, a reconnect is done
as relayd cancels the whole connection.  This allows stricter tests
for filters.
OK reyk@@
@
text
@d31 8
a38 1
    md5 => "bc3a3f39af35fe5b1687903da2b00c7f",
@


1.2
log
@Update and extend the regress tests to use the new grammar of the
filtering rules.  Some of the filenames are based on the old grammar,
we keep them for now and just update the contents to have a
before/after comparison of the features.

Most of the work was done by Andre de Oliveira (andre@@)

OK bluhm@@ benno@@
@
text
@d11 1
a12 1
	mreqs => 1,
d20 1
a20 1
		"Transfer-Encoding: chunked" => 2,
a28 1
	mreqs => scalar(@@lengths),
@


1.1
log
@Add ssl tests for https chunked and https contentlength over relayd.
@
text
@d12 1
d16 2
a17 2
	    "request header log foo",
	    "response header log Transfer-Encoding",
d19 4
a22 1
	loggrep => { "log 'Transfer-Encoding: chunked'" => 2 },
d29 1
@

