head	1.5;
access;
symbols
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.14
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.10
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.8
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.6
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5;
locks; strict;
comment	@# @;


1.5
date	2014.07.10.19.42.59;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	nk40kclwQAcI5z4r;

1.4
date	2014.07.10.10.19.06;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	loXzT9dsd77X1DLN;

1.3
date	2014.07.09.16.48.55;	author reyk;	state Exp;
branches;
next	1.2;
commitid	tyiEIIip8IP7h6pK;

1.2
date	2014.06.22.14.18.01;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	9lcQYgJu0eGKsg3G;

1.1
date	2014.05.02.14.50.26;	author andre;	state Exp;
branches;
next	;


desc
@@


1.5
log
@To make sure that at least anything is tested, add a length check
per default for the default length value in check_logs().  If a
test doesn't want this check, it has to disable it explicitly with
nocheck.  Also remove unneeded nocheck switches for deeper testing.
@
text
@use strict;
use warnings;

our %args = (
    client => {
	func => \&http_client,
	loggrep => {
	    'X-Server-Append: \d+\.\d+\.\d+\.\d+:\d+$' => 1,
	    'Set-Cookie: a=b\;' => 1,
	},
    },
    relayd => {
	protocol => [ "http",
	    'match request header append X-Client-Append value \
		"$REMOTE_ADDR:$REMOTE_PORT"',
	    'match response header append X-Server-Append value \
		"$SERVER_ADDR:$SERVER_PORT" \
		cookie set "a" value "b"',
	],
    },
    server => {
	func => \&http_server,
	loggrep => { 'X-Client-Append: \d+\.\d+\.\d+\.\d+:\d+$' => 1 },
    },
);

1;
@


1.4
log
@Implement non-persistent connections in a cleaner way.  Every test
that offers multiple requets per HTTP connection is run twice.
First all requests are run over a single TCP connection.  Then for
each requests a separate TCP connection is established.  If a
requests during a persistent connection fails, a reconnect is done
as relayd cancels the whole connection.  This allows stricter tests
for filters.
OK reyk@@
@
text
@a6 1
	len => 1,
@


1.3
log
@Update and extend the regress tests to use the new grammar of the
filtering rules.  Some of the filenames are based on the old grammar,
we keep them for now and just update the contents to have a
before/after comparison of the features.

Most of the work was done by Andre de Oliveira (andre@@)

OK bluhm@@ benno@@
@
text
@d8 3
a10 2
	loggrep => { 'X-Server-Append: \d+\.\d+\.\d+\.\d+:\d+$' => 1,
		'Set-Cookie: a=b\;' => 1,
@


1.2
log
@Fix the relayd regression tests.  Now they pass with and without
an obj directory.  The relayd process can also run on a remote
machine for different timing.
@
text
@d8 3
a10 1
	loggrep => { 'X-Server-Append: \d+\.\d+\.\d+\.\d+:\d+$' => 1 },
d14 5
a18 2
	    'request header append "$REMOTE_ADDR:$REMOTE_PORT" to X-Client-Append',
	    'response header append "$SERVER_ADDR:$SERVER_PORT" to X-Server-Append',
@


1.1
log
@Add regression tests to relayd to cover a few key types/actions combinations.

ok reyk
@
text
@d8 1
a8 1
	loggrep => { "X-Server-Append: 127.0.0.1:.*" => 1 },
d18 1
a18 1
	loggrep => { "X-Client-Append: 127.0.0.1:.*" => 1 },
@

