head	1.12;
access;
symbols
	OPENBSD_6_0:1.11.0.2
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.6
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.4
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.9.0.4
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.5.0.8
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.4
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.2
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2;
locks; strict;
comment	@# @;


1.12
date	2016.08.25.22.56.13;	author bluhm;	state Exp;
branches;
next	1.11;
commitid	aCXnzxhgJDfwKCFJ;

1.11
date	2016.05.03.19.13.04;	author bluhm;	state Exp;
branches;
next	1.10;
commitid	QUorL89Z4jPT2RKR;

1.10
date	2014.08.18.22.58.19;	author bluhm;	state Exp;
branches;
next	1.9;
commitid	Lrki66TGIJh8PoUM;

1.9
date	2014.07.11.15.38.44;	author bluhm;	state Exp;
branches;
next	1.8;
commitid	4Fj6TMeFzFnCmKj8;

1.8
date	2014.07.10.10.19.06;	author bluhm;	state Exp;
branches;
next	1.7;
commitid	loXzT9dsd77X1DLN;

1.7
date	2014.05.12.21.30.42;	author andre;	state Exp;
branches;
next	1.6;

1.6
date	2014.05.09.11.49.26;	author andre;	state Exp;
branches;
next	1.5;

1.5
date	2013.01.08.21.20.00;	author bluhm;	state Exp;
branches;
next	1.4;

1.4
date	2013.01.04.14.01.49;	author bluhm;	state Exp;
branches;
next	1.3;

1.3
date	2012.12.28.20.36.25;	author bluhm;	state Exp;
branches;
next	1.2;

1.2
date	2011.09.02.10.45.36;	author bluhm;	state Exp;
branches;
next	1.1;

1.1
date	2011.09.01.17.33.17;	author bluhm;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Make relayd test slow-consumer more reliable.  Set SO_SNDTIMEO
sockopt correctly with Perl pack on i386.  Make it possible to grep
in each others client and server logfile.  Client does not simply
sleep but waits for short write at server.
@
text
@#	$OpenBSD: Proc.pm,v 1.11 2016/05/03 19:13:04 bluhm Exp $

# Copyright (c) 2010-2016 Alexander Bluhm <bluhm@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

package Proc;
use Carp;
use Errno;
use File::Basename;
use IO::File;
use POSIX;
use Time::HiRes qw(time alarm sleep);

my %CHILDREN;

sub kill_children {
	my @@pids = @@_ ? @@_ : keys %CHILDREN
	    or return;
	my @@perms;
	foreach my $pid (@@pids) {
		if (kill(TERM => $pid) != 1 and $!{EPERM}) {
			push @@perms, $pid;
		}
	}
	if (my $sudo = $ENV{SUDO} and @@perms) {
		local $?;  # do not modify during END block
		my @@cmd = ($sudo, '/bin/kill', '-TERM', @@perms);
		system(@@cmd);
	}
	delete @@CHILDREN{@@pids};
}

BEGIN {
	$SIG{TERM} = $SIG{INT} = sub {
		my $sig = shift;
		kill_children();
		$SIG{TERM} = $SIG{INT} = 'DEFAULT';
		POSIX::raise($sig);
	};
}

END {
	kill_children();
	$SIG{TERM} = $SIG{INT} = 'DEFAULT';
}

sub new {
	my $class = shift;
	my $self = { @@_ };
	$self->{down} ||= "Shutdown";
	$self->{func} && ref($self->{func}) eq 'CODE'
	    or croak "$class func not given";
	$self->{logfile}
	    or croak "$class log file not given";
	open(my $fh, '>', $self->{logfile})
	    or die "$class log file $self->{logfile} create failed: $!";
	$fh->autoflush;
	$self->{log} = $fh;
	$self->{ppid} = $$;
	return bless $self, $class;
}

sub run {
	my $self = shift;

	pipe(my $reader, my $writer)
	    or die ref($self), " pipe to child failed: $!";
	defined(my $pid = fork())
	    or die ref($self), " fork child failed: $!";
	if ($pid) {
		$CHILDREN{$pid} = 1;
		$self->{pid} = $pid;
		close($reader);
		$self->{pipe} = $writer;
		return $self;
	}
	%CHILDREN = ();
	$SIG{TERM} = $SIG{INT} = 'DEFAULT';
	$SIG{__DIE__} = sub {
		die @@_ if $^S;
		warn @@_;
		IO::Handle::flush(\*STDERR);
		POSIX::_exit(255);
	};
	open(STDERR, '>&', $self->{log})
	    or die ref($self), " dup STDERR failed: $!";
	close($writer);
	open(STDIN, '<&', $reader)
	    or die ref($self), " dup STDIN failed: $!";
	close($reader);

	do {
		$self->child();
		print STDERR $self->{up}, "\n";
		$self->{begin} = time();
		$self->{func}->($self);
	} while ($self->{redo});
	$self->{end} = time();
	print STDERR "Shutdown", "\n";
	if ($self->{timefile}) {
		open(my $fh, '>>', $self->{timefile})
		    or die ref($self), " open $self->{timefile} failed: $!";
		printf $fh "time='%s' duration='%.10g' ".
		    "forward='%s' test='%s'\n",
		    scalar(localtime(time())), $self->{end} - $self->{begin},
		    $self->{forward}, basename($self->{testfile});
	}

	IO::Handle::flush(\*STDOUT);
	IO::Handle::flush(\*STDERR);
	POSIX::_exit(0);
}

sub wait {
	my $self = shift;
	my $flags = shift;

	# if we a not the parent process, assume the child is still running
	return 0 unless $self->{ppid} == $$;

	my $pid = $self->{pid}
	    or croak ref($self), " no child pid";
	my $kid = waitpid($pid, $flags);
	if ($kid > 0) {
		my $status = $?;
		my $code;
		$code = "exit: ".   WEXITSTATUS($?) if WIFEXITED($?);
		$code = "signal: ". WTERMSIG($?)    if WIFSIGNALED($?);
		$code = "stop: ".   WSTOPSIG($?)    if WIFSTOPPED($?);
		delete $CHILDREN{$pid} if WIFEXITED($?) || WIFSIGNALED($?);
		return wantarray ? ($kid, $status, $code) : $kid;
	}
	return $kid;
}

sub loggrep {
	my $self = shift;
	my($regex, $timeout) = @@_;

	my $end;
	$end = time() + $timeout if $timeout;

	do {
		my($kid, $status, $code) = $self->wait(WNOHANG);
		if ($kid > 0 && $status != 0 && !$self->{dryrun}) {
			# child terminated with failure
			die ref($self), " child status: $status $code";
		}
		open(my $fh, '<', $self->{logfile})
		    or die ref($self), " log file open failed: $!";
		my @@match = grep { /$regex/ } <$fh>;
		return wantarray ? @@match : $match[0] if @@match;
		close($fh);
		# pattern not found
		if ($kid == 0) {
			# child still running, wait for log data
			sleep .1;
		} else {
			# child terminated, no new log data possible
			return;
		}
	} while ($timeout and time() < $end);

	return;
}

sub up {
	my $self = shift;
	my $timeout = shift || 10;
	$self->loggrep(qr/$self->{up}/, $timeout)
	    or croak ref($self), " no '$self->{up}' in $self->{logfile} ".
		"after $timeout seconds";
	return $self;
}

sub down {
	my $self = shift;
	my $timeout = shift || 30;
	$self->loggrep(qr/$self->{down}/, $timeout)
	    or croak ref($self), " no '$self->{down}' in $self->{logfile} ".
		"after $timeout seconds";
	return $self;
}

sub kill_child {
	my $self = shift;
	kill_children($self->{pid});
	return $self;
}

1;
@


1.11
log
@Fix some Perl statements perlcritic was bitching about: Variable
declared in conditional statement.
@
text
@d1 1
a1 1
#	$OpenBSD: Proc.pm,v 1.10 2014/08/18 22:58:19 bluhm Exp $
d3 1
a3 1
# Copyright (c) 2010-2014 Alexander Bluhm <bluhm@@openbsd.org>
d73 1
d131 3
@


1.10
log
@Make the perl modules consistent for the multiple regression tests.
This includes coding style, better error messages and variable
naming.
@
text
@d1 1
a1 1
#	$OpenBSD: Proc.pm,v 1.9 2014/07/11 15:38:44 bluhm Exp $
d150 2
a151 1
	my $end = time() + $timeout if $timeout;
@


1.9
log
@Add a time.log file that accumulates timing information about the
executed tests.  This allows to micro benchmark relayd.
based on a diff from andre@@; OK reyk@@
@
text
@d1 1
a1 1
#	$OpenBSD: Proc.pm,v 1.8 2014/07/10 10:19:06 bluhm Exp $
d3 1
a3 1
# Copyright (c) 2010-2013 Alexander Bluhm <bluhm@@openbsd.org>
d80 1
a80 1
	    or die ref($self), " pipe to child failed";
d82 1
a82 1
	    or die ref($self), " fork child failed";
d180 1
a180 1
	    or croak ref($self), " no $self->{up} in $self->{logfile} ".
d189 1
a189 1
	    or croak ref($self), " no $self->{down} in $self->{logfile} ".
@


1.8
log
@Implement non-persistent connections in a cleaner way.  Every test
that offers multiple requets per HTTP connection is run twice.
First all requests are run over a single TCP connection.  Then for
each requests a separate TCP connection is established.  If a
requests during a persistent connection fails, a reconnect is done
as relayd cancels the whole connection.  This allows stricter tests
for filters.
OK reyk@@
@
text
@d1 1
a1 1
#	$OpenBSD: Proc.pm,v 1.7 2014/05/12 21:30:42 andre Exp $
d23 1
d108 1
d111 1
d113 9
a123 1

@


1.7
log
@Refactors "dummyrun" flag as "dryrun" with an approach similar to the one used
for client/server processes checks through $self->{down} state control
variable, while here, do not instantiate a client when noclient is defined,
reflecting server object instantiation behaviour.

ok bluhm
@
text
@d1 1
a1 1
#	$OpenBSD: Proc.pm,v 1.6 2014/05/09 11:49:26 andre Exp $
d104 5
a108 3
	$self->child();
	print STDERR $self->{up}, "\n";
	$self->{func}->($self);
@


1.6
log
@Adds $relayd->{dummyrun} and $client->{noclient} flags to relayd tests
framework. These flags can be set from test file which eases performing
dry-runs of relayd long enough to do relayd.conf parsing, thus enabling the
grammar/parser-only tests.  While here, fix and improves args-http-mark.pl to a
correct use-case.

ok reyk
@
text
@d1 1
a1 1
#	$OpenBSD: Proc.pm,v 1.5 2013/01/08 21:20:00 bluhm Exp $
d141 1
a141 1
		if ($kid > 0 && $status != 0 && not $self->{dummyrun}) {
@


1.5
log
@Autoflush the log file of the child process.
@
text
@d1 1
a1 1
#	$OpenBSD: Proc.pm,v 1.4 2013/01/04 14:01:49 bluhm Exp $
d141 1
a141 1
		if ($kid > 0 && $status != 0) {
@


1.4
log
@Sync relayd tests with socket splicing tests.
@
text
@d1 1
a1 1
#	$OpenBSD: Proc.pm,v 1.3 2012/12/28 20:36:25 bluhm Exp $
d3 1
a3 1
# Copyright (c) 2010-2012 Alexander Bluhm <bluhm@@openbsd.org>
d23 1
d70 1
@


1.3
log
@Allow the relayd regression tests to run the relayd on a different
host from client and server.  Real TCP connections not running on
localhost provide a different timing uncovering more bugs.
@
text
@d1 1
a1 1
#	$OpenBSD: Proc.pm,v 1.2 2011/09/02 10:45:36 bluhm Exp $
d3 1
a3 1
# Copyright (c) 2010,2011 Alexander Bluhm <bluhm@@openbsd.org>
@


1.2
log
@Add tests for relayd protocol http 1.0 and 1.1.
@
text
@d1 1
a1 1
#	$OpenBSD: Proc.pm,v 1.1 2011/09/01 17:33:17 bluhm Exp $
d22 1
a22 1
use List::Util qw(first);
d29 1
a29 1
	my @@pids = keys %CHILDREN
d31 7
a37 1
	if (my $sudo = $ENV{SUDO}) {
d39 1
a39 1
		my @@cmd = ($sudo, '/bin/kill', '-TERM', @@pids);
a40 2
	} else {
		kill TERM => @@pids;
d42 1
a42 1
	%CHILDREN = ();
d76 2
d83 2
d97 4
d176 6
@


1.1
log
@Add regression tests for relaying connections through relayd.  This
is useful to ensure that socket splicing is working correctly.
Server, relayd, client with different config are started for each
subtest.  Data must pass unmodified.
@
text
@d1 1
a1 1
#	$OpenBSD$
d133 2
a134 2
		my $match = first { /$regex/ } <$fh>;
		return $match if $match;
@

