head	1.4;
access;
symbols
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.10
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.8
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.6
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.1.0.6
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.2
	OPENBSD_5_4_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2014.07.20.19.18.32;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	KBUibY42i7baeqrn;

1.3
date	2014.07.10.10.19.06;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	loXzT9dsd77X1DLN;

1.2
date	2014.07.09.16.48.55;	author reyk;	state Exp;
branches;
next	1.1;
commitid	tyiEIIip8IP7h6pK;

1.1
date	2013.06.05.19.09.44;	author bluhm;	state Exp;
branches;
next	;


desc
@@


1.4
log
@A HTTP connection may have multiple requests with content.  Allow
to specify an array of md5 hashes in the test arguments and check
all of them in the client and server log files.  So test that relayd
does not modify the http body.
@
text
@# test persistent http connection with request filter

use strict;
use warnings;

my @@lengths = (251, 16384, 0, 1, 2, 3, 4, 5);
our %args = (
    client => {
	func => \&http_client,
	lengths => \@@lengths,
	loggrep => qr/Client missing http 2 response/,
    },
    relayd => {
	protocol => [ "http",
	    'block request path "/2"',
	],
	loggrep => qr/Forbidden/,
    },
    server => {
	func => \&http_server,
    },
    lengths => [251, 16384, 0, 1, 3, 4, 5],
    md5 => [
	"bc3a3f39af35fe5b1687903da2b00c7f",
	"52afece07e61264c3087ddf52f729376",
	"d41d8cd98f00b204e9800998ecf8427e",
	"68b329da9893e34099c7d8ad5cb9c940",
	"0ade138937c4b9cb36a28e2edb6485fc",
	"e686f5db1f8610b65f98f3718e1a5b72",
	"e5870c1091c20ed693976546d23b4841",
	"bc3a3f39af35fe5b1687903da2b00c7f",
	"52afece07e61264c3087ddf52f729376",
	"d41d8cd98f00b204e9800998ecf8427e",
	"68b329da9893e34099c7d8ad5cb9c940",
	"0ade138937c4b9cb36a28e2edb6485fc",
	"e686f5db1f8610b65f98f3718e1a5b72",
	"e5870c1091c20ed693976546d23b4841",
    ],
);

1;
@


1.3
log
@Implement non-persistent connections in a cleaner way.  Every test
that offers multiple requets per HTTP connection is run twice.
First all requests are run over a single TCP connection.  Then for
each requests a separate TCP connection is established.  If a
requests during a persistent connection fails, a reconnect is done
as relayd cancels the whole connection.  This allows stricter tests
for filters.
OK reyk@@
@
text
@d23 16
a38 1
    md5 => "bc3a3f39af35fe5b1687903da2b00c7f",
@


1.2
log
@Update and extend the regress tests to use the new grammar of the
filtering rules.  Some of the filenames are based on the old grammar,
we keep them for now and just update the contents to have a
before/after comparison of the features.

Most of the work was done by Andre de Oliveira (andre@@)

OK bluhm@@ benno@@
@
text
@d9 1
a9 2
	# relayd closes the connection on the first blocked request
	func => sub { eval { http_client(@@_) }; warn $@@ },
a11 2
	mreqs => 1,
	httpnok => 1,
a20 2
	mreqs => 7,
	nocheck => 1,
d22 1
a22 1
    lengths => [251, 16384, 0, 1],
@


1.1
log
@Add relayd tests for the HTTP keepalive filter bugfix.
@
text
@d13 2
d18 1
a18 1
	    'request path filter "/2"',
d20 1
a20 1
	loggrep => qr/rejecting request/,
d24 2
@

