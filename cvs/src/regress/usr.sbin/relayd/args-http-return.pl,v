head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.12
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.2.0.14
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.10
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.8
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.6
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.4
	OPENBSD_5_6_BASE:1.2;
locks; strict;
comment	@# @;


1.2
date	2014.07.09.16.48.55;	author reyk;	state Exp;
branches;
next	1.1;
commitid	tyiEIIip8IP7h6pK;

1.1
date	2014.05.02.14.50.26;	author andre;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Update and extend the regress tests to use the new grammar of the
filtering rules.  Some of the filenames are based on the old grammar,
we keep them for now and just update the contents to have a
before/after comparison of the features.

Most of the work was done by Andre de Oliveira (andre@@)

OK bluhm@@ benno@@
@
text
@use strict;
use warnings;

our %args = (
    client => {
	func => \&http_client,
	# XXX add more paths to match a case where it pass
	path => "query?foo=bar&ok=yes",
	nocheck => 1,
	httpnok => 1,
    },
    relayd => {
	protocol => [ "http",
	    'return error',
	    'pass',
	    'block request query log "foo" value "bar" label \
		"expect_foobar_return_test"',
	],
	loggrep => { 'Forbidden \(403 Forbidden\), \[expect_foobar_return_test, foo: bar\]' => 1 },
    },
    server => {
	noserver => 1,
	nocheck => 1,
    },
);

1;
@


1.1
log
@Add regression tests to relayd to cover a few key types/actions combinations.

ok reyk
@
text
@d15 3
a17 3
	    'label "expect_foobar_return_test"',
	    'request query expect "baz" from "foo" log',
	    'no label',
d19 1
a19 3
	loggrep => {
	    ' \(403 Forbidden\), \[expect_foobar_return_test, foo: bar\]' => 1
	},
@

