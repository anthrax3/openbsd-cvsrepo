head	1.1;
access;
symbols
	OPENBSD_6_2:1.1.0.8
	OPENBSD_6_2_BASE:1.1
	OPENBSD_6_1:1.1.0.10
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.6
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.2
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.4
	OPENBSD_5_8_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2015.05.17.22.49.03;	author bluhm;	state Exp;
branches;
next	;
commitid	ZmEdEsG37OVW32LM;


desc
@@


1.1
log
@Add test cases for a crash reported by Bertrand PROVOST.  When a
HTTP client writes multiple requests or chunks in a single transfer,
relayd invokes the libevent callback manually for the next data.
If the callback closes the session, this results in an use after
free.
Test an invalid second request method, test an invalid header line
in the second PUT request, test an invalid second chunked length
for a PUT request.  Also test multiple valid HTTP 1.1 PUT requests
with chunked body.
To detect crashes of relayd, start it with "prefork 1" and grep for
"lost child" log messages.  Unfortunately only the first child is
monitored by the parent.
@
text
@# test chunked https request over http relay

use strict;
use warnings;

my @@lengths = ([ 251, 10000, 10 ], 1, [2, 3]);
our %args = (
    client => {
	func => \&http_client,
	ssl => 1,
	lengths => \@@lengths,
	http_vers => ["1.1"],
	method => "PUT",
    },
    relayd => {
	protocol => [ "http",
	    "match request header log Transfer-Encoding",
	    "match response header log bar",
	],
	forwardssl => 1,
	listenssl => 1,
	loggrep => {
		qr/\[Transfer-Encoding: chunked\]/ => 1,
		qr/\[\(null\)\]/ => 0,
	},
    },
    server => {
	func => \&http_server,
	ssl => 1,
    },
    lengths => \@@lengths,
    md5 => [
	"bc3a3f39af35fe5b1687903da2b00c7f",
	"fccd8d69acceb0cc35f2fd4e2f6938d3",
	"c47658d102d5b989e0da09ce403f7463",
	"68b329da9893e34099c7d8ad5cb9c940",
	"897316929176464ebc9ad085f31e7284",
	"0ade138937c4b9cb36a28e2edb6485fc",
    ],
);

1;
@
