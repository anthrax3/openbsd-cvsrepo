head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.14
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.10
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.8
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.6
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.4
	OPENBSD_5_6_BASE:1.2;
locks; strict;
comment	@# @;


1.2
date	2014.07.11.11.48.50;	author reyk;	state Exp;
branches;
next	1.1;
commitid	6F05OKHLwEQdKZuE;

1.1
date	2014.07.10.11.56.11;	author reyk;	state Exp;
branches;
next	;
commitid	Zhns4mligOWElT1h;


desc
@@


1.2
log
@Simplify the code that handles the HTTP headers by using an RB tree
with associated lists instead of the complicated lookup table and
"others" list.  This might add a little malloc overhead for common
headers but also fixes some issues like the handling of repeated
headers -  for example, handling of multiple "Set-Cookie" headers.

ok bluhm@@ (regress part)
ok benno@@
@
text
@use strict;
use warnings;

my $name = "Set-Cookie";
my %header = ("$name" => [ "test=a;", "test=b;" ]);
our %args = (
    client => {
	func => \&http_client,
	loggrep => {
		qr/$name: test=c/ => 1,
	}
    },
    relayd => {
	protocol => [ "http",
	    'match response header set "'.$name.'" value "test=c"',
	],
    },
    server => {
	func => \&http_server,
	header => \%header,
	loggrep => {
		qr/$name: test=a/ => 1
	},
    },
);

1;
@


1.1
log
@Add support to test handling of repeated headers.

From RFC 7230, section 3.2.2:
"A sender MUST NOT generate multiple header fields with the same field
name in a message unless either the entire field value for that
header field is defined as a comma-separated list [i.e., #(values)]
or the header field is a well-known exception (as noted below)."
@
text
@d4 1
a4 1
my $name = "X-Set-Cookie";
@

