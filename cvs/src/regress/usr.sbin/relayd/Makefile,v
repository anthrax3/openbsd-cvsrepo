head	1.14;
access;
symbols
	OPENBSD_6_1:1.14.0.2
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.12.0.4
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.11.0.4
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.10.0.4
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.9.0.4
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.7.0.4
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.5.0.4
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.2
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2;
locks; strict;
comment	@# @;


1.14
date	2016.09.23.20.04.21;	author bluhm;	state Exp;
branches;
next	1.13;
commitid	XpIPPlo1kBCd2qhx;

1.13
date	2016.09.02.21.30.34;	author bluhm;	state Exp;
branches;
next	1.12;
commitid	sbZCO4zszQKrda5x;

1.12
date	2015.10.09.17.51.08;	author bluhm;	state Exp;
branches;
next	1.11;
commitid	lBQwMGq8qqQMyyzi;

1.11
date	2015.05.22.19.09.18;	author bluhm;	state Exp;
branches;
next	1.10;
commitid	DHpp83NEgNDFXx2X;

1.10
date	2014.12.31.01.25.07;	author bluhm;	state Exp;
branches;
next	1.9;
commitid	DkOCw4SRDM2yh7oP;

1.9
date	2014.07.11.20.41.20;	author bluhm;	state Exp;
branches;
next	1.8;
commitid	rghTlQRdYGi3EoZU;

1.8
date	2014.06.22.14.18.01;	author bluhm;	state Exp;
branches;
next	1.7;
commitid	9lcQYgJu0eGKsg3G;

1.7
date	2013.08.11.21.01.59;	author bluhm;	state Exp;
branches;
next	1.6;

1.6
date	2013.08.09.19.26.16;	author bluhm;	state Exp;
branches;
next	1.5;

1.5
date	2013.01.04.14.01.49;	author bluhm;	state Exp;
branches;
next	1.4;

1.4
date	2012.12.28.20.36.25;	author bluhm;	state Exp;
branches;
next	1.3;

1.3
date	2012.11.28.00.40.36;	author bluhm;	state Exp;
branches;
next	1.2;

1.2
date	2011.09.02.17.02.10;	author bluhm;	state Exp;
branches;
next	1.1;

1.1
date	2011.09.01.17.33.17;	author bluhm;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Check wether sudo or doas is working once at the beginning of the
test.
@
text
@#	$OpenBSD: Makefile,v 1.13 2016/09/02 21:30:34 bluhm Exp $

# The following ports must be installed for the regression tests:
# p5-IO-Socket-INET6	object interface for AF_INET and AF_INET6 domain sockets
# p5-Socket6		Perl defines relating to AF_INET6 sockets
# p5-IO-Socket-SSL	perl interface to SSL sockets
#
# Check wether all required perl packages are installed.  If some
# are missing print a warning and skip the tests, but do not fail.

PERL_REQUIRE !=	perl -Mstrict -Mwarnings -e ' \
    eval { require IO::Socket::INET6 } or print $@@; \
    eval { require Socket6 } or print $@@; \
    eval { require IO::Socket::SSL } or print $@@; \
'
.if ! empty (PERL_REQUIRE)
regress:
	@@echo "${PERL_REQUIRE}"
	@@echo install these perl packages for additional tests
	@@echo SKIPPED
.endif

.if make (regress) || make (all)
.BEGIN:
.if empty (REMOTE_SSH)
	${SUDO} true
.else
	ssh -t ${REMOTE_SSH} ${SUDO} true
.endif
.endif

# Fill out these variables if you want to test relayd with
# the relayd process running on a remote machine.  You have to specify
# a local and remote ip address for the tcp connections.  To control
# the remote machine you need a hostname for ssh to log in.  All the
# test files must be in the same directory local and remote.

LOCAL_ADDR ?=
REMOTE_ADDR ?=
REMOTE_SSH ?=

# Automatically generate regress targets from test cases in directory.

ARGS !=			cd ${.CURDIR} && ls args-*.pl
TARGETS ?=		${ARGS}
REGRESS_TARGETS =	${TARGETS:S/^/run-regress-/}
CLEANFILES +=		*.log relayd.conf ktrace.out stamp-*
CLEANFILES +=		*.pem *.req *.crt *.key *.srl

# Set variables so that make runs with and without obj directory.
# Only do that if necessary to keep visible output short.

.if ${.CURDIR} == ${.OBJDIR}
PERLINC =
PERLPATH =
.else
PERLINC =	-I${.CURDIR}
PERLPATH =	${.CURDIR}/
.endif

# The arg tests take a perl hash with arguments controlling the
# test parameters.  Generally they consist of client, relayd, server.

.for a in ${ARGS}
run-regress-$a: $a
	@@echo '\n======== $@@ ========'
.if empty (REMOTE_SSH)
	time SUDO=${SUDO} KTRACE=${KTRACE} RELAYD=${RELAYD} perl ${PERLINC} ${PERLPATH}relayd.pl copy ${PERLPATH}$a
	time SUDO=${SUDO} KTRACE=${KTRACE} RELAYD=${RELAYD} perl ${PERLINC} ${PERLPATH}relayd.pl splice ${PERLPATH}$a
.else
	time SUDO=${SUDO} KTRACE=${KTRACE} RELAYD=${RELAYD} perl ${PERLINC} ${PERLPATH}remote.pl copy ${LOCAL_ADDR} ${REMOTE_ADDR} ${REMOTE_SSH} ${PERLPATH}$a
	time SUDO=${SUDO} KTRACE=${KTRACE} RELAYD=${RELAYD} perl ${PERLINC} ${PERLPATH}remote.pl splice ${LOCAL_ADDR} ${REMOTE_ADDR} ${REMOTE_SSH} ${PERLPATH}$a
.endif
.endfor

# create certificates for TLS

.for ip in ${REMOTE_ADDR} 127.0.0.1
${ip}.crt: ca.crt
	openssl req -batch -new -subj /L=OpenBSD/O=relayd-regress/OU=relayd/CN=${ip}/ -nodes -newkey rsa -keyout ${ip}.key -x509 -out $@@
.if empty (REMOTE_SSH)
	${SUDO} cp 127.0.0.1.crt /etc/ssl/
	${SUDO} cp 127.0.0.1.key /etc/ssl/private/
.else
	scp ${REMOTE_ADDR}.crt root@@${REMOTE_SSH}:/etc/ssl/
	scp ${REMOTE_ADDR}.key root@@${REMOTE_SSH}:/etc/ssl/private/
	scp ca.crt ca.key ${REMOTE_SSH}:
.endif
.endfor

ca.crt:
	openssl req -batch -new -subj /L=OpenBSD/O=relayd-regress/OU=ca/CN=root/ -nodes -newkey rsa -keyout ca.key -x509 -out ca.crt

server.req:
	openssl req -batch -new -subj /L=OpenBSD/O=relayd-regress/OU=server/CN=localhost/ -nodes -newkey rsa -keyout server.key -out server.req

server.crt: ca.crt server.req
	openssl x509 -CAcreateserial -CAkey ca.key -CA ca.crt -req -in server.req -out server.crt

${REGRESS_TARGETS:M*ssl*} ${REGRESS_TARGETS:M*https*}: server.crt
.if empty (REMOTE_SSH)
${REGRESS_TARGETS:M*ssl*} ${REGRESS_TARGETS:M*https*}: 127.0.0.1.crt
.else
${REGRESS_TARGETS:M*ssl*} ${REGRESS_TARGETS:M*https*}: ${REMOTE_ADDR}.crt
.endif

# make perl syntax check for all args files

.PHONY: syntax

syntax: stamp-syntax

stamp-syntax: ${ARGS}
.for a in ${ARGS}
	@@perl -c ${PERLPATH}$a
.endfor
	@@date >$@@

.include <bsd.regress.mk>
@


1.13
log
@Print SKIPPED if a regress test cannot be executed for some reason.
This allows to identify such tests by looking at their output.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.12 2015/10/09 17:51:08 bluhm Exp $
d23 9
a70 1
	ssh -t ${REMOTE_SSH} ${SUDO} true
@


1.12
log
@Keep relayd test certificate names in sync with syslogd.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.11 2015/05/22 19:09:18 bluhm Exp $
d20 1
@


1.11
log
@Add tests for relayd TLS inspection with plain SSL and HTTPS.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.10 2014/12/31 01:25:07 bluhm Exp $
d71 1
a71 1
	openssl req -batch -new -subj /L=OpenBSD/O=relayd-regress/OU=relay/CN=${ip}/ -nodes -newkey rsa -keyout ${ip}.key -x509 -out $@@
@


1.10
log
@Create CA and certificates for TLS tests consistently.  Better
logging of SSL errors.  Do not import unneeded Socket constants.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.9 2014/07/11 20:41:20 bluhm Exp $
d70 1
a70 1
${ip}.crt:
d78 1
@


1.9
log
@Make the test output easier to read by splitting the test cases
with an empty line and a header line.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.8 2014/06/22 14:18:01 bluhm Exp $
d37 2
a38 1
CLEANFILES +=		*.log *.pem *.crt *.key relayd.conf ktrace.out stamp-*
d67 1
a67 1
# create the certificates for SSL
d71 1
a71 1
	openssl req -batch -new -nodes -newkey rsa -keyout ${ip}.key -subj /CN=${ip}/ -x509 -out $@@
d81 2
a82 2
server-cert.pem:
	openssl req -batch -new -nodes -newkey rsa -keyout server-key.pem -subj /CN=localhost/ -x509 -out $@@
d84 7
a90 1
${REGRESS_TARGETS:M*ssl*} ${REGRESS_TARGETS:M*https*}: server-cert.pem
@


1.8
log
@Fix the relayd regression tests.  Now they pass with and without
an obj directory.  The relayd process can also run on a remote
machine for different timing.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.7 2013/08/11 21:01:59 bluhm Exp $
d55 1
@


1.7
log
@Use variable REMOTE_SSH instead of a fixed name for the testing host.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.6 2013/08/09 19:26:16 bluhm Exp $
d37 1
a37 1
CLEANFILES +=		*.log *.pem relayd.conf ktrace.out stamp-*
d67 11
a77 2
/etc/ssl/127.0.0.1.crt:
	${SUDO} openssl req -batch -new -nodes -newkey rsa -keyout /etc/ssl/private/127.0.0.1.key -subj /CN=127.0.0.1/ -x509 -out $@@
d82 6
a87 2
${REGRESS_TARGETS:M*ssl*} ${REGRESS_TARGETS:M*https*}: \
    /etc/ssl/127.0.0.1.crt server-cert.pem
@


1.6
log
@Check wether all required perl packages are installed.  If some
are missing print a warning and skip the tests, but do not fail.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.5 2013/01/04 14:01:49 bluhm Exp $
d16 1
a16 1
.if ! empty(PERL_REQUIRE)
d37 1
a37 1
CLEANFILES =		*.log *.pem relayd.conf ktrace.out stamp-*
d59 1
a59 1
	ssh -t q0 ${SUDO} true
@


1.5
log
@Sync relayd tests with socket splicing tests.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.4 2012/12/28 20:36:25 bluhm Exp $
d7 3
d11 10
a20 4
ARGS !=			cd ${.CURDIR} && ls args-*.pl
TARGETS ?=		${ARGS}
REGRESS_TARGETS =	${TARGETS:S/^/run-regress-/}
CLEANFILES =		*.log *.pem relayd.conf ktrace.out stamp-*
d31 7
@


1.4
log
@Allow the relayd regression tests to run the relayd on a different
host from client and server.  Real TCP connections not running on
localhost provide a different timing uncovering more bugs.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.3 2012/11/28 00:40:36 bluhm Exp $
d11 1
a11 1
CLEANFILES =		*.log *.pem relayd.conf ktrace.out
d49 2
d59 12
@


1.3
log
@Set used environment variables explicitly in makefile and use them
consistently in relayd regression test.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.2 2011/09/02 17:02:10 bluhm Exp $
d13 10
d39 1
d42 5
@


1.2
log
@Add tests for relayd http put and https.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.1 2011/09/01 17:33:17 bluhm Exp $
d29 2
a30 2
	time SUDO=${SUDO} perl ${PERLINC} ${PERLPATH}relayd.pl copy ${PERLPATH}$a
	time SUDO=${SUDO} perl ${PERLINC} ${PERLPATH}relayd.pl splice ${PERLPATH}$a
@


1.1
log
@Add regression tests for relaying connections through relayd.  This
is useful to ensure that socket splicing is working correctly.
Server, relayd, client with different config are started for each
subtest.  Data must pass unmodified.
@
text
@d1 1
a1 1
#	$OpenBSD$
d39 2
a40 3
${REGRESS_TARGETS:M*ssl-client*}: /etc/ssl/127.0.0.1.crt

${REGRESS_TARGETS:M*ssl-server*}: server-cert.pem
@

