head	1.3;
access;
symbols
	OPENBSD_6_0:1.3.0.10
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.8
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.6
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.4
	OPENBSD_5_6_BASE:1.3;
locks; strict;
comment	@# @;


1.3
date	2014.07.10.10.19.06;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	loXzT9dsd77X1DLN;

1.2
date	2014.07.09.16.48.55;	author reyk;	state Exp;
branches;
next	1.1;
commitid	tyiEIIip8IP7h6pK;

1.1
date	2014.05.02.14.50.26;	author andre;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Implement non-persistent connections in a cleaner way.  Every test
that offers multiple requets per HTTP connection is run twice.
First all requests are run over a single TCP connection.  Then for
each requests a separate TCP connection is established.  If a
requests during a persistent connection fails, a reconnect is done
as relayd cancels the whole connection.  This allows stricter tests
for filters.
OK reyk@@
@
text
@# test http block cookies

use strict;
use warnings;

my @@lengths = (1, 2, 3, 4);
my @@cookies = ("med=thx; domain=.foo.bar; path=/; expires=Mon, 27-Oct-2014 04:11:56 GMT;", "", "", "");
our %args = (
    client => {
	func => \&http_client,
	loggrep => {
	    qr/Client missing http 1 response/ => 2,
	    qr/Set-Cookie: a\=b\;/ => 6,
	},
	cookies => \@@cookies,
	lengths => \@@lengths,
    },
    relayd => {
	protocol => [ "http",
	    'block request cookie log "med" value "thx"',
	    'match response cookie append "a" value "b" tag "cookie"',
	    'pass tagged "cookie"',
	],
	loggrep => qr/Forbidden, \[Cookie: med=thx.*/,
    },
    server => {
	func => \&http_server,
    },
    lengths => [2, 3, 4],
);

1;
@


1.2
log
@Update and extend the regress tests to use the new grammar of the
filtering rules.  Some of the filenames are based on the old grammar,
we keep them for now and just update the contents to have a
before/after comparison of the features.

Most of the work was done by Andre de Oliveira (andre@@)

OK bluhm@@ benno@@
@
text
@d12 2
a13 2
	    qr/Client missing http 1 response/ => 1,
	    qr/Set-Cookie: a\=b\;/ => 3,
a16 2
	httpnok => 1,
	mreqs => 1,
a27 2
	mreqs => 3,
	nocheck => 1,
d29 1
@


1.1
log
@Add regression tests to relayd to cover a few key types/actions combinations.

ok reyk
@
text
@d1 1
a1 1
# test http block
d6 2
d10 9
a18 5
	func => sub { eval { http_client(@@_) }; warn $@@ },
	loggrep => qr/Client missing http 251 response/,
	cookie => "med=thx; domain=.foo.bar; path=/; expires=Mon, 27-Oct-2014 04:11:56 GMT;",
	path => "anypath",
	nocheck => 1,
d22 3
a24 1
	    'request cookie filter "thx" from "med" log',
d26 1
a26 1
	loggrep => qr/rejecting request, \[med: thx\]/,
d29 2
a30 1
	noserver => 1,
@

