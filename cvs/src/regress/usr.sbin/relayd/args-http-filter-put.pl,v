head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.12
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.10
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.8
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.6
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.4
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.1.0.8
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.4
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.2
	OPENBSD_5_3_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2014.07.09.16.48.55;	author reyk;	state Exp;
branches;
next	1.1;
commitid	tyiEIIip8IP7h6pK;

1.1
date	2013.02.07.22.56.27;	author bluhm;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Update and extend the regress tests to use the new grammar of the
filtering rules.  Some of the filenames are based on the old grammar,
we keep them for now and just update the contents to have a
before/after comparison of the features.

Most of the work was done by Andre de Oliveira (andre@@)

OK bluhm@@ benno@@
@
text
@# test http put with request filter

use strict;
use warnings;

our %args = (
    client => {
	func => \&http_client,
	len => 1,
	method => 'PUT',
    },
    relayd => {
	protocol => [ "http",
	    'block request path "/2"',
	],
	loggrep => qr/done/,
    },
    server => {
	func => \&http_server,
    },
    len => 1,
    md5 => "68b329da9893e34099c7d8ad5cb9c940",
);

1;
@


1.1
log
@Add relayd regression tests with http filter and late connect.
@
text
@d14 1
a14 1
	    'request path filter "/2"',
@

