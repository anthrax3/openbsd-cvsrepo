head	1.2;
access;
symbols
	OPENBSD_6_0:1.2.0.6
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.4
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.1.0.6
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.4
	OPENBSD_5_6_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2015.04.29.08.45.53;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	1yMvczIkXPCE59EH;

1.1
date	2014.07.13.00.18.05;	author benno;	state Exp;
branches;
next	;
commitid	IDCUWNzMOwuBiNzM;


desc
@@


1.2
log
@Make some regular expressions more strict.  This allows the tests
to pass also if relayd is compiled with DEBUG.
@
text
@# match and set header with tags

use strict;
use warnings;

my %header_client = (
    "User-Agent" => "Mozilla Bla",
    "MyHeader" => "UnmatchableContent",
);

our %args = (
    client => {
	func => \&http_client,
	header => \%header_client,
	len => 33,
    },
    relayd => {
	protocol => [ "http",
	    # setting the User-Agent should succeed
	    'match request header "User-Agent" value "Mozilla*" tag BORK',
	    'match request header set "User-Agent" value "BORK" tagged BORK',
	    'match request header log "User-Agent"',
	    # setting MyHeader should not happen
	    'match request header "MyHeader" value "SomethingDifferent" tag FOO',
	    'match request header set "MyHeader" value "FOO" tagged FOO',
	    'match request header log "MyHeader"',
	],
	loggrep => {
	    '\[User-Agent: BORK\]' => 1,
	    'MyHeader: FOO' => 0,
	},
    },
    server => {
	func => \&http_server,
	loggrep => {
	    "User-Agent: BORK" => 1,
	    "MyHeader: FOO" => 0,
	}
    },
    len => 33,
);

1;
@


1.1
log
@repair matching of headers, add regress test for this error
ok reyk
@
text
@d29 1
a29 1
	    'User-Agent: BORK' => 1,
@

