head	1.12;
access;
symbols
	OPENBSD_6_1:1.12.0.4
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.9.0.6
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.4
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.7.0.4
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.4.0.6
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.1.0.4
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.2;
locks; strict;
comment	@# @;


1.12
date	2017.01.31.18.02.54;	author bluhm;	state Exp;
branches;
next	1.11;
commitid	t0SYGqL75cnZf4IB;

1.11
date	2016.09.22.01.16.29;	author bluhm;	state Exp;
branches;
next	1.10;
commitid	SwsUl28O5YEYQy8V;

1.10
date	2016.08.25.22.56.13;	author bluhm;	state Exp;
branches;
next	1.9;
commitid	aCXnzxhgJDfwKCFJ;

1.9
date	2015.07.18.22.11.34;	author benno;	state Exp;
branches;
next	1.8;
commitid	tCw6ZnA3ALMQ8qf7;

1.8
date	2015.05.22.19.09.18;	author bluhm;	state Exp;
branches;
next	1.7;
commitid	DHpp83NEgNDFXx2X;

1.7
date	2014.12.31.01.25.07;	author bluhm;	state Exp;
branches;
next	1.6;
commitid	DkOCw4SRDM2yh7oP;

1.6
date	2014.07.10.10.19.06;	author bluhm;	state Exp;
branches;
next	1.5;
commitid	loXzT9dsd77X1DLN;

1.5
date	2014.07.09.16.48.55;	author reyk;	state Exp;
branches;
next	1.4;
commitid	tyiEIIip8IP7h6pK;

1.4
date	2013.07.20.10.30.55;	author bluhm;	state Exp;
branches;
next	1.3;

1.3
date	2013.01.04.14.01.49;	author bluhm;	state Exp;
branches;
next	1.2;

1.2
date	2012.12.28.20.36.25;	author bluhm;	state Exp;
branches;
next	1.1;

1.1
date	2011.09.01.17.33.17;	author bluhm;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Mark the IO::Socket::SSL server socket with SSL_server to avoid
OCSP error messages.
@
text
@#	$OpenBSD: Server.pm,v 1.11 2016/09/22 01:16:29 bluhm Exp $

# Copyright (c) 2010-2015 Alexander Bluhm <bluhm@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

package Server;
use parent 'Proc';
use Carp;
use Config;
use Socket;
use Socket6;
use IO::Socket;
use IO::Socket::INET6;
use IO::Socket::SSL;

sub new {
	my $class = shift;
	my %args = @@_;
	$args{logfile} ||= "server.log";
	$args{up} ||= "Accepted";
	my $self = Proc::new($class, %args);
	$self->{listendomain}
	    or croak "$class listen domain not given";
	$SSL_ERROR = "";
	my $iosocket = $self->{ssl} ? "IO::Socket::SSL" : "IO::Socket::INET6";
	my $ls = $iosocket->new(
	    Proto		=> "tcp",
	    ReuseAddr		=> 1,
	    Domain		=> $self->{listendomain},
	    $self->{listenaddr} ? (LocalAddr => $self->{listenaddr}) : (),
	    $self->{listenport} ? (LocalPort => $self->{listenport}) : (),
	    SSL_server          => 1,
	    SSL_key_file	=> "server.key",
	    SSL_cert_file	=> "server.crt",
	    SSL_verify_mode	=> SSL_VERIFY_NONE,
	) or die ref($self), " $iosocket socket failed: $!,$SSL_ERROR";
	if ($self->{sndbuf}) {
		setsockopt($ls, SOL_SOCKET, SO_SNDBUF,
		    pack('i', $self->{sndbuf}))
		    or die ref($self), " set SO_SNDBUF failed: $!";
	}
	if ($self->{rcvbuf}) {
		setsockopt($ls, SOL_SOCKET, SO_RCVBUF,
		    pack('i', $self->{rcvbuf}))
		    or die ref($self), " set SO_RCVBUF failed: $!";
	}
	my $packstr = $Config{longsize} == 8 ? 'ql!' :
	    $Config{byteorder} == 1234 ? 'lxxxxl!' : 'xxxxll!';
	if ($self->{sndtimeo}) {
		setsockopt($ls, SOL_SOCKET, SO_SNDTIMEO,
		    pack($packstr, $self->{sndtimeo}, 0))
		    or die ref($self), " set SO_SNDTIMEO failed: $!";
	}
	if ($self->{rcvtimeo}) {
		setsockopt($ls, SOL_SOCKET, SO_RCVTIMEO,
		    pack($packstr, $self->{rcvtimeo}, 0))
		    or die ref($self), " set SO_RCVTIMEO failed: $!";
	}
	listen($ls, 1)
	    or die ref($self), " socket listen failed: $!";
	my $log = $self->{log};
	print $log "listen sock: ",$ls->sockhost()," ",$ls->sockport(),"\n";
	$self->{listenaddr} = $ls->sockhost() unless $self->{listenaddr};
	$self->{listenport} = $ls->sockport() unless $self->{listenport};
	$self->{ls} = $ls;
	return $self;
}

sub child {
	my $self = shift;

	# in case we redo the accept, shutdown the old one
	shutdown(\*STDOUT, SHUT_WR);
	delete $self->{as};

	my $as = $self->{ls}->accept()
	    or die ref($self)," ",ref($self->{ls}),
	    " socket accept failed: $!,$SSL_ERROR";
	print STDERR "accept sock: ",$as->sockhost()," ",$as->sockport(),"\n";
	print STDERR "accept peer: ",$as->peerhost()," ",$as->peerport(),"\n";
	if ($self->{ssl}) {
		print STDERR "ssl version: ",$as->get_sslversion(),"\n";
		print STDERR "ssl cipher: ",$as->get_cipher(),"\n";
		print STDERR "ssl peer certificate:\n",
		    $as->dump_peer_certificate();
	}

	*STDIN = *STDOUT = $self->{as} = $as;
}

1;
@


1.11
log
@Call setsockopt(2) before listen(2) in relayd tests and adjust some
error messages.
@
text
@d1 1
a1 1
#	$OpenBSD: Server.pm,v 1.10 2016/08/25 22:56:13 bluhm Exp $
d46 1
@


1.10
log
@Make relayd test slow-consumer more reliable.  Set SO_SNDTIMEO
sockopt correctly with Perl pack on i386.  Make it possible to grep
in each others client and server logfile.  Client does not simply
sleep but waits for short write at server.
@
text
@d1 1
a1 1
#	$OpenBSD: Server.pm,v 1.9 2015/07/18 22:11:34 benno Exp $
a43 1
	    Listen		=> 1,
d49 1
a49 1
	) or die ref($self), " $iosocket socket listen failed: $!,$SSL_ERROR";
d53 1
a53 1
		    or die ref($self), " set sndbuf SO_SNDBUF failed: $!";
d58 1
a58 1
		    or die ref($self), " set rcvbuf SO_RCVBUF failed: $!";
d65 1
a65 1
		    or die ref($self), " set SO_SNDTIMEO failed failed: $!";
d70 1
a70 1
		    or die ref($self), " set SO_RCVTIMEO failed failed: $!";
d72 2
@


1.9
log
@add relayd regression test args-http-slow-consumer.pl
ok reyk@@, bluhm@@
@
text
@d1 1
a1 1
#	$OpenBSD: Server.pm,v 1.8 2015/05/22 19:09:18 bluhm Exp $
d23 1
d61 2
d65 1
a65 1
		    pack('l!l!', $self->{sndtimeo}, 0))
d70 1
a70 1
		    pack('l!l!', $self->{rcvtimeo}, 0))
@


1.8
log
@Add tests for relayd TLS inspection with plain SSL and HTTPS.
@
text
@d1 1
a1 1
#	$OpenBSD: Server.pm,v 1.7 2014/12/31 01:25:07 bluhm Exp $
d50 20
@


1.7
log
@Create CA and certificates for TLS tests consistently.  Better
logging of SSL errors.  Do not import unneeded Socket constants.
@
text
@d1 1
a1 1
#	$OpenBSD: Server.pm,v 1.6 2014/07/10 10:19:06 bluhm Exp $
d3 1
a3 1
# Copyright (c) 2010-2014 Alexander Bluhm <bluhm@@openbsd.org>
d70 6
@


1.6
log
@Implement non-persistent connections in a cleaner way.  Every test
that offers multiple requets per HTTP connection is run twice.
First all requests are run over a single TCP connection.  Then for
each requests a separate TCP connection is established.  If a
requests during a persistent connection fails, a reconnect is done
as relayd cancels the whole connection.  This allows stricter tests
for filters.
OK reyk@@
@
text
@d1 1
a1 1
#	$OpenBSD: Server.pm,v 1.5 2014/07/09 16:48:55 reyk Exp $
d3 1
a3 1
# Copyright (c) 2010-2012 Alexander Bluhm <bluhm@@openbsd.org>
d23 1
a23 1
use Socket qw(IPPROTO_TCP TCP_NODELAY);
d46 2
a47 2
	    SSL_key_file	=> "server-key.pem",
	    SSL_cert_file	=> "server-cert.pem",
a64 1
	my $iosocket = $self->{ssl} ? "IO::Socket::SSL" : "IO::Socket::INET6";
d66 2
a67 1
	    or die ref($self), " $iosocket socket accept failed: $!";
@


1.5
log
@Update and extend the regress tests to use the new grammar of the
filtering rules.  Some of the filenames are based on the old grammar,
we keep them for now and just update the contents to have a
before/after comparison of the features.

Most of the work was done by Andre de Oliveira (andre@@)

OK bluhm@@ benno@@
@
text
@d1 1
a1 1
#	$OpenBSD: Server.pm,v 1.4 2013/07/20 10:30:55 bluhm Exp $
d61 4
a64 4
	if ($self->{mreqs}) {
		print STDERR "connection per request\n";
		return;
	}
a69 1
	print STDERR "single connection\n";
@


1.4
log
@Set SSL_VERIFY_NONE as the regression test uses self-signed untrusted
certificates.  Newer IO::Socket::SSL versions verify by default.
@
text
@d1 1
a1 1
#	$OpenBSD: Server.pm,v 1.3 2013/01/04 14:01:49 bluhm Exp $
d61 4
d70 1
@


1.3
log
@Sync relayd tests with socket splicing tests.
@
text
@d1 1
a1 1
#	$OpenBSD: Server.pm,v 1.2 2012/12/28 20:36:25 bluhm Exp $
d37 1
d40 4
a43 4
	    Proto	=> "tcp",
	    ReuseAddr	=> 1,
	    Domain	=> $self->{listendomain},
	    Listen      => 1,
d46 4
a49 3
	    SSL_key_file  => "server-key.pem",
	    SSL_cert_file => "server-cert.pem",
	) or die ref($self), " $iosocket socket listen failed: $!";
@


1.2
log
@Allow the relayd regression tests to run the relayd on a different
host from client and server.  Real TCP connections not running on
localhost provide a different timing uncovering more bugs.
@
text
@d1 1
a1 1
#	$OpenBSD: Server.pm,v 1.1 2011/09/01 17:33:17 bluhm Exp $
d3 1
a3 1
# Copyright (c) 2010,2011 Alexander Bluhm <bluhm@@openbsd.org>
@


1.1
log
@Add regression tests for relaying connections through relayd.  This
is useful to ensure that socket splicing is working correctly.
Server, relayd, client with different config are started for each
subtest.  Data must pass unmodified.
@
text
@d1 1
a1 1
#	$OpenBSD$
d47 1
a47 1
	) or die ref($self), " socket failed: $!";
d59 1
d61 1
a61 1
	    or die ref($self), " socket accept failed: $!";
@

