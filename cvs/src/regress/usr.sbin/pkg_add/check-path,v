head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.26
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.22
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.12
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.20
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.18
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.16
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.14
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.10
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.8
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.6
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.4
	OPENBSD_5_0:1.5.0.2
	OPENBSD_5_0_BASE:1.5;
locks; strict;
comment	@# @;


1.5
date	2011.05.28.13.44.20;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2011.05.28.13.30.40;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2011.05.27.12.50.26;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2011.05.27.12.34.06;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2011.05.27.12.24.45;	author espie;	state Exp;
branches;
next	;


desc
@@


1.5
log
@several more bizarre cases
@
text
@#! /usr/bin/perl

# $OpenBSD: check-path,v 1.4 2011/05/28 13:30:40 espie Exp $

# unit test the matching of extra-info and @@pkgpath between packing-lists.

use Test::Simple tests => 19;
use OpenBSD::PackingList;

sub make_plist
{
	my $p = OpenBSD::PackingList->new;
	OpenBSD::PackingElement::ExtraInfo->add($p, shift, '', '');
	for my $path (@@_) {
		OpenBSD::PackingElement::PkgPath->add($p, $path);
	}
	return $p;
}

sub symetry
{
	while (my $p = pop @@_) {
		if (!$p->match_pkgpath($p)) {
			return 0;
		}
		for my $p2 (@@_) {
			my $t1 = !$p->match_pkgpath($p2);
			my $t2 = !$p2->match_pkgpath($p);
			if ($t1 ^ $t2) {
				return 0;
			}
		}
	}
	return 1;
}

my @@p = (
	make_plist('p1'), 			# 0
	make_plist('p1'), 			# 1
	make_plist('p2'), 			# 2
	make_plist('p2', 'p1'),			# 3
	make_plist('p3', 'p1'),			# 4 
	make_plist('p4,flavor'),		# 5
	make_plist('newp4', 'p4,flavor'),	# 6
	make_plist('newp4', 'p4,otherflavor'),	# 7
	make_plist('p5,f1,f2'),			# 8
	make_plist('newp5', 'p5,f1,f2'),	# 9
	make_plist('newp5', 'p5,f2'),		# 10
	make_plist('newp5', 'p5,f2,f1'),	# 11
	make_plist('newp5', 'other,f1,f2'),	# 12
	make_plist('newp5', 'p5,f1[,f2]'),	# 13
	make_plist('p5,f1'),			# 14
	make_plist('p5,f1,f3'),			# 15
	make_plist('p5,f1,f2,f3'),		# 16
	make_plist('newp5', 'p5,f1,f1,f2'),	# 17
	make_plist('newp5', 'p5[,f1][,f2]'),	# 18
	make_plist('newp5', 'p5[,f1,f2][,f1,f3]'),	# 19
	make_plist('newp5', 'p5[,f1,f4][,f3]'),	# 20
);

ok(symetry(@@p), "match_pkgpath is symetric");
ok($p[0]->match_pkgpath($p[1]), "same path matches");
ok(!$p[0]->match_pkgpath($p[2]), "different paths don't");
ok($p[0]->match_pkgpath($p[3]), "look into the list too");
ok(!$p[3]->match_pkgpath($p[4]), "extra elements can't match by themselves");
ok($p[5]->match_pkgpath($p[6]), "paths with same flavors do match");
ok(!$p[5]->match_pkgpath($p[7]), "paths with distinct flavor do not match");
ok($p[8]->match_pkgpath($p[9]), "same flavor combo does match");
ok(!$p[8]->match_pkgpath($p[10]), "different flavor combo does not match");
ok($p[8]->match_pkgpath($p[11]), "reordered flavors should match");
ok(!$p[8]->match_pkgpath($p[12]), "same flavor but distinct dir does not match");
ok($p[8]->match_pkgpath($p[13]), "optional parts should match");
ok($p[14]->match_pkgpath($p[13]), "optional parts should match");
ok(!$p[15]->match_pkgpath($p[13]), "detect bad parts");
ok(!$p[16]->match_pkgpath($p[13]), "detect bad parts");
ok($p[8]->match_pkgpath($p[17]), "duplicate flavors");
ok($p[8]->match_pkgpath($p[18]), "several optional parts");
ok($p[16]->match_pkgpath($p[19]), "several optional parts");
ok(!$p[20]->match_pkgpath($p[14]), "missing flavor");
@


1.4
log
@rename
@
text
@d3 1
a3 1
# $OpenBSD: check-path,v 1.3 2011/05/27 12:50:26 espie Exp $
d7 1
a7 1
use Test::Simple tests => 15;
d55 4
d76 4
@


1.3
log
@more extra stuff for later
@
text
@d3 1
a3 1
# $OpenBSD: check-path,v 1.2 2011/05/27 12:34:06 espie Exp $
d37 35
a71 35
my $p1 = make_plist('p1');
my $p1bis = make_plist('p1');
my $p2 = make_plist('p2');
my $p2bis = make_plist('p2', 'p1');
my $p3 = make_plist('p3', 'p1');
my $p4 = make_plist('p4,flavor');
my $p4bis = make_plist('newp4', 'p4,flavor');
my $p4ter = make_plist('newp4', 'p4,otherflavor');
my $p5 = make_plist('p5,f1,f2');
my $p5bis = make_plist('newp5', 'p5,f1,f2');
my $p5ter = make_plist('newp5', 'p5,f2');
my $p5four = make_plist('newp5', 'p5,f2,f1');
my $p5five = make_plist('newp5', 'other,f1,f2');
my $p5six = make_plist('newp5', 'p5,f1[,f2]');
my $p5seven = make_plist('p5,f1');
my $p5eight = make_plist('p5,f1,f3');
my $p5nine = make_plist('p5,f1,f2,f3');

ok(symetry($p1, $p1bis, $p2, $p2bis, $p3, $p4, $p4bis, $p4ter, $p5, $p5bis, 
	$p5ter, $p5four, $p5five, $p5six, $p5seven, $p5eight, $p5nine),
    "match_pkgpath is symetric");
ok($p1->match_pkgpath($p1bis), "same path matches");
ok(!$p1->match_pkgpath($p2), "different paths don't");
ok($p1->match_pkgpath($p2bis), "look into the list too");
ok(!$p2bis->match_pkgpath($p3), "extra elements can't match by themselves");
ok($p4->match_pkgpath($p4bis), "paths with same flavors do match");
ok(!$p4->match_pkgpath($p4ter), "paths with distinct flavor do not match");
ok($p5->match_pkgpath($p5bis), "same flavor combo does match");
ok(!$p5->match_pkgpath($p5ter), "different flavor combo does not match");
ok($p5->match_pkgpath($p5four), "reordered flavors should match");
ok(!$p5->match_pkgpath($p5five), "same flavor but distinct dir does not match");
ok($p5->match_pkgpath($p5six), "optional parts should match");
ok($p5seven->match_pkgpath($p5six), "optional parts should match");
ok(!$p5eight->match_pkgpath($p5six), "detect bad parts");
ok(!$p5nine->match_pkgpath($p5six), "detect bad parts");
@


1.2
log
@flesh out flavors, future test that does not match yet
@
text
@d3 1
a3 1
# $OpenBSD: check-path,v 1.1 2011/05/27 12:24:45 espie Exp $
d7 1
a7 1
use Test::Simple tests => 10;
d20 16
d50 8
a57 1

d68 4
@


1.1
log
@unit-test @@pkgpath before we add a lot of junk to it
@
text
@d3 5
a7 2
# $OpenBSD$
use Test::Simple tests => 4;
d21 13
a33 5
my $p1 = make_plist('path1');
my $p1bis = make_plist('path1');
my $p2 = make_plist('path2');
my $p2bis = make_plist('path2', 'path1');
my $p3 = make_plist('path3', 'path1');
d39 6
@

