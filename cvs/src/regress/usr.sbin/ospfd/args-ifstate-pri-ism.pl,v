head	1.3;
access;
symbols
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.4
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.2.0.8
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.6
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.4
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.1.1.1.0.4
	OPENBSD_5_6_BASE:1.1.1.1
	bluhm_20140712:1.1.1.1
	bluhm:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2016.09.28.12.40.35;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	p0cTad22OJvaMaNh;

1.2
date	2015.01.16.17.06.43;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	7I9wAy0dkdJu6Go6;

1.1
date	2014.07.11.22.18.03;	author bluhm;	state Exp;
branches
	1.1.1.1;
next	;
commitid	l11Dew1gaiTo2gTR;

1.1.1.1
date	2014.07.11.22.18.03;	author bluhm;	state Exp;
branches;
next	;
commitid	l11Dew1gaiTo2gTR;


desc
@@


1.3
log
@The tun interface has been renamed to tap(4).  Adapt ospfd test.
@
text
@# test router priority with one interface state machine (ism)
# ospfd has prio 0, ism of the test has prio 1
# test that ism gets dr, there is no bdr

use strict;
use warnings;
use Default qw($area $tap_number $ospfd_ip $ospfd_rtrid);

our %tst_args = (
    ospfd => {
	conf => {
	    areas => {
		$area => {
		    "tap$tap_number:$ospfd_ip" => {
			'router-priority' => '0',
		    },
		},
	    },
	},
    },
    client => {
	state => {
	    pri => 1,
	},
	tasks => [
	    {
		name => "receive hello with dr 0.0.0.0 bdr 0.0.0.0, ".
		    "enter $ospfd_rtrid as our neighbor",
		check => {
		    dr   => "0.0.0.0",
		    bdr  => "0.0.0.0",
		    nbrs => [],
		},
		state => {
		    nbrs => [ $ospfd_rtrid ],
		},
	    },
	    {
		name => "wait for neighbor 10.188.0.18 in received hello",
		check => {
		    # XXX dr flipping between "0.0.0.0" and "10.188.6.18"
		    bdr => "0.0.0.0",
		},
		wait => {
		    nbrs => [ "10.188.0.18" ],
		},
		timeout => 5,  # 2 * hello interval + 1 second
	    },
	    {
		name => "we are 2-way, wait for dr 10.188.6.18 and ".
		    "no bdr in received hello",
		check => {
		    nbrs => [ "10.188.0.18" ],
		},
		wait => {
		    dr => "10.188.6.18",
		    bdr  => "0.0.0.0",
		},
		timeout => 11,  # dead interval + hello interval + 1 second
	    },
	],
    },
);

1;
@


1.2
log
@Add test that exchanges database description packets with ospfd.
From Florian Riehm.
@
text
@d7 1
a7 1
use Default qw($area $tun_number $ospfd_ip $ospfd_rtrid);
d14 1
a14 1
		    "tun$tun_number:$ospfd_ip" => {
@


1.1
log
@Initial revision
@
text
@a6 1
use Client;
@


1.1.1.1
log
@Add a test framework for the ospfd routing daemon.  For each test
one fresh daemon is started with an individual config.  It is talking
OSPF via a tun interface.  At the process side of the tun device a
client is running.  This test programm is parsing the OSPF packets
and generates new ones.  It simulates other OSPF daemons.

For now only hello packets are tested.  Each test has a task list
which drives the ospfd through its interface state machine.  The
plan is to extend the framework for the other OSPF packet types and 
state machines.  Eventualy the generated kernel routing messages 
could also be checked.

I have developed this test suite together with Florian Riehm.
@
text
@@
