head	1.3;
access;
symbols
	OPENBSD_6_0:1.2.0.10
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.8
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.6
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.4
	OPENBSD_5_6_BASE:1.2
	bluhm_20140712:1.1.1.1
	bluhm:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2016.09.28.12.40.35;	author bluhm;	state dead;
branches;
next	1.2;
commitid	p0cTad22OJvaMaNh;

1.2
date	2014.07.11.22.28.51;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	lY6wANvFqgpBIoFW;

1.1
date	2014.07.11.22.18.03;	author bluhm;	state Exp;
branches
	1.1.1.1;
next	;
commitid	l11Dew1gaiTo2gTR;

1.1.1.1
date	2014.07.11.22.18.03;	author bluhm;	state Exp;
branches;
next	;
commitid	l11Dew1gaiTo2gTR;


desc
@@


1.3
log
@The tun interface has been renamed to tap(4).  Adapt ospfd test.
@
text
@#	$OpenBSD: Tun.pm,v 1.2 2014/07/11 22:28:51 bluhm Exp $

# Copyright (c) 2014 Alexander Bluhm <bluhm@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# Encapsulate tun interface handling into separate module.

use strict;
use warnings;

package Tun;
use parent 'Exporter';
our @@EXPORT_OK = qw(opentun);

use Carp;
use Fcntl;
use File::Basename;
use POSIX qw(_exit);
use PassFd 'recvfd';
use Socket;

sub opentun {
    my ($tun_number) = @@_;
    my $tun_device = "/dev/tun$tun_number";

    if ($> == 0) {
	sysopen(my $tun, $tun_device, O_RDWR)
	    or croak "Open $tun_device failed: $!";
	return $tun;
    }

    if (!$ENV{SUDO}) {
	die "To open the device $tun_device you must run as root or\n".
	    "set the SUDO environment variable and allow closefrom_override.\n";
    }

    my $opentun;
    my $curdir = dirname($0) || ".";
    if (-x "$curdir/opentun") {
	$opentun = "$curdir/opentun";
    } elsif (-x "./opentun") {
	$opentun = "./opentun";
    } else {
	die "To open the device $tun_device the tool opentun is needed.\n".
	    "Executable opentun not found in $curdir or current directory.\n";
    }

    socketpair(my $parent, my $child, AF_UNIX, SOCK_STREAM, PF_UNSPEC)
	or croak "Socketpair failed: $!";
    $child->fcntl(F_SETFD, 0)
	or croak "Fcntl setfd failed: $!";

    defined(my $pid = fork())
	or croak "Fork failed: $!";

    unless ($pid) {
	# child process
	close($parent) or do {
	    warn "Close parent socket failed: $!";
	    _exit(3);
	};
	my @@cmd = ($ENV{SUDO}, '-C', $child->fileno()+1, $opentun,
	    $child->fileno(), $tun_number);
	exec(@@cmd);
	warn "Exec '@@cmd' failed: $!";
	_exit(3);
    }

    # parent process
    close($child)
	or croak "Close child socket failed: $!";
    my $tun = recvfd($parent)
	or croak "Recvfd failed: $!";
    wait()
	or croak "Wait failed: $!";
    $? == 0
	or croak "Child process failed: $?";

    return $tun;
}

1;
@


1.2
log
@Add OpenBSD RCS id.
@
text
@d1 1
a1 1
#	$OpenBSD$
@


1.1
log
@Initial revision
@
text
@d1 2
@


1.1.1.1
log
@Add a test framework for the ospfd routing daemon.  For each test
one fresh daemon is started with an individual config.  It is talking
OSPF via a tun interface.  At the process side of the tun device a
client is running.  This test programm is parsing the OSPF packets
and generates new ones.  It simulates other OSPF daemons.

For now only hello packets are tested.  Each test has a task list
which drives the ospfd through its interface state machine.  The
plan is to extend the framework for the other OSPF packet types and 
state machines.  Eventualy the generated kernel routing messages 
could also be checked.

I have developed this test suite together with Florian Riehm.
@
text
@@
