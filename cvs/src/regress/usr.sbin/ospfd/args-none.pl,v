head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.12
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.8
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.6
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.4
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.1.1.1.0.4
	OPENBSD_5_6_BASE:1.1.1.1
	bluhm_20140712:1.1.1.1
	bluhm:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2015.01.16.17.06.43;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	7I9wAy0dkdJu6Go6;

1.1
date	2014.07.11.22.18.03;	author bluhm;	state Exp;
branches
	1.1.1.1;
next	;
commitid	l11Dew1gaiTo2gTR;

1.1.1.1
date	2014.07.11.22.18.03;	author bluhm;	state Exp;
branches;
next	;
commitid	l11Dew1gaiTo2gTR;


desc
@@


1.2
log
@Add test that exchanges database description packets with ospfd.
From Florian Riehm.
@
text
@# test ospfd without any interface state machines
# the ospfd will get dr and there must be no neighbors

use strict;
use warnings;
use Default qw($ospfd_ip);

our %tst_args = (
    client => {
	state => [],
	tasks => [
	    {
		name => "receive hello with dr 0.0.0.0 bdr 0.0.0.0",
		check => {
		    dr  => "0.0.0.0",
		    bdr => "0.0.0.0",
		    nbrs => [],
		},
	    },
	    {
		name => "there must be no nbrs, wait until dr $ospfd_ip",
		check => {
		    bdr => "0.0.0.0",
		    nbrs => [],
		},
		wait => {
		    dr => $ospfd_ip,
		},
		timeout => 11,  # dead interval + hello interval + 1 second
	    },
	],
    },
);

1;
@


1.1
log
@Initial revision
@
text
@a5 1
use Client;
@


1.1.1.1
log
@Add a test framework for the ospfd routing daemon.  For each test
one fresh daemon is started with an individual config.  It is talking
OSPF via a tun interface.  At the process side of the tun device a
client is running.  This test programm is parsing the OSPF packets
and generates new ones.  It simulates other OSPF daemons.

For now only hello packets are tested.  Each test has a task list
which drives the ospfd through its interface state machine.  The
plan is to extend the framework for the other OSPF packet types and 
state machines.  Eventualy the generated kernel routing messages 
could also be checked.

I have developed this test suite together with Florian Riehm.
@
text
@@
