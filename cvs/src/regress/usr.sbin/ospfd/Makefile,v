head	1.7;
access;
symbols
	OPENBSD_6_2:1.7.0.2
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.7.0.4
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.4.0.8
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.2.0.4
	OPENBSD_5_6_BASE:1.2
	bluhm_20140712:1.1.1.1
	bluhm:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2017.02.09.22.43.35;	author bluhm;	state Exp;
branches;
next	1.6;
commitid	Sf9r2wfi7r2cOPPL;

1.6
date	2016.09.28.12.40.35;	author bluhm;	state Exp;
branches;
next	1.5;
commitid	p0cTad22OJvaMaNh;

1.5
date	2016.09.02.21.30.34;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	sbZCO4zszQKrda5x;

1.4
date	2015.01.16.17.06.43;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	7I9wAy0dkdJu6Go6;

1.3
date	2014.11.25.23.13.54;	author daniel;	state Exp;
branches;
next	1.2;
commitid	AQCpNTHeyWuGFKi4;

1.2
date	2014.07.11.22.28.51;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	lY6wANvFqgpBIoFW;

1.1
date	2014.07.11.22.18.03;	author bluhm;	state Exp;
branches
	1.1.1.1;
next	;
commitid	l11Dew1gaiTo2gTR;

1.1.1.1
date	2014.07.11.22.18.03;	author bluhm;	state Exp;
branches;
next	;
commitid	l11Dew1gaiTo2gTR;


desc
@@


1.7
log
@Add defines that are needed to compile XS code with Perl 5.24.1.
@
text
@#	$OpenBSD: Makefile,v 1.6 2016/09/28 12:40:35 bluhm Exp $

# The following ports must be installed for the regression tests:
# p5-AnyEvent		provide framework for multiple event loops
# p5-Hash-Merge		merge associative arrays
# p5-YAML		YAML ain't a markup language
#
# Check wether all required perl packages are installed.  If some
# are missing print a warning and skip the tests, but do not fail.

PERL_REQUIRE != perl -Mstrict -Mwarnings -e ' \
    eval { require AnyEvent } or print $@@; \
    eval { require Hash::Merge } or print $@@; \
    eval { require YAML } or print $@@; \
'
.if ! empty (PERL_REQUIRE)
regress:
	@@echo "${PERL_REQUIRE}"
	@@echo install these perl packages for additional tests
	@@echo SKIPPED
.endif

# Fill out these variables with your own system parameters
# You need a tap device and an unused /24 IPv4 network.

TAPNUM ?=		3
TAPIP ?=		10.188.6.17
RTRID ?=		10.188.0.17

# Automatically generate regress targets from test cases in directory.

ARGS !=			cd ${.CURDIR} && ls args-*.pl
TARGETS ?=		${ARGS}
REGRESS_TARGETS =	${TARGETS:S/^/run-regress-/}
CLEANFILES +=		*.log ospfd.conf ktrace.out stamp-* opentap
PERLHEADER !=		perl -MConfig -e 'print "$$Config{archlib}/CORE"'
CLEANFILES +=		PassFd.c PassFd.o PassFd.so
CFLAGS =		-Wall

.MAIN: all

.if make (regress) || make (all)
.BEGIN:
	@@echo
	[ -c /dev/tap${TAPNUM} ]
	[ -z "${SUDO}" ] || ${SUDO} -C 4 true
	${SUDO} ifconfig tap${TAPNUM} ${TAPIP} netmask 255.255.255.0
.endif

# Set variables so that make runs with and without obj directory.
# Only do that if necessary to keep visible output short.

.if ${.CURDIR} == ${.OBJDIR}
PERLINC =
PERLPATH =
.else
PERLINC =	-I${.CURDIR}
PERLPATH =	${.CURDIR}/
.endif

# The arg tests take a perl hash with arguments controlling the
# test parameters.

.for a in ${ARGS}
run-regress-$a: $a opentap PassFd.so
	@@echo '\n======== $@@ ========'
	time TAPNUM=${TAPNUM} TAPIP=${TAPIP} RTRID=${RTRID} SUDO=${SUDO} KTRACE=${KTRACE} OSPFD=${OSPFD} perl ${PERLINC} ${PERLPATH}ospfd.pl ${PERLPATH}$a
.endfor

# make perl syntax check for all args files

.PHONY: syntax

syntax: stamp-syntax

stamp-syntax: ${ARGS} stamp-passfd
.for a in ${ARGS}
	@@TAPNUM=${TAPNUM} TAPIP=${TAPIP} RTRID=${RTRID} perl ${PERLINC} -c ${PERLPATH}$a
.endfor
	@@date >$@@

# build and test file descriptor passing perl xs module

.PHONY: passfd

passfd: stamp-passfd

stamp-passfd: PassFd.so
	perl ${PERLINC} ${PERLPATH}testfd.pl
	@@date >$@@

.SUFFIXES: .xs .so

.xs.so:
	xsubpp -prototypes $> >${@@:S/.so$/.c/}
	gcc -shared -Wall -DNO_LOCALE_NUMERIC -DNO_LOCALE_COLLATE\
	    -I${PERLHEADER} -o $@@ ${@@:S/.so$/.c/}
	perl ${PERLINC} -M${@@:R} -e ''

.include <bsd.regress.mk>
@


1.6
log
@The tun interface has been renamed to tap(4).  Adapt ospfd test.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.5 2016/09/02 21:30:34 bluhm Exp $
d96 2
a97 1
	gcc -shared -Wall -I${PERLHEADER} -o $@@ ${@@:S/.so$/.c/}
@


1.5
log
@Print SKIPPED if a regress test cannot be executed for some reason.
This allows to identify such tests by looking at their output.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.4 2015/01/16 17:06:43 bluhm Exp $
d24 1
a24 1
# You need a tun device and an unused /24 IPv4 network.
d26 2
a27 2
TUNNUM ?=		3
TUNIP ?=		10.188.6.17
d35 1
a35 1
CLEANFILES +=		*.log ospfd.conf ktrace.out stamp-* opentun
d45 3
a47 3
	[ -c /dev/tun${TUNNUM} ]
	[ -z "${SUDO}" ] || ${SUDO} -C 3 true
	${SUDO} ifconfig tun${TUNNUM} ${TUNIP} netmask 255.255.255.0 link0
d65 1
a65 1
run-regress-$a: $a opentun PassFd.so
d67 1
a67 1
	time TUNNUM=${TUNNUM} TUNIP=${TUNIP} RTRID=${RTRID} SUDO=${SUDO} KTRACE=${KTRACE} OSPFD=${OSPFD} perl ${PERLINC} ${PERLPATH}ospfd.pl ${PERLPATH}$a
d78 1
a78 1
	@@TUNNUM=${TUNNUM} TUNIP=${TUNIP} RTRID=${RTRID} perl ${PERLINC} -c ${PERLPATH}$a
@


1.4
log
@Add test that exchanges database description packets with ospfd.
From Florian Riehm.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.3 2014/11/25 23:13:54 daniel Exp $
d20 1
@


1.3
log
@Fix test.

ok bluhm@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.2 2014/07/11 22:28:51 bluhm Exp $
d6 1
a6 1
# p5-YAML               YAML ain't a markup language
@


1.2
log
@Add OpenBSD RCS id.
@
text
@d1 1
a1 1
#	$OpenBSD$
d6 1
d14 1
d22 1
a22 1
# Fill out these variables with you own system parameters
d25 1
a25 1
TUNNUM ?=		6
@


1.1
log
@Initial revision
@
text
@d1 2
@


1.1.1.1
log
@Add a test framework for the ospfd routing daemon.  For each test
one fresh daemon is started with an individual config.  It is talking
OSPF via a tun interface.  At the process side of the tun device a
client is running.  This test programm is parsing the OSPF packets
and generates new ones.  It simulates other OSPF daemons.

For now only hello packets are tested.  Each test has a task list
which drives the ospfd through its interface state machine.  The
plan is to extend the framework for the other OSPF packet types and 
state machines.  Eventualy the generated kernel routing messages 
could also be checked.

I have developed this test suite together with Florian Riehm.
@
text
@@
