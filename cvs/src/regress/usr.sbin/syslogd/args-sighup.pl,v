head	1.8;
access;
symbols
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.7.0.6
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.6.0.4
	OPENBSD_5_7_BASE:1.6;
locks; strict;
comment	@# @;


1.8
date	2016.10.06.13.06.14;	author bluhm;	state Exp;
branches;
next	1.7;
commitid	SvZFLcp8z1QgdkQR;

1.7
date	2015.06.15.21.44.57;	author bluhm;	state Exp;
branches;
next	1.6;
commitid	BmPbwQg6idYgxXrC;

1.6
date	2015.02.13.21.40.50;	author bluhm;	state Exp;
branches;
next	1.5;
commitid	tZ8vhc9XWQ8KWPvp;

1.5
date	2015.02.06.00.27.41;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	8et2usx9CGyR7b0D;

1.4
date	2015.01.01.19.58.48;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	2YTZ0i51684RZ6xu;

1.3
date	2014.12.31.14.05.26;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	aJ48QDLYN7gznT6d;

1.2
date	2014.09.02.17.43.29;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	uB2qKOs5zbFwXm2E;

1.1
date	2014.09.02.00.26.30;	author bluhm;	state Exp;
branches;
next	;
commitid	9hOtCJWVU54mPrrd;


desc
@@


1.8
log
@Check that syslogd priv process does exec on itself.
@
text
@# The client writes a message to Sys::Syslog native method.
# The syslogd writes it into a file and through a pipe.
# The syslogd passes it via UDP to the loghost.
# The server receives the message on its UDP socket.
# Find the message in client, file, pipe, syslogd, server log.
# Check that a SIGHUP reopens logfile and restarts pipe.

use strict;
use warnings;

our %args = (
    client => {
	func => sub { write_between2logs(shift, sub {
	    my $self = shift;
	    ${$self->{server}}->loggrep("Signal", 8)
		or die ref($self), " no 'Signal' between logs";
	})},
	loggrep => { get_between2loggrep() },
    },
    syslogd => {
	ktrace => {
	    qr/syslogd  PSIG  SIGHUP caught handler/ => 1,
	    qr/syslogd  RET   execve 0/ => 2,
	},
	loggrep => {
	    qr/config file changed: dying/ => 0,
	    qr/config file modified: restarting/ => 0,
	    qr/syslogd: restarted/ => 1,
	    get_between2loggrep(),
	},
    },
    server => {
	func => sub { read_between2logs(shift, sub {
	    my $self = shift;
	    ${$self->{syslogd}}->rotate();
	    ${$self->{syslogd}}->kill_syslogd('HUP');
	    ${$self->{syslogd}}->loggrep("syslogd: restarted", 5)
		or die ref($self), " no 'syslogd: restarted' between logs";
	    print STDERR "Signal\n";
	})},
	loggrep => {
	    get_between2loggrep(),
	    qr/Signal/ => 1,
	    qr/Accepted/ => 1,
	},
    },
    check => sub {
	my $self = shift;
	my $r = $self->{syslogd};
	$r->loggrep("bytes transferred", 1, 2) or sleep 1;
	foreach my $name (qw(file pipe)) {
		my $file = $r->{"out$name"}.".0";
		my $pattern = (get_between2loggrep())[0];
		check_pattern($name, $file, $pattern, \&filegrep);
	}
    },
);

1;
@


1.7
log
@Rework how fstat and ktrace pattern are specified in the test
arguments.  Add tests to check wether syslogd privsep works.  This
is done for debug and foreground and daemon mode.  Fstat is checked
for chroot and sockets.  Ktrace dump is grepped for setting uid and
gid.
@
text
@d23 1
a23 1
	    qr/syslogd  RET   execve 0/ => 1,
@


1.6
log
@Adapt the maxunix test, the syslogd -a error semantic has changed.
Increase timeouts and remove races, so that the syslogd tests pass
on my sparc64 machine.
@
text
@d21 1
a21 2
	ktrace => 1,
	kdump => {
@


1.5
log
@Add syslogd tests for dropped messages.
@
text
@d51 1
@


1.4
log
@Test that syslogd sending over TCP does not leak a file descriptor
when it receives a SIGHUP.
@
text
@d13 1
a13 1
	func => sub {
d15 3
a17 5
	    write_between2logs($self, sub {
		${$self->{server}}->loggrep("Signal", 8)
		    or die ref($self), " no 'Signal' between logs";
	    });
	},
d34 1
a34 1
	func => sub {
d36 6
a41 8
	    read_between2logs($self, sub {
		${$self->{syslogd}}->rotate();
		${$self->{syslogd}}->kill_syslogd('HUP');
		${$self->{syslogd}}->loggrep("syslogd: restarted", 5)
		    or die ref($self), " no 'syslogd: restarted' between logs";
		print STDERR "Signal\n";
	    });
	},
@


1.3
log
@Adapt and add regression tests for sending syslog messages over TCP.
@
text
@d46 5
a50 1
	loggrep => { get_between2loggrep() },
@


1.2
log
@To examine the operation of the signal handlers, the tests grep in
the ktrace output of syslogd.  Also make the tests work without DNS
and without sudo.
@
text
@d33 1
a33 1
	}
@


1.1
log
@Add tests that run the syslogd signal handlers.
@
text
@d23 5
@

