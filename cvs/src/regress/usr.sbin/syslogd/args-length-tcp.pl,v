head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.12
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.10
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.6
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4;
locks; strict;
comment	@# @;


1.5
date	2015.06.15.21.44.57;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	BmPbwQg6idYgxXrC;

1.4
date	2015.02.11.21.51.13;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	oVck3lsrH2XH2G1o;

1.3
date	2015.02.08.15.24.14;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	mltz6ku0toaoDiSH;

1.2
date	2015.02.06.00.27.41;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	8et2usx9CGyR7b0D;

1.1
date	2015.02.02.17.40.24;	author bluhm;	state Exp;
branches;
next	;
commitid	BkvE03kfcbCrYutX;


desc
@@


1.5
log
@Rework how fstat and ktrace pattern are specified in the test
arguments.  Add tests to check wether syslogd privsep works.  This
is done for debug and foreground and daemon mode.  Fstat is checked
for chroot and sockets.  Ktrace dump is grepped for setting uid and
gid.
@
text
@# The client writes long messages to UDP socket.
# The syslogd writes it into a file and through a pipe.
# The syslogd passes it via TCP to the loghost.
# The server receives the message on its TCP socket.
# Find the message in client, file, pipe, syslogd, server log.
# Check that lines in server have 8192 bytes message length.

use strict;
use warnings;
use Socket;

our %args = (
    client => {
	connect => { domain => AF_UNSPEC, addr => "localhost", port => 514 },
	func => sub {
	    my $self = shift;
	    write_lengths($self, 8190..8193,9000);
	    write_log($self);
	},
    },
    syslogd => {
	loghost => '@@tcp://localhost:$connectport',
	options => ["-u"],
	loggrep => {
	    get_charlog() => 5,
	},
    },
    server => {
	listen => { domain => AF_UNSPEC, proto => "tcp", addr => "localhost" },
	# >>> 8213 <13>Jan 31 00:10:11 0123456789ABC...567\n
	loggrep => {
	    get_charlog() => 5,
	    qr/^>>> 8211 .{19} .{8190}$/ => 1,
	    qr/^>>> 8212 .{19} .{8191}$/ => 1,
	    qr/^>>> 8213 .{19} .{8192}$/ => 3,
	},
    },
);

1;
@


1.4
log
@Make syslogd tests more reliable.  Allow a range of certain log
messages, in case some got lost.  Slow down client when sending
multiple log messages.  Sort patterns when checking log files.  TLS
error messages have changed, adapt tests.
@
text
@d26 1
a26 1
	}
@


1.3
log
@Change syslog tests from transparent framing to octet counting.
Add tests for truncated buffer handling.
@
text
@d15 5
a19 2
	func => \&write_length,
	lengths => [ 8190..8193,9000 ],
@


1.2
log
@Add syslogd tests for dropped messages.
@
text
@d27 1
a27 1
	# >>> <13>Jan 31 00:10:11 0123456789ABC...567
d30 3
a32 3
	    qr/^>>> .{19} .{8190}$/ => 1,
	    qr/^>>> .{19} .{8191}$/ => 1,
	    qr/^>>> .{19} .{8192}$/ => 3,
@


1.1
log
@Test that long syslog messages are truncated correctly.
@
text
@a11 2
my $msg = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";

d22 1
a22 1
	    $msg => 5,
d29 1
a29 1
	    $msg => 5,
@

