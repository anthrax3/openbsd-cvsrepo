head	1.6;
access;
symbols
	OPENBSD_6_1:1.6.0.2
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.5.0.6
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.3.0.4
	OPENBSD_5_7_BASE:1.3;
locks; strict;
comment	@# @;


1.6
date	2016.10.06.13.06.14;	author bluhm;	state Exp;
branches;
next	1.5;
commitid	SvZFLcp8z1QgdkQR;

1.5
date	2015.07.07.18.03.11;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	qTzx3B33iQFlT4Uv;

1.4
date	2015.06.15.21.44.57;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	BmPbwQg6idYgxXrC;

1.3
date	2015.02.06.00.27.41;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	8et2usx9CGyR7b0D;

1.2
date	2015.02.02.17.40.24;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	BkvE03kfcbCrYutX;

1.1
date	2015.01.01.19.58.48;	author bluhm;	state Exp;
branches;
next	;
commitid	2YTZ0i51684RZ6xu;


desc
@@


1.6
log
@Check that syslogd priv process does exec on itself.
@
text
@# The client writes a message to Sys::Syslog native method.
# The syslogd writes it into a file and through a pipe.
# The syslogd passes it via TCP to the loghost.
# The server receives the message on its TCP socket.
# Find the message in client, file, pipe, syslogd, server log.
# Check that a SIGHUP reconnects the TCP stream and closes the socket.

use strict;
use warnings;
use Socket;

our %args = (
    client => {
	func => sub { write_between2logs(shift, sub {
	    my $self = shift;
	    ${$self->{server}}->loggrep("Signal", 8)
		or die ref($self), " no 'Signal' between logs";
	})},
	loggrep => { get_between2loggrep() },
    },
    syslogd => {
	fstat => {
	    # sighup must not leak a TCP socket
	    qr/internet stream tcp/ => 1,
	},
	ktrace => {
	    qr/syslogd  PSIG  SIGHUP caught handler/ => 1,
	    qr/syslogd  RET   execve 0/ => 2,
	},
	loghost => '@@tcp://127.0.0.1:$connectport',
	loggrep => {
	    qr/config file changed: dying/ => 0,
	    qr/config file modified: restarting/ => 0,
	    qr/syslogd: restarted/ => 1,
	    get_between2loggrep(),
	},
    },
    server => {
	listen => { domain => AF_INET, proto => "tcp", addr => "127.0.0.1" },
	redo => 0,
	func => sub { read_between2logs(shift, sub {
	    my $self = shift;
	    if ($self->{redo}) {
		    $self->{redo}--;
		    return;
	    }
	    ${$self->{syslogd}}->rotate();
	    ${$self->{syslogd}}->kill_syslogd('HUP');
	    ${$self->{syslogd}}->loggrep("syslogd: restarted", 5)
		or die ref($self), " no 'syslogd: restarted' between logs";
	    print STDERR "Signal\n";
	    # regenerate fstat file
	    ${$self->{syslogd}}->fstat();
	    $self->{redo}++;
	})},
	loggrep => {
	    get_between2loggrep(),
	    qr/Signal/ => 1,
	    qr/Accepted/ => 2,
	},
    },
);

1;
@


1.5
log
@Add tests for incomming syslog messages over TCP.
@
text
@d28 1
a28 1
	    qr/syslogd  RET   execve 0/ => 1,
@


1.4
log
@Rework how fstat and ktrace pattern are specified in the test
arguments.  Add tests to check wether syslogd privsep works.  This
is done for debug and foreground and daemon mode.  Fstat is checked
for chroot and sockets.  Ktrace dump is grepped for setting uid and
gid.
@
text
@d39 1
a39 1
	listen => { domain => AF_INET, addr => "127.0.0.1", proto => "tcp" },
@


1.3
log
@Add syslogd tests for dropped messages.
@
text
@d22 5
a26 3
	ktrace => 1,
	fstat => 1,
	kdump => {
a59 6
	},
    },
    fstat => {
	loggrep => {
	    # sighup must not leak a TCP socket
	    qr/internet stream tcp/ => 1,
@


1.2
log
@Test that long syslog messages are truncated correctly.
@
text
@d14 1
a14 1
	func => sub {
d16 3
a18 5
	    write_between2logs($self, sub {
		${$self->{server}}->loggrep("Signal", 8)
		    or die ref($self), " no 'Signal' between logs";
	    });
	},
d39 1
a39 1
	func => sub {
d41 13
a53 15
	    read_between2logs($self, sub {
		if ($self->{redo}) {
			$self->{redo}--;
			return;
		}
		${$self->{syslogd}}->rotate();
		${$self->{syslogd}}->kill_syslogd('HUP');
		${$self->{syslogd}}->loggrep("syslogd: restarted", 5)
		    or die ref($self), " no 'syslogd: restarted' between logs";
		print STDERR "Signal\n";
		# regeneate fstat file
		${$self->{syslogd}}->fstat();
		$self->{redo}++;
	    });
	},
@


1.1
log
@Test that syslogd sending over TCP does not leak a file descriptor
when it receives a SIGHUP.
@
text
@d10 1
@

