head	1.3;
access;
symbols
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.10
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.6
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.4
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.2.0.4
	OPENBSD_5_7_BASE:1.2;
locks; strict;
comment	@# @;


1.3
date	2015.07.16.16.34.49;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	0M9ba2ikkjyPND6j;

1.2
date	2014.09.13.23.38.24;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	8abA8sLPTwAOrtQB;

1.1
date	2014.09.04.15.57.13;	author bluhm;	state Exp;
branches;
next	;
commitid	UDPzaWPiPdzhRDLv;


desc
@@


1.3
log
@Test that syslogd does not append white spaces to messages.  Per
default the test pattern is stricter now.  Also do some test cleanup
@
text
@# The client writes a message to Sys::Syslog native method.
# The syslogd writes it into a file and through a pipe.
# The syslogd passes it via UDP to the loghost.
# The server receives the message on its UDP socket.
# Find the message in client, file, pipe, syslogd, server log.
# Check that the file log contains the hostname and message.

use strict;
use warnings;
use Sys::Hostname;

(my $host = hostname()) =~ s/\..*//;

our %args = (
    client => {
	logsock => { type => "native" },
    },
    file => {
	loggrep => qr/ $host syslogd-regress\[\d+\]: /. get_testgrep(),
    },
);

1;
@


1.2
log
@Add tests for syslogd's memory buffer and read it with syslogc.
@
text
@d12 1
a12 1
(my $host = hostname()) =~ s/\..*//;  # short name
d19 1
a19 1
	loggrep => qr/ $host syslogd-regress\[\d+\]: /. get_testlog(),
@


1.1
log
@Check that messages from sendsyslog(2) or unix domain sockets contain
the short host name.
@
text
@d19 1
a19 1
	loggrep => qr/ $host syslogd-regress\[\d+\]: /. get_log(),
@

