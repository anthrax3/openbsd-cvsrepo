head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.4
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.6.0.4
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4;
locks; strict;
comment	@# @;


1.8
date	2017.02.07.16.04.33;	author bluhm;	state Exp;
branches;
next	1.7;
commitid	Etjs5G1iiU32m3bx;

1.7
date	2017.01.31.16.35.57;	author bluhm;	state Exp;
branches;
next	1.6;
commitid	YbRLOsqUpUGpP6H0;

1.6
date	2015.09.10.18.37.06;	author bluhm;	state Exp;
branches;
next	1.5;
commitid	knbdS9rxp7T1Jmwi;

1.5
date	2015.07.16.16.34.49;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	0M9ba2ikkjyPND6j;

1.4
date	2015.02.09.21.06.35;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	ijXbEt8h29UoWlgz;

1.3
date	2015.02.06.00.27.41;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	8et2usx9CGyR7b0D;

1.2
date	2015.01.30.15.13.10;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	rSemIB8GmQuRx9Yu;

1.1
date	2015.01.16.11.51.59;	author bluhm;	state Exp;
branches;
next	;
commitid	0LYtCVxwz86nbUES;


desc
@@


1.8
log
@Adapt regex in syslogd test to the new shiny libssl error messages.
@
text
@# The TCP server writes cleartext into the TLS connection to syslogd.
# The client writes a message to Sys::Syslog native method.
# The syslogd writes it into a file and through a pipe.
# The syslogd passes it via IPv4 TLS to an explicit loghost.
# The server accepts an TCP socket.
# Find the message in client, pipe, syslogd log.
# Check that syslogd writes a log message about the SSL connect error.

use strict;
use warnings;
use Socket;

our %args = (
    client => {
	func => sub {
	    my $self = shift;
	    ${$self->{syslogd}}->loggrep("loghost .* connection error", 5)
		or die "no connection error in syslogd.log";
	    write_log($self);
	},
    },
    syslogd => {
	loghost => '@@tls://127.0.0.1:$connectport',
	loggrep => {
	    qr/Logging to FORWTLS \@@tls:\/\/127.0.0.1:\d+/ => '>=4',
	    get_testgrep() => 1,
	    qr/syslogd: loghost .* connection error/ => 2,
	},
    },
    server => {
	listen => { domain => AF_INET, proto => "tcp", addr => "127.0.0.1" },
	func => sub {
	    my $self = shift;
	    print "Writing cleartext into a TLS connection is a bad idea\n";
	    ${$self->{syslogd}}->loggrep("loghost .* connection error", 5)
		or die "no connection error in syslogd.log";
	},
	loggrep => {},
    },
    file => {
	loggrep => {
	    qr/syslogd: loghost .* connection error: /.
		qr/handshake failed: error:.*:SSL routines:/.
		qr/CONNECT_CR_SRVR_HELLO:wrong version number/ => 1,
	},
    },
);

1;
@


1.7
log
@The libssl and libcrypto error messages have changed.  Adapt the
regex for the expected output in the log files.
@
text
@d43 2
a44 2
		qr/handshake failed: error:.*:/.
		qr/SSL_internal:wrong version number/ => 1,
@


1.6
log
@Grep for new error messages about tls_connect_socket.  Libtls now
reports handshake failed.  Make bufsize tests more reliable.
@
text
@d43 2
a44 2
		qr/handshake failed: error:.*/.
		qr/SSL23_GET_SERVER_HELLO:unknown protocol/ => 1,
@


1.5
log
@Test that syslogd does not append white spaces to messages.  Per
default the test pattern is stricter now.  Also do some test cleanup
@
text
@d42 2
a43 1
	    qr/syslogd: loghost .* connection error: connect failed: error:.*/.
@


1.4
log
@Error messages form libtls have changed, adapt syslogd tests.
@
text
@d26 1
a26 1
	    get_testlog() => 1,
@


1.3
log
@Add syslogd tests for dropped messages.
@
text
@d42 2
a43 2
	    qr/syslogd: loghost .* connection error: TLS connect failed \(1\)/
		=> 1,
@


1.2
log
@TLS connect error message has changed, adapt tests.
@
text
@d19 1
a19 1
	    write_log($self, @@_);
@


1.1
log
@Add regression tests for syslog over TLS.
@
text
@d42 1
a42 1
	    qr/syslogd: loghost .* connection error: SSL connect failed: 1/
@

