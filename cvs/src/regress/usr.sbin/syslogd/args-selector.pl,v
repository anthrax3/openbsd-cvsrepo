head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.4
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.2.0.10
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.6
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.4
	OPENBSD_5_8_BASE:1.2;
locks; strict;
comment	@# @;


1.3
date	2017.04.06.16.56.44;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	ksZqqvb6rOiQTz4j;

1.2
date	2015.07.20.05.34.16;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	z0hAhY1IWpp7tf4t;

1.1
date	2015.06.29.07.23.00;	author bluhm;	state Exp;
branches;
next	;
commitid	vL8PUiQMWddXOJZg;


desc
@@


1.3
log
@Check that local syslog messages have the the expected priority.
@
text
@# The client sends messages with different facility and severity.
# The syslogd writes into multiple files depending on priority.
# The syslogd writes it into a file and through a pipe.
# The syslogd passes it via UDP to the loghost.
# The server receives the message on its UDP socket.
# Find the message in client, file, pipe, syslogd, server log.
# Check that the messages appear in the correct log files.

use strict;
use warnings;
use Sys::Syslog;

my (@@messages, @@priorities);
foreach my $fac (qw(local5 local6 local7)) {
    foreach my $sev (qw(notice warning err)) {
	my $msg = "$fac.$sev";
	push @@messages, $msg;
	no strict 'refs';
	my $prio = ("Sys::Syslog::LOG_".uc($fac))->() |
	    ("Sys::Syslog::LOG_".uc($sev))->();
	push @@priorities, $prio;
    }
}

my %selector2messages = (
    "*.*" => [@@messages],
    "*.info" => [@@messages],
    "*.notice" => [@@messages],
    "*.warning" => [ grep { /\.(warning|err)$/ } @@messages],
    "*.err" => [ grep { /\.err$/ } @@messages],
    "*.crit" => [],
    "*.none" => [],
    "local5.*" => [qw(local5.notice local5.warning local5.err)],
    "local5.info" => [qw(local5.notice local5.warning local5.err)],
    "local5.notice" => [qw(local5.notice local5.warning local5.err)],
    "local5.warning" => [qw(local5.warning local5.err)],
    "local5.err" => [qw(local5.err)],
    "local5.crit" => [],
    "local5.none" => [],
    "local5.warning;local5.err" => [qw(local5.err)],
    "local5.err;local5.warning" => [qw(local5.warning local5.err)],
    "local6.warning;local7.err" => [qw(local6.warning local6.err local7.err)],
    "local6.err;local7.err" => [qw(local6.err local7.err)],
    "local6,local7.err" => [qw(local6.err local7.err)],
    "local6,local7.warning;local6.err" => [qw(local6.err local7.warning
	local7.err)],
    "*.*;local6,local7.none" => [qw(local5.notice local5.warning local5.err)],
);

our %args = (
    client => {
	func => sub {
	    my $self = shift;
	    for (my $i = 0; $i < @@messages; $i++) {
		syslog($priorities[$i], $messages[$i]);
	    }
	    write_log($self);
	},
    },
    syslogd => {
	conf => selector2config(%selector2messages),
    },
    multifile => [
	(map { { loggrep => $_ } } (selector2loggrep(%selector2messages))),
    ],
    server => {
	loggrep => { map { qr/ <$_>/ => 1 } @@priorities },
    },
    file => {
	loggrep => { map { qr/: $_$/ => 1 } @@messages },
    },
);

1;
@


1.2
log
@Allow to use $curdir, $objdir, $host, $hostname in the test config
file.  They are substituted automatically, to avoid this in each
single test.
@
text
@a49 28
sub selector2config {
    my %s2m = @@_;
    my $conf = "";
    my $i = 0;
    foreach my $sel (sort keys %s2m) {
	$conf .= "$sel\t\$objdir/file-$i.log\n";
	$i++;
    }
    return $conf;
}

sub messages2loggrep {
    my %s2m = @@_;
    my @@loggrep;
    foreach my $sel (sort keys %s2m) {
	my @@m = @@{$s2m{$sel}};
	my (%msg, %nomsg);
	@@msg{@@m} = ();
	@@nomsg{@@messages} = ();
	delete @@nomsg{@@m};
	push @@loggrep, {
	    (map { qr/: $_$/ => 1 } sort keys %msg),
	    (map { qr/: $_$/ => 0 } sort keys %nomsg),
	};
    }
    return @@loggrep;
}

d64 1
a64 1
	(map { { loggrep => $_ } } (messages2loggrep(%selector2messages))),
@


1.1
log
@Test that selectors, which specify facility and severity level for
each logfile, work as documented in syslog.conf(5).
@
text
@a10 1
use Cwd;
a12 2
my $objdir = getcwd();

d55 1
a55 1
	$conf .= "$sel\t$objdir/file-$i.log\n";
@

