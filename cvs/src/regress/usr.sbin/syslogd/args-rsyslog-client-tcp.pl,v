head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.4
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.2
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.2.0.4
	OPENBSD_5_8_BASE:1.2;
locks; strict;
comment	@# @;


1.4
date	2016.05.03.17.05.31;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	YRQY6rKrRnuR53cx;

1.3
date	2015.11.02.00.48.17;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	QWjIMCYPqReOyyWd;

1.2
date	2015.08.01.14.55.58;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	mKDhz3mFTSL2PZNi;

1.1
date	2015.07.07.18.03.11;	author bluhm;	state Exp;
branches;
next	;
commitid	qTzx3B33iQFlT4Uv;


desc
@@


1.4
log
@To test syslogd compatibility rsyslog is used as remote server.
New rsyslog has other options and debug output, adapt test.
@
text
@# Test TCP with rsyslogd as sender.
# The client writes a message to rsyslogd UDP socket.
# The rsyslogd forwards the message to syslogd TCP listen socket.
# The syslogd writes it into a file and through a pipe.
# The syslogd passes it via UDP to the rsyslogd.
# The rsyslogd receives the message on its UDP socket.
# Find the message in rsyslogd, file, pipe, syslogd, server log.
# Check that the message is in rsyslogd, syslogd, server log.

use strict;
use warnings;
use Socket;

our %args = (
    client => {
	connect => { domain => AF_INET, proto => "udp", addr => "127.0.0.1" },
    },
    rsyslogd => {
	listen => { domain => AF_INET, proto => "udp", addr => "127.0.0.1" },
	connect => { domain => AF_INET, proto => "tcp", addr => "127.0.0.1",
	    port => 514 },
	loggrep => {
	    qr/omfile.* /.get_testgrep() => 1,
	},
    },
    syslogd => {
	options => ["-T", "127.0.0.1:514"],
	loggrep => {
	    get_testgrep() => 1,
	    qr/syslogd: tcp logger .* accepted/ => 1,
	},
    },
);

1;
@


1.3
log
@Test that rsyslogd can send over TLS to OpenBSD syslogd.
@
text
@d22 3
@


1.2
log
@Use Socket to make Perl syntax check of single test files pass.
@
text
@d25 4
@


1.1
log
@Add tests for incomming syslog messages over TCP.
@
text
@d12 1
@

