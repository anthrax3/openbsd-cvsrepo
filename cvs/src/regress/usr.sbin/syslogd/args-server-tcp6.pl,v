head	1.3;
access;
symbols
	OPENBSD_6_1:1.2.0.10
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.6
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.4
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.1.0.4
	OPENBSD_5_7_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2017.09.12.15.24.21;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	fQcw2c9T4xGELf8r;

1.2
date	2015.07.16.16.34.49;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	0M9ba2ikkjyPND6j;

1.1
date	2014.12.31.14.05.26;	author bluhm;	state Exp;
branches;
next	;
commitid	aJ48QDLYN7gznT6d;


desc
@@


1.3
log
@Syslogd does no longer keep the *:514 UDP sockets open by default.
Adapt tests.
@
text
@# The client writes a message to Sys::Syslog native method.
# The syslogd writes it into a file and through a pipe.
# The syslogd passes it via IPv6 TCP to an explicit loghost.
# The server receives the message on its TCP socket.
# Find the message in client, file, pipe, syslogd, server log.
# Check that syslogd and server log contain ::1 address.
# Check that with TCP server all other sockets are closed.

use strict;
use warnings;
use Socket;

our %args = (
    syslogd => {
	loghost => '@@tcp://[::1]:$connectport',
	loggrep => {
	    qr/Logging to FORWTCP \@@tcp:\/\/\[::1\]:\d+/ => '>=4',
	    get_testgrep() => 1,
	},
	fstat => {
	    qr/stream tcp/ => 1,
	    qr/^_syslogd .* internet6 stream tcp / => 1,
	},
    },
    server => {
	listen => { domain => AF_INET6, proto => "tcp", addr => "::1" },
	loggrep => {
	    qr/listen sock: ::1 \d+/ => 1,
	    get_testgrep() => 1,
	},
    },
);

1;
@


1.2
log
@Test that syslogd does not append white spaces to messages.  Per
default the test pattern is stricter now.  Also do some test cleanup
@
text
@d7 1
d19 4
@


1.1
log
@Adapt and add regression tests for sending syslog messages over TCP.
@
text
@d17 1
a17 1
	    get_testlog() => 1,
d24 1
a24 1
	    get_testlog() => 1,
@

