head	1.7;
access;
symbols
	OPENBSD_6_2:1.7.0.12
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.7.0.10
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.6
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5;
locks; strict;
comment	@# @;


1.7
date	2015.07.16.16.34.49;	author bluhm;	state Exp;
branches;
next	1.6;
commitid	0M9ba2ikkjyPND6j;

1.6
date	2015.07.07.18.03.11;	author bluhm;	state Exp;
branches;
next	1.5;
commitid	qTzx3B33iQFlT4Uv;

1.5
date	2015.02.13.21.40.50;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	tZ8vhc9XWQ8KWPvp;

1.4
date	2015.02.06.00.27.41;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	8et2usx9CGyR7b0D;

1.3
date	2014.12.31.14.05.26;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	aJ48QDLYN7gznT6d;

1.2
date	2014.09.13.23.38.24;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	8abA8sLPTwAOrtQB;

1.1
date	2014.09.03.15.56.07;	author bluhm;	state Exp;
branches;
next	;
commitid	JHHXofVHBjdMTBFz;


desc
@@


1.7
log
@Test that syslogd does not append white spaces to messages.  Per
default the test pattern is stricter now.  Also do some test cleanup
@
text
@# The client writes messages to MAXUNIX unix domain sockets.
# The syslogd -a writes them into a file and through a pipe.
# The syslogd -a passes them via UDP to the loghost.
# The server receives the messages on its UDP socket.
# Find the message in client, file, pipe, syslogd, server log.
# Check that the file log contains a message from every socket.
# Check that no error is printed.

use strict;
use warnings;
use Sys::Hostname;
use IO::Socket::UNIX;
use constant MAXUNIX => 21;

(my $host = hostname()) =~ s/\..*//;

our %args = (
    client => {
	func => sub {
	    my $self = shift;
	    write_unix($self, "/dev/log");
	    foreach (1..(MAXUNIX-1)) {
		write_unix($self, "unix-$_.sock", $_);
	    }
	    ${$self->{syslogd}}->loggrep(get_testgrep(), 5, MAXUNIX)
		or die ref($self), " syslogd did not receive complete line";
	    write_shutdown($self);
	},
    },
    syslogd => {
	options => [ map { ("-a" => "unix-$_.sock") } (1..(MAXUNIX-1)) ],
	loggrep => {
	    qr/out of descriptors/ => 0,
	},
    },
    file => {
	loggrep => {
	    qr/ $host .* unix socket: /.get_testgrep() => MAXUNIX,
	    "/dev/log unix socket" => 1,
	    (map { " $_ unix socket: ".get_testgrep() => 1 } 1..MAXUNIX-1),
	    MAXUNIX." unix socket: ".get_testgrep() => 0,
	},
    },
);

1;
@


1.6
log
@Add tests for incomming syslog messages over TCP.
@
text
@d11 1
d15 2
d21 1
a21 1
	    write_unix($self);
d23 1
a23 1
		write_unix($self, "unix-$_.sock");
d25 1
a25 1
	    ${$self->{syslogd}}->loggrep(get_testlog(), 5, MAXUNIX)
d38 4
a41 4
	    get_testlog()." /dev/log unix socket" => 1,
	    (map { (get_testlog()." unix-$_.sock unix socket" => 1) }
		(1..(MAXUNIX-1))),
	    get_testlog()." unix-".MAXUNIX.".sock unix socket" => 0,
@


1.5
log
@Adapt the maxunix test, the syslogd -a error semantic has changed.
Increase timeouts and remove races, so that the syslogd tests pass
on my sparc64 machine.
@
text
@d22 2
@


1.4
log
@Add syslogd tests for dropped messages.
@
text
@d6 2
a7 2
# Check that the file log contains a message from every sockets.
# Check that the one socket above the limit prints an error.
d26 1
a26 1
	options => [ map { ("-a" => "unix-$_.sock") } (1..MAXUNIX) ],
d28 1
a28 3
	    qr/syslogd: out of descriptors, ignoring unix-20.sock/ => 0,
	    qr/syslogd: out of descriptors, ignoring unix-21.sock/ => 1,
	    qr/syslogd: out of descriptors, ignoring unix-22.sock/ => 0,
@


1.3
log
@Adapt and add regression tests for sending syslog messages over TCP.
@
text
@d22 1
a22 1
	    write_shutdown($self, @@_);
@


1.2
log
@Add tests for syslogd's memory buffer and read it with syslogc.
@
text
@d39 1
a39 1
	}
@


1.1
log
@Add tests that send log messages via unix domain sockets to syslogd.
Also check that the maximum number of -a path is handled correctly.
@
text
@d20 1
a20 1
		write_unix($self, "unix.$_");
d26 1
a26 1
	options => [ map { ("-a" => "unix.$_") } (1..MAXUNIX) ],
d28 3
a30 3
	    qr/syslogd: out of descriptors, ignoring unix.20/ => 0,
	    qr/syslogd: out of descriptors, ignoring unix.21/ => 1,
	    qr/syslogd: out of descriptors, ignoring unix.22/ => 0,
d35 4
a38 4
	    get_log()." /dev/log unix socket" => 1,
	    (map { (get_log()." unix.$_ unix socket" => 1) } (1..(MAXUNIX-1))),

	    get_log()." unix.".MAXUNIX." unix socket" => 0,
@

