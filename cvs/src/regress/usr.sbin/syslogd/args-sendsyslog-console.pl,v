head	1.3;
access;
symbols
	OPENBSD_6_1:1.3.0.4
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.2
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2;
locks; strict;
comment	@# @;


1.3
date	2016.03.21.23.23.15;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	ICMd7I0he7hx5htW;

1.2
date	2016.01.07.12.38.56;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	aF0Fu7Smxf5A2B5q;

1.1
date	2015.12.30.13.15.52;	author bluhm;	state Exp;
branches;
next	;
commitid	A5ZwhsoQcJtCsd2c;


desc
@@


1.3
log
@System call sendsyslog2 is gone, adapt tests.
@
text
@# The client kills syslogd.
# The client writes a message with sendsyslog LOG_CONS flag.
# Find the message in console log.
# Create a ktrace dump of the client and check for sendsyslog.
# Check that no syslog priority or dropped message is logged to console.

use strict;
use warnings;
use Errno ':POSIX';
use Sys::Syslog 'LOG_CONS';

my $errno = ENOTCONN;

our %args = (
    client => {
	func => sub {
	    my $self = shift;
	    ${$self->{syslogd}}->kill_syslogd('TERM');
	    ${$self->{syslogd}}->down();
	    sendsyslog("<123>".get_testlog(), LOG_CONS)
		and die ref($self), " sendsyslog succeeded";
	    sendsyslog(get_testlog(), LOG_CONS)
		and die ref($self), " sendsyslog succeeded";
	    foreach (qw(< <1 <12 <123 <1234)) {
		sendsyslog($_, LOG_CONS)
		    and die ref($self), " sendsyslog succeeded";
		sendsyslog("$_>", LOG_CONS)
		    and die ref($self), " sendsyslog succeeded";
		sendsyslog("$_>foo", LOG_CONS)
		    and die ref($self), " sendsyslog succeeded";
	    }
	    write_shutdown($self);
	},
	ktrace => {
	    qr/CALL  sendsyslog\(/ => 18,
	    qr/GIO   fd -1 wrote /.length(get_testlog()).qr/ bytes/ => 2,
	    qr/RET   sendsyslog -1 errno $errno / => 18,
	},
	loggrep => {},
    },
    syslogd => {
	conffile => "/dev/null",
	loggrep => {},
    },
    server => { noserver => 1 },
    file => { nocheck => 1 },
    pipe => { nocheck => 1 },
    user => { nocheck => 1 },
    console => {
	loggrep => {
	    get_testgrep() => 2,
	    qr/<\d+>/ => 0,
	    qr/dropped \d+ message/ => 0,
	},
    },
);

1;
@


1.2
log
@When syslogd is not running, check that no syslog priority or dropped
message is logged to the console by the kernel.
@
text
@d2 1
a2 1
# The client writes a message with sendsyslog2 LOG_CONS flag.
d4 1
a4 1
# Create a ktrace dump of the client and check for sendsyslog2.
d20 4
a23 4
	    sendsyslog2("<123>".get_testlog(), LOG_CONS)
		and die ref($self), " sendsyslog2 succeeded";
	    sendsyslog2(get_testlog(), LOG_CONS)
		and die ref($self), " sendsyslog2 succeeded";
d25 6
a30 6
		sendsyslog2($_, LOG_CONS)
		    and die ref($self), " sendsyslog2 succeeded";
		sendsyslog2("$_>", LOG_CONS)
		    and die ref($self), " sendsyslog2 succeeded";
		sendsyslog2("$_>foo", LOG_CONS)
		    and die ref($self), " sendsyslog2 succeeded";
d35 1
a35 1
	    qr/CALL  sendsyslog2\(/ => 18,
d37 1
a37 1
	    qr/RET   sendsyslog2 -1 errno $errno / => 18,
@


1.1
log
@Test logging to console by redirecting the system's console into a
file.  All subtests get an additional /dev/console entry in
syslog.conf, then check that messages appear in the console file.
Add a test that stops syslogd, calls sendsyslog2() with LOG_CONS
and checks that the message appears in the console file.
@
text
@d5 1
d20 2
d24 9
d35 3
a37 2
	    qr/CALL  sendsyslog2\(/ => 1,
	    qr/RET   sendsyslog2 -1 errno $errno / => 1,
d41 4
a44 1
    syslogd => { loggrep => {} },
d49 7
@

