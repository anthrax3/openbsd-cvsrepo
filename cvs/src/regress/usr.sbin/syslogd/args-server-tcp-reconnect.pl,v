head	1.7;
access;
symbols
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.5.0.6
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.2
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.4
	OPENBSD_5_7_BASE:1.3;
locks; strict;
comment	@# @;


1.7
date	2017.09.13.00.35.53;	author bluhm;	state Exp;
branches;
next	1.6;
commitid	bWWbEvUtwVmoTxtA;

1.6
date	2017.04.05.22.32.14;	author bluhm;	state Exp;
branches;
next	1.5;
commitid	7DBpdoIApLnFWBfl;

1.5
date	2016.07.01.15.30.46;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	DwsX5WxZsGRqcTCo;

1.4
date	2016.05.29.14.38.33;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	pWd8xXMglTwDqGII;

1.3
date	2015.02.09.21.06.35;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	ijXbEt8h29UoWlgz;

1.2
date	2015.02.06.00.27.41;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	8et2usx9CGyR7b0D;

1.1
date	2015.01.15.13.15.17;	author bluhm;	state Exp;
branches;
next	;
commitid	mHMJNTj9xtaQr97F;


desc
@@


1.7
log
@Check that the hostname added by syslogd -h in file and server log
is correct.  Use generic redo functions.  Do syntax check for all
Perl files.
@
text
@# The TCP server closes the connection to syslogd.
# The client writes a message to Sys::Syslog native method.
# The syslogd writes it into a file and through a pipe.
# The syslogd does a TCP reconnect and passes it to loghost.
# The server receives the message on its new accepted TCP socket.
# Find the message in client, pipe, syslogd, server log.
# Check that syslogd and server close and reopen the connection.

use strict;
use warnings;
use Socket;
use Errno ':POSIX';

my @@errors = (ECONNREFUSED, EPIPE);
my $errors = "(". join("|", map { $! = $_ } @@errors). ")";

our %args = (
    client => {
	func => sub { write_between2logs(shift, sub {
	    my $self = shift;
	    ${$self->{syslogd}}->loggrep($errors, 5)
		or die "no $errors in syslogd.log";
	})},
    },
    syslogd => {
	loghost => '@@tcp://127.0.0.1:$connectport',
	loggrep => {
	    qr/Logging to FORWTCP \@@tcp:\/\/127.0.0.1:\d+/ => '>=6',
	    qr/syslogd\[\d+\]: (connect .*|.*connection error): $errors/ => 1,
	    get_between2loggrep(),
	},
    },
    server => {
	listen => { domain => AF_INET, proto => "tcp", addr => "127.0.0.1" },
	func => sub { accept_between2logs(shift, sub {
	    my $self = shift;
	    $self->close();
	    shutdown(\*STDOUT, 1)
		or die "shutdown write failed: $!";
	    ${$self->{syslogd}}->loggrep($errors, 5)
		or die "no $errors in syslogd.log";
	    $self->listen();
	})},
	loggrep => {
	    qr/Accepted/ => 2,
	    qr/syslogd\[\d+\]: loghost .* connection close/ => 1,
	    qr/syslogd\[\d+\]: (connect .*|.*connection error): $errors/ => 1,
	    get_between2loggrep(),
	},
    },
    file => {
	loggrep => {
	    qr/syslogd\[\d+\]: (connect .*|.*connection error): $errors/ => 1,
	    get_between2loggrep(),
	},
    },
);

1;
@


1.6
log
@Syslogd's debug and error messages have changed a bit, adapt test.
@
text
@d35 1
a35 2
	redo => 0,
	func => sub { read_between2logs(shift, sub {
a36 4
	    if ($self->{redo}) {
		$self->{redo}--;
		return;
	    }
a42 1
	    $self->{redo}++;
@


1.5
log
@Timing changed, now a syslogd test may get EPIPE instead of
ECONNREFUSED error.
@
text
@d29 1
a29 1
	    qr/syslogd: (connect .*|.*connection error): $errors/ => '>=2',
d52 2
a53 2
	    qr/syslogd: loghost .* connection close/ => 1,
	    qr/syslogd: (connect .*|.*connection error): $errors/ => 1,
d59 1
a59 1
	    qr/syslogd: (connect .*|.*connection error): $errors/ => '>=1',
@


1.4
log
@When connecting to a non existing tcp listen socket on localhost,
connect(2) does no longer fail immediately.  It reports EINPROGRESS
first, an ECONNREFUSED or EPIPE error follows later.  Allow this
changed behavior in syslogd(8) regression tests.
@
text
@d14 1
a14 1
my @@errors = (ECONNREFUSED);
@


1.3
log
@Error messages form libtls have changed, adapt syslogd tests.
@
text
@d21 2
a22 2
	    ${$self->{syslogd}}->loggrep("Connection refused", 5)
		or die "no connection refused in syslogd.log";
d29 1
a29 1
	    qr/syslogd: connect .*: $errors/ => '>=2',
d45 2
a46 2
	    ${$self->{syslogd}}->loggrep("Connection refused", 5)
		or die "no connection refused in syslogd.log";
d53 1
a53 1
	    qr/syslogd: connect .*: $errors/ => 1,
d59 1
a59 1
	    qr/syslogd: connect .*: $errors/ => '>=1',
@


1.2
log
@Add syslogd tests for dropped messages.
@
text
@d12 4
d29 1
a29 1
	    qr/syslogd: connect .* Connection refused/ => '>=2',
d53 1
a53 1
	    qr/syslogd: connect .* Connection refused/ => 1,
d59 1
a59 1
	    qr/syslogd: connect .* Connection refused/ => '>=1',
@


1.1
log
@Add a test for syslogd that reconnects to a TCP syslog server after
an established connection has been closed.
@
text
@d15 1
a15 1
	func => sub {
d17 3
a19 5
	    write_between2logs($self, sub {
		${$self->{syslogd}}->loggrep("Connection refused", 5)
		    or die "no connection refused in syslogd.log";
	    });
	},
d32 1
a32 1
	func => sub {
d34 12
a45 14
	    read_between2logs($self, sub {
		if ($self->{redo}) {
		    $self->{redo}--;
		    return;
		}
		$self->close();
		shutdown(\*STDOUT, 1)
		    or die "shutdown write failed: $!";
		${$self->{syslogd}}->loggrep("Connection refused", 5)
		    or die "no connection refused in syslogd.log";
		$self->listen();
		$self->{redo}++;
	    });
	},
@

