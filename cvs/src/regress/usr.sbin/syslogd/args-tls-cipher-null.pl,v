head	1.7;
access;
symbols
	OPENBSD_6_0:1.5.0.4
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.4.0.4
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.3.0.4
	OPENBSD_5_7_BASE:1.3;
locks; strict;
comment	@# @;


1.7
date	2017.02.07.16.04.33;	author bluhm;	state Exp;
branches;
next	1.6;
commitid	Etjs5G1iiU32m3bx;

1.6
date	2017.01.31.16.35.57;	author bluhm;	state Exp;
branches;
next	1.5;
commitid	YbRLOsqUpUGpP6H0;

1.5
date	2015.09.10.18.37.06;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	knbdS9rxp7T1Jmwi;

1.4
date	2015.07.16.16.34.49;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	0M9ba2ikkjyPND6j;

1.3
date	2015.02.09.21.06.35;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	ijXbEt8h29UoWlgz;

1.2
date	2015.01.30.15.13.10;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	rSemIB8GmQuRx9Yu;

1.1
date	2015.01.28.22.58.38;	author bluhm;	state Exp;
branches;
next	;
commitid	MNLedIN5SwyY3fog;


desc
@@


1.7
log
@Adapt regex in syslogd test to the new shiny libssl error messages.
@
text
@# The client writes a message to Sys::Syslog native method.
# The syslogd writes it into a file and through a pipe.
# The syslogd passes it via TLS to localhost loghost.
# The server offers only the null cipher on its TLS socket.
# Find the message in client, file, pipe, syslogd log.
# Check that server log contains the no shared cipher error.

use strict;
use warnings;
use Socket;

our %args = (
    syslogd => {
	loghost => '@@tls://localhost:$connectport',
	loggrep => {
	    qr/Logging to FORWTLS \@@tls:\/\/localhost:\d+/ => '>=4',
	    qr/syslogd: loghost .* connection error: /.
		qr/handshake failed: error:.*:SSL routines:/.
		qr/CONNECT_CR_SRVR_HELLO:sslv3 alert handshake failure/ => 2,
	    get_testgrep() => 1,
	},
	cacrt => "ca.crt",
    },
    server => {
	listen => { domain => AF_UNSPEC, proto => "tls", addr => "localhost" },
	sslciphers => "NULL",
	up => "IO::Socket::SSL socket accept failed",
	down => "Server",
	exit => 255,
	loggrep => {
	    qr/listen sock: (127.0.0.1|::1) \d+/ => 1,
	    qr/SSL routines:ACCEPT_SR_CLNT_HELLO_C:no shared cipher/ => 1,
	    get_testgrep() => 0,
	},
    },
);

1;
@


1.6
log
@The libssl and libcrypto error messages have changed.  Adapt the
regex for the expected output in the log files.
@
text
@d18 2
a19 2
		qr/handshake failed: error:.*:/.
		qr/SSL_internal:sslv3 alert handshake failure/ => 2,
d32 1
a32 1
	    qr/SSL_internal:no shared cipher/ => 1,
@


1.5
log
@Grep for new error messages about tls_connect_socket.  Libtls now
reports handshake failed.  Make bufsize tests more reliable.
@
text
@d18 2
a19 2
		qr/handshake failed: error.*:/.
		qr/SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure/ => 2,
d32 1
a32 1
	    qr/no shared cipher/ => 1,
@


1.4
log
@Test that syslogd does not append white spaces to messages.  Per
default the test pattern is stricter now.  Also do some test cleanup
@
text
@d17 2
a18 1
	    qr/syslogd: loghost .* connection error: connect failed: error.*:/.
@


1.3
log
@Error messages form libtls have changed, adapt syslogd tests.
@
text
@d19 1
a19 1
	    get_testlog() => 1,
d32 1
a32 1
	    get_testlog() => 0,
@


1.2
log
@TLS connect error message has changed, adapt tests.
@
text
@d17 2
a18 1
	    qr/connection error: TLS connect failed \(1\)/ => 2,
@


1.1
log
@Add a test where the TLS handshake fails because of null ciphers.
@
text
@d17 1
a17 1
	    qr/connection error: SSL connect failed: 1/ => 2,
@

