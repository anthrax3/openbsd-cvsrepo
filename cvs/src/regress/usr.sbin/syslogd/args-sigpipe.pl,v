head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.6
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.4
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.4.0.6
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.4
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.3.0.4
	OPENBSD_5_7_BASE:1.3;
locks; strict;
comment	@# @;


1.5
date	2016.10.06.13.06.14;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	SvZFLcp8z1QgdkQR;

1.4
date	2015.06.15.21.44.57;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	BmPbwQg6idYgxXrC;

1.3
date	2015.02.06.00.27.41;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	8et2usx9CGyR7b0D;

1.2
date	2014.09.02.17.43.29;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	uB2qKOs5zbFwXm2E;

1.1
date	2014.09.02.00.26.30;	author bluhm;	state Exp;
branches;
next	;
commitid	9hOtCJWVU54mPrrd;


desc
@@


1.5
log
@Check that syslogd priv process does exec on itself.
@
text
@# The client writes a message to Sys::Syslog native method.
# The syslogd writes it into a file and through a pipe.
# The syslogd passes it via UDP to the loghost.
# The server receives the message on its UDP socket.
# Find the message in client, file, pipe, syslogd, server log.
# Check that a SIGPIPE is ignored by syslogd.

use strict;
use warnings;

our %args = (
    client => {
	func => sub { write_between2logs(shift, sub {
	    my $self = shift;
	    ${$self->{server}}->loggrep("Signal", 8)
		or die ref($self), " no 'Signal' between logs";
	})},
	loggrep => { get_between2loggrep() },
    },
    syslogd => {
	ktrace => {
	    qr/syslogd  PSIG  SIGPIPE/ => 0,
	    qr/syslogd  RET   execve 0/ => 2,
	},
	loggrep => { get_between2loggrep() },
    },
    server => {
	func => sub { read_between2logs(shift, sub {
	    my $self = shift;
	    ${$self->{syslogd}}->kill_syslogd('PIPE');
	    sleep 1;  # schedule syslogd
	    print STDERR "Signal\n";
	})},
	loggrep => { get_between2loggrep() },
    },
    file => { loggrep => { get_between2loggrep() } },
    pipe => { loggrep => { get_between2loggrep() } },
);

1;
@


1.4
log
@Rework how fstat and ktrace pattern are specified in the test
arguments.  Add tests to check wether syslogd privsep works.  This
is done for debug and foreground and daemon mode.  Fstat is checked
for chroot and sockets.  Ktrace dump is grepped for setting uid and
gid.
@
text
@d23 1
a23 1
	    qr/syslogd  RET   execve 0/ => 1,
@


1.3
log
@Add syslogd tests for dropped messages.
@
text
@d21 1
a21 2
	ktrace => 1,
	kdump => {
@


1.2
log
@To examine the operation of the signal handlers, the tests grep in
the ktrace output of syslogd.  Also make the tests work without DNS
and without sudo.
@
text
@d13 1
a13 1
	func => sub {
d15 3
a17 5
	    write_between2logs($self, sub {
		${$self->{server}}->loggrep("Signal", 8)
		    or die ref($self), " no 'Signal' between logs";
	    });
	},
d29 1
a29 1
	func => sub {
d31 4
a34 6
	    read_between2logs($self, sub {
		${$self->{syslogd}}->kill_syslogd('PIPE');
		sleep 1;  # schedule syslogd
		print STDERR "Signal\n";
	    });
	},
@


1.1
log
@Add tests that run the syslogd signal handlers.
@
text
@d23 5
@

