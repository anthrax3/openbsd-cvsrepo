head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.8
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.6
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.2
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3;
locks; strict;
comment	@# @;


1.4
date	2016.03.21.23.23.15;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	ICMd7I0he7hx5htW;

1.3
date	2015.12.30.13.15.52;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	A5ZwhsoQcJtCsd2c;

1.2
date	2015.09.11.12.56.49;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	9pMSh32rweZRfgzF;

1.1
date	2015.09.09.10.59.26;	author bluhm;	state Exp;
branches;
next	;
commitid	3mSXxNwr3vtRORHa;


desc
@@


1.4
log
@System call sendsyslog2 is gone, adapt tests.
@
text
@# Run client before starting syslogd.
# The client writes one message before and one after syslogd is started.
# The kernel writes a sendsyslog(2) error message to the log socket.
# Start syslogd, it reads the error and the second message from the log socket.
# Find the kernel error message in file, syslogd, server log.
# Check that the first message got lost.
# Create a ktrace dump of the client and check that sendsyslog(2) has failed.

use strict;
use warnings;
use Errno ':POSIX';

my $errno = ENOTCONN;
my $kerngrep = qr/sendsyslog: dropped \d+ messages?, error $errno$/;

our %args = (
    client => {
	early => 1,
	func => sub { write_between2logs(shift, sub {
	    my $self = shift;
	    ${$self->{syslogd}}->loggrep(qr/syslogd: started/, 5)
		or die "syslogd started not in syslogd.log";
	})},
	ktrace => {
	    qr/CALL  sendsyslog\(/ => '>=2',
	    qr/RET   sendsyslog -1 errno $errno / => '>=1',
	},
    },
    syslogd => {
	loggrep => {
	    get_firstlog() => 0,
	    qr/msg $kerngrep/ => 1,
	    get_testgrep() => 1,
	},
    },
    server => {
	loggrep => {
	    get_firstlog() => 0,
	    $kerngrep => 1,
	    get_testgrep() => 1,
	},
    },
    file => {
	loggrep => {
	    get_firstlog() => 0,
	    $kerngrep => 1,
	    get_testgrep() => 1,
	},
    },
);

1;
@


1.3
log
@Test logging to console by redirecting the system's console into a
file.  All subtests get an additional /dev/console entry in
syslog.conf, then check that messages appear in the console file.
Add a test that stops syslogd, calls sendsyslog2() with LOG_CONS
and checks that the message appears in the console file.
@
text
@d25 2
a26 2
	    qr/CALL  sendsyslog2\(/ => '>=2',
	    qr/RET   sendsyslog2 -1 errno $errno / => '>=1',
@


1.2
log
@Check that there are no illegal spaces in the sendsyslog message.
@
text
@d25 2
a26 2
	    qr/CALL  sendsyslog/ => '>=2',
	    qr/RET   sendsyslog -1 errno $errno / => '>=1',
@


1.1
log
@Add args-bufsize-native.pl that checks wether libc syslog(3) can
handle 8192 bytes messages.  Rename the sendsyslog(2) tests
consistently.
@
text
@d32 1
a32 1
	    $kerngrep => 1,
@

