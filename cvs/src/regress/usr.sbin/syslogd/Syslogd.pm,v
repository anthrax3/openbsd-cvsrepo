head	1.22;
access;
symbols
	OPENBSD_6_2:1.22.0.6
	OPENBSD_6_2_BASE:1.22
	OPENBSD_6_1:1.22.0.4
	OPENBSD_6_1_BASE:1.22
	OPENBSD_6_0:1.19.0.2
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.14.0.4
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.11.0.4
	OPENBSD_5_7_BASE:1.11
	bluhm_20140820:1.1.1.1
	bluhm:1.1.1;
locks; strict;
comment	@# @;


1.22
date	2016.12.27.19.43.07;	author bluhm;	state Exp;
branches;
next	1.21;
commitid	DsSfMFAj1YlP2NcG;

1.21
date	2016.11.28.20.57.41;	author bluhm;	state Exp;
branches;
next	1.20;
commitid	97sJ2w3TFmFcQzQ5;

1.20
date	2016.10.12.23.02.25;	author bluhm;	state Exp;
branches;
next	1.19;
commitid	lQvKQgxwHYb3L6Um;

1.19
date	2016.07.12.15.44.58;	author bluhm;	state Exp;
branches;
next	1.18;
commitid	5Zg1jQ4gKUWogpGp;

1.18
date	2016.06.22.19.29.29;	author bluhm;	state Exp;
branches;
next	1.17;
commitid	205RoY6eR747zlNS;

1.17
date	2015.12.30.13.15.52;	author bluhm;	state Exp;
branches;
next	1.16;
commitid	A5ZwhsoQcJtCsd2c;

1.16
date	2015.10.19.20.16.09;	author bluhm;	state Exp;
branches;
next	1.15;
commitid	kVDnyxLzqDFKPFoO;

1.15
date	2015.08.25.20.52.44;	author bluhm;	state Exp;
branches;
next	1.14;
commitid	OKulIMpS4HCLUymK;

1.14
date	2015.07.20.05.34.16;	author bluhm;	state Exp;
branches;
next	1.13;
commitid	z0hAhY1IWpp7tf4t;

1.13
date	2015.07.16.16.34.34;	author bluhm;	state Exp;
branches;
next	1.12;
commitid	nFaAdoJrk7ShnYgH;

1.12
date	2015.06.15.21.44.57;	author bluhm;	state Exp;
branches;
next	1.11;
commitid	BmPbwQg6idYgxXrC;

1.11
date	2015.02.13.21.40.50;	author bluhm;	state Exp;
branches;
next	1.10;
commitid	tZ8vhc9XWQ8KWPvp;

1.10
date	2015.01.28.19.23.22;	author bluhm;	state Exp;
branches;
next	1.9;
commitid	6n55AVIuWA7LUOak;

1.9
date	2015.01.22.00.34.32;	author bluhm;	state Exp;
branches;
next	1.8;
commitid	LuWj56jz2petAB5H;

1.8
date	2015.01.01.19.58.48;	author bluhm;	state Exp;
branches;
next	1.7;
commitid	2YTZ0i51684RZ6xu;

1.7
date	2014.12.28.14.08.01;	author bluhm;	state Exp;
branches;
next	1.6;
commitid	2DOukBo6SZhymWi6;

1.6
date	2014.10.29.16.42.57;	author bluhm;	state Exp;
branches;
next	1.5;
commitid	JzJTvMXw7vJGDdtw;

1.5
date	2014.09.13.23.38.24;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	8abA8sLPTwAOrtQB;

1.4
date	2014.09.02.17.43.29;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	uB2qKOs5zbFwXm2E;

1.3
date	2014.09.02.00.26.30;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	9hOtCJWVU54mPrrd;

1.2
date	2014.08.29.21.55.55;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	ttGmQXH8XXWint6D;

1.1
date	2014.08.20.20.52.14;	author bluhm;	state Exp;
branches
	1.1.1.1;
next	;
commitid	DUvdbfhw6s1btkKk;

1.1.1.1
date	2014.08.20.20.52.14;	author bluhm;	state Exp;
branches;
next	;
commitid	DUvdbfhw6s1btkKk;


desc
@@


1.22
log
@Test that the syslogd program can be started with a relative path.
@
text
@#	$OpenBSD: Syslogd.pm,v 1.21 2016/11/28 20:57:41 bluhm Exp $

# Copyright (c) 2010-2015 Alexander Bluhm <bluhm@@openbsd.org>
# Copyright (c) 2014 Florian Riehm <mail@@friehm.de>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

package Syslogd;
use parent 'Proc';
use Carp;
use Cwd;
use File::Basename;
use File::Copy;
use File::Temp qw(tempfile tempdir);
use Sys::Hostname;
use Time::HiRes qw(time alarm sleep);

sub new {
	my $class = shift;
	my %args = @@_;
	$args{ktracefile} ||= "syslogd.ktrace";
	$args{fstatfile} ||= "syslogd.fstat";
	$args{logfile} ||= "syslogd.log";
	$args{up} ||= "syslogd: started";
	$args{down} ||= "syslogd: exiting";
	$args{up} = $args{down} = "execute:"
	    if $args{foreground} || $args{daemon};
	$args{foreground} && $args{daemon}
	    and croak "$class cannot run in foreground and as daemon";
	$args{func} = sub { Carp::confess "$class func may not be called" };
	$args{execfile} ||= $ENV{SYSLOGD} ? $ENV{SYSLOGD} : "syslogd";
	$args{conffile} ||= "syslogd.conf";
	$args{outfile} ||= "file.log";
	unless ($args{outpipe}) {
		my $dir = tempdir("syslogd-regress-XXXXXXXXXX",
		    CLEANUP => 1, TMPDIR => 1);
		chmod(0755, $dir)
		    or die "$class chmod directory $dir failed: $!";
		$args{tempdir} = $dir;
		$args{outpipe} = "$dir/pipe.log";
	}
	$args{outconsole} ||= "console.log";
	$args{outuser} ||= "user.log";
	if ($args{memory}) {
		$args{memory} = {} unless ref $args{memory};
		$args{memory}{name} ||= "memory";
		$args{memory}{size} //= 1;
	}
	my $self = Proc::new($class, %args);
	$self->{connectaddr}
	    or croak "$class connect addr not given";

	_make_abspath(\$self->{$_}) foreach (qw(conffile outfile outpipe));
	_make_abspath(\$self->{ktracefile}) if $self->{chdir};

	# substitute variables in config file
	my $curdir = dirname($0) || ".";
	my $objdir = getcwd();
	my $hostname = hostname();
	(my $host = $hostname) =~ s/\..*//;
	my $connectdomain = $self->{connectdomain};
	my $connectaddr = $self->{connectaddr};
	my $connectproto = $self->{connectproto};
	my $connectport = $self->{connectport};

	open(my $fh, '>', $self->{conffile})
	    or die ref($self), " create conf file $self->{conffile} failed: $!";
	print $fh "*.*\t$self->{outfile}\n";
	print $fh "*.*\t|dd of=$self->{outpipe}\n" unless $self->{nopipe};
	print $fh "*.*\t/dev/console\n" unless $self->{noconsole};
	print $fh "*.*\tsyslogd-regress\n" unless $self->{nouser};
	my $memory = $self->{memory};
	print $fh "*.*\t:$memory->{size}:$memory->{name}\n" if $memory;
	my $loghost = $self->{loghost};
	unless ($loghost) {
		$loghost = '@@$connectaddr';
		$loghost .= ':$connectport' if $connectport;
	}
	my $config = "*.*\t$loghost\n";
	$config .= $self->{conf} if $self->{conf};
	$config =~ s/(\$[a-z]+)/$1/eeg;
	print $fh $config;
	close $fh;

	return $self->create_out();
}

sub create_out {
	my $self = shift;
	my @@sudo = $ENV{SUDO} ? $ENV{SUDO} : ();

	open(my $fh, '>', $self->{outfile})
	    or die ref($self), " create log file $self->{outfile} failed: $!";
	close $fh;

	open($fh, '>', $self->{outpipe})
	    or die ref($self), " create pipe file $self->{outpipe} failed: $!";
	chmod(0644, $self->{outpipe})
	    or die ref($self), " chmod pipe file $self->{outpipe} failed: $!";
	my @@cmd = (@@sudo, "chown", "_syslogd", $self->{outpipe});
	system(@@cmd)
	    and die ref($self), " chown pipe file $self->{outpipe} failed: $!";
	close $fh;

	foreach my $dev (qw(console user)) {
		my $file = $self->{"out$dev"};
		unlink($file);
		open($fh, '>', $file)
		    or die ref($self), " create $dev file $file failed: $!";
		close $fh;
		my $user = $dev eq "console" ?
		    "/dev/console" : "syslogd-regress";
		my @@cmd = (@@sudo, "./ttylog", $user, $file);
		$self->{"pid$dev"} = open(my $ctl, '|-', @@cmd)
		    or die ref($self), " pipe to @@cmd failed: $!";
		# remember until object is destroyed, autoclose will send EOF
		$self->{"ctl$dev"} = $ctl;
	}

	return $self;
}

sub ttykill {
	my $self = shift;
	my $dev = shift;
	my $sig = shift;
	my $pid = $self->{"pid$dev"}
	    or die ref($self), " no tty log pid$dev";

	if (kill($sig => $pid) != 1) {
		my $sudo = $ENV{SUDO};
		$sudo && $!{EPERM}
		    or die ref($self), " kill $pid failed: $!";
		my @@cmd = ($sudo, '/bin/kill', "-$sig", $pid);
		system(@@cmd)
		    and die ref($self), " sudo kill $pid failed: $?";
	}
	return $self;
}

sub child {
	my $self = shift;
	my @@sudo = $ENV{SUDO} ? $ENV{SUDO} : "env";

	my @@pkill = (@@sudo, "pkill", "-KILL", "-x", "syslogd");
	my @@pgrep = ("pgrep", "-x", "syslogd");
	system(@@pkill) && $? != 256
	    and die ref($self), " system '@@pkill' failed: $?";
	while ($? == 0) {
		print STDERR "syslogd still running\n";
		system(@@pgrep) && $? != 256
		    and die ref($self), " system '@@pgrep' failed: $?";
	}
	print STDERR "syslogd not running\n";

	chdir $self->{chdir}
	    or die ref($self), " chdir '$self->{chdir}' failed: $!"
	    if $self->{chdir};

	my @@libevent;
	foreach (qw(EVENT_NOKQUEUE EVENT_NOPOLL EVENT_NOSELECT)) {
		push @@libevent, "$_=1" if delete $ENV{$_};
	}
	push @@libevent, "EVENT_SHOW_METHOD=1" if @@libevent;
	my @@ktrace = $ENV{KTRACE} || ();
	@@ktrace = "ktrace" if $self->{ktrace} && !@@ktrace;
	push @@ktrace, "-i", "-f", $self->{ktracefile} if @@ktrace;
	my @@cmd = (@@sudo, @@libevent, @@ktrace, $self->{execfile},
	    "-f", $self->{conffile});
	push @@cmd, "-d" if !$self->{foreground} && !$self->{daemon};
	push @@cmd, "-F" if $self->{foreground};
	push @@cmd, "-V" unless $self->{cacrt};
	push @@cmd, "-C", $self->{cacrt}
	    if $self->{cacrt} && $self->{cacrt} ne "default";
	push @@cmd, "-s", $self->{ctlsock} if $self->{ctlsock};
	push @@cmd, @@{$self->{options}} if $self->{options};
	print STDERR "execute: @@cmd\n";
	exec @@cmd;
	die ref($self), " exec '@@cmd' failed: $!";
}

sub up {
	my $self = Proc::up(shift, @@_);
	my $timeout = shift || 10;

	my $end = time() + $timeout;

	while ($self->{fstat}) {
		$self->fstat();
		last unless $self->{foreground} || $self->{daemon};

		# in foreground mode and as daemon we have no debug output
		# check fstat kqueue entry to detect statup
		open(my $fh, '<', $self->{fstatfile}) or die ref($self),
		    " open $self->{fstatfile} for reading failed: $!";
		last if grep { /kqueue .* state: W/ } <$fh>;
		time() < $end
		    or croak ref($self), " no 'kqueue' in $self->{fstatfile} ".
		    "after $timeout seconds";
		sleep .1;
	}

	foreach my $dev (qw(console user)) {
		my $file = $self->{"out$dev"};
		while ($self->{"ctl$dev"}) {
			open(my $fh, '<', $file) or die ref($self),
			    " open $file for reading failed: $!";
			last if grep { /ttylog: started/ } <$fh>;
			time() < $end
			    or croak ref($self), " no 'started' in $file ".
			    "after $timeout seconds";
			sleep .1;
		}
	}

	return $self;
}

sub down {
	my $self = Proc::up(shift, @@_);

	if (my $dir = $self->{tempdir}) {
		# keep all logs in single directory for easy debugging
		copy($_, ".") foreach glob("$dir/*");
	}

	return $self unless $self->{daemon};

	my $timeout = shift || 10;
	my $end = time() + $timeout;

	my @@sudo = $ENV{SUDO} ? $ENV{SUDO} : "env";
	my @@pkill = (@@sudo, "pkill", "-TERM", "-x", "syslogd");
	my @@pgrep = ("pgrep", "-x", "syslogd");
	system(@@pkill) && $? != 256
	    and die ref($self), " system '@@pkill' failed: $?";
	do {
		sleep .1;
		system(@@pgrep) && $? != 256
		    and die ref($self), " system '@@pgrep' failed: $?";
		return $self if $? == 256;
		print STDERR "syslogd still running\n";
	} while (time() < $end);

	return;
}

sub fstat {
	my $self = shift;

	open(my $fh, '>', $self->{fstatfile}) or die ref($self),
	    " open $self->{fstatfile} for writing failed: $!";
	my @@cmd = ("fstat");
	open(my $fs, '-|', @@cmd)
	    or die ref($self), " open pipe from '@@cmd' failed: $!";
	print $fh grep { /^\w+ *syslogd *\d+/ } <$fs>;
	close($fs) or die ref($self), $! ?
	    " close pipe from '@@cmd' failed: $!" :
	    " command '@@cmd' failed: $?";
	close($fh)
	    or die ref($self), " close $self->{fstatfile} failed: $!";
}

sub _make_abspath {
	my $file = ref($_[0]) ? ${$_[0]} : $_[0];
	if (substr($file, 0, 1) ne "/") {
		$file = getcwd(). "/". $file;
		${$_[0]} = $file if ref($_[0]);
	}
	return $file;
}

sub kill_privsep {
	return Proc::kill(@@_);
}

sub kill_syslogd {
	my $self = shift;
	my $sig = shift // 'TERM';
	my $ppid = shift // $self->{pid};

	# find syslogd child of privsep parent
	my @@cmd = ("ps", "-ww", "-p", $ppid, "-U", "_syslogd",
	    "-o", "pid,ppid,comm", );
	open(my $ps, '-|', @@cmd)
	    or die ref($self), " open pipe from '@@cmd' failed: $!";
	my @@pslist;
	my @@pshead = split(' ', scalar <$ps>);
	while (<$ps>) {
		s/\s+$//;
		my %h;
		@@h{@@pshead} = split(' ', $_, scalar @@pshead);
		push @@pslist, \%h;
	}
	close($ps) or die ref($self), $! ?
	    " close pipe from '@@cmd' failed: $!" :
	    " command '@@cmd' failed: $?";
	my @@pschild =
	    grep { $_->{PPID} == $ppid && $_->{COMMAND} eq "syslogd" } @@pslist;
	@@pschild == 1
	    or die ref($self), " not one privsep child: ",
	    join(" ", map { $_->{PID} } @@pschild);

	return Proc::kill($self, $sig, $pschild[0]{PID});
}

my $rotate_num = 0;
sub rotate {
	my $self = shift;

	$self->loggrep("bytes transferred", 1) or sleep 1;
	foreach my $name (qw(file pipe)) {
		my $file = $self->{"out$name"};
		for (my $i = $rotate_num; $i >= 0; $i--) {
			my $new = $file. ".$i";
			my $old = $file. ($i > 0 ? ".".($i-1) : "");

			rename($old, $new) or die ref($self),
			    " rename from '$old' to '$new' failed: $!";
		}
	}
	$rotate_num++;
	return $self->create_out();
};

1;
@


1.21
log
@To test the pipe feature, a dd is started and writing into a log
file as user _syslogd.  Since /usr/obj is 0770 now, user _syslogd
cannot access this file there anymore.  Create pipe.log in temporary
directory in /tmp instead.
@
text
@d1 1
a1 1
#	$OpenBSD: Syslogd.pm,v 1.20 2016/10/12 23:02:25 bluhm Exp $
d44 1
d67 1
d169 4
d181 1
a181 2
	my $syslogd = $ENV{SYSLOGD} ? $ENV{SYSLOGD} : "syslogd";
	my @@cmd = (@@sudo, @@libevent, @@ktrace, $syslogd,
@


1.20
log
@Fix races during syslogd startup and shutdown in privsep tests.
@
text
@d1 1
a1 1
#	$OpenBSD: Syslogd.pm,v 1.19 2016/07/12 15:44:58 bluhm Exp $
d26 2
d46 8
a53 1
	$args{outpipe} ||= "pipe.log";
d109 5
a114 2
	chmod(0666, $self->{outpipe})
	    or die ref($self), " chmod pipe file $self->{outpipe} failed: $!";
d229 6
@


1.19
log
@Allow to run the syslogd tests as root without SUDO also if the
libevent method environment is set.
@
text
@d1 1
a1 1
#	$OpenBSD: Syslogd.pm,v 1.18 2016/06/22 19:29:29 bluhm Exp $
d71 3
a73 3
	print $fh "*.*\t|dd of=$self->{outpipe}\n";
	print $fh "*.*\t/dev/console\n";
	print $fh "*.*\tsyslogd-regress\n";
d192 1
a192 1
		last if grep { /kqueue/ } <$fh>;
d213 23
@


1.18
log
@Syslogd can send messages to a user, test what happens if the
terminal is blocking to receive messages.  Stop the fake user
terminal and look for a delayed write debug message from syslogd.
This makes the test more reliable.
@
text
@d1 1
a1 1
#	$OpenBSD: Syslogd.pm,v 1.17 2015/12/30 13:15:52 bluhm Exp $
d142 1
a142 1
	my @@sudo = $ENV{SUDO} ? $ENV{SUDO} : ();
@


1.17
log
@Test logging to console by redirecting the system's console into a
file.  All subtests get an additional /dev/console entry in
syslog.conf, then check that messages appear in the console file.
Add a test that stops syslogd, calls sendsyslog2() with LOG_CONS
and checks that the message appears in the console file.
@
text
@d1 1
a1 1
#	$OpenBSD: Syslogd.pm,v 1.16 2015/10/19 20:16:09 bluhm Exp $
d113 1
a113 1
		open(my $ctl, '|-', @@cmd)
d119 18
@


1.16
log
@Test syslogd logging to a tty which belongs to a user.  This is
done with a utmp entry for a pty fake login.  All messages are read
from the pty and written into a log file.
@
text
@d1 1
a1 1
#	$OpenBSD: Syslogd.pm,v 1.15 2015/08/25 20:52:44 bluhm Exp $
d45 2
a46 1
	$args{outtty} ||= "tty.log";
d72 1
d92 1
d104 14
a117 10
	unlink($self->{outtty});
	open($fh, '>', $self->{outtty})
	    or die ref($self), " create tty file $self->{outtty} failed: $!";
	close $fh;
	my @@sudo = $ENV{SUDO} ? $ENV{SUDO} : ();
	my @@cmd = (@@sudo, "./ttylog", "syslogd-regress", $self->{outtty});
	open($fh, '|-', @@cmd)
	    or die ref($self), " pipe to ttylog $self->{outfile} failed: $!";
	# remember until object is destroyed, perl autoclose will send EOF
	$self->{fhtty} = $fh;
d181 11
a191 8
	while ($self->{fhtty}) {
		open(my $fh, '<', $self->{outtty}) or die ref($self),
		    " open $self->{outtty} for reading failed: $!";
		last if grep { /ttylog: started/ } <$fh>;
		time() < $end
		    or croak ref($self), " no 'started' in $self->{outtty} ".
		    "after $timeout seconds";
		sleep .1;
@


1.15
log
@Do not inherit the event environment, delete and set explicitly
after sudo.
@
text
@d1 1
a1 1
#	$OpenBSD: Syslogd.pm,v 1.14 2015/07/20 05:34:16 bluhm Exp $
d45 1
d71 1
d101 11
d173 11
@


1.14
log
@Allow to use $curdir, $objdir, $host, $hostname in the test config
file.  They are substituted automatically, to avoid this in each
single test.
@
text
@d1 1
a1 1
#	$OpenBSD: Syslogd.pm,v 1.13 2015/07/16 16:34:34 bluhm Exp $
d119 1
a119 1
		push @@libevent, "$_=$ENV{$_}" if $ENV{$_};
@


1.13
log
@Kill a possibly running syslogd with -9 before testing.
@
text
@d1 1
a1 1
#	$OpenBSD: Syslogd.pm,v 1.12 2015/06/15 21:44:57 bluhm Exp $
d26 1
d57 4
d73 3
a75 5
	if ($loghost) {
		$loghost =~ s/(\$[a-z]+)/$1/eeg;
	} else {
		$loghost = "\@@$connectaddr";
		$loghost .= ":$connectport" if $connectport;
d77 4
a80 2
	print $fh "*.*\t$loghost\n";
	print $fh $self->{conf} if $self->{conf};
@


1.12
log
@Rework how fstat and ktrace pattern are specified in the test
arguments.  Add tests to check wether syslogd privsep works.  This
is done for debug and foreground and daemon mode.  Fstat is checked
for chroot and sockets.  Ktrace dump is grepped for setting uid and
gid.
@
text
@d1 1
a1 1
#	$OpenBSD: Syslogd.pm,v 1.11 2015/02/13 21:40:50 bluhm Exp $
d101 1
a101 1
	my @@pkill = (@@sudo, "pkill", "-x", "syslogd");
@


1.11
log
@Adapt the maxunix test, the syslogd -a error semantic has changed.
Increase timeouts and remove races, so that the syslogd tests pass
on my sparc64 machine.
@
text
@d1 1
a1 1
#	$OpenBSD: Syslogd.pm,v 1.10 2015/01/28 19:23:22 bluhm Exp $
d26 1
d36 4
d121 1
a121 1
	my @@cmd = (@@sudo, @@libevent, @@ktrace, $syslogd, "-d",
d123 3
a125 1
	push @@cmd, "-V", unless $self->{cacrt};
d137 1
d139 15
a153 2
	if ($self->{fstat}) {
		$self->fstat;
@


1.10
log
@Test the x509 certificate validation of syslog over TLS.
@
text
@d1 1
a1 1
#	$OpenBSD: Syslogd.pm,v 1.9 2015/01/22 00:34:32 bluhm Exp $
d200 1
@


1.9
log
@Make syslogd tests more reliable on slow machines.  All tests pass
on my old sparc64.
@
text
@d1 1
a1 1
#	$OpenBSD: Syslogd.pm,v 1.8 2015/01/01 19:58:48 bluhm Exp $
d118 3
@


1.8
log
@Test that syslogd sending over TCP does not leak a file descriptor
when it receives a SIGHUP.
@
text
@d1 1
a1 1
#	$OpenBSD: Syslogd.pm,v 1.7 2014/12/28 14:08:01 bluhm Exp $
d59 1
a59 1
	print $fh "*.*\t|dd of=$self->{outpipe} status=none\n";
@


1.7
log
@Add regression tests where OpenBSD syslogd is sending messages to
rsyslogd from ports.  If the rsyslog package is installed, rsyslogd
is used as drain to test interoperability.  This will be especially
useful for syslog via TCP and TLS.
@
text
@d1 1
a1 1
#	$OpenBSD: Syslogd.pm,v 1.6 2014/10/29 16:42:57 bluhm Exp $
d3 1
a3 1
# Copyright (c) 2010-2014 Alexander Bluhm <bluhm@@openbsd.org>
d129 1
a129 11
		open(my $fh, '>', $self->{fstatfile}) or die ref($self),
		    " open $self->{fstatfile} for writing failed: $!";
		my @@cmd = ("fstat");
		open(my $fs, '-|', @@cmd)
		    or die ref($self), " open pipe from '@@cmd' failed: $!";
		print $fh grep { /^\w+ *syslogd *\d+/ } <$fs>;
		close($fs) or die ref($self), $! ?
		    " close pipe from '@@cmd' failed: $!" :
		    " command '@@cmd' failed: $?";
		close($fh)
		    or die ref($self), " close $self->{fstatfile} failed: $!";
d132 16
@


1.6
log
@Add a test the checks the syslogd !prog !!prog !* feature.
@
text
@d1 1
a1 1
#	$OpenBSD: Syslogd.pm,v 1.5 2014/09/13 23:38:24 bluhm Exp $
a50 1
	my $connectprotocol = $self->{connectprotocol};
d53 1
@


1.5
log
@Add tests for syslogd's memory buffer and read it with syslogc.
@
text
@d1 1
a1 1
#	$OpenBSD: Syslogd.pm,v 1.4 2014/09/02 17:43:29 bluhm Exp $
d70 1
@


1.4
log
@To examine the operation of the signal handlers, the tests grep in
the ktrace output of syslogd.  Also make the tests work without DNS
and without sudo.
@
text
@d1 1
a1 1
#	$OpenBSD: Syslogd.pm,v 1.3 2014/09/02 00:26:30 bluhm Exp $
d39 5
d60 2
d111 3
a113 5
	my @@ktrace = $ENV{KTRACE} ? ($ENV{KTRACE}, "-i") : ();
	if ($self->{ktrace}) {
		@@ktrace = $ENV{KTRACE} || "ktrace";
		push @@ktrace, "-i", "-f", $self->{ktracefile};
	}
d117 1
@


1.3
log
@Add tests that run the syslogd signal handlers.
@
text
@d1 1
a1 1
#	$OpenBSD: Syslogd.pm,v 1.2 2014/08/29 21:55:55 bluhm Exp $
d30 1
d105 4
@


1.2
log
@Prepare for testing libevent in syslogd.  Pass the EVENT_NO...
environment variables over sudo into syslogd.  Run the tests with
the select(2) and poll(2) and kqueue(2) backend.  Call "make libevent"
for these tests.
@
text
@d1 1
a1 1
#	$OpenBSD: Syslogd.pm,v 1.1.1.1 2014/08/20 20:52:14 bluhm Exp $
d64 7
a70 1
	open($fh, '>', $self->{outfile})
d129 1
d140 52
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
#	$OpenBSD$
d92 5
d99 2
a100 1
	my @@cmd = (@@sudo, @@ktrace, $syslogd, "-d", "-f", $self->{conffile});
@


1.1.1.1
log
@Run syslogd regressions tests.  As only one syslogd can run per
machine, each test kills any syslogd first.  At the end the system's
syslogd gets restarted.
The test framework runs a client, and a server, and a syslogd.  The
messages are passed via the log socket or via UDP from the client
to syslogd.  From there UDP transport is used to reach the server.
All processes write log files where the message has to show up.
The test arguments are kept in the args-*.pl files.
The content of a log file, the data sent to a pipe process and what
the server received are checked.  The invocation of the sendsyslog(2)
syscall is checked with ktrace, the open file descriptors of syslogd
are checked with fstat.
@
text
@@
