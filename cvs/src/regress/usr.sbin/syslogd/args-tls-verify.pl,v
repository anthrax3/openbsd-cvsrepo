head	1.3;
access;
symbols
	OPENBSD_6_1:1.3.0.10
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.6
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.4
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.2.0.4
	OPENBSD_5_7_BASE:1.2;
locks; strict;
comment	@# @;


1.3
date	2015.07.16.16.34.49;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	0M9ba2ikkjyPND6j;

1.2
date	2015.02.09.21.06.35;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	ijXbEt8h29UoWlgz;

1.1
date	2015.01.28.19.23.22;	author bluhm;	state Exp;
branches;
next	;
commitid	6n55AVIuWA7LUOak;


desc
@@


1.3
log
@Test that syslogd does not append white spaces to messages.  Per
default the test pattern is stricter now.  Also do some test cleanup
@
text
@# The client writes a message to Sys::Syslog native method.
# The syslogd writes it into a file and through a pipe.
# The syslogd passes it via TLS to localhost loghost.
# The server receives the message on its TLS socket.
# Find the message in client, file, pipe, syslogd, server log.
# Check that syslogd and server log contain localhost address.

use strict;
use warnings;
use Socket;

our %args = (
    syslogd => {
	loghost => '@@tls://localhost:$connectport',
	loggrep => {
	    qr/Logging to FORWTLS \@@tls:\/\/localhost:\d+/ => '>=4',
	    get_testgrep() => 1,
	    qr/syslogd: loghost .* connection error: connect failed:/ => 0,
	},
	cacrt => "ca.crt",
    },
    server => {
	listen => { domain => AF_UNSPEC, proto => "tls", addr => "localhost" },
	loggrep => {
	    qr/listen sock: (127.0.0.1|::1) \d+/ => 1,
	    get_testgrep() => 1,
	},
    },
);

1;
@


1.2
log
@Error messages form libtls have changed, adapt syslogd tests.
@
text
@d17 1
a17 1
	    get_testlog() => 1,
d26 1
a26 1
	    get_testlog() => 1,
@


1.1
log
@Test the x509 certificate validation of syslog over TLS.
@
text
@d18 1
@

