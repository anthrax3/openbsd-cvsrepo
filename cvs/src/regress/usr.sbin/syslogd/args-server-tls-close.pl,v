head	1.6;
access;
symbols
	OPENBSD_6_1:1.6.0.8
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.4
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4;
locks; strict;
comment	@# @;


1.6
date	2015.09.25.13.33.44;	author bluhm;	state Exp;
branches;
next	1.5;
commitid	xkhE42VBI4k4PrDa;

1.5
date	2015.07.16.16.34.49;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	0M9ba2ikkjyPND6j;

1.4
date	2015.02.09.21.06.35;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	ijXbEt8h29UoWlgz;

1.3
date	2015.02.06.00.27.41;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	8et2usx9CGyR7b0D;

1.2
date	2015.01.22.00.34.32;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	LuWj56jz2petAB5H;

1.1
date	2015.01.16.11.51.59;	author bluhm;	state Exp;
branches;
next	;
commitid	0LYtCVxwz86nbUES;


desc
@@


1.6
log
@In libtls connection error EOF has changed to connection close.
Adapt syslogd tests.
@
text
@# The TLS server closes the connection to syslogd.
# The client writes a message to Sys::Syslog native method.
# The syslogd writes it into a file and through a pipe.
# The syslogd passes it via IPv4 TLS to an explicit loghost.
# The server receives the message on its TLS socket.
# Find the message in client, pipe, syslogd log.
# Check that syslogd writes a log message about the server close.

use strict;
use warnings;
use Socket;

our %args = (
    client => {
	func => sub {
	    my $self = shift;
	    ${$self->{syslogd}}->loggrep("loghost .* connection close", 5)
		or die "no connection close in syslogd.log";
	    write_log($self);
	},
    },
    syslogd => {
	loghost => '@@tls://127.0.0.1:$connectport',
	loggrep => {
	    qr/Logging to FORWTLS \@@tls:\/\/127.0.0.1:\d+/ => '>=4',
	    get_testgrep() => 1,
	    qr/syslogd: loghost .* connection close/ => '>=2',
	},
    },
    server => {
	listen => { domain => AF_INET, proto => "tls", addr => "127.0.0.1" },
	func => sub {
	    my $self = shift;
	    shutdown(\*STDOUT, 1)
		or die "shutdown write failed: $!";
	    ${$self->{syslogd}}->loggrep("loghost .* connection close", 5)
		or die "no connection close in syslogd.log";
	},
	loggrep => {},
    },
    file => {
	loggrep => {
	    qr/syslogd: loghost .* connection close/ => 1,
	},
    },
);

1;
@


1.5
log
@Test that syslogd does not append white spaces to messages.  Per
default the test pattern is stricter now.  Also do some test cleanup
@
text
@d17 2
a18 2
	    ${$self->{syslogd}}->loggrep("loghost .* connection error", 5)
		or die "no connection error in syslogd.log";
d27 1
a27 1
	    qr/syslogd: loghost .* connection error/ => '>=2',
d36 2
a37 2
	    ${$self->{syslogd}}->loggrep("loghost .* connection error", 5)
		or die "no connection error in syslogd.log";
d43 1
a43 1
	    qr/syslogd: loghost .* connection error: read failed: EOF/ => 1,
@


1.4
log
@Error messages form libtls have changed, adapt syslogd tests.
@
text
@d26 1
a26 1
	    get_testlog() => 1,
@


1.3
log
@Add syslogd tests for dropped messages.
@
text
@d43 1
a43 1
	    qr/syslogd: loghost .* connection error: read failed \(5\)/ => 1,
@


1.2
log
@Make syslogd tests more reliable on slow machines.  All tests pass
on my old sparc64.
@
text
@d19 1
a19 1
	    write_log($self, @@_);
@


1.1
log
@Add regression tests for syslog over TLS.
@
text
@d27 1
a27 1
	    qr/syslogd: loghost .* connection error/ => 2,
@

