head	1.5;
access;
symbols
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.6
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4;
locks; strict;
comment	@# @;


1.5
date	2015.07.16.16.34.49;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	0M9ba2ikkjyPND6j;

1.4
date	2015.02.09.21.06.35;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	ijXbEt8h29UoWlgz;

1.3
date	2015.02.06.00.27.41;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	8et2usx9CGyR7b0D;

1.2
date	2015.01.05.18.48.31;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	eLb66WMTTCFLXoUF;

1.1
date	2014.12.31.14.05.26;	author bluhm;	state Exp;
branches;
next	;
commitid	aJ48QDLYN7gznT6d;


desc
@@


1.5
log
@Test that syslogd does not append white spaces to messages.  Per
default the test pattern is stricter now.  Also do some test cleanup
@
text
@# The TCP server aborts the connection to syslogd.
# The client writes a message to Sys::Syslog native method.
# The syslogd writes it into a file and through a pipe.
# The syslogd passes it via IPv4 TCP to an explicit loghost.
# The server receives the message on its TCP socket.
# Find the message in client, pipe, syslogd log.
# Check that syslogd writes a log message about the server error.

use strict;
use warnings;
use Socket;
use Errno ':POSIX';

my @@errors = (EPIPE,ECONNRESET);
my $errors = "(". join("|", map { $! = $_ } @@errors). ")";

our %args = (
    client => {
	func => sub {
	    my $self = shift;
	    ${$self->{syslogd}}->loggrep("loghost .* connection error", 5)
		or die "no connection error in syslogd.log";
	    write_log($self);
	},
    },
    syslogd => {
	loghost => '@@tcp://127.0.0.1:$connectport',
	loggrep => {
	    qr/Logging to FORWTCP \@@tcp:\/\/127.0.0.1:\d+/ => '>=4',
	    get_testgrep() => 1,
	    qr/syslogd: loghost .* connection error/ => 2,
	},
    },
    server => {
	listen => { domain => AF_INET, proto => "tcp", addr => "127.0.0.1" },
	func => sub {
	    my $self = shift;
	    setsockopt(STDOUT, SOL_SOCKET, SO_LINGER, pack('ii', 1, 0))
		or die "set socket linger failed: $!";
	},
	loggrep => {},
    },
    file => {
	loggrep => {
	    qr/syslogd: loghost .* connection error: $errors/ => 1,
	},
    },
);

1;
@


1.4
log
@Error messages form libtls have changed, adapt syslogd tests.
@
text
@d30 1
a30 1
	    get_testlog() => 1,
@


1.3
log
@Add syslogd tests for dropped messages.
@
text
@d45 1
a45 2
	    qr/syslogd: loghost .* connection error: $errors/
		=> 1,
@


1.2
log
@Make syslogd TCP tests more reliable.  Increase timeouts, shutdown
write to trigger connection close, allow errors EPIPE or ECONNRESET.
@
text
@d23 1
a23 1
	    write_log($self, @@_);
@


1.1
log
@Adapt and add regression tests for sending syslog messages over TCP.
@
text
@d12 4
d21 2
a22 2
	    ${$self->{syslogd}}->loggrep("loghost .* connection error", 2)
		or die "connection error in syslogd.log";
d45 1
a45 1
	    qr/syslogd: loghost .* connection error: Connection reset by peer/
@

