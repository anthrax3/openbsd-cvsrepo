head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.2
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.3.0.4
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.2.0.4
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.1.0.4
	OPENBSD_5_8_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2017.09.12.15.24.21;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	fQcw2c9T4xGELf8r;

1.3
date	2016.10.12.23.02.25;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	lQvKQgxwHYb3L6Um;

1.2
date	2015.10.19.20.16.09;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	kVDnyxLzqDFKPFoO;

1.1
date	2015.06.15.21.44.57;	author bluhm;	state Exp;
branches;
next	;
commitid	BmPbwQg6idYgxXrC;


desc
@@


1.4
log
@Syslogd does no longer keep the *:514 UDP sockets open by default.
Adapt tests.
@
text
@# Start syslogd in daemon mode.
# The client writes a message to Sys::Syslog native method.
# The syslogd writes it into a file and through a pipe.
# The syslogd passes it via UDP to the loghost.
# The server receives the message on its UDP socket.
# Find the message in client, file, syslogd, server log.
# Check fstat for the parent and child process.
# Check ktrace for setting the correct uid and gid.
# Check that stdio is dupped to /dev/null.

use strict;
use warnings;

our %args = (
    syslogd => {
	options => ["-u"],
	daemon => 1,
	nopipe => 1,
	noconsole => 1,
	nouser => 1,
	loggrep => {
	    qr/ -F / => 0,
	    qr/ -d / => 0,
	},
	fstat => {
	    qr/^root .* wd / => 1,
	    qr/^root .* root / => 0,
	    qr/^root .* [012] .* null$/ => 3,
	    qr/^root .* kqueue / => 0,
	    qr/^root .* internet/ => 0,
	    qr/^_syslogd .* wd / => 1,
	    qr/^_syslogd .* root / => 1,
	    qr/^_syslogd .* [012] .* null$/ => 3,
	    qr/^_syslogd .* kqueue / => 1,
	    qr/^_syslogd .* internet/ => 2,
	},
	ktrace => {
	    qr/CALL  setresuid(.*"_syslogd".*){3}/ => 1,
	    qr/CALL  setresgid(.*"_syslogd".*){3}/ => 1,
	    qr/CALL  setsid/ => 1,
	    qr/RET   setsid.* errno / => 0,
	},
    },
    pipe => { nocheck => 1 },
    tty => { nocheck => 1 },
);

1;
@


1.3
log
@Fix races during syslogd startup and shutdown in privsep tests.
@
text
@d16 1
@


1.2
log
@Test syslogd logging to a tty which belongs to a user.  This is
done with a utmp entry for a pty fake login.  All messages are read
from the pty and written into a log file.
@
text
@d17 3
d37 2
a38 2
	    qr/CALL  setresuid(.*"_syslogd".*){3}/ => 2,
	    qr/CALL  setresgid(.*"_syslogd".*){3}/ => 2,
@


1.1
log
@Rework how fstat and ktrace pattern are specified in the test
arguments.  Add tests to check wether syslogd privsep works.  This
is done for debug and foreground and daemon mode.  Fstat is checked
for chroot and sockets.  Ktrace dump is grepped for setting uid and
gid.
@
text
@d40 2
a41 3
    pipe => {
	nocheck => 1,
    },
@

