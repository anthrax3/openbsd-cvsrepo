head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.10
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.8
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.6
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.4
	OPENBSD_5_7_BASE:1.2;
locks; strict;
comment	@# @;


1.2
date	2015.02.11.17.28.41;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	hkdmk7KSUJ4UFi47;

1.1
date	2014.09.13.23.38.24;	author bluhm;	state Exp;
branches;
next	;
commitid	8abA8sLPTwAOrtQB;


desc
@@


1.2
log
@Make syslogd test more reliable.  Use Time::HiRes to sleep .01
seconds in the write_lines() loop.  This slows down the client, so
all messages reach syslogd and flood its buffers.  Increase the
timeout to wait until all buffers are full.  Use this code in all
TCP/TLS buffer and memory overflow tests.
@
text
@# Syslogc reads the memory logs continously.
# The client writes message to overflow the memory buffer method.
# The syslogd writes it into a file and through a pipe.
# The syslogd passes it via UDP to the loghost.
# The server receives the message on its UDP socket.
# Check that syslogc logs lost lines.

use strict;
use warnings;

our %args = (
    client => {
	func => sub {
	    my $self = shift;
	    write_lines($self, 300, 2000);
	    write_log($self);
	},
    },
    syslogd => {
	memory => 1,
	loggrep => {
	    qr/Accepting control connection/ => 1,
	    qr/ctlcmd 6/ => 1,  # read cont
	},
    },
    syslogc => [ {
	early => 1,
	stop => 1,
	options => ["-f", "memory"],
	down => qr/Lines were dropped!/,
	loggrep => {},
    } ],
);

1;
@


1.1
log
@Add tests for syslogd's memory buffer and read it with syslogc.
@
text
@a9 1
use Time::HiRes 'sleep';
d15 1
a15 5
	    foreach (1..300) {
		write_message($self, $_ x 1024);
		# if client sends too fast, syslogd will not see everything
		sleep .01;
	    }
@

