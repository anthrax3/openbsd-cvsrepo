head	1.3;
access;
symbols
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.4
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3;
locks; strict;
comment	@# @;


1.3
date	2015.12.30.13.15.52;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	A5ZwhsoQcJtCsd2c;

1.2
date	2015.10.23.14.06.55;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	zdQFfTKt14DNTjQ1;

1.1
date	2015.10.19.20.16.09;	author bluhm;	state Exp;
branches;
next	;
commitid	kVDnyxLzqDFKPFoO;


desc
@@


1.3
log
@Test logging to console by redirecting the system's console into a
file.  All subtests get an additional /dev/console entry in
syslog.conf, then check that messages appear in the console file.
Add a test that stops syslogd, calls sendsyslog2() with LOG_CONS
and checks that the message appears in the console file.
@
text
@# The client writes a message to Sys::Syslog native method.
# The client writes an additional  message with local5 and err.
# The syslogd writes it into a file and through a pipe and to tty.
# The special message also goes to all users with wall *.
# The syslogd passes it via UDP to the loghost.
# The server receives the message on its UDP socket.
# Find the message in client, file, pipe, console, user, syslogd, server log.
# Check that the special message is in the user's tty log twice.

use strict;
use warnings;
use Sys::Syslog qw(:macros);

our %args = (
    client => {
	func => sub {
	    my $self = shift;
	    syslog(LOG_LOCAL5|LOG_ERR, "test message to all users");
	    write_log($self);
	},
    },
    syslogd => {
	conf => "local5.err\t*",
    },
    user => {
	loggrep => {
	    qr/Message from syslogd/ => 1,
	    qr/syslogd-regress.* test message to all users/ => 2,
	},
    },
);

1;
@


1.2
log
@Check that syslogd delays a blocking write to tty and that that all
messages still appear on the tty.
@
text
@d7 2
a8 2
# Find the message in client, file, pipe, tty, syslogd, server log.
# Check that the special message is in the tty log twice.
d25 1
a25 1
    tty => {
@


1.1
log
@Test syslogd logging to a tty which belongs to a user.  This is
done with a utmp entry for a pty fake login.  All messages are read
from the pty and written into a log file.
@
text
@d2 1
d4 1
d7 2
a8 1
# Find the message in client, file, pipe, syslogd, server log.
@

