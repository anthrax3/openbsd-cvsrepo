head	1.5;
access;
symbols
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.4
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.4
	OPENBSD_5_7_BASE:1.3
	bluhm_20140820:1.1.1.1
	bluhm:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2015.12.30.13.15.52;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	A5ZwhsoQcJtCsd2c;

1.4
date	2015.10.19.20.16.09;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	kVDnyxLzqDFKPFoO;

1.3
date	2014.12.28.14.08.01;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	2DOukBo6SZhymWi6;

1.2
date	2014.08.29.21.55.55;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	ttGmQXH8XXWint6D;

1.1
date	2014.08.20.20.52.14;	author bluhm;	state Exp;
branches
	1.1.1.1;
next	;
commitid	DUvdbfhw6s1btkKk;

1.1.1.1
date	2014.08.20.20.52.14;	author bluhm;	state Exp;
branches;
next	;
commitid	DUvdbfhw6s1btkKk;


desc
@@


1.5
log
@Test logging to console by redirecting the system's console into a
file.  All subtests get an additional /dev/console entry in
syslog.conf, then check that messages appear in the console file.
Add a test that stops syslogd, calls sendsyslog2() with LOG_CONS
and checks that the message appears in the console file.
@
text
@Run syslogd regressions tests.  As only one syslogd can run per
machine, each test kills any syslogd first.  At the end the system's
syslogd gets restarted.
The test framework runs a client, and a server, and a syslogd.  The
messages are passed via the log socket or via UDP from the client
to syslogd.  From there UDP transport is used to reach the server.
All processes write log files where the message has to show up.
The test arguments are kept in the args-*.pl files.
The content of a log file, the data sent to a pipe process and what
the server received are checked.  Logging to /dev/console is tested
with console redirection.  Logging to a user's tty is tested with
a fake login.  The invocation of the sendsyslog(2) syscall is checked
with ktrace, the open file descriptors of syslogd are checked with
fstat.
When invoked with "make libevent", all tests are executed three
times.  They pass the EVENT_NO...  environment variables over sudo
into syslogd.  This way the select(2) and poll(2) and kqueue(2)
backend is tested.
If the rsyslog package is installed, messages are sent to the
rsyslogd to test interoperability.  This is especially useful for
TCP and TLS.

SUDO=sudo
As syslogd needs root privileges either run the tests as root or
set this variable and run make as a regular user.  Only the code
that requires it, is run as root.

KTRACE=ktrace
Set this variable if you want a ktrace output from syslogd.  Note that
ktrace is invoked after sudo as sudo would disable it.

SYSLOGD=/usr/src/usr.sbin/syslogd/obj/syslogd
Start an alternative syslogd program that is not in the path.
@


1.4
log
@Test syslogd logging to a tty which belongs to a user.  This is
done with a utmp entry for a pty fake login.  All messages are read
from the pty and written into a log file.
@
text
@d10 5
a14 4
the server received are checked.  Logging to a user's tty is tested
with a fake login.  The invocation of the sendsyslog(2) syscall is
checked with ktrace, the open file descriptors of syslogd are checked
with fstat.
@


1.3
log
@Add regression tests where OpenBSD syslogd is sending messages to
rsyslogd from ports.  If the rsyslog package is installed, rsyslogd
is used as drain to test interoperability.  This will be especially
useful for syslog via TCP and TLS.
@
text
@d10 4
a13 3
the server received are checked.  The invocation of the sendsyslog(2)
syscall is checked with ktrace, the open file descriptors of syslogd
are checked with fstat.
@


1.2
log
@Prepare for testing libevent in syslogd.  Pass the EVENT_NO...
environment variables over sudo into syslogd.  Run the tests with
the select(2) and poll(2) and kqueue(2) backend.  Call "make libevent"
for these tests.
@
text
@d17 3
@


1.1
log
@Initial revision
@
text
@d13 4
@


1.1.1.1
log
@Run syslogd regressions tests.  As only one syslogd can run per
machine, each test kills any syslogd first.  At the end the system's
syslogd gets restarted.
The test framework runs a client, and a server, and a syslogd.  The
messages are passed via the log socket or via UDP from the client
to syslogd.  From there UDP transport is used to reach the server.
All processes write log files where the message has to show up.
The test arguments are kept in the args-*.pl files.
The content of a log file, the data sent to a pipe process and what
the server received are checked.  The invocation of the sendsyslog(2)
syscall is checked with ktrace, the open file descriptors of syslogd
are checked with fstat.
@
text
@@
