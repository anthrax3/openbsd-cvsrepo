head	1.11;
access;
symbols
	OPENBSD_6_2:1.11.0.4
	OPENBSD_6_2_BASE:1.11
	OPENBSD_6_1:1.9.0.4
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.6.0.4
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.4
	OPENBSD_5_7_BASE:1.3
	bluhm_20140820:1.1.1.1
	bluhm:1.1.1;
locks; strict;
comment	@# @;


1.11
date	2017.09.13.00.35.53;	author bluhm;	state Exp;
branches;
next	1.10;
commitid	bWWbEvUtwVmoTxtA;

1.10
date	2017.04.17.14.27.46;	author bluhm;	state Exp;
branches;
next	1.9;
commitid	2ARdlbdLbUqjCewZ;

1.9
date	2017.01.02.16.58.28;	author bluhm;	state Exp;
branches;
next	1.8;
commitid	Mg6YsjHbSgff7PNA;

1.8
date	2016.09.23.14.35.15;	author bluhm;	state Exp;
branches;
next	1.7;
commitid	JKJPtU8AKXFWhQjU;

1.7
date	2016.09.21.12.01.17;	author bluhm;	state Exp;
branches;
next	1.6;
commitid	o9jUvlZXlix0kG8u;

1.6
date	2015.11.02.00.48.17;	author bluhm;	state Exp;
branches;
next	1.5;
commitid	QWjIMCYPqReOyyWd;

1.5
date	2015.10.09.17.07.06;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	m9fthBBZas0yIZjN;

1.4
date	2015.09.09.08.48.46;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	bbarh0dLTKPjADRO;

1.3
date	2015.02.02.17.40.24;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	BkvE03kfcbCrYutX;

1.2
date	2014.08.25.17.55.27;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	YvrBMAbzTxViFsim;

1.1
date	2014.08.20.20.52.14;	author bluhm;	state Exp;
branches
	1.1.1.1;
next	;
commitid	DUvdbfhw6s1btkKk;

1.1.1.1
date	2014.08.20.20.52.14;	author bluhm;	state Exp;
branches;
next	;
commitid	DUvdbfhw6s1btkKk;


desc
@@


1.11
log
@Check that the hostname added by syslogd -h in file and server log
is correct.  Use generic redo functions.  Do syntax check for all
Perl files.
@
text
@#	$OpenBSD: Client.pm,v 1.10 2017/04/17 14:27:46 bluhm Exp $

# Copyright (c) 2010-2014 Alexander Bluhm <bluhm@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

package Client;
use parent 'Proc';
use Carp;
use Socket;
use Socket6;
use IO::Socket;
use IO::Socket::INET6;
use IO::Socket::SSL;
use Sys::Syslog qw(:standard :extended :macros);

sub new {
	my $class = shift;
	my %args = @@_;
	$args{ktracefile} ||= "client.ktrace";
	$args{logfile} ||= "client.log";
	$args{up} ||= "Openlog";
	my $self = Proc::new($class, %args);
	if (defined($self->{connectdomain})) {
		$self->{connectproto} ||= "udp";
	}
	return $self;
}

sub child {
	my $self = shift;

	if (defined($self->{connectdomain}) &&
	    $self->{connectdomain} ne "sendsyslog") {
		my $cs;
		if ($self->{connectdomain} == AF_UNIX) {
			$cs = IO::Socket::UNIX->new(
			    Type => SOCK_DGRAM,
			    Peer => $self->{connectpath} || "/dev/log",
			) or die ref($self), " socket unix failed: $!";
			$cs->setsockopt(SOL_SOCKET, SO_SNDBUF, 10000)
			    or die ref($self), " setsockopt failed: $!";
		} else {
			$SSL_ERROR = "";
			my $iosocket = $self->{connectproto} eq "tls" ?
			    "IO::Socket::SSL" : "IO::Socket::INET6";
			my $proto = $self->{connectproto};
			$proto = "tcp" if $proto eq "tls";
			$cs = $iosocket->new(
			    Proto               => $proto,
			    Domain              => $self->{connectdomain},
			    PeerAddr            => $self->{connectaddr},
			    PeerPort            => $self->{connectport},
			    $self->{sslcert} ?
				(SSL_cert_file => $self->{sslcert}) : (),
			    $self->{sslkey} ?
				(SSL_key_file => $self->{sslkey}) : (),
			    $self->{sslca} ?
				(SSL_ca_file => $self->{sslca}) : (),
			    SSL_verify_mode     => ($self->{sslca} ?
				SSL_VERIFY_PEER : SSL_VERIFY_NONE),
			    $self->{sslversion} ?
				(SSL_version => $self->{sslversion}) : (),
			    $self->{sslciphers} ?
				(SSL_cipher_list => $self->{sslciphers}) : (),
			) or die ref($self), " $iosocket socket connect ".
			    "failed: $!,$SSL_ERROR";
			if ($self->{sndbuf}) {
				setsockopt($cs, SOL_SOCKET, SO_SNDBUF,
				    pack('i', $self->{sndbuf})) or die
				    ref($self), " set SO_SNDBUF failed: $!";
			}
			if ($self->{rcvbuf}) {
				setsockopt($cs, SOL_SOCKET, SO_RCVBUF,
				    pack('i', $self->{rcvbuf})) or die
				    ref($self), " set SO_RCVBUF failed: $!";
			}
			print STDERR "connect sock: ",$cs->sockhost()," ",
			    $cs->sockport(),"\n";
			print STDERR "connect peer: ",$cs->peerhost()," ",
			    $cs->peerport(),"\n";
			if ($self->{connectproto} eq "tls") {
				print STDERR "ssl version: ",
				    $cs->get_sslversion(),"\n";
				print STDERR "ssl cipher: ",
				    $cs->get_cipher(),"\n";
				print STDERR "ssl issuer: ",
				    $cs->peer_certificate('issuer'),"\n";
				print STDERR "ssl subject: ",
				    $cs->peer_certificate('subject'),"\n";
				print STDERR "ssl cn: ",
				    $cs->peer_certificate('cn'),"\n";
			}
		}

		IO::Handle::flush(\*STDOUT);
		*STDIN = *STDOUT = $self->{cs} = $cs;
		select(STDOUT);
	}

	if ($self->{logsock}) {
		setlogsock($self->{logsock})
		    or die ref($self), " setlogsock failed: $!";
	}
	# we take LOG_UUCP as it is not used nowadays
	openlog("syslogd-regress", "perror,pid", LOG_UUCP);
}

1;
@


1.10
log
@Test syslogd(8) "last message repeated" feature and -r option.
@
text
@d1 1
a1 1
#	$OpenBSD: Client.pm,v 1.9 2017/01/02 16:58:28 bluhm Exp $
d37 3
a39 1
	$self->{connectproto} ||= "udp";
@


1.9
log
@Test listening on multiple sockets simultaneously.
@
text
@d1 1
a1 1
#	$OpenBSD: Client.pm,v 1.8 2016/09/23 14:35:15 bluhm Exp $
d117 1
a117 1
	openlog("syslogd-regress", "ndelay,perror,pid", LOG_UUCP);
@


1.8
log
@The TCP socket buffer size for syslogd has changed.  Adapt tests
where we count the dropped messages.  A different number gets stuck
in the kernel buffers now which is not included in the syslogd
statistics.
@
text
@d1 1
a1 1
#	$OpenBSD: Client.pm,v 1.7 2016/09/21 12:01:17 bluhm Exp $
d107 1
d109 1
@


1.7
log
@Test syslogd TLS client certificate validation.
@
text
@d1 1
a1 1
#	$OpenBSD: Client.pm,v 1.6 2015/11/02 00:48:17 bluhm Exp $
d79 10
@


1.6
log
@Test that rsyslogd can send over TLS to OpenBSD syslogd.
@
text
@d1 1
a1 1
#	$OpenBSD: Client.pm,v 1.5 2015/10/09 17:07:06 bluhm Exp $
d65 8
a72 1
			    SSL_verify_mode     => SSL_VERIFY_NONE,
@


1.5
log
@Add tests for syslogd TLS accept and receive encrypted messages.
@
text
@d1 1
a1 1
#	$OpenBSD: Client.pm,v 1.4 2015/09/09 08:48:46 bluhm Exp $
d81 6
@


1.4
log
@Test that syslogd can process 8 full size messages from sendsyslog(2)
or UDP socket or UNIX domain socket at once.
@
text
@d1 1
a1 1
#	$OpenBSD: Client.pm,v 1.3 2015/02/02 17:40:24 bluhm Exp $
d23 3
d27 1
d55 7
a61 2
			$cs = IO::Socket::INET6->new(
			    Proto               => $self->{connectproto},
d65 7
a71 1
			) or die ref($self), " socket connect failed: $!";
d76 6
@


1.3
log
@Test that long syslog messages are truncated correctly.
@
text
@d1 1
a1 1
#	$OpenBSD: Client.pm,v 1.2 2014/08/25 17:55:27 bluhm Exp $
d40 2
a41 1
	if (defined($self->{connectdomain})) {
@


1.2
log
@Add tests for syslogd sending and receiving over IPv6 sockets.
@
text
@d1 1
a1 1
#	$OpenBSD: Client.pm,v 1.1.1.1 2014/08/20 20:52:14 bluhm Exp $
d33 1
d41 20
a60 10
		my $cs = IO::Socket::INET6->new(
		    Proto               => "udp",
		    Domain              => $self->{connectdomain},
		    PeerAddr            => $self->{connectaddr},
		    PeerPort            => $self->{connectport},
		) or die ref($self), " socket connect failed: $!";
		print STDERR "connect sock: ",$cs->sockhost()," ",
		    $cs->sockport(),"\n";
		print STDERR "connect peer: ",$cs->peerhost()," ",
		    $cs->peerport(),"\n";
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
#	$OpenBSD$
d39 1
a39 1
	if ($self->{connectdomain}) {
@


1.1.1.1
log
@Run syslogd regressions tests.  As only one syslogd can run per
machine, each test kills any syslogd first.  At the end the system's
syslogd gets restarted.
The test framework runs a client, and a server, and a syslogd.  The
messages are passed via the log socket or via UDP from the client
to syslogd.  From there UDP transport is used to reach the server.
All processes write log files where the message has to show up.
The test arguments are kept in the args-*.pl files.
The content of a log file, the data sent to a pipe process and what
the server received are checked.  The invocation of the sendsyslog(2)
syscall is checked with ktrace, the open file descriptors of syslogd
are checked with fstat.
@
text
@@
