head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.12
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.10
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.6
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.4
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.3.0.4
	OPENBSD_5_7_BASE:1.3;
locks; strict;
comment	@# @;


1.4
date	2015.07.16.16.34.49;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	0M9ba2ikkjyPND6j;

1.3
date	2015.02.11.17.28.41;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	hkdmk7KSUJ4UFi47;

1.2
date	2015.02.02.17.40.24;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	BkvE03kfcbCrYutX;

1.1
date	2014.09.13.23.38.24;	author bluhm;	state Exp;
branches;
next	;
commitid	8abA8sLPTwAOrtQB;


desc
@@


1.4
log
@Test that syslogd does not append white spaces to messages.  Per
default the test pattern is stricter now.  Also do some test cleanup
@
text
@# The client writes message to overflow the memory buffer method.
# The syslogd writes it into a file and through a pipe.
# The syslogd passes it via UDP to the loghost.
# The server receives the message on its UDP socket.
# Syslogc checks the memory logs.
# Find the message in client, file, pipe, syslogd, server log.
# Check that syslogc -o reports overflow.

use strict;
use warnings;

our %args = (
    client => {
	func => sub {
	    my $self = shift;
	    write_lines($self, 40, 2000);
	    write_log($self);
	},
    },
    syslogd => {
	memory => 1,
	loggrep => {
	    qr/Accepting control connection/ => 1,
	    qr/ctlcmd 5/ => 1,
	    get_testgrep() => 1,
	},
    },
    syslogc => {
	options => ["-o", "memory"],
	exit => 1,
	loggrep => {
	    qr/^memory has overflowed/ => 1,
	},
    },
);

1;
@


1.3
log
@Make syslogd test more reliable.  Use Time::HiRes to sleep .01
seconds in the write_lines() loop.  This slows down the client, so
all messages reach syslogd and flood its buffers.  Increase the
timeout to wait until all buffers are full.  Use this code in all
TCP/TLS buffer and memory overflow tests.
@
text
@d25 1
a25 1
	    get_testlog() => 1,
@


1.2
log
@Test that long syslog messages are truncated correctly.
@
text
@d16 1
a16 3
	    foreach (1..40) {
		write_message($self, $_ x 1024);
	    }
@


1.1
log
@Add tests for syslogd's memory buffer and read it with syslogc.
@
text
@d16 1
a16 1
	    foreach (1..4) {
@

