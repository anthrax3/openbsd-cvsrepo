head	1.5;
access;
symbols
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.6
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.3.0.4
	OPENBSD_5_7_BASE:1.3;
locks; strict;
comment	@# @;


1.5
date	2015.07.16.16.34.49;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	0M9ba2ikkjyPND6j;

1.4
date	2015.06.28.19.12.20;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	NYXd127rtOQXcb3J;

1.3
date	2014.09.13.23.38.24;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	8abA8sLPTwAOrtQB;

1.2
date	2014.09.02.00.26.30;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	9hOtCJWVU54mPrrd;

1.1
date	2014.08.25.17.55.27;	author bluhm;	state Exp;
branches;
next	;
commitid	YvrBMAbzTxViFsim;


desc
@@


1.5
log
@Test that syslogd does not append white spaces to messages.  Per
default the test pattern is stricter now.  Also do some test cleanup
@
text
@# The client writes a message to a localhost IPv6 UDP socket.
# The syslogd writes it into a file and through a pipe.
# The syslogd passes it via UDP to the loghost.
# The server receives the message on its UDP socket.
# Find the message in client, file, pipe, syslogd, server log.
# Check that the file log contains the localhost name.

use strict;
use warnings;
use Socket;

our %args = (
    client => {
	connect => { domain => AF_INET6, addr => "::1", port => 514 },
    },
    syslogd => {
	options => ["-u"],
	fstat => {
	    qr/^root .* internet/ => 0,
	    qr/^_syslogd .* internet/ => 2,
	},
    },
    file => {
	loggrep => qr/ localhost /. get_testgrep(),
    },
);

1;
@


1.4
log
@Use fstat to check that the privsep parent of syslogd closes all
internet sockets also when invoked with -u.
@
text
@d24 1
a24 1
	loggrep => qr/ localhost /. get_testlog(),
@


1.3
log
@Add tests for syslogd's memory buffer and read it with syslogc.
@
text
@d18 4
@


1.2
log
@Add tests that run the syslogd signal handlers.
@
text
@d20 1
a20 1
	loggrep => qr/ localhost /. get_log(),
@


1.1
log
@Add tests for syslogd sending and receiving over IPv6 sockets.
@
text
@d10 1
@

