head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.10
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.6
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.4
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.3.0.4
	OPENBSD_5_7_BASE:1.3;
locks; strict;
comment	@# @;


1.4
date	2015.07.16.16.34.49;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	0M9ba2ikkjyPND6j;

1.3
date	2015.02.06.00.27.41;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	8et2usx9CGyR7b0D;

1.2
date	2015.01.05.18.48.31;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	eLb66WMTTCFLXoUF;

1.1
date	2014.12.31.14.05.26;	author bluhm;	state Exp;
branches;
next	;
commitid	aJ48QDLYN7gznT6d;


desc
@@


1.4
log
@Test that syslogd does not append white spaces to messages.  Per
default the test pattern is stricter now.  Also do some test cleanup
@
text
@# The TCP server writes a message back to the syslogd.
# The client writes a message to Sys::Syslog native method.
# The syslogd writes it into a file and through a pipe.
# The syslogd passes it via IPv4 TCP to an explicit loghost.
# The server receives the message on its TCP socket.
# Find the message in client, pipe, syslogd, server log.
# Check that syslogd writes a debug message about the message sent back.

use strict;
use warnings;
use Socket;

my $sendback = "syslogd tcp server send back message";

our %args = (
    client => {
	func => sub {
	    my $self = shift;
	    ${$self->{syslogd}}->loggrep("loghost .* did send .* back", 5)
		or die "no send back in syslogd.log";
	    write_log($self);
	},
    },
    syslogd => {
	loghost => '@@tcp://127.0.0.1:$connectport',
	loggrep => {
	    qr/Logging to FORWTCP \@@tcp:\/\/127.0.0.1:\d+/ => '>=4',
	    get_testgrep() => 1,
	    qr/did send /.length($sendback).qr/ bytes back/ => 1,
	},
    },
    server => {
	listen => { domain => AF_INET, proto => "tcp", addr => "127.0.0.1" },
	func => sub {
	    print($sendback);
	    read_log(@@_);
	},
    },
    file => {
	loggrep => {
	    qr/$sendback/ => 0,
	},
    },
);

1;
@


1.3
log
@Add syslogd tests for dropped messages.
@
text
@d28 1
a28 1
	    get_testlog() => 1,
@


1.2
log
@Make syslogd TCP tests more reliable.  Increase timeouts, shutdown
write to trigger connection close, allow errors EPIPE or ECONNRESET.
@
text
@d21 1
a21 1
	    write_log($self, @@_);
@


1.1
log
@Adapt and add regression tests for sending syslog messages over TCP.
@
text
@d19 1
a19 1
	    ${$self->{syslogd}}->loggrep("loghost .* did send .* back", 2)
@

