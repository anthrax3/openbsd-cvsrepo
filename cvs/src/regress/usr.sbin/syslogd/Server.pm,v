head	1.11;
access;
symbols
	OPENBSD_6_2:1.11.0.6
	OPENBSD_6_2_BASE:1.11
	OPENBSD_6_1:1.11.0.4
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.8.0.2
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.6.0.6
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.4
	OPENBSD_5_7_BASE:1.6
	bluhm_20140820:1.1.1.1
	bluhm:1.1.1;
locks; strict;
comment	@# @;


1.11
date	2017.01.31.18.02.54;	author bluhm;	state Exp;
branches;
next	1.10;
commitid	t0SYGqL75cnZf4IB;

1.10
date	2016.09.23.14.35.15;	author bluhm;	state Exp;
branches;
next	1.9;
commitid	JKJPtU8AKXFWhQjU;

1.9
date	2016.09.21.12.01.17;	author bluhm;	state Exp;
branches;
next	1.8;
commitid	o9jUvlZXlix0kG8u;

1.8
date	2016.07.12.09.57.20;	author bluhm;	state Exp;
branches;
next	1.7;
commitid	65GSYKzyEOhOJae2;

1.7
date	2015.12.04.13.49.42;	author bluhm;	state Exp;
branches;
next	1.6;
commitid	Png8GPl0MIbEHtve;

1.6
date	2015.01.28.22.58.38;	author bluhm;	state Exp;
branches;
next	1.5;
commitid	MNLedIN5SwyY3fog;

1.5
date	2015.01.15.13.15.17;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	mHMJNTj9xtaQr97F;

1.4
date	2014.12.31.01.25.07;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	DkOCw4SRDM2yh7oP;

1.3
date	2014.12.28.14.08.01;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	2DOukBo6SZhymWi6;

1.2
date	2014.08.25.17.55.27;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	YvrBMAbzTxViFsim;

1.1
date	2014.08.20.20.52.14;	author bluhm;	state Exp;
branches
	1.1.1.1;
next	;
commitid	DUvdbfhw6s1btkKk;

1.1.1.1
date	2014.08.20.20.52.14;	author bluhm;	state Exp;
branches;
next	;
commitid	DUvdbfhw6s1btkKk;


desc
@@


1.11
log
@Mark the IO::Socket::SSL server socket with SSL_server to avoid
OCSP error messages.
@
text
@#	$OpenBSD: Server.pm,v 1.10 2016/09/23 14:35:15 bluhm Exp $

# Copyright (c) 2010-2015 Alexander Bluhm <bluhm@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

package Server;
use parent 'Proc';
use Carp;
use Socket;
use Socket6;
use IO::Socket;
use IO::Socket::INET6;
use IO::Socket::SSL;

sub new {
	my $class = shift;
	my %args = @@_;
	$args{ktracefile} ||= "server.ktrace";
	$args{logfile} ||= "server.log";
	$args{up} ||= "Accepted";
	my $self = Proc::new($class, %args);
	$self->{listenproto} ||= "udp";
	defined($self->{listendomain})
	    or croak "$class listen domain not given";
	return $self->listen();
}

sub listen {
	my $self = shift;
	$SSL_ERROR = "";
	my $iosocket = $self->{listenproto} eq "tls" ?
	    "IO::Socket::SSL" : "IO::Socket::INET6";
	my $proto = $self->{listenproto};
	$proto = "tcp" if $proto eq "tls";
	my $ls = $iosocket->new(
	    Proto		=> $proto,
	    ReuseAddr		=> 1,
	    Domain		=> $self->{listendomain},
	    $self->{listenaddr}	? (LocalAddr => $self->{listenaddr}) : (),
	    $self->{listenport}	? (LocalPort => $self->{listenport}) : (),
	    SSL_server          => 1,
	    SSL_key_file	=> "server.key",
	    SSL_cert_file	=> "server.crt",
	    SSL_ca_file		=> ($self->{sslca} || "ca.crt"),
	    SSL_verify_mode     => ($self->{sslca} ?
		SSL_VERIFY_PEER : SSL_VERIFY_NONE),
	    $self->{sslca}	? (SSL_verifycn_scheme => "none") : (),
	    $self->{sslversion}	? (SSL_version => $self->{sslversion}) : (),
	    $self->{sslciphers}	? (SSL_cipher_list => $self->{sslciphers}) : (),
	) or die ref($self), " $iosocket socket failed: $!,$SSL_ERROR";
	if ($self->{sndbuf}) {
		setsockopt($ls, SOL_SOCKET, SO_SNDBUF,
		    pack('i', $self->{sndbuf}))
		    or die ref($self), " set SO_SNDBUF failed: $!";
	}
	if ($self->{rcvbuf}) {
		setsockopt($ls, SOL_SOCKET, SO_RCVBUF,
		    pack('i', $self->{rcvbuf}))
		    or die ref($self), " set SO_RCVBUF failed: $!";
	}
	if ($self->{listenproto} ne "udp") {
		listen($ls, 1)
		    or die ref($self), " socket listen failed: $!";
	}
	my $log = $self->{log};
	print $log "listen sock: ",$ls->sockhost()," ",$ls->sockport(),"\n";
	$self->{listenaddr} = $ls->sockhost() unless $self->{listenaddr};
	$self->{listenport} = $ls->sockport() unless $self->{listenport};
	$self->{ls} = $ls;
	return $self;
}

sub close {
	my $self = shift;
	$self->{ls}->close()
	    or die ref($self)," ",ref($self->{ls}),
	    " socket close failed: $!,$SSL_ERROR";
	delete $self->{ls};
	return $self;
}

sub run {
	my $self = shift;
	Proc::run($self, @@_);
	return $self->close();
}

sub child {
	my $self = shift;

	my $as = $self->{ls};
	if ($self->{listenproto} ne "udp") {
		$as = $self->{ls}->accept()
		    or die ref($self)," ",ref($self->{ls}),
		    " socket accept failed: $!,$SSL_ERROR";
		print STDERR "accept sock: ",$as->sockhost()," ",
		    $as->sockport(),"\n";
		print STDERR "accept peer: ",$as->peerhost()," ",
		    $as->peerport(),"\n";
	}
	if ($self->{listenproto} eq "tls") {
		print STDERR "ssl version: ",$as->get_sslversion(),"\n";
		print STDERR "ssl cipher: ",$as->get_cipher(),"\n";
		print STDERR "ssl subject: ", $as->peer_certificate("subject")
		    ,"\n" if $self->{sslca};
	}

	*STDIN = *STDOUT = $self->{as} = $as;
}

1;
@


1.10
log
@The TCP socket buffer size for syslogd has changed.  Adapt tests
where we count the dropped messages.  A different number gets stuck
in the kernel buffers now which is not included in the syslogd
statistics.
@
text
@d1 1
a1 1
#	$OpenBSD: Server.pm,v 1.9 2016/09/21 12:01:17 bluhm Exp $
d55 1
@


1.9
log
@Test syslogd TLS client certificate validation.
@
text
@d1 1
a1 1
#	$OpenBSD: Server.pm,v 1.8 2016/07/12 09:57:20 bluhm Exp $
d64 10
@


1.8
log
@Add regression tests for syslogd TLS client certificates.
@
text
@d1 1
a1 1
#	$OpenBSD: Server.pm,v 1.7 2015/12/04 13:49:42 bluhm Exp $
d57 4
a60 3
	    SSL_ca_file		=> ($self->{cacrt} || "ca.crt"),
	    $self->{sslverify}	? (SSL_verify_mode => SSL_VERIFY_PEER) : (),
	    $self->{sslverify}	? (SSL_verifycn_scheme => "none") : (),
d108 1
a108 1
		    ,"\n" if $self->{sslverify};
@


1.7
log
@Add tests that call the syscalls sendsyslog(2) and sendsyslog2(2)
directly.
@
text
@d1 1
a1 1
#	$OpenBSD: Server.pm,v 1.6 2015/01/28 22:58:38 bluhm Exp $
d53 2
a54 2
	    $self->{listenaddr} ? (LocalAddr => $self->{listenaddr}) : (),
	    $self->{listenport} ? (LocalPort => $self->{listenport}) : (),
d57 5
a61 3
	    SSL_verify_mode	=> SSL_VERIFY_NONE,
	    $self->{sslversion} ? (SSL_version => $self->{sslversion}) : (),
	    $self->{sslciphers} ? (SSL_cipher_list => $self->{sslciphers}) : (),
d106 2
@


1.6
log
@Add a test where the TLS handshake fails because of null ciphers.
@
text
@d1 1
a1 1
#	$OpenBSD: Server.pm,v 1.5 2015/01/15 13:15:17 bluhm Exp $
d60 1
a60 1
	) or die ref($self), " $iosocket socket listen failed: $!,$SSL_ERROR";
d63 1
a63 1
		    or die ref($self), " socket failed: $!";
@


1.5
log
@Add a test for syslogd that reconnects to a TCP syslog server after
an established connection has been closed.
@
text
@d1 1
a1 1
#	$OpenBSD: Server.pm,v 1.4 2014/12/31 01:25:07 bluhm Exp $
d58 2
d100 4
@


1.4
log
@Create CA and certificates for TLS tests consistently.  Better
logging of SSL errors.  Do not import unneeded Socket constants.
@
text
@d1 1
a1 1
#	$OpenBSD: Server.pm,v 1.3 2014/12/28 14:08:01 bluhm Exp $
d3 1
a3 1
# Copyright (c) 2010-2014 Alexander Bluhm <bluhm@@openbsd.org>
d39 5
d69 15
@


1.3
log
@Add regression tests where OpenBSD syslogd is sending messages to
rsyslogd from ports.  If the rsyslog package is installed, rsyslogd
is used as drain to test interoperability.  This will be especially
useful for syslog via TCP and TLS.
@
text
@d1 1
a1 1
#	$OpenBSD: Server.pm,v 1.2 2014/08/25 17:55:27 bluhm Exp $
d50 2
a51 2
	    SSL_key_file	=> "server-key.pem",
	    SSL_cert_file	=> "server-cert.pem",
d54 1
a54 1
	if ($self->{listenproto} eq "tcp") {
a68 1
	my $iosocket = $self->{ssl} ? "IO::Socket::SSL" : "IO::Socket::INET6";
d72 2
a73 1
		    or die ref($self), " $iosocket socket accept failed: $!";
@


1.2
log
@Add tests for syslogd sending and receiving over IPv6 sockets.
@
text
@d1 1
a1 1
#	$OpenBSD: Server.pm,v 1.1.1.1 2014/08/20 20:52:14 bluhm Exp $
d36 1
a36 1
	$self->{listenprotocol} ||= "udp";
d40 1
a40 1
	my $iosocket = $self->{listenprotocol} eq "tls" ?
d42 1
a42 1
	my $proto = $self->{listenprotocol};
d54 1
a54 1
	if ($self->{listenprotocol} eq "tcp") {
d71 1
a71 1
	if ($self->{listenprotocol} ne "udp") {
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
#	$OpenBSD$
d37 1
a37 1
	$self->{listendomain}
@


1.1.1.1
log
@Run syslogd regressions tests.  As only one syslogd can run per
machine, each test kills any syslogd first.  At the end the system's
syslogd gets restarted.
The test framework runs a client, and a server, and a syslogd.  The
messages are passed via the log socket or via UDP from the client
to syslogd.  From there UDP transport is used to reach the server.
All processes write log files where the message has to show up.
The test arguments are kept in the args-*.pl files.
The content of a log file, the data sent to a pipe process and what
the server received are checked.  The invocation of the sendsyslog(2)
syscall is checked with ktrace, the open file descriptors of syslogd
are checked with fstat.
@
text
@@
