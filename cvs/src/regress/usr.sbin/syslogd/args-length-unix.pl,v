head	1.4;
access;
symbols
	OPENBSD_6_0:1.4.0.6
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.4
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.3.0.4
	OPENBSD_5_7_BASE:1.3;
locks; strict;
comment	@# @;


1.4
date	2015.06.15.21.44.57;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	BmPbwQg6idYgxXrC;

1.3
date	2015.02.11.21.51.13;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	oVck3lsrH2XH2G1o;

1.2
date	2015.02.06.00.27.41;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	8et2usx9CGyR7b0D;

1.1
date	2015.02.02.17.40.24;	author bluhm;	state Exp;
branches;
next	;
commitid	BkvE03kfcbCrYutX;


desc
@@


1.4
log
@Rework how fstat and ktrace pattern are specified in the test
arguments.  Add tests to check wether syslogd privsep works.  This
is done for debug and foreground and daemon mode.  Fstat is checked
for chroot and sockets.  Ktrace dump is grepped for setting uid and
gid.
@
text
@# The client writes long messages to unix domain socket /dev/log.
# The syslogd writes it into a file and through a pipe.
# The syslogd passes it via UDP to the loghost.
# The server receives the message on its UDP socket.
# Find the message in client, file, pipe, syslogd, server log.
# Check that lines in file have 8192 bytes message length after the header.

use strict;
use warnings;
use Socket;

our %args = (
    client => {
	connect => { domain => AF_UNIX },
	func => sub {
	    my $self = shift;
	    write_lengths($self, 8190..8193,9000);
	    write_log($self);
	},
    },
    syslogd => {
	loggrep => {
	    get_charlog() => 5,
	},
    },
    file => {
	# Feb  2 00:43:36 hostname 0123456789ABC...567
	loggrep => {
	    get_charlog() => 5,
	    qr/^.{15} \S{1,256} .{8190}$/ => 1,
	    qr/^.{15} \S{1,256} .{8191}$/ => 1,
	    qr/^.{15} \S{1,256} .{8192}$/ => 3,
	},
    },
);

1;
@


1.3
log
@Make syslogd tests more reliable.  Allow a range of certain log
messages, in case some got lost.  Slow down client when sending
multiple log messages.  Sort patterns when checking log files.  TLS
error messages have changed, adapt tests.
@
text
@d24 1
a24 1
	}
@


1.2
log
@Add syslogd tests for dropped messages.
@
text
@d15 5
a19 2
	func => \&write_length,
	lengths => [ 8190..8193,9000 ],
@


1.1
log
@Test that long syslog messages are truncated correctly.
@
text
@a11 2
my $msg = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";

d20 1
a20 1
	    $msg => 5,
d26 1
a26 1
	    $msg => 5,
@

