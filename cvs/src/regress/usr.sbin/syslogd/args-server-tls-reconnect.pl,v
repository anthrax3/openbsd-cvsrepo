head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.4
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.2
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.4
	OPENBSD_5_7_BASE:1.3;
locks; strict;
comment	@# @;


1.5
date	2016.05.29.14.38.33;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	pWd8xXMglTwDqGII;

1.4
date	2015.09.25.13.33.44;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	xkhE42VBI4k4PrDa;

1.3
date	2015.02.09.21.06.35;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	ijXbEt8h29UoWlgz;

1.2
date	2015.02.06.00.27.41;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	8et2usx9CGyR7b0D;

1.1
date	2015.01.16.11.51.59;	author bluhm;	state Exp;
branches;
next	;
commitid	0LYtCVxwz86nbUES;


desc
@@


1.5
log
@When connecting to a non existing tcp listen socket on localhost,
connect(2) does no longer fail immediately.  It reports EINPROGRESS
first, an ECONNREFUSED or EPIPE error follows later.  Allow this
changed behavior in syslogd(8) regression tests.
@
text
@# The TLS server closes the connection to syslogd.
# The client writes a message to Sys::Syslog native method.
# The syslogd writes it into a file and through a pipe.
# The syslogd does a TLS reconnect and passes it to loghost.
# The server receives the message on its new accepted TLS socket.
# Find the message in client, pipe, syslogd, server log.
# Check that syslogd and server close and reopen the connection.

use strict;
use warnings;
use Socket;
use Errno ':POSIX';

my @@errors = (ECONNREFUSED, EPIPE);
my $errors = "(". join("|", map { $! = $_ } @@errors). ")";

our %args = (
    client => {
	func => sub { write_between2logs(shift, sub {
	    my $self = shift;
	    ${$self->{syslogd}}->loggrep($errors, 5)
		or die "no $errors in syslogd.log";
	})},
    },
    syslogd => {
	loghost => '@@tls://127.0.0.1:$connectport',
	loggrep => {
	    qr/Logging to FORWTLS \@@tls:\/\/127.0.0.1:\d+/ => '>=6',
	    qr/syslogd: (connect .*|.* connection error: handshake failed): /.
		$errors => '>=2',
	    get_between2loggrep(),
	},
    },
    server => {
	listen => { domain => AF_INET, proto => "tls", addr => "127.0.0.1" },
	redo => 0,
	func => sub { read_between2logs(shift, sub {
	    my $self = shift;
	    if ($self->{redo}) {
		$self->{redo}--;
		return;
	    }
	    $self->close();
	    shutdown(\*STDOUT, 1)
		or die "shutdown write failed: $!";
	    ${$self->{syslogd}}->loggrep($errors, 5)
		or die "no $errors in syslogd.log";
	    $self->listen();
	    $self->{redo}++;
	})},
	loggrep => {
	    qr/Accepted/ => 2,
	    qr/syslogd: loghost .* connection close/ => 1,
	    qr/syslogd: (connect .*|.* connection error: handshake failed): /.
		$errors => 1,
	    get_between2loggrep(),
	},
    },
    file => {
	loggrep => {
	    qr/syslogd: (connect .*|.* connection error: handshake failed): /.
		$errors => '>=1',
	    get_between2loggrep(),
	},
    },
);

1;
@


1.4
log
@In libtls connection error EOF has changed to connection close.
Adapt syslogd tests.
@
text
@d14 1
a14 1
my @@errors = (ECONNREFUSED);
d21 2
a22 2
	    ${$self->{syslogd}}->loggrep("Connection refused", 5)
		or die "no connection refused in syslogd.log";
d29 2
a30 1
	    qr/syslogd: connect .*: $errors/ => '>=2',
d46 2
a47 2
	    ${$self->{syslogd}}->loggrep("Connection refused", 5)
		or die "no connection refused in syslogd.log";
d54 2
a55 1
	    qr/syslogd: connect .*: $errors/ => 1,
d61 2
a62 1
	    qr/syslogd: connect .*: $errors/ => '>=1',
@


1.3
log
@Error messages form libtls have changed, adapt syslogd tests.
@
text
@d52 1
a52 1
	    qr/syslogd: loghost .* connection error/ => 1,
@


1.2
log
@Add syslogd tests for dropped messages.
@
text
@d12 4
d29 1
a29 1
	    qr/syslogd: connect .* Connection refused/ => '>=2',
d53 1
a53 1
	    qr/syslogd: connect .* Connection refused/ => 1,
d59 1
a59 1
	    qr/syslogd: connect .* Connection refused/ => '>=1',
@


1.1
log
@Add regression tests for syslog over TLS.
@
text
@d15 1
a15 1
	func => sub {
d17 3
a19 5
	    write_between2logs($self, sub {
		${$self->{syslogd}}->loggrep("Connection refused", 5)
		    or die "no connection refused in syslogd.log";
	    });
	},
d32 1
a32 1
	func => sub {
d34 12
a45 14
	    read_between2logs($self, sub {
		if ($self->{redo}) {
		    $self->{redo}--;
		    return;
		}
		$self->close();
		shutdown(\*STDOUT, 1)
		    or die "shutdown write failed: $!";
		${$self->{syslogd}}->loggrep("Connection refused", 5)
		    or die "no connection refused in syslogd.log";
		$self->listen();
		$self->{redo}++;
	    });
	},
@

