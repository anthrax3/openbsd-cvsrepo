head	1.9;
access;
symbols
	OPENBSD_6_1:1.9.0.2
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.8.0.2
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.4.0.4
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.3.0.4
	OPENBSD_5_7_BASE:1.3;
locks; strict;
comment	@# @;


1.9
date	2016.12.30.14.56.31;	author bluhm;	state Exp;
branches;
next	1.8;
commitid	6bipSkZN3dHxIUh8;

1.8
date	2016.07.11.22.43.28;	author bluhm;	state Exp;
branches;
next	1.7;
commitid	peE2Z6lafWZBhnfl;

1.7
date	2016.07.06.21.30.21;	author bluhm;	state Exp;
branches;
next	1.6;
commitid	g4k1vzvoSl9VLAPE;

1.6
date	2015.10.09.17.07.06;	author bluhm;	state Exp;
branches;
next	1.5;
commitid	m9fthBBZas0yIZjN;

1.5
date	2015.09.10.18.37.06;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	knbdS9rxp7T1Jmwi;

1.4
date	2015.07.16.16.34.49;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	0M9ba2ikkjyPND6j;

1.3
date	2015.02.09.21.06.35;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	ijXbEt8h29UoWlgz;

1.2
date	2015.01.30.15.13.10;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	rSemIB8GmQuRx9Yu;

1.1
date	2015.01.28.19.23.22;	author bluhm;	state Exp;
branches;
next	;
commitid	6n55AVIuWA7LUOak;


desc
@@


1.9
log
@Now libtls creates nicer certificate verification error messages.
Adapt regex in syslogd test.
@
text
@# The client writes a message to Sys::Syslog native method.
# The syslogd writes it into a file and through a pipe.
# The syslogd passes it via TLS to localhost loghost.
# The cafile is the system default which has no matching cert.
# Find the message in client, file, pipe, syslogd log.
# Check that syslogd has verify failure and server has no message.

use strict;
use warnings;
use Socket;

our %args = (
    syslogd => {
	loghost => '@@tls://localhost:$connectport',
	ktrace => {
	    qr{NAMI  "/etc/ssl/cert.pem"} => 1,
	},
	loggrep => {
	    qr{CAfile /etc/ssl/cert.pem} => 1,
	    qr/Logging to FORWTLS \@@tls:\/\/localhost:\d+/ => '>=4',
	    qr/syslogd: loghost .* connection error: /.
		qr/certificate verification failed: /.
		qr/self signed certificate in certificate chain/ => 2,
	    get_testgrep() => 1,
	},
	cacrt => "default",
    },
    server => {
	listen => { domain => AF_UNSPEC, proto => "tls", addr => "localhost" },
	up => "IO::Socket::SSL socket accept failed",
	down => "Server",
	exit => 255,
	loggrep => {
	    qr/listen sock: (127.0.0.1|::1) \d+/ => 1,
	    qr/SSL accept attempt failed because of handshake problems/ => 1,
	    get_testgrep() => 0,
	},
    },
);

1;
@


1.8
log
@Revert previous adaption of the test.  The behavior change in libtls
has been backed out.
@
text
@d22 2
a23 2
		qr/handshake failed: error:.*/.
		qr/SSL3_GET_SERVER_CERTIFICATE:certificate verify failed/ => 2,
@


1.7
log
@Now libtls is always reading cert.pem during tls_config_new().
Adapt ktrace count in syslogd test.
@
text
@d16 1
a16 1
	    qr{NAMI  "/etc/ssl/cert.pem"} => 3,
@


1.6
log
@Add tests for syslogd TLS accept and receive encrypted messages.
@
text
@d16 1
a16 1
	    qr{NAMI  "/etc/ssl/cert.pem"} => 1,
@


1.5
log
@Grep for new error messages about tls_connect_socket.  Libtls now
reports handshake failed.  Make bufsize tests more reliable.
@
text
@d15 3
d19 1
a19 1
	    qr/CAfile \/etc\/ssl\/cert.pem/ => 1,
@


1.4
log
@Test that syslogd does not append white spaces to messages.  Per
default the test pattern is stricter now.  Also do some test cleanup
@
text
@d18 2
a19 1
	    qr/syslogd: loghost .* connection error: connect failed: error:.*/.
@


1.3
log
@Error messages form libtls have changed, adapt syslogd tests.
@
text
@d20 1
a20 1
	    get_testlog() => 1,
d32 1
a32 1
	    get_testlog() => 0,
@


1.2
log
@TLS connect error message has changed, adapt tests.
@
text
@d18 2
a19 1
	    qr/connection error: TLS connect failed \(1\)/ => 2,
@


1.1
log
@Test the x509 certificate validation of syslog over TLS.
@
text
@d18 1
a18 1
	    qr/connection error: SSL connect failed: 1/ => 2,
@

