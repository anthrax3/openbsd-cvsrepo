head	1.2;
access;
symbols
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.2
	OPENBSD_6_0_BASE:1.2;
locks; strict;
comment	@# @;


1.2
date	2016.03.29.21.12.12;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	V04f93WXIMgw0KEA;

1.1
date	2016.03.21.23.23.15;	author bluhm;	state Exp;
branches;
next	;
commitid	ICMd7I0he7hx5htW;


desc
@@


1.2
log
@Kdump contains LOG_CONS now.  TLS error message changes.
Adapt grep regex in syslogd tests.
@
text
@# The client writes a message with sendsyslog syscall.
# The syslogd writes it into a file and through a pipe.
# The syslogd passes it via UDP to the loghost.
# The server receives the message on its UDP socket.
# Find the message in client, file, pipe, syslogd, server log.
# Create a ktrace dump of the client and check that sendsyslog(2)
# has been used with flags.

use strict;
use warnings;
use Sys::Syslog 'LOG_CONS';

our %args = (
    client => {
	connect => { domain => "sendsyslog", flags => LOG_CONS },
	ktrace => {
	    qr/CALL  sendsyslog\(.*LOG_CONS.*\)/ => 1,
	    qr/GIO   fd -1 wrote \d+ bytes/ => 2,
	    qr/RET   sendsyslog 0/ => 2,
	},
    },
);

1;
@


1.1
log
@System call sendsyslog2 is gone, adapt tests.
@
text
@d17 1
a17 1
	    qr/CALL  sendsyslog\(.*,0x2\)/ => 1,
@

