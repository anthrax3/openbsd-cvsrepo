head	1.5;
access;
symbols
	OPENBSD_6_0:1.5.0.6
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4;
locks; strict;
comment	@# @;


1.5
date	2015.07.16.16.34.49;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	0M9ba2ikkjyPND6j;

1.4
date	2014.09.13.23.38.24;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	8abA8sLPTwAOrtQB;

1.3
date	2014.09.02.17.43.29;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	uB2qKOs5zbFwXm2E;

1.2
date	2014.09.02.00.26.30;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	9hOtCJWVU54mPrrd;

1.1
date	2014.08.25.17.55.27;	author bluhm;	state Exp;
branches;
next	;
commitid	YvrBMAbzTxViFsim;


desc
@@


1.5
log
@Test that syslogd does not append white spaces to messages.  Per
default the test pattern is stricter now.  Also do some test cleanup
@
text
@# The client writes a message to Sys::Syslog native method.
# The syslogd writes it into a file and through a pipe.
# The syslogd passes it via UDP to localhost.
# The server receives the message on its UDP socket.
# Check that localhost gets resolved to local IPv4 or IPv6 address.

use strict;
use warnings;
use Socket;

our %args = (
    client => {
	connect => { domain => AF_UNSPEC, addr => "localhost", port => 514 },
	loggrep => {
	    qr/connect sock: (127.0.0.1|::1) \d+/ => 1,
	    get_testgrep() => 1,
	},
    },
    syslogd => {
	loghost => '@@localhost:$connectport',
	options => ["-u"],
	loggrep => {
	    qr/ from localhost, msg /.get_testgrep() => 1,
	},
    },
    server => {
	listen => { domain => AF_UNSPEC, addr => "localhost" },
	loggrep => {
	    qr/listen sock: (127.0.0.1|::1) \d+/ => 1,
	    get_testgrep() => 1,
	},
    },
);

1;
@


1.4
log
@Add tests for syslogd's memory buffer and read it with syslogc.
@
text
@d16 1
a16 1
	    get_testlog() => 1,
d23 1
a23 1
	    qr/ from localhost, msg /.get_testlog() => 1,
d30 1
a30 1
	    get_testlog() => 1,
@


1.3
log
@To examine the operation of the signal handlers, the tests grep in
the ktrace output of syslogd.  Also make the tests work without DNS
and without sudo.
@
text
@d16 1
a16 1
	    get_log() => 1,
d23 1
a23 1
	    qr/ from localhost, msg /.get_log() => 1,
d30 1
a30 1
	    get_log() => 1,
@


1.2
log
@Add tests that run the syslogd signal handlers.
@
text
@d13 1
a13 1
	connect => { domain => AF_UNSPEC, addr => "localhost.", port => 514 },
d20 1
a20 1
	loghost => '@@localhost.:$connectport',
d27 1
a27 1
	listen => { domain => AF_UNSPEC, addr => "localhost." },
@


1.1
log
@Add tests for syslogd sending and receiving over IPv6 sockets.
@
text
@d9 1
@

