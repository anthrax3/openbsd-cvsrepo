head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.0.2
	OPENBSD_6_0_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2016.09.21.12.01.17;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	o9jUvlZXlix0kG8u;

1.1
date	2016.07.12.09.57.20;	author bluhm;	state Exp;
branches;
next	;
commitid	65GSYKzyEOhOJae2;


desc
@@


1.2
log
@Test syslogd TLS client certificate validation.
@
text
@# The client writes a message to Sys::Syslog native method.
# The syslogd writes it into a file and through a pipe.
# The syslogd passes it via TLS with client certificate to the loghost.
# The server verifies the connection to its TLS socket and gets the message.
# Find the message in client, file, pipe, syslogd, server log.
# Check that syslogd has client cert and key in log.
# Check that server has client certificate subject in log.

use strict;
use warnings;
use Socket;

our %args = (
    syslogd => {
	options => [qw(-c client.crt -k client.key)],
	loghost => '@@tls://localhost:$connectport',
	loggrep => {
	    qr/ClientCertfile client.crt/ => 1,
	    qr/ClientKeyfile client.key/ => 1,
	    get_testgrep() => 1,
	},
    },
    server => {
	listen => { domain => AF_UNSPEC, proto => "tls", addr => "localhost" },
	sslca => "ca.crt",
	loggrep => {
	    qr/ssl subject: /.
		qr{/L=OpenBSD/O=syslogd-regress/OU=client/CN=localhost} => 1,
	    get_testgrep() => 1,
	},
    },
);

1;
@


1.1
log
@Add regression tests for syslogd TLS client certificates.
@
text
@d25 1
a25 1
	sslverify => 1,
@

