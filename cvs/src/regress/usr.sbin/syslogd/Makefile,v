head	1.19;
access;
symbols
	OPENBSD_6_1:1.19.0.2
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.15.0.2
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.14.0.2
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.10.0.4
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.8.0.4
	OPENBSD_5_7_BASE:1.8
	bluhm_20140820:1.1.1.1
	bluhm:1.1.1;
locks; strict;
comment	@# @;


1.19
date	2017.01.02.16.58.28;	author bluhm;	state Exp;
branches;
next	1.18;
commitid	Mg6YsjHbSgff7PNA;

1.18
date	2016.11.15.12.56.34;	author bluhm;	state Exp;
branches;
next	1.17;
commitid	GkTGFBFGxohbGJg9;

1.17
date	2016.09.02.21.30.34;	author bluhm;	state Exp;
branches;
next	1.16;
commitid	sbZCO4zszQKrda5x;

1.16
date	2016.08.23.21.20.05;	author bluhm;	state Exp;
branches;
next	1.15;
commitid	iKBbEPLKGn1khYaL;

1.15
date	2016.07.12.09.57.20;	author bluhm;	state Exp;
branches;
next	1.14;
commitid	65GSYKzyEOhOJae2;

1.14
date	2015.11.04.20.02.26;	author bluhm;	state Exp;
branches;
next	1.13;
commitid	T2prORCIhAQP16fC;

1.13
date	2015.10.19.20.16.09;	author bluhm;	state Exp;
branches;
next	1.12;
commitid	kVDnyxLzqDFKPFoO;

1.12
date	2015.10.09.17.07.06;	author bluhm;	state Exp;
branches;
next	1.11;
commitid	m9fthBBZas0yIZjN;

1.11
date	2015.09.11.22.01.06;	author bluhm;	state Exp;
branches;
next	1.10;
commitid	hkvkwdtgBC32KAqL;

1.10
date	2015.07.09.21.12.44;	author bluhm;	state Exp;
branches;
next	1.9;
commitid	AUvZQYxe8utgq9GX;

1.9
date	2015.06.15.21.44.57;	author bluhm;	state Exp;
branches;
next	1.8;
commitid	BmPbwQg6idYgxXrC;

1.8
date	2015.01.28.19.23.22;	author bluhm;	state Exp;
branches;
next	1.7;
commitid	6n55AVIuWA7LUOak;

1.7
date	2014.12.31.01.25.07;	author bluhm;	state Exp;
branches;
next	1.6;
commitid	DkOCw4SRDM2yh7oP;

1.6
date	2014.12.28.14.08.01;	author bluhm;	state Exp;
branches;
next	1.5;
commitid	2DOukBo6SZhymWi6;

1.5
date	2014.09.13.23.38.24;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	8abA8sLPTwAOrtQB;

1.4
date	2014.09.03.15.56.07;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	JHHXofVHBjdMTBFz;

1.3
date	2014.09.02.00.26.30;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	9hOtCJWVU54mPrrd;

1.2
date	2014.08.29.21.55.55;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	ttGmQXH8XXWint6D;

1.1
date	2014.08.20.20.52.14;	author bluhm;	state Exp;
branches
	1.1.1.1;
next	;
commitid	DUvdbfhw6s1btkKk;

1.1.1.1
date	2014.08.20.20.52.14;	author bluhm;	state Exp;
branches;
next	;
commitid	DUvdbfhw6s1btkKk;


desc
@@


1.19
log
@Test listening on multiple sockets simultaneously.
@
text
@#	$OpenBSD: Makefile,v 1.18 2016/11/15 12:56:34 bluhm Exp $

# The following ports must be installed for the regression tests:
# p5-IO-Socket-INET6	object interface for AF_INET and AF_INET6 domain sockets
# p5-Socket6		Perl defines relating to AF_INET6 sockets
# p5-IO-Socket-SSL	perl interface to SSL sockets
# p5-BSD-Resource	BSD process resource limit and priority functions
#
# This package enables additional interoperability tests
# rsyslog		syslog daemon supporting databases, TCP, SSL, RELP
#
# Check wether all required perl packages are installed.  If some
# are missing print a warning and skip the tests, but do not fail.

PERL_REQUIRE !=	perl -Mstrict -Mwarnings -e ' \
    eval { require IO::Socket::INET6 } or print $@@; \
    eval { require Socket6 } or print $@@; \
    eval { require IO::Socket::SSL } or print $@@; \
    eval { require BSD::Resource } or print $@@; \
'
.if ! empty (PERL_REQUIRE)
regress:
	@@echo "${PERL_REQUIRE}"
	@@echo install these perl packages for additional tests
	@@echo SKIPPED
.endif

# Automatically generate regress targets from test cases in directory.

ARGS !=			cd ${.CURDIR} && ls args-*.pl
.if exists (/usr/local/sbin/rsyslogd)
TARGETS ?=		${ARGS}
.else
TARGETS ?=		${ARGS:Nargs-rsyslog*}
.endif
REGRESS_TARGETS =	${TARGETS:S/^/run-regress-/}
LDFLAGS +=		-lutil
CLEANFILES +=		*.log *.log.? *.conf ktrace.out stamp-*
CLEANFILES +=		*.out *.sock *.ktrace *.fstat ttylog *.ph */*.ph
CLEANFILES +=		*.pem *.req *.key *.crt *.srl empty toobig

.MAIN: all

.if make (regress) || make (all)
.BEGIN:
	@@echo
	[ -z "${SUDO}" ] || ${SUDO} true
	${SUDO} /etc/rc.d/syslogd stop
.END:
	@@echo
	${SUDO} /etc/rc.d/syslogd restart
.endif

# Set variables so that make runs with and without obj directory.
# Only do that if necessary to keep visible output short.

.if ${.CURDIR} == ${.OBJDIR}
PERLINC =
PERLPATH =
.else
PERLINC =	-I${.CURDIR}
PERLPATH =	${.CURDIR}/
.endif

# The arg tests take a perl hash with arguments controlling the
# test parameters.  Generally they consist of client, syslogd, server.

.for a in ${ARGS}
run-regress-$a: $a
	@@echo '\n======== $@@ ========'
	time SUDO=${SUDO} KTRACE=${KTRACE} SYSLOGD=${SYSLOGD} perl ${PERLINC} ${PERLPATH}syslogd.pl ${PERLPATH}$a
.endfor

# create certificates for TLS

127.0.0.1.crt:
	openssl req -batch -new -subj /L=OpenBSD/O=syslogd-regress/OU=syslogd/CN=127.0.0.1/ -nodes -newkey rsa -keyout 127.0.0.1.key -x509 -out $@@
	${SUDO} rm -f /etc/ssl/private/127.0.0.1:6514.key
	${SUDO} rm -f /etc/ssl/127.0.0.1:6514.crt
	${SUDO} rm -f /etc/ssl/private/127.0.0.1.key
	${SUDO} rm -f /etc/ssl/127.0.0.1.crt
	${SUDO} cp 127.0.0.1.key /etc/ssl/private/127.0.0.1.key
	${SUDO} cp 127.0.0.1.crt /etc/ssl/127.0.0.1.crt
	${SUDO} cp 127.0.0.1.key /etc/ssl/private/::1.key
	${SUDO} cp 127.0.0.1.crt /etc/ssl/::1.crt
	${SUDO} cp 127.0.0.1.key /etc/ssl/private/localhost.key
	${SUDO} cp 127.0.0.1.crt /etc/ssl/localhost.crt

ca.crt fake-ca.crt:
	openssl req -batch -new -subj /L=OpenBSD/O=syslogd-regress/OU=ca/CN=root/ -nodes -newkey rsa -keyout ${@@:R}.key -x509 -out $@@

client.req server.req:
	openssl req -batch -new -subj /L=OpenBSD/O=syslogd-regress/OU=${@@:R}/CN=localhost/ -nodes -newkey rsa -keyout ${@@:R}.key -out $@@

client.crt server.crt: ca.crt ${@@:R}.req
	openssl x509 -CAcreateserial -CAkey ca.key -CA ca.crt -req -in ${@@:R}.req -out $@@

empty:
	true >$@@

toobig:
	dd if=/dev/zero of=$@@ bs=1 count=1 seek=50M

sys/syscall.ph: /usr/include/sys/syscall.h
	cd /usr/include && h2ph -h -d ${.OBJDIR} ${@@:R:S/$/.h/}

${REGRESS_TARGETS:M*tls*}: client.crt server.crt 127.0.0.1.crt
${REGRESS_TARGETS:M*multilisten*}: 127.0.0.1.crt
${REGRESS_TARGETS:M*empty*}: empty
${REGRESS_TARGETS:M*toobig*}: toobig
${REGRESS_TARGETS:M*fake*}: fake-ca.crt
${REGRESS_TARGETS:M*sendsyslog*}: sys/syscall.ph
${REGRESS_TARGETS}: ttylog

# make perl syntax check for all args files

.PHONY: syntax libevent

syntax: stamp-syntax

stamp-syntax: ${ARGS}
.for a in ${ARGS}
	@@perl -c ${PERLPATH}$a
.endfor
	@@date >$@@

# run the tests with all variants of libevent backend
libevent:
	cd ${.CURDIR} && EVENT_NOKQUEUE=1 EVENT_NOPOLL=1 ${MAKE} regress
	cd ${.CURDIR} && EVENT_NOKQUEUE=1 EVENT_NOSELECT=1 ${MAKE} regress
	cd ${.CURDIR} && EVENT_NOPOLL=1 EVENT_NOSELECT=1 ${MAKE} regress

.include <bsd.regress.mk>
@


1.18
log
@Create the sys/syscall.ph header file on demand for the sendsyslog(2)
tests since Perl headers are not installed by default anymore.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.17 2016/09/02 21:30:34 bluhm Exp $
d108 1
@


1.17
log
@Print SKIPPED if a regress test cannot be executed for some reason.
This allows to identify such tests by looking at their output.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.16 2016/08/23 21:20:05 bluhm Exp $
d39 1
a39 1
CLEANFILES +=		*.out *.sock *.ktrace *.fstat ttylog
d104 3
d111 1
@


1.16
log
@Some syslogd tests failed to report errors.  Make these tests more
strict and adapt the check patterns.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.15 2016/07/12 09:57:20 bluhm Exp $
d25 1
@


1.15
log
@Add regression tests for syslogd TLS client certificates.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.14 2015/11/04 20:02:26 bluhm Exp $
d39 1
a39 1
CLEANFILES +=		*.pem *.req *.crt *.key *.srl empty toobig
d77 9
a85 2
	${SUDO} cp 127.0.0.1.crt /etc/ssl/
	${SUDO} cp 127.0.0.1.key /etc/ssl/private/
a86 3
	${SUDO} cp 127.0.0.1.key /etc/ssl/private/localhost.key
	${SUDO} cp 127.0.0.1.crt /etc/ssl/::1.crt
	${SUDO} cp 127.0.0.1.key /etc/ssl/private/::1.key
@


1.14
log
@Generating the self-signed syslogd test certificate does not depend
on the CA certificate.  Found by Jan Klemkow.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.13 2015/10/19 20:16:09 bluhm Exp $
d87 2
a88 2
server.req:
	openssl req -batch -new -subj /L=OpenBSD/O=syslogd-regress/OU=server/CN=localhost/ -nodes -newkey rsa -keyout ${@@:R}.key -out $@@
d90 1
a90 1
server.crt: ca.crt server.req
d99 1
a99 1
${REGRESS_TARGETS:M*tls*}: server.crt 127.0.0.1.crt
@


1.13
log
@Test syslogd logging to a tty which belongs to a user.  This is
done with a utmp entry for a pty fake login.  All messages are read
from the pty and written into a log file.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.12 2015/10/09 17:07:06 bluhm Exp $
d75 1
a75 1
127.0.0.1.crt: ca.crt
@


1.12
log
@Add tests for syslogd TLS accept and receive encrypted messages.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.11 2015/09/11 22:01:06 bluhm Exp $
d36 1
d38 1
a38 1
CLEANFILES +=		*.out *.sock *.ktrace *.fstat
d103 1
@


1.11
log
@Adapt test to 50MB CAfile limit.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.10 2015/07/09 21:12:44 bluhm Exp $
d74 9
d98 1
a98 1
${REGRESS_TARGETS:M*tls*}: server.crt
@


1.10
log
@Test syslogd with reduced file descriptor limit.  It has too many
log files in syslog.conf and must close and reopen them at SIGHUP.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.9 2015/06/15 21:44:57 bluhm Exp $
d87 1
a87 1
	dd if=/dev/zero of=$@@ bs=1 count=1 seek=1G
@


1.9
log
@Rework how fstat and ktrace pattern are specified in the test
arguments.  Add tests to check wether syslogd privsep works.  This
is done for debug and foreground and daemon mode.  Fstat is checked
for chroot and sockets.  Ktrace dump is grepped for setting uid and
gid.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.8 2015/01/28 19:23:22 bluhm Exp $
d7 1
d19 1
@


1.8
log
@Test the x509 certificate validation of syslog over TLS.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.7 2014/12/31 01:25:07 bluhm Exp $
d44 1
@


1.7
log
@Create CA and certificates for TLS tests consistently.  Better
logging of SSL errors.  Do not import unneeded Socket constants.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.6 2014/12/28 14:08:01 bluhm Exp $
d36 1
a36 1
CLEANFILES +=		*.pem *.req *.crt *.key *.srl
d71 2
a72 2
ca.crt:
	openssl req -batch -new -subj /L=OpenBSD/O=syslogd-regress/OU=ca/CN=root/ -nodes -newkey rsa -keyout ca.key -x509 -out ca.crt
d75 1
a75 1
	openssl req -batch -new -subj /L=OpenBSD/O=syslogd-regress/OU=server/CN=localhost/ -nodes -newkey rsa -keyout server.key -out server.req
d78 7
a84 1
	openssl x509 -CAcreateserial -CAkey ca.key -CA ca.crt -req -in server.req -out server.crt
d87 3
@


1.6
log
@Add regression tests where OpenBSD syslogd is sending messages to
rsyslogd from ports.  If the rsyslog package is installed, rsyslogd
is used as drain to test interoperability.  This will be especially
useful for syslog via TCP and TLS.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.5 2014/09/13 23:38:24 bluhm Exp $
d34 3
a36 2
CLEANFILES +=		*.log *.log.? *.pem *.crt *.key *.conf stamp-*
CLEANFILES +=		*.out *.sock ktrace.out *.ktrace *.fstat
d69 1
a69 1
# create the certificates for SSL
d71 2
a72 4
127.0.0.1.crt:
	openssl req -batch -new -nodes -newkey rsa -keyout 127.0.0.1.key -subj /CN=127.0.0.1/ -x509 -out $@@
	${SUDO} cp 127.0.0.1.crt /etc/ssl/
	${SUDO} cp 127.0.0.1.key /etc/ssl/private/
d74 2
a75 2
server-cert.pem:
	openssl req -batch -new -nodes -newkey rsa -keyout server-key.pem -subj /CN=localhost/ -x509 -out $@@
d77 4
a80 2
${REGRESS_TARGETS:M*ssl*} ${REGRESS_TARGETS:M*https*}: server-cert.pem
${REGRESS_TARGETS:M*ssl*} ${REGRESS_TARGETS:M*https*}: 127.0.0.1.crt
@


1.5
log
@Add tests for syslogd's memory buffer and read it with syslogc.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.4 2014/09/03 15:56:07 bluhm Exp $
d8 3
d28 1
d30 3
d34 2
a35 2
CLEANFILES +=		*.log *.log.? *.pem *.crt *.key syslogd.conf stamp-*
CLEANFILES +=		*.sock ktrace.out *.ktrace *.fstat
@


1.4
log
@Add tests that send log messages via unix domain sockets to syslogd.
Also check that the maximum number of -a path is handled correctly.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.3 2014/09/02 00:26:30 bluhm Exp $
d28 1
a28 1
CLEANFILES +=		unix.* ktrace.out *.ktrace *.fstat
@


1.3
log
@Add tests that run the syslogd signal handlers.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.2 2014/08/29 21:55:55 bluhm Exp $
d28 1
a28 1
CLEANFILES +=		ktrace.out *.ktrace *.fstat
@


1.2
log
@Prepare for testing libevent in syslogd.  Pass the EVENT_NO...
environment variables over sudo into syslogd.  Run the tests with
the select(2) and poll(2) and kqueue(2) backend.  Call "make libevent"
for these tests.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.1.1.1 2014/08/20 20:52:14 bluhm Exp $
d27 1
a27 1
CLEANFILES +=		*.log *.pem *.crt *.key syslogd.conf stamp-*
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
#	$OpenBSD$
d76 1
a76 1
.PHONY: syntax
d85 6
@


1.1.1.1
log
@Run syslogd regressions tests.  As only one syslogd can run per
machine, each test kills any syslogd first.  At the end the system's
syslogd gets restarted.
The test framework runs a client, and a server, and a syslogd.  The
messages are passed via the log socket or via UDP from the client
to syslogd.  From there UDP transport is used to reach the server.
All processes write log files where the message has to show up.
The test arguments are kept in the args-*.pl files.
The content of a log file, the data sent to a pipe process and what
the server received are checked.  The invocation of the sendsyslog(2)
syscall is checked with ktrace, the open file descriptors of syslogd
are checked with fstat.
@
text
@@
