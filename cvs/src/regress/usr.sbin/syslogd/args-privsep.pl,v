head	1.3;
access;
symbols
	OPENBSD_6_0:1.1.0.6
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.2
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.4
	OPENBSD_5_8_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2016.10.12.23.02.25;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	lQvKQgxwHYb3L6Um;

1.2
date	2016.10.06.13.06.14;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	SvZFLcp8z1QgdkQR;

1.1
date	2015.06.15.21.44.57;	author bluhm;	state Exp;
branches;
next	;
commitid	BmPbwQg6idYgxXrC;


desc
@@


1.3
log
@Fix races during syslogd startup and shutdown in privsep tests.
@
text
@# The client writes a message to Sys::Syslog native method.
# The syslogd writes it into a file and through a pipe.
# The syslogd passes it via UDP to the loghost.
# The server receives the message on its UDP socket.
# Find the message in client, file, syslogd, server log.
# Check fstat for the parent and child process.
# Check ktrace for setting the correct uid and gid and exec priv.

use strict;
use warnings;

our %args = (
    syslogd => {
	up => qr/fork\+exec done/,
	nopipe => 1,
	noconsole => 1,
	nouser => 1,
	loggrep => {
	    qr/ -F / => 0,
	    qr/ -d / => 1,
	    qr/\[priv\]: fork\+exec done/ => 1,
	},
	fstat => {
	    qr/^root .* wd / => 1,
	    qr/^root .* root / => 0,
	    qr/^root .* kqueue / => 0,
	    qr/^root .* internet/ => 0,
	    qr/^root .* 3\* unix stream/ => 1,
	    qr/^root +syslogd +\d+ +([4-9]|\d\d)/ => 0,
	    qr/^_syslogd .* wd / => 1,
	    qr/^_syslogd .* root / => 1,
	    qr/^_syslogd .* kqueue / => 1,
	    qr/^_syslogd .* internet/ => 2,
	},
	ktrace => {
	    qr/syslogd  CALL  setresuid(.*"_syslogd".*){3}/ => 1,
	    qr/syslogd  CALL  setresgid(.*"_syslogd".*){3}/ => 1,
	    qr/syslogd  CALL  setsid/ => 0,
	    qr/syslogd  RET   execve 0/ => 2,
	    qr/\[\d\] = "-P"/ => 1,
	},
    },
    pipe => { nocheck => 1 },
    tty => { nocheck => 1 },
);

1;
@


1.2
log
@Check that syslogd priv process does exec on itself.
@
text
@d5 1
a5 1
# Find the message in client, file, pipe, syslogd, server log.
d15 3
d36 2
a37 2
	    qr/syslogd  CALL  setresuid(.*"_syslogd".*){3}/ => 2,
	    qr/syslogd  CALL  setresgid(.*"_syslogd".*){3}/ => 2,
d43 2
@


1.1
log
@Rework how fstat and ktrace pattern are specified in the test
arguments.  Add tests to check wether syslogd privsep works.  This
is done for debug and foreground and daemon mode.  Fstat is checked
for chroot and sockets.  Ktrace dump is grepped for setting uid and
gid.
@
text
@d7 1
a7 1
# Check ktrace for setting the correct uid and gid.
d14 1
d18 1
d25 2
d33 5
a37 3
	    qr/CALL  setresuid(.*"_syslogd".*){3}/ => 2,
	    qr/CALL  setresgid(.*"_syslogd".*){3}/ => 2,
	    qr/CALL  setsid/ => 0,
@

