head	1.3;
access;
symbols
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.8
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.4
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3;
locks; strict;
comment	@# @;


1.3
date	2015.10.31.19.46.33;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	oHU8XrjzoSgsrskw;

1.2
date	2015.10.19.20.16.09;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	kVDnyxLzqDFKPFoO;

1.1
date	2015.09.09.10.59.26;	author bluhm;	state Exp;
branches;
next	;
commitid	3mSXxNwr3vtRORHa;


desc
@@


1.3
log
@As syslog(3) in libc no longer inserts the timestamp, the maximum
message length that may be generated by syslogd got longer.  Adapt
the test.
@
text
@# The client writes a long message to Sys::Syslog native method.
# The syslogd writes it into a file and through a pipe.
# The syslogd passes it via TCP to the loghost.
# The server receives the message on its TCP socket.
# Find the message in client, file, syslogd, server log.
# Check that 8192 bytes messages can be processed.

use strict;
use warnings;
use Socket;
use Sys::Hostname;
use constant MAXLINE => 8192;

(my $host = hostname()) =~ s/\..*//;
my $time = "... .. ..:..:..";  # Oct 30 19:10:11
# file entry is without <70> but with space, timestamp and hostname
my $filelen = MAXLINE - 4 + length($time) + 1 + length($host) + 1;

our %args = (
    client => {
	logsock => { type => "native" },
	func => sub {
	    my $self = shift;
	    write_chars($self, MAXLINE);
	    write_shutdown($self);
	},
	loggrep => { get_charlog() => 1 },
    },
    syslogd => {
	loghost => '@@tcp://localhost:$connectport',
	loggrep => {
	    qr/[gs]etsockopt bufsize/ => 0,
	    get_charlog() => 1,
	},
    },
    server => {
	listen => { domain => AF_UNSPEC, proto => "tcp", addr => "localhost" },
	# syslog over TCP appends a \n
	loggrep => { qr/^>>> 8209 <70>$time .{8188}\n/ => 1 },
    },
    file => {
	loggrep => { qr/^.{$filelen}\n/ => 1 },
    },
    pipe => { nocheck => 1 },
    tty => { nocheck => 1 },
);

1;
@


1.2
log
@Test syslogd logging to a tty which belongs to a user.  This is
done with a utmp entry for a pty fake login.  All messages are read
from the pty and written into a log file.
@
text
@d15 3
a17 2
# file entry is without <70> but with space and hostname
my $filelen = MAXLINE - 4 + 1 + length($host);
d39 1
a39 1
	loggrep => { qr/^>>> 8193 .{8192}\n/ => 1 },
@


1.1
log
@Add args-bufsize-native.pl that checks wether libc syslog(3) can
handle 8192 bytes messages.  Rename the sendsyslog(2) tests
consistently.
@
text
@a39 3
    pipe => {
	nocheck => 1,
    },
d43 2
@

