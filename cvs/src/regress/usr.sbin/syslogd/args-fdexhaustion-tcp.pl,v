head	1.5;
access;
symbols
	OPENBSD_6_1:1.4.0.8
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.4
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.2.0.4
	OPENBSD_5_8_BASE:1.2;
locks; strict;
comment	@# @;


1.5
date	2017.04.05.22.32.14;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	7DBpdoIApLnFWBfl;

1.4
date	2015.12.30.13.15.52;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	A5ZwhsoQcJtCsd2c;

1.3
date	2015.10.19.20.16.09;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	kVDnyxLzqDFKPFoO;

1.2
date	2015.08.01.14.55.58;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	mKDhz3mFTSL2PZNi;

1.1
date	2015.07.20.18.03.47;	author bluhm;	state Exp;
branches;
next	;
commitid	UMQJWarz6dTElOqi;


desc
@@


1.5
log
@Syslogd's debug and error messages have changed a bit, adapt test.
@
text
@# The syslogd is started with reduced file descriptor limits.
# The syslogd config contains more log files than possible.
# The client connects to the 127.0.0.1 TCP socket, but is not accepted.
# Check the error messages and that syslogd tries to listen again.

use strict;
use warnings;
use Socket;

our %args = (
    client => {
	connect => { domain => AF_INET, proto => "tcp", addr => "127.0.0.1",
	    port => 514 },
	logsock => { type => "tcp", host => "127.0.0.1", port => 514 },
	func => sub {
	    my $self = shift;
	    ${$self->{syslogd}}->loggrep("Listen again", 5);
	    write_log($self);
	},
    },
    syslogd => {
	options => ["-T", "127.0.0.1:514"],
	conf => join("", map { "*.*\t\$objdir/file-$_.log\n" } 0..19),
	rlimit => {
	    RLIMIT_NOFILE => 30,
	},
	loggrep => {
	    qr/syslogd: receive_fd: recvmsg: Message too long/ => 6,
	    # One file is opened by test default config, 20 by multifile.
	    qr/X FILE:/ => 1+14,
	    qr/X UNUSED:/ => 6,
	    qr/Accepting tcp connection/ => 0,
	    qr/Listen again/ => '>=1',
	},
    },
    server => {
	loggrep => { get_testlog() => 0 },
    },
    multifile => [
	(map { { loggrep => qr/syslogd\[\d+\]: accept deferred/ } } 0..13),
	(map { { loggrep => { qr/./s => 0 } } } 14..19),
    ],
    file => {
	loggrep => qr/syslogd\[\d+\]: accept deferred: Too many open files/,
    },
    pipe => { nocheck => 1 },
    tty => { nocheck => 1 },
);

1;
@


1.4
log
@Test logging to console by redirecting the system's console into a
file.  All subtests get an additional /dev/console entry in
syslog.conf, then check that messages appear in the console file.
Add a test that stops syslogd, calls sendsyslog2() with LOG_CONS
and checks that the message appears in the console file.
@
text
@d40 1
a40 1
	(map { { loggrep => qr/syslogd: accept deferred/ } } 0..13),
d44 1
a44 1
	loggrep => qr/syslogd: accept deferred: Too many open files/,
@


1.3
log
@Test syslogd logging to a tty which belongs to a user.  This is
done with a utmp entry for a pty fake login.  All messages are read
from the pty and written into a log file.
@
text
@d28 1
a28 1
	    qr/syslogd: receive_fd: recvmsg: Message too long/ => 5,
d30 2
a31 2
	    qr/X FILE:/ => 1+15,
	    qr/X UNUSED:/ => 5,
d40 2
a41 2
	(map { { loggrep => qr/syslogd: accept deferred/ } } 0..14),
	(map { { loggrep => { qr/./s => 0 } } } 15..19),
@


1.2
log
@Use Socket to make Perl syntax check of single test files pass.
@
text
@d46 2
a47 1
    pipe => { loggrep => {} },
@


1.1
log
@Test what happens when syslogd reaches its file descriptor limit
and cannot accept TCP connections anymore.
@
text
@d8 1
@

