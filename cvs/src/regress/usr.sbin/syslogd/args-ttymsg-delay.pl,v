head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.6
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.2
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3;
locks; strict;
comment	@# @;


1.4
date	2016.06.22.19.29.30;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	205RoY6eR747zlNS;

1.3
date	2015.12.30.13.15.52;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	A5ZwhsoQcJtCsd2c;

1.2
date	2015.12.04.13.49.42;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	Png8GPl0MIbEHtve;

1.1
date	2015.10.23.14.06.55;	author bluhm;	state Exp;
branches;
next	;
commitid	zdQFfTKt14DNTjQ1;


desc
@@


1.4
log
@Syslogd can send messages to a user, test what happens if the
terminal is blocking to receive messages.  Stop the fake user
terminal and look for a delayed write debug message from syslogd.
This makes the test more reliable.
@
text
@# The client writes long messages while ttylog to user has been stopped.
# The syslogd writes it into a file and through a pipe and to tty.
# The syslogd passes it via UDP to the loghost.
# The server receives the message on its UDP socket.
# Find the message in client, file, pipe, user, syslogd, server log.
# Check that syslogd has logged that the user's tty blocked.

use strict;
use warnings;
use Sys::Syslog qw(:macros);

our %args = (
    client => {
	func => sub {
	    my $self = shift;
	    ${$self->{syslogd}}->ttykill("user", 'STOP');
	    write_lines($self, 9, 900);
	    ${$self->{syslogd}}->loggrep(qr/ttymsg delayed write/, 3);
	    ${$self->{syslogd}}->ttykill("user", 'CONT');
	    write_log($self);
	},
    },
    syslogd => {
	loggrep => {
	    qr/ttymsg delayed write/ => '>=1',
	},
    },
    user => {
	loggrep => {
	    qr/ 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ.* [12]/ => 2,
	    get_testgrep() => 1,
	},
    },
);

1;
@


1.3
log
@Test logging to console by redirecting the system's console into a
file.  All subtests get an additional /dev/console entry in
syslog.conf, then check that messages appear in the console file.
Add a test that stops syslogd, calls sendsyslog2() with LOG_CONS
and checks that the message appears in the console file.
@
text
@d1 1
a1 1
# The client writes long messages to Sys::Syslog native method.
d16 4
a19 1
	    write_lines($self, 5, 900);
d30 1
a30 1
	    qr/ 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ.* [12]$/ => 2,
@


1.2
log
@Add tests that call the syscalls sendsyslog(2) and sendsyslog2(2)
directly.
@
text
@d5 2
a6 2
# Find the message in client, file, pipe, tty, syslogd, server log.
# Check that syslogd has logged that the tty blocked.
d25 1
a25 1
    tty => {
@


1.1
log
@Check that syslogd delays a blocking write to tty and that that all
messages still appear on the tty.
@
text
@d16 1
a16 1
	    write_lines($self, 2, 900);
@

