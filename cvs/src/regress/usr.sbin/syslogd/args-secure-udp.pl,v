head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.4
	OPENBSD_6_2_BASE:1.3;
locks; strict;
comment	@# @;


1.3
date	2017.09.13.00.35.53;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	bWWbEvUtwVmoTxtA;

1.2
date	2017.09.12.15.24.21;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	fQcw2c9T4xGELf8r;

1.1
date	2017.04.29.01.57.04;	author bluhm;	state Exp;
branches;
next	;
commitid	y4KFTW7xSZz3TtGT;


desc
@@


1.3
log
@Check that the hostname added by syslogd -h in file and server log
is correct.  Use generic redo functions.  Do syntax check for all
Perl files.
@
text
@# The client writes messages to localhost IPv4 and IPv6 UDP socket.
# The syslogd does not receive them as it is started without -u.
# Keep the sockets open by pretending to write to them.
# Check that client does send the message, but it is not in the file.
# Check with fstat that both *:514 sockets are bound.
# Check that there is no recvfrom localhost in syslogd ktrace.

use strict;
use warnings;
use Socket;

our %args = (
    client => {
	connectaddr => "none",
	redo => [
	    { connect => {
		domain => AF_INET,
		addr   => "127.0.0.1",
		proto  => "udp",
		port   => "514",
	    }},
	    { connect => {
		domain => AF_INET,
		addr   => "127.0.0.1",
		proto  => "udp",
		port   => "514",
	    }},
	    { connect => {
		domain => AF_INET6,
		addr   => "::1",
		proto  => "udp",
		port   => "514",
	    }},
	],
	func => sub { redo_connect(shift, sub {
	    my $self = shift;
	    write_message($self, "client addr: ". $self->{connectaddr});
	})},
	loggrep => {
	    qr/client addr:/ => 4,
	    get_testgrep() => 1,
	}
    },
    syslogd => {
	options => [],
	loghost => "/dev/null",
	conf =>
	    "*.*\t\@@udp4://0.0.0.0:0\n".
	    "*.*\t\@@udp6://[::]:0\n",
	fstat => {
	    qr/^_syslogd syslogd .* internet6? dgram udp \*:514$/ => 2,
	},
	ktrace => {
	    qr/127\.0\.0\.1/ => 0,
	    qr/\[::1\]/ => 0,
	},
    },
    server => {
	noserver => 1,
    },
    file => {
	loggrep => {
	    qr/client addr: none/ => 1,
	    qr/client addr:/ => 1,
	    get_testgrep() => 1,
	}
    },
);

1;
@


1.2
log
@Syslogd does no longer keep the *:514 UDP sockets open by default.
Adapt tests.
@
text
@d16 1
a16 1
	    {
d19 4
a22 2
	    },
	    {
d25 4
a28 2
	    },
	    {
d31 3
a33 1
	    },
d35 1
a35 1
	func => sub {
d38 1
a38 21
	    if ($self->{cs}) {
		# wait for possible icmp errors, port is open
		sleep .1;
		close($self->{cs})
		    or die ref($self), " close failed: $!";
	    };
	    if (my $connect = shift @@{$self->{redo}}) {
		$self->{connectdomain} = $connect->{domain};
		$self->{connectaddr}   = $connect->{addr};
		$self->{connectproto}  = "udp";
		$self->{connectport}   = "514";
	    } else {
		delete $self->{connectdomain};
		$self->{logsock} = { type => "native" };
		setlogsock($self->{logsock})
		    or die ref($self), " setlogsock failed: $!";
		sleep .1;
		write_log($self);
		undef $self->{redo};
	    }
	},
@


1.1
log
@Test that suslogd's UDP sockets bound to *.514 do not receive packets
if the -u insecure mode is not selected.
@
text
@d3 1
d61 3
@

