head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.8
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.2.0.10
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.6
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.4
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.1.0.4
	OPENBSD_5_7_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2015.07.16.16.34.49;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	0M9ba2ikkjyPND6j;

1.1
date	2014.09.13.23.38.24;	author bluhm;	state Exp;
branches;
next	;
commitid	8abA8sLPTwAOrtQB;


desc
@@


1.2
log
@Test that syslogd does not append white spaces to messages.  Per
default the test pattern is stricter now.  Also do some test cleanup
@
text
@# The client writes a message to Sys::Syslog native method.
# The syslogd writes it into a file and through a pipe.
# The syslogd passes it via UDP to the loghost.
# The server receives the message on its UDP socket.
# Syslogc reads and clears the memory logs.
# Find the message in client, file, pipe, syslogd, server, syslogc log.
# Check that memory buffer has been cleared.

use strict;
use warnings;

our %args = (
    syslogd => {
	memory => 1,
	loggrep => {
	    qr/Accepting control connection/ => 2,
	    qr/ctlcmd 2/ => 1,
	    get_testgrep() => 1,
	},
    },
    syslogc => [ {
	options => ["-c", "memory"],
	down => get_downlog(),
    }, {
	options => ["memory"],
	loggrep => { get_testgrep() => 0 },
    } ],
);

1;
@


1.1
log
@Add tests for syslogd's memory buffer and read it with syslogc.
@
text
@d18 1
a18 1
	    get_testlog() => 1,
d26 1
a26 1
	loggrep => { get_testlog() => 0 },
@

