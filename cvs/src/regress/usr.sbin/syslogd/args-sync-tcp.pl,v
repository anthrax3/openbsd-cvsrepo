head	1.9;
access;
symbols
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.8.0.4
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5;
locks; strict;
comment	@# @;


1.9
date	2016.09.23.14.35.15;	author bluhm;	state Exp;
branches;
next	1.8;
commitid	JKJPtU8AKXFWhQjU;

1.8
date	2015.09.03.18.14.35;	author bluhm;	state Exp;
branches;
next	1.7;
commitid	GU2ZqWl3Jy7Gia9I;

1.7
date	2015.08.01.00.20.37;	author bluhm;	state Exp;
branches;
next	1.6;
commitid	N8N6d5Kyrs3jZT9B;

1.6
date	2015.07.19.20.18.18;	author bluhm;	state Exp;
branches;
next	1.5;
commitid	3V6wL7hT2XianIlr;

1.5
date	2015.02.25.22.33.38;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	eW5Q0EpT5bjnSjHi;

1.4
date	2015.02.13.21.40.50;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	tZ8vhc9XWQ8KWPvp;

1.3
date	2015.02.12.23.16.02;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	trL3czROWP2b0HA5;

1.2
date	2015.02.11.17.28.42;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	hkdmk7KSUJ4UFi47;

1.1
date	2015.02.08.15.24.14;	author bluhm;	state Exp;
branches;
next	;
commitid	mltz6ku0toaoDiSH;


desc
@@


1.9
log
@The TCP socket buffer size for syslogd has changed.  Adapt tests
where we count the dropped messages.  A different number gets stuck
in the kernel buffers now which is not included in the syslogd
statistics.
@
text
@# The client writes 300 long messages to UDP socket.
# The syslogd writes it into a file and through a pipe.
# The syslogd does a TCP reconnect and passes it to loghost.
# The server blocks the message on its TCP socket.
# The server waits until the client has written all messages.
# The server closes the TCP connection and accepts a new one.
# The server receives the messages on its new accepted TCP socket.
# This way the server receives a block of messages that is truncated
# at the beginning and at the end.
# Find the message in client, file, pipe, syslogd, server log.
# Check that the server does not get lines that are cut in the middle.

use strict;
use warnings;
use Socket;

our %args = (
    client => {
	connect => { domain => AF_UNSPEC, addr => "localhost", port => 514 },
	func => sub { write_between2logs(shift, sub {
	    my $self = shift;
	    write_message($self, get_secondlog());
	    write_lines($self, 300, 2000);
	    write_message($self, get_thirdlog());
	    ${$self->{server}}->loggrep("Accepted", 5, 2)
		or die ref($self), " server did not accept second connection";
	    ${$self->{syslogd}}->loggrep(qr/syslogd: dropped \d+ messages?/, 5)
		or die ref($self), " syslogd did not write dropped message";
	})},
    },
    syslogd => {
	options => ["-u"],
	loghost => '@@tcp://127.0.0.1:$connectport',
	loggrep => {
	    get_between2loggrep(),
	    get_charlog() => 300,
	    qr/loghost .* dropped partial message/ => 1,
	},
    },
    server => {
	listen => { domain => AF_INET, proto => "tcp", addr => "127.0.0.1" },
	rcvbuf => 2**12,
	redo => 0,
	func => sub { read_between2logs(shift, sub {
	    my $self = shift;
	    if ($self->{redo}) {
		$self->{redo}--;
		return;
	    }
	    # read slowly to get output buffer out of sync
	    foreach (1..10) {
		print STDERR ">>> ". scalar <STDIN>;
		sleep 1;
		last if ${$self->{syslogd}}->loggrep(get_thirdlog());
	    }
	    ${$self->{syslogd}}->loggrep(get_thirdlog(), 30)
		or die ref($self), " syslogd did not receive third log";
	    shutdown(\*STDOUT, 1)
		or die "shutdown write failed: $!";
	    $self->{redo}++;
	})},
	loggrep => {
	    qr/Accepted/ => 2,
	    get_between2loggrep(),
	    get_thirdlog() => 0,
	},
    },
    file => {
	loggrep => {
	    get_between2loggrep(),
	    get_secondlog() => 1,
	    get_thirdlog() => 1,
	    get_charlog() => 300,
	},
    },
);

1;
@


1.8
log
@Add test for sendsyslog(2) dropped message reporting.
@
text
@d42 1
@


1.7
log
@Make syslogd tests more reliable.  Allow TLS tests to drop a wider
rage of messages and make dropped regexes more specific.
@
text
@d26 3
a28 3
		or die ref($self), " server did not receive second log";
	    ${$self->{syslogd}}->loggrep(qr/syslogd: dropped \d+ messages/, 5)
		or die ref($self), " syslogd did not log dropped messages";
@


1.6
log
@Test octet counting and non transparent framing.
@
text
@d27 1
a27 1
	    ${$self->{syslogd}}->loggrep(qr/dropped \d+ messages/, 5)
d37 1
a37 1
	    qr/dropped partial message/ => 1,
@


1.5
log
@Do not count the dropped messages strictly, so that the syslogd
tests are depending less on the timing.  Fix a race in the buffer
sync test.  Now make regress of syslogd passes on my amd64, i386,
sparc64, alpha machines.
@
text
@d49 7
a55 1
	    ${$self->{syslogd}}->loggrep(get_thirdlog(), 40)
a63 1
	    get_secondlog() => 0,
a64 1
	    qr/>>> [0-9A-Za-z]{10}/ => 0,
@


1.4
log
@Adapt the maxunix test, the syslogd -a error semantic has changed.
Increase timeouts and remove races, so that the syslogd tests pass
on my sparc64 machine.
@
text
@d27 2
@


1.3
log
@Make syslogd tests more reliable.  Increase the allowed range of
lost log messages.  Improve the synchronisation of client and server.
@
text
@d23 1
a23 1
	    write_lines($self, 300, 3000);
d47 1
a47 1
	    ${$self->{syslogd}}->loggrep(get_thirdlog(), 20)
@


1.2
log
@Make syslogd test more reliable.  Use Time::HiRes to sleep .01
seconds in the write_lines() loop.  This slows down the client, so
all messages reach syslogd and flood its buffers.  Increase the
timeout to wait until all buffers are full.  Use this code in all
TCP/TLS buffer and memory overflow tests.
@
text
@d47 2
a48 2
	    ${$self->{client}}->loggrep(get_thirdlog(), 20)
		or die ref($self), " client did not send third log";
@


1.1
log
@Change syslog tests from transparent framing to octet counting.
Add tests for truncated buffer handling.
@
text
@d47 1
a47 1
	    ${$self->{client}}->loggrep(get_thirdlog(), 5)
@

