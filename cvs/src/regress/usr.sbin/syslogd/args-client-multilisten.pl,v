head	1.4;
access;
symbols
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.1.0.4
	OPENBSD_6_1_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2017.09.13.00.35.53;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	bWWbEvUtwVmoTxtA;

1.3
date	2017.06.08.14.38.35;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	b1pJoJX24Zr3rEkE;

1.2
date	2017.04.25.17.49.11;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	W2m3x8i5mJdezWrj;

1.1
date	2017.01.02.16.58.28;	author bluhm;	state Exp;
branches;
next	;
commitid	Mg6YsjHbSgff7PNA;


desc
@@


1.4
log
@Check that the hostname added by syslogd -h in file and server log
is correct.  Use generic redo functions.  Do syntax check for all
Perl files.
@
text
@# The syslogd binds multiple UDP, TCP, TLS sockets on localhost.
# The client writes messages into a all localhost sockets.
# The syslogd writes it into a file and through a pipe.
# The syslogd passes it via UDP to the loghost.
# The server receives the messages on its UDP socket.
# Find the messages in client, file, syslogd log.
# Check that fstat contains all bound sockets.
# Check that the file log contains all messages.
# Check that client used expected protocol.

use strict;
use warnings;
use Socket;

our %args = (
    client => {
	connectproto => "none",
	redo => [
	    { connect => {
		proto  => "udp",
		domain => AF_INET,
		addr   => "127.0.0.1",
		port   => 514,
	    }},
	    { connect => {
		proto  => "udp",
		domain => AF_INET,
		addr   => "127.0.0.1",
		port   => 513,
	    }},
	    { connect => {
		proto  => "udp",
		domain => AF_INET6,
		addr   => "::1",
		port   => 514,
	    }},
	    { connect => {
		proto  => "tcp",
		domain => AF_INET,
		addr   => "127.0.0.1",
		port   => 514,
	    }},
	    { connect => {
		proto  => "tcp",
		domain => AF_INET6,
		addr   => "::1",
		port   => 513,
	    }},
	    { connect => {
		proto  => "tcp",
		domain => AF_INET6,
		addr   => "::1",
		port   => 514,
	    }},
	    { connect => {
		proto  => "tls",
		domain => AF_INET6,
		addr   => "::1",
		port   => 6514,
	    }},
	    { connect => {
		proto  => "tls",
		domain => AF_INET,
		addr   => "127.0.0.1",
		port   => 6514,
	    }},
	    { connect => {
		proto  => "tls",
		domain => AF_INET,
		addr   => "127.0.0.1",
		port   => 6515,
	    }},
	],
	func => sub { redo_connect(shift, sub {
	    my $self = shift;
	    write_message($self, "client proto: ". $self->{connectproto});
	})},
	loggrep => {
	    qr/connect sock: (127.0.0.1|::1) \d+/ => 9,
	    get_testgrep() => 1,
	},
    },
    syslogd => {
	options => [qw(-rr
	    -U 127.0.0.1 -U [::1] -U 127.0.0.1:513
	    -T 127.0.0.1:514 -T [::1]:514 -T [::1]:513
	    -S [::1]:6514 -S 127.0.0.1 -S 127.0.0.1:6515
	)],
	fstat => {
	    qr/ internet6? dgram udp (127.0.0.1):513$/ => 1,
	    qr/ internet6? dgram udp (127.0.0.1):514$/ => 1,
	    qr/ internet6? dgram udp (\[::1\]):514$/ => 1,
	    qr/ internet6? stream tcp \w+ (127.0.0.1):514$/ => 1,
	    qr/ internet6? stream tcp \w+ (\[::1\]):513$/ => 1,
	    qr/ internet6? stream tcp \w+ (\[::1\]):514$/ => 1,
	    qr/ internet6? stream tcp \w+ (\[::1\]):6514$/ => 1,
	    qr/ internet6? stream tcp \w+ (127.0.0.1):6514$/ => 1,
	    qr/ internet6? stream tcp \w+ (127.0.0.1):6515$/ => 1,
	},
    },
    file => {
	loggrep => {
	    qr/client proto: udp/ => '>=1',
	    qr/client proto: tcp/ => 3,
	    qr/client proto: tls/ => 3,
	    get_testgrep() => 1,
	}
    },
);

1;
@


1.3
log
@Start syslogd with -rr.  With different timing the order of messages
changed.  Then a "last message repeated" confused the test.
@
text
@d19 1
a19 1
	    {
d24 2
a25 2
	    },
	    {
d30 2
a31 2
	    },
	    {
d36 2
a37 2
	    },
	    {
d42 2
a43 2
	    },
	    {
d48 2
a49 2
	    },
	    {
d54 2
a55 2
	    },
	    {
d60 2
a61 2
	    },
	    {
d66 2
a67 2
	    },
	    {
d72 1
a72 1
	    },
d74 1
a74 1
	func => sub {
d77 1
a77 15
	    close($self->{cs}) if $self->{cs};
	    if (my $connect = shift @@{$self->{redo}}) {
		$self->{connectproto}  = $connect->{proto};
		$self->{connectdomain} = $connect->{domain};
		$self->{connectaddr}   = $connect->{addr};
		$self->{connectport}   = $connect->{port};
	    } else {
		delete $self->{connectdomain};
		$self->{logsock} = { type => "native" };
		setlogsock($self->{logsock})
		    or die ref($self), " setlogsock failed: $!";
		write_log($self);
		undef $self->{redo};
	    }
	},
@


1.2
log
@Test listening on multiple syslog over TLS sockets.
@
text
@d98 1
a98 1
	options => [qw(
@


1.1
log
@Test listening on multiple sockets simultaneously.
@
text
@d18 56
a75 44
	    $self->{redo} ||= [
		{
		    proto  => "udp",
		    domain => AF_INET,
		    addr   => "127.0.0.1",
		    port   => 514,
		},
		{
		    proto  => "udp",
		    domain => AF_INET,
		    addr   => "127.0.0.1",
		    port   => 513,
		},
		{
		    proto  => "udp",
		    domain => AF_INET6,
		    addr   => "::1",
		    port   => 514,
		},
		{
		    proto  => "tcp",
		    domain => AF_INET,
		    addr   => "127.0.0.1",
		    port   => 514,
		},
		{
		    proto  => "tcp",
		    domain => AF_INET6,
		    addr   => "::1",
		    port   => 513,
		},
		{
		    proto  => "tcp",
		    domain => AF_INET6,
		    addr   => "::1",
		    port   => 514,
		},
		{
		    proto  => "tls",
		    domain => AF_INET6,
		    addr   => "::1",
		    port   => 6514,
		},
	    ];
d93 1
a93 1
	    qr/connect sock: (127.0.0.1|::1) \d+/ => 7,
d101 1
a101 1
	    -S [::1]:6514
d110 3
a112 1
	    qr/ internet6? stream tcp \w+ (127.0.0.1|\[::1\]):6514$/ => 1,
d119 1
a119 1
	    qr/client proto: tls/ => 1,
@

