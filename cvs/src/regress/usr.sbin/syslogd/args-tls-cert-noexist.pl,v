head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.4
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.3.0.4
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.1.0.4
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.2
	OPENBSD_5_9_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2017.04.05.22.32.14;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	7DBpdoIApLnFWBfl;

1.3
date	2016.08.29.20.34.59;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	RhDxlTWZrkLnLRlL;

1.2
date	2016.08.23.21.20.05;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	iKBbEPLKGn1khYaL;

1.1
date	2015.10.23.22.50.09;	author bluhm;	state Exp;
branches;
next	;
commitid	inB7XIt9Qssg54Ua;


desc
@@


1.4
log
@Syslogd's debug and error messages have changed a bit, adapt test.
@
text
@# Syslogd gets no TLS server certificate.
# The client cannot connect to 127.0.0.1 TLS socket.
# Check that syslog log contains an error message.

use strict;
use warnings;
use Socket;

my $cert = "/etc/ssl/127.0.0.1.crt";
my @@sudo = $ENV{SUDO} ? $ENV{SUDO} : ();
my @@cmd = (@@sudo, "rm", "-f", "--", $cert);
system(@@cmd) and die "Command '@@cmd' failed: $?";
END {
    local $?;
    my @@cmd = (@@sudo, "cp", "--", "127.0.0.1.crt", $cert);
    system(@@cmd) and warn "Command '@@cmd' failed: $?";
}

our %args = (
    client => {
	func => sub {
	    my $self = shift;
	    IO::Socket::INET6->new(
		Domain              => AF_INET,
		Proto               => "tcp",
		PeerAddr            => "127.0.0.1",
		PeerPort            => 6514,
	    ) and die "tcp socket connect to 127.0.0.1:6514 succeeded";
	},
	nocheck => 1,
    },
    syslogd => {
	options => ["-S", "127.0.0.1:6514"],
	ktrace => {
	    qr{NAMI  "/etc/ssl/private/127.0.0.1:6514.key"} => 1,
	    qr{NAMI  "/etc/ssl/127.0.0.1:6514.crt"} => 0,
	    qr{NAMI  "/etc/ssl/private/127.0.0.1.key"} => 1,
	    qr{NAMI  "/etc/ssl/127.0.0.1.crt"} => 1,
	},
	loggrep => {
	    qr{Keyfile /etc/ssl/private/127.0.0.1.key} => 1,
	    qr{Certfile } => 0,
	    qr{load server TLS key: failed to open key file} => 1,
	    qr{load server TLS cert: failed to open certificate file} => 1,
	    qr{tls_configure server: private/public key mismatch} => 1,
	},
    },
    server => {
	noserver => 1,
    },
    file => { nocheck => 1 },
    pipe => { nocheck => 1 },
    tty => { nocheck => 1 },
);

1;
@


1.3
log
@Syslogd tls config error messages have changed, adapt tests.
@
text
@d43 3
a45 3
	    qr{syslogd: Load server TLS key failed} => 2,
	    qr{syslogd: Load server TLS cert failed} => 2,
	    qr{syslogd: tls_configure server} => 2,
@


1.2
log
@Some syslogd tests failed to report errors.  Make these tests more
strict and adapt the check patterns.
@
text
@d43 2
a44 2
	    qr{syslogd: tls_config_set_key_file} => 2,
	    qr{syslogd: tls_config_set_cert_file} => 2,
@


1.1
log
@Test syslogd with empty or non existing server certificates and
keys.
@
text
@d14 1
d36 1
a37 1
	    qr{NAMI  "/etc/ssl/127.0.0.1:6514.crt"} => 1,
d43 2
a44 1
	    qr{syslogd: open certfile: No such file or directory} => 2,
@

