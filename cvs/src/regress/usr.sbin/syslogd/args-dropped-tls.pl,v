head	1.10;
access;
symbols
	OPENBSD_6_1:1.10.0.2
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.9.0.4
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.8.0.4
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.6.0.4
	OPENBSD_5_7_BASE:1.6;
locks; strict;
comment	@# @;


1.10
date	2016.09.23.14.35.15;	author bluhm;	state Exp;
branches;
next	1.9;
commitid	JKJPtU8AKXFWhQjU;

1.9
date	2015.09.03.18.14.35;	author bluhm;	state Exp;
branches;
next	1.8;
commitid	GU2ZqWl3Jy7Gia9I;

1.8
date	2015.08.01.00.20.37;	author bluhm;	state Exp;
branches;
next	1.7;
commitid	N8N6d5Kyrs3jZT9B;

1.7
date	2015.07.18.22.44.13;	author bluhm;	state Exp;
branches;
next	1.6;
commitid	uIq1dZGqUBcpLPkz;

1.6
date	2015.02.25.22.33.38;	author bluhm;	state Exp;
branches;
next	1.5;
commitid	eW5Q0EpT5bjnSjHi;

1.5
date	2015.02.20.01.30.41;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	HOuXsLRktSDx7KPA;

1.4
date	2015.02.12.23.16.02;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	trL3czROWP2b0HA5;

1.3
date	2015.02.11.17.28.41;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	hkdmk7KSUJ4UFi47;

1.2
date	2015.02.08.15.24.14;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	mltz6ku0toaoDiSH;

1.1
date	2015.02.06.00.27.41;	author bluhm;	state Exp;
branches;
next	;
commitid	8et2usx9CGyR7b0D;


desc
@@


1.10
log
@The TCP socket buffer size for syslogd has changed.  Adapt tests
where we count the dropped messages.  A different number gets stuck
in the kernel buffers now which is not included in the syslogd
statistics.
@
text
@# The client writes 400 messages to Sys::Syslog native method.
# The syslogd writes it into a file and through a pipe.
# The syslogd passes it via TLS to the loghost.
# The server blocks the message on its TLS socket.
# The server waits until the client has written all messages.
# The server receives the message on its TLS socket.
# The client waits until the server as read the first message.
# Find the message in client, file, pipe, syslogd, server log.
# Check that the 400 messages are in syslogd and file log.
# Check that the dropped message is in server and file log.

use strict;
use warnings;
use Socket;

our %args = (
    client => {
	func => sub { write_between2logs(shift, sub {
	    my $self = shift;
	    write_message($self, get_secondlog());
	    write_lines($self, 400, 1024);
	    write_message($self, get_thirdlog());
	    ${$self->{server}}->loggrep(get_secondlog(), 5)
		or die ref($self), " server did not receive second log";
	    ${$self->{syslogd}}->loggrep(qr/syslogd: dropped \d+ messages?/, 5)
		or die ref($self), " syslogd did not write dropped message";
	})},
    },
    syslogd => {
	loghost => '@@tls://localhost:$connectport',
	loggrep => {
	    get_between2loggrep(),
	    get_charlog() => 400,
	    qr/ \(dropped\)/ => '~68',
	    qr/SSL3_WRITE_PENDING/ => 0,
	},
    },
    server => {
	listen => { domain => AF_UNSPEC, proto => "tls", addr => "localhost" },
	func => sub {
	    my $self = shift;
	    ${$self->{syslogd}}->loggrep(get_thirdlog(), 20)
		or die ref($self), " syslogd did not receive third log";
	    read_log($self);
	},
	rcvbuf => 2**12,
	loggrep => {
	    get_between2loggrep(),
	    get_secondlog() => 1,
	    get_thirdlog() => 0,
	    get_charlog() => '~333',
	    qr/syslogd: dropped [67][0-9] messages to loghost/ => 1,
	},
    },
    file => {
	loggrep => {
	    get_between2loggrep(),
	    get_secondlog() => 1,
	    get_thirdlog() => 1,
	    get_charlog() => 400,
	    qr/syslogd: dropped [67][0-9] messages to loghost/ => 1,
	},
    },
);

1;
@


1.9
log
@Add test for sendsyslog(2) dropped message reporting.
@
text
@d1 1
a1 1
# The client writes 310 messages to Sys::Syslog native method.
d9 1
a9 1
# Check that the 310 messages are in syslogd and file log.
d21 1
a21 1
	    write_lines($self, 310, 1024);
d33 2
a34 2
	    get_charlog() => 310,
	    qr/ \(dropped\)/ => '>=10',
d46 1
d51 2
a52 2
	    get_charlog() => '~287',
	    qr/syslogd: dropped [12][0-9] messages to loghost/ => 1,
d60 2
a61 2
	    get_charlog() => 310,
	    qr/syslogd: dropped [12][0-9] messages to loghost/ => 1,
@


1.8
log
@Make syslogd tests more reliable.  Allow TLS tests to drop a wider
rage of messages and make dropped regexes more specific.
@
text
@d25 1
a25 1
	    ${$self->{syslogd}}->loggrep(qr/syslogd: dropped \d+ messages/, 5)
@


1.7
log
@Now tls_write() behaves like write(2), so the TLS tests produce the
same results as the TCP tests.
@
text
@d1 1
a1 1
# The client writes 300 messages to Sys::Syslog native method.
d9 1
a9 1
# Check that the 300 messages are in syslogd and file log.
d21 1
a21 1
	    write_lines($self, 300, 1024);
d25 1
a25 1
	    ${$self->{syslogd}}->loggrep(qr/dropped \d+ messages/, 5)
d33 1
a33 1
	    get_charlog() => 300,
d51 1
a51 1
	    qr/syslogd: dropped 1[0-9] messages to loghost/ => 1,
d59 2
a60 2
	    get_charlog() => 300,
	    qr/syslogd: dropped 1[0-9] messages to loghost/ => 1,
@


1.6
log
@Do not count the dropped messages strictly, so that the syslogd
tests are depending less on the timing.  Fix a race in the buffer
sync test.  Now make regress of syslogd passes on my amd64, i386,
sparc64, alpha machines.
@
text
@d34 1
a34 1
	    qr/ \(dropped.*\)/ => '>=10',
d50 2
a51 3
	    get_charlog() => '>=100',
	    get_charlog() => '<=290',
	    qr/syslogd: dropped ([1-9]|1[0-9])[0-9] messages to loghost/ => 1,
d60 1
a60 1
	    qr/syslogd: dropped ([1-9]|1[0-9])[0-9] messages to loghost/ => 1,
@


1.5
log
@The write again workaround in syslogd changes the dropped message
counter.  Adapt tests.
@
text
@d34 1
a34 1
	    qr/ \(dropped.*\)/ => '~40',
d50 3
a52 2
	    get_charlog() => '~263',
	    qr/syslogd: dropped [34][0-9] messages to loghost "\@@tls:.*"/ => 1,
d61 1
a61 1
	    qr/syslogd: dropped [34][0-9] messages to loghost "\@@tls:.*"/ => 1,
@


1.4
log
@Make syslogd tests more reliable.  Increase the allowed range of
lost log messages.  Improve the synchronisation of client and server.
@
text
@d34 1
a34 1
	    qr/ \(dropped\)/ => '~16',
d50 2
a51 2
	    get_charlog() => '~285',
	    qr/syslogd: dropped 1[0-9] messages to loghost "\@@tls:.*"/ => 1,
d60 1
a60 1
	    qr/syslogd: dropped 1[0-9] messages to loghost "\@@tls:.*"/ => 1,
@


1.3
log
@Make syslogd test more reliable.  Use Time::HiRes to sleep .01
seconds in the write_lines() loop.  This slows down the client, so
all messages reach syslogd and flood its buffers.  Increase the
timeout to wait until all buffers are full.  Use this code in all
TCP/TLS buffer and memory overflow tests.
@
text
@d25 2
d34 2
a35 1
	    qr/ \(dropped\)/ => 16,
d42 2
a43 2
	    ${$self->{client}}->loggrep(get_thirdlog(), 20)
		or die ref($self), " client did not send third log";
d50 2
a51 2
	    get_charlog() => 285,
	    qr/syslogd: dropped 16 messages to loghost "\@@tls:.*"/ => 1,
d60 1
a60 1
	    qr/syslogd: dropped 16 messages to loghost "\@@tls:.*"/ => 1,
@


1.2
log
@Change syslog tests from transparent framing to octet counting.
Add tests for truncated buffer handling.
@
text
@d39 1
a39 1
	    ${$self->{client}}->loggrep(get_thirdlog(), 5)
@


1.1
log
@Add syslogd tests for dropped messages.
@
text
@d21 1
a21 5
	    foreach (1..300) {
		write_char($self, [1024], $_);
		# if client sends too fast, syslogd will not see everything
		sleep .01;
	    }
d32 1
d47 2
a48 2
	    get_charlog() => 288,
	    qr/syslogd: dropped 13 messages to loghost "\@@tls:.*"/ => 1,
d57 1
a57 1
	    qr/syslogd: dropped 13 messages to loghost "\@@tls:.*"/ => 1,
@

