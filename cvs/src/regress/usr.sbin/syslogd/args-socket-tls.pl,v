head	1.3;
access;
symbols
	OPENBSD_6_0:1.3.0.6
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.4
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.1.0.4
	OPENBSD_5_7_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2015.07.07.18.03.11;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	qTzx3B33iQFlT4Uv;

1.2
date	2015.06.15.21.44.57;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	BmPbwQg6idYgxXrC;

1.1
date	2015.01.16.11.51.59;	author bluhm;	state Exp;
branches;
next	;
commitid	0LYtCVxwz86nbUES;


desc
@@


1.3
log
@Add tests for incomming syslog messages over TCP.
@
text
@# The client writes a message to Sys::Syslog native method.
# The syslogd writes it into a file and through a pipe.
# The syslogd passes it via TLS to the loghost.
# The server receives the message on its TLS socket.
# Find the message in client, file, pipe, syslogd, server log.
# Check that the syslogd has one TCP socket in fstat output.

use strict;
use warnings;
use Socket;

our %args = (
    syslogd => {
	fstat => {
	    qr/ internet stream tcp / => 1,
	},
	loghost => '@@tls://127.0.0.1:$connectport',
	options => ["-n"],
    },
    server => {
	listen => { domain => AF_INET, proto => "tls", addr => "127.0.0.1" },
    },
);

1;
@


1.2
log
@Rework how fstat and ktrace pattern are specified in the test
arguments.  Add tests to check wether syslogd privsep works.  This
is done for debug and foreground and daemon mode.  Fstat is checked
for chroot and sockets.  Ktrace dump is grepped for setting uid and
gid.
@
text
@d21 1
a21 1
	listen => { domain => AF_INET, addr => "127.0.0.1", proto => "tls" },
@


1.1
log
@Add regression tests for syslog over TLS.
@
text
@d14 3
a16 1
	fstat => 1,
a21 5
    },
    fstat => {
	loggrep => {
	    qr/ internet stream tcp / => 1,
	},
@

