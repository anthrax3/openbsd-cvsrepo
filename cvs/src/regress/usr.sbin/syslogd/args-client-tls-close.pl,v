head	1.3;
access;
symbols
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.2.0.8
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.4
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2;
locks; strict;
comment	@# @;


1.3
date	2017.04.05.22.32.14;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	7DBpdoIApLnFWBfl;

1.2
date	2015.10.19.20.16.09;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	kVDnyxLzqDFKPFoO;

1.1
date	2015.10.09.17.07.06;	author bluhm;	state Exp;
branches;
next	;
commitid	m9fthBBZas0yIZjN;


desc
@@


1.3
log
@Syslogd's debug and error messages have changed a bit, adapt test.
@
text
@# The syslogd listens on 127.0.0.1 TLS socket.
# The client connects and closes the connection to syslogd.
# The syslogd writes the error into a file and through a pipe.
# Find the error message in file, syslogd log.
# Check that syslogd writes a log message about the client close.

use strict;
use warnings;
use Socket;

our %args = (
    client => {
	connect => { domain => AF_INET, proto => "tls", addr => "127.0.0.1",
	    port => 6514 },
	func => sub {
	    my $self = shift;
	    shutdown(\*STDOUT, 1)
		or die "shutdown write failed: $!";
	    ${$self->{syslogd}}->loggrep("tls logger .* connection close", 5)
		or die "no connection close in syslogd.log";
	},
	loggrep => {
	    qr/connect sock: 127.0.0.1 \d+/ => 1,
	},
    },
    syslogd => {
	options => ["-S", "127.0.0.1:6514"],
	loggrep => {
	    qr/syslogd\[\d+\]: tls logger .* accepted/ => 1,
	    qr/syslogd\[\d+\]: tls logger .* connection close/ => 1,
	},
    },
    server => {
	func => sub {
	    my $self = shift;
	    ${$self->{syslogd}}->loggrep("tls logger .* connection close", 5)
		or die "no connection close in syslogd.log";
	},
	loggrep => {},
    },
    file => {
	loggrep => {
	    qr/syslogd\[\d+\]: tls logger .* connection close/ => 1,
	},
    },
    pipe => { nocheck => 1 },
    tty => { nocheck => 1 },
);

1;
@


1.2
log
@Test syslogd logging to a tty which belongs to a user.  This is
done with a utmp entry for a pty fake login.  All messages are read
from the pty and written into a log file.
@
text
@d29 2
a30 2
	    qr/syslogd: tls logger .* accepted/ => 1,
	    qr/syslogd: tls logger .* connection close/ => 1,
d43 1
a43 1
	    qr/syslogd: tls logger .* connection close/ => 1,
@


1.1
log
@Add tests for syslogd TLS accept and receive encrypted messages.
@
text
@a40 3
    pipe => {
	loggrep => {},
    },
d46 2
@

