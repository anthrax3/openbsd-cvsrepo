head	1.8;
access;
symbols
	OPENBSD_6_2:1.8.0.4
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.7.0.4
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.2.0.6
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.4
	OPENBSD_5_8_BASE:1.2;
locks; strict;
comment	@# @;


1.8
date	2017.07.14.13.31.44;	author bluhm;	state Exp;
branches;
next	1.7;
commitid	ypkKxkYa6bEGRi40;

1.7
date	2017.01.30.21.18.24;	author reyk;	state Exp;
branches;
next	1.6;
commitid	xKltbbgZygLvw07A;

1.6
date	2017.01.30.18.25.11;	author reyk;	state Exp;
branches;
next	1.5;
commitid	7J8iKI4LmfgjkgkI;

1.5
date	2017.01.30.18.19.53;	author reyk;	state Exp;
branches;
next	1.4;
commitid	h6TUIWBD362zMINq;

1.4
date	2016.09.23.20.02.00;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	RW4RU2pIDzz3HYDd;

1.3
date	2016.09.02.21.30.34;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	sbZCO4zszQKrda5x;

1.2
date	2015.07.16.17.00.41;	author reyk;	state Exp;
branches;
next	1.1;
commitid	OVSCgJdvrRLTmeoE;

1.1
date	2015.07.16.16.35.57;	author reyk;	state Exp;
branches;
next	;
commitid	U71O9DhbbekfmB5Z;


desc
@@


1.8
log
@Do not mix Perl read() with sysread().  Data could get stuck in the
buffered IO and test run-regress-args-get-1073741824.pl would fail
on slow hardware.  Introduce a common function read_part() that
uses Perl read().  Limit debug output to one line per 1% of data.
Remove unused function http_server().  Fix whitespace.  Cleanup
Makefile.
@
text
@#	$OpenBSD: Makefile,v 1.7 2017/01/30 21:18:24 reyk Exp $

# The following ports must be installed for the regression tests:
# p5-IO-Socket-INET6	object interface for AF_INET and AF_INET6 domain sockets
# p5-Socket6		Perl defines relating to AF_INET6 sockets
# p5-IO-Socket-SSL	perl interface to SSL sockets
#
# Check wether all required perl packages are installed.  If some
# are missing print a warning and skip the tests, but do not fail.

PERL_REQUIRE !=	perl -Mstrict -Mwarnings -e ' \
    eval { require IO::Socket::INET6 } or print $@@; \
    eval { require Socket6 } or print $@@; \
    eval { require IO::Socket::SSL } or print $@@; \
'
.if ! empty (PERL_REQUIRE)
regress:
	@@echo "${PERL_REQUIRE}"
	@@echo install these perl packages for additional tests
	@@echo SKIPPED
.endif

# Automatically generate regress targets from test cases in directory.

ARGS !=			cd ${.CURDIR} && ls args-*.pl
TARGETS ?=		${ARGS}
REGRESS_TARGETS =	${TARGETS:S/^/run-regress-/}
CLEANFILES +=		*.log httpd.conf ktrace.out stamp-*
CLEANFILES +=		*.pem *.req *.crt *.key *.srl md5-*

HTDOCS_FILES =		512 1048576 1073741824
HTDOCS_MD5 =		${HTDOCS_FILES:S,^,md5-,}
HTDOCS_SPARSE =		yes
CLEANFILES +=		htdocs/*

# Set variables so that make runs with and without obj directory.
# Only do that if necessary to keep visible output short.

.if ${.CURDIR} == ${.OBJDIR}
PERLINC =
PERLPATH =
.else
PERLINC =	-I${.CURDIR}
PERLPATH =	${.CURDIR}/
.endif

# The arg tests take a perl hash with arguments controlling the
# test parameters.  Generally they consist of client, httpd, server.

.for a in ${ARGS}
run-regress-$a: $a ${HTDOCS_MD5}
	@@echo '\n======== $@@ ========'
	time SUDO=${SUDO} KTRACE=${KTRACE} HTTPD=${HTTPD} perl ${PERLINC} ${PERLPATH}httpd.pl ${.OBJDIR} ${PERLPATH}$a
.endfor

# populate htdocs

.for d in ${HTDOCS_FILES}
htdocs/$d:
	@@echo '\n======== file: $d ========'
	mkdir -m 0755 -p ${@@:H}
.if (${HTDOCS_SPARSE} != "yes")
	dd if=/dev/arandom of=$@@ count=$$(($d / 512)) bs=512
.else
	dd of=$@@ seek=$$(($d / 512)) bs=512 count=0 status=none
.endif

md5-$d: htdocs/$d
	md5 -q htdocs/$d >$@@
.endfor

# create certificates for TLS

ca.crt:
	openssl req -batch -new -subj /L=OpenBSD/O=httpd-regress/OU=ca/CN=root/ -nodes -newkey rsa -keyout ca.key -x509 -out ca.crt

server.req:
	openssl req -batch -new -subj /L=OpenBSD/O=httpd-regress/OU=server/CN=localhost/ -nodes -newkey rsa -keyout server.key -out server.req

server.crt: ca.crt server.req
	openssl x509 -CAcreateserial -CAkey ca.key -CA ca.crt -req -in server.req -out server.crt

${REGRESS_TARGETS:M*tls*} ${REGRESS_TARGETS:M*https*}: server.crt

# make perl syntax check for all args files

.PHONY: syntax

syntax: stamp-syntax

stamp-syntax: ${ARGS}
.for a in ${ARGS}
	@@perl -c ${PERLPATH}$a
.endfor
	@@date >$@@

.include <bsd.regress.mk>
@


1.7
log
@Fix TLS tests.  Keys and log files are now in obj, not in obj/htdocs
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.6 2017/01/30 18:25:11 reyk Exp $
a30 1
HTDOCS =		${.OBJDIR}/htdocs
d32 1
a32 1
HTDOCS_MD5 =		${HTDOCS_FILES:S/^/${.OBJDIR}\/md5-/}
d34 1
a34 1
CLEANFILES +=		${HTDOCS_FILES:S/^/${HTDOCS}\//} ${HTDOCS}/*.log
d51 1
a51 1
run-regress-$a: ${HTDOCS} $a ${HTDOCS_MD5}
d56 1
a56 4
# htdocs

${HTDOCS}:
	@@mkdir -m 0755 -p ${HTDOCS}
d59 1
a59 1
${HTDOCS}/$d:
d61 1
d63 1
a63 1
	@@dd if=/dev/arandom of=$@@ count=$$(($d / 512)) bs=512
d65 1
a65 1
	@@dd of=$@@ seek=$$(($d / 512)) bs=512 count=0 status=none
d68 2
a69 2
${.OBJDIR}/md5-$d: ${HTDOCS}/$d
	@@md5 -q ${HTDOCS}/$d > $@@
@


1.6
log
@Adjust CLEANFILES for new httpd root
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.5 2017/01/30 18:19:53 reyk Exp $
d54 1
a54 1
	time SUDO=${SUDO} KTRACE=${KTRACE} HTTPD=${HTTPD} perl ${PERLINC} ${PERLPATH}httpd.pl ${HTDOCS} ${PERLPATH}$a
@


1.5
log
@unbreak httpd regress tests after wobj change

Previously, the tests used the obj dir as the httpd chroot/root.  But
the www user cannot access any files since we switched obj to 0750.
The fix is to create another 0755 subdirectory obj/htdocs as the root.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.4 2016/09/23 20:02:00 bluhm Exp $
d35 1
a35 1
CLEANFILES +=		${HTDOCS_FILES}
@


1.4
log
@Remove leftovers from relayd tests.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.3 2016/09/02 21:30:34 bluhm Exp $
d31 3
a33 2
HTDOCS =		512 1048576 1073741824
HTDOCS_MD5 =		${HTDOCS:S/^/${.OBJDIR}\/md5-/}
d35 1
a35 1
CLEANFILES +=		${HTDOCS}
d52 1
a52 1
run-regress-$a: $a ${HTDOCS_MD5}
d54 1
a54 1
	time SUDO=${SUDO} KTRACE=${KTRACE} HTTPD=${HTTPD} perl ${PERLINC} ${PERLPATH}httpd.pl ${.OBJDIR} ${PERLPATH}$a
d59 5
a63 2
.for d in ${HTDOCS}
${.OBJDIR}/$d:
d71 2
a72 2
${.OBJDIR}/md5-$d: ${.OBJDIR}/$d
	@@md5 -q ${.OBJDIR}/$d > $@@
@


1.3
log
@Print SKIPPED if a regress test cannot be executed for some reason.
This allows to identify such tests by looking at their output.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.2 2015/07/16 17:00:41 reyk Exp $
a21 10

# Fill out these variables if you want to test httpd with
# the httpd process running on a remote machine.  You have to specify
# a local and remote ip address for the tcp connections.  To control
# the remote machine you need a hostname for ssh to log in.  All the
# test files must be in the same directory local and remote.

LOCAL_ADDR ?=
REMOTE_ADDR ?=
REMOTE_SSH ?=
@


1.2
log
@Fix non-sparse mode
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.1 2015/07/16 16:35:57 reyk Exp $
d20 1
@


1.1
log
@Add httpd regression tests based on bluhm's regression suite for
relayd - "bluhm test".  This is just the initial version, more tests
and changes will be done.

As discussed with bluhm@@ florian@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.11 2015/05/22 19:09:18 bluhm Exp $
d71 1
a71 1
	@@dd if=/dev/arandom of=$@@ count=$$(($d / 512)) bs=512 status=none
@

