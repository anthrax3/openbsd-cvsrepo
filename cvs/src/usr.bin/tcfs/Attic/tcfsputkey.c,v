head	1.13;
access;
symbols
	OPENBSD_3_2:1.12.0.8
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.12.0.6
	OPENBSD_3_1_BASE:1.12
	OPENBSD_3_0:1.12.0.4
	OPENBSD_3_0_BASE:1.12
	OPENBSD_2_9_BASE:1.12
	OPENBSD_2_9:1.12.0.2
	OPENBSD_2_8:1.11.0.2
	OPENBSD_2_8_BASE:1.11
	TCFS00:1.1.1.1
	PROVOS001:1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2003.02.24.02.13.14;	author deraadt;	state dead;
branches;
next	1.12;

1.12
date	2001.01.23.18.18.46;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2000.06.20.18.15.57;	author aaron;	state Exp;
branches;
next	1.10;

1.10
date	2000.06.20.08.59.53;	author fgsch;	state Exp;
branches;
next	1.9;

1.9
date	2000.06.20.01.29.14;	author provos;	state Exp;
branches;
next	1.8;

1.8
date	2000.06.19.23.06.25;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	2000.06.19.22.42.28;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	2000.06.19.20.35.48;	author fgsch;	state Exp;
branches;
next	1.5;

1.5
date	2000.06.19.20.25.31;	author fgsch;	state Exp;
branches;
next	1.4;

1.4
date	2000.06.19.20.06.19;	author fgsch;	state Exp;
branches;
next	1.3;

1.3
date	2000.06.19.14.24.07;	author provos;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.18.22.31.03;	author provos;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.18.22.07.24;	author provos;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.06.18.22.07.24;	author provos;	state Exp;
branches;
next	;


desc
@@


1.13
log
@bye bye
@
text
@/*	$OpenBSD: tcfsputkey.c,v 1.12 2001/01/23 18:18:46 deraadt Exp $	*/

/*
 *	Transparent Cryptographic File System (TCFS) for NetBSD 
 *	Author and mantainer: 	Luigi Catuogno [luicat@@tcfs.unisa.it]
 *	
 *	references:		http://tcfs.dia.unisa.it
 *				tcfs-bsd@@tcfs.unisa.it
 */

/*
 *	Base utility set v0.1
 */

#include <sys/types.h>
#include <sys/param.h>
#include <sys/mount.h>
#include <ctype.h>
#include <pwd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include <miscfs/tcfs/tcfs.h>
#include "tcfslib.h"
#include "tcfserrors.h"
#include <grp.h>

extern char *optarg;
extern int optind;
char *putkey_usage=
"usage: tcfsputkey [-k] [-f filesystem-label] [-g group] [-p mount-point]\n";

int
putkey_main(int argc, char *argv[])
{
	char *user, *password, *tcfskey;
	uid_t uid;
	gid_t gid = 0;
	int es = 0, treshold;
	char x;
	tcfspwdb *info;
	tcfsgpwdb *ginfo;
	char fslabel[MAXPATHLEN], fspath[MAXPATHLEN];
	int def = TRUE, havempname = FALSE, havefsname = FALSE;
	int isgroupkey = FALSE;
	int havename = FALSE, havefspath = FALSE, havekey = FALSE;

	while ((x = getopt(argc, argv, "kf:p:g:")) != -1) {
		switch(x) {
		case 'k':
			def = FALSE;
			break;
		case 'p':
			havempname = TRUE;
			strlcpy(fspath, optarg, sizeof(fspath));
			break;
		case 'f':
			havefsname = TRUE;
			strlcpy(fslabel, optarg, sizeof(fslabel));
			break;
		case 'g':
			isgroupkey = TRUE;
			def = TRUE;
			gid = atoi(optarg);
			if (!gid && optarg[0] != 0) {
				struct group *grp;

				grp = (struct group *)getgrnam(optarg);
				if (!grp)
					tcfs_error(ER_CUSTOM,
					    "Nonexistant group\n");
				gid = grp->gr_gid;
			}
			break;
		default: 
			tcfs_error(ER_CUSTOM, putkey_usage);
			exit(ER_UNKOPT);
		}
	}
	if (argc - optind)
		tcfs_error(ER_UNKOPT, NULL);

	if (havefsname && havempname) {
		tcfs_error(ER_CUSTOM, putkey_usage);
		exit(1);
	}
			 
	if (havefsname) {
		es = tcfs_getfspath(fslabel, fspath);
		havename = TRUE;
	}

	if (havefspath)
		havename = TRUE;

	if (!havename)
		es = tcfs_getfspath("default", fspath);

	if (!es) {
		tcfs_error(ER_CUSTOM, "fs-label not found!\n");
		exit(1);
	}

	uid = getuid();
		
	if (isgroupkey) {
		if (!unix_auth(&user, &password, TRUE))
			tcfs_error(ER_AUTH, user);

		if (!tcfsgpwdbr_new(&ginfo))
			tcfs_error(ER_MEM, NULL);

		if (!tcfs_ggetpwnam(user, gid, &ginfo))
			tcfs_error(ER_CUSTOM, "Default key non found");

		if (!strlen(ginfo->gkey))
			tcfs_error(ER_CUSTOM, "Invalid default key");

		tcfskey = (char *)malloc(UUKEYSIZE);
		if (!tcfskey)
			tcfs_error(ER_MEM, NULL);	

		treshold = ginfo->soglia;

		if (!tcfs_decrypt_key(password, ginfo->gkey, tcfskey, GKEYSIZE))
			tcfs_error(ER_CUSTOM, "Could not decrypt group key");

		es = tcfs_group_enable(fspath, uid, gid, treshold, tcfskey);

		if (es == -1) {
			tcfs_error(ER_CUSTOM, "problems updating filesystem");
		}

		exit(0);
	}


	if (!def) {
		tcfskey = getpass("Insert tcfs-key:");
		havekey = TRUE;
	} else {
		if (!unix_auth(&user, &password, TRUE))
			tcfs_error(ER_AUTH, user);
				
		if (!tcfspwdbr_new(&info))
			tcfs_error(ER_MEM, NULL);	

		if (!tcfs_getpwnam(user, &info))
			tcfs_error(ER_CUSTOM, "Default key non found");
	
		if (!strlen(info->upw))
			tcfs_error(ER_CUSTOM, "Invalid default key");

		tcfskey = (char *)malloc(UUKEYSIZE);
		if (!tcfskey)
			tcfs_error(ER_MEM, NULL);	
		
		if (!tcfs_decrypt_key (password, info->upw, tcfskey, KEYSIZE))
			tcfs_error(ER_CUSTOM, "Could not decrypt key");
		havekey = TRUE;
	}

	es = tcfs_user_enable(fspath, uid, tcfskey);

	if (es == -1)
		tcfs_error(ER_CUSTOM, "problems updating filesystem");

	exit(0);
}
@


1.12
log
@fix spelling; ca+OpenBSD@@zardoc.endmail.org
@
text
@d1 1
a1 1
/*	$OpenBSD: tcfsputkey.c,v 1.11 2000/06/20 18:15:57 aaron Exp $	*/
@


1.11
log
@getopt(3) returns -1, not EOF
@
text
@d1 1
a1 1
/*	$OpenBSD: tcfsputkey.c,v 1.10 2000/06/20 08:59:53 fgsch Exp $	*/
d33 1
a33 1
"usage: tcfsputkey [-k][-f fliesystem-label][-g group][-p mount-point]\n";
@


1.10
log
@fix warnings during compilation. replace a few more calloc's with
malloc's; no need to clean the buffer for fgets.
@
text
@d1 1
a1 1
/*	$OpenBSD: tcfsputkey.c,v 1.9 2000/06/20 01:29:14 provos Exp $	*/
d50 1
a50 1
	while ((x = getopt(argc, argv, "kf:p:g:")) != EOF) {
@


1.9
log
@no include <des.h> anymore
@
text
@d1 1
a1 1
/*	$OpenBSD: tcfsputkey.c,v 1.8 2000/06/19 23:06:25 aaron Exp $	*/
d40 2
a41 2
	gid_t gid;
	int es, treshold;
@


1.8
log
@more KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: tcfsputkey.c,v 1.7 2000/06/19 22:42:28 aaron Exp $	*/
a18 1
#include <des.h>
@


1.7
log
@KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: tcfsputkey.c,v 1.6 2000/06/19 20:35:48 fgsch Exp $	*/
d70 1
d73 2
a74 1
					tcfs_error(ER_CUSTOM, "Nonexistant group\n");
d122 1
a122 1
		tcfskey = (char*)malloc(UUKEYSIZE);
d157 1
a157 1
		tcfskey = (char*)malloc(UUKEYSIZE);
@


1.6
log
@add openbsd tag
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d39 1
a39 1
	char *user,*password,*tcfskey;
d51 1
a51 1
	while ((x = getopt(argc,argv,"kf:p:g:")) != EOF) {
d82 1
a82 1
		tcfs_error(ER_UNKOPT,NULL);
d90 1
a90 1
		es=tcfs_getfspath(fslabel,fspath);
d98 1
a98 1
		es=tcfs_getfspath("default",fspath);
d101 1
a101 1
		tcfs_error(ER_CUSTOM,"fs-label not found!\n");
d108 2
a109 2
		if (!unix_auth(&user,&password,TRUE))
			tcfs_error(ER_AUTH,user);
d112 1
a112 1
			tcfs_error(ER_MEM,NULL);
d114 2
a115 2
		if (!tcfs_ggetpwnam(user,gid,&ginfo))
			tcfs_error(ER_CUSTOM,"Default key non found");
d118 1
a118 1
			tcfs_error(ER_CUSTOM,"Invalid default key");
d122 1
a122 1
			tcfs_error(ER_MEM,NULL);	
d129 1
a129 1
		es = tcfs_group_enable(fspath,uid,gid,treshold,tcfskey);
d131 2
a132 2
		if(es == -1) {
			tcfs_error(ER_CUSTOM,"problems updating filesystem");
d139 1
a139 1
	if(!def) {
d143 2
a144 2
		if(!unix_auth(&user,&password,TRUE))
			tcfs_error(ER_AUTH,user);
d146 2
a147 2
		if(!tcfspwdbr_new(&info))
			tcfs_error(ER_MEM,NULL);	
d149 2
a150 2
		if(!tcfs_getpwnam(user,&info))
			tcfs_error(ER_CUSTOM,"Default key non found");
d152 1
a152 1
		if(!strlen(info->upw))
d156 1
a156 1
		if(!tcfskey)
d166 2
a167 2
	if(es == -1)
		tcfs_error(ER_CUSTOM,"problems updating filesystem");
@


1.5
log
@more cleaning. KNF
@
text
@d1 2
@


1.4
log
@add missing headers, declare missing functions remove unused vars, KNF;
more to come.
@
text
@d37 1
a37 1
	u_char *user,*password,*tcfskey;
@


1.3
log
@cleanup key encryption
@
text
@a12 1
#include <stdio.h>
d15 1
d17 1
d19 3
a22 3
#include <sys/param.h>
#include <sys/mount.h>
#include <des.h>
d37 1
a37 1
	u_char *key,*fs,*user,*password,*tcfskey;
a46 1
	int havefs = FALSE;
@


1.2
log
@remove RCS entries.
@
text
@d124 2
a125 2
		tcfs_decrypt_key(user, password, ginfo->gkey, tcfskey,
				 GROUPKEY);
d151 1
a151 1
			tcfs_error(ER_CUSTOM,"Invalid default key");
d155 1
a155 1
			tcfs_error(ER_MEM,NULL);	
d157 2
a158 1
		tcfs_decrypt_key (user, password, info->upw, tcfskey, USERKEY);
@


1.1
log
@Initial revision
@
text
@a10 7
 *
 *	  $Source: /usr/src/tcfs-utils_0.1/bin/RCS/tcfsputkey.c,v $
 *	   $State: Exp $
 *	$Revision: 1.1 $
 *	  $Author: luicat $
 *	    $Date: 2000/01/14 13:44:04 $
 *
a11 6

static const char *RCSid="$id: $";

/* RCS_HEADER_ENDS_HERE */


@


1.1.1.1
log
@Initial import of very much rewritten TCFS userland.  This code is still
nasty.
@
text
@@
