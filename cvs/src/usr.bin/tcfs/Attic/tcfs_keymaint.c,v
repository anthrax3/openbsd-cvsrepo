head	1.10;
access;
symbols
	OPENBSD_3_2:1.9.0.10
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.8
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.9.0.6
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_9:1.9.0.4
	OPENBSD_2_8:1.9.0.2
	OPENBSD_2_8_BASE:1.9
	TCFS00:1.1.1.1
	PROVOS001:1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2003.02.24.02.13.14;	author deraadt;	state dead;
branches;
next	1.9;

1.9
date	2000.06.19.23.06.25;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	2000.06.19.22.42.28;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	2000.06.19.20.35.47;	author fgsch;	state Exp;
branches;
next	1.6;

1.6
date	2000.06.19.20.06.19;	author fgsch;	state Exp;
branches;
next	1.5;

1.5
date	2000.06.19.14.24.07;	author provos;	state Exp;
branches;
next	1.4;

1.4
date	2000.06.19.14.02.58;	author provos;	state Exp;
branches;
next	1.3;

1.3
date	2000.06.19.14.01.54;	author provos;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.19.03.23.03;	author provos;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.18.22.07.24;	author provos;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.06.18.22.07.24;	author provos;	state Exp;
branches;
next	;


desc
@@


1.10
log
@bye bye
@
text
@/*	$OpenBSD: tcfs_keymaint.c,v 1.9 2000/06/19 23:06:25 aaron Exp $	*/

/*
 *	Transparent Cryptographic File System (TCFS) for NetBSD 
 *	Author and mantainer: 	Luigi Catuogno [luicat@@tcfs.unisa.it]
 *	
 *	references:		http://tcfs.dia.unisa.it
 *				tcfs-bsd@@tcfs.unisa.it
 */

/*
 *	Base utility set v0.1
 */

#include <sys/types.h>
#include <sys/param.h>
#include <sys/mount.h>
#include <sys/ucred.h>
#include <blf.h>
#include <ctype.h>
#include <pwd.h>
#include <string.h>
#include <unistd.h>

#include <miscfs/tcfs/tcfs.h>
#include <miscfs/tcfs/tcfs_cmd.h>

#include "tcfsdefines.h"
#include "uuencode.h"

int
tcfs_verify_fs(char *fs)
{
	int ret;
	struct statfs buf;

	ret = statfs(fs, &buf);

	if (ret)
		 return (0);

	if (!strcmp("tcfs", buf.f_fstypename))
		return (1);
	else	
		return (0);
}

int
tcfs_callfunction(char *filesystem, struct tcfs_args *arg)
{
	int i;

	if (tcfs_verify_fs(filesystem))
		i = mount("tcfs", filesystem, MNT_UPDATE, (void *)arg);
	else
		i = -1;
	
	return (i);
}

int 
tcfs_decrypt_key(char *pwd, u_char *t, u_char *tk, int tklen)
{
	char pass[_PASSWORD_LEN];
	char tcfskey[KEYSIZE * 2], iv[8];
	blf_ctx ctx;
	int len;

	if (!tk)
		return (0);

	strlcpy(pass, pwd, sizeof(pass));

	len = uudecode((char *)t, tcfskey, sizeof(tcfskey));
	if (len == -1) {
		fprintf(stderr, "tcfs_decrypt_key: uudecode failed\n");
		return (0);
	} else 	if (len != tklen) {
		fprintf(stderr, "tcfs_decrypt_key: uudecode wrong length\n");
		return (0);
	}

	while (strlen (pass) < 8) {
		char tmp[_PASSWORD_LEN];

		strcpy(tmp, pass);
		strcat(tmp, pass);
		strcat(pass, tmp);
	}

	blf_key(&ctx, pass, strlen(pass));
	memset(iv, 0, sizeof(iv));
	blf_cbc_decrypt(&ctx, iv, tcfskey, tklen);

	memset(pass, 0, strlen(pass));
	memset(&ctx, 0, sizeof(ctx));

	memcpy(tk, tcfskey, tklen);
	return (1);
}

int 
tcfs_encrypt_key(char *pw, u_char *key, int klen, u_char *ek, int eklen)
{
	char pass[_PASSWORD_LEN], iv[8];
	blf_ctx ctx;
	int res;

	if (!ek)
		return (0);

	strlcpy(pass, pw, sizeof(pass));

	while (strlen(pass) < 8) {
		char tmp[_PASSWORD_LEN];
      
		strcpy(tmp, pass);
		strcat(tmp, pass);
		strcat(pass, tmp);
	}
	
	blf_key(&ctx, pass, strlen(pass));
	memset(iv, 0, sizeof(iv));
	blf_cbc_encrypt(&ctx, iv, key, klen);

	memset(&ctx, 0, sizeof(ctx));

	res = uuencode(key, klen, ek, eklen);
	if (res != eklen - 1) {
		fprintf(stderr, "tcfs_encrypt_key: uuencode length wrong\n");
		return (0);
	}

	return (1);
}

int
tcfs_user_enable(char *filesystem, uid_t user, u_char *key)
{
	struct tcfs_args a;

	a.user = user;
	memcpy(a.tcfs_key, key, sizeof(a.tcfs_key));
	a.cmd = TCFS_PUT_UIDKEY;

	return (tcfs_callfunction(filesystem, &a));
}

int
tcfs_user_disable(char *filesystem, uid_t user)
{
	struct tcfs_args a;

	a.user = user;
	a.cmd = TCFS_RM_UIDKEY;

	return (tcfs_callfunction(filesystem, &a));
}

int
tcfs_proc_enable(char *filesystem, uid_t user, pid_t pid, char *key)
{
	struct tcfs_args a;

	a.user = user;
	a.cmd = TCFS_PUT_PIDKEY;
	a.proc = pid;
	memcpy(a.tcfs_key, key, sizeof(a.tcfs_key));

	return (tcfs_callfunction(filesystem, &a));
}

int
tcfs_proc_disable(char *filesystem, uid_t user, pid_t pid)
{
	struct tcfs_args a;

	a.user = user;
	a.cmd = TCFS_RM_PIDKEY;
	a.proc = pid;

	return (tcfs_callfunction(filesystem, &a));
}

int
tcfs_group_enable(char *filesystem, uid_t uid, gid_t gid, 
		  int tre, char *key)
{
	struct tcfs_args a;

	a.cmd = TCFS_PUT_GIDKEY;
	a.user = uid;
	a.group = gid;
	a.treshold = tre;
	memcpy(a.tcfs_key, key, sizeof(a.tcfs_key));

	return (tcfs_callfunction(filesystem, &a));
}

int tcfs_group_disable(char *filesystem, uid_t uid, gid_t gid)
{
	struct tcfs_args a;

	a.cmd = TCFS_RM_GIDKEY;
	a.user = uid;
	a.group = gid;

	return (tcfs_callfunction(filesystem, &a));
}

@


1.9
log
@more KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: tcfs_keymaint.c,v 1.8 2000/06/19 22:42:28 aaron Exp $	*/
@


1.8
log
@KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: tcfs_keymaint.c,v 1.7 2000/06/19 20:35:47 fgsch Exp $	*/
d54 1
a54 1
		i = mount("tcfs", filesystem, MNT_UPDATE, (void*)arg);
d65 1
a65 1
	char tcfskey[2*KEYSIZE], iv[8];
d141 1
d153 1
d164 1
d177 1
d190 1
d203 1
a209 1

@


1.7
log
@add openbsd tag
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d40 1
a40 1
		 return 0;
d52 1
d54 1
a54 1
		i = mount("tcfs",filesystem,MNT_UPDATE,(void*)arg);
d62 1
a62 1
tcfs_decrypt_key (char *pwd, u_char *t, u_char *tk, int tklen)
d70 1
a70 1
		return 0;
d72 1
a72 1
	strlcpy (pass, pwd, sizeof(pass));
d74 1
a74 1
	len = uudecode ((char *)t, tcfskey, sizeof(tcfskey));
d77 1
a77 1
		return 0;
d80 1
a80 1
		return 0;
d85 4
a88 3
		strcpy (tmp, pass);
		strcat (tmp, pass);
		strcat (pass, tmp);
d95 2
a96 2
	memset (pass, 0, strlen (pass));
	memset (&ctx, 0, sizeof(ctx));
d98 2
a99 2
	memcpy (tk, tcfskey, tklen);
	return 1;
d103 1
a103 1
tcfs_encrypt_key (char *pw, u_char *key, int klen, u_char *ek, int eklen)
d110 1
a110 1
		return 0;
d112 1
a112 1
	strlcpy (pass, pw, sizeof(pass));
d117 3
a119 3
		strcpy (tmp, pass);
		strcat (tmp, pass);
		strcat (pass, tmp);
d128 1
a128 1
	res = uuencode (key, klen, ek, eklen);
d134 1
a134 1
	return 1;
d144 2
a145 1
	return tcfs_callfunction(filesystem,&a);
d154 2
a155 1
	return tcfs_callfunction(filesystem, &a);
d166 2
a167 1
	return tcfs_callfunction(filesystem, &a);
d177 2
a178 1
	return tcfs_callfunction(filesystem, &a);
d191 2
a192 1
	return tcfs_callfunction(filesystem,&a);
d201 2
a202 1
	return tcfs_callfunction(filesystem,&a);
@


1.6
log
@add missing headers, declare missing functions remove unused vars, KNF;
more to come.
@
text
@d1 2
@


1.5
log
@cleanup key encryption
@
text
@a12 3
#include <ctype.h>
#include <pwd.h>
#include <unistd.h>
d18 4
d61 1
a61 2
	int i = 0, len;
	char pass[_PASSWORD_LEN], *cypher;
d64 1
a100 1
	int i = 0;
@


1.4
log
@initialize iv
@
text
@d58 1
a58 2
tcfs_decrypt_key (char *u, char *pwd, unsigned char *t, unsigned char *tk,
		  unsigned int flag)
d60 1
a60 1
	int i = 0;
a63 1
	int keysize = (flag == GROUPKEY) ? GKEYSIZE : KEYSIZE;
d68 1
a68 1
	strcpy (pass, pwd);
d70 2
a71 1
	if (uudecode ((char *)t, tcfskey, sizeof(tcfskey)) == -1) {
d74 3
d88 1
a88 1
	blf_cbc_decrypt(&ctx, iv, tcfskey, keysize);
d93 1
a93 1
	memcpy (tk, tcfskey, keysize);
d98 1
a98 2
tcfs_encrypt_key (char *u, char *pw, unsigned char *key, unsigned char *ek,
		  unsigned int flag)
a102 2
	int keysize = (flag == GROUPKEY) ? GKEYSIZE : KEYSIZE;
	int uulen = (flag == GROUPKEY) ? UUGKEYSIZE : UUKEYSIZE;
d108 1
a108 1
	strcpy (pass, pw);
d120 1
a120 1
	blf_cbc_encrypt(&ctx, iv, key, keysize);
d124 2
a125 2
	res = uuencode (key, keysize, ek, uulen + 1);
	if (res != uulen) {
@


1.3
log
@use blowfish instead of DES to encrypt user keys
@
text
@d120 1
@


1.2
log
@fix a couple of bugs.  dont clobber tcfspwdb when adding group entries.
do the fgets correctly until aaron gets to them.
@
text
@d20 2
a21 1
#include <des.h>
d63 3
a65 3
	char tcfskey[2*KEYSIZE];
	des_key_schedule ks;
	int keysize = (flag == GROUPKEY) ? KEYSIZE + KEYSIZE/8 : KEYSIZE;
d84 3
a86 2
	while ((i*8) < keysize) {
		des_set_key ((des_cblock *) pass, ks);
a87 4
		des_ecb_encrypt ((des_cblock *) (tcfskey+i*8),
				 (des_cblock *) (tcfskey+i*8), ks, DES_DECRYPT);
		i++;
	}
d89 1
d100 3
a102 3
	char pass[_PASSWORD_LEN];
	des_key_schedule ks;
	int keysize = (flag == GROUPKEY) ? KEYSIZE + KEYSIZE/8 : KEYSIZE;
d118 3
d122 1
a122 6
	while ((i*8) < keysize) {
		des_set_key((des_cblock *) pass, ks);
		des_ecb_encrypt((des_cblock *) (key + i * 8),
				(des_cblock *) (key + i * 8), ks, DES_ENCRYPT);
		i++;
	}
@


1.1
log
@Initial revision
@
text
@d62 1
a62 1
	char tcfskey[KEYSIZE + 2];
d71 2
a72 1
	if (uudecode ((char *)t, tcfskey, sizeof(tcfskey)) == -1)
d74 1
d104 2
d127 5
a131 1
	uuencode (key, keysize, ek, UUKEYSIZE);
d136 2
a137 1
int tcfs_user_enable(char *filesystem, uid_t user, u_char *key)
d146 2
a147 1
int tcfs_user_disable(char *filesystem, uid_t user)
d155 2
a156 1
int tcfs_proc_enable(char *filesystem, uid_t user, pid_t pid, char *key)
d166 2
a167 1
int tcfs_proc_disable(char *filesystem, uid_t user, pid_t pid)
d176 3
a178 2
int tcfs_group_enable(char *filesystem, uid_t uid, gid_t gid, 
		      int tre, char *key)
@


1.1.1.1
log
@Initial import of very much rewritten TCFS userland.  This code is still
nasty.
@
text
@@
