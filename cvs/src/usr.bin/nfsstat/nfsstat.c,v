head	1.36;
access;
symbols
	OPENBSD_6_2_BASE:1.36
	OPENBSD_6_1:1.36.0.4
	OPENBSD_6_1_BASE:1.36
	OPENBSD_6_0:1.35.0.4
	OPENBSD_6_0_BASE:1.35
	OPENBSD_5_9:1.35.0.2
	OPENBSD_5_9_BASE:1.35
	OPENBSD_5_8:1.34.0.6
	OPENBSD_5_8_BASE:1.34
	OPENBSD_5_7:1.34.0.2
	OPENBSD_5_7_BASE:1.34
	OPENBSD_5_6:1.33.0.22
	OPENBSD_5_6_BASE:1.33
	OPENBSD_5_5:1.33.0.20
	OPENBSD_5_5_BASE:1.33
	OPENBSD_5_4:1.33.0.16
	OPENBSD_5_4_BASE:1.33
	OPENBSD_5_3:1.33.0.14
	OPENBSD_5_3_BASE:1.33
	OPENBSD_5_2:1.33.0.12
	OPENBSD_5_2_BASE:1.33
	OPENBSD_5_1_BASE:1.33
	OPENBSD_5_1:1.33.0.10
	OPENBSD_5_0:1.33.0.8
	OPENBSD_5_0_BASE:1.33
	OPENBSD_4_9:1.33.0.6
	OPENBSD_4_9_BASE:1.33
	OPENBSD_4_8:1.33.0.4
	OPENBSD_4_8_BASE:1.33
	OPENBSD_4_7:1.33.0.2
	OPENBSD_4_7_BASE:1.33
	OPENBSD_4_6:1.32.0.4
	OPENBSD_4_6_BASE:1.32
	OPENBSD_4_5:1.31.0.2
	OPENBSD_4_5_BASE:1.31
	OPENBSD_4_4:1.30.0.2
	OPENBSD_4_4_BASE:1.30
	OPENBSD_4_3:1.29.0.8
	OPENBSD_4_3_BASE:1.29
	OPENBSD_4_2:1.29.0.6
	OPENBSD_4_2_BASE:1.29
	OPENBSD_4_1:1.29.0.4
	OPENBSD_4_1_BASE:1.29
	OPENBSD_4_0:1.29.0.2
	OPENBSD_4_0_BASE:1.29
	OPENBSD_3_9:1.28.0.4
	OPENBSD_3_9_BASE:1.28
	OPENBSD_3_8:1.28.0.2
	OPENBSD_3_8_BASE:1.28
	OPENBSD_3_7:1.25.0.2
	OPENBSD_3_7_BASE:1.25
	OPENBSD_3_6:1.23.0.2
	OPENBSD_3_6_BASE:1.23
	OPENBSD_3_5:1.22.0.2
	OPENBSD_3_5_BASE:1.22
	OPENBSD_3_4:1.21.0.2
	OPENBSD_3_4_BASE:1.21
	OPENBSD_3_3:1.17.0.2
	OPENBSD_3_3_BASE:1.17
	OPENBSD_3_2:1.13.0.4
	OPENBSD_3_2_BASE:1.13
	OPENBSD_3_1:1.13.0.2
	OPENBSD_3_1_BASE:1.13
	OPENBSD_3_0:1.12.0.2
	OPENBSD_3_0_BASE:1.12
	OPENBSD_2_9_BASE:1.10
	OPENBSD_2_9:1.10.0.6
	OPENBSD_2_8:1.10.0.4
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.10.0.2
	OPENBSD_2_7_BASE:1.10
	OPENBSD_2_6:1.7.0.6
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.4
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.7.0.2
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.6.0.6
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.4
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.36
date	2016.08.27.04.07.42;	author guenther;	state Exp;
branches;
next	1.35;
commitid	0Te5wXjdrYMz6HhF;

1.35
date	2015.10.23.08.18.30;	author tedu;	state Exp;
branches;
next	1.34;
commitid	EWNYN2tRhkgrdsYw;

1.34
date	2015.01.16.06.40.10;	author deraadt;	state Exp;
branches;
next	1.33;
commitid	Uu5nFG3wCl0LACBb;

1.33
date	2009.10.27.23.59.40;	author deraadt;	state Exp;
branches;
next	1.32;

1.32
date	2009.06.05.19.32.26;	author jasper;	state Exp;
branches;
next	1.31;

1.31
date	2008.12.26.15.09.40;	author sobrado;	state Exp;
branches;
next	1.30;

1.30
date	2008.06.12.19.14.15;	author thib;	state Exp;
branches;
next	1.29;

1.29
date	2006.04.03.06.40.14;	author deraadt;	state Exp;
branches;
next	1.28;

1.28
date	2005.08.01.22.28.19;	author millert;	state Exp;
branches;
next	1.27;

1.27
date	2005.08.01.22.23.55;	author deraadt;	state Exp;
branches;
next	1.26;

1.26
date	2005.06.08.04.17.14;	author marius;	state Exp;
branches;
next	1.25;

1.25
date	2004.12.14.12.21.04;	author pedro;	state Exp;
branches;
next	1.24;

1.24
date	2004.09.14.23.53.22;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	2004.05.09.03.28.11;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	2004.03.02.20.49.41;	author tedu;	state Exp;
branches;
next	1.21;

1.21
date	2003.07.07.21.36.52;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2003.06.26.21.59.10;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2003.06.10.22.20.49;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2003.06.03.02.56.13;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2003.01.15.22.57.42;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2003.01.15.22.20.15;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2003.01.15.21.25.44;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2003.01.15.21.20.03;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2002.02.16.21.27.50;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2001.09.04.23.35.59;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2001.06.25.17.15.46;	author markus;	state Exp;
branches;
next	1.10;

1.10
date	2000.05.01.19.48.04;	author provos;	state Exp;
branches;
next	1.9;

1.9
date	2000.04.18.20.17.54;	author mickey;	state Exp;
branches;
next	1.8;

1.8
date	2000.04.18.15.24.26;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	98.07.05.18.42.43;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	97.01.15.23.42.57;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	96.12.22.03.25.59;	author tholo;	state Exp;
branches;
next	1.4;

1.4
date	96.12.15.18.52.19;	author kstailey;	state Exp;
branches;
next	1.3;

1.3
date	96.08.06.18.36.59;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.03.27.19.32.49;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.52;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.52;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.36
log
@Pull in <sys/time.h> for struct timespec and timeval

ok deraadt@@
@
text
@/*	$OpenBSD: nfsstat.c,v 1.35 2015/10/23 08:18:30 tedu Exp $	*/
/*	$NetBSD: nfsstat.c,v 1.7 1996/03/03 17:21:30 thorpej Exp $	*/

/*
 * Copyright (c) 1983, 1989, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Rick Macklem at The University of Guelph.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/mount.h>
#include <sys/sysctl.h>
#include <sys/time.h>
#include <nfs/rpcv2.h>
#include <nfs/nfsproto.h>
#include <nfs/nfs.h>
#include <signal.h>
#include <fcntl.h>
#include <ctype.h>
#include <errno.h>
#include <kvm.h>
#include <nlist.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <limits.h>
#include <paths.h>
#include <err.h>

#define SHOW_SERVER 0x01
#define SHOW_CLIENT 0x02
#define SHOW_ALL (SHOW_SERVER | SHOW_CLIENT)

struct nlist nl[] = {
#define	N_NFSSTAT	0
	{ "_nfsstats" },
	{ "" },
};
kvm_t *kd;
volatile sig_atomic_t signalled;	/* set if alarm goes off "early" */
int nfs_id;

void getnfsstats(struct nfsstats *);
void printhdr(void);
void intpr(u_int);
void sidewaysintpr(u_int, u_int);
void usage(void);
void catchalarm(int);

int
main(int argc, char *argv[])
{
	u_int interval, display = SHOW_ALL;
	extern int optind;
	extern char *optarg;
	char *memf, *nlistf;
	const char *errstr;
	int ch;

	interval = 0;
	memf = nlistf = NULL;
	while ((ch = getopt(argc, argv, "cM:N:sw:")) != -1)
		switch(ch) {
		case 'M':
			memf = optarg;
			break;
		case 'N':
			nlistf = optarg;
			break;
		case 'w':
			interval = (u_int)strtonum(optarg, 0, 1000, &errstr);
			if (errstr)
				errx(1, "invalid interval %s: %s",
				    optarg, errstr);
			break;
		case 's':
			display = SHOW_SERVER;
			break;
		case 'c':
			display = SHOW_CLIENT;
			break;
		case '?':
		default:
			usage();
		}
	argc -= optind;
	argv += optind;

	if (argc) {
		interval = (u_int)strtonum(*argv, 0, 1000, &errstr);
		if (errstr)
			errx(1, "invalid interval %s: %s", *argv, errstr);
		++argv;
		--argc;
	}
	if (nlistf || memf) {
		char errbuf[_POSIX2_LINE_MAX];

		if ((kd = kvm_openfiles(nlistf, memf, NULL, O_RDONLY, errbuf)) == 0)
			errx(1, "nfsstat: %s", errbuf);
		if (kvm_nlist(kd, nl) != 0)
			errx(1, "kvm_nlist: can't get names");
	} else {
		int mib[4];
		size_t len;

		mib[0] = CTL_VFS;
		mib[1] = VFS_GENERIC;
		mib[2] = VFS_MAXTYPENUM;
		len = sizeof(nfs_id);
		if (sysctl(mib, 3, &nfs_id, &len, NULL, 0))
			err(1, "sysctl: VFS_MAXTYPENUM");

		for (; nfs_id; nfs_id--) {
			struct vfsconf vfsc;

			mib[0] = CTL_VFS;
			mib[1] = VFS_GENERIC;
			mib[2] = VFS_CONF;
			mib[3] = nfs_id;

			len = sizeof(vfsc);
			if (sysctl(mib, 4, &vfsc, &len, NULL, 0))
				continue;

			if (!strcmp(vfsc.vfc_name, MOUNT_NFS))
				break;
		}
		if (nfs_id == 0)
			errx(1, "cannot find nfs filesystem id");
	}

	if (interval)
		sidewaysintpr(interval, display);
	else
		intpr(display);

	return 0;
}

void
getnfsstats(struct nfsstats *p)
{
	if (kd) {
		if (kvm_read(kd, nl[N_NFSSTAT].n_value, p, sizeof(*p)) != sizeof(*p))
			errx(1, "kvm_read failed");
	} else {
		int mib[3];
		size_t len = sizeof(*p);

		mib[0] = CTL_VFS;
		mib[1] = nfs_id; /* 2 */
		mib[2] = NFS_NFSSTATS;

		if (sysctl(mib, 3, p, &len, NULL, 0))
			err(1, "sysctl");
	}
}

/*
 * Print a description of the nfs stats.
 */
void
intpr(u_int display)
{
	struct nfsstats nfsstats;

	getnfsstats(&nfsstats);

	if (display & SHOW_CLIENT) {
		printf("Client Info:\n");
		printf("%9.9s %9.9s %9.9s %9.9s %9.9s %9.9s %9.9s %9.9s\n",
		    "Getattr", "Setattr", "Lookup", "Readlink", "Read",
		    "Write", "Create", "Remove");
		printf("%9llu %9llu %9llu %9llu %9llu %9llu %9llu %9llu\n",
		    nfsstats.rpccnt[NFSPROC_GETATTR],
		    nfsstats.rpccnt[NFSPROC_SETATTR],
		    nfsstats.rpccnt[NFSPROC_LOOKUP],
		    nfsstats.rpccnt[NFSPROC_READLINK],
		    nfsstats.rpccnt[NFSPROC_READ],
		    nfsstats.rpccnt[NFSPROC_WRITE],
		    nfsstats.rpccnt[NFSPROC_CREATE],
		    nfsstats.rpccnt[NFSPROC_REMOVE]);
		printf("%9.9s %9.9s %9.9s %9.9s %9.9s %9.9s %9.9s %9.9s\n",
		    "Rename", "Link", "Symlink", "Mkdir", "Rmdir",
		    "Readdir", "RdirPlus", "Access");
		printf("%9llu %9llu %9llu %9llu %9llu %9llu %9llu %9llu\n",
		    nfsstats.rpccnt[NFSPROC_RENAME],
		    nfsstats.rpccnt[NFSPROC_LINK],
		    nfsstats.rpccnt[NFSPROC_SYMLINK],
		    nfsstats.rpccnt[NFSPROC_MKDIR],
		    nfsstats.rpccnt[NFSPROC_RMDIR],
		    nfsstats.rpccnt[NFSPROC_READDIR],
		    nfsstats.rpccnt[NFSPROC_READDIRPLUS],
		    nfsstats.rpccnt[NFSPROC_ACCESS]);
		printf("%9.9s %9.9s %9.9s %9.9s %9.9s\n",
		    "Mknod", "Fsstat", "Fsinfo", "PathConf", "Commit");
		printf("%9llu %9llu %9llu %9llu %9llu\n",
		    nfsstats.rpccnt[NFSPROC_MKNOD],
		    nfsstats.rpccnt[NFSPROC_FSSTAT],
		    nfsstats.rpccnt[NFSPROC_FSINFO],
		    nfsstats.rpccnt[NFSPROC_PATHCONF],
		    nfsstats.rpccnt[NFSPROC_COMMIT]);
		printf("Rpc Info:\n");
		printf("%9.9s %9.9s %9.9s %9.9s %9.9s %9.9s\n",
		    "TimedOut", "Invalid", "X Replies", "Retries", "Requests",
		    "FrcSync");
		printf("%9llu %9llu %9llu %9llu %9llu %9llu\n",
		    nfsstats.rpctimeouts,
		    nfsstats.rpcinvalid,
		    nfsstats.rpcunexpected,
		    nfsstats.rpcretries,
		    nfsstats.rpcrequests,
		    nfsstats.forcedsync);
		printf("Cache Info:\n");
		printf("%9.9s %9.9s %9.9s %9.9s",
		    "Attr Hits", "Misses", "Lkup Hits", "Misses");
		printf(" %9.9s %9.9s %9.9s %9.9s\n",
		    "BioR Hits", "Misses", "BioW Hits", "Misses");
		printf("%9llu %9llu %9llu %9llu",
		    nfsstats.attrcache_hits, nfsstats.attrcache_misses,
		    nfsstats.lookupcache_hits, nfsstats.lookupcache_misses);
		printf(" %9llu %9llu %9llu %9llu\n",
		    nfsstats.biocache_reads-nfsstats.read_bios,
		    nfsstats.read_bios,
		    nfsstats.biocache_writes-nfsstats.write_bios,
		    nfsstats.write_bios);
		printf("%9.9s %9.9s %9.9s %9.9s",
		    "BioRLHits", "Misses", "BioD Hits", "Misses");
		printf(" %9.9s %9.9s\n", "DirE Hits", "Misses");
		printf("%9llu %9llu %9llu %9llu",
		    nfsstats.biocache_readlinks-nfsstats.readlink_bios,
		    nfsstats.readlink_bios,
		    nfsstats.biocache_readdirs-nfsstats.readdir_bios,
		    nfsstats.readdir_bios);
		printf(" %9llu %9llu\n",
		    nfsstats.direofcache_hits, nfsstats.direofcache_misses);
	}

	if (display == SHOW_ALL)
		printf("\n");

	if (display & SHOW_SERVER) {
		printf("Server Info:\n");
		printf("%9.9s %9.9s %9.9s %9.9s %9.9s %9.9s %9.9s %9.9s\n",
		    "Getattr", "Setattr", "Lookup", "Readlink", "Read",
		    "Write", "Create", "Remove");
		printf("%9llu %9llu %9llu %9llu %9llu %9llu %9llu %9llu\n",
		    nfsstats.srvrpccnt[NFSPROC_GETATTR],
		    nfsstats.srvrpccnt[NFSPROC_SETATTR],
		    nfsstats.srvrpccnt[NFSPROC_LOOKUP],
		    nfsstats.srvrpccnt[NFSPROC_READLINK],
		    nfsstats.srvrpccnt[NFSPROC_READ],
		    nfsstats.srvrpccnt[NFSPROC_WRITE],
		    nfsstats.srvrpccnt[NFSPROC_CREATE],
		    nfsstats.srvrpccnt[NFSPROC_REMOVE]);
		printf("%9.9s %9.9s %9.9s %9.9s %9.9s %9.9s %9.9s %9.9s\n",
		    "Rename", "Link", "Symlink", "Mkdir", "Rmdir",
		    "Readdir", "RdirPlus", "Access");
		printf("%9llu %9llu %9llu %9llu %9llu %9llu %9llu %9llu\n",
		    nfsstats.srvrpccnt[NFSPROC_RENAME],
		    nfsstats.srvrpccnt[NFSPROC_LINK],
		    nfsstats.srvrpccnt[NFSPROC_SYMLINK],
		    nfsstats.srvrpccnt[NFSPROC_MKDIR],
		    nfsstats.srvrpccnt[NFSPROC_RMDIR],
		    nfsstats.srvrpccnt[NFSPROC_READDIR],
		    nfsstats.srvrpccnt[NFSPROC_READDIRPLUS],
		    nfsstats.srvrpccnt[NFSPROC_ACCESS]);
		printf("%9.9s %9.9s %9.9s %9.9s %9.9s\n",
		    "Mknod", "Fsstat", "Fsinfo", "PathConf", "Commit");
		printf("%9llu %9llu %9llu %9llu %9llu\n",
		    nfsstats.srvrpccnt[NFSPROC_MKNOD],
		    nfsstats.srvrpccnt[NFSPROC_FSSTAT],
		    nfsstats.srvrpccnt[NFSPROC_FSINFO],
		    nfsstats.srvrpccnt[NFSPROC_PATHCONF],
		    nfsstats.srvrpccnt[NFSPROC_COMMIT]);
		printf("Server Ret-Failed\n");
		printf("%17llu\n", nfsstats.srvrpc_errs);
		printf("Server Faults\n");
		printf("%13llu\n", nfsstats.srv_errs);
		printf("Server Cache Stats:\n");
		printf("%9.9s %9.9s %9.9s %9.9s\n",
		    "Inprog", "Idem", "Non-idem", "Misses");
		printf("%9llu %9llu %9llu %9llu\n",
		    nfsstats.srvcache_inproghits,
		    nfsstats.srvcache_idemdonehits,
		    nfsstats.srvcache_nonidemdonehits,
		    nfsstats.srvcache_misses);
		printf("Server Write Gathering:\n");
		printf("%9.9s %9.9s %9.9s\n",
		    "WriteOps", "WriteRPC", "Opsaved");
		printf("%9llu %9llu %9llu\n",
		    nfsstats.srvvop_writes,
		    nfsstats.srvrpccnt[NFSPROC_WRITE],
		    nfsstats.srvrpccnt[NFSPROC_WRITE] - nfsstats.srvvop_writes);
	}
}

/*
 * Print a running summary of nfs statistics.
 * Repeat display every interval seconds, showing statistics
 * collected over that interval.  Assumes that interval is non-zero.
 * First line printed at top of screen is always cumulative.
 */
void
sidewaysintpr(u_int interval, u_int display)
{
	struct nfsstats nfsstats, lastst;
	int hdrcnt;
	sigset_t emptyset;

	(void)signal(SIGALRM, catchalarm);
	signalled = 0;
	(void)alarm(interval);
	bzero(&lastst, sizeof(lastst));

	for (hdrcnt = 1;;) {
		if (!--hdrcnt) {
			printhdr();
			hdrcnt = 20;
		}

		getnfsstats(&nfsstats);

		if (display & SHOW_CLIENT)
			printf("Client: "
			    "%8llu %8llu %8llu %8llu %8llu %8llu %8llu %8llu\n",
			    nfsstats.rpccnt[NFSPROC_GETATTR] -
			    lastst.rpccnt[NFSPROC_GETATTR],
			    nfsstats.rpccnt[NFSPROC_LOOKUP] -
			    lastst.rpccnt[NFSPROC_LOOKUP],
			    nfsstats.rpccnt[NFSPROC_READLINK] -
			    lastst.rpccnt[NFSPROC_READLINK],
			    nfsstats.rpccnt[NFSPROC_READ] -
			    lastst.rpccnt[NFSPROC_READ],
			    nfsstats.rpccnt[NFSPROC_WRITE] -
			    lastst.rpccnt[NFSPROC_WRITE],
			    nfsstats.rpccnt[NFSPROC_RENAME] -
			    lastst.rpccnt[NFSPROC_RENAME],
			    nfsstats.rpccnt[NFSPROC_ACCESS] -
			    lastst.rpccnt[NFSPROC_ACCESS],
			    (nfsstats.rpccnt[NFSPROC_READDIR] -
			    lastst.rpccnt[NFSPROC_READDIR]) +
			    (nfsstats.rpccnt[NFSPROC_READDIRPLUS] -
			    lastst.rpccnt[NFSPROC_READDIRPLUS]));
		if (display & SHOW_SERVER)
			printf("Server: "
			    "%8llu %8llu %8llu %8llu %8llu %8llu %8llu %8llu\n",
			    nfsstats.srvrpccnt[NFSPROC_GETATTR] -
			    lastst.srvrpccnt[NFSPROC_GETATTR],
			    nfsstats.srvrpccnt[NFSPROC_LOOKUP] -
			    lastst.srvrpccnt[NFSPROC_LOOKUP],
			    nfsstats.srvrpccnt[NFSPROC_READLINK] -
			    lastst.srvrpccnt[NFSPROC_READLINK],
			    nfsstats.srvrpccnt[NFSPROC_READ] -
			    lastst.srvrpccnt[NFSPROC_READ],
			    nfsstats.srvrpccnt[NFSPROC_WRITE] -
			    lastst.srvrpccnt[NFSPROC_WRITE],
			    nfsstats.srvrpccnt[NFSPROC_RENAME] -
			    lastst.srvrpccnt[NFSPROC_RENAME],
			    nfsstats.srvrpccnt[NFSPROC_ACCESS] -
			    lastst.srvrpccnt[NFSPROC_ACCESS],
			    (nfsstats.srvrpccnt[NFSPROC_READDIR] -
			    lastst.srvrpccnt[NFSPROC_READDIR]) +
			    (nfsstats.srvrpccnt[NFSPROC_READDIRPLUS] -
			    lastst.srvrpccnt[NFSPROC_READDIRPLUS]));
		lastst = nfsstats;
		fflush(stdout);
		sigemptyset(&emptyset);
		if (!signalled)
			sigsuspend(&emptyset);
		signalled = 0;
		(void)alarm(interval);
	}
	/*NOTREACHED*/
}

void
printhdr(void)
{
	printf("        %8.8s %8.8s %8.8s %8.8s %8.8s %8.8s %8.8s %8.8s\n",
	    "Getattr", "Lookup", "Readlink", "Read", "Write", "Rename",
	    "Access", "Readdir");
	fflush(stdout);
}

/*
 * Called if an interval expires before sidewaysintpr has completed a loop.
 * Sets a flag to not wait for the alarm.
 */
/* ARGSUSED */
void
catchalarm(int signo)
{
	signalled = 1;
}

void
usage(void)
{
	extern char *__progname;

	fprintf(stderr, "usage: %s [-cs] [-M core] [-N system] [-w wait]\n",
	    __progname);
	exit(1);
}
@


1.35
log
@cleanup argv handling a bit
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsstat.c,v 1.34 2015/01/16 06:40:10 deraadt Exp $	*/
d39 1
@


1.34
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsstat.c,v 1.33 2009/10/27 23:59:40 deraadt Exp $	*/
d115 1
a115 3
#define	BACKWARD_COMPATIBILITY
#ifdef	BACKWARD_COMPATIBILITY
	if (*argv) {
d119 2
a120 5
		if (*++argv) {
			nlistf = *argv;
			if (*++argv)
				memf = *argv;
		}
a121 1
#endif
@


1.33
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsstat.c,v 1.32 2009/06/05 19:32:26 jasper Exp $	*/
d36 1
a36 1
#include <sys/param.h>
@


1.32
log
@- remove an over-obvious header

prompted by deraadt@@
"nuke nuke nuke" thib@@
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsstat.c,v 1.31 2008/12/26 15:09:40 sobrado Exp $	*/
a34 15

#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1983, 1989, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "from: @@(#)nfsstat.c	8.1 (Berkeley) 6/6/93";
static char *rcsid = "$NetBSD: nfsstat.c,v 1.7 1996/03/03 17:21:30 thorpej Exp $";
#else
static char *rcsid = "$OpenBSD: nfsstat.c,v 1.31 2008/12/26 15:09:40 sobrado Exp $";
#endif
#endif /* not lint */
@


1.31
log
@synchronize synopsis and usage.
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsstat.c,v 1.30 2008/06/12 19:14:15 thib Exp $	*/
d47 1
a47 1
static char *rcsid = "$OpenBSD: nfsstat.c,v 1.30 2008/06/12 19:14:15 thib Exp $";
a218 1
		printf("Rpc Counts:\n");
@


1.30
log
@add a statistic bit to count how often we change async to sync

you need to upgrade nfsstat and the relevant header files

ok beck@@
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsstat.c,v 1.29 2006/04/03 06:40:14 deraadt Exp $	*/
d47 1
a47 1
static char *rcsid = "$OpenBSD: nfsstat.c,v 1.29 2006/04/03 06:40:14 deraadt Exp $";
d451 1
a451 2
	fprintf(stderr,
	    "usage: %s [-cs] [-M core] [-N system] [-w interval]\n",
@


1.29
log
@lint, strtonum()
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsstat.c,v 1.28 2005/08/01 22:28:19 millert Exp $	*/
d47 1
a47 1
static char *rcsid = "$OpenBSD: nfsstat.c,v 1.28 2005/08/01 22:28:19 millert Exp $";
d253 4
a256 3
		printf("%9.9s %9.9s %9.9s %9.9s %9.9s\n",
		    "TimedOut", "Invalid", "X Replies", "Retries", "Requests");
		printf("%9llu %9llu %9llu %9llu %9llu\n",
d261 2
a262 1
		    nfsstats.rpcrequests);
@


1.28
log
@Fix some signed vs. unsigned mismatches in the format strings and fix
the remaining 64 bit integers being printed as 32 bit.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsstat.c,v 1.27 2005/08/01 22:23:55 deraadt Exp $	*/
d47 1
a47 1
static char *rcsid = "$OpenBSD: nfsstat.c,v 1.27 2005/08/01 22:23:55 deraadt Exp $";
d94 1
a96 3
	char *p;
	u_int interval;
	u_int display = SHOW_ALL;
d98 1
d112 4
a115 3
			interval = (u_int)strtol(optarg, &p, 0);
			if (*optarg == '\0' || *p != '\0')
				errx(1, "invalid interval");
d133 3
a135 1
		interval = atoi(*argv);
d361 1
a361 1
	bzero((caddr_t)&lastst, sizeof(lastst));
@


1.27
log
@64-bit nfsstats delta printing still required %llu instead of %d specifiers
spotted as being wrong by matthieu, fix by me
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsstat.c,v 1.26 2005/06/08 04:17:14 marius Exp $	*/
d47 1
a47 1
static char *rcsid = "$OpenBSD: nfsstat.c,v 1.26 2005/06/08 04:17:14 marius Exp $";
d221 1
a221 1
		printf("%9lld %9lld %9lld %9lld %9lld %9lld %9lld %9lld\n",
d233 1
a233 1
		printf("%9lld %9lld %9lld %9lld %9lld %9lld %9lld %9lld\n",
d244 1
a244 1
		printf("%9lld %9lld %9lld %9lld %9lld\n",
d253 1
a253 1
		printf("%9lld %9lld %9lld %9lld %9lld\n",
d264 1
a264 1
		printf("%9lld %9lld %9lld %9lld",
d267 1
a267 1
		printf(" %9lld %9lld %9lld %9lld\n",
d275 1
a275 1
		printf("%9lld %9lld %9lld %9lld",
d280 1
a280 1
		printf(" %9lld %9lld\n",
d292 1
a292 1
		printf("%9lld %9lld %9lld %9lld %9lld %9lld %9lld %9lld\n",
d304 1
a304 1
		printf("%9lld %9lld %9lld %9lld %9lld %9lld %9lld %9lld\n",
d315 1
a315 1
		printf("%9lld %9lld %9lld %9lld %9lld\n",
d322 1
a322 1
		printf("%17d\n", nfsstats.srvrpc_errs);
d324 1
a324 1
		printf("%13d\n", nfsstats.srv_errs);
d328 1
a328 1
		printf("%9lld %9lld %9lld %9lld\n",
d336 1
a336 1
		printf("%9lld %9lld %9lld\n",
@


1.26
log
@make nfsstats counters 64 bit.

ok pedro@@
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsstat.c,v 1.25 2004/12/14 12:21:04 pedro Exp $	*/
d47 1
a47 1
static char *rcsid = "$OpenBSD: nfsstat.c,v 1.25 2004/12/14 12:21:04 pedro Exp $";
d370 20
a389 19
		  printf("Client: %8d %8d %8d %8d %8d %8d %8d %8d\n",
		    nfsstats.rpccnt[NFSPROC_GETATTR] -
		    lastst.rpccnt[NFSPROC_GETATTR],
		    nfsstats.rpccnt[NFSPROC_LOOKUP] -
		    lastst.rpccnt[NFSPROC_LOOKUP],
		    nfsstats.rpccnt[NFSPROC_READLINK] -
		    lastst.rpccnt[NFSPROC_READLINK],
		    nfsstats.rpccnt[NFSPROC_READ] -
		    lastst.rpccnt[NFSPROC_READ],
		    nfsstats.rpccnt[NFSPROC_WRITE] -
		    lastst.rpccnt[NFSPROC_WRITE],
		    nfsstats.rpccnt[NFSPROC_RENAME] -
		    lastst.rpccnt[NFSPROC_RENAME],
		    nfsstats.rpccnt[NFSPROC_ACCESS] -
		    lastst.rpccnt[NFSPROC_ACCESS],
		    (nfsstats.rpccnt[NFSPROC_READDIR] -
		    lastst.rpccnt[NFSPROC_READDIR]) +
		    (nfsstats.rpccnt[NFSPROC_READDIRPLUS] -
		    lastst.rpccnt[NFSPROC_READDIRPLUS]));
d391 20
a410 19
		  printf("Server: %8d %8d %8d %8d %8d %8d %8d %8d\n",
		    nfsstats.srvrpccnt[NFSPROC_GETATTR] -
		    lastst.srvrpccnt[NFSPROC_GETATTR],
		    nfsstats.srvrpccnt[NFSPROC_LOOKUP] -
		    lastst.srvrpccnt[NFSPROC_LOOKUP],
		    nfsstats.srvrpccnt[NFSPROC_READLINK] -
		    lastst.srvrpccnt[NFSPROC_READLINK],
		    nfsstats.srvrpccnt[NFSPROC_READ] -
		    lastst.srvrpccnt[NFSPROC_READ],
		    nfsstats.srvrpccnt[NFSPROC_WRITE] -
		    lastst.srvrpccnt[NFSPROC_WRITE],
		    nfsstats.srvrpccnt[NFSPROC_RENAME] -
		    lastst.srvrpccnt[NFSPROC_RENAME],
		    nfsstats.srvrpccnt[NFSPROC_ACCESS] -
		    lastst.srvrpccnt[NFSPROC_ACCESS],
		    (nfsstats.srvrpccnt[NFSPROC_READDIR] -
		    lastst.srvrpccnt[NFSPROC_READDIR]) +
		    (nfsstats.srvrpccnt[NFSPROC_READDIRPLUS] -
		    lastst.srvrpccnt[NFSPROC_READDIRPLUS]));
@


1.25
log
@only print a separating '\n' when showing both server and client info
ok deraadt@@ hshoexer@@
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsstat.c,v 1.24 2004/09/14 23:53:22 deraadt Exp $	*/
d47 1
a47 1
static char *rcsid = "$OpenBSD: nfsstat.c,v 1.24 2004/09/14 23:53:22 deraadt Exp $";
d221 1
a221 1
		printf("%9d %9d %9d %9d %9d %9d %9d %9d\n",
d233 1
a233 1
		printf("%9d %9d %9d %9d %9d %9d %9d %9d\n",
d244 1
a244 1
		printf("%9d %9d %9d %9d %9d\n",
d253 1
a253 1
		printf("%9d %9d %9d %9d %9d\n",
d264 1
a264 1
		printf("%9d %9d %9d %9d",
d267 1
a267 1
		printf(" %9d %9d %9d %9d\n",
d275 1
a275 1
		printf("%9d %9d %9d %9d",
d280 1
a280 1
		printf(" %9d %9d\n",
d292 1
a292 1
		printf("%9d %9d %9d %9d %9d %9d %9d %9d\n",
d304 1
a304 1
		printf("%9d %9d %9d %9d %9d %9d %9d %9d\n",
d315 1
a315 1
		printf("%9d %9d %9d %9d %9d\n",
d328 1
a328 1
		printf("%9d %9d %9d %9d\n",
d336 1
a336 1
		printf("%9d %9d %9d\n",
@


1.24
log
@ARGSUSED before signal handler with unused signo
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsstat.c,v 1.23 2004/05/09 03:28:11 deraadt Exp $	*/
d47 1
a47 1
static char *rcsid = "$OpenBSD: nfsstat.c,v 1.23 2004/05/09 03:28:11 deraadt Exp $";
d283 4
d288 1
a288 1
		printf("\nServer Info:\n");
@


1.23
log
@knf
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsstat.c,v 1.22 2004/03/02 20:49:41 tedu Exp $	*/
d47 1
a47 1
static char *rcsid = "$OpenBSD: nfsstat.c,v 1.22 2004/03/02 20:49:41 tedu Exp $";
d429 1
@


1.22
log
@pretty usage and sort options.  started by Andrey Matveev
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsstat.c,v 1.21 2003/07/07 21:36:52 deraadt Exp $	*/
d47 1
a47 1
static char *rcsid = "$OpenBSD: nfsstat.c,v 1.21 2003/07/07 21:36:52 deraadt Exp $";
d219 2
a220 2
		       "Getattr", "Setattr", "Lookup", "Readlink", "Read",
		       "Write", "Create", "Remove");
d222 8
a229 8
		       nfsstats.rpccnt[NFSPROC_GETATTR],
		       nfsstats.rpccnt[NFSPROC_SETATTR],
		       nfsstats.rpccnt[NFSPROC_LOOKUP],
		       nfsstats.rpccnt[NFSPROC_READLINK],
		       nfsstats.rpccnt[NFSPROC_READ],
		       nfsstats.rpccnt[NFSPROC_WRITE],
		       nfsstats.rpccnt[NFSPROC_CREATE],
		       nfsstats.rpccnt[NFSPROC_REMOVE]);
d231 2
a232 2
		       "Rename", "Link", "Symlink", "Mkdir", "Rmdir",
		       "Readdir", "RdirPlus", "Access");
d234 8
a241 8
		       nfsstats.rpccnt[NFSPROC_RENAME],
		       nfsstats.rpccnt[NFSPROC_LINK],
		       nfsstats.rpccnt[NFSPROC_SYMLINK],
		       nfsstats.rpccnt[NFSPROC_MKDIR],
		       nfsstats.rpccnt[NFSPROC_RMDIR],
		       nfsstats.rpccnt[NFSPROC_READDIR],
		       nfsstats.rpccnt[NFSPROC_READDIRPLUS],
		       nfsstats.rpccnt[NFSPROC_ACCESS]);
d243 1
a243 1
		       "Mknod", "Fsstat", "Fsinfo", "PathConf", "Commit");
d245 5
a249 5
		       nfsstats.rpccnt[NFSPROC_MKNOD],
		       nfsstats.rpccnt[NFSPROC_FSSTAT],
		       nfsstats.rpccnt[NFSPROC_FSINFO],
		       nfsstats.rpccnt[NFSPROC_PATHCONF],
		       nfsstats.rpccnt[NFSPROC_COMMIT]);
d252 1
a252 1
		       "TimedOut", "Invalid", "X Replies", "Retries", "Requests");
d254 5
a258 5
		       nfsstats.rpctimeouts,
		       nfsstats.rpcinvalid,
		       nfsstats.rpcunexpected,
		       nfsstats.rpcretries,
		       nfsstats.rpcrequests);
d261 1
a261 1
		       "Attr Hits", "Misses", "Lkup Hits", "Misses");
d263 1
a263 1
		       "BioR Hits", "Misses", "BioW Hits", "Misses");
d265 2
a266 2
		       nfsstats.attrcache_hits, nfsstats.attrcache_misses,
		       nfsstats.lookupcache_hits, nfsstats.lookupcache_misses);
d268 4
a271 4
		       nfsstats.biocache_reads-nfsstats.read_bios,
		       nfsstats.read_bios,
		       nfsstats.biocache_writes-nfsstats.write_bios,
		       nfsstats.write_bios);
d273 1
a273 1
		       "BioRLHits", "Misses", "BioD Hits", "Misses");
d276 4
a279 4
		       nfsstats.biocache_readlinks-nfsstats.readlink_bios,
		       nfsstats.readlink_bios,
		       nfsstats.biocache_readdirs-nfsstats.readdir_bios,
		       nfsstats.readdir_bios);
d281 1
a281 1
		       nfsstats.direofcache_hits, nfsstats.direofcache_misses);
d286 2
a287 2
		       "Getattr", "Setattr", "Lookup", "Readlink", "Read",
		       "Write", "Create", "Remove");
d289 8
a296 8
		       nfsstats.srvrpccnt[NFSPROC_GETATTR],
		       nfsstats.srvrpccnt[NFSPROC_SETATTR],
		       nfsstats.srvrpccnt[NFSPROC_LOOKUP],
		       nfsstats.srvrpccnt[NFSPROC_READLINK],
		       nfsstats.srvrpccnt[NFSPROC_READ],
		       nfsstats.srvrpccnt[NFSPROC_WRITE],
		       nfsstats.srvrpccnt[NFSPROC_CREATE],
		       nfsstats.srvrpccnt[NFSPROC_REMOVE]);
d298 2
a299 2
		       "Rename", "Link", "Symlink", "Mkdir", "Rmdir",
		       "Readdir", "RdirPlus", "Access");
d301 8
a308 8
		       nfsstats.srvrpccnt[NFSPROC_RENAME],
		       nfsstats.srvrpccnt[NFSPROC_LINK],
		       nfsstats.srvrpccnt[NFSPROC_SYMLINK],
		       nfsstats.srvrpccnt[NFSPROC_MKDIR],
		       nfsstats.srvrpccnt[NFSPROC_RMDIR],
		       nfsstats.srvrpccnt[NFSPROC_READDIR],
		       nfsstats.srvrpccnt[NFSPROC_READDIRPLUS],
		       nfsstats.srvrpccnt[NFSPROC_ACCESS]);
d310 1
a310 1
		       "Mknod", "Fsstat", "Fsinfo", "PathConf", "Commit");
d312 5
a316 5
		       nfsstats.srvrpccnt[NFSPROC_MKNOD],
		       nfsstats.srvrpccnt[NFSPROC_FSSTAT],
		       nfsstats.srvrpccnt[NFSPROC_FSINFO],
		       nfsstats.srvrpccnt[NFSPROC_PATHCONF],
		       nfsstats.srvrpccnt[NFSPROC_COMMIT]);
d323 1
a323 1
		       "Inprog", "Idem", "Non-idem", "Misses");
d325 4
a328 4
		       nfsstats.srvcache_inproghits,
		       nfsstats.srvcache_idemdonehits,
		       nfsstats.srvcache_nonidemdonehits,
		       nfsstats.srvcache_misses);
d331 1
a331 1
		       "WriteOps", "WriteRPC", "Opsaved");
d333 3
a335 3
		       nfsstats.srvvop_writes,
		       nfsstats.srvrpccnt[NFSPROC_WRITE],
		       nfsstats.srvrpccnt[NFSPROC_WRITE] - nfsstats.srvvop_writes);
d367 18
a384 9
		    nfsstats.rpccnt[NFSPROC_GETATTR]-lastst.rpccnt[NFSPROC_GETATTR],
		    nfsstats.rpccnt[NFSPROC_LOOKUP]-lastst.rpccnt[NFSPROC_LOOKUP],
		    nfsstats.rpccnt[NFSPROC_READLINK]-lastst.rpccnt[NFSPROC_READLINK],
		    nfsstats.rpccnt[NFSPROC_READ]-lastst.rpccnt[NFSPROC_READ],
		    nfsstats.rpccnt[NFSPROC_WRITE]-lastst.rpccnt[NFSPROC_WRITE],
		    nfsstats.rpccnt[NFSPROC_RENAME]-lastst.rpccnt[NFSPROC_RENAME],
		    nfsstats.rpccnt[NFSPROC_ACCESS]-lastst.rpccnt[NFSPROC_ACCESS],
		    (nfsstats.rpccnt[NFSPROC_READDIR]-lastst.rpccnt[NFSPROC_READDIR])
		    +(nfsstats.rpccnt[NFSPROC_READDIRPLUS]-lastst.rpccnt[NFSPROC_READDIRPLUS]));
d387 18
a404 9
		    nfsstats.srvrpccnt[NFSPROC_GETATTR]-lastst.srvrpccnt[NFSPROC_GETATTR],
		    nfsstats.srvrpccnt[NFSPROC_LOOKUP]-lastst.srvrpccnt[NFSPROC_LOOKUP],
		    nfsstats.srvrpccnt[NFSPROC_READLINK]-lastst.srvrpccnt[NFSPROC_READLINK],
		    nfsstats.srvrpccnt[NFSPROC_READ]-lastst.srvrpccnt[NFSPROC_READ],
		    nfsstats.srvrpccnt[NFSPROC_WRITE]-lastst.srvrpccnt[NFSPROC_WRITE],
		    nfsstats.srvrpccnt[NFSPROC_RENAME]-lastst.srvrpccnt[NFSPROC_RENAME],
		    nfsstats.srvrpccnt[NFSPROC_ACCESS]-lastst.srvrpccnt[NFSPROC_ACCESS],
		    (nfsstats.srvrpccnt[NFSPROC_READDIR]-lastst.srvrpccnt[NFSPROC_READDIR])
		    +(nfsstats.srvrpccnt[NFSPROC_READDIRPLUS]-lastst.srvrpccnt[NFSPROC_READDIRPLUS]));
@


1.21
log
@protos
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsstat.c,v 1.20 2003/06/26 21:59:10 deraadt Exp $	*/
d47 1
a47 1
static char *rcsid = "$OpenBSD: nfsstat.c,v 1.20 2003/06/26 21:59:10 deraadt Exp $";
d104 1
a104 1
	while ((ch = getopt(argc, argv, "M:N:w:sc")) != -1)
d421 1
d423 1
a423 1
	    "usage: %s [-M core] [-N system] [-s] [-c] [-w interval]\n",
@


1.20
log
@more proto fixes
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsstat.c,v 1.19 2003/06/10 22:20:49 deraadt Exp $	*/
d47 1
a47 1
static char *rcsid = "$OpenBSD: nfsstat.c,v 1.19 2003/06/10 22:20:49 deraadt Exp $";
d89 1
a350 1
	void catchalarm(int);
@


1.19
log
@mostly ansi cleanup; pval ok
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsstat.c,v 1.18 2003/06/03 02:56:13 millert Exp $	*/
d47 1
a47 1
static char *rcsid = "$OpenBSD: nfsstat.c,v 1.18 2003/06/03 02:56:13 millert Exp $";
d350 1
a350 1
	void catchalarm();
d412 1
a412 1
catchalarm(void)
@


1.18
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsstat.c,v 1.17 2003/01/15 22:57:42 millert Exp $	*/
d47 1
a47 1
static char *rcsid = "$OpenBSD: nfsstat.c,v 1.17 2003/01/15 22:57:42 millert Exp $";
d91 1
a91 3
main(argc, argv)
	int argc;
	char **argv;
d186 1
a186 2
getnfsstats(p)
	struct nfsstats *p;
d208 1
a208 2
intpr(display)
	u_int display;
d345 1
a345 3
sidewaysintpr(interval, display)
	u_int interval;
	u_int display;
d399 1
a399 1
printhdr()
d412 1
a412 1
catchalarm()
d418 1
a418 1
usage()
@


1.17
log
@mib[4], not mib[3]; fixes nfsstat breakage
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsstat.c,v 1.16 2003/01/15 22:20:15 millert Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d47 1
a47 1
static char *rcsid = "$OpenBSD: nfsstat.c,v 1.16 2003/01/15 22:20:15 millert Exp $";
@


1.16
log
@Better fix for the sysctl() loop; deraadt@@ OK
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsstat.c,v 1.15 2003/01/15 21:25:44 millert Exp $	*/
d51 1
a51 1
static char *rcsid = "$OpenBSD: nfsstat.c,v 1.15 2003/01/15 21:25:44 millert Exp $";
d154 1
a154 1
		int mib[3];
@


1.15
log
@Don't report NQNFS stats, we don't do NQNFS anymore.
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsstat.c,v 1.14 2003/01/15 21:20:03 deraadt Exp $	*/
d51 1
a51 1
static char *rcsid = "$OpenBSD: nfsstat.c,v 1.14 2003/01/15 21:20:03 deraadt Exp $";
d164 1
a164 1
		do {
d178 2
a179 3
		} while (--nfs_id);

		if (nfs_id < 0)
@


1.14
log
@cope with nfs being last in the list
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsstat.c,v 1.13 2002/02/16 21:27:50 millert Exp $	*/
d51 1
a51 1
static char *rcsid = "$OpenBSD: nfsstat.c,v 1.13 2002/02/16 21:27:50 millert Exp $";
a336 7
		printf("Server Lease Stats:\n");
		printf("%9.9s %9.9s %9.9s\n",
		       "Leases", "PeakL", "GLeases");
		printf("%9d %9d %9d\n",
		       nfsstats.srvnqnfs_leases,
		       nfsstats.srvnqnfs_maxleases,
		       nfsstats.srvnqnfs_getleases);
@


1.13
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsstat.c,v 1.12 2001/09/04 23:35:59 millert Exp $	*/
d51 1
a51 1
static char *rcsid = "$OpenBSD: nfsstat.c,v 1.12 2001/09/04 23:35:59 millert Exp $";
d164 1
a164 1
		while (nfs_id--) {
d178 1
a178 1
		}
@


1.12
log
@Replace the deprecated BSD sigsetmask/sigblock/sigpause functions with their POSIX counterparts.
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsstat.c,v 1.11 2001/06/25 17:15:46 markus Exp $	*/
d51 1
a51 1
static char *rcsid = "$OpenBSD: nfsstat.c,v 1.11 2001/06/25 17:15:46 markus Exp $";
d88 5
a92 5
void getnfsstats __P((struct nfsstats *));
void printhdr __P((void));
void intpr __P((u_int));
void sidewaysintpr __P((u_int, u_int));
void usage __P((void));
@


1.11
log
@nqfs is gone, ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsstat.c,v 1.10 2000/05/01 19:48:04 provos Exp $	*/
d51 1
a51 1
static char *rcsid = "$OpenBSD: nfsstat.c,v 1.10 2000/05/01 19:48:04 provos Exp $";
d85 1
a85 1
u_char	signalled;			/* set if alarm goes off "early" */
d366 2
a367 1
	int hdrcnt, oldmask;
d407 1
a407 1
		oldmask = sigblock(sigmask(SIGALRM));
d409 1
a409 2
			sigpause(0);
		sigsetmask(oldmask);
@


1.10
log
@accept valid intervals for -w
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsstat.c,v 1.9 2000/04/18 20:17:54 mickey Exp $	*/
d51 1
a51 1
static char *rcsid = "$OpenBSD: nfsstat.c,v 1.9 2000/04/18 20:17:54 mickey Exp $";
d250 3
a252 4
		printf("%9.9s %9.9s %9.9s %9.9s %9.9s %9.9s %9.9s %9.9s\n",
		       "Mknod", "Fsstat", "Fsinfo", "PathConf", "Commit",
		       "GLease", "Vacate", "Evict");
		printf("%9d %9d %9d %9d %9d %9d %9d %9d\n",
d257 1
a257 4
		       nfsstats.rpccnt[NFSPROC_COMMIT],
		       nfsstats.rpccnt[NQNFSPROC_GETLEASE],
		       nfsstats.rpccnt[NQNFSPROC_VACATED],
		       nfsstats.rpccnt[NQNFSPROC_EVICTED]);
d317 3
a319 4
		printf("%9.9s %9.9s %9.9s %9.9s %9.9s %9.9s %9.9s %9.9s\n",
		       "Mknod", "Fsstat", "Fsinfo", "PathConf", "Commit",
		       "GLease", "Vacate", "Evict");
		printf("%9d %9d %9d %9d %9d %9d %9d %9d\n",
d324 1
a324 4
		       nfsstats.srvrpccnt[NFSPROC_COMMIT],
		       nfsstats.srvrpccnt[NQNFSPROC_GETLEASE],
		       nfsstats.srvrpccnt[NQNFSPROC_VACATED],
		       nfsstats.srvrpccnt[NQNFSPROC_EVICTED]);
@


1.9
log
@add back a way to analyze post-mortem cores; does not need sgid for syctl() thoguh
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsstat.c,v 1.8 2000/04/18 15:24:26 mickey Exp $	*/
d51 1
a51 1
static char *rcsid = "$OpenBSD: nfsstat.c,v 1.8 2000/04/18 15:24:26 mickey Exp $";
d119 1
a119 1
			if (*optarg != '\0' && *p == '\0')
@


1.8
log
@use sysctl() to fetch struct nfsstats; no more -lkvm; millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsstat.c,v 1.7 1998/07/05 18:42:43 deraadt Exp $	*/
d51 1
a51 1
static char *rcsid = "$OpenBSD: nfsstat.c,v 1.7 1998/07/05 18:42:43 deraadt Exp $";
d62 2
d65 2
d71 2
d79 6
d89 4
a92 4
static __inline void printhdr __P((void));
static __inline void intpr __P((u_int));
static __inline void sidewaysintpr __P((u_int, u_int));
static __inline void usage __P((void));
d104 1
d108 1
d112 2
d115 1
a115 1
			/* compat */
d135 19
a153 1
	{
a183 5
#define	BACKWARD_COMPATIBILITY
#ifdef	BACKWARD_COMPATIBILITY
	if (*argv)
		interval = atoi(*argv);
#endif
d196 6
a201 2
	int mib[3];
	size_t len = sizeof(*p);
d203 3
a205 3
	mib[0] = CTL_VFS;
	mib[1] = nfs_id; /* 2 */
	mib[2] = NFS_NFSSTATS;
d207 3
a209 2
	if (sysctl(mib, 3, p, &len, NULL, 0))
		err(1, "sysctl");
d215 1
a215 1
static __inline void
d368 1
a368 1
static __inline void
d424 1
a424 1
static __inline void
d443 1
a443 1
static __inline void
d447 3
a449 1
	fprintf(stderr, "usage: %s [-s] [-c] [-w interval]\n", __progname);
@


1.7
log
@check kvm_read() better; msaitoh
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsstat.c,v 1.6 1997/01/15 23:42:57 millert Exp $	*/
d51 1
a51 1
static char *rcsid = "$OpenBSD: nfsstat.c,v 1.6 1997/01/15 23:42:57 millert Exp $";
a61 2
#include <fcntl.h>
#include <ctype.h>
a62 2
#include <kvm.h>
#include <nlist.h>
a66 2
#include <limits.h>
#include <paths.h>
d73 2
a74 6
struct nlist nl[] = {
#define	N_NFSSTAT	0
	{ "_nfsstats" },
	"",
};
kvm_t *kd;
d76 5
a80 1
void intpr(), printhdr(), sidewaysintpr(), usage();
d82 1
d89 1
a92 2
	char *memf, *nlistf;
	char errbuf[_POSIX2_LINE_MAX];
a94 1
	memf = nlistf = NULL;
a97 2
			memf = optarg;
			break;
d99 1
a99 1
			nlistf = optarg;
d102 3
a104 1
			interval = atoi(optarg);
d119 31
d152 1
a152 1
	if (*argv) {
a153 6
		if (*++argv) {
			nlistf = *argv;
			if (*++argv)
				memf = *argv;
		}
	}
d155 14
a168 8
	/*
	 * Discard setgid privileges if not the running kernel so that bad
	 * guys can't print interesting stuff from kernel memory.
	 */
	if (nlistf != NULL || memf != NULL) {
		setegid(getgid());
		setgid(getgid());
	}
d170 3
a172 8
	if ((kd = kvm_openfiles(nlistf, memf, NULL, O_RDONLY, errbuf)) == 0) {
		fprintf(stderr, "nfsstat: kvm_openfiles: %s\n", errbuf);
		exit(1);
	}
	if (kvm_nlist(kd, nl) != 0) {
		fprintf(stderr, "nfsstat: kvm_nlist: can't get names\n");
		exit(1);
	}
d174 2
a175 5
	if (interval)
		sidewaysintpr(interval, nl[N_NFSSTAT].n_value, display);
	else
		intpr(nl[N_NFSSTAT].n_value, display);
	exit(0);
d181 2
a182 3
void
intpr(nfsstataddr, display)
	u_long nfsstataddr;
d187 2
a188 5
	if (kvm_read(kd, (u_long)nfsstataddr, (char *)&nfsstats,
	    sizeof(struct nfsstats)) != sizeof(struct nfsstats)) {
		fprintf(stderr, "nfsstat: kvm_read failed\n");
		exit(1);
	}
a327 2
u_char	signalled;			/* set if alarm goes off "early" */

d334 2
a335 2
void
sidewaysintpr(interval, off, display)
a336 1
	u_long off;
d353 3
a355 5
		if (kvm_read(kd, off, (char *)&nfsstats, sizeof nfsstats) !=
		    sizeof nfsstats) {
			fprintf(stderr, "nfsstat: kvm_read failed\n");
			exit(1);
		}
d390 1
a390 1
void
d409 1
a409 1
void
d412 2
a413 2
	(void)fprintf(stderr,
	    "usage: nfsstat [-M core] [-N system] [-w interval]\n");
@


1.6
log
@getopt(3) returns -1 when out of args, not EOF, whee!
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsstat.c,v 1.5 1996/12/22 03:25:59 tholo Exp $	*/
d51 1
a51 1
static char *rcsid = "$OpenBSD: nfsstat.c,v 1.5 1996/12/22 03:25:59 tholo Exp $";
d172 2
a173 1
	if (kvm_read(kd, (u_long)nfsstataddr, (char *)&nfsstats, sizeof(struct nfsstats)) < 0) {
d344 2
a345 1
		if (kvm_read(kd, off, (char *)&nfsstats, sizeof nfsstats) < 0) {
@


1.5
log
@Deal with _POSIX_SAVED_IDS when relinquishing privileges
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsstat.c,v 1.4 1996/12/15 18:52:19 kstailey Exp $	*/
d51 1
a51 1
static char *rcsid = "$OpenBSD: nfsstat.c,v 1.4 1996/12/15 18:52:19 kstailey Exp $";
d102 1
a102 1
	while ((ch = getopt(argc, argv, "M:N:w:sc")) != EOF)
@


1.4
log
@added -s (display server report only) and -c (ditto client) flags
@
text
@d1 1
a1 1
/*	$OpenBSD: nfsstat.c,v 1.3 1996/08/06 18:36:59 deraadt Exp $	*/
d51 1
a51 1
static char *rcsid = "$OpenBSD: nfsstat.c,v 1.3 1996/08/06 18:36:59 deraadt Exp $";
d141 2
a142 1
	if (nlistf != NULL || memf != NULL)
d144 1
@


1.3
log
@_POSIX2_LINE_MAX errbuf for kvm_openfiles()
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d51 1
a51 1
static char *rcsid = "$OpenBSD$";
d75 4
d95 1
d102 1
a102 1
	while ((ch = getopt(argc, argv, "M:N:w:")) != EOF)
d113 6
d154 1
a154 1
		sidewaysintpr(interval, nl[N_NFSSTAT].n_value);
d156 1
a156 1
		intpr(nl[N_NFSSTAT].n_value);
d164 1
a164 1
intpr(nfsstataddr)
d166 1
d174 137
a310 133
	printf("Client Info:\n");
	printf("Rpc Counts:\n");
	printf("%9.9s %9.9s %9.9s %9.9s %9.9s %9.9s %9.9s %9.9s\n",
		"Getattr", "Setattr", "Lookup", "Readlink", "Read",
		"Write", "Create", "Remove");
	printf("%9d %9d %9d %9d %9d %9d %9d %9d\n",
		nfsstats.rpccnt[NFSPROC_GETATTR],
		nfsstats.rpccnt[NFSPROC_SETATTR],
		nfsstats.rpccnt[NFSPROC_LOOKUP],
		nfsstats.rpccnt[NFSPROC_READLINK],
		nfsstats.rpccnt[NFSPROC_READ],
		nfsstats.rpccnt[NFSPROC_WRITE],
		nfsstats.rpccnt[NFSPROC_CREATE],
		nfsstats.rpccnt[NFSPROC_REMOVE]);
	printf("%9.9s %9.9s %9.9s %9.9s %9.9s %9.9s %9.9s %9.9s\n",
		"Rename", "Link", "Symlink", "Mkdir", "Rmdir",
		"Readdir", "RdirPlus", "Access");
	printf("%9d %9d %9d %9d %9d %9d %9d %9d\n",
		nfsstats.rpccnt[NFSPROC_RENAME],
		nfsstats.rpccnt[NFSPROC_LINK],
		nfsstats.rpccnt[NFSPROC_SYMLINK],
		nfsstats.rpccnt[NFSPROC_MKDIR],
		nfsstats.rpccnt[NFSPROC_RMDIR],
		nfsstats.rpccnt[NFSPROC_READDIR],
		nfsstats.rpccnt[NFSPROC_READDIRPLUS],
		nfsstats.rpccnt[NFSPROC_ACCESS]);
	printf("%9.9s %9.9s %9.9s %9.9s %9.9s %9.9s %9.9s %9.9s\n",
		"Mknod", "Fsstat", "Fsinfo", "PathConf", "Commit",
		"GLease", "Vacate", "Evict");
	printf("%9d %9d %9d %9d %9d %9d %9d %9d\n",
		nfsstats.rpccnt[NFSPROC_MKNOD],
		nfsstats.rpccnt[NFSPROC_FSSTAT],
		nfsstats.rpccnt[NFSPROC_FSINFO],
		nfsstats.rpccnt[NFSPROC_PATHCONF],
		nfsstats.rpccnt[NFSPROC_COMMIT],
		nfsstats.rpccnt[NQNFSPROC_GETLEASE],
		nfsstats.rpccnt[NQNFSPROC_VACATED],
		nfsstats.rpccnt[NQNFSPROC_EVICTED]);
	printf("Rpc Info:\n");
	printf("%9.9s %9.9s %9.9s %9.9s %9.9s\n",
		"TimedOut", "Invalid", "X Replies", "Retries", "Requests");
	printf("%9d %9d %9d %9d %9d\n",
		nfsstats.rpctimeouts,
		nfsstats.rpcinvalid,
		nfsstats.rpcunexpected,
		nfsstats.rpcretries,
		nfsstats.rpcrequests);
	printf("Cache Info:\n");
	printf("%9.9s %9.9s %9.9s %9.9s",
		"Attr Hits", "Misses", "Lkup Hits", "Misses");
	printf(" %9.9s %9.9s %9.9s %9.9s\n",
		"BioR Hits", "Misses", "BioW Hits", "Misses");
	printf("%9d %9d %9d %9d",
		nfsstats.attrcache_hits, nfsstats.attrcache_misses,
		nfsstats.lookupcache_hits, nfsstats.lookupcache_misses);
	printf(" %9d %9d %9d %9d\n",
		nfsstats.biocache_reads-nfsstats.read_bios,
		nfsstats.read_bios,
		nfsstats.biocache_writes-nfsstats.write_bios,
		nfsstats.write_bios);
	printf("%9.9s %9.9s %9.9s %9.9s",
		"BioRLHits", "Misses", "BioD Hits", "Misses");
	printf(" %9.9s %9.9s\n", "DirE Hits", "Misses");
	printf("%9d %9d %9d %9d",
		nfsstats.biocache_readlinks-nfsstats.readlink_bios,
		nfsstats.readlink_bios,
		nfsstats.biocache_readdirs-nfsstats.readdir_bios,
		nfsstats.readdir_bios);
	printf(" %9d %9d\n",
		nfsstats.direofcache_hits, nfsstats.direofcache_misses);
	printf("\nServer Info:\n");
	printf("%9.9s %9.9s %9.9s %9.9s %9.9s %9.9s %9.9s %9.9s\n",
		"Getattr", "Setattr", "Lookup", "Readlink", "Read",
		"Write", "Create", "Remove");
	printf("%9d %9d %9d %9d %9d %9d %9d %9d\n",
		nfsstats.srvrpccnt[NFSPROC_GETATTR],
		nfsstats.srvrpccnt[NFSPROC_SETATTR],
		nfsstats.srvrpccnt[NFSPROC_LOOKUP],
		nfsstats.srvrpccnt[NFSPROC_READLINK],
		nfsstats.srvrpccnt[NFSPROC_READ],
		nfsstats.srvrpccnt[NFSPROC_WRITE],
		nfsstats.srvrpccnt[NFSPROC_CREATE],
		nfsstats.srvrpccnt[NFSPROC_REMOVE]);
	printf("%9.9s %9.9s %9.9s %9.9s %9.9s %9.9s %9.9s %9.9s\n",
		"Rename", "Link", "Symlink", "Mkdir", "Rmdir",
		"Readdir", "RdirPlus", "Access");
	printf("%9d %9d %9d %9d %9d %9d %9d %9d\n",
		nfsstats.srvrpccnt[NFSPROC_RENAME],
		nfsstats.srvrpccnt[NFSPROC_LINK],
		nfsstats.srvrpccnt[NFSPROC_SYMLINK],
		nfsstats.srvrpccnt[NFSPROC_MKDIR],
		nfsstats.srvrpccnt[NFSPROC_RMDIR],
		nfsstats.srvrpccnt[NFSPROC_READDIR],
		nfsstats.srvrpccnt[NFSPROC_READDIRPLUS],
		nfsstats.srvrpccnt[NFSPROC_ACCESS]);
	printf("%9.9s %9.9s %9.9s %9.9s %9.9s %9.9s %9.9s %9.9s\n",
		"Mknod", "Fsstat", "Fsinfo", "PathConf", "Commit",
		"GLease", "Vacate", "Evict");
	printf("%9d %9d %9d %9d %9d %9d %9d %9d\n",
		nfsstats.srvrpccnt[NFSPROC_MKNOD],
		nfsstats.srvrpccnt[NFSPROC_FSSTAT],
		nfsstats.srvrpccnt[NFSPROC_FSINFO],
		nfsstats.srvrpccnt[NFSPROC_PATHCONF],
		nfsstats.srvrpccnt[NFSPROC_COMMIT],
		nfsstats.srvrpccnt[NQNFSPROC_GETLEASE],
		nfsstats.srvrpccnt[NQNFSPROC_VACATED],
		nfsstats.srvrpccnt[NQNFSPROC_EVICTED]);
	printf("Server Ret-Failed\n");
	printf("%17d\n", nfsstats.srvrpc_errs);
	printf("Server Faults\n");
	printf("%13d\n", nfsstats.srv_errs);
	printf("Server Cache Stats:\n");
	printf("%9.9s %9.9s %9.9s %9.9s\n",
		"Inprog", "Idem", "Non-idem", "Misses");
	printf("%9d %9d %9d %9d\n",
		nfsstats.srvcache_inproghits,
		nfsstats.srvcache_idemdonehits,
		nfsstats.srvcache_nonidemdonehits,
		nfsstats.srvcache_misses);
	printf("Server Lease Stats:\n");
	printf("%9.9s %9.9s %9.9s\n",
		"Leases", "PeakL", "GLeases");
	printf("%9d %9d %9d\n",
		nfsstats.srvnqnfs_leases,
		nfsstats.srvnqnfs_maxleases,
		nfsstats.srvnqnfs_getleases);
	printf("Server Write Gathering:\n");
	printf("%9.9s %9.9s %9.9s\n",
		"WriteOps", "WriteRPC", "Opsaved");
	printf("%9d %9d %9d\n",
		nfsstats.srvvop_writes,
		nfsstats.srvrpccnt[NFSPROC_WRITE],
		nfsstats.srvrpccnt[NFSPROC_WRITE] - nfsstats.srvvop_writes);
d322 1
a322 1
sidewaysintpr(interval, off)
d325 1
d345 2
a346 1
		printf("Client: %8d %8d %8d %8d %8d %8d %8d %8d\n",
d356 2
a357 1
		printf("Server: %8d %8d %8d %8d %8d %8d %8d %8d\n",
@


1.2
log
@From NetBSD: merge of 960317
@
text
@d71 1
d93 1
a93 1
	char errbuf[80];
@


1.1
log
@Initial revision
@
text
@d1 3
d47 6
a52 2
/*static char sccsid[] = "from: @@(#)nfsstat.c	8.1 (Berkeley) 6/6/93";*/
static char *rcsid = "$Id: nfsstat.c,v 1.5 1994/06/13 21:02:20 mycroft Exp $";
a55 8
#if BSD >= 199103
#define NEWVM
#endif
#ifndef NEWVM
#include <sys/vmmac.h>
#include <sys/ucred.h>
#include <machine/pte.h>
#endif
d57 3
a59 1
#include <nfs/nfsv2.h>
d72 1
d177 1
a177 1
		"Readdir", "Statfs", "RdirLook");
d185 4
a188 3
		nfsstats.rpccnt[NFSPROC_STATFS],
		nfsstats.rpccnt[NQNFSPROC_READDIRLOOK]);
	printf("%9.9s %9.9s %9.9s\n",
d190 6
a195 1
	printf("%9d %9d %9d\n",
d246 1
a246 1
		"Readdir", "Statfs", "RdirLook");
d254 4
a257 3
		nfsstats.srvrpccnt[NFSPROC_STATFS],
		nfsstats.srvrpccnt[NQNFSPROC_READDIRLOOK]);
	printf("%9.9s %9.9s %9.9s\n",
d259 6
a264 1
	printf("%9d %9d %9d\n",
d287 7
d328 9
a336 8
		    nfsstats.rpccnt[1]-lastst.rpccnt[1],
		    nfsstats.rpccnt[4]-lastst.rpccnt[4],
		    nfsstats.rpccnt[5]-lastst.rpccnt[5],
		    nfsstats.rpccnt[6]-lastst.rpccnt[6],
		    nfsstats.rpccnt[8]-lastst.rpccnt[8],
		    nfsstats.rpccnt[11]-lastst.rpccnt[11],
		    nfsstats.rpccnt[12]-lastst.rpccnt[12],
		    nfsstats.rpccnt[16]-lastst.rpccnt[16]);
d338 9
a346 8
		    nfsstats.srvrpccnt[1]-lastst.srvrpccnt[1],
		    nfsstats.srvrpccnt[4]-lastst.srvrpccnt[4],
		    nfsstats.srvrpccnt[5]-lastst.srvrpccnt[5],
		    nfsstats.srvrpccnt[6]-lastst.srvrpccnt[6],
		    nfsstats.srvrpccnt[8]-lastst.srvrpccnt[8],
		    nfsstats.srvrpccnt[11]-lastst.srvrpccnt[11],
		    nfsstats.srvrpccnt[12]-lastst.srvrpccnt[12],
		    nfsstats.srvrpccnt[16]-lastst.srvrpccnt[16]);
d364 1
a364 1
	    "Link", "Readdir");
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
