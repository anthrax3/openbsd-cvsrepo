head	1.11;
access;
symbols
	OPENBSD_6_2:1.11.0.22
	OPENBSD_6_2_BASE:1.11
	OPENBSD_6_1:1.11.0.20
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.16
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.12
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.14
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.6
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.10
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.8
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.4
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.2
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.10.0.8
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.6
	OPENBSD_5_0:1.10.0.4
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.2
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.9.0.12
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.8
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.10
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.6
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.4
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.2
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.8.0.8
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.6
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.4
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.2
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.5.0.2
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.1.0.8
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.6
	OPENBSD_3_2_BASE:1.1
	OPENBSD_3_1:1.1.0.4
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.2
	OPENBSD_3_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.11
date	2012.12.04.02.24.47;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2011.01.08.00.47.19;	author jeremy;	state Exp;
branches;
next	1.9;

1.9
date	2007.09.07.14.50.44;	author tobias;	state Exp;
branches;
next	1.8;

1.8
date	2006.02.11.19.31.18;	author otto;	state Exp;
branches;
next	1.7;

1.7
date	2005.05.26.01.01.08;	author avsm;	state Exp;
branches;
next	1.6;

1.6
date	2005.05.24.20.13.28;	author avsm;	state Exp;
branches;
next	1.5;

1.5
date	2005.02.08.15.26.23;	author otto;	state Exp;
branches;
next	1.4;

1.4
date	2004.07.20.03.50.26;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2003.07.07.21.36.23;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2003.06.26.21.59.11;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.25.22.17.35;	author ericj;	state Exp;
branches;
next	;


desc
@@


1.11
log
@remove some unnecessary sys/param.h inclusions
@
text
@/* $OpenBSD: atomicio.c,v 1.10 2011/01/08 00:47:19 jeremy Exp $ */
/*
 * Copyright (c) 2006 Damien Miller. All rights reserved.
 * Copyright (c) 2005 Anil Madhavapeddy. All rights reserved.
 * Copyright (c) 1995,1999 Theo de Raadt.  All rights reserved.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <errno.h>
#include <poll.h>
#include <unistd.h>

#include "atomicio.h"

/*
 * ensure all of data on socket comes through. f==read || f==vwrite
 */
size_t
atomicio(ssize_t (*f) (int, void *, size_t), int fd, void *_s, size_t n)
{
	char *s = _s;
	size_t pos = 0;
	ssize_t res;
	struct pollfd pfd;

	pfd.fd = fd;
	pfd.events = f == read ? POLLIN : POLLOUT;
	while (n > pos) {
		res = (f) (fd, s + pos, n - pos);
		switch (res) {
		case -1:
			if (errno == EINTR)
				continue;
			if ((errno == EAGAIN) || (errno == ENOBUFS)) {
				(void)poll(&pfd, 1, -1);
				continue;
			}
			return 0;
		case 0:
			errno = EPIPE;
			return pos;
		default:
			pos += (size_t)res;
		}
	}
	return (pos);
}
@


1.10
log
@Enable unix datagram support by treating ENOBUFS like EAGAIN.

Separate commit requested by deraadt@@.

OK nicm@@
@
text
@d1 1
a1 1
/* $OpenBSD: atomicio.c,v 1.9 2007/09/07 14:50:44 tobias Exp $ */
a27 2

#include <sys/param.h>
@


1.9
log
@Synced atomicio implementation in nc and sendbug with ssh.

OK djm@@, joris@@, ray@@
@
text
@d1 1
a1 1
/* $OpenBSD: atomicio.c,v 1.8 2006/02/11 19:31:18 otto Exp $ */
d56 1
a56 1
			if (errno == EAGAIN) {
@


1.8
log
@type correctness; from Ray Lai in PR 5011; ok millert@@
@
text
@d1 1
a1 2
/* $OpenBSD: atomicio.c,v 1.7 2005/05/26 01:01:08 avsm Exp $ */

d3 2
a4 1
 * Copyright (c) 2005 Anil Madhavapeddy.  All rights served.
d29 2
a30 2
#include <sys/types.h>
#include <sys/uio.h>
d32 1
d34 1
d41 1
a41 5
atomicio(f, fd, _s, n)
	ssize_t (*f) (int, void *, size_t);
	int fd;
	void *_s;
	size_t n;
d46 1
d48 2
d54 4
a57 1
			if (errno == EINTR || errno == EAGAIN)
d59 1
d68 1
a68 1
	return pos;
@


1.7
log
@style nit from hshoexer@@
@
text
@d1 1
a1 1
/* $OpenBSD: atomicio.c,v 1.6 2005/05/24 20:13:28 avsm Exp $ */
d60 1
a60 1
			pos += (u_int)res;
@


1.6
log
@Switch atomicio to a simpler interface which returns size_t and uses
0 to signal errors.  should be no functional change in nc apart from
different error messages.

"groovy", said deraadt@@
@
text
@d1 2
a26 1
 * $OpenBSD$
@


1.5
log
@Some extra strict warning cleanup. From Xin Li <delphij at FreeBSD
dot ORG> with a twist from myself. No binary change. ok djm@@
@
text
@d2 1
d25 1
a29 1

d32 1
a32 2

ssize_t atomicio(ssize_t (*f)(int, void *, size_t), int fd, void *_s, size_t n);
d35 1
a35 1
 * ensure all of data on socket comes through. f==read || f==write
d37 6
a42 2
ssize_t
atomicio(ssize_t (*f) (int, void *, size_t), int fd, void *_s, size_t n)
d45 2
a46 1
	ssize_t res, pos = 0;
d48 1
a48 1
	while (n > (size_t)pos) {
d54 1
d56 2
a57 1
			return (res);
d59 1
a59 1
			pos += res;
d62 1
a62 1
	return (pos);
@


1.4
log
@ansi; khalek@@linuxgamers.net
@
text
@d43 1
a43 1
	while (n > pos) {
@


1.3
log
@protos
@
text
@d38 1
a38 5
atomicio(f, fd, _s, n)
	ssize_t (*f) (int, void *, size_t);
	int fd;
	void *_s;
	size_t n;
@


1.2
log
@more proto fixes
@
text
@d32 2
@


1.1
log
@
Import completely re-written netcat w/ support for IPv6.
very little usage has changed, man page soon to come for it as well.
deraadt@@ ok
@
text
@d37 1
a37 1
	ssize_t (*f) ();
@

