head	1.7;
access;
symbols
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.8
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.4
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.6
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.5.0.22
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.20
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.16
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.14
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.12
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.10
	OPENBSD_5_0:1.5.0.8
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.6
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.4.0.24
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.20
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.18
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.16
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.14
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.12
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.10
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.8
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.6
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.4
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.3.0.2
	OPENBSD_3_5_BASE:1.3;
locks; strict;
comment	@ * @;


1.7
date	2015.02.16.20.53.34;	author jca;	state Exp;
branches;
next	1.6;
commitid	B2pYYUIr8jLmV0VS;

1.6
date	2014.12.01.13.13.00;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	W5fMdNZS0R2ZH1P6;

1.5
date	2009.10.27.23.59.37;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2004.07.11.06.41.48;	author otto;	state Exp;
branches;
next	1.3;

1.3
date	2003.10.18.20.34.26;	author otto;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.28.19.17.21;	author otto;	state Exp;
branches;
next	1.1;

1.1
date	2003.09.19.17.58.25;	author otto;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Include bn.h and err.h from <openssl/...>, not the old <ssl/...> location.

Remove unneeded ssl.h includes.  Also built-checked against openssl-1.0.1e.

ok otto@@
@
text
@/*	$OpenBSD: mem.c,v 1.6 2014/12/01 13:13:00 deraadt Exp $	*/

/*
 * Copyright (c) 2003, Otto Moerbeek <otto@@drijf.net>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <openssl/err.h>

#include <err.h>
#include <stdlib.h>
#include <string.h>

#include "extern.h"

struct number *
new_number(void)
{
	struct number *n;

	n = bmalloc(sizeof(*n));
	n->scale = 0;
	n->number = BN_new();
	if (n->number == NULL)
		err(1, NULL);
	return n;
}

void
free_number(struct number *n)
{
	BN_free(n->number);
	free(n);
}

struct number *
dup_number(const struct number *a)
{
	struct number *n;

	n = bmalloc(sizeof(*n));
	n->scale = a->scale;
	n->number = BN_dup(a->number);
	bn_checkp(n->number);
	return n;
}

void *
bmalloc(size_t sz)
{
	void *p;

	p = malloc(sz);
	if (p == NULL)
		err(1, NULL);
	return p;
}

void *
breallocarray(void *p, size_t nmemb, size_t size)
{
	void *q;

	q = reallocarray(p, nmemb, size);
	if (q == NULL)
		err(1, NULL);
	return q;
}

char *
bstrdup(const char *p)
{
	char *q;

	q = strdup(p);
	if (q == NULL)
		err(1, NULL);
	return q;
}

void
bn_check(int x)						\
{
	if (x == 0)
		err(1, "big number failure %lx", ERR_get_error());
}

void
bn_checkp(const void *p)						\
{
	if (p == NULL)
		err(1, "allocation failure %lx", ERR_get_error());
}
@


1.6
log
@more opportunity to use reallocarray(); ok otto
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.6 2014/12/01 13:11:21 deraadt Exp $	*/
d19 1
a19 1
#include <ssl/err.h>
@


1.5
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.4 2004/07/11 06:41:48 otto Exp $	*/
d71 1
a71 1
brealloc(void *p, size_t sz)
d75 1
a75 1
	q = realloc(p, sz);
@


1.4
log
@No need to free() after a failing realloc(), we're bailing out anyway.
From Andrey Matveev.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.3 2003/10/18 20:34:26 otto Exp $	*/
a17 4

#ifndef lint
static const char rcsid[] = "$OpenBSD: mem.c,v 1.3 2003/10/18 20:34:26 otto Exp $";
#endif /* not lint */
@


1.3
log
@err(1, "out of mem") -> err(1, NULL)
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.2 2003/09/28 19:17:21 otto Exp $	*/
d20 1
a20 1
static const char rcsid[] = "$OpenBSD: mem.c,v 1.2 2003/09/28 19:17:21 otto Exp $";
d80 1
a80 2
	if (q == NULL) {
		free(p);
a81 1
	}
@


1.2
log
@Free memory after a failing realloc.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.c,v 1.1 2003/09/19 17:58:25 otto Exp $	*/
d20 1
a20 1
static const char rcsid[] = "$OpenBSD: mem.c,v 1.1 2003/09/19 17:58:25 otto Exp $";
d40 1
a40 1
		err(1, "cannot allocate number");
d70 1
a70 1
		err(1, "malloc failed");
d82 1
a82 1
		err(1, "realloc failed");
d94 1
a94 1
		err(1, "stdup failed");
@


1.1
log
@A complete, BSD licensed rewrite of dc(1), using the bn(3) big number routines.

ok toby@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d20 1
a20 1
static const char rcsid[] = "$OpenBSD$";
d80 2
a81 1
	if (q == NULL)
d83 1
@

