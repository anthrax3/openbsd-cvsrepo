head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.8
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.4
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.3.0.38
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.36
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.32
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.30
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.28
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.26
	OPENBSD_5_0:1.3.0.24
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.22
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.20
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.16
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.18
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.14
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.12
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.10
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.8
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.6
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.4
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.2
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.2.0.8
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.6
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.4
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.2
	OPENBSD_3_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.5
date	2015.10.10.19.28.54;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	U920W7iXGRn2x9qj;

1.4
date	2014.12.01.13.13.00;	author deraadt;	state Exp;
branches;
next	1.3;
commitid	W5fMdNZS0R2ZH1P6;

1.3
date	2006.01.16.08.09.25;	author otto;	state Exp;
branches;
next	1.2;

1.2
date	2003.11.04.08.10.06;	author otto;	state Exp;
branches;
next	1.1;

1.1
date	2003.09.19.17.58.25;	author otto;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Rather than invoking fork/execve of dc(1) on a pipe, compile in the dc(1)
code directly and use it as a subfunction.  This refactoring allows use of
pledge "stdio rpath proc tty" in the main bc(1) process before fork, pledge
"stdio rpath tty" after fork, and fully reduced to "stdio" in the dc(1)
child.

This requires two recent to the kernel code (allowing sigsuspend(),
and kill() self as pid 0).
ok otto
@
text
@/*	$OpenBSD: extern.h,v 1.4 2014/12/01 13:13:00 deraadt Exp $	*/

/*
 * Copyright (c) 2003, Otto Moerbeek <otto@@drijf.net>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <stdbool.h>
#include "bcode.h"


/* inout.c */
void		src_setstream(struct source *, FILE *);
void		src_setstring(struct source *, char *);
struct number	*readnumber(struct source *, u_int);
void		printnumber(FILE *, const struct number *, u_int);
char		*read_string(struct source *);
void		print_value(FILE *, const struct value *, const char *, u_int);
void		print_ascii(FILE *, const struct number *);

/* mem.c */
struct number	*new_number(void);
void		free_number(struct number *);
struct number	*dup_number(const struct number *);
void		*bmalloc(size_t);
void		*breallocarray(void *, size_t, size_t);
char		*bstrdup(const char *p);
void		bn_check(int);
void		bn_checkp(const void *);

/* stack.c */
void		stack_init(struct stack *);
void		stack_free_value(struct value *);
struct value	*stack_dup_value(const struct value *, struct value *);
void		stack_swap(struct stack *);
size_t		stack_size(const struct stack *);
void		stack_dup(struct stack *);
void		stack_pushnumber(struct stack *, struct number *);
void		stack_pushstring(struct stack *stack, char *);
void		stack_push(struct stack *, struct value *);
void		stack_set_tos(struct stack *, struct value *);
struct value	*stack_tos(const struct stack *);
struct value	*stack_pop(struct stack *);
struct number	*stack_popnumber(struct stack *);
char *		stack_popstring(struct stack *);
void		stack_clear(struct stack *);
void		stack_print(FILE *, const struct stack *, const char *,
		    u_int base);
void		frame_assign(struct stack *, size_t, const struct value *);
struct value *	frame_retrieve(const struct stack *, size_t);
/* void		frame_free(struct stack *); */

int		dc_main(int, char **);
@


1.4
log
@more opportunity to use reallocarray(); ok otto
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.4 2014/12/01 13:11:21 deraadt Exp $	*/
d63 2
@


1.3
log
@delint; use size_t as stack size and ssize_t as stack pointer.
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.2 2003/11/04 08:10:06 otto Exp $	*/
d37 1
a37 1
void		*brealloc(void *, size_t);
@


1.2
log
@Duh, a stack machine without swap; implement GNU compatible 'r'
(swap) operator. Prompted by Michael Knudsen <e at molioner dot dk>
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.1 2003/09/19 17:58:25 otto Exp $	*/
d47 1
a47 1
int		stack_size(const struct stack *);
@


1.1
log
@A complete, BSD licensed rewrite of dc(1), using the bn(3) big number routines.

ok toby@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d46 1
@

