head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.6
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.4
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.7.0.24
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.16
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.20
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.18
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.14
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.12
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.10
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.8
	OPENBSD_5_0:1.7.0.6
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.4
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.2
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.6.0.12
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.14
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.10
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.8
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.6
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.4
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.2
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.5.0.2
	OPENBSD_4_0_BASE:1.5;
locks; strict;
comment	@ * @;


1.8
date	2015.11.05.09.48.21;	author nicm;	state Exp;
branches;
next	1.7;
commitid	O6jeJ0TRmiewrqMI;

1.7
date	2010.07.23.08.31.19;	author ray;	state Exp;
branches;
next	1.6;

1.6
date	2007.02.22.06.42.10;	author otto;	state Exp;
branches;
next	1.5;

1.5
date	2006.04.05.01.38.56;	author ray;	state Exp;
branches;
next	1.4;

1.4
date	2006.03.15.13.32.41;	author niallo;	state Exp;
branches;
next	1.3;

1.3
date	2006.03.10.12.26.18;	author niallo;	state Exp;
branches;
next	1.2;

1.2
date	2006.03.10.00.48.56;	author joris;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.08.20.18.41;	author joris;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Remove xfree(), like already done for RCS. From Michael W Bombardieri,
ok mmcc
@
text
@/*	$OpenBSD: worklist.c,v 1.7 2010/07/23 08:31:19 ray Exp $	*/
/*
 * Copyright (c) 2006 Joris Vink <joris@@openbsd.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "cvs.h"

/*
 * adds a path to a worklist.
 */
void
worklist_add(const char *path, struct wklhead *worklist)
{
	size_t len;
	struct worklist *wkl;
	sigset_t old, new;

	wkl = xcalloc(1, sizeof(*wkl));

	len = strlcpy(wkl->wkl_path, path, sizeof(wkl->wkl_path));
	if (len >= sizeof(wkl->wkl_path))
		fatal("path truncation in worklist_add");

	sigfillset(&new);
	sigprocmask(SIG_BLOCK, &new, &old);
	SLIST_INSERT_HEAD(worklist, wkl, wkl_list);
	sigprocmask(SIG_SETMASK, &old, NULL);
}

/*
 * run over the given worklist, calling cb for each element.
 * this is just like worklist_clean(), except we block signals first.
 */
void
worklist_run(struct wklhead *list, void (*cb)(struct worklist *))
{
	sigset_t old, new;
	struct worklist *wkl;

	sigfillset(&new);
	sigprocmask(SIG_BLOCK, &new, &old);

	worklist_clean(list, cb);

	while ((wkl = SLIST_FIRST(list)) != NULL) {
		SLIST_REMOVE_HEAD(list, wkl_list);
		free(wkl);
	}

	sigprocmask(SIG_SETMASK, &old, NULL);
}

/*
 * pass elements to the specified callback, which has to be signal safe.
 */
void
worklist_clean(struct wklhead *list, void (*cb)(struct worklist *))
{
	struct worklist *wkl;

	SLIST_FOREACH(wkl, list, wkl_list)
	    cb(wkl);
}

void
worklist_unlink(struct worklist *wkl)
{
	(void)unlink(wkl->wkl_path);
}
@


1.7
log
@Rename a bunch of variables and functions, removing the cvs_/rcs_
prefixes to reduce differences between cvs and rcs files.

"yes!" nicm
@
text
@d1 1
a1 1
/*	$OpenBSD: worklist.c,v 1.6 2007/02/22 06:42:10 otto Exp $	*/
d27 1
d72 1
a72 1
		xfree(wkl);
@


1.6
log
@general includes cleanup sweep. ok joris@@ niallo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: worklist.c,v 1.5 2006/04/05 01:38:56 ray Exp $	*/
d36 1
a36 1
cvs_worklist_add(const char *path, struct cvs_wklhead *worklist)
d39 1
a39 1
	struct cvs_worklist *wkl;
d46 1
a46 1
		fatal("path truncation in cvs_worklist_add");
d56 1
a56 1
 * this is just like cvs_worklist_clean(), except we block signals first.
d59 1
a59 1
cvs_worklist_run(struct cvs_wklhead *list, void (*cb)(struct cvs_worklist *))
d62 1
a62 1
	struct cvs_worklist *wkl;
d67 1
a67 1
	cvs_worklist_clean(list, cb);
d81 1
a81 1
cvs_worklist_clean(struct cvs_wklhead *list, void (*cb)(struct cvs_worklist *))
d83 1
a83 1
	struct cvs_worklist *wkl;
d90 1
a90 1
cvs_worklist_unlink(struct cvs_worklist *wkl)
@


1.5
log
@Use variable names for sizeof, remove casts in front of xmalloc,
use xcalloc and xstrdup where appropriate, and other stuff.

OK joris@@
@
text
@d1 1
a1 1
/*	$OpenBSD: worklist.c,v 1.4 2006/03/15 13:32:41 niallo Exp $	*/
d27 2
a28 1
#include "includes.h"
d30 1
a30 3
#include "log.h"
#include "worklist.h"
#include "xmalloc.h"
@


1.4
log
@- fix typo in comment; an path -> a path
@
text
@d1 1
a1 1
/*	$OpenBSD: worklist.c,v 1.3 2006/03/10 12:26:18 niallo Exp $	*/
d43 1
a43 2
	wkl = (struct cvs_worklist *)xmalloc(sizeof(*wkl));
	memset(wkl, 0, sizeof(*wkl));
@


1.3
log
@fix a stupid mistake in cvs_worklist_clean() while loop.

ok joris@@
@
text
@d1 1
a1 1
/*	$OpenBSD: worklist.c,v 1.2 2006/03/10 00:48:56 joris Exp $	*/
d34 1
a34 1
 * adds an path to a worklist.
@


1.2
log
@make sure cvs_worklist_clean() is safe, since we are
calling it from inside a signal handler.

from deraadt@@, ok niallo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: worklist.c,v 1.1 2006/03/08 20:18:41 joris Exp $	*/
d87 2
a88 2
	while ((wkl = SLIST_FIRST(list)) != NULL)
		cb(wkl);
@


1.1
log
@add a worklist framework, which will be used for atomic operations on
files.

suggested and help by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d64 1
d71 5
d80 1
a80 1
 * clean the worklist by passing the elements to the specified callback
d87 1
a87 2
	while ((wkl = SLIST_FIRST(list)) != NULL) {
		SLIST_REMOVE_HEAD(list, wkl_list);
a88 2
		xfree(wkl);
	}
@

