head	1.13;
access;
symbols
	OPENBSD_6_2:1.13.0.6
	OPENBSD_6_2_BASE:1.13
	OPENBSD_6_1:1.13.0.8
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.4
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.11.0.6
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.9.0.24
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.22
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.18
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.16
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.14
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.12
	OPENBSD_5_0:1.9.0.10
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.8
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.6
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.4
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.8.0.10
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.8
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.6
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.4
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.2
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.5.0.2
	OPENBSD_3_9_BASE:1.5;
locks; strict;
comment	@ * @;


1.13
date	2015.11.17.18.25.02;	author tobias;	state Exp;
branches;
next	1.12;
commitid	FhbAgvR7WtTmuXiY;

1.12
date	2015.11.05.09.48.21;	author nicm;	state Exp;
branches;
next	1.11;
commitid	O6jeJ0TRmiewrqMI;

1.11
date	2015.02.05.12.59.57;	author millert;	state Exp;
branches;
next	1.10;
commitid	DTQbfd4poqBW8iSJ;

1.10
date	2014.12.01.21.58.46;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	Z3HC5pAWzpo5jsTe;

1.9
date	2009.06.07.08.39.13;	author ray;	state Exp;
branches;
next	1.8;

1.8
date	2007.02.22.06.42.10;	author otto;	state Exp;
branches;
next	1.7;

1.7
date	2007.01.29.16.22.29;	author xsa;	state Exp;
branches;
next	1.6;

1.6
date	2006.03.28.02.13.44;	author ray;	state Exp;
branches;
next	1.5;

1.5
date	2006.01.02.08.11.56;	author xsa;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.30.17.51.01;	author reyk;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.19.18.21.31;	author xsa;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.13.17.46.10;	author xsa;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.10.20.27.45;	author joris;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Merge xmalloc.[ch] files across base, skipping OpenSSH for now.

ok nicm
@
text
@/* $OpenBSD: xmalloc.c,v 1.12 2015/11/05 09:48:21 nicm Exp $ */
/*
 * Author: Tatu Ylonen <ylo@@cs.hut.fi>
 * Copyright (c) 1995 Tatu Ylonen <ylo@@cs.hut.fi>, Espoo, Finland
 *                    All rights reserved
 * Versions of malloc and friends that check their results, and never return
 * failure (they call fatal if they encounter an error).
 *
 * As far as I am concerned, the code I have written for this software
 * can be used freely for any purpose.  Any derived versions of this
 * software must be clearly marked as such, and if the derived work is
 * incompatible with the protocol description in the RFC file, it must be
 * called by a name other than "ssh" or "Secure Shell".
 */

#include <errno.h>
#include <limits.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "log.h"
#include "xmalloc.h"

void *
xmalloc(size_t size)
{
	void *ptr;

	if (size == 0)
		fatal("xmalloc: zero size");
	ptr = malloc(size);
	if (ptr == NULL)
		fatal("xmalloc: allocating %zu bytes: %s",
		    size, strerror(errno));
	return ptr;
}

void *
xcalloc(size_t nmemb, size_t size)
{
	void *ptr;

	if (size == 0 || nmemb == 0)
		fatal("xcalloc: zero size");
	ptr = calloc(nmemb, size);
	if (ptr == NULL)
		fatal("xcalloc: allocating %zu * %zu bytes: %s",
		    nmemb, size, strerror(errno));
	return ptr;
}

void *
xreallocarray(void *ptr, size_t nmemb, size_t size)
{
	void *new_ptr;

	if (nmemb == 0 || size == 0)
		fatal("xreallocarray: zero size");
	new_ptr = reallocarray(ptr, nmemb, size);
	if (new_ptr == NULL)
		fatal("xreallocarray: allocating %zu * %zu bytes: %s",
		    nmemb, size, strerror(errno));
	return new_ptr;
}

char *
xstrdup(const char *str)
{
	char *cp;

	if ((cp = strdup(str)) == NULL)
		fatal("xstrdup: %s", strerror(errno));
	return cp;
}

int
xasprintf(char **ret, const char *fmt, ...)
{
	va_list ap;
	int i;

	va_start(ap, fmt);
	i = vasprintf(ret, fmt, ap);
	va_end(ap);

	if (i < 0 || *ret == NULL)
		fatal("xasprintf: %s", strerror(errno));

	return i;
}

int
xsnprintf(char *str, size_t len, const char *fmt, ...)
{
	va_list ap;
	int i;

	if (len > INT_MAX)
		fatal("xsnprintf: len > INT_MAX");

	va_start(ap, fmt);
	i = vsnprintf(str, len, fmt, ap);
	va_end(ap);

	if (i < 0 || i >= (int)len)
		fatal("xsnprintf: overflow");

	return i;
}
@


1.12
log
@Remove xfree(), like already done for RCS. From Michael W Bombardieri,
ok mmcc
@
text
@d1 1
a1 1
/* $OpenBSD: xmalloc.c,v 1.11 2015/02/05 12:59:57 millert Exp $ */
d16 2
d35 2
a36 1
		fatal("xmalloc: out of memory (allocating %lu bytes)", (u_long) size);
a46 2
	if (SIZE_MAX / nmemb < size)
		fatal("xcalloc: nmemb * size > SIZE_MAX");
d49 2
a50 2
		fatal("xcalloc: out of memory (allocating %lu bytes)",
		    (u_long)(size * nmemb));
a57 1
	size_t new_size = nmemb * size;
d59 3
a61 5
	if (new_size == 0)
		fatal("xrealloc: zero size");
	if (SIZE_MAX / nmemb < size)
		fatal("xrealloc: nmemb * size > SIZE_MAX");
	new_ptr = realloc(ptr, new_size);
d63 2
a64 2
		fatal("xrealloc: out of memory (new_size %lu bytes)",
		    (u_long) new_size);
a70 1
	size_t len;
d73 2
a74 3
	len = strlen(str) + 1;
	cp = xmalloc(len);
	strlcpy(cp, str, len);
d89 1
a89 1
		fatal("xasprintf: could not allocate memory");
d91 1
a91 1
	return (i);
d95 1
a95 1
xsnprintf(char *str, size_t size, const char *fmt, ...)
d100 3
d104 1
a104 1
	i = vsnprintf(str, size, fmt, ap);
d107 1
a107 1
	if (i == -1 || i >= (int)size)
d110 1
a110 1
	return (i);
@


1.11
log
@Include stdint.h, not limits.h to get SIZE_MAX.  OK guenther@@
@
text
@d1 1
a1 1
/* $OpenBSD: xmalloc.c,v 1.10 2014/12/01 21:58:46 deraadt Exp $ */
a67 8
}

void
xfree(void *ptr)
{
	if (ptr == NULL)
		fatal("xfree: NULL pointer given as argument");
	free(ptr);
@


1.10
log
@An internal function called xrealloc() is actually a fail-hard
reallocarray()... so rename it.
@
text
@d1 1
a1 1
/* $OpenBSD: xmalloc.c,v 1.9 2009/06/07 08:39:13 ray Exp $ */
d16 1
a16 1
#include <limits.h>
@


1.9
log
@More cvs/diff/rcs convergence:
1. Mostly variable/function renaming, SIZE_T_MAX->SIZE_MAX, and
spacing.
2. One strchr -> strncspn.
3. diff had a weird thing where it set file[12] = ofile[12] but
never updated file or ofile, then if file and ofile were different
it freed it. I removed it.

OK millert
@
text
@d1 1
a1 1
/* $OpenBSD: xmalloc.c,v 1.8 2007/02/22 06:42:10 otto Exp $ */
d54 1
a54 1
xrealloc(void *ptr, size_t nmemb, size_t size)
d63 1
a63 4
	if (ptr == NULL)
		new_ptr = malloc(new_size);
	else
		new_ptr = realloc(ptr, new_size);
@


1.8
log
@general includes cleanup sweep. ok joris@@ niallo@@
@
text
@d1 1
a1 1
/* $OpenBSD: xmalloc.c,v 1.7 2007/01/29 16:22:29 xsa Exp $ */
d44 2
a45 2
	if (SIZE_T_MAX / nmemb < size)
		fatal("xcalloc: nmemb * size > SIZE_T_MAX");
d61 2
a62 2
	if (SIZE_T_MAX / nmemb < size)
		fatal("xrealloc: nmemb * size > SIZE_T_MAX");
@


1.7
log
@introduce xsnprintf(); OK otto@@ joris@@.
@
text
@d1 1
a1 1
/* $OpenBSD: xmalloc.c,v 1.6 2006/03/28 02:13:44 ray Exp $ */
d16 4
a19 1
#include "includes.h"
d21 1
a22 1
#include "log.h"
@


1.6
log
@Today is Integer Overflow Prevention Day:
 - Sync xmalloc.? with ssh versions.
 - Change all xrealloc() calls to new API.

``I really like this.'' niallo@@
@
text
@d1 1
a1 1
/* $OpenBSD: xmalloc.c,v 1.21 2006/03/27 01:21:18 deraadt Exp $ */
d102 16
@


1.5
log
@#include's cleanup; ok joris@@ niallo@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: xmalloc.c,v 1.4 2005/12/30 17:51:01 reyk Exp $ */
d6 1
a6 1
 * Versions of xmalloc and friends that check their results, and never return
d30 1
a30 2
		fatal("xmalloc: out of memory (allocating %lu bytes)",
		    (u_long) size);
d35 17
a51 1
xrealloc(void *ptr, size_t new_size)
d54 1
d58 2
d61 1
a61 1
		new_ptr = xmalloc(new_size);
d88 16
@


1.4
log
@knf
@
text
@d1 1
a1 1
/*	$OpenBSD: xmalloc.c,v 1.3 2005/12/19 18:21:31 xsa Exp $ */
d16 1
a16 2
#include <stdlib.h>
#include <string.h>
@


1.3
log
@move fatal() proto declaration to log.h; better for its use in usr.bin/rcs
OK joris@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: xmalloc.c,v 1.2 2005/12/13 17:46:10 xsa Exp $ */
d31 2
a32 1
		fatal("xmalloc: out of memory (allocating %lu bytes)", (u_long) size);
d48 2
a49 1
		fatal("xrealloc: out of memory (new_size %lu bytes)", (u_long) new_size);
@


1.2
log
@add missing $OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d19 2
a20 1
#include "cvs.h"
@


1.1
log
@switch to xmalloc stuff, me and xsa@@ agreed on this a long
time ago, but we were being held back by jfb. too bad for him.

next step is to use fatal() through out the code for unrecoverable
errors instead of trying to be all nice and fluffy and reach main() again.

ok niallo@@ and xsa@@
@
text
@d1 1
@

