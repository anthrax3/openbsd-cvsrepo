head	1.3;
access;
symbols
	OPENBSD_6_1:1.3.0.4
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.2.0.8
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.4
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.6
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.2
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.1.0.28
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.26
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.22
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.20
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.18
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.16
	OPENBSD_5_0:1.1.0.14
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.12
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.10
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.6
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.8
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.4
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.2
	OPENBSD_4_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2016.10.12.15.51.44;	author millert;	state Exp;
branches;
next	1.2;
commitid	mn4ZHsGj621VdPFx;

1.2
date	2015.01.16.06.40.07;	author deraadt;	state Exp;
branches;
next	1.1;
commitid	Uu5nFG3wCl0LACBb;

1.1
date	2008.06.21.15.39.15;	author joris;	state Exp;
branches;
next	;


desc
@@


1.3
log
@When allocating the h_table array use the size of struct hash_head,
not the size of a pointer.  From Joris Vink.  OK fcambus@@
@
text
@/*	$OpenBSD: hash.c,v 1.2 2015/01/16 06:40:07 deraadt Exp $	*/
/*
 * Copyright (c) 2008 Joris Vink <joris@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/queue.h>

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "cvs.h"
#include "hash.h"
#include "xmalloc.h"

void
hash_table_init(struct hash_table *htable, size_t hsize)
{
	size_t i;
	u_int power;

	if (hsize < MIN_HASH_SIZE)
		hsize = MIN_HASH_SIZE;

	if (hsize > MAX_HASH_SIZE)
		hsize = MAX_HASH_SIZE;

	if ((hsize & (hsize - 1)) != 0) {
		for (power = 0; hsize != 0; power++)
			hsize >>= 1;
		hsize = 1 << power;
	}

	htable->h_table = xcalloc(hsize, sizeof(struct hash_head));
	htable->h_size = hsize;

	for (i = 0; i < htable->h_size; i++)
		SLIST_INIT(&(htable->h_table[i]));
}

void
hash_table_enter(struct hash_table *htable, struct hash_data *e)
{
	uint32_t hashv;
	struct hash_head *tableh;
	struct hash_table_entry *entry;

	hashv = hash4(e->h_key, strlen(e->h_key));
	tableh = &(htable->h_table[(hashv & (htable->h_size - 1))]);

	entry = xmalloc(sizeof(*entry));
	entry->h_data.h_key = e->h_key;
	entry->h_data.h_data = e->h_data;
	SLIST_INSERT_HEAD(tableh, entry, h_list);
}

struct hash_data *
hash_table_find(struct hash_table *htable, const char *key, size_t len)
{
	uint32_t hashv;
	struct hash_head *tableh;
	struct hash_table_entry *entry;

	hashv = hash4(key, len);
	tableh = &(htable->h_table[(hashv & (htable->h_size - 1))]);

	SLIST_FOREACH(entry, tableh, h_list) {
		if (!strcmp(entry->h_data.h_key, key))
			return (&(entry->h_data));
	}

	return (NULL);
}
@


1.2
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: hash.c,v 1.1 2008/06/21 15:39:15 joris Exp $	*/
d47 1
a47 1
	htable->h_table = xcalloc(hsize, sizeof(struct hash_head *));
@


1.1
log
@add a hash table mechanism based upon hcreate(3) but one that allows
us to maintain multiple hash tables concurrently.

immediatly start using it to keep track of what directories
we have already created and what CVS dirs we already created so
we do not recreate them when we do not need to.

we will be switching more internals to use this soon.
rejoice for cheaper lookups.

ok tobias@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d18 1
a18 1
#include <sys/param.h>
@

