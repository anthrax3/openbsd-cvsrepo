head	1.14;
access;
symbols
	OPENBSD_6_2:1.14.0.36
	OPENBSD_6_2_BASE:1.14
	OPENBSD_6_1:1.14.0.38
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.14.0.34
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.30
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.14.0.32
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.24
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.28
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.26
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.22
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.20
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.18
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.16
	OPENBSD_5_0:1.14.0.14
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.12
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.10
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.6
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.8
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.4
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.2
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.13.0.2
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.12.0.2
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.9.0.2
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.6.0.2
	OPENBSD_3_9_BASE:1.6;
locks; strict;
comment	@ * @;


1.14
date	2008.06.12.03.54.43;	author joris;	state Exp;
branches;
next	1.13;

1.13
date	2007.09.02.12.13.00;	author tobias;	state Exp;
branches;
next	1.12;

1.12
date	2007.05.29.00.21.51;	author ray;	state Exp;
branches;
next	1.11;

1.11
date	2007.05.26.23.50.46;	author ray;	state Exp;
branches;
next	1.10;

1.10
date	2007.05.26.20.13.45;	author ray;	state Exp;
branches;
next	1.9;

1.9
date	2007.02.22.06.42.09;	author otto;	state Exp;
branches;
next	1.8;

1.8
date	2006.07.07.17.37.17;	author joris;	state Exp;
branches;
next	1.7;

1.7
date	2006.05.27.03.30.30;	author joris;	state Exp;
branches;
next	1.6;

1.6
date	2006.01.30.15.49.18;	author niallo;	state Exp;
branches;
next	1.5;

1.5
date	2006.01.02.08.11.56;	author xsa;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.30.01.38.39;	author joris;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.24.04.05.40;	author joris;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.13.17.46.10;	author xsa;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.10.20.27.45;	author joris;	state Exp;
branches;
next	;


desc
@@


1.14
log
@show any signal we might have received that killed our cvs process.
ok tobias@@
@
text
@/*	$OpenBSD: fatal.c,v 1.13 2007/09/02 12:13:00 tobias Exp $ */
/*
 * Copyright (c) 2002 Markus Friedl.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/stat.h>

#include <err.h>
#include <fcntl.h>
#include <stdlib.h>

#include "cvs.h"
#include "remote.h"

/* Fatal messages.  This function never returns. */

void
fatal(const char *fmt,...)
{
	static int been_here;
	va_list args;

	/* Fatal should not loop, (the functions below can fatal). */
	if (been_here++)
		errx(1, "fatal loop");

	if (sig_received != 0) {
		cvs_log(LP_ABORT, "received signal %d", sig_received);
	} else {
		va_start(args, fmt);
		cvs_vlog(LP_ABORT, fmt, args);
		va_end(args);
	}

	if (current_cvsroot != NULL)
		cvs_cleanup();

	exit(1);
}
@


1.13
log
@Stick at GNU cvs behaviour with Root directive handling: it does not need
to be sent first, can occure multiple times (although this is ignored) but
should be supplied before Directory.

OK joris@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fatal.c,v 1.12 2007/05/29 00:21:51 ray Exp $ */
d47 7
a53 3
	va_start(args, fmt);
	cvs_vlog(LP_ABORT, fmt, args);
	va_end(args);
@


1.12
log
@I've been running with an abort upon fatal loop, and I think I've
mostly gotten rid of them.  It would be nice to know if there is a
fatal loop instead of dying quietly, so call errx instead of exit(1).

errx does not call fatal so it should be fine.

OK niallo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fatal.c,v 1.11 2007/05/26 23:50:46 ray Exp $ */
d51 2
a52 1
	cvs_cleanup();
@


1.11
log
@It is too complicated to tell a client that an internal failure
happened in fatal().  If that behavior is desired, please tell the
client before calling fatal().

OK niallo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fatal.c,v 1.9 2007/02/22 06:42:09 otto Exp $ */
d28 1
d45 1
a45 1
		goto end;
a52 1
 end:
@


1.10
log
@fatal() should never be called twice; if it happens, exit immediately,
it is the only safe thing to do.

OK niallo@@
@
text
@a51 3
	if (cvs_server_active)
		cvs_server_send_response("error");

@


1.9
log
@general includes cleanup sweep. ok joris@@ niallo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fatal.c,v 1.8 2006/07/07 17:37:17 joris Exp $ */
d39 1
d42 4
d55 1
@


1.8
log
@first part of opencvs remote, fairly useable on existing trees
although i advise against using it on real development trees for now.

only a few commands work right so far:
- commit
- diff
- status
- log
- update (partially working)

if you feel like testing remote and run into bugs feel free to
contact me, and please include a full trace (-t).
@
text
@d1 1
a1 1
/*	$OpenBSD: fatal.c,v 1.7 2006/05/27 03:30:30 joris Exp $ */
d26 4
a29 1
#include "includes.h"
a31 1
#include "log.h"
@


1.7
log
@commit the new opencvs code, i have been hacking on
this for the past 2 weeks now and it should go in at
the start of the hackathon so others can help out.

this code is a lot safer, smarter, faster and best of
all it is actually doing what it is suppose to do!

basic checkout, update, status, diff and commit are
working in local mode only.
there is no support for any remote setups now.
@
text
@d1 1
a1 1
/*	$OpenBSD: fatal.c,v 1.6 2006/01/30 15:49:18 niallo Exp $ */
d30 1
d44 3
@


1.6
log
@- make fatal() exit with code 1 instead of 255. makes us more compatible
with gnu on errors.

ok xsa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fatal.c,v 1.5 2006/01/02 08:11:56 xsa Exp $ */
d41 3
@


1.5
log
@#include's cleanup; ok joris@@ niallo@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: fatal.c,v 1.4 2005/12/30 01:38:39 joris Exp $ */
d41 1
a41 1
	exit(255);
@


1.4
log
@pass LP_ABORT to cvs_vlog() instead of LP_ERR.
@
text
@d1 1
a1 1
/*	$OpenBSD: fatal.c,v 1.3 2005/12/24 04:05:40 joris Exp $ */
d26 1
a26 2
#include <stdarg.h>
#include <stdlib.h>
@


1.3
log
@we should be calling cvs_vlog(); to at least get some decent output;
@
text
@d1 1
a1 1
/*	$OpenBSD: fatal.c,v 1.2 2005/12/13 17:46:10 xsa Exp $ */
d40 1
a40 1
	cvs_vlog(LP_ERR, fmt, args);
@


1.2
log
@add missing $OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d38 1
d40 1
a40 1
	cvs_log(LP_ERR, fmt, args);
@


1.1
log
@switch to xmalloc stuff, me and xsa@@ agreed on this a long
time ago, but we were being held back by jfb. too bad for him.

next step is to use fatal() through out the code for unrecoverable
errors instead of trying to be all nice and fluffy and reach main() again.

ok niallo@@ and xsa@@
@
text
@d1 1
@

