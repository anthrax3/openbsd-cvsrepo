head	1.182;
access;
symbols
	OPENBSD_6_0:1.182.0.6
	OPENBSD_6_0_BASE:1.182
	OPENBSD_5_9:1.182.0.2
	OPENBSD_5_9_BASE:1.182
	OPENBSD_5_8:1.182.0.4
	OPENBSD_5_8_BASE:1.182
	OPENBSD_5_7:1.181.0.10
	OPENBSD_5_7_BASE:1.181
	OPENBSD_5_6:1.181.0.14
	OPENBSD_5_6_BASE:1.181
	OPENBSD_5_5:1.181.0.12
	OPENBSD_5_5_BASE:1.181
	OPENBSD_5_4:1.181.0.8
	OPENBSD_5_4_BASE:1.181
	OPENBSD_5_3:1.181.0.6
	OPENBSD_5_3_BASE:1.181
	OPENBSD_5_2:1.181.0.4
	OPENBSD_5_2_BASE:1.181
	OPENBSD_5_1_BASE:1.181
	OPENBSD_5_1:1.181.0.2
	OPENBSD_5_0:1.180.0.2
	OPENBSD_5_0_BASE:1.180
	OPENBSD_4_9:1.179.0.2
	OPENBSD_4_9_BASE:1.179
	OPENBSD_4_8:1.178.0.2
	OPENBSD_4_8_BASE:1.178
	OPENBSD_4_7:1.176.0.2
	OPENBSD_4_7_BASE:1.176
	OPENBSD_4_6:1.176.0.4
	OPENBSD_4_6_BASE:1.176
	OPENBSD_4_5:1.174.0.2
	OPENBSD_4_5_BASE:1.174
	OPENBSD_4_4:1.172.0.2
	OPENBSD_4_4_BASE:1.172
	OPENBSD_4_3:1.162.0.2
	OPENBSD_4_3_BASE:1.162
	OPENBSD_4_2:1.141.0.2
	OPENBSD_4_2_BASE:1.141
	OPENBSD_4_1:1.134.0.2
	OPENBSD_4_1_BASE:1.134
	OPENBSD_4_0:1.116.0.2
	OPENBSD_4_0_BASE:1.116
	OPENBSD_3_9:1.101.0.2
	OPENBSD_3_9_BASE:1.101
	OPENBSD_3_8:1.80.0.2
	OPENBSD_3_8_BASE:1.80
	OPENBSD_3_7:1.45.0.2
	OPENBSD_3_7_BASE:1.45
	OpenCVS_0_1:1.1.1.1
	OpenCVS:1.1.0.1;
locks; strict;
comment	@ * @;


1.182
date	2015.04.04.14.19.10;	author stsp;	state Exp;
branches;
next	1.181;
commitid	ED4wEXoF2lnt3mdI;

1.181
date	2011.09.20.12.43.45;	author nicm;	state Exp;
branches;
next	1.180;

1.180
date	2011.04.20.18.43.57;	author nicm;	state Exp;
branches;
next	1.179;

1.179
date	2010.09.29.18.14.52;	author nicm;	state Exp;
branches;
next	1.178;

1.178
date	2010.07.23.21.46.05;	author ray;	state Exp;
branches;
next	1.177;

1.177
date	2010.07.23.08.31.19;	author ray;	state Exp;
branches;
next	1.176;

1.176
date	2009.03.25.21.19.20;	author joris;	state Exp;
branches;
next	1.175;

1.175
date	2009.03.19.09.53.16;	author joris;	state Exp;
branches;
next	1.174;

1.174
date	2009.02.21.14.11.08;	author joris;	state Exp;
branches;
next	1.173;

1.173
date	2009.02.21.12.52.47;	author joris;	state Exp;
branches;
next	1.172;

1.172
date	2008.06.27.21.14.15;	author xsa;	state Exp;
branches;
next	1.171;

1.171
date	2008.06.27.21.05.46;	author xsa;	state Exp;
branches;
next	1.170;

1.170
date	2008.06.17.11.05.39;	author joris;	state Exp;
branches;
next	1.169;

1.169
date	2008.06.15.04.38.52;	author tobias;	state Exp;
branches;
next	1.168;

1.168
date	2008.06.14.03.58.29;	author tobias;	state Exp;
branches;
next	1.167;

1.167
date	2008.06.10.01.00.34;	author joris;	state Exp;
branches;
next	1.166;

1.166
date	2008.06.08.20.08.43;	author tobias;	state Exp;
branches;
next	1.165;

1.165
date	2008.05.28.17.12.00;	author tobias;	state Exp;
branches;
next	1.164;

1.164
date	2008.03.09.03.14.52;	author joris;	state Exp;
branches;
next	1.163;

1.163
date	2008.03.08.20.26.34;	author joris;	state Exp;
branches;
next	1.162;

1.162
date	2008.03.01.21.29.36;	author deraadt;	state Exp;
branches;
next	1.161;

1.161
date	2008.02.10.14.08.52;	author xsa;	state Exp;
branches;
next	1.160;

1.160
date	2008.02.10.12.24.27;	author joris;	state Exp;
branches;
next	1.159;

1.159
date	2008.02.10.10.10.15;	author joris;	state Exp;
branches;
next	1.158;

1.158
date	2008.02.09.20.04.00;	author xsa;	state Exp;
branches;
next	1.157;

1.157
date	2008.02.09.12.48.23;	author joris;	state Exp;
branches;
next	1.156;

1.156
date	2008.02.09.12.20.33;	author tobias;	state Exp;
branches;
next	1.155;

1.155
date	2008.02.09.11.17.02;	author tobias;	state Exp;
branches;
next	1.154;

1.154
date	2008.02.04.18.23.58;	author tobias;	state Exp;
branches;
next	1.153;

1.153
date	2008.02.04.15.07.33;	author tobias;	state Exp;
branches;
next	1.152;

1.152
date	2008.02.03.22.50.28;	author joris;	state Exp;
branches;
next	1.151;

1.151
date	2008.02.03.17.20.14;	author joris;	state Exp;
branches;
next	1.150;

1.150
date	2008.02.01.17.18.59;	author tobias;	state Exp;
branches;
next	1.149;

1.149
date	2008.01.31.10.15.05;	author tobias;	state Exp;
branches;
next	1.148;

1.148
date	2008.01.10.10.05.40;	author tobias;	state Exp;
branches;
next	1.147;

1.147
date	2007.09.23.11.19.24;	author joris;	state Exp;
branches;
next	1.146;

1.146
date	2007.09.22.16.01.22;	author joris;	state Exp;
branches;
next	1.145;

1.145
date	2007.09.10.19.11.08;	author joris;	state Exp;
branches;
next	1.144;

1.144
date	2007.09.10.14.06.14;	author joris;	state Exp;
branches;
next	1.143;

1.143
date	2007.09.04.19.07.03;	author tobias;	state Exp;
branches;
next	1.142;

1.142
date	2007.08.30.11.19.29;	author joris;	state Exp;
branches;
next	1.141;

1.141
date	2007.07.03.13.22.42;	author joris;	state Exp;
branches;
next	1.140;

1.140
date	2007.06.28.21.38.09;	author xsa;	state Exp;
branches;
next	1.139;

1.139
date	2007.06.27.20.27.38;	author xsa;	state Exp;
branches;
next	1.138;

1.138
date	2007.06.27.03.58.16;	author joris;	state Exp;
branches;
next	1.137;

1.137
date	2007.06.26.18.02.43;	author xsa;	state Exp;
branches;
next	1.136;

1.136
date	2007.06.18.17.54.13;	author joris;	state Exp;
branches;
next	1.135;

1.135
date	2007.03.22.17.18.19;	author xsa;	state Exp;
branches;
next	1.134;

1.134
date	2007.02.22.06.42.09;	author otto;	state Exp;
branches;
next	1.133;

1.133
date	2007.02.19.11.40.00;	author otto;	state Exp;
branches;
next	1.132;

1.132
date	2007.01.19.08.21.44;	author xsa;	state Exp;
branches;
next	1.131;

1.131
date	2007.01.18.08.49.08;	author xsa;	state Exp;
branches;
next	1.130;

1.130
date	2007.01.17.17.54.50;	author joris;	state Exp;
branches;
next	1.129;

1.129
date	2007.01.13.15.45.59;	author joris;	state Exp;
branches;
next	1.128;

1.128
date	2007.01.12.23.32.01;	author niallo;	state Exp;
branches;
next	1.127;

1.127
date	2007.01.12.09.27.25;	author xsa;	state Exp;
branches;
next	1.126;

1.126
date	2007.01.07.02.39.24;	author joris;	state Exp;
branches;
next	1.125;

1.125
date	2007.01.03.20.48.26;	author joris;	state Exp;
branches;
next	1.124;

1.124
date	2006.12.11.07.59.18;	author xsa;	state Exp;
branches;
next	1.123;

1.123
date	2006.11.27.14.19.53;	author xsa;	state Exp;
branches;
next	1.122;

1.122
date	2006.11.14.15.39.41;	author xsa;	state Exp;
branches;
next	1.121;

1.121
date	2006.11.14.09.49.52;	author xsa;	state Exp;
branches;
next	1.120;

1.120
date	2006.11.13.12.06.27;	author xsa;	state Exp;
branches;
next	1.119;

1.119
date	2006.11.09.14.00.14;	author xsa;	state Exp;
branches;
next	1.118;

1.118
date	2006.11.09.10.08.33;	author xsa;	state Exp;
branches;
next	1.117;

1.117
date	2006.10.31.15.23.40;	author xsa;	state Exp;
branches;
next	1.116;

1.116
date	2006.07.07.17.37.17;	author joris;	state Exp;
branches;
next	1.115;

1.115
date	2006.07.01.20.30.46;	author reyk;	state Exp;
branches;
next	1.114;

1.114
date	2006.06.19.05.05.17;	author joris;	state Exp;
branches;
next	1.113;

1.113
date	2006.06.14.15.14.47;	author xsa;	state Exp;
branches;
next	1.112;

1.112
date	2006.06.12.13.56.00;	author xsa;	state Exp;
branches;
next	1.111;

1.111
date	2006.06.03.19.07.13;	author joris;	state Exp;
branches;
next	1.110;

1.110
date	2006.05.30.06.34.39;	author joris;	state Exp;
branches;
next	1.109;

1.109
date	2006.05.28.01.24.28;	author joris;	state Exp;
branches;
next	1.108;

1.108
date	2006.05.27.20.57.42;	author joris;	state Exp;
branches;
next	1.107;

1.107
date	2006.05.27.18.04.46;	author joris;	state Exp;
branches;
next	1.106;

1.106
date	2006.05.27.15.14.27;	author joris;	state Exp;
branches;
next	1.105;

1.105
date	2006.05.27.05.20.25;	author joris;	state Exp;
branches;
next	1.104;

1.104
date	2006.05.27.03.30.30;	author joris;	state Exp;
branches;
next	1.103;

1.103
date	2006.04.01.20.11.25;	author joris;	state Exp;
branches;
next	1.102;

1.102
date	2006.03.15.19.59.36;	author niallo;	state Exp;
branches;
next	1.101;

1.101
date	2006.02.10.10.15.48;	author xsa;	state Exp;
branches;
next	1.100;

1.100
date	2006.02.09.13.08.01;	author xsa;	state Exp;
branches;
next	1.99;

1.99
date	2006.01.27.15.42.35;	author xsa;	state Exp;
branches;
next	1.98;

1.98
date	2006.01.10.08.24.57;	author xsa;	state Exp;
branches;
next	1.97;

1.97
date	2006.01.02.09.42.20;	author xsa;	state Exp;
branches;
next	1.96;

1.96
date	2006.01.01.05.05.58;	author joris;	state Exp;
branches;
next	1.95;

1.95
date	2005.12.30.16.47.36;	author joris;	state Exp;
branches;
next	1.94;

1.94
date	2005.12.30.02.03.28;	author joris;	state Exp;
branches;
next	1.93;

1.93
date	2005.12.24.19.07.52;	author xsa;	state Exp;
branches;
next	1.92;

1.92
date	2005.12.19.18.21.30;	author xsa;	state Exp;
branches;
next	1.91;

1.91
date	2005.12.10.20.27.45;	author joris;	state Exp;
branches;
next	1.90;

1.90
date	2005.12.03.15.07.21;	author joris;	state Exp;
branches;
next	1.89;

1.89
date	2005.12.03.15.02.54;	author joris;	state Exp;
branches;
next	1.88;

1.88
date	2005.12.03.01.02.08;	author joris;	state Exp;
branches;
next	1.87;

1.87
date	2005.10.22.17.32.57;	author joris;	state Exp;
branches;
next	1.86;

1.86
date	2005.10.07.21.47.32;	author reyk;	state Exp;
branches;
next	1.85;

1.85
date	2005.09.15.22.12.23;	author joris;	state Exp;
branches;
next	1.84;

1.84
date	2005.09.15.17.01.10;	author xsa;	state Exp;
branches;
next	1.83;

1.83
date	2005.09.11.14.16.48;	author joris;	state Exp;
branches;
next	1.82;

1.82
date	2005.09.06.15.29.33;	author joris;	state Exp;
branches;
next	1.81;

1.81
date	2005.09.05.19.29.42;	author xsa;	state Exp;
branches;
next	1.80;

1.80
date	2005.08.16.16.34.19;	author xsa;	state Exp;
branches;
next	1.79;

1.79
date	2005.08.12.14.41.54;	author xsa;	state Exp;
branches;
next	1.78;

1.78
date	2005.08.09.10.33.46;	author joris;	state Exp;
branches;
next	1.77;

1.77
date	2005.08.04.13.31.14;	author xsa;	state Exp;
branches;
next	1.76;

1.76
date	2005.08.03.14.43.08;	author xsa;	state Exp;
branches;
next	1.75;

1.75
date	2005.07.27.10.36.13;	author xsa;	state Exp;
branches;
next	1.74;

1.74
date	2005.07.25.11.28.59;	author xsa;	state Exp;
branches;
next	1.73;

1.73
date	2005.07.24.17.12.25;	author xsa;	state Exp;
branches;
next	1.72;

1.72
date	2005.07.23.11.19.46;	author joris;	state Exp;
branches;
next	1.71;

1.71
date	2005.07.23.10.49.35;	author xsa;	state Exp;
branches;
next	1.70;

1.70
date	2005.07.21.09.51.07;	author xsa;	state Exp;
branches;
next	1.69;

1.69
date	2005.07.13.16.20.44;	author xsa;	state Exp;
branches;
next	1.68;

1.68
date	2005.07.07.14.27.57;	author joris;	state Exp;
branches;
next	1.67;

1.67
date	2005.06.17.15.09.55;	author joris;	state Exp;
branches;
next	1.66;

1.66
date	2005.06.17.08.09.13;	author xsa;	state Exp;
branches;
next	1.65;

1.65
date	2005.06.07.09.06.15;	author joris;	state Exp;
branches;
next	1.64;

1.64
date	2005.06.01.17.44.34;	author joris;	state Exp;
branches;
next	1.63;

1.63
date	2005.05.31.08.58.47;	author xsa;	state Exp;
branches;
next	1.62;

1.62
date	2005.05.26.22.25.31;	author jfb;	state Exp;
branches;
next	1.61;

1.61
date	2005.05.26.21.25.49;	author jfb;	state Exp;
branches;
next	1.60;

1.60
date	2005.05.26.03.07.20;	author joris;	state Exp;
branches;
next	1.59;

1.59
date	2005.05.24.20.04.43;	author joris;	state Exp;
branches;
next	1.58;

1.58
date	2005.05.24.04.12.25;	author jfb;	state Exp;
branches;
next	1.57;

1.57
date	2005.05.20.18.26.49;	author xsa;	state Exp;
branches;
next	1.56;

1.56
date	2005.05.19.04.17.24;	author jfb;	state Exp;
branches;
next	1.55;

1.55
date	2005.05.18.20.24.19;	author joris;	state Exp;
branches;
next	1.54;

1.54
date	2005.05.02.15.00.18;	author xsa;	state Exp;
branches;
next	1.53;

1.53
date	2005.04.25.17.59.16;	author jfb;	state Exp;
branches;
next	1.52;

1.52
date	2005.04.20.23.11.30;	author jfb;	state Exp;
branches;
next	1.51;

1.51
date	2005.04.20.18.33.30;	author jfb;	state Exp;
branches;
next	1.50;

1.50
date	2005.04.12.14.58.40;	author joris;	state Exp;
branches;
next	1.49;

1.49
date	2005.04.06.16.35.25;	author jfb;	state Exp;
branches;
next	1.48;

1.48
date	2005.03.31.17.18.24;	author joris;	state Exp;
branches;
next	1.47;

1.47
date	2005.03.30.17.43.04;	author joris;	state Exp;
branches;
next	1.46;

1.46
date	2005.03.24.01.03.41;	author joris;	state Exp;
branches;
next	1.45;

1.45
date	2005.03.06.21.09.00;	author joris;	state Exp;
branches;
next	1.44;

1.44
date	2005.02.01.18.51.04;	author jfb;	state Exp;
branches;
next	1.43;

1.43
date	2005.01.24.16.12.56;	author jfb;	state Exp;
branches;
next	1.42;

1.42
date	2005.01.13.17.53.34;	author jfb;	state Exp;
branches;
next	1.41;

1.41
date	2004.12.21.18.47.59;	author jfb;	state Exp;
branches;
next	1.40;

1.40
date	2004.12.21.18.15.55;	author xsa;	state Exp;
branches;
next	1.39;

1.39
date	2004.12.14.19.11.54;	author jfb;	state Exp;
branches;
next	1.38;

1.38
date	2004.12.09.20.03.27;	author jfb;	state Exp;
branches;
next	1.37;

1.37
date	2004.12.08.17.22.48;	author jfb;	state Exp;
branches;
next	1.36;

1.36
date	2004.12.08.16.07.43;	author jfb;	state Exp;
branches;
next	1.35;

1.35
date	2004.12.07.17.10.56;	author tedu;	state Exp;
branches;
next	1.34;

1.34
date	2004.12.07.06.33.10;	author jfb;	state Exp;
branches;
next	1.33;

1.33
date	2004.12.02.17.45.44;	author jfb;	state Exp;
branches;
next	1.32;

1.32
date	2004.11.26.15.15.36;	author jfb;	state Exp;
branches;
next	1.31;

1.31
date	2004.11.18.15.57.39;	author jfb;	state Exp;
branches;
next	1.30;

1.30
date	2004.11.09.20.49.17;	author krapht;	state Exp;
branches;
next	1.29;

1.29
date	2004.08.27.15.40.44;	author jfb;	state Exp;
branches;
next	1.28;

1.28
date	2004.08.13.12.47.54;	author jfb;	state Exp;
branches;
next	1.27;

1.27
date	2004.08.13.02.56.37;	author jfb;	state Exp;
branches;
next	1.26;

1.26
date	2004.08.13.02.16.29;	author jfb;	state Exp;
branches;
next	1.25;

1.25
date	2004.08.06.20.08.49;	author jfb;	state Exp;
branches;
next	1.24;

1.24
date	2004.08.06.14.49.03;	author jfb;	state Exp;
branches;
next	1.23;

1.23
date	2004.08.06.13.01.10;	author jfb;	state Exp;
branches;
next	1.22;

1.22
date	2004.08.05.13.32.08;	author jfb;	state Exp;
branches;
next	1.21;

1.21
date	2004.08.05.13.24.37;	author jfb;	state Exp;
branches;
next	1.20;

1.20
date	2004.08.03.00.05.54;	author jfb;	state Exp;
branches;
next	1.19;

1.19
date	2004.08.02.22.45.57;	author jfb;	state Exp;
branches;
next	1.18;

1.18
date	2004.07.30.23.13.24;	author jfb;	state Exp;
branches;
next	1.17;

1.17
date	2004.07.30.17.37.13;	author jfb;	state Exp;
branches;
next	1.16;

1.16
date	2004.07.30.01.49.22;	author jfb;	state Exp;
branches;
next	1.15;

1.15
date	2004.07.29.18.22.28;	author jfb;	state Exp;
branches;
next	1.14;

1.14
date	2004.07.29.16.52.39;	author jfb;	state Exp;
branches;
next	1.13;

1.13
date	2004.07.29.16.46.58;	author jfb;	state Exp;
branches;
next	1.12;

1.12
date	2004.07.29.15.41.58;	author jfb;	state Exp;
branches;
next	1.11;

1.11
date	2004.07.28.01.53.29;	author jfb;	state Exp;
branches;
next	1.10;

1.10
date	2004.07.27.12.01.58;	author jfb;	state Exp;
branches;
next	1.9;

1.9
date	2004.07.26.15.56.43;	author jfb;	state Exp;
branches;
next	1.8;

1.8
date	2004.07.25.03.18.53;	author jfb;	state Exp;
branches;
next	1.7;

1.7
date	2004.07.23.05.40.32;	author jfb;	state Exp;
branches;
next	1.6;

1.6
date	2004.07.16.03.08.26;	author jfb;	state Exp;
branches;
next	1.5;

1.5
date	2004.07.14.19.08.48;	author jfb;	state Exp;
branches;
next	1.4;

1.4
date	2004.07.14.19.03.00;	author jfb;	state Exp;
branches;
next	1.3;

1.3
date	2004.07.14.04.32.42;	author jfb;	state Exp;
branches;
next	1.2;

1.2
date	2004.07.14.03.33.09;	author jfb;	state Exp;
branches;
next	1.1;

1.1
date	2004.07.13.22.02.40;	author jfb;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.07.13.22.02.40;	author jfb;	state Exp;
branches;
next	;


desc
@@


1.182
log
@Fix modified timestamp in output of opencvs status.
Patch by joris via tech@@; reminded by tedu
@
text
@/*	$OpenBSD: cvs.h,v 1.181 2011/09/20 12:43:45 nicm Exp $	*/
/*
 * Copyright (c) 2004 Jean-Francois Brousseau <jfb@@openbsd.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef CVS_H
#define CVS_H

#include <signal.h>

#include "config.h"
#include "file.h"
#include "log.h"
#include "worklist.h"
#include "repository.h"
#include "trigger.h"
#include "util.h"
#include "xmalloc.h"

#define CVS_VERSION	"OpenCVS 4.5"

#define CVS_REV_BUFSZ	32
#define CVS_TIME_BUFSZ	64

#define CVS_DATE_FMT	"%Y.%m.%d.%H.%M.%S"

/* operations */
#define CVS_OP_UNKNOWN		0
#define CVS_OP_ADD		1
#define CVS_OP_ADMIN		2
#define CVS_OP_ANNOTATE		3
#define CVS_OP_CHECKOUT		4
#define CVS_OP_COMMIT		5
#define CVS_OP_DIFF		6
#define CVS_OP_EDIT		7
#define CVS_OP_EDITORS		8
#define CVS_OP_EXPORT		9
#define CVS_OP_HISTORY		10
#define CVS_OP_IMPORT		11
#define CVS_OP_INIT		12
#define CVS_OP_LOG		13
#define CVS_OP_RANNOTATE	14
#define CVS_OP_RDIFF		15
#define CVS_OP_RELEASE		16
#define CVS_OP_REMOVE		17
#define CVS_OP_RLOG		18
#define CVS_OP_RTAG		19
#define CVS_OP_SERVER		20
#define CVS_OP_STATUS		21
#define CVS_OP_TAG		22
#define CVS_OP_UNEDIT		23
#define CVS_OP_UPDATE		24
#define CVS_OP_VERSION		25
#define CVS_OP_WATCH		26
#define CVS_OP_WATCHERS		27

/* methods */
#define CVS_METHOD_NONE		0
#define CVS_METHOD_LOCAL	1	/* local access */
#define CVS_METHOD_SERVER	2	/* tunnel through CVS_RSH */
#define CVS_METHOD_PSERVER	3	/* cvs pserver */
#define CVS_METHOD_KSERVER	4	/* kerberos */
#define CVS_METHOD_GSERVER	5	/* gssapi server */
#define CVS_METHOD_EXT		6
#define CVS_METHOD_FORK		7	/* local but fork */

#define CVS_CMD_MAXNAMELEN	16
#define CVS_CMD_MAXALIAS	2
#define CVS_CMD_MAXDESCRLEN	64

/* flags */
#define CVS_USE_WDIR		0x01
#define CVS_LOCK_REPO		0x02

/* defaults */
#define CVS_SERVER_DEFAULT	"cvs"
#define CVS_RSH_DEFAULT		"ssh"
#define CVS_EDITOR_DEFAULT	"vi"
#define CVS_TMPDIR_DEFAULT	"/tmp"
#define CVS_UMASK_DEFAULT	002

/* extensions */
#define CVS_DESCR_FILE_EXT	",t"

/* server-side paths */
#define CVS_PATH_DEVNULL	"/dev/null"
#define CVS_PATH_ROOT		"CVSROOT"
#define CVS_PATH_EMPTYDIR	CVS_PATH_ROOT "/Emptydir"
#define CVS_PATH_CHECKOUTLIST	CVS_PATH_ROOT "/checkoutlist"
#define CVS_PATH_COMMITINFO	CVS_PATH_ROOT "/commitinfo"
#define CVS_PATH_CONFIG		CVS_PATH_ROOT "/config"
#define CVS_PATH_CVSIGNORE	CVS_PATH_ROOT "/cvsignore"
#define CVS_PATH_CVSWRAPPERS	CVS_PATH_ROOT "/cvswrappers"
#define CVS_PATH_EDITINFO	CVS_PATH_ROOT "/editinfo"
#define CVS_PATH_HISTORY	CVS_PATH_ROOT "/history"
#define CVS_PATH_LOGINFO	CVS_PATH_ROOT "/loginfo"
#define CVS_PATH_MODULES	CVS_PATH_ROOT "/modules"
#define CVS_PATH_NOTIFY_R	CVS_PATH_ROOT "/notify"
#define CVS_PATH_RCSINFO	CVS_PATH_ROOT "/rcsinfo"
#define CVS_PATH_TAGINFO	CVS_PATH_ROOT "/taginfo"
#define CVS_PATH_VALTAGS	CVS_PATH_ROOT "/val-tags"
#define CVS_PATH_VERIFYMSG	CVS_PATH_ROOT "/verifymsg"

/* client-side paths */
#define CVS_PATH_RC		".cvsrc"
#define CVS_PATH_CVSDIR		"CVS"
#define CVS_PATH_BASEDIR	CVS_PATH_CVSDIR "/Base"
#define CVS_PATH_BASEREV	CVS_PATH_CVSDIR "/Baserev"
#define CVS_PATH_BASEREVTMP	CVS_PATH_CVSDIR "/Baserev.tmp"
#define CVS_PATH_CHECKINPROG	CVS_PATH_CVSDIR "/Checkin.prog"
#define CVS_PATH_ENTRIES	CVS_PATH_CVSDIR "/Entries"
#define CVS_PATH_STATICENTRIES	CVS_PATH_CVSDIR "/Entries.Static"
#define CVS_PATH_LOGENTRIES	CVS_PATH_CVSDIR "/Entries.Log"
#define CVS_PATH_BACKUPENTRIES	CVS_PATH_CVSDIR "/Entries.Backup"
#define CVS_PATH_NOTIFY		CVS_PATH_CVSDIR "/Notify"
#define CVS_PATH_NOTIFYTMP	CVS_PATH_CVSDIR "/Notify.tmp"
#define CVS_PATH_ROOTSPEC	CVS_PATH_CVSDIR "/Root"
#define CVS_PATH_REPOSITORY	CVS_PATH_CVSDIR "/Repository"
#define CVS_PATH_TAG		CVS_PATH_CVSDIR "/Tag"
#define CVS_PATH_TEMPLATE	CVS_PATH_CVSDIR "/Template"
#define CVS_PATH_UPDATEPROG	CVS_PATH_CVSDIR "/Update.prog"
#define CVS_PATH_ATTIC		"Attic"

/* history stuff */
#define CVS_HISTORY_TAG			0
#define CVS_HISTORY_CHECKOUT		1
#define CVS_HISTORY_EXPORT		2
#define CVS_HISTORY_RELEASE		3
#define CVS_HISTORY_UPDATE_REMOVE	4
#define CVS_HISTORY_UPDATE_CO		5
#define CVS_HISTORY_UPDATE_MERGED	6
#define CVS_HISTORY_UPDATE_MERGED_ERR	7
#define CVS_HISTORY_COMMIT_MODIFIED	8
#define CVS_HISTORY_COMMIT_ADDED	9
#define CVS_HISTORY_COMMIT_REMOVED	10

void	cvs_history_add(int, struct cvs_file *, const char *);

struct cvs_cmd {
	u_int	 cmd_op;
	u_int	 cmd_flags;
	char	 cmd_name[CVS_CMD_MAXNAMELEN];
	char	 cmd_alias[CVS_CMD_MAXALIAS][CVS_CMD_MAXNAMELEN];
	char	 cmd_descr[CVS_CMD_MAXDESCRLEN];
	char	*cmd_synopsis;
	char	*cmd_opts;
	char	*cmd_defargs;

	int	(*cmd)(int, char **);
};

struct cvsroot;

struct cvs_recursion {
	void	(*enterdir)(struct cvs_file *);
	void	(*leavedir)(struct cvs_file *);
	void	(*fileproc)(struct cvs_file *);
	int	flags;
};

#define CR_RECURSE_DIRS		0x01
#define CR_ATTIC		0x02
#define CR_REPO			0x04

struct cvs_var {
	char   *cv_name;
	char   *cv_val;
	TAILQ_ENTRY(cvs_var) cv_link;
};

TAILQ_HEAD(, cvs_var) cvs_variables;

#define CVS_ROOT_CONNECTED	0x01

struct cvsroot {
	char   *cr_str;
	u_int   cr_method;
	char   *cr_buf;
	char   *cr_user;
	char   *cr_pass;
	char   *cr_host;
	char   *cr_dir;
	u_int   cr_port;

	/* connection data */
	FILE   *cr_srvin;
	FILE   *cr_srvout;
	FILE   *cr_srverr;
};

#define CVS_HIST_ADDED		'A'
#define CVS_HIST_EXPORT		'E'
#define CVS_HIST_RELEASE	'F'
#define CVS_HIST_MODIFIED	'M'
#define CVS_HIST_CHECKOUT	'O'
#define CVS_HIST_COMMIT		'R'
#define CVS_HIST_TAG		'T'

#define CVS_DATE_DUMMY	"dummy timestamp"
#define CVS_DATE_DMSEC	(time_t)-1

#define CVS_ENT_NONE	0
#define CVS_ENT_FILE	1
#define CVS_ENT_DIR	2

#define CVS_ENT_REG		0
#define CVS_ENT_ADDED		1
#define CVS_ENT_REMOVED		2
#define CVS_ENT_UPTODATE	3
#define CVS_ENT_UNKNOWN		4

#define CVS_ENT_MAXLINELEN	1024

#define ENT_NOSYNC	0
#define ENT_SYNC	1

#define STRIP_SLASH(p)					\
	do {						\
		size_t _slen;				\
		_slen = strlen(p);			\
		while ((_slen > 0) && (p[_slen - 1] == '/'))	\
			p[--_slen] = '\0';		\
	} while (0)

struct cvs_ent {
	char		*ce_buf;
	char		*ce_conflict;
	char		*ce_name;
	char		*ce_opts;
	char		*ce_tag;
	char		*ce_time;
	time_t		 ce_date;
	time_t		 ce_mtime;
	u_int16_t	 ce_type;
	u_int16_t	 ce_status;
	RCSNUM		*ce_rev;
};

struct cvs_ent_line {
	char	*buf;
	TAILQ_ENTRY(cvs_ent_line) entries_list;
};

typedef struct cvs_entries {
	char	*cef_path;
	char	*cef_bpath;
	char	*cef_lpath;

	TAILQ_HEAD(, cvs_ent_line)	 cef_ent;
} CVSENTRIES;

extern char *checkout_target_dir;
extern char *cvs_join_rev1;
extern char *cvs_join_rev2;
extern int   backup_local_changes;

extern struct module_checkout *current_module;
extern char *module_repo_root;

extern struct ignore_head checkout_ign_pats;
extern struct wklhead temp_files;
extern volatile sig_atomic_t sig_received;
extern volatile sig_atomic_t cvs_quit;
extern struct cvsroot *current_cvsroot;
extern char *cvs_tagname;
extern char *cvs_editor;
extern char *cvs_homedir;
extern char *cvs_rsh;
extern char *cvs_tmpdir;
extern char *import_repository;
extern char *cvs_server_path;
extern time_t cvs_specified_date;
extern time_t cvs_directory_date;
extern char *cvs_specified_tag;
extern char *cvs_directory_tag;

extern int  cvs_umask;
extern int  verbosity;
extern int  cvs_trace;
extern int  cvs_nolog;
extern int  cvs_compress;
extern int  cvs_cmdop;
extern int  cvs_nocase;
extern int  cvs_noexec;
extern int  cvs_readonly;
extern int  cvs_readonlyfs;
extern int  cvs_server_active;
extern int  reset_option;
extern int  reset_tag;
extern int  kflag;

extern struct cvs_cmd *cmdp;
extern struct cvs_cmd *cvs_cdt[];

extern struct cvs_cmd cvs_cmd_add;
extern struct cvs_cmd cvs_cmd_admin;
extern struct cvs_cmd cvs_cmd_annotate;
extern struct cvs_cmd cvs_cmd_checkout;
extern struct cvs_cmd cvs_cmd_commit;
extern struct cvs_cmd cvs_cmd_diff;
extern struct cvs_cmd cvs_cmd_edit;
extern struct cvs_cmd cvs_cmd_editors;
extern struct cvs_cmd cvs_cmd_export;
extern struct cvs_cmd cvs_cmd_history;
extern struct cvs_cmd cvs_cmd_import;
extern struct cvs_cmd cvs_cmd_init;
extern struct cvs_cmd cvs_cmd_log;
extern struct cvs_cmd cvs_cmd_rannotate;
extern struct cvs_cmd cvs_cmd_rdiff;
extern struct cvs_cmd cvs_cmd_release;
extern struct cvs_cmd cvs_cmd_remove;
extern struct cvs_cmd cvs_cmd_rlog;
extern struct cvs_cmd cvs_cmd_rtag;
extern struct cvs_cmd cvs_cmd_status;
extern struct cvs_cmd cvs_cmd_tag;
extern struct cvs_cmd cvs_cmd_update;
extern struct cvs_cmd cvs_cmd_version;
extern struct cvs_cmd cvs_cmd_server;
extern struct cvs_cmd cvs_cmd_unedit;
extern struct cvs_cmd cvs_cmd_watch;
extern struct cvs_cmd cvs_cmd_watchers;

/* add.c */
void		 cvs_add_tobranch(struct cvs_file *, char *);

/* cmd.c */
struct cvs_cmd	*cvs_findcmd(const char *);

/* cvs.c */
int		 cvs_build_cmd(char ***, char **, int);
int		 cvs_var_set(const char *, const char *);
int		 cvs_var_unset(const char *);
const char	*cvs_var_get(const char *);
void		 cvs_cleanup(void);

/* date.y */
time_t		 date_parse(const char *);

/* entries.c */
struct cvs_ent	*cvs_ent_parse(const char *);
struct cvs_ent	*cvs_ent_get(CVSENTRIES *, const char *);
CVSENTRIES	*cvs_ent_open(const char *);
void		cvs_ent_add(CVSENTRIES *, const char *);
void		cvs_ent_remove(CVSENTRIES *, const char *);
void		cvs_ent_close(CVSENTRIES *, int);
void		cvs_ent_free(struct cvs_ent *);
void		cvs_ent_line_str(const char *, char *, char *, char *, char *,
		    int, int, char *, size_t);
void		cvs_parse_tagfile(char *, char **, char **, int *);
void		cvs_write_tagfile(const char *, char *, char *);

/* root.c */
struct cvsroot	*cvsroot_get(const char *);

/* logmsg.c */
char	*cvs_logmsg_read(const char *);
char	*cvs_logmsg_create(char *, struct cvs_flisthead *,
	     struct cvs_flisthead *, struct cvs_flisthead *);
int	 cvs_logmsg_verify(char *);

/* misc stuff */
void	cvs_update_local(struct cvs_file *);
void	cvs_update_enterdir(struct cvs_file *);
void	cvs_update_leavedir(struct cvs_file *);
void	cvs_checkout_file(struct cvs_file *, RCSNUM *, char *, int);
void	cvs_remove_local(struct cvs_file *);
void	cvs_add_local(struct cvs_file *);
int	update_has_conflict_markers(struct cvs_file *);
void	cvs_backup_file(struct cvs_file *);

#define CO_MERGE	0x01
#define CO_SETSTICKY	0x02
#define CO_DUMP		0x04
#define CO_COMMIT	0x08
#define CO_REMOVE	0x10

/* commands */
int	cvs_add(int, char **);
int	cvs_admin(int, char **);
int	cvs_annotate(int, char **);
int	cvs_checkout(int, char **);
int	cvs_commit(int, char **);
int	cvs_diff(int, char **);
int	cvs_edit(int, char **);
int	cvs_editors(int, char **);
int	cvs_export(int, char **);
int	cvs_getlog(int, char **);
int	cvs_history(int, char **);
int	cvs_import(int, char **);
int	cvs_init(int, char **);
int	cvs_release(int, char **);
int	cvs_remove(int, char **);
int	cvs_status(int, char **);
int	cvs_tag(int, char **);
int	cvs_unedit(int, char **);
int	cvs_update(int, char **);
int	cvs_version(int, char **);
int	cvs_watch(int, char **);
int	cvs_watchers(int, char **);


#endif
@


1.181
log
@Lose unused variable cvs_msg, from Michael W Bombardieri.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.180 2011/04/20 18:43:57 nicm Exp $	*/
d252 1
@


1.180
log
@Remove some includes and defines that are no longer needed, from Michael
W Bombardieri.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.179 2010/09/29 18:14:52 nicm Exp $	*/
a287 1
extern char *cvs_msg;
@


1.179
log
@Support for update -C, from zinovik.

ok tobias xsa
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.178 2010/07/23 21:46:05 ray Exp $	*/
a41 2

#define CVS_CKSUM_LEN	MD5_DIGEST_STRING_LENGTH
@


1.178
log
@Reduce variable/function name and whitespace differences between
cvs/rcs.

OK xsa zinovik
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.177 2010/07/23 08:31:19 ray Exp $	*/
d277 1
d392 1
@


1.177
log
@Rename a bunch of variables and functions, removing the cvs_/rcs_
prefixes to reduce differences between cvs and rcs files.

"yes!" nicm
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.176 2009/03/25 21:19:20 joris Exp $	*/
d359 1
a359 1
time_t		 cvs_date_parse(const char *);
@


1.176
log
@remove unused functions, definitions and outdated comments
from the stone ages.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.175 2009/03/19 09:53:16 joris Exp $	*/
d282 1
a282 1
extern struct cvs_wklhead temp_files;
@


1.175
log
@properly register Questionable files using CVS/Entries server-side
in order for them to show up as "? foobar" when opencvs is in server mode.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.174 2009/02/21 14:11:08 joris Exp $	*/
a42 3
#define CVS_HIST_CACHE	128
#define CVS_HIST_NBFLD	6

a78 2

#define CVS_OP_ANY		64	/* all operations */
@


1.174
log
@bump to match release version
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.173 2009/02/21 12:52:47 joris Exp $	*/
d238 1
@


1.173
log
@cleanup of CVSROOT, we have no need for cr_flags,
cr_version or cr_vrmask[] its all very old stuff.

remove all macros using cr_vrmask as well, no use for them.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.172 2008/06/27 21:14:15 xsa Exp $	*/
d41 1
a41 1
#define CVS_VERSION	"OpenCVS 4.4"
@


1.172
log
@Simply the version string and nuke unecessary variables used to build it.
ok joris
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.171 2008/06/27 21:05:46 xsa Exp $	*/
a213 1
	u_int   cr_flags;
a216 4
	char   *cr_version;     /* version of remote server */
	u_char  cr_vrmask[16];  /* mask of valid requests supported by server */

	TAILQ_ENTRY(cvsroot) root_cache;
a217 5

#define CVS_SETVR(rt, rq) ((rt)->cr_vrmask[(rq) / 8] |=  (1 << ((rq) % 8)))
#define CVS_GETVR(rt, rq) ((rt)->cr_vrmask[(rq) / 8] &   (1 << ((rq) % 8)))
#define CVS_CLRVR(rt, rq) ((rt)->cr_vrmask[(rq) / 8] &= ~(1 << ((rq) % 8)))
#define CVS_RSTVR(rt)	memset((rt)->cr_vrmask, 0, sizeof((rt)->cr_vrmask))
@


1.171
log
@Bump version; we're not going to stay with 1.0 forever.
ok joris
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.169 2008/06/15 04:38:52 tobias Exp $	*/
d41 1
a41 7
#define CVS_VERSION_MAJOR	"4"
#define CVS_VERSION_MINOR	"4"
#define CVS_VERSION_PORT

#define CVS_VERSION		\
	"OpenCVS version "	\
	CVS_VERSION_MAJOR "." CVS_VERSION_MINOR CVS_VERSION_PORT
@


1.170
log
@unused vars
@
text
@d41 2
a42 2
#define CVS_VERSION_MINOR	"0"
#define CVS_VERSION_MAJOR	"1"
@


1.169
log
@Support the addition of new files in branches.

ok joris
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.168 2008/06/14 03:58:29 tobias Exp $	*/
a328 1
extern int  cvs_error;
@


1.168
log
@Added support for sticky date set in CVS/Tag and CVS/Entries per directory.

ok joris
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.167 2008/06/10 01:00:34 joris Exp $	*/
d365 3
@


1.167
log
@New trigger framework that allows us to run the required scripts
defined in CVSROOT/commitinfo and CVSROOT/loginfo and so on.

This enables the use of log_accum2 and all that other nice stuff we like.

This was mostly written by Jonathan Armani with help from tobias@@ and myself.

ok tobias@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.166 2008/06/08 20:08:43 tobias Exp $	*/
d315 1
@


1.166
log
@Handle commits on a per-directory basis instead handling all of them at
once in local setup.  Also added '!' to reuse typed log message for all
following directories.

ok joris
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.165 2008/05/28 17:12:00 tobias Exp $	*/
d37 1
d395 4
a398 3
char *	cvs_logmsg_read(const char *path);
char *	cvs_logmsg_create(char *, struct cvs_flisthead *,
	    struct cvs_flisthead *, struct cvs_flisthead *);
@


1.165
log
@Don't limit ourselfs when it comes to arguments on command line or
arguments sent by client.

ok joris
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.164 2008/03/09 03:14:52 joris Exp $	*/
d395 2
a396 2
char *	cvs_logmsg_create(struct cvs_flisthead *, struct cvs_flisthead *,
	struct cvs_flisthead *);
@


1.164
log
@proper repository locking:
- all read operations now look for a lock, and wait if present but never
  try to lock the tree themselfs anymore.
- all write operations lock the tree where needed.
- commit locks all relevant directories before even attempting to start.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.163 2008/03/08 20:26:34 joris Exp $	*/
a102 1
#define CVS_CMD_MAXARG		128
d368 1
@


1.163
log
@add checkout/update -j support.
still has some rough edges.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.162 2008/03/01 21:29:36 deraadt Exp $	*/
d106 2
a107 1
#define CVS_USE_WDIR		1
@


1.162
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.161 2008/02/10 14:08:52 xsa Exp $	*/
d294 2
d402 2
@


1.161
log
@+ #define CVS_DATE_FMT   "%Y.%m.%d.%H.%M.%S"
...and use it.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.160 2008/02/10 12:24:27 joris Exp $	*/
d378 3
a380 3
void	 	cvs_ent_add(CVSENTRIES *, const char *);
void	 	cvs_ent_remove(CVSENTRIES *, const char *);
void	 	cvs_ent_close(CVSENTRIES *, int);
@


1.160
log
@fix ce_date declaration
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.159 2008/02/10 10:10:15 joris Exp $	*/
d55 2
@


1.159
log
@parse any date tags set in CVS/Tag or CVS/Entries properly, and use
them for commands;

with tobias@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.158 2008/02/09 20:04:00 xsa Exp $	*/
d271 1
a271 1
	time_t		*ce_date;
@


1.158
log
@Introduce cvs_ent_line_str() - formats CVS/Entries lines.
OK tobias@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.157 2008/02/09 12:48:23 joris Exp $	*/
d267 1
d271 1
a271 1
	char		*ce_conflict;
@


1.157
log
@remote improvements:

- make sure the client creates the correct CVS/Repository when running
  checkout if there was no -d targetdir specified.
- allow -D to work remotely for both checkout and update.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.156 2008/02/09 12:20:33 tobias Exp $	*/
d379 2
@


1.156
log
@Get in proper support for checkout/update -A when it comes to keyword
expansion options.

OK joris@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.155 2008/02/09 11:17:02 tobias Exp $	*/
d289 2
@


1.155
log
@Get in initial support for checkout -D.  Works fine with -r support right
now.

OK joris@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.154 2008/02/04 18:23:58 tobias Exp $	*/
d322 2
a323 1
extern int  reset_stickies;
@


1.154
log
@Stripped off 'nb', which was (or was supposed to be) used to distinguish
between a named branch and a revision number supplied by -r.  This can
be done easier in cvs_write_tagfile directly.

OK joris@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.153 2008/02/04 15:07:33 tobias Exp $	*/
d306 1
@


1.153
log
@Added -k flag support for all commands which support it.

OK joris@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.152 2008/02/03 22:50:28 joris Exp $	*/
d376 1
a376 1
void		cvs_write_tagfile(const char *, char *, char *, int);
@


1.152
log
@more CVSROOT/module stuff:

- allow more then 1 module to be specified per definition
- respect the "!" sign which means: "hey ignore this dir when checking out"
- non alias definitions can now contain files

ok tobias@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.151 2008/02/03 17:20:14 joris Exp $	*/
d322 1
@


1.151
log
@better CVSROOT/module support, includes remote support and modules
that are not aliases (-a);

OK tobias@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.150 2008/02/01 17:18:59 tobias Exp $	*/
d293 1
@


1.150
log
@Added rannotate support

OK xsa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.149 2008/01/31 10:15:05 tobias Exp $	*/
d289 3
@


1.149
log
@Replaced the unused cvs_command variable cmd_req with cmd_flags, which states
if the current command is supposed to use a working directory or if it is a
repository-only command (as of now checkout -p, rtag, rlog).

Makes the code simpler, easier to read and automagically fixes some issues
we encountered with these commands (for example if a working directory
exists, or "." operations are performed).

OK joris@@, niallo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.148 2008/01/10 10:05:40 tobias Exp $	*/
d335 1
@


1.148
log
@Simply the use of cmdp and cvs_command by zapping cvs_command and working
solely with cmdp.  This remedies some reliability issues with invalid
commands supplied and also fixes a GNU cvs style incompatibility with
release command.

> Based on patch from Igor Zinovik
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.147 2007/09/23 11:19:24 joris Exp $	*/
d103 3
d172 1
a172 1
	u_int	 cmd_req;
@


1.147
log
@make sure when running update -r on existing files to overwrite
the sticky directory tag with it. since -r gets priority.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.146 2007/09/22 16:01:22 joris Exp $	*/
a291 1
extern char *cvs_command;
d316 1
@


1.146
log
@better branching/sticky tag support, no branch commits yet though.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.145 2007/09/10 19:11:08 joris Exp $	*/
d381 1
a381 1
void	cvs_checkout_file(struct cvs_file *, RCSNUM *, int);
@


1.145
log
@remove my addition of portnumber for rsh in CVSROOT.
while it sounds like a "good" idea some people convinced me otherwise.

mostly because this breaks compat with GNU cvs.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.144 2007/09/10 14:06:14 joris Exp $	*/
d301 1
@


1.144
log
@Allow port specification in our CVSROOT which is used for our
ssh connection to our server.

Example: joris@@somehost.com:2222:/cvs

OK tobias@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.143 2007/09/04 19:07:03 tobias Exp $	*/
d211 1
a211 1
	char   *cr_port;
@


1.143
log
@Removed dead code.

OK joris@@, ray@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.142 2007/08/30 11:19:29 joris Exp $	*/
d211 1
a211 1
	u_int   cr_port;
@


1.142
log
@Remove old CVSROOT caching mechanisms.
from Tobias Stoeckmann
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.141 2007/07/03 13:22:42 joris Exp $	*/
a346 1
struct cvs_cmd	*cvs_findcmdbyreq(u_int);
a364 1
int		cvs_ent_exists(CVSENTRIES *, const char *);
@


1.141
log
@Rework the way opencvs works in relation to files in the Attic/:

Previously, files in the 'Attic/' were linked into our filelist as being
'Attic/filename,v' this caused unneeded stress on certain functions
like cvs_file_classify() who had to do pointer voodoo to split out
the 'Attic/' part and do other very weird stuff to normalize the pathname
of these files.

Instead, we handle these files early in the start when we
build the fileslist in cvs_repository_getdir(). When encountering
the 'Attic/' directory, we recurse in it if required but instead of
using the 'Attic/' directory component as our base directory we stick
with the directory name where 'Attic/' resides in, resulting in the
correct filename while maintaining the correct RCSpath for the file.

This made the following things a lot easier:
(and in most cases actually fixed the below points)

- status with files in Attic/.
- checking out HEAD repositories with files in Attic/.
- checking out repositories with -rTAG.
- updating with -rTAG.

and as an added bonus the following now also works:

- correctly creating CVS/Tag in both local and remote mode thus
  allowing update/status/and more to work correctly with the tagged tree.
  (thanks to the correct handling of -rTAG cases).
- resetting tags with opencvs -A properly works too now.

This is a major step forward into the usability
of OpenCVS when it comes to maintaining multiple tagged trees, the next
logical step would be to fix commiting to branches.

enjoy you -stable cowards.

tested by myself, xsa, niallo and ckuethe
thanks guys!
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.140 2007/06/28 21:38:09 xsa Exp $	*/
a211 1
	u_int   cr_ref;
a370 1
struct cvsroot	*cvsroot_parse(const char *);
a371 1
void		 cvsroot_remove(struct cvsroot *);
@


1.140
log
@Sync revisions and time buffers size to be consistent with each others.
Simplifies further size tweaks if needed.
OK niallo@@ ray@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.139 2007/06/27 20:27:38 xsa Exp $	*/
d301 1
d315 1
@


1.139
log
@Remove last bits about login and logout commands, which will never be
implemented anyway. OK ray@@ niallo@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.138 2007/06/27 03:58:16 joris Exp $	*/
d52 3
@


1.138
log
@We were missing the needed clue/magic to have our remote setup
handle files that have been removed from the repository
correctly, which resulted in them still being in the working copy
after doing an update.

noticed and diff tested by ckuethe@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.137 2007/06/26 18:02:43 xsa Exp $	*/
a326 2
extern struct cvs_cmd cvs_cmd_login;
extern struct cvs_cmd cvs_cmd_logout;
@


1.137
log
@Bring back the release command. More work to be done though.
OK joris@@ niallo@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.136 2007/06/18 17:54:13 joris Exp $	*/
d389 1
@


1.136
log
@first stab at history stuff for opencvs, currently only writes
to CVSROOT/history but cannot parse it yet with the 'history' command.

"Commit it." ray@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.135 2007/03/22 17:18:19 xsa Exp $	*/
d404 1
@


1.135
log
@use MD5_DIGEST_STRING_LENGTH instead of rolling our own lenght.
OK otto@@ (before lock).
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.134 2007/02/22 06:42:09 otto Exp $	*/
d149 15
d401 1
@


1.134
log
@general includes cleanup sweep. ok joris@@ niallo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.133 2007/02/19 11:40:00 otto Exp $	*/
d51 1
a51 1
#define CVS_CKSUM_LEN	33	/* length of a CVS checksum string */
@


1.133
log
@Fix const inconsistencies, void pointer artithmetic and a few other
things. now gcc -Wall and lint are more happy. ok joris@@ xsa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.132 2007/01/19 08:21:44 xsa Exp $	*/
d30 7
a36 1
#include "rcs.h"
a38 3
#include "file.h"
#include "repository.h"
#include "worklist.h"
d396 1
@


1.132
log
@move cvs_import() proto to the correct place.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.131 2007/01/18 08:49:08 xsa Exp $	*/
d327 1
a327 1
struct cvs_cmd	*cvs_findcmdbyreq(int);
d348 1
a348 1
void		cvs_write_tagfile(char *, char *, char *, int);
@


1.131
log
@put functions protos at the right place.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.130 2007/01/17 17:54:50 joris Exp $	*/
d383 1
@


1.130
log
@add support for remote checkout in both our client and server,
with this the last real dependency to actually be able to use opencvs
in a remote setup has been added.

based upon an initial diff from xsa@@
'kay niallo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.129 2007/01/13 15:45:59 joris Exp $	*/
d376 1
a377 1
int	cvs_checkout(int, char **);
d381 1
@


1.129
log
@remove BUF * argument from cvs_checkout_file() it will
no longer be used, ever.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.128 2007/01/12 23:32:01 niallo Exp $	*/
d377 1
@


1.128
log
@major re-work of the RCS api.  this results in 100x performance improvements in some places and much
reduced memory usage.  note that only checkout has been fully converted to use the new high-performance
functions.  other codepaths (e.g. update) still use the old method which is provided for backwards
compatibility.  we can convert the remaining slow bits over to the new api piece-by-piece.

"commit this, now" joris@@
brad@@ tested, too.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.127 2007/01/12 09:27:25 xsa Exp $	*/
d364 1
a364 1
void	cvs_checkout_file(struct cvs_file *, RCSNUM *, BUF *, int);
@


1.127
log
@link to build the edit, editors, unedit, watch, and watchers commands.
more work needs to be done for them though.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.126 2007/01/07 02:39:24 joris Exp $	*/
d31 1
a32 1
#include "util.h"
@


1.126
log
@rewrite of the logmessage code, which allows you to
enter a logmessage into your favorite editor when commiting.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.125 2007/01/03 20:48:26 joris Exp $	*/
d378 2
d385 1
d388 2
@


1.125
log
@if we are commiting a file, do not let the server resend it
with an 'Updated' response, seeing as the client will already have the
latest version. Instead, send the correct 'Checked-in' response.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.124 2006/12/11 07:59:18 xsa Exp $	*/
d354 5
@


1.124
log
@Permit checkout from a read-only repository using the -R global option
or using the CVSREADONLYFS environment variable.
Request/test/ok todd@@. Man page bits courtesy of jmc@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.123 2006/11/27 14:19:53 xsa Exp $	*/
d365 1
@


1.123
log
@client-side of the annotate command is usable, build it too.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.122 2006/11/14 15:39:41 xsa Exp $	*/
d290 1
@


1.122
log
@Add support for the "Set" request.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.121 2006/11/14 09:49:52 xsa Exp $	*/
d368 1
@


1.121
log
@add this, so version compiles...
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.120 2006/11/13 12:06:27 xsa Exp $	*/
d177 2
@


1.120
log
@Build admin command.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.119 2006/11/09 14:00:14 xsa Exp $	*/
d374 1
@


1.119
log
@cvs init remote bits.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.118 2006/11/09 10:08:33 xsa Exp $	*/
d365 1
@


1.118
log
@fix pasto..
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.117 2006/10/31 15:23:40 xsa Exp $	*/
d368 1
@


1.117
log
@a step ahead in opencvs add|remove remote support.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.116 2006/07/07 17:37:17 joris Exp $	*/
d367 1
d370 1
a371 1
int	cvs_getlog(int, char **);
@


1.116
log
@first part of opencvs remote, fairly useable on existing trees
although i advise against using it on real development trees for now.

only a few commands work right so far:
- commit
- diff
- status
- log
- update (partially working)

if you feel like testing remote and run into bugs feel free to
contact me, and please include a full trace (-t).
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.115 2006/07/01 20:30:46 reyk Exp $	*/
d364 1
d367 1
@


1.115
log
@implement the -p (dump) flag for cvs update

ok joris@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.114 2006/06/19 05:05:17 joris Exp $	*/
d277 1
d289 1
d362 7
@


1.114
log
@kill local and remote callback and just have one called fileproc.
we let the commands pass the correct function.

all in preparation for remote.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.113 2006/06/14 15:14:47 xsa Exp $	*/
d359 1
@


1.113
log
@handle existing CVS/Tag file when adding new directories. OK joris@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.112 2006/06/12 13:56:00 xsa Exp $	*/
d164 1
a164 2
	void	(*local)(struct cvs_file *);
	void	(*remote)(struct cvs_file *, struct cvsroot *);
@


1.112
log
@bring back a working version of the `cvs init' command. OK joris@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.111 2006/06/03 19:07:13 joris Exp $	*/
d343 2
@


1.111
log
@add support for update -A and update -r<rev>.
hacking on the plane from toronto to barbados.

i will probably hack some more since im stuck in barbados
for 12 lovely hours over night cause the carribean airlines dont understand
the meaning over 'more than one flight a day'.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.110 2006/05/30 06:34:39 joris Exp $	*/
d111 1
d123 1
@


1.110
log
@add CVS_PATH_ATTIC to cvs.h - this shouldve been commited
with my last commit when making sure our removed file moves into the Attic;
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.109 2006/05/28 01:24:28 joris Exp $	*/
d355 1
@


1.109
log
@enable merging on update. if your file in your working copy
has been modified by yourself and there is a newer revision
we try and merge them together.

if the merge fails and has conflicts it will mark them inside
the file, you will need to resolve these by hand first before
you will be able to commit your modified file.

works transparent with gnu cvs, as it is suppose to.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.108 2006/05/27 20:57:42 joris Exp $	*/
d142 1
a268 1
extern char *cvs_repo_base;
d275 1
@


1.108
log
@allow diff to pick up newly added files with the -N flag.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.107 2006/05/27 18:04:46 joris Exp $	*/
d350 4
a353 1
int	cvs_checkout_file(struct cvs_file *, RCSNUM *, int);
@


1.107
log
@basic support for CVSROOT/config - only supporting the 'tag' and
'umask' keyword right now.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.106 2006/05/27 15:14:27 joris Exp $	*/
d108 1
@


1.106
log
@allow commands to respect the -l flag, if the -l flag is
specified certain commands will not recurse into directories.

at the same time introduce a method of specifying wether or not
a command should look in the repository for files.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.105 2006/05/27 05:20:25 joris Exp $	*/
d102 1
d266 1
d275 1
@


1.105
log
@pruning (-P) support for both the update and checkout commands;
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.104 2006/05/27 03:30:30 joris Exp $	*/
d161 1
d163 4
@


1.104
log
@commit the new opencvs code, i have been hacking on
this for the past 2 weeks now and it should go in at
the start of the hackathon so others can help out.

this code is a lot safer, smarter, faster and best of
all it is actually doing what it is suppose to do!

basic checkout, update, status, diff and commit are
working in local mode only.
there is no support for any remote setups now.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.103 2006/04/01 20:11:25 joris Exp $	*/
d340 1
@


1.103
log
@fix some bugs that lint discovered for us.
ok niallo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.102 2006/03/15 19:59:36 niallo Exp $	*/
d31 2
d34 2
a35 2
#include "util.h"
#include "xmalloc.h"
d37 7
a43 1
#define CVS_VERSION	"OpenCVS 0.3"
a47 1

a49 9
/* error codes */
#define CVS_EX_ERR	-1
#define CVS_EX_OK	0
#define CVS_EX_USAGE	1
#define CVS_EX_DATA	2
#define CVS_EX_PROTO	3
#define CVS_EX_FILE	4
#define CVS_EX_BADROOT	5

a81 1

a96 1

a121 1

a140 9

/* flags for cmd_flags */
#define CVS_CMD_ALLOWSPEC	0x01
#define CVS_CMD_SENDARGS1	0x04
#define CVS_CMD_SENDARGS2	0x08
#define CVS_CMD_SENDDIR		0x10
#define CVS_CMD_PRUNEDIRS	0x20


a149 1
	int	 file_flags;
d151 4
a154 7
	/* operations vector */
	int	 (*cmd_init)(struct cvs_cmd *, int, char **, int *);
	int	 (*cmd_pre_exec)(struct cvsroot *);
	int	 (*cmd_exec_remote)(CVSFILE *, void *);
	int	 (*cmd_exec_local)(CVSFILE *, void *);
	int	 (*cmd_post_exec)(struct cvsroot *);
	int	 (*cmd_cleanup)(void);
d156 5
a160 2
	/* flags for cvs_file_get() */
	int	 cmd_flags;
a162 4
struct cvs_file;
struct cvs_dir;
struct cvs_flist;

a168 11


struct cvs_op {
	u_int             co_op;
	uid_t             co_uid;    /* user performing the operation */
	char             *co_tag;    /* tag or branch, NULL if HEAD */
	char             *co_msg;    /* message string (on commit or add) */
	struct cvs_flist  co_files;
};


a197 1

a205 1

d220 2
a221 2
#define CVS_ENTF_SYNC	0x01	/* contents of disk and memory match */
#define CVS_ENTF_WR	0x02	/* file is opened for writing too */
d230 1
d232 14
a245 16
	char			*ce_buf;
	u_int16_t		 ce_type;
	u_int16_t		 ce_status;
	char			*ce_name;
	RCSNUM			*ce_rev;
	time_t			 ce_mtime;
	char			*ce_opts;
	char			*ce_tag;

	/*
	 * This variable is set to 1 if we have already processed this entry
	 * in the cvs_file_getdir() function. This is to avoid files being
	 * passed twice to the callbacks.
	 */
	int			processed;
	TAILQ_ENTRY(cvs_ent)	 ce_list;
d251 1
a251 1
	u_int	 cef_flags;
d253 1
a253 2
	TAILQ_HEAD(cvsentrieshead, cvs_ent)	 cef_ent;
	struct cvs_ent		*cef_cur;
d256 4
a259 28

struct cvs_hent {
	char	 ch_event;
	time_t	 ch_date;
	uid_t	 ch_uid;
	char	*ch_user;
	char	*ch_curdir;
	char	*ch_repo;
	RCSNUM	*ch_rev;
	char	*ch_arg;
};


typedef struct cvs_histfile {
	int	 chf_fd;
	char	*chf_buf;	/* read buffer */
	size_t	 chf_blen;	/* buffer size */
	size_t	 chf_bused;	/* bytes used in buffer */

	off_t	chf_off;	/* next read */
	u_int	chf_sindex;	/* history entry index of first in array */
	u_int	chf_cindex;	/* current index (for getnext()) */
	u_int	chf_nbhent;	/* number of valid entries in the array */

	struct cvs_hent	chf_hent[CVS_HIST_CACHE];

} CVSHIST;

a276 1
extern CVSFILE *cvs_files;
d309 1
a309 1

a311 2
int		 cvs_startcmd(struct cvs_cmd *, int, char **);
int		 cvs_server(int, char **);
d313 1
d317 1
d319 12
d334 1
a335 30
struct cvsroot	*cvsroot_get(const char *);


/* entries.c */
CVSENTRIES	*cvs_ent_open(const char *, int);
struct cvs_ent	*cvs_ent_get(CVSENTRIES *, const char *);
struct cvs_ent	*cvs_ent_next(CVSENTRIES *);
int		 cvs_ent_add(CVSENTRIES *, struct cvs_ent *);
int		 cvs_ent_addln(CVSENTRIES *, const char *);
int		 cvs_ent_remove(CVSENTRIES *, const char *, int);
int		 cvs_ent_write(CVSENTRIES *);
struct cvs_ent	*cvs_ent_parse(const char *);
void		 cvs_ent_close(CVSENTRIES *);
void		 cvs_ent_free(struct cvs_ent *);

/* history API */
CVSHIST		*cvs_hist_open(const char *);
void		 cvs_hist_close(CVSHIST *);
int		 cvs_hist_parse(CVSHIST *);
struct cvs_hent	*cvs_hist_getnext(CVSHIST *);
int		 cvs_hist_append(CVSHIST *, struct cvs_hent *);

/* logmsg.c */
char	*cvs_logmsg_open(const char *);
char	*cvs_logmsg_get(const char *, struct cvs_flist *,
	    struct cvs_flist *, struct cvs_flist *);
void	cvs_logmsg_send(struct cvsroot *, const char *);

/* date.y */
time_t	cvs_date_parse(const char *);
d337 4
a340 3
/* XXX */
int			rcs_patch_lines(struct cvs_lines *, struct cvs_lines *);
int	cvs_checkout_rev(RCSFILE *, RCSNUM *, CVSFILE *, char *, int, int, ...);
@


1.102
log
@- add util.h, reorganising a bunch of things and exposing cvs_yesno()
function to be used by rcs.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.101 2006/02/10 10:15:48 xsa Exp $	*/
d156 2
a157 2
	int	 cmd_op;
	int	 cmd_req;
a317 2

extern char *cvs_req_modulename;
@


1.101
log
@fix CVS_PATH_NOTIFY duplicate.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.100 2006/02/09 13:08:01 xsa Exp $	*/
d32 1
a413 43

/* util.c */

struct cvs_line {
	char			*l_line;
	int			 l_lineno;
	TAILQ_ENTRY(cvs_line)	 l_list;
};

TAILQ_HEAD(cvs_tqh, cvs_line);

struct cvs_lines {
	int		l_nblines;
	char		*l_data;
	struct cvs_tqh	l_lines;
};

int	  cvs_readrepo(const char *, char *, size_t);
void	  cvs_modetostr(mode_t, char *, size_t);
void	  cvs_strtomode(const char *, mode_t *);
void	  cvs_splitpath(const char *, char *, size_t, char **);
int	  cvs_mkadmin(const char *, const char *, const char *, char *,
		char *, int);
int	  cvs_cksum(const char *, char *, size_t);
int	  cvs_exec(int, char **, int []);
int	  cvs_getargv(const char *, char **, int);
int	  cvs_chdir(const char *, int);
int	  cvs_rename(const char *, const char *);
int	  cvs_unlink(const char *);
int	  cvs_rmdir(const char *);
int	  cvs_create_dir(const char *, int, char *, char *);
char	 *cvs_rcs_getpath(CVSFILE *, char *, size_t);
char	**cvs_makeargv(const char *, int *);
void	  cvs_freeargv(char **, int);
void	  cvs_write_tagfile(char *, char *, int);
void	  cvs_parse_tagfile(char **, char **, int *);
size_t	  cvs_path_cat(const char *, const char *, char *, size_t);
time_t	  cvs_hack_time(time_t, int);

BUF			*cvs_patchfile(const char *, const char *,
			    int (*p)(struct cvs_lines *, struct cvs_lines *));
struct cvs_lines	*cvs_splitlines(const char *);
void			cvs_freelines(struct cvs_lines *);
@


1.100
log
@add missing client-side paths definitions;
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.99 2006/01/27 15:42:35 xsa Exp $	*/
d120 1
a120 1
#define CVS_PATH_NOTIFY		CVS_PATH_ROOT "/notify"
@


1.99
log
@CVS_EX_BADROOT return code is not worth keeping;
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.98 2006/01/10 08:24:57 xsa Exp $	*/
d129 4
d137 2
d142 2
@


1.98
log
@zap unused variables;
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.97 2006/01/02 09:42:20 xsa Exp $	*/
d49 1
a49 2
#define CVS_EX_BADTAG	5
#define CVS_EX_BADROOT	6
@


1.97
log
@more includes cleanup;
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.96 2006/01/01 05:05:58 joris Exp $	*/
d34 1
a34 4
#define CVS_VERSION_MAJOR	0
#define CVS_VERSION_MINOR	3
#define CVS_VERSION		"OpenCVS 0.3"

@


1.96
log
@more code cleanup;
ok xsa@@

i'm commiting only hours after newyear,
ah the joys of being a true geek.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.95 2005/12/30 16:47:36 joris Exp $	*/
a28 5

#include <sys/param.h>

#include <dirent.h>
#include <stdio.h>
@


1.95
log
@more code cleanup, ok niallo@@ and xsa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.94 2005/12/30 02:03:28 joris Exp $	*/
d432 1
a432 1
int	  cvs_modetostr(mode_t, char *, size_t);
d434 1
a434 1
int	  cvs_splitpath(const char *, char *, size_t, char **);
@


1.94
log
@major cleanup of the functions handling the remote cvs protocol.
makes the code a lot more readable and understandable.

ok xsa@@ and niallo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.93 2005/12/24 19:07:52 xsa Exp $	*/
d433 1
a433 1
int	  cvs_strtomode(const char *, mode_t *);
@


1.93
log
@add an argument to cvs_chdir() which enables or not the removal
of the directory we just chdir'd to.
Useful when the function fails especially for the server mode and
its temporary directory. This way it's not left behind on exit.
ok joris@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.92 2005/12/19 18:21:30 xsa Exp $	*/
d410 1
a410 1
int	 cvs_logmsg_send(struct cvsroot *, const char *);
@


1.92
log
@move fatal() proto declaration to log.h; better for its use in usr.bin/rcs
OK joris@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.91 2005/12/10 20:27:45 joris Exp $	*/
d440 1
a440 1
int	  cvs_chdir(const char *);
@


1.91
log
@switch to xmalloc stuff, me and xsa@@ agreed on this a long
time ago, but we were being held back by jfb. too bad for him.

next step is to use fatal() through out the code for unrecoverable
errors instead of trying to be all nice and fluffy and reach main() again.

ok niallo@@ and xsa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.90 2005/12/03 15:07:21 joris Exp $	*/
a430 1
void	  fatal(const char *, ...);
@


1.90
log
@fix date handling in opencvs, this was broken since the very start.
now, when you checkout a tree with gnu cvs, opencvs no longer sees all
the files as modified, and visa versa.

this actually makes gnu cvs and opencvs dance together in working copies.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.89 2005/12/03 15:02:54 joris Exp $	*/
d37 1
d431 1
d463 1
a463 1
#endif	/* CVS_H */
@


1.89
log
@- teach opencvs about Entries.Log and what to do with it
  it it exists in the CVS admin dir.
- when writing the Entries file write it to Entries.Backup first and
  then rename it to Entries when the writing was successfull.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.88 2005/12/03 01:02:08 joris Exp $	*/
d450 1
@


1.88
log
@add very basic support for the following stuff:

- checkout in local mode (example: /cvs)
- update in local and server mode (example: /cvs and user@@host:/cvs)
- import in local and server mode (example: /cvs and user@@host:/cvs)

what remains to be done:

- not all options are supported yet, and update cannot pick up newly
  added files yet. these things are pending and will be commited
  real soon.

- checkout only works locally right now.

- fix rcs parsing code so that we don't fucking hog 100% cpu
  on really BIG BIG BIG ass trees.

mainly tested by pedro@@ and myself, thanks a lot pedro!

"go for it" niallo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.87 2005/10/22 17:32:57 joris Exp $	*/
d140 1
d282 1
@


1.87
log
@diff3 support, needed for merging files together;

"go for it" niallo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.86 2005/10/07 21:47:32 reyk Exp $	*/
d283 1
a283 1
	TAILQ_HEAD(, cvs_ent)	 cef_ent;
d390 1
a390 1
int		 cvs_ent_remove(CVSENTRIES *, const char *);
d456 1
@


1.86
log
@knf and spacing, ok joris@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.85 2005/09/15 22:12:23 joris Exp $	*/
d413 15
d449 7
@


1.85
log
@strip trailing slashes from any arguments passed to opencvs.
ok xsa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.84 2005/09/15 17:01:10 xsa Exp $	*/
d154 9
a162 9
	int   cmd_op;
	int   cmd_req;
	char  cmd_name[CVS_CMD_MAXNAMELEN];
	char  cmd_alias[CVS_CMD_MAXALIAS][CVS_CMD_MAXNAMELEN];
	char  cmd_descr[CVS_CMD_MAXDESCRLEN];
	char *cmd_synopsis;
	char *cmd_opts;
	char *cmd_defargs;
	int   file_flags;
d165 6
a170 6
	int (*cmd_init)        (struct cvs_cmd *, int, char **, int *);
	int (*cmd_pre_exec)    (struct cvsroot *);
	int (*cmd_exec_remote) (CVSFILE *, void *);
	int (*cmd_exec_local)  (CVSFILE *, void *);
	int (*cmd_post_exec)   (struct cvsroot *);
	int (*cmd_cleanup)     (void);
d173 1
a173 1
	int   cmd_flags;
@


1.84
log
@check in cvs_mkadmin() wether we need to create or not the
CVS/Tag file. Sync the rest of the code accordingly; OK joris@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.83 2005/09/11 14:16:48 joris Exp $	*/
d253 7
a259 1

@


1.83
log
@only remove and free a cvsroot struct if it has been added in
cvsroot_parse().

fixes segfaults opencvs has been receiving when cvsroot_parse() fails.
"go ahead" xsa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.82 2005/09/06 15:29:33 joris Exp $	*/
d411 2
a412 1
int	  cvs_mkadmin(const char *, const char *, const char *);
@


1.82
log
@Make sure entries do not go away when we run through them in the file code.
Fixes corrupt Entry files.

Problem found by Mike Pechkin, thanks.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.81 2005/09/05 19:29:42 xsa Exp $	*/
d374 1
a374 1
void		 cvsroot_free(struct cvsroot *);
@


1.81
log
@add new functions: cvs_write_tagfile() and cvs_parse_tagfile(),
write and parse a CVS/Tag file. Ok joris@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.80 2005/08/16 16:34:19 xsa Exp $	*/
d263 7
@


1.80
log
@#define CVS_ENT_MAXLINELEN	1024
.. as the maximum length of a line in an Entries file, and use it.
problem spotted a while ago by mpech@@.

ok jfb joris
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.79 2005/08/12 14:41:54 xsa Exp $	*/
d142 1
d371 1
a371 1
/* Entries API */
d416 2
@


1.79
log
@add cvs_rename() function; ok jfb
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.78 2005/08/09 10:33:46 joris Exp $	*/
d246 2
@


1.78
log
@fix our root caching method, it was utterly broken and would
cause opencvs to segfault in several cases.

ok jfb@@, xsa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.77 2005/08/04 13:31:14 xsa Exp $	*/
d406 1
@


1.77
log
@handle TMPDIR environment variable as well as -T <tmpdir> global option;
Ok jfb@@ joris@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.76 2005/08/03 14:43:08 xsa Exp $	*/
d216 2
@


1.76
log
@check only once for the HOME environment variable and reuse
its value (if any) to check for the .cvsrc and .cvsignore files;
ok jfb@@ joris@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.75 2005/07/27 10:36:13 xsa Exp $	*/
d112 1
d305 1
@


1.75
log
@rename cvs_remove_dir() to cvs_rmdir() because it might be confusing
with the `remove' command local functions. ok joris@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.74 2005/07/25 11:28:59 xsa Exp $	*/
d301 1
@


1.74
log
@KNF; mostly spaces vs. tabs; ok joris@@ jfb@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.73 2005/07/24 17:12:25 xsa Exp $	*/
d402 1
a402 1
int	  cvs_remove_dir(const char *);
@


1.73
log
@add cvs_unlink(); a wrapper to unlunk() w/ an error msg as it is used in
many places. Also handle -n and -t global options.
ok joris@@ jfb@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.72 2005/07/23 11:19:46 joris Exp $	*/
d38 3
a40 3
#define CVS_VERSION_MAJOR 0
#define CVS_VERSION_MINOR 3
#define CVS_VERSION       "OpenCVS 0.3"
d43 2
a44 2
#define CVS_HIST_CACHE     128
#define CVS_HIST_NBFLD     6
d47 1
a47 1
#define CVS_CKSUM_LEN      33     /* length of a CVS checksum string */
d60 28
a87 28
#define CVS_OP_UNKNOWN      0
#define CVS_OP_ADD          1
#define CVS_OP_ADMIN        2
#define CVS_OP_ANNOTATE     3
#define CVS_OP_CHECKOUT     4
#define CVS_OP_COMMIT       5
#define CVS_OP_DIFF         6
#define CVS_OP_EDIT         7
#define CVS_OP_EDITORS      8
#define CVS_OP_EXPORT       9
#define CVS_OP_HISTORY     10
#define CVS_OP_IMPORT      11
#define CVS_OP_INIT        12
#define CVS_OP_LOG         13
#define CVS_OP_RANNOTATE   14
#define CVS_OP_RDIFF       15
#define CVS_OP_RELEASE     16
#define CVS_OP_REMOVE      17
#define CVS_OP_RLOG        18
#define CVS_OP_RTAG        19
#define CVS_OP_SERVER      20
#define CVS_OP_STATUS      21
#define CVS_OP_TAG         22
#define CVS_OP_UNEDIT      23
#define CVS_OP_UPDATE      24
#define CVS_OP_VERSION     25
#define CVS_OP_WATCH       26
#define CVS_OP_WATCHERS    27
d89 1
a89 1
#define CVS_OP_ANY         64     /* all operations */
d93 13
a105 13
#define CVS_METHOD_NONE       0
#define CVS_METHOD_LOCAL      1    /* local access */
#define CVS_METHOD_SERVER     2    /* tunnel through CVS_RSH */
#define CVS_METHOD_PSERVER    3    /* cvs pserver */
#define CVS_METHOD_KSERVER    4    /* kerberos */
#define CVS_METHOD_GSERVER    5    /* gssapi server */
#define CVS_METHOD_EXT        6
#define CVS_METHOD_FORK       7    /* local but fork */

#define CVS_CMD_MAXNAMELEN   16
#define CVS_CMD_MAXALIAS      2
#define CVS_CMD_MAXDESCRLEN  64
#define CVS_CMD_MAXARG      128
d109 3
a111 3
#define CVS_SERVER_DEFAULT  "cvs"
#define CVS_RSH_DEFAULT     "ssh"
#define CVS_EDITOR_DEFAULT  "vi"
d117 14
a130 14
#define CVS_PATH_ROOT         "CVSROOT"
#define CVS_PATH_EMPTYDIR     CVS_PATH_ROOT "/Emptydir"
#define CVS_PATH_COMMITINFO   CVS_PATH_ROOT "/commitinfo"
#define CVS_PATH_CONFIG       CVS_PATH_ROOT "/config"
#define CVS_PATH_CVSIGNORE    CVS_PATH_ROOT "/cvsignore"
#define CVS_PATH_CVSWRAPPERS  CVS_PATH_ROOT "/cvswrappers"
#define CVS_PATH_EDITINFO     CVS_PATH_ROOT "/editinfo"
#define CVS_PATH_HISTORY      CVS_PATH_ROOT "/history"
#define CVS_PATH_LOGINFO      CVS_PATH_ROOT "/loginfo"
#define CVS_PATH_MODULES      CVS_PATH_ROOT "/modules"
#define CVS_PATH_NOTIFY       CVS_PATH_ROOT "/notify"
#define CVS_PATH_RCSINFO      CVS_PATH_ROOT "/rcsinfo"
#define CVS_PATH_TAGINFO      CVS_PATH_ROOT "/taginfo"
#define CVS_PATH_VERIFYMSG    CVS_PATH_ROOT "/verifymsg"
d134 7
a140 7
#define CVS_PATH_RC             ".cvsrc"
#define CVS_PATH_CVSDIR         "CVS"
#define CVS_PATH_ENTRIES        CVS_PATH_CVSDIR "/Entries"
#define CVS_PATH_STATICENTRIES  CVS_PATH_CVSDIR "/Entries.Static"
#define CVS_PATH_LOGENTRIES     CVS_PATH_CVSDIR "/Entries.Log"
#define CVS_PATH_ROOTSPEC       CVS_PATH_CVSDIR "/Root"
#define CVS_PATH_REPOSITORY     CVS_PATH_CVSDIR "/Repository"
d195 1
a195 1
#define CVS_ROOT_CONNECTED    0x01
d217 26
a242 26
#define CVS_SETVR(rt, rq)  ((rt)->cr_vrmask[(rq) / 8] |=  (1 << ((rq) % 8)))
#define CVS_GETVR(rt, rq)  ((rt)->cr_vrmask[(rq) / 8] &   (1 << ((rq) % 8)))
#define CVS_CLRVR(rt, rq)  ((rt)->cr_vrmask[(rq) / 8] &= ~(1 << ((rq) % 8)))
#define CVS_RSTVR(rt)      memset((rt)->cr_vrmask, 0, sizeof((rt)->cr_vrmask))


#define CVS_HIST_ADDED    'A'
#define CVS_HIST_EXPORT   'E'
#define CVS_HIST_RELEASE  'F'
#define CVS_HIST_MODIFIED 'M'
#define CVS_HIST_CHECKOUT 'O'
#define CVS_HIST_COMMIT   'R'
#define CVS_HIST_TAG      'T'


#define CVS_DATE_DUMMY  "dummy timestamp"
#define CVS_DATE_DMSEC  (time_t)-1

#define CVS_ENT_NONE    0
#define CVS_ENT_FILE    1
#define CVS_ENT_DIR     2

#define CVS_ENT_REG      0
#define CVS_ENT_ADDED    1
#define CVS_ENT_REMOVED  2
#define CVS_ENT_UPTODATE 3
d244 2
a245 2
#define CVS_ENTF_SYNC   0x01    /* contents of disk and memory match */
#define CVS_ENTF_WR     0x02    /* file is opened for writing too */
d249 9
a257 9
	char      *ce_buf;
	u_int16_t  ce_type;
	u_int16_t  ce_status;
	char      *ce_name;
	RCSNUM    *ce_rev;
	time_t     ce_mtime;
	char      *ce_opts;
	char      *ce_tag;
	TAILQ_ENTRY(cvs_ent) ce_list;
d261 2
a262 2
	char    *cef_path;
	u_int    cef_flags;
d264 2
a265 2
	TAILQ_HEAD(, cvs_ent) cef_ent;
	struct cvs_ent       *cef_cur;
d270 8
a277 8
	char    ch_event;
	time_t  ch_date;
	uid_t   ch_uid;
	char   *ch_user;
	char   *ch_curdir;
	char   *ch_repo;
	RCSNUM *ch_rev;
	char   *ch_arg;
d282 9
a290 9
	int     chf_fd;
	char   *chf_buf;       /* read buffer */
	size_t  chf_blen;      /* buffer size */
	size_t  chf_bused;     /* bytes used in buffer */

	off_t   chf_off;       /* next read */
	u_int   chf_sindex;    /* history entry index of first in array */
	u_int   chf_cindex;    /* current index (for getnext()) */
	u_int   chf_nbhent;    /* number of valid entries in the array */
d292 1
a292 1
	struct cvs_hent chf_hent[CVS_HIST_CACHE];
d347 8
a354 8
struct cvs_cmd* cvs_findcmd       (const char *);
struct cvs_cmd* cvs_findcmdbyreq  (int);
int             cvs_startcmd      (struct cvs_cmd *, int, char **);
int             cvs_server        (int, char **);

int         cvs_var_set   (const char *, const char *);
int         cvs_var_unset (const char *);
const char* cvs_var_get   (const char *);
d358 3
a360 3
struct cvsroot*  cvsroot_parse (const char *);
void             cvsroot_free  (struct cvsroot *);
struct cvsroot*  cvsroot_get   (const char *);
d364 10
a373 10
CVSENTRIES*      cvs_ent_open   (const char *, int);
struct cvs_ent*  cvs_ent_get    (CVSENTRIES *, const char *);
struct cvs_ent*  cvs_ent_next   (CVSENTRIES *);
int              cvs_ent_add    (CVSENTRIES *, struct cvs_ent *);
int              cvs_ent_addln  (CVSENTRIES *, const char *);
int              cvs_ent_remove (CVSENTRIES *, const char *);
int              cvs_ent_write  (CVSENTRIES *);
struct cvs_ent*  cvs_ent_parse  (const char *);
void             cvs_ent_close  (CVSENTRIES *);
void             cvs_ent_free   (struct cvs_ent *);
d376 5
a380 5
CVSHIST*         cvs_hist_open    (const char *);
void             cvs_hist_close   (CVSHIST *);
int              cvs_hist_parse   (CVSHIST *);
struct cvs_hent* cvs_hist_getnext (CVSHIST *);
int              cvs_hist_append  (CVSHIST *, struct cvs_hent *);
d383 4
a386 3
char*  cvs_logmsg_open (const char *);
char*  cvs_logmsg_get  (const char *, struct cvs_flist *, struct cvs_flist *, struct cvs_flist *);
int    cvs_logmsg_send (struct cvsroot *, const char *);
d389 1
a389 1
time_t cvs_date_parse  (const char *);
d392 16
a407 16
int    cvs_readrepo    (const char *, char *, size_t);
int    cvs_modetostr   (mode_t, char *, size_t);
int    cvs_strtomode   (const char *, mode_t *);
int    cvs_splitpath   (const char *, char *, size_t, char **);
int    cvs_mkadmin     (const char *, const char *, const char *);
int    cvs_cksum       (const char *, char *, size_t);
int    cvs_exec        (int, char **, int []);
int    cvs_getargv     (const char *, char **, int);
int    cvs_chdir       (const char *);
int    cvs_unlink      (const char *);
int    cvs_remove_dir  (const char *);
int    cvs_create_dir  (const char *, int, char *, char *);
char*  cvs_rcs_getpath (CVSFILE *, char *, size_t);
char** cvs_makeargv    (const char *, int *);
void   cvs_freeargv    (char **, int);
size_t cvs_path_cat    (const char *, const char *, char *, size_t);
d410 1
a410 1
#endif /* CVS_H */
@


1.72
log
@rewrite of the file code. the previous one was just
a mess and not clean.
this code is much cleaner, faster, and uses less memory overall.

tested by xsa@@, brad@@, Michael Knudsen, and myself.
okay xsa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.71 2005/07/23 10:49:35 xsa Exp $	*/
d400 1
@


1.71
log
@add cvs_chdir(); a wrapper to chdir() w/ an error msg as it is used in
many places. Let's make our life simpler for once.
ok jfb@@ joris@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.70 2005/07/21 09:51:07 xsa Exp $	*/
d312 1
a312 1

@


1.70
log
@#define CVS_DESCR_FILE_EXT	",t"

ok joris@@ jfb@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.69 2005/07/13 16:20:44 xsa Exp $	*/
d399 1
@


1.69
log
@add cvs_rcs_getpath() function. Returns the path of the RCS file if it
does exist. Will save us code duplication.
ok joris@@ jfb@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.68 2005/07/07 14:27:57 joris Exp $	*/
d113 2
@


1.68
log
@

remove trailing whitespaces

from deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.67 2005/06/17 15:09:55 joris Exp $	*/
d116 1
d355 1
a355 1
/* from root.c */
d380 1
a380 1
/* from logmsg.c */
d385 1
a385 1

d388 15
a402 13
int    cvs_readrepo   (const char *, char *, size_t);
int    cvs_modetostr  (mode_t, char *, size_t);
int    cvs_strtomode  (const char *, mode_t *);
int    cvs_splitpath  (const char *, char *, size_t, char **);
int    cvs_mkadmin    (const char *, const char *, const char *);
int    cvs_cksum      (const char *, char *, size_t);
int    cvs_exec       (int, char **, int []);
int    cvs_getargv    (const char *, char **, int);
int    cvs_remove_dir (const char *);
int    cvs_create_dir (const char *, int, char *, char *);
char** cvs_makeargv   (const char *, int *);
void   cvs_freeargv   (char **, int);
size_t cvs_path_cat   (const char *, const char *, char *, size_t);
@


1.67
log
@

correctly build a temporary copy of the client its repository
localy, so the server can execute the local commands on it
and pipe the output to the client.

with this diff in, our server is now working, please note
that we currently don't have support for all commands yet,
but you can expect this soon.

ok xsa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.66 2005/06/17 08:09:13 xsa Exp $	*/
d70 1
a70 1
#define CVS_OP_HISTORY     10 
@


1.66
log
@#define CVS_EX_ERR	-1

ok joris jfb
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.65 2005/06/07 09:06:15 joris Exp $	*/
d239 1
a239 1

d294 1
d396 1
@


1.65
log
@

remove ancient and unused CVS define. it was a leftover from
the daemon.

ok xsa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.64 2005/06/01 17:44:34 joris Exp $	*/
d50 1
@


1.64
log
@

missed these in previous commits.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.63 2005/05/31 08:58:47 xsa Exp $	*/
a292 2
#ifdef CVS

a308 2

#endif
@


1.63
log
@headers ordering (alphabetically) and cleanup, from mbalmer@@ and myself;
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.62 2005/05/26 22:25:31 jfb Exp $	*/
d295 1
@


1.62
log
@don't keep a pointer to the file handle in CVSENTRIES, it is only
used in cvs_ent_write(), and simplify path building a bit
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.61 2005/05/26 21:25:49 jfb Exp $	*/
d31 2
a33 1
#include <dirent.h>
@


1.61
log
@- remove cvs_ent_getent(), it's not used anymore
- don't use strcmp() to compare one-character strings
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.60 2005/05/26 03:07:20 joris Exp $	*/
a256 1
	FILE    *cef_file;
d398 1
@


1.60
log
@

first part of real pruning support

okay jfb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.59 2005/05/24 20:04:43 joris Exp $	*/
a371 1
struct cvs_ent*  cvs_ent_getent (const char *);
@


1.59
log
@

- simplify cvs_mkadmin().
- create the correct base paths in checkout.
- remove the CVS_CMD_SENDARGS2 flag for checkout, it doesn't need it.

okay jfb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.58 2005/05/24 04:12:25 jfb Exp $	*/
d143 1
@


1.58
log
@Merge the cvs_cmd and cvs_cmd_info structures and add the necessary
fields to hook local versions of the commands.  This needs to go in
before it gets any bigger

ok joris
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.57 2005/05/20 18:26:49 xsa Exp $	*/
d392 1
a392 1
int    cvs_mkadmin    (CVSFILE *, mode_t);
@


1.57
log
@first bits of the `cvs -n' option; ok jfb joris
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.56 2005/05/19 04:17:24 jfb Exp $	*/
d38 2
a39 2
#define CVS_VERSION_MINOR 2
#define CVS_VERSION       "OpenCVS 0.2"
a136 27
struct cvs_cmd_info {
	/* parses the options for the command */
	int (*cmd_options)(char *, int, char **, int *);

	/* send command specific flags (CVS_METHOD_REMOTE only) */
	int (*cmd_sendflags)(struct cvsroot *);

	/* callback to be used for cvs_file_examine() */
	int (*cmd_examine)(CVSFILE *, void *);

	/* called after everything is done */
	int (*cmd_cleanup)(void);

	/* helper function, gets called after cvs_file_get()
	 * to do command specific operations if needed.
	 */
	int (*cmd_helper)(void);

	/* flags for cvs_file_get() */
	int file_flags;

	/* number of request */
	int cmd_req;

	/* info on the command (see flags below) */
	int cmd_flags;
};
a139 1
#define CVS_CMD_NEEDLOG		0x02
d144 1
d146 5
a150 4
	int cmd_op;
	char cmd_name[CVS_CMD_MAXNAMELEN];
	char cmd_alias[CVS_CMD_MAXALIAS][CVS_CMD_MAXNAMELEN];
	struct cvs_cmd_info *cmd_info;
a152 1
	char cmd_descr[CVS_CMD_MAXDESCRLEN];
d154 12
d312 1
d314 34
a347 32
/* client command handlers */
extern struct cvs_cmd_info cvs_add;
extern struct cvs_cmd_info cvs_admin;
extern struct cvs_cmd_info cvs_annotate;
extern struct cvs_cmd_info cvs_checkout;
extern struct cvs_cmd_info cvs_commit;
extern struct cvs_cmd_info cvs_diff;
extern struct cvs_cmd_info cvs_edit;
extern struct cvs_cmd_info cvs_editors;
extern struct cvs_cmd_info cvs_export;
extern struct cvs_cmd_info cvs_getlog;
extern struct cvs_cmd_info cvs_history;
extern struct cvs_cmd_info cvs_import;
extern struct cvs_cmd_info cvs_init;
extern struct cvs_cmd_info cvs_rdiff;
extern struct cvs_cmd_info cvs_release;
extern struct cvs_cmd_info cvs_remove;
extern struct cvs_cmd_info cvs_rlog;
extern struct cvs_cmd_info cvs_rtag;
extern struct cvs_cmd_info cmd_server;
extern struct cvs_cmd_info cvs_status;
extern struct cvs_cmd_info cvs_tag;
extern struct cvs_cmd_info cvs_unedit;
extern struct cvs_cmd_info cvs_update;
extern struct cvs_cmd_info cvs_version;
extern struct cvs_cmd_info cvs_watch;
extern struct cvs_cmd_info cvs_watchers;

struct cvs_cmd* cvs_findcmd  (const char *);
int             cvs_startcmd (struct cvs_cmd *, int, char **);
int             cvs_server   (int, char **);

@


1.56
log
@use the date parsing code from date.y and fix timestamps on newly
created files so they match the values found in the corresponding
entries, otherwise all files appear as modified

ok joris
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.55 2005/05/18 20:24:19 joris Exp $	*/
d320 1
@


1.55
log
@

build a local copy of the client's source tree when acting as a server.
more server stuff coming soon!

ok jfb@@, xsa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.54 2005/05/02 15:00:18 xsa Exp $	*/
d396 2
a397 3
/* from util.c */
#define CVS_DATE_CTIME  0
#define CVS_DATE_RFC822 1
a399 1
time_t cvs_datesec    (const char *, int, int);
@


1.54
log
@add missing structs for upcoming commands; joris ok
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.53 2005/04/25 17:59:16 jfb Exp $	*/
d409 1
@


1.53
log
@* add missing 'R' flag in diff synopsis
* add the CVS_EX_BADROOT return code to indicate that there was no
  CVSROOT given or it was invalid

ok joris, xsa
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.52 2005/04/20 23:11:30 jfb Exp $	*/
d334 3
d341 2
d344 3
d349 1
d352 2
a353 1
extern struct cvs_cmd_info cmd_server;
@


1.52
log
@check the validity of tag names passed to the tag command, and print
an abort message if the tag is invalid.  also, match gnu cvs behaviour
with regards to command usage output on usage errors.

ok joris
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.51 2005/04/20 18:33:30 jfb Exp $	*/
d55 1
@


1.51
log
@add the CVS_EX_OK return code to indicate everything went fine

ok joris
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.50 2005/04/12 14:58:40 joris Exp $	*/
d54 1
@


1.50
log
@

introduce our own set of error codes used by the commands to report
what exactly went wrong in case of an error.

ok jfb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.49 2005/04/06 16:35:25 jfb Exp $	*/
d49 1
@


1.49
log
@make cvs_findcmd() available to the rest of the program

ok joris@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.48 2005/03/31 17:18:24 joris Exp $	*/
d48 5
@


1.48
log
@

make sure the server command can still be reached with the
new framework.

ok xsa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.47 2005/03/30 17:43:04 joris Exp $	*/
d337 3
a339 2
int  cvs_startcmd (struct cvs_cmd *, int, char **);
int  cvs_server   (int, char **);
@


1.47
log
@

move all the client commands to the new command framework.
eliminates a lot of duplicate code.

ok jfb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.46 2005/03/24 01:03:41 joris Exp $	*/
d335 1
@


1.46
log
@

add the first pieces of our new command framework.

ok jfb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.45 2005/03/06 21:09:00 joris Exp $	*/
d168 1
a168 1
	int (*cmd_hdlr)(int, char **);
a172 1
	struct cvs_cmd_info *cmd_info;
d320 16
a336 11
int  cvs_add      (int, char **);
int  cvs_admin    (int, char **);
int  cvs_annotate (int, char **);
int  cvs_checkout (int, char **);
int  cvs_commit   (int, char **);
int  cvs_diff     (int, char **);
int  cvs_getlog   (int, char **);
int  cvs_history  (int, char **);
int  cvs_import   (int, char **);
int  cvs_init     (int, char **);
int  cvs_remove   (int, char **);
a337 4
int  cvs_status   (int, char **);
int  cvs_tag      (int, char **);
int  cvs_update   (int, char **);
int  cvs_version  (int, char **);
@


1.45
log
@

initial support for the admin command. Not all options are working yet.

ok xsa@@ jfb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.44 2005/02/01 18:51:04 jfb Exp $	*/
d129 46
d321 1
@


1.44
log
@- accept a minus sign in front of the file's revision number to
  indicate that the file has been removed
- set the timestamp as invalid if we get the "dummy timestamp"
  string in the 4th field
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.43 2005/01/24 16:12:56 jfb Exp $	*/
d276 1
@


1.43
log
@add missing command IDs

reviewed by xsa@@ and Joris Vink
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.42 2005/01/13 17:53:34 jfb Exp $	*/
d195 4
d205 8
a212 7
	char    *ce_buf;
	u_int    ce_type;
	char    *ce_name;
	RCSNUM  *ce_rev;
	time_t   ce_mtime;
	char    *ce_opts;
	char    *ce_tag;
@


1.42
log
@more extern declarations for the common variables
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.41 2004/12/21 18:47:59 jfb Exp $	*/
d52 26
a77 14
#define CVS_OP_ANNOTATE     2
#define CVS_OP_CHECKOUT     3
#define CVS_OP_COMMIT       4
#define CVS_OP_DIFF         5
#define CVS_OP_HISTORY      6
#define CVS_OP_IMPORT       7
#define CVS_OP_INIT         8
#define CVS_OP_LOG          9
#define CVS_OP_REMOVE      10
#define CVS_OP_SERVER      11
#define CVS_OP_STATUS      12
#define CVS_OP_TAG         13
#define CVS_OP_UPDATE      14
#define CVS_OP_VERSION     15
@


1.41
log
@gnu CVS has an undocumented -s command-line option to set a variable,
so let's support it too.  This will also be required to implement the
`Set' request handler.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.40 2004/12/21 18:15:55 xsa Exp $	*/
d238 1
d242 1
d244 7
a250 2
extern int   cvs_cmdop;
extern int   cvs_nocase;
@


1.40
log
@on the way to `cvs remove'; ok jfb
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.39 2004/12/14 19:11:54 jfb Exp $	*/
d122 8
d266 5
@


1.39
log
@support the tag command

from Joris Vink
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.38 2004/12/09 20:03:27 jfb Exp $	*/
d252 1
@


1.38
log
@support the 'annotate' command, will need some polishing
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.37 2004/12/08 17:22:48 jfb Exp $	*/
d254 1
@


1.37
log
@embrace and extend (!) cvs_logmsg_get() so we can now display
information based on its availability and have separate sections for
the Added, Modified and Removed file lists.  this will allow us to
use the same call for add, commit, import and possibly others

Original patch by Joris Vink, some rework from me for the other
sections
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.36 2004/12/08 16:07:43 jfb Exp $	*/
d244 1
@


1.36
log
@add a small protection to avoid reconnecting to a server to which we
are already connected.  instead, cvs will print a notice.
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.35 2004/12/07 17:10:56 tedu Exp $	*/
d285 1
a285 1
char*  cvs_logmsg_get  (const char *, struct cvs_flist *);
@


1.35
log
@less whitespace, more pretty.  ok jfb
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.34 2004/12/07 06:33:10 jfb Exp $	*/
d131 2
d145 1
@


1.34
log
@add missing parts for support of .cvsrc

tested, tweaked by and ok djm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cvs.h,v 1.33 2004/12/02 17:45:44 jfb Exp $	*/
d4 1
a4 1
 * All rights reserved. 
d6 3
a8 3
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
d10 2
a11 2
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
d13 1
a13 1
 *    derived from this software without specific prior written permission. 
d24 1
a24 1
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
a69 1

a130 1

a197 1

a236 1

@


1.33
log
@cvs_logmsg_get() now accepts a list of files that it is getting the
message for and displays those files in the commented part of the
log message
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d84 1
d302 1
@


1.32
log
@struct cvs_file -> CVSFILE
@
text
@d285 1
a285 1
char*  cvs_logmsg_get  (const char *);
@


1.31
log
@Prototypes for the log message functions
@
text
@d297 1
a297 1
int    cvs_mkadmin    (struct cvs_file *, mode_t);
@


1.30
log
@We don't need to keep a copy of each Entries line, it isn't used
anywhere and it consumes memory uselessly.
@
text
@d283 4
a288 1

@


1.29
log
@cleanup and reset the valid requests array when allocating a new root
structure.  Also enable the use of at least Valid-responses and
valid-requests
@
text
@a178 1
	char    *ce_line;
d231 1
d249 1
@


1.28
log
@Ditch the 'ce_timestamp' field in favor of 'ce_mtime', which keeps
the timestamp in time_t instead of a string
@
text
@d147 2
a148 2
	char   *cr_version;   /* version of remote server */
	u_char  cr_vrmask[10];  /* mask of valid requests supported by server */
d151 3
a153 3
#define CVS_SETVR(rt, rq)  (rt)->cr_vrmask[(rq) / 8] |=  (1 << ((rq) % 8))
#define CVS_GETVR(rt, rq)  (rt)->cr_vrmask[(rq) / 8] &   (1 << ((rq) % 8))
#define CVS_CLRVR(rt, rq)  (rt)->cr_vrmask[(rq) / 8] &= ~(1 << ((rq) % 8))
@


1.27
log
@Add a macro for dummy timestamp strings
@
text
@d166 2
a167 1
#define CVS_ENT_DUMMYTIME  "dummy timestamp"
a183 1
	char    *ce_timestamp;
d284 4
d289 1
a289 1
time_t cvs_datesec    (const char *);
@


1.26
log
@Add cvs_datesec() to calculate the time_t value corresponding to a
ctime(3)-style date string
@
text
@d166 2
d171 1
@


1.25
log
@Simplify cvs_splitpath() by requiring only one buffer to copy the result
into
@
text
@d181 1
d282 1
a282 1
int    cvs_splitpath  (const char *, char *, size_t, char **);
d285 1
@


1.24
log
@Handle the '-b' and '-x' global options even if we don't support them,
and add support for case insensitivity
@
text
@d281 1
a281 1
int    cvs_splitpath  (const char *, char *, size_t, char *, size_t);
@


1.23
log
@Have one global hierarchy of files that are being affected.  This will
allow us to build the tree in memory as well as on disk for operations
such as checkout and update.  It will also allow us to write all Entries
in a single disk write and to avoid creating empty directories on updates
when pruning is requested
@
text
@d230 1
@


1.22
log
@Adapt the logging so any messages generated by the server will be
prepended with a 'M' or 'E' command, depending on the log level, and
follow the GNU behaviour of printing the command name after the program
name in messages
@
text
@d231 2
@


1.21
log
@When spawning the subprocess for the connection, attach a pipe to its
standard error as well
@
text
@d226 1
d228 3
@


1.20
log
@Add a per-root mask of supported requests and a set of macros to set, get
and clear the appropriate bits for each request
@
text
@d87 1
d146 1
@


1.19
log
@When we connect to a remote server, always send the Version request and
add a hack so we don't print it (we receive it through a 'M') but store
it in the cvs root structure instead.  This will allow us to make better
decisions in what we use to communicate with the remote server.
@
text
@d146 1
d148 5
@


1.18
log
@No more global cvs_root
@
text
@d35 1
d37 3
a39 1
#define CVS_VERSION    "OpenCVS 0.1"
d50 1
a50 1
#define CVS_OP_ANY          0     /* all operations */
d67 1
d119 1
a119 1

d122 5
a126 4
	u_int  co_op;
	uid_t  co_uid;    /* user performing the operation */
	char  *co_path;   /* target path of the operation */
	char  *co_tag;    /* tag or branch, NULL if HEAD */
d145 1
@


1.17
log
@* remove header cruft that belongs in file.h
* be more intelligent with the file open mode.  It seems rewind() doesn't
  work too well with a file opened in append mode
@
text
@d212 1
a212 1
extern struct cvsroot *cvs_root;
a213 1

@


1.16
log
@Move to the new API for the client-server protocol.  All functions now
take a cvs root structure as parameter.  This will allow for much easier
management of CVS trees that make use of multiple roots.
@
text
@a142 53
#define CF_STAT     0x01    /* allocate space for file stats */
#define CF_IGNORE   0x02    /* apply regular ignore rules */
#define CF_RECURSE  0x04    /* recurse on directory operations */
#define CF_SORT     0x08    /* all files are sorted alphabetically */
#define CF_KNOWN    0x10    /* only recurse in directories known to CVS */
#define CF_CREATE   0x20    /* create if file does not exist */


/*
 * The cvs_file structure is used to represent any file or directory within
 * the CVS tree's hierarchy.  The <cf_path> field is a path relative to the
 * directory in which the cvs command was executed.  The <cf_parent> field
 * points back to the parent node in the directory tree structure (it is
 * NULL if the directory is at the wd of the command).
 *
 * The <cf_cvstat> field gives the file's status with regards to the CVS
 * repository.  The file can be in any one of the CVS_FST_* states.
 * If the file's type is DT_DIR, then the <cf_ddat> pointer will point to
 * a cvs_dir structure containing data specific to the directory (such as
 * the contents of the directory's CVS/Entries, CVS/Root, etc.).
 */

#define CVS_FST_UNKNOWN   0
#define CVS_FST_UPTODATE  1
#define CVS_FST_MODIFIED  2
#define CVS_FST_ADDED     3
#define CVS_FST_REMOVED   4
#define CVS_FST_CONFLICT  5
#define CVS_FST_PATCHED   6


TAILQ_HEAD(cvs_flist, cvs_file);


typedef struct cvs_file {
	char            *cf_path;
	struct cvs_file *cf_parent;  /* parent directory (NULL if none) */
	char            *cf_name;
	u_int16_t        cf_cvstat;  /* cvs status of the file */
	u_int16_t        cf_type;    /* uses values from dirent.h */
	struct stat     *cf_stat;    /* only available with CF_STAT flag */
	struct cvs_dir  *cf_ddat;    /* only for directories */

	TAILQ_ENTRY(cvs_file)  cf_list;
} CVSFILE;


struct cvs_dir {
	struct cvsroot  *cd_root;
	char            *cd_repo;
	struct cvs_flist cd_files;
};

d156 3
d175 1
a231 12
/* from client.c */
int     cvs_client_connect     (struct cvsroot *);
void    cvs_client_disconnect  (struct cvsroot *);
int     cvs_client_sendreq     (u_int, const char *, int);
int     cvs_client_sendarg     (const char *, int);
int     cvs_client_sendln      (const char *);
int     cvs_client_sendraw     (const void *, size_t);
ssize_t cvs_client_recvraw     (void *, size_t);
int     cvs_client_getln       (char *, size_t);
int     cvs_client_senddir     (const char *);


a237 11
/* from file.c */
int      cvs_file_init    (void);
int      cvs_file_ignore  (const char *);
int      cvs_file_chkign  (const char *);
CVSFILE* cvs_file_create  (const char *, u_int, mode_t);
CVSFILE* cvs_file_get     (const char *, int);
CVSFILE* cvs_file_getspec (char **, int, int);
void     cvs_file_free    (struct cvs_file *);
int      cvs_file_examine (CVSFILE *, int (*)(CVSFILE *, void *), void *);


d245 1
@


1.15
log
@Use the `CVS' define to simplify exporting symbols
@
text
@a42 4
#define CVS_REQ_TIMEOUT    300



d50 13
a62 4
#define CVS_OP_COMMIT       3
#define CVS_OP_DIFF         4
#define CVS_OP_TAG          5
#define CVS_OP_UPDATE       6
a76 111
/* client/server protocol requests */
#define CVS_REQ_NONE          0
#define CVS_REQ_ROOT          1
#define CVS_REQ_VALIDREQ      2
#define CVS_REQ_VALIDRESP     3
#define CVS_REQ_DIRECTORY     4
#define CVS_REQ_MAXDOTDOT     5
#define CVS_REQ_STATICDIR     6
#define CVS_REQ_STICKY        7
#define CVS_REQ_ENTRY         8
#define CVS_REQ_ENTRYEXTRA    9
#define CVS_REQ_CHECKINTIME  10
#define CVS_REQ_MODIFIED     11
#define CVS_REQ_ISMODIFIED   12
#define CVS_REQ_UNCHANGED    13
#define CVS_REQ_USEUNCHANGED 14
#define CVS_REQ_NOTIFY       15
#define CVS_REQ_NOTIFYUSER   16
#define CVS_REQ_QUESTIONABLE 17
#define CVS_REQ_CASE         18
#define CVS_REQ_UTF8         19
#define CVS_REQ_ARGUMENT     20
#define CVS_REQ_ARGUMENTX    21
#define CVS_REQ_GLOBALOPT    22
#define CVS_REQ_GZIPSTREAM   23
#define CVS_REQ_KERBENCRYPT  24
#define CVS_REQ_GSSENCRYPT   25
#define CVS_REQ_PROTOENCRYPT 26
#define CVS_REQ_GSSAUTH      27
#define CVS_REQ_PROTOAUTH    28
#define CVS_REQ_READCVSRC2   29
#define CVS_REQ_READWRAP     30
#define CVS_REQ_ERRIFREADER  31
#define CVS_REQ_VALIDRCSOPT  32
#define CVS_REQ_READIGNORE   33
#define CVS_REQ_SET          34
#define CVS_REQ_XPANDMOD     35
#define CVS_REQ_CI           36
#define CVS_REQ_CHOWN        37
#define CVS_REQ_SETOWN       38
#define CVS_REQ_SETPERM      39
#define CVS_REQ_CHACL        40
#define CVS_REQ_LISTPERM     41
#define CVS_REQ_LISTACL      42
#define CVS_REQ_SETPASS      43
#define CVS_REQ_PASSWD       44
#define CVS_REQ_DIFF         45
#define CVS_REQ_STATUS       46
#define CVS_REQ_LS           47
#define CVS_REQ_TAG          48
#define CVS_REQ_IMPORT       49
#define CVS_REQ_ADMIN        50
#define CVS_REQ_HISTORY      51
#define CVS_REQ_WATCHERS     52
#define CVS_REQ_EDITORS      53
#define CVS_REQ_ANNOTATE     54
#define CVS_REQ_LOG          55
#define CVS_REQ_CO           56
#define CVS_REQ_EXPORT       57
#define CVS_REQ_RANNOTATE    58
#define CVS_REQ_INIT         59
#define CVS_REQ_UPDATE       60
#define CVS_REQ_ADD          62
#define CVS_REQ_REMOVE       63
#define CVS_REQ_NOOP         64
#define CVS_REQ_RTAG         65
#define CVS_REQ_RELEASE      66
#define CVS_REQ_RLOG         67
#define CVS_REQ_RDIFF        68
#define CVS_REQ_VERSION      69

#define CVS_REQ_MAX          69


/* responses */
#define CVS_RESP_OK           1
#define CVS_RESP_ERROR        2
#define CVS_RESP_VALIDREQ     3
#define CVS_RESP_CHECKEDIN    4
#define CVS_RESP_NEWENTRY     5
#define CVS_RESP_CKSUM        6
#define CVS_RESP_COPYFILE     7
#define CVS_RESP_UPDATED      8
#define CVS_RESP_CREATED      9
#define CVS_RESP_UPDEXIST    10
#define CVS_RESP_MERGED      11
#define CVS_RESP_PATCHED     12
#define CVS_RESP_RCSDIFF     13
#define CVS_RESP_MODE        14
#define CVS_RESP_MODTIME     15
#define CVS_RESP_REMOVED     16
#define CVS_RESP_RMENTRY     17
#define CVS_RESP_SETSTATDIR  18
#define CVS_RESP_CLRSTATDIR  19
#define CVS_RESP_SETSTICKY   20
#define CVS_RESP_CLRSTICKY   21
#define CVS_RESP_TEMPLATE    22
#define CVS_RESP_SETCIPROG   23
#define CVS_RESP_SETUPDPROG  24
#define CVS_RESP_NOTIFIED    25
#define CVS_RESP_MODXPAND    26
#define CVS_RESP_WRAPRCSOPT  27
#define CVS_RESP_M           28
#define CVS_RESP_MBINARY     29
#define CVS_RESP_E           30
#define CVS_RESP_F           31
#define CVS_RESP_MT          32




a278 16


/* proto.c */
int         cvs_req_handle     (char *);
const char* cvs_req_getbyid    (int);
int         cvs_req_getbyname  (const char *);
char*       cvs_req_getvalid   (void);


int         cvs_resp_handle    (char *);
const char* cvs_resp_getbyid   (int);
int         cvs_resp_getbyname (const char *);
char*       cvs_resp_getvalid  (void);

int         cvs_sendfile       (const char *);
int         cvs_recvfile       (const char *);
@


1.14
log
@typo
@
text
@d366 6
d382 1
@


1.13
log
@Use tail queues instead of lists to manage file entries
@
text
@d280 1
a280 1
TAILQ_HEAD(cvs_flist, cvs_files);
@


1.12
log
@* when comparing timestamps, use the last modification time instead
  of the last access time.  No wonder all the files appeared as
  modified
* always show directories as up to date
* skeleton for cvs_file_getspec()
@
text
@d279 4
d292 1
a292 1
	LIST_ENTRY(cvs_file)  cf_list;
d297 3
a299 3
	struct cvsroot *cd_root;
	char           *cd_repo;
	LIST_HEAD(cvs_flist, cvs_file) cd_files;
@


1.11
log
@* prepare for an overhaul of the connection code by adding a cvsroot
  parameter to the cvs_client_connect() and cvs_client_disconnect()
  functions, so we rely less and less on a global variable
@
text
@d277 1
d416 1
@


1.10
log
@* create cvs_file_alloc() to keep one copy of the file allocation code
  and reuse it
* add cvs_file_create() to explicitly create a file or directory
* add cvs_mkadmin() to fill the administrative files for a CVS directory
@
text
@d233 1
d241 5
d392 2
a393 2
int     cvs_client_connect     (void);
void    cvs_client_disconnect  (void);
@


1.9
log
@Add the handler for the checkout command
@
text
@d216 1
d248 1
d407 1
a407 1
char**   cvs_file_getv    (const char *, int *, int);
d438 1
@


1.8
log
@* cleanup the file API with regards to flag handling and
  general structure
* implement cvs_ent_close() correctly, fix some memory leaks, and add
  cvs_ent_getent() to get a single entry easily
@
text
@d32 2
d270 1
a270 1
struct cvs_file {
d280 1
a280 1
};
d356 1
d402 7
a408 6
int              cvs_file_init      (void);
int              cvs_file_ignore    (const char *);
int              cvs_file_isignored (const char *);
char**           cvs_file_getv      (const char *, int *, int);
struct cvs_file* cvs_file_get       (const char *, int);
void             cvs_file_free      (struct cvs_file *);
@


1.7
log
@Revamp the file interface to make life easier
@
text
@d31 1
a31 1

d49 1
d244 1
d254 2
d261 7
d272 4
a275 3
	u_int            cf_type;    /* uses values from dirent.h */
	struct stat     *cf_stat;
	struct cvs_dir  *cf_ddat;   /* only for directories */
d416 2
@


1.6
log
@* add prototypes for cvs_getargv() and cvs_freeargv()
* remove cvs_file_free(), cvs_freeargv() does exactly the same
@
text
@d215 4
a227 3



d239 36
d386 7
a392 4
int     cvs_file_init       (void);
int     cvs_file_ignore     (const char *);
int     cvs_file_isignored  (const char *);
char**  cvs_file_getv       (const char *, int *);
@


1.5
log
@prototype for cvs_ent_addln()
@
text
@a352 1
void    cvs_file_free       (char **, int);
d380 2
@


1.4
log
@Unbreak the Entries loading code and move to a tail queue so we can remove
entries as well when it will be needed
@
text
@d361 1
@


1.3
log
@prepare the entries interface so we can add entries
@
text
@d261 1
d268 2
a269 4
	u_int    cef_nid;  /* next entry index to return for next() */

	struct cvs_ent **cef_entries;
	u_int            cef_nbent;
@


1.2
log
@cvsignore support and simpler API for file access
@
text
@d265 1
d358 1
a358 1
CVSENTRIES*      cvs_ent_open   (const char *);
@


1.1
log
@Initial revision
@
text
@d321 1
d347 7
@


1.1.1.1
log
@* initial import from the cvs-tools module
@
text
@@
