head	1.29;
access;
symbols
	OPENBSD_6_1:1.29.0.4
	OPENBSD_6_1_BASE:1.29
	OPENBSD_6_0:1.28.0.26
	OPENBSD_6_0_BASE:1.28
	OPENBSD_5_9:1.28.0.22
	OPENBSD_5_9_BASE:1.28
	OPENBSD_5_8:1.28.0.24
	OPENBSD_5_8_BASE:1.28
	OPENBSD_5_7:1.28.0.16
	OPENBSD_5_7_BASE:1.28
	OPENBSD_5_6:1.28.0.20
	OPENBSD_5_6_BASE:1.28
	OPENBSD_5_5:1.28.0.18
	OPENBSD_5_5_BASE:1.28
	OPENBSD_5_4:1.28.0.14
	OPENBSD_5_4_BASE:1.28
	OPENBSD_5_3:1.28.0.12
	OPENBSD_5_3_BASE:1.28
	OPENBSD_5_2:1.28.0.10
	OPENBSD_5_2_BASE:1.28
	OPENBSD_5_1_BASE:1.28
	OPENBSD_5_1:1.28.0.8
	OPENBSD_5_0:1.28.0.6
	OPENBSD_5_0_BASE:1.28
	OPENBSD_4_9:1.28.0.4
	OPENBSD_4_9_BASE:1.28
	OPENBSD_4_8:1.28.0.2
	OPENBSD_4_8_BASE:1.28
	OPENBSD_4_7:1.26.0.2
	OPENBSD_4_7_BASE:1.26
	OPENBSD_4_6:1.26.0.4
	OPENBSD_4_6_BASE:1.26
	OPENBSD_4_5:1.25.0.4
	OPENBSD_4_5_BASE:1.25
	OPENBSD_4_4:1.25.0.2
	OPENBSD_4_4_BASE:1.25
	OPENBSD_4_3:1.24.0.2
	OPENBSD_4_3_BASE:1.24
	OPENBSD_4_2:1.22.0.4
	OPENBSD_4_2_BASE:1.22
	OPENBSD_4_1:1.22.0.2
	OPENBSD_4_1_BASE:1.22
	OPENBSD_4_0:1.18.0.2
	OPENBSD_4_0_BASE:1.18
	OPENBSD_3_9:1.9.0.2
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.6.0.2
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4
	OpenCVS_0_1:1.1.1.1
	OpenCVS:1.1.1;
locks; strict;
comment	@ * @;


1.29
date	2016.10.15.22.20.17;	author millert;	state Exp;
branches;
next	1.28;
commitid	bZGHsljlW6kmRYub;

1.28
date	2010.08.01.09.55.40;	author zinovik;	state Exp;
branches;
next	1.27;

1.27
date	2010.07.23.21.46.05;	author ray;	state Exp;
branches;
next	1.26;

1.26
date	2009.03.25.21.19.20;	author joris;	state Exp;
branches;
next	1.25;

1.25
date	2008.06.10.01.00.34;	author joris;	state Exp;
branches;
next	1.24;

1.24
date	2008.02.27.22.34.04;	author joris;	state Exp;
branches;
next	1.23;

1.23
date	2008.02.11.20.33.11;	author tobias;	state Exp;
branches;
next	1.22;

1.22
date	2007.02.22.06.42.09;	author otto;	state Exp;
branches;
next	1.21;

1.21
date	2007.02.21.04.18.45;	author ray;	state Exp;
branches;
next	1.20;

1.20
date	2007.02.19.11.40.00;	author otto;	state Exp;
branches;
next	1.19;

1.19
date	2007.02.02.04.24.09;	author ray;	state Exp;
branches;
next	1.18;

1.18
date	2006.07.08.09.25.44;	author ray;	state Exp;
branches;
next	1.17;

1.17
date	2006.06.14.14.10.50;	author joris;	state Exp;
branches;
next	1.16;

1.16
date	2006.05.28.22.43.55;	author joris;	state Exp;
branches;
next	1.15;

1.15
date	2006.05.27.03.30.30;	author joris;	state Exp;
branches;
next	1.14;

1.14
date	2006.04.06.16.48.34;	author xsa;	state Exp;
branches;
next	1.13;

1.13
date	2006.03.25.21.29.59;	author ray;	state Exp;
branches;
next	1.12;

1.12
date	2006.03.23.08.50.41;	author xsa;	state Exp;
branches;
next	1.11;

1.11
date	2006.03.20.16.18.13;	author niallo;	state Exp;
branches;
next	1.10;

1.10
date	2006.03.17.07.37.08;	author ray;	state Exp;
branches;
next	1.9;

1.9
date	2006.02.01.16.28.20;	author xsa;	state Exp;
branches;
next	1.8;

1.8
date	2006.01.10.14.57.53;	author niallo;	state Exp;
branches;
next	1.7;

1.7
date	2006.01.02.08.11.56;	author xsa;	state Exp;
branches;
next	1.6;

1.6
date	2005.07.26.20.58.44;	author moritz;	state Exp;
branches;
next	1.5;

1.5
date	2005.07.25.11.07.00;	author xsa;	state Exp;
branches;
next	1.4;

1.4
date	2004.12.08.21.11.07;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2004.07.14.03.33.53;	author vincent;	state Exp;
branches;
next	1.2;

1.2
date	2004.07.13.22.21.11;	author jfb;	state Exp;
branches;
next	1.1;

1.1
date	2004.07.13.22.02.40;	author jfb;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.07.13.22.02.40;	author jfb;	state Exp;
branches;
next	;


desc
@@


1.29
log
@Quiet compiler warnings.  OK tomc@@ tb@@
@
text
@/*	$OpenBSD: buf.h,v 1.28 2010/08/01 09:55:40 zinovik Exp $	*/
/*
 * Copyright (c) 2003 Jean-Francois Brousseau <jfb@@openbsd.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef BUF_H
#define BUF_H

#include <sys/types.h>

typedef struct buf BUF;
struct timeval;

BUF		*buf_alloc(size_t);
BUF		*buf_load(const char *);
BUF		*buf_load_fd(int);
void		 buf_free(BUF *);
void		*buf_release(BUF *);
u_char		*buf_get(BUF *);
void		 buf_append(BUF *, const void *, size_t);
void		 buf_putc(BUF *, int);
void		 buf_puts(BUF *, const char *);
size_t		 buf_len(BUF *);
int		 buf_write_fd(BUF *, int);
int		 buf_write(BUF *, const char *, mode_t);
int		 buf_differ(const BUF *, const BUF *);
int		 buf_write_stmp(BUF *, char *, struct timeval *);

#endif	/* BUF_H */
@


1.28
log
@change buf_release() prototype accordingly to buf.c

unbreaks opencvs build
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.h,v 1.27 2010/07/23 21:46:05 ray Exp $	*/
d33 1
@


1.27
log
@Reduce variable/function name and whitespace differences between
cvs/rcs.

OK xsa zinovik
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.h,v 1.26 2009/03/25 21:19:20 joris Exp $	*/
d38 1
a38 1
u_char		*buf_release(BUF *);
@


1.26
log
@remove unused functions, definitions and outdated comments
from the stone ages.
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.h,v 1.25 2008/06/10 01:00:34 joris Exp $	*/
d32 1
a32 1
typedef struct cvs_buf BUF;
d34 14
a47 14
BUF		*cvs_buf_alloc(size_t);
BUF		*cvs_buf_load(const char *);
BUF		*cvs_buf_load_fd(int);
void		 cvs_buf_free(BUF *);
u_char		*cvs_buf_release(BUF *);
u_char		*cvs_buf_get(BUF *);
void		 cvs_buf_append(BUF *, const void *, size_t);
void		 cvs_buf_putc(BUF *, int);
void		 cvs_buf_puts(BUF *, const char *);
size_t		 cvs_buf_len(BUF *);
int		 cvs_buf_write_fd(BUF *, int);
int		 cvs_buf_write(BUF *, const char *, mode_t);
int		 cvs_buf_differ(const BUF *, const BUF *);
int		 cvs_buf_write_stmp(BUF *, char *, struct timeval *);
@


1.25
log
@New trigger framework that allows us to run the required scripts
defined in CVSROOT/commitinfo and CVSROOT/loginfo and so on.

This enables the use of log_accum2 and all that other nice stuff we like.

This was mostly written by Jonathan Armani with help from tobias@@ and myself.

ok tobias@@
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.h,v 1.24 2008/02/27 22:34:04 joris Exp $	*/
a31 3
/* flags */
#define BUF_AUTOEXT	1	/* autoextend on append */

d39 1
a39 2
u_char		 cvs_buf_getc(BUF *, size_t);
void		 cvs_buf_empty(BUF *);
a47 5

ssize_t		 cvs_buf_copy(BUF *, size_t, void *, size_t);
const u_char	*cvs_buf_peek(BUF *, size_t);

#define cvs_buf_get(b)	cvs_buf_peek(b, 0)
@


1.24
log
@prevent file races

ok tobias@@
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.h,v 1.23 2008/02/11 20:33:11 tobias Exp $	*/
d46 1
@


1.23
log
@Cleanup buf implementation:

* Don't check for NULL on buffer creation, because it calls fatal() when
  something's wrong.
* All buffers are supposed to expand if there is no space left in them,
  so zap flags as well.
* Remove code that is now dead.

OK joris@@

> Inspired by a diff from Igor Zinovik about unchecked return value.
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.h,v 1.22 2007/02/22 06:42:09 otto Exp $	*/
d50 1
a50 1
void		 cvs_buf_write_stmp(BUF *, char *, struct timeval *);
@


1.22
log
@general includes cleanup sweep. ok joris@@ niallo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.h,v 1.21 2007/02/21 04:18:45 ray Exp $	*/
d37 3
a39 3
BUF		*cvs_buf_alloc(size_t, u_int);
BUF		*cvs_buf_load(const char *, u_int);
BUF		*cvs_buf_load_fd(int, u_int);
d44 1
a44 3
ssize_t		 cvs_buf_append(BUF *, const void *, size_t);
ssize_t		 cvs_buf_fappend(BUF *, const char *, ...)
		     __attribute__((format(printf, 2, 3)));
@


1.21
log
@Simplify cvs_buf_differ().  Also cvs_buf_differ(), a comparison
function, should not do any resource freeing.

OK joris@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.h,v 1.20 2007/02/19 11:40:00 otto Exp $	*/
d29 2
@


1.20
log
@Fix const inconsistencies, void pointer artithmetic and a few other
things. now gcc -Wall and lint are more happy. ok joris@@ xsa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.h,v 1.19 2007/02/02 04:24:09 ray Exp $	*/
d49 1
a49 1
int		 cvs_buf_differ(BUF *, BUF *);
@


1.19
log
@Remove unused and buggy {cvs,rcs}_buf_set functions.

Bugginess pointed out and fix provided by Pierre Riteau.

OK joris@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.h,v 1.18 2006/07/08 09:25:44 ray Exp $	*/
d39 1
a39 1
void		*cvs_buf_release(BUF *);
d53 1
a53 1
const void	*cvs_buf_peek(BUF *, size_t);
@


1.18
log
@Remove file mode argument from {cvs|rcs}_buf_write_stmp().  We
always set the temporary file to mode 600, which is already done
by mkstemp().

OK joris@@ and xsa@@ over a month ago.
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.h,v 1.17 2006/06/14 14:10:50 joris Exp $	*/
a41 1
ssize_t		 cvs_buf_set(BUF *, const void *, size_t, size_t);
@


1.17
log
@add cvs_buf_load_fd() which does the same as cvs_buf_load()
except it takes a decriptor as argument instead of a path.

modified cvs_buf_load() to open the descriptor then pass
it to cvs_buf_load_fd().

change all the calls to cvs_buf_load() that have a descriptor
open for the path to cvs_buf_load_fd() to prevent races.
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.h,v 1.16 2006/05/28 22:43:55 joris Exp $	*/
d51 1
a51 1
void		 cvs_buf_write_stmp(BUF *, char *, mode_t, struct timeval *);
@


1.16
log
@add a way to look if a buffer differs from another one
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.h,v 1.15 2006/05/27 03:30:30 joris Exp $	*/
d37 1
@


1.15
log
@commit the new opencvs code, i have been hacking on
this for the past 2 weeks now and it should go in at
the start of the hackathon so others can help out.

this code is a lot safer, smarter, faster and best of
all it is actually doing what it is suppose to do!

basic checkout, update, status, diff and commit are
working in local mode only.
there is no support for any remote setups now.
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.h,v 1.14 2006/04/06 16:48:34 xsa Exp $	*/
d49 1
@


1.14
log
@cvs_buf_copy() and cvs_buf_peek() are not used by usr.bin/rcs; OK niallo@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.h,v 1.13 2006/03/25 21:29:59 ray Exp $	*/
a24 11
 *
 * Buffer management
 * -----------------
 *
 * This code provides an API to generic memory buffer management.  All
 * operations are performed on a cvs_buf structure, which is kept opaque to the
 * API user in order to avoid corruption of the fields and make sure that only
 * the internals can modify the fields.
 *
 * The first step is to allocate a new buffer using the cvs_buf_create()
 * function, which returns a pointer to a new buffer.
a32 1

a34 1

d49 2
a50 2
void		 cvs_buf_write_stmp(BUF *, char *, mode_t);
#if !defined(RCSPROG)
a52 1
#endif	/* RCSPROG */
@


1.13
log
@Correct integer types, remove unused arguments, non-portable bitshifts
changed to division, KNF, replace unreachable code with goto fail,
et cetera.  Found by lint.

The free() -> xfree() as well.

OK niallo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.h,v 1.12 2006/03/23 08:50:41 xsa Exp $	*/
a53 1
ssize_t		 cvs_buf_copy(BUF *, size_t, void *, size_t);
a59 1
const void	*cvs_buf_peek(BUF *, size_t);
d63 4
@


1.12
log
@- cvs_buf_putc() will never return non-zero
- change cvs_buf_putc() return type to void
OK ray@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.h,v 1.11 2006/03/20 16:18:13 niallo Exp $	*/
d52 1
a52 1
u_char		 cvs_buf_getc(BUF *, u_int);
@


1.11
log
@delint; cvs_buf_write_stmp() will never return non-zero:

- remove superfluous error handling for cvs_buf_write_stmp()
- change cvs_buf_write_stmp() return type to void

ok joris@@ xsa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.h,v 1.10 2006/03/17 07:37:08 ray Exp $	*/
d59 1
a59 1
int		 cvs_buf_putc(BUF *, int);
@


1.10
log
@Use ssize_t in appropriate places.
Found by lint.

OK niallo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.h,v 1.9 2006/02/01 16:28:20 xsa Exp $	*/
d64 1
a64 1
int		 cvs_buf_write_stmp(BUF *, char *, mode_t);
@


1.9
log
@check format string; OK niallo@@, "it's nice to have" joris@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.h,v 1.8 2006/01/10 14:57:53 niallo Exp $	*/
d57 1
a57 1
int		 cvs_buf_fappend(BUF *, const char *, ...)
@


1.8
log
@- add cvs_buf_getc() function; returns byte at specified buffer position.

needed for the next commit.

ok xsa@@ joris@@
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.h,v 1.7 2006/01/02 08:11:56 xsa Exp $	*/
d57 2
a58 1
int		 cvs_buf_fappend(BUF *, const char *, ...);
@


1.7
log
@#include's cleanup; ok joris@@ niallo@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.h,v 1.6 2005/07/26 20:58:44 moritz Exp $	*/
d52 1
@


1.6
log
@- fix SIZE_LEFT macro for the cb_cur > cb_buf case.
- make cvs_buf_empty() really clean the buffer.
- fix cvs_buf_copy() for the off > 0 case.
- some more minor buf code cleanup.

ok joris@@
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.h,v 1.5 2005/07/25 11:07:00 xsa Exp $	*/
a39 3

#include <sys/types.h>

@


1.5
log
@KNF; mostly spaces vs. tabs; ok joris@@ jfb@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.h,v 1.4 2004/12/08 21:11:07 djm Exp $	*/
d57 1
a57 1
int		 cvs_buf_set(BUF *, const void *, size_t, size_t);
d61 1
a61 1
size_t		 cvs_buf_size(BUF *);
@


1.4
log
@use mkstemp for local diff -r r1 -r r2; ok jfb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.h,v 1.3 2004/07/14 03:33:53 vincent Exp $	*/
d45 1
a45 1
#define BUF_AUTOEXT   1      /* autoextend on append */
d51 15
a65 15
BUF*         cvs_buf_alloc     (size_t, u_int);
BUF*         cvs_buf_load      (const char *, u_int);
void         cvs_buf_free      (BUF *);
void*        cvs_buf_release   (BUF *);
void         cvs_buf_empty     (BUF *);
ssize_t      cvs_buf_copy      (BUF *, size_t, void *, size_t);
int          cvs_buf_set       (BUF *, const void *, size_t, size_t);
ssize_t      cvs_buf_append    (BUF *, const void *, size_t);
int          cvs_buf_fappend   (BUF *, const char *, ...);
int          cvs_buf_putc      (BUF *, int);
size_t       cvs_buf_size      (BUF *);
const void*  cvs_buf_peek      (BUF *, size_t);
int          cvs_buf_write_fd  (BUF *, int);
int          cvs_buf_write     (BUF *, const char *, mode_t);
int          cvs_buf_write_stmp(BUF *, char *, mode_t);
d67 1
a67 1
#define cvs_buf_get(b)   cvs_buf_peek(b, 0)
d69 1
a69 1
#endif /* BUF_H */
@


1.3
log
@int is not ssize_t
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d51 15
a65 13
BUF*         cvs_buf_alloc   (size_t, u_int);
BUF*         cvs_buf_load    (const char *, u_int);
void         cvs_buf_free    (BUF *);
void*        cvs_buf_release (BUF *);
void         cvs_buf_empty   (BUF *);
ssize_t      cvs_buf_copy    (BUF *, size_t, void *, size_t);
int          cvs_buf_set     (BUF *, const void *, size_t, size_t);
ssize_t      cvs_buf_append  (BUF *, const void *, size_t);
int          cvs_buf_fappend (BUF *, const char *, ...);
int          cvs_buf_putc    (BUF *, int);
size_t       cvs_buf_size    (BUF *);
const void*  cvs_buf_peek    (BUF *, size_t);
int          cvs_buf_write   (BUF *, const char *, mode_t);
@


1.2
log
@* make the email address consistent
@
text
@d58 1
a58 1
int          cvs_buf_append  (BUF *, const void *, size_t);
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
 * Copyright (c) 2003 Jean-Francois Brousseau <jfb@@fugusec.net>
@


1.1.1.1
log
@* initial import from the cvs-tools module
@
text
@@
