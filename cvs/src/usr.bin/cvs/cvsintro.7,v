head	1.15;
access;
symbols
	OPENBSD_6_0:1.15.0.12
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.8
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.10
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.15.0.6
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.15.0.4
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.14.0.24
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.22
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.20
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.18
	OPENBSD_5_0:1.14.0.16
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.14
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.12
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.8
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.10
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.6
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.4
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.2
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.13.0.2
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.10.0.8
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.6
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.4
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.2
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.5.0.2
	OPENBSD_3_7_BASE:1.5;
locks; strict;
comment	@.\" @;


1.15
date	2013.08.14.08.46.07;	author jmc;	state Exp;
branches;
next	1.14;

1.14
date	2008.02.26.21.48.30;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2007.05.31.19.20.09;	author jmc;	state Exp;
branches;
next	1.12;

1.12
date	2007.04.17.14.15.28;	author jmc;	state Exp;
branches;
next	1.11;

1.11
date	2007.04.14.13.34.44;	author jmc;	state Exp;
branches;
next	1.10;

1.10
date	2005.08.10.15.20.40;	author niallo;	state Exp;
branches;
next	1.9;

1.9
date	2005.08.10.15.08.04;	author xsa;	state Exp;
branches;
next	1.8;

1.8
date	2005.08.02.16.50.05;	author xsa;	state Exp;
branches;
next	1.7;

1.7
date	2005.06.07.09.11.12;	author xsa;	state Exp;
branches;
next	1.6;

1.6
date	2005.04.12.20.11.07;	author xsa;	state Exp;
branches;
next	1.5;

1.5
date	2005.01.11.08.26.45;	author xsa;	state Exp;
branches;
next	1.4;

1.4
date	2005.01.04.15.03.24;	author jmc;	state Exp;
branches;
next	1.3;

1.3
date	2004.12.08.19.37.28;	author xsa;	state Exp;
branches;
next	1.2;

1.2
date	2004.12.02.22.38.30;	author jmc;	state Exp;
branches;
next	1.1;

1.1
date	2004.11.26.15.57.16;	author jfb;	state Exp;
branches;
next	;


desc
@@


1.15
log
@more Bx;
From: Jan Stary
@
text
@.\"	$OpenBSD: cvsintro.7,v 1.14 2008/02/26 21:48:30 deraadt Exp $
.\"
.\" Copyright (c) 2004 Jean-Francois Brousseau <jfb@@openbsd.org>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. The name of the author may not be used to endorse or promote products
.\"    derived from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
.\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
.\" AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
.\" THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
.\" EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLUDING, BUT NOT LIMITED TO,
.\" PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
.\" OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
.\" WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
.\" OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
.\" ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: February 26 2008 $
.Dt CVSINTRO 7
.Os
.Sh NAME
.Nm cvsintro
.Nd introduction to Concurrent Versioning System
.Sh DESCRIPTION
Concurrent Versions System is a popular open source version control system.
Although it is mostly used to track changes to software source code for
development teams, there are very few limitations to the kind of data that
can be managed by the system, and it can be used for document archival
purposes as well.
.Pp
This document provides an introduction to using OpenCVS to manage repositories.
It will first cover some of the aspects of using and managing CVS and,
where appropriate, explain the main differences between OpenCVS and other
distributions.
.Sh USING CVS TO TRACK SOURCE CHANGES
One of the most common uses of
.Xr cvs 1
is to track changes to a collection of source files (a
.Em module )
contained within a certain, defined, location (a
.Em repository ) .
This allows the user to keep a set of local sources in sync
with a set of remote sources.
It also allows the user to view information about changes to the repository
(such as what the exact change was, who made it, and when),
to view and compare information about different versions of a file,
and possibly to make local changes to files.
.Pp
As an example,
we'll look at a user wishing to track source changes to the
.Ox
tree,
maintaining a local (personal) copy of the source on their own machine.
The user will have to decide:
.Bl -bullet
.It
The CVS server to use.
There may be only one server or, for larger projects,
a number of mirror servers.
.It
Where the source module(s) will be kept on the local machine.
.El
.Pp
In our example, the
.Ox
project, there are a large number of servers to choose from.
It's generally better to use a server that is geographically closer
since this tends to be faster and less of a strain for the master server.
Utilities such as
.Xr ping 8
and
.Xr traceroute 8
can be used to decide which host will be best to use.
Secondly, the local repository has to be stored somewhere.
.Ox
uses
.Pa /usr/src
as the default location for its source tree
(the
.Dq src
module),
but this is largely arbitrary.
.Pp
This example shows how a user initially checks out a copy of the source tree
from local mirror anoncvs.nl.openbsd.org:
.Bd -literal -offset indent
$ cd /usr
$ cvs -d anoncvs@@anoncvs.nl.openbsd.org:/cvs checkout -P src
.Ed
.Pp
In this case it was first necessary to add ourselves to the
.Dq wsrc
group, since
.Pa /usr/src
is writable only by user
.Dq root
and/or group
.Dq wsrc .
The
.Fl d
option was necessary to tell
.Xr cvs 1
the location of the remote server.
Note the
.Dq :/cvs
string appended to the server's address:
the path to the repository
.Em must
be specified.
Finally the
.Ic checkout
command was used to obtain a copy of the module
.Dq src .
.Pp
Note that the above example simply checked out
.Ox Ns -current :
often different software versions are available:
use an identifier
.Pq Em tag
to specify which version to check out.
.Pp
Thereafter the user is free to manipulate the source tree
using the
.Xr cvs 1
utility itself.
For example, the following would update (sync) the local copy of
.Dq src
with the remote copy:
.Bd -literal -offset indent
$ cd /usr/src
$ cvs -d anoncvs@@anoncvs.nl.openbsd.org:/cvs update -Pd
.Ed
.Pp
General users may wish to use
.Xr cvs 1
simply to keep a copy of sources up to date with a development tree;
developers of software projects can also use
.Xr cvs 1
to make their own changes to a set of remote source files,
and to view changes made by other software developers.
.Pp
See
.Xr cvs 1
for more information on the different commands available.
See the entry for
.Pa $HOME/.cvsrc
in
.Xr cvs 5
for details on configuring
.Xr cvs 1
itself.
.Sh USING CVS TO MANAGE A REPOSITORY
Software developers may wish to use
.Xr cvs 1
to manage their own software projects.
Here we look at an example usage:
providing remote access to a small group of developers
working on project
.Dq foo ,
located in
.Pa /cvs/projects .
First of all a
.Em repository
has to be created.
A repository is just the location of the group of files
to be managed.
Within the repository,
files may be organised into collections of files,
called
.Em modules ,
which are just logical groupings of files.
.Pp
In our example, module
.Dq foo
is located at
.Pa /cvs/projects/foo
on machine
.Dq cvs.example.org .
Therefore
.Pa /cvs/projects
is both the root directory
.Pq Em $CVSROOT
of our repository and the name of our repository.
.Pp
If a set of source files already exist,
possibly already under revision control,
they can be added to a repository using the
.Xr cvs 1
command
.Ic import .
This is a useful way of adding modules to a pre-existing repository.
In our example we are starting from scratch,
so the repository has to be initialised using the
.Ic init
command:
.Bd -literal -offset indent
# cd /cvs/projects
# cvs -d /cvs/projects init
.Ed
.Pp
This will create a default administrative directory,
.Pa $CVSROOT/CVSROOT ,
filled with files concerned with the management of the repository.
.Pp
Thereafter, access will have to be arranged for
developers participating in the project.
This typically means providing SSH access via
.Xr sshd 8
for remote access,
unless the development network is local.
.Sh SEE ALSO
.Xr cvs 1 ,
.Xr rcs 1 ,
.Xr cvs 5 ,
.Xr sshd 8
.Sh HISTORY
The OpenCVS project is a
.Bx -licensed
rewrite of the original
Concurrent Versioning System written by Jean-Francois Brousseau.
The original CVS code was written in large parts by Dick Grune,
Brian Berliner, and Jeff Polk.
.Sh AUTHORS
.An Jean-Francois Brousseau
.Sh CAVEATS
This CVS implementation does not fully conform to the GNU CVS version.
In some cases, this was done explicitly because GNU CVS has inconsistencies
or ambiguous behaviour.
Some things have also been left out or modified to enhance the overall
security of the system.
.Pp
Among other things, support for the pserver connection mechanism has been
dropped because of security issues with the authentication mechanism.
@


1.14
log
@kill some first-person wording; help from jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: cvsintro.7,v 1.13 2007/05/31 19:20:09 jmc Exp $
d26 1
a26 1
.Dd $Mdocdate: May 31 2007 $
d225 3
a227 1
The OpenCVS project is a BSD-licensed rewrite of the original
@


1.13
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: cvsintro.7,v 1.12 2007/04/17 14:15:28 jmc Exp $
d26 1
a26 1
.Dd $Mdocdate$
d75 1
a75 1
It's generally better to use a server geographically closer to you
@


1.12
log
@cvsrc(5) is no more, so point to cvs(5) instead;
@
text
@d1 1
a1 1
.\"	$OpenBSD: cvsintro.7,v 1.11 2007/04/14 13:34:44 jmc Exp $
d26 1
a26 1
.Dd November 15, 2004
@


1.11
log
@put cvs(1)'s FILES, cvsignore(5), cvsrc(5), and cvswrappers(5)
into a single file, cvs(5), dedicated to cvs file formats;

this will trim cvs(1) a little, and stop us having a hundred cvs pages;
ok xsa
@
text
@d1 1
a1 1
.\"	$OpenBSD: cvsintro.7,v 1.10 2005/08/10 15:20:40 niallo Exp $
d153 4
a156 2
See also
.Xr cvsrc 5
@


1.10
log
@- pre-existent -> pre-existing

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: cvsintro.7,v 1.9 2005/08/10 15:08:04 xsa Exp $
d220 1
a220 3
.Xr cvsignore 5 ,
.Xr cvsrc 5 ,
.Xr cvswrappers 5 ,
@


1.9
log
@.Xr cvswrappers(5);
@
text
@d1 1
a1 1
.\"	$OpenBSD: cvsintro.7,v 1.8 2005/08/02 16:50:05 xsa Exp $
d197 1
a197 1
This is a useful way of adding modules to a pre-existent repository.
@


1.8
log
@.Xr cvsignore(5) here too;
@
text
@d1 1
a1 1
.\"	$OpenBSD: cvsintro.7,v 1.7 2005/06/07 09:11:12 xsa Exp $
d222 1
@


1.7
log
@add the -P option in the checkout example; ok jmc@@ joris@@.
@
text
@d1 1
a1 1
.\"	$OpenBSD: cvsintro.7,v 1.6 2005/04/12 20:11:07 xsa Exp $
d220 1
@


1.6
log
@cvsd(8) references cleanup; ok joris@@.
@
text
@d1 1
a1 1
.\"	$OpenBSD: cvsintro.7,v 1.5 2005/01/11 08:26:45 xsa Exp $
d96 1
a96 1
$ cvs -d anoncvs@@anoncvs.nl.openbsd.org:/cvs checkout src
@


1.5
log
@cvs -> CVS; jmc ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: cvsintro.7,v 1.4 2005/01/04 15:03:24 jmc Exp $
a160 2
and
.Xr cvsd 8
a210 22
After initialisation, the CVS daemon,
.Xr cvsd 8 ,
has to be started to provide a means of access and management
to the repository.
The following example shows the arguments required to start
.Xr cvsd 8
with our example repository,
.Dq projects :
.Pp
.Dl # cvsd -p -r /cvs/projects
.Pp
In the above example, the
.Fl p
option was also used to ensure there were no problems with file permissions.
.Pp
Configuration variables, such as the root directory of the CVS repository,
can be specified in the configuration file
.Xr cvsd.conf 5 .
See also
.Xr cvsd 8
for more information on running and configuring the CVS daemon.
.Pp
a219 1
.Xr cvsd.conf 5 ,
a220 1
.Xr cvsd 8 ,
@


1.4
log
@first cut at an introduction to CVS;
ok jfb@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: cvsintro.7,v 1.3 2004/12/08 19:37:28 xsa Exp $
d65 1
a65 1
The cvs server to use.
@


1.3
log
@.Xr cvs 1
@
text
@d1 1
a1 1
.\"	$OpenBSD: cvsintro.7,v 1.2 2004/12/02 22:38:30 jmc Exp $
d43 198
a240 13

.Sh CREATING A REPOSITORY
Before CVS can be used, a repository must be created.
A repository is simply a directory where the CVS daemon can store the version
information for the files that it will host.


.Sh CREATING A MODULE

.Sh PROPAGATING CHANGES

.Sh REMOVING FILES

a242 2
.Xr diff 1 ,
.Xr patch 1 ,
d244 4
a247 1
.Xr cvsd 8
@


1.2
log
@man tweaks;
discussed w/ jfb@@
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d57 1
@


1.1
log
@An introduction man page on how to use OpenCVS to manage CVS repositories
@
text
@a55 1
.Pp
a56 1
.Xr rcs 1 ,
d59 1
d61 7
a76 7
.Sh HISTORY
The OpenCVS project is a BSD-licensed rewrite of the original
Concurrent Versioning System written by Jean-Francois Brousseau.
The original CVS code was written in large parts by Dick Grune,
Brian Berliner and Jeff Polk.
.Sh AUTHORS
.An Jean-Francois Brousseau
@

