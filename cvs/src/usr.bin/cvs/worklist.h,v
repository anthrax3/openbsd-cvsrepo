head	1.8;
access;
symbols
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.8
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.4
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.6
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.7.0.20
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.18
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.14
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.12
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.10
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.8
	OPENBSD_5_0:1.7.0.6
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.4
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.2
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.6.0.12
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.14
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.10
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.8
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.6
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.4
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.2
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.5.0.2
	OPENBSD_4_0_BASE:1.5;
locks; strict;
comment	@ * @;


1.8
date	2015.01.16.06.40.07;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	Uu5nFG3wCl0LACBb;

1.7
date	2010.07.23.08.31.19;	author ray;	state Exp;
branches;
next	1.6;

1.6
date	2007.02.22.06.42.10;	author otto;	state Exp;
branches;
next	1.5;

1.5
date	2006.05.27.03.30.31;	author joris;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.10.19.49.44;	author joris;	state Exp;
branches;
next	1.3;

1.3
date	2006.03.15.18.24.43;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2006.03.15.13.30.48;	author niallo;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.08.20.18.41;	author joris;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@/*	$OpenBSD: worklist.h,v 1.7 2010/07/23 08:31:19 ray Exp $	*/
/*
 * Copyright (c) 2006 Joris Vink <joris@@openbsd.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef WORKLIST_H
#define WORKLIST_H

#include <sys/types.h>
#include <limits.h>

struct worklist {
	char				wkl_path[PATH_MAX];
	volatile SLIST_ENTRY(worklist)	wkl_list;
};

SLIST_HEAD(wklhead, worklist);

void worklist_add(const char *, struct wklhead *);
void worklist_run(struct wklhead *, void (*cb)(struct worklist *));
void worklist_clean(struct wklhead *, void (*cb)(struct worklist *));

void worklist_unlink(struct worklist *);

#endif
@


1.7
log
@Rename a bunch of variables and functions, removing the cvs_/rcs_
prefixes to reduce differences between cvs and rcs files.

"yes!" nicm
@
text
@d1 1
a1 1
/*	$OpenBSD: worklist.h,v 1.6 2007/02/22 06:42:10 otto Exp $	*/
d30 2
a31 1
#include <sys/param.h>
d34 1
a34 1
	char				wkl_path[MAXPATHLEN];
@


1.6
log
@general includes cleanup sweep. ok joris@@ niallo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: worklist.h,v 1.5 2006/05/27 03:30:31 joris Exp $	*/
d32 3
a34 3
struct cvs_worklist {
	char					wkl_path[MAXPATHLEN];
	volatile SLIST_ENTRY(cvs_worklist)	wkl_list;
d37 1
a37 1
SLIST_HEAD(cvs_wklhead, cvs_worklist);
d39 3
a41 3
void cvs_worklist_add(const char *, struct cvs_wklhead *);
void cvs_worklist_run(struct cvs_wklhead *, void (*cb)(struct cvs_worklist *));
void cvs_worklist_clean(struct cvs_wklhead *, void (*cb)(struct cvs_worklist *));
d43 1
a43 1
void cvs_worklist_unlink(struct cvs_worklist *);
@


1.5
log
@commit the new opencvs code, i have been hacking on
this for the past 2 weeks now and it should go in at
the start of the hackathon so others can help out.

this code is a lot safer, smarter, faster and best of
all it is actually doing what it is suppose to do!

basic checkout, update, status, diff and commit are
working in local mode only.
there is no support for any remote setups now.
@
text
@d1 1
a1 1
/*	$OpenBSD: worklist.h,v 1.4 2006/04/10 19:49:44 joris Exp $	*/
d29 2
@


1.4
log
@make sure we add the correct name mkstemp(3) creates for us
to the worklist of temporary files.

this way we definatly don't leave any files behind in /tmp.

tested & okay niallo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: worklist.h,v 1.3 2006/03/15 18:24:43 deraadt Exp $	*/
a41 4

#if defined(RCSPROG)
extern struct cvs_wklhead rcs_temp_files;
#endif
@


1.3
log
@no need for one of the volatile
@
text
@d1 1
a1 1
/*	$OpenBSD: worklist.h,v 1.2 2006/03/15 13:30:48 niallo Exp $	*/
d42 4
@


1.2
log
@- make cvs_worklist members volatile.

from deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: worklist.h,v 1.1 2006/03/08 20:18:41 joris Exp $	*/
d31 1
a31 1
	volatile char				wkl_path[MAXPATHLEN];
@


1.1
log
@add a worklist framework, which will be used for atomic operations on
files.

suggested and help by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d31 2
a32 2
	char				wkl_path[MAXPATHLEN];
	SLIST_ENTRY(cvs_worklist)	wkl_list;
@

