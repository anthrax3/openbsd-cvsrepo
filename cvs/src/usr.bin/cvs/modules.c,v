head	1.19;
access;
symbols
	OPENBSD_6_1:1.19.0.8
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.19.0.4
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.19.0.2
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.18.0.6
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.2
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.17.0.6
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.17.0.4
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.16.0.18
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.16
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.14
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.12
	OPENBSD_5_0:1.16.0.10
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.8
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.6
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.2
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.16.0.4
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.13.0.4
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.2
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.12.0.2
	OPENBSD_4_3_BASE:1.12;
locks; strict;
comment	@ * @;


1.19
date	2015.11.05.09.48.21;	author nicm;	state Exp;
branches;
next	1.18;
commitid	O6jeJ0TRmiewrqMI;

1.18
date	2015.01.16.06.40.07;	author deraadt;	state Exp;
branches;
next	1.17;
commitid	Uu5nFG3wCl0LACBb;

1.17
date	2014.01.08.13.23.55;	author okan;	state Exp;
branches;
next	1.16;

1.16
date	2009.03.29.19.17.26;	author joris;	state Exp;
branches;
next	1.15;

1.15
date	2009.03.26.22.54.37;	author joris;	state Exp;
branches;
next	1.14;

1.14
date	2009.03.25.21.50.33;	author joris;	state Exp;
branches;
next	1.13;

1.13
date	2008.03.08.21.58.34;	author tobias;	state Exp;
branches;
next	1.12;

1.12
date	2008.03.02.11.58.45;	author joris;	state Exp;
branches;
next	1.11;

1.11
date	2008.02.26.20.20.49;	author joris;	state Exp;
branches;
next	1.10;

1.10
date	2008.02.06.22.43.22;	author joris;	state Exp;
branches;
next	1.9;

1.9
date	2008.02.06.10.37.10;	author tobias;	state Exp;
branches;
next	1.8;

1.8
date	2008.02.04.22.36.40;	author joris;	state Exp;
branches;
next	1.7;

1.7
date	2008.02.04.19.08.32;	author joris;	state Exp;
branches;
next	1.6;

1.6
date	2008.02.03.23.34.41;	author joris;	state Exp;
branches;
next	1.5;

1.5
date	2008.02.03.22.53.04;	author joris;	state Exp;
branches;
next	1.4;

1.4
date	2008.02.03.22.50.28;	author joris;	state Exp;
branches;
next	1.3;

1.3
date	2008.02.03.17.20.14;	author joris;	state Exp;
branches;
next	1.2;

1.2
date	2008.02.02.19.35.39;	author joris;	state Exp;
branches;
next	1.1;

1.1
date	2008.02.02.19.32.28;	author joris;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Remove xfree(), like already done for RCS. From Michael W Bombardieri,
ok mmcc
@
text
@/*	$OpenBSD: modules.c,v 1.18 2015/01/16 06:40:07 deraadt Exp $	*/
/*
 * Copyright (c) 2008 Joris Vink <joris@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/dirent.h>
#include <sys/resource.h>

#include <ctype.h>
#include <stdlib.h>
#include <string.h>

#include "cvs.h"
#include "config.h"

TAILQ_HEAD(, module_info)	modules;

struct module_checkout *current_module = NULL;
char *module_repo_root = NULL;

void
cvs_parse_modules(void)
{
	cvs_log(LP_TRACE, "cvs_parse_modules()");

	TAILQ_INIT(&modules);
	cvs_read_config(CVS_PATH_MODULES, modules_parse_line);
}

void
cvs_modules_list(void)
{
	struct module_info *mi;

	TAILQ_FOREACH(mi, &modules, m_list)
		cvs_printf("%s\n", mi->mi_str);
}

int
modules_parse_line(char *line, int lineno)
{
	int flags;
	struct module_info *mi;
	char *bline, *val, *p, *module, *sp, *dp;
	char *dirname, fpath[PATH_MAX], *prog;

	prog = NULL;
	bline = xstrdup(line);

	flags = 0;
	p = val = line;
	while (!isspace((unsigned char)*p) && *p != '\0')
		p++;

	if (*p == '\0')
		goto bad;

	*(p++) = '\0';
	module = val;

	while (isspace((unsigned char)*p))
		p++;

	if (*p == '\0')
		goto bad;

	val = p;
	while (!isspace((unsigned char)*p) && *p != '\0')
		p++;

	while (val[0] == '-') {
		p = val;
		while (!isspace((unsigned char)*p) && *p != '\0')
			p++;

		if (*p == '\0')
			goto bad;

		*(p++) = '\0';

		switch (val[1]) {
		case 'a':
			if (flags & MODULE_TARGETDIR) {
				cvs_log(LP_NOTICE, "cannot use -a with -d");
				goto bad;
			}
			flags |= MODULE_ALIAS;
			break;
		case 'd':
			if (flags & MODULE_ALIAS) {
				cvs_log(LP_NOTICE, "cannot use -d with -a");
				goto bad;
			}
			flags |= MODULE_TARGETDIR;
			break;
		case 'l':
			flags |= MODULE_NORECURSE;
			break;
		case 'o':
			if (flags != 0 || prog != NULL) {
				cvs_log(LP_NOTICE,
				    "-o cannot be used with other flags");
				goto bad;
			}

			val = p;
			while (!isspace((unsigned char)*val) && *val != '\0')
				val++;
			if (*val == '\0')
				goto bad;

			*(val++) = '\0';
			prog = xstrdup(p);
			p = val;
			flags |= MODULE_RUN_ON_CHECKOUT;
			break;
		case 'i':
			if (flags != 0 || prog != NULL) {
				cvs_log(LP_NOTICE,
				    "-i cannot be used with other flags");
				goto bad;
			}

			if ((val = strchr(p, ' ' )) == NULL)
				goto bad;

			*(val++) = '\0';
			prog = xstrdup(p);
			p = val;
			flags |= MODULE_RUN_ON_COMMIT;
			break;
		default:
			goto bad;
		}

		val = p;
	}

	if (*val == '\0')
		goto bad;

	mi = xmalloc(sizeof(*mi));
	mi->mi_name = xstrdup(module);
	mi->mi_flags = flags;
	mi->mi_prog = prog;
	mi->mi_str = bline;

	dirname = NULL;
	RB_INIT(&(mi->mi_modules));
	RB_INIT(&(mi->mi_ignores));

	for (sp = val; *sp != '\0'; sp = dp) {
		dp = sp;
		while (!isspace((unsigned char)*dp) && *dp != '\0')
			dp++;
		if (*dp != '\0')
			*(dp++) = '\0';

		if (mi->mi_flags & MODULE_ALIAS) {
			if (sp[0] == '!') {
				if (strlen(sp) < 2)
					fatal("invalid ! pattern");
				cvs_file_get((sp + 1), 0,
				    &(mi->mi_ignores), 0);
			} else {
				cvs_file_get(sp, 0,
				    &(mi->mi_modules), 0);
			}
		} else if (sp == val) {
			dirname = sp;
		} else {
			if (sp[0] == '!') {
				if (strlen(sp) < 2)
					fatal("invalid ! pattern");

				sp++;
				(void)xsnprintf(fpath, sizeof(fpath), "%s/%s",
				    dirname, sp);
				cvs_file_get(fpath, 0,
				    &(mi->mi_ignores), 0);
			} else {
				(void)xsnprintf(fpath, sizeof(fpath), "%s/%s",
				    dirname, sp);
				cvs_file_get(fpath, 0,
				    &(mi->mi_modules), 0);
			}
		}
	}

	if (!(mi->mi_flags & MODULE_ALIAS) && RB_EMPTY(&(mi->mi_modules)))
		cvs_file_get(dirname, 0, &(mi->mi_modules), 0);

	TAILQ_INSERT_TAIL(&modules, mi, m_list);
	return (0);

bad:
	free(prog);
	free(bline);
	cvs_log(LP_NOTICE, "malformed line in CVSROOT/modules: %d", lineno);
	return (0);
}

struct module_checkout *
cvs_module_lookup(char *name)
{
	struct module_checkout *mc;
	struct module_info *mi;

	mc = xmalloc(sizeof(*mc));

	TAILQ_FOREACH(mi, &modules, m_list) {
		if (!strcmp(name, mi->mi_name)) {
			mc->mc_modules = mi->mi_modules;
			mc->mc_ignores = mi->mi_ignores;
			mc->mc_canfree = 0;
			mc->mc_name = mi->mi_name;
			mc->mc_flags = mi->mi_flags;
			mc->mc_prog = mi->mi_prog;
			return (mc);
		}
	}

	RB_INIT(&(mc->mc_modules));
	RB_INIT(&(mc->mc_ignores));
	cvs_file_get(name, 0, &(mc->mc_modules), 0);
	mc->mc_canfree = 1;
	mc->mc_name = name;
	mc->mc_flags = MODULE_ALIAS;
	mc->mc_prog = NULL;

	return (mc);
}
@


1.18
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: modules.c,v 1.17 2014/01/08 13:23:55 okan Exp $	*/
d210 2
a211 3
	if (prog != NULL)
		xfree(prog);
	xfree(bline);
@


1.17
log
@unsigned char for ctype. ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: modules.c,v 1.16 2009/03/29 19:17:26 joris Exp $	*/
d18 1
a18 1
#include <sys/param.h>
d58 1
a58 1
	char *dirname, fpath[MAXPATHLEN], *prog;
@


1.16
log
@printf() -> cvs_printf() so it works under server mode as well
spotted by Jonathan Armani <dbd@@asystant.net>
@
text
@d1 1
a1 1
/*	$OpenBSD: modules.c,v 1.15 2009/03/26 22:54:37 joris Exp $	*/
d65 1
a65 1
	while (!isspace(*p) && *p != '\0')
d74 1
a74 1
	while (isspace(*p))
d81 1
a81 1
	while (!isspace(*p) && *p != '\0')
d86 1
a86 1
		while (!isspace(*p) && *p != '\0')
d120 1
a120 1
			while (!isspace(*val) && *val != '\0')
d167 1
a167 1
		while (!isspace(*dp) && *dp != '\0')
@


1.15
log
@fix the way Attic is handled in our recursion code, so we
do not skip files or run over them twice.

also fixes -l and -r for checkout/update when a file in
Attic exists with that tag that in HEAD is a directory
in the normal repository like gnu/usr.bin/gcc/INSTALL.

as a bonus, we do not run fstat() twice per file or dir
anymore...

spotted by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: modules.c,v 1.14 2009/03/25 21:50:33 joris Exp $	*/
d49 1
a49 1
		printf("%s\n", mi->mi_str);
@


1.14
log
@switch our file and directory lists to RB trees (see tree(3)),
so we can benefit from faster lookup times while recursing.
@
text
@d1 1
a1 1
/*	$OpenBSD: modules.c,v 1.13 2008/03/08 21:58:34 tobias Exp $	*/
d176 2
a177 1
				cvs_file_get((sp + 1), 0, &(mi->mi_ignores));
d179 2
a180 1
				cvs_file_get(sp, 0, &(mi->mi_modules));
d192 2
a193 1
				cvs_file_get(fpath, 0, &(mi->mi_ignores));
d197 2
a198 1
				cvs_file_get(fpath, 0, &(mi->mi_modules));
d204 1
a204 1
		cvs_file_get(dirname, 0, &(mi->mi_modules));
d239 1
a239 1
	cvs_file_get(name, 0, &(mc->mc_modules));
@


1.13
log
@Set instead of logically ORing this variable.

ok joris
@
text
@d1 1
a1 1
/*	$OpenBSD: modules.c,v 1.12 2008/03/02 11:58:45 joris Exp $	*/
d162 3
a164 2
	TAILQ_INIT(&(mi->mi_modules));
	TAILQ_INIT(&(mi->mi_ignores));
d199 1
a199 1
	if (!(mi->mi_flags & MODULE_ALIAS) && TAILQ_EMPTY(&(mi->mi_modules)))
d233 2
a234 2
	TAILQ_INIT(&(mc->mc_modules));
	TAILQ_INIT(&(mc->mc_ignores));
@


1.12
log
@allow our parsing functions to stop parsing a config file at
any given time.

will come in handy for CVSROOT/loginfo and CVSROOT/commitinfo
@
text
@d1 1
a1 1
/*	$OpenBSD: modules.c,v 1.11 2008/02/26 20:20:49 joris Exp $	*/
d237 1
a237 1
	mc->mc_flags |= MODULE_ALIAS;
@


1.11
log
@plug memleaks
based upon a diff from Igor Zinovik
@
text
@d1 1
a1 1
/*	$OpenBSD: modules.c,v 1.10 2008/02/06 22:43:22 joris Exp $	*/
d52 1
a52 1
void
d202 1
a202 1
	return;
d209 1
@


1.10
log
@lets do co -c as well (list available modules) and do it in 1/6th of the
lines GNU cvs does it in, without actually fucking up on bad lines,
like gnucvs.

ok tobias@@
@
text
@d1 1
a1 1
/*	$OpenBSD: modules.c,v 1.9 2008/02/06 10:37:10 tobias Exp $	*/
d60 1
a83 1
	prog = NULL;
d98 1
a98 1
				return;
d105 1
a105 1
				return;
d116 1
a116 1
				return;
d134 1
a134 1
				return;
d205 3
a220 1
			mc = xmalloc(sizeof(*mc));
@


1.9
log
@Use isblank() instead of partial check for ' ' and/or '\t'.  Complies to
GNU cvs.

OK joris.
@
text
@d1 1
a1 1
/*	$OpenBSD: modules.c,v 1.8 2008/02/04 22:36:40 joris Exp $	*/
d44 9
d57 1
a57 1
	char *val, *p, *module, *sp, *dp;
d60 2
d145 2
d159 1
@


1.8
log
@CVSROOT/modules:

correct -i and -o usage

-i runs the program specified on commit
-o runs the program specified on checkout
@
text
@d1 1
a1 1
/*	$OpenBSD: modules.c,v 1.7 2008/02/04 19:08:32 joris Exp $	*/
d22 1
d53 1
a53 1
	while (*p != ' ' && *p != '\t' && *p != '\0')
d62 1
a62 1
	while ((*p == ' ' || *p == '\t') && *p != '\0')
d69 1
a69 1
	while (*p != ' ' && *p != '\t')
d75 1
a75 1
		while (*p != ' ' && *p != '\t' && *p != '\0')
d108 4
a111 1
			if ((val = strchr(p, ' ' )) == NULL)
d150 5
a154 3
	for (sp = val; sp != NULL; sp = dp) {
		dp = strchr(sp, ' ');
		if (dp != NULL)
@


1.7
log
@more CVSROOT/modules stuff:

- support for -i flag:
	Run "prog" on "cvs commit" from top-level of module.
- fix some memory leaks in modules.c
- pass the line number from cvs_read_config() towards the callbacks
  so its easier to print out where it's going wrong, if it ever does.

OK tobias@@
@
text
@d1 1
a1 1
/*	$OpenBSD: modules.c,v 1.6 2008/02/03 23:34:41 joris Exp $	*/
d99 15
@


1.6
log
@shuffle some stuff around so we dont end up doing the same things
twice in cvs_module_lookup() and checkout_check_directory();

allow single files to be ignored with ! as well;
@
text
@d1 1
a1 1
/*	$OpenBSD: modules.c,v 1.5 2008/02/03 22:53:04 joris Exp $	*/
d43 1
a43 1
modules_parse_line(char *line)
d46 1
a46 1
	struct cvs_filelist *fl;
d48 1
a48 2
	struct module_info *mi;
	char *dirname, fpath[MAXPATHLEN];
d52 1
a52 1
	while (*p != ' ' && *p != '\t')
d55 3
d61 1
a61 1
	while (*p == ' ' || *p == '\t')
d64 2
a65 4
	if (*p == '\0') {
		cvs_log(LP_NOTICE, "premature ending of CVSROOT/modules line");
		return;
	}
d71 1
a71 5
	if (*p == '\0') {
		cvs_log(LP_NOTICE, "premature ending of CVSROOT/modules line");
		return;
	}

d77 2
a78 5
		if (*p == '\0') {
			cvs_log(LP_NOTICE,
			    "misplaced option in CVSROOT/modules");
			return;
		}
d101 1
a101 1
			if (flags != 0) {
d106 7
d120 2
a121 3
	/* XXX: until we support it */
	if (flags & MODULE_RUN_ON_COMMIT)
		return;
d126 1
d167 4
d187 1
a187 1
			mc->mc_name = xstrdup(mi->mi_name);
d189 1
d198 1
a198 1
	mc->mc_name = xstrdup(name);
d200 1
@


1.5
log
@be more strict when checking ignore patterns;
kill unused var;
@
text
@d1 1
a1 1
/*	$OpenBSD: modules.c,v 1.4 2008/02/03 22:50:28 joris Exp $	*/
a165 3
	fl = TAILQ_FIRST(&(mi->mi_modules));
	mi->mi_repository = xstrdup(fl->file_path);

d183 1
a183 4
			if (mi->mi_flags & MODULE_ALIAS)
				mc->mc_wdir = xstrdup(mi->mi_repository);
			else
				mc->mc_wdir = xstrdup(mi->mi_name);
d193 1
a193 1
	mc->mc_wdir = xstrdup(name);
@


1.4
log
@more CVSROOT/module stuff:

- allow more then 1 module to be specified per definition
- respect the "!" sign which means: "hey ignore this dir when checking out"
- non alias definitions can now contain files

ok tobias@@
@
text
@d1 1
a1 1
/*	$OpenBSD: modules.c,v 1.3 2008/02/03 17:20:14 joris Exp $	*/
d46 1
a46 1
	struct cvs_filelist *fl, *nxt;
d137 3
a139 1
			if (sp[0] == '!')
d141 1
a141 1
			else
d143 1
d148 3
@


1.3
log
@better CVSROOT/module support, includes remote support and modules
that are not aliases (-a);

OK tobias@@
@
text
@d1 1
a1 1
/*	$OpenBSD: modules.c,v 1.2 2008/02/02 19:35:39 joris Exp $	*/
d46 2
a47 1
	char *val, *p, *module;
d49 1
d107 8
d120 4
a125 1
	mi->mi_repository = xstrdup(val);
d127 36
d177 3
a179 1
			mc->mc_repo = xstrdup(mi->mi_repository);
d189 4
a192 1
	mc->mc_repo = xstrdup(name);
@


1.2
log
@remove unneeded headers
@
text
@d1 1
a1 1
/*	$OpenBSD: modules.c,v 1.1 2008/02/02 19:32:28 joris Exp $	*/
d30 3
d89 15
d113 1
d117 1
a117 1
char *
d120 1
d123 2
d126 10
a135 2
		if (!strcmp(name, mi->mi_name))
			return (mi->mi_repository);
d138 5
a142 1
	return (name);
@


1.1
log
@initial CVSROOT/modules support, only does aliases at the moment (-a).
"modules.c, hurray!" xsa@@, ok tobias@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a21 2
#include <errno.h>
#include <limits.h>
@

