head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.36
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.2.0.38
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.34
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.30
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.32
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.24
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.28
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.26
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.22
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.20
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.18
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.16
	OPENBSD_5_0:1.2.0.14
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.12
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.10
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.6
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.8
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2;
locks; strict;
comment	@ * @;


1.2
date	2008.06.10.05.29.14;	author xsa;	state Exp;
branches;
next	1.1;

1.1
date	2008.06.10.01.00.35;	author joris;	state Exp;
branches;
next	;


desc
@@


1.2
log
@spacing.
@
text
@/*	$OpenBSD$	*/
/*
 * Copyright (c) 2008 Tobias Stoeckmann <tobias@@openbsd.org>
 * Copyright (c) 2008 Jonathan Armani <dbd@@asystant.net>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#define CVS_TRIGGER_COMMITINFO		1
#define CVS_TRIGGER_LOGINFO		2
#define CVS_TRIGGER_VERIFYMSG		3
#define CVS_TRIGGER_RCSINFO		4
#define CVS_TRIGGER_EDITINFO		5
#define CVS_TRIGGER_TAGINFO		6

struct trigger_line {
	char *line;
	TAILQ_ENTRY(trigger_line) flist;
};

TAILQ_HEAD(trigger_list, trigger_line);

struct file_info {
	char	*file_path;
	char	*file_wd;
	char	*crevstr;
	char	*nrevstr;
	char	*tag_new;
	char	*tag_old;
	char	*tag_op;
	char	 tag_type;
	TAILQ_ENTRY(file_info) flist;
};

TAILQ_HEAD(file_info_list, file_info);

int			 cvs_trigger_handle(int, char *, char *,
			     struct trigger_list *, struct file_info_list *);
struct trigger_list	*cvs_trigger_getlines(char *, char *);
void			 cvs_trigger_freelist(struct trigger_list *);
void			 cvs_trigger_freeinfo(struct file_info_list *);
void			 cvs_trigger_loginfo_header(BUF *, char *);
@


1.1
log
@New trigger framework that allows us to run the required scripts
defined in CVSROOT/commitinfo and CVSROOT/loginfo and so on.

This enables the use of log_accum2 and all that other nice stuff we like.

This was mostly written by Jonathan Armani with help from tobias@@ and myself.

ok tobias@@
@
text
@d27 2
a28 2
             char *line;
             TAILQ_ENTRY(trigger_line) flist;
d34 8
a41 8
	char *file_path;
	char *file_wd;
	char *crevstr;
	char *nrevstr;
	char *tag_new;
	char *tag_old;
	char *tag_op;
	char  tag_type;
d47 6
a52 8


int cvs_trigger_handle(int, char *, char *,struct trigger_list *,
    struct file_info_list *);
struct trigger_list * cvs_trigger_getlines(char *, char *);
void cvs_trigger_freelist(struct trigger_list *);
void cvs_trigger_freeinfo(struct file_info_list *);
void cvs_trigger_loginfo_header(BUF *, char *);
@

