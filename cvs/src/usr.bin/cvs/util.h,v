head	1.31;
access;
symbols
	OPENBSD_6_2:1.31.0.2
	OPENBSD_6_2_BASE:1.31
	OPENBSD_6_1:1.30.0.28
	OPENBSD_6_1_BASE:1.30
	OPENBSD_6_0:1.30.0.24
	OPENBSD_6_0_BASE:1.30
	OPENBSD_5_9:1.30.0.20
	OPENBSD_5_9_BASE:1.30
	OPENBSD_5_8:1.30.0.22
	OPENBSD_5_8_BASE:1.30
	OPENBSD_5_7:1.30.0.14
	OPENBSD_5_7_BASE:1.30
	OPENBSD_5_6:1.30.0.18
	OPENBSD_5_6_BASE:1.30
	OPENBSD_5_5:1.30.0.16
	OPENBSD_5_5_BASE:1.30
	OPENBSD_5_4:1.30.0.12
	OPENBSD_5_4_BASE:1.30
	OPENBSD_5_3:1.30.0.10
	OPENBSD_5_3_BASE:1.30
	OPENBSD_5_2:1.30.0.8
	OPENBSD_5_2_BASE:1.30
	OPENBSD_5_1_BASE:1.30
	OPENBSD_5_1:1.30.0.6
	OPENBSD_5_0:1.30.0.4
	OPENBSD_5_0_BASE:1.30
	OPENBSD_4_9:1.30.0.2
	OPENBSD_4_9_BASE:1.30
	OPENBSD_4_8:1.28.0.2
	OPENBSD_4_8_BASE:1.28
	OPENBSD_4_7:1.26.0.6
	OPENBSD_4_7_BASE:1.26
	OPENBSD_4_6:1.26.0.8
	OPENBSD_4_6_BASE:1.26
	OPENBSD_4_5:1.26.0.4
	OPENBSD_4_5_BASE:1.26
	OPENBSD_4_4:1.26.0.2
	OPENBSD_4_4_BASE:1.26
	OPENBSD_4_3:1.24.0.2
	OPENBSD_4_3_BASE:1.24
	OPENBSD_4_2:1.20.0.2
	OPENBSD_4_2_BASE:1.20
	OPENBSD_4_1:1.17.0.2
	OPENBSD_4_1_BASE:1.17
	OPENBSD_4_0:1.10.0.2
	OPENBSD_4_0_BASE:1.10;
locks; strict;
comment	@ * @;


1.31
date	2017.08.28.19.33.20;	author otto;	state Exp;
branches;
next	1.30;
commitid	pt4iCZKa4LhAa1TL;

1.30
date	2010.11.11.21.00.59;	author nicm;	state Exp;
branches;
next	1.29;

1.29
date	2010.09.23.18.10.16;	author nicm;	state Exp;
branches;
next	1.28;

1.28
date	2010.07.23.21.46.05;	author ray;	state Exp;
branches;
next	1.27;

1.27
date	2010.07.23.08.31.19;	author ray;	state Exp;
branches;
next	1.26;

1.26
date	2008.06.12.07.16.14;	author joris;	state Exp;
branches;
next	1.25;

1.25
date	2008.06.10.01.00.35;	author joris;	state Exp;
branches;
next	1.24;

1.24
date	2008.02.04.19.08.32;	author joris;	state Exp;
branches;
next	1.23;

1.23
date	2008.02.04.18.23.58;	author tobias;	state Exp;
branches;
next	1.22;

1.22
date	2007.09.13.13.10.57;	author tobias;	state Exp;
branches;
next	1.21;

1.21
date	2007.09.04.19.07.04;	author tobias;	state Exp;
branches;
next	1.20;

1.20
date	2007.07.03.13.22.43;	author joris;	state Exp;
branches;
next	1.19;

1.19
date	2007.05.09.21.19.28;	author xsa;	state Exp;
branches;
next	1.18;

1.18
date	2007.04.20.08.36.00;	author xsa;	state Exp;
branches;
next	1.17;

1.17
date	2007.02.19.11.40.00;	author otto;	state Exp;
branches;
next	1.16;

1.16
date	2007.02.17.18.23.43;	author xsa;	state Exp;
branches;
next	1.15;

1.15
date	2007.01.26.11.19.44;	author joris;	state Exp;
branches;
next	1.14;

1.14
date	2007.01.25.18.35.30;	author niallo;	state Exp;
branches;
next	1.13;

1.13
date	2007.01.11.17.44.18;	author niallo;	state Exp;
branches;
next	1.12;

1.12
date	2007.01.07.01.53.12;	author joris;	state Exp;
branches;
next	1.11;

1.11
date	2007.01.03.14.08.09;	author xsa;	state Exp;
branches;
next	1.10;

1.10
date	2006.06.14.15.14.47;	author xsa;	state Exp;
branches;
next	1.9;

1.9
date	2006.05.28.21.38.30;	author joris;	state Exp;
branches;
next	1.8;

1.8
date	2006.05.28.21.34.37;	author joris;	state Exp;
branches;
next	1.7;

1.7
date	2006.05.28.17.25.18;	author joris;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.27.16.18.23;	author joris;	state Exp;
branches;
next	1.5;

1.5
date	2006.05.27.03.30.31;	author joris;	state Exp;
branches;
next	1.4;

1.4
date	2006.03.27.06.13.51;	author pat;	state Exp;
branches;
next	1.3;

1.3
date	2006.03.17.13.40.41;	author niallo;	state Exp;
branches;
next	1.2;

1.2
date	2006.03.17.08.51.45;	author xsa;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.15.19.59.36;	author niallo;	state Exp;
branches;
next	;


desc
@@


1.31
log
@fix const related warnings; ok millert@@
@
text
@/*	$OpenBSD: util.h,v 1.30 2010/11/11 21:00:59 nicm Exp $	*/
/*
 * Copyright (c) 2006 Niall O'Higgins <niallo@@openbsd.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef UTIL_H
#define UTIL_H

void	  cvs_get_repository_path(const char *, char *, size_t);
void	  cvs_get_repository_name(const char *, char *, size_t);
void	  cvs_modetostr(mode_t, char *, size_t);
void	  cvs_strtomode(const char *, mode_t *);
void	  cvs_mkadmin(const char *, const char *, const char *, char *, char *);
void	  cvs_mkpath(const char *, char *);
void	  cvs_mkdir(const char *, mode_t);
int	  cvs_getargv(const char *, char **, int);
int	  cvs_chdir(const char *, int);
int	  cvs_rename(const char *, const char *);
int	  cvs_unlink(const char *);
int	  cvs_rmdir(const char *);
char	**cvs_makeargv(const char *, int *);
void	  cvs_freeargv(char **, int);
int	  cvs_exec(char *, char *, int);
u_int	  cvs_revision_select(RCSFILE *, char *);

struct rcs_line {
	struct rcs_delta	*l_delta;
	u_char			*l_line;
	size_t			 l_len;
	int			 l_lineno;
	int			 l_lineno_orig;
	int			 l_needsfree;
	TAILQ_ENTRY(rcs_line)	 l_list;
};

TAILQ_HEAD(tqh, rcs_line);

struct rcs_lines {
	int		l_nblines;
	struct tqh	l_lines;
};

struct cvs_argvector {
	char *str;
	char **argv;
};

struct rcs_lines	*cvs_splitlines(u_char *, size_t);
void			cvs_freelines(struct rcs_lines *);
struct cvs_argvector	*cvs_strsplit(char *, const char *);
void			cvs_argv_destroy(struct cvs_argvector *);
int			cvs_yesno(void);

#endif	/* UTIL_H */
@


1.30
log
@Nuke dead assignments and a dead function, from Michael W Bombardieri
using lint.
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.29 2010/09/23 18:10:16 nicm Exp $	*/
d44 1
a44 1
int	  cvs_exec(char *, const char *, int);
@


1.29
log
@Add cvs_mkdir() for recursive directory creation on import, based on a
diff from Michael W Bombardieri in PR 6398.

tested by & ok jasper
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.28 2010/07/23 21:46:05 ray Exp $	*/
a36 1
int	  cvs_cksum(const char *, char *, size_t);
@


1.28
log
@Reduce variable/function name and whitespace differences between
cvs/rcs.

OK xsa zinovik
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.27 2010/07/23 08:31:19 ray Exp $	*/
d36 1
@


1.27
log
@Rename a bunch of variables and functions, removing the cvs_/rcs_
prefixes to reduce differences between cvs and rcs files.

"yes!" nicm
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.26 2008/06/12 07:16:14 joris Exp $	*/
d47 1
a47 1
struct cvs_line {
d54 1
a54 1
	TAILQ_ENTRY(cvs_line)	 l_list;
d57 1
a57 1
TAILQ_HEAD(tqh, cvs_line);
d59 1
a59 1
struct cvs_lines {
d69 2
a70 2
struct cvs_lines	*cvs_splitlines(u_char *, size_t);
void			cvs_freelines(struct cvs_lines *);
@


1.26
log
@completely kill the need for TMP_DIR when running checkout,
which gives us better performance among other things.

this is however disabled in a few cases:
1) whenever you run checkout over an existing tree (which acts as update)
2) whenever you specify -d or a module alias

we're planning on enabling this behaviour for case 2 in the future.

anoncvs sysadmins now love us even more.

ok tobias@@
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.25 2008/06/10 01:00:35 joris Exp $	*/
d57 1
a57 1
TAILQ_HEAD(cvs_tqh, cvs_line);
d61 1
a61 1
	struct cvs_tqh	l_lines;
@


1.25
log
@New trigger framework that allows us to run the required scripts
defined in CVSROOT/commitinfo and CVSROOT/loginfo and so on.

This enables the use of log_accum2 and all that other nice stuff we like.

This was mostly written by Jonathan Armani with help from tobias@@ and myself.

ok tobias@@
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.24 2008/02/04 19:08:32 joris Exp $	*/
d44 1
a44 1
int	  cvs_exec(const char *, const char *, int);
@


1.24
log
@more CVSROOT/modules stuff:

- support for -i flag:
	Run "prog" on "cvs commit" from top-level of module.
- fix some memory leaks in modules.c
- pass the line number from cvs_read_config() towards the callbacks
  so its easier to print out where it's going wrong, if it ever does.

OK tobias@@
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.23 2008/02/04 18:23:58 tobias Exp $	*/
d44 1
a44 1
void	  cvs_exec(const char *);
@


1.23
log
@Stripped off 'nb', which was (or was supposed to be) used to distinguish
between a named branch and a revision number supplied by -r.  This can
be done easier in cvs_write_tagfile directly.

OK joris@@
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.22 2007/09/13 13:10:57 tobias Exp $	*/
d44 1
@


1.22
log
@Added annotate support for local and remote repositories. Behaves like
GNU cvs but is a little faster.

OK joris@@, ray@@, xsa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.21 2007/09/04 19:07:04 tobias Exp $	*/
d34 1
a34 2
void	  cvs_mkadmin(const char *, const char *, const char *,
	      char *, char *, int);
@


1.21
log
@Removed dead code.

OK joris@@, ray@@
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.20 2007/07/03 13:22:43 joris Exp $	*/
d48 1
d52 1
@


1.20
log
@Rework the way opencvs works in relation to files in the Attic/:

Previously, files in the 'Attic/' were linked into our filelist as being
'Attic/filename,v' this caused unneeded stress on certain functions
like cvs_file_classify() who had to do pointer voodoo to split out
the 'Attic/' part and do other very weird stuff to normalize the pathname
of these files.

Instead, we handle these files early in the start when we
build the fileslist in cvs_repository_getdir(). When encountering
the 'Attic/' directory, we recurse in it if required but instead of
using the 'Attic/' directory component as our base directory we stick
with the directory name where 'Attic/' resides in, resulting in the
correct filename while maintaining the correct RCSpath for the file.

This made the following things a lot easier:
(and in most cases actually fixed the below points)

- status with files in Attic/.
- checking out HEAD repositories with files in Attic/.
- checking out repositories with -rTAG.
- updating with -rTAG.

and as an added bonus the following now also works:

- correctly creating CVS/Tag in both local and remote mode thus
  allowing update/status/and more to work correctly with the tagged tree.
  (thanks to the correct handling of -rTAG cases).
- resetting tags with opencvs -A properly works too now.

This is a major step forward into the usability
of OpenCVS when it comes to maintaining multiple tagged trees, the next
logical step would be to fix commiting to branches.

enjoy you -stable cowards.

tested by myself, xsa, niallo and ckuethe
thanks guys!
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.19 2007/05/09 21:19:28 xsa Exp $	*/
a66 3
BUF			*cvs_patchfile(u_char *, size_t, u_char *,
			    size_t, int (*p)(struct cvs_lines *,
			    struct cvs_lines *));
@


1.19
log
@cvs_splitpath() isn't used anymore; from Tobias Stoeckmann.
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.18 2007/04/20 08:36:00 xsa Exp $	*/
d36 1
a36 1
void	  cvs_mkpath(const char *);
@


1.18
log
@- correct signal handling and process waiting for the EDITOR support code
(From ray's code in sendbug(1))
- nuke cvs_exec() as it is not used anymore

Prompted by deraadt@@ a few weeks ago.
OK ray@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.17 2007/02/19 11:40:00 otto Exp $	*/
a33 1
void	  cvs_splitpath(const char *, char *, size_t, char **);
@


1.17
log
@Fix const inconsistencies, void pointer artithmetic and a few other
things. now gcc -Wall and lint are more happy. ok joris@@ xsa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.16 2007/02/17 18:23:43 xsa Exp $	*/
a38 1
int	  cvs_exec(int, char **);
@


1.16
log
@cvs_path_cat() removal since we can now easily handle that
functionality w/ xsnprintf(); Initial diff started by thib@@.
OK thib@@ joris@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.15 2007/01/26 11:19:44 joris Exp $	*/
d50 1
a50 1
	char			*l_line;
d69 1
a69 1
BUF			*cvs_patchfile(const u_char *, size_t, const u_char *,
d72 1
a72 1
struct cvs_lines	*cvs_splitlines(const u_char *, size_t);
@


1.15
log
@Handle CVS/Entries and file timestamp correctly so we do
not mistakenly see a file as Modified while it is not.

As a result, we can remove the very hackish cvs_hack_time() and
GNU cvs and opencvs should almost get along now.

lotsa help and okay The otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.14 2007/01/25 18:35:30 niallo Exp $	*/
a46 1
size_t	  cvs_path_cat(const char *, const char *, char *, size_t);
@


1.14
log
@plug a memleak in keyword expansion.

ok joris@@
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.13 2007/01/11 17:44:18 niallo Exp $	*/
a47 1
time_t	  cvs_hack_time(time_t, int);
@


1.13
log
@rework opencvs so that we can deal with binary files.  previously we assumed all files were ascii,
which broke things in real-world usage.  now a checkout of src should work, albeit using lots of
memory and cpu.  fixing this is the next step.

testing by many.
ok & some input joris@@
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.12 2007/01/07 01:53:12 joris Exp $	*/
d55 1
@


1.12
log
@zap-o-matic 2007:
- zap unused argument to cvs_exec()
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.11 2007/01/03 14:08:09 xsa Exp $	*/
d53 1
a61 1
	char		*l_data;
d70 4
a73 3
BUF			*cvs_patchfile(const char *, const char *,
			    int (*p)(struct cvs_lines *, struct cvs_lines *));
struct cvs_lines	*cvs_splitlines(const char *);
@


1.11
log
@bring back cvs_yesno() as is it going to be used pretty soon now.
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.10 2006/06/14 15:14:47 xsa Exp $	*/
d39 1
a39 1
int	  cvs_exec(int, char **, int []);
@


1.10
log
@handle existing CVS/Tag file when adding new directories. OK joris@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.9 2006/05/28 21:38:30 joris Exp $	*/
d76 1
@


1.9
log
@make it look a little less chaotic.
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.8 2006/05/28 21:34:37 joris Exp $	*/
d35 2
a36 1
void	  cvs_mkadmin(const char *, const char *, const char *);
@


1.8
log
@add code which allows us to select revisions based upon
a string given by the user on the command line, much like
rcs_revision_select in OpenRCS.

this will be usefull for some commands.
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.7 2006/05/28 17:25:18 joris Exp $	*/
a45 2
void	  cvs_write_tagfile(char *, char *, int);
void	  cvs_parse_tagfile(char **, char **, int *);
a47 1

a73 1

@


1.7
log
@several fixes to the file api:
- default to CVS_FILE when something is totally unknown
- cvs_get_repository_path() now returns the full repository path for
  the given argument.
- cvs_get_repository_name() returns the contents of CVS/Repository
  to the caller.
- allow command callbacks to specify if our recursion code needs
  to skip the directory or not.
- when checking for a admin directory, make sure it is in fact
  a directory. if it is not we dont want to recurse inside.
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.6 2006/05/27 16:18:23 joris Exp $	*/
d50 2
@


1.6
log
@boogie cvs_yesno() down the removal hatch, it is not used.
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.5 2006/05/27 03:30:31 joris Exp $	*/
d30 2
a31 1
void	  cvs_get_repo(const char *, char *, size_t);
@


1.5
log
@commit the new opencvs code, i have been hacking on
this for the past 2 weeks now and it should go in at
the start of the hackathon so others can help out.

this code is a lot safer, smarter, faster and best of
all it is actually doing what it is suppose to do!

basic checkout, update, status, diff and commit are
working in local mode only.
there is no support for any remote setups now.
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.4 2006/03/27 06:13:51 pat Exp $	*/
a72 1
int			cvs_yesno(void);
@


1.4
log
@Plug a memory leak for all cvs_strsplit call sites; ok xsa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.3 2006/03/17 13:40:41 niallo Exp $	*/
d30 1
a30 4
#if !defined(RCSPROG)


int	  cvs_readrepo(const char *, char *, size_t);
d34 2
a35 2
int	  cvs_mkadmin(const char *, const char *, const char *, char *,
		char *, int);
a42 2
int	  cvs_create_dir(const char *, int, char *, char *);
char	 *cvs_rcs_getpath(CVSFILE *, char *, size_t);
a48 3

#endif	/* !RCSPROG */

@


1.3
log
@- Lint says cvs_hacktime() is not used in rcs, so move it into !RCSPROG.

ok xsa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.2 2006/03/17 08:51:45 xsa Exp $	*/
d72 4
d82 3
a84 1
char			**cvs_strsplit(char *, const char *);
@


1.2
log
@rlog_strsplit() -> cvs_strsplit() and move it to util.c so it can be reused
by `cvs log' and some other RCS utilities. "Looks good" ray@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.1 2006/03/15 19:59:36 niallo Exp $	*/
d53 1
a56 1
time_t	  cvs_hack_time(time_t, int);
@


1.1
log
@- add util.h, reorganising a bunch of things and exposing cvs_yesno()
function to be used by rcs.
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.69 2006/01/27 12:56:28 xsa Exp $	*/
d78 1
d80 1
a80 1
#endif
@

