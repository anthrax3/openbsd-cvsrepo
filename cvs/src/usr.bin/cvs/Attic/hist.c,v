head	1.15;
access;
symbols
	OPENBSD_3_9:1.13.0.2
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.10.0.2
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	OpenCVS_0_1:1.1.1.1
	OpenCVS:1.1.1;
locks; strict;
comment	@ * @;


1.15
date	2006.05.27.03.30.30;	author joris;	state dead;
branches;
next	1.14;

1.14
date	2006.04.05.01.38.55;	author ray;	state Exp;
branches;
next	1.13;

1.13
date	2006.01.02.08.11.56;	author xsa;	state Exp;
branches;
next	1.12;

1.12
date	2005.12.10.20.27.45;	author joris;	state Exp;
branches;
next	1.11;

1.11
date	2005.09.05.19.45.42;	author xsa;	state Exp;
branches;
next	1.10;

1.10
date	2005.08.14.19.49.18;	author xsa;	state Exp;
branches;
next	1.9;

1.9
date	2005.08.02.20.05.42;	author xsa;	state Exp;
branches;
next	1.8;

1.8
date	2005.07.29.17.04.42;	author xsa;	state Exp;
branches;
next	1.7;

1.7
date	2005.07.25.12.05.43;	author xsa;	state Exp;
branches;
next	1.6;

1.6
date	2005.07.21.11.42.24;	author xsa;	state Exp;
branches;
next	1.5;

1.5
date	2005.05.31.08.58.48;	author xsa;	state Exp;
branches;
next	1.4;

1.4
date	2005.04.16.17.50.08;	author joris;	state Exp;
branches;
next	1.3;

1.3
date	2004.12.07.17.10.56;	author tedu;	state Exp;
branches;
next	1.2;

1.2
date	2004.12.06.21.03.12;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2004.07.13.22.02.40;	author jfb;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.07.13.22.02.40;	author jfb;	state Exp;
branches;
next	;


desc
@@


1.15
log
@commit the new opencvs code, i have been hacking on
this for the past 2 weeks now and it should go in at
the start of the hackathon so others can help out.

this code is a lot safer, smarter, faster and best of
all it is actually doing what it is suppose to do!

basic checkout, update, status, diff and commit are
working in local mode only.
there is no support for any remote setups now.
@
text
@/*	$OpenBSD: hist.c,v 1.14 2006/04/05 01:38:55 ray Exp $	*/
/*
 * Copyright (c) 2004 Jean-Francois Brousseau <jfb@@openbsd.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include "includes.h"

#include "cvs.h"
#include "log.h"

#define CVS_HIST_BUFSIZE	8192



static int	cvs_hist_fillbuf(CVSHIST *);
static int	cvs_hist_fmt(const struct cvs_hent *, char *, size_t);


/*
 * cvs_hist_open()
 *
 * Open a CVS history file.
 * Returns the number of entries in the file on success, or -1 on error.
 */
CVSHIST *
cvs_hist_open(const char *path)
{
	CVSHIST *histp;

	histp = xcalloc(1, sizeof(*histp));

	histp->chf_buf = xmalloc((size_t)CVS_HIST_BUFSIZE);
	histp->chf_blen = CVS_HIST_BUFSIZE;
	histp->chf_off = 0;

	histp->chf_sindex = 0;
	histp->chf_cindex = 0;
	histp->chf_nbhent = 0;

	cvs_log(LP_TRACE, "cvs_hist_open(%s)", path);

	histp->chf_fd = open(path, O_RDONLY, 0);
	if (histp->chf_fd == -1) {
		cvs_log(LP_ERRNO,
		    "failed to open CVS history file `%s'", path);
		cvs_nolog = 1;
		xfree(histp->chf_buf);
		xfree(histp);
		return (NULL);
	}

	cvs_hist_fillbuf(histp);

	return (histp);
}


/*
 * cvs_hist_close()
 *
 * Close the CVS history file previously opened by a call to cvs_hist_open()
 */
void
cvs_hist_close(CVSHIST *histp)
{
	if (histp->chf_fd >= 0)
		(void)close(histp->chf_fd);
	xfree(histp->chf_buf);
	xfree(histp);
}


/*
 * cvs_hist_getnext()
 *
 * Get the next entry from the history file <histp>.  Whenever using this
 * function, it should be assumed that the return value of the previous call
 * to cvs_hist_getnext() is now invalid.
 * Returns the next entry from the file on success, or NULL on failure or if
 * no entries are left.
 */
struct cvs_hent *
cvs_hist_getnext(CVSHIST *histp)
{
	if (histp->chf_cindex == histp->chf_nbhent) {
		/* no more cached entries, refill buf and parse */
		cvs_hist_fillbuf(histp);
		cvs_hist_parse(histp);
	}
	return (&(histp->chf_hent[histp->chf_cindex++]));
}


/*
 * cvs_hist_append()
 *
 * Append a history entry to the history file <histp>.  The file offset is
 * first set to the end of the file.
 * Returns 0 on success, or -1 on failure.
 */
int
cvs_hist_append(CVSHIST *histp, struct cvs_hent *hentp)
{
	char hbuf[128];

	if (cvs_nolog == 1)
		return (0);

	if (cvs_hist_fmt(hentp, hbuf, sizeof(hbuf)) < 0) {
		cvs_log(LP_ERR, "failed to append CVS history entry");
		return (-1);
	}

	/* position ourself at the end */
	if (lseek(histp->chf_fd, (off_t)0, SEEK_END) == -1) {
		cvs_log(LP_ERRNO, "failed to seek to end of CVS history file");
		return (-1);
	}

	if (write(histp->chf_fd, hbuf, strlen(hbuf)) == -1) {
		cvs_log(LP_ERR, "failed to write CVS history entry to file");
		return (-1);
	}

	return (0);
}



/*
 * cvs_hist_fillbuf()
 *
 * Fill the history file's internal buffer for future parsing.
 */
static int
cvs_hist_fillbuf(CVSHIST *histp)
{
	ssize_t ret;

	/* reposition ourself in case we're missing the start of a record */
	if (lseek(histp->chf_fd, histp->chf_off, SEEK_SET) == -1) {
		cvs_log(LP_ERRNO, "failed to seek in CVS history file");
		return (-1);
	}
	ret = read(histp->chf_fd, histp->chf_buf, histp->chf_blen);
	if (ret == -1) {
		cvs_log(LP_ERRNO, "failed to buffer CVS history file");
		return (-1);
	} else {
		histp->chf_bused = (size_t)ret;
	}

	return (ret);
}


/*
 * cvs_hist_parse()
 *
 * Parse the current contents of the internal buffer of <histp> and regenerate
 * the buffered history entries.
 * Returns the number of entries parsed on success, or -1 on failure.
 */
int
cvs_hist_parse(CVSHIST *histp)
{
	u_int i, fld;
	char *fields[CVS_HIST_NBFLD], *sp, *bep, *ep, *errp;

	sp = histp->chf_buf;
	bep = histp->chf_buf + histp->chf_bused - 1;

	for (i = 0; i < CVS_HIST_CACHE; i++) {
		ep = memchr(sp, '\n', bep - sp);
		if (ep == NULL) {
			/*
			 * No record or incomplete record left to parse,
			 * so adjust the next read offset in consequence.
			 */
			histp->chf_off += (off_t)(sp - histp->chf_buf);
			break;
		} else if (ep == bep) {
			histp->chf_off += (off_t)histp->chf_bused;
		}
		*(ep++) = '\0';

		printf("hist(%s)\n", sp);

		histp->chf_hent[i].ch_event = *sp++;

		/* split the record in fields */
		fields[0] = sp;

		fld = 1;
		while (sp < ep) {
			if (*sp == '|') {
				*sp = '\0';
				fields[fld++] = sp + 1;
			}
			if (fld == CVS_HIST_NBFLD)
				break;
			sp++;
		}
#if 0
		for (fld = 0; fld < CVS_HIST_NBFLD; fld++)
			printf("fields[%u] = `%s'\n", fld, fields[fld]);
#endif

		histp->chf_hent[i].ch_date = (time_t)strtol(fields[0],
		    &errp, 16);
		if (*errp != '\0') {
			cvs_log(LP_ERR,
			    "parse error in date field of CVS history entry");
			continue;
		}

		histp->chf_hent[i].ch_user = fields[1];
		histp->chf_hent[i].ch_curdir = fields[2];
		histp->chf_hent[i].ch_repo = fields[3];
		histp->chf_hent[i].ch_rev = rcsnum_alloc();
		rcsnum_aton(fields[4], NULL, histp->chf_hent[i].ch_rev);
		histp->chf_hent[i].ch_arg = fields[5];
		sp = ep;
	}

	/* update indexes */
	histp->chf_sindex += histp->chf_nbhent;
	histp->chf_nbhent = i;
	histp->chf_cindex = 0;


	return (i);
}


/*
 * cvs_hist_fmt()
 *
 * Format the contents of the CVS history entry <ent> into the format used in
 * the CVS `history' file, and store the resulting string in <buf>, which is
 * of size <blen>.
 */
static int
cvs_hist_fmt(const struct cvs_hent *ent, char *buf, size_t blen)
{
	char numbuf[64];
	int len;

	if (rcsnum_tostr(ent->ch_rev, numbuf, sizeof(numbuf)) == NULL)
		return (-1);

	len = snprintf(buf, blen, "%c%8x|%s|%s|%s|%s|%s",
	    ent->ch_event, ent->ch_date, ent->ch_user, ent->ch_curdir,
	    ent->ch_repo, numbuf, ent->ch_arg);
	if (len >= (int)blen || len == -1)
		return (-1);
	return (len);
}
@


1.14
log
@Use variable names for sizeof, remove casts in front of xmalloc,
use xcalloc and xstrdup where appropriate, and other stuff.

OK joris@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hist.c,v 1.13 2006/01/02 08:11:56 xsa Exp $	*/
@


1.13
log
@#include's cleanup; ok joris@@ niallo@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: hist.c,v 1.12 2005/12/10 20:27:45 joris Exp $	*/
d51 1
a51 2
	histp = (CVSHIST *)xmalloc(sizeof(*histp));
	memset(histp, 0, sizeof(*histp));
d53 1
a53 1
	histp->chf_buf = (char *)xmalloc((size_t)CVS_HIST_BUFSIZE);
@


1.12
log
@switch to xmalloc stuff, me and xsa@@ agreed on this a long
time ago, but we were being held back by jfb. too bad for him.

next step is to use fatal() through out the code for unrecoverable
errors instead of trying to be all nice and fluffy and reach main() again.

ok niallo@@ and xsa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hist.c,v 1.11 2005/09/05 19:45:42 xsa Exp $	*/
d27 1
a27 7
#include <sys/stat.h>

#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
@


1.11
log
@add trace message (-t);
@
text
@d1 1
a1 1
/*	$OpenBSD: hist.c,v 1.10 2005/08/14 19:49:18 xsa Exp $	*/
d57 1
a57 5
	histp = (CVSHIST *)malloc(sizeof(*histp));
	if (histp == NULL) {
		cvs_log(LP_ERRNO, "failed to allocate CVS history");
		return (NULL);
	}
d60 1
a60 7
	histp->chf_buf = (char *)malloc((size_t)CVS_HIST_BUFSIZE);
	if (histp->chf_buf == NULL) {
		cvs_log(LP_ERRNO,
		    "failed to allocate CVS history parse buffer");
		free(histp);
		return (NULL);
	}
d75 2
a76 2
		free(histp->chf_buf);
		free(histp);
d96 2
a97 2
	free(histp->chf_buf);
	free(histp);
@


1.10
log
@missing casts; ok joris
@
text
@d1 1
a1 1
/*	$OpenBSD: hist.c,v 1.9 2005/08/02 20:05:42 xsa Exp $	*/
d77 2
@


1.9
log
@handle -l global option; ok jfb@@ joris@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: hist.c,v 1.8 2005/07/29 17:04:42 xsa Exp $	*/
d64 1
a64 1
	histp->chf_buf = (char *)malloc(CVS_HIST_BUFSIZE);
@


1.8
log
@minor KNF;
@
text
@d1 1
a1 1
/*	$OpenBSD: hist.c,v 1.7 2005/07/25 12:05:43 xsa Exp $	*/
d82 1
d141 3
@


1.7
log
@KNF;
@
text
@d1 1
a1 1
/*	$OpenBSD: hist.c,v 1.6 2005/07/21 11:42:24 xsa Exp $	*/
d52 1
a52 1
CVSHIST*
d117 1
a117 1
struct cvs_hent*
@


1.6
log
@<sys/param.h> is already included in "cvs.h", no need to duplicate;
@
text
@d1 1
a1 1
/*	$OpenBSD: hist.c,v 1.5 2005/05/31 08:58:48 xsa Exp $	*/
d38 1
a38 1
#define CVS_HIST_BUFSIZE    8192
d42 2
a43 2
static int  cvs_hist_fillbuf  (CVSHIST *);
static int  cvs_hist_fmt      (const struct cvs_hent *, char *, size_t);
@


1.5
log
@headers ordering (alphabetically) and cleanup, from mbalmer@@ and myself;
@
text
@d1 1
a1 1
/*	$OpenBSD: hist.c,v 1.4 2005/04/16 17:50:08 joris Exp $	*/
a26 1
#include <sys/param.h>
@


1.4
log
@

check snprintf() return value;

from deraadt@@ small change by me
@
text
@d1 1
a1 1
/*	$OpenBSD: hist.c,v 1.3 2004/12/07 17:10:56 tedu Exp $	*/
d30 1
a31 1
#include <fcntl.h>
d33 1
a34 1
#include <string.h>
d36 1
a37 1
#include "cvs.h"
@


1.3
log
@less whitespace, more pretty.  ok jfb
@
text
@d1 1
a1 1
/*	$OpenBSD: hist.c,v 1.2 2004/12/06 21:03:12 deraadt Exp $	*/
d280 1
d285 1
a285 1
	return (snprintf(buf, blen, "%c%8x|%s|%s|%s|%s|%s",
d287 4
a290 1
	    ent->ch_repo, numbuf, ent->ch_arg));
@


1.2
log
@tighten vertical spacing for else; jfb ok
@
text
@d1 1
a1 1
/*	$OpenBSD: hist.c,v 1.1.1.1 2004/07/13 22:02:40 jfb Exp $	*/
d4 1
a4 1
 * All rights reserved. 
d6 3
a8 3
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
d10 2
a11 2
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
d13 1
a13 1
 *    derived from this software without specific prior written permission. 
d24 1
a24 1
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
a46 3



a52 1

a98 1

a117 1

a136 1

a167 1

a196 1

a275 1

d281 1
a281 1
	if (rcsnum_tostr(ent->ch_rev, numbuf, sizeof(numbuf)) == NULL) {
a282 1
	}
d284 1
a284 1
	return snprintf(buf, blen, "%c%8x|%s|%s|%s|%s|%s",
d286 1
a286 1
	    ent->ch_repo, numbuf, ent->ch_arg);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d190 1
a190 2
	}
	else {
d224 1
a224 2
		}
		else if (ep == bep) {
@


1.1.1.1
log
@* initial import from the cvs-tools module
@
text
@@
