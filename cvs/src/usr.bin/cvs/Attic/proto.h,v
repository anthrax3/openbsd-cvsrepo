head	1.14;
access;
symbols
	OPENBSD_3_9:1.12.0.2
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.5.0.2
	OPENBSD_3_7_BASE:1.5;
locks; strict;
comment	@ * @;


1.14
date	2006.06.16.14.07.42;	author joris;	state dead;
branches;
next	1.13;

1.13
date	2006.05.27.03.30.31;	author joris;	state Exp;
branches;
next	1.12;

1.12
date	2006.01.04.14.58.12;	author xsa;	state Exp;
branches;
next	1.11;

1.11
date	2006.01.02.09.42.20;	author xsa;	state Exp;
branches;
next	1.10;

1.10
date	2005.12.30.16.47.36;	author joris;	state Exp;
branches;
next	1.9;

1.9
date	2005.12.30.02.03.28;	author joris;	state Exp;
branches;
next	1.8;

1.8
date	2005.10.17.16.16.00;	author moritz;	state Exp;
branches;
next	1.7;

1.7
date	2005.07.25.11.07.00;	author xsa;	state Exp;
branches;
next	1.6;

1.6
date	2005.04.18.21.02.50;	author jfb;	state Exp;
branches;
next	1.5;

1.5
date	2004.12.07.17.10.56;	author tedu;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.04.13.26.03;	author jfb;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.03.04.58.45;	author jfb;	state Exp;
branches;
next	1.2;

1.2
date	2004.07.30.17.37.58;	author jfb;	state Exp;
branches;
next	1.1;

1.1
date	2004.07.30.01.49.24;	author jfb;	state Exp;
branches;
next	;


desc
@@


1.14
log
@in preparation for the new remote code, proto.h becomes obsolete.
@
text
@/*	$OpenBSD: proto.h,v 1.13 2006/05/27 03:30:31 joris Exp $	*/
/*
 * Copyright (c) 2004 Jean-Francois Brousseau <jfb@@openbsd.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef PROTO_H
#define PROTO_H

#include "buf.h"

#define CVS_PROTO_MAXARG	256
#define CVS_REQ_TIMEOUT		300

/* client/server protocol requests */
#define CVS_REQ_NONE		0
#define CVS_REQ_ROOT		1
#define CVS_REQ_VALIDREQ	2
#define CVS_REQ_VALIDRESP	3
#define CVS_REQ_DIRECTORY	4
#define CVS_REQ_MAXDOTDOT	5
#define CVS_REQ_STATICDIR	6
#define CVS_REQ_STICKY		7
#define CVS_REQ_ENTRY		8
#define CVS_REQ_ENTRYEXTRA	9
#define CVS_REQ_CHECKINTIME	10
#define CVS_REQ_MODIFIED	11
#define CVS_REQ_ISMODIFIED	12
#define CVS_REQ_UNCHANGED	13
#define CVS_REQ_USEUNCHANGED	14
#define CVS_REQ_NOTIFY		15
#define CVS_REQ_NOTIFYUSER	16
#define CVS_REQ_QUESTIONABLE	17
#define CVS_REQ_CASE		18
#define CVS_REQ_UTF8		19
#define CVS_REQ_ARGUMENT	20
#define CVS_REQ_ARGUMENTX	21
#define CVS_REQ_GLOBALOPT	22
#define CVS_REQ_GZIPSTREAM	23
#define CVS_REQ_KERBENCRYPT	24
#define CVS_REQ_GSSENCRYPT	25
#define CVS_REQ_PROTOENCRYPT	26
#define CVS_REQ_GSSAUTH		27
#define CVS_REQ_PROTOAUTH	28
#define CVS_REQ_READCVSRC2	29
#define CVS_REQ_READWRAP	30
#define CVS_REQ_ERRIFREADER	31
#define CVS_REQ_VALIDRCSOPT	32
#define CVS_REQ_READIGNORE	33
#define CVS_REQ_SET		34
#define CVS_REQ_XPANDMOD	35
#define CVS_REQ_CI		36
#define CVS_REQ_CHOWN		37
#define CVS_REQ_SETOWN		38
#define CVS_REQ_SETPERM		39
#define CVS_REQ_CHACL		40
#define CVS_REQ_LISTPERM	41
#define CVS_REQ_LISTACL		42
#define CVS_REQ_SETPASS		43
#define CVS_REQ_PASSWD		44
#define CVS_REQ_DIFF		45
#define CVS_REQ_STATUS		46
#define CVS_REQ_LS		47
#define CVS_REQ_TAG		48
#define CVS_REQ_IMPORT		49
#define CVS_REQ_ADMIN		50
#define CVS_REQ_HISTORY		51
#define CVS_REQ_WATCHERS	52
#define CVS_REQ_EDITORS		53
#define CVS_REQ_ANNOTATE	54
#define CVS_REQ_LOG		55
#define CVS_REQ_CO		56
#define CVS_REQ_EXPORT		57
#define CVS_REQ_RANNOTATE	58
#define CVS_REQ_INIT		59
#define CVS_REQ_UPDATE		60
#define CVS_REQ_ADD		62
#define CVS_REQ_REMOVE		63
#define CVS_REQ_NOOP		64
#define CVS_REQ_RTAG		65
#define CVS_REQ_RELEASE		66
#define CVS_REQ_RLOG		67
#define CVS_REQ_RDIFF		68
#define CVS_REQ_VERSION		69
#define CVS_REQ_WATCH_ON	70
#define CVS_REQ_WATCH_OFF	71
#define CVS_REQ_WATCH_ADD	72
#define CVS_REQ_WATCH_REMOVE	73
#define CVS_REQ_MAX		73

/* responses */
#define CVS_RESP_NONE		0
#define CVS_RESP_OK		1
#define CVS_RESP_ERROR		2
#define CVS_RESP_VALIDREQ	3
#define CVS_RESP_CHECKEDIN	4
#define CVS_RESP_NEWENTRY	5
#define CVS_RESP_CKSUM		6
#define CVS_RESP_COPYFILE	7
#define CVS_RESP_UPDATED	8
#define CVS_RESP_CREATED	9
#define CVS_RESP_UPDEXIST	10
#define CVS_RESP_MERGED		11
#define CVS_RESP_PATCHED	12
#define CVS_RESP_RCSDIFF	13
#define CVS_RESP_MODE		14
#define CVS_RESP_MODTIME	15
#define CVS_RESP_REMOVED	16
#define CVS_RESP_RMENTRY	17
#define CVS_RESP_SETSTATDIR	18
#define CVS_RESP_CLRSTATDIR	19
#define CVS_RESP_SETSTICKY	20
#define CVS_RESP_CLRSTICKY	21
#define CVS_RESP_TEMPLATE	22
#define CVS_RESP_SETCIPROG	23
#define CVS_RESP_SETUPDPROG	24
#define CVS_RESP_NOTIFIED	25
#define CVS_RESP_MODXPAND	26
#define CVS_RESP_WRAPRCSOPT	27
#define CVS_RESP_M		28
#define CVS_RESP_MBINARY	29
#define CVS_RESP_E		30
#define CVS_RESP_F		31
#define CVS_RESP_MT		32
#define CVS_RESP_MAX		32

struct cvs_req {
	int	req_id;
	char	req_str[32];
	u_int	req_flags;
};

struct cvs_resp {
	u_int	resp_id;
	char	resp_str[32];
};

#endif	/* PROTO_H */
@


1.13
log
@commit the new opencvs code, i have been hacking on
this for the past 2 weeks now and it should go in at
the start of the hackathon so others can help out.

this code is a lot safer, smarter, faster and best of
all it is actually doing what it is suppose to do!

basic checkout, update, status, diff and commit are
working in local mode only.
there is no support for any remote setups now.
@
text
@d1 1
a1 1
/*	$OpenBSD: proto.h,v 1.12 2006/01/04 14:58:12 xsa Exp $	*/
@


1.12
log
@make cvs_sendresp() return type void; ok joris@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: proto.h,v 1.11 2006/01/02 09:42:20 xsa Exp $	*/
a30 2
#include "file.h"

a32 1

a34 1

a108 2


a110 1

d145 1
a145 2

#define CVS_RESP_MAX	32
a156 28


BUF	*cvs_recvfile(struct cvsroot *, mode_t *);
void	 cvs_sendfile(struct cvsroot *, const char *);
void	 cvs_connect(struct cvsroot *);
void	 cvs_disconnect(struct cvsroot *);

int		 cvs_req_handle(char *);
struct cvs_req	*cvs_req_getbyid(int);
struct cvs_req	*cvs_req_getbyname(const char *);
char		*cvs_req_getvalid(void);

int              cvs_resp_handle(struct cvsroot *, char *);
struct cvs_resp* cvs_resp_getbyid(int);
struct cvs_resp* cvs_resp_getbyname(const char *);
char*            cvs_resp_getvalid(void);

void	cvs_sendreq(struct cvsroot *, u_int, const char *);
void	cvs_getresp(struct cvsroot *);
void	cvs_sendresp(u_int, const char *);
void	cvs_getln(struct cvsroot *, char *, size_t);
void	cvs_senddir(struct cvsroot *, CVSFILE *);
void	cvs_sendarg(struct cvsroot *, const char *, int);
void	cvs_sendln(struct cvsroot *, const char *);
void	cvs_sendentry(struct cvsroot *, const CVSFILE *);
void	cvs_sendraw(struct cvsroot *, const void *, size_t);
size_t	cvs_recvraw(struct cvsroot *, void *, size_t);

@


1.11
log
@more includes cleanup;
@
text
@d1 1
a1 1
/*	$OpenBSD: proto.h,v 1.10 2005/12/30 16:47:36 joris Exp $	*/
d184 1
a184 1
int	cvs_sendresp(u_int, const char *);
@


1.10
log
@more code cleanup, ok niallo@@ and xsa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: proto.h,v 1.9 2005/12/30 02:03:28 joris Exp $	*/
a28 2

#include <sys/param.h>
@


1.9
log
@major cleanup of the functions handling the remote cvs protocol.
makes the code a lot more readable and understandable.

ok xsa@@ and niallo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: proto.h,v 1.8 2005/10/17 16:16:00 moritz Exp $	*/
d187 1
a187 1
int	cvs_getln(struct cvsroot *, char *, size_t);
d193 1
a193 1
ssize_t	cvs_recvraw(struct cvsroot *, void *, size_t);
@


1.8
log
@add client support for the `watch' and `watchers' commands. ok joris@@ xsa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: proto.h,v 1.7 2005/07/25 11:07:00 xsa Exp $	*/
d170 2
a171 2
int	 cvs_sendfile(struct cvsroot *, const char *);
int	 cvs_connect(struct cvsroot *);
d184 2
a185 2
int	cvs_sendreq(struct cvsroot *, u_int, const char *);
int	cvs_getresp(struct cvsroot *);
d188 5
a192 5
int	cvs_senddir(struct cvsroot *, CVSFILE *);
int	cvs_sendarg(struct cvsroot *, const char *, int);
int	cvs_sendln(struct cvsroot *, const char *);
int	cvs_sendentry(struct cvsroot *, const CVSFILE *);
int	cvs_sendraw(struct cvsroot *, const void *, size_t);
@


1.7
log
@KNF; mostly spaces vs. tabs; ok joris@@ jfb@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: proto.h,v 1.6 2005/04/18 21:02:50 jfb Exp $	*/
d111 4
d116 2
a117 1
#define CVS_REQ_MAX		69
@


1.6
log
@Modify the CVSFILE structure using a union to keep information about
both files and directories.  We can now keep the revision number for
regular files, and don't need to fetch the appropriate entry in the
command callbacks.  This saves a huge amount of parsing on Entries
files.

ok joris@@
@
text
@d1 1
a1 1
/*	$OpenBSD: proto.h,v 1.5 2004/12/07 17:10:56 tedu Exp $	*/
d36 1
a36 1
#define CVS_PROTO_MAXARG   256
d38 1
a38 1
#define CVS_REQ_TIMEOUT    300
d42 69
a110 69
#define CVS_REQ_NONE          0
#define CVS_REQ_ROOT          1
#define CVS_REQ_VALIDREQ      2
#define CVS_REQ_VALIDRESP     3
#define CVS_REQ_DIRECTORY     4
#define CVS_REQ_MAXDOTDOT     5
#define CVS_REQ_STATICDIR     6
#define CVS_REQ_STICKY        7
#define CVS_REQ_ENTRY         8
#define CVS_REQ_ENTRYEXTRA    9
#define CVS_REQ_CHECKINTIME  10
#define CVS_REQ_MODIFIED     11
#define CVS_REQ_ISMODIFIED   12
#define CVS_REQ_UNCHANGED    13
#define CVS_REQ_USEUNCHANGED 14
#define CVS_REQ_NOTIFY       15
#define CVS_REQ_NOTIFYUSER   16
#define CVS_REQ_QUESTIONABLE 17
#define CVS_REQ_CASE         18
#define CVS_REQ_UTF8         19
#define CVS_REQ_ARGUMENT     20
#define CVS_REQ_ARGUMENTX    21
#define CVS_REQ_GLOBALOPT    22
#define CVS_REQ_GZIPSTREAM   23
#define CVS_REQ_KERBENCRYPT  24
#define CVS_REQ_GSSENCRYPT   25
#define CVS_REQ_PROTOENCRYPT 26
#define CVS_REQ_GSSAUTH      27
#define CVS_REQ_PROTOAUTH    28
#define CVS_REQ_READCVSRC2   29
#define CVS_REQ_READWRAP     30
#define CVS_REQ_ERRIFREADER  31
#define CVS_REQ_VALIDRCSOPT  32
#define CVS_REQ_READIGNORE   33
#define CVS_REQ_SET          34
#define CVS_REQ_XPANDMOD     35
#define CVS_REQ_CI           36
#define CVS_REQ_CHOWN        37
#define CVS_REQ_SETOWN       38
#define CVS_REQ_SETPERM      39
#define CVS_REQ_CHACL        40
#define CVS_REQ_LISTPERM     41
#define CVS_REQ_LISTACL      42
#define CVS_REQ_SETPASS      43
#define CVS_REQ_PASSWD       44
#define CVS_REQ_DIFF         45
#define CVS_REQ_STATUS       46
#define CVS_REQ_LS           47
#define CVS_REQ_TAG          48
#define CVS_REQ_IMPORT       49
#define CVS_REQ_ADMIN        50
#define CVS_REQ_HISTORY      51
#define CVS_REQ_WATCHERS     52
#define CVS_REQ_EDITORS      53
#define CVS_REQ_ANNOTATE     54
#define CVS_REQ_LOG          55
#define CVS_REQ_CO           56
#define CVS_REQ_EXPORT       57
#define CVS_REQ_RANNOTATE    58
#define CVS_REQ_INIT         59
#define CVS_REQ_UPDATE       60
#define CVS_REQ_ADD          62
#define CVS_REQ_REMOVE       63
#define CVS_REQ_NOOP         64
#define CVS_REQ_RTAG         65
#define CVS_REQ_RELEASE      66
#define CVS_REQ_RLOG         67
#define CVS_REQ_RDIFF        68
#define CVS_REQ_VERSION      69
d112 1
a112 1
#define CVS_REQ_MAX          69
d116 33
a148 33
#define CVS_RESP_NONE         0
#define CVS_RESP_OK           1
#define CVS_RESP_ERROR        2
#define CVS_RESP_VALIDREQ     3
#define CVS_RESP_CHECKEDIN    4
#define CVS_RESP_NEWENTRY     5
#define CVS_RESP_CKSUM        6
#define CVS_RESP_COPYFILE     7
#define CVS_RESP_UPDATED      8
#define CVS_RESP_CREATED      9
#define CVS_RESP_UPDEXIST    10
#define CVS_RESP_MERGED      11
#define CVS_RESP_PATCHED     12
#define CVS_RESP_RCSDIFF     13
#define CVS_RESP_MODE        14
#define CVS_RESP_MODTIME     15
#define CVS_RESP_REMOVED     16
#define CVS_RESP_RMENTRY     17
#define CVS_RESP_SETSTATDIR  18
#define CVS_RESP_CLRSTATDIR  19
#define CVS_RESP_SETSTICKY   20
#define CVS_RESP_CLRSTICKY   21
#define CVS_RESP_TEMPLATE    22
#define CVS_RESP_SETCIPROG   23
#define CVS_RESP_SETUPDPROG  24
#define CVS_RESP_NOTIFIED    25
#define CVS_RESP_MODXPAND    26
#define CVS_RESP_WRAPRCSOPT  27
#define CVS_RESP_M           28
#define CVS_RESP_MBINARY     29
#define CVS_RESP_E           30
#define CVS_RESP_F           31
#define CVS_RESP_MT          32
d150 1
a150 1
#define CVS_RESP_MAX         32
d153 3
a155 3
	int      req_id;
	char     req_str[32];
	u_int    req_flags;
d159 2
a160 2
	u_int   resp_id;
	char    resp_str[32];
d164 25
a188 25
int         cvs_sendfile       (struct cvsroot *, const char *);
BUF*        cvs_recvfile       (struct cvsroot *, mode_t *);
int         cvs_connect        (struct cvsroot *);
void        cvs_disconnect     (struct cvsroot *);

int             cvs_req_handle     (char *);
struct cvs_req* cvs_req_getbyid    (int);
struct cvs_req* cvs_req_getbyname  (const char *);
char*           cvs_req_getvalid   (void);

int              cvs_resp_handle    (struct cvsroot *, char *);
struct cvs_resp* cvs_resp_getbyid   (int);
struct cvs_resp* cvs_resp_getbyname (const char *);
char*            cvs_resp_getvalid  (void);

int         cvs_sendreq     (struct cvsroot *, u_int, const char *);
int         cvs_getresp     (struct cvsroot *);
int         cvs_sendresp    (u_int, const char *);
int         cvs_getln       (struct cvsroot *, char *, size_t);
int         cvs_senddir     (struct cvsroot *, CVSFILE *);
int         cvs_sendarg     (struct cvsroot *, const char *, int);
int         cvs_sendln      (struct cvsroot *, const char *);
int         cvs_sendentry   (struct cvsroot *, const CVSFILE *);
int         cvs_sendraw     (struct cvsroot *, const void *, size_t);
ssize_t     cvs_recvraw     (struct cvsroot *, void *, size_t);
d191 1
a191 1
#endif /* PROTO_H */
@


1.5
log
@less whitespace, more pretty.  ok jfb
@
text
@d1 1
a1 1
/*	$OpenBSD: proto.h,v 1.4 2004/08/04 13:26:03 jfb Exp $	*/
d186 1
a186 1
int         cvs_sendentry   (struct cvsroot *, const struct cvs_ent *);
@


1.4
log
@* set the maximum number of arguments to 256 for the moment
* cvs_sendresp() is now required, so uncomment it
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d4 1
a4 1
 * All rights reserved. 
d6 3
a8 3
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
d10 2
a11 2
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
d13 1
a13 1
 *    derived from this software without specific prior written permission. 
d24 1
a24 1
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
a37 2


a161 6






@


1.3
log
@Move all of the request- and response-specific handlers into separate
files and have only the generic function of each type available to
the outside
@
text
@d35 5
d189 1
@


1.2
log
@Handle the `Rcs-diff' response so we can patch on updates
@
text
@d113 1
d146 18
@


1.1
log
@Move to the new API for the client-server protocol.  All functions now
take a cvs root structure as parameter.  This will allow for much easier
management of CVS trees that make use of multiple roots.
@
text
@d31 3
a33 2
#include <stdio.h>
#include <dirent.h>
d149 1
a149 1
int         cvs_recvfile       (struct cvsroot *, const char *);
@

