head	1.7;
access;
symbols
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6;
locks; strict;
comment	@ * @;


1.7
date	2007.02.12.14.35.28;	author xsa;	state dead;
branches;
next	1.6;

1.6
date	2006.05.27.03.30.31;	author joris;	state Exp;
branches;
next	1.5;

1.5
date	2006.04.17.06.33.22;	author ray;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.14.02.49.44;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2006.04.13.19.16.15;	author joris;	state Exp;
branches;
next	1.2;

1.2
date	2006.03.09.16.53.56;	author joris;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.09.10.56.33;	author xsa;	state Exp;
branches;
next	;


desc
@@


1.7
log
@remove unused leftovers from openrcs; OK joris@@.
@
text
@/*	$OpenBSD: rcstime.c,v 1.6 2006/05/27 03:30:31 joris Exp $	*/
/*
 * Copyright (c) 2006 Joris Vink <joris@@openbsd.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include "includes.h"

#include "log.h"
#include "rcs.h"

void
rcs_set_tz(char *tz, struct rcs_delta *rdp, struct tm *tb)
{
	int tzone;
	int neg, pos;
	char *h, *m;
	struct tm *ltb;
	time_t now;

	if (!strcmp(tz, "LT")) {
		now = mktime(&rdp->rd_date);
		ltb = localtime(&now);
		ltb->tm_hour += ((int)ltb->tm_gmtoff/3600);
		memcpy(tb, ltb, sizeof(struct tm));
	} else {
		neg = pos = 0;
		switch (*tz) {
		case '-':
			neg = 1;
			break;
		case '+':
			pos = 1;
			break;
		default:
			fatal("%s: not a known time zone", tz);
		}

		h = (tz + 1);
		if ((m = strrchr(tz, ':')) != NULL)
			*(m++) = '\0';

		memcpy(tb, &rdp->rd_date, sizeof(struct tm));

		tzone = atoi(h);
		if ((tzone >= 24) && (tzone <= -24))
			fatal("%s: not a known time zone", tz);

		if (pos) {
			tb->tm_hour += tzone;
			tb->tm_gmtoff += (tzone * 3600);
		} else {
			tb->tm_hour -= tzone;
			tb->tm_gmtoff -= (tzone * 3600);
		}

		if ((tb->tm_hour >= 24) || (tb->tm_hour <= -24))
			tb->tm_hour = 0;

		if (m != NULL) {
			tzone = atoi(m);
			if (tzone >= 60)
				fatal("%s: not a known time zone", tz);

			if ((tb->tm_min + tzone) >= 60) {
				tb->tm_hour++;
				tb->tm_min -= (60 - tzone);
			} else
				tb->tm_min += tzone;

			tb->tm_gmtoff += (tzone*60);
		}
	}
}
@


1.6
log
@commit the new opencvs code, i have been hacking on
this for the past 2 weeks now and it should go in at
the start of the hackathon so others can help out.

this code is a lot safer, smarter, faster and best of
all it is actually doing what it is suppose to do!

basic checkout, update, status, diff and commit are
working in local mode only.
there is no support for any remote setups now.
@
text
@d1 1
a1 1
/*	$OpenBSD: rcstime.c,v 1.4 2006/04/14 02:49:44 deraadt Exp $	*/
@


1.5
log
@Remove unused variable.

Found by lint.

OK joris@@
@
text
@d36 1
a36 1
	int pos;
d47 1
a47 1
		pos = 0;
d50 1
@


1.4
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: rcstime.c,v 1.3 2006/04/13 19:16:15 joris Exp $	*/
d36 1
a36 1
	int neg, pos;
d47 1
a47 1
		neg = pos = 0;
a49 1
			neg = 1;
@


1.3
log
@fix -z option for openrcs, this was broken by xsa
when he yanked the code out of rcs.c and placed it in rcstime.c.

	struct tm ltb, *tb;
	tb = &ltb;
	return (tb);

isn't really the most perfect idiom to return a value to the caller, now is it?

as a bonus -z for rlog now works too.
okay niallo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rcstime.c,v 1.2 2006/03/09 16:53:56 joris Exp $	*/
d52 1
a52 1
		case '+': 
@


1.2
log
@trailing spaces;
@
text
@d1 1
a1 1
/*	$OpenBSD: rcstime.c,v 1.1 2006/03/09 10:56:33 xsa Exp $	*/
d32 2
a33 3

struct tm *
rcs_set_tz(char *tz, struct rcs_delta *rdp)
d36 1
d38 1
a38 1
	struct tm *tb, ltb;
a40 2
	tb = &rdp->rd_date;

d43 3
a45 2
		tb = localtime(&now);
		tb->tm_hour += ((int)tb->tm_gmtoff/3600);
d47 1
d50 4
a53 1
		case '+':
d59 1
a59 1
		h = tz;
d63 1
a63 2
		ltb = rdp->rd_date;
		tb = &ltb;
d69 9
a77 2
		tb->tm_hour += tzone;
		if ((tb->tm_hour >= 24) && (tb->tm_hour <= -24))
a79 2
		tb->tm_gmtoff += (tzone*3600);

d87 1
a87 1
				tb->tm_min -= tzone;
a93 2

	return (tb);
@


1.1
log
@move joris' timezone support into rcstime.c; more work to be done there.
OK joris@@.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d80 1
a80 1
				tb->tm_min -= tzone;	
@

