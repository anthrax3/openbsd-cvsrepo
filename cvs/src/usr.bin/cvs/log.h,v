head	1.23;
access;
symbols
	OPENBSD_6_1_BASE:1.23
	OPENBSD_6_0:1.23.0.34
	OPENBSD_6_0_BASE:1.23
	OPENBSD_5_9:1.23.0.30
	OPENBSD_5_9_BASE:1.23
	OPENBSD_5_8:1.23.0.32
	OPENBSD_5_8_BASE:1.23
	OPENBSD_5_7:1.23.0.24
	OPENBSD_5_7_BASE:1.23
	OPENBSD_5_6:1.23.0.28
	OPENBSD_5_6_BASE:1.23
	OPENBSD_5_5:1.23.0.26
	OPENBSD_5_5_BASE:1.23
	OPENBSD_5_4:1.23.0.22
	OPENBSD_5_4_BASE:1.23
	OPENBSD_5_3:1.23.0.20
	OPENBSD_5_3_BASE:1.23
	OPENBSD_5_2:1.23.0.18
	OPENBSD_5_2_BASE:1.23
	OPENBSD_5_1_BASE:1.23
	OPENBSD_5_1:1.23.0.16
	OPENBSD_5_0:1.23.0.14
	OPENBSD_5_0_BASE:1.23
	OPENBSD_4_9:1.23.0.12
	OPENBSD_4_9_BASE:1.23
	OPENBSD_4_8:1.23.0.10
	OPENBSD_4_8_BASE:1.23
	OPENBSD_4_7:1.23.0.6
	OPENBSD_4_7_BASE:1.23
	OPENBSD_4_6:1.23.0.8
	OPENBSD_4_6_BASE:1.23
	OPENBSD_4_5:1.23.0.4
	OPENBSD_4_5_BASE:1.23
	OPENBSD_4_4:1.23.0.2
	OPENBSD_4_4_BASE:1.23
	OPENBSD_4_3:1.22.0.2
	OPENBSD_4_3_BASE:1.22
	OPENBSD_4_2:1.21.0.2
	OPENBSD_4_2_BASE:1.21
	OPENBSD_4_1:1.20.0.2
	OPENBSD_4_1_BASE:1.20
	OPENBSD_4_0:1.19.0.2
	OPENBSD_4_0_BASE:1.19
	OPENBSD_3_9:1.16.0.2
	OPENBSD_3_9_BASE:1.16
	OPENBSD_3_8:1.12.0.2
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.6.0.2
	OPENBSD_3_7_BASE:1.6
	OpenCVS_0_1:1.1.1.1
	OpenCVS:1.1.1;
locks; strict;
comment	@ * @;


1.23
date	2008.06.10.01.00.34;	author joris;	state Exp;
branches;
next	1.22;

1.22
date	2007.09.07.23.59.01;	author tobias;	state Exp;
branches;
next	1.21;

1.21
date	2007.06.26.02.24.10;	author niallo;	state Exp;
branches;
next	1.20;

1.20
date	2007.02.22.06.42.09;	author otto;	state Exp;
branches;
next	1.19;

1.19
date	2006.05.27.03.30.31;	author joris;	state Exp;
branches;
next	1.18;

1.18
date	2006.04.20.12.13.19;	author xsa;	state Exp;
branches;
next	1.17;

1.17
date	2006.03.15.21.34.59;	author niallo;	state Exp;
branches;
next	1.16;

1.16
date	2006.02.01.16.28.20;	author xsa;	state Exp;
branches;
next	1.15;

1.15
date	2006.01.02.17.06.10;	author xsa;	state Exp;
branches;
next	1.14;

1.14
date	2006.01.02.08.11.56;	author xsa;	state Exp;
branches;
next	1.13;

1.13
date	2005.12.19.18.21.31;	author xsa;	state Exp;
branches;
next	1.12;

1.12
date	2005.07.27.15.45.44;	author xsa;	state Exp;
branches;
next	1.11;

1.11
date	2005.07.27.13.06.04;	author xsa;	state Exp;
branches;
next	1.10;

1.10
date	2005.07.25.11.07.00;	author xsa;	state Exp;
branches;
next	1.9;

1.9
date	2005.06.05.20.47.44;	author joris;	state Exp;
branches;
next	1.8;

1.8
date	2005.05.31.16.23.43;	author xsa;	state Exp;
branches;
next	1.7;

1.7
date	2005.05.31.08.26.40;	author xsa;	state Exp;
branches;
next	1.6;

1.6
date	2005.02.15.15.29.35;	author jfb;	state Exp;
branches;
next	1.5;

1.5
date	2004.12.15.06.11.40;	author jfb;	state Exp;
branches;
next	1.4;

1.4
date	2004.12.07.17.10.56;	author tedu;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.05.13.39.01;	author jfb;	state Exp;
branches;
next	1.2;

1.2
date	2004.07.27.16.19.41;	author jfb;	state Exp;
branches;
next	1.1;

1.1
date	2004.07.13.22.02.40;	author jfb;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.07.13.22.02.40;	author jfb;	state Exp;
branches;
next	;


desc
@@


1.23
log
@New trigger framework that allows us to run the required scripts
defined in CVSROOT/commitinfo and CVSROOT/loginfo and so on.

This enables the use of log_accum2 and all that other nice stuff we like.

This was mostly written by Jonathan Armani with help from tobias@@ and myself.

ok tobias@@
@
text
@/*	$OpenBSD: log.h,v 1.22 2007/09/07 23:59:01 tobias Exp $	*/
/*
 * Copyright (c) 2004 Jean-Francois Brousseau <jfb@@openbsd.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef LOG_H
#define LOG_H

#include <stdarg.h>

/* log priority levels */
#define LP_NOTICE	0
#define LP_ERR		1
#define LP_ERRNO	2
#define LP_ABORT	3
#define LP_TRACE	4
#define LP_RCS		5

#define LOG_REVSEP \
"----------------------------"

#define LOG_REVEND \
 "============================================================================="

void	cvs_log(u_int, const char *, ...) __attribute__((format(printf, 2, 3)));
void	cvs_vlog(u_int, const char *, va_list);
int	cvs_printf(const char *, ...) __attribute__((format(printf, 1, 2)));
int	cvs_vprintf(const char *, va_list);
void	fatal(const char *, ...) __dead __attribute__((format(printf, 1,2)));

#endif	/* LOG_H */
@


1.22
log
@Properly send out rcs info header with "E " in server mode (stderr in
local mode). Format style change also enables opencvs to be used with
cvsweb (+ adjustment).

OK joris@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.21 2007/06/26 02:24:10 niallo Exp $	*/
d49 1
@


1.21
log
@add support for cvs rlog.
from Mickey.

ok joris@@ ray@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.20 2007/02/22 06:42:09 otto Exp $	*/
d38 1
@


1.20
log
@general includes cleanup sweep. ok joris@@ niallo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.19 2006/05/27 03:30:31 joris Exp $	*/
d38 6
@


1.19
log
@commit the new opencvs code, i have been hacking on
this for the past 2 weeks now and it should go in at
the start of the hackathon so others can help out.

this code is a lot safer, smarter, faster and best of
all it is actually doing what it is suppose to do!

basic checkout, update, status, diff and commit are
working in local mode only.
there is no support for any remote setups now.
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.17 2006/03/15 21:34:59 niallo Exp $	*/
d29 2
@


1.18
log
@change cvs_log() and cvs_vlog() return type to void; OK niallo@@.
@
text
@a29 11
/* log destinations */
#define LD_STD		0x01
#define LD_SYSLOG	0x02
#define LD_CONS		0x04

#define LD_ALL		(LD_STD|LD_SYSLOG|LD_CONS)

/* log flags */
#define LF_PID		0x01	/* include PID in messages */


d31 5
a35 16
#define LP_DEBUG	0
#define LP_INFO		1
#define LP_NOTICE	2
#define LP_WARN		3
#define LP_ERR		4
#define LP_ALERT	5
#define LP_ERRNO	6
#define LP_ABORT	7
#define LP_TRACE	8

#define LP_MAX		8
#define LP_ALL		255

/* filtering methods */
#define LP_FILTER_SET	0	/* set a filter */
#define LP_FILTER_UNSET	1	/* remove a filter */
a36 3
void	cvs_log_init(u_int, u_int);
void	cvs_log_cleanup(void);
int	cvs_log_filter(u_int, u_int);
@


1.17
log
@- remove unused function cvs_putchar()

"well then zap it" joris@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.16 2006/02/01 16:28:20 xsa Exp $	*/
d62 2
a63 2
int	cvs_log(u_int, const char *, ...) __attribute__((format(printf, 2, 3)));
int	cvs_vlog(u_int, const char *, va_list);
@


1.16
log
@check format string; OK niallo@@, "it's nice to have" joris@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.15 2006/01/02 17:06:10 xsa Exp $	*/
a64 1
void	cvs_putchar(int);
@


1.15
log
@- nuke remaining err(), errx() and warnx() instances.
- make cvs_log_init() return type void.
ok joris@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.14 2006/01/02 08:11:56 xsa Exp $	*/
d62 1
a62 1
int	cvs_log(u_int, const char *, ...);
d64 1
a64 1
int	cvs_printf(const char *, ...);
d66 1
a66 1
void	fatal(const char *, ...);
@


1.14
log
@#include's cleanup; ok joris@@ niallo@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.13 2005/12/19 18:21:31 xsa Exp $	*/
d59 1
a59 1
int	cvs_log_init(u_int, u_int);
@


1.13
log
@move fatal() proto declaration to log.h; better for its use in usr.bin/rcs
OK joris@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.12 2005/07/27 15:45:44 xsa Exp $	*/
a28 4

#include <sys/types.h>

#include <stdarg.h>
@


1.12
log
@rather make LP_NOTICE send to stderr not LP_INFO, pointed out by jfb@@.
ok jfb@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.11 2005/07/27 13:06:04 xsa Exp $	*/
d70 1
@


1.11
log
@make LP_INFO send to stderr; ok joris@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.10 2005/07/25 11:07:00 xsa Exp $	*/
d47 2
a48 2
#define LP_NOTICE	1
#define LP_INFO		2
@


1.10
log
@KNF; mostly spaces vs. tabs; ok joris@@ jfb@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.9 2005/06/05 20:47:44 joris Exp $	*/
d47 2
a48 2
#define LP_INFO		1
#define LP_NOTICE	2
@


1.9
log
@

* introduce cvs_putchar(), to output a single character to stdout.
  if we are in server mode send 'M' when needed.

* switch diff command to cvs_printf() and cvs_putchar() so it will
  output correctly in local and server mode.

ok xsa@@, jfb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.8 2005/05/31 16:23:43 xsa Exp $	*/
d35 3
a37 3
#define LD_STD      0x01
#define LD_SYSLOG   0x02
#define LD_CONS     0x04
d39 1
a39 1
#define LD_ALL      (LD_STD|LD_SYSLOG|LD_CONS)
d42 1
a42 1
#define LF_PID     0x01     /* include PID in messages */
d46 9
a54 9
#define LP_DEBUG    0
#define LP_INFO     1
#define LP_NOTICE   2
#define LP_WARN     3
#define LP_ERR      4
#define LP_ALERT    5
#define LP_ERRNO    6
#define LP_ABORT    7
#define LP_TRACE    8
d56 2
a57 2
#define LP_MAX      8
#define LP_ALL      255
d60 2
a61 2
#define LP_FILTER_SET     0     /* set a filter */
#define LP_FILTER_UNSET   1     /* remove a filter */
d63 7
a69 7
int   cvs_log_init    (u_int, u_int);
void  cvs_log_cleanup (void);
int   cvs_log_filter  (u_int, u_int);
int   cvs_log         (u_int, const char *, ...);
int   cvs_vlog        (u_int, const char *, va_list);
int   cvs_printf      (const char *, ...);
void  cvs_putchar     (int);
d71 1
a71 1
#endif /* LOG_H */
@


1.8
log
@get rid of LP_WARNING (vs. LP_WARN) as well ... ok jfb@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.7 2005/05/31 08:26:40 xsa Exp $	*/
d69 1
@


1.7
log
@remove LP_ERROR log priority level and rather use LP_ERR as they are both
the same...

ok jfb joris
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.6 2005/02/15 15:29:35 jfb Exp $	*/
d49 1
a49 2
#define LP_WARNING  3
#define LP_WARN     LP_WARNING
@


1.6
log
@remove the LP_FILTER_TOGGLE operation, which is really pointless, and
use a bitmask to keep track of the log filters
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.5 2004/12/15 06:11:40 jfb Exp $	*/
d51 1
a51 2
#define LP_ERROR    4
#define LP_ERR      LP_ERROR
@


1.5
log
@Permit the client to generate trace output when the -t option is given
by using the LP_TRACE level to cvs_log().  Traces are filtered by
default.
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.4 2004/12/07 17:10:56 tedu Exp $	*/
a63 1
#define LP_FILTER_TOGGLE  2
@


1.4
log
@less whitespace, more pretty.  ok jfb
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.3 2004/08/05 13:39:01 jfb Exp $	*/
d56 1
d58 1
a58 1
#define LP_MAX      7
@


1.3
log
@Add a new log level LP_ABORT, which modifies the behaviour of prefix
generation by outputting something similar to GNU CVS:

cvs [<command> aborted]: message
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a44 1

d56 1
a56 1
 
d59 1
a59 1
 
@


1.2
log
@Comment out unused code and some minor cleanup.  Add the prototype and
skeleton for cvs_printf(), which will be used to output strings that do
not need all of the handling that cvs_log() performs.  This will be used
among other things to prepend the `M' and `E' family of responses to
output made by the `server' command.
@
text
@d56 1
d58 1
a58 1
#define LP_MAX      6
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
 * Copyright (c) 2004 Jean-Francois Brousseau <jfb@@fugusec.net>
d70 1
@


1.1.1.1
log
@* initial import from the cvs-tools module
@
text
@@
