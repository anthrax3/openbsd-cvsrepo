head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.8
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.4
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.3.0.34
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.32
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.28
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.26
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.24
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.22
	OPENBSD_5_0:1.3.0.20
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.18
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.16
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.12
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.14
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.10
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.8
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.6
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.4
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.2
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.2.0.2
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.1.0.2
	OPENBSD_3_9_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.11.05.09.48.21;	author nicm;	state Exp;
branches;
next	1.4;
commitid	O6jeJ0TRmiewrqMI;

1.4
date	2014.12.01.21.58.46;	author deraadt;	state Exp;
branches;
next	1.3;
commitid	Z3HC5pAWzpo5jsTe;

1.3
date	2007.01.29.16.22.29;	author xsa;	state Exp;
branches;
next	1.2;

1.2
date	2006.03.28.02.13.44;	author ray;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.10.20.27.45;	author joris;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Remove xfree(), like already done for RCS. From Michael W Bombardieri,
ok mmcc
@
text
@/* $OpenBSD: xmalloc.h,v 1.4 2014/12/01 21:58:46 deraadt Exp $ */

/*
 * Author: Tatu Ylonen <ylo@@cs.hut.fi>
 * Copyright (c) 1995 Tatu Ylonen <ylo@@cs.hut.fi>, Espoo, Finland
 *                    All rights reserved
 * Created: Mon Mar 20 22:09:17 1995 ylo
 *
 * Versions of malloc and friends that check their results, and never return
 * failure (they call fatal if they encounter an error).
 *
 * As far as I am concerned, the code I have written for this software
 * can be used freely for any purpose.  Any derived versions of this
 * software must be clearly marked as such, and if the derived work is
 * incompatible with the protocol description in the RFC file, it must be
 * called by a name other than "ssh" or "Secure Shell".
 */

#ifndef XMALLOC_H
#define XMALLOC_H

void	*xmalloc(size_t);
void	*xcalloc(size_t, size_t);
void	*xreallocarray(void *, size_t, size_t);
char	*xstrdup(const char *);
int	 xasprintf(char **, const char *, ...)
                __attribute__((__format__ (printf, 2, 3)))
                __attribute__((__nonnull__ (2)));
int	 xsnprintf(char *, size_t, const char *, ...)
		__attribute__((__format__ (printf, 3, 4)))
		__attribute__((__nonnull__ (3)))
		__attribute__((__bounded__ (__string__,1,2)));

#endif	/* XMALLOC_H */
@


1.4
log
@An internal function called xrealloc() is actually a fail-hard
reallocarray()... so rename it.
@
text
@d1 1
a1 1
/* $OpenBSD: xmalloc.h,v 1.3 2007/01/29 16:22:29 xsa Exp $ */
a24 1
void     xfree(void *);
@


1.3
log
@introduce xsnprintf(); OK otto@@ joris@@.
@
text
@d1 1
a1 1
/* $OpenBSD: xmalloc.h,v 1.2 2006/03/28 02:13:44 ray Exp $ */
d24 1
a24 1
void	*xrealloc(void *, size_t, size_t);
@


1.2
log
@Today is Integer Overflow Prevention Day:
 - Sync xmalloc.? with ssh versions.
 - Change all xrealloc() calls to new API.

``I really like this.'' niallo@@
@
text
@d1 1
a1 1
/* $OpenBSD: xmalloc.h,v 1.12 2006/03/25 22:22:43 djm Exp $ */
d30 4
d35 1
a35 1
#endif				/* XMALLOC_H */
@


1.1
log
@switch to xmalloc stuff, me and xsa@@ agreed on this a long
time ago, but we were being held back by jfb. too bad for him.

next step is to use fatal() through out the code for unrecoverable
errors instead of trying to be all nice and fluffy and reach main() again.

ok niallo@@ and xsa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: xmalloc.h,v 1.9 2002/06/19 00:27:55 deraadt Exp $	*/
d9 1
a9 1
 * Versions of xmalloc and friends that check their results, and never return
d23 2
a24 1
void	*xrealloc(void *, size_t);
d27 3
@

