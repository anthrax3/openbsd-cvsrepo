head	1.25;
access;
symbols
	OPENBSD_6_1:1.25.0.42
	OPENBSD_6_1_BASE:1.25
	OPENBSD_6_0:1.25.0.38
	OPENBSD_6_0_BASE:1.25
	OPENBSD_5_9:1.25.0.34
	OPENBSD_5_9_BASE:1.25
	OPENBSD_5_8:1.25.0.36
	OPENBSD_5_8_BASE:1.25
	OPENBSD_5_7:1.25.0.28
	OPENBSD_5_7_BASE:1.25
	OPENBSD_5_6:1.25.0.32
	OPENBSD_5_6_BASE:1.25
	OPENBSD_5_5:1.25.0.30
	OPENBSD_5_5_BASE:1.25
	OPENBSD_5_4:1.25.0.26
	OPENBSD_5_4_BASE:1.25
	OPENBSD_5_3:1.25.0.24
	OPENBSD_5_3_BASE:1.25
	OPENBSD_5_2:1.25.0.22
	OPENBSD_5_2_BASE:1.25
	OPENBSD_5_1_BASE:1.25
	OPENBSD_5_1:1.25.0.20
	OPENBSD_5_0:1.25.0.18
	OPENBSD_5_0_BASE:1.25
	OPENBSD_4_9:1.25.0.16
	OPENBSD_4_9_BASE:1.25
	OPENBSD_4_8:1.25.0.14
	OPENBSD_4_8_BASE:1.25
	OPENBSD_4_7:1.25.0.10
	OPENBSD_4_7_BASE:1.25
	OPENBSD_4_6:1.25.0.12
	OPENBSD_4_6_BASE:1.25
	OPENBSD_4_5:1.25.0.8
	OPENBSD_4_5_BASE:1.25
	OPENBSD_4_4:1.25.0.6
	OPENBSD_4_4_BASE:1.25
	OPENBSD_4_3:1.25.0.4
	OPENBSD_4_3_BASE:1.25
	OPENBSD_4_2:1.25.0.2
	OPENBSD_4_2_BASE:1.25
	OPENBSD_4_1:1.24.0.2
	OPENBSD_4_1_BASE:1.24
	OPENBSD_3_9:1.19.0.2
	OPENBSD_3_9_BASE:1.19
	OPENBSD_3_8:1.18.0.2
	OPENBSD_3_8_BASE:1.18
	OPENBSD_3_7:1.7.0.2
	OPENBSD_3_7_BASE:1.7
	OpenCVS_0_1:1.1.1.1
	OpenCVS:1.1.1;
locks; strict;
comment	@ * @;


1.25
date	2007.05.02.16.26.50;	author xsa;	state Exp;
branches;
next	1.24;

1.24
date	2007.02.22.06.42.10;	author otto;	state Exp;
branches;
next	1.23;

1.23
date	2007.01.11.02.35.55;	author joris;	state Exp;
branches;
next	1.22;

1.22
date	2006.11.14.09.47.52;	author xsa;	state Exp;
branches;
next	1.21;

1.21
date	2006.05.27.03.30.31;	author joris;	state dead;
branches;
next	1.20;

1.20
date	2006.04.14.02.45.35;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2006.01.02.08.11.56;	author xsa;	state Exp;
branches;
next	1.18;

1.18
date	2005.07.25.12.13.08;	author xsa;	state Exp;
branches;
next	1.17;

1.17
date	2005.06.02.20.15.03;	author joris;	state Exp;
branches;
next	1.16;

1.16
date	2005.06.02.20.12.06;	author joris;	state Exp;
branches;
next	1.15;

1.15
date	2005.05.31.08.58.48;	author xsa;	state Exp;
branches;
next	1.14;

1.14
date	2005.05.27.18.54.48;	author xsa;	state Exp;
branches;
next	1.13;

1.13
date	2005.05.25.06.22.08;	author jfb;	state Exp;
branches;
next	1.12;

1.12
date	2005.05.25.06.02.00;	author joris;	state Exp;
branches;
next	1.11;

1.11
date	2005.05.24.04.12.25;	author jfb;	state Exp;
branches;
next	1.10;

1.10
date	2005.05.12.23.46.31;	author joris;	state Exp;
branches;
next	1.9;

1.9
date	2005.04.03.17.32.50;	author xsa;	state Exp;
branches;
next	1.8;

1.8
date	2005.03.30.17.43.04;	author joris;	state Exp;
branches;
next	1.7;

1.7
date	2004.12.07.17.10.56;	author tedu;	state Exp;
branches;
next	1.6;

1.6
date	2004.08.27.15.39.22;	author jfb;	state Exp;
branches;
next	1.5;

1.5
date	2004.08.02.22.45.57;	author jfb;	state Exp;
branches;
next	1.4;

1.4
date	2004.07.30.01.49.25;	author jfb;	state Exp;
branches;
next	1.3;

1.3
date	2004.07.29.18.23.25;	author jfb;	state Exp;
branches;
next	1.2;

1.2
date	2004.07.28.01.57.16;	author jfb;	state Exp;
branches;
next	1.1;

1.1
date	2004.07.13.22.02.40;	author jfb;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.07.13.22.02.40;	author jfb;	state Exp;
branches;
next	;


desc
@@


1.25
log
@like the init command, version does not take any extra args.
from Tobias Stoeckmann.
@
text
@/*	$OpenBSD: version.c,v 1.24 2007/02/22 06:42:10 otto Exp $	*/
/*
 * Copyright (c) 2004 Jean-Francois Brousseau <jfb@@openbsd.org>
 * Copyright (c) 2006 Xavier Santolaria <xsa@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include "cvs.h"
#include "remote.h"

struct cvs_cmd cvs_cmd_version = {
	CVS_OP_VERSION, 0, "version",
	{ "ve", "ver" },
	"Show current CVS version(s)",
	"",
	"",
	NULL,
	cvs_version
};

int
cvs_version(int argc, char **argv)
{
	if (argc > 1)
		fatal("version does not take any extra arguments");

	if (current_cvsroot != NULL &&
	    current_cvsroot->cr_method != CVS_METHOD_LOCAL)
		cvs_printf("Client: ");

	cvs_printf("%s\n", CVS_VERSION);

	if (current_cvsroot != NULL &&
	    current_cvsroot->cr_method != CVS_METHOD_LOCAL) {
		cvs_client_connect_to_server();
		cvs_client_send_request("version");
		/* XXX: better way to handle server response? */
		cvs_printf("Server: ");
		cvs_client_get_responses();
	}

	return (0);
}
@


1.24
log
@general includes cleanup sweep. ok joris@@ niallo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: version.c,v 1.23 2007/01/11 02:35:55 joris Exp $	*/
d35 3
@


1.23
log
@in a remote setup:
do not connect to the remote server until we are sure all the options
passed to the commands are valid.

noticed by xsa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: version.c,v 1.22 2006/11/14 09:47:52 xsa Exp $	*/
a18 2
#include "includes.h"

a19 1
#include "log.h"
@


1.22
log
@Bring back version command. Still needs tweaks to make the
gnu cvs client<->opencvs server setup work. Rest works fine.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d46 1
@


1.21
log
@commit the new opencvs code, i have been hacking on
this for the past 2 weeks now and it should go in at
the start of the hackathon so others can help out.

this code is a lot safer, smarter, faster and best of
all it is actually doing what it is suppose to do!

basic checkout, update, status, diff and commit are
working in local mode only.
there is no support for any remote setups now.
@
text
@d1 1
a1 1
/*	$OpenBSD: version.c,v 1.20 2006/04/14 02:45:35 deraadt Exp $	*/
d4 1
a4 1
 * All rights reserved.
d6 3
a8 3
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
d10 7
a16 15
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
d23 1
a23 3
#include "proto.h"

static int	cvs_version_pre_exec(struct cvsroot *);
d26 1
a26 1
	CVS_OP_VERSION, CVS_REQ_VERSION, "version",
d32 1
a32 8
	0,
	NULL,
	cvs_version_pre_exec,
	NULL,
	NULL,
	NULL,
	NULL,
	0
d35 6
a41 5
static int
cvs_version_pre_exec(struct cvsroot *root)
{
	if (root != NULL && root->cr_method != CVS_METHOD_LOCAL)
		printf("Client: ");
d44 6
a49 3
	if (root != NULL && root->cr_method != CVS_METHOD_LOCAL) {
		cvs_printf("Server: %s\n", root->cr_version == NULL ?
		    "(unknown)" : root->cr_version);
@


1.20
log
@remove a metric buttload of excessive ()
no binary change; ok ray
@
text
@d1 1
a1 1
/*	$OpenBSD: version.c,v 1.19 2006/01/02 08:11:56 xsa Exp $	*/
@


1.19
log
@#include's cleanup; ok joris@@ niallo@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: version.c,v 1.18 2005/07/25 12:13:08 xsa Exp $	*/
d56 1
a56 1
	if ((root != NULL) && (root->cr_method != CVS_METHOD_LOCAL))
d60 1
a60 1
	if ((root != NULL) && (root->cr_method != CVS_METHOD_LOCAL)) {
@


1.18
log
@KNF;
@
text
@d1 1
a1 1
/*	$OpenBSD: version.c,v 1.17 2005/06/02 20:15:03 joris Exp $	*/
d27 1
a27 7
#include <sys/types.h>

#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
@


1.17
log
@

be gone unused init handler.
@
text
@d1 1
a1 1
/*	$OpenBSD: version.c,v 1.16 2005/06/02 20:12:06 joris Exp $	*/
d39 1
a39 1
static int cvs_version_pre_exec (struct cvsroot *);
@


1.16
log
@

handle commands which do not have any init callback a bit
better, eliminates the use of dummy functions.

OK jfb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: version.c,v 1.15 2005/05/31 08:58:48 xsa Exp $	*/
a38 1
static int cvs_version_init     (struct cvs_cmd *, int, char **, int *);
@


1.15
log
@headers ordering (alphabetically) and cleanup, from mbalmer@@ and myself;
@
text
@d1 1
a1 1
/*	$OpenBSD: version.c,v 1.14 2005/05/27 18:54:48 xsa Exp $	*/
d50 1
a50 1
	cvs_version_init,
a58 7

static int
cvs_version_init(struct cvs_cmd *cmd, int argc, char **argv, int *arg)
{
	*arg = 1;
	return (0);
}
@


1.14
log
@remove dup include of "log.h"
@
text
@d1 1
a1 1
/*	$OpenBSD: version.c,v 1.13 2005/05/25 06:22:08 jfb Exp $	*/
d29 2
d32 1
a32 1
#include <stdio.h>
a33 2
#include <errno.h>
#include <string.h>
@


1.13
log
@fix version by adding an init handler which sets the argument count
correctly
@
text
@d1 1
a1 1
/*	$OpenBSD: version.c,v 1.12 2005/05/25 06:02:00 joris Exp $	*/
a37 1
#include "log.h"
@


1.12
log
@

change some printf()'s to cvs_printf() for the server.

okay jfb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: version.c,v 1.11 2005/05/24 04:12:25 jfb Exp $	*/
d36 1
d40 2
a41 1
static int cvs_version_sendflags  (struct cvsroot *);
d51 2
a52 2
	NULL,
	cvs_version_sendflags,
d60 8
d69 1
a69 1
cvs_version_sendflags(struct cvsroot *root)
@


1.11
log
@Merge the cvs_cmd and cvs_cmd_info structures and add the necessary
fields to hook local versions of the commands.  This needs to go in
before it gets any bigger

ok joris
@
text
@d1 1
a1 1
/*	$OpenBSD: version.c,v 1.10 2005/05/12 23:46:31 joris Exp $	*/
d37 1
d63 1
a63 1
	printf("%s\n", CVS_VERSION);
d66 1
a66 1
		printf("Server: %s\n", root->cr_version == NULL ?
@


1.10
log
@

add CF_NOFILES flag
@
text
@d1 1
a1 1
/*	$OpenBSD: version.c,v 1.9 2005/04/03 17:32:50 xsa Exp $	*/
d38 1
a38 1
int cvs_version_sendflags(struct cvsroot *);
d40 8
a47 1
struct cvs_cmd_info cvs_version = {
d50 5
a54 1
	NULL, NULL, NULL, CF_NOFILES, 0, 0
d57 1
a57 1
int
@


1.9
log
@first round of EX_* exit codes removal; ok joris@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: version.c,v 1.8 2005/03/30 17:43:04 joris Exp $	*/
d43 1
a43 1
	NULL, NULL, NULL, 0, 0, 0
@


1.8
log
@

move all the client commands to the new command framework.
eliminates a lot of duplicate code.

ok jfb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: version.c,v 1.7 2004/12/07 17:10:56 tedu Exp $	*/
a33 1
#include <sysexits.h>
@


1.7
log
@less whitespace, more pretty.  ok jfb
@
text
@d1 1
a1 1
/*	$OpenBSD: version.c,v 1.6 2004/08/27 15:39:22 jfb Exp $	*/
d39 1
d41 5
d48 1
a48 1
cvs_version(int argc, char **argv)
a49 6
	struct cvsroot *root;

	if (argc > 1)
		return (EX_USAGE);

	root = cvsroot_get(".");
a54 3
		if (cvs_connect(root) < 0)
			return (1);

a56 1
		cvs_disconnect(root);
a57 2

	cvsroot_free(root);
@


1.6
log
@When the remote version string points to NULL, print "(unknown)" like
GNU CVS does
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d4 1
a4 1
 * All rights reserved. 
d6 3
a8 3
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
d10 2
a11 2
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
d13 1
a13 1
 *    derived from this software without specific prior written permission. 
d24 1
a24 1
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
@


1.5
log
@When we connect to a remote server, always send the Version request and
add a hack so we don't print it (we receive it through a 'M') but store
it in the cvs root structure instead.  This will allow us to make better
decisions in what we use to communicate with the remote server.
@
text
@d58 2
a59 2
		cvs_sendreq(root, CVS_REQ_VERSION, NULL);
		printf("Server: %s\n", root->cr_version);
@


1.4
log
@Move to the new API for the client-server protocol.  All functions now
take a cvs root structure as parameter.  This will allow for much easier
management of CVS trees that make use of multiple roots.
@
text
@a57 1
		printf("Server: ");
d59 1
@


1.3
log
@No need to import the `cvs_root' symbol anymore, it is done in cvs.h
@
text
@d37 1
d44 2
d49 2
a50 3
	cvs_root = cvsroot_get(".");

	if ((cvs_root) && (cvs_root->cr_method != CVS_METHOD_LOCAL))
a51 1

d54 2
a55 3

	if ((cvs_root) && (cvs_root->cr_method != CVS_METHOD_LOCAL))
		if (cvs_client_connect(cvs_root) < 0)
a57 1
	if ((cvs_root) && (cvs_root->cr_method != CVS_METHOD_LOCAL)) {
d59 2
a60 2
		cvs_client_sendreq(CVS_REQ_VERSION, NULL, 1);
		cvs_client_disconnect(cvs_root);
d62 2
@


1.2
log
@Pass the appropriate arguments to cvs_client_connect() and
cvs_client_disconnect()
@
text
@a39 4
extern struct cvsroot *cvs_root;



@


1.1
log
@Initial revision
@
text
@d59 1
a59 1
		if (cvs_client_connect() < 0)
d65 1
a65 1
		cvs_client_disconnect();
@


1.1.1.1
log
@* initial import from the cvs-tools module
@
text
@@
