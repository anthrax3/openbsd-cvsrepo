head	1.23;
access;
symbols
	OPENBSD_6_2:1.23.0.2
	OPENBSD_6_2_BASE:1.23
	OPENBSD_6_1:1.22.0.24
	OPENBSD_6_1_BASE:1.22
	OPENBSD_6_0:1.22.0.20
	OPENBSD_6_0_BASE:1.22
	OPENBSD_5_9:1.22.0.16
	OPENBSD_5_9_BASE:1.22
	OPENBSD_5_8:1.22.0.18
	OPENBSD_5_8_BASE:1.22
	OPENBSD_5_7:1.22.0.10
	OPENBSD_5_7_BASE:1.22
	OPENBSD_5_6:1.22.0.14
	OPENBSD_5_6_BASE:1.22
	OPENBSD_5_5:1.22.0.12
	OPENBSD_5_5_BASE:1.22
	OPENBSD_5_4:1.22.0.8
	OPENBSD_5_4_BASE:1.22
	OPENBSD_5_3:1.22.0.6
	OPENBSD_5_3_BASE:1.22
	OPENBSD_5_2:1.22.0.4
	OPENBSD_5_2_BASE:1.22
	OPENBSD_5_1_BASE:1.22
	OPENBSD_5_1:1.22.0.2
	OPENBSD_5_0:1.21.0.14
	OPENBSD_5_0_BASE:1.21
	OPENBSD_4_9:1.21.0.12
	OPENBSD_4_9_BASE:1.21
	OPENBSD_4_8:1.21.0.10
	OPENBSD_4_8_BASE:1.21
	OPENBSD_4_7:1.21.0.6
	OPENBSD_4_7_BASE:1.21
	OPENBSD_4_6:1.21.0.8
	OPENBSD_4_6_BASE:1.21
	OPENBSD_4_5:1.21.0.4
	OPENBSD_4_5_BASE:1.21
	OPENBSD_4_4:1.21.0.2
	OPENBSD_4_4_BASE:1.21
	OPENBSD_4_3:1.20.0.2
	OPENBSD_4_3_BASE:1.20
	OPENBSD_4_2:1.17.0.4
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.17.0.2
	OPENBSD_4_1_BASE:1.17
	OPENBSD_3_9:1.11.0.2
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.6.0.2
	OPENBSD_3_8_BASE:1.6;
locks; strict;
comment	@ * @;


1.23
date	2017.06.01.08.08.24;	author joris;	state Exp;
branches;
next	1.22;
commitid	oZyV6E3g0wglnhaw;

1.22
date	2011.12.27.13.59.01;	author nicm;	state Exp;
branches;
next	1.21;

1.21
date	2008.06.23.20.51.08;	author ragge;	state Exp;
branches;
next	1.20;

1.20
date	2008.01.31.10.15.05;	author tobias;	state Exp;
branches;
next	1.19;

1.19
date	2008.01.28.20.31.07;	author tobias;	state Exp;
branches;
next	1.18;

1.18
date	2008.01.12.22.39.32;	author tobias;	state Exp;
branches;
next	1.17;

1.17
date	2007.02.22.06.42.10;	author otto;	state Exp;
branches;
next	1.16;

1.16
date	2007.01.11.02.35.55;	author joris;	state Exp;
branches;
next	1.15;

1.15
date	2007.01.09.17.12.14;	author xsa;	state Exp;
branches;
next	1.14;

1.14
date	2007.01.02.13.51.13;	author xsa;	state Exp;
branches;
next	1.13;

1.13
date	2006.05.27.03.30.31;	author joris;	state dead;
branches;
next	1.12;

1.12
date	2006.04.14.02.45.35;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2006.01.02.08.11.56;	author xsa;	state Exp;
branches;
next	1.10;

1.10
date	2005.12.31.13.27.51;	author xsa;	state Exp;
branches;
next	1.9;

1.9
date	2005.12.30.02.03.28;	author joris;	state Exp;
branches;
next	1.8;

1.8
date	2005.12.10.20.27.45;	author joris;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.17.16.16.00;	author moritz;	state Exp;
branches;
next	1.6;

1.6
date	2005.08.16.06.37.57;	author xsa;	state Exp;
branches;
next	1.5;

1.5
date	2005.07.25.12.13.08;	author xsa;	state Exp;
branches;
next	1.4;

1.4
date	2005.07.07.14.27.57;	author joris;	state Exp;
branches;
next	1.3;

1.3
date	2005.06.15.09.17.14;	author xsa;	state Exp;
branches;
next	1.2;

1.2
date	2005.05.31.10.54.05;	author xsa;	state Exp;
branches;
next	1.1;

1.1
date	2005.05.30.08.01.19;	author xsa;	state Exp;
branches;
next	;


desc
@@


1.23
log
@Stop looking at current_cvsroot->cr_method to figure out if we're remote or not.

Instead use cvsroot_is_local() and cvsroot_is_remote().
@
text
@/*	$OpenBSD: watch.c,v 1.22 2011/12/27 13:59:01 nicm Exp $	*/
/*
 * Copyright (c) 2005-2007 Xavier Santolaria <xsa@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <string.h>
#include <unistd.h>

#include "cvs.h"
#include "remote.h"

#define W_COMMIT	0x01
#define W_EDIT		0x02
#define W_UNEDIT	0x04
#define W_ADD		0x08
#define W_REMOVE	0x10
#define W_ON		0x20
#define W_OFF		0x40
#define W_ALL		(W_EDIT|W_COMMIT|W_UNEDIT)

static void	cvs_watch_local(struct cvs_file *);
static void	cvs_watchers_local(struct cvs_file *);

struct cvs_cmd cvs_cmd_watch = {
	CVS_OP_WATCH, CVS_USE_WDIR, "watch",
	{ { 0 }, { 0 } },
	"Set watches",
	"on | off | add | remove [-lR] [-a action] [file ...]",
	"a:lR",
	NULL,
	cvs_watch
};

struct cvs_cmd cvs_cmd_watchers = {
	CVS_OP_WATCHERS, CVS_USE_WDIR, "watchers",
	{ { 0 }, { 0 } },
	"See who is watching a file",
	"[-lR] [file ...]",
	"lR",
	NULL,
	cvs_watchers
};

int
cvs_watch(int argc, char **argv)
{
	int ch, flags;
	struct cvs_recursion cr;
	int watch_req = 0;
	int watch_aflags = 0;

	if (argc < 2)
		fatal("%s", cvs_cmd_watch.cmd_synopsis);

	if (strcmp(argv[1], "on") == 0)
		watch_req |= W_ON;
	else if (strcmp(argv[1], "off") == 0)
		watch_req |= W_OFF;
	else if (strcmp(argv[1], "add") == 0)
		watch_req |= W_ADD;
	else if (strcmp(argv[1], "remove") == 0)
		watch_req |= W_REMOVE;
	else
		fatal("%s", cvs_cmd_watch.cmd_synopsis);

	--argc;
	++argv;

	flags = CR_RECURSE_DIRS;

	while ((ch = getopt(argc, argv, cvs_cmd_watch.cmd_opts)) != -1) {
		switch (ch) {
		case 'a':
			if (!(watch_req & (W_ADD|W_REMOVE)))
				fatal("%s", cvs_cmd_watch.cmd_synopsis);

			if (strcmp(optarg, "edit") == 0)
				watch_aflags |= W_EDIT;
			else if (strcmp(optarg, "unedit") == 0)
				watch_aflags |= W_UNEDIT;
			else if (strcmp(optarg, "commit") == 0)
				watch_aflags |= W_COMMIT;
			else if (strcmp(optarg, "all") == 0)
				watch_aflags |= W_ALL;
			else if (strcmp(optarg, "none") == 0)
				watch_aflags &= ~W_ALL;
			else
				fatal("%s", cvs_cmd_watch.cmd_synopsis);
			break;
		case 'l':
			flags &= ~CR_RECURSE_DIRS;
			break;
		case 'R':
			flags |= CR_RECURSE_DIRS;
			break;
		default:
			fatal("%s", cvs_cmd_watch.cmd_synopsis);
		}
	}

	argc -= optind;
	argv += optind;

	if (watch_aflags == 0)
		watch_aflags |= W_ALL;

	cr.enterdir = NULL;
	cr.leavedir = NULL;

	if (cvsroot_is_remote()) {
		cvs_client_connect_to_server();
		cr.fileproc = cvs_client_sendfile;

		if (watch_req & (W_ADD|W_REMOVE)) {
			if (watch_aflags & W_EDIT)
				cvs_client_send_request("Argument -a edit");

			if (watch_aflags & W_UNEDIT)
				cvs_client_send_request("Argument -a unedit");

			if (watch_aflags & W_COMMIT)
				cvs_client_send_request("Argument -a commit");

			if (!(watch_aflags & W_ALL))
				cvs_client_send_request("Argument -a none");
		}

		if (!(flags & CR_RECURSE_DIRS))
			cvs_client_send_request("Argument -l");
	} else {
		cr.fileproc = cvs_watch_local;
	}

	cr.flags = flags;

	cvs_file_run(argc, argv, &cr);

	if (cvsroot_is_remote()) {
		cvs_client_send_files(argv, argc);
		cvs_client_senddir(".");

		if (watch_req & (W_ADD|W_REMOVE))
			cvs_client_send_request("watch-%s",
			    (watch_req & W_ADD) ? "add" : "remove");
		else
			cvs_client_send_request("watch-%s",
			    (watch_req & W_ON) ? "on" : "off");

		cvs_client_get_responses();
	}

	return (0);
}

int
cvs_watchers(int argc, char **argv)
{
	int ch;
	int flags;
	struct cvs_recursion cr;

	flags = CR_RECURSE_DIRS;

	while ((ch = getopt(argc, argv, cvs_cmd_watchers.cmd_opts)) != -1) {
		switch (ch) {
		case 'l':
			flags &= ~CR_RECURSE_DIRS;
			break;
		case 'R':
			flags |= CR_RECURSE_DIRS;
			break;
		default:
			fatal("%s", cvs_cmd_watchers.cmd_synopsis);
		}
	}

	argc -= optind;
	argv += optind;

	if (argc == 0)
		fatal("%s", cvs_cmd_watchers.cmd_synopsis);

	cr.enterdir = NULL;
	cr.leavedir = NULL;

	if (cvsroot_is_remote()) {
		cvs_client_connect_to_server();
		cr.fileproc = cvs_client_sendfile;

		if (!(flags & CR_RECURSE_DIRS))
			cvs_client_send_request("Argument -l");
	} else {
		cr.fileproc = cvs_watchers_local;
	}

	cr.flags = flags;

	cvs_file_run(argc, argv, &cr);

	if (cvsroot_is_remote()) {
		cvs_client_send_files(argv, argc);
		cvs_client_senddir(".");
		cvs_client_send_request("watchers");
		cvs_client_get_responses();
	}

	return (0);
}

static void
cvs_watch_local(struct cvs_file *cf)
{
}

static void
cvs_watchers_local(struct cvs_file *cf)
{
}
@


1.22
log
@Move some global variables/statics to locals, from Michael W
Bombardieri.
@
text
@d1 1
a1 1
/*	$OpenBSD: watch.c,v 1.21 2008/06/23 20:51:08 ragge Exp $	*/
d122 1
a122 1
	if (current_cvsroot->cr_method != CVS_METHOD_LOCAL) {
d150 1
a150 1
	if (current_cvsroot->cr_method != CVS_METHOD_LOCAL) {
d198 1
a198 1
	if (current_cvsroot->cr_method != CVS_METHOD_LOCAL) {
d212 1
a212 1
	if (current_cvsroot->cr_method != CVS_METHOD_LOCAL) {
@


1.21
log
@Some conformance fixes:
- Empty brackets forbidden in C99.
- ? : and skipping middle argument is both disallowed and considered bad
  programming habit.
OK ray@@, xsa@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: watch.c,v 1.20 2008/01/31 10:15:05 tobias Exp $	*/
a35 3
static int	watch_req = 0;
static int	watch_aflags = 0;

d61 2
@


1.20
log
@Replaced the unused cvs_command variable cmd_req with cmd_flags, which states
if the current command is supposed to use a working directory or if it is a
repository-only command (as of now checkout -p, rtag, rlog).

Makes the code simpler, easier to read and automagically fixes some issues
we encountered with these commands (for example if a working directory
exists, or "." operations are performed).

OK joris@@, niallo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: watch.c,v 1.19 2008/01/28 20:31:07 tobias Exp $	*/
d41 1
a41 1
	{ },
d51 1
a51 1
	{ },
@


1.19
log
@Properly handle -R -- although it is default, it may be overwritten mit -l
in front of it.

OK joris@@, xsa@@

> Diff from Igor Zinovik
@
text
@d1 1
a1 1
/*	$OpenBSD: watch.c,v 1.18 2008/01/12 22:39:32 tobias Exp $	*/
d40 1
a40 1
	CVS_OP_WATCH, 0, "watch",
d50 1
a50 1
	CVS_OP_WATCHERS, 0, "watchers",
@


1.18
log
@Added missing break statements.

OK xsa@@

> Diff from Igor Zinovik <zinovik at cs dot karelia dot ru>
@
text
@d1 1
a1 1
/*	$OpenBSD: watch.c,v 1.17 2007/02/22 06:42:10 otto Exp $	*/
d107 1
d183 1
@


1.17
log
@general includes cleanup sweep. ok joris@@ niallo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: watch.c,v 1.16 2007/01/11 02:35:55 joris Exp $	*/
d102 1
@


1.16
log
@in a remote setup:
do not connect to the remote server until we are sure all the options
passed to the commands are valid.

noticed by xsa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: watch.c,v 1.15 2007/01/09 17:12:14 xsa Exp $	*/
d18 2
a19 1
#include "includes.h"
a21 1
#include "log.h"
@


1.15
log
@add remote handler for the cvs watch command; not linked to the build.
@
text
@d1 1
a1 1
/*	$OpenBSD: watch.c,v 1.14 2007/01/02 13:51:13 xsa Exp $	*/
d122 1
d197 1
@


1.14
log
@skeletons for the client-side part of the editors and watchers commands.
not linked to build.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d3 1
a3 1
 * Copyright (c) 2005, 2006 Xavier Santolaria <xsa@@openbsd.org>
d24 10
d36 13
d60 106
d216 5
@


1.13
log
@commit the new opencvs code, i have been hacking on
this for the past 2 weeks now and it should go in at
the start of the hackathon so others can help out.

this code is a lot safer, smarter, faster and best of
all it is actually doing what it is suppose to do!

basic checkout, update, status, diff and commit are
working in local mode only.
there is no support for any remote setups now.
@
text
@d1 1
a1 1
/*	$OpenBSD: watch.c,v 1.12 2006/04/14 02:45:35 deraadt Exp $	*/
d3 1
a3 3
 * Copyright (c) 2005 Xavier Santolaria <xsa@@openbsd.org>
 * Copyright (c) 2005 Moritz Jodeit <moritz@@openbsd.org>
 * All rights reserved.
d5 11
a15 19
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
d22 1
a22 1
#include "proto.h"
d24 1
a24 25
static int	cvs_watch_init(struct cvs_cmd *, int, char **, int *);
static int	cvs_watch_pre_exec(struct cvsroot *);
static int	cvs_watch_remote(CVSFILE *, void*);
static int	cvs_watch_local(CVSFILE *, void*);

static int	cvs_watchers_init(struct cvs_cmd *, int, char **, int *);
static int	cvs_watchers_local(CVSFILE *, void*);


struct cvs_cmd cvs_cmd_watch = {
	CVS_OP_WATCH, CVS_REQ_NOOP, "watch",
	{},
	"Set watches",
	"on | off | add | remove [-lR] [-a action] [file ...]",
	"a:lR",
	NULL,
	CF_SORT | CF_IGNORE | CF_RECURSE,
	cvs_watch_init,
	cvs_watch_pre_exec,
	cvs_watch_remote,
	cvs_watch_local,
	NULL,
	NULL,
	CVS_CMD_SENDDIR | CVS_CMD_ALLOWSPEC | CVS_CMD_SENDARGS2
};
d27 2
a28 2
	CVS_OP_WATCHERS, CVS_REQ_WATCHERS, "watchers",
	{},
d33 1
a33 8
	CF_SORT | CF_IGNORE | CF_RECURSE,
	cvs_watchers_init,
	NULL,
	cvs_watch_remote,
	cvs_watchers_local,
	NULL,
	NULL,
	CVS_CMD_SENDDIR | CVS_CMD_ALLOWSPEC | CVS_CMD_SENDARGS2
d36 2
a37 6

static char *aoptstr = NULL;
static int watchreq = 0;

static int
cvs_watch_init(struct cvs_cmd *cmd, int argc, char **argv, int *arg)
d40 2
d43 1
a43 13
	if (argc < 2)
		return (CVS_EX_USAGE);

	if (strcmp(argv[1], "on") == 0)
		watchreq = CVS_REQ_WATCH_ON;
	else if (strcmp(argv[1], "off") == 0)
		watchreq = CVS_REQ_WATCH_OFF;
	else if (strcmp(argv[1], "add") == 0)
		watchreq = CVS_REQ_WATCH_ADD;
	else if (strcmp(argv[1], "remove") == 0)
		watchreq = CVS_REQ_WATCH_REMOVE;
	else
		return (CVS_EX_USAGE);
d45 1
a45 4
	cmd->cmd_req = watchreq;
	optind = 2;

	while ((ch = getopt(argc, argv, cmd->cmd_opts)) != -1) {
a46 16
		case 'a':
			/*
			 * Only `watch add | remove' support the -a option.
			 * Check which command has been issued.
			 */
			if (watchreq != CVS_REQ_WATCH_ADD &&
			    watchreq != CVS_REQ_WATCH_REMOVE)
				return (CVS_EX_USAGE);
			if (strcmp(optarg, "commit") != 0 &&
			    strcmp(optarg, "edit") != 0 &&
			    strcmp(optarg, "unedit") != 0 &&
			    strcmp(optarg, "all") != 0 &&
			    strcmp(optarg, "none") != 0)
				return (CVS_EX_USAGE);
			aoptstr = xstrdup(optarg);
			break;
d48 1
a48 1
			cmd->file_flags &= ~CF_RECURSE;
a50 1
			cmd->file_flags |= CF_RECURSE;
d53 1
a53 1
			return (CVS_EX_USAGE);
d57 5
a61 3
	*arg = optind;
	return (CVS_EX_OK);
}
d63 2
d66 7
a72 24
/*
 * cvs_watch_pre_exec()
 *
 */
static int
cvs_watch_pre_exec(struct cvsroot *root)
{
	if (root->cr_method != CVS_METHOD_LOCAL) {
		if (watchreq != CVS_REQ_WATCH_ADD &&
		    watchreq != CVS_REQ_WATCH_REMOVE)
			return (CVS_EX_OK);

		if (aoptstr == NULL || strcmp(aoptstr, "all") == 0) {
			/* Defaults to: edit, unedit, commit */
			cvs_sendarg(root, "-a", 0);
			cvs_sendarg(root, "edit", 0);
			cvs_sendarg(root, "-a", 0);
			cvs_sendarg(root, "unedit", 0);
			cvs_sendarg(root, "-a", 0);
			cvs_sendarg(root, "commit", 0);
		} else {
			cvs_sendarg(root, "-a", 0);
			cvs_sendarg(root, aoptstr, 0);
		}
d75 1
a75 4
	xfree(aoptstr);

	return (CVS_EX_OK);
}
d77 1
d79 5
a83 45
/*
 * cvs_watch_local()
 *
 */
static int
cvs_watch_local(CVSFILE *cf, void *arg)
{
	return (CVS_EX_OK);
}


/*
 * cvs_watch_remote()
 *
 */
static int
cvs_watch_remote(CVSFILE *cf, void *arg)
{
	struct cvsroot *root;

	root = CVS_DIR_ROOT(cf);

	if (cf->cf_type == DT_DIR) {
		if (cf->cf_cvstat == CVS_FST_UNKNOWN)
			cvs_sendreq(root, CVS_REQ_QUESTIONABLE, cf->cf_name);
		else
			cvs_senddir(root, cf);
		return (0);
	}

	cvs_sendentry(root, cf);

	switch (cf->cf_cvstat) {
	case CVS_FST_UNKNOWN:
		cvs_sendreq(root, CVS_REQ_QUESTIONABLE, cf->cf_name);
		break;
	case CVS_FST_UPTODATE:
		cvs_sendreq(root, CVS_REQ_UNCHANGED, cf->cf_name);
		break;
	case CVS_FST_ADDED:
	case CVS_FST_MODIFIED:
		cvs_sendreq(root, CVS_REQ_ISMODIFIED, cf->cf_name);
		break;
	default:
		break;
d89 2
a90 34

/*
 * cvs_watchers_init()
 *
 */
static int
cvs_watchers_init(struct cvs_cmd *cmd, int argc, char **argv, int *arg)
{
	int ch;

	while ((ch = getopt(argc, argv, cmd->cmd_opts)) != -1) {
		switch (ch) {
		case 'l':
			cmd->file_flags &= ~CF_RECURSE;
			break;
		case 'R':
			cmd->file_flags |= CF_RECURSE;
			break;
		default:
			return (CVS_EX_USAGE);
		}
	}

	*arg = optind;
	return (CVS_EX_OK);
}


/*
 * cvs_watchers_local()
 *
 */
static int
cvs_watchers_local(CVSFILE *cf, void *arg)
a91 1
	return (CVS_EX_OK);
@


1.12
log
@remove a metric buttload of excessive ()
no binary change; ok ray
@
text
@d1 1
a1 1
/*	$OpenBSD: watch.c,v 1.11 2006/01/02 08:11:56 xsa Exp $	*/
@


1.11
log
@#include's cleanup; ok joris@@ niallo@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: watch.c,v 1.10 2005/12/31 13:27:51 xsa Exp $	*/
d110 2
a111 2
			if ((watchreq != CVS_REQ_WATCH_ADD) &&
			    (watchreq != CVS_REQ_WATCH_REMOVE))
d113 5
a117 5
			if ((strcmp(optarg, "commit") != 0) &&
			    (strcmp(optarg, "edit") != 0) &&
			    (strcmp(optarg, "unedit") != 0) &&
			    (strcmp(optarg, "all") != 0) &&
			    (strcmp(optarg, "none") != 0))
d145 2
a146 2
		if ((watchreq != CVS_REQ_WATCH_ADD) &&
		    (watchreq != CVS_REQ_WATCH_REMOVE))
@


1.10
log
@minor knf;
@
text
@d1 1
a1 1
/*	$OpenBSD: watch.c,v 1.9 2005/12/30 02:03:28 joris Exp $	*/
d28 1
a28 8
#include <sys/types.h>

#include <errno.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
@


1.9
log
@major cleanup of the functions handling the remote cvs protocol.
makes the code a lot more readable and understandable.

ok xsa@@ and niallo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: watch.c,v 1.8 2005/12/10 20:27:45 joris Exp $	*/
d117 2
a118 2
			if (watchreq != CVS_REQ_WATCH_ADD &&
			    watchreq != CVS_REQ_WATCH_REMOVE)
d120 5
a124 5
			if (strcmp(optarg, "commit") != 0 &&
			    strcmp(optarg, "edit") != 0 &&
			    strcmp(optarg, "unedit") != 0 &&
			    strcmp(optarg, "all") != 0 &&
			    strcmp(optarg, "none") != 0)
d152 2
a153 2
		if (watchreq != CVS_REQ_WATCH_ADD &&
		    watchreq != CVS_REQ_WATCH_REMOVE)
@


1.8
log
@switch to xmalloc stuff, me and xsa@@ agreed on this a long
time ago, but we were being held back by jfb. too bad for him.

next step is to use fatal() through out the code for unrecoverable
errors instead of trying to be all nice and fluffy and reach main() again.

ok niallo@@ and xsa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: watch.c,v 1.7 2005/10/17 16:16:00 moritz Exp $	*/
d158 6
a163 9
			if ((cvs_sendarg(root, "-a", 0) < 0) ||
			    (cvs_sendarg(root, "edit", 0) < 0) ||
			    (cvs_sendarg(root, "-a", 0) < 0) ||
			    (cvs_sendarg(root, "unedit", 0) < 0) ||
			    (cvs_sendarg(root, "-a", 0) < 0) ||
			    (cvs_sendarg(root, "commit", 0) < 0)) {
				xfree(aoptstr);
				return (CVS_EX_PROTO);
			}
d165 2
a166 5
			if ((cvs_sendarg(root, "-a", 0) < 0) ||
			    (cvs_sendarg(root, aoptstr, 0) < 0)) {
				xfree(aoptstr);
				return (CVS_EX_PROTO);
			}
d169 1
a193 1
	int ret;
a195 1
	ret = 0;
d200 1
a200 2
			ret = cvs_sendreq(root, CVS_REQ_QUESTIONABLE,
			    cf->cf_name);
d202 2
a203 6
			ret = cvs_senddir(root, cf);

		if (ret == -1)
			ret = CVS_EX_PROTO;

		return (ret);
d206 1
a206 2
	if (cvs_sendentry(root, cf) < 0)
		return (CVS_EX_PROTO);
d210 1
a210 1
		ret = cvs_sendreq(root, CVS_REQ_QUESTIONABLE, cf->cf_name);
d213 1
a213 1
		ret = cvs_sendreq(root, CVS_REQ_UNCHANGED, cf->cf_name);
d217 1
a217 1
		ret = cvs_sendreq(root, CVS_REQ_ISMODIFIED, cf->cf_name);
d223 1
a223 4
	if (ret == -1)
		ret = CVS_EX_PROTO;

	return (ret);
@


1.7
log
@add client support for the `watch' and `watchers' commands. ok joris@@ xsa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: watch.c,v 1.6 2005/08/16 06:37:57 xsa Exp $	*/
d126 1
a126 4
			if ((aoptstr = strdup(optarg)) == NULL) {
				cvs_log(LP_ERRNO, "failed to copy action");
				return (CVS_EX_DATA);
			}
d164 1
a164 1
				free(aoptstr);
d170 1
a170 1
				free(aoptstr);
d175 1
a175 1
	free(aoptstr);
@


1.6
log
@- watchers remote handler
- consistency nitpicks
ok joris
@
text
@d1 1
a1 1
/*	$OpenBSD: watch.c,v 1.5 2005/07/25 12:13:08 xsa Exp $	*/
d4 1
d42 1
d46 1
a46 1
static int	cvs_watchers_remote(CVSFILE *, void*);
d57 1
a57 1
	CF_SORT | CF_RECURSE,
d59 1
a59 1
	NULL,
d64 1
a64 1
	0
d74 2
a75 2
	CF_SORT | CF_RECURSE,
	cvs_watch_init,
d77 1
a77 1
	cvs_watchers_remote,
d85 2
d93 17
d114 2
a115 2
			 * The `watchers' command does not have the
			 * -a option. Check which command has been issued.
d117 8
a124 1
			if (cvs_cmdop != CVS_OP_WATCH)
d126 4
d148 1
a148 1
 * cvs_watch_remote()
d152 1
a152 1
cvs_watch_remote(CVSFILE *cf, void *arg)
d154 26
d196 1
a196 1
 * cvs_watchers_remote()
d200 1
a200 1
cvs_watchers_remote(CVSFILE *cf, void *arg)
d244 28
@


1.5
log
@KNF;
@
text
@d1 1
a1 1
/*	$OpenBSD: watch.c,v 1.4 2005/07/07 14:27:57 joris Exp $	*/
d79 1
a79 1
	0
d120 1
a120 1
cvs_watch_remote(CVSFILE *file, void *arg)
d131 1
a131 1
cvs_watch_local(CVSFILE *file, void *arg)
d142 1
a142 1
cvs_watchers_remote(CVSFILE *file, void *arg)
d144 41
a184 1
	return (CVS_EX_OK);
d192 1
a192 1
cvs_watchers_local(CVSFILE *file, void *arg)
@


1.4
log
@

remove trailing whitespaces

from deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: watch.c,v 1.3 2005/06/15 09:17:14 xsa Exp $	*/
d40 3
a42 3
static int cvs_watch_init   (struct cvs_cmd *, int, char **, int *);
static int cvs_watch_remote (CVSFILE *, void*);
static int cvs_watch_local  (CVSFILE *, void*);
d44 2
a45 2
static int cvs_watchers_remote (CVSFILE *, void*);
static int cvs_watchers_local  (CVSFILE *, void*);
@


1.3
log
@add descritpion of the watch/watchers commands;
@
text
@d1 1
a1 1
/*	$OpenBSD: watch.c,v 1.2 2005/05/31 10:54:05 xsa Exp $	*/
d66 14
a79 14
        CVS_OP_WATCHERS, CVS_REQ_WATCHERS, "watchers",
        {},
        "See who is watching a file",
        "[-lR] [file ...]",
        "lR",
        NULL,
        CF_SORT | CF_RECURSE,
        cvs_watch_init,
        NULL,
        cvs_watchers_remote,
        cvs_watchers_local,
        NULL,
        NULL,
        0
d88 1
a88 1
	
d146 1
a146 2
 
 
@


1.2
log
@add some comments ..
@
text
@d1 1
a1 1
/*	$OpenBSD: watch.c,v 1.1 2005/05/30 08:01:19 xsa Exp $	*/
d51 1
a51 1
	"",
d68 1
a68 1
        "",
@


1.1
log
@skeleton for watch{,ers} commands, not linked yet;
"i'm cool with that" joris@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d92 4
@

