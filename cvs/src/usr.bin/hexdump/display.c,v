head	1.25;
access;
symbols
	OPENBSD_6_0:1.24.0.2
	OPENBSD_6_0_BASE:1.24
	OPENBSD_5_9:1.23.0.2
	OPENBSD_5_9_BASE:1.23
	OPENBSD_5_8:1.21.0.6
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.21.0.2
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.20.0.18
	OPENBSD_5_6_BASE:1.20
	OPENBSD_5_5:1.20.0.16
	OPENBSD_5_5_BASE:1.20
	OPENBSD_5_4:1.20.0.12
	OPENBSD_5_4_BASE:1.20
	OPENBSD_5_3:1.20.0.10
	OPENBSD_5_3_BASE:1.20
	OPENBSD_5_2:1.20.0.8
	OPENBSD_5_2_BASE:1.20
	OPENBSD_5_1_BASE:1.20
	OPENBSD_5_1:1.20.0.6
	OPENBSD_5_0:1.20.0.4
	OPENBSD_5_0_BASE:1.20
	OPENBSD_4_9:1.20.0.2
	OPENBSD_4_9_BASE:1.20
	OPENBSD_4_8:1.18.0.4
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.18.0.2
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.17.0.14
	OPENBSD_4_6_BASE:1.17
	OPENBSD_4_5:1.17.0.10
	OPENBSD_4_5_BASE:1.17
	OPENBSD_4_4:1.17.0.8
	OPENBSD_4_4_BASE:1.17
	OPENBSD_4_3:1.17.0.6
	OPENBSD_4_3_BASE:1.17
	OPENBSD_4_2:1.17.0.4
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.17.0.2
	OPENBSD_4_1_BASE:1.17
	OPENBSD_4_0:1.16.0.6
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.16.0.4
	OPENBSD_3_9_BASE:1.16
	OPENBSD_3_8:1.16.0.2
	OPENBSD_3_8_BASE:1.16
	OPENBSD_3_7:1.14.0.2
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.13.0.2
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.12.0.4
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.12.0.2
	OPENBSD_3_4_BASE:1.12
	OPENBSD_3_3:1.10.0.6
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.4
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.10
	OPENBSD_2_8:1.5.0.8
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.6
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.4
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.2
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.4.0.8
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.6
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.25
date	2016.08.24.03.13.45;	author guenther;	state Exp;
branches;
next	1.24;
commitid	AyeFIn869BnF7M99;

1.24
date	2016.03.15.04.19.13;	author mmcc;	state Exp;
branches;
next	1.23;
commitid	joKelboeRMdP9MD6;

1.23
date	2016.02.09.01.29.12;	author tb;	state Exp;
branches;
next	1.22;
commitid	O5foknAVRgIWY45X;

1.22
date	2016.02.08.22.09.22;	author schwarze;	state Exp;
branches;
next	1.21;
commitid	o8nnabBD8GvIWbhQ;

1.21
date	2015.01.16.06.40.08;	author deraadt;	state Exp;
branches;
next	1.20;
commitid	Uu5nFG3wCl0LACBb;

1.20
date	2010.10.22.14.04.24;	author millert;	state Exp;
branches;
next	1.19;

1.19
date	2010.10.12.17.23.21;	author millert;	state Exp;
branches;
next	1.18;

1.18
date	2009.10.27.23.59.39;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2007.01.28.16.36.17;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2005.08.18.17.18.24;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2005.08.16.21.51.41;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2004.09.14.22.23.09;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2004.07.21.17.25.57;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.12.20.58.09;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.03.02.56.09;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2002.02.16.21.27.46;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2001.12.30.08.17.32;	author pvalchev;	state Exp;
branches;
next	1.8;

1.8
date	2001.11.19.19.02.14;	author mpech;	state Exp;
branches;
next	1.7;

1.7
date	2001.11.02.19.41.06;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	2001.07.12.05.17.10;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	98.12.16.01.28.24;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.01.17.07.12.37;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.06.26.05.34.17;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.05.21.21.51.51;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.23;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.23;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.25
log
@Convert quad_t to int64_t and %q to %ll
Convert bzero() to memset() and bcopy() to memcpy()

ok natano@@ millert@@
@
text
@/*	$OpenBSD: display.c,v 1.24 2016/03/15 04:19:13 mmcc Exp $	*/
/*	$NetBSD: display.c,v 1.12 2001/12/07 15:14:29 bjh21 Exp $	*/

/*
 * Copyright (c) 1989, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/stat.h>

#include <ctype.h>
#include <err.h>
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "hexdump.h"

#define MINIMUM(a, b)	(((a) < (b)) ? (a) : (b))

enum _vflag vflag = FIRST;

static off_t address;			/* address/offset in stream */
static off_t eaddress;			/* end address */

static void		 bpad(PR *);
static void		 doskip(const char *, int);
static u_char		*get(void);
static __inline void	 print(PR *, u_char *);

void
display(void)
{
	FS *fs;
	FU *fu;
	PR *pr;
	int cnt;
	u_char *bp;
	off_t saveaddress;
	u_char savech, *savebp;

	savech = 0;
	while ((bp = get()) != NULL)
	    for (fs = fshead, savebp = bp, saveaddress = address; fs;
		fs = fs->nextfs, bp = savebp, address = saveaddress)
		    for (fu = fs->nextfu; fu; fu = fu->nextfu) {
			if (fu->flags&F_IGNORE)
				break;
			for (cnt = fu->reps; cnt; --cnt)
			    for (pr = fu->nextpr; pr; address += pr->bcnt,
				bp += pr->bcnt, pr = pr->nextpr) {
				    if (eaddress && address >= eaddress &&
					!(pr->flags & (F_TEXT|F_BPAD)))
					    bpad(pr);
				    if (cnt == 1 && pr->nospace) {
					savech = *pr->nospace;
					*pr->nospace = '\0';
				    }
				    print(pr, bp);
				    if (cnt == 1 && pr->nospace)
					*pr->nospace = savech;
			    }
		    }
	if (endfu) {
		/*
		 * If eaddress not set, error or file size was multiple of
		 * blocksize, and no partial block ever found.
		 */
		if (!eaddress) {
			if (!address)
				return;
			eaddress = address;
		}
		for (pr = endfu->nextpr; pr; pr = pr->nextpr)
			switch(pr->flags) {
			case F_ADDRESS:
				(void)printf(pr->fmt, (int64_t)eaddress);
				break;
			case F_TEXT:
				(void)printf("%s", pr->fmt);
				break;
			}
	}
}

static __inline void
print(PR *pr, u_char *bp)
{
	   double f8;
	    float f4;
	  int16_t s2;
	  int32_t s4;
	  int64_t s8;
	u_int16_t u2;
	u_int32_t u4;
	u_int64_t u8;

	switch(pr->flags) {
	case F_ADDRESS:
		(void)printf(pr->fmt, (int64_t)address);
		break;
	case F_BPAD:
		(void)printf(pr->fmt, "");
		break;
	case F_C:
		conv_c(pr, bp);
		break;
	case F_CHAR:
		(void)printf(pr->fmt, *bp);
		break;
	case F_DBL:
		switch(pr->bcnt) {
		case 4:
			memmove(&f4, bp, sizeof(f4));
			(void)printf(pr->fmt, f4);
			break;
		case 8:
			memmove(&f8, bp, sizeof(f8));
			(void)printf(pr->fmt, f8);
			break;
		}
		break;
	case F_INT:
		switch(pr->bcnt) {
		case 1:
			(void)printf(pr->fmt, (int64_t)*bp);
			break;
		case 2:
			memmove(&s2, bp, sizeof(s2));
			(void)printf(pr->fmt, (int64_t)s2);
			break;
		case 4:
			memmove(&s4, bp, sizeof(s4));
			(void)printf(pr->fmt, (int64_t)s4);
			break;
		case 8:
			memmove(&s8, bp, sizeof(s8));
			(void)printf(pr->fmt, s8);
			break;
		}
		break;
	case F_P:
		(void)printf(pr->fmt, isprint(*bp) ? *bp : '.');
		break;
	case F_STR:
		(void)printf(pr->fmt, (char *)bp);
		break;
	case F_TEXT:
		(void)printf("%s", pr->fmt);
		break;
	case F_U:
		conv_u(pr, bp);
		break;
	case F_UINT:
		switch(pr->bcnt) {
		case 1:
			(void)printf(pr->fmt, (uint64_t)*bp);
			break;
		case 2:
			memmove(&u2, bp, sizeof(u2));
			(void)printf(pr->fmt, (uint64_t)u2);
			break;
		case 4:
			memmove(&u4, bp, sizeof(u4));
			(void)printf(pr->fmt, (uint64_t)u4);
			break;
		case 8:
			memmove(&u8, bp, sizeof(u8));
			(void)printf(pr->fmt, u8);
			break;
		}
		break;
	}
}

static void
bpad(PR *pr)
{
	static const char *spec = " -0+#";
	char *p1, *p2;

	/*
	 * Remove all conversion flags; '-' is the only one valid
	 * with %s, and it's not useful here.
	 */
	pr->flags = F_BPAD;
	pr->cchar[0] = 's';
	pr->cchar[1] = '\0';
	for (p1 = pr->fmt; *p1 != '%'; ++p1);
	for (p2 = ++p1; *p1 && strchr(spec, *p1); ++p1);
	while ((*p2++ = *p1++) != '\0');
}

static char **_argv;

static u_char *
get(void)
{
	static int ateof = 1;
	static u_char *curp, *savp;
	int n;
	int need, nread;
	u_char *tmpp;

	if (!curp) {
		if ((curp = calloc(1, blocksize)) == NULL ||
		    (savp = calloc(1, blocksize)) == NULL)
			err(1, NULL);
	} else {
		tmpp = curp;
		curp = savp;
		savp = tmpp;
		address += blocksize;
	}
	for (need = blocksize, nread = 0;;) {
		/*
		 * if read the right number of bytes, or at EOF for one file,
		 * and no other files are available, zero-pad the rest of the
		 * block and set the end flag.
		 */
		if (!length || (ateof && !next(NULL))) {
			if (need == blocksize)
				return(NULL);
			if (!need && vflag != ALL &&
			    !memcmp(curp, savp, nread)) {
				if (vflag != DUP)
					(void)printf("*\n");
				return(NULL);
			}
			memset((char *)curp + nread, 0, need);
			eaddress = address + nread;
			return(curp);
		}
		n = fread((char *)curp + nread, sizeof(u_char),
		    length == -1 ? need : MINIMUM(length, need), stdin);
		if (!n) {
			if (ferror(stdin))
				warn("%s", _argv[-1]);
			ateof = 1;
			continue;
		}
		ateof = 0;
		if (length != -1)
			length -= n;
		if (!(need -= n)) {
			if (vflag == ALL || vflag == FIRST ||
			    memcmp(curp, savp, blocksize)) {
				if (vflag == DUP || vflag == FIRST)
					vflag = WAIT;
				return(curp);
			}
			if (vflag == WAIT)
				(void)printf("*\n");
			vflag = DUP;
			address += blocksize;
			need = blocksize;
			nread = 0;
		}
		else
			nread += n;
	}
}

int
next(char **argv)
{
	static int done;
	int statok;

	if (argv) {
		_argv = argv;
		return(1);
	}
	for (;;) {
		if (*_argv) {
			if (!(freopen(*_argv, "r", stdin))) {
				warn("%s", *_argv);
				exitval = done = 1;
				++_argv;
				continue;
			}
			statok = done = 1;
		} else {
			if (done++)
				return(0);
			statok = 0;
		}
		if (iobuf != NULL)
			setvbuf(stdin, iobuf, _IOFBF, iobufsiz);
		if (skip)
			doskip(statok ? *_argv : "stdin", statok);
		if (*_argv)
			++_argv;
		if (!skip)
			return(1);
	}
	/* NOTREACHED */
}

static void
doskip(const char *fname, int statok)
{
	off_t cnt;
	struct stat sb;

	if (statok) {
		if (fstat(fileno(stdin), &sb))
			err(1, "fstat %s", fname);
		if (S_ISREG(sb.st_mode)) {
			if (skip > sb.st_size) {
				address += sb.st_size;
				skip -= sb.st_size;
			} else {
				if (fseeko(stdin, skip, SEEK_SET))
					err(1, "fseeko %s", fname);
				address += skip;
				skip = 0;
			}
			return;
		}
	}

	for (cnt = 0; cnt < skip; ++cnt)
		if (getchar() == EOF)
			break;
	address += cnt;
	skip -= cnt;
}
@


1.24
log
@ o clean up a little whitespace and formatting
 o move some declarations out of hexdump.h
 o mark some declarations as __dead or static

from Michal Mazurek, with input from and ok tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: display.c,v 1.23 2016/02/09 01:29:12 tb Exp $	*/
d103 1
a103 1
				(void)printf(pr->fmt, (quad_t)eaddress);
d126 1
a126 1
		(void)printf(pr->fmt, (quad_t)address);
d152 1
a152 1
			(void)printf(pr->fmt, (quad_t)*bp);
d156 1
a156 1
			(void)printf(pr->fmt, (quad_t)s2);
d160 1
a160 1
			(void)printf(pr->fmt, (quad_t)s4);
d183 1
a183 1
			(void)printf(pr->fmt, (u_quad_t)*bp);
d187 1
a187 1
			(void)printf(pr->fmt, (u_quad_t)u2);
d191 1
a191 1
			(void)printf(pr->fmt, (u_quad_t)u4);
@


1.23
log
@For a long time, nomem() has been a wrapper for err(1, NULL) and
meanwhile emalloc() has turned into calloc() by doing malloc + memset.
Delete them and Use the libc functions directly instead. I've been
running with this diff for ages and was reminded of it by a similar
suggestion from mmcc@@ and by recent diffs from Michal Mazurek.

ok mmcc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: display.c,v 1.22 2016/02/08 22:09:22 schwarze Exp $	*/
d52 4
a55 1
static __inline void print(PR *, u_char *);
d202 1
a202 1
void
d222 1
a222 1
u_char *
d326 1
a326 1
void
@


1.22
log
@Fix a bug that caused nothing to be skipped when skipping exactly the
number of bytes present in a regular file was requested.
Bug reported by a user called "tdm" on the comstyle #openbsd IRC channel.
Patch written by Michal Mazurek <akfaew at jasminek dot net>.
OK jung@@ millert@@ czarkoff@@
@
text
@d1 1
a1 1
/*	$OpenBSD: display.c,v 1.21 2015/01/16 06:40:08 deraadt Exp $	*/
d229 3
a231 2
		curp = emalloc(blocksize);
		savp = emalloc(blocksize);
a350 17
}

void *
emalloc(int allocsize)
{
	void *p;

	if ((p = malloc((u_int)allocsize)) == NULL)
		nomem();
	memset(p, 0, allocsize);
	return(p);
}

void
nomem(void)
{
	err(1, NULL);
@


1.21
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: display.c,v 1.20 2010/10/22 14:04:24 millert Exp $	*/
d332 1
a332 1
			if (skip >= sb.st_size) {
@


1.20
log
@Move setvbuf() added in r1.19 to before the call to doskip() since
anything read from stdin in doskip() may be lost when we change the
buffering.  Fixes PR 6492.  OK guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: display.c,v 1.19 2010/10/12 17:23:21 millert Exp $	*/
a32 1
#include <sys/param.h>
d45 2
d257 1
a257 1
		    length == -1 ? need : MIN(length, need), stdin);
@


1.19
log
@If the input length was specified, use it to set the stdio buffer
size for fread().  Otherwise, stdio will read as much as it can
(using a very large buffer) which may cause a hang if the input
comes from a blocking device such as /dev/srandom.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: display.c,v 1.18 2009/10/27 23:59:39 deraadt Exp $	*/
d309 2
d315 1
a315 3
		if (!skip) {
			if (iobuf != NULL)
				setvbuf(stdin, iobuf, _IOFBF, iobufsiz);
a316 1
		}
@


1.18
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: display.c,v 1.17 2007/01/28 16:36:17 miod Exp $	*/
d313 3
a315 1
		if (!skip)
d317 1
@


1.17
log
@In doskip(), do not access an uninitialized variable in the statok == 0 case
(introduced in r1.9)
@
text
@d1 1
a1 1
/*	$OpenBSD: display.c,v 1.16 2005/08/18 17:18:24 miod Exp $	*/
a31 5

#ifndef lint
/*static char sccsid[] = "from: @@(#)display.c	5.11 (Berkeley) 3/9/91";*/
static char rcsid[] = "$OpenBSD: display.c,v 1.16 2005/08/18 17:18:24 miod Exp $";
#endif /* not lint */
@


1.16
log
@Oops, previous fix would prevent standard input from being processed at all
since it is not stat(2)'ed; spotted by fgs@@, better fix by tom@@
@
text
@d1 1
a1 1
/*	$OpenBSD: display.c,v 1.15 2005/08/16 21:51:41 miod Exp $	*/
d35 1
a35 1
static char rcsid[] = "$OpenBSD: display.c,v 1.15 2005/08/16 21:51:41 miod Exp $";
d327 1
a327 1
	int cnt;
d333 10
a342 3
		if (S_ISREG(sb.st_mode) && skip >= sb.st_size) {
			address += sb.st_size;
			skip -= sb.st_size;
d346 6
a351 12
	if (S_ISREG(sb.st_mode)) {
		if (fseeko(stdin, skip, SEEK_SET))
			err(1, "fseeko %s", fname);
		address += skip;
		skip = 0;
	} else {
		for (cnt = 0; cnt < skip; ++cnt)
			if (getchar() == EOF)
				break;
		address += cnt;
		skip -= cnt;
	}
@


1.15
log
@Do not consider there is a file to process when stat(2) fails; gets rid of
spurious error messages.
ok deraadt@@ millert@@ pedro@@ tdeval@@
@
text
@d1 1
a1 1
/*	$OpenBSD: display.c,v 1.14 2004/09/14 22:23:09 deraadt Exp $	*/
d35 1
a35 1
static char rcsid[] = "$OpenBSD: display.c,v 1.14 2004/09/14 22:23:09 deraadt Exp $";
d304 1
a304 1
				exitval = 1;
d318 1
a318 1
		if (!skip && statok)
@


1.14
log
@use __inline instead of inline (for portability)
@
text
@d1 1
a1 1
/*	$OpenBSD: display.c,v 1.13 2004/07/21 17:25:57 millert Exp $	*/
d35 1
a35 1
static char rcsid[] = "$OpenBSD: display.c,v 1.13 2004/07/21 17:25:57 millert Exp $";
d318 1
a318 1
		if (!skip)
@


1.13
log
@Use fseeko, not fseek when offset is an off_t; Fabio Olive Leite
@
text
@d1 1
a1 1
/*	$OpenBSD: display.c,v 1.12 2003/06/12 20:58:09 deraadt Exp $	*/
d35 1
a35 1
static char rcsid[] = "$OpenBSD: display.c,v 1.12 2003/06/12 20:58:09 deraadt Exp $";
d56 1
a56 1
static inline void print(PR *, u_char *);
d113 1
a113 1
static inline void
@


1.12
log
@de-register and ansification; millert ok
@
text
@d1 1
a1 1
/*	$OpenBSD: display.c,v 1.11 2003/06/03 02:56:09 millert Exp $	*/
d35 1
a35 1
static char rcsid[] = "$OpenBSD: display.c,v 1.11 2003/06/03 02:56:09 millert Exp $";
d340 2
a341 2
		if (fseek(stdin, skip, SEEK_SET))
			err(1, "fseek %s", fname);
@


1.11
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: display.c,v 1.10 2002/02/16 21:27:46 millert Exp $	*/
d35 1
a35 1
static char rcsid[] = "$OpenBSD: display.c,v 1.10 2002/02/16 21:27:46 millert Exp $";
d59 1
a59 1
display()
d114 1
a114 3
print(pr, bp)
	PR *pr;
	u_char *bp;
d204 1
a204 2
bpad(pr)
	PR *pr;
d224 1
a224 1
get()
d291 1
a291 2
next(argv)
	char **argv;
d325 1
a325 3
doskip(fname, statok)
	const char *fname;
	int statok;
d354 1
a354 2
emalloc(allocsize)
	int allocsize;
d365 1
a365 1
nomem()
@


1.10
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: display.c,v 1.9 2001/12/30 08:17:32 pvalchev Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d35 1
a35 1
static char rcsid[] = "$OpenBSD: display.c,v 1.9 2001/12/30 08:17:32 pvalchev Exp $";
@


1.9
log
@Changes come from NetBSD, Lite-2 and me.  ok deraadt
od(1):
- Enable support for printing 8-byte integers.
- Added -C option for hexadecimal+ASCII display.
- Fix od so it displays short files containing nulls.
- POSIXification: The C, S, I and L modifiers now behave correctly,
specifying output in units of a char, short, int and long (as defined by
the host system) respectively.  Support -N, equivalent to hexdump's
-n (format only COUNT bytes of input).  Add -j option which does the
same thing as -s in hexdump (skipping some of the input).
hexdump(1):
- POSIX.2 doesn't specify hexdump so it can't be compatible with it...
- add missing trailing \n in usage() printf
@
text
@d1 1
a1 1
/*	$OpenBSD: display.c,v 1.8 2001/11/19 19:02:14 mpech Exp $	*/
d39 1
a39 1
static char rcsid[] = "$OpenBSD: display.c,v 1.8 2001/11/19 19:02:14 mpech Exp $";
d60 1
a60 1
static inline void print __P((PR *, u_char *));
@


1.8
log
@kill more registers

millert@@ ok
@
text
@d1 2
a2 1
/*	$OpenBSD: display.c,v 1.7 2001/11/02 19:41:06 mickey Exp $	*/
d5 2
a6 2
 * Copyright (c) 1989 The Regents of the University of California.
 * All rights reserved.
d39 1
a39 1
static char rcsid[] = "$OpenBSD: display.c,v 1.7 2001/11/02 19:41:06 mickey Exp $";
d44 3
a46 1
#include <unistd.h>
a47 1
#include <ctype.h>
d51 2
a52 1
#include <err.h>
a58 1
static off_t savaddress;		/* saved address/offset in stream */
d60 1
a60 79
#define PRINT { \
	switch(pr->flags) { \
	case F_ADDRESS: \
		(void)printf(pr->fmt, address); \
		break; \
	case F_BPAD: \
		(void)printf(pr->fmt, ""); \
		break; \
	case F_C: \
		conv_c(pr, bp); \
		break; \
	case F_CHAR: \
		(void)printf(pr->fmt, *bp); \
		break; \
	case F_DBL: { \
		double dval; \
		float fval; \
		switch(pr->bcnt) { \
		case 4: \
			bcopy((char *)bp, (char *)&fval, sizeof(fval)); \
			(void)printf(pr->fmt, fval); \
			break; \
		case 8: \
			bcopy((char *)bp, (char *)&dval, sizeof(dval)); \
			(void)printf(pr->fmt, dval); \
			break; \
		} \
		break; \
	} \
	case F_INT: { \
		int ival; \
		short sval; \
		switch(pr->bcnt) { \
		case 1: \
			(void)printf(pr->fmt, (int)*bp); \
			break; \
		case 2: \
			bcopy((char *)bp, (char *)&sval, sizeof(sval)); \
			(void)printf(pr->fmt, (int)sval); \
			break; \
		case 4: \
			bcopy((char *)bp, (char *)&ival, sizeof(ival)); \
			(void)printf(pr->fmt, ival); \
			break; \
		} \
		break; \
	} \
	case F_P: \
		(void)printf(pr->fmt, isprint(*bp) ? *bp : '.'); \
		break; \
	case F_STR: \
		(void)printf(pr->fmt, (char *)bp); \
		break; \
	case F_TEXT: \
		(void)printf(pr->fmt); \
		break; \
	case F_U: \
		conv_u(pr, bp); \
		break; \
	case F_UINT: { \
		u_int ival; \
		u_short sval; \
		switch(pr->bcnt) { \
		case 1: \
			(void)printf(pr->fmt, (u_int)*bp); \
			break; \
		case 2: \
			bcopy((char *)bp, (char *)&sval, sizeof(sval)); \
			(void)printf(pr->fmt, (u_int)sval); \
			break; \
		case 4: \
			bcopy((char *)bp, (char *)&ival, sizeof(ival)); \
			(void)printf(pr->fmt, ival); \
			break; \
		} \
		break; \
	} \
	} \
}
a64 1
	extern FU *endfu;
d71 1
a71 1
	u_char savech, *savebp, *get();
d73 2
a74 1
	while ((bp = get()))
d84 1
a84 1
					!(pr->flags&(F_TEXT|F_BPAD)))
d90 1
a90 1
				    PRINT;
d97 1
a97 1
		 * if eaddress not set, error or file size was multiple of
d108 1
a108 1
				(void)printf(pr->fmt, eaddress);
d111 1
a111 1
				(void)printf(pr->fmt);
d117 92
d213 1
a213 1
	static char *spec = " -0+#";
d217 1
a217 1
	 * remove all conversion flags; '-' is the only one valid
d221 2
a222 1
	*pr->cchar = 's';
d225 1
a225 2
	while ((*p2++ = *p1++))
		;
a232 2
	extern enum _vflag vflag;
	extern int length;
a236 1
	int valid_save = 0;
d240 2
a241 2
		curp = (u_char *)emalloc(blocksize);
		savp = (u_char *)emalloc(blocksize);
d246 1
a246 2
		address = savaddress += blocksize;
		valid_save = 1;
d254 1
a254 1
		if (!length || ateof && !next((char **)NULL)) {
d256 3
a258 3
				return((u_char *)NULL);
			if (vflag != ALL && valid_save &&
			    !bcmp(curp, savp, nread)) {
d261 1
a261 1
				return((u_char *)NULL);
d263 1
a263 1
			bzero((char *)curp + nread, need);
d279 2
a280 2
			if (vflag == ALL || vflag == FIRST || !valid_save ||
			    bcmp(curp, savp, blocksize)) {
d288 1
a288 1
			address = savaddress += blocksize;
a296 2
extern off_t skip;			/* bytes to skip */

a300 1
	extern int exitval;
d334 1
a334 1
	char *fname;
d337 2
a338 1
	struct stat sbuf;
d341 5
a345 5
		if (fstat(fileno(stdin), &sbuf))
			err(1, "%s", fname);
		if (skip >= sbuf.st_size) {
			skip -= sbuf.st_size;
			address += sbuf.st_size;
d349 12
a360 4
	if (fseek(stdin, skip, SEEK_SET))
		err(1, "%s", fname);
	savaddress = address += skip;
	skip = 0;
d363 3
a365 3
char *
emalloc(size)
	int size;
d367 1
a367 1
	char *p;
d369 3
a371 3
	if (!(p = malloc((u_int)size)))
		err(1, "malloc");
	bzero(p, size);
d373 6
@


1.7
log
@replace fprintf(stderr)/exit w/ err/warn
@
text
@d1 1
a1 1
/*	$OpenBSD: display.c,v 1.6 2001/07/12 05:17:10 deraadt Exp $	*/
d38 1
a38 1
static char rcsid[] = "$OpenBSD: display.c,v 1.6 2001/07/12 05:17:10 deraadt Exp $";
d142 5
a146 5
	register FS *fs;
	register FU *fu;
	register PR *pr;
	register int cnt;
	register u_char *bp;
d198 1
a198 1
	register char *p1, *p2;
d221 1
a221 1
	register int n;
@


1.6
log
@first pass at a -Wall cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: display.c,v 1.5 1998/12/16 01:28:24 deraadt Exp $	*/
d38 1
a38 1
static char rcsid[] = "$OpenBSD: display.c,v 1.5 1998/12/16 01:28:24 deraadt Exp $";
d49 1
d259 1
a259 2
				(void)fprintf(stderr, "hexdump: %s: %s\n",
				    _argv[-1], strerror(errno));
d302 1
a302 2
				(void)fprintf(stderr, "hexdump: %s: %s\n",
				    *_argv, strerror(errno));
d331 2
a332 5
		if (fstat(fileno(stdin), &sbuf)) {
			(void)fprintf(stderr, "hexdump: %s: %s.\n",
			    fname, strerror(errno));
			exit(1);
		}
d339 2
a340 5
	if (fseek(stdin, skip, SEEK_SET)) {
		(void)fprintf(stderr, "hexdump: %s: %s.\n",
		    fname, strerror(errno));
		exit(1);
	}
d352 1
a352 1
		nomem();
a354 7
}

void
nomem()
{
	(void)fprintf(stderr, "hexdump: %s.\n", strerror(errno));
	exit(1);
@


1.5
log
@for less than 16 NUL bytes, do not print a * line; dillon
@
text
@d1 1
a1 1
/*	$OpenBSD: display.c,v 1.4 1997/01/17 07:12:37 millert Exp $	*/
d38 1
a38 1
static char rcsid[] = "$OpenBSD: display.c,v 1.4 1997/01/17 07:12:37 millert Exp $";
d137 1
d149 1
a149 1
	while (bp = get())
d192 1
d207 2
a208 1
	while (*p2++ = *p1++);
d287 1
d324 1
d364 1
@


1.4
log
@r?index -> strr?chr
@
text
@d1 1
a1 1
/*	$OpenBSD: display.c,v 1.3 1996/06/26 05:34:17 deraadt Exp $	*/
d38 1
a38 1
static char rcsid[] = "$OpenBSD: display.c,v 1.3 1996/06/26 05:34:17 deraadt Exp $";
d219 1
d230 1
d241 2
a242 1
			if (vflag != ALL && !bcmp(curp, savp, nread)) {
d264 1
a264 1
			if (vflag == ALL || vflag == FIRST ||
@


1.3
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d38 1
a38 1
static char rcsid[] = "$OpenBSD: display.c,v 1.2 1996/05/21 21:51:51 deraadt Exp $";
d204 1
a204 1
	for (p2 = ++p1; *p1 && index(spec, *p1); ++p1);
@


1.2
log
@use existing protos
@
text
@d1 2
d38 1
a38 1
static char rcsid[] = "$Id: display.c,v 1.1.1.1 1995/10/18 08:45:23 deraadt Exp $";
@


1.1
log
@Initial revision
@
text
@d36 1
a36 1
static char rcsid[] = "$Id: display.c,v 1.2 1993/08/01 18:14:49 mycroft Exp $";
d282 1
a282 1
	extern int errno, exitval;
a318 1
	extern int errno;
a355 2
	extern int errno;

@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
