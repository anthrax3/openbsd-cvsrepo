head	1.1;
access;
symbols
	OPENBSD_6_1:1.1.0.22
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.18
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.14
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.16
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.8
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.12
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.10
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.6
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.4
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.2
	OPENBSD_5_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.1
date	2012.07.10.10.28.05;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Once we've set up termios, lines need to be \r\n terminated, and we need
to reset termios before exiting. So add custom versions of err(),
errx(), warn(), warnx() to handle this.
@
text
@/* $OpenBSD: input.c,v 1.1 2012/07/10 08:02:27 nicm Exp $ */

/*
 * Copyright (c) 2012 Nicholas Marriott <nicm@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <err.h>
#include <errno.h>
#include <stdio.h>
#include <stdarg.h>
#include <stdlib.h>
#include <string.h>

#include "cu.h"

/*
 * Once we've configured termios, we need to use \r\n to end lines, so use our
 * own versions of warn/warnx/err/errx.
 */

extern char	*__progname;

void
cu_err(int eval, const char *fmt, ...)
{
	va_list ap;

	restore_termios();

	va_start(ap, fmt);
	verr(eval, fmt, ap);
}

void
cu_errx(int eval, const char *fmt, ...)
{
	va_list ap;

	restore_termios();

	va_start(ap, fmt);
	verrx(eval, fmt, ap);
}

void
cu_warn(const char *fmt, ...)
{
	va_list ap;

	fprintf(stderr, "%s: ", __progname);

	va_start(ap, fmt);
	vfprintf(stderr, fmt, ap);
	va_end(ap);

	fprintf(stderr, ": %s\r\n", strerror(errno));
}

void
cu_warnx(const char *fmt, ...)
{
	va_list ap;

	fprintf(stderr, "%s: ", __progname);

	va_start(ap, fmt);
	vfprintf(stderr, fmt, ap);
	va_end(ap);

	fprintf(stderr, "\r\n");
}
@
