head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.20
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.2.0.22
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.18
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.14
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.16
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.8
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.12
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.10
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.6
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2;
locks; strict;
comment	@ * @;


1.2
date	2012.07.10.10.28.05;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2012.07.10.08.02.27;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Once we've set up termios, lines need to be \r\n terminated, and we need
to reset termios before exiting. So add custom versions of err(),
errx(), warn(), warnx() to handle this.
@
text
@/* $OpenBSD: input.c,v 1.1 2012/07/10 08:02:27 nicm Exp $ */

/*
 * Copyright (c) 2012 Nicholas Marriott <nicm@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <ctype.h>
#include <errno.h>
#include <signal.h>
#include <stdio.h>
#include <string.h>
#include <termios.h>
#include <unistd.h>

#include "cu.h"

/*
 * Prompt and read a line of user input from stdin. We want to use the termios
 * we were started with so restore and stick in a signal handler for ^C.
 */

volatile sig_atomic_t input_stop;

void	input_signal(int);

void
input_signal(int sig)
{
	input_stop = 1;
}

const char *
get_input(const char *prompt)
{
	static char		s[BUFSIZ];
	struct sigaction	act, oact;
	char			c, *cp, *out = NULL;
	ssize_t			n;

	memset(&act, 0, sizeof(act));
	sigemptyset(&act.sa_mask);
	act.sa_flags = 0;
	act.sa_handler = input_signal;
	if (sigaction(SIGINT, &act, &oact) != 0)
		cu_err(1, "sigaction");
	input_stop = 0;

	restore_termios();

	printf("%s ", prompt);
	fflush(stdout);

	cp = s;
	while (cp != s + sizeof(s) - 1) {
		n = read(STDIN_FILENO, &c, 1);
		if (n == -1 && errno != EINTR)
			cu_err(1, "read");
		if (n != 1 || input_stop)
			break;
		if (c == '\n') {
			out = s;
			break;
		}
		if (!iscntrl((u_char)c))
			*cp++ = c;
	}
	*cp = '\0';

	set_termios();

	sigaction(SIGINT, &oact, NULL);

	return (out);
}
@


1.1
log
@Add first cut of replacement for tip/cu. Not linked to the build.

Currently supports only -l and -s (no parity), no variables and ~., ~>,
~$, ~#, ~^Z, ~?. More to come.

Tested by naddy, otto. ok miod deraadt
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a21 1
#include <err.h>
d59 1
a59 1
		err(1, "sigaction");
d71 1
a71 1
			err(1, "read");
@

