head	1.25;
access;
symbols
	OPENBSD_6_1:1.24.0.8
	OPENBSD_6_1_BASE:1.24
	OPENBSD_6_0:1.24.0.4
	OPENBSD_6_0_BASE:1.24
	OPENBSD_5_9:1.24.0.2
	OPENBSD_5_9_BASE:1.24
	OPENBSD_5_8:1.22.0.4
	OPENBSD_5_8_BASE:1.22
	OPENBSD_5_7:1.21.0.2
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.19.0.4
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.15.0.4
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.14.0.2
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.13.0.2
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.11.0.2
	OPENBSD_5_2_BASE:1.11;
locks; strict;
comment	@ * @;


1.25
date	2017.08.22.16.32.37;	author mestre;	state Exp;
branches;
next	1.24;
commitid	3Mq87b0xjcBV4cwB;

1.24
date	2015.10.16.07.01.53;	author deraadt;	state Exp;
branches;
next	1.23;
commitid	gQDQUnARIpfZTihN;

1.23
date	2015.10.05.23.15.31;	author nicm;	state Exp;
branches;
next	1.22;
commitid	x6PApQ5v6vaG3lGh;

1.22
date	2015.05.18.09.35.05;	author nicm;	state Exp;
branches;
next	1.21;
commitid	ZSzhtZZMK6qpE1AN;

1.21
date	2015.02.08.17.33.35;	author nicm;	state Exp;
branches;
next	1.20;
commitid	wqoh6bToIYeV9NHc;

1.20
date	2015.01.16.06.40.06;	author deraadt;	state Exp;
branches;
next	1.19;
commitid	Uu5nFG3wCl0LACBb;

1.19
date	2014.04.12.12.47.43;	author nicm;	state Exp;
branches;
next	1.18;

1.18
date	2014.03.31.09.16.26;	author nicm;	state Exp;
branches;
next	1.17;

1.17
date	2014.03.31.09.09.19;	author nicm;	state Exp;
branches;
next	1.16;

1.16
date	2014.03.26.13.00.50;	author nicm;	state Exp;
branches;
next	1.15;

1.15
date	2013.11.20.20.55.09;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2013.04.24.16.01.10;	author tedu;	state Exp;
branches;
next	1.13;

1.13
date	2013.01.17.21.10.24;	author nicm;	state Exp;
branches;
next	1.12;

1.12
date	2013.01.17.11.15.22;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2012.07.13.14.45.24;	author halex;	state Exp;
branches;
next	1.10;

1.10
date	2012.07.13.05.29.01;	author dlg;	state Exp;
branches;
next	1.9;

1.9
date	2012.07.12.14.00.05;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2012.07.12.13.50.02;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2012.07.10.13.00.09;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2012.07.10.12.47.23;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2012.07.10.12.20.23;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2012.07.10.10.28.05;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2012.07.10.08.42.43;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2012.07.10.08.16.27;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2012.07.10.08.02.27;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.25
log
@Call isatty(3) prior to ioctl(TIOCEXCL) to check if cu(1) was invoked on a
non-TTY and if that's the case then close the application. Otherwise without
this verification if it's really a non-TTY then cu(1) will be aborted by
pledge(2).

feedback and OK by deraadt@@
@
text
@/* $OpenBSD: cu.c,v 1.24 2015/10/16 07:01:53 deraadt Exp $ */

/*
 * Copyright (c) 2012 Nicholas Marriott <nicm@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/ioctl.h>

#include <ctype.h>
#include <err.h>
#include <event.h>
#include <fcntl.h>
#include <getopt.h>
#include <paths.h>
#include <pwd.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <termios.h>
#include <unistd.h>
#include <limits.h>

#include "cu.h"

extern char		*__progname;

FILE			*record_file;
struct termios		 saved_tio;
struct bufferevent	*input_ev;
struct bufferevent	*output_ev;
int			 is_direct = -1;
const char		*line_path = NULL;
int			 line_speed = -1;
int			 line_fd;
struct termios		 line_tio;
struct bufferevent	*line_ev;
struct event		 sigterm_ev;
struct event		 sighup_ev;
enum {
	STATE_NONE,
	STATE_NEWLINE,
	STATE_TILDE
} last_state = STATE_NEWLINE;

__dead void	usage(void);
void		signal_event(int, short, void *);
void		stream_read(struct bufferevent *, void *);
void		stream_error(struct bufferevent *, short, void *);
void		line_read(struct bufferevent *, void *);
void		line_error(struct bufferevent *, short, void *);
void		try_remote(const char *, const char *, const char *);

__dead void
usage(void)
{
	fprintf(stderr, "usage: %s [-d] [-l line] [-s speed | -speed]\n",
	    __progname);
	fprintf(stderr, "       %s [host]\n", __progname);
	exit(1);
}

int
main(int argc, char **argv)
{
	const char	*errstr;
	char		*tmp, *s, *host;
	int		 opt, i, flags;

	if (pledge("stdio rpath wpath cpath getpw proc exec tty",
	    NULL) == -1)
		err(1, "pledge");

	if (isatty(STDIN_FILENO) && tcgetattr(STDIN_FILENO, &saved_tio) != 0)
		err(1, "tcgetattr");

	/*
	 * Convert obsolescent -### speed to modern -s### syntax which getopt()
	 * can handle.
	 */
	for (i = 1; i < argc; i++) {
		if (strcmp("--", argv[i]) == 0)
			break;
		if (argv[i][0] != '-' || !isdigit((unsigned char)argv[i][1]))
			continue;

		if (asprintf(&argv[i], "-s%s", &argv[i][1]) == -1)
			errx(1, "speed asprintf");
	}

	while ((opt = getopt(argc, argv, "dl:s:")) != -1) {
		switch (opt) {
		case 'd':
			is_direct = 1;
			break;
		case 'l':
			line_path = optarg;
			break;
		case 's':
			line_speed = strtonum(optarg, 0, INT_MAX, &errstr);
			if (errstr != NULL)
				errx(1, "speed is %s: %s", errstr, optarg);
			break;
		default:
			usage();
		}
	}
	argc -= optind;
	argv += optind;
	if (argc != 0 && argc != 1)
		usage();

	if (line_path != NULL || line_speed != -1 || is_direct != -1) {
		if (argc != 0)
			usage();
	} else {
		if (argc == 1)
			host = argv[0];
		else
			host = getenv("HOST");
		if (host != NULL && *host != '\0') {
			if (*host == '/')
				line_path = host;
			else {
				s = getenv("REMOTE");
				if (s != NULL && *s == '/')
					try_remote(host, s, NULL);
				else
					try_remote(host, NULL, s);
			}
		}
	}

	if (line_path == NULL)
		line_path = "/dev/cua00";
	if (line_speed == -1)
		line_speed = 9600;
	if (is_direct == -1)
		is_direct = 0;

	if (strchr(line_path, '/') == NULL) {
		if (asprintf(&tmp, "%s%s", _PATH_DEV, line_path) == -1)
			err(1, "asprintf");
		line_path = tmp;
	}

	flags = O_RDWR;
	if (is_direct)
		flags |= O_NONBLOCK;
	line_fd = open(line_path, flags);
	if (line_fd < 0)
		err(1, "open(\"%s\")", line_path);
	if (!isatty(line_fd))
		err(1, "%s", line_path);
	if (ioctl(line_fd, TIOCEXCL) != 0)
		err(1, "ioctl(TIOCEXCL)");
	if (tcgetattr(line_fd, &line_tio) != 0)
		err(1, "tcgetattr");
	if (set_line(line_speed) != 0)
		err(1, "tcsetattr");

	event_init();

	signal_set(&sigterm_ev, SIGTERM, signal_event, NULL);
	signal_add(&sigterm_ev, NULL);
	signal_set(&sighup_ev, SIGHUP, signal_event, NULL);
	signal_add(&sighup_ev, NULL);
	if (signal(SIGINT, SIG_IGN) == SIG_ERR)
		err(1, "signal");
	if (signal(SIGQUIT, SIG_IGN) == SIG_ERR)
		err(1, "signal");

	set_termios(); /* after this use cu_err and friends */

	/* stdin and stdout get separate events */
	input_ev = bufferevent_new(STDIN_FILENO, stream_read, NULL,
	    stream_error, NULL);
	bufferevent_enable(input_ev, EV_READ);
	output_ev = bufferevent_new(STDOUT_FILENO, NULL, NULL, stream_error,
	    NULL);
	bufferevent_enable(output_ev, EV_WRITE);

	set_blocking(line_fd, 0);
	line_ev = bufferevent_new(line_fd, line_read, NULL, line_error,
	    NULL);
	bufferevent_enable(line_ev, EV_READ|EV_WRITE);

	printf("Connected to %s (speed %d)\r\n", line_path, line_speed);
	event_dispatch();

	restore_termios();
	printf("\r\n[EOT]\n");

	exit(0);
}

void
signal_event(int fd, short events, void *data)
{
	restore_termios();
	printf("\r\n[SIG%s]\n", sys_signame[fd]);

	exit(0);
}

void
set_blocking(int fd, int state)
{
	int mode;

	state = state ? 0 : O_NONBLOCK;
	if ((mode = fcntl(fd, F_GETFL)) == -1)
		cu_err(1, "fcntl");
	if ((mode & O_NONBLOCK) != state) {
		mode = (mode & ~O_NONBLOCK) | state;
		if (fcntl(fd, F_SETFL, mode) == -1)
			cu_err(1, "fcntl");
	}
}

void
set_termios(void)
{
	struct termios tio;

	if (!isatty(STDIN_FILENO))
		return;

	memcpy(&tio, &saved_tio, sizeof(tio));
	tio.c_lflag &= ~(ICANON|IEXTEN|ECHO);
	tio.c_iflag &= ~(INPCK|ICRNL);
	tio.c_oflag &= ~OPOST;
	tio.c_cc[VMIN] = 1;
	tio.c_cc[VTIME] = 0;
	tio.c_cc[VDISCARD] = _POSIX_VDISABLE;
	tio.c_cc[VDSUSP] = _POSIX_VDISABLE;
	tio.c_cc[VINTR] = _POSIX_VDISABLE;
	tio.c_cc[VLNEXT] = _POSIX_VDISABLE;
	tio.c_cc[VQUIT] = _POSIX_VDISABLE;
	tio.c_cc[VSUSP] = _POSIX_VDISABLE;
	if (tcsetattr(STDIN_FILENO, TCSAFLUSH, &tio) != 0)
		cu_err(1, "tcsetattr");
}

void
restore_termios(void)
{
	if (isatty(STDIN_FILENO))
		tcsetattr(STDIN_FILENO, TCSAFLUSH, &saved_tio);
}

int
set_line(int speed)
{
	struct termios	 tio;

	memcpy(&tio, &line_tio, sizeof(tio));
	tio.c_iflag &= ~(ISTRIP|ICRNL);
	tio.c_oflag &= ~OPOST;
	tio.c_lflag &= ~(ICANON|ISIG|IEXTEN|ECHO);
	tio.c_cflag &= ~(CSIZE|PARENB);
	tio.c_cflag |= CREAD|CS8|CLOCAL;
	tio.c_cc[VMIN] = 1;
	tio.c_cc[VTIME] = 0;
	cfsetspeed(&tio, speed);
	if (tcsetattr(line_fd, TCSAFLUSH, &tio) != 0)
		return (-1);
	return (0);
}

void
stream_read(struct bufferevent *bufev, void *data)
{
	char	*new_data, *ptr;
	size_t	 new_size;
	int	 state_change;

	new_data = EVBUFFER_DATA(input_ev->input);
	new_size = EVBUFFER_LENGTH(input_ev->input);
	if (new_size == 0)
		return;

	state_change = isatty(STDIN_FILENO);
	for (ptr = new_data; ptr < new_data + new_size; ptr++) {
		switch (last_state) {
		case STATE_NONE:
			if (state_change && *ptr == '\r')
				last_state = STATE_NEWLINE;
			break;
		case STATE_NEWLINE:
			if (state_change && *ptr == '~') {
				last_state = STATE_TILDE;
				continue;
			}
			if (*ptr != '\r')
				last_state = STATE_NONE;
			break;
		case STATE_TILDE:
			do_command(*ptr);
			last_state = STATE_NEWLINE;
			continue;
		}

		bufferevent_write(line_ev, ptr, 1);
	}

	evbuffer_drain(input_ev->input, new_size);
}

void
stream_error(struct bufferevent *bufev, short what, void *data)
{
	event_loopexit(NULL);
}

void
line_read(struct bufferevent *bufev, void *data)
{
	char	*new_data;
	size_t	 new_size;

	new_data = EVBUFFER_DATA(line_ev->input);
	new_size = EVBUFFER_LENGTH(line_ev->input);
	if (new_size == 0)
		return;

	if (record_file != NULL)
		fwrite(new_data, 1, new_size, record_file);
	bufferevent_write(output_ev, new_data, new_size);

	evbuffer_drain(line_ev->input, new_size);
}

void
line_error(struct bufferevent *bufev, short what, void *data)
{
	event_loopexit(NULL);
}

void
try_remote(const char *host, const char *path, const char *entry)
{
	const char	*paths[] = { "/etc/remote", NULL, NULL };
	char		*cp, *s;
	long		 l;
	int		 error;

	if (path != NULL) {
		paths[0] = path;
		paths[1] = "/etc/remote";
	}

	if (entry != NULL && cgetset(entry) != 0)
		cu_errx(1, "cgetset failed");
	error = cgetent(&cp, (char **)paths, (char *)host);
	if (error < 0) {
		switch (error) {
		case -1:
			cu_errx(1, "unknown host %s", host);
		case -2:
			cu_errx(1, "can't open remote file");
		case -3:
			cu_errx(1, "loop in remote file");
		default:
			cu_errx(1, "unknown error in remote file");
		}
	}

	if (is_direct == -1 && cgetcap(cp, "dc", ':') != NULL)
		is_direct = 1;

	if (line_path == NULL && cgetstr(cp, "dv", &s) >= 0)
		line_path = s;

	if (line_speed == -1 && cgetnum(cp, "br", &l) >= 0) {
		if (l < 0 || l > INT_MAX)
			cu_errx(1, "speed out of range");
		line_speed = l;
	}
}

/* Expands tildes in the file name. Based on code from ssh/misc.c. */
char *
tilde_expand(const char *filename1)
{
	const char	*filename, *path, *sep;
	char		 user[128], *out;
	struct passwd	*pw;
	u_int		 len, slash;
	int		 rv;

	if (*filename1 != '~')
		goto no_change;
	filename = filename1 + 1;

	path = strchr(filename, '/');
	if (path != NULL && path > filename) {		/* ~user/path */
		slash = path - filename;
		if (slash > sizeof(user) - 1)
			goto no_change;
		memcpy(user, filename, slash);
		user[slash] = '\0';
		if ((pw = getpwnam(user)) == NULL)
			goto no_change;
	} else if ((pw = getpwuid(getuid())) == NULL)	/* ~/path */
		goto no_change;

	/* Make sure directory has a trailing '/' */
	len = strlen(pw->pw_dir);
	if (len == 0 || pw->pw_dir[len - 1] != '/')
		sep = "/";
	else
		sep = "";

	/* Skip leading '/' from specified path */
	if (path != NULL)
		filename = path + 1;

	if ((rv = asprintf(&out, "%s%s%s", pw->pw_dir, sep, filename)) == -1)
		cu_err(1, "asprintf");
	if (rv >= PATH_MAX) {
		free(out);
		goto no_change;
	}

	return (out);

no_change:
	out = strdup(filename1);
	if (out == NULL)
		cu_err(1, "strdup");
	return (out);
}
@


1.24
log
@doug and I think the kernel has enough features to support
pledge "stdio rpath wpath cpath getpw proc exec tty" now.
It will be hard to drop many of those features unless cu becomes
privsep for the "upload" commands.
@
text
@d1 1
a1 1
/* $OpenBSD: cu.c,v 1.23 2015/10/05 23:15:31 nicm Exp $ */
d165 2
@


1.23
log
@Set the line file descriptor nonblocking and make it blocking again for
xmodem and child processes, makes xmodem work with -d. Reported by Kim
Zeitler via guenther@@, tested by Jiri B. ok (and a small change) guenther
@
text
@d1 1
a1 1
/* $OpenBSD: cu.c,v 1.22 2015/05/18 09:35:05 nicm Exp $ */
d81 4
@


1.22
log
@Add -d flag and dc capability to open devices non-blocking, used for the
few drivers that do not support cua* so tty* must be used.

ok miod millert
@
text
@d1 1
a1 1
/* $OpenBSD: cu.c,v 1.21 2015/02/08 17:33:35 nicm Exp $ */
d189 1
d213 15
d361 1
a361 1
	error = cgetent(&cp, (char**)paths, (char*)host);
@


1.21
log
@Separate the two usages for cu so you can either give it -l and -s (like
cu) or you can give it a host to look up in /etc/remote (like
tip). Mixing the two was unclear and caused mixups with -l and the HOST
environment variable.

So usage is now:

usage: cu [-l line] [-s speed | -speed]
       cu [host]

And HOST and REMOTE are ignored for the first form.

ok deraadt claudio
@
text
@d1 1
a1 1
/* $OpenBSD: cu.c,v 1.20 2015/01/16 06:40:06 deraadt Exp $ */
d44 1
d69 1
a69 1
	fprintf(stderr, "usage: %s [-l line] [-s speed | -speed]\n",
d80 1
a80 1
	int		 opt, i;
d99 1
a99 1
	while ((opt = getopt(argc, argv, "l:s:")) != -1) {
d101 3
d121 1
a121 1
	if (line_path != NULL || line_speed != -1) {
d146 2
d155 4
a158 1
	line_fd = open(line_path, O_RDWR);
d358 3
@


1.20
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/* $OpenBSD: cu.c,v 1.19 2014/04/12 12:47:43 nicm Exp $ */
d68 1
a68 1
	fprintf(stderr, "usage: %s [-l line] [-s speed | -speed] [host]\n",
d70 1
d117 10
a126 7
	if (argc == 1)
		host = argv[0];
	else
		host = getenv("HOST");
	if (host != NULL && *host != '\0') {
		if (*host == '/') {
			if (line_path == NULL)
d128 7
a134 6
		} else {
			s = getenv("REMOTE");
			if (s != NULL && *s == '/')
				try_remote(host, s, NULL);
			else
				try_remote(host, NULL, s);
@


1.19
log
@-l should override HOST, pointed out by claudio@@
@
text
@d1 1
a1 1
/* $OpenBSD: cu.c,v 1.18 2014/03/31 09:16:26 nicm Exp $ */
a18 1
#include <sys/param.h>
d34 1
d394 1
a394 1
	if (rv >= MAXPATHLEN) {
@


1.18
log
@If HOST or the host argument starts with a /, treat it as a device name
(so, for example, "cu /dev/cuaU0" will work).
@
text
@d1 1
a1 1
/* $OpenBSD: cu.c,v 1.17 2014/03/31 09:09:19 nicm Exp $ */
d121 4
a124 3
		if (*host == '/')
			line_path = host;
		else {
@


1.17
log
@Fix REMOTE to work like tip(1) - it can be either a path to a remote(5)
database or a description (for example "foo:dv=/dev/bar"). Add support
for HOST which works as I thought REMOTE did.

Manpage help from jmc@@.
@
text
@d1 1
a1 1
/* $OpenBSD: cu.c,v 1.16 2014/03/26 13:00:50 nicm Exp $ */
d121 9
a129 5
		s = getenv("REMOTE");
		if (s != NULL && *s == '/')
			try_remote(host, s, NULL);
		else
			try_remote(host, NULL, s);
@


1.16
log
@Add support for retrieving the line and speed from the /etc/remote dv
and br capabilities like tip(1). No other capabilities are supported.

Also handle REMOTE in the environment as either a separate remote(5)
file or a host.

Discussed with and approval from several, man page help from schwarze@@.
@
text
@d1 1
a1 1
/* $OpenBSD: cu.c,v 1.15 2013/11/20 20:55:09 deraadt Exp $ */
d63 1
a63 1
void		try_remote(const char *, const char *);
d77 1
a77 1
	char		*tmp, *s;
d116 6
a121 2
	s = getenv("REMOTE");
	if (argc == 1) {
d123 1
a123 1
			try_remote(argv[0], s);
d125 2
a126 3
			try_remote(argv[0], NULL);
	} else if (s != NULL && *s != '/')
		try_remote(s, NULL);
d312 1
a312 1
try_remote(const char *host, const char *path)
d324 2
@


1.15
log
@unsigned char casts with ctype macros are pretty obvious when dealing
with argv or optarg
ok ratchov
@
text
@d1 1
a1 1
/* $OpenBSD: cu.c,v 1.14 2013/04/24 16:01:10 tedu Exp $ */
d44 2
d63 1
d68 1
a68 1
	fprintf(stderr, "usage: %s [-l line] [-s speed | -speed]\n",
d76 3
a78 3
	const char	*line, *errstr;
	char		*tmp;
	int		 opt, speed, i;
d80 2
a81 2
	line = "/dev/cua00";
	speed = 9600;
d100 1
a100 1
			line = optarg;
d103 1
a103 1
			speed = strtonum(optarg, 0, UINT_MAX, &errstr);
d113 1
a113 1
	if (argc != 0)
d116 16
a131 2
	if (strchr(line, '/') == NULL) {
		if (asprintf(&tmp, "%s%s", _PATH_DEV, line) == -1)
d133 1
a133 1
		line = tmp;
d136 1
a136 1
	line_fd = open(line, O_RDWR);
d138 1
a138 1
		err(1, "open(\"%s\")", line);
d143 1
a143 1
	if (set_line(speed) != 0)
a145 3
	if (isatty(STDIN_FILENO) && tcgetattr(STDIN_FILENO, &saved_tio) != 0)
		err(1, "tcgetattr");

d171 1
a171 1
	printf("Connected (speed %d)\r\n", speed);
d306 37
@


1.14
log
@simplify tilde expand as seen in ssh. ok nicm
@
text
@d1 1
a1 1
/* $OpenBSD: cu.c,v 1.13 2013/01/17 21:10:24 nicm Exp $ */
d87 1
a87 1
		if (argv[i][0] != '-' || !isdigit(argv[i][1]))
@


1.13
log
@Fix a couple of spacing/style nits.
@
text
@d1 1
a1 1
/* $OpenBSD: cu.c,v 1.12 2013/01/17 11:15:22 nicm Exp $ */
d298 2
a299 2
	const char	*filename, *path;
	char		 user[128], ret[MAXPATHLEN], *out;
d302 1
a319 3
	if (strlcpy(ret, pw->pw_dir, sizeof(ret)) >= sizeof(ret))
		goto no_change;

d322 4
a325 3
	if ((len == 0 || pw->pw_dir[len - 1] != '/') &&
	    strlcat(ret, "/", sizeof(ret)) >= sizeof(ret))
		goto no_change;
d330 5
a334 1
	if (strlcat(ret, filename, sizeof(ret)) >= sizeof(ret))
d336 1
a337 3
	out = strdup(ret);
	if (out == NULL)
		cu_err(1, "strdup");
@


1.12
log
@Instead of creating line termios from scratch, call tcgetattr() and
adjust it (per POSIX), reported by kettenis.
@
text
@d1 1
a1 1
/* $OpenBSD: cu.c,v 1.11 2012/07/13 14:45:24 halex Exp $ */
d157 1
a157 1
	printf("Connected (speed %u)\r\n", speed);
@


1.11
log
@kill unused variable

ok dlg@@ nicm@@

while at it, kill one more and add #include <ctype.h> per nicm's request
@
text
@d1 1
a1 1
/* $OpenBSD: cu.c,v 1.10 2012/07/13 05:29:01 dlg Exp $ */
d45 1
d124 2
a125 1

d211 6
a216 5
	cfmakeraw(&tio);
	tio.c_iflag = 0;
	tio.c_oflag = 0;
	tio.c_lflag = 0;
	tio.c_cflag = CREAD|CS8|CLOCAL;
@


1.10
log
@make the compat for -XXX to -s XXX simpler. sometimes you dont need to use
goto.

ok nicm@@
@
text
@d1 1
a1 1
/* $OpenBSD: cu.c,v 1.9 2012/07/12 14:00:05 nicm Exp $ */
d22 1
d74 1
a74 2
	int		 opt, speed, i, ch;
	static char	 sbuf[12];
@


1.9
log
@Set CLOCAL in remove c_cflag or line noise is likely to make cu exit as
discovered by naddy.
@
text
@d1 1
a1 1
/* $OpenBSD: cu.c,v 1.8 2012/07/12 13:50:02 nicm Exp $ */
d84 7
a90 19
		if (argv[i][0] == '-') {
			switch (argv[i][1]) {
			case '0': case '1': case '2': case '3': case '4':
			case '5': case '6': case '7': case '8': case '9':
				ch = snprintf(sbuf, sizeof(sbuf), "-s%s",
				    &argv[i][1]);
				if (ch <= 0 || ch >= (int)sizeof(sbuf)) {
					errx(1, "invalid speed: %s",
					    &argv[i][1]);
				}
				argv[i] = sbuf;
				break;
			case '-':
				/* if we get "--" stop processing args */
				if (argv[i][2] == '\0')
					goto getopt;
				break;
			}
		}
a92 1
getopt:
@


1.8
log
@Add handler for SIGHUP.
@
text
@d1 1
a1 1
/* $OpenBSD: cu.c,v 1.7 2012/07/10 13:00:09 nicm Exp $ */
d226 1
a226 1
	tio.c_cflag = CREAD|CS8;
@


1.7
log
@Fix usage.
@
text
@d1 1
a1 1
/* $OpenBSD: cu.c,v 1.6 2012/07/10 12:47:23 nicm Exp $ */
d46 1
d147 2
@


1.6
log
@Add ~R command to start recording output to a file.
@
text
@d1 1
a1 1
/* $OpenBSD: cu.c,v 1.5 2012/07/10 12:20:23 nicm Exp $ */
d62 2
a63 1
	fprintf(stderr, "usage: %s [-l line] [-s speed]\n", __progname);
@


1.5
log
@Use function to restore termios and add ~X to help.
@
text
@d1 1
a1 1
/* $OpenBSD: cu.c,v 1.4 2012/07/10 10:28:05 nicm Exp $ */
d39 1
d287 2
@


1.4
log
@Once we've set up termios, lines need to be \r\n terminated, and we need
to reset termios before exiting. So add custom versions of err(),
errx(), warn(), warnx() to handle this.
@
text
@d1 1
a1 1
/* $OpenBSD: cu.c,v 1.3 2012/07/10 08:42:43 nicm Exp $ */
d166 1
a166 2
	if (isatty(STDIN_FILENO))
		tcsetattr(STDIN_FILENO, TCSAFLUSH, &saved_tio);
d175 1
a175 2
	if (isatty(STDIN_FILENO))
		tcsetattr(STDIN_FILENO, TCSAFLUSH, &saved_tio);
@


1.3
log
@Restore termios and signal handlers before ~$ so ^C will kill child.
@
text
@d1 1
a1 1
/* $OpenBSD: cu.c,v 1.2 2012/07/10 08:16:27 nicm Exp $ */
d135 1
a135 1
		exit(1);
d149 1
a149 1
	set_termios();
d204 1
a204 1
		err(1, "tcsetattr");
d210 2
a211 5
	if (!isatty(STDIN_FILENO))
		return;

	if (tcsetattr(STDIN_FILENO, TCSAFLUSH, &saved_tio) != 0)
		err(1, "tcsetattr");
d227 1
a227 2
	if (tcsetattr(line_fd, TCSAFLUSH, &tio) != 0) {
		warn("tcsetattr");
a228 1
	}
d341 1
a341 1
		err(1, "strdup");
d347 1
a347 1
		err(1, "strdup");
@


1.2
log
@Add a ~S escape to change the speed interactively (not using ~s since
may want to use it for variables later).
@
text
@d1 1
a1 1
/* $OpenBSD: cu.c,v 1.1 2012/07/10 08:02:27 nicm Exp $ */
d141 1
d144 4
@


1.1
log
@Add first cut of replacement for tip/cu. Not linked to the build.

Currently supports only -l and -s (no parity), no variables and ~., ~>,
~$, ~#, ~^Z, ~?. More to come.

Tested by naddy, otto. ok miod deraadt
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a70 1
	struct termios	 tio;
d134 2
a135 10
	cfmakeraw(&tio);
	tio.c_iflag = 0;
	tio.c_oflag = 0;
	tio.c_lflag = 0;
	tio.c_cflag = CREAD|CS8;
	tio.c_cc[VMIN] = 1;
	tio.c_cc[VTIME] = 0;
	cfsetspeed(&tio, speed);
	if (tcsetattr(line_fd, TCSAFLUSH, &tio) != 0)
		err(1, "tcsetattr");
d210 20
@

