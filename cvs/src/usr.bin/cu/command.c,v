head	1.15;
access;
symbols
	OPENBSD_6_1:1.15.0.8
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.15.0.4
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.2
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.13.0.10
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.2
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.6
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.4
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.12.0.6
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.4
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.2
	OPENBSD_5_2_BASE:1.12;
locks; strict;
comment	@ * @;


1.15
date	2015.10.05.23.15.31;	author nicm;	state Exp;
branches;
next	1.14;
commitid	x6PApQ5v6vaG3lGh;

1.14
date	2015.10.05.17.53.56;	author nicm;	state Exp;
branches;
next	1.13;
commitid	zbbGdq7saaTnkcgk;

1.13
date	2013.11.12.13.54.51;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2012.07.15.06.55.28;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2012.07.11.16.45.12;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2012.07.10.12.47.23;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2012.07.10.12.20.23;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2012.07.10.11.42.02;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2012.07.10.10.56.12;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2012.07.10.10.28.05;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2012.07.10.09.32.40;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2012.07.10.09.10.04;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2012.07.10.08.42.43;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2012.07.10.08.16.27;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2012.07.10.08.02.27;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Set the line file descriptor nonblocking and make it blocking again for
xmodem and child processes, makes xmodem work with -d. Reported by Kim
Zeitler via guenther@@, tested by Jiri B. ok (and a small change) guenther
@
text
@/* $OpenBSD: command.c,v 1.14 2015/10/05 17:53:56 nicm Exp $ */

/*
 * Copyright (c) 2012 Nicholas Marriott <nicm@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/ioctl.h>
#include <sys/wait.h>

#include <event.h>
#include <errno.h>
#include <fcntl.h>
#include <limits.h>
#include <paths.h>
#include <signal.h>
#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>

#include "cu.h"

void	pipe_command(void);
void	connect_command(void);
void	send_file(void);
void	send_xmodem(void);
void	set_speed(void);
void	start_record(void);

void
pipe_command(void)
{
	const char	*cmd;
	pid_t		 pid;
	int		 fd;

	cmd = get_input("Local command?");
	if (cmd == NULL || *cmd == '\0')
		return;

	restore_termios();
	set_blocking(line_fd, 1);

	switch (pid = fork()) {
	case -1:
		cu_err(1, "fork");
	case 0:
		fd = open(_PATH_DEVNULL, O_RDWR);
		if (fd < 0 || dup2(fd, STDIN_FILENO) == -1)
			_exit(1);
		close(fd);

		if (signal(SIGINT, SIG_DFL) == SIG_ERR)
			_exit(1);
		if (signal(SIGQUIT, SIG_DFL) == SIG_ERR)
			_exit(1);

		/* attach stdout to line */
		if (dup2(line_fd, STDOUT_FILENO) == -1)
			_exit(1);

		if (closefrom(STDERR_FILENO + 1) != 0)
			_exit(1);

		execl(_PATH_BSHELL, "sh", "-c", cmd, (char *)NULL);
		_exit(1);
	default:
		while (waitpid(pid, NULL, 0) == -1 && errno == EINTR)
			/* nothing */;
		break;
	}

	set_blocking(line_fd, 0);
	set_termios();
}

void
connect_command(void)
{
	const char	*cmd;
	pid_t		 pid;

	/*
	 * Fork a program with:
	 *  0 <-> remote tty in
	 *  1 <-> remote tty out
	 *  2 <-> local tty stderr
	 */

	cmd = get_input("Local command?");
	if (cmd == NULL || *cmd == '\0')
		return;

	restore_termios();
	set_blocking(line_fd, 1);

	switch (pid = fork()) {
	case -1:
		cu_err(1, "fork");
	case 0:
		if (signal(SIGINT, SIG_DFL) == SIG_ERR)
			_exit(1);
		if (signal(SIGQUIT, SIG_DFL) == SIG_ERR)
			_exit(1);

		/* attach stdout and stdin to line */
		if (dup2(line_fd, STDOUT_FILENO) == -1)
			_exit(1);
		if (dup2(line_fd, STDIN_FILENO) == -1)
			_exit(1);

		if (closefrom(STDERR_FILENO + 1) != 0)
			_exit(1);

		execl(_PATH_BSHELL, "sh", "-c", cmd, (char *)NULL);
		_exit(1);
	default:
		while (waitpid(pid, NULL, 0) == -1 && errno == EINTR)
			/* nothing */;
		break;
	}

	set_blocking(line_fd, 0);
	set_termios();
}

void
send_file(void)
{
	const char	*file;
	FILE		*f;
	char		 buf[BUFSIZ], *expanded;
	size_t		 len;

	file = get_input("Local file?");
	if (file == NULL || *file == '\0')
		return;

	expanded = tilde_expand(file);
	f = fopen(expanded, "r");
	if (f == NULL) {
		cu_warn("%s", file);
		return;
	}

	while (!feof(f) && !ferror(f)) {
		len = fread(buf, 1, sizeof(buf), f);
		if (len != 0)
			bufferevent_write(line_ev, buf, len);
	}

	fclose(f);
	free(expanded);
}

void
send_xmodem(void)
{
	const char	*file;
	char		*expanded;

	file = get_input("Local file?");
	if (file == NULL || *file == '\0')
		return;

	expanded = tilde_expand(file);
	xmodem_send(expanded);
	free(expanded);
}

void
set_speed(void)
{
	const char	*s, *errstr;
	int		 speed;

	s = get_input("New speed?");
	if (s == NULL || *s == '\0')
		return;

	speed = strtonum(s, 0, UINT_MAX, &errstr);
	if (errstr != NULL) {
		cu_warnx("speed is %s: %s", errstr, s);
		return;
	}

	if (set_line(speed) != 0)
		cu_warn("tcsetattr");
}

void
start_record(void)
{
	const char	*file;

	if (record_file != NULL) {
		fclose(record_file);
		record_file = NULL;
	}

	file = get_input("Record file?");
	if (file == NULL || *file == '\0')
		return;

	record_file = fopen(file, "a");
	if (record_file == NULL)
		cu_warnx("%s", file);
}

void
do_command(char c)
{
	switch (c) {
	case '.':
	case '\004': /* ^D */
		event_loopexit(NULL);
		break;
	case '\032': /* ^Z */
		restore_termios();
		kill(getpid(), SIGTSTP);
		set_termios();
		break;
	case 'C':
		connect_command();
		break;
	case 'D':
		ioctl(line_fd, TIOCCDTR, NULL);
		sleep(1);
		ioctl(line_fd, TIOCSDTR, NULL);
		break;
	case 'R':
		start_record();
		break;
	case 'S':
		set_speed();
		break;
	case 'X':
		send_xmodem();
		break;
	case '$':
		pipe_command();
		break;
	case '>':
		send_file();
		break;
	case '#':
		ioctl(line_fd, TIOCSBRK, NULL);
		sleep(1);
		ioctl(line_fd, TIOCCBRK, NULL);
		break;
	case '~':
		bufferevent_write(line_ev, "~", 1);
		break;
	case '?':
		printf("\r\n"
		    "~#      send break\r\n"
		    "~$      pipe local command to remote host\r\n"
		    "~>      send file to remote host\r\n"
		    "~C      connect program to remote host\r\n"
		    "~D      de-assert DTR line briefly\r\n"
		    "~R      start recording to file\r\n"
		    "~S      set speed\r\n"
		    "~X      send file with XMODEM\r\n"
		    "~?      get this summary\r\n"
		);
		break;
	}
}
@


1.14
log
@Style nits on a couple of casts.
@
text
@d1 1
a1 1
/* $OpenBSD: command.c,v 1.13 2013/11/12 13:54:51 deraadt Exp $ */
d54 1
d85 1
d107 1
d135 1
@


1.13
log
@simpler prototype repairs
@
text
@d1 1
a1 1
/* $OpenBSD: command.c,v 1.12 2012/07/15 06:55:28 nicm Exp $ */
d76 1
a76 1
		execl(_PATH_BSHELL, "sh", "-c", cmd, (void*)NULL);
d124 1
a124 1
		execl(_PATH_BSHELL, "sh", "-c", cmd, (void*)NULL);
@


1.12
log
@Add a command (~D) to drop the DTR line for a second (similar to using
~# for a BREAK). This is useful as it makes some microcontroller boards
reset. From Visa Hankala.
@
text
@d1 1
a1 1
/* $OpenBSD: command.c,v 1.11 2012/07/11 16:45:12 nicm Exp $ */
d39 2
@


1.11
log
@Make ~~ send a ~, pointed out by naddy.
@
text
@d1 1
a1 1
/* $OpenBSD: command.c,v 1.10 2012/07/10 12:47:23 nicm Exp $ */
d232 5
d266 1
@


1.10
log
@Add ~R command to start recording output to a file.
@
text
@d1 1
a1 1
/* $OpenBSD: command.c,v 1.9 2012/07/10 12:20:23 nicm Exp $ */
d251 3
@


1.9
log
@Use function to restore termios and add ~X to help.
@
text
@d1 1
a1 1
/* $OpenBSD: command.c,v 1.8 2012/07/10 11:42:02 nicm Exp $ */
d198 19
d232 3
d258 1
@


1.8
log
@Add builtin XMODEM send support with ~X, only tested with lrz -X so far.
@
text
@d1 1
a1 1
/* $OpenBSD: command.c,v 1.7 2012/07/10 10:56:12 nicm Exp $ */
d237 1
@


1.7
log
@+limits.h.
@
text
@d1 1
a1 1
/* $OpenBSD: command.c,v 1.6 2012/07/10 10:28:05 nicm Exp $ */
d38 1
d163 15
d215 3
@


1.6
log
@Once we've set up termios, lines need to be \r\n terminated, and we need
to reset termios before exiting. So add custom versions of err(),
errx(), warn(), warnx() to handle this.
@
text
@d1 1
a1 1
/* $OpenBSD: command.c,v 1.5 2012/07/10 09:32:40 nicm Exp $ */
d26 1
@


1.5
log
@closefrom(STDERR_FILENO + 1) not STDOUT_FILENO so that output actually appears ;-).
@
text
@d1 1
a1 1
/* $OpenBSD: command.c,v 1.4 2012/07/10 09:10:04 nicm Exp $ */
a23 1
#include <err.h>
d53 1
a53 1
		err(1, "fork");
d104 1
a104 1
		err(1, "fork");
d146 1
a146 1
		warn("%s", file);
d172 1
a172 1
		warnx("speed is %s: %s", errstr, s);
d176 2
a177 1
	set_line(speed);
@


1.4
log
@Implement ~C.
@
text
@d1 1
a1 1
/* $OpenBSD: command.c,v 1.3 2012/07/10 08:42:43 nicm Exp $ */
d70 1
a70 1
		if (closefrom(STDOUT_FILENO + 1) != 0)
d118 1
a118 1
		if (closefrom(STDOUT_FILENO + 1) != 0)
@


1.3
log
@Restore termios and signal handlers before ~$ so ^C will kill child.
@
text
@d1 1
a1 1
/* $OpenBSD: command.c,v 1.2 2012/07/10 08:16:27 nicm Exp $ */
d36 1
d85 48
d193 3
d215 1
@


1.2
log
@Add a ~S escape to change the speed interactively (not using ~s since
may want to use it for variables later).
@
text
@d1 1
a1 1
/* $OpenBSD: command.c,v 1.1 2012/07/10 08:02:27 nicm Exp $ */
d49 2
d60 5
d79 2
@


1.1
log
@Add first cut of replacement for tip/cu. Not linked to the build.

Currently supports only -l and -s (no parity), no variables and ~., ~>,
~$, ~#, ~^Z, ~?. More to come.

Tested by naddy, otto. ok miod deraadt
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d104 19
d135 3
d151 2
d154 1
a154 1
		    "~$      pipe local command to remote host\r\n"
d156 1
a156 1
		    "~#      send break\r\n");
@

