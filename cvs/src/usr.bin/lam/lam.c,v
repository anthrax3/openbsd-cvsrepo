head	1.19;
access;
symbols
	OPENBSD_6_2:1.19.0.6
	OPENBSD_6_2_BASE:1.19
	OPENBSD_6_1:1.19.0.8
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.19.0.4
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.19.0.2
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.17.0.6
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.2
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.16.0.6
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.4
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.14.0.16
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.14
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.12
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.10
	OPENBSD_5_0:1.14.0.8
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.6
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.4
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.2
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.13.0.12
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.8
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.6
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.4
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.2
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.12.0.10
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.8
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.6
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.4
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.2
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.11.0.2
	OPENBSD_3_6_BASE:1.11
	OPENBSD_3_5:1.10.0.2
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.4.0.6
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.2.0.22
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.20
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.19
date	2015.10.09.01.37.08;	author deraadt;	state Exp;
branches;
next	1.18;
commitid	sbrB3Q5CNxcwZpfU;

1.18
date	2015.10.07.04.03.57;	author deraadt;	state Exp;
branches;
next	1.17;
commitid	J0dd1rnFIG1MyTNG;

1.17
date	2015.01.16.06.40.09;	author deraadt;	state Exp;
branches;
next	1.16;
commitid	Uu5nFG3wCl0LACBb;

1.16
date	2013.11.20.21.22.17;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2013.11.15.22.20.04;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2009.10.27.23.59.39;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2007.06.26.05.14.52;	author ray;	state Exp;
branches;
next	1.12;

1.12
date	2004.12.27.23.37.37;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2004.07.03.21.00.37;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2003.12.09.00.55.18;	author mickey;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.10.22.20.47;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.03.02.56.09;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.04.21.00.42.49;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2003.04.06.02.40.21;	author krw;	state Exp;
branches;
next	1.5;

1.5
date	2003.04.05.16.24.23;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.16.21.27.47;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.11.19.19.02.14;	author mpech;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.34.49;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.28;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.28;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Change all tame callers to namechange to pledge(2).
@
text
@/*	$OpenBSD: lam.c,v 1.18 2015/10/07 04:03:57 deraadt Exp $	*/
/*	$NetBSD: lam.c,v 1.2 1994/11/14 20:27:42 jtc Exp $	*/

/*-
 * Copyright (c) 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 *	lam - laminate files
 *	Author:  John Kunze, UCB
 */

#include <sys/param.h>	/* NOFILE_MAX */

#include <ctype.h>
#include <err.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#define	BIGBUFSIZ	5 * BUFSIZ

struct	openfile {		/* open file structure */
	FILE	*fp;		/* file pointer */
	short	eof;		/* eof flag */
	short	pad;		/* pad flag for missing columns */
	char	eol;		/* end of line character */
	char	*sepstring;	/* string to print before each line */
	char	*format;	/* printf(3) style string spec. */
}	input[NOFILE_MAX + 1];	/* last one is for the last -s arg. */
#define INPUTSIZE sizeof(input) / sizeof(*input)

int	numfiles;		/* number of open files */
int	nofinalnl;		/* normally append \n to each output line */
char	line[BIGBUFSIZ];
char	*linep;

void	 usage(void);
char	*gatherline(struct openfile *);
void	 getargs(int, char *[]);
char	*pad(struct openfile *);

int
main(int argc, char *argv[])
{
	int i;

	if (pledge("stdio rpath", NULL) == -1)
		err(1, "pledge");

	/* Process arguments, set numfiles to file argument count. */
	getargs(argc, argv);
	if (numfiles == 0)
		usage();
	/* Concatenate lines from each file, then print. */
	for (;;) {
		linep = line;
		/*
		 * For each file that has a line to print, numfile is
		 * incremented.  Thus if numfiles is 0, we are done.
		 */
		numfiles = 0;
		for (i = 0; i < INPUTSIZE - 1 && input[i].fp != NULL; i++)
			linep = gatherline(&input[i]);
		if (numfiles == 0)
			exit(0);
		fputs(line, stdout);
		/* Print terminating -s argument. */
		fputs(input[i].sepstring, stdout);
		if (!nofinalnl)
			putchar('\n');
	}
}

void
getargs(int argc, char *argv[])
{
	struct openfile *ip = input;
	char *p;
	int ch, P, S, F, T;
	size_t siz;

	P = S = F = T = 0;		/* capitalized options */
	while (optind < argc) {
		switch (ch = getopt(argc, argv, "F:f:P:p:S:s:T:t:")) {
		case 'F': case 'f':
			F = (ch == 'F');
			/* Validate format string argument. */
			for (p = optarg; *p != '\0'; p++)
				if (!isdigit((unsigned char)*p) &&
				    *p != '.' && *p != '-')
					errx(1, "%s: invalid width specified",
					     optarg);
			/* '%' + width + 's' + '\0' */
			siz = p - optarg + 3;
			if ((p = realloc(ip->format, siz)) == NULL)
				err(1, NULL);
			snprintf(p, siz, "%%%ss", optarg);
			ip->format = p;
			break;
		case 'P': case 'p':
			P = (ch == 'P');
			ip->pad = 1;
			break;
		case 'S': case 's':
			S = (ch == 'S');
			ip->sepstring = optarg;
			break;
		case 'T': case 't':
			T = (ch == 'T');
			if (strlen(optarg) != 1)
				usage();
			ip->eol = optarg[0];
			nofinalnl = 1;
			break;
		case -1:
			if (optind >= argc)
				break;		/* to support "--" */
			/* This is a file, not a flag. */
			++numfiles;
			if (numfiles >= INPUTSIZE)
				errx(1, "too many files");
			if (strcmp(argv[optind], "-") == 0)
				ip->fp = stdin;
			else if ((ip->fp = fopen(argv[optind], "r")) == NULL)
				err(1, "%s", argv[optind]);
			ip->pad = P;
			if (ip->sepstring == NULL)
				ip->sepstring = S ? (ip-1)->sepstring : "";
			if (ip->format == NULL)
				ip->format = (P || F) ? (ip-1)->format : "%s";
			if (ip->eol == '\0')
				ip->eol = T ? (ip-1)->eol : '\n';
			ip++;
			optind++;
			break;
		default:
			usage();
			/* NOTREACHED */
		}
	}
	ip->fp = NULL;
	if (ip->sepstring == NULL)
		ip->sepstring = "";
}

char *
pad(struct openfile *ip)
{
	size_t n;
	char *lp = linep;

	n = strlcpy(lp, ip->sepstring,  line + sizeof(line) - lp);
	lp += (n < line + sizeof(line) - lp) ? n : strlen(lp);
	if (ip->pad) {
		n = snprintf(lp, line + sizeof(line) - lp, ip->format, "");
		if (n > 0)
			lp += (n < line + sizeof(line) - lp) ? n : strlen(lp);
	}
	return (lp);
}

/*
 * Grab line from file, appending to linep.  Increments numfiles if file
 * is still open.
 */
char *
gatherline(struct openfile *ip)
{
	size_t n;
	char s[BUFSIZ];
	char *p;
	char *lp = linep;
	char *end = s + BUFSIZ - 1;
	int c;

	if (ip->eof)
		return (pad(ip));
	for (p = s; (c = fgetc(ip->fp)) != EOF && p < end; p++)
		if ((*p = c) == ip->eol)
			break;
	*p = '\0';
	if (c == EOF) {
		ip->eof = 1;
		if (ip->fp == stdin)
			fclose(stdin);
		return (pad(ip));
	}
	/* Something will be printed. */
	numfiles++;
	n = strlcpy(lp, ip->sepstring, line + sizeof(line) - lp);
	lp += (n < line + sizeof(line) - lp) ? n : strlen(lp);
	n = snprintf(lp, line + sizeof(line) - lp, ip->format, s);
	if (n > 0)
		lp += (n < line + sizeof(line) - lp) ? n : strlen(lp);
	return (lp);
}

void
usage(void)
{
	extern char *__progname;

	fprintf(stderr,
	    "usage: %s [-f min.max] [-p min.max] [-s sepstring] [-t c] file ...\n",
	    __progname);
	exit(1);
}
@


1.18
log
@We continue our tour through obscure BSD <word escapes me>.   This stdio-based
program may open files arbitrarily, so tame "stdio rpath" it from the start.
@
text
@d1 1
a1 1
/*	$OpenBSD: lam.c,v 1.17 2015/01/16 06:40:09 deraadt Exp $	*/
d74 2
a75 2
	if (tame("stdio rpath", NULL) == -1)
		err(1, "tame");
@


1.17
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: lam.c,v 1.16 2013/11/20 21:22:17 deraadt Exp $	*/
d73 3
@


1.16
log
@unsigned char casts for ctype.h macros, when dealing with optarg
ok ratchov
@
text
@d1 1
a1 1
/*	$OpenBSD: lam.c,v 1.15 2013/11/15 22:20:04 millert Exp $	*/
d38 1
a38 1
#include <sys/param.h>
@


1.15
log
@Include unistd.h as it is the standard location for getopt().
@
text
@d1 1
a1 1
/*	$OpenBSD: lam.c,v 1.14 2009/10/27 23:59:39 deraadt Exp $	*/
d113 2
a114 1
				if (!isdigit(*p) && *p != '.' && *p != '-')
@


1.14
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: lam.c,v 1.13 2007/06/26 05:14:52 ray Exp $	*/
d45 1
@


1.13
log
@Fix buffer overflow reported by Tobias Stoeckmann by increasing the
number of file descriptors to the correct limit, NOFILE_MAX, and
improve calculation of open file count.

OK moritz
@
text
@d1 1
a1 1
/*	$OpenBSD: lam.c,v 1.12 2004/12/27 23:37:37 deraadt Exp $	*/
a31 13

#ifndef lint
static const char copyright[] =
"@@(#) Copyright (c) 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static const char sccsid[] = "@@(#)lam.c	8.1 (Berkeley) 6/6/93";
#endif
static const char rcsid[] = "$OpenBSD: lam.c,v 1.12 2004/12/27 23:37:37 deraadt Exp $";
#endif /* not lint */
@


1.12
log
@be aware of snprintf potentially returning -1
@
text
@d1 1
a1 1
/*	$OpenBSD: lam.c,v 1.11 2004/07/03 21:00:37 millert Exp $	*/
d43 1
a43 1
static const char rcsid[] = "$OpenBSD: lam.c,v 1.11 2004/07/03 21:00:37 millert Exp $";
d51 2
a54 1
#include <limits.h>
d68 2
a69 1
}	input[OPEN_MAX];
d71 1
a71 1
int	morefiles;		/* set by getargs(), changed by gatherline() */
d84 1
a84 1
	struct	openfile *ip;
d86 1
d88 1
a88 1
	if (!morefiles)
d90 1
d93 8
a100 3
		for (ip = input; ip->fp != NULL; ip++)
			linep = gatherline(ip);
		if (!morefiles)
d103 2
a104 1
		fputs(ip->sepstring, stdout);
d153 4
a156 1
			morefiles++;
d197 4
a220 1
		morefiles--;
d223 2
@


1.11
log
@Fixes from Jared Yanovich with help from myself and cloder@@; OK otto@@
o make lam(1) use getopt(3) and err(3).
o fix off-by-one error
o use OPEN_MAX instead of rolling our own
o a little KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: lam.c,v 1.10 2003/12/09 00:55:18 mickey Exp $	*/
d43 1
a43 1
static const char rcsid[] = "$OpenBSD: lam.c,v 1.10 2003/12/09 00:55:18 mickey Exp $";
d178 2
a179 1
		lp += (n < line + sizeof(line) - lp) ? n : strlen(lp);
d210 2
a211 1
	lp += (n < line + sizeof(line) - lp) ? n : strlen(lp);
@


1.10
log
@use err/warn and better usage print
@
text
@d1 1
a1 1
/*	$OpenBSD: lam.c,v 1.9 2003/06/10 22:20:47 deraadt Exp $	*/
d34 1
a34 1
static char copyright[] =
d41 1
a41 1
static char sccsid[] = "@@(#)lam.c	8.1 (Berkeley) 6/6/93";
d43 1
a43 1
static char rcsid[] = "$OpenBSD: lam.c,v 1.9 2003/06/10 22:20:47 deraadt Exp $";
d51 3
a57 1
#define	MAXOFILES	20
d67 1
a67 1
}	input[MAXOFILES];
d74 1
a74 1
void	 error(char *, char *);
d76 1
a76 1
void	 getargs(char *[]);
d84 1
a84 1
	getargs(argv);
d86 1
a86 1
		error("lam - laminate files", "");
d101 1
a101 1
getargs(char *av[])
d103 1
a103 1
	struct	openfile *ip = input;
d105 2
a106 4
	char *c;
	static char fmtbuf[BUFSIZ];
	char *fmtp = fmtbuf;
	int P, S, F, T;
d109 34
a142 2
	while ((p = *++av) != NULL) {
		if (*p != '-' || !p[1]) {
d144 1
a144 1
			if (*p == '-')
d146 2
a147 2
			else if ((ip->fp = fopen(p, "r")) == NULL)
				err(1, p);
d149 6
a154 6
			if (!ip->sepstring)
				ip->sepstring = (S ? (ip-1)->sepstring : "");
			if (!ip->format)
				ip->format = ((P || F) ? (ip-1)->format : "%s");
			if (!ip->eol)
				ip->eol = (T ? (ip-1)->eol : '\n');
d156 1
a156 33
			continue;
		}
		switch (*(c = ++p) | 040) {
		case 's':
			if (*++p || (p = *++av))
				ip->sepstring = p;
			else
				error("Need string after -%s", c);
			S = (*c == 'S' ? 1 : 0);
			break;
		case 't':
			if (*++p || (p = *++av))
				ip->eol = *p;
			else
				error("Need character after -%s", c);
			T = (*c == 'T' ? 1 : 0);
			nofinalnl = 1;
			break;
		case 'p':
			ip->pad = 1;
			P = (*c == 'P' ? 1 : 0);
		case 'f':
			F = (*c == 'F' ? 1 : 0);
			if (*++p || (p = *++av)) {
				fmtp += strlen(fmtp) + 1;
				if (fmtp >= fmtbuf + BUFSIZ)
					error("No more format space", "");
				snprintf(fmtp, fmtbuf + BUFSIZ - fmtp,
				    "%%%ss", p);
				ip->format = fmtp;
			}
			else
				error("Need string after -%s", c);
d159 2
a160 2
			error("What do you mean by -%s?", c);
			break;
d164 1
a164 1
	if (!ip->sepstring)
d190 1
a190 1
	char *end = s + BUFSIZ;
d208 1
a208 1
	n = snprintf(lp, line + sizeof line - lp, ip->format, s);
d214 1
a214 1
error(char *msg, char *s)
d217 1
a217 1
	warnx(msg, s);
d219 1
a219 1
	    "Usage: %s [ -[fp] min.max ] [ -s sepstring ] [ -t c ] file ...\n",
a220 7
	if (strncmp("lam - ", msg, 6) == 0)
		fprintf(stderr, "Options:\n"
		    "\t-f min.max\tfield widths for file fragments\n"
		    "\t-p min.max\tlike -f, but pad missing fragments\n"
		    "\t-s sepstring\tfragment separator\n"
"\t-t c\t\tinput line terminator is c, no \\n after output lines\n"
		    "\tCapitalized options affect more than one file.\n");
@


1.9
log
@mostly ansi cleanup; pval ok
@
text
@d1 1
a1 1
/*	$OpenBSD: lam.c,v 1.8 2003/06/03 02:56:09 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: lam.c,v 1.8 2003/06/03 02:56:09 millert Exp $";
d114 2
a115 4
			else if ((ip->fp = fopen(p, "r")) == NULL) {
				perror(p);
				exit(1);
			}
d216 2
a217 2
	fprintf(stderr, "lam: ");
	fprintf(stderr, msg, s);
d219 2
a220 1
"\nUsage:  lam [ -[fp] min.max ] [ -s sepstring ] [ -t c ] file ...\n");
d222 6
a227 6
		fprintf(stderr, "Options:\n\t%s\t%s\t%s\t%s\t%s",
		    "-f min.max	field widths for file fragments\n",
		    "-p min.max	like -f, but pad missing fragments\n",
		    "-s sepstring	fragment separator\n",
"-t c		input line terminator is c, no \\n after output lines\n",
		    "Capitalized options affect more than one file.\n");
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: lam.c,v 1.7 2003/04/21 00:42:49 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: lam.c,v 1.7 2003/04/21 00:42:49 millert Exp $";
d78 1
a78 3
main(argc, argv)
	int argc;
	char *argv[];
d99 1
a99 2
getargs(av)
	char *av[];
d171 1
a171 2
pad(ip)
	struct openfile *ip;
d186 1
a186 2
gatherline(ip)
	struct openfile *ip;
d216 1
a216 2
error(msg, s)
	char *msg, *s;
@


1.7
log
@Use strlcpy() and snprintf() in favor of inline strcpy() and sprintf().
Based on a diff from krw but this uses the strlcpy() / snprintf() return
values.  millert tested, krw approved...
@
text
@d1 1
a1 1
/*	$OpenBSD: lam.c,v 1.6 2003/04/06 02:40:21 krw Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d43 1
a43 1
static char rcsid[] = "$OpenBSD: lam.c,v 1.6 2003/04/06 02:40:21 krw Exp $";
@


1.6
log
@Consider 0 characters left to be a lack of format space.

ok deraadt@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lam.c,v 1.5 2003/04/05 16:24:23 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: lam.c,v 1.5 2003/04/05 16:24:23 deraadt Exp $";
d181 1
a181 1
	char *p = ip->sepstring;
d184 2
a185 2
	while (*p)
		*lp++ = *p++;
d187 2
a188 2
		sprintf(lp, ip->format, "");
		lp += strlen(lp);
d197 1
a198 1
	int c;
d202 1
d217 4
a220 5
	p = ip->sepstring;
	while (*p)
		*lp++ = *p++;
	sprintf(lp, ip->format, s);
	lp += strlen(lp);
@


1.5
log
@simple snprintf; miod ok
@
text
@d1 1
a1 1
/*	$OpenBSD: lam.c,v 1.4 2002/02/16 21:27:47 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: lam.c,v 1.4 2002/02/16 21:27:47 millert Exp $";
d158 1
a158 1
				if (fmtp > fmtbuf + BUFSIZ)
@


1.4
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: lam.c,v 1.3 2001/11/19 19:02:14 mpech Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: lam.c,v 1.3 2001/11/19 19:02:14 mpech Exp $";
d160 2
a161 1
				sprintf(fmtp, "%%%ss", p);
@


1.3
log
@kill more registers

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: lam.c,v 1.2 1996/06/26 05:34:49 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: lam.c,v 1.2 1996/06/26 05:34:49 deraadt Exp $";
d76 4
a79 4
void	 error __P((char *, char *));
char	*gatherline __P((struct openfile *));
void	 getargs __P((char *[]));
char	*pad __P((struct openfile *));
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: lam.c,v 1.2 1994/11/14 20:27:42 jtc Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: lam.c,v 1.2 1994/11/14 20:27:42 jtc Exp $";
d86 1
a86 1
	register struct	openfile *ip;
d108 3
a110 3
	register struct	openfile *ip = input;
	register char *p;
	register char *c;
d180 2
a181 2
	register char *p = ip->sepstring;
	register char *lp = linep;
d197 3
a199 3
	register int c;
	register char *p;
	register char *lp = linep;
@


1.1
log
@Initial revision
@
text
@d1 1
d47 1
a47 1
static char rcsid[] = "$NetBSD: lam.c,v 1.2 1994/11/14 20:27:42 jtc Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
