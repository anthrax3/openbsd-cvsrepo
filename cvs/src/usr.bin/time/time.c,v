head	1.25;
access;
symbols
	OPENBSD_6_2:1.25.0.4
	OPENBSD_6_2_BASE:1.25
	OPENBSD_6_1:1.21.0.8
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.21.0.4
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.21.0.2
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.20.0.6
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.20.0.2
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.19.0.8
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.19.0.6
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.19.0.2
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.18.0.14
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.12
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.10
	OPENBSD_5_0:1.18.0.8
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.18.0.6
	OPENBSD_4_9_BASE:1.18
	OPENBSD_4_8:1.18.0.4
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.18.0.2
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.16.0.16
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.12
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.10
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.8
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.16.0.6
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.16.0.4
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.16.0.2
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.15.0.12
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.15.0.10
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.15.0.8
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.15.0.6
	OPENBSD_3_6_BASE:1.15
	OPENBSD_3_5:1.15.0.4
	OPENBSD_3_5_BASE:1.15
	OPENBSD_3_4:1.15.0.2
	OPENBSD_3_4_BASE:1.15
	OPENBSD_3_3:1.13.0.4
	OPENBSD_3_3_BASE:1.13
	OPENBSD_3_2:1.13.0.2
	OPENBSD_3_2_BASE:1.13
	OPENBSD_3_1:1.12.0.2
	OPENBSD_3_1_BASE:1.12
	OPENBSD_3_0:1.9.0.2
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.6
	OPENBSD_2_8:1.6.0.4
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.2
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.5.0.6
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.4
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.4.0.6
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.25
date	2017.08.21.13.38.02;	author schwarze;	state Exp;
branches;
next	1.24;
commitid	3d5k9gvmrtAEWz0A;

1.24
date	2017.07.22.17.01.09;	author schwarze;	state Exp;
branches;
next	1.23;
commitid	NnJye2bssyNBq4lM;

1.23
date	2017.07.22.16.20.10;	author schwarze;	state Exp;
branches;
next	1.22;
commitid	GBEcGaOmtxKxJ6aK;

1.22
date	2017.07.13.06.39.54;	author tedu;	state Exp;
branches;
next	1.21;
commitid	aySfnnXcBaXJG9Pn;

1.21
date	2015.10.10.14.49.23;	author deraadt;	state Exp;
branches;
next	1.20;
commitid	NqcsW7sVq1IiA1aS;

1.20
date	2015.01.16.06.40.13;	author deraadt;	state Exp;
branches;
next	1.19;
commitid	Uu5nFG3wCl0LACBb;

1.19
date	2013.04.16.23.43.00;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2009.10.27.23.59.44;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2009.07.14.17.24.08;	author sobrado;	state Exp;
branches;
next	1.16;

1.16
date	2006.05.17.13.31.22;	author grunk;	state Exp;
branches;
next	1.15;

1.15
date	2003.06.10.22.20.53;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2003.06.03.02.56.18;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2002.05.26.09.27.10;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2002.02.16.21.27.55;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2001.11.22.10.42.39;	author mpech;	state Exp;
branches;
next	1.10;

1.10
date	2001.11.19.19.02.16;	author mpech;	state Exp;
branches;
next	1.9;

1.9
date	2001.07.12.05.17.23;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2001.06.13.17.43.38;	author art;	state Exp;
branches;
next	1.7;

1.7
date	2001.06.13.13.46.54;	author art;	state Exp;
branches;
next	1.6;

1.6
date	2000.04.29.16.46.36;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	98.09.02.06.39.16;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.01.15.23.43.21;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.10.12.20.36.06;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.40.39;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.46.16;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.46.16;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.25
log
@Minor cleanup, joint work with Scott Cheloha <scottcheloha at gmail dot com>:
* Delete bogus error message and correct exit status when dying from SIGKILL.
* Prefer warn(3) over perror(3) for clarity.
* Return from main() rather than exit(3).
* Simplify kill(getpid(), ...) to raise(...).
* Drop obvious /* NOTREACHED */.
No objections raised when shown on tech@@.
@
text
@/*	$OpenBSD: time.c,v 1.24 2017/07/22 17:01:09 schwarze Exp $	*/
/*	$NetBSD: time.c,v 1.7 1995/06/27 00:34:00 jtc Exp $	*/

/*
 * Copyright (c) 1987, 1988, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/time.h>
#include <sys/resource.h>
#include <sys/wait.h>
#include <sys/sysctl.h>

#include <err.h>
#include <errno.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

__dead void usage(void);

int
main(int argc, char *argv[])
{
	struct rusage ru;
	struct timespec before, after, during;
	int ch, exitonsig, lflag, portableflag, status;
	pid_t pid;

	if (pledge("stdio proc exec", NULL) == -1)
		err(1, "pledge");

	exitonsig = lflag = portableflag = 0;

	while ((ch = getopt(argc, argv, "lp")) != -1) {
		switch(ch) {
		case 'l':
			lflag = 1;
			break;
		case 'p':
			portableflag = 1;
			break;
		default:
			usage();
		}
	}

	argc -= optind;
	argv += optind;

	if (argc < 1)
		usage();

	clock_gettime(CLOCK_MONOTONIC, &before);
	switch(pid = vfork()) {
	case -1:			/* error */
		warn("fork");
		return 1;
	case 0:				/* child */
		execvp(*argv, argv);
		warn("%s", *argv);
		_exit((errno == ENOENT) ? 127 : 126);
	}

	/* parent */
	signal(SIGINT, SIG_IGN);
	signal(SIGQUIT, SIG_IGN);
	while (wait3(&status, 0, &ru) != pid)
		;
	clock_gettime(CLOCK_MONOTONIC, &after);
	if (WIFSIGNALED(status))
		exitonsig = WTERMSIG(status);
	if (!WIFEXITED(status))
		fprintf(stderr, "Command terminated abnormally.\n");
	timespecsub(&after, &before, &during);

	if (portableflag) {
		fprintf(stderr, "real %9lld.%02ld\n",
			(long long)during.tv_sec, during.tv_nsec/10000000);
		fprintf(stderr, "user %9lld.%02ld\n",
			(long long)ru.ru_utime.tv_sec, ru.ru_utime.tv_usec/10000);
		fprintf(stderr, "sys  %9lld.%02ld\n",
			(long long)ru.ru_stime.tv_sec, ru.ru_stime.tv_usec/10000);
	} else {
		fprintf(stderr, "%9lld.%02ld real ",
			(long long)during.tv_sec, during.tv_nsec/10000000);
		fprintf(stderr, "%9lld.%02ld user ",
			(long long)ru.ru_utime.tv_sec, ru.ru_utime.tv_usec/10000);
		fprintf(stderr, "%9lld.%02ld sys\n",
			(long long)ru.ru_stime.tv_sec, ru.ru_stime.tv_usec/10000);
	}

	if (lflag) {
		int hz;
		long ticks;
		int mib[2];
		struct clockinfo clkinfo;
		size_t size;

		mib[0] = CTL_KERN;
		mib[1] = KERN_CLOCKRATE;
		size = sizeof(clkinfo);
		if (sysctl(mib, 2, &clkinfo, &size, NULL, 0) < 0)
			err(1, "sysctl");

		hz = clkinfo.hz;

		ticks = hz * (ru.ru_utime.tv_sec + ru.ru_stime.tv_sec) +
		     hz * (ru.ru_utime.tv_usec + ru.ru_stime.tv_usec) / 1000000;

		fprintf(stderr, "%10ld  %s\n",
			ru.ru_maxrss, "maximum resident set size");
		fprintf(stderr, "%10ld  %s\n", ticks ? ru.ru_ixrss / ticks : 0,
			"average shared memory size");
		fprintf(stderr, "%10ld  %s\n", ticks ? ru.ru_idrss / ticks : 0,
			"average unshared data size");
		fprintf(stderr, "%10ld  %s\n", ticks ? ru.ru_isrss / ticks : 0,
			"average unshared stack size");
		fprintf(stderr, "%10ld  %s\n",
			ru.ru_minflt, "minor page faults");
		fprintf(stderr, "%10ld  %s\n",
			ru.ru_majflt, "major page faults");
		fprintf(stderr, "%10ld  %s\n",
			ru.ru_nswap, "swaps");
		fprintf(stderr, "%10ld  %s\n",
			ru.ru_inblock, "block input operations");
		fprintf(stderr, "%10ld  %s\n",
			ru.ru_oublock, "block output operations");
		fprintf(stderr, "%10ld  %s\n",
			ru.ru_msgsnd, "messages sent");
		fprintf(stderr, "%10ld  %s\n",
			ru.ru_msgrcv, "messages received");
		fprintf(stderr, "%10ld  %s\n",
			ru.ru_nsignals, "signals received");
		fprintf(stderr, "%10ld  %s\n",
			ru.ru_nvcsw, "voluntary context switches");
		fprintf(stderr, "%10ld  %s\n",
			ru.ru_nivcsw, "involuntary context switches");
	}

	if (exitonsig) {
		if (signal(exitonsig, SIG_DFL) == SIG_ERR)
			return 128 + exitonsig;
		else
			raise(exitonsig);
	}
	return WIFEXITED(status) ? WEXITSTATUS(status) : EXIT_FAILURE;
}

__dead void
usage(void)
{
	fprintf(stderr, "usage: %s [-lp] utility [argument ...]\n",
	    getprogname());
	exit(1);
}
@


1.24
log
@use automatic variables rather than globals; no functional change;
from ScottCheloha at gmail dot com on tech, tweaked by me
@
text
@d1 1
a1 1
/*	$OpenBSD: time.c,v 1.23 2017/07/22 16:20:10 schwarze Exp $	*/
a69 1
			/* NOTREACHED */
d82 2
a83 3
		perror("time");
		exit(1);
		/* NOTREACHED */
d86 1
a86 1
		perror(*argv);
a87 1
		/* NOTREACHED */
d168 1
a168 1
			perror("signal");
d170 1
a170 1
			kill(getpid(), exitonsig);
d172 1
a172 1
	exit(WIFEXITED(status) ? WEXITSTATUS(status) : EXIT_FAILURE);
@


1.23
log
@no need to cast signal(3) and fprintf(3) return values to (void)
in standard use cases with constant arguments,
and prefer getprogname(3) over __progname;
from ScottCheloha at gmail dot com on tech
@
text
@d1 1
a1 1
/*	$OpenBSD: time.c,v 1.22 2017/07/13 06:39:54 tedu Exp $	*/
a44 3
int lflag;
int portableflag;

d50 3
a53 4
	int ch, status;
	struct timespec before, after, during;
	struct rusage ru;
	int exitonsig = 0;
d57 2
@


1.22
log
@use monotonic clock for computing elapsed time
from Scott Cheloha. ok dlg.
@
text
@d1 1
a1 1
/*	$OpenBSD: time.c,v 1.21 2015/10/10 14:49:23 deraadt Exp $	*/
d96 2
a97 2
	(void)signal(SIGINT, SIG_IGN);
	(void)signal(SIGQUIT, SIG_IGN);
d183 2
a184 4
	extern char *__progname;

	(void)fprintf(stderr, "usage: %s [-lp] utility [argument ...]\n",
	    __progname);
@


1.21
log
@pledge "stdio proc exec".  relies on two recent kernel fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD: time.c,v 1.20 2015/01/16 06:40:13 deraadt Exp $	*/
d55 1
a55 1
	struct timeval before, after;
d82 1
a82 1
	gettimeofday(&before, (struct timezone *)NULL);
d100 1
a100 1
	gettimeofday(&after, (struct timezone *)NULL);
d105 1
a105 1
	timersub(&after, &before, &after);
d109 1
a109 1
			(long long)after.tv_sec, after.tv_usec/10000);
a114 1

d116 1
a116 1
			(long long)after.tv_sec, after.tv_usec/10000);
@


1.20
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: time.c,v 1.19 2013/04/16 23:43:00 deraadt Exp $	*/
d59 2
@


1.19
log
@handle large time_t types; ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: time.c,v 1.18 2009/10/27 23:59:44 deraadt Exp $	*/
a32 1
#include <sys/param.h>
@


1.18
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: time.c,v 1.17 2009/07/14 17:24:08 sobrado Exp $	*/
d107 6
a112 6
		fprintf(stderr, "real %9ld.%02ld\n",
			after.tv_sec, after.tv_usec/10000);
		fprintf(stderr, "user %9ld.%02ld\n",
			ru.ru_utime.tv_sec, ru.ru_utime.tv_usec/10000);
		fprintf(stderr, "sys  %9ld.%02ld\n",
			ru.ru_stime.tv_sec, ru.ru_stime.tv_usec/10000);
d115 6
a120 6
		fprintf(stderr, "%9ld.%02ld real ",
			after.tv_sec, after.tv_usec/10000);
		fprintf(stderr, "%9ld.%02ld user ",
			ru.ru_utime.tv_sec, ru.ru_utime.tv_usec/10000);
		fprintf(stderr, "%9ld.%02ld sys\n",
			ru.ru_stime.tv_sec, ru.ru_stime.tv_usec/10000);
@


1.17
log
@unveil that time(1) accepts optional arguments for the utility operand,
this way we not only improve the synopsis accuracy but also match
descriptions provided by IEEE Std 1003.1-2008, FreeBSD and NetBSD
for this command; while here, synchronize the operand name.

description for the optional arguments proposed by jmc@@

ok jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: time.c,v 1.16 2006/05/17 13:31:22 grunk Exp $	*/
a31 13

#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1987, 1988, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)time.c	8.1 (Berkeley) 6/6/93";
#endif
static char rcsid[] = "$OpenBSD: time.c,v 1.16 2006/05/17 13:31:22 grunk Exp $";
#endif /* not lint */
@


1.16
log
@remove useless case that is handled by default anyway
zap trailing blanks

ok otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: time.c,v 1.15 2003/06/10 22:20:53 deraadt Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: time.c,v 1.15 2003/06/10 22:20:53 deraadt Exp $";
d198 2
a199 1
	(void)fprintf(stderr, "usage: %s [-lp] command\n", __progname);
@


1.15
log
@mostly ansi cleanup; pval ok
@
text
@d1 1
a1 1
/*	$OpenBSD: time.c,v 1.14 2003/06/03 02:56:18 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: time.c,v 1.14 2003/06/03 02:56:18 millert Exp $";
a81 1
		case '?':
d90 2
a91 2
	
	if (argc < 1) 
d120 1
a120 1
		fprintf(stderr, "real %9ld.%02ld\n", 
d128 1
a128 1
		fprintf(stderr, "%9ld.%02ld real ", 
d193 1
a193 1
__dead void 
d196 1
a196 1
	extern char *__progname;   
@


1.14
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: time.c,v 1.13 2002/05/26 09:27:10 deraadt Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: time.c,v 1.13 2002/05/26 09:27:10 deraadt Exp $";
d65 1
a65 3
main(argc, argv)
	int argc;
	char **argv;
d195 1
a195 1
usage()
@


1.13
log
@pid_t cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: time.c,v 1.12 2002/02/16 21:27:55 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d43 1
a43 1
static char rcsid[] = "$OpenBSD: time.c,v 1.12 2002/02/16 21:27:55 millert Exp $";
@


1.12
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: time.c,v 1.11 2001/11/22 10:42:39 mpech Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: time.c,v 1.11 2001/11/22 10:42:39 mpech Exp $";
d73 1
a73 1
	int pid;
@


1.11
log
@o) fix return value;
o) initial KNF;

millert@@  help & ok;
@
text
@d1 1
a1 1
/*	$OpenBSD: time.c,v 1.10 2001/11/19 19:02:16 mpech Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: time.c,v 1.10 2001/11/19 19:02:16 mpech Exp $";
d66 1
a66 1
__dead void usage __P((void));
@


1.10
log
@kill more registers

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: time.c,v 1.9 2001/07/12 05:17:23 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: time.c,v 1.9 2001/07/12 05:17:23 deraadt Exp $";
d55 3
a60 1
#include <err.h>
a61 1
#include <errno.h>
d66 2
a72 1
	extern int optind;
d79 6
a84 3
	lflag = 0;
	while ((ch = getopt(argc, argv, "lp")) != -1)
		switch((char)ch) {
a87 3
		case 'l':
			lflag = 1;
			break;
d90 2
a91 2
			fprintf(stderr, "usage: time [-lp] command.\n");
			exit(1);
d93 1
d95 1
a95 2
	if (!(argc -= optind))
		exit(0);
d97 3
d198 9
@


1.9
log
@first pass at a -Wall cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: time.c,v 1.8 2001/06/13 17:43:38 art Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: time.c,v 1.8 2001/06/13 17:43:38 art Exp $";
d71 1
a71 1
	register int pid;
@


1.8
log
@page reclaims -> minor page faults
page faults -> major page faults.
millert@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: time.c,v 1.7 2001/06/13 13:46:54 art Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: time.c,v 1.7 2001/06/13 13:46:54 art Exp $";
d58 1
@


1.7
log
@Correctly get 'hz' with sysctl. Don't assume it's 100 (it's not on alpha).
@
text
@d1 1
a1 1
/*	$OpenBSD: time.c,v 1.6 2000/04/29 16:46:36 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: time.c,v 1.6 2000/04/29 16:46:36 millert Exp $";
d164 1
a164 1
			ru.ru_minflt, "page reclaims");
d166 1
a166 1
			ru.ru_majflt, "page faults");
@


1.6
log
@compare return value of signal(3) to SIG_ERR, not < 0 as it has not returned
an int for ages...
@
text
@d1 1
a1 1
/*	$OpenBSD: time.c,v 1.5 1998/09/02 06:39:16 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: time.c,v 1.5 1998/09/02 06:39:16 deraadt Exp $";
d50 1
a50 1
#include <sys/types.h>
d54 1
d138 1
a138 1
		int hz = 100;			/* XXX */
d140 11
@


1.5
log
@using kill() like WTERMSIG(), make exit status more accurate; cracauer
@
text
@d1 1
a1 1
/*	$OpenBSD: time.c,v 1.4 1997/01/15 23:43:21 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: time.c,v 1.4 1997/01/15 23:43:21 millert Exp $";
d174 1
a174 1
		if (signal(exitonsig, SIG_DFL) < 0)
d177 1
a177 1
		kill(getpid(), exitonsig);
@


1.4
log
@getopt(3) returns -1 when out of args, not EOF, whee!
@
text
@d1 1
a1 1
/*	$OpenBSD: time.c,v 1.3 1996/10/12 20:36:06 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: time.c,v 1.3 1996/10/12 20:36:06 deraadt Exp $";
d73 1
d113 2
d173 6
@


1.3
log
@correct default exitcode; netbsd pr#2838, Arne.Juul@@idt.ntnu.no
@
text
@d1 1
a1 1
/*	$OpenBSD: time.c,v 1.2 1996/06/26 05:40:39 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: time.c,v 1.2 1996/06/26 05:40:39 deraadt Exp $";
d75 1
a75 1
	while ((ch = getopt(argc, argv, "lp")) != EOF)
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: time.c,v 1.7 1995/06/27 00:34:00 jtc Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: time.c,v 1.7 1995/06/27 00:34:00 jtc Exp $";
d109 2
a110 1
	while (wait3(&status, 0, &ru) != pid);
d117 1
a117 1
		fprintf (stderr, "real %9ld.%02ld\n", 
d119 1
a119 1
		fprintf (stderr, "user %9ld.%02ld\n",
d121 1
a121 1
		fprintf (stderr, "sys  %9ld.%02ld\n",
d170 1
a170 1
	exit (WEXITSTATUS(status));
@


1.1
log
@Initial revision
@
text
@d1 1
d47 1
a47 1
static char rcsid[] = "$NetBSD: time.c,v 1.7 1995/06/27 00:34:00 jtc Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
