head	1.26;
access;
symbols
	OPENBSD_6_2_BASE:1.26
	OPENBSD_6_1:1.26.0.4
	OPENBSD_6_1_BASE:1.26
	OPENBSD_6_0:1.24.0.2
	OPENBSD_6_0_BASE:1.24
	OPENBSD_5_9:1.23.0.2
	OPENBSD_5_9_BASE:1.23
	OPENBSD_5_8:1.21.0.6
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.21.0.2
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.19.0.22
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.19.0.20
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.19.0.16
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.19.0.14
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.19.0.12
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.19
	OPENBSD_5_1:1.19.0.10
	OPENBSD_5_0:1.19.0.8
	OPENBSD_5_0_BASE:1.19
	OPENBSD_4_9:1.19.0.6
	OPENBSD_4_9_BASE:1.19
	OPENBSD_4_8:1.19.0.4
	OPENBSD_4_8_BASE:1.19
	OPENBSD_4_7:1.19.0.2
	OPENBSD_4_7_BASE:1.19
	OPENBSD_4_6:1.18.0.8
	OPENBSD_4_6_BASE:1.18
	OPENBSD_4_5:1.18.0.4
	OPENBSD_4_5_BASE:1.18
	OPENBSD_4_4:1.18.0.2
	OPENBSD_4_4_BASE:1.18
	OPENBSD_4_3:1.17.0.8
	OPENBSD_4_3_BASE:1.17
	OPENBSD_4_2:1.17.0.6
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.17.0.4
	OPENBSD_4_1_BASE:1.17
	OPENBSD_4_0:1.17.0.2
	OPENBSD_4_0_BASE:1.17
	OPENBSD_3_9:1.16.0.2
	OPENBSD_3_9_BASE:1.16
	OPENBSD_3_8:1.15.0.2
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.14.0.4
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.14.0.2
	OPENBSD_3_6_BASE:1.14
	OPENBSD_3_5:1.13.0.4
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.11.0.4
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.2
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.8.0.4
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_9:1.8.0.2
	OPENBSD_2_8:1.5.0.6
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.4
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.2
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.4.0.4
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.26
date	2016.10.08.19.55.39;	author guenther;	state Exp;
branches;
next	1.25;
commitid	HxlgenNzcigOE5nB;

1.25
date	2016.09.01.09.49.44;	author tedu;	state Exp;
branches;
next	1.24;
commitid	QFnhPvj33AUYuiKA;

1.24
date	2016.03.09.16.28.50;	author deraadt;	state Exp;
branches;
next	1.23;
commitid	OSDG2O3Cgeifnf1W;

1.23
date	2015.11.16.17.43.17;	author pascal;	state Exp;
branches;
next	1.22;
commitid	15n8mgN7r4NrXMHY;

1.22
date	2015.08.20.22.32.41;	author deraadt;	state Exp;
branches;
next	1.21;
commitid	0Dp7Dy9FuNZesYo2;

1.21
date	2014.12.22.18.21.10;	author tedu;	state Exp;
branches;
next	1.20;
commitid	ZXBWu0S2j3yrlF75;

1.20
date	2014.11.26.18.34.51;	author millert;	state Exp;
branches;
next	1.19;
commitid	9QOFSShUOtA0kQLF;

1.19
date	2009.10.27.23.59.38;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2008.06.25.15.09.32;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2006.03.25.19.06.36;	author espie;	state Exp;
branches;
next	1.16;

1.16
date	2005.12.08.22.34.00;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2005.05.03.08.09.52;	author art;	state Exp;
branches;
next	1.14;

1.14
date	2004.07.20.08.46.23;	author art;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.10.22.20.47;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.03.02.56.08;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2002.05.08.16.46.35;	author art;	state Exp;
branches;
next	1.10;

1.10
date	2002.03.25.16.30.55;	author danh;	state Exp;
branches;
next	1.9;

1.9
date	2001.11.19.19.02.14;	author mpech;	state Exp;
branches;
next	1.8;

1.8
date	2001.03.25.19.23.40;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	2001.03.22.05.18.30;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	2000.12.24.00.28.46;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	99.06.16.15.23.53;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	98.08.11.02.54.08;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.10.02.02.59.49;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.33.51;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.20;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.20;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.26
log
@findcall() for the -c option is implemented on mips64, not sparc64
@
text
@/*	$OpenBSD: gprof.c,v 1.25 2016/09/01 09:49:44 tedu Exp $	*/
/*	$NetBSD: gprof.c,v 1.8 1995/04/19 07:15:59 cgd Exp $	*/

/*
 * Copyright (c) 1983, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "gprof.h"

int valcmp(const void *, const void *);

static struct gmonhdr	gmonhdr;
extern char *__progname;

int
main(int argc, char *argv[])
{
    char	**sp;
    nltype	**timesortnlp;
    char	**defaultEs;

    if (pledge("stdio rpath wpath cpath", NULL) == -1)
        err(1, NULL);

    --argc;
    argv++;
    debug = 0;
    bflag = TRUE;
    while ( *argv != 0 && **argv == '-' ) {
	(*argv)++;
	switch ( **argv ) {
	case 'a':
	    aflag = TRUE;
	    break;
	case 'b':
	    bflag = FALSE;
	    break;
	case 'C':
	    Cflag = TRUE;
	    cyclethreshold = atoi( *++argv );
	    break;
	case 'c':
#if defined(__i386__) || defined(__mips64__)
	    cflag = TRUE;
#else
	    fprintf(stderr, "%s: -c isn't supported on this architecture yet\n", __progname);
	    exit(1);
#endif
	    break;
	case 'd':
	    dflag = TRUE;
	    setvbuf(stdout, NULL, _IOLBF, 0);
	    debug |= atoi( *++argv );
	    debug |= ANYDEBUG;
#	    ifdef DEBUG
		printf("[main] debug = %d\n", debug);
#	    else /* not DEBUG */
		warnx("-d ignored");
#	    endif /* DEBUG */
	    break;
	case 'E':
	    ++argv;
	    addlist( Elist , *argv );
	    Eflag = TRUE;
	    addlist( elist , *argv );
	    eflag = TRUE;
	    break;
	case 'e':
	    addlist( elist , *++argv );
	    eflag = TRUE;
	    break;
	case 'F':
	    ++argv;
	    addlist( Flist , *argv );
	    Fflag = TRUE;
	    addlist( flist , *argv );
	    fflag = TRUE;
	    break;
	case 'f':
	    addlist( flist , *++argv );
	    fflag = TRUE;
	    break;
	case 'k':
	    addlist( kfromlist , *++argv );
	    addlist( ktolist , *++argv );
	    kflag = TRUE;
	    break;
	case 's':
	    sflag = TRUE;
	    break;
	case 'z':
	    zflag = TRUE;
	    break;
	}
	argv++;
    }
    if ( *argv != 0 ) {
	a_outname  = *argv;
	argv++;
    } else {
	a_outname  = A_OUTNAME;
    }
    if ( *argv != 0 ) {
	gmonname = *argv;
	argv++;
    } else {
	gmonname = GMONNAME;
    }
    if ( sflag == FALSE ) {
        if (pledge("stdio rpath", NULL) == -1)
            err(1, "pledge");
    }
	/*
	 *	get information about a.out file.
	 */
    if (getnfile(a_outname, &defaultEs) == -1)
	errx(1, "%s: bad format", a_outname);
	/*
	 *	sort symbol table.
	 */
    qsort(nl, nname, sizeof(nltype), valcmp);
	/*
	 *	turn off default functions
	 */
    for ( sp = &defaultEs[0] ; *sp ; sp++ ) {
	Eflag = TRUE;
	addlist( Elist , *sp );
	eflag = TRUE;
	addlist( elist , *sp );
    }
	/*
	 *	get information about mon.out file(s).
	 */
    do	{
	getpfile( gmonname );
	if ( *argv != 0 ) {
	    gmonname = *argv;
	}
    } while ( *argv++ != 0 );
	/*
	 *	how many ticks per second?
	 *	if we can't tell, report time in ticks.
	 */
    if (hz == 0) {
	hz = 1;
	warnx("time is in ticks, not seconds");
    }
	/*
	 *	dump out a gmon.sum file if requested
	 */
    if ( sflag ) {
	dumpsum( GMONSUM );
    }
	/*
	 *	assign samples to procedures
	 */
    asgnsamples();
	/*
	 *	assemble the dynamic profile
	 */
    timesortnlp = doarcs();
	/*
	 *	print the dynamic profile
	 */
    printgprof( timesortnlp );	
	/*
	 *	print the flat profile
	 */
    printprof();	
	/*
	 *	print the index
	 */
    printindex();	

    return (0);
}

    /*
     *	information from a gmon.out file is in two parts:
     *	an array of sampling hits within pc ranges,
     *	and the arcs.
     */
void
getpfile(const char *filename)
{
    FILE		*pfile;
    struct rawarc	arc;

    pfile = openpfile(filename);
    readsamples(pfile);
	/*
	 *	the rest of the file consists of
	 *	a bunch of <from,self,count> tuples.
	 */
    while ( fread( &arc , sizeof arc , 1 , pfile ) == 1 ) {
#	ifdef DEBUG
	    if ( debug & SAMPLEDEBUG ) {
		printf( "[getpfile] frompc 0x%lx selfpc 0x%lx count %ld\n" ,
			arc.raw_frompc , arc.raw_selfpc , arc.raw_count );
	    }
#	endif /* DEBUG */
	    /*
	     *	add this arc
	     */
	tally( &arc );
    }
    fclose(pfile);
}

FILE *
openpfile(const char *filename)
{
    struct gmonhdr	tmp;
    FILE		*pfile;
    int			size;
    int			rate;

    if((pfile = fopen(filename, "r")) == NULL)
	err(1, "fopen: %s", filename);
    if (fread(&tmp, sizeof(struct gmonhdr), 1, pfile) != 1)
	errx(1, "%s: bad gmon header", filename);
    if ( s_highpc != 0 && ( tmp.lpc != gmonhdr.lpc ||
	 tmp.hpc != gmonhdr.hpc || tmp.ncnt != gmonhdr.ncnt))
	errx(1, "%s: incompatible with first gmon file", filename);
    gmonhdr = tmp;
    if ( gmonhdr.version == GMONVERSION ) {
	rate = gmonhdr.profrate;
	size = sizeof(struct gmonhdr);
    } else {
	fseek(pfile, sizeof(struct ophdr), SEEK_SET);
	size = sizeof(struct ophdr);
	gmonhdr.profrate = rate = hertz();
	gmonhdr.version = GMONVERSION;
    }
    if (hz == 0) {
	hz = rate;
    } else if (hz != rate)
	errx(1, "%s: profile clock rate (%d) incompatible with clock rate "
	    "(%ld) in first gmon file", filename, rate, hz);
    s_lowpc = (unsigned long) gmonhdr.lpc;
    s_highpc = (unsigned long) gmonhdr.hpc;
    lowpc = (unsigned long)gmonhdr.lpc / sizeof(UNIT);
    highpc = (unsigned long)gmonhdr.hpc / sizeof(UNIT);
    sampbytes = gmonhdr.ncnt - size;
    nsamples = sampbytes / sizeof (UNIT);
#   ifdef DEBUG
	if ( debug & SAMPLEDEBUG ) {
	    printf( "[openpfile] hdr.lpc 0x%lx hdr.hpc 0x%lx hdr.ncnt %d\n",
		gmonhdr.lpc , gmonhdr.hpc , gmonhdr.ncnt );
	    printf( "[openpfile]   s_lowpc 0x%lx   s_highpc 0x%lx\n" ,
		s_lowpc , s_highpc );
	    printf( "[openpfile]     lowpc 0x%lx     highpc 0x%lx\n" ,
		lowpc , highpc );
	    printf( "[openpfile] sampbytes %d nsamples %d\n" ,
		sampbytes , nsamples );
	    printf( "[openpfile] sample rate %ld\n" , hz );
	}
#   endif /* DEBUG */
    return(pfile);
}

void
tally(struct rawarc *rawp)
{
    nltype		*parentp;
    nltype		*childp;

    parentp = nllookup( rawp -> raw_frompc );
    childp = nllookup( rawp -> raw_selfpc );
    if ( parentp == 0 || childp == 0 )
	return;
    if ( kflag
	 && onlist( kfromlist , parentp -> name )
	 && onlist( ktolist , childp -> name ) ) {
	return;
    }
    childp -> ncall += rawp -> raw_count;
#   ifdef DEBUG
	if ( debug & TALLYDEBUG ) {
	    printf( "[tally] arc from %s to %s traversed %ld times\n" ,
		    parentp -> name , childp -> name , rawp -> raw_count );
	}
#   endif /* DEBUG */
    addarc( parentp , childp , rawp -> raw_count );
}

/*
 * dump out the gmon.sum file
 */
void
dumpsum(const char *sumfile)
{
    nltype *nlp;
    arctype *arcp;
    struct rawarc arc;
    FILE *sfile;

    if ( ( sfile = fopen ( sumfile , "w" ) ) == NULL )
	err(1, "fopen: %s", sumfile);
    /*
     * dump the header; use the last header read in
     */
    if ( fwrite( &gmonhdr , sizeof gmonhdr , 1 , sfile ) != 1 )
	err(1, "fwrite: %s", sumfile);
    /*
     * dump the samples
     */
    if (fwrite(samples, sizeof (UNIT), nsamples, sfile) != nsamples)
	err(1, "fwrite: %s", sumfile);
    /*
     * dump the normalized raw arc information
     */
    for ( nlp = nl ; nlp < npe ; nlp++ ) {
	for ( arcp = nlp -> children ; arcp ; arcp = arcp -> arc_childlist ) {
	    arc.raw_frompc = arcp -> arc_parentp -> value;
	    arc.raw_selfpc = arcp -> arc_childp -> value;
	    arc.raw_count = arcp -> arc_count;
	    if (fwrite ( &arc , sizeof arc , 1 , sfile ) != 1)
	        err(1, "fwrite: %s", sumfile);
#	    ifdef DEBUG
		if ( debug & SAMPLEDEBUG ) {
		    printf( "[dumpsum] frompc 0x%lx selfpc 0x%lx count %ld\n" ,
			    arc.raw_frompc , arc.raw_selfpc , arc.raw_count );
		}
#	    endif /* DEBUG */
	}
    }
    fclose( sfile );
}

int
valcmp(const void *vp1, const void *vp2)
{
    const nltype *p1 = vp1;
    const nltype *p2 = vp2;

    if ( p1 -> value < p2 -> value ) {
	return LESSTHAN;
    }
    if ( p1 -> value > p2 -> value ) {
	return GREATERTHAN;
    }
    return EQUALTO;
}

void
readsamples(FILE *pfile)
{
    UNIT	sample;
    int i;
    
    if (samples == 0) {
	samples = calloc(sampbytes, sizeof (UNIT));
	if (samples == 0)
	    errx(1, "No room for %ld sample pc's", sampbytes / sizeof (UNIT));
    }
    for (i = 0; i < nsamples; i++) {
	fread(&sample, sizeof (UNIT), 1, pfile);
	if (feof(pfile))
		break;
	samples[i] += sample;
    }
    if (i != nsamples)
	errx(1, "unexpected EOF after reading %d/%d samples", i, nsamples );
}

/*
 *	Assign samples to the procedures to which they belong.
 *
 *	There are three cases as to where pcl and pch can be
 *	with respect to the routine entry addresses svalue0 and svalue1
 *	as shown in the following diagram.  overlap computes the
 *	distance between the arrows, the fraction of the sample
 *	that is to be credited to the routine which starts at svalue0.
 *
 *	    svalue0                                         svalue1
 *	       |                                               |
 *	       v                                               v
 *
 *	       +-----------------------------------------------+
 *	       |					       |
 *	  |  ->|    |<-		->|         |<-		->|    |<-  |
 *	  |         |		  |         |		  |         |
 *	  +---------+		  +---------+		  +---------+
 *
 *	  ^         ^		  ^         ^		  ^         ^
 *	  |         |		  |         |		  |         |
 *	 pcl       pch		 pcl       pch		 pcl       pch
 *
 *	For the vax we assert that samples will never fall in the first
 *	two bytes of any routine, since that is the entry mask,
 *	thus we give call alignentries() to adjust the entry points if
 *	the entry mask falls in one bucket but the code for the routine
 *	doesn't start until the next bucket.  In conjunction with the
 *	alignment of routine addresses, this should allow us to have
 *	only one sample for every four bytes of text space and never
 *	have any overlap (the two end cases, above).
 */
void
asgnsamples(void)
{
    int	j;
    UNIT		ccnt;
    double		time;
    unsigned long	pcl, pch;
    unsigned long	i;
    unsigned long	overlap;
    unsigned long	svalue0, svalue1;

    /* read samples and assign to namelist symbols */
    scale = highpc - lowpc;
    scale /= nsamples;
    alignentries();
    for (i = 0, j = 1; i < nsamples; i++) {
	ccnt = samples[i];
	if (ccnt == 0)
		continue;
	pcl = lowpc + (unsigned long)(scale * i);
	pch = lowpc + (unsigned long)(scale * (i + 1));
	time = ccnt;
#	ifdef DEBUG
	    if ( debug & SAMPLEDEBUG ) {
		printf( "[asgnsamples] pcl 0x%lx pch 0x%lx ccnt %d\n" ,
			pcl , pch , ccnt );
	    }
#	endif /* DEBUG */
	totime += time;
	for (j = j - 1; j < nname; j++) {
	    svalue0 = nl[j].svalue;
	    svalue1 = nl[j+1].svalue;
		/*
		 *	if high end of tick is below entry address, 
		 *	go for next tick.
		 */
	    if (pch < svalue0)
		    break;
		/*
		 *	if low end of tick into next routine,
		 *	go for next routine.
		 */
	    if (pcl >= svalue1)
		    continue;
	    overlap = min(pch, svalue1) - max(pcl, svalue0);
	    if (overlap > 0) {
#		ifdef DEBUG
		    if (debug & SAMPLEDEBUG) {
			printf("[asgnsamples] (0x%lx->0x%lx-0x%lx) %s gets %f ticks %ld overlap\n",
				nl[j].value/sizeof(UNIT), svalue0, svalue1,
				nl[j].name, 
				overlap * time / scale, overlap);
		    }
#		endif /* DEBUG */
		nl[j].time += overlap * time / scale;
	    }
	}
    }
#   ifdef DEBUG
	if (debug & SAMPLEDEBUG) {
	    printf("[asgnsamples] totime %f\n", totime);
	}
#   endif /* DEBUG */
}


unsigned long
min(unsigned long a, unsigned long b)
{
    if (a<b)
	return(a);
    return(b);
}

unsigned long
max(unsigned long a, unsigned long b)
{
    if (a>b)
	return(a);
    return(b);
}

    /*
     *	calculate scaled entry point addresses (to save time in asgnsamples),
     *	and possibly push the scaled entry points over the entry mask,
     *	if it turns out that the entry point is in one bucket and the code
     *	for a routine is in the next bucket.
     */
void
alignentries(void)
{
    struct nl		*nlp;
    unsigned long	bucket_of_entry;
    unsigned long	bucket_of_code;

    for (nlp = nl; nlp < npe; nlp++) {
	nlp -> svalue = nlp -> value / sizeof(UNIT);
	bucket_of_entry = (nlp->svalue - lowpc) / scale;
	bucket_of_code = (nlp->svalue + UNITS_TO_CODE - lowpc) / scale;
	if (bucket_of_entry < bucket_of_code) {
#	    ifdef DEBUG
		if (debug & SAMPLEDEBUG) {
		    printf("[alignentries] pushing svalue 0x%lx to 0x%lx\n",
			    nlp->svalue, nlp->svalue + UNITS_TO_CODE);
		}
#	    endif /* DEBUG */
	    nlp->svalue += UNITS_TO_CODE;
	}
    }
}
@


1.25
log
@remove sparc support
@
text
@d1 1
a1 1
/*	$OpenBSD: gprof.c,v 1.24 2016/03/09 16:28:50 deraadt Exp $	*/
d68 1
a68 1
#if defined(__i386__) || defined(__sparc64__)
@


1.24
log
@We are done providing support for the vax.
lots of agreement.
@
text
@d1 1
a1 1
/*	$OpenBSD: gprof.c,v 1.23 2015/11/16 17:43:17 pascal Exp $	*/
d68 1
a68 1
#if defined(__i386__) || defined(__sparc__) || defined(__sparc64__)
@


1.23
log
@pledge for gprof: "stdio rpath wpath cpath" in the beginning, then drop
wpath and cpath if we don't need to write a gmon.sum file (-s flag).

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: gprof.c,v 1.22 2015/08/20 22:32:41 deraadt Exp $	*/
d68 1
a68 2
#if defined(__i386__) || defined(__vax__) || \
    defined(__sparc__) || defined(__sparc64__)
@


1.22
log
@Do not cast result of malloc/calloc/realloc* if stdlib.h is in scope
ok krw millert
@
text
@d1 1
a1 1
/*	$OpenBSD: gprof.c,v 1.21 2014/12/22 18:21:10 tedu Exp $	*/
d47 3
d134 4
@


1.21
log
@remove never used in openbsd tahoe support. and ns32k. and pmax.
ok deraadt millert
@
text
@d1 1
a1 1
/*	$OpenBSD: gprof.c,v 1.20 2014/11/26 18:34:51 millert Exp $	*/
d372 1
a372 1
	samples = (UNIT *) calloc(sampbytes, sizeof (UNIT));
@


1.20
log
@Prefer setvbuf() to setlinebuf() for portability; ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: gprof.c,v 1.19 2009/10/27 23:59:38 deraadt Exp $	*/
d65 1
a65 1
#if defined(__i386__) || defined(__vax__) || defined(__tahoe__) || \
@


1.19
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: gprof.c,v 1.18 2008/06/25 15:09:32 deraadt Exp $	*/
d75 1
a75 1
	    setlinebuf(stdout);
@


1.18
log
@split test for __sparc__ into __sparc__ and __sparc64__
@
text
@d1 1
a1 1
/*	$OpenBSD: gprof.c,v 1.17 2006/03/25 19:06:36 espie Exp $	*/
a31 14

#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1983, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)gprof.c	8.1 (Berkeley) 6/6/93";
#else
static char rcsid[] = "$OpenBSD: gprof.c,v 1.17 2006/03/25 19:06:36 espie Exp $";
#endif
#endif /* not lint */
@


1.17
log
@add missing prototypes all over the place, u_long -> unsigned long (userland
code).

okay kettenis@@, comments by ray@@
@
text
@d1 1
a1 1
/*	$OpenBSD: gprof.c,v 1.16 2005/12/08 22:34:00 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: gprof.c,v 1.16 2005/12/08 22:34:00 millert Exp $";
d79 2
a80 1
#if defined(__i386__) || defined(__vax__) || defined(__tahoe__) || defined(__sparc__)
@


1.16
log
@Check fread() return value to get sane error message for too-small
gmon header.  Idea from Alexey Dobriyan
@
text
@d1 1
a1 1
/*	$OpenBSD: gprof.c,v 1.15 2005/05/03 08:09:52 art Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: gprof.c,v 1.15 2005/05/03 08:09:52 art Exp $";
d216 1
a216 1
getpfile(char *filename)
a218 1
    FILE		*openpfile();
d243 1
a243 1
openpfile(char *filename)
d323 1
a323 1
dumpsum(char *sumfile)
@


1.15
log
@Fix some sign issues and make kernel profiling useful on amd64.

millert@@ miod@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: gprof.c,v 1.14 2004/07/20 08:46:23 art Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: gprof.c,v 1.14 2004/07/20 08:46:23 art Exp $";
d253 2
a254 1
    fread(&tmp, sizeof(struct gmonhdr), 1, pfile);
@


1.14
log
@Fix formats in debug printfs to work correctly on 64-bit archs.
miod@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: gprof.c,v 1.13 2003/06/10 22:20:47 deraadt Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: gprof.c,v 1.13 2003/06/10 22:20:47 deraadt Exp $";
d438 1
a438 1
    int	i;
d450 2
a451 2
	pcl = lowpc + scale * i;
	pch = lowpc + scale * (i + 1);
@


1.13
log
@mostly ansi cleanup; pval ok
@
text
@d1 1
a1 1
/*	$OpenBSD: gprof.c,v 1.12 2003/06/03 02:56:08 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: gprof.c,v 1.12 2003/06/03 02:56:08 millert Exp $";
d231 1
a231 1
		printf( "[getpfile] frompc 0x%x selfpc 0x%x count %d\n" ,
d280 1
a280 1
	    printf( "[openpfile] hdr.lpc 0x%x hdr.hpc 0x%x hdr.ncnt %d\n",
d282 1
a282 1
	    printf( "[openpfile]   s_lowpc 0x%x   s_highpc 0x%x\n" ,
d284 1
a284 1
	    printf( "[openpfile]     lowpc 0x%x     highpc 0x%x\n" ,
d288 1
a288 1
	    printf( "[openpfile] sample rate %d\n" , hz );
d312 1
a312 1
	    printf( "[tally] arc from %s to %s traversed %d times\n" ,
d354 1
a354 1
		    printf( "[dumpsum] frompc 0x%x selfpc 0x%x count %d\n" ,
d387 1
a387 1
	    errx(1, "No room for %d sample pc's", sampbytes / sizeof (UNIT));
d455 1
a455 1
		printf( "[asgnsamples] pcl 0x%x pch 0x%x ccnt %d\n" ,
d479 1
a479 1
			printf("[asgnsamples] (0x%x->0x%x-0x%x) %s gets %f ticks %d overlap\n",
d533 1
a533 1
		    printf("[alignentries] pushing svalue 0x%x to 0x%x\n",
@


1.12
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: gprof.c,v 1.11 2002/05/08 16:46:35 art Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: gprof.c,v 1.11 2002/05/08 16:46:35 art Exp $";
d55 1
a55 3
main(argc, argv)
    int argc;
    char **argv;
d216 1
a216 2
getpfile(filename)
    char *filename;
d244 1
a244 2
openpfile(filename)
    char *filename;
d295 1
a295 2
tally( rawp )
    struct rawarc	*rawp;
d323 1
a323 2
dumpsum( sumfile )
    char *sumfile;
d379 1
a379 2
readsamples(pfile)
    FILE	*pfile;
d432 1
a432 1
asgnsamples()
d498 1
a498 2
min(a, b)
    unsigned long a,b;
d506 1
a506 2
max(a, b)
    unsigned long a,b;
d520 1
a520 1
alignentries()
@


1.11
log
@Split out symbol handling into a separate file.
Implement symbol handling for ELF (based on FreeBSD).
Implement dummy support for alpha, hppa, powerpc and sparc64.

Tested during the last 2 months on various archs (never comitted because
other stuff got in the way).
Some fixups to i386 support from mickey@@

This lets us switch all elf archs to this gprof.
@
text
@d1 1
a1 1
/*	$OpenBSD: gprof.c,v 1.10 2002/03/25 16:30:55 danh Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d43 1
a43 1
static char rcsid[] = "$OpenBSD: gprof.c,v 1.10 2002/03/25 16:30:55 danh Exp $";
@


1.10
log
@change the extra text following preprocessor directives into comments.
patch from David Krause <openbsd@@davidkrause.com>

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: gprof.c,v 1.9 2001/11/19 19:02:14 mpech Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: gprof.c,v 1.9 2001/11/19 19:02:14 mpech Exp $";
d53 1
a53 4
    /*
     *	things which get -E excluded by default.
     */
char	*defaultEs[] = { "mcount" , "__mcleanup" , 0 };
d65 1
d152 9
a169 4
	 *	get information about a.out file.
	 */
    getnfile();
	/*
a216 130
     * Set up string and symbol tables from a.out.
     *	and optionally the text space.
     * On return symbol table is sorted by value.
     */
void
getnfile()
{
    FILE	*nfile;
    int		valcmp();

    nfile = fopen( a_outname ,"r");
    if (nfile == NULL)
	err(1, "fopen: %s", a_outname);
    fread(&xbuf, 1, sizeof(xbuf), nfile);
    if (N_BADMAG(xbuf))
	errx(1, "%s: bad format", a_outname );
    getstrtab(nfile);
    getsymtab(nfile);
    gettextspace( nfile );
    qsort(nl, nname, sizeof(nltype), valcmp);
    fclose(nfile);
#   ifdef DEBUG
	if ( debug & AOUTDEBUG ) {
	    int j;

	    for (j = 0; j < nname; j++){
		printf("[getnfile] 0X%08x\t%s\n", nl[j].value, nl[j].name);
	    }
	}
#   endif /* DEBUG */
}

void
getstrtab(nfile)
    FILE	*nfile;
{

    fseek(nfile, (long)(N_SYMOFF(xbuf) + xbuf.a_syms), 0);
    if (fread(&ssiz, sizeof (ssiz), 1, nfile) == 0)
	errx(1, "%s: no string table (old format?)" , a_outname);
    strtab = calloc(ssiz, 1);
    if (strtab == NULL)
	errx(1, "%s: no room for %ld bytes of string table", a_outname , ssiz);
    if (fread(strtab+sizeof(ssiz), ssiz-sizeof(ssiz), 1, nfile) != 1)
	err(1, "%s: reading string table", a_outname);
}

    /*
     * Read in symbol table
     */
void
getsymtab(nfile)
    FILE	*nfile;
{
    long		i;
    int			askfor;
    struct nlist	nbuf;

    /* pass1 - count symbols */
    fseek(nfile, (long)N_SYMOFF(xbuf), 0);
    nname = 0;
    for (i = xbuf.a_syms; i > 0; i -= sizeof(struct nlist)) {
	fread(&nbuf, sizeof(nbuf), 1, nfile);
	if ( ! funcsymbol( &nbuf ) ) {
	    continue;
	}
	nname++;
    }
    if (nname == 0)
	errx(1, "%s: no symbols", a_outname);
    askfor = nname + 1;
    nl = (nltype *) calloc( askfor , sizeof(nltype) );
    if (nl == 0)
	errx(1, "No room for %d bytes of symbol table",
	    askfor * sizeof(nltype));

    /* pass2 - read symbols */
    fseek(nfile, (long)N_SYMOFF(xbuf), 0);
    npe = nl;
    nname = 0;
    for (i = xbuf.a_syms; i > 0; i -= sizeof(struct nlist)) {
	fread(&nbuf, sizeof(nbuf), 1, nfile);
	if ( ! funcsymbol( &nbuf ) ) {
#	    ifdef DEBUG
		if ( debug & AOUTDEBUG ) {
		    printf( "[getsymtab] rejecting: 0x%x %s\n" ,
			    nbuf.n_type , strtab + nbuf.n_un.n_strx );
		}
#	    endif /* DEBUG */
	    continue;
	}
	npe->value = nbuf.n_value;
	npe->name = strtab+nbuf.n_un.n_strx;
#	ifdef DEBUG
	    if ( debug & AOUTDEBUG ) {
		printf( "[getsymtab] %d %s 0x%08x\n" ,
			nname , npe -> name , npe -> value );
	    }
#	endif /* DEBUG */
	npe++;
	nname++;
    }
    npe->value = -1;
}

    /*
     *	read in the text space of an a.out file
     */
void
gettextspace( nfile )
    FILE	*nfile;
{

    if ( cflag == 0 ) {
	return;
    }
    textspace = (u_char *) malloc( xbuf.a_text );
    if ( textspace == 0 ) {
	warnx("ran out room for %d bytes of text space: can't do -c", xbuf.a_text );
	return;
    }
    (void) fseek( nfile , N_TXTOFF( xbuf ) , 0 );
    if ( fread( textspace , 1 , xbuf.a_text , nfile ) != xbuf.a_text ) {
	warnx("couldn't read text space: can't do -c");
	free( textspace );
	textspace = NULL;
	return;
    }
}
    /*
d374 1
a374 2
valcmp(p1, p2)
    nltype *p1, *p2;
d376 3
a552 42
}

bool
funcsymbol( nlistp )
    struct nlist	*nlistp;
{
    extern char	*strtab;	/* string table from a.out */
    extern int	aflag;		/* if static functions aren't desired */
    char	*name, c;

	/*
	 *	must be a text symbol,
	 *	and static text symbols don't qualify if aflag set.
	 */
    if ( ! (  ( nlistp -> n_type == ( N_TEXT | N_EXT ) )
	   || ( ( nlistp -> n_type == N_TEXT ) && ( aflag == 0 ) ) ) ) {
	return FALSE;
    }
	/*
	 *	can't have any `funny' characters in name,
	 *	where `funny' means `.', .o file names
	 *	need to make an exception for sparc .mul & co.
	 *	perhaps we should just drop this code entirely...
	 */
    name = strtab + nlistp -> n_un.n_strx;
#ifdef __sparc__
    if (nlistp -> n_value & 3)
	return FALSE;
    if ( *name == '.' ) {
	char *p = name + 1;
	if ( *p == 'u' )
	    p++;
	if ( strcmp ( p, "mul" ) == 0 || strcmp ( p, "div" ) == 0 ||
	     strcmp ( p, "rem" ) == 0 )
		return TRUE;
    }
#endif
    while ((c = *name++))
	if (c == '.')
	    return FALSE;

    return TRUE;
@


1.9
log
@kill more registers

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: gprof.c,v 1.8 2001/03/25 19:23:40 mickey Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: gprof.c,v 1.8 2001/03/25 19:23:40 mickey Exp $";
d101 1
a101 1
#	    else not DEBUG
d103 1
a103 1
#	    endif DEBUG
d243 1
a243 1
#   endif DEBUG
d302 1
a302 1
#	    endif DEBUG
d312 1
a312 1
#	endif DEBUG
d368 1
a368 1
#	endif DEBUG
d425 1
a425 1
#   endif DEBUG
d451 1
a451 1
#   endif DEBUG
d494 1
a494 1
#	    endif DEBUG
d594 1
a594 1
#	endif DEBUG
d620 1
a620 1
#		endif DEBUG
d629 1
a629 1
#   endif DEBUG
d674 1
a674 1
#	    endif DEBUG
@


1.8
log
@extern __progname; from bob
@
text
@d1 1
a1 1
/*	$OpenBSD: gprof.c,v 1.7 2001/03/22 05:18:30 mickey Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: gprof.c,v 1.7 2001/03/22 05:18:30 mickey Exp $";
d237 1
a237 1
	    register int j;
d268 1
a268 1
    register long	i;
d462 2
a463 2
    register nltype *nlp;
    register arctype *arcp;
d518 1
a518 1
    register int i;
d570 1
a570 1
    register int	j;
d574 1
a574 1
    register int	i;
d660 1
a660 1
    register struct nl	*nlp;
@


1.7
log
@_wall, err/warn; dummy hppa part, like others
@
text
@d1 1
a1 1
/*	$OpenBSD: gprof.c,v 1.6 2000/12/24 00:28:46 aaron Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: gprof.c,v 1.6 2000/12/24 00:28:46 aaron Exp $";
d59 1
@


1.6
log
@Fix an off-by-one error. Since `i' starts at 0, not 1, we don't have to
decrement it when reporting how many samples have been read so far.
@
text
@d1 1
a1 1
/*	$OpenBSD: gprof.c,v 1.5 1999/06/16 15:23:53 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: gprof.c,v 1.5 1999/06/16 15:23:53 deraadt Exp $";
a52 2
char	*whoami = "gprof";

d60 1
d89 1
a89 1
	    fprintf(stderr, "gprof: -c isn't supported on this architecture yet\n");
d101 1
a101 1
		printf("%s: -d ignored\n", whoami);
d180 1
a180 1
	fprintf(stderr, "time is in ticks, not seconds\n");
d208 2
a209 1
    done();
d217 1
d224 2
a225 4
    if (nfile == NULL) {
	perror( a_outname );
	done();
    }
d227 2
a228 4
    if (N_BADMAG(xbuf)) {
	fprintf(stderr, "%s: %s: bad format\n", whoami , a_outname );
	done();
    }
d245 1
d251 2
a252 5
    if (fread(&ssiz, sizeof (ssiz), 1, nfile) == 0) {
	fprintf(stderr, "%s: %s: no string table (old format?)\n" ,
		whoami , a_outname );
	done();
    }
d254 4
a257 10
    if (strtab == NULL) {
	fprintf(stderr, "%s: %s: no room for %d bytes of string table\n",
		whoami , a_outname , ssiz);
	done();
    }
    if (fread(strtab+sizeof(ssiz), ssiz-sizeof(ssiz), 1, nfile) != 1) {
	fprintf(stderr, "%s: %s: error reading string table\n",
		whoami , a_outname );
	done();
    }
d263 1
d281 2
a282 4
    if (nname == 0) {
	fprintf(stderr, "%s: %s: no symbols\n", whoami , a_outname );
	done();
    }
d285 3
a287 5
    if (nl == 0) {
	fprintf(stderr, "%s: No room for %d bytes of symbol table\n",
		whoami, askfor * sizeof(nltype) );
	done();
    }
d321 1
d331 1
a331 3
	fprintf( stderr , "%s: ran out room for %d bytes of text space:  " ,
			whoami , xbuf.a_text );
	fprintf( stderr , "can't do -c\n" );
d336 1
a336 2
	fprintf( stderr , "%s: couldn't read text space:  " , whoami );
	fprintf( stderr , "can't do -c\n" );
d338 1
a338 1
	textspace = 0;
d347 1
d385 2
a386 4
    if((pfile = fopen(filename, "r")) == NULL) {
	perror(filename);
	done();
    }
d389 2
a390 4
	 tmp.hpc != gmonhdr.hpc || tmp.ncnt != gmonhdr.ncnt ) ) {
	fprintf(stderr, "%s: incompatible with first gmon file\n", filename);
	done();
    }
d403 3
a405 6
    } else if (hz != rate) {
	fprintf(stderr,
	    "%s: profile clock rate (%d) %s (%d) in first gmon file\n",
	    filename, rate, "incompatible with clock rate", hz);
	done();
    }
d428 1
d457 1
d466 2
a467 4
    if ( ( sfile = fopen ( sumfile , "w" ) ) == NULL ) {
	perror( sumfile );
	done();
    }
d471 2
a472 4
    if ( fwrite( &gmonhdr , sizeof gmonhdr , 1 , sfile ) != 1 ) {
	perror( sumfile );
	done();
    }
d476 2
a477 4
    if (fwrite(samples, sizeof (UNIT), nsamples, sfile) != nsamples) {
	perror( sumfile );
	done();
    }
d486 2
a487 4
	    if ( fwrite ( &arc , sizeof arc , 1 , sfile ) != 1 ) {
		perror( sumfile );
		done();
	    }
d499 1
d512 1
a515 1
    register i;
d517 1
d521 2
a522 5
	if (samples == 0) {
	    fprintf( stderr , "%s: No room for %d sample pc's\n", 
		whoami , sampbytes / sizeof (UNIT));
	    done();
	}
d530 2
a531 6
    if (i != nsamples) {
	fprintf(stderr,
	    "%s: unexpected EOF after reading %d/%d samples\n",
		whoami , i , nsamples );
	done();
    }
d566 1
d656 1
d714 2
a715 2
    while ( c = *name++ ) {
	if ( c == '.' ) {
d717 1
a717 2
	}
    }
a718 6
}

done()
{

    exit(0);
@


1.5
log
@more #ifdef hell
@
text
@d1 1
a1 1
/*	$OpenBSD: gprof.c,v 1.4 1998/08/11 02:54:08 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: gprof.c,v 1.4 1998/08/11 02:54:08 deraadt Exp $";
d562 1
a562 1
		whoami , --i , nsamples );
@


1.4
log
@permit $ in symbol names since destructors now can use that char again...; jdp@@freebsd
@
text
@d1 1
a1 1
/*	$OpenBSD: gprof.c,v 1.3 1996/10/02 02:59:49 tholo Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: gprof.c,v 1.3 1996/10/02 02:59:49 tholo Exp $";
d87 1
a87 1
#if defined(i386) || defined(vax) || defined(tahoe) || defined(sparc)
d733 1
a733 1
#ifdef sparc
@


1.3
log
@Support for call graph detection using the -c options on i386
@
text
@d1 1
a1 1
/*	$OpenBSD: gprof.c,v 1.2 1996/06/26 05:33:51 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: gprof.c,v 1.2 1996/06/26 05:33:51 deraadt Exp $";
d728 1
a728 2
	 *	where `funny' includes	`.', .o file names
	 *			and	`$', pascal labels.
d746 1
a746 1
	if ( c == '.' || c == '$' ) {
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: gprof.c,v 1.8 1995/04/19 07:15:59 cgd Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: gprof.c,v 1.8 1995/04/19 07:15:59 cgd Exp $";
d87 1
a87 1
#if defined(vax) || defined(tahoe) || defined(sparc)
@


1.1
log
@Initial revision
@
text
@d1 1
d47 1
a47 1
static char rcsid[] = "$NetBSD: gprof.c,v 1.8 1995/04/19 07:15:59 cgd Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
