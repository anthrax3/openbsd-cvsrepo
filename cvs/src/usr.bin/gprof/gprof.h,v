head	1.16;
access;
symbols
	OPENBSD_6_2:1.16.0.6
	OPENBSD_6_2_BASE:1.16
	OPENBSD_6_1:1.16.0.8
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.16.0.4
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.2
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.14.0.10
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.6
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.4
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.13.0.24
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.22
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.20
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.18
	OPENBSD_5_0:1.13.0.16
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.14
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.12
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.8
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.10
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.6
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.4
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.2
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.12.0.6
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.4
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.2
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.11.0.8
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.6
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.4
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.2
	OPENBSD_3_6_BASE:1.11
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.8.0.4
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.6.0.4
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_8:1.4.0.16
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.14
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.12
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.10
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.8
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.6
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.16
date	2015.12.06.23.22.51;	author guenther;	state Exp;
branches;
next	1.15;
commitid	BpKMooBJCslb4mBg;

1.15
date	2015.11.16.17.43.17;	author pascal;	state Exp;
branches;
next	1.14;
commitid	15n8mgN7r4NrXMHY;

1.14
date	2013.10.19.13.51.40;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2007.12.09.19.51.30;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2006.03.25.19.06.36;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2004.07.20.18.20.55;	author marc;	state Exp;
branches;
next	1.10;

1.10
date	2004.07.20.08.45.29;	author art;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.03.02.56.08;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.05.08.16.46.35;	author art;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.16.21.27.46;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.03.22.05.18.30;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	2001.03.21.22.27.36;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	96.12.22.20.24.24;	author rahnds;	state Exp;
branches;
next	1.3;

1.3
date	96.06.26.05.33.51;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.04.21.23.43.06;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.20;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.20;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Fix qsort() comparison functions:
 - correct the function types to eliminate warnings
 - avoid substractions that may overflow
 - rework tests to be consistent: cmp(A,A)==0 && cmp(A,B)=-cmp(B,A)

worked out with Serguey Parkhomovsky (sergueyparkhomovsky (at) gmail.com)
@
text
@/*	$OpenBSD: gprof.h,v 1.15 2015/11/16 17:43:17 pascal Exp $	*/
/*	$NetBSD: gprof.h,v 1.13 1996/04/01 21:54:06 mark Exp $	*/

/*
 * Copyright (c) 1983, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)gprof.h	8.1 (Berkeley) 6/6/93
 */

#include <sys/types.h>
#include <sys/stat.h>
#include <sys/gmon.h>

#include <a.out.h>
#include <stdio.h>
#include <stdlib.h>
#include <err.h>
#include <unistd.h>

#include MD_INCLUDE

    /*
     * booleans
     */
typedef int	bool;
#define	FALSE	0
#define	TRUE	1

    /*
     *	ticks per second
     */
long	hz;

typedef	u_short UNIT;		/* unit of profiling */
char	*a_outname;
#define	A_OUTNAME		"a.out"

char	*gmonname;
#define	GMONNAME		"gmon.out"
#define	GMONSUM			"gmon.sum"

    /*
     *	a constructed arc,
     *	    with pointers to the namelist entry of the parent and the child,
     *	    a count of how many times this arc was traversed,
     *	    and pointers to the next parent of this child and
     *		the next child of this parent.
     */
struct arcstruct {
    struct nl		*arc_parentp;	/* pointer to parent's nl entry */
    struct nl		*arc_childp;	/* pointer to child's nl entry */
    long		arc_count;	/* num calls from parent to child */
    double		arc_time;	/* time inherited along arc */
    double		arc_childtime;	/* childtime inherited along arc */
    struct arcstruct	*arc_parentlist; /* parents-of-this-child list */
    struct arcstruct	*arc_childlist;	/* children-of-this-parent list */
    struct arcstruct	*arc_next;	/* list of arcs on cycle */
    unsigned short	arc_cyclecnt;	/* num cycles involved in */
    unsigned short	arc_flags;	/* see below */
};
typedef struct arcstruct	arctype;

    /*
     * arc flags
     */
#define	DEADARC	0x01	/* time should not propagate across the arc */
#define	ONLIST	0x02	/* arc is on list of arcs in cycles */

    /*
     * The symbol table;
     * for each external in the specified file we gather
     * its address, the number of calls and compute its share of cpu time.
     */
struct nl {
    const char		*name;		/* the name */
    unsigned long	value;		/* the pc entry point */
    unsigned long	svalue;		/* entry point aligned to histograms */
    double		time;		/* ticks in this routine */
    double		childtime;	/* cumulative ticks in children */
    long		ncall;		/* how many times called */
    long		npropcall;	/* times called by live arcs */
    long		selfcalls;	/* how many calls to self */
    double		propfraction;	/* what % of time propagates */
    double		propself;	/* how much self time propagates */
    double		propchild;	/* how much child time propagates */
    short		printflag;	/* should this be printed? */
    short		flags;		/* see below */
    int			index;		/* index in the graph list */
    int			toporder;	/* graph call chain top-sort order */
    int			cycleno;	/* internal number of cycle on */
    int			parentcnt;	/* number of live parent arcs */
    struct nl		*cyclehead;	/* pointer to head of cycle */
    struct nl		*cnext;		/* pointer to next member of cycle */
    arctype		*parents;	/* list of caller arcs */
    arctype		*children;	/* list of callee arcs */
};
typedef struct nl	nltype;

nltype	*nl;			/* the whole namelist */
nltype	*npe;			/* the virtual end of the namelist */
int	nname;			/* the number of function names */

#define	HASCYCLEXIT	0x08	/* node has arc exiting from cycle */
#define	CYCLEHEAD	0x10	/* node marked as head of a cycle */
#define	VISITED		0x20	/* node visited during a cycle */

    /*
     * The cycle list.
     * for each subcycle within an identified cycle, we gather
     * its size and the list of included arcs.
     */
struct cl {
    int		size;		/* length of cycle */
    struct cl	*next;		/* next member of list */
    arctype	*list[1];	/* list of arcs in cycle */
    /* actually longer */
};
typedef struct cl cltype;

arctype	*archead;		/* the head of arcs in current cycle list */
cltype	*cyclehead;		/* the head of the list */
int	cyclecnt;		/* the number of cycles found */
#define	CYCLEMAX	100	/* maximum cycles before cutting one of them */

    /*
     *	flag which marks a nl entry as topologically ``busy''
     *	flag which marks a nl entry as topologically ``not_numbered''
     */
#define	DFN_BUSY	-1
#define	DFN_NAN		0

    /* 
     *	namelist entries for cycle headers.
     *	the number of discovered cycles.
     */
nltype	*cyclenl;		/* cycle header namelist */
int	ncycle;			/* number of cycles discovered */

    /*
     * The header on the gmon.out file.
     * gmon.out consists of a struct phdr (defined in gmon.h)
     * and then an array of ncnt samples representing the
     * discretized program counter values.
     *
     *	Backward compatible old style header
     */
struct ophdr {
    UNIT	*lpc;
    UNIT	*hpc;
    int		ncnt;
};

int	debug;

    /*
     * Each discretized pc sample has
     * a count of the number of samples in its range
     */
UNIT	*samples;

unsigned long	s_lowpc;	/* lowpc from the profile file */
unsigned long	s_highpc;	/* highpc from the profile file */
unsigned long	lowpc, highpc;	/* range profiled, in UNIT's */
unsigned sampbytes;		/* number of bytes of samples */
int	nsamples;		/* number of samples */
double	actime;			/* accumulated time thus far for putprofline */
double	totime;			/* total time for all routines */
double	printtime;		/* total of time being printed */
double	scale;			/* scale factor converting samples to pc
				   values: each sample covers scale bytes */
unsigned char	*textspace;	/* text space of a.out in core */
int	cyclethreshold;		/* with -C, minimum cycle size to ignore */

    /*
     *	option flags, from a to z.
     */
bool	aflag;				/* suppress static functions */
bool	bflag;				/* blurbs, too */
bool	cflag;				/* discovered call graph, too */
bool	Cflag;				/* find cut-set to eliminate cycles */
bool	dflag;				/* debugging options */
bool	eflag;				/* specific functions excluded */
bool	Eflag;				/* functions excluded with time */
bool	fflag;				/* specific functions requested */
bool	Fflag;				/* functions requested with time */
bool	kflag;				/* arcs to be deleted */
bool	sflag;				/* sum multiple gmon.out files */
bool	zflag;				/* zero time/called functions, too */

    /*
     *	structure for various string lists
     */
struct stringlist {
    struct stringlist	*next;
    char		*string;
};
struct stringlist	*elist;
struct stringlist	*Elist;
struct stringlist	*flist;
struct stringlist	*Flist;
struct stringlist	*kfromlist;
struct stringlist	*ktolist;

    /*
     *	function declarations
     */
void		addarc(nltype *, nltype *, long);
int		addcycle(arctype **, arctype **);
void		addlist(struct stringlist *, char *);
int		arccmp(arctype *, arctype *);
arctype		*arclookup(nltype *, nltype *);
void		asgnsamples(void);
void		alignentries(void);
void		printblurb(const char *);
int		cycleanalyze(void);
void		cyclelink(void);
void		cycletime(void);
void		compresslist(void);
int		descend(nltype *, arctype **, arctype **);
void		dfn(nltype *);
bool		dfn_busy(nltype *);
void		dfn_findcycle(nltype *);
void		dfn_init(void);
bool		dfn_numbered(nltype *);
void		dfn_post_visit(nltype *);
void		dfn_pre_visit(nltype *);
void		dfn_self_cycle(nltype *);
nltype		**doarcs(void);
void		doflags(void);
void		dotime(void);
void		dumpsum(const char *);
void		findcall(nltype *, unsigned long, unsigned long);
void		flatprofheader(void);
void		flatprofline(nltype *);
int		getnfile(const char *, char ***);
void		getpfile(const char *);
void		gprofheader(void);
void		gprofline(nltype *);
int		hertz(void);
void		inheritflags(nltype *);
unsigned long	max(unsigned long, unsigned long);
int		membercmp(nltype *, nltype *);
unsigned long	min(unsigned long, unsigned long);
nltype		*nllookup(unsigned long);
bool		onlist(struct stringlist *, const char *);
FILE		*openpfile(const char *);
void		printchildren(nltype *);
void		printcycle(nltype *);
void		printgprof(nltype **);
void		printindex(void);
void		printmembers(nltype *);
void		printname(nltype *);
void		printparents(nltype *);
void		printprof(void);
void		readsamples(FILE *);
void		sortchildren(nltype *);
void		sortmembers(nltype *);
void		sortparents(nltype *);
void		tally(struct rawarc *);
int		timecmp(const void *, const void *);
void		timepropagate(nltype *);
int		topcmp(const void *, const void *);
int		totalcmp(const void *, const void *);

#define	LESSTHAN	-1
#define	EQUALTO		0
#define	GREATERTHAN	1

#define	DFNDEBUG	1
#define	CYCLEDEBUG	2
#define	ARCDEBUG	4
#define	TALLYDEBUG	8
#define	TIMEDEBUG	16
#define	SAMPLEDEBUG	32
#define	ELFDEBUG	64
#define	CALLDEBUG	128
#define	LOOKUPDEBUG	256
#define	PROPDEBUG	512
#define	BREAKCYCLE	1024
#define	SUBCYCLELIST	2048
#define	ANYDEBUG	4096
@


1.15
log
@pledge for gprof: "stdio rpath wpath cpath" in the beginning, then drop
wpath and cpath if we don't need to write a gmon.sum file (-s flag).

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: gprof.h,v 1.14 2013/10/19 13:51:40 deraadt Exp $	*/
d285 1
a285 1
int		timecmp(nltype **, nltype **);
d287 2
a288 2
int		topcmp(nltype **, nltype **);
int		totalcmp(nltype **, nltype **);
@


1.14
log
@a.out went away
@
text
@d1 1
a1 1
/*	$OpenBSD: gprof.h,v 1.13 2007/12/09 19:51:30 espie Exp $	*/
d43 1
@


1.13
log
@remove makefile hacks to build links. Instead, change the files that
gprof uses directly.

okay deraadt@@, miod@@.
Thanks for checking that gcc 2.95 is happy with
#include MACRO
@
text
@d1 1
a1 1
/*	$OpenBSD: gprof.h,v 1.12 2006/03/25 19:06:36 espie Exp $	*/
d299 1
a299 2
#define	AOUTDEBUG	64
#define	ELFDEBUG	AOUTDEBUG
@


1.12
log
@add missing prototypes all over the place, u_long -> unsigned long (userland
code).

okay kettenis@@, comments by ray@@
@
text
@d1 1
a1 1
/*	$OpenBSD: gprof.h,v 1.11 2004/07/20 18:20:55 marc Exp $	*/
d44 1
a44 1
#include "machine.h"
@


1.11
log
@
Add ELFDEBUG to mirror the a.out debug that already exists.
OK art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: gprof.h,v 1.10 2004/07/20 08:45:29 art Exp $	*/
d231 1
a231 1
void		addarc();
d233 6
a238 6
void		addlist(struct stringlist *listp, char *funcname);
int		arccmp();
arctype		*arclookup();
void		asgnsamples();
void		alignentries();
void		printblurb();
d243 10
a252 10
int		descend(nltype *node, arctype **stkstart, arctype **stkp);
void		dfn();
bool		dfn_busy();
void		dfn_findcycle();
void		dfn_init();
bool		dfn_numbered();
void		dfn_post_visit();
void		dfn_pre_visit();
void		dfn_self_cycle();
nltype		**doarcs();
d255 4
a258 4
void		dumpsum();
void		findcall(nltype *, u_long, u_long);
void		flatprofheader();
void		flatprofline();
d260 19
a278 22
void		getpfile();
void		gprofheader();
void		gprofline();
int		hertz();
void		inheritflags(nltype *childp);
unsigned long	max();
int		membercmp();
unsigned long	min();
nltype		*nllookup();
bool		onlist();
FILE		*openpfile();
long		operandlength();
operandenum	operandmode();
char		*operandname();
void		printchildren();
void		printcycle();
void		printgprof();
void		printindex();
void		printmembers();
void		printname();
void		printparents();
void		printprof();
d280 5
a284 6
unsigned long	reladdr();
void		sortchildren();
void		sortmembers();
void		sortparents();
void		tally();
int		timecmp();
d286 2
a287 2
int		topcmp();
int		totalcmp();
@


1.10
log
@make lowpc and highpc into long, fixing gprof on 64-bit archs with text
above 4GB.
miod@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: gprof.h,v 1.9 2003/06/03 02:56:08 millert Exp $	*/
d304 1
@


1.9
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: gprof.h,v 1.8 2002/05/08 16:46:35 art Exp $	*/
d187 1
a187 1
unsigned lowpc, highpc;		/* range profiled, in UNIT's */
@


1.8
log
@Split out symbol handling into a separate file.
Implement symbol handling for ELF (based on FreeBSD).
Implement dummy support for alpha, hppa, powerpc and sparc64.

Tested during the last 2 months on various archs (never comitted because
other stuff got in the way).
Some fixups to i386 support from mickey@@

This lets us switch all elf archs to this gprof.
@
text
@d1 1
a1 1
/*	$OpenBSD: gprof.h,v 1.7 2002/02/16 21:27:46 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.7
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: gprof.h,v 1.6 2001/03/22 05:18:30 mickey Exp $	*/
d103 1
a103 1
    char		*name;		/* the name */
a198 3
char	*strtab;		/* string table in core */
long	ssiz;			/* size of the string table */
struct	exec xbuf;		/* exec header of a.out */
d263 1
a263 2
bool		funcsymbol();
void		getnfile();
a264 3
void		getstrtab();
void		getsymtab();
void		gettextspace();
a295 1
int		valcmp(nltype *p1, nltype *p2);
@


1.6
log
@_wall, err/warn; dummy hppa part, like others
@
text
@d1 1
a1 1
/*	$OpenBSD: gprof.h,v 1.5 2001/03/21 22:27:36 miod Exp $	*/
d239 2
a240 2
int		addcycle __P((arctype **, arctype **));
void		addlist __P((struct stringlist *listp, char *funcname));
d246 5
a250 5
int		cycleanalyze __P((void));
void		cyclelink __P((void));
void		cycletime __P((void));
void		compresslist __P((void));
int		descend __P((nltype *node, arctype **stkstart, arctype **stkp));
d260 2
a261 2
void		doflags __P((void));
void		dotime __P((void));
d263 1
a263 1
void		findcall __P((nltype *, u_long, u_long));
d275 1
a275 1
void		inheritflags __P((nltype *childp));
d300 1
a300 1
void		timepropagate __P((nltype *));
d303 1
a303 1
int		valcmp __P((nltype *p1, nltype *p2));
@


1.5
log
@New compilation scheme, more cross-compiler friendly, less error-prone.
As a bonus, bring support for mvme88k.
millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: gprof.h,v 1.4 1996/12/22 20:24:24 rahnds Exp $	*/
d46 1
a50 5
     *	who am i, for error messages.
     */
char	*whoami;

    /*
d238 3
a240 3
/*
		addarc();
*/
d243 9
a251 6
/*
		asgnsamples();
		printblurb();
		cyclelink();
		dfn();
*/
d253 2
a254 3
/*
		dfn_findcycle();
*/
d256 3
a258 5
/*
		dfn_post_visit();
		dfn_pre_visit();
		dfn_self_cycle();
*/
d260 6
a265 6
/*
		done();
		findcalls();
		flatprofheader();
		flatprofline();
*/
d267 9
a275 10
/*
		getnfile();
		getpfile();
		getstrtab();
		getsymtab();
		gettextspace();
		gprofheader();
		gprofline();
		main();
*/
d280 1
d285 9
a293 10
/*
		printchildren();
		printcycle();
		printgprof();
		printmembers();
		printname();
		printparents();
		printprof();
		readsamples();
*/
d295 7
a301 8
/*
		sortchildren();
		sortmembers();
		sortparents();
		tally();
		timecmp();
		topcmp();
*/
d303 1
a303 3
/*
		valcmp();
*/
@


1.4
log
@Add powerpc support to gprof. (primative support).
@
text
@d1 1
a1 1
/*	$OpenBSD: gprof.h,v 1.3 1996/06/26 05:33:51 deraadt Exp $	*/
d47 1
a47 34
#if alpha
#   include "alpha.h"
#endif
#if arm32
#   include "arm32.h"
#endif
#if i386
#   include "i386.h"
#endif
#if m68k
#   include "m68k.h"
#endif
#if mips
#   include "mips.h"
#endif
#if ns32k
#   include "ns32k.h"
#endif
#if powerpc
#   include "powerpc.h"
#endif
#if pmax
#   include "pmax.h"
#endif
#if sparc
#   include "sparc.h"
#endif
#if tahoe
#   include "tahoe.h"
#endif
#if vax
#   include "vax.h"
#endif

@


1.3
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: gprof.h,v 1.13 1996/04/01 21:54:06 mark Exp $	*/
d64 3
@


1.2
log
@sync to netbsd 960418
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: gprof.h,v 1.12 1995/04/19 07:22:59 cgd Exp $	*/
d48 3
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
