head	1.15;
access;
symbols
	OPENBSD_6_0:1.14.0.4
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.2
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.12.0.26
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.18
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.22
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.20
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.16
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.14
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.12
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.10
	OPENBSD_5_0:1.12.0.8
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.6
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.4
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.11.0.16
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.12
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.10
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.8
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.6
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.4
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.2
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.10.0.8
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.6
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.4
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.2
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.6.0.6
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.15
date	2016.12.22.16.36.18;	author krw;	state Exp;
branches;
next	1.14;
commitid	nn6uShkurCw0DE1v;

1.14
date	2015.12.06.23.22.51;	author guenther;	state Exp;
branches;
next	1.13;
commitid	BpKMooBJCslb4mBg;

1.13
date	2015.08.20.22.32.41;	author deraadt;	state Exp;
branches;
next	1.12;
commitid	0Dp7Dy9FuNZesYo2;

1.12
date	2009.10.27.23.59.38;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2006.03.25.19.06.36;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2004.07.20.08.46.23;	author art;	state Exp;
branches;
next	1.9;

1.9
date	2003.07.10.00.06.51;	author david;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.03.02.56.08;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.04.05.14.34.32;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.25.16.30.55;	author danh;	state Exp;
branches;
next	1.5;

1.5
date	2001.11.19.19.02.14;	author mpech;	state Exp;
branches;
next	1.4;

1.4
date	2001.03.31.23.27.02;	author fgsch;	state Exp;
branches;
next	1.3;

1.3
date	2001.03.22.05.18.30;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.33.59;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.21;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.21;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Simply some for() loops to eliminate "computed, not used" warnings.

Also makes the code much easier to understand.

ok tom@@ ok millert@@ pirofti@@ on earlier version.
@
text
@/*	$OpenBSD: printgprof.c,v 1.14 2015/12/06 23:22:51 guenther Exp $	*/
/*	$NetBSD: printgprof.c,v 1.5 1995/04/19 07:16:21 cgd Exp $	*/

/*
 * Copyright (c) 1983, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <string.h>

#include "gprof.h"
#include "pathnames.h"

int namecmp(const void *, const void *);

void
printprof()
{
    nltype		*np;
    nltype		**sortednlp;
    int			index;

    actime = 0.0;
    printf( "\f\n" );
    flatprofheader();
	/*
	 *	Sort the symbol table in by time
	 */
    sortednlp = calloc( nname , sizeof(nltype *) );
    if ( sortednlp == (nltype **) 0 )
	warnx("[printprof] ran out of memory for time sorting");
    for ( index = 0 ; index < nname ; index += 1 ) {
	sortednlp[ index ] = &nl[ index ];
    }
    qsort( sortednlp , nname , sizeof(nltype *) , timecmp );
    for ( index = 0 ; index < nname ; index += 1 ) {
	np = sortednlp[ index ];
	flatprofline( np );
    }
    actime = 0.0;
    free( sortednlp );
}

int
timecmp(const void *v1, const void *v2)
{
    const nltype * const *npp1 = v1;
    const nltype * const *npp2 = v2;

    if ((*npp2) -> time < (*npp1) -> time)
	return -1;
    if ((*npp2) -> time > (*npp1) -> time)
	return 1 ;
    if ((*npp2) -> ncall < (*npp1) -> ncall)
	return -1;
    if ((*npp2) -> ncall > (*npp1) -> ncall)
	return 1;
    return( strcmp( (*npp1) -> name , (*npp2) -> name ) );
}

    /*
     *	header for flatprofline
     */
void
flatprofheader()
{
    
    if (bflag)
	printblurb( _PATH_FLAT_BLURB );
    printf("\ngranularity: each sample hit covers %ld byte(s)",
	    (long) scale * sizeof(UNIT));
    if (totime > 0.0)
	printf(" for %.2f%% of %.2f seconds\n\n" , 100.0/totime, totime / hz);
    else {
	printf( " no time accumulated\n\n" );
	    /*
	     *	this doesn't hurt sinc eall the numerators will be zero.
	     */
	totime = 1.0;
    }
    printf("%5.5s %10.10s %8.8s %8.8s %8.8s %8.8s  %-8.8s\n" ,
	"%  " , "cumulative" , "self  " , "" , "self  " , "total " , "" );
    printf("%5.5s %10.10s %8.8s %8.8s %8.8s %8.8s  %-8.8s\n" ,
	"time" , "seconds " , "seconds" , "calls" ,
	"ms/call" , "ms/call" , "name" );
}

void
flatprofline(nltype *np)
{

    if ( zflag == 0 && np -> ncall == 0 && np -> time == 0 ) {
	return;
    }
    actime += np -> time;
    printf( "%5.1f %10.2f %8.2f" ,
	100 * np -> time / totime , actime / hz , np -> time / hz );
    if ( np -> ncall != 0 ) {
	printf( " %8ld %8.2f %8.2f  " , np -> ncall ,
	    1000 * np -> time / hz / np -> ncall ,
	    1000 * ( np -> time + np -> childtime ) / hz / np -> ncall );
    } else {
	printf( " %8.8s %8.8s %8.8s  " , "" , "" , "" );
    }
    printname( np );
    printf( "\n" );
}

void
gprofheader()
{

    if ( bflag ) {
	printblurb( _PATH_CALLG_BLURB );
    }
    printf( "\ngranularity: each sample hit covers %ld byte(s)" ,
	    (long) scale * sizeof(UNIT) );
    if ( printtime > 0.0 ) {
	printf( " for %.2f%% of %.2f seconds\n\n" ,
		100.0/printtime , printtime / hz );
    } else {
	printf( " no time propagated\n\n" );
	    /*
	     *	this doesn't hurt, since all the numerators will be 0.0
	     */
	printtime = 1.0;
    }
    printf( "%6.6s %5.5s %7.7s %11.11s %7.7s/%-7.7s     %-8.8s\n" ,
	"" , "" , "" , "" , "called" , "total" , "parents");
    printf( "%-6.6s %5.5s %7.7s %11.11s %7.7s+%-7.7s %-8.8s\t%5.5s\n" ,
	"index" , "%time" , "self" , "descendents" ,
	"called" , "self" , "name" , "index" );
    printf( "%6.6s %5.5s %7.7s %11.11s %7.7s/%-7.7s     %-8.8s\n" ,
	"" , "" , "" , "" , "called" , "total" , "children");
    printf( "\n" );
}

void
gprofline(nltype *np)
{
    char	kirkbuffer[ BUFSIZ ];

    snprintf(kirkbuffer, sizeof kirkbuffer, "[%d]" , np -> index );
    printf( "%-6.6s %5.1f %7.2f %11.2f" , kirkbuffer ,
	    100 * ( np -> propself + np -> propchild ) / printtime ,
	    np -> propself / hz , np -> propchild / hz );
    if ( ( np -> ncall + np -> selfcalls ) != 0 ) {
	printf( " %7ld" , np -> npropcall );
	if ( np -> selfcalls != 0 ) {
	    printf( "+%-7ld " , np -> selfcalls );
	} else {
	    printf( " %7.7s " , "" );
	}
    } else {
	printf( " %7.7s %7.7s " , "" , "" );
    }
    printname( np );
    printf( "\n" );
}

void
printgprof(nltype **timesortnlp)
{
    int		index;
    nltype	*parentp;

	/*
	 *	Print out the structured profiling list
	 */
    gprofheader();
    for ( index = 0 ; index < nname + ncycle ; index ++ ) {
	parentp = timesortnlp[ index ];
	if ( zflag == 0 &&
	     parentp -> ncall == 0 &&
	     parentp -> selfcalls == 0 &&
	     parentp -> propself == 0 &&
	     parentp -> propchild == 0 ) {
	    continue;
	}
	if ( ! parentp -> printflag ) {
	    continue;
	}
	if ( parentp -> name == 0 && parentp -> cycleno != 0 ) {
		/*
		 *	cycle header
		 */
	    printcycle( parentp );
	    printmembers( parentp );
	} else {
	    printparents( parentp );
	    gprofline( parentp );
	    printchildren( parentp );
	}
	printf( "\n" );
	printf( "-----------------------------------------------\n" );
	printf( "\n" );
    }
    free( timesortnlp );
}

    /*
     *	sort by decreasing propagated time
     *	if times are equal, but one is a cycle header,
     *		say that's first (e.g. less, i.e. -1).
     *	if one's name doesn't have an underscore and the other does,
     *		say the one is first.
     *	all else being equal, sort by names.
     */
int
totalcmp(const void *v1, const void *v2)
{
    const nltype *np1 = *(const nltype **)v1;
    const nltype *np2 = *(const nltype **)v2;
    double t1, t2;
    int np1noname, np2noname, np1cyclehdr, np2cyclehdr;

    t1 = np1 -> propself + np1 -> propchild;
    t2 = np2 -> propself + np2 -> propchild;
    if ( t2 > t1 )
	    return 1;
    if ( t2 < t1 )
	    return -1;

    np1noname = ( np1 -> name == 0 );
    np2noname = ( np2 -> name == 0 );
    np1cyclehdr = ( np1noname && np1 -> cycleno != 0 );
    np2cyclehdr = ( np2noname && np2 -> cycleno != 0 );

    if ( np1cyclehdr && !np2cyclehdr )
	return -1;
    else if ( !np1cyclehdr && np2cyclehdr )
	return 1;

    if ( np1noname && !np2noname )
	return -1;
    else if ( !np1noname && np2noname )
	return 1;
    else if ( np1noname && np2noname )
	return 0;

    if ( *(np1 -> name) != '_' && *(np2 -> name) == '_' )
	return -1;
    if ( *(np1 -> name) == '_' && *(np2 -> name) != '_' )
	return 1;
    if ( np1 -> ncall > np2 -> ncall )
	return -1;
    if ( np1 -> ncall < np2 -> ncall ) 
	return 1;
    return strcmp( np1 -> name , np2 -> name );
}

void
printparents(nltype *childp)
{
    nltype	*parentp;
    arctype	*arcp;
    nltype	*cycleheadp;

    if ( childp -> cyclehead != 0 ) {
	cycleheadp = childp -> cyclehead;
    } else {
	cycleheadp = childp;
    }
    if ( childp -> parents == 0 ) {
	printf( "%6.6s %5.5s %7.7s %11.11s %7.7s %7.7s     <spontaneous>\n" ,
		"" , "" , "" , "" , "" , "" );
	return;
    }
    sortparents( childp );
    for ( arcp = childp -> parents ; arcp ; arcp = arcp -> arc_parentlist ) {
	parentp = arcp -> arc_parentp;
	if ( childp == parentp || ( arcp -> arc_flags & DEADARC ) ||
	     ( childp->cycleno != 0 && parentp->cycleno == childp->cycleno ) ) {
		/*
		 *	selfcall or call among siblings
		 */
	    printf( "%6.6s %5.5s %7.7s %11.11s %7ld %7.7s     " ,
		    "" , "" , "" , "" ,
		    arcp -> arc_count , "" );
	    printname( parentp );
	    printf( "\n" );
	} else {
		/*
		 *	regular parent of child
		 */
	    printf( "%6.6s %5.5s %7.2f %11.2f %7ld/%-7ld     " ,
		    "" , "" ,
		    arcp -> arc_time / hz , arcp -> arc_childtime / hz ,
		    arcp -> arc_count , cycleheadp -> npropcall );
	    printname( parentp );
	    printf( "\n" );
	}
    }
}

void
printchildren(nltype *parentp)
{
    nltype	*childp;
    arctype	*arcp;

    sortchildren( parentp );
    arcp = parentp -> children;
    for ( arcp = parentp -> children ; arcp ; arcp = arcp -> arc_childlist ) {
	childp = arcp -> arc_childp;
	if ( childp == parentp || ( arcp -> arc_flags & DEADARC ) ||
	    ( childp->cycleno != 0 && childp->cycleno == parentp->cycleno ) ) {
		/*
		 *	self call or call to sibling
		 */
	    printf( "%6.6s %5.5s %7.7s %11.11s %7ld %7.7s     " ,
		    "" , "" , "" , "" , arcp -> arc_count , "" );
	    printname( childp );
	    printf( "\n" );
	} else {
		/*
		 *	regular child of parent
		 */
	    printf( "%6.6s %5.5s %7.2f %11.2f %7ld/%-7ld     " ,
		    "" , "" ,
		    arcp -> arc_time / hz , arcp -> arc_childtime / hz ,
		    arcp -> arc_count , childp -> cyclehead -> npropcall );
	    printname( childp );
	    printf( "\n" );
	}
    }
}

void
printname(nltype *selfp)
{

    if ( selfp -> name != 0 ) {
	printf( "%s" , selfp -> name );
#	ifdef DEBUG
	    if ( debug & DFNDEBUG ) {
		printf( "{%d} " , selfp -> toporder );
	    }
	    if ( debug & PROPDEBUG ) {
		printf( "%5.2f%% " , selfp -> propfraction );
	    }
#	endif /* DEBUG */
    }
    if ( selfp -> cycleno != 0 ) {
	printf( " <cycle %d>" , selfp -> cycleno );
    }
    if ( selfp -> index != 0 ) {
	if ( selfp -> printflag ) {
	    printf( " [%d]" , selfp -> index );
	} else {
	    printf( " (%d)" , selfp -> index );
	}
    }
}

void
sortchildren(nltype *parentp)
{
    arctype	*arcp;
    arctype	*detachedp;
    arctype	sorted;
    arctype	*prevp;

	/*
	 *	unlink children from parent,
	 *	then insertion sort back on to sorted's children.
	 *	    *arcp	the arc you have detached and are inserting.
	 *	    *detachedp	the rest of the arcs to be sorted.
	 *	    sorted	arc list onto which you insertion sort.
	 *	    *prevp	arc before the arc you are comparing.
	 */
    sorted.arc_childlist = 0;
    for (arcp = parentp -> children; arcp; arcp = detachedp) {
	detachedp = arcp -> arc_childlist;
	    /*
	     *	consider *arcp as disconnected
	     *	insert it into sorted
	     */
	for (   prevp = &sorted ;
		prevp -> arc_childlist ;
		prevp = prevp -> arc_childlist ) {
	    if ( arccmp( arcp , prevp -> arc_childlist ) != LESSTHAN ) {
		break;
	    }
	}
	arcp -> arc_childlist = prevp -> arc_childlist;
	prevp -> arc_childlist = arcp;
    }
	/*
	 *	reattach sorted children to parent
	 */
    parentp -> children = sorted.arc_childlist;
}

void
sortparents(nltype *childp)
{
    arctype	*arcp;
    arctype	*detachedp;
    arctype	sorted;
    arctype	*prevp;

	/*
	 *	unlink parents from child,
	 *	then insertion sort back on to sorted's parents.
	 *	    *arcp	the arc you have detached and are inserting.
	 *	    *detachedp	the rest of the arcs to be sorted.
	 *	    sorted	arc list onto which you insertion sort.
	 *	    *prevp	arc before the arc you are comparing.
	 */
    sorted.arc_parentlist = 0;
    for (arcp = childp->parents; arcp; arcp = detachedp) {
	detachedp = arcp->arc_parentlist;
	    /*
	     *	consider *arcp as disconnected
	     *	insert it into sorted
	     */
	for (prevp = &sorted; prevp->arc_parentlist;
	     prevp = prevp->arc_parentlist)
	    if (arccmp(arcp , prevp->arc_parentlist) != GREATERTHAN)
		break;
	arcp->arc_parentlist = prevp->arc_parentlist;
	prevp->arc_parentlist = arcp;
    }
	/*
	 *	reattach sorted arcs to child
	 */
    childp -> parents = sorted.arc_parentlist;
}

    /*
     *	print a cycle header
     */
void
printcycle(nltype *cyclep)
{
    char	kirkbuffer[ BUFSIZ ];

    snprintf(kirkbuffer, sizeof kirkbuffer, "[%d]" , cyclep->index);
    printf("%-6.6s %5.1f %7.2f %11.2f %7ld", kirkbuffer,
	    100 * (cyclep->propself + cyclep->propchild) / printtime,
	    cyclep->propself / hz, cyclep->propchild / hz, cyclep->npropcall);
    if (cyclep -> selfcalls != 0)
	printf("+%-7ld" , cyclep->selfcalls);
    else
	printf(" %7.7s" , "");
    printf(" <cycle %d as a whole>\t[%d]\n" ,
	    cyclep->cycleno , cyclep->index );
}

    /*
     *	print the members of a cycle
     */
void
printmembers(nltype *cyclep)
{
    nltype	*memberp;

    sortmembers( cyclep );
    for ( memberp = cyclep -> cnext ; memberp ; memberp = memberp -> cnext ) {
	printf( "%6.6s %5.5s %7.2f %11.2f %7ld" , "", "",
	  memberp->propself / hz, memberp->propchild / hz, memberp->npropcall );
	if (memberp -> selfcalls != 0)
	    printf("+%-7ld" , memberp -> selfcalls);
	else
	    printf(" %7.7s", "");
	printf("     ");
	printname(memberp);
	printf("\n");
    }
}

    /*
     *	sort members of a cycle
     */
void
sortmembers(nltype *cyclep)
{
    nltype	*todo;
    nltype	*doing;
    nltype	*prev;

	/*
	 *	detach cycle members from cyclehead,
	 *	and insertion sort them back on.
	 */
    todo = cyclep -> cnext;
    cyclep -> cnext = 0;
    for (doing = todo; doing; doing = todo) {
	todo = doing -> cnext;
	for (prev = cyclep; prev -> cnext; prev = prev -> cnext)
	    if (membercmp(doing, prev->cnext ) == GREATERTHAN)
		break;
	doing -> cnext = prev -> cnext;
	prev -> cnext = doing;
    }
}

    /*
     *	major sort is on propself + propchild,
     *	next is sort on ncalls + selfcalls.
     */
int
membercmp(nltype *this , nltype *that)
{
    double	thistime = this -> propself + this -> propchild;
    double	thattime = that -> propself + that -> propchild;
    long	thiscalls = this -> ncall + this -> selfcalls;
    long	thatcalls = that -> ncall + that -> selfcalls;

    if ( thistime > thattime ) {
	return GREATERTHAN;
    }
    if ( thistime < thattime ) {
	return LESSTHAN;
    }
    if ( thiscalls > thatcalls ) {
	return GREATERTHAN;
    }
    if ( thiscalls < thatcalls ) {
	return LESSTHAN;
    }
    return EQUALTO;
}
    /*
     *	compare two arcs to/from the same child/parent.
     *	- if one arc is a self arc, it's least.
     *	- if one arc is within a cycle, it's less than.
     *	- if both arcs are within a cycle, compare arc counts.
     *	- if neither arc is within a cycle, compare with
     *		arc_time + arc_childtime as major key
     *		arc count as minor key
     */
int
arccmp(arctype *thisp, arctype *thatp)
{
    nltype	*thisparentp = thisp -> arc_parentp;
    nltype	*thischildp = thisp -> arc_childp;
    nltype	*thatparentp = thatp -> arc_parentp;
    nltype	*thatchildp = thatp -> arc_childp;
    double	thistime;
    double	thattime;

#   ifdef DEBUG
	if ( debug & TIMEDEBUG ) {
	    printf( "[arccmp] " );
	    printname( thisparentp );
	    printf( " calls " );
	    printname ( thischildp );
	    printf( " %f + %f %ld/%ld\n" ,
		    thisp -> arc_time , thisp -> arc_childtime ,
		    thisp -> arc_count , thischildp -> ncall );
	    printf( "[arccmp] " );
	    printname( thatparentp );
	    printf( " calls " );
	    printname( thatchildp );
	    printf( " %f + %f %ld/%ld\n" ,
		    thatp -> arc_time , thatp -> arc_childtime ,
		    thatp -> arc_count , thatchildp -> ncall );
	    printf( "\n" );
	}
#   endif /* DEBUG */
    if ( thisparentp == thischildp ) {
	    /* this is a self call */
	return LESSTHAN;
    }
    if ( thatparentp == thatchildp ) {
	    /* that is a self call */
	return GREATERTHAN;
    }
    if ( thisparentp -> cycleno != 0 && thischildp -> cycleno != 0 &&
	thisparentp -> cycleno == thischildp -> cycleno ) {
	    /* this is a call within a cycle */
	if ( thatparentp -> cycleno != 0 && thatchildp -> cycleno != 0 &&
	    thatparentp -> cycleno == thatchildp -> cycleno ) {
		/* that is a call within the cycle, too */
	    if ( thisp -> arc_count < thatp -> arc_count ) {
		return LESSTHAN;
	    }
	    if ( thisp -> arc_count > thatp -> arc_count ) {
		return GREATERTHAN;
	    }
	    return EQUALTO;
	} else {
		/* that isn't a call within the cycle */
	    return LESSTHAN;
	}
    } else {
	    /* this isn't a call within a cycle */
	if ( thatparentp -> cycleno != 0 && thatchildp -> cycleno != 0 &&
	    thatparentp -> cycleno == thatchildp -> cycleno ) {
		/* that is a call within a cycle */
	    return GREATERTHAN;
	} else {
		/* neither is a call within a cycle */
	    thistime = thisp -> arc_time + thisp -> arc_childtime;
	    thattime = thatp -> arc_time + thatp -> arc_childtime;
	    if ( thistime < thattime )
		return LESSTHAN;
	    if ( thistime > thattime )
		return GREATERTHAN;
	    if ( thisp -> arc_count < thatp -> arc_count )
		return LESSTHAN;
	    if ( thisp -> arc_count > thatp -> arc_count )
		return GREATERTHAN;
	    return EQUALTO;
	}
    }
}

void
printblurb(const char *blurbname)
{
    FILE	*blurbfile;
    int		input;

    blurbfile = fopen( blurbname , "r" );
    if ( blurbfile == NULL ) {
	warn("fopen: %s", blurbname );
	return;
    }
    while ( ( input = getc( blurbfile ) ) != EOF )
	putchar( input );

    fclose( blurbfile );
}

int
namecmp(const void *v1, const void *v2)
{
    const nltype * const *npp1 = v1;
    const nltype * const *npp2 = v2;

    return( strcmp( (*npp1) -> name , (*npp2) -> name ) );
}

void
printindex()
{
    nltype		**namesortnlp;
    nltype		*nlp;
    int			index, nnames, todo, i, j;
    char		peterbuffer[ BUFSIZ ];

	/*
	 *	Now, sort regular function name alphbetically
	 *	to create an index.
	 */
    namesortnlp = calloc( nname + ncycle , sizeof(nltype *) );
    if ( namesortnlp == (nltype **) 0 )
	warnx("ran out of memory for sorting");
    for ( index = 0 , nnames = 0 ; index < nname ; index++ ) {
	if ( zflag == 0 && nl[index].ncall == 0 && nl[index].time == 0 )
		continue;
	namesortnlp[nnames++] = &nl[index];
    }
    qsort( namesortnlp , nnames , sizeof(nltype *) , namecmp );
    for ( index = 1 , todo = nnames ; index <= ncycle ; index++ ) {
	namesortnlp[todo++] = &cyclenl[index];
    }
    printf( "\f\nIndex by function name\n\n" );
    index = ( todo + 2 ) / 3;
    for ( i = 0; i < index ; i++ ) {
	for ( j = i; j < todo ; j += index ) {
	    nlp = namesortnlp[ j ];
	    if ( nlp -> printflag ) {
		snprintf(peterbuffer, sizeof peterbuffer, "[%d]" , nlp -> index );
	    } else {
		snprintf(peterbuffer, sizeof peterbuffer, "(%d)" , nlp -> index );
	    }
	    if ( j < nnames ) {
		printf( "%6.6s %-19.19s" , peterbuffer , nlp -> name );
	    } else {
		printf( "%6.6s " , peterbuffer );
		snprintf(peterbuffer, sizeof peterbuffer, "<cycle %d>"
		    , nlp -> cycleno );
		printf( "%-19.19s" , peterbuffer );
	    }
	}
	printf( "\n" );
    }
    free( namesortnlp );
}
@


1.14
log
@Fix qsort() comparison functions:
 - correct the function types to eliminate warnings
 - avoid substractions that may overflow
 - rework tests to be consistent: cmp(A,A)==0 && cmp(A,B)=-cmp(B,A)

worked out with Serguey Parkhomovsky (sergueyparkhomovsky (at) gmail.com)
@
text
@d1 1
a1 1
/*	$OpenBSD: printgprof.c,v 1.13 2015/08/20 22:32:41 deraadt Exp $	*/
d397 2
a398 3
    for ((arcp = parentp -> children) && (detachedp = arcp -> arc_childlist);
	    arcp ;
	   (arcp = detachedp) && (detachedp = detachedp -> arc_childlist)) {
d436 2
a437 2
    for ((arcp = childp->parents) && (detachedp = arcp->arc_parentlist);
	 arcp; (arcp = detachedp) && (detachedp = detachedp->arc_parentlist)) {
d513 2
a514 2
    for ((doing = todo) && (todo = doing -> cnext);
	 doing; (doing = todo) && (todo = doing -> cnext)) {
@


1.13
log
@Do not cast result of malloc/calloc/realloc* if stdlib.h is in scope
ok krw millert
@
text
@d1 1
a1 1
/*	$OpenBSD: printgprof.c,v 1.12 2009/10/27 23:59:38 deraadt Exp $	*/
d38 1
a38 1
int namecmp(nltype **, nltype **);
d69 1
a69 1
timecmp(nltype **npp1, nltype **npp2)
d71 2
a72 2
    double	timediff;
    long	calldiff;
d74 3
a76 2
    timediff = (*npp2) -> time - (*npp1) -> time;
    if ( timediff > 0.0 )
d78 1
a78 1
    if ( timediff < 0.0 )
d80 1
a80 2
    calldiff = (*npp2) -> ncall - (*npp1) -> ncall;
    if ( calldiff > 0 )
a81 2
    if ( calldiff < 0 )
	return -1;
d234 1
a234 1
totalcmp(nltype **npp1, nltype **npp2)
d236 8
a243 7
    nltype		*np1 = *npp1;
    nltype		*np2 = *npp2;
    double		diff;

    diff =    ( np1 -> propself + np1 -> propchild )
	    - ( np2 -> propself + np2 -> propchild );
    if ( diff < 0.0 )
d245 1
a245 1
    if ( diff > 0.0 )
d247 7
a253 1
    if ( np1 -> name == 0 && np1 -> cycleno != 0 ) 
d255 1
a255 1
    if ( np2 -> name == 0 && np2 -> cycleno != 0 )
d257 2
a258 1
    if ( np1 -> name == 0 )
d260 1
a260 1
    if ( np2 -> name == 0 )
d262 3
d654 1
a654 1
namecmp(nltype **npp1, nltype **npp2)
d656 3
@


1.12
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: printgprof.c,v 1.11 2006/03/25 19:06:36 espie Exp $	*/
d53 1
a53 1
    sortednlp = (nltype **) calloc( nname , sizeof(nltype *) );
d662 1
a662 1
    namesortnlp = (nltype **) calloc( nname + ncycle , sizeof(nltype *) );
@


1.11
log
@add missing prototypes all over the place, u_long -> unsigned long (userland
code).

okay kettenis@@, comments by ray@@
@
text
@d1 1
a1 1
/*	$OpenBSD: printgprof.c,v 1.10 2004/07/20 08:46:23 art Exp $	*/
a31 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)printgprof.c	8.1 (Berkeley) 6/6/93";
#else
static char rcsid[] = "$OpenBSD: printgprof.c,v 1.10 2004/07/20 08:46:23 art Exp $";
#endif
#endif /* not lint */
@


1.10
log
@Fix formats in debug printfs to work correctly on 64-bit archs.
miod@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: printgprof.c,v 1.9 2003/07/10 00:06:51 david Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: printgprof.c,v 1.9 2003/07/10 00:06:51 david Exp $";
d46 2
d77 1
a77 2
timecmp( npp1 , npp2 )
    nltype **npp1, **npp2;
d123 1
a123 2
flatprofline( np )
    nltype	*np;
d173 1
a173 2
gprofline( np )
    nltype	*np;
d196 1
a196 2
printgprof(timesortnlp)
    nltype	**timesortnlp;
d244 1
a244 3
totalcmp( npp1 , npp2 )
    nltype	**npp1;
    nltype	**npp2;
d276 1
a276 2
printparents( childp )
    nltype	*childp;
d320 1
a320 2
printchildren( parentp )
    nltype	*parentp;
d353 1
a353 2
printname( selfp )
    nltype	*selfp;
d380 1
a380 2
sortchildren( parentp )
    nltype	*parentp;
d420 1
a420 2
sortparents( childp )
    nltype	*childp;
d459 1
a459 2
printcycle( cyclep )
    nltype	*cyclep;
d479 1
a479 2
printmembers( cyclep )
    nltype	*cyclep;
d501 1
a501 2
sortmembers( cyclep )
    nltype	*cyclep;
d528 1
a528 3
membercmp( this , that )
    nltype	*this;
    nltype	*that;
d559 1
a559 3
arccmp( thisp , thatp )
    arctype	*thisp;
    arctype	*thatp;
d636 1
a636 2
printblurb( blurbname )
    char	*blurbname;
d653 1
a653 2
namecmp( npp1 , npp2 )
    nltype **npp1, **npp2;
@


1.9
log
@add missing includes
ok deraadt@@ tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: printgprof.c,v 1.8 2003/06/03 02:56:08 millert Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: printgprof.c,v 1.8 2003/06/03 02:56:08 millert Exp $";
d590 1
a590 1
	    printf( " %f + %f %d/%d\n" ,
d597 1
a597 1
	    printf( " %f + %f %d/%d\n" ,
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: printgprof.c,v 1.7 2003/04/05 14:34:32 deraadt Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: printgprof.c,v 1.7 2003/04/05 14:34:32 deraadt Exp $";
d40 2
@


1.7
log
@snprintf
@
text
@d1 1
a1 1
/*	$OpenBSD: printgprof.c,v 1.6 2002/03/25 16:30:55 danh Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static char rcsid[] = "$OpenBSD: printgprof.c,v 1.6 2002/03/25 16:30:55 danh Exp $";
@


1.6
log
@change the extra text following preprocessor directives into comments.
patch from David Krause <openbsd@@davidkrause.com>

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: printgprof.c,v 1.5 2001/11/19 19:02:14 mpech Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: printgprof.c,v 1.5 2001/11/19 19:02:14 mpech Exp $";
d180 1
a180 1
    sprintf( kirkbuffer , "[%d]" , np -> index );
d475 1
a475 1
    sprintf(kirkbuffer , "[%d]" , cyclep->index);
d708 1
a708 1
		sprintf( peterbuffer , "[%d]" , nlp -> index );
d710 1
a710 1
		sprintf( peterbuffer , "(%d)" , nlp -> index );
d716 2
a717 1
		sprintf( peterbuffer , "<cycle %d>" , nlp -> cycleno );
@


1.5
log
@kill more registers

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: printgprof.c,v 1.4 2001/03/31 23:27:02 fgsch Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: printgprof.c,v 1.4 2001/03/31 23:27:02 fgsch Exp $";
d374 1
a374 1
#	endif DEBUG
d604 1
a604 1
#   endif DEBUG
@


1.4
log
@Make this work again, this might be ugly, but it works; bad mickey.
@
text
@d1 1
a1 1
/*	$OpenBSD: printgprof.c,v 1.3 2001/03/22 05:18:30 mickey Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: printgprof.c,v 1.3 2001/03/22 05:18:30 mickey Exp $";
d51 1
a51 1
    register nltype	*np;
d125 1
a125 1
    register nltype	*np;
d176 1
a176 1
    register nltype	*np;
d252 2
a253 2
    register nltype	*np1 = *npp1;
    register nltype	*np2 = *npp2;
d682 1
a682 1
    register nltype	*nlp;
@


1.3
log
@_wall, err/warn; dummy hppa part, like others
@
text
@d1 1
a1 1
/*	$OpenBSD: printgprof.c,v 1.2 1996/06/26 05:33:59 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: printgprof.c,v 1.2 1996/06/26 05:33:59 deraadt Exp $";
d406 1
a406 1
    for (  arcp = parentp -> children, detachedp = arcp -> arc_childlist;
d408 1
a408 1
	   arcp = detachedp, detachedp = detachedp -> arc_childlist) {
d447 2
a448 2
    for (arcp = childp->parents, detachedp = arcp->arc_parentlist;
	 arcp; arcp = detachedp, detachedp = detachedp->arc_parentlist) {
d527 2
a528 2
    for (doing = todo, todo = doing -> cnext;
	 doing; doing = todo, todo = doing -> cnext) {
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: printgprof.c,v 1.5 1995/04/19 07:16:21 cgd Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: printgprof.c,v 1.5 1995/04/19 07:16:21 cgd Exp $";
d48 1
d53 1
a53 1
    int			index, timecmp();
d62 2
a63 3
    if ( sortednlp == (nltype **) 0 ) {
	fprintf( stderr , "[printprof] ran out of memory for time sorting\n" );
    }
d76 1
d99 1
d103 1
a103 1
    if ( bflag ) {
d105 5
a109 7
    }
    printf( "\ngranularity: each sample hit covers %d byte(s)" ,
	    (long) scale * sizeof(UNIT) );
    if ( totime > 0.0 ) {
	printf( " for %.2f%% of %.2f seconds\n\n" ,
		100.0/totime , totime / hz );
    } else {
d116 5
a120 5
    printf( "%5.5s %10.10s %8.8s %8.8s %8.8s %8.8s  %-8.8s\n" ,
	    "%  " , "cumulative" , "self  " , "" , "self  " , "total " , "" );
    printf( "%5.5s %10.10s %8.8s %8.8s %8.8s %8.8s  %-8.8s\n" ,
	    "time" , "seconds " , "seconds" , "calls" ,
	    "ms/call" , "ms/call" , "name" );
d123 1
d135 1
a135 1
	printf( " %8d %8.2f %8.2f  " , np -> ncall ,
d145 1
d152 1
a152 1
    printf( "\ngranularity: each sample hit covers %d byte(s)" ,
d174 1
d181 1
a181 2
    printf( "%-6.6s %5.1f %7.2f %11.2f" ,
	    kirkbuffer ,
d183 1
a183 2
	    np -> propself / hz ,
	    np -> propchild / hz );
d185 1
a185 1
	printf( " %7d" , np -> npropcall );
d187 1
a187 1
	    printf( "+%-7d " , np -> selfcalls );
d198 1
d281 1
d307 1
a307 1
	    printf( "%6.6s %5.5s %7.7s %11.11s %7d %7.7s     " ,
d316 1
a316 1
	    printf( "%6.6s %5.5s %7.2f %11.2f %7d/%-7d     " ,
d326 1
d342 1
a342 1
	    printf( "%6.6s %5.5s %7.7s %11.11s %7d %7.7s     " ,
d350 1
a350 1
	    printf( "%6.6s %5.5s %7.2f %11.2f %7d/%-7d     " ,
d360 1
d388 1
d406 1
a406 1
    for (  (arcp = parentp -> children)&&(detachedp = arcp -> arc_childlist);
d408 1
a408 1
	   (arcp = detachedp)&&(detachedp = detachedp -> arc_childlist)) {
d429 1
d447 2
a448 3
    for (  (arcp = childp -> parents)&&(detachedp = arcp -> arc_parentlist);
	    arcp ;
	   (arcp = detachedp)&&(detachedp = detachedp -> arc_parentlist)) {
d453 3
a455 4
	for (   prevp = &sorted ;
		prevp -> arc_parentlist ;
		prevp = prevp -> arc_parentlist ) {
	    if ( arccmp( arcp , prevp -> arc_parentlist ) != GREATERTHAN ) {
d457 2
a458 4
	    }
	}
	arcp -> arc_parentlist = prevp -> arc_parentlist;
	prevp -> arc_parentlist = arcp;
d469 1
d475 10
a484 14
    sprintf( kirkbuffer , "[%d]" , cyclep -> index );
    printf( "%-6.6s %5.1f %7.2f %11.2f %7d" ,
	    kirkbuffer ,
	    100 * ( cyclep -> propself + cyclep -> propchild ) / printtime ,
	    cyclep -> propself / hz ,
	    cyclep -> propchild / hz ,
	    cyclep -> npropcall );
    if ( cyclep -> selfcalls != 0 ) {
	printf( "+%-7d" , cyclep -> selfcalls );
    } else {
	printf( " %7.7s" , "" );
    }
    printf( " <cycle %d as a whole>\t[%d]\n" ,
	    cyclep -> cycleno , cyclep -> index );
d490 1
d498 9
a506 11
	printf( "%6.6s %5.5s %7.2f %11.2f %7d" , 
		"" , "" , memberp -> propself / hz , memberp -> propchild / hz ,
		memberp -> npropcall );
	if ( memberp -> selfcalls != 0 ) {
	    printf( "+%-7d" , memberp -> selfcalls );
	} else {
	    printf( " %7.7s" , "" );
	}
	printf( "     " );
	printname( memberp );
	printf( "\n" );
d513 1
d527 4
a530 5
    for (  (doing = todo)&&(todo = doing -> cnext);
	    doing ;
	   (doing = todo )&&(todo = doing -> cnext )){
	for ( prev = cyclep ; prev -> cnext ; prev = prev -> cnext ) {
	    if ( membercmp( doing , prev -> cnext ) == GREATERTHAN ) {
a531 2
	    }
	}
d653 1
d662 1
a662 1
	perror( blurbname );
d665 1
a665 1
    while ( ( input = getc( blurbfile ) ) != EOF ) {
d667 1
a667 1
    }
d678 1
d691 2
a692 3
    if ( namesortnlp == (nltype **) 0 ) {
	fprintf( stderr , "%s: ran out of memory for sorting\n" , whoami );
    }
@


1.1
log
@Initial revision
@
text
@d1 1
d41 1
a41 1
static char rcsid[] = "$NetBSD: printgprof.c,v 1.5 1995/04/19 07:16:21 cgd Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
