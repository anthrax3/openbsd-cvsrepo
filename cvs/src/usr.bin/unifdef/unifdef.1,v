head	1.28;
access;
symbols
	OPENBSD_6_0:1.28.0.4
	OPENBSD_6_0_BASE:1.28
	OPENBSD_5_9:1.28.0.2
	OPENBSD_5_9_BASE:1.28
	OPENBSD_5_8:1.23.0.6
	OPENBSD_5_8_BASE:1.23
	OPENBSD_5_7:1.23.0.2
	OPENBSD_5_7_BASE:1.23
	OPENBSD_5_6:1.22.0.4
	OPENBSD_5_6_BASE:1.22
	OPENBSD_5_5:1.18.0.8
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.18.0.4
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.18.0.2
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.17.0.8
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.6
	OPENBSD_5_0:1.17.0.4
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.17.0.2
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.16.0.14
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.10
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.16.0.12
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.8
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.6
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.4
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.16.0.2
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.14.0.14
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.12
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.14.0.10
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.14.0.8
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.14.0.6
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.14.0.4
	OPENBSD_3_6_BASE:1.14
	OPENBSD_3_5:1.14.0.2
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.11.0.2
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.8.0.12
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.10
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.8.0.8
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_9:1.8.0.6
	OPENBSD_2_8:1.8.0.4
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.2
	OPENBSD_2_7_BASE:1.8
	OPENBSD_2_6:1.6.0.2
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.28
date	2015.12.10.19.43.48;	author mmcc;	state Exp;
branches;
next	1.27;
commitid	1yxqd7y92mTG8Tem;

1.27
date	2015.12.10.19.13.46;	author mmcc;	state Exp;
branches;
next	1.26;
commitid	PJ7pr5txysGWiBWf;

1.26
date	2015.12.05.23.27.35;	author mmcc;	state Exp;
branches;
next	1.25;
commitid	5wzG5dLNzWuGIzWy;

1.25
date	2015.12.04.21.23.19;	author mmcc;	state Exp;
branches;
next	1.24;
commitid	4rr6qpSkmrhhcFZ4;

1.24
date	2015.09.12.15.27.38;	author schwarze;	state Exp;
branches;
next	1.23;
commitid	iQYTLCEok1yRFHo8;

1.23
date	2015.02.17.16.29.16;	author bentley;	state Exp;
branches;
next	1.22;
commitid	0B9BCHUNxiDVeLia;

1.22
date	2014.05.03.14.13.52;	author jmc;	state Exp;
branches;
next	1.21;

1.21
date	2014.04.30.06.06.09;	author jmc;	state Exp;
branches;
next	1.20;

1.20
date	2014.04.24.21.22.05;	author sthen;	state Exp;
branches;
next	1.19;

1.19
date	2014.04.18.21.11.34;	author sthen;	state Exp;
branches;
next	1.18;

1.18
date	2013.01.17.21.29.15;	author jmc;	state Exp;
branches;
next	1.17;

1.17
date	2010.09.03.11.09.29;	author jmc;	state Exp;
branches;
next	1.16;

1.16
date	2007.05.31.19.20.19;	author jmc;	state Exp;
branches;
next	1.15;

1.15
date	2007.04.02.14.12.51;	author jmc;	state Exp;
branches;
next	1.14;

1.14
date	2003.10.23.09.09.13;	author jmc;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.10.09.12.12;	author jmc;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.03.02.56.20;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2003.01.22.18.26.15;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2002.12.02.07.18.50;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2002.12.02.07.16.23;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2000.03.11.21.40.06;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	2000.03.06.03.17.40;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	99.10.17.20.35.46;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	99.10.17.20.24.33;	author aaron;	state Exp;
branches;
next	1.4;

1.4
date	99.06.05.01.21.45;	author aaron;	state Exp;
branches;
next	1.3;

1.3
date	98.10.30.00.24.41;	author aaron;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.42.10;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.46.29;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.46.29;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.28
log
@Remove extraneous punctuation in DIAGNOSTICS. Reduces diff with
upstream.

ok sthen@@
@
text
@.\"	$OpenBSD: unifdef.1,v 1.27 2015/12/10 19:13:46 mmcc Exp $
.\" Copyright (c) 1985, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\" Copyright (c) 2002 - 2013 Tony Finch <dot@@dotat.at>.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Dave Yost. It was rewritten to support ANSI C by Tony Finch.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd $Mdocdate: December 10 2015 $
.Dt UNIFDEF 1
.Os
.Sh NAME
.Nm unifdef
.Nd remove preprocessor conditionals from code
.Sh SYNOPSIS
.Nm
.Op Fl BbcdehKkmnSstV
.Op Fl Oo Cm i Oc Ns Cm D Ns Ar sym Ns Op = Ns Ar val
.Op Fl Oo Cm i Oc Ns Cm U Ns Ar sym
.Op Fl f Ar defile
.Op Fl M Ar backext
.Op Fl o Ar outfile
.Op Fl x Cm 0 | 1 | 2
.Ar
.Sh DESCRIPTION
The
.Nm
utility selectively processes conditional
.Xr cpp 1
directives.
It removes from a file
both the directives
and any additional text that they specify should be removed,
while otherwise leaving the file alone.
.Pp
The
.Nm
utility acts on
.Ic #if , #ifdef , #ifndef ,
.Ic #elif , #else ,
and
.Ic #endif
lines,
using macros specified in
.Fl D
and
.Fl U
command line options or in
.Fl f
definition files.
A directive is processed
if the macro specifications are sufficient to provide
a definite value for its control expression.
If the result is false,
the directive and the following lines under its control are removed.
If the result is true,
only the directive is removed.
An
.Ic #ifdef
or
.Ic #ifndef
directive is passed through unchanged
if its controlling macro is not specified.
Any
.Ic #if
or
.Ic #elif
control expression that has an unknown value or that
.Nm
cannot parse is passed through unchanged.
By default,
.Nm
ignores
.Ic #if
and
.Ic #elif
lines with constant expressions;
it can be told to process them by specifying the
.Fl k
flag on the command line.
.Pp
It understands a commonly-used subset
of the expression syntax for
.Ic #if
and
.Ic #elif
lines:
integer constants,
integer values of macros defined on the command line,
the
.Fn defined
operator,
the operators
.Ic \&! , < , > ,
.Ic <= , >= , == , != ,
.Ic && , || ,
and parenthesized expressions.
A kind of
.Dq "short circuit"
evaluation is used for the
.Ic &&
operator:
if either operand is definitely false then the result is false,
even if the value of the other operand is unknown.
Similarly,
if either operand of
.Ic ||
is definitely true then the result is true.
.Pp
When evaluating an expression,
.Nm
does not expand macros first.
The value of a macro must be a simple number,
not an expression.
A limited form of indirection is allowed,
where one macro's value is the name of another.
.Pp
In most cases,
.Nm
does not distinguish between object-like macros
(without arguments) and function-like macros (with arguments).
A function-like macro invocation can appear in
.Ic #if
and
.Ic #elif
control expressions.
If the macro is not explicitly defined,
or is defined with the
.Fl D
flag on the command-line,
or with
.Ic #define
in a
.Fl f
definition file,
its arguments are ignored.
If a macro is explicitly undefined on the command line with the
.Fl U
flag,
or with
.Ic #undef
in a
.Fl f
definition file,
it may not have any arguments since this leads to a syntax error.
.Pp
The
.Nm
utility understands just enough about C
to know when one of the directives is inactive
because it is inside
a comment,
or affected by a backslash-continued line.
It spots unusually-formatted preprocessor directives
and knows when the layout is too odd for it to handle.
.Pp
The options are as follows:
.Pp
.Bl -tag -width indent -compact
.It Fl B
Compress blank lines around a deleted section.
Mutually exclusive with the
.Fl b
option.
.Pp
.It Fl b
Replace removed lines with blank lines
instead of deleting them.
Mutually exclusive with the
.Fl B
option.
.Pp
.It Fl c
Complement.
That is, lines that would have been removed or blanked
are retained and vice versa.
.Pp
.Sm off
.It Xo
.Fl D Ar sym
.Op = Ar val
.Xc
.Sm on
.It Fl U Ns Ar sym
Specify that a macro is defined
.Pq Fl D
to a given value,
to 1 if no value is given,
or undefined
.Pq Fl U .
.Pp
If the same macro appears in more than one argument,
the last occurrence dominates.
.Pp
.It Fl d
Turn on printing of debugging messages.
.Pp
.It Fl e
By default,
.Nm
will report an error if it needs to remove
a preprocessor directive that spans more than one line,
for example, if it has a multi-line
comment hanging off its right hand end.
The
.Fl e
flag makes it ignore the line instead.
.Pp
.It Fl f Ar defile
The file
.Ar defile
contains
.Ic #define
and
.Ic #undef
preprocessor directives,
which have the same effect as the corresponding
.Fl D
and
.Fl U
command line arguments.
Multiple
.Fl f
arguments can be given and mixed with
.Fl D
and
.Fl U
arguments;
later options override earlier ones.
.Pp
Each directive must be on a single line.
Object-like macro definitions (without arguments)
are set to the given value.
Function-like macro definitions (with arguments)
are treated as if they are set to 1.
.Pp
.Sm off
.It Xo
.Fl iD Ar sym
.Op = Ar val
.Xc
.Sm on
.It Fl iU Ns Ar sym
Ignore
.Ic #ifdef Ns s .
If C code uses
.Ic #ifdef Ns s
to delimit non-C lines,
such as comments
or code which is under construction,
this tells
.Nm
which symbols are used for that purpose so that it will not try to parse
comments and line continuations
inside those
.Ic #ifdef Ns s .
.Pp
If the same macro appears in more than one argument,
the last occurrence dominates.
.Pp
.It Fl h
Print help.
.Pp
.It Fl K
Always treat the result of
.Ic &&
and
.Ic ||
operators as unknown if either operand is unknown,
instead of short-circuiting when unknown operands can't affect the result.
This option is for compatibility with older versions of
.Nm .
.Pp
.It Fl k
Process
.Ic #if
and
.Ic #elif
lines with constant expressions.
By default, sections controlled by such lines are passed through unchanged
because they typically start
.Dq Li "#if 0"
and are used as a kind of comment to sketch out future or past development.
It would be rude to strip them out, just as it would be for normal comments.
.Pp
.It Fl M Ar backext
Modify input files in place, and keep backups of the original files by
appending the
.Ar backext
to the input filenames.
If a zero length
.Ar backext
is given, no backup will be saved.
.Pp
.It Fl m
Modify one or more input files in place.
.Pp
.It Fl n
Add
.Li #line
directives to the output following any deleted lines,
so that errors produced when compiling the output file correspond to
line numbers in the input file.
.Pp
.It Fl o Ar outfile
Write output to the file
.Ar outfile
instead of the standard output when processing a single file.
.Pp
.It Fl S
Like the
.Fl s
option, but the nesting depth of each macro is also printed.
This is useful for working out the number of possible combinations
of interdependent defined/undefined macros.
.Pp
.It Fl s
Instead of processing an input file as usual,
this option causes
.Nm
to produce a list of macros that are used in
preprocessor directive controlling expressions.
.Pp
.It Fl t
Disables parsing for C strings, comments,
and line continuations,
which is useful
for plain text.
This is a blanket version of the
.Fl iD
and
.Fl iU
flags.
.Pp
.It Fl V
Print version details.
.Pp
.It Fl x Cm 0 | 1 | 2
Set exit status mode to zero, one, or two.
See the
.Sx EXIT STATUS
section below for details.
.El
.Pp
The
.Nm
utility takes its input from
.Em stdin
if there are no
.Ar file
arguments.
The
.Fl m
or
.Fl M
options must be used if there are multiple input files.
A dash
.Pq -
specifies input from stdin or output to stdout.
.Pp
The
.Nm
utility works nicely with the
.Fl D
option of
.Xr diff 1 .
.Sh EXIT STATUS
In normal usage the
.Nm
utility's exit status depends on the mode set using the
.Fl x
option.
.Pp
If the exit mode is zero (the default) then
.Nm
exits with status 0 if the output is an exact copy of the input,
or with status 1 if the output differs.
.Pp
If the exit mode is one,
.Nm
exits with status 1 if the output is unmodified
or 0 if it differs.
.Pp
If the exit mode is two,
.Nm
exits with status zero in both cases.
.Pp
In all exit modes,
.Nm
exits with status 2 if there is an error.
.Pp
The exit status is 0 if the
.Fl h
or
.Fl V
command line options are given.
.Sh DIAGNOSTICS
.Bl -item
.It
.Tn EOF
in comment
.It
Inappropriate
.Ic #elif ,
.Ic #else
or
.Ic #endif
.It
Obfuscated preprocessor control line
.It
Premature
.Tn EOF
(with the line number of the most recent unterminated
.Ic #if )
.It
Too many levels of nesting
.El
.Sh SEE ALSO
.Xr cpp 1 ,
.Xr diff 1
.Pp
The unifdef home page is
.Pa http://dotat.at/prog/unifdef
.Sh HISTORY
The
.Nm
command appeared in
.Bx 2.9 .
.Tn ANSI\~C
support was added in
.Fx 4.7 .
.Sh AUTHORS
The original implementation was written by
.An Dave Yost Aq Mt Dave@@Yost.com .
.An Tony Finch Aq Mt dot@@dotat.at
rewrote it to support
.Tn ANSI\~C .
.Sh BUGS
Expression evaluation is very limited.
.Pp
Handling one line at a time means
preprocessor directives split across more than one physical line
(because of comments or backslash-newline)
cannot be handled in every situation.
.Pp
Trigraphs are not recognized.
.Pp
There is no support for macros with different definitions at
different points in the source file.
.Pp
The text-mode and ignore functionality does not correspond to modern
.Xr cpp 1
behaviour.
@


1.27
log
@Swap two DIAGNOSTICS entries to alphabetize. Reduces diff with upstream.
@
text
@d1 1
a1 1
.\"	$OpenBSD: unifdef.1,v 1.26 2015/12/05 23:27:35 mmcc Exp $
d33 1
a33 1
.Dd $Mdocdate: December 5 2015 $
d425 1
a425 1
in comment.
d431 1
a431 1
.Ic #endif .
d433 1
a433 1
Obfuscated preprocessor control line.
d438 1
a438 1
.Ic #if ) .
d440 1
a440 1
Too many levels of nesting.
@


1.26
log
@Fix previous by using the right argument name.
@
text
@d1 1
a1 1
.\"	$OpenBSD: unifdef.1,v 1.25 2015/12/04 21:23:19 mmcc Exp $
d33 1
a33 1
.Dd $Mdocdate: December 4 2015 $
d424 2
a425 1
Too many levels of nesting.
d440 1
a440 2
.Tn EOF
in comment.
@


1.25
log
@Document that the -M option doesn't save a backup when passed ''. Also
clean up the corresponding logic to avoid a useless rename(2) call.

ok deraadt sthen
@
text
@d1 1
a1 1
.\"	$OpenBSD: unifdef.1,v 1.24 2015/09/12 15:27:38 schwarze Exp $
d33 1
a33 1
.Dd $Mdocdate: September 12 2015 $
d316 1
a316 1
.Ar extension
@


1.24
log
@don't use literal brackets to indicate optional syntax elements,
use the .Op macro (or in this case, .Oo/.Oc)
@
text
@d1 1
a1 1
.\"	$OpenBSD: unifdef.1,v 1.23 2015/02/17 16:29:16 bentley Exp $
d33 1
a33 1
.Dd $Mdocdate: February 17 2015 $
d315 3
@


1.23
log
@Mark up email addresses semantically with Mt.

ok schwarze@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: unifdef.1,v 1.22 2014/05/03 14:13:52 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: May 3 2014 $
d42 2
a43 2
.Op Fl [i]D Ns Ar sym Ns Op = Ns Ar val
.Op Fl [i]U Ns Ar sym
@


1.22
log
@more tweaking; ok sthen
@
text
@d1 1
a1 1
.\"	$OpenBSD: unifdef.1,v 1.21 2014/04/30 06:06:09 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: April 30 2014 $
d455 2
a456 2
.An Dave Yost Aq Dave@@Yost.com .
.An Tony Finch Aq dot@@dotat.at
@


1.21
log
@tidy up SYNOPSIS, usage() and the options list; ok sthen
@
text
@d1 1
a1 1
.\"	$OpenBSD: unifdef.1,v 1.20 2014/04/24 21:22:05 sthen Exp $
d33 1
a33 1
.Dd $Mdocdate: April 24 2014 $
d74 1
a74 1
definitions files.
d159 1
a159 1
definitions file,
d168 1
a168 1
definitions file,
d385 1
a385 1
.Fl D Ns Ar sym
@


1.20
log
@Re-add rcsid, and switch back to our previous descriptions for -iDsym[=value]
and -iUsym which jmc and I find a bit easier to understand. ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: unifdef.1,v 1.18 2013/01/17 21:29:15 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: April 18 2014 $
d41 1
a41 2
.Op Fl bBcdehKkmnsStV
.Op Fl I Ns Ar path
a43 1
.Ar ...
a44 1
.Op Fl x Bro Ar 012 Brc
d47 2
a48 1
.Op Ar infile ...
d180 3
a182 1
.Sh OPTIONS
d184 5
a188 2
.It Fl D Ns Ar sym Ns = Ns Ar val
Specify that a macro is defined to a given value.
d190 6
a195 2
.It Fl D Ns Ar sym
Specify that a macro is defined to the value 1.
d197 4
a200 5
.It Fl U Ns Ar sym
Specify that a macro is undefined.
.Pp
If the same macro appears in more than one argument,
the last occurrence dominates.
d204 1
a204 1
.Fl iD Ar sym
d208 16
a223 9
.It Fl iU Ns Ar sym
Ignore
.Ic #ifdef Ns s .
If your C code uses
.Ic #ifdef Ns s
to delimit non-C lines,
such as comments
or code which is under construction,
then you must tell
d225 7
a231 16
which symbols are used for that purpose so that it will not try to parse
comments and line continuations
inside those
.Ic #ifdef Ns s .
One specifies ignored symbols with
.Sm off
.Fl iD Ar sym Op = Ar val
.Sm on
and
.Fl iU Ns Ar sym ,
similar to
.Sm off
.Fl D Ar sym Op = Ar val
.Sm on
and
.Fl U Ns Ar sym .
d245 2
a246 2
command-line arguments.
You can have multiple
d248 1
a248 1
arguments and mix them with
d261 20
a280 6
.It Fl b
Replace removed lines with blank lines
instead of deleting them.
Mutually exclusive with the
.Fl B
option.
d282 2
a283 24
.It Fl B
Compress blank lines around a deleted section.
Mutually exclusive with the
.Fl b
option.
.Pp
.It Fl c
Complement,
i.e., lines that would have been removed or blanked
are retained and vice versa.
.Pp
.It Fl d
Turn on printing of debugging messages.
.Pp
.It Fl e
By default,
.Nm
will report an error if it needs to remove
a preprocessor directive that spans more than one line,
for example, if it has a multi-line
comment hanging off its right hand end.
The
.Fl e
flag makes it ignore the line instead.
a309 3
.It Fl m
Modify one or more input files in place.
.Pp
d316 3
d331 7
a344 7
.It Fl S
Like the
.Fl s
option, but the nesting depth of each macro is also printed.
This is useful for working out the number of possible combinations
of interdependent defined/undefined macros.
.Pp
d359 1
a359 1
.It Fl x Bro Ar 012 Brc
d373 1
a373 1
You must use the
d377 4
a380 3
options if there are multiple input files.
You can specify inut from stdin or output to stdout with
.Ql - .
@


1.19
log
@Since we've been making heavy use of unifdef recently: update it to the
recent 2.10 release.

"This code was derived from software contributed to Berkeley by Dave Yost.
It was rewritten to support ANSI C by Tony Finch. The original version
of unifdef carried the 4-clause BSD copyright licence. None of its code
remains in this version (though some of the names remain) so it now
carries a more liberal licence."

ok deraadt@@
@
text
@d1 1
d33 1
a33 1
.Dd $Mdocdate: January 17 2013 $
d196 6
a201 1
.It Fl iD Ns Ar sym Ns Op = Ns Ar val
d203 23
a225 4
C strings, comments,
and line continuations
are ignored within
.Ic #ifdef
d227 1
a227 4
.Ic #ifndef
blocks
controlled by macros
specified with these options.
@


1.18
log
@remove uesless Pp;
@
text
@a0 1
.\"	$OpenBSD: unifdef.1,v 1.17 2010/09/03 11:09:29 jmc Exp $
d3 1
d6 1
a6 1
.\" Dave Yost. Support for #if and #elif was added by Tony Finch.
d32 1
a32 5
.\"     @@(#)unifdef.1	8.2 (Berkeley) 4/1/94
.\"	$dotat: things/unifdef.1,v 1.26 2002/09/24 19:44:12 fanf2 Exp $
.\" $FreeBSD: src/usr.bin/unifdef/unifdef.1,v 1.15 2002/09/24 19:48:39 fanf Exp $
.\"
.Dd $Mdocdate: September 3 2010 $
d40 10
a49 15
.Op Fl ceklst
.Sm off
.Oo
.Fl D Ar sym
.Op = Ar val
.Oc
.Op Fl I Ar path
.Oo
.Fl iD Ar sym
.Op = Ar val
.Oc
.Op Fl iU Ar sym
.Op Fl U Ar sym
.Sm on
.Op Ar file
d69 39
a107 1
and it understands only the commonly-used subset
d112 3
a114 3
lines.
It handles
integer values of symbols defined on the command line,
d117 1
a117 1
operator applied to symbols defined or undefined on the command line,
d119 3
a121 3
.Ic \&! , < , > , <= ,
.Ic >= , == , != , && ,
.Ic || ,
d123 25
a147 8
Anything that it does not understand is passed through unharmed.
It only processes
.Ic #ifdef
and
.Ic #ifndef
directives if the symbol is specified on the command line,
otherwise they are also passed through unchanged.
By default, it ignores
d151 20
a170 4
lines with constant expressions,
or they may be processed by specifying the
.Fl k
flag on the command line.
d174 1
a174 1
utility also understands just enough about C
d180 8
a187 1
and knows when the layout is too odd to handle.
d189 58
a246 1
The options are as follows:
a247 1
.Bl -tag -width indent -compact
d249 2
a250 7
If the
.Fl c
flag is specified,
then the operation of
.Nm
is complemented,
i.e., the lines that would have been removed or blanked
d253 2
a254 13
.Sm off
.It Xo
.Fl D Ar sym
.Op = Ar val
.Xc
.Sm on
Specify that a symbol is defined,
and optionally specify what value to give it
for the purpose of handling
.Ic #if
and
.Ic #elif
directives.
d257 1
a257 1
Because
d259 3
a261 3
processes its input one line at a time,
it cannot remove preprocessor directives that span more than one line.
The most common example of this is a directive with a multi-line
a262 5
By default,
if
.Nm
has to process such a directive,
it will complain that the line is too obfuscated.
d265 8
a272 34
option changes the behavior so that,
where possible,
such lines are left unprocessed instead of reporting an error.
.Pp
.Sm off
.It Xo
.Fl iD Ar sym
.Op = Ar val
.Xc
.Sm on
.It Fl iU Ns Ar sym
Ignore
.Ic #ifdef Ns s .
If your C code uses
.Ic #ifdef Ns s
to delimit non-C lines,
such as comments
or code which is under construction,
then you must tell
.Nm
which symbols are used for that purpose so that it will not try to parse
comments and line continuations
inside those
.Ic #ifdef Ns s .
One specifies ignored symbols with
.Sm off
.Fl iD Ar sym Op = Ar val
.Sm on
and
.Fl iU Ns Ar sym ,
similar to
.Sm off
.Fl D Ar sym Op = Ar val
.Sm on
d274 5
a278 1
.Fl U Ns Ar sym .
d288 1
a288 1
.Li #if 0
d292 20
a311 3
.It Fl l
Replace removed lines with blank lines
instead of deleting them.
d314 1
a314 1
Instead of processing the input file as usual,
d317 9
a325 11
to produce a list of symbols that appear in expressions
that
.Nm
understands.
It is useful in conjunction with the
.Fl dM
option of
.Xr cpp 1
for creating
.Nm
command lines.
d328 1
a328 1
Disables parsing for C comments
d332 8
d341 5
a345 4
.It Fl U Ns Ar sym
Specify that a symbol is undefined.
If the same symbol appears in more than one argument,
the last occurrence dominates.
d350 1
a350 3
utility copies its output to
.Em stdout
and will take its input from
d352 1
a352 1
if no
d354 8
a361 1
argument is given.
d370 21
a390 1
The
d392 7
a398 2
utility exits 0 if the output is an exact copy of the input,
1 if not, and 2 if in trouble.
d423 3
d430 10
a439 1
.Bx 4.3 .
d443 2
a444 1
Preprocessor control lines split across more than one physical line
d450 1
a450 1
There is no support for symbols with different definitions at
d453 1
a453 1
The text-mode and ignore functionality doesn't correspond to modern
@


1.17
log
@add an EXIT STATUS section for /usr/bin;
@
text
@d1 1
a1 1
.\"	$OpenBSD: unifdef.1,v 1.16 2007/05/31 19:20:19 jmc Exp $
d36 1
a36 1
.Dd $Mdocdate: May 31 2007 $
a239 1
.Pp
@


1.16
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: unifdef.1,v 1.15 2007/04/02 14:12:51 jmc Exp $
d36 1
a36 1
.Dd $Mdocdate$
d259 5
a284 5
.Pp
The
.Nm
utility exits 0 if the output is an exact copy of the input,
1 if not, and 2 if in trouble.
@


1.15
log
@tidy up synopsis and usage(); sort options;
from Igor Sobrado, tweaked by myself
@
text
@d1 1
a1 1
.\"	$OpenBSD: unifdef.1,v 1.14 2003/10/23 09:09:13 jmc Exp $
d36 1
a36 1
.Dd September 24, 2002
@


1.14
log
@macros with too many args;
@
text
@d1 1
a1 1
.\"	$OpenBSD: unifdef.1,v 1.13 2003/06/10 09:12:12 jmc Exp $
d45 1
d47 2
a48 7
.Fl I Ns Ar path
.Fl D Ns Ar sym
.Ns Op = Ns Ar val
.Fl U Ns Ar sym
.Fl iD Ns Ar sym
.Ns Op = Ns Ar val
.Fl iU Ns Ar sym
d50 8
a57 1
.Ar ...
d120 2
a121 1
Available options:
a122 15
.It Fl D Ns Ar sym
.Ns Op = Ns Ar val
Specify that a symbol is defined,
and optionally specify what value to give it
for the purpose of handling
.Ic #if
and
.Ic #elif
directives.
.Pp
.It Fl U Ns Ar sym
Specify that a symbol is undefined.
If the same symbol appears in more than one argument,
the last occurrence dominates.
.Pp
d133 14
d165 33
d236 5
a240 27
.It Fl iD Ns Ar sym
.Ns Op = Ns Ar val
.It Fl iU Ns Ar sym
Ignore
.Ic #ifdef Ns s .
If your C code uses
.Ic #ifdef Ns s
to delimit non-C lines,
such as comments
or code which is under construction,
then you must tell
.Nm
which symbols are used for that purpose so that it will not try to parse
comments and line continuations
inside those
.Ic #ifdef Ns s .
One specifies ignored symbols with
.Fl iD Ns Ar sym
.Ns Oo = Ns Ar val Oc
and
.Fl iU Ns Ar sym
similar to
.Fl D Ns Ar sym
.Ns Op = Ns Ar val
and
.Fl U Ns Ar sym
above.
@


1.13
log
@- section reorder
- COMPATIBILITY merge
- macro cleanup
- kill whitespace at EOL
- new sentence, new line

ssh pages ok markus@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: unifdef.1,v 1.12 2003/06/03 02:56:20 millert Exp $
d70 2
a71 1
.Ic #if , #ifdef , #ifndef , #elif , #else ,
d87 3
a89 1
.Ic \&! , < , > , <= , >= , == , != , && , || ,
@


1.12
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: unifdef.1,v 1.11 2003/01/22 18:26:15 deraadt Exp $
a241 3
.Sh SEE ALSO
.Xr cpp 1 ,
.Xr diff 1
d268 8
a290 5
.Sh HISTORY
The
.Nm
command appeared in
.Bx 4.3 .
@


1.11
log
@more sync from freebsd; tedu@@Stanford.EDU
@
text
@d1 1
a1 1
.\"	$OpenBSD: unifdef.1,v 1.10 2002/12/02 07:18:50 deraadt Exp $
d16 1
a16 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
@


1.10
log
@nuke unifdefall
@
text
@d1 1
a1 1
.\"	$OpenBSD: unifdef.1,v 1.9 2002/12/02 07:16:23 deraadt Exp $
d48 1
a48 1
.Op Fl cklst
d114 3
a116 7
or a single or double quote.
Parsing for quotes is very simplistic:
when it finds an open quote,
it ignores everything (except escaped quotes)
until it finds a close quote, and
it will not complain if it gets
to the end of a line and finds no backslash for continuation.
d145 18
d196 3
a198 1
Disables parsing for C comments and quotes, which is useful
d214 1
a214 1
for quotes and comments
d252 9
a260 1
Inappropriate elif, else or endif.
d264 5
a268 2
with line numbers of the unterminated
.Ic #ifdef Ns s .
d278 12
a289 1
Does not work correctly if input contains nul characters.
@


1.9
log
@freebsd diffs; merged by tedu@@Stanford.EDU
@
text
@d1 1
a1 1
.\"	$OpenBSD: unifdef.1,v 1.8 2000/03/11 21:40:06 aaron Exp $
d44 1
a44 1
.Nm unifdef , unifdefall
a59 4
.Nm unifdefall
.Op Fl I Ns Ar path
.Ar ...
.Ar file
a121 15
A script called
.Nm unifdefall
can be used to remove all conditional
.Xr cpp 1
directives from a file.
It uses
.Nm Fl s
and
.Nm cpp Fl dM
to get lists of all the controlling symbols
and their definitions (or lack thereof),
then invokes
.Nm
with appropriate arguments to process the file.
.Pp
a211 13
.Pp
.It Fl I Ns Ar path
Specifies to
.Nm unifdefall
an additional place to look for
.Ic #include
files.
This option is ignored by
.Nm
for compatibility with
.Xr cpp 1
and to simplify the implementation of
.Nm unifdefall .
@


1.8
log
@Various cleanups and standardizations.
@
text
@d1 1
a1 3
.\"	$OpenBSD: unifdef.1,v 1.7 2000/03/06 03:17:40 aaron Exp $
.\"	$NetBSD: unifdef.1,v 1.4 1994/12/07 00:33:48 jtc Exp $
.\"
d6 1
a6 1
.\" Dave Yost.
d37 2
d40 1
a40 1
.Dd April 1, 1994
d44 2
a45 2
.Nm unifdef
.Nd remove ifdef'ed lines
d47 2
a48 2
.Nm unifdef
.Op Fl clt
d50 1
d52 1
d55 2
a56 1
.Fl iD Ns Ar sym
d60 4
d65 1
d67 9
a75 2
is useful for removing ifdef'ed lines
from a file while otherwise leaving the file alone.
d77 39
a115 4
acts on
#ifdef, #ifndef, #else, and #endif lines,
and it knows only enough about C
to know when one of these is inactive
d126 29
a154 19
The options are as follows:
.Bl -tag -width Ds
.It Xo Fl D Ns Ar sym ,
.Fl U Ns Ar sym
.Xc
Specify which symbols to define or undefine,
and the lines inside those ifdefs will be copied to the output or removed as
appropriate.
The ifdef, ifndef, else, and endif lines associated with
.Ar sym
will also be removed.
ifdefs involving symbols you don't specify
and
.Dq #if
control lines are untouched and copied out
along with their associated
ifdef, else, and endif lines.
If an ifdef X occurs nested inside another ifdef X, then the
inside ifdef is treated as if it were an unrecognized symbol.
d157 1
d167 13
d183 17
d203 9
a211 5
.It Xo Fl iD Ns Ar sym ,
.Fl iU Ns Ar sym
.Xc
Ignore ifdefs.
If your C code uses ifdefs to delimit non-C lines,
d216 1
a216 1
which symbols are used for that purpose so that it won't try to parse
d218 3
a220 2
inside those ifdefs.
One specifies ignored ifdefs with
d222 1
d227 1
d231 13
d246 1
d248 1
a248 1
copies its output to
d256 1
d258 1
a258 1
works nicely with the
d260 4
a263 1
option added to
a264 1
as of the 4.1 Berkeley Software Distribution.
d266 4
a269 2
Inappropriate else or endif.
.br
d272 10
a281 1
with line numbers of the unterminated #ifdefs.
d283 1
a283 3
Exit status is 0 if output is exact copy of input, 1 if not, 2 if trouble.
.Sh SEE ALSO
.Xr diff 1
a288 6
.Sh BUGS
Should try to deal with
.Dq #if
lines.
.Pp
Doesn't work correctly if input contains null characters.
@


1.7
log
@Some section re-ordering.
@
text
@d1 1
a1 1
.\"	$OpenBSD: unifdef.1,v 1.6 1999/10/17 20:35:46 aaron Exp $
d58 1
a58 1
.Nm unifdef
d61 1
a61 1
.Nm unifdef
d77 4
a80 3
.Bl -tag -width Ds -compact
.It Fl D Ns Ar sym
.It Fl U Ns Ar sym
d88 3
a90 2
and ``#if'' control lines
are untouched and copied out
a96 1
.Pp
d102 1
a102 1
.Nm unifdef
d104 1
a104 1
i.e. the lines that would have been removed or blanked
a105 1
.Pp
a108 1
.Pp
d112 3
a114 3
.Pp
.It Fl iD Ns Ar sym
.It Fl iU Ns Ar sym
d120 1
a120 1
.Nm unifdef
d135 1
a135 1
.Nm unifdef
d144 1
a144 1
.Nm unifdef
a149 2
.Sh SEE ALSO
.Xr diff 1
d158 2
d166 3
a168 1
Should try to deal with ``#if'' lines.
@


1.6
log
@Remove some redundant .Pp.
@
text
@d1 1
a1 1
.\"	$OpenBSD: unifdef.1,v 1.5 1999/10/17 20:24:33 aaron Exp $
a160 4
.Sh BUGS
Should try to deal with ``#if'' lines.
.Pp
Doesn't work correctly if input contains null characters.
d166 4
@


1.5
log
@More consistent introduction to options.
@
text
@d1 1
a1 1
.\"	$OpenBSD: unifdef.1,v 1.4 1999/06/05 01:21:45 aaron Exp $
a76 1
.Pp
@


1.4
log
@- remove trailing white space
- remove arguments from .Os macros
- remove arguments from .Nm macros, where appropriate
- some more Dq/Sq/Ql insanity
- still lots to do in the usr.bin tree... :/
@
text
@d1 1
a1 1
.\"	$OpenBSD: unifdef.1,v 1.3 1998/10/30 00:24:41 aaron Exp $
d76 1
a76 1
Available options:
@


1.3
log
@usr.bin/ man page fixes, t-z
@
text
@d1 1
a1 1
.\"	$OpenBSD: unifdef.1,v 1.2 1996/06/26 05:42:10 deraadt Exp $
d42 1
a42 1
.Os BSD 4.3
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
.\"	$OpenBSD: unifdef.1,v 1.4 1994/12/07 00:33:48 jtc Exp $
d58 1
a58 1
.Nm Unifdef
d61 1
a61 1
.Nm Unifdef
d77 1
d81 1
a81 1
Specify which symbols to define or undefine.
d87 1
a87 1
Ifdefs involving symbols you don't specify
d110 1
d137 1
a137 1
.Nm Unifdef
d146 1
a146 1
.Nm Unifdef
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
