head	1.18;
access;
symbols
	OPENBSD_6_1:1.18.0.4
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.17.0.30
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.26
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.17.0.28
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.20
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.17.0.24
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.17.0.22
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.17.0.18
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.17.0.16
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.17.0.14
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.12
	OPENBSD_5_0:1.17.0.10
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.17.0.8
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.17.0.6
	OPENBSD_4_8_BASE:1.17
	OPENBSD_4_7:1.17.0.2
	OPENBSD_4_7_BASE:1.17
	OPENBSD_4_6:1.17.0.4
	OPENBSD_4_6_BASE:1.17
	OPENBSD_4_5:1.16.0.4
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.2
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.15.0.6
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.4
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.2
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.14.0.8
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.14.0.6
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.14.0.4
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.14.0.2
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.10.0.2
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.9.0.2
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.7.0.8
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.7.0.6
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.6.0.4
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_8:1.5.0.16
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.14
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.12
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.10
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.8
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.6
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.4
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.18
date	2017.02.19.13.15.19;	author jsg;	state Exp;
branches;
next	1.17;
commitid	J8HELt4a1edgn8xI;

1.17
date	2009.04.24.18.54.34;	author chl;	state Exp;
branches;
next	1.16;

1.16
date	2008.05.08.01.40.57;	author chl;	state Exp;
branches;
next	1.15;

1.15
date	2006.10.12.03.32.32;	author drahn;	state Exp;
branches;
next	1.14;

1.14
date	2004.10.27.18.12.44;	author pefo;	state Exp;
branches;
next	1.13;

1.13
date	2004.10.27.15.59.16;	author pefo;	state Exp;
branches;
next	1.12;

1.12
date	2004.10.23.16.59.25;	author grange;	state Exp;
branches;
next	1.11;

1.11
date	2004.10.20.17.23.34;	author grange;	state Exp;
branches;
next	1.10;

1.10
date	2004.06.03.03.14.20;	author tedu;	state Exp;
branches;
next	1.9;

1.9
date	2004.03.23.17.57.13;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2004.02.03.16.31.23;	author drahn;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.13.01.46.12;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2001.03.16.04.45.15;	author hugh;	state Exp;
branches;
next	1.5;

1.5
date	97.02.09.22.49.17;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.01.29.22.31.46;	author rahnds;	state Exp;
branches;
next	1.3;

1.3
date	95.12.15.04.34.17;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.12.14.03.30.10;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.10;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.10;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Recognise AArch64 binaries and core dumps.
@
text
@#	$OpenBSD: elf,v 1.17 2009/04/24 18:54:34 chl Exp $

#------------------------------------------------------------------------------
# elf:  file(1) magic for ELF executables
#
# We have to check the byte order flag to see what byte order all the
# other stuff in the header is in.
#
# What're the correct byte orders for the nCUBE and the Fujitsu VPP500?
#
# updated by Daniel Quinlan (quinlan@@yggdrasil.com)
0	string		\177ELF		ELF
>4	byte		0		invalid class
>4	byte		1		32-bit
>4	byte		2		64-bit
>5	byte		0		invalid byte order
>5	byte		1		LSB
>>16	leshort		0		no file type,
!:mime	application/octet-stream
>>16	leshort		1		relocatable,
!:mime	application/x-object
>>16	leshort		2		executable,
!:mime	application/x-executable
>>16	leshort		3		shared object,
!:mime	application/x-sharedlib
# Core handling from Peter Tobias <tobias@@server.et-inf.fho-emden.de>
# corrections by Christian 'Dr. Disk' Hechelmann <drdisk@@ds9.au.s.shuttle.de>
>>16	leshort		4		core file
!:mime	application/x-coredump
# Core file detection is not reliable.
#>>>(0x38+0xcc) string	>\0		of '%s'
#>>>(0x38+0x10) lelong	>0		(signal %d),
>>16	leshort		&0xff00		processor-specific,
>>18	leshort		0		no machine,
>>18	leshort		1		AT&T WE32100 - invalid byte order,
>>18	leshort		2		SPARC - invalid byte order,
>>18	leshort		3		Intel 80386,
>>18	leshort		4		Motorola
>>>36	lelong		&0x01000000	68000 - invalid byte order,
>>>36	lelong		&0x00810000	CPU32 - invalid byte order,
>>>36	lelong		0		68020 - invalid byte order,
>>18	leshort		5		Motorola 88000 - invalid byte order,
>>18	leshort		6		Intel 80486,
>>18	leshort		7		Intel 80860,
# The official e_machine number for MIPS is now #8, regardless of endianness.
# The second number (#10) will be deprecated later. For now, we still
# say something if #10 is encountered, but only gory details for #8.
>>18	leshort		8		MIPS,
>>>36	lelong		&0x20		N32
>>18	leshort		10		MIPS,
>>>36	lelong		&0x20		N32
>>18	leshort		8
# only for 32-bit
>>>4	byte		1
>>>>36  lelong&0xf0000000	0x00000000	MIPS-I
>>>>36  lelong&0xf0000000	0x10000000	MIPS-II
>>>>36  lelong&0xf0000000	0x20000000	MIPS-III
>>>>36  lelong&0xf0000000	0x30000000	MIPS-IV
>>>>36  lelong&0xf0000000	0x40000000	MIPS-V
>>>>36  lelong&0xf0000000	0x50000000	MIPS32
>>>>36  lelong&0xf0000000	0x60000000	MIPS64
>>>>36  lelong&0xf0000000	0x70000000	MIPS32 rel2
>>>>36  lelong&0xf0000000	0x80000000	MIPS64 rel2
# only for 64-bit
>>>4	byte		2
>>>>48  lelong&0xf0000000	0x00000000	MIPS-I
>>>>48  lelong&0xf0000000	0x10000000	MIPS-II
>>>>48  lelong&0xf0000000	0x20000000	MIPS-III
>>>>48  lelong&0xf0000000	0x30000000	MIPS-IV
>>>>48  lelong&0xf0000000	0x40000000	MIPS-V
>>>>48  lelong&0xf0000000	0x50000000	MIPS32
>>>>48  lelong&0xf0000000	0x60000000	MIPS64
>>>>48  lelong&0xf0000000	0x70000000	MIPS32 rel2
>>>>48  lelong&0xf0000000	0x80000000	MIPS64 rel2
>>18	leshort		9		Amdahl - invalid byte order,
>>18	leshort		10		MIPS (deprecated),
>>18	leshort		11		RS6000 - invalid byte order,
>>18	leshort		15		PA-RISC - invalid byte order,
>>>50	leshort		0x0214		2.0
>>>48	leshort		&0x0008		(LP64),
>>18	leshort		16		nCUBE,
>>18	leshort		17		Fujitsu VPP500,
>>18	leshort		18		SPARC32PLUS,
>>18	leshort		20		PowerPC,
>>18	leshort		22		IBM S/390,
>>18	leshort		36		NEC V800,
>>18	leshort		37		Fujitsu FR20,
>>18	leshort		38		TRW RH-32,
>>18	leshort		39		Motorola RCE,
>>18	leshort		40		ARM,
>>18	leshort		41		Alpha,
>>18	leshort		0xa390		IBM S/390 (obsolete),
>>18	leshort		42		Renesas SH,
>>18	leshort		43		SPARC V9 - invalid byte order,
>>18	leshort		44		Siemens Tricore Embedded Processor,
>>18	leshort		45		Argonaut RISC Core, Argonaut Technologies Inc.,
>>18	leshort		46		Renesas H8/300,
>>18	leshort		47		Renesas H8/300H,
>>18	leshort		48		Renesas H8S,
>>18	leshort		49		Renesas H8/500,
>>18	leshort		50		IA-64,
>>18	leshort		51		Stanford MIPS-X,
>>18	leshort		52		Motorola Coldfire,
>>18	leshort		53		Motorola M68HC12,
>>18	leshort		54		Fujitsu MMA,
>>18	leshort		55		Siemens PCP,
>>18	leshort		56		Sony nCPU,
>>18	leshort		57		Denso NDR1,
>>18	leshort		58		Start*Core,
>>18	leshort		59		Toyota ME16,
>>18	leshort		60		ST100,
>>18	leshort		61		Tinyj emb.,
>>18	leshort		62		x86-64,
>>18	leshort		63		Sony DSP,
>>18	leshort		66		FX66,
>>18	leshort		67		ST9+ 8/16 bit,
>>18	leshort		68		ST7 8 bit,
>>18	leshort		69		MC68HC16,
>>18	leshort		70		MC68HC11,
>>18	leshort		71		MC68HC08,
>>18	leshort		72		MC68HC05,
>>18	leshort		73		SGI SVx,
>>18	leshort		74		ST19 8 bit,
>>18	leshort		75		Digital VAX,
>>18	leshort		76		Axis cris,
>>18	leshort		77		Infineon 32-bit embedded,
>>18	leshort		78		Element 14 64-bit DSP,
>>18	leshort		79		LSI Logic 16-bit DSP,
>>18	leshort		80		MMIX,
>>18	leshort		81		Harvard machine-independent,
>>18	leshort		82		SiTera Prism,
>>18	leshort		83		Atmel AVR 8-bit,
>>18	leshort		84		Fujitsu FR30,
>>18	leshort		85		Mitsubishi D10V,
>>18	leshort		86		Mitsubishi D30V,
>>18	leshort		87		NEC v850,
>>18	leshort		88		Renesas M32R,
>>18	leshort		89		Matsushita MN10300,
>>18	leshort		90		Matsushita MN10200,
>>18	leshort		91		picoJava,
>>18	leshort		92		OpenRISC,
>>18	leshort		93		ARC Cores Tangent-A5,
>>18	leshort		0x3426		OpenRISC (obsolete),
>>18	leshort		0x8472		OpenRISC (obsolete),
>>18	leshort		94		Tensilica Xtensa,
>>18	leshort		97		NatSemi 32k,
>>18	leshort		106		Analog Devices Blackfin,
>>18	leshort		0x9026		Alpha (unofficial),
>>18	leshort		183		AArch64,
>>20	lelong		0		invalid version
>>20	lelong		1		version 1
>>36	lelong		1		MathCoPro/FPU/MAU Required
>5	byte		2		MSB
>>16	beshort		0		no file type,
!:mime	application/octet-stream
>>16	beshort		1		relocatable,
!:mime	application/x-object
>>16	beshort		2		executable,
!:mime	application/x-executable
>>16	beshort		3		shared object,
!:mime	application/x-sharedlib
>>16	beshort		4		core file,
!:mime	application/x-coredump
#>>>(0x38+0xcc) string	>\0		of '%s'
#>>>(0x38+0x10) belong	>0		(signal %d),
>>16	beshort		&0xff00		processor-specific,
>>18	beshort		0		no machine,
>>18	beshort		1		AT&T WE32100,
>>18	beshort		2		SPARC,
>>18	beshort		3		Intel 80386 - invalid byte order,
>>18	beshort		4		Motorola
>>>36	belong		&0x01000000	68000,
>>>36	belong		&0x00810000	CPU32,
>>>36	belong		0		68020,
>>18	beshort		5		Motorola 88000,
>>18	beshort		6		Intel 80486 - invalid byte order,
>>18	beshort		7		Intel 80860,
# only for MIPS - see comment in little-endian section above.
>>18	beshort		8		MIPS,
>>>36	belong		&0x20		N32
>>18	beshort		10		MIPS,
>>>36	belong		&0x20		N32
>>18	beshort		8
# only for 32-bit
>>>4	byte		1
>>>>36  belong&0xf0000000	0x00000000	MIPS-I
>>>>36  belong&0xf0000000	0x10000000	MIPS-II
>>>>36  belong&0xf0000000	0x20000000	MIPS-III
>>>>36  belong&0xf0000000	0x30000000	MIPS-IV
>>>>36  belong&0xf0000000	0x40000000	MIPS-V
>>>>36  belong&0xf0000000	0x50000000	MIPS32
>>>>36  belong&0xf0000000	0x60000000	MIPS64
>>>>36  belong&0xf0000000	0x70000000	MIPS32 rel2
>>>>36  belong&0xf0000000	0x80000000	MIPS64 rel2
# only for 64-bit
>>>4	byte		2
>>>>48	belong&0xf0000000	0x00000000	MIPS-I
>>>>48	belong&0xf0000000	0x10000000	MIPS-II
>>>>48	belong&0xf0000000	0x20000000	MIPS-III
>>>>48	belong&0xf0000000	0x30000000	MIPS-IV
>>>>48	belong&0xf0000000	0x40000000	MIPS-V
>>>>48	belong&0xf0000000	0x50000000	MIPS32
>>>>48	belong&0xf0000000	0x60000000	MIPS64
>>>>48	belong&0xf0000000	0x70000000	MIPS32 rel2
>>>>48	belong&0xf0000000	0x80000000	MIPS64 rel2
>>18	beshort		9		Amdahl,
>>18	beshort		10		MIPS (deprecated),
>>18	beshort		11		RS6000,
>>18	beshort		15		PA-RISC
>>>50	beshort		0x0214		2.0
>>>48	beshort		&0x0008		(LP64)
>>18	beshort		16		nCUBE,
>>18	beshort		17		Fujitsu VPP500,
>>18	beshort		18		SPARC32PLUS,
>>>36	belong&0xffff00	&0x000100	V8+ Required,
>>>36	belong&0xffff00	&0x000200	Sun UltraSPARC1 Extensions Required,
>>>36	belong&0xffff00	&0x000400	HaL R1 Extensions Required,
>>>36	belong&0xffff00	&0x000800	Sun UltraSPARC3 Extensions Required,
>>18	beshort		20		PowerPC or cisco 4500,
>>18	beshort		21		64-bit PowerPC or cisco 7500,
>>18	beshort		22		IBM S/390,
>>18	beshort		23		Cell SPU,
>>18	beshort		24		cisco SVIP,
>>18	beshort		25		cisco 7200,
>>18	beshort		36		NEC V800 or cisco 12000,
>>18	beshort		37		Fujitsu FR20,
>>18	beshort		38		TRW RH-32,
>>18	beshort		39		Motorola RCE,
>>18	beshort		40		ARM,
>>18	beshort		41		Alpha,
>>18	beshort		42		Renesas SH,
>>18	beshort		43		SPARC V9,
>>18	beshort		44		Siemens Tricore Embedded Processor,
>>18	beshort		45		Argonaut RISC Core, Argonaut Technologies Inc.,
>>18	beshort		46		Renesas H8/300,
>>18	beshort		47		Renesas H8/300H,
>>18	beshort		48		Renesas H8S,
>>18	beshort		49		Renesas H8/500,
>>18	beshort		50		IA-64,
>>18	beshort		51		Stanford MIPS-X,
>>18	beshort		52		Motorola Coldfire,
>>18	beshort		53		Motorola M68HC12,
>>18	beshort		73		Cray NV1,
>>18	beshort		75		Digital VAX,
>>18	beshort		88		Renesas M32R,
>>18	leshort		92		OpenRISC,
>>18	leshort		0x3426		OpenRISC (obsolete),
>>18	leshort		0x8472		OpenRISC (obsolete),
>>18	beshort		94		Tensilica Xtensa,
>>18	beshort		97		NatSemi 32k,
>>18	beshort		0x18ad		AVR32 (unofficial),
>>18	beshort		0x9026		Alpha (unofficial),
>>18	beshort		0xa390		IBM S/390 (obsolete),
>>20	belong		0		invalid version
>>20	belong		1		version 1
>>36	belong		1		MathCoPro/FPU/MAU Required
@


1.17
log
@file update to 4.24

The '-i' switch is now enabled so file(1) can output mime type strings.

ok ian@@
builk ports build test on amd64 by jasper@@

ok ray@@ gilles@@ on a almost identical diff
builk ports build test on sparc64 on this almost identical diff by ajacoutot@@
also tested by landry@@
@
text
@d1 1
a1 1
#	$OpenBSD: elf,v 1.16 2008/05/08 01:40:57 chl Exp $
d149 1
@


1.16
log
@Update file to 4.21.

tested by ian@@ sthen@@

OK ian@@, "move ahead with it" deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: elf,v 1.15 2006/10/12 03:32:32 drahn Exp $
d19 1
d21 1
d23 1
d25 1
d29 1
d60 4
a63 4
>>>>36  lelong&0xf0000000	0x60000000	MIPS32
>>>>36  lelong&0xf0000000	0x70000000	MIPS64
>>>>36  lelong&0xf0000000	0x80000000	MIPS32 rel2
>>>>36  lelong&0xf0000000	0x90000000	MIPS64 rel2
d71 4
a74 4
>>>>48  lelong&0xf0000000	0x60000000	MIPS32
>>>>48  lelong&0xf0000000	0x70000000	MIPS64 
>>>>48  lelong&0xf0000000	0x80000000	MIPS32 rel2
>>>>48  lelong&0xf0000000	0x90000000	MIPS64 rel2
d105 8
d114 10
d125 12
d138 7
d154 1
d156 1
d158 1
d160 1
d162 1
d190 4
a193 4
>>>>36  belong&0xf0000000	0x60000000	MIPS32
>>>>36  belong&0xf0000000	0x70000000	MIPS64
>>>>36  belong&0xf0000000	0x80000000	MIPS32 rel2
>>>>36  belong&0xf0000000	0x90000000	MIPS64 rel2
d201 4
a204 4
>>>>48	belong&0xf0000000	0x60000000	MIPS32
>>>>48	belong&0xf0000000	0x70000000	MIPS64 
>>>>48	belong&0xf0000000	0x80000000	MIPS32 rel2
>>>>48	belong&0xf0000000	0x90000000	MIPS64 rel2
d245 3
d250 1
@


1.15
log
@recognize 'sh' binaries.
@
text
@d1 1
a1 1
#	$OpenBSD: elf,v 1.14 2004/10/27 18:12:44 pefo Exp $
a8 1
# MIPS RS3000 may also be for MIPS RS2000.
a21 24
# only for MIPS
>>18	leshort		8
# only for 32-bit
>>>4	byte		1
>>>>36	lelong&0xf0000000	0x00000000	MIPS-I,
>>>>36	lelong&0xf0000000	0x10000000	MIPS-II,
>>>>36	lelong&0xf0000000	0x20000000	MIPS-III,
>>>>36	lelong&0xf0000000	0x30000000	MIPS-IV,
>>>>36	lelong&0xf0000000	0x40000000	MIPS-V,
>>>>36	lelong&0xf0000000	0x60000000	MIPS32,
>>>>36	lelong&0xf0000000	0x70000000	MIPS64,
>>>>36	lelong&0xf0000000	0x80000000	MIPS32 rel2,
>>>>36	lelong&0xf0000000	0x90000000	MIPS64 rel2,
# only for 64-bit
>>>4	byte		2
>>>>48	lelong&0xf0000000	0x00000000	MIPS-I,
>>>>48	lelong&0xf0000000	0x10000000	MIPS-II,
>>>>48	lelong&0xf0000000	0x20000000	MIPS-III,
>>>>48	lelong&0xf0000000	0x30000000	MIPS-IV,
>>>>48	lelong&0xf0000000	0x40000000	MIPS-V,
>>>>48	lelong&0xf0000000	0x60000000	MIPS32,
>>>>48	lelong&0xf0000000	0x70000000	MIPS64 ,
>>>>48	lelong&0xf0000000	0x80000000	MIPS32 rel2,
>>>>48	lelong&0xf0000000	0x90000000	MIPS64 rel2,
d23 1
d25 3
a27 1
>>>400  lelong          >0              (signal %d),
d33 4
a36 1
>>18	leshort		4		Motorola 68000 - invalid byte order,
d40 30
a69 1
# >>18	leshort		8		MIPS,
d74 2
d77 1
a77 1
>>18	leshort		17		VPP500,
d80 5
d86 21
a106 5
>>18	leshort		42		SH
>>18	leshort		43		SPARC64 - invalid byte order,
>>18	leshort		62		AMD64,
>>18	leshort		75		VAX,
>>18	leshort		0x9026		Alpha,
a114 24
# only for MIPS
>>18	beshort		8
# only for 32-bit
>>>4	byte		1
>>>>36	belong&0xf0000000	0x00000000	MIPS-I,
>>>>36	belong&0xf0000000	0x10000000	MIPS-II,
>>>>36	belong&0xf0000000	0x20000000	MIPS-III,
>>>>36	belong&0xf0000000	0x30000000	MIPS-IV,
>>>>36	belong&0xf0000000	0x40000000	MIPS-V,
>>>>36	belong&0xf0000000	0x60000000	MIPS32,
>>>>36	belong&0xf0000000	0x70000000	MIPS64,
>>>>36	belong&0xf0000000	0x80000000	MIPS32 rel2,
>>>>36	belong&0xf0000000	0x90000000	MIPS64 rel2,
# only for 64-bit
>>>4	byte		2
>>>>48	belong&0xf0000000	0x00000000	MIPS-I,
>>>>48	belong&0xf0000000	0x10000000	MIPS-II,
>>>>48	belong&0xf0000000	0x20000000	MIPS-III,
>>>>48	belong&0xf0000000	0x30000000	MIPS-IV,
>>>>48	belong&0xf0000000	0x40000000	MIPS-V,
>>>>48	belong&0xf0000000	0x60000000	MIPS32,
>>>>48	belong&0xf0000000	0x70000000	MIPS64 ,
>>>>48	belong&0xf0000000	0x80000000	MIPS32 rel2,
>>>>48	belong&0xf0000000	0x90000000	MIPS64 rel2,
d116 2
a117 1
>>>400	lelong		>0		(signal %d),
d123 4
a126 1
>>18	beshort		4		Motorola 68000,
d130 28
a157 1
# >>18	beshort		8		MIPS,
d161 3
a163 1
>>18	beshort		15		PA-RISC,
d165 1
a165 1
>>18	beshort		17		VPP500,
d167 14
a180 1
>>18	beshort		20		PowerPC,
d182 20
a201 5
>>18	beshort		42		SH - invalid byte order,
>>18	beshort		43		SPARC64,
>>18	beshort		62		AMD64 - invalid byte order,
>>18	beshort		75		VAX - invalid byte order,
>>18	beshort		0x9026		Alpha,
@


1.14
log
@oops! one line wrong
@
text
@d1 1
a1 1
#	$OpenBSD: elf,v 1.13 2004/10/27 15:59:16 pefo Exp $
d69 1
d127 1
@


1.13
log
@Change how MIPS ISA level is output to be consistent with other arches.
ok deraadt, grange and ian
@
text
@d1 1
a1 1
#	$OpenBSD: elf,v 1.12 2004/10/23 16:59:25 grange Exp $
a80 1
>>16	beshort		4		core file,
d105 1
@


1.12
log
@Sparc->SPARC
Amd->AMD

ok ian@@
@
text
@d1 1
a1 1
#	$OpenBSD: elf,v 1.11 2004/10/20 17:23:34 grange Exp $
d19 4
d27 9
a35 9
>>>>36	lelong&0xf0000000	0x00000000	MIPS-I
>>>>36	lelong&0xf0000000	0x10000000	MIPS-II
>>>>36	lelong&0xf0000000	0x20000000	MIPS-III
>>>>36	lelong&0xf0000000	0x30000000	MIPS-IV
>>>>36	lelong&0xf0000000	0x40000000	MIPS-V
>>>>36	lelong&0xf0000000	0x60000000	MIPS32
>>>>36	lelong&0xf0000000	0x70000000	MIPS64
>>>>36	lelong&0xf0000000	0x80000000	MIPS32 rel2
>>>>36	lelong&0xf0000000	0x90000000	MIPS64 rel2
d38 9
a46 13
>>>>48	lelong&0xf0000000	0x00000000	MIPS-I
>>>>48	lelong&0xf0000000	0x10000000	MIPS-II
>>>>48	lelong&0xf0000000	0x20000000	MIPS-III
>>>>48	lelong&0xf0000000	0x30000000	MIPS-IV
>>>>48	lelong&0xf0000000	0x40000000	MIPS-V
>>>>48	lelong&0xf0000000	0x60000000	MIPS32
>>>>48	lelong&0xf0000000	0x70000000	MIPS64 
>>>>48	lelong&0xf0000000	0x80000000	MIPS32 rel2
>>>>48	lelong&0xf0000000	0x90000000	MIPS64 rel2
>>16	leshort		0		no file type,
>>16	leshort		1		relocatable,
>>16	leshort		2		executable,
>>16	leshort		3		shared object,
d59 1
a59 1
>>18	leshort		8		MIPS,
d77 5
d86 9
a94 9
>>>>36	belong&0xf0000000	0x00000000	MIPS-I
>>>>36	belong&0xf0000000	0x10000000	MIPS-II
>>>>36	belong&0xf0000000	0x20000000	MIPS-III
>>>>36	belong&0xf0000000	0x30000000	MIPS-IV
>>>>36	belong&0xf0000000	0x40000000	MIPS-V
>>>>36	belong&0xf0000000	0x60000000	MIPS32
>>>>36	belong&0xf0000000	0x70000000	MIPS64
>>>>36	belong&0xf0000000	0x80000000	MIPS32 rel2
>>>>36	belong&0xf0000000	0x90000000	MIPS64 rel2
d97 9
a105 14
>>>>48	belong&0xf0000000	0x00000000	MIPS-I
>>>>48	belong&0xf0000000	0x10000000	MIPS-II
>>>>48	belong&0xf0000000	0x20000000	MIPS-III
>>>>48	belong&0xf0000000	0x30000000	MIPS-IV
>>>>48	belong&0xf0000000	0x40000000	MIPS-V
>>>>48	belong&0xf0000000	0x60000000	MIPS32
>>>>48	belong&0xf0000000	0x70000000	MIPS64 
>>>>48	belong&0xf0000000	0x80000000	MIPS32 rel2
>>>>48	belong&0xf0000000	0x90000000	MIPS64 rel2
>>16	beshort		0		no file type,
>>16	beshort		1		relocatable,
>>16	beshort		2		executable,
>>16	beshort		3		shared object,
>>16	beshort		4		core file,
d116 1
a116 1
>>18	beshort		8		MIPS,
@


1.11
log
@More mips executables from NetBSD.

ok ian@@ tedu@@
@
text
@d1 1
a1 1
#	$OpenBSD: elf,v 1.10 2004/06/03 03:14:20 tedu Exp $
d69 2
a70 2
>>18	leshort		43		Sparc64 - invalid byte order,
>>18	leshort		62		Amd64,
d126 2
a127 2
>>18	beshort		43		Sparc64,
>>18	beshort		62		Amd64 - invalid byte order,
@


1.10
log
@merge in new magic from file 4.09.  Mostly from Bruno Rohee
@
text
@d1 1
a1 1
#	$OpenBSD$
d19 24
d59 1
a59 1
>>18	leshort		8		MIPS RS3000_BE - invalid byte order,
d61 1
a61 1
>>18	leshort		10		MIPS RS3000_LE,
d77 24
d116 1
a116 1
>>18	beshort		8		MIPS RS3000_BE,
d118 1
a118 1
>>18	beshort		10		MIPS RS3000_LE - invalid byte order,
@


1.9
log
@Recognize amd64 binaries and coredumps; ok todd@@ deraadt@@ drahn@@
@
text
@d1 1
@


1.8
log
@Recognize openbsd arm executables and corefiles. ok deraadt@@
@
text
@d45 1
d76 1
d78 1
@


1.7
log
@teach about sparc64
@
text
@d43 1
@


1.6
log
@Add magic for vax-elf and vax-olf. At this time roughly as likely to be
seen in the wild as unicorns, and ultraviolet griffins, respectively.
@
text
@d43 1
d74 1
@


1.5
log
@Updated from NetBSD.
@
text
@d43 1
d73 1
@


1.4
log
@Have file recognize PowerPC elf objects. Works for MSB objects currently.
Should work for LSB objects?
@
text
@d8 2
a9 2
# Byte order is probably big-endian for MIPS R3000 and Amdahl.
# MIPS R3000 may also be for MIPS R2000.
d22 3
a24 1
>>16	leshort		4		core file,
d34 8
a41 2
>>18	leshort		8		MIPS R3000,
>>18	leshort		9		Amdahl,
d43 1
d53 1
d63 8
a70 1
>>18	beshort		8		MIPS R3000,
d72 1
a72 1
>>18	leshort		9		Amdahl,
@


1.3
log
@R3000, not RS3000
@
text
@d34 1
d54 1
@


1.2
log
@update from netbsd
@
text
@d8 2
a9 2
# Byte order is probably big-endian for MIPS RS3000 and Amdahl.
# MIPS RS3000 may also be for MIPS RS2000.
d32 1
a32 1
>>18	leshort		8		MIPS RS3000,
d52 1
a52 1
>>18	beshort		8		MIPS RS3000,
@


1.1
log
@Initial revision
@
text
@d8 3
d25 1
a25 1
>>18	leshort		1		AT&T WE32100,
d33 1
d53 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
