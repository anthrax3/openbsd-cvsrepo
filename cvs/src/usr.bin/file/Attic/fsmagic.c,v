head	1.15;
access;
symbols
	OPENBSD_5_7:1.14.0.18
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.22
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.20
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.16
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.14
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.12
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.10
	OPENBSD_5_0:1.14.0.8
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.6
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.4
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.2
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.13.0.4
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.12.0.4
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.2
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.11.0.12
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.10
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.8
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.6
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.4
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.2
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.10.0.4
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.2
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.7.0.2
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.5.0.8
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.6
	OPENBSD_2_8:1.5.0.4
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.4.0.6
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.4
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.15
date	2015.04.24.16.24.11;	author nicm;	state dead;
branches;
next	1.14;
commitid	4VUU04TZM8ebPiy4;

1.14
date	2009.10.27.23.59.37;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2009.04.24.18.54.34;	author chl;	state Exp;
branches;
next	1.12;

1.12
date	2008.05.08.01.40.56;	author chl;	state Exp;
branches;
next	1.11;

1.11
date	2005.05.18.03.11.18;	author jaredy;	state Exp;
branches;
next	1.10;

1.10
date	2004.05.19.02.32.35;	author tedu;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.13.18.31.14;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2003.04.07.19.03.46;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2003.03.11.21.26.26;	author ian;	state Exp;
branches;
next	1.6;

1.6
date	2001.11.19.19.02.13;	author mpech;	state Exp;
branches;
next	1.5;

1.5
date	99.12.06.00.32.29;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	98.07.10.15.05.22;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	97.02.09.23.58.24;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.32.57;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.09;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.09;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.15
log
@New implementation of the file(1) utility. This is a simplified,
modernised version with a nearly complete magic(5) parser but omits some
of the complex builtin tests (notably ELF) and has a reduced set of
options.

ok deraadt
@
text
@/*	$OpenBSD: fsmagic.c,v 1.14 2009/10/27 23:59:37 deraadt Exp $ */
/*
 * Copyright (c) Ian F. Darwin 1986-1995.
 * Software written by Ian F. Darwin and others;
 * maintained 1995-present by Christos Zoulas and others.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice immediately at the beginning of the file, without modification,
 *    this list of conditions, and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
/*
 * fsmagic - magic based on filesystem info - directory, special files, etc.
 */

#include "file.h"
#include "magic.h"
#include <string.h>
#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif
#include <stdlib.h>
#include <sys/stat.h>
/* Since major is a function on SVR4, we cannot use `ifndef major'.  */
#ifdef MAJOR_IN_MKDEV
# include <sys/mkdev.h>
# define HAVE_MAJOR
#endif
#ifdef MAJOR_IN_SYSMACROS
# include <sys/sysmacros.h>
# define HAVE_MAJOR
#endif
#ifdef major			/* Might be defined in sys/types.h.  */
# define HAVE_MAJOR
#endif
  
#ifndef HAVE_MAJOR
# define major(dev)  (((dev) >> 8) & 0xff)
# define minor(dev)  ((dev) & 0xff)
#endif
#undef HAVE_MAJOR

private int
bad_link(struct magic_set *ms, int err, char *buf)
{
	char *errfmt;
	if (err == ELOOP)
		errfmt = "symbolic link in a loop";
	else
		errfmt = "broken symbolic link to `%s'";
	if (ms->flags & MAGIC_ERROR) {
		file_error(ms, err, errfmt, buf);
		return -1;
	} 
	if (file_printf(ms, errfmt, buf) == -1)
		return -1;
	return 1;
}

protected int
file_fsmagic(struct magic_set *ms, const char *fn, struct stat *sb)
{
	int ret = 0;
	int mime = ms->flags & MAGIC_MIME;
#ifdef	S_IFLNK
	char buf[BUFSIZ+4];
	int nch;
	struct stat tstatbuf;
#endif

	if (fn == NULL)
		return 0;

	/*
	 * Fstat is cheaper but fails for files you don't have read perms on.
	 * On 4.2BSD and similar systems, use lstat() to identify symlinks.
	 */
#ifdef	S_IFLNK
	if ((ms->flags & MAGIC_SYMLINK) == 0)
		ret = lstat(fn, sb);
	else
#endif
	ret = stat(fn, sb);	/* don't merge into if; see "ret =" above */

	if (ret) {
		if (ms->flags & MAGIC_ERROR) {
			file_error(ms, errno, "cannot stat `%s'", fn);
			return -1;
		}
		if (file_printf(ms, "cannot open `%s' (%s)",
		    fn, strerror(errno)) == -1)
			return -1;
		return 1;
	}

	if (mime) {
		if ((sb->st_mode & S_IFMT) != S_IFREG) {
			if ((mime & MAGIC_MIME_TYPE) &&
			    file_printf(ms, "application/x-not-regular-file")
			    == -1)
				    return -1;
			return 1;
		}
	}
	else {
#ifdef S_ISUID
		if (sb->st_mode & S_ISUID) 
			if (file_printf(ms, "setuid ") == -1)
				return -1;
#endif
#ifdef S_ISGID
		if (sb->st_mode & S_ISGID) 
			if (file_printf(ms, "setgid ") == -1)
				return -1;
#endif
#ifdef S_ISVTX
		if (sb->st_mode & S_ISVTX) 
			if (file_printf(ms, "sticky ") == -1)
				return -1;
#endif
	}
	
	switch (sb->st_mode & S_IFMT) {
	case S_IFDIR:
		if (file_printf(ms, "directory") == -1)
			return -1;
		return 1;
#ifdef S_IFCHR
	case S_IFCHR:
		/* 
		 * If -s has been specified, treat character special files
		 * like ordinary files.  Otherwise, just report that they
		 * are block special files and go on to the next file.
		 */
		if ((ms->flags & MAGIC_DEVICES) != 0)
			break;
#ifdef HAVE_STAT_ST_RDEV
# ifdef dv_unit
		if (file_printf(ms, "character special (%d/%d/%d)",
		    major(sb->st_rdev), dv_unit(sb->st_rdev),
		    dv_subunit(sb->st_rdev)) == -1)
			return -1;
# else
		if (file_printf(ms, "character special (%ld/%ld)",
		    (long) major(sb->st_rdev), (long) minor(sb->st_rdev)) == -1)
			return -1;
# endif
#else
		if (file_printf(ms, "character special") == -1)
			return -1;
#endif
		return 1;
#endif
#ifdef S_IFBLK
	case S_IFBLK:
		/* 
		 * If -s has been specified, treat block special files
		 * like ordinary files.  Otherwise, just report that they
		 * are block special files and go on to the next file.
		 */
		if ((ms->flags & MAGIC_DEVICES) != 0)
			break;
#ifdef HAVE_STAT_ST_RDEV
# ifdef dv_unit
		if (file_printf(ms, "block special (%d/%d/%d)",
		    major(sb->st_rdev), dv_unit(sb->st_rdev),
		    dv_subunit(sb->st_rdev)) == -1)
			return -1;
# else
		if (file_printf(ms, "block special (%ld/%ld)",
		    (long)major(sb->st_rdev), (long)minor(sb->st_rdev)) == -1)
			return -1;
# endif
#else
		if (file_printf(ms, "block special") == -1)
			return -1;
#endif
		return 1;
#endif
	/* TODO add code to handle V7 MUX and Blit MUX files */
#ifdef	S_IFIFO
	case S_IFIFO:
		if((ms->flags & MAGIC_DEVICES) != 0)
			break;
		if (file_printf(ms, "fifo (named pipe)") == -1)
			return -1;
		return 1;
#endif
#ifdef	S_IFDOOR
	case S_IFDOOR:
		if (file_printf(ms, "door") == -1)
			return -1;
		return 1;
#endif
#ifdef	S_IFLNK
	case S_IFLNK:
		if ((nch = readlink(fn, buf, BUFSIZ-1)) <= 0) {
			if (ms->flags & MAGIC_ERROR) {
			    file_error(ms, errno, "unreadable symlink `%s'",
				fn);
			    return -1;
			}
			if (file_printf(ms,
			    "unreadable symlink `%s' (%s)", fn,
			    strerror(errno)) == -1)
				return -1;
			return 1;
		}
		buf[nch] = '\0';	/* readlink(2) does not do this */

		/* If broken symlink, say so and quit early. */
		if (*buf == '/') {
			if (stat(buf, &tstatbuf) < 0)
				return bad_link(ms, errno, buf);
		} else {
			char *tmp;
			char buf2[BUFSIZ+BUFSIZ+4];

			if ((tmp = strrchr(fn,  '/')) == NULL) {
				tmp = buf; /* in current directory anyway */
			} else {
				if (tmp - fn + 1 > BUFSIZ) {
					if (ms->flags & MAGIC_ERROR) {
						file_error(ms, 0, 
						    "path too long: `%s'", buf);
						return -1;
					}
					if (file_printf(ms,
					    "path too long: `%s'", fn) == -1)
						return -1;
					return 1;
				}
				(void)strlcpy(buf2, fn, sizeof buf2);  /* take dir part */
				buf2[tmp - fn + 1] = '\0';
				(void)strlcat(buf2, buf, sizeof buf2); /* plus (rel) link */
				tmp = buf2;
			}
			if (stat(tmp, &tstatbuf) < 0)
				return bad_link(ms, errno, buf);
		}

		/* Otherwise, handle it. */
		if ((ms->flags & MAGIC_SYMLINK) != 0) {
			const char *p;
			ms->flags &= MAGIC_SYMLINK;
			p = magic_file(ms, buf);
			ms->flags |= MAGIC_SYMLINK;
			return p != NULL ? 1 : -1;
		} else { /* just print what it points to */
			if (file_printf(ms, "symbolic link to `%s'",
			    buf) == -1)
				return -1;
		}
	return 1;
#endif
#ifdef	S_IFSOCK
#ifndef __COHERENT__
	case S_IFSOCK:
		if (file_printf(ms, "socket") == -1)
			return -1;
		return 1;
#endif
#endif
	case S_IFREG:
		break;
	default:
		file_error(ms, 0, "invalid mode 0%o", sb->st_mode);
		return -1;
		/*NOTREACHED*/
	}

	/*
	 * regular file, check next possibility
	 *
	 * If stat() tells us the file has zero length, report here that
	 * the file is empty, so we can skip all the work of opening and 
	 * reading the file.
	 * But if the -s option has been given, we skip this optimization,
	 * since on some systems, stat() reports zero size for raw disk
	 * partitions.  (If the block special device really has zero length,
	 * the fact that it is empty will be detected and reported correctly
	 * when we read the file.)
	 */
	if ((ms->flags & MAGIC_DEVICES) == 0 && sb->st_size == 0) {
		if ((!mime || (mime & MAGIC_MIME_TYPE)) &&
		    file_printf(ms, mime ? "application/x-empty" :
		    "empty") == -1)
			return -1;
		return 1;
	}
	return 0;
}
@


1.14
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: fsmagic.c,v 1.13 2009/04/24 18:54:34 chl Exp $ */
@


1.13
log
@file update to 4.24

The '-i' switch is now enabled so file(1) can output mime type strings.

ok ian@@
builk ports build test on amd64 by jasper@@

ok ray@@ gilles@@ on a almost identical diff
builk ports build test on sparc64 on this almost identical diff by ajacoutot@@
also tested by landry@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fsmagic.c,v 1.12 2008/05/08 01:40:56 chl Exp $ */
a58 4

#ifndef	lint
FILE_RCSID("@@(#)$Id: fsmagic.c,v 1.12 2008/05/08 01:40:56 chl Exp $")
#endif	/* lint */
@


1.12
log
@Update file to 4.21.

tested by ian@@ sthen@@

OK ian@@, "move ahead with it" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fsmagic.c,v 1.11 2005/05/18 03:11:18 jaredy Exp $ */
d61 1
a61 1
FILE_RCSID("@@(#)$Id: fsmagic.c,v 1.11 2005/05/18 03:11:18 jaredy Exp $")
d64 17
d85 1
d117 1
a117 1
	if ((ms->flags & MAGIC_MIME) != 0) {
d119 2
a120 1
			if (file_printf(ms, "application/x-not-regular-file")
d122 1
a122 1
				return -1;
d158 1
a158 1
#ifdef HAVE_ST_RDEV
d184 1
a184 1
#ifdef HAVE_ST_RDEV
d230 1
a230 1
		buf[nch] = '\0';	/* readlink(2) forgets this */
d234 3
a236 13
		    if (stat(buf, &tstatbuf) < 0) {
			    if (ms->flags & MAGIC_ERROR) {
				    file_error(ms, errno, 
					"broken symbolic link to `%s'", buf);
				    return -1;
			    } 
			    if (file_printf(ms, "broken symbolic link to `%s'",
				buf) == -1)
				    return -1;
			    return 1;
		    }
		}
		else {
d259 2
a260 12
			if (stat(tmp, &tstatbuf) < 0) {
				if (ms->flags & MAGIC_ERROR) {
					file_error(ms, errno, 
					    "broken symbolic link to `%s'",
					    buf);
					return -1;
				}
				if (file_printf(ms,
				    "broken symbolic link to `%s'", buf) == -1)
					return -1;
				return 1;
			}
d306 3
a308 2
		if (file_printf(ms, (ms->flags & MAGIC_MIME) ?
		    "application/x-empty" : "empty") == -1)
@


1.11
log
@fix error message; ok ian
@
text
@d1 1
a1 1
/*	$OpenBSD: fsmagic.c,v 1.10 2004/05/19 02:32:35 tedu Exp $ */
d61 1
a61 1
FILE_RCSID("@@(#)$Id: fsmagic.c,v 1.10 2004/05/19 02:32:35 tedu Exp $")
d93 2
a94 2
		if (file_printf(ms, "cannot open (%s)",
		    strerror(errno)) == -1)
d185 2
@


1.10
log
@big update to file 4.09.  ok ian@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d61 1
a61 1
FILE_RCSID("@@(#)$Id: fsmagic.c,v 1.43 2003/10/14 19:29:55 christos Exp $")
d94 1
a94 1
		    fn, strerror(errno)) == -1)
@


1.9
log
@ian gives permission for 3/4 removal
@
text
@d1 1
a1 2
/*	$OpenBSD: fsmagic.c,v 1.8 2003/04/07 19:03:46 deraadt Exp $	*/

a2 2
 * fsmagic - magic based on filesystem info - directory, special files, etc.
 *
d29 3
d33 2
a34 1
#include <stdio.h>
d36 1
a36 2
#include <sys/types.h>
#include <sys/stat.h>
d38 1
d40 12
a51 5
#include <err.h>
#ifndef major
# if defined(__SVR4) || defined(_SVR4_SOURCE)
#  include <sys/mkdev.h>
# endif
d53 4
a56 2
#ifndef	major			/* if `major' not defined in types.h, */
#include <sys/sysmacros.h>	/* try this one. */
d58 1
a58 9
#ifndef	major	/* still not defined? give up, manual intervention needed */
		/* If cc tries to compile this, read and act on it. */
		/* On most systems cpp will discard it automatically */
		Congratulations, you have found a portability bug.
		Please grep /usr/include/sys and edit the above #include 
		to point at the file that defines the "major" macro.
#endif	/*major*/

#include "file.h"
d61 1
a61 1
static char *moduleid = "$OpenBSD: fsmagic.c,v 1.8 2003/04/07 19:03:46 deraadt Exp $";
d64 2
a65 4
int
fsmagic(fn, sb)
const char *fn;
struct stat *sb;
d68 8
d82 1
a82 1
	if (!lflag)
d89 7
a95 4
		ckfprintf(stdout,
			/* Yes, I do mean stdout. */
			/* No \n, caller will provide. */
			"can't stat `%s' (%s).", fn, strerror(errno));
d99 25
a123 3
	if (sb->st_mode & S_ISUID) ckfputs("setuid ", stdout);
	if (sb->st_mode & S_ISGID) ckfputs("setgid ", stdout);
	if (sb->st_mode & S_ISVTX) ckfputs("sticky ", stdout);
d127 2
a128 1
		ckfputs("directory", stdout);
d130 1
d132 22
a153 2
		(void) printf("character special (%ld/%ld)",
			(long) major(sb->st_rdev), (long) minor(sb->st_rdev));
d155 2
d158 22
a179 2
		(void) printf("block special (%ld/%ld)",
			(long) major(sb->st_rdev), (long) minor(sb->st_rdev));
d181 1
d185 8
a192 1
		ckfputs("fifo (named pipe)", stdout);
d197 5
a201 9
		{
			char buf[BUFSIZ+4];
			int nch;
			struct stat tstatbuf;

			if ((nch = readlink(fn, buf, BUFSIZ-1)) <= 0) {
				ckfprintf(stdout, "unreadable symlink (%s).", 
				      strerror(errno));
				return 1;
d203 7
a209 1
			buf[nch] = '\0';	/* readlink(2) forgets this */
d211 17
a227 11
			/* If broken symlink, say so and quit early. */
			if (*buf == '/') {
			    if (stat(buf, &tstatbuf) < 0) {
				ckfprintf(stdout,
					"broken symbolic link to %s", buf);
				return 1;
			    }
			}
			else {
			    char *tmp;
			    char buf2[BUFSIZ+BUFSIZ+4];
d229 1
a229 1
			    if ((tmp = strrchr(fn,  '/')) == NULL) {
d231 15
a245 9
			    } else if (strlen(fn) + strlen(buf) > sizeof(buf2)-1) {
				ckfprintf(stdout, "name too long %s", fn);
				return 1;
			    } else {
				/* ok; take directory part */
				strlcpy (buf2, fn, sizeof buf2);
				buf2[tmp-fn+1] = '\0';
				/* ok; plus (relative) symlink */
				strlcat (buf2, buf, sizeof buf2);
d247 11
a257 4
			    }
			    if (stat(tmp, &tstatbuf) < 0) {
				ckfprintf(stdout,
					"broken symbolic link to %s", buf);
d259 2
a260 2
			    }
                        }
d262 11
a272 8
			/* Otherwise, handle it. */
			if (lflag) {
				process(buf, strlen(buf));
				return 1;
			} else { /* just print what it points to */
				ckfputs("symbolic link to ", stdout);
				ckfputs(buf, stdout);
			}
d274 1
a274 1
		return 1;
d279 2
a280 1
		ckfputs("socket", stdout);
d287 2
a288 1
		errx(1, "invalid mode 0%o", sb->st_mode);
d294 9
d304 4
a307 2
	if (sb->st_size == 0) {
		ckfputs("empty", stdout);
a311 1

@


1.8
log
@string fixes; ian ok
@
text
@d1 1
a1 1
/*	$OpenBSD: fsmagic.c,v 1.7 2003/03/11 21:26:26 ian Exp $	*/
a18 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    This product includes software developed by Ian F. Darwin and others.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
d59 1
a59 1
static char *moduleid = "$OpenBSD: fsmagic.c,v 1.7 2003/03/11 21:26:26 ian Exp $";
@


1.7
log
@Replace TPUM license with standard BSD-style license
@
text
@d1 1
a1 1
/*	$OpenBSD: fsmagic.c,v 1.6 2001/11/19 19:02:13 mpech Exp $	*/
d64 1
a64 1
static char *moduleid = "$OpenBSD: fsmagic.c,v 1.6 2001/11/19 19:02:13 mpech Exp $";
d147 2
a148 1
				strcpy (buf2, fn);  /* ok; take directory part */
d150 2
a151 1
				strcat (buf2, buf); /* ok; plus (relative) symlink */
@


1.6
log
@kill more registers

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: fsmagic.c,v 1.5 1999/12/06 00:32:29 deraadt Exp $	*/
d6 30
a35 22
 * Copyright (c) Ian F. Darwin, 1987.
 * Written by Ian F. Darwin.
 *
 * This software is not subject to any license of the American Telephone
 * and Telegraph Company or of the Regents of the University of California.
 *
 * Permission is granted to anyone to use this software for any purpose on
 * any computer system, and to alter it and redistribute it freely, subject
 * to the following restrictions:
 *
 * 1. The author is not responsible for the consequences of use of this
 *    software, no matter how awful, even if they arise from flaws in it.
 *
 * 2. The origin of this software must not be misrepresented, either by
 *    explicit claim or by omission.  Since few users ever read sources,
 *    credits must appear in the documentation.
 *
 * 3. Altered versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.  Since few users
 *    ever read sources, credits must appear in the documentation.
 *
 * 4. This notice may not be removed or altered.
d64 1
a64 1
static char *moduleid = "$OpenBSD: fsmagic.c,v 1.5 1999/12/06 00:32:29 deraadt Exp $";
@


1.5
log
@oflow
@
text
@d1 1
a1 1
/*	$OpenBSD: fsmagic.c,v 1.4 1998/07/10 15:05:22 mickey Exp $	*/
d56 1
a56 1
static char *moduleid = "$OpenBSD: fsmagic.c,v 1.4 1998/07/10 15:05:22 mickey Exp $";
d111 1
a111 1
			register int nch;
@


1.4
log
@err/warn
@
text
@d1 1
a1 1
/*	$OpenBSD: fsmagic.c,v 1.3 1997/02/09 23:58:24 millert Exp $	*/
d56 1
a56 1
static char *moduleid = "$OpenBSD: fsmagic.c,v 1.3 1997/02/09 23:58:24 millert Exp $";
d135 5
a139 3
			    }
			    else {
				strcpy (buf2, fn);  /* take directory part */
d141 1
a141 1
				strcat (buf2, buf); /* plus (relative) symlink */
@


1.3
log
@Updates file(1) to version 3.22 by way to NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: fsmagic.c,v 1.2 1996/06/26 05:32:57 deraadt Exp $	*/
d36 1
d56 1
a56 1
static char *moduleid = "$OpenBSD: fsmagic.c,v 1.2 1996/06/26 05:32:57 deraadt Exp $";
d170 1
a170 1
		error("invalid mode 0%o.\n", sb->st_mode);
@


1.2
log
@rcsid
@
text
@d1 2
a2 1
/*	$OpenBSD: fsmagic.c,v 1.1.1.1 1995/10/18 08:45:09 deraadt Exp $	*/
d36 5
d55 1
a55 1
static char *moduleid = "$OpenBSD$";
d93 2
a94 2
		(void) printf("character special (%d/%d)",
			major(sb->st_rdev), minor(sb->st_rdev));
d97 2
a98 2
		(void) printf("block special (%d/%d)",
			major(sb->st_rdev), minor(sb->st_rdev));
@


1.1
log
@Initial revision
@
text
@d1 1
d49 1
a49 2
static char *moduleid = 
	"@@(#)$Id: fsmagic.c,v 1.7 1995/04/28 19:23:51 christos Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
