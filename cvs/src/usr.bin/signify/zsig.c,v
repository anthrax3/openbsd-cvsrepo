head	1.15;
access;
symbols
	OPENBSD_6_1:1.14.0.4
	OPENBSD_6_1_BASE:1.14;
locks; strict;
comment	@ * @;


1.15
date	2017.07.11.23.52.05;	author tedu;	state Exp;
branches;
next	1.14;
commitid	AlIMrYkKc5XtA9VK;

1.14
date	2016.10.04.14.40.41;	author espie;	state Exp;
branches;
next	1.13;
commitid	No8sufhBJDVdEnHW;

1.13
date	2016.09.27.02.16.40;	author tedu;	state Exp;
branches;
next	1.12;
commitid	5pCGDRlDdqADNteF;

1.12
date	2016.09.10.12.23.16;	author deraadt;	state Exp;
branches;
next	1.11;
commitid	AnGIDBkKk8Nr0Dv1;

1.11
date	2016.09.08.16.04.01;	author espie;	state Exp;
branches;
next	1.10;
commitid	HDpJd5BXoHLH77uI;

1.10
date	2016.09.04.17.00.22;	author espie;	state Exp;
branches;
next	1.9;
commitid	Au9tip2Ri0vajeAU;

1.9
date	2016.09.03.20.52.53;	author espie;	state Exp;
branches;
next	1.8;
commitid	n5fxDk1HScAKtazN;

1.8
date	2016.09.03.17.04.13;	author tedu;	state Exp;
branches;
next	1.7;
commitid	CPV9pPa5yQCiHkal;

1.7
date	2016.09.03.12.59.33;	author espie;	state Exp;
branches;
next	1.6;
commitid	WlkVzME3rkYSVgvk;

1.6
date	2016.09.03.12.12.21;	author espie;	state Exp;
branches;
next	1.5;
commitid	xHwjuMKK1tXhZJ83;

1.5
date	2016.09.03.11.22.09;	author espie;	state Exp;
branches;
next	1.4;
commitid	N7gtkudjOCsxMWf0;

1.4
date	2016.09.02.21.52.12;	author tedu;	state Exp;
branches;
next	1.3;
commitid	OtfLNWhpmWLK4TCf;

1.3
date	2016.09.02.21.48.03;	author tedu;	state Exp;
branches;
next	1.2;
commitid	duUoSW6zJQNxpr0i;

1.2
date	2016.09.02.16.12.09;	author espie;	state Exp;
branches;
next	1.1;
commitid	SADotFuY903mTTF8;

1.1
date	2016.09.02.16.10.56;	author espie;	state Exp;
branches;
next	;
commitid	VZHUiAwayWbKaIVw;


desc
@@


1.15
log
@adjust size to be one less than power of 2, so that doubling will never
roll to 0, but instead something very large, and thus fail in realloc
@
text
@/* $OpenBSD: zsig.c,v 1.14 2016/10/04 14:40:41 espie Exp $ */
/*
 * Copyright (c) 2016 Marc Espie <espie@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef VERIFYONLY
#include <stdint.h>
#include <err.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sha2.h>
#include <string.h>
#include <sys/stat.h>
#include <time.h>
#include <fcntl.h>
#include "signify.h"

struct gzheader {
	uint8_t flg;
	uint32_t mtime;
	uint8_t xflg;
	uint8_t os;
	uint8_t *name;
	uint8_t *comment;
	uint8_t *endcomment;
	unsigned long long headerlength;
	uint8_t *buffer;
};

#define FTEXT_FLAG 1
#define FHCRC_FLAG 2
#define FEXTRA_FLAG 4
#define FNAME_FLAG 8
#define FCOMMENT_FLAG 16

#define GZHEADERLENGTH 10
#define MYBUFSIZE 65536LU


static uint8_t fake[10] = { 0x1f, 0x8b, 8, FCOMMENT_FLAG, 0, 0, 0, 0, 0, 3 };

static uint8_t *
readgz_header(struct gzheader *h, int fd)
{
	size_t sz = 1023;
	uint8_t *p;
	size_t pos = 0;
	size_t len = 0;
	int state = 0;
	ssize_t n;
	uint8_t *buf;

	buf = xmalloc(sz);

	while (1) {
		if (len == sz) {
			sz *= 2;
			buf = realloc(buf, sz);
			if (!buf)
				err(1, "realloc");
		}
		n = read(fd, buf+len, sz-len);
		if (n == -1)
			err(1, "read");
		/* incomplete info */
		if (n == 0)
			errx(1, "gzheader truncated");
		len += n;
		h->comment = NULL;
		h->name = NULL;

		switch(state) {
		case 0: /* check header proper */
			/* need ten bytes */
			if (len < GZHEADERLENGTH)
				continue;
			h->flg = buf[3];
			h->mtime = buf[4] | (buf[5] << 8U) | (buf[6] << 16U) |
			    (buf[7] << 24U);
			h->xflg = buf[8];
			h->os = buf[9];
			/* magic gzip header */
			if (buf[0] != 0x1f || buf[1] != 0x8b || buf[2] != 8)
				err(1, "invalid magic in gzheader");
			/* XXX special code that only caters to our needs */
			if (h->flg & ~ (FCOMMENT_FLAG | FNAME_FLAG))
				err(1, "invalid flags in gzheader");
			pos = GZHEADERLENGTH;
			state++;
			/*FALLTHRU*/
		case 1:
			if (h->flg & FNAME_FLAG) {
				p = memchr(buf+pos, 0, len - pos);
				if (!p)
					continue;
				pos = (p - buf) + 1;
			}
			state++;
			/*FALLTHRU*/
		case 2:
			if (h->flg & FCOMMENT_FLAG) {
				p = memchr(buf+pos, 0, len - pos);
				if (!p)
					continue;
				h->comment = buf + pos;
				h->endcomment = p;
				pos = (p - buf) + 1;
			}
			if (h->flg & FNAME_FLAG)
				h->name = buf + GZHEADERLENGTH;
			h->headerlength = pos;
			h->buffer = buf;
			return buf + len;
		}

	}
}

static void
copy_blocks(int fdout, int fdin, const char *sha, const char *endsha,
    size_t bufsize, uint8_t *bufend)
{
	uint8_t *buffer;
	uint8_t *residual;
	uint8_t output[SHA512_256_DIGEST_STRING_LENGTH];

	buffer = xmalloc(bufsize);
	residual = (uint8_t *)endsha + 1;

	while (1) {
		/* get the next block */
		size_t n = 0;
		/* if we have residual data, we use it */
		if (residual != bufend) {
			/* how much can we copy */
			size_t len = bufend - residual;
			n = len >= bufsize ? bufsize : len;
			memcpy(buffer, residual, n);
			residual += n;
		}
		/* if we're not done yet, try to obtain more until EOF */
		while (n != bufsize) {
			ssize_t more = read(fdin, buffer+n, bufsize-n);
			if (more == -1)
				err(1, "read");
			n += more;
			if (more == 0)
				break;
		}
		SHA512_256Data(buffer, n, output);
		if (endsha - sha < SHA512_256_DIGEST_STRING_LENGTH-1)
			errx(4, "signature truncated");
		if (memcmp(output, sha, SHA512_256_DIGEST_STRING_LENGTH-1) != 0)
			errx(4, "signature mismatch");
		if (sha[SHA512_256_DIGEST_STRING_LENGTH-1] != '\n')
			errx(4, "signature mismatch");
		sha += SHA512_256_DIGEST_STRING_LENGTH;
		writeall(fdout, buffer, n, "stdout");
		if (n != bufsize)
			break;
	}
	free(buffer);
}

void
zverify(const char *pubkeyfile, const char *msgfile, const char *sigfile,
    const char *keytype)
{
	struct gzheader h;
	size_t bufsize;
	char *p, *meta;
	uint8_t *bufend;
	int fdin, fdout;

	/* by default, verification will love pipes */
	if (!sigfile)
		sigfile = "-";
	if (!msgfile)
		msgfile = "-";

	fdin = xopen(sigfile, O_RDONLY | O_NOFOLLOW, 0);

	bufend = readgz_header(&h, fdin);
	if (!(h.flg & FCOMMENT_FLAG))
		errx(1, "unsigned gzip archive");
	fake[8] = h.xflg;

	p = verifyzdata(h.comment, h.endcomment-h.comment, sigfile,
	    pubkeyfile, keytype);

	bufsize = MYBUFSIZE;

	meta = p;
#define BEGINS_WITH(x, y) memcmp((x), (y), sizeof(y)-1) == 0

	while (BEGINS_WITH(p, "algorithm=SHA512/256") ||
	    BEGINS_WITH(p, "date=") ||
	    BEGINS_WITH(p, "key=") ||
	    sscanf(p, "blocksize=%zu\n", &bufsize) > 0) {
		while (*(p++) != '\n')
			continue;
	}

	if (*p != '\n')
		errx(1, "invalid signature");
	*(p++) = 0;

	fdout = xopen(msgfile, O_CREAT|O_TRUNC|O_NOFOLLOW|O_WRONLY, 0666);
	/* we don't actually copy the header, but put in a fake one with about
	 * zero useful information.
	 */
	writeall(fdout, fake, sizeof fake, msgfile);
	writeall(fdout, meta, p - meta, msgfile);
	copy_blocks(fdout, fdin, p, h.endcomment, bufsize, bufend);
	free(h.buffer);
	close(fdout);
	close(fdin);
}

void
zsign(const char *seckeyfile, const char *msgfile, const char *sigfile)
{
	size_t bufsize = MYBUFSIZE;
	int fdin, fdout;
	struct gzheader h;
	struct stat sb;
	size_t space;
	char *msg;
	char *p;
	uint8_t *buffer;
	uint8_t *sighdr;
	char date[80];
	time_t clock;

	fdin = xopen(msgfile, O_RDONLY, 0);
	if (fstat(fdin, &sb) == -1 || !S_ISREG(sb.st_mode))
		errx(1, "Sorry can only sign regular files");

	readgz_header(&h, fdin);
	/* we don't care about the header, actually */
	free(h.buffer);

	if (lseek(fdin, h.headerlength, SEEK_SET) == -1)
		err(1, "seek in %s", msgfile);

	space = (sb.st_size / MYBUFSIZE+1) * SHA512_256_DIGEST_STRING_LENGTH +
		1024; /* long enough for extra header information */

	msg = xmalloc(space);
	buffer = xmalloc(bufsize);
	time(&clock);
	strftime(date, sizeof date, "%Y-%m-%dT%H:%M:%SZ", gmtime(&clock));
	snprintf(msg, space,
	    "date=%s\n"
	    "key=%s\n"
	    "algorithm=SHA512/256\n"
	    "blocksize=%zu\n\n",
	    date, seckeyfile, bufsize);
	p = strchr(msg, 0);

	while (1) {
		size_t n = read(fdin, buffer, bufsize);
		if (n == -1)
			err(1, "read from %s", msgfile);
		if (n == 0)
			break;
		SHA512_256Data(buffer, n, p);
		p += SHA512_256_DIGEST_STRING_LENGTH;
		p[-1] = '\n';
		if (msg + space < p)
			errx(1, "file too long %s", msgfile);
	}
	*p = 0;

	fdout = xopen(sigfile, O_CREAT|O_TRUNC|O_NOFOLLOW|O_WRONLY, 0666);
	sighdr = createsig(seckeyfile, msgfile, msg, p-msg);
	fake[8] = h.xflg;

	writeall(fdout, fake, sizeof fake, sigfile);
	writeall(fdout, sighdr, strlen(sighdr), sigfile);
	free(sighdr);
	/* need the 0 ! */
	writeall(fdout, msg, p - msg + 1, sigfile);
	free(msg);

	if (lseek(fdin, h.headerlength, SEEK_SET) == -1)
		err(1, "seek in %s", msgfile);

	while (1) {
		size_t n = read(fdin, buffer, bufsize);
		if (n == -1)
			err(1, "read from %s", msgfile);
		if (n == 0)
			break;
		writeall(fdout, buffer, n, sigfile);
	}
	free(buffer);
	close(fdout);
}
#endif
@


1.14
log
@typo
@
text
@d1 1
a1 1
/* $OpenBSD: zsig.c,v 1.13 2016/09/27 02:16:40 tedu Exp $ */
d58 1
a58 1
	size_t sz = 1024;
@


1.13
log
@can make function static now that it's living in a separate file.
bye bye XXX!
@
text
@d1 1
a1 1
/* $OpenBSD: zsig.c,v 1.12 2016/09/10 12:23:16 deraadt Exp $ */
d97 1
a97 1
				err(1, "invalud magic in gzheader");
@


1.12
log
@spaces found during re-read
@
text
@d1 1
a1 1
/* $OpenBSD: zsig.c,v 1.11 2016/09/08 16:04:01 espie Exp $ */
d55 1
a55 4
/* XXX no static there, confuses the hell out of gcc which displays
 * non-existent warnings.
 */
uint8_t *
@


1.11
log
@simplify the extra buffer size copy
@
text
@d1 1
a1 1
/* $OpenBSD: zsig.c,v 1.10 2016/09/04 17:00:22 espie Exp $ */
d269 1
a269 1
	snprintf(msg, space, 
@


1.10
log
@well, adding the filename doesn't help... mostly used with pipes anyhow
@
text
@d1 1
a1 1
/* $OpenBSD: zsig.c,v 1.9 2016/09/03 20:52:53 espie Exp $ */
d153 3
a155 9
			if (len >= bufsize) {
				memcpy(buffer, residual, bufsize);
				n = bufsize;
				residual += bufsize;
			} else {
				memcpy(buffer, residual, len);
				residual += len;
				n = len;
			}
@


1.9
log
@add the keyname to meta-info that passes thru
@
text
@d1 1
a1 1
/* $OpenBSD: zsig.c,v 1.8 2016/09/03 17:04:13 tedu Exp $ */
d207 1
a207 1
		errx(1, "%s is an unsigned archive", sigfile);
@


1.8
log
@switch back to SHA512/256 now that we have the official nist flavor
@
text
@d1 1
a1 1
/* $OpenBSD: zsig.c,v 1.7 2016/09/03 12:59:33 espie Exp $ */
d220 1
d277 1
d280 1
a280 1
	    date, bufsize);
@


1.7
log
@naddy@@ pointed out that SHA512/256 is slightly different
so use SHA384 which is on the shelf and good enough
@
text
@d1 1
a1 1
/* $OpenBSD: zsig.c,v 1.6 2016/09/03 12:12:21 espie Exp $ */
d141 1
a141 1
	uint8_t output[SHA384_DIGEST_STRING_LENGTH];
d172 2
a173 2
		SHA384Data(buffer, n, output);
		if (endsha - sha < SHA384_DIGEST_STRING_LENGTH-1)
d175 1
a175 1
		if (memcmp(output, sha, SHA384_DIGEST_STRING_LENGTH-1) != 0)
d177 1
a177 1
		if (sha[SHA384_DIGEST_STRING_LENGTH-1] != '\n')
d179 1
a179 1
		sha += SHA384_DIGEST_STRING_LENGTH;
d218 1
a218 1
	while (BEGINS_WITH(p, "algorithm=SHA384") ||
d267 1
a267 1
	space = (sb.st_size / MYBUFSIZE+1) * SHA384_DIGEST_STRING_LENGTH +
d276 1
a276 1
	    "algorithm=SHA384\n"
d287 2
a288 2
		SHA384Data(buffer, n, p);
		p += SHA384_DIGEST_STRING_LENGTH;
@


1.6
log
@MAJOR tweak: switch to SHA512/256

adjust the header information to be self-descripting and contain a
signature date, and pass that thru when checking.
@
text
@d1 1
a1 1
/* $OpenBSD: zsig.c,v 1.5 2016/09/03 11:22:09 espie Exp $ */
d141 1
a141 1
	uint8_t output[SHA512_DIGEST_STRING_LENGTH];
d172 2
a173 2
		SHA512Data(buffer, n, output);
		if (endsha - sha < SHA256_DIGEST_STRING_LENGTH-1)
d175 1
a175 1
		if (memcmp(output, sha, SHA256_DIGEST_STRING_LENGTH-1) != 0)
d177 1
a177 1
		if (sha[SHA256_DIGEST_STRING_LENGTH-1] != '\n')
d179 1
a179 1
		sha += SHA256_DIGEST_STRING_LENGTH;
d218 1
a218 1
	while (BEGINS_WITH(p, "algorithm=SHA512/256") ||
d267 1
a267 1
	space = (sb.st_size / MYBUFSIZE+2) * SHA256_DIGEST_STRING_LENGTH +
d276 1
a276 1
	    "algorithm=SHA512/256\n"
d287 2
a288 2
		SHA512Data(buffer, n, p);
		p += SHA256_DIGEST_STRING_LENGTH;
@


1.5
log
@nitpicks. all header info is relative. make gzheader freeable.
allocate properly for storing shas.
@
text
@d1 1
a1 1
/* $OpenBSD: zsig.c,v 1.4 2016/09/02 21:52:12 tedu Exp $ */
d27 1
d53 1
a53 1
static uint8_t fake[10] = { 0x1f, 0x8b, 8, 0, 0, 0, 0, 0, 0, 3 };
d141 1
a141 1
	uint8_t output[SHA256_DIGEST_STRING_LENGTH];
d172 1
a172 1
		SHA256Data(buffer, n, output);
d193 1
a193 1
	char *p;
d215 6
a220 2
	/* allow for arbitrary blocksize */
	if (sscanf(p, "blocksize=%zu\n", &bufsize)) {
d224 5
d234 1
d253 2
d267 2
a268 2
	space = (sb.st_size / MYBUFSIZE+1) * SHA256_DIGEST_STRING_LENGTH +
		80; /* long enough for blocksize=.... */
d272 7
a278 1
	snprintf(msg, space, "blocksize=%zu\n", bufsize);
d287 1
a287 1
		SHA256Data(buffer, n, p);
a296 1
	fake[3] = FCOMMENT_FLAG;
@


1.4
log
@style polishing
@
text
@d1 1
a1 1
/* $OpenBSD: zsig.c,v 1.3 2016/09/02 21:48:03 tedu Exp $ */
d39 1
d48 1
d90 1
a90 1
			if (len < 10)
d103 1
a103 1
			pos = 10;
a110 1
				h->name = buf + pos;
d124 2
d127 1
d225 1
d248 2
d254 1
a254 1
	space = (sb.st_size / MYBUFSIZE) * SHA256_DIGEST_STRING_LENGTH +
@


1.3
log
@replace exit() with err() and errx() so user knows what happened
@
text
@d1 1
a1 1
/* $OpenBSD: zsig.c,v 1.2 2016/09/02 16:12:09 espie Exp $ */
d64 1
a64 1
	uint8_t *buf = xmalloc(sz);
d66 1
a66 2
	if (!buf)
		exit(1);
d91 1
a91 1
			h->mtime = buf[4] | (buf[5] << 8U) | (buf[6] << 16U) | 
d130 1
a130 1
static void 
d132 1
a132 1
	size_t bufsize, uint8_t *bufend)
d134 6
a139 1
	uint8_t *buffer = xmalloc(bufsize);
a140 2
	uint8_t *residual = (uint8_t *)endsha+1;
	uint8_t output[SHA256_DIGEST_STRING_LENGTH];
d157 1
a157 1
	    	}
d178 1
a178 1
    	}
d191 1
d205 1
a205 1
	p = verifyzdata(h.comment, h.endcomment-h.comment, sigfile, 
d247 1
a247 1
	space = (sb.st_size / MYBUFSIZE) * SHA256_DIGEST_STRING_LENGTH + 
a294 1
	
@


1.2
log
@duplicate var
@
text
@d1 1
a1 1
/* $OpenBSD: zsig.c,v 1.1 2016/09/02 16:10:56 espie Exp $ */
d74 1
a74 1
				exit(1);
d78 1
a78 1
			exit(1);
d81 1
a81 1
			exit(1);
d98 1
a98 1
				exit(1);
d101 1
a101 1
				exit(1);
d160 1
a160 1
				exit(1);
@


1.1
log
@add a new option (-z) for signing gzip archives.
- simple barebones gzip header parsing
- signature is outside of the archive
- checksums for blocks of 64K
- verify stuff then pass it to the pipeline
lots of inputs by tedu@@ and deraadt@@
okay tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a233 1
	uint8_t fake[10] = { 0x1f, 0x8b, 8, 0, 0, 0, 0, 0, 0, 3 };
@

