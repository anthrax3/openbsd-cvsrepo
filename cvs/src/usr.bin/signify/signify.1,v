head	1.42;
access;
symbols
	OPENBSD_6_1:1.41.0.4
	OPENBSD_6_1_BASE:1.41
	OPENBSD_6_0:1.34.0.2
	OPENBSD_6_0_BASE:1.34
	OPENBSD_5_9:1.33.0.2
	OPENBSD_5_9_BASE:1.33
	OPENBSD_5_8:1.31.0.4
	OPENBSD_5_8_BASE:1.31
	OPENBSD_5_7:1.30.0.2
	OPENBSD_5_7_BASE:1.30
	OPENBSD_5_6:1.27.0.2
	OPENBSD_5_6_BASE:1.27
	OPENBSD_5_5:1.24.0.2
	OPENBSD_5_5_BASE:1.24;
locks; strict;
comment	@.\" @;


1.42
date	2017.08.20.22.36.10;	author deraadt;	state Exp;
branches;
next	1.41;
commitid	ma7N4BgZ0kiOGYSM;

1.41
date	2017.03.09.19.42.05;	author benno;	state Exp;
branches;
next	1.40;
commitid	i78I2P199ZZPjWL7;

1.40
date	2016.10.05.15.45.13;	author tedu;	state Exp;
branches;
next	1.39;
commitid	LvTcDM4he2X6vvXC;

1.39
date	2016.09.19.21.15.58;	author tedu;	state Exp;
branches;
next	1.38;
commitid	tXvVN2ZgD4VuH7iw;

1.38
date	2016.09.02.21.04.26;	author tedu;	state Exp;
branches;
next	1.37;
commitid	V4HdPguEGEV6Bg3f;

1.37
date	2016.09.02.18.35.43;	author jmc;	state Exp;
branches;
next	1.36;
commitid	I6CPefiZGajXRI7v;

1.36
date	2016.09.02.17.57.43;	author espie;	state Exp;
branches;
next	1.35;
commitid	IfVM19MW9wYqIIGW;

1.35
date	2016.09.02.17.27.31;	author espie;	state Exp;
branches;
next	1.34;
commitid	Sgr63kgwjnv5lC5z;

1.34
date	2016.05.11.18.07.28;	author deraadt;	state Exp;
branches;
next	1.33;
commitid	Db2DThQ76ut11zom;

1.33
date	2016.01.06.23.14.05;	author benno;	state Exp;
branches;
next	1.32;
commitid	ZFzVBbrQewfnwSBD;

1.32
date	2016.01.05.21.09.48;	author florian;	state Exp;
branches;
next	1.31;
commitid	XzcXKeVLfPmPtFJP;

1.31
date	2015.07.14.23.30.02;	author florian;	state Exp;
branches;
next	1.30;
commitid	SheIvGshH6apBuUF;

1.30
date	2015.01.20.20.50.36;	author tedu;	state Exp;
branches;
next	1.29;
commitid	IcDDAD4F8TZdgHPq;

1.29
date	2015.01.07.10.29.22;	author florian;	state Exp;
branches;
next	1.28;
commitid	wlrsclGxd4I3YORn;

1.28
date	2014.12.29.14.16.04;	author tedu;	state Exp;
branches;
next	1.27;
commitid	jplj3CSwYvgHGq6f;

1.27
date	2014.08.07.19.03.38;	author lteo;	state Exp;
branches;
next	1.26;
commitid	tr1WuG2Xrs2qdo4U;

1.26
date	2014.03.16.22.49.56;	author tedu;	state Exp;
branches;
next	1.25;

1.25
date	2014.03.06.15.01.58;	author naddy;	state Exp;
branches;
next	1.24;

1.24
date	2014.03.04.16.44.07;	author tedu;	state Exp;
branches;
next	1.23;

1.23
date	2014.02.27.17.03.52;	author tedu;	state Exp;
branches;
next	1.22;

1.22
date	2014.01.17.03.38.12;	author lteo;	state Exp;
branches;
next	1.21;

1.21
date	2014.01.14.17.49.24;	author jmc;	state Exp;
branches;
next	1.20;

1.20
date	2014.01.14.13.59.45;	author naddy;	state Exp;
branches;
next	1.19;

1.19
date	2014.01.13.01.40.43;	author tedu;	state Exp;
branches;
next	1.18;

1.18
date	2014.01.12.17.17.12;	author rpe;	state Exp;
branches;
next	1.17;

1.17
date	2014.01.12.11.32.47;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2014.01.12.05.46.50;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2014.01.10.17.52.50;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2014.01.10.17.38.24;	author tedu;	state Exp;
branches;
next	1.13;

1.13
date	2014.01.10.07.53.04;	author jmc;	state Exp;
branches;
next	1.12;

1.12
date	2014.01.10.04.34.24;	author tedu;	state Exp;
branches;
next	1.11;

1.11
date	2014.01.10.04.24.18;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2014.01.10.04.23.37;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2014.01.10.04.15.38;	author tedu;	state Exp;
branches;
next	1.8;

1.8
date	2014.01.09.15.36.40;	author tedu;	state Exp;
branches;
next	1.7;

1.7
date	2014.01.03.17.10.27;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2014.01.01.17.50.33;	author tedu;	state Exp;
branches;
next	1.5;

1.5
date	2013.12.31.18.18.36;	author jmc;	state Exp;
branches;
next	1.4;

1.4
date	2013.12.31.17.33.17;	author jmc;	state Exp;
branches;
next	1.3;

1.3
date	2013.12.31.11.03.53;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2013.12.31.04.03.23;	author tedu;	state Exp;
branches;
next	1.1;

1.1
date	2013.12.31.03.03.32;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.42
log
@also crank for 6.2
@
text
@.\" $OpenBSD: signify.1,v 1.41 2017/03/09 19:42:05 benno Exp $
.\"
.\"Copyright (c) 2013 Marc Espie <espie@@openbsd.org>
.\"Copyright (c) 2013 Ted Unangst <tedu@@openbsd.org>
.\"
.\"Permission to use, copy, modify, and distribute this software for any
.\"purpose with or without fee is hereby granted, provided that the above
.\"copyright notice and this permission notice appear in all copies.
.\"
.\"THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\"WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\"MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\"ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\"WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\"ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\"OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.Dd $Mdocdate: March 9 2017 $
.Dt SIGNIFY 1
.Os
.Sh NAME
.Nm signify
.Nd cryptographically sign and verify files
.Sh SYNOPSIS
.Nm signify
.Fl C
.Op Fl q
.Fl p Ar pubkey
.Fl x Ar sigfile
.Op Ar
.Nm signify
.Fl G
.Op Fl n
.Op Fl c Ar comment
.Fl p Ar pubkey
.Fl s Ar seckey
.Nm signify
.Fl S
.Op Fl ez
.Op Fl x Ar sigfile
.Fl s Ar seckey
.Fl m Ar message
.Nm signify
.Fl V
.Op Fl eqz
.Op Fl p Ar pubkey
.Op Fl t Ar keytype
.Op Fl x Ar sigfile
.Fl m Ar message
.Sh DESCRIPTION
The
.Nm
utility creates and verifies cryptographic signatures.
A signature verifies the integrity of a
.Ar message .
The mode of operation is selected with the following options:
.Bl -tag -width Dsssigfile
.It Fl C
Verify a signed checksum list, and then verify the checksum for
each file.
If no files are specified, all of them are checked.
.Ar sigfile
should be the signed output of
.Xr sha256 1 .
.It Fl G
Generate a new key pair.
Keynames should follow the convention of
.Pa keyname.pub
and
.Pa keyname.sec
for the public and secret keys, respectively.
.It Fl S
Sign the specified message file and create a signature.
.It Fl V
Verify the message and signature match.
.El
.Pp
The other options are as follows:
.Bl -tag -width Dsssignature
.It Fl c Ar comment
Specify the comment to be added during key generation.
.It Fl e
When signing, embed the message after the signature.
When verifying, extract the message from the signature.
(This requires that the signature was created using
.Fl e
and creates a new message file as output.)
.It Fl m Ar message
When signing, the file containing the message to sign.
When verifying, the file containing the message to verify.
When verifying with
.Fl e ,
the file to create.
.It Fl n
Do not ask for a passphrase during key generation.
Otherwise,
.Nm
will prompt the user for a passphrase to protect the secret key.
.It Fl p Ar pubkey
Public key produced by
.Fl G ,
and used by
.Fl V
to check a signature.
.It Fl q
Quiet mode.
Suppress informational output.
.It Fl s Ar seckey
Secret (private) key produced by
.Fl G ,
and used by
.Fl S
to sign a message.
.It Fl t Ar keytype
When deducing the correct key to check a signature, make sure
the actual key matches
.Pa /etc/signify/*-keytype.pub .
.It Fl x Ar sigfile
The signature file to create or verify.
The default is
.Ar message Ns .sig .
.It Fl z
Sign and verify
.Xr gzip 1
archives, where the signing data
is embedded in the
.Xr gzip 1
header.
.El
.Pp
The key and signature files created by
.Nm
have the same format.
The first line of the file is a free form text comment that may be edited,
so long as it does not exceed a single line.
Signature comments will be generated based on the name of the secret
key used for signing.
This comment can then be used as a hint for the name of the public key
when verifying.
The second line of the file is the actual key or signature base64 encoded.
.Sh EXIT STATUS
.Ex -std signify
It may fail because of one of the following reasons:
.Pp
.Bl -bullet -compact
.It
Some necessary files do not exist.
.It
Entered passphrase is incorrect.
.It
The message file was corrupted and its signature does not match.
.It
The message file is too large.
.El
.Sh EXAMPLES
Create a new key pair:
.Dl $ signify -G -p newkey.pub -s newkey.sec
.Pp
Sign a file, specifying a signature name:
.Dl $ signify -S -s key.sec -m message.txt -x msg.sig
.Pp
Verify a signature, using the default signature name:
.Dl $ signify -V -p key.pub -m generalsorders.txt
.Pp
Verify a release directory containing
.Pa SHA256.sig
and a full set of release files:
.Bd -literal -offset indent -compact
$ signify -C -p /etc/signify/openbsd-63-base.pub -x SHA256.sig
.Ed
.Pp
Verify a bsd.rd before an upgrade:
.Bd -literal -offset indent -compact
$ signify -C -p /etc/signify/openbsd-63-base.pub -x SHA256.sig bsd.rd
.Ed
.Pp
Sign a gzip archive:
.Bd -literal -offset indent -compact
$ signify -Sz -s key-arc.sec -m in.tgz -x out.tgz
.Ed
.Pp
Verify a gzip pipeline:
.Bd -literal -offset indent -compact
$ ftp url | signify -Vz -t arc | tar ztf -
.Ed
.Sh SEE ALSO
.Xr fw_update 1 ,
.Xr gzip 1 ,
.Xr pkg_add 1 ,
.Xr sha256 1
.Sh HISTORY
The
.Nm
command first appeared in
.Ox 5.5 .
.Sh AUTHORS
.An -nosplit
.An Ted Unangst Aq Mt tedu@@openbsd.org
and
.An Marc Espie Aq Mt espie@@openbsd.org .
@


1.41
log
@show how to verify the next release after 6.1
@
text
@d1 1
a1 1
.\" $OpenBSD: signify.1,v 1.40 2016/10/05 15:45:13 tedu Exp $
d17 1
a17 1
.Dd $Mdocdate: October 5 2016 $
d168 1
a168 1
$ signify -C -p /etc/signify/openbsd-62-base.pub -x SHA256.sig
d173 1
a173 1
$ signify -C -p /etc/signify/openbsd-62-base.pub -x SHA256.sig bsd.rd
@


1.40
log
@document the previously hidden keyname detection. urged by espie.
@
text
@d1 1
a1 1
.\" $OpenBSD: signify.1,v 1.39 2016/09/19 21:15:58 tedu Exp $
d17 1
a17 1
.Dd $Mdocdate: September 19 2016 $
d168 1
a168 1
$ signify -C -p /etc/signify/openbsd-61-base.pub -x SHA256.sig
d173 1
a173 1
$ signify -C -p /etc/signify/openbsd-61-base.pub -x SHA256.sig bsd.rd
@


1.39
log
@use a shell glob wildcard, that's clearer than an out of scope variable
@
text
@d1 1
a1 1
.\" $OpenBSD: signify.1,v 1.38 2016/09/02 21:04:26 tedu Exp $
d17 1
a17 1
.Dd $Mdocdate: September 2 2016 $
d66 5
d135 4
a138 4
.\" Signature comments will be generated based on the name of the secret
.\" key used for signing.
.\" This comment can then be used as a hint for the name of the public key
.\" when verifying.
@


1.38
log
@space out the example
@
text
@d1 1
a1 1
.\" $OpenBSD: signify.1,v 1.37 2016/09/02 18:35:43 jmc Exp $
d111 1
a111 1
.Pa /etc/signify/<somekey>-keytype.pub .
@


1.37
log
@finish the sentence;
@
text
@d1 1
a1 1
.\" $OpenBSD: signify.1,v 1.36 2016/09/02 17:57:43 espie Exp $
d178 1
a178 1
$ ftp url | signify -Vz -t arc|tar ztf -
@


1.36
log
@more jmc tweaks
@
text
@d1 1
a1 1
.\" $OpenBSD: signify.1,v 1.35 2016/09/02 17:27:31 espie Exp $
d194 1
a194 1
.An Marc Espie Aq Mt espie@@openbsd.org
@


1.35
log
@document the new stuff, usage nits.
some input by jmc@@, to be polished later
"get it in now" tedu@@ deraadt@@
@
text
@d1 1
a1 1
.\" $OpenBSD: signify.1,v 1.34 2016/05/11 18:07:28 deraadt Exp $
d17 1
a17 1
.Dd $Mdocdate: May 11 2016 $
d182 1
d184 1
a184 2
.Xr sha256 1 ,
.Xr gzip 1
d191 3
a193 1
.An Ted Unangst Aq Mt tedu@@openbsd.org ,
@


1.34
log
@signify should refer to the future key
@
text
@d1 1
a1 1
.\" $OpenBSD: signify.1,v 1.33 2016/01/06 23:14:05 benno Exp $
d17 1
a17 1
.Dd $Mdocdate: January 6 2016 $
d38 1
a38 1
.Op Fl e
d44 3
a46 1
.Op Fl eq
a47 1
.Fl p Ar pubkey
d108 4
d116 7
d170 10
d183 2
a184 1
.Xr sha256 1
d191 2
a192 1
.An Ted Unangst Aq Mt tedu@@openbsd.org
@


1.33
log
@document the signify command for the next release, so that users can
verify before the netx upgrade.
document that signify.1 needs an edit bump once in a while.
ok tedu@@ florian@@
@
text
@d1 1
a1 1
.\" $OpenBSD: signify.1,v 1.32 2016/01/05 21:09:48 florian Exp $
d17 1
a17 1
.Dd $Mdocdate: January 5 2016 $
d151 1
a151 1
$ signify -C -p /etc/signify/openbsd-60-base.pub -x SHA256.sig
d156 1
a156 1
$ signify -C -p /etc/signify/openbsd-60-base.pub -x SHA256.sig bsd.rd
@


1.32
log
@Bump example pubkey filenames for 5.9
OK benno@@
@
text
@d1 1
a1 1
.\" $OpenBSD: signify.1,v 1.31 2015/07/14 23:30:02 florian Exp $
d17 1
a17 1
.Dd $Mdocdate: July 14 2015 $
d151 1
a151 1
$ signify -C -p /etc/signify/openbsd-59-base.pub -x SHA256.sig
d156 1
a156 1
$ signify -C -p /etc/signify/openbsd-59-base.pub -x SHA256.sig bsd.rd
@


1.31
log
@Bump example pubkey filenames for 5.8
OK benno@@
@
text
@d1 1
a1 1
.\" $OpenBSD: signify.1,v 1.30 2015/01/20 20:50:36 tedu Exp $
d17 1
a17 1
.Dd $Mdocdate: January 20 2015 $
d151 1
a151 1
$ signify -C -p /etc/signify/openbsd-58-base.pub -x SHA256.sig
d156 1
a156 1
$ signify -C -p /etc/signify/openbsd-58-base.pub -x SHA256.sig bsd.rd
@


1.30
log
@i wrote this
@
text
@d1 1
a1 1
.\" $OpenBSD: signify.1,v 1.29 2015/01/07 10:29:22 florian Exp $
d17 1
a17 1
.Dd $Mdocdate: January 7 2015 $
d151 1
a151 1
$ signify -C -p /etc/signify/openbsd-57-base.pub -x SHA256.sig
d156 1
a156 1
$ signify -C -p /etc/signify/openbsd-57-base.pub -x SHA256.sig bsd.rd
@


1.29
log
@Bump example pubkey filenames for 5.7
OK benno@@
@
text
@d1 1
a1 1
.\" $OpenBSD: signify.1,v 1.28 2014/12/29 14:16:04 tedu Exp $
d17 1
a17 1
.Dd $Mdocdate: December 29 2014 $
d167 2
@


1.28
log
@remove the inspect debug command. should not be used by users, who are not
supposed to know what fingerprints are or that they exist.
@
text
@d1 1
a1 1
.\" $OpenBSD: signify.1,v 1.27 2014/08/07 19:03:38 lteo Exp $
d17 1
a17 1
.Dd $Mdocdate: August 7 2014 $
d151 1
a151 1
$ signify -C -p /etc/signify/openbsd-56-base.pub -x SHA256.sig
d156 1
a156 1
$ signify -C -p /etc/signify/openbsd-56-base.pub -x SHA256.sig bsd.rd
@


1.27
log
@Bump example pubkey filenames to /etc/signify/openbsd-56-base.pub for
5.6.

ok deraadt@@
@
text
@d1 1
a1 1
.\" $OpenBSD: signify.1,v 1.26 2014/03/16 22:49:56 tedu Exp $
d17 1
a17 1
.Dd $Mdocdate: March 16 2014 $
a36 5
.Fl I
.Op Fl p Ar pubkey
.Op Fl s Ar seckey
.Op Fl x Ar sigfile
.Nm signify
a64 2
.It Fl I
Inspect the specified keys or signature and print their fingerprint.
@


1.26
log
@secretly document the signature comment public key name stuff
@
text
@d1 1
a1 1
.\" $OpenBSD: signify.1,v 1.25 2014/03/06 15:01:58 naddy Exp $
d17 1
a17 1
.Dd $Mdocdate: March 6 2014 $
d158 1
a158 1
$ signify -C -p /etc/signify/openbsd-55-base.pub -x SHA256.sig
d163 1
a163 1
$ signify -C -p /etc/signify/openbsd-55-base.pub -x SHA256.sig bsd.rd
@


1.25
log
@tweak; from jmc@@ and yours truly
ok jmc@@ tedu@@
@
text
@d1 1
a1 1
.\" $OpenBSD: signify.1,v 1.24 2014/03/04 16:44:07 tedu Exp $
d17 1
a17 1
.Dd $Mdocdate: March 4 2014 $
d125 4
@


1.24
log
@add -C checksum mode, which works with sha256 files in safe easy fashion.
ok deraadt
@
text
@d1 1
a1 1
.\" $OpenBSD: signify.1,v 1.23 2014/02/27 17:03:52 tedu Exp $
d17 1
a17 1
.Dd $Mdocdate: February 27 2014 $
d29 1
a29 1
.Op files...
d32 1
a33 1
.Op Fl n
d62 1
a62 1
Verify the signed checksum list, and then verify the checksum for
d69 1
a69 1
Generate a new keypair.
d106 2
a107 1
Quiet mode. Suppress informational output.
d141 1
a141 1
Create a new keypair:
@


1.23
log
@use the real keys' names
@
text
@d1 1
a1 1
.\" $OpenBSD: signify.1,v 1.22 2014/01/17 03:38:12 lteo Exp $
d17 1
a17 1
.Dd $Mdocdate: January 17 2014 $
d25 6
d49 1
a49 1
.Op Fl e
d61 7
d105 2
d153 1
a153 2
$ signify -V -e -p /etc/signify/openbsd-55-base.pub -x SHA256.sig -m - | \e
	sha256 -c -
d158 1
a158 2
$ signify -V -e -p /etc/signify/openbsd-55-base.pub -x SHA256.sig -m - | \e
	sha256 -C - bsd.rd
@


1.22
log
@Add a new example showing how to verify bsd.rd with signify and the new
sha256 -C option.

suggested by deraadt@@
help/OK jmc@@ tedu@@
@
text
@d1 1
a1 1
.\" $OpenBSD: signify.1,v 1.21 2014/01/14 17:49:24 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: January 14 2014 $
d138 1
a138 1
$ signify -V -e -p /etc/signify/55base.pub -x SHA256.sig -m - | \e
d144 1
a144 1
$ signify -V -e -p /etc/signify/55base.pub -x SHA256.sig -m - | \e
@


1.21
log
@stick that last example in a display, and avoid linewrap;
@
text
@d1 1
a1 1
.\" $OpenBSD: signify.1,v 1.20 2014/01/14 13:59:45 naddy Exp $
d140 6
@


1.20
log
@use a pipe, as intended, in the example
@
text
@d1 1
a1 1
.\" $OpenBSD: signify.1,v 1.19 2014/01/13 01:40:43 tedu Exp $
d17 1
a17 1
.Dd $Mdocdate: January 13 2014 $
d137 4
a140 1
.Dl $ signify -V -e -p /etc/signify/55base.pub -x SHA256.sig -m - | sha256 -c -
@


1.19
log
@new day, new options. -m message and -x signature.
this should be less confusing and more consistent in various modes.
also support stdin/stdout where feasible. touch up usage to be helpful.
ok deraadt
@
text
@d1 1
a1 1
.\" $OpenBSD: signify.1,v 1.18 2014/01/12 17:17:12 rpe Exp $
d17 1
a17 1
.Dd $Mdocdate: January 12 2014 $
d137 1
a137 1
.Dl $ signify -V -e -p /etc/signify/55base.pub -x SHA256.sig -m - && sha256 -c -
@


1.18
log
@add missing dash in -p option

OK tedu@@ jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: signify.1,v 1.17 2014/01/12 11:32:47 deraadt Exp $
a31 1
.Op Fl o Ar sigfile
d34 1
d38 1
a38 1
.Op Fl o Ar sigfile
d40 1
a40 1
.Ar message
d44 1
a44 1
.Op Fl o Ar sigfile
d46 1
a46 1
.Ar message
d50 2
a51 2
utility creates and verifies cryptographic signatures for
an input file
d60 1
a60 1
Sign the input file.
d62 1
a62 1
Verify the input file and signature match.
d70 11
a80 2
Embed the message after the signature when signing.
For verification, extract the message from the signature.
d85 1
a85 5
will prompt the user for a passphrase on the terminal.
.It Fl o Ar sigfile
The signature file to create or verify.
The default is
.Ar message Ns .sig .
d98 4
d129 1
a129 1
.Dl $ signify -S -s key.sec -o msg.sig message.txt
d132 1
a132 1
.Dl $ signify -V -p key.pub generalsorders.txt
d135 1
a135 2
.Pa SHA256.sig ,
.Pa SHA256 ,
d137 1
a137 1
.Dl $ signify -V -p /etc/signify/55base.pub SHA256 && sha256 -c SHA256
@


1.17
log
@improve release directory example
@
text
@d1 1
a1 1
.\" $OpenBSD: signify.1,v 1.16 2014/01/12 05:46:50 deraadt Exp $
d129 1
a129 1
.Dl $ signify -V p /etc/signify/55base.pub SHA256 && sha256 -c SHA256
@


1.16
log
@subtly improve an example
@
text
@d1 1
a1 1
.\" $OpenBSD: signify.1,v 1.15 2014/01/10 17:52:50 deraadt Exp $
d17 1
a17 1
.Dd $Mdocdate: January 10 2014 $
d125 5
a129 2
Verify a release directory:
.Dl $ signify -Vp /etc/signify/55base.pub SHA256 && sha256 -c SHA256
@


1.15
log
@sort options
@
text
@d1 1
a1 1
.\" $OpenBSD: signify.1,v 1.14 2014/01/10 17:38:24 tedu Exp $
d126 1
a126 1
.Dl $ signify -p /etc/signify/55base.pub -V SHA256 && sha256 -c SHA256
@


1.14
log
@-c comment, for people who don't like the default. ok deraadt
@
text
@d1 1
a1 1
.\" $OpenBSD: signify.1,v 1.13 2014/01/10 07:53:04 jmc Exp $
d26 1
a27 1
.Op Fl c Ar comment
@


1.13
log
@no Pp before or after Sh;
@
text
@d1 1
a1 1
.\" $OpenBSD: signify.1,v 1.12 2014/01/10 04:34:24 tedu Exp $
d27 1
d67 2
@


1.12
log
@a little more consistent with names, notably call signature files sigfiles
for short, instead of output.
@
text
@d1 1
a1 1
.\" $OpenBSD: signify.1,v 1.11 2014/01/10 04:24:18 deraadt Exp $
a123 1
.Pp
@


1.11
log
@provide a small (very very) practical example for using signify
ok tedu
@
text
@d1 1
a1 1
.\" $OpenBSD: signify.1,v 1.10 2014/01/10 04:23:37 deraadt Exp $
d31 1
a31 1
.Op Fl o Ar signature
d37 1
a37 1
.Op Fl o Ar output
d43 1
a43 1
.Op Fl o Ar output
d53 1
a53 1
.Bl -tag -width Dssoutput
d65 1
a65 1
.Bl -tag -width Dssoutput
d77 1
a77 1
.Ar input Ns .sig .
@


1.10
log
@change the listing of the options, because there is way too much
befuddlement.
sorry jmc
ok tedu
@
text
@d1 1
a1 1
.\" $OpenBSD: signify.1,v 1.9 2014/01/10 04:15:38 tedu Exp $
d121 4
d126 3
a128 3
.Xr cmp 1 ,
.Xr sha256 1 ,
.Xr ssh 1
@


1.9
log
@at least for now, we're going to need some -Inspector magic
@
text
@d1 1
a1 1
.\" $OpenBSD: signify.1,v 1.8 2014/01/09 15:36:40 tedu Exp $
d17 1
a17 1
.Dd $Mdocdate: January 9 2014 $
d25 1
a28 1
.Fl G
d30 1
a33 1
.Fl I
d35 1
a38 1
.Fl S
d41 1
a44 1
.Fl V
d52 11
a62 6
The mode of operation is selected by the
.Fl G ,
.Fl S ,
or
.Fl V
options.
d64 1
a64 1
The options are as follows:
a68 4
.It Fl G
Generate a new keypair.
.It Fl I
Inspect the specified keys or signature and print their fingerprint.
a83 2
.It Fl S
Sign the input file.
a89 2
.It Fl V
Verify the input file and signature match.
@


1.8
log
@-e embedded signatures. ok deraadt
@
text
@d1 1
a1 1
.\" $OpenBSD: signify.1,v 1.7 2014/01/03 17:10:27 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: January 3 2014 $
d30 5
d66 2
@


1.7
log
@let signify have an actual parameters: the file to sign/verify
clarify SYNOPSIS, as options are highly dependent on the mode.
okay tedu@@,
usage suggestion by jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: signify.1,v 1.6 2014/01/01 17:50:33 tedu Exp $
d17 1
a17 1
.Dd $Mdocdate: January 1 2014 $
d30 1
d34 1
a34 1
.Ar input
d36 1
d40 1
a40 1
.Ar input
d46 1
a46 1
.Ar input .
d56 3
d66 1
a66 1
.It Fl o Ar output
@


1.6
log
@revert to mostly lowercase options, with uppercase for actions.
ok deraadt espie naddy. wth man tweaks from jmc
@
text
@d1 1
a1 1
.\" $OpenBSD: signify.1,v 1.5 2013/12/31 18:18:36 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: December 31 2013 $
d26 9
a34 1
.Op Fl i Ar input
d36 3
a38 3
.Op Fl p Ar pubkey
.Op Fl s Ar seckey
.Fl G | S | V
d42 3
a44 1
utility creates and verifies cryptographic signatures.
d53 1
a53 1
.Bl -tag -width Ds
a55 2
.It Fl i Ar input
Input file to sign or verify.
d67 1
a67 1
.Ar G ,
d69 1
a69 1
.Ar V
d75 1
a75 1
.Ar G ,
d77 1
a77 1
.Ar S
d105 1
a105 1
.Dl $ signify -p newkey.pub -s newkey.sec -G
d108 1
a108 1
.Dl $ signify -s key.sec -i message.txt -o msg.sig -S
d111 1
a111 1
.Dl $ signify -p key.pub -i generalsorders.txt -V
d120 1
a120 1
.Ox 5.5
@


1.5
log
@zap an erroneous space in "input .sig" (should be input.sig, with .sig not
marked up;
@
text
@d1 1
a1 1
.\" $OpenBSD: signify.1,v 1.4 2013/12/31 17:33:17 jmc Exp $
d25 6
a30 6
.Op Fl N
.Op Fl I Ar input
.Op Fl O Ar output
.Op Fl P Ar pubkey
.Op Fl S Ar seckey
.Fl V Ar generate | sign | verify
d36 3
d40 1
a40 1
option.
d44 3
a46 1
.It Fl I Ar input
d48 1
a48 1
.It Fl N
d53 1
a53 1
.It Fl O Ar output
d57 1
a57 1
.It Fl P Ar pubkey
d59 1
a59 1
.Ar generate ,
d61 1
a61 1
.Ar verify
d63 3
a65 1
.It Fl S Ar seckey
d67 1
a67 1
.Ar generate ,
d69 1
a69 1
.Ar sign
d71 2
a72 2
.It Fl V Ar generate | sign | verify
Select the desired operation.
d97 1
a97 1
.Dl $ signify -P newkey.pub -S newkey.sec -V generate
d100 1
a100 1
.Dl $ signify -S key.sec -I message.txt -O msg.sig -V sign
d103 1
a103 1
.Dl $ signify -P key.pub -I generalsorders.txt -V verify
@


1.4
log
@various tweaks; ok tedu
@
text
@d1 1
a1 1
.\" $OpenBSD: signify.1,v 1.3 2013/12/31 11:03:53 espie Exp $
d51 1
a51 1
.Ar input .sig .
@


1.3
log
@nit
@
text
@d1 1
a1 1
.\" $OpenBSD: signify.1,v 1.2 2013/12/31 04:03:23 tedu Exp $
d25 1
a26 1
.Op Fl N
d30 1
a30 1
.Op Fl V Ar generate|sign|verify
d35 2
a36 2
The mode of operation is selected by the verb passed to the
.Fl Ar V
d38 3
a40 2
Options are as follows
.Bl -tag -width iPPpubkey
d42 1
a42 4
Input file to
.Ar sign
or
.Ar verify .
d47 1
a47 1
will prompt the user for a passphrase on the tty.
d64 1
a64 1
.It Fl V Ar generate|sign|verify
d67 7
d75 3
a77 3
The
.Nm
utility may fail for the following reasons:
d79 1
a79 1
.It 
d90 5
a94 3
.Dl "$ signify -P newkey.pub -S newkey.sec -V generate"
Sign a file, specifying signature name:
.Dl "$ signify -S key.sec -I message.txt -O msg.sig -V sign"
d96 1
a96 8
.Dl "$ signify -P key.pub -I generalsorders.txt -V verify"
.Sh FILES
The key and signature files created by
.Nm
have the same format.
The first line of the file is a free form text comment that may be edited,
so long as it does not exceed a single line.
The second line of the file is the actual key or signature base64 encoded.
@


1.2
log
@document file format
@
text
@d1 1
a1 1
.\" $OpenBSD: signify.1,v 1.1 2013/12/31 03:03:32 tedu Exp $
d36 1
a36 1
.Ar V
@


1.1
log
@add signify, a tool to sign and verify signatures.
man page and error message help from espie
other feedback from deraadt djm mikeb
@
text
@d1 1
a1 1
.\" $OpenBSD$
d17 1
a17 1
.Dd $Mdocdate$
d66 1
a66 1
.It Fl V generate|sign|verify
d90 7
@

