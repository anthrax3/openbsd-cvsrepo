head	1.25;
access;
symbols
	OPENBSD_6_0:1.25.0.4
	OPENBSD_6_0_BASE:1.25
	OPENBSD_5_9:1.25.0.2
	OPENBSD_5_9_BASE:1.25
	OPENBSD_5_8:1.23.0.4
	OPENBSD_5_8_BASE:1.23
	OPENBSD_5_7:1.21.0.10
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.21.0.14
	OPENBSD_5_6_BASE:1.21
	OPENBSD_5_5:1.21.0.12
	OPENBSD_5_5_BASE:1.21
	OPENBSD_5_4:1.21.0.8
	OPENBSD_5_4_BASE:1.21
	OPENBSD_5_3:1.21.0.6
	OPENBSD_5_3_BASE:1.21
	OPENBSD_5_2:1.21.0.4
	OPENBSD_5_2_BASE:1.21
	OPENBSD_5_1_BASE:1.21
	OPENBSD_5_1:1.21.0.2
	OPENBSD_5_0:1.17.0.18
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.17.0.16
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.17.0.14
	OPENBSD_4_8_BASE:1.17
	OPENBSD_4_7:1.17.0.10
	OPENBSD_4_7_BASE:1.17
	OPENBSD_4_6:1.17.0.12
	OPENBSD_4_6_BASE:1.17
	OPENBSD_4_5:1.17.0.8
	OPENBSD_4_5_BASE:1.17
	OPENBSD_4_4:1.17.0.6
	OPENBSD_4_4_BASE:1.17
	OPENBSD_4_3:1.17.0.4
	OPENBSD_4_3_BASE:1.17
	OPENBSD_4_2:1.17.0.2
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.14.0.4
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.2
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.12.0.4
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.2
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.10.0.8
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.6
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.8.0.2
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.6.0.6
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.4
	OPENBSD_2_8:1.6.0.2
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.3.0.14
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.12
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.10
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.25
date	2015.10.09.01.37.09;	author deraadt;	state Exp;
branches;
next	1.24;
commitid	sbrB3Q5CNxcwZpfU;

1.24
date	2015.10.06.13.48.34;	author deraadt;	state Exp;
branches;
next	1.23;
commitid	Cd7wTlsBOWLulSDU;

1.23
date	2015.03.17.19.31.30;	author millert;	state Exp;
branches;
next	1.22;
commitid	0y5bUkEOUrNvvJEO;

1.22
date	2015.03.15.00.41.28;	author millert;	state Exp;
branches;
next	1.21;
commitid	IbVxlqGw2UipKdDr;

1.21
date	2011.08.31.08.48.40;	author jmc;	state Exp;
branches;
next	1.20;

1.20
date	2011.08.30.02.07.11;	author guenther;	state Exp;
branches;
next	1.19;

1.19
date	2011.08.21.20.55.23;	author guenther;	state Exp;
branches;
next	1.18;

1.18
date	2011.08.20.06.44.24;	author guenther;	state Exp;
branches;
next	1.17;

1.17
date	2007.08.06.19.16.06;	author sobrado;	state Exp;
branches;
next	1.16;

1.16
date	2007.06.18.11.20.58;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2007.05.25.13.56.59;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2006.03.08.12.20.05;	author henning;	state Exp;
branches;
next	1.13;

1.13
date	2006.03.07.11.49.40;	author henning;	state Exp;
branches;
next	1.12;

1.12
date	2005.04.20.19.16.34;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2005.04.20.19.13.53;	author otto;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.10.22.20.53;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.03.02.56.20;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2003.01.10.11.42.00;	author henning;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.16.21.27.55;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2000.10.13.13.54.59;	author pjanzen;	state Exp;
branches;
next	1.5;

1.5
date	2000.09.20.22.25.26;	author pjanzen;	state Exp;
branches;
next	1.4;

1.4
date	2000.09.20.13.26.55;	author pjanzen;	state Exp;
branches;
next	1.3;

1.3
date	97.01.15.23.43.22;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.41.45;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.46.25;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.46.25;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.25
log
@Change all tame callers to namechange to pledge(2).
@
text
@/*	$OpenBSD: touch.c,v 1.24 2015/10/06 13:48:34 deraadt Exp $	*/
/*	$NetBSD: touch.c,v 1.11 1995/08/31 22:10:06 jtc Exp $	*/

/*
 * Copyright (c) 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/stat.h>
#include <sys/time.h>

#include <ctype.h>
#include <err.h>
#include <errno.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <locale.h>
#include <time.h>
#include <unistd.h>

void		stime_arg1(char *, struct timespec *);
void		stime_arg2(char *, int, struct timespec *);
void		stime_argd(char *, struct timespec *);
void		stime_file(char *, struct timespec *);
__dead void	usage(void);

int
main(int argc, char *argv[])
{
	struct timespec	 ts[2];
	int		 aflag, cflag, mflag, ch, fd, len, rval, timeset;
	char		*p;

	(void)setlocale(LC_ALL, "");

	if (pledge("stdio rpath wpath cpath fattr", NULL) == -1)
		err(1, "pledge");

	aflag = cflag = mflag = timeset = 0;
	while ((ch = getopt(argc, argv, "acd:fmr:t:")) != -1)
		switch (ch) {
		case 'a':
			aflag = 1;
			break;
		case 'c':
			cflag = 1;
			break;
		case 'd':
			timeset = 1;
			stime_argd(optarg, ts);
			break;
		case 'f':
			break;
		case 'm':
			mflag = 1;
			break;
		case 'r':
			timeset = 1;
			stime_file(optarg, ts);
			break;
		case 't':
			timeset = 1;
			stime_arg1(optarg, ts);
			break;
		default:
			usage();
		}
	argc -= optind;
	argv += optind;

	/* Default is both -a and -m. */
	if (aflag == 0 && mflag == 0)
		aflag = mflag = 1;

	/*
	 * If no -r or -t flag, at least two operands, the first of which
	 * is an 8 or 10 digit number, use the obsolete time specification.
	 */
	if (!timeset && argc > 1) {
		(void)strtol(argv[0], &p, 10);
		len = p - argv[0];
		if (*p == '\0' && (len == 8 || len == 10)) {
			timeset = 1;
			stime_arg2(*argv++, len == 10, ts);
		}
	}

	/* Otherwise use the current time of day. */
	if (!timeset)
		ts[0].tv_nsec = ts[1].tv_nsec = UTIME_NOW;

	if (!aflag)
		ts[0].tv_nsec = UTIME_OMIT;
	if (!mflag)
		ts[1].tv_nsec = UTIME_OMIT;

	if (*argv == NULL)
		usage();

	for (rval = 0; *argv; ++argv) {
		/* Update the file's timestamp if it exists. */
		if (! utimensat(AT_FDCWD, *argv, ts, 0))
			continue;
		if (errno != ENOENT) {
			rval = 1;
			warn("%s", *argv);
			continue;
		}

		/* Didn't exist; should we create it? */
		if (cflag)
			continue;

		/* Create the file. */
		fd = open(*argv, O_WRONLY | O_CREAT, DEFFILEMODE);
		if (fd == -1 || futimens(fd, ts) || close(fd)) {
			rval = 1;
			warn("%s", *argv);
		}
	}
	exit(rval);
}

#define	ATOI2(s)	((s) += 2, ((s)[-2] - '0') * 10 + ((s)[-1] - '0'))

void
stime_arg1(char *arg, struct timespec *tsp)
{
	struct tm	*lt;
	time_t		 tmptime;
	int		 yearset;
	char		*dot, *p;
					/* Start with the current time. */
	tmptime = time(NULL);
	if ((lt = localtime(&tmptime)) == NULL)
		err(1, "localtime");
					/* [[CC]YY]MMDDhhmm[.SS] */
	for (p = arg, dot = NULL; *p != '\0'; p++) {
		if (*p == '.' && dot == NULL)
			dot = p;
		else if (!isdigit((unsigned char)*p))
			goto terr;
	}
	if (dot == NULL)
		lt->tm_sec = 0;		/* Seconds defaults to 0. */
	else {
		*dot++ = '\0';
		if (strlen(dot) != 2)
			goto terr;
		lt->tm_sec = ATOI2(dot);
		if (lt->tm_sec > 61)	/* Could be leap second. */
			goto terr;
	}

	yearset = 0;
	switch (strlen(arg)) {
	case 12:			/* CCYYMMDDhhmm */
		lt->tm_year = (ATOI2(arg) * 100) - 1900;
		yearset = 1;
		/* FALLTHROUGH */
	case 10:			/* YYMMDDhhmm */
		if (yearset) {
			yearset = ATOI2(arg);
			lt->tm_year += yearset;
		} else {
			yearset = ATOI2(arg);
			/* POSIX logic: [00,68]=>20xx, [69,99]=>19xx */
			lt->tm_year = yearset;
			if (yearset < 69)
				lt->tm_year += 100;
		}
		/* FALLTHROUGH */
	case 8:				/* MMDDhhmm */
		lt->tm_mon = ATOI2(arg);
		if (lt->tm_mon > 12 || lt->tm_mon == 0)
			goto terr;
		--lt->tm_mon;		/* Convert from 01-12 to 00-11 */
		lt->tm_mday = ATOI2(arg);
		if (lt->tm_mday > 31 || lt->tm_mday == 0)
			goto terr;
		lt->tm_hour = ATOI2(arg);
		if (lt->tm_hour > 23)
			goto terr;
		lt->tm_min = ATOI2(arg);
		if (lt->tm_min > 59)
			goto terr;
		break;
	default:
		goto terr;
	}

	lt->tm_isdst = -1;		/* Figure out DST. */
	tsp[0].tv_sec = tsp[1].tv_sec = mktime(lt);
	if (tsp[0].tv_sec == -1)
terr:		errx(1,
	"out of range or illegal time specification: [[CC]YY]MMDDhhmm[.SS]");

	tsp[0].tv_nsec = tsp[1].tv_nsec = 0;
}

void
stime_arg2(char *arg, int year, struct timespec *tsp)
{
	struct tm	*lt;
	time_t		 tmptime;
					/* Start with the current time. */
	tmptime = time(NULL);
	if ((lt = localtime(&tmptime)) == NULL)
		err(1, "localtime");

	lt->tm_mon = ATOI2(arg);	/* MMDDhhmm[YY] */
	if (lt->tm_mon > 12 || lt->tm_mon == 0)
		goto terr;
	--lt->tm_mon;			/* Convert from 01-12 to 00-11 */
	lt->tm_mday = ATOI2(arg);
	if (lt->tm_mday > 31 || lt->tm_mday == 0)
		goto terr;
	lt->tm_hour = ATOI2(arg);
	if (lt->tm_hour > 23)
		goto terr;
	lt->tm_min = ATOI2(arg);
	if (lt->tm_min > 59)
		goto terr;
	if (year) {
		year = ATOI2(arg);
		/* POSIX logic: [00,68]=>20xx, [69,99]=>19xx */
		lt->tm_year = year;
		if (year < 69)
			lt->tm_year += 100;
	}
	lt->tm_sec = 0;

	lt->tm_isdst = -1;		/* Figure out DST. */
	tsp[0].tv_sec = tsp[1].tv_sec = mktime(lt);
	if (tsp[0].tv_sec == -1)
terr:		errx(1,
	"out of range or illegal time specification: MMDDhhmm[YY]");

	tsp[0].tv_nsec = tsp[1].tv_nsec = 0;
}

void
stime_file(char *fname, struct timespec *tsp)
{
	struct stat	sb;

	if (stat(fname, &sb))
		err(1, "%s", fname);
	tsp[0] = sb.st_atim;
	tsp[1] = sb.st_mtim;
}

void
stime_argd(char *arg, struct timespec *tsp)
{
	struct tm	tm;
	char		*frac, *p;
	int		utc = 0;

	/* accept YYYY-MM-DD(T| )hh:mm:ss[(.|,)frac][Z] */
	memset(&tm, 0, sizeof(tm));
	p = strptime(arg, "%F", &tm);
	if (p == NULL || (*p != 'T' && *p != ' '))
		goto terr;
	p = strptime(p + 1, "%T", &tm);
	if (p == NULL)
		goto terr;
	tsp[0].tv_nsec = 0;
	if (*p == '.' || *p == ',') {
		frac = ++p;
		while (isdigit((unsigned char)*p)) {
			if (p - frac < 9) {
				tsp[0].tv_nsec = tsp[0].tv_nsec * 10 +
				    *p - '0';
			}
			p++;
		}
		if (p == frac)
			goto terr;

		/* fill in the trailing zeros */
		while (p - frac-- < 9)
			tsp[0].tv_nsec *= 10;
	}
	if (*p == 'Z') {
		utc = 1;
		p++;
	}
	if (*p != '\0')
		goto terr;

	tm.tm_isdst = -1;
	tsp[0].tv_sec = utc ? timegm(&tm) : mktime(&tm);
	if (tsp[0].tv_sec == -1)
terr:		errx(1,
  "out of range or illegal time specification: YYYY-MM-DDThh:mm:ss[.frac][Z]");
	tsp[1] = tsp[0];
}

__dead void
usage(void)
{
	(void)fprintf(stderr,
"usage: touch [-acm] [-d ccyy-mm-ddTHH:MM:SS[.frac][Z]] [-r file]\n"
"             [-t [[cc]yy]mmddHHMM[.SS]] file ...\n");
	exit(1);
}
@


1.24
log
@use tame "stdio rpath wpath cpath fattr".  There is some timezone
database stuff here which goes further than most programs, but the
neccessary files are readable using "rpath".
@
text
@d1 1
a1 1
/*	$OpenBSD: touch.c,v 1.23 2015/03/17 19:31:30 millert Exp $	*/
d63 2
a64 2
	if (tame("stdio rpath wpath cpath fattr", NULL) == -1)
		err(1, "tame");
@


1.23
log
@Eliminate use of TM_YEAR_BASE.  OK guenther@@ deraadt@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: touch.c,v 1.22 2015/03/15 00:41:28 millert Exp $	*/
d62 3
@


1.22
log
@tzfile.h is an internal header that should never have been installed.
What's worse, the tzfile.h that gets installed is over 20 years old
and doesn't match the real tzfile.h in libc/time.  This makes the
tree safe for /usr/include/tzfile.h removal.  The TM_YEAR_BASE
define has been moved to time.h temporarily until its usage is
replaced by 1900 in the tree.  Actual removal of tzfile.h is pending
a ports build.  Based on a diff from deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: touch.c,v 1.21 2011/08/31 08:48:40 jmc Exp $	*/
d182 1
a182 1
		lt->tm_year = ATOI2(arg) * 100 - TM_YEAR_BASE;
d192 1
a192 1
			lt->tm_year = yearset + 1900 - TM_YEAR_BASE;
d251 1
a251 1
		lt->tm_year = year + 1900 - TM_YEAR_BASE;
@


1.21
log
@use the same format/text, as far as possible, for date strings;
help/ok guenther millert
@
text
@d1 1
a1 1
/*	$OpenBSD: touch.c,v 1.20 2011/08/30 02:07:11 guenther Exp $	*/
a45 1
#include <tzfile.h>
@


1.20
log
@Make the code match the manpage and POSIX spec when the year is specified
but the century isn't: century is 1900 if year >= 69; else 2000

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: touch.c,v 1.19 2011/08/21 20:55:23 guenther Exp $	*/
d329 2
a330 2
"usage: touch [-acm] [-d YYYY-MM-DDThh:mm:SS[.frac][Z]] [-r file]\n"
"             [-t [[CC]YY]MMDDhhmm[.SS]] file ...\n");
@


1.19
log
@With gettimeofday() removed from the top of main(), need to call time()
for the defaulting of the year to work in the -t and arg1 forms that were
broken by previous change

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: touch.c,v 1.18 2011/08/20 06:44:24 guenther Exp $	*/
d192 4
a195 2
			/* Preserve current century. */
			lt->tm_year = ((lt->tm_year / 100) * 100) + yearset;
d250 5
a254 2
		year = ATOI2(arg);	/* Preserve current century. */
		lt->tm_year = ((lt->tm_year / 100) * 100) + year;
@


1.18
log
@Add nanosecond precision and support for -d option (new in POSIX 2008)

ok millert@@, manpage fixes jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: touch.c,v 1.17 2007/08/06 19:16:06 sobrado Exp $	*/
d159 1
a159 1
	tmptime = tsp[0].tv_sec;
d230 1
a230 1
	tmptime = tsp[0].tv_sec;
@


1.17
log
@the ellipsis is not an optional argument; while here, sync the usage
and synopsis of commands

lots of good ideas by jmc@@

ok jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: touch.c,v 1.16 2007/06/18 11:20:58 millert Exp $	*/
d49 4
a52 3
void		stime_arg1(char *, struct timeval *);
void		stime_arg2(char *, int, struct timeval *);
void		stime_file(char *, struct timeval *);
d58 1
a58 2
	struct stat	 sb;
	struct timeval	 tv[2];
d65 1
a65 4
	if (gettimeofday(&tv[0], NULL))
		err(1, "gettimeofday");

	while ((ch = getopt(argc, argv, "acfmr:t:")) != -1)
d73 4
d84 1
a84 1
			stime_file(optarg, tv);
d88 1
a88 1
			stime_arg1(optarg, tv);
d109 1
a109 1
			stime_arg2(*argv++, len == 10, tv);
d115 6
a120 1
		tv[1] = tv[0];
d126 7
a132 17
		/* See if the file exists. */
		if (stat(*argv, &sb)) {
			if (!cflag) {
				/* Create the file. */
				fd = open(*argv,
				    O_WRONLY | O_CREAT, DEFFILEMODE);
				if (fd == -1 || fstat(fd, &sb) || close(fd)) {
					rval = 1;
					warn("%s", *argv);
					continue;
				}

				/* If using the current time, we're done. */
				if (!timeset)
					continue;
			} else
				continue;
d135 2
a136 7
		if (!aflag)
			TIMESPEC_TO_TIMEVAL(&tv[0], &sb.st_atimespec);
		if (!mflag)
			TIMESPEC_TO_TIMEVAL(&tv[1], &sb.st_mtimespec);

		/* Try utimes(2). */
		if (!utimes(*argv, tv))
d139 3
a141 2
		/* If the user specified a time, nothing else we can do. */
		if (timeset) {
a144 12

		/*
		 * System V and POSIX 1003.1 require that a NULL argument
		 * set the access/modification times to the current time.
		 * The permission checks are different, too, in that the
		 * ability to write the file is sufficient.  Take a shot.
		 */
		 if (!utimes(*argv, NULL))
			continue;

		rval = 1;
		warn("%s", *argv);
d152 1
a152 1
stime_arg1(char *arg, struct timeval *tvp)
d159 1
a159 1
	tmptime = tvp[0].tv_sec;
d216 2
a217 2
	tvp[0].tv_sec = tvp[1].tv_sec = mktime(lt);
	if (tvp[0].tv_sec == -1)
d221 1
a221 1
	tvp[0].tv_usec = tvp[1].tv_usec = 0;
d225 1
a225 1
stime_arg2(char *arg, int year, struct timeval *tvp)
d230 1
a230 1
	tmptime = tvp[0].tv_sec;
d254 2
a255 2
	tvp[0].tv_sec = tvp[1].tv_sec = mktime(lt);
	if (tvp[0].tv_sec == -1)
d259 1
a259 1
	tvp[0].tv_usec = tvp[1].tv_usec = 0;
d263 1
a263 1
stime_file(char *fname, struct timeval *tvp)
d269 49
a317 2
	TIMESPEC_TO_TIMEVAL(tvp, &sb.st_atimespec);
	TIMESPEC_TO_TIMEVAL(tvp + 1, &sb.st_mtimespec);
a322 2
	extern char	*__progname;

d324 2
a325 2
	    "usage: %s [-acm] [-r file] [-t [[CC]YY]MMDDhhmm[.SS]] file ...\n",
	    __progname);
@


1.16
log
@Fix typo introduced in seconds parsing.  From Tim van der Molen.
@
text
@d1 1
a1 1
/*	$OpenBSD: touch.c,v 1.15 2007/05/25 13:56:59 millert Exp $	*/
d299 2
a300 1
	    "usage: %s [-acm] [-r file] [-t time] file ...\n", __progname);
@


1.15
log
@Sanity check time spec and if no century is specified, just use the
current one.
@
text
@d1 1
a1 1
/*	$OpenBSD: touch.c,v 1.14 2006/03/08 12:20:05 henning Exp $	*/
d184 1
a184 1
		if (*p == '.' && dot != NULL)
@


1.14
log
@even betterer
From: Przemyslaw Nowaczyk <p_nowaczyk@@o2.pl>
@
text
@d1 1
a1 1
/*	$OpenBSD: touch.c,v 1.13 2006/03/07 11:49:40 henning Exp $	*/
d37 1
d174 1
a174 1
	struct tm	*t;
d177 1
a177 1
	char		*p;
d180 1
a180 1
	if ((t = localtime(&tmptime)) == NULL)
d183 8
a190 2
	if ((p = strchr(arg, '.')) == NULL)
		t->tm_sec = 0;		/* Seconds defaults to 0. */
d192 5
a196 1
		if (strlen(p + 1) != 2)
a197 2
		*p++ = '\0';
		t->tm_sec = ATOI2(p);
d203 1
a203 1
		t->tm_year = ATOI2(arg) * 100 - TM_YEAR_BASE;
d209 1
a209 1
			t->tm_year += yearset;
d212 2
a213 4
			if (yearset < 69)
				t->tm_year = yearset + 2000 - TM_YEAR_BASE;
			else
				t->tm_year = yearset + 1900 - TM_YEAR_BASE;
d217 13
a229 5
		t->tm_mon = ATOI2(arg);
		--t->tm_mon;		/* Convert from 01-12 to 00-11 */
		t->tm_mday = ATOI2(arg);
		t->tm_hour = ATOI2(arg);
		t->tm_min = ATOI2(arg);
d235 2
a236 2
	t->tm_isdst = -1;		/* Figure out DST. */
	tvp[0].tv_sec = tvp[1].tv_sec = mktime(t);
d247 1
a247 1
	struct tm	*t;
d251 1
a251 1
	if ((t = localtime(&tmptime)) == NULL)
d254 13
a266 5
	t->tm_mon = ATOI2(arg);		/* MMDDhhmm[YY] */
	--t->tm_mon;			/* Convert from 01-12 to 00-11 */
	t->tm_mday = ATOI2(arg);
	t->tm_hour = ATOI2(arg);
	t->tm_min = ATOI2(arg);
d268 2
a269 5
		year = ATOI2(arg);
		if (year < 69)
			t->tm_year = year + 2000 - TM_YEAR_BASE;
		else
			t->tm_year = year + 1900 - TM_YEAR_BASE;
d271 1
a271 1
	t->tm_sec = 0;
d273 2
a274 2
	t->tm_isdst = -1;		/* Figure out DST. */
	tvp[0].tv_sec = tvp[1].tv_sec = mktime(t);
d276 1
a276 1
		errx(1,
@


1.13
log
@KNF & cleanup
mostly From: Przemyslaw Nowaczyk <p_nowaczyk@@o2.pl>
@
text
@d1 1
a1 1
/*	$OpenBSD: touch.c,v 1.12 2005/04/20 19:16:34 deraadt Exp $	*/
d56 4
a59 4
	struct	 stat sb;
	struct	 timeval tv[2];
	int	 aflag, cflag, mflag, ch, fd, len, rval, timeset;
	char	*p;
@


1.12
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: touch.c,v 1.11 2005/04/20 19:13:53 otto Exp $	*/
a32 13
#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)touch.c	8.2 (Berkeley) 4/28/95";
#endif
static char rcsid[] = "$OpenBSD: touch.c,v 1.11 2005/04/20 19:13:53 otto Exp $";
#endif /* not lint */

d48 4
a51 4
void	stime_arg1(char *, struct timeval *);
void	stime_arg2(char *, int, struct timeval *);
void	stime_file(char *, struct timeval *);
void	usage(void);
d56 4
a59 4
	struct stat sb;
	struct timeval tv[2];
	int aflag, cflag, mflag, ch, fd, len, rval, timeset;
	char *p;
d61 1
a61 1
	setlocale(LC_ALL, "");
d173 4
a176 4
	struct tm *t;
	time_t tmptime;
	int yearset;
	char *p;
d232 2
a233 2
	struct tm *t;
	time_t tmptime;
d265 1
a265 1
	struct stat sb;
d276 2
d279 1
a279 1
	    "usage: touch [-acm] [-r file] [-t time] file ...\n");
@


1.11
log
@Remove redundant rw() function, which is unsafe and, well, redundant.
ok tedu@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: touch.c,v 1.10 2003/06/10 22:20:53 deraadt Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: touch.c,v 1.10 2003/06/10 22:20:53 deraadt Exp $";
d81 1
a81 1
		switch(ch) {
d203 1
a203 1
		
d205 1
a205 1
	switch(strlen(arg)) {
@


1.10
log
@mostly ansi cleanup; pval ok
@
text
@d1 1
a1 1
/*	$OpenBSD: touch.c,v 1.9 2003/06/03 02:56:20 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: touch.c,v 1.9 2003/06/03 02:56:20 millert Exp $";
a60 1
int	rw(char *, struct stat *, int);
d71 1
a71 1
	int aflag, cflag, fflag, mflag, ch, fd, len, rval, timeset;
d76 1
a76 1
	aflag = cflag = fflag = mflag = timeset = 0;
a88 1
			fflag = 1;
a100 1
		case '?':
d175 2
a176 3
		/* Try reading/writing. */
		if (rw(*argv, &sb, fflag))
			rval = 1;
a285 49
int
rw(char *fname, struct stat *sbp, int force)
{
	int fd, needed_chmod, rval;
	u_char byte;

	/* Try regular files and directories. */
	if (!S_ISREG(sbp->st_mode) && !S_ISDIR(sbp->st_mode)) {
		warnx("%s: %s", fname, strerror(EFTYPE));
		return (1);
	}

	needed_chmod = rval = 0;
	if ((fd = open(fname, O_RDWR, 0)) == -1) {
		if (!force || chmod(fname, DEFFILEMODE))
			goto err;
		if ((fd = open(fname, O_RDWR, 0)) == -1)
			goto err;
		needed_chmod = 1;
	}

	if (sbp->st_size != 0) {
		if (read(fd, &byte, sizeof(byte)) != sizeof(byte))
			goto err;
		if (lseek(fd, (off_t)0, SEEK_SET) == -1)
			goto err;
		if (write(fd, &byte, sizeof(byte)) != sizeof(byte))
			goto err;
	} else {
		if (write(fd, &byte, sizeof(byte)) != sizeof(byte)) {
err:			rval = 1;
			warn("%s", fname);
		} else if (ftruncate(fd, (off_t)0)) {
			rval = 1;
			warn("%s: file modified", fname);
		}
	}

	if (close(fd) && rval != 1) {
		rval = 1;
		warn("%s", fname);
	}
	if (needed_chmod && chmod(fname, sbp->st_mode) && rval != 1) {
		rval = 1;
		warn("%s: permissions modified", fname);
	}
	return (rval);
}

d290 1
a290 1
	    "usage: touch [-acfm] [-r file] [-t time] file ...\n");
@


1.9
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: touch.c,v 1.8 2003/01/10 11:42:00 henning Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: touch.c,v 1.8 2003/01/10 11:42:00 henning Exp $";
d68 1
a68 3
main(argc, argv)
	int argc;
	char *argv[];
d188 1
a188 3
stime_arg1(arg, tvp)
	char *arg;
	struct timeval *tvp;
d247 1
a247 4
stime_arg2(arg, year, tvp)
	char *arg;
	int year;
	struct timeval *tvp;
d280 1
a280 3
stime_file(fname, tvp)
	char *fname;
	struct timeval *tvp;
d291 1
a291 4
rw(fname, sbp, force)
	char *fname;
	struct stat *sbp;
	int force;
d340 1
a340 1
usage()
@


1.8
log
@typo in comment; Jim Geovedi
@
text
@d1 1
a1 1
/*	$OpenBSD: touch.c,v 1.7 2002/02/16 21:27:55 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d43 1
a43 1
static char rcsid[] = "$OpenBSD: touch.c,v 1.7 2002/02/16 21:27:55 millert Exp $";
@


1.7
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: touch.c,v 1.6 2000/10/13 13:54:59 pjanzen Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: touch.c,v 1.6 2000/10/13 13:54:59 pjanzen Exp $";
d221 1
a221 1
		/* FALLTHOUGH */
@


1.6
log
@Missed one TM_YEAR_BASE in previous commit; pointed out by peters@@telia.net
in PR 1445.
@
text
@d1 1
a1 1
/*	$OpenBSD: touch.c,v 1.5 2000/09/20 22:25:26 pjanzen Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: touch.c,v 1.5 2000/09/20 22:25:26 pjanzen Exp $";
d65 5
a69 5
int	rw __P((char *, struct stat *, int));
void	stime_arg1 __P((char *, struct timeval *));
void	stime_arg2 __P((char *, int, struct timeval *));
void	stime_file __P((char *, struct timeval *));
void	usage __P((void));
@


1.5
log
@use TM_YEAR_BASE and set seconds to zero in obsolescent "compatibility" case;
from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: touch.c,v 1.4 2000/09/20 13:26:55 pjanzen Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: touch.c,v 1.4 2000/09/20 13:26:55 pjanzen Exp $";
d191 1
a191 1
#define	ATOI2(ar)	((ar)[0] - '0') * 10 + ((ar)[1] - '0'); (ar) += 2;
d219 1
a219 2
		t->tm_year = ATOI2(arg);
		t->tm_year *= 100;
@


1.4
log
@Y2K fix for obsolescent time format:  found by Camiel Dobbelaar.
@
text
@d1 1
a1 1
/*	$OpenBSD: touch.c,v 1.3 1997/01/15 23:43:22 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: touch.c,v 1.3 1997/01/15 23:43:22 millert Exp $";
d62 1
d230 1
a230 1
				t->tm_year = yearset + 2000;
d232 1
a232 1
				t->tm_year = yearset + 1900;
a233 1
		t->tm_year -= 1900;	/* Convert to UNIX time. */
d274 5
a278 3
		t->tm_year = ATOI2(arg);
		if (t->tm_year < 69)
			t->tm_year += 100;
d280 1
@


1.3
log
@getopt(3) returns -1 when out of args, not EOF, whee!
@
text
@d1 1
a1 1
/*	$OpenBSD: touch.c,v 1.2 1996/06/26 05:41:45 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: touch.c,v 1.2 1996/06/26 05:41:45 deraadt Exp $";
d141 1
a141 1
		if (stat(*argv, &sb))
d157 1
d268 1
a268 1
	t->tm_mon = ATOI2(arg);		/* MMDDhhmm[yy] */
d273 1
a273 1
	if (year)
d275 3
d283 1
a283 1
	"out of range or illegal time specification: MMDDhhmm[yy]");
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: touch.c,v 1.11 1995/08/31 22:10:06 jtc Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: touch.c,v 1.11 1995/08/31 22:10:06 jtc Exp $";
d86 1
a86 1
	while ((ch = getopt(argc, argv, "acfmr:t:")) != EOF)
@


1.1
log
@Initial revision
@
text
@d1 1
d47 1
a47 1
static char rcsid[] = "$NetBSD: touch.c,v 1.11 1995/08/31 22:10:06 jtc Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
