head	1.12;
access;
symbols
	OPENBSD_6_2:1.12.0.6
	OPENBSD_6_2_BASE:1.12
	OPENBSD_6_1:1.12.0.8
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.4
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.11.0.8
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.4
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.8.0.10
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.6
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.4
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.2
	OPENBSD_5_2_BASE:1.8;
locks; strict;
comment	@# @;


1.12
date	2015.09.21.08.49.06;	author ajacoutot;	state Exp;
branches;
next	1.11;
commitid	zDE9nB2bikY6RPKh;

1.11
date	2014.04.16.14.39.05;	author zhuk;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.16.10.31.27;	author zhuk;	state Exp;
branches;
next	1.9;

1.9
date	2014.03.19.02.16.22;	author afresh1;	state Exp;
branches;
next	1.8;

1.8
date	2012.07.13.11.56.12;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2012.07.13.08.44.20;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2012.07.10.17.05.34;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2012.07.06.22.18.11;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2012.07.06.11.30.41;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2012.07.04.12.39.34;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2012.06.19.18.56.07;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2012.06.19.09.30.44;	author espie;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Fix a couple of libtool issues:

* when looking for a library, also look for an unversioned solib before falling
  back to using the static one (which may not even exist)

* when a library has no libtool file (.la) with a proper dependency_libs entry,
  libtool(1) falls back to using objdump to determine the depencencies;
  however this works only if dependencies are in standard search paths; fix it
  by looking at the RPATH entry in objdump then add non standard dirs to
  search_dirs and -rpath

inputs from and ok espie@@, ok jasper@@
@
text
@# $OpenBSD: Library.pm,v 1.11 2014/04/16 14:39:05 zhuk Exp $

# Copyright (c) 2007-2010 Steven Mestdagh <steven@@openbsd.org>
# Copyright (c) 2012 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;
use feature qw(say switch state);

package LT::Library::Stash;

sub new
{
	my $class = shift;

	bless {}, $class;
}

sub create
{
	my ($self, $key) = @@_;
	if (!exists $self->{$key}) {
		$self->{$key} = LT::Library->new($key);
	}
	return $self->{$key};
}

package LT::Library;

use LT::Util;
use LT::Trace;

# find actual library filename
# XXX pick the right one if multiple are found!
sub resolve_library
{
	my ($self, $dirs, $shared, $staticflag, $linkmode, $gp) = @@_;

	my $libtofind = $self->{key};
	my $libfile = 0;
	my @@globbedlib;

	my $pic = '';	# used when finding static libraries
	if ($linkmode eq 'LT::LaFile') {
		$pic = '_pic';
	}

	if (defined $self->{lafile}) {
		require LT::LaFile;
		# if there is a .la file, use the info from there
		tsay {"found .la file $self->{lafile} for library key: ",
		    $self->{key}};
		my $lainfo = LT::LaFile->parse($self->{lafile});
		my $dlname = $lainfo->{dlname};
		my $oldlib = $lainfo->{old_library};
		my $libdir = $lainfo->{libdir};
		my $installed = $lainfo->{installed};
		my $d = abs_dir($self->{lafile});
		# get the name we need (this may include a -release)
		if (!$dlname && !$oldlib) {
			die "Link error: neither static nor shared library found in $self->{lafile}\n";
		}
		if ($d !~ m/\Q$ltdir\E$/ && $installed eq 'no') {
			$d .= "/$ltdir";
		}
		if ($shared) {
			if ($dlname) {
				$libfile = "$d/$dlname";
			} else {
				# fall back to static
				$libfile = "$d/$oldlib";
			}
			# if -static has been passed, don't link dynamically
			# against not-installed libraries
			if ($staticflag && $installed eq 'no') {
				$libfile = "$d/$oldlib";
			}
		} else {
			$libfile = "$d/$oldlib";
		}
		if (! -f $libfile) {
			tsay {".la file ", $self->{lafile},
			    "points to nonexistent file ", $libfile, " !"};
		}
	} else {
		# search in .libs when priority is high
		push @@$dirs, $gp->libsearchdirs if $gp;
		tsay {"searching for $libtofind"};
		tsay {"search path= ", join(':', @@$dirs)};
		tsay {"search type= ", $shared ? 'shared' : 'static'};
		foreach my $sd (@@$dirs) {
			if ($shared) {
				# select correct library by sorting by version number only
				my $bestlib = $self->findbest($sd, $libtofind);
				if ($bestlib) {
					tsay {"found $libtofind in $sd"};
					$libfile = $bestlib;
					last;
				} else {
					# XXX find static library instead?
					my $spath = "$sd/lib$libtofind$pic.a";
					if (-f $spath) {
						tsay {"found static $libtofind in $sd"};
						$libfile = $spath;
						last;
					}
				}
			} else {
				# look for a static library
				my $spath = "$sd/lib$libtofind.a";
				if (-f $spath) {
					tsay {"found static $libtofind in $sd"};
					$libfile = $spath;
					last;
				}
			}
		}
	}
	if (!$libfile) {
		delete $self->{fullpath};
		if ($linkmode eq 'LT::LaFile') {
			say "warning: dependency on $libtofind dropped";
			$self->{dropped} = 1;
		} elsif ($linkmode eq 'LT::Program') {
			die "Link error: $libtofind not found!\n";
		}
	} else {
		$self->{fullpath} = $libfile;
		tsay {"\$libs->{$self->{key}}->{fullpath} = ",
		    $self->{fullpath}};
	}
}

sub findbest
{
	my ($self, $sd, $name) = @@_;
	my $best = undef;
	if (opendir(my $dir, $sd)) {
		my ($major, $minor) = (-1, -1);
		while (my $e = readdir($dir)) {
			next unless $e =~ m/^lib\Q$name\E\.so\.(\d+)\.(\d+)$/;
			if ($1 > $major || ($1 == $major && $2 > $minor)) {
				($major, $minor) = ($1, $2);
				$best = "$sd/$e";
			}
		}
		closedir($dir);
	}
	if (!defined $best) {
		my $cand = "$sd/lib$name.so";
		if (-e $cand) {
			$best = $cand;
		}
	}
	return $best;
}

# give a list of library dependencies found in the actual shared library
sub inspect
{
	my $self = shift;

	my $filename = $self->{fullpath};
	my @@deps;

	if (!defined($filename)){
		say "warning: library was specified that could not be found: $self->{key}";
		return;
	}
	tsay {"inspecting $filename for library dependencies..."};
	open(my $fh, '-|', "objdump", "-p", "--", $filename);
	while (<$fh>) {
		if (m/\s+NEEDED\s+(\S+)\s*$/) {
			push @@deps, $1;
		}
	}
	tsay {"found ", (@@deps == 0) ? 'no ' : '',
		"deps for $filename\n@@deps"};
	return @@deps;
}

# give the list of RPATH directories
sub findrpaths
{
	my $self = shift;

	my $filename = $self->{fullpath};
	my @@dirs;

	if (!defined($filename)){
		say "warning: library was specified that could not be found: $self->{key}";
		return;
	}
	tsay {"inspecting $filename for non standard RPATH..."};
	open(my $fh, '-|', "objdump", "-p", "--", $filename);
	while (<$fh>) {
		if (m/RPATH\s+(.*)$/) {
			@@dirs = split(":", $1);
			last;
		}
	}
	tsay {"found ", (@@dirs == 0) ? 'none ' : '',
		"RPATH for $filename\n@@dirs"};
	return @@dirs;
}

sub new
{
	my ($class, $key) = @@_;
	bless { key => $key }, $class;
}

1;
@


1.11
log
@Whitespace tweaks before further tweaks; no objections from ajacoutot@@.
@
text
@d1 1
a1 1
# $OpenBSD: Library.pm,v 1.10 2014/04/16 10:31:27 zhuk Exp $
d161 6
d192 25
@


1.10
log
@Make directory ordering in our libtool stable. Fixes quiet a few issues
ajacoutot@@, me and probably others were seeing. No fallout in bulk build.

Input from espie@@ and ajacoutot@@.
Prodding by ajacoutot@@
Bulk test by jasper@@
@
text
@d1 1
a1 1
# $OpenBSD: Library.pm,v 1.9 2014/03/19 02:16:22 afresh1 Exp $
d70 1
a70 1
 		my $d = abs_dir($self->{lafile});
d94 1
a94 1
			tsay {".la file ", $self->{lafile}, 
d104 1
a104 1
		       if ($shared) {
d111 1
a111 1
				} else {	
d120 1
a120 1
		       } else {
d128 1
a128 1
		       }
d141 1
a141 1
		tsay {"\$libs->{$self->{key}}->{fullpath} = ", 
@


1.9
log
@Remove lexical $_ from libtool in preparation for perl 5.18

OK and additional changes from espie@@
@
text
@d1 1
a1 1
# $OpenBSD: Library.pm,v 1.8 2012/07/13 11:56:12 espie Exp $
a97 4
		# otherwise, search the filesystem
		# sort dir search order by priority
		# XXX not fully correct yet
		my @@sdirs = sort { $dirs->{$b} <=> $dirs->{$a} } keys %$dirs;
d99 1
a99 2
		map { $_ = "$_/$ltdir" if (exists $dirs->{$_} && $dirs->{$_} > 3) } @@sdirs;
		push @@sdirs, $gp->libsearchdirs if $gp;
d101 1
a101 1
		tsay {"search path= ", join(':', @@sdirs)};
d103 1
a103 1
		foreach my $sd (@@sdirs) {
@


1.8
log
@move stuff around some more, do not load link parts unless we are actually
linking.

(and always load basic linker class when we're actually linking)


Start making a proper "library stash class".
@
text
@d1 1
a1 1
# $OpenBSD: Library.pm,v 1.7 2012/07/13 08:44:20 espie Exp $
d157 2
a158 2
		while (my $_ = readdir($dir)) {
			next unless m/^lib\Q$name\E\.so\.(\d+)\.(\d+)$/;
d161 1
a161 1
				$best = "$sd/$_";
@


1.7
log
@fix shared library lookup...
@
text
@d1 1
a1 1
# $OpenBSD: Library.pm,v 1.6 2012/07/10 17:05:34 espie Exp $
d21 18
@


1.6
log
@unconfuse myself.
having two methods that do completely different things with the same name (!)
is evil...
@
text
@d1 1
a1 1
# $OpenBSD: Library.pm,v 1.5 2012/07/06 22:18:11 espie Exp $
d48 4
a51 4
		my $dlname = $lainfo->{'dlname'};
		my $oldlib = $lainfo->{'old_library'};
		my $libdir = $lainfo->{'libdir'};
		my $installed = $lainfo->{'installed'};
d91 19
a109 11
		   if ($shared) {
			# select correct library by sorting by version number only
			@@globbedlib = sort { my ($x,$y) =
			map { /\.so\.(\d+\.\d+)$/; $1 } ($a,$b); $y <=> $x }
			glob "$sd/lib$libtofind.so.*.*";
			if ($globbedlib[0]) {
				tsay {"found $libtofind in $sd"};
				$libfile = $globbedlib[0];
				last;
			} else {	# XXX find static library instead?
				my $spath = "$sd/lib$libtofind$pic.a";
d115 1
a115 10
			}
		   } else {
			# look for a static library
			my $spath = "$sd/lib$libtofind.a";
			if (-f $spath) {
				tsay {"found static $libtofind in $sd"};
				$libfile = $spath;
				last;
			}
		   }
d119 1
a119 1
		if (defined $self->{fullpath}) { delete $self->{fullpath}; }
d131 18
@


1.5
log
@restore horrible hack to where it was
@
text
@d1 1
a1 1
# $OpenBSD: Library.pm,v 1.4 2012/07/06 11:30:41 espie Exp $
d29 1
a29 1
sub find
d31 1
a31 1
	my ($self, $dirs, $shared, $staticflag, $linkmode, $ldconfigdirs) = @@_;
d86 1
a86 1
		push @@sdirs, @@$ldconfigdirs if ($ldconfigdirs);
@


1.4
log
@add my copyright, since I'm going to do yet MORE changes...
@
text
@d1 1
a1 1
# $OpenBSD: Library.pm,v 1.3 2012/07/04 12:39:34 espie Exp $
d38 1
a38 1
	if ($linkmode eq 'LaFile') {
d121 1
a121 1
		if ($linkmode eq 'LaFile') {
d124 1
a124 1
		} elsif ($linkmode eq 'Program') {
@


1.3
log
@- start cleaning up options handling: put things into a separate package
that encapsulates accesses to Getopt::Long (which is badly suited for us
actually)
- simplify LT::Trace syntax
- implement --tag checks that mimic actual libtool
- add libtool comp support, as per libtool2
(but keep implicit modes as per libtool1)
- prevent shell code in nm execution

okay jasper@@, steven@@
@
text
@d1 1
a1 1
# $OpenBSD: Library.pm,v 1.2 2012/06/19 18:56:07 espie Exp $
d4 1
@


1.2
log
@avoid shell code errors
unneeded eval
okay jasper@@
@
text
@d1 1
a1 1
# $OpenBSD: Library.pm,v 1.1 2012/06/19 09:30:44 espie Exp $
d24 1
d44 2
a45 1
		LT::Trace::debug {"found .la file $self->{lafile} for library key: $self->{key}\n"};
d75 2
a76 1
			LT::Trace::debug {".la file $self->{lafile} points to nonexistent file $libfile !\n"};
d86 3
a88 3
		LT::Trace::debug {"searching for $libtofind\n"};
		LT::Trace::debug {"search path= ", join(':', @@sdirs), "\n"};
		LT::Trace::debug {"search type= ", ($shared) ? 'shared' : 'static', "\n"};
d96 1
a96 1
				LT::Trace::debug {"found $libtofind in $sd\n"};
d102 1
a102 1
					LT::Trace::debug {"found static $libtofind in $sd\n"};
d111 1
a111 1
				LT::Trace::debug {"found static $libtofind in $sd\n"};
d128 2
a129 1
		LT::Trace::debug {"\$libs->{$self->{key}}->{fullpath} = ", $self->{fullpath}, "\n"};
d145 1
a145 1
	LT::Trace::debug {"inspecting $filename for library dependencies...\n"};
d152 2
a153 2
	LT::Trace::debug {"found ", (@@deps == 0) ? 'no ' : '',
		"deps for $filename\n@@deps\n"};
@


1.1
log
@add libtool to base, okay deraadt@@, jasper@@, millert@@...
(as requested by matthieu@@ so we can work on xenocara).
@
text
@d1 1
a1 1
# $OpenBSD: Library.pm,v 1.2 2011/11/14 22:14:38 jasper Exp $
d142 1
a142 1
	open(my $fh, '-|', "objdump -p $filename");
@

