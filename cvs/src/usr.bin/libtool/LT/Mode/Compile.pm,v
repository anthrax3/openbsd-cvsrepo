head	1.13;
access;
symbols
	OPENBSD_6_1:1.13.0.14
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.10
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.6
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.8
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.2
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.4
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.12.0.10
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.6
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.4
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.2
	OPENBSD_5_2_BASE:1.12;
locks; strict;
comment	@# @;


1.13
date	2014.04.16.14.39.06;	author zhuk;	state Exp;
branches;
next	1.12;

1.12
date	2012.07.12.12.35.21;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2012.07.10.12.24.45;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2012.07.10.11.41.10;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2012.07.09.21.59.18;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2012.07.09.21.38.38;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2012.07.09.17.54.27;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2012.07.09.14.34.06;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2012.07.09.10.52.26;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2012.07.09.10.34.52;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2012.07.08.18.29.08;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2012.07.04.12.39.34;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2012.06.24.13.44.53;	author espie;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Whitespace tweaks before further tweaks; no objections from ajacoutot@@.
@
text
@# ex:ts=8 sw=4:
# $OpenBSD: Compile.pm,v 1.12 2012/07/12 12:35:21 espie Exp $
#
# Copyright (c) 2007-2010 Steven Mestdagh <steven@@openbsd.org>
# Copyright (c) 2012 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
use strict;
use warnings;

package LT::Mode::Compile;
our @@ISA = qw(LT::Mode);

use File::Basename;
use LT::LoFile;
use LT::Util;
use LT::Trace;

sub help
{
	print <<"EOH";

Usage: $0 --mode=compile COMPILE-COMMAND [opts] SOURCE
Compile source file into library object

  -o OUTPUT-FILE
EOH
}

my @@valid_src = qw(asm c cc cpp cxx f s);
sub run
{
	my ($class, $ltprog, $gp, $ltconfig) = @@_;
	my $lofile = LT::LoFile->new;

	my $pic = !$ltconfig->noshared;
	my $nonpic = 1;
	if ($gp->has_tag('disable-shared')) {
		$pic = 0;
	}
	if ($gp->has_tag('disable-static') && $pic) {
		$nonpic = 0;
	}

	my $pic_mode = 0;

	my @@pie_flags = ();

	$gp->handle_permuted_options('o:!@@',
		qr{\-Wc\,(.*)}, 
		    sub { 
			$gp->keep_for_later(split(/\,/, shift));
		    },
		'Xcompiler:', 
		    sub {
			$gp->keep_for_later($_[2]);
		    },
		'pie|fpie|fPIE',
		    sub {
			push(@@pie_flags, $_[3]);
		    },
		'no-suppress', # we just ignore that one
		'prefer-pic', sub { $pic_mode = 1; },
		'prefer-non-pic', sub { $pic_mode =  0; },
		'static', 
		    sub { 
			$pic = 0; 
			$nonpic = 1;
		    },
		'shared', 
		    sub {
			if (!$pic) {
				shortdie "bad configuration: can't build shared library";
			}
			$nonpic = 0;
		    });

	my ($outfile, $odir, $ofile, $srcfile, $srcext);
	# XXX check whether -c flag is present and if not, die?
	if ($gp->o) {
		if ($gp->o > 1) {
			shortdie "Can't specify -o more than once\n";
		}
		# fix extension if needed
		($outfile = ($gp->o)[0]) =~ s/\.o$/.lo/;
		$odir = dirname($outfile);
		$ofile = basename($outfile);
	} else {
		# XXX sometimes no -o flag is present and we need another way
		my $srcre = join '|', @@valid_src;
		my $found = 0;
		foreach my $a (@@main::ARGV) {
			if ($a =~ m/\.($srcre)$/i) {
				$srcfile = $a;
				$srcext = $1;
				$found = 1;
				last;
			}
		}
		$found or die "Cannot find source file in command\n";
		# the output file ends up in the current directory
		$odir = '.';
		($ofile = basename($srcfile)) =~ s/\.($srcext)$/.lo/i;
		$outfile = "$odir/$ofile";
	}
	tsay {"srcfile = $srcfile"} if $srcfile;
	tsay {"outfile = $outfile"};
	(my $nonpicobj = $ofile) =~ s/\.lo$/.o/;
	my $picobj = "$ltdir/$nonpicobj";

	$lofile->{picobj} = $picobj if $pic;
	$lofile->{nonpicobj} = $nonpicobj if $nonpic;
	$lofile->{picflags} = $ltconfig->picflags;
	if ($pic_mode) {
		$lofile->{nonpicflags} = $ltconfig->picflags;
	} else {
		$lofile->{nonpicflags} = \@@pie_flags;
	}
	$lofile->compile($ltprog, $odir, \@@ARGV);
	$lofile->write($outfile);
}

1;
@


1.12
log
@match what stupid gnu libtool is doing, namely -o is not a short option
@
text
@d2 1
a2 1
# $OpenBSD: Compile.pm,v 1.11 2012/07/10 12:24:45 espie Exp $
d70 1
a70 1
		    	push(@@pie_flags, $_[3]);
@


1.11
log
@clean-up shit, pull some of LT::Util into ltconfig object
make that a somewhat more "real" object...
@
text
@d2 1
a2 1
# $OpenBSD: Compile.pm,v 1.10 2012/07/10 11:41:10 espie Exp $
d59 1
a59 1
	$gp->handle_permuted_options('o:@@',
@


1.10
log
@full support for -static -shared -prefer-pic -prefer-non-pic -fpie*
in --mode=compile
@
text
@d2 1
a2 1
# $OpenBSD: Compile.pm,v 1.9 2012/07/09 21:59:18 espie Exp $
d43 1
a43 1
	my ($class, $ltprog, $gp, $noshared) = @@_;
d46 1
a46 1
	my $pic = !$noshared;
d123 1
a123 1
	$lofile->{picflags} = \@@main::picflags;
d125 1
a125 1
		$lofile->{nonpicflags} = \@@main::picflags;
@


1.9
log
@longarg:
means longoption with a separate parameter, like for -Xcompiler
(won't work as -Xcompiler=value)
@
text
@d2 1
a2 1
# $OpenBSD: Compile.pm,v 1.8 2012/07/09 21:38:38 espie Exp $
d46 13
d68 19
a86 11
		# recognize, don't do shit
		'no-suppress',
		'prefer-pic', 'prefer-non-pic', 'static', 'shared');
	# XXX options ignored: -prefer-pic and -prefer-non-pic
	my $pic = 0;
	my $nonpic = 1;
	# assume we need to build pic objects
	$pic = 1 if (!$noshared);
	$nonpic = 0 if ($pic && $gp->has_tag('disable-static'));
	$pic = 0 if ($nonpic && $gp->has_tag('disable-shared'));
	$nonpic = 1 if $gp->static;
d123 6
@


1.8
log
@extend option parser a bit more: if we pass it a regexp, then we match
that regexp.

for permuted mode, expose the "future" arguments so we can tinker with them
directly.

Use that to support -Wc,* and -Xcompiler
@
text
@d2 1
a2 1
# $OpenBSD: Compile.pm,v 1.7 2012/07/09 17:54:27 espie Exp $
d51 1
a51 1
		'Xcompiler', 
d53 1
a53 3
		    	die "-Xcompiler wants an argument" if @@main::ARGV == 0;
			my $arg = shift @@main::ARGV;
			$gp->keep_for_later($arg);
@


1.7
log
@use short accessor
@
text
@d2 1
a2 1
# $OpenBSD: Compile.pm,v 1.6 2012/07/09 14:34:06 espie Exp $
a45 1
	$DB::single = 1;
d47 13
a59 1
		'prefer-pic', 'prefer-non-pic', 'static');
@


1.6
log
@avoid duplicate -o
@
text
@d2 1
a2 1
# $OpenBSD: Compile.pm,v 1.5 2012/07/09 10:52:26 espie Exp $
d46 1
a58 3
	if($gp->{opt}{o} && @@{$gp->{opt}{o}} > 1) {
		shortdie "$0: compile: Can't specify '-o' more than once\n";
	}
d60 2
a61 2
	if ($gp->{opt}{o}) {
		if (@@{$gp->{opt}{o}} > 1) {
d65 1
a65 1
		($outfile = $gp->{opt}{o}[0]) =~ s/\.o$/.lo/;
@


1.5
log
@implement help-all
@
text
@d2 1
a2 1
# $OpenBSD: Compile.pm,v 1.4 2012/07/09 10:34:52 espie Exp $
d46 1
a46 1
	$gp->handle_permuted_options('o:',
d58 3
d63 3
d67 1
a67 1
		($outfile = $gp->{opt}{o}) =~ s/\.o$/.lo/;
d74 1
a74 1
		foreach my $a (@@ARGV) {
@


1.4
log
@framework for handling  help better
@
text
@d2 1
a2 1
# $OpenBSD: Compile.pm,v 1.3 2012/07/08 18:29:08 espie Exp $
d28 11
@


1.3
log
@first use of permuted options
@
text
@d2 1
a2 1
# $OpenBSD: Compile.pm,v 1.2 2012/07/04 12:39:34 espie Exp $
d22 1
@


1.2
log
@- start cleaning up options handling: put things into a separate package
that encapsulates accesses to Getopt::Long (which is badly suited for us
actually)
- simplify LT::Trace syntax
- implement --tag checks that mimic actual libtool
- add libtool comp support, as per libtool2
(but keep implicit modes as per libtool1)
- prevent shell code in nm execution

okay jasper@@, steven@@
@
text
@d2 1
a2 1
# $OpenBSD: Compile.pm,v 1.1 2012/06/24 13:44:53 espie Exp $
d20 1
a28 1
my %opts;
d34 2
a35 5
	$gp->getoptions('o=s'		=> \$opts{'o'},
			'prefer-pic'	=> \$opts{'prefer-pic'},
			'prefer-non-pic'=> \$opts{'prefer-non-pic'},
			'static'	=> \$opts{'static'},
			);
d43 1
a43 1
	$nonpic = 1 if ($opts{'static'});
d47 1
a47 1
	if ($opts{'o'}) {
d49 1
a49 1
		($outfile = $opts{'o'}) =~ s/\.o$/.lo/;
@


1.1
log
@clean-up the mess: move modes into separate files,
this makes dependencies more apparent.
This should also speed libtool up a bit, since it won't load all the code
all the time, but only the parts that are actually needed (to wit "compile
mode" which is much smaller).

okay jasper@@
@
text
@d2 1
a2 1
# $OpenBSD$
d25 1
d31 1
a31 1
	my ($class, $ltprog, $gp, $tags, $noshared) = @@_;
d44 2
a45 2
	$nonpic = 0 if ($pic && grep { $_ eq 'disable-static' } @@$tags);
	$pic = 0 if ($nonpic && grep { $_ eq 'disable-shared' } @@$tags);
d70 1
a70 1
		($ofile = basename $srcfile) =~ s/\.($srcext)$/.lo/i;
d73 2
a74 2
	LT::Trace::debug {"srcfile = $srcfile\n"} if $srcfile;
	LT::Trace::debug {"outfile = $outfile\n"};
@

