head	1.6;
access;
symbols
	OPENBSD_6_1:1.6.0.12
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.10
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.6
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.8
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.3.0.8
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.1.0.2
	OPENBSD_5_2_BASE:1.1;
locks; strict;
comment	@# @;


1.6
date	2014.04.20.17.34.26;	author zhuk;	state Exp;
branches;
next	1.5;

1.5
date	2014.04.16.14.39.06;	author zhuk;	state Exp;
branches;
next	1.4;

1.4
date	2014.04.16.10.31.27;	author zhuk;	state Exp;
branches;
next	1.3;

1.3
date	2012.11.09.10.55.01;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2012.08.27.11.02.46;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2012.07.13.11.56.13;	author espie;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Style improvement based on espie@@'s feedback: provide and use
LT::UList->new() instead of calling tie() manually. As a bonus, few
extra lines in actual code go away.

okay espie@@ who still thinks that I test things _before_ commit
@
text
@# $OpenBSD: Program.pm,v 1.5 2014/04/16 14:39:06 zhuk Exp $

# Copyright (c) 2007-2010 Steven Mestdagh <steven@@openbsd.org>
# Copyright (c) 2012 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;
use feature qw(say);

use LT::Program;

package LT::Program;

sub link
{
	return LT::Linker::Program->new->link(@@_);
}

package LT::Linker::Program;
our @@ISA = qw(LT::Linker);

use LT::Trace;
use LT::Util;
use File::Basename;

sub link
{
	my ($linker, $self, $ltprog, $ltconfig, $dirs, $libs, $deplibs, 
	    $libdirs, $parser, $gp) = @@_;

	tsay {"linking program (", ($gp->static ? "not " : ""),
	    "dynamically linking not-installed libtool libraries)"};

	my $fpath  = $self->{outfilepath};
	my $RPdirs = $self->{RPdirs};

	my $odir  = dirname($fpath);
	my $fname = basename($fpath);

	my @@libflags;
	my @@cmd;
	my $dst;

	my ($staticlibs, $finalorderedlibs, $args) =
	    $linker->common1($parser, $gp, $deplibs, $libdirs, $dirs, $libs);

	my $symlinkdir = $ltdir;
	if ($odir ne '.') {
		$symlinkdir = "$odir/$ltdir";
	}
	mkdir $symlinkdir if ! -d $symlinkdir;
	if ($parser->{seen_la_shared}) {
		$dst = ($odir eq '.') ? "$ltdir/$fname" : "$odir/$ltdir/$fname";
		$self->write_wrapper;
	} else {
		$dst = ($odir eq '.') ? $fname : "$odir/$fname";
	}

	my $rpath_link = LT::UList->new;
	# add libdirs to rpath if they are not in standard lib path
	for my $l (@@$libdirs) {
		if (LT::OSConfig->is_search_dir($l)) {
			push @@$rpath_link, $l;
		} else {
			push @@$RPdirs, $l;
		}
	}
	foreach my $k (keys %$libs) {
		tprint {"key = $k - "};
		my $r = ref($libs->{$k});
		tsay {"ref = $r"};
		$libs->create($k)->resolve_library($dirs, 1, $gp->static, 
		    ref($self));
	}

	my @@libobjects = values %$libs;
	tsay {"libs:\n", join("\n", keys %$libs)};
	tsay {"libfiles:\n", join("\n", map { $_->{fullpath} } @@libobjects)};

	$linker->create_symlinks($symlinkdir, $libs);
	foreach my $k (@@$finalorderedlibs) {
		my $a = $libs->{$k}->{fullpath} || die "Link error: $k not found in \$libs\n";
		if ($a =~ m/\.a$/) {
			# don't make a -lfoo out of a static library
			push @@libflags, $a;
		} else {
			push @@libflags, $linker->infer_libparameter($a, $k);
		}
	}

	my @@linkeropts = ();
	if (!$ltconfig->noshared) {
		for my $d (@@$RPdirs) {
			push(@@linkeropts, '-rpath', $d);
		}
		for my $d (@@$rpath_link) {
			push(@@linkeropts, '-rpath-link', $d);
		}
	}

	push(@@linkeropts, $linker->export_symbols($ltconfig, 
	    "$odir/$ltdir/$fname", $gp, @@{$self->{objlist}}, @@$staticlibs));

	@@cmd = @@$ltprog;
	push @@cmd, '-o', $dst;
	push @@cmd, '-pthread' if $parser->{pthread};
	push @@cmd, @@$args if $args;
	push @@cmd, @@{$self->{objlist}} if @@{$self->{objlist}};
	push @@cmd, @@$staticlibs if @@$staticlibs;
	push @@cmd, "-L$symlinkdir", @@libflags if @@libflags;
	push @@cmd, join(',', '-Wl', @@linkeropts) if @@linkeropts;
	LT::Exec->link(@@cmd);
}
1;
@


1.5
log
@Whitespace tweaks before further tweaks; no objections from ajacoutot@@.
@
text
@d1 1
a1 1
# $OpenBSD: Program.pm,v 1.4 2014/04/16 10:31:27 zhuk Exp $
d71 1
a71 1
	tie(my @@rpath_link, 'LT::UList');
d75 1
a75 1
			push @@rpath_link, $l;
d108 1
a108 1
		for my $d (@@rpath_link) {
@


1.4
log
@Make directory ordering in our libtool stable. Fixes quiet a few issues
ajacoutot@@, me and probably others were seeing. No fallout in bulk build.

Input from espie@@ and ajacoutot@@.
Prodding by ajacoutot@@
Bulk test by jasper@@
@
text
@d1 1
a1 1
# $OpenBSD: Program.pm,v 1.3 2012/11/09 10:55:01 espie Exp $
d44 1
a44 1
	      	"dynamically linking not-installed libtool libraries)"};
@


1.3
log
@*really* filter symbols on elf systems: introduce a new "export_symbols"
method that does all the work to produce the right options (one option,
so that the *.ver file contains all useful information).

Have to cater to regexp: in particular, make sure to nm on every object
and static library we might need, so we don't lose anything.

Allow for the result to be empty (since some projects use -export-symbols-regex
everywhere, *including on binaries with empty symbol lists*)

should now be clean portswise.

As usual, a non working option means lots of weird fuck-ups to fix first...

thx to millert@@ for the hint, aja,jasper,landry for comments and testing.
@
text
@d1 1
a1 1
# $OpenBSD: Program.pm,v 1.2 2012/08/27 11:02:46 espie Exp $
d71 1
a71 2
	$libdirs = reverse_zap_duplicates_ref($libdirs);
	my $rpath_link = {};
d75 1
a75 1
			$rpath_link->{$l} = 1;
a79 1
	$RPdirs = reverse_zap_duplicates_ref($RPdirs);
d108 1
a108 1
		for my $d (keys %$rpath_link) {
@


1.2
log
@a few libtool users are bogus, they confuse --export-symbols with the
real option -export-symbols.

Instead of blindly passing that one to the linker, error out beforehand,
so that people know the problem IS libtool usage and not our program.

(as exemplified by Todd Fries on ldns).
@
text
@d1 1
a1 1
# $OpenBSD: Program.pm,v 1.1 2012/07/13 11:56:13 espie Exp $
a70 7
	my $symbolsfile;
	if ($gp->export_symbols) {
		$symbolsfile = $gp->export_symbols;
	} elsif ($gp->export_symbols_regex) {
		($symbolsfile = "$odir/$ltdir/$fname") =~ s/\.la$/.exp/;
		LT::Archive->get_symbollist($symbolsfile, $gp->export_symbols_regex, $self->{objlist});
	}
d114 4
a117 3
	if ($symbolsfile) {
		push(@@linkeropts, '-retain-symbols-file', $symbolsfile);
	}
d125 1
a125 1
	push @@cmd, '-Wl,'. join(',', @@linkeropts) if @@linkeropts;
@


1.1
log
@move stuff around some more, do not load link parts unless we are actually
linking.

(and always load basic linker class when we're actually linking)


Start making a proper "library stash class".
@
text
@d1 1
a1 1
# $OpenBSD: Program.pm,v 1.18 2012/07/12 19:21:00 espie Exp $
d113 7
a119 5
	for my $d (@@$RPdirs) {
		push(@@linkeropts, '-rpath', $d);
	}
	for my $d (keys %$rpath_link) {
		push(@@linkeropts, '-rpath-link', $d);
@

