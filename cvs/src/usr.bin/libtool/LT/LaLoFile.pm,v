head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.12
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.10
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.6
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.8
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.3.0.10
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.6
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3;
locks; strict;
comment	@# @;


1.4
date	2014.03.19.02.16.22;	author afresh1;	state Exp;
branches;
next	1.3;

1.3
date	2012.07.06.11.30.41;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2012.07.04.12.39.34;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2012.06.19.09.30.44;	author espie;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Remove lexical $_ from libtool in preparation for perl 5.18

OK and additional changes from espie@@
@
text
@# $OpenBSD: LaLoFile.pm,v 1.3 2012/07/06 11:30:41 espie Exp $

# Copyright (c) 2007-2010 Steven Mestdagh <steven@@openbsd.org>
# Copyright (c) 2012 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;
use feature qw(say switch state);

package LT::LaLoFile;
use LT::Trace;

my %file_cache;		# which files have been parsed
my $cache_by_fullname = {};
my $cache_by_inode = {};

# allows special treatment for some keywords
sub set
{
	my ($self, $k, $v) = @@_;

	$self->{$k} = $v;
}

sub stringize
{
	my ($self, $k) = @@_;
	if (defined $self->{$k}) {
	       return $self->{$k};
	}
	return '';
}

sub read
{
	my ($class, $filename) = @@_;
	my $info = $class->new;
	open(my $fh, '<', $filename) or die "Cannot read $filename: $!\n";
	while (my $line = <$fh>) {
		chomp($line);
		next if $line =~ /^\#/;
		next if $line =~ /^\s*$/;
		if ($line =~ m/^(\S+)\=\'(.*)\'$/) {
			$info->set($1, $2);
		} elsif ($line =~ m/^(\S+)\=(\S+)$/) {
			$info->set($1, $2);
		}
	}
	return $info;
}

sub parse
{
	my ($class, $filename) = @@_;

	tprint {"parsing $filename"};

	if (defined $cache_by_fullname->{$filename}) {
		tsay {" (cached)"};
		return $cache_by_fullname->{$filename};
	}
	my $key = join("/", (stat $filename)[0,1]);
	if (defined $cache_by_inode->{$key}) {
		tsay {" (cached)"};
		return $cache_by_inode->{$key};
	}
	tsay {""};
	return $cache_by_inode->{$key} = $cache_by_fullname->{$filename} =
	    $class->read($filename);
}

sub new
{
	my $class = shift;
	bless {}, $class;
}

1;
@


1.3
log
@add my copyright, since I'm going to do yet MORE changes...
@
text
@d1 1
a1 1
# $OpenBSD: LaLoFile.pm,v 1.2 2012/07/04 12:39:34 espie Exp $
d51 5
a55 6
	my $_;
	while (<$fh>) {
		chomp;
		next if /^\#/;
		next if /^\s*$/;
		if (m/^(\S+)\=\'(.*)\'$/) {
d57 1
a57 1
		} elsif (m/^(\S+)\=(\S+)$/) {
@


1.2
log
@- start cleaning up options handling: put things into a separate package
that encapsulates accesses to Getopt::Long (which is badly suited for us
actually)
- simplify LT::Trace syntax
- implement --tag checks that mimic actual libtool
- add libtool comp support, as per libtool2
(but keep implicit modes as per libtool1)
- prevent shell code in nm execution

okay jasper@@, steven@@
@
text
@d1 1
a1 1
# $OpenBSD: LaLoFile.pm,v 1.1 2012/06/19 09:30:44 espie Exp $
d4 1
@


1.1
log
@add libtool to base, okay deraadt@@, jasper@@, millert@@...
(as requested by matthieu@@ so we can work on xenocara).
@
text
@d1 1
a1 1
# $OpenBSD$
d22 2
d68 1
a68 1
	LT::Trace::debug {"parsing $filename"};
d71 1
a71 1
		LT::Trace::debug {" (cached)\n"};
d76 1
a76 1
		LT::Trace::debug {" (cached)\n"};
d79 1
a79 1
	LT::Trace::debug {"\n"};
@

