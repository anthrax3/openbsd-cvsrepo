head	1.19;
access;
symbols
	OPENBSD_6_0:1.19.0.18
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.19.0.14
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.19.0.16
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.19.0.8
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.19.0.12
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.19.0.10
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.19.0.6
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.19.0.4
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.19.0.2
	OPENBSD_5_2_BASE:1.19;
locks; strict;
comment	@# @;


1.19
date	2012.07.13.11.56.12;	author espie;	state Exp;
branches;
next	1.18;

1.18
date	2012.07.12.19.21.00;	author espie;	state Exp;
branches;
next	1.17;

1.17
date	2012.07.12.11.43.46;	author espie;	state Exp;
branches;
next	1.16;

1.16
date	2012.07.12.09.48.11;	author espie;	state Exp;
branches;
next	1.15;

1.15
date	2012.07.12.09.43.34;	author espie;	state Exp;
branches;
next	1.14;

1.14
date	2012.07.11.09.34.05;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	2012.07.11.08.39.23;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2012.07.10.18.11.36;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2012.07.10.17.05.34;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2012.07.10.16.41.00;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2012.07.10.15.53.26;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2012.07.10.13.32.10;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2012.07.10.12.24.45;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2012.07.08.10.42.25;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2012.07.06.11.30.41;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2012.07.05.16.48.16;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2012.07.04.12.39.34;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2012.06.28.18.24.42;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2012.06.19.09.30.44;	author espie;	state Exp;
branches;
next	;


desc
@@


1.19
log
@move stuff around some more, do not load link parts unless we are actually
linking.

(and always load basic linker class when we're actually linking)


Start making a proper "library stash class".
@
text
@# $OpenBSD: Program.pm,v 1.18 2012/07/12 19:21:00 espie Exp $

# Copyright (c) 2007-2010 Steven Mestdagh <steven@@openbsd.org>
# Copyright (c) 2012 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;
use feature qw(say switch state);

package LT::Program;
use File::Basename;
use LT::Archive;
use LT::Util;
use LT::Trace;

sub new
{
	my $class = shift;
	bless {}, $class;
}

# write a wrapper script for an executable so it can be executed within
# the build directory
sub write_wrapper
{
	my $self = shift;

	my $program = $self->{outfilepath};
	my $pfile = basename($program);
	my $realprogram = $ltdir . '/' . $pfile;
	open(my $pw, '>', $program) or die "Cannot write $program: $!\n";
	print $pw <<EOF
#!/bin/sh

# $program - wrapper for $realprogram
# Generated by libtool $version

argdir=`dirname \$0`
if test -f "\$argdir/$realprogram"; then
    # Add our own library path to LD_LIBRARY_PATH
    LD_LIBRARY_PATH=\$argdir/$ltdir
    export LD_LIBRARY_PATH

    # Run the actual program with our arguments.
    exec "\$argdir/$realprogram" \${1+"\$\@@"}

    echo "\$0: cannot exec $program \${1+"\$\@@"}"
    exit 1
else
    echo "\$0: error: \\\`\$argdir/$realprogram' does not exist." 1>&2
    exit 1
fi
EOF
;
	close($pw);
	chmod 0755, $program;
}

sub install
{
	my ($class, $src, $dst, $instprog, $instopts) = @@_;

	my $srcdir = dirname $src;
	my $srcfile = basename $src;
	my $realpath = "$srcdir/$ltdir/$srcfile";
	LT::Exec->install(@@$instprog, @@$instopts, $realpath, $dst);
}

1;
@


1.18
log
@common code for deducing libraries.
Still fucks up order somehow...
@
text
@d1 1
a1 1
# $OpenBSD: Program.pm,v 1.17 2012/07/12 11:43:46 espie Exp $
a80 111
sub link
{
	require LT::Linker;
	return LT::Linker::Program->new->link(@@_);
}

package LT::Linker::Program;
our @@ISA = qw(LT::Linker);

use LT::Trace;
use LT::Util;
use File::Basename;

sub link
{
	my ($linker, $self, $ltprog, $ltconfig, $dirs, $libs, $deplibs, 
	    $libdirs, $parser, $gp) = @@_;

	tsay {"linking program (", ($gp->static ? "not " : ""),
	      	"dynamically linking not-installed libtool libraries)"};

	my $fpath  = $self->{outfilepath};
	my $RPdirs = $self->{RPdirs};

	my $odir  = dirname($fpath);
	my $fname = basename($fpath);

	my @@libflags;
	my @@cmd;
	my $dst;

	my ($staticlibs, $finalorderedlibs, $args) =
	    $linker->common1($parser, $gp, $deplibs, $libdirs, $dirs, $libs);

	my $symlinkdir = $ltdir;
	if ($odir ne '.') {
		$symlinkdir = "$odir/$ltdir";
	}
	mkdir $symlinkdir if ! -d $symlinkdir;
	if ($parser->{seen_la_shared}) {
		$dst = ($odir eq '.') ? "$ltdir/$fname" : "$odir/$ltdir/$fname";
		$self->write_wrapper;
	} else {
		$dst = ($odir eq '.') ? $fname : "$odir/$fname";
	}

	my $symbolsfile;
	if ($gp->export_symbols) {
		$symbolsfile = $gp->export_symbols;
	} elsif ($gp->export_symbols_regex) {
		($symbolsfile = "$odir/$ltdir/$fname") =~ s/\.la$/.exp/;
		LT::Archive->get_symbollist($symbolsfile, $gp->export_symbols_regex, $self->{objlist});
	}
	$libdirs = reverse_zap_duplicates_ref($libdirs);
	my $rpath_link = {};
	# add libdirs to rpath if they are not in standard lib path
	for my $l (@@$libdirs) {
		if (LT::OSConfig->is_search_dir($l)) {
			$rpath_link->{$l} = 1;
		} else {
			push @@$RPdirs, $l;
		}
	}
	$RPdirs = reverse_zap_duplicates_ref($RPdirs);
	foreach my $k (keys %$libs) {
		tprint {"key = $k - "};
		my $r = ref($libs->{$k});
		tsay {"ref = $r"};
		if (!defined $libs->{$k}) {
			tsay {"creating library object for $k"};
			require LT::Library;
			$libs->{$k} = LT::Library->new($k);
		}
		$libs->{$k}->resolve_library($dirs, 1, $gp->static, ref($self));
	}

	my @@libobjects = values %$libs;
	tsay {"libs:\n", join("\n", keys %$libs)};
	tsay {"libfiles:\n", join("\n", map { $_->{fullpath} } @@libobjects)};

	$linker->create_symlinks($symlinkdir, $libs);
	foreach my $k (@@$finalorderedlibs) {
		my $a = $libs->{$k}->{fullpath} || die "Link error: $k not found in \$libs\n";
		if ($a =~ m/\.a$/) {
			# don't make a -lfoo out of a static library
			push @@libflags, $a;
		} else {
			push @@libflags, $linker->infer_libparameter($a, $k);
		}
	}

	my @@linkeropts = ();
	for my $d (@@$RPdirs) {
		push(@@linkeropts, '-rpath', $d);
	}
	for my $d (keys %$rpath_link) {
		push(@@linkeropts, '-rpath-link', $d);
	}
	if ($symbolsfile) {
		push(@@linkeropts, '-retain-symbols-file', $symbolsfile);
	}
	@@cmd = @@$ltprog;
	push @@cmd, '-o', $dst;
	push @@cmd, '-pthread' if $parser->{pthread};
	push @@cmd, @@$args if $args;
	push @@cmd, @@{$self->{objlist}} if @@{$self->{objlist}};
	push @@cmd, @@$staticlibs if @@$staticlibs;
	push @@cmd, "-L$symlinkdir", @@libflags if @@libflags;
	push @@cmd, '-Wl,'. join(',', @@linkeropts) if @@linkeropts;
	LT::Exec->link(@@cmd);
}
@


1.17
log
@deal with -pthread as a "once on" option.
@
text
@d1 1
a1 1
# $OpenBSD: Program.pm,v 1.16 2012/07/12 09:48:11 espie Exp $
d168 1
a168 8
			my $lib = basename($a);
			if ($lib =~ m/^lib(.*)\.so(\.\d+){2}/) {
				$lib = $1;
			} else {
				say "warning: cannot derive -l flag from library filename $a, assuming hash key $k";
				$lib = $k;
			}
			push @@libflags, "-l$lib";
@


1.16
log
@unwanted duplicate
@
text
@d1 1
a1 1
# $OpenBSD: Program.pm,v 1.15 2012/07/12 09:43:34 espie Exp $
d191 2
a192 1
	push @@cmd, @@$args if ($args);
@


1.15
log
@simplify yet a bit more
@
text
@d1 1
a1 1
# $OpenBSD: Program.pm,v 1.14 2012/07/11 09:34:05 espie Exp $
a113 1
	$parser->resolve_la($deplibs, $libdirs);
@


1.14
log
@thinko
@
text
@d1 1
a1 1
# $OpenBSD: Program.pm,v 1.13 2012/07/11 08:39:23 espie Exp $
d112 3
a114 13
	tsay {"argvstring (pre resolve_la): @@{$parser->{args}}"};
	my $args = $parser->resolve_la($deplibs, $libdirs);
	tsay {"argvstring (post resolve_la): @@{$parser->{args}}"};
	my $orderedlibs = [];
	my $staticlibs = [];
	$parser->{args} = $args;
	$parser->{seen_la_shared} = 0;
	$args = $parser->parse_linkargs2($gp, $orderedlibs, $staticlibs, $dirs, 
	    $libs);
	tsay {"staticlibs = \n", join("\n", @@$staticlibs)};
	tsay {"orderedlibs = @@$orderedlibs"};
	my $finalorderedlibs = reverse_zap_duplicates_ref($orderedlibs);
	tsay {"final orderedlibs = @@$finalorderedlibs"};
@


1.13
log
@fix bug for real. Turns out some libraries (xcb...) have NEEDED that go
to standard ldconfig search dirs...

Of course, ld complains because it doesn't have them in its standard
search dir. BUT there's an option -rpath-link designed just for that
(look up needed objects during compile and trust the end result to
find them).

So use that for ldconfig directories... so that xcb can link without
needing to go have a look at the NEEDED list, but without encoding
standard rpaths in the resulting binary...

Also, put all the junk that needs -Wl together so we can add one single
-Wl,-rpath,foo,-rpath-link,foo2  thingy...
@
text
@d1 1
a1 1
# $OpenBSD: Program.pm,v 1.12 2012/07/10 18:11:36 espie Exp $
a199 1
	push(@@linkeropts, @@$RPdirs);
@


1.12
log
@quick fix ?
@
text
@d1 1
a1 1
# $OpenBSD: Program.pm,v 1.11 2012/07/10 17:05:34 espie Exp $
d146 1
d149 5
a153 1
		push @@$RPdirs, $l;
a155 1
	map { $_ = "-Wl,-rpath,$_" } @@$RPdirs;
d190 11
d207 1
a207 2
	push @@cmd, @@$RPdirs if @@$RPdirs;
	push @@cmd, "-Wl,-retain-symbols-file,$symbolsfile" if ($symbolsfile);
@


1.11
log
@unconfuse myself.
having two methods that do completely different things with the same name (!)
is evil...
@
text
@d1 1
a1 1
# $OpenBSD: Program.pm,v 1.10 2012/07/10 16:41:00 espie Exp $
d148 1
a148 5
		my $found = 0;
		for my $d ($gp->libsearchdirs) {
			if ($l eq $d) { $found = 1; last; }
		}
		if (!$found) { push @@$RPdirs, $l; }
d189 4
a192 4
	push @@cmd, @@{$self->{objlist}} if (@@{$self->{objlist}});
	push @@cmd, @@$staticlibs if (@@$staticlibs);
	push @@cmd, "-L$symlinkdir", @@libflags if (@@libflags);
	push @@cmd, @@$RPdirs if (@@$RPdirs);
@


1.10
log
@ouch, Rresolved and libsearchdirs no longer live in main, so make them
part of $gp as they should be...

Oh, and create an actual linker object for later.
@
text
@d1 1
a1 1
# $OpenBSD: Program.pm,v 1.9 2012/07/10 15:53:26 espie Exp $
a101 1
	my $what = ref($self);
d165 1
a165 2
		my $l = $libs->{$k};
		$l->find($dirs, 1, $gp->static, $what);
@


1.9
log
@move some shit around to (more or less) where it belongs
@
text
@d1 1
a1 1
# $OpenBSD: Program.pm,v 1.8 2012/07/10 13:32:10 espie Exp $
d84 1
a84 1
	return LT::Linker::Program->link(@@_);
d96 1
a96 1
	my ($class, $self, $ltprog, $ltconfig, $dirs, $libs, $deplibs, 
d120 1
a120 2
	$args = $parser->parse_linkargs2(\@@LT::Linker::Rresolved,
	    \@@LT::Linker::libsearchdirs, $orderedlibs, $staticlibs, $dirs, 
d150 1
a150 1
		for my $d (@@LT::Linker::libsearchdirs) {
d174 1
a174 1
	$class->create_symlinks($symlinkdir, $libs);
@


1.8
log
@bye-bye Getopt::Long
@
text
@d1 1
a1 1
# $OpenBSD: Program.pm,v 1.7 2012/07/10 12:24:45 espie Exp $
d120 3
a122 2
	$args = $parser->parse_linkargs2(\@@main::Rresolved,
		\@@main::libsearchdirs, $orderedlibs, $staticlibs, $dirs, $libs);
d151 1
a151 1
		for my $d (@@main::libsearchdirs) {
@


1.7
log
@clean-up shit, pull some of LT::Util into ltconfig object
make that a somewhat more "real" object...
@
text
@d1 1
a1 1
# $OpenBSD: Program.pm,v 1.6 2012/07/08 10:42:25 espie Exp $
d97 1
a97 1
	    $libdirs, $parser, $opts) = @@_;
d99 1
a99 1
	tsay {"linking program (", ($opts->{'static'}) ? "not " : "",
d140 3
a142 3
	if ($opts->{'export-symbols'}) {
		$symbolsfile = $opts->{'export-symbols'};
	} elsif ($opts->{'export-symbols-regex'}) {
d144 1
a144 1
		LT::Archive->get_symbollist($symbolsfile, $opts->{'export-symbols-regex'}, $self->{objlist});
d167 1
a167 1
		$l->find($dirs, 1, $opts->{'static'}, $what);
@


1.6
log
@a few big changes
- start using our options parser for main libtool options
- put link related stuff into their own module.
Long term, some unification should happen.
- shortdie for cases where we  know libtool is not at fault.
@
text
@d1 1
a1 1
# $OpenBSD: Program.pm,v 1.5 2012/07/06 11:30:41 espie Exp $
d96 2
a97 2
	my ($class, $self, $ltprog, $dirs, $libs, $deplibs, $libdirs, $parser,
	    $opts) = @@_;
@


1.5
log
@add my copyright, since I'm going to do yet MORE changes...
@
text
@d1 1
a1 1
# $OpenBSD: Program.pm,v 1.4 2012/07/05 16:48:16 espie Exp $
d41 1
a41 1
	my $pfile = basename $program;
d71 23
d96 1
a96 1
	my ($self, $ltprog, $dirs, $libs, $deplibs, $libdirs, $parser,
d106 2
a107 2
	my $odir  = dirname  $fpath;
	my $fname = basename $fpath;
d174 1
a174 1
	main::create_symlinks($symlinkdir, $libs);
d181 1
a181 1
			my $lib = basename $a;
a201 11

sub install
{
	my ($class, $src, $dst, $instprog, $instopts) = @@_;

	my $srcdir = dirname $src;
	my $srcfile = basename $src;
	my $realpath = "$srcdir/$ltdir/$srcfile";
	LT::Exec->install(@@$instprog, @@$instopts, $realpath, $dst);
}

@


1.4
log
@error and warning messages should be explicit, sigh...
@
text
@d1 1
a1 1
# $OpenBSD: Program.pm,v 1.3 2012/07/04 12:39:34 espie Exp $
d4 1
@


1.3
log
@- start cleaning up options handling: put things into a separate package
that encapsulates accesses to Getopt::Long (which is badly suited for us
actually)
- simplify LT::Trace syntax
- implement --tag checks that mimic actual libtool
- add libtool comp support, as per libtool2
(but keep implicit modes as per libtool1)
- prevent shell code in nm execution

okay jasper@@, steven@@
@
text
@d1 1
a1 1
# $OpenBSD: Program.pm,v 1.2 2012/06/28 18:24:42 espie Exp $
d161 1
a161 1
				say "warning: cannot derive -l flag from library filename, assuming hash key";
@


1.2
log
@a few minor cleanup and performance tweaks (is_wrapper doesn't need to
scan large binary files)
okay jasper@@
@
text
@d1 1
a1 1
# $OpenBSD: Program.pm,v 1.1 2012/06/19 09:30:44 espie Exp $
d25 1
d75 2
a76 2
	LT::Trace::debug {"linking program (", ($opts->{'static'}) ? "not " : "",
	      	"dynamically linking not-installed libtool libraries)\n"};
d89 1
a89 1
	LT::Trace::debug {"argvstring (pre resolve_la): @@{$parser->{args}}\n"};
d91 1
a91 1
	LT::Trace::debug {"argvstring (post resolve_la): @@{$parser->{args}}\n"};
d98 2
a99 2
	LT::Trace::debug {"staticlibs = \n", join("\n", @@$staticlibs), "\n"};
	LT::Trace::debug {"orderedlibs = @@$orderedlibs\n"};
d101 1
a101 1
	LT::Trace::debug {"final orderedlibs = @@$finalorderedlibs\n"};
d134 1
a134 1
		LT::Trace::debug {"key = $k - "};
d136 1
a136 1
		LT::Trace::debug {"ref = $r\n"};
d138 1
a138 1
			LT::Trace::debug {"creating library object for $k\n"};
d147 2
a148 2
	LT::Trace::debug {"libs:\n", join("\n", (keys %$libs)), "\n"};
	LT::Trace::debug {"libfiles:\n", join("\n", map { $_->{fullpath} } @@libobjects), "\n"};
@


1.1
log
@add libtool to base, okay deraadt@@, jasper@@, millert@@...
(as requested by matthieu@@ so we can work on xenocara).
@
text
@d1 1
a1 1
# $OpenBSD: Program.pm,v 1.2 2011/11/14 22:12:08 jasper Exp $
d109 1
a109 1
		$self->write_wrapper();
@

