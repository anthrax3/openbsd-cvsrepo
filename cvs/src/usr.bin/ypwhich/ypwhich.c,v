head	1.23;
access;
symbols
	OPENBSD_6_1:1.23.0.10
	OPENBSD_6_1_BASE:1.23
	OPENBSD_6_0:1.23.0.8
	OPENBSD_6_0_BASE:1.23
	OPENBSD_5_9:1.23.0.4
	OPENBSD_5_9_BASE:1.23
	OPENBSD_5_8:1.23.0.6
	OPENBSD_5_8_BASE:1.23
	OPENBSD_5_7:1.23.0.2
	OPENBSD_5_7_BASE:1.23
	OPENBSD_5_6:1.21.0.6
	OPENBSD_5_6_BASE:1.21
	OPENBSD_5_5:1.21.0.4
	OPENBSD_5_5_BASE:1.21
	OPENBSD_5_4:1.20.0.16
	OPENBSD_5_4_BASE:1.20
	OPENBSD_5_3:1.20.0.14
	OPENBSD_5_3_BASE:1.20
	OPENBSD_5_2:1.20.0.12
	OPENBSD_5_2_BASE:1.20
	OPENBSD_5_1_BASE:1.20
	OPENBSD_5_1:1.20.0.10
	OPENBSD_5_0:1.20.0.8
	OPENBSD_5_0_BASE:1.20
	OPENBSD_4_9:1.20.0.6
	OPENBSD_4_9_BASE:1.20
	OPENBSD_4_8:1.20.0.4
	OPENBSD_4_8_BASE:1.20
	OPENBSD_4_7:1.20.0.2
	OPENBSD_4_7_BASE:1.20
	OPENBSD_4_6:1.19.0.12
	OPENBSD_4_6_BASE:1.19
	OPENBSD_4_5:1.19.0.8
	OPENBSD_4_5_BASE:1.19
	OPENBSD_4_4:1.19.0.6
	OPENBSD_4_4_BASE:1.19
	OPENBSD_4_3:1.19.0.4
	OPENBSD_4_3_BASE:1.19
	OPENBSD_4_2:1.19.0.2
	OPENBSD_4_2_BASE:1.19
	OPENBSD_4_1:1.18.0.4
	OPENBSD_4_1_BASE:1.18
	OPENBSD_4_0:1.18.0.2
	OPENBSD_4_0_BASE:1.18
	OPENBSD_3_9:1.16.0.12
	OPENBSD_3_9_BASE:1.16
	OPENBSD_3_8:1.16.0.10
	OPENBSD_3_8_BASE:1.16
	OPENBSD_3_7:1.16.0.8
	OPENBSD_3_7_BASE:1.16
	OPENBSD_3_6:1.16.0.6
	OPENBSD_3_6_BASE:1.16
	OPENBSD_3_5:1.16.0.4
	OPENBSD_3_5_BASE:1.16
	OPENBSD_3_4:1.16.0.2
	OPENBSD_3_4_BASE:1.16
	OPENBSD_3_3:1.14.0.4
	OPENBSD_3_3_BASE:1.14
	OPENBSD_3_2:1.14.0.2
	OPENBSD_3_2_BASE:1.14
	OPENBSD_3_1:1.11.0.14
	OPENBSD_3_1_BASE:1.11
	OPENBSD_3_0:1.11.0.12
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_9:1.11.0.10
	OPENBSD_2_8:1.11.0.8
	OPENBSD_2_8_BASE:1.11
	OPENBSD_2_7:1.11.0.6
	OPENBSD_2_7_BASE:1.11
	OPENBSD_2_6:1.11.0.4
	OPENBSD_2_6_BASE:1.11
	OPENBSD_2_5:1.11.0.2
	OPENBSD_2_5_BASE:1.11
	OPENBSD_2_4:1.9.0.4
	OPENBSD_2_4_BASE:1.9
	OPENBSD_2_3:1.9.0.2
	OPENBSD_2_3_BASE:1.9
	OPENBSD_2_2:1.8.0.2
	OPENBSD_2_2_BASE:1.8
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.23
date	2015.02.08.23.40.35;	author deraadt;	state Exp;
branches;
next	1.22;
commitid	yGZX28AeTChVE8eY;

1.22
date	2015.01.16.06.40.15;	author deraadt;	state Exp;
branches;
next	1.21;
commitid	Uu5nFG3wCl0LACBb;

1.21
date	2013.11.15.22.20.04;	author millert;	state Exp;
branches;
next	1.20;

1.20
date	2009.10.27.23.59.50;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2007.04.02.15.34.39;	author jmc;	state Exp;
branches;
next	1.18;

1.18
date	2006.04.02.23.37.21;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2006.04.02.01.49.19;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2003.07.06.23.26.18;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2003.06.02.04.00.17;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2002.08.04.00.51.14;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2002.07.19.03.20.17;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2002.06.02.06.42.28;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	99.03.20.15.36.12;	author maja;	state Exp;
branches;
next	1.10;

1.10
date	99.03.19.22.21.27;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	98.01.18.20.13.08;	author maja;	state Exp;
branches;
next	1.8;

1.8
date	97.07.21.19.12.46;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	97.06.23.01.03.57;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	97.04.22.02.55.42;	author gene;	state Exp;
branches;
next	1.5;

1.5
date	97.04.22.01.49.16;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.06.05.23.56.00;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.05.21.21.32.44;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.04.24.21.39.56;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.47.08;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.47.08;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.23
log
@in getopt() blocks, stop incrementing flag variable which are supposed
to just be 0/1
ok miod florian
@
text
@/*	$OpenBSD: ypwhich.c,v 1.22 2015/01/16 06:40:15 deraadt Exp $	*/
/*	$NetBSD: ypwhich.c,v 1.6 1996/05/13 02:43:48 thorpej Exp $	*/

/*
 * Copyright (c) 1992, 1993 Theo de Raadt <deraadt@@theos.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/socket.h>

#include <netinet/in.h>
#include <arpa/inet.h>

#include <ctype.h>
#include <err.h>
#include <netdb.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include <rpc/rpc.h>
#include <rpc/xdr.h>
#include <rpcsvc/yp.h>
#include <rpcsvc/ypclnt.h>

#include "yplib_host.h"

struct ypalias {
	char *alias, *name;
} ypaliases[] = {
	{ "passwd", "passwd.byname" },
	{ "group", "group.byname" },
	{ "networks", "networks.byaddr" },
	{ "hosts", "hosts.byaddr" },
	{ "protocols", "protocols.bynumber" },
	{ "services", "services.byname" },
	{ "aliases", "mail.aliases" },
	{ "ethers", "ethers.byname" },
};

int	bind_host(char *dom, struct sockaddr_in *sin);

static void
usage(void)
{
	fprintf(stderr,
	    "usage: ypwhich [-t] [-d domain] [[-h] host]\n"
	    "       ypwhich [-t] [-d domain] [-h host] -m [mname]\n"
	    "       ypwhich -x\n");
	exit(1);
}


/*
 * Like yp_bind except can query a specific host
 */
int
bind_host(char *dom, struct sockaddr_in *sin)
{
	struct hostent *hent = NULL;
	struct ypbind_resp ypbr;
	struct in_addr ss_addr;
	struct timeval tv;
	CLIENT *client;
	int sock, r;

	sock = RPC_ANYSOCK;
	tv.tv_sec = 15;
	tv.tv_usec = 0;
	client = clntudp_create(sin, YPBINDPROG, YPBINDVERS, tv, &sock);

	if (client == NULL) {
		fprintf(stderr, "ypwhich: host is not bound to a ypmaster\n");
		return YPERR_YPBIND;
	}

	tv.tv_sec = 5;
	tv.tv_usec = 0;

	r = clnt_call(client, YPBINDPROC_DOMAIN,
	    xdr_domainname, &dom, xdr_ypbind_resp, &ypbr, tv);
	if (r != RPC_SUCCESS) {
		fprintf(stderr, "can't clnt_call: %s\n",
		    yperr_string(YPERR_YPBIND));
		clnt_destroy(client);
		return YPERR_YPBIND;
	} else {
		if (ypbr.ypbind_status != YPBIND_SUCC_VAL) {
			fprintf(stderr, "can't yp_bind: Reason: %s\n",
			    yperr_string(ypbr.ypbind_status));
			clnt_destroy(client);
			return r;
		}
	}
	clnt_destroy(client);

	memmove(&ss_addr.s_addr, &ypbr.ypbind_resp_u.ypbind_bindinfo.ypbind_binding_addr,
	    sizeof (ss_addr));

	hent = gethostbyaddr((char *)&ss_addr.s_addr, sizeof(ss_addr.s_addr),
	    AF_INET);
	if (hent != NULL)
		printf("%s\n", hent->h_name);
	else
		printf("%s\n", inet_ntoa(ss_addr));

	return 0;
}

int
main(int argc, char *argv[])
{
	char *domain, *master, *map = NULL, *host = NULL;
	int notrans = 0, mode = 0, c, r, i;
	struct ypmaplist *ypml, *y;
	struct sockaddr_in sin;
	struct hostent *hent;
	CLIENT *client = NULL;

	yp_get_default_domain(&domain);
	if (domain == NULL)
		errx(1, "YP domain name not set");

	while ((c = getopt(argc, argv, "xd:h:mt")) != -1)
		switch (c) {
		case 'x':
			for (i=0; i<sizeof ypaliases/sizeof ypaliases[0]; i++)
				printf("Use \"%s\" for \"%s\"\n",
				    ypaliases[i].alias, ypaliases[i].name);
			exit(0);
		case 'h':
			host = optarg;
			break;
		case 'd':
			domain = optarg;
			break;
		case 't':
			notrans = 1;
			break;
		case 'm':
			mode = 1;
			break;
		default:
			usage();
		}
	argc -= optind;
	argv += optind;

	if (mode == 0) {
		switch (argc) {
		case 0:
			memset(&sin, 0, sizeof sin);
			sin.sin_family = AF_INET;
			sin.sin_addr.s_addr = htonl(INADDR_LOOPBACK);

			if (bind_host(domain, &sin))
				exit(1);
			break;
		case 1:
			bzero(&sin, sizeof sin);
			sin.sin_family = AF_INET;
			if (inet_aton(argv[0], &sin.sin_addr) == 0) {
				hent = gethostbyname(argv[0]);
				if (!hent) {
					fprintf(stderr, "ypwhich: host %s unknown\n",
					    argv[0]);
					exit(1);
				}
				bcopy(hent->h_addr, &sin.sin_addr,
				    sizeof sin.sin_addr);
			}
			if (bind_host(domain, &sin))
				exit(1);
			break;
		default:
			usage();
		}
		exit(0);
	}

	if (argc > 1)
		usage();

	if (host != NULL)
		client = yp_bind_host(host, YPPROG, YPVERS, 0, 1);

	if (argv[0]) {
		map = argv[0];
		for (i=0; (!notrans) && i<sizeof ypaliases/sizeof ypaliases[0]; i++)
			if (strcmp(map, ypaliases[i].alias) == 0)
				map = ypaliases[i].name;

		if (host != NULL)
			r = yp_master_host(client, domain, map, &master);
		else
			r = yp_master(domain, map, &master);

		switch (r) {
		case 0:
			printf("%s\n", master);
			free(master);
			break;
		case YPERR_YPBIND:
			fprintf(stderr, "ypwhich: not running ypbind\n");
			exit(1);
		default:
			fprintf(stderr, "Can't find master for map %s. Reason: %s\n",
			    map, yperr_string(r));
			exit(1);
		}
		exit(0);
	}

	ypml = NULL;
	if (host != NULL)
		r = yp_maplist_host(client, domain, &ypml);
	else
		r = yp_maplist(domain, &ypml);

	r = 0;
	switch (r) {
	case 0:
		for (y = ypml; y; ) {
			ypml = y;
			if (host != NULL) {
				r = yp_master_host(client,
						   domain, ypml->map, &master);
			} else {
				r = yp_master(domain, ypml->map, &master);
			}
			switch (r) {
			case 0:
				printf("%s %s\n", ypml->map, master);
				free(master);
				break;
			default:
				fprintf(stderr,
				    "YP: can't find the master of %s: Reason: %s\n",
				    ypml->map, yperr_string(r));
				break;
			}
			y = ypml->next;
			free(ypml);
		}
		break;
	case YPERR_YPBIND:
		fprintf(stderr, "ypwhich: not running ypbind\n");
		exit(1);
	default:
		fprintf(stderr, "Can't get map list for domain %s. Reason: %s\n",
		    domain, yperr_string(r));
		exit(1);
	}
	exit(0);
}
@


1.22
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: ypwhich.c,v 1.21 2013/11/15 22:20:04 millert Exp $	*/
d161 1
a161 1
			notrans++;
d164 1
a164 1
			mode++;
@


1.21
log
@Include unistd.h as it is the standard location for getopt().
@
text
@d1 1
a1 1
/*	$OpenBSD: ypwhich.c,v 1.20 2009/10/27 23:59:50 deraadt Exp $	*/
a29 1
#include <sys/param.h>
@


1.20
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: ypwhich.c,v 1.19 2007/04/02 15:34:39 jmc Exp $	*/
a33 1
#include <sys/socket.h>
d37 3
d41 1
d43 1
a43 4
#include <stdlib.h>
#include <ctype.h>
#include <netdb.h>
#include <err.h>
@


1.19
log
@tidy up synopsis and usage();
includes bits of a diff from Igor Sobrado and some help from otto

ok otto
@
text
@d1 1
a1 1
/*	$OpenBSD: ypwhich.c,v 1.18 2006/04/02 23:37:21 deraadt Exp $	*/
a28 4

#ifndef lint
static char rcsid[] = "$Id: ypwhich.c,v 1.18 2006/04/02 23:37:21 deraadt Exp $";
#endif
@


1.18
log
@delete unused variable
@
text
@d1 1
a1 1
/*	$OpenBSD: ypwhich.c,v 1.17 2006/04/02 01:49:19 deraadt Exp $	*/
d31 1
a31 1
static char rcsid[] = "$Id: ypwhich.c,v 1.17 2006/04/02 01:49:19 deraadt Exp $";
d75 3
a77 2
	    "usage: ypwhich [-d domain] [[-h host] [-t] -m [mname] | host]\n");
	fprintf(stderr, "       ypwhich -x\n");
@


1.17
log
@#ifdef lint not LINT
@
text
@d1 1
a1 1
/*	$OpenBSD: ypwhich.c,v 1.16 2003/07/06 23:26:18 deraadt Exp $	*/
d31 1
a31 1
static char rcsid[] = "$Id: ypwhich.c,v 1.16 2003/07/06 23:26:18 deraadt Exp $";
d141 1
a141 1
	int notrans, mode, getmap, c, r, i;
a146 2
	getmap = notrans = mode = 0;

d196 2
a197 2
				bcopy((char *)hent->h_addr,
				    (char *)&sin.sin_addr, sizeof sin.sin_addr);
@


1.16
log
@protos
@
text
@d1 1
a1 1
/*	$OpenBSD: ypwhich.c,v 1.15 2003/06/02 04:00:17 deraadt Exp $	*/
d30 2
a31 2
#ifndef LINT
static char rcsid[] = "$Id: ypwhich.c,v 1.15 2003/06/02 04:00:17 deraadt Exp $";
@


1.15
log
@remove terms 3 and 4 of some of my licences
@
text
@d1 1
a1 1
/*	$OpenBSD: ypwhich.c,v 1.14 2002/08/04 00:51:14 deraadt Exp $	*/
d31 1
a31 1
static char rcsid[] = "$Id: ypwhich.c,v 1.14 2002/08/04 00:51:14 deraadt Exp $";
d69 3
a71 1
void
@


1.14
log
@spaces
@
text
@d1 1
a1 1
/*	$OpenBSD: ypwhich.c,v 1.13 2002/07/19 03:20:17 deraadt Exp $	*/
a15 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Theo de Raadt.
 * 4. The name of the author may not be used to endorse or promote
 *    products derived from this software without specific prior written
 *    permission.
d31 1
a31 1
static char rcsid[] = "$Id: ypwhich.c,v 1.13 2002/07/19 03:20:17 deraadt Exp $";
@


1.13
log
@ansi
@
text
@d1 1
a1 1
/*	$OpenBSD: ypwhich.c,v 1.12 2002/06/02 06:42:28 deraadt Exp $	*/
d37 1
a37 1
static char rcsid[] = "$Id: ypwhich.c,v 1.12 2002/06/02 06:42:28 deraadt Exp $";
d218 1
a218 1
		client = yp_bind_host(host,YPPROG,YPVERS,0,1);
@


1.12
log
@minor KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: ypwhich.c,v 1.11 1999/03/20 15:36:12 maja Exp $	*/
d37 1
a37 1
static char rcsid[] = "$Id: ypwhich.c,v 1.11 1999/03/20 15:36:12 maja Exp $";
d76 1
a76 1
usage()
d78 3
a80 3
	fprintf(stderr, "Usage:\n");
	fprintf(stderr, "\typwhich [-d domain] [[-h host] [-t] -m [mname] | host]\n");
	fprintf(stderr, "\typwhich -x\n");
d89 1
a89 3
bind_host(dom, sin)
char *dom;
struct sockaddr_in *sin;
d93 1
a96 1
	struct in_addr ss_addr;
d140 1
a140 1
	
d142 1
a142 3
main(argc, argv)
	int argc;
	char **argv;
d144 2
a145 1
	char *domain, *master, *map;
d147 1
d149 1
a149 5
	struct sockaddr_in sin;
	int notrans, mode, getmap;
	int c, r, i;
	CLIENT *client;
	char	*host = NULL;
a150 1
	map = NULL;
d217 1
a217 1
	if (host != NULL) {
d219 1
a219 2
	}
	
d226 1
a226 1
		if (host != NULL) {
d228 1
a228 1
		} else {
d230 1
a230 1
		}
d248 1
a248 1
	if (host != NULL) {
d250 1
a250 1
	} else {
d252 1
a252 1
	}
@


1.11
log
@New improved -h support. In this version ypwhich -m even works on machines
that isn't ypserver. Reported by Jeff Schneiter <jschneit@@Adobe.COM>. -moj
@
text
@d1 1
a1 1
/*	$OpenBSD: ypwhich.c,v 1.10 1999/03/19 22:21:27 deraadt Exp $	*/
d37 1
a37 1
static char rcsid[] = "$Id: ypwhich.c,v 1.10 1999/03/19 22:21:27 deraadt Exp $";
d165 1
a165 1
		switch(c) {
d190 1
a190 1
		switch(argc) {
d262 1
a262 1
	switch(r) {
d272 1
a272 1
			switch(r) {
@


1.10
log
@remove -h feature until the code works on clients
@
text
@d1 1
a1 1
/*	$OpenBSD: ypwhich.c,v 1.8 1997/07/21 19:12:46 deraadt Exp $	*/
d37 1
a37 1
static char rcsid[] = "$Id: ypwhich.c,v 1.8 1997/07/21 19:12:46 deraadt Exp $";
d60 2
d79 1
a79 1
	fprintf(stderr, "\typwhich [-d domain] [[-t] -m [mname] | host]\n");
d154 2
d164 1
a164 1
	while ((c = getopt(argc, argv, "xd:mt")) != -1)
d171 3
d224 4
d234 5
a238 1
		r = yp_master(domain, map, &master);
d256 5
a260 1
	r = yp_maplist(domain, &ypml);
d266 6
a271 1
			r = yp_master(domain, ypml->map, &master);
@


1.9
log
@Added support for maplist from a specified host (-h <host>). -moj
@
text
@a59 2
#include "yplib_host.h"

d77 1
a77 1
	fprintf(stderr, "\typwhich [-d domain] [[-h host] [-t] -m [mname] | host]\n");
a151 2
	CLIENT *client;
	char	*host = NULL;
d160 1
a160 1
	while ((c = getopt(argc, argv, "xd:h:mt")) != -1)
a166 3
		case 'h':
			host = optarg;
			break;
a216 6
	if (host == NULL) {
		client = yp_bind_local(YPPROG,YPVERS);
	} else {
		client = yp_bind_host(host,YPPROG,YPVERS,0,1);
	}
	
d223 1
a223 1
		r = yp_master_host(client, domain, map, &master);
d241 1
a241 1
	r = yp_maplist_host(client, domain, &ypml);
d247 1
a247 1
			r = yp_master_host(client, domain, ypml->map, &master);
@


1.8
log
@Wall
@
text
@d1 1
a1 1
/*	$OpenBSD: ypwhich.c,v 1.7 1997/06/23 01:03:57 deraadt Exp $	*/
d37 1
a37 1
static char rcsid[] = "$Id: ypwhich.c,v 1.7 1997/06/23 01:03:57 deraadt Exp $";
d60 2
d79 1
a79 1
	fprintf(stderr, "\typwhich [-d domain] [[-t] -m [mname] | host]\n");
d154 2
d164 1
a164 1
	while ((c = getopt(argc, argv, "xd:mt")) != -1)
d171 3
d224 6
d236 1
a236 1
		r = yp_master(domain, map, &master);
d254 1
a254 1
	r = yp_maplist(domain, &ypml);
d260 1
a260 1
			r = yp_master(domain, ypml->map, &master);
@


1.7
log
@long != int error
@
text
@d1 1
a1 1
/*	$OpenBSD: ypwhich.c,v 1.6 1997/04/22 02:55:42 gene Exp $
d37 1
a37 1
static char rcsid[] = "$Id: ypwhich.c,v 1.6 1997/04/22 02:55:42 gene Exp $";
d43 5
d49 1
d53 2
d73 1
d86 1
a92 1
	struct dom_binding *ysd;
d96 1
a96 1
	u_int32_t ss_addr;
d128 2
a129 2
	bcopy(&ypbr.ypbind_resp_u.ypbind_bindinfo.ypbind_binding_addr,
	    &ss_addr, sizeof (ss_addr));
d131 2
a132 1
	hent = gethostbyaddr((char *)&ss_addr, sizeof(ss_addr), AF_INET);
d143 2
a144 1
char **argv;
d157 3
d185 1
a185 1
			bzero(&sin, sizeof sin);
@


1.6
log
@Do some beautification of this file (that theo didn't :P).
Also, print a better error message when the host you're checking isn't
ypbound.  The previous error was cryptic and incomprehensible.
@
text
@d1 1
a1 1
/*	$OpenBSD: ypwhich.c,v 1.5 1997/04/22 01:49:16 deraadt Exp $
d37 1
a37 1
static char rcsid[] = "$Id: ypwhich.c,v 1.5 1997/04/22 01:49:16 deraadt Exp $";
d87 1
a87 1
	u_long ss_addr;
@


1.5
log
@indent
@
text
@d1 1
a1 1
/*	$OpenBSD: ypwhich.c,v 1.4 1996/06/05 23:56:00 deraadt Exp $
d37 1
a37 1
static char rcsid[] = "$Id: ypwhich.c,v 1.4 1996/06/05 23:56:00 deraadt Exp $";
d93 3
a95 3
	if (client==NULL) {
		fprintf(stderr, "can't clntudp_create: %s\n",
		    yperr_string(YPERR_YPBIND));
d101 1
d121 1
a121 1
	/*printf("%08x\n", ss_addr);*/
d123 1
a123 1
	if (hent)
d127 1
a141 2
	yp_get_default_domain(&domain);

d144 4
a147 2
	while ((c=getopt(argc, argv, "xd:mt")) != -1)
		switch (c) {
d168 2
a169 2
	if (mode==0) {
		switch (argc) {
d208 1
@


1.4
log
@do not need xdr_domainname proto
@
text
@d1 1
a1 1
/*	$OpenBSD: ypwhich.c,v 1.3 1996/05/21 21:32:44 deraadt Exp $
d37 1
a37 1
static char rcsid[] = "$Id: ypwhich.c,v 1.3 1996/05/21 21:32:44 deraadt Exp $";
d93 1
a93 1
	if(client==NULL) {
d95 1
a95 1
			yperr_string(YPERR_YPBIND));
d102 2
a103 2
		xdr_domainname, &dom, xdr_ypbind_resp, &ypbr, tv);
	if( r != RPC_SUCCESS) {
d105 1
a105 1
			yperr_string(YPERR_YPBIND));
d111 1
a111 1
				yperr_string(ypbr.ypbind_status));
d144 2
a145 2
	while( (c=getopt(argc, argv, "xd:mt")) != -1)
		switch(c) {
d147 1
a147 1
			for(i=0; i<sizeof ypaliases/sizeof ypaliases[0]; i++)
d149 1
a149 2
					ypaliases[i].alias,
					ypaliases[i].name);
d166 2
a167 2
	if(mode==0) {
		switch(argc) {
d173 1
a173 1
			if(bind_host(domain, &sin))
d181 1
a181 1
				if(!hent) {
d187 1
a187 1
					(char *)&sin.sin_addr, sizeof sin.sin_addr);
d189 1
a189 1
			if(bind_host(domain, &sin))
d198 1
a198 1
	if( argc > 1)
d201 1
a201 1
	if(argv[0]) {
d203 2
a204 2
		for(i=0; (!notrans) && i<sizeof ypaliases/sizeof ypaliases[0]; i++)
			if( strcmp(map, ypaliases[i].alias) == 0)
d207 1
a207 1
		switch(r) {
d217 1
a217 1
				map, yperr_string(r));
d228 1
a228 1
		for(y = ypml; y; ) {
d238 2
a239 2
					"YP: can't find the master of %s: Reason: %s\n",
					ypml->map, yperr_string(r));
d251 1
a251 1
			domain, yperr_string(r));
@


1.3
log
@teeny cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD$
d37 1
a37 1
static char rcsid[] = "$Id: ypwhich.c,v 1.2 1996/04/24 21:39:56 deraadt Exp $";
a50 2

extern bool_t xdr_domainname();
@


1.2
log
@use yp.h instead of yp_prot.h
@
text
@d1 3
d5 1
a5 1
 * Copyright (c) 1992, 1993 Theo de Raadt <deraadt@@fsa.ca>
d37 1
a37 1
static char rcsid[] = "$Id: ypwhich.c,v 1.1.1.1 1995/10/18 08:47:08 deraadt Exp $";
@


1.1
log
@Initial revision
@
text
@d34 1
a34 1
static char rcsid[] = "$Id: ypwhich.c,v 1.5 1995/05/21 15:42:54 mycroft Exp $";
d46 1
a46 1
#include <rpcsvc/yp_prot.h>
d101 1
a101 1
		xdr_domainname, dom, xdr_ypbind_resp, &ypbr, tv);
d117 2
a118 1
	ss_addr = ypbr.ypbind_respbody.ypbind_bindinfo.ypbind_binding_addr.s_addr;
d132 1
a132 1
	char *domainname, *master, *map;
d139 1
a139 1
	yp_get_default_domain(&domainname);
d152 1
a152 1
			domainname = optarg;
d173 1
a173 1
			if(bind_host(domainname, &sin))
d189 1
a189 1
			if(bind_host(domainname, &sin))
d206 1
a206 1
		r = yp_master(domainname, map, &master);
d224 2
a225 1
	r = yp_maplist(domainname, &ypml);
d228 1
a228 1
		for(y=ypml; y; ) {
d230 1
a230 1
			r = yp_master(domainname, ypml->ypml_name, &master);
d233 1
a233 1
				printf("%s %s\n", ypml->ypml_name, master);
d239 1
a239 1
					ypml->ypml_name, yperr_string(r));
d242 1
a242 1
			y = ypml->ypml_next;
d251 1
a251 1
			domainname, yperr_string(r));
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
