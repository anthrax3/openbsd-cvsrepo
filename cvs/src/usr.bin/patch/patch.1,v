head	1.30;
access;
symbols
	OPENBSD_6_2_BASE:1.30
	OPENBSD_6_1:1.30.0.10
	OPENBSD_6_1_BASE:1.30
	OPENBSD_6_0:1.30.0.6
	OPENBSD_6_0_BASE:1.30
	OPENBSD_5_9:1.30.0.2
	OPENBSD_5_9_BASE:1.30
	OPENBSD_5_8:1.30.0.4
	OPENBSD_5_8_BASE:1.30
	OPENBSD_5_7:1.28.0.2
	OPENBSD_5_7_BASE:1.28
	OPENBSD_5_6:1.27.0.4
	OPENBSD_5_6_BASE:1.27
	OPENBSD_5_5:1.26.0.16
	OPENBSD_5_5_BASE:1.26
	OPENBSD_5_4:1.26.0.12
	OPENBSD_5_4_BASE:1.26
	OPENBSD_5_3:1.26.0.10
	OPENBSD_5_3_BASE:1.26
	OPENBSD_5_2:1.26.0.8
	OPENBSD_5_2_BASE:1.26
	OPENBSD_5_1_BASE:1.26
	OPENBSD_5_1:1.26.0.6
	OPENBSD_5_0:1.26.0.4
	OPENBSD_5_0_BASE:1.26
	OPENBSD_4_9:1.26.0.2
	OPENBSD_4_9_BASE:1.26
	OPENBSD_4_8:1.25.0.8
	OPENBSD_4_8_BASE:1.25
	OPENBSD_4_7:1.25.0.4
	OPENBSD_4_7_BASE:1.25
	OPENBSD_4_6:1.25.0.6
	OPENBSD_4_6_BASE:1.25
	OPENBSD_4_5:1.25.0.2
	OPENBSD_4_5_BASE:1.25
	OPENBSD_4_4:1.22.0.2
	OPENBSD_4_4_BASE:1.22
	OPENBSD_4_3:1.21.0.2
	OPENBSD_4_3_BASE:1.21
	OPENBSD_4_2:1.20.0.2
	OPENBSD_4_2_BASE:1.20
	OPENBSD_4_1:1.17.0.14
	OPENBSD_4_1_BASE:1.17
	OPENBSD_4_0:1.17.0.12
	OPENBSD_4_0_BASE:1.17
	OPENBSD_3_9:1.17.0.10
	OPENBSD_3_9_BASE:1.17
	OPENBSD_3_8:1.17.0.8
	OPENBSD_3_8_BASE:1.17
	OPENBSD_3_7:1.17.0.6
	OPENBSD_3_7_BASE:1.17
	OPENBSD_3_6:1.17.0.4
	OPENBSD_3_6_BASE:1.17
	OPENBSD_3_5:1.17.0.2
	OPENBSD_3_5_BASE:1.17
	OPENBSD_3_4:1.16.0.2
	OPENBSD_3_4_BASE:1.16
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.4.0.14
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.12
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.10
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.8
	OPENBSD_2_8:1.4.0.6
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.4
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.30
date	2015.07.26.14.32.19;	author millert;	state Exp;
branches;
next	1.29;
commitid	09nDnpMEB9OxbzYE;

1.29
date	2015.03.13.19.58.41;	author jmc;	state Exp;
branches;
next	1.28;
commitid	OcwhWBKGs3Yn7EeA;

1.28
date	2014.11.22.15.49.28;	author tobias;	state Exp;
branches
	1.28.2.1;
next	1.27;
commitid	vyatgew5pmIq3geU;

1.27
date	2014.04.15.06.26.54;	author jmc;	state Exp;
branches
	1.27.4.1;
next	1.26;

1.26
date	2010.09.03.11.09.29;	author jmc;	state Exp;
branches;
next	1.25;

1.25
date	2009.02.08.17.33.01;	author jmc;	state Exp;
branches;
next	1.24;

1.24
date	2009.02.08.17.15.10;	author jmc;	state Exp;
branches;
next	1.23;

1.23
date	2008.10.19.06.15.13;	author jmc;	state Exp;
branches;
next	1.22;

1.22
date	2008.06.06.20.44.00;	author jmc;	state Exp;
branches;
next	1.21;

1.21
date	2008.01.11.20.16.02;	author jmc;	state Exp;
branches;
next	1.20;

1.20
date	2007.05.31.19.20.14;	author jmc;	state Exp;
branches;
next	1.19;

1.19
date	2007.05.31.17.59.39;	author jmc;	state Exp;
branches;
next	1.18;

1.18
date	2007.04.18.21.52.24;	author sobrado;	state Exp;
branches;
next	1.17;

1.17
date	2003.10.31.20.20.45;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2003.07.31.21.07.35;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2003.07.30.16.45.44;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2003.07.28.18.34.36;	author otto;	state Exp;
branches;
next	1.13;

1.13
date	2003.07.28.16.13.53;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2003.07.25.02.12.45;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2003.07.24.14.35.22;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2003.07.24.14.29.16;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2003.07.24.04.41.19;	author jmc;	state Exp;
branches;
next	1.8;

1.8
date	2003.07.22.20.17.06;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.07.18.02.00.09;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2003.02.18.07.57.49;	author jmc;	state Exp;
branches;
next	1.5;

1.5
date	2003.01.06.08.52.05;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	99.06.05.01.21.36;	author aaron;	state Exp;
branches;
next	1.3;

1.3
date	98.11.25.00.30.25;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	96.06.10.11.21.30;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.55;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.55;	author deraadt;	state Exp;
branches;
next	;

1.27.4.1
date	2015.07.27.16.08.18;	author guenther;	state Exp;
branches;
next	;
commitid	ltV6h69MuIPDoBUT;

1.28.2.1
date	2015.07.27.16.10.54;	author krw;	state Exp;
branches;
next	;
commitid	7qowXgsHJsgQ1um1;


desc
@@


1.30
log
@Remove support for automatically checking files out of RCS.  The
behavior is confusing to users and even GNU patch no longer does
it by default.  OK krw@@ guenther@@
@
text
@.\"	$OpenBSD: patch.1,v 1.29 2015/03/13 19:58:41 jmc Exp $
.\" Copyright 1986, Larry Wall
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following condition
.\" is met:
.\"  1. Redistributions of source code must retain the above copyright
.\"     notice, this condition and the following disclaimer.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd $Mdocdate: March 13 2015 $
.Dt PATCH 1
.Os
.Sh NAME
.Nm patch
.Nd apply a diff file to an original
.Sh SYNOPSIS
.Nm patch
.Bk -words
.Op Fl bCcEeflNnRstuv
.Op Fl B Ar backup-prefix
.Op Fl D Ar symbol
.Op Fl d Ar directory
.Op Fl F Ar max-fuzz
.Op Fl i Ar patchfile
.Op Fl o Ar out-file
.Op Fl p Ar strip-count
.Op Fl r Ar rej-name
.Op Fl V Cm t | nil | never
.Op Fl x Ar number
.Op Fl z Ar backup-ext
.Op Fl Fl posix
.Op Ar origfile Op Ar patchfile
.Ek
.Nm patch
.Pf \*(Lt Ar patchfile
.Sh DESCRIPTION
.Nm
will take a patch file containing any of the four forms of difference
listing produced by the
.Xr diff 1
program and apply those differences to an original file,
producing a patched version.
If
.Ar patchfile
is omitted, or is a hyphen, the patch will be read from the standard input.
.Pp
.Nm
will attempt to determine the type of the diff listing, unless overruled by a
.Fl c ,
.Fl e ,
.Fl n ,
or
.Fl u
option.
Context diffs (old-style, new-style, and unified) and
normal diffs are applied directly by the
.Nm
program itself, whereas ed diffs are simply fed to the
.Xr ed 1
editor via a pipe.
.Pp
If the
.Ar patchfile
contains more than one patch,
.Nm
will try to apply each of them as if they came from separate patch files.
This means, among other things, that it is assumed that the name of the file
to patch must be determined for each diff listing, and that the garbage before
each diff listing will be examined for interesting things such as file names
and revision level (see the section on
.Sx Filename Determination
below).
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Xo
.Fl B Ar backup-prefix ,
.Fl Fl prefix Ar backup-prefix
.Xc
Causes the next argument to be interpreted as a prefix to the backup file
name.
If this argument is specified, any argument to
.Fl z
will be ignored.
.It Fl b , Fl Fl backup
Save a backup copy of the file before it is modified.
By default the original file is saved with a backup extension of
.Qq .orig
unless the file already has a numbered backup, in which case a numbered
backup is made.
This is equivalent to specifying
.Qo Fl V Cm existing Qc .
This option is currently the default, unless
.Fl -posix
is specified.
.It Fl C , Fl Fl check
Checks that the patch would apply cleanly, but does not modify anything.
.It Fl c , Fl Fl context
Forces
.Nm
to interpret the patch file as a context diff.
.It Xo
.Fl D Ar symbol ,
.Fl Fl ifdef Ar symbol
.Xc
Causes
.Nm
to use the
.Qq #ifdef...#endif
construct to mark changes.
The argument following will be used as the differentiating symbol.
Note that, unlike the C compiler, there must be a space between the
.Fl D
and the argument.
.It Xo
.Fl d Ar directory ,
.Fl Fl directory Ar directory
.Xc
Causes
.Nm
to interpret the next argument as a directory,
and change working directory to it before doing anything else.
.It Fl E , Fl Fl remove-empty-files
Causes
.Nm
to remove output files that are empty after the patches have been applied.
This option is useful when applying patches that create or remove files.
.It Fl e , Fl Fl ed
Forces
.Nm
to interpret the patch file as an
.Xr ed 1
script.
.It Xo
.Fl F Ar max-fuzz ,
.Fl Fl fuzz Ar max-fuzz
.Xc
Sets the maximum fuzz factor.
This option only applies to context diffs, and causes
.Nm
to ignore up to that many lines in looking for places to install a hunk.
Note that a larger fuzz factor increases the odds of a faulty patch.
The default fuzz factor is 2, and it may not be set to more than
the number of lines of context in the context diff, ordinarily 3.
.It Fl f , Fl Fl force
Forces
.Nm
to assume that the user knows exactly what he or she is doing, and to not
ask any questions.
It assumes the following:
skip patches for which a file to patch can't be found;
patch files even though they have the wrong version for the
.Qq Prereq:
line in the patch;
and assume that patches are not reversed even if they look like they are.
This option does not suppress commentary; use
.Fl s
for that.
.It Xo
.Fl i Ar patchfile ,
.Fl Fl input Ar patchfile
.Xc
Causes the next argument to be interpreted as the input file name
(i.e. a patchfile).
This option may be specified multiple times.
.It Fl l , Fl Fl ignore-whitespace
Causes the pattern matching to be done loosely, in case the tabs and
spaces have been munged in your input file.
Any sequence of whitespace in the pattern line will match any sequence
in the input file.
Normal characters must still match exactly.
Each line of the context must still match a line in the input file.
.It Fl N , Fl Fl forward
Causes
.Nm
to ignore patches that it thinks are reversed or already applied.
See also
.Fl R .
.It Fl n , Fl Fl normal
Forces
.Nm
to interpret the patch file as a normal diff.
.It Xo
.Fl o Ar out-file ,
.Fl Fl output Ar out-file
.Xc
Causes the next argument to be interpreted as the output file name.
.It Xo
.Fl p Ar strip-count ,
.Fl Fl strip Ar strip-count
.Xc
Sets the pathname strip count,
which controls how pathnames found in the patch file are treated,
in case you keep your files in a different directory than the person who sent
out the patch.
The strip count specifies how many slashes are to be stripped from
the front of the pathname.
(Any intervening directory names also go away.)
For example, supposing the file name in the patch file was
.Pa /u/howard/src/blurfl/blurfl.c :
.Pp
Setting
.Fl p Ns Ar 0
gives the entire pathname unmodified.
.Pp
.Fl p Ns Ar 1
gives
.Pp
.D1 Pa u/howard/src/blurfl/blurfl.c
.Pp
without the leading slash.
.Pp
.Fl p Ns Ar 4
gives
.Pp
.D1 Pa blurfl/blurfl.c
.Pp
Not specifying
.Fl p
at all just gives you
.Pa blurfl.c ,
unless all of the directories in the leading path
.Pq Pa u/howard/src/blurfl
exist and that path is relative,
in which case you get the entire pathname unmodified.
Whatever you end up with is looked for either in the current directory,
or the directory specified by the
.Fl d
option.
.It Fl R , Fl Fl reverse
Tells
.Nm
that this patch was created with the old and new files swapped.
(Yes, I'm afraid that does happen occasionally, human nature being what it
is.)
.Nm
will attempt to swap each hunk around before applying it.
Rejects will come out in the swapped format.
The
.Fl R
option will not work with ed diff scripts because there is too little
information to reconstruct the reverse operation.
.Pp
If the first hunk of a patch fails,
.Nm
will reverse the hunk to see if it can be applied that way.
If it can, you will be asked if you want to have the
.Fl R
option set.
If it can't, the patch will continue to be applied normally.
(Note: this method cannot detect a reversed patch if it is a normal diff
and if the first command is an append (i.e. it should have been a delete)
since appends always succeed, due to the fact that a null context will match
anywhere.
Luckily, most patches add or change lines rather than delete them, so most
reversed normal diffs will begin with a delete, which will fail, triggering
the heuristic.)
.It Xo
.Fl r Ar rej-name ,
.Fl Fl reject-file Ar rej-name
.Xc
Causes the next argument to be interpreted as the reject file name.
.It Xo
.Fl s , Fl Fl quiet ,
.Fl Fl silent
.Xc
Makes
.Nm
do its work silently, unless an error occurs.
.It Fl t , Fl Fl batch
Similar to
.Fl f ,
in that it suppresses questions, but makes some different assumptions:
skip patches for which a file to patch can't be found (the same as
.Fl f ) ;
skip patches for which the file has the wrong version for the
.Qq Prereq:
line in the patch;
and assume that patches are reversed if they look like they are.
.It Fl u , Fl Fl unified
Forces
.Nm
to interpret the patch file as a unified context diff (a unidiff).
.It Xo
.Fl V Cm t | nil | never ,
.Fl Fl version-control Cm t | nil | never
.Xc
Causes the next argument to be interpreted as a method for creating
backup file names.
The type of backups made can also be given in the
.Ev PATCH_VERSION_CONTROL
or
.Ev VERSION_CONTROL
environment variables, which are overridden by this option.
The
.Fl B
option overrides this option, causing the prefix to always be used for
making backup file names.
The values of the
.Ev PATCH_VERSION_CONTROL
and
.Ev VERSION_CONTROL
environment variables and the argument to the
.Fl V
option are like the GNU Emacs
.Dq version-control
variable; they also recognize synonyms that are more descriptive.
The valid values are (unique abbreviations are accepted):
.Bl -tag -width Ds -offset indent
.It Cm t , numbered
Always make numbered backups.
.It Cm nil , existing
Make numbered backups of files that already have them,
simple backups of the others.
.It Cm never , simple
Always make simple backups.
.El
.It Fl v , Fl Fl version
Causes
.Nm
to print out its revision header and patch level.
.It Xo
.Fl x Ar number ,
.Fl Fl debug Ar number
.Xc
Sets internal debugging flags, and is of interest only to
.Nm
patchers.
.It Xo
.Fl z Ar backup-ext ,
.Fl Fl suffix Ar backup-ext
.Xc
Causes the next argument to be interpreted as the backup extension, to be
used in place of
.Qq .orig .
.It Fl Fl posix
Enables strict
.St -p1003.1-2008
conformance, specifically:
.Bl -enum
.It
Backup files are not created unless the
.Fl b
option is specified.
.It
If unspecified, the file name used is the first of the old, new and
index files that exists.
.El
.El
.Ss Patch Application
.Nm
will try to skip any leading garbage, apply the diff,
and then skip any trailing garbage.
Thus you could feed an article or message containing a
diff listing to
.Nm patch ,
and it should work.
If the entire diff is indented by a consistent amount,
this will be taken into account.
.Pp
With context diffs, and to a lesser extent with normal diffs,
.Nm
can detect when the line numbers mentioned in the patch are incorrect,
and will attempt to find the correct place to apply each hunk of the patch.
As a first guess, it takes the line number mentioned for the hunk, plus or
minus any offset used in applying the previous hunk.
If that is not the correct place,
.Nm
will scan both forwards and backwards for a set of lines matching the context
given in the hunk.
First
.Nm
looks for a place where all lines of the context match.
If no such place is found, and it's a context diff, and the maximum fuzz factor
is set to 1 or more, then another scan takes place ignoring the first and last
line of context.
If that fails, and the maximum fuzz factor is set to 2 or more,
the first two and last two lines of context are ignored,
and another scan is made.
.Pq The default maximum fuzz factor is 2.
.Pp
If
.Nm
cannot find a place to install that hunk of the patch, it will put the hunk
out to a reject file, which normally is the name of the output file plus
.Qq .rej .
(Note that the rejected hunk will come out in context diff form whether the
input patch was a context diff or a normal diff.
If the input was a normal diff, many of the contexts will simply be null.)
The line numbers on the hunks in the reject file may be different than
in the patch file: they reflect the approximate location patch thinks the
failed hunks belong in the new file rather than the old one.
.Pp
As each hunk is completed, you will be told whether the hunk succeeded or
failed, and which line (in the new file)
.Nm
thought the hunk should go on.
If this is different from the line number specified in the diff,
you will be told the offset.
A single large offset MAY be an indication that a hunk was installed in the
wrong place.
You will also be told if a fuzz factor was used to make the match, in which
case you should also be slightly suspicious.
.Ss Filename Determination
If no original file is specified on the command line,
.Nm
will try to figure out from the leading garbage what the name of the file
to edit is.
When checking a prospective file name, pathname components are stripped
as specified by the
.Fl p
option and the file's existence and writability are checked relative
to the current working directory (or the directory specified by the
.Fl d
option).
.Pp
If the diff is a context or unified diff,
.Nm
is able to determine the old and new file names from the diff header.
For context diffs, the
.Dq old
file is specified in the line beginning with
.Qq ***
and the
.Dq new
file is specified in the line beginning with
.Qq --- .
For a unified diff, the
.Dq old
file is specified in the line beginning with
.Qq ---
and the
.Dq new
file is specified in the line beginning with
.Qq +++ .
If there is an
.Qq Index:
line in the leading garbage (regardless of the diff type),
.Nm
will use the file name from that line as the
.Dq index
file.
.Pp
.Nm
will choose the file name by performing the following steps, with the first
match used:
.Bl -enum
.It
If
.Nm
is operating in strict
.St -p1003.1-2008
mode, the first of the
.Dq old ,
.Dq new
and
.Dq index
file names that exist is used.
Otherwise,
.Nm
will examine either the
.Dq old
and
.Dq new
file names or, for a non-context diff, the
.Dq index
file name, and choose the file name with the fewest path components,
the shortest basename, and the shortest total file name length (in that order).
.It
If no suitable file was found to patch, the patch file is a context or
unified diff, and the old file was zero length, the new file name is
created and used.
.It
If the file name still cannot be determined,
.Nm
will prompt the user for the file name to use.
.El
.Pp
Additionally, if the leading garbage contains a
.Qq Prereq:\ \&
line,
.Nm
will take the first word from the prerequisites line (normally a version
number) and check the input file to see if that word can be found.
If not,
.Nm
will ask for confirmation before proceeding.
.Pp
The upshot of all this is that you should be able to say, while in a news
interface, the following:
.Pp
.Dl | patch -d /usr/src/local/blurfl
.Pp
and patch a file in the blurfl directory directly from the article containing
the patch.
.Ss Backup Files
By default, the patched version is put in place of the original, with
the original file backed up to the same name with the extension
.Qq .orig ,
or as specified by the
.Fl B ,
.Fl V ,
or
.Fl z
options.
The extension used for making backup files may also be specified in the
.Ev SIMPLE_BACKUP_SUFFIX
environment variable, which is overridden by the options above.
.Pp
If the backup file is a symbolic or hard link to the original file,
.Nm
creates a new backup file name by changing the first lowercase letter
in the last component of the file's name into uppercase.
If there are no more lowercase letters in the name,
it removes the first character from the name.
It repeats this process until it comes up with a
backup file that does not already exist or is not linked to the original file.
.Pp
You may also specify where you want the output to go with the
.Fl o
option; if that file already exists, it is backed up first.
.Ss Notes For Patch Senders
There are several things you should bear in mind if you are going to
be sending out patches:
.Pp
First, you can save people a lot of grief by keeping a
.Pa patchlevel.h
file which is patched to increment the patch level as the first diff in the
patch file you send out.
If you put a
.Qq Prereq:
line in with the patch, it won't let them apply
patches out of order without some warning.
.Pp
Second, make sure you've specified the file names right, either in a
context diff header, or with an
.Qq Index:
line.
If you are patching something in a subdirectory, be sure to tell the patch
user to specify a
.Fl p
option as needed.
.Pp
Third, you can create a file by sending out a diff that compares a
null file to the file you want to create.
This will only work if the file you want to create doesn't exist already in
the target directory.
.Pp
Fourth, take care not to send out reversed patches, since it makes people wonder
whether they already applied the patch.
.Pp
Fifth, while you may be able to get away with putting 582 diff listings into
one file, it is probably wiser to group related patches into separate files in
case something goes haywire.
.Sh ENVIRONMENT
.Bl -tag -width "PATCH_VERSION_CONTROL" -compact
.It Ev POSIXLY_CORRECT
When set,
.Nm
behaves as if the
.Fl Fl posix
option has been specified.
.It Ev SIMPLE_BACKUP_SUFFIX
Extension to use for backup file names instead of
.Qq .orig .
.It Ev TMPDIR
Directory to put temporary files in; default is
.Pa /tmp .
.It Ev PATCH_VERSION_CONTROL
Selects when numbered backup files are made.
.It Ev VERSION_CONTROL
Same as
.Ev PATCH_VERSION_CONTROL .
.El
.Sh FILES
.Bl -tag -width "$TMPDIR/patch*" -compact
.It Pa $TMPDIR/patch*
.Nm
temporary files
.It Pa /dev/tty
used to read input when
.Nm
prompts the user
.El
.Sh EXIT STATUS
The
.Nm
utility exits with one of the following values:
.Pp
.Bl -tag -width Ds -offset indent -compact
.It 0
Successful completion.
.It 1
One or more lines were written to a reject file.
.It \*(Gt1
An error occurred.
.El
.Pp
When applying a set of patches in a loop it behooves you to check this
exit status so you don't apply a later patch to a partially patched file.
.Sh DIAGNOSTICS
Too many to list here, but generally indicative that
.Nm
couldn't parse your patch file.
.Pp
The message
.Qq Hmm...
indicates that there is unprocessed text in the patch file and that
.Nm
is attempting to intuit whether there is a patch in that text and, if so,
what kind of patch it is.
.Sh SEE ALSO
.Xr diff 1
.Sh STANDARDS
The
.Nm
utility is compliant with the
.St -p1003.1-2008
specification,
except as detailed above for the
.Fl -posix
option.
.Pp
The flags
.Op Fl BCEFfstVvxz
and
.Op Fl -posix
are extensions to that specification.
.Sh AUTHORS
.An Larry Wall
with many other contributors.
.Sh CAVEATS
.Nm
cannot tell if the line numbers are off in an ed script, and can only detect
bad line numbers in a normal diff when it finds a
.Qq change
or a
.Qq delete
command.
A context diff using fuzz factor 3 may have the same problem.
Until a suitable interactive interface is added, you should probably do
a context diff in these cases to see if the changes made sense.
Of course, compiling without errors is a pretty good indication that the patch
worked, but not always.
.Pp
.Nm
usually produces the correct results, even when it has to do a lot of
guessing.
However, the results are guaranteed to be correct only when the patch is
applied to exactly the same version of the file that the patch was
generated from.
.Sh BUGS
Could be smarter about partial matches, excessively deviant offsets and
swapped code, but that would take an extra pass.
.Pp
Check patch mode
.Pq Fl C
will fail if you try to check several patches in succession that build on
each other.
The entire
.Nm
code would have to be restructured to keep temporary files around so that it
can handle this situation.
.Pp
If code has been duplicated (for instance with #ifdef OLDCODE ... #else ...
#endif),
.Nm
is incapable of patching both versions and, if it works at all, will likely
patch the wrong one, and tell you that it succeeded to boot.
.Pp
If you apply a patch you've already applied,
.Nm
will think it is a reversed patch, and offer to un-apply the patch.
This could be construed as a feature.
@


1.29
log
@remove the first comma from constructs like ", and," and ", or,": you can use
"and" and "or" to join sentence clauses, and you can use commas, but both hinders
reading;
@
text
@d1 1
a1 1
.\"	$OpenBSD: patch.1,v 1.28 2014/11/22 15:49:28 tobias Exp $
d22 1
a22 1
.Dd $Mdocdate: November 22 2014 $
a480 9
.It
If no file exists,
.Nm
checks for the existence of the files in an RCS directory
(using the appropriate suffix) using the criteria specified
above.
If found,
.Nm
will attempt to get or check out the file.
@


1.28
log
@Remove SCCS support.  For this to work, we would need "get", which we don't
even have in ports.  XSI functionality of POSIX, therefore optional.

ok deraadt, schwarze, tedu
@
text
@d1 1
a1 1
.\"	$OpenBSD: patch.1,v 1.27 2014/04/15 06:26:54 jmc Exp $
d22 1
a22 1
.Dd $Mdocdate: April 15 2014 $
d689 1
a689 1
is incapable of patching both versions, and, if it works at all, will likely
@


1.28.2.1
log
@Backport commit of 2015-07-26 14:32 by millert

Remove support for automatically checking files out of RCS.  The
behavior is confusing to users and even GNU patch no longer does
it by default.  OK krw@@ guenther@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: patch.1,v 1.28 2014/11/22 15:49:28 tobias Exp $
d22 1
a22 1
.Dd $Mdocdate: November 22 2014 $
d481 9
@


1.27
log
@patch was moved from user portability (UP) to base in issue 7
and is no longer optional;
@
text
@d1 1
a1 1
.\"	$OpenBSD: patch.1,v 1.26 2010/09/03 11:09:29 jmc Exp $
d22 1
a22 1
.Dd $Mdocdate: September 3 2010 $
d484 2
a485 2
checks for the existence of the files in an SCCS or RCS directory
(using the appropriate prefix or suffix) using the criteria specified
@


1.27.4.1
log
@Backport commit of 2014-11-22 15:49 by tobias:
Remove SCCS support.  For this to work, we would need "get", which we don't     even have in ports.  XSI functionality of POSIX, therefore optional.

ok deraadt, schwarze, tedu
----------------------------
Backport commit of 2015-07-26 14:32 by millert
Remove support for automatically checking files out of RCS.  The                behavior is confusing to users and even GNU patch no longer does
it by default.  OK krw@@ guenther@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: patch.1,v 1.27 2014/04/15 06:26:54 jmc Exp $
d22 1
a22 1
.Dd $Mdocdate: April 15 2014 $
d481 9
@


1.26
log
@add an EXIT STATUS section for /usr/bin;
@
text
@d1 1
a1 1
.\"	$OpenBSD: patch.1,v 1.25 2009/02/08 17:33:01 jmc Exp $
d22 1
a22 1
.Dd $Mdocdate: February 8 2009 $
d640 2
a641 2
specification
(except as detailed above for the
d643 1
a643 4
option),
though the presence of
.Nm
itself is optional.
@


1.25
log
@updates to IEEE Std 1003.1-2008;
@
text
@d1 1
a1 1
.\"	$OpenBSD: patch.1,v 1.24 2009/02/08 17:15:10 jmc Exp $
d606 16
a632 16
.Pp
The
.Nm
utility exits with one of the following values:
.Pp
.Bl -tag -width Ds -compact -offset indent
.It \&0
Successful completion.
.It \&1
One or more lines were written to a reject file.
.It \*[Gt]\&1
An error occurred.
.El
.Pp
When applying a set of patches in a loop it behooves you to check this
exit status so you don't apply a later patch to a partially patched file.
@


1.24
log
@bump the posix reference in STANDARDS to IEEE Std 1003.1-2008, with a few
updates to follow;
@
text
@d1 1
a1 1
.\"	$OpenBSD: patch.1,v 1.23 2008/10/19 06:15:13 jmc Exp $
d22 1
a22 1
.Dd $Mdocdate: October 19 2008 $
d649 1
a649 1
.Op Fl CEfstuvBFVxz
@


1.23
log
@over-rule -> overrule; from Thomas Pfaff
@
text
@d1 1
a1 1
.\"	$OpenBSD: patch.1,v 1.22 2008/06/06 20:44:00 jmc Exp $
d22 1
a22 1
.Dd $Mdocdate: June 6 2008 $
d350 1
a350 1
.St -p1003.1-2004
d464 1
a464 1
.St -p1003.1-2004
d639 1
a639 1
.St -p1003.1-2004
@


1.22
log
@update the description of -b and STANDARDS; suggested by grunk
ok millert
@
text
@d1 1
a1 1
.\"	$OpenBSD: patch.1,v 1.21 2008/01/11 20:16:02 jmc Exp $
d22 1
a22 1
.Dd $Mdocdate: January 11 2008 $
d60 1
a60 1
will attempt to determine the type of the diff listing, unless over-ruled by a
@


1.21
log
@providing MLINKS for shell builtins makes little sense: what we had was out
of date for ever (no ksh builtins), and since we have two shells, pointing
to one page or the other is never going to work; so remove MLINKS for
csh(1); the cd(1) and wait(1) pages (also builtins); and update any trailing
Xr's;

please, there are tools like whence, man, and locate for finding this stuff;

ok deraadt miod
@
text
@d1 1
a1 1
.\"	$OpenBSD: patch.1,v 1.20 2007/05/31 19:20:14 jmc Exp $
d22 1
a22 1
.Dd $Mdocdate: May 31 2007 $
d105 3
a107 1
This option is currently the default but that will change in a future release.
d350 1
a350 1
.St -p1003.2
d464 1
a464 1
.St -p1003.2
d640 7
a646 2
specification,
but its presence is optional.
@


1.20
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: patch.1,v 1.19 2007/05/31 17:59:39 jmc Exp $
d22 1
a22 1
.Dd $Mdocdate$
d131 2
a132 3
to interpret the next argument as a directory, and
.Xr cd 1
to it before doing anything else.
@


1.19
log
@- note some apps which are xpg4, not posix
- note that some apps are optional to posix

after some discussion w/ otto
@
text
@d1 1
a1 1
.\"	$OpenBSD: patch.1,v 1.18 2007/04/18 21:52:24 sobrado Exp $
d22 1
a22 1
.Dd July 23, 2003
@


1.18
log
@adds a detailed synopsis to the man page; sorts options in
the description list and adds missing arguments; syncs usage()

written with a lot of useful advice by jmc@@

ok by jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: patch.1,v 1.17 2003/10/31 20:20:45 millert Exp $
d634 13
@


1.17
log
@o fairly major man page reorganization
o add --posix option for strict POSIX conformance
o change filename determination to match GNU patch
Tested by various people, including a full ports build by naddy@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: patch.1,v 1.16 2003/07/31 21:07:35 millert Exp $
d30 14
a43 1
.Op Cm options
d45 1
d88 9
d104 1
a104 1
.Qo Fl V Ar existing Qc .
d106 2
a107 6
.It Fl B , Fl Fl prefix
Causes the next argument to be interpreted as a prefix to the backup file
name.
If this argument is specified, any argument to
.Fl z
will be ignored.
d112 4
a115 9
.It Fl C , Fl Fl check
Checks that the patch would apply cleanly, but does not modify anything.
.It Fl d , Fl Fl directory
Causes
.Nm
to interpret the next argument as a directory, and
.Xr cd 1
to it before doing anything else.
.It Fl D , Fl Fl ifdef
d125 14
d145 6
a150 2
.It Fl E , Fl Fl remove-empty-files
Causes
d152 4
a155 2
to remove output files that are empty after the patches have been applied.
This option is useful when applying patches that create or remove files.
d171 2
a172 2
.Fl F Ns Aq Ar number ,
.Fl Fl fuzz Aq Ar number
a173 8
Sets the maximum fuzz factor.
This option only applies to context diffs, and causes
.Nm
to ignore up to that many lines in looking for places to install a hunk.
Note that a larger fuzz factor increases the odds of a faulty patch.
The default fuzz factor is 2, and it may not be set to more than
the number of lines of context in the context diff, ordinarily 3.
.It Fl i , Fl Fl input
a183 4
.It Fl n , Fl Fl normal
Forces
.Nm
to interpret the patch file as a normal diff.
d190 8
a197 1
.It Fl o , Fl Fl output
d200 2
a201 2
.Fl p Ns Aq Ar number ,
.Fl Fl strip Aq Ar number
a240 2
.It Fl r , Fl Fl reject-file
Causes the next argument to be interpreted as the reject file name.
d270 5
d295 4
a298 5
.It Fl v , Fl Fl version
Causes
.Nm
to print out its revision header and patch level.
.It Fl V , Fl Fl version-control
d321 1
a321 1
.It t , numbered
d323 1
a323 1
.It nil , existing
d326 1
a326 1
.It never , simple
d329 4
d334 2
a335 2
.Fl x Ns Aq Ar number ,
.Fl Fl debug Aq Ar number
d340 4
a343 1
.It Fl z , Fl Fl suffix
@


1.16
log
@Historically, patch would treat a bare -p as -p0.  This contradicts
POSIX and GNU patch has also removed this, so we will too.  No
objections on icb (no one even seemed to know about this "feature").
@
text
@d1 1
a1 1
.\"	$OpenBSD: patch.1,v 1.15 2003/07/30 16:45:44 millert Exp $
a40 26
By default, the patched version is put in place of the original, with
the original file backed up to the same name with the extension
.Qq .orig ,
or as specified by the
.Fl B ,
.Fl V ,
or
.Fl z
options.
The extension used for making backup files may also be specified in the
.Ev SIMPLE_BACKUP_SUFFIX
environment variable, which is overridden by the options above.
.Pp
If the backup file is linked to the original file,
.Nm
creates a new backup file name by changing the first lowercase letter
in the last component of the file's name into uppercase.
If there are no more lowercase letters in the name,
it removes the first character from the name.
It repeats this process until it comes up with a
backup file that does not already exist or is not linked to the original file.
.Pp
You may also specify where you want the output to go with the
.Fl o
option; if that file already exists, it is backed up first.
.Pp
d43 1
a43 1
is omitted, or is a hyphen, the patch will be read from standard input.
a44 1
Upon startup,
d46 1
a46 2
will attempt to determine the type of the diff listing,
unless over-ruled by a
d54 1
a54 1
normal diffs are applied by the
d56 1
a56 1
program itself, while ed diffs are simply fed to the
d60 3
a62 97
.Nm
will try to skip any leading garbage, apply the diff,
and then skip any trailing garbage.
Thus you could feed an article or message containing a
diff listing to
.Nm patch ,
and it should work.
If the entire diff is indented by a consistent amount,
this will be taken into account.
.Pp
With context diffs, and to a lesser extent with normal diffs,
.Nm
can detect when the line numbers mentioned in the patch are incorrect,
and will attempt to find the correct place to apply each hunk of the patch.
As a first guess, it takes the line number mentioned for the hunk, plus or
minus any offset used in applying the previous hunk.
If that is not the correct place,
.Nm
will scan both forwards and backwards for a set of lines matching the context
given in the hunk.
First
.Nm
looks for a place where all lines of the context match.
If no such place is found, and it's a context diff, and the maximum fuzz factor
is set to 1 or more, then another scan takes place ignoring the first and last
line of context.
If that fails, and the maximum fuzz factor is set to 2 or more,
the first two and last two lines of context are ignored,
and another scan is made.
.Pq The default maximum fuzz factor is 2.
.Pp
If
.Nm
cannot find a place to install that hunk of the patch, it will put the hunk
out to a reject file, which normally is the name of the output file plus
.Qq .rej .
(Note that the rejected hunk will come out in context diff form whether the
input patch was a context diff or a normal diff.
If the input was a normal diff, many of the contexts will simply be null.)
The line numbers on the hunks in the reject file may be different than
in the patch file: they reflect the approximate location patch thinks the
failed hunks belong in the new file rather than the old one.
.Pp
As each hunk is completed, you will be told whether the hunk succeeded or
failed, and which line (in the new file)
.Nm
thought the hunk should go on.
If this is different from the line number specified in the diff,
you will be told the offset.
A single large offset MAY be an indication that a hunk was installed in the
wrong place.
You will also be told if a fuzz factor was used to make the match, in which
case you should also be slightly suspicious.
.Pp
If no original file is specified on the command line,
.Nm
will try to figure out from the leading garbage what the name of the file
to edit is.
In the header of a context diff, the filename is found from lines beginning
with
.Qq ***
or
.Qq --- ,
with the shortest name of an existing file winning.
Only context diffs have lines like that, but if there is an
.Qq Index:
line in the leading garbage,
.Nm
will try to use the filename from that line.
The context diff header takes precedence over an Index line.
If no filename can be intuited from the leading garbage, you will be asked
for the name of the file to patch.
.Pp
If the original file cannot be found or is read-only, but a suitable
SCCS or RCS file is handy,
.Nm
will attempt to get or check out the file.
.Pp
Additionally, if the leading garbage contains a
.Qq Prereq:\ \&
line,
.Nm
will take the first word from the prerequisites line (normally a version
number) and check the input file to see if that word can be found.
If not,
.Nm
will ask for confirmation before proceeding.
.Pp
The upshot of all this is that you should be able to say, while in a news
interface, the following:
.Pp
.Dl | patch -d /usr/src/local/blurfl
.Pp
and patch a file in the blurfl directory directly from the article containing
the patch.
.Pp
If the patch file contains more than one patch,
d66 5
a70 4
to patch must be determined for each diff listing,
and that the garbage before each diff listing will
be examined for interesting things such as filenames and revision level, as
mentioned previously.
d86 1
a86 1
If this argument is specified, any argument from
d121 1
a135 10
.It Fl t , Fl Fl batch
Similar to
.Fl f ,
in that it suppresses questions, but makes some different assumptions:
skip patches for which a file to patch can't be found (the same as
.Fl f ) ;
skip patches for which the file has the wrong version for the
.Qq Prereq:
line in the patch;
and assume that patches are reversed if they look like they are.
d181 1
a181 1
For example, supposing the filename in the patch file was
d249 10
d271 2
d274 1
a274 1
environment variable, which is overridden by this option.
d279 3
a281 1
The value of the
d283 1
a283 1
environment variable and the argument to the
d309 150
d460 45
a504 1
.Sh NOTES FOR PATCH SENDERS
d517 1
a517 1
Second, make sure you've specified the filenames right, either in a
d538 10
a547 1
.Bl -tag -width "SIMPLE_BACKUP_SUFFIX" -compact
d551 2
a552 3
.It Ev SIMPLE_BACKUP_SUFFIX
Extension to use for backup file names instead of
.Qq .orig .
d554 2
a555 1
Selects when numbered backup files are made.
d558 1
a558 1
.Bl -tag -width Ds
d560 6
d627 1
a627 1
The whole code of
d629 2
a630 2
would have to be restructured to keep temporary files around so that it can
handle this situation.
@


1.15
log
@Add POSIX -i option; tedu@@ OK
@
text
@d1 1
a1 1
.\"	$OpenBSD: patch.1,v 1.14 2003/07/28 18:34:36 otto Exp $
a314 2
.Fl p
or
@


1.14
log
@Be more exact on how backup files are handled.
ok millert@@ tedu@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: patch.1,v 1.13 2003/07/28 16:13:53 millert Exp $
d277 4
@


1.13
log
@Make patch(1) exit value match POSIX and be consistent with diff.
Comments and OK from otto@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: patch.1,v 1.12 2003/07/25 02:12:45 millert Exp $
d54 1
a54 1
If the backup file already exists,
d61 1
a61 1
backup file that does not already exist.
@


1.12
log
@Add POSIX -b option but don't change the default beahvior wrt backups
yet.  The old -b option is now -z (matches GNU patch).
@
text
@d1 1
a1 1
.\"	$OpenBSD: patch.1,v 1.11 2003/07/24 14:35:22 millert Exp $
d484 1
d486 11
a496 1
will exit with a non-zero status if any reject files were created.
d502 1
a502 1
.An Larry Wall Aq larry@@wall.org
@


1.11
log
@"options" not "switches"; jmc@@ OK
also update Larry's email address while I am at it ;-)
@
text
@d1 1
a1 1
.\"	$OpenBSD: patch.1,v 1.10 2003/07/24 14:29:16 millert Exp $
a44 1
.Fl b ,
d46 1
d48 1
a48 1
.Fl V
d195 9
a203 4
.It Fl b , Fl Fl suffix
Causes the next argument to be interpreted as the backup extension, to be
used in place of
.Qq .orig .
d208 1
a208 1
.Fl b
a408 1
This is the default.
d419 4
@


1.10
log
@Don't talk about ~ and # suffixes for orig and reject files since we
use .orig and .rej.
@
text
@d1 1
a1 1
.\"	$OpenBSD: patch.1,v 1.9 2003/07/24 04:41:19 jmc Exp $
d49 1
a49 1
switches.
d52 1
a52 1
environment variable, which is overridden by the above switches.
d65 1
a65 1
switch; if that file already exists, it is backed up first.
d80 1
a80 1
switch.
d193 1
a193 2
.Nm
recognizes the following switches:
d266 1
a266 1
This switch only applies to context diffs, and causes
d334 1
a334 1
switch.
d348 1
a348 1
switch will not work with ed diff scripts because there is too little
d356 1
a356 1
switch set.
d436 1
a436 1
switch as needed.
d483 1
a483 1
.An Larry Wall Aq lwall@@netlabs.com
@


1.9
log
@mdoc version;
ok millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: patch.1,v 1.8 2003/07/22 20:17:06 millert Exp $
d43 1
a43 6
.Qq .orig
.Po
or
.Qq ~
on systems that do not support long filenames
.Pc ,
d123 1
a123 6
.Qq .rej
.Po
or
.Qq #
on systems that do not support long filenames
.Pc .
d199 1
a199 3
.Qq .orig
or
.Qq ~ .
d457 1
a457 3
.Qq .orig
or
.Qq ~ .
@


1.8
log
@Use getopt_long() to parse options instead of rolling our own.
OK deraadt@@ and otto@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: patch.1,v 1.7 2003/07/18 02:00:09 deraadt Exp $	-*- nroff -*-
d22 14
a35 50
.rn '' }`
.de Sh
.br
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
'\"
'\"     Set up \*(-- to give an unbreakable dash;
'\"     string Tr holds user defined translation string.
'\"     Bell System Logo is used as a dummy character.
'\"
'\" Shut up a groff -ww warning.
.if \n(.g .if !dTr .ds Tr
.ie n \{\
.tr \(*W-\*(Tr
.ds -- \(*W-
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
.ds L' '
.ds R' '
'br \}
.el \{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds L' `
.ds R' '
'br\}
.TH PATCH 1
.SH NAME
patch - apply a diff file to an original
.SH SYNOPSIS
.B patch
[options] [origfile [patchfile]]
.sp
but usually just
.sp
.B patch
<patchfile
.SH DESCRIPTION
.I Patch
d38 3
a40 3
.I diff
program and apply those differences to an original file, producing a patched
version.
d42 3
a44 5
the original file backed up to the same name with the
extension \*(L".orig\*(R" (\*(L"~\*(R" on systems that do not
support long filenames), or as specified by the
.BR -b ,
.BR -B ,
d46 8
a53 1
.B -V
d56 1
a56 1
.B SIMPLE_BACKUP_SUFFIX
d58 1
a58 1
.PP
d60 1
a60 1
.B patch
d62 4
a65 3
in the last component of the file's name into uppercase.  If there are
no more lowercase letters in the name, it removes the first character
from the name.  It repeats this process until it comes up with a
d67 3
a69 3
.PP
You may also specify where you want the output to go with a
.B -o
d71 1
a71 1
.PP
d73 1
a73 1
.I patchfile
d75 4
a78 2
.PP
Upon startup, patch will attempt to determine the type of the diff listing,
d80 3
a82 3
.BR -c ,
.BR -e ,
.BR -n ,
d84 1
a84 1
.B -u
d88 1
a88 1
.I patch
d90 1
a90 1
.I ed
d92 2
a93 2
.PP
.I Patch
d98 1
a98 1
.IR patch ,
d102 1
a102 1
.PP
d104 1
a104 1
.I patch
d110 1
a110 1
.I patch
d114 1
a114 1
.I patch
d122 2
a123 1
(The default maximum fuzz factor is 2.)
d125 9
a133 5
.I patch
cannot find a place to install that hunk of the patch, it will put the
hunk out to a reject file, which normally is the name of the output file
plus \*(L".rej\*(R" (\*(L"#\*(R" on systems that do not support
long filenames).
d140 1
a140 1
.PP
d143 1
a143 1
.I patch
d145 2
a146 2
If this is different from the line number specified in the diff you will
be told the offset.
d151 1
a151 1
.PP
d153 1
a153 1
.I patch
d157 7
a163 3
with \*(L"***\*(R" or \*(L"---\*(R", with the shortest name of an existing
file winning.
Only context diffs have lines like that, but if there is an \*(L"Index:\*(R"
d165 1
a165 1
.I patch
d170 1
a170 1
.PP
d173 1
a173 1
.I patch
d175 5
a179 3
.PP
Additionally, if the leading garbage contains a \*(L"Prereq: \*(R" line,
.I patch
d183 1
a183 1
.I patch
d185 1
a185 1
.PP
d188 3
a190 3
.Sp
	| patch -d /usr/src/local/blurfl
.Sp
d193 1
a193 1
.PP
d195 1
a195 1
.I patch
d202 2
a203 2
.PP
.I Patch
d205 16
a220 12
.TP 5
.B \-b or \-\-suffix
causes the next argument to be interpreted as the backup extension, to be
used in place of \*(L".orig\*(R" or \*(L"~\*(R".
.TP 5
.B \-B or \-\-prefix
causes the next argument to be interpreted as a prefix to the backup file
name. If this argument is specified any argument from -b will be ignored.
.TP 5
.B \-c or \-\-context
forces
.I patch
d222 14
a235 14
.TP 5
.B \-C or \-\-check
checks that the patch would apply cleanly, but does not modify anything.
.TP 5
.B \-d or \-\-directory
causes
.I patch
to interpret the next argument as a directory, and cd to it before doing
anything else.
.TP 5
.B \-D or \-\-ifdef
causes
.I patch
to use the "#ifdef...#endif" construct to mark changes.
d238 1
a238 1
.B \-D
d240 9
a248 9
.TP 5
.B \-e or \-\-ed
forces
.I patch
to interpret the patch file as an ed script.
.TP 5
.B \-E or \-\-remove-empty-files
causes
.I patch
d250 3
a252 4
.TP 5
.B \-f or \-\-force
forces
.I patch
d254 7
a260 4
ask any questions.  It assumes the following: skip patches for which a
file to patch can't be found; patch files even though they have the
wrong version for the ``Prereq:'' line in the patch; and assume that
patches are not reversed even if they look like they are.
d262 1
a262 1
.B \-s
d264 3
a266 4
.TP 5
.B \-t or \-\-batch
similar to
.BR \-f ,
d268 11
a278 7
skip patches for which a file to patch can't be found (the same as \fB\-f\fP);
skip patches for which the file has the wrong version for the ``Prereq:'' line
in the patch; and assume that patches are reversed if they look like
they are.
.TP 5
.B \-F<number> or \-\-fuzz <number>
sets the maximum fuzz factor.
d280 1
a280 1
.I patch
d285 2
a286 3
.TP 5
.B \-l or \-\-ignore-whitespace
causes the pattern matching to be done loosely, in case the tabs and
d292 3
a294 4
.TP 5
.B \-n or \-\-normal
forces
.I patch
d296 3
a298 4
.TP 5
.B \-N or \-\-forward
causes
.I patch
d301 10
a310 9
.B \-R .
.TP 5
.B \-o or \-\-output
causes the next argument to be interpreted as the output file name.
.TP 5
.B \-p<number> or \-\-strip <number>
sets the pathname strip count,
which controls how pathnames found in the patch file are treated, in case
you keep your files in a different directory than the person who sent
d316 4
a319 5
.sp
	/u/howard/src/blurfl/blurfl.c
.sp
setting
.B \-p
d321 4
a324 3
.B \-p0
gives the entire pathname unmodified,
.B \-p1
d326 6
a331 5
.sp
	u/howard/src/blurfl/blurfl.c
.sp
without the leading slash,
.B \-p4
d333 10
a342 7
.sp
	blurfl/blurfl.c
.sp
and not specifying
.B \-p
at all just gives you "blurfl.c", unless all of the directories in the
leading path (u/howard/src/blurfl) exist and that path is relative,
d346 1
a346 1
.B \-d
d348 5
a352 7
.TP 5
.B \-r or \-\-reject-file
causes the next argument to be interpreted as the reject file name.
.TP 5
.B \-R or \-\-reverse
tells
.I patch
d356 1
a356 1
.I Patch
d360 1
a360 1
.B \-R
d363 1
a363 1
.Sp
d365 1
a365 1
.I patch
d368 1
a368 1
.B \-R
d378 6
a383 4
.TP 5
.B \-s or \-\-quiet or \-\-silent
makes
.I patch
d385 3
a387 4
.TP 5
.B \-u or \-\-unified
forces
.I patch
d389 3
a391 4
.TP 5
.B \-v or \-\-version
causes
.I patch
d393 5
a397 5
.TP 5
.B \-V or \-\-version-control
causes the next argument to be interpreted as a method for creating
backup file names.  The type of backups made can also be given in the
.B VERSION_CONTROL
d400 1
a400 1
.B -B
d404 1
a404 1
.B VERSION_CONTROL
d406 7
a412 8
.B -V
option are like the GNU
Emacs `version-control' variable; they also recognize synonyms that
are more descriptive.  The valid values are (unique abbreviations are
accepted):
.RS
.TP
`t' or `numbered'
d414 3
a416 4
.TP
`nil' or `existing'
Make numbered backups of files that already
have them, simple backups of the others.
d418 1
a418 2
.TP
`never' or `simple'
d420 7
a426 5
.RE
.TP 5
.B \-x<number> or \-\-debug <number>
sets internal debugging flags, and is of interest only to
.I patch
d428 2
a429 20
.SH AUTHOR
Larry Wall <lwall@@netlabs.com>
.br
with many other contributors.
.SH ENVIRONMENT
.TP
.B TMPDIR
Directory to put temporary files in; default is /tmp.
.TP
.B SIMPLE_BACKUP_SUFFIX
Extension to use for backup file names instead of \*(L".orig\*(R" or
\*(L"~\*(R".
.TP
.B VERSION_CONTROL
Selects when numbered backup files are made.
.SH FILES
$TMPDIR/patch*
.SH SEE ALSO
diff(1)
.SH NOTES FOR PATCH SENDERS
d431 5
a435 3
be sending out patches.
First, you can save people a lot of grief by keeping a patchlevel.h file
which is patched to increment the patch level as the first diff in the
d437 3
a439 1
If you put a Prereq: line in with the patch, it won't let them apply
d441 1
d443 3
a445 1
context diff header, or with an Index: line.
d448 1
a448 1
.B \-p
d450 1
d455 1
d458 1
d462 18
a479 1
.SH DIAGNOSTICS
d481 1
a481 1
.I patch
d483 5
a487 4
.PP
The message \*(L"Hmm...\*(R" indicates that there is unprocessed text in
the patch file and that
.I patch
d490 2
a491 2
.PP
.I Patch
d495 7
a501 2
.SH CAVEATS
.I Patch
d503 5
a507 2
bad line numbers in a normal diff when it finds a \*(L"change\*(R" or
a \*(L"delete\*(R" command.
d513 2
a514 2
.PP
.I Patch
d520 2
a521 2
.SH BUGS
Could be smarter about partial matches, excessively \&deviant offsets and
d523 3
a525 3
.PP
Check patch mode (
.BR -C )
d527 3
a529 2
each other.  The whole code of
.I patch
d532 1
a532 1
.PP
d535 1
a535 1
.I patch
d538 1
a538 1
.PP
d540 1
a540 1
.I patch
a542 1
.rn }` ''
@


1.7
log
@remove junk; ok otto tedu
@
text
@d1 1
a1 1
.\"	$OpenBSD: patch.1,v 1.6 2003/02/18 07:57:49 jmc Exp $	-*- nroff -*-
d64 1
a64 1
[options] [origfile [patchfile]] [+ [options] [origfile]]...
a218 5
You can give switches (and another original file name) for the second and
subsequent patches by separating the corresponding argument lists
by a \*(L'+\*(R'.
(The argument list for a second or subsequent patch may not specify a new
patch file, however.)
a390 11
.TP 5
.B \-S or \-\-skip
causes
.I patch
to ignore this patch from the patch file, but continue on looking
for the next patch in the file.
Thus
.sp
	patch -S + -S + <patchfile
.sp
will ignore the first and second of three patches.
@


1.6
log
@copyrights added;

ed(1): Andrew Moore
patch(1): Larry Wall (thanks espie@@ for help with this one)
units(1): Adrian Mariano
@
text
@d1 1
a1 1
.\"	$OpenBSD: patch.1,v 1.5 2003/01/06 08:52:05 deraadt Exp $	-*- nroff -*-
d9 1
a9 1
.\" 
@


1.5
log
@typo; jmc@@prioris.mini.pw.edu.pl
@
text
@d1 21
a21 1
.\"	$OpenBSD: patch.1,v 1.4 1999/06/05 01:21:36 aaron Exp $	-*- nroff -*-
@


1.4
log
@- remove trailing white space
- remove arguments from .Os macros
- remove arguments from .Nm macros, where appropriate
- some more Dq/Sq/Ql insanity
- still lots to do in the usr.bin tree... :/
@
text
@d1 1
a1 1
.\"	$OpenBSD: patch.1,v 1.3 1998/11/25 00:30:25 espie Exp $	-*- nroff -*-
d68 1
a68 1
environment variable, which is overridden by above switches.
d305 1
a305 1
the you keep your files in a different directory than the person who sent
@


1.3
log
@add -C
@
text
@d1 1
a1 1
.\"	$OpenBSD: patch.1,v 1.2 1996/06/10 11:21:30 niklas Exp $	-*- nroff -*-
d463 1
a463 1
user to specify a 
d514 1
a514 1
each other.  The whole code of 
@


1.2
log
@Support the long options that FSF's patch version has.  $OpenBSD$ added
@
text
@d1 1
a1 1
.\"	$OpenBSD: patch.1,v 1.1.1.1 1995/10/18 08:45:55 deraadt Exp $	-*- nroff -*-
d221 3
d510 8
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
.\"	$Id: patch.1,v 1.2 1993/08/02 17:55:18 mycroft Exp $	-*- nroff -*-
d208 1
a208 1
.B \-b
d212 1
a212 1
.B \-B
d216 1
a216 1
.B \-c
d221 1
a221 1
.B \-d
d227 1
a227 1
.B \-D
d236 1
a236 1
.B \-e
d241 1
a241 1
.B \-E
d246 1
a246 1
.B \-f
d258 1
a258 1
.B \-t
d267 1
a267 1
.B \-F<number>
d276 1
a276 1
.B \-l
d284 1
a284 1
.B \-n
d289 1
a289 1
.B \-N
d296 1
a296 1
.B \-o
d299 1
a299 1
.B \-p<number>
d337 1
a337 1
.B \-r
d340 1
a340 1
.B \-R
d369 1
a369 1
.B \-s
d374 1
a374 1
.B \-S
d385 1
a385 1
.B \-u
d390 1
a390 1
.B \-v
d395 1
a395 1
.B \-V
d426 1
a426 1
.B \-x<number>
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
