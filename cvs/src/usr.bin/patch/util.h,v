head	1.17;
access;
symbols
	OPENBSD_6_1:1.17.0.10
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.17.0.6
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.17.0.4
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.15.0.40
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.15.0.38
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.34
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.32
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.30
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.28
	OPENBSD_5_0:1.15.0.26
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.24
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.22
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.18
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.20
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.16
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.14
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.12
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.10
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.8
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.6
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.15.0.4
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.15.0.2
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.13.0.4
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.2
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.12.0.2
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.3.0.18
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.16
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.14
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.12
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.10
	OPENBSD_2_8:1.3.0.8
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.6
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.4
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.17
date	2015.07.26.14.32.19;	author millert;	state Exp;
branches;
next	1.16;
commitid	09nDnpMEB9OxbzYE;

1.16
date	2014.12.13.10.31.07;	author tobias;	state Exp;
branches
	1.16.2.1;
next	1.15;
commitid	KFnMndwf456Gm1bQ;

1.15
date	2005.06.20.07.14.06;	author otto;	state Exp;
branches
	1.15.40.1;
next	1.14;

1.14
date	2005.05.16.15.22.46;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	2004.08.05.21.47.24;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2003.10.31.20.20.45;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2003.08.15.08.00.51;	author otto;	state Exp;
branches;
next	1.10;

1.10
date	2003.07.28.18.35.36;	author otto;	state Exp;
branches;
next	1.9;

1.9
date	2003.07.25.02.12.45;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2003.07.22.17.21.07;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2003.07.22.17.18.49;	author otto;	state Exp;
branches;
next	1.6;

1.6
date	2003.07.21.14.32.21;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2003.07.21.14.00.41;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2003.07.18.02.00.09;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	99.01.03.05.33.49;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.06.10.11.21.35;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.56;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.56;	author deraadt;	state Exp;
branches;
next	;

1.15.40.1
date	2015.07.27.16.08.18;	author guenther;	state Exp;
branches;
next	;
commitid	ltV6h69MuIPDoBUT;

1.16.2.1
date	2015.07.27.16.10.54;	author krw;	state Exp;
branches;
next	;
commitid	7qowXgsHJsgQ1um1;


desc
@@


1.17
log
@Remove support for automatically checking files out of RCS.  The
behavior is confusing to users and even GNU patch no longer does
it by default.  OK krw@@ guenther@@
@
text
@/*	$OpenBSD: util.h,v 1.16 2014/12/13 10:31:07 tobias Exp $	*/

/*
 * patch - a program to apply diffs to original files
 * 
 * Copyright 1986, Larry Wall
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following condition is met:
 * 1. Redistributions of source code must retain the above copyright notice,
 * this condition and the following disclaimer.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * 
 * -C option added in 1998, original code by Marc Espie, based on FreeBSD
 * behaviour
 */

char		*fetchname(const char *, bool *, int);
int		backup_file(const char *);
int		move_file(const char *, const char *);
int		copy_file(const char *, const char *);
void		say(const char *, ...)
		    __attribute__((__format__(__printf__, 1, 2)));
void		fatal(const char *, ...)
		    __attribute__((__format__(__printf__, 1, 2)));
void		pfatal(const char *, ...)
		    __attribute__((__format__(__printf__, 1, 2)));
void		ask(const char *, ...)
		    __attribute__((__format__(__printf__, 1, 2)));
char		*savestr(const char *);
char		*xstrdup(const char *);
void		set_signals(int);
void		ignore_signals(void);
void		makedirs(const char *, bool);
void		version(void);
void		my_exit(int) __attribute__((noreturn));

/* in mkpath.c */
extern int mkpath(char *);
@


1.16
log
@The function savestr allows NULL return values during Plan A patching so in
case of out of memory conditions, Plan B can step in.  In many cases, NULL
value is not properly handled, so use xstrdup here (it's outside Plan A/B
patching, which means that even Plan B relies on successful operations).
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.15 2005/06/20 07:14:06 otto Exp $	*/
a29 1
char		*checked_in(char *);
@


1.16.2.1
log
@Backport commit of 2015-07-26 14:32 by millert

Remove support for automatically checking files out of RCS.  The
behavior is confusing to users and even GNU patch no longer does
it by default.  OK krw@@ guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.16 2014/12/13 10:31:07 tobias Exp $	*/
d30 1
@


1.15
log
@umask juggling not needed; with Lionel Fourquaux.
ok millert@@ espie@@
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.14 2005/05/16 15:22:46 espie Exp $	*/
d43 1
@


1.15.40.1
log
@Backport commit of 2014-11-22 15:49 by tobias:
Remove SCCS support.  For this to work, we would need "get", which we don't     even have in ports.  XSI functionality of POSIX, therefore optional.

ok deraadt, schwarze, tedu
----------------------------
Backport commit of 2015-07-26 14:32 by millert
Remove support for automatically checking files out of RCS.  The                behavior is confusing to users and even GNU patch no longer does
it by default.  OK krw@@ guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.15 2005/06/20 07:14:06 otto Exp $	*/
d30 1
@


1.14
log
@Do not call out mkdir -p, but reuse the code from mkdir(1).

Removes the possibility of nasty stuff happening thanks to unquoted
arguments in system(1).

Also plug a small memory leak.

Problems noticed by Lionel Fourquaud.

okay millert@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.13 2004/08/05 21:47:24 deraadt Exp $	*/
d50 1
a50 1
extern int mkpath(char *, mode_t, mode_t);
@


1.13
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.12 2003/10/31 20:20:45 millert Exp $	*/
d48 3
@


1.12
log
@o fairly major man page reorganization
o add --posix option for strict POSIX conformance
o change filename determination to match GNU patch
Tested by various people, including a full ports build by naddy@@
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.11 2003/08/15 08:00:51 otto Exp $	*/
d47 1
a47 1
void            my_exit(int) __attribute__((noreturn));
@


1.11
log
@Add license from patch.c to original source files missing a license.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.10 2003/07/28 18:35:36 otto Exp $	*/
d29 2
a30 1
char		*fetchname(const char *, int, int);
@


1.10
log
@More cleanup: sprinkled some const, removed ugly EXTERN/INTERN.h,
some rewriting of code to make it more readable and more KNF.

ok millert@@ tedu@@ deraadt@@
@
text
@d1 27
a27 1
/*	$OpenBSD: util.h,v 1.9 2003/07/25 02:12:45 millert Exp $	*/
@


1.9
log
@Add POSIX -b option but don't change the default beahvior wrt backups
yet.  The old -b option is now -z (matches GNU patch).
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.8 2003/07/22 17:21:07 deraadt Exp $	*/
d3 5
a7 6
char		*fetchname(char *, int, int);
int		backup_file(char *);
int		move_file(char *, char *);
int		copy_file(char *, char *);
void		say(char *, ...);
void		fatal(char *, ...)
d9 1
a9 1
void		pfatal(char *, ...)
d11 1
a11 1
void		ask(char *, ...)
d13 3
a15 1
char		*savestr(char *);
d18 1
a18 1
void		makedirs(char *, bool);
@


1.8
log
@nicer
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.7 2003/07/22 17:18:49 otto Exp $	*/
d4 1
d6 1
a6 1
void		copy_file(char *, char *);
@


1.7
log
@More cleanup.
ok millert@@ tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.6 2003/07/21 14:32:21 deraadt Exp $	*/
d8 1
a8 1
	__attribute__((__format__(__printf__, 1, 2)));
d10 1
a10 1
	__attribute__((__format__(__printf__, 1, 2)));
d12 1
a12 1
	__attribute__((__format__(__printf__, 1, 2)));
@


1.6
log
@fix header
@
text
@d1 1
a1 5
/*	$OpenBSD: util.h,v 1.5 2003/07/21 14:00:41 deraadt Exp $	*/

/* and for those machine that can't handle a variable argument list */

EXT char	serrbuf[BUFSIZ];/* buffer for stderr */
d7 6
a12 3
void		fatal(char *, ...);
void		pfatal(char *, ...);
void		ask(char *, ...);
d18 1
@


1.5
log
@knf and other cleanup; ok otto
@
text
@d1 1
a1 1
/* $OpenBSD: util.h,v 1.4 2003/07/18 02:00:09 deraadt Exp $ */
@


1.4
log
@remove junk; ok otto tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.3 1999/01/03 05:33:49 millert Exp $ */
d5 1
a5 1
EXT char serrbuf[BUFSIZ];		/* buffer for stderr */
d7 12
a18 12
char *fetchname(char *, int, int);
int move_file(char *, char *);
void copy_file(char *, char *);
void say(char *, ...);
void fatal(char *, ...);
void pfatal(char *, ...);
void ask(char *, ...);
char *savestr(char *);
void set_signals(int);
void ignore_signals(void);
void makedirs(char *, bool);
void version(void);
@


1.3
log
@Use libc basename(3) and dirname(3) instead of defining our own.  Also clean up some nasty assumptions that basename() returns a pointer that lies within its argument
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.2 1996/06/10 11:21:35 niklas Exp $ */
a4 64
#ifdef CANVARARG

#define say1 say
#define say2 say
#define say3 say
#define say4 say
#define ask1 ask
#define ask2 ask
#define ask3 ask
#define ask4 ask
#define fatal1 fatal
#define fatal2 fatal
#define fatal3 fatal
#define fatal4 fatal
#define pfatal1 pfatal
#define pfatal2 pfatal
#define pfatal3 pfatal
#define pfatal4 pfatal

#else /* hope they allow multi-line macro actual arguments */

#ifdef lint

#define say1(a) say(a, 0, 0, 0)
#define say2(a,b) say(a, (b)==(b), 0, 0)
#define say3(a,b,c) say(a, (b)==(b), (c)==(c), 0)
#define say4(a,b,c,d) say(a, (b)==(b), (c)==(c), (d)==(d))
#define ask1(a) ask(a, 0, 0, 0)
#define ask2(a,b) ask(a, (b)==(b), 0, 0)
#define ask3(a,b,c) ask(a, (b)==(b), (c)==(c), 0)
#define ask4(a,b,c,d) ask(a, (b)==(b), (c)==(c), (d)==(d))
#define fatal1(a) fatal(a, 0, 0, 0)
#define fatal2(a,b) fatal(a, (b)==(b), 0, 0)
#define fatal3(a,b,c) fatal(a, (b)==(b), (c)==(c), 0)
#define fatal4(a,b,c,d) fatal(a, (b)==(b), (c)==(c), (d)==(d))
#define pfatal1(a) pfatal(a, 0, 0, 0)
#define pfatal2(a,b) pfatal(a, (b)==(b), 0, 0)
#define pfatal3(a,b,c) pfatal(a, (b)==(b), (c)==(c), 0)
#define pfatal4(a,b,c,d) pfatal(a, (b)==(b), (c)==(c), (d)==(d))

#else /* lint */
    /* if this doesn't work, try defining CANVARARG above */
#define say1(a) say(a, Nullch, Nullch, Nullch)
#define say2(a,b) say(a, b, Nullch, Nullch)
#define say3(a,b,c) say(a, b, c, Nullch)
#define say4 say
#define ask1(a) ask(a, Nullch, Nullch, Nullch)
#define ask2(a,b) ask(a, b, Nullch, Nullch)
#define ask3(a,b,c) ask(a, b, c, Nullch)
#define ask4 ask
#define fatal1(a) fatal(a, Nullch, Nullch, Nullch)
#define fatal2(a,b) fatal(a, b, Nullch, Nullch)
#define fatal3(a,b,c) fatal(a, b, c, Nullch)
#define fatal4 fatal
#define pfatal1(a) pfatal(a, Nullch, Nullch, Nullch)
#define pfatal2(a,b) pfatal(a, b, Nullch, Nullch)
#define pfatal3(a,b,c) pfatal(a, b, c, Nullch)
#define pfatal4 pfatal

#endif /* lint */

/* if neither of the above work, join all multi-line macro calls. */
#endif

d7 12
a18 11
char *fetchname();
int move_file();
void copy_file();
void say();
void fatal();
void pfatal();
void ask();
char *savestr();
void set_signals();
void ignore_signals();
void makedirs();
@


1.2
log
@Support the long options that FSF's patch version has.  $OpenBSD$ added
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.1.1.1 1995/10/18 08:45:56 deraadt Exp $ */
a81 1
char *basename();
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$Id: util.h,v 1.2 1993/08/02 17:55:25 mycroft Exp $ */
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
