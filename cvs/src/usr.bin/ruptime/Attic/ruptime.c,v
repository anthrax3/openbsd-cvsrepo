head	1.18;
access;
symbols
	OPENBSD_5_5:1.17.0.4
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.16.0.16
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.14
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.12
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.10
	OPENBSD_5_0:1.16.0.8
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.6
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.4
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.2
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.14.0.22
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.18
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.16
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.14
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.14.0.12
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.14.0.10
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.8
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.14.0.6
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.14.0.4
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.14.0.2
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.12.0.6
	OPENBSD_3_6_BASE:1.12
	OPENBSD_3_5:1.12.0.4
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.12.0.2
	OPENBSD_3_4_BASE:1.12
	OPENBSD_3_3:1.8.0.4
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.5.0.18
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.16
	OPENBSD_2_8:1.5.0.14
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.12
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.10
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.8
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.6
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.4
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.18
date	2014.04.24.15.01.27;	author tedu;	state dead;
branches;
next	1.17;

1.17
date	2013.11.27.13.32.02;	author okan;	state Exp;
branches;
next	1.16;

1.16
date	2009.10.27.23.59.43;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2009.10.15.08.20.43;	author sobrado;	state Exp;
branches;
next	1.14;

1.14
date	2004.10.10.03.50.40;	author mickey;	state Exp;
branches;
next	1.13;

1.13
date	2004.09.14.22.24.07;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2003.08.04.17.06.45;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.25.21.18.47;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.10.22.20.50;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.03.02.56.15;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.05.27.03.14.22;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.16.21.27.52;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.11.19.19.02.16;	author mpech;	state Exp;
branches;
next	1.5;

1.5
date	97.07.06.02.28.55;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.06.20.09.59.27;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.01.15.23.43.10;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.38.54;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.46.04;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.46.04;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.18
log
@I have not eaten for days.
And who says you will?
@
text
@/*	$OpenBSD: ruptime.c,v 1.17 2013/11/27 13:32:02 okan Exp $	*/

/*
 * Copyright (c) 1983 The Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/file.h>
#include <dirent.h>
#include <protocols/rwhod.h>
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include <err.h>

size_t	nhosts, hspace = 20;
struct hs {
	struct	whod *hs_wd;
	int	hs_nusers;
} *hs;
struct	whod awhod;

#define	ISDOWN(h)		(now - (h)->hs_wd->wd_recvtime > 11 * 60)
#define	WHDRSIZE	(sizeof (awhod) - sizeof (awhod.wd_we))

time_t now;
int rflg = 1;
int	hscmp(const void *, const void *);
int	ucmp(const void *, const void *);
int	lcmp(const void *, const void *);
int	tcmp(const void *, const void *);
char	*interval(time_t, char *);

void morehosts(void);

int
main(int argc, char *argv[])
{
	extern char *__progname;
	struct hs *hsp;
	struct whod *wd;
	struct whoent *we;
	DIR *dirp;
	struct dirent *dp;
	int aflg, cc, ch, f, i, maxloadav;
	char buf[sizeof(struct whod)];
	int (*cmp)(const void *, const void *) = hscmp;

	aflg = 0;
	while ((ch = getopt(argc, argv, "alrut")) != -1)
		switch(ch) {
		case 'a':
			aflg = 1;
			break;
		case 'l':
			cmp = lcmp;
			break;
		case 'r':
			rflg = -1;
			break;
		case 't':
			cmp = tcmp;
			break;
		case 'u':
			cmp = ucmp;
			break;
		default: 
			fprintf(stderr, "usage: %s [-alrtu]\n", __progname);
			exit(1);
		}

	if (chdir(_PATH_RWHODIR) || (dirp = opendir(".")) == NULL)
		err(1, "%s", _PATH_RWHODIR);
	morehosts();
	hsp = hs;
	maxloadav = -1;
	while ((dp = readdir(dirp))) {
		if (dp->d_ino == 0 || strncmp(dp->d_name, "whod.", 5))
			continue;
		if ((f = open(dp->d_name, O_RDONLY, 0)) < 0) {
			warn("%s", dp->d_name);
			continue;
		}
		cc = read(f, buf, sizeof(struct whod));
		(void)close(f);
		if (cc < WHDRSIZE)
			continue;
		if (nhosts == hspace) {
			morehosts();
			hsp = hs + nhosts;
		}
		/* NOSTRICT */
		hsp->hs_wd = malloc((size_t)WHDRSIZE);
		wd = (struct whod *)buf;
		bcopy((char *)wd, (char *)hsp->hs_wd, (size_t)WHDRSIZE);
		hsp->hs_nusers = 0;
		for (i = 0; i < 2; i++)
			if (wd->wd_loadav[i] > maxloadav)
				maxloadav = wd->wd_loadav[i];
		we = (struct whoent *)(buf+cc);
		while (--we >= wd->wd_we)
			if (aflg || we->we_idle < 3600)
				hsp->hs_nusers++;
		nhosts++;
		hsp++;
	}
	if (!nhosts)
		errx(1, "no hosts in %s.", _PATH_RWHODIR);
	(void)time(&now);
	qsort((char *)hs, nhosts, sizeof (hs[0]), cmp);
	for (i = 0; i < nhosts; i++) {
		hsp = &hs[i];
		if (ISDOWN(hsp)) {
			(void)printf("%-12.12s%s\n", hsp->hs_wd->wd_hostname,
			    interval(now - hsp->hs_wd->wd_recvtime, "down"));
			continue;
		}
		(void)printf(
		    "%-12.12s%s,  %4d user%s  load %*.2f, %*.2f, %*.2f\n",
		    hsp->hs_wd->wd_hostname,
		    interval((time_t)hsp->hs_wd->wd_sendtime -
			(time_t)hsp->hs_wd->wd_boottime, "  up"),
		    hsp->hs_nusers,
		    hsp->hs_nusers == 1 ? ", " : "s,",
		    maxloadav >= 1000 ? 5 : 4,
			hsp->hs_wd->wd_loadav[0] / 100.0,
		    maxloadav >= 1000 ? 5 : 4,
		        hsp->hs_wd->wd_loadav[1] / 100.0,
		    maxloadav >= 1000 ? 5 : 4,
		        hsp->hs_wd->wd_loadav[2] / 100.0);
		free((void *)hsp->hs_wd);
	}
	exit(0);
}

char *
interval(time_t tval, char *updown)
{
	static char resbuf[32];
	int days, hours, minutes;

	if (tval < 0 || tval > 999*24*60*60) {
		(void)snprintf(resbuf, sizeof resbuf, "%s     ??:??", updown);
		return(resbuf);
	}
	minutes = (tval + 59) / 60;		/* round to minutes */
	hours = minutes / 60; minutes %= 60;
	days = hours / 24; hours %= 24;
	if (days)
		(void)snprintf(resbuf, sizeof resbuf, "%s %3d+%02d:%02d",
		    updown, days, hours, minutes);
	else
		(void)snprintf(resbuf, sizeof resbuf, "%s     %2d:%02d",
		    updown, hours, minutes);
	return(resbuf);
}

/* alphabetical comparison */
int
hscmp(const void *a1, const void *a2)
{
	const struct hs *h1 = a1, *h2 = a2;

	return(rflg * strcmp(h1->hs_wd->wd_hostname, h2->hs_wd->wd_hostname));
}

/* load average comparison */
int
lcmp(const void *a1, const void *a2)
{
	const struct hs *h1 = a1, *h2 = a2;

	if (ISDOWN(h1))
		if (ISDOWN(h2))
			return(tcmp(a1, a2));
		else
			return(rflg);
	else if (ISDOWN(h2))
		return(-rflg);
	else
		return(rflg *
			(h2->hs_wd->wd_loadav[0] - h1->hs_wd->wd_loadav[0]));
}

/* number of users comparison */
int
ucmp(const void *a1, const void *a2)
{
	const struct hs *h1 = a1, *h2 = a2;

	if (ISDOWN(h1))
		if (ISDOWN(h2))
			return(tcmp(a1, a2));
		else
			return(rflg);
	else if (ISDOWN(h2))
		return(-rflg);
	else
		return(rflg * (h2->hs_nusers - h1->hs_nusers));
}

/* uptime comparison */
int
tcmp(const void *a1, const void *a2)
{
	const struct hs *h1 = a1, *h2 = a2;

	return(rflg * (
		(ISDOWN(h2) ? h2->hs_wd->wd_recvtime - now
			  : h2->hs_wd->wd_sendtime - h2->hs_wd->wd_boottime)
		-
		(ISDOWN(h1) ? h1->hs_wd->wd_recvtime - now
			  : h1->hs_wd->wd_sendtime - h1->hs_wd->wd_boottime)
	));
}

void
morehosts(void)
{
	hs = realloc((char *)hs, (hspace *= 2) * sizeof(*hs));
	if (hs == NULL)
		err(1, "realloc");
}
@


1.17
log
@remove erroneous char cast to switch expression processing getopt(3);
not used in any cases.

ok deraadt@@, guenther@@, millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ruptime.c,v 1.16 2009/10/27 23:59:43 deraadt Exp $	*/
@


1.16
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: ruptime.c,v 1.15 2009/10/15 08:20:43 sobrado Exp $	*/
d78 1
a78 1
		switch((char)ch) {
@


1.15
log
@sort flags.
@
text
@d1 1
a1 1
/*	$OpenBSD: ruptime.c,v 1.14 2004/10/10 03:50:40 mickey Exp $	*/
a30 11

#ifndef lint
const char copyright[] =
"@@(#) Copyright (c) 1983 The Regents of the University of California.\n\
 All rights reserved.\n";
#endif /* not lint */

#ifndef lint
/*static const char sccsid[] = "from: @@(#)ruptime.c	5.8 (Berkeley) 7/21/90";*/
static const char rcsid[] = "$OpenBSD: ruptime.c,v 1.14 2004/10/10 03:50:40 mickey Exp $";
#endif /* not lint */
@


1.14
log
@use err/warn
@
text
@d1 1
a1 1
/*	$OpenBSD: ruptime.c,v 1.13 2004/09/14 22:24:07 deraadt Exp $	*/
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: ruptime.c,v 1.13 2004/09/14 22:24:07 deraadt Exp $";
d106 1
a106 1
			fprintf(stderr, "usage: %s [-alrut]\n", __progname);
@


1.13
log
@optind and optarg not used
@
text
@d1 1
a1 1
/*	$OpenBSD: ruptime.c,v 1.12 2003/08/04 17:06:45 deraadt Exp $	*/
d33 1
a33 1
char copyright[] =
d39 2
a40 2
/*static char sccsid[] = "from: @@(#)ruptime.c	5.8 (Berkeley) 7/21/90";*/
static char rcsid[] = "$OpenBSD: ruptime.c,v 1.12 2003/08/04 17:06:45 deraadt Exp $";
d52 1
d77 1
d106 1
a106 1
			(void)fprintf(stderr, "usage: ruptime [-alrut]\n");
d110 2
a111 5
	if (chdir(_PATH_RWHODIR) || (dirp = opendir(".")) == NULL) {
		(void)fprintf(stderr, "ruptime: %s: %s.\n",
		    _PATH_RWHODIR, strerror(errno));
		exit(1);
	}
d119 1
a119 2
			(void)fprintf(stderr, "ruptime: %s: %s\n",
			    dp->d_name, strerror(errno));
d145 2
a146 4
	if (!nhosts) {
		(void)printf("ruptime: no hosts in %s.\n", _PATH_RWHODIR);
		exit(1);
	}
d259 2
a260 4
	if (hs == NULL) {
		(void)fprintf(stderr, "ruptime: %s.\n", strerror(ENOMEM));
		exit(1);
	}
@


1.12
log
@protos
@
text
@d1 1
a1 1
/*	$OpenBSD: ruptime.c,v 1.11 2003/06/25 21:18:47 deraadt Exp $	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: ruptime.c,v 1.11 2003/06/25 21:18:47 deraadt Exp $";
a75 2
	extern char *optarg;
	extern int optind;
@


1.11
log
@protos
@
text
@d1 1
a1 1
/*	$OpenBSD: ruptime.c,v 1.10 2003/06/10 22:20:50 deraadt Exp $	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: ruptime.c,v 1.10 2003/06/10 22:20:50 deraadt Exp $";
d69 1
a85 1
	char *interval(time_t, char *);
@


1.10
log
@mostly ansi cleanup; pval ok
@
text
@d1 1
a1 1
/*	$OpenBSD: ruptime.c,v 1.9 2003/06/03 02:56:15 millert Exp $	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: ruptime.c,v 1.9 2003/06/03 02:56:15 millert Exp $";
d65 4
a68 1
int hscmp(), ucmp(), lcmp(), tcmp();
d84 2
a85 3
	int (*cmp)() = hscmp;
	time_t time();
	char *interval();
d204 1
a204 1
hscmp(void *a1, void *a2)
d206 1
a206 1
	struct hs *h1 = a1, *h2 = a2;
d213 1
a213 1
lcmp(void *a1, void *a2)
d215 1
a215 1
	struct hs *h1 = a1, *h2 = a2;
d231 1
a231 1
ucmp(void *a1, void *a2)
d233 1
a233 1
	struct hs *h1 = a1, *h2 = a2;
d248 1
a248 1
tcmp(void *a1, void *a2)
d250 1
a250 1
	struct hs *h1 = a1, *h2 = a2;
@


1.9
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: ruptime.c,v 1.8 2002/05/27 03:14:22 deraadt Exp $	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: ruptime.c,v 1.8 2002/05/27 03:14:22 deraadt Exp $";
d70 1
a70 3
main(argc, argv)
	int argc;
	char **argv;
d179 1
a179 3
interval(tval, updown)
	time_t tval;
	char *updown;
d202 1
a202 2
hscmp(a1, a2)
	void *a1, *a2;
d211 1
a211 2
lcmp(a1, a2)
	void *a1, *a2;
d229 1
a229 2
ucmp(a1, a2)
	void *a1, *a2;
d246 1
a246 2
tcmp(a1, a2)
	void *a1, *a2;
d260 1
a260 1
morehosts()
@


1.8
log
@unsigned vs unsigned int
@
text
@d1 1
a1 1
/*	$OpenBSD: ruptime.c,v 1.7 2002/02/16 21:27:52 millert Exp $	*/
d15 1
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d40 1
a40 1
static char rcsid[] = "$OpenBSD: ruptime.c,v 1.7 2002/02/16 21:27:52 millert Exp $";
@


1.7
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: ruptime.c,v 1.6 2001/11/19 19:02:16 mpech Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: ruptime.c,v 1.6 2001/11/19 19:02:16 mpech Exp $";
d193 1
a193 1
		(void)sprintf(resbuf, "%s     ??:??", updown);
d200 1
a200 1
		(void)sprintf(resbuf, "%s %3d+%02d:%02d",
d203 1
a203 1
		(void)sprintf(resbuf, "%s     %2d:%02d",
@


1.6
log
@kill more registers

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: ruptime.c,v 1.5 1997/07/06 02:28:55 millert Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: ruptime.c,v 1.5 1997/07/06 02:28:55 millert Exp $";
d71 1
a71 1
void morehosts __P((void));
@


1.5
log
@Fix output format for machines up/down > 99 days.
From Janjaap van Velthooven <janjaap@@stack.nl>
@
text
@d1 1
a1 1
/*	$OpenBSD: ruptime.c,v 1.4 1997/06/20 09:59:27 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: ruptime.c,v 1.4 1997/06/20 09:59:27 deraadt Exp $";
d80 4
a83 4
	register struct hs *hsp;
	register struct whod *wd;
	register struct whoent *we;
	register DIR *dirp;
d223 1
a223 1
	register struct hs *h1 = a1, *h2 = a2;
d242 1
a242 1
	register struct hs *h1 = a1, *h2 = a2;
d260 1
a260 1
	register struct hs *h1 = a1, *h2 = a2;
@


1.4
log
@Wall
@
text
@d1 1
a1 1
/*	$OpenBSD: ruptime.c,v 1.3 1997/01/15 23:43:10 millert Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: ruptime.c,v 1.3 1997/01/15 23:43:10 millert Exp $";
d192 2
a193 2
	if (tval < 0 || tval > 365*24*60*60) {
		(void)sprintf(resbuf, "   %s ??:??", updown);
d200 1
a200 1
		(void)sprintf(resbuf, "%s %2d+%02d:%02d",
d203 1
a203 1
		(void)sprintf(resbuf, "%s    %2d:%02d",
@


1.3
log
@getopt(3) returns -1 when out of args, not EOF, whee!
@
text
@d1 1
a1 1
/*	$OpenBSD: ruptime.c,v 1.2 1996/06/26 05:38:54 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: ruptime.c,v 1.2 1996/06/26 05:38:54 deraadt Exp $";
d52 1
d71 3
d122 1
a122 1
	while (dp = readdir(dirp)) {
d209 1
d219 1
d238 1
d256 1
d271 1
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: ruptime.c,v 1.1.1.1 1995/10/18 08:46:04 deraadt Exp $";
d88 1
a88 1
	while ((ch = getopt(argc, argv, "alrut")) != EOF)
@


1.1
log
@Initial revision
@
text
@d1 2
d44 1
a44 1
static char rcsid[] = "$Id: ruptime.c,v 1.4 1994/04/05 02:18:43 cgd Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
