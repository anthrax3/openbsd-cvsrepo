head	1.14;
access;
symbols
	OPENBSD_5_7:1.13.0.18
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.22
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.20
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.16
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.14
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.12
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.10
	OPENBSD_5_0:1.13.0.8
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.6
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.4
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.2
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.12.0.20
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.16
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.14
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.12
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.10
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.8
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.6
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.4
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.2
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.11.0.4
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.2
	OPENBSD_3_6_BASE:1.11
	OPENBSD_3_5:1.10.0.2
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.8.0.6
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.4
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.7.0.4
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.2
	OPENBSD_2_8:1.6.0.2
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.5.0.12
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.10
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.8
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.6
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.4
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3;
locks; strict;
comment	@ * @;


1.14
date	2015.03.17.17.45.13;	author millert;	state dead;
branches;
next	1.13;
commitid	XCfT2rs68MOcwt0o;

1.13
date	2009.10.27.23.59.43;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2005.08.18.14.56.25;	author jaredy;	state Exp;
branches;
next	1.11;

1.11
date	2004.07.20.03.50.27;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2003.11.15.05.56.28;	author tedu;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.03.02.56.16;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.02.16.21.27.52;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2001.02.04.21.27.00;	author ericj;	state Exp;
branches;
next	1.6;

1.6
date	2000.06.30.16.00.23;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.06.30.05.36.16;	author millert;	state Exp;
branches
	1.5.12.1;
next	1.4;

1.4
date	97.06.16.02.21.55;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.01.22.06.53.13;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.01.22.06.43.51;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.01.20.19.39.50;	author millert;	state Exp;
branches;
next	;

1.5.12.1
date	2000.10.06.21.16.17;	author jason;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Initial import of FreeBSD sort.
@
text
@/*	$OpenBSD: files.c,v 1.13 2009/10/27 23:59:43 deraadt Exp $	*/

/*-
 * Copyright (c) 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Peter McIlroy.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "sort.h"
#include "fsort.h"

#include <string.h>

static int	seq(FILE *, DBT *, DBT *);

/*
 * this is the subroutine for file management for fsort().
 * It keeps the buffers for all temporary files.
 */
int
getnext(int binno, union f_handle infl0, int nfiles, RECHEADER *pos, u_char *end,
    struct field *dummy)
{
	int i;
	u_char *hp;
	static size_t nleft = 0;
	static int cnt = 0, flag = -1;
	static u_char maxb = 0;
	static FILE *fp;

	if (nleft == 0) {
		if (binno < 0)	/* reset files. */ {
			for (i = 0; i < nfiles; i++) {
				rewind(fstack[infl0.top + i].fp);
				fstack[infl0.top + i].max_o = 0;
			}
			flag = -1;
			nleft = cnt = 0;
			return (-1);
		}
		maxb = fstack[infl0.top].maxb;
		for (; nleft == 0; cnt++) {
			if (cnt >= nfiles) {
				cnt = 0;
				return (EOF);
			}
			fp = fstack[infl0.top + cnt].fp;
			fread(&nleft, sizeof(nleft), 1, fp);
			if (binno < maxb)
				fstack[infl0.top+cnt].max_o
					+= sizeof(nleft) + nleft;
			else if (binno == maxb) {
				if (binno != fstack[infl0.top].lastb) {
					fseek(fp, fstack[infl0.top+
						cnt].max_o, SEEK_SET);
					fread(&nleft, sizeof(nleft), 1, fp);
				}
				if (nleft == 0)
					fclose(fp);
			} else if (binno == maxb + 1) {		/* skip a bin */
				fseek(fp, nleft, SEEK_CUR);
				fread(&nleft, sizeof(nleft), 1, fp);
				flag = cnt;
			}
		}
	}
	if ((u_char *) pos > end - sizeof(TRECHEADER))
		return (BUFFEND);
	fread(pos, sizeof(TRECHEADER), 1, fp);
	if (end - pos->data < pos->length) {
		hp = ((u_char *)pos) + sizeof(TRECHEADER);
		for (i = sizeof(TRECHEADER); i ;  i--)
			ungetc(*--hp, fp);
		return (BUFFEND);
	}
	fread(pos->data, pos->length, 1, fp);
	nleft -= pos->length + sizeof(TRECHEADER);
	if (nleft == 0 && binno == fstack[infl0.top].maxb)
		fclose(fp);
	return (0);
}

/*
 * this is called when there is no special key. It's only called
 * in the first fsort pass.
 */
int
makeline(int flno, union f_handle filelist, int nfiles, RECHEADER *buffer,
    u_char *bufend, struct field *dummy2)
{
	static u_char *obufend;
	static size_t osz;
	char *pos;
	static int fileno = 0, overflow = 0;
	static FILE *fp = 0;
	int c;

	pos = (char *) buffer->data;
	if (overflow) {
		/*
		 * Buffer shortage is solved by either of two ways:
	 	 * * Flush previous buffered data and start using the 
		 *   buffer from start (see fsort())
		 * * realloc buffer and bump bufend
		 *
		 * The former is preferred, realloc is only done when
		 * there is exactly one item in buffer which does not fit.
		 */
		if (bufend == obufend)
			memmove(pos, bufend - osz, osz);
		pos+=osz;
		overflow = 0;
	}
	for (;;) {
		if (flno >= 0 && (fp = fstack[flno].fp) == NULL)
			return (EOF);
		else if (fp == 0) {
			if (fileno  >= nfiles)
				return (EOF);
			if (!(fp = fopen(filelist.names[fileno], "r")))
				err(2, "%s", filelist.names[fileno]);
			fileno++;
		}
		while ((pos < (char *)bufend) && ((c = getc(fp)) != EOF)) {
			if ((*pos++ = c) == REC_D) {
				buffer->offset = 0;
				buffer->length = pos - (char *) buffer->data;
				return (0);
			}
		}
		if (pos >= (char *)bufend) {
			if (buffer->data < bufend) {
				overflow = 1;
				obufend = bufend;
				osz = (pos - (char *)buffer->data);
			}
			return (BUFFEND);
		} else if (c == EOF) {
			if (buffer->data != (u_char *) pos) {
				*pos++ = REC_D;
				buffer->offset = 0;
				buffer->length = pos - (char *) buffer->data;
				return (0);
			}
			FCLOSE(fp);
			fp = 0;
			if (flno >= 0)
				fstack[flno].fp = 0;
		} else {
			warnx("line too long: ignoring %100s...", buffer->data);
			
			/* Consume the rest of the line from input */
			while((c = getc(fp)) != REC_D && c != EOF)
				;

			buffer->offset = 0;
			buffer->length = 0;

			return (BUFFEND);
		}
	}
}

/*
 * This generates keys. It's only called in the first fsort pass
 */
int
makekey(int flno, union f_handle filelist, int nfiles, RECHEADER *buffer,
    u_char *bufend, struct field *ftbl)
{
	static int fileno = 0;
	static FILE *dbdesc = 0;
	static DBT dbkey[1], line[1];
	static int overflow = 0;
	static int c;

	if (overflow) {
		overflow = enterkey(buffer, line, bufend - (u_char *)buffer,
									ftbl);
		if (overflow)
			return (BUFFEND);
		else
			return (0);
	}

	for (;;) {
		if (flno >= 0) {
			if (!(dbdesc = fstack[flno].fp))
				return (EOF);
		} else if (!dbdesc) {
			if (fileno  >= nfiles)
				return (EOF);
			dbdesc = fopen(filelist.names[fileno], "r");
			if (!dbdesc)
				err(2, "%s", filelist.names[fileno]);
			fileno++;
		}
		if (!(c = seq(dbdesc, line, dbkey))) {
			if ((signed)line->size > bufend - buffer->data) {
				overflow = 1;
			} else {
				overflow = enterkey(buffer, line,
				    bufend - (u_char *) buffer, ftbl);
			}
			if (overflow)
				return (BUFFEND);
			else
				return (0);
		}
		if (c == EOF) {
			FCLOSE(dbdesc);
			dbdesc = 0;
			if (flno >= 0)
				fstack[flno].fp = 0;
		} else {
			((char *) line->data)[60] = '\000';
			warnx("line too long: ignoring %.100s...",
			    (char *)line->data);
		}
	}
}

/*
 * get a key/line pair from fp
 */
static int
seq(FILE *fp, DBT *line, DBT *key)
{
	static char *buf, flag = 1;
	char *end, *pos;
	int c;

	if (flag) {
		flag = 0;
		buf = (char *) linebuf;
		line->data = buf;
	}
	pos = buf;
	end = buf + linebuf_size;
	while ((c = getc(fp)) != EOF) {
		if ((*pos++ = c) == REC_D) {
			line->size = pos - buf;
			return (0);
		}
		if (pos == end) {
			linebuf_size *= 2;
			linebuf = realloc(linebuf, linebuf_size);
			if (!linebuf)
				err(2, "realloc of linebuf to %lu bytes failed",
					(unsigned long)linebuf_size);
			end = linebuf + linebuf_size;
			pos = linebuf + (pos - buf);
			line->data = buf = (char *)linebuf;
			continue;
		}
	}
	if (pos != buf) {
		*pos++ = REC_D;
		line->size = pos - buf;
		return (0);
	} else
		return (EOF);
}

/*
 * write a key/line pair to a temporary file
 */
void
putrec(RECHEADER *rec, FILE *fp)
{
	EWRITE(rec, 1, rec->length + sizeof(TRECHEADER), fp);
}

/*
 * write a line to output
 */
void
putline(RECHEADER *rec, FILE *fp)
{
	EWRITE(rec->data+rec->offset, 1, rec->length - rec->offset, fp);
}

/*
 * get a record from a temporary file. (Used by merge sort.)
 */
int
geteasy(int flno, union f_handle filelist, int nfiles, RECHEADER *rec,
    u_char *end, struct field *dummy2)
{
	int i;
	FILE *fp;

	fp = fstack[flno].fp;
	if ((u_char *) rec > end - sizeof(TRECHEADER))
		return (BUFFEND);
	if (!fread(rec, 1, sizeof(TRECHEADER), fp)) {
		fclose(fp);
		fstack[flno].fp = 0;
		return (EOF);
	}
	if (end - rec->data < rec->length) {
		for (i = sizeof(TRECHEADER) - 1; i >= 0;  i--)
			ungetc(*((char *) rec + i), fp);
		return (BUFFEND);
	}
	fread(rec->data, rec->length, 1, fp);
	return (0);
}
@


1.13
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: files.c,v 1.12 2005/08/18 14:56:25 jaredy Exp $	*/
@


1.12
log
@Properly initialize 'end' in seq(), fixing a crash
on input with long lines when the -n flag is given.

ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: files.c,v 1.11 2004/07/20 03:50:27 deraadt Exp $	*/
a33 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)files.c	8.1 (Berkeley) 6/6/93";
#else
static char rcsid[] = "$OpenBSD: files.c,v 1.11 2004/07/20 03:50:27 deraadt Exp $";
#endif
#endif /* not lint */
@


1.11
log
@ansi; khalek@@linuxgamers.net
@
text
@d1 1
a1 1
/*	$OpenBSD: files.c,v 1.10 2003/11/15 05:56:28 tedu Exp $	*/
d39 1
a39 1
static char rcsid[] = "$OpenBSD: files.c,v 1.10 2003/11/15 05:56:28 tedu Exp $";
a269 1
		end = buf + linebuf_size;
d273 1
@


1.10
log
@preferred spelling
@
text
@d1 1
a1 1
/*	$OpenBSD: files.c,v 1.9 2003/06/03 02:56:16 millert Exp $	*/
d39 1
a39 1
static char rcsid[] = "$OpenBSD: files.c,v 1.9 2003/06/03 02:56:16 millert Exp $";
d55 2
a56 7
getnext(binno, infl0, nfiles, pos, end, dummy)
	int binno;
	union f_handle infl0;
	int nfiles;
	RECHEADER *pos;
	u_char *end;
	struct field *dummy;
d122 2
a123 7
makeline(flno, filelist, nfiles, buffer, bufend, dummy2)
	int flno;
	union f_handle filelist;
	int nfiles;
	RECHEADER *buffer;
	u_char *bufend;
	struct field *dummy2;
d202 2
a203 6
makekey(flno, filelist, nfiles, buffer, bufend, ftbl)
	int flno, nfiles;
	union f_handle filelist;
	RECHEADER *buffer;
	u_char *bufend;
	struct field *ftbl;
d261 1
a261 4
seq(fp, line, key)
	FILE *fp;
	DBT *line;
	DBT *key;
d303 1
a303 3
putrec(rec, fp)
	RECHEADER *rec;
	FILE *fp;
d312 1
a312 3
putline(rec, fp)
	RECHEADER *rec;
	FILE *fp;
d321 2
a322 6
geteasy(flno, filelist, nfiles, rec, end, dummy2)
	int flno, nfiles;
	union f_handle filelist;
	RECHEADER *rec;
	u_char *end;
	struct field *dummy2;
@


1.9
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: files.c,v 1.8 2002/02/16 21:27:52 millert Exp $	*/
d39 1
a39 1
static char rcsid[] = "$OpenBSD: files.c,v 1.8 2002/02/16 21:27:52 millert Exp $";
d150 1
a150 1
		 * The former is perferred, realloc is only done when
@


1.8
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: files.c,v 1.7 2001/02/04 21:27:00 ericj Exp $	*/
d18 1
a18 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d39 1
a39 1
static char rcsid[] = "$OpenBSD: files.c,v 1.7 2001/02/04 21:27:00 ericj Exp $";
@


1.7
log
@
Bring in some recent fixup's from NetBSD. This allows lines longer than 65522
to be properly sorted. Many other cleanup's done, and depreciate register.
millert@@ and deraadt@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: files.c,v 1.6 2000/06/30 16:00:23 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: files.c,v 1.6 2000/06/30 16:00:23 millert Exp $";
d52 1
a52 1
static int	seq __P((FILE *, DBT *, DBT *));
@


1.6
log
@warnx?/errx? paranoia (use "%s" not a bare string unless it is a
constant).  These are not security holes but it is worth fixing
them anyway both for robustness and so folks looking for examples
in the tree are not misled into doing something potentially dangerous.
Furthermore, it is a bad idea to assume that pathnames will not
include '%' in them and that error routines don't return strings
with '%' in them (especially in light of the possibility of locales).
@
text
@d1 1
a1 1
/*	$OpenBSD: files.c,v 1.5 1997/06/30 05:36:16 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: files.c,v 1.5 1997/06/30 05:36:16 millert Exp $";
d52 2
d63 2
a64 2
	register RECHEADER *pos;
	register u_char *end;
d67 3
a69 3
	register int i;
	register u_char *hp;
	static int nleft = 0;
d91 1
a91 3
			hp = (u_char *) &nleft;
			for (i = sizeof(TRECHEADER); i; --i)
				*hp++ = getc(fp);
d112 1
a112 3
	hp = (u_char *) pos;
	for (i = sizeof(TRECHEADER); i ; --i)
		*hp++ = (u_char) getc(fp);
d114 1
d139 3
a141 2
	static char *opos;
	register char *end, *pos;
d144 1
a144 1
	register int c;
a146 1
	end = min((char *) bufend, pos + MAXLLEN);
d148 12
a159 2
		memmove(pos, opos, bufend - (u_char *) opos);
		pos += ((char *) bufend - opos);
d172 1
a172 1
		while ((pos < end) && ((c = getc(fp)) != EOF)) {
d179 2
a180 2
		if (pos >= end && end == (char *) bufend) {
			if ((char *) buffer->data < end) {
d182 2
a183 1
				opos = (char *) buffer->data;
a187 1
				warnx("last character not record delimiter");
d198 10
a207 2
			buffer->data[100] = '\000';
			warnx("line too long: ignoring %s...", buffer->data);
a222 1
	static int (*get)();
d227 1
a227 1
	int c;
d230 6
a235 3
		overflow = 0;
		enterkey(buffer, line, bufend - (u_char *) buffer, ftbl);
		return (0);
d237 1
a239 1
			get = seq;
a248 1
			get = seq;
d250 2
a251 2
		if (!(c = get(dbdesc, line, dbkey))) {
			if ((signed)line->size > bufend - buffer->data)
d253 1
a253 1
			else
d256 1
d278 1
a278 1
int
d285 2
a286 2
	register char *end, *pos;
	register int c;
d291 1
a291 1
		end = buf + MAXLLEN;
d301 9
a309 6
			line->size = MAXLLEN;
			*--pos = REC_D;
			while ((c = getc(fp)) != EOF) {
				if (c == REC_D)
					return (BUFFEND);
			}
a312 1
		warnx("last character not record delimiter");
d325 2
a326 2
	register RECHEADER *rec;
	register FILE *fp;
d336 2
a337 2
	register RECHEADER *rec;
	register FILE *fp;
d349 2
a350 2
	register RECHEADER *rec;
	register u_char *end;
@


1.5
log
@64bit fixes.  Some of these are a bit bogus as there were "long"s
meant to be file offsets for fseek(3).  However, those values
could never be > an int anyay so it is not a problem.
@
text
@d1 1
a1 1
/*	$OpenBSD: files.c,v 1.4 1997/06/16 02:21:55 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: files.c,v 1.4 1997/06/16 02:21:55 millert Exp $";
d160 1
a160 1
				err(2, filelist.names[fileno]);
d228 1
a228 1
				err(2, filelist.names[fileno]);
@


1.5.12.1
log
@Pull in patch from current (even more to come):
Fix (millert):
warnx?/errx? paranoia (use "%s" not a bare string unless it is a
constant).  These are not security holes but it is worth fixing
them anyway both for robustness and so folks looking for examples
in the tree are not misled into doing something potentially dangerous.
Furthermore, it is a bad idea to assume that pathnames will not
include '%' in them and that error routines don't return strings
with '%' in them (especially in light of the possibility of locales).
@
text
@d1 1
a1 1
/*	$OpenBSD: files.c,v 1.6 2000/06/30 16:00:23 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: files.c,v 1.6 2000/06/30 16:00:23 millert Exp $";
d160 1
a160 1
				err(2, "%s", filelist.names[fileno]);
d228 1
a228 1
				err(2, "%s", filelist.names[fileno]);
@


1.4
log
@Cosmetic cleanup, mostly KNF.
@
text
@d1 1
a1 1
/*	$OpenBSD: files.c,v 1.3 1997/01/22 06:53:13 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: files.c,v 1.3 1997/01/22 06:53:13 millert Exp $";
d61 1
a61 1
	register struct recheader *pos;
d67 1
a67 1
	static long nleft = 0;
d136 1
a136 1
	struct recheader *buffer;
d202 1
a202 1
	struct recheader *buffer;
d304 1
a304 1
	register struct recheader *rec;
d315 1
a315 1
	register struct recheader *rec;
d328 1
a328 1
	register struct recheader *rec;
@


1.3
log
@Fix some err(3) usage and usage string.
@
text
@d1 1
a1 1
/*	$OpenBSD: files.c,v 1.2 1997/01/22 06:43:51 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: files.c,v 1.2 1997/01/22 06:43:51 millert Exp $";
d58 1
a58 1
	int binno, nfiles;
d60 1
d80 1
a80 1
			return(-1);
d133 1
a133 1
	int flno, nfiles;
d135 1
d154 4
a157 2
		if (flno >= 0) {
			if (!(fp = fstack[flno].fp))
a158 2
		} else if (!fp) {
			if (fileno  >= nfiles) return(EOF);
d161 1
a161 1
			++fileno;
d182 1
a182 1
				return(0);
d186 2
a187 1
			if(flno >= 0) fstack[flno].fp = 0;
d212 1
d222 1
a222 1
				return(EOF);
d229 1
a229 1
			++fileno;
d246 2
a247 1
			if (flno >= 0) fstack[flno].fp = 0;
a248 1
			
a252 1
			
d262 2
a263 1
	DBT *key, *line;
d268 1
d334 1
@


1.2
log
@Fix off-by-one differently--add an extra byte to buffer (ick).
Don't dump core on empty file.
@
text
@d1 1
a1 1
/*	$OpenBSD: files.c,v 1.1 1997/01/20 19:39:50 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: files.c,v 1.1 1997/01/20 19:39:50 millert Exp $";
d158 1
a158 1
				err(2, "%s", filelist.names[fileno]);
d224 1
a224 1
				err(2, "%s", filelist.names[fileno]);
@


1.1
log
@sort(1) from 4.4BSD-lite2 with minor tweaks and bug fixes by me.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: $";
d187 1
a187 1
			warnx("line too long:ignoring %s...", buffer->data);
@
