head	1.16;
access;
symbols
	OPENBSD_5_7:1.15.0.14
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.15.0.18
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.15.0.16
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.12
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.10
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.8
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.6
	OPENBSD_5_0:1.15.0.4
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.2
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.14.0.4
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.2
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.13.0.10
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.6
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.4
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.2
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.11.0.8
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.6
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.4
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.2
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.10.0.6
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.4
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.2
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.9.0.2
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.6.0.6
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.5.0.4
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_8:1.4.0.6
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.4
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.3.0.8
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.6
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.4
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.1.0.2
	OPENBSD_2_1_BASE:1.1;
locks; strict;
comment	@ * @;


1.16
date	2015.03.17.17.45.13;	author millert;	state dead;
branches;
next	1.15;
commitid	XCfT2rs68MOcwt0o;

1.15
date	2011.01.01.12.11.37;	author kettenis;	state Exp;
branches;
next	1.14;

1.14
date	2009.10.27.23.59.43;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2008.02.22.01.24.58;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2007.08.21.20.29.25;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2006.02.14.14.45.36;	author jmc;	state Exp;
branches;
next	1.10;

1.10
date	2004.07.20.03.50.27;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2003.09.25.02.06.40;	author tedu;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.10.22.20.51;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.03.02.56.16;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.16.21.27.52;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.02.04.21.27.00;	author ericj;	state Exp;
branches;
next	1.4;

1.4
date	99.05.24.17.57.17;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.06.30.05.36.16;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.06.16.02.21.54;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.01.20.19.39.49;	author millert;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Initial import of FreeBSD sort.
@
text
@/*	$OpenBSD: fields.c,v 1.15 2011/01/01 12:11:37 kettenis Exp $	*/

/*-
 * Copyright (c) 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Peter McIlroy.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/* Subroutines to generate sort keys. */

#include "sort.h"

#define blancmange(ptr) {					\
	if (BLANK & d_mask[*(ptr)])				\
		while (BLANK & d_mask[*(++(ptr))]);		\
}

#define NEXTCOL(pos) {						\
	if (!SEP_FLAG)						\
		while (pos < lineend && BLANK & l_d_mask[*(++pos)]);		\
	while (pos < lineend && !((FLD_D | REC_D_F) & l_d_mask[*++pos]));	\
}
		
extern u_char *enterfield(u_char *, u_char *, struct field *, int);

extern u_char *number(u_char *, u_char *, u_char *, u_char *, int);

extern struct coldesc *clist;
extern int ncols;

#define DECIMAL '.'
#define OFFSET 128

u_char TENS[10];	/* TENS[0] = REC_D <= 128 ? 130 - '0' : 2 -'0'... */
u_char NEGTENS[10];	/* NEGTENS[0] = REC_D <= 128 ? 126 + '0' : 252 +'0' */
u_char *OFF_TENS, *OFF_NTENS;	/* TENS - '0', NEGTENS - '0' */
u_char fnum[NBINS], rnum[NBINS];

/*
 * constructs sort key with leading recheader, followed by the key,
 * followed by the original line.
 */
length_t
enterkey(RECHEADER *keybuf,	/* pointer to start of key */
    DBT *line, int size, struct field fieldtable[])
{
	int i;
	u_char *l_d_mask;
	u_char *lineend, *pos;
	u_char *endkey, *keypos;
	struct coldesc *clpos;
	int col = 1;
	struct field *ftpos;
	l_d_mask = d_mask;
	pos = (u_char *) line->data - 1;
	lineend = (u_char *) line->data + line->size-1;
				/* don't include rec_delimiter */
	keypos = keybuf->data;

	for (i = 0; i < ncols; i++) {
		clpos = clist + i;
		for (; (col < clpos->num) && (pos < lineend); col++) {
			NEXTCOL(pos);
		}
		if (pos >= lineend)
			break;
		clpos->start = SEP_FLAG ? pos + 1 : pos;
		NEXTCOL(pos);
		clpos->end = pos;
		col++;
		if (pos >= lineend) {
			clpos->end = lineend;
			i++;
			break;
		}
	}
	for (; i <= ncols; i++)
		clist[i].start = clist[i].end = lineend;
	if (clist[0].start < (u_char *) line->data)
		clist[0].start++;
	endkey = (u_char *) keybuf + size - line->size;
	for (ftpos = fieldtable + 1; ftpos->icol.num; ftpos++)
		if ((keypos = enterfield(keypos, endkey, ftpos,
		    fieldtable->flags)) == NULL)
			return (1);

	if (UNIQUE || STABLE)
		*(keypos-1) = REC_D;
	keybuf->offset = keypos - keybuf->data;
	keybuf->length = keybuf->offset + line->size;
	if (keybuf->length + sizeof(TRECHEADER) > size)
		return (1);		/* line too long for buffer */
	memcpy(keybuf->data + keybuf->offset, line->data, line->size);
	return (0);
}

/*
 * constructs a field (as defined by -k) within a key
 */
u_char *
enterfield(u_char *tablepos, u_char *endkey, struct field *cur_fld, int gflags)
{
	u_char *start, *end, *lineend, *mask, *lweight;
	struct column icol, tcol;
	u_int flags;
	u_int Rflag;

	icol = cur_fld->icol;
	tcol = cur_fld->tcol;
	flags = cur_fld->flags;
	start = icol.p->start;
	lineend = clist[ncols].end;
	if (flags & BI)
		blancmange(start);
	start += icol.indent;
	start = min(start, lineend);

	if (!tcol.num)
		end = lineend;
	else {
		if (tcol.indent) {
			end = tcol.p->start;
			if (flags & BT)
				blancmange(end);
			end += tcol.indent;
			end = min(end, lineend);
		} else
			end = tcol.p->end;
	}
	if (flags & N) {
		Rflag = (gflags & R ) ^ (flags & R) ? 1 : 0;
		tablepos = number(tablepos, endkey, start, end, Rflag);
		return (tablepos);
	}
	mask = alltable;
	mask = cur_fld->mask;
	lweight = cur_fld->weights;	
	for (; start < end; start++)
		if (mask[*start]) {
			if (*start <= 1) {
				if (tablepos + 2 >= endkey)
					return (NULL);
				*tablepos++ = lweight[1];
				*tablepos++ = lweight[*start ? 2 : 1];
			} else {
				if (tablepos + 1 >= endkey)
					return (NULL);
				*tablepos++ = lweight[*start];
			}
		}
	*tablepos++ = lweight[0];
	return (tablepos == endkey ? NULL : tablepos);
}

/* Uses the first bin to assign sign, expsign, 0, and the first
 * 61 out of the exponent ( (254 - 3 origins - 4 over/underflows)/4 = 61 ).
 *   When sorting in forward order:
 * use (0-99) -> (130->240) for sorting the mantissa if REC_D <=128;
 * else use (0-99)->(2-102).
 * If the exponent is >=61, use another byte for each additional 253
 * in the exponent. Cutoff is at 567.
 * To avoid confusing the exponent and the mantissa, use a field delimiter
 * if the exponent is exactly 61, 61+252, etc--this is ok, since it's the
 * only time a field delimiter can come in that position.
 * Reverse order is done analogously.
 */

u_char *
number(u_char *pos, u_char *bufend, u_char *line, u_char *lineend, int Rflag)
{
	int or_sign, parity = 0;
	int expincr = 1, exponent = -1;
	int bite, expsign = 1, sign = 1, zeroskip = 0;
	u_char lastvalue, *tline, *C_TENS;
	u_char *nweights;

	if (Rflag)
		nweights = rnum;
	else
		nweights = fnum;
	if (pos > bufend - 8)
		return (NULL);
	/*
	 * or_sign sets the sort direction:
	 *	(-r: +/-)(sign: +/-)(expsign: +/-)
	 */
	or_sign = sign ^ expsign ^ Rflag;
	blancmange(line);
	if (*line == '-') {	/* set the sign */
		or_sign ^= 1;
		sign = 0;
		line++;
	}
	/* eat initial zeroes */
	for (; *line == '0' && line < lineend; line++)
		zeroskip = 1;
	/* calculate exponents < 0 */
	if (*line == DECIMAL) {
		exponent = 1;
		while (*++line == '0' && line < lineend)
			exponent++;
		expincr = 0;
		expsign = 0;
	}
	/* next character better be a digit */
	if (*line < '1' || *line > '9' || line >= lineend) {
		if (!zeroskip) {
			*pos++ = nweights[127];
			return (pos);
		}
	}
	if (expincr) {
		for (tline = line-1; *++tline >= '0' && 
		    *tline <= '9' && tline < lineend;)
			exponent++;
	}
	if (exponent > 567) {
		*pos++ = nweights[sign ? (expsign ? 254 : 128)
					: (expsign ? 0 : 126)];
		warnx("exponent out of bounds");
		return (pos);
	}
	bite = min(exponent, 61);
	*pos++ = nweights[(sign) ? (expsign ? 189+bite : 189-bite)
				: (expsign ? 64-bite : 64+bite)];
	if (bite >= 61) {
		do {
			exponent -= bite;
			bite = min(exponent, 254);
			*pos++ = nweights[or_sign ? 254-bite : bite];
		} while (bite == 254);
	}
	C_TENS = or_sign ? OFF_NTENS : OFF_TENS;
	for (; line < lineend; line++) {
		if (*line >= '0' && *line <= '9') {
			if (parity) {
				*pos++ = C_TENS[lastvalue] + (or_sign ? - *line
						: *line);
				if (pos == bufend)
					return (NULL);
			} else
				lastvalue = *line;
			parity ^= 1;
		} else if(*line == DECIMAL) {
			if(!expincr)	/* a decimal already occurred once */
				break;
			expincr = 0;
		} else
			break;
	}
	if (parity) {
		*pos++ = or_sign ? OFF_NTENS[lastvalue] - '0' :
					OFF_TENS[lastvalue] + '0';
	}
	if (pos > bufend-1)
		return (NULL);
	*pos++ = or_sign ? nweights[254] : nweights[0];
	return (pos);
}

/* This forces a gap around the record delimiter
 * Thus fnum has values over (0,254) -> ((0,REC_D-1),(REC_D+1,255));
 * rnum over (0,254) -> (255,REC_D+1),(REC_D-1,0))
 */
void
num_init(void)
{
	int i;
	TENS[0] = REC_D <=128 ? 130 - '0' : 2 - '0';
	NEGTENS[0] = REC_D <=128 ? 126 + '0' : 254 + '0';
	OFF_TENS = TENS - '0';
	OFF_NTENS = NEGTENS - '0';
	for (i = 1; i < 10; i++) {
		TENS[i] = TENS[i - 1] + 10;
		NEGTENS[i] = NEGTENS[i - 1] - 10;
	}
	for (i = 0; i < REC_D; i++) {
		fnum[i] = i;
		rnum[255 - i] = i;
	}
	for (i = REC_D; i <255; i++) {
		fnum[i] = i + 1;
		rnum[255 - i] = i - 1;
	}
}
@


1.15
log
@Stop enterfield() from writing beyond the end of the buffer.
Fixes PR 6294.

ok tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fields.c,v 1.14 2009/10/27 23:59:43 deraadt Exp $	*/
@


1.14
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: fields.c,v 1.13 2008/02/22 01:24:58 millert Exp $	*/
d167 1
a167 1
				if (tablepos+2 >= endkey)
d172 2
a174 2
				if (tablepos == endkey)
					return (NULL);
@


1.13
log
@Fix the processing of numbers containing zeroes in -n (numeric)
mode.  Incororates part of a change from jdolecek@@netbsd.org.
Fixes PR 5739.  OK beck@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fields.c,v 1.12 2007/08/21 20:29:25 millert Exp $	*/
a33 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)fields.c	8.1 (Berkeley) 6/6/93";
#else
static char rcsid[] = "$OpenBSD: fields.c,v 1.12 2007/08/21 20:29:25 millert Exp $";
#endif
#endif /* not lint */
@


1.12
log
@Add a -s option to make the radix sort be a stable sort.  Based on
a diff from Eric Gouyer.  Closes PR 5553.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fields.c,v 1.11 2006/02/14 14:45:36 jmc Exp $	*/
d39 1
a39 1
static char rcsid[] = "$OpenBSD: fields.c,v 1.11 2006/02/14 14:45:36 jmc Exp $";
d207 2
a208 2
	int bite, expsign = 1, sign = 1;
	u_char lastvalue, *nonzero, *tline, *C_TENS;
d230 1
a230 1
		;
d241 4
a244 2
		*pos++ = nweights[127];
		return (pos);
a274 2
				if (*line != '0' || lastvalue != '0')
					nonzero = pos;	
d285 1
a285 1
	if (parity && lastvalue != '0') {
d288 1
a288 2
	} else
		pos = nonzero;	
@


1.11
log
@typo in comment; from ray lai
@
text
@d1 1
a1 1
/*	$OpenBSD: fields.c,v 1.10 2004/07/20 03:50:27 deraadt Exp $	*/
d39 1
a39 1
static char rcsid[] = "$OpenBSD: fields.c,v 1.10 2004/07/20 03:50:27 deraadt Exp $";
d121 1
a121 1
	if (UNIQUE)
d199 1
a199 1
 * Reverse order is done analagously.
@


1.10
log
@ansi; khalek@@linuxgamers.net
@
text
@d1 1
a1 1
/*	$OpenBSD: fields.c,v 1.9 2003/09/25 02:06:40 tedu Exp $	*/
d39 1
a39 1
static char rcsid[] = "$OpenBSD: fields.c,v 1.9 2003/09/25 02:06:40 tedu Exp $";
d297 1
a297 1
 * Thus fnum has vaues over (0,254) -> ((0,REC_D-1),(REC_D+1,255));
@


1.9
log
@don't run out of bounds.  fixes david's crash during regress.
ok david deraadt millert
@
text
@d1 1
a1 1
/*	$OpenBSD: fields.c,v 1.8 2003/06/10 22:20:51 deraadt Exp $	*/
d39 1
a39 1
static char rcsid[] = "$OpenBSD: fields.c,v 1.8 2003/06/10 22:20:51 deraadt Exp $";
d78 2
a79 5
enterkey(keybuf, line, size, fieldtable)
	RECHEADER *keybuf;	/* pointer to start of key */
	DBT *line;
	int size;
	struct field fieldtable[];
d135 1
a135 4
enterfield(tablepos, endkey, cur_fld, gflags)
	struct field *cur_fld;
	u_char *tablepos, *endkey;
	int gflags;
d203 1
a203 3
number(pos, bufend, line, lineend, Rflag)
	u_char *line, *pos, *bufend, *lineend;
	int Rflag;
@


1.8
log
@mostly ansi cleanup; pval ok
@
text
@d1 1
a1 1
/*	$OpenBSD: fields.c,v 1.7 2003/06/03 02:56:16 millert Exp $	*/
d39 1
a39 1
static char rcsid[] = "$OpenBSD: fields.c,v 1.7 2003/06/03 02:56:16 millert Exp $";
d54 2
a55 2
		while (BLANK & l_d_mask[*(++pos)]);		\
	while (!((FLD_D | REC_D_F) & l_d_mask[*++pos]));	\
@


1.7
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: fields.c,v 1.6 2002/02/16 21:27:52 millert Exp $	*/
d39 1
a39 1
static char rcsid[] = "$OpenBSD: fields.c,v 1.6 2002/02/16 21:27:52 millert Exp $";
d309 1
a309 1
num_init()
@


1.6
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: fields.c,v 1.5 2001/02/04 21:27:00 ericj Exp $	*/
d18 1
a18 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d39 1
a39 1
static char rcsid[] = "$OpenBSD: fields.c,v 1.5 2001/02/04 21:27:00 ericj Exp $";
@


1.5
log
@
Bring in some recent fixup's from NetBSD. This allows lines longer than 65522
to be properly sorted. Many other cleanup's done, and depreciate register.
millert@@ and deraadt@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: fields.c,v 1.4 1999/05/24 17:57:17 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: fields.c,v 1.4 1999/05/24 17:57:17 millert Exp $";
d62 1
a62 1
extern u_char *enterfield __P((u_char *, u_char *, struct field *, int));
d64 1
a64 1
extern u_char *number __P((u_char *, u_char *, u_char *, u_char *, int));
@


1.4
log
@Dynamically allocate memory for structures whose sizes are based on the
number of keys given.  Closes PR #825.
@
text
@d1 1
a1 1
/*	$OpenBSD: fields.c,v 1.3 1997/06/30 05:36:16 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: fields.c,v 1.3 1997/06/30 05:36:16 millert Exp $";
d89 2
a90 2
	register u_char *l_d_mask;
	register u_char *lineend, *pos;
d92 2
a93 2
	register struct coldesc *clpos;
	register int col = 1;
d103 3
a105 2
		for (; (col < clpos->num) && (pos < lineend); col++)
			{ NEXTCOL(pos); }
d144 1
a144 1
	register u_char *tablepos, *endkey;
d147 1
a147 1
	register u_char *start, *end, *lineend, *mask, *lweight;
d149 1
a149 1
	register u_int flags;
d214 1
a214 1
	register u_char *line, *pos, *bufend, *lineend;
d217 2
a218 2
	register int or_sign, parity = 0;
	register int expincr = 1, exponent = -1;
d220 1
a220 1
	register u_char lastvalue, *nonzero, *tline, *C_TENS;
@


1.3
log
@64bit fixes.  Some of these are a bit bogus as there were "long"s
meant to be file offsets for fseek(3).  However, those values
could never be > an int anyay so it is not a problem.
@
text
@d1 1
a1 1
/*	$OpenBSD: fields.c,v 1.2 1997/06/16 02:21:54 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: fields.c,v 1.2 1997/06/16 02:21:54 millert Exp $";
d66 1
a66 1
extern struct coldesc clist[(ND+1)*2];
@


1.2
log
@Cosmetic cleanup, mostly KNF.
@
text
@d1 1
a1 1
/*	$OpenBSD: fields.c,v 1.1 1997/01/20 19:39:49 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: fields.c,v 1.1 1997/01/20 19:39:49 millert Exp $";
d83 1
a83 1
	struct recheader *keybuf;	/* pointer to start of key */
@


1.1
log
@sort(1) from 4.4BSD-lite2 with minor tweaks and bug fixes by me.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: $";
d113 1
a113 1
			++i;
d120 1
a120 1
		++clist[0].start;
d150 1
d160 1
d166 2
a167 1
			if (flags & BT) blancmange(end);
d191 1
a191 1
				return (NULL);
d209 1
a209 1
*/
d228 4
a231 2
	/* or_sign sets the sort direction:
	 *	(-r: +/-)(sign: +/-)(expsign: +/-) */
d240 2
a241 1
	for (; *line == '0' && line < lineend; line++);
d310 1
a310 1
*/
d320 2
a321 2
		TENS[i] = TENS[i-1] + 10;
		NEGTENS[i] = NEGTENS[i-1] - 10;
d325 1
a325 1
		rnum[255-i] = i;
d328 2
a329 2
		fnum[i] = i+1;
		rnum[255-i] = i-1;
@
