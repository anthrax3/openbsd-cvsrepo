head	1.26;
access;
symbols
	OPENBSD_5_7:1.25.0.2
	OPENBSD_5_7_BASE:1.25
	OPENBSD_5_6:1.24.0.6
	OPENBSD_5_6_BASE:1.24
	OPENBSD_5_5:1.24.0.4
	OPENBSD_5_5_BASE:1.24
	OPENBSD_5_4:1.23.0.16
	OPENBSD_5_4_BASE:1.23
	OPENBSD_5_3:1.23.0.14
	OPENBSD_5_3_BASE:1.23
	OPENBSD_5_2:1.23.0.12
	OPENBSD_5_2_BASE:1.23
	OPENBSD_5_1_BASE:1.23
	OPENBSD_5_1:1.23.0.10
	OPENBSD_5_0:1.23.0.8
	OPENBSD_5_0_BASE:1.23
	OPENBSD_4_9:1.23.0.6
	OPENBSD_4_9_BASE:1.23
	OPENBSD_4_8:1.23.0.4
	OPENBSD_4_8_BASE:1.23
	OPENBSD_4_7:1.23.0.2
	OPENBSD_4_7_BASE:1.23
	OPENBSD_4_6:1.21.0.10
	OPENBSD_4_6_BASE:1.21
	OPENBSD_4_5:1.21.0.6
	OPENBSD_4_5_BASE:1.21
	OPENBSD_4_4:1.21.0.4
	OPENBSD_4_4_BASE:1.21
	OPENBSD_4_3:1.21.0.2
	OPENBSD_4_3_BASE:1.21
	OPENBSD_4_2:1.20.0.2
	OPENBSD_4_2_BASE:1.20
	OPENBSD_4_1:1.19.0.2
	OPENBSD_4_1_BASE:1.19
	OPENBSD_4_0:1.14.0.10
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.14.0.8
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.14.0.6
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.14.0.4
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.14.0.2
	OPENBSD_3_6_BASE:1.14
	OPENBSD_3_5:1.13.0.4
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.11.0.6
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.4
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.11.0.2
	OPENBSD_3_1_BASE:1.11
	OPENBSD_3_0:1.9.0.4
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_9:1.9.0.2
	OPENBSD_2_8:1.8.0.2
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.7.0.4
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.7.0.2
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.6.0.8
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.6
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.4
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.2
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3;
locks; strict;
comment	@ * @;


1.26
date	2015.03.17.17.45.13;	author millert;	state dead;
branches;
next	1.25;
commitid	XCfT2rs68MOcwt0o;

1.25
date	2015.01.16.06.40.12;	author deraadt;	state Exp;
branches;
next	1.24;
commitid	Uu5nFG3wCl0LACBb;

1.24
date	2013.11.13.15.07.27;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	2009.12.22.19.47.02;	author schwarze;	state Exp;
branches;
next	1.22;

1.22
date	2009.10.27.23.59.43;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2007.08.21.20.29.25;	author millert;	state Exp;
branches;
next	1.20;

1.20
date	2007.03.13.17.33.58;	author millert;	state Exp;
branches;
next	1.19;

1.19
date	2007.03.11.00.38.01;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2007.03.07.18.11.03;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2006.10.29.18.40.34;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2006.10.28.21.14.29;	author naddy;	state Exp;
branches;
next	1.15;

1.15
date	2006.10.18.23.30.43;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2004.07.20.03.50.27;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.26.00.12.39;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.03.02.56.16;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2002.02.16.21.27.52;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2002.01.04.16.33.14;	author art;	state Exp;
branches;
next	1.9;

1.9
date	2001.02.04.21.27.01;	author ericj;	state Exp;
branches;
next	1.8;

1.8
date	2000.06.30.16.00.23;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	99.05.24.17.57.18;	author millert;	state Exp;
branches
	1.7.4.1;
next	1.6;

1.6
date	97.06.30.05.36.17;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.06.30.04.24.40;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.06.16.02.21.56;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.01.22.06.53.15;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.01.22.06.43.53;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.01.20.19.39.53;	author millert;	state Exp;
branches;
next	;

1.7.4.1
date	2000.10.06.21.16.17;	author jason;	state Exp;
branches;
next	;


desc
@@


1.26
log
@Initial import of FreeBSD sort.
@
text
@/*	$OpenBSD: msort.c,v 1.25 2015/01/16 06:40:12 deraadt Exp $	*/

/*-
 * Copyright (c) 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Peter McIlroy.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/param.h>	/* ALIGN */

#include "sort.h"
#include "fsort.h"

#include <stdlib.h>
#include <string.h>
#include <unistd.h>

/* Subroutines using comparisons: merge sort and check order */
#define DELETE (1)
#define LALIGN(n) ((n+(sizeof(long)-1)) & ~(sizeof(long)-1))

typedef struct mfile {
	u_char *end;
	short flno;
	RECHEADER rec[1];
} MFILE;
static u_char *wts, *wts1;
static struct mfile *cfilebuf;
static char *buffer;
static size_t bufsize;

static int cmp(RECHEADER *, RECHEADER *);
static int insert(struct mfile **, struct mfile **, int, int);

void
fmerge(int binno, union f_handle files, int nfiles,
    int (*get)(int, union f_handle, int, RECHEADER *, u_char *, struct field *),
    FILE *outfp, void (*fput)(RECHEADER *, FILE *), struct field *ftbl)
{
	FILE *tout;
	int i, j, last;
	void (*put)(RECHEADER *, FILE *);
	struct tempfile *l_fstack;

	wts = ftbl->weights;
	if (!UNIQUE && SINGL_FLD && (ftbl->flags & F))
		wts1 = (ftbl->flags & R) ? Rascii : ascii;
	if (cfilebuf == NULL) {
		cfilebuf = malloc(MAXLLEN + sizeof(MFILE));
		if (cfilebuf == NULL)
			errx(2, "cannot allocate memory");
	}

	i = min(16, nfiles) * LALIGN(MAXLLEN + sizeof(MFILE));
	if (i > bufsize) {
		bufsize = i;
		if ((buffer = realloc(buffer, bufsize)) == NULL)
			err(2, NULL);
	}

	if (binno >= 0)
		l_fstack = fstack + files.top;
	else
		l_fstack = fstack;

	while (nfiles) {
		put = putrec;
		for (j = 0; j < nfiles; j += 16) {
			if (nfiles <= 16) {
				tout = outfp;
				put = fput;
			}
			else
				tout = ftmp();
			last = min(16, nfiles - j);
			if (binno < 0) {
				for (i = 0; i < last; i++)
					if (!(l_fstack[i+MAXFCT-1-16].fp =
					    fopen(files.names[j + i], "r")))
						err(2, "%s", files.names[j+i]);
				merge(MAXFCT-1-16, last, get, tout, put, ftbl);
			} else {
				for (i = 0; i< last; i++)
					rewind(l_fstack[i+j].fp);
				merge(files.top+j, last, get, tout, put, ftbl);
			}
			if (nfiles > 16)
				l_fstack[j/16].fp = tout;
		}
		nfiles = (nfiles + 15) / 16;
		if (nfiles == 1)
			nfiles = 0;
		if (binno < 0) {
			binno = 0;
			get = geteasy;
			files.top = 0;
		}
	}
}

void
merge(int infl0, int nfiles,
    int (*get)(int, union f_handle, int, RECHEADER *, u_char *, struct field *),
    FILE *outfp, void (*put)(RECHEADER *, FILE *), struct field *ftbl)
{
	int c, i, j;
	union f_handle dummy = {0};
	struct mfile *flist[16], *cfile;

	for (i = j = 0; i < nfiles; i++) {
		cfile = (MFILE *) (buffer +
		    i * LALIGN(MAXLLEN + sizeof(MFILE)));
		cfile->flno = j + infl0;
		cfile->end = cfile->rec->data + MAXLLEN;
		for (c = 1; c == 1;) {
			if (EOF == (c = get(j+infl0, dummy, nfiles,
			   cfile->rec, cfile->end, ftbl))) {
				i--;
				nfiles--;
				break;
			}
			if (i)
				c = insert(flist, &cfile, i, !DELETE);
			else
				flist[0] = cfile;
		}
		j++;
	}
	if (nfiles > 0) {
		cfile = cfilebuf;
		cfile->flno = flist[0]->flno;
		cfile->end = cfile->rec->data + MAXLLEN;
		while (nfiles) {
			for (c = 1; c == 1;) {
				if (EOF == (c = get(cfile->flno, dummy, nfiles,
				   cfile->rec, cfile->end, ftbl))) {
					put(flist[0]->rec, outfp);
					memmove(flist, flist + 1,
					    sizeof(MFILE *) * (--nfiles));
					cfile->flno = flist[0]->flno;
					break;
				}
				if (!(c = insert(flist, &cfile, nfiles, DELETE)))
					put(cfile->rec, outfp);
			}
		}	
	}	
}

/*
 * if delete: inserts *rec in flist, deletes flist[0], and leaves it in *rec;
 * otherwise just inserts *rec in flist.
 */
static int
insert(struct mfile **flist, struct mfile **rec, int ttop,
    int delete)			/* delete = 0 or 1 */
{
	struct mfile *tmprec;
	int top, mid, bot = 0, cmpv = 1;
	tmprec = *rec;
	top = ttop;
	for (mid = top/2; bot +1 != top; mid = (bot+top)/2) {
		cmpv = cmp(tmprec->rec, flist[mid]->rec);
		if (cmpv < 0)
			top = mid;
		else if (cmpv > 0)
			bot = mid;
		else {
			if (!UNIQUE)
				bot = mid - 1;
			break;
		}
	}
	if (delete) {
		if (UNIQUE) {
			if (!bot && cmpv)
				cmpv = cmp(tmprec->rec, flist[0]->rec);
			if (!cmpv)
				return (1);
		}
		tmprec = flist[0];
		if (bot)
			memmove(flist, flist+1, bot * sizeof(MFILE **));
		flist[bot] = *rec;
		*rec = tmprec;
		(*rec)->flno = (*flist)->flno;
		return (0);
	}
	else {
		if (!bot && !(UNIQUE && !cmpv)) {
			cmpv = cmp(tmprec->rec, flist[0]->rec);
			if (cmpv < 0)
				bot = -1;
		}
		if (UNIQUE && !cmpv)
			return (1);
		bot++;
		memmove(flist + bot+1, flist + bot,
		    (ttop - bot) * sizeof(MFILE **));
		flist[bot] = *rec;
		return (0);
	}
}

/*
 * check order on one file
 */
void
order(union f_handle infile,
    int (*get)(int, union f_handle, int, RECHEADER *, u_char *, struct field *),
    struct field *ftbl,
    int c_warn)
{
	u_char *crec_end, *prec_end, *trec_end;
	int c;
	RECHEADER *crec, *prec, *trec;

	if (bufsize < 2 * ALIGN(MAXLLEN + sizeof(RECHEADER))) {
		bufsize = 2 * ALIGN(MAXLLEN + sizeof(RECHEADER));
		if ((buffer = realloc(buffer, bufsize)) == NULL)
			err(2, NULL);
	}
	crec = (RECHEADER *) buffer;
	crec_end = ((char *)crec) + ALIGN(MAXLLEN + sizeof(RECHEADER));
	prec = (RECHEADER *) crec_end;
	prec_end = ((char *)prec) + ALIGN(MAXLLEN + sizeof(RECHEADER));
	wts = ftbl->weights;
	if (SINGL_FLD && (ftbl->flags & F))
		wts1 = ftbl->flags & R ? Rascii : ascii;
	else
		wts1 = 0;
	if (get(-1, infile, 1, prec, prec_end, ftbl) == 0)
		while (get(-1, infile, 1, crec, crec_end, ftbl) == 0) {
			if (0 < (c = cmp(prec, crec))) {
				crec->data[crec->length-1] = 0;
				if (c_warn)
					errx(1, "found disorder: %s",
					    crec->data+crec->offset);
				else
					exit(1);
			}
			if (UNIQUE && !c) {
				crec->data[crec->length-1] = 0;
				if (c_warn)
					errx(1, "found non-uniqueness: %s",
					    crec->data+crec->offset);
				else
					exit(1);
			}
			/* Swap pointers so that this record is on place
			 * pointed to by prec and new record is read to place
			 * pointed to by crec.
			 */
			trec = prec;
			prec = crec;
			crec = trec;
			trec_end = prec_end;
			prec_end = crec_end;
			crec_end = trec_end;
		}
	exit(0);
}

static int
cmp(RECHEADER *rec1, RECHEADER *rec2)
{
	int r;
	u_char *pos1, *pos2, *end;
	u_char *cwts;
	for (cwts = wts; cwts; cwts = (cwts == wts1 ? 0 : wts1)) {
		pos1 = rec1->data;
		pos2 = rec2->data;
		if (!SINGL_FLD && (UNIQUE || STABLE))
			end = pos1 + min(rec1->offset, rec2->offset);
		else
			end = pos1 + min(rec1->length, rec2->length);
		for (; pos1 < end; ) {
			if ((r = cwts[*pos1++] - cwts[*pos2++]))
				return (r);
		}
	}
	return (0);
}
@


1.25
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: msort.c,v 1.24 2013/11/13 15:07:27 deraadt Exp $	*/
@


1.24
log
@repair buffer resizing "undershoot", and some minor issues with
math on void *
assistance from guenther, ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: msort.c,v 1.23 2009/12/22 19:47:02 schwarze Exp $	*/
d34 2
@


1.23
log
@implement -C (silent -c), required by POSIX.1-2008;
patch from Daniel Dickman <didickman at gmail dot com> tweaked by me;
"looks ok" millert@@, manual help and ok jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: msort.c,v 1.22 2009/10/27 23:59:43 deraadt Exp $	*/
d53 1
a53 1
static void *buffer;
@


1.22
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: msort.c,v 1.21 2007/08/21 20:29:25 millert Exp $	*/
d235 2
a236 1
    struct field *ftbl)
d260 5
a264 2
				errx(1, "found disorder: %s",
				    crec->data+crec->offset);
d268 5
a272 2
				errx(1, "found non-uniqueness: %s",
				    crec->data+crec->offset);
@


1.21
log
@Add a -s option to make the radix sort be a stable sort.  Based on
a diff from Eric Gouyer.  Closes PR 5553.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: msort.c,v 1.20 2007/03/13 17:33:58 millert Exp $	*/
a33 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)msort.c	8.1 (Berkeley) 6/6/93";
#else
static char rcsid[] = "$OpenBSD: msort.c,v 1.20 2007/03/13 17:33:58 millert Exp $";
#endif
#endif /* not lint */
@


1.20
log
@Use separate buffers in fsort.c and msort.c.  Fixes a problem with
buffer corruptions for some very large files.  Also fixes some
TRECHEADER vs. RECHEADER mismatches.  Back in after unlock.
@
text
@d1 1
a1 1
/*	$OpenBSD: msort.c,v 1.18 2007/03/07 18:11:03 millert Exp $	*/
d39 1
a39 1
static char rcsid[] = "$OpenBSD: msort.c,v 1.18 2007/03/07 18:11:03 millert Exp $";
d298 1
a298 1
		if (!SINGL_FLD && UNIQUE)
@


1.19
log
@some bug (in sort?  or compiler) gets hit too late in the release cycle.
please try again right after release.
@
text
@d1 1
a1 1
/*	$OpenBSD: msort.c,v 1.17 2006/10/29 18:40:34 millert Exp $	*/
d39 1
a39 1
static char rcsid[] = "$OpenBSD: msort.c,v 1.17 2006/10/29 18:40:34 millert Exp $";
d59 4
a62 7
typedef struct tmfile {
	u_char *end;
	short flno;
	TRECHEADER rec[1];
} TMFILE;
u_char *wts, *wts1 = 0;
struct mfile *cfilebuf;
d80 2
a81 2
	if (!cfilebuf) {
		cfilebuf = malloc(MAXLLEN + sizeof(TMFILE));
d86 1
a86 1
	i = min(16, nfiles) * LALIGN(MAXLLEN+sizeof(TMFILE));
d88 3
a90 7
		do {
			bufsize *= 2;
		} while  (i > bufsize);
		buffer = realloc(buffer, bufsize);
		if (!buffer)
			errx(2, "cannot allocate memory");
		bufend = buffer + bufsize - 1;
d144 1
a144 1
		    i * LALIGN(MAXLLEN + sizeof(TMFILE)));
d249 2
a250 4
	if (bufsize < 2 * ALIGN(MAXLLEN + sizeof(TRECHEADER))) {
		do {
			bufsize *= 2;
		} while (bufsize < 2 * ALIGN(MAXLLEN + sizeof(TRECHEADER)));
a252 1
		bufend = buffer + bufsize - 1;
d255 1
a255 1
	crec_end = ((char *)crec) + ALIGN(MAXLLEN + sizeof(TRECHEADER));
d257 1
a257 1
	prec_end = ((char *)prec) + ALIGN(MAXLLEN + sizeof(TRECHEADER));
@


1.18
log
@Use separate buffers in fsort.c and msort.c.  Fixes a problem with
buffer corruptions for some very large files.  Also fixes some
TRECHEADER vs. RECHEADER mismatches.  OK deraadt@@ otto@@ ray@@
@
text
@d59 7
a65 4
static u_char *wts, *wts1;
static struct mfile *cfilebuf;
static void *buffer;
static size_t bufsize;
d83 2
a84 2
	if (cfilebuf == NULL) {
		cfilebuf = malloc(MAXLLEN + sizeof(MFILE));
d89 1
a89 1
	i = min(16, nfiles) * LALIGN(MAXLLEN + sizeof(MFILE));
d91 7
a97 3
		bufsize = i;
		if ((buffer = realloc(buffer, bufsize)) == NULL)
			err(2, NULL);
d151 1
a151 1
		    i * LALIGN(MAXLLEN + sizeof(MFILE)));
d256 4
a259 2
	if (bufsize < 2 * ALIGN(MAXLLEN + sizeof(RECHEADER))) {
		bufsize = 2 * ALIGN(MAXLLEN + sizeof(RECHEADER));
d262 1
d265 1
a265 1
	crec_end = ((char *)crec) + ALIGN(MAXLLEN + sizeof(RECHEADER));
d267 1
a267 1
	prec_end = ((char *)prec) + ALIGN(MAXLLEN + sizeof(RECHEADER));
@


1.17
log
@Remove useless code that can cause a SEGV if a buffer is realloc()ed.
Allocate buffers early and in one place instead of two.
Make bufend global so it can be updated along with buffer.
OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: msort.c,v 1.15 2006/10/18 23:30:43 millert Exp $	*/
d39 1
a39 1
static char rcsid[] = "$OpenBSD: msort.c,v 1.15 2006/10/18 23:30:43 millert Exp $";
d59 4
a62 7
typedef struct tmfile {
	u_char *end;
	short flno;
	TRECHEADER rec[1];
} TMFILE;
u_char *wts, *wts1 = 0;
struct mfile *cfilebuf;
d80 2
a81 2
	if (!cfilebuf) {
		cfilebuf = malloc(MAXLLEN + sizeof(TMFILE));
d86 1
a86 1
	i = min(16, nfiles) * LALIGN(MAXLLEN+sizeof(TMFILE));
d88 3
a90 7
		do {
			bufsize *= 2;
		} while  (i > bufsize);
		buffer = realloc(buffer, bufsize);
		if (!buffer)
			errx(2, "cannot allocate memory");
		bufend = buffer + bufsize - 1;
d144 1
a144 1
		    i * LALIGN(MAXLLEN + sizeof(TMFILE)));
d249 2
a250 4
	if (bufsize < 2 * ALIGN(MAXLLEN + sizeof(TRECHEADER))) {
		do {
			bufsize *= 2;
		} while (bufsize < 2 * ALIGN(MAXLLEN + sizeof(TRECHEADER)));
a252 1
		bufend = buffer + bufsize - 1;
d255 1
a255 1
	crec_end = ((char *)crec) + ALIGN(MAXLLEN + sizeof(TRECHEADER));
d257 1
a257 1
	prec_end = ((char *)prec) + ALIGN(MAXLLEN + sizeof(TRECHEADER));
@


1.16
log
@revert previous change; causes segfault when called from
pkg_mklocatedb/locate.mklocatedb
@
text
@d90 5
a94 2
	if (!buffer || i > BUFSIZE) {
		buffer = buffer ? realloc(buffer, i) : malloc(i);
d97 1
a97 4
		if (!SINGL_FLD) {
			if ((linebuf = malloc(MAXLLEN)) == NULL)
				errx(2, "cannot allocate memory");
		}
d256 7
a262 3
	if (!SINGL_FLD) {
		if ((linebuf = malloc(MAXLLEN)) == NULL)
			errx(2, "cannot allocate memory");
a263 4
	buffer = malloc(2 * ALIGN((MAXLLEN + sizeof(TRECHEADER))));
	if (buffer == NULL)
		errx(2, "cannot allocate memory");

@


1.15
log
@Remove useless code that can cause a SEGV if a buffer is realloc()ed.
Allocate buffers early and in one place instead of two.
Fixes PR 5252; OK deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: msort.c,v 1.14 2004/07/20 03:50:27 deraadt Exp $	*/
d39 1
a39 1
static char rcsid[] = "$OpenBSD: msort.c,v 1.14 2004/07/20 03:50:27 deraadt Exp $";
d90 2
a91 5
	if (i > bufsize) {
		do {
			bufsize *= 2;
		} while  (i > bufsize);
		buffer = realloc(buffer, bufsize);
d94 4
d256 3
a258 6
	if (bufsize < 2 * ALIGN((MAXLLEN + sizeof(TRECHEADER)))) {
		do {
			bufsize *= 2;
		} while (bufsize < 2 * ALIGN((MAXLLEN + sizeof(TRECHEADER))));
		if ((buffer = realloc(buffer, bufsize)) == NULL)
			err(2, NULL);
d260 4
@


1.14
log
@ansi; khalek@@linuxgamers.net
@
text
@d1 1
a1 1
/*	$OpenBSD: msort.c,v 1.13 2003/06/26 00:12:39 deraadt Exp $	*/
d39 1
a39 1
static char rcsid[] = "$OpenBSD: msort.c,v 1.13 2003/06/26 00:12:39 deraadt Exp $";
d90 5
a94 2
	if (!buffer || i > BUFSIZE) {
		buffer = buffer ? realloc(buffer, i) : malloc(i);
a96 4
		if (!SINGL_FLD) {
			if ((linebuf = malloc(MAXLLEN)) == NULL)
				errx(2, "cannot allocate memory");
		}
d255 6
a260 3
	if (!SINGL_FLD) {
		if ((linebuf = malloc(MAXLLEN)) == NULL)
			errx(2, "cannot allocate memory");
a261 4
	buffer = malloc(2 * ALIGN((MAXLLEN + sizeof(TRECHEADER))));
	if (buffer == NULL)
		errx(2, "cannot allocate memory");

@


1.13
log
@protos
@
text
@d1 1
a1 1
/*	$OpenBSD: msort.c,v 1.12 2003/06/03 02:56:16 millert Exp $	*/
d39 1
a39 1
static char rcsid[] = "$OpenBSD: msort.c,v 1.12 2003/06/03 02:56:16 millert Exp $";
d71 3
a73 7
fmerge(binno, files, nfiles, get, outfp, fput, ftbl)
	union f_handle files;
	int binno, nfiles;
	int (*get)(int, union f_handle, int, RECHEADER *, u_char *, struct field *);
	FILE *outfp;
	void (*fput)(RECHEADER *, FILE *);
	struct field *ftbl;
d141 3
a143 6
merge(infl0, nfiles, get, outfp, put, ftbl)
	int infl0, nfiles;
	int (*get)(int, union f_handle, int, RECHEADER *, u_char *, struct field *);
	void (*put)(RECHEADER *, FILE *);
	FILE *outfp;
	struct field *ftbl;
d194 2
a195 3
insert(flist, rec, ttop, delete)
	struct mfile **flist, **rec;
	int delete, ttop;			/* delete = 0 or 1 */
d248 3
a250 4
order(infile, get, ftbl)
	union f_handle infile;
	int (*get)(int, union f_handle, int, RECHEADER *, u_char *, struct field *);
	struct field *ftbl;
d300 1
a300 2
cmp(rec1, rec2)
	RECHEADER *rec1, *rec2;
@


1.12
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: msort.c,v 1.11 2002/02/16 21:27:52 millert Exp $	*/
d39 1
a39 1
static char rcsid[] = "$OpenBSD: msort.c,v 1.11 2002/02/16 21:27:52 millert Exp $";
d74 1
a74 1
	int (*get)();
d76 1
a76 1
	void (*fput)();
a81 1
	extern int geteasy();
d147 1
a147 1
	int (*get)();
d258 1
a258 1
	int (*get)();
@


1.11
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: msort.c,v 1.10 2002/01/04 16:33:14 art Exp $	*/
d18 1
a18 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d39 1
a39 1
static char rcsid[] = "$OpenBSD: msort.c,v 1.10 2002/01/04 16:33:14 art Exp $";
@


1.10
log
@Align the pointers when splitting up a mallocated area.
Cures alignment faults on alpha and sparc64.
OK: niklas@@ ericj@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: msort.c,v 1.9 2001/02/04 21:27:01 ericj Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: msort.c,v 1.9 2001/02/04 21:27:01 ericj Exp $";
d71 2
a72 2
static int cmp __P((RECHEADER *, RECHEADER *));
static int insert __P((struct mfile **, struct mfile **, int, int));
@


1.9
log
@
Bring in some recent fixup's from NetBSD. This allows lines longer than 65522
to be properly sorted. Many other cleanup's done, and depreciate register.
millert@@ and deraadt@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: msort.c,v 1.8 2000/06/30 16:00:23 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: msort.c,v 1.8 2000/06/30 16:00:23 millert Exp $";
d274 1
a274 1
	buffer = malloc(2 * (MAXLLEN + sizeof(TRECHEADER)));
d277 1
d279 3
a281 3
	crec_end = buffer + MAXLLEN + sizeof(TRECHEADER);
	prec = (RECHEADER *) (buffer + MAXLLEN + sizeof(TRECHEADER));
	prec_end = buffer + 2 * (MAXLLEN + sizeof(TRECHEADER));
@


1.8
log
@warnx?/errx? paranoia (use "%s" not a bare string unless it is a
constant).  These are not security holes but it is worth fixing
them anyway both for robustness and so folks looking for examples
in the tree are not misled into doing something potentially dangerous.
Furthermore, it is a bad idea to assume that pathnames will not
include '%' in them and that error routines don't return strings
with '%' in them (especially in light of the possibility of locales).
@
text
@d1 1
a1 1
/*	$OpenBSD: msort.c,v 1.7 1999/05/24 17:57:18 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: msort.c,v 1.7 1999/05/24 17:57:18 millert Exp $";
d90 1
a90 1
	if (!UNIQUE && SINGL_FLD && ftbl->flags & F)
d210 2
a211 2
	register struct mfile *tmprec;
	register int top, mid, bot = 0, cmpv = 1;
d266 1
a266 1
	u_char *end;
a276 1
	end = buffer + 2 * (MAXLLEN + sizeof(TRECHEADER));
d278 1
d280 1
d282 1
a282 1
	if (SINGL_FLD && ftbl->flags & F)
d286 2
a287 2
	if (get(-1, infile, 1, prec, end, ftbl) == 0)
		while (0 == get(-1, infile, 1, crec, end, ftbl)) {
d298 4
d305 3
d316 3
a318 3
	register int r;
	register u_char *pos1, *pos2, *end;
	register u_char *cwts;
@


1.7
log
@Dynamically allocate memory for structures whose sizes are based on the
number of keys given.  Closes PR #825.
@
text
@d1 1
a1 1
/*	$OpenBSD: msort.c,v 1.6 1997/06/30 05:36:17 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: msort.c,v 1.6 1997/06/30 05:36:17 millert Exp $";
d128 1
a128 1
						err(2, files.names[j+i]);
@


1.7.4.1
log
@Pull in patch from current (even more to come):
Fix (millert):
warnx?/errx? paranoia (use "%s" not a bare string unless it is a
constant).  These are not security holes but it is worth fixing
them anyway both for robustness and so folks looking for examples
in the tree are not misled into doing something potentially dangerous.
Furthermore, it is a bad idea to assume that pathnames will not
include '%' in them and that error routines don't return strings
with '%' in them (especially in light of the possibility of locales).
@
text
@d1 1
a1 1
/*	$OpenBSD: msort.c,v 1.8 2000/06/30 16:00:23 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: msort.c,v 1.8 2000/06/30 16:00:23 millert Exp $";
d128 1
a128 1
						err(2, "%s", files.names[j+i]);
@


1.6
log
@64bit fixes.  Some of these are a bit bogus as there were "long"s
meant to be file offsets for fseek(3).  However, those values
could never be > an int anyay so it is not a problem.
@
text
@d1 1
a1 1
/*	$OpenBSD: msort.c,v 1.5 1997/06/30 04:24:40 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: msort.c,v 1.5 1997/06/30 04:24:40 millert Exp $";
d92 1
a92 1
	if (!cfilebuf)
d94 3
d102 5
a106 3
			err(2, NULL);
		if (!SINGL_FLD)
			linebuf = malloc(MAXLLEN);
d270 4
a273 2
	if (!SINGL_FLD)
		linebuf = malloc(MAXLLEN);
d275 2
d308 1
a308 1
	register r;
@


1.5
log
@Fix an unaligned access on alpha.
@
text
@d1 1
a1 1
/*	$OpenBSD: msort.c,v 1.4 1997/06/16 02:21:56 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: msort.c,v 1.4 1997/06/16 02:21:56 millert Exp $";
d61 1
a61 1
	struct recheader rec[1];
d66 1
a66 1
	struct trecheader rec[1];
d71 1
a71 1
static int cmp __P((struct recheader *, struct recheader *));
d85 1
a85 1
	void (*put)(struct recheader *, FILE *);
d148 1
a148 1
	void (*put)(struct recheader *, FILE *);
d263 1
a263 1
	struct recheader *crec, *prec, *trec;
d297 1
a297 1
	struct recheader *rec1, *rec2;
@


1.4
log
@Cosmetic cleanup, mostly KNF.
@
text
@d1 1
a1 1
/*	$OpenBSD: msort.c,v 1.3 1997/01/22 06:53:15 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: msort.c,v 1.3 1997/01/22 06:53:15 millert Exp $";
d56 1
a56 1
#define LALIGN(n) ((n+3) & ~3)
@


1.3
log
@Fix some err(3) usage and usage string.
@
text
@d1 1
a1 1
/*	$OpenBSD: msort.c,v 1.2 1997/01/22 06:43:53 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: msort.c,v 1.2 1997/01/22 06:43:53 millert Exp $";
d108 1
d125 1
a125 2
			}
			else {
d130 2
a131 1
			if (nfiles > 16) l_fstack[j/16].fp = tout;
d164 2
a165 2
				--i;
				--nfiles;
d199 1
a199 1
*/
d226 1
a226 1
				return(1);
d276 15
a290 10
	if (0 == get(-1, infile, 1, prec, end, ftbl))
	while (0 == get(-1, infile, 1, crec, end, ftbl)) {
		if (0 < (c = cmp(prec, crec))) {
			crec->data[crec->length-1] = 0;
			errx(1, "found disorder: %s", crec->data+crec->offset);
		}
		if (UNIQUE && !c) {
			crec->data[crec->length-1] = 0;
			errx(1, "found non-uniqueness: %s",
			    crec->data+crec->offset);
a291 4
		trec = prec;
		prec = crec;
		crec = trec;
	}
@


1.2
log
@Fix off-by-one differently--add an extra byte to buffer (ick).
Don't dump core on empty file.
@
text
@d1 1
a1 1
/*	$OpenBSD: msort.c,v 1.1 1997/01/20 19:39:53 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: msort.c,v 1.1 1997/01/20 19:39:53 millert Exp $";
d122 1
a122 1
						err(2, "%s", files.names[j+i]);
@


1.1
log
@sort(1) from 4.4BSD-lite2 with minor tweaks and bug fixes by me.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: $";
d154 1
d174 16
a189 12
	cfile = cfilebuf;
	cfile->flno = flist[0]->flno;
	cfile->end = cfile->rec->data + MAXLLEN;
	while (nfiles) {
		for (c = 1; c == 1;) {
			if (EOF == (c = get(cfile->flno, dummy, nfiles,
			   cfile->rec, cfile->end, ftbl))) {
				put(flist[0]->rec, outfp);
				memmove(flist, flist + 1,
				    sizeof(MFILE *) * (--nfiles));
				cfile->flno = flist[0]->flno;
				break;
d191 1
a191 3
			if (!(c = insert(flist, &cfile, nfiles, DELETE)))
				put(cfile->rec, outfp);
		}
@
