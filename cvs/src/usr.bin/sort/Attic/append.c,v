head	1.11;
access;
symbols
	OPENBSD_5_7:1.10.0.18
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.22
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.20
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.16
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.14
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.12
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.10
	OPENBSD_5_0:1.10.0.8
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.6
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.4
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.9.0.24
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.20
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.18
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.16
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.14
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.12
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.10
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.8
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.6
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.4
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.2
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.7.0.10
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.8
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.6
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.7.0.4
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.2
	OPENBSD_2_8:1.5.0.6
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.4
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.2
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.4.0.4
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.4
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.1.0.2
	OPENBSD_2_1_BASE:1.1;
locks; strict;
comment	@ * @;


1.11
date	2015.03.17.17.45.13;	author millert;	state dead;
branches;
next	1.10;
commitid	XCfT2rs68MOcwt0o;

1.10
date	2009.10.27.23.59.43;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2004.07.20.03.50.27;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.03.02.56.16;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2001.03.20.19.36.27;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.02.04.21.27.00;	author ericj;	state Exp;
branches;
next	1.5;

1.5
date	99.05.24.17.57.17;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	98.05.02.02.41.55;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	97.06.30.05.36.15;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.06.16.02.21.53;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.01.20.19.39.47;	author millert;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Initial import of FreeBSD sort.
@
text
@/*	$OpenBSD: append.c,v 1.10 2009/10/27 23:59:43 deraadt Exp $	*/

/*-
 * Copyright (c) 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Peter McIlroy.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "sort.h"

#include <stdlib.h>
#include <string.h>

#define OUTPUT {							\
	if ((n = cpos - ppos) > 1) {					\
		for (; ppos < cpos; ++ppos)				\
			*ppos -= odepth;				\
		ppos -= n;						\
		radixsort((const u_char **)ppos, n, wts1, REC_D);	\
		for (; ppos < cpos; ppos++) {				\
			prec = (RECHEADER *) (*ppos - sizeof(TRECHEADER));\
			put(prec, fp);					\
		}							\
	} else 								\
		put(prec, fp);						\
}

/*
 * copy sorted lines to output; check for uniqueness
 */
void
append(u_char **keylist, int nelem, int depth, FILE *fp,
    void (*put)(RECHEADER *, FILE *), struct field *ftbl)
{
	u_char *wts, *wts1;
	int n, odepth;
	u_char **cpos, **ppos, **lastkey;
	u_char *cend, *pend, *start;
	RECHEADER *crec, *prec;

	if (*keylist == NULL)
		return;
	wts1 = wts = ftbl[0].weights;
	if ((!UNIQUE) && SINGL_FLD) {
		if (ftbl[0].flags & F && ftbl[0].flags & R)
			wts1 = Rascii;
		else if (ftbl[0].flags & F)
			wts1 = ascii;
		odepth = depth;
	}
	lastkey = keylist + nelem;
	depth += sizeof(TRECHEADER);
	if (SINGL_FLD && (UNIQUE || wts1 != wts)) {
		ppos = keylist;
		prec = (RECHEADER *) (*ppos - depth);
		if (UNIQUE)
			put(prec, fp);
		for (cpos = &keylist[1]; cpos < lastkey; cpos++) {
			crec = (RECHEADER *) (*cpos - depth);
			if (crec->length  == prec->length) {
				/* 
				 * Set pend and cend so that trailing NUL and
				 * record separator is ignored.
				 */
				pend = (u_char *)&prec->data + prec->length - 2;
				cend = (u_char *)&crec->data + crec->length - 2;
				for (start = *cpos; cend >= start; cend--) {
					if (wts[*cend] != wts[*pend])
						break;
					pend--;
				}
				if (pend + 1 != *ppos) {
					if (!UNIQUE)
						OUTPUT
					else
						put(crec, fp);
					ppos = cpos;
					prec = crec;
				}
			} else {
				if (!UNIQUE)
					OUTPUT
				else
					put(crec, fp);
				ppos = cpos;
				prec = crec;
			}
		}
		if (!UNIQUE)
			OUTPUT
	} else if (UNIQUE) {
		ppos = keylist;
		prec = (RECHEADER *) (*ppos - depth);
		put(prec, fp);
		for (cpos = &keylist[1]; cpos < lastkey; cpos++) {
			crec = (RECHEADER *) (*cpos - depth);
			if (crec->offset == prec->offset) {
				/* 
				 * Set pend and cend so that trailing NUL and
				 * record separator is ignored.
				 */
				pend = (u_char *)&prec->data + prec->offset - 2;
				cend = (u_char *)&crec->data + crec->offset - 2;
				for (start = *cpos; cend >= start; cend--) {
					if (wts[*cend] != wts[*pend])
						break;
					pend--;
				}
				if (pend + 1 != *ppos) {
					ppos = cpos;
					prec = crec;
					put(prec, fp);
				}
			} else {
				ppos = cpos;
				prec = crec;
				put(prec, fp);
			}
		}
	} else for (cpos = keylist; cpos < lastkey; cpos++) {
		crec = (RECHEADER *) (*cpos - depth);
		put(crec, fp);
	}
}

/*
 * output the already sorted eol bin.
 */
void
rd_append(int binno, union f_handle infl0, int nfiles, FILE *outfp,
    u_char *buffer, u_char *bufend)
{
	RECHEADER *rec;

	rec = (RECHEADER *) buffer;
	if (!getnext(binno, infl0, nfiles, (RECHEADER *) buffer, bufend, 0)) {
		putline(rec, outfp);
		while (getnext(binno, infl0, nfiles, (RECHEADER *) buffer,
			bufend, 0) == 0) {
			if (!UNIQUE)
				putline(rec, outfp);
		}
	}
}

/*
 * append plain text--used after sorting the biggest bin.
 */
void
concat(FILE *a, FILE *b)
{
        int nread;
        char buffer[4096];

	rewind(b);
        while ((nread = fread(buffer, 1, 4096, b)) > 0)
                EWRITE(buffer, 1, nread, a);
}
@


1.10
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: append.c,v 1.9 2004/07/20 03:50:27 deraadt Exp $	*/
@


1.9
log
@ansi; khalek@@linuxgamers.net
@
text
@d1 1
a1 1
/*	$OpenBSD: append.c,v 1.8 2003/06/03 02:56:16 millert Exp $	*/
a33 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)append.c	8.1 (Berkeley) 6/6/93";
#else
static char rcsid[] = "$OpenBSD: append.c,v 1.8 2003/06/03 02:56:16 millert Exp $";
#endif
#endif /* not lint */
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: append.c,v 1.7 2001/03/20 19:36:27 millert Exp $	*/
d39 1
a39 1
static char rcsid[] = "$OpenBSD: append.c,v 1.7 2001/03/20 19:36:27 millert Exp $";
d66 2
a67 7
append(keylist, nelem, depth, fp, put, ftbl)
	u_char **keylist;
	int nelem;
	int depth;
	FILE *fp;
	void (*put)(RECHEADER *, FILE *);
	struct field *ftbl;
d164 2
a165 5
rd_append(binno, infl0, nfiles, outfp, buffer, bufend)
	u_char *buffer, *bufend;
	int binno, nfiles;
	union f_handle infl0;
	FILE *outfp;
d184 1
a184 2
concat(a, b)
	FILE *a, *b;
@


1.7
log
@Prevent "sort -f /dev/null" from segfaulting.
@
text
@d1 1
a1 1
/*	$OpenBSD: append.c,v 1.6 2001/02/04 21:27:00 ericj Exp $	*/
d18 1
a18 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d39 1
a39 1
static char rcsid[] = "$OpenBSD: append.c,v 1.6 2001/02/04 21:27:00 ericj Exp $";
@


1.6
log
@
Bring in some recent fixup's from NetBSD. This allows lines longer than 65522
to be properly sorted. Many other cleanup's done, and depreciate register.
millert@@ and deraadt@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: append.c,v 1.5 1999/05/24 17:57:17 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: append.c,v 1.5 1999/05/24 17:57:17 millert Exp $";
d84 1
a84 1
	if (*keylist == '\0' && UNIQUE)
@


1.5
log
@Dynamically allocate memory for structures whose sizes are based on the
number of keys given.  Closes PR #825.
@
text
@d1 1
a1 1
/*	$OpenBSD: append.c,v 1.4 1998/05/02 02:41:55 mickey Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: append.c,v 1.4 1998/05/02 02:41:55 mickey Exp $";
d73 1
a73 1
	register int depth;
d78 5
a82 5
	register u_char *wts, *wts1;
	register int n, odepth;
	register u_char **cpos, **ppos, **lastkey;
	register u_char *cend, *pend, *start;
	register RECHEADER *crec, *prec;
d101 1
a101 1
		for (cpos = keylist+1; cpos < lastkey; cpos++) {
d104 6
a109 2
				pend = (u_char *) &prec->offset + prec->length;
				cend = (u_char *) &crec->offset + crec->length;
d138 1
a138 1
		for (cpos = keylist+1; cpos < lastkey; cpos++) {
d141 6
a146 2
				pend = (u_char *) &prec->offset + prec->offset;
				cend = (u_char *) &crec->offset + crec->offset;
@


1.4
log
@fix yet another malloc problem.
malloc(2) states quite clear that "malloc() allocates uninitialized space"
just one malloc'ed memory is cleared by this fix.
do a 'sort -u /dev/null' w/ /etc/malloc.conf -> J> to reproduce.
@
text
@d1 1
a1 1
/*	$OpenBSD: append.c,v 1.3 1997/06/30 05:36:15 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: append.c,v 1.3 1997/06/30 05:36:15 millert Exp $";
d79 1
a79 1
	register n, odepth;
@


1.3
log
@64bit fixes.  Some of these are a bit bogus as there were "long"s
meant to be file offsets for fseek(3).  However, those values
could never be > an int anyay so it is not a problem.
@
text
@d1 1
a1 1
/*	$OpenBSD: append.c,v 1.2 1997/06/16 02:21:53 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: append.c,v 1.2 1997/06/16 02:21:53 millert Exp $";
d129 1
a129 1
			OUTPUT;
@


1.2
log
@Cosmetic cleanup, mostly KNF.
@
text
@d1 1
a1 1
/*	$OpenBSD: append.c,v 1.1 1997/01/20 19:39:47 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: append.c,v 1.1 1997/01/20 19:39:47 millert Exp $";
d82 1
a82 1
	register struct recheader *crec, *prec;
d171 1
a171 1
	struct recheader *rec;
@


1.1
log
@sort(1) from 4.4BSD-lite2 with minor tweaks and bug fixes by me.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: $";
d62 2
a63 1
	} else put(prec, fp);						\
d112 3
a114 3
					if (!UNIQUE) {
						OUTPUT;
					} else
d120 3
a122 3
				if (!UNIQUE) {
					OUTPUT;
				} else
d128 2
a129 1
		if (!UNIQUE)  { OUTPUT; }
d172 1
@
