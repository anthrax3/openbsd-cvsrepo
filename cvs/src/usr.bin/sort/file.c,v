head	1.21;
access;
symbols
	OPENBSD_6_2:1.21.0.6
	OPENBSD_6_2_BASE:1.21
	OPENBSD_6_1:1.21.0.4
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.20.0.6
	OPENBSD_6_0_BASE:1.20
	OPENBSD_5_9:1.20.0.2
	OPENBSD_5_9_BASE:1.20
	OPENBSD_5_8:1.20.0.4
	OPENBSD_5_8_BASE:1.20;
locks; strict;
comment	@ * @;


1.21
date	2016.10.17.02.58.29;	author lteo;	state Exp;
branches;
next	1.20;
commitid	kEu3EKgHsizuC8sq;

1.20
date	2015.04.03.10.37.24;	author tobias;	state Exp;
branches;
next	1.19;
commitid	nXf2UNyH2xKwFRCp;

1.19
date	2015.04.02.22.14.51;	author deraadt;	state Exp;
branches;
next	1.18;
commitid	kmtnwDl4vbfdLT0f;

1.18
date	2015.04.02.21.04.06;	author tobias;	state Exp;
branches;
next	1.17;
commitid	4xhjGqOkKeWxcfx2;

1.17
date	2015.04.02.12.48.28;	author millert;	state Exp;
branches;
next	1.16;
commitid	n5CdiR6Ay4QRVFuQ;

1.16
date	2015.04.02.12.21.18;	author millert;	state Exp;
branches;
next	1.15;
commitid	7TasUyljKxUo10FY;

1.15
date	2015.04.02.12.19.51;	author millert;	state Exp;
branches;
next	1.14;
commitid	ALje1D5HC0CLRfpJ;

1.14
date	2015.04.01.22.43.16;	author deraadt;	state Exp;
branches;
next	1.13;
commitid	nQfp2NixsmcQzkfN;

1.13
date	2015.04.01.22.24.02;	author millert;	state Exp;
branches;
next	1.12;
commitid	ColQstM88mDleyU6;

1.12
date	2015.04.01.21.33.01;	author millert;	state Exp;
branches;
next	1.11;
commitid	heT6U1ZOv9yOSke1;

1.11
date	2015.04.01.21.27.18;	author millert;	state Exp;
branches;
next	1.10;
commitid	mY5tsJPyDfC10FT4;

1.10
date	2015.04.01.21.22.41;	author millert;	state Exp;
branches;
next	1.9;
commitid	P83YjMYDUBZGniqt;

1.9
date	2015.04.01.21.16.17;	author millert;	state Exp;
branches;
next	1.8;
commitid	oFpRon9UDUq6qmos;

1.8
date	2015.04.01.20.58.13;	author millert;	state Exp;
branches;
next	1.7;
commitid	OS48LOZcK83Cp0sj;

1.7
date	2015.04.01.20.17.56;	author tobias;	state Exp;
branches;
next	1.6;
commitid	mlfydEmFihDVntMO;

1.6
date	2015.04.01.19.06.18;	author millert;	state Exp;
branches;
next	1.5;
commitid	tNh5LvR3olaEaJ2G;

1.5
date	2015.03.31.19.50.54;	author tobias;	state Exp;
branches;
next	1.4;
commitid	D6lt5fkFoalztbl1;

1.4
date	2015.03.30.19.59.07;	author millert;	state Exp;
branches;
next	1.3;
commitid	WJbAxFRPnNi5UvsV;

1.3
date	2015.03.20.00.26.38;	author millert;	state Exp;
branches;
next	1.2;
commitid	i16NLfKxN6YeVaWD;

1.2
date	2015.03.17.17.49.27;	author millert;	state Exp;
branches;
next	1.1;
commitid	jQAONMrfwdp7JEjb;

1.1
date	2015.03.17.17.45.13;	author millert;	state Exp;
branches;
next	;
commitid	XCfT2rs68MOcwt0o;


desc
@@


1.21
log
@/var/tmp -> /tmp

From Jan Stary.
"POSIX doesn't restrict us here" and ok schwarze@@
@
text
@/*	$OpenBSD: file.c,v 1.20 2015/04/03 10:37:24 tobias Exp $	*/

/*-
 * Copyright (C) 2009 Gabor Kovesdan <gabor@@FreeBSD.org>
 * Copyright (C) 2012 Oleg Moskalenko <mom040267@@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/mman.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <sys/queue.h>

#include <err.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <string.h>
#include <unistd.h>
#include <wchar.h>
#include <wctype.h>

#include "coll.h"
#include "file.h"
#include "radixsort.h"

unsigned long long available_free_memory = 1000000;

bool use_mmap;

const char *tmpdir = "/tmp";
const char *compress_program;

size_t max_open_files = 16;

/*
 * How much space we read from file at once
 */
#define READ_CHUNK 4096

/*
 * File reader structure
 */
struct file_reader {
	struct reader_buffer	 rb;
	FILE			*file;
	char			*fname;
	unsigned char		*buffer;
	unsigned char		*mmapaddr;
	unsigned char		*mmapptr;
	size_t			 bsz;
	size_t			 cbsz;
	size_t			 mmapsize;
	size_t			 strbeg;
	char			 elsymb;
};

/*
 * Structure to be used in file merge process.
 */
struct file_header {
	struct file_reader		*fr;
	struct sort_list_item		*si; /* current top line */
	size_t				 file_pos;
};

/*
 * List elements of "cleanable" files list.
 */
struct CLEANABLE_FILE {
	char				*fn;
	LIST_ENTRY(CLEANABLE_FILE)	 files;
};

/*
 * List header of "cleanable" files list.
 */
static LIST_HEAD(CLEANABLE_FILES, CLEANABLE_FILE) tmp_files;

/*
 * Init tmp files list
 */
void
init_tmp_files(void)
{
	LIST_INIT(&tmp_files);
}

/*
 * Save name of a tmp file for signal cleanup
 */
void
tmp_file_atexit(const char *tmp_file)
{
	struct CLEANABLE_FILE *item;
	sigset_t mask, oldmask;

	item = sort_malloc(sizeof(struct CLEANABLE_FILE));
	item->fn = sort_strdup(tmp_file);

	sigfillset(&mask);
	sigprocmask(SIG_BLOCK, &mask, &oldmask);
	LIST_INSERT_HEAD(&tmp_files, item, files);
	sigprocmask(SIG_SETMASK, &oldmask, NULL);
}

/*
 * Clear tmp files
 */
void
clear_tmp_files(void)
{
	struct CLEANABLE_FILE *item;

	LIST_FOREACH(item, &tmp_files, files) {
		if (item != NULL && item->fn != NULL)
			unlink(item->fn);
	}
}

/*
 * Check whether a file is a temporary file
 */
static bool
file_is_tmp(const char *fn)
{
	struct CLEANABLE_FILE *item;

	LIST_FOREACH(item, &tmp_files, files) {
		if (item->fn != NULL && strcmp(item->fn, fn) == 0)
			return true;
	}

	return false;
}

/*
 * Generate new temporary file name
 */
char *
new_tmp_file_name(void)
{
	char *ret;
	int fd;

	sort_asprintf(&ret, "%s/.bsdsort.XXXXXXXXXX", tmpdir);
	if ((fd = mkstemp(ret)) == -1)
		err(2, "%s", ret);
	close(fd);
	tmp_file_atexit(ret);
	return ret;
}

/*
 * Initialize file list
 */
void
file_list_init(struct file_list *fl, bool tmp)
{
	fl->count = 0;
	fl->sz = 0;
	fl->fns = NULL;
	fl->tmp = tmp;
}

/*
 * Add a file name to the list
 */
void
file_list_add(struct file_list *fl, char *fn, bool allocate)
{
	if (fl->count >= fl->sz) {
		fl->fns = sort_reallocarray(fl->fns,
		    fl->sz ? fl->sz : (fl->sz = 1), 2 * sizeof(char *));
		fl->sz *= 2;
	}
	fl->fns[fl->count] = allocate ? sort_strdup(fn) : fn;
	fl->count += 1;
}

/*
 * Populate file list from array of file names
 */
void
file_list_populate(struct file_list *fl, int argc, char **argv, bool allocate)
{
	int i;

	for (i = 0; i < argc; i++)
		file_list_add(fl, argv[i], allocate);
}

/*
 * Clean file list data and delete the files,
 * if this is a list of temporary files
 */
void
file_list_clean(struct file_list *fl)
{
	if (fl->fns) {
		size_t i;

		for (i = 0; i < fl->count; i++) {
			if (fl->fns[i]) {
				if (fl->tmp)
					unlink(fl->fns[i]);
				sort_free(fl->fns[i]);
				fl->fns[i] = NULL;
			}
		}
		sort_free(fl->fns);
		fl->fns = NULL;
	}
	fl->sz = 0;
	fl->count = 0;
	fl->tmp = false;
}

/*
 * Init sort list
 */
void
sort_list_init(struct sort_list *l)
{
	l->count = 0;
	l->size = 0;
	l->memsize = sizeof(struct sort_list);
	l->list = NULL;
}

/*
 * Add string to sort list
 */
void
sort_list_add(struct sort_list *l, struct bwstring *str)
{
	size_t indx = l->count;

	if ((l->list == NULL) || (indx >= l->size)) {
		size_t newsize = (l->size + 1) + 1024;

		l->list = sort_reallocarray(l->list, newsize,
		    sizeof(struct sort_list_item *));
		l->memsize += (newsize - l->size) *
		    sizeof(struct sort_list_item *);
		l->size = newsize;
	}
	l->list[indx] = sort_list_item_alloc();
	sort_list_item_set(l->list[indx], str);
	l->memsize += sort_list_item_size(l->list[indx]);
	l->count += 1;
}

/*
 * Clean sort list data
 */
void
sort_list_clean(struct sort_list *l)
{
	if (l->list) {
		size_t i;

		for (i = 0; i < l->count; i++) {
			struct sort_list_item *item;

			item = l->list[i];

			if (item) {
				sort_list_item_clean(item);
				sort_free(item);
				l->list[i] = NULL;
			}
		}
		sort_free(l->list);
		l->list = NULL;
	}
	l->count = 0;
	l->size = 0;
	l->memsize = sizeof(struct sort_list);
}

/*
 * Write sort list to file
 */
void
sort_list_dump(struct sort_list *l, const char *fn)
{
	FILE *f;

	f = openfile(fn, "w");
	if (f == NULL)
		err(2, "%s", fn);

	if (l->list) {
		size_t i;

		if (!sort_opts_vals.uflag) {
			for (i = 0; i < l->count; ++i)
				bwsfwrite(l->list[i]->str, f,
				    sort_opts_vals.zflag);
		} else {
			struct sort_list_item *last_printed_item = NULL;
			struct sort_list_item *item;
			for (i = 0; i < l->count; ++i) {
				item = l->list[i];
				if ((last_printed_item == NULL) ||
				    list_coll(&last_printed_item, &item)) {
					bwsfwrite(item->str, f, sort_opts_vals.zflag);
					last_printed_item = item;
				}
			}
		}
	}

	closefile(f, fn);
}

/*
 * Checks if the given file is sorted.  Stops at the first disorder,
 * prints the disordered line and returns 1.
 */
int
check(const char *fn)
{
	struct bwstring *s1, *s2;
	struct file_reader *fr;
	struct keys_array *ka1, *ka2;
	int res;
	size_t pos, posdisorder;

	s1 = s2 = NULL;
	ka1 = ka2 = NULL;

	fr = file_reader_init(fn);

	res = 0;
	pos = 1;
	posdisorder = 1;

	if (fr == NULL)
		err(2, "%s", fn);

	s1 = file_reader_readline(fr);
	if (s1 == NULL)
		goto end;

	ka1 = keys_array_alloc();
	preproc(s1, ka1);

	s2 = file_reader_readline(fr);
	if (s2 == NULL)
		goto end;

	ka2 = keys_array_alloc();
	preproc(s2, ka2);

	for (;;) {

		if (debug_sort) {
			bwsprintf(stdout, s2, "s1=<", ">");
			bwsprintf(stdout, s1, "s2=<", ">");
		}
		int cmp = key_coll(ka2, ka1, 0);
		if (debug_sort)
			printf("; cmp1=%d", cmp);

		if (!cmp && sort_opts_vals.complex_sort &&
		    !(sort_opts_vals.uflag) && !(sort_opts_vals.sflag)) {
			cmp = top_level_str_coll(s2, s1);
			if (debug_sort)
				printf("; cmp2=%d", cmp);
		}
		if (debug_sort)
			printf("\n");

		if ((sort_opts_vals.uflag && (cmp <= 0)) || (cmp < 0)) {
			if (!(sort_opts_vals.csilentflag)) {
				bws_disorder_warnx(s2, fn, posdisorder);
				posdisorder = pos;
				if (debug_sort)
					bws_disorder_warnx(s1, fn, posdisorder);
			}
			res = 1;
			goto end;
		}

		pos++;

		clean_keys_array(s1, ka1);
		sort_free(ka1);
		ka1 = ka2;
		ka2 = NULL;

		bwsfree(s1);
		s1 = s2;

		s2 = file_reader_readline(fr);
		if (s2 == NULL)
			goto end;

		ka2 = keys_array_alloc();
		preproc(s2, ka2);
	}

end:
	if (ka1) {
		clean_keys_array(s1, ka1);
		sort_free(ka1);
	}

	bwsfree(s1);

	if (ka2) {
		clean_keys_array(s2, ka2);
		sort_free(ka2);
	}

	bwsfree(s2);

	if (fn == NULL || *fn == 0 || strcmp(fn, "-") == 0) {
		for (;;) {
			s2 = file_reader_readline(fr);
			if (s2 == NULL)
				break;
			bwsfree(s2);
		}
	}

	file_reader_free(fr);

	return res;
}

/*
 * Opens a file.  If the given filename is "-", stdout will be
 * opened.
 */
FILE *
openfile(const char *fn, const char *mode)
{
	FILE *file;

	if (strcmp(fn, "-") == 0)
		return (mode[0] == 'r') ? stdin : stdout;

	if (file_is_tmp(fn) && (compress_program != NULL)) {
		char *cmd;

		fflush(stdout);

		if (mode[0] == 'r')
			sort_asprintf(&cmd, "%s -d < %s",
			    compress_program, fn);
		else if (mode[0] == 'w')
			sort_asprintf(&cmd, "%s > %s",
			    compress_program, fn);
		else
			err(2, "invalid file mode");

		if ((file = popen(cmd, mode)) == NULL)
			err(2, "%s", compress_program);

		sort_free(cmd);

	} else if ((file = fopen(fn, mode)) == NULL)
		err(2, "%s", fn);

	return file;
}

/*
 * Close file
 */
void
closefile(FILE *f, const char *fn)
{
	if (f == NULL) {
		;
	} else if (f == stdin) {
		;
	} else if (f == stdout) {
		fflush(f);
	} else {
		if (file_is_tmp(fn) && compress_program != NULL) {
			if (pclose(f) < 0)
				err(2, NULL);
		} else
			fclose(f);
	}
}

/*
 * Reads a file into the internal buffer.
 */
struct file_reader *
file_reader_init(const char *fsrc)
{
	struct file_reader *ret;

	if (fsrc == NULL)
		fsrc = "-";

	ret = sort_calloc(1, sizeof(struct file_reader));

	ret->elsymb = '\n';
	if (sort_opts_vals.zflag)
		ret->elsymb = 0;

	ret->fname = sort_strdup(fsrc);

	if (strcmp(fsrc, "-") && (compress_program == NULL) && use_mmap) {
		struct stat stat_buf;
		void *addr;
		size_t sz = 0;
		int fd;

		fd = open(fsrc, O_RDONLY);
		if (fd < 0)
			err(2, "%s", fsrc);

		if (fstat(fd, &stat_buf) < 0)
			err(2, "%s", fsrc);
		sz = stat_buf.st_size;

		addr = mmap(NULL, sz, PROT_READ, 0, fd, 0);
		close(fd);
		if (addr != MAP_FAILED) {
			ret->mmapaddr = addr;
			ret->mmapsize = sz;
			ret->mmapptr = ret->mmapaddr;
			posix_madvise(addr, sz, POSIX_MADV_SEQUENTIAL);
		}
	}

	if (ret->mmapaddr == NULL) {
		ret->file = openfile(fsrc, "r");
		if (ret->file == NULL)
			err(2, "%s", fsrc);

		if (strcmp(fsrc, "-")) {
			ret->cbsz = READ_CHUNK;
			ret->buffer = sort_malloc(ret->cbsz);
			ret->bsz = 0;
			ret->strbeg = 0;

			ret->bsz = fread(ret->buffer, 1, ret->cbsz, ret->file);
			if (ret->bsz == 0) {
				if (ferror(ret->file))
					err(2, NULL);
			}
		}
	}

	return ret;
}

struct bwstring *
file_reader_readline(struct file_reader *fr)
{
	struct bwstring *ret = NULL;

	if (fr->mmapaddr) {
		unsigned char *mmapend;

		mmapend = fr->mmapaddr + fr->mmapsize;
		if (fr->mmapptr >= mmapend)
			return NULL;
		else {
			unsigned char *strend;
			size_t sz;

			sz = mmapend - fr->mmapptr;
			strend = memchr(fr->mmapptr, fr->elsymb, sz);

			if (strend == NULL) {
				ret = bwscsbdup(fr->mmapptr, sz);
				fr->mmapptr = mmapend;
			} else {
				ret = bwscsbdup(fr->mmapptr, strend -
				    fr->mmapptr);
				fr->mmapptr = strend + 1;
			}
		}

	} else if (fr->file != stdin) {
		unsigned char *strend;
		size_t bsz1, remsz, search_start;

		search_start = 0;
		remsz = 0;
		strend = NULL;

		if (fr->bsz > fr->strbeg)
			remsz = fr->bsz - fr->strbeg;

		/* line read cycle */
		for (;;) {
			if (remsz > search_start)
				strend = memchr(fr->buffer + fr->strbeg +
				    search_start, fr->elsymb, remsz -
				    search_start);
			else
				strend = NULL;

			if (strend)
				break;
			if (feof(fr->file))
				break;

			if (fr->bsz != fr->cbsz)
				/* NOTREACHED */
				err(2, "File read software error 1");

			if (remsz > (READ_CHUNK >> 1)) {
				search_start = fr->cbsz - fr->strbeg;
				fr->cbsz += READ_CHUNK;
				fr->buffer = sort_reallocarray(fr->buffer,
				    1, fr->cbsz);
				bsz1 = fread(fr->buffer + fr->bsz, 1,
				    READ_CHUNK, fr->file);
				if (bsz1 == 0) {
					if (ferror(fr->file))
						err(2, NULL);
					break;
				}
				fr->bsz += bsz1;
				remsz += bsz1;
			} else {
				if (remsz > 0 && fr->strbeg > 0) {
					memmove(fr->buffer,
					    fr->buffer + fr->strbeg, remsz);
				}
				fr->strbeg = 0;
				search_start = remsz;
				bsz1 = fread(fr->buffer + remsz, 1,
				    fr->cbsz - remsz, fr->file);
				if (bsz1 == 0) {
					if (ferror(fr->file))
						err(2, NULL);
					break;
				}
				fr->bsz = remsz + bsz1;
				remsz = fr->bsz;
			}
		}

		if (strend == NULL)
			strend = fr->buffer + fr->bsz;

		if ((fr->buffer + fr->strbeg <= strend) &&
		    (fr->strbeg < fr->bsz) && (remsz>0))
			ret = bwscsbdup(fr->buffer + fr->strbeg, strend -
			    fr->buffer - fr->strbeg);

		fr->strbeg = (strend - fr->buffer) + 1;
	} else {
		size_t len = 0;

		ret = bwsfgetln(fr->file, &len, sort_opts_vals.zflag,
		    &(fr->rb));
	}

	return ret;
}

static void
file_reader_clean(struct file_reader *fr)
{
	if (fr->mmapaddr)
		munmap(fr->mmapaddr, fr->mmapsize);

	sort_free(fr->buffer);

	if (fr->file)
		closefile(fr->file, fr->fname);

	sort_free(fr->fname);

	memset(fr, 0, sizeof(struct file_reader));
}

void
file_reader_free(struct file_reader *fr)
{
	file_reader_clean(fr);
	sort_free(fr);
}

int
procfile(const char *fsrc, struct sort_list *list, struct file_list *fl)
{
	struct file_reader *fr;

	fr = file_reader_init(fsrc);
	if (fr == NULL)
		err(2, "%s", fsrc);

	/* file browse cycle */
	for (;;) {
		struct bwstring *bws;

		bws = file_reader_readline(fr);

		if (bws == NULL)
			break;

		sort_list_add(list, bws);

		if (list->memsize >= available_free_memory) {
			char *fn;

			fn = new_tmp_file_name();
			sort_list_to_file(list, fn);
			file_list_add(fl, fn, false);
			sort_list_clean(list);
		}
	}

	file_reader_free(fr);

	return 0;
}

/*
 * Compare file headers. Files with EOF always go to the end of the list.
 */
static int
file_header_cmp(struct file_header *f1, struct file_header *f2)
{
	int ret;

	if (f1 == f2)
		return 0;
	if (f1->fr == NULL)
		return (f2->fr == NULL) ? 0 : 1;
	if (f2->fr == NULL)
		return -1;

	ret = list_coll(&(f1->si), &(f2->si));
	if (!ret)
		return (f1->file_pos < f2->file_pos) ? -1 : 1;
	return ret;
}

/*
 * Allocate and init file header structure
 */
static void
file_header_init(struct file_header **fh, const char *fn, size_t file_pos)
{
	struct bwstring *line;

	*fh = sort_malloc(sizeof(struct file_header));
	(*fh)->file_pos = file_pos;
	(*fh)->fr = file_reader_init(fn);
	if ((*fh)->fr == NULL) {
		err(2, "Cannot open %s for reading",
		    strcmp(fn, "-") == 0 ? "stdin" : fn);
	}
	line = file_reader_readline((*fh)->fr);
	if (line == NULL) {
		file_reader_free((*fh)->fr);
		(*fh)->fr = NULL;
		(*fh)->si = NULL;
	} else {
		(*fh)->si = sort_list_item_alloc();
		sort_list_item_set((*fh)->si, line);
	}
}

/*
 * Close file
 */
static void
file_header_close(struct file_header **fh)
{
	if ((*fh)->fr) {
		file_reader_free((*fh)->fr);
		(*fh)->fr = NULL;
	}
	if ((*fh)->si) {
		sort_list_item_clean((*fh)->si);
		sort_free((*fh)->si);
		(*fh)->si = NULL;
	}
	sort_free(*fh);
	*fh = NULL;
}

/*
 * Swap two array elements
 */
static void
file_header_swap(struct file_header **fh, size_t i1, size_t i2)
{
	struct file_header *tmp;

	tmp = fh[i1];
	fh[i1] = fh[i2];
	fh[i2] = tmp;
}

/* heap algorithm ==>> */

/*
 * See heap sort algorithm
 * "Raises" last element to its right place
 */
static void
file_header_heap_swim(struct file_header **fh, size_t indx)
{
	if (indx > 0) {
		size_t parent_index;

		parent_index = (indx - 1) >> 1;

		if (file_header_cmp(fh[indx], fh[parent_index]) < 0) {
			/* swap child and parent and continue */
			file_header_swap(fh, indx, parent_index);
			file_header_heap_swim(fh, parent_index);
		}
	}
}

/*
 * Sink the top element to its correct position
 */
static void
file_header_heap_sink(struct file_header **fh, size_t indx, size_t size)
{
	size_t left_child_index;
	size_t right_child_index;

	left_child_index = indx + indx + 1;
	right_child_index = left_child_index + 1;

	if (left_child_index < size) {
		size_t min_child_index;

		min_child_index = left_child_index;

		if ((right_child_index < size) &&
		    (file_header_cmp(fh[left_child_index],
		    fh[right_child_index]) > 0))
			min_child_index = right_child_index;
		if (file_header_cmp(fh[indx], fh[min_child_index]) > 0) {
			file_header_swap(fh, indx, min_child_index);
			file_header_heap_sink(fh, min_child_index, size);
		}
	}
}

/* <<== heap algorithm */

/*
 * Adds element to the "left" end
 */
static void
file_header_list_rearrange_from_header(struct file_header **fh, size_t size)
{
	file_header_heap_sink(fh, 0, size);
}

/*
 * Adds element to the "right" end
 */
static void
file_header_list_push(struct file_header *f, struct file_header **fh, size_t size)
{
	fh[size++] = f;
	file_header_heap_swim(fh, size - 1);
}

struct last_printed
{
	struct bwstring *str;
};

/*
 * Prints the current line of the file
 */
static void
file_header_print(struct file_header *fh, FILE *f_out, struct last_printed *lp)
{
	if (sort_opts_vals.uflag) {
		if ((lp->str == NULL) || (str_list_coll(lp->str, &(fh->si)))) {
			bwsfwrite(fh->si->str, f_out, sort_opts_vals.zflag);
			if (lp->str)
				bwsfree(lp->str);
			lp->str = bwsdup(fh->si->str);
		}
	} else
		bwsfwrite(fh->si->str, f_out, sort_opts_vals.zflag);
}

/*
 * Read next line
 */
static void
file_header_read_next(struct file_header *fh)
{
	struct bwstring *tmp;

	tmp = file_reader_readline(fh->fr);
	if (tmp == NULL) {
		file_reader_free(fh->fr);
		fh->fr = NULL;
		if (fh->si) {
			sort_list_item_clean(fh->si);
			sort_free(fh->si);
			fh->si = NULL;
		}
	} else {
		if (fh->si == NULL)
			fh->si = sort_list_item_alloc();
		sort_list_item_set(fh->si, tmp);
	}
}

/*
 * Merge array of "files headers"
 */
static void
file_headers_merge(size_t fnum, struct file_header **fh, FILE *f_out)
{
	struct last_printed lp;
	size_t i;

	memset(&lp, 0, sizeof(lp));

	/*
	 * construct the initial sort structure
	 */
	for (i = 0; i < fnum; i++)
		file_header_list_push(fh[i], fh, i);

	while (fh[0]->fr) { /* unfinished files are always in front */
		/* output the smallest line: */
		file_header_print(fh[0], f_out, &lp);
		/* read a new line, if possible: */
		file_header_read_next(fh[0]);
		/* re-arrange the list: */
		file_header_list_rearrange_from_header(fh, fnum);
	}

	if (lp.str)
		bwsfree(lp.str);
}

/*
 * Merges the given files into the output file, which can be
 * stdout.
 */
static void
merge_files_array(size_t argc, char **argv, const char *fn_out)
{
	struct file_header **fh;
	FILE *f_out;
	size_t i;

	f_out = openfile(fn_out, "w");

	if (f_out == NULL)
		err(2, "%s", fn_out);

	fh = sort_reallocarray(NULL, argc + 1, sizeof(struct file_header *));

	for (i = 0; i < argc; i++)
		file_header_init(fh + i, argv[i], i);

	file_headers_merge(argc, fh, f_out);

	for (i = 0; i < argc; i++)
		file_header_close(fh + i);

	sort_free(fh);

	closefile(f_out, fn_out);
}

/*
 * Shrinks the file list until its size smaller than max number of opened files
 */
static int
shrink_file_list(struct file_list *fl)
{
	struct file_list new_fl;
	size_t indx = 0;

	if (fl->count < max_open_files)
		return 0;

	file_list_init(&new_fl, true);
	while (indx < fl->count) {
		char *fnew;
		size_t num;

		num = fl->count - indx;
		fnew = new_tmp_file_name();

		if (num >= max_open_files)
			num = max_open_files - 1;
		merge_files_array(num, fl->fns + indx, fnew);
		if (fl->tmp) {
			size_t i;

			for (i = 0; i < num; i++)
				unlink(fl->fns[indx + i]);
		}
		file_list_add(&new_fl, fnew, false);
		indx += num;
	}
	fl->tmp = false; /* already taken care of */
	file_list_clean(fl);

	fl->count = new_fl.count;
	fl->fns = new_fl.fns;
	fl->sz = new_fl.sz;
	fl->tmp = new_fl.tmp;

	return 1;
}

/*
 * Merge list of files
 */
void
merge_files(struct file_list *fl, const char *fn_out)
{
	while (shrink_file_list(fl))
		;

	merge_files_array(fl->count, fl->fns, fn_out);
}

static const char *
get_sort_method_name(int sm)
{
	if (sm == SORT_MERGESORT)
		return "mergesort";
	else if (sort_opts_vals.sort_method == SORT_RADIXSORT)
		return "radixsort";
	else if (sort_opts_vals.sort_method == SORT_HEAPSORT)
		return "heapsort";
	else
		return "quicksort";
}

/*
 * Sort list of lines and writes it to the file
 */
void
sort_list_to_file(struct sort_list *list, const char *outfile)
{
	struct sort_mods *sm = &(keys[0].sm);

	if (!sm->Mflag && !sm->Rflag && !sm->Vflag &&
	    !sm->gflag && !sm->hflag && !sm->nflag) {
		if ((sort_opts_vals.sort_method == SORT_DEFAULT) && byte_sort)
			sort_opts_vals.sort_method = SORT_RADIXSORT;

	} else if (sort_opts_vals.sort_method == SORT_RADIXSORT)
		err(2, "Radix sort cannot be used with these sort options");

	/*
	 * To handle stable sort and the unique cases in the
	 * right order, we need to use a stable algorithm.
	 */
	if (sort_opts_vals.sflag) {
		switch (sort_opts_vals.sort_method){
		case SORT_MERGESORT:
			break;
		case SORT_RADIXSORT:
			break;
		case SORT_DEFAULT:
			sort_opts_vals.sort_method = SORT_MERGESORT;
			break;
		default:
			errx(2, "The chosen sort method cannot be used with "
			    "stable and/or unique sort");
		};
	}

	if (sort_opts_vals.sort_method == SORT_DEFAULT)
		sort_opts_vals.sort_method = DEFAULT_SORT_ALGORITHM;

	if (debug_sort)
		printf("sort_method=%s\n",
		    get_sort_method_name(sort_opts_vals.sort_method));

	switch (sort_opts_vals.sort_method){
	case SORT_RADIXSORT:
		rxsort(list->list, list->count);
		break;
	case SORT_MERGESORT:
		mergesort(list->list, list->count,
		    sizeof(struct sort_list_item *), list_coll);
		break;
	case SORT_HEAPSORT:
		heapsort(list->list, list->count,
		    sizeof(struct sort_list_item *), list_coll);
		break;
	case SORT_QSORT:
		qsort(list->list, list->count,
		    sizeof(struct sort_list_item *), list_coll);
		break;
	default:
		DEFAULT_SORT_FUNC(list->list, list->count,
		    sizeof(struct sort_list_item *), list_coll);
		break;
	}
	sort_list_dump(list, outfile);
}
@


1.20
log
@The combination of -c and -o is not specified by POSIX. In fact, the call
"sort -o file -c file" has unspecified behavior and would leave an empty
file behind if it was sorted, the original file it was not.

If -c (or -C) has been specified, only perform that action and ignore -o
among other arguments.

While at it, clean up check() internals.


with input by and ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: file.c,v 1.19 2015/04/02 22:14:51 deraadt Exp $	*/
d53 1
a53 1
const char *tmpdir = "/var/tmp";
@


1.19
log
@murder excessive whitespace
@
text
@d1 1
a1 1
/*	$OpenBSD: file.c,v 1.18 2015/04/02 21:04:06 tobias Exp $	*/
d347 1
a347 1
	struct bwstring *s1, *s2, *s1disorder, *s2disorder;
d353 1
a353 1
	s1 = s2 = s1disorder = s2disorder = NULL;
d362 1
a362 1
	if (fr == NULL) {
a363 2
		goto end;
	}
d400 1
a400 1
				s2disorder = bwsdup(s2);
d403 1
a403 1
					s1disorder = bwsdup(s1);
d433 1
a433 2
	if (s1)
		bwsfree(s1);
d440 1
a440 2
	if (s2)
		bwsfree(s2);
d453 1
a453 16
	if (s2disorder) {
		bws_disorder_warnx(s2disorder, fn, posdisorder);
		if (s1disorder) {
			bws_disorder_warnx(s1disorder, fn, posdisorder);
			if (s1disorder != s2disorder)
				bwsfree(s1disorder);
		}
		bwsfree(s2disorder);
		s1disorder = NULL;
		s2disorder = NULL;
	}

	if (res)
		exit(res);

	return 0;
@


1.18
log
@Global variable free_memory is only used in sort.c's set_hw_params,
so turn it into a local one.

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: file.c,v 1.17 2015/04/02 12:48:28 millert Exp $	*/
d973 1
a973 1
	 * construct the initial sort structure 
@


1.17
log
@No need for the umask() dance now that temp files are created
with mkstemp().  Also remove useless else after a return.
@
text
@d1 1
a1 1
/*	$OpenBSD: file.c,v 1.16 2015/04/02 12:21:18 millert Exp $	*/
a48 1
unsigned long long free_memory = 1000000;
@


1.16
log
@When using mmap() we don't need to keep the open fd around, closing
the fd does not unmap the region.
@
text
@d1 1
a1 1
/*	$OpenBSD: file.c,v 1.14 2015/04/01 22:43:16 deraadt Exp $	*/
d485 2
a486 26
	if (strcmp(fn, "-") == 0) {
		return (mode && mode[0] == 'r') ? stdin : stdout;
	} else {
		mode_t orig_file_mask = 0;
		int is_tmp = file_is_tmp(fn);

		if (is_tmp && (mode[0] == 'w'))
			orig_file_mask = umask(S_IWGRP | S_IWOTH |
			    S_IRGRP | S_IROTH);

		if (is_tmp && (compress_program != NULL)) {
			char *cmd;

			fflush(stdout);

			if (mode[0] == 'r')
				sort_asprintf(&cmd, "%s -d < %s",
				    compress_program, fn);
			else if (mode[0] == 'w')
				sort_asprintf(&cmd, "%s > %s",
				    compress_program, fn);
			else
				err(2, "Wrong file mode");

			if ((file = popen(cmd, mode)) == NULL)
				err(2, NULL);
d488 2
a489 1
			sort_free(cmd);
d491 1
a491 2
		} else if ((file = fopen(fn, mode)) == NULL)
			err(2, "%s", fn);
d493 16
a508 3
		if (is_tmp && (mode[0] == 'w'))
			umask(orig_file_mask);
	}
@


1.15
log
@closefile() already checks for stdin so no need to check in the caller.
@
text
@a77 1
	int			 fd;
d579 2
a580 4
		if (addr == MAP_FAILED) {
			close(fd);
		} else {
			ret->fd = fd;
a723 3

	if (fr->fd)
		close(fr->fd);
@


1.14
log
@Block signals during tmp_files insertion, so that the signal handler
cannot encounter an incoherent list.  It was an absolutely tiny signal
race.
ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: file.c,v 1.13 2015/04/01 22:24:02 millert Exp $	*/
d734 1
a734 2
		if (fr->file != stdin)
			closefile(fr->file, fr->fname);
@


1.13
log
@Just use sort_reallocarray() everywhere.
@
text
@d1 1
a1 1
/*	$OpenBSD: file.c,v 1.12 2015/04/01 21:33:01 millert Exp $	*/
d39 1
d120 1
d124 3
d128 1
@


1.12
log
@Remove some unneeded NULL checks that don't really help anything.
It is better to crash when given bad input rather than producing
a wrong result.  None of the checks can actually be triggered.
@
text
@d1 1
a1 1
/*	$OpenBSD: file.c,v 1.11 2015/04/01 21:27:18 millert Exp $	*/
d667 2
a668 2
				fr->buffer = sort_realloc(fr->buffer,
				    fr->cbsz);
@


1.11
log
@Let reallocarray do the multiplication for us.
@
text
@d1 1
a1 1
/*	$OpenBSD: file.c,v 1.10 2015/04/01 21:22:41 millert Exp $	*/
d118 5
a122 6
	if (tmp_file) {
		struct CLEANABLE_FILE *item =
		    sort_malloc(sizeof(struct CLEANABLE_FILE));
		item->fn = sort_strdup(tmp_file);
		LIST_INSERT_HEAD(&tmp_files, item, files);
	}
a145 1
	bool ret = false;
d147 3
a149 8
	if (fn) {
		LIST_FOREACH(item, &tmp_files, files) {
			if (item != NULL && item->fn != NULL)
				if (strcmp(item->fn, fn) == 0) {
					ret = true;
					break;
				}
		}
d152 1
a152 1
	return ret;
d178 4
a181 6
	if (fl) {
		fl->count = 0;
		fl->sz = 0;
		fl->fns = NULL;
		fl->tmp = tmp;
	}
d190 4
a193 8
	if (fl && fn) {
		if (fl->count >= fl->sz || fl->fns == NULL) {
			fl->fns = sort_reallocarray(fl->fns,
			    fl->sz ? fl->sz : (fl->sz = 1), 2 * sizeof(char *));
			fl->sz *= 2;
		}
		fl->fns[fl->count] = allocate ? sort_strdup(fn) : fn;
		fl->count += 1;
d195 2
d205 1
a205 2
	if (fl && argv) {
		int i;
d207 2
a208 3
		for (i = 0; i < argc; i++)
			file_list_add(fl, argv[i], allocate);
	}
d218 2
a219 3
	if (fl) {
		if (fl->fns) {
			size_t i;
d221 6
a226 7
			for (i = 0; i < fl->count; i++) {
				if (fl->fns[i]) {
					if (fl->tmp)
						unlink(fl->fns[i]);
					sort_free(fl->fns[i]);
					fl->fns[i] = 0;
				}
a227 2
			sort_free(fl->fns);
			fl->fns = NULL;
d229 2
a230 3
		fl->sz = 0;
		fl->count = 0;
		fl->tmp = false;
d232 3
d243 4
a246 6
	if (l) {
		l->count = 0;
		l->size = 0;
		l->memsize = sizeof(struct sort_list);
		l->list = NULL;
	}
d255 1
a255 2
	if (l && str) {
		size_t indx = l->count;
d257 2
a258 2
		if ((l->list == NULL) || (indx >= l->size)) {
			size_t newsize = (l->size + 1) + 1024;
d260 10
a269 11
			l->list = sort_reallocarray(l->list, newsize,
			    sizeof(struct sort_list_item *));
			l->memsize += (newsize - l->size) *
			    sizeof(struct sort_list_item *);
			l->size = newsize;
		}
		l->list[indx] = sort_list_item_alloc();
		sort_list_item_set(l->list[indx], str);
		l->memsize += sort_list_item_size(l->list[indx]);
		l->count += 1;
	}
d278 2
a279 3
	if (l) {
		if (l->list) {
			size_t i;
d281 2
a282 2
			for (i = 0; i < l->count; i++) {
				struct sort_list_item *item;
d284 1
a284 1
				item = l->list[i];
d286 4
a289 5
				if (item) {
					sort_list_item_clean(item);
					sort_free(item);
					l->list[i] = NULL;
				}
a290 2
			sort_free(l->list);
			l->list = NULL;
d292 2
a293 3
		l->count = 0;
		l->size = 0;
		l->memsize = sizeof(struct sort_list);
d295 3
d306 5
a310 2
	if (l && fn) {
		FILE *f;
d312 2
a313 3
		f = openfile(fn, "w");
		if (f == NULL)
			err(2, "%s", fn);
d315 13
a327 16
		if (l->list) {
			size_t i;
			if (!sort_opts_vals.uflag) {
				for (i = 0; i < l->count; ++i)
					bwsfwrite(l->list[i]->str, f,
					    sort_opts_vals.zflag);
			} else {
				struct sort_list_item *last_printed_item = NULL;
				struct sort_list_item *item;
				for (i = 0; i < l->count; ++i) {
					item = l->list[i];
					if ((last_printed_item == NULL) ||
					    list_coll(&last_printed_item, &item)) {
						bwsfwrite(item->str, f, sort_opts_vals.zflag);
						last_printed_item = item;
					}
d331 1
d333 1
a333 2
		closefile(f, fn);
	}
d679 4
a682 4
				if (remsz > 0 && fr->strbeg>0)
					bcopy(fr->buffer + fr->strbeg,
					    fr->buffer, remsz);

a705 1

d719 2
a720 3
	if (fr) {
		if (fr->mmapaddr)
			munmap(fr->mmapaddr, fr->mmapsize);
d722 2
a723 2
		if (fr->fd)
			close(fr->fd);
d725 1
a725 1
		sort_free(fr->buffer);
d727 3
a729 3
		if (fr->file)
			if (fr->file != stdin)
				closefile(fr->file, fr->fname);
d731 1
a731 1
		sort_free(fr->fname);
d733 1
a733 2
		memset(fr, 0, sizeof(struct file_reader));
	}
d739 2
a740 4
	if (fr) {
		file_reader_clean(fr);
		sort_free(fr);
	}
d784 2
d788 9
a796 14
	else {
		if (f1->fr == NULL) {
			return (f2->fr == NULL) ? 0 : 1;
		} else if (f2->fr == NULL)
			return -1;
		else {
			int ret;

			ret = list_coll(&(f1->si), &(f2->si));
			if (!ret)
				return (f1->file_pos < f2->file_pos) ? -1 : 1;
			return ret;
		}
	}
d805 1
a805 2
	if (fh && fn) {
		struct bwstring *line;
d807 15
a821 16
		*fh = sort_malloc(sizeof(struct file_header));
		(*fh)->file_pos = file_pos;
		(*fh)->fr = file_reader_init(fn);
		if ((*fh)->fr == NULL) {
			err(2, "Cannot open %s for reading",
			    strcmp(fn, "-") == 0 ? "stdin" : fn);
		}
		line = file_reader_readline((*fh)->fr);
		if (line == NULL) {
			file_reader_free((*fh)->fr);
			(*fh)->fr = NULL;
			(*fh)->si = NULL;
		} else {
			(*fh)->si = sort_list_item_alloc();
			sort_list_item_set((*fh)->si, line);
		}
d831 8
a838 12
	if (fh && *fh) {
		if ((*fh)->fr) {
			file_reader_free((*fh)->fr);
			(*fh)->fr = NULL;
		}
		if ((*fh)->si) {
			sort_list_item_clean((*fh)->si);
			sort_free((*fh)->si);
			(*fh)->si = NULL;
		}
		sort_free(*fh);
		*fh = NULL;
d840 2
d939 2
a940 9
	if (fh && fh->fr && f_out && fh->si && fh->si->str) {
		if (sort_opts_vals.uflag) {
			if ((lp->str == NULL) || (str_list_coll(lp->str, &(fh->si)))) {
				bwsfwrite(fh->si->str, f_out, sort_opts_vals.zflag);
				if (lp->str)
					bwsfree(lp->str);
				lp->str = bwsdup(fh->si->str);
			}
		} else
d942 6
a947 1
	}
d956 1
a956 2
	if (fh && fh->fr) {
		struct bwstring *tmp;
d958 8
a965 13
		tmp = file_reader_readline(fh->fr);
		if (tmp == NULL) {
			file_reader_free(fh->fr);
			fh->fr = NULL;
			if (fh->si) {
				sort_list_item_clean(fh->si);
				sort_free(fh->si);
				fh->si = NULL;
			}
		} else {
			if (fh->si == NULL)
				fh->si = sort_list_item_alloc();
			sort_list_item_set(fh->si, tmp);
d967 4
d1011 3
a1013 4
	if (argv && fn_out) {
		struct file_header **fh;
		FILE *f_out;
		size_t i;
d1015 1
a1015 1
		f_out = openfile(fn_out, "w");
d1017 2
a1018 2
		if (f_out == NULL)
			err(2, "%s", fn_out);
d1020 1
a1020 2
		fh = sort_reallocarray(NULL, argc + 1,
		    sizeof(struct file_header *));
d1022 2
a1023 2
		for (i = 0; i < argc; i++)
			file_header_init(fh + i, argv[i], (size_t) i);
d1025 1
a1025 1
		file_headers_merge(argc, fh, f_out);
d1027 2
a1028 2
		for (i = 0; i < argc; i++)
			file_header_close(fh + i);
d1030 1
a1030 1
		sort_free(fh);
d1032 1
a1032 2
		closefile(f_out, fn_out);
	}
d1041 4
a1044 1
	if (fl == NULL || (size_t)fl->count < max_open_files)
a1045 17
	else {
		struct file_list new_fl;
		size_t indx = 0;

		file_list_init(&new_fl, true);
		while (indx < fl->count) {
			char *fnew;
			size_t num;

			num = fl->count - indx;
			fnew = new_tmp_file_name();

			if ((size_t) num >= max_open_files)
				num = max_open_files - 1;
			merge_files_array(num, fl->fns + indx, fnew);
			if (fl->tmp) {
				size_t i;
d1047 16
a1062 5
				for (i = 0; i < num; i++)
					unlink(fl->fns[indx + i]);
			}
			file_list_add(&new_fl, fnew, false);
			indx += num;
d1064 5
a1068 2
		fl->tmp = false; /* already taken care of */
		file_list_clean(fl);
d1070 4
a1073 4
		fl->count = new_fl.count;
		fl->fns = new_fl.fns;
		fl->sz = new_fl.sz;
		fl->tmp = new_fl.tmp;
d1075 1
a1075 2
		return 1;
	}
d1084 2
a1085 2
	if (fl && fn_out) {
		while (shrink_file_list(fl));
d1087 1
a1087 2
		merge_files_array(fl->count, fl->fns, fn_out);
	}
d1120 2
a1121 2
	 * to handle stable sort and the unique cases in the
	 * right order, we need stable basic algorithm
@


1.10
log
@Use reallocarray.
@
text
@d1 1
a1 1
/*	$OpenBSD: file.c,v 1.9 2015/04/01 21:16:17 millert Exp $	*/
d201 3
a203 3
			fl->sz = fl->sz * 2 + 1;
			fl->fns = sort_reallocarray(fl->fns, fl->sz,
			    sizeof(char *));
@


1.9
log
@No need for if (x) free(x) style checks, this is not K&R.
@
text
@d1 1
a1 1
/*	$OpenBSD: file.c,v 1.8 2015/04/01 20:58:13 millert Exp $	*/
d1059 2
a1060 1
		fh = sort_malloc((argc + 1) * sizeof(struct file_header *));
@


1.8
log
@Style nits, remove whitespace at the start of a function.
@
text
@d1 1
a1 1
/*	$OpenBSD: file.c,v 1.7 2015/04/01 20:17:56 tobias Exp $	*/
d749 1
a749 2
		if (fr->buffer)
			sort_free(fr->buffer);
d755 1
a755 2
		if (fr->fname)
			sort_free(fr->fname);
@


1.7
log
@Use mkstemp to generate a new temporary file name.

ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: file.c,v 1.6 2015/04/01 19:06:18 millert Exp $	*/
a108 1

a117 1

a184 1

a198 1

a215 1

a230 1

a257 1

a271 1

a296 1

a326 1

a741 1

a765 1

a812 1

a836 1

a864 1

a901 1

a950 1

a959 1

a974 1

a993 1

a1050 1

a1082 1

a1126 1

a1136 1

@


1.6
log
@Remove unused len variable.
@
text
@d1 1
a1 1
/*	$OpenBSD: file.c,v 1.5 2015/03/31 19:50:54 tobias Exp $	*/
a169 2
	static size_t tfcounter = 0;
	static const char *fn = ".bsdsort.";
d171 1
d173 4
a176 2
	sort_asprintf(&ret, "%s/%s%d.%lu", tmpdir, fn, (int)getpid(),
	    (unsigned long)(tfcounter++));
@


1.5
log
@Remove a useless use of cat.

ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: file.c,v 1.4 2015/03/30 19:59:07 millert Exp $	*/
a172 1
	int len;
d174 1
a174 1
	len = sort_asprintf(&ret, "%s/%s%d.%lu", tmpdir, fn, (int)getpid(),
a522 1
			int len;
d527 1
a527 1
				len = sort_asprintf(&cmd, "%s -d < %s",
d530 1
a530 1
				len = sort_asprintf(&cmd, "%s > %s",
@


1.4
log
@Use sort_asprintf()
@
text
@d1 1
a1 1
/*	$OpenBSD: file.c,v 1.3 2015/03/20 00:26:38 millert Exp $	*/
d529 2
a530 2
				len = sort_asprintf(&cmd, "cat %s | %s -d",
				    fn, compress_program);
@


1.3
log
@Remove custom getdelim(3) and fix a small memory leak.  From Andre Smagin.
@
text
@d1 1
a1 1
/*	$OpenBSD: file.c,v 1.2 2015/03/17 17:49:27 millert Exp $	*/
d175 1
a175 1
	len = asprintf(&ret, "%s/%s%d.%lu", tmpdir, fn, (int)getpid(),
a176 2
	if (len == -1)
		err(2, NULL);
d529 1
a529 1
				len = asprintf(&cmd, "cat %s | %s -d",
d532 1
a532 1
				len = asprintf(&cmd, "%s > %s",
a535 3

			if (len == -1)
				err(2, NULL);
@


1.2
log
@Add sort_calloc() and use it.
@
text
@d1 1
a1 1
/*	$OpenBSD: file.c,v 1.1 2015/03/17 17:45:13 millert Exp $	*/
a161 35
}

/*
 * Read zero-terminated line from a file
 */
char *
read_file0_line(struct file0_reader *f0r)
{
	size_t pos = 0;
	int c;

	if (f0r->f == NULL || feof(f0r->f))
		return NULL;

	if (f0r->current_line && f0r->current_sz > 0)
		f0r->current_line[0] = 0;

	while (!feof(f0r->f)) {
		c = fgetc(f0r->f);
		if (feof(f0r->f) || c == EOF)
			break;
		if ((pos + 1) >= f0r->current_sz) {
			f0r->current_line = sort_reallocarray(f0r->current_line,
			    f0r->current_sz + 2, 2);
			f0r->current_sz = (f0r->current_sz + 2) * 2;
		}
		f0r->current_line[pos] = (char)c;
		if (c == 0)
			break;
		else
			f0r->current_line[pos + 1] = 0;
		++pos;
	}

	return f0r->current_line;
@


1.1
log
@Initial import of FreeBSD sort.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d624 1
a624 2
	ret = sort_malloc(sizeof(struct file_reader));
	memset(ret, 0, sizeof(struct file_reader));
@

