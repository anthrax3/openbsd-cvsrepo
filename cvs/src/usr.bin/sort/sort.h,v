head	1.10;
access;
symbols
	OPENBSD_6_1:1.10.0.6
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.4
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.9.0.4
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.7.0.30
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.28
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.24
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.22
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.20
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.18
	OPENBSD_5_0:1.7.0.16
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.14
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.12
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.8
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.10
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.6
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.4
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.2
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.6.0.18
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.16
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.14
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.12
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.10
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.5.0.10
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.8
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.6
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.4
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_8:1.4.0.6
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.4
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.3.0.8
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.6
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.4
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.1.0.2
	OPENBSD_2_1_BASE:1.1;
locks; strict;
comment	@ * @;


1.10
date	2015.12.31.16.09.31;	author millert;	state Exp;
branches;
next	1.9;
commitid	h73165wXSNEgzesI;

1.9
date	2015.03.17.17.45.13;	author millert;	state Exp;
branches;
next	1.8;
commitid	XCfT2rs68MOcwt0o;

1.8
date	2015.01.16.06.40.12;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	Uu5nFG3wCl0LACBb;

1.7
date	2007.08.21.20.29.25;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.03.02.56.16;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.02.04.21.27.01;	author ericj;	state Exp;
branches;
next	1.4;

1.4
date	99.05.24.17.57.19;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.06.30.05.36.18;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.06.24.02.37.17;	author dgregor;	state Exp;
branches;
next	1.1;

1.1
date	97.01.20.19.39.56;	author millert;	state Exp;
branches;
next	;


desc
@@


1.10
log
@No need for sysexits.h here.
@
text
@/*	$OpenBSD: sort.h,v 1.9 2015/03/17 17:45:13 millert Exp $	*/

/*-
 * Copyright (C) 2009 Gabor Kovesdan <gabor@@FreeBSD.org>
 * Copyright (C) 2012 Oleg Moskalenko <mom040267@@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#if !defined(__BSD_SORT_H__)
#define	__BSD_SORT_H__

#include <errno.h>
#include <stdbool.h>
#include <stdio.h>
#include <wchar.h>

#include <sys/types.h>
#include <md5.h>

#define	VERSION	"2.3-OpenBSD"

/*
 * If true, we output some debug information.
 */
extern bool debug_sort;

/*
 * MD5 context for random hash function
 */
extern MD5_CTX md5_ctx;

/*
 * sort.c
 */

/*
 * This structure holds main sort options which are NOT affecting the sort ordering.
 */
struct sort_opts {
	wint_t		field_sep;
	int		sort_method;
	bool		cflag;
	bool		csilentflag;
	bool		kflag;
	bool		mflag;
	bool		sflag;
	bool		uflag;
	bool		zflag;
	bool		tflag;
	bool		complex_sort;
};

/*
 * Key value structure forward declaration
 */
struct key_value;

/*
 * Cmp function
 */
typedef int (*cmpcoll_t)(struct key_value *kv1, struct key_value *kv2, size_t offset);

/*
 * This structure holds "sort modifiers" - options which are affecting the sort ordering.
 */
struct sort_mods {
	cmpcoll_t	func;
	bool		bflag;
	bool		dflag;
	bool		fflag;
	bool		gflag;
	bool		iflag;
	bool		Mflag;
	bool		nflag;
	bool		rflag;
	bool		Rflag;
	bool		Vflag;
	bool		hflag;
};

extern bool need_hint;

extern struct sort_opts sort_opts_vals;

extern struct sort_mods * const default_sort_mods;

#endif /* __BSD_SORT_H__ */
@


1.9
log
@Initial import of FreeBSD sort.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a35 1
#include <sysexits.h>
@


1.8
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: sort.h,v 1.7 2007/08/21 20:29:25 millert Exp $	*/
d4 3
a6 5
 * Copyright (c) 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Peter McIlroy.
a15 3
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
d17 1
a17 1
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
d20 1
a20 1
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
a27 2
 *
 *	@@(#)sort.h	8.1 (Berkeley) 6/6/93
d30 3
a32 2
#include <db.h>
#include <err.h>
d34 1
a34 2
#include <fcntl.h>
#include <limits.h>
d36 17
a52 2
#include <stdlib.h>
#include <string.h>
d54 3
a56 2
#define NBINS 256
#define MAXMERGE 16
d58 15
a72 53
/* values for masks, weights, and other flags. */
#define I 1		/* mask out non-printable characters */
#define D 2		/* sort alphanumeric characters only */
#define N 4		/* Field is a number */
#define F 8		/* weight lower and upper case the same */
#define R 16		/* Field is reversed with respect to the global weight */
#define BI 32		/* ignore blanks in icol */
#define BT 64		/* ignore blanks in tcol */

/* masks for delimiters: blanks, fields, and termination. */
#define BLANK 1		/* ' ', '\t'; '\n' if -T is invoked */
#define FLD_D 2		/* ' ', '\t' default; from -t otherwise */
#define REC_D_F 4	/* '\n' default; from -T otherwise */

#define min(a, b) ((a) < (b) ? (a) : (b))
#define max(a, b) ((a) > (b) ? (a) : (b))

#define	FCLOSE(file) {							\
	if (EOF == fclose(file))					\
		err(2, "fclose");					\
}

#define	EWRITE(ptr, size, n, f) {					\
	if (!fwrite(ptr, size, n, f))					\
		 err(2, "fwrite");					\
}

/* length of record is currently limited to maximum string length (size_t) */
typedef size_t length_t;

#define SALIGN(n) ((n+(sizeof(length_t)-1)) & ~(sizeof(length_t)-1))

/* a record is a key/line pair starting at rec.data. It has a total length
 * and an offset to the start of the line half of the pair.
 */
typedef struct recheader {
	length_t length;
	length_t offset;
	u_char data[1];
} RECHEADER;

typedef struct trecheader {
	length_t length;
	length_t offset;
} TRECHEADER;

/* This is the column as seen by struct field.  It is used by enterfield.
 * They are matched with corresponding coldescs during initialization.
 */
struct column {
	struct coldesc *p;
	int num;
	int indent;
d75 2
a76 2
/* a coldesc has a number and pointers to the beginning and end of the
 * corresponding column in the current line.  This is determined in enterkey.
d78 23
a100 17
typedef struct coldesc {
	u_char *start;
	u_char *end;
	int num;
} COLDESC;

/* A field has an initial and final column; an omitted final column
 * implies the end of the line.  Flags regulate omission of blanks and
 * numerical sorts; mask determines which characters are ignored (from -i, -d);
 * weights determines the sort weights of a character (from -f, -r).
 */
struct field {
	struct column icol;
	struct column tcol;
	u_int flags;
	u_char *mask;
	u_char *weights;
d103 5
a107 12
union f_handle {
	int top;
	char **names;
};
extern int PANIC;	/* maximum depth of fsort before fmerge is called */
extern u_char ascii[NBINS], Rascii[NBINS], Ftable[NBINS], RFtable[NBINS];
extern u_char alltable[NBINS], dtable[NBINS], itable[NBINS];
extern u_char d_mask[NBINS];
extern int SINGL_FLD, SEP_FLAG, UNIQUE, STABLE;
extern int REC_D;
extern char *tmpdir;
extern int ND;		/* limit on number of -k options. */
d109 1
a109 1
#include "extern.h"
@


1.7
log
@Add a -s option to make the radix sort be a stable sort.  Based on
a diff from Eric Gouyer.  Closes PR 5553.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sort.h,v 1.6 2003/06/03 02:56:16 millert Exp $	*/
a35 2

#include <sys/param.h>
@


1.6
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: sort.h,v 1.5 2001/02/04 21:27:01 ericj Exp $	*/
d136 1
a136 1
extern int SINGL_FLD, SEP_FLAG, UNIQUE;
@


1.5
log
@
Bring in some recent fixup's from NetBSD. This allows lines longer than 65522
to be properly sorted. Many other cleanup's done, and depreciate register.
millert@@ and deraadt@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: sort.h,v 1.4 1999/05/24 17:57:19 millert Exp $	*/
d18 1
a18 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.4
log
@Dynamically allocate memory for structures whose sizes are based on the
number of keys given.  Closes PR #825.
@
text
@d1 1
a1 1
/*	$OpenBSD: sort.h,v 1.3 1997/06/30 05:36:18 millert Exp $	*/
d82 2
a83 2
/* length of record is currently limited to 2^16 - 1 */
typedef u_short length_t;
@


1.3
log
@64bit fixes.  Some of these are a bit bogus as there were "long"s
meant to be file offsets for fseek(3).  However, those values
could never be > an int anyay so it is not a problem.
@
text
@d1 1
a1 1
/*	$OpenBSD: sort.h,v 1.2 1997/06/24 02:37:17 dgregor Exp $	*/
a68 2
#define ND 10	/* limit on number of -k options. */

d79 1
a79 1
		 err(2, NULL);						\
d143 1
@


1.2
log
@Add #include for string.h to get declaration for memcpy
@
text
@d1 1
a1 1
/*	$OpenBSD: sort.h,v 1.1 1997/01/20 19:39:56 millert Exp $	*/
d87 1
a87 1
#define SALIGN(n) ((n+1) & ~1)
@


1.1
log
@sort(1) from 4.4BSD-lite2 with minor tweaks and bug fixes by me.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d50 1
@
