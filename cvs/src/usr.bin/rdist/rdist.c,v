head	1.30;
access;
symbols
	OPENBSD_6_0:1.30.0.8
	OPENBSD_6_0_BASE:1.30
	OPENBSD_5_9:1.30.0.4
	OPENBSD_5_9_BASE:1.30
	OPENBSD_5_8:1.30.0.6
	OPENBSD_5_8_BASE:1.30
	OPENBSD_5_7:1.30.0.2
	OPENBSD_5_7_BASE:1.30
	OPENBSD_5_6:1.28.0.4
	OPENBSD_5_6_BASE:1.28
	OPENBSD_5_5:1.21.0.14
	OPENBSD_5_5_BASE:1.21
	OPENBSD_5_4:1.21.0.10
	OPENBSD_5_4_BASE:1.21
	OPENBSD_5_3:1.21.0.8
	OPENBSD_5_3_BASE:1.21
	OPENBSD_5_2:1.21.0.6
	OPENBSD_5_2_BASE:1.21
	OPENBSD_5_1_BASE:1.21
	OPENBSD_5_1:1.21.0.4
	OPENBSD_5_0:1.21.0.2
	OPENBSD_5_0_BASE:1.21
	OPENBSD_4_9:1.19.0.6
	OPENBSD_4_9_BASE:1.19
	OPENBSD_4_8:1.19.0.4
	OPENBSD_4_8_BASE:1.19
	OPENBSD_4_7:1.19.0.2
	OPENBSD_4_7_BASE:1.19
	OPENBSD_4_6:1.18.0.14
	OPENBSD_4_6_BASE:1.18
	OPENBSD_4_5:1.18.0.10
	OPENBSD_4_5_BASE:1.18
	OPENBSD_4_4:1.18.0.8
	OPENBSD_4_4_BASE:1.18
	OPENBSD_4_3:1.18.0.6
	OPENBSD_4_3_BASE:1.18
	OPENBSD_4_2:1.18.0.4
	OPENBSD_4_2_BASE:1.18
	OPENBSD_4_1:1.18.0.2
	OPENBSD_4_1_BASE:1.18
	OPENBSD_4_0:1.17.0.14
	OPENBSD_4_0_BASE:1.17
	OPENBSD_3_9:1.17.0.12
	OPENBSD_3_9_BASE:1.17
	OPENBSD_3_8:1.17.0.10
	OPENBSD_3_8_BASE:1.17
	OPENBSD_3_7:1.17.0.8
	OPENBSD_3_7_BASE:1.17
	OPENBSD_3_6:1.17.0.6
	OPENBSD_3_6_BASE:1.17
	OPENBSD_3_5:1.17.0.4
	OPENBSD_3_5_BASE:1.17
	OPENBSD_3_4:1.17.0.2
	OPENBSD_3_4_BASE:1.17
	OPENBSD_3_3:1.13.0.4
	OPENBSD_3_3_BASE:1.13
	OPENBSD_3_2:1.13.0.2
	OPENBSD_3_2_BASE:1.13
	OPENBSD_3_1:1.12.0.2
	OPENBSD_3_1_BASE:1.12
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.10
	OPENBSD_2_8:1.7.0.8
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.6
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.7.0.4
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.2
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.30
date	2015.02.08.23.40.34;	author deraadt;	state Exp;
branches;
next	1.29;
commitid	yGZX28AeTChVE8eY;

1.29
date	2015.01.20.09.00.16;	author guenther;	state Exp;
branches;
next	1.28;
commitid	0Y0sKBv6c3xIKoav;

1.28
date	2014.07.12.03.32.00;	author guenther;	state Exp;
branches;
next	1.27;
commitid	uegd2I1KLsYIWNNt;

1.27
date	2014.07.12.03.07.22;	author guenther;	state Exp;
branches;
next	1.26;
commitid	pmRYQPtyCDHxXvuw;

1.26
date	2014.07.12.02.58.18;	author guenther;	state Exp;
branches;
next	1.25;
commitid	hnw8ghmSwPD1dnqV;

1.25
date	2014.07.11.13.00.06;	author tedu;	state Exp;
branches;
next	1.24;
commitid	BUuGNm9xmRz8X9xb;

1.24
date	2014.07.10.14.29.27;	author tedu;	state Exp;
branches;
next	1.23;
commitid	5Hj61xKwjGC4g5Vf;

1.23
date	2014.07.05.07.22.18;	author guenther;	state Exp;
branches;
next	1.22;
commitid	yx9CbZuQ0BTvpYrS;

1.22
date	2014.07.05.05.05.51;	author guenther;	state Exp;
branches;
next	1.21;
commitid	U6Y6NKOm7JX1MOTg;

1.21
date	2011.04.21.02.44.15;	author krw;	state Exp;
branches;
next	1.20;

1.20
date	2011.04.10.15.47.28;	author krw;	state Exp;
branches;
next	1.19;

1.19
date	2009.10.27.23.59.42;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2007.02.26.15.38.04;	author jmc;	state Exp;
branches;
next	1.17;

1.17
date	2003.06.03.02.56.15;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2003.05.14.01.34.35;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2003.05.06.22.10.11;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2003.04.05.20.31.58;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2002.05.09.19.19.33;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2002.02.19.19.39.39;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2001.12.29.23.16.10;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2001.12.29.21.31.55;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2001.11.19.19.02.15;	author mpech;	state Exp;
branches;
next	1.8;

1.8
date	2001.07.09.07.04.51;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	99.02.04.23.18.57;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	98.07.16.20.43.56;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	98.06.26.21.21.20;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.07.22.06.59.39;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.06.26.05.38.17;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.03.05.03.16.11;	author dm;	state Exp;
branches;
next	1.1;

1.1
date	96.02.03.12.12.38;	author dm;	state Exp;
branches;
next	;


desc
@@


1.30
log
@in getopt() blocks, stop incrementing flag variable which are supposed
to just be 0/1
ok miod florian
@
text
@/*	$OpenBSD: rdist.c,v 1.29 2015/01/20 09:00:16 guenther Exp $	*/

/*
 * Copyright (c) 1983 Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <ctype.h>
#include <errno.h>
#include <limits.h>
#include <paths.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "client.h"
#include "y.tab.h"


/*
 * Remote distribution program.
 */

int     	maxchildren = MAXCHILDREN;	/* Max no of concurrent PIDs */
int		nflag = 0;			/* Say without doing */
int64_t		min_freespace = 0;		/* Min filesys free space */
int64_t		min_freefiles = 0;		/* Min filesys free # files */
FILE   	       *fin = NULL;			/* Input file pointer */
char		localmsglist[] = "stdout=all:notify=all:syslog=nerror,ferror";
char   	       *remotemsglist = NULL;
char		optchars[] = "A:a:bcd:DFf:hil:L:M:m:NnOo:p:P:qRrst:Vvwxy";
char	       *path_rdistd = _PATH_RDISTD;
char	       *path_remsh = NULL;

static void addhostlist(char *, struct namelist **);
static void usage(void);
int main(int, char **, char **);

/*
 * Add a hostname to the host list
 */
static void
addhostlist(char *name, struct namelist **hostlist)
{
	struct namelist *ptr, *new;

	if (!name || !hostlist)
		return;

	new = xmalloc(sizeof *new);
	new->n_name = xstrdup(name);
	new->n_regex = NULL;
	new->n_next = NULL;

	if (*hostlist) {
		for (ptr = *hostlist; ptr && ptr->n_next; ptr = ptr->n_next)
			;
		ptr->n_next = new;
	} else
		*hostlist = new;
}

int
main(int argc, char **argv, char **envp)
{
	extern char *__progname;
	struct namelist *hostlist = NULL;
	char *distfile = NULL;
	char *cp;
	int cmdargs = 0;
	int c;
	const char *errstr;

	progname = __progname;

	if ((cp = msgparseopts(localmsglist, TRUE)) != NULL) {
		error("Bad builtin log option (%s): %s.", 
		      localmsglist, cp);
		usage();
	}

	if ((cp = getenv("RDIST_OPTIONS")) != NULL)
		if (parsedistopts(cp, &options, TRUE)) {
			error("Bad dist option environment string \"%s\".", 
			      cp);
			exit(1);
		}

	if (init(argc, argv, envp) < 0)
		exit(1);

	/*
	 * Perform check to make sure we are not incorrectly installed
	 * setuid to root or anybody else.
	 */
	if (getuid() != geteuid())
		fatalerr("This version of rdist should not be installed setuid.");

	while ((c = getopt(argc, argv, optchars)) != -1)
		switch (c) {
		case 'l':
			if ((cp = msgparseopts(optarg, TRUE)) != NULL) {
				error("Bad log option \"%s\": %s.", optarg,cp);
				usage();
			}
			break;

		case 'L':
			remotemsglist = xstrdup(optarg);
			break;

		case 'A':
		case 'a':
		case 'M':
		case 't':
			if (!isdigit((unsigned char)*optarg)) {
				error("\"%s\" is not a number.", optarg);
				usage();
			}
			if (c == 'a') {
				min_freespace = (int64_t)strtonum(optarg,
					0, LLONG_MAX, &errstr);
				if (errstr)
					fatalerr("Minimum free space is %s: "
						 "'%s'", errstr, optarg);
			}
			else if (c == 'A') {
				min_freefiles = (int64_t)strtonum(optarg,
					0, LLONG_MAX, &errstr);
				if (errstr)
					fatalerr("Minimum free files is %s: "
						 "'%s'", errstr, optarg);
			}
			else if (c == 'M')
				maxchildren = atoi(optarg);
			else if (c == 't')
				rtimeout = atoi(optarg);
			break;

		case 'F':
			do_fork = FALSE;
			break;

		case 'f':
			distfile = xstrdup(optarg);
			if (distfile[0] == '-' && distfile[1] == CNULL)
				fin = stdin;
			break;

		case 'm':
			addhostlist(optarg, &hostlist);
			break;

		case 'd':
			define(optarg);
			break;

		case 'D':
			debug = DM_ALL;
			if ((cp = msgparseopts("stdout=all,debug",
			    TRUE)) != NULL) {
				error("Enable debug messages failed: %s.", cp);
				usage();
			}
			break;

		case 'c':
			cmdargs = 1;
			break;

		case 'n':
			nflag = 1;
			break;

		case 'V':
			printf("%s\n", getversion());
			exit(0);

		case 'o':
			if (parsedistopts(optarg, &options, TRUE)) {
				error("Bad dist option string \"%s\".", 
				      optarg);
				usage();
			}
			break;

		case 'p':
			if (!optarg) {
				error("No path specified to \"-p\".");
				usage();
			}
			path_rdistd = xstrdup(optarg);
			break;

		case 'P':
			if (!optarg) {
				error("No path specified to \"-P\".");
				usage();
			}
			if ((cp = searchpath(optarg)) != NULL)
				path_remsh = xstrdup(cp);
			else {
				error("No component of path \"%s\" exists.",
				      optarg);
				usage();
			}
			break;

			/*
			 * These options are obsoleted by -o.  They are
			 * provided only for backwards compatibility
			 */
		case 'v':	FLAG_ON(options, DO_VERIFY);		break;
		case 'N':	FLAG_ON(options, DO_CHKNFS);		break;
		case 'O':	FLAG_ON(options, DO_CHKREADONLY);	break;
		case 'q':	FLAG_ON(options, DO_QUIET);		break;
		case 'b':	FLAG_ON(options, DO_COMPARE);		break;
		case 'r':	FLAG_ON(options, DO_NODESCEND);		break;
		case 'R':	FLAG_ON(options, DO_REMOVE);		break;
		case 's':	FLAG_ON(options, DO_SAVETARGETS);	break;
		case 'w':	FLAG_ON(options, DO_WHOLE);		break;
		case 'y':	FLAG_ON(options, DO_YOUNGER);		break;
		case 'h':	FLAG_ON(options, DO_FOLLOW);		break;
		case 'i':	FLAG_ON(options, DO_IGNLNKS);		break;
		case 'x':	FLAG_ON(options, DO_NOEXEC);		break;

		case '?':
		default:
			usage();
		}

	if (debug) {
		printf("%s\n", getversion());
		msgprconfig();
	}

	if (nflag && IS_ON(options, DO_VERIFY))
		fatalerr(
		 "The -n flag and \"verify\" mode may not both be used.");

	if (path_remsh == NULL) {
		if ((cp = getenv("RSH")) != NULL && *cp != '\0')
			path_remsh = cp;
		else
			path_remsh = _PATH_RSH;
	}

	/*
	 * Don't fork children for nflag
	 */
	if (nflag)
		do_fork = 0;

	if (cmdargs)
		docmdargs(realargc - optind, &realargv[optind]);
	else {
		if (fin == NULL)
			fin = opendist(distfile);
		(void) yyparse();
		/*
		 * Need to keep stdin open for child processing later
		 */
		if (fin != stdin)
			(void) fclose(fin);
		if (nerrs == 0)
			docmds(hostlist, realargc-optind, &realargv[optind]);
	}

	exit(nerrs != 0);
}

/*
 * Open a distfile
 */
FILE *
opendist(char *distfile)
{
	char *file = NULL;
	FILE *fp;

	if (distfile == NULL) {
		if (access("distfile", R_OK) == 0)
			file = "distfile";
		else if (access("Distfile", R_OK) == 0)
			file = "Distfile";
	} else {
		/*
		 * Try to test to see if file is readable before running m4.
		 */
		if (access(distfile, R_OK) != 0)
			fatalerr("%s: Cannot access file: %s.", 
				 distfile, SYSERR);
		file = distfile;
	}

	if (file == NULL)
		fatalerr("No distfile found.");

	fp = fopen(file, "r");

	if (fp == NULL)
		fatalerr("%s: open failed: %s.", file, SYSERR);

	return(fp);
}

/*
 * Print usage message and exit.
 */
static void
usage(void)
{
	extern char *__progname;

	(void) fprintf(stderr,
		"usage: %s [-DFnV] [-A num] [-a num] "
		"[-c mini_distfile]\n"
		"\t[-d var=value] [-f distfile] [-L remote_logopts] "
		"[-l local_logopts]\n"
		"\t[-M maxproc] [-m host] [-o distopts] [-P rsh-path] "
		"[-p rdistd-path]\n"
		"\t[-t timeout] [name ...]\n", __progname);


	(void) fprintf(stderr, "\nThe values for <distopts> are:\n\t%s\n",
		       getdistoptlist());

	msgprusage();

	exit(1);
}

/*
 * rcp like interface for distributing files.
 */
void
docmdargs(int nargs, char **args)
{
	struct namelist *nl, *prev;
	char *cp;
	struct namelist *files, *hosts;
	struct subcmd *scmds;
	char *dest;
	static struct namelist tnl;
	int i;

	if (nargs < 2)
		usage();

	prev = NULL;
	files = NULL;
	for (i = 0; i < nargs - 1; i++) {
		nl = makenl(args[i]);
		if (prev == NULL)
			files = prev = nl;
		else {
			prev->n_next = nl;
			prev = nl;
		}
	}

	cp = args[i];
	if ((dest = strchr(cp, ':')) != NULL)
		*dest++ = '\0';
	tnl.n_name = cp;
	tnl.n_regex = NULL;
	tnl.n_next = NULL;
	hosts = expand(&tnl, E_ALL);
	if (nerrs)
		exit(1);

	if (dest == NULL || *dest == '\0')
		scmds = NULL;
	else {
		scmds = makesubcmd(INSTALL);
		scmds->sc_options = options;
		scmds->sc_name = dest;
	}

	debugmsg(DM_MISC, "docmdargs()\nfiles = %s", getnlstr(files));
	debugmsg(DM_MISC, "host = %s", getnlstr(hosts));

	insert(NULL, files, hosts, scmds);
	docmds(NULL, 0, NULL);
}

/*
 * Get a list of NAME blocks (mostly for debugging).
 */
char *
getnlstr(struct namelist *nl)
{
	static char buf[16384];
	size_t len = 0;

	(void) snprintf(buf, sizeof(buf), "(");

	while (nl != NULL) {
		if (nl->n_name == NULL)
			continue;
		len += strlen(nl->n_name) + 2;
		if (len >= sizeof(buf)) {
			(void) strlcpy(buf,
				       "getnlstr() Buffer not large enough",
				       sizeof(buf));
			return(buf);
		}
		(void) strlcat(buf, " ", sizeof(buf));
		(void) strlcat(buf, nl->n_name, sizeof(buf));
		nl = nl->n_next;
	}

	(void) strlcat(buf, " )", sizeof(buf));

	return(buf);
}
@


1.29
log
@Split out from rdist/defs.h the client-only and server-only bits into
 rdist/client.h and rdistd/server.h
Only put #includes in .h files that are necessary for the .h to be used;
 all other #includes go in the .c files
Move all extern variable declarations to the .h files, renaming local
 variables to avoid shadowing
Replace me_type member of mntent_t with an "is NFS?" flag bit
@
text
@d1 1
a1 1
/*	$OpenBSD: rdist.c,v 1.28 2014/07/12 03:32:00 guenther Exp $	*/
d192 1
a192 1
			cmdargs++;
d196 1
a196 1
			nflag++;
@


1.28
log
@Kill os-openbsd.h: we have <paths.h>, _PATH_RSH, and utimes()
@
text
@d1 1
a1 1
/*	$OpenBSD: rdist.c,v 1.27 2014/07/12 03:07:22 guenther Exp $	*/
d32 9
a40 1
#include "defs.h"
a42 2
#include <netdb.h>
#include <sys/ioctl.h>
d366 1
a366 1
	struct subcmd *cmds;
d397 1
a397 1
		cmds = NULL;
d399 3
a401 3
		cmds = makesubcmd(INSTALL);
		cmds->sc_options = options;
		cmds->sc_name = dest;
d407 1
a407 1
	insert(NULL, files, hosts, cmds);
@


1.27
log
@Eliminate some annoying variable shadowing
@
text
@d1 1
a1 1
/*	$OpenBSD: rdist.c,v 1.26 2014/07/12 02:58:18 guenther Exp $	*/
d263 1
a263 1
			path_remsh = _PATH_REMSH;
@


1.26
log
@Unused variable from oldrdist cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: rdist.c,v 1.25 2014/07/11 13:00:06 tedu Exp $	*/
a41 1
char   	       *distfile = NULL;		/* Name of distfile to use */
d86 1
@


1.25
log
@delete all traces of oldrdist -Server command. ok beck guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: rdist.c,v 1.24 2014/07/10 14:29:27 tedu Exp $	*/
a86 1
	int x;
@


1.24
log
@fleanse out oldrdist support
@
text
@d1 1
a1 1
/*	$OpenBSD: rdist.c,v 1.23 2014/07/05 07:22:18 guenther Exp $	*/
a111 10
	 * Be backwards compatible.
	 */
	for (x = 1; x <= argc && argv[x]; x++) {
		if (strcmp(argv[x], "-Server") != 0)
			continue;
		fatalerr("Old rdist not available.");
		exit(1);
	}

	/*
d335 1
a335 1
		"usage: %s [-DFnV] [-Server] [-A num] [-a num] "
@


1.23
log
@Assume POSIX: lchown(), fchown(), fchmod(), fchmodat()
Assume we have rcmdsh()
@
text
@d1 1
a1 1
/*	$OpenBSD: rdist.c,v 1.22 2014/07/05 05:05:51 guenther Exp $	*/
a116 9
#if	defined(_PATH_OLDRDIST)
		message(MT_SYSLOG, 
			"Old rdist (-Server) requested; running %s", 
			_PATH_OLDRDIST);
		(void) execl(_PATH_OLDRDIST, xbasename(_PATH_OLDRDIST), 
			     "-Server", (char *)NULL);
		fatalerr("Exec old rdist failed: %s: %s.", 
			 _PATH_OLDRDIST, SYSERR);
#else	/* !_PATH_OLDRDIST */
a117 1
#endif	/* _PATH_OLDRDIST */
@


1.22
log
@Use void* in malloc/realloc/calloc wrappers
@
text
@d1 1
a1 1
/*	$OpenBSD: rdist.c,v 1.21 2011/04/21 02:44:15 krw Exp $	*/
a130 4
#if	defined(DIRECT_RCMD)
	if (becomeuser() != 0)
		exit(1);
#else	/* !DIRECT_RCMD */
a136 1
#endif	/* DIRECT_RCMD */
@


1.21
log
@Fix more long vs 64bit type mismatches. Now 4GB i386 <-> macppc
transfers work for Richard Toohey.
@
text
@d1 1
a1 1
/*	$OpenBSD: rdist.c,v 1.20 2011/04/10 15:47:28 krw Exp $	*/
d69 1
a69 1
	new = (struct namelist *) xmalloc(sizeof(struct namelist));
@


1.20
log
@Apply some tough type-love and give rdist a chance to handle files
larger than 2GB. Diff from Stephan R. Gerber via PR#6586, tweaks
by me.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rdist.c,v 1.19 2009/10/27 23:59:42 deraadt Exp $	*/
d45 2
a46 2
long		min_freespace = 0;		/* Min filesys free space */
long		min_freefiles = 0;		/* Min filesys free # files */
d172 1
a172 1
				min_freefiles = (u_int64_t)strtonum(optarg,
@


1.19
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: rdist.c,v 1.18 2007/02/26 15:38:04 jmc Exp $	*/
d91 1
d164 14
a177 4
			if (c == 'a')
				min_freespace = atoi(optarg);
			else if (c == 'A')
				min_freefiles = atoi(optarg);
@


1.18
log
@- one synopis
- sort options
- sync usage()
@
text
@d1 1
a1 1
/*	$OpenBSD: rdist.c,v 1.17 2003/06/03 02:56:15 millert Exp $	*/
a33 18

#ifndef lint
#if 0
static char RCSid[] __attribute__((__unused__)) =
"$From: rdist.c,v 1.6 2001/03/12 18:16:36 kim Exp $";
#else
static char RCSid[] __attribute__((__unused__)) =
"$OpenBSD: rdist.c,v 1.17 2003/06/03 02:56:15 millert Exp $";
#endif

static char sccsid[] __attribute__((__unused__)) =
"@@(#)main.c	5.1 (Berkeley) 6/6/85";

static char copyright[] __attribute__((__unused__)) =
"@@(#) Copyright (c) 1983 Regents of the University of California.\n\
 All rights reserved.\n";
#endif /* not lint */

@


1.17
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: rdist.c,v 1.16 2003/05/14 01:34:35 millert Exp $	*/
d41 1
a41 1
"$OpenBSD: rdist.c,v 1.16 2003/05/14 01:34:35 millert Exp $";
d364 1
a364 11
	char *sopts = "cDFnv";

	(void) fprintf(stderr,
		      "Usage: %s [-%s] [-A <num>] [-a <num>] [-d var=value]\n",
		       progname, sopts);
	(void) fprintf(stderr, 
       "\t[-f distfile] [-l <msgopt>] [-L <msgopt>] [-M <maxproc>]\n");
	(void) fprintf(stderr, 
       "\t[-m host] [-o <distopts>] [-p <rdistd-cmd>] [-P <rsh-path>]\n");
	(void) fprintf(stderr, 
       "\t[-t <timeout>] [target ...]\n");
d367 7
a373 2
		      "OR:    %s [-%s] -c source [...] machine[:dest]\n", 
		       progname, sopts);
a374 1
	(void) fprintf(stderr, "OR:    %s -V\n", progname);
@


1.16
log
@ o Sync w/ freerdist 0.92 minus the compress option
 o KNF and ANSIfy the function headers

Sparse file support is currently a no-op since it didn't work.
Proper sparse file support will be added later.
@
text
@d1 1
a1 1
/*	$OpenBSD: rdist.c,v 1.15 2003/05/06 22:10:11 millert Exp $	*/
d15 1
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d41 1
a41 1
"$OpenBSD: rdist.c,v 1.15 2003/05/06 22:10:11 millert Exp $";
@


1.15
log
@use POSIX regex
@
text
@d1 1
a1 1
/*	$OpenBSD: rdist.c,v 1.14 2003/04/05 20:31:58 deraadt Exp $	*/
d36 3
d41 2
a42 2
static char RCSid[] = 
"$From: rdist.c,v 6.65 1995/12/12 00:20:39 mcooper Exp $";
d44 2
a45 2
static char RCSid[] = 
"$OpenBSD: rdist.c,v 1.14 2003/04/05 20:31:58 deraadt Exp $";
d48 2
a49 1
static char sccsid[] = "@@(#)main.c	5.1 (Berkeley) 6/6/85";
d51 1
a51 1
static char copyright[] =
a56 2
#include "defs.h"
#include "y.tab.h"
a63 3
void		docmdargs(int, char **);
void		usage(void);

a69 1
struct group   *gr = NULL;			/* Static area for getgrent */
a72 1
FILE   	       *opendist();
d76 4
d83 2
a84 3
static void addhostlist(name, hostlist)
	char *name;
	struct namelist **hostlist;
d105 1
a105 4
main(argc, argv, envp)
	int argc;
	char *argv[];
	char **envp;
d107 1
d114 1
a114 5
	/*
	 * We initialize progname here instead of init() because
	 * things in msgparseopts() need progname set.
	 */
	setprogname(argv);
d116 1
a116 1
	if ((cp = msgparseopts(localmsglist, TRUE))) {
d122 7
d167 1
a167 1
			if ((cp = msgparseopts(optarg, TRUE))) {
d181 1
a181 1
			if (!isdigit(*optarg)) {
d215 2
a216 1
			if ((cp = msgparseopts("stdout=all,debug", TRUE))) {
d255 1
a255 1
			if ((cp = searchpath(optarg)))
d300 1
a300 1
			path_remsh = _PATH_SSH;
d330 2
a331 2
FILE *opendist(distfile)
	char *distfile;
d365 2
a366 2
void
usage()
d398 1
a398 3
docmdargs(nargs, args)
	int nargs;
	char *args[];
d445 1
a445 1
	docmds(0, NULL, 0, (char **)NULL);
d451 2
a452 2
extern char *getnlstr(nl)
	struct namelist *nl;
d455 1
a455 1
	int count = 0, len = 0;
d457 1
a457 1
	(void) snprintf(buf, sizeof buf, "(");
d465 2
a466 2
			    "getnlstr() Buffer not large enough",
			    sizeof buf);
d469 2
a470 3
		++count;
		(void) strlcat(buf, " ", sizeof buf);
		(void) strlcat(buf, nl->n_name, sizeof buf);
d474 1
a474 1
	(void) strlcat(buf, " )", sizeof buf);
@


1.14
log
@strings; ok miod ho krw
@
text
@d1 1
a1 1
/*	$OpenBSD: rdist.c,v 1.13 2002/05/09 19:19:33 millert Exp $	*/
d42 1
a42 1
"$OpenBSD: rdist.c,v 1.13 2002/05/09 19:19:33 millert Exp $";
d93 1
d405 1
a405 1
	static struct namelist tnl = { NULL, NULL };
d427 2
@


1.13
log
@Now use ssh, not rsh by default.
@
text
@d1 1
a1 1
/*	$OpenBSD: rdist.c,v 1.12 2002/02/19 19:39:39 millert Exp $	*/
d42 1
a42 1
"$OpenBSD: rdist.c,v 1.12 2002/02/19 19:39:39 millert Exp $";
d454 1
a454 1
	(void) sprintf(buf, "(");
d461 3
a463 2
			(void) strcpy(buf,
				      "getnlstr() Buffer not large enough");
d467 2
a468 2
		(void) strcat(buf, " ");
		(void) strcat(buf, nl->n_name);
d472 1
a472 1
	(void) strcat(buf, " )");
@


1.12
log
@We live in an ANSI C world.  Remove lots of gratuitous #ifdef __STDC__ cruft.
@
text
@d1 1
a1 1
/*	$OpenBSD: rdist.c,v 1.11 2001/12/29 23:16:10 millert Exp $	*/
d42 1
a42 1
"$OpenBSD: rdist.c,v 1.11 2001/12/29 23:16:10 millert Exp $";
d293 6
a298 2
	if (path_remsh == NULL && (cp = getenv("RSH")) != NULL && *cp != '\0')
		path_remsh = cp;
@


1.11
log
@Collapse two if statements into one (introduced in previous commit)
@
text
@d1 1
a1 1
/*	$OpenBSD: rdist.c,v 1.10 2001/12/29 21:31:55 millert Exp $	*/
d42 1
a42 1
"$OpenBSD: rdist.c,v 1.10 2001/12/29 21:31:55 millert Exp $";
a61 1
#ifdef __STDC__
a63 4
#else
void		docmdargs();
void		usage();
#endif
@


1.10
log
@Don't use the contents of the RSH environment variable if it is empty.
@
text
@d1 1
a1 1
/*	$OpenBSD: rdist.c,v 1.9 2001/11/19 19:02:15 mpech Exp $	*/
d42 1
a42 1
"$OpenBSD: rdist.c,v 1.9 2001/11/19 19:02:15 mpech Exp $";
d298 2
a299 3
	if (path_remsh == NULL)
		if ((cp = getenv("RSH")) != NULL && *cp != '\0')
			path_remsh = cp;
@


1.9
log
@kill more registers

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: rdist.c,v 1.8 2001/07/09 07:04:51 deraadt Exp $	*/
d42 1
a42 1
"$OpenBSD: rdist.c,v 1.8 2001/07/09 07:04:51 deraadt Exp $";
d299 2
a300 1
		path_remsh = getenv("RSH");
@


1.8
log
@correct type on last arg to execl(); nordin@@cse.ogi.edu
@
text
@d1 1
a1 1
/*	$OpenBSD: rdist.c,v 1.7 1999/02/04 23:18:57 millert Exp $	*/
d42 1
a42 1
"$OpenBSD: rdist.c,v 1.7 1999/02/04 23:18:57 millert Exp $";
d91 1
a91 1
	register struct namelist *ptr, *new;
d115 2
a116 2
	register int x;
	register char *cp;
d400 2
a401 2
	register struct namelist *nl, *prev;
	register char *cp;
d450 1
a450 1
	register struct namelist *nl;
d453 1
a453 1
	register int count = 0, len = 0;
@


1.7
log
@Fix a serious memory consumption problem when running over directories
that contain many hard-linked files; johnh@@isi.edu
Also add an xstrdup() that behaves like xmalloc() on failure.
@
text
@d1 1
a1 1
/*	$OpenBSD: rdist.c,v 1.6 1998/07/16 20:43:56 millert Exp $	*/
d42 1
a42 1
"$OpenBSD: rdist.c,v 1.6 1998/07/16 20:43:56 millert Exp $";
d146 1
a146 1
			     "-Server", NULL);
@


1.6
log
@add prototypes
@
text
@d1 1
a1 1
/*	$OpenBSD: rdist.c,v 1.5 1998/06/26 21:21:20 millert Exp $	*/
d42 1
a42 1
"$OpenBSD: rdist.c,v 1.5 1998/06/26 21:21:20 millert Exp $";
d97 1
a97 1
	new->n_name = strdup(name);
d177 1
a177 1
			remotemsglist = strdup(optarg);
d203 1
a203 1
			distfile = strdup(optarg);
d249 1
a249 1
			path_rdistd = strdup(optarg);
d258 1
a258 1
				path_remsh = strdup(cp);
@


1.5
log
@rdist 6.1.4 + OpenBSD patches + some -Wall
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d42 1
a42 1
"$OpenBSD$";
d61 8
@


1.4
log
@Use our rcmdsh(3) and support $RSH.
@
text
@d1 1
a1 1
/*	$OpenBSD: rdist.c,v 1.3 1996/06/26 05:38:17 deraadt Exp $	*/
d37 1
d39 5
a43 1
"$OpenBSD: rdist.c,v 1.3 1996/06/26 05:38:17 deraadt Exp $";
d100 1
d118 1
a118 1
	if (cp = msgparseopts(localmsglist, TRUE)) {
d138 1
a138 1
			     "-Server", (char *)NULL);
d162 1
a162 1
			if (cp = msgparseopts(optarg, TRUE)) {
d210 1
a210 1
			if (cp = msgparseopts("stdout=all,debug", TRUE)) {
d249 1
a249 1
			if (cp = searchpath(optarg))
d355 1
d387 1
d434 2
a435 2
	insert((char *)NULL, files, hosts, cmds);
	docmds(0, (char **)NULL, 0, (char **)NULL);
@


1.3
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d38 1
a38 1
"$OpenBSD: rdist.c,v 1.2 1996/03/05 03:16:11 dm Exp $";
d69 1
a69 1
char	       *path_remsh = _PATH_REMSH;
d283 3
@


1.2
log
@rdist 6.1.2
@
text
@d1 2
d38 1
a38 1
"$Id: rdist.c,v 6.65 1995/12/12 00:20:39 mcooper Exp $";
@


1.1
log
@rdist 6.1.1
@
text
@@
