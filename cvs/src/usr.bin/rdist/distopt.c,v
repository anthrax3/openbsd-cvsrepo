head	1.13;
access;
symbols
	OPENBSD_6_2_BASE:1.13
	OPENBSD_6_1:1.13.0.12
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.8
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.4
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.6
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.2
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.11.0.22
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.20
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.16
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.14
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.12
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.10
	OPENBSD_5_0:1.11.0.8
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.6
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.10.0.14
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.10
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.8
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.6
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.4
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.2
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.9.0.14
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.12
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.10
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.8
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.6
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.6.0.6
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.5.0.12
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.10
	OPENBSD_2_8:1.5.0.8
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.6
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.4
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.2
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.13
date	2015.01.20.09.00.16;	author guenther;	state Exp;
branches;
next	1.12;
commitid	0Y0sKBv6c3xIKoav;

1.12
date	2015.01.20.06.02.30;	author guenther;	state Exp;
branches;
next	1.11;
commitid	Cuzt8eaYzxw7KVzW;

1.11
date	2009.10.27.23.59.42;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2007.02.26.20.57.18;	author jmc;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.03.02.56.14;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2003.05.14.01.34.35;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.04.05.20.31.58;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2001.11.19.19.02.15;	author mpech;	state Exp;
branches;
next	1.5;

1.5
date	99.02.04.23.18.57;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	98.06.26.21.21.07;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.06.26.05.38.11;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.03.05.03.16.02;	author dm;	state Exp;
branches;
next	1.1;

1.1
date	96.02.03.12.12.20;	author dm;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Split out from rdist/defs.h the client-only and server-only bits into
 rdist/client.h and rdistd/server.h
Only put #includes in .h files that are necessary for the .h to be used;
 all other #includes go in the .c files
Move all extern variable declarations to the .h files, renaming local
 variables to avoid shadowing
Replace me_type member of mntent_t with an "is NFS?" flag bit
@
text
@/*	$OpenBSD: distopt.c,v 1.12 2015/01/20 06:02:30 guenther Exp $	*/

/*
 * Copyright (c) 1983 Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <stdlib.h>
#include <string.h>

#include "client.h"

/*
 * Dist Option functions
 */


/*
 * Distfile Option Information
 */
struct distoptinfo {
	opt_t		do_value;
	char	       *do_name;
	char	       *do_arg;
	size_t	       arg_size;
} distoptinfo[] = {
	{ DO_CHKNFS,		"chknfs", 	NULL,		0},
	{ DO_CHKREADONLY,	"chkreadonly",	NULL,		0},
	{ DO_CHKSYM,		"chksym",	NULL,		0},
	{ DO_COMPARE,		"compare", 	NULL,		0},
	{ DO_DEFGROUP,		"defgroup",	defgroup,	sizeof(defgroup) },
	{ DO_DEFOWNER,		"defowner",	defowner,	sizeof(defowner) },
	{ DO_FOLLOW,		"follow", 	NULL,		0},
	{ DO_HISTORY,		"history", 	NULL,		0},
	{ DO_IGNLNKS,		"ignlnks",	NULL,		0},
	{ DO_NOCHKGROUP,	"nochkgroup",	NULL,		0},
	{ DO_NOCHKMODE,		"nochkmode",	NULL,		0},
	{ DO_NOCHKOWNER,	"nochkowner",	NULL,		0},
	{ DO_NODESCEND,		"nodescend",	NULL,		0},
	{ DO_NOEXEC,		"noexec",	NULL,		0},
	{ DO_NUMCHKGROUP,	"numchkgroup",	NULL,		0},
	{ DO_NUMCHKOWNER,	"numchkowner",	NULL,		0},
	{ DO_QUIET,		"quiet",	NULL,		0},
	{ DO_REMOVE,		"remove",	NULL,		0},
	{ DO_SAVETARGETS,	"savetargets",	NULL,		0},
	{ DO_SPARSE,		"sparse",	NULL,		0},
	{ DO_UPDATEPERM,	"updateperm",	NULL,		0},
	{ DO_VERIFY,		"verify",	NULL,		0},
	{ DO_WHOLE,		"whole",	NULL,		0},
	{ DO_YOUNGER,		"younger",	NULL,		0},
	{ 0 },
};

/*
 * Get a Distfile Option entry named "name".
 */
static struct distoptinfo *
getdistopt(char *name, int *len)
{
	int i;

	for (i = 0; distoptinfo[i].do_name; ++i)
		if (strncasecmp(name, distoptinfo[i].do_name,
				*len = strlen(distoptinfo[i].do_name)) == 0)
			return(&distoptinfo[i]);

	return(NULL);
}

/*
 * Parse a dist option string.  Set option flags to optptr.
 * If doerrs is true, print out own error message.  Returns
 * 0 on success.
 */
int
parsedistopts(char *str, opt_t *optptr, int doerrs)
{
	char *string, *optstr;
	struct distoptinfo *distopt;
	int len;

	/* strtok() is destructive */
	string = xstrdup(str);

	for (optstr = strtok(string, ","); optstr;
	     optstr = strtok(NULL, ",")) {
		/* Try Yes */
		if ((distopt = getdistopt(optstr, &len)) != NULL) {
			FLAG_ON(*optptr, distopt->do_value);
			if (distopt->do_arg && optstr[len] == '=')
				(void) strlcpy(distopt->do_arg,
				    &optstr[len + 1], distopt->arg_size);
			continue;
		}

		/* Try No */
		if ((distopt = getdistopt(optstr+2, &len)) != NULL) {
			FLAG_OFF(*optptr, distopt->do_value);
			continue;
		}

		if (doerrs)
			error("Dist option \"%s\" is not valid.", optstr);
	}

	if (string)
		(void) free(string);

	return(nerrs);
}

/*
 * Get a list of the Distfile Option Entries.
 */
char *
getdistoptlist(void)
{
	int i;
	static char buf[1024];

	for (i = 0, buf[0] = CNULL; distoptinfo[i].do_name; ++i) {
		if (buf[0] == CNULL)
			(void) strlcpy(buf, distoptinfo[i].do_name, sizeof buf);
		else {
			(void) strlcat(buf, ",", sizeof buf);
			(void) strlcat(buf, distoptinfo[i].do_name, sizeof buf);
		}
	}

	return(buf);
}

/*
 * Get a list of the Distfile Option Entries for each enabled 
 * value in "opts".
 */
char *
getondistoptlist(opt_t opts)
{
	int i;
	static char buf[1024];

	for (i = 0, buf[0] = CNULL; distoptinfo[i].do_name; ++i) {
		if (!IS_ON(opts, distoptinfo[i].do_value))
			continue;

		if (buf[0] == CNULL)
			(void) strlcpy(buf, distoptinfo[i].do_name, sizeof buf);
		else {
			(void) strlcat(buf, ",", sizeof buf);
			(void) strlcat(buf, distoptinfo[i].do_name, sizeof buf);
		}
		if (distoptinfo[i].do_arg) {
			(void) strlcat(buf, "=", sizeof buf);
			(void) strlcat(buf, distoptinfo[i].do_arg, sizeof buf);
		}
	}

	return(buf);
}

@


1.12
log
@Move struct distoptinfo into distopt.c, killing the DISTOPTINFO typedef
Move struct msgtype and msgfacility into message.c, killing the MSGTYPE and
 MSGFACILITY typedefs
Make getdistopt() static to distopt.c
@
text
@d1 1
a1 1
/*	$OpenBSD: distopt.c,v 1.11 2009/10/27 23:59:42 deraadt Exp $	*/
d32 4
a35 1
#include "defs.h"
@


1.11
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: distopt.c,v 1.10 2007/02/26 20:57:18 jmc Exp $	*/
d42 6
a47 1
DISTOPTINFO distoptinfo[] = {
d78 1
a78 1
DISTOPTINFO *
d100 1
a100 1
	DISTOPTINFO *distopt;
@


1.10
log
@put DO_COMPARE in the correct place, so that getdistoptlist() gets sorted
alphabetically;

ok otto
@
text
@d1 1
a1 1
/*	$OpenBSD: distopt.c,v 1.9 2003/06/03 02:56:14 millert Exp $	*/
a32 16
#ifndef lint
#if 0
static char RCSid[] __attribute__((__unused__)) = 
"$From: distopt.c,v 1.5 1999/08/04 15:57:33 christos Exp $";
#else
static char RCSid[] __attribute__((__unused__)) = 
"$OpenBSD: distopt.c,v 1.9 2003/06/03 02:56:14 millert Exp $";
#endif

static char sccsid[] __attribute__((__unused__)) =
"@@(#)distopt.c";

static char copyright[] __attribute__((__unused__)) =
"@@(#) Copyright (c) 1983 Regents of the University of California.\n\
 All rights reserved.\n";
#endif /* !lint */
@


1.9
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: distopt.c,v 1.8 2003/05/14 01:34:35 millert Exp $	*/
d39 1
a39 1
"$OpenBSD: distopt.c,v 1.8 2003/05/14 01:34:35 millert Exp $";
d62 1
a64 1
	{ DO_COMPARE,		"compare", 	NULL,		0},
@


1.8
log
@ o Sync w/ freerdist 0.92 minus the compress option
 o KNF and ANSIfy the function headers

Sparse file support is currently a no-op since it didn't work.
Proper sparse file support will be added later.
@
text
@d1 1
a1 1
/*	$OpenBSD: distopt.c,v 1.7 2003/04/05 20:31:58 deraadt Exp $	*/
d15 1
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d39 1
a39 1
"$OpenBSD: distopt.c,v 1.7 2003/04/05 20:31:58 deraadt Exp $";
@


1.7
log
@strings; ok miod ho krw
@
text
@d1 1
a1 1
/*	$OpenBSD: distopt.c,v 1.6 2001/11/19 19:02:15 mpech Exp $	*/
d36 1
d39 2
a40 2
static char RCSid[] = 
"$From: distopt.c,v 6.10 1996/01/30 01:52:07 mcooper Exp $";
d42 2
a43 2
static char RCSid[] = 
"$OpenBSD: distopt.c,v 1.6 2001/11/19 19:02:15 mpech Exp $";
d46 2
a47 1
static char sccsid[] = "@@(#)distopt.c";
d49 1
a49 1
static char copyright[] =
a57 1
#include "defs.h"
d63 24
a86 20
	{ DO_CHKNFS,		"chknfs" },
	{ DO_CHKREADONLY,	"chkreadonly" },
	{ DO_CHKSYM,		"chksym" },
	{ DO_COMPARE,		"compare" },
	{ DO_FOLLOW,		"follow" },
	{ DO_IGNLNKS,		"ignlnks" },
	{ DO_NOCHKGROUP,	"nochkgroup" },
	{ DO_NOCHKMODE,		"nochkmode" },
	{ DO_NOCHKOWNER,	"nochkowner" },
	{ DO_NODESCEND,		"nodescend" },
	{ DO_NOEXEC,		"noexec" },
	{ DO_NUMCHKGROUP,	"numchkgroup" },
	{ DO_NUMCHKOWNER,	"numchkowner" },
	{ DO_QUIET,		"quiet" },
	{ DO_REMOVE,		"remove" },
	{ DO_SAVETARGETS,	"savetargets" },
	{ DO_SPARSE,            "sparse" },
	{ DO_VERIFY,		"verify" },
	{ DO_WHOLE,		"whole" },
	{ DO_YOUNGER,		"younger" },
d93 2
a94 2
extern DISTOPTINFO *getdistopt(name)
	char *name;
d99 2
a100 1
		if (strcasecmp(name, distoptinfo[i].do_name) == 0)
d111 2
a112 4
extern int parsedistopts(str, optptr, doerrs)
	char *str;
	opt_t *optptr;
	int doerrs;
d116 1
a116 1
	int negate;
d118 1
a118 1
	/* strtok() is harmful */
d123 2
a124 11
		if (strncasecmp(optstr, "no", 2) == 0)
			negate = TRUE;
		else
			negate = FALSE;

		/*
		 * Try looking up option name.  If that fails
		 * and the option starts with "no", strip "no"
		 * from option and retry lookup.
		 */
		if ((distopt = getdistopt(optstr))) {
d126 3
d131 3
a133 1
		if (negate && (distopt = getdistopt(optstr+2))) {
d137 1
d151 2
a152 1
extern char *getdistoptlist()
d159 1
a159 2
			(void) strlcpy(buf, distoptinfo[i].do_name,
			    sizeof buf);
d162 1
a162 2
			(void) strlcat(buf, distoptinfo[i].do_name,
			    sizeof buf);
d173 2
a174 2
extern char *getondistoptlist(opts)
	opt_t opts;
d184 1
a184 2
			(void) strlcpy(buf, distoptinfo[i].do_name,
			    sizeof buf);
d187 5
a191 2
			(void) strlcat(buf, distoptinfo[i].do_name,
			    sizeof buf);
@


1.6
log
@kill more registers

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: distopt.c,v 1.5 1999/02/04 23:18:57 millert Exp $	*/
d42 1
a42 1
"$OpenBSD: distopt.c,v 1.5 1999/02/04 23:18:57 millert Exp $";
d157 2
a158 1
			(void) strcpy(buf, distoptinfo[i].do_name);
d160 3
a162 2
			(void) strcat(buf, ",");
			(void) strcat(buf, distoptinfo[i].do_name);
d184 2
a185 1
			(void) strcpy(buf, distoptinfo[i].do_name);
d187 3
a189 2
			(void) strcat(buf, ",");
			(void) strcat(buf, distoptinfo[i].do_name);
@


1.5
log
@Fix a serious memory consumption problem when running over directories
that contain many hard-linked files; johnh@@isi.edu
Also add an xstrdup() that behaves like xmalloc() on failure.
@
text
@d1 1
a1 1
/*	$OpenBSD: distopt.c,v 1.4 1998/06/26 21:21:07 millert Exp $	*/
d42 1
a42 1
"$OpenBSD: distopt.c,v 1.4 1998/06/26 21:21:07 millert Exp $";
d91 1
a91 1
	register int i;
d110 1
a110 1
	register char *string, *optstr;
d152 1
a152 1
	register int i;
d174 1
a174 1
	register int i;
@


1.4
log
@rdist 6.1.4 + OpenBSD patches + some -Wall
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d42 1
a42 1
"$OpenBSD$";
d115 1
a115 1
	string = strdup(str);
@


1.3
log
@rcsid
@
text
@d37 1
d39 5
a43 1
"$OpenBSD: distopt.c,v 1.2 1996/03/05 03:16:02 dm Exp $";
d97 1
a97 1
	return((DISTOPTINFO *) NULL);
d118 1
a118 1
	     optstr = strtok((char *) NULL, ",")) {
d129 1
a129 1
		if (distopt = getdistopt(optstr)) {
@


1.2
log
@rdist 6.1.2
@
text
@d1 2
d38 1
a38 1
"$Id: distopt.c,v 6.10 1996/01/30 01:52:07 mcooper Exp $";
@


1.1
log
@rdist 6.1.1
@
text
@d36 1
a36 1
"$Id: distopt.c,v 6.9 1994/04/26 16:59:41 mcooper Exp $";
d71 1
@
