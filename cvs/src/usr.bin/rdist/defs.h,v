head	1.36;
access;
symbols
	OPENBSD_6_2_BASE:1.36
	OPENBSD_6_1:1.36.0.12
	OPENBSD_6_1_BASE:1.36
	OPENBSD_6_0:1.36.0.8
	OPENBSD_6_0_BASE:1.36
	OPENBSD_5_9:1.36.0.4
	OPENBSD_5_9_BASE:1.36
	OPENBSD_5_8:1.36.0.6
	OPENBSD_5_8_BASE:1.36
	OPENBSD_5_7:1.36.0.2
	OPENBSD_5_7_BASE:1.36
	OPENBSD_5_6:1.31.0.4
	OPENBSD_5_6_BASE:1.31
	OPENBSD_5_5:1.19.0.4
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.18.0.4
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.18.0.2
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.17.0.6
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.4
	OPENBSD_5_0:1.17.0.2
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.16.0.14
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.12
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.8
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.16.0.10
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.6
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.4
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.2
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.15.0.16
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.14
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.12
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.15.0.10
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.15.0.8
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.15.0.6
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.15.0.4
	OPENBSD_3_6_BASE:1.15
	OPENBSD_3_5:1.15.0.2
	OPENBSD_3_5_BASE:1.15
	OPENBSD_3_4:1.14.0.2
	OPENBSD_3_4_BASE:1.14
	OPENBSD_3_3:1.11.0.8
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.6
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.11.0.4
	OPENBSD_3_1_BASE:1.11
	OPENBSD_3_0:1.11.0.2
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9_BASE:1.10
	OPENBSD_2_9:1.10.0.10
	OPENBSD_2_8:1.10.0.8
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.10.0.6
	OPENBSD_2_7_BASE:1.10
	OPENBSD_2_6:1.10.0.4
	OPENBSD_2_6_BASE:1.10
	OPENBSD_2_5:1.10.0.2
	OPENBSD_2_5_BASE:1.10
	OPENBSD_2_4:1.9.0.2
	OPENBSD_2_4_BASE:1.9
	OPENBSD_2_3:1.7.0.4
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.7.0.2
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.5.0.2
	OPENBSD_2_0_BASE:1.5
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.36
date	2015.01.21.03.05.03;	author guenther;	state Exp;
branches;
next	1.35;
commitid	U1Vng0cgPHohQvpf;

1.35
date	2015.01.20.09.00.16;	author guenther;	state Exp;
branches;
next	1.34;
commitid	0Y0sKBv6c3xIKoav;

1.34
date	2015.01.20.06.02.30;	author guenther;	state Exp;
branches;
next	1.33;
commitid	Cuzt8eaYzxw7KVzW;

1.33
date	2015.01.20.03.14.52;	author guenther;	state Exp;
branches;
next	1.32;
commitid	YWmenI3gU9wLAZQo;

1.32
date	2015.01.16.06.40.11;	author deraadt;	state Exp;
branches;
next	1.31;
commitid	Uu5nFG3wCl0LACBb;

1.31
date	2014.07.12.03.48.04;	author guenther;	state Exp;
branches;
next	1.30;
commitid	p9pOV7jMl4hhcolh;

1.30
date	2014.07.12.03.46.42;	author guenther;	state Exp;
branches;
next	1.29;
commitid	I1NvbbBBRYb0CwJR;

1.29
date	2014.07.12.03.40.16;	author guenther;	state Exp;
branches;
next	1.28;
commitid	fH6IKXd4EzOJ9F3x;

1.28
date	2014.07.12.03.32.00;	author guenther;	state Exp;
branches;
next	1.27;
commitid	uegd2I1KLsYIWNNt;

1.27
date	2014.07.12.03.25.03;	author guenther;	state Exp;
branches;
next	1.26;
commitid	he5XECSR36QOlwTC;

1.26
date	2014.07.12.03.19.43;	author guenther;	state Exp;
branches;
next	1.25;
commitid	b7xpPewuHVseVYhi;

1.25
date	2014.07.12.03.13.12;	author guenther;	state Exp;
branches;
next	1.24;
commitid	KVepUkCP6rgIAcDC;

1.24
date	2014.07.12.03.09.29;	author guenther;	state Exp;
branches;
next	1.23;
commitid	INADQ6AYY3eewXNA;

1.23
date	2014.07.10.20.35.35;	author guenther;	state Exp;
branches;
next	1.22;
commitid	g9cKMmGVAwufFE90;

1.22
date	2014.07.05.06.55.29;	author guenther;	state Exp;
branches;
next	1.21;
commitid	v5AUs0w5PR8DHpj3;

1.21
date	2014.07.05.06.18.58;	author guenther;	state Exp;
branches;
next	1.20;
commitid	hGNsy3LdPkedy89e;

1.20
date	2014.07.05.05.05.51;	author guenther;	state Exp;
branches;
next	1.19;
commitid	U6Y6NKOm7JX1MOTg;

1.19
date	2013.12.21.06.29.17;	author guenther;	state Exp;
branches;
next	1.18;

1.18
date	2012.11.12.01.14.41;	author guenther;	state Exp;
branches;
next	1.17;

1.17
date	2011.04.10.15.47.28;	author krw;	state Exp;
branches;
next	1.16;

1.16
date	2008.01.02.17.44.11;	author chl;	state Exp;
branches;
next	1.15;

1.15
date	2003.11.08.19.17.29;	author jmc;	state Exp;
branches;
next	1.14;

1.14
date	2003.06.03.02.56.14;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2003.05.14.01.34.35;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2003.05.06.22.10.11;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2001.08.23.14.17.08;	author aaron;	state Exp;
branches;
next	1.10;

1.10
date	99.02.04.23.18.57;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	98.07.16.20.40.23;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	98.06.26.21.21.06;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	97.10.15.16.58.17;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	97.04.27.13.01.28;	author downsj;	state Exp;
branches;
next	1.5;

1.5
date	96.04.28.22.11.55;	author etheisen;	state Exp;
branches;
next	1.4;

1.4
date	96.04.28.22.10.12;	author etheisen;	state Exp;
branches;
next	1.3;

1.3
date	96.03.05.03.16.01;	author dm;	state Exp;
branches;
next	1.2;

1.2
date	96.02.03.12.12.18;	author dm;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.58;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.58;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.36
log
@Remove unsafe micro-optimization of *bit test*
@
text
@/*	$OpenBSD: defs.h,v 1.35 2015/01/20 09:00:16 guenther Exp $	*/

#ifndef __DEFS_H__
#define __DEFS_H__
/*
 * Copyright (c) 1983 Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * $From: defs.h,v 1.6 2001/03/12 18:16:30 kim Exp $
 * @@(#)defs.h      5.2 (Berkeley) 3/20/86
 */

#include <pwd.h>
#include <setjmp.h>
#include <signal.h>

#ifndef __GNUC__
# ifndef __attribute__
#  define __attribute__(a)
# endif
#endif

#include "version.h"
#include "config.h"
#include "pathnames.h"
#include "types.h"

/*
 * Define the read and write values for the file descriptor array
 * used by pipe().
 */
#define PIPE_READ		0
#define PIPE_WRITE		1

	/* boolean truth */
#ifndef TRUE
#define TRUE		1
#endif
#ifndef FALSE
#define FALSE		0
#endif

	/* Bit flag test macros */
#define IS_ON(b,f)	(b & f)
#define IS_OFF(b,f)	!(IS_ON(b,f))
#define FLAG_ON(b,f)	b |= f
#define FLAG_OFF(b,f)	b &= ~(f)

/*
 * Environment variable names
 */
#define E_FILES		"FILES"			/* List of files */
#define E_LOCFILE	"FILE"			/* Local Filename  */
#define E_REMFILE	"REMFILE"		/* Remote Filename */
#define E_BASEFILE	"BASEFILE"		/* basename of Remote File */

/*
 * Get system error string
 */
#define SYSERR		strerror(errno)

#define CNULL		'\0'		/* NULL character */

/*
 * These are the top level protocol commands.
 */
#define C_NONE		'='		/* No command - pass cleanly */
#define C_ERRMSG	'\1'		/* Log an error message */
#define C_FERRMSG	'\2'		/* Log a fatal error message */
#define C_NOTEMSG	'\3'		/* Log a note message */
#define C_LOGMSG	'\4'		/* Log a message */
#define C_ACK		'\5'		/* Acknowledge */
#define C_SETCONFIG	'c'		/* Set configuration parameters */
#define C_DIRTARGET	'T'		/* Set target directory name */
#define C_TARGET	't'		/* Set target file name */
#define C_RECVREG	'R'		/* Receive a regular file */
#define C_RECVDIR	'D'		/* Receive a directory */
#define C_RECVSYMLINK	'K'		/* Receive a symbolic link */
#define C_RECVHARDLINK	'k'		/* Receive a hard link */
#define C_END		'E'		/* Indicate end of receive/send */
#define C_CLEAN		'C'		/* Clean up */
#define C_QUERY		'Q'		/* Query without checking */
#define C_SPECIAL	'S'		/* Execute special command */
#define C_CMDSPECIAL	's'		/* Execute cmd special command */
#define C_CHMOG		'M'		/* Chown,Chgrp,Chmod a file */

#define	ack()		(void) sendcmd(C_ACK, NULL)
#define	err()		(void) sendcmd(C_ERRMSG, NULL)

/*
 * Session startup commands.
 */
#define S_VERSION	'V'		/* Version number */
#define S_REMOTEUSER	'R'		/* Remote user name */
#define S_LOCALUSER	'L'		/* Local user name */
#define S_END		'E'		/* End of session startup commands */

/*
 * These are the commands for "set config".
 */
#define SC_FREESPACE	's'		/* Set min free space */
#define SC_FREEFILES	'f'		/* Set min free files */
#define SC_HOSTNAME	'H'		/* Set client hostname */
#define SC_LOGGING	'L'		/* Set logging options */
#define SC_DEFOWNER	'o'		/* Set default owner */
#define SC_DEFGROUP	'g'		/* Set default group */

/*
 * Query commands
 */
#define QC_ONNFS	'F'		/* File exists & is on a NFS */
#define QC_ONRO		'O'		/* File exists & is on a readonly fs */
#define QC_NO		'N'		/* File does not exist */
#define QC_SYM		'l'		/* File exists & is a symlink */
#define QC_YES		'Y'		/* File does exist */

/*
 * Clean commands
 */
#define CC_QUERY	'Q'		/* Query if file should be rm'ed */
#define CC_END		'E'		/* End of cleaning */
#define CC_YES		'Y'		/* File doesn't exist - remove */
#define CC_NO		'N'		/* File does exist - don't remove */

/*
 * Run Command commands
 */
#define RC_FILE		'F'		/* Name of a target file */
#define RC_COMMAND	'C'		/* Command to run */


extern char	       *currenthost;	/* Name of current host */
extern char	       *progname;	/* Name of this program */
extern char	       *locuser;	/* Local User's name */
extern int		debug;		/* Debugging flag */
extern int		isserver;	/* Acting as remote server */
extern int		nerrs;		/* Number of errors seen */
extern opt_t		options;	/* Global options */
extern int		rem_r;		/* Remote file descriptor, reading */
extern int		rem_w;		/* Remote file descriptor, writing */
extern int		rtimeout;	/* Response time out in seconds */
extern uid_t		userid;		/* User ID of rdist user */
extern jmp_buf		finish_jmpbuf;	/* Setjmp buffer for finish() */
extern struct passwd   *pw;	/* pointer to static area used by getpwent */
extern char defowner[64];		/* Default owner */
extern char defgroup[64];		/* Default group */
extern volatile sig_atomic_t contimedout; /* Connection timed out */


/*
 * Declarations for files shared between rdist and rdistd
 */

/* common.c */
ssize_t xwrite(int, void *, size_t);
int init(int, char **, char **);
void finish(void);
void lostconn(void);
void coredump(void);
void sighandler(int);
int sendcmd(char, const char *, ...) __attribute__((__format__ (printf, 2, 3)));
int remline(u_char *, int, int);
ssize_t readrem(char *, ssize_t);
char *getusername(uid_t, char *, opt_t);
char *getgroupname(gid_t, char *, opt_t);
int response(void);
char *exptilde(char *, char *, size_t);
int becomeuser(void);
int becomeroot(void);
int setfiletime(char *, time_t, time_t);
char *getversion(void);
void runcommand(char *);
void *xmalloc(size_t);
void *xrealloc(void *, size_t);
void *xcalloc(size_t, size_t);
char *xstrdup(const char *);
char *xbasename(char *);
char *searchpath(char *);

/* message.c */
void msgprusage(void);
void msgprconfig(void);
char *msgparseopts(char *, int);
void checkhostname(void);
void message(int, const char *, ...) __attribute__((format (printf, 2, 3)));
void debugmsg(int, const char *, ...) __attribute__((format (printf, 2, 3)));
void error(const char *, ...) __attribute__((format (printf, 1, 2)));
void fatalerr(const char *, ...) __attribute__((format (printf, 1, 2)));
char *getnotifyfile(void);

/* client.c or server.c */
void cleanup(int);

#include <vis.h>
#define DECODE(a, b)	strunvis(a, b)
#define ENCODE(a, b)	strvis(a, b, VIS_WHITE)

#endif	/* __DEFS_H__ */
@


1.35
log
@Split out from rdist/defs.h the client-only and server-only bits into
 rdist/client.h and rdistd/server.h
Only put #includes in .h files that are necessary for the .h to be used;
 all other #includes go in the .c files
Move all extern variable declarations to the .h files, renaming local
 variables to avoid shadowing
Replace me_type member of mntent_t with an "is NFS?" flag bit
@
text
@d1 1
a1 1
/*	$OpenBSD: defs.h,v 1.34 2015/01/20 06:02:30 guenther Exp $	*/
d70 1
a70 1
#define IS_ON(b,f)	(b > 0 && (b & f))
@


1.34
log
@Move struct distoptinfo into distopt.c, killing the DISTOPTINFO typedef
Move struct msgtype and msgfacility into message.c, killing the MSGTYPE and
 MSGFACILITY typedefs
Make getdistopt() static to distopt.c
@
text
@d1 1
a1 1
/*	$OpenBSD: defs.h,v 1.33 2015/01/20 03:14:52 guenther Exp $	*/
a38 7
#include <sys/types.h>
#include <sys/file.h>
#include <sys/time.h>
#include <sys/stat.h>
#include <ctype.h>
#include <errno.h>
#include <grp.h>
a39 2
#include <paths.h>
#include <regex.h>
a41 6
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <limits.h>
a52 1
#include "filesys.h"
a68 18
	/* lexical definitions */
#define	QUOTECHAR	160	/* quote next character */

	/* table sizes */
#define HASHSIZE	1021
#define INMAX		3500

	/* expand type definitions */
#define E_VARS		0x1
#define E_SHELL		0x2
#define E_TILDE		0x4
#define E_ALL		0x7

	/* actions for lookup() */
#define LOOKUP		0
#define INSERT		1
#define REPLACE		2

a74 3
#define ALLOC(x) 	(struct x *) xmalloc(sizeof(struct x))
#define A(s)		((s) ? s : "<null>")

a83 7
 * Suffix to use when saving files
 */
#ifndef SAVE_SUFFIX
#define SAVE_SUFFIX	".OLD"
#endif

/*
d86 1
a86 1
#define SYSERR 		strerror(errno)
a87 1
#define COMMENT_CHAR	'#'		/* Config file comment char */
d113 2
a114 2
#define	ack() 		(void) sendcmd(C_ACK, NULL)
#define	err() 		(void) sendcmd(C_ERRMSG, NULL)
d157 8
a164 69
/*
 * Name list
 */
struct namelist {		/* for making lists of strings */
	char	*n_name;
	regex_t	*n_regex;
	struct	namelist *n_next;
};

/*
 * Sub command structure
 */
struct subcmd {
	short	sc_type;	/* type - INSTALL,NOTIFY,EXCEPT,SPECIAL */
	opt_t	sc_options;
	char	*sc_name;
	struct	namelist *sc_args;
	struct	subcmd *sc_next;
};

/*
 * Cmd flags
 */
#define CMD_ASSIGNED	0x01	/* This entry has been assigned */
#define CMD_CONNFAILED	0x02	/* Connection failed */
#define CMD_NOCHKNFS	0x04	/* Disable NFS checks */

/*
 * General command structure
 */
struct cmd {
	int	c_type;		/* type - ARROW,DCOLON */
	int	c_flags;	/* flags - CMD_USED,CMD_FAILED */
	char	*c_name;	/* hostname or time stamp file name */
	char	*c_label;	/* label for partial update */
	struct	namelist *c_files;
	struct	subcmd *c_cmds;
	struct	cmd *c_next;
};

/*
 * Hard link buffer information
 */
struct linkbuf {
	ino_t	inum;
	dev_t	devnum;
	int	count;
	char	*pathname;
	char	*src;
	char	*target;
	struct	linkbuf *nextp;
};

extern char	       *optarg;		/* Option argument */
extern char	       *path_remsh;	/* Remote shell command */
extern char 		host[];		/* Host name of master copy */
extern char 	       *currenthost;	/* Name of current host */
extern char 	       *progname;	/* Name of this program */
extern char 	      **realargv;	/* Real argv */
extern int		optind;		/* Option index into argv */
extern int 		debug;		/* Debugging flag */
extern opt_t 		defoptions;	/* Default install options */
extern int 		do_fork;	/* Should we do fork()'ing */
extern int 		isserver;	/* Acting as remote server */
extern int 		nerrs;		/* Number of errors seen */
extern int 		nflag;		/* NOP flag, don't execute commands */
extern opt_t 		options;	/* Global options */
extern int 		proto_version;	/* Protocol version number */
extern int 		realargc;	/* Real argc */
d166 4
a169 6
extern int 		rem_w;		/* Remote file descriptor, writing */
extern int 		rtimeout;	/* Response time out in seconds */
extern int		setjmp_ok;	/* setjmp/longjmp flag */
extern uid_t 		userid;		/* User ID of rdist user */
extern jmp_buf 		finish_jmpbuf;	/* Setjmp buffer for finish() */
extern struct linkbuf  *ihead;	/* list of files with more than one link */
d175 1
d177 1
a177 1
 * Our own declarations.
a179 13
/* child.c */
void waitup(void);
int spawn(struct cmd *, struct cmd *);

/* client.c */
char *remfilename(char *, char *, char *, char *, int);
int inlist(struct namelist *, char *);
void runcmdspecial(struct cmd *, opt_t);
int checkfilename(char *);
void freelinkinfo(struct linkbuf *);
void cleanup(int);
int install(char *, char *, int, int , opt_t);

a205 50
/* distopt.c */
int parsedistopts(char *, opt_t *, int);
char *getdistoptlist(void);
char *getondistoptlist(opt_t);

/* docmd.c */
void markassigned(struct cmd *, struct cmd *);
int okname(char *);
int except(char *);
void docmds(struct namelist *, int, char **);

/* expand.c */
struct namelist *expand(struct namelist *, int);
u_char *xstrchr(u_char *, int);
void expstr(u_char *);
void expsh(u_char *);
void matchdir(char *);
int execbrc(u_char *, u_char *);
int match(char *, char *);
int amatch(char *, u_char *);

/* filesys.c */
char *find_file(char *, struct stat *, int *);
mntent_t *findmnt(struct stat *, struct mntinfo *);
int isdupmnt(mntent_t *, struct mntinfo *);
void wakeup(int);
struct mntinfo *makemntinfo(struct mntinfo *);
mntent_t *getmntpt(char *, struct stat *, int *);
int is_nfs_mounted(char *, struct stat *, int *);
int is_ro_mounted(char *, struct stat *, int *);
int is_symlinked(char *, struct stat *, int *);
int getfilesysinfo(char *, int64_t *, int64_t *);

/* gram.c */
int yylex(void);
int any(int, char *);
void insert(char *, struct namelist *, struct namelist *, struct subcmd *);
void append(char *, struct namelist *, char *, struct subcmd *);
void yyerror(char *);
struct namelist *makenl(char *);
struct subcmd *makesubcmd(int);
int yyparse(void);

/* isexec.c */
int isexec(char *, struct stat *);

/* lookup.c */
void define(char *);
struct namelist *lookup(char *, int, struct namelist *);

d217 2
a218 7
/* rdist.c */
FILE *opendist(char *);
void docmdargs(int, char *[]);
char *getnlstr(struct namelist *);

/* server.c */
void server(void);
@


1.33
log
@Move #include <syslog.h> to the one file that needs it
@
text
@d1 1
a1 1
/*	$OpenBSD: defs.h,v 1.32 2015/01/16 06:40:11 deraadt Exp $	*/
a326 1
DISTOPTINFO *getdistopt(char *, int *);
@


1.32
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: defs.h,v 1.31 2014/07/12 03:48:04 guenther Exp $	*/
a54 1
#include <syslog.h>
@


1.31
log
@The statdb code has never been complete here
@
text
@d1 1
a1 1
/*	$OpenBSD: defs.h,v 1.30 2014/07/12 03:46:42 guenther Exp $	*/
a39 1
#include <sys/param.h>
d57 1
@


1.30
log
@Kill never enabled #ifdefs
@
text
@d1 1
a1 1
/*	$OpenBSD: defs.h,v 1.29 2014/07/12 03:40:16 guenther Exp $	*/
a282 4
#ifdef USE_STATDB
extern int 		dostatdb;
extern int 		juststatdb;
#endif /* USE_STATDB */
@


1.29
log
@config-def.h is now unnecessary; merge config-data.h into defs.h
@
text
@d1 1
a1 1
/*	$OpenBSD: defs.h,v 1.28 2014/07/12 03:32:00 guenther Exp $	*/
a76 20

/*
 * This belongs in os-svr4.h but many SVR4 OS's
 * define SVR4 externel to Rdist so we put this
 * check here.
 */
#if	defined(SVR4)
#define NEED_FCNTL_H
#define NEED_NETDB_H
#endif	/* defined(SVR4) */

#if	defined(NEED_NETDB_H)
#include <netdb.h>
#endif	/* NEED_NETDB_H */
#if	defined(NEED_FCNTL_H)
#include <fcntl.h>
#endif	/* NEED_FCNTL_H */
#if	defined(NEED_LIMITS_H)
#include <limits.h>
#endif	/* NEED_LIMITS_H */
@


1.28
log
@Kill os-openbsd.h: we have <paths.h>, _PATH_RSH, and utimes()
@
text
@d1 1
a1 1
/*	$OpenBSD: defs.h,v 1.27 2014/07/12 03:25:03 guenther Exp $	*/
a65 1
#include "config-def.h"
a66 1
#include "config-data.h"
d71 6
@


1.27
log
@SETARGS and NEED_HASMNTOPT paths are dead; rshrcmd() and libz stuff are
no longer (were never?) used
@
text
@d1 1
a1 1
/*	$OpenBSD: defs.h,v 1.26 2014/07/12 03:19:43 guenther Exp $	*/
d48 1
@


1.26
log
@Deleted unused local prototypes for systems stuff
@
text
@d1 1
a1 1
/*	$OpenBSD: defs.h,v 1.25 2014/07/12 03:13:12 guenther Exp $	*/
a389 5
/* hasmntopt.c */
#ifdef NEED_HASMNTOPT
char *hasmntopt(struct mntent *, char *);
#endif

a412 3
/* rshrcmd.c */
int rshrcmd(char **, u_short, char *, char *, char *, int *);

a414 6

/* zopen.c */
int zread(void *, char *, int);
int zwrite(void *, const char *, int);
int z_close(void *);
void *z_open(int, char *, int);
@


1.25
log
@No really, assume POSIX: errno is declared for us and sys/stat.h has
S_IX{USR,GRP,OTH}
@
text
@d1 1
a1 1
/*	$OpenBSD: defs.h,v 1.24 2014/07/12 03:09:29 guenther Exp $	*/
a422 48

/* setargs.c */
void setargs_settup(int, char **, char **);
void _setproctitle(char *);
void setproctitle(const char *, ...);

/* signal.c */
#ifdef NEED_SIGBLOCK
int sigblock(int);
#endif
#ifdef NEED_SIGMASK
int sigsetmask(int);
#endif

/* strcasecmp.c */
#ifdef NEED_STRCASECMP
int strcasecmp(char *, char *);
int strncasecmp(char *, char *, int);
#endif

/* strerror.c */
#ifdef NEED_STRERROR
char *strerror(int);
#endif

/* strtol.c */
#ifdef NEED_STRTOL
long strtol(char *, char **, int);
#endif

/* unvis.c */
#ifdef NEED_VIS
int unvis(char *, int, int *, int );
int strunvis(char *, const char *);
#endif

/* vis.c */
#ifdef NEED_VIS
char *vis(char *, int, int, int );
int strvis(char *, const char *, int);
int strvisx(char *, const char *, size_t, int);
#endif

/* vsnprintf.c */
#ifdef NEED_VSNPRINTF
int vsnprintf(char *, size_t, const char *, va_list);
int snprintf(char *, size_t, const char *, ...);
#endif
@


1.24
log
@Delete unused global
@
text
@d1 1
a1 1
/*	$OpenBSD: defs.h,v 1.23 2014/07/10 20:35:35 guenther Exp $	*/
a100 11
	/* file modes */
#ifndef S_IXUSR
#define S_IXUSR		0000100
#endif
#ifndef S_IXGRP
#define S_IXGRP		0000010
#endif
#ifndef S_IXOTH
#define S_IXOTH		0000001
#endif

a280 3
#ifndef __STDC__
extern int 		errno;		/* System error number */
#endif
@


1.23
log
@Missed a chunk of the previous
@
text
@d1 1
a1 1
/*	$OpenBSD: defs.h,v 1.22 2014/07/05 06:55:29 guenther Exp $	*/
a306 1
extern struct group    *gr;	/* pointer to static area used by getgrent */
@


1.22
log
@Assume POSIX: uid_t and gid_t
@
text
@d1 1
a1 1
/*	$OpenBSD: defs.h,v 1.21 2014/07/05 06:18:58 guenther Exp $	*/
d336 1
a336 1
WRITE_RETURN_T xwrite(int, void *, WRITE_AMT_T);
@


1.21
log
@Assume C89: stdargs, const, and setvbuf()
Assume POSIX: O_NONBLOCK and S_IS{DIR,REG,LNK}
@
text
@d1 1
a1 1
/*	$OpenBSD: defs.h,v 1.20 2014/07/05 05:05:51 guenther Exp $	*/
d305 1
a305 1
extern UID_T 		userid;		/* User ID of rdist user */
d345 2
a346 2
char *getusername(UID_T, char *, opt_t);
char *getgroupname(GID_T, char *, opt_t);
@


1.20
log
@Use void* in malloc/realloc/calloc wrappers
@
text
@d1 1
a1 1
/*	$OpenBSD: defs.h,v 1.19 2013/12/21 06:29:17 guenther Exp $	*/
d39 5
a43 4
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
d46 1
a47 1
#include <grp.h>
d49 6
d56 1
a56 6
#include <setjmp.h>
#include <sys/types.h>
#include <sys/param.h>
#include <sys/file.h>
#include <sys/time.h>
#include <sys/stat.h>
a63 6
#ifndef __STDC__
# ifndef const
#  define const
# endif
#endif

a71 1
#include <signal.h>
a92 9
#if defined(ARG_TYPE)
#if	ARG_TYPE == ARG_STDARG
#include <stdarg.h>
#endif
#if	ARG_TYPE == ARG_VARARGS
#include <varargs.h>
#endif
#endif	/* ARG_TYPE */

a135 13
/*
 * POSIX systems should already have S_* defined.
 */
#ifndef S_ISDIR
#define S_ISDIR(m) 	(((m) & S_IFMT) == S_IFDIR)
#endif
#ifndef S_ISREG
#define S_ISREG(m) 	(((m) & S_IFMT) == S_IFREG)
#endif
#ifndef S_ISLNK
#define S_ISLNK(m) 	(((m) & S_IFMT) == S_IFLNK)
#endif

d185 2
a186 2
#define	ack() 		(void) sendcmd(C_ACK, (char *)NULL)
#define	err() 		(void) sendcmd(C_ERRMSG, (char *)NULL)
a324 2
int setnonblocking(int, int);
int setnonblocking(int, int);
d342 1
a342 1
int sendcmd(char, char *, ...) __attribute__((__format__ (printf, 2, 3)));
a359 1
int mysetlinebuf(FILE *);
@


1.19
log
@Constipate some functions
@
text
@d1 1
a1 1
/*	$OpenBSD: defs.h,v 1.18 2012/11/12 01:14:41 guenther Exp $	*/
d383 3
a385 3
char *xmalloc(size_t);
char *xrealloc(char *, size_t);
char *xcalloc(size_t, size_t);
@


1.18
log
@Fix various format string issues.  Stop assuming time_t is long or smaller.
Enable warnings.

ok krw@@, ian@@
@
text
@d1 1
a1 1
/*	$OpenBSD: defs.h,v 1.17 2011/04/10 15:47:28 krw Exp $	*/
d452 4
a455 4
void message(int, char *, ...) __attribute__((__format__ (printf, 2, 3)));
void debugmsg(int, char *, ...) __attribute__((__format__ (printf, 2, 3)));
void error(char *, ...) __attribute__((__format__ (printf, 1, 2)));
void fatalerr(char *, ...) __attribute__((__format__ (printf, 1, 2)));
@


1.17
log
@Apply some tough type-love and give rdist a chance to handle files
larger than 2GB. Diff from Stephan R. Gerber via PR#6586, tweaks
by me.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: defs.h,v 1.16 2008/01/02 17:44:11 chl Exp $	*/
d371 1
a371 1
int sendcmd(char, char *, ...);
d452 4
a455 4
void message(int, char *, ...);
void debugmsg(int, char *, ...);
void error(char *, ...);
void fatalerr(char *, ...);
@


1.16
log
@remove unused function

from tobias@@

ok millert@@ tobias@@
@
text
@d1 1
a1 1
/*	$OpenBSD: defs.h,v 1.15 2003/11/08 19:17:29 jmc Exp $	*/
d373 1
a373 1
int readrem(char *, int);
d423 1
a423 1
int getfilesysinfo(char *, long *, long *);
@


1.15
log
@typos from Jonathon Gray;
@
text
@d1 1
a1 1
/*	$OpenBSD: defs.h,v 1.14 2003/06/03 02:56:14 millert Exp $	*/
a389 1
int getsocketpair(int, int, int, int[]);
@


1.14
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: defs.h,v 1.13 2003/05/14 01:34:35 millert Exp $	*/
d205 1
a205 1
#define C_END		'E'		/* Indicate end of recieve/send */
@


1.13
log
@ o Sync w/ freerdist 0.92 minus the compress option
 o KNF and ANSIfy the function headers

Sparse file support is currently a no-op since it didn't work.
Proper sparse file support will be added later.
@
text
@d1 1
a1 1
/*	$OpenBSD: defs.h,v 1.12 2003/05/06 22:10:11 millert Exp $	*/
d17 1
a17 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.12
log
@use POSIX regex
@
text
@d1 1
a1 1
/*	$OpenBSD: defs.h,v 1.11 2001/08/23 14:17:08 aaron Exp $	*/
d39 1
a39 1
 * $From: defs.h,v 6.82 1998/03/23 23:28:25 michaelc Exp $
a42 4
/*
 * POSIX settings
 */
#if	defined(_POSIX_SOURCE) || defined(__OpenBSD__)
a44 1
#endif	/* _POSIX_SOURCE */
d46 1
d60 12
d78 1
a88 1
#define NEED_UNISTD_H
a100 6
#if	defined(NEED_UNISTD_H)
#include <unistd.h>
#endif	/* NEED_UNISTD_H */
#if	defined(NEED_STRING_H)
#include <string.h>
#endif	/* NEED_STRING_H */
d209 1
a209 1
#define C_END		'E'		/* Indicate end of receive/send */
d214 1
a214 1
#define C_CHMOD		'M'		/* Chmod a file */
d234 2
a319 1
extern int 		contimedout;	/* Connection timed out */
d323 1
d325 1
a335 1
extern void		mysetlinebuf();	/* set line buffering */
d341 3
d350 1
a350 1
 * System function declarations
a351 5
char 			       *hasmntopt();
char			       *strchr();
char		 	       *strdup();
char		 	       *strrchr();
char 			       *strtok();
d353 178
a530 69
/*
 * Our own declarations.
 */
char			       *exptilde();
char			       *makestr();
char	       		       *xcalloc();
char	       		       *xmalloc();
char	       		       *xrealloc();
char	       		       *xstrdup();
extern char		       *xbasename();
extern char		       *getdistoptlist();
extern char		       *getgroupname();
extern char		       *getnlstr();
extern char		       *getnotifyfile();
extern char		       *getondistoptlist();
extern char		       *getusername();
extern char		       *getversion();
extern char		       *msgparseopts();
extern char		       *searchpath();
extern int			any();
extern int			init();
extern int			install();
extern int			isexec();
extern int			parsedistopts();
extern int			remline();
extern int			setfiletime();
extern int			spawn();
extern struct subcmd 	       *makesubcmd();
extern void			checkhostname();
extern void			cleanup();
extern void			complain();
extern void			docmds();
extern void			finish();
extern void			log();
extern void			logmsg();
extern void			lostconn();
extern void			markassigned();
extern void			msgprusage();
extern void			note();
extern void			runcmdspecial();
extern void			runcommand();
extern void			server();
extern void			setprogname();
extern void			sighandler();
extern void			waitup();
struct namelist		       *expand();
struct namelist		       *lookup();
struct namelist		       *makenl();
extern WRITE_RETURN_T		xwrite();

#if	defined(ARG_TYPE) && ARG_TYPE == ARG_STDARG
extern void			debugmsg(int, char *, ...);
extern void			error(char *, ...);
extern void			fatalerr(char *, ...);
extern void			message(int, char *, ...);
#ifndef HAVE_SETPROCTITLE
extern void			setproctitle(char *fmt, ...);
#endif
extern void			yyerror(char *);
#else
extern void			debugmsg();
extern void			error();
extern void			fatalerr();
extern void			message();
#ifndef HAVE_SETPROCTITLE
extern void			setproctitle();
#endif
extern void			yyerror();
#endif
@


1.11
log
@recieve -> receive
@
text
@d1 1
a1 1
/*	$OpenBSD: defs.h,v 1.10 1999/02/04 23:18:57 millert Exp $	*/
d55 1
d261 1
@


1.10
log
@Fix a serious memory consumption problem when running over directories
that contain many hard-linked files; johnh@@isi.edu
Also add an xstrdup() that behaves like xmalloc() on failure.
@
text
@d1 1
a1 1
/*	$OpenBSD: defs.h,v 1.9 1998/07/16 20:40:23 millert Exp $	*/
d206 1
a206 1
#define C_END		'E'		/* Indicate end of recieve/send */
@


1.9
log
@prototype yyerror
@
text
@d1 1
a1 1
/*	$OpenBSD: defs.h,v 1.8 1998/06/26 21:21:06 millert Exp $	*/
d301 3
a303 3
	char	pathname[BUFSIZ];
	char	src[BUFSIZ];
	char	target[BUFSIZ];
d357 1
@


1.8
log
@rdist 6.1.4 + OpenBSD patches + some -Wall
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d406 1
d415 1
@


1.7
log
@Get rid of the buf[] extern.  Each .c file has it's own (local) buf.
@
text
@d1 2
a2 1
/*	$OpenBSD: defs.h,v 1.6 1997/04/27 13:01:28 downsj Exp $	*/
d39 1
a39 1
 * $Id: defs.h,v 1.6 1997/04/27 13:01:28 downsj Exp $
d46 1
a46 1
#if	defined(_POSIX_SOURCE)
a69 4
#if	!defined(yacc)
/* #include "y.tab.h" */
#endif	/* yacc */

a94 3
#if	defined(NEED_STDLIB_H)
#include <stdlib.h>
#endif	/* NEED_STDLIB_H */
d329 1
a339 1
#if 0
a347 1
#endif
d403 1
a403 1
#if 0
d411 1
d413 1
@


1.6
log
@Pull in more includes to properly prototype library functions, kill local
decls of library functions, kill local implementation of setproctitle().

This of course points out how utterly bad this code is and that someone needs
to come in here with a chainsaw sometime.
@
text
@d1 1
a1 1
/*	$OpenBSD: defs.h,v 1.5 1996/04/28 22:11:55 etheisen Exp $	*/
d38 1
a38 1
 * $Id: defs.h,v 1.5 1996/04/28 22:11:55 etheisen Exp $
a314 1
extern char 		buf[];		/* General purpose buffer */
@


1.5
log
@Added OpenBSD tag.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d38 1
a38 1
 * $Id: defs.h,v 1.4 1996/04/28 22:10:12 etheisen Exp $
d98 3
d346 1
d355 1
d411 3
a413 1
/*extern void			setproctitle(char *fmt, ...); /* Not for OpenBSD*/
@


1.4
log
@setproctitle() prototype no longer needed.
@
text
@d1 1
d38 1
a38 1
 * $Id: defs.h,v 1.3 1996/03/05 03:16:01 dm Exp $
@


1.3
log
@rdist 6.1.2
@
text
@d37 1
a37 1
 * $Id: defs.h,v 6.81 1996/01/30 02:16:37 mcooper Exp $
d405 1
a405 1
extern void			setproctitle(char *fmt, ...);
@


1.2
log
@rdist 6.1.1
@
text
@d37 1
a37 1
 * $Id: defs.h,v 6.80 1995/12/13 01:59:22 mcooper Exp $
d331 1
@


1.1
log
@Initial revision
@
text
@d1 2
d4 2
a5 2
 * Copyright (c) 1983, 1993
 *	The Regents of the University of California.  All rights reserved.
a33 3
 *
 *	from: @@(#)defs.h	8.1 (Berkeley) 6/9/93
 *	$Id: defs.h,v 1.5 1994/03/07 05:05:20 cgd Exp $
d36 4
a39 7
#include <sys/param.h>
#include <sys/dir.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/file.h>

#include <netinet/in.h>
d41 9
d53 12
a64 5
#include <stdio.h>
#include <ctype.h>
#include <unistd.h>
#include <string.h>
#include <stdlib.h>
d66 7
d75 3
a77 1
 * The version number should be changed whenever the protocol changes.
d79 21
a99 1
#define VERSION	 3
d101 27
a127 16
	/* defines for yacc */
#define EQUAL	1
#define LP	2
#define RP	3
#define SM	4
#define ARROW	5
#define COLON	6
#define DCOLON	7
#define NAME	8
#define STRING	9
#define INSTALL	10
#define NOTIFY	11
#define EXCEPT	12
#define PATTERN	13
#define SPECIAL	14
#define OPTION	15
d130 1
a130 2
#define	QUOTE 	0200		/* used internally for quoted characters */
#define	TRIM	0177		/* Mask to strip quote bit */
d134 1
a134 10
#define INMAX	3500

	/* option flags */
#define VERIFY	0x1
#define WHOLE	0x2
#define YOUNGER	0x4
#define COMPARE	0x8
#define REMOVE	0x10
#define FOLLOW	0x20
#define IGNLNKS	0x40
d137 4
a140 4
#define E_VARS	0x1
#define E_SHELL	0x2
#define E_TILDE	0x4
#define E_ALL	0x7
d143 40
a182 3
#define LOOKUP	0
#define INSERT	1
#define REPLACE	2
d184 41
a224 1
#define ISDIR(m) (((m) & S_IFMT) == S_IFDIR)
d226 16
a241 1
#define ALLOC(x) (struct x *) malloc(sizeof(struct x))
d243 18
a260 1
struct namelist {	/* for making lists of strings */
d265 3
d270 1
a270 1
	short	sc_options;
d276 10
d288 1
d296 3
d304 1
d309 105
a413 42
extern int debug;		/* debugging flag */
extern int nflag;		/* NOP flag, don't execute commands */
extern int qflag;		/* Quiet. don't print messages */
extern int options;		/* global options */

extern int nerrs;		/* number of errors seen */
extern int rem;			/* remote file descriptor */
extern int iamremote;		/* acting as remote server */
extern char tempfile[];		/* file name for logging changes */
extern struct linkbuf *ihead;	/* list of files with more than one link */
extern struct passwd *pw;	/* pointer to static area used by getpwent */
extern struct group *gr;	/* pointer to static area used by getgrent */
extern char host[];		/* host name of master copy */
extern char buf[];		/* general purpose buffer */

int	 any __P((int, char *));
char	*colon __P((char *));
void	 cleanup __P((int));
void	 define __P((char *));
void	 docmds __P((char **, int, char **));
void	 error __P((const char *, ...));
int	 except __P((char *));
struct namelist *
	 expand __P((struct namelist *, int));
char	*exptilde __P((char [], char *));
void	 fatal __P((const char *, ...));
int	 inlist __P((struct namelist *, char *));
void	 insert __P((char *,
	    struct namelist *, struct namelist *, struct subcmd *));
void	 install __P((char *, char *, int, int));
void	 log __P((FILE *, const char *, ...));
struct namelist *
	 lookup __P((char *, int, struct namelist *));
void	 lostconn __P((int));
struct namelist *
	 makenl __P((char *));
struct subcmd *
	 makesubcmd __P((int));
void	 prnames __P((struct namelist *));
void	 server __P((void));
void	 yyerror __P((char *));
int	 yyparse __P((void));
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
