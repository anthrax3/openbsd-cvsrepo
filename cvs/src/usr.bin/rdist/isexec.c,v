head	1.10;
access;
symbols
	OPENBSD_6_1:1.10.0.12
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.8
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.4
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.6
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.9.0.4
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.8.0.20
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.16
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.14
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.12
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.10
	OPENBSD_5_0:1.8.0.8
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.6
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.4
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.7.0.28
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.24
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.22
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.20
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.18
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.16
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.14
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.12
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.10
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.8
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.4.0.16
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.14
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.12
	OPENBSD_2_8:1.4.0.10
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.8
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.6
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.4
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.10
date	2015.01.20.09.00.16;	author guenther;	state Exp;
branches;
next	1.9;
commitid	0Y0sKBv6c3xIKoav;

1.9
date	2014.07.05.05.31.35;	author guenther;	state Exp;
branches;
next	1.8;
commitid	yld48PE1T8UoGF8M;

1.8
date	2009.10.27.23.59.42;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.03.02.56.14;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.14.01.34.35;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.09.19.13.02;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	98.06.26.21.21.12;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.06.26.05.38.13;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.03.05.03.16.06;	author dm;	state Exp;
branches;
next	1.1;

1.1
date	96.02.03.12.12.27;	author dm;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Split out from rdist/defs.h the client-only and server-only bits into
 rdist/client.h and rdistd/server.h
Only put #includes in .h files that are necessary for the .h to be used;
 all other #includes go in the .c files
Move all extern variable declarations to the .h files, renaming local
 variables to avoid shadowing
Replace me_type member of mntent_t with an "is NFS?" flag bit
@
text
@/*	$OpenBSD: isexec.c,v 1.9 2014/07/05 05:31:35 guenther Exp $	*/

/*
 * Copyright (c) 1983 Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <elf_abi.h>
#include <fcntl.h>
#include <unistd.h>

#include "client.h"

/*
 * Determine whether 'file' is a binary executable or not.
 */
int
isexec(char *file, struct stat *statp)
{
	Elf32_Ehdr hdr;
	int fd, r;

	/*
	 * Must be a regular file that has some executable mode bit on
	 */
	if (!S_ISREG(statp->st_mode) ||
	    !(statp->st_mode & (S_IXUSR|S_IXGRP|S_IXOTH)))
		return(FALSE);

	if ((fd = open(file, O_RDONLY, 0)) < 0)
		return(FALSE);

	r = read(fd, &hdr, sizeof(hdr)) == sizeof(hdr) &&
	    IS_ELF(hdr) && hdr.e_type == ET_EXEC;
	close(fd);

	return (r);
}
@


1.9
log
@ELF uberalles!
@
text
@d1 1
a1 1
/*	$OpenBSD: isexec.c,v 1.8 2009/10/27 23:59:42 deraadt Exp $	*/
d32 4
a35 1
#include "defs.h"
d37 1
a37 1
#include <elf_abi.h>
@


1.8
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: isexec.c,v 1.7 2003/06/03 02:56:14 millert Exp $	*/
a33 26
static int _isexec(int);

#if	EXE_TYPE == EXE_AOUT
/*
 * BSD style A.OUT
 */
#include <a.out.h>

static int
_isexec(int fd)
{
	struct exec ehdr;

	if ((read(fd, &ehdr, sizeof(ehdr)) == sizeof(ehdr)) && 
	    !N_BADMAG(ehdr))
		return(TRUE);
	else
		return(FALSE);
}
#endif /* EXE_AOUT */


#if	EXE_TYPE == EXE_ELF_AND_COFF || EXE_TYPE == EXE_ELF
/*
 * Elf
 */
a34 88
#define ISELF(h)	(h.e_type == ET_EXEC)
#endif	/* EXE_ELF_AND_COFF || EXE_ELF */

#if 	EXE_TYPE == EXE_ELF_AND_COFF || EXE_TYPE == EXE_COFF

/*
 * COFF
 */
#if defined(FILEHDR_H)
#include FILEHDR_H
#endif	/* FILEHDR_H */

#if !defined(ISCOFF)

/*
 * Stupid AIX
 */
#if defined(U802WRMAGIC) && defined(U802ROMAGIC) && defined(U802TOCMAGIC)
#define ISCOFF(x) (((x)==U802WRMAGIC) || ((x)==U802TOCMAGIC) || \
		   ((x)==U802TOCMAGIC))
#endif	/* U802... */
/*
 * Stupid Umax4.3
 */
#if 	defined(NS32GMAGIC) || defined(NS32SMAGIC)
#define ISCOFF(x) (((x)==NS32GMAGIC) || ((x)==NS32SMAGIC))
#endif 	/* NS32 ... */

#endif	/* ISCOFF */

#endif /* EXE_TYPE == EXE_ELF_AND_COFF || EXE_TYPE == EXE_COFF */

#if	EXE_TYPE == EXE_ELF_AND_COFF
/*
 * ELF and COFF
 */
typedef union {
    struct filehdr 	coffhdr;
    Elf32_Ehdr 		elfhdr;
} hdr_t;
#endif	/* EXE_TYPE == EXE_ELF_AND_COFF */

#if	EXE_TYPE == EXE_ELF
/*
 * Elf
 */
typedef Elf32_Ehdr 	hdr_t;
#endif	/* EXE_TYPE == EXE_ELF */

#if	EXE_TYPE == EXE_COFF
/*
 * COFF
 */

#if	defined(FILEHDR_H)
#include FILEHDR_H
#endif	/* FILEHDR_H */

typedef struct filehdr 	hdr_t;
#endif	/* EXE_TYPE == EXE_COFF */

#if	EXE_TYPE == EXE_ELF_AND_COFF || EXE_TYPE == EXE_ELF || EXE_TYPE == EXE_COFF
/*
 * System V style COFF and System V R4 style ELF
 */
static int
_isexec(int fd)
{
	hdr_t hdr;

	if (read(fd, &hdr, sizeof(hdr)) == sizeof(hdr)) {
#if EXE_TYPE == EXE_ELF_AND_COFF
	    if (ISELF(hdr.elfhdr) || ISCOFF(hdr.coffhdr.f_magic))
		return(TRUE);
#endif
#if EXE_TYPE == EXE_ELF
	    if (ISELF(hdr))
		return(TRUE);
#endif
#if EXE_TYPE == EXE_COFF
	    if (ISCOFF(hdr.f_magic))
		return(TRUE);
#endif
	}

	return(FALSE);
}
#endif /* EXE_ELF_AND_COFF */
a35 2

#if	EXE_TYPE == EXE_MACHO
d37 1
a37 80
 * Mach-O format
 */

#if	defined(NEXTSTEP) && NEXTSTEP >= 3
#	include <mach-o/loader.h>
#else
#	include <sys/loader.h>
#endif	/* NEXTSTEP */

#ifndef MH_CIGAM
#define MH_CIGAM  	0xcefaedfe
#endif
#ifndef FAT_MAGIC
#define FAT_MAGIC 	0xcafebabe
#endif
#ifndef FAT_CIGAM
#define FAT_CIGAM 	0xbebafeca
#endif

static int
_isexec(int fd)
{
	struct mach_header ehdr;

	if ((read(fd, &ehdr, sizeof(ehdr)) == sizeof(ehdr)) && 
	    (ehdr.magic == MH_MAGIC || ehdr.magic == MH_CIGAM ||
	     ehdr.magic == FAT_MAGIC || ehdr.magic == FAT_CIGAM))
		return(TRUE);
	else
		return(FALSE);
}
#endif /* EXE_COFF */


#if	EXE_TYPE == EXE_HPEXEC
/*
 * HP 9000 executable format
 */

#ifdef hp9000s300

#include <a.out.h>
#define header exec
#define ISEXEC(a) ((a.file_type)==EXEC_MAGIC || (a.file_type)==SHARE_MAGIC || \
		   (a.file_type)==DEMAND_MAGIC)

#else	/* ! hp9000s300 */

#define ISEXEC(a) ((a)==EXEC_MAGIC || (a)==SHARE_MAGIC || (a)==DEMAND_MAGIC)
#include <filehdr.h>

#endif	/* hp9000s300 */

static int
_isexec(int fd)
{
	struct header ehdr;

	if ((read(fd, &ehdr, sizeof(ehdr)) == sizeof(ehdr)) &&
	    ISEXEC(ehdr.a_magic))
		return(TRUE);
	else
		return(FALSE);
}
#endif	/* EXE_HPEXEC */


#if	!defined(EXE_TYPE)
/*
 * Fake _isexec() call for unknown executable formats.
 */
static int
_isexec(int fd)
{
	return(FALSE);
}
#endif	/* !defined(EXE_TYPE) */

/*
 * Determine whether 'file' is an executable or not.
d42 1
a53 2
	r = _isexec(fd);
	(void) close(fd);
d55 5
a59 1
	return(r);
a60 1

@


1.7
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: isexec.c,v 1.6 2003/05/14 01:34:35 millert Exp $	*/
a32 17

#ifndef lint
#if 0
static char RCSid[] __attribute__((__unused__)) =
"$From: isexec.c,v 1.2 1999/08/04 15:57:33 christos Exp $";
#else
static char RCSid[] __attribute__((__unused__)) =
"$OpenBSD: isexec.c,v 1.6 2003/05/14 01:34:35 millert Exp $";
#endif

static char sccsid[] __attribute__((__unused__)) =
"@@(#)client.c";

static char copyright[] __attribute__((__unused__)) =
"@@(#) Copyright (c) 1983 Regents of the University of California.\n\
 All rights reserved.\n";
#endif /* not lint */
@


1.6
log
@ o Sync w/ freerdist 0.92 minus the compress option
 o KNF and ANSIfy the function headers

Sparse file support is currently a no-op since it didn't work.
Proper sparse file support will be added later.
@
text
@d1 1
a1 1
/*	$OpenBSD: isexec.c,v 1.5 2002/05/09 19:13:02 millert Exp $	*/
d15 1
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d40 1
a40 1
"$OpenBSD: isexec.c,v 1.5 2002/05/09 19:13:02 millert Exp $";
@


1.5
log
@Fix noexec option on ELF systems
@
text
@d1 1
a1 1
/*	$OpenBSD: isexec.c,v 1.4 1998/06/26 21:21:12 millert Exp $	*/
d35 3
d40 2
a41 2
static char RCSid[] = 
"$From: isexec.c,v 6.21 1994/04/01 23:44:10 mcooper Exp $";
d43 2
a44 2
static char RCSid[] = 
"$OpenBSD: isexec.c,v 1.4 1998/06/26 21:21:12 millert Exp $";
d47 2
a48 1
static char sccsid[] = "@@(#)client.c";
d50 1
a50 1
static char copyright[] =
d55 1
a55 2

#include "defs.h"
d63 2
a64 2
static int _isexec(fd)
	int fd;
d147 2
a148 2
static int _isexec(fd)
	int fd;
d193 2
a194 2
static int _isexec(fd)
	int fd;
d227 2
a228 2
static int _isexec(fd)
	int fd;
d245 2
a246 3
static int _isexec(fd)
	/*ARGSUSED*/
	int fd;
d255 2
a256 3
extern int isexec(file, statp)
	char *file;
	struct stat *statp;
@


1.4
log
@rdist 6.1.4 + OpenBSD patches + some -Wall
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d41 1
a41 1
"$OpenBSD$";
d78 1
a78 1
#include <elf.h>
a124 1
#include <elf.h>
@


1.3
log
@rcsid
@
text
@d36 1
d38 5
a42 1
"$OpenBSD: isexec.c,v 1.2 1996/03/05 03:16:06 dm Exp $";
@


1.2
log
@rdist 6.1.2
@
text
@d1 2
d37 1
a37 1
"$Id: isexec.c,v 6.21 1994/04/01 23:44:10 mcooper Exp $";
@


1.1
log
@rdist 6.1.1
@
text
@@
