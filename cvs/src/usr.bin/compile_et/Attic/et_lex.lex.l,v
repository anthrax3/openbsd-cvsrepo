head	1.7;
access;
symbols
	OPENBSD_5_3:1.6.0.30
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.28
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.26
	OPENBSD_5_0:1.6.0.24
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.22
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.20
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.16
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.18
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.14
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.12
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.10
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.8
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.6
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.4
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.2
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.5.0.2
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.4.0.8
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.3.0.14
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.12
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.10
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.8
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.6
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.4
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.2
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.1.0.6
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.4
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.2
	OPENBSD_2_1_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2013.06.17.19.17.15;	author robert;	state dead;
branches;
next	1.6;

1.6
date	2005.10.17.07.35.29;	author biorn;	state Exp;
branches;
next	1.5;

1.5
date	2005.05.13.05.05.22;	author jaredy;	state Exp;
branches;
next	1.4;

1.4
date	2003.07.07.21.36.09;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2000.02.19.12.07.19;	author hin;	state Exp;
branches;
next	1.2;

1.2
date	98.05.13.17.54.22;	author art;	state Exp;
branches;
next	1.1;

1.1
date	96.11.11.05.06.35;	author downsj;	state Exp;
branches;
next	;


desc
@@


1.7
log
@remove asn1_compile and compile_et from usr.bin because they
have found a new home in src/kerberosV/tools
@
text
@%{
/*
 * Copyright (c) 1998 - 2000 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
 *
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
 *
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
 *
 * 3. Neither the name of the Institute nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission. 
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE. 
 */

/*
 * This is to handle the definition of this symbol in some AIX
 * headers, which will conflict with the definition that lex will
 * generate for it.  It's only a problem for AIX lex.
 */

#undef ECHO

#include "compile_et.h"
#include "error_table.h"

/* RCSID("$KTH: lex.l,v 1.8 2005/05/16 08:52:54 lha Exp $"); */

static unsigned lineno = 1;
void error_message(const char *, ...);
static int getstring(void);

#define YY_NO_UNPUT

#undef ECHO

%}


%%
et			{ return ET; }
error_table		{ return ET; }
ec			{ return EC; }
error_code		{ return EC; }
prefix			{ return PREFIX; }
index			{ return INDEX; }
id			{ return ID; }
end			{ return END; }
[0-9]+			{ yylval.number = atoi(yytext); return NUMBER; }
#[^\n]*			;
[ \t]			;
\n			{ lineno++; }
\"			{ return getstring(); }
[a-zA-Z0-9_]+		{ yylval.string = strdup(yytext); return STRING; }
.			{ return *yytext; }
%%

#ifndef yywrap /* XXX */
int
yywrap () 
{
     return 1;
}
#endif

static int
getstring(void)
{
    char x[128];
    int i = 0;
    int c;
    int quote = 0;
    while(i < sizeof(x) - 1 && (c = input()) != EOF){
	if(quote) {
	    x[i++] = c;
	    quote = 0;
	    continue;
	}
	if(c == '\n'){
	    error_message("unterminated string");
	    lineno++;
	    break;
	}
	if(c == '\\'){
	    quote++;
	    continue;
	}
	if(c == '\"')
	    break;
	x[i++] = c;
    }
    x[i] = '\0';
    yylval.string = strdup(x);
    if (yylval.string == NULL)
        err(1, "malloc");
    return STRING;
}

void
error_message (const char *format, ...)
{
     va_list args;

     va_start (args, format);
     fprintf (stderr, "%s:%d:", filename, lineno);
     vfprintf (stderr, format, args);
     va_end (args);
     numerror++;
}
@


1.6
log
@sync with heimdal 0.7
@
text
@@


1.5
log
@minor fixes
- some strn* to strl*
- allocation failure checks
- fix overflow in getstring()

ok otto, moritz
@
text
@d3 1
a3 1
 * Copyright (c) 1998 Kungliga Tekniska Högskolan
d18 1
a18 6
 * 3. All advertising materials mentioning features or use of this software 
 *    must display the following acknowledgement: 
 *      This product includes software developed by Kungliga Tekniska 
 *      Högskolan and its contributors. 
 *
 * 4. Neither the name of the Institute nor the names of its contributors 
d46 1
a46 1
/* RCSID("$KTH: lex.l,v 1.4 1998/11/20 05:58:52 assar Exp $"); */
d49 6
a54 2
void error_message(char *, ...);
int getstring(void);
d85 1
a85 1
int
d112 3
a114 2
    if ((yylval.string = strdup(x)) == NULL)
    	err(1, NULL);
d119 1
a119 1
error_message (char *format, ...)
@


1.4
log
@protos
@
text
@a55 1
int yylex(void);
d93 1
a93 1
    while((c = input()) != EOF){
d113 2
a114 1
    yylval.string = strdup(x);
@


1.3
log
@Update to a newer version from KTH-Kerberos.
(most work by art@@)
@
text
@d56 1
@


1.2
log
@generate int errorcodes instead of long to match the new libcom_err
This should solve the problems with having kerberos servers on alphas.
@
text
@d2 55
a56 1
  unsigned lineno = 1;
d59 17
a75 2
PC	[^\"]
AN	[A-Z_a-z0-9]
d78 7
a84 8
error_table	return ERROR_TABLE;
et		return ERROR_TABLE;
error_code	return ERROR_CODE_ENTRY;
ec		return ERROR_CODE_ENTRY;
end		return END;

[\t ]		;
\n		++lineno;
d86 42
a127 14
\"{PC}*\"	{ register char *p; yylval.dynstr = ds(yytext+1);
		  if ((p = strrchr(yylval.dynstr, '"')) != NULL) *p = '\0';
		  return QUOTED_STRING;
		}

{AN}*	{ yylval.dynstr = ds(yytext); return STRING; }

#.*\n		++lineno;

.		{ return (*yytext); }
%%
#ifndef lint
static char rcsid_et_lex_lex_l[] = "$Id: et_lex.lex.l,v 1.1 1996/11/11 05:06:35 downsj Exp $";
#endif
@


1.1
log
@compile_et now resides in /usr/libexec.
@
text
@d19 1
a19 1
		  if (p=strrchr(yylval.dynstr, '"')) *p='\0';
d30 1
a30 1
static char rcsid_et_lex_lex_l[] = "$Id: et_lex.lex.l,v 1.1.1.1 1995/12/14 06:52:49 tholo Exp $";
@

