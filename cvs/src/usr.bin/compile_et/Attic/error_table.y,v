head	1.8;
access;
symbols
	OPENBSD_5_3:1.7.0.30
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.28
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.26
	OPENBSD_5_0:1.7.0.24
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.22
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.20
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.16
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.18
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.14
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.12
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.10
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.8
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.6
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.4
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.2
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.6.0.2
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.3.0.14
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.12
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.10
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.8
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.6
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.4
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.2
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.1.0.6
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.4
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.2
	OPENBSD_2_1_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2013.06.17.19.17.15;	author robert;	state dead;
branches;
next	1.7;

1.7
date	2005.10.17.07.35.29;	author biorn;	state Exp;
branches;
next	1.6;

1.6
date	2005.05.13.05.05.22;	author jaredy;	state Exp;
branches;
next	1.5;

1.5
date	2003.07.07.21.36.09;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2003.04.05.15.39.22;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2000.02.19.12.07.19;	author hin;	state Exp;
branches;
next	1.2;

1.2
date	98.05.13.17.54.21;	author art;	state Exp;
branches;
next	1.1;

1.1
date	96.11.11.05.06.35;	author downsj;	state Exp;
branches;
next	;


desc
@@


1.8
log
@remove asn1_compile and compile_et from usr.bin because they
have found a new home in src/kerberosV/tools
@
text
@%{
/*
 * Copyright (c) 1998 - 2000 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
 *
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
 *
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
 *
 * 3. Neither the name of the Institute nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission. 
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE. 
 */

#include "compile_et.h"

/* RCSID("$KTH: parse.y,v 1.13 2005/05/16 08:53:34 lha Exp $"); */

void yyerror (char *s);
static long name2number(const char *str);
void error_message(char *, ...);

extern char *yytext;
int yyparse(void);

/* This is for bison */

#if !defined(alloca) && !defined(HAVE_ALLOCA)
#define alloca(x) malloc(x)
#endif

%}

%union {
  char *string;
  int number;
}

%token ET INDEX PREFIX EC ID END
%token <string> STRING
%token <number> NUMBER

%%

file		: /* */ 
		| header statements
		;

header		: id et
		| et
		;

id		: ID STRING
		{
		    id_str = $2;
		}
		;

et		: ET STRING
		{
		    base = name2number($2);
		    strlcpy(name, $2, sizeof(name));
		    free($2);
		}
		| ET STRING STRING
		{
		    base = name2number($2);
		    strlcpy(name, $3, sizeof(name));
		    free($2);
		    free($3);
		}
		;

statements	: statement
		| statements statement
		;

statement	: INDEX NUMBER 
		{
			number = $2;
		}
		| PREFIX STRING
		{
		    free(prefix);
		    asprintf (&prefix, "%s_", $2);
		    if (prefix == NULL)
			errx(1, "malloc");
		    free($2);
		}
		| PREFIX
		{
		    prefix = realloc(prefix, 1);
		    if (prefix == NULL)
			errx(1, "malloc");
		    *prefix = '\0';
		}
		| EC STRING ',' STRING
		{
		    struct error_code *ec = malloc(sizeof(*ec));
		    
		    if (ec == NULL)
			errx(1, "malloc");

		    ec->next = NULL;
		    ec->number = number;
		    if(prefix && *prefix != '\0') {
			asprintf (&ec->name, "%s%s", prefix, $2);
			if (ec->name == NULL)
			    errx(1, "malloc");
			free($2);
		    } else
			ec->name = $2;
		    ec->string = $4;
		    APPEND(codes, ec);
		    number++;
		}
		| END
		{
			YYACCEPT;
		}
		;

%%

static long
name2number(const char *str)
{
    const char *p;
    long base = 0;
    const char *x = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	"abcdefghijklmnopqrstuvwxyz0123456789_";
    if(strlen(str) > 4) {
	yyerror("table name too long");
	return 0;
    }
    for(p = str; *p; p++){
	char *q = strchr(x, *p);
	if(q == NULL) {
	    yyerror("invalid character in table name");
	    return 0;
	}
	base = (base << 6) + (q - x) + 1;
    }
    base <<= 8;
    if(base > 0x7fffffff)
	base = -(0xffffffff - base + 1);
    return base;
}

void
yyerror (char *s)
{
     error_message ("%s\n", s);
}
@


1.7
log
@sync with heimdal 0.7
@
text
@@


1.6
log
@minor fixes
- some strn* to strl*
- allocation failure checks
- fix overflow in getstring()

ok otto, moritz
@
text
@d3 1
a3 1
 * Copyright (c) 1998, 1999 Kungliga Tekniska Högskolan
d18 1
a18 6
 * 3. All advertising materials mentioning features or use of this software 
 *    must display the following acknowledgement: 
 *      This product includes software developed by Kungliga Tekniska 
 *      Högskolan and its contributors. 
 *
 * 4. Neither the name of the Institute nor the names of its contributors 
d36 2
a37 1
/* RCSID("$KTH: parse.y,v 1.9 1999/07/04 14:54:58 assar Exp $"); */
d40 1
a40 1
long name2number(const char *str);
d104 4
a107 8
		    size_t len = strlen($2) + 2;
		    
		    if ((prefix = realloc(prefix, len)) == NULL) {
		    	yyerror(strerror(errno));
			exit(1);
		    }
		    strlcpy(prefix, $2, len);
		    strlcat(prefix, "_", len);
d112 3
a114 4
		    if ((prefix = realloc(prefix, 1)) == NULL) {
			yyerror(strerror(errno));
			exit(1);
		    }
d120 4
a123 5
		
		    if (ec == NULL) {
			yyerror(strerror(errno));
			exit(1);
		    }
d127 3
a129 4
			if (asprintf (&ec->name, "%s%s", prefix, $2) == -1) {
			    yyerror(strerror(errno));
			    exit(1);
			}
d145 1
a145 1
long
@


1.5
log
@protos
@
text
@d86 1
a86 2
		    strncpy(name, $2, sizeof(name));
		    name[sizeof(name) - 1] = '\0';
d92 1
a92 2
		    strncpy(name, $3, sizeof(name));
		    name[sizeof(name) - 1] = '\0';
d109 5
a113 1
		    prefix = realloc(prefix, len);
d120 4
a123 1
		    prefix = realloc(prefix, 1);
d129 5
a133 1

d137 4
a140 1
			asprintf (&ec->name, "%s%s", prefix, $2);
@


1.4
log
@strlcpy
@
text
@d48 1
@


1.3
log
@Update to a newer version from KTH-Kerberos.
(most work by art@@)
@
text
@d109 4
a112 3
		    prefix = realloc(prefix, strlen($2) + 2);
		    strcpy(prefix, $2);
		    strcat(prefix, "_");
@


1.2
log
@generate int errorcodes instead of long to match the new libcom_err
This should solve the problems with having kerberos servers on alphas.
@
text
@d2 24
a25 5
/*	$OpenBSD: error_table.y,v 1.1 1996/11/11 05:06:35 downsj Exp $	*/

/*-
 * Copyright 1987, 1988 by the Student Information Processing Board
 *	of the Massachusetts Institute of Technology
d27 11
a37 11
 * Permission to use, copy, modify, and distribute this software
 * and its documentation for any purpose and without fee is
 * hereby granted, provided that the above copyright notice
 * appear in all copies and that both that copyright notice and
 * this permission notice appear in supporting documentation,
 * and that the names of M.I.T. and the M.I.T. S.I.P.B. not be
 * used in advertising or publicity pertaining to distribution
 * of the software without specific, written prior permission.
 * M.I.T. and the M.I.T. S.I.P.B. make no representations about
 * the suitability of this software for any purpose.  It is
 * provided "as is" without express or implied warranty.
d40 2
a41 45
#include <stdio.h>
#include <stdlib.h>
char *str_concat(), *ds(), *quote();
char *current_token = (char *)NULL;
extern char *table_name;
%}
%union {
	char *dynstr;
}

%token ERROR_TABLE ERROR_CODE_ENTRY END
%token <dynstr> STRING QUOTED_STRING
%type <dynstr> ec_name description table_id
%{
%}
%start error_table
%%

error_table	:	ERROR_TABLE table_id error_codes END
			{ table_name = ds($2);
			  current_token = table_name;
			  put_ecs(); }
		;

table_id	:	STRING
			{ current_token = $1;
			  set_table_num($1);
			  $$ = $1; }
		;

error_codes	:	error_codes ec_entry
		|	ec_entry
		;

ec_entry	:	ERROR_CODE_ENTRY ec_name ',' description
			{ add_ec($2, $4);
			  free($2);
			  free($4); }
		|	ERROR_CODE_ENTRY ec_name '=' STRING ',' description
			{ add_ec_val($2, $4, $6);
			  free($2);
			  free($4);
			  free($6);
			}
		;
d43 3
a45 4
ec_name		:	STRING
			{ $$ = ds($1);
			  current_token = $$; }
		;
d47 1
a47 4
description	:	QUOTED_STRING
			{ $$ = ds($1);
			  current_token = $$; }
		;
d49 1
a49 17
%%
/*
 * Copyright 1987, 1988 by the Student Information Processing Board
 *	of the Massachusetts Institute of Technology
 *
 * Permission to use, copy, modify, and distribute this software
 * and its documentation for any purpose and without fee is
 * hereby granted, provided that the above copyright notice
 * appear in all copies and that both that copyright notice and
 * this permission notice appear in supporting documentation,
 * and that the names of M.I.T. and the M.I.T. S.I.P.B. not be
 * used in advertising or publicity pertaining to distribution
 * of the software without specific, written prior permission.
 * M.I.T. and the M.I.T. S.I.P.B. make no representations about
 * the suitability of this software for any purpose.  It is
 * provided "as is" without express or implied warranty.
 */
d51 2
a52 10
#include <string.h>
#include <assert.h>
#include <ctype.h>
#include <sys/types.h>
#include <sys/time.h>
#include "error_table.h"

#ifndef	lint
static char const rcsid_error_table_y[] =
    "$Id: error_table.y,v 1.1 1996/11/11 05:06:35 downsj Exp $";
d55 1
a55 1
#include "et_lex.lex.c"
d57 3
a59 18
extern FILE *hfile, *cfile;

static long gensym_n = 0;
char *
gensym(x)
	char const *x;
{
	char *symbol;
	if (!gensym_n) {
		struct timeval tv;
		struct timezone tzp;
		gettimeofday(&tv, &tzp);
		gensym_n = (tv.tv_sec%10000)*100 + tv.tv_usec/10000;
	}
	symbol = (char *)malloc(32 * sizeof(char));
	gensym_n++;
	snprintf(symbol, 32 * sizeof(char), "et%ld", gensym_n);
	return(symbol);
d62 3
a64 9
char *
ds(string)
	char const *string;
{
	char *rv;
	rv = (char *)malloc(strlen(string)+1);
	strcpy(rv, string);
	return(rv);
}
d66 1
a66 11
char *
quote(string)
	char const *string;
{
	char *rv;
	rv = (char *)malloc(strlen(string)+3);
	strcpy(rv, "\"");
	strcat(rv, string);
	strcat(rv, "\"");
	return(rv);
}
d68 3
a70 3
int table_number;
int current = 0;
char **error_codes = (char **)NULL;
d72 3
a74 14
void
add_ec(name, description)
	char const *name, *description;
{
	fprintf(cfile, "\t\"%s\",\n", description);
	if (error_codes == (char **)NULL) {
		error_codes = (char **)malloc(sizeof(char *));
		*error_codes = (char *)NULL;
	}
	error_codes = (char **)realloc((char *)error_codes,
				       (current + 2)*sizeof(char *));
	error_codes[current++] = ds(name);
	error_codes[current] = (char *)NULL;
}
d76 63
a138 24
void
add_ec_val(name, val, description)
	char const *name, *val, *description;
{
	const int ncurrent = atoi(val);
	if (ncurrent < current) {
		printf("Error code %s (%d) out of order", name,
		       current);
		return;
	}
      
	while (ncurrent > current)
	     fputs("\t(char *)NULL,\n", cfile), current++;
	
	fprintf(cfile, "\t\"%s\",\n", description);
	if (error_codes == (char **)NULL) {
		error_codes = (char **)malloc(sizeof(char *));
		*error_codes = (char *)NULL;
	}
	error_codes = (char **)realloc((char *)error_codes,
				       (current + 2)*sizeof(char *));
	error_codes[current++] = ds(name);
	error_codes[current] = (char *)NULL;
} 
d140 1
a140 18
void
put_ecs()
{
	int i;
	for (i = 0; i < current; i++) {
	     if (error_codes[i] != (char *)NULL)
		  fprintf(hfile, "#define %-40s (%d)\n",
			  error_codes[i], table_number + i);
	}
}

/*
 * char_to_num -- maps letters and numbers into a small numbering space
 * 	uppercase ->  1-26
 *	lowercase -> 27-52
 *	digits    -> 53-62
 *	underscore-> 63
 */
d142 2
a143 5
static const char char_set[] =
	"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_";

int char_to_num(c)
	char c;
d145 20
a164 18
	const char *where;
	int diff;

	where = strchr (char_set, c);
	if (where) {
		diff = where - char_set + 1;
		assert (diff < (1 << ERRCODE_RANGE));
		return diff;
	}
	else if (isprint (c))
		fprintf (stderr,
			 "Illegal character `%c' in error table name\n",
			 c);
	else
		fprintf (stderr,
			 "Illegal character %03o in error table name\n",
			 c);
	exit (1);
d168 1
a168 2
set_table_num(string)
	char *string;
d170 1
a170 19
	if (char_to_num (string[0]) > char_to_num ('z')) {
		fprintf (stderr, "%s%s%s%s",
			 "First character of error table name must be ",
			 "a letter; name ``",
			 string, "'' rejected\n");
		exit (1);
	}
	if (strlen(string) > 4) {
		fprintf(stderr, "Table name %s too long, truncated ",
			string);
		string[4] = '\0';
		fprintf(stderr, "to %s\n", string);
	}
	while (*string != '\0') {
		table_number = (table_number << BITS_PER_CHAR)
			+ char_to_num(*string);
		string++;
	}
	table_number = table_number << ERRCODE_RANGE;
a171 1

@


1.1
log
@compile_et now resides in /usr/libexec.
@
text
@d2 1
a2 1
/*	$OpenBSD$	*/
d104 1
a104 1
    "$Id: error_table.y,v 1.2 1996/09/15 23:27:09 millert Exp $";
d151 1
a151 1
long table_number;
d155 1
d170 1
d195 1
d201 1
a201 1
		  fprintf(hfile, "#define %-40s (%ldL)\n",
d240 1
@

