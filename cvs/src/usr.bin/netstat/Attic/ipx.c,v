head	1.20;
access;
symbols
	OPENBSD_4_1:1.19.0.4
	OPENBSD_4_1_BASE:1.19
	OPENBSD_4_0:1.19.0.2
	OPENBSD_4_0_BASE:1.19
	OPENBSD_3_9:1.18.0.2
	OPENBSD_3_9_BASE:1.18
	OPENBSD_3_8:1.17.0.2
	OPENBSD_3_8_BASE:1.17
	OPENBSD_3_7:1.15.0.6
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.15.0.4
	OPENBSD_3_6_BASE:1.15
	OPENBSD_3_5:1.15.0.2
	OPENBSD_3_5_BASE:1.15
	OPENBSD_3_4:1.14.0.2
	OPENBSD_3_4_BASE:1.14
	OPENBSD_3_3:1.13.0.2
	OPENBSD_3_3_BASE:1.13
	OPENBSD_3_2:1.12.0.2
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.7.0.6
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.4
	OPENBSD_2_8:1.7.0.2
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.6.0.2
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.5.0.8
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.6
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.4
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.20
date	2007.06.04.12.20.24;	author henning;	state dead;
branches;
next	1.19;

1.19
date	2006.05.27.19.16.37;	author claudio;	state Exp;
branches;
next	1.18;

1.18
date	2005.10.17.19.09.36;	author otto;	state Exp;
branches;
next	1.17;

1.17
date	2005.03.30.06.45.34;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2005.03.25.17.01.03;	author jaredy;	state Exp;
branches;
next	1.15;

1.15
date	2003.11.08.19.17.29;	author jmc;	state Exp;
branches;
next	1.14;

1.14
date	2003.06.03.02.56.13;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2003.02.01.01.51.31;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2002.06.09.04.07.10;	author jsyn;	state Exp;
branches;
next	1.11;

1.11
date	2002.05.27.01.50.36;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2002.02.16.21.27.50;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.01.17.21.34.58;	author mickey;	state Exp;
branches;
next	1.8;

1.8
date	2001.11.19.19.02.15;	author mpech;	state Exp;
branches;
next	1.7;

1.7
date	2000.10.23.19.17.09;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	2000.01.11.01.14.26;	author fgsch;	state Exp;
branches;
next	1.5;

1.5
date	98.02.27.12.07.34;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.06.29.21.46.01;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.06.29.20.52.40;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.06.29.20.18.00;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.16.09.29.32;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.20
log
@remove IPX support, agreed by many
@
text
@/*	$OpenBSD: ipx.c,v 1.19 2006/05/27 19:16:37 claudio Exp $	*/

/*
 * Copyright (c) 1996 Michael Shalayeff
 * Copyright (c) 1983, 1988, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef lint
#if 0
static char sccsid[] = "from: @@(#)ns.c	8.1 (Berkeley) 6/6/93";
#else
static char *rcsid = "$OpenBSD: ipx.c,v 1.19 2006/05/27 19:16:37 claudio Exp $";
#endif
#endif /* not lint */

#include <sys/param.h>
#include <sys/socket.h>
#include <sys/socketvar.h>
#include <sys/mbuf.h>
#include <sys/protosw.h>

#include <net/route.h>
#include <net/if.h>

#include <netinet/tcp_fsm.h>

#include <netipx/ipx.h>
#include <netipx/ipx_pcb.h>
#include <netipx/ipx.h>
#include <netipx/ipx_var.h>
#ifdef IPXERRORMSGS
#include <netipx/ipx_error.h>
#endif /* IPXERRORMSGS */
#include <netipx/spx.h>
#include <netipx/spx_timer.h>
#include <netipx/spx_var.h>
#define SANAMES
#include <netipx/spx_debug.h>

#include <limits.h>
#include <errno.h>
#include <stdio.h>
#include <string.h>

#include "netstat.h"

struct	ipxpcb ipxpcb;
struct	spxpcb spxpcb;
struct	socket sockb;

static char *ipx_prpr(struct ipx_addr *);
#ifdef IPXERRORMSGS
static void ipx_erputil(int, int);
#endif

static	int first = 1;

/*
 * Print a summary of connections related to an IPX
 * protocol.  For SPX, also give state of connection.
 * Listening processes (aflag) are suppressed unless the
 * -a (all) flag is specified.
 */

void
ipxprotopr(u_long off, char *name)
{
	struct ipxpcbtable	table;
	struct ipxpcb	*head, *prev, *next;
	int isspx;

	if (off == 0)
		return;
	isspx = strcmp(name, "spx") == 0;
	kread(off, &table, sizeof (table));
	prev = head = (struct ipxpcb *)
		&CIRCLEQ_FIRST(&((struct ipxpcbtable *)off)->ipxpt_queue);
	next = CIRCLEQ_FIRST(&table.ipxpt_queue);

	while (next != head) {
		kread((u_long)next, &ipxpcb, sizeof (ipxpcb));
		if (CIRCLEQ_PREV(&ipxpcb, ipxp_queue) != prev) {
			printf("???\n");
			break;
		}
		prev = next;
		next = CIRCLEQ_NEXT(&ipxpcb, ipxp_queue);

		if (!aflag && ipx_nullhost(ipxpcb.ipxp_faddr) )
			continue;

		kread((u_long)ipxpcb.ipxp_socket, &sockb, sizeof (sockb));
		if (isspx) {
			kread((u_long)ipxpcb.ipxp_ppcb, &spxpcb,
			    sizeof (spxpcb));
		}
		if (first) {
			printf("Active Internetwork Packet Exchange connections");
			if (aflag)
				printf(" (including servers)");
			putchar('\n');
			if (Aflag)
				printf("%-*.*s %-5.5s %-6.6s %-6.6s  %-*.*s %-*.*s %s\n",
				    PLEN, PLEN, "PCB", "Proto", "Recv-Q",
				    "Send-Q", PLEN, PLEN, "Local Address",
				    PLEN, PLEN, "Foreign Address", "(state)");
			else
				printf("%-5.5s %-6.6s %-6.6s  %-22.22s %-22.22s %s\n",
				    "Proto", "Recv-Q", "Send-Q",
				    "Local Address", "Foreign Address",
				    "(state)");
			first = 0;
		}
		if (Aflag)
			printf("%*p ", PLEN, ipxpcb.ipxp_ppcb);
		printf("%-5.5s %6ld %6ld ", name, sockb.so_rcv.sb_cc,
			sockb.so_snd.sb_cc);
		printf("  %-22.22s", ipx_prpr(&ipxpcb.ipxp_laddr));
		printf(" %-22.22s", ipx_prpr(&ipxpcb.ipxp_faddr));
		if (isspx) {
			extern char *tcpstates[];
			if (spxpcb.s_state >= TCP_NSTATES)
				printf(" %d", spxpcb.s_state);
			else
				printf(" %s", tcpstates[spxpcb.s_state]);
		}
		putchar('\n');
	}
}
#define ANY(x,y,z) \
	((x) ? printf("\t%ld %s%s%s -- %s\n",x,y,plural(x),z,"x") : 0)

/*
 * Dump SPX statistics structure.
 */
void
spx_stats(u_long off, char *name)
{
	struct spx_istat spx_istat;
#define spxstat spx_istat.newstats

	if (off == 0)
		return;
	kread(off, &spx_istat, sizeof (spx_istat));
	printf("%s:\n", name);
	ANY((long)spx_istat.nonucn, "connection", " dropped due to no new sockets ");
	ANY((long)spx_istat.gonawy, "connection", " terminated due to our end dying");
	ANY((long)spx_istat.nonucn, "connection",
	    " dropped due to inability to connect");
	ANY((long)spx_istat.noconn, "connection",
	    " dropped due to inability to connect");
	ANY((long)spx_istat.notme, "connection",
	    " incompleted due to mismatched id's");
	ANY((long)spx_istat.wrncon, "connection", " dropped due to mismatched id's");
	ANY((long)spx_istat.bdreas, "packet", " dropped out of sequence");
	ANY((long)spx_istat.lstdup, "packet", " duplicating the highest packet");
	ANY((long)spx_istat.notyet, "packet", " refused as exceeding allocation");
	ANY(spxstat.spxs_connattempt, "connection", " initiated");
	ANY(spxstat.spxs_accepts, "connection", " accepted");
	ANY(spxstat.spxs_connects, "connection", " established");
	ANY(spxstat.spxs_drops, "connection", " dropped");
	ANY(spxstat.spxs_conndrops, "embryonic connection", " dropped");
	ANY(spxstat.spxs_closed, "connection", " closed (includes drops)");
	ANY(spxstat.spxs_segstimed, "packet", " where we tried to get rtt");
	ANY(spxstat.spxs_rttupdated, "time", " we got rtt");
	ANY(spxstat.spxs_delack, "delayed ack", " sent");
	ANY(spxstat.spxs_timeoutdrop, "connection", " dropped in rxmt timeout");
	ANY(spxstat.spxs_rexmttimeo, "retransmit timeout", "");
	ANY(spxstat.spxs_persisttimeo, "persist timeout", "");
	ANY(spxstat.spxs_keeptimeo, "keepalive timeout", "");
	ANY(spxstat.spxs_keepprobe, "keepalive probe", " sent");
	ANY(spxstat.spxs_keepdrops, "connection", " dropped in keepalive");
	ANY(spxstat.spxs_sndtotal, "total packet", " sent");
	ANY(spxstat.spxs_sndpack, "data packet", " sent");
	ANY(spxstat.spxs_sndbyte, "data byte", " sent");
	ANY(spxstat.spxs_sndrexmitpack, "data packet", " retransmitted");
	ANY(spxstat.spxs_sndrexmitbyte, "data byte", " retransmitted");
	ANY(spxstat.spxs_sndacks, "ack-only packet", " sent");
	ANY(spxstat.spxs_sndprobe, "window probe", " sent");
	ANY(spxstat.spxs_sndurg, "packet", " sent with URG only");
	ANY(spxstat.spxs_sndwinup, "window update-only packet", " sent");
	ANY(spxstat.spxs_sndctrl, "control (SYN|FIN|RST) packet", " sent");
	ANY(spxstat.spxs_sndvoid, "request", " to send a non-existent packet");
	ANY(spxstat.spxs_rcvtotal, "total packet", " received");
	ANY(spxstat.spxs_rcvpack, "packet", " received in sequence");
	ANY(spxstat.spxs_rcvbyte, "byte", " received in sequence");
	ANY(spxstat.spxs_rcvbadsum, "packet", " received with ccksum errs");
	ANY(spxstat.spxs_rcvbadoff, "packet", " received with bad offset");
	ANY(spxstat.spxs_rcvshort, "packet", " received too short");
	ANY(spxstat.spxs_rcvduppack, "duplicate-only packet", " received");
	ANY(spxstat.spxs_rcvdupbyte, "duplicate-only byte", " received");
	ANY(spxstat.spxs_rcvpartduppack, "packet", " with some duplicate data");
	ANY(spxstat.spxs_rcvpartdupbyte, "duplicate byte", " in part-duplicate packet");
	ANY(spxstat.spxs_rcvoopack, "out-of-order packet", " received");
	ANY(spxstat.spxs_rcvoobyte, "out-of-order byte", " received");
	ANY(spxstat.spxs_rcvpackafterwin, "packet", " with data after window");
	ANY(spxstat.spxs_rcvbyteafterwin, "byte", " rcvd after window");
	ANY(spxstat.spxs_rcvafterclose, "packet", " rcvd after 'close'");
	ANY(spxstat.spxs_rcvwinprobe, "rcvd window probe packet", "");
	ANY(spxstat.spxs_rcvdupack, "rcvd duplicate ack", "");
	ANY(spxstat.spxs_rcvacktoomuch, "rcvd ack", " for unsent data");
	ANY(spxstat.spxs_rcvackpack, "rcvd ack packet", "");
	ANY(spxstat.spxs_rcvackbyte, "byte", " acked by rcvd acks");
	ANY(spxstat.spxs_rcvwinupd, "rcvd window update packet", "");
}
#undef ANY
#define ANY(x,y,z)	((x) ? printf("\t%ld %s%s%s\n",x,y,plural(x),z) : 0)

/*
 * Dump IPX statistics structure.
 */
void
ipx_stats(u_long off, char *name)
{
	struct ipxstat ipxstat;

	if (off == 0)
		return;
	kread(off, &ipxstat, sizeof (ipxstat));
	printf("%s:\n", name);
	ANY(ipxstat.ipxs_toosmall, "packet", " smaller than a header");
	ANY(ipxstat.ipxs_tooshort, "packet", " smaller than advertised");
	ANY(ipxstat.ipxs_badsum, "packet", " with bad checksums");
}

#ifdef IPXERRORMSGS
static	struct {
	u_short code;
	char *name;
	char *where;
} ipx_errnames[] = {
	{ 0, "Unspecified Error", " at Destination" },
	{ 1, "Bad Checksum", " at Destination" },
	{ 2, "No Listener", " at Socket" },
	{ 3, "Packet", " Refused due to lack of space at Destination" },
	{ 01000, "Unspecified Error", " while gatewayed" },
	{ 01001, "Bad Checksum", " while gatewayed" },
	{ 01002, "Packet", " forwarded too many times" },
	{ 01003, "Packet", " too large to be forwarded" },
	{ -1, 0, 0 },
};

/*
 * Dump IPX Error statistics structure.
 */
/*ARGSUSED*/
void
ipxerr_stats(u_long off, char *name)
{
	struct ipx_errstat ipx_errstat;
	int j;
	int histoprint = 1;
	int z;

	if (off == 0)
		return;
	kread(off, &ipx_errstat, sizeof (ipx_errstat));
	printf("IPX error statistics:\n");
	ANY(ipx_errstat.ipx_es_error, "call", " to ipx_error");
	ANY(ipx_errstat.ipx_es_oldshort, "error",
		" ignored due to insufficient addressing");
	ANY(ipx_errstat.ipx_es_oldipx_err, "error request",
		" in response to error packets");
	ANY(ipx_errstat.ipx_es_tooshort, "error packet",
		" received incomplete");
	ANY(ipx_errstat.ipx_es_badcode, "error packet",
		" received of unknown type");
	for (j = 0; j < IPX_ERR_MAX; j ++) {
		z = ipx_errstat.ipx_es_outhist[j];
		if (z && histoprint) {
			printf("Output Error Histogram:\n");
			histoprint = 0;
		}
		ipx_erputil(z, ipx_errstat.ipx_es_codes[j]);

	}
	histoprint = 1;
	for (j = 0; j < IPX_ERR_MAX; j ++) {
		z = ipx_errstat.ipx_es_inhist[j];
		if (z && histoprint) {
			printf("Input Error Histogram:\n");
			histoprint = 0;
		}
		ipx_erputil(z, ipx_errstat.ipx_es_codes[j]);
	}
}

static void
ipx_erputil(int z, int c)
{
	int j;
	char codebuf[30];
	char *name, *where;

	for (j = 0;; j ++) {
		if ((name = ipx_errnames[j].name) == 0)
			break;
		if (ipx_errnames[j].code == c)
			break;
	}
	if (name == 0) {
		if (c > 01000)
			where = "in transit";
		else
			where = "at destination";
		snprintf(codebuf, sizeof codebuf,
		    "Unknown IPX error code 0%o", c);
		name = codebuf;
	} else
		where = ipx_errnames[j].where;
	ANY(z, name, where);
}
#endif /* IPXERRORMSGS */

static struct sockaddr_ipx ssipx = { AF_IPX };

static char *
ipx_prpr(struct ipx_addr *x)
{
	struct sockaddr_ipx *sipx = &ssipx;

	sipx->sipx_addr = *x;
	return(ipx_print((struct sockaddr *)sipx));
}
@


1.19
log
@Moving netstat from kvm snooping to retrieving the routing tables via
sysctl. Most code is stolen from route -- which was stolen from netstat.
kvm snooping code is still in and useable. Put it in deraadt@@ henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.c,v 1.18 2005/10/17 19:09:36 otto Exp $	*/
d37 1
a37 1
static char *rcsid = "$OpenBSD: ipx.c,v 1.18 2005/10/17 19:09:36 otto Exp $";
@


1.18
log
@Use queue macros instead of directly accessing fields. ok pat@@ "put it
in" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.c,v 1.17 2005/03/30 06:45:34 deraadt Exp $	*/
d37 1
a37 1
static char *rcsid = "$OpenBSD: ipx.c,v 1.17 2005/03/30 06:45:34 deraadt Exp $";
d69 1
@


1.17
log
@include nlist.h not needed
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.c,v 1.16 2005/03/25 17:01:03 jaredy Exp $	*/
d37 1
a37 1
static char *rcsid = "$OpenBSD: ipx.c,v 1.16 2005/03/25 17:01:03 jaredy Exp $";
d101 2
a102 2
		&((struct ipxpcbtable *)off)->ipxpt_queue.cqh_first;
	next = table.ipxpt_queue.cqh_first;
d106 1
a106 1
		if (ipxpcb.ipxp_queue.cqe_prev != prev) {
d111 1
a111 1
		next = ipxpcb.ipxp_queue.cqe_next;
@


1.16
log
@kill unneeded (char *) casts.  ok millert, otto
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.c,v 1.15 2003/11/08 19:17:29 jmc Exp $	*/
d37 1
a37 1
static char *rcsid = "$OpenBSD: ipx.c,v 1.15 2003/11/08 19:17:29 jmc Exp $";
a65 1
#include <nlist.h>
@


1.15
log
@typos from Jonathon Gray;
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.c,v 1.14 2003/06/03 02:56:13 millert Exp $	*/
d37 1
a37 1
static char *rcsid = "$OpenBSD: ipx.c,v 1.14 2003/06/03 02:56:13 millert Exp $";
d100 1
a100 1
	kread(off, (char *)&table, sizeof (table));
d106 1
a106 1
		kread((u_long)next, (char *)&ipxpcb, sizeof (ipxpcb));
d117 1
a117 2
		kread((u_long)ipxpcb.ipxp_socket,
				(char *)&sockb, sizeof (sockb));
d119 2
a120 2
			kread((u_long)ipxpcb.ipxp_ppcb,
			    (char *)&spxpcb, sizeof (spxpcb));
d169 1
a169 1
	kread(off, (char *)&spx_istat, sizeof (spx_istat));
d244 1
a244 1
	kread(off, (char *)&ipxstat, sizeof (ipxstat));
d282 1
a282 1
	kread(off, (char *)&ipx_errstat, sizeof (ipx_errstat));
@


1.14
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.c,v 1.13 2003/02/01 01:51:31 deraadt Exp $	*/
d37 1
a37 1
static char *rcsid = "$OpenBSD: ipx.c,v 1.13 2003/02/01 01:51:31 deraadt Exp $";
d209 1
a209 1
	ANY(spxstat.spxs_sndvoid, "request", " to send a non-existant packet");
@


1.13
log
@ansi
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.c,v 1.12 2002/06/09 04:07:10 jsyn Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static char *rcsid = "$OpenBSD: ipx.c,v 1.12 2002/06/09 04:07:10 jsyn Exp $";
@


1.12
log
@Standardization -- s/tdb/TDB/ and various dup expansions.

ok aaron@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.c,v 1.11 2002/05/27 01:50:36 deraadt Exp $	*/
d41 1
a41 1
static char *rcsid = "$OpenBSD: ipx.c,v 1.11 2002/05/27 01:50:36 deraadt Exp $";
d81 1
d83 1
d95 1
a95 3
ipxprotopr(off, name)
	u_long off;
	char *name;
d167 1
a167 3
spx_stats(off, name)
	u_long off;
	char *name;
d243 1
a243 3
ipx_stats(off, name)
	u_long off;
	char *name;
d262 9
a270 9
	{0, "Unspecified Error", " at Destination"},
	{1, "Bad Checksum", " at Destination"},
	{2, "No Listener", " at Socket"},
	{3, "Packet", " Refused due to lack of space at Destination"},
	{01000, "Unspecified Error", " while gatewayed"},
	{01001, "Bad Checksum", " while gatewayed"},
	{01002, "Packet", " forwarded too many times"},
	{01003, "Packet", " too large to be forwarded"},
	{-1, 0, 0},
d278 1
a278 3
ipxerr_stats(off, name)
	u_long off;
	char *name;
d319 1
a319 2
ipx_erputil(z, c)
	int z, c;
d345 1
a345 1
static struct sockaddr_ipx ssipx = {AF_IPX};
d348 1
a348 2
ipx_prpr(x)
	struct ipx_addr *x;
@


1.11
log
@a night of cleanup, so i can read this easier
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.c,v 1.10 2002/02/16 21:27:50 millert Exp $	*/
d41 1
a41 1
static char *rcsid = "$OpenBSD: ipx.c,v 1.10 2002/02/16 21:27:50 millert Exp $";
d225 1
a225 1
	ANY(spxstat.spxs_rcvpartdupbyte, "dup. byte", " in part-dup. packet");
@


1.10
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.c,v 1.9 2002/01/17 21:34:58 mickey Exp $	*/
d41 1
a41 1
static char *rcsid = "$OpenBSD: ipx.c,v 1.9 2002/01/17 21:34:58 mickey Exp $";
d239 1
a239 1
#define ANY(x,y,z)  ((x) ? printf("\t%ld %s%s%s\n",x,y,plural(x),z) : 0)
d304 1
a304 1
	for(j = 0; j < IPX_ERR_MAX; j ++) {
d314 1
a314 1
	for(j = 0; j < IPX_ERR_MAX; j ++) {
d332 1
a332 1
	for(j = 0;; j ++) {
d338 1
a338 1
	if (name == 0)  {
d347 1
a347 1
		where =  ipx_errnames[j].where;
@


1.9
log
@evil, annoying spaces and tabs
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.c,v 1.8 2001/11/19 19:02:15 mpech Exp $	*/
d41 1
a41 1
static char *rcsid = "$OpenBSD: ipx.c,v 1.8 2001/11/19 19:02:15 mpech Exp $";
d80 2
a81 2
static char *ipx_prpr __P((struct ipx_addr *));
static void ipx_erputil __P((int, int));
@


1.8
log
@kill more registers

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.c,v 1.7 2000/10/23 19:17:09 mickey Exp $	*/
d41 1
a41 1
static char *rcsid = "$OpenBSD: ipx.c,v 1.7 2000/10/23 19:17:09 mickey Exp $";
d125 1
a125 1
			      (char *)&spxpcb, sizeof (spxpcb));
d132 1
a132 1
                        if (Aflag)
@


1.7
log
@fix a few signed/unsigned/long printf formats; millert@@ & deraadt@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.c,v 1.6 2000/01/11 01:14:26 fgsch Exp $	*/
d41 1
a41 1
static char *rcsid = "$OpenBSD: ipx.c,v 1.6 2000/01/11 01:14:26 fgsch Exp $";
d98 1
a98 1
	register struct ipxpcb	*head, *prev, *next;
d287 2
a288 2
	register int j;
	register int histoprint = 1;
@


1.6
log
@Remove references to ipx_error.h; it's going to be away.
(commented it out in ipx.c by now).
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.c,v 1.5 1998/02/27 12:07:34 deraadt Exp $	*/
d41 1
a41 1
static char *rcsid = "$OpenBSD: ipx.c,v 1.5 1998/02/27 12:07:34 deraadt Exp $";
d239 1
a239 1
#define ANY(x,y,z)  ((x) ? printf("\t%d %s%s%s\n",x,y,plural(x),z) : 0)
@


1.5
log
@oflow paranoia
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.c,v 1.4 1997/06/29 21:46:01 millert Exp $	*/
d41 1
a41 1
static char *rcsid = "$OpenBSD: ipx.c,v 1.4 1997/06/29 21:46:01 millert Exp $";
d60 1
d62 1
d260 1
d350 1
@


1.4
log
@Use correct spacing on both 32bit and 64bit machines.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.c,v 1.3 1997/06/29 20:52:40 millert Exp $	*/
d41 1
a41 1
static char *rcsid = "$OpenBSD: ipx.c,v 1.3 1997/06/29 20:52:40 millert Exp $";
d340 2
a341 1
		sprintf(codebuf, "Unknown IPX error code 0%o", c);
@


1.3
log
@Make fields line up nicely for 64-bit addresses.  Should probably #if
some things based on sizeof(long).
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.c,v 1.2 1997/06/29 20:18:00 millert Exp $	*/
d41 1
a41 1
static char *rcsid = "$OpenBSD: ipx.c,v 1.2 1997/06/29 20:18:00 millert Exp $";
d67 1
d130 10
a139 7
			if (Aflag)
				printf("%-18.18s ", "PCB");
			printf(Aflag ?
				"%-5.5s %-6.6s %-6.6s  %-18.18s %-18.18s %s\n" :
				"%-5.5s %-6.6s %-6.6s  %-22.22s %-22.22s %s\n",
				"Proto", "Recv-Q", "Send-Q",
				"Local Address", "Foreign Address", "(state)");
d143 1
a143 1
			printf("%18p ", ipxpcb.ipxp_ppcb);
@


1.2
log
@Mostly clean -Wall + 64bit issues.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.c,v 1.1 1996/08/16 09:29:32 mickey Exp $	*/
d41 1
a41 1
static char *rcsid = "$OpenBSD: ipx.c,v 1.1 1996/08/16 09:29:32 mickey Exp $";
d130 1
a130 1
				printf("%-8.8s ", "PCB");
d139 1
a139 1
			printf("%8p ", ipxpcb.ipxp_ppcb);
@


1.1
log
@ipx.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d41 1
a41 1
static char *rcsid = "$OpenBSD$";
d139 2
a140 2
			printf("%8x ", ipxpcb.ipxp_ppcb);
		printf("%-5.5s %6d %6d ", name, sockb.so_rcv.sb_cc,
d155 1
a155 1
	((x) ? printf("\t%d %s%s%s -- %s\n",x,y,plural(x),z,"x") : 0)
d172 3
a174 3
	ANY(spx_istat.nonucn, "connection", " dropped due to no new sockets ");
	ANY(spx_istat.gonawy, "connection", " terminated due to our end dying");
	ANY(spx_istat.nonucn, "connection",
d176 1
a176 1
	ANY(spx_istat.noconn, "connection",
d178 1
a178 1
	ANY(spx_istat.notme, "connection",
d180 4
a183 4
	ANY(spx_istat.wrncon, "connection", " dropped due to mismatched id's");
	ANY(spx_istat.bdreas, "packet", " dropped out of sequence");
	ANY(spx_istat.lstdup, "packet", " duplicating the highest packet");
	ANY(spx_istat.notyet, "packet", " refused as exceeding allocation");
@

