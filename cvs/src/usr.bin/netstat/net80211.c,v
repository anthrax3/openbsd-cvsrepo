head	1.17;
access;
symbols
	OPENBSD_6_2:1.17.0.6
	OPENBSD_6_2_BASE:1.17
	OPENBSD_6_1:1.17.0.4
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.16.0.2
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.13.0.4
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.6
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.2
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.10.0.6
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.4
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.9.0.4
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.2
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.8.0.2
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.4
	OPENBSD_5_0:1.7.0.2
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.6.0.10
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.8
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.4
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.6
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.5.0.6
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.4
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.2
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.3.0.6
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.4
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.2
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.2.0.2
	OPENBSD_3_8_BASE:1.2;
locks; strict;
comment	@ * @;


1.17
date	2016.08.27.04.13.43;	author guenther;	state Exp;
branches;
next	1.16;
commitid	zhvm7groPE9hsJC6;

1.16
date	2016.06.05.17.11.42;	author stsp;	state Exp;
branches;
next	1.15;
commitid	c7DS66rSCCw8AtlA;

1.15
date	2016.04.28.14.46.50;	author stsp;	state Exp;
branches;
next	1.14;
commitid	ejM3tqzAuhoiQSe7;

1.14
date	2016.04.27.11.59.03;	author stsp;	state Exp;
branches;
next	1.13;
commitid	uDAYXKgLnn5vQP48;

1.13
date	2015.01.16.06.40.10;	author deraadt;	state Exp;
branches;
next	1.12;
commitid	Uu5nFG3wCl0LACBb;

1.12
date	2014.11.21.17.49.00;	author mikeb;	state Exp;
branches;
next	1.11;
commitid	lNiE9sUYcBWNesjg;

1.11
date	2014.08.14.12.55.50;	author mpi;	state Exp;
branches;
next	1.10;
commitid	gdOWXDzOPG8ZFusi;

1.10
date	2013.11.21.17.32.13;	author mikeb;	state Exp;
branches;
next	1.9;

1.9
date	2012.12.05.23.20.25;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2012.07.13.20.20.49;	author stsp;	state Exp;
branches;
next	1.7;

1.7
date	2011.03.04.23.48.15;	author fgsch;	state Exp;
branches;
next	1.6;

1.6
date	2008.12.17.19.27.40;	author jcs;	state Exp;
branches;
next	1.5;

1.5
date	2007.08.14.20.33.47;	author bluhm;	state Exp;
branches;
next	1.4;

1.4
date	2007.06.19.05.29.26;	author ray;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.18.17.53.12;	author reyk;	state Exp;
branches;
next	1.2;

1.2
date	2005.05.15.18.26.13;	author reyk;	state Exp;
branches;
next	1.1;

1.1
date	2005.04.12.14.11.49;	author reyk;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Pull in <sys/select.h> for howmany() and NBBY, used by various net*/*.h

ok deraadt@@
@
text
@/*	$OpenBSD: net80211.c,v 1.16 2016/06/05 17:11:42 stsp Exp $	*/

/*
 * Copyright (c) 2005 Reyk Floeter <reyk@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/time.h>
#include <sys/select.h>
#include <sys/socket.h>
#include <sys/file.h>
#include <sys/ioctl.h>

#include <net/if.h>

#include <netinet/in.h>
#include <netinet/if_ether.h>

#include <net80211/ieee80211.h>
#include <net80211/ieee80211_ioctl.h>

#include <err.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include "netstat.h"

/*
 * Dump IEEE802.11 per-interface statistics
 */
void
net80211_ifstats(char *ifname)
{
	struct ifreq ifr;
	struct ieee80211_stats stats;
	int s;

#define	p(f, m)	printf(m, (unsigned long)stats.f, plural(stats.f))

	if ((s = socket(AF_INET, SOCK_DGRAM, 0)) < 0)
		err(1, "socket(AF_INET)");

	ifr.ifr_data = (caddr_t)&stats;
	strlcpy(ifr.ifr_name, ifname, sizeof ifr.ifr_name);

	if (ioctl(s, SIOCG80211STATS, &ifr) < 0)
		err(1, "ioctl(SIOCG80211STATS)");

	printf("ieee80211 on %s:\n", ifr.ifr_name);

	p(is_rx_badversion, "\t%lu input packet%s with bad version\n");
	p(is_rx_tooshort, "\t%lu input packet%s too short\n");
	p(is_rx_wrongbss, "\t%lu input packet%s from wrong bssid\n");
	p(is_rx_dup, "\t%lu input packet duplicate%s discarded\n");
	p(is_rx_wrongdir, "\t%lu input packet%s with wrong direction\n");
	p(is_rx_mcastecho, "\t%lu input multicast echo packet%s discarded\n");
	p(is_rx_notassoc, "\t%lu input packet%s from unassociated station discarded\n");
	p(is_rx_nowep, "\t%lu input encrypted packet%s without wep/wpa config discarded\n");
	p(is_rx_unencrypted, "\t%lu input unencrypted packet%s with wep/wpa config discarded\n");
	p(is_rx_wepfail, "\t%lu input wep/wpa packet%s processing failed\n");
	p(is_rx_decap, "\t%lu input packet decapsulation%s failed\n");
	p(is_rx_mgtdiscard, "\t%lu input management packet%s discarded\n");
	p(is_rx_ctl, "\t%lu input control packet%s discarded\n");
	p(is_rx_rstoobig, "\t%lu input packet%s with truncated rate set\n");
	p(is_rx_elem_missing, "\t%lu input packet%s with missing elements\n");
	p(is_rx_elem_toobig, "\t%lu input packet%s with elements too big\n");
	p(is_rx_elem_toosmall, "\t%lu input packet%s with elements too small\n");
	p(is_rx_badchan, "\t%lu input packet%s with invalid channel\n");
	p(is_rx_chanmismatch, "\t%lu input packet%s with mismatched channel\n");
	p(is_rx_nodealloc, "\t%lu node allocation%s failed\n");
	p(is_rx_ssidmismatch, "\t%lu input packet%s with mismatched ssid\n");
	p(is_rx_auth_unsupported, "\t%lu input packet%s with unsupported auth algorithm\n");
	p(is_rx_auth_fail, "\t%lu input authentication%s failed\n");
	p(is_rx_assoc_bss, "\t%lu input association%s from wrong bssid\n");
	p(is_rx_assoc_notauth, "\t%lu input association%s without authentication\n");
	p(is_rx_assoc_capmismatch, "\t%lu input association%s with mismatched capabilities\n");
	p(is_rx_assoc_norate, "\t%lu input association%s without matching rates\n");
	p(is_rx_assoc_badrsnie, "\t%lu input association%s with bad rsn ie\n");
	p(is_rx_deauth, "\t%lu input deauthentication packet%s\n");
	p(is_rx_disassoc, "\t%lu input disassociation packet%s\n");
	p(is_rx_badsubtype, "\t%lu input packet%s with unknown subtype\n");
	p(is_rx_nombuf, "\t%lu input packet%s failed for lack of mbufs\n");
	p(is_rx_decryptcrc, "\t%lu input decryption%s failed on crc\n");
	p(is_rx_ahdemo_mgt, "\t%lu input ahdemo management packet%s discarded\n");
	p(is_rx_bad_auth, "\t%lu input packet%s with bad auth request\n");
	p(is_rx_eapol_key, "\t%lu input eapol-key packet%s\n");
	p(is_rx_eapol_badmic, "\t%lu input eapol-key packet%s with bad mic\n");
	p(is_rx_eapol_replay, "\t%lu input eapol-key packet%s replayed\n");
	p(is_rx_locmicfail, "\t%lu input packet%s with bad tkip mic\n");
	p(is_rx_remmicfail, "\t%lu input tkip mic failure notification%s\n");
	p(is_rx_unauth, "\t%lu input packet%s on unauthenticated port\n");
	p(is_tx_nombuf, "\t%lu output packet%s failed for lack of mbufs\n");
	p(is_tx_nonode, "\t%lu output packet%s failed for no nodes\n");
	p(is_tx_unknownmgt, "\t%lu output packet%s of unknown management type\n");
	p(is_tx_noauth, "\t%lu output packet%s on unauthenticated port\n");
	p(is_scan_active, "\t%lu active scan%s started\n");
	p(is_scan_passive, "\t%lu passive scan%s started\n");
	p(is_node_timeout, "\t%lu node%s timed out\n");
	p(is_crypto_nomem, "\t%lu failure%s with no memory for crypto ctx\n");
	p(is_ccmp_dec_errs, "\t%lu ccmp decryption error%s\n");
	p(is_ccmp_replays, "\t%lu ccmp replayed frame%s \n");
	p(is_cmac_icv_errs, "\t%lu cmac icv error%s\n");
	p(is_cmac_replays, "\t%lu cmac replayed frame%s\n");
	p(is_tkip_icv_errs, "\t%lu tkip icv error%s\n");
	p(is_tkip_replays, "\t%lu tkip replay%s\n");
	p(is_pbac_errs, "\t%lu pbac error%s\n");
	p(is_ht_nego_no_mandatory_mcs, "\t%lu HT negotiation failure%s because "
	    "peer does not support MCS 0-7\n");
	p(is_ht_nego_no_basic_mcs, "\t%lu HT negotiation failure%s because "
	    "we do not support basic MCS set\n");
	p(is_ht_nego_bad_crypto,
	    "\t%lu HT negotiation failure%s because peer uses bad crypto\n");
	p(is_ht_prot_change, "\t%lu HT protection change%s\n");
	p(is_ht_rx_ba_agreements, "\t%lu new input block ack agreement%s\n");
	p(is_ht_tx_ba_agreements, "\t%lu new output block ack agreement%s\n");
	p(is_ht_rx_frame_below_ba_winstart,
	    "\t%lu input frame%s below block ack window start\n");
	p(is_ht_rx_frame_above_ba_winend,
	    "\t%lu input frame%s above block ack window end\n");
	p(is_ht_rx_ba_window_slide, "\t%lu input block ack window slide%s\n");
	p(is_ht_rx_ba_window_jump, "\t%lu input block ack window jump%s\n");
	p(is_ht_rx_ba_no_buf, "\t%lu duplicate input block ack frame%s\n");
	p(is_ht_rx_ba_frame_lost,
	    "\t%lu expected input block ack frame%s never arrived\n");
	p(is_ht_rx_ba_window_gap_timeout,
	    "\t%lu input block ack window gap%s timed out\n");
	p(is_ht_rx_ba_timeout,
	    "\t%lu input block ack agreement%s timed out\n");
	p(is_ht_tx_ba_timeout,
	    "\t%lu output block ack agreement%s timed out\n");

	close(s);

#undef p
}
@


1.16
log
@In netstat, display correct counter for 'no basic MCS set' error.
ok sthen@@ tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: net80211.c,v 1.15 2016/04/28 14:46:50 stsp Exp $	*/
d21 1
@


1.15
log
@Display block ack window slide counter.
with and ok tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: net80211.c,v 1.14 2016/04/27 11:59:03 stsp Exp $	*/
d120 1
a120 1
	p(is_ht_nego_no_mandatory_mcs, "\t%lu HT negotiation failure%s because "
@


1.14
log
@Make netstat -W show new 802.11n counters. Requires a new kernel.
ok deraadt mpi
@
text
@d1 1
a1 1
/*	$OpenBSD: net80211.c,v 1.13 2015/01/16 06:40:10 deraadt Exp $	*/
d131 1
@


1.13
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: net80211.c,v 1.12 2014/11/21 17:49:00 mikeb Exp $	*/
d117 24
@


1.12
log
@remove pointless if_var.h and socketvar.h includes; ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: net80211.c,v 1.11 2014/08/14 12:55:50 mpi Exp $	*/
d19 1
a19 1
#include <sys/param.h>
@


1.11
log
@No need for <netinet/in_systm.h> nor <netinet/tcpip.h>.
@
text
@d1 1
a1 1
/*	$OpenBSD: net80211.c,v 1.10 2013/11/21 17:32:13 mikeb Exp $	*/
a25 1
#include <net/if_var.h>
@


1.10
log
@split kernel parts of the if.h into a separate header file if_var.h
which allows us to modify ifnet structure in a relatively safe way;
discussed with deraadt, ok mpi
@
text
@d1 1
a1 1
/*	$OpenBSD: net80211.c,v 1.9 2012/12/05 23:20:25 deraadt Exp $	*/
a28 1
#include <netinet/in_systm.h>
@


1.9
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: net80211.c,v 1.8 2012/07/13 20:20:49 stsp Exp $	*/
d26 1
@


1.8
log
@Label node allocation failures as such in netstat -W output.
"Input packets dropped" isn't really a good description of what
happened when we failed to allocate a new node in the net80211 stack.
This allocation doesn't happen for every packet, only for new nodes
that appear in reach of the antenna.
ok net80211 expert department (we have vacancies, apply within)
@
text
@d1 1
a1 1
/*	$OpenBSD: net80211.c,v 1.7 2011/03/04 23:48:15 fgsch Exp $	*/
a18 1
#include <sys/cdefs.h>
@


1.7
log
@kill is_rx_elem_unknown.
damien@@ ok. ports checked by sthen@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: net80211.c,v 1.6 2008/12/17 19:27:40 jcs Exp $	*/
d83 1
a83 1
	p(is_rx_nodealloc, "\t%lu input packet%s dropped\n");
@


1.6
log
@add some newly created stats that are defined in ieee80211_ioctl.h
but not shown here

update some descriptions to show that they are for wpa as well as
wep

input from and ok damien@@
@
text
@d1 1
a1 1
/*	$OpenBSD: net80211.c,v 1.5 2007/08/14 20:33:47 bluhm Exp $	*/
a80 1
	p(is_rx_elem_unknown, "\t%lu input packet%s with unknown elements\n");
@


1.5
log
@Prevent sneaking in unencrypted packets into WEP traffic.
ok damien@@, put it ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: net80211.c,v 1.4 2007/06/19 05:29:26 ray Exp $	*/
d71 3
a73 3
	p(is_rx_nowep, "\t%lu input encrypted packet%s without wep config discarded\n");
	p(is_rx_unencrypted, "\t%lu input unencrypted packet%s with wep config discarded\n");
	p(is_rx_wepfail, "\t%lu input wep packet%s processing failed\n");
d92 1
d100 6
d109 1
d114 6
@


1.4
log
@err(3) was being called but was missing an include, and end: was
unused.

OK markus and itojun
@
text
@d1 1
a1 1
/*	$OpenBSD: net80211.c,v 1.3 2005/12/18 17:53:12 reyk Exp $	*/
d71 2
a72 1
	p(is_rx_nowep, "\t%lu input wep packet%s without wep discarded\n");
@


1.3
log
@Update my e-mail address in the copyright statement, no binary changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: net80211.c,v 1.2 2005/05/15 18:26:13 reyk Exp $	*/
d35 1
a105 1
  end:
@


1.2
log
@simple error message cleanup

ok henning@@, suggested by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: net80211.c,v 1.1 2005/04/12 14:11:49 reyk Exp $	*/
d4 1
a4 1
 * Copyright (c) 2005 Reyk Floeter <reyk@@vantronix.net>
@


1.1
log
@add '-W interface' for 802.11 wireless statistics of the net80211 stack.

ok dlg@@ deraadt@@ jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d52 2
a53 4
	if ((s = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
		perror("Warning: socket(AF_INET)");
		return;
	}
d57 4
a61 5

	if (ioctl(s, SIOCG80211STATS, &ifr) < 0) {
		perror("Warning: ioctl(SIOCG80211STATS)");
		goto end;
	}
@

