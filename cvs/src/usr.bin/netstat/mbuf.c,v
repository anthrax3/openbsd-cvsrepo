head	1.39;
access;
symbols
	OPENBSD_6_2:1.39.0.6
	OPENBSD_6_2_BASE:1.39
	OPENBSD_6_1:1.39.0.4
	OPENBSD_6_1_BASE:1.39
	OPENBSD_6_0:1.37.0.2
	OPENBSD_6_0_BASE:1.37
	OPENBSD_5_9:1.36.0.2
	OPENBSD_5_9_BASE:1.36
	OPENBSD_5_8:1.35.0.6
	OPENBSD_5_8_BASE:1.35
	OPENBSD_5_7:1.35.0.2
	OPENBSD_5_7_BASE:1.35
	OPENBSD_5_6:1.32.0.4
	OPENBSD_5_6_BASE:1.32
	OPENBSD_5_5:1.31.0.18
	OPENBSD_5_5_BASE:1.31
	OPENBSD_5_4:1.31.0.14
	OPENBSD_5_4_BASE:1.31
	OPENBSD_5_3:1.31.0.12
	OPENBSD_5_3_BASE:1.31
	OPENBSD_5_2:1.31.0.10
	OPENBSD_5_2_BASE:1.31
	OPENBSD_5_1_BASE:1.31
	OPENBSD_5_1:1.31.0.8
	OPENBSD_5_0:1.31.0.6
	OPENBSD_5_0_BASE:1.31
	OPENBSD_4_9:1.31.0.4
	OPENBSD_4_9_BASE:1.31
	OPENBSD_4_8:1.31.0.2
	OPENBSD_4_8_BASE:1.31
	OPENBSD_4_7:1.30.0.2
	OPENBSD_4_7_BASE:1.30
	OPENBSD_4_6:1.30.0.4
	OPENBSD_4_6_BASE:1.30
	OPENBSD_4_5:1.29.0.2
	OPENBSD_4_5_BASE:1.29
	OPENBSD_4_4:1.26.0.4
	OPENBSD_4_4_BASE:1.26
	OPENBSD_4_3:1.26.0.2
	OPENBSD_4_3_BASE:1.26
	OPENBSD_4_2:1.24.0.8
	OPENBSD_4_2_BASE:1.24
	OPENBSD_4_1:1.24.0.6
	OPENBSD_4_1_BASE:1.24
	OPENBSD_4_0:1.24.0.4
	OPENBSD_4_0_BASE:1.24
	OPENBSD_3_9:1.24.0.2
	OPENBSD_3_9_BASE:1.24
	OPENBSD_3_8:1.23.0.2
	OPENBSD_3_8_BASE:1.23
	OPENBSD_3_7:1.21.0.4
	OPENBSD_3_7_BASE:1.21
	OPENBSD_3_6:1.21.0.2
	OPENBSD_3_6_BASE:1.21
	OPENBSD_3_5:1.20.0.4
	OPENBSD_3_5_BASE:1.20
	OPENBSD_3_4:1.20.0.2
	OPENBSD_3_4_BASE:1.20
	OPENBSD_3_3:1.18.0.2
	OPENBSD_3_3_BASE:1.18
	OPENBSD_3_2:1.16.0.2
	OPENBSD_3_2_BASE:1.16
	OPENBSD_3_1:1.12.0.2
	OPENBSD_3_1_BASE:1.12
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.10
	OPENBSD_2_8:1.7.0.8
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.6
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.7.0.4
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.2
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.6.0.6
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.4
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.2
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.39
date	2017.02.04.13.17.08;	author jsg;	state Exp;
branches;
next	1.38;
commitid	TULNEFIcyggfWv3w;

1.38
date	2016.10.28.05.46.14;	author dlg;	state Exp;
branches;
next	1.37;
commitid	SgFKe9pqPtNq37zp;

1.37
date	2016.04.04.16.26.00;	author sthen;	state Exp;
branches;
next	1.36;
commitid	NOQPmnaJyaxPCccu;

1.36
date	2015.09.04.08.21.01;	author mpi;	state Exp;
branches;
next	1.35;
commitid	dw01ZIvJb768ayXE;

1.35
date	2015.01.20.18.26.57;	author deraadt;	state Exp;
branches;
next	1.34;
commitid	qRSGCXxt7yQIBAcS;

1.34
date	2015.01.16.06.40.10;	author deraadt;	state Exp;
branches;
next	1.33;
commitid	Uu5nFG3wCl0LACBb;

1.33
date	2014.11.06.12.50.55;	author dlg;	state Exp;
branches;
next	1.32;
commitid	EQh8ErJ4zFhY4Cv3;

1.32
date	2014.07.02.00.12.34;	author dlg;	state Exp;
branches;
next	1.31;
commitid	zNbAzxmEBZMksTSx;

1.31
date	2010.07.08.08.47.07;	author lum;	state Exp;
branches;
next	1.30;

1.30
date	2009.06.25.22.31.18;	author deraadt;	state Exp;
branches;
next	1.29;

1.29
date	2009.01.27.13.49.21;	author claudio;	state Exp;
branches;
next	1.28;

1.28
date	2008.12.04.06.00.47;	author deraadt;	state Exp;
branches;
next	1.27;

1.27
date	2008.12.04.05.59.57;	author deraadt;	state Exp;
branches;
next	1.26;

1.26
date	2007.12.19.01.47.00;	author deraadt;	state Exp;
branches;
next	1.25;

1.25
date	2007.12.11.20.14.45;	author deraadt;	state Exp;
branches;
next	1.24;

1.24
date	2005.12.21.01.40.24;	author millert;	state Exp;
branches;
next	1.23;

1.23
date	2005.05.23.17.35.59;	author marius;	state Exp;
branches;
next	1.22;

1.22
date	2005.03.25.17.01.04;	author jaredy;	state Exp;
branches;
next	1.21;

1.21
date	2004.04.16.23.06.56;	author tedu;	state Exp;
branches;
next	1.20;

1.20
date	2003.08.19.14.30.11;	author mickey;	state Exp;
branches;
next	1.19;

1.19
date	2003.06.03.02.56.13;	author millert;	state Exp;
branches;
next	1.18;

1.18
date	2003.03.21.16.55.23;	author pb;	state Exp;
branches;
next	1.17;

1.17
date	2003.02.01.01.51.31;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2002.06.30.20.27.16;	author angelos;	state Exp;
branches;
next	1.15;

1.15
date	2002.06.24.17.51.05;	author angelos;	state Exp;
branches;
next	1.14;

1.14
date	2002.06.18.23.49.15;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2002.06.09.05.09.09;	author angelos;	state Exp;
branches;
next	1.12;

1.12
date	2002.02.23.01.12.54;	author art;	state Exp;
branches;
next	1.11;

1.11
date	2002.01.17.21.34.58;	author mickey;	state Exp;
branches;
next	1.10;

1.10
date	2002.01.15.22.41.01;	author art;	state Exp;
branches;
next	1.9;

1.9
date	2001.11.19.19.02.15;	author mpech;	state Exp;
branches;
next	1.8;

1.8
date	2001.05.18.02.41.38;	author provos;	state Exp;
branches;
next	1.7;

1.7
date	99.02.27.21.22.19;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	97.07.23.02.50.55;	author denny;	state Exp;
branches;
next	1.5;

1.5
date	97.06.29.21.46.03;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.06.29.20.18.01;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.06.26.05.37.23;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.05.10.13.02.35;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.51;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.51;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.39
log
@Include netinet/in.h for in_addr_t now it has moved out of sys/types.h.
gcc warned about this, clang fatally errored.
@
text
@/*	$OpenBSD: mbuf.c,v 1.38 2016/10/28 05:46:14 dlg Exp $	*/
/*	$NetBSD: mbuf.c,v 1.9 1996/05/07 02:55:03 thorpej Exp $	*/

/*
 * Copyright (c) 1983, 1988, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/socket.h>
#include <sys/queue.h>
#include <sys/mbuf.h>
#include <sys/protosw.h>
#include <sys/pool.h>
#include <sys/sysctl.h>
#include <net/if.h>
#include <netinet/in.h>

#include <errno.h>
#include <limits.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include "netstat.h"

#define	YES	1
typedef int bool;

struct	mbstat mbstat;
struct kinfo_pool mbpool, mclpools[MCLPOOLS];
int	mclp;
char	*mclnames[] = {
	"mcl2k",
	"mcl2k2",
	"mcl4k",
	"mcl8k",
	"mcl9k",
	"mcl12k",
	"mcl16k",
	"mcl64k"
};
char	**mclnamep = mclnames;

static struct mbtypes {
	int	mt_type;
	char	*mt_name;
} mbtypes[] = {
	{ MT_DATA,	"data" },
	{ MT_OOBDATA,	"oob data" },
	{ MT_CONTROL,	"ancillary data" },
	{ MT_HEADER,	"packet headers" },
	{ MT_FTABLE,	"fragment reassembly queue headers" },	/* XXX */
	{ MT_SONAME,	"socket names and addresses" },
	{ MT_SOOPTS,	"socket options" },
	{ 0, 0 }
};

int nmbtypes = sizeof(mbstat.m_mtypes) / sizeof(short);
bool seen[256];			/* "have we seen this type yet?" */

/*
 * Print mbuf statistics.
 */
void
mbpr(void)
{
	unsigned long totmem, totused, totmbufs;
	int totpct;
	int i, mib[4], npools;
	struct kinfo_pool pool;
	struct mbtypes *mp;
	size_t size;

	if (nmbtypes != 256) {
		fprintf(stderr,
		    "%s: unexpected change to mbstat; check source\n",
		    __progname);
		return;
	}

	mib[0] = CTL_KERN;
	mib[1] = KERN_MBSTAT;
	size = sizeof(mbstat);

	if (sysctl(mib, 2, &mbstat, &size, NULL, 0) < 0) {
		printf("Can't retrieve mbuf statistics from the kernel: %s\n",
		    strerror(errno));
		return;
	}

	mib[0] = CTL_KERN;
	mib[1] = KERN_POOL;
	mib[2] = KERN_POOL_NPOOLS;
	size = sizeof(npools);

	if (sysctl(mib, 3, &npools, &size, NULL, 0) < 0) {
		printf("Can't figure out number of pools in kernel: %s\n",
		    strerror(errno));
		return;
	}

	for (i = 1; npools; i++) {
		char name[32];

		mib[0] = CTL_KERN;
		mib[1] = KERN_POOL;
		mib[2] = KERN_POOL_POOL;
		mib[3] = i;
		size = sizeof(pool);
		if (sysctl(mib, 4, &pool, &size, NULL, 0) < 0) {
			if (errno == ENOENT)
				continue;
			printf("error getting pool: %s\n",
			    strerror(errno));
			return;
		}
		npools--;
		mib[2] = KERN_POOL_NAME;
		size = sizeof(name);
		if (sysctl(mib, 4, &name, &size, NULL, 0) < 0) {
			printf("error getting pool name: %s\n",
			    strerror(errno));
			return;
		}

		if (!strncmp(name, "mbufpl", strlen("mbufpl")))
			bcopy(&pool, &mbpool, sizeof(pool));
		else if (mclp < sizeof(mclpools) / sizeof(mclpools[0]) &&
		    !strncmp(name, *mclnamep, strlen(*mclnamep))) {
			bcopy(&pool, &mclpools[mclp++],
			    sizeof(pool));
			mclnamep++;
		}
	}

	totmbufs = 0;
	for (mp = mbtypes; mp->mt_name; mp++)
		totmbufs += (unsigned int)mbstat.m_mtypes[mp->mt_type];
	printf("%lu mbuf%s in use:\n", totmbufs, plural(totmbufs));
	for (mp = mbtypes; mp->mt_name; mp++)
		if (mbstat.m_mtypes[mp->mt_type]) {
			seen[mp->mt_type] = YES;
			printf("\t%u mbuf%s allocated to %s\n",
			    mbstat.m_mtypes[mp->mt_type],
			    plural(mbstat.m_mtypes[mp->mt_type]),
			    mp->mt_name);
		}
	seen[MT_FREE] = YES;
	for (i = 0; i < nmbtypes; i++)
		if (!seen[i] && mbstat.m_mtypes[i]) {
			printf("\t%u mbuf%s allocated to <mbuf type %d>\n",
			    mbstat.m_mtypes[i],
			    plural(mbstat.m_mtypes[i]), i);
		}
	totmem = (mbpool.pr_npages * mbpool.pr_pgsize);
	totused = mbpool.pr_nout * mbpool.pr_size;
	for (i = 0; i < mclp; i++) {
		printf("%u/%lu/%lu mbuf %d byte clusters in use"
		    " (current/peak/max)\n",
		    mclpools[i].pr_nout,
		    (unsigned long)
			(mclpools[i].pr_hiwat * mclpools[i].pr_itemsperpage),
		    (unsigned long)
			(mclpools[i].pr_maxpages * mclpools[i].pr_itemsperpage),
		    mclpools[i].pr_size);
		totmem += (mclpools[i].pr_npages * mclpools[i].pr_pgsize);
		totused += mclpools[i].pr_nout * mclpools[i].pr_size;
	}

	totpct = (totmem == 0) ? 0 : (totused/(totmem / 100));
	printf("%lu Kbytes allocated to network (%d%% in use)\n",
	    totmem / 1024, totpct);
	printf("%lu requests for memory denied\n", mbstat.m_drops);
	printf("%lu requests for memory delayed\n", mbstat.m_wait);
	printf("%lu calls to protocol drain routines\n", mbstat.m_drain);
}
@


1.38
log
@there's a new mbuf cluster pool.
@
text
@d1 1
a1 1
/*	$OpenBSD: mbuf.c,v 1.37 2016/04/04 16:26:00 sthen Exp $	*/
d40 1
@


1.37
log
@Add sys/queue.h where it's needed. Unbreak userland following recent
removal from mbuf.h.  ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mbuf.c,v 1.36 2015/09/04 08:21:01 mpi Exp $	*/
d55 8
a62 1
	"mcl2k", "mcl4k", "mcl8k", "mcl9k", "mcl12k", "mcl16k", "mcl64k"
@


1.36
log
@Fix mbuf memory accounting after recent *8 pool size change.

Use the ``pr_pgsize'' argument instead of assuming that pool page
sizes are identical to the value returned by getpagesize(3).

Issue reported by trondd <trondd AT kagu-tsuchi DOT com> on tech@@.

ok millert@@, tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mbuf.c,v 1.35 2015/01/20 18:26:57 deraadt Exp $	*/
d34 1
@


1.35
log
@Adjust <sys/param.h> comments regarding use of use of MSIZE, or
delete <sys/param.h> if now possible
ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: mbuf.c,v 1.34 2015/01/16 06:40:10 deraadt Exp $	*/
a86 1
	int page_size = getpagesize();
d169 1
a169 1
	totmem = (mbpool.pr_npages * (unsigned long)page_size);
d172 2
a173 1
		printf("%u/%lu/%lu mbuf %d byte clusters in use (current/peak/max)\n",
d175 4
a178 2
		    (u_long)mclpools[i].pr_hiwat * mclpools[i].pr_itemsperpage,
		    (u_long)mclpools[i].pr_maxpages * mclpools[i].pr_itemsperpage,
d180 1
a180 1
		totmem += (mclpools[i].pr_npages * (unsigned long)page_size);
d184 1
a184 1
	totpct = (totmem == 0)? 0 : (totused/(totmem / 100));
@


1.34
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: mbuf.c,v 1.33 2014/11/06 12:50:55 dlg Exp $	*/
a32 2
#include <sys/param.h>	/* MSIZE */
#include <sys/protosw.h>
d35 1
@


1.33
log
@i renamed the mbuf pool.
@
text
@d1 1
a1 1
/*	$OpenBSD: mbuf.c,v 1.32 2014/07/02 00:12:34 dlg Exp $	*/
d33 1
a33 1
#include <sys/param.h>
@


1.32
log
@info about pools is currently given to userland by copying each
pools struct out. however, struct pool in the kernel contains lots
of things that userland probably isnt interested in, like actual
mutexes, and probably shouldnt get easy access to, like pointers
to kernel memory via all the lists/trees.

this implements a kinfo_pool structure that has only the data that
userland needs to know about. it cuts the sysctl code over to
building it from struct pool as required and copying that out
instead, and cuts userland over to only handling kinfo_pool.

the only problem with this is vmstat, which can read kernel images
via kvm, which needs some understanding of struct pool. to cope,
the struct pool definition is guarded by if defined(_KERNEL) ||
defined(_LIBKVM) as inspired by sysctl which needs to do the same
thing sometimes. struct pool itself is generally not visible to
userland though, which is good.

matthew@@ suggested struct kinfo_pool instead of struct pool_info.
the kinfo prefix has precedent.
lots of people liked this.
@
text
@d1 1
a1 1
/*	$OpenBSD: mbuf.c,v 1.31 2010/07/08 08:47:07 lum Exp $	*/
d142 1
a142 1
		if (!strncmp(name, "mbpl", strlen("mbpl")))
@


1.31
log
@Remove references to kvm.
ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mbuf.c,v 1.30 2009/06/25 22:31:18 deraadt Exp $	*/
d52 1
a52 1
struct pool mbpool, mclpools[MCLPOOLS];
d85 1
a85 1
	struct pool pool;
d125 1
a125 1
		size = sizeof(struct pool);
d143 1
a143 1
			bcopy(&pool, &mbpool, sizeof(struct pool));
d147 1
a147 1
			    sizeof(struct pool));
@


1.30
log
@do not use nitems(); ok claudio
@
text
@d1 1
a1 1
/*	$OpenBSD: mbuf.c,v 1.29 2009/01/27 13:49:21 claudio Exp $	*/
a41 1
#include <kvm.h>
a57 2

extern kvm_t *kvmd;
@


1.29
log
@Fix some interger overflows when accounting the used mbuf memory percentage
and while there use a better type for the plural{,es}() functions.
OK henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mbuf.c,v 1.28 2008/12/04 06:00:47 deraadt Exp $	*/
d147 1
a147 1
		else if (mclp < nitems(mclpools) &&
@


1.28
log
@... but without the debug code
@
text
@d1 1
a1 1
/*	$OpenBSD: mbuf.c,v 1.27 2008/12/04 05:59:57 deraadt Exp $	*/
d85 2
a86 1
	int totmem, totused, totmbufs, totpct;
d157 2
a158 2
		totmbufs += mbstat.m_mtypes[mp->mt_type];
	printf("%u mbuf%s in use:\n", totmbufs, plural(totmbufs));
d164 1
a164 1
			    plural((int)mbstat.m_mtypes[mp->mt_type]),
d172 1
a172 1
			    plural((int)mbstat.m_mtypes[i]), i);
d174 1
a174 1
	totmem = (mbpool.pr_npages * page_size);
d177 4
a180 4
		printf("%lu/%lu/%lu mbuf %d byte clusters in use (current/peak/max)\n",
		    (u_long)(mclpools[i].pr_nout),
		    (u_long)(mclpools[i].pr_hiwat * mclpools[i].pr_itemsperpage),
		    (u_long)(mclpools[i].pr_maxpages * mclpools[i].pr_itemsperpage),
d182 1
a182 1
		totmem += (mclpools[i].pr_npages * page_size);
d186 2
a187 2
	totpct = (totmem == 0)? 0 : ((totused * 100)/totmem);
	printf("%u Kbytes allocated to network (%d%% in use)\n",
@


1.27
log
@correctly display information for each of the mbuf cluster pools (which
have different sizes)
ok dlg
@
text
@d1 1
a1 1
/*	$OpenBSD: mbuf.c,v 1.26 2007/12/19 01:47:00 deraadt Exp $	*/
a147 1
			printf("%s\n", name);
@


1.26
log
@delete rcsid crud
@
text
@d1 1
a1 1
/*	$OpenBSD: mbuf.c,v 1.25 2007/12/11 20:14:45 deraadt Exp $	*/
d39 1
d53 6
a58 1
struct pool mbpool, mclpool;
d86 1
a86 1
	int i, mib[4], npools, flag = 0;
d144 1
a144 1
		if (!strncmp(name, "mbpl", strlen("mbpl"))) {
d146 6
a151 7
			flag++;
		} else {
			if (!strncmp(name, "mclpl", strlen("mclpl"))) {
				bcopy(&pool, &mclpool,
				    sizeof(struct pool));
				flag++;
			}
a152 3

		if (flag == 2)
			break;
d174 12
a185 8
	printf("%lu/%lu/%lu mbuf clusters in use (current/peak/max)\n",
	    (u_long)(mclpool.pr_nout),
	    (u_long)(mclpool.pr_hiwat * mclpool.pr_itemsperpage),
	    (u_long)(mclpool.pr_maxpages * mclpool.pr_itemsperpage));
	totmem = (mbpool.pr_npages * page_size) +
	    (mclpool.pr_npages * page_size);
	totused = mbpool.pr_nout * mbpool.pr_size +
	    mclpool.pr_nout * mclpool.pr_size;
@


1.25
log
@mbuf stats are always gotten via sysctl(), so remove old nlist stuff
ok claudio pyr
@
text
@d1 1
a1 1
/*	$OpenBSD: mbuf.c,v 1.24 2005/12/21 01:40:24 millert Exp $	*/
a31 8

#ifndef lint
#if 0
static char sccsid[] = "from: @@(#)mbuf.c	8.1 (Berkeley) 6/6/93";
#else
static char *rcsid = "$OpenBSD: mbuf.c,v 1.24 2005/12/21 01:40:24 millert Exp $";
#endif
#endif /* not lint */
@


1.24
log
@Userland programs should include <errno.h> not <sys/errno.h>
OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mbuf.c,v 1.23 2005/05/23 17:35:59 marius Exp $	*/
d37 1
a37 1
static char *rcsid = "$OpenBSD: mbuf.c,v 1.23 2005/05/23 17:35:59 marius Exp $";
d85 1
a85 1
mbpr(u_long mbaddr, u_long mbpooladdr, u_long mclpooladdr)
@


1.23
log
@remove dead and wrong code.
@
text
@d1 1
a1 1
/*	$OpenBSD: mbuf.c,v 1.22 2005/03/25 17:01:04 jaredy Exp $	*/
d37 1
a37 1
static char *rcsid = "$OpenBSD: mbuf.c,v 1.22 2005/03/25 17:01:04 jaredy Exp $";
a46 1
#include <sys/errno.h>
d48 1
@


1.22
log
@kill unneeded (char *) casts.  ok millert, otto
@
text
@d1 1
a1 1
/*	$OpenBSD: mbuf.c,v 1.21 2004/04/16 23:06:56 tedu Exp $	*/
d37 1
a37 1
static char *rcsid = "$OpenBSD: mbuf.c,v 1.21 2004/04/16 23:06:56 tedu Exp $";
d101 20
a120 6
	if (kvmd == NULL) {
		if (mbaddr == 0) {
			fprintf(stderr, "%s: mbstat: symbol not in namelist\n",
			    __progname);
			return;
		}
d122 2
a123 4
		if (kread(mbaddr, &mbstat, sizeof (mbstat)))
			return;
		if (kread(mbpooladdr, &mbpool, sizeof (mbpool)))
			return;
a124 3
		if (kread(mclpooladdr, &mclpool, sizeof (mclpool)))
			return;
	} else {
d126 8
a133 5
		mib[1] = KERN_MBSTAT;
		size = sizeof(mbstat);

		if (sysctl(mib, 2, &mbstat, &size, NULL, 0) < 0) {
			printf("Can't retrieve mbuf statistics from the kernel: %s\n",
d137 5
a141 8

		mib[0] = CTL_KERN;
		mib[1] = KERN_POOL;
		mib[2] = KERN_POOL_NPOOLS;
		size = sizeof(npools);

		if (sysctl(mib, 3, &npools, &size, NULL, 0) < 0) {
			printf("Can't figure out number of pools in kernel: %s\n",
d146 7
a152 26
		for (i = 1; npools; i++) {
			char name[32];

			mib[0] = CTL_KERN;
			mib[1] = KERN_POOL;
			mib[2] = KERN_POOL_POOL;
			mib[3] = i;
			size = sizeof(struct pool);
			if (sysctl(mib, 4, &pool, &size, NULL, 0) < 0) {
				if (errno == ENOENT)
					continue;
				printf("error getting pool: %s\n",
				    strerror(errno));
				return;
			}
			npools--;
			mib[2] = KERN_POOL_NAME;
			size = sizeof(name);
			if (sysctl(mib, 4, &name, &size, NULL, 0) < 0) {
				printf("error getting pool name: %s\n",
				    strerror(errno));
				return;
			}

			if (!strncmp(name, "mbpl", strlen("mbpl"))) {
				bcopy(&pool, &mbpool, sizeof(struct pool));
a153 6
			} else {
				if (!strncmp(name, "mclpl", strlen("mclpl"))) {
					bcopy(&pool, &mclpool,
					    sizeof(struct pool));
					flag++;
				}
d155 1
d157 2
a158 3
			if (flag == 2)
				break;
		}
@


1.21
log
@print clusters, not pages.  half from millert@@  ok deraadt@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mbuf.c,v 1.20 2003/08/19 14:30:11 mickey Exp $	*/
d37 1
a37 1
static char *rcsid = "$OpenBSD: mbuf.c,v 1.20 2003/08/19 14:30:11 mickey Exp $";
d108 1
a108 1
		if (kread(mbaddr, (char *)&mbstat, sizeof (mbstat)))
d110 1
a110 1
		if (kread(mbpooladdr, (char *)&mbpool, sizeof (mbpool)))
d113 1
a113 1
		if (kread(mclpooladdr, (char *)&mclpool, sizeof (mclpool)))
@


1.20
log
@number of mbuf clusters is not the same as number of pages allocated for 'em; noticed by dsb@@uvm.poi.dvo.ru
@
text
@d1 1
a1 1
/*	$OpenBSD: mbuf.c,v 1.19 2003/06/03 02:56:13 millert Exp $	*/
d37 1
a37 1
static char *rcsid = "$OpenBSD: mbuf.c,v 1.19 2003/06/03 02:56:13 millert Exp $";
d196 4
a199 3
	printf("%lu/%lu/%lu mbuf cluster pages in use (current/peak/max)\n",
	    (u_long)(mclpool.pr_npages - mclpool.pr_nidle),
	    (u_long)mclpool.pr_hiwat, (u_long)mclpool.pr_maxpages);
d202 2
a203 2
	totused = (mbpool.pr_nget - mbpool.pr_nput) * mbpool.pr_size +
	    (mclpool.pr_nget - mclpool.pr_nput) * mclpool.pr_size;
@


1.19
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: mbuf.c,v 1.18 2003/03/21 16:55:23 pb Exp $	*/
d37 1
a37 1
static char *rcsid = "$OpenBSD: mbuf.c,v 1.18 2003/03/21 16:55:23 pb Exp $";
d197 1
a197 1
	    (u_long)(mclpool.pr_nget - mclpool.pr_nput),
@


1.18
log
@
change 'netstat -m' output from:
0/28 mapped pages in use
to
0/14/1024 mbuf cluster pages in use (current/peak/max)

ok henning@@, millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mbuf.c,v 1.17 2003/02/01 01:51:31 deraadt Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static char *rcsid = "$OpenBSD: mbuf.c,v 1.17 2003/02/01 01:51:31 deraadt Exp $";
@


1.17
log
@ansi
@
text
@d1 1
a1 1
/*	$OpenBSD: mbuf.c,v 1.16 2002/06/30 20:27:16 angelos Exp $	*/
d41 1
a41 1
static char *rcsid = "$OpenBSD: mbuf.c,v 1.16 2002/06/30 20:27:16 angelos Exp $";
d200 1
a200 1
	printf("%lu/%lu mapped pages in use\n",
d202 1
a202 1
	    ((u_long)mclpool.pr_npages * mclpool.pr_itemsperpage));
@


1.16
log
@Correctly retrieve mbuf statistics from the kernel.
@
text
@d1 1
a1 1
/*	$OpenBSD: mbuf.c,v 1.15 2002/06/24 17:51:05 angelos Exp $	*/
d41 1
a41 1
static char *rcsid = "$OpenBSD: mbuf.c,v 1.15 2002/06/24 17:51:05 angelos Exp $";
d57 1
d89 1
a89 3
mbpr(mbaddr, mbpooladdr, mclpooladdr)
	u_long mbaddr;
	u_long mbpooladdr, mclpooladdr;
@


1.15
log
@KERN_POOL_POOL, not KERN_POOL_NPOOLS --- I wonder how this was not
observed. From dfa@@solo.ee and dsb@@nt.pin.dvgu.ru
@
text
@d1 1
a1 1
/*	$OpenBSD: mbuf.c,v 1.14 2002/06/18 23:49:15 deraadt Exp $	*/
d41 1
a41 1
static char *rcsid = "$OpenBSD: mbuf.c,v 1.14 2002/06/18 23:49:15 deraadt Exp $";
d121 10
@


1.14
log
@pull in missing includes
@
text
@d1 1
a1 1
/*	$OpenBSD: mbuf.c,v 1.13 2002/06/09 05:09:09 angelos Exp $	*/
d41 1
a41 1
static char *rcsid = "$OpenBSD: mbuf.c,v 1.13 2002/06/09 05:09:09 angelos Exp $";
d123 1
a123 1
		mib[2] = KERN_POOL_POOL;
@


1.13
log
@Begin some sysctl-ization.
@
text
@d1 1
a1 1
/*	$OpenBSD: mbuf.c,v 1.12 2002/02/23 01:12:54 art Exp $	*/
d41 1
a41 1
static char *rcsid = "$OpenBSD: mbuf.c,v 1.12 2002/02/23 01:12:54 art Exp $";
d56 1
@


1.12
log
@No more POOL_EXPOSE.
@
text
@d1 1
a1 1
/*	$OpenBSD: mbuf.c,v 1.11 2002/01/17 21:34:58 mickey Exp $	*/
d41 1
a41 1
static char *rcsid = "$OpenBSD: mbuf.c,v 1.11 2002/01/17 21:34:58 mickey Exp $";
d50 2
d53 1
d64 1
d92 2
a93 1
	int i;
d95 1
d104 65
a168 4
	if (mbaddr == 0) {
		fprintf(stderr, "%s: mbstat: symbol not in namelist\n",
		    __progname);
		return;
a169 7
	if (kread(mbaddr, (char *)&mbstat, sizeof (mbstat)))
		return;
	if (kread(mbpooladdr, (char *)&mbpool, sizeof (mbpool)))
		return;

	if (kread(mclpooladdr, (char *)&mclpool, sizeof (mclpool)))
		return;
@


1.11
log
@evil, annoying spaces and tabs
@
text
@d1 1
a1 1
/*	$OpenBSD: mbuf.c,v 1.10 2002/01/15 22:41:01 art Exp $	*/
d41 1
a41 1
static char *rcsid = "$OpenBSD: mbuf.c,v 1.10 2002/01/15 22:41:01 art Exp $";
a43 2

#define __POOL_EXPOSE
@


1.10
log
@minor simplification in preparation for a future change.
@
text
@d1 1
a1 1
/*	$OpenBSD: mbuf.c,v 1.9 2001/11/19 19:02:15 mpech Exp $	*/
d41 1
a41 1
static char *rcsid = "$OpenBSD: mbuf.c,v 1.9 2001/11/19 19:02:15 mpech Exp $";
d97 1
a97 1
		        __progname);
d133 2
a134 2
	       (u_long)(mclpool.pr_nget - mclpool.pr_nput),
	       ((u_long)mclpool.pr_npages * mclpool.pr_itemsperpage));
d137 1
a137 1
	totused = (mbpool.pr_nget - mbpool.pr_nput) * mbpool.pr_size + 
@


1.9
log
@kill more registers

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: mbuf.c,v 1.8 2001/05/18 02:41:38 provos Exp $	*/
d41 1
a41 1
static char *rcsid = "$OpenBSD: mbuf.c,v 1.8 2001/05/18 02:41:38 provos Exp $";
d92 1
d135 2
a136 2
	totmem = (mbpool.pr_npages << mbpool.pr_pageshift) +
	    (mclpool.pr_npages << mclpool.pr_pageshift);
@


1.8
log
@adapt to use pool
@
text
@d1 1
a1 1
/*	$OpenBSD: mbuf.c,v 1.7 1999/02/27 21:22:19 deraadt Exp $	*/
d41 1
a41 1
static char *rcsid = "$OpenBSD: mbuf.c,v 1.7 1999/02/27 21:22:19 deraadt Exp $";
d89 3
a91 3
	register int totmem, totused, totmbufs, totpct;
	register int i;
	register struct mbtypes *mp;
@


1.7
log
@do not divide by zero; helbig@@Informatik.BA-Stuttgart.DE
@
text
@d1 1
a1 1
/*	$OpenBSD: mbuf.c,v 1.6 1997/07/23 02:50:55 denny Exp $	*/
d41 1
a41 1
static char *rcsid = "$OpenBSD: mbuf.c,v 1.6 1997/07/23 02:50:55 denny Exp $";
d45 2
d51 1
d61 2
a71 5
	{ MT_SOCKET,	"socket structures" },			/* XXX */
	{ MT_PCB,	"protocol control blocks" },		/* XXX */
	{ MT_RTABLE,	"routing table entries" },		/* XXX */
	{ MT_HTABLE,	"IMP host table entries" },		/* XXX */
	{ MT_ATABLE,	"address resolution tables" },
a74 2
	{ MT_RIGHTS,	"access rights" },
	{ MT_IFADDR,	"interface addresses" },		/* XXX */
d85 1
a85 1
mbpr(mbaddr)
d87 1
d89 1
a89 1
	register int totmem, totfree, totmbufs;
d106 6
d132 7
a138 3
		mbstat.m_clusters - mbstat.m_clfree, mbstat.m_clusters);
	totmem = totmbufs * MSIZE + mbstat.m_clusters * MCLBYTES;
	totfree = mbstat.m_clfree * MCLBYTES;
d140 1
a140 2
	    totmem / 1024,
	    totmem ? (totmem - totfree) * 100 / totmem : 100);
@


1.6
log
@Update for new <sys/mbuf.h>
@
text
@d1 1
a1 1
/*	$OpenBSD: mbuf.c,v 1.5 1997/06/29 21:46:03 millert Exp $	*/
d41 1
a41 1
static char *rcsid = "$OpenBSD: mbuf.c,v 1.5 1997/06/29 21:46:03 millert Exp $";
d131 2
a132 1
		totmem / 1024, (totmem - totfree) * 100 / totmem);
@


1.5
log
@Use correct spacing on both 32bit and 64bit machines.
@
text
@d1 1
a1 1
/*	$OpenBSD: mbuf.c,v 1.4 1997/06/29 20:18:01 millert Exp $	*/
d41 1
a41 1
static char *rcsid = "$OpenBSD: mbuf.c,v 1.4 1997/06/29 20:18:01 millert Exp $";
d67 5
d75 2
d110 1
a110 1
	printf("%u mbufs in use:\n", totmbufs);
d114 4
a117 2
			printf("\t%u mbufs allocated to %s\n",
			    mbstat.m_mtypes[mp->mt_type], mp->mt_name);
d122 3
a124 2
			printf("\t%u mbufs allocated to <mbuf type %d>\n",
			    mbstat.m_mtypes[i], i);
@


1.4
log
@Mostly clean -Wall + 64bit issues.
@
text
@d1 1
a1 1
/*	$OpenBSD: mbuf.c,v 1.3 1996/06/26 05:37:23 deraadt Exp $	*/
d41 1
a41 1
static char *rcsid = "$OpenBSD: mbuf.c,v 1.3 1996/06/26 05:37:23 deraadt Exp $";
d50 1
@


1.3
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: mbuf.c,v 1.9 1996/05/07 02:55:03 thorpej Exp $	*/
d41 1
a41 1
static char *rcsid = "$OpenBSD: mbuf.c,v 1.9 1996/05/07 02:55:03 thorpej Exp $";
d115 1
a115 1
	printf("%u/%u mapped pages in use\n",
d121 3
a123 3
	printf("%u requests for memory denied\n", mbstat.m_drops);
	printf("%u requests for memory delayed\n", mbstat.m_wait);
	printf("%u calls to protocol drain routines\n", mbstat.m_drain);
@


1.2
log
@if_name/if_unit -> if_xname/if_softc
network list is a TAILQ
@
text
@d1 1
d41 1
a41 1
static char *rcsid = "$NetBSD: mbuf.c,v 1.9 1996/05/07 02:55:03 thorpej Exp $";
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: mbuf.c,v 1.8 1995/10/03 21:42:41 thorpej Exp $	*/
d40 1
a40 1
static char *rcsid = "$NetBSD: mbuf.c,v 1.8 1995/10/03 21:42:41 thorpej Exp $";
d87 2
a88 1
		    "%s: unexpected change to mbstat; check source\n", prog);
d92 2
a93 1
		fprintf(stderr, "%s: mbstat: symbol not in namelist\n", prog);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
