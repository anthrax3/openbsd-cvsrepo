head	1.27;
access;
symbols
	OPENBSD_6_0:1.27.0.4
	OPENBSD_6_0_BASE:1.27
	OPENBSD_5_9:1.27.0.2
	OPENBSD_5_9_BASE:1.27
	OPENBSD_5_8:1.25.0.28
	OPENBSD_5_8_BASE:1.25
	OPENBSD_5_7:1.25.0.20
	OPENBSD_5_7_BASE:1.25
	OPENBSD_5_6:1.25.0.24
	OPENBSD_5_6_BASE:1.25
	OPENBSD_5_5:1.25.0.22
	OPENBSD_5_5_BASE:1.25
	OPENBSD_5_4:1.25.0.18
	OPENBSD_5_4_BASE:1.25
	OPENBSD_5_3:1.25.0.16
	OPENBSD_5_3_BASE:1.25
	OPENBSD_5_2:1.25.0.14
	OPENBSD_5_2_BASE:1.25
	OPENBSD_5_1_BASE:1.25
	OPENBSD_5_1:1.25.0.12
	OPENBSD_5_0:1.25.0.10
	OPENBSD_5_0_BASE:1.25
	OPENBSD_4_9:1.25.0.8
	OPENBSD_4_9_BASE:1.25
	OPENBSD_4_8:1.25.0.6
	OPENBSD_4_8_BASE:1.25
	OPENBSD_4_7:1.25.0.2
	OPENBSD_4_7_BASE:1.25
	OPENBSD_4_6:1.25.0.4
	OPENBSD_4_6_BASE:1.25
	OPENBSD_4_5:1.24.0.6
	OPENBSD_4_5_BASE:1.24
	OPENBSD_4_4:1.24.0.4
	OPENBSD_4_4_BASE:1.24
	OPENBSD_4_3:1.24.0.2
	OPENBSD_4_3_BASE:1.24
	OPENBSD_4_2:1.23.0.4
	OPENBSD_4_2_BASE:1.23
	OPENBSD_4_1:1.23.0.2
	OPENBSD_4_1_BASE:1.23
	OPENBSD_4_0:1.22.0.2
	OPENBSD_4_0_BASE:1.22
	OPENBSD_3_9:1.19.0.12
	OPENBSD_3_9_BASE:1.19
	OPENBSD_3_8:1.19.0.10
	OPENBSD_3_8_BASE:1.19
	OPENBSD_3_7:1.19.0.8
	OPENBSD_3_7_BASE:1.19
	OPENBSD_3_6:1.19.0.6
	OPENBSD_3_6_BASE:1.19
	OPENBSD_3_5:1.19.0.4
	OPENBSD_3_5_BASE:1.19
	OPENBSD_3_4:1.19.0.2
	OPENBSD_3_4_BASE:1.19
	OPENBSD_3_3:1.18.0.20
	OPENBSD_3_3_BASE:1.18
	OPENBSD_3_2:1.18.0.18
	OPENBSD_3_2_BASE:1.18
	OPENBSD_3_1:1.18.0.16
	OPENBSD_3_1_BASE:1.18
	OPENBSD_3_0:1.18.0.14
	OPENBSD_3_0_BASE:1.18
	OPENBSD_2_9_BASE:1.18
	OPENBSD_2_9:1.18.0.12
	OPENBSD_2_8:1.18.0.10
	OPENBSD_2_8_BASE:1.18
	OPENBSD_2_7:1.18.0.8
	OPENBSD_2_7_BASE:1.18
	OPENBSD_2_6:1.18.0.6
	OPENBSD_2_6_BASE:1.18
	OPENBSD_2_5:1.18.0.4
	OPENBSD_2_5_BASE:1.18
	OPENBSD_2_4:1.18.0.2
	OPENBSD_2_4_BASE:1.18
	OPENBSD_2_3:1.13.0.2
	OPENBSD_2_3_BASE:1.13
	OPENBSD_2_2:1.12.0.2
	OPENBSD_2_2_BASE:1.12;
locks; strict;
comment	@ * @;


1.27
date	2015.10.09.01.37.08;	author deraadt;	state Exp;
branches;
next	1.26;
commitid	sbrB3Q5CNxcwZpfU;

1.26
date	2015.10.07.14.10.50;	author deraadt;	state Exp;
branches;
next	1.25;
commitid	1IAtCrZ2aY0ux6Wj;

1.25
date	2009.05.01.10.36.48;	author chl;	state Exp;
branches;
next	1.24;

1.24
date	2007.09.10.07.42.26;	author sobrado;	state Exp;
branches;
next	1.23;

1.23
date	2007.02.12.19.10.08;	author otto;	state Exp;
branches;
next	1.22;

1.22
date	2006.05.09.17.44.53;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2006.05.09.17.03.51;	author ray;	state Exp;
branches;
next	1.20;

1.20
date	2006.05.08.22.33.04;	author ray;	state Exp;
branches;
next	1.19;

1.19
date	2003.06.10.22.20.50;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	98.08.24.14.45.33;	author kstailey;	state Exp;
branches;
next	1.17;

1.17
date	98.08.24.14.43.16;	author kstailey;	state Exp;
branches;
next	1.16;

1.16
date	98.08.24.14.42.29;	author kstailey;	state Exp;
branches;
next	1.15;

1.15
date	98.07.08.04.36.37;	author mickey;	state Exp;
branches;
next	1.14;

1.14
date	98.05.18.19.12.03;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	97.11.18.22.52.10;	author niklas;	state Exp;
branches;
next	1.12;

1.12
date	97.09.23.20.39.11;	author niklas;	state Exp;
branches;
next	1.11;

1.11
date	97.09.23.20.21.28;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	97.09.23.20.13.21;	author niklas;	state Exp;
branches;
next	1.9;

1.9
date	97.08.18.20.27.53;	author kstailey;	state Exp;
branches;
next	1.8;

1.8
date	97.07.01.15.09.36;	author kstailey;	state Exp;
branches;
next	1.7;

1.7
date	97.06.29.19.20.31;	author kstailey;	state Exp;
branches;
next	1.6;

1.6
date	97.06.29.19.19.38;	author kstailey;	state Exp;
branches;
next	1.5;

1.5
date	97.06.29.19.01.18;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.06.28.04.56.49;	author grr;	state Exp;
branches;
next	1.3;

1.3
date	97.06.20.12.18.57;	author kstailey;	state Exp;
branches;
next	1.2;

1.2
date	97.06.20.10.09.41;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	97.06.12.15.22.37;	author kstailey;	state Exp;
branches;
next	;


desc
@@


1.27
log
@Change all tame callers to namechange to pledge(2).
@
text
@/*
 * $OpenBSD: readlink.c,v 1.26 2015/10/07 14:10:50 deraadt Exp $
 *
 * Copyright (c) 1997
 *	Kenneth Stailey (hereinafter referred to as the author)
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <err.h>
#include <errno.h>
#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

static void	usage(void);

int
main(int argc, char *argv[])
{
	char buf[PATH_MAX];
	int n, ch, nflag = 0, fflag = 0;
	extern int optind;

	if (pledge("stdio rpath", NULL) == -1)
		err(1, "pledge");

	while ((ch = getopt(argc, argv, "fn")) != -1)
		switch (ch) {
		case 'f':
			fflag = 1;
			break;
		case 'n':
			nflag = 1;
			break;
		default:
			usage();
		}
	argc -= optind;
	argv += optind;

	if (argc != 1)
		usage();

	n = strlen(argv[0]);
	if (n > PATH_MAX - 1) {
		fprintf(stderr,
		    "readlink: filename longer than PATH_MAX-1 (%d)\n",
		    PATH_MAX - 1);
		exit(1);
	}

	if (fflag) {
		if (realpath(argv[0], buf) == NULL)
			err(1, "%s", argv[0]);
	} else {
		if ((n = readlink(argv[0], buf, sizeof buf-1)) < 0)
			exit(1);
		buf[n] = '\0';
	}

	printf("%s", buf);
	if (!nflag)
		putchar('\n');
	exit(0);
}

static void
usage(void)
{
	(void)fprintf(stderr, "usage: readlink [-fn] file\n");
	exit(1);
}
@


1.26
log
@tame "stdio rpath", which covers readlink() and realpath()
ok semarie
@
text
@d2 1
a2 1
 * $OpenBSD: readlink.c,v 1.25 2009/05/01 10:36:48 chl Exp $
d47 2
a48 2
	if (tame("stdio rpath", NULL) == -1)
		err(1, "tame");
@


1.25
log
@add missing header needed by err()

ok otto@@ millert@@ gilles@@
@
text
@d2 1
a2 1
 * $OpenBSD: readlink.c,v 1.24 2007/09/10 07:42:26 sobrado Exp $
d46 3
@


1.24
log
@optional flags must be sorted and enclosed in single brackets,
as style(9) suggests; usage() should be a function; minor KNF fix

ok otto@@
@
text
@d2 1
a2 1
 * $OpenBSD: readlink.c,v 1.23 2007/02/12 19:10:08 otto Exp $
d30 2
a32 1
#include <errno.h>
@


1.23
log
@if -f is not used, readlink should not print anything on error, but if
-f is used, handle errors like it should. ok'ed by deraadt@@ some time
ago but then forgotten
@
text
@d2 1
a2 1
 * $OpenBSD: readlink.c,v 1.22 2006/05/09 17:44:53 deraadt Exp $
d37 2
d55 1
a55 3
			(void)fprintf(stderr,
			    "usage: readlink [-n] [-f] symlink\n");
			exit(1);
d60 2
a61 4
	if (argc != 1) {
		fprintf(stderr, "usage: readlink [-n] [-f] symlink\n");
		exit(1);
	}
d66 2
a67 2
			"readlink: filename longer than PATH_MAX-1 (%d)\n",
			PATH_MAX - 1);
d84 7
@


1.22
log
@back out change that busted how the tree builds
not approved by the right people, not tested by the right people,
and work done by people who don't know how to test what they write
you know who you are -- stop screwing with things you refuse to test
completely.
@
text
@d2 1
a2 1
 * $OpenBSD: readlink.c,v 1.19 2003/06/10 22:20:50 deraadt Exp $
d73 4
a76 3
	if (fflag)
		realpath(argv[0], buf);
	else {
@


1.21
log
@Sync usage() with man page.

OK jmc@@.
@
text
@d2 1
a2 1
 * $OpenBSD: readlink.c,v 1.20 2006/05/08 22:33:04 ray Exp $
a29 1
#include <err.h>
d31 1
a36 2
__dead void usage(void);

a39 1
	int ch, n, fflag = 0, nflag = 0;
d41 2
d53 3
a55 1
			usage();
d60 12
a71 2
	if (argc != 1)
		usage();
d73 3
a75 8
	if (strlen(argv[0]) > PATH_MAX - 1)
		errx(1, "filename longer than PATH_MAX-1 (%d)",
		    PATH_MAX - 1);

	if (fflag) {
		if (realpath(argv[0], buf) == NULL)
			err(1, "%s", argv[0]);
	} else {
d77 1
a77 1
			err(1, "%s", argv[0]);
a84 9
}

void
usage(void)
{
	extern char *__progname;

	fprintf(stderr, "usage: %s [-fn] symlink\n", __progname);
	exit(1);
@


1.20
log
@This change:
 - checks for realpath(3) failure
 - adds usage()
 - uses <err.h>
 - KNF
 - prevents saving strlen() return value into an int

OK kjell@@.
@
text
@d2 1
a2 1
 * $OpenBSD: readlink.c,v 1.19 2003/06/10 22:20:50 deraadt Exp $
d86 1
a86 1
	fprintf(stderr, "usage: %s [-n] [-f] symlink\n", __progname);
@


1.19
log
@mostly ansi cleanup; pval ok
@
text
@d2 1
a2 1
 * $OpenBSD: readlink.c,v 1.18 1998/08/24 14:45:33 kstailey Exp $
d30 1
a31 1
#include <errno.h>
d37 2
d42 1
a43 2
	int n, ch, nflag = 0, fflag = 0;
	extern int optind;
d54 1
a54 3
			(void)fprintf(stderr,
			    "usage: readlink [-n] [-f] symlink\n");
			exit(1);
d59 2
a60 12
	if (argc != 1) {
		fprintf(stderr, "usage: readlink [-n] [-f] symlink\n");
		exit(1);
	}

	n = strlen(argv[0]);
	if (n > PATH_MAX - 1) {
		fprintf(stderr,
			"readlink: filename longer than PATH_MAX-1 (%d)\n",
			PATH_MAX - 1);
		exit(1);
	}
d62 8
a69 3
	if (fflag)
		realpath(argv[0], buf);
	else {
d71 1
a71 1
			exit(1);
d79 9
@


1.18
log
@do not mangle output of realpath()
@
text
@d2 1
a2 1
 * $OpenBSD: readlink.c,v 1.17 1998/08/24 14:43:16 kstailey Exp $
d38 1
a38 3
main(argc, argv)
	int argc;
	char **argv;
@


1.17
log
@do not mangle output of realpath()
@
text
@d2 1
a2 1
 * $OpenBSD: readlink.c,v 1.16 1998/08/24 14:42:29 kstailey Exp $
d75 1
a75 1
	if (fflag) {
d77 4
a80 1
		n = strlen(buf);
a81 3
	else if ((n = readlink(argv[0], buf, sizeof buf-1)) < 0)
		exit(1);
	buf[n] = '\0';
@


1.16
log
@do not mangle output of realpath()
@
text
@d2 1
a2 1
 * $OpenBSD: readlink.c,v 1.15 1998/07/08 04:36:37 mickey Exp $
d75 1
a75 1
	if (fflag)
d77 3
a79 1
	else if ((n = readlink(argv[0], buf, sizeof buf-1)) < 0) {
d81 1
a81 2
		buf[n] = '\0';
	}
@


1.15
log
@use fprintf everytime for consitancy; help !ansi compilers as well
@
text
@d2 1
a2 1
 * $OpenBSD: readlink.c,v 1.14 1998/05/18 19:12:03 deraadt Exp $
d77 1
a77 1
	else if ((n = readlink(argv[0], buf, sizeof buf-1)) < 0)
d79 2
a80 1
	buf[n] = '\0';
@


1.14
log
@readlink len-1
@
text
@d2 1
a2 1
 * $OpenBSD: readlink.c,v 1.13 1997/11/18 22:52:10 niklas Exp $
d68 6
a73 3
	if (n > PATH_MAX - 1)
		errx(1, "filename longer than PATH_MAX-1 (%d)\n",
		    PATH_MAX - 1);
@


1.13
log
@readlink does not necessarily NUL-terminate
@
text
@d2 1
a2 1
 * $OpenBSD: readlink.c,v 1.12 1997/09/23 20:39:11 niklas Exp $
d74 1
a74 1
	else if ((n = readlink(argv[0], buf, PATH_MAX)) < 0)
@


1.12
log
@Stupid me reinventing the wheel.  Use realpath(3).
@
text
@d2 1
a2 1
 * $OpenBSD: readlink.c,v 1.11 1997/09/23 20:21:28 deraadt Exp $
d76 1
@


1.11
log
@strncpy
@
text
@d2 1
a2 1
 * $OpenBSD: readlink.c,v 1.10 1997/09/23 20:13:21 niklas Exp $
d33 1
a36 2
void canonicalize __P((const char *, char *));

d73 1
a73 1
		canonicalize(argv[0], buf);
a80 58
}

void
canonicalize(path, newpath)
	const char *path;
	char *newpath;
{
	int n;
	char *p, *np, *lp, c  ;
	char target[PATH_MAX];

	strcpy(newpath, path);
	for (;;) {
		p = np = newpath;

		/*
		 * If absolute path, skip the root slash now so we won't
		 * think of this as a NULL component.
		 */
		if (*p == '/')
			p++;

		/*
		 * loop through all components of the path until a link is
		 * found then expand it, if no link is found we are ready.
		 */
		for (; *p; lp = ++p) {
			while (*p && *p != '/')
				p++;
			c = *p;
			*p = '\0';
			n = readlink(newpath, target, PATH_MAX);
			*p = c;
			if (n > 0 || errno != EINVAL)
				break;
		}
		if (!*p && n < 0 && errno == EINVAL)
			break;
		if (n < 0)
			err(1, "%s", newpath);
		target[n] = '\0';
#ifdef DEBUG
		fprintf(stderr, "%.*s -> %s : ", p - newpath, newpath, target);
#endif
		if (*target == '/') {
			bcopy(p, newpath + n, strlen(p) + 1);
		        bcopy(target, newpath, n);
		} else {
			bcopy(p, lp + n, strlen(p) + 1);
			bcopy(target, lp, n);
		}
#ifdef DEBUG
		fprintf(stderr, "%s\n", newpath);
#endif
		strncpy(target, newpath, sizeof target-1);
		target[sizeof target-1] = '\0';
		path = target;
	}
@


1.10
log
@Add -f option to follow all symlinks recursively in a pathname
@
text
@d2 1
a2 1
 * $OpenBSD: readlink.c,v 1.9 1997/08/18 20:27:53 kstailey Exp $
d136 2
a137 1
		strcpy(target, newpath);
@


1.9
log
@use "limits.h" not "sys/syslimits.h"
@
text
@d2 1
a2 1
 * $OpenBSD: readlink.c,v 1.8 1997/07/01 15:09:36 kstailey Exp $
d31 1
d33 1
d36 2
d40 2
a41 2
int argc;
char **argv;
d44 1
a44 1
	int n, ch, nflag = 0;
d47 1
a47 1
	while ((ch = getopt(argc, argv, "n")) != -1)
d49 3
d57 1
a57 1
			    "usage: readlink [-n] symlink\n");
d64 1
a64 1
		fprintf(stderr, "usage: readlink [-n] symlink\n");
d68 8
a75 1
	if ((n = readlink(argv[0], buf, PATH_MAX)) < 0)
a77 1
	buf[n] = '\0';
d82 57
@


1.8
log
@Change default behavior to print newline after contents of symlink.
Add "-n" flag to get old behavior.
@
text
@d2 1
a2 1
 * $OpenBSD: readlink.c,v 1.7 1997/06/29 19:20:31 kstailey Exp $
d30 1
a30 1
#include <sys/syslimits.h>
@


1.7
log
@don't include <err.h>
@
text
@d2 1
a2 1
 * $OpenBSD: readlink.c,v 1.6 1997/06/29 19:19:38 kstailey Exp $
d40 2
a41 1
	int n;
d43 15
a57 2
	if (argc != 2) {
		fprintf(stderr, "usage: readlink symlink");
d61 1
a61 1
	if ((n = readlink(argv[1], buf, PATH_MAX)) < 0)
d66 2
@


1.6
log
@more p's in fprintf
@
text
@d2 1
a2 1
 * $OpenBSD: readlink.c,v 1.5 1997/06/29 19:01:18 deraadt Exp $
a32 1
#include <err.h>
@


1.5
log
@cannot use errx for usage
@
text
@d2 1
a2 1
 * $OpenBSD: readlink.c,v 1.4 1997/06/28 04:56:49 grr Exp $
d44 1
a44 1
		frintf(stderr, "usage: readlink symlink");
@


1.4
log
@RTFM
@
text
@d2 1
a2 1
 * $OpenBSD: readlink.c,v 1.3 1997/06/20 12:18:57 kstailey Exp $
d43 4
a46 2
	if (argc != 2)
		errx(1, "usage: readlink symlink");
@


1.3
log
@Copyright (29 lines of copyright for 21 lines of code) and tag
@
text
@d2 1
a2 1
 * $OpenBSD$
d41 1
d46 1
a46 1
	if (readlink(argv[1], buf, PATH_MAX) < 0)
d48 3
a50 2
	else
		printf("%s", buf);
@


1.2
log
@Wall
@
text
@d1 29
@


1.1
log
@goodbye perl
@
text
@d4 1
@
