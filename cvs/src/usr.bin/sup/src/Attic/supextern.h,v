head	1.10;
access;
symbols
	OPENBSD_4_8:1.9.0.6
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.4
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.8.0.24
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.22
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.20
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.18
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.16
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.14
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.12
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.10
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.8
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.7.0.6
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.16
	OPENBSD_2_8:1.2.0.14
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.12
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.10
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.8
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.6
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.4
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.2
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.1.0.2
	OPENBSD_2_1_BASE:1.1;
locks; strict;
comment	@ * @;


1.10
date	2010.10.18.20.54.00;	author deraadt;	state dead;
branches;
next	1.9;

1.9
date	2009.05.09.12.02.17;	author chl;	state Exp;
branches;
next	1.8;

1.8
date	2003.04.15.07.21.09;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.17.19.42.33;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.16.21.27.54;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.05.15.56.04;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.04.22.16.16;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.02.22.56.53;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.09.16.11.01.22;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	97.04.01.07.35.41;	author todd;	state Exp;
branches;
next	;


desc
@@


1.10
log
@sup is no longer used. reminded by pirofti and jmc
@
text
@/*     $OpenBSD: supextern.h,v 1.9 2009/05/09 12:02:17 chl Exp $  */

/* atoo.c */
unsigned int atoo(char *);

#if 0
/* ci.c */
int ci(char *, FILE *, int, CIENTRY *, char *, char *);
#endif

/* errmsg.c */
const char *errmsg(int);

/* expand.c */
int expand(char *, char **, int);

/* ffilecopy.c */
int ffilecopy(FILE *, FILE *);

/* filecopy.c */
int filecopy(int, int );

/* log.c */
void logopen(char *);
void logquit(int, char *, ...);
void logerr(char *, ...);
void loginfo(char *, ...);
#ifdef LIBWRAP
void logdeny(char *, ...);
void logallow(char *, ...);
#endif

/* netcryptvoid.c */
int netcrypt(char *);
int getcryptbuf(int);
void decode(char *, char *, int);
void encode(char *, char *, int);

/* nxtarg.c */
char *nxtarg(char **, char *);

/* path.c */
void path(char *, char *, int, char *, int);

/* quit.c */
void quit(int, char *, ...);

/* read_line.c */
char *read_line(FILE *, size_t *, size_t *, const char[3], int);

/* run.c */
int run(char *, ...);
int runv(char *, char **);
int runp(char *, ...);
int runvp(char *, char **);
int runio(char *const[], const char *, const char *, const char *);
int runiofd(char *const[], const int, const int, const int);

/* scan.c */
int getrelease(char *);
void makescanlists(void);
void getscanlists(void);
void cdprefix(char *);

/* scm.c */
int lock_host_file(char *);
int servicesetup(char *);
int service(void);
int serviceprep(void);
int servicekill(void);
int serviceend(void);
int dobackoff(int *, int *);
int request(char *, char *, int *);
int requestend(void);
char *remotehost(void);
int thishost(char *);
int samehost(void);
int matchhost(char *);
int scmerr(int, char *, ...);
int byteswap(int);

/* scmio.c */
int writemsg(int);
int writemend(void);
int writeint(int);
int writestring(char *);
int writefile(int);
int writemnull(int);
int writemint(int, int );
int writemstr(int, char *);
int prereadcount(int *);
int readflush(void);
int readmsg(int);
int readmend(void);
int readskip(void);
int readint(int *);
int readstring(char **);
int readfile(int);
int readmnull(int);
int readmint(int, int *);
int readmstr(int, char **);
void crosspatch(void);

/* skipto.c */
char *skipto(char *, char *);
char *skipover(char *, char *);

/* stree.c */
void Tfree(TREE **);
TREE *Tinsert(TREE **, char *, int);
TREE *Tsearch(TREE *, char *);
TREE *Tlookup(TREE *, char *);
int Trprocess(TREE *, int (*)(TREE *, void *), void *);
int Tprocess(TREE *, int (*)(TREE *, void *), void *);
#ifdef DEBUG
void Tprint(TREE *, char *);
#endif

/* supcmeat.c */
int getonehost(TREE *, void *);
TREE *getcollhost(int *, int *, long *, int *);
void getcoll(void);
int signon(TREE *, int, int *);
int setup(TREE *);
void suplogin(void);
void listfiles(void);
void recvfiles(void);
int prepare(char *, int, int *, struct stat *);
int recvdir(TREE *, int, struct stat *);
int recvsym(TREE *, int, struct stat *);
int recvreg(TREE *, int, struct stat *);
int copyfile(char *, char *);
void finishup(int);
void done(int, char *, ...);
void goaway(char *, ...);

/* supcmisc.c */
void prtime(void);
int establishdir(char *);
int makedir(char *, int, struct stat *);
int estabd(char *, char *);
void ugconvert(char *, char *, uid_t *, gid_t *, int *);
void notify(char *, ...);
void lockout(int);
char *fmttime(time_t);

/* supcname.c */
void getnams(void);

/* supcparse.c */
int parsecoll(COLLECTION *, char *, char *);
time_t getwhen(char *, char *);
int putwhen(char *, time_t);

/* supmsg.c */
int msgsignon(void);
int msgsignonack(void);
int msgsetup(void);
int msgsetupack(void);
int msgcrypt(void);
int msgcryptok(void);
int msglogin(void);
int msglogack(void);
int msgrefuse(void);
int msglist(void);
int msgneed(void);
int msgdeny(void);
int msgsend(void);
int msgrecv(int (*)(TREE *, va_list), ...);
int msgdone(void);
int msggoaway(void);
int msgxpatch(void);
int msgcompress(void);

/* vprintf.c */
/* XXX already in system headers included already - but with different
   argument declarations! */
#if 0
int vprintf(const char *, va_list);
int vfprintf(FILE *, const char *, va_list);
int vsprintf(char *, const char *, va_list);
int vsnprintf(char *, size_t, const char *, va_list);
#endif
@


1.9
log
@add #ifdef DEBUG blocks around functions only used when DEBUG is defined.

from tobias@@

ok millert@@ tobias@@
@
text
@d1 1
a1 1
/*     $OpenBSD: supextern.h,v 1.8 2003/04/15 07:21:09 deraadt Exp $  */
@


1.8
log
@a bit of string cleaning
@
text
@d1 1
a1 1
/*     $OpenBSD: supextern.h,v 1.7 2002/02/17 19:42:33 millert Exp $  */
d115 1
d117 1
@


1.7
log
@Manual cleanup of remaining userland __P use (excluding packages maintained outside the tree)
@
text
@d1 1
a1 1
/*     $OpenBSD: supextern.h,v 1.6 2002/02/16 21:27:54 millert Exp $  */
d43 1
a43 1
void path(char *, char *, char *, int);
@


1.6
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 9
/*     $OpenBSD: supextern.h,v 1.5 2001/05/05 15:56:04 millert Exp $  */

#ifndef __P
#ifdef __STDC__
#define __P(a)	a
#else
#define	__P(a) ()
#endif
#endif
d113 2
a114 2
int Trprocess __P((TREE *, int (*)(TREE *, void *), void *));
int Tprocess __P((TREE *, int (*)(TREE *, void *), void *));
d167 1
a167 1
int msgrecv __P((int (*)(TREE *, va_list), ...));
@


1.5
log
@Fix Makefile.sunos5.gcc so that it builds sup correctly on Solaris 8
Fix some -Wall found on Solaris
Fix some uid_t/gid_t stuff I missed before
@
text
@d1 1
a1 1
/*     $OpenBSD: supextern.h,v 1.4 2001/05/04 22:16:16 millert Exp $  */
d12 1
a12 1
unsigned int atoo __P((char *));
d16 1
a16 1
int ci __P((char *, FILE *, int, CIENTRY *, char *, char *));
d20 1
a20 1
const char *errmsg __P((int));
d23 1
a23 1
int expand __P((char *, char **, int));
d26 1
a26 1
int ffilecopy __P((FILE *, FILE *));
d29 1
a29 1
int filecopy __P((int, int ));
d32 4
a35 4
void logopen __P((char *));
void logquit __P((int, char *, ...));
void logerr __P((char *, ...));
void loginfo __P((char *, ...));
d37 2
a38 2
void logdeny __P((char *, ...));
void logallow __P((char *, ...));
d42 4
a45 4
int netcrypt __P((char *));
int getcryptbuf __P((int));
void decode __P((char *, char *, int));
void encode __P((char *, char *, int));
d48 1
a48 1
char *nxtarg __P((char **, char *));
d51 1
a51 1
void path __P((char *, char *, char *, int));
d54 1
a54 1
void quit __P((int, char *, ...));
d57 1
a57 1
char *read_line __P((FILE *, size_t *, size_t *, const char[3], int));
d60 6
a65 6
int run __P((char *, ...));
int runv __P((char *, char **));
int runp __P((char *, ...));
int runvp __P((char *, char **));
int runio __P((char *const[], const char *, const char *, const char *));
int runiofd __P((char *const[], const int, const int, const int));
d68 4
a71 4
int getrelease __P((char *));
void makescanlists __P((void));
void getscanlists __P((void));
void cdprefix __P((char *));
d74 15
a88 15
int lock_host_file __P((char *));
int servicesetup __P((char *));
int service __P((void));
int serviceprep __P((void));
int servicekill __P((void));
int serviceend __P((void));
int dobackoff __P((int *, int *));
int request __P((char *, char *, int *));
int requestend __P((void));
char *remotehost __P((void));
int thishost __P((char *));
int samehost __P((void));
int matchhost __P((char *));
int scmerr __P((int, char *, ...));
int byteswap __P((int));
d91 20
a110 20
int writemsg __P((int));
int writemend __P((void));
int writeint __P((int));
int writestring __P((char *));
int writefile __P((int));
int writemnull __P((int));
int writemint __P((int, int ));
int writemstr __P((int, char *));
int prereadcount __P((int *));
int readflush __P((void));
int readmsg __P((int));
int readmend __P((void));
int readskip __P((void));
int readint __P((int *));
int readstring __P((char **));
int readfile __P((int));
int readmnull __P((int));
int readmint __P((int, int *));
int readmstr __P((int, char **));
void crosspatch __P((void));
d113 2
a114 2
char *skipto __P((char *, char *));
char *skipover __P((char *, char *));
d117 4
a120 4
void Tfree __P((TREE **));
TREE *Tinsert __P((TREE **, char *, int));
TREE *Tsearch __P((TREE *, char *));
TREE *Tlookup __P((TREE *, char *));
d123 1
a123 1
void Tprint __P((TREE *, char *));
d126 16
a141 16
int getonehost __P((TREE *, void *));
TREE *getcollhost __P((int *, int *, long *, int *));
void getcoll __P((void));
int signon __P((TREE *, int, int *));
int setup __P((TREE *));
void suplogin __P((void));
void listfiles __P((void));
void recvfiles __P((void));
int prepare __P((char *, int, int *, struct stat *));
int recvdir __P((TREE *, int, struct stat *));
int recvsym __P((TREE *, int, struct stat *));
int recvreg __P((TREE *, int, struct stat *));
int copyfile __P((char *, char *));
void finishup __P((int));
void done __P((int, char *, ...));
void goaway __P((char *, ...));
d144 8
a151 8
void prtime __P((void));
int establishdir __P((char *));
int makedir __P((char *, int, struct stat *));
int estabd __P((char *, char *));
void ugconvert __P((char *, char *, uid_t *, gid_t *, int *));
void notify __P((char *, ...));
void lockout __P((int));
char *fmttime __P((time_t));
d154 1
a154 1
void getnams __P((void));
d157 3
a159 3
int parsecoll __P((COLLECTION *, char *, char *));
time_t getwhen __P((char *, char *));
int putwhen __P((char *, time_t));
d162 13
a174 13
int msgsignon __P((void));
int msgsignonack __P((void));
int msgsetup __P((void));
int msgsetupack __P((void));
int msgcrypt __P((void));
int msgcryptok __P((void));
int msglogin __P((void));
int msglogack __P((void));
int msgrefuse __P((void));
int msglist __P((void));
int msgneed __P((void));
int msgdeny __P((void));
int msgsend __P((void));
d176 4
a179 4
int msgdone __P((void));
int msggoaway __P((void));
int msgxpatch __P((void));
int msgcompress __P((void));
d185 4
a188 4
int vprintf __P((const char *, va_list));
int vfprintf __P((FILE *, const char *, va_list));
int vsprintf __P((char *, const char *, va_list));
int vsnprintf __P((char *, size_t, const char *, va_list));
@


1.4
log
@o kill register
o lots of KNF
o passes -Wall
o fix some [ug]id_t vs. int issues
o use strlcpy/strlcat in favor of strncpy/strncat
o use mem* routines everywhere instead of old b* ones
o marked several questionable things for later fixing
o kill ci.c and cvt.c -- we don't use them
o kill read_line.c since it requires fgetln() (bad for portability)
o kill salloc.c since it is the same as strup()
o Replaced some #ifdef __OpenBSD__ with better tests
o remaining problems: malloc return values are rarely checked, select misuse
@
text
@d1 1
a1 1
/*     $OpenBSD: supextern.h,v 1.3 2001/05/02 22:56:53 millert Exp $  */
d148 1
a148 1
void ugconvert __P((char *, char *, int *, int *, int *));
@


1.3
log
@Sync with NetBSD.  Notable changes:
 o Add libwrap support to supfilesrv, conditioned by #ifdef LIBWRAP
   (on by default). <bouyer@@netbsd.org>
 o Renamed '-l' (the 'live' mode) to '-d' and '-l' is now used to
   enable logging of successfull connections. <bouyer@@netbsd.org>
 o Don't botch varargs: the are not always an array of void * in the stack...
   Write a separate function to convert a list of function parameters to
   explain why execv failed. <christos@@netbsd.org>
 o When in compress mode, don't overwrite the destination file directly,
   write a temp file and use rename when it is done. (From James Mathiesen
   <james@@deshaw.com>)
 o Rename errno variable to error to avoid collision with errno.h and remove
   explicit extern of errno (we get it from errno.h) <mycroft@@netbsd.org>
 o Cleanup unsigned char vs. char
 o Add -u flag, that prevents sup from attempting to restore a and m times
   on the received files.
 o Replace the provided read_line function with calls to the fparseln function
   in libutil.  Maintain compatibility on machines without fparseln through
   the NEED_READ_LINE define.
 o Rename login() to suplogin() to avoid name collition in util.h
 o If rmdir() fails, chmod the path to have r/w/x perms and run "rm -rf"
 o avoid last.temp filename collision by using rel-suffix
 o When creating directories, make sure you remove previous non-directories
   before doing so, otherwise sup fails.
 o Add -q flag to supscan for quiet operation.
@
text
@d1 1
a1 1
/*     $OpenBSD: supextern.h,v 1.2 1997/09/16 11:01:22 deraadt Exp $  */
a66 3
/* salloc.c */
char *salloc __P((const char *));

d74 1
@


1.2
log
@strcpy whacking; ci.c and expand.c need more work
@
text
@d1 1
a1 1
/*     $OpenBSD: supextern.h,v 1.1 1997/04/01 07:35:41 todd Exp $  */
d20 1
a20 1
char *errmsg __P((int));
d36 4
d56 3
d65 1
d68 1
a68 1
char *salloc __P((char *));
d133 1
a133 1
void login __P((void));
d148 1
d184 3
d191 1
@


1.1
log
@This merges in the latest NetBSD sup source.
- removed $Log: ...$ tags to not waste space in the repository
- now doesn't segfault on the alpha!

Note:
To compile sup on systems other than *BSD, you'll need a copy of
vis.c, vis.h, daemon.c, and sys/cdefs.h.  At least the first two
(for OSF/1).

From NetBSD changelog description (for credit where due):
.... 1996/12/23 19:42:05  christos
- add missing prototypes.
- fix function call inconsistencies
- fix int <-> long and pointer conversions
It should run now on 64 bit machines...

....  1996/12/31 18:08:00  christos
64 bit patches (mostly long -> time_t) from Matthew Jacob (?)
sup now works on the alpha!
@
text
@d1 1
a1 1
/*     $OpenBSD: $  */
d47 1
a47 1
void path __P((char *, char *, char *));
@
