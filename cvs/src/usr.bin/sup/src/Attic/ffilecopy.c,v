head	1.7;
access;
symbols
	OPENBSD_4_8:1.6.0.38
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.34
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.36
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.32
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.30
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.28
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.26
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.24
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.22
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.20
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.18
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.16
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.14
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.12
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.10
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.8
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.6
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.4
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.18
	OPENBSD_2_8:1.5.0.16
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.14
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.12
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.10
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.8
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.6
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.4
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.7
date	2010.10.18.20.54.00;	author deraadt;	state dead;
branches;
next	1.6;

1.6
date	2001.05.04.22.16.15;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.04.01.07.35.03;	author todd;	state Exp;
branches;
next	1.4;

1.4
date	96.12.04.08.21.00;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.08.22.00.34.49;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.39.40;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.12.16.11.46.45;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.7
log
@sup is no longer used. reminded by pirofti and jmc
@
text
@/*	$OpenBSD: ffilecopy.c,v 1.6 2001/05/04 22:16:15 millert Exp $	*/

/*
 * Copyright (c) 1991 Carnegie Mellon University
 * All Rights Reserved.
 * 
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator   or   Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the rights
 * to redistribute these changes.
 */
/*  ffilecopy  --  very fast buffered file copy
 *
 *  Usage:  i = ffilecopy (here,there)
 *	int i;
 *	FILE *here, *there;
 *
 *  Ffilecopy is a very fast routine to copy the rest of a buffered
 *  input file to a buffered output file.  Here and there are open
 *  buffers for reading and writing (respectively); ffilecopy
 *  performs a file-copy faster than you should expect to do it
 *  yourself.  Ffilecopy returns 0 if everything was OK; EOF if
 *  there was any error.  Normally, the input file will be left in
 *  EOF state (feof(here) will return TRUE), and the output file will be
 *  flushed (i.e. all data on the file rather in the core buffer).
 *  It is not necessary to flush the output file before ffilecopy.
 *
 *  HISTORY
 * 20-Nov-79  Steven Shafer (sas) at Carnegie-Mellon University
 *	Created for VAX.
 *
 */

#include <stdio.h>
#include "supcdefs.h"
#include "supextern.h"

int
ffilecopy(here,there)
	FILE *here, *there;
{
	int i, herefile, therefile;

	herefile = fileno(here);
	therefile = fileno(there);

	if (fflush(there) == EOF)		/* flush pending output */
		return (EOF);

#ifdef _FSTDIO
	if ((here->_r) > 0) {			/* flush buffered input */
		i = write(therefile, here->_p, here->_r);
		if (i != here->_r)
			return (EOF);
		here->_p = here->_bf._base;
		here->_r = 0;
	}
#else
	if ((here->_cnt) > 0) {			/* flush buffered input */
		i = write(therefile, here->_ptr, here->_cnt);
		if (i != here->_cnt)
			return (EOF);
		here->_ptr = here->_base;
		here->_cnt = 0;
	}
#endif /* _FSTDIO */

	i = filecopy(herefile, therefile);	/* fast file copy */
	if (i < 0)
		return (EOF);

#ifdef _FSTDIO
	(here->_flags) |= __SEOF;		/* indicate EOF */
#else
	(here->_flag) |= _IOEOF;		/* indicate EOF */
#endif
	return (0);
}
@


1.6
log
@o kill register
o lots of KNF
o passes -Wall
o fix some [ug]id_t vs. int issues
o use strlcpy/strlcat in favor of strncpy/strncat
o use mem* routines everywhere instead of old b* ones
o marked several questionable things for later fixing
o kill ci.c and cvt.c -- we don't use them
o kill read_line.c since it requires fgetln() (bad for portability)
o kill salloc.c since it is the same as strup()
o Replaced some #ifdef __OpenBSD__ with better tests
o remaining problems: malloc return values are rarely checked, select misuse
@
text
@d1 1
a1 1
/*	$OpenBSD: ffilecopy.c,v 1.5 1997/04/01 07:35:03 todd Exp $	*/
@


1.5
log
@This merges in the latest NetBSD sup source.
- removed $Log: ...$ tags to not waste space in the repository
- now doesn't segfault on the alpha!

Note:
To compile sup on systems other than *BSD, you'll need a copy of
vis.c, vis.h, daemon.c, and sys/cdefs.h.  At least the first two
(for OSF/1).

From NetBSD changelog description (for credit where due):
.... 1996/12/23 19:42:05  christos
- add missing prototypes.
- fix function call inconsistencies
- fix int <-> long and pointer conversions
It should run now on 64 bit machines...

....  1996/12/31 18:08:00  christos
64 bit patches (mostly long -> time_t) from Matthew Jacob (?)
sup now works on the alpha!
@
text
@d1 1
a1 1
/*	$OpenBSD: ffilecopy.c,v 1.4 1996/12/04 08:21:00 niklas Exp $	*/
d53 3
a55 2
int ffilecopy (here,there)
FILE *here, *there;
d57 1
a57 1
	register int i, herefile, therefile;
d62 1
a62 1
	if (fflush (there) == EOF)		/* flush pending output */
d65 1
a65 1
#if	defined(__386BSD__) || defined(__NetBSD__) || defined(__OpenBSD__) || defined(__bsdi__)
d67 3
a69 2
		i = write (therefile, here->_p, here->_r);
		if (i != here->_r)  return (EOF);
d75 3
a77 2
		i = write (therefile, here->_ptr, here->_cnt);
		if (i != here->_cnt)  return (EOF);
d81 1
a81 3
#endif
	i = filecopy (herefile, therefile);	/* fast file copy */
	if (i < 0)  return (EOF);
d83 5
a87 1
#if	defined(__386BSD__) || defined(__NetBSD__) || defined(__OpenBSD__) || defined(__bsdi__)
@


1.4
log
@Add support for BSD/OS
@
text
@d1 1
a1 1
/*	$OpenBSD: ffilecopy.c,v 1.3 1996/08/22 00:34:49 deraadt Exp $	*/
d50 2
a51 1
int filecopy();
@


1.3
log
@__OpenBSD__
@
text
@d1 1
a1 1
/*	$OpenBSD: ffilecopy.c,v 1.2 1996/06/26 05:39:40 deraadt Exp $	*/
d63 1
a63 1
#if	defined(__386BSD__) || defined(__NetBSD__) || defined(__OpenBSD__)
d81 1
a81 1
#if	defined(__386BSD__) || defined(__NetBSD__) || defined(__OpenBSD__)
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d63 1
a63 1
#if	defined(__386BSD__) || defined(__NetBSD__)
d81 1
a81 1
#if	defined(__386BSD__) || defined(__NetBSD__)
@


1.1
log
@add sup to the tree
@
text
@d1 2
@
