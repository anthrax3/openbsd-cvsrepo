head	1.12;
access;
symbols
	OPENBSD_4_8:1.11.0.6
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.4
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.10.0.30
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.28
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.26
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.24
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.22
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.20
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.18
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.16
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.14
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.12
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.10
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.8
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.10.0.6
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.4
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.10
	OPENBSD_2_8:1.6.0.8
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.6
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.6.0.4
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.2
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.5.0.6
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.4
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.12
date	2010.10.18.20.54.00;	author deraadt;	state dead;
branches;
next	1.11;

1.11
date	2009.05.09.12.02.17;	author chl;	state Exp;
branches;
next	1.10;

1.10
date	2002.02.17.19.42.33;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.02.16.21.27.54;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2001.05.04.22.16.16;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2001.04.29.21.52.15;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	99.01.09.19.32.34;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.09.16.11.01.18;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.04.01.07.35.27;	author todd;	state Exp;
branches;
next	1.3;

1.3
date	97.01.17.07.13.21;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.39.48;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.12.16.11.46.53;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.12
log
@sup is no longer used. reminded by pirofti and jmc
@
text
@/*	$OpenBSD: stree.c,v 1.11 2009/05/09 12:02:17 chl Exp $	*/

/*
 * Copyright (c) 1992 Carnegie Mellon University
 * All Rights Reserved.
 * 
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie Mellon
 * the rights to redistribute these changes.
 */
/*
 * stree.c -- SUP Tree Routines
 *
 **********************************************************************
 * HISTORY
 * Revision 1.4  92/08/11  12:06:32  mrt
 * 	Added copyright. Delinted
 * 	[92/08/10            mrt]
 * 
 * 
 * Revision 1.3  89/08/15  15:30:57  bww
 * 	Changed code in Tlookup to Tsearch for each subpart of path.
 * 	Added indent formatting code to Tprint.
 * 	From "[89/06/24            gm0w]" at CMU.
 * 	[89/08/15            bww]
 * 
 * 20-May-87  Glenn Marcy (gm0w) at Carnegie-Mellon University
 *	Added code to please lint.
 *
 * 29-Dec-85  Glenn Marcy (gm0w) at Carnegie-Mellon University
 *	Added code to initialize new fields.  Added Tfree routine.
 *
 * 27-Sep-85  Glenn Marcy (gm0w) at Carnegie-Mellon University
 *	Created.
 *
 **********************************************************************
 */

#include <libc.h>
#include <c.h>
#include <sys/param.h>
#include "supcdefs.h"
#include "supextern.h"

#define Static		static		/* comment for debugging */

Static TREE *Tmake(char *);
Static TREE *Trotll(TREE *, TREE *);
Static TREE *Trotlh(TREE *, TREE *);
Static TREE *Trothl(TREE *, TREE *);
Static TREE *Trothh(TREE *, TREE *);
Static void Tbalance(TREE **);
Static TREE *Tinsertavl(TREE **, char *, int, int *);
Static int Tsubprocess(TREE *, int, int (*f )(TREE *, void *), void *);
#ifdef DEBUG
Static int Tprintone(TREE *, void *);
#endif


/*************************************************************
 ***    T R E E   P R O C E S S I N G   R O U T I N E S    ***
 *************************************************************/

void
Tfree(t)
	TREE **t;
{
	if (*t == NULL)
		return;
	Tfree(&((*t)->Tlink));
	Tfree(&((*t)->Texec));
	Tfree(&((*t)->Tlo));
	Tfree(&((*t)->Thi));
	if ((*t)->Tname)
		free((*t)->Tname);
	if ((*t)->Tuser)
		free((*t)->Tuser);
	if ((*t)->Tgroup)
		free((*t)->Tgroup);
	free(*t);
	*t = NULL;
}

Static TREE *
Tmake(p)
	char *p;
{
	TREE *t;

	t = (TREE *) malloc(sizeof(TREE));
	if (t != NULL) {
		t->Tname = (p == NULL) ? NULL : strdup(p);
		t->Tflags = 0;
		t->Tuid = 0;
		t->Tgid = 0;
		t->Tuser = NULL;
		t->Tgroup = NULL;
		t->Tmode = 0;
		t->Tctime = 0;
		t->Tmtime = 0;
		t->Tlink = NULL;
		t->Texec = NULL;
		t->Tbf = 0;
		t->Tlo = NULL;
		t->Thi = NULL;
	}
	return (t);
}

Static TREE *
Trotll(tp, tl)
	TREE *tp, *tl;
{

	tp->Tlo = tl->Thi;
	tl->Thi = tp;
	tp->Tbf = tl->Tbf = 0;
	return(tl);
}

Static TREE *
Trotlh (tp,tl)
	TREE *tp, *tl;
{
	TREE *th;

	th = tl->Thi;
	tp->Tlo = th->Thi;
	tl->Thi = th->Tlo;
	th->Thi = tp;
	th->Tlo = tl;
	tp->Tbf = tl->Tbf = 0;
	if (th->Tbf == 1)
		tp->Tbf = -1;
	else if (th->Tbf == -1)
		tl->Tbf = 1;
	th->Tbf = 0;
	return (th);
}

Static TREE *
Trothl(tp, th)
	TREE *tp, *th;
{
	TREE *tl;

	tl = th->Tlo;
	tp->Thi = tl->Tlo;
	th->Tlo = tl->Thi;
	tl->Tlo = tp;
	tl->Thi = th;
	tp->Tbf = th->Tbf = 0;
	if (tl->Tbf == -1)
		tp->Tbf = 1;
	else if (tl->Tbf == 1)
		th->Tbf = -1;
	tl->Tbf = 0;
	return (tl);
}

Static TREE *
Trothh(tp, th)
	TREE *tp, *th;
{

	tp->Thi = th->Tlo;
	th->Tlo = tp;
	tp->Tbf = th->Tbf = 0;
	return (th);
}

Static void
Tbalance(t)
	TREE **t;
{

	if ((*t)->Tbf < 2 && (*t)->Tbf > -2)
		return;
	if ((*t)->Tbf > 0) {
		if ((*t)->Tlo->Tbf > 0)
			*t = Trotll(*t, (*t)->Tlo);
		else
			*t = Trotlh(*t, (*t)->Tlo);
	} else {
		if ((*t)->Thi->Tbf > 0)
			*t = Trothl(*t, (*t)->Thi);
		else
			*t = Trothh(*t, (*t)->Thi);
	}
}

Static TREE *
Tinsertavl(t, p, find, dh)
	TREE **t;
	char *p;
	int find;
	int *dh;
{
	TREE *newt;
	int cmp;
	int deltah;

	if (*t == NULL) {
		if ((*t = Tmake(p)) != NULL)
			*dh = 1;
		return (*t);
	}
	if ((cmp = strcmp(p, (*t)->Tname)) == 0) {
		if (!find)
			return (NULL);	/* node already exists */
		*dh = 0;
		return (*t);
	} else if (cmp < 0) {
	    if ((newt = Tinsertavl(&((*t)->Tlo), p, find, &deltah)) == NULL)
		    return (NULL);
	    (*t)->Tbf += deltah;
	} else {
		if ((newt = Tinsertavl(&((*t)->Thi), p, find, &deltah)) == NULL)
			return (NULL);
		(*t)->Tbf -= deltah;
	}
	Tbalance(t);
	if ((*t)->Tbf == 0)
		deltah = 0;
	*dh = deltah;
	return (newt);
}

TREE *
Tinsert(t, p, find)
	TREE **t;
	char *p;
	int find;
{
	int deltah;

	if (p != NULL && p[0] == '.' && p[1] == '/') {
		p += 2;
		while (*p == '/')
			p++;
		if (*p == 0)
			p = ".";
	}
	return (Tinsertavl(t, p, find, &deltah));
}

TREE *
Tsearch(t, p)
	TREE *t;
	char *p;
{
	TREE *x;
	int cmp;

	x = t;
	while (x) {
		cmp = strcmp(p, x->Tname);
		if (cmp == 0)
			return (x);
		if (cmp < 0)
			x = x->Tlo;
		else
			x = x->Thi;
	}
	return (NULL);
}

TREE *
Tlookup (t, p)
	TREE *t;
	char *p;
{
	TREE *x;
	char buf[MAXPATHLEN];

	if (p == NULL)
		return (NULL);
	if (p[0] == '.' && p[1] == '/') {
		p += 2;
		while (*p == '/')
			p++;
		if (*p == 0)
			p = ".";
	}
	if ((x = Tsearch(t, p)) != NULL)
		return (x);
	if (*p != '/' && (x = Tsearch(t, ".")) != NULL)
		return (x);
	(void) strlcpy(buf, p, sizeof(buf));
	while ((p = strrchr(buf, '/')) != NULL) {
		while (p >= buf && *(p-1) == '/')
			p--;
		if (p == buf)
			*(p+1) = '\0';
		else
			*p = '\0';
		if ((x = Tsearch(t, buf)) != NULL)
			return (x);
		if (p == buf)
			break;
	}
	return (NULL);
}

Static int process_level;

Static int
Tsubprocess (t, reverse, f, argp)
	TREE *t;
	int reverse;
	int (*f)(TREE *, void *);
	void *argp;
{
	int x = SCMOK;

	process_level++;
	if (reverse ? t->Thi : t->Tlo)
		x = Tsubprocess(reverse ? t->Thi : t->Tlo, reverse, f, argp);
	if (x == SCMOK) {
		x = (*f)(t, argp);
		if (x == SCMOK) {
			if (reverse ? t->Tlo : t->Thi)
				x = Tsubprocess (reverse ? t->Tlo : t->Thi,
						 reverse, f, argp);
		}
	}
	process_level--;
	return (x);
}

/* VARARGS2 */
int
Trprocess(t, f, args)
	TREE *t;
	int (*f)(TREE *, void *);
	void *args;
{
	if (t == NULL)
		return (SCMOK);
	process_level = 0;
	return (Tsubprocess(t, TRUE, f, args));
}

/* VARARGS2 */
int
Tprocess(t, f, args)
	TREE *t;
	int (*f)(TREE *, void *);
	void *args;
{
	if (t == NULL)
		return (SCMOK);
	process_level = 0;
	return (Tsubprocess(t, FALSE, f, args));
}

#if DEBUG
Static int
Tprintone(t, v)
	TREE *t;
	void *v;
{
	int i;
	for (i = 0; i < (process_level*2); i++)
		(void) putchar(' ');
	printf("Node at %p name '%s' flags %o hi %p lo %p\n",
	    t, t->Tname, t->Tflags, t->Thi, t->Tlo);
	return (SCMOK);
}

void
Tprint(t, p)		/* print tree -- for debugging */
	TREE *t;
	char *p;
{

	printf("%s\n",p);
	(void) Tprocess(t,Tprintone, NULL);
	printf("End of tree\n");
	(void) fflush(stdout);
}
#endif
@


1.11
log
@add #ifdef DEBUG blocks around functions only used when DEBUG is defined.

from tobias@@

ok millert@@ tobias@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stree.c,v 1.10 2002/02/17 19:42:33 millert Exp $	*/
@


1.10
log
@Manual cleanup of remaining userland __P use (excluding packages maintained outside the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: stree.c,v 1.9 2002/02/16 21:27:54 millert Exp $	*/
d71 1
d73 1
d373 1
d398 1
@


1.9
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: stree.c,v 1.8 2001/05/04 22:16:16 millert Exp $	*/
d70 1
a70 1
Static int Tsubprocess __P((TREE *, int, int (*f )(TREE *, void *), void *));
@


1.8
log
@o kill register
o lots of KNF
o passes -Wall
o fix some [ug]id_t vs. int issues
o use strlcpy/strlcat in favor of strncpy/strncat
o use mem* routines everywhere instead of old b* ones
o marked several questionable things for later fixing
o kill ci.c and cvt.c -- we don't use them
o kill read_line.c since it requires fgetln() (bad for portability)
o kill salloc.c since it is the same as strup()
o Replaced some #ifdef __OpenBSD__ with better tests
o remaining problems: malloc return values are rarely checked, select misuse
@
text
@d1 1
a1 1
/*	$OpenBSD: stree.c,v 1.7 2001/04/29 21:52:15 millert Exp $	*/
d63 7
a69 7
Static TREE *Tmake __P((char *));
Static TREE *Trotll __P((TREE *, TREE *));
Static TREE *Trotlh __P((TREE *, TREE *));
Static TREE *Trothl __P((TREE *, TREE *));
Static TREE *Trothh __P((TREE *, TREE *));
Static void Tbalance __P((TREE **));
Static TREE *Tinsertavl __P((TREE **, char *, int, int *));
d71 1
a71 1
Static int Tprintone __P((TREE *, void *));
d325 1
a325 1
	int (*f) __P((TREE *, void *));
d349 1
a349 1
	int (*f) __P((TREE *, void *));
d362 1
a362 1
	int (*f) __P((TREE *, void *));
@


1.7
log
@Add a bunch of old revision history comments that we are missing to
make diffing easier.  No code changes...
@
text
@d1 1
a1 1
/*	$OpenBSD: stree.c,v 1.6 1999/01/09 19:32:34 millert Exp $	*/
d79 2
a80 2
Tfree (t)
register TREE **t;
d82 13
a94 9
	if (*t == NULL)  return;
	Tfree (&((*t)->Tlink));
	Tfree (&((*t)->Texec));
	Tfree (&((*t)->Tlo));
	Tfree (&((*t)->Thi));
	if ((*t)->Tname)  free ((*t)->Tname);
	if ((*t)->Tuser)  free ((*t)->Tuser);
	if ((*t)->Tgroup)  free ((*t)->Tgroup);
	free (*(char **)t);
d98 3
a100 3
Static
TREE *Tmake (p)
char *p;
d102 3
a104 2
	register TREE *t;
	t = (TREE *) malloc (sizeof (TREE));
d106 1
a106 1
		t->Tname = (p == NULL) ? NULL : salloc (p);
d124 60
a183 58
Static
TREE *Trotll (tp,tl)
register TREE *tp,*tl;
{
    tp->Tlo = tl->Thi;
    tl->Thi = tp;
    tp->Tbf = tl->Tbf = 0;
    return(tl);
}

Static
TREE *Trotlh (tp,tl)
register TREE *tp,*tl;
{
    register TREE *th;

    th = tl->Thi;
    tp->Tlo = th->Thi;
    tl->Thi = th->Tlo;
    th->Thi = tp;
    th->Tlo = tl;
    tp->Tbf = tl->Tbf = 0;
    if (th->Tbf == 1)
	tp->Tbf = -1;
    else if (th->Tbf == -1)
	tl->Tbf = 1;
    th->Tbf = 0;
    return(th);
}

Static
TREE *Trothl (tp,th)
register TREE *tp,*th;
{
    register TREE *tl;

    tl = th->Tlo;
    tp->Thi = tl->Tlo;
    th->Tlo = tl->Thi;
    tl->Tlo = tp;
    tl->Thi = th;
    tp->Tbf = th->Tbf = 0;
    if (tl->Tbf == -1)
	tp->Tbf = 1;
    else if (tl->Tbf == 1)
	th->Tbf = -1;
    tl->Tbf = 0;
    return(tl);
}

Static
TREE *Trothh (tp,th)
register TREE *tp,*th;
{
    tp->Thi = th->Tlo;
    th->Tlo = tp;
    tp->Tbf = th->Tbf = 0;
    return(th);
d187 2
a188 2
Tbalance (t)
TREE **t;
d190 22
a211 21
    if ((*t)->Tbf < 2 && (*t)->Tbf > -2)
	return;
    if ((*t)->Tbf > 0) {
	if ((*t)->Tlo->Tbf > 0)
	    *t = Trotll(*t, (*t)->Tlo);
	else
	    *t = Trotlh(*t, (*t)->Tlo);
    } else {
	if ((*t)->Thi->Tbf > 0)
	    *t = Trothl(*t, (*t)->Thi);
	else
	    *t = Trothh(*t, (*t)->Thi);
    }
}

Static
TREE *Tinsertavl (t,p,find,dh)
TREE **t;
char *p;
int find;
int *dh;
d213 2
a214 2
	register TREE *newt;
	register int cmp;
d218 3
a220 3
	    if ((*t = Tmake (p)) != NULL)
	    	*dh = 1;
	    return (*t);
d223 4
a226 3
	    if (!find)  return (NULL);	/* node already exists */
	    *dh = 0;
	    return (*t);
d228 2
a229 2
	    if ((newt = Tinsertavl (&((*t)->Tlo),p,find,&deltah)) == NULL)
		return (NULL);
d232 3
a234 3
	    if ((newt = Tinsertavl (&((*t)->Thi),p,find,&deltah)) == NULL)
		return (NULL);
	    (*t)->Tbf -= deltah;
d237 2
a238 1
	if ((*t)->Tbf == 0) deltah = 0;
d243 5
a247 4
TREE *Tinsert (t,p,find)
TREE **t;
register char *p;
int find;
d253 4
a256 2
		while (*p == '/') p++;
		if (*p == 0) p = ".";
d258 1
a258 1
	return (Tinsertavl (t,p,find,&deltah));
d261 4
a264 3
TREE *Tsearch (t,p)
TREE *t;
char *p;
d266 2
a267 2
	register TREE *x;
	register int cmp;
d271 7
a277 4
		cmp = strcmp (p,x->Tname);
		if (cmp == 0)  return (x);
		if (cmp < 0)	x = x->Tlo;
		else		x = x->Thi;
d282 4
a285 3
TREE *Tlookup (t,p)
TREE *t;
char *p;
d287 1
a287 1
	register TREE *x;
d294 4
a297 2
		while (*p == '/') p++;
		if (*p == 0) p = ".";
d299 1
a299 1
	if ((x = Tsearch (t,p)) != NULL)
d301 1
a301 1
	if (*p != '/' && (x = Tsearch (t,".")) != NULL)
d303 1
a303 2
	(void) strncpy(buf, p, sizeof(buf)-1);
	buf[sizeof buf-1] = '\0';
d311 1
a311 1
		if ((x = Tsearch (t,buf)) != NULL)
d321 6
a326 6
Static
int Tsubprocess (t,reverse,f,argp)
TREE *t;
int reverse;
int (*f) __P((TREE *, void *));
void *argp;
d328 2
a329 1
	register int x = SCMOK;
d331 2
a332 3
	if (reverse?t->Thi:t->Tlo)
		x = Tsubprocess (reverse?t->Thi:t->Tlo,
				 reverse,f,argp);
d334 1
a334 1
		x = (*f) (t,argp);
d336 3
a338 3
			if (reverse?t->Tlo:t->Thi)
				x = Tsubprocess (reverse?t->Tlo:t->Thi,
						 reverse,f,argp);
d346 5
a350 4
int Trprocess (t,f,args)
TREE *t;
int (*f) __P((TREE *, void *));
void *args;
d352 2
a353 1
	if (t == NULL)  return (SCMOK);
d355 1
a355 1
	return (Tsubprocess (t,TRUE,f,args));
d359 5
a363 4
int Tprocess (t,f,args)
TREE *t;
int (*f) __P((TREE *, void *));
void *args;
d365 2
a366 1
	if (t == NULL)  return (SCMOK);
d368 1
a368 1
	return (Tsubprocess (t,FALSE,f,args));
d371 4
a374 4
Static
int Tprintone (t, v)
TREE *t;
void *v;
d379 2
a380 1
	printf ("Node at %p name '%s' flags %o hi %p lo %p\n",t,t->Tname,t->Tflags,t->Thi,t->Tlo);
d385 9
a393 8
Tprint (t,p)		/* print tree -- for debugging */
TREE *t;
char *p;
{
	printf ("%s\n",p);
	(void) Tprocess (t,Tprintone, NULL);
	printf ("End of tree\n");
	(void) fflush (stdout);
@


1.6
log
@behave reasonably if malloc fails
@
text
@d1 1
a1 1
/*	$OpenBSD: stree.c,v 1.5 1997/09/16 11:01:18 deraadt Exp $	*/
d19 1
a19 1
 *  Software Distribution Coordinator  or  Software_Distribution@@CS.CMU.EDU
d32 10
@


1.5
log
@strcpy whacking; ci.c and expand.c need more work
@
text
@d1 1
a1 1
/*	$OpenBSD: stree.c,v 1.4 1997/04/01 07:35:27 todd Exp $	*/
d90 16
a105 14
	t->Tname = (p == NULL) ? NULL : salloc (p);
	t->Tflags = 0;
	t->Tuid = 0;
	t->Tgid = 0;
	t->Tuser = NULL;
	t->Tgroup = NULL;
	t->Tmode = 0;
	t->Tctime = 0;
	t->Tmtime = 0;
	t->Tlink = NULL;
	t->Texec = NULL;
	t->Tbf = 0;
	t->Tlo = NULL;
	t->Thi = NULL;
d200 2
a201 2
	    *t = Tmake (p);
	    *dh = 1;
@


1.4
log
@This merges in the latest NetBSD sup source.
- removed $Log: ...$ tags to not waste space in the repository
- now doesn't segfault on the alpha!

Note:
To compile sup on systems other than *BSD, you'll need a copy of
vis.c, vis.h, daemon.c, and sys/cdefs.h.  At least the first two
(for OSF/1).

From NetBSD changelog description (for credit where due):
.... 1996/12/23 19:42:05  christos
- add missing prototypes.
- fix function call inconsistencies
- fix int <-> long and pointer conversions
It should run now on 64 bit machines...

....  1996/12/31 18:08:00  christos
64 bit patches (mostly long -> time_t) from Matthew Jacob (?)
sup now works on the alpha!
@
text
@d1 1
a1 1
/*	$OpenBSD: stree.c,v 1.3 1997/01/17 07:13:21 millert Exp $	*/
d258 1
a258 1
	char buf[MAXPATHLEN+1];
d272 1
a272 1
	buf[MAXPATHLEN] = '\0';
@


1.3
log
@r?index -> strr?chr
@
text
@d1 1
a1 1
/*	$OpenBSD: stree.c,v 1.2 1996/06/26 05:39:48 deraadt Exp $	*/
a31 20
 * $Log: stree.c,v $
 * Revision 1.2  1996/06/26 05:39:48  deraadt
 * rcsid
 *
 * Revision 1.1  1995/12/16 11:46:53  deraadt
 * add sup to the tree
 *
 * Revision 1.1.1.1  1993/05/21 14:52:17  cgd
 * initial import of CMU's SUP to NetBSD
 *
 * Revision 1.4  92/08/11  12:06:32  mrt
 * 	Added copyright. Delinted
 * 	[92/08/10            mrt]
 * 
 * 
 * Revision 1.3  89/08/15  15:30:57  bww
 * 	Changed code in Tlookup to Tsearch for each subpart of path.
 * 	Added indent formatting code to Tprint.
 * 	From "[89/06/24            gm0w]" at CMU.
 * 	[89/08/15            bww]
d48 14
a61 1
#include "sup.h"
a62 1
#define Static	/* static		/* comment for debugging */
d68 1
d167 1
a167 1
Static
d294 2
a295 2
int (*f)();
int *argp;
d317 2
a318 2
int (*f)();
int args;
d322 1
a322 1
	return (Tsubprocess (t,TRUE,f,&args));
d328 2
a329 2
int (*f)();
int args;
d333 1
a333 1
	return (Tsubprocess (t,FALSE,f,&args));
d337 1
a337 1
int Tprintone (t)
d339 1
d344 1
a344 1
	printf ("Node at %X name '%s' flags %o hi %X lo %X\n",t,t->Tname,t->Tflags,t->Thi,t->Tlo);
d348 1
d354 1
a354 1
	(void) Tprocess (t,Tprintone);
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d33 3
d280 1
a280 1
	while ((p = rindex(buf, '/')) != NULL) {
@


1.1
log
@add sup to the tree
@
text
@d1 2
d33 3
@
