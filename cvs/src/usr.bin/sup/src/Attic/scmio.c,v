head	1.16;
access;
symbols
	OPENBSD_4_8:1.15.0.28
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.24
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.26
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.22
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.20
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.18
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.16
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.14
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.12
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.15.0.10
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.15.0.8
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.15.0.6
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.15.0.4
	OPENBSD_3_6_BASE:1.15
	OPENBSD_3_5:1.15.0.2
	OPENBSD_3_5_BASE:1.15
	OPENBSD_3_4:1.14.0.2
	OPENBSD_3_4_BASE:1.14
	OPENBSD_3_3:1.12.0.4
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.12.0.2
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.11.0.2
	OPENBSD_3_1_BASE:1.11
	OPENBSD_3_0:1.10.0.2
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.3.0.12
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.10
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.16
date	2010.10.18.20.54.00;	author deraadt;	state dead;
branches;
next	1.15;

1.15
date	2003.11.08.19.17.29;	author jmc;	state Exp;
branches;
next	1.14;

1.14
date	2003.08.27.23.05.14;	author tedu;	state Exp;
branches;
next	1.13;

1.13
date	2003.08.27.23.02.19;	author tedu;	state Exp;
branches;
next	1.12;

1.12
date	2002.08.03.08.55.35;	author pvalchev;	state Exp;
branches;
next	1.11;

1.11
date	2002.02.16.21.27.54;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2001.05.15.15.31.09;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2001.05.07.13.09.39;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2001.05.07.02.06.48;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2001.05.04.22.16.16;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.05.02.22.56.53;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.04.29.21.52.15;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.02.01.03.23.40;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.04.01.07.35.24;	author todd;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.39.47;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.12.16.11.46.52;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.16
log
@sup is no longer used. reminded by pirofti and jmc
@
text
@/*	$OpenBSD: scmio.c,v 1.15 2003/11/08 19:17:29 jmc Exp $	*/

/*
 * Copyright (c) 1992 Carnegie Mellon University
 * All Rights Reserved.
 * 
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie Mellon
 * the rights to redistribute these changes.
 */
/*
 * SUP Communication Module for 4.3 BSD
 *
 * SUP COMMUNICATION MODULE SPECIFICATIONS:
 *
 * IN THIS MODULE:
 *
 * OUTPUT TO NETWORK
 *
 *   MESSAGE START/END
 *	writemsg (msg)		start message
 *	  int msg;			message type
 *	writemend ()		end message and flush data to network
 *
 *   MESSAGE DATA
 *	writeint (i)		write int
 *	  int i;			integer to write
 *	writestring (p)		write string
 *	  char *p;			string pointer
 *	writefile (f)		write open file
 *	  int f;			open file descriptor
 *
 *   COMPLETE MESSAGE (start, one data block, end)
 *	writemnull (msg)	write message with no data
 *	  int msg;			message type
 *	writemint (msg,i)	write int message
 *	  int msg;			message type
 *	  int i;			integer to write
 *	writemstr (msg,p)	write string message
 *	  int msg;			message type
 *	  char *p;			string pointer
 *
 * INPUT FROM NETWORK
 *   MESSAGE START/END
 *	readflush ()		flush any unread data (close)
 *	readmsg (msg)		read specified message type
 *	  int msg;			message type
 *	readmend ()		read message end
 *
 *   MESSAGE DATA
 *	readskip ()		skip over one input data block
 *	readint (i)		read int
 *	  int *i;			pointer to integer
 *	readstring (p)		read string
 *	  char **p;			pointer to string pointer
 *	readfile (f)		read into open file
 *	  int f;			open file descriptor
 *
 *   COMPLETE MESSAGE (start, one data block, end)
 *	readmnull (msg)		read message with no data
 *	  int msg;			message type
 *	readmint (msg,i)	read int message
 *	  int msg;			message type
 *	  int *i;			pointer to integer
 *	readmstr (msg,p)	read string message
 *	  int msg;			message type
 *	  char **p;			pointer to string pointer
 *
 * RETURN CODES
 *	All routines normally return SCMOK.  SCMERR may be returned
 *	by any routine on abnormal (usually fatal) errors.  An
 *	unexpected MSGGOAWAY will result in SCMEOF being returned.
 *
 * COMMUNICATION PROTOCOL
 *	Messages always alternate, with the first message after
 *	connecting being sent by the client process.
 *
 *	At the end of the conversation, the client process will
 *	send a message to the server telling it to go away.  Then,
 *	both processes will close the network connection.
 *
 *	Any time a process receives a message it does not expect,
 *	the "readmsg" routine will send a MSGGOAWAY message and
 *	return SCMEOF.
 *	
 *	Each message has this format:
 *	    ----------    ------------    ------------         ----------
 *	    |msg type|    |count|data|    |count|data|   ...   |ENDCOUNT|
 *	    ----------    ------------    ------------         ----------
 *	size:  int	    int  var.	    int  var.	   	  int
 *
 *	All ints are assumed to be 32-bit quantities.  A message
 *	with no data simply has a message type followed by ENDCOUNT.
 *
 **********************************************************************
 * HISTORY
 * Revision 1.7  92/09/09  22:04:41  mrt
 * 	Removed the data encryption routines from here to netcrypt.c
 * 	[92/09/09            mrt]
 * 
 * Revision 1.6  92/08/11  12:05:57  mrt
 * 	Brad's changes: Delinted,Added forward declarations of 
 * 	static functions. Added copyright.
 * 	[92/07/24            mrt]
 * 
 * 27-Dec-87  Glenn Marcy (gm0w) at Carnegie-Mellon University
 *	Added crosspatch support.
 *
 * 28-Jun-87  Glenn Marcy (gm0w) at Carnegie-Mellon University
 *	Found error in debugging code for readint().
 *
 * 01-Apr-87  Glenn Marcy (gm0w) at Carnegie-Mellon University
 *	Added code to readdata to "push" data back into the data buffer.
 *	Added prereadcount() to return the message count size after
 *	reading it and then pushing it back into the buffer.  Clear
 *	any encryption when a GOAWAY message is detected before reading
 *	the reason string. [V5.19]
 *
 * 02-Oct-86  Rudy Nedved (ern) at Carnegie-Mellon University
 *	Put a timeout on reading from the network.
 *
 * 25-May-86  Jonathan J. Chew (jjc) at Carnegie-Mellon University
 *	Renamed "howmany" parameter to routines "encode" and "decode" from
 *	to "count" to avoid conflict with 4.3BSD macro.
 *
 * 15-Feb-86  Glenn Marcy (gm0w) at Carnegie-Mellon University
 *	Added readflush() to flush any unread data from the input
 *	buffer.  Called by requestend() in scm.c module.
 *
 * 19-Jan-86  Glenn Marcy (gm0w) at Carnegie-Mellon University
 *	Added register variables to decode() for speedup.  Added I/O
 *	buffering to reduce the number or read/write system calls.
 *	Removed readmfil/writemfil routines which were not used and were
 *	not compatible with the other similarly defined routines anyway.
 *
 * 19-Dec-85  Glenn Marcy (gm0w) at Carnegie-Mellon University
 *	Created from scm.c I/O and crypt routines.
 *
 **********************************************************************
 */

#include <libc.h>
#include <errno.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/file.h>
#include <sys/time.h>
#include "supcdefs.h"
#include "supextern.h"
#include "supmsg.h"

/*************************
 ***    M A C R O S    ***
 *************************/

/* end of message */
#define ENDCOUNT (-1)			/* end of message marker */
#define NULLCOUNT (-2)			/* used for sending NULL pointer */

#define RETRIES 15			/* # of times to retry io */
#define FILEXFER 2048			/* block transfer size */
#define XFERSIZE(count) ((count > FILEXFER) ? FILEXFER : count)

/*********************************************
 ***    G L O B A L   V A R I A B L E S    ***
 *********************************************/

extern int netfile;			/* network file descriptor */

int scmdebug;				/* scm debug flag */

int cryptflag;				/* whether to encrypt/decrypt data */
char *cryptbuf;				/* buffer for data encryption/decryption */

extern char *goawayreason;		/* reason for goaway message */

struct buf {
	char b_data[FILEXFER];		/* buffered data */
	char *b_ptr;			/* pointer to end of buffer */
	int b_cnt;			/* number of bytes in buffer */
} buffers[2];
struct buf *bufptr;			/* buffer pointer */

static int writedata(int, char *);
static int writeblock(int, char *);
static int readdata(int, char *);
static int readcount(int *);


/***********************************************
 ***    O U T P U T   T O   N E T W O R K    ***
 ***********************************************/

static int
writedata (count, data)		/* write raw data to network */
	int count;
	char *data;
{
	int x, tries;
	struct buf *bp;

	if (bufptr) {
		if (bufptr->b_cnt + count <= FILEXFER) {
			memcpy(bufptr->b_ptr, data ,count);
			bufptr->b_cnt += count;
			bufptr->b_ptr += count;
			return (SCMOK);
		}
		bp = (bufptr == buffers) ? &buffers[1] : buffers;
		memcpy(bp->b_data, data, count);
		bp->b_cnt = count;
		bp->b_ptr = bp->b_data + count;
		data = bufptr->b_data;
		count = bufptr->b_cnt;
		bufptr->b_cnt = 0;
		bufptr->b_ptr = bufptr->b_data;
		bufptr = bp;
	}
	tries = 0;
	for (;;) {
		errno = 0;
		x = write(netfile, data, count);
		if (x > 0)
			break;
		if (errno)
			break;
		if (++tries > RETRIES)
			break;
		if (scmdebug > 0)
			logerr("SCM Retrying failed network write");
	}
	if (x <= 0) {
		if (errno == EPIPE)
			return (scmerr(-1, "Network write timed out"));
		if (errno)
			return (scmerr(errno, "Write error on network"));
		return (scmerr(-1, "Write retries failed"));
	}
	if (x != count)
		return (scmerr(-1, "Write error on network returned %d on write of %d", x, count));
	return (SCMOK);
}

static int
writeblock (count, data)	/* write data block */
	int count;
	char *data;
{
	int x;
	int y = byteswap(count);

	x = writedata(sizeof(int), (char *)&y);
	if (x == SCMOK)
		x = writedata(count, data);
	return (x);
}

int
writemsg(msg)		/* write start of message */
	int msg;
{
	int x;

	if (scmdebug > 1)
		loginfo("SCM Writing message %d", msg);
	if (bufptr)
		return (scmerr(-1, "Buffering already enabled"));
	bufptr = buffers;
	bufptr->b_ptr = bufptr->b_data;
	bufptr->b_cnt = 0;
	x = byteswap (msg);
	return (writedata(sizeof(int), (char *)&x));
}

int
writemend()		/* write end of message */
{
	int count;
	char *data;
	int x;

	x = byteswap(ENDCOUNT);
	x = writedata(sizeof(int), (char *)&x);
	if (x != SCMOK)
		return (x);
	if (bufptr == NULL)
		return (scmerr(-1, "Buffering already disabled"));
	if (bufptr->b_cnt == 0) {
		bufptr = NULL;
		return (SCMOK);
	}
	data = bufptr->b_data;
	count = bufptr->b_cnt;
	bufptr = NULL;
	return (writedata(count, data));
}

int
writeint(i)		/* write int as data block */
	int i;
{
	int x;
	if (scmdebug > 2)
		loginfo("SCM Writing integer %d", i);
	x = byteswap(i);
	return (writeblock(sizeof(int), (char *)&x));
}

int
writestring(p)		/* write string as data block */
	char *p;
{
	int len, x;

	if (p == NULL) {
		int y = byteswap(NULLCOUNT);
		if (scmdebug > 2)
			loginfo("SCM Writing string NULL");
		return (writedata(sizeof(int), (char *)&y));
	}
	if (scmdebug > 2)
		loginfo("SCM Writing string %s", p);
	len = strlen(p);
	if (cryptflag) {
		x = getcryptbuf(len+1);
		if (x != SCMOK)
			return (x);
		encode(p, cryptbuf, len);
		p = cryptbuf;
	}
	return (writeblock(len, p));
}

int
writefile(f)		/* write open file as a data block */
int f;
{
	char buf[FILEXFER];
	int number, sum, filesize, x, y;
	struct stat statbuf;

	/*
	 * XXX - st_size is really 64 bits but if we change things to support
	 *	 files > 2gig we become incompatible with everyone else.
	 */
	number = sum = 0;
	if (fstat(f, &statbuf) < 0)
		return (scmerr(errno, "Can't access open file for message"));
	filesize = statbuf.st_size;
	y = byteswap(filesize);
	x = writedata(sizeof(int), (char *)&y);

	if (cryptflag)
		x = getcryptbuf(FILEXFER);

	if (x == SCMOK) {
		sum = 0;
		do {
			number = read(f, buf, FILEXFER);
			if (number > 0) {
				if (cryptflag) {
					encode(buf, cryptbuf, number);
					x = writedata(number, cryptbuf);
				} else {
					x = writedata(number,buf);
				}
				sum += number;
			}
		} while (x == SCMOK && number > 0);
	}
	if (sum != filesize)
		return (scmerr(-1, "File size error on output message"));
	if (number < 0)
		return (scmerr(errno, "Read error on file output message"));
	return (x);
}

int
writemnull(msg)		/* write message with no data */
	int msg;
{
	int x;

	x = writemsg(msg);
	if (x == SCMOK)
		x = writemend();
	return (x);
}

int
writemint(msg, i)		/* write message of one int */
	int msg, i;
{
	int x;

	x = writemsg(msg);
	if (x == SCMOK)
		x = writeint(i);
	if (x == SCMOK)
		x = writemend();
	return (x);
}

int
writemstr(msg, p)		/* write message of one string */
	int msg;
	char *p;
{
	int x;

	x = writemsg(msg);
	if (x == SCMOK)
		x = writestring(p);
	if (x == SCMOK)
		x = writemend();
	return (x);
}

/*************************************************
 ***    I N P U T   F R O M   N E T W O R K    ***
 *************************************************/

static int
readdata(count, data)		/* read raw data from network */
	int count;
	char *data;
{
	char *p;
	int n, m, x;
	int tries;
	struct timeval timout;
	static size_t rfdsize;
	static fd_set *readfds;
	static int bufcnt = 0;
	static char *bufptr;
	static char buffer[FILEXFER];

	if (count < 0) {
		if (bufptr + count < buffer)
			return (scmerr(-1, "No space in buffer %d", count));
		bufptr += count;
		bufcnt -= count;
		memcpy(bufptr, data, -count);
		return (SCMOK);
	}
	if (count == 0 && data == NULL) {
		bufcnt = 0;
		return (SCMOK);
	}
	if (count <= bufcnt) {
		memcpy(data, bufptr, count);
		bufptr += count;
		bufcnt -= count;
		return (SCMOK);
	}
	if (bufcnt > 0) {
		memcpy(data, bufptr, bufcnt);
		data += bufcnt;
		count -= bufcnt;
	}
	if (rfdsize < howmany(netfile+1, NFDBITS) * sizeof(fd_mask)) {
		rfdsize = howmany(netfile+1, NFDBITS) * sizeof(fd_mask);
		p = readfds ? realloc(readfds, rfdsize) : malloc(rfdsize);
		if (p == NULL) {
			free(readfds);
			rfdsize = 0;
			return (SCMERR);
		}
		readfds = (fd_set *) p;
	}
	memset(readfds, 0, rfdsize);
	bufptr = buffer;
	bufcnt = 0;
	timout.tv_usec = 0;
	timout.tv_sec = 2*60*60;
	p = buffer;
	n = FILEXFER;
	m = count;
	while (m > 0) {
		tries = 0;
		for (;;) {
			FD_SET(netfile, readfds);
			if (select(netfile+1, readfds, NULL, NULL, &timout)
			    == -1) {
				if (errno == EINTR || errno == EAGAIN)
					continue;
				return (scmerr(errno, "Select error on network"));
			}
			errno = 0;
			if (FD_ISSET(netfile, readfds))
				x = read(netfile, p, n);
			else
				return (scmerr(-1, "Timeout on network input"));
			if (x > 0)
				break;
			if (x == 0)
				return (scmerr(-1, "Premature EOF on network input"));
			if (errno)
				break;
			if (++tries > RETRIES)
				break;
			if (scmdebug > 0)
				loginfo("SCM Retrying failed network read");
		}
		if (x < 0) {
			if (errno)
				return (scmerr(errno, "Read error on network"));
			return (scmerr(-1, "Read retries failed"));
		}
		p += x;
		n -= x;
		m -= x;
		bufcnt += x;
	}
	memcpy(data, bufptr, count);
	bufptr += count;
	bufcnt -= count;
	return (SCMOK);
}

static int
readcount(count)			/* read count of data block */
	int *count;
{
	int x, y;

	x = readdata(sizeof(int), (char *)&y);
	if (x != SCMOK)
		return (x);
	*count = byteswap(y);
	return (SCMOK);
}

int
prereadcount(count)		/* preread count of data block */
	int *count;
{
	int x, y;

	x = readdata(sizeof(int), (char *)&y);
	if (x != SCMOK)
		return (x);
	x = readdata(- ((int)(sizeof(int))), (char *)&y);
	if (x != SCMOK)
		return (x);
	*count = byteswap(y);
	return (SCMOK);
}

int
readflush()
{

	return (readdata(0, NULL));
}

int
readmsg(msg)		/* read header for expected message */
	int msg;	/* if message is unexpected, send back SCMHUH */
{
	int x;
	int m;

	if (scmdebug > 1)
		loginfo("SCM Reading message %d", msg);
	x = readdata(sizeof(int), (char *)&m);	/* msg type */
	if (x != SCMOK)
		return (x);
	m = byteswap(m);
	if (m == msg)
		return (x);

	/* check for MSGGOAWAY in case he noticed problems first */
	if (m != MSGGOAWAY)
		return (scmerr(-1, "Received unexpected message %d", m));
	(void) netcrypt(NULL);
	(void) readstring(&goawayreason);
	(void) readmend();
	if (goawayreason == NULL)
		return (SCMEOF);
	logerr("SCM GOAWAY %s", goawayreason);
	return (SCMEOF);
}

int
readmend()
{
	int x, y;

	x = readdata(sizeof(int), (char *)&y);
	y = byteswap(y);
	if (x == SCMOK && y != ENDCOUNT)
		return (scmerr(-1, "Error reading end of message"));
	return (x);
}

int
readskip()			/* skip over one input block */
{
	int x;
	int n;
	char buf[FILEXFER];

	x = readcount(&n);
	if (x != SCMOK)
		return (x);
	if (n < 0)
		return (scmerr(-1, "Invalid message count %d", n));
	while (x == SCMOK && n > 0) {
		x = readdata(XFERSIZE(n), buf);
		n -= XFERSIZE(n);
	}
	return (x);
}

int readint(buf)		/* read int data block */
	int *buf;
{
	int x;
	int y;

	x = readcount(&y);
	if (x != SCMOK)
		return (x);
	if (y < 0)
		return (scmerr(-1, "Invalid message count %d",y));
	if (y != sizeof(int))
		return (scmerr(-1, "Size error for int message is %d", y));
	x = readdata(sizeof(int), (char *)&y);
	(*buf) = byteswap(y);
	if (scmdebug > 2)
		loginfo("SCM Reading integer %d", *buf);
	return (x);
}

int readstring(buf)	/* read string data block */
	char **buf;
{
	int x;
	int count;
	char *p;

	x = readcount(&count);
	if (x != SCMOK)
		return (x);
	if (count == NULLCOUNT) {
		if (scmdebug > 2)
			loginfo("SCM Reading string NULL");
		*buf = NULL;
		return (SCMOK);
	}
	if (count < 0)
		return (scmerr(-1, "Invalid message count %d", count));
	if (scmdebug > 3)
		loginfo("SCM Reading string count %d", count);
	if ((p = (char *)malloc(count + 1)) == NULL)
		return (scmerr(-1, "Can't malloc %d bytes for string", count));
	if (cryptflag) {
		x = getcryptbuf(count+1);
		if (x == SCMOK)
			x = readdata(count, cryptbuf);
		if (x != SCMOK) {
			free(p);
			return (x);
		}
		if (scmdebug > 3)
			printf("SCM Reading encrypted string %s\n", cryptbuf);
		decode(cryptbuf, p, count);
	} else {
		x = readdata(count,p);
		if (x != SCMOK) {
			free(p);
			return (x);
		}
	}
	p[count] = 0;		/* NULL at end of string */
	*buf = p;
	if (scmdebug > 2)
		loginfo("SCM Reading string %s", *buf);
	return (SCMOK);
}

int
readfile(f)		/* read data block into open file */
	int f;
{
	int x;
	int count;
	char buf[FILEXFER];

	if (cryptflag) {
		x = getcryptbuf(FILEXFER);
		if (x != SCMOK)
			return (x);
	}
	x = readcount(&count);
	if (x != SCMOK)
		return (x);
	if (count < 0)
		return (scmerr(-1, "Invalid message count %d", count));
	while (x == SCMOK && count > 0) {
		if (cryptflag) {
			x = readdata(XFERSIZE(count), cryptbuf);
			if (x == SCMOK)
				decode(cryptbuf, buf, XFERSIZE(count));
		} else
			x = readdata(XFERSIZE(count), buf);
		if (x == SCMOK) {
			(void) write(f, buf, XFERSIZE(count));
			count -= XFERSIZE(count);
		}
	}
	return (x);
}

int
readmnull(msg)		/* read null message */
	int msg;
{
	int x;

	x = readmsg(msg);
	if (x == SCMOK)
		x = readmend();
	return (x);
}

int
readmint(msg, buf)		/* read int message */
	int msg, *buf;
{
	int x;

	x = readmsg(msg);
	if (x == SCMOK)
		x = readint(buf);
	if (x == SCMOK)
		x = readmend();
	return (x);
}

int readmstr(msg, buf)		/* read string message */
	int msg;
	char **buf;
{
	int x;

	x = readmsg(msg);
	if (x == SCMOK)
		x = readstring(buf);
	if (x == SCMOK)
		x = readmend();
	return (x);
}

/**********************************
 ***    C R O S S P A T C H     ***
 **********************************/

void
crosspatch()
{
	fd_set *readfds;
	size_t rfdsize;
	int c;
	char buf[STRINGLENGTH];

	rfdsize = howmany(netfile+1, NFDBITS) * sizeof(fd_mask);
	if ((readfds = (fd_set *) malloc(rfdsize)) == NULL)
		return;
	for (;;) {
		memset(readfds, 0, rfdsize);
		FD_SET(0, readfds);
		FD_SET(netfile, readfds);
		if ((c = select(netfile+1, readfds, NULL, NULL, NULL)) < 1) {
			if (c == -1) {
				if (errno == EINTR || errno == EAGAIN)
					continue;
			}
			sleep (5);
			continue;
		}
		if (FD_ISSET(netfile, readfds)) {
			c = read(netfile, buf, sizeof (buf));
			if (c < 0 && errno == EWOULDBLOCK)
				c = 0;
			else {
				if (c <= 0)
					break;
				(void) write(1, buf, c);
			}
		}
		if (FD_ISSET(0, readfds)) {
			c = read(0, buf, sizeof (buf));
			if (c < 0 && errno == EWOULDBLOCK)
				c = 0;
			else {
				if (c <= 0)
					break;
				(void) write(netfile, buf, c);
			}
		}
	}
	free(readfds);
}
@


1.15
log
@typos from Jonathon Gray;
@
text
@d1 1
a1 1
/*	$OpenBSD: scmio.c,v 1.14 2003/08/27 23:05:14 tedu Exp $	*/
@


1.14
log
@oops
@
text
@d1 1
a1 1
/*	$OpenBSD: scmio.c,v 1.13 2003/08/27 23:02:19 tedu Exp $	*/
d150 1
a150 1
 *	not compatable with the other similarly defined routines anyway.
@


1.13
log
@fix memory leaks.  pr3416 from Patrick Latifi <patrick.l@@hermes.usherb.ca>
@
text
@d1 1
a1 1
/*	$OpenBSD: scmio.c,v 1.12 2002/08/03 08:55:35 pvalchev Exp $	*/
d676 2
a681 1
		x = readdata(count, cryptbuf);
@


1.12
log
@spell 'debugging' correctly with double 'g' (in comments)
@
text
@d1 1
a1 1
/*	$OpenBSD: scmio.c,v 1.11 2002/02/16 21:27:54 millert Exp $	*/
d676 2
a677 3
		if (x == SCMOK)
			x = readdata(count, cryptbuf);
		if (x != SCMOK)
d679 4
a682 2
	if (scmdebug > 3)
		printf("SCM Reading encrypted string %s\n", cryptbuf);
d686 2
a687 1
		if (x != SCMOK)
d689 1
@


1.11
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: scmio.c,v 1.10 2001/05/15 15:31:09 millert Exp $	*/
d126 1
a126 1
 *	Found error in debuging code for readint().
@


1.10
log
@Add missing memset() from one of the select() fixes.  Also free existing
readfds if malloc/realloc fails.
@
text
@d1 1
a1 1
/*	$OpenBSD: scmio.c,v 1.9 2001/05/07 13:09:39 millert Exp $	*/
d200 4
a203 4
static int writedata __P((int, char *));
static int writeblock __P((int, char *));
static int readdata __P((int, char *));
static int readcount __P((int *));
@


1.9
log
@Avoid excessive malloc/free for select in readdata()
@
text
@d1 1
a1 1
/*	$OpenBSD: scmio.c,v 1.8 2001/05/07 02:06:48 millert Exp $	*/
d480 3
a482 1
		if (p == NULL)
d484 1
d487 1
@


1.8
log
@Fix select(2) usage.
@
text
@d1 1
a1 1
/*	$OpenBSD: scmio.c,v 1.7 2001/05/04 22:16:16 millert Exp $	*/
d448 1
a453 3
	if (readfds)
		free(readfds);

d477 7
a490 4
	readfds = (fd_set *) calloc(howmany(netfile+1, NFDBITS),
	    sizeof(fd_mask));
	if (readfds == NULL)
		return (SCMERR);
@


1.7
log
@o kill register
o lots of KNF
o passes -Wall
o fix some [ug]id_t vs. int issues
o use strlcpy/strlcat in favor of strncpy/strncat
o use mem* routines everywhere instead of old b* ones
o marked several questionable things for later fixing
o kill ci.c and cvt.c -- we don't use them
o kill read_line.c since it requires fgetln() (bad for portability)
o kill salloc.c since it is the same as strup()
o Replaced some #ifdef __OpenBSD__ with better tests
o remaining problems: malloc return values are rarely checked, select misuse
@
text
@d1 1
a1 1
/*	$OpenBSD: scmio.c,v 1.6 2001/05/02 22:56:53 millert Exp $	*/
d447 2
d452 3
a454 2
	static int imask;
	static struct timeval timout;
d486 4
d493 7
a499 4
			/* XXX - bad select usage, fixme! (millert) */
			imask = 1 << netfile;
			if (select(32,(fd_set *)&imask,(fd_set *)0,(fd_set *)0,&timout) < 0)
				imask = 1;
d501 1
a501 1
			if (imask)
d770 2
a771 1
	fd_set ibits, obits, xbits;
d775 3
a777 1
	/* XXX - bad select usage--fixme! (millert) */
d779 4
a782 6
		FD_ZERO(&ibits);
		FD_ZERO(&obits);
		FD_ZERO(&xbits);
		FD_SET(0,&ibits);
		FD_SET(netfile,&ibits);
		if ((c = select(16, &ibits, &obits, &xbits, NULL)) < 1) {
d784 1
a784 1
				if (errno == EINTR)
d790 1
a790 1
		if (FD_ISSET(netfile, &ibits)) {
d800 1
a800 1
		if (FD_ISSET(0, &ibits)) {
d811 1
@


1.6
log
@Sync with NetBSD.  Notable changes:
 o Add libwrap support to supfilesrv, conditioned by #ifdef LIBWRAP
   (on by default). <bouyer@@netbsd.org>
 o Renamed '-l' (the 'live' mode) to '-d' and '-l' is now used to
   enable logging of successfull connections. <bouyer@@netbsd.org>
 o Don't botch varargs: the are not always an array of void * in the stack...
   Write a separate function to convert a list of function parameters to
   explain why execv failed. <christos@@netbsd.org>
 o When in compress mode, don't overwrite the destination file directly,
   write a temp file and use rename when it is done. (From James Mathiesen
   <james@@deshaw.com>)
 o Rename errno variable to error to avoid collision with errno.h and remove
   explicit extern of errno (we get it from errno.h) <mycroft@@netbsd.org>
 o Cleanup unsigned char vs. char
 o Add -u flag, that prevents sup from attempting to restore a and m times
   on the received files.
 o Replace the provided read_line function with calls to the fparseln function
   in libutil.  Maintain compatibility on machines without fparseln through
   the NEED_READ_LINE define.
 o Rename login() to suplogin() to avoid name collition in util.h
 o If rmdir() fails, chmod the path to have r/w/x perms and run "rm -rf"
 o avoid last.temp filename collision by using rel-suffix
 o When creating directories, make sure you remove previous non-directories
   before doing so, otherwise sup fails.
 o Add -q flag to supscan for quiet operation.
@
text
@d1 1
a1 1
/*	$OpenBSD: scmio.c,v 1.5 2001/04/29 21:52:15 millert Exp $	*/
d211 3
a213 3
writedata (count,data)		/* write raw data to network */
int count;
char *data;
d215 2
a216 2
	register int x,tries;
	register struct buf *bp;
d220 1
a220 1
			bcopy (data,bufptr->b_ptr,count);
d226 1
a226 1
		bcopy (data,bp->b_data,count);
d238 7
a244 4
		x = write (netfile,data,count);
		if (x > 0)  break;
		if (errno)  break;
		if (++tries > RETRIES)  break;
d246 1
a246 1
			logerr ("SCM Retrying failed network write");
d250 1
a250 1
			return (scmerr (-1,"Network write timed out"));
d252 2
a253 2
			return (scmerr (errno,"Write error on network"));
		return (scmerr (-1,"Write retries failed"));
d256 1
a256 1
		return (scmerr (-1,"Write error on network returned %d on write of %d",x,count));
d261 3
a263 3
writeblock (count,data)		/* write data block */
int count;
char *data;
d265 1
a265 1
	register int x;
d268 3
a270 2
	x = writedata (sizeof(int),(char *)&y);
	if (x == SCMOK)  x = writedata (count,data);
d275 2
a276 2
writemsg (msg)		/* write start of message */
int msg;
d281 1
a281 1
		loginfo ("SCM Writing message %d",msg);
d283 1
a283 1
		return (scmerr (-1,"Buffering already enabled"));
d288 1
a288 1
	return (writedata(sizeof(int),(char *)&x));
d292 1
a292 1
writemend ()		/* write end of message */
d294 2
a295 2
	register int count;
	register char *data;
d298 4
a301 3
	x = byteswap (ENDCOUNT);
	x = writedata (sizeof(int),(char *)&x);
	if (x != SCMOK)  return (x);
d303 1
a303 1
		return (scmerr (-1,"Buffering already disabled"));
d311 1
a311 1
	return (writedata (count, data));
d315 2
a316 2
writeint (i)		/* write int as data block */
int i;
d320 1
a320 1
		loginfo ("SCM Writing integer %d",i);
d322 1
a322 1
	return (writeblock(sizeof(int),(char *)&x));
d326 2
a327 2
writestring (p)		/* write string as data block */
char *p;
d329 2
a330 1
	register int len,x;
d334 2
a335 2
			loginfo ("SCM Writing string NULL");
		return (writedata (sizeof(int),(char *)&y));
d338 2
a339 2
		loginfo ("SCM Writing string %s",p);
	len = strlen (p);
d341 1
a341 1
		x = getcryptbuf (len+1);
d344 1
a344 1
		encode (p,cryptbuf,len);
d347 1
a347 1
	return (writeblock(len,p));
d351 1
a351 1
writefile (f)		/* write open file as a data block */
d355 1
a355 2
	register int number = 0,sum = 0,filesize,x;
	int y;
d358 7
a364 2
	if (fstat(f,&statbuf) < 0)
		return (scmerr (errno,"Can't access open file for message"));
d367 1
a367 1
	x = writedata (sizeof(int),(char *)&y);
d369 2
a370 1
	if (cryptflag)  x = getcryptbuf (FILEXFER);
d375 1
a375 1
			number = read (f,buf,FILEXFER);
d378 4
a381 5
					encode (buf,cryptbuf,number);
					x = writedata (number,cryptbuf);
				}
				else {
					x = writedata (number,buf);
d388 1
a388 1
		return (scmerr (-1,"File size error on output message"));
d390 1
a390 1
		return (scmerr (errno,"Read error on file output message"));
d395 2
a396 2
writemnull (msg)	/* write message with no data */
int msg;
d398 5
a402 3
	register int x;
	x = writemsg (msg);
	if (x == SCMOK)  x = writemend ();
d407 2
a408 2
writemint (msg,i)		/* write message of one int */
int msg,i;
d410 7
a416 4
	register int x;
	x = writemsg (msg);
	if (x == SCMOK)  x = writeint (i);
	if (x == SCMOK)  x = writemend ();
d421 3
a423 3
writemstr (msg,p)		/* write message of one string */
int msg;
char *p;
d425 7
a431 4
	register int x;
	x = writemsg (msg);
	if (x == SCMOK)  x = writestring (p);
	if (x == SCMOK)  x = writemend ();
d440 3
a442 3
readdata (count,data)		/* read raw data from network */
int count;
char *data;
d444 2
a445 2
	register char *p;
	register int n,m,x;
d455 1
a455 1
			return (scmerr (-1,"No space in buffer %d",count));
d458 1
a458 1
		bcopy (data,bufptr,-count);
d466 1
a466 1
		bcopy (bufptr,data,count);
d472 1
a472 1
		bcopy (bufptr,data,bufcnt);
d486 1
d492 1
a492 1
				x = read (netfile,p,n);
d494 3
a496 2
				return (scmerr (-1,"Timeout on network input"));
			if (x > 0)  break;
d498 5
a502 3
				return (scmerr (-1,"Premature EOF on network input"));
			if (errno)  break;
			if (++tries > RETRIES)  break;
d504 1
a504 1
				loginfo ("SCM Retrying failed network read");
d508 2
a509 2
				return (scmerr (errno,"Read error on network"));
			return (scmerr (-1,"Read retries failed"));
d516 1
a516 1
	bcopy (bufptr,data,count);
d522 3
a524 3
static
int readcount (count)			/* read count of data block */
int *count;
d526 5
a530 4
	register int x;
	int y;
	x = readdata (sizeof(int),(char *)&y);
	if (x != SCMOK)  return (x);
d535 3
a537 2
int prereadcount (count)		/* preread count of data block */
int *count;
d539 8
a546 6
	register int x;
	int y;
	x = readdata (sizeof(int),(char *)&y);
	if (x != SCMOK)  return (x);
	x = readdata (- ((int)(sizeof(int))),(char *)&y);
	if (x != SCMOK)  return (x);
d552 1
a552 1
readflush ()
d554 2
a555 1
	return (readdata (0, (char *)NULL));
d559 2
a560 2
readmsg (msg)		/* read header for expected message */
int msg;		/* if message is unexpected, send back SCMHUH */
d562 1
a562 1
	register int x;
d564 1
d566 4
a569 3
		loginfo ("SCM Reading message %d",msg);
	x = readdata (sizeof(int),(char *)&m);	/* msg type */
	if (x != SCMOK)  return (x);
d571 2
a572 1
	if (m == msg)  return (x);
d576 4
a579 4
		return (scmerr (-1,"Received unexpected message %d",m));
	(void) netcrypt ((char *)NULL);
	(void) readstring (&goawayreason);
	(void) readmend ();
d582 1
a582 1
	logerr ("SCM GOAWAY %s",goawayreason);
d587 1
a587 1
readmend ()
d589 3
a591 3
	register int x;
	int y;
	x = readdata (sizeof(int),(char *)&y);
d594 1
a594 1
		return (scmerr (-1,"Error reading end of message"));
d599 1
a599 1
readskip ()			/* skip over one input block */
d601 1
a601 1
	register int x;
d604 4
a607 2
	x = readcount (&n);
	if (x != SCMOK)  return (x);
d609 1
a609 1
		return (scmerr (-1,"Invalid message count %d",n));
d611 1
a611 1
		x = readdata (XFERSIZE(n),buf);
d617 2
a618 2
int readint (buf)		/* read int data block */
int *buf;
d620 1
a620 1
	register int x;
d622 4
a625 2
	x = readcount (&y);
	if (x != SCMOK)  return (x);
d627 1
a627 1
		return (scmerr (-1,"Invalid message count %d",y));
d629 2
a630 2
		return (scmerr (-1,"Size error for int message is %d",y));
	x = readdata (sizeof(int),(char *)&y);
d633 1
a633 1
		loginfo ("SCM Reading integer %d",*buf);
d637 2
a638 2
int readstring (buf)	/* read string data block */
register char **buf;
d640 1
a640 1
	register int x;
d642 1
a642 1
	register char *p;
d644 3
a646 2
	x = readcount (&count);
	if (x != SCMOK)  return (x);
d649 1
a649 1
			loginfo ("SCM Reading string NULL");
d654 1
a654 1
		return (scmerr (-1,"Invalid message count %d",count));
d656 3
a658 3
		loginfo ("SCM Reading string count %d",count);
	if ((p = (char *)malloc ((unsigned)count+1)) == NULL)
		return (scmerr (-1,"Can't malloc %d bytes for string",count));
d660 5
a664 3
		x = getcryptbuf (count+1);
		if (x == SCMOK)  x = readdata (count,cryptbuf);
		if (x != SCMOK)  return (x);
d666 6
a671 6
		printf ("SCM Reading encrypted string %s\n",cryptbuf);
		decode (cryptbuf,p,count);
	}
	else {
		x = readdata (count,p);
		if (x != SCMOK)  return (x);
d676 1
a676 1
		loginfo ("SCM Reading string %s",*buf);
d681 2
a682 2
readfile (f)		/* read data block into open file */
int f;
d684 1
a684 1
	register int x;
d689 3
a691 2
		x = getcryptbuf (FILEXFER);
		if (x != SCMOK)  return (x);
d693 3
a695 2
	x = readcount (&count);
	if (x != SCMOK)  return (x);
d697 1
a697 1
		return (scmerr (-1,"Invalid message count %d",count));
d700 5
a704 5
			x = readdata (XFERSIZE(count),cryptbuf);
			if (x == SCMOK)  decode (cryptbuf,buf,XFERSIZE(count));
		}
		else
			x = readdata (XFERSIZE(count),buf);
d706 1
a706 1
			(void) write (f,buf,XFERSIZE(count));
d714 2
a715 2
readmnull (msg)		/* read null message */
int msg;
d717 5
a721 3
	register int x;
	x = readmsg (msg);
	if (x == SCMOK)  x = readmend ();
d726 2
a727 2
readmint (msg,buf)		/* read int message */
int msg,*buf;
d729 7
a735 4
	register int x;
	x = readmsg (msg);
	if (x == SCMOK)  x = readint (buf);
	if (x == SCMOK)  x = readmend ();
d739 3
a741 3
int readmstr (msg,buf)		/* read string message */
int msg;
char **buf;
d743 7
a749 4
	register int x;
	x = readmsg (msg);
	if (x == SCMOK)  x = readstring (buf);
	if (x == SCMOK)  x = readmend ();
d758 1
a758 1
crosspatch ()
d761 1
a761 1
	register int c;
d764 1
d766 6
a771 7
		FD_ZERO (&ibits);
		FD_ZERO (&obits);
		FD_ZERO (&xbits);
		FD_SET (0,&ibits);
		FD_SET (netfile,&ibits);
		if ((c = select(16, &ibits, &obits, &xbits,
				(struct timeval *)NULL)) < 1) {
d773 1
a773 1
				if (errno == EINTR) {
a774 1
				}
d779 2
a780 2
		if (FD_ISSET (netfile,&ibits)) {
			c = read (netfile,buf,sizeof (buf));
d784 1
a784 1
				if (c <= 0) {
d786 1
a786 2
				}
				(void) write (1,buf,c);
d790 1
a790 1
			c = read (0,buf,sizeof (buf));
d796 1
a796 1
				(void) write (netfile,buf,c);
@


1.5
log
@Add a bunch of old revision history comments that we are missing to
make diffing easier.  No code changes...
@
text
@d1 1
a1 1
/*	$OpenBSD: scmio.c,v 1.4 2000/02/01 03:23:40 deraadt Exp $	*/
a166 1

@


1.4
log
@no need to extern int errno if errno.h is included
@
text
@d1 1
a1 1
/*	$OpenBSD: scmio.c,v 1.3 1997/04/01 07:35:24 todd Exp $	*/
d19 1
a19 1
 *  Software Distribution Coordinator  or  Software_Distribution@@CS.CMU.EDU
d113 8
@


1.3
log
@This merges in the latest NetBSD sup source.
- removed $Log: ...$ tags to not waste space in the repository
- now doesn't segfault on the alpha!

Note:
To compile sup on systems other than *BSD, you'll need a copy of
vis.c, vis.h, daemon.c, and sys/cdefs.h.  At least the first two
(for OSF/1).

From NetBSD changelog description (for credit where due):
.... 1996/12/23 19:42:05  christos
- add missing prototypes.
- fix function call inconsistencies
- fix int <-> long and pointer conversions
It should run now on 64 bit machines...

....  1996/12/31 18:08:00  christos
64 bit patches (mostly long -> time_t) from Matthew Jacob (?)
sup now works on the alpha!
@
text
@d1 1
a1 1
/*	$OpenBSD: scmio.c,v 1.2 1996/06/26 05:39:47 deraadt Exp $	*/
a159 1
extern int errno;
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a112 18
 * $Log: scmio.c,v $
 * Revision 1.1  1995/12/16 11:46:52  deraadt
 * add sup to the tree
 *
 * Revision 1.2  1993/05/24 17:57:26  brezak
 * Remove netcrypt.c. Remove unneeded files. Cleanup make.
 *
 * Revision 1.1.1.1  1993/05/21  14:52:17  cgd
 * initial import of CMU's SUP to NetBSD
 *
 * Revision 1.7  92/09/09  22:04:41  mrt
 * 	Removed the data encryption routines from here to netcrypt.c
 * 	[92/09/09            mrt]
 * 
 * Revision 1.6  92/08/11  12:05:57  mrt
 * 	Brad's changes: Delinted,Added forward declarations of 
 * 	static functions. Added copyright.
 * 	[92/07/24            mrt]
d156 2
a157 1
#include "sup.h"
a177 1
extern int scmerr ();			/* error printing routine */
d194 5
d204 1
a204 1
static
d251 1
a251 1
static
d264 1
d281 1
d303 1
d314 1
d338 1
d343 1
a343 1
	register int number,sum,filesize,x;
d378 1
d388 1
d399 1
d415 1
a415 1
static
d513 1
a513 1
	x = readdata (-sizeof(int),(char *)&y);
d519 1
d525 1
d550 1
d562 1
d637 1
d668 1
d678 1
d704 1
@


1.1
log
@add sup to the tree
@
text
@d1 2
d114 3
@
