head	1.9;
access;
symbols
	OPENBSD_4_8:1.8.0.12
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.8
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.10
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.6
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.4
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.2
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.7.0.26
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.24
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.22
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.20
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.18
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.16
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.14
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.7.0.12
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.10
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.7.0.8
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.6
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.4
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.16
	OPENBSD_2_8:1.5.0.14
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.12
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.10
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.8
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.6
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.4
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.9
date	2010.10.18.20.54.00;	author deraadt;	state dead;
branches;
next	1.8;

1.8
date	2007.09.11.15.47.17;	author gilles;	state Exp;
branches;
next	1.7;

1.7
date	2001.05.04.22.16.16;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.04.29.21.52.16;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.09.16.10.42.56;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.04.01.07.35.36;	author todd;	state Exp;
branches;
next	1.3;

1.3
date	97.01.17.07.18.08;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.39.53;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.12.16.11.46.58;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.9
log
@sup is no longer used. reminded by pirofti and jmc
@
text
@/*	$OpenBSD: supcname.c,v 1.8 2007/09/11 15:47:17 gilles Exp $	*/

/*
 * Copyright (c) 1992 Carnegie Mellon University
 * All Rights Reserved.
 * 
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie Mellon
 * the rights to redistribute these changes.
 */
/*
 * sup client name server interface
 **********************************************************************
 * HISTORY
 * Revision 1.4  92/08/11  12:07:32  mrt
 * 	Added copyright.
 * 	[92/08/10            mrt]
 * 
 * 21-Dec-87  Glenn Marcy (gm0w) at Carnegie-Mellon University
 *	Changed to no longer use a name server.
 *
 * 26-May-87  Doug Philips (dwp) at Carnegie-Mellon University
 *	Changed getnams and added several new routines to change the
 *	way that sup finds nameservers.  It now builds a tree of
 *	servers to check.  It walks over the tree.  At each node, it
 *	tries to contact the name server and get as many names
 *	resolved as it can.  It stops after either all collections
 *	have host names, or if some collections don't have host names
 *	but either everyone doesn't know what they are, or after too
 *	many tries, none could be reached.
 *
 * 25-May-87  Doug Philips (dwp) at Carnegie-Mellon University
 *	Split off from sup.c
 *
 **********************************************************************
 */

#include "supcdefs.h"
#include "supextern.h"

extern COLLECTION *firstC;		/* collection list pointer */

/*****************************************
 ***    G E T   H O S T   N A M E S    ***
 *****************************************/

/*
 * For each collection that doesn't have a host name specified, read
 * the file server list for the name of the host for that collection.
 * It's a fatal error if a collection has no file server.
 */

void
getnams()
{
	COLLECTION *c;
	char buf[STRINGLENGTH];
	FILE *f;
	char *p, *q;

	for (c = firstC; c && c->Chtree != NULL; c = c->Cnext)
		;
	if (c == NULL)
		return;
	(void) snprintf(buf, sizeof buf, FILEHOSTS, DEFDIR);
	f = fopen(buf, "r");
	if (f == NULL)
		logquit (1, "Can't open %s", buf);
	while ((p = fgets(buf, sizeof(buf), f)) != NULL) {
		p[strcspn(p, "\n")] = '\0';
		if (strchr("#;:", *p))
			continue;
		q = nxtarg(&p, "= \t");
		p = skipover(p, " \t");
		if (*p == '=')
			p++;
		p = skipover(p, " \t");
		if (*p == '\0')
			goaway("error in collection/host file");
		do {
			if (strcmp(c->Cname, q) == 0) {
				do {
					q = nxtarg(&p, ", \t");
					p = skipover(p, " \t");
					if (*p == ',')
						p++;
					p = skipover(p, " \t");
					(void) Tinsert(&c->Chtree, q, FALSE);
				} while (*p != '\0');
			}
			while ((c = c->Cnext) != NULL && c->Chtree != NULL)
				;
		} while (c != NULL);
		for (c = firstC; c && c->Chtree != NULL; c = c->Cnext)
			;
		if (c == NULL)
			break;
	}
	(void) fclose(f);
	if (c == NULL)
		return;
	do {
		logerr ("Host for collection %s not found", c->Cname);
		while ((c = c->Cnext) != NULL && c->Chtree != NULL)
			;
	} while (c);
	logquit(1, "Hosts not found for all collections");
}
@


1.8
log
@use strcspn to properly overwrite '\n' in fgets returned buffer

ok pyr@@, ray@@, millert@@, moritz@@, chl@@
@
text
@d1 1
a1 1
/*	$OpenBSD: supcname.c,v 1.7 2001/05/04 22:16:16 millert Exp $	*/
@


1.7
log
@o kill register
o lots of KNF
o passes -Wall
o fix some [ug]id_t vs. int issues
o use strlcpy/strlcat in favor of strncpy/strncat
o use mem* routines everywhere instead of old b* ones
o marked several questionable things for later fixing
o kill ci.c and cvt.c -- we don't use them
o kill read_line.c since it requires fgetln() (bad for portability)
o kill salloc.c since it is the same as strup()
o Replaced some #ifdef __OpenBSD__ with better tests
o remaining problems: malloc return values are rarely checked, select misuse
@
text
@d1 1
a1 1
/*	$OpenBSD: supcname.c,v 1.6 2001/04/29 21:52:16 millert Exp $	*/
d86 1
a86 2
		if ((q = strchr(p, '\n')) != NULL)
			*q = '\0';
@


1.6
log
@Add a bunch of old revision history comments that we are missing to
make diffing easier.  No code changes...
@
text
@d1 1
a1 1
/*	$OpenBSD: supcname.c,v 1.5 1997/09/16 10:42:56 deraadt Exp $	*/
d69 2
a70 1
void getnams ()
d72 1
a72 1
	register COLLECTION *c;
d74 2
a75 2
	register FILE *f;
	char *p,*q;
d77 20
a96 13
	for (c = firstC; c && c->Chtree != NULL; c = c->Cnext);
	if (c == NULL) return;
	(void) snprintf (buf,sizeof buf,FILEHOSTS,DEFDIR);
	f = fopen (buf,"r");
	if (f == NULL)  logquit (1,"Can't open %s",buf);
	while ((p = fgets (buf,STRINGLENGTH,f)) != NULL) {
		if ((q = strchr (p,'\n')) != NULL)  *q = '\0';
		if (strchr ("#;:",*p))  continue;
		q = nxtarg (&p,"= \t");
		p = skipover (p," \t");
		if (*p == '=')  p++;
		p = skipover (p," \t");
		if (*p == '\0')  goaway ("error in collection/host file");
d98 1
a98 1
			if (strcmp (c->Cname, q) == 0) {
d100 6
a105 5
					q = nxtarg (&p,", \t");
					p = skipover (p," \t");
					if (*p == ',')  p++;
					p = skipover (p," \t");
					(void) Tinsert (&c->Chtree,q,FALSE);
d108 2
a109 1
			while ((c = c->Cnext) != NULL && c->Chtree != NULL);
d111 4
a114 2
		for (c = firstC; c && c->Chtree != NULL; c = c->Cnext);
		if (c == NULL) break;
d116 3
a118 2
	(void) fclose (f);
	if (c == NULL)  return;
d120 3
a122 2
		logerr ("Host for collection %s not found",c->Cname);
		while ((c = c->Cnext) != NULL && c->Chtree != NULL);
d124 1
a124 1
	logquit (1,"Hosts not found for all collections");
@


1.5
log
@snprintf this thing
@
text
@d1 1
a1 1
/*	$OpenBSD: supcname.c,v 1.4 1997/04/01 07:35:36 todd Exp $	*/
d19 1
a19 1
 *  Software Distribution Coordinator  or  Software_Distribution@@CS.CMU.EDU
d31 3
@


1.4
log
@This merges in the latest NetBSD sup source.
- removed $Log: ...$ tags to not waste space in the repository
- now doesn't segfault on the alpha!

Note:
To compile sup on systems other than *BSD, you'll need a copy of
vis.c, vis.h, daemon.c, and sys/cdefs.h.  At least the first two
(for OSF/1).

From NetBSD changelog description (for credit where due):
.... 1996/12/23 19:42:05  christos
- add missing prototypes.
- fix function call inconsistencies
- fix int <-> long and pointer conversions
It should run now on 64 bit machines...

....  1996/12/31 18:08:00  christos
64 bit patches (mostly long -> time_t) from Matthew Jacob (?)
sup now works on the alpha!
@
text
@d1 1
a1 1
/*	$OpenBSD: supcname.c,v 1.3 1997/01/17 07:18:08 millert Exp $	*/
d75 1
a75 1
	(void) sprintf (buf,FILEHOSTS,DEFDIR);
@


1.3
log
@more r?index -> strr?chr
@
text
@d1 1
a1 1
/*	$OpenBSD: supcname.c,v 1.2 1996/06/26 05:39:53 deraadt Exp $	*/
a30 16
 * $Log: supcname.c,v $
 * Revision 1.2  1996/06/26 05:39:53  deraadt
 * rcsid
 *
 * Revision 1.1  1995/12/16 11:46:58  deraadt
 * add sup to the tree
 *
 * Revision 1.2  1995/09/16 19:12:14  glass
 * if the function returns nothing, declare it void
 *
 * Revision 1.1.1.1  1993/05/21 14:52:18  cgd
 * initial import of CMU's SUP to NetBSD
 *
 * Revision 1.4  92/08/11  12:07:32  mrt
 * 	Added copyright.
 * 	[92/08/10            mrt]
d52 1
d79 1
a79 1
		if (q = strchr (p,'\n'))  *q = '\0';
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d32 3
d94 2
a95 2
		if (q = index (p,'\n'))  *q = '\0';
		if (index ("#;:",*p))  continue;
@


1.1
log
@add sup to the tree
@
text
@d1 2
d32 3
@
