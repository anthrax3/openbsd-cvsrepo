head	1.9;
access;
symbols
	OPENBSD_4_8:1.8.0.36
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.32
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.34
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.30
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.28
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.26
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.24
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.22
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.20
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.18
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.16
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.14
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.12
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.10
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.8
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.8.0.6
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.4
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.4
	OPENBSD_2_8:1.4.0.2
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.3.0.14
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.12
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.10
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.9
date	2010.10.18.20.54.00;	author deraadt;	state dead;
branches;
next	1.8;

1.8
date	2002.02.19.19.39.39;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2001.05.04.22.16.15;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.05.02.22.56.52;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.04.29.21.52.14;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.06.29.00.23.13;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.04.01.07.35.08;	author todd;	state Exp;
branches
	1.3.14.1;
next	1.2;

1.2
date	96.06.26.05.39.42;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.12.16.11.46.47;	author deraadt;	state Exp;
branches;
next	;

1.3.14.1
date	2000.10.07.04.27.41;	author jason;	state Exp;
branches;
next	;


desc
@@


1.9
log
@sup is no longer used. reminded by pirofti and jmc
@
text
@/*	$OpenBSD: log.c,v 1.8 2002/02/19 19:39:39 millert Exp $	*/

/*
 * Copyright (c) 1992 Carnegie Mellon University
 * All Rights Reserved.
 * 
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie Mellon
 * the rights to redistribute these changes.
 */
/*
 * Logging support for SUP
 **********************************************************************
 * HISTORY
 * Revision 1.5  92/08/11  12:03:43  mrt
 * 	Brad's delinting and variable argument list usage
 * 	changes. Added copyright.
 * 
 * Revision 1.3  89/08/15  15:30:37  bww
 * 	Updated to use v*printf() in place of _doprnt().
 * 	From "[89/04/19            mja]" at CMU.
 * 	[89/08/15            bww]
 * 
 * 27-Dec-87  Glenn Marcy (gm0w) at Carnegie-Mellon University
 *	Added check to allow logopen() to be called multiple times.
 *
 * 20-May-87  Glenn Marcy (gm0w) at Carnegie-Mellon University
 *	Created.
 *
 **********************************************************************
 */

#include <stdio.h>
#include <syslog.h>
#include <c.h>
#include "supcdefs.h"
#include "supextern.h"

static int opened = 0;

void
logopen(program)
	char *program;
{
	if (opened)
		return;
	openlog(program, LOG_PID, LOG_DAEMON);
	opened++;
}

void
logquit(int retval, char *fmt, ...)
{
	char buf[STRINGLENGTH];
	va_list ap;

	va_start(ap,fmt);
	vsnprintf(buf, sizeof(buf), fmt, ap);
	va_end(ap);
	if (opened) {
		syslog(LOG_ERR, "%s", buf);
		closelog();
		exit(retval);
	}
	quit(retval, "SUP: %s\n", buf);
}

void
logerr(char *fmt,...)
{
	char buf[STRINGLENGTH];
	va_list ap;

	va_start(ap,fmt);
	vsnprintf(buf, sizeof(buf), fmt, ap);
	va_end(ap);
	if (opened) {
		syslog(LOG_ERR, "%s", buf);
		return;
	}
	fprintf(stderr, "SUP: %s\n", buf);
	(void) fflush(stderr);
}

void
loginfo(char *fmt,...)
{
	char buf[STRINGLENGTH];
	va_list ap;

	va_start(ap,fmt);
	vsnprintf(buf, sizeof(buf), fmt, ap);
	va_end(ap);
	if (opened) {
		syslog(LOG_INFO, "%s", buf);
		return;
	}
	printf ("%s\n", buf);
	(void) fflush(stdout);
}

#ifdef LIBWRAP
#include <tcpd.h>          
#ifndef LIBWRAP_ALLOW_FACILITY
# define LIBWRAP_ALLOW_FACILITY LOG_AUTH
#endif
#ifndef LIBWRAP_ALLOW_SEVERITY
# define LIBWRAP_ALLOW_SEVERITY LOG_INFO
#endif
#ifndef LIBWRAP_DENY_FACILITY
# define LIBWRAP_DENY_FACILITY LOG_AUTH
#endif  
#ifndef LIBWRAP_DENY_SEVERITY 
# define LIBWRAP_DENY_SEVERITY LOG_WARNING
#endif
int allow_severity = LIBWRAP_ALLOW_FACILITY|LIBWRAP_ALLOW_SEVERITY;
int deny_severity = LIBWRAP_DENY_FACILITY|LIBWRAP_DENY_SEVERITY;

void
logdeny(char *fmt,...)
{
	char buf[STRINGLENGTH];
	va_list ap;

	va_start(ap,fmt);
	vsnprintf(buf, sizeof(buf), fmt, ap);
	va_end(ap);
	if (opened) {
		syslog(deny_severity, "%s", buf);
		return;
	}
	printf("%s\n", buf);
	(void) fflush(stdout);
}

void
logallow(char *fmt,...)
{
	char buf[STRINGLENGTH];
	va_list ap;

	va_start(ap,fmt);
	vsnprintf(buf, sizeof(buf), fmt, ap);
	va_end(ap);
	if (opened) {
		syslog(allow_severity, "%s", buf);
		return;
	}
	printf("%s\n",buf);
	(void) fflush(stdout);
}
#endif /*  LIBWRAP */
@


1.8
log
@We live in an ANSI C world.  Remove lots of gratuitous #ifdef __STDC__ cruft.
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.7 2001/05/04 22:16:15 millert Exp $	*/
@


1.7
log
@o kill register
o lots of KNF
o passes -Wall
o fix some [ug]id_t vs. int issues
o use strlcpy/strlcat in favor of strncpy/strncat
o use mem* routines everywhere instead of old b* ones
o marked several questionable things for later fixing
o kill ci.c and cvt.c -- we don't use them
o kill read_line.c since it requires fgetln() (bad for portability)
o kill salloc.c since it is the same as strup()
o Replaced some #ifdef __OpenBSD__ with better tests
o remaining problems: malloc return values are rarely checked, select misuse
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.6 2001/05/02 22:56:52 millert Exp $	*/
a67 1
#ifdef __STDC__
a68 5
#else
/*VARARGS*//*ARGSUSED*/
logquit(va_alist)
va_dcl
#endif
a72 1
#ifdef __STDC__
a73 8
#else
	int retval;
	char *fmt;

	va_start(ap);
	retval = va_arg(ap,int);
	fmt = va_arg(ap,char *);
#endif
a84 1
#ifdef __STDC__
a85 5
#else
/*VARARGS*//*ARGSUSED*/
logerr(va_alist)
va_dcl
#endif
a89 1
#ifdef __STDC__
a90 6
#else
	char *fmt;

	va_start(ap);
	fmt = va_arg(ap,char *);
#endif
a101 1
#ifdef __STDC__
a102 5
#else
/*VARARGS*//*ARGSUSED*/
loginfo(va_alist)
va_dcl
#endif
a106 1
#ifdef __STDC__
a107 6
#else
	char *fmt;

	va_start(ap);
	fmt = va_arg(ap,char *);
#endif
a135 1
#ifdef __STDC__
a136 5
#else
/*VARARGS*//*ARGSUSED*/
logdeny(va_alist)
va_dcl
#endif
a140 1
#ifdef __STDC__
a141 6
#else
	char *fmt;

	va_start(ap);
	fmt = va_arg(ap, char *);
#endif
a152 1
#ifdef __STDC__
a153 5
#else
/*VARARGS*//*ARGSUSED*/
logallow(va_alist)
va_dcl
#endif
a157 1
#ifdef __STDC__
a158 6
#else
	char *fmt;

	va_start(ap);
	fmt = va_arg(ap,char *);
#endif
@


1.6
log
@Sync with NetBSD.  Notable changes:
 o Add libwrap support to supfilesrv, conditioned by #ifdef LIBWRAP
   (on by default). <bouyer@@netbsd.org>
 o Renamed '-l' (the 'live' mode) to '-d' and '-l' is now used to
   enable logging of successfull connections. <bouyer@@netbsd.org>
 o Don't botch varargs: the are not always an array of void * in the stack...
   Write a separate function to convert a list of function parameters to
   explain why execv failed. <christos@@netbsd.org>
 o When in compress mode, don't overwrite the destination file directly,
   write a temp file and use rename when it is done. (From James Mathiesen
   <james@@deshaw.com>)
 o Rename errno variable to error to avoid collision with errno.h and remove
   explicit extern of errno (we get it from errno.h) <mycroft@@netbsd.org>
 o Cleanup unsigned char vs. char
 o Add -u flag, that prevents sup from attempting to restore a and m times
   on the received files.
 o Replace the provided read_line function with calls to the fparseln function
   in libutil.  Maintain compatibility on machines without fparseln through
   the NEED_READ_LINE define.
 o Rename login() to suplogin() to avoid name collition in util.h
 o If rmdir() fails, chmod the path to have r/w/x perms and run "rm -rf"
 o avoid last.temp filename collision by using rel-suffix
 o When creating directories, make sure you remove previous non-directories
   before doing so, otherwise sup fails.
 o Add -q flag to supscan for quiet operation.
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.5 2001/04/29 21:52:14 millert Exp $	*/
d50 1
a50 1
#include <sys/syslog.h>
d59 1
a59 1
char *program;
d61 3
a63 2
	if (opened)  return;
	openlog(program,LOG_PID,LOG_DAEMON);
d69 1
a69 1
logquit(int retval,char *fmt,...)
d92 3
a94 3
		syslog (LOG_ERR, "%s", buf);
		closelog ();
		exit (retval);
d96 1
a96 1
	quit (retval,"SUP: %s\n", buf);
d122 1
a122 1
		syslog (LOG_ERR, "%s", buf);
d125 2
a126 2
	fprintf (stderr,"SUP: %s\n",buf);
	(void) fflush (stderr);
d152 1
a152 1
		syslog (LOG_INFO, "%s", buf);
d155 2
a156 2
	printf ("%s\n",buf);
	(void) fflush (stdout);
d194 1
a194 1
	fmt = va_arg(ap,char *);
d199 1
a199 1
		syslog (deny_severity, "%s", buf);
d202 2
a203 2
	printf ("%s\n",buf);
	(void) fflush (stdout);
d229 1
a229 1
		syslog (allow_severity, "%s", buf);
d232 2
a233 2
	printf ("%s\n",buf);
	(void) fflush (stdout);
a234 1

@


1.5
log
@Add a bunch of old revision history comments that we are missing to
make diffing easier.  No code changes...
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.4 2000/06/29 00:23:13 millert Exp $	*/
d157 79
@


1.4
log
@use %s with syslog
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.3 1997/04/01 07:35:08 todd Exp $	*/
d19 1
a19 1
 *  Software Distribution Coordinator  or  Software_Distribution@@CS.CMU.EDU
d31 8
@


1.3
log
@This merges in the latest NetBSD sup source.
- removed $Log: ...$ tags to not waste space in the repository
- now doesn't segfault on the alpha!

Note:
To compile sup on systems other than *BSD, you'll need a copy of
vis.c, vis.h, daemon.c, and sys/cdefs.h.  At least the first two
(for OSF/1).

From NetBSD changelog description (for credit where due):
.... 1996/12/23 19:42:05  christos
- add missing prototypes.
- fix function call inconsistencies
- fix int <-> long and pointer conversions
It should run now on 64 bit machines...

....  1996/12/31 18:08:00  christos
64 bit patches (mostly long -> time_t) from Matthew Jacob (?)
sup now works on the alpha!
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.2 1996/06/26 05:39:42 deraadt Exp $	*/
d83 1
a83 1
		syslog (LOG_ERR,buf);
d113 1
a113 1
		syslog (LOG_ERR,buf);
d143 1
a143 1
		syslog (LOG_INFO,buf);
@


1.3.14.1
log
@Pull in patch from current:
Fix (millert):
use %s with syslog
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.4 2000/06/29 00:23:13 millert Exp $	*/
d83 1
a83 1
		syslog (LOG_ERR, "%s", buf);
d113 1
a113 1
		syslog (LOG_ERR, "%s", buf);
d143 1
a143 1
		syslog (LOG_INFO, "%s", buf);
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a30 15
 * $Log: log.c,v $
 * Revision 1.1  1995/12/16 11:46:47  deraadt
 * add sup to the tree
 *
 * Revision 1.1.1.1  1993/05/21 14:52:17  cgd
 * initial import of CMU's SUP to NetBSD
 *
 * Revision 1.5  92/08/11  12:03:43  mrt
 * 	Brad's delinting and variable argument list usage
 * 	changes. Added copyright.
 * 
 * Revision 1.3  89/08/15  15:30:37  bww
 * 	Updated to use v*printf() in place of _doprnt().
 * 	From "[89/04/19            mja]" at CMU.
 * 	[89/08/15            bww]
d44 2
a45 11
#if __STDC__
#include <stdarg.h>
#else
#include <varargs.h>
#endif
#include "sup.h"

#ifdef	lint
/*VARARGS1*//*ARGSUSED*/
static void quit(status) {};
#endif	/* lint */
d49 1
d58 2
a59 1
#if __STDC__
a66 4
#if !__STDC__
	int retval;
	char *fmt;
#endif
d70 1
a70 1
#if __STDC__
d73 3
d87 1
a87 1
	quit (retval,"SUP: %s\n",buf);
d90 2
a91 1
#if __STDC__
a98 3
#if !__STDC__
	char *fmt;
#endif
d102 1
a102 1
#if __STDC__
d105 2
d120 2
a121 1
#if __STDC__
a128 3
#if !__STDC__
	char *fmt;
#endif
d132 1
a132 1
#if __STDC__
d135 2
@


1.1
log
@add sup to the tree
@
text
@d1 2
d32 3
@
