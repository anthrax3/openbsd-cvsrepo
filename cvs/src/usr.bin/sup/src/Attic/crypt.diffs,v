head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.0.58
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.54
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.56
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.52
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.50
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.48
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.46
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.44
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.42
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.40
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.38
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.36
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.34
	OPENBSD_3_6_BASE:1.1
	OPENBSD_3_5:1.1.0.32
	OPENBSD_3_5_BASE:1.1
	OPENBSD_3_4:1.1.0.30
	OPENBSD_3_4_BASE:1.1
	OPENBSD_3_3:1.1.0.28
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.26
	OPENBSD_3_2_BASE:1.1
	OPENBSD_3_1:1.1.0.24
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.22
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.20
	OPENBSD_2_8:1.1.0.18
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.16
	OPENBSD_2_7_BASE:1.1
	OPENBSD_2_6:1.1.0.14
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.12
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.10
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.8
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2010.10.18.20.54.00;	author deraadt;	state dead;
branches;
next	1.1;

1.1
date	95.12.16.11.46.43;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.2
log
@sup is no longer used. reminded by pirofti and jmc
@
text
@118,$c
void encode (in,out,count)
char *in,*out;
int count;
{
	decode (in,out,count);
}
.
109,113c
			nr2 = n2;
.
103c
		*outp++ = i;
.
95,101c
	while(count -- > 0) {
		i = *inp++;
		nr1 = n1;
.
93a
	inp = in;
	outp = out;
.
86,90c
	return (SCMOK);
}

void decode (in,out,count)
char *in,*out;
register int count;
{
	register i, n1, n2, nr1, nr2;
	char *inp, *outp;
.
81,84c
	if (cryptflag == 0) {
		if (cryptsize > 0)  free (cryptbuf);
		cryptsize = 0;
	} else if (x > cryptsize) {
		if (cryptsize > 0)  free (cryptbuf);
		cryptbuf = malloc ((unsigned)x+1);
		if (cryptbuf == NULL)
			return (scmerr (-1,"Can't allocate encryption buffer"));
		cryptsize = x;
.
78,79c
	static int cryptsize = 0;	/* size of current cryptbuf */
.
75,76c
int getcryptbuf (x)
int x;
.
72a
	return (SCMOK);
.
54d
42,48c
	cryptflag = 1;
	for (i=0; i<ROTORSZ; i++)  t1[i] = t2[i] = t3[i] = 0;
	(void) strncpy(buf, pw, 8);
	(void) strncpy(buf, crypt(buf, buf), 13);
.
27,40c
	if (pw == NULL) {
		cryptflag = 0;
		(void) getcryptbuf (0);
		return (SCMOK);
.
23d
19c
netcrypt(pw)
.
12,17c
static char t1[ROTORSZ];
static char t2[ROTORSZ];
static char t3[ROTORSZ];
static char buf[13];
int cryptflag = 0;		/* whether to encrypt/decrypt data */
char *cryptbuf;			/* buffer for data encryption/decryption */
.
9a
#include "sup.h"

extern char *malloc();

.
w netcrypt.c
@


1.1
log
@add sup to the tree
@
text
@@

