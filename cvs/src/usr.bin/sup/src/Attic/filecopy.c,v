head	1.5;
access;
symbols
	OPENBSD_4_8:1.4.0.38
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.34
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.36
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.32
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.30
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.28
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.26
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.24
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.22
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.20
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.18
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.16
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.14
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.12
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.10
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.8
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.6
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.18
	OPENBSD_2_8:1.3.0.16
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.14
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.12
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.10
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.5
date	2010.10.18.20.54.00;	author deraadt;	state dead;
branches;
next	1.4;

1.4
date	2001.05.04.22.16.15;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.04.01.07.35.05;	author todd;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.39.41;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.12.16.11.46.46;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.5
log
@sup is no longer used. reminded by pirofti and jmc
@
text
@/*	$OpenBSD: filecopy.c,v 1.4 2001/05/04 22:16:15 millert Exp $	*/

/*
 * Copyright (c) 1991 Carnegie Mellon University
 * All Rights Reserved.
 * 
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator   or   Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the rights
 * to redistribute these changes.
 */
/*  filecopy  --  copy a file from here to there
 *
 *  Usage:  i = filecopy (here,there);
 *	int i, here, there;
 *
 *  Filecopy performs a fast copy of the file "here" to the
 *  file "there".  Here and there are both file descriptors of
 *  open files; here is open for input, and there for output.
 *  Filecopy returns 0 if all is OK; -1 on error.
 *
 *  I have performed some tests for possible improvements to filecopy.
 *  Using a buffer size of 10240 provides about a 1.5 times speedup
 *  over 512 for a file of about 200,000 bytes.  Of course, other
 *  buffer sized should also work; this is a rather arbitrary choice.
 *  I have also tried inserting special startup code to attempt
 *  to align either the input or the output file to lie on a
 *  physical (512-byte) block boundary prior to the big loop,
 *  but this presents only a small (about 5% speedup, so I've
 *  canned that code.  The simple thing seems to be good enough.
 *
 *  HISTORY
 * 20-Nov-79  Steven Shafer (sas) at Carnegie-Mellon University
 *	Rewritten for VAX; same as "filcopy" on PDP-11.  Bigger buffer
 *	size (20 physical blocks) seems to be a big win; aligning things
 *	on block boundaries seems to be a negligible improvement at
 *	considerable cost in complexity.
 *
 */

#include "supcdefs.h"
#include "supextern.h"

#define BUFFERSIZE 10240

int
filecopy (here, there)
	int here, there;
{
	int kount;
	char buffer[BUFFERSIZE];

	kount = 0;
	while (kount == 0 && (kount = read(here, buffer, BUFFERSIZE)) > 0)
		kount -= write(there, buffer, kount);
	return (kount ? -1 : 0);
}
@


1.4
log
@o kill register
o lots of KNF
o passes -Wall
o fix some [ug]id_t vs. int issues
o use strlcpy/strlcat in favor of strncpy/strncat
o use mem* routines everywhere instead of old b* ones
o marked several questionable things for later fixing
o kill ci.c and cvt.c -- we don't use them
o kill read_line.c since it requires fgetln() (bad for portability)
o kill salloc.c since it is the same as strup()
o Replaced some #ifdef __OpenBSD__ with better tests
o remaining problems: malloc return values are rarely checked, select misuse
@
text
@d1 1
a1 1
/*	$OpenBSD: filecopy.c,v 1.3 1997/04/01 07:35:05 todd Exp $	*/
@


1.3
log
@This merges in the latest NetBSD sup source.
- removed $Log: ...$ tags to not waste space in the repository
- now doesn't segfault on the alpha!

Note:
To compile sup on systems other than *BSD, you'll need a copy of
vis.c, vis.h, daemon.c, and sys/cdefs.h.  At least the first two
(for OSF/1).

From NetBSD changelog description (for credit where due):
.... 1996/12/23 19:42:05  christos
- add missing prototypes.
- fix function call inconsistencies
- fix int <-> long and pointer conversions
It should run now on 64 bit machines...

....  1996/12/31 18:08:00  christos
64 bit patches (mostly long -> time_t) from Matthew Jacob (?)
sup now works on the alpha!
@
text
@d1 1
a1 1
/*	$OpenBSD: filecopy.c,v 1.2 1996/06/26 05:39:41 deraadt Exp $	*/
a55 1
#define BUFFERSIZE 10240
d59 5
a63 2
int filecopy (here,there)
int here,there;
d65 1
a65 1
	register int kount;
d67 1
d69 2
a70 2
	while (kount == 0 && (kount=read(here,buffer,BUFFERSIZE)) > 0)
		kount -= write (there,buffer,kount);
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d57 2
@


1.1
log
@add sup to the tree
@
text
@d1 2
@
