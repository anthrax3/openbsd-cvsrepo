head	1.13;
access;
symbols
	OPENBSD_4_8:1.12.0.34
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.30
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.32
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.28
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.26
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.24
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.22
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.20
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.18
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.16
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.14
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.12
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.12.0.10
	OPENBSD_3_6_BASE:1.12
	OPENBSD_3_5:1.12.0.8
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.12.0.6
	OPENBSD_3_4_BASE:1.12
	OPENBSD_3_3:1.12.0.4
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.12.0.2
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.18
	OPENBSD_2_8:1.4.0.16
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.14
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.12
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.10
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.8
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.6
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.13
date	2010.10.18.20.54.00;	author deraadt;	state dead;
branches;
next	1.12;

1.12
date	2002.08.12.00.42.56;	author aaron;	state Exp;
branches;
next	1.11;

1.11
date	2002.06.12.06.07.16;	author mpech;	state Exp;
branches;
next	1.10;

1.10
date	2002.02.19.19.39.39;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.02.16.21.27.54;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2001.11.29.18.21.23;	author mpech;	state Exp;
branches;
next	1.7;

1.7
date	2001.05.04.22.16.17;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.05.02.22.56.54;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.04.29.21.52.16;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.04.01.07.35.45;	author todd;	state Exp;
branches;
next	1.3;

1.3
date	96.07.31.11.11.33;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.39.55;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.12.16.11.47.00;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.13
log
@sup is no longer used. reminded by pirofti and jmc
@
text
@/*	$OpenBSD: supmsg.c,v 1.12 2002/08/12 00:42:56 aaron Exp $	*/

/*
 * Copyright (c) 1992 Carnegie Mellon University
 * All Rights Reserved.
 * 
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie Mellon
 * the rights to redistribute these changes.
 */
/*
 **********************************************************************
 * HISTORY
 *
 * 7-July-93  Nate Williams at Montana State University
 *	Modified SUP to use gzip based compression when sending files
 *	across the network to save BandWidth
 *
 * Revision 2.4  92/09/09  22:05:17  mrt
 * 	Moved PFI definition under __STDC__ conditional since it
 * 	is already defined in libc.h in this case.
 * 	[92/09/01            mrt]
 * 
 * Revision 2.3  92/08/11  12:08:12  mrt
 * 	Added copyright
 * 	[92/08/10            mrt]
 * 	Brad's changes: Delinted, Incorporated updated variable 
 * 	argument list usage from old msgxfer.c
 * 	[92/07/24            mrt]
 * 
 * Revision 2.2  89/08/23  15:02:56  gm0w
 * 	Created from separate message modules.
 * 	[89/08/14            gm0w]
 * 
 **********************************************************************
 */
#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <libc.h>
#include <c.h>
#include "supcdefs.h"
#include "supextern.h"
#define MSGSUBR
#define MSGFILE
#include "supmsg.h"

/*
 * signon message
 */
extern int	pgmver;			/* program version of partner */
extern int	pgmversion;		/* my program version */
extern char	*scmver;		/* scm version of partner */
extern pid_t	fspid;			/* process id of fileserver */

static int refuseone(TREE *, void *);
static int listone(TREE *, void *);
static int needone(TREE *, void *);
static int denyone(TREE *, void *);
static int writeone(TREE *, void *);

int
msgsignon()
{
	int x;

	if (server) {
		x = readmsg(MSGSIGNON);
		if (x == SCMOK)
			x = readint(&protver);
		if (x == SCMOK)
			x = readint(&pgmver);
		if (x == SCMOK)
			x = readstring(&scmver);
		if (x == SCMOK)
			x = readmend();
	} else {
		x = writemsg(MSGSIGNON);
		if (x == SCMOK)
			x = writeint(PROTOVERSION);
		if (x == SCMOK)
			x = writeint(pgmversion);
		if (x == SCMOK)
			x = writestring(scmversion);
		if (x == SCMOK)
			x = writemend();
	}
	return (x);
}

int
msgsignonack()
{
	int x;

	if (server) {
		x = writemsg(MSGSIGNONACK);
		if (x == SCMOK)
			x = writeint(PROTOVERSION);
		if (x == SCMOK)
			x = writeint(pgmversion);
		if (x == SCMOK)
			x = writestring(scmversion);
		if (x == SCMOK)
			x = writeint(fspid);
		if (x == SCMOK)
			x = writemend();
	} else {
		x = readmsg(MSGSIGNONACK);
		if (x == SCMOK)
			x = readint(&protver);
		if (x == SCMOK)
			x = readint(&pgmver);
		if (x == SCMOK)
			x = readstring(&scmver);
		if (x == SCMOK)
			x = readint(&fspid);
		if (x == SCMOK)
			x = readmend();
	}
	return (x);
}

/*
 * setup message
 */
extern int	xpatch;			/* setup crosspatch to a new client */
extern char	*xuser;			/* user,group,acct for crosspatch */
extern char	*collname;		/* base directory */
extern char	*basedir;		/* base directory */
extern int	basedev;		/* base directory device */
extern int	baseino;		/* base directory inode */
extern time_t	lasttime;		/* time of last upgrade */
extern int	listonly;		/* only listing files, no data xfer */
extern int	newonly;		/* only send new files */
extern char	*release;		/* release name */
extern int	setupack;		/* ack return value for setup */

int
msgsetup()
{
	int x;

	if (server) {
		x = readmsg(MSGSETUP);
		if (x != SCMOK)
			return (x);
		if (protver >= 7) {
			x = readint(&xpatch);
			if (x != SCMOK)
				return (x);
		} else
			xpatch = FALSE;
		if (xpatch) {
			x = readstring(&xuser);
			if (x != SCMOK)
				return (x);
			return (readmend());
		}
		x = readstring(&collname);
		if (x == SCMOK)
			x = readint((int *)&lasttime);
		if (x == SCMOK)
			x = readstring(&basedir);
		if (x == SCMOK)
			x = readint(&basedev);
		if (x == SCMOK)
			x = readint(&baseino);
		if (x == SCMOK)
			x = readint(&listonly);
		if (x == SCMOK)
			x = readint(&newonly);
		if (x == SCMOK) {
			if (protver < 6)
				release = NULL;
			else
				x = readstring(&release);
		}
		if (x == SCMOK)
			x = readmend();
	} else {
		x = writemsg(MSGSETUP);
		if (x != SCMOK)
			return (x);
		if (protver >= 7) {
			x = writeint(xpatch);
			if (x != SCMOK)
				return (x);
		}
		if (xpatch) {
			x = writestring(xuser);
			if (x != SCMOK)
				return (x);
			return (writemend());
		}
		if (x == SCMOK)
			x = writestring(collname);
		if (x == SCMOK)
			x = writeint((int)lasttime);
		if (x == SCMOK)
			x = writestring(basedir);
		if (x == SCMOK)
			x = writeint(basedev);
		if (x == SCMOK)
			x = writeint(baseino);
		if (x == SCMOK)
			x = writeint(listonly);
		if (x == SCMOK)
			x = writeint(newonly);
		if (x == SCMOK && protver >= 6)
			x = writestring(release);
		if (x == SCMOK)
			x = writemend();
	}
	return (x);
}

int
msgsetupack()
{

	if (server)
		return (writemint(MSGSETUPACK, setupack));
	return (readmint(MSGSETUPACK, &setupack));
}

/*
 * crypt test message
 */
extern char	*crypttest;		/* encryption test string */

int
msgcrypt()
{

	if (server)
		return (readmstr(MSGCRYPT, &crypttest));
	return (writemstr(MSGCRYPT, crypttest));
}

int
msgcryptok()
{

	if (server)
		return (writemnull(MSGCRYPTOK));
	return (readmnull(MSGCRYPTOK));
}

/*
 * login message
 */
extern char	*logcrypt;		/* login encryption test */
extern char	*loguser;		/* login username */
extern char	*logpswd;		/* password for login */
extern int	logack;			/* login ack status */
extern char	*logerror;		/* error from login */

int
msglogin()
{
	int x;

	if (server) {
		x = readmsg(MSGLOGIN);
		if (x == SCMOK)
			x = readstring(&logcrypt);
		if (x == SCMOK)
			x = readstring(&loguser);
		if (x == SCMOK)
			x = readstring(&logpswd);
		if (x == SCMOK)
			x = readmend();
	} else {
		x = writemsg(MSGLOGIN);
		if (x == SCMOK)
			x = writestring(logcrypt);
		if (x == SCMOK)
			x = writestring(loguser);
		if (x == SCMOK)
			x = writestring(logpswd);
		if (x == SCMOK)
			x = writemend();
	}
	return (x);
}

int
msglogack()
{
	int x;

	if (server) {
		x = writemsg(MSGLOGACK);
		if (x == SCMOK)
			x = writeint(logack);
		if (x == SCMOK)
			x = writestring(logerror);
		if (x == SCMOK)
			x = writemend();
	} else {
		x = readmsg(MSGLOGACK);
		if (x == SCMOK)
			x = readint(&logack);
		if (x == SCMOK)
			x = readstring(&logerror);
		if (x == SCMOK)
			x = readmend();
	}
	return (x);
}

/*
 * refuse list message
 */
extern TREE	*refuseT;		/* tree of files to refuse */

static int
refuseone(t, v)
	TREE *t;
	void *v;
{
	return (writestring(t->Tname));
}

int
msgrefuse()
{
	int x;

	if (server) {
		char *name;

		x = readmsg(MSGREFUSE);
		if (x == SCMOK)
			x = readstring(&name);
		while (x == SCMOK) {
			if (name == NULL)
				break;
			(void) Tinsert(&refuseT, name, FALSE);
			free(name);
			x = readstring(&name);
		}
		if (x == SCMOK)
			x = readmend();
	} else {
		x = writemsg(MSGREFUSE);
		if (x == SCMOK)
			x = Tprocess(refuseT, refuseone, NULL);
		if (x == SCMOK)
			x = writestring(NULL);
		if (x == SCMOK)
			x = writemend();
	}
	return (x);
}

/*
 * list files message
 */
extern TREE	*listT;			/* tree of files to list */
extern time_t	scantime;		/* time that collection was scanned */

static int
listone(t, v)
	TREE *t;
	void *v;
{
	int x;

	x = writestring(t->Tname);
	if (x == SCMOK)
		x = writeint((int)t->Tmode);
	if (x == SCMOK)
		x = writeint((int)t->Tflags);
	if (x == SCMOK)
		x = writeint(t->Tmtime);
	return (x);
}

int
msglist()
{
	int x;

	if (server) {
		x = writemsg(MSGLIST);
		if (x == SCMOK)
			x = Tprocess(listT, listone, NULL);
		if (x == SCMOK)
			x = writestring(NULL);
		if (x == SCMOK)
			x = writeint((int)scantime);
		if (x == SCMOK)
			x = writemend();
	} else {
		char *name;
		int mode, flags, mtime;
		TREE *t;

		x = readmsg(MSGLIST);
		if (x == SCMOK)
			x = readstring(&name);
		while (x == SCMOK) {
			if (name == NULL)
				break;
			x = readint(&mode);
			if (x == SCMOK)
				x = readint(&flags);
			if (x == SCMOK)
				x = readint(&mtime);
			if (x != SCMOK)
				break;
			t = Tinsert(&listT, name, TRUE);
			free(name);
			t->Tmode = mode;
			t->Tflags = flags;
			t->Tmtime = mtime;
			x = readstring(&name);
		}
		if (x == SCMOK)
			x = readint((int *)&scantime);
		if (x == SCMOK)
			x = readmend();
	}
	return (x);
}

/*
 * files needed message
 */
extern TREE	*needT;			/* tree of files to need */

static int
needone(t, v)
	TREE *t;
	void *v;
{
	int x;

	x = writestring(t->Tname);
	if (x == SCMOK)
		x = writeint((t->Tflags&FUPDATE) != 0);
	return (x);
}

int msgneed()
{
	int x;

	if (server) {
		char *name;
		int update;
		TREE *t;

		x = readmsg(MSGNEED);
		if (x == SCMOK)
			x = readstring(&name);
		while (x == SCMOK) {
			if (name == NULL)
				break;
			x = readint(&update);
			if (x != SCMOK)
				break;
			t = Tinsert(&needT, name, TRUE);
			free(name);
			if (update)
				t->Tflags |= FUPDATE;
			x = readstring(&name);
		}
		if (x == SCMOK)
			x = readmend();
	} else {
		x = writemsg(MSGNEED);
		if (x == SCMOK)
			x = Tprocess(needT, needone, NULL);
		if (x == SCMOK)
			x = writestring(NULL);
		if (x == SCMOK)
			x = writemend();
	}
	return (x);
}

/*
 * files denied message
 */
extern TREE	*denyT;			/* tree of files to deny */

static int
denyone(t, v)
	TREE *t;
	void *v;
{

	return (writestring(t->Tname));
}

int
msgdeny()
{
	int x;

	if (server) {
		x = writemsg(MSGDENY);
		if (x == SCMOK)
			x = Tprocess(denyT,denyone, NULL);
		if (x == SCMOK)
			x = writestring(NULL);
		if (x == SCMOK)
			x = writemend();
	} else {
		char *name;

		x = readmsg(MSGDENY);
		if (x == SCMOK)
			x = readstring(&name);
		while (x == SCMOK) {
			if (name == NULL)
				break;
			(void) Tinsert(&denyT, name, FALSE);
			free(name);
			x = readstring(&name);
		}
		if (x == SCMOK)
			x = readmend();
	}
	return (x);
}

/*
 * send file message
 */
int
msgsend()
{

	if (server)
		return (readmnull(MSGSEND));
	return (writemnull(MSGSEND));
}

/*
 * receive file message
 */
extern TREE	*upgradeT;		/* pointer to file being upgraded */

static int
writeone(t, v)
	TREE *t;
	void *v;
{

	return (writestring(t->Tname));
}


int
msgrecv(int (*xferfile)(TREE *, va_list),...)
{
	va_list args;
	int x;
	TREE *t = upgradeT;
	va_start(args,xferfile);
	if (server) {
		x = writemsg (MSGRECV);
		if (t == NULL) {
			if (x == SCMOK)
				x = writestring(NULL);
			if (x == SCMOK)
				x = writemend();
			goto done;
		}
		if (x == SCMOK)
			x = writestring(t->Tname);
		if (x == SCMOK)
			x = writeint(t->Tmode);
		if (t->Tmode == 0) {
			if (x == SCMOK)
				x = writemend();
			goto done;
		}
		if (x == SCMOK)
			x = writeint(t->Tflags);
		if (x == SCMOK)
			x = writestring(t->Tuser);
		if (x == SCMOK)
			x = writestring(t->Tgroup);
		if (x == SCMOK)
			x = writeint(t->Tmtime);
		if (x == SCMOK)
			x = Tprocess(t->Tlink, writeone, NULL);
		if (x == SCMOK)
			x = writestring(NULL);
		if (x == SCMOK)
			x = Tprocess(t->Texec,writeone, NULL);
		if (x == SCMOK)
			x = writestring(NULL);
		if (x == SCMOK)
			x = (*xferfile)(t, args);
		if (x == SCMOK)
			x = writemend();
	} else {
		char *linkname, *execcmd;

		if (t == NULL) {
			x = SCMERR;
			goto done;
		}
		x = readmsg (MSGRECV);
		if (x == SCMOK)
			x = readstring(&t->Tname);
		if (x == SCMOK && t->Tname == NULL) {
			x = readmend();
			if (x == SCMOK)
				x = (*xferfile)(NULL, args);
			goto done;
		}
		if (x == SCMOK)
			x = readint(&t->Tmode);
		if (t->Tmode == 0) {
			x = readmend();
			if (x == SCMOK)
				x = (*xferfile)(t, args);
			goto done;
		}
		if (x == SCMOK)
			x = readint(&t->Tflags);
		if (x == SCMOK)
			x = readstring(&t->Tuser);
		if (x == SCMOK)
			x = readstring(&t->Tgroup);
		if (x == SCMOK)
			x = readint(&t->Tmtime);
		t->Tlink = NULL;
		if (x == SCMOK)
			x = readstring(&linkname);
		while (x == SCMOK) {
			if (linkname == NULL)
				break;
			(void) Tinsert(&t->Tlink, linkname, FALSE);
			free(linkname);
			x = readstring(&linkname);
		}
		t->Texec = NULL;
		if (x == SCMOK)
			x = readstring(&execcmd);
		while (x == SCMOK) {
			if (execcmd == NULL)
				break;
			(void) Tinsert(&t->Texec, execcmd, FALSE);
			free(execcmd);
			x = readstring(&execcmd);
		}
		if (x == SCMOK)
			x = (*xferfile)(t, args);
		if (x == SCMOK)
			x = readmend();
	}

done:
	va_end(args);
	return (x);
}

/*
 * protocol done message
 */
extern int	doneack;
extern char	*donereason;

int
msgdone()
{
	int x;

	if (protver < 6) {
		printf("Error, msgdone should not have been called.");
		return (SCMERR);
	}
	if (server) {
		x = readmsg(MSGDONE);
		if (x == SCMOK)
			x = readint(&doneack);
		if (x == SCMOK)
			x = readstring(&donereason);
		if (x == SCMOK)
			x = readmend();
	} else {
		x = writemsg(MSGDONE);
		if (x == SCMOK)
			x = writeint(doneack);
		if (x == SCMOK)
			x = writestring(donereason);
		if (x == SCMOK)
			x = writemend();
	}
	return (x);
}

/*
 * go away message
 */
extern char	*goawayreason;		/* reason for goaway */

int
msggoaway()
{

	return (writemstr(MSGGOAWAY, goawayreason));
}

/*
 * cross-patch protocol message
 */
extern int	xargc;			/* arg count for crosspatch */
extern char	**xargv;		/* arg array for crosspatch */

int
msgxpatch()
{
	int x, i;

	if (server) {
		x = readmsg(MSGXPATCH);
		if (x != SCMOK)
			return (x);
		x = readint(&xargc);
		if (x != SCMOK)
			return (x);
		xargc += 2;
		xargv = (char **)calloc(xargc+1, sizeof (char *));
		if (xargv == NULL)
			return (SCMERR);
		for (i = 2; i < xargc; i++) {
			x = readstring(&xargv[i]);
			if (x != SCMOK)
				return (x);
		}
		x = readmend();
	} else {
		x = writemsg(MSGXPATCH);
		if (x != SCMOK)
			return (x);
		x = writeint(xargc);
		if (x != SCMOK)
			return (x);
		for (i = 0; i < xargc; i++) {
			x = writestring(xargv[i]);
			if (x != SCMOK)
				return (x);
		}
		x = writemend();
	}
	return (x);
}

/*
 * Compression check protocol message
 */
extern int	docompress;		/* Compress file before sending? */

int
msgcompress()
{

	if (server)
		return (readmint(MSGCOMPRESS, &docompress));
	return (writemint(MSGCOMPRESS, docompress));
}
@


1.12
log
@Swap args to calloc(3) so they are in the correct order; art@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: supmsg.c,v 1.11 2002/06/12 06:07:16 mpech Exp $	*/
@


1.11
log
@a real pid_t cleanup.

espie@@ ok for make/,
deraadt@@ one extra eye,
millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: supmsg.c,v 1.10 2002/02/19 19:39:39 millert Exp $	*/
d748 1
a748 1
		xargv = (char **)calloc(sizeof (char *), xargc+1);
@


1.10
log
@We live in an ANSI C world.  Remove lots of gratuitous #ifdef __STDC__ cruft.
@
text
@d1 1
a1 1
/*	$OpenBSD: supmsg.c,v 1.9 2002/02/16 21:27:54 millert Exp $	*/
d70 1
a70 1
extern int	fspid;			/* process id of fileserver */
@


1.9
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: supmsg.c,v 1.8 2001/11/29 18:21:23 mpech Exp $	*/
a573 1
#ifdef __STDC__
a575 6
#else
/*VARARGS*//*ARGSUSED*/
int
msgrecv(va_alist)
va_dcl
#endif
a579 1
#ifdef __STDC__
a580 6
#else
	int (*xferfile)(TREE *, void *);

	va_start(args);
	xferfile = va_arg(args, int (*)(TREE *, void *));
#endif
@


1.8
log
@make sure that va_start() has matching va_end()

millert@@ help&ok
@
text
@d1 1
a1 1
/*	$OpenBSD: supmsg.c,v 1.7 2001/05/04 22:16:17 millert Exp $	*/
d72 5
a76 5
static int refuseone __P((TREE *, void *));
static int listone __P((TREE *, void *));
static int needone __P((TREE *, void *));
static int denyone __P((TREE *, void *));
static int writeone __P((TREE *, void *));
@


1.7
log
@o kill register
o lots of KNF
o passes -Wall
o fix some [ug]id_t vs. int issues
o use strlcpy/strlcat in favor of strncpy/strncat
o use mem* routines everywhere instead of old b* ones
o marked several questionable things for later fixing
o kill ci.c and cvt.c -- we don't use them
o kill read_line.c since it requires fgetln() (bad for portability)
o kill salloc.c since it is the same as strup()
o Replaced some #ifdef __OpenBSD__ with better tests
o remaining problems: malloc return values are rarely checked, select misuse
@
text
@d1 1
a1 1
/*	$OpenBSD: supmsg.c,v 1.6 2001/05/02 22:56:54 millert Exp $	*/
d602 1
a602 1
			return (x);
d611 1
a611 1
			return (x);
d636 4
a639 2
		if (t == NULL)
			return (SCMERR);
d647 1
a647 1
			return (x);
d655 1
a655 1
			return (x);
d690 2
@


1.6
log
@Sync with NetBSD.  Notable changes:
 o Add libwrap support to supfilesrv, conditioned by #ifdef LIBWRAP
   (on by default). <bouyer@@netbsd.org>
 o Renamed '-l' (the 'live' mode) to '-d' and '-l' is now used to
   enable logging of successfull connections. <bouyer@@netbsd.org>
 o Don't botch varargs: the are not always an array of void * in the stack...
   Write a separate function to convert a list of function parameters to
   explain why execv failed. <christos@@netbsd.org>
 o When in compress mode, don't overwrite the destination file directly,
   write a temp file and use rename when it is done. (From James Mathiesen
   <james@@deshaw.com>)
 o Rename errno variable to error to avoid collision with errno.h and remove
   explicit extern of errno (we get it from errno.h) <mycroft@@netbsd.org>
 o Cleanup unsigned char vs. char
 o Add -u flag, that prevents sup from attempting to restore a and m times
   on the received files.
 o Replace the provided read_line function with calls to the fparseln function
   in libutil.  Maintain compatibility on machines without fparseln through
   the NEED_READ_LINE define.
 o Rename login() to suplogin() to avoid name collition in util.h
 o If rmdir() fails, chmod the path to have r/w/x perms and run "rm -rf"
 o avoid last.temp filename collision by using rel-suffix
 o When creating directories, make sure you remove previous non-directories
   before doing so, otherwise sup fails.
 o Add -q flag to supscan for quiet operation.
@
text
@d1 1
a1 1
/*	$OpenBSD: supmsg.c,v 1.5 2001/04/29 21:52:16 millert Exp $	*/
d78 2
a79 1
int msgsignon ()
d81 1
a81 1
	register int x;
d84 19
a102 11
		x = readmsg (MSGSIGNON);
		if (x == SCMOK)  x = readint (&protver);
		if (x == SCMOK)  x = readint (&pgmver);
		if (x == SCMOK)  x = readstring (&scmver);
		if (x == SCMOK)  x = readmend ();
	} else {
		x = writemsg (MSGSIGNON);
		if (x == SCMOK)  x = writeint (PROTOVERSION);
		if (x == SCMOK)  x = writeint (pgmversion);
		if (x == SCMOK)  x = writestring (scmversion);
		if (x == SCMOK)  x = writemend ();
d107 29
a135 18
int msgsignonack ()
{
	register int x;

	if (server) {
		x = writemsg (MSGSIGNONACK);
		if (x == SCMOK)  x = writeint (PROTOVERSION);
		if (x == SCMOK)  x = writeint (pgmversion);
		if (x == SCMOK)  x = writestring (scmversion);
		if (x == SCMOK)  x = writeint (fspid);
		if (x == SCMOK)  x = writemend ();
	} else {
		x = readmsg (MSGSIGNONACK);
		if (x == SCMOK)  x = readint (&protver);
		if (x == SCMOK)  x = readint (&pgmver);
		if (x == SCMOK)  x = readstring (&scmver);
		if (x == SCMOK)  x = readint (&fspid);
		if (x == SCMOK)  x = readmend ();
d155 2
a156 1
int msgsetup ()
d158 1
a158 1
	register int x;
d161 3
a163 2
		x = readmsg (MSGSETUP);
		if (x != SCMOK)  return (x);
d165 3
a167 2
			x = readint (&xpatch);
			if (x != SCMOK)  return (x);
d171 18
a188 11
			x = readstring (&xuser);
			if (x != SCMOK)  return (x);
			return (readmend ());
		}
		x = readstring (&collname);
		if (x == SCMOK)  x = readint ((int *)&lasttime);
		if (x == SCMOK)  x = readstring (&basedir);
		if (x == SCMOK)  x = readint (&basedev);
		if (x == SCMOK)  x = readint (&baseino);
		if (x == SCMOK)  x = readint (&listonly);
		if (x == SCMOK)  x = readint (&newonly);
d191 1
a191 1
				release = (char *)NULL;
d193 1
a193 1
				x = readstring (&release);
d195 2
a196 1
		if (x == SCMOK)  x = readmend ();
d198 3
a200 2
		x = writemsg (MSGSETUP);
		if (x != SCMOK)  return (x);
d202 3
a204 2
			x = writeint (xpatch);
			if (x != SCMOK)  return (x);
d207 23
a229 13
			x = writestring (xuser);
			if (x != SCMOK)  return (x);
			return (writemend ());
		}
		if (x == SCMOK)  x = writestring (collname);
		if (x == SCMOK)  x = writeint ((int)lasttime);
		if (x == SCMOK)  x = writestring (basedir);
		if (x == SCMOK)  x = writeint (basedev);
		if (x == SCMOK)  x = writeint (baseino);
		if (x == SCMOK)  x = writeint (listonly);
		if (x == SCMOK)  x = writeint (newonly);
		if (x == SCMOK && protver >= 6)  x = writestring (release);
		if (x == SCMOK)  x = writemend ();
d234 2
a235 1
int msgsetupack ()
d237 1
d239 2
a240 2
		return (writemint (MSGSETUPACK,setupack));
	return (readmint (MSGSETUPACK,&setupack));
d248 2
a249 1
int msgcrypt ()
d251 1
d253 2
a254 2
		return (readmstr (MSGCRYPT,&crypttest));
	return (writemstr (MSGCRYPT,crypttest));
d257 2
a258 1
int msgcryptok ()
d260 1
d262 2
a263 2
		return (writemnull (MSGCRYPTOK));
	return (readmnull (MSGCRYPTOK));
d275 2
a276 1
int msglogin ()
d278 2
a279 1
	register int x;
d281 19
a299 11
		x = readmsg (MSGLOGIN);
		if (x == SCMOK)  x = readstring (&logcrypt);
		if (x == SCMOK)  x = readstring (&loguser);
		if (x == SCMOK)  x = readstring (&logpswd);
		if (x == SCMOK)  x = readmend ();
	} else {
		x = writemsg (MSGLOGIN);
		if (x == SCMOK)  x = writestring (logcrypt);
		if (x == SCMOK)  x = writestring (loguser);
		if (x == SCMOK)  x = writestring (logpswd);
		if (x == SCMOK)  x = writemend ();
d304 21
a324 13
int msglogack ()
{
	register int x;
	if (server) {
		x = writemsg (MSGLOGACK);
		if (x == SCMOK)  x = writeint (logack);
		if (x == SCMOK)  x = writestring (logerror);
		if (x == SCMOK)  x = writemend ();
	} else {
		x = readmsg (MSGLOGACK);
		if (x == SCMOK)  x = readint (&logack);
		if (x == SCMOK)  x = readstring (&logerror);
		if (x == SCMOK)  x = readmend ();
d334 4
a337 3
static int refuseone (t, v)
register TREE *t;
void *v;
d339 1
a339 1
	return (writestring (t->Tname));
d342 2
a343 1
int msgrefuse ()
d345 2
a346 1
	register int x;
d349 4
a352 2
		x = readmsg (MSGREFUSE);
		if (x == SCMOK)  x = readstring (&name);
d354 16
a369 11
			if (name == NULL)  break;
			(void) Tinsert (&refuseT,name,FALSE);
			free (name);
			x = readstring (&name);
		}
		if (x == SCMOK)  x = readmend ();
	} else {
		x = writemsg (MSGREFUSE);
		if (x == SCMOK)  x = Tprocess (refuseT,refuseone, NULL);
		if (x == SCMOK)  x = writestring ((char *)NULL);
		if (x == SCMOK)  x = writemend ();
d380 14
a393 10
static int listone (t, v)
register TREE *t;
void *v;
{
	register int x;

	x = writestring (t->Tname);
	if (x == SCMOK)  x = writeint ((int)t->Tmode);
	if (x == SCMOK)  x = writeint ((int)t->Tflags);
	if (x == SCMOK)  x = writeint (t->Tmtime);
d397 15
a411 9
int msglist ()
{
	register int x;
	if (server) {
		x = writemsg (MSGLIST);
		if (x == SCMOK)  x = Tprocess (listT,listone, NULL);
		if (x == SCMOK)  x = writestring ((char *)NULL);
		if (x == SCMOK)  x = writeint ((int)scantime);
		if (x == SCMOK)  x = writemend ();
d414 6
a419 4
		int mode,flags,mtime;
		register TREE *t;
		x = readmsg (MSGLIST);
		if (x == SCMOK)  x = readstring (&name);
d421 11
a431 7
			if (name == NULL)  break;
			x = readint (&mode);
			if (x == SCMOK)  x = readint (&flags);
			if (x == SCMOK)  x = readint (&mtime);
			if (x != SCMOK)  break;
			t = Tinsert (&listT,name,TRUE);
			free (name);
d435 1
a435 1
			x = readstring (&name);
d437 4
a440 2
		if (x == SCMOK)  x = readint ((int *)&scantime);
		if (x == SCMOK)  x = readmend ();
d450 4
a453 3
static int needone (t, v)
register TREE *t;
void *v;
d455 5
a459 3
	register int x;
	x = writestring (t->Tname);
	if (x == SCMOK)  x = writeint ((t->Tflags&FUPDATE) != 0);
d463 1
a463 1
int msgneed ()
d465 2
a466 1
	register int x;
d470 5
a474 3
		register TREE *t;
		x = readmsg (MSGNEED);
		if (x == SCMOK)  x = readstring (&name);
d476 21
a496 14
			if (name == NULL)  break;
			x = readint (&update);
			if (x != SCMOK)  break;
			t = Tinsert (&needT,name,TRUE);
			free (name);
			if (update)  t->Tflags |= FUPDATE;
			x = readstring (&name);
		}
		if (x == SCMOK)  x = readmend ();
	} else {
		x = writemsg (MSGNEED);
		if (x == SCMOK)  x = Tprocess (needT,needone, NULL);
		if (x == SCMOK)  x = writestring ((char *)NULL);
		if (x == SCMOK)  x = writemend ();
d506 4
a509 3
static int denyone (t, v)
register TREE *t;
void *v;
d511 2
a512 1
	return (writestring (t->Tname));
d515 2
a516 1
int msgdeny ()
d518 2
a519 1
	register int x;
d521 7
a527 4
		x = writemsg (MSGDENY);
		if (x == SCMOK)  x = Tprocess (denyT,denyone, NULL);
		if (x == SCMOK)  x = writestring ((char *)NULL);
		if (x == SCMOK)  x = writemend ();
d530 4
a533 2
		x = readmsg (MSGDENY);
		if (x == SCMOK)  x = readstring (&name);
d535 5
a539 4
			if (name == NULL)  break;
			(void) Tinsert (&denyT,name,FALSE);
			free (name);
			x = readstring (&name);
d541 2
a542 1
		if (x == SCMOK)  x = readmend ();
d550 2
a551 1
int msgsend ()
d553 1
d555 2
a556 2
		return (readmnull (MSGSEND));
	return (writemnull (MSGSEND));
d564 4
a567 3
static int writeone (t, v)
register TREE *t;
void *v;
d569 2
a570 1
	return (writestring (t->Tname));
d575 2
a576 1
int msgrecv (int (*xferfile)(TREE *, va_list),...)
d579 2
a580 1
int msgrecv (va_alist)
d585 2
a586 2
	register int x;
	register TREE *t = upgradeT;
d598 4
a601 2
			if (x == SCMOK)  x = writestring ((char *)NULL);
			if (x == SCMOK)  x = writemend ();
d604 4
a607 2
		if (x == SCMOK)  x = writestring (t->Tname);
		if (x == SCMOK)  x = writeint (t->Tmode);
d609 2
a610 1
			if (x == SCMOK)  x = writemend ();
d613 20
a632 10
		if (x == SCMOK)  x = writeint (t->Tflags);
		if (x == SCMOK)  x = writestring (t->Tuser);
		if (x == SCMOK)  x = writestring (t->Tgroup);
		if (x == SCMOK)  x = writeint (t->Tmtime);
		if (x == SCMOK)  x = Tprocess (t->Tlink,writeone, NULL);
		if (x == SCMOK)  x = writestring ((char *)NULL);
		if (x == SCMOK)  x = Tprocess (t->Texec,writeone, NULL);
		if (x == SCMOK)  x = writestring ((char *)NULL);
		if (x == SCMOK)  x = (*xferfile) (t,args);
		if (x == SCMOK)  x = writemend ();
d634 4
a637 2
		char *linkname,*execcmd;
		if (t == NULL)  return (SCMERR);
d639 2
a640 1
		if (x == SCMOK)  x = readstring (&t->Tname);
d642 3
a644 2
			x = readmend ();
			if (x == SCMOK)  x = (*xferfile) (NULL,args);
d647 2
a648 1
		if (x == SCMOK)  x = readint (&t->Tmode);
d650 3
a652 2
			x = readmend ();
			if (x == SCMOK)  x = (*xferfile) (t,args);
d655 8
a662 4
		if (x == SCMOK)  x = readint (&t->Tflags);
		if (x == SCMOK)  x = readstring (&t->Tuser);
		if (x == SCMOK)  x = readstring (&t->Tgroup);
		if (x == SCMOK)  x = readint (&t->Tmtime);
d664 2
a665 1
		if (x == SCMOK)  x = readstring (&linkname);
d667 5
a671 4
			if (linkname == NULL)  break;
			(void) Tinsert (&t->Tlink,linkname,FALSE);
			free (linkname);
			x = readstring (&linkname);
d674 2
a675 1
		if (x == SCMOK)  x = readstring (&execcmd);
d677 10
a686 7
			if (execcmd == NULL)  break;
			(void) Tinsert (&t->Texec,execcmd,FALSE);
			free (execcmd);
			x = readstring (&execcmd);
		}
		if (x == SCMOK)  x = (*xferfile) (t,args);
		if (x == SCMOK)  x = readmend ();
d698 2
a699 1
int msgdone ()
d701 1
a701 1
	register int x;
d704 1
a704 1
		printf ("Error, msgdone should not have been called.");
d708 15
a722 9
		x = readmsg (MSGDONE);
		if (x == SCMOK)  x = readint (&doneack);
		if (x == SCMOK)  x = readstring (&donereason);
		if (x == SCMOK)  x = readmend ();
	} else {
		x = writemsg (MSGDONE);
		if (x == SCMOK)  x = writeint (doneack);
		if (x == SCMOK)  x = writestring (donereason);
		if (x == SCMOK)  x = writemend ();
d732 2
a733 1
int msggoaway ()
d735 2
a736 1
	return (writemstr (MSGGOAWAY,goawayreason));
d745 2
a746 1
int msgxpatch ()
d748 1
a748 2
	register int x;
	register int i;
d751 6
a756 4
		x = readmsg (MSGXPATCH);
		if (x != SCMOK)  return (x);
		x = readint (&xargc);
		if (x != SCMOK)  return (x);
d758 1
a758 1
		xargv = (char **)calloc (sizeof (char *),(unsigned)xargc+1);
d762 3
a764 2
			x = readstring (&xargv[i]);
			if (x != SCMOK)  return (x);
d766 1
a766 1
		x = readmend ();
d768 6
a773 4
		x = writemsg (MSGXPATCH);
		if (x != SCMOK)  return (x);
		x = writeint (xargc);
		if (x != SCMOK)  return (x);
d775 3
a777 2
			x = writestring (xargv[i]);
			if (x != SCMOK)  return (x);
d779 1
a779 1
		x = writemend ();
d789 2
a790 1
int msgcompress ()
d792 1
d794 2
a795 2
		return (readmint (MSGCOMPRESS,&docompress));
	return (writemint (MSGCOMPRESS, docompress));
@


1.5
log
@Add a bunch of old revision history comments that we are missing to
make diffing easier.  No code changes...
@
text
@d1 1
a1 1
/*	$OpenBSD: supmsg.c,v 1.4 1997/04/01 07:35:45 todd Exp $	*/
d159 1
a159 1
		if (x == SCMOK)
d164 1
@


1.4
log
@This merges in the latest NetBSD sup source.
- removed $Log: ...$ tags to not waste space in the repository
- now doesn't segfault on the alpha!

Note:
To compile sup on systems other than *BSD, you'll need a copy of
vis.c, vis.h, daemon.c, and sys/cdefs.h.  At least the first two
(for OSF/1).

From NetBSD changelog description (for credit where due):
.... 1996/12/23 19:42:05  christos
- add missing prototypes.
- fix function call inconsistencies
- fix int <-> long and pointer conversions
It should run now on 64 bit machines...

....  1996/12/31 18:08:00  christos
64 bit patches (mostly long -> time_t) from Matthew Jacob (?)
sup now works on the alpha!
@
text
@d1 1
a1 1
/*	$OpenBSD: supmsg.c,v 1.3 1996/07/31 11:11:33 niklas Exp $	*/
d19 1
a19 1
 *  Software Distribution Coordinator  or  Software_Distribution@@CS.CMU.EDU
d34 16
@


1.3
log
@Better use time_t instead of long when dealing with times
@
text
@d1 1
a1 1
/*	$OpenBSD: supmsg.c,v 1.2 1996/06/26 05:39:55 deraadt Exp $	*/
a33 29
 *
 * $Log: supmsg.c,v $
 * Revision 1.2  1996/06/26 05:39:55  deraadt
 * rcsid
 *
 * Revision 1.1  1995/12/16 11:47:00  deraadt
 * add sup to the tree
 *
 * Revision 1.2  1993/08/04 17:46:23  brezak
 * Changes from nate for gzip'ed sup
 *
 * Revision 1.1.1.1  1993/05/21  14:52:19  cgd
 * initial import of CMU's SUP to NetBSD
 *
 * Revision 2.4  92/09/09  22:05:17  mrt
 * 	Moved PFI definition under __STDC__ conditional since it
 * 	is already defined in libc.h in this case.
 * 	[92/09/01            mrt]
 * 
 * Revision 2.3  92/08/11  12:08:12  mrt
 * 	Added copyright
 * 	[92/08/10            mrt]
 * 	Brad's changes: Delinted, Incorporated updated variable 
 * 	argument list usage from old msgxfer.c
 * 	[92/07/24            mrt]
 * 
 * Revision 2.2  89/08/23  15:02:56  gm0w
 * 	Created from separate message modules.
 * 	[89/08/14            gm0w]
a39 5
#if __STDC__
#include <stdarg.h>
#else
#include <varargs.h>
#endif
d42 2
a43 1
#include "sup.h"
d56 6
d250 1
a250 1
static int refuseone (t)
d252 1
d273 1
a273 1
		if (x == SCMOK)  x = Tprocess (refuseT,refuseone);
d286 1
a286 1
static int listone (t)
d288 1
d304 1
a304 1
		if (x == SCMOK)  x = Tprocess (listT,listone);
d338 1
a338 1
static int needone (t)
d340 1
d369 1
a369 1
		if (x == SCMOK)  x = Tprocess (needT,needone);
d381 1
a381 1
static int denyone (t)
d383 1
d393 1
a393 1
		if (x == SCMOK)  x = Tprocess (denyT,denyone);
d426 1
a426 1
static int writeone (t)
d428 1
d434 2
a435 2
#if __STDC__
int msgrecv (PFI xferfile,...)
a441 4
#if !__STDC__
	typedef int (*PFI)();
	PFI xferfile;
#endif
d445 1
a445 1
#if __STDC__
d448 2
d451 1
a451 1
	xferfile = va_arg(args, PFI);
d470 1
a470 1
		if (x == SCMOK)  x = Tprocess (t->Tlink,writeone);
d472 1
a472 1
		if (x == SCMOK)  x = Tprocess (t->Texec,writeone);
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d36 3
d140 1
a140 1
extern long	lasttime;		/* time of last upgrade */
d310 1
a310 1
extern long	scantime;		/* time that collection was scanned */
@


1.1
log
@add sup to the tree
@
text
@d1 2
d36 3
@
