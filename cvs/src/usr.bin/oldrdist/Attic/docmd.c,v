head	1.24;
access;
symbols
	OPENBSD_5_5:1.23.0.6
	OPENBSD_5_5_BASE:1.23
	OPENBSD_5_4:1.23.0.2
	OPENBSD_5_4_BASE:1.23
	OPENBSD_5_3:1.22.0.14
	OPENBSD_5_3_BASE:1.22
	OPENBSD_5_2:1.22.0.12
	OPENBSD_5_2_BASE:1.22
	OPENBSD_5_1_BASE:1.22
	OPENBSD_5_1:1.22.0.10
	OPENBSD_5_0:1.22.0.8
	OPENBSD_5_0_BASE:1.22
	OPENBSD_4_9:1.22.0.6
	OPENBSD_4_9_BASE:1.22
	OPENBSD_4_8:1.22.0.4
	OPENBSD_4_8_BASE:1.22
	OPENBSD_4_7:1.22.0.2
	OPENBSD_4_7_BASE:1.22
	OPENBSD_4_6:1.21.0.10
	OPENBSD_4_6_BASE:1.21
	OPENBSD_4_5:1.21.0.6
	OPENBSD_4_5_BASE:1.21
	OPENBSD_4_4:1.21.0.4
	OPENBSD_4_4_BASE:1.21
	OPENBSD_4_3:1.21.0.2
	OPENBSD_4_3_BASE:1.21
	OPENBSD_4_2:1.20.0.4
	OPENBSD_4_2_BASE:1.20
	OPENBSD_4_1:1.20.0.2
	OPENBSD_4_1_BASE:1.20
	OPENBSD_4_0:1.19.0.12
	OPENBSD_4_0_BASE:1.19
	OPENBSD_3_9:1.19.0.10
	OPENBSD_3_9_BASE:1.19
	OPENBSD_3_8:1.19.0.8
	OPENBSD_3_8_BASE:1.19
	OPENBSD_3_7:1.19.0.6
	OPENBSD_3_7_BASE:1.19
	OPENBSD_3_6:1.19.0.4
	OPENBSD_3_6_BASE:1.19
	OPENBSD_3_5:1.19.0.2
	OPENBSD_3_5_BASE:1.19
	OPENBSD_3_4:1.18.0.2
	OPENBSD_3_4_BASE:1.18
	OPENBSD_3_3:1.17.0.4
	OPENBSD_3_3_BASE:1.17
	OPENBSD_3_2:1.17.0.2
	OPENBSD_3_2_BASE:1.17
	OPENBSD_3_1:1.16.0.2
	OPENBSD_3_1_BASE:1.16
	OPENBSD_3_0:1.13.0.2
	OPENBSD_3_0_BASE:1.13
	OPENBSD_2_9_BASE:1.12
	OPENBSD_2_9:1.12.0.8
	OPENBSD_2_8:1.12.0.6
	OPENBSD_2_8_BASE:1.12
	OPENBSD_2_7:1.12.0.4
	OPENBSD_2_7_BASE:1.12
	OPENBSD_2_6:1.12.0.2
	OPENBSD_2_6_BASE:1.12
	OPENBSD_2_5:1.11.0.4
	OPENBSD_2_5_BASE:1.11
	OPENBSD_2_4:1.11.0.2
	OPENBSD_2_4_BASE:1.11
	OPENBSD_2_3:1.10.0.2
	OPENBSD_2_3_BASE:1.10
	OPENBSD_2_2:1.8.0.4
	OPENBSD_2_2_BASE:1.8
	OPENBSD_2_1:1.8.0.2
	OPENBSD_2_1_BASE:1.8
	OPENBSD_2_0:1.7.0.2
	OPENBSD_2_0_BASE:1.7;
locks; strict;
comment	@ * @;


1.24
date	2014.07.10.14.26.16;	author tedu;	state dead;
branches;
next	1.23;
commitid	Hzb21S9Xr5CMEb0F;

1.23
date	2013.06.02.06.20.35;	author guenther;	state Exp;
branches;
next	1.22;

1.22
date	2009.10.27.23.59.41;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2007.09.27.17.08.58;	author sobrado;	state Exp;
branches;
next	1.20;

1.20
date	2006.12.11.20.50.54;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2004.01.16.01.12.35;	author espie;	state Exp;
branches;
next	1.18;

1.18
date	2003.06.03.02.56.14;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2002.06.12.06.07.16;	author mpech;	state Exp;
branches;
next	1.16;

1.16
date	2002.02.17.19.42.31;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2002.02.16.21.27.50;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2001.11.19.19.02.15;	author mpech;	state Exp;
branches;
next	1.13;

1.13
date	2001.07.18.17.17.39;	author pvalchev;	state Exp;
branches;
next	1.12;

1.12
date	99.08.17.09.13.16;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	98.04.26.17.55.46;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	97.11.16.18.51.59;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	97.11.05.09.43.39;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	97.02.09.19.24.56;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	96.08.22.20.33.17;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	96.07.30.20.34.54;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	96.07.25.05.13.47;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	96.07.19.21.57.31;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.06.26.05.37.38;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.03.42.13;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	96.02.03.12.11.55;	author dm;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Snakes. Why'd it have to be snakes?
@
text
@/*	$OpenBSD: docmd.c,v 1.23 2013/06/02 06:20:35 guenther Exp $	*/

/*
 * Copyright (c) 1983, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "defs.h"
#include <setjmp.h>
#include <netdb.h>
#include <regex.h>

FILE	*lfp;			/* log file for recording files updated */
struct	subcmd *subcmds;	/* list of sub-commands for current cmd */
jmp_buf	env;

static int	 makeconn(char *);
static int	 okname(char *);
static void	 closeconn(void);
static void	 cmptime(char *);
static void	 doarrow(char **, struct namelist *, char *, struct subcmd *);
static void	 dodcolon(char **, struct namelist *, char *, struct subcmd *);
static void	 notify(char *, char *, struct namelist *, time_t);
static void	 rcmptime(struct stat *);

/*
 * Do the commands in cmds (initialized by yyparse).
 */
void
docmds(dhosts, argc, argv)
	char **dhosts;
	int argc;
	char **argv;
{
	struct cmd *c;
	struct namelist *f;
	char **cpp;
	extern struct cmd *cmds;

	signal(SIGHUP, cleanup);
	signal(SIGINT, cleanup);
	signal(SIGQUIT, cleanup);
	signal(SIGTERM, cleanup);

	for (c = cmds; c != NULL; c = c->c_next) {
		if (dhosts != NULL && *dhosts != NULL) {
			for (cpp = dhosts; *cpp; cpp++)
				if (strcmp(c->c_name, *cpp) == 0)
					goto fndhost;
			continue;
		}
	fndhost:
		if (argc) {
			for (cpp = argv; *cpp; cpp++) {
				if (c->c_label != NULL &&
				    strcmp(c->c_label, *cpp) == 0) {
					cpp = NULL;
					goto found;
				}
				for (f = c->c_files; f != NULL; f = f->n_next)
					if (strcmp(f->n_name, *cpp) == 0)
						goto found;
			}
			continue;
		} else
			cpp = NULL;
	found:
		switch (c->c_type) {
		case ARROW:
			doarrow(cpp, c->c_files, c->c_name, c->c_cmds);
			break;
		case DCOLON:
			dodcolon(cpp, c->c_files, c->c_name, c->c_cmds);
			break;
		default:
			fatal("illegal command type %d\n", c->c_type);
		}
	}
	closeconn();
}

/*
 * Process commands for sending files to other machines.
 */
static void
doarrow(filev, files, rhost, cmds)
	char **filev;
	struct namelist *files;
	char *rhost;
	struct subcmd *cmds;
{
	struct namelist *f;
	struct subcmd *sc;
	char **cpp;
	int n, ddir, opts = options;

	if (debug)
		printf("doarrow(%lx, %s, %lx)\n", (long)files, rhost, (long)cmds);

	if (files == NULL) {
		error("no files to be updated\n");
		return;
	}

	subcmds = cmds;
	ddir = files->n_next != NULL;	/* destination is a directory */
	if (nflag)
		printf("updating host %s\n", rhost);
	else {
		int fd;

		if (setjmp(env))
			goto done;
		signal(SIGPIPE, lostconn);
		if (!makeconn(rhost))
			return;
		if ((fd = open(tempfile, O_CREAT|O_EXCL|O_WRONLY, 0600)) < 0 ||
		    (lfp = fdopen(fd, "w")) == NULL) {
			if (fd >= 0)
				(void) close(fd);
			fatal("cannot open %s\n", tempfile);
			exit(1);
		}
	}
	for (f = files; f != NULL; f = f->n_next) {
		if (filev) {
			for (cpp = filev; *cpp; cpp++)
				if (strcmp(f->n_name, *cpp) == 0)
					goto found;
			if (!nflag && lfp) {
				(void) fclose(lfp);
				lfp = NULL;
			}
			continue;
		}
	found:
		n = 0;
		for (sc = cmds; sc != NULL; sc = sc->sc_next) {
			if (sc->sc_type != INSTALL)
				continue;
			n++;
			install(f->n_name, sc->sc_name,
				sc->sc_name == NULL ? 0 : ddir, sc->sc_options);
			opts = sc->sc_options;
		}
		if (n == 0)
			install(f->n_name, NULL, 0, options);
	}
done:
	if (!nflag) {
		(void) signal(SIGPIPE, cleanup);
		if (lfp)
			(void) fclose(lfp);
		lfp = NULL;
	}
	for (sc = cmds; sc != NULL; sc = sc->sc_next)
		if (sc->sc_type == NOTIFY)
			notify(tempfile, rhost, sc->sc_args, 0);
	if (!nflag) {
		struct linkbuf *nextihead;

		(void) unlink(tempfile);
		for (; ihead != NULL; ihead = nextihead) {
			nextihead = ihead->nextp;
			if ((opts & IGNLNKS) || ihead->count == 0)
				continue;
			logit(lfp, "%s: Warning: missing links\n",
				ihead->pathname);
			free(ihead);
		}
	}
}

/*
 * Create a connection to the rdist server on the machine rhost.
 */
static int
makeconn(rhost)
	char *rhost;
{
	char *ruser, *cp;
	static char *cur_host = NULL;
#if	defined(DIRECT_RCMD)
	static int port = -1;
#endif	/* DIRECT_RCMD */ 
	char tuser[20];
	int n;
	extern char user[];
#if	defined(DIRECT_RCMD)
	extern uid_t userid;
#endif

	if (debug)
		printf("makeconn(%s)\n", rhost);

	if (cur_host != NULL && rem >= 0) {
		if (strcmp(cur_host, rhost) == 0)
			return(1);
		closeconn();
	}
	cur_host = rhost;
	cp = strchr(rhost, '@@');
	if (cp != NULL) {
		char c = *cp;

		*cp = '\0';
		strncpy(tuser, rhost, sizeof(tuser)-1);
		*cp = c;
		rhost = cp + 1;
		ruser = tuser;
		if (*ruser == '\0')
			ruser = user;
		else if (!okname(ruser))
			return(0);
	} else
		ruser = user;
	if (!qflag)
		printf("updating host %s\n", rhost);
	(void) snprintf(buf, sizeof(buf), "%s -Server%s", _PATH_RDIST,
		qflag ? " -q" : "");
#if	defined(DIRECT_RCMD)
	if (port < 0) {
		struct servent *sp;

		if ((sp = getservbyname("shell", "tcp")) == NULL)
			fatal("shell/tcp: unknown service");
		port = sp->s_port;
	}
#endif	/* !DIRECT_RCMD */

	if (debug) {
#if	defined(DIRECT_RCMD)
		printf("port = %d, luser = %s, ruser = %s\n", ntohs(port), user, ruser);
#else	/* !DIRECT_RCMD */
		printf("luser = %s, ruser = %s\n", user, ruser);
#endif	/* !DIRECT_RCMD */
		printf("buf = %s\n", buf);
	}

	fflush(stdout);
#if	defined(DIRECT_RCMD)
	seteuid(0);
	rem = rcmd(&rhost, port, user, ruser, buf, 0);
	seteuid(userid);
#else	/* !DIRECT_RCMD */
	rem = rcmdsh(&rhost, -1, user, ruser, buf, NULL);
#endif	/* !DIRECT_RCMD */
	if (rem < 0)
		return(0);
	cp = buf;
	if (read(rem, cp, 1) != 1)
		lostconn(0);
	if (*cp == 'V') {
		do {
			if (read(rem, cp, 1) != 1)
				lostconn(0);
		} while (*cp++ != '\n' && cp < &buf[BUFSIZ]);
		*--cp = '\0';
		cp = buf;
		n = 0;
		while (*cp >= '0' && *cp <= '9')
			n = (n * 10) + (*cp++ - '0');
		if (*cp == '\0' && n == VERSION)
			return(1);
		error("connection failed: version numbers don't match (local %d, remote %d)\n", VERSION, n);
	} else {
		error("connection failed: version numbers don't match\n");
		error("got unexpected input:");
		do {
			error("%c", *cp);
		} while (*cp != '\n' && read(rem, cp, 1) == 1);
	}
	closeconn();
	return(0);
}

/*
 * Signal end of previous connection.
 */
static void
closeconn()
{
	if (debug)
		printf("closeconn()\n");

	if (rem >= 0) {
		void (*osig)();
		osig = signal(SIGPIPE, SIG_IGN);
		(void) write(rem, "\2\n", 2);
		(void) signal(SIGPIPE, osig);
		(void) close(rem);
		rem = -1;
	}
}

void
lostconn(signo)
	int signo;
{
	if (iamremote)
		cleanup(0);
	logit(lfp, "rdist: lost connection\n");
	if (rem >= 0) {
		(void) close(rem);
		rem = -1;
	}
	longjmp(env, 1);
}

static int
okname(name)
	char *name;
{
	char *cp = name;
	int c;

	do {
		c = *cp;
		if (c & 0200)
			goto bad;
		if (!isalpha(c) && !isdigit(c) && c != '_' && c != '-')
			goto bad;
		cp++;
	} while (*cp);
	return(1);
bad:
	error("invalid user name %s\n", name);
	return(0);
}

time_t	lastmod;
FILE	*tfp;
extern	char *tp;

/*
 * Process commands for comparing files to time stamp files.
 */
static void
dodcolon(filev, files, stamp, cmds)
	char **filev;
	struct namelist *files;
	char *stamp;
	struct subcmd *cmds;
{
	struct subcmd *sc;
	struct namelist *f;
	char **cpp;
	struct timeval tv[2];
	struct stat stb;

	if (debug)
		printf("dodcolon()\n");

	if (files == NULL) {
		error("no files to be updated\n");
		return;
	}
	if (stat(stamp, &stb) < 0) {
		error("%s: %s\n", stamp, strerror(errno));
		return;
	}
	if (debug)
		printf("%s: %lld\n", stamp, (long long)stb.st_mtime);

	subcmds = cmds;
	lastmod = stb.st_mtime;
	if (nflag || (options & VERIFY))
		tfp = NULL;
	else {
		int fd;

		if ((fd = open(tempfile, O_CREAT|O_EXCL|O_WRONLY, 0600)) < 0 ||
		    (tfp = fdopen(fd, "w")) == NULL) {
			error("%s: %s\n", tempfile, strerror(errno));
			if (fd >= 0)
				(void) close(fd);
			return;
		}
		(void) gettimeofday(&tv[0], NULL);
		tv[1] = tv[0];
		(void) utimes(stamp, tv);
	}

	for (f = files; f != NULL; f = f->n_next) {
		if (filev) {
			for (cpp = filev; *cpp; cpp++)
				if (strcmp(f->n_name, *cpp) == 0)
					goto found;
			continue;
		}
	found:
		tp = NULL;
		cmptime(f->n_name);
	}

	if (tfp != NULL)
		(void) fclose(tfp);
	for (sc = cmds; sc != NULL; sc = sc->sc_next)
		if (sc->sc_type == NOTIFY)
			notify(tempfile, NULL, sc->sc_args, lastmod);
	if (!nflag && !(options & VERIFY))
		(void) unlink(tempfile);
}

/*
 * Compare the mtime of file to the list of time stamps.
 */
static void
cmptime(name)
	char *name;
{
	struct stat stb;

	if (debug)
		printf("cmptime(%s)\n", name);

	if (except(name))
		return;

	if (nflag) {
		printf("comparing dates: %s\n", name);
		return;
	}

	/*
	 * first time cmptime() is called?
	 */
	if (tp == NULL) {
		if (exptilde(target, name, sizeof (target)) == NULL)
			return;
		tp = name = target;
		while (*tp)
			tp++;
	}
	if (access(name, 4) < 0 || stat(name, &stb) < 0) {
		error("%s: %s\n", name, strerror(errno));
		return;
	}

	switch (stb.st_mode & S_IFMT) {
	case S_IFREG:
		break;

	case S_IFDIR:
		rcmptime(&stb);
		return;

	default:
		error("%s: not a plain file\n", name);
		return;
	}

	if (stb.st_mtime > lastmod)
		logit(tfp, "new: %s\n", name);
}

static void
rcmptime(st)
	struct stat *st;
{
	DIR *d;
	struct dirent *dp;
	char *cp;
	char *otp;
	int len;

	if (debug)
		printf("rcmptime(%lx)\n", (long)st);

	if ((d = opendir(target)) == NULL) {
		error("%s: %s\n", target, strerror(errno));
		return;
	}
	otp = tp;
	len = tp - target;
	while (dp = readdir(d)) {
		if (!strcmp(dp->d_name, ".") || !strcmp(dp->d_name, ".."))
			continue;
		if (len + 1 + strlen(dp->d_name) >= BUFSIZ - 1) {
			error("%s/%s: Name too long\n", target, dp->d_name);
			continue;
		}
		tp = otp;
		*tp++ = '/';
		cp = dp->d_name;
		while (*tp++ = *cp++)
			;
		tp--;
		cmptime(target);
	}
	closedir(d);
	tp = otp;
	*tp = '\0';
}

/*
 * Notify the list of people the changes that were made.
 * rhost == NULL if we are mailing a list of changes compared to at time
 * stamp file.
 */
static void
notify(file, rhost, to, lmod)
	char *file, *rhost;
	struct namelist *to;
	time_t lmod;
{
	int fd, len;
	struct stat stb;
	FILE *pf;

	if ((options & VERIFY) || to == NULL)
		return;
	if (!qflag) {
		printf("notify ");
		if (rhost)
			printf("@@%s ", rhost);
		prnames(to);
	}
	if (nflag)
		return;

	if ((fd = open(file, O_RDONLY)) < 0) {
		error("%s: %s\n", file, strerror(errno));
		return;
	}
	if (fstat(fd, &stb) < 0) {
		error("%s: %s\n", file, strerror(errno));
		(void) close(fd);
		return;
	}
	if (stb.st_size == 0) {
		(void) close(fd);
		return;
	}
	/*
	 * Create a pipe to a mail program.
	 */
	(void) snprintf(buf, sizeof(buf), "%s -oi -t", _PATH_SENDMAIL);
	pf = popen(buf, "w");
	if (pf == NULL) {
		error("notify: \"%s\" failed\n", _PATH_SENDMAIL);
		(void) close(fd);
		return;
	}
	/*
	 * Output the proper header information.
	 */
	fprintf(pf, "Auto-Submitted: auto-generated\n");
	fprintf(pf, "From: rdist (Remote distribution program)\n");
	fprintf(pf, "To:");
	if (!any('@@', to->n_name) && rhost != NULL)
		fprintf(pf, " %s@@%s", to->n_name, rhost);
	else
		fprintf(pf, " %s", to->n_name);
	to = to->n_next;
	while (to != NULL) {
		if (!any('@@', to->n_name) && rhost != NULL)
			fprintf(pf, ", %s@@%s", to->n_name, rhost);
		else
			fprintf(pf, ", %s", to->n_name);
		to = to->n_next;
	}
	putc('\n', pf);
	if (rhost != NULL)
		fprintf(pf, "Subject: files updated by rdist from %s to %s\n",
			host, rhost);
	else
		fprintf(pf, "Subject: files updated after %s\n", ctime(&lmod));
	putc('\n', pf);

	while ((len = read(fd, buf, BUFSIZ)) > 0)
		(void) fwrite(buf, 1, len, pf);
	(void) close(fd);
	(void) pclose(pf);
}

/*
 * Return true if name is in the list.
 */
int
inlist(list, file)
	struct namelist *list;
	char *file;
{
	struct namelist *nl;

	for (nl = list; nl != NULL; nl = nl->n_next)
		if (!strcmp(file, nl->n_name))
			return(1);
	return(0);
}

/*
 * Return TRUE if file is in the exception list.
 */
int
except(file)
	char *file;
{
	struct	subcmd *sc;
	struct	namelist *nl;
	regex_t s;
	int err;

	if (debug)
		printf("except(%s)\n", file);

	for (sc = subcmds; sc != NULL; sc = sc->sc_next) {
		if (sc->sc_type != EXCEPT && sc->sc_type != PATTERN)
			continue;
		for (nl = sc->sc_args; nl != NULL; nl = nl->n_next) {
			if (sc->sc_type == EXCEPT) {
				if (!strcmp(file, nl->n_name))
					return(1);
				continue;
			}
			if ((err = regcomp(&s, nl->n_name, 0)) != 0) {
				(void) regerror(err, &s, buf, sizeof(buf));
				error("%s: %s\n", nl->n_name, buf);
			}
			if (regexec(&s, file, 0, NULL, 0) == 0) {
				regfree(&s);
				return(1);
			}
			regfree(&s);
		}
	}
	return(0);
}

char *
colon(cp)
	char *cp;
{

	while (*cp) {
		if (*cp == ':')
			return(cp);
		if (*cp == '/')
			return(0);
		cp++;
	}
	return(0);
}
@


1.23
log
@Switch from antique struct direct to struct dirent
@
text
@d1 1
a1 1
/*	$OpenBSD: docmd.c,v 1.22 2009/10/27 23:59:41 deraadt Exp $	*/
@


1.22
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: docmd.c,v 1.21 2007/09/27 17:08:58 sobrado Exp $	*/
d486 1
a486 1
	struct direct *dp;
@


1.21
log
@"mailling" -> "mailing", from Jung's list; while here, some spacing fixes

ok jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: docmd.c,v 1.20 2006/12/11 20:50:54 deraadt Exp $	*/
a30 5

#ifndef lint
/* from: static char sccsid[] = "@@(#)docmd.c	8.1 (Berkeley) 6/9/93"; */
static char *rcsid = "$OpenBSD: docmd.c,v 1.20 2006/12/11 20:50:54 deraadt Exp $";
#endif /* not lint */
@


1.20
log
@rfc 3834 support: Auto-Submitted: auto-generated on lots of things; from Tamas TEVESZ; ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: docmd.c,v 1.19 2004/01/16 01:12:35 espie Exp $	*/
d34 1
a34 1
static char *rcsid = "$OpenBSD: docmd.c,v 1.19 2004/01/16 01:12:35 espie Exp $";
d565 1
a565 1
	 * Create a pipe to mailling program.
@


1.19
log
@log -> logit ISO C fix.
@
text
@d1 1
a1 1
/*	$OpenBSD: docmd.c,v 1.18 2003/06/03 02:56:14 millert Exp $	*/
d34 1
a34 1
static char *rcsid = "$OpenBSD: docmd.c,v 1.18 2003/06/03 02:56:14 millert Exp $";
d577 1
@


1.18
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: docmd.c,v 1.17 2002/06/12 06:07:16 mpech Exp $	*/
d34 1
a34 1
static char *rcsid = "$OpenBSD: docmd.c,v 1.17 2002/06/12 06:07:16 mpech Exp $";
d196 1
a196 1
			log(lfp, "%s: Warning: missing links\n",
d331 1
a331 1
	log(lfp, "rdist: lost connection\n");
d483 1
a483 1
		log(tfp, "new: %s\n", name);
@


1.17
log
@a real pid_t cleanup.

espie@@ ok for make/,
deraadt@@ one extra eye,
millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: docmd.c,v 1.16 2002/02/17 19:42:31 millert Exp $	*/
d15 1
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d34 1
a34 1
static char *rcsid = "$OpenBSD: docmd.c,v 1.16 2002/02/17 19:42:31 millert Exp $";
@


1.16
log
@Manual cleanup of remaining userland __P use (excluding packages maintained outside the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: docmd.c,v 1.15 2002/02/16 21:27:50 millert Exp $	*/
d38 1
a38 1
static char *rcsid = "$OpenBSD: docmd.c,v 1.15 2002/02/16 21:27:50 millert Exp $";
d223 1
a223 1
	extern int userid;
@


1.15
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: docmd.c,v 1.14 2001/11/19 19:02:15 mpech Exp $	*/
d38 1
a38 1
static char *rcsid = "$OpenBSD: docmd.c,v 1.14 2001/11/19 19:02:15 mpech Exp $";
d54 2
a55 4
static void	 doarrow __P((char **,
		    struct namelist *, char *, struct subcmd *));
static void	 dodcolon __P((char **,
		    struct namelist *, char *, struct subcmd *));
@


1.14
log
@kill more registers

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: docmd.c,v 1.13 2001/07/18 17:17:39 pvalchev Exp $	*/
d38 1
a38 1
static char *rcsid = "$OpenBSD: docmd.c,v 1.13 2001/07/18 17:17:39 pvalchev Exp $";
d50 4
a53 4
static int	 makeconn __P((char *));
static int	 okname __P((char *));
static void	 closeconn __P((void));
static void	 cmptime __P((char *));
d58 2
a59 2
static void	 notify __P((char *, char *, struct namelist *, time_t));
static void	 rcmptime __P((struct stat *));
@


1.13
log
@-Wall cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: docmd.c,v 1.12 1999/08/17 09:13:16 millert Exp $	*/
d38 1
a38 1
static char *rcsid = "$OpenBSD: docmd.c,v 1.12 1999/08/17 09:13:16 millert Exp $";
d70 3
a72 3
	register struct cmd *c;
	register struct namelist *f;
	register char **cpp;
d127 3
a129 3
	register struct namelist *f;
	register struct subcmd *sc;
	register char **cpp;
d216 1
a216 1
	register char *ruser, *cp;
d347 1
a347 1
	register char *name;
d349 2
a350 2
	register char *cp = name;
	register int c;
d380 3
a382 3
	register struct subcmd *sc;
	register struct namelist *f;
	register char **cpp;
d496 3
a498 3
	register DIR *d;
	register struct direct *dp;
	register char *cp;
d539 1
a539 1
	register struct namelist *to;
d542 1
a542 1
	register int fd, len;
d619 1
a619 1
	register struct namelist *nl;
d634 2
a635 2
	register struct	subcmd *sc;
	register struct	namelist *nl;
d667 1
a667 1
	register char *cp;
@


1.12
log
@More <sys/file.h> vs. <fcntl.h> and open() flags fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD: docmd.c,v 1.11 1998/04/26 17:55:46 deraadt Exp $	*/
d38 1
a38 1
static char *rcsid = "$OpenBSD: docmd.c,v 1.11 1998/04/26 17:55:46 deraadt Exp $";
d133 1
a133 1
		printf("doarrow(%x, %s, %x)\n", files, rhost, cmds);
d224 1
d226 1
d398 1
a398 1
		printf("%s: %ld\n", stamp, stb.st_mtime);
d503 1
a503 1
		printf("rcmptime(%x)\n", st);
@


1.11
log
@fix free before last use; charnier
@
text
@d1 1
a1 1
/*	$OpenBSD: docmd.c,v 1.10 1997/11/16 18:51:59 deraadt Exp $	*/
d38 1
a38 1
static char *rcsid = "$OpenBSD: docmd.c,v 1.10 1997/11/16 18:51:59 deraadt Exp $";
d555 1
a555 1
	if ((fd = open(file, 0)) < 0) {
@


1.10
log
@report correct filename in error msg; netbsd
@
text
@d1 1
a1 1
/*	$OpenBSD: docmd.c,v 1.9 1997/11/05 09:43:39 deraadt Exp $	*/
d38 1
a38 1
static char *rcsid = "$OpenBSD: docmd.c,v 1.9 1997/11/05 09:43:39 deraadt Exp $";
d195 2
d198 2
a199 2
		for (; ihead != NULL; ihead = ihead->nextp) {
			free(ihead);
d204 1
@


1.9
log
@zap that timezone stuff; mycroft
@
text
@d1 1
a1 1
/*	$OpenBSD: docmd.c,v 1.8 1997/02/09 19:24:56 deraadt Exp $	*/
d38 1
a38 1
static char *rcsid = "$OpenBSD: docmd.c,v 1.8 1997/02/09 19:24:56 deraadt Exp $";
d404 1
a404 1
			error("%s: %s\n", stamp, strerror(errno));
@


1.8
log
@buf oflow, eivind@@freebsd
@
text
@d1 1
a1 1
/*	$OpenBSD: docmd.c,v 1.7 1996/08/22 20:33:17 millert Exp $	*/
d38 1
a38 1
static char *rcsid = "$OpenBSD: docmd.c,v 1.7 1996/08/22 20:33:17 millert Exp $";
a378 1
	struct timezone tz;
d409 1
a409 1
		(void) gettimeofday(&tv[0], &tz);
@


1.7
log
@NetBSD changes: use POSIX regex routines and fix more buff oflow
Can't use mkstemp() so go back to mktemp and open(2) with sane flags.
Now uses rcmdsh and fixes memory leak in NetBSD POSIX regex support
(leak fixed by Charles Amos <amos@@umiacs.umd.edu>).
@
text
@d1 1
a1 1
/*	$OpenBSD: docmd.c,v 1.6 1996/07/30 20:34:54 millert Exp $	*/
d38 1
a38 1
static char *rcsid = "$OpenBSD: docmd.c,v 1.6 1996/07/30 20:34:54 millert Exp $";
d363 1
a363 1
extern	char target[], *tp;
d460 1
a460 1
		if (exptilde(target, name) == NULL)
@


1.6
log
@use mkstemp() instead of mktemp() to close temp file race.
@
text
@d1 1
a1 1
/*	$OpenBSD: docmd.c,v 1.5 1996/07/25 05:13:47 millert Exp $	*/
d38 1
a38 1
static char *rcsid = "$OpenBSD: docmd.c,v 1.5 1996/07/25 05:13:47 millert Exp $";
d44 1
d152 1
a152 1
		if ((fd = mkstemp(tempfile)) == -1 ||
d154 2
a155 2
			if (fd != -1)
				close(fd);
d249 1
a249 1
	(void) snprintf(buf, BUFSIZ, "%s -Server%s", _PATH_RDIST,
d276 1
a276 1
	rem = rshrcmd(&rhost, -1, user, ruser, buf, 0);
d403 1
a403 1
		if ((fd = mkstemp(tempfile)) == -1 ||
a404 2
			if (fd != -1)
				close(fd);
d406 2
d569 1
a569 1
	(void) snprintf(buf, BUFSIZ, "%s -oi -t", _PATH_SENDMAIL);
d632 2
d647 6
a652 2
			re_comp(nl->n_name);
			if (re_exec(file) > 0)
d654 2
@


1.5
log
@Replaced sprintf() with snprintf() where buffer size is obvious.
Probably just paranoia but why take the chance?  Just four occurences
of sprintf() left.
@
text
@d1 1
a1 1
/*	$OpenBSD: docmd.c,v 1.4 1996/07/19 21:57:31 millert Exp $	*/
d38 1
a38 1
static char *rcsid = "$OpenBSD: docmd.c,v 1.4 1996/07/19 21:57:31 millert Exp $";
d151 1
a151 1
		if ((fd = open(tempfile, O_RDWR|O_EXCL|O_CREAT, 0666)) == -1 ||
d402 1
a402 1
		if ((fd = open(tempfile, O_RDWR|O_EXCL|O_CREAT, 0666)) == -1 ||
@


1.4
log
@oldrdist now uses rsh so doesn't need to be setuid.
Incorporates some changes from Chris Siebenmann <cks@@utcc.utoronto.ca>
and rdist 6.1.2.  Also fixes at least one possible core dump and
uses strr?chr() instead of r?index().
@
text
@d1 1
a1 1
/*	$OpenBSD: docmd.c,v 1.3 1996/06/26 05:37:38 deraadt Exp $	*/
d38 1
a38 1
static char *rcsid = "$OpenBSD: docmd.c,v 1.3 1996/06/26 05:37:38 deraadt Exp $";
d248 2
a249 1
	(void) sprintf(buf, "%s -Server%s", _PATH_RDIST, qflag ? " -q" : "");
d568 1
a568 1
	(void)sprintf(buf, "%s -oi -t", _PATH_SENDMAIL);
@


1.3
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d38 1
a38 1
static char *rcsid = "$OpenBSD: docmd.c,v 1.2 1996/06/26 03:42:13 deraadt Exp $";
d164 1
a164 1
			if (!nflag)
d166 2
d186 2
a187 1
		(void) fclose(lfp);
d214 1
d216 1
d231 1
a231 1
	cp = index(rhost, '@@');
d249 1
d257 1
d260 1
d262 3
d269 1
d273 3
d315 2
d318 1
d331 4
@


1.2
log
@open + fdopen
@
text
@d1 2
d38 1
a38 1
static char *rcsid = "$Id: docmd.c,v 1.1 1996/02/03 12:11:55 dm Exp $";
@


1.1
log
@rdist 6.1.1
@
text
@d36 1
a36 1
static char *rcsid = "$Id: docmd.c,v 1.1.1.1 1995/10/18 08:45:58 deraadt Exp $";
d142 2
d149 4
a152 1
		if ((lfp = fopen(tempfile, "w")) == NULL) {
d375 6
a380 1
		if ((tfp = fopen(tempfile, "w")) == NULL) {
@
