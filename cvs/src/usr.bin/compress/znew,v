head	1.3;
access;
symbols
	OPENBSD_6_1:1.3.0.50
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.46
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.42
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.44
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.36
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.40
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.38
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.34
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.32
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.30
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.28
	OPENBSD_5_0:1.3.0.26
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.24
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.22
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.18
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.20
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.16
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.14
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.12
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.10
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.8
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.6
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.4
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.2
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.2.0.8
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.6
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.4
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.2
	OPENBSD_3_4_BASE:1.2;
locks; strict;
comment	@# @;


1.3
date	2005.07.22.09.34.16;	author jmc;	state Exp;
branches;
next	1.2;

1.2
date	2003.08.05.18.22.17;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2003.08.02.20.53.51;	author otto;	state Exp;
branches;
next	;


desc
@@


1.3
log
@- sort options and sync usage()
- reword CAVEATS whilst here
@
text
@#!/bin/ksh -
#
# $OpenBSD: znew,v 1.2 2003/08/05 18:22:17 deraadt Exp $
#
# Copyright (c) 2003 Otto Moerbeek <otto@@drijf.net>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

# Return 0 if the first arg file size is smaller than the second, 1 otherwise.
smaller () {
	a=`du -k "$1" | awk '{ print $1 }'`
	b=`du -k "$2" | awk '{ print $1 }'`
	test $a -lt $b
}

# Check gzip integrity if the -t flag is specified
checkfile () {
	if test $tflag -eq 1; then
		gzip -qt < "$1"
	fi
}

# Decompress a file and then gzip it
process () {
	prefix="${1%.Z}"
	filez="$prefix".Z
	filegz="$prefix".gz

	if test ! -e "$filez"; then
		echo "$prog: $filez does not exist"
		return 1
	fi
	if test ! -f "$filez"; then
		echo "$prog: $filez is not a regular file"
		return 1
	fi
	if test -e "$filegz" -a $fflag -eq 0; then
		echo "$prog: $filegz already exists"
		return 1
	fi

	tmp=`mktemp /tmp/znewXXXXXXXXXX` || {
		echo "$prog: cannot create tmp file"
		return 1
	}
	trap 'rm -f "$tmp"; exit 1' HUP INT QUIT PIPE TERM

	# Do the actual work, producing a file "$tmp"
	if uncompress -f -c < "$filez" | gzip -f $gzipflags -o "$tmp"; then

		if test $kflag -eq 1 && smaller "$filez" "$tmp"; then
			echo -n "$prog: $filez is smaller than $filegz"
			echo "; keeping it"
			rm -f "$tmp"
			return 0
		fi
		if ! checkfile "$tmp"; then
			echo "$prog: integrity check of $tmp failed"
			rm -f "$tmp"
			return 1;
		fi

		# Try to keep the mode of the original file
		if ! cp -fp "$filez" "$filegz"; then
			echo "$prog: warning: could not keep mode of $filez"
		fi
		if  ! cp "$tmp" "$filegz" 2> /dev/null; then
			echo "$prog: warning: could not keep mode of $filez"
			if ! cp -f "$tmp" "$filegz" 2> /dev/null; then
				echo "$prog: could not copy $tmp to $filegz"
				rm -f "$filegz" "$tmp"
				return 1
			fi
		fi
		if ! touch -fr "$filez" "$filegz"; then
			echo -n "$prog: warning: could not keep timestamp of "
			echo "$filez"
		fi
		rm -f "$filez" "$tmp"
	else
		echo "$prog: failed to process $filez"
		rm -f "$tmp"
		return 1
	fi
}

prog=`basename "$0"`
usage="usage: $prog [-9fKtv] file ..."

fflag=0
tflag=0
kflag=0
gzipflags=

# -P flag is recognized to maintain compatibility, but ignored. Pipe mode is
# always used
while getopts :ftv9PK i; do
	case $i in
		f) fflag=1;;
		t) tflag=1;;
		v) gzipflags="-v $gzipflags";;
		9) gzipflags="-9 $gzipflags";;
		P) ;;
		K) kflag=1;;
		\?) echo "$usage"; exit 1;;
	esac
done

shift OPTIND-1

if test $# -eq 0; then
	echo "$usage"
	exit 1
fi

rc=0

while test $# -ne 0; do
	if ! process "$1"; then
		rc=$?
	fi
	shift
done
exit $rc
@


1.2
log
@spacing
@
text
@d3 1
a3 1
# $OpenBSD: znew,v 1.1 2003/08/02 20:53:51 otto Exp $
d99 1
a99 1
usage="usage: $prog [-ftv9K] file ..."
@


1.1
log
@A new, BSD licensed znew(1). Some suggestions from krw@@ and millert@@.

ok millert@@ krw@@
@
text
@d3 1
a3 1
# $OpenBSD$
d27 1
a27 1
# Check gzip integrity if the -t flag is specified 
@

