head	1.11;
access;
symbols
	OPENBSD_6_2:1.11.0.12
	OPENBSD_6_2_BASE:1.11
	OPENBSD_6_1:1.11.0.14
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.10
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.6
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.8
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.4
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.10.0.6
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.2
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.9.0.24
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.22
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.20
	OPENBSD_5_0:1.9.0.18
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.16
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.14
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.10
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.12
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.8
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.6
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.4
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.2
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.7.0.16
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.14
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.12
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.10
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.8
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.4.0.6
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4;
locks; strict;
comment	@.\" @;


1.11
date	2014.07.09.23.16.10;	author tedu;	state Exp;
branches;
next	1.10;
commitid	RvOp8Gc2smiQVrNp;

1.10
date	2013.07.16.00.07.52;	author schwarze;	state Exp;
branches;
next	1.9;

1.9
date	2007.05.31.19.20.20;	author jmc;	state Exp;
branches;
next	1.8;

1.8
date	2007.03.29.10.59.13;	author jmc;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.10.09.12.13;	author jmc;	state Exp;
branches;
next	1.6;

1.6
date	2003.02.15.09.44.42;	author jmc;	state Exp;
branches;
next	1.5;

1.5
date	2003.01.16.18.28.10;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.14.23.07.58;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.01.23.16.03;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.01.21.36.19;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.01.21.22.16;	author millert;	state Exp;
branches;
next	;


desc
@@


1.11
log
@floppy disks are obsolete. recommend keeping the keyfile on a flash disk
instead. ok mlarkin
@
text
@.\" $OpenBSD: x99token.1,v 1.10 2013/07/16 00:07:52 schwarze Exp $
.\"
.\" X9.9 calculator
.\" This software is provided AS IS with no express or implied warranty
.\" October 1995, Paul Borman <prb@@krystal.com>
.\"
.\" Donated to the Public Domain by Paul Borman
.\"
.Dd $Mdocdate: July 16 2013 $
.Dt X99TOKEN 1
.Os
.Sh NAME
.Nm x99token
.Nd X9.9 software token calculator
.Sh SYNOPSIS
.Nm x99token
.Op Fl d
.Op Fl k Ar keyfile
.Op Fl n Ar count
.Nm x99token
.Fl i
.Op Fl k Ar keyfile
.Sh DESCRIPTION
The
.Nm x99token
program is a simple X9.9 software token calculator.
The token is initialized by using the
.Fl i
option.
In this mode,
.Nm
requests a key.
The key consists of 8 bytes encoded in either hex or octal.
When encoded in hex the key must consist of 16 hex digits,
no spaces (e.g., "0123456789abcdef").
When encoded in octal the key must consist of 8 3-digit octets,
each separated by exactly one space
(e.g., "001 010 100 002 020 200 003 030").
Once the key is entered, a PIN number is requested.
The PIN number is used to perturb the key before it is stored in a keyfile.
This perturbation is not terribly secure.
You should assume that anyone with access to your
keyfile will also have access to your key.
.Pp
When
.Fl i
is not specified,
.Nm
is in calculator mode.
In this mode you must enter the same PIN as used in the initialization step.
The PIN is used to decode the key read from the keyfile.
Next you enter the challenge you have been presented with.
The
.Nm
program will provide you with a response to the challenge.
If the
.Fl d
option is used, the response will fold any hex digits to decimal.
If a
.Ar count
is specified by
.Fl n ,
it indicates the number of challenges to predict.
The first challenge is always the entered challenge.
By default the value of
.Ar count
is 1, which implies only the entered challenge is resolved.
.Pp
Future challenges are predicted by the following algorithm:
.Bl -bullet -offset indent
.It
Encrypt the current challenge with the shared secret key
.It
AND each byte of the response with 0x0f
.It
Modulo each byte by 10 (0x0a)
.It
ADD 0x30 (ASCII value of '0') to each byte
.El
.Pp
The resulting 8 bytes are all ASCII decimal digits and are the
predicted challenge.
This process may be repeated.
.Sh FILES
.Bl -tag -width $HOME/.keyfile.des -compact
.It Pa $HOME/.keyfile.des
default keyfile
.El
.Sh SEE ALSO
.Xr tokenadm 8 ,
.Xr tokeninit 8
.Sh AUTHORS
.An Paul Borman Aq Mt prb@@krystal.com
.Sh CAVEATS
This is a very simple-minded program.
The keyfile should be placed on a flash disk which is kept physically secure.
.Pp
Having not read the X9.9 standard, this may not be a complete or accurate
implementation of the standard.
This software is provided AS IS
with no express or implied warranty.
@


1.10
log
@use .Mt for email addresses; from Jan Stary <hans at stare dot cz>; ok jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: x99token.1,v 1.9 2007/05/31 19:20:20 jmc Exp $
d9 1
a9 1
.Dd $Mdocdate: May 31 2007 $
d96 1
a96 1
The keyfile should be placed on a floppy disk which is kept physically secure.
@


1.9
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\" $OpenBSD: x99token.1,v 1.8 2007/03/29 10:59:13 jmc Exp $
d9 1
a9 1
.Dd $Mdocdate$
d93 1
a93 1
.An Paul Borman Aq prb@@krystal.com
@


1.8
log
@tidy up SYNOPSIS and usage(); from Igor Sobrado
@
text
@d1 1
a1 1
.\" $OpenBSD: x99token.1,v 1.7 2003/06/10 09:12:13 jmc Exp $
d9 1
a9 1
.Dd August 1, 2001
@


1.7
log
@- section reorder
- COMPATIBILITY merge
- macro cleanup
- kill whitespace at EOL
- new sentence, new line

ssh pages ok markus@@
@
text
@d1 1
a1 1
.\" $OpenBSD: x99token.1,v 1.6 2003/02/15 09:44:42 jmc Exp $
a17 1
.Op Fl i
d20 3
@


1.6
log
@copyrights added;

file(1), magic(5): Ian F. Darwin
afterboot(8): Marshall M. Midden
x99token(1): Paul Borman
@
text
@d1 1
a1 1
.\" $OpenBSD: x99token.1,v 1.5 2003/01/16 18:28:10 millert Exp $
d6 1
a6 1
.\" 
d80 2
a81 1
predicted challenge.  This process may be repeated.
d91 1
a91 1
Paul Borman <prb@@krystal.com>
d93 1
a93 1
This is a very simple-minded program.  
d97 1
a97 1
implementation of the standard.  
@


1.5
log
@Fix typos; from jmc with one fix by me
@
text
@d1 7
a7 1
.\" $OpenBSD: x99token.1,v 1.4 2001/08/14 23:07:58 espie Exp $
@


1.4
log
@Thou shalt not use `you' in manpages and other misc. cleanup.
@
text
@d1 1
a1 1
.\" $OpenBSD: x99token.1,v 1.3 2001/08/01 23:16:03 millert Exp $
d28 1
a28 1
When encoded in octal the key must consist of 8 3 digit octets,
d43 1
a43 1
The PIN is used decode the the key read from the keyfile.
d47 1
a47 1
program will provide you a response to the challenge.
d86 1
a86 1
This is a very simple minded program.  
@


1.3
log
@Add "SEE ALSO", AUTHOR -> AUTHORS, NOTES -> CAVEATS
@
text
@d1 1
a1 1
.\" $OpenBSD: x99token.1,v 1.2 2001/08/01 21:36:19 millert Exp $
d86 2
a87 2
This is a very simple minded program.  It is recommended that the
keyfile be placed on a floppy disk which you keep physically secure.
d89 3
a91 2
Having not read the X9.9 standard, this may not be complete or accurate
implementation of that standard.  This software is provided AS IS
@


1.2
log
@quick conversion to mdoc
@
text
@d1 1
a1 1
.\" $OpenBSD$
d80 6
a85 1
.Sh NOTES
a91 2
.Sh AUTHOR
Paul Borman <prb@@krystal.com>
@


1.1
log
@x99token, a software x99 token calculator from Paul Borman that can
be used with login_token and friends.
@
text
@d1 15
a15 7
.TH X99TOKEN 1  "5 October 1995"
.SH NAME
x99token - X9.9 software token calculator
.SH SYNOPSIS
.PP
.B x99token [-d] [-i] [-k keyfile] [-n count]
.SH DESCRIPTION
d17 1
a17 1
.B x99token
d20 1
a20 1
.B -i
d23 4
a26 3
.B x99token
requests a key.  The key consists of 8 bytes encoded in either hex
or octal.  When encoded in hex the key must consist of 16 hex digits,
d28 2
a29 2
When encoded in octal the key must consist of 8 3 digit
octets, each separated by exactly one space
d31 4
a34 3
Once the key is entered, a PIN number is requested.  The PIN number is
used to perturb the key before it is stored in a keyfile.  This perturbation
is not terribly secure.  You should assume that anyone with access to your
d36 1
a36 1
.PP
d38 1
a38 1
.B -i
d40 1
a40 1
.B x99token
d42 3
a44 3
In this mode you must enter the same PIN as used above in the initialization
step.  The PIN is used decode the the key read from the keyfile.
Next you enter the challenge you have been presented.
d46 4
a49 3
.B x99token
program will provide you a response to the challenge.  If the
.B -d
d52 1
a52 1
.I count
d54 5
a58 4
.B -n ,
it indicates the number of challenges to predict.  The first challenge
is always the entered challenge.  By default the value of
.I count
d60 1
a60 1
.PP
d62 11
a72 11
.nf
.sp
* Encrypt the current challenge with the shared secret key

* AND each byte of the response with 0x0f

* Modulo each byte by 10 (0x0a)

* ADD 0x30 (ASCII value of '0') to each byte
.fi
.sp
d75 6
a80 6
.SH FILES
.ta 3i
$HOME/.keyfile.des	default keyfile under BSD
.br
keyfile.des	default keyfle under DOS
.SH NOTES
d83 1
a83 4
Under DOS the keyfile is marked as both a hidden and system file.
When used with BSD/OS 3.0 or beyond, the token authentication type
supplies the appropriate challenges and initialization information.
.PP
d87 1
a87 1
.SH AUTHOR
a88 5
.SH CREDITS
This code uses the publicly available des library written by Phil Karn, KA9Q.
The decryption code from Phil's library has been removed to allow
.B x99token
to be free of export restrictions (as it can only encrypt and not decrypt).
@

