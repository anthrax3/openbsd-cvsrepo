head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.12
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.8
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.4
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.3.0.12
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.10
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.6
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.4
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2015.01.21.08.43.55;	author ratchov;	state Exp;
branches;
next	1.3;
commitid	SYQcoS9jhSKqSJDL;

1.3
date	2012.03.23.11.59.54;	author ratchov;	state Exp;
branches;
next	1.2;

1.2
date	2011.06.27.07.17.44;	author ratchov;	state Exp;
branches;
next	1.1;

1.1
date	2011.05.09.18.03.08;	author ratchov;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Simplify internals and rewrite file header parsing code:
- remove -M, -t, -w, -C, -x flags that don't make sense anymore
- make "-j off" the default (sndiod already does the job)
- don't limit the number of played/recorded files.
- add support for floating-point encoded files.
- add support for apple .aiff and sun/next .au files
@
text
@/*	$OpenBSD$	*/
/*
 * Copyright (c) 2011 Alexandre Ratchov <alex@@caoua.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
#ifndef SYSEX_H
#define SYSEX_H

#include <stdint.h>

/*
 * start and end markers
 */
#define SYSEX_START		0xf0
#define SYSEX_END		0xf7

/*
 * type/vendor namespace IDs we use
 */
#define SYSEX_TYPE_RT		0x7f	/* real-time universal */
#define SYSEX_TYPE_EDU		0x7d	/* non-comercial */

/*
 * realtime messages in the "universal real-time" namespace
 */
#define SYSEX_MTC		0x01		/* mtc messages */
#define   SYSEX_MTC_FULL	0x01		/* mtc full frame message */
#define SYSEX_CONTROL		0x04
#define   SYSEX_MASTER		0x01
#define SYSEX_MMC		0x06
#define   SYSEX_MMC_STOP	0x01
#define   SYSEX_MMC_START	0x02
#define   SYSEX_MMC_LOC		0x44
#define   SYSEX_MMC_LOC_LEN	0x06
#define   SYSEX_MMC_LOC_CMD	0x01

/*
 * sepcial "any" midi device number
 */
#define SYSEX_DEV_ANY		0x7f

/*
 * minimum size of sysex message we accept
 */
#define SYSEX_SIZE(m)	(5 + sizeof(struct sysex_ ## m))

/*
 * all possible system exclusive messages we support.
 */
struct sysex {
	uint8_t start;
	uint8_t type;				/* type or vendor id */
	uint8_t dev;				/* device or product id */
	uint8_t id0;				/* message id */
	uint8_t id1;				/* sub-id */
	union sysex_all {
		struct sysex_empty {
			uint8_t end;
		} empty;
		struct sysex_master {
			uint8_t fine;
			uint8_t coarse;
			uint8_t end;
		} master;
		struct sysex_start {
			uint8_t end;
		} start;
		struct sysex_stop {
			uint8_t end;
		} stop;
		struct sysex_loc {
			uint8_t len;
			uint8_t cmd;
#define MTC_FPS_24	0
#define MTC_FPS_25	1
#define MTC_FPS_30	3
			uint8_t hr;		/* MSB contain MTC_FPS */
			uint8_t min;
			uint8_t sec;
			uint8_t fr;
			uint8_t cent;
			uint8_t end;
		} loc;
		struct sysex_full {
			uint8_t hr;
			uint8_t min;
			uint8_t sec;
			uint8_t fr;
			uint8_t end;
		} full;
	} u;
};

#endif /* !defined(SYSEX_H) */
@


1.3
log
@add a MIDI-controlled master volume knob to adjust the mix of
all playback stream, discussed with armani@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sysex.h,v 1.2 2011/06/27 07:17:44 ratchov Exp $	*/
d17 2
a18 2
#ifndef AUCAT_SYSEX_H
#define AUCAT_SYSEX_H
d49 1
a49 1
 * aucat-specific messages, in the "edu" namespace
d51 1
a51 4
#define SYSEX_AUCAT		0x23		/* aucat-specific */
#define   SYSEX_AUCAT_MIXINFO	0x01		/* mixer info */
#define   SYSEX_AUCAT_DUMPREQ	0x02		/* dump request */
#define   SYSEX_AUCAT_DUMPEND	0x03		/* end of dump */
d59 1
a59 3
 * all possible system exclusive messages we support. For aucat-specific
 * messages we use the same header as real-time messages to simplify the
 * message parser
d85 4
a88 1
			uint8_t hr;
a101 13
		struct sysex_mixinfo {
			uint8_t chan;			/* channel */
			uint8_t vol;			/* current volume */
#define SYSEX_NAMELEN	10				/* \0 included */
			uint8_t name[SYSEX_NAMELEN];	/* stream name */
			uint8_t end;
		} mixinfo;
		struct sysex_dumpreq {
			uint8_t end;
		} dumpreq;
		struct sysex_dumpend {
			uint8_t end;
		} dumpend;
d105 1
a105 1
#endif /* !defined(AUCAT_SYSEX_H) */
@


1.2
log
@expose audio client names through sysex messages, this way any
midi client could determine which volume knob corresponds to which
client. Such sysex messages are ignored by hardware or software
that don't understand them
@
text
@d1 1
a1 1
/*	$OpenBSD: sysex.h,v 1.1 2011/05/09 18:03:08 ratchov Exp $	*/
d39 2
d76 5
@


1.1
log
@move all hardcoded offsets and constants relative to midi system
exclusive messages in a nice sysex.h file. No behaviour change.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d32 1
d47 8
d97 13
@

