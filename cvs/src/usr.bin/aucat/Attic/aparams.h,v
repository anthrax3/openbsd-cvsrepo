head	1.14;
access;
symbols
	OPENBSD_5_6:1.12.0.12
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.10
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.6
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.4
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.2
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.6
	OPENBSD_5_0:1.11.0.4
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.2
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.8.0.4
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.5.0.6
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.2
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.1.0.2
	OPENBSD_4_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.14
date	2015.01.21.08.43.55;	author ratchov;	state dead;
branches;
next	1.13;
commitid	SYQcoS9jhSKqSJDL;

1.13
date	2015.01.16.06.40.05;	author deraadt;	state Exp;
branches;
next	1.12;
commitid	Uu5nFG3wCl0LACBb;

1.12
date	2012.04.11.06.05.43;	author ratchov;	state Exp;
branches;
next	1.11;

1.11
date	2010.11.05.16.42.17;	author ratchov;	state Exp;
branches;
next	1.10;

1.10
date	2010.11.05.15.23.18;	author ratchov;	state Exp;
branches;
next	1.9;

1.9
date	2010.11.04.17.55.28;	author ratchov;	state Exp;
branches;
next	1.8;

1.8
date	2009.09.27.11.51.20;	author ratchov;	state Exp;
branches;
next	1.7;

1.7
date	2009.08.17.15.07.49;	author ratchov;	state Exp;
branches;
next	1.6;

1.6
date	2009.07.25.10.52.18;	author ratchov;	state Exp;
branches;
next	1.5;

1.5
date	2008.11.20.10.10.01;	author ratchov;	state Exp;
branches;
next	1.4;

1.4
date	2008.11.10.23.25.37;	author ratchov;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.03.22.25.13;	author ratchov;	state Exp;
branches;
next	1.2;

1.2
date	2008.10.26.08.49.43;	author ratchov;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.23.07.15.46;	author ratchov;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Simplify internals and rewrite file header parsing code:
- remove -M, -t, -w, -C, -x flags that don't make sense anymore
- make "-j off" the default (sndiod already does the job)
- don't limit the number of played/recorded files.
- add support for floating-point encoded files.
- add support for apple .aiff and sun/next .au files
@
text
@/*	$OpenBSD: aparams.h,v 1.13 2015/01/16 06:40:05 deraadt Exp $	*/
/*
 * Copyright (c) 2008 Alexandre Ratchov <alex@@caoua.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
#ifndef APARAMS_H
#define APARAMS_H

#define NCHAN_MAX	16		/* max channel in a stream */
#define RATE_MIN	4000		/* min sample rate */
#define RATE_MAX	192000		/* max sample rate */
#define BITS_MIN	1		/* min bits per sample */
#define BITS_MAX	32		/* max bits per sample */

/*
 * Maximum size of the encording string (the longest possible
 * encoding is ``s24le3msb'').
 */
#define ENCMAX	10

/*
 * Default bytes per sample for the given bits per sample.
 */
#define APARAMS_BPS(bits) (((bits) <= 8) ? 1 : (((bits) <= 16) ? 2 : 4))

/*
 * Encoding specification.
 */
struct aparams {
	unsigned int bps;		/* bytes per sample */
	unsigned int bits;		/* actually used bits */
	unsigned int le;		/* 1 if little endian, 0 if big endian */
	unsigned int sig;		/* 1 if signed, 0 if unsigned */
	unsigned int msb;		/* 1 if msb justified, 0 if lsb justified */
	unsigned int cmin, cmax;	/* provided/consumed channels */
	unsigned int rate;		/* frames per second */
};

/*
 * Samples are numbers in the interval [-1, 1[, note that 1, the upper
 * boundary is excluded. We represent them as signed fixed point numbers
 * of ADATA_BITS. We also assume that 2^(ADATA_BITS - 1) fits in a int.
 */
#ifndef ADATA_BITS
#define ADATA_BITS			16
#endif
#define ADATA_LE			(BYTE_ORDER == LITTLE_ENDIAN)
#define ADATA_UNIT			(1 << (ADATA_BITS - 1))

#if ADATA_BITS == 16

typedef short adata_t;

#define ADATA_MUL(x,y)		(((int)(x) * (int)(y)) >> (ADATA_BITS - 1))
#define ADATA_MULDIV(x,y,z)	((int)(x) * (int)(y) / (int)(z))

#elif ADATA_BITS == 24

typedef int adata_t;

#if defined(__i386__) && defined(__GNUC__)

static inline int
fp24_mul(int x, int a)
{
	int res;

	asm volatile (
		"imull	%2\n\t"
		"shrdl $23, %%edx, %%eax\n\t"
		: "=a" (res)
		: "a" (x), "r" (a)
		: "%edx"
		);
	return res;
}

static inline int
fp24_muldiv(int x, int a, int b)
{
	int res;

	asm volatile (
		"imull %2\n\t"
		"idivl %3\n\t"
		: "=a" (res)
		: "a" (x), "d" (a), "r" (b)
		);
	return res;
}

#define ADATA_MUL(x,y)		fp24_mul(x, y)
#define ADATA_MULDIV(x,y,z)	fp24_muldiv(x, y, z);

#elif defined(__amd64__) || defined(__sparc64__)

#define ADATA_MUL(x,y)		\
	((int)(((long long)(x) * (long long)(y)) >> (ADATA_BITS - 1)))
#define ADATA_MULDIV(x,y,z)	\
	((int)((long long)(x) * (long long)(y) / (long long)(z)))

#else
#error "no 24-bit code for this architecture"
#endif

#else
#error "only 16-bit and 24-bit precisions are supported"
#endif

#define MIDI_MAXCTL		127
#define MIDI_TO_ADATA(m)	(aparams_ctltovol[m] << (ADATA_BITS - 16))

extern int aparams_ctltovol[128];
extern struct aparams aparams_none;

void aparams_init(struct aparams *, unsigned int, unsigned int, unsigned int);
void aparams_dbg(struct aparams *);
int aparams_eqrate(struct aparams *, struct aparams *);
int aparams_eqenc(struct aparams *, struct aparams *);
int aparams_eq(struct aparams *, struct aparams *);
int aparams_subset(struct aparams *, struct aparams *);
void aparams_grow(struct aparams *, struct aparams *);
unsigned int aparams_bpf(struct aparams *);
int aparams_strtoenc(struct aparams *, char *);
int aparams_enctostr(struct aparams *, char *);
void aparams_copyenc(struct aparams *, struct aparams *);

#endif /* !defined(APARAMS_H) */
@


1.13
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: aparams.h,v 1.12 2012/04/11 06:05:43 ratchov Exp $	*/
@


1.12
log
@Use "unsigned int" rather than "unsigned". No object change.
suggested by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: aparams.h,v 1.11 2010/11/05 16:42:17 ratchov Exp $	*/
a18 2

#include <sys/param.h>
@


1.11
log
@Add experimental support for 24-bit arithmetic, meaning that full
dynamic range of 24-bit hardware can be used. Offline processing like
mixing and channel mapping is done with 24-bit precision too.

Since most hardware and audio programs use 16-bit precision, 24-bit
processing is a small waste of CPU time in many cases, so 24-bit
processing is not desirable and this is disabled by default.
Furthermore it's available on i386, amd64 and sparc64 only. To
experiment with it:

make COPTS="-DADATA_BITS=24"
@
text
@d1 1
a1 1
/*	$OpenBSD: aparams.h,v 1.10 2010/11/05 15:23:18 ratchov Exp $	*/
d43 7
a49 7
	unsigned bps;		/* bytes per sample */
	unsigned bits;		/* actually used bits */
	unsigned le;		/* 1 if little endian, 0 if big endian */
	unsigned sig;		/* 1 if signed, 0 if unsigned */
	unsigned msb;		/* 1 if msb justified, 0 if lsb justified */
	unsigned cmin, cmax;	/* provided/consumed channels */
	unsigned rate;		/* frames per second */
d129 1
a129 1
void aparams_init(struct aparams *, unsigned, unsigned, unsigned);
d136 1
a136 1
unsigned aparams_bpf(struct aparams *);
@


1.10
log
@Convert ulaw/alaw to native format (ie using ADATA_XXX defines) rather
than s16 (using hardcoded constants). Currently s16 is the native format,
so no behavior change.
@
text
@d1 1
a1 1
/*	$OpenBSD: aparams.h,v 1.9 2010/11/04 17:55:28 ratchov Exp $	*/
d57 1
d59 1
d63 2
d69 53
@


1.9
log
@Replace ``short'' by a new ``adata_t'' typedef corresponding to
audio samples and cleanup ADATA_XXX macros. This allows easilly
switching to 24 bit fixed point arithmetic by simply redefining
the adata_t typedef to int and updating ADATA_XXX macros. No
object change.
@
text
@d1 1
a1 1
/*	$OpenBSD: aparams.h,v 1.8 2009/09/27 11:51:20 ratchov Exp $	*/
a33 8
#if BYTE_ORDER ==  LITTLE_ENDIAN
#define NATIVE_LE 1
#elif BYTE_ORDER == BIG_ENDIAN
#define NATIVE_LE 0
#else
/* not defined */
#endif

d54 2
a55 3
 * boundary is excluded. We represent them in 16-bit signed fixed point
 * numbers, so that we can do all multiplications and divisions in
 * 32-bit precision without having to deal with overflows.
d57 4
d62 1
a62 2
#define ADATA_BITS		16
#define ADATA_MSB		1
a64 3

#define ADATA_UNIT		(1 << (ADATA_BITS - 1))
#define ADATA_MAX		(ADATA_UNIT - 1)
@


1.8
log
@remove all debug traces
@
text
@d1 1
a1 1
/*	$OpenBSD: aparams.h,v 1.7 2009/08/17 15:07:49 ratchov Exp $	*/
d66 5
d72 1
a72 2
#define ADATA_SHIFT		(8 * sizeof(short) - 1)
#define ADATA_UNIT		(1 << ADATA_SHIFT)
a73 1
#define ADATA_MUL(x,y)		(((x) * (y)) >> ADATA_SHIFT)
d76 1
a76 1
#define MIDI_TO_ADATA(m)	(aparams_ctltovol[m])
@


1.7
log
@if one or more MIDI devices are specified in server mode, subscribe
them to the MIDI thru box
@
text
@d1 1
a1 1
/*	$OpenBSD: aparams.h,v 1.6 2009/07/25 10:52:18 ratchov Exp $	*/
d79 1
a79 2
void aparams_print(struct aparams *);
void aparams_print2(struct aparams *, struct aparams *);
@


1.6
log
@fix comments, remove no longer needed declaration, reorder includes
from Thomas Pfaff
@
text
@d1 1
a1 1
/*	$OpenBSD: aparams.h,v 1.5 2008/11/20 10:10:01 ratchov Exp $	*/
d76 1
@


1.5
log
@take into account socket parameters into calculation of device
parameters; without this change aucat uses the device default
parameters and they are not necessarily usable for multi-stream
mode.
@
text
@d1 1
a1 1
/*	$OpenBSD: aparams.h,v 1.4 2008/11/10 23:25:37 ratchov Exp $	*/
d29 2
a30 2
 * maximum size of the encording string (the longest possible
 * encoding is ``s24le3msb'')
d43 1
a43 1
 * default bytes per sample for the given bits per sample
d48 1
a48 1
 * encoding specification
@


1.4
log
@add a per-stream ``soft volume'' knob and the corresponding -v option.
The code will be useful later for the volume knob in the sndio API.
@
text
@d1 1
a1 1
/*	$OpenBSD: aparams.h,v 1.3 2008/11/03 22:25:13 ratchov Exp $	*/
d84 1
@


1.3
log
@A small optimization: handle most N-channel <-> M-channel conversions
inside the mixer and the demultiplexer. This way, aucat will not
trigger the heavy conversion code when only channel conversions are
required. Cuts ~50% of the CPU usage on envy(4) devices, can improve
surround 4.0, 5.1 and 7.1 capable devices. No functionnal change.
@
text
@d1 1
a1 1
/*	$OpenBSD: aparams.h,v 1.2 2008/10/26 08:49:43 ratchov Exp $	*/
d71 5
@


1.2
log
@add minimal server capability to aucat(1). When started in server
mode, it listens on an unix socket and mixes/demultiplexes any number
of full-duplex streams, doing necessary format conversions and
resampling on the fly.

programs can use the new libsa(3) library to play and record audio.
The library provides a very simple API to connect to the audio server;
if aucat(1) isn't running, it uses the audio(4) driver transparently
instead.
@
text
@d1 1
a1 1
/*	$OpenBSD: aparams.h,v 1.1 2008/05/23 07:15:46 ratchov Exp $	*/
d75 2
d78 1
@


1.1
log
@add support for:
 - recording, full-duplex operation
 - format conversions and resampling on the fly
 - mixing on the fly of multiple inputs of different formats
 - up to 16 channels, simplistic "routing" of channel ranges
 - more linear encodings (in raw and wav files)
the old behaviour is fully preserved if none of the new -i and -o
options are used.

code and fixes from jakemsr@@ and eric@@, suggestions by others.
ok "go ahead" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d22 4
a25 3
#define CHAN_MAX	16		/* max number of channels */
#define RATE_MIN	1		/* min sample rate */
#define RATE_MAX	(1 << 30)	/* max sample rate */
d28 6
d43 5
d77 3
@

