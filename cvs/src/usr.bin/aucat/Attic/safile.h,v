head	1.5;
access;
symbols
	OPENBSD_4_6:1.3.0.6
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3;
locks; strict;
comment	@ * @;


1.5
date	2010.01.13.10.02.52;	author ratchov;	state dead;
branches;
next	1.4;

1.4
date	2009.07.25.10.52.19;	author ratchov;	state Exp;
branches;
next	1.3;

1.3
date	2008.12.07.17.10.41;	author ratchov;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.07.21.01.15;	author ratchov;	state Exp;
branches;
next	1.1;

1.1
date	2008.10.26.08.49.44;	author ratchov;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Rename s/safile/siofile/g, missed when libsa was renamed to
libsndio. Fixes crashes in full-duplex mode on vax and hp300.
@
text
@/*	$OpenBSD: safile.h,v 1.4 2009/07/25 10:52:19 ratchov Exp $	*/
/*
 * Copyright (c) 2008 Alexandre Ratchov <alex@@caoua.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
#ifndef SAFILE_H
#define SAFILE_H

struct fileops;
struct safile;
struct aparams;

struct safile *safile_new(struct fileops *, char *,
    struct aparams *, struct aparams *, unsigned *, unsigned *);

extern struct fileops safile_ops;

/*
 * Sun API specific functions.
 */
struct audio_prinfo;
int sun_infotopar(struct audio_prinfo *, struct aparams *);
void sun_partoinfo(struct audio_prinfo *, struct aparams *);

#endif /* !defined(SAFILE_H) */
@


1.4
log
@fix comments, remove no longer needed declaration, reorder includes
from Thomas Pfaff
@
text
@d1 1
a1 1
/*	$OpenBSD: safile.h,v 1.3 2008/12/07 17:10:41 ratchov Exp $	*/
@


1.3
log
@When resampling, don't require the sample frequency to be an integer.
This removes the arithmetic constraint between the sample frequency
and the block size and all the associated code. Now aucat can work
in server mode with any block size.
ok jakemsr
@
text
@d1 1
a1 1
/*	$OpenBSD: safile.h,v 1.2 2008/11/07 21:01:15 ratchov Exp $	*/
a19 1
struct file;
d30 1
a30 1
 * Sun API specific functions
d36 1
a36 1
#endif /* !defined(SUN_H) */
@


1.2
log
@expose the block size in the sndio API by making par->round writable
and thus remove the ugly rate <-> block-size table from
sio_setpar(3). Handle the block size negociation in aucat(1), since
it has few constrains the code is overally simpler.
ok jakemsr@@, major crank suggested by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: safile.h,v 1.1 2008/10/26 08:49:44 ratchov Exp $	*/
d26 1
a26 1
    struct aparams *, struct aparams *, unsigned *, unsigned *, int);
@


1.1
log
@add minimal server capability to aucat(1). When started in server
mode, it listens on an unix socket and mixes/demultiplexes any number
of full-duplex streams, doing necessary format conversions and
resampling on the fly.

programs can use the new libsa(3) library to play and record audio.
The library provides a very simple API to connect to the audio server;
if aucat(1) isn't running, it uses the audio(4) driver transparently
instead.
@
text
@d1 1
a1 1
/*	$OpenBSD: file.h,v 1.3 2008/08/14 09:58:55 ratchov Exp $	*/
d26 1
a26 1
    struct aparams *, struct aparams *, unsigned *, unsigned *);
@

