head	1.10;
access;
symbols
	OPENBSD_5_4:1.9.0.6
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.4
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.2
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.2
	OPENBSD_5_0:1.7.0.2
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.5.0.6
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.3.0.6
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3;
locks; strict;
comment	@ * @;


1.10
date	2013.11.12.06.47.34;	author ratchov;	state dead;
branches;
next	1.9;

1.9
date	2012.04.11.06.05.43;	author ratchov;	state Exp;
branches;
next	1.8;

1.8
date	2011.10.12.07.20.04;	author ratchov;	state Exp;
branches;
next	1.7;

1.7
date	2011.04.28.06.19.57;	author ratchov;	state Exp;
branches;
next	1.6;

1.6
date	2011.04.19.00.02.29;	author ratchov;	state Exp;
branches;
next	1.5;

1.5
date	2009.07.25.10.52.19;	author ratchov;	state Exp;
branches;
next	1.4;

1.4
date	2009.07.25.08.44.27;	author ratchov;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.16.18.34.56;	author ratchov;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.16.16.30.22;	author ratchov;	state Exp;
branches;
next	1.1;

1.1
date	2008.10.26.08.49.44;	author ratchov;	state Exp;
branches;
next	;


desc
@@


1.10
log
@remove bogus legacy server-specific bits that cause confusion
@
text
@/*	$OpenBSD: listen.h,v 1.9 2012/04/11 06:05:43 ratchov Exp $	*/
/*
 * Copyright (c) 2008 Alexandre Ratchov <alex@@caoua.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
#ifndef LISTEN_H
#define LISTEN_H

#include <sys/types.h>

#include "aparams.h"
#include "file.h"

struct listen {
	struct file file;
	struct listen *next;
	char *path;
	int fd;
};

extern struct listen *listen_list;

void listen_new_un(char *);
void listen_new_tcp(char *, unsigned int);
int listen_init(struct listen *);
int listen_nfds(struct file *);
int listen_pollfd(struct file *, struct pollfd *, int);
int listen_revents(struct file *, struct pollfd *);
void listen_close(struct file *);
void listen_closeall(void);

#endif /* !defined(LISTEN_H) */
@


1.9
log
@Use "unsigned int" rather than "unsigned". No object change.
suggested by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: listen.h,v 1.8 2011/10/12 07:20:04 ratchov Exp $	*/
@


1.8
log
@Simplify and improve the way options are parsed and remove ~300 lines
of code that becomes unused. Few command line arguments changes are
required though:

  - stream definitions (-ios) now must follow devices definitions they
    are attached to (-fMn)

  - the -n option is now a special "loopback" device and is thus used
    like -f, eg it must precede streams

  - in midicat, midi thru boxes are not created automatically anymore,
    the new "-M" option must be used for that

  - channel numbers (-Cc options) correspond always to channel numbers
    of the hardware.

  - the -u option isn't needed anymore

  - increase the log verbosity so user errors are logged
    without using -d

tested by many, help from jmc
@
text
@d1 1
a1 1
/*	$OpenBSD: listen.h,v 1.7 2011/04/28 06:19:57 ratchov Exp $	*/
d35 1
a35 1
void listen_new_tcp(char *, unsigned);
@


1.7
log
@Implement a new authentication method allowing aucat and midicat to
work over TCP, for instance, to expose the sound card of one machine
with other machines of the network.

The first client generates a 128-bit random number (aka the
session cookie), saves it in $HOME/.aucat_cookie and sends it to the
server. Successive clients load the cookie from $HOME/.aucat_cookie
and send it to the server but the server accepts only clients whose
cookie matches the session cookie. When all clients are gone, the
session is over, and another cookie could start a new session, and so
on.

TCP is enabled on the server with the new -L option, and on the client
side hostnames are specified with a new optional component in the
device name.

hints from damien, dlg and deraadt, tweaks from jmc
@
text
@d1 1
a1 1
/*	$OpenBSD: listen.h,v 1.6 2011/04/19 00:02:29 ratchov Exp $	*/
d27 1
d32 2
d36 1
@


1.6
log
@don't hold a pointer to "listen" structure. Instead, when it must
be free()ed, iterate over the file_list, and find the structure
to free. This is safer and simpler. No behaviour change
@
text
@d1 1
a1 1
/*	$OpenBSD: listen.h,v 1.5 2009/07/25 10:52:19 ratchov Exp $	*/
d32 1
@


1.5
log
@fix comments, remove no longer needed declaration, reorder includes
from Thomas Pfaff
@
text
@d1 1
a1 1
/*	$OpenBSD: listen.h,v 1.4 2009/07/25 08:44:27 ratchov Exp $	*/
d31 1
a31 1
struct listen *listen_new(struct fileops *, char *);
d36 1
a36 1
extern struct fileops listen_ops;
@


1.4
log
@Currently midi capable programs can control midi hardware, but
cannot cooperate with other programs.  The aim of this change is
to allow any program to send midi data to other programs as they
were midi hardware. For instance, this change should solve the
longstanding problem of using a midi sequencer with software
synthesizers. More precisely:

 - new midicat(1) utility (actually hardlink to aucat(1)).
   it creates software midi thru boxes, allowing programs
   to send midi messages to other programs as they were
   midi(4) hardware.

 - new midi api in libsndio (see mio_open(3)), to access
   midi(4) devices and midicat(1) sockets in a uniform way.

 - new device naming scheme <service>:<unit>[.<option>],
   common to audio and midi.

 - new sndio(7) manual describing concepts and naming

The current audio device naming still works, but people having
scripts or configuration files containing device names could read
the sndio(7) man page and slowly start updating device names.

discussed with jakemsr@@ and deraadt@@, help form jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: listen.h,v 1.3 2008/11/16 18:34:56 ratchov Exp $	*/
d22 1
a23 1
#include "aparams.h"
@


1.3
log
@add ``template'' parameters to sockets rather than using device
parameters. No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: listen.h,v 1.2 2008/11/16 16:30:22 ratchov Exp $	*/
a28 3
	int maxweight;		/* max dynamic range for clients */
	struct aparams wpar;	/* template for clients write params */
	struct aparams rpar;	/* template for clients read params */
d31 1
a31 2
struct listen *listen_new(struct fileops *, char *,
    struct aparams *, struct aparams *, int);
@


1.2
log
@Make clients inherit the volume parameter when the -v option is used in
server mode. It gives the maximum volume a client may have. This wastes
dynamic range, but allows volume to stay constant when other clients
connect or disconnect.
@
text
@d1 1
a1 1
/*	$OpenBSD: listen.h,v 1.1 2008/10/26 08:49:44 ratchov Exp $	*/
d23 1
d30 2
d34 2
a35 1
struct listen *listen_new(struct fileops *, char *, int);
d37 1
a37 1
int listen_pollfd(struct file *, struct pollfd *, int events);
@


1.1
log
@add minimal server capability to aucat(1). When started in server
mode, it listens on an unix socket and mixes/demultiplexes any number
of full-duplex streams, doing necessary format conversions and
resampling on the fly.

programs can use the new libsa(3) library to play and record audio.
The library provides a very simple API to connect to the audio server;
if aucat(1) isn't running, it uses the audio(4) driver transparently
instead.
@
text
@d1 1
a1 1
/*	$OpenBSD: file.h,v 1.3 2008/08/14 09:58:55 ratchov Exp $	*/
d28 1
d31 1
a31 1
struct listen *listen_new(struct fileops *, char *);
@

