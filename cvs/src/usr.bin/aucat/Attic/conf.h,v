head	1.24;
access;
symbols
	OPENBSD_5_6:1.23.0.14
	OPENBSD_5_6_BASE:1.23
	OPENBSD_5_5:1.23.0.12
	OPENBSD_5_5_BASE:1.23
	OPENBSD_5_4:1.23.0.8
	OPENBSD_5_4_BASE:1.23
	OPENBSD_5_3:1.23.0.6
	OPENBSD_5_3_BASE:1.23
	OPENBSD_5_2:1.23.0.4
	OPENBSD_5_2_BASE:1.23
	OPENBSD_5_1_BASE:1.23
	OPENBSD_5_1:1.23.0.2
	OPENBSD_5_0:1.22.0.2
	OPENBSD_5_0_BASE:1.22
	OPENBSD_4_9:1.16.0.2
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.15.0.2
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.6.0.6
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2;
locks; strict;
comment	@ * @;


1.24
date	2015.01.21.08.43.55;	author ratchov;	state dead;
branches;
next	1.23;
commitid	SYQcoS9jhSKqSJDL;

1.23
date	2011.10.12.07.20.04;	author ratchov;	state Exp;
branches;
next	1.22;

1.22
date	2011.04.27.21.32.40;	author ratchov;	state Exp;
branches;
next	1.21;

1.21
date	2011.04.27.21.20.36;	author ratchov;	state Exp;
branches;
next	1.20;

1.20
date	2011.04.27.17.58.43;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2011.04.18.23.59.15;	author ratchov;	state Exp;
branches;
next	1.18;

1.18
date	2011.04.16.12.09.05;	author ratchov;	state Exp;
branches;
next	1.17;

1.17
date	2011.04.16.11.51.48;	author ratchov;	state Exp;
branches;
next	1.16;

1.16
date	2010.10.21.18.57.42;	author ratchov;	state Exp;
branches;
next	1.15;

1.15
date	2010.04.06.20.07.01;	author ratchov;	state Exp;
branches;
next	1.14;

1.14
date	2010.04.03.17.59.17;	author ratchov;	state Exp;
branches;
next	1.13;

1.13
date	2010.04.03.17.40.33;	author ratchov;	state Exp;
branches;
next	1.12;

1.12
date	2010.01.10.21.47.41;	author ratchov;	state Exp;
branches;
next	1.11;

1.11
date	2009.11.03.21.31.37;	author ratchov;	state Exp;
branches;
next	1.10;

1.10
date	2009.09.27.11.51.20;	author ratchov;	state Exp;
branches;
next	1.9;

1.9
date	2009.08.17.16.17.46;	author ratchov;	state Exp;
branches;
next	1.8;

1.8
date	2009.07.25.10.52.18;	author ratchov;	state Exp;
branches;
next	1.7;

1.7
date	2009.07.25.08.44.27;	author ratchov;	state Exp;
branches;
next	1.6;

1.6
date	2009.02.03.19.44.58;	author ratchov;	state Exp;
branches;
next	1.5;

1.5
date	2008.11.10.23.25.37;	author ratchov;	state Exp;
branches;
next	1.4;

1.4
date	2008.10.26.08.49.43;	author ratchov;	state Exp;
branches;
next	1.3;

1.3
date	2008.08.14.09.39.16;	author ratchov;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.28.07.36.23;	author ratchov;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.23.07.15.46;	author ratchov;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Simplify internals and rewrite file header parsing code:
- remove -M, -t, -w, -C, -x flags that don't make sense anymore
- make "-j off" the default (sndiod already does the job)
- don't limit the number of played/recorded files.
- add support for floating-point encoded files.
- add support for apple .aiff and sun/next .au files
@
text
@/*	$OpenBSD: conf.h,v 1.23 2011/10/12 07:20:04 ratchov Exp $	*/
/*
 * Copyright (c) 2008 Alexandre Ratchov <alex@@caoua.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
#ifndef CONF_H
#define CONF_H

#ifdef DEBUG
#include <signal.h>

/*
 * Debug trace levels:
 *
 * 0 - fatal errors: bugs, asserts, internal errors.
 * 1 - warnings: bugs in clients, failed allocations, non-fatal errors.
 * 2 - misc information (hardware parameters, incoming clients)
 * 3 - structural changes (new aproc structures and files stream params changes)
 * 4 - data blocks and messages
 */
extern volatile sig_atomic_t debug_level;
#endif

/*
 * MIDI buffer size
 */
#define MIDI_BUFSZ		3125	/* 1 second at 31.25kbit/s */

/*
 * units used for MTC clock.
 */
#define MTC_SEC			2400	/* 1 second is 2400 ticks */

/*
 * device or sub-device mode, must be a superset of corresponding SIO_XXX
 * and MIO_XXX constants
 */
#define MODE_PLAY	0x01	/* allowed to play */
#define MODE_REC	0x02	/* allowed to rec */
#define MODE_MIDIOUT	0x04	/* allowed to read midi */
#define MODE_MIDIIN	0x08	/* allowed to write midi */
#define MODE_MON	0x10	/* allowed to monitor */
#define MODE_LOOP	0x20	/* deviceless mode */
#define MODE_THRU	0x40	/* pass thru insted of device control */
#define MODE_PLAYREC	(MODE_PLAY | MODE_REC)
#define MODE_RECMASK	(MODE_REC | MODE_MON)
#define MODE_AUDIOMASK	(MODE_PLAY | MODE_REC | MODE_MON)
#define MODE_MIDIMASK	(MODE_MIDIIN | MODE_MIDIOUT)

/*
 * underrun/overrun policies, must be the same as SIO_XXX
 */
#define XRUN_IGNORE	0	/* on xrun silently insert/discard samples */
#define XRUN_SYNC	1	/* catchup to sync to the mix/sub */
#define XRUN_ERROR	2	/* xruns are errors, eof/hup buffer */

#endif /* !defined(CONF_H) */
@


1.23
log
@Simplify and improve the way options are parsed and remove ~300 lines
of code that becomes unused. Few command line arguments changes are
required though:

  - stream definitions (-ios) now must follow devices definitions they
    are attached to (-fMn)

  - the -n option is now a special "loopback" device and is thus used
    like -f, eg it must precede streams

  - in midicat, midi thru boxes are not created automatically anymore,
    the new "-M" option must be used for that

  - channel numbers (-Cc options) correspond always to channel numbers
    of the hardware.

  - the -u option isn't needed anymore

  - increase the log verbosity so user errors are logged
    without using -d

tested by many, help from jmc
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.h,v 1.22 2011/04/27 21:32:40 ratchov Exp $	*/
@


1.22
log
@include signal.h
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.h,v 1.21 2011/04/27 21:20:36 ratchov Exp $	*/
d55 2
d58 1
a58 1
#define MODE_AUDIOMASK	(MODE_REC | MODE_MON | MODE_PLAY)
@


1.21
log
@move amsg.h containing protocol defs from aucat side to libsndio side.

requested by deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.h,v 1.20 2011/04/27 17:58:43 deraadt Exp $	*/
d21 2
@


1.20
log
@use more volatile sig_atomic_t in signal handlers
ok ratchov
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.h,v 1.19 2011/04/18 23:59:15 ratchov Exp $	*/
a31 7

/*
 * socket and option names
 */
#define AUCAT_PATH		"aucat"
#define MIDICAT_PATH		"midicat"
#define DEFAULT_OPT		"default"
@


1.19
log
@reorder macros, no object change
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.h,v 1.18 2011/04/16 12:09:05 ratchov Exp $	*/
d30 1
a30 1
extern int debug_level;
@


1.18
log
@use "aucatN" for aucat(1) socket path and "midicatN" for midicat(1),
no need to increase entropy by inventing new names. Don't forget to
rebuild libsndio after this change
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.h,v 1.17 2011/04/16 11:51:48 ratchov Exp $	*/
d36 1
a37 1
#define AUCAT_PATH		"aucat"
@


1.17
log
@for unix domain socket addresses use AUCAT_PATH and MIDICAT_PATH
macros instead of hardcoded strings. No object change
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.h,v 1.16 2010/10/21 18:57:42 ratchov Exp $	*/
d36 2
a37 2
#define MIDICAT_PATH		"midithru"
#define AUCAT_PATH		"softaudio"
@


1.16
log
@use MODE_xxx and XRUN_xxx macros everywhere, and zap corresponding
AMSG_xxx macros, which in turns simplifies the code
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.h,v 1.15 2010/04/06 20:07:01 ratchov Exp $	*/
d36 2
a37 2
#define DEFAULT_MIDITHRU	"midithru"
#define DEFAULT_SOFTAUDIO	"softaudio"
@


1.15
log
@aucat (server):

  - make the ``-m mode'' option per subdevice, allowing
    subdevices to be play-only or rec-only even if the
    server is full-duplex

  - add ``monitoring'' mode (with ``-m mon''). This is a
    record-only stream from which played streams can be
    recorded (kind of ``record what you hear'').

  - allow MIDI devices to be subscribed to the controlling
    MIDI port of the server, ie what midicat does (with -f
    option), but using the -q option.

  - add flow control to the protocol, and serialize clock
    ticks (sio_onmove() calls) and data chunks.  This should
    fix certain full-duplex programs, broken with ``magic''
    block/buffer size combinations.

  - enable 3 block latency which is the minimum theoretical.
    Make -z and -b options correspond to device parameters.

  - make sio_getcap(3) the same for aucat and sun backends,
    ie return whatever is supported (``everything'' in the
    aucat case, since everything is actulally supported).

aucat (player):

  - enable ``-m mode'' option  to select between monitoring
    and recording when ``-o file'' is used.

  - plug MIDI code to non-server codepath. The MIDI control
    device is specified with the ``-q device'' option, as in
    server mode.

  - impliment lseek()'ing within files (controlled
    through MIDI). Necessary to use aucat with a MIDI
    sequencer.

midicat (thrubox):

  - rename ``-f'' flag to ``-q'', so it has the
    same name as in aucat (-f is still working)

ok jakemsr@@, tweaks from jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.h,v 1.14 2010/04/03 17:59:17 ratchov Exp $	*/
d49 21
@


1.14
log
@backout last change, committed by mistake, sorry...
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.h,v 1.12 2010/01/10 21:47:41 ratchov Exp $	*/
a31 13

/*
 * Number of blocks in the device play/record buffers.  Because Sun API
 * cannot notify apps of the current positions, we have to use all N
 * buffers devices blocks plus one extra block, to make write() block,
 * so that poll() can return the exact postition.
 */
#define DEV_NBLK 2

/*
 * Number of blocks in the wav-file i/o buffers.
 */
#define WAV_NBLK 6
@


1.13
log
@doc fixes from jmc
@
text
@d34 13
@


1.12
log
@Add traces to help tracking subtle timing bugs often causing
underuns and overruns; such bugs are hard to debug with ktrace
or a debugger. They are also handy to debug or monitor code
using aucat.

To enable traces, compile aucat with ``make DEBUG=-DDEBUG'' and
use the -d option multiple times.

ok jakemsr
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.h,v 1.11 2009/11/03 21:31:37 ratchov Exp $	*/
a31 13

/*
 * Number of blocks in the device play/record buffers.  Because Sun API
 * cannot notify apps of the current positions, we have to use all N
 * buffers devices blocks plus one extra block, to make write() block,
 * so that poll() can return the exact postition.
 */
#define DEV_NBLK 2

/*
 * Number of blocks in the wav-file i/o buffers.
 */
#define WAV_NBLK 6
@


1.11
log
@Allow any program using aucat to act as MMC slave and MTC master
transparently.  Multiple audio applications can be started
synchronously from external software/hardware supporting the
standard Start/Stop/Relocate messages. The server clock is exposed
through MTC, allowing non-audio software/hardware to be
synchronized to audio applications.
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.h,v 1.10 2009/09/27 11:51:20 ratchov Exp $	*/
d20 12
@


1.10
log
@remove all debug traces
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.h,v 1.9 2009/08/17 16:17:46 ratchov Exp $	*/
d45 5
@


1.9
log
@allow midicat to take multiple -i and -o options
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.h,v 1.8 2009/07/25 10:52:18 ratchov Exp $	*/
a19 24
/*
 * Debug trace levels:
 *
 * 0 - traces are off
 * 1 - init, free, stuff that's done only once
 * 2 - rare real-time events: eof / hup, etc...
 * 3 - poll(), block / unblock state changes
 * 4 - read()/write()
 */
#ifdef DEBUG

/* defined in main.c */
extern int debug_level;

#define DPRINTF(...) DPRINTFN(1, __VA_ARGS__)
#define DPRINTFN(n, ...)					\
	do {							\
		if (debug_level >= (n))				\
			fprintf(stderr, __VA_ARGS__);		\
	} while(0)
#else
#define DPRINTF(...) do {} while(0)
#define DPRINTFN(n, ...) do {} while(0)
#endif
d44 1
a44 1
#define MIDI_BUFSZ		3125	/* 1 second */
@


1.8
log
@fix comments, remove no longer needed declaration, reorder includes
from Thomas Pfaff
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.h,v 1.7 2009/07/25 08:44:27 ratchov Exp $	*/
a31 1
void debug_printf(int, char *, char *, ...);
d58 3
d64 5
@


1.7
log
@Currently midi capable programs can control midi hardware, but
cannot cooperate with other programs.  The aim of this change is
to allow any program to send midi data to other programs as they
were midi hardware. For instance, this change should solve the
longstanding problem of using a midi sequencer with software
synthesizers. More precisely:

 - new midicat(1) utility (actually hardlink to aucat(1)).
   it creates software midi thru boxes, allowing programs
   to send midi messages to other programs as they were
   midi(4) hardware.

 - new midi api in libsndio (see mio_open(3)), to access
   midi(4) devices and midicat(1) sockets in a uniform way.

 - new device naming scheme <service>:<unit>[.<option>],
   common to audio and midi.

 - new sndio(7) manual describing concepts and naming

The current audio device naming still works, but people having
scripts or configuration files containing device names could read
the sndio(7) man page and slowly start updating device names.

discussed with jakemsr@@ and deraadt@@, help form jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.h,v 1.6 2009/02/03 19:44:58 ratchov Exp $	*/
d21 1
a21 1
 * debug trace levels:
d47 1
a47 1
 * number of blocks in the device play/record buffers.  because Sun API
d55 1
a55 1
 * number of blocks in the wav-file i/o buffers
@


1.6
log
@in server mode, create /tmp/aucat-userid/ directory with
permissions 0700, and create sockets in it. This prevents
one local user to eavesdrop or disturb audio programs of
other users.

if you're using the ``-s socket'' option with an absolute
path as argument, please update it to use a socket name.

requested by many, bits from jakemsr and otto
ok jakemsr
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.h,v 1.5 2008/11/10 23:25:37 ratchov Exp $	*/
d59 3
a61 2
#define DEFAULT_DEVICE	"/dev/audio"
#define DEFAULT_SOCKET	"default"
@


1.5
log
@add a per-stream ``soft volume'' knob and the corresponding -v option.
The code will be useful later for the volume knob in the sndio API.
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.h,v 1.4 2008/10/26 08:49:43 ratchov Exp $	*/
d59 2
a60 2
#define DEFAULT_DEVICE	"/dev/audio"	/* defaul device */
#define DEFAULT_SOCKET	"/tmp/aucat.sock"
@


1.4
log
@add minimal server capability to aucat(1). When started in server
mode, it listens on an unix socket and mixes/demultiplexes any number
of full-duplex streams, doing necessary format conversions and
resampling on the fly.

programs can use the new libsa(3) library to play and record audio.
The library provides a very simple API to connect to the audio server;
if aucat(1) isn't running, it uses the audio(4) driver transparently
instead.
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.h,v 1.3 2008/08/14 09:39:16 ratchov Exp $	*/
a44 4


#define MIDI_MAXCTL		127
#define MIDI_TO_ADATA(m)	((ADATA_UNIT * (m) + 64) / 127)
@


1.3
log
@factor code that discards data from abuf strucure into a single
abuf_rdiscard() routine. Similarly add abuf_wcommit() routine for
writing. The purpose is to stop manupulating FIFO pointers in
various places outiside abuf.c, its too error prone.
No behaviour change.

ok jakemsr
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.h,v 1.2 2008/05/28 07:36:23 ratchov Exp $	*/
d50 13
a62 2
#define DEFAULT_NFR	0x400		/* buf size in frames */
#define DEFAULT_NBLK	0x2		/* blocks per buffer */
d64 1
@


1.2
log
@if aucat is resumed (after suspend), kernel buffers are empty, thus write()
syscall succedes and consumes aucat buffers until kernel buffers are full.
If aucat buffers are smaller than kernel ones, they will underrun, and aucat
will terminate, since underruns are not handled yet.

This changes is an improvement until SIGCONT handler is implemented. The
correct approach is to add a handler for SIGCONT to: call dev_stop(), reset
all buffers, bring play and record in sync, fill play buffers and call
dev_start().

ok jakemsr
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.h,v 1.1 2008/05/23 07:15:46 ratchov Exp $	*/
d17 2
a18 2
#ifndef ACONF_H
#define ACONF_H
@


1.1
log
@add support for:
 - recording, full-duplex operation
 - format conversions and resampling on the fly
 - mixing on the fly of multiple inputs of different formats
 - up to 16 channels, simplistic "routing" of channel ranges
 - more linear encodings (in raw and wav files)
the old behaviour is fully preserved if none of the new -i and -o
options are used.

code and fixes from jakemsr@@ and eric@@, suggestions by others.
ok "go ahead" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d51 1
a51 1
#define DEFAULT_NBLK	0x8		/* blocks per buffer */
@

