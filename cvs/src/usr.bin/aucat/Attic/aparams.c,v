head	1.16;
access;
symbols
	OPENBSD_5_6:1.14.0.12
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.10
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.6
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.4
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.2
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.4
	OPENBSD_5_0:1.13.0.2
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.12.0.2
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.10.0.4
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.6.0.6
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.1.0.2
	OPENBSD_4_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.16
date	2015.01.21.08.43.55;	author ratchov;	state dead;
branches;
next	1.15;
commitid	SYQcoS9jhSKqSJDL;

1.15
date	2015.01.16.06.40.05;	author deraadt;	state Exp;
branches;
next	1.14;
commitid	Uu5nFG3wCl0LACBb;

1.14
date	2012.04.11.06.05.43;	author ratchov;	state Exp;
branches;
next	1.13;

1.13
date	2011.04.28.07.20.03;	author ratchov;	state Exp;
branches;
next	1.12;

1.12
date	2010.11.05.15.23.18;	author ratchov;	state Exp;
branches;
next	1.11;

1.11
date	2010.11.04.17.55.28;	author ratchov;	state Exp;
branches;
next	1.10;

1.10
date	2010.01.10.21.47.41;	author ratchov;	state Exp;
branches;
next	1.9;

1.9
date	2009.09.27.11.51.20;	author ratchov;	state Exp;
branches;
next	1.8;

1.8
date	2009.08.17.15.07.49;	author ratchov;	state Exp;
branches;
next	1.7;

1.7
date	2009.07.25.10.52.18;	author ratchov;	state Exp;
branches;
next	1.6;

1.6
date	2009.01.23.17.38.15;	author ratchov;	state Exp;
branches;
next	1.5;

1.5
date	2008.11.20.10.10.01;	author ratchov;	state Exp;
branches;
next	1.4;

1.4
date	2008.11.10.23.25.37;	author ratchov;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.03.22.25.13;	author ratchov;	state Exp;
branches;
next	1.2;

1.2
date	2008.10.26.08.49.43;	author ratchov;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.23.07.15.46;	author ratchov;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Simplify internals and rewrite file header parsing code:
- remove -M, -t, -w, -C, -x flags that don't make sense anymore
- make "-j off" the default (sndiod already does the job)
- don't limit the number of played/recorded files.
- add support for floating-point encoded files.
- add support for apple .aiff and sun/next .au files
@
text
@/*	$OpenBSD: aparams.c,v 1.15 2015/01/16 06:40:05 deraadt Exp $	*/
/*
 * Copyright (c) 2008 Alexandre Ratchov <alex@@caoua.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <endian.h>

#include "aparams.h"
#ifdef DEBUG
#include "dbg.h"
#endif

int aparams_ctltovol[128] = {
	    0,
	  256,	  266,	  276,	  287,	  299,	  310,	  323,	  335,
	  348,	  362,	  376,	  391,	  406,	  422,	  439,	  456,
	  474,	  493,	  512,	  532,	  553,	  575,	  597,	  621,
	  645,	  670,	  697,	  724,	  753,	  782,	  813,	  845,
	  878,	  912,	  948,	  985,	 1024,	 1064,	 1106,	 1149,
	 1195,	 1241,	 1290,	 1341,	 1393,	 1448,	 1505,	 1564,
	 1625,	 1689,	 1756,	 1825,	 1896,	 1971,	 2048,	 2128,
	 2212,	 2299,	 2389,	 2483,	 2580,	 2682,	 2787,	 2896,
	 3010,	 3128,	 3251,	 3379,	 3511,	 3649,	 3792,	 3941,
	 4096,	 4257,	 4424,	 4598,	 4778,	 4966,	 5161,	 5363,
	 5574,	 5793,	 6020,	 6256,	 6502,	 6757,	 7023,	 7298,
	 7585,	 7883,	 8192,	 8514,	 8848,	 9195,	 9556,	 9931,
	10321,	10726,	11148,	11585,	12040,	12513,	13004,	13515,
	14045,	14596,	15170,	15765,	16384,	17027,	17696,	18390,
	19112,	19863,	20643,	21453,	22295,	23170,	24080,	25025,
	26008,	27029,	28090,	29193,	30339,	31530,	32768
};

/*
 * Fake parameters for byte-streams
 */
struct aparams aparams_none = { 1, 0, 0, 0, 0, 0, 0, 0 };

#ifdef DEBUG
/*
 * Generate a string corresponding to the encoding in par,
 * return the length of the resulting string.
 */
int
aparams_enctostr(struct aparams *par, char *ostr)
{
	char *p = ostr;

	*p++ = par->sig ? 's' : 'u';
	if (par->bits > 9)
		*p++ = '0' + par->bits / 10;
	*p++ = '0' + par->bits % 10;
	if (par->bps > 1) {
		*p++ = par->le ? 'l' : 'b';
		*p++ = 'e';
		if (par->bps != APARAMS_BPS(par->bits) ||
		    par->bits < par->bps * 8) {
			*p++ = par->bps + '0';
			if (par->bits < par->bps * 8) {
				*p++ = par->msb ? 'm' : 'l';
				*p++ = 's';
				*p++ = 'b';
			}
		}
	}
	*p++ = '\0';
	return p - ostr - 1;
}
#endif /* DEBUG */

/*
 * Parse an encoding string, examples: s8, u8, s16, s16le, s24be ...
 * set *istr to the char following the encoding. Return the number
 * of bytes consumed.
 */
int
aparams_strtoenc(struct aparams *par, char *istr)
{
	char *p = istr;
	int i, sig, bits, le, bps, msb;

#define IS_SEP(c)			\
	(((c) < 'a' || (c) > 'z') &&	\
	 ((c) < 'A' || (c) > 'Z') &&	\
	 ((c) < '0' || (c) > '9'))

	/*
	 * get signedness
	 */
	if (*p == 's') {
		sig = 1;
	} else if (*p == 'u') {
		sig = 0;
	} else
		return 0;
	p++;

	/*
	 * get number of bits per sample
	 */
	bits = 0;
	for (i = 0; i < 2; i++) {
		if (*p < '0' || *p > '9')
			break;
		bits = (bits * 10) + *p - '0';
		p++;
	}
	if (bits < BITS_MIN || bits > BITS_MAX)
		return 0;
	bps = APARAMS_BPS(bits);
	msb = 1;
	le = ADATA_LE;

	/*
	 * get (optional) endianness
	 */
	if (p[0] == 'l' && p[1] == 'e') {
		le = 1;
		p += 2;
	} else if (p[0] == 'b' && p[1] == 'e') {
		le = 0;
		p += 2;
	} else if (IS_SEP(*p)) {
		goto done;
	} else
		return 0;

	/*
	 * get (optional) number of bytes
	 */
	if (*p >= '0' && *p <= '9') {
		bps = *p - '0';
		if (bps < (bits + 7) / 8 ||
		    bps > (BITS_MAX + 7) / 8)
			return 0;
		p++;

		/*
		 * get (optional) alignement
		 */
		if (p[0] == 'm' && p[1] == 's' && p[2] == 'b') {
			msb = 1;
			p += 3;
		} else if (p[0] == 'l' && p[1] == 's' && p[2] == 'b') {
			msb = 0;
			p += 3;
		} else if (IS_SEP(*p)) {
			goto done;
		} else
			return 0;
	} else if (!IS_SEP(*p))
		return 0;

done:
       	par->msb = msb;
	par->sig = sig;
	par->bits = bits;
	par->bps = bps;
	par->le = le;
	return p - istr;
}

/*
 * Initialise parameters structure with the defaults natively supported
 * by the machine.
 */
void
aparams_init(struct aparams *par, unsigned int cmin, unsigned int cmax,
    unsigned int rate)
{
	par->bps = sizeof(adata_t);
	par->bits = ADATA_BITS;
	par->le = ADATA_LE;
	par->sig = 1;
	par->msb = 0;
	par->cmin = cmin;
	par->cmax = cmax;
	par->rate = rate;
}

#ifdef DEBUG
/*
 * Print the format/channels/encoding on stderr.
 */
void
aparams_dbg(struct aparams *par)
{
	char enc[ENCMAX];

	aparams_enctostr(par, enc);
	dbg_puts(enc);
	dbg_puts(",");
	dbg_putu(par->cmin);
	dbg_puts(":");
	dbg_putu(par->cmax);
	dbg_puts(",");
	dbg_putu(par->rate);
}
#endif

/*
 * Return true if both encodings are the same.
 */
int
aparams_eqenc(struct aparams *par1, struct aparams *par2)
{
	if (par1->bps != par2->bps ||
	    par1->bits != par2->bits ||
	    par1->sig != par2->sig)
		return 0;
	if ((par1->bits != 8 * par1->bps) && par1->msb != par2->msb)
		return 0;
	if (par1->bps > 1 && par1->le != par2->le)
		return 0;
	return 1;
}

/*
 * Grow channels range and sample rate of ``set'' in order ``subset'' to
 * become an actual subset of it.
 */
void
aparams_grow(struct aparams *set, struct aparams *subset)
{
	if (set->cmin > subset->cmin)
		set->cmin = subset->cmin;
	if (set->cmax < subset->cmax)
		set->cmax = subset->cmax;
	if (set->rate < subset->rate)
		set->rate = subset->rate;
}

/*
 * Return true if rates are the same.
 */
int
aparams_eqrate(struct aparams *p1, struct aparams *p2)
{
	/* XXX: allow 1/9 halftone of difference */
	return p1->rate == p2->rate;
}


/*
 * Return the number of bytes per frame with the given parameters.
 */
unsigned int
aparams_bpf(struct aparams *par)
{
	return (par->cmax - par->cmin + 1) * par->bps;
}

void
aparams_copyenc(struct aparams *dst, struct aparams *src)
{
	dst->sig = src->sig;
	dst->le = src->le;
	dst->msb = src->msb;
	dst->bits = src->bits;
	dst->bps = src->bps;
}
@


1.15
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: aparams.c,v 1.14 2012/04/11 06:05:43 ratchov Exp $	*/
@


1.14
log
@Use "unsigned int" rather than "unsigned". No object change.
suggested by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: aparams.c,v 1.13 2011/04/28 07:20:03 ratchov Exp $	*/
d17 2
@


1.13
log
@remove deadcode, use err(1, "%s", str) instead of err(1, str)
from Michael W. Bombardieri <mb at ii.net>, thanks!
@
text
@d1 1
a1 1
/*	$OpenBSD: aparams.c,v 1.12 2010/11/05 15:23:18 ratchov Exp $	*/
d177 2
a178 1
aparams_init(struct aparams *par, unsigned cmin, unsigned cmax, unsigned rate)
d256 1
a256 1
unsigned
@


1.12
log
@Convert ulaw/alaw to native format (ie using ADATA_XXX defines) rather
than s16 (using hardcoded constants). Currently s16 is the native format,
so no behavior change.
@
text
@d1 1
a1 1
/*	$OpenBSD: aparams.c,v 1.11 2010/11/04 17:55:28 ratchov Exp $	*/
d48 1
d78 1
a223 23
}

/*
 * Return true if both parameters are the same.
 */
int
aparams_eq(struct aparams *par1, struct aparams *par2)
{
	if (!aparams_eqenc(par1, par2) ||
	    par1->cmin != par2->cmin ||
	    par1->cmax != par2->cmax ||
	    par1->rate != par2->rate)
		return 0;
	return 1;
}

/*
 * Return true if first channel range includes second range.
 */
int
aparams_subset(struct aparams *subset, struct aparams *set)
{
	return subset->cmin >= set->cmin && subset->cmax <= set->cmax;
@


1.11
log
@Replace ``short'' by a new ``adata_t'' typedef corresponding to
audio samples and cleanup ADATA_XXX macros. This allows easilly
switching to 24 bit fixed point arithmetic by simply redefining
the adata_t typedef to int and updating ADATA_XXX macros. No
object change.
@
text
@d1 1
a1 1
/*	$OpenBSD: aparams.c,v 1.10 2010/01/10 21:47:41 ratchov Exp $	*/
d119 1
a119 1
	le = NATIVE_LE;
d179 1
d181 1
a181 2
	par->le = NATIVE_LE;
	par->msb = ADATA_MSB;
@


1.10
log
@Add traces to help tracking subtle timing bugs often causing
underuns and overruns; such bugs are hard to debug with ktrace
or a debugger. They are also handy to debug or monitor code
using aucat.

To enable traces, compile aucat with ``make DEBUG=-DDEBUG'' and
use the -d option multiple times.

ok jakemsr
@
text
@d1 1
a1 1
/*	$OpenBSD: aparams.c,v 1.9 2009/09/27 11:51:20 ratchov Exp $	*/
d177 3
a179 3
	par->bps = 2;		/* 2 bytes per sample */
	par->bits = 16;		/* 16 significant bits per sample */
	par->sig = 1;		/* samples are signed */
d181 1
a181 1
	par->msb = 1;		/* msb justified */
@


1.9
log
@remove all debug traces
@
text
@d1 1
a1 1
/*	$OpenBSD: aparams.c,v 1.8 2009/08/17 15:07:49 ratchov Exp $	*/
d19 3
d187 19
@


1.8
log
@if one or more MIDI devices are specified in server mode, subscribe
them to the MIDI thru box
@
text
@d1 1
a1 1
/*	$OpenBSD: aparams.c,v 1.7 2009/07/25 10:52:18 ratchov Exp $	*/
a17 4
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

a183 21
/*
 * Print the format/channels/encoding on stderr.
 */
void
aparams_print(struct aparams *par)
{
	char enc[ENCMAX];

	aparams_enctostr(par, enc);
	fprintf(stderr, "%s", enc);
	fprintf(stderr, ",%u:%u", par->cmin, par->cmax);
	fprintf(stderr, ",%uHz", par->rate);
}

void
aparams_print2(struct aparams *par1, struct aparams *par2)
{
	aparams_print(par1);
	fprintf(stderr, " -> ");
	aparams_print(par2);
}
@


1.7
log
@fix comments, remove no longer needed declaration, reorder includes
from Thomas Pfaff
@
text
@d1 1
a1 1
/*	$OpenBSD: aparams.c,v 1.6 2009/01/23 17:38:15 ratchov Exp $	*/
d43 5
@


1.6
log
@spacing + typo fix from Matt Jibson <matt.jibson(at)gmail.com>
@
text
@d1 1
a1 1
/*	$OpenBSD: aparams.c,v 1.5 2008/11/20 10:10:01 ratchov Exp $	*/
d46 1
a46 1
 * return the length of the resulting string
d76 2
a77 2
 * set *istr to the char following the encoding. Retrun the number
 * of bytes consumed
d118 1
a118 1
	 * get (optionnal) endianness
d132 1
a132 1
	 * get (optionnal) number of bytes
d142 1
a142 1
		 * get (optionnal) alignement
d237 1
a237 1
 * Retrurn true if first channel range includes second range
d246 1
a246 1
 * grow channels range and sample rate of ``set'' in order ``subset'' to
d261 1
a261 1
 * Return true if rates are the same
@


1.5
log
@take into account socket parameters into calculation of device
parameters; without this change aucat uses the device default
parameters and they are not necessarily usable for multi-stream
mode.
@
text
@d1 1
a1 1
/*	$OpenBSD: aparams.c,v 1.4 2008/11/10 23:25:37 ratchov Exp $	*/
d84 1
a84 1
	
d100 1
a100 1
	
d188 1
a188 1
{	
@


1.4
log
@add a per-stream ``soft volume'' knob and the corresponding -v option.
The code will be useful later for the volume knob in the sndio API.
@
text
@d1 1
a1 1
/*	$OpenBSD: aparams.c,v 1.3 2008/11/03 22:25:13 ratchov Exp $	*/
d246 15
a288 1

@


1.3
log
@A small optimization: handle most N-channel <-> M-channel conversions
inside the mixer and the demultiplexer. This way, aucat will not
trigger the heavy conversion code when only channel conversions are
required. Cuts ~50% of the CPU usage on envy(4) devices, can improve
surround 4.0, 5.1 and 7.1 capable devices. No functionnal change.
@
text
@d1 1
a1 1
/*	$OpenBSD: aparams.c,v 1.2 2008/10/26 08:49:43 ratchov Exp $	*/
d23 20
@


1.2
log
@add minimal server capability to aucat(1). When started in server
mode, it listens on an unix socket and mixes/demultiplexes any number
of full-duplex streams, doing necessary format conversions and
resampling on the fly.

programs can use the new libsa(3) library to play and record audio.
The library provides a very simple API to connect to the audio server;
if aucat(1) isn't running, it uses the audio(4) driver transparently
instead.
@
text
@d1 1
a1 1
/*	$OpenBSD: aparams.c,v 1.1 2008/05/23 07:15:46 ratchov Exp $	*/
d186 1
a186 1
 * Return true if both parameters are the same.
d189 1
a189 1
aparams_eq(struct aparams *par1, struct aparams *par2)
d193 1
a193 4
	    par1->sig != par2->sig ||
	    par1->cmin != par2->cmin ||
	    par1->cmax != par2->cmax ||
	    par1->rate != par2->rate)
d201 34
@


1.1
log
@add support for:
 - recording, full-duplex operation
 - format conversions and resampling on the fly
 - mixing on the fly of multiple inputs of different formats
 - up to 16 channels, simplistic "routing" of channel ranges
 - more linear encodings (in raw and wav files)
the old behaviour is fully preserved if none of the new -i and -o
options are used.

code and fixes from jakemsr@@ and eric@@, suggestions by others.
ok "go ahead" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d25 122
d169 4
a172 8
	fprintf(stderr, "%c", par->sig ? 's' : 'u');
	fprintf(stderr, "%u", par->bits);
	if (par->bps > 1)
		fprintf(stderr, "%s", par->le ? "le" : "be");
	if ((par->bits & (par->bits - 1)) != 0 || par->bits != 8 * par->bps) {
		fprintf(stderr, "/%u", par->bps);
		fprintf(stderr, "%s", par->msb ? "msb" : "lsb");
	}
d213 11
@

