head	1.14;
access;
symbols
	OPENBSD_5_6:1.13.0.12
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.10
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.6
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.4
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.2
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.2
	OPENBSD_5_0:1.9.0.6
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.4
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.2
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5;
locks; strict;
comment	@ * @;


1.14
date	2015.01.21.08.43.55;	author ratchov;	state dead;
branches;
next	1.13;
commitid	SYQcoS9jhSKqSJDL;

1.13
date	2012.04.11.06.05.43;	author ratchov;	state Exp;
branches;
next	1.12;

1.12
date	2012.03.23.11.59.54;	author ratchov;	state Exp;
branches;
next	1.11;

1.11
date	2011.12.02.10.34.50;	author ratchov;	state Exp;
branches;
next	1.10;

1.10
date	2011.11.20.22.54.51;	author ratchov;	state Exp;
branches;
next	1.9;

1.9
date	2010.06.04.06.15.28;	author ratchov;	state Exp;
branches;
next	1.8;

1.8
date	2010.04.06.20.07.01;	author ratchov;	state Exp;
branches;
next	1.7;

1.7
date	2010.04.03.17.59.17;	author ratchov;	state Exp;
branches;
next	1.6;

1.6
date	2010.04.03.17.40.33;	author ratchov;	state Exp;
branches;
next	1.5;

1.5
date	2009.11.03.21.31.37;	author ratchov;	state Exp;
branches;
next	1.4;

1.4
date	2009.10.27.22.41.03;	author ratchov;	state Exp;
branches;
next	1.3;

1.3
date	2009.08.26.06.10.15;	author ratchov;	state Exp;
branches;
next	1.2;

1.2
date	2009.08.21.16.48.03;	author ratchov;	state Exp;
branches;
next	1.1;

1.1
date	2009.07.25.08.44.27;	author ratchov;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Simplify internals and rewrite file header parsing code:
- remove -M, -t, -w, -C, -x flags that don't make sense anymore
- make "-j off" the default (sndiod already does the job)
- don't limit the number of played/recorded files.
- add support for floating-point encoded files.
- add support for apple .aiff and sun/next .au files
@
text
@/*	$OpenBSD: midi.h,v 1.13 2012/04/11 06:05:43 ratchov Exp $	*/
/*
 * Copyright (c) 2008 Alexandre Ratchov <alex@@caoua.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
#ifndef MIDI_H
#define MIDI_H

struct dev;

struct aproc *midi_new(char *, struct dev *);

void midi_ontick(struct aproc *, int);
void midi_send_slot(struct aproc *, int);
void midi_send_vol(struct aproc *, int, unsigned int);
void midi_send_master(struct aproc *);
void midi_send_full(struct aproc *, unsigned int, unsigned int,
    unsigned int, unsigned int);
void midi_send_qfr(struct aproc *, unsigned int, int);
void midi_flush(struct aproc *);

#endif /* !defined(MIDI_H) */
@


1.13
log
@Use "unsigned int" rather than "unsigned". No object change.
suggested by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: midi.h,v 1.12 2012/03/23 11:59:54 ratchov Exp $	*/
@


1.12
log
@add a MIDI-controlled master volume knob to adjust the mix of
all playback stream, discussed with armani@@
@
text
@d1 1
a1 1
/*	$OpenBSD: midi.h,v 1.11 2011/12/02 10:34:50 ratchov Exp $	*/
d26 1
a26 1
void midi_send_vol(struct aproc *, int, unsigned);
d28 3
a30 2
void midi_send_full(struct aproc *, unsigned, unsigned, unsigned, unsigned);
void midi_send_qfr(struct aproc *, unsigned, int);
@


1.11
log
@reuse midi-control code to implement midi thru boxes and remove
the old midithru implementation; less code, less bugs. As a side
effect, midi output doesn't implement running status "compression"
any more.
@
text
@d1 1
a1 1
/*	$OpenBSD: midi.h,v 1.10 2011/11/20 22:54:51 ratchov Exp $	*/
d27 1
@


1.10
log
@Move mmc/mtc and volume control bits from struct aproc to struct
dev. Allows volume settings to be saved while the device is kept
closed. Besides that, no behabiour changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: midi.h,v 1.9 2010/06/04 06:15:28 ratchov Exp $	*/
d22 1
a22 2
struct aproc *thru_new(char *);
struct aproc *ctl_new(char *, struct dev *);
d24 6
a29 5
void ctl_ontick(struct aproc *, int);
void ctl_slot(struct aproc *, int);
void ctl_vol(struct aproc *, int, unsigned);
void ctl_full(struct aproc *, unsigned, unsigned, unsigned, unsigned);
void ctl_qfr(struct aproc *, unsigned, int);
@


1.9
log
@Allow the audio device to be opened only while it's actually used.
This is necessary for uaudio devices, for instance to start aucat
before the device is plugged. Or to unplug a device whithout
having to restart aucat when another device is plugged.  This is
controlled with the new -a option.

Allow multiple audio devices to be used concurently, i.e.
multiple ``-f devname'' options to be used; -f options must follow
per-device options, which is what we do for other options.
@
text
@d1 1
a1 1
/*	$OpenBSD: midi.h,v 1.8 2010/04/06 20:07:01 ratchov Exp $	*/
a24 5
int ctl_slotnew(struct aproc *, char *, struct ctl_ops *, void *, int);
void ctl_slotdel(struct aproc *, int);
void ctl_slotvol(struct aproc *, int, unsigned);
int  ctl_slotstart(struct aproc *, int);
void ctl_slotstop(struct aproc *, int);
d26 4
a29 4

void ctl_stop(struct aproc *);
void ctl_start(struct aproc *);
int ctl_idle(struct aproc *);
@


1.8
log
@aucat (server):

  - make the ``-m mode'' option per subdevice, allowing
    subdevices to be play-only or rec-only even if the
    server is full-duplex

  - add ``monitoring'' mode (with ``-m mon''). This is a
    record-only stream from which played streams can be
    recorded (kind of ``record what you hear'').

  - allow MIDI devices to be subscribed to the controlling
    MIDI port of the server, ie what midicat does (with -f
    option), but using the -q option.

  - add flow control to the protocol, and serialize clock
    ticks (sio_onmove() calls) and data chunks.  This should
    fix certain full-duplex programs, broken with ``magic''
    block/buffer size combinations.

  - enable 3 block latency which is the minimum theoretical.
    Make -z and -b options correspond to device parameters.

  - make sio_getcap(3) the same for aucat and sun backends,
    ie return whatever is supported (``everything'' in the
    aucat case, since everything is actulally supported).

aucat (player):

  - enable ``-m mode'' option  to select between monitoring
    and recording when ``-o file'' is used.

  - plug MIDI code to non-server codepath. The MIDI control
    device is specified with the ``-q device'' option, as in
    server mode.

  - impliment lseek()'ing within files (controlled
    through MIDI). Necessary to use aucat with a MIDI
    sequencer.

midicat (thrubox):

  - rename ``-f'' flag to ``-q'', so it has the
    same name as in aucat (-f is still working)

ok jakemsr@@, tweaks from jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: midi.h,v 1.7 2010/04/03 17:59:17 ratchov Exp $	*/
d20 2
d23 1
a23 1
struct aproc *ctl_new(char *);
@


1.7
log
@backout last change, committed by mistake, sorry...
@
text
@d1 1
a1 1
/*	$OpenBSD: midi.h,v 1.5 2009/11/03 21:31:37 ratchov Exp $	*/
d29 4
@


1.6
log
@doc fixes from jmc
@
text
@a29 4
void ctl_stop(struct aproc *);
void ctl_start(struct aproc *);
int ctl_idle(struct aproc *);

@


1.5
log
@Allow any program using aucat to act as MMC slave and MTC master
transparently.  Multiple audio applications can be started
synchronously from external software/hardware supporting the
standard Start/Stop/Relocate messages. The server clock is exposed
through MTC, allowing non-audio software/hardware to be
synchronized to audio applications.
@
text
@d1 1
a1 1
/*	$OpenBSD: midi.h,v 1.4 2009/10/27 22:41:03 ratchov Exp $	*/
d29 4
@


1.4
log
@slightly cleanup the socket and control bits:
- reject bogus clients ignoring flow control during the start phase
- don't check if dev_midi is NULL, it can't be NULL anymore
- use ``struct ctl_ops'' instead of a simple call-backs
- don't try to flush play buffer if it's not attached yet
@
text
@d1 1
a1 1
/*	$OpenBSD: midi.h,v 1.3 2009/08/26 06:10:15 ratchov Exp $	*/
d23 1
a23 1
int ctl_slotnew(struct aproc *, char *, struct ctl_ops *, void *);
d26 3
@


1.3
log
@don't mess with audio internals from within the midi bits. Instead
use a call-back interface. This allows easily sending volume changes
feedback to audio applications.
@
text
@d1 1
a1 1
/*	$OpenBSD: midi.h,v 1.2 2009/08/21 16:48:03 ratchov Exp $	*/
d23 1
a23 1
int ctl_slotnew(struct aproc *, char *, void (*)(void *, unsigned), void *);
@


1.2
log
@make aucat(1) expose a MIDI device to control server behaviour in
realtime.  For now only the playback volume of individual streams can be
changed/monitored. To each stream is assigned a MIDI channel; the volume
is changed/monitored using the standard controller number 7.
@
text
@d1 1
a1 1
/*	$OpenBSD: midi.h,v 1.1 2009/07/25 08:44:27 ratchov Exp $	*/
d23 1
a23 1
int ctl_slotnew(struct aproc *, char *, struct aproc *);
@


1.1
log
@Currently midi capable programs can control midi hardware, but
cannot cooperate with other programs.  The aim of this change is
to allow any program to send midi data to other programs as they
were midi hardware. For instance, this change should solve the
longstanding problem of using a midi sequencer with software
synthesizers. More precisely:

 - new midicat(1) utility (actually hardlink to aucat(1)).
   it creates software midi thru boxes, allowing programs
   to send midi messages to other programs as they were
   midi(4) hardware.

 - new midi api in libsndio (see mio_open(3)), to access
   midi(4) devices and midicat(1) sockets in a uniform way.

 - new device naming scheme <service>:<unit>[.<option>],
   common to audio and midi.

 - new sndio(7) manual describing concepts and naming

The current audio device naming still works, but people having
scripts or configuration files containing device names could read
the sndio(7) man page and slowly start updating device names.

discussed with jakemsr@@ and deraadt@@, help form jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: aproc.h,v 1.16 2009/01/23 17:38:15 ratchov Exp $	*/
d21 1
d23 3
a25 1
extern struct aproc *thrubox;
@

