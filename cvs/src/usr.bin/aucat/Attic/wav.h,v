head	1.14;
access;
symbols
	OPENBSD_5_6:1.13.0.12
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.10
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.6
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.4
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.2
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.2
	OPENBSD_5_0:1.11.0.6
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.4
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.2
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.3.0.4
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.14
date	2015.01.21.08.43.55;	author ratchov;	state dead;
branches;
next	1.13;
commitid	SYQcoS9jhSKqSJDL;

1.13
date	2012.04.11.06.05.43;	author ratchov;	state Exp;
branches;
next	1.12;

1.12
date	2011.10.12.07.20.04;	author ratchov;	state Exp;
branches;
next	1.11;

1.11
date	2010.07.31.08.48.01;	author ratchov;	state Exp;
branches;
next	1.10;

1.10
date	2010.06.04.06.15.28;	author ratchov;	state Exp;
branches;
next	1.9;

1.9
date	2010.04.21.06.13.07;	author ratchov;	state Exp;
branches;
next	1.8;

1.8
date	2010.04.06.20.07.01;	author ratchov;	state Exp;
branches;
next	1.7;

1.7
date	2010.04.03.17.59.17;	author ratchov;	state Exp;
branches;
next	1.6;

1.6
date	2010.04.03.17.40.33;	author ratchov;	state Exp;
branches;
next	1.5;

1.5
date	2010.01.05.10.18.12;	author ratchov;	state Exp;
branches;
next	1.4;

1.4
date	2009.07.25.10.52.19;	author ratchov;	state Exp;
branches;
next	1.3;

1.3
date	2009.04.22.10.57.33;	author ratchov;	state Exp;
branches;
next	1.2;

1.2
date	2009.04.11.10.24.21;	author jakemsr;	state Exp;
branches;
next	1.1;

1.1
date	2008.10.26.08.49.44;	author ratchov;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Simplify internals and rewrite file header parsing code:
- remove -M, -t, -w, -C, -x flags that don't make sense anymore
- make "-j off" the default (sndiod already does the job)
- don't limit the number of played/recorded files.
- add support for floating-point encoded files.
- add support for apple .aiff and sun/next .au files
@
text
@/*	$OpenBSD: wav.h,v 1.13 2012/04/11 06:05:43 ratchov Exp $	*/
/*
 * Copyright (c) 2008 Alexandre Ratchov <alex@@caoua.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
#ifndef WAV_H
#define WAV_H

#include <sys/types.h>

#include "aparams.h"
#include "pipe.h"

struct wav {
	struct pipe pipe;
	struct wav *next;
#define HDR_AUTO	0	/* guess by looking at the file name */
#define HDR_RAW		1	/* no headers, ie openbsd native ;-) */
#define HDR_WAV		2	/* microsoft riff wave */
	unsigned int hdr;	/* HDR_RAW or HDR_WAV */
	unsigned int xrun;	/* xrun policy */
	struct aparams hpar;	/* parameters to write on the header */
	off_t rbytes;		/* bytes to read, -1 if no limit */
	off_t wbytes;		/* bytes to write, -1 if no limit */
	off_t startpos;		/* beginning of the data chunk */
	off_t endpos;		/* end of the data chunk */
	off_t mmcpos;		/* play/rec start point set by MMC */
	short *map;		/* mulaw/alaw -> s16 conversion table */
	int slot;		/* mixer ctl slot number */
	int mmc;		/* use MMC control */
	int join;		/* join/expand channels */
	unsigned int vol;	/* current volume */
	unsigned int maxweight;	/* dynamic range when vol == 127 */
#define WAV_CFG		0	/* parameters read from headers */
#define WAV_INIT	1	/* not trying to do anything */
#define WAV_START	2	/* buffer allocated */
#define WAV_READY	3	/* buffer filled enough */
#define WAV_RUN		4	/* buffer attached to device */
#define WAV_MIDI	5	/* midi "syx" file */
	unsigned int pstate;	/* one of above */
	unsigned int mode;	/* bitmap of MODE_* */
	struct dev *dev;	/* device playing or recording */
};

extern struct fileops wav_ops;
struct wav *wav_list;

struct wav *wav_new_in(struct fileops *, struct dev *,
    unsigned int, char *, unsigned int, struct aparams *,
    unsigned int, unsigned int, int, int);
struct wav *wav_new_out(struct fileops *, struct dev *,
    unsigned int, char *, unsigned int, struct aparams *,
    unsigned int, int, int);
unsigned int wav_read(struct file *, unsigned char *, unsigned int);
unsigned int wav_write(struct file *, unsigned char *, unsigned int);
void wav_close(struct file *);
int wav_readhdr(int, struct aparams *, off_t *, off_t *, short **);
int wav_writehdr(int, struct aparams *, off_t *, off_t);
void wav_conv(unsigned char *, unsigned int, short *);
int wav_init(struct wav *);

extern short wav_ulawmap[256];
extern short wav_alawmap[256];

#endif /* !defined(WAV_H) */
@


1.13
log
@Use "unsigned int" rather than "unsigned". No object change.
suggested by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: wav.h,v 1.12 2011/10/12 07:20:04 ratchov Exp $	*/
@


1.12
log
@Simplify and improve the way options are parsed and remove ~300 lines
of code that becomes unused. Few command line arguments changes are
required though:

  - stream definitions (-ios) now must follow devices definitions they
    are attached to (-fMn)

  - the -n option is now a special "loopback" device and is thus used
    like -f, eg it must precede streams

  - in midicat, midi thru boxes are not created automatically anymore,
    the new "-M" option must be used for that

  - channel numbers (-Cc options) correspond always to channel numbers
    of the hardware.

  - the -u option isn't needed anymore

  - increase the log verbosity so user errors are logged
    without using -d

tested by many, help from jmc
@
text
@d1 1
a1 1
/*	$OpenBSD: wav.h,v 1.11 2010/07/31 08:48:01 ratchov Exp $	*/
d31 2
a32 2
	unsigned hdr;		/* HDR_RAW or HDR_WAV */
	unsigned xrun;		/* xrun policy */
d43 2
a44 2
	unsigned vol;		/* current volume */
	unsigned maxweight;	/* dynamic range when vol == 127 */
d51 2
a52 2
	unsigned pstate;	/* one of above */
	unsigned mode;		/* bitmap of MODE_* */
d60 2
a61 1
    unsigned, char *, unsigned, struct aparams *, unsigned, unsigned, int, int);
d63 4
a66 3
    unsigned, char *, unsigned, struct aparams *, unsigned, int, int);
unsigned wav_read(struct file *, unsigned char *, unsigned);
unsigned wav_write(struct file *, unsigned char *, unsigned);
d70 1
a70 1
void wav_conv(unsigned char *, unsigned, short *);
@


1.11
log
@remove 2 years old compatibility mode
@
text
@d1 1
a1 1
/*	$OpenBSD: wav.h,v 1.10 2010/06/04 06:15:28 ratchov Exp $	*/
d27 1
d45 6
a50 5
#define WAV_INIT	0	/* not trying to do anything */
#define WAV_START	1	/* buffer allocated */
#define WAV_READY	2	/* buffer filled enough */
#define WAV_RUN		3	/* buffer attached to device */
#define WAV_FAILED	4	/* failed to seek */
d57 1
d69 1
@


1.10
log
@Allow the audio device to be opened only while it's actually used.
This is necessary for uaudio devices, for instance to start aucat
before the device is plugged. Or to unplug a device whithout
having to restart aucat when another device is plugged.  This is
controlled with the new -a option.

Allow multiple audio devices to be used concurently, i.e.
multiple ``-f devname'' options to be used; -f options must follow
per-device options, which is what we do for other options.
@
text
@d1 1
a1 1
/*	$OpenBSD: wav.h,v 1.9 2010/04/21 06:13:07 ratchov Exp $	*/
a65 3

/* legacy */
int legacy_play(char *, char *);
@


1.9
log
@adds the necessary bits to join channels (ex stereo->mono) or
expand channels (ex mono->stereo).  It's switched on/off with
the ``-j'' option, (default is "on").
@
text
@d1 1
a1 1
/*	$OpenBSD: wav.h,v 1.8 2010/04/06 20:07:01 ratchov Exp $	*/
d40 1
a40 1
	int tr;			/* use MMC control */
d51 1
d56 4
a59 4
struct wav *wav_new_in(struct fileops *, unsigned, char *, unsigned,
    struct aparams *, unsigned, unsigned, int, int);
struct wav *wav_new_out(struct fileops *, unsigned, char *, unsigned,
    struct aparams *, unsigned, int, int);
@


1.8
log
@aucat (server):

  - make the ``-m mode'' option per subdevice, allowing
    subdevices to be play-only or rec-only even if the
    server is full-duplex

  - add ``monitoring'' mode (with ``-m mon''). This is a
    record-only stream from which played streams can be
    recorded (kind of ``record what you hear'').

  - allow MIDI devices to be subscribed to the controlling
    MIDI port of the server, ie what midicat does (with -f
    option), but using the -q option.

  - add flow control to the protocol, and serialize clock
    ticks (sio_onmove() calls) and data chunks.  This should
    fix certain full-duplex programs, broken with ``magic''
    block/buffer size combinations.

  - enable 3 block latency which is the minimum theoretical.
    Make -z and -b options correspond to device parameters.

  - make sio_getcap(3) the same for aucat and sun backends,
    ie return whatever is supported (``everything'' in the
    aucat case, since everything is actulally supported).

aucat (player):

  - enable ``-m mode'' option  to select between monitoring
    and recording when ``-o file'' is used.

  - plug MIDI code to non-server codepath. The MIDI control
    device is specified with the ``-q device'' option, as in
    server mode.

  - impliment lseek()'ing within files (controlled
    through MIDI). Necessary to use aucat with a MIDI
    sequencer.

midicat (thrubox):

  - rename ``-f'' flag to ``-q'', so it has the
    same name as in aucat (-f is still working)

ok jakemsr@@, tweaks from jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: wav.h,v 1.7 2010/04/03 17:59:17 ratchov Exp $	*/
d41 1
d56 1
a56 1
    struct aparams *, unsigned, unsigned, int);
d58 1
a58 1
    struct aparams *, unsigned, int);
@


1.7
log
@backout last change, committed by mistake, sorry...
@
text
@d1 1
a1 1
/*	$OpenBSD: wav.h,v 1.5 2010/01/05 10:18:12 ratchov Exp $	*/
d31 1
d35 3
d39 11
d54 4
a57 4
struct wav *wav_new_in(struct fileops *, char *, unsigned,
    struct aparams *, unsigned, unsigned);
struct wav *wav_new_out(struct fileops *, char *, unsigned,
    struct aparams *, unsigned);
d61 2
a62 2
int wav_readhdr(int, struct aparams *, off_t *, short **);
int wav_writehdr(int, struct aparams *);
@


1.6
log
@doc fixes from jmc
@
text
@a30 1
	unsigned xrun;		/* xrun policy */
a33 3
	off_t startpos;		/* beginning of the data chunk */
	off_t endpos;		/* end of the data chunk */
	off_t mmcpos;		/* play/rec start point set by MMC */
a34 11
	int slot;		/* mixer ctl slot number */
	int tr;			/* use MMC control */
	unsigned vol;		/* current volume */
	unsigned maxweight;	/* dynamic range when vol == 127 */
#define WAV_INIT	0	/* not trying to do anything */
#define WAV_START	1	/* buffer allocated */
#define WAV_READY	2	/* buffer filled enough */
#define WAV_RUN		3	/* buffer attached to device */
#define WAV_FAILED	4	/* failed to seek */
	unsigned pstate;	/* one of above */
	unsigned mode;		/* bitmap of MODE_* */
d39 4
a42 4
struct wav *wav_new_in(struct fileops *, unsigned, char *, unsigned,
    struct aparams *, unsigned, unsigned, int);
struct wav *wav_new_out(struct fileops *, unsigned, char *, unsigned,
    struct aparams *, unsigned, int);
d46 2
a47 2
int wav_readhdr(int, struct aparams *, off_t *, off_t *, short **);
int wav_writehdr(int, struct aparams *, off_t *, off_t);
@


1.5
log
@Make the way .wav files are handled closer to the way sockets are
handled, which is conceptually simpler. No behaviour changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: wav.h,v 1.4 2009/07/25 10:52:19 ratchov Exp $	*/
d31 1
d35 3
d39 11
d54 4
a57 4
struct wav *wav_new_in(struct fileops *, char *, unsigned,
    struct aparams *, unsigned, unsigned);
struct wav *wav_new_out(struct fileops *, char *, unsigned,
    struct aparams *, unsigned);
d61 2
a62 2
int wav_readhdr(int, struct aparams *, off_t *, short **);
int wav_writehdr(int, struct aparams *);
@


1.4
log
@fix comments, remove no longer needed declaration, reorder includes
from Thomas Pfaff
@
text
@d1 1
a1 1
/*	$OpenBSD: wav.h,v 1.3 2009/04/22 10:57:33 ratchov Exp $	*/
d39 3
a41 3
struct wav *wav_new_in(struct fileops *, int, char *,
    struct aparams *, unsigned);
struct wav *wav_new_out(struct fileops *, int, char *,
@


1.3
log
@move support for ulaw/alaw encoding in .wav files from legacy mode
to normal mode.

ok jakemsr@@
@
text
@d1 1
a1 1
/*	$OpenBSD: wav.h,v 1.2 2009/04/11 10:24:21 jakemsr Exp $	*/
d22 1
a23 1
#include "aparams.h"
@


1.2
log
@- make legacy mode use sio_open(3) (sndio) API
- parse .au headers in legacy mode
- support playback of ulaw and alaw encoded .au and .wav files in
legacy mode

ok ratchov
@
text
@d1 1
a1 1
/*	$OpenBSD: wav.h,v 1.1 2008/10/26 08:49:44 ratchov Exp $	*/
d34 1
d46 1
a46 1
int wav_readhdr(int, struct aparams *, off_t *, int *);
d48 1
d52 3
@


1.1
log
@add minimal server capability to aucat(1). When started in server
mode, it listens on an unix socket and mixes/demultiplexes any number
of full-duplex streams, doing necessary format conversions and
resampling on the fly.

programs can use the new libsa(3) library to play and record audio.
The library provides a very simple API to connect to the audio server;
if aucat(1) isn't running, it uses the audio(4) driver transparently
instead.
@
text
@d1 1
a1 1
/*	$OpenBSD: file.h,v 1.3 2008/08/14 09:58:55 ratchov Exp $	*/
d45 1
a45 1
int wav_readhdr(int, struct aparams *, off_t *);
@

