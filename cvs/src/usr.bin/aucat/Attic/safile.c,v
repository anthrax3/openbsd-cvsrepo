head	1.23;
access;
symbols
	OPENBSD_4_6:1.12.0.6
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.2
	OPENBSD_4_5_BASE:1.12;
locks; strict;
comment	@ * @;


1.23
date	2010.01.13.10.02.52;	author ratchov;	state dead;
branches;
next	1.22;

1.22
date	2010.01.12.21.42.59;	author ratchov;	state Exp;
branches;
next	1.21;

1.21
date	2010.01.11.13.06.32;	author ratchov;	state Exp;
branches;
next	1.20;

1.20
date	2010.01.10.21.47.41;	author ratchov;	state Exp;
branches;
next	1.19;

1.19
date	2009.11.05.08.36.48;	author ratchov;	state Exp;
branches;
next	1.18;

1.18
date	2009.09.27.11.51.20;	author ratchov;	state Exp;
branches;
next	1.17;

1.17
date	2009.09.19.16.30.10;	author ratchov;	state Exp;
branches;
next	1.16;

1.16
date	2009.09.19.15.56.04;	author ratchov;	state Exp;
branches;
next	1.15;

1.15
date	2009.08.28.06.30.17;	author ratchov;	state Exp;
branches;
next	1.14;

1.14
date	2009.07.25.10.52.19;	author ratchov;	state Exp;
branches;
next	1.13;

1.13
date	2009.07.25.08.44.27;	author ratchov;	state Exp;
branches;
next	1.12;

1.12
date	2009.02.06.08.26.34;	author ratchov;	state Exp;
branches;
next	1.11;

1.11
date	2009.02.04.20.35.14;	author ratchov;	state Exp;
branches;
next	1.10;

1.10
date	2009.01.23.17.38.15;	author ratchov;	state Exp;
branches;
next	1.9;

1.9
date	2008.12.29.17.59.08;	author ratchov;	state Exp;
branches;
next	1.8;

1.8
date	2008.12.27.14.18.26;	author ratchov;	state Exp;
branches;
next	1.7;

1.7
date	2008.12.26.13.29.31;	author ratchov;	state Exp;
branches;
next	1.6;

1.6
date	2008.12.17.07.19.27;	author ratchov;	state Exp;
branches;
next	1.5;

1.5
date	2008.12.07.17.10.41;	author ratchov;	state Exp;
branches;
next	1.4;

1.4
date	2008.11.08.10.40.52;	author ratchov;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.07.21.01.15;	author ratchov;	state Exp;
branches;
next	1.2;

1.2
date	2008.10.27.00.26.33;	author ratchov;	state Exp;
branches;
next	1.1;

1.1
date	2008.10.26.08.49.44;	author ratchov;	state Exp;
branches;
next	;


desc
@@


1.23
log
@Rename s/safile/siofile/g, missed when libsa was renamed to
libsndio. Fixes crashes in full-duplex mode on vax and hp300.
@
text
@/*	$OpenBSD: safile.c,v 1.22 2010/01/12 21:42:59 ratchov Exp $	*/
/*
 * Copyright (c) 2008 Alexandre Ratchov <alex@@caoua.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/time.h>
#include <sys/types.h>

#include <poll.h>
#include <sndio.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "aparams.h"
#include "aproc.h"
#include "conf.h"
#include "dev.h"
#include "file.h"
#include "safile.h"
#ifdef DEBUG
#include "dbg.h"
#endif

struct safile {
	struct file file;
	struct sio_hdl *hdl;
	int started;
};

void safile_close(struct file *);
unsigned safile_read(struct file *, unsigned char *, unsigned);
unsigned safile_write(struct file *, unsigned char *, unsigned);
void safile_start(struct file *);
void safile_stop(struct file *);
int safile_nfds(struct file *);
int safile_pollfd(struct file *, struct pollfd *, int);
int safile_revents(struct file *, struct pollfd *);

struct fileops safile_ops = {
	"sio",
	sizeof(struct safile),
	safile_close,
	safile_read,
	safile_write,
	safile_start,
	safile_stop,
	safile_nfds,
	safile_pollfd,
	safile_revents
};

void
safile_cb(void *addr, int delta)
{
	struct safile *f = (struct safile *)addr;
	struct aproc *p;

#ifdef DEBUG
       if (delta < 0 || delta > (60 * RATE_MAX)) {
		dbg_puts(f->file.name);
		dbg_puts(": ");
		dbg_puti(delta);
		dbg_puts(": bogus sndio delta");
		dbg_panic();
       }
#endif
	if (delta != 0) {
		p = f->file.wproc;
		if (p && p->ops->opos)
			p->ops->opos(p, NULL, delta);
	}
	if (delta != 0) {
		p = f->file.rproc;
		if (p && p->ops->ipos)
			p->ops->ipos(p, NULL, delta);
	}
}

/*
 * Open the device.
 */
struct safile *
safile_new(struct fileops *ops, char *path,
    struct aparams *ipar, struct aparams *opar,
    unsigned *bufsz, unsigned *round)
{
	struct sio_par par;
	struct sio_hdl *hdl;
	struct safile *f;
	int mode;

	mode = 0;
	if (ipar)
		mode |= SIO_REC;
	if (opar)
		mode |= SIO_PLAY;
	hdl = sio_open(path, mode, 1);
	if (hdl == NULL)
		return NULL;
	sio_initpar(&par);
	if (ipar) {
		par.bits = ipar->bits;
		par.bps = ipar->bps;
		par.sig = ipar->sig;
		par.le = ipar->le;
		par.msb = ipar->msb;
		par.rate = ipar->rate;
		par.rchan = ipar->cmax - ipar->cmin + 1;
	} else {
		par.bits = opar->bits;
		par.bps = opar->bps;
		par.sig = opar->sig;
		par.le = opar->le;
		par.msb = opar->msb;
		par.rate = opar->rate;
	}
	if (opar)
		par.pchan = opar->cmax - opar->cmin + 1;
	par.appbufsz = *bufsz;
	par.round = *round;
	if (!sio_setpar(hdl, &par))
		goto bad_close;
	if (!sio_getpar(hdl, &par))
		goto bad_close;
	if (ipar) {
		ipar->bits = par.bits;
		ipar->bps = par.bps;
		ipar->sig = par.sig;
		ipar->le = par.le;
		ipar->msb = par.msb;
		ipar->rate = par.rate;
		ipar->cmax = ipar->cmin + par.rchan - 1;
	}
	if (opar) {
		opar->bits = par.bits;
		opar->bps = par.bps;
		opar->sig = par.sig;
		opar->le = par.le;
		opar->msb = par.msb;
		opar->rate = par.rate;
		opar->cmax = opar->cmin + par.pchan - 1;
	}
	*bufsz = par.bufsz;
	*round = par.round;
	if (path == NULL)
		path = "default";
	f = (struct safile *)file_new(ops, path, sio_nfds(hdl));
	if (f == NULL)
		goto bad_close;
	f->hdl = hdl;
	f->started = 0;
	sio_onmove(f->hdl, safile_cb, f);
	return f;
 bad_close:
	sio_close(hdl);
	return NULL;
}

void
safile_start(struct file *file)
{
	struct safile *f = (struct safile *)file;

	if (!sio_start(f->hdl)) {
#ifdef DEBUG
		dbg_puts(f->file.name);
		dbg_puts(": failed to start device\n");
#endif
		file_close(file);
		return;
	}
	f->started = 1;
#ifdef DEBUG
	if (debug_level >= 3) {
		file_dbg(&f->file);
		dbg_puts(": started\n");
	}
#endif
}

void
safile_stop(struct file *file)
{
	struct safile *f = (struct safile *)file;

	f->started = 0;
	if (!sio_eof(f->hdl) && !sio_stop(f->hdl)) {
#ifdef DEBUG
		dbg_puts(f->file.name);
		dbg_puts(": failed to stop device\n");
#endif
		file_close(file);
		return;
	}
#ifdef DEBUG
	if (debug_level >= 3) {
		file_dbg(&f->file);
		dbg_puts(": stopped\n");
	}
#endif
}

unsigned
safile_read(struct file *file, unsigned char *data, unsigned count)
{
	struct safile *f = (struct safile *)file;
	unsigned n;

	n = f->started ? sio_read(f->hdl, data, count) : 0;
	if (n == 0) {
		f->file.state &= ~FILE_ROK;
		if (sio_eof(f->hdl)) {
#ifdef DEBUG
			dbg_puts(f->file.name);
			dbg_puts(": failed to read from device\n");
#endif
			file_eof(&f->file);
		} else {
#ifdef DEBUG
			if (debug_level >= 4) {
				file_dbg(&f->file);
				dbg_puts(": reading blocked\n");
			}
#endif
		}
		return 0;
	}
	return n;

}

unsigned
safile_write(struct file *file, unsigned char *data, unsigned count)
{
	struct safile *f = (struct safile *)file;
	unsigned n;

	n = f->started ? sio_write(f->hdl, data, count) : 0;
	if (n == 0) {
		f->file.state &= ~FILE_WOK;
		if (sio_eof(f->hdl)) {
#ifdef DEBUG
			dbg_puts(f->file.name);
			dbg_puts(": failed to write on device\n");
#endif
			file_hup(&f->file);
		} else {
#ifdef DEBUG
			if (debug_level >= 4) {
				file_dbg(&f->file);
				dbg_puts(": writing blocked\n");
			}
#endif
		}
		return 0;
	}
	return n;
}

int
safile_nfds(struct file *file)
{
	return sio_nfds(((struct safile *)file)->hdl);
}

int
safile_pollfd(struct file *file, struct pollfd *pfd, int events)
{
	struct safile *f = (struct safile *)file;

	if (!f->started)
		events &= ~(POLLIN | POLLOUT);
	return sio_pollfd(((struct safile *)file)->hdl, pfd, events);
}

int
safile_revents(struct file *file, struct pollfd *pfd)
{
	return sio_revents(((struct safile *)file)->hdl, pfd);
}

void
safile_close(struct file *file)
{
	struct safile *f = (struct safile *)file;

	if (f->started)
		safile_stop(&f->file);
	return sio_close(((struct safile *)file)->hdl);
}
@


1.22
log
@check for bogus clock ticks sent by the device; helps tracking
bugs in device drivers.
@
text
@d1 1
a1 1
/*	$OpenBSD: safile.c,v 1.21 2010/01/11 13:06:32 ratchov Exp $	*/
@


1.21
log
@When resuming from suspend, prime play buffers with silence,
otherwise the client would underrun by more than its own buffer
size, which currently is not allowed (causes the client to
deadlock).

Set the minimum client buffer size to two blocks. Single block
buffers don't work properly yet.

with help from jakemsr
@
text
@d1 1
a1 1
/*	$OpenBSD: safile.c,v 1.20 2010/01/10 21:47:41 ratchov Exp $	*/
d71 9
@


1.20
log
@Add traces to help tracking subtle timing bugs often causing
underuns and overruns; such bugs are hard to debug with ktrace
or a debugger. They are also handy to debug or monitor code
using aucat.

To enable traces, compile aucat with ``make DEBUG=-DDEBUG'' and
use the -d option multiple times.

ok jakemsr
@
text
@d1 1
a1 1
/*	$OpenBSD: safile.c,v 1.19 2009/11/05 08:36:48 ratchov Exp $	*/
d213 1
a213 1
	n = sio_read(f->hdl, data, count);
d242 1
a242 1
	n = sio_write(f->hdl, data, count);
d273 4
@


1.19
log
@in rpipe_done (wpipe_done), all buffers must be detached
before deleting the writer (reader) otherwise the later
could trigger rpipe_done again.
@
text
@d1 1
a1 1
/*	$OpenBSD: safile.c,v 1.18 2009/09/27 11:51:20 ratchov Exp $	*/
d33 3
d169 4
d177 6
d192 4
d199 6
d217 4
d223 6
d246 4
d252 6
@


1.18
log
@remove all debug traces
@
text
@d1 1
a1 1
/*	$OpenBSD: safile.c,v 1.17 2009/09/19 16:30:10 ratchov Exp $	*/
d146 3
a148 1
	f = (struct safile *)file_new(ops, "hdl", sio_nfds(hdl));
@


1.17
log
@if the device is dying, don't try to stop it, otherwise this would
trigger the code to free() it, which will try to stop it, and so on
@
text
@d1 1
a1 1
/*	$OpenBSD: safile.c,v 1.16 2009/09/19 15:56:04 ratchov Exp $	*/
a37 3
#ifdef DEBUG
	struct timeval itv, otv;
#endif
d50 1
a50 1
	"sndio",
a145 1
	DPRINTF("safile_new: using %u(%u) fpb\n", *bufsz, *round);
a163 1
		DPRINTF("safile_start: sio_start() failed\n");
a167 1
	DPRINTF("safile_start: play/rec started\n");
a176 1
		DPRINTF("safile_stop: sio_stop() filed\n");
a179 1
	DPRINTF("safile_stop: play/rec stopped\n");
d187 1
a187 10
#ifdef DEBUG
	struct timeval tv0, tv1, dtv;
	unsigned us;

	if (!(f->file.state & FILE_ROK)) {
		DPRINTF("safile_read: %s: bad state\n", f->file.name);
		abort();
	}
	gettimeofday(&tv0, NULL);
#endif
a191 1
			fprintf(stderr, "safile_read: eof\n");
a193 2
			DPRINTFN(3, "safile_read: %s: blocking...\n",
			    f->file.name);
a196 8
#ifdef DEBUG
	gettimeofday(&tv1, NULL);
	timersub(&tv1, &tv0, &dtv);
	us = dtv.tv_sec * 1000000 + dtv.tv_usec;
	DPRINTFN(us < 5000 ? 4 : 2,
	    "safile_read: %s: got %d bytes in %uus\n",
	    f->file.name, n, us);
#endif
d206 1
a206 10
#ifdef DEBUG
	struct timeval tv0, tv1, dtv;
	unsigned us;

	if (!(f->file.state & FILE_WOK)) {
		DPRINTF("safile_write: %s: bad state\n", f->file.name);
		abort();
	}
	gettimeofday(&tv0, NULL);
#endif
a210 1
			fprintf(stderr, "safile_write: %s: hup\n", f->file.name);
a212 2
			DPRINTFN(3, "safile_write: %s: blocking...\n",
			    f->file.name);
a215 8
#ifdef DEBUG
	gettimeofday(&tv1, NULL);
	timersub(&tv1, &tv0, &dtv);
	us = dtv.tv_sec * 1000000 + dtv.tv_usec;
	DPRINTFN(us < 5000 ? 4 : 2,
	    "safile_write: %s: wrote %d bytes in %uus\n",
	    f->file.name, n, us);
#endif
@


1.16
log
@tag the device as stopped even if sio_stop() failed (ie. device
is disconnected). This way, when it's ``file'' structure is
free()'d, we don't try to stop it again.
@
text
@d1 1
a1 1
/*	$OpenBSD: safile.c,v 1.15 2009/08/28 06:30:17 ratchov Exp $	*/
d182 1
a182 1
	if (!sio_stop(f->hdl)) {
@


1.15
log
@top device before closing it. It's necessary to ensure that if we
are using another instance of aucat as device, the server closes
the connection before we open a new one.
@
text
@d1 1
a1 1
/*	$OpenBSD: safile.c,v 1.14 2009/07/25 10:52:19 ratchov Exp $	*/
d181 1
a186 1
	f->started = 0;
@


1.14
log
@fix comments, remove no longer needed declaration, reorder includes
from Thomas Pfaff
@
text
@d1 1
a1 1
/*	$OpenBSD: safile.c,v 1.13 2009/07/25 08:44:27 ratchov Exp $	*/
d37 1
d154 1
d172 1
d186 1
d288 4
@


1.13
log
@Currently midi capable programs can control midi hardware, but
cannot cooperate with other programs.  The aim of this change is
to allow any program to send midi data to other programs as they
were midi hardware. For instance, this change should solve the
longstanding problem of using a midi sequencer with software
synthesizers. More precisely:

 - new midicat(1) utility (actually hardlink to aucat(1)).
   it creates software midi thru boxes, allowing programs
   to send midi messages to other programs as they were
   midi(4) hardware.

 - new midi api in libsndio (see mio_open(3)), to access
   midi(4) devices and midicat(1) sockets in a uniform way.

 - new device naming scheme <service>:<unit>[.<option>],
   common to audio and midi.

 - new sndio(7) manual describing concepts and naming

The current audio device naming still works, but people having
scripts or configuration files containing device names could read
the sndio(7) man page and slowly start updating device names.

discussed with jakemsr@@ and deraadt@@, help form jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: safile.c,v 1.12 2009/02/06 08:26:34 ratchov Exp $	*/
d18 1
a19 1
#include <sys/time.h>
d22 1
a25 1
#include <sndio.h>
d27 2
d30 1
a31 2
#include "aproc.h"
#include "aparams.h"
a32 1
#include "dev.h"
d83 1
a83 1
 * open the device
d196 1
a196 1
		DPRINTF("file_read: %s: bad state\n", f->file.name);
@


1.12
log
@move error messages reported to user into main()
@
text
@d1 1
a1 1
/*	$OpenBSD: safile.c,v 1.11 2009/02/04 20:35:14 ratchov Exp $	*/
d217 1
a217 1
	DPRINTFN(us < 5000 ? 4 : 1,
d256 1
a256 1
	DPRINTFN(us < 5000 ? 4 : 1,
@


1.11
log
@if there are too many connections, stop acceping new ones rather
than exit()ing with ``too many open files'' fatal error
@
text
@d1 1
a1 1
/*	$OpenBSD: safile.c,v 1.10 2009/01/23 17:38:15 ratchov Exp $	*/
a99 4
	if (!mode) {
		fprintf(stderr, "select at least play or record mode\n");
		return NULL;
	}
d101 1
a101 2
	if (hdl == NULL) {
		fprintf(stderr, "safile_new: can't open device\n");
a102 1
	}
@


1.10
log
@spacing + typo fix from Matt Jibson <matt.jibson(at)gmail.com>
@
text
@d1 1
a1 1
/*	$OpenBSD: safile.c,v 1.9 2008/12/29 17:59:08 ratchov Exp $	*/
d131 1
a131 1
		return 0;
d133 1
a133 1
		return 0;
d156 2
d161 3
@


1.9
log
@make the code "more correct": add reference counters to aproc
structures so we can keep a pointer to the device. Beside some
simplifications, this allows to easily handle the situation
where the audio device desappears. No change in the behaviour.
@
text
@d1 1
a1 1
/*	$OpenBSD: safile.c,v 1.8 2008/12/27 14:18:26 ratchov Exp $	*/
d37 1
a37 1
#ifdef DEBUG	
d163 1
a163 1
{	
d217 1
a217 1
	us = dtv.tv_sec * 1000000 + dtv.tv_usec; 
d219 1
a219 1
	    "safile_read: %s: got %d bytes in %uus\n", 
d234 1
a234 1
	
d256 1
a256 1
	us = dtv.tv_sec * 1000000 + dtv.tv_usec; 
@


1.8
log
@do not call exit(1) if sio_start(3) or sio_stop(3) fail. The
error will be catched later in the main loop.
@
text
@d1 1
a1 1
/*	$OpenBSD: safile.c,v 1.7 2008/12/26 13:29:31 ratchov Exp $	*/
d168 1
d181 1
@


1.7
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*	$OpenBSD: safile.c,v 1.6 2008/12/17 07:19:27 ratchov Exp $	*/
d167 2
a168 2
		fprintf(stderr, "safile_start: sio_start() failed\n");
		exit(1);
d179 2
a180 2
		fprintf(stderr, "safile_stop: sio_start() filed\n");
		exit(1);
@


1.6
log
@add a writable ``appbufsz'' field to the sa_par structure, containing
the program-part of the buffer size, ie the part that is subject to
underruns. Useful for apps like cdio(1) that don't have their own
rings, or to apps that have a minimum ring size constraint. Setting
the ``bufsz'' parameter becomes deprecated.
ok jakemsr
@
text
@d1 1
a1 1
/*	$OpenBSD: safile.c,v 1.5 2008/12/07 17:10:41 ratchov Exp $	*/
d141 1
a141 2
		ipar->cmax = par.rchan - 1;
		ipar->cmin = 0;
d150 1
a150 2
		opar->cmax = par.pchan - 1;
		opar->cmin = 0;
@


1.5
log
@When resampling, don't require the sample frequency to be an integer.
This removes the arithmetic constraint between the sample frequency
and the block size and all the associated code. Now aucat can work
in server mode with any block size.
ok jakemsr
@
text
@d1 1
a1 1
/*	$OpenBSD: safile.c,v 1.4 2008/11/08 10:40:52 ratchov Exp $	*/
d128 1
a128 1
	par.bufsz = *bufsz;
@


1.4
log
@set the default device to /dev/audio for legacy mode.
From Thomas Pfaff <tpfaff _at_ agderlink.no> and tweaks from me
@
text
@d1 1
a1 1
/*	$OpenBSD: safile.c,v 1.3 2008/11/07 21:01:15 ratchov Exp $	*/
a63 95
/*
 * list of (rate, block-size) pairs ordered by frequency preference and
 * then by block size preference (except for jumbo block sizes that are
 * less prefered than anything else).
 */
struct blkdesc {
	unsigned rate;		/* sample rate */
	unsigned round;		/* usable block sizes */
} blkdesc[] = {
	{ 44100,	 882 },
	{ 44100,	 840 },
	{ 44100,	 441 },
	{ 44100,	 420 },
	{ 44100,	1764 },
	{ 44100,	1680 },
	{ 48000,	 960 },
	{ 48000,	 768 },
	{ 48000,	 480 },
	{ 48000,	 384 },
	{ 48000,	1920 },
	{ 48000,	1536 },
	{ 32000,	 640 },
	{ 32000,	 512 },
	{ 32000,	 320 },
	{ 32000,	 256 },
	{ 32000,	1280 },
	{ 32000,	1024 },
	{ 44100,	2940 },
	{ 48000,	2976 },
	{ 32000,	3200 },
	{  8000,	 320 },
	{  8000,	 256 },
	{     0,	   0 }
};


int
safile_trypar(struct sio_hdl *hdl, struct sio_par *par, int blkio)
{
	struct blkdesc *d;
	struct sio_par np;
	unsigned rate = par->rate;
	unsigned round = par->round;

	if (!blkio) {
		DPRINTF("safile_trypar: not setting block size\n");
		if (!sio_setpar(hdl, par))
			return 0;
		if (!sio_getpar(hdl, par))
			return 0;
		return 1;
	}

	/*
	 * find the rate we want to use
	 */
	for (d = blkdesc;; d++) {
		if (d->rate == 0) {
			d = blkdesc;
			break;
		}
		if (d->rate == rate)
			break;
	}

	/*
	 * find the first matching entry, (the blkdesc array is)
	 * sorted by order of preference)
	 */
	for (;; d++) {
		if (d->rate == 0)
			break;
		if (d->round > round)
			continue;
		par->rate = d->rate;
		par->round = d->round;
		if (!sio_setpar(hdl, par))
			return 0;
		if (!sio_getpar(hdl, &np))
			return 0;
		if (np.rate == d->rate && np.round == d->round) {
			*par = np;
			if (d->round >= d->rate / 15)
				fprintf(stderr,
				    "Warning: using jumbo block size, "
				    "try to use another sample rate.\n");
			return 1;
		}
		DPRINTF("safile_trypar: %uHz/%ufr failed, got %uHz/%ufr\n",
		    d->rate, d->round, np.rate, np.round);
	}
	fprintf(stderr, "Couldn't set block size to <%u frames.\n", round);
	return 0;
}

d88 1
a88 1
    unsigned *bufsz, unsigned *round, int blkio)
d130 4
a133 2
	if (!safile_trypar(hdl, &par, blkio))
		exit(1);
@


1.3
log
@expose the block size in the sndio API by making par->round writable
and thus remove the ugly rate <-> block-size table from
sio_setpar(3). Handle the block size negociation in aucat(1), since
it has few constrains the code is overally simpler.
ok jakemsr@@, major crank suggested by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: safile.c,v 1.2 2008/10/27 00:26:33 ratchov Exp $	*/
d109 1
a109 1
		fprintf(stderr, "not setting block size\n");
d195 4
a198 2
	if (!mode)
		fprintf(stderr, "%s: must at least play or record", path);
@


1.2
log
@rename libsa to libsndio
requested by many, "just go for it" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: safile.c,v 1.1 2008/10/26 08:49:44 ratchov Exp $	*/
d52 1
a52 1
	"libsndsio",
d64 95
d183 1
a183 1
    unsigned *bufsz, unsigned *round)
d221 3
a223 4
	if (*bufsz)
		par.bufsz = *bufsz;
	if (!sio_setpar(hdl, &par)) {
		fprintf(stderr, "safile_new: sio_setpar failed\n");
a224 5
	}
	if (!sio_getpar(hdl, &par)) {
		fprintf(stderr, "safile_new: sio_getpar failed\n");
		exit(1);
	}
d247 1
a247 1
	DPRINTF("safile_open: using %u(%u) fpb\n", *bufsz, *round);
@


1.1
log
@add minimal server capability to aucat(1). When started in server
mode, it listens on an unix socket and mixes/demultiplexes any number
of full-duplex streams, doing necessary format conversions and
resampling on the fly.

programs can use the new libsa(3) library to play and record audio.
The library provides a very simple API to connect to the audio server;
if aucat(1) isn't running, it uses the audio(4) driver transparently
instead.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d25 1
a25 1
#include <libsa.h>
d36 1
a36 1
	struct sa_hdl *hdl;
d52 1
a52 1
	"libsa",
d90 2
a91 2
	struct sa_par par;
	struct sa_hdl *hdl;
d97 1
a97 1
		mode |= SA_REC;
d99 1
a99 1
		mode |= SA_PLAY;
d102 1
a102 1
	hdl = sa_open(path, mode, 1);
d107 1
a107 1
	sa_initpar(&par);
d128 2
a129 2
	if (!sa_setpar(hdl, &par)) {
		fprintf(stderr, "safile_new: sa_setpar failed\n");
d132 2
a133 2
	if (!sa_getpar(hdl, &par)) {
		fprintf(stderr, "safile_new: sa_getpar failed\n");
d159 1
a159 1
	f = (struct safile *)file_new(ops, "hdl", sa_nfds(hdl));
d161 1
a161 1
	sa_onmove(f->hdl, safile_cb, f);
d170 2
a171 2
	if (!sa_start(f->hdl)) {
		fprintf(stderr, "safile_start: sa_start() failed\n");
d182 2
a183 2
	if (!sa_stop(f->hdl)) {
		fprintf(stderr, "safile_stop: sa_start() filed\n");
d204 1
a204 1
	n = sa_read(f->hdl, data, count);
d207 1
a207 1
		if (sa_eof(f->hdl)) {
d243 1
a243 1
	n = sa_write(f->hdl, data, count);
d246 1
a246 1
		if (sa_eof(f->hdl)) {
d269 1
a269 1
	return sa_nfds(((struct safile *)file)->hdl);
d275 1
a275 1
	return sa_pollfd(((struct safile *)file)->hdl, pfd, events);
d281 1
a281 1
	return sa_revents(((struct safile *)file)->hdl, pfd);
d287 1
a287 1
	return sa_close(((struct safile *)file)->hdl);
@

