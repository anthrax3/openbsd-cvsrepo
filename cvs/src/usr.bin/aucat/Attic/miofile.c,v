head	1.10;
access;
symbols
	OPENBSD_5_6:1.9.0.12
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.10
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.6
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.4
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.2
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.4
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.5.0.4
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.2
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4;
locks; strict;
comment	@ * @;


1.10
date	2015.01.21.08.43.55;	author ratchov;	state dead;
branches;
next	1.9;
commitid	SYQcoS9jhSKqSJDL;

1.9
date	2012.06.27.06.46.44;	author ratchov;	state Exp;
branches;
next	1.8;

1.8
date	2012.05.23.19.25.11;	author ratchov;	state Exp;
branches;
next	1.7;

1.7
date	2012.04.11.06.05.43;	author ratchov;	state Exp;
branches;
next	1.6;

1.6
date	2011.06.20.20.18.44;	author ratchov;	state Exp;
branches;
next	1.5;

1.5
date	2010.06.04.06.15.28;	author ratchov;	state Exp;
branches;
next	1.4;

1.4
date	2010.01.10.21.47.41;	author ratchov;	state Exp;
branches;
next	1.3;

1.3
date	2009.11.05.08.36.48;	author ratchov;	state Exp;
branches;
next	1.2;

1.2
date	2009.09.27.11.51.20;	author ratchov;	state Exp;
branches;
next	1.1;

1.1
date	2009.07.25.08.44.27;	author ratchov;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Simplify internals and rewrite file header parsing code:
- remove -M, -t, -w, -C, -x flags that don't make sense anymore
- make "-j off" the default (sndiod already does the job)
- don't limit the number of played/recorded files.
- add support for floating-point encoded files.
- add support for apple .aiff and sun/next .au files
@
text
@/*	$OpenBSD: miofile.c,v 1.9 2012/06/27 06:46:44 ratchov Exp $	*/
/*
 * Copyright (c) 2008 Alexandre Ratchov <alex@@caoua.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/time.h>

#include <poll.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sndio.h>

#include "conf.h"
#include "file.h"
#include "miofile.h"
#ifdef DEBUG
#include "dbg.h"
#endif

struct miofile {
	struct file file;
	struct mio_hdl *hdl;
};

void miofile_close(struct file *);
unsigned int miofile_read(struct file *, unsigned char *, unsigned int);
unsigned int miofile_write(struct file *, unsigned char *, unsigned int);
void miofile_start(struct file *);
void miofile_stop(struct file *);
int miofile_nfds(struct file *);
int miofile_pollfd(struct file *, struct pollfd *, int);
int miofile_revents(struct file *, struct pollfd *);

struct fileops miofile_ops = {
	"mio",
	sizeof(struct miofile),
	miofile_close,
	miofile_read,
	miofile_write,
	NULL, /* start */
	NULL, /* stop */
	miofile_nfds,
	miofile_pollfd,
	miofile_revents
};

/*
 * open the device
 */
struct miofile *
miofile_new(struct fileops *ops, char *path, unsigned int mode)
{
	struct mio_hdl *hdl;
	struct miofile *f;

	hdl = mio_open(path, mode, 1);
	if (hdl == NULL)
		return NULL;
	f = (struct miofile *)file_new(ops, path, mio_nfds(hdl));
	if (f == NULL)
		goto bad_close;
	f->hdl = hdl;
	return f;
 bad_close:
	mio_close(hdl);
	return NULL;
}

unsigned int
miofile_read(struct file *file, unsigned char *data, unsigned int count)
{
	struct miofile *f = (struct miofile *)file;
	unsigned int n;
	
	n = mio_read(f->hdl, data, count);
	if (n == 0) {
		f->file.state &= ~FILE_ROK;
		if (mio_eof(f->hdl)) {
#ifdef DEBUG
			dbg_puts(f->file.name);
			dbg_puts(": failed to read from device\n");
#endif
			file_eof(&f->file);
		} else {
#ifdef DEBUG
			if (debug_level >= 4) {
				file_dbg(&f->file);
				dbg_puts(": reading blocked\n");
			}
#endif
		}
		return 0;
	}
	return n;

}

unsigned int
miofile_write(struct file *file, unsigned char *data, unsigned int count)
{
	struct miofile *f = (struct miofile *)file;
	unsigned int n;

	n = mio_write(f->hdl, data, count);
	if (n == 0) {
		f->file.state &= ~FILE_WOK;
		if (mio_eof(f->hdl)) {
#ifdef DEBUG
			dbg_puts(f->file.name);
			dbg_puts(": failed to write on device\n");
#endif
			file_hup(&f->file);
		} else {
#ifdef DEBUG
			if (debug_level >= 4) {
				file_dbg(&f->file);
				dbg_puts(": writing blocked\n");
			}
#endif
		}
		return 0;
	}
	return n;
}

int
miofile_nfds(struct file *file)
{
	return mio_nfds(((struct miofile *)file)->hdl);
}

int
miofile_pollfd(struct file *file, struct pollfd *pfd, int events)
{
	return mio_pollfd(((struct miofile *)file)->hdl, pfd, events);
}

int
miofile_revents(struct file *file, struct pollfd *pfd)
{
	return mio_revents(((struct miofile *)file)->hdl, pfd);
}

void
miofile_close(struct file *file)
{
	mio_close(((struct miofile *)file)->hdl);
}
@


1.9
log
@Don't return void expressions in functions returning void. Removes
warnings in clang. From dhill. Thanks!
@
text
@d1 1
a1 1
/*	$OpenBSD: miofile.c,v 1.8 2012/05/23 19:25:11 ratchov Exp $	*/
@


1.8
log
@Make the "default" string a valid device name that has the same effect
as NULL has. This will (hopefully) simplify ports where the user
passes the device string.
@
text
@d1 1
a1 1
/*	$OpenBSD: miofile.c,v 1.7 2012/04/11 06:05:43 ratchov Exp $	*/
d161 1
a161 1
	return mio_close(((struct miofile *)file)->hdl);
@


1.7
log
@Use "unsigned int" rather than "unsigned". No object change.
suggested by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: miofile.c,v 1.6 2011/06/20 20:18:44 ratchov Exp $	*/
a66 1
	char *siopath;
d70 1
a70 2
	siopath = (strcmp(path, "default") == 0) ? NULL : path;
	hdl = mio_open(siopath, mode, 1);
@


1.6
log
@Make -aoff option apply to MIDI ports (-q) as well, ensuring the device
stays closed also if -q is used. As we're at it, add -a to midicat so
it behaves like aucat.
@
text
@d1 1
a1 1
/*	$OpenBSD: miofile.c,v 1.5 2010/06/04 06:15:28 ratchov Exp $	*/
d40 2
a41 2
unsigned miofile_read(struct file *, unsigned char *, unsigned);
unsigned miofile_write(struct file *, unsigned char *, unsigned);
d65 1
a65 1
miofile_new(struct fileops *ops, char *path, unsigned mode)
d85 2
a86 2
unsigned
miofile_read(struct file *file, unsigned char *data, unsigned count)
d89 1
a89 1
	unsigned n;
d114 2
a115 2
unsigned
miofile_write(struct file *file, unsigned char *data, unsigned count)
d118 1
a118 1
	unsigned n;
@


1.5
log
@Allow the audio device to be opened only while it's actually used.
This is necessary for uaudio devices, for instance to start aucat
before the device is plugged. Or to unplug a device whithout
having to restart aucat when another device is plugged.  This is
controlled with the new -a option.

Allow multiple audio devices to be used concurently, i.e.
multiple ``-f devname'' options to be used; -f options must follow
per-device options, which is what we do for other options.
@
text
@d1 1
a1 1
/*	$OpenBSD: miofile.c,v 1.4 2010/01/10 21:47:41 ratchov Exp $	*/
d65 1
a65 1
miofile_new(struct fileops *ops, char *path, int input, int output)
a69 1
	int mode = 0;
a71 4
	if (input)
		mode |= MIO_IN;
	if (output)
		mode |= MIO_OUT;
@


1.4
log
@Add traces to help tracking subtle timing bugs often causing
underuns and overruns; such bugs are hard to debug with ktrace
or a debugger. They are also handy to debug or monitor code
using aucat.

To enable traces, compile aucat with ``make DEBUG=-DDEBUG'' and
use the -d option multiple times.

ok jakemsr
@
text
@d1 1
a1 1
/*	$OpenBSD: miofile.c,v 1.3 2009/11/05 08:36:48 ratchov Exp $	*/
d67 1
d72 1
d77 1
a77 1
	hdl = mio_open(path, mode, 1);
a79 2
	if (path == NULL)
		path = "default";
@


1.3
log
@in rpipe_done (wpipe_done), all buffers must be detached
before deleting the writer (reader) otherwise the later
could trigger rpipe_done again.
@
text
@d1 1
a1 1
/*	$OpenBSD: miofile.c,v 1.2 2009/09/27 11:51:20 ratchov Exp $	*/
d30 3
d100 4
d106 6
d129 4
d135 6
@


1.2
log
@remove all debug traces
@
text
@d1 1
a1 1
/*	$OpenBSD: miofile.c,v 1.1 2009/07/25 08:44:27 ratchov Exp $	*/
d75 3
a77 1
	f = (struct miofile *)file_new(ops, "hdl", mio_nfds(hdl));
@


1.1
log
@Currently midi capable programs can control midi hardware, but
cannot cooperate with other programs.  The aim of this change is
to allow any program to send midi data to other programs as they
were midi hardware. For instance, this change should solve the
longstanding problem of using a midi sequencer with software
synthesizers. More precisely:

 - new midicat(1) utility (actually hardlink to aucat(1)).
   it creates software midi thru boxes, allowing programs
   to send midi messages to other programs as they were
   midi(4) hardware.

 - new midi api in libsndio (see mio_open(3)), to access
   midi(4) devices and midicat(1) sockets in a uniform way.

 - new device naming scheme <service>:<unit>[.<option>],
   common to audio and midi.

 - new sndio(7) manual describing concepts and naming

The current audio device naming still works, but people having
scripts or configuration files containing device names could read
the sndio(7) man page and slowly start updating device names.

discussed with jakemsr@@ and deraadt@@, help form jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d75 1
a75 1
	f = (struct miofile *)file_new(ops, "miohdl", mio_nfds(hdl));
a94 1
			fprintf(stderr, "miofile_read: eof\n");
a96 2
			DPRINTFN(3, "miofile_read: %s: blocking...\n",
			    f->file.name);
a113 1
			fprintf(stderr, "miofile_write: %s: hup\n", f->file.name);
a115 2
			DPRINTFN(3, "miofile_write: %s: blocking...\n",
			    f->file.name);
@

