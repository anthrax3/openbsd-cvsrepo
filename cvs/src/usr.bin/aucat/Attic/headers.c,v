head	1.25;
access;
symbols
	OPENBSD_5_6:1.23.0.6
	OPENBSD_5_6_BASE:1.23
	OPENBSD_5_5:1.23.0.4
	OPENBSD_5_5_BASE:1.23
	OPENBSD_5_4:1.22.0.6
	OPENBSD_5_4_BASE:1.22
	OPENBSD_5_3:1.22.0.4
	OPENBSD_5_3_BASE:1.22
	OPENBSD_5_2:1.22.0.2
	OPENBSD_5_2_BASE:1.22
	OPENBSD_5_1_BASE:1.21
	OPENBSD_5_1:1.21.0.2
	OPENBSD_5_0:1.19.0.4
	OPENBSD_5_0_BASE:1.19
	OPENBSD_4_9:1.19.0.2
	OPENBSD_4_9_BASE:1.19
	OPENBSD_4_8:1.18.0.2
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.6.0.4
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.4.0.2
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.1.0.2
	OPENBSD_4_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.25
date	2015.01.21.08.43.55;	author ratchov;	state dead;
branches;
next	1.24;
commitid	SYQcoS9jhSKqSJDL;

1.24
date	2015.01.16.06.40.05;	author deraadt;	state Exp;
branches;
next	1.23;
commitid	Uu5nFG3wCl0LACBb;

1.23
date	2013.11.18.17.37.45;	author ratchov;	state Exp;
branches;
next	1.22;

1.22
date	2012.04.11.06.05.43;	author ratchov;	state Exp;
branches;
next	1.21;

1.21
date	2011.10.14.10.54.12;	author ratchov;	state Exp;
branches;
next	1.20;

1.20
date	2011.10.12.07.20.04;	author ratchov;	state Exp;
branches;
next	1.19;

1.19
date	2010.11.05.15.23.18;	author ratchov;	state Exp;
branches;
next	1.18;

1.18
date	2010.06.05.16.54.19;	author ratchov;	state Exp;
branches;
next	1.17;

1.17
date	2010.06.05.16.52.28;	author ratchov;	state Exp;
branches;
next	1.16;

1.16
date	2010.05.27.06.17.04;	author ratchov;	state Exp;
branches;
next	1.15;

1.15
date	2010.05.25.06.27.41;	author ratchov;	state Exp;
branches;
next	1.14;

1.14
date	2010.05.02.11.54.26;	author ratchov;	state Exp;
branches;
next	1.13;

1.13
date	2010.04.06.20.07.01;	author ratchov;	state Exp;
branches;
next	1.12;

1.12
date	2010.04.03.17.59.17;	author ratchov;	state Exp;
branches;
next	1.11;

1.11
date	2010.04.03.17.40.33;	author ratchov;	state Exp;
branches;
next	1.10;

1.10
date	2010.01.10.21.47.41;	author ratchov;	state Exp;
branches;
next	1.9;

1.9
date	2009.12.12.15.15.34;	author ratchov;	state Exp;
branches;
next	1.8;

1.8
date	2009.09.27.11.51.20;	author ratchov;	state Exp;
branches;
next	1.7;

1.7
date	2009.07.25.10.52.19;	author ratchov;	state Exp;
branches;
next	1.6;

1.6
date	2009.04.22.10.57.33;	author ratchov;	state Exp;
branches;
next	1.5;

1.5
date	2009.04.11.10.24.21;	author jakemsr;	state Exp;
branches;
next	1.4;

1.4
date	2009.01.23.17.38.15;	author ratchov;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.16.17.08.32;	author ratchov;	state Exp;
branches;
next	1.2;

1.2
date	2008.10.26.08.49.44;	author ratchov;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.23.07.15.46;	author ratchov;	state Exp;
branches;
next	;


desc
@@


1.25
log
@Simplify internals and rewrite file header parsing code:
- remove -M, -t, -w, -C, -x flags that don't make sense anymore
- make "-j off" the default (sndiod already does the job)
- don't limit the number of played/recorded files.
- add support for floating-point encoded files.
- add support for apple .aiff and sun/next .au files
@
text
@/*	$OpenBSD: headers.c,v 1.24 2015/01/16 06:40:05 deraadt Exp $	*/
/*
 * Copyright (c) 2008 Alexandre Ratchov <alex@@caoua.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <err.h>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "aparams.h"
#include "conf.h"
#include "wav.h"

/*
 * Encoding IDs used in .wav headers.
 */
#define WAV_ENC_PCM	1
#define WAV_ENC_ALAW	6
#define WAV_ENC_ULAW	7
#define WAV_ENC_EXT	0xfffe

struct wavriff {
	char magic[4];
	uint32_t size;
	char type[4];
} __packed;

struct wavchunk {
	char id[4];
	uint32_t size;
} __packed;

struct wavfmt {
	uint16_t fmt;
	uint16_t nch;
	uint32_t rate;
	uint32_t byterate;
	uint16_t blkalign;
	uint16_t bits;
#define WAV_FMT_SIZE		 16
#define WAV_FMT_SIZE2		(16 + 2)
#define WAV_FMT_EXT_SIZE	(16 + 24)
	uint16_t extsize;
	uint16_t valbits;
	uint32_t chanmask;
	uint16_t extfmt;
	char	 guid[14];
} __packed;

char wav_id_riff[4] = { 'R', 'I', 'F', 'F' };
char wav_id_wave[4] = { 'W', 'A', 'V', 'E' };
char wav_id_data[4] = { 'd', 'a', 't', 'a' };
char wav_id_fmt[4] = { 'f', 'm', 't', ' ' };
char wav_guid[14] = {
	0x00, 0x00, 0x00, 0x00,
	0x10, 0x00, 0x80, 0x00,
	0x00, 0xAA, 0x00, 0x38,
	0x9B, 0x71
};

int wav_readfmt(int, unsigned int, struct aparams *, short **);

int
wav_readfmt(int fd, unsigned int csize, struct aparams *par, short **map)
{
	struct wavfmt fmt;
	unsigned int nch, cmax, rate, bits, bps, enc;

	if (csize < WAV_FMT_SIZE) {
		warnx("%u: bugus format chunk size", csize);
		return 0;
	}
	if (csize > WAV_FMT_EXT_SIZE)
		csize = WAV_FMT_EXT_SIZE;
	if (read(fd, &fmt, csize) != csize) {
		warn("riff_read: chunk");
		return 0;
	}
	enc = letoh16(fmt.fmt);
	bits = letoh16(fmt.bits);
	if (enc == WAV_ENC_EXT) {
		if (csize != WAV_FMT_EXT_SIZE) {
			warnx("missing extended format chunk in .wav file");
			return 0;
		}
		if (memcmp(fmt.guid, wav_guid, sizeof(wav_guid)) != 0) {
			warnx("unknown format (GUID) in .wav file");
			return 0;
		}
		bps = (bits + 7) / 8;
		bits = letoh16(fmt.valbits);
		enc = letoh16(fmt.extfmt);
	} else
		bps = (bits + 7) / 8;
	switch (enc) {
	case WAV_ENC_PCM:
		*map = NULL;
		break;
	case WAV_ENC_ALAW:
		*map = wav_alawmap;
		break;
	case WAV_ENC_ULAW:
		*map = wav_ulawmap;
		break;
	default:
		errx(1, "%u: unsupported encoding in .wav file", enc);
	}
	nch = letoh16(fmt.nch);
	if (nch == 0) {
		warnx("zero number of channels");
		return 0;
	}
	cmax = par->cmin + nch - 1;
	if (cmax >= NCHAN_MAX) {
		warnx("%u:%u: bad range", par->cmin, cmax);
		return 0;
	}
	rate = letoh32(fmt.rate);
	if (rate < RATE_MIN || rate > RATE_MAX) {
		warnx("%u: bad sample rate", rate);
		return 0;
	}
	if (bits == 0 || bits > 32) {
		warnx("%u: bad number of bits", bits);
		return 0;
	}
	if (bits > bps * 8) {
		warnx("%u: bits larger than bytes-per-sample", bps);
		return 0;
	}
	if (enc == WAV_ENC_PCM) {
		par->bps = bps;
		par->bits = bits;
		par->le = 1;
		par->sig = (bits <= 8) ? 0 : 1;	/* ask microsoft why... */
		par->msb = 1;
	} else {
		if (bits != 8) {
			warnx("%u: mulaw/alaw encoding not 8-bit", bits);
			return 0;
		}
		par->bits = ADATA_BITS;
		par->bps = sizeof(adata_t);
		par->le = ADATA_LE;
		par->sig = 1;
		par->msb = 0;
	}
	par->cmax = cmax;
	par->rate = rate;
	return 1;
}

int
wav_readhdr(int fd, struct aparams *par, off_t *startpos, off_t *datasz, short **map)
{
	struct wavriff riff;
	struct wavchunk chunk;
	unsigned int csize, rsize, pos = 0;
	int fmt_done = 0;

	if (lseek(fd, 0, SEEK_SET) < 0) {
		warn("lseek: 0");
		return 0;
	}
	if (read(fd, &riff, sizeof(riff)) != sizeof(riff)) {
		warn("wav_readhdr: header");
		return 0;
	}
	if (memcmp(&riff.magic, &wav_id_riff, 4) != 0 ||
	    memcmp(&riff.type, &wav_id_wave, 4)) {
		warnx("not a wave file");
		return 0;
	}
	rsize = letoh32(riff.size);
	for (;;) {
		if (pos + sizeof(struct wavchunk) > rsize) {
			warnx("missing data chunk");
			return 0;
		}
		if (read(fd, &chunk, sizeof(chunk)) != sizeof(chunk)) {
			warn("wav_readhdr: chunk");
			return 0;
		}
		csize = letoh32(chunk.size);
		if (memcmp(chunk.id, wav_id_fmt, 4) == 0) {
			if (!wav_readfmt(fd, csize, par, map))
				return 0;
			fmt_done = 1;
		} else if (memcmp(chunk.id, wav_id_data, 4) == 0) {
			*startpos = pos + sizeof(riff) + sizeof(chunk);
			*datasz = csize;
			break;
		} else {
#ifdef DEBUG
			if (debug_level >= 2) 
				warnx("ignoring chunk <%.4s>\n", chunk.id);
#endif
		}

		/*
		 * next chunk
		 */
		pos += sizeof(struct wavchunk) + csize;
		if (lseek(fd, sizeof(riff) + pos, SEEK_SET) < 0) {
			warn("lseek");
			return 0;
		}
	}
	if (!fmt_done) {
		warnx("missing format chunk");
		return 0;
	}
	return 1;
}

/*
 * Write header and seek to start position
 */
int
wav_writehdr(int fd, struct aparams *par, off_t *startpos, off_t datasz)
{
	unsigned int nch = par->cmax - par->cmin + 1;
	struct {
		struct wavriff riff;
		struct wavchunk fmt_hdr;
		struct wavfmt fmt;
		struct wavchunk data_hdr;
	} __packed hdr;

	/*
	 * Check that encoding is supported by .wav file format.
	 */
	if (par->bits > 8 && !par->le) {
		warnx("samples must be little endian");
		return 0;
	}
	if (8 * par->bps - par->bits >= 8) {
		warnx("padding must be less than 8 bits");
		return 0;
	}
	if ((par->bits <= 8 && par->sig) || (par->bits > 8 && !par->sig)) {
		warnx("samples with more (less) than 8 bits must be signed "
		    "(unsigned)");
		return 0;
	}
	if (8 * par->bps != par->bits && !par->msb) {
		warnx("samples must be MSB justified");
		return 0;
	}

	memcpy(hdr.riff.magic, wav_id_riff, 4);
	memcpy(hdr.riff.type, wav_id_wave, 4);
	hdr.riff.size = htole32(datasz + sizeof(hdr) - sizeof(hdr.riff));

	memcpy(hdr.fmt_hdr.id, wav_id_fmt, 4);
	hdr.fmt_hdr.size = htole32(sizeof(hdr.fmt));
	hdr.fmt.fmt = htole16(1);
	hdr.fmt.nch = htole16(nch);
	hdr.fmt.rate = htole32(par->rate);
	hdr.fmt.byterate = htole32(par->rate * par->bps * nch);
	hdr.fmt.blkalign = par->bps * nch;
	hdr.fmt.bits = htole16(par->bits);

	memcpy(hdr.data_hdr.id, wav_id_data, 4);
	hdr.data_hdr.size = htole32(datasz);

	if (lseek(fd, 0, SEEK_SET) < 0) {
		warn("wav_writehdr: lseek");
		return 0;
	}
	if (write(fd, &hdr, sizeof(hdr)) != sizeof(hdr)) {
		warn("wav_writehdr: write");
		return 0;
	}
	*startpos = sizeof(hdr);
	return 1;
}
@


1.24
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: headers.c,v 1.23 2013/11/18 17:37:45 ratchov Exp $	*/
@


1.23
log
@add missing prototypes
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a16 2

#include <sys/param.h>
@


1.22
log
@Use "unsigned int" rather than "unsigned". No object change.
suggested by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: headers.c,v 1.21 2011/10/14 10:54:12 ratchov Exp $	*/
d77 2
@


1.21
log
@s/chuck/chunk/, from Remco, thanks!
@
text
@d1 1
a1 1
/*	$OpenBSD: headers.c,v 1.20 2011/10/12 07:20:04 ratchov Exp $	*/
d79 1
a79 1
wav_readfmt(int fd, unsigned csize, struct aparams *par, short **map)
d82 1
a82 1
	unsigned nch, cmax, rate, bits, bps, enc;
d173 1
a173 1
	unsigned csize, rsize, pos = 0;
d237 1
a237 1
	unsigned nch = par->cmax - par->cmin + 1;
@


1.20
log
@Simplify and improve the way options are parsed and remove ~300 lines
of code that becomes unused. Few command line arguments changes are
required though:

  - stream definitions (-ios) now must follow devices definitions they
    are attached to (-fMn)

  - the -n option is now a special "loopback" device and is thus used
    like -f, eg it must precede streams

  - in midicat, midi thru boxes are not created automatically anymore,
    the new "-M" option must be used for that

  - channel numbers (-Cc options) correspond always to channel numbers
    of the hardware.

  - the -u option isn't needed anymore

  - increase the log verbosity so user errors are logged
    without using -d

tested by many, help from jmc
@
text
@d1 1
a1 1
/*	$OpenBSD: headers.c,v 1.19 2010/11/05 15:23:18 ratchov Exp $	*/
d211 1
a211 1
				warnx("ignoring chuck <%.4s>\n", chunk.id);
@


1.19
log
@Convert ulaw/alaw to native format (ie using ADATA_XXX defines) rather
than s16 (using hardcoded constants). Currently s16 is the native format,
so no behavior change.
@
text
@d1 1
a1 1
/*	$OpenBSD: headers.c,v 1.18 2010/06/05 16:54:19 ratchov Exp $	*/
d243 1
a243 1
	} hdr;
d276 1
a277 1
	hdr.fmt.blkalign = par->bps * nch;
@


1.18
log
@Take into account wav ``riff'' header when calculating the offset
of the data chuck returned in ``startpos''. Fixes MMC relocate being
off by few samples.
@
text
@d1 1
a1 1
/*	$OpenBSD: headers.c,v 1.17 2010/06/05 16:52:28 ratchov Exp $	*/
d151 1
d157 3
a159 3
		par->bits = 8 * sizeof(short);
		par->bps = sizeof(short);
		par->le = NATIVE_LE;
d161 1
a162 1
	par->msb = 1;
@


1.17
log
@when parsing wav headers, check that a data chuck actually exists
@
text
@d1 1
a1 1
/*	$OpenBSD: headers.c,v 1.16 2010/05/27 06:17:04 ratchov Exp $	*/
d204 1
a204 1
			*startpos = pos;
@


1.16
log
@include stdint.h
@
text
@d1 1
a1 1
/*	$OpenBSD: headers.c,v 1.15 2010/05/25 06:27:41 ratchov Exp $	*/
d189 5
a193 1
	while (pos + sizeof(struct wavchunk) <= rsize) {
@


1.15
log
@enable support for ``extended'' .wav files since certain programs
use this format instead of the non-extended one (ex. audio/libao)

spotted/suggested by naddy
@
text
@d1 1
a1 1
/*	$OpenBSD: headers.c,v 1.14 2010/05/02 11:54:26 ratchov Exp $	*/
d22 1
@


1.14
log
@Clean up device handling code to clarify different initialization phases
and different device states. Split initialization in two phases:
first global variables are initialized then the audio hardware is opened.
Allow devices that don't support full-duplex to work in play-only or
record-only mode, even if ``-m play'' or ``-m rec'' are not specified.
@
text
@d1 1
a1 1
/*	$OpenBSD: headers.c,v 1.13 2010/04/06 20:07:01 ratchov Exp $	*/
d36 1
d56 8
d70 6
d81 1
a81 1
	unsigned nch, cmax, rate, bits, enc;
d83 2
a84 2
	if (csize < sizeof(fmt)) {
		warnx("bogus format chunk");
d87 3
a89 1
	if (read(fd, &fmt, sizeof(fmt)) != sizeof(fmt)) {
d94 15
a136 1
	bits = letoh16(fmt.bits);
d141 4
d146 1
a146 1
		par->bps = (bits + 7) / 8;
d271 1
a271 1
	hdr.fmt.blkalign = 0;
@


1.13
log
@aucat (server):

  - make the ``-m mode'' option per subdevice, allowing
    subdevices to be play-only or rec-only even if the
    server is full-duplex

  - add ``monitoring'' mode (with ``-m mon''). This is a
    record-only stream from which played streams can be
    recorded (kind of ``record what you hear'').

  - allow MIDI devices to be subscribed to the controlling
    MIDI port of the server, ie what midicat does (with -f
    option), but using the -q option.

  - add flow control to the protocol, and serialize clock
    ticks (sio_onmove() calls) and data chunks.  This should
    fix certain full-duplex programs, broken with ``magic''
    block/buffer size combinations.

  - enable 3 block latency which is the minimum theoretical.
    Make -z and -b options correspond to device parameters.

  - make sio_getcap(3) the same for aucat and sun backends,
    ie return whatever is supported (``everything'' in the
    aucat case, since everything is actulally supported).

aucat (player):

  - enable ``-m mode'' option  to select between monitoring
    and recording when ``-o file'' is used.

  - plug MIDI code to non-server codepath. The MIDI control
    device is specified with the ``-q device'' option, as in
    server mode.

  - impliment lseek()'ing within files (controlled
    through MIDI). Necessary to use aucat with a MIDI
    sequencer.

midicat (thrubox):

  - rename ``-f'' flag to ``-q'', so it has the
    same name as in aucat (-f is still working)

ok jakemsr@@, tweaks from jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: headers.c,v 1.12 2010/04/03 17:59:17 ratchov Exp $	*/
d169 1
a169 1
			if (debug_level >= 1) 
@


1.12
log
@backout last change, committed by mistake, sorry...
@
text
@d1 1
a1 1
/*	$OpenBSD: headers.c,v 1.10 2010/01/10 21:47:41 ratchov Exp $	*/
d132 1
a132 1
wav_readhdr(int fd, struct aparams *par, off_t *datasz, short **map)
d164 1
d190 3
d194 1
a194 1
wav_writehdr(int fd, struct aparams *par)
a195 1
	off_t datasz;
a203 10
	datasz = lseek(fd, 0, SEEK_CUR);
	if (datasz < 0) {
		warn("wav_writehdr: lseek(end)");
		return 0;
	}
	if (datasz >= sizeof(hdr))
		datasz -= sizeof(hdr);
	else
		datasz = 0;

d249 1
@


1.11
log
@doc fixes from jmc
@
text
@d132 1
a132 1
wav_readhdr(int fd, struct aparams *par, off_t *startpos, off_t *datasz, short **map)
a163 1
			*startpos = pos;
a188 3
/*
 * Write header and seek to start position
 */
d190 1
a190 1
wav_writehdr(int fd, struct aparams *par, off_t *startpos, off_t datasz)
d192 1
d201 10
a255 1
	*startpos = sizeof(hdr);
@


1.10
log
@Add traces to help tracking subtle timing bugs often causing
underuns and overruns; such bugs are hard to debug with ktrace
or a debugger. They are also handy to debug or monitor code
using aucat.

To enable traces, compile aucat with ``make DEBUG=-DDEBUG'' and
use the -d option multiple times.

ok jakemsr
@
text
@d1 1
a1 1
/*	$OpenBSD: headers.c,v 1.9 2009/12/12 15:15:34 ratchov Exp $	*/
d132 1
a132 1
wav_readhdr(int fd, struct aparams *par, off_t *datasz, short **map)
d164 1
d190 3
d194 1
a194 1
wav_writehdr(int fd, struct aparams *par)
a195 1
	off_t datasz;
a203 10
	datasz = lseek(fd, 0, SEEK_CUR);
	if (datasz < 0) {
		warn("wav_writehdr: lseek(end)");
		return 0;
	}
	if (datasz >= sizeof(hdr))
		datasz -= sizeof(hdr);
	else
		datasz = 0;

d249 1
@


1.9
log
@when parsing .wav headers, check if rate <= RATE_MAX (instead of
rate < RATE_MAX). Similarly check if bits <= 32 (instead of bits < 32)
@
text
@d1 1
a1 1
/*	$OpenBSD: headers.c,v 1.8 2009/09/27 11:51:20 ratchov Exp $	*/
d167 4
@


1.8
log
@remove all debug traces
@
text
@d1 1
a1 1
/*	$OpenBSD: headers.c,v 1.7 2009/07/25 10:52:19 ratchov Exp $	*/
d101 1
a101 1
	if (rate < RATE_MIN || rate >= RATE_MAX) {
d106 1
a106 1
	if (bits == 0 || bits >= 32) {
@


1.7
log
@fix comments, remove no longer needed declaration, reorder includes
from Thomas Pfaff
@
text
@d1 1
a1 1
/*	$OpenBSD: headers.c,v 1.6 2009/04/22 10:57:33 ratchov Exp $	*/
a127 7
#ifdef DEBUG
	if (debug_level > 0) {
		fprintf(stderr, "wav_readfmt: using ");
		aparams_print(par);
		fprintf(stderr, "\n");
	}
#endif
d144 1
a144 1
		warn("riff_read: header");
d155 1
a155 1
			warn("riff_read: chunk");
a166 1
			DPRINTF("unknown chunk: <%.4s>\n", chunk.id);
@


1.6
log
@move support for ulaw/alaw encoding in .wav files from legacy mode
to normal mode.

ok jakemsr@@
@
text
@d1 1
a1 1
/*	$OpenBSD: headers.c,v 1.5 2009/04/11 10:24:21 jakemsr Exp $	*/
d26 1
a27 1
#include "aparams.h"
d31 1
a31 1
 * encoding IDs used in .wav headers
d216 1
a216 1
	 * check that encoding is supported by .wav file format
d227 2
a228 1
		warnx("samples with more (less) than 8 bits must be signed (unsigned)");
@


1.5
log
@- make legacy mode use sio_open(3) (sndio) API
- parse .au headers in legacy mode
- support playback of ulaw and alaw encoded .au and .wav files in
legacy mode

ok ratchov
@
text
@d1 1
a1 1
/*	$OpenBSD: headers.c,v 1.4 2009/01/23 17:38:15 ratchov Exp $	*/
d28 8
d63 1
a63 1
wav_readfmt(int fd, unsigned csize, struct aparams *par, int *renc)
d77 12
a88 3
	if (renc == NULL && enc != 1) {
		warnx("%u: only \"pcm\" encoding supported", enc);
		return 0;
d110 15
a124 4
	par->bps = (bits + 7) / 8;
	par->bits = bits;
	par->le = 1;
	par->sig = (bits <= 8) ? 0 : 1;	/* ask microsoft why... */
a127 2
	if (renc)
		*renc = enc;
d139 1
a139 1
wav_readhdr(int fd, struct aparams *par, off_t *datasz, int *renc)
d167 1
a167 1
			if (!wav_readfmt(fd, csize, par, renc))
@


1.4
log
@spacing + typo fix from Matt Jibson <matt.jibson(at)gmail.com>
@
text
@d1 1
a1 1
/*	$OpenBSD: headers.c,v 1.3 2008/11/16 17:08:32 ratchov Exp $	*/
d55 1
a55 1
wav_readfmt(int fd, unsigned csize, struct aparams *par)
d69 1
a69 1
	if (enc != 1) {
d100 2
d113 1
a113 1
wav_readhdr(int fd, struct aparams *par, off_t *datasz)
d141 1
a141 1
			if (!wav_readfmt(fd, csize, par))
@


1.3
log
@make aucat compile without DEBUG defined (still defined by default)
@
text
@d1 1
a1 1
/*	$OpenBSD: headers.c,v 1.2 2008/10/26 08:49:44 ratchov Exp $	*/
d46 1
a46 1
	uint16_t bits;	
d222 1
a222 1
	    
@


1.2
log
@add minimal server capability to aucat(1). When started in server
mode, it listens on an unix socket and mixes/demultiplexes any number
of full-duplex streams, doing necessary format conversions and
resampling on the fly.

programs can use the new libsa(3) library to play and record audio.
The library provides a very simple API to connect to the audio server;
if aucat(1) isn't running, it uses the audio(4) driver transparently
instead.
@
text
@d1 1
a1 1
/*	$OpenBSD: headers.c,v 1.1 2008/05/23 07:15:46 ratchov Exp $	*/
d100 1
d106 1
@


1.1
log
@add support for:
 - recording, full-duplex operation
 - format conversions and resampling on the fly
 - mixing on the fly of multiple inputs of different formats
 - up to 16 channels, simplistic "routing" of channel ranges
 - more linear encodings (in raw and wav files)
the old behaviour is fully preserved if none of the new -i and -o
options are used.

code and fixes from jakemsr@@ and eric@@, suggestions by others.
ok "go ahead" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d79 1
a79 1
	if (cmax >= CHAN_MAX) {
@

