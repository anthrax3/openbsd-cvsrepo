head	1.20;
access;
symbols
	OPENBSD_5_0:1.17.0.2
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.13.0.4
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.2
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6;
locks; strict;
comment	@.\" @;


1.20
date	2011.10.17.21.09.11;	author ratchov;	state dead;
branches;
next	1.19;

1.19
date	2011.10.12.12.16.10;	author jmc;	state Exp;
branches;
next	1.18;

1.18
date	2011.10.12.07.20.04;	author ratchov;	state Exp;
branches;
next	1.17;

1.17
date	2011.06.20.20.18.44;	author ratchov;	state Exp;
branches;
next	1.16;

1.16
date	2011.05.03.08.00.54;	author ratchov;	state Exp;
branches;
next	1.15;

1.15
date	2011.04.28.06.19.57;	author ratchov;	state Exp;
branches;
next	1.14;

1.14
date	2011.03.21.16.33.17;	author okan;	state Exp;
branches;
next	1.13;

1.13
date	2010.07.06.10.45.01;	author jmc;	state Exp;
branches;
next	1.12;

1.12
date	2010.07.06.01.12.45;	author ratchov;	state Exp;
branches;
next	1.11;

1.11
date	2010.04.22.18.27.19;	author jmc;	state Exp;
branches;
next	1.10;

1.10
date	2010.04.22.17.43.30;	author ratchov;	state Exp;
branches;
next	1.9;

1.9
date	2010.04.06.20.07.01;	author ratchov;	state Exp;
branches;
next	1.8;

1.8
date	2010.04.03.17.59.17;	author ratchov;	state Exp;
branches;
next	1.7;

1.7
date	2010.04.03.17.40.33;	author ratchov;	state Exp;
branches;
next	1.6;

1.6
date	2009.10.22.21.14.10;	author ratchov;	state Exp;
branches;
next	1.5;

1.5
date	2009.10.12.17.32.33;	author sobrado;	state Exp;
branches;
next	1.4;

1.4
date	2009.10.05.07.05.24;	author ratchov;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.27.11.51.20;	author ratchov;	state Exp;
branches;
next	1.2;

1.2
date	2009.08.17.15.07.49;	author ratchov;	state Exp;
branches;
next	1.1;

1.1
date	2009.07.25.08.44.27;	author ratchov;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Remove midicat since aucat can now be used instead of midicat
with almost the same syntax (roughly an extra -M option).
Thru boxes are created with aucat, and corresponding MIDI port
names have the "aucat" prefix instead of "midithru". The old
device name will still work some time for backward compatibility.

ok deraadt
@
text
@.\"	$OpenBSD: midicat.1,v 1.19 2011/10/12 12:16:10 jmc Exp $
.\"
.\" Copyright (c) 2006 Alexandre Ratchov <alex@@caoua.org>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: October 12 2011 $
.Dt MIDICAT 1
.Os
.Sh NAME
.Nm midicat
.Nd MIDI server and manipulation tool
.Sh SYNOPSIS
.Nm midicat
.Op Fl dlM
.Op Fl a Ar flag
.Op Fl i Ar file
.Op Fl L Ar addr
.Op Fl o Ar file
.Op Fl q Ar port
.Op Fl s Ar name
.Op Fl U Ar unit
.Sh DESCRIPTION
The
.Nm
utility can merge any number of MIDI inputs and broadcast the result
to any number of MIDI outputs, similarly to a hardware MIDI thru box.
MIDI streams are typically MIDI ports or plain files containing raw MIDI
data.
.Pp
The
.Nm
utility can also act as a MIDI server in which case MIDI streams
correspond to client connections.
The server capability
allows any MIDI-capable application to send MIDI messages to
MIDI hardware or to another application in a uniform way.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl a Ar flag
Control whether
.Nm
opens MIDI ports connected to the thru box only when needed
or keeps them open all the time.
If the flag is
.Va on
then MIDI ports are kept open all the time, ensuring no other program can
steal any of them.
If the flag is
.Va off ,
then they are automatically closed, allowing other programs to have direct
access to MIDI ports, or the corresponding hardware to be disconnected.
The default is
.Va on .
.It Fl d
Increase log verbosity.
.Nm
logs on
.Em stderr
until it daemonizes.
.It Fl i Ar file
Read data to send from this file.
If the option argument is
.Sq -
then standard input will be used.
.It Fl L Ar addr
Specify a local network address to listen on in server mode.
.Nm
will listen on TCP port 11041+n, where n is the unit number
specified with
.Fl U .
Without this option,
.Nm
listens on the
.Ux Ns -domain
socket only, and is not reachable from any network.
If the option argument is
.Sq -
then
.Nm
will accept connections from any address.
.It Fl M
Create a MIDI thru box.
It merges any number of MIDI inputs and broadcasts the result
to any number of MIDI outputs, similarly to a hardware MIDI thru box.
Any MIDI ports
.Pq Fl q
or MIDI files
.Pq Fl io
specified after this option will be subscribed to this thru box.
If sub-devices are exposed
.Pq Fl s
they behave like software MIDI ports,
allowing any MIDI-capable application to send MIDI messages to
MIDI hardware or to another application in a uniform way.
.It Fl l
Detach and become a daemon.
.It Fl s Ar name
Expose a MIDI thru box to which MIDI programs
can connect.
The given
.Ar name
corresponds to the
.Dq option
part of the
.Xr sndio 7
device name string.
.It Fl o Ar file
Write received data into this file.
If the option argument is
.Sq -
then standard output will be used.
.It Fl q Ar port
Send and receive data from this
.Xr sndio 7
MIDI port.
.It Fl U Ar unit
Unit number to use when running in server mode.
Each
.Nm
server instance has a unique unit number,
used in
.Xr sndio 7
device names.
The default is 0.
The unit number must be set before any server-specific
options are used
.Pq Fl Ls .
.El
.Pp
If files
.Pq Fl io
are specified but no ports
.Pq Fl q
are specified, the default
.Xr sndio 7
port is used.
If no streams
.Pq Fl ioq
are specified, server mode is assumed and a thru box is created
as if
.Fl s Ar default
was used as the last argument.
.Pp
Generally MIDI applications are real-time.
To reduce jitter, especially on busy machines,
the server can be started by the super-user,
in which case it will run with higher priority.
Any user will still be able to connect to it,
but for privacy reasons only one user may have connections to
it at a given time.
.Pp
If
.Nm
is sent
.Dv SIGHUP ,
.Dv SIGINT
or
.Dv SIGTERM ,
then processing terminates.
.Sh EXAMPLES
The following dumps MIDI data received from the default port:
.Bd -literal -offset indent
$ midicat -o - | hexdump -e '1/1 "%x"'
.Ed
.Pp
The following sends raw MIDI data to the
.Pa rmidi:5
port:
.Bd -literal -offset indent
$ midicat -i sysexfile -q rmidi:5
.Ed
.Pp
The following connects
.Pa rmidi:5
and
.Pa rmidi:6
ports:
.Bd -literal -offset indent
$ midicat -q rmidi:5 -q rmidi:6
.Ed
.Pp
The following creates a MIDI thru box and daemonizes,
allowing MIDI programs to send data to each other instead of
using hardware MIDI ports:
.Bd -literal -offset indent
$ midicat -l
.Ed
.Pp
The following creates a MIDI thru box and subscribes the
.Pa rmidi:5
port, allowing multiple MIDI programs to use the port
simultaneously:
.Bd -literal -offset indent
$ midicat -q rmidi:5
.Ed
.Sh SEE ALSO
.Xr aucat 1 ,
.Xr midi 4 ,
.Xr sndio 7
.Sh BUGS
The ability to merge multiple inputs is provided to allow multiple
applications producing MIDI data to keep their connection open while
idling; it does not replace a fully featured MIDI merger.
@


1.19
log
@- avoid line wrapping an example
- sort usage() for midicat
- tweak a bit of unclear wording

ok ratchov
@
text
@d1 1
a1 1
.\"	$OpenBSD: midicat.1,v 1.18 2011/10/12 07:20:04 ratchov Exp $
@


1.18
log
@Simplify and improve the way options are parsed and remove ~300 lines
of code that becomes unused. Few command line arguments changes are
required though:

  - stream definitions (-ios) now must follow devices definitions they
    are attached to (-fMn)

  - the -n option is now a special "loopback" device and is thus used
    like -f, eg it must precede streams

  - in midicat, midi thru boxes are not created automatically anymore,
    the new "-M" option must be used for that

  - channel numbers (-Cc options) correspond always to channel numbers
    of the hardware.

  - the -u option isn't needed anymore

  - increase the log verbosity so user errors are logged
    without using -d

tested by many, help from jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: midicat.1,v 1.17 2011/06/20 20:18:44 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: June 20 2011 $
d97 1
a97 1
Following MIDI ports
d99 1
a99 1
and MIDI files
d101 1
a101 1
will be subscribed to this thru box.
@


1.17
log
@Make -aoff option apply to MIDI ports (-q) as well, ensuring the device
stays closed also if -q is used. As we're at it, add -a to midicat so
it behaves like aucat.
@
text
@d1 1
a1 1
.\"	$OpenBSD: midicat.1,v 1.16 2011/05/03 08:00:54 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: May 3 2011 $
d25 1
a25 1
.Op Fl dl
d93 14
a108 9
.It Fl o Ar file
Write received data into this file.
If the option argument is
.Sq -
then standard output will be used.
.It Fl q Ar port
Send and receive data from this
.Xr sndio 7
MIDI port.
a111 3
Preceding streams
.Pq Fl ioq
are subscribed to this thru box.
d119 9
d137 3
d206 1
a206 1
$ midicat -q rmidi:5 -s default
@


1.16
log
@If the string of the address to listen on is '-' then listen on all
addresses (ie pass NULL to getaddrinfo which would return 0.0.0.0
and :: in most cases)
@
text
@d1 1
a1 1
.\"	$OpenBSD: midicat.1,v 1.15 2011/04/28 06:19:57 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: April 28 2011 $
d26 1
d51 15
@


1.15
log
@Implement a new authentication method allowing aucat and midicat to
work over TCP, for instance, to expose the sound card of one machine
with other machines of the network.

The first client generates a 128-bit random number (aka the
session cookie), saves it in $HOME/.aucat_cookie and sends it to the
server. Successive clients load the cookie from $HOME/.aucat_cookie
and send it to the server but the server accepts only clients whose
cookie matches the session cookie. When all clients are gone, the
session is over, and another cookie could start a new session, and so
on.

TCP is enabled on the server with the new -L option, and on the client
side hostnames are specified with a new optional component in the
device name.

hints from damien, dlg and deraadt, tweaks from jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: midicat.1,v 1.14 2011/03/21 16:33:17 okan Exp $
d17 1
a17 1
.Dd $Mdocdate: March 21 2011 $
d72 5
@


1.14
log
@grammar fixes from Michael W. Bombardieri; also emphasize stderr, as
most pages do already.

ok jmc@@ ratchov@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: midicat.1,v 1.13 2010/07/06 10:45:01 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: July 6 2010 $
d27 1
d61 11
@


1.13
log
@various tweaks to previous; ok ratchov
@
text
@d1 1
a1 1
.\"	$OpenBSD: midicat.1,v 1.12 2010/07/06 01:12:45 ratchov Exp $
d52 3
a54 1
logs on stderr until it daemonizes.
d88 1
a88 1
server instance has an unique unit number,
@


1.12
log
@Handle all streams the same way because there's no actual
difference between audio files and client connections. Clean up
the way command line options are handled and clarify this in the
manual page: stream parameters (-Ccehjmrtvx) must precede stream
definitions (-ios) and per-device parameters (-abz) and stream
definitions (-ios) must precede device definitions (-f). Since
there's no ``server'' and ``non-server'' modes anymore, make the
-l option just detach the process.

ok and help from jakemsr and jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: midicat.1,v 1.11 2010/04/22 18:27:19 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: April 22 2010 $
d65 1
a65 1
.It Fl q Ar device
d105 1
a105 1
was used as last argument.
d111 2
a112 2
Any user will still be able to connect to it, but
for privacy reasons, only one user may have connections to
@


1.11
log
@zap trailing whitespace;
@
text
@d1 1
a1 1
.\"	$OpenBSD: midicat.1,v 1.10 2010/04/22 17:43:30 ratchov Exp $
d28 2
a29 1
.Op Fl q Ar device
d34 12
a45 6
utility is used to manipulate MIDI data.
It can send and receive MIDI data from MIDI ports,
or it can create software MIDI thru boxes,
allowing any MIDI-capable application to
send MIDI messages to MIDI hardware
or to another application in a uniform way.
d50 1
a50 2
Do not daemonize.
If this option is specified,
d52 1
a52 2
will run in the foreground and log to
.Em stderr .
d54 1
a54 1
Send contents of this file to the device.
d59 1
a59 8
Listen for incoming connections on
.Ux Ns -domain
sockets.
This allows clients to use
.Nm
instead of the regular
.Xr midi 4
device as a software MIDI thru box.
d61 1
a61 1
Store received data from the device into this file.
d66 14
a79 1
The
d81 1
a81 2
MIDI device to use for MIDI input/output.
In server mode, devices are subscribed to the MIDI thru box.
d83 2
a84 2
Use the given unit number when creating a software MIDI thru box.
Only one
d86 4
a89 1
process can expose a unit number at a given time.
d93 22
d123 5
a127 15
.Sh SERVER MODE
.Nm
can be used in server mode
.Pq Fl l
to create MIDI thru boxes.
A MIDI thru box allows multiple receivers
to receive data from a single source.
Additionaly,
.Nm
software thru boxes allow multiple sources to be connected
to them; in this case MIDI byte-streams are merged,
preserving MIDI message integrity.
This feature is provided to allow multiple applications
acting as sources to keep their connection open while
idling; it does not replace a fully featured MIDI merger.
d129 6
a134 6
A
.Nm
process may be started by the super-user,
in which case any user will be able to connect to it.
For privacy reasons, only one user may have connections to
it at a given time.
d136 5
a140 6
Alternatively, each user may start its own
.Nm
process.
It is generally not desirable to have multiple instances of
.Nm
running in server mode, so it is good practice to start it thus:
d142 1
a142 1
$ pgrep -x midicat || midicat -l
d145 3
a147 8
Generally MIDI applications are real-time.
To reduce jitter, especially on busy machines, the
.Xr renice 8
command can be used to give a higher priority to the
.Nm
process.
Superuser privileges are required.
For example:
d150 8
a157 1
$ sudo renice -n -20 -p `pgrep -x midicat`
d163 4
@


1.10
log
@Allow multiple users to share the same aucat server. If aucat is
run by root, it binds a shared address to the socket, cranks the
process priority and drops privileges. sio_open(3) will try to
connect to the private socket first (if any), then to the shared
socket. Only one user may have connections to aucat at a given
time.

based on discussions with henning, pyr and others
ok jacek, deraadt
@
text
@d1 1
a1 1
.\"	$OpenBSD: midicat.1,v 1.9 2010/04/06 20:07:01 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: April 6 2010 $
d108 1
a108 1
For privacy reasons, only one user may have connections to 
@


1.9
log
@aucat (server):

  - make the ``-m mode'' option per subdevice, allowing
    subdevices to be play-only or rec-only even if the
    server is full-duplex

  - add ``monitoring'' mode (with ``-m mon''). This is a
    record-only stream from which played streams can be
    recorded (kind of ``record what you hear'').

  - allow MIDI devices to be subscribed to the controlling
    MIDI port of the server, ie what midicat does (with -f
    option), but using the -q option.

  - add flow control to the protocol, and serialize clock
    ticks (sio_onmove() calls) and data chunks.  This should
    fix certain full-duplex programs, broken with ``magic''
    block/buffer size combinations.

  - enable 3 block latency which is the minimum theoretical.
    Make -z and -b options correspond to device parameters.

  - make sio_getcap(3) the same for aucat and sun backends,
    ie return whatever is supported (``everything'' in the
    aucat case, since everything is actulally supported).

aucat (player):

  - enable ``-m mode'' option  to select between monitoring
    and recording when ``-o file'' is used.

  - plug MIDI code to non-server codepath. The MIDI control
    device is specified with the ``-q device'' option, as in
    server mode.

  - impliment lseek()'ing within files (controlled
    through MIDI). Necessary to use aucat with a MIDI
    sequencer.

midicat (thrubox):

  - rename ``-f'' flag to ``-q'', so it has the
    same name as in aucat (-f is still working)

ok jakemsr@@, tweaks from jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: midicat.1,v 1.8 2010/04/03 17:59:17 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: April 3 2010 $
d104 10
@


1.8
log
@backout last change, committed by mistake, sorry...
@
text
@d1 1
a1 1
.\"	$OpenBSD: midicat.1,v 1.6 2009/10/22 21:14:10 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: October 22 2009 $
a25 1
.Op Fl f Ar device
d28 1
a47 7
.It Fl f Ar device
The
.Xr midi 4
device or
.Nm
socket to use for MIDI input/output.
In server mode, devices are subscribed to the MIDI thru box.
d67 5
@


1.7
log
@doc fixes from jmc
@
text
@d26 1
a28 1
.Op Fl q Ar device
d48 7
a73 5
.It Fl q Ar device
The
.Xr sndio 7
MIDI device to use for MIDI input/output.
In server mode, devices are subscribed to the MIDI thru box.
@


1.6
log
@use .Ux in midicat.1, as we do for aucat.1 now
@
text
@d1 1
a1 1
.\"	$OpenBSD: midicat.1,v 1.5 2009/10/12 17:32:33 sobrado Exp $
d17 1
a17 1
.Dd $Mdocdate: October 12 2009 $
a25 1
.Op Fl f Ar device
d28 1
a47 7
.It Fl f Ar device
The
.Xr midi 4
device or
.Nm
socket to use for MIDI input/output.
In server mode, devices are subscribed to the MIDI thru box.
d67 5
@


1.5
log
@sort flags in description.
@
text
@d1 1
a1 1
.\"	$OpenBSD: midicat.1,v 1.4 2009/10/05 07:05:24 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: October 5 2009 $
d61 3
a63 1
Listen for incoming connections on Unix domain sockets.
@


1.4
log
@add -d flag. When started in server mode, if the -d flag is
used aucat and midicat don't daemonize and log on stderr.
@
text
@d1 1
a1 1
.\"	$OpenBSD: midicat.1,v 1.3 2009/09/27 11:51:20 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: September 27 2009 $
d42 6
a54 6
.It Fl d
Do not daemonize.
If this option is specified,
.Nm
will run in the foreground and log to
.Em stderr .
@


1.3
log
@remove all debug traces
@
text
@d1 1
a1 1
.\"	$OpenBSD: midicat.1,v 1.2 2009/08/17 15:07:49 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: August 17 2009 $
d25 1
a25 1
.Op Fl l
d49 6
@


1.2
log
@if one or more MIDI devices are specified in server mode, subscribe
them to the MIDI thru box
@
text
@d1 1
a1 1
.\"	$OpenBSD: midicat.1,v 1.1 2009/07/25 08:44:27 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: July 25 2009 $
a81 5
If sent
.Dv SIGUSR1
or
.Dv SIGUSR2 ,
it increases or decreases debug level, respectively.
a116 6
.Sh ENVIRONMENT
.Bl -tag -width "MIDICAT_DEBUGXXX" -compact
.It Ev MIDICAT_DEBUG
The debug level:
may be a value between 0 and 4.
.El
@


1.1
log
@Currently midi capable programs can control midi hardware, but
cannot cooperate with other programs.  The aim of this change is
to allow any program to send midi data to other programs as they
were midi hardware. For instance, this change should solve the
longstanding problem of using a midi sequencer with software
synthesizers. More precisely:

 - new midicat(1) utility (actually hardlink to aucat(1)).
   it creates software midi thru boxes, allowing programs
   to send midi messages to other programs as they were
   midi(4) hardware.

 - new midi api in libsndio (see mio_open(3)), to access
   midi(4) devices and midicat(1) sockets in a uniform way.

 - new device naming scheme <service>:<unit>[.<option>],
   common to audio and midi.

 - new sndio(7) manual describing concepts and naming

The current audio device naming still works, but people having
scripts or configuration files containing device names could read
the sndio(7) man page and slowly start updating device names.

discussed with jakemsr@@ and deraadt@@, help form jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d17 1
a17 1
.Dd $Mdocdate: July 17 2009 $
d48 1
d50 1
a50 1
Send contents of this to the device.
@

