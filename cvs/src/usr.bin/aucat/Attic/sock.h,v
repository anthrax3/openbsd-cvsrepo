head	1.22;
access;
symbols
	OPENBSD_5_4:1.21.0.4
	OPENBSD_5_4_BASE:1.21
	OPENBSD_5_3:1.21.0.2
	OPENBSD_5_3_BASE:1.21
	OPENBSD_5_2:1.20.0.2
	OPENBSD_5_2_BASE:1.20
	OPENBSD_5_1_BASE:1.19
	OPENBSD_5_1:1.19.0.4
	OPENBSD_5_0:1.19.0.2
	OPENBSD_5_0_BASE:1.19
	OPENBSD_4_9:1.18.0.2
	OPENBSD_4_9_BASE:1.18
	OPENBSD_4_8:1.17.0.2
	OPENBSD_4_8_BASE:1.17
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.6.0.4
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.5.0.2
	OPENBSD_4_5_BASE:1.5;
locks; strict;
comment	@ * @;


1.22
date	2013.11.12.06.47.34;	author ratchov;	state dead;
branches;
next	1.21;

1.21
date	2012.11.02.10.24.58;	author ratchov;	state Exp;
branches;
next	1.20;

1.20
date	2012.04.11.06.05.43;	author ratchov;	state Exp;
branches;
next	1.19;

1.19
date	2011.04.28.06.19.57;	author ratchov;	state Exp;
branches;
next	1.18;

1.18
date	2010.10.21.18.57.42;	author ratchov;	state Exp;
branches;
next	1.17;

1.17
date	2010.06.05.12.45.48;	author ratchov;	state Exp;
branches;
next	1.16;

1.16
date	2010.06.04.06.15.28;	author ratchov;	state Exp;
branches;
next	1.15;

1.15
date	2010.04.06.20.07.01;	author ratchov;	state Exp;
branches;
next	1.14;

1.14
date	2010.04.03.17.59.17;	author ratchov;	state Exp;
branches;
next	1.13;

1.13
date	2010.04.03.17.40.33;	author ratchov;	state Exp;
branches;
next	1.12;

1.12
date	2010.01.15.22.17.44;	author ratchov;	state Exp;
branches;
next	1.11;

1.11
date	2009.09.27.11.51.20;	author ratchov;	state Exp;
branches;
next	1.10;

1.10
date	2009.08.26.06.10.15;	author ratchov;	state Exp;
branches;
next	1.9;

1.9
date	2009.08.21.16.48.03;	author ratchov;	state Exp;
branches;
next	1.8;

1.8
date	2009.07.25.10.52.19;	author ratchov;	state Exp;
branches;
next	1.7;

1.7
date	2009.07.25.08.44.27;	author ratchov;	state Exp;
branches;
next	1.6;

1.6
date	2009.05.16.12.20.31;	author ratchov;	state Exp;
branches;
next	1.5;

1.5
date	2009.02.06.08.29.35;	author ratchov;	state Exp;
branches;
next	1.4;

1.4
date	2008.11.16.18.34.56;	author ratchov;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.16.16.30.22;	author ratchov;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.11.19.21.20;	author ratchov;	state Exp;
branches;
next	1.1;

1.1
date	2008.10.26.08.49.44;	author ratchov;	state Exp;
branches;
next	;


desc
@@


1.22
log
@remove bogus legacy server-specific bits that cause confusion
@
text
@/*	$OpenBSD: sock.h,v 1.21 2012/11/02 10:24:58 ratchov Exp $	*/
/*
 * Copyright (c) 2008 Alexandre Ratchov <alex@@caoua.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
#ifndef SOCK_H
#define SOCK_H

#include "amsg.h"
#include "aparams.h"
#include "pipe.h"

struct opt;

struct sock {
	struct pipe pipe;
	/*
	 * Socket and protocol specific stuff, mainly used
	 * to decode/encode messages in the stream.
	 */
	struct amsg rmsg, wmsg;		/* messages being sent/received */
	unsigned int wmax;		/* max frames we're allowed to write */
	unsigned int rmax;		/* max frames we're allowed to read */
	unsigned int rtodo;		/* input bytes not read yet */
	unsigned int wtodo;		/* output bytes not written yet */
#define SOCK_RDATA	0		/* data chunk being read */
#define SOCK_RMSG	1		/* amsg query being processed */
#define SOCK_RRET	2		/* amsg reply being returned */
	unsigned int rstate;		/* state of the read-end FSM */
#define SOCK_WIDLE	0		/* nothing to do */
#define SOCK_WMSG	1		/* amsg being written */
#define SOCK_WDATA	2		/* data chunk being written */
	unsigned int wstate;		/* state of the write-end FSM */
#define SOCK_AUTH	0		/* waiting for AUTH message */
#define SOCK_HELLO	1		/* waiting for HELLO message */
#define SOCK_INIT	2		/* parameter negotiation */
#define SOCK_START	3		/* filling play buffers */
#define SOCK_READY	4		/* play buffers full */
#define SOCK_RUN	5		/* attached to the mix / sub */
#define SOCK_STOP	6		/* draining rec buffers */
#define SOCK_MIDI	7		/* raw byte stream (midi) */
	unsigned int pstate;		/* one of the above */
	unsigned int mode;		/* bitmask of MODE_XXX */
	struct aparams rpar;		/* read (ie play) parameters */
	struct aparams wpar;		/* write (ie rec) parameters */
	int delta;			/* pos. change to send */
	int tickpending;		/* delta waiting to be transmitted */
	int fillpending;		/* pending buffer fill request */
	unsigned int walign;		/* align data packets to this */
	unsigned int bufsz;		/* total buffer size */
	unsigned int round;		/* block size */
	unsigned int xrun;		/* one of AMSG_IGNORE, ... */
	int vol;			/* requested volume */
	int lastvol;			/* last volume */
	int slot;			/* mixer ctl slot number */
	struct opt *opt;		/* "subdevice" definition */
	struct dev *dev;		/* actual hardware device */
	char who[12];			/* label, mostly for debugging */
};

struct sock *sock_new(struct fileops *, int fd);
extern struct fileops sock_ops;

#endif /* !defined(SOCK_H) */
@


1.21
log
@Use dedicated messages for flow control instead of abusing clock tick
messages and enable flow control for MIDI. Since this requires protocol
version bump, both sndiod and libsndio must be kept up to date to work
together.
@
text
@d1 1
a1 1
/*	$OpenBSD: sock.h,v 1.20 2012/04/11 06:05:43 ratchov Exp $	*/
@


1.20
log
@Use "unsigned int" rather than "unsigned". No object change.
suggested by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sock.h,v 1.19 2011/04/28 06:19:57 ratchov Exp $	*/
a57 1
	int startpos;			/* initial pos. to send */
d59 1
a59 1
	int startpending;		/* initial delta waiting to be transmitted */
@


1.19
log
@Implement a new authentication method allowing aucat and midicat to
work over TCP, for instance, to expose the sound card of one machine
with other machines of the network.

The first client generates a 128-bit random number (aka the
session cookie), saves it in $HOME/.aucat_cookie and sends it to the
server. Successive clients load the cookie from $HOME/.aucat_cookie
and send it to the server but the server accepts only clients whose
cookie matches the session cookie. When all clients are gone, the
session is over, and another cookie could start a new session, and so
on.

TCP is enabled on the server with the new -L option, and on the client
side hostnames are specified with a new optional component in the
device name.

hints from damien, dlg and deraadt, tweaks from jmc
@
text
@d1 1
a1 1
/*	$OpenBSD: sock.h,v 1.18 2010/10/21 18:57:42 ratchov Exp $	*/
d33 4
a36 4
	unsigned wmax;			/* max frames we're allowed to write */
	unsigned rmax;			/* max frames we're allowed to read */
	unsigned rtodo;			/* input bytes not read yet */
	unsigned wtodo;			/* output bytes not written yet */
d40 1
a40 1
	unsigned rstate;		/* state of the read-end FSM */
d44 1
a44 1
	unsigned wstate;		/* state of the write-end FSM */
d53 2
a54 2
	unsigned pstate;		/* one of the above */
	unsigned mode;			/* bitmask of MODE_XXX */
d61 4
a64 4
	unsigned walign;		/* align data packets to this */
	unsigned bufsz;			/* total buffer size */
	unsigned round;			/* block size */
	unsigned xrun;			/* one of AMSG_IGNORE, ... */
@


1.18
log
@use MODE_xxx and XRUN_xxx macros everywhere, and zap corresponding
AMSG_xxx macros, which in turns simplifies the code
@
text
@d1 1
a1 1
/*	$OpenBSD: sock.h,v 1.17 2010/06/05 12:45:48 ratchov Exp $	*/
d45 8
a52 7
#define SOCK_HELLO	0		/* waiting for HELLO message */
#define SOCK_INIT	1		/* parameter negotiation */
#define SOCK_START	2		/* filling play buffers */
#define SOCK_READY	3		/* play buffers full */
#define SOCK_RUN	4		/* attached to the mix / sub */
#define SOCK_STOP	5		/* draining rec buffers */
#define SOCK_MIDI	6		/* raw byte stream (midi) */
@


1.17
log
@Don't send the initial position as a clock tick with a negative delta.
Add a new ``initial position'' message which is simpler. No bahaviour
change, except effects of the protocol version crank.
@
text
@d1 1
a1 1
/*	$OpenBSD: sock.h,v 1.16 2010/06/04 06:15:28 ratchov Exp $	*/
d53 1
a53 1
	unsigned mode;			/* a set of AMSG_PLAY, AMSG_REC */
@


1.16
log
@Allow the audio device to be opened only while it's actually used.
This is necessary for uaudio devices, for instance to start aucat
before the device is plugged. Or to unplug a device whithout
having to restart aucat when another device is plugged.  This is
controlled with the new -a option.

Allow multiple audio devices to be used concurently, i.e.
multiple ``-f devname'' options to be used; -f options must follow
per-device options, which is what we do for other options.
@
text
@d1 1
a1 1
/*	$OpenBSD: sock.h,v 1.15 2010/04/06 20:07:01 ratchov Exp $	*/
d57 1
@


1.15
log
@aucat (server):

  - make the ``-m mode'' option per subdevice, allowing
    subdevices to be play-only or rec-only even if the
    server is full-duplex

  - add ``monitoring'' mode (with ``-m mon''). This is a
    record-only stream from which played streams can be
    recorded (kind of ``record what you hear'').

  - allow MIDI devices to be subscribed to the controlling
    MIDI port of the server, ie what midicat does (with -f
    option), but using the -q option.

  - add flow control to the protocol, and serialize clock
    ticks (sio_onmove() calls) and data chunks.  This should
    fix certain full-duplex programs, broken with ``magic''
    block/buffer size combinations.

  - enable 3 block latency which is the minimum theoretical.
    Make -z and -b options correspond to device parameters.

  - make sio_getcap(3) the same for aucat and sun backends,
    ie return whatever is supported (``everything'' in the
    aucat case, since everything is actulally supported).

aucat (player):

  - enable ``-m mode'' option  to select between monitoring
    and recording when ``-o file'' is used.

  - plug MIDI code to non-server codepath. The MIDI control
    device is specified with the ``-q device'' option, as in
    server mode.

  - impliment lseek()'ing within files (controlled
    through MIDI). Necessary to use aucat with a MIDI
    sequencer.

midicat (thrubox):

  - rename ``-f'' flag to ``-q'', so it has the
    same name as in aucat (-f is still working)

ok jakemsr@@, tweaks from jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sock.h,v 1.14 2010/04/03 17:59:17 ratchov Exp $	*/
d67 1
@


1.14
log
@backout last change, committed by mistake, sorry...
@
text
@d1 1
a1 1
/*	$OpenBSD: sock.h,v 1.12 2010/01/15 22:17:44 ratchov Exp $	*/
d33 2
d48 4
a51 2
#define SOCK_RUN	3		/* attached to the mix / sub */
#define SOCK_MIDI	4		/* raw byte stream (midi) */
d58 1
@


1.13
log
@doc fixes from jmc
@
text
@a32 2
	unsigned wmax;			/* max frames we're allowed to write */
	unsigned rmax;			/* max frames we're allowed to read */
d46 2
a47 4
#define SOCK_READY	3		/* play buffers full */
#define SOCK_RUN	4		/* attached to the mix / sub */
#define SOCK_STOP	5		/* draining rec buffers */
#define SOCK_MIDI	6		/* raw byte stream (midi) */
a53 1
	int startpending;		/* initial delta waiting to be transmitted */
@


1.12
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*	$OpenBSD: sock.h,v 1.11 2009/09/27 11:51:20 ratchov Exp $	*/
d33 2
d48 4
a51 2
#define SOCK_RUN	3		/* attached to the mix / sub */
#define SOCK_MIDI	4		/* raw byte stream (midi) */
d58 1
@


1.11
log
@remove all debug traces
@
text
@d1 1
a1 1
/*	$OpenBSD: sock.h,v 1.10 2009/08/26 06:10:15 ratchov Exp $	*/
d54 1
@


1.10
log
@don't mess with audio internals from within the midi bits. Instead
use a call-back interface. This allows easily sending volume changes
feedback to audio applications.
@
text
@d1 1
a1 1
/*	$OpenBSD: sock.h,v 1.9 2009/08/21 16:48:03 ratchov Exp $	*/
d61 1
@


1.9
log
@make aucat(1) expose a MIDI device to control server behaviour in
realtime.  For now only the playback volume of individual streams can be
changed/monitored. To each stream is assigned a MIDI channel; the volume
is changed/monitored using the standard controller number 7.
@
text
@d1 1
a1 1
/*	$OpenBSD: sock.h,v 1.8 2009/07/25 10:52:19 ratchov Exp $	*/
d58 1
@


1.8
log
@fix comments, remove no longer needed declaration, reorder includes
from Thomas Pfaff
@
text
@d1 1
a1 1
/*	$OpenBSD: sock.h,v 1.7 2009/07/25 08:44:27 ratchov Exp $	*/
d58 1
@


1.7
log
@Currently midi capable programs can control midi hardware, but
cannot cooperate with other programs.  The aim of this change is
to allow any program to send midi data to other programs as they
were midi hardware. For instance, this change should solve the
longstanding problem of using a midi sequencer with software
synthesizers. More precisely:

 - new midicat(1) utility (actually hardlink to aucat(1)).
   it creates software midi thru boxes, allowing programs
   to send midi messages to other programs as they were
   midi(4) hardware.

 - new midi api in libsndio (see mio_open(3)), to access
   midi(4) devices and midicat(1) sockets in a uniform way.

 - new device naming scheme <service>:<unit>[.<option>],
   common to audio and midi.

 - new sndio(7) manual describing concepts and naming

The current audio device naming still works, but people having
scripts or configuration files containing device names could read
the sndio(7) man page and slowly start updating device names.

discussed with jakemsr@@ and deraadt@@, help form jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sock.h,v 1.6 2009/05/16 12:20:31 ratchov Exp $	*/
d20 2
a22 2
#include "aparams.h"
#include "amsg.h"
d29 1
a29 1
	 * socket and protocol specific stuff, mainly used
@


1.6
log
@use the ``hello'' message a to set the device mode, and thus make
it mandatory. Old legacy clients setting the mode with sio_setpar()
are still working thanks to small hack.
@
text
@d1 1
a1 1
/*	$OpenBSD: sock.h,v 1.5 2009/02/06 08:29:35 ratchov Exp $	*/
d24 2
d47 1
d58 1
a58 3
	int maxweight;			/* max dynamic range */
	struct aparams templ_rpar;	/* template for rpar */
	struct aparams templ_wpar;	/* template for wpar */
d61 1
a61 2
struct sock *sock_new(struct fileops *, int fd, char *,
    struct aparams *, struct aparams *, int);
@


1.5
log
@simplify the clock tick messages generation code and ensuire that
the first clock tick (ie the start tick) is not lost
@
text
@d1 1
a1 1
/*	$OpenBSD: sock.h,v 1.4 2008/11/16 18:34:56 ratchov Exp $	*/
d41 4
a44 3
#define SOCK_INIT	0		/* parameter negotiation */
#define SOCK_START	1		/* filling play buffers */
#define SOCK_RUN	2		/* attached to the mix / sub */
@


1.4
log
@add ``template'' parameters to sockets rather than using device
parameters. No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: sock.h,v 1.3 2008/11/16 16:30:22 ratchov Exp $	*/
d48 2
a49 2
	int idelta;			/* input (rec) pos. change to send */
	int odelta;			/* output (play) pos. change to send */
@


1.3
log
@Make clients inherit the volume parameter when the -v option is used in
server mode. It gives the maximum volume a client may have. This wastes
dynamic range, but allows volume to stay constant when other clients
connect or disconnect.
@
text
@d1 1
a1 1
/*	$OpenBSD: sock.h,v 1.2 2008/11/11 19:21:20 ratchov Exp $	*/
d55 2
d59 2
a60 1
struct sock *sock_new(struct fileops *, int fd, char *, int);
@


1.2
log
@expose the volume knob in server mode too
@
text
@d1 1
a1 1
/*	$OpenBSD: sock.h,v 1.1 2008/10/26 08:49:44 ratchov Exp $	*/
d53 2
a54 1
	unsigned vol;
d57 1
a57 1
struct sock *sock_new(struct fileops *, int fd, char *);
@


1.1
log
@add minimal server capability to aucat(1). When started in server
mode, it listens on an unix socket and mixes/demultiplexes any number
of full-duplex streams, doing necessary format conversions and
resampling on the fly.

programs can use the new libsa(3) library to play and record audio.
The library provides a very simple API to connect to the audio server;
if aucat(1) isn't running, it uses the audio(4) driver transparently
instead.
@
text
@d1 1
a1 1
/*	$OpenBSD: file.h,v 1.3 2008/08/14 09:58:55 ratchov Exp $	*/
d53 1
@

