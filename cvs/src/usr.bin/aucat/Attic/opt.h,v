head	1.13;
access;
symbols
	OPENBSD_5_4:1.12.0.6
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.4
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.2
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.2
	OPENBSD_5_0:1.9.0.4
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.2
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.8.0.2
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2;
locks; strict;
comment	@ * @;


1.13
date	2013.11.12.06.47.34;	author ratchov;	state dead;
branches;
next	1.12;

1.12
date	2012.04.11.06.05.43;	author ratchov;	state Exp;
branches;
next	1.11;

1.11
date	2011.11.15.08.05.22;	author ratchov;	state Exp;
branches;
next	1.10;

1.10
date	2011.10.12.07.20.04;	author ratchov;	state Exp;
branches;
next	1.9;

1.9
date	2010.10.21.18.57.42;	author ratchov;	state Exp;
branches;
next	1.8;

1.8
date	2010.06.04.06.15.28;	author ratchov;	state Exp;
branches;
next	1.7;

1.7
date	2010.05.02.11.54.26;	author ratchov;	state Exp;
branches;
next	1.6;

1.6
date	2010.04.21.06.13.07;	author ratchov;	state Exp;
branches;
next	1.5;

1.5
date	2010.04.06.20.07.01;	author ratchov;	state Exp;
branches;
next	1.4;

1.4
date	2010.04.03.17.59.17;	author ratchov;	state Exp;
branches;
next	1.3;

1.3
date	2010.04.03.17.40.33;	author ratchov;	state Exp;
branches;
next	1.2;

1.2
date	2009.11.03.21.31.37;	author ratchov;	state Exp;
branches;
next	1.1;

1.1
date	2009.07.25.08.44.27;	author ratchov;	state Exp;
branches;
next	;


desc
@@


1.13
log
@remove bogus legacy server-specific bits that cause confusion
@
text
@/*	$OpenBSD: opt.h,v 1.12 2012/04/11 06:05:43 ratchov Exp $	*/
/*
 * Copyright (c) 2008 Alexandre Ratchov <alex@@caoua.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
#ifndef OPT_H
#define OPT_H

#include <sys/queue.h>
#include "aparams.h"

struct dev;

struct opt {
	struct opt *next;
#define OPT_NAMEMAX 11
	char name[OPT_NAMEMAX + 1];
	int maxweight;		/* max dynamic range for clients */
	struct aparams wpar;	/* template for clients write params */
	struct aparams rpar;	/* template for clients read params */
	int mmc;		/* true if MMC control enabled */
	int join;		/* true if join/expand enabled */
	unsigned int mode;	/* bitmap of MODE_XXX */
	struct dev *dev;	/* device to which we're attached */
};

extern struct opt *opt_list;

struct opt *opt_new(char *, struct dev *, struct aparams *, struct aparams *,
    int, int, int, unsigned int);
int opt_bind(struct opt *);
struct opt *opt_byname(char *, unsigned int);

#endif /* !defined(OPT_H) */
@


1.12
log
@Use "unsigned int" rather than "unsigned". No object change.
suggested by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: opt.h,v 1.11 2011/11/15 08:05:22 ratchov Exp $	*/
@


1.11
log
@Add a "device number" component in sndio(7) device names, allowing a
single aucat instance to handle all audio and MIDI services. Since
this partially breaks compatibility, this is a opportunitiy to fix few
other design mistakes (eg ':' being used by inet6, type name vs api
name confusion, etc..). This leads to the following names:

        type[@@hostname][,unit]/devnum[.option]

The device number is the minor device number for direct hardware
access (ie the 'N' in /dev/audioN). For aucat, this is the occurence
number of the -f (or -M) option.

There's a compatibility hook to keep old names working if only one
aucat server is running.
@
text
@d1 1
a1 1
/*	$OpenBSD: opt.h,v 1.10 2011/10/12 07:20:04 ratchov Exp $	*/
d34 1
a34 1
	unsigned mode;		/* bitmap of MODE_XXX */
d41 1
a41 1
    int, int, int, unsigned);
d43 1
a43 1
struct opt *opt_byname(char *, unsigned);
@


1.10
log
@Simplify and improve the way options are parsed and remove ~300 lines
of code that becomes unused. Few command line arguments changes are
required though:

  - stream definitions (-ios) now must follow devices definitions they
    are attached to (-fMn)

  - the -n option is now a special "loopback" device and is thus used
    like -f, eg it must precede streams

  - in midicat, midi thru boxes are not created automatically anymore,
    the new "-M" option must be used for that

  - channel numbers (-Cc options) correspond always to channel numbers
    of the hardware.

  - the -u option isn't needed anymore

  - increase the log verbosity so user errors are logged
    without using -d

tested by many, help from jmc
@
text
@d1 1
a1 1
/*	$OpenBSD: opt.h,v 1.9 2010/10/21 18:57:42 ratchov Exp $	*/
d43 1
a43 1
struct opt *opt_byname(char *);
@


1.9
log
@use MODE_xxx and XRUN_xxx macros everywhere, and zap corresponding
AMSG_xxx macros, which in turns simplifies the code
@
text
@d1 1
a1 1
/*	$OpenBSD: opt.h,v 1.8 2010/06/04 06:15:28 ratchov Exp $	*/
d26 1
a26 1
	SLIST_ENTRY(opt) entry;
d38 1
a38 1
SLIST_HEAD(optlist,opt);
d40 1
a40 1
void opt_new(char *, struct dev *, struct aparams *, struct aparams *,
d42 1
@


1.8
log
@Allow the audio device to be opened only while it's actually used.
This is necessary for uaudio devices, for instance to start aucat
before the device is plugged. Or to unplug a device whithout
having to restart aucat when another device is plugged.  This is
controlled with the new -a option.

Allow multiple audio devices to be used concurently, i.e.
multiple ``-f devname'' options to be used; -f options must follow
per-device options, which is what we do for other options.
@
text
@d1 1
a1 1
/*	$OpenBSD: opt.h,v 1.7 2010/05/02 11:54:26 ratchov Exp $	*/
d34 1
a34 10
#define MODE_PLAY	0x1	/* allowed to play */
#define MODE_REC	0x2	/* allowed to rec */
#define MODE_MIDIIN	0x4	/* allowed to read midi */
#define MODE_MIDIOUT	0x8	/* allowed to write midi */
#define MODE_MON	0x10	/* allowed to monitor */
#define MODE_LOOP	0x20	/* deviceless mode */
#define MODE_RECMASK	(MODE_REC | MODE_MON)
#define MODE_AUDIOMASK	(MODE_REC | MODE_MON | MODE_PLAY)
#define MODE_MIDIMASK	(MODE_MIDIIN | MODE_MIDIOUT)
	unsigned mode;		/* bitmap of above */
@


1.7
log
@Clean up device handling code to clarify different initialization phases
and different device states. Split initialization in two phases:
first global variables are initialized then the audio hardware is opened.
Allow devices that don't support full-duplex to work in play-only or
record-only mode, even if ``-m play'' or ``-m rec'' are not specified.
@
text
@d1 1
a1 1
/*	$OpenBSD: opt.h,v 1.6 2010/04/21 06:13:07 ratchov Exp $	*/
d23 2
d41 2
d44 1
d49 1
a49 1
void opt_new(char *, struct aparams *, struct aparams *,
@


1.6
log
@adds the necessary bits to join channels (ex stereo->mono) or
expand channels (ex mono->stereo).  It's switched on/off with
the ``-j'' option, (default is "on").
@
text
@d1 1
a1 1
/*	$OpenBSD: opt.h,v 1.5 2010/04/06 20:07:01 ratchov Exp $	*/
d37 1
@


1.5
log
@aucat (server):

  - make the ``-m mode'' option per subdevice, allowing
    subdevices to be play-only or rec-only even if the
    server is full-duplex

  - add ``monitoring'' mode (with ``-m mon''). This is a
    record-only stream from which played streams can be
    recorded (kind of ``record what you hear'').

  - allow MIDI devices to be subscribed to the controlling
    MIDI port of the server, ie what midicat does (with -f
    option), but using the -q option.

  - add flow control to the protocol, and serialize clock
    ticks (sio_onmove() calls) and data chunks.  This should
    fix certain full-duplex programs, broken with ``magic''
    block/buffer size combinations.

  - enable 3 block latency which is the minimum theoretical.
    Make -z and -b options correspond to device parameters.

  - make sio_getcap(3) the same for aucat and sun backends,
    ie return whatever is supported (``everything'' in the
    aucat case, since everything is actulally supported).

aucat (player):

  - enable ``-m mode'' option  to select between monitoring
    and recording when ``-o file'' is used.

  - plug MIDI code to non-server codepath. The MIDI control
    device is specified with the ``-q device'' option, as in
    server mode.

  - impliment lseek()'ing within files (controlled
    through MIDI). Necessary to use aucat with a MIDI
    sequencer.

midicat (thrubox):

  - rename ``-f'' flag to ``-q'', so it has the
    same name as in aucat (-f is still working)

ok jakemsr@@, tweaks from jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: opt.h,v 1.4 2010/04/03 17:59:17 ratchov Exp $	*/
d31 1
d43 2
a44 1
void opt_new(char *, struct aparams *, struct aparams *, int, int, unsigned);
@


1.4
log
@backout last change, committed by mistake, sorry...
@
text
@d1 1
a1 1
/*	$OpenBSD: opt.h,v 1.2 2009/11/03 21:31:37 ratchov Exp $	*/
d31 7
d42 1
a42 1
void opt_new(char *, struct aparams *, struct aparams *, int, int);
@


1.3
log
@doc fixes from jmc
@
text
@a30 7
#define MODE_PLAY	0x1	/* allowed to play */
#define MODE_REC	0x2	/* allowed to rec */
#define MODE_MIDIIN	0x4	/* allowed to read midi */
#define MODE_MIDIOUT	0x8	/* allowed to write midi */
#define MODE_MON	0x10	/* allowed to monitor */
#define MODE_RECMASK	(MODE_REC | MODE_MON)
	unsigned mode;		/* bitmap of above */
d35 1
a35 1
void opt_new(char *, struct aparams *, struct aparams *, int, int, unsigned);
@


1.2
log
@Allow any program using aucat to act as MMC slave and MTC master
transparently.  Multiple audio applications can be started
synchronously from external software/hardware supporting the
standard Start/Stop/Relocate messages. The server clock is exposed
through MTC, allowing non-audio software/hardware to be
synchronized to audio applications.
@
text
@d1 1
a1 1
/*	$OpenBSD: opt.h,v 1.1 2009/07/25 08:44:27 ratchov Exp $	*/
d31 7
d42 1
a42 1
void opt_new(char *, struct aparams *, struct aparams *, int, int);
@


1.1
log
@Currently midi capable programs can control midi hardware, but
cannot cooperate with other programs.  The aim of this change is
to allow any program to send midi data to other programs as they
were midi hardware. For instance, this change should solve the
longstanding problem of using a midi sequencer with software
synthesizers. More precisely:

 - new midicat(1) utility (actually hardlink to aucat(1)).
   it creates software midi thru boxes, allowing programs
   to send midi messages to other programs as they were
   midi(4) hardware.

 - new midi api in libsndio (see mio_open(3)), to access
   midi(4) devices and midicat(1) sockets in a uniform way.

 - new device naming scheme <service>:<unit>[.<option>],
   common to audio and midi.

 - new sndio(7) manual describing concepts and naming

The current audio device naming still works, but people having
scripts or configuration files containing device names could read
the sndio(7) man page and slowly start updating device names.

discussed with jakemsr@@ and deraadt@@, help form jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d30 1
d35 1
a35 1
void opt_new(char *, struct aparams *, struct aparams *, int);
@

