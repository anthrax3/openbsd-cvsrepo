head	1.113;
access;
symbols
	OPENBSD_6_1:1.113.0.4
	OPENBSD_6_1_BASE:1.113
	OPENBSD_6_0:1.113.0.2
	OPENBSD_6_0_BASE:1.113
	OPENBSD_5_9:1.112.0.2
	OPENBSD_5_9_BASE:1.112
	OPENBSD_5_8:1.108.0.6
	OPENBSD_5_8_BASE:1.108
	OPENBSD_5_7:1.108.0.2
	OPENBSD_5_7_BASE:1.108
	OPENBSD_5_6:1.106.0.6
	OPENBSD_5_6_BASE:1.106
	OPENBSD_5_5:1.106.0.4
	OPENBSD_5_5_BASE:1.106
	OPENBSD_5_4:1.102.0.4
	OPENBSD_5_4_BASE:1.102
	OPENBSD_5_3:1.102.0.2
	OPENBSD_5_3_BASE:1.102
	OPENBSD_5_2:1.101.0.2
	OPENBSD_5_2_BASE:1.101
	OPENBSD_5_1_BASE:1.97
	OPENBSD_5_1:1.97.0.2
	OPENBSD_5_0:1.86.0.2
	OPENBSD_5_0_BASE:1.86
	OPENBSD_4_9:1.73.0.4
	OPENBSD_4_9_BASE:1.73
	OPENBSD_4_8:1.73.0.2
	OPENBSD_4_8_BASE:1.73
	OPENBSD_4_7:1.63.0.2
	OPENBSD_4_7_BASE:1.63
	OPENBSD_4_6:1.53.0.4
	OPENBSD_4_6_BASE:1.53
	OPENBSD_4_5:1.47.0.2
	OPENBSD_4_5_BASE:1.47
	OPENBSD_4_4:1.25.0.2
	OPENBSD_4_4_BASE:1.25
	OPENBSD_4_3:1.15.0.4
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.2
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.12.0.12
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.10
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.8
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.6
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.4
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.12.0.2
	OPENBSD_3_6_BASE:1.12
	OPENBSD_3_5:1.11.0.12
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.10
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.11.0.8
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.6
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.11.0.4
	OPENBSD_3_1_BASE:1.11
	OPENBSD_3_0:1.11.0.2
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9_BASE:1.10
	OPENBSD_2_9:1.10.0.2
	OPENBSD_2_8:1.9.0.2
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.8.0.2
	OPENBSD_2_7_BASE:1.8
	OPENBSD_2_6:1.7.0.2
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.4.0.4
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2;
locks; strict;
comment	@# @;


1.113
date	2016.06.07.06.26.24;	author ratchov;	state Exp;
branches;
next	1.112;
commitid	BbbvMARVpsdeNJqE;

1.112
date	2016.01.07.07.41.01;	author ratchov;	state Exp;
branches;
next	1.111;
commitid	pYtvupOMgjtQxXte;

1.111
date	2015.12.25.20.52.00;	author bentley;	state Exp;
branches;
next	1.110;
commitid	h5QsvQaTPTyeQDfp;

1.110
date	2015.10.17.21.11.42;	author jmc;	state Exp;
branches;
next	1.109;
commitid	qN7zHArys9wMHwGL;

1.109
date	2015.09.14.18.06.28;	author schwarze;	state Exp;
branches;
next	1.108;
commitid	NRJrZR3T2EdfkGYJ;

1.108
date	2015.01.21.09.21.05;	author jmc;	state Exp;
branches;
next	1.107;
commitid	QiWW890QTGETe8Ep;

1.107
date	2015.01.21.08.43.55;	author ratchov;	state Exp;
branches;
next	1.106;
commitid	SYQcoS9jhSKqSJDL;

1.106
date	2014.02.08.15.18.54;	author ratchov;	state Exp;
branches;
next	1.105;

1.105
date	2014.01.28.06.25.57;	author ratchov;	state Exp;
branches;
next	1.104;

1.104
date	2014.01.28.06.20.51;	author ratchov;	state Exp;
branches;
next	1.103;

1.103
date	2013.11.12.06.47.34;	author ratchov;	state Exp;
branches;
next	1.102;

1.102
date	2012.12.03.15.35.25;	author ratchov;	state Exp;
branches;
next	1.101;

1.101
date	2012.04.25.07.18.45;	author jmc;	state Exp;
branches;
next	1.100;

1.100
date	2012.04.04.23.28.40;	author jmc;	state Exp;
branches;
next	1.99;

1.99
date	2012.04.04.11.31.39;	author ratchov;	state Exp;
branches;
next	1.98;

1.98
date	2012.03.23.11.59.54;	author ratchov;	state Exp;
branches;
next	1.97;

1.97
date	2012.02.09.18.33.36;	author ratchov;	state Exp;
branches;
next	1.96;

1.96
date	2012.01.26.09.07.03;	author ratchov;	state Exp;
branches;
next	1.95;

1.95
date	2011.12.09.22.58.50;	author ratchov;	state Exp;
branches;
next	1.94;

1.94
date	2011.12.09.14.36.42;	author ratchov;	state Exp;
branches;
next	1.93;

1.93
date	2011.11.15.09.07.45;	author jmc;	state Exp;
branches;
next	1.92;

1.92
date	2011.11.15.08.05.22;	author ratchov;	state Exp;
branches;
next	1.91;

1.91
date	2011.10.24.21.46.21;	author ratchov;	state Exp;
branches;
next	1.90;

1.90
date	2011.10.18.21.04.26;	author ratchov;	state Exp;
branches;
next	1.89;

1.89
date	2011.10.17.21.09.11;	author ratchov;	state Exp;
branches;
next	1.88;

1.88
date	2011.10.12.12.16.10;	author jmc;	state Exp;
branches;
next	1.87;

1.87
date	2011.10.12.07.20.03;	author ratchov;	state Exp;
branches;
next	1.86;

1.86
date	2011.06.29.07.39.02;	author ratchov;	state Exp;
branches;
next	1.85;

1.85
date	2011.06.20.20.18.44;	author ratchov;	state Exp;
branches;
next	1.84;

1.84
date	2011.06.03.16.20.10;	author ratchov;	state Exp;
branches;
next	1.83;

1.83
date	2011.06.03.09.01.14;	author ratchov;	state Exp;
branches;
next	1.82;

1.82
date	2011.05.26.13.30.51;	author jmc;	state Exp;
branches;
next	1.81;

1.81
date	2011.05.26.07.42.21;	author ratchov;	state Exp;
branches;
next	1.80;

1.80
date	2011.05.26.07.18.40;	author ratchov;	state Exp;
branches;
next	1.79;

1.79
date	2011.05.23.07.06.53;	author jmc;	state Exp;
branches;
next	1.78;

1.78
date	2011.05.03.08.00.54;	author ratchov;	state Exp;
branches;
next	1.77;

1.77
date	2011.04.28.07.28.18;	author jmc;	state Exp;
branches;
next	1.76;

1.76
date	2011.04.28.06.19.57;	author ratchov;	state Exp;
branches;
next	1.75;

1.75
date	2011.03.21.16.33.17;	author okan;	state Exp;
branches;
next	1.74;

1.74
date	2011.03.02.22.45.25;	author ratchov;	state Exp;
branches;
next	1.73;

1.73
date	2010.07.31.08.48.01;	author ratchov;	state Exp;
branches;
next	1.72;

1.72
date	2010.07.06.10.45.01;	author jmc;	state Exp;
branches;
next	1.71;

1.71
date	2010.07.06.01.12.45;	author ratchov;	state Exp;
branches;
next	1.70;

1.70
date	2010.06.04.06.15.28;	author ratchov;	state Exp;
branches;
next	1.69;

1.69
date	2010.04.22.17.43.30;	author ratchov;	state Exp;
branches;
next	1.68;

1.68
date	2010.04.21.06.13.07;	author ratchov;	state Exp;
branches;
next	1.67;

1.67
date	2010.04.07.06.47.52;	author jmc;	state Exp;
branches;
next	1.66;

1.66
date	2010.04.06.20.07.01;	author ratchov;	state Exp;
branches;
next	1.65;

1.65
date	2010.04.03.17.59.17;	author ratchov;	state Exp;
branches;
next	1.64;

1.64
date	2010.04.03.17.40.33;	author ratchov;	state Exp;
branches;
next	1.63;

1.63
date	2009.11.04.08.24.58;	author jmc;	state Exp;
branches;
next	1.62;

1.62
date	2009.11.03.21.31.37;	author ratchov;	state Exp;
branches;
next	1.61;

1.61
date	2009.10.22.15.02.12;	author sobrado;	state Exp;
branches;
next	1.60;

1.60
date	2009.10.22.12.35.53;	author sobrado;	state Exp;
branches;
next	1.59;

1.59
date	2009.10.05.07.05.24;	author ratchov;	state Exp;
branches;
next	1.58;

1.58
date	2009.09.27.11.51.20;	author ratchov;	state Exp;
branches;
next	1.57;

1.57
date	2009.08.25.21.37.18;	author ratchov;	state Exp;
branches;
next	1.56;

1.56
date	2009.08.21.21.25.31;	author jmc;	state Exp;
branches;
next	1.55;

1.55
date	2009.08.21.16.48.03;	author ratchov;	state Exp;
branches;
next	1.54;

1.54
date	2009.07.25.08.44.27;	author ratchov;	state Exp;
branches;
next	1.53;

1.53
date	2009.05.09.09.50.40;	author ratchov;	state Exp;
branches;
next	1.52;

1.52
date	2009.04.11.10.24.21;	author jakemsr;	state Exp;
branches;
next	1.51;

1.51
date	2009.04.10.21.18.11;	author jmc;	state Exp;
branches;
next	1.50;

1.50
date	2009.04.10.18.51.44;	author ratchov;	state Exp;
branches;
next	1.49;

1.49
date	2009.03.17.21.26.44;	author jmc;	state Exp;
branches;
next	1.48;

1.48
date	2009.03.17.07.19.13;	author ratchov;	state Exp;
branches;
next	1.47;

1.47
date	2009.02.27.17.35.33;	author ratchov;	state Exp;
branches;
next	1.46;

1.46
date	2009.02.04.18.44.05;	author ratchov;	state Exp;
branches;
next	1.45;

1.45
date	2009.02.03.19.44.58;	author ratchov;	state Exp;
branches;
next	1.44;

1.44
date	2009.01.23.17.52.13;	author ratchov;	state Exp;
branches;
next	1.43;

1.43
date	2009.01.10.22.13.07;	author jmc;	state Exp;
branches;
next	1.42;

1.42
date	2009.01.10.20.02.28;	author ratchov;	state Exp;
branches;
next	1.41;

1.41
date	2008.12.05.07.03.52;	author jmc;	state Exp;
branches;
next	1.40;

1.40
date	2008.11.17.09.40.09;	author jmc;	state Exp;
branches;
next	1.39;

1.39
date	2008.11.17.07.36.43;	author jmc;	state Exp;
branches;
next	1.38;

1.38
date	2008.11.17.07.05.09;	author ratchov;	state Exp;
branches;
next	1.37;

1.37
date	2008.11.17.07.04.13;	author ratchov;	state Exp;
branches;
next	1.36;

1.36
date	2008.11.16.20.46.16;	author ratchov;	state Exp;
branches;
next	1.35;

1.35
date	2008.11.16.20.44.03;	author ratchov;	state Exp;
branches;
next	1.34;

1.34
date	2008.11.16.18.34.04;	author jmc;	state Exp;
branches;
next	1.33;

1.33
date	2008.11.16.16.30.22;	author ratchov;	state Exp;
branches;
next	1.32;

1.32
date	2008.11.11.19.44.19;	author ratchov;	state Exp;
branches;
next	1.31;

1.31
date	2008.11.11.07.47.48;	author jmc;	state Exp;
branches;
next	1.30;

1.30
date	2008.11.10.23.25.37;	author ratchov;	state Exp;
branches;
next	1.29;

1.29
date	2008.11.04.22.20.08;	author ratchov;	state Exp;
branches;
next	1.28;

1.28
date	2008.10.30.18.14.51;	author ratchov;	state Exp;
branches;
next	1.27;

1.27
date	2008.10.26.11.55.22;	author jmc;	state Exp;
branches;
next	1.26;

1.26
date	2008.10.26.08.49.43;	author ratchov;	state Exp;
branches;
next	1.25;

1.25
date	2008.06.03.19.27.42;	author jmc;	state Exp;
branches;
next	1.24;

1.24
date	2008.06.02.23.38.05;	author jmc;	state Exp;
branches;
next	1.23;

1.23
date	2008.06.02.23.18.28;	author jmc;	state Exp;
branches;
next	1.22;

1.22
date	2008.06.02.17.09.51;	author ratchov;	state Exp;
branches;
next	1.21;

1.21
date	2008.05.29.13.53.47;	author jmc;	state Exp;
branches;
next	1.20;

1.20
date	2008.05.26.08.36.35;	author jmc;	state Exp;
branches;
next	1.19;

1.19
date	2008.05.26.08.32.11;	author jmc;	state Exp;
branches;
next	1.18;

1.18
date	2008.05.26.07.56.17;	author jakemsr;	state Exp;
branches;
next	1.17;

1.17
date	2008.05.23.12.56.27;	author jmc;	state Exp;
branches;
next	1.16;

1.16
date	2008.05.23.07.15.46;	author ratchov;	state Exp;
branches;
next	1.15;

1.15
date	2007.05.31.19.20.07;	author jmc;	state Exp;
branches;
next	1.14;

1.14
date	2007.03.21.08.12.59;	author jmc;	state Exp;
branches;
next	1.13;

1.13
date	2007.03.21.00.33.39;	author uwe;	state Exp;
branches;
next	1.12;

1.12
date	2004.07.30.11.43.02;	author jmc;	state Exp;
branches;
next	1.11;

1.11
date	2001.05.01.17.58.01;	author aaron;	state Exp;
branches;
next	1.10;

1.10
date	2000.11.09.17.52.03;	author aaron;	state Exp;
branches;
next	1.9;

1.9
date	2000.07.01.19.54.36;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2000.03.23.21.10.13;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	99.07.04.11.53.51;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	99.07.02.20.11.44;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	99.06.05.01.21.18;	author aaron;	state Exp;
branches;
next	1.4;

1.4
date	98.09.23.04.32.34;	author aaron;	state Exp;
branches;
next	1.3;

1.3
date	98.03.10.04.51.02;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.01.05.19.00.50;	author kstailey;	state Exp;
branches;
next	1.1;

1.1
date	97.01.02.22.12.27;	author kstailey;	state Exp;
branches;
next	;


desc
@@


1.113
log
@Add -g and -p options to control device and file start position.
@
text
@.\"	$OpenBSD: aucat.1,v 1.110 2015/10/17 21:11:42 jmc Exp $
.\"
.\" Copyright (c) 2006 Alexandre Ratchov <alex@@caoua.org>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: October 17 2015 $
.Dt AUCAT 1
.Os
.Sh NAME
.Nm aucat
.Nd audio files manipulation tool
.Sh SYNOPSIS
.Nm aucat
.Op Fl dn
.Op Fl b Ar size
.Op Fl c Ar min : Ns Ar max
.Op Fl e Ar enc
.Op Fl f Ar device
.Op Fl g Ar position
.Op Fl h Ar fmt
.Op Fl i Ar file
.Op Fl j Ar flag
.Op Fl o Ar file
.Op Fl p Ar position
.Op Fl q Ar port
.Op Fl r Ar rate
.Op Fl v Ar volume
.Sh DESCRIPTION
The
.Nm
utility can play, record, mix, and process audio files
on the fly.
During playback,
.Nm
reads audio data concurrently from all played files,
mixes it and plays the result on the device.
Similarly, it stores audio data recorded
from the device into corresponding files.
An
.Em off-line
mode could be used to process audio files without
involving audio hardware.
Processing includes:
.Pp
.Bl -bullet -offset indent -compact
.It
Change the sound encoding.
.It
Route the sound from one channel to another.
.It
Control the per-file playback volume.
.El
.Pp
Finally,
.Nm
can accept MIDI messages usable for:
.Pp
.Bl -bullet -offset indent -compact
.It
Volume control.
.It
Start, stop and relocate playback and recording.
.El
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl b Ar size
The buffer size of the audio device in frames.
Default is 7680.
.It Fl c Ar min : Ns Ar max
The range of audio file channel numbers.
The default is
.Cm 0:1 ,
i.e. stereo.
.It Fl d
Increase log verbosity.
.It Fl e Ar enc
Encoding of the audio file.
The default is
.Va s16 .
Encoding names use the following scheme: signedness
.Po
.Va s
or
.Va u
.Pc
followed
by the precision in bits, the byte-order
.Po
.Va le
or
.Va be
.Pc ,
the number of
bytes per sample, and the alignment
.Po
.Va msb
or
.Va lsb
.Pc .
Only the signedness and the precision are mandatory.
Examples:
.Va u8 , s16le , s24le3 , s24le4lsb .
.It Fl f Ar device
Use this
.Xr sndio 7
audio device.
Device mode and parameters are determined from audio files.
Default is
.Pa default .
.It Fl g Ar position
Go to the given time position and start playback or recording there.
This option is equivalent to an incoming MMC relocate message
with the same position.
The position is expressed as the number of samples (at device sample rate).
.It Fl h Ar fmt
Audio file type.
The following file types are supported:
.Pp
.Bl -tag -width auto -compact
.It Cm raw
Headerless file.
.It Cm wav
Microsoft WAV file format.
.It Cm aiff
Apple's audio interchange file format.
.It Cm au
Sun/NeXT audio file format.
.It Cm auto
Try to guess, depending on the file name.
This is the default.
.El
.It Fl i Ar file
Play this audio file.
If the option argument is
.Sq -
then standard input will be used.
.It Fl j Ar flag
Control whether source channels are joined or expanded if
they don't match the destination number of channels.
If the flag is
.Cm off ,
then each source channel is routed to a single destination channel,
possibly discarding channels.
If the flag is
.Cm on ,
then a single source may be sent to multiple destinations
and multiple sources may be mixed into a single destination.
For instance, this feature could be used to convert
a stereo file into a mono file mixing left and right channels together.
The default is
.Cm off .
.It Fl n
Off-line mode.
Read input files and store the result in the output files,
processing them on the fly.
This mode is useful to mix, demultiplex, resample or re-encode
audio files off-line.
It requires at least one input
.Pq Fl i
and one output
.Pq Fl o .
.It Fl o Ar file
Record into this audio file.
If the option argument is
.Sq -
then standard output will be used.
.It Fl p Ar position
Time offset where the beginning of the file belongs.
The first sample of the file will be played or recorded when the device
reaches the given postion.
The position is expressed as the number of samples (at device sample rate).
.It Fl q Ar port
Control audio device properties through this MIDI port.
This includes per-stream volumes and the ability to
synchronously start, stop and relocate audio files.
.It Fl r Ar rate
Sample rate in Hertz of the audio file.
The default is
.Cm 48000 .
.It Fl v Ar volume
Software volume attenuation of the file to play.
The value must be between 1 and 127,
corresponding to \-42dB and \-0dB attenuation in 1/3dB steps.
The default is 127, i.e. no attenuation.
.El
.Pp
On the command line,
per-file parameters
.Pq Fl cehjrv
must precede the file definition
.Pq Fl io .
.Pp
If
.Nm
is sent
.Dv SIGHUP ,
.Dv SIGINT
or
.Dv SIGTERM ,
it terminates recording to files.
.Sh MIDI CONTROL
.Nm
can be controlled through MIDI
.Pq Fl q
as follows:
a MIDI channel is assigned to each stream, and the volume
is changed using the standard volume controller (number 7).
.Pp
The master volume can be changed using the standard master volume
system exclusive message.
.Pp
All audio files are controlled by the following MMC messages:
.Bl -tag -width relocate -offset indent
.It relocate
All files are relocated to the requested time position.
If it is beyond the end of a file, the file is temporarly
disabled until a valid position is requested.
.It start
Playback and/or recording is started.
.It stop
Playback and/or recording is stopped and all files are rewound
back to the starting position.
.El
.Pp
MIDI control is intended to be used together with
.Xr sndiod 8 .
For instance, the following command will create two devices:
the default
.Va snd/0
and a MMC-controlled one
.Va snd/0.mmc :
.Bd -literal -offset indent
$ sndiod -r 48000 -z 480 -s default -t slave -s mmc
.Ed
.Pp
Programs using
.Va snd/0
behave normally, while programs using
.Va snd/0.mmc
wait for the MMC start signal and start synchronously.
Then, the following command will play a file on the
.Va snd/0.mmc
audio device, giving full control to MIDI software or hardware
connected to the
.Va midithru/0
MIDI port:
.Bd -literal -offset indent
$ aucat -f snd/0.mmc -q midithru/0 -i file.wav
.Ed
.Pp
At this stage,
.Nm
will start, stop and relocate automatically following all user
actions in the MIDI sequencer, assuming it's configured to
transmit MMC on
.Va midithru/0 .
Furthermore, the MIDI sequencer could be configured to use the
.Va snd/0
port as MTC clock source, assured to be synchronous to playback of
.Pa file.wav .
.Sh EXAMPLES
Mix and play two files while recording a third file:
.Bd -literal -offset indent
$ aucat -i file1.wav -i file2.wav -o file3.wav
.Ed
.Pp
Record channels 2 and 3 into one stereo file and
channels 6 and 7 into another stereo file using a 44.1kHz sampling
rate for both:
.Bd -literal -offset indent
$ aucat -r 44100 -c 2:3 -o file1.wav -c 6:7 -o file2.wav
.Ed
.Pp
Split a stereo file into two mono files:
.Bd -literal -offset indent
$ aucat -n -i stereo.wav -c 0:0 -o left.wav \e
	-c 1:1 -o right.wav
.Ed
.Sh SEE ALSO
.Xr audioctl 1 ,
.Xr cdio 1 ,
.Xr mixerctl 1 ,
.Xr audio 4 ,
.Xr sndio 7 ,
.Xr sndiod 8
.Sh BUGS
Resampling is low quality.
.Pp
There are limitations inherent to the
.Ar wav ,
.Ar aiff ,
and
.Ar au
file formats: not all encodings are supported,
file sizes are limited to 2GB, and the files must support the
.Xr lseek 2
operation (e.g. pipes do not support it).
@


1.112
log
@Move sndiod man page to section 8.

suggested by deraadt, fixes from jmc, ok millert
@
text
@d30 1
d35 1
d122 5
d179 5
@


1.111
log
@follwing -> following
@
text
@d226 1
a226 1
.Xr sndiod 1 .
a282 1
.Xr sndiod 1 ,
d284 2
a285 1
.Xr sndio 7
@


1.110
log
@remove some unneccessary macros; from michael reed
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.109 2015/09/14 18:06:28 schwarze Exp $
d17 1
a17 1
.Dd $Mdocdate: September 14 2015 $
d90 1
a90 1
Encoding names use the follwing scheme: signedness
@


1.109
log
@typo resultung in a markup error
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.108 2015/01/21 09:21:05 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: January 21 2015 $
a24 1
.Bk -words
a36 1
.Ek
d79 1
a79 3
.It Xo
.Fl c Ar min : Ns Ar max
.Xc
d123 3
a125 2
.Bl -tag -width auto
.It Ar raw
d127 1
a127 1
.It Ar wav
d129 1
a129 1
.It Ar aiff
d131 1
a131 1
.It Ar au
d133 1
a133 1
.It Ar auto
@


1.108
log
@fix macro breakage and update usage();
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.107 2015/01/21 08:43:55 ratchov Exp $
d78 1
a78 1
.It Fl Ar b size
@


1.107
log
@Simplify internals and rewrite file header parsing code:
- remove -M, -t, -w, -C, -x flags that don't make sense anymore
- make "-j off" the default (sndiod already does the job)
- don't limit the number of played/recorded files.
- add support for floating-point encoded files.
- add support for apple .aiff and sun/next .au files
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d17 1
a17 1
.Dd $Mdocdate$
d27 1
a27 1
.Op Dl b Ar size
@


1.106
log
@more Va -> Cm fixes from Jan Stary <hans at stare.cz>, thanks!
@
text
@d22 1
a22 1
.Nd audio/MIDI stream manipulation tool
d26 2
a27 2
.Op Fl dMn
.Op Fl C Ar min : Ns Ar max
a36 1
.Op Fl t Ar mode
a37 2
.Op Fl w Ar flag
.Op Fl x Ar policy
d42 2
a43 1
utility can play, record, mix, and convert audio files.
d46 9
a54 5
reads audio data concurrently from all played files, mixes it and sends
the result to the device.
Similarly, during recording it duplicates audio data recorded
from the device and stores it into corresponding files.
It can process audio data on the fly:
d60 1
a60 2
Route the sound from one channel to another,
join stereo or split mono.
a62 3
.It
Monitor the sound being played, allowing the playback mix
to be recorded.
d78 3
a81 1
.Fl C Ar min : Ns Ar max ,
d84 1
a84 2
The range of stream channel numbers for recording and playback directions,
respectively.
d91 26
a116 2
Encoding of the playback or recording stream (see below).
The default is signed, 16-bit, native byte order.
d121 3
a123 8
Preceding per-device options apply to this device.
Streams
.Pq Fl io
and control MIDI ports
.Pq Fl q
that are applied after will be attached to this device.
Device mode and parameters are determined from streams
attached to it.
d125 15
a139 3
File format of the playback or record stream (see below).
The default is
.Cm auto .
d141 1
a141 1
Add this file to the list of streams to play.
d146 2
a147 2
Control whether stream channels are joined or expanded if
the stream number of channels is not equal to the device number of channels.
d149 3
a151 3
.Cm off
then stream channels are routed to the corresponding
device channel, possibly discarding channels not present in the device.
d154 4
a157 4
then a single stream channel may be sent on multiple device channels,
or multiple stream channels may be sent to a single device channel.
For instance, this feature could be used to request mono streams to
be sent on multiple outputs or to record a stereo input into a mono stream.
d159 1
a159 10
.Cm on .
.It Fl M
Create a MIDI thru box
.Pq i.e. MIDI-only pseudo device .
It merges any number of MIDI inputs and broadcasts the result
to any number of MIDI outputs, similarly to a hardware MIDI thru box.
Only MIDI ports
.Pq Fl q
and MIDI files
can be attached to it.
d161 5
a165 5
Create a loopback pseudo audio device.
Send input streams
to the output, processing them on the fly.
This pseudo-device is useful to mix, demultiplex, resample or re-encode
audio files offline.
d171 1
a171 1
Add this file to the list of recording streams.
d176 1
a176 2
Allow audio device properties to be controlled
through this MIDI port.
d178 1
a178 4
synchronously start, stop and relocate streams created in
MIDI Machine
Control (MMC) slave mode
.Pq Fl t .
d180 1
a180 1
Sample rate in Hertz of the stream.
a182 9
.It Fl t Ar mode
Select the way streams are controlled by MIDI Machine Control (MMC)
messages.
If the mode is
.Cm off
(the default), then streams are not affected by MMC messages.
If the mode is
.Cm slave ,
then streams are started synchronously by MMC start messages.
d184 1
a184 1
Software volume attenuation of the playback stream.
a187 45
.It Fl w Ar flag
Control
.Nm
behaviour when the maximum volume of the hardware is reached
and a new stream is connected.
This happens only when stream volumes
are not properly set using the
.Fl v
option.
If the flag is
.Cm on ,
then the master volume (corresponding to the mix of all playback streams)
is automatically adjusted to avoid clipping.
Using
.Cm off
makes sense when all streams are recorded or produced with properly lowered
volumes.
The default is
.Cm on .
.It Fl x Ar policy
Action when the output stream cannot accept
recorded data fast enough or the input stream
cannot provide data to play fast enough.
If the policy is
.Cm ignore
(the default) then samples that cannot be written are discarded
and samples that cannot be read are replaced by silence.
If the policy is
.Cm sync
then recorded samples are discarded,
but the same amount of silence will be written
once the stream is unblocked, in order to reach the right position in time.
Similarly silence is played, but the same amount of samples will be discarded
once the stream is unblocked.
If the policy is
.Cm error
then the stream is closed permanently.
.Pp
If a stream is created with the
.Fl t
option,
the
.Cm ignore
action is disabled for any stream connected to it
to ensure proper synchronization.
d191 3
a193 5
per-device parameters must precede the device definition
.Pq Fl fMn ,
and per-stream parameters
.Pq Fl Ccehjmrtvx
must precede the stream definition
a194 13
MIDI ports
.Pq Fl q
and stream definitions
.Pq Fl io
must follow the definition of the device
.Pq Fl fMn
to which they are attached.
.Pp
If no audio devices
.Pq Fl fMn
are specified,
settings are applied as if
the default device is specified.
d197 1
a197 1
.Nm aucat
a203 80
.Pp
File formats are specified using the
.Fl h
option.
The following file formats are supported:
.Bl -tag -width s32lexxx -offset indent
.It raw
Headerless file.
This format is recommended since it has no limitations.
.It wav
Microsoft WAVE file format.
There are limitations inherent to the file format itself:
not all encodings are supported,
file sizes are limited to 2GB,
and the file must support the
.Xr lseek 2
operation (e.g. pipes do not support it).
.It auto
Try to guess, depending on the file name.
.El
.Pp
Encodings are specified using the
.Fl e
option.
The following encodings are supported:
.Pp
.Bl -tag -width s32lexxx -offset indent -compact
.It s8
signed 8-bit
.It u8
unsigned 8-bit
.It s16le
signed 16-bit, little endian
.It u16le
unsigned 16-bit, little endian
.It s16be
signed 16-bit, big endian
.It u16be
unsigned 16-bit, big endian
.It s24le
signed 24-bit, stored in 4 bytes, little endian
.It u24le
unsigned 24-bit, stored in 4 bytes, little endian
.It s24be
signed 24-bit, stored in 4 bytes, big endian
.It u24be
unsigned 24-bit, stored in 4 bytes, big endian
.It s32le
signed 32-bit, little endian
.It u32le
unsigned 32-bit, little endian
.It s32be
signed 32-bit, big endian
.It u32be
unsigned 32-bit, big endian
.It s24le3
signed 24-bit, packed in 3 bytes, little endian
.It u24le3
unsigned 24-bit, packed in 3 bytes, big endian
.It s24be3
signed 24-bit, packed in 3 bytes, little endian
.It u24be3
unsigned 24-bit, packed in 3 bytes, big endian
.It s20le3
signed 20-bit, packed in 3 bytes, little endian
.It u20le3
unsigned 20-bit, packed in 3 bytes, big endian
.It s20be3
signed 20-bit, packed in 3 bytes, little endian
.It u20be3
unsigned 20-bit, packed in 3 bytes, big endian
.It s18le3
signed 18-bit, packed in 3 bytes, little endian
.It u18le3
unsigned 18-bit, packed in 3 bytes, big endian
.It s18be3
signed 18-bit, packed in 3 bytes, little endian
.It u18be3
unsigned 18-bit, packed in 3 bytes, big endian
.El
a210 4
Similarly, when the audio client changes its volume,
the same MIDI controller message is sent out; it can be used
for instance for monitoring or as feedback for motorized
faders.
d215 2
a216 4
Streams created with the
.Fl t
option are controlled by the following MMC messages:
.Bl -tag -width relocateXXX -offset indent
d218 3
a220 4
Files are relocated to the requested time position.
If the requested position is beyond the end of file,
playback of the file is temporarly disabled until a valid
position is requested.
d222 1
a222 1
Files are started.
d224 2
a225 1
Files are stopped and rewound back to the starting position.
d236 1
a236 1
$ sndiod -r 48000 -z 400 -s default -t slave -s mmc
d251 1
a251 1
$ aucat -f snd/0.mmc -t slave -q midithru/0 -i file.wav
d265 1
a265 2
Mix and play two stereo streams,
the first at 48kHz and the second at 44.1kHz:
d267 1
a267 1
$ aucat -r 48000 -i file1.raw -r 44100 -i file2.raw
d271 2
a272 2
channels 6 and 7 into another stereo file using a 96kHz sampling rate for
both:
d274 1
a274 1
$ aucat -j off -r 96000 -C 2:3 -o file1.raw -C 6:7 -o file2.raw
d279 2
a280 2
$ aucat -n -j off -i stereo.wav -C 0:0 -o left.wav -C 1:1 \e
	-o right.wav
d290 1
a290 2
Resampling is low quality; down-sampling especially should be avoided
when recording.
d292 9
a300 3
Processing is done using 16-bit arithmetic,
thus samples with more than 16 bits are rounded.
16 bits (i.e. 97dB dynamic) are largely enough for most applications though.
@


1.105
log
@fix typo: s/to/the
@
text
@d190 1
a190 1
.Va on ,
d194 1
a194 1
.Va off
@


1.104
log
@Remove section about server capability which was removed
long time ago. Use .Cm instead of .Va for argument
parameters. From Jan Stary <hans at stare.cz>, thanks!
@
text
@d63 1
a63 1
Monitor the sound being played, allowing to playback mix
@


1.103
log
@remove bogus legacy server-specific bits that cause confusion
@
text
@d64 1
a64 1
to be record.
a77 11
For historic reasons
.Nm
has the same audio server capability as
.Xr sndiod 1 ,
enabled when no files to play or record are provided.
Both operate the same way, except that the former processes audio data stored
in files, while the latter processes audio data provided or consumed by
programs.
Hence it has the same server-centric options described in
.Xr sndiod 1 .
.Pp
d86 3
a88 1
The default is 0:1, i.e. stereo.
d108 2
a109 1
The default is auto.
d119 1
a119 1
.Va off
d123 1
a123 1
.Va on ,
d129 1
a129 1
.Ar on .
d164 2
a165 1
The default is 48000.
d170 1
a170 1
.Va off
d173 1
a173 1
.Va slave ,
d179 1
a179 1
The default is 127 i.e. no attenuation.
d198 1
a198 1
.Va on .
d203 2
a204 3
If the policy
is
.Dq ignore
d208 1
a208 1
.Dq sync
d215 1
a215 1
.Dq error
d222 1
a222 1
.Dq ignore
@


1.102
log
@Remove server capability description from the documentation and from
the usage string, and just say that for historic reasons aucat behaves
like sndiod.
with help from jmc@@
@
text
@a33 1
.Op Fl m Ar mode
a145 5
.Po
.Fl io
preceded by
.Fl m Ar midi
.Pc
a146 16
.It Fl m Ar mode
Set the stream mode.
Valid modes are
.Ar play ,
.Ar rec ,
.Ar mon ,
and
.Ar midi ,
corresponding to playback, recording, monitoring and MIDI control.
A monitoring stream is a fake recording stream corresponding to
the mix of all playback streams.
Multiple modes can be specified, separated by commas,
but the same stream cannot be used for both recording and monitoring.
The default is
.Ar play , Ns Ar rec , Ns Ar midi
(i.e. full-duplex with MIDI control enabled).
@


1.101
log
@later -> latter;
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.100 2012/04/04 23:28:40 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: April 4 2012 $
d21 2
a22 3
.Nm aucat ,
.Nm sndiod
.Nd audio/MIDI server and stream manipulation tool
d26 1
a26 2
.Op Fl dn
.Op Fl b Ar nframes
a41 23
.Op Fl z Ar nframes
.Ek
.Nm sndiod
.Bk -words
.Op Fl dM
.Op Fl a Ar flag
.Op Fl b Ar nframes
.Op Fl C Ar min : Ns Ar max
.Op Fl c Ar min : Ns Ar max
.Op Fl e Ar enc
.Op Fl f Ar device
.Op Fl j Ar flag
.Op Fl L Ar addr
.Op Fl m Ar mode
.Op Fl q Ar port
.Op Fl r Ar rate
.Op Fl s Ar name
.Op Fl t Ar mode
.Op Fl U Ar unit
.Op Fl v Ar volume
.Op Fl w Ar flag
.Op Fl x Ar policy
.Op Fl z Ar nframes
d45 2
a46 23
.Nm sndiod
daemon is an intermediate layer between
audio or MIDI programs and the hardware.
It performs the necessary audio processing to
allow any program to work on any supported hardware.
By default,
.Nm sndiod
accepts connections from programs
running on the same system only;
it initializes only when programs are using its services,
allowing
.Nm sndiod
to consume a negligible amount of system resources the rest of the time.
Systems with no audio hardware can use
.Nm sndiod
to keep hot-pluggable devices usable by default at
virtually no cost.
.Pp
.Nm sndiod
operates as follows: it exposes at least one
.Em sub-device
that any number of audio programs can connect to and use as if it were
audio hardware.
d48 3
a50 3
.Nm sndiod
receives audio data concurrently from all programs, mixes it and sends
the result to the hardware device.
d52 2
a53 4
from the device and sends it to all programs.
Since audio data flows through the
.Nm sndiod
process, it has the opportunity to process audio data on the fly:
d57 1
a57 2
Change the sound encoding to overcome incompatibilities between
software and hardware.
d62 1
a62 2
Control the per-application playback volume as well as the
master volume.
d64 2
a65 2
Monitor the sound being played, allowing one program to record
what other programs play.
a67 18
Processing is configured on a per sub-device basis, meaning that
the sound of all programs connected to the same sub-device will be
processed according to the same configuration.
Multiple sub-devices can be defined, allowing multiple configurations
to coexist.
The user selects the configuration a given program will use
by selecting the sub-device the program uses.
.Pp
.Nm sndiod
can expose a MIDI port that can be used as a MIDI thru box
(aka a
.Dq hub
for MIDI messages),
allowing any program to send MIDI messages to
MIDI hardware or to another program in a uniform way.
Hardware ports can be subscribed to such MIDI thru boxes,
allowing multiple programs to share the MIDI port.
.Pp
d69 2
a70 2
.Nm sndiod
exposes a control MIDI port usable for:
d76 1
a76 3
Common clock source for audio and MIDI programs.
.It
Start, stop and relocate groups of audio programs.
d79 1
a79 1
The
d81 3
a83 3
utility can play, record, mix, and convert regular audio files.
It has the same processing capabilities as
.Nm sndiod .
d87 2
a88 3
Instead of a list of sub-devices,
.Nm
is given a list of files to play or record.
a91 24
.It Fl a Ar flag
Control whether
.Nm sndiod
opens the audio device only when needed or keeps it open all the time.
This applies to MIDI ports controlling the device as well.
If the flag is
.Va on
then the device is kept open all the time, ensuring no other program can
steal it.
If the flag is
.Va off ,
then it's automatically closed, allowing other programs to have direct
access to the device, or the device to be disconnected.
The default is
.Va off ,
except for the default device.
.It Fl b Ar nframes
The buffer size of the audio device in frames.
A frame consists of one sample for each channel in the stream.
This is the number of frames that will be buffered before being played
and thus controls the playback latency.
The default is 7680 or twice the block size
.Pq Fl z ,
if the block size is set.
a100 4
.Nm sndiod
logs on
.Em stderr
until it daemonizes.
d105 1
a105 1
Add this
d107 2
a108 4
audio device to devices used for playing and/or recording.
Preceding per-device options
.Pq Fl abwz
apply to this device.
d110 1
a110 1
.Pq Fl ios
a138 18
.It Fl L Ar addr
Specify a local network address
.Nm sndiod
should listen;
.Nm sndiod
will listen on TCP port 11025+n, where n is the unit number
specified with
.Fl U .
Without this option,
.Nm sndiod
listens on the
.Ux Ns -domain
socket only, and is not reachable from any network.
If the option argument is
.Sq -
then
.Nm sndiod
will accept connections from any address.
a152 5
Exposed sub-devices by
.Nm sndiod
behave like software MIDI ports,
allowing any MIDI-capable application to send MIDI messages to
MIDI hardware or to another application in a uniform way.
d185 2
a186 4
Expose the audio device clock on this
.Xr sndio 7
MIDI port and allow audio device properties to be controlled
through MIDI.
a194 17
.It Fl s Ar name
Add
.Ar name
to the list of sub-devices to expose.
This allows clients to use
.Nm sndiod
instead of the physical audio device for audio input and output
in order to share the physical device with other clients.
Defining multiple sub-devices allows splitting a physical audio device
into logical devices having different properties (e.g. channel ranges).
The given
.Ar name
corresponds to the
.Dq option
part of the
.Xr sndio 7
device name string.
d203 1
a203 16
then streams are started synchronously by MMC start messages;
additionally, the server clock is exposed as MIDI Time Code (MTC)
messages allowing MTC-capable software or hardware to be synchronized
to audio streams.
.It Fl U Ar unit
Unit number to use when running in server mode.
Each
.Nm sndiod
server instance has an unique unit number,
used in
.Xr sndio 7
device names.
The default is 0.
The unit number must be set before any
.Fl L
is used.
a207 5
In server mode, clients inherit this parameter.
Reducing the volume in advance allows a client's volume to stay independent
from the number of clients as long as their number is small enough.
18 volume units (i.e. \-6dB attenuation) allows the number
of playback streams to be doubled.
a211 2
and
.Nm sndiod
a254 15
.It Fl z Ar nframes
The audio device block size in frames.
This is the number of frames between audio clock ticks,
i.e. the clock resolution.
If a stream is created with the
.Fl t
option,
and MTC is used for synchronization, the clock
resolution must be 96, 100 or 120 ticks per second for maximum
accuracy.
For instance, 100 ticks per second at 48000Hz corresponds
to a 480 frame block size.
The default is 960 or half of the buffer size
.Pq Fl b ,
if the buffer size is set.
d258 1
a258 3
per-device parameters
.Pq Fl abwz
must precede the device definition
d263 1
a263 1
.Pq Fl ios .
d267 1
a267 1
.Pq Fl ios
a276 24
If no
.Nm sndiod
sub-devices
.Pq Fl s
are specified for a device, a default server sub-device is
created attached to it.
If a device
.Pq Fl fMn
is defined twice, both definitions are merged:
parameters of the first one are used but streams
.Pq Fl ios
and MIDI control ports
.Pq Fl q
of both definitions are created.
The default
.Xr sndio 7
device used by
.Nm sndiod
is
.Pa rsnd/0 ,
and the default sub-device exposed by
.Nm sndiod
is
.Pa snd/0 .
a278 2
.Nm sndiod
or
a365 15
.Sh SERVER MODE
.Nm sndiod
can be used
to overcome hardware limitations and allow applications
to run on fixed sample rate devices or on devices
supporting only unusual encodings.
.Pp
Certain applications, such as synthesis software,
require a low latency audio setup.
To reduce the probability of buffer underruns or overruns, especially
on busy machines, the server can be started by the super-user, in which
case it will run with higher priority.
Any user will still be able to connect to it,
but for privacy reasons only one user may have
connections to it at a given time.
d368 1
a368 2
can expose the audio device clock on registered
MIDI ports
d370 2
a371 8
and allows audio device properties to be controlled
through MIDI.
Additionally,
.Nm sndiod
creates a MIDI port with the same name as the exposed audio
sub-device to which MIDI programs can connect.
.Pp
A MIDI channel is assigned to each stream, and the volume
d386 1
a386 3
Streams are relocated to the requested time position
relative to the beginning of the stream, at which playback
and recording must start.
d388 2
a389 7
the stream is temporarly disabled until a valid position is requested.
This message is ignored by audio
.Nm sndiod
clients, but the given time position is sent to MIDI ports as an MTC
.Dq "full frame"
message forcing all MTC-slaves to relocate to the given
position (see below).
d391 1
a391 11
Put all streams in starting mode.
In this mode,
.Nm sndiod
or
.Nm aucat
waits for all streams to become ready
to start, and then starts them synchronously.
Once started, new streams can be created
.Pq Nm sndiod
but they will be blocked
until the next stop-to-start transition.
d393 1
a393 35
Put all streams in stopped mode (the default).
In this mode, any stream attempting to start playback or recording
is paused.
Files
.Pq Nm aucat
are stopped and rewound back to the starting position,
while client streams
.Pq Nm sndiod
that are already
started are not affected until they stop and try to start again.
.El
.Pp
Streams created with the
.Fl t
option export the
.Nm sndiod
device clock using MTC, allowing non-audio
software or hardware to be synchronized to the audio stream.
Maximum accuracy is achieved when the number of blocks per
second is equal to one of the standard MTC clock rates (96, 100 and 120Hz).
The following sample rates
.Pq Fl r
and block sizes
.Pq Fl z
are recommended:
.Pp
.Bl -bullet -offset indent -compact
.It
44100Hz, 441 frames (MTC rate is 100Hz)
.It
48000Hz, 400 frames (MTC rate is 120Hz)
.It
48000Hz, 480 frames (MTC rate is 100Hz)
.It
48000Hz, 500 frames (MTC rate is 96Hz)
d396 2
d401 1
a401 1
and a MIDI-controlled
d407 1
a407 1
Streams connected to
d409 1
a409 1
behave normally, while streams connected to
d412 1
a412 4
Regardless of which device a stream is connected to,
its playback volume knob is exposed.
.Pp
For instance, the following command will play a file on the
d414 1
a414 1
audio device, and give full control to MIDI software or hardware
d416 1
a416 1
.Va snd/0.thru
d425 4
a428 2
actions in the MIDI sequencer.
Note that the sequencer must use
d430 2
a431 11
as the MTC source, i.e. the audio server, not the audio player.
.Sh ENVIRONMENT
.Bl -tag -width "AUCAT_COOKIE" -compact
.It Ev AUCAT_COOKIE
File containing user's session cookie.
.It Ev AUDIODEVICE
.Xr sndio 7
audio device to use if the
.Fl f
option is not specified.
.El
a450 30
.Pp
Start server using default parameters, creating an
additional sub-device for output to channels 2:3 only (rear speakers
on most cards), exposing the
.Pa snd/0
and
.Pa snd/0.rear
devices:
.Bd -literal -offset indent
$ sndiod -s default -c 2:3 -s rear
.Ed
.Pp
Start server creating the default sub-device with low volume and
an additional sub-device for high volume output, exposing the
.Pa snd/0
and
.Pa snd/0.max
devices:
.Bd -literal -offset indent
$ sndiod -v 65 -s default -v 127 -s max
.Ed
.Pp
Start server configuring the audio device to use
a 48kHz sample frequency, 240-frame block size,
and 2-block buffers.
The corresponding latency is 10ms, which is
the time it takes the sound to propagate 3.5 meters.
.Bd -literal -offset indent
$ sndiod -r 48000 -b 480 -z 240
.Ed
d455 1
a458 12
The
.Nm
utility assumes non-blocking I/O for input and output streams.
It will not work reliably on files that may block
(ordinary files block, pipes don't).
To avoid audio underruns/overruns or MIDI jitter caused by file I/O,
it's recommended to use two processes: a
.Nm sndiod
server handling audio and MIDI I/O and a
.Nm
client handling disk I/O.
.Pp
a464 19
.Pp
If
.Fl a Ar off
is used,
.Nm sndiod
creates sub-devices to expose first
and then opens the audio hardware on demand.
Technically, this allows
.Nm sndiod
to attempt to use one of the sub-devices it exposes as an audio device,
creating a deadlock.
To avoid this,
.Fl a Ar off
is disabled for the default audio device, but nothing prevents the user
from shooting himself in the foot by creating a similar deadlock.
.Pp
The ability to merge multiple inputs is provided to allow multiple
applications producing MIDI data to keep their connection open while
idling; it does not replace a fully featured MIDI merger.
@


1.100
log
@tweak previous; ok ratchov
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.99 2012/04/04 11:31:39 ratchov Exp $
d155 1
a155 1
in files, while the later processes audio data provided or consumed by
@


1.99
log
@Add a simple and clear (hopefully) description of what sndiod does.
discussed with deraadt and jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.98 2012/03/23 11:59:54 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: March 23 2012 $
d79 1
a79 1
it initilizes only when programs are using its services,
d83 1
a83 1
Systems with no audio hardware could use
d91 1
a91 1
that any number of audio programs can connect to and use as it was
d95 1
a95 1
receives audio data concurently from all programs, mixes it and sends
d97 1
a97 1
Similarly, during recording it duplicates audio data recorded 
d118 1
a118 1
Above processing is configured on a per-sub-device basis, meaning that
d155 1
a155 1
in files, while the later processes on audio data provided or consumed by
@


1.98
log
@add a MIDI-controlled master volume knob to adjust the mix of
all playback stream, discussed with armani@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.97 2012/02/09 18:33:36 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: February 9 2012 $
d69 81
d151 7
a157 5
is an audio utility which can simultaneously play and record
any number of audio
.Em streams ,
possibly controlled through MIDI.
A typical invocation of
d159 1
a159 14
consists in providing streams to play and record,
and possibly the audio device to use.
.Pp
The
.Nm sndiod
daemon acts as an audio server.
Its functionality is identical to
.Nm aucat ,
except that streams are created
dynamically when clients connect to the server.
Thus, instead of actual streams (paths to plain files),
templates for client streams (sub-device names) must be provided.
Multiple independent audio devices are supported,
each has its own list of streams and MIDI control ports.
@


1.97
log
@Crank the default buffer size to 160ms (ie 7680 frames at 48kHz).
Workarounds stuttering caused by something hogging the cpu in kernel
mode and preventing sndiod from running at time.
ok deraadt
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.96 2012/01/26 09:07:03 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: January 26 2012 $
d537 3
@


1.96
log
@Make the default rate 48kHz and the default block size 10ms. These
settings ensure video players and programs using MTC are smooth by
default. Thanks to all who tested.
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.95 2011/12/09 22:58:50 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: December 9 2011 $
d114 3
a116 2
The default is twice the block size
.Pq Fl z .
d362 1
a362 1
The default is 480 or half of the buffer size
@


1.95
log
@zap trailing whitespace, from jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.94 2011/12/09 14:36:42 ratchov Exp $
d114 2
d249 1
a249 1
The default is 44100Hz.
d359 5
a363 2
For instance, 120 ticks per second at 48000Hz corresponds
to a 400 frame block size.
@


1.94
log
@add a new sndiod audio/midi daemon and hide aucat server-specific
options.
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.93 2011/11/15 09:07:45 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: November 15 2011 $
d499 1
a499 1
.Nm sndiod 
@


1.93
log
@add missing full stop;
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.92 2011/11/15 08:05:22 ratchov Exp $
d21 2
a22 1
.Nm aucat
d27 1
a27 2
.Op Fl dlMn
.Op Fl a Ar flag
d36 20
a57 1
.Op Fl o Ar file
d72 1
a72 2
.Em streams
on any number of audio devices,
a73 6
It can also act as an audio server, in which case streams
correspond to client connections rather than plain files.
.Pp
Audio devices are independent.
A list of streams is attached to each audio device,
as well as an optional list of MIDI ports to control the device.
d77 1
a77 1
and possibly the audio device to use, if the default is not desired.
d79 6
a84 1
This also applies to server mode, except that streams are created
d88 2
d95 1
a95 1
.Nm
d123 1
a123 1
.Nm
d168 4
a171 2
Specify a local network address to listen on in server mode.
.Nm
d176 1
a176 1
.Nm
d183 1
a183 1
.Nm
a184 2
.It Fl l
Detach and become a daemon.
d199 3
a201 3
If sub-devices are exposed
.Pq Fl s
they behave like software MIDI ports,
a229 4
It doesn't support MIDI control
.Pq Fl q
and can't expose sub-devices
.Pq Fl s .
d251 1
a251 1
to the list of sub-devices to expose in server mode.
d253 1
a253 1
.Nm
d280 1
a280 1
.Nm
d286 3
a288 3
The unit number must be set before any server-specific
options are used
.Pq Fl Ls .
d302 2
a376 3
Global parameters
.Pq Fl dl
are position-independent.
d383 4
a386 2
If no streams
.Pq Fl ios
d388 1
a388 3
created attached to it, meaning that
.Nm
behaves as an audio server.
d399 8
a406 3
device is
.Pa snd/0
.Pq also known as Pa snd/0.default .
d409 3
a411 1
.Nm
d499 2
a500 8
If at least one sub-device
.Pq Fl s
is exposed by
.Nm ,
including the case when no stream options are given,
then
.Nm
can be used as a server
d520 4
a523 4
If running in server mode
.Nm
creates a MIDI port with the same name as the default audio
device to which MIDI programs can connect.
d542 3
a544 2
This message is ignored by client streams (server mode).
The given time position is sent to MIDI ports as an MTC
d551 3
a553 1
.Nm
d556 2
a557 1
Once started, new streams can be created (server mode)
d564 6
a569 2
Files are stopped and rewound back to the starting position,
while client streams (server mode) that are already
d575 3
a577 1
option export the server clock using MTC, allowing non-audio
d604 1
a604 1
$ aucat -l -r 48000 -z 400 -s default -t slave -s mmc
d662 1
a662 3
Start
.Nm
in server mode using default parameters, creating an
d670 1
a670 1
$ aucat -l -s default -c 2:3 -s rear
d673 1
a673 3
Start
.Nm
in server mode, creating the default sub-device with low volume and
d680 1
a680 1
$ aucat -l -v 65 -s default -v 127 -s max
d683 1
a683 3
Start
.Nm
in server mode, configuring the audio device to use
d689 1
a689 1
$ aucat -l -r 48000 -b 480 -z 240
d704 3
a706 1
it's recommended to use two
d708 1
a708 2
processes: a server handling audio and MIDI I/O and a client handling
disk I/O.
d719 2
a720 2
is used in server mode,
.Nm
d724 1
a724 1
.Nm
@


1.92
log
@Add a "device number" component in sndio(7) device names, allowing a
single aucat instance to handle all audio and MIDI services. Since
this partially breaks compatibility, this is a opportunitiy to fix few
other design mistakes (eg ':' being used by inet6, type name vs api
name confusion, etc..). This leads to the following names:

        type[@@hostname][,unit]/devnum[.option]

The device number is the minor device number for direct hardware
access (ie the 'N' in /dev/audioN). For aucat, this is the occurence
number of the -f (or -M) option.

There's a compatibility hook to keep old names working if only one
aucat server is running.
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.91 2011/10/24 21:46:21 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: October 24 2011 $
d387 1
a387 1
.Pq also known as Pa snd/0.default
@


1.91
log
@mention that -aoff is not the default for the default device
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.90 2011/10/18 21:04:26 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: October 18 2011 $
d386 2
a387 2
.Pa aucat:0
.Pq also known as Pa aucat:0.default
d575 1
a575 1
.Va aucat:0
d577 1
a577 1
.Va aucat:0.mmc :
d583 1
a583 1
.Va aucat:0
d585 1
a585 1
.Va aucat:0.mmc
d591 1
a591 1
.Va aucat:0.mmc
d594 1
a594 1
.Va aucat:0.thru
d597 1
a597 1
$ aucat -f aucat:0.mmc -t slave -q aucat:0.thru -i file.wav
d605 1
a605 1
.Va aucat:0
d642 1
a642 1
.Pa aucat:0
d644 1
a644 1
.Pa aucat:0.rear
d654 1
a654 1
.Pa aucat:0
d656 1
a656 1
.Pa aucat:0.max
@


1.90
log
@keep the device closed by default (when not used)
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.89 2011/10/17 21:09:11 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: October 17 2011 $
d88 2
a89 1
.Va off .
@


1.89
log
@Remove midicat since aucat can now be used instead of midicat
with almost the same syntax (roughly an extra -M option).
Thru boxes are created with aucat, and corresponding MIDI port
names have the "aucat" prefix instead of "midithru". The old
device name will still work some time for backward compatibility.

ok deraadt
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.88 2011/10/12 12:16:10 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: October 12 2011 $
d88 1
a88 1
.Va on .
@


1.88
log
@- avoid line wrapping an example
- sort usage() for midicat
- tweak a bit of unclear wording

ok ratchov
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.87 2011/10/12 07:20:03 ratchov Exp $
d593 2
a594 2
.Va midithru:0
MIDI device:
d596 1
a596 1
$ aucat -f aucat:0.mmc -t slave -q midithru:0 -i file.wav
@


1.87
log
@Simplify and improve the way options are parsed and remove ~300 lines
of code that becomes unused. Few command line arguments changes are
required though:

  - stream definitions (-ios) now must follow devices definitions they
    are attached to (-fMn)

  - the -n option is now a special "loopback" device and is thus used
    like -f, eg it must precede streams

  - in midicat, midi thru boxes are not created automatically anymore,
    the new "-M" option must be used for that

  - channel numbers (-Cc options) correspond always to channel numbers
    of the hardware.

  - the -u option isn't needed anymore

  - increase the log verbosity so user errors are logged
    without using -d

tested by many, help from jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.86 2011/06/29 07:39:02 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: June 29 2011 $
d632 2
a633 1
$ aucat -n -j off -i stereo.wav -C 0:0 -o left.wav -C 1:1 -o right.wav
@


1.86
log
@make -u flag per-device similarly to -a and -w
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.85 2011/06/20 20:18:44 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: June 20 2011 $
d22 1
a22 1
.Nd audio server and stream manipulation tool
d26 1
a26 1
.Op Fl dln
d39 1
a39 1
.Op Fl q Ar device
a43 1
.Op Fl u Ar flag
d114 2
a115 6
Preceding streams
.Pq Fl ios ,
control MIDI ports
.Pq Fl q ,
and per-device options
.Pq Fl abuwz
d117 5
d165 19
d189 1
d191 2
a192 2
.Ar mon ,
corresponding to playback, recording and monitoring.
d198 2
a199 2
.Ar play , Ns Ar rec
(i.e. full-duplex).
d201 2
a202 2
Loopback mode.
Instead of using audio devices, send input streams
d204 1
a204 1
This mode is useful to mix, demultiplex, resample or reencode
d206 8
d219 1
a219 1
.It Fl q Ar device
d270 3
a272 15
.It Fl u Ar flag
Control how parameters of the audio device are chosen.
If the flag is
.Va on
then
.Nm
tries to automatically determine the optimal parameters to
match stream parameters and avoid conversions if possible.
If the flag is
.Va off
it will instead use the parameters specified by the
.Fl Ccer
options.
The default is
.Va on .
d345 1
a345 1
.Pq Fl abuwz
d347 1
a347 1
.Pq Fl f ,
d356 2
a357 2
must precede the definition of the device
.Pq Fl f
d360 1
a360 1
.Pq Fl dlnUu
d364 1
a364 1
.Pq Fl f
d367 1
a367 1
the default device is specified as the last argument.
d374 8
d596 1
a596 1
$ aucat -t slave -q midithru:0 -i file.wav -f aucat:0.mmc
d709 4
@


1.85
log
@Make -aoff option apply to MIDI ports (-q) as well, ensuring the device
stays closed also if -q is used. As we're at it, add -a to midicat so
it behaves like aucat.
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.84 2011/06/03 16:20:10 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: June 3 2011 $
d26 1
a26 1
.Op Fl dlnu
d44 1
d120 1
a120 1
.Pq Fl abwz
d242 5
a246 2
.It Fl u
Normally
d248 4
a251 2
tries to automatically determine the optimal parameters for the audio device;
if this option is specified,
d255 2
d329 1
a329 1
.Pq Fl abwz
@


1.84
log
@Clarify that the ratio between sample rate and block size
is the MTC clock rate. Suggested by Alexey Suslikov
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.83 2011/06/03 09:01:14 ratchov Exp $
d78 1
@


1.83
log
@update EXAMPLES to use "-joff", since "-jon" is the default
found by peters at schwertfisch.de, thanks
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.82 2011/05/26 13:30:51 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: May 26 2011 $
d520 2
d526 1
a526 1
are recommended for maximum accuracy:
d530 1
a530 1
44100Hz, 441 frames
d532 1
a532 1
48000Hz, 400 frames
d534 1
a534 1
48000Hz, 480 frames
d536 1
a536 1
48000Hz, 500 frames
@


1.82
log
@tweak previous;
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.81 2011/05/26 07:42:21 ratchov Exp $
d592 1
a592 1
$ aucat -r 96000 -C 2:3 -o file1.raw -C 6:7 -o file2.raw
d597 1
a597 1
$ aucat -n -i stereo.wav -C 0:0 -o left.wav -C 1:1 -o right.wav
@


1.81
log
@slightly clarify -v option description
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.80 2011/05/26 07:18:40 ratchov Exp $
d251 1
a251 1
corresponding to \-42dB and \-0dB attenuation in 1\/3dB steps.
d253 1
a253 1
Reducing the volume in advance allows client volume to stay independent
d255 1
a255 1
18 volume units (i.e., \-6dB attenuation) allows the number
d257 1
a257 1
The default is 127 i.e., no attenuation.
d272 1
a272 1
.Fl w Va off
@


1.80
log
@add a new -w flag to control whether master volume is automatically
adjusted when new streams are connected and disconnected. Disabling
automatic volume adjustment makes sense if all streams are recorded
with properly lowered volumes.
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.79 2011/05/23 07:06:53 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: May 23 2011 $
d251 1
a251 1
corresponding to \-42dB and \-0dB attenuation.
d253 5
a257 6
Reducing the volume in advance reduces a client's dynamic range,
but allows client volume to stay independent from the number
of clients as long as their number is small enough.
A good compromise is to use \-4dB attenuation (12 volume units)
for each additional client expected
(115 if 2 clients are expected, 103 for 3 clients, and so on).
@


1.79
log
@postion -> position;
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.78 2011/05/03 08:00:54 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: May 3 2011 $
d45 1
d118 1
a118 1
.Pq Fl abz
d259 19
d321 1
a321 1
.Pq Fl abz
@


1.78
log
@If the string of the address to listen on is '-' then listen on all
addresses (ie pass NULL to getaddrinfo which would return 0.0.0.0
and :: in most cases)
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.77 2011/04/28 07:28:18 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: April 28 2011 $
d469 1
a469 1
Streams are relocated to the requested time postion
d473 1
a473 1
the stream is temporarly disabled until a valid postion is requested.
@


1.77
log
@- slight tweak for FILES
- reword EXAMPLES a little, for readability
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.76 2011/04/28 06:19:57 ratchov Exp $
d155 5
@


1.76
log
@Implement a new authentication method allowing aucat and midicat to
work over TCP, for instance, to expose the sound card of one machine
with other machines of the network.

The first client generates a 128-bit random number (aka the
session cookie), saves it in $HOME/.aucat_cookie and sends it to the
server. Successive clients load the cookie from $HOME/.aucat_cookie
and send it to the server but the server accepts only clients whose
cookie matches the session cookie. When all clients are gone, the
session is over, and another cookie could start a new session, and so
on.

TCP is enabled on the server with the new -L option, and on the client
side hostnames are specified with a new optional component in the
device name.

hints from damien, dlg and deraadt, tweaks from jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.75 2011/03/21 16:33:17 okan Exp $
d17 1
a17 1
.Dd $Mdocdate: March 21 2011 $
d550 1
a550 1
file containing user's session cookie.
d558 1
a558 1
The following will mix and play two stereo streams,
d564 1
a564 1
The following will record channels 2 and 3 into one stereo file and
d571 1
a571 1
The following will split a stereo file into two mono files:
d576 1
a576 1
The following will start
d578 1
a578 1
in server mode using default parameters, but will create an
d589 1
a589 1
The following will start
d591 1
a591 1
in server mode creating the default sub-device with low volume and
d601 1
a601 1
The following will start
d603 1
a603 1
in server mode configuring the audio device to use
@


1.75
log
@grammar fixes from Michael W. Bombardieri; also emphasize stderr, as
most pages do already.

ok jmc@@ ratchov@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.74 2011/03/02 22:45:25 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: March 2 2011 $
d36 1
d144 11
d548 3
a550 1
.Bl -tag -width "AUDIODEVICE" -compact
@


1.74
log
@mention -U as global position-independent parameter
from Remco <remco at d-compu.dyndns.org>, thanks!
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.73 2010/07/31 08:48:01 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: July 31 2010 $
d101 3
a103 1
logs on stderr until it daemonizes.
d293 1
a293 1
and streams definitions
d630 1
a630 1
to attempt to use one of the sub-devices it exposes as audio device,
@


1.73
log
@remove 2 years old compatibility mode
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.72 2010/07/06 10:45:01 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: July 6 2010 $
d297 1
a297 1
.Pq Fl dlnu
@


1.72
log
@various tweaks to previous; ok ratchov
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.71 2010/07/06 01:12:45 ratchov Exp $
a532 27
.Sh LEGACY MODE
If neither
.Fl i
nor
.Fl o
are specified,
.Nm
will run in legacy mode, and won't convert sample formats or sampling rates.
In legacy mode, all options except
.Fl f
are ignored, and all other arguments are assumed to be names of files.
In legacy mode
.Nm
reads files sequentially, and writes them to the specified device.
If a Sun .au header is detected it is skipped over and not copied to
the audio device.
.Nm
will attempt to parse the format, number of channels and sample rate
from Sun .au file headers.
However, only alaw and ulaw formats are supported for .au files.
Other formats will be interpreted as ulaw.
If a Microsoft .wav header (RIFF) is detected it is interpreted
to select the right audio encoding for playback and the data chunk of the
file is copied to the audio device.
If the device does not support the encoding,
.Nm
will exit with an error.
@


1.71
log
@Handle all streams the same way because there's no actual
difference between audio files and client connections. Clean up
the way command line options are handled and clarify this in the
manual page: stream parameters (-Ccehjmrtvx) must precede stream
definitions (-ios) and per-device parameters (-abz) and stream
definitions (-ios) must precede device definitions (-f). Since
there's no ``server'' and ``non-server'' modes anymore, make the
-l option just detach the process.

ok and help from jakemsr and jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.70 2010/06/04 06:15:28 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: June 4 2010 $
d95 2
a96 1
The range of stream channel numbers for recording and playback directions, respectively.
d250 2
a251 1
then recorded samples are discarded, but the same amount of silence will be written
d423 2
a424 2
Any user will still be able to
connect to it, but for privacy reasons, only one user may have
d466 2
a467 1
Once started, new streams can be created (server mode), but they will be blocked
d615 2
a616 2
48kHz sample frequency, 240-frame block size,
and a 2-block buffers.
d649 1
a649 1
option is used in server mode,
d651 2
a652 1
creates sub-devices to expose first and then opens the audio hardware on demand.
@


1.70
log
@Allow the audio device to be opened only while it's actually used.
This is necessary for uaudio devices, for instance to start aucat
before the device is plugged. Or to unplug a device whithout
having to restart aucat when another device is plugged.  This is
controlled with the new -a option.

Allow multiple audio devices to be used concurently, i.e.
multiple ``-f devname'' options to be used; -f options must follow
per-device options, which is what we do for other options.
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.69 2010/04/22 17:43:30 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: April 22 2010 $
a47 7
The
.Nm
utility can record one input stream
and store it on multiple destination files,
doing the necessary conversions on the fly.
It can play, convert, and mix multiple input files simultaneously,
and can also act as an audio server.
d49 20
a68 3
also has a legacy mode that works like previous versions of
.Nm ,
which does not convert on the fly and supports playback of .au files.
d75 1
a75 1
opens the device only when needed or keeps it open all the time.
d95 1
a95 1
The range of channel numbers on the record or playback stream, respectively.
d98 1
a98 2
Do not daemonize.
If this option is specified,
d100 1
a100 2
will run in the foreground and log to
.Em stderr .
d105 1
a105 1
The
d107 10
a116 1
audio device to use for playing and/or recording.
d121 1
a121 1
Add this file to the list of files to play.
d126 1
a126 1
Control whether channels are joined or expanded if
d141 1
a141 15
Listen for incoming connections on a
.Ux Ns -domain
socket.
This allows clients to use
.Nm
instead of the physical audio device for audio input and output
in order to share the physical device with other clients.
The default
.Xr sndio 7
device exposed is
.Pa aucat:0
.Pq "also known as" Pa aucat:0.default
but other names can be used with the
.Fl s
option.
d159 1
a159 1
Instead of using an audio device, send input streams
d164 1
a164 1
Add this file to the list of files in which to store recorded samples.
d169 1
a169 1
The
d171 7
a177 2
MIDI device to use for controlling stream volumes or
to start multiple streams synchronously.
d179 1
a179 1
Sample rate in Hertz of the playback or record stream.
d185 4
d199 1
a199 1
Select the way sub-devices are controlled by MIDI Machine Control (MMC)
d257 1
a257 1
If a sub-device is created with the
d265 1
a265 1
The audio block size in frames.
d268 1
a268 1
If a sub-device is created with the
d278 37
a323 44
Settings for input files
.Pq Fl i ,
output files
.Pq Fl o ,
and sub-devices
.Pq Fl s
can be changed using the
.Fl Ccehrvx
options.
The last
.Fl Ccehrvx
options specified before an
.Fl i ,
.Fl o ,
or
.Fl s
are applied to the corresponding file.
.Pp
Settings for the audio device
can be changed using the
.Fl Ccer
options.
They apply to the audio device only if the
.Fl u
option is given as well.
The last
.Fl Ccer
option specified before an
.Fl f
is applied to
.Ar device .
.Pp
If no audio device
.Pq Fl f
is specified,
settings are applied as if
the default device is specified as the last argument.
If no sub-devices
.Pq Fl s
are specified
settings are applied as if
.Ar default
is specified as the last argument.
.Pp
d404 6
d411 1
a411 2
can be used in server mode
.Pq Fl l
a415 28
The
.Nm
audio server may be started by the super-user,
in which case any user will be able to connect to it.
For privacy reasons, only one user may have connections to it
at a given time.
.Pp
Alternatively, each user may run his instance
of the server.
It is generally not desirable to have multiple
instances of
.Nm
running in server mode,
so it is good practice to start it thus:
.Bd -literal -offset indent
$ pgrep -x aucat || aucat -l
.Ed
.Pp
This also ensures privacy by preventing
other users from accessing the audio system.
On multi-user machines
.Nm
should be killed when no longer in use to make audio resources
available again to others:
.Bd -literal -offset indent
$ pkill -x aucat
.Ed
.Pp
d418 6
a423 12
To reduce the probability of buffer underruns or overruns,
the
.Xr renice 8
command can be used to give a higher priority to the
.Nm
process.
Superuser privileges are required.
For example:
.Bd -literal -offset indent
$ aucat -b 3500 -l
$ sudo renice -n -20 -p `pgrep -x aucat`
.Ed
a424 2
While running in server mode
.Pq Fl l
d426 6
a431 4
exposes a MIDI device with the same name as the default audio
device.
It allows MIDI hardware or software to control programs
using
d433 2
a434 1
or to synchronize to them.
d438 1
a438 1
Similarly, when the audio application changes its volume,
d443 1
a443 1
Clients connected to sub-devices created with the
d448 2
a449 3
Gives
.Nm
the time, relative to the beginning of the stream, at which playback
d451 4
a454 4
It is not interpreted by
.Nm
itself.
The given time position is sent to MIDI clients as an MTC
d459 4
a462 2
Put the sub-device in starting mode.
In this mode, the sub-device waits for all streams to become ready
d464 1
a464 1
Once started, new streams can be created, but they will be blocked
d467 1
a467 1
Put the sub-device in stopped mode (the default).
d470 3
a472 2
Streams that are already started are not affected until they stop
and try to start again.
d475 1
a475 1
Sub-devices created with the
a512 30
If
.Nm
is used to play and record audio files, it offers
similar MIDI control.
.Nm
can open a
.Xr sndio 7
MIDI device allowing MIDI hardware or software
to control playback and recording in real time.
.Pp
A MIDI channel is assigned to each stream, and the volume
is changed using the standard volume controller (number 7).
Streams created with the
.Fl t
option are controlled by the following MMC messages:
.Bl -tag -width relocateXXX -offset indent
.It relocate
Streams are relocated to the requested time postion
relative to the beginning of the stream, at which playback
and recording must start.
If the requested position is beyond the end of file,
the stream is temporarly disabled until a valid postion is requested.
.It start
Start all streams synchronously.
By default, streams are created in a stopped state.
.It stop
Playback or recording is stopped, and
the stream is rewound back to the starting position.
.El
.Pp
d608 11
d631 5
d643 14
@


1.69
log
@Allow multiple users to share the same aucat server. If aucat is
run by root, it binds a shared address to the socket, cranks the
process priority and drops privileges. sio_open(3) will try to
connect to the private socket first (if any), then to the shared
socket. Only one user may have connections to aucat at a given
time.

based on discussions with henning, pyr and others
ok jacek, deraadt
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.68 2010/04/21 06:13:07 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: April 21 2010 $
d27 1
d62 14
d571 1
a571 1
$ aucat -f aucat:0.mmc -t slave -q midithru:0 -i file.wav
@


1.68
log
@adds the necessary bits to join channels (ex stereo->mono) or
expand channels (ex mono->stereo).  It's switched on/off with
the ``-j'' option, (default is "on").
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.67 2010/04/07 06:47:52 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: April 7 2010 $
d390 10
@


1.67
log
@tweak previous; ok ratchov
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.66 2010/04/06 20:07:01 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: April 6 2010 $
d34 1
d93 15
@


1.66
log
@aucat (server):

  - make the ``-m mode'' option per subdevice, allowing
    subdevices to be play-only or rec-only even if the
    server is full-duplex

  - add ``monitoring'' mode (with ``-m mon''). This is a
    record-only stream from which played streams can be
    recorded (kind of ``record what you hear'').

  - allow MIDI devices to be subscribed to the controlling
    MIDI port of the server, ie what midicat does (with -f
    option), but using the -q option.

  - add flow control to the protocol, and serialize clock
    ticks (sio_onmove() calls) and data chunks.  This should
    fix certain full-duplex programs, broken with ``magic''
    block/buffer size combinations.

  - enable 3 block latency which is the minimum theoretical.
    Make -z and -b options correspond to device parameters.

  - make sio_getcap(3) the same for aucat and sun backends,
    ie return whatever is supported (``everything'' in the
    aucat case, since everything is actulally supported).

aucat (player):

  - enable ``-m mode'' option  to select between monitoring
    and recording when ``-o file'' is used.

  - plug MIDI code to non-server codepath. The MIDI control
    device is specified with the ``-q device'' option, as in
    server mode.

  - impliment lseek()'ing within files (controlled
    through MIDI). Necessary to use aucat with a MIDI
    sequencer.

midicat (thrubox):

  - rename ``-f'' flag to ``-q'', so it has the
    same name as in aucat (-f is still working)

ok jakemsr@@, tweaks from jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.65 2010/04/03 17:59:17 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: April 3 2010 $
d121 1
a121 1
.Ar play , rec
d156 2
a157 1
Select the way sub-devices are controlled by MMC (MIDI Machine Control) messages.
d164 1
a164 1
additionally, the server clock is exposed as MTC (MIDI Time Code)
d214 3
a216 2
If a sub-device is created with
.Fl t ,
d225 4
a228 3
If a sub-device is created with
.Fl t ,
and MTC (Midi Time Code) is used for synchronization, the clock
d425 1
a425 1
Clients connected to sub-devices created with
d427 1
a427 1
are controlled by the following MMC (MIDI Machine Control) messages:
a428 6
.It stop
Put the sub-device in stopped mode (the default).
In this mode, any stream attempting to start playback or recording
is paused.
Streams that are already started are not affected until they stop
and try to start again.
d447 6
d455 1
a455 1
Sub-devices created with
d457 1
a457 1
will export the server clock using MTC (MIDI Time Code), allowing non-audio
d505 1
a505 1
Streams created with
d507 1
a507 1
option are controlled by the following MIDI Machine Control (MMC) messages:
d509 6
a520 6
.It relocate
Streams are relocated to the requested time postion
relative to the beginning of the stream, at which playback
and recording must start.
If the requested position is beyond the end of file,
the stream is temporarly disabled until a valid postion is requested.
@


1.65
log
@backout last change, committed by mistake, sorry...
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.63 2009/11/04 08:24:58 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: November 4 2009 $
d36 1
d61 1
a61 1
The buffer size in frames.
d109 1
a109 1
Set the server mode.
d114 6
a119 2
.Ar duplex ,
for play-only, record-only, and full-duplex, respectively.
d121 2
a122 1
.Ar duplex .
d134 5
d289 1
a289 1
.Bl -tag -width s32lexxx -offset -indent
d310 1
a310 1
.Bl -tag -width s32lexxx -offset -indent -compact
d425 1
a425 1
.Bl -tag -width relocateXXX -offset -indent
d462 1
a462 1
.Bl -bullet -offset -indent -compact
d489 48
@


1.64
log
@doc fixes from jmc
@
text
@d17 1
a17 1
.Dd $Mdocdate: April 3 2010 $
a35 1
.Op Fl q Ar device
d60 1
a60 1
The buffer size of the audio device in frames.
d108 1
a108 1
Set the stream mode.
d113 2
a114 6
.Ar mon ,
corresponding to playback, recording and monitoring.
A monitoring stream is a fake recording stream corresponding to
the mix of all playback streams.
Multiple modes can be specified, separated by commas,
but the same stream cannot be used for both recording and monitoring.
d116 1
a116 3
.\" no spaces allowed between modes
.Ar play,rec
(i.e., full-duplex).
a127 5
.It Fl q Ar device
The
.Xr sndio 7
MIDI device to use for controlling stream volumes or
to start multiple streams synchronously.
a477 48
.Pp
If
.Nm
is used to play and record audio files, it offers
similar MIDI control.
.Nm
can open a
.Xr sndio 7
MIDI device allowing MIDI hardware or software
to control playback and recording in real time.
.Pp
A MIDI channel is assigned to each stream, and the volume
is changed using the standard volume controller (number 7).
Streams created with
.Fl t Ar slave
are controlled by the following MMC (MIDI Machine Control) messages:
.Bl -tag -width relocateXXX -offset -indent
.It start
Start all streams synchronously.
By default, streams are created in stopped state.
.It stop
Playback or recording is stopped, and
the stream is rewinded back to the starting position.
.It relocate
Streams are relocated to the requested time postion
relative to the beginning of the stream, at which playback
and recording must start.
If the requested position is beyond the end of file,
the stream is temporarly disabled until a valid postion is requested.
.El
.Pp
For instance, the following command will play a file on the
.Va aucat:0.mmc
audio device, and let full control to MIDI software or hardware
connected to the
.Va midithru:0
MIDI device:
.Bd -literal -offset indent
$ aucat -f aucat:0.mmc -t slave -q midithru:0 -i file.wav
.Ed
.Pp
At this stage,
.Nm
will start, stop and relocate automatically following all user
actions in the MIDI sequencer.
Note that the sequencer must use
.Va aucat:0
as MTC source, i.e., the audio server, not the audio player.
@


1.63
log
@tweak previous;
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.62 2009/11/03 21:31:37 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: November 3 2009 $
d36 1
d61 1
a61 1
The buffer size in frames.
d109 1
a109 1
Set the server mode.
d114 6
a119 2
.Ar duplex ,
for play-only, record-only, and full-duplex, respectively.
d121 3
a123 1
.Ar duplex .
d135 5
d490 48
@


1.62
log
@Allow any program using aucat to act as MMC slave and MTC master
transparently.  Multiple audio applications can be started
synchronously from external software/hardware supporting the
standard Start/Stop/Relocate messages. The server clock is exposed
through MTC, allowing non-audio software/hardware to be
synchronized to audio applications.
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.61 2009/10/22 15:02:12 sobrado Exp $
d17 1
a17 1
.Dd $Mdocdate: October 22 2009 $
d136 1
a136 1
into logical devices having different properties (eg. channel ranges).
d203 2
a204 2
.Fl t Ar slave ,
then, to ensure proper synchronization, the
d206 2
a207 1
action is disabled for any stream connected to it.
d210 2
a211 1
This is the number of frames between audio clock ticks, i.e. the clock resolution.
d213 1
a213 1
.Fl t Ar slave, 
d216 3
a218 2
accuracy.  For instance, 120 ticks per second at 48000Hz corresponds
to 400 frame block size.
d412 1
a412 1
.Fl t Ar slave ,
d429 1
a429 1
The given time position, is sent to MIDI clients as an MTC
d442 1
a442 1
.Fl t Ar slave ,
d465 2
a466 2
and a MIDI-controlled one
.Va aucat:0.mmc .
d476 2
a477 3
Regardless to which device a stream is connected, its playback volume
knob is exposed.
.Pp
@


1.61
log
@write UNIX-domain in a more consistent way; while here, replace a
few remaining ".Tn UNIX" macros with ".Ux" ones.

pointed out by ratchov@@, thanks!

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.60 2009/10/22 12:35:53 sobrado Exp $
d38 1
d42 1
d139 1
a139 1
correponds to the
d144 11
d201 15
d396 5
a400 2
It allows MIDI hardware or software to be used to control
the volume of played streams.
d407 69
@


1.60
log
@use the UNIX-related macros (.At and .Ux) where appropriate.

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.59 2009/10/05 07:05:24 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: October 5 2009 $
d91 2
a92 2
.Ux
domain socket.
@


1.59
log
@add -d flag. When started in server mode, if the -d flag is
used aucat and midicat don't daemonize and log on stderr.
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.58 2009/09/27 11:51:20 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: September 27 2009 $
d90 3
a92 1
Listen for incoming connections on a Unix domain socket.
@


1.58
log
@remove all debug traces
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.57 2009/08/25 21:37:18 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: August 25 2009 $
d26 1
a26 1
.Op Fl lnu
d68 6
@


1.57
log
@sub-devices exposed by aucat and sockets it's listening on are
no longer the same. Rephrase ``audio(4) device or aucat(1) socket''
as ``sndio(7) audio device''.
suggested by oga@@, tweaks from jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.56 2009/08/21 21:25:31 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: August 21 2009 $
a189 5
If sent
.Dv SIGUSR1
or
.Dv SIGUSR2 ,
it increases or decreases debug level, respectively.
a396 3
.It Ev AUCAT_DEBUG
The debug level:
may be a value between 0 and 4.
@


1.56
log
@tweak previous;
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.55 2009/08/21 16:48:03 ratchov Exp $
d37 1
a37 1
.Op Fl s Ar socket
d73 2
a74 4
.Xr audio 4
device or
.Nm
socket to use for playing and/or recording.
d84 1
a84 1
Listen for incoming connections on Unix domain sockets.
d87 1
a87 3
instead of the regular
.Xr audio 4
device for audio input and output
d89 5
a93 2
The default socket name is
.Pa default
d121 13
a133 7
.It Fl s Ar socket
Add the name
.Ar socket
to the list of sockets to listen on.
.Ar socket
cannot contain '/'.
Meaningful in server mode only.
d200 1
a200 1
and sockets
d233 1
a233 1
If no sockets
d237 2
a238 1
the default socket is specified as the last argument.
d406 2
a407 5
Name of the
.Nm
socket to connect to, or path to the
.Xr audio 4
device to use if the
d433 6
a438 2
additional socket for output to channels 2:3 only (rear speakers
on most cards):
d445 6
a450 2
in server mode creating the default socket with low volume and
an additional socket for high volume output:
@


1.55
log
@make aucat(1) expose a MIDI device to control server behaviour in
realtime.  For now only the playback volume of individual streams can be
changed/monitored. To each stream is assigned a MIDI channel; the volume
is changed/monitored using the standard controller number 7.
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.54 2009/07/25 08:44:27 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: July 25 2009 $
d361 1
a361 1
To each stream is assigned a MIDI channel, and the volume
d365 1
a365 1
for instance for monitoring or as feed-back for motorized
@


1.54
log
@Currently midi capable programs can control midi hardware, but
cannot cooperate with other programs.  The aim of this change is
to allow any program to send midi data to other programs as they
were midi hardware. For instance, this change should solve the
longstanding problem of using a midi sequencer with software
synthesizers. More precisely:

 - new midicat(1) utility (actually hardlink to aucat(1)).
   it creates software midi thru boxes, allowing programs
   to send midi messages to other programs as they were
   midi(4) hardware.

 - new midi api in libsndio (see mio_open(3)), to access
   midi(4) devices and midicat(1) sockets in a uniform way.

 - new device naming scheme <service>:<unit>[.<option>],
   common to audio and midi.

 - new sndio(7) manual describing concepts and naming

The current audio device naming still works, but people having
scripts or configuration files containing device names could read
the sndio(7) man page and slowly start updating device names.

discussed with jakemsr@@ and deraadt@@, help form jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.53 2009/05/09 09:50:40 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: May 9 2009 $
d353 14
@


1.53
log
@clarify what happens if no device is specified and/or no
sockets are specified, with help from jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.52 2009/04/11 10:24:21 jakemsr Exp $
d17 1
a17 1
.Dd $Mdocdate: April 11 2009 $
d38 1
d129 9
d433 2
a434 1
.Xr audio 4
@


1.52
log
@- make legacy mode use sio_open(3) (sndio) API
- parse .au headers in legacy mode
- support playback of ulaw and alaw encoded .au and .wav files in
legacy mode

ok ratchov
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.51 2009/04/10 21:18:11 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: April 10 2009 $
d215 8
a222 13
is specified but
.Fl u
is given anyway,
any
.Fl Ccer
options specified before
.Fl ios
options are applied both to the corresponding file
and the default audio device;
if they are specified after
.Fl ios
options,
they will be applied only to the default audio device.
@


1.51
log
@avoid Xr to self;
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.50 2009/04/10 18:51:44 ratchov Exp $
d365 4
a368 6
will attempt to play data from Sun .au files as monaural 8-bit ulaw
samples with a sampling frequency of 8000 Hz.
However,
.Nm
will not fail if the audio device cannot be configured for these
parameters.
@


1.50
log
@Explain the AUDIODEVICE env. variable similarly to how sio_open(3) does.
discussed with jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.49 2009/03/17 21:26:44 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: March 17 2009 $
d384 1
a384 1
.Xr aucat 1
@


1.49
log
@- rename the arg to -b "nframes" and sync usage()
- grammar fix for the server section

from Thomas Pfaff
ok ratchov
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.48 2009/03/17 07:19:13 ratchov Exp $
d73 3
a75 3
device to use for playing and/or recording.
The default is
.Pa /dev/audio .
d383 7
a389 1
The audio device to use.
@


1.48
log
@DESCRIPTION should also note aucat's ability to act as a server
from jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.47 2009/02/27 17:35:33 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: February 27 2009 $
d27 1
a27 1
.Op Fl b Ar nsamples
d56 1
a56 1
.It Fl b Ar nsamples
d58 3
a60 2
This is the number of samples that will be buffered before being played
and controls the playback latency.
d339 1
a339 1
command can be used to give higher priority to
d341 1
a341 1
process to.
@


1.47
log
@say that aucat can act as audio server in the NAME section
ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.46 2009/02/04 18:44:05 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: Febuary 4 2009 $
d47 2
a48 1
It can play, convert, and mix multiple input files simultaneously.
@


1.46
log
@document server mode with help from jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.45 2009/02/03 19:44:58 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: February 3 2009 $
d22 1
a22 1
.Nd manipulate linear audio streams
@


1.45
log
@in server mode, create /tmp/aucat-userid/ directory with
permissions 0700, and create sockets in it. This prevents
one local user to eavesdrop or disturb audio programs of
other users.

if you're using the ``-s socket'' option with an absolute
path as argument, please update it to use a socket name.

requested by many, bits from jakemsr and otto
ok jakemsr
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.44 2009/01/23 17:52:13 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: January 23 2009 $
d306 40
@


1.44
log
@catch SIGHUP and SIGTERM too, to ensure that recorded files are
properly closed and sockets are cleaned up.
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.43 2009/01/10 22:13:07 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: January 10 2009 $
d90 3
a92 3
The default socket path is
.Pa /tmp/aucat.sock
but other paths can be used with the
d120 1
a120 1
Add the path
d123 2
d368 1
a368 1
$ aucat -l -s /tmp/aucat.sock -c 2:3 -s /tmp/aucat.sock.rear
d376 1
a376 1
$ aucat -l -v 65 -s /tmp/aucat.sock -v 127 -s /tmp/aucat.sock.max
@


1.43
log
@tweak previous;
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.42 2009/01/10 20:02:28 ratchov Exp $
d166 4
a169 1
.Dv SIGINT ,
@


1.42
log
@add "loopback" mode in which input is connected to the output.
This is useful to mix, demultiplex, resample or reencode audio
files off-line.
tweak + ok jakemsr
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.41 2008/12/05 07:03:52 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: December 5 2008 $
d110 1
a110 1
audio files off-line.
d352 1
a352 1
The following will split a stereo file in two mono files:
@


1.41
log
@expand slightly the description of adjusting files/sockets; ok ratchov
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.40 2008/11/17 09:40:09 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: November 17 2008 $
d26 1
a26 1
.Op Fl lu
d105 6
d350 5
@


1.40
log
@- rename -s arg name to "socket"
- condense EXAMPLES into a single screenful

ok ratchov
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.39 2008/11/17 07:36:43 jmc Exp $
d184 1
a184 2
are applied to
.Ar file .
d208 2
a209 3
.Fl io
options are applied both to
.Ar file
d212 1
a212 1
.Fl io
@


1.39
log
@tweak previous man page changes, and sync usage();
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.38 2008/11/17 07:05:09 ratchov Exp $
d37 1
a37 1
.Op Fl s Ar file
d113 4
a116 2
.It Fl s Ar file
Add this path to the list of sockets to listen on.
a334 14
The following command will record a stereo s16le stream at
44100Hz from the default device.
If necessary, the stream will be converted and/or resampled
to match parameters supported by the device:
.Bd -literal -offset indent
$ aucat -o file.raw
.Ed
.Pp
The following command will play a stereo s16le stream at
44100Hz on the default device, doing any necessary conversions:
.Bd -literal -offset indent
$ aucat -i file.raw
.Ed
.Pp
a347 18
The following will play two s18le mono files, one on each channel:
.Bd -literal -offset indent
$ aucat -e s18le -c 0:0 -i f1.raw -c 1:1 -i f2.raw
.Ed
.Pp
The following will mix and play two files and record a third one in
full-duplex:
.Bd -literal -offset indent
$ aucat -i drums.raw -i bass.raw -o guitar.raw
.Ed
.Pp
The following will start
.Nm
in server mode with the default parameters:
.Bd -literal -offset indent
$ aucat -l
.Ed
.Pp
d350 1
a350 1
in server mode with the default parameters, but will create an
@


1.38
log
@in server mode full-duplex device is no more requierd, remove
corresponding entry from BUGS section
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.37 2008/11/17 07:04:13 ratchov Exp $
d84 1
a84 1
A client might use
d98 2
a99 2
.Va play ,
.Va rec ,
d101 2
a102 2
.Va duplex ,
for play-only, record-only and full-duplex, respectively.
d104 1
a104 1
.Va duplex .
d115 1
a115 3
Meaningful in server mode only (i.e. when the
.Fl l
option is used).
d169 1
a169 1
.Pq Fl o
d179 2
a180 2
.Fl o
and
d373 1
a373 1
in server mode with the default parameters.
d382 1
a382 1
on most cards).
d389 2
a390 2
in server mode creating the defaut socket with low volume and
an additional socket for high volume output.
@


1.37
log
@allow aucat to run as server in play-only and record-only mode, so
it can be used on play-only, record-only and half-duplex devices.
ok jakemsr
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.36 2008/11/16 20:46:16 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: November 16 2008 $
a413 4
.Pp
In server mode, a full-duplex
.Xr audio 4
device is required.
@


1.36
log
@aucat stops the device when idle, remove the corresponding
entry from BUGS section.
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.35 2008/11/16 20:44:03 ratchov Exp $
d34 1
d95 10
@


1.35
log
@allow aucat to listen on multiple sockets. Each socket carries its
channel and volume settings allowing multiple configuration to
coexist. Mostly useful for envy(4)-like devices, but can be used
to force different apps to use different settings.
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.34 2008/11/16 18:34:04 jmc Exp $
a402 7
.Pp
In server mode
.Nm
will continue playing and recording even if there are no clients.
This consumes system resources unnecessarily, thus starting
.Nm
at system or session startup is not recommended.
@


1.34
log
@tweak previous;
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.33 2008/11/16 16:30:22 ratchov Exp $
d36 1
d82 1
a82 1
Listen for incoming connections on a Unix domain socket.
d91 3
a93 3
but it can be changed with the
.Ev AUCAT_SOCKET
environment variable.
d102 5
d157 3
a159 3
Settings for input
.Pq Fl i
and output
d161 4
a164 2
files can be changed using the
.Fl Ccehrx
d167 1
a167 1
.Fl Ccehrx
d169 1
a169 2
.Fl i
or
d171 2
d316 1
a316 1
.Bl -tag -width "AUCAT_SOCKETXXX" -compact
a319 2
.It Ev AUCAT_SOCKET
Path to the Unix domain socket to use.
d360 24
@


1.33
log
@Make clients inherit the volume parameter when the -v option is used in
server mode. It gives the maximum volume a client may have. This wastes
dynamic range, but allows volume to stay constant when other clients
connect or disconnect.
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.32 2008/11/11 19:44:19 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: November 11 2008 $
d114 2
a115 2
Reducing the volume in advance reduces client's dynamic range,
but allows client volume to stay independend from the number
d117 3
a119 3
A good compromise is to use -4dB attenuation (12 volume units)
for each additional client expected (eg. 115 if 2 clients are expected,
103 for 3 clents, and so on).
@


1.32
log
@remove the SIGNALS sections, describe signals in DESCRIPTION
from jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.31 2008/11/11 07:47:48 jmc Exp $
d113 7
@


1.31
log
@escape minus signs;
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.30 2008/11/10 23:25:37 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: November 10 2008 $
d133 11
a307 7
.El
.Sh SIGNALS
.Bl -tag -width "SIGUSR1, SIGUSR2X" -compact
.It Va SIGINT
Terminate saving recorded files.
.It Va SIGUSR1 , Va SIGUSR2
Increase or decrease debug level respectively.
@


1.30
log
@add a per-stream ``soft volume'' knob and the corresponding -v option.
The code will be useful later for the volume knob in the sndio API.
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.29 2008/11/04 22:20:08 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: November 4 2008 $
d112 1
a112 1
corresponding to -42dB and -0dB attenuation.
@


1.29
log
@conversions are smarter now, remove corresponding ``BUGS'' item
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.28 2008/10/30 18:14:51 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: October 30 2008 $
d36 1
d109 4
@


1.28
log
@since people often ask, add BUGS entry to explain why
aucat should be started automatically yet at system startup
help from jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.27 2008/10/26 11:55:22 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: October 26 2008 $
a351 3
.Pp
CPU usage is the same for all conversions.
It should be smaller for simpler ones.
@


1.27
log
@sync SYNOPSIS and usage();
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.26 2008/10/26 08:49:43 ratchov Exp $
d359 11
@


1.26
log
@add minimal server capability to aucat(1). When started in server
mode, it listens on an unix socket and mixes/demultiplexes any number
of full-duplex streams, doing necessary format conversions and
resampling on the fly.

programs can use the new libsa(3) library to play and record audio.
The library provides a very simple API to connect to the audio server;
if aucat(1) isn't running, it uses the audio(4) driver transparently
instead.
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.25 2008/06/03 19:27:42 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: June 3 2008 $
d26 1
a26 1
.Op Fl lqu
@


1.25
log
@group the descriptions for -CcHhEeRr in such a way as to avoid
unneccessarily duplicating text;

ok ratchov jakemsr
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.24 2008/06/02 23:38:05 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: June 2 2008 $
d26 2
a27 1
.Op Fl qu
a29 1
.Op Fl E Ar enc
a31 1
.Op Fl H Ar fmt
a34 1
.Op Fl R Ar rate
a35 1
.Op Fl X Ar policy
d51 5
a55 1
.Bl -tag -width "-m mmmmmmmm "
d60 1
a60 1
The range of channel numbers on the output or input stream, respectively.
d62 2
a63 2
.It Fl E Ar enc , Fl e Ar enc
Encoding of the output or input stream, respectively (see below).
d71 2
a72 2
.It Fl H Ar fmt , Fl h Ar fmt
File format of the output or input stream, respectively (see below).
d79 13
d97 2
a98 4
.It Fl q
Do not print progress information; run quietly.
.It Fl R Ar rate , Fl r Ar rate
Sample rate in Hertz of the output or input stream, respectively.
d106 1
a106 1
.Fl CcEeRr
d108 1
a108 1
.It Fl X Ar policy
d110 2
a111 1
recorded data fast enough.
d115 2
a116 14
(the default) then samples that cannot be written are discarded.
If the policy is
.Dq sync
then samples are discarded, but the same amount of silence will be written
once the stream is unblocked, in order to reach the right position in time.
If the policy is
.Dq error
then the stream is closed permanently.
.It Fl x Ar policy
Action when the input stream cannot provide
data to play fast enough.
If the policy is
.Dq ignore
(the default) then silence is played.
d119 1
a119 1
then silence is played, but the same amount of samples will be discarded
d121 2
d133 1
a133 1
.Fl CcEeHhRrXx
d136 1
a136 1
.Fl CcEeHhRrXx
d146 1
a146 1
.Fl CcEeRr
d152 1
a152 1
.Fl CcEeRr
d164 1
a164 1
.Fl CcEeRr
a175 2
.Fl H
and
d177 1
a177 1
options.
a195 2
.Fl E
and
d197 1
a197 1
options.
d284 1
a284 1
.Bl -tag -width "AUDIODEVICEXXX" -compact
d288 2
d292 7
d325 1
a325 1
$ aucat -R 96000 -C 2:3 -o file1.raw -C 6:7 -o file2.raw
@


1.24
log
@fix up ENVIRONMENT a little;
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.23 2008/06/02 23:18:28 jmc Exp $
d55 5
a59 2
.It Fl C Ar min : Ns Ar max
The range of channel numbers on the output stream.
d61 2
a62 8
.It Fl c Ar min : Ns Ar max
The range of channel numbers on the input stream.
The default is 0:1, i.e. stereo.
.It Fl E Ar enc
Encoding of the output stream (see below).
The default is signed, 16-bit, native byte order.
.It Fl e Ar enc
Encoding of the input stream (see below).
d70 2
a71 5
.It Fl H Ar fmt
File format of the output stream (see below).
The default is auto.
.It Fl h Ar fmt
File format of the input stream (see below).
d85 2
a86 5
.It Fl R Ar rate
Sample rate in Hertz of the output stream.
The default is 44100Hz.
.It Fl r Ar rate
Sample rate in Hertz of the input stream.
@


1.23
log
@- tweak previous
- simplify -io descriptions
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.22 2008/06/02 17:09:51 ratchov Exp $
d294 1
a294 3
.Bl -tag -width AUDIODEVICE
.It Ev AUDIODEVICE
The audio device to use.
d298 2
@


1.22
log
@document latest changes: -d flag is replaced by AUCAT_DEBUG
environment variable, new -xX options

bits from eric, ok jakemsr
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.21 2008/05/29 13:53:47 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: May 29 2008 $
a80 7
The format of the file is specified by the last
.Fl c ,
.Fl e ,
.Fl h ,
and
.Fl r
options.
a85 7
The format of the file is specified by the last
.Fl C ,
.Fl E ,
.Fl H ,
and
.Fl R
options.
d110 1
a110 1
.Ar ignore
d113 1
a113 1
.Ar sync
d117 2
a118 2
.Ar error
then the stream is closed permanenty.
d123 1
a123 1
.Ar ignore
d126 1
a126 1
.Ar sync
d130 2
a131 2
.Ar error
then the stream is closed permanenty.
d143 1
a143 1
option specified before an
d147 1
a147 1
is applied to
@


1.21
log
@try to clearly describe interaction between -CcEeHhRr and -fiou options;
written with help from ratchov and jakemsr;

ok ratchov
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.20 2008/05/26 08:36:35 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: May 26 2008 $
a28 1
.Op Fl d Ar level
d38 2
a60 3
.It Fl d Ar level
The debug level:
may be a value between 0 and 4.
d119 27
d153 1
a153 1
.Fl CcEeHhRr
d156 1
a156 1
.Fl CcEeHhRr
d311 3
a369 2
.Pp
Buffer overruns and underruns are not handled.
@


1.20
log
@signpost encodings and formats a little better;
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.19 2008/05/26 08:32:11 jmc Exp $
d114 15
a128 12
Don't try to automatically determine the optimal parameters for the
audio device;
instead use the parameters specified by the last
.Fl C ,
.Fl c ,
.Fl E ,
.Fl e ,
.Fl H ,
.Fl h ,
.Fl R ,
and
.Fl r
d130 3
a132 1
For the
d134 1
a134 1
and
d136 13
a148 1
options, if
d150 19
a168 2
is used then parameters must be specified before it.
.El
@


1.19
log
@put -q in the right place;
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.18 2008/05/26 07:56:17 jakemsr Exp $
d64 1
a64 1
Encoding of the output stream.
d67 1
a67 1
Encoding of the input stream.
d136 5
d158 5
@


1.18
log
@
add -q option which enables "quiet" operation.

ok ratchov@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.17 2008/05/23 12:56:27 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: May 23 2008 $
d26 1
a26 1
.Op Fl uq
d105 2
a112 2
.It Fl q
Do not print progress information; run quietly.
@


1.17
log
@various fixes for aucat.1, and sync usage(); ok ratchov
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.16 2008/05/23 07:15:46 ratchov Exp $
d26 1
a26 1
.Op Fl u
d111 2
@


1.16
log
@add support for:
 - recording, full-duplex operation
 - format conversions and resampling on the fly
 - mixing on the fly of multiple inputs of different formats
 - up to 16 channels, simplistic "routing" of channel ranges
 - more linear encodings (in raw and wav files)
the old behaviour is fully preserved if none of the new -i and -o
options are used.

code and fixes from jakemsr@@ and eric@@, suggestions by others.
ok "go ahead" deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d17 1
a17 1
.Dd $Mdocdate$
d46 1
a46 1
Simultaneously, it can play, convert, and mix multiple input files.
d51 1
d55 2
a56 3
Range of channel numbers on the output stream specified by
.Fl o
options that follow (the default is 0:1, i.e. stereo).
d58 2
a59 3
Range of channel numbers in the input stream specified by
.Fl i
options that follow (the default is 0:1, i.e. stereo).
d64 2
a65 3
Encoding of the output stream specified by the
.Fl o
options that follow (the default is signed, 16-bit, native byte order).
d67 8
a74 3
Encoding of the input stream specified by
.Fl i
options that follow (the default is signed, 16-bit, native byte order).
d76 2
a77 3
File format of the output stream specified by the
.Fl o
options that follow (the default is auto).
d79 2
a80 7
File format of the input stream specified by
.Fl i
options that follow (the default is auto).
.It Fl f Ar device
.Xr audio 4
device to use for playing and/or recording (the default is
.Pa /dev/audio ) .
d84 1
d86 1
a86 1
.Fl c ,
d96 1
d98 1
a98 1
.Fl C ,
d106 2
a107 3
Sample rate in Hertz of the output stream specified by the
.Fl o
options that follow (the default is 44100Hz).
d109 2
a110 3
Sample rate in Hertz of the input stream specified by
.Fl i
options that follow (the default is 44100Hz).
d115 2
d118 3
a120 1
.Fl C ,
a121 2
.Fl e ,
.Fl c ,
d125 1
a125 1
As for
d129 1
a129 1
options, if the
d131 1
a131 1
option is used, then parameters must be specified before it.
a134 1
.Pp
d138 1
a138 1
It's recommended to use this format since it has no limitations.
d144 1
a144 1
the file must support the
d146 1
a146 1
operation (eg. pipes do not support it).
d212 1
a212 3
options are specified,
.Nm
will run in legacy mode, in which case
d214 1
a214 1
does not convert sample formats or sampling rates. 
d216 2
a217 2
.Fl f Ar device
are ignored and all other arguments are assumed to be names of files.
d244 1
a244 1
If necesseary, the stream will be converted and/or resampled
d281 1
d301 1
a301 1
16 bits (ie 97dB dynamic) are largely enough for most applications though.
@


1.15
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.14 2007/03/21 08:12:59 jmc Exp $
d3 1
a3 1
.\" Copyright (c) 1997 Kenneth Stailey.  All rights reserved.
d5 3
a7 30
.\" This code is derived from software contributed to Berkeley by
.\" the Institute of Electrical and Electronics Engineers, Inc.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
d9 7
d22 1
a22 1
.Nd concatenate and play audio files
d25 7
d33 7
a39 1
.Ar
d43 4
a46 2
utility reads files sequentially, writing them to the specified device.
By default,
d48 86
a133 6
plays audio through the
.Pa /dev/audio
device.
The
.Ar file
operands are processed in command line order.
d135 1
a135 10
If a Sun .au header is
detected it is skipped over and not copied to
.Pa /dev/audio .
If a Microsoft .wav header (RIFF) is detected it is interpreted to
select the right audio encoding for playback and the data chunk of the
file is copied to
.Pa /dev/audio ,
given that the audio driver directly supports the encoding.
Otherwise, the entire file is copied to
.Pa /dev/audio .
d137 14
a150 4
The options are as follows:
.Bl -tag -width "-f deviceXX"
.It Fl f Ar device
Specifies an alternate audio device.
d153 87
a239 1
.Ex -std aucat
d245 38
a284 1
.Xr cdio 1 ,
d287 2
a288 2
.Sh HISTORY
An
d290 15
a304 2
utility appeared in
.Ox 2.0 .
@


1.14
log
@tweaks;
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.13 2007/03/21 00:33:39 uwe Exp $
d37 1
a37 1
.Dd January 2, 1997
@


1.13
log
@describe .wav support in one sentence
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.12 2004/07/30 11:43:02 jmc Exp $
d46 1
a46 1
.Ar file ...
d59 1
d77 1
a77 3
The
.Nm
utility exits 0 on success or \*(Gt0 if an error occurred.
@


1.12
log
@- better width for options list
- some Xrs from Alexey E. Suslikov;
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.11 2001/05/01 17:58:01 aaron Exp $
d62 6
a67 2
Otherwise, the
entire file is copied to
@


1.11
log
@Remove completely redundant introductory sentences in ENVIRONMENT sections.
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.10 2000/11/09 17:52:03 aaron Exp $
d67 1
a67 1
.Bl -tag -width Ds
d74 1
a74 1
utility exits 0 on success or >0 if an error occurred.
d81 2
@


1.10
log
@Change all option list specifications to ".Bl -tag -width Ds". Most man
pages just needed their -width parameter tweaked to "Ds", which provides
a nice width of 6 constant characters. For consistency more than anything.
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.9 2000/07/01 19:54:36 millert Exp $
a75 2
The following environment variables affect the execution of
.Nm aucat :
@


1.9
log
@Add -f option to specify audio device, honor AUDIODEVICE environment vairable,
and some KNF.
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.8 2000/03/23 21:10:13 aaron Exp $
d67 1
a67 1
.Bl -tag -width "-f device"
@


1.8
log
@Fix some formatting problems I missed before.
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.7 1999/07/04 11:53:51 aaron Exp $
d45 2
a46 1
.Op Ar
d50 6
a55 2
utility reads files sequentially, writing them to
.Pa /dev/audio .
d66 6
d75 7
d83 1
@


1.7
log
@correct use of .Nm; some other formatting nits
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.6 1999/07/02 20:11:44 aaron Exp $
d53 2
a54 1
operands are processed in command line order.  If a Sun .au header is
@


1.6
log
@consistent .Dd usage; proper format is: .Dd Month DD, YYYY
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.5 1999/06/05 01:21:18 aaron Exp $
d48 3
a50 2
.Nm aucat
utility reads files sequentially, writing them to /dev/audio.
d54 5
a58 2
detected it is skipped over and not copied to /dev/audio. Otherwise, the
entire file is copied to /dev/audio.
d61 1
a61 1
.Nm aucat
@


1.5
log
@- remove trailing white space
- remove arguments from .Os macros
- remove arguments from .Nm macros, where appropriate
- some more Dq/Sq/Ql insanity
- still lots to do in the usr.bin tree... :/
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.4 1998/09/23 04:32:34 aaron Exp $
d37 1
a37 1
.Dd Jan 2, 1997
@


1.4
log
@usr.bin/ man page repairs, a - e
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.3 1998/03/10 04:51:02 millert Exp $
d39 1
a39 1
.Os OpenBSD 2.0
d42 1
a42 1
.Nd concatenate and play audio files 
@


1.3
log
@use .Ox
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.2 1997/01/05 19:00:50 kstailey Exp $
d53 1
a53 1
detected it is skipped over and not copied to /dev/audio otherwise the
d58 1
a58 1
utility exits 0 on success, and >0 if an error occurs.
d62 1
a62 1
A
@


1.2
log
@minor tweaks; htonl() -> ntohl(); added SEE ALSO
@
text
@d1 1
a1 1
.\"	$OpenBSD: aucat.1,v 1.1 1997/01/02 22:12:27 kstailey Exp $
d64 2
a65 1
utility appeared in OpenBSD 2.0
@


1.1
log
@new utility for playing sound files
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d59 2
@

