head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.62
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.60
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.56
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.58
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.50
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.54
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.52
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.48
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.46
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.44
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.42
	OPENBSD_5_0:1.2.0.40
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.38
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.36
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.32
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.34
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.30
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.28
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.26
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.24
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.22
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.20
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.18
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.16
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.14
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.12
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.10
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.8
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.6
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.4
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.1.0.2
	OPENBSD_3_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.2
date	2002.02.16.21.27.45;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.17.21.31.02;	author jason;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@/*	$OpenBSD: fgen.h,v 1.1 2001/08/17 21:31:02 jason Exp $	*/
/*	$NetBSD: fgen.h,v 1.4 2001/06/13 10:46:05 wiz Exp $	*/
/*
 * fgen.h -- stuff for the fcode tokenizer.
 *
 * Copyright (c) 1998 Eduardo Horvath.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Eduardo Horvath.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* Type of a Cell */
typedef long Cell;

/* Token from the scanner. */
struct tok {
	int type;
	char *text;
};

#define TOKEN struct tok
#define YY_DECL TOKEN* yylex(void)

#define FCODE	0xF00DBABE
#define MACRO	0xFEEDBABE

/* Defined fcode and string. */
struct fcode {
	char *name;
	long num;
	int type;
	struct fcode *l;
	struct fcode *r;
};

/* macro instruction as separate words */
struct macro {
	char *name;
	char *equiv;
	int type;
	struct macro *l;
	struct macro *r;
};

/*
 * FCode header -- assumes big-endian machine, 
 *	otherwise the bits need twiddling.
 */
struct fcode_header {
	char	header;
	char	format;
	short	checksum;
	int	length;
};

/* Tokenizer tokens */
enum toktypes { 
	TOK_OCTAL = 8,
	TOK_DECIMAL = 10,
	TOK_HEX = 16,

	TOK_NUMBER, 
	TOK_STRING_LIT, 
	TOK_C_LIT,
	TOK_PSTRING, 
	TOK_TOKENIZE,
	TOK_COMMENT, 
	TOK_ENDCOMMENT,
	TOK_COLON, 
	TOK_SEMICOLON, 
	TOK_TOSTRING,
	
	/* These are special */
	TOK_AGAIN,
	TOK_ALIAS,
	TOK_GETTOKEN,
	TOK_ASCII,
	TOK_BEGIN,
	TOK_BUFFER,
	TOK_CASE,
	TOK_CONSTANT,
	TOK_CONTROL,
	TOK_CREATE,
	TOK_DEFER,
	TOK_DO,
	TOK_ELSE,
	TOK_ENDCASE,
	TOK_ENDOF,
	TOK_EXTERNAL,
	TOK_FIELD,
	TOK_HEADERLESS,
	TOK_HEADERS,
	TOK_IF,
	TOK_LEAVE,
	TOK_LOOP,
	TOK_OF,
	TOK_REPEAT,
	TOK_THEN,
	TOK_TO,
	TOK_UNTIL,
	TOK_VALUE,
	TOK_VARIABLE,
	TOK_WHILE,
	TOK_OFFSET16,

	/* Tokenizer directives */
	TOK_BEGTOK,
	TOK_EMIT_BYTE,
	TOK_ENDTOK,
	TOK_FLOAD,

	TOK_OTHER
};
@


1.1
log
@fgen from NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d45 1
a45 1
#define YY_DECL TOKEN* yylex __P((void))
@

