head	1.17;
access;
symbols
	OPENBSD_6_1:1.17.0.12
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.17.0.8
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.4
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.17.0.6
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.2
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.14.0.16
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.14
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.10
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.8
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.6
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.4
	OPENBSD_5_0:1.14.0.2
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.13.0.4
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.2
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.12.0.12
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.14
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.10
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.8
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.6
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.4
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.2
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.10.0.4
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.2
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.9.0.4
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.2
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.8.0.4
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7;
locks; strict;
comment	@ * @;


1.17
date	2015.02.06.23.21.59;	author millert;	state Exp;
branches;
next	1.16;
commitid	STdsVrA5MGLlnbLm;

1.16
date	2015.01.16.06.40.08;	author deraadt;	state Exp;
branches;
next	1.15;
commitid	Uu5nFG3wCl0LACBb;

1.15
date	2014.11.08.22.13.47;	author brad;	state Exp;
branches;
next	1.14;
commitid	OcoKBROyfBJrmpM9;

1.14
date	2011.07.17.12.17.10;	author aschrijver;	state Exp;
branches;
next	1.13;

1.13
date	2010.07.02.20.48.48;	author nicm;	state Exp;
branches;
next	1.12;

1.12
date	2006.09.20.14.29.03;	author otto;	state Exp;
branches;
next	1.11;

1.11
date	2006.09.19.05.52.23;	author otto;	state Exp;
branches;
next	1.10;

1.10
date	2006.02.09.09.54.47;	author otto;	state Exp;
branches;
next	1.9;

1.9
date	2004.10.03.19.23.02;	author otto;	state Exp;
branches;
next	1.8;

1.8
date	2004.01.18.19.05.24;	author otto;	state Exp;
branches;
next	1.7;

1.7
date	2003.09.09.05.04.27;	author tedu;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.24.18.43.11;	author tedu;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.23.22.05.23;	author tedu;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.23.07.52.18;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2003.06.22.22.38.50;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2003.06.22.22.24.13;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2003.06.22.22.20.07;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.17
log
@SIZE_MAX is standard, we should be using it in preference to the
obsolete SIZE_T_MAX.  OK miod@@ beck@@
@
text
@/*	$OpenBSD: mmfile.c,v 1.16 2015/01/16 06:40:08 deraadt Exp $	*/

/*-
 * Copyright (c) 1999 James Howard and Dag-Erling Coïdan Smørgrav
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/mman.h>
#include <sys/stat.h>

#include <err.h>
#include <fcntl.h>
#include <stdlib.h>
#include <unistd.h>

#include "grep.h"

#ifndef SMALL

#define MAX_MAP_LEN 1048576

mmf_t *
mmopen(char *fn, char *mode)
{
	mmf_t *mmf;
	struct stat st;

	if (*mode != 'r')
		return NULL;

	mmf = grep_malloc(sizeof *mmf);
	if ((mmf->fd = open(fn, O_RDONLY)) == -1)
		goto ouch1;
	if (fstat(mmf->fd, &st) == -1)
		goto ouch2;
	if (st.st_size > SIZE_MAX) /* too big to mmap */
		goto ouch2;
	if (!S_ISREG(st.st_mode)) /* only mmap regular files */
		goto ouch2;
	mmf->len = (size_t)st.st_size;
	mmf->base = mmap(NULL, mmf->len, PROT_READ, MAP_PRIVATE, mmf->fd, (off_t)0);
	if (mmf->base == MAP_FAILED)
		goto ouch2;
	mmf->ptr = mmf->base;
	mmf->end = mmf->base + mmf->len;
	madvise(mmf->base, mmf->len, MADV_SEQUENTIAL);
	return mmf;

ouch2:
	close(mmf->fd);
ouch1:
	free(mmf);
	return NULL;
}

void
mmclose(mmf_t *mmf)
{
	munmap(mmf->base, mmf->len);
	close(mmf->fd);
	free(mmf);
}

char *
mmfgetln(mmf_t *mmf, size_t *l)
{
	static char *p;

	if (mmf->ptr >= mmf->end)
		return NULL;
	for (p = mmf->ptr; mmf->ptr < mmf->end; ++mmf->ptr)
		if (*mmf->ptr == '\n')
		    break;

	*l = mmf->ptr - p;
	++mmf->ptr;
	return p;
}

#endif
@


1.16
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: mmfile.c,v 1.15 2014/11/08 22:13:47 brad Exp $	*/
d57 1
a57 1
	if (st.st_size > SIZE_T_MAX) /* too big to mmap */
@


1.15
log
@Check the mode flag being passed in to mmopen() instead of ignoring it.

Pointed out by LLVM.

mmfile.c:51:7: warning: explicitly assigning a variable of type 'char *' to itself [-Wself-assign]

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mmfile.c,v 1.14 2011/07/17 12:17:10 aschrijver Exp $	*/
a28 1
#include <sys/param.h>
@


1.14
log
@Fix spacing

OK otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mmfile.c,v 1.13 2010/07/02 20:48:48 nicm Exp $	*/
d50 2
a51 2
	/* XXX ignore mode for now */
	mode = mode;
@


1.13
log
@Do not include mmap support with -DSMALL.

ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: mmfile.c,v 1.12 2006/09/20 14:29:03 otto Exp $	*/
d93 3
a95 3
    for (p = mmf->ptr; mmf->ptr < mmf->end; ++mmf->ptr)
        if (*mmf->ptr == '\n')
            break;
@


1.12
log
@That should be S_ISREG, dunno why I committed this wrong version;
spotted by hshoexer@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mmfile.c,v 1.11 2006/09/19 05:52:23 otto Exp $	*/
d40 2
d101 2
@


1.11
log
@Use S_IS* macros insted of masking with S_IF* flags. The latter may
have multiple bits set, which lead to surprising results. Spotted by
Paul Stoeber, more to come. ok millert@@ pedro@@ jaredy@@ djm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mmfile.c,v 1.10 2006/02/09 09:54:47 otto Exp $	*/
d58 1
a58 1
	if (!S_ISDIR(st.st_mode)) /* only mmap regular files */
@


1.10
log
@delint; remove redundant vars and functions; ok jaredy@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mmfile.c,v 1.9 2004/10/03 19:23:02 otto Exp $	*/
d58 1
a58 1
	if ((st.st_mode & S_IFREG) == 0) /* only mmap regular files */
@


1.9
log
@Remove block based mmap optimization. There are newline problems
(PR 3940, 3941) which can be fixed, but if a match starts at the
end of a block and continues into the next block, no match will be
found.  Measurements by millert@@ showed that the improvements of
this optimization are non-measurable anyway. Diff from Alexander Taler.

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mmfile.c,v 1.8 2004/01/18 19:05:24 otto Exp $	*/
a97 12
}

long
mmtell(mmf_t *mmf)
{
	return mmf->ptr - mmf->base;
}

void
mmrewind(mmf_t *mmf)
{
	mmf->ptr = mmf->base;
@


1.8
log
@Unbreak *grep -w -l. ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mmfile.c,v 1.7 2003/09/09 05:04:27 tedu Exp $	*/
a40 1
#define BLOCKSIZE 32768
d91 3
a93 16
	if ((lflag || qflag) && !wflag && !boleol) {
		/* Find starting point to search. */
		if (mmf->ptr == mmf->base)
			p = mmf->ptr;
		else
			p = mmf->ptr - maxPatternLen;
		/* Move the start pointer ahead for next iteration */
		if (mmf->end - mmf->ptr > BLOCKSIZE)
			mmf->ptr += BLOCKSIZE;
		else
			mmf->ptr = mmf->end;
	} else {
		for (p = mmf->ptr; mmf->ptr < mmf->end; ++mmf->ptr)
			if (*mmf->ptr == '\n')
				break;
	}
@


1.7
log
@mmap returns MAP_FAILED on failure.  fixes hugh@@'s crash.  ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mmfile.c,v 1.6 2003/06/24 18:43:11 tedu Exp $	*/
d92 1
a92 1
	if ((lflag || qflag) && !boleol) {
@


1.6
log
@tweak boolean test to be clear
@
text
@d1 1
a1 1
/*	$OpenBSD: mmfile.c,v 1.5 2003/06/23 22:05:23 tedu Exp $	*/
d63 1
a63 1
	if (mmf->base == NULL)
@


1.5
log
@faster grep for simple patterns.  derived from a patch by sean farley.
this makes searching for constant strings much faster by avoiding regex.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mmfile.c,v 1.4 2003/06/23 07:52:18 deraadt Exp $	*/
d92 1
a92 1
	if ((lflag || qflag) &! boleol) {
@


1.4
log
@minor tweaks
@
text
@d1 1
a1 1
/*	$OpenBSD: mmfile.c,v 1.3 2003/06/22 22:38:50 deraadt Exp $	*/
d41 1
d92 17
a108 3
	for (p = mmf->ptr; mmf->ptr < mmf->end; ++mmf->ptr)
		if (*mmf->ptr == '\n')
			break;
@


1.3
log
@proper $OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d102 1
a102 1
    return mmf->ptr - mmf->base;
d108 1
a108 1
    mmf->ptr = mmf->base;
@


1.2
log
@-DNOZ flag to be used by install media for removing z*grep support, if
needed.  (and knf)
@
text
@d1 2
a26 2
 *
 *	$Id$
@


1.1
log
@freegrep 0.16
@
text
@d50 2
a51 2
	
	mmf = grep_malloc(sizeof *mmf);	
d56 1
a56 1
	if (st.st_size > SIZE_T_MAX) /* too big to mmap */		
d61 1
a61 1
	mmf->base = mmap(NULL, mmf->len, PROT_READ, MAP_PRIVATE, mmf->fd, 0);
@

