head	1.8;
access;
symbols
	OPENBSD_6_2:1.8.0.10
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.8.0.8
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.4
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.6.0.10
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.6
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.4
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.5.0.4
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.2
	OPENBSD_5_3_BASE:1.5;
locks; strict;
comment	@ * @;


1.8
date	2016.01.09.13.36.11;	author ratchov;	state Exp;
branches;
next	1.7;
commitid	gsS4rkcNq6ez176y;

1.7
date	2015.11.22.16.42.22;	author ratchov;	state Exp;
branches;
next	1.6;
commitid	dqPfcwycJrzqv2cy;

1.6
date	2013.11.18.17.37.45;	author ratchov;	state Exp;
branches;
next	1.5;

1.5
date	2012.11.30.22.26.34;	author ratchov;	state Exp;
branches;
next	1.4;

1.4
date	2012.11.30.21.04.35;	author ratchov;	state Exp;
branches;
next	1.3;

1.3
date	2012.11.30.20.48.00;	author ratchov;	state Exp;
branches;
next	1.2;

1.2
date	2012.11.30.20.30.24;	author ratchov;	state Exp;
branches;
next	1.1;

1.1
date	2012.11.23.07.03.28;	author ratchov;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Make midi->tickets signed (sign is needed for arithmetics even if the
actual count is always positive). Found by David Coppa. Thanks.
@
text
@/*	$OpenBSD: midi.h,v 1.6 2013/11/18 17:37:45 ratchov Exp $	*/
/*
 * Copyright (c) 2008-2012 Alexandre Ratchov <alex@@caoua.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
#ifndef MIDI_H
#define MIDI_H

#include "abuf.h"
#include "miofile.h"

/*
 * masks to extract command and channel of status byte
 */
#define MIDI_CMDMASK	0xf0
#define MIDI_CHANMASK	0x0f

/*
 * MIDI status bytes of voice messages
 */
#define MIDI_NOFF	0x80		/* note off */
#define MIDI_NON	0x90		/* note on */
#define MIDI_KAT	0xa0		/* key after touch */
#define MIDI_CTL	0xb0		/* controller */
#define MIDI_PC		0xc0		/* program change */
#define MIDI_CAT	0xd0		/* channel after touch */
#define MIDI_BEND	0xe0		/* pitch bend */
#define MIDI_ACK	0xfe		/* active sensing message */

/*
 * MIDI controller numbers
 */
#define MIDI_CTL_VOL	7		/* volume */

/*
 * Max coarse value
 */
#define MIDI_MAXCTL		127

/*
 * midi stream state structure
 */

struct midiops
{
	void (*imsg)(void *, unsigned char *, int);
	void (*omsg)(void *, unsigned char *, int);
	void (*fill)(void *, int);
	void (*exit)(void *);
};

struct midi {
	struct midiops *ops;		/* port/sock/dev callbacks */
	struct midi *owner;		/* current writer stream */
	unsigned int mode;		/* MODE_{MIDIIN,MIDIOUT} */
	void *arg;			/* user data for callbacks */
#define MIDI_MSGMAX	16		/* max size of MIDI msg */
	unsigned char msg[MIDI_MSGMAX];	/* parsed input message */
	unsigned int st;		/* input MIDI running status */
	unsigned int used;		/* bytes used in ``msg'' */
	unsigned int idx;		/* current ``msg'' size */
	unsigned int len;		/* expected ``msg'' length */
	unsigned int txmask;		/* list of ep we send to */
	unsigned int self;		/* equal (1 << index) */
	int tickets;			/* max bytes we can process */
	struct abuf obuf;		/* output buffer */
};

/*
 * midi port
 */
struct port {
	struct port *next;
	struct port_mio mio;
#define PORT_CFG	0
#define PORT_INIT	1
#define PORT_DRAIN	2
	unsigned int state;
	unsigned int num;		/* port serial number */
	char *path;			/* hold the port open ? */
	int hold;
	struct midi *midi;
};

/*
 * midi control ports
 */
extern struct port *port_list;

void midi_init(void);
void midi_done(void);
struct midi *midi_new(struct midiops *, void *, int);
void midi_del(struct midi *);
void midi_log(struct midi *);
void midi_tickets(struct midi *);
void midi_in(struct midi *, unsigned char *, int);
void midi_out(struct midi *, unsigned char *, int);
void midi_send(struct midi *, unsigned char *, int);
void midi_fill(struct midi *);
void midi_tag(struct midi *, unsigned int);
void midi_link(struct midi *, struct midi *);

void port_log(struct port *);
struct port *port_new(char *, unsigned int, int);
struct port *port_bynum(int);
void port_del(struct port *);
int  port_ref(struct port *);
void port_unref(struct port *);
int  port_init(struct port *);
void port_done(struct port *);
void port_drain(struct port *);
int  port_close(struct port *);

#endif /* !defined(MIDI_H) */
@


1.7
log
@save port number if port structure
@
text
@d76 1
a76 1
	unsigned int tickets;		/* max bytes we can process */
@


1.6
log
@add missing prototypes
@
text
@d1 1
a1 1
/*	$OpenBSD: midi.h,v 1.5 2012/11/30 22:26:34 ratchov Exp $	*/
d90 1
@


1.5
log
@drain midi port output buffer before closing it ensuring the last
few bytes are not lost
@
text
@d1 1
a1 1
/*	$OpenBSD: midi.h,v 1.4 2012/11/30 21:04:35 ratchov Exp $	*/
d113 1
@


1.4
log
@use the hold flag for midi ports as well
@
text
@d1 1
a1 1
/*	$OpenBSD: midi.h,v 1.3 2012/11/30 20:48:00 ratchov Exp $	*/
d120 1
@


1.3
log
@For MIDI ports, use the same open/close logic as for audio devices:
drop clients using it when the port is closed (eg. umidi disconnected)
and try to reopen it whenever a new client connects.
@
text
@d1 1
a1 1
/*	$OpenBSD: midi.h,v 1.2 2012/11/30 20:30:24 ratchov Exp $	*/
d90 2
a91 1
	char *path;
d113 1
a113 1
struct port *port_new(char *, unsigned int);
@


1.2
log
@Process incoming MIDI data on the fly rather than using an
input fifo; besides being simpler, this way there's no data
to drain when a connection is dropped.
@
text
@d1 1
a1 1
/*	$OpenBSD: midi.h,v 1.1 2012/11/23 07:03:28 ratchov Exp $	*/
a91 1
	unsigned int refs;
d115 2
@


1.1
log
@Remplace aucat server by a new sndiod daemon aimed to be simpler
smaller and faster than aucat. It's a drop in replacement with the
following exceptions that don't affect the default setup:
  - The sample rate and the encoding are a per-device parameters
    thus -r and -e options must precede the corresponding -f option
  - MIDI thru boxes are dynamically created and no -M option
    is required anymore, so -M was removed.
  - MIDI ports are exposed with a new ``midi/N'' name, rather
    than abusing MIDI thru boxes.
with help from armani@@, ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d75 2
a76 2
	unsigned int rxmask;		/* single ep we accept data for */
	struct abuf ibuf;		/* input buffer */
d105 2
a106 1
int midi_in(struct midi *);
d111 1
a111 1
void midi_untag(struct midi *, unsigned int);
@

