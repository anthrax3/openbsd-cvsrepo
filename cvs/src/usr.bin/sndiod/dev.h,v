head	1.11;
access;
symbols
	OPENBSD_6_2:1.11.0.4
	OPENBSD_6_2_BASE:1.11
	OPENBSD_6_1:1.11.0.6
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.2
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.9.0.6
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.8.0.4
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.3.0.4
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2;
locks; strict;
comment	@ * @;


1.11
date	2016.03.23.06.16.35;	author ratchov;	state Exp;
branches;
next	1.10;
commitid	VkSMySsfDNHeK23b;

1.10
date	2016.01.08.16.17.31;	author ratchov;	state Exp;
branches;
next	1.9;
commitid	LWS9HDcDMBciqd8t;

1.9
date	2015.02.16.06.28.05;	author ratchov;	state Exp;
branches;
next	1.8;
commitid	oHulREgFeB8DZBJI;

1.8
date	2014.03.17.17.16.06;	author ratchov;	state Exp;
branches;
next	1.7;

1.7
date	2014.03.07.10.23.05;	author ratchov;	state Exp;
branches;
next	1.6;

1.6
date	2014.03.07.10.15.39;	author ratchov;	state Exp;
branches;
next	1.5;

1.5
date	2014.03.05.20.31.22;	author ratchov;	state Exp;
branches;
next	1.4;

1.4
date	2014.03.05.20.24.16;	author ratchov;	state Exp;
branches;
next	1.3;

1.3
date	2013.09.28.18.49.32;	author ratchov;	state Exp;
branches;
next	1.2;

1.2
date	2012.11.30.20.38.24;	author ratchov;	state Exp;
branches;
next	1.1;

1.1
date	2012.11.23.07.03.28;	author ratchov;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Remove unused arguments of dev_adjpar(), getbasepath() and all
slotops->onvol() implementations. From David CARLIER <devnexen at
gmail.com>. Thanks.
@
text
@/*	$OpenBSD: dev.h,v 1.8 2014/03/17 17:16:06 ratchov Exp $	*/
/*
 * Copyright (c) 2008-2012 Alexandre Ratchov <alex@@caoua.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
#ifndef DEV_H
#define DEV_H

#include "abuf.h"
#include "dsp.h"
#include "siofile.h"

/*
 * audio stream state structure
 */

struct slotops
{
	void (*onmove)(void *);			/* clock tick */
	void (*onvol)(void *);	        /* tell client vol changed */
	void (*fill)(void *);			/* request to fill a play block */
	void (*flush)(void *);			/* request to flush a rec block */
	void (*eof)(void *);			/* notify that play drained */
	void (*exit)(void *);			/* delete client */
};

struct slot {
	struct slotops *ops;			/* client callbacks */
	struct slot *next;			/* next on the play list */
	struct dev *dev;			/* device this belongs to */
	void *arg;				/* user data for callbacks */
	struct aparams par;			/* socket side params */
	struct {
		int weight;			/* dynamic range */
		int maxweight;			/* max dynamic range allowed */
		unsigned int vol;		/* volume within the vol */
		struct abuf buf;		/* socket side buffer */
		int bpf;			/* byte per frame */
		int slot_cmin, slot_cmax;	/* slot source chans */
		int dev_cmin, dev_cmax;		/* device destination chans */
		struct cmap cmap;		/* channel mapper state */
		struct resamp resamp;		/* resampler state */
		struct conv dec;		/* format decoder params */
		int join;			/* channel join factor */
		int expand;			/* channel expand factor */
		void *resampbuf, *decbuf;	/* tmp buffers */
	} mix;
	struct {
		struct abuf buf;		/* socket side buffer */
		int prime;			/* initial cycles to skip */
		int bpf;			/* byte per frame */
		int slot_cmin, slot_cmax;	/* slot destination chans */
		int dev_cmin, dev_cmax;		/* device source chans */
		struct cmap cmap;		/* channel mapper state */
		struct resamp resamp;		/* buffer for resampling */
		struct conv enc;		/* buffer for encoding */
		int join;			/* channel join factor */
		int expand;			/* channel expand factor */
		void *resampbuf, *encbuf;	/* tmp buffers */
	} sub;
	int xrun;				/* underrun policy */
	int skip;				/* cycles to skip (for xrun) */
	int dup;				/* mono-to-stereo and alike */
#define SLOT_BUFSZ(s) \
	((s)->appbufsz + (s)->dev->bufsz / (s)->dev->round * (s)->round)
	int appbufsz;				/* slot-side buffer size */
	int round;				/* slot-side block size */
	int rate;				/* slot-side sample rate */
	int delta;				/* pending clock ticks */
	int delta_rem;				/* remainder for delta */
	int mode;				/* MODE_{PLAY,REC} */
#define SLOT_INIT	0			/* not trying to do anything */
#define SLOT_START	1			/* buffer allocated */
#define SLOT_READY	2			/* buffer filled enough */
#define SLOT_RUN	3			/* buffer attached to device */
#define SLOT_STOP	4			/* draining */
	int pstate;

#define SLOT_NAMEMAX	8
	char name[SLOT_NAMEMAX];		/* name matching [a-z]+ */
	unsigned int unit;			/* instance of name */
	unsigned int serial;			/* global unique number */
	unsigned int vol;			/* current (midi) volume */
	unsigned int tstate;			/* mmc state */
};

/*
 * audio device with plenty of slots
 */
struct dev {
	struct dev *next;
	struct slot *slot_list;			/* audio streams attached */
	struct midi *midi;

	/*
	 * audio device (while opened)
	 */
	struct dev_sio sio;
	struct aparams par;			/* encoding */
	int pchan, rchan;			/* play & rec channels */
	adata_t *rbuf;				/* rec buffer */
	adata_t *pbuf;				/* array of play buffers */
#define DEV_PBUF(d) ((d)->pbuf + (d)->poffs * (d)->pchan)
	int poffs;				/* index of current play buf */
	int psize;				/* size of play buffer */
	struct conv enc;			/* native->device format */
	struct conv dec;			/* device->native format */
	unsigned char *encbuf;			/* buffer for encoding */
	unsigned char *decbuf;			/* buffer for decoding */

	/*
	 * preallocated audio sub-devices
	 */
#define DEV_NSLOT	8
	struct slot slot[DEV_NSLOT];
	unsigned int serial;			/* for slot allocation */

	/*
	 * current position, relative to the current cycle
	 */
	int delta;

	/*
	 * desired parameters
	 */
	unsigned int reqmode;			/* mode */
	struct aparams reqpar;			/* parameters */
	int reqpchan, reqrchan;			/* play & rec chans */
	unsigned int reqbufsz;			/* buffer size */
	unsigned int reqround;			/* block size */
	unsigned int reqrate;			/* sample rate */
	unsigned int hold;			/* hold the device open ? */
	unsigned int autovol;			/* auto adjust playvol ? */
	unsigned int refcnt;			/* number of openers */
#define DEV_NMAX	16			/* max number of devices */
	unsigned int num;			/* device serial number */
#define DEV_CFG		0			/* closed */
#define DEV_INIT	1			/* stopped */
#define DEV_RUN		2			/* playin & recording */
	unsigned int pstate;			/* one of above */
	char *path;				/* sio path */

	/*
	 * actual parameters and runtime state (i.e. once opened)
	 */
	unsigned int mode;			/* bitmap of MODE_xxx */
	unsigned int bufsz, round, rate;
	unsigned int prime;

	/*
	 * MIDI time code (MTC)
	 */
	struct {
		unsigned int origin;		/* MTC start time */
		unsigned int fps;		/* MTC frames per second */
#define MTC_FPS_24	0
#define MTC_FPS_25	1
#define MTC_FPS_30	3
		unsigned int fps_id;		/* one of above */
		unsigned int hr;		/* MTC hours */
		unsigned int min;		/* MTC minutes */
		unsigned int sec;		/* MTC seconds */
		unsigned int fr;		/* MTC frames */
		unsigned int qfr;		/* MTC quarter frames */
		int delta;			/* rel. to the last MTC tick */
		int refs;
	} mtc;

	/*
	 * MIDI machine control (MMC)
	 */
#define MMC_OFF		0			/* ignore MMC messages */
#define MMC_STOP	1			/* stopped, can't start */
#define MMC_START	2			/* attempting to start */
#define MMC_RUN		3			/* started */
	unsigned int tstate;			/* one of above */
	unsigned int master;			/* master volume controller */
};

extern struct dev *dev_list;

void dev_log(struct dev *);
void dev_close(struct dev *);
struct dev *dev_new(char *, struct aparams *, unsigned int, unsigned int,
    unsigned int, unsigned int, unsigned int, unsigned int);
struct dev *dev_bynum(int);
void dev_del(struct dev *);
void dev_adjpar(struct dev *, int, int, int);
int  dev_init(struct dev *);
void dev_done(struct dev *);
int dev_ref(struct dev *);
void dev_unref(struct dev *);
int  dev_getpos(struct dev *);
unsigned int dev_roundof(struct dev *, unsigned int);

/*
 * interface to hardware device
 */
void dev_onmove(struct dev *, int);
void dev_cycle(struct dev *);

/*
 * midi & midi call-backs
 */
void dev_mmcstart(struct dev *);
void dev_mmcstop(struct dev *);
void dev_mmcloc(struct dev *, unsigned int);
void dev_master(struct dev *, unsigned int);
void dev_midi_vol(struct dev *, struct slot *);

/*
 * sio_open(3) like interface for clients
 */
void slot_log(struct slot *);
struct slot *slot_new(struct dev *, char *, struct slotops *, void *, int);
void slot_del(struct slot *);
void slot_setvol(struct slot *, unsigned int);
void slot_start(struct slot *);
void slot_stop(struct slot *);
void slot_read(struct slot *);
void slot_write(struct slot *);

#endif /* !defined(DEV_H) */
@


1.10
log
@Make code fit in 80 columns, remove trailing spaces & tabs.
@
text
@d31 1
a31 1
	void (*onvol)(void *, unsigned int);	/* tell client vol changed */
d199 1
a199 1
void dev_adjpar(struct dev *, int, int, int, int, int);
@


1.9
log
@add missing protos, fix spacing
@
text
@d45 1
a45 1
		int weight;			/* dynamic range */	
d108 1
a108 1
	 */	
@


1.8
log
@unbreak monitoring mode, which was shifted in time by 1 block
@
text
@d1 1
a1 1
/*	$OpenBSD: dev.h,v 1.7 2014/03/07 10:23:05 ratchov Exp $	*/
d202 2
@


1.7
log
@remove unused "delta" argument from onmove callbacks
@
text
@d1 1
a1 1
/*	$OpenBSD: dev.h,v 1.6 2014/03/07 10:15:39 ratchov Exp $	*/
d116 1
@


1.6
log
@remove unused mmc start/stop/relocate call-backs as they don't
make sense for clients and are handled through midi anyway
@
text
@d1 1
a1 1
/*	$OpenBSD: dev.h,v 1.5 2014/03/05 20:31:22 ratchov Exp $	*/
d30 1
a30 1
	void (*onmove)(void *, int);		/* clock tick */
@


1.5
log
@- properly set initial position: fixes incorrect position reporting
  on busy machines configured to use tiny block sizes
- run play and rec cycle in the same loop. No behavior change,
  but the code is much simpler this way.
@
text
@d1 1
a1 1
/*	$OpenBSD: dev.h,v 1.4 2014/03/05 20:24:16 ratchov Exp $	*/
a34 3
	void (*mmcstart)(void *);		/* request to start */
	void (*mmcstop)(void *);		/* request to stop */
	void (*mmcloc)(void *, unsigned int);	/* relocate to new position */
@


1.4
log
@remove unused "autostart" feature
@
text
@d1 1
a1 1
/*	$OpenBSD: dev.h,v 1.3 2013/09/28 18:49:32 ratchov Exp $	*/
a50 1
		int drop;			/* to drop on next read */
a62 1
		int silence;			/* to add on next write */
d64 1
d76 1
d130 5
@


1.3
log
@Fix condition to check if a midi port is referenced. Remove unused bits.
@
text
@d1 1
a1 1
/*	$OpenBSD: dev.h,v 1.2 2012/11/30 20:38:24 ratchov Exp $	*/
a141 1
	unsigned int autostart;			/* don't wait for MMC start */
@


1.2
log
@make DEV_xxx contiguous
@
text
@d1 1
a1 1
/*	$OpenBSD: dev.h,v 1.1 2012/11/23 07:03:28 ratchov Exp $	*/
d112 1
a112 1
	struct siofile_ sio;
@


1.1
log
@Remplace aucat server by a new sndiod daemon aimed to be simpler
smaller and faster than aucat. It's a drop in replacement with the
following exceptions that don't affect the default setup:
  - The sample rate and the encoding are a per-device parameters
    thus -r and -e options must precede the corresponding -f option
  - MIDI thru boxes are dynamically created and no -M option
    is required anymore, so -M was removed.
  - MIDI ports are exposed with a new ``midi/N'' name, rather
    than abusing MIDI thru boxes.
with help from armani@@, ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d148 1
a148 1
#define DEV_RUN		3			/* playin & recording */
@

