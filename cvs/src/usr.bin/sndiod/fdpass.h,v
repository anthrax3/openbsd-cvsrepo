head	1.1;
access;
symbols
	OPENBSD_6_0:1.1.0.4
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.2
	OPENBSD_5_9_BASE:1.1;
locks; strict;
comment	@ * @;


1.1
date	2015.12.20.11.38.33;	author ratchov;	state Exp;
branches;
next	;
commitid	PJvo9au8yzagFJ6z;


desc
@@


1.1
log
@In case of a bug in sndiod, an attacker (a local user) could run
arbitrary code as user _sndio, i.e. get a second uid.

Mitigate the risk by implementing initial privilege separation as
follows. Break sndiod in two processes: a chroot()ed "worker" process
processing input, and a non-chroot()ed "helper" process opening
devices and passing descriptors to the worker.

With help from benno, claudio, semarie and gilles.

ok benno, semarie and tb
@
text
@/*	$OpenBSD$	*/
/*
 * Copyright (c) 2015 Alexandre Ratchov <alex@@caoua.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
#ifndef FDPASS_H
#define FDPASS_H

struct fileops;

struct fdpass *fdpass_new(int sock, struct fileops *ops);
void fdpass_close(struct fdpass *f);

extern struct fileops worker_fileops, helper_fileops;
extern struct fdpass *fdpass_peer;

struct sio_hdl *fdpass_sio_open(int, unsigned int);
struct mio_hdl *fdpass_mio_open(int, unsigned int);

#endif /* !defined(FDPASS_H) */
@
