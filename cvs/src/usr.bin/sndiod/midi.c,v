head	1.16;
access;
symbols
	OPENBSD_6_0:1.15.0.4
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.2
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.10.0.10
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.6
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.4
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.7.0.2
	OPENBSD_5_3_BASE:1.7;
locks; strict;
comment	@ * @;


1.16
date	2017.01.03.06.53.20;	author ratchov;	state Exp;
branches;
next	1.15;
commitid	ygqGANB8OK6FeBv5;

1.15
date	2016.01.08.16.17.31;	author ratchov;	state Exp;
branches;
next	1.14;
commitid	LWS9HDcDMBciqd8t;

1.14
date	2015.11.25.18.47.12;	author ratchov;	state Exp;
branches;
next	1.13;
commitid	sYMrHkjTYjG2IfUT;

1.13
date	2015.11.23.18.16.41;	author ratchov;	state Exp;
branches;
next	1.12;
commitid	0CnbBNf7As4H8TAH;

1.12
date	2015.11.23.09.48.25;	author ratchov;	state Exp;
branches;
next	1.11;
commitid	yxO1rrA4uXt9P7j8;

1.11
date	2015.11.22.16.42.22;	author ratchov;	state Exp;
branches;
next	1.10;
commitid	dqPfcwycJrzqv2cy;

1.10
date	2013.09.28.18.49.32;	author ratchov;	state Exp;
branches;
next	1.9;

1.9
date	2013.05.12.05.02.08;	author ratchov;	state Exp;
branches;
next	1.8;

1.8
date	2013.05.12.05.00.14;	author ratchov;	state Exp;
branches;
next	1.7;

1.7
date	2012.12.20.16.15.55;	author ratchov;	state Exp;
branches;
next	1.6;

1.6
date	2012.12.01.12.13.34;	author ratchov;	state Exp;
branches;
next	1.5;

1.5
date	2012.11.30.22.26.34;	author ratchov;	state Exp;
branches;
next	1.4;

1.4
date	2012.11.30.21.04.35;	author ratchov;	state Exp;
branches;
next	1.3;

1.3
date	2012.11.30.20.48.00;	author ratchov;	state Exp;
branches;
next	1.2;

1.2
date	2012.11.30.20.30.24;	author ratchov;	state Exp;
branches;
next	1.1;

1.1
date	2012.11.23.07.03.28;	author ratchov;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Many typos in comments. From Michael W. Bombardieri. Thanks.
@
text
@/*	$OpenBSD$	*/
/*
 * Copyright (c) 2008-2012 Alexandre Ratchov <alex@@caoua.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "abuf.h"
#include "defs.h"
#include "dev.h"
#include "file.h"
#include "midi.h"
#include "miofile.h"
#include "sysex.h"
#include "utils.h"

int  port_open(struct port *);
void port_imsg(void *, unsigned char *, int);
void port_omsg(void *, unsigned char *, int);
void port_fill(void *, int);
void port_exit(void *);

struct midiops port_midiops = {
	port_imsg,
	port_omsg,
	port_fill,
	port_exit
};

#define MIDI_NEP 32
struct midi midi_ep[MIDI_NEP];
struct port *port_list = NULL;
unsigned int midi_portnum = 0;

struct midithru {
	unsigned int txmask, rxmask;
#define MIDITHRU_NMAX 32
} midithru[MIDITHRU_NMAX];

/*
 * length of voice and common messages (status byte included)
 */
unsigned int voice_len[] = { 3, 3, 3, 3, 2, 2, 3 };
unsigned int common_len[] = { 0, 2, 3, 2, 0, 0, 1, 1 };

void
midi_log(struct midi *ep)
{
	log_puts("midi");
	log_putu(ep - midi_ep);
}

void
midi_init(void)
{
}

void
midi_done(void)
{
}

struct midi *
midi_new(struct midiops *ops, void *arg, int mode)
{
	int i;
	struct midi *ep;

	for (i = 0, ep = midi_ep;; i++, ep++) {
		if (i == MIDI_NEP)
			return NULL;
		if (ep->ops == NULL)
			break;
	}
	ep->ops = ops;
	ep->arg = arg;
	ep->used = 0;
	ep->len = 0;
	ep->idx = 0;
	ep->st = 0;
	ep->txmask = 0;
	ep->self = 1 << i;
	ep->tickets = 0;
	ep->mode = mode;

	/*
	 * the output buffer is the client input
	 */
	if (ep->mode & MODE_MIDIIN)
		abuf_init(&ep->obuf, MIDI_BUFSZ);
	midi_tickets(ep);
	return ep;
}

void
midi_del(struct midi *ep)
{
	int i;
	struct midi *peer;

	ep->txmask = 0;
	for (i = 0; i < MIDI_NEP; i++) {
		peer = midi_ep + i;
		if (peer->txmask & ep->self) {
			peer->txmask &= ~ep->self;
			midi_tickets(peer);
		}
	}
	for (i = 0; i < MIDITHRU_NMAX; i++) {
		midithru[i].txmask &= ~ep->self;
		midithru[i].rxmask &= ~ep->self;
	}
	ep->ops = NULL;
	if (ep->mode & MODE_MIDIIN) {
		abuf_done(&ep->obuf);
	}
}

/*
 * connect two midi endpoints
 */
void
midi_link(struct midi *ep, struct midi *peer)
{
	if (ep->mode & MODE_MIDIOUT) {
		ep->txmask |= peer->self;
		midi_tickets(ep);
	}
	if (ep->mode & MODE_MIDIIN) {
#ifdef DEBUG
		if (ep->obuf.used > 0) {
			midi_log(ep);
			log_puts(": linked with non-empty buffer\n");
			panic();
		}
#endif
		/* ep has empty buffer, so no need to call midi_tickets() */
		peer->txmask |= ep->self;
	}
}

/*
 * add the midi endpoint in the ``tag'' midi thru box
 */
void
midi_tag(struct midi *ep, unsigned int tag)
{
	struct midi *peer;
	struct midithru *t = midithru + tag;
	int i;

	if (ep->mode & MODE_MIDIOUT) {
		ep->txmask |= t->txmask;
		midi_tickets(ep);
	}
	if (ep->mode & MODE_MIDIIN) {
#ifdef DEBUG
		if (ep->obuf.used > 0) {
			midi_log(ep);
			log_puts(": tagged with non-empty buffer\n");
			panic();
		}
#endif
		for (i = 0; i < MIDI_NEP; i++) {
			if (!(t->rxmask & (1 << i)))
				continue;
			peer = midi_ep + i;
			peer->txmask |= ep->self;
		}
	}
	if (ep->mode & MODE_MIDIOUT)
		t->rxmask |= ep->self;
	if (ep->mode & MODE_MIDIIN)
		t->txmask |= ep->self;
}

/*
 * broadcast the given message to other endpoints
 */
void
midi_send(struct midi *iep, unsigned char *msg, int size)
{
	struct midi *oep;
	int i;

#ifdef DEBUG
	if (log_level >= 4) {
		midi_log(iep);
		log_puts(": sending:");
		for (i = 0; i < size; i++) {
			log_puts(" ");
			log_putx(msg[i]);
		}
		log_puts("\n");
	}
#endif
	for (i = 0; i < MIDI_NEP ; i++) {
		if ((iep->txmask & (1 << i)) == 0)
			continue;
		oep = midi_ep + i;
		if (msg[0] <= 0x7f) {
			if (oep->owner != iep)
				continue;
		} else if (msg[0] <= 0xf7)
			oep->owner = iep;
#ifdef DEBUG
		if (log_level >= 4) {
			midi_log(iep);
			log_puts(" -> ");
			midi_log(oep);
			log_puts("\n");
		}
#endif
		oep->ops->omsg(oep->arg, msg, size);
	}
}

/*
 * determine if we have gained more input tickets, and if so call the
 * fill() call-back to notify the i/o layer that it can send more data
 */
void
midi_tickets(struct midi *iep)
{
	int i, tickets, avail, maxavail;
	struct midi *oep;

	maxavail = MIDI_BUFSZ;
	for (i = 0; i < MIDI_NEP ; i++) {
		if ((iep->txmask & (1 << i)) == 0)
			continue;
		oep = midi_ep + i;
		avail = oep->obuf.len - oep->obuf.used;
		if (maxavail > avail)
			maxavail = avail;
	}

	/*
	 * in the worst case output message is twice the
	 * input message (2-byte messages with running status)
	 */
	tickets = maxavail / 2 - iep->tickets;
	if (tickets > 0) {
		iep->tickets += tickets;
		iep->ops->fill(iep->arg, tickets);
	}
}

/*
 * recalculate tickets of endpoints sending data to this one
 */
void
midi_fill(struct midi *oep)
{
	int i;
	struct midi *iep;

	for (i = 0; i < MIDI_NEP; i++) {
		iep = midi_ep + i;
		if (iep->txmask & oep->self)
			midi_tickets(iep);
	}
}

/*
 * parse then give data chunk, and calling imsg() for each message
 */
void
midi_in(struct midi *iep, unsigned char *idata, int icount)
{
	int i;
	unsigned char c;

	for (i = 0; i < icount; i++) {
		c = *idata++;
		if (c >= 0xf8) {
			if (c != MIDI_ACK)
				iep->ops->imsg(iep->arg, &c, 1);
		} else if (c == SYSEX_END) {
			if (iep->st == SYSEX_START) {
				iep->msg[iep->idx++] = c;
				iep->ops->imsg(iep->arg, iep->msg, iep->idx);
			}
			iep->st = 0;
			iep->idx = 0;
		} else if (c >= 0xf0) {
			iep->msg[0] = c;
			iep->len = common_len[c & 7];
			iep->st = c;
			iep->idx = 1;
		} else if (c >= 0x80) {
			iep->msg[0] = c;
			iep->len = voice_len[(c >> 4) & 7];
			iep->st = c;
			iep->idx = 1;
		} else if (iep->st) {
			if (iep->idx == 0 && iep->st != SYSEX_START)
				iep->msg[iep->idx++] = iep->st;
			iep->msg[iep->idx++] = c;
			if (iep->idx == iep->len) {
				iep->ops->imsg(iep->arg, iep->msg, iep->idx);
				if (iep->st >= 0xf0)
					iep->st = 0;
				iep->idx = 0;
			} else if (iep->idx == MIDI_MSGMAX) {
				/* sysex continued */
				iep->ops->imsg(iep->arg, iep->msg, iep->idx);
				iep->idx = 0;
			}
		}
	}
	iep->tickets -= icount;
	if (iep->tickets < 0)
		iep->tickets = 0;
	midi_tickets(iep);
}

/*
 * store the given message in the output buffer
 */
void
midi_out(struct midi *oep, unsigned char *idata, int icount)
{
	unsigned char *odata;
	int ocount;
#ifdef DEBUG
	int i;
#endif

	while (icount > 0) {
		if (oep->obuf.used == oep->obuf.len) {
#ifdef DEBUG
			if (log_level >= 2) {
				midi_log(oep);
				log_puts(": too slow, discarding ");
				log_putu(oep->obuf.used);
				log_puts(" bytes\n");
			}
#endif
			abuf_rdiscard(&oep->obuf, oep->obuf.used);
			oep->owner = NULL;
			return;
		}
		odata = abuf_wgetblk(&oep->obuf, &ocount);
		if (ocount > icount)
			ocount = icount;
		memcpy(odata, idata, ocount);
#ifdef DEBUG
		if (log_level >= 4) {
			midi_log(oep);
			log_puts(": out: ");
			for (i = 0; i < ocount; i++) {
				log_puts(" ");
				log_putx(odata[i]);
			}
			log_puts("\n");
		}
#endif
		abuf_wcommit(&oep->obuf, ocount);
		icount -= ocount;
		idata += ocount;
	}
}

void
port_log(struct port *p)
{
	midi_log(p->midi);
}

void
port_imsg(void *arg, unsigned char *msg, int size)
{
	struct port *p = arg;

	midi_send(p->midi, msg, size);
}


void
port_omsg(void *arg, unsigned char *msg, int size)
{
	struct port *p = arg;

	midi_out(p->midi, msg, size);
}

void
port_fill(void *arg, int count)
{
	/* no flow control */
}

void
port_exit(void *arg)
{
#ifdef DEBUG
	struct port *p = arg;

	if (log_level >= 3) {
		port_log(p);
		log_puts(": port exit\n");
		panic();
	}
#endif
}

/*
 * create a new midi port
 */
struct port *
port_new(char *path, unsigned int mode, int hold)
{
	struct port *c;

	c = xmalloc(sizeof(struct port));
	c->path = xstrdup(path);
	c->state = PORT_CFG;
	c->hold = hold;
	c->midi = midi_new(&port_midiops, c, mode);
	c->num = midi_portnum++;
	c->next = port_list;
	port_list = c;
	return c;
}

/*
 * destroy the given midi port
 */
void
port_del(struct port *c)
{
	struct port **p;

	if (c->state != PORT_CFG)
		port_close(c);
	midi_del(c->midi);
	for (p = &port_list; *p != c; p = &(*p)->next) {
#ifdef DEBUG
		if (*p == NULL) {
			log_puts("port to delete not on list\n");
			panic();
		}
#endif
	}
	*p = c->next;
	xfree(c->path);
	xfree(c);
}

int
port_ref(struct port *c)
{
#ifdef DEBUG
	if (log_level >= 3) {
		port_log(c);
		log_puts(": port requested\n");
	}
#endif
	if (c->state == PORT_CFG && !port_open(c))
		return 0;
	return 1;
}

void
port_unref(struct port *c)
{
	int i, rxmask;

#ifdef DEBUG
	if (log_level >= 3) {
		port_log(c);
		log_puts(": port released\n");
	}
#endif
	for (rxmask = 0, i = 0; i < MIDI_NEP; i++)
		rxmask |= midi_ep[i].txmask;
	if ((rxmask & c->midi->self) == 0 && c->midi->txmask == 0 &&
	    c->state == PORT_INIT && !c->hold)
		port_drain(c);
}

struct port *
port_bynum(int num)
{
	struct port *p;

	for (p = port_list; p != NULL; p = p->next) {
		if (p->num == num)
			return p;
	}
	return NULL;
}

int
port_open(struct port *c)
{
	if (!port_mio_open(c)) {
		if (log_level >= 1) {
			log_puts(c->path);
			log_puts(": failed to open midi port\n");
		}
		return 0;
	}
	c->state = PORT_INIT;
	return 1;
}

int
port_close(struct port *c)
{
	int i;
	struct midi *ep;
#ifdef DEBUG
	if (c->state == PORT_CFG) {
		port_log(c);
		log_puts(": can't close port (not opened)\n");
		panic();
	}
#endif
	c->state = PORT_CFG;
	port_mio_close(c);

	for (i = 0; i < MIDI_NEP; i++) {
		ep = midi_ep + i;
		if ((ep->txmask & c->midi->self) ||
		    (c->midi->txmask & ep->self))
			ep->ops->exit(ep->arg);
	}
	return 1;
}

void
port_drain(struct port *c)
{
	struct midi *ep = c->midi;

	if (!(ep->mode & MODE_MIDIOUT) || ep->obuf.used == 0)
		port_close(c);
	else {
		c->state = PORT_DRAIN;
#ifdef DEBUG
		if (log_level >= 3) {
			port_log(c);
			log_puts(": draining\n");
		}
#endif
	}
}

int
port_init(struct port *c)
{
	if (c->hold)
		return port_open(c);
	return 1;
}

void
port_done(struct port *c)
{
	if (c->state == PORT_INIT)
		port_drain(c);
}
@


1.15
log
@Make code fit in 80 columns, remove trailing spaces & tabs.
@
text
@d100 1
a100 1
	 * the output buffer is the client intput
d150 1
a150 1
		/* ep has empry buffer, so no need to call midi_tickets() */
@


1.14
log
@Allocate device names in the heap, so they can be generated.
@
text
@d252 1
a252 1
	 * in the worst case output message is twice the 
d335 1
a335 1
midi_out(struct midi *oep, unsigned char *idata, int icount)	
d342 1
a342 1
	
d534 1
a534 1
	c->state = PORT_CFG;	
d536 1
a536 1
	
@


1.13
log
@define port_log even without -DDEBUG
@
text
@d1 1
a1 1
/*	$OpenBSD: midi.c,v 1.12 2015/11/23 09:48:25 ratchov Exp $	*/
d430 1
a430 1
	c->path = path;
d460 1
@


1.12
log
@Insert new ports at the head of the list and stop assuming its
ordered.
@
text
@d1 1
a1 1
/*	$OpenBSD: midi.c,v 1.11 2015/11/22 16:42:22 ratchov Exp $	*/
a377 1
#ifdef DEBUG
a382 1
#endif
@


1.11
log
@save port number if port structure
@
text
@d1 1
a1 1
/*	$OpenBSD: midi.c,v 1.10 2013/09/28 18:49:32 ratchov Exp $	*/
d429 1
a429 1
	struct port *c, **pc;
d437 2
a438 4
	for (pc = &port_list; *pc != NULL; pc = &(*pc)->next)
		; /* nothing */
	c->next = NULL;
	*pc = c;
d503 1
a503 1
		if (num-- == 0)
@


1.10
log
@Fix condition to check if a midi port is referenced. Remove unused bits.
@
text
@d1 1
a1 1
/*	$OpenBSD: midi.c,v 1.9 2013/05/12 05:02:08 ratchov Exp $	*/
d436 1
a436 1
	midi_portnum++;
@


1.9
log
@use -q options order as order of exposed midi ports
@
text
@d1 1
a1 1
/*	$OpenBSD: midi.c,v 1.8 2013/05/12 05:00:14 ratchov Exp $	*/
a29 7
/*
 * input data rate is XFER / TIMO (in bytes per microsecond),
 * it must be slightly larger than the MIDI standard 3125 bytes/s
 */ 
#define MIDI_XFER 1
#define MIDI_TIMO 100000

a44 1
struct timo midi_timo;
a66 11
midi_ontimo(void *arg)
{
	int i;
	struct midi *ep;
	
	for (i = MIDI_NEP, ep = midi_ep; i > 0; i--, ep++) {
	}
	timo_add(&midi_timo, MIDI_TIMO);
}

void
a68 2
	timo_set(&midi_timo, midi_ontimo, NULL);
	timo_add(&midi_timo, MIDI_TIMO);
a73 1
	timo_del(&midi_timo);
d494 2
a495 1
	if ((rxmask & ~c->midi->self) == 0 && c->state == PORT_INIT && !c->hold)
@


1.8
log
@Fix reversed condition to check if a midi port is referenced,
causing sometimes the port to be closed prematurely
@
text
@d1 1
a1 1
/*	$OpenBSD: midi.c,v 1.7 2012/12/20 16:15:55 ratchov Exp $	*/
d451 1
a451 1
	struct port *c;
d459 4
a462 2
	c->next = port_list;
	port_list = c;
@


1.7
log
@readjust midi flow control after consuming input data
@
text
@d1 1
a1 1
/*	$OpenBSD: midi.c,v 1.6 2012/12/01 12:13:34 ratchov Exp $	*/
d514 1
a514 1
	if ((rxmask & c->midi->self) == 0 && c->state == PORT_INIT && !c->hold)
@


1.6
log
@remove misleading XXXs and TODOs
@
text
@d1 1
a1 1
/*	$OpenBSD: midi.c,v 1.5 2012/11/30 22:26:34 ratchov Exp $	*/
d350 1
@


1.5
log
@drain midi port output buffer before closing it ensuring the last
few bytes are not lost
@
text
@d1 1
a1 1
/*	$OpenBSD: midi.c,v 1.4 2012/11/30 21:04:35 ratchov Exp $	*/
a16 6
/*
 * TODO
 *
 * use shadow variables (to save NRPNs, LSB of controller) 
 * in the midi merger
 */
d213 1
a213 1
 * broadcast the given message to other members of the thru box
a251 1

@


1.4
log
@use the hold flag for midi ports as well
@
text
@d1 1
a1 1
/*	$OpenBSD: midi.c,v 1.3 2012/11/30 20:48:00 ratchov Exp $	*/
d521 1
a521 1
		port_close(c);
d574 18
d603 2
a604 3
	/* XXX: drain? */
	if (c->state != PORT_CFG)
		port_close(c);
@


1.3
log
@For MIDI ports, use the same open/close logic as for audio devices:
drop clients using it when the port is closed (eg. umidi disconnected)
and try to reopen it whenever a new client connects.
@
text
@d1 1
a1 1
/*	$OpenBSD: midi.c,v 1.2 2012/11/30 20:30:24 ratchov Exp $	*/
d455 1
a455 1
port_new(char *path, unsigned int mode)
d462 1
d520 1
a520 1
	if ((rxmask & c->midi->self) == 0 && c->state == PORT_INIT)
d577 3
a579 1
	return port_open(c);
@


1.2
log
@Process incoming MIDI data on the fly rather than using an
input fifo; besides being simpler, this way there's no data
to drain when a connection is dropped.
@
text
@d1 1
a1 1
/*	$OpenBSD: midi.c,v 1.1 2012/11/23 07:03:28 ratchov Exp $	*/
d445 2
a446 1
		log_puts(": exit\n");
d492 31
d552 2
d558 1
d561 1
d563 7
a569 1
	c->state = PORT_CFG;	
@


1.1
log
@Remplace aucat server by a new sndiod daemon aimed to be simpler
smaller and faster than aucat. It's a drop in replacement with the
following exceptions that don't affect the default setup:
  - The sample rate and the encoding are a per-device parameters
    thus -r and -e options must precede the corresponding -f option
  - MIDI thru boxes are dynamically created and no -M option
    is required anymore, so -M was removed.
  - MIDI ports are exposed with a new ``midi/N'' name, rather
    than abusing MIDI thru boxes.
with help from armani@@, ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d63 1
a63 1
	unsigned txmask;
d123 2
a124 1
	ep->rxmask = 1 << i;
d126 1
d128 1
a128 2
	 * client output is our input (ibuf) and our output (obuf) goes
	 * to client input
d130 1
a130 4
	if (ep->mode & MODE_MIDIOUT) {
		abuf_init(&ep->ibuf, MIDI_BUFSZ);
	}
	if (ep->mode & MODE_MIDIIN) {
d132 1
a132 1
	}
d140 1
d142 12
a153 6
	for (i = 0; i < MIDI_NEP; i++)
		midi_ep[i].txmask &= ~ep->rxmask;
	for (i = 0; i < MIDITHRU_NMAX; i++)
		midithru[i].txmask &= ~ep->rxmask;

	/* XXX: drain output */
a154 3
	if (ep->mode & MODE_MIDIOUT) {
		abuf_done(&ep->ibuf);
	}
d161 1
a161 1
 * add the midi endpoint in the ``tag'' midi thru box
d164 1
a164 1
midi_tag(struct midi *ep, unsigned int tag)
d166 14
a179 14
	int i;
	struct midi *m;
	unsigned members;

	members = midithru[tag].txmask;
	midithru[tag].txmask |= ep->rxmask;

	for (i = 0, m = midi_ep; i < MIDI_NEP; i++, m++) {
		if (!(members & (1 << i)))
			continue;
		if (ep->mode & MODE_MIDIOUT)
			ep->txmask |= m->rxmask;
		if (ep->mode & MODE_MIDIIN)
			m->txmask |= ep->rxmask;
d184 1
a184 1
 * remove the midi endpoint from the ``tag'' midi thru box
d187 1
a187 1
midi_untag(struct midi *ep, unsigned int tag)
d189 2
a191 2
	struct midi *m;
	unsigned members;
d193 18
a210 8
	members = midithru[tag].txmask;
	midithru[tag].txmask &= ~ep->rxmask;

	for (i = 0, m = midi_ep;; i++, m++) {
		if (!(members & (1 << i)))
			continue;
		ep->txmask &= ~m->rxmask;
		m->txmask &= ~ep->rxmask;
d212 4
d260 34
d297 1
a297 1
	int i, count;
d300 1
a300 3
	for (i = 0; i < MIDI_NEP ; i++) {
		if ((oep->rxmask & (1 << i)) == 0)
			continue;
d302 2
a303 3
		count = midi_in(iep);
		if (count)
			iep->ops->fill(iep->arg, count);
d308 1
a308 1
 * parse the give data chunk, and calling imsg() for each message
d311 1
a311 1
midi_parse(struct midi *iep, unsigned char *idata, int icount)
d354 3
a356 54
}

/*
 * process input data stored in ep->ibuf
 */
int
midi_in(struct midi *iep)
{
	unsigned char *idata;
	int i, icount, maxavail, avail, idone;
	struct midi *oep;

	/*
	 * calculate the max message size we can process
	 */
	maxavail = MIDI_BUFSZ;
	for (i = 0; i < MIDI_NEP ; i++) {
		if ((iep->txmask & (1 << i)) == 0)
			continue;
		oep = midi_ep + i;
		avail = oep->obuf.len - oep->obuf.used;
		if (maxavail > avail)
			maxavail = avail;
	}
	
	/*
	 * in the works case output message is twice the 
	 * input message (2-byte messages with running status)
	 */
	maxavail /= 2;
	idone = 0;
	for (;;) {
		idata = abuf_rgetblk(&iep->ibuf, &icount);
		if (icount > maxavail)
			icount = maxavail;
		if (icount == 0)
			break;
		maxavail -= icount;
#ifdef DEBUG
		if (log_level >= 4) {
			midi_log(iep);
			log_puts(":  in:");
			for (i = 0; i < icount; i++) {
				log_puts(" ");
				log_putx(idata[i]);
			}
			log_puts("\n");
		}
#endif
		midi_parse(iep, idata, icount);
		abuf_rdiscard(&iep->ibuf, icount);
		idone += icount;
	}
	return idone;
d376 1
a376 1
				log_puts(": overrun, discarding ");
@

