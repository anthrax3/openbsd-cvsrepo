head	1.4;
access;
symbols
	OPENBSD_6_0:1.4.0.4
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.3.0.8
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.4
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.2.0.8
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2015.11.25.18.46.21;	author ratchov;	state Exp;
branches;
next	1.3;
commitid	pczEe9ORhwm6Chju;

1.3
date	2014.03.05.20.03.05;	author ratchov;	state Exp;
branches;
next	1.2;

1.2
date	2012.11.30.20.48.00;	author ratchov;	state Exp;
branches;
next	1.1;

1.1
date	2012.11.23.07.03.28;	author ratchov;	state Exp;
branches;
next	;


desc
@@


1.4
log
@spacing
@
text
@/*	$OpenBSD$	*/
/*
 * Copyright (c) 2008-2012 Alexandre Ratchov <alex@@caoua.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
#ifndef SOCK_H
#define SOCK_H

#include "amsg.h"

struct opt;
struct file;
struct slot;
struct midi;

struct sock {
	struct sock *next;
	int fd;
	struct file *file;
	struct amsg rmsg, wmsg;		/* messages being sent/received */
	unsigned int wmax;		/* max bytes we're allowed to write */
	unsigned int rmax;		/* max bytes we're allowed to read */
	unsigned int rsize;		/* input bytes to read (DATA msg) */
	unsigned int wsize;		/* output bytes to write (DATA msg) */
	unsigned int rtodo;		/* input bytes not read yet */
	unsigned int wtodo;		/* output bytes not written yet */
#define SOCK_RIDLE	0		/* not expecting messages */
#define SOCK_RMSG	1		/* expecting a message */
#define SOCK_RDATA	2		/* data chunk being read */
#define SOCK_RRET	3		/* reply being returned */
	unsigned int rstate;		/* state of the read-end FSM */
#define SOCK_WIDLE	0		/* nothing to do */
#define SOCK_WMSG	1		/* amsg being written */
#define SOCK_WDATA	2		/* data chunk being written */
	unsigned int wstate;		/* state of the write-end FSM */
#define SOCK_AUTH	0		/* waiting for AUTH message */
#define SOCK_HELLO	1		/* waiting for HELLO message */
#define SOCK_INIT	2		/* parameter negotiation */
#define SOCK_START	3		/* filling play buffers */
#define SOCK_STOP	4		/* draining rec buffers */
	unsigned int pstate;		/* one of the above */
	int tickpending;		/* tick waiting to be transmitted */
	int fillpending;		/* flowctl waiting to be transmitted */
	int stoppending;		/* last STOP ack to be sent */
	unsigned int walign;		/* align written data to this */
	unsigned int ralign;		/* read data is aligned to this */
	int lastvol;			/* last volume */
	struct opt *opt;		/* "subdevice" definition */
	struct slot *slot;		/* audio device slot number */
	struct midi *midi;		/* midi endpoint */
	struct port *port;		/* midi port */
};

struct sock *sock_new(int fd);
void sock_close(struct sock *);
extern struct sock *sock_list;

#endif /* !defined(SOCK_H) */
@


1.3
log
@remove unused var
@
text
@d1 1
a1 1
/*	$OpenBSD: sock.h,v 1.2 2012/11/30 20:48:00 ratchov Exp $	*/
d53 1
a53 1
	int tickpending;		/* tick waiting to be transmitted */	
@


1.2
log
@For MIDI ports, use the same open/close logic as for audio devices:
drop clients using it when the port is closed (eg. umidi disconnected)
and try to reopen it whenever a new client connects.
@
text
@d1 1
a1 1
/*	$OpenBSD: sock.h,v 1.1 2012/11/23 07:03:28 ratchov Exp $	*/
a62 1
	char who[12];			/* label, mostly for debugging */
@


1.1
log
@Remplace aucat server by a new sndiod daemon aimed to be simpler
smaller and faster than aucat. It's a drop in replacement with the
following exceptions that don't affect the default setup:
  - The sample rate and the encoding are a per-device parameters
    thus -r and -e options must precede the corresponding -f option
  - MIDI thru boxes are dynamically created and no -M option
    is required anymore, so -M was removed.
  - MIDI ports are exposed with a new ``midi/N'' name, rather
    than abusing MIDI thru boxes.
with help from armani@@, ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d61 2
a62 1
	struct midi *midi;		/* midi endpoint number */
@

