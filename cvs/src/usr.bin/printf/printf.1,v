head	1.30;
access;
symbols
	OPENBSD_6_2:1.30.0.2
	OPENBSD_6_2_BASE:1.30
	OPENBSD_6_1:1.30.0.4
	OPENBSD_6_1_BASE:1.30
	OPENBSD_6_0:1.29.0.8
	OPENBSD_6_0_BASE:1.29
	OPENBSD_5_9:1.29.0.4
	OPENBSD_5_9_BASE:1.29
	OPENBSD_5_8:1.29.0.6
	OPENBSD_5_8_BASE:1.29
	OPENBSD_5_7:1.29.0.2
	OPENBSD_5_7_BASE:1.29
	OPENBSD_5_6:1.27.0.4
	OPENBSD_5_6_BASE:1.27
	OPENBSD_5_5:1.25.0.16
	OPENBSD_5_5_BASE:1.25
	OPENBSD_5_4:1.25.0.12
	OPENBSD_5_4_BASE:1.25
	OPENBSD_5_3:1.25.0.10
	OPENBSD_5_3_BASE:1.25
	OPENBSD_5_2:1.25.0.8
	OPENBSD_5_2_BASE:1.25
	OPENBSD_5_1_BASE:1.25
	OPENBSD_5_1:1.25.0.6
	OPENBSD_5_0:1.25.0.4
	OPENBSD_5_0_BASE:1.25
	OPENBSD_4_9:1.25.0.2
	OPENBSD_4_9_BASE:1.25
	OPENBSD_4_8:1.23.0.2
	OPENBSD_4_8_BASE:1.23
	OPENBSD_4_7:1.22.0.4
	OPENBSD_4_7_BASE:1.22
	OPENBSD_4_6:1.22.0.6
	OPENBSD_4_6_BASE:1.22
	OPENBSD_4_5:1.22.0.2
	OPENBSD_4_5_BASE:1.22
	OPENBSD_4_4:1.18.0.6
	OPENBSD_4_4_BASE:1.18
	OPENBSD_4_3:1.18.0.4
	OPENBSD_4_3_BASE:1.18
	OPENBSD_4_2:1.18.0.2
	OPENBSD_4_2_BASE:1.18
	OPENBSD_4_1:1.16.0.16
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.16.0.14
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.16.0.12
	OPENBSD_3_9_BASE:1.16
	OPENBSD_3_8:1.16.0.10
	OPENBSD_3_8_BASE:1.16
	OPENBSD_3_7:1.16.0.8
	OPENBSD_3_7_BASE:1.16
	OPENBSD_3_6:1.16.0.6
	OPENBSD_3_6_BASE:1.16
	OPENBSD_3_5:1.16.0.4
	OPENBSD_3_5_BASE:1.16
	OPENBSD_3_4:1.16.0.2
	OPENBSD_3_4_BASE:1.16
	OPENBSD_3_3:1.15.0.2
	OPENBSD_3_3_BASE:1.15
	OPENBSD_3_2:1.13.0.8
	OPENBSD_3_2_BASE:1.13
	OPENBSD_3_1:1.13.0.6
	OPENBSD_3_1_BASE:1.13
	OPENBSD_3_0:1.13.0.4
	OPENBSD_3_0_BASE:1.13
	OPENBSD_2_9_BASE:1.13
	OPENBSD_2_9:1.13.0.2
	OPENBSD_2_8:1.12.0.2
	OPENBSD_2_8_BASE:1.12
	OPENBSD_2_7:1.11.0.2
	OPENBSD_2_7_BASE:1.11
	OPENBSD_2_6:1.7.0.2
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.6.0.2
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.30
date	2016.11.18.15.59.10;	author schwarze;	state Exp;
branches;
next	1.29;
commitid	IY39zW7OYDS9YMur;

1.29
date	2015.02.28.21.51.57;	author bentley;	state Exp;
branches;
next	1.28;
commitid	NNu2UZnsd5zmNVYD;

1.28
date	2014.10.22.21.00.05;	author schwarze;	state Exp;
branches;
next	1.27;
commitid	OsnaOgQZ8StAmEkN;

1.27
date	2014.05.25.07.36.36;	author jmc;	state Exp;
branches;
next	1.26;

1.26
date	2014.05.13.20.37.48;	author jmc;	state Exp;
branches;
next	1.25;

1.25
date	2010.10.21.13.20.51;	author jmc;	state Exp;
branches;
next	1.24;

1.24
date	2010.09.03.11.09.29;	author jmc;	state Exp;
branches;
next	1.23;

1.23
date	2010.03.26.19.30.40;	author jmc;	state Exp;
branches;
next	1.22;

1.22
date	2009.02.08.17.15.10;	author jmc;	state Exp;
branches;
next	1.21;

1.21
date	2008.09.15.19.22.32;	author martynas;	state Exp;
branches;
next	1.20;

1.20
date	2008.09.14.11.44.54;	author martynas;	state Exp;
branches;
next	1.19;

1.19
date	2008.09.08.20.16.13;	author martynas;	state Exp;
branches;
next	1.18;

1.18
date	2007.05.31.19.20.14;	author jmc;	state Exp;
branches;
next	1.17;

1.17
date	2007.05.30.04.41.34;	author jmc;	state Exp;
branches;
next	1.16;

1.16
date	2003.06.03.02.56.14;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2003.03.18.08.37.35;	author jmc;	state Exp;
branches;
next	1.14;

1.14
date	2002.11.14.02.57.28;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2001.02.17.17.15.27;	author pjanzen;	state Exp;
branches;
next	1.12;

1.12
date	2000.10.19.18.18.54;	author aaron;	state Exp;
branches;
next	1.11;

1.11
date	2000.03.23.21.10.18;	author aaron;	state Exp;
branches;
next	1.10;

1.10
date	2000.03.10.20.17.49;	author aaron;	state Exp;
branches;
next	1.9;

1.9
date	2000.03.06.03.15.59;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	2000.01.22.12.46.30;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	99.06.05.01.21.37;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	98.11.30.01.48.02;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	98.09.27.16.57.50;	author aaron;	state Exp;
branches;
next	1.4;

1.4
date	98.08.25.13.35.52;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	98.06.12.12.13.35;	author d;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.37.58;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.57;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.57;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.30
log
@Fix two documentation bugs:
1. Specifying a precision for the %s format character limits the number
of bytes printed, not the number of characters.
2. Document the intentional POSIX violation of ignoring the locale.
Feedback and OK jmc@@, bentley@@.
@
text
@.\"	$OpenBSD: printf.1,v 1.29 2015/02/28 21:51:57 bentley Exp $
.\"
.\" Copyright (c) 1989, 1990 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" the Institute of Electrical and Electronics Engineers, Inc.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	from: @@(#)printf.1	5.11 (Berkeley) 7/24/91
.\"
.Dd $Mdocdate: February 28 2015 $
.Dt PRINTF 1
.Os
.Sh NAME
.Nm printf
.Nd formatted output
.Sh SYNOPSIS
.Nm printf
.Ar format
.Op Ar argument ...
.Sh DESCRIPTION
.Nm printf
formats and prints its arguments, after the first, under control
of the
.Ar format .
The
.Ar format
is a character string which contains three types of objects: plain characters,
which are simply copied to standard output, character escape sequences which
are converted and copied to the standard output, and format specifications,
each of which causes printing of the next successive
.Ar argument .
.Pp
The arguments after the first are treated as strings
if the corresponding format is
.Cm b ,
.Cm c
or
.Cm s ;
otherwise it is evaluated as a C constant, with the following extensions:
.Bl -bullet -offset indent
.It
A leading plus or minus sign is allowed.
.It
If the leading character is a single or double quote, the value is the
.Tn ASCII
code of the next character.
.El
.Pp
The format string is reused as often as necessary to satisfy the arguments.
Any extra format specifications are evaluated with zero or the null
string.
.Pp
Character escape sequences are in backslash notation as defined in
.St -ansiC .
The characters and their meanings are as follows:
.Pp
.Bl -tag -width Ds -offset indent -compact
.It Cm \ea
Write a <bell> character.
.It Cm \eb
Write a <backspace> character.
.It Cm \ee
Write an <escape> character.
.It Cm \ef
Write a <form-feed> character.
.It Cm \en
Write a <new-line> character.
.It Cm \er
Write a <carriage return> character.
.It Cm \et
Write a <tab> character.
.It Cm \ev
Write a <vertical tab> character.
.It Cm \e\'
Write a <single quote> character.
.It Cm \e\e
Write a backslash character.
.It Cm \e Ns Ar num
Write an 8-bit character whose
.Tn ASCII
value is the 1-, 2-, or 3-digit
octal number
.Ar num .
.El
.Pp
Each format specification is introduced by the percent
.Pq Sq \&%
character.
The remainder of the format specifiers include,
in the following order:
.Bl -tag -width Ds
.It "Zero or more of the following flags:"
.Bl -tag -width Ds
.It Cm #
Specifies that the value should be printed in an
.Dq alternate form .
For the
.Cm o
format the precision of the number is increased to force the first
character of the output string to a zero.
For the
.Cm x
.Pq Cm X
format, a non-zero result has the string
.Li 0x
.Pq Li 0X
prepended to it.
For
.Cm a ,
.Cm A ,
.Cm e ,
.Cm E ,
.Cm f ,
.Cm F ,
.Cm g ,
and
.Cm G
formats, the result will always contain a decimal point, even if no
digits follow the point (normally, a decimal point only appears in the
results of those formats if a digit follows the decimal point).
For
.Cm g
and
.Cm G
formats, trailing zeros are not removed from the result as they
would otherwise be.
For all other formats, behaviour is undefined.
.It Cm \&\-
Specifies the
.Em left adjustment
of the output in the indicated field.
.It Cm \&+
Specifies that there should always be
a sign placed before the number when using signed formats.
.It Sq \&\ \&
A space specifies that a blank should be left before a positive number
for a signed format.
A
.Ql +
overrides a space if both are used.
.It Cm \&0
A zero character specifies that zero-padding should be used
rather than blank-padding.
This flag is ignored if used with a precision
specifier and any of the
.Cm d , i , o , u ,
or
.Cm x
.Pq Cm X
formats.
A
.Ql \&-
overrides a
.Ql \&0
if both are used.
.El
.It "Field Width:"
An optional digit string specifying a
.Em field width ;
if the output string has fewer characters than the field width it will
be blank-padded on the left (or right, if the left-adjustment indicator
has been given) to make up the field width (note that a leading zero
is a flag, but an embedded zero is part of a field width).
.It Precision:
An optional period
.Pq Sq \&. ,
followed by an optional digit string giving a
.Em precision
which specifies the number of digits to appear after the decimal point,
for
.Cm e
and
.Cm f
formats, or the maximum number of bytes to be printed
from a string; if the digit string is missing, the precision is treated
as zero.
.It Format:
A character which indicates the type of format to use (one of
.Cm diouxXfFeEgGaAbcs ) .
.El
.Pp
A field width or precision may be
.Ql \&*
instead of a digit string.
In this case an
.Ar argument
supplies the field width or precision.
.Pp
The format characters and their meanings are:
.Bl -tag -width Fl
.It Cm diouXx
The
.Ar argument
is printed as a signed decimal
.Pq Cm d No or Cm i ,
unsigned octal, unsigned decimal,
or unsigned hexadecimal
.Pq Cm x No or Cm X ,
respectively.
.It Cm fF
The
.Ar argument
is printed in the style
.Sm off
.Pf [\-]ddd Cm \&. No ddd
.Sm on
where the number of d's
after the decimal point is equal to the precision specification for
the argument.
If the precision is missing, 6 digits are given; if the precision
is explicitly 0, no digits and no decimal point are printed.
.Pp
If the argument is infinity, it will be converted to [-]inf
.Pq Cm f
or [-]INF
.Pq Cm F ,
respectively.
If the argument is not-a-number (NaN), it will be converted to
[-]nan
.Pq Cm f
or [-]NAN
.Pq Cm F ,
respectively.
.It Cm eE
The
.Ar argument
is printed in the style
.Sm off
.Pf [\-]d Cm \&. No ddd Cm e No \(+-dd
.Sm on
where there
is one digit before the decimal point and the number after is equal to
the precision specification for the argument; when the precision is
missing, 6 digits are produced.
An upper-case
.Sq E
is used for an
.Cm E
format.
.Pp
If the argument is infinity, it will be converted to [-]inf
.Pq Cm e
or [-]INF
.Pq Cm E ,
respectively.
If the argument is not-a-number (NaN), it will be converted to
[-]nan
.Pq Cm e
or [-]NAN
.Pq Cm E ,
respectively.
.It Cm gG
The
.Ar argument
is printed in style
.Cm f
or in style
.Cm e
.Pq Cm E
whichever gives full precision in minimum space.
.Pp
If the argument is infinity, it will be converted to [-]inf
.Pq Cm g
or [-]INF
.Pq Cm G ,
respectively.
If the argument is not-a-number (NaN), it will be converted to
[-]nan
.Pq Cm g
or [-]NAN
.Pq Cm G ,
respectively.
.It Cm aA
The
.Ar argument
is printed in style
.Sm off
.Pf [\-]0xh Cm \&. No hhh Cm p No [\(+-]d
.Sm on
where there is one digit before the hexadecimal point and the number
after is equal to the precision specification for the argument.
When the precision is missing, enough digits are produced to convey
the argument's exact double-precision floating-point representation.
.Pp
If the argument is infinity, it will be converted to [-]inf
.Pq Cm a
or [-]INF
.Pq Cm A ,
respectively.
If the argument is not-a-number (NaN), it will be converted to
[-]nan
.Pq Cm a
or [-]NAN
.Pq Cm A ,
respectively.
.It Cm b
Characters from the string
.Ar argument
are printed with backslash-escape sequences expanded.
If the
.Ar argument
contains the special escape sequence
.Cm \ec ,
this escape sequence is discarded together with
all remaining characters in this argument, all further arguments,
and all remaining characters in the
.Ar format
string.
.It Cm c
The first character of
.Ar argument
is printed.
.It Cm s
Characters from the string
.Ar argument
are printed until the end is reached or until the number of bytes
indicated by the precision specification is reached; however if the
precision is 0 or missing, all characters in the string are printed.
.It Cm \&%
Print a
.Ql \&% ;
no argument is used.
.El
.Pp
In no case does a non-existent or small field width cause truncation of
a field; padding takes place only if the specified field width exceeds
the actual width.
.Sh EXIT STATUS
.Ex -std printf
.Sh EXAMPLES
Convert a hexadecimal value to decimal and print it out:
.Pp
.D1 Ic $ printf \&"%d\en\&" 0x20
.Pp
Print the decimal representation of the character 'a' (see
.Xr ascii 7 ) :
.Pp
.D1 Ic $ printf \&"%d\en\&" \e'a
.Sh SEE ALSO
.Xr echo 1 ,
.Xr printf 3
.Sh STANDARDS
The
.Nm
utility is compliant with the
.St -p1003.1-2008
specification, but in order to produce predictable output
it deliberately ignores the
.Xr locale 1
and always operates as if
.Ev LC_ALL Ns =C
were set.
.Pp
The escape sequences \ee and \e' are extensions to that specification.
.Sh HISTORY
The
.Nm
command appeared in
.Bx 4.3 Reno .
.Sh CAVEATS
It is important never to pass a string with user-supplied data as a
format without using
.Ql %s .
An attacker can put format specifiers in the string to mangle your stack,
leading to a possible security hole.
.Pp
Always be sure to use the proper secure idiom:
.Bd -literal -offset indent
printf "%s" "$STRING"
.Ed
.Sh BUGS
Since arguments are translated from
.Tn ASCII
to floating-point, and
then back again, floating-point precision may be lost.
@


1.29
log
@Reduce usage of predefined strings in manpages.

Predefined strings are not very portable across troff implementations,
and they make the source much harder to read. Usually the intended
character can be written directly.

No output changes, except for two instances where the incorrect escape
was used in the first place.

tweaks + ok schwarze@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.1,v 1.28 2014/10/22 21:00:05 schwarze Exp $
d35 1
a35 1
.Dd $Mdocdate: October 22 2014 $
d199 1
a199 1
formats, or the maximum number of characters to be printed
d341 1
a341 1
are printed until the end is reached or until the number of characters
d372 6
a377 1
specification.
@


1.28
log
@document the special \c escape sequence that can only be used with %b;
gap found by guenther@@ following a question asked
by Frank Brodbeck <fab at split dash brain dot de>;
while here, sort escape sequences,
this part of the patch from Frank Brodbeck;
ok guenther@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.1,v 1.27 2014/05/25 07:36:36 jmc Exp $
d35 1
a35 1
.Dd $Mdocdate: May 25 2014 $
d254 1
a254 1
.Pf [\-]d Cm \&. No ddd Cm e No \*(Pmdd
d303 1
a303 1
.Pf [\-]0xh Cm \&. No hhh Cm p No [\*(Pm]d
@


1.27
log
@don't use plural "arguments" in SYNOPSIS, since "..." makes it
redundant; tweak the rest of the page to stop using both forms,
and tweak usage(), which was wrong anyway, to match this;
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.1,v 1.26 2014/05/13 20:37:48 jmc Exp $
d35 1
a35 1
.Dd $Mdocdate: May 13 2014 $
a82 2
.It Cm \ee
Write an <escape> character.
d87 2
d325 9
@


1.26
log
@- document two escape sequences as extensions in STANDARDS
- document undefined behaviour for unlisted formats in
combination with `#'; guenther helped me organise this into a saner
piece of text

ok guenther
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.1,v 1.25 2010/10/21 13:20:51 jmc Exp $
d35 1
a35 1
.Dd $Mdocdate: October 21 2010 $
d44 1
a44 1
.Op Ar arguments ...
d58 2
a59 3
The
.Ar arguments
after the first are treated as strings if the corresponding format is
d74 1
a74 2
The format string is reused as often as necessary to satisfy the
.Ar arguments .
@


1.25
log
@more EXIT STATUS bits; from Daniel Dickman
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.1,v 1.24 2010/09/03 11:09:29 jmc Exp $
d35 1
a35 1
.Dd $Mdocdate: September 3 2010 $
a124 6
.Cm c ,
.Cm d ,
and
.Cm s
formats, this option has no effect.
For the
d154 1
d366 2
@


1.24
log
@add an EXIT STATUS section for /usr/bin;
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.1,v 1.23 2010/03/26 19:30:40 jmc Exp $
d35 1
a35 1
.Dd $Mdocdate: March 26 2010 $
d352 1
a352 3
The
.Nm
utility exits 0 on success or 1 on failure.
@


1.23
log
@dispense with some wacky escape sequences;
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.1,v 1.22 2009/02/08 17:15:10 jmc Exp $
d35 1
a35 1
.Dd $Mdocdate: February 8 2009 $
d351 1
a351 1
.Pp
@


1.22
log
@bump the posix reference in STANDARDS to IEEE Std 1003.1-2008, with a few
updates to follow;
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.1,v 1.21 2008/09/15 19:22:32 martynas Exp $
d35 1
a35 1
.Dd $Mdocdate: September 15 2008 $
d261 1
a261 1
.Pf [\-]d Cm \&. No ddd Cm e No \\*(Pmdd
d310 1
a310 1
.Pf [\-]0xh Cm \&. No hhh Cm p No [\\*(Pm]d
@


1.21
log
@- describe how printf(1) and printf(3) %e, %E, %g, %G, %a, %A behave
when the argument is infinity/not-a-number
ok millert@@, jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.1,v 1.20 2008/09/14 11:44:54 martynas Exp $
d35 1
a35 1
.Dd $Mdocdate: September 14 2008 $
d371 1
a371 1
.St -p1003.1-2004
@


1.20
log
@describe %a/%A.  from freebsd
tweaks/ok millert@@, jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.1,v 1.19 2008/09/08 20:16:13 martynas Exp $
d35 1
a35 1
.Dd $Mdocdate: September 8 2008 $
d272 12
d293 12
d316 12
@


1.19
log
@- add descriptions for %F, and infinity/not-a-number from printf(3)
- add missing %e to the format list
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.1,v 1.18 2007/05/31 19:20:14 jmc Exp $
d35 1
a35 1
.Dd $Mdocdate: May 31 2007 $
d142 2
d211 1
a211 1
.Cm diouxXfFeEgGbcs ) .
d248 1
a248 1
.Pq Cm F ,   
d281 11
@


1.18
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.1,v 1.17 2007/05/30 04:41:34 jmc Exp $
d35 1
a35 1
.Dd $Mdocdate$
d145 1
d209 1
a209 1
.Cm diouxXfEgGbcs ) .
d230 1
a230 1
.It Cm f
d242 12
@


1.17
log
@- use a consistent text for STANDARDS
- note which options are extensions to POSIX
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.1,v 1.16 2003/06/03 02:56:14 millert Exp $
d35 1
a35 1
.Dd November 5, 1993
@


1.16
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.1,v 1.15 2003/03/18 08:37:35 jmc Exp $
d307 4
a310 3
.Nm printf
utility conforms to
.St -p1003.2-92 .
@


1.15
log
@small typos;

ok miod@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.1,v 1.14 2002/11/14 02:57:28 deraadt Exp $
d17 1
a17 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
@


1.14
log
@use $ or # before commands in examples
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.1,v 1.13 2001/02/17 17:15:27 pjanzen Exp $
d298 1
a298 1
Convert a hexidecimal value to decimal and print it out:
@


1.13
log
@It's not that I mind split infinitives.  I just like to save'em for when
they're really needed.
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.1,v 1.12 2000/10/19 18:18:54 aaron Exp $
d300 1
a300 1
.D1 Ic printf \&"%d\en\&" 0x20
d305 1
a305 1
.D1 Ic printf \&"%d\en\&" \e'a
@


1.12
log
@Put the fmt strings CAVEATS section into userland printf(1) man page, too;
it applies here as well.
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.1,v 1.11 2000/03/23 21:10:18 aaron Exp $
d320 1
a320 1
It is important to never pass a string with user-supplied data as a
d326 1
a326 1
Be sure to always use the proper secure idiom:
@


1.11
log
@Fix some formatting problems I missed before.
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.1,v 1.10 2000/03/10 20:17:49 aaron Exp $
d319 11
@


1.10
log
@Various cleanups and standardization.
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.1,v 1.9 2000/03/06 03:15:59 aaron Exp $
d48 1
a48 1
.Op Ar arguments  ...
@


1.9
log
@Add HISTORY sections; from FreeBSD.
@
text
@d1 2
a2 1
.\"	$OpenBSD: printf.1,v 1.8 2000/01/22 12:46:30 aaron Exp $
d53 1
a53 1
.Ar format  .
d60 1
a60 1
.Ar argument  .
d70 1
a70 2
.Pp
.Bl -bullet -offset indent -compact
d80 1
a80 1
.Ar arguments  .
d86 3
a88 3
The characters and their meanings
are as follows:
.Bl -tag -width Ds -offset indent
d120 1
a120 1
The remainder of the format specification includes,
d129 1
a129 1
.Cm c  ,
d133 2
a134 1
formats, this option has no effect.  For the
d137 2
a138 1
character of the output string to a zero.  For the
d144 3
a146 2
prepended to it.  For
.Cm e  ,
d148 1
a148 1
.Cm f  ,
d154 2
a155 1
results of those formats if a digit follows the decimal point).  For
d170 3
a172 2
for a signed format.  A
.Dq +
d176 2
a177 1
rather than blank-padding.  This flag is ignored if used with a precision
d183 3
a185 2
formats.  A
.Dq \&-
d187 1
a187 1
.Dq \&0
d216 1
a216 1
.Dq \&*
d257 1
a257 1
.Dq E
d286 1
a286 1
.Dq \&% ;
@


1.8
log
@Add a couple of useful examples.
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.1,v 1.7 1999/06/05 01:21:37 aaron Exp $
d286 4
a289 3
.Sh RETURN VALUES
.Nm printf
exits 0 on success or 1 on failure.
d307 5
@


1.7
log
@- remove trailing white space
- remove arguments from .Os macros
- remove arguments from .Nm macros, where appropriate
- some more Dq/Sq/Ql insanity
- still lots to do in the usr.bin tree... :/
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.1,v 1.6 1998/11/30 01:48:02 aaron Exp $
d289 9
@


1.6
log
@cleanup; also note that ``0'' flag is ignored when used with a precision
specifier and any of the d, i, o, u, or x (X) formats, as per gcc warnings
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.1,v 1.5 1998/09/27 16:57:50 aaron Exp $
d45 1
a45 1
.Nm printf 
d74 1
a74 1
If the leading character is a single or double quote, the value is the 
d84 1
a84 1
Character escape sequences are in backslash notation as defined in 
d109 1
a109 1
.It Cm \e Ns Ar num 
d198 1
a198 1
and 
d229 1
a229 1
is printed in the style 
d241 1
a241 1
is printed in the style 
d295 1
a295 1
utility conforms to 
@


1.5
log
@usr.bin/ man page cleanups, n-s
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.1,v 1.4 1998/08/25 13:35:52 deraadt Exp $
a63 1
either
d117 3
a119 2
Each format specification is introduced by the percent character
(``%'').
d126 3
a128 3
A `#' character
specifying that the value should be printed in an ``alternate form''.
For
d135 1
a135 1
formats the precision of the number is increased to force the first
d158 1
a158 1
A minus sign `\-' which specifies
d162 1
a162 1
A `+' character specifying that there should always be
d165 4
a168 2
A space specifying that a blank should be left before a positive number
for a signed format.  A `+' overrides a space if both are used.
d170 12
a181 2
A zero `0' character indicating that zero-padding should be used
rather than blank-padding.  A `\-' overrides a `0' if both are used.
d191 2
a192 2
An optional period,
.Sq Cm \&.\& ,
d209 1
a209 1
.Sq Cm \&*
d220 6
a225 2
is printed as a signed decimal (d or i), unsigned octal, unsigned decimal,
or unsigned hexadecimal (X or x), respectively.
d249 5
a253 1
An upper-case E is used for an `E' format.
d278 3
a280 1
Print a `%'; no argument is used.
@


1.4
log
@doc \e in printf
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.1,v 1.3 1998/06/12 12:13:35 d Exp $
d49 1
a49 1
.Nm Printf
d132 1
a132 1
.Cm s  ,
d148 1
a148 1
.Cm G  ,
d156 1
a156 1
would otherwise be;
d160 1
a160 1
of the output in the indicated field;
d166 1
a166 1
for a signed format.  A `+' overrides a space if both are used;
d169 1
a169 1
rather than blank-padding.  A `\-' overrides a `0' if both are used;
d177 1
a177 1
is a flag, but an embedded zero is part of a field width);
d190 1
a190 1
as zero;
d265 2
a266 2
.Nm Printf
exits 0 on success, 1 on failure.
@


1.3
log
@there is no %w format
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.1,v 1.2 1996/06/26 05:37:58 deraadt Exp $
d90 2
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
.\"	$OpenBSD: printf.1,v 1.1.1.1 1995/10/18 08:45:57 deraadt Exp $
d191 1
a191 1
.Cm diouxXfwEgGbcs ) .
@


1.1
log
@Initial revision
@
text
@d1 1
a36 1
.\"	$Id: printf.1,v 1.5 1995/07/07 23:00:13 jtc Exp $
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
