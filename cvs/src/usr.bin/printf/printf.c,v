head	1.26;
access;
symbols
	OPENBSD_6_1:1.26.0.2
	OPENBSD_6_1_BASE:1.26
	OPENBSD_6_0:1.24.0.4
	OPENBSD_6_0_BASE:1.24
	OPENBSD_5_9:1.24.0.2
	OPENBSD_5_9_BASE:1.24
	OPENBSD_5_8:1.22.0.8
	OPENBSD_5_8_BASE:1.22
	OPENBSD_5_7:1.22.0.2
	OPENBSD_5_7_BASE:1.22
	OPENBSD_5_6:1.22.0.4
	OPENBSD_5_6_BASE:1.22
	OPENBSD_5_5:1.19.0.4
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.18.0.10
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.18.0.8
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.6
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.4
	OPENBSD_5_0:1.18.0.2
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.17.0.6
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.17.0.4
	OPENBSD_4_8_BASE:1.17
	OPENBSD_4_7:1.17.0.2
	OPENBSD_4_7_BASE:1.17
	OPENBSD_4_6:1.14.0.6
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.2
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.13.0.2
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.12.0.16
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.14
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.12
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.10
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.8
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.6
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.4
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.12.0.2
	OPENBSD_3_6_BASE:1.12
	OPENBSD_3_5:1.11.0.4
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.7.0.6
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_8:1.3.0.16
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.14
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.12
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.10
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.26
date	2016.11.18.15.53.16;	author schwarze;	state Exp;
branches;
next	1.25;
commitid	WKOU7sXpYmpACUc3;

1.25
date	2016.07.27.01.52.03;	author tedu;	state Exp;
branches;
next	1.24;
commitid	xcb034MVcMCsTjLr;

1.24
date	2015.10.09.01.37.08;	author deraadt;	state Exp;
branches;
next	1.23;
commitid	sbrB3Q5CNxcwZpfU;

1.23
date	2015.10.06.23.01.43;	author deraadt;	state Exp;
branches;
next	1.22;
commitid	XtjBBvg3IH3U9W5x;

1.22
date	2014.05.25.07.36.36;	author jmc;	state Exp;
branches;
next	1.21;

1.21
date	2014.05.20.01.25.23;	author guenther;	state Exp;
branches;
next	1.20;

1.20
date	2014.04.18.11.35.51;	author guenther;	state Exp;
branches;
next	1.19;

1.19
date	2013.11.20.20.46.47;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2011.06.18.02.36.22;	author guenther;	state Exp;
branches;
next	1.17;

1.17
date	2009.10.27.23.59.41;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2009.07.19.15.47.57;	author martynas;	state Exp;
branches;
next	1.15;

1.15
date	2009.07.17.17.39.30;	author martynas;	state Exp;
branches;
next	1.14;

1.14
date	2008.09.08.17.04.20;	author martynas;	state Exp;
branches;
next	1.13;

1.13
date	2008.06.19.16.24.00;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2004.05.31.15.48.26;	author pedro;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.23.16.40.44;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.10.22.20.49;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.03.02.56.14;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2003.03.30.20.46.29;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.19.19.39.39;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.16.21.27.51;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.11.19.19.02.15;	author mpech;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.22.22.53.10;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.01.17.07.13.06;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.37.59;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.57;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.57;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.26
log
@Delete useless call to setlocale(3).

While the C library function printf(3) is used here and is
locale-dependent, the printf(1) utility does not use the locale
dependent parts %lc and %ls.  While POSIX requires LC_NUMERIC
support, we intentionally don't implement that in printf(3).
In summary, no functional change.

While here, sort headers and use the usual __dead usage() idiom.
Based on a patch from Jan Stary <hans at stare dot cz>.
OK bentley@@
@
text
@/*	$OpenBSD: printf.c,v 1.25 2016/07/27 01:52:03 tedu Exp $	*/

/*
 * Copyright (c) 1989 The Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <ctype.h>
#include <err.h>
#include <errno.h>
#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

static int	 print_escape_str(const char *);
static int	 print_escape(const char *);

static int	 getchr(void);
static double	 getdouble(void);
static int	 getint(void);
static long	 getlong(void);
static unsigned long getulong(void);
static char	*getstr(void);
static char	*mklong(const char *, int); 
static void      check_conversion(const char *, const char *);
static void __dead usage(void);
     
static int	rval;
static char  **gargv;

#define isodigit(c)	((c) >= '0' && (c) <= '7')
#define octtobin(c)	((c) - '0')
#define hextobin(c)	((c) >= 'A' && (c) <= 'F' ? c - 'A' + 10 : (c) >= 'a' && (c) <= 'f' ? c - 'a' + 10 : c - '0')

#define PF(f, func) { \
	if (havefieldwidth) \
		if (haveprecision) \
			(void)printf(f, fieldwidth, precision, func); \
		else \
			(void)printf(f, fieldwidth, func); \
	else if (haveprecision) \
		(void)printf(f, precision, func); \
	else \
		(void)printf(f, func); \
}

int
main(int argc, char *argv[])
{
	char *fmt, *start;
	int havefieldwidth, haveprecision;
	int fieldwidth, precision;
	char convch, nextch;
	char *format;

	if (pledge("stdio", NULL) == -1)
		err(1, "pledge");

	/* Need to accept/ignore "--" option. */
	if (argc > 1 && strcmp(argv[1], "--") == 0) {
		argc--;
		argv++;
	}

	if (argc < 2)
		usage();

	format = *++argv;
	gargv = ++argv;

#define SKIP1	"#-+ 0"
#define SKIP2	"0123456789"
	do {
		/*
		 * Basic algorithm is to scan the format string for conversion
		 * specifications -- once one is found, find out if the field
		 * width or precision is a '*'; if it is, gather up value. 
		 * Note, format strings are reused as necessary to use up the
		 * provided arguments, arguments of zero/null string are 
		 * provided to use up the format string.
		 */

		/* find next format specification */
		for (fmt = format; *fmt; fmt++) {
			switch (*fmt) {
			case '%':
				start = fmt++;

				if (*fmt == '%') {
					putchar ('%');
					break;
				} else if (*fmt == 'b') {
					char *p = getstr();
					if (print_escape_str(p)) {
						return (rval);
					}
					break;
				}

				/* skip to field width */
				for (; strchr(SKIP1, *fmt); ++fmt)
					;
				if (*fmt == '*') {
					++fmt;
					havefieldwidth = 1;
					fieldwidth = getint();
				} else
					havefieldwidth = 0;

				/* skip to field precision */
				for (; strchr(SKIP2, *fmt); ++fmt)
					;
				haveprecision = 0;
				if (*fmt == '.') {
					++fmt;
					if (*fmt == '*') {
						++fmt;
						haveprecision = 1;
						precision = getint();
					}
					for (; strchr(SKIP2, *fmt); ++fmt)
						;
				}

				if (!*fmt) {
					warnx ("missing format character");
					return(1);
				}

				convch = *fmt;
				nextch = *(fmt + 1);
				*(fmt + 1) = '\0';
				switch(convch) {
				case 'c': {
					char p = getchr();
					PF(start, p);
					break;
				}
				case 's': {
					char *p = getstr();
					PF(start, p);
					break;
				}
				case 'd':
				case 'i': {
					long p;
					char *f = mklong(start, convch);
					if (!f) {
						warnx("out of memory");
						return (1);
					}
					p = getlong();
					PF(f, p);
					break;
				}
				case 'o':
				case 'u':
				case 'x':
				case 'X': {
					unsigned long p;
					char *f = mklong(start, convch);
					if (!f) {
						warnx("out of memory");
						return (1);
					}
					p = getulong();
					PF(f, p);
					break;
				}
				case 'a':
				case 'A':
				case 'e':
				case 'E':
				case 'f':
				case 'F':
				case 'g':
				case 'G': {
					double p = getdouble();
					PF(start, p);
					break;
				}
				default:
					warnx ("%s: invalid directive", start);
					return(1);
				}
				*(fmt + 1) = nextch;
				break;

			case '\\':
				fmt += print_escape(fmt);
				break;

			default:
				putchar (*fmt);
				break;
			}
		}
	} while (gargv > argv && *gargv);

	return (rval);
}


/*
 * Print SysV echo(1) style escape string 
 *	Halts processing string and returns 1 if a \c escape is encountered.
 */
static int
print_escape_str(const char *str)
{
	int value;
	int c;

	while (*str) {
		if (*str == '\\') {
			str++;
			/* 
			 * %b string octal constants are not like those in C.
			 * They start with a \0, and are followed by 0, 1, 2, 
			 * or 3 octal digits. 
			 */
			if (*str == '0') {
				str++;
				for (c = 3, value = 0; c-- && isodigit(*str); str++) {
					value <<= 3;
					value += octtobin(*str);
				}
				putchar (value);
				str--;
			} else if (*str == 'c') {
				return 1;
			} else {
				str--;			
				str += print_escape(str);
			}
		} else {
			putchar (*str);
		}
		str++;
	}

	return 0;
}

/*
 * Print "standard" escape characters 
 */
static int
print_escape(const char *str)
{
	const char *start = str;
	int value;
	int c;

	str++;

	switch (*str) {
	case '0': case '1': case '2': case '3':
	case '4': case '5': case '6': case '7':
		for (c = 3, value = 0; c-- && isodigit(*str); str++) {
			value <<= 3;
			value += octtobin(*str);
		}
		putchar(value);
		return str - start - 1;
		/* NOTREACHED */

	case 'x':
		str++;
		for (value = 0; isxdigit((unsigned char)*str); str++) {
			value <<= 4;
			value += hextobin(*str);
		}
		if (value > UCHAR_MAX) {
			warnx ("escape sequence out of range for character");
			rval = 1;
		}
		putchar (value);
		return str - start - 1;
		/* NOTREACHED */

	case '\\':			/* backslash */
		putchar('\\');
		break;

	case '\'':			/* single quote */
		putchar('\'');
		break;

	case '"':			/* double quote */
		putchar('"');
		break;

	case 'a':			/* alert */
		putchar('\a');
		break;

	case 'b':			/* backspace */
		putchar('\b');
		break;

	case 'e':			/* escape */
#ifdef __GNUC__
		putchar('\e');
#else
		putchar(033);
#endif
		break;

	case 'f':			/* form-feed */
		putchar('\f');
		break;

	case 'n':			/* newline */
		putchar('\n');
		break;

	case 'r':			/* carriage-return */
		putchar('\r');
		break;

	case 't':			/* tab */
		putchar('\t');
		break;

	case 'v':			/* vertical-tab */
		putchar('\v');
		break;

	case '\0':
		warnx("null escape sequence");
		rval = 1;
		return 0;

	default:
		putchar(*str);
		warnx("unknown escape sequence `\\%c'", *str);
		rval = 1;
	}

	return 1;
}

static char *
mklong(const char *str, int ch)
{
	static char *copy;
	static int copysize;
	int len;	

	len = strlen(str) + 2;
	if (copysize < len) {
		char *newcopy;
		copysize = len + 256;

		newcopy = realloc(copy, copysize);
		if (newcopy == NULL) {
			copysize = 0;
			free(copy);
			copy = NULL;
			return (NULL);
		}
		copy = newcopy;
	}
	(void) memmove(copy, str, len - 3);
	copy[len - 3] = 'l';
	copy[len - 2] = ch;
	copy[len - 1] = '\0';
	return (copy);	
}

static int
getchr(void)
{
	if (!*gargv)
		return((int)'\0');
	return((int)**gargv++);
}

static char *
getstr(void)
{
	if (!*gargv)
		return("");
	return(*gargv++);
}

static char *number = "+-.0123456789";
static int
getint(void)
{
	if (!*gargv)
		return(0);

	if (strchr(number, **gargv))
		return(atoi(*gargv++));

	return 0;
}

static long
getlong(void)
{
	long val;
	char *ep;

	if (!*gargv)
		return(0L);

	if (**gargv == '\"' || **gargv == '\'')
		return (unsigned char) *((*gargv++)+1);

	errno = 0;
	val = strtol (*gargv, &ep, 0);
	check_conversion(*gargv++, ep);
	return val;
}

static unsigned long
getulong(void)
{
	unsigned long val;
	char *ep;

	if (!*gargv)
		return(0UL);

	if (**gargv == '\"' || **gargv == '\'')
		return (unsigned char) *((*gargv++)+1);

	errno = 0;
	val = strtoul (*gargv, &ep, 0);
	check_conversion(*gargv++, ep);
	return val;
}

static double
getdouble(void)
{
	double val;
	char *ep;

	if (!*gargv)
		return(0.0);

	if (**gargv == '\"' || **gargv == '\'')
		return (unsigned char) *((*gargv++)+1);

	errno = 0;
	val = strtod (*gargv, &ep);
	check_conversion(*gargv++, ep);
	return val;
}

static void
check_conversion(const char *s, const char *ep)
{
	if (*ep) {
		if (ep == s)
			warnx ("%s: expected numeric value", s);
		else
			warnx ("%s: not completely converted", s);
		rval = 1;
	} else if (errno == ERANGE) {
		warnc(ERANGE, "%s", s);
		rval = 1;
	}
}

static void __dead
usage(void)
{
	(void)fprintf(stderr, "usage: printf format [argument ...]\n");
	exit(1);
}
@


1.25
log
@fix signed char extension bugs. from fade@@cock.li. ok guenther.
As a personal remark, I'll add that it's not necessary to cast a value
to a function's return type. The compiler is happy to do that for you.
But such casts can hide warnings and bugs.
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.24 2015/10/09 01:37:08 deraadt Exp $	*/
d33 3
d38 1
a39 5
#include <string.h>
#include <limits.h>
#include <locale.h>
#include <errno.h>
#include <err.h>
d52 1
a52 1
static void	 usage(void); 
a81 2
	setlocale (LC_ALL, "");

d91 1
a91 1
	if (argc < 2) {
a92 2
		return (1);
	}
d496 1
a496 1
static void
d500 1
@


1.24
log
@Change all tame callers to namechange to pledge(2).
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.23 2015/10/06 23:01:43 deraadt Exp $	*/
d442 1
a442 1
		return (long) *((*gargv++)+1);
d460 1
a460 1
		return (unsigned long) *((*gargv++)+1);
d478 1
a478 1
		return (double) *((*gargv++)+1);
@


1.23
log
@obvious tame "stdio".  For those not keeping score, this is another
program which has had string mismanagement bugs before, probably
of the exploitable fashion.. if used in the wrong kind of script..
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.22 2014/05/25 07:36:36 jmc Exp $	*/
d85 2
a86 2
	if (tame("stdio", NULL) == -1)
		err(1, "tame");
@


1.22
log
@don't use plural "arguments" in SYNOPSIS, since "..." makes it
redundant; tweak the rest of the page to stop using both forms,
and tweak usage(), which was wrong anyway, to match this;
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.21 2014/05/20 01:25:23 guenther Exp $	*/
d35 1
d84 3
@


1.21
log
@Use errc/warnc to simplify code.
Also, in 'ftp', always put the error message last, after the hostname/ipaddr.

ok jsing@@ krw@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.20 2014/04/18 11:35:51 guenther Exp $	*/
d500 1
a500 1
	(void)fprintf(stderr, "usage: printf format [arg ...]\n");
@


1.20
log
@Handle passing zero to a variable fieldwidth or precision.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.19 2013/11/20 20:46:47 deraadt Exp $	*/
d492 1
a492 1
		warnx ("%s: %s", s, strerror(ERANGE));
@


1.19
log
@isxdigit() needs unsigned char cast for this specific argument
ok ratchov
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.18 2011/06/18 02:36:22 guenther Exp $	*/
d62 2
a63 2
	if (fieldwidth) \
		if (precision) \
d67 1
a67 1
	else if (precision) \
d77 1
d132 1
d135 1
a135 1
					fieldwidth = 0;
d140 1
a140 1
				precision = 0;
d145 1
@


1.18
log
@Warn and stop processing if the format string ends with an backslash.
From Andres Perera (andres.p at zoho.com), ok otto@@, millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.17 2009/10/27 23:59:41 deraadt Exp $	*/
d294 1
a294 1
		for (value = 0; isxdigit(*str); str++) {
@


1.17
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.16 2009/07/19 15:47:57 martynas Exp $	*/
d353 5
@


1.16
log
@remove BUILTIN/SHELL cruft that used to be needed for sh, which is
gone;  and killed in csh w. rev. 1.7.  ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.15 2009/07/17 17:39:30 martynas Exp $	*/
a30 11

#ifndef lint
char copyright[] =
"@@(#) Copyright (c) 1989 The Regents of the University of California.\n\
 All rights reserved.\n";
#endif /* not lint */

#ifndef lint
/*static char sccsid[] = "from: @@(#)printf.c	5.9 (Berkeley) 6/1/90";*/
static char rcsid[] = "$OpenBSD: printf.c,v 1.15 2009/07/17 17:39:30 martynas Exp $";
#endif /* not lint */
@


1.15
log
@be more careful with parsing format string.  we can't do multiple
widths or precisions.  fixes crash reported by Maksymilian Arciemowicz,
where printf(3) took more args from stack than printf(1) passed it.
behavior consistent with linucses and ieee 1003.1-2001.
ok millert@@, otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.14 2008/09/08 17:04:20 martynas Exp $	*/
a32 1
#if !defined(SHELL) && !defined(BUILTIN)
a35 1
#endif
d40 1
a40 1
static char rcsid[] = "$OpenBSD: printf.c,v 1.14 2008/09/08 17:04:20 martynas Exp $";
a71 20
#ifdef SHELL
#define main printfcmd
#include "../../bin/sh/bltin/bltin.h"
#include <stdarg.h>

static void 
warnx(const char *fmt, ...)
{
	
	char buf[64];
	va_list ap;

	va_start(ap, fmt);
	vsnprintf(buf, sizeof buf, fmt, ap);
	va_end(ap);

	error(buf);
}
#endif /* SHELL */

a84 3
#ifdef BUILTIN
progprintf(int argc, char *argv[])
#else
a85 1
#endif
a91 1
#if !defined(SHELL) && !defined(BUILTIN)
a92 1
#endif
@


1.14
log
@enable support for %a, %A, %F.  ok theo
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.13 2008/06/19 16:24:00 millert Exp $	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD: printf.c,v 1.13 2008/06/19 16:24:00 millert Exp $";
d137 1
a137 1
#define SKIP2	"*0123456789"
d166 13
a178 6
				for (; strchr(SKIP1, *fmt); ++fmt) ;
				fieldwidth = *fmt == '*' ? getint() : 0;

				/* skip to possible '.', get following precision */
				for (; strchr(SKIP2, *fmt); ++fmt) ;
				if (*fmt == '.')
d180 7
a186 1
				precision = *fmt == '*' ? getint() : 0;
a187 1
				for (; strchr(SKIP2, *fmt); ++fmt) ;
@


1.13
log
@printf(1) does not take any options but still needs to ignore the "--"
(end of options) flag.  OK deraadt@@ espie@@
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.12 2004/05/31 15:48:26 pedro Exp $	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD: printf.c,v 1.12 2004/05/31 15:48:26 pedro Exp $";
d221 2
d226 1
@


1.12
log
@zap unused variables, ok beck@@
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.11 2003/06/23 16:40:44 millert Exp $	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD: printf.c,v 1.11 2003/06/23 16:40:44 millert Exp $";
d121 6
@


1.11
log
@Don't not use getopt() in printf(1) since it causes formats beginning
with a '-' to be interpreted as flags.  Noticed by Alan Barrett.
There is really no reason for this to be a builtin in csh...
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.10 2003/06/10 22:20:49 deraadt Exp $	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD: printf.c,v 1.10 2003/06/10 22:20:49 deraadt Exp $";
a116 1
	int ch;
@


1.10
log
@mostly ansi cleanup; pval ok
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.9 2003/06/03 02:56:14 millert Exp $	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD: printf.c,v 1.9 2003/06/03 02:56:14 millert Exp $";
d123 1
a123 12
	while ((ch = getopt(argc, argv, "")) != -1) {
		switch (ch) {
		case '?':
		default:
			usage();
			return (1);
		}
	}
	argc -= optind;
	argv += optind;

	if (argc < 1) {
d128 1
a128 1
	format = *argv;
@


1.9
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.8 2003/03/30 20:46:29 deraadt Exp $	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD: printf.c,v 1.8 2003/03/30 20:46:29 deraadt Exp $";
d108 1
a108 1
progprintf(argc, argv)
d110 1
a110 1
main(argc, argv)
a111 2
	int argc;
	char **argv;
d263 1
a263 2
print_escape_str(str)
	const char *str;
d303 1
a303 2
print_escape(str)
	const char *str;
d394 1
a394 3
mklong(str, ch)
	const char *str;
	char ch;
d422 1
a422 1
getchr()
d430 1
a430 1
getstr()
d439 1
a439 1
getint()
d451 1
a451 1
getlong()
d469 1
a469 1
getulong()
d487 1
a487 1
getdouble()
d505 1
a505 3
check_conversion(s, ep)
	const char *s;
	const char *ep;
d520 1
a520 1
usage()
@


1.8
log
@snprintf
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.7 2002/02/19 19:39:39 millert Exp $	*/
d15 1
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d42 1
a42 1
static char rcsid[] = "$OpenBSD: printf.c,v 1.7 2002/02/19 19:39:39 millert Exp $";
@


1.7
log
@We live in an ANSI C world.  Remove lots of gratuitous #ifdef __STDC__ cruft.
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.6 2002/02/16 21:27:51 millert Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: printf.c,v 1.6 2002/02/16 21:27:51 millert Exp $";
d91 1
a91 1
	vsprintf(buf, fmt, ap);
@


1.6
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.5 2001/11/19 19:02:15 mpech Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: printf.c,v 1.5 2001/11/19 19:02:15 mpech Exp $";
a80 2

#ifdef __STDC__
a81 3
#else
#include <vararg.h>
#endif
a83 1
#ifdef __STDC__
a84 5
#else
warnx(fmt, va_alist)
	const char *fmt;
	va_dcl
#endif
a89 1
#ifdef __STDC__
a90 3
#else
	va_start(ap);
#endif
a356 1
#ifdef __STDC__
a357 3
#else
		putchar(007);
#endif
@


1.5
log
@kill more registers

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.4 2000/12/22 22:53:10 deraadt Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: printf.c,v 1.4 2000/12/22 22:53:10 deraadt Exp $";
d58 2
a59 2
static int	 print_escape_str __P((const char *));
static int	 print_escape __P((const char *));
d61 9
a69 9
static int	 getchr __P((void));
static double	 getdouble __P((void));
static int	 getint __P((void));
static long	 getlong __P((void));
static unsigned long getulong __P ((void));
static char	*getstr __P((void));
static char	*mklong __P((const char *, int)); 
static void      check_conversion __P((const char *, const char *));
static void	 usage __P((void)); 
@


1.4
log
@repair same static buf oflow in printf(1) and printf(1) internal inside csh(1)
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.3 1997/01/17 07:13:06 millert Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: printf.c,v 1.3 1997/01/17 07:13:06 millert Exp $";
d134 2
a135 2
	register char *fmt, *start;
	register int fieldwidth, precision;
d285 1
a285 1
	register const char *str;
d326 1
a326 1
	register const char *str;
@


1.3
log
@r?index -> strr?chr
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.2 1996/06/26 05:37:59 deraadt Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: printf.c,v 1.2 1996/06/26 05:37:59 deraadt Exp $";
d224 1
d226 5
a230 1
					long p = getlong();
d238 1
d240 5
a244 1
					unsigned long p = getulong();
d425 2
a426 1
	static char copy[64];
d430 13
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: printf.c,v 1.1.1.1 1995/10/18 08:45:57 deraadt Exp $";
d193 1
a193 1
				for (; index(SKIP1, *fmt); ++fmt) ;
d197 1
a197 1
				for (; index(SKIP2, *fmt); ++fmt) ;
d202 1
a202 1
				for (; index(SKIP2, *fmt); ++fmt) ;
d449 1
a449 1
	if (index(number, **gargv))
@


1.1
log
@Initial revision
@
text
@d1 2
d46 1
a46 1
static char rcsid[] = "$Id: printf.c,v 1.13 1994/02/03 01:10:49 jtc Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
