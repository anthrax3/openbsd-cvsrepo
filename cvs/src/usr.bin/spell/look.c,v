head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.4
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.4.0.28
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.24
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.26
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.18
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.22
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.20
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.16
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.14
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.12
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.10
	OPENBSD_5_0:1.4.0.8
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.6
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.3.0.28
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.24
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.22
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.20
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.18
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.16
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.14
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.12
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.10
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.8
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.1.0.2
	OPENBSD_3_1_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2016.09.13.15.29.25;	author millert;	state Exp;
branches;
next	1.6;
commitid	KKN8GKOSQuN3yAwi;

1.6
date	2016.09.07.19.55.01;	author millert;	state Exp;
branches;
next	1.5;
commitid	8BHXKefJCBWe1a6J;

1.5
date	2016.09.07.19.47.52;	author millert;	state Exp;
branches;
next	1.4;
commitid	PC9w0HoFKpVjArVk;

1.4
date	2009.10.27.23.59.43;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2003.06.03.02.56.16;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.03.17.53.32;	author kjell;	state Exp;
branches;
next	1.1;

1.1
date	2002.03.01.22.01.11;	author millert;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Eliminate unnecessary isupper() check before tolower().
@
text
@/*	$OpenBSD: look.c,v 1.6 2016/09/07 19:55:01 millert Exp $	*/

/*-
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * David Hitz of Auspex Systems, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <err.h>

u_char	*binary_search(u_char *, u_char *, u_char *);
u_char	*linear_search(u_char *, u_char *, u_char *);
int	 compare(u_char *, u_char *, u_char *);
int	 look(u_char *, u_char *, u_char *);

int
look(u_char *string, u_char *front, u_char *back)
{
	u_char *s;

	/* Convert string to lower case before searching. */
	for (s = string; *s; s++) {
		if (isupper(*s))
			*s = tolower(*s);
	}

	front = binary_search(string, front, back);
	front = linear_search(string, front, back);

	return (front != NULL);
}

/*
 * Binary search for "string" in memory between "front" and "back".
 * 
 * This routine is expected to return a pointer to the start of a line at
 * *or before* the first word matching "string".  Relaxing the constraint
 * this way simplifies the algorithm.
 * 
 * Invariants:
 * 	front points to the beginning of a line at or before the first 
 *	matching string.
 * 
 * 	back points to the beginning of a line at or after the first 
 *	matching line.
 * 
 * Base of the Invariants.
 * 	front = NULL; 
 *	back = EOF;
 * 
 * Advancing the Invariants:
 * 
 * 	p = first newline after halfway point from front to back.
 * 
 * 	If the string at "p" is not greater than the string to match, 
 *	p is the new front.  Otherwise it is the new back.
 * 
 * Termination:
 * 
 * 	The definition of the routine allows it return at any point, 
 *	since front is always at or before the line to print.
 * 
 * 	In fact, it returns when the chosen "p" equals "back".  This 
 *	implies that there exists a string is least half as long as 
 *	(back - front), which in turn implies that a linear search will 
 *	be no more expensive than the cost of simply printing a string or two.
 * 
 * 	Trying to continue with binary search at this point would be 
 *	more trouble than it's worth.
 */
#define	SKIP_PAST_NEWLINE(p, back) \
	while (p < back && *p++ != '\n');

u_char *
binary_search(u_char *string, u_char *front, u_char *back)
{
	u_char *p;

	p = front + (back - front) / 2;
	SKIP_PAST_NEWLINE(p, back);

	/*
	 * If the file changes underneath us, make sure we don't
	 * infinitely loop.
	 */
	while (p < back && back > front) {
		if (compare(string, p, back) > 0)
			front = p;
		else
			back = p;
		p = front + (back - front) / 2;
		SKIP_PAST_NEWLINE(p, back);
	}
	return (front);
}

/*
 * Find the first line that matches string, linearly searching from front
 * to back.
 * 
 * Return NULL for no such line.
 * 
 * This routine assumes:
 * 
 * 	o front points at the first character in a line. 
 *	o front is before or at the first line to be printed.
 */
u_char *
linear_search(u_char *string, u_char *front, u_char *back)
{
	int result;

	while (front < back) {
		result = compare(string, front, back);
		if (result == 0)
			return (front);	/* found it */
		if (result < 0)
			return (NULL);	/* not there */

		SKIP_PAST_NEWLINE(front, back);
	}
	return (NULL);
}

int
compare(u_char *s1, u_char *s2, u_char *back)
{
	int ch;

	/* Note that s1 is already upper case. */
	for (;; ++s1, ++s2) {
		if (*s2 == '\n' || s2 == back)
			ch = '\0';
		else
			ch = tolower(*s2);
		if (*s1 != ch)
			return (*s1 - ch);
		if (ch == '\0')
			return (0);
	}
}
@


1.6
log
@Remove other instance of _tolower
@
text
@d1 1
a1 1
/*	$OpenBSD: look.c,v 1.5 2016/09/07 19:47:52 millert Exp $	*/
d165 1
a165 1
		else if (isupper(*s2))
a166 2
		else
			ch = *s2;
@


1.5
log
@Avoid using the obsolete _tolower() macro.
@
text
@d1 1
a1 1
/*	$OpenBSD: look.c,v 1.4 2009/10/27 23:59:43 deraadt Exp $	*/
d166 1
a166 1
			ch = _tolower(*s2);
@


1.4
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: look.c,v 1.3 2003/06/03 02:56:16 millert Exp $	*/
d55 1
a55 1
			*s = _tolower(*s);
@


1.3
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: look.c,v 1.2 2002/06/03 17:53:32 kjell Exp $	*/
a33 7

#ifndef lint
#if 0
static const char sccsid[] = "@@(#)look.c	8.2 (Berkeley) 5/4/95";
#endif
static const char rcsid[] = "$OpenBSD: look.c,v 1.2 2002/06/03 17:53:32 kjell Exp $";
#endif /* not lint */
@


1.2
log
@KNF [return(foo) -> return (foo)]. ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: look.c,v 1.1 2002/03/01 22:01:11 millert Exp $	*/
d18 1
a18 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d39 1
a39 1
static const char rcsid[] = "$OpenBSD: look.c,v 1.1 2002/03/01 22:01:11 millert Exp $";
@


1.1
log
@spell command from 4.4BSD, now freed by Caldera.
I have made some significant changes:
o spell no longer uses hashed files.  The algorithm for generating
  the hashed files breaks down for large files.  Instead, I use the
  same approach as look(1) and do binary searches of mmap(2)ed files
  which has acceptable performance.  A side effect of this is that
  spell can now search multiple word lists.
o The spell binary has been renamed to "spellprog" so as to not conflict
  with the spell shell script.  This is consistent with other operating
  systems.
o The putsuf() and putword() functions have been renamed to
  trypref() and tryword() respectively for consistency with modern
  versions and for general sanity.
o the spell front-end shell script has been completely rewritten
o The code has been ANSIfied and re-style(9)d

spell currently must be compiled with -fwriteable-strings to make
the -b option work.  This should be fixed.
@
text
@d1 1
a1 1
/*	$OpenBSD: look.c,v 1.7 2002/02/16 21:27:48 millert Exp $	*/
d43 1
a43 1
static const char rcsid[] = "$OpenBSD: look.c,v 1.7 2002/02/16 21:27:48 millert Exp $";
d158 1
a158 1
			return(front);	/* found it */
d160 1
a160 1
			return(NULL);	/* not there */
d181 1
a181 1
			return(*s1 - ch);
d183 1
a183 1
			return(0);
@

