head	1.8;
access;
symbols
	OPENBSD_6_2:1.8.0.10
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.8.0.8
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.4
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.7.0.24
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.16
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.20
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.18
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.14
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.12
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.10
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.8
	OPENBSD_5_0:1.7.0.6
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.4
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.2
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.5.0.22
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.24
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.20
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.18
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.16
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.14
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.12
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.10
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.8
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.6
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.4
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.2
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.4.0.12
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.10
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.8
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.6
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2;
locks; strict;
comment	@ * @;


1.8
date	2015.11.15.06.01.39;	author daniel;	state Exp;
branches;
next	1.7;
commitid	Cj3gfCJsGVUsP5fp;

1.7
date	2010.07.19.19.46.44;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2010.07.19.19.30.37;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2004.04.07.13.11.36;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.23.12.34.48;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.03.13.41.10;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2000.07.17.23.03.50;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2000.07.17.23.01.20;	author espie;	state Exp;
branches;
next	;


desc
@@


1.8
log
@exit needs stdlib, switch to "return 0" to fix.

ok espie
@
text
@/* $OpenBSD: regress.c,v 1.7 2010/07/19 19:46:44 espie Exp $ */

/*
 * Copyright (c) 1999 Marc Espie.
 *
 * Code written for the OpenBSD project.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE OPENBSD PROJECT AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENBSD
 * PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* regression tests */
#include <stdio.h>
#include <string.h>
#include "defines.h"
#include "str.h"

int main(void);
#define CHECK(s)		\
do {				\
    printf("%-65s", #s);	\
    if (s)			\
	printf("ok\n"); 	\
    else {			\
	printf("failed\n");	\
	errors++;		\
    }				\
} while (0);

int
main(void)
{
    unsigned int errors = 0;

    CHECK(Str_Match("string", "string") == true);
    CHECK(Str_Match("string", "string2") == false);
    CHECK(Str_Match("string", "string*") == true);
    CHECK(Str_Match("Long string", "Lo*ng") == true);
    CHECK(Str_Match("Long string", "Lo*ng ") == false);
    CHECK(Str_Match("Long string", "Lo*ng *") == true);
    CHECK(Str_Match("string", "stri?g") == true);
    CHECK(Str_Match("str?ng", "str\\?ng") == true);
    CHECK(Str_Match("striiiing", "str?*ng") == true);
    CHECK(Str_Match("Very long string just to see", "******a****") == false);
    CHECK(Str_Match("d[abc?", "d\\[abc\\?") == true);
    CHECK(Str_Match("d[abc!", "d\\[abc\\?") == false);
    CHECK(Str_Match("dwabc?", "d\\[abc\\?") == false);
    CHECK(Str_Match("da0", "d[bcda]0") == true);
    CHECK(Str_Match("da0", "d[z-a]0") == true);
    CHECK(Str_Match("d-0", "d[-a-z]0") == true);
    CHECK(Str_Match("dy0", "d[a\\-z]0") == false);
    CHECK(Str_Match("d-0", "d[a\\-z]0") == true);
    CHECK(Str_Match("dz0", "d[a\\]z]0") == true);

    if (errors != 0)
	printf("Errors: %d\n", errors);
    return 0;
}


@


1.7
log
@Correct $OpenBSD$ stuff
@
text
@d1 1
a1 1
/* $OpenBSD: regress.c,v 1.6 2010/07/19 19:30:37 espie Exp $ */
d75 1
a75 1
    exit(0);
@


1.6
log
@two small changes:
- allow variables in SysV modifiers, as requested by matthieu@@
(since recursive variables are an extension, this just extends the
extension)
- variation on :Q  called :QL (quote list), which does quote every character
EXCEPT for whitespace. e.g.,

toto:
	@@for i in ${VAR:QL} ...
@
text
@d1 1
a1 2
/* $OpenPackages$ */
/* $OpenBSD$ */
@


1.5
log
@ISO function declarations, trim a few comments, rename a few variables to
more explicit/more consistent names.

okay otto@@
@
text
@d2 1
a2 1
/* $OpenBSD: regress.c,v 1.4 2001/05/23 12:34:48 espie Exp $ */
@


1.4
log
@Mostly clean-up:
- cut up those huge include files into separate interfaces for all modules.
Put the interface documentation there, and not with the implementation.
- light-weight includes for needed concrete types (lst_t.h, timestamp_t.h).
- cut out some more logically separate parts: cmd_exec, varname, parsevar,
timestamp.
- put all error handling functions together, so that we will be able to
clean them up.
- more systematic naming: functioni  to handle interval, function to handle
string.
- put the init/end code apart to minimize coupling.
- kill weird types like ReturnStatus and Boolean. Use standard bool (with a
fallback for non-iso systems)
- better interface documentation for lots of subsystems.

As a result, make compilation goes somewhat faster (5%, even considering
the largish BSD copyrights to read). The corresponding preprocessed
source goes down from 1,5M to 1M.

A few minor code changes as well: Parse_DoVar is no longer destructive.
Parse_IsVar functionality is folded into Parse_DoVar (as it knows what an
assignment is), a few more interval handling functions. Avoid calling
XXX_End when they do nothing, just #define XXX_End   to nothing.

Parse_DoVar is slightly more general: it will handle compound assignments
as long as they make sense, e.g., VAR +!= cmd
will work.  As a side effect, VAR++=value now triggers an error
(two + in assignment).
- this stuff doesn't occur in portable Makefiles.
- writing VAR++ = value or VAR+ +=value  disambiguates it.
- this is a good thing, it uncovered a bug in bsd.port.mk.

Tested by naddy@@. Okayed millert@@. I'll handle the fallback if there is
any. This went through a full make build anyways, including isakmpd
(without mickey's custom binutils, as he didn't see fit to share it with me).
@
text
@d2 1
a2 1
/* $OpenBSD$ */
d50 1
a50 1
main()
@


1.3
log
@Synch with my current work.
Numerous changes:
- generate can build several tables
- style cleanup
- statistics code
- use variable names throughout (struct Name)
- recursive variables everywhere
- faster parser (pass buffer along instead of allocating multiple copies)
- correct parser. Handles comments everywhere, and ; correctly
- more string intervals
- simplified dir.c, less recursion.
- extended for loops
- sinclude()
- finished removing extra junk from Lst_*
- handles ${@@D} and friends in a simpler way
- cleaned up and modular VarModifiers handling.
- recognizes some gnu Makefile usages and errors out about them.

Additionally, some extra functionality is defined by FEATURES. The set of
functionalities is currently hardcoded to OpenBSD defaults, but this may
include support for some NetBSD extensions, like ODE modifiers.

Backed by miod@@ and millert@@, who finally got sick of my endless patches...
@
text
@a31 1
#include "make.h"
d33 3
d54 19
a72 19
    CHECK(Str_Match("string", "string") == TRUE);
    CHECK(Str_Match("string", "string2") == FALSE);
    CHECK(Str_Match("string", "string*") == TRUE);
    CHECK(Str_Match("Long string", "Lo*ng") == TRUE);
    CHECK(Str_Match("Long string", "Lo*ng ") == FALSE);
    CHECK(Str_Match("Long string", "Lo*ng *") == TRUE);
    CHECK(Str_Match("string", "stri?g") == TRUE);
    CHECK(Str_Match("str?ng", "str\\?ng") == TRUE);
    CHECK(Str_Match("striiiing", "str?*ng") == TRUE);
    CHECK(Str_Match("Very long string just to see", "******a****") == FALSE);
    CHECK(Str_Match("d[abc?", "d\\[abc\\?") == TRUE);
    CHECK(Str_Match("d[abc!", "d\\[abc\\?") == FALSE);
    CHECK(Str_Match("dwabc?", "d\\[abc\\?") == FALSE);
    CHECK(Str_Match("da0", "d[bcda]0") == TRUE);
    CHECK(Str_Match("da0", "d[z-a]0") == TRUE);
    CHECK(Str_Match("d-0", "d[-a-z]0") == TRUE);
    CHECK(Str_Match("dy0", "d[a\\-z]0") == FALSE);
    CHECK(Str_Match("d-0", "d[a\\-z]0") == TRUE);
    CHECK(Str_Match("dz0", "d[a\\]z]0") == TRUE);
@


1.2
log
@Str_Match returns TRUE or FALSE, better style to test those rather
than 1 or 0.
@
text
@d1 2
a2 1
/* $OpenBSD: regress.c,v 1.1 2000/07/17 23:01:20 espie Exp $ */
d8 1
a8 1
 * 
d35 1
a35 1
int main __P((void));
d40 1
a40 1
    	printf("ok\n"); 	\
d42 1
a42 1
    	printf("failed\n");	\
d47 1
a47 1
int 
@


1.1
log
@This does replace Str_Match with a better routine, which handles negated
intervals, and \\ in intervals.

Accordingly, var.c no longer needs to copy the :Marg to replace \: with :

We don't use fnmatch(3) because of various optimizations which are harder
to achieve in a generic setting.

Also add regression suite for the Str_Match function.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d46 2
a47 1
int main()
d49 1
a49 1
    unsigned errors = 0;
d51 19
a69 19
    CHECK(Str_Match("string", "string") == 1);
    CHECK(Str_Match("string", "string2") == 0);
    CHECK(Str_Match("string", "string*") == 1);
    CHECK(Str_Match("Long string", "Lo*ng") == 1);
    CHECK(Str_Match("Long string", "Lo*ng ") == 0);
    CHECK(Str_Match("Long string", "Lo*ng *") == 1);
    CHECK(Str_Match("string", "stri?g") == 1);
    CHECK(Str_Match("str?ng", "str\\?ng") == 1);
    CHECK(Str_Match("striiiing", "str?*ng") == 1);
    CHECK(Str_Match("Very long string just to see", "******a****") == 0);
    CHECK(Str_Match("d[abc?", "d\\[abc\\?") == 1);
    CHECK(Str_Match("d[abc!", "d\\[abc\\?") == 0);
    CHECK(Str_Match("dwabc?", "d\\[abc\\?") == 0);
    CHECK(Str_Match("da0", "d[bcda]0") == 1);
    CHECK(Str_Match("da0", "d[z-a]0") == 1);
    CHECK(Str_Match("d-0", "d[-a-z]0") == 1);
    CHECK(Str_Match("dy0", "d[a\\-z]0") == 0);
    CHECK(Str_Match("d-0", "d[a\\-z]0") == 1);
    CHECK(Str_Match("dz0", "d[a\\]z]0") == 1);
@

