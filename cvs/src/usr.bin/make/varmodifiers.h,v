head	1.12;
access;
symbols
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.26
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.22
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.24
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.16
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.20
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.18
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.14
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.12
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.10
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.8
	OPENBSD_5_0:1.12.0.6
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.4
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.2
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.10.0.8
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.10
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.6
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.4
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.2
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.8.0.2
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.3.0.24
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.22
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.20
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.18
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.16
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.14
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.12
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.10
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.8
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.6
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.4
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.4
	OPENBSD_2_8:1.1.0.2
	OPENBSD_2_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.12
date	2010.07.19.19.46.44;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2010.07.19.19.30.38;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2007.09.17.09.28.36;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2007.09.16.09.46.14;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2007.07.30.09.51.53;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2007.07.24.18.58.48;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2007.07.24.18.56.15;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2007.07.24.18.52.47;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2007.07.20.12.32.45;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.23.12.34.52;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.03.13.41.15;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2000.07.17.23.09.06;	author espie;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Correct $OpenBSD$ stuff
@
text
@#ifndef VARMODIFIERS_H
#define VARMODIFIERS_H

/* $OpenBSD: varmodifiers.h,v 1.11 2010/07/19 19:30:38 espie Exp $ */

/*
 * Copyright (c) 1999 Marc Espie.
 *
 * Extensive code changes for the OpenBSD project.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE OPENBSD PROJECT AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENBSD
 * PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* VarModifiers_Init();
 *	Set up varmodifiers internal table according to selected features.
 *	This can be called several times without harm. */
extern void VarModifiers_Init(void);


/* result = VarModifiers_Apply(val, name, ctxt, undef_is_bad,
 *   &should_free, &modstart, paren);
 *	Applies variable modifiers starting at modstart (including :),
 *	using parenthesis paren, to value val.
 *	Variables in spec are taken from context ctxt.
 *	If undef_is_bad, error occurs if undefined variables are mentioned.
 *	modstart is advanced past the end of the spec.
 *	name holds the name of the corresponding variable, as some ODE
 *	modifiers need it.
 *
 *	If both val and name are NULL, VarModifiers_Apply just parses the
 *	modifiers specification, as it can't apply it to anything. */
extern char *VarModifiers_Apply(char *, const struct Name *, SymTable *,
	bool, bool *, const char **, int);

/* Direct interface to specific modifiers used under special circumstances. */
/* tails = Var_GetTail(string);
 *	Returns the tail of list of words in string (needed for SysV locals). */
extern char *Var_GetTail(char *);
/* heads = Var_GetHead(string);
 *	Returns the head of list of words in string. */
/* XXX this does not replace foo with ., as (sun) System V make does.
 * Should it ? */
extern char *Var_GetHead(char *);
#endif
@


1.11
log
@two small changes:
- allow variables in SysV modifiers, as requested by matthieu@@
(since recursive variables are an extension, this just extends the
extension)
- variation on :Q  called :QL (quote list), which does quote every character
EXCEPT for whitespace. e.g.,

toto:
	@@for i in ${VAR:QL} ...
@
text
@d4 1
a4 2
/* $OpenPackages$ */
/* $OpenBSD$ */
@


1.10
log
@kill extra spaces at end of line
@
text
@d5 1
a5 1
/* $OpenBSD: varmodifiers.h,v 1.9 2007/09/16 09:46:14 espie Exp $ */
@


1.9
log
@remove dead code: #define RECHECK is always on
@
text
@d5 1
a5 1
/* $OpenBSD: varmodifiers.h,v 1.3 2001/05/23 12:34:52 espie Exp $ */
d42 2
a43 2
 *	Applies variable modifiers starting at modstart (including :), 
 *	using parenthesis paren, to value val.  
d52 1
a52 1
extern char *VarModifiers_Apply(char *, const struct Name *, SymTable *, 
@


1.8
log
@everywhere except in Var_Parse, we always add/append variables to the
VAR_GLOBAL context, so make it the common case: rename the basic functions
to Var_Set_with_ctxt/Var_Append_with_ctxt, define Var_Set and Var_Append
as macros that specify VAR_GLOBAL, and use these.

okay miod@@
@
text
@@


1.7
log
@simplify computations in the var module: instead of advancing a char *
and keeping track of a length, we just advance the char *, and ditch
the length. We can still get the length at the end of the top-level
functions to satisfy existing interfaces.

Much simpler code, less error-prone.

Okay millert@@
@
text
@@


1.6
log
@move the code that grabs a value in Var_Parse in its own function,
get_expanded_value.

Extend the code a bit to be much more thorough in case of a recursive
expansion: shows exactly the cycle of variable names involved.

okay millert@@
@
text
@d41 1
a41 1
 *   &should_free, modstart, paren, &length);
d46 1
a46 1
 *	length is filled with the total length of the modifier spec.
d53 1
a53 1
	bool, bool *, const char *, int, size_t *);
@


1.5
log
@change Var_ParseSkip API to increment the position instead of returning a
length, simplifies code.

(warns a bit, symptom of some further issues to fix).

okay millert@@
@
text
@@


1.4
log
@big clean-up patch:
- rename a few functions in var.c to names that make more sense.
- introduce Var_Deletei because it makes more sense.
- rewrite .for loops to use a local LoopVar construct to avoid looking up more
stuff.
- reformat var.c to near K&R
- rewrite most comments in var.c

shown to a few people. millert@@ gave me his okay since it passes through
ports correctly.
@
text
@@


1.3
log
@Mostly clean-up:
- cut up those huge include files into separate interfaces for all modules.
Put the interface documentation there, and not with the implementation.
- light-weight includes for needed concrete types (lst_t.h, timestamp_t.h).
- cut out some more logically separate parts: cmd_exec, varname, parsevar,
timestamp.
- put all error handling functions together, so that we will be able to
clean them up.
- more systematic naming: functioni  to handle interval, function to handle
string.
- put the init/end code apart to minimize coupling.
- kill weird types like ReturnStatus and Boolean. Use standard bool (with a
fallback for non-iso systems)
- better interface documentation for lots of subsystems.

As a result, make compilation goes somewhat faster (5%, even considering
the largish BSD copyrights to read). The corresponding preprocessed
source goes down from 1,5M to 1M.

A few minor code changes as well: Parse_DoVar is no longer destructive.
Parse_IsVar functionality is folded into Parse_DoVar (as it knows what an
assignment is), a few more interval handling functions. Avoid calling
XXX_End when they do nothing, just #define XXX_End   to nothing.

Parse_DoVar is slightly more general: it will handle compound assignments
as long as they make sense, e.g., VAR +!= cmd
will work.  As a side effect, VAR++=value now triggers an error
(two + in assignment).
- this stuff doesn't occur in portable Makefiles.
- writing VAR++ = value or VAR+ +=value  disambiguates it.
- this is a good thing, it uncovered a bug in bsd.port.mk.

Tested by naddy@@. Okayed millert@@. I'll handle the fallback if there is
any. This went through a full make build anyways, including isakmpd
(without mickey's custom binutils, as he didn't see fit to share it with me).
@
text
@d5 1
a5 1
/* $OpenBSD$ */
d41 1
a41 1
 *   &should_free, modstart, endc, &length);
d43 1
a43 1
 *	ending with character endc, to value val.  
@


1.2
log
@Synch with my current work.
Numerous changes:
- generate can build several tables
- style cleanup
- statistics code
- use variable names throughout (struct Name)
- recursive variables everywhere
- faster parser (pass buffer along instead of allocating multiple copies)
- correct parser. Handles comments everywhere, and ; correctly
- more string intervals
- simplified dir.c, less recursion.
- extended for loops
- sinclude()
- finished removing extra junk from Lst_*
- handles ${@@D} and friends in a simpler way
- cleaned up and modular VarModifiers handling.
- recognizes some gnu Makefile usages and errors out about them.

Additionally, some extra functionality is defined by FEATURES. The set of
functionalities is currently hardcoded to OpenBSD defaults, but this may
include support for some NetBSD extensions, like ODE modifiers.

Backed by miod@@ and millert@@, who finally got sick of my endless patches...
@
text
@d1 3
d33 19
a51 2
#ifndef VARMODIFIERS_H
#define VARMODIFIERS_H
d53 5
a57 1
	Boolean, Boolean *, const char *, int, size_t *);
d59 4
a63 1
extern void VarModifiers_Init(void);
@


1.1
log
@Major unobfuscation: split var modifiers handling to a separate file.
This does finally make var handling somewhat readable.
@
text
@d1 1
d32 5
a36 4
extern char *VarModifiers_Apply __P((char *, SymTable *, Boolean, 
	Boolean *, char *, char, size_t *));
extern char *Var_GetTail __P((char *));
extern char *Var_GetHead __P((char *));
@

