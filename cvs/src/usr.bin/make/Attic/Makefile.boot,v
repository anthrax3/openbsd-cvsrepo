head	1.11;
access;
symbols
	OPENBSD_5_4:1.10.0.14
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.12
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.10
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.8
	OPENBSD_5_0:1.10.0.6
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.4
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.2
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.8.0.36
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.32
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.30
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.28
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.26
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.24
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.22
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.20
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.18
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.16
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.14
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.12
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.10
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.8.0.8
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.6
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.4
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.10
	OPENBSD_2_8:1.6.0.8
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.6
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.6.0.4
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.2
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.5.0.6
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.4
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.11
date	2013.10.13.15.18.16;	author deraadt;	state dead;
branches;
next	1.10;

1.10
date	2010.07.19.19.46.43;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2010.02.03.20.45.44;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2001.05.29.12.41.18;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2001.05.03.14.06.19;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	98.12.05.00.06.26;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	97.09.21.11.49.53;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.04.01.07.28.02;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.11.30.21.08.48;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.36.24;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.41;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.41;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.11
log
@this Makefile does not really help anyone bring up make
ok espie
@
text
@#	$OpenBSD: Makefile.boot,v 1.10 2010/07/19 19:46:43 espie Exp $
#
# a very simple makefile...
#
# You only want to use this if you aren't running OpenBSD.
#
# modify MACHINE, MACHINE_ARCH and MACHINE_CPU as appropriate
# for your target architecture
#

.c.o:
	${CC} ${CFLAGS} -c $< -o $@@

MACHINE=sun
MACHINE_ARCH=sparc
MACHINE_CPU=sparc
CFLAGS= -Iohash -I. -DTARGET_MACHINE=\"${MACHINE}\" -DTARGET_MACHINE_ARCH=\"${MACHINE_ARCH}\" -DTARGET_MACHINE_CPU=\"${MACHINE_CPU}\" -DMACHINE=\"${MACHINE}\" \
	-DMAKE_BOOTSTRAP -DNEED_FGETLN
LIBS= ohash/libohash.a

OBJ=arch.o buf.o compat.o cond.o dir.o for.o job.o main.o make.o \
    parse.o str.o suff.o targ.o var.o util.o error.o lowparse.o \
    varmodifiers.o memory.o cmd_exec.o timestamp.o parsevar.o \
    varname.o init.o

LIBOBJ=	lst.lib/lstAddNew.o lst.lib/lstAppend.o \
	lst.lib/lstConcat.o lst.lib/lstConcatDestroy.o lst.lib/lstDeQueue.o \
	lst.lib/lstDestroy.o lst.lib/lstDupl.o lst.lib/lstFindFrom.o \
	lst.lib/lstForEachFrom.o lst.lib/lstInit.o lst.lib/lstInsert.o \
	lst.lib/lstMember.o lst.lib/lstRemove.o lst.lib/lstReplace.o \
	lst.lib/lstSucc.o

bmake: varhashconsts.h ${OBJ} ${LIBOBJ}
#	@@echo 'make of make and make.0 started.'
	${CC} ${CFLAGS} ${OBJ} ${LIBOBJ} -o bmake ${LIBS}
	@@ls -l $@@
#	nroff -h -man make.1 > make.0
#	@@echo 'make of make and make.0 completed.'

GENOBJ= generate.o stats.o memory.o ohash/libohash.a

OHASHOBJ= ohash/ohash_create_entry.o ohash/ohash_delete.o ohash/ohash_do.o \
	ohash/ohash_entries.o ohash/ohash_enum.o ohash/ohash_init.o \
	ohash/ohash_interval.o ohash/ohash_lookup_interval.o \
	ohash/ohash_lookup_memory.o ohash/ohash_qlookup.o \
	ohash/ohash_qlookupi.o

ohash/libohash.a: ${OHASHOBJ}
	ar cq ohash/libohash.a ${OHASHOBJ}
	ranlib ohash/libohash.a

generate: ${GENOBJ}
	${CC} ${CFLAGS} ${GENOBJ} -o generate ${LIBS}

varhashconsts.h: generate
	./generate 1 77 > varhashconsts.h

clean:
	rm -f ${OBJ} ${LIBOBJ} ${PORTOBJ} ${GENOBJ} ${OHASHOBJ} bmake
	rm -f varhashconsts.h generate

@


1.10
log
@Correct $OpenBSD$ stuff
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.boot,v 1.9 2010/02/03 20:45:44 miod Exp $
@


1.9
log
@Add a new default variable in Makefile context, MACHINE_CPU. Its value is
decided at compile-time and is either MACHINE_CPU from <machine/param.h> if
it is defined, or the same value as MACHINE_ARCH otherwise.
This will be used to allow ports with suffixes to their canonical MACHINE_ARCH
to provide this canonical name as MACHINE_CPU, and in turn to let Makefiles
do TRT.
ok kettenis@@
@
text
@d1 1
a1 2
#	$OpenPackages: Makefile.boot,v 1.5 2001/04/06 00:09:55 will Exp $
#	$OpenBSD: Makefile.boot,v 1.8 2001/05/29 12:41:18 espie Exp $
@


1.8
log
@Synch
@
text
@d2 1
a2 1
#	$OpenBSD: Makefile.boot,v 1.7 2001/05/03 14:06:19 espie Exp $
d8 2
a9 1
# modify MACHINE and MACHINE_ARCH as appropriate for your target architecture
d17 2
a18 1
CFLAGS= -Iohash -I. -DTARGET_MACHINE=\"${MACHINE}\" -DTARGET_MACHINE_ARCH=\"${MACHINE_ARCH}\" -DMACHINE=\"${MACHINE}\" \
@


1.7
log
@Bump bootstrap stuff from op-make. Mostly from fries@@
@
text
@d2 1
a2 1
#	$OpenBSD: Makefile.boot,v 1.6 1998/12/05 00:06:26 espie Exp $
d22 2
a23 1
    varmodifiers.o
d39 1
a39 1
GENOBJ= generate.o stats.o error.o ohash/libohash.a
@


1.6
log
@Modifications from netbsd:
- don't interfere with MACHINE/MACHINE_ARCH defines for bootstrap
- type clean-up, time_t, and printing `unknown' ints
- fix TARGET/MEMBER bug in archive rules
- memmove...
- cleaner Error handler.
- reentrant brk_string
- .MAKE env variable
- preliminary scaffolding for .NOPATH

Other improvements:
- efree
- shellneed streamlined
- display Stop in .CURDIR after an error.
- document most features and misfeatures.
- add a few OpenBSD notes to the tutorial.
@
text
@d1 2
a2 1
#	$OpenBSD: Makefile.boot,v 1.4 1997/04/01 07:28:02 millert Exp $
d16 14
a29 16
CFLAGS= -I. -DTARGET_MACHINE=\"${MACHINE}\" -DTARGET_MACHINE_ARCH=\"${MACHINE_ARCH}\" \
	-DMAKE_BOOTSTRAP
LIBS=

OBJ=arch.o buf.o compat.o cond.o dir.o for.o hash.o job.o main.o make.o \
    parse.o str.o suff.o targ.o var.o util.o

LIBOBJ= lst.lib/lstAppend.o lst.lib/lstAtEnd.o lst.lib/lstAtFront.o \
	lst.lib/lstClose.o lst.lib/lstConcat.o lst.lib/lstDatum.o \
	lst.lib/lstDeQueue.o lst.lib/lstDestroy.o lst.lib/lstDupl.o \
	lst.lib/lstEnQueue.o lst.lib/lstFind.o lst.lib/lstFindFrom.o \
	lst.lib/lstFirst.o lst.lib/lstForEach.o lst.lib/lstForEachFrom.o \
	lst.lib/lstInit.o lst.lib/lstInsert.o lst.lib/lstIsAtEnd.o \
	lst.lib/lstIsEmpty.o lst.lib/lstLast.o lst.lib/lstMember.o \
	lst.lib/lstNext.o lst.lib/lstOpen.o lst.lib/lstRemove.o \
	lst.lib/lstReplace.o lst.lib/lstSucc.o
d31 1
a31 1
bmake: ${OBJ} ${LIBOBJ}
d38 18
d57 3
a59 1
	rm -f ${OBJ} ${LIBOBJ} ${PORTOBJ} bmake
@


1.5
log
@$OpenBSD$
@
text
@d15 1
a15 1
CFLAGS= -I. -DMACHINE=\"${MACHINE}\" -DMACHINE_ARCH=\"${MACHINE_ARCH}\" \
@


1.4
log
@Sync with NetBSD (mostly by christos initial substitution/regexp from Der Mouse)

- fix the variable substitution code in make [PR/2748]
      1. change s/a/b/ so that it substitutes the first occurance of the
         pattern on each word, not only the first word.
      2. add flag '1' to the variable substitution so that the substitutions
         get performed only once.

  ***THIS IS AN INCOMPATIBLE CHANGE!***

  Unfortunately there was no way to make things consistent without
  modifying the current behavior. Fortunately none of our Makefiles
  depended on this.

            OLD:

                VAR      = aa1 aa2 aa3 aa4

                S/a/b/   = ba1 aa2 aa3 aa4
                S/a/b/g  = bb1 bb2 bb3 bb4

            NEW:
                VAR      = aa1 aa2 aa3 aa4

                S/a/b/   = ba1 ba2 ba3 ba4
                S/a/b/1  = ba1 aa2 aa3 aa4
                S/a/b/g  = bb1 bb2 bb3 bb4
                S/a/b/1g = bb1 aa2 aa3 aa4
- add regexp variable substitution via 'C/foo/bar/' [PR/2752]
- add variable quoting via the ${VAR:Q} modifier. This is useful when running
  recursive invocations of make(1):

        make VAR=${VAR:Q}

  will always work... (This may prove useful in the kernel builds...) [PR/2981]
- BSD did not traditionally have <sys/cdefs.h>; use BSD4_4 instead and include
  <sys/param.h> to grab it.
- Don't compile the regex code if MAKE_BOOTSTRAP (from gwr)
- Use explicit .c.o rule in Makefile.boot so that the bootstrap process works.
- Use only integral types in procedure arguments. [buf.c buf.h]
- Include <stdlib.h> to get getenv() prototype on SVR4
- if __STDC__ -> ifdef __STDC__ to appease SVR4
- Define const and volatile for non __STDC__
- Implement snprintf() and vsnprintf() for non BSD4_4 systems.
- Make $MACHINE_ARCH settable from the environment.
- Fix .USE directive problems: (reported by cgd)
    1. ${.*} variables did not get expanded in dependencies.
    2. expanded ${.*} variables in .USE dependencies can cause tree
       restructuring; handle it.
    3. in compat mode, expand .USE before evaluating the list of targets,
       instead of doing .USE expansions on demand, because they can cause
       tree restructuring.
- Add a .MADE directive to indicated that the children of a target are
  up-to-date, even when they are not. This is to simulate our current
  make install behavior with proper dependencies.
- Fix problems in the RE substitution error handling.
- Locate all the children of a node marked as MADE.
- Do not compile-in ${MACHINE} (as per NetBSD PR#3386)
- Disable globbing for targets/dependencies when POSIX is defined.
- Fix globbing so that patterns that don't have a matching number of [] or {}
  don't get expanded. (before the [ case got expanded to nothing!) This is
  disabled.
- Make sure that the children of nodes that are marked .MADE, are marked
  UPTODATE and their timestamps are consistent.
- Don't disable wildcards completely; they are used by other Makefiles.
@
text
@d1 1
a1 2
#	$OpenBSD: Makefile.boot,v 1.3 1996/11/30 21:08:48 millert Exp $
#	$NetBSD: Makefile.boot,v 1.8 1996/12/31 17:52:23 christos Exp $
@


1.3
log
@Sync with NetBSD:
- Merge in FreeBSD and Lite2 changes.
- Fix bug where a non-archive target with a .a suffix would always
  be considered to be out of date, since it does not have a TOC.
- Fix NetBSD PR #2930: declare missing variable.
@
text
@d1 2
a2 2
#	$OpenBSD: $
#	$NetBSD: Makefile.boot,v 1.7 1996/08/30 17:59:37 thorpej Exp $
d10 4
@


1.2
log
@rcsid
@
text
@d1 3
a3 2
#	$OpenBSD: Makefile.boot,v 1.5 1995/06/14 15:18:43 christos Exp $
#	$NetBSD: Makefile.boot,v 1.5 1995/06/14 15:18:43 christos Exp $
d6 1
a6 1
# You only want to use this if you aren't running NetBSD.
d10 3
a12 1
CFLAGS= -I. -DMACHINE=\"sparc\" -DMACHINE_ARCH=\"sparc\" \
d14 1
d19 14
a32 4
bmake: ${OBJ}
	@@echo 'make of make and make.0 started.'
	(cd lst.lib; make)
	${CC} *.o lst.lib/*.o -o bmake
d35 3
@


1.1
log
@Initial revision
@
text
@d1 1
a3 1
#	$Id: Makefile.boot,v 1.5 1995/06/14 15:18:43 christos Exp $
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
