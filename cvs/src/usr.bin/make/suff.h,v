head	1.10;
access;
symbols
	OPENBSD_6_1:1.10.0.20
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.16
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.12
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.14
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.6
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.10
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.8
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.4
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.2
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.6.0.10
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.8
	OPENBSD_5_0:1.6.0.6
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.4
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.2
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.4.0.8
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.10
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.6
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.4
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.2
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.2.0.14
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.12
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.10
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.8
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.6
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.4
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.1.0.12
	OPENBSD_3_5_BASE:1.1
	OPENBSD_3_4:1.1.0.10
	OPENBSD_3_4_BASE:1.1
	OPENBSD_3_3:1.1.0.8
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.6
	OPENBSD_3_2_BASE:1.1
	OPENBSD_3_1:1.1.0.4
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.2
	OPENBSD_3_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.10
date	2012.12.06.14.30.35;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2012.12.06.10.33.16;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2012.10.09.19.45.34;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2012.10.02.10.29.31;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2010.07.19.19.46.44;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2010.07.19.19.30.37;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2007.11.24.15.41.01;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2007.09.17.12.42.09;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2004.05.05.09.10.48;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.23.12.34.50;	author espie;	state Exp;
branches;
next	;


desc
@@


1.10
log
@... and zap redundant declaration.
@
text
@#ifndef SUFF_H
#define SUFF_H
/*	$OpenBSD: suff.h,v 1.9 2012/12/06 10:33:16 espie Exp $ */

/*
 * Copyright (c) 2001 Marc Espie.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE OPENBSD PROJECT AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENBSD
 * PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

extern void Suff_ClearSuffixes(void);
extern GNode *Suff_ParseAsTransform(const char *, const char *);
extern void Suff_AddSuffixi(const char *, const char *);
extern void Suff_FindDeps(GNode *);
extern void Suff_Init(void);
extern void process_suffixes_after_makefile_is_read(void);
extern Lst find_suffix_path(GNode *);
extern void Suff_PrintAll(void);
extern void expand_children_from(GNode *, LstNode);
#define expand_all_children(gn)	\
    expand_children_from(gn, Lst_First(&(gn)->children))

#endif
@


1.9
log
@old code is gone, remove comments and prototypes
@
text
@d3 1
a3 1
/*	$OpenBSD: suff.h,v 1.8 2012/10/09 19:45:34 espie Exp $ */
a31 1
struct Suff_;
@


1.8
log
@- SPECIAL_DEPRECATED -> SPECIAL_NOTHING
- nodes for .POSIX and .SCCS_GET (which don't do anything)
- zap remaining suffix crud.

new scaffolding:
- groupling list and HELDBACK state to avoid races in engine.
- parser recognizes lists of targets that shoul be grouped together
- OP_DOUBLE to mark nodes that have multiple lists of commands
@
text
@d3 1
a3 1
/*	$OpenBSD: suff.h,v 1.7 2012/10/02 10:29:31 espie Exp $ */
a34 1
extern void Suff_SetNulli(const char *, const char *);
@


1.7
log
@more changes, discussed and tested by various people.
- put back some job control, turns out it's necessary when we don't run a
shell.
- zap old #ifdef CLEANUP code... probably doesn't even compile.
- kill most of the OP_LIB code. Just keep a wee little bit for compatibility
(deprecated .LIBS and .INCLUDES, warns for weird dependencies instead of
erroring out).
- much improved debugging and -p output: sort variables, targets, rules,
output stuff in a nicer format mimicing input.
- better error message when no command is found, explain where the target comes from.
- sort final error list by file.
- show system files in errors as <bsd.prog.mk>
- reincorporate random delay, that was dropped
- optimize siginfo output by not regenerating the whole string each time.
- finish zapping old LocationInfo field that's no longer used.
@
text
@d3 1
a3 1
/*	$OpenBSD: suff.h,v 1.6 2010/07/19 19:46:44 espie Exp $ */
a33 2
extern void Suff_AddIncludei(const char *, const char *);
extern void Suff_AddLibi(const char *, const char *);
@


1.6
log
@Correct $OpenBSD$ stuff
@
text
@d3 1
a3 1
/*	$OpenBSD: suff.h,v 1.5 2010/07/19 19:30:37 espie Exp $ */
a40 5
#ifdef CLEANUP
extern void Suff_End(void);
#else
#define Suff_End()
#endif
@


1.5
log
@two small changes:
- allow variables in SysV modifiers, as requested by matthieu@@
(since recursive variables are an extension, this just extends the
extension)
- variation on :Q  called :QL (quote list), which does quote every character
EXCEPT for whitespace. e.g.,

toto:
	@@for i in ${VAR:QL} ...
@
text
@d3 1
a3 2
/*	$OpenPackages$ */
/*	$OpenBSD$ */
@


1.4
log
@more parallel make fixes.

Preparations to fix the engine:
- new function has_been_built(gn), that tells you what's the status of
a given node. Allows us to run Suff_FindDeps later, by updating the number
of unmade children correctly.
- take out the code that handles shell expansions in an expand_children*
set of functions, called by Suff_FindDeps, among others. These must be
called early in the engine to avoid creating bogus nodes.

Engine fixes:
- take the predecessor/successor special handling out, deal with it in
separate functions.
- don't count nodes. Explicitly track them all in a hash table (better
way to deal with non-built issues).
- don't run Suff_FindDeps at start, but just before building an actual node.
This allows make to find all dependencies correctly, as in groff.

Pfiou! now it works.
@
text
@@


1.3
log
@rewrite of the basic suffix/target parsing: use hash for suffixes.

Store special targets in target hash, and use them for the parsing.

Use OP_DUMMY flag to mark targets that don't really exist yet, such
as interrupt and default nodes.

Also, .PATHxxx is special in suffixes.

Small tweaks to compat.c, so that run_commands does more stuff after
the fork() (and thus no need to free things).

Remove distinction between local and global jobs.
@
text
@d4 1
a4 1
/*	$OpenBSD: suff.h,v 1.2 2004/05/05 09:10:48 espie Exp $ */
d48 3
@


1.2
log
@constify char *.
Add lookup functions for suffixes and transforms, and stat them.
okay otto@@
@
text
@d4 1
a4 1
/*	$OpenBSD: suff.h,v 1.1 2001/05/23 12:34:50 espie Exp $ */
d32 5
a36 8
extern bool Suff_IsTransform(const char *);
extern GNode *Suff_AddTransform(const char *);
extern void Suff_EndTransform(void *);
extern void Suff_AddSuffix(const char *);
extern Lst Suff_GetPath(const char *);
extern void Suff_DoPaths(void);
extern void Suff_AddInclude(const char *);
extern void Suff_AddLib(const char *);
d38 1
a38 1
extern void Suff_SetNull(const char *);
d40 2
@


1.1
log
@Mostly clean-up:
- cut up those huge include files into separate interfaces for all modules.
Put the interface documentation there, and not with the implementation.
- light-weight includes for needed concrete types (lst_t.h, timestamp_t.h).
- cut out some more logically separate parts: cmd_exec, varname, parsevar,
timestamp.
- put all error handling functions together, so that we will be able to
clean them up.
- more systematic naming: functioni  to handle interval, function to handle
string.
- put the init/end code apart to minimize coupling.
- kill weird types like ReturnStatus and Boolean. Use standard bool (with a
fallback for non-iso systems)
- better interface documentation for lots of subsystems.

As a result, make compilation goes somewhat faster (5%, even considering
the largish BSD copyrights to read). The corresponding preprocessed
source goes down from 1,5M to 1M.

A few minor code changes as well: Parse_DoVar is no longer destructive.
Parse_IsVar functionality is folded into Parse_DoVar (as it knows what an
assignment is), a few more interval handling functions. Avoid calling
XXX_End when they do nothing, just #define XXX_End   to nothing.

Parse_DoVar is slightly more general: it will handle compound assignments
as long as they make sense, e.g., VAR +!= cmd
will work.  As a side effect, VAR++=value now triggers an error
(two + in assignment).
- this stuff doesn't occur in portable Makefiles.
- writing VAR++ = value or VAR+ +=value  disambiguates it.
- this is a good thing, it uncovered a bug in bsd.port.mk.

Tested by naddy@@. Okayed millert@@. I'll handle the fallback if there is
any. This went through a full make build anyways, including isakmpd
(without mickey's custom binutils, as he didn't see fit to share it with me).
@
text
@d4 1
a4 1
/*	$OpenBSD$ */
d35 2
a36 2
extern void Suff_AddSuffix(char *);
extern Lst Suff_GetPath(char *);
d38 2
a39 2
extern void Suff_AddInclude(char *);
extern void Suff_AddLib(char *);
d41 1
a41 1
extern void Suff_SetNull(char *);
@

