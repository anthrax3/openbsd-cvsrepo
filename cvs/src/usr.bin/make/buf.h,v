head	1.22;
access;
symbols
	OPENBSD_6_1:1.22.0.20
	OPENBSD_6_1_BASE:1.22
	OPENBSD_6_0:1.22.0.16
	OPENBSD_6_0_BASE:1.22
	OPENBSD_5_9:1.22.0.12
	OPENBSD_5_9_BASE:1.22
	OPENBSD_5_8:1.22.0.14
	OPENBSD_5_8_BASE:1.22
	OPENBSD_5_7:1.22.0.6
	OPENBSD_5_7_BASE:1.22
	OPENBSD_5_6:1.22.0.10
	OPENBSD_5_6_BASE:1.22
	OPENBSD_5_5:1.22.0.8
	OPENBSD_5_5_BASE:1.22
	OPENBSD_5_4:1.22.0.4
	OPENBSD_5_4_BASE:1.22
	OPENBSD_5_3:1.22.0.2
	OPENBSD_5_3_BASE:1.22
	OPENBSD_5_2:1.19.0.10
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.19
	OPENBSD_5_1:1.19.0.8
	OPENBSD_5_0:1.19.0.6
	OPENBSD_5_0_BASE:1.19
	OPENBSD_4_9:1.19.0.4
	OPENBSD_4_9_BASE:1.19
	OPENBSD_4_8:1.19.0.2
	OPENBSD_4_8_BASE:1.19
	OPENBSD_4_7:1.17.0.8
	OPENBSD_4_7_BASE:1.17
	OPENBSD_4_6:1.17.0.10
	OPENBSD_4_6_BASE:1.17
	OPENBSD_4_5:1.17.0.6
	OPENBSD_4_5_BASE:1.17
	OPENBSD_4_4:1.17.0.4
	OPENBSD_4_4_BASE:1.17
	OPENBSD_4_3:1.17.0.2
	OPENBSD_4_3_BASE:1.17
	OPENBSD_4_2:1.16.0.18
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.16.0.16
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.16.0.14
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.16.0.12
	OPENBSD_3_9_BASE:1.16
	OPENBSD_3_8:1.16.0.10
	OPENBSD_3_8_BASE:1.16
	OPENBSD_3_7:1.16.0.8
	OPENBSD_3_7_BASE:1.16
	OPENBSD_3_6:1.16.0.6
	OPENBSD_3_6_BASE:1.16
	OPENBSD_3_5:1.16.0.4
	OPENBSD_3_5_BASE:1.16
	OPENBSD_3_4:1.16.0.2
	OPENBSD_3_4_BASE:1.16
	OPENBSD_3_3:1.15.0.8
	OPENBSD_3_3_BASE:1.15
	OPENBSD_3_2:1.15.0.6
	OPENBSD_3_2_BASE:1.15
	OPENBSD_3_1:1.15.0.4
	OPENBSD_3_1_BASE:1.15
	OPENBSD_3_0:1.15.0.2
	OPENBSD_3_0_BASE:1.15
	OPENBSD_2_9_BASE:1.13
	OPENBSD_2_9:1.13.0.2
	OPENBSD_2_8:1.12.0.2
	OPENBSD_2_8_BASE:1.12
	OPENBSD_2_7:1.11.0.2
	OPENBSD_2_7_BASE:1.11
	OPENBSD_2_6:1.5.0.4
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.2
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.4.0.8
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.6
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.22
date	2012.11.07.14.18.41;	author espie;	state Exp;
branches;
next	1.21;

1.21
date	2012.10.02.10.29.30;	author espie;	state Exp;
branches;
next	1.20;

1.20
date	2012.09.21.07.55.20;	author espie;	state Exp;
branches;
next	1.19;

1.19
date	2010.07.19.19.46.43;	author espie;	state Exp;
branches;
next	1.18;

1.18
date	2010.07.19.19.30.37;	author espie;	state Exp;
branches;
next	1.17;

1.17
date	2007.09.17.09.28.36;	author espie;	state Exp;
branches;
next	1.16;

1.16
date	2003.06.03.02.56.11;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2001.05.23.12.34.40;	author espie;	state Exp;
branches;
next	1.14;

1.14
date	2001.05.03.13.41.01;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	2000.11.24.14.27.19;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2000.09.14.13.32.06;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	99.12.16.17.02.45;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	99.12.16.16.46.38;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	99.12.16.16.41.41;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	99.12.16.16.27.12;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	99.12.09.18.18.24;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	99.12.06.22.24.31;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	98.12.05.00.06.27;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	97.04.01.07.28.07;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.11.30.21.08.51;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.36.26;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.41;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.41;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.22
log
@say goodbye to killing trailing spaces.
this was yet another weirdness in our make that isn't shared by
other makes, and that isn't part of any standard.
This means end-of-line spaces in variables ARE significant (spaces
around the equal sign still aren't).

okay sthen@@, "sounds fine" deraadt@@
@
text
@#ifndef _BUF_H
#define _BUF_H

/*	$OpenBSD: buf.h,v 1.21 2012/10/02 10:29:30 espie Exp $	*/
/*	$NetBSD: buf.h,v 1.7 1996/12/31 17:53:22 christos Exp $ */

/*
 * Copyright (c) 1999 Marc Espie.
 *
 * Extensive code changes for the OpenBSD project.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE OPENBSD PROJECT AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENBSD
 * PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Copyright (c) 1988, 1989, 1990 The Regents of the University of California.
 * Copyright (c) 1988, 1989 by Adam de Boor
 * Copyright (c) 1989 by Berkeley Softworks
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Adam de Boor.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	from: @@(#)buf.h 8.1 (Berkeley) 6/6/93
 */

/*
 * buf
 *	Support for extensible char buffers.
 *	One adds chars to a buffer, then retrieves the contents using
 *	Buf_Retrieve (no copy involved), or releases the memory using
 *	Buf_Destroy.
 */


/* Internal data structures and functions. BUFFER is visible so
 * that users can allocate the memory themselves.  */
typedef struct Buffer_ {
    char    *buffer;	/* The buffer itself. */
    char    *inPtr;	/* Place to write to. */
    char    *endPtr;	/* End of allocated space. */
} BUFFER;

/* Internal support for Buf_AddChar.  */
extern void BufOverflow(Buffer);


/* User interface */

/* Buf_AddChars(buf, n, str);
 *	Adds n chars to buffer buf starting from str. */
extern void Buf_AddChars(Buffer, size_t, const char *);
/* Buf_Truncate(buffer, length) */
#define Buf_Truncate(bp, len)	((void)((bp)->inPtr = (bp)->buffer + (len)))
/* Buf_Reset(buf);
 *	Empties buffer.  */
#define Buf_Reset(bp)	Buf_Truncate(bp, 0)
/* n = Buf_Size(buf);
 *	Returns number of chars currently in buf.
 *	Doesn't include the null-terminating char.  */
#define Buf_Size(bp)	((size_t)((bp)->inPtr - (bp)->buffer))
/* Buf_Init(buf, init);
 *	Initializes a buffer, to hold approximately init chars.
 *	Set init to 0 if you have no idea.  */
extern void Buf_Init(Buffer, size_t);
/* Buf_Destroy(buf);
 * 	Nukes a buffer and all its resources.	*/
#define Buf_Destroy(bp) ((void)free((bp)->buffer))
/* str = Buf_Retrieve(buf);
 *	Retrieves data from a buffer, as a NULL terminated string.  */
#define Buf_Retrieve(bp)	(*(bp)->inPtr = '\0', (bp)->buffer)
/* Buf_AddChar(buf, c);
 *	Adds a single char to buffer.	*/
#define Buf_AddChar(bp, byte)			\
do {						\
	if ((bp)->endPtr - (bp)->inPtr <= 1)	\
	    BufOverflow(bp);			\
	*(bp)->inPtr++ = (byte);		\
} while (0)

/* Buf_AddSpace(buf);
 *	Adds a space to buffer.  */
#define Buf_AddSpace(b) 		Buf_AddChar((b), ' ')
/* Buf_AddString(buf, str);
 *	Adds the contents of a NULL terminated string to buffer.  */
#define Buf_AddString(b, s)		Buf_AddChars((b), strlen(s), (s))
/* Buf_Addi(buf, s, e);
 *	Adds characters between s and e to buffer.  */
#define Buf_Addi(b, s, e)	Buf_AddChars((b), (e) - (s), (s))

extern void Buf_printf(Buffer, const char *, ...);
#define Buf_puts(b, s)	Buf_AddChars((b), strlen(s), (s))

#endif /* _BUF_H */
@


1.21
log
@more changes, discussed and tested by various people.
- put back some job control, turns out it's necessary when we don't run a
shell.
- zap old #ifdef CLEANUP code... probably doesn't even compile.
- kill most of the OP_LIB code. Just keep a wee little bit for compatibility
(deprecated .LIBS and .INCLUDES, warns for weird dependencies instead of
erroring out).
- much improved debugging and -p output: sort variables, targets, rules,
output stuff in a nicer format mimicing input.
- better error message when no command is found, explain where the target comes from.
- sort final error list by file.
- show system files in errors as <bsd.prog.mk>
- reincorporate random delay, that was dropped
- optimize siginfo output by not regenerating the whole string each time.
- finish zapping old LocationInfo field that's no longer used.
@
text
@d4 1
a4 1
/*	$OpenBSD: buf.h,v 1.20 2012/09/21 07:55:20 espie Exp $	*/
a132 4

/* Buf_KillTrailingSpaces(buf);
 *	Removes non-backslashed spaces at the end of a buffer. */
extern void Buf_KillTrailingSpaces(Buffer);
@


1.20
log
@major overhaul of the way make handle jobs, inspired by dpb:
instead of forking a "job" per target, and having that job further fork
separate commands, have make maintain a list of jobs, indexed by pid
of currently running commands, and handle process termination
continuation-style.  This has lots of benefits:
- make is responsible for most printing, so we no longer need pipes nor
job control: make -j jobs see the tty.
- no more special-casing for jobs that don't really execute anything.
- unify code for make -jn and make -B, including signal handlers and
job waiting.  So make -n, make -q, +cmd now run commands in the same
way in all cases.
- unified more accurate error-reporting, as make knows precisely which
command failed. Commands are tagged with their lines, and we display failing
commands in silent mode.
- fine-grained "expensive" command handling (recursion limiter). Do it
per-command instead of per-target.

Moreover, signal response is now simpler, as we just block the signals
in a small critical sections, test for events, and sigpause (thanks a lot
to guenther@@ and millert@@), so running make is now almost always paused
without any busy-waiting.

Thanks to everyone who tested and gave input.
@
text
@d4 1
a4 1
/*	$OpenBSD: buf.h,v 1.19 2010/07/19 19:46:43 espie Exp $	*/
d96 2
d100 1
a100 1
#define Buf_Reset(bp)	((void)((bp)->inPtr = (bp)->buffer))
@


1.19
log
@Correct $OpenBSD$ stuff
@
text
@d4 1
a4 1
/*	$OpenBSD: buf.h,v 1.18 2010/07/19 19:30:37 espie Exp $	*/
d135 3
@


1.18
log
@two small changes:
- allow variables in SysV modifiers, as requested by matthieu@@
(since recursive variables are an extension, this just extends the
extension)
- variation on :Q  called :QL (quote list), which does quote every character
EXCEPT for whitespace. e.g.,

toto:
	@@for i in ${VAR:QL} ...
@
text
@d4 1
a4 2
/*	$OpenPackages$ */
/*	$OpenBSD$	*/
@


1.17
log
@kill extra spaces at end of line
@
text
@d5 1
a5 1
/*	$OpenBSD: buf.h,v 1.16 2003/06/03 02:56:11 millert Exp $	*/
@


1.16
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d5 1
a5 1
/*	$OpenBSD: buf.h,v 1.15 2001/05/23 12:34:40 espie Exp $	*/
d105 1
a105 1
 *	Initializes a buffer, to hold approximately init chars. 
d114 1
a114 1
/* Buf_AddChar(buf, c); 
@


1.15
log
@Mostly clean-up:
- cut up those huge include files into separate interfaces for all modules.
Put the interface documentation there, and not with the implementation.
- light-weight includes for needed concrete types (lst_t.h, timestamp_t.h).
- cut out some more logically separate parts: cmd_exec, varname, parsevar,
timestamp.
- put all error handling functions together, so that we will be able to
clean them up.
- more systematic naming: functioni  to handle interval, function to handle
string.
- put the init/end code apart to minimize coupling.
- kill weird types like ReturnStatus and Boolean. Use standard bool (with a
fallback for non-iso systems)
- better interface documentation for lots of subsystems.

As a result, make compilation goes somewhat faster (5%, even considering
the largish BSD copyrights to read). The corresponding preprocessed
source goes down from 1,5M to 1M.

A few minor code changes as well: Parse_DoVar is no longer destructive.
Parse_IsVar functionality is folded into Parse_DoVar (as it knows what an
assignment is), a few more interval handling functions. Avoid calling
XXX_End when they do nothing, just #define XXX_End   to nothing.

Parse_DoVar is slightly more general: it will handle compound assignments
as long as they make sense, e.g., VAR +!= cmd
will work.  As a side effect, VAR++=value now triggers an error
(two + in assignment).
- this stuff doesn't occur in portable Makefiles.
- writing VAR++ = value or VAR+ +=value  disambiguates it.
- this is a good thing, it uncovered a bug in bsd.port.mk.

Tested by naddy@@. Okayed millert@@. I'll handle the fallback if there is
any. This went through a full make build anyways, including isakmpd
(without mickey's custom binutils, as he didn't see fit to share it with me).
@
text
@d5 1
a5 1
/*	$OpenBSD: buf.h,v 1.5 1998/12/05 00:06:27 espie Exp $	*/
d52 1
a52 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.14
log
@Synch with my current work.
Numerous changes:
- generate can build several tables
- style cleanup
- statistics code
- use variable names throughout (struct Name)
- recursive variables everywhere
- faster parser (pass buffer along instead of allocating multiple copies)
- correct parser. Handles comments everywhere, and ; correctly
- more string intervals
- simplified dir.c, less recursion.
- extended for loops
- sinclude()
- finished removing extra junk from Lst_*
- handles ${@@D} and friends in a simpler way
- cleaned up and modular VarModifiers handling.
- recognizes some gnu Makefile usages and errors out about them.

Additionally, some extra functionality is defined by FEATURES. The set of
functionalities is currently hardcoded to OpenBSD defaults, but this may
include support for some NetBSD extensions, like ODE modifiers.

Backed by miod@@ and millert@@, who finally got sick of my endless patches...
@
text
@d1 3
d75 6
a80 3
/*-
 * buf.h --
 *	Header for users of the buf library.
a82 4
#ifndef _BUF_H
#define _BUF_H

#include    "sprite.h"
a91 2
typedef struct Buffer_ *Buffer;

d95 1
d98 2
a99 1
/* Buf_AddChars -- Add a number of chars to the buffer.  */
d101 2
a102 1
/* Buf_Reset -- Remove all chars from a buffer.  */
d104 2
a105 1
/* Buf_Size -- Return the number of chars in the given buffer.
d108 3
a110 2
/* Buf_Init -- Initialize a buffer. If no initial size is given,
 *	a reasonable default is used.  */
d112 2
a113 1
/* Buf_Destroy -- Nuke a buffer and all its resources.	*/
d115 2
a116 1
/* Buf_Retrieve -- Retrieve data from a buffer, as a NULL terminated string.  */
d118 2
a119 1
/* Buf_AddChar -- Add a single char to buffer.	*/
d127 2
a128 1
/* Buf_AddSpace -- Add a space to buffer.  */
d130 2
a131 1
/* Buf_AddString -- Add the contents of a NULL terminated string to buffer.  */
d133 3
a135 2
/* Buf_AddInterval -- Add characters between pointers s and e to buffer.  */
#define Buf_AddInterval(b, s, e)	Buf_AddChars((b), (e) - (s), (s))
d137 2
@


1.13
log
@Clean-ups:
* Buf_Destroy can be a macro
* X_ instead of _X for struct names, to avoid infringing on the system's
namespace.
* better wildcard detection heuristics
* fix #ifdef CLEANUP code
* a few comments
@
text
@d1 30
a30 2
/*	$OpenBSD: buf.h,v 1.12 2000/09/14 13:32:06 espie Exp $	*/
/*	$NetBSD: buf.h,v 1.7 1996/12/31 17:53:22 christos Exp $	*/
d69 1
a69 1
 *	from: @@(#)buf.h	8.1 (Berkeley) 6/6/93
d93 1
a93 1
extern void BufOverflow __P((Buffer));
d98 1
a98 1
extern void Buf_AddChars __P((Buffer, size_t, const char *));
d101 1
a101 1
/* Buf_Size -- Return the number of chars in the given buffer. 
d104 1
a104 1
/* Buf_Init -- Initialize a buffer. If no initial size is given (0), 
d106 3
a108 3
extern void Buf_Init __P((Buffer, size_t));
/* Buf_Destroy -- Nuke a buffer and all its resources.  */
#define Buf_Destroy(bp)	(free((bp)->buffer))
d111 3
a113 3
/* Buf_AddChar -- Add a single char to buffer. */
#define	Buf_AddChar(bp, byte) 			\
do {			      			\
d117 1
a117 1
} while (0)					
d120 1
a120 1
#define Buf_AddSpace(b)			Buf_AddChar((b), ' ')
d124 1
a124 1
#define Buf_AddInterval(b, s, e) 	Buf_AddChars((b), (e) - (s), (s))
d126 1
a126 2
/* Buf_ReplaceLastChar -- Replace the last char in a buffer.  */
extern void Buf_ReplaceLastChar __P((Buffer, char));
@


1.12
log
@Some systematic clean-up.
- UNUSED macro that expands to __attribute__((unused)) for gcc
- move rcsid around so that they can be tagged UNUSED.
- activate -Wunused.
- use UNUSED instead of kludgy junk for function arguments.
- add extern to all extern prototypes.
- update comments in lst.h.
- clean up var.c a little bit, constifying arguments, updating comments...
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.h,v 1.11 1999/12/16 17:02:45 espie Exp $	*/
d54 2
d62 1
a62 1
typedef BUFFER *Buffer;
d69 14
a90 6
#define BUF_ERROR 256

/* Buf_AddChars -- Add a number of chars to the buffer.  */
extern void Buf_AddChars __P((Buffer, size_t, const char *));
/* Buf_Reset -- Remove all chars from a buffer.  */
#define Buf_Reset(bp)	((void)((bp)->inPtr = (bp)->buffer))
a97 12
/* Buf_Retrieve -- Retrieve data from a buffer, as a NULL terminated string.  */
#define Buf_Retrieve(bp)	(*(bp)->inPtr = '\0', (bp)->buffer)

/* Buf_Size -- Return the number of chars in the given buffer. 
 *	Doesn't include the null-terminating char.  */
#define Buf_Size(bp)	((size_t)((bp)->inPtr - (bp)->buffer))

/* Buf_Init -- Initialize a buffer. If no initial size is given, 
 *	a reasonable default is used.  */
extern void Buf_Init __P((Buffer, size_t));
/* Buf_Destroy -- Nuke a buffer and all its resources.  */
extern void Buf_Destroy __P((Buffer));
@


1.11
log
@Allocate buffers as static data structures.
This cuts down quite a lot of malloc, since in actual use,
buffer usage is mostly static.
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.h,v 1.10 1999/12/16 16:46:38 espie Exp $	*/
d63 1
a63 1
void BufOverflow __P((Buffer));
d78 1
a78 1
void Buf_AddChars __P((Buffer, size_t, const char *));
d97 1
a97 1
void Buf_Init __P((Buffer, size_t));
d99 1
a99 1
void Buf_Destroy __P((Buffer));
d101 1
a101 1
void Buf_ReplaceLastChar __P((Buffer, char));
@


1.10
log
@Remove redundant fields from struct Buffer.
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.h,v 1.9 1999/12/16 16:41:41 espie Exp $	*/
d54 1
a54 1
typedef struct Buffer {
d58 3
a60 1
} *Buffer;
d97 3
a99 3
Buffer Buf_Init __P((size_t));
/* Buf_Destroy -- Nuke a buffer and all its resources if Boolean is TRUE. */
void Buf_Destroy __P((Buffer, Boolean));
@


1.9
log
@Split Buf_GetAll into Buf_Retrieve/Buf_Size.
(idiotic to retrieve size every time when it's used half the time)
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.h,v 1.8 1999/12/16 16:27:12 espie Exp $	*/
d55 3
a57 5
    size_t  size; 	/* Current size of the buffer */
    size_t  left;	/* Space left (== size - (inPtr - buffer)) */
    char    *buffer;	/* The buffer itself */
    char    *inPtr;	/* Place to write to */
    char    *outPtr;	/* Place to read from */
d63 3
a65 1
/* Buf_AddChar -- Add a single char to a buffer. */
d68 1
a68 1
	if (--(bp)->left == 0)			\
d77 2
d87 1
a87 1
#define Buf_Retrieve(bp)	(*(bp)->inPtr = '\0', (bp)->outPtr)
d91 1
a91 1
#define Buf_Size(bp)	((size_t)((bp)->inPtr - (bp)->outPtr))
d93 2
a94 1
void Buf_Reset __P((Buffer));
d96 1
d98 1
@


1.8
log
@Start cleaning up buf.c in earnest.

- Buf_Discard is only used to remove all the bytes in a buffer,
replace with Buf_Reset,
- buffer values are not read unless accessed first through Buf_GetAll,
no need to null-terminate it at every point.
- Buf_Expand need not check if the expansion is needed. That's Buf_AddChar
and Buf_AddChars responsability (otherwise, Buf_AddChar checks twice)
- Buf_Overflow only handles overflow. Adding the character is done in
every case anyway.
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.h,v 1.7 1999/12/09 18:18:24 espie Exp $	*/
d84 6
a90 1
char *Buf_GetAll __P((Buffer, size_t *));
a91 1
int Buf_Size __P((Buffer));
@


1.7
log
@Introduce `common usage' buf patterns and use them.
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.h,v 1.6 1999/12/06 22:24:31 espie Exp $	*/
d62 10
a71 4
/* Buf_AddChar adds a single char to a buffer. */
#define	Buf_AddChar(bp, byte) \
	(void) (--(bp)->left == 0 ? Buf_OvAddChar(bp, byte), 1 : \
		(*(bp)->inPtr++ = (byte), *(bp)->inPtr = 0), 1)
a74 2
void Buf_OvAddChar __P((Buffer, char));

d86 1
a86 1
void Buf_Discard __P((Buffer, size_t));
@


1.6
log
@Clean up buffers interface somewhat:

- buf.c deals exclusively with chars. Be explicit about it, and remove
extraneous dumb casts to char (can hide real type errors).
- buffer sizes are size_t. Note that bp->left can never become NULL.
- Buf_GetAll is happy with a NULL pointer for the size, remove unneeded
extra pointers.
- Propagate size_t to all places where buffer functions are used.
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.h,v 1.5 1998/12/05 00:06:27 espie Exp $	*/
d70 2
d73 8
@


1.5
log
@Modifications from netbsd:
- don't interfere with MACHINE/MACHINE_ARCH defines for bootstrap
- type clean-up, time_t, and printing `unknown' ints
- fix TARGET/MEMBER bug in archive rules
- memmove...
- cleaner Error handler.
- reentrant brk_string
- .MAKE env variable
- preliminary scaffolding for .NOPATH

Other improvements:
- efree
- shellneed streamlined
- display Stop in .CURDIR after an error.
- document most features and misfeatures.
- add a few OpenBSD notes to the tutorial.
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.h,v 1.3 1996/11/30 21:08:51 millert Exp $	*/
a53 2
typedef char Byte;

d55 5
a59 5
    int	    size; 	/* Current size of the buffer */
    int     left;	/* Space left (== size - (inPtr - buffer)) */
    Byte    *buffer;	/* The buffer itself */
    Byte    *inPtr;	/* Place to write to */
    Byte    *outPtr;	/* Place to read from */
d62 3
a64 3
/* Buf_AddByte adds a single byte to a buffer. */
#define	Buf_AddByte(bp, byte) \
	(void) (--(bp)->left <= 0 ? Buf_OvAddByte(bp, byte), 1 : \
d69 4
a72 8
void Buf_OvAddByte __P((Buffer, int));
void Buf_AddBytes __P((Buffer, int, const Byte *));
void Buf_UngetByte __P((Buffer, int));
void Buf_UngetBytes __P((Buffer, int, Byte *));
int Buf_GetByte __P((Buffer));
int Buf_GetBytes __P((Buffer, int, Byte *));
Byte *Buf_GetAll __P((Buffer, int *));
void Buf_Discard __P((Buffer, int));
d74 1
a74 1
Buffer Buf_Init __P((int));
d76 1
a76 1
void Buf_ReplaceLastByte __P((Buffer, int));
@


1.4
log
@Sync with NetBSD (mostly by christos initial substitution/regexp from Der Mouse)

- fix the variable substitution code in make [PR/2748]
      1. change s/a/b/ so that it substitutes the first occurance of the
         pattern on each word, not only the first word.
      2. add flag '1' to the variable substitution so that the substitutions
         get performed only once.

  ***THIS IS AN INCOMPATIBLE CHANGE!***

  Unfortunately there was no way to make things consistent without
  modifying the current behavior. Fortunately none of our Makefiles
  depended on this.

            OLD:

                VAR      = aa1 aa2 aa3 aa4

                S/a/b/   = ba1 aa2 aa3 aa4
                S/a/b/g  = bb1 bb2 bb3 bb4

            NEW:
                VAR      = aa1 aa2 aa3 aa4

                S/a/b/   = ba1 ba2 ba3 ba4
                S/a/b/1  = ba1 aa2 aa3 aa4
                S/a/b/g  = bb1 bb2 bb3 bb4
                S/a/b/1g = bb1 aa2 aa3 aa4
- add regexp variable substitution via 'C/foo/bar/' [PR/2752]
- add variable quoting via the ${VAR:Q} modifier. This is useful when running
  recursive invocations of make(1):

        make VAR=${VAR:Q}

  will always work... (This may prove useful in the kernel builds...) [PR/2981]
- BSD did not traditionally have <sys/cdefs.h>; use BSD4_4 instead and include
  <sys/param.h> to grab it.
- Don't compile the regex code if MAKE_BOOTSTRAP (from gwr)
- Use explicit .c.o rule in Makefile.boot so that the bootstrap process works.
- Use only integral types in procedure arguments. [buf.c buf.h]
- Include <stdlib.h> to get getenv() prototype on SVR4
- if __STDC__ -> ifdef __STDC__ to appease SVR4
- Define const and volatile for non __STDC__
- Implement snprintf() and vsnprintf() for non BSD4_4 systems.
- Make $MACHINE_ARCH settable from the environment.
- Fix .USE directive problems: (reported by cgd)
    1. ${.*} variables did not get expanded in dependencies.
    2. expanded ${.*} variables in .USE dependencies can cause tree
       restructuring; handle it.
    3. in compat mode, expand .USE before evaluating the list of targets,
       instead of doing .USE expansions on demand, because they can cause
       tree restructuring.
- Add a .MADE directive to indicated that the children of a target are
  up-to-date, even when they are not. This is to simulate our current
  make install behavior with proper dependencies.
- Fix problems in the RE substitution error handling.
- Locate all the children of a node marked as MADE.
- Do not compile-in ${MACHINE} (as per NetBSD PR#3386)
- Disable globbing for targets/dependencies when POSIX is defined.
- Fix globbing so that patterns that don't have a matching number of [] or {}
  don't get expanded. (before the [ case got expanded to nothing!) This is
  disabled.
- Make sure that the children of nodes that are marked .MADE, are marked
  UPTODATE and their timestamps are consistent.
- Don't disable wildcards completely; they are used by other Makefiles.
@
text
@@


1.3
log
@Sync with NetBSD:
- Merge in FreeBSD and Lite2 changes.
- Fix bug where a non-archive target with a .a suffix would always
  be considered to be out of date, since it does not have a TOC.
- Fix NetBSD PR #2930: declare missing variable.
@
text
@d1 2
a2 2
/*	$OpenBSD: buf.h,v 1.2 1996/06/26 05:36:26 deraadt Exp $	*/
/*	$NetBSD: buf.h,v 1.6 1996/11/06 17:59:00 christos Exp $	*/
d82 1
a82 1
void Buf_ReplaceLastByte __P((Buffer, Byte));
@


1.2
log
@rcsid
@
text
@d1 2
a2 2
/*	$OpenBSD: buf.h,v 1.5 1995/06/14 15:18:53 christos Exp $	*/
/*	$NetBSD: buf.h,v 1.5 1995/06/14 15:18:53 christos Exp $	*/
d41 1
a41 1
 *	from: @@(#)buf.h	5.4 (Berkeley) 12/28/90
d72 1
a72 1
void Buf_AddBytes __P((Buffer, int, Byte *));
d82 1
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
