head	1.29;
access;
symbols
	OPENBSD_6_0:1.29.0.14
	OPENBSD_6_0_BASE:1.29
	OPENBSD_5_9:1.29.0.10
	OPENBSD_5_9_BASE:1.29
	OPENBSD_5_8:1.29.0.12
	OPENBSD_5_8_BASE:1.29
	OPENBSD_5_7:1.29.0.4
	OPENBSD_5_7_BASE:1.29
	OPENBSD_5_6:1.29.0.8
	OPENBSD_5_6_BASE:1.29
	OPENBSD_5_5:1.29.0.6
	OPENBSD_5_5_BASE:1.29
	OPENBSD_5_4:1.29.0.2
	OPENBSD_5_4_BASE:1.29
	OPENBSD_5_3:1.28.0.2
	OPENBSD_5_3_BASE:1.28
	OPENBSD_5_2:1.26.0.10
	OPENBSD_5_2_BASE:1.26
	OPENBSD_5_1_BASE:1.26
	OPENBSD_5_1:1.26.0.8
	OPENBSD_5_0:1.26.0.6
	OPENBSD_5_0_BASE:1.26
	OPENBSD_4_9:1.26.0.4
	OPENBSD_4_9_BASE:1.26
	OPENBSD_4_8:1.26.0.2
	OPENBSD_4_8_BASE:1.26
	OPENBSD_4_7:1.24.0.4
	OPENBSD_4_7_BASE:1.24
	OPENBSD_4_6:1.24.0.6
	OPENBSD_4_6_BASE:1.24
	OPENBSD_4_5:1.24.0.2
	OPENBSD_4_5_BASE:1.24
	OPENBSD_4_4:1.23.0.4
	OPENBSD_4_4_BASE:1.23
	OPENBSD_4_3:1.23.0.2
	OPENBSD_4_3_BASE:1.23
	OPENBSD_4_2:1.17.0.4
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.17.0.2
	OPENBSD_4_1_BASE:1.17
	OPENBSD_4_0:1.16.0.14
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.16.0.12
	OPENBSD_3_9_BASE:1.16
	OPENBSD_3_8:1.16.0.10
	OPENBSD_3_8_BASE:1.16
	OPENBSD_3_7:1.16.0.8
	OPENBSD_3_7_BASE:1.16
	OPENBSD_3_6:1.16.0.6
	OPENBSD_3_6_BASE:1.16
	OPENBSD_3_5:1.16.0.4
	OPENBSD_3_5_BASE:1.16
	OPENBSD_3_4:1.16.0.2
	OPENBSD_3_4_BASE:1.16
	OPENBSD_3_3:1.15.0.8
	OPENBSD_3_3_BASE:1.15
	OPENBSD_3_2:1.15.0.6
	OPENBSD_3_2_BASE:1.15
	OPENBSD_3_1:1.15.0.4
	OPENBSD_3_1_BASE:1.15
	OPENBSD_3_0:1.15.0.2
	OPENBSD_3_0_BASE:1.15
	OPENBSD_2_9_BASE:1.13
	OPENBSD_2_9:1.13.0.2
	OPENBSD_2_8:1.10.0.2
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.4.0.4
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.2
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.29
date	2013.04.23.14.32.53;	author espie;	state Exp;
branches;
next	1.28;

1.28
date	2012.12.07.07.15.31;	author espie;	state Exp;
branches;
next	1.27;

1.27
date	2012.10.02.10.29.30;	author espie;	state Exp;
branches;
next	1.26;

1.26
date	2010.07.19.19.46.44;	author espie;	state Exp;
branches;
next	1.25;

1.25
date	2010.07.19.19.30.37;	author espie;	state Exp;
branches;
next	1.24;

1.24
date	2008.11.04.07.22.35;	author espie;	state Exp;
branches;
next	1.23;

1.23
date	2007.09.17.09.44.20;	author espie;	state Exp;
branches;
next	1.22;

1.22
date	2007.09.17.09.28.36;	author espie;	state Exp;
branches;
next	1.21;

1.21
date	2007.09.16.14.29.33;	author espie;	state Exp;
branches;
next	1.20;

1.20
date	2007.09.16.12.30.35;	author espie;	state Exp;
branches;
next	1.19;

1.19
date	2007.09.16.12.19.15;	author espie;	state Exp;
branches;
next	1.18;

1.18
date	2007.09.16.10.14.26;	author espie;	state Exp;
branches;
next	1.17;

1.17
date	2007.01.18.17.49.51;	author espie;	state Exp;
branches;
next	1.16;

1.16
date	2003.06.03.02.56.11;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2001.05.23.12.34.42;	author espie;	state Exp;
branches;
next	1.14;

1.14
date	2001.05.03.13.41.04;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	2001.03.02.16.57.26;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2000.11.24.14.36.33;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2000.11.24.14.27.19;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2000.09.14.13.52.41;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2000.09.14.13.46.45;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2000.09.14.13.43.31;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2000.09.14.13.32.06;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2000.06.10.01.41.05;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2000.02.02.13.47.47;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	98.12.05.00.06.27;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	96.11.30.21.08.54;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.36.30;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.42;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.42;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.29
log
@remove TIMESTAMP abstraction layer, prodded by theo.
while there, clean up includes.
use strtoll for ar timestamps (pretty much unused in reality, more
standard conforming than anything)

use idea from Todd to adapt to time_t being 32 bits OR 64 bits
(pedantically correct: INT_MIN would work just fine up to 1910 or so...)

okay millert@@, gone thru a make build.
@
text
@#ifndef DIR_H
#define DIR_H

/*	$OpenBSD: dir.h,v 1.28 2012/12/07 07:15:31 espie Exp $	*/
/*	$NetBSD: dir.h,v 1.4 1996/11/06 17:59:05 christos Exp $ */

/*
 * Copyright (c) 1988, 1989, 1990 The Regents of the University of California.
 * Copyright (c) 1988, 1989 by Adam de Boor
 * Copyright (c) 1989 by Berkeley Softworks
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Adam de Boor.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	from: @@(#)dir.h 8.1 (Berkeley) 6/6/93
 */

#include <sys/time.h>

/* dir --
 *	Directory searching using wildcards and/or normal names...
 *	Used both for source wildcarding in the Makefile and for finding
 *	implicit sources.
 */

/* Dir_Init()
 *	Initialize the module.
 */
extern void Dir_Init(void);

/*
 * Manipulating paths. By convention, the empty path always allows for
 * finding files in the current directory.
 */

/* Dir_AddDiri(path, name, end);
 *	Add directory (name, end) to a search path.
 */
extern void Dir_AddDiri(Lst, const char *, const char *);
#define Dir_AddDir(l, n)	Dir_AddDiri(l, n, NULL)

/* Dir_Concat(p1, p2);
 *	Concatenate two paths, adding dirs in p2 to the end of p1, but
 *	avoiding duplicates.
 */
extern void Dir_Concat(Lst, Lst);

/* Dir_Destroy(d);
 *	Destroy a directory in a search path.
 */
extern void Dir_Destroy(void *);

/* p2 = Dir_CopyDir(p);
 * 	Return a copy of a directory. Callback to duplicate search paths.
 */
extern void *Dir_CopyDir(void *);

/* Dir_PrintPath(p);
 *	Print the directory names along a given path.
 */
extern void Dir_PrintPath(Lst);


/*
 * Handling file names, and looking them up in paths
 */

/* fullname = Dir_FindFileComplexi(name, end, path, checkCurdirFirst)
 *	Searches for a file (name, end) on a given search path.  If it exists,
 *	return the fullname of the file, otherwise NULL.
 *	The fullname is always a copy, and the caller is responsible for
 *	free()ing it.
 *	Looking for a simple name always looks in the current directory,
 *	unless checkCurdirFirst is false.
 *	For complex names, the current directory search only occurs for
 *	paths with dot in them.
 */
extern char *Dir_FindFileComplexi(const char *, const char *, Lst, bool);
#define Dir_FindFilei(n, e, p) Dir_FindFileComplexi(n, e, p, true)
#define Dir_FindFileNoDoti(n, e, p) Dir_FindFileComplexi(n, e, p, false)
#define Dir_FindFile(n, p) Dir_FindFilei(n, strchr(n, '\0'), p)
#define Dir_FindFileNoDot(n, p) Dir_FindFileNoDoti(n, strchr(n, '\0'), p)

/* stamp = Dir_MTime(gn);
 *	Return the modification time of node gn, searching along
 *	the default search path.
 *	Side effect: the path and mtime fields of gn are filled in.
 *	Return specific value if file can't be found, to be tested by
 *	is_out_of_date().
 */
extern struct timespec Dir_MTime(GNode *);




/*
 * Misc
 */

/* List of directories to search when looking for targets. */
extern Lst	defaultPath;


/* communication between dir.c and direxpand.c */
struct PathEntry;
extern struct PathEntry *dot;
/* Handles wildcard expansion on a given directory. */
extern  void Dir_MatchFilesi(const char *, const char *, struct PathEntry *,
    Lst);
extern char *PathEntry_name(struct PathEntry *);
#endif /* DIR_H */
@


1.28
log
@gc dead code
@
text
@d4 1
a4 1
/*	$OpenBSD: dir.h,v 1.27 2012/10/02 10:29:30 espie Exp $	*/
d43 1
a43 3
#ifndef TIMESTAMP_TYPE
#include "timestamp_t.h"
#endif
d116 1
a116 1
extern TIMESTAMP Dir_MTime(GNode *);
@


1.27
log
@more changes, discussed and tested by various people.
- put back some job control, turns out it's necessary when we don't run a
shell.
- zap old #ifdef CLEANUP code... probably doesn't even compile.
- kill most of the OP_LIB code. Just keep a wee little bit for compatibility
(deprecated .LIBS and .INCLUDES, warns for weird dependencies instead of
erroring out).
- much improved debugging and -p output: sort variables, targets, rules,
output stuff in a nicer format mimicing input.
- better error message when no command is found, explain where the target comes from.
- sort final error list by file.
- show system files in errors as <bsd.prog.mk>
- reincorporate random delay, that was dropped
- optimize siginfo output by not regenerating the whole string each time.
- finish zapping old LocationInfo field that's no longer used.
@
text
@d4 1
a4 1
/*	$OpenBSD: dir.h,v 1.26 2010/07/19 19:46:44 espie Exp $	*/
a125 8

/* string = Dir_MakeFlags(flag, path);
 *	Given a search path and a command flag, create a string with each
 *	of the directories in the path preceded by the command flag and all
 *	of them separated by spaces.
 */
extern char *Dir_MakeFlags(const char *, Lst);

@


1.26
log
@Correct $OpenBSD$ stuff
@
text
@d4 1
a4 1
/*	$OpenBSD: dir.h,v 1.25 2010/07/19 19:30:37 espie Exp $	*/
a56 9

/* Dir_End()
 *	Cleanup the module.
 */
#ifdef CLEANUP
extern void Dir_End(void);
#else
#define Dir_End()
#endif
@


1.25
log
@two small changes:
- allow variables in SysV modifiers, as requested by matthieu@@
(since recursive variables are an extension, this just extends the
extension)
- variation on :Q  called :QL (quote list), which does quote every character
EXCEPT for whitespace. e.g.,

toto:
	@@for i in ${VAR:QL} ...
@
text
@d4 1
a4 2
/*	$OpenPackages$ */
/*	$OpenBSD$	*/
@


1.24
log
@changes to get target equivalence to work better.
- add new file to create lists of equivalent targets (siblings)
- use that for sequential mode to have much better VPATH support
- separate checking commands from reporting error, for later.
- zap DieHorribly accordingly
- renumber existing flags
- signal_running_jobs() is simpler than pass_signal_to_jobs()
- new debug option -dn for name matching.

Similar code to handle parallel make is still missing.

thanks to Mark, Miod, Theo, Otto, Todd for tests and/or comments.
@
text
@@


1.23
log
@zap more spaces at end of line
@
text
@d5 1
a5 1
/*	$OpenBSD: dir.h,v 1.22 2007/09/17 09:28:36 espie Exp $	*/
d155 1
@


1.22
log
@kill extra spaces at end of line
@
text
@d5 1
a5 1
/*	$OpenBSD: dir.h,v 1.21 2007/09/16 14:29:33 espie Exp $	*/
d146 1
a146 1
extern Lst	defaultPath;	
@


1.21
log
@remove old debug code nothing uses
@
text
@d5 1
a5 1
/*	$OpenBSD: dir.h,v 1.20 2007/09/16 12:30:35 espie Exp $	*/
d85 2
a86 2
/* Dir_Destroy(d);	    
 *	Destroy a directory in a search path. 
d106 1
a106 1
 *	Searches for a file (name, end) on a given search path.  If it exists, 
d123 1
a123 1
 *	the default search path. 
d133 1
a133 1
/* 
d138 2
a139 2
 *	Given a search path and a command flag, create a string with each 
 *	of the directories in the path preceded by the command flag and all 
d153 1
a153 1
extern  void Dir_MatchFilesi(const char *, const char *, struct PathEntry *, 
@


1.20
log
@rename dirSearchPath -> defaultPath, and openDirectories -> knownDirectories
@
text
@d5 1
a5 1
/*	$OpenBSD: dir.h,v 1.19 2007/09/16 12:19:15 espie Exp $	*/
a143 7

#ifdef DEBUG_DIRECTORY_CACHE
/* Dir_PrintDirectories();
 *	Print stats about the directory cache.
 */
extern void Dir_PrintDirectories(void);
#endif
@


1.19
log
@rename Path to less misleading PathEntry. Get rid of typedef.
@
text
@d5 1
a5 1
/*	$OpenBSD: dir.h,v 1.18 2007/09/16 10:14:26 espie Exp $	*/
d153 1
a153 1
extern Lst	dirSearchPath;	
@


1.18
log
@cut up dir.c into dir.c/direxpand.c as there is very little interface between
two modules that do different things.
@
text
@d5 1
a5 1
/*	$OpenBSD: dir.h,v 1.17 2007/01/18 17:49:51 espie Exp $	*/
d157 2
a158 2
struct Path_;
extern struct Path_ *dot;
d160 1
a160 1
extern  void Dir_MatchFilesi(const char *, const char *, struct Path_ *, 
@


1.17
log
@* add an extra argument to the dir lookup functions to say whether we
should look in the current directory.
* refactor include files treatment to have a separate function to look
for an include.
* use both pieces to make sure system includes do not get looked up
in the current directory unless everything else fails.

This is != from the netbsd solution to the same problem, which stuffs
`magic' entries into filepaths to say whether dot should be looked at
first or last.

feature requested by matthieu@@.
okay matthieu@@
@
text
@d5 1
a5 1
/*	$OpenBSD: dir.h,v 1.16 2003/06/03 02:56:11 millert Exp $	*/
a104 13
/* boolean = Dir_HasWildcardsi(name, end)
 *	Returns true if (name, end) needs to be wildcard-expanded.
 */
extern bool Dir_HasWildcardsi(const char *, const char *);
#define Dir_HasWildcards(n) Dir_HasWildcardsi(n, strchr(n, '\0'))

/* Dir_Expandi(pattern, endp, path, expansions);
 *	Expand (pattern, endp) to Lst of names matching on the search path.
 *	Put result in expansions.
 */
extern void Dir_Expandi(const char *, const char *, Lst, Lst);
#define Dir_Expand(n, l1, l2) Dir_Expandi(n, strchr(n, '\0'), l1, l2)

d155 7
@


1.16
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d5 1
a5 1
/*	$OpenBSD: dir.h,v 1.15 2001/05/23 12:34:42 espie Exp $	*/
d118 1
a118 1
/* fullname = Dir_FindFilei(name, end, path)
d123 2
a124 1
 *	Looking for a simple name always looks in the current directory.
d128 5
a132 2
extern char *Dir_FindFilei(const char *, const char *, Lst);
#define Dir_FindFile(n, e) Dir_FindFilei(n, strchr(n, '\0'), e)
@


1.15
log
@Mostly clean-up:
- cut up those huge include files into separate interfaces for all modules.
Put the interface documentation there, and not with the implementation.
- light-weight includes for needed concrete types (lst_t.h, timestamp_t.h).
- cut out some more logically separate parts: cmd_exec, varname, parsevar,
timestamp.
- put all error handling functions together, so that we will be able to
clean them up.
- more systematic naming: functioni  to handle interval, function to handle
string.
- put the init/end code apart to minimize coupling.
- kill weird types like ReturnStatus and Boolean. Use standard bool (with a
fallback for non-iso systems)
- better interface documentation for lots of subsystems.

As a result, make compilation goes somewhat faster (5%, even considering
the largish BSD copyrights to read). The corresponding preprocessed
source goes down from 1,5M to 1M.

A few minor code changes as well: Parse_DoVar is no longer destructive.
Parse_IsVar functionality is folded into Parse_DoVar (as it knows what an
assignment is), a few more interval handling functions. Avoid calling
XXX_End when they do nothing, just #define XXX_End   to nothing.

Parse_DoVar is slightly more general: it will handle compound assignments
as long as they make sense, e.g., VAR +!= cmd
will work.  As a side effect, VAR++=value now triggers an error
(two + in assignment).
- this stuff doesn't occur in portable Makefiles.
- writing VAR++ = value or VAR+ +=value  disambiguates it.
- this is a good thing, it uncovered a bug in bsd.port.mk.

Tested by naddy@@. Okayed millert@@. I'll handle the fallback if there is
any. This went through a full make build anyways, including isakmpd
(without mickey's custom binutils, as he didn't see fit to share it with me).
@
text
@d5 1
a5 1
/*	$OpenBSD: dir.h,v 1.4 1998/12/05 00:06:27 espie Exp $	*/
d25 1
a25 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.14
log
@Synch with my current work.
Numerous changes:
- generate can build several tables
- style cleanup
- statistics code
- use variable names throughout (struct Name)
- recursive variables everywhere
- faster parser (pass buffer along instead of allocating multiple copies)
- correct parser. Handles comments everywhere, and ; correctly
- more string intervals
- simplified dir.c, less recursion.
- extended for loops
- sinclude()
- finished removing extra junk from Lst_*
- handles ${@@D} and friends in a simpler way
- cleaned up and modular VarModifiers handling.
- recognizes some gnu Makefile usages and errors out about them.

Additionally, some extra functionality is defined by FEATURES. The set of
functionalities is currently hardcoded to OpenBSD defaults, but this may
include support for some NetBSD extensions, like ODE modifiers.

Backed by miod@@ and millert@@, who finally got sick of my endless patches...
@
text
@d1 3
d48 48
a95 1
/* dir.h --
d97 7
d105 9
a113 2
#ifndef DIR_H
#define DIR_H
d115 6
a120 7
typedef struct Path_ {
    int 	  refCount;	/* Number of paths with this directory */
    int 	  hits; 	/* the number of times a file in this
				 * directory has been found */
    struct ohash   files;	/* Hash table of files in directory */
    char	  name[1];	/* Name of directory */
} Path;
d122 9
a130 4
extern void Dir_Init(void);
extern void Dir_End(void);
extern Boolean Dir_HasWildcards(const char *);
extern void Dir_Expand(const char *, Lst, Lst);
d133 8
d142 13
a154 1
extern void Dir_AddDir(Lst, const char *, const char *);
d156 6
a161 1
extern void Dir_Concat(Lst, Lst);
d163 4
a166 4
extern void Dir_PrintPath(Lst);
extern void Dir_Destroy(void *);
extern void *Dir_CopyDir(void *);
extern int set_times(const char *);
@


1.13
log
@Use the ohash_* that's now in libc.
@
text
@d1 3
a3 2
/*	$OpenBSD: dir.h,v 1.12 2000/11/24 14:36:33 espie Exp $	*/
/*	$NetBSD: dir.h,v 1.4 1996/11/06 17:59:05 christos Exp $	*/
d42 1
a42 1
 *	from: @@(#)dir.h	8.1 (Berkeley) 6/6/93
d48 2
a49 2
#ifndef	_DIR
#define	_DIR
d52 2
a53 2
    int		refCount; 	/* Number of paths with this directory */
    int		hits;	    	/* the number of times a file in this
d55 2
a56 2
    struct ohash files;    	/* Hash table of files in directory */
    char	name[1];	/* Name of directory */
d59 15
a73 15
extern void Dir_Init __P((void));
extern void Dir_End __P((void));
extern Boolean Dir_HasWildcards __P((const char *));
extern void Dir_Expand __P((char *, Lst, Lst));
extern char *Dir_FindFile __P((char *, Lst));
extern TIMESTAMP Dir_MTime __P((GNode *));
extern void Dir_AddDir __P((Lst, const char *, const char *));
extern char *Dir_MakeFlags __P((char *, Lst));
extern void Dir_ClearPath __P((Lst));
extern void Dir_Concat __P((Lst, Lst));
extern void Dir_PrintDirectories __P((void));
extern void Dir_PrintPath __P((Lst));
extern void Dir_Destroy __P((void *));
extern void *Dir_CopyDir __P((void *));
extern int set_times __P((const char *));
d75 1
a75 1
#endif /* _DIR */
@


1.12
log
@Change the time stamp interface to use an abstract datatype.
Define two possible interfaces: the classic one,
and the new one (used where available) that depends on timespec.

Better granularity, make is now able to distinguish between files that
were built during the same second.
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.h,v 1.11 2000/11/24 14:27:19 espie Exp $	*/
d54 1
a54 1
    struct hash	files;    	/* Hash table of files in directory */
@


1.11
log
@Clean-ups:
* Buf_Destroy can be a macro
* X_ instead of _X for struct names, to avoid infringing on the system's
namespace.
* better wildcard detection heuristics
* fix #ifdef CLEANUP code
* a few comments
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.h,v 1.10 2000/09/14 13:52:41 espie Exp $	*/
d72 1
@


1.10
log
@Introduce a few macros to handle timestamps in an abstract way.

Replace the time stamp hash in dir.c with an open hashing structure.

In doing so, remove some nasty casts, simplify code a bit:
Dir_MTime can return a modification time, since make does not make
a distinction between out-of-date and non-existent files.
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.h,v 1.9 2000/09/14 13:46:45 espie Exp $	*/
d60 1
a60 1
extern Boolean Dir_HasWildcards __P((char *));
@


1.9
log
@Replace the old hash used to hold file names within a directory with
open hashing.

An interesting optimization is that the open hashing interface is more
fine-grained, hence we can compute the correct hash value at the start
of Dir_FindFile, and reuse it for each hash structure into which we look
(the effect is measurable on large directories along with objdir/VPATH).

Remove a few unnecessary Lst_Open/Lst_Close that serve no purpose except
obfuscating the code.

The interface to dir.h changes slightly, hence tedious includes changes...
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.h,v 1.8 2000/09/14 13:43:31 espie Exp $	*/
d63 1
a63 1
extern Boolean Dir_MTime __P((GNode *));
@


1.8
log
@- new DirReadDir internal function, that just reads a directory from
the disk or from a cache.
- use it in Dir_AddDir, and directly to set up dot.
- change Dir_AddDir to use string intervals, as this simplifies
dependend functions.
- set up an open-hashing cache for opened directory names.
- add_dirpath() function in main, to simplify code.
- simplify cleaning-up directories, as Dir_ClearPath is overkill.
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.h,v 1.7 2000/09/14 13:32:06 espie Exp $	*/
d54 1
a54 1
    Hash_Table	files;    	/* Hash table of files in directory */
@


1.7
log
@Some systematic clean-up.
- UNUSED macro that expands to __attribute__((unused)) for gcc
- move rcsid around so that they can be tagged UNUSED.
- activate -Wunused.
- use UNUSED instead of kludgy junk for function arguments.
- add extern to all extern prototypes.
- update comments in lst.h.
- clean up var.c a little bit, constifying arguments, updating comments...
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.h,v 1.6 2000/06/10 01:41:05 espie Exp $	*/
d50 3
a52 4
typedef struct Path {
    char         *name;	    	/* Name of directory */
    int	    	  refCount; 	/* Number of paths with this directory */
    int		  hits;	    	/* the number of times a file in this
d54 2
a55 1
    Hash_Table    files;    	/* Hash table of files in directory */
d64 1
a64 1
extern void Dir_AddDir __P((Lst, char *));
@


1.6
log
@Clean-up patch: use `void *' instead of old-fashioned ClientData/Address.
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.h,v 1.5 2000/02/02 13:47:47 espie Exp $	*/
d58 14
a71 14
void Dir_Init __P((void));
void Dir_End __P((void));
Boolean Dir_HasWildcards __P((char *));
void Dir_Expand __P((char *, Lst, Lst));
char *Dir_FindFile __P((char *, Lst));
Boolean Dir_MTime __P((GNode *));
void Dir_AddDir __P((Lst, char *));
char *Dir_MakeFlags __P((char *, Lst));
void Dir_ClearPath __P((Lst));
void Dir_Concat __P((Lst, Lst));
void Dir_PrintDirectories __P((void));
void Dir_PrintPath __P((Lst));
void Dir_Destroy __P((void *));
void *Dir_CopyDir __P((void *));
@


1.5
log
@Bug-fix: make should behave sensibly when presented with negative times...

- let *_MTime return booleans, as that's what they're used for, the time_t
is set as a side effect.

- use OUT_OF_DATE for a date starting point, set it at the origin of time.
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.h,v 1.4 1998/12/05 00:06:27 espie Exp $	*/
d70 2
a71 2
void Dir_Destroy __P((ClientData));
ClientData Dir_CopyDir __P((ClientData));
@


1.4
log
@Modifications from netbsd:
- don't interfere with MACHINE/MACHINE_ARCH defines for bootstrap
- type clean-up, time_t, and printing `unknown' ints
- fix TARGET/MEMBER bug in archive rules
- memmove...
- cleaner Error handler.
- reentrant brk_string
- .MAKE env variable
- preliminary scaffolding for .NOPATH

Other improvements:
- efree
- shellneed streamlined
- display Stop in .CURDIR after an error.
- document most features and misfeatures.
- add a few OpenBSD notes to the tutorial.
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.h,v 1.2 1996/06/26 05:36:30 deraadt Exp $	*/
d63 1
a63 1
int Dir_MTime __P((GNode *));
@


1.3
log
@Sync with NetBSD:
- Merge in FreeBSD and Lite2 changes.
- Fix bug where a non-archive target with a .a suffix would always
  be considered to be out of date, since it does not have a TOC.
- Fix NetBSD PR #2930: declare missing variable.
@
text
@@


1.2
log
@rcsid
@
text
@d1 2
a2 2
/*	$OpenBSD: dir.h,v 1.3 1995/06/14 15:19:11 christos Exp $	*/
/*	$NetBSD: dir.h,v 1.3 1995/06/14 15:19:11 christos Exp $	*/
d41 1
a41 1
 *	from: @@(#)dir.h	5.4 (Berkeley) 12/28/90
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
