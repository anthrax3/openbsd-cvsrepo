head	1.10;
access;
symbols
	OPENBSD_6_1:1.10.0.4
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.2
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.8.0.22
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.24
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.16
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.20
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.18
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.14
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.12
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.10
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.8
	OPENBSD_5_0:1.8.0.6
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.4
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.2
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.6.0.10
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.12
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.8
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.6
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.4
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.2
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.5.0.12
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.10
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.8
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.6
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.4
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.2
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.4.0.2
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.3.0.6
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.1.0.4
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.2
	OPENBSD_3_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.10
date	2016.03.28.11.27.37;	author chl;	state Exp;
branches;
next	1.9;
commitid	kLA9L0AwxUHm9iKm;

1.9
date	2016.03.05.13.12.12;	author espie;	state Exp;
branches;
next	1.8;
commitid	Kgac1mMXIgGbQ0fv;

1.8
date	2010.07.19.19.46.43;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2010.07.19.19.30.37;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2007.07.24.21.09.07;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2004.04.07.13.11.35;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2003.10.19.20.23.34;	author tedu;	state Exp;
branches;
next	1.3;

1.3
date	2002.08.05.17.04.36;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2002.07.31.19.29.20;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.23.12.34.40;	author espie;	state Exp;
branches;
next	;


desc
@@


1.10
log
@remove unused variable

ok espie@@
@
text
@/*	$OpenBSD: cmd_exec.c,v 1.9 2016/03/05 13:12:12 espie Exp $ */
/*
 * Copyright (c) 2001 Marc Espie.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE OPENBSD PROJECT AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENBSD
 * PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/wait.h>
#include <errno.h>
#include <stdio.h>
#include <unistd.h>
#include "config.h"
#include "defines.h"
#include "cmd_exec.h"
#include "buf.h"
#include "memory.h"
#include "pathnames.h"

char *
Cmd_Exec(const char *cmd, char **err)
{
	char	*args[4];	/* Args for invoking the shell */
	int 	fds[2]; 	/* Pipe streams */
	pid_t 	cpid;		/* Child PID */
	char	*result;	/* Result */
	int 	status; 	/* Command exit status */
	BUFFER	buf;		/* Buffer to store the result. */
	char	*cp;		/* Pointer into result. */
	ssize_t	cc;		/* Characters read from pipe. */
	size_t	length;		/* Total length of result. */


	*err = NULL;

	/* Set up arguments for the shell. */
	args[0] = "sh";
	args[1] = "-c";
	args[2] = (char *)cmd;
	args[3] = NULL;

	/* Open a pipe for retrieving shell's output. */
	if (pipe(fds) == -1) {
		*err = "Couldn't create pipe for \"%s\"";
		goto bad;
	}

	/* Fork */
	switch (cpid = fork()) {
	case 0:
		/* Close input side of pipe */
		(void)close(fds[0]);

		/* Duplicate the output stream to the shell's output, then
		 * shut the extra thing down. Note we don't fetch the error
		 * stream: user can use redirection to grab it as this goes
		 * through /bin/sh.
		 */
		if (fds[1] != 1) {
			(void)dup2(fds[1], 1);
			(void)close(fds[1]);
		}

		(void)execv(_PATH_BSHELL, args);
		_exit(1);
		/*NOTREACHED*/

	case -1:
		*err = "Couldn't exec \"%s\"";
		goto bad;

	default:
		/* No need for the writing half. */
		(void)close(fds[1]);

		Buf_Init(&buf, MAKE_BSIZE);

		do {
			char   grab[BUFSIZ];

			cc = read(fds[0], grab, sizeof(grab));
			if (cc > 0)
				Buf_AddChars(&buf, cc, grab);
		} while (cc > 0 || (cc == -1 && errno == EINTR));

		/* Close the input side of the pipe.  */
		(void)close(fds[0]);

		/* Wait for the child to exit.  */
		while (waitpid(cpid, &status, 0) == -1 && errno == EINTR)
			continue;

		if (cc == -1)
			*err = "Couldn't read shell's output for \"%s\"";

		if (status)
			*err = "\"%s\" returned non-zero status";

		length = Buf_Size(&buf);
		result = Buf_Retrieve(&buf);

		/* The result is null terminated, Convert newlines to spaces. */
		cp = result + length - 1;

		if (cp >= result && *cp == '\n')
			/* A final newline is just stripped.  */
			*cp-- = '\0';

		while (cp >= result) {
			if (*cp == '\n')
				*cp = ' ';
			cp--;
		}
		break;
	}
	return result;
    bad:
	return estrdup("");
}

@


1.9
log
@safer pattern: if you're interested in one child, get THAT one, don't steal
children from other parts of the program.

In that case, there's no reason to try to catch other process.
1/ they don't exist
2/ if they did, stealing their status would be bad.

okay deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cmd_exec.c,v 1.8 2010/07/19 19:46:43 espie Exp $ */
a44 1
	pid_t 	pid;		/* PID from wait() */
@


1.8
log
@Correct $OpenBSD$ stuff
@
text
@d1 1
a1 1
/*	$OpenBSD: cmd_exec.c,v 1.7 2010/07/19 19:30:37 espie Exp $ */
d110 1
a110 1
		while ((pid = wait(&status)) != cpid && pid >= 0)
@


1.7
log
@two small changes:
- allow variables in SysV modifiers, as requested by matthieu@@
(since recursive variables are an extension, this just extends the
extension)
- variation on :Q  called :QL (quote list), which does quote every character
EXCEPT for whitespace. e.g.,

toto:
	@@for i in ${VAR:QL} ...
@
text
@d1 1
a1 2
/*	$OpenPackages$ */
/*	$OpenBSD$ */
@


1.6
log
@reindent (no binary change)
@
text
@d2 1
a2 1
/*	$OpenBSD: cmd_exec.c,v 1.5 2004/04/07 13:11:35 espie Exp $ */
@


1.5
log
@ISO function declarations, trim a few comments, rename a few variables to
more explicit/more consistent names.

okay otto@@
@
text
@d2 1
a2 1
/*	$OpenBSD: cmd_exec.c,v 1.4 2003/10/19 20:23:34 tedu Exp $ */
d43 24
a66 40
    char	*args[4];	/* Args for invoking the shell */
    int 	fds[2]; 	/* Pipe streams */
    pid_t 	cpid;		/* Child PID */
    pid_t 	pid;		/* PID from wait() */
    char	*result;	/* Result */
    int 	status; 	/* Command exit status */
    BUFFER	buf;		/* Buffer to store the result. */
    char	*cp;		/* Pointer into result. */
    ssize_t	cc;		/* Characters read from pipe. */
    size_t	length;		/* Total length of result. */


    *err = NULL;

    /* Set up arguments for the shell. */
    args[0] = "sh";
    args[1] = "-c";
    args[2] = (char *)cmd;
    args[3] = NULL;

    /* Open a pipe for retrieving shell's output. */
    if (pipe(fds) == -1) {
	*err = "Couldn't create pipe for \"%s\"";
	goto bad;
    }

    /* Fork */
    switch (cpid = fork()) {
    case 0:
	/* Close input side of pipe */
	(void)close(fds[0]);

	/* Duplicate the output stream to the shell's output, then
	 * shut the extra thing down. Note we don't fetch the error
	 * stream: user can use redirection to grab it as this goes
	 * through /bin/sh.
	 */
	if (fds[1] != 1) {
	    (void)dup2(fds[1], 1);
	    (void)close(fds[1]);
d69 67
a135 20
	(void)execv(_PATH_BSHELL, args);
	_exit(1);
	/*NOTREACHED*/

    case -1:
	*err = "Couldn't exec \"%s\"";
	goto bad;

    default:
	/* No need for the writing half. */
	(void)close(fds[1]);

	Buf_Init(&buf, MAKE_BSIZE);

	do {
	    char   grab[BUFSIZ];

	    cc = read(fds[0], grab, sizeof(grab));
	    if (cc > 0)
		Buf_AddChars(&buf, cc, grab);
d137 3
a139 35
	while (cc > 0 || (cc == -1 && errno == EINTR));

	/* Close the input side of the pipe.  */
	(void)close(fds[0]);

	/* Wait for the child to exit.  */
	while ((pid = wait(&status)) != cpid && pid >= 0)
	    continue;

	if (cc == -1)
	    *err = "Couldn't read shell's output for \"%s\"";

	if (status)
	    *err = "\"%s\" returned non-zero status";

	length = Buf_Size(&buf);
	result = Buf_Retrieve(&buf);

	/* The result is null terminated, Convert newlines to spaces. */
	cp = result + length - 1;

	if (cp >= result && *cp == '\n')
	    /* A final newline is just stripped.  */
	    *cp-- = '\0';

	while (cp >= result) {
	    if (*cp == '\n')
		*cp = ' ';
	    cp--;
	}
	break;
    }
    return result;
bad:
    return estrdup("");
@


1.4
log
@out of bounds. report by david@@.  ok espie@@
@
text
@d2 1
a2 1
/*	$OpenBSD: cmd_exec.c,v 1.3 2002/08/05 17:04:36 millert Exp $ */
d41 1
a41 3
Cmd_Exec(cmd, err)
    const char	*cmd;
    char	**err;
@


1.3
log
@dup2() style nit--don't dup2() if oldfd == newfd; espie@@ OK.
@
text
@d2 1
a2 1
/*	$OpenBSD: cmd_exec.c,v 1.2 2002/07/31 19:29:20 mickey Exp $ */
d129 1
a129 1
	if (*cp == '\n')
@


1.2
log
@use fork, not vfork. seems to fix misterious trapframe trashing on hppa; deraadt@@ ok
@
text
@d2 1
a2 1
/*	$OpenBSD: cmd_exec.c,v 1.1 2001/05/23 12:34:40 espie Exp $ */
d82 2
a83 2
	(void)dup2(fds[1], 1);
	if (fds[1] != 1)
d85 1
@


1.1
log
@Mostly clean-up:
- cut up those huge include files into separate interfaces for all modules.
Put the interface documentation there, and not with the implementation.
- light-weight includes for needed concrete types (lst_t.h, timestamp_t.h).
- cut out some more logically separate parts: cmd_exec, varname, parsevar,
timestamp.
- put all error handling functions together, so that we will be able to
clean them up.
- more systematic naming: functioni  to handle interval, function to handle
string.
- put the init/end code apart to minimize coupling.
- kill weird types like ReturnStatus and Boolean. Use standard bool (with a
fallback for non-iso systems)
- better interface documentation for lots of subsystems.

As a result, make compilation goes somewhat faster (5%, even considering
the largish BSD copyrights to read). The corresponding preprocessed
source goes down from 1,5M to 1M.

A few minor code changes as well: Parse_DoVar is no longer destructive.
Parse_IsVar functionality is folded into Parse_DoVar (as it knows what an
assignment is), a few more interval handling functions. Avoid calling
XXX_End when they do nothing, just #define XXX_End   to nothing.

Parse_DoVar is slightly more general: it will handle compound assignments
as long as they make sense, e.g., VAR +!= cmd
will work.  As a side effect, VAR++=value now triggers an error
(two + in assignment).
- this stuff doesn't occur in portable Makefiles.
- writing VAR++ = value or VAR+ +=value  disambiguates it.
- this is a good thing, it uncovered a bug in bsd.port.mk.

Tested by naddy@@. Okayed millert@@. I'll handle the fallback if there is
any. This went through a full make build anyways, including isakmpd
(without mickey's custom binutils, as he didn't see fit to share it with me).
@
text
@d2 1
a2 1
/*	$OpenBSD: main.c,v 1.15 1999/01/09 16:45:02 espie Exp $ */
d72 1
a72 1
    switch (cpid = vfork()) {
@

