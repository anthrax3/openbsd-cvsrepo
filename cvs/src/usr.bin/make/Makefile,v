head	1.61;
access;
symbols
	OPENBSD_6_1:1.61.0.2
	OPENBSD_6_1_BASE:1.61
	OPENBSD_6_0:1.60.0.4
	OPENBSD_6_0_BASE:1.60
	OPENBSD_5_9:1.60.0.2
	OPENBSD_5_9_BASE:1.60
	OPENBSD_5_8:1.59.0.6
	OPENBSD_5_8_BASE:1.59
	OPENBSD_5_7:1.59.0.2
	OPENBSD_5_7_BASE:1.59
	OPENBSD_5_6:1.58.0.4
	OPENBSD_5_6_BASE:1.58
	OPENBSD_5_5:1.56.0.6
	OPENBSD_5_5_BASE:1.56
	OPENBSD_5_4:1.56.0.2
	OPENBSD_5_4_BASE:1.56
	OPENBSD_5_3:1.55.0.2
	OPENBSD_5_3_BASE:1.55
	OPENBSD_5_2:1.52.0.8
	OPENBSD_5_2_BASE:1.52
	OPENBSD_5_1_BASE:1.52
	OPENBSD_5_1:1.52.0.6
	OPENBSD_5_0:1.52.0.4
	OPENBSD_5_0_BASE:1.52
	OPENBSD_4_9:1.52.0.2
	OPENBSD_4_9_BASE:1.52
	OPENBSD_4_8:1.51.0.2
	OPENBSD_4_8_BASE:1.51
	OPENBSD_4_7:1.50.0.4
	OPENBSD_4_7_BASE:1.50
	OPENBSD_4_6:1.50.0.6
	OPENBSD_4_6_BASE:1.50
	OPENBSD_4_5:1.50.0.2
	OPENBSD_4_5_BASE:1.50
	OPENBSD_4_4:1.49.0.4
	OPENBSD_4_4_BASE:1.49
	OPENBSD_4_3:1.49.0.2
	OPENBSD_4_3_BASE:1.49
	OPENBSD_4_2:1.43.0.2
	OPENBSD_4_2_BASE:1.43
	OPENBSD_4_1:1.39.0.4
	OPENBSD_4_1_BASE:1.39
	OPENBSD_4_0:1.39.0.2
	OPENBSD_4_0_BASE:1.39
	OPENBSD_3_9:1.38.0.10
	OPENBSD_3_9_BASE:1.38
	OPENBSD_3_8:1.38.0.8
	OPENBSD_3_8_BASE:1.38
	OPENBSD_3_7:1.38.0.6
	OPENBSD_3_7_BASE:1.38
	OPENBSD_3_6:1.38.0.4
	OPENBSD_3_6_BASE:1.38
	OPENBSD_3_5:1.38.0.2
	OPENBSD_3_5_BASE:1.38
	OPENBSD_3_4:1.36.0.6
	OPENBSD_3_4_BASE:1.36
	OPENBSD_3_3:1.36.0.4
	OPENBSD_3_3_BASE:1.36
	OPENBSD_3_2:1.36.0.2
	OPENBSD_3_2_BASE:1.36
	OPENBSD_3_1:1.33.0.2
	OPENBSD_3_1_BASE:1.33
	OPENBSD_3_0:1.30.0.2
	OPENBSD_3_0_BASE:1.30
	OPENBSD_2_9_BASE:1.25
	OPENBSD_2_9:1.25.0.2
	OPENBSD_2_8:1.23.0.2
	OPENBSD_2_8_BASE:1.23
	OPENBSD_2_7:1.13.0.2
	OPENBSD_2_7_BASE:1.13
	OPENBSD_2_6:1.10.0.2
	OPENBSD_2_6_BASE:1.10
	OPENBSD_2_5:1.8.0.2
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.7.0.4
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.7.0.2
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.6.0.2
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.61
date	2016.10.14.09.27.21;	author natano;	state Exp;
branches;
next	1.60;
commitid	xK9iXmhQ2bSDSVMb;

1.60
date	2015.10.14.13.50.22;	author espie;	state Exp;
branches;
next	1.59;
commitid	N2KJxs0d4DGFAkuD;

1.59
date	2015.01.23.22.35.57;	author espie;	state Exp;
branches;
next	1.58;
commitid	WtGGWUPWONvkhNGN;

1.58
date	2014.05.12.19.11.19;	author espie;	state Exp;
branches;
next	1.57;

1.57
date	2014.03.22.10.36.22;	author espie;	state Exp;
branches;
next	1.56;

1.56
date	2013.04.23.14.32.53;	author espie;	state Exp;
branches;
next	1.55;

1.55
date	2012.10.02.10.29.30;	author espie;	state Exp;
branches;
next	1.54;

1.54
date	2012.09.21.10.01.52;	author espie;	state Exp;
branches;
next	1.53;

1.53
date	2012.09.21.07.55.20;	author espie;	state Exp;
branches;
next	1.52;

1.52
date	2010.10.17.22.54.37;	author schwarze;	state Exp;
branches;
next	1.51;

1.51
date	2010.04.25.13.59.53;	author espie;	state Exp;
branches;
next	1.50;

1.50
date	2008.11.04.07.22.35;	author espie;	state Exp;
branches;
next	1.49;

1.49
date	2008.01.12.13.05.57;	author espie;	state Exp;
branches;
next	1.48;

1.48
date	2007.10.23.22.04.24;	author miod;	state Exp;
branches;
next	1.47;

1.47
date	2007.09.17.12.42.09;	author espie;	state Exp;
branches;
next	1.46;

1.46
date	2007.09.16.10.39.07;	author espie;	state Exp;
branches;
next	1.45;

1.45
date	2007.09.16.10.20.17;	author espie;	state Exp;
branches;
next	1.44;

1.44
date	2007.09.16.10.14.26;	author espie;	state Exp;
branches;
next	1.43;

1.43
date	2007.07.21.14.40.33;	author espie;	state Exp;
branches;
next	1.42;

1.42
date	2007.07.09.21.16.42;	author deraadt;	state Exp;
branches;
next	1.41;

1.41
date	2007.07.08.17.44.20;	author espie;	state Exp;
branches;
next	1.40;

1.40
date	2007.03.18.15.37.06;	author mickey;	state Exp;
branches;
next	1.39;

1.39
date	2006.04.25.11.47.43;	author espie;	state Exp;
branches;
next	1.38;

1.38
date	2004.01.28.02.50.28;	author espie;	state Exp;
branches;
next	1.37;

1.37
date	2004.01.28.02.01.48;	author mickey;	state Exp;
branches;
next	1.36;

1.36
date	2002.07.25.18.40.24;	author art;	state Exp;
branches;
next	1.35;

1.35
date	2002.06.11.21.12.11;	author espie;	state Exp;
branches;
next	1.34;

1.34
date	2002.04.22.21.45.01;	author miod;	state Exp;
branches;
next	1.33;

1.33
date	2001.11.11.12.35.02;	author espie;	state Exp;
branches;
next	1.32;

1.32
date	2001.11.11.06.02.05;	author deraadt;	state Exp;
branches;
next	1.31;

1.31
date	2001.11.11.01.19.23;	author espie;	state Exp;
branches;
next	1.30;

1.30
date	2001.09.16.01.25.50;	author art;	state Exp;
branches;
next	1.29;

1.29
date	2001.07.18.13.29.49;	author espie;	state Exp;
branches;
next	1.28;

1.28
date	2001.06.05.11.59.09;	author espie;	state Exp;
branches;
next	1.27;

1.27
date	2001.05.23.12.34.39;	author espie;	state Exp;
branches;
next	1.26;

1.26
date	2001.05.03.13.40.59;	author espie;	state Exp;
branches;
next	1.25;

1.25
date	2001.03.02.16.57.26;	author espie;	state Exp;
branches;
next	1.24;

1.24
date	2000.11.24.14.36.33;	author espie;	state Exp;
branches;
next	1.23;

1.23
date	2000.09.14.13.56.14;	author espie;	state Exp;
branches;
next	1.22;

1.22
date	2000.09.14.13.32.05;	author espie;	state Exp;
branches;
next	1.21;

1.21
date	2000.07.17.23.09.06;	author espie;	state Exp;
branches;
next	1.20;

1.20
date	2000.07.17.23.01.20;	author espie;	state Exp;
branches;
next	1.19;

1.19
date	2000.06.25.20.31.08;	author espie;	state Exp;
branches;
next	1.18;

1.18
date	2000.06.23.16.39.45;	author espie;	state Exp;
branches;
next	1.17;

1.17
date	2000.06.23.16.27.29;	author espie;	state Exp;
branches;
next	1.16;

1.16
date	2000.06.23.16.15.49;	author espie;	state Exp;
branches;
next	1.15;

1.15
date	2000.06.17.14.43.35;	author espie;	state Exp;
branches;
next	1.14;

1.14
date	2000.06.10.01.32.22;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	99.12.19.00.04.24;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	99.12.09.18.20.06;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	99.11.10.14.11.49;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	99.10.05.21.50.34;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	99.09.28.02.22.53;	author smurph;	state Exp;
branches;
next	1.8;

1.8
date	98.12.05.00.06.26;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	98.03.07.18.43.08;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	97.09.21.11.49.52;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	96.11.30.21.08.48;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	96.09.02.16.04.06;	author briggs;	state Exp;
branches;
next	1.3;

1.3
date	96.03.27.19.32.34;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.02.22.22.24.43;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.41;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.41;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.61
log
@Implement the ${<D} and ${<F} variables, as documented in the manual.
They are equivalent to ${<:H} and ${<:T} repectively, however the former
variants are more portable, as they are understood by GNU, FreeBSD and
NetBSD make too.

absence of those variables reported by Dario Niedermann <dnied at tiscali.it>
ok millert espie
@
text
@#	$OpenBSD: Makefile,v 1.60 2015/10/14 13:50:22 espie Exp $

PROG=	make
CFLAGS+= -I${.OBJDIR} -I${.CURDIR}
HOSTCFLAGS+= -I${.OBJDIR} -I${.CURDIR}
CDIAGFLAGS=-Wall -W -Wno-char-subscripts -Wstrict-prototypes -pedantic \
	-Wmissing-prototypes -Wdeclaration-after-statement -std=c99

CDEFS+=-DHAS_PATHS_H
CDEFS+=-DHAS_EXTENDED_GETCWD
#CDEFS+=-DHAS_STATS

DPADD += ${LIBUTIL}
LDADD += -lutil
CFLAGS+=${CDEFS}
HOSTCFLAGS+=${CDEFS}

SRCS=	arch.c buf.c cmd_exec.c compat.c cond.c dir.c direxpand.c dump.c \
	engine.c \
	error.c for.c init.c job.c lowparse.c main.c make.c memory.c parse.c \
	parsevar.c str.c stats.c suff.c targ.c targequiv.c timestamp.c \
	var.c varmodifiers.c varname.c

.include "${.CURDIR}/lst.lib/Makefile.inc"

CLEANFILES+=generate generate.o regress.o check

CLEANFILES+= varhashconsts.h condhashconsts.h nodehashconsts.h

beforedepend: varhashconsts.h condhashconsts.h nodehashconsts.h
# may need tweaking if you add variable synonyms or change the hash function
MAGICVARSLOTS=82
MAGICCONDSLOTS=65

varhashconsts.h: generate
	${.OBJDIR}/generate 1 ${MAGICVARSLOTS} >$@@.tmp && mv $@@.tmp $@@

condhashconsts.h: generate
	${.OBJDIR}/generate 2 ${MAGICCONDSLOTS} >$@@.tmp && mv $@@.tmp $@@

nodehashconsts.h: generate
	${.OBJDIR}/generate 3 0 >$@@.tmp && mv $@@.tmp $@@

generate: generate.c stats.c memory.c ${DPADD}
	${HOSTCC} ${HOSTCFLAGS} ${LDSTATIC} -o ${.TARGET} ${.ALLSRC} ${LDFLAGS} ${LDADD}

CHECKOBJS = regress.o str.o memory.o buf.o

check: ${CHECKOBJS} ${DPADD}
	${CC} -o ${.TARGET} ${CFLAGS} ${CHECKOBJS} ${LDADD}

regress: check
	${.OBJDIR}/check

# kludge for people who forget to make depend
var.o: varhashconsts.h
cond.o: condhashconsts.h
targ.o parse.o: nodehashconsts.h

.PHONY:		regress

.include <bsd.prog.mk>
@


1.60
log
@make sure we use stdbool.h
Mostly diff by Daniel Dickman, who told me to commit in his stead,
as he's tied up at work.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.59 2015/01/23 22:35:57 espie Exp $
d32 1
a32 1
MAGICVARSLOTS=77
@


1.59
log
@a wee little bit more cleanup (more const and remove noise from CDIAGFLAGS...
-pedantic kind of requires -std=c99 here to avoid LL warnings)
okay miod@@, millert@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.58 2014/05/12 19:11:19 espie Exp $
a8 1
CDEFS+=-DHAS_BOOL_H
@


1.58
log
@adjust to ohash being in libutil now, and to the interface changes.
fix potential integer overflows in memory allocation (mostly for pedagogical
purposes, these are unlikely to overflow in practice)
move the rest of lst.lib stuff into its own directory.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.57 2014/03/22 10:36:22 espie Exp $
d7 1
a7 1
	-Wmissing-prototypes -Wdeclaration-after-statement
@


1.57
log
@don't use >$@@ directly
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.56 2013/04/23 14:32:53 espie Exp $
d14 2
d24 2
a25 4
SRCS+=	lstAddNew.c lstAppend.c lstConcat.c lstConcatDestroy.c \
	lstDeQueue.c lstDestroy.c lstDupl.c lstFindFrom.c lstForEachFrom.c \
	lstInsert.c lstMember.c lstRemove.c lstReplace.c lstRequeue.c lstSucc.c
.PATH:	${.CURDIR}/lst.lib
a28 1
CLEANFILES+=${LIBOBJS} libohash.a
d45 4
a48 2
generate: generate.c stats.c memory.c
	${HOSTCC} ${LDSTATIC} -o ${.TARGET} ${HOSTCFLAGS} ${.ALLSRC} ${LDADD}
d50 2
a51 2
check: regress.o str.o memory.o buf.o
	${CC} -o ${.TARGET} ${CFLAGS} ${.ALLSRC} ${LDADD}
@


1.56
log
@remove TIMESTAMP abstraction layer, prodded by theo.
while there, clean up includes.
use strtoll for ar timestamps (pretty much unused in reality, more
standard conforming than anything)

use idea from Todd to adapt to time_t being 32 bits OR 64 bits
(pedantically correct: INT_MIN would work just fine up to 1910 or so...)

okay millert@@, gone thru a make build.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.55 2012/10/02 10:29:30 espie Exp $
d38 1
a38 1
	${.OBJDIR}/generate 1 ${MAGICVARSLOTS} >${.TARGET}
d41 1
a41 1
	${.OBJDIR}/generate 2 ${MAGICCONDSLOTS} >${.TARGET}
d44 1
a44 1
	${.OBJDIR}/generate 3 0 >${.TARGET}
@


1.55
log
@more changes, discussed and tested by various people.
- put back some job control, turns out it's necessary when we don't run a
shell.
- zap old #ifdef CLEANUP code... probably doesn't even compile.
- kill most of the OP_LIB code. Just keep a wee little bit for compatibility
(deprecated .LIBS and .INCLUDES, warns for weird dependencies instead of
erroring out).
- much improved debugging and -p output: sort variables, targets, rules,
output stuff in a nicer format mimicing input.
- better error message when no command is found, explain where the target comes from.
- sort final error list by file.
- show system files in errors as <bsd.prog.mk>
- reincorporate random delay, that was dropped
- optimize siginfo output by not regenerating the whole string each time.
- finish zapping old LocationInfo field that's no longer used.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.54 2012/09/21 10:01:52 espie Exp $
a8 1
CDEFS+=-DUSE_TIMESPEC
@


1.54
log
@zap lint remains
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.53 2012/09/21 07:55:20 espie Exp $
d7 1
a7 1
	-Wmissing-prototypes
@


1.53
log
@major overhaul of the way make handle jobs, inspired by dpb:
instead of forking a "job" per target, and having that job further fork
separate commands, have make maintain a list of jobs, indexed by pid
of currently running commands, and handle process termination
continuation-style.  This has lots of benefits:
- make is responsible for most printing, so we no longer need pipes nor
job control: make -j jobs see the tty.
- no more special-casing for jobs that don't really execute anything.
- unify code for make -jn and make -B, including signal handlers and
job waiting.  So make -n, make -q, +cmd now run commands in the same
way in all cases.
- unified more accurate error-reporting, as make knows precisely which
command failed. Commands are tagged with their lines, and we display failing
commands in silent mode.
- fine-grained "expensive" command handling (recursion limiter). Do it
per-command instead of per-target.

Moreover, signal response is now simpler, as we just block the signals
in a small critical sections, test for events, and sigpause (thanks a lot
to guenther@@ and millert@@), so running make is now almost always paused
without any busy-waiting.

Thanks to everyone who tested and gave input.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.52 2010/10/17 22:54:37 schwarze Exp $
a59 3
var.ln: varhashconsts.h
cond.ln: condhashconsts.h
targ.ln parse.ln: nodehashconsts.h
@


1.52
log
@Stop installing me(1) and ms(1) source code.
We will soon get rid of groff in base,
so there is no longer any way to use these files with base.
No opposition on tech@@.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.51 2010/04/25 13:59:53 espie Exp $
d18 2
a19 1
SRCS=	arch.c buf.c cmd_exec.c compat.c cond.c dir.c direxpand.c engine.c \
@


1.51
log
@pure whitespace cleanup
@
text
@d1 1
a1 1
#	$OpenBSD$
a61 4

.if make(install)
SUBDIR+= PSD.doc
.endif
@


1.50
log
@changes to get target equivalence to work better.
- add new file to create lists of equivalent targets (siblings)
- use that for sequential mode to have much better VPATH support
- separate checking commands from reporting error, for later.
- zap DieHorribly accordingly
- renumber existing flags
- signal_running_jobs() is simpler than pass_signal_to_jobs()
- new debug option -dn for name matching.

Similar code to handle parallel make is still missing.

thanks to Mark, Miod, Theo, Otto, Todd for tests and/or comments.
@
text
@d53 1
a53 1
	${.OBJDIR}/check 
@


1.49
log
@new function: lstRequeue, to be used by the job handler
@
text
@d20 1
a20 1
	parsevar.c str.c stats.c suff.c targ.c timestamp.c \
@


1.48
log
@Fix CLEANFILES
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.47 2007/09/17 12:42:09 espie Exp $
d24 1
a24 1
	lstInsert.c lstMember.c lstRemove.c lstReplace.c lstSucc.c
@


1.47
log
@rewrite of the basic suffix/target parsing: use hash for suffixes.

Store special targets in target hash, and use them for the parsing.

Use OP_DUMMY flag to mark targets that don't really exist yet, such
as interrupt and default nodes.

Also, .PATHxxx is special in suffixes.

Small tweaks to compat.c, so that run_commands does more stuff after
the fork() (and thus no need to free things).

Remove distinction between local and global jobs.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.46 2007/09/16 10:39:07 espie Exp $
d27 1
a27 1
CLEANFILES+=generate hashconsts.h generate.o regress.o check
d30 1
a30 1
CLEANFILES+= varhashconsts.h condhashconsts.h generate.o generate
@


1.46
log
@first step towards sanity: take the functions common to parallel/not parallel
make outside of make.c and job.c, and create an engine.c file to hold them.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.45 2007/09/16 10:20:17 espie Exp $
d18 2
a19 3
SRCS=	arch.c buf.c cmd_exec.c compat.c cond.c dir.c direxpand.c \
	engine.c error.c for.c \
	init.c job.c lowparse.c main.c make.c memory.c parse.c \
d30 1
a30 2
CLEANFILES+= varhashconsts.h condhashconsts.h nodehashconsts.h 
CLEANFILES+= generate.o generate
d32 1
a32 1
beforedepend: varhashconsts.h condhashconsts.h
d58 1
d61 1
@


1.45
log
@scaffolding to recognize special targets/sources using ohash functions.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.44 2007/09/16 10:14:26 espie Exp $
d19 1
a19 1
	error.c for.c \
@


1.44
log
@cut up dir.c into dir.c/direxpand.c as there is very little interface between
two modules that do different things.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.43 2007/07/21 14:40:33 espie Exp $
d31 2
a32 1
CLEANFILES+= varhashconsts.h condhashconsts.h generate.o generate
d44 3
@


1.43
log
@zap unneeded stuff
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.42 2007/07/09 21:16:42 deraadt Exp $
d18 2
a19 1
SRCS=	arch.c buf.c cmd_exec.c compat.c cond.c dir.c error.c for.c \
@


1.42
log
@espie, you have got to be joking
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.41 2007/07/08 17:44:20 espie Exp $
a25 3

a:
	echo "Bindir is ${BINDIR}"
@


1.41
log
@A set of big related changes. okay millert@@, tested further by kettenis@@
and matthieu@@

This all revolves around putting ALL global variables into one single big
hash, and using flags. This removes some impossible to understand stuff,
like old varfind, and allows for some nice stuff.
- each time we reference a global variable, we create it, possibly as a dummy
variable.
- each time we go to the environment, we remember it, thus we no longer go
back to it.

Lists of dependant changes:
- isolate changes to oldVars and checkEnvFirst.
- remove VAR_CMD and VAR_GLOBAL contexts. The only distinction is in parsevar.
Split Parse_DoVar into Parse_DoVar and Parse_CmdlineVar
- rework var modules around obtain_global_var, observe flags in various
functions like Var_Value and Var_Seti.
- Var_Seti/Var_Appendi are almost the same code, use that internally.
- add magic to handle the very special SHELL variable.
- introduce Var_Definedi for the cases where we don't want the actual
value, to simplify tests.
- add keyword .poison, parse it and set global flags accordingly.
- do poison_checks where needed.
- document poison.
- in for loops, set variable temporarily, so that Var_SubstVar will also
substitute it in varmodifiers expressions.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.40 2007/03/18 15:37:06 mickey Exp $
a8 1
DESTDIR=
@


1.40
log
@allow this to build w/ cross-tools thru providing proper hostcflags; found by rainor's work
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.39 2006/04/25 11:47:43 espie Exp $
d9 1
d28 2
@


1.39
log
@same hack for .ln as .o
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.38 2004/01/28 02:50:28 espie Exp $
d5 1
d9 8
a16 5
CFLAGS+=-DUSE_TIMESPEC
CFLAGS+=-DHAS_BOOL_H
CFLAGS+=-DHAS_PATHS_H
CFLAGS+=-DHAS_EXTENDED_GETCWD
#CFLAGS+=-DHAS_STATS
d45 1
a45 1
	${HOSTCC} ${LDSTATIC} -o ${.TARGET} ${CFLAGS} ${.ALLSRC} ${LDADD}
@


1.38
log
@revert totally unapproved commit.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.36 2002/07/25 18:40:24 art Exp $
d52 2
@


1.37
log
@missing deps for generate and a commented out section useful for bootstrapping w/ alien libc's (now that it uses an evil o'hash functions)
@
text
@a22 8
# Use this for bootstrapping
#.PATH: ${.CURDIR}/../../lib/libc/ohash
#CFLAGS+=-I${.CURDIR}/../../lib/libc/ohash
#HSRCS+=	ohash_create_entry.c ohash_delete.c ohash_do.c ohash_entries.c \
#	ohash_enum.c ohash_init.c ohash_interval.c \
#	ohash_lookup_interval.c ohash_lookup_memory.c \
#	ohash_qlookup.c ohash_qlookupi.c
#SRCS+=	${HSRCS}
d40 1
a40 1
generate: generate.c stats.c memory.c ${HSRCS}
@


1.36
log
@Obey LDSTATIC when building "generate".
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.35 2002/06/11 21:12:11 espie Exp $
d23 8
d48 1
a48 1
generate: generate.c stats.c memory.c
@


1.35
log
@This is the first step in sanitizing the conditional parser.

Change the conditional recognition algorithm:
scan for a sequence of alphabetic characters, hash it, and compare it against
a small table (using ohash functions).
This makes Cond_Eval entry more logical, and allows for some shortcuts in
recognizing .include, .for, .undef.

This also means that conditionals must have an intervening blank between
the keyword and the actual test, e.g.,
.ifA
will no longer work.

(but no-one actually uses this, and it's highly obfuscated)

Okay miod@@.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.34 2002/04/22 21:45:01 miod Exp $
d41 1
a41 1
	${HOSTCC} -o ${.TARGET} ${CFLAGS} ${.ALLSRC} ${LDADD}
@


1.34
log
@Do not hardcode mvme88k-specific compilation flags here, especially since
the new flags happen to be no different from those set in <sys.mk>
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.33 2001/11/11 12:35:02 espie Exp $
d12 1
d32 1
a32 1
MAGICCONDSLOTS=43
d51 1
@


1.33
log
@Fixed version... don't see how this could work on i386, since it didn't
initialize create in main.c.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.32 2001/11/11 06:02:05 deraadt Exp $
a11 3
.if (${MACHINE_ARCH} == "m88k")
CFLAGS+=-O0
.endif
@


1.32
log
@undo changes that crash on (at least) the alpha
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.30 2001/09/16 01:25:50 art Exp $
d22 1
a22 1
	lstInit.c lstInsert.c lstMember.c lstRemove.c lstReplace.c lstSucc.c
@


1.31
log
@Redo LstInit as a macro: smaller and faster code in all cases, zeroing two
pointers is simpler than calling a function.
Recognize purely static lst headers, which don't really need any
initialization.
ok miod@@
@
text
@d22 1
a22 1
	lstInsert.c lstMember.c lstRemove.c lstReplace.c lstSucc.c
@


1.30
log
@Make make cross-compilable.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.29 2001/07/18 13:29:49 espie Exp $
d22 1
a22 1
	lstInit.c lstInsert.c lstMember.c lstRemove.c lstReplace.c lstSucc.c
@


1.29
log
@CDIAGFLAGS
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.28 2001/06/05 11:59:09 espie Exp $
d42 2
a43 2
generate: generate.o stats.o memory.o
	${CC} -o ${.TARGET} ${CFLAGS} ${.ALLSRC} ${LDADD}
@


1.28
log
@Use Str_concat instead of fixed buffers and snprintf in building paths.
Replace MAXPATHLEN with PATH_MAX (synch with op-make).
ok naddy@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.27 2001/05/23 12:34:39 espie Exp $
d4 3
a6 2
CFLAGS+= -I${.OBJDIR} -I${.CURDIR} ${WARNINGS}
WARNINGS=-Wall -W -Wno-char-subscripts -Wstrict-prototypes -pedantic -Wmissing-prototypes
@


1.27
log
@Mostly clean-up:
- cut up those huge include files into separate interfaces for all modules.
Put the interface documentation there, and not with the implementation.
- light-weight includes for needed concrete types (lst_t.h, timestamp_t.h).
- cut out some more logically separate parts: cmd_exec, varname, parsevar,
timestamp.
- put all error handling functions together, so that we will be able to
clean them up.
- more systematic naming: functioni  to handle interval, function to handle
string.
- put the init/end code apart to minimize coupling.
- kill weird types like ReturnStatus and Boolean. Use standard bool (with a
fallback for non-iso systems)
- better interface documentation for lots of subsystems.

As a result, make compilation goes somewhat faster (5%, even considering
the largish BSD copyrights to read). The corresponding preprocessed
source goes down from 1,5M to 1M.

A few minor code changes as well: Parse_DoVar is no longer destructive.
Parse_IsVar functionality is folded into Parse_DoVar (as it knows what an
assignment is), a few more interval handling functions. Avoid calling
XXX_End when they do nothing, just #define XXX_End   to nothing.

Parse_DoVar is slightly more general: it will handle compound assignments
as long as they make sense, e.g., VAR +!= cmd
will work.  As a side effect, VAR++=value now triggers an error
(two + in assignment).
- this stuff doesn't occur in portable Makefiles.
- writing VAR++ = value or VAR+ +=value  disambiguates it.
- this is a good thing, it uncovered a bug in bsd.port.mk.

Tested by naddy@@. Okayed millert@@. I'll handle the fallback if there is
any. This went through a full make build anyways, including isakmpd
(without mickey's custom binutils, as he didn't see fit to share it with me).
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.26 2001/05/03 13:40:59 espie Exp $
d10 1
@


1.26
log
@Synch with my current work.
Numerous changes:
- generate can build several tables
- style cleanup
- statistics code
- use variable names throughout (struct Name)
- recursive variables everywhere
- faster parser (pass buffer along instead of allocating multiple copies)
- correct parser. Handles comments everywhere, and ; correctly
- more string intervals
- simplified dir.c, less recursion.
- extended for loops
- sinclude()
- finished removing extra junk from Lst_*
- handles ${@@D} and friends in a simpler way
- cleaned up and modular VarModifiers handling.
- recognizes some gnu Makefile usages and errors out about them.

Additionally, some extra functionality is defined by FEATURES. The set of
functionalities is currently hardcoded to OpenBSD defaults, but this may
include support for some NetBSD extensions, like ODE modifiers.

Backed by miod@@ and millert@@, who finally got sick of my endless patches...
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.25 2001/03/02 16:57:26 espie Exp $
d5 1
a5 1
WARNINGS=-Wall -W -Wno-char-subscripts -Wstrict-prototypes -pedantic #-Wmissing-prototypes
d8 2
d14 4
a17 2
SRCS=	arch.c buf.c compat.c cond.c dir.c error.c for.c job.c lowparse.c \
	main.c make.c parse.c str.c stats.c suff.c targ.c var.c varmodifiers.c #util.c 
d40 1
a40 1
generate: generate.o stats.o error.o
d43 1
a43 1
check: regress.o str.o error.o buf.o
@


1.25
log
@Use the ohash_* that's now in libc.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.24 2000/11/24 14:36:33 espie Exp $
d4 2
a5 1
CFLAGS+= -I${.OBJDIR} -I${.CURDIR} -Wall -Wno-char-subscripts -Wstrict-prototypes
d13 4
a16 6
	main.c make.c parse.c str.c suff.c targ.c var.c varmodifiers.c #util.c 
SRCS+=	lstAppend.c lstAtEnd.c lstAtFront.c lstClose.c lstConcat.c \
	lstConcatDestroy.c lstDeQueue.c lstDestroy.c lstDupl.c lstEnQueue.c \
	lstFindFrom.c lstForEachFrom.c \
	lstInit.c lstInsert.c lstIsAtEnd.c lstIsEmpty.c \
	lstMember.c lstNext.c lstOpen.c lstRemove.c lstReplace.c lstSucc.c
d23 1
a23 1
CLEANFILES+= hashconsts.h generate.o generate
d25 1
a25 1
beforedepend: hashconsts.h
d27 2
a28 1
MAGICSLOTS=34
d30 2
a31 2
hashconsts.h: generate
	${.OBJDIR}/generate ${MAGICSLOTS} >${.TARGET}
d33 4
a36 1
generate: generate.o error.o
d46 1
a46 1
var.o: hashconsts.h
d51 2
@


1.24
log
@Change the time stamp interface to use an abstract datatype.
Define two possible interfaces: the classic one,
and the new one (used where available) that depends on timespec.

Better granularity, make is now able to distinguish between files that
were built during the same second.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.23 2000/09/14 13:56:14 espie Exp $
a20 15
make: libohash.a
.PATH:  ${.CURDIR}/ohash
CFLAGS+=-I${.CURDIR}/ohash
LDADD=-L${.OBJDIR} -lohash

LIBOBJS= hash_create_entry.o hash_delete.o hash_do.o hash_entries.o \
    hash_enum.o hash_init.o hash_interval.o \
    hash_lookup_interval.o hash_lookup_memory.o hash_lookup_string.o \
    hash_qlookup.o hash_qlookupi.o

libohash.a: ${LIBOBJS}
	rm -f $@@
	ar cq $@@ `lorder ${LIBOBJS}|tsort`
	ranlib $@@

d33 1
a33 1
generate: generate.o error.o libohash.a
d36 1
a36 1
check: regress.o str.o error.o buf.o libohash.a
@


1.23
log
@This kills the last old hashing table, in arch.c

Slight optimizations: instead of storing archive members, just keep
the modification time, as we don't care for the rest of the archive
information. Lazily compute mtime, stash ascii date instead, and convert
to mtime when needed (storing an out_of_date value to mark the unconverted
values).

Archive handling is atrocious and need some clean-up.

Thanks to miod@@ who took the time to review those patches.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.22 2000/09/14 13:32:05 espie Exp $
d6 1
@


1.22
log
@Some systematic clean-up.
- UNUSED macro that expands to __attribute__((unused)) for gcc
- move rcsid around so that they can be tagged UNUSED.
- activate -Wunused.
- use UNUSED instead of kludgy junk for function arguments.
- add extern to all extern prototypes.
- update comments in lst.h.
- clean up var.c a little bit, constifying arguments, updating comments...
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.21 2000/07/17 23:09:06 espie Exp $
d10 1
a10 1
SRCS=	arch.c buf.c compat.c cond.c dir.c error.c for.c hash.c job.c lowparse.c \
@


1.21
log
@Major unobfuscation: split var modifiers handling to a separate file.
This does finally make var handling somewhat readable.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.20 2000/07/17 23:01:20 espie Exp $
d4 1
a4 1
CFLAGS+= -I${.OBJDIR} -I${.CURDIR} -Wall -Wno-char-subscripts -Wno-unused -Wstrict-prototypes#-Wmissing-prototypes -Wstrict-prototypes
@


1.20
log
@This does replace Str_Match with a better routine, which handles negated
intervals, and \\ in intervals.

Accordingly, var.c no longer needs to copy the :Marg to replace \: with :

We don't use fnmatch(3) because of various optimizations which are harder
to achieve in a generic setting.

Also add regression suite for the Str_Match function.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.19 2000/06/25 20:31:08 espie Exp $
d11 1
a11 1
	main.c make.c parse.c str.c suff.c targ.c var.c #util.c 
@


1.19
log
@Cater to people who don't run make depend better.
Also forgot a few CLEANFILES.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.18 2000/06/23 16:39:45 espie Exp $
d35 2
d49 6
@


1.18
log
@This patch is worth a lot, speed-wise.

This does introduce a proper stack of IFiles to handle included files:
instead of having the current file be a special case, it's also an IFile.

The corresponding code is slightly unobfuscated, removing the error-prone
ParseEOF function, freeing the filename systematically (thus, main.c needs
to strdup stdin), and merging both include functions lookup into one.

The speed gain comes from changing the IFile structure to merge with
fgetln seamlessly.

The low-level parse code is mostly moved to a new file, lowparse.c, to
make things easier to read (see next patch as well).

Accordingly, util.c gains a fgetln.

Note the interaction between Parse_File, Dir_FindFile, and ReadMakefile in
main.c. This patch closes a subtle memory hole (only the Makefile names,
so rather small).

Reviewed by miod@@.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.17 2000/06/23 16:27:29 espie Exp $
d36 1
d49 1
a49 1
${.CURDIR}/var.c: hashconsts.h
@


1.17
log
@This is the speed-up patch, which doubles make speed (almost).

Use the open hashing functions for global contexts instead of List in
var.c.

All the preliminary work to trim down local contexts means that we don't
suffer from the heavy initialization work that a hash table entails.

There is some make kludgery to:
- build the hashing functions as a library,
- recreate hashconsts.h, even if make depend was not invoked.

One point of the hashing scheme written was to separate the computation
of the hash function, and the hash lookup itself. This is very convenient
for make, because of those pesky special variables. hashconsts.h is there
to pre-hash the correct values, which replaces a few expensive string
comparisons with quick hash value comparisons, followed by one expensive
string comparison. The modulus MAGICSLOTS chosen in the Makefile is
ad-hoc: it is small enough to write a small switch without collision,
and will need changing if the hash function changes...

The function quick_lookup is the most important:
it either returns an index, for a local variable, or it does compute a
hashing value, and returns -1.

Another somewhat controversial decision is the use of string intervals.
This avoids either copying a string, or twiddling with a byte for cases
such as ${VAR}.

Finally, the variable name is stored within the variable itself. Since
a given variable name never changes, this makes sense. All that was needed
was a hash library with support for this.  Note that the hashing table
holds only a variable pointer AND the corresponding hashing value, WITHOUT
a modulo hashtablesize. Two reasons:
- hash resizes can be done faster, without having to recompute hashing values.
- locality of access. The hash table fits into memory without problem. Once
a candidate slot is found, we check the complete hashing value. Probability
of a collision is very small (32 bits...). So bringing up the whole
variable in memory at once is good: the name will almost always match, in
which case we want the variable value as well, so it makes sense to put
them together.

The ohash functions implement open hashing, as described in Knuth, but with
a variable table size.  Choosing powers of 2 sizes does not yield more
collisions, but it makes the hashing scheme much simpler. The thresholds at
which to expand/shrink the tables seem to work well in practice. The
default sizes were chosen such that the tables hardly ever shrink or expand
anyways (though I've tried with smaller/larger sizes to verify that the
shrinking/expanding worked correctly): larger Makefiles hold roughly
500/600 variables, which fits without trouble into a 1024-sized variable.

Disregard #ifdef STATS_HASH, this is some internal scaffolding I'm using
to measure make performance.

The only known issue with open-hashing is that deletions cannot create
empty slots, but do leave slots marked as `occupied once' so that lookup
works.  We use a well-known optimization which records those pseudo-empty
slots while looking up values. If the value is not found, the pseudo-empty
slot is returned to be filled. If the value is found, it is swapped with
the pseudo-empty slot. This is an improvement in both cases, since this
shortens the length of lookup chains, eventually pushing the pseudo-empty
slots to the end.

Reviewed by millert@@ and miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.16 2000/06/23 16:15:49 espie Exp $
d10 2
a11 2
SRCS=	arch.c buf.c compat.c cond.c dir.c error.c for.c hash.c job.c main.c \
	make.c parse.c str.c suff.c targ.c var.c #util.c 
@


1.16
log
@Trivial consequences of the previous list changes:

- audit code for Lst_Datum, it's never applied to an empty pointer,
so check can be removed -> turn into a macro,
- Lst_First, Lst_Last can become macro as well
- specialized version of Lst_Succ (Lst_Adv) to use in loops where it cannot
fail,
- Lst_Open can no longer fail. Trim down corresponding code.

Reviewed millert@@, miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.15 2000/06/17 14:43:35 espie Exp $
d4 1
a4 1
CFLAGS+= -I${.CURDIR} -Wall -Wno-char-subscripts -Wno-unused -Wstrict-prototypes#-Wmissing-prototypes -Wstrict-prototypes
d18 31
@


1.15
log
@This removes the few instances of Lst_New left.
- replaces Lst_Duplicate with Lst_Clone, which does not allocate storage
- split Lst_Concat into Lst_Concat/Lst_ConcatDestroy
Thus, all the LstValid checks are gone, since we always invoke list
functions with valid pointers.

Note that dynamic list allocation accounted for roughly 20% of all calls
to malloc.  The extraneous calls to malloc left are now mostly in parse.c,
which makes some wasteful usage of temporary buffers.

With those few patches, the code is sturdier, and easier to maintain.

Reviewed by millert@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.14 2000/06/10 01:32:22 espie Exp $
d13 3
a15 4
	lstConcatDestroy.c \
	lstDatum.c lstDeQueue.c lstDestroy.c lstDupl.c lstEnQueue.c \
	lstFindFrom.c lstFirst.c lstForEachFrom.c \
	lstInit.c lstInsert.c lstIsAtEnd.c lstIsEmpty.c lstLast.c \
@


1.14
log
@Thus, Lst_ForEach no longer needs returning a status.
In fact, it can become a macro based on Lst_ForEachFrom.
This also introduces Lst_Every, as a shortcut for the very common case where
Lst_ForEach does not need any user data.

Finally,  make consistent use of a few function typedefs, instead of having
explicit void (*)(Lst)  arguments all over the place.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.13 1999/12/19 00:04:24 espie Exp $
d13 1
@


1.13
log
@Rearrange Lst_Find interface to conform better with other functions.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.12 1999/12/09 18:20:06 espie Exp $
d14 1
a14 1
	lstFindFrom.c lstFirst.c lstForEach.c lstForEachFrom.c \
@


1.12
log
@Split some allocation/error handling functions out of main.c
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.11 1999/11/10 14:11:49 espie Exp $
d14 1
a14 1
	lstFind.c lstFindFrom.c lstFirst.c lstForEach.c lstForEachFrom.c \
@


1.11
log
@Turn on strict-prototypes, add missing prototypes.
Move main prototype to main.c, as this is not used
from any other file.

Close open bug.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.10 1999/10/05 21:50:34 espie Exp $
d10 1
a10 1
SRCS=	arch.c buf.c compat.c cond.c dir.c for.c hash.c job.c main.c \
@


1.10
log
@util.c only holds compatibility functions that OpenBSD doesn't use.
Keep the file for compatibility, but don't bother compiling it.
From NetBsd
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.9 1999/09/28 02:22:53 smurph Exp $
d4 1
a4 1
CFLAGS+= -I${.CURDIR} -Wall -Wno-char-subscripts -Wno-unused #-Wmissing-prototypes -Wstrict-prototypes
@


1.9
log
@disabled optimizations for 88k
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.8 1998/12/05 00:06:26 espie Exp $
d11 1
a11 1
	make.c parse.c str.c suff.c targ.c var.c util.c
@


1.8
log
@Modifications from netbsd:
- don't interfere with MACHINE/MACHINE_ARCH defines for bootstrap
- type clean-up, time_t, and printing `unknown' ints
- fix TARGET/MEMBER bug in archive rules
- memmove...
- cleaner Error handler.
- reentrant brk_string
- .MAKE env variable
- preliminary scaffolding for .NOPATH

Other improvements:
- efree
- shellneed streamlined
- display Stop in .CURDIR after an error.
- document most features and misfeatures.
- add a few OpenBSD notes to the tutorial.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.6 1997/09/21 11:49:52 deraadt Exp $
d5 5
@


1.7
log
@Add -Wno-char-subscripts to CFLAGS
@
text
@@


1.6
log
@$OpenBSD$
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.5 1996/11/30 21:08:48 millert Exp $
d4 1
a4 1
CFLAGS+= -I${.CURDIR} -Wall -Wno-unused #-Wmissing-prototypes -Wstrict-prototypes
@


1.5
log
@Sync with NetBSD:
- Merge in FreeBSD and Lite2 changes.
- Fix bug where a non-archive target with a .a suffix would always
  be considered to be out of date, since it does not have a TOC.
- Fix NetBSD PR #2930: declare missing variable.
@
text
@d1 1
a1 3
#	$OpenBSD: Makefile,v 1.4 1996/09/02 16:04:06 briggs Exp $
#	$NetBSD: Makefile,v 1.12 1996/11/06 17:58:58 christos Exp $
#	@@(#)Makefile	5.2 (Berkeley) 12/28/90
@


1.4
log
@Sync up with NetBSD:
(christos)
	Fix bug reported by Greg Hudson where leaf (source only) nodes were
	referenced only by their basename and not by their full pathname. This
	breaks when .PATH or MAKEOBJDIR are used. There might be Makefiles
	around that try to work around this bug by prepending ${.CURDIR} to
	the sources, and they should be found and fixed. Also a lot of the gunk
	in suff.c that was attempting to work around the same problem could be
	removed.
(christos)
	- Move -D flags from Makefile to config.h and explain what they do. Add
	  -Wall -Wno-unused to CFLAGS. Add new define SYSVVARSUB to enable SysV
	  style variable substitutions and enable them.
	- Add SunOS style command substitutions via SUNSHCMD
	- Fix core dump with '{variable = value'
(christos)
	Fix bug where make will always exit with 0, even when one or more
	parallel jobs failed. (Only affects parallel make code)
(christos)
	Protect __P from being multiply defined (for systems that already
	define it)
(christos) Add strdup() since ultrix is missing it.
	From Larry Schwimmer <rosebud@@cyclone.Stanford.EDU>
(christos) Add estrdup(), a checked version of strdup and use it.
(christos) Recognize SVR4 style long filename entries in archives.
(thorpej) Tidy up some RCS ids a bit.
@
text
@d1 2
a2 2
#	$OpenBSD: Makefile,v 1.3 1996/03/27 19:32:34 niklas Exp $
#	$NetBSD: Makefile,v 1.11 1996/05/28 23:34:35 christos Exp $
d6 1
a6 1
CFLAGS+= -I${.CURDIR} -Wall -Wno-unused
@


1.3
log
@From NetBSD: merge of 960317
@
text
@d1 2
a2 2
#	$OpenBSD$
#	$NetBSD: Makefile,v 1.10 1996/03/11 13:45:31 christos Exp $
d6 1
a6 1
CFLAGS+= -I${.CURDIR} -DPOSIX -DSYSVINCLUDE
@


1.2
log
@From NetBSD:
Support SVR4 style archives.
Fix pr/1421 (from Matthew Green) and pr/1997 (from Jeff Thieleke).
In ParseDoInclude(), make a temporary copy of the current file name
while searching for ""-type include files, since the current file name
might not be a writeable string.
@
text
@d1 2
a2 1
#	$NetBSD: Makefile,v 1.9 1996/02/04 22:20:27 christos Exp $
d8 1
a8 1
	make.c parse.c str.c suff.c targ.c var.c
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
#	$NetBSD: Makefile,v 1.8 1995/06/14 15:18:37 christos Exp $
d5 1
a5 1
CFLAGS+= -I${.CURDIR} -DPOSIX
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@

