head	1.38;
access;
symbols
	OPENBSD_6_1:1.38.0.28
	OPENBSD_6_1_BASE:1.38
	OPENBSD_6_0:1.38.0.26
	OPENBSD_6_0_BASE:1.38
	OPENBSD_5_9:1.38.0.22
	OPENBSD_5_9_BASE:1.38
	OPENBSD_5_8:1.38.0.24
	OPENBSD_5_8_BASE:1.38
	OPENBSD_5_7:1.38.0.16
	OPENBSD_5_7_BASE:1.38
	OPENBSD_5_6:1.38.0.20
	OPENBSD_5_6_BASE:1.38
	OPENBSD_5_5:1.38.0.18
	OPENBSD_5_5_BASE:1.38
	OPENBSD_5_4:1.38.0.14
	OPENBSD_5_4_BASE:1.38
	OPENBSD_5_3:1.38.0.12
	OPENBSD_5_3_BASE:1.38
	OPENBSD_5_2:1.38.0.10
	OPENBSD_5_2_BASE:1.38
	OPENBSD_5_1_BASE:1.38
	OPENBSD_5_1:1.38.0.8
	OPENBSD_5_0:1.38.0.6
	OPENBSD_5_0_BASE:1.38
	OPENBSD_4_9:1.38.0.4
	OPENBSD_4_9_BASE:1.38
	OPENBSD_4_8:1.38.0.2
	OPENBSD_4_8_BASE:1.38
	OPENBSD_4_7:1.36.0.8
	OPENBSD_4_7_BASE:1.36
	OPENBSD_4_6:1.36.0.10
	OPENBSD_4_6_BASE:1.36
	OPENBSD_4_5:1.36.0.6
	OPENBSD_4_5_BASE:1.36
	OPENBSD_4_4:1.36.0.4
	OPENBSD_4_4_BASE:1.36
	OPENBSD_4_3:1.36.0.2
	OPENBSD_4_3_BASE:1.36
	OPENBSD_4_2:1.33.0.18
	OPENBSD_4_2_BASE:1.33
	OPENBSD_4_1:1.33.0.16
	OPENBSD_4_1_BASE:1.33
	OPENBSD_4_0:1.33.0.14
	OPENBSD_4_0_BASE:1.33
	OPENBSD_3_9:1.33.0.12
	OPENBSD_3_9_BASE:1.33
	OPENBSD_3_8:1.33.0.10
	OPENBSD_3_8_BASE:1.33
	OPENBSD_3_7:1.33.0.8
	OPENBSD_3_7_BASE:1.33
	OPENBSD_3_6:1.33.0.6
	OPENBSD_3_6_BASE:1.33
	OPENBSD_3_5:1.33.0.4
	OPENBSD_3_5_BASE:1.33
	OPENBSD_3_4:1.33.0.2
	OPENBSD_3_4_BASE:1.33
	OPENBSD_3_3:1.32.0.8
	OPENBSD_3_3_BASE:1.32
	OPENBSD_3_2:1.32.0.6
	OPENBSD_3_2_BASE:1.32
	OPENBSD_3_1:1.32.0.4
	OPENBSD_3_1_BASE:1.32
	OPENBSD_3_0:1.32.0.2
	OPENBSD_3_0_BASE:1.32
	OPENBSD_2_9_BASE:1.30
	OPENBSD_2_9:1.30.0.2
	OPENBSD_2_8:1.27.0.2
	OPENBSD_2_8_BASE:1.27
	OPENBSD_2_7:1.18.0.2
	OPENBSD_2_7_BASE:1.18
	OPENBSD_2_6:1.13.0.4
	OPENBSD_2_6_BASE:1.13
	OPENBSD_2_5:1.13.0.2
	OPENBSD_2_5_BASE:1.13
	OPENBSD_2_4:1.12.0.2
	OPENBSD_2_4_BASE:1.12
	OPENBSD_2_3:1.11.0.2
	OPENBSD_2_3_BASE:1.11
	OPENBSD_2_2:1.10.0.2
	OPENBSD_2_2_BASE:1.10
	OPENBSD_2_1:1.9.0.2
	OPENBSD_2_1_BASE:1.9
	OPENBSD_2_0:1.6.0.2
	OPENBSD_2_0_BASE:1.6
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.38
date	2010.07.19.19.46.44;	author espie;	state Exp;
branches;
next	1.37;

1.37
date	2010.07.19.19.30.37;	author espie;	state Exp;
branches;
next	1.36;

1.36
date	2007.12.01.15.14.34;	author espie;	state Exp;
branches;
next	1.35;

1.35
date	2007.11.28.09.40.08;	author espie;	state Exp;
branches;
next	1.34;

1.34
date	2007.09.17.11.43.12;	author espie;	state Exp;
branches;
next	1.33;

1.33
date	2003.06.03.02.56.12;	author millert;	state Exp;
branches;
next	1.32;

1.32
date	2001.05.23.12.34.46;	author espie;	state Exp;
branches;
next	1.31;

1.31
date	2001.05.03.13.41.08;	author espie;	state Exp;
branches;
next	1.30;

1.30
date	2001.03.02.16.57.26;	author espie;	state Exp;
branches;
next	1.29;

1.29
date	2000.11.24.14.36.35;	author espie;	state Exp;
branches;
next	1.28;

1.28
date	2000.11.24.14.27.19;	author espie;	state Exp;
branches;
next	1.27;

1.27
date	2000.09.14.13.52.42;	author espie;	state Exp;
branches;
next	1.26;

1.26
date	2000.09.14.13.40.03;	author espie;	state Exp;
branches;
next	1.25;

1.25
date	2000.09.14.13.32.07;	author espie;	state Exp;
branches;
next	1.24;

1.24
date	2000.06.23.16.27.29;	author espie;	state Exp;
branches;
next	1.23;

1.23
date	2000.06.23.16.23.26;	author espie;	state Exp;
branches;
next	1.22;

1.22
date	2000.06.23.16.20.01;	author espie;	state Exp;
branches;
next	1.21;

1.21
date	2000.06.23.16.18.09;	author espie;	state Exp;
branches;
next	1.20;

1.20
date	2000.06.17.14.40.29;	author espie;	state Exp;
branches;
next	1.19;

1.19
date	2000.06.17.14.38.18;	author espie;	state Exp;
branches;
next	1.18;

1.18
date	2000.04.17.23.54.47;	author espie;	state Exp;
branches;
next	1.17;

1.17
date	2000.02.02.13.47.48;	author espie;	state Exp;
branches;
next	1.16;

1.16
date	99.12.18.21.53.32;	author espie;	state Exp;
branches;
next	1.15;

1.15
date	99.11.11.11.47.27;	author espie;	state Exp;
branches;
next	1.14;

1.14
date	99.11.11.11.33.02;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	98.12.05.00.06.28;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	98.06.29.19.57.10;	author art;	state Exp;
branches;
next	1.11;

1.11
date	98.02.22.19.57.33;	author mickey;	state Exp;
branches;
next	1.10;

1.10
date	97.07.25.21.05.34;	author mickey;	state Exp;
branches;
next	1.9;

1.9
date	97.04.28.01.52.39;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	97.04.01.07.28.19;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	96.11.30.21.09.00;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	96.09.02.16.04.15;	author briggs;	state Exp;
branches;
next	1.5;

1.5
date	96.03.27.19.32.39;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.02.23.18.32.58;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.02.22.22.24.50;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	95.12.17.13.42.01;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.43;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.43;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.38
log
@Correct $OpenBSD$ stuff
@
text
@#ifndef _MAKE_H_
#define _MAKE_H_

/*	$OpenBSD: make.h,v 1.37 2010/07/19 19:30:37 espie Exp $ */
/*	$NetBSD: make.h,v 1.15 1997/03/10 21:20:00 christos Exp $	*/

/*
 * Copyright (c) 1988, 1989, 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 * Copyright (c) 1989 by Berkeley Softworks
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Adam de Boor.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	from: @@(#)make.h	8.3 (Berkeley) 6/13/95
 */

extern void Make_Update(GNode *);
extern bool Make_Run(Lst);
extern long random_delay;
extern bool no_jobs_left(void);

#endif /* _MAKE_H_ */
@


1.37
log
@two small changes:
- allow variables in SysV modifiers, as requested by matthieu@@
(since recursive variables are an extension, this just extends the
extension)
- variation on :Q  called :QL (quote list), which does quote every character
EXCEPT for whitespace. e.g.,

toto:
	@@for i in ${VAR:QL} ...
@
text
@d4 1
a4 2
/*	$OpenPackages$ */
/*	$OpenBSD$ */
@


1.36
log
@I was sure I had committed this already, grrrr.
Anyways, switch to a growable array for job to do.
Allows us to randomize it.
fix manpage.
do not add delay if just one job to run.
@
text
@@


1.35
log
@debug scaffolding: allows the insertion of a random delay before firing up
jobs in parallel mode.
@
text
@d47 1
@


1.34
log
@remove prototypes that now live in engine.h, adjust suff.c accordingly
@
text
@d5 1
a5 1
/*	$OpenBSD: make.h,v 1.33 2003/06/03 02:56:12 millert Exp $ */
d46 1
@


1.33
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d5 1
a5 1
/*	$OpenBSD: make.h,v 1.32 2001/05/23 12:34:46 espie Exp $ */
a43 3
extern void Make_TimeStamp(GNode *, GNode *);
extern bool Make_OODate(GNode *);
extern void Make_HandleUse(GNode *, GNode *);
a44 1
extern void Make_DoAllVar(GNode *);
@


1.32
log
@Mostly clean-up:
- cut up those huge include files into separate interfaces for all modules.
Put the interface documentation there, and not with the implementation.
- light-weight includes for needed concrete types (lst_t.h, timestamp_t.h).
- cut out some more logically separate parts: cmd_exec, varname, parsevar,
timestamp.
- put all error handling functions together, so that we will be able to
clean them up.
- more systematic naming: functioni  to handle interval, function to handle
string.
- put the init/end code apart to minimize coupling.
- kill weird types like ReturnStatus and Boolean. Use standard bool (with a
fallback for non-iso systems)
- better interface documentation for lots of subsystems.

As a result, make compilation goes somewhat faster (5%, even considering
the largish BSD copyrights to read). The corresponding preprocessed
source goes down from 1,5M to 1M.

A few minor code changes as well: Parse_DoVar is no longer destructive.
Parse_IsVar functionality is folded into Parse_DoVar (as it knows what an
assignment is), a few more interval handling functions. Avoid calling
XXX_End when they do nothing, just #define XXX_End   to nothing.

Parse_DoVar is slightly more general: it will handle compound assignments
as long as they make sense, e.g., VAR +!= cmd
will work.  As a side effect, VAR++=value now triggers an error
(two + in assignment).
- this stuff doesn't occur in portable Makefiles.
- writing VAR++ = value or VAR+ +=value  disambiguates it.
- this is a good thing, it uncovered a bug in bsd.port.mk.

Tested by naddy@@. Okayed millert@@. I'll handle the fallback if there is
any. This went through a full make build anyways, including isakmpd
(without mickey's custom binutils, as he didn't see fit to share it with me).
@
text
@d5 1
a5 1
/*	$OpenBSD: make.h,v 1.13 1998/12/05 00:06:28 espie Exp $ */
d25 1
a25 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.31
log
@Synch with my current work.
Numerous changes:
- generate can build several tables
- style cleanup
- statistics code
- use variable names throughout (struct Name)
- recursive variables everywhere
- faster parser (pass buffer along instead of allocating multiple copies)
- correct parser. Handles comments everywhere, and ; correctly
- more string intervals
- simplified dir.c, less recursion.
- extended for loops
- sinclude()
- finished removing extra junk from Lst_*
- handles ${@@D} and friends in a simpler way
- cleaned up and modular VarModifiers handling.
- recognizes some gnu Makefile usages and errors out about them.

Additionally, some extra functionality is defined by FEATURES. The set of
functionalities is currently hardcoded to OpenBSD defaults, but this may
include support for some NetBSD extensions, like ODE modifiers.

Backed by miod@@ and millert@@, who finally got sick of my endless patches...
@
text
@d1 3
d48 6
a53 413
/*-
 * make.h --
 *	The global definitions for pmake
 */

#ifndef _MAKE_H_
#define _MAKE_H_

#include <sys/types.h>
#include <sys/param.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>

#ifdef __GNUC__
# define UNUSED	__attribute__((__unused__))
# define HAS_INLINES
# define INLINE  __inline__
#else
# define UNUSED
#endif

#ifdef HAS_INLINES
# ifndef INLINE
#  define INLINE	inline
# endif
#endif

#if !defined(MAKE_BOOTSTRAP) && defined(BSD4_4)
# include <sys/cdefs.h>
#endif

#ifdef __STDC__
#include <stdlib.h>
#include <unistd.h>
#endif
#include "sprite.h"
#include "lst.h"
#include "config.h"
#include "buf.h"

#ifdef USE_TIMESPEC
#include <sys/time.h>
typedef struct timespec TIMESTAMP;
#define set_out_of_date(t)	(t).tv_sec = INT_MIN, (t).tv_nsec = 0
#define is_out_of_date(t)	((t).tv_sec == INT_MIN && (t).tv_nsec == 0)
#define grab_stat(s, t) \
do { \
	(t).tv_sec = (s).st_mtime; \
	(t).tv_nsec = (s).st_mtimensec; \
	if (is_out_of_date(t)) \
		(t).tv_nsec++; \
} while (0)
#define is_before(t1, t2)	timespeccmp(&(t1), &(t2), <)
#define grab_date(d, t) \
do { \
	(t).tv_sec = d; \
	(t).tv_nsec = 0; \
	if (is_out_of_date(t)) \
		(t).tv_nsec++; \
} while (0)
#define grab(n) \
do { \
	struct timeval tv; \
	gettimeofday(&tv, NULL); \
	TIMEVAL_TO_TIMESPEC(&(tv), &n); \
} while (0)
#define timestamp2time_t(t)	((t).tv_sec)
#else
typedef time_t TIMESTAMP;
#define is_out_of_date(t)	((t) == INT_MIN)
#define set_out_of_date(t)	(t) = INT_MIN
#define grab_stat(s, t) \
do { \
	(t) = (s).st_mtime; \
	if (is_out_of_date(t)) \
		(t)++; \
} while (0)
#define is_before(t1, t2)	((t1) < (t2))
#define grab_date(d, t) \
do { \
	(t) = d; \
	if (is_out_of_date(t)) \
		(t)++; \
} while (0)
#define grab(n) time(&(n))
#define timestamp2time_t(t)	(t)
#endif

/* local contexts are real small */
#define TARGET_INDEX	0
#define PREFIX_INDEX	1
#define ARCHIVE_INDEX	2
#define MEMBER_INDEX	3
#define OODATE_INDEX	4
#define ALLSRC_INDEX	5
#define IMPSRC_INDEX	6

#define LOCAL_SIZE	7

/* extended indices for System V stuff */
#define FTARGET_INDEX	7
#define DTARGET_INDEX	8
#define FPREFIX_INDEX	9
#define DPREFIX_INDEX	10
#define FARCHIVE_INDEX	11
#define DARCHIVE_INDEX	12
#define FMEMBER_INDEX	13
#define DMEMBER_INDEX	14

#define EXTENDED2SIMPLE(i)	(((i)-LOCAL_SIZE)/2)
#define IS_EXTENDED_F(i)	((i)%2 == 1)

struct Var_;

/* SymTable is private to var.c, but is declared here to allow for
   local declaration of context tables
 */
typedef struct {
	struct Var_ *locals[LOCAL_SIZE];
} SymTable;

typedef struct ohash GSymT;

/*-
 * The structure for an individual graph node. Each node has several
 * pieces of data associated with it.
 *	1) the name of the target it describes
 *	2) the location of the target file in the file system.
 *	3) the type of operator used to define its sources (qv. parse.c)
 *	4) whether it is involved in this invocation of make
 *	5) whether the target has been remade
 *	6) whether any of its children has been remade
 *	7) the number of its children that are, as yet, unmade
 *	8) its modification time
 *	9) the modification time of its youngest child (qv. make.c)
 *	10) a list of nodes for which this is a source
 *	11) a list of nodes on which this depends
 *	12) a list of nodes that depend on this, as gleaned from the
 *	    transformation rules.
 *	13) a list of nodes of the same name created by the :: operator
 *	14) a list of nodes that must be made (if they're made) before
 *	    this node can be, but that do no enter into the datedness of
 *	    this node.
 *	15) a list of nodes that must be made (if they're made) after
 *	    this node is, but that do not depend on this node, in the
 *	    normal sense.
 *	16) a Lst of ``local'' variables that are specific to this target
 *	   and this target only (qv. var.c [$@@ $< $?, etc.])
 *	17) a Lst of strings that are commands to be given to a shell
 *	   to create this target.
 */
typedef struct GNode_ {
    char	    *path;	/* The full pathname of the file */
    int 	    type;	/* Its type (see the OP flags, below) */
    int 	    order;	/* Its wait weight */

    Boolean	    make;	/* TRUE if this target needs to be remade */
    enum {
	UNMADE, BEINGMADE, MADE, UPTODATE, ERROR, ABORTED,
	CYCLE, ENDCYCLE
    }		    made;	/* Set to reflect the state of processing
				 * on this node:
				 *  UNMADE - Not examined yet
				 *  BEINGMADE - Target is already being made.
				 *	Indicates a cycle in the graph. (compat
				 *	mode only)
				 *  MADE - Was out-of-date and has been made
				 *  UPTODATE - Was already up-to-date
				 *  ERROR - An error occured while it was being
				 *	made (used only in compat mode)
				 *  ABORTED - The target was aborted due to
				 *	an error making an inferior (compat).
				 *  CYCLE - Marked as potentially being part of
				 *	a graph cycle. If we come back to a
				 *	node marked this way, it is printed
				 *	and 'made' is changed to ENDCYCLE.
				 *  ENDCYCLE - the cycle has been completely
				 *	printed. Go back and unmark all its
				 *	members.
				 */
    Boolean	    childMade;	/* TRUE if one of this target's children was
				 * made */
    int 	    unmade;	/* The number of unmade children */

    TIMESTAMP	    mtime;	/* Its modification time */
    TIMESTAMP	    cmtime;	/* The modification time of its youngest
				 * child */

    LIST	    iParents;	/* Links to parents for which this is an
				 * implied source, if any */
    LIST	    cohorts;	/* Other nodes for the :: operator */
    LIST	    parents;	/* Nodes that depend on this one */
    LIST	    children;	/* Nodes on which this one depends */
    LIST	    successors; /* Nodes that must be made after this one */
    LIST	    preds;	/* Nodes that must be made before this one */

    SymTable	    context;	/* The local variables */
    unsigned long   lineno;	/* First line number of commands.  */
    const char *    fname;	/* File name of commands.  */
    LIST	    commands;	/* Creation commands */
    LstNode	    current;	/* Current command, for job */

    struct Suff_    *suffix;	/* Suffix for the node (determined by
				 * Suff_FindDeps and opaque to everyone
				 * but the Suff module) */
    char      name[1];		/* The target's name */
} GNode;

/*
 * The OP_ constants are used when parsing a dependency line as a way of
 * communicating to other parts of the program the way in which a target
 * should be made. These constants are bitwise-OR'ed together and
 * placed in the 'type' field of each node. Any node that has
 * a 'type' field which satisfies the OP_NOP function was never never on
 * the lefthand side of an operator, though it may have been on the
 * righthand side...
 */
#define OP_DEPENDS	0x00000001  /* Execution of commands depends on
				     * kids (:) */
#define OP_FORCE	0x00000002  /* Always execute commands (!) */
#define OP_DOUBLEDEP	0x00000004  /* Execution of commands depends on kids
				     * per line (::) */
#define OP_OPMASK	(OP_DEPENDS|OP_FORCE|OP_DOUBLEDEP)

#define OP_OPTIONAL	0x00000008  /* Don't care if the target doesn't
				     * exist and can't be created */
#define OP_USE		0x00000010  /* Use associated commands for parents */
#define OP_EXEC 	0x00000020  /* Target is never out of date, but always
				     * execute commands anyway. Its time
				     * doesn't matter, so it has none...sort
				     * of */
#define OP_IGNORE	0x00000040  /* Ignore errors when creating the node */
#define OP_PRECIOUS	0x00000080  /* Don't remove the target when
				     * interrupted */
#define OP_SILENT	0x00000100  /* Don't echo commands when executed */
#define OP_MAKE 	0x00000200  /* Target is a recurrsive make so its
				     * commands should always be executed when
				     * it is out of date, regardless of the
				     * state of the -n or -t flags */
#define OP_JOIN 	0x00000400  /* Target is out-of-date only if any of its
				     * children was out-of-date */
#define OP_MADE 	0x00000800  /* Assume the node is already made; even if
				     * it really is out of date */
#define OP_INVISIBLE	0x00004000  /* The node is invisible to its parents.
				     * I.e. it doesn't show up in the parents's
				     * local variables. */
#define OP_NOTMAIN	0x00008000  /* The node is exempt from normal 'main
				     * target' processing in parse.c */
#define OP_PHONY	0x00010000  /* Not a file target; run always */
#define OP_NOPATH	0x00020000  /* Don't search for file in the path */
/* Attributes applied by PMake */
#define OP_TRANSFORM	0x80000000  /* The node is a transformation rule */
#define OP_MEMBER	0x40000000  /* Target is a member of an archive */
#define OP_LIB		0x20000000  /* Target is a library */
#define OP_ARCHV	0x10000000  /* Target is an archive construct */
#define OP_HAS_COMMANDS 0x08000000  /* Target has all the commands it should.
				     * Used when parsing to catch multiple
				     * commands for a target */
#define OP_SAVE_CMDS	0x04000000  /* Saving commands on .END (Compat) */
#define OP_DEPS_FOUND	0x02000000  /* Already processed by Suff_FindDeps */

/*
 * OP_NOP will return TRUE if the node with the given type was not the
 * object of a dependency operator
 */
#define OP_NOP(t)	(((t) & OP_OPMASK) == 0x00000000)

#define OP_NOTARGET (OP_NOTMAIN|OP_USE|OP_EXEC|OP_TRANSFORM)

/*
 * The TARG_ constants are used when calling the Targ_FindNode functions targ.c.
 * They simply tell the function what to do if the desired node is not found.
 * If the TARG_CREATE constant is given, a new, empty node will be created
 * for the target, placed in the table of all targets and its address returned.
 * If TARG_NOCREATE is given, a NULL pointer will be returned.
 */
#define TARG_CREATE	0x01	  /* create node if not found */
#define TARG_NOCREATE	0x00	  /* don't create it */

/*
 * There are several places where expandable buffers are used (parse.c and
 * var.c). This constant is merely the starting point for those buffers. If
 * lines tend to be much shorter than this, it would be best to reduce BSIZE.
 * If longer, it should be increased. Reducing it will cause more copying to
 * be done for longer lines, but will save space for shorter ones. In any
 * case, it ought to be a power of two simply because most storage allocation
 * schemes allocate in powers of two.
 */
#define MAKE_BSIZE		256	/* starting size for expandable buffers */

/*
 * Error levels for parsing. PARSE_FATAL means the process cannot continue
 * once the makefile has been parsed. PARSE_WARNING means it can. Passed
 * as the first argument to Parse_Error.
 */
#define PARSE_WARNING	2
#define PARSE_FATAL	1

/*
 * Values returned by Cond_Eval.
 */
#define COND_PARSE	0	/* Parse the next lines */
#define COND_SKIP	1	/* Skip the next lines */
#define COND_INVALID	2	/* Not a conditional statement */

/*
 * Definitions for the "local" variables. Used only for clarity.
 */
#define TARGET		  "@@"	/* Target of dependency */
#define OODATE		  "?"	/* All out-of-date sources */
#define ALLSRC		  ">"	/* All sources */
#define IMPSRC		  "<"	/* Source implied by transformation */
#define PREFIX		  "*"	/* Common prefix */
#define ARCHIVE 	  "!"	/* Archive in "archive(member)" syntax */
#define MEMBER		  "%"	/* Member in "archive(member)" syntax */
#define LONGTARGET	".TARGET"
#define LONGOODATE	".OODATE"
#define LONGALLSRC	".ALLSRC"
#define LONGIMPSRC	".IMPSRC"
#define LONGPREFIX	".PREFIX"
#define LONGARCHIVE	".ARCHIVE"
#define LONGMEMBER	".MEMBER"

/* System V   extended variables (get directory/file part) */
#define FTARGET		"@@F"
#define DTARGET		"@@D"
#define FIMPSRC		"<F"
#define DIMPSRC		"<D"
#define FPREFIX		"*F"
#define DPREFIX		"*D"
#define FARCHIVE	"!F"
#define DARCHIVE	"!D"
#define FMEMBER		"%F"
#define DMEMBER		"%D"

/*
 * Global Variables
 */
extern LIST	create; 	/* The list of target names specified on the
				 * command line. used to resolve #if
				 * make(...) statements */
extern LIST	dirSearchPath;	/* The list of directories to search when
				 * looking for targets */

extern Boolean	compatMake;	/* True if we are make compatible */
extern Boolean	ignoreErrors;	/* True if should ignore all errors */
extern Boolean	beSilent;	/* True if should print no commands */
extern Boolean	noExecute;	/* True if should execute nothing */
extern Boolean	allPrecious;	/* True if every target is precious */
extern Boolean	keepgoing;	/* True if should continue on unaffected
				 * portions of the graph when have an error
				 * in one portion */
extern Boolean	touchFlag;	/* TRUE if targets should just be 'touched'
				 * if out of date. Set by the -t flag */
extern Boolean	usePipes;	/* TRUE if should capture the output of
				 * subshells by means of pipes. Otherwise it
				 * is routed to temporary files from which it
				 * is retrieved when the shell exits */
extern Boolean	queryFlag;	/* TRUE if we aren't supposed to really make
				 * anything, just see if the targets are out-
				 * of-date */

extern Boolean	checkEnvFirst;	/* TRUE if environment should be searched for
				 * variables before the global context */

extern GNode	*DEFAULT;	/* .DEFAULT rule */

extern GSymT	*VAR_GLOBAL;	/* Variables defined in a global context, e.g
				 * in the Makefile itself */
extern GSymT	*VAR_CMD;	/* Variables defined on the command line */

extern char	var_Error[];	/* Value returned by Var_Parse when an error
				 * is encountered. It actually points to
				 * an empty string, so naive callers needn't
				 * worry about it. */

extern TIMESTAMP now;		/* The time at the start of this whole
				 * process */

extern Boolean	oldVars;	/* Do old-style variable substitution */

extern LIST	sysIncPath;	/* The system include path. */

/*
 * debug control:
 *	There is one bit per module.  It is up to the module what debug
 *	information to print.
 */
extern int debug;
#define DEBUG_ARCH	0x0001
#define DEBUG_COND	0x0002
#define DEBUG_DIR	0x0004
#define DEBUG_GRAPH1	0x0008
#define DEBUG_GRAPH2	0x0010
#define DEBUG_JOB	0x0020
#define DEBUG_MAKE	0x0040
#define DEBUG_SUFF	0x0080
#define DEBUG_TARG	0x0100
#define DEBUG_VAR	0x0200
#define DEBUG_FOR	0x0400
#define DEBUG_LOUD	0x0800

#ifdef __STDC__
#define CONCAT(a,b)	a##b
#else
#define I(a)		a
#define CONCAT(a,b)	I(a)b
#endif /* __STDC__ */

#define DEBUG(module)	(debug & CONCAT(DEBUG_,module))

#include "extern.h"
@


1.30
log
@Use the ohash_* that's now in libc.
@
text
@d1 2
a2 1
/*	$OpenBSD: make.h,v 1.29 2000/11/24 14:36:35 espie Exp $	*/
d60 3
a62 1
#define UNUSED	__attribute__((unused))
d64 7
a70 1
#define UNUSED
a74 16
#else
# ifndef __P
#  if defined(__STDC__) || defined(__cplusplus)
#   define	__P(protos)	protos		/* full-blown ANSI C */
#  else
#   define	__P(protos)	()		/* traditional C preprocessor */
#  endif
# endif
# ifndef __STDC__
#  ifndef const
#   define const
#  endif
#  ifndef volatile
#   define volatile
#  endif
# endif
d117 1
a117 1
#define grab_stat(s, t)	\
d134 1
a134 1
/* Variables that are kept in local GNodes.  */
d136 6
a141 6
#define OODATE_INDEX	1
#define ALLSRC_INDEX	2
#define IMPSRC_INDEX	3
#define PREFIX_INDEX	4
#define ARCHIVE_INDEX   5
#define MEMBER_INDEX    6
d145 15
d168 1
d198 3
a200 3
    char    	    *path;     	/* The full pathname of the file */
    int             type;      	/* Its type (see the OP flags, below) */
    int		    order;	/* Its wait weight */
d202 1
a202 1
    Boolean         make;      	/* TRUE if this target needs to be remade */
d206 1
a206 1
    }	    	    made;    	/* Set to reflect the state of processing
d210 2
a211 2
				 *  	Indicates a cycle in the graph. (compat
				 *  	mode only)
d215 1
a215 1
				 *  	made (used only in compat mode)
d217 1
a217 1
				 *  	an error making an inferior (compat).
d219 3
a221 3
				 *  	a graph cycle. If we come back to a
				 *  	node marked this way, it is printed
				 *  	and 'made' is changed to ENDCYCLE.
d223 2
a224 2
				 *  	printed. Go back and unmark all its
				 *  	members.
d226 1
a226 1
    Boolean 	    childMade; 	/* TRUE if one of this target's children was
d228 1
a228 1
    int             unmade;    	/* The number of unmade children */
d230 2
a231 2
    TIMESTAMP       mtime;     	/* Its modification time */
    TIMESTAMP 	    cmtime;    	/* The modification time of its youngest
d234 1
a234 1
    LIST     	    iParents;  	/* Links to parents for which this is an
d236 5
a240 5
    LIST    	    cohorts;  	/* Other nodes for the :: operator */
    LIST            parents;   	/* Nodes that depend on this one */
    LIST            children;  	/* Nodes on which this one depends */
    LIST    	    successors;	/* Nodes that must be made after this one */
    LIST    	    preds;  	/* Nodes that must be made before this one */
d242 1
a242 1
    SymTable        context;   	/* The local variables */
d245 2
a246 1
    LIST            commands;  	/* Creation commands */
d251 1
a251 1
    char      name[1];     	/* The target's name */
a254 4
 * Manifest constants
 */

/*
d273 1
a273 1
#define OP_EXEC	  	0x00000020  /* Target is never out of date, but always
d281 1
a281 1
#define OP_MAKE		0x00000200  /* Target is a recurrsive make so its
d287 1
a287 1
#define	OP_MADE		0x00000800  /* Assume the node is already made; even if
d298 4
a301 4
#define OP_MEMBER 	0x40000000  /* Target is a member of an archive */
#define OP_LIB	  	0x20000000  /* Target is a library */
#define OP_ARCHV  	0x10000000  /* Target is an archive construct */
#define OP_HAS_COMMANDS	0x08000000  /* Target has all the commands it should.
d316 4
a319 5
 * The TARG_ constants are used when calling the Targ_FindNode function in 
 * targ.c. They simply tell the function what to do if the desired node(s) 
 * is (are) not found. 
 * If the TARG_CREATE constant is given, a new, empty node will be created 
 * for the target, placed in the table of all targets and its address returned. 
a336 13
 * These constants are all used by the Str_Concat function to decide how the
 * final string should look. If STR_ADDSPACE is given, a space will be
 * placed between the two strings. If STR_ADDSLASH is given, a '/' will
 * be used instead of a space. If neither is given, no intervening characters
 * will be placed between the two strings in the final output. If the
 * STR_DOFREE bit is set, the two input strings will be freed before
 * Str_Concat returns.
 */
#define STR_ADDSPACE	0x01	/* add a space when Str_Concat'ing */
#define STR_DOFREE	0x02	/* free source strings after concatenation */
#define STR_ADDSLASH	0x04	/* add a slash when Str_Concat'ing */

/*
d347 3
a349 3
#define COND_PARSE	0   	/* Parse the next lines */
#define COND_SKIP 	1   	/* Skip the next lines */
#define COND_INVALID	2   	/* Not a conditional statement */
d354 7
a360 7
#define TARGET	  	  "@@" 	/* Target of dependency */
#define OODATE	  	  "?" 	/* All out-of-date sources */
#define ALLSRC	  	  ">" 	/* All sources */
#define IMPSRC	  	  "<" 	/* Source implied by transformation */
#define PREFIX	  	  "*" 	/* Common prefix */
#define ARCHIVE	  	  "!" 	/* Archive in "archive(member)" syntax */
#define MEMBER	  	  "%" 	/* Member in "archive(member)" syntax */
d369 11
a379 7

#define FTARGET           "@@F"  /* file part of TARGET */
#define DTARGET           "@@D"  /* directory part of TARGET */
#define FIMPSRC           "<F"  /* file part of IMPSRC */
#define DIMPSRC           "<D"  /* directory part of IMPSRC */
#define FPREFIX           "*F"  /* file part of PREFIX */
#define DPREFIX           "*D"  /* directory part of PREFIX */
d384 1
a384 1
extern LIST  	create;	    	/* The list of target names specified on the
d387 1
a387 1
extern LIST    	dirSearchPath; 	/* The list of directories to search when
d391 5
a395 5
extern Boolean	ignoreErrors;  	/* True if should ignore all errors */
extern Boolean  beSilent;    	/* True if should print no commands */
extern Boolean  noExecute;    	/* True if should execute nothing */
extern Boolean  allPrecious;   	/* True if every target is precious */
extern Boolean  keepgoing;    	/* True if should continue on unaffected
d398 1
a398 1
extern Boolean 	touchFlag;    	/* TRUE if targets should just be 'touched'
d400 1
a400 1
extern Boolean  usePipes;    	/* TRUE if should capture the output of
d404 1
a404 1
extern Boolean 	queryFlag;    	/* TRUE if we aren't supposed to really make
d411 1
a411 1
extern GNode    *DEFAULT;    	/* .DEFAULT rule */
d413 1
a413 1
extern GSymT	*VAR_GLOBAL;   	/* Variables defined in a global context, e.g
d415 3
a417 2
extern GSymT	*VAR_CMD;    	/* Variables defined on the command line */
extern char    	var_Error[];   	/* Value returned by Var_Parse when an error
d422 1
a422 1
extern TIMESTAMP now;	    	/* The time at the start of this whole
d425 1
a425 1
extern Boolean	oldVars;    	/* Do old-style variable substitution */
d435 10
a444 10
#define	DEBUG_ARCH	0x0001
#define	DEBUG_COND	0x0002
#define	DEBUG_DIR	0x0004
#define	DEBUG_GRAPH1	0x0008
#define	DEBUG_GRAPH2	0x0010
#define	DEBUG_JOB	0x0020
#define	DEBUG_MAKE	0x0040
#define	DEBUG_SUFF	0x0080
#define	DEBUG_TARG	0x0100
#define	DEBUG_VAR	0x0200
d446 1
d451 1
a451 1
#define I(a)	  	a
d455 1
a455 1
#define	DEBUG(module)	(debug & CONCAT(DEBUG_,module))
@


1.29
log
@Change the time stamp interface to use an abstract datatype.
Define two possible interfaces: the classic one,
and the new one (used where available) that depends on timespec.

Better granularity, make is now able to distinguish between files that
were built during the same second.
@
text
@d1 1
a1 1
/*	$OpenBSD: make.h,v 1.28 2000/11/24 14:27:19 espie Exp $	*/
d159 1
a159 1
typedef struct hash GSymT;
@


1.28
log
@Clean-ups:
* Buf_Destroy can be a macro
* X_ instead of _X for struct names, to avoid infringing on the system's
namespace.
* better wildcard detection heuristics
* fix #ifdef CLEANUP code
* a few comments
@
text
@d1 1
a1 1
/*	$OpenBSD: make.h,v 1.27 2000/09/14 13:52:42 espie Exp $	*/
d93 28
d139 1
a139 2

#define OUT_OF_DATE INT_MIN
d221 2
a222 2
    time_t          mtime;     	/* Its modification time */
    time_t     	    cmtime;    	/* The modification time of its youngest
d425 1
a425 1
extern time_t 	now;	    	/* The time at the start of this whole
@


1.27
log
@Introduce a few macros to handle timestamps in an abstract way.

Replace the time stamp hash in dir.c with an open hashing structure.

In doing so, remove some nasty casts, simplify code a bit:
Dir_MTime can return a modification time, since make does not make
a distinction between out-of-date and non-existent files.
@
text
@d1 1
a1 1
/*	$OpenBSD: make.h,v 1.26 2000/09/14 13:40:03 espie Exp $	*/
d211 1
a211 1
    struct _Suff    *suffix;	/* Suffix for the node (determined by
@


1.26
log
@Use the new hash scheme to store the target nodes.
Scrap the list of all targets: it only slows make down.
The only visible difference is that the list of all targets is not
shown in order when debugging.
@
text
@d1 1
a1 1
/*	$OpenBSD: make.h,v 1.25 2000/09/14 13:32:07 espie Exp $	*/
d92 19
@


1.25
log
@Some systematic clean-up.
- UNUSED macro that expands to __attribute__((unused)) for gcc
- move rcsid around so that they can be tagged UNUSED.
- activate -Wunused.
- use UNUSED instead of kludgy junk for function arguments.
- add extern to all extern prototypes.
- update comments in lst.h.
- clean up var.c a little bit, constifying arguments, updating comments...
@
text
@d1 1
a1 1
/*	$OpenBSD: make.h,v 1.24 2000/06/23 16:27:29 espie Exp $	*/
d142 1
a142 2
typedef struct GNode {
    char            *name;     	/* The target's name */
d195 1
@


1.24
log
@This is the speed-up patch, which doubles make speed (almost).

Use the open hashing functions for global contexts instead of List in
var.c.

All the preliminary work to trim down local contexts means that we don't
suffer from the heavy initialization work that a hash table entails.

There is some make kludgery to:
- build the hashing functions as a library,
- recreate hashconsts.h, even if make depend was not invoked.

One point of the hashing scheme written was to separate the computation
of the hash function, and the hash lookup itself. This is very convenient
for make, because of those pesky special variables. hashconsts.h is there
to pre-hash the correct values, which replaces a few expensive string
comparisons with quick hash value comparisons, followed by one expensive
string comparison. The modulus MAGICSLOTS chosen in the Makefile is
ad-hoc: it is small enough to write a small switch without collision,
and will need changing if the hash function changes...

The function quick_lookup is the most important:
it either returns an index, for a local variable, or it does compute a
hashing value, and returns -1.

Another somewhat controversial decision is the use of string intervals.
This avoids either copying a string, or twiddling with a byte for cases
such as ${VAR}.

Finally, the variable name is stored within the variable itself. Since
a given variable name never changes, this makes sense. All that was needed
was a hash library with support for this.  Note that the hashing table
holds only a variable pointer AND the corresponding hashing value, WITHOUT
a modulo hashtablesize. Two reasons:
- hash resizes can be done faster, without having to recompute hashing values.
- locality of access. The hash table fits into memory without problem. Once
a candidate slot is found, we check the complete hashing value. Probability
of a collision is very small (32 bits...). So bringing up the whole
variable in memory at once is good: the name will almost always match, in
which case we want the variable value as well, so it makes sense to put
them together.

The ohash functions implement open hashing, as described in Knuth, but with
a variable table size.  Choosing powers of 2 sizes does not yield more
collisions, but it makes the hashing scheme much simpler. The thresholds at
which to expand/shrink the tables seem to work well in practice. The
default sizes were chosen such that the tables hardly ever shrink or expand
anyways (though I've tried with smaller/larger sizes to verify that the
shrinking/expanding worked correctly): larger Makefiles hold roughly
500/600 variables, which fits without trouble into a 1024-sized variable.

Disregard #ifdef STATS_HASH, this is some internal scaffolding I'm using
to measure make performance.

The only known issue with open-hashing is that deletions cannot create
empty slots, but do leave slots marked as `occupied once' so that lookup
works.  We use a well-known optimization which records those pseudo-empty
slots while looking up values. If the value is not found, the pseudo-empty
slot is returned to be filled. If the value is found, it is swapped with
the pseudo-empty slot. This is an improvement in both cases, since this
shortens the length of lookup chains, eventually pushing the pseudo-empty
slots to the end.

Reviewed by millert@@ and miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: make.h,v 1.23 2000/06/23 16:23:26 espie Exp $	*/
d57 6
@


1.23
log
@This patch separates local contexts from global contexts for good.
Apart from a few casts, VAR_GLOBAL and friends are separate
data structures, so we use a small array for local variables.

We also junk allVars, since TargFreeGN can release local nodes,
and var.c has explicit lists for its variables already.

Reviewed millert@@ and miod@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: make.h,v 1.22 2000/06/23 16:20:01 espie Exp $	*/
d107 1
a107 1
typedef LIST GSymT;
d317 8
@


1.22
log
@Once those special variable are taken care of, other Var functions can take
the GNode's context directly.  We rename that special Lst to `SymTable *'
in prevision of things to come.

Along the line, we lose the special GNodes affected to VAR_CMD, VAR_GLOBAL,
VAR_ENV, which become simple Lsts... This is not a problem, except when
getting to a context's name for debugging (handled very nicely by
offsetof).

Again, this is a preparatory patch, which does not gain anything except
for cleaning up issues...

Reviewed by millert@@ and miod@@, like the previous patch
@
text
@d1 1
a1 1
/*	$OpenBSD: make.h,v 1.21 2000/06/23 16:18:09 espie Exp $	*/
d97 11
a135 2
typedef LIST SymTable;

d357 1
a357 1
extern SymTable *VAR_GLOBAL;   	/* Variables defined in a global context, e.g
d359 1
a359 1
extern SymTable *VAR_CMD;    	/* Variables defined on the command line */
@


1.21
log
@Start of variable fixes and speed-ups.

This patch may seem a bit non-sensical at first. It simply introduces some
new interface. Specifically, recognizes that some variable names
(.TARGET/$@@, .OODATE/$?, .ALLSRC/$>, .IMPSRC/$<, .PREFIX/$*, .ARCHIVE/$!,
.MEMBER/$%) are `special' (the actual variables which are local to a
target, e.g. GNode).

Currently, The Varq functions (for Varquick access) are only stubs to the
normal functions.

This fixes a very important detail before proceeding to turn variable lists
into hash tables: if every GNode holds a hash table, initialization times
for those will be very costly. But generic GNodes only hold those seven
special variables... which can be stored directly into a small array;
the only general cases are the environment, the command line and
global variables.
@
text
@d1 1
a1 1
/*	$OpenBSD: make.h,v 1.20 2000/06/17 14:40:29 espie Exp $	*/
d125 2
d173 1
a173 1
    LIST            context;   	/* The local variables */
d348 1
a348 1
extern GNode    *VAR_GLOBAL;   	/* Variables defined in a global context, e.g
d350 1
a350 1
extern GNode    *VAR_CMD;    	/* Variables defined on the command line */
@


1.20
log
@A few assorted changes, to remove more dynamic lists.
- in Dir_Expand, path is a misnomer. Use a temp variable instead...
Reformat code for readability.
- Change Parse_MainName/Targ_FindList so that they fill arguments instead
of allocating new lists.
- nuke Targ_FindList(TG_NOCREATE), as this is never used.

- close a small memory hole (forgot to free sysMkPath if CLEANUP).

Reviewed by millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: make.h,v 1.19 2000/06/17 14:38:18 espie Exp $	*/
d89 8
@


1.19
log
@This patch introduces a distinction between
Lst_Init (constructor) and Lst_New (allocation + construction)
Lst_Destroy (destructor) and Lst_Delete (deallocation + destruction),
and uses that to turn most dynamic allocation of lists (Lst pointers)
into static structures (LIST).

Most of this is mundane, except for allGNs in targ.c, where the code must
be checked to verify that Targ_Init is called soon enough.

Lst_New is a temporary addition. All lists will soon be static.

Reviewed by millert@@, like the previous patch.
@
text
@d1 1
a1 1
/*	$OpenBSD: make.h,v 1.18 2000/04/17 23:54:47 espie Exp $	*/
d239 6
a244 6
 * The TARG_ constants are used when calling the Targ_FindNode and
 * Targ_FindList functions in targ.c. They simply tell the functions what to
 * do if the desired node(s) is (are) not found. If the TARG_CREATE constant
 * is given, a new, empty node will be created for the target, placed in the
 * table of all targets and its address returned. If TARG_NOCREATE is given,
 * a NULL pointer will be returned.
@


1.18
log
@Record location in target node as well.
Indicate what went wrong for commands like
	@@exit 1
@
text
@d1 1
a1 1
/*	$OpenBSD: make.h,v 1.17 2000/02/02 13:47:48 espie Exp $	*/
d155 1
a155 1
    Lst     	    iParents;  	/* Links to parents for which this is an
d157 5
a161 5
    Lst	    	    cohorts;  	/* Other nodes for the :: operator */
    Lst             parents;   	/* Nodes that depend on this one */
    Lst             children;  	/* Nodes on which this one depends */
    Lst	    	    successors;	/* Nodes that must be made after this one */
    Lst	    	    preds;  	/* Nodes that must be made before this one */
d163 1
a163 1
    Lst             context;   	/* The local variables */
d166 1
a166 1
    Lst             commands;  	/* Creation commands */
d309 1
a309 1
extern Lst  	create;	    	/* The list of target names specified on the
d312 1
a312 1
extern Lst     	dirSearchPath; 	/* The list of directories to search when
d351 1
a351 1
extern Lst	sysIncPath;	/* The system include path. */
@


1.17
log
@Bug-fix: make should behave sensibly when presented with negative times...

- let *_MTime return booleans, as that's what they're used for, the time_t
is set as a side effect.

- use OUT_OF_DATE for a date starting point, set it at the origin of time.
@
text
@d1 1
a1 1
/*	$OpenBSD: make.h,v 1.16 1999/12/18 21:53:32 espie Exp $	*/
d164 2
@


1.16
log
@NIL, NILGNODE, etc, are only glorified NULL.
Get rid of them.

Get rid of list.h, nothing uses it anyway.
@
text
@d1 1
a1 1
/*	$OpenBSD: make.h,v 1.15 1999/11/11 11:47:27 espie Exp $	*/
d86 2
@


1.15
log
@extern.h is a better name than nonints.h
(cvs file was copied from nonints.h to give a better sense of history).
@
text
@d1 1
a1 1
/*	$OpenBSD: make.h,v 1.14 1999/11/11 11:33:02 espie Exp $	*/
a171 1
#define NILGNODE	((GNode *) NIL)
d240 1
a240 1
 * a NIL pointer will be returned.
@


1.14
log
@Move all prototypes to nonints.h. Comment no longer reflects reality.
@
text
@d1 1
a1 1
/*	$OpenBSD: make.h,v 1.13 1998/12/05 00:06:28 espie Exp $	*/
d377 1
a377 1
#include "nonints.h"
@


1.13
log
@Modifications from netbsd:
- don't interfere with MACHINE/MACHINE_ARCH defines for bootstrap
- type clean-up, time_t, and printing `unknown' ints
- fix TARGET/MEMBER bug in archive rules
- memmove...
- cleaner Error handler.
- reentrant brk_string
- .MAKE env variable
- preliminary scaffolding for .NOPATH

Other improvements:
- efree
- shellneed streamlined
- display Stop in .CURDIR after an error.
- document most features and misfeatures.
- add a few OpenBSD notes to the tutorial.
@
text
@d1 1
a1 1
/*	$OpenBSD: make.h,v 1.11 1998/02/22 19:57:33 mickey Exp $	*/
a376 4
/*
 * Since there are so many, all functions that return non-integer values are
 * extracted by means of a sed script or two and stuck in the file "nonints.h"
 */
a377 7

int Make_TimeStamp __P((GNode *, GNode *));
Boolean Make_OODate __P((GNode *));
int Make_HandleUse __P((GNode *, GNode *));
void Make_Update __P((GNode *));
void Make_DoAllVar __P((GNode *));
Boolean Make_Run __P((Lst));
@


1.12
log
@make the bootstrap compile on modern compilers
@
text
@d149 2
a150 2
    int             mtime;     	/* Its modification time */
    int        	    cmtime;    	/* The modification time of its youngest
d215 1
d232 2
@


1.11
log
@some ansi
@
text
@d1 1
a1 1
/*	$OpenBSD: make.h,v 1.10 1997/07/25 21:05:34 mickey Exp $	*/
d68 7
a74 5
# ifndef const
#  define const
# endif
# ifndef volatile
#  define volatile
@


1.10
log
@#if __STDC__ --> #ifdef __STDC__
@
text
@d1 1
a1 1
/*	$OpenBSD: make.h,v 1.9 1997/04/28 01:52:39 millert Exp $	*/
d122 1
a122 1
	CYCLE, ENDCYCLE,
@


1.9
log
@Back out newer .USE code as it caused problems.  I've done a "make build"
without problems and the problem Theo saw before is gone.
@
text
@d1 1
a1 1
/*	$OpenBSD: make.h,v 1.8 1997/04/01 07:28:19 millert Exp $	*/
d76 1
a76 1
#if __STDC__
@


1.8
log
@Sync with NetBSD (mostly by christos initial substitution/regexp from Der Mouse)

- fix the variable substitution code in make [PR/2748]
      1. change s/a/b/ so that it substitutes the first occurance of the
         pattern on each word, not only the first word.
      2. add flag '1' to the variable substitution so that the substitutions
         get performed only once.

  ***THIS IS AN INCOMPATIBLE CHANGE!***

  Unfortunately there was no way to make things consistent without
  modifying the current behavior. Fortunately none of our Makefiles
  depended on this.

            OLD:

                VAR      = aa1 aa2 aa3 aa4

                S/a/b/   = ba1 aa2 aa3 aa4
                S/a/b/g  = bb1 bb2 bb3 bb4

            NEW:
                VAR      = aa1 aa2 aa3 aa4

                S/a/b/   = ba1 ba2 ba3 ba4
                S/a/b/1  = ba1 aa2 aa3 aa4
                S/a/b/g  = bb1 bb2 bb3 bb4
                S/a/b/1g = bb1 aa2 aa3 aa4
- add regexp variable substitution via 'C/foo/bar/' [PR/2752]
- add variable quoting via the ${VAR:Q} modifier. This is useful when running
  recursive invocations of make(1):

        make VAR=${VAR:Q}

  will always work... (This may prove useful in the kernel builds...) [PR/2981]
- BSD did not traditionally have <sys/cdefs.h>; use BSD4_4 instead and include
  <sys/param.h> to grab it.
- Don't compile the regex code if MAKE_BOOTSTRAP (from gwr)
- Use explicit .c.o rule in Makefile.boot so that the bootstrap process works.
- Use only integral types in procedure arguments. [buf.c buf.h]
- Include <stdlib.h> to get getenv() prototype on SVR4
- if __STDC__ -> ifdef __STDC__ to appease SVR4
- Define const and volatile for non __STDC__
- Implement snprintf() and vsnprintf() for non BSD4_4 systems.
- Make $MACHINE_ARCH settable from the environment.
- Fix .USE directive problems: (reported by cgd)
    1. ${.*} variables did not get expanded in dependencies.
    2. expanded ${.*} variables in .USE dependencies can cause tree
       restructuring; handle it.
    3. in compat mode, expand .USE before evaluating the list of targets,
       instead of doing .USE expansions on demand, because they can cause
       tree restructuring.
- Add a .MADE directive to indicated that the children of a target are
  up-to-date, even when they are not. This is to simulate our current
  make install behavior with proper dependencies.
- Fix problems in the RE substitution error handling.
- Locate all the children of a node marked as MADE.
- Do not compile-in ${MACHINE} (as per NetBSD PR#3386)
- Disable globbing for targets/dependencies when POSIX is defined.
- Fix globbing so that patterns that don't have a matching number of [] or {}
  don't get expanded. (before the [ case got expanded to nothing!) This is
  disabled.
- Make sure that the children of nodes that are marked .MADE, are marked
  UPTODATE and their timestamps are consistent.
- Don't disable wildcards completely; they are used by other Makefiles.
@
text
@d1 1
a1 1
/*	$OpenBSD: make.h,v 1.7 1996/11/30 21:09:00 millert Exp $	*/
a114 1
    char            *uname;    	/* The unexpanded name of a .USE node */
a379 1
Lst Make_ExpandUse __P((Lst));
@


1.7
log
@Sync with NetBSD:
- Merge in FreeBSD and Lite2 changes.
- Fix bug where a non-archive target with a .a suffix would always
  be considered to be out of date, since it does not have a TOC.
- Fix NetBSD PR #2930: declare missing variable.
@
text
@d1 2
a2 2
/*	$OpenBSD: make.h,v 1.6 1996/09/02 16:04:15 briggs Exp $	*/
/*	$NetBSD: make.h,v 1.11 1996/11/06 17:59:17 christos Exp $	*/
d53 1
d57 3
a59 6
#if !defined(MAKE_BOOTSTRAP) && defined(BSD)
#include <sys/cdefs.h>
#else
#ifndef __P
#if defined(__STDC__) || defined(__cplusplus)
#define	__P(protos)	protos		/* full-blown ANSI C */
d61 13
a73 3
#define	__P(protos)	()		/* traditional C preprocessor */
#endif
#endif
d75 1
d115 1
d206 2
d381 1
@


1.6
log
@Sync up with NetBSD:
(christos)
	Fix bug reported by Greg Hudson where leaf (source only) nodes were
	referenced only by their basename and not by their full pathname. This
	breaks when .PATH or MAKEOBJDIR are used. There might be Makefiles
	around that try to work around this bug by prepending ${.CURDIR} to
	the sources, and they should be found and fixed. Also a lot of the gunk
	in suff.c that was attempting to work around the same problem could be
	removed.
(christos)
	- Move -D flags from Makefile to config.h and explain what they do. Add
	  -Wall -Wno-unused to CFLAGS. Add new define SYSVVARSUB to enable SysV
	  style variable substitutions and enable them.
	- Add SunOS style command substitutions via SUNSHCMD
	- Fix core dump with '{variable = value'
(christos)
	Fix bug where make will always exit with 0, even when one or more
	parallel jobs failed. (Only affects parallel make code)
(christos)
	Protect __P from being multiply defined (for systems that already
	define it)
(christos) Add strdup() since ultrix is missing it.
	From Larry Schwimmer <rosebud@@cyclone.Stanford.EDU>
(christos) Add estrdup(), a checked version of strdup and use it.
(christos) Recognize SVR4 style long filename entries in archives.
(thorpej) Tidy up some RCS ids a bit.
@
text
@d1 2
a2 2
/*	$OpenBSD: make.h,v 1.5 1996/03/27 19:32:39 niklas Exp $	*/
/*	$NetBSD: make.h,v 1.10 1996/08/13 16:39:30 christos Exp $	*/
d41 1
a41 1
 *	@@(#)make.h	8.3 (Berkeley) 6/13/95
d63 1
a63 1
#define	__P(protos)	()		/* traditional C preprocessor */    
d102 1
a102 1
 *	   to create this target. 
d159 1
a159 1
 * Manifest constants 
d170 1
a170 1
 * righthand side... 
d225 1
a225 1
 * a NIL pointer will be returned. 
d237 1
a237 1
 * schemes allocate in powers of two. 
d248 1
a248 1
 * Str_Concat returns. 
d288 1
a288 1
 * Global Variables 
@


1.5
log
@From NetBSD: merge of 960317
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: make.h,v 1.9 1996/03/06 00:15:21 christos Exp $	*/
d59 1
d64 1
@


1.4
log
@Implement an -m option used for replacing /usr/share/mk with a
custom search path, like $DESTDIR/usr/share/mk
@
text
@d1 2
a2 1
/*	$NetBSD: make.h,v 1.8 1996/02/04 22:20:53 christos Exp $	*/
@


1.3
log
@From NetBSD:
Support SVR4 style archives.
Fix pr/1421 (from Matthew Green) and pr/1997 (from Jeff Thieleke).
In ParseDoInclude(), make a temporary copy of the current file name
while searching for ""-type include files, since the current file name
might not be a writeable string.
@
text
@d329 2
@


1.2
log
@from christos:
- Added .WAIT to synchronize between sources like other pmake variants.
- Updated documentation to include .ORDER .PARALLEL .NO_PARALLEL .NONPARALLEL
@
text
@d1 1
a1 1
/*	$NetBSD: make.h,v 1.7 1995/12/16 05:03:11 christos Exp $	*/
d55 1
a55 1
#ifndef MAKE_BOOTSTRAP
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: make.h,v 1.6 1995/06/14 15:19:43 christos Exp $	*/
d105 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
