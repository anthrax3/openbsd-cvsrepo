head	1.16;
access;
symbols
	OPENBSD_6_2:1.16.0.6
	OPENBSD_6_2_BASE:1.16
	OPENBSD_6_1:1.16.0.4
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.15.0.12
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.8
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.10
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.15.0.6
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.15.0.4
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.14.0.14
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.12
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.10
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.8
	OPENBSD_5_0:1.14.0.6
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.4
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.2
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.12.0.8
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.10
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.6
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.4
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.2
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.8.0.2
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.2.0.12
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.10
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.8
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.6
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.4
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.1.0.12
	OPENBSD_3_5_BASE:1.1
	OPENBSD_3_4:1.1.0.10
	OPENBSD_3_4_BASE:1.1
	OPENBSD_3_3:1.1.0.8
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.6
	OPENBSD_3_2_BASE:1.1
	OPENBSD_3_1:1.1.0.4
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.2
	OPENBSD_3_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.16
date	2016.10.23.14.54.14;	author espie;	state Exp;
branches;
next	1.15;
commitid	wPoE1FuixzUwl6nK;

1.15
date	2013.11.22.15.47.35;	author espie;	state Exp;
branches;
next	1.14;

1.14
date	2010.07.19.19.46.44;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	2010.07.19.19.30.37;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2007.09.17.11.14.38;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2007.09.17.09.44.20;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2007.09.17.09.28.36;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2007.09.16.09.46.14;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2007.07.30.09.51.53;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2007.07.30.09.29.53;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2007.07.24.19.12.59;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2007.07.09.08.07.00;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2007.07.08.17.53.15;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2007.07.08.17.44.20;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2004.04.07.13.11.36;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.23.12.34.48;	author espie;	state Exp;
branches;
next	;


desc
@@


1.16
log
@add !!=
feedback and okay millert@@
@
text
@/*	$OpenBSD: parsevar.c,v 1.15 2013/11/22 15:47:35 espie Exp $	*/
/*	$NetBSD: parse.c,v 1.29 1997/03/10 21:20:04 christos Exp $	*/

/*
 * Copyright (c) 2001 Marc Espie.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE OPENBSD PROJECT AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENBSD
 * PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <ctype.h>
#include <stddef.h>
#include <stdlib.h>
#include <string.h>
#include "config.h"
#include "defines.h"
#include "var.h"
#include "varname.h"
#include "error.h"
#include "cmd_exec.h"
#include "parsevar.h"

static const char *find_op1(const char *);
static const char *find_op2(const char *);
static bool parse_variable_assignment(const char *, int);

static const char *
find_op1(const char *p)
{
	for(;; p++) {
		if (ISSPACE(*p) || *p == '$' || *p == '\0')
			break;
		if (p[strspn(p, "?:!+")] == '=')
			break;
		if (p[0] == ':' && p[1] == 's' && p[2] == 'h')
			break;
	}
	return p;
}

static const char *
find_op2(const char *p)
{
	for(;; p++) {
		if (ISSPACE(*p) || *p == '$' || *p == '\0')
			break;
		if (p[strspn(p, "?:!+")] == '=')
			break;
	}
	return p;
}

static bool
parse_variable_assignment(const char *line, int ctxt)
{
	const char *arg;
	char *res1 = NULL, *res2 = NULL;
#define VAR_INVALID	-1
#define VAR_NORMAL	0
#define VAR_SUBST	1
#define VAR_APPEND	2
#define VAR_SHELL	4
#define VAR_OPT		8
#define VAR_LAZYSHELL	16
#define VAR_SUNSHELL	32
	int type;
	struct Name name;

	arg = VarName_Get(line, &name, NULL, true,
	    FEATURES(FEATURE_SUNSHCMD) ? find_op1 : find_op2);

	while (ISSPACE(*arg))
		arg++;

	type = VAR_NORMAL;

	/* double operators (except for :) are forbidden */
	/* OPT and APPEND don't match */
	/* APPEND and LAZYSHELL can't really work */
	while (*arg != '=') {
		/* Check operator type.  */
		switch (*arg++) {
		case '+':
			if (type & (VAR_OPT|VAR_LAZYSHELL|VAR_APPEND))
				type = VAR_INVALID;
			else
				type |= VAR_APPEND;
			break;

		case '?':
			if (type & (VAR_OPT|VAR_APPEND))
				type = VAR_INVALID;
			else
				type |= VAR_OPT;
			break;

		case ':':
			if (FEATURES(FEATURE_SUNSHCMD) &&
			    strncmp(arg, "sh", 2) == 0) {
				type = VAR_SUNSHELL;
				arg += 2;
				while (*arg != '=' && *arg != '\0')
					arg++;
			} else {
				if (type & VAR_SUBST)
					type = VAR_INVALID;
				else
					type |= VAR_SUBST;
			}
			break;

		case '!':
			if (type & VAR_SHELL) {
				if (type & (VAR_APPEND))
					type = VAR_INVALID;
				else
					type = VAR_LAZYSHELL;
			} else if (type & (VAR_LAZYSHELL|VAR_SUNSHELL))
				type = VAR_INVALID;
			else
				type |= VAR_SHELL;
			break;

		default:
			type = VAR_INVALID;
			break;
		}
		if (type == VAR_INVALID) {
			VarName_Free(&name);
			return false;
		}
	}

	arg++;
	while (ISSPACE(*arg))
		arg++;
	/* If the variable already has a value, we don't do anything.  */
	if ((type & VAR_OPT) && Var_Definedi(name.s, name.e)) {
		VarName_Free(&name);
		return true;
	}
	if (type & (VAR_SHELL|VAR_SUNSHELL)) {
		char *err;

		if (strchr(arg, '$') != NULL) {
			char *sub;
			/* There's a dollar sign in the command, so perform
			 * variable expansion on the whole thing. */
			sub = Var_Subst(arg, NULL, true);
			res1 = Cmd_Exec(sub, &err);
			free(sub);
		} else
			res1 = Cmd_Exec(arg, &err);

		if (err)
			Parse_Error(PARSE_WARNING, err, arg);
		arg = res1;
	}
	if (type & VAR_LAZYSHELL) {
		if (strchr(arg, '$') != NULL) {
			/* There's a dollar sign in the command, so perform
			 * variable expansion on the whole thing. */
			arg = Var_Subst(arg, NULL, true);
		}
	}
	if (type & VAR_SUBST) {
		/*
		 * Allow variables in the old value to be undefined, but leave
		 * their invocation alone -- this is done by forcing
		 * errorIsOkay to be false.
		 * XXX: This can cause recursive variables, but that's not
		 * hard to do, and this allows someone to do something like
		 *
		 *  CFLAGS = $(.INCLUDES)
		 *  CFLAGS := -I.. $(CFLAGS)
		 *
		 * And not get an error.
		 */
		bool   saved = errorIsOkay;

		errorIsOkay = false;
		/* ensure the variable is set to something to avoid `variable
		 * is recursive' errors.  */
		if (!Var_Definedi(name.s, name.e))
			Var_Seti_with_ctxt(name.s, name.e, "", ctxt);

		res2 = Var_Subst(arg, NULL, false);
		errorIsOkay = saved;

		arg = res2;
	}

	if (type & VAR_APPEND)
		Var_Appendi_with_ctxt(name.s, name.e, arg, ctxt);
	else
		Var_Seti_with_ctxt(name.s, name.e, arg, ctxt);
	if (type & VAR_LAZYSHELL)
		Var_Mark(name.s, name.e, VAR_EXEC_LATER);

	VarName_Free(&name);
	free(res2);
	free(res1);
	return true;
}

bool
Parse_As_Var_Assignment(const char *line)
{
	return parse_variable_assignment(line, VAR_GLOBAL);
}

bool
Parse_CmdlineVar(const char *line)
{
	bool result;
	bool saved = errorIsOkay;

	errorIsOkay = false;
	result = parse_variable_assignment(line, VAR_CMD);
	errorIsOkay = saved;
	return result;
}

@


1.15
log
@wrappers for is*/to* that make damn sure their arguments are
cast to unsigned chars.

okay deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: parsevar.c,v 1.14 2010/07/19 19:46:44 espie Exp $	*/
d82 2
d95 3
d102 1
a102 1
			if (type & (VAR_OPT|VAR_APPEND))
d118 1
a118 1
				type = VAR_SHELL;
d131 6
a136 1
			if (type & VAR_SHELL)
d160 1
a160 1
	if (type & VAR_SHELL) {
d177 7
d215 2
@


1.14
log
@Correct $OpenBSD$ stuff
@
text
@d1 1
a1 1
/*	$OpenBSD: parsevar.c,v 1.13 2010/07/19 19:30:37 espie Exp $	*/
d49 1
a49 1
		if (isspace(*p) || *p == '$' || *p == '\0')
d63 1
a63 1
		if (isspace(*p) || *p == '$' || *p == '\0')
d88 1
a88 1
	while (isspace(*arg))
d143 1
a143 1
	while (isspace(*arg))
@


1.13
log
@two small changes:
- allow variables in SysV modifiers, as requested by matthieu@@
(since recursive variables are an extension, this just extends the
extension)
- variation on :Q  called :QL (quote list), which does quote every character
EXCEPT for whitespace. e.g.,

toto:
	@@for i in ${VAR:QL} ...
@
text
@d1 1
a1 2
/*	$OpenPackages$ */
/*	$OpenBSD$	*/
@


1.12
log
@Parse_DoVar -> Parse_As_Var_Assignment
@
text
@d2 1
a2 1
/*	$OpenBSD: parsevar.c,v 1.11 2007/09/17 09:44:20 espie Exp $	*/
@


1.11
log
@zap more spaces at end of line
@
text
@d2 1
a2 1
/*	$OpenBSD: parsevar.c,v 1.10 2007/09/17 09:28:36 espie Exp $	*/
d207 1
a207 1
Parse_DoVar(const char *line)
@


1.10
log
@kill extra spaces at end of line
@
text
@d2 1
a2 1
/*	$OpenBSD: parsevar.c,v 1.9 2007/09/16 09:46:14 espie Exp $	*/
d83 1
a83 1
	int type;	
@


1.9
log
@remove dead code: #define RECHECK is always on
@
text
@d2 1
a2 1
/*	$OpenBSD: parsevar.c,v 1.5 2007/07/09 08:07:00 espie Exp $	*/
d107 1
a107 1
			else 
d112 1
a112 1
			if (FEATURES(FEATURE_SUNSHCMD) && 
d172 2
a173 2
		 * errorIsOkay to be false.  
		 * XXX: This can cause recursive variables, but that's not 
d176 1
a176 1
		 *  CFLAGS = $(.INCLUDES) 
@


1.8
log
@everywhere except in Var_Parse, we always add/append variables to the
VAR_GLOBAL context, so make it the common case: rename the basic functions
to Var_Set_with_ctxt/Var_Append_with_ctxt, define Var_Set and Var_Append
as macros that specify VAR_GLOBAL, and use these.

okay miod@@
@
text
@@


1.7
log
@simplify the handling of assignment operators, by introducing a VAR_INVALID
state and using it, leading to a simpler loop and less code.

okay miod@@
@
text
@d187 1
a187 1
			Var_Seti(name.s, name.e, "", ctxt);
d196 1
a196 1
		Var_Appendi(name.s, name.e, arg, ctxt);
d198 1
a198 1
		Var_Seti(name.s, name.e, arg, ctxt);
@


1.6
log
@reformat to 8 chars tab, zap unneeded comment (no binary change)
@
text
@d77 1
d83 1
a83 1
	int type;	/* Type of assignment */
d94 1
a94 1
	while (*arg != '=' && !isspace(*arg)) {
d98 4
a101 5
			if (type & (VAR_OPT|VAR_APPEND)) {
				VarName_Free(&name);
				return false;
			}
			type |= VAR_APPEND;
d105 4
a108 5
			if (type & (VAR_OPT|VAR_APPEND)) {
				VarName_Free(&name);
				return false;
			}
			type |= VAR_OPT;
d119 4
a122 5
				if (type & VAR_SUBST) {
					VarName_Free(&name);
					return false;
				}
				type |= VAR_SUBST;
d127 4
a130 5
			if (type & VAR_SHELL) {
				VarName_Free(&name);
				return false;
			}
			type |= VAR_SHELL;
d134 4
d143 1
a143 6
	/* Check validity of operator */
	if (*arg++ != '=') {
		VarName_Free(&name);
		return false;
	}

d186 1
a186 1
		if (Var_Valuei(name.s, name.e) == NULL)
@


1.5
log
@repair, sorry about that (obvious typo, duh)
@
text
@d2 1
a2 1
/*	$OpenBSD: parsevar.c,v 1.4 2007/07/08 17:53:15 espie Exp $	*/
d49 9
a57 9
    for(;; p++) {
    	if (isspace(*p) || *p == '$' || *p == '\0')
	    break;
	if (p[strspn(p, "?:!+")] == '=')
	    break;
	if (p[0] == ':' && p[1] == 's' && p[2] == 'h')
	    break;
    }
    return p;
d63 7
a69 7
    for(;; p++) {
    	if (isspace(*p) || *p == '$' || *p == '\0')
	    break;
	if (p[strspn(p, "?:!+")] == '=')
	    break;
    }
    return p;
d73 1
a73 2
parse_variable_assignment(const char *line, 
    int ctxt) 			/* Context in which to do the assignment */
d75 2
a76 2
    const char	*arg;
    char	*res1 = NULL, *res2 = NULL;
d82 2
a83 2
    int		    type;	/* Type of assignment */
    struct Name	    name;
d85 2
a86 2
    arg = VarName_Get(line, &name, NULL, true,
	FEATURES(FEATURE_SUNSHCMD) ? find_op1 : find_op2);
d88 2
a89 2
    while (isspace(*arg))
    	arg++;
d91 48
a138 31
    type = VAR_NORMAL;

    while (*arg != '=' && !isspace(*arg)) {
	/* Check operator type.  */
	switch (*arg++) {
	case '+':
	    if (type & (VAR_OPT|VAR_APPEND)) {
	    	VarName_Free(&name);
		return false;
	    }
	    type |= VAR_APPEND;
	    break;

	case '?':
	    if (type & (VAR_OPT|VAR_APPEND)) {
	    	VarName_Free(&name);
		return false;
	    }
	    type |= VAR_OPT;
	    break;

	case ':':
	    if (FEATURES(FEATURE_SUNSHCMD) && strncmp(arg, "sh", 2) == 0) {
		type = VAR_SHELL;
		arg += 2;
		while (*arg != '=' && *arg != '\0')
			arg++;
	    } else {
	    	if (type & VAR_SUBST) {
		    VarName_Free(&name);
		    return false;
d140 5
a144 7
		type |= VAR_SUBST;
	    }
	    break;

	case '!':
	    if (type & VAR_SHELL) {
	    	VarName_Free(&name);
a145 7
	    }
	    type |= VAR_SHELL;
	    break;

	default:
	    VarName_Free(&name);
	    return false;
a146 1
    }
d148 55
a202 5
    /* Check validity of operator */
    if (*arg++ != '=') {
	VarName_Free(&name);
	return false;
    }
a203 4
    while (isspace(*arg))
    	arg++;
    /* If the variable already has a value, we don't do anything.  */
    if ((type & VAR_OPT) && Var_Definedi(name.s, name.e)) {
d205 2
a207 53
    }
    if (type & VAR_SHELL) {
	char *err;

	if (strchr(arg, '$') != NULL) {
	    char *sub;
	    /* There's a dollar sign in the command, so perform variable
	     * expansion on the whole thing. */
	    sub = Var_Subst(arg, NULL, true);
	    res1 = Cmd_Exec(sub, &err);
	    free(sub);
	} else
	    res1 = Cmd_Exec(arg, &err);

	if (err)
	    Parse_Error(PARSE_WARNING, err, arg);
	arg = res1;
    }
    if (type & VAR_SUBST) {
	/*
	 * Allow variables in the old value to be undefined, but leave their
	 * invocation alone -- this is done by forcing errorIsOkay to be false.
	 * XXX: This can cause recursive variables, but that's not hard to do,
	 * and this allows someone to do something like
	 *
	 *  CFLAGS = $(.INCLUDES)
	 *  CFLAGS := -I.. $(CFLAGS)
	 *
	 * And not get an error.
	 */
	bool   saved = errorIsOkay;

	errorIsOkay = false;
	/* ensure the variable is set to something to avoid `variable
	 * is recursive' errors.  */
	if (Var_Valuei(name.s, name.e) == NULL)
	    Var_Seti(name.s, name.e, "", ctxt);

	res2 = Var_Subst(arg, NULL, false);
	errorIsOkay = saved;

	arg = res2;
    }

    if (type & VAR_APPEND)
	Var_Appendi(name.s, name.e, arg, ctxt);
    else
	Var_Seti(name.s, name.e, arg, ctxt);

    VarName_Free(&name);
    free(res2);
    free(res1);
    return true;
@


1.4
log
@rename variable to errorIsOkay. What does oldVars mean anyway ?
@
text
@d2 1
a2 1
/*	$OpenBSD: parsevar.c,v 1.3 2007/07/08 17:44:20 espie Exp $	*/
d223 1
a223 1
	errorIsOkay = errorIsOkay;
@


1.3
log
@A set of big related changes. okay millert@@, tested further by kettenis@@
and matthieu@@

This all revolves around putting ALL global variables into one single big
hash, and using flags. This removes some impossible to understand stuff,
like old varfind, and allows for some nice stuff.
- each time we reference a global variable, we create it, possibly as a dummy
variable.
- each time we go to the environment, we remember it, thus we no longer go
back to it.

Lists of dependant changes:
- isolate changes to oldVars and checkEnvFirst.
- remove VAR_CMD and VAR_GLOBAL contexts. The only distinction is in parsevar.
Split Parse_DoVar into Parse_DoVar and Parse_CmdlineVar
- rework var modules around obtain_global_var, observe flags in various
functions like Var_Value and Var_Seti.
- Var_Seti/Var_Appendi are almost the same code, use that internally.
- add magic to handle the very special SHELL variable.
- introduce Var_Definedi for the cases where we don't want the actual
value, to simplify tests.
- add keyword .poison, parse it and set global flags accordingly.
- do poison_checks where needed.
- document poison.
- in for loops, set variable temporarily, so that Var_SubstVar will also
substitute it in varmodifiers expressions.
@
text
@d2 1
a2 1
/*	$OpenBSD: parsevar.c,v 1.2 2004/04/07 13:11:36 espie Exp $	*/
d175 1
a175 1
	 * invocation alone -- this is done by forcing oldVars to be false.
d184 1
a184 1
	bool   oldOldVars = oldVars;
d186 1
a186 1
	oldVars = false;
d193 1
a193 1
	oldVars = oldOldVars;
d219 1
d221 1
a221 1
	oldVars = false;
d223 1
a223 1
	oldVars = true;
@


1.2
log
@ISO function declarations, trim a few comments, rename a few variables to
more explicit/more consistent names.

okay otto@@
@
text
@d2 1
a2 1
/*	$OpenBSD: parsevar.c,v 1.1 2001/05/23 12:34:48 espie Exp $	*/
d44 1
d72 3
a74 3
bool
Parse_DoVar(const char *line, 
    GSymT *ctxt) 		/* Context in which to do the assignment */
d86 1
a86 1
    arg = VarName_Get(line, &name, (SymTable *)ctxt, true,
d151 1
a151 1
    if ((type & VAR_OPT) && Var_Valuei(name.s, name.e) != NULL) {
d192 1
a192 1
	res2 = Var_Subst(arg, (SymTable *)ctxt, false);
d207 17
@


1.1
log
@Mostly clean-up:
- cut up those huge include files into separate interfaces for all modules.
Put the interface documentation there, and not with the implementation.
- light-weight includes for needed concrete types (lst_t.h, timestamp_t.h).
- cut out some more logically separate parts: cmd_exec, varname, parsevar,
timestamp.
- put all error handling functions together, so that we will be able to
clean them up.
- more systematic naming: functioni  to handle interval, function to handle
string.
- put the init/end code apart to minimize coupling.
- kill weird types like ReturnStatus and Boolean. Use standard bool (with a
fallback for non-iso systems)
- better interface documentation for lots of subsystems.

As a result, make compilation goes somewhat faster (5%, even considering
the largish BSD copyrights to read). The corresponding preprocessed
source goes down from 1,5M to 1M.

A few minor code changes as well: Parse_DoVar is no longer destructive.
Parse_IsVar functionality is folded into Parse_DoVar (as it knows what an
assignment is), a few more interval handling functions. Avoid calling
XXX_End when they do nothing, just #define XXX_End   to nothing.

Parse_DoVar is slightly more general: it will handle compound assignments
as long as they make sense, e.g., VAR +!= cmd
will work.  As a side effect, VAR++=value now triggers an error
(two + in assignment).
- this stuff doesn't occur in portable Makefiles.
- writing VAR++ = value or VAR+ +=value  disambiguates it.
- this is a good thing, it uncovered a bug in bsd.port.mk.

Tested by naddy@@. Okayed millert@@. I'll handle the fallback if there is
any. This went through a full make build anyways, including isakmpd
(without mickey's custom binutils, as he didn't see fit to share it with me).
@
text
@d2 1
a2 1
/*	$OpenBSD: parse.c,v 1.21 1999/10/05 22:08:07 espie Exp $	*/
d46 1
a46 2
find_op1(p)
    const char *p;
d60 1
a60 2
find_op2(p)
    const char *p;
d72 2
a73 3
Parse_DoVar(line, ctxt)
    const char	*line;
    GSymT	*ctxt;    /* Context in which to do the assignment */
@

