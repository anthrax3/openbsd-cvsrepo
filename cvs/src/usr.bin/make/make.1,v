head	1.124;
access;
symbols
	OPENBSD_6_1:1.124.0.4
	OPENBSD_6_1_BASE:1.124
	OPENBSD_6_0:1.120.0.6
	OPENBSD_6_0_BASE:1.120
	OPENBSD_5_9:1.120.0.2
	OPENBSD_5_9_BASE:1.120
	OPENBSD_5_8:1.120.0.4
	OPENBSD_5_8_BASE:1.120
	OPENBSD_5_7:1.119.0.2
	OPENBSD_5_7_BASE:1.119
	OPENBSD_5_6:1.115.0.4
	OPENBSD_5_6_BASE:1.115
	OPENBSD_5_5:1.110.0.4
	OPENBSD_5_5_BASE:1.110
	OPENBSD_5_4:1.105.0.2
	OPENBSD_5_4_BASE:1.105
	OPENBSD_5_3:1.102.0.2
	OPENBSD_5_3_BASE:1.102
	OPENBSD_5_2:1.93.0.2
	OPENBSD_5_2_BASE:1.93
	OPENBSD_5_1_BASE:1.92
	OPENBSD_5_1:1.92.0.4
	OPENBSD_5_0:1.92.0.2
	OPENBSD_5_0_BASE:1.92
	OPENBSD_4_9:1.91.0.2
	OPENBSD_4_9_BASE:1.91
	OPENBSD_4_8:1.88.0.2
	OPENBSD_4_8_BASE:1.88
	OPENBSD_4_7:1.86.0.2
	OPENBSD_4_7_BASE:1.86
	OPENBSD_4_6:1.84.0.6
	OPENBSD_4_6_BASE:1.84
	OPENBSD_4_5:1.84.0.2
	OPENBSD_4_5_BASE:1.84
	OPENBSD_4_4:1.80.0.2
	OPENBSD_4_4_BASE:1.80
	OPENBSD_4_3:1.79.0.2
	OPENBSD_4_3_BASE:1.79
	OPENBSD_4_2:1.70.0.2
	OPENBSD_4_2_BASE:1.70
	OPENBSD_4_1:1.66.0.6
	OPENBSD_4_1_BASE:1.66
	OPENBSD_4_0:1.66.0.4
	OPENBSD_4_0_BASE:1.66
	OPENBSD_3_9:1.66.0.2
	OPENBSD_3_9_BASE:1.66
	OPENBSD_3_8:1.64.0.4
	OPENBSD_3_8_BASE:1.64
	OPENBSD_3_7:1.64.0.2
	OPENBSD_3_7_BASE:1.64
	OPENBSD_3_6:1.63.0.2
	OPENBSD_3_6_BASE:1.63
	OPENBSD_3_5:1.62.0.2
	OPENBSD_3_5_BASE:1.62
	OPENBSD_3_4:1.56.0.2
	OPENBSD_3_4_BASE:1.56
	OPENBSD_3_3:1.49.0.2
	OPENBSD_3_3_BASE:1.49
	OPENBSD_3_2:1.47.0.2
	OPENBSD_3_2_BASE:1.47
	OPENBSD_3_1:1.44.0.2
	OPENBSD_3_1_BASE:1.44
	OPENBSD_3_0:1.42.0.2
	OPENBSD_3_0_BASE:1.42
	OPENBSD_2_9_BASE:1.39
	OPENBSD_2_9:1.39.0.2
	OPENBSD_2_8:1.36.0.2
	OPENBSD_2_8_BASE:1.36
	OPENBSD_2_7:1.31.0.2
	OPENBSD_2_7_BASE:1.31
	OPENBSD_2_6:1.20.0.2
	OPENBSD_2_6_BASE:1.20
	OPENBSD_2_5:1.17.0.2
	OPENBSD_2_5_BASE:1.17
	OPENBSD_2_4:1.14.0.2
	OPENBSD_2_4_BASE:1.14
	OPENBSD_2_3:1.12.0.2
	OPENBSD_2_3_BASE:1.12
	OPENBSD_2_2:1.11.0.2
	OPENBSD_2_2_BASE:1.11
	OPENBSD_2_1:1.10.0.2
	OPENBSD_2_1_BASE:1.10
	OPENBSD_2_0:1.8.0.2
	OPENBSD_2_0_BASE:1.8
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.124
date	2017.01.01.01.08.11;	author tb;	state Exp;
branches;
next	1.123;
commitid	wnNuSAo7K6MoaRxC;

1.123
date	2016.12.28.22.47.11;	author schwarze;	state Exp;
branches;
next	1.122;
commitid	k2EPegJNL4OAFh99;

1.122
date	2016.10.23.17.27.01;	author jmc;	state Exp;
branches;
next	1.121;
commitid	IvTNVHoBByhuGUld;

1.121
date	2016.10.23.14.54.14;	author espie;	state Exp;
branches;
next	1.120;
commitid	wPoE1FuixzUwl6nK;

1.120
date	2015.03.13.19.58.41;	author jmc;	state Exp;
branches;
next	1.119;
commitid	OcwhWBKGs3Yn7EeA;

1.119
date	2015.02.28.21.51.57;	author bentley;	state Exp;
branches;
next	1.118;
commitid	NNu2UZnsd5zmNVYD;

1.118
date	2015.02.07.13.35.00;	author espie;	state Exp;
branches;
next	1.117;
commitid	P0yHvQSBKcNYrE3Y;

1.117
date	2014.11.03.12.48.37;	author espie;	state Exp;
branches;
next	1.116;
commitid	A3I26haTUGj4123Y;

1.116
date	2014.10.20.07.27.46;	author espie;	state Exp;
branches;
next	1.115;
commitid	BsrxxXiZ1shePMyf;

1.115
date	2014.07.16.14.11.50;	author jmc;	state Exp;
branches;
next	1.114;
commitid	Id44N67XKHeBxVu3;

1.114
date	2014.07.15.23.07.19;	author deraadt;	state Exp;
branches;
next	1.113;
commitid	nDEgowbNlRRDUtxK;

1.113
date	2014.04.14.07.03.19;	author jmc;	state Exp;
branches;
next	1.112;

1.112
date	2014.03.14.10.19.01;	author espie;	state Exp;
branches;
next	1.111;

1.111
date	2014.03.14.07.46.12;	author jmc;	state Exp;
branches;
next	1.110;

1.110
date	2014.02.13.07.30.39;	author guenther;	state Exp;
branches;
next	1.109;

1.109
date	2013.11.24.12.36.13;	author espie;	state Exp;
branches;
next	1.108;

1.108
date	2013.10.19.18.15.39;	author schwarze;	state Exp;
branches;
next	1.107;

1.107
date	2013.08.26.16.54.04;	author jmc;	state Exp;
branches;
next	1.106;

1.106
date	2013.08.14.08.39.26;	author jmc;	state Exp;
branches;
next	1.105;

1.105
date	2013.06.24.15.44.36;	author jmc;	state Exp;
branches;
next	1.104;

1.104
date	2013.06.15.13.03.41;	author espie;	state Exp;
branches;
next	1.103;

1.103
date	2013.05.06.20.57.26;	author naddy;	state Exp;
branches;
next	1.102;

1.102
date	2013.02.19.02.00.57;	author william;	state Exp;
branches;
next	1.101;

1.101
date	2013.02.04.14.44.58;	author espie;	state Exp;
branches;
next	1.100;

1.100
date	2012.10.12.21.44.19;	author espie;	state Exp;
branches;
next	1.99;

1.99
date	2012.10.11.14.56.59;	author espie;	state Exp;
branches;
next	1.98;

1.98
date	2012.10.09.19.52.44;	author espie;	state Exp;
branches;
next	1.97;

1.97
date	2012.10.06.18.41.53;	author espie;	state Exp;
branches;
next	1.96;

1.96
date	2012.10.05.13.06.00;	author espie;	state Exp;
branches;
next	1.95;

1.95
date	2012.10.02.10.18.37;	author espie;	state Exp;
branches;
next	1.94;

1.94
date	2012.09.21.07.55.20;	author espie;	state Exp;
branches;
next	1.93;

1.93
date	2012.04.11.18.27.30;	author espie;	state Exp;
branches;
next	1.92;

1.92
date	2011.05.02.11.14.11;	author jmc;	state Exp;
branches;
next	1.91;

1.91
date	2011.01.23.20.43.55;	author schwarze;	state Exp;
branches;
next	1.90;

1.90
date	2010.10.18.14.42.16;	author jmc;	state Exp;
branches;
next	1.89;

1.89
date	2010.09.29.07.44.56;	author jmc;	state Exp;
branches;
next	1.88;

1.88
date	2010.07.19.21.43.17;	author espie;	state Exp;
branches;
next	1.87;

1.87
date	2010.07.19.19.46.44;	author espie;	state Exp;
branches;
next	1.86;

1.86
date	2010.02.04.07.46.20;	author jmc;	state Exp;
branches;
next	1.85;

1.85
date	2010.02.03.20.45.44;	author miod;	state Exp;
branches;
next	1.84;

1.84
date	2009.02.10.19.24.17;	author jmc;	state Exp;
branches;
next	1.83;

1.83
date	2009.02.08.17.15.10;	author jmc;	state Exp;
branches;
next	1.82;

1.82
date	2008.11.04.07.22.35;	author espie;	state Exp;
branches;
next	1.81;

1.81
date	2008.09.01.08.37.45;	author jmc;	state Exp;
branches;
next	1.80;

1.80
date	2008.08.01.14.19.09;	author bluhm;	state Exp;
branches;
next	1.79;

1.79
date	2008.03.03.23.04.33;	author jmc;	state Exp;
branches;
next	1.78;

1.78
date	2008.03.02.23.56.58;	author espie;	state Exp;
branches;
next	1.77;

1.77
date	2007.12.01.17.45.02;	author jmc;	state Exp;
branches;
next	1.76;

1.76
date	2007.12.01.15.14.34;	author espie;	state Exp;
branches;
next	1.75;

1.75
date	2007.11.28.09.40.08;	author espie;	state Exp;
branches;
next	1.74;

1.74
date	2007.11.03.15.29.29;	author jmc;	state Exp;
branches;
next	1.73;

1.73
date	2007.11.03.11.43.41;	author espie;	state Exp;
branches;
next	1.72;

1.72
date	2007.11.02.20.30.35;	author jmc;	state Exp;
branches;
next	1.71;

1.71
date	2007.11.02.17.27.24;	author espie;	state Exp;
branches;
next	1.70;

1.70
date	2007.07.09.14.47.29;	author jmc;	state Exp;
branches;
next	1.69;

1.69
date	2007.07.08.17.44.20;	author espie;	state Exp;
branches;
next	1.68;

1.68
date	2007.05.31.19.20.13;	author jmc;	state Exp;
branches;
next	1.67;

1.67
date	2007.05.30.04.41.34;	author jmc;	state Exp;
branches;
next	1.66;

1.66
date	2006.01.12.17.15.59;	author jmc;	state Exp;
branches;
next	1.65;

1.65
date	2005.12.29.10.09.51;	author jmc;	state Exp;
branches;
next	1.64;

1.64
date	2005.01.15.20.42.49;	author mbalmer;	state Exp;
branches;
next	1.63;

1.63
date	2004.04.21.13.17.49;	author jmc;	state Exp;
branches;
next	1.62;

1.62
date	2004.03.13.22.57.09;	author jmc;	state Exp;
branches;
next	1.61;

1.61
date	2004.02.12.14.08.00;	author jmc;	state Exp;
branches;
next	1.60;

1.60
date	2004.02.09.00.32.20;	author espie;	state Exp;
branches;
next	1.59;

1.59
date	2004.01.23.23.08.47;	author jmc;	state Exp;
branches;
next	1.58;

1.58
date	2003.11.22.11.52.49;	author espie;	state Exp;
branches;
next	1.57;

1.57
date	2003.09.29.11.35.11;	author jmc;	state Exp;
branches;
next	1.56;

1.56
date	2003.09.04.22.14.43;	author jmc;	state Exp;
branches;
next	1.55;

1.55
date	2003.09.02.18.50.06;	author jmc;	state Exp;
branches;
next	1.54;

1.54
date	2003.07.14.12.29.22;	author jmc;	state Exp;
branches;
next	1.53;

1.53
date	2003.06.27.22.01.42;	author jmc;	state Exp;
branches;
next	1.52;

1.52
date	2003.06.10.09.12.11;	author jmc;	state Exp;
branches;
next	1.51;

1.51
date	2003.06.03.02.56.12;	author millert;	state Exp;
branches;
next	1.50;

1.50
date	2003.03.28.09.56.06;	author jmc;	state Exp;
branches;
next	1.49;

1.49
date	2003.03.10.15.37.30;	author jmc;	state Exp;
branches;
next	1.48;

1.48
date	2003.01.05.10.10.44;	author pvalchev;	state Exp;
branches;
next	1.47;

1.47
date	2002.08.30.22.59.01;	author jsyn;	state Exp;
branches;
next	1.46;

1.46
date	2002.06.08.00.14.09;	author espie;	state Exp;
branches;
next	1.45;

1.45
date	2002.04.16.19.37.16;	author espie;	state Exp;
branches;
next	1.44;

1.44
date	2002.03.23.16.32.16;	author deraadt;	state Exp;
branches;
next	1.43;

1.43
date	2002.03.06.17.48.33;	author espie;	state Exp;
branches;
next	1.42;

1.42
date	2001.08.20.05.57.55;	author mpech;	state Exp;
branches;
next	1.41;

1.41
date	2001.05.05.12.57.48;	author espie;	state Exp;
branches;
next	1.40;

1.40
date	2001.05.03.14.00.58;	author espie;	state Exp;
branches;
next	1.39;

1.39
date	2001.03.29.17.15.47;	author aaron;	state Exp;
branches;
next	1.38;

1.38
date	2000.12.06.20.28.41;	author todd;	state Exp;
branches;
next	1.37;

1.37
date	2000.11.10.05.10.34;	author aaron;	state Exp;
branches;
next	1.36;

1.36
date	2000.07.31.21.01.40;	author espie;	state Exp;
branches;
next	1.35;

1.35
date	2000.07.06.03.43.35;	author aaron;	state Exp;
branches;
next	1.34;

1.34
date	2000.07.01.18.08.43;	author espie;	state Exp;
branches;
next	1.33;

1.33
date	2000.06.30.23.26.25;	author espie;	state Exp;
branches;
next	1.32;

1.32
date	2000.06.06.15.32.25;	author ericj;	state Exp;
branches;
next	1.31;

1.31
date	2000.04.12.21.47.49;	author aaron;	state Exp;
branches;
next	1.30;

1.30
date	2000.04.03.02.58.46;	author espie;	state Exp;
branches;
next	1.29;

1.29
date	2000.03.11.21.40.07;	author aaron;	state Exp;
branches;
next	1.28;

1.28
date	2000.03.10.19.07.21;	author aaron;	state Exp;
branches;
next	1.27;

1.27
date	2000.01.19.17.28.52;	author espie;	state Exp;
branches;
next	1.26;

1.26
date	2000.01.02.15.59.52;	author espie;	state Exp;
branches;
next	1.25;

1.25
date	99.12.26.00.20.33;	author espie;	state Exp;
branches;
next	1.24;

1.24
date	99.12.06.22.20.34;	author espie;	state Exp;
branches;
next	1.23;

1.23
date	99.11.11.11.43.18;	author espie;	state Exp;
branches;
next	1.22;

1.22
date	99.11.10.14.11.49;	author espie;	state Exp;
branches;
next	1.21;

1.21
date	99.11.06.14.43.57;	author espie;	state Exp;
branches;
next	1.20;

1.20
date	99.09.25.14.44.00;	author espie;	state Exp;
branches;
next	1.19;

1.19
date	99.06.05.01.21.33;	author aaron;	state Exp;
branches;
next	1.18;

1.18
date	99.05.16.21.53.31;	author espie;	state Exp;
branches;
next	1.17;

1.17
date	99.03.17.17.35.01;	author espie;	state Exp;
branches;
next	1.16;

1.16
date	99.02.23.18.24.51;	author espie;	state Exp;
branches;
next	1.15;

1.15
date	98.12.05.00.06.28;	author espie;	state Exp;
branches;
next	1.14;

1.14
date	98.09.26.19.55.05;	author aaron;	state Exp;
branches;
next	1.13;

1.13
date	98.09.05.17.41.47;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	98.01.28.12.41.51;	author niklas;	state Exp;
branches;
next	1.11;

1.11
date	97.09.18.14.12.37;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	97.04.01.07.28.15;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	96.11.30.21.08.59;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	96.09.21.10.53.48;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	96.09.02.16.04.13;	author briggs;	state Exp;
branches;
next	1.6;

1.6
date	96.03.27.19.32.37;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	96.02.23.18.32.57;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	95.12.17.13.42.00;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	95.12.14.03.23.34;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.12.08.19.48.10;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.43;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.43;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.124
log
@Hyphenate compound adjectives 'up-to-date', 'out-of-date' and 'well-known'
if they precede the noun and omit hyphens otherwise.

ok tj
@
text
@.\"	$OpenBSD: make.1,v 1.123 2016/12/28 22:47:11 schwarze Exp $
.\"	$NetBSD: make.1,v 1.18 1997/03/10 21:19:53 christos Exp $
.\"
.\" Copyright (c) 1990, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	from: @@(#)make.1	8.4 (Berkeley) 3/19/94
.\"
.Dd $Mdocdate: December 28 2016 $
.Dt MAKE 1
.Os
.Sh NAME
.Nm make
.Nd maintain program dependencies
.Sh SYNOPSIS
.Nm make
.Op Fl BeiknpqrSst
.Op Fl C Ar directory
.Op Fl D Ar variable
.Op Fl d Ar flags
.Op Fl f Ar mk
.Op Fl I Ar directory
.Op Fl j Ar max_processes
.Op Fl m Ar directory
.Op Fl V Ar variable
.Op Ar NAME Ns = Ns Ar value
.Bk -words
.Op Ar target ...
.Ek
.Sh DESCRIPTION
.Nm
is a program designed to simplify the maintenance of other programs.
Its input is a
.Em makefile :
a list of specifications (target rules) describing build
relationships between programs and other files.
By default, the file
.Pa makefile
is used;
if no such file is found, it tries
.Pa Makefile .
If neither of these exist,
.Nm
can still rely on a set of built-in system rules.
.Pp
If the file
.Sq Pa .depend
exists, it will also be read after the main
.Ar makefile
(see
.Xr mkdep 1 ) .
.Pp
The handling of
.Sq Pa .depend
is a
.Bx
extension.
.Pp
Standard options are as follows:
.Bl -tag -width Ds
.It Fl e
Environment variables override macro assignments within
makefiles.
.It Fl f Ar mk
Read file
.Ar mk
instead of the default makefile.
If
.Ar mk
is
.Ql \- ,
standard input is used.
Multiple makefiles may be specified, and are read in the order specified.
.It Fl i
Ignore non-zero exit of shell commands in the makefile.
Equivalent to specifying
.Ql \-
before each command line in the makefile.
.It Fl k
Continue processing after errors are encountered, but only on those targets
that do not depend on the target whose creation caused the error.
.It Fl n
Display the commands that would have been executed, but do not actually
execute them.
.It Fl p
Print a dump of the target rules and variables on stdout.
Do not build anything.
.It Fl q
Do not execute any commands, but exit with status 0 if the specified targets
are up to date, and 1 otherwise.
.It Fl r
Do not use the built-in rules specified in the system makefile,
.Pa <sys.mk> .
.It Fl S
Stop processing when an error is encountered.
This is the default behavior.
This is needed to negate the
.Fl k
option during recursive builds.
.It Fl s
Do not echo commands as they are executed.
Equivalent to specifying
.Sq Ic @@
before each command line in the makefile.
.It Fl t
Rather than re-building a target as specified in the makefile, create it
or update its modification time to make it appear up to date, a bit like
.Xr touch 1 .
.It Ar NAME Ns = Ns Ar value
Set the value of the variable
.Ar NAME
to
.Ar value .
.El
.Pp
Extended options are as follows:
.Bl -tag -width Ds
.It Fl B
Try to be backwards compatible by executing the commands to make
the prerequisites in a target rule in sequence.
This is the default, in the absence of
.Fl j Ar max_processes .
.It Fl C Ar directory
Enter
.Ar directory
before doing anything.
.It Fl D Ar variable
Define
.Ar variable
to be 1.
.It Fl d Ar flags
Turn on debugging, and specify which portions of
.Nm
are to print debugging information.
.Ar flags
is one or more of the following:
.Bl -tag -width Ds
.It Ar A
Print all possible debugging information;
equivalent to specifying all of the debugging flags.
.It Ar a
Print debugging information about archive searching and caching.
.It Ar c
Print debugging information about conditional evaluation.
.It Ar d
Print debugging information about directory searching and caching.
.It Ar D
Print warning messages about multiply defined command lists.
.It Ar e
Print debugging information about expensive command heuristics.
.It Ar f
Print debugging information about the expansion of for loops.
.It Ar "g1"
Print the input graph before making anything.
.It Ar "g2"
Print the input graph after making everything, or before exiting
on error.
.It Ar h
Print information about jobs being held back because of sibling/target
groups races.
.It Ar j
Print debugging information about forking processes to run commands.
.It Ar k
Print debugging information about manually killing processes.
.It Ar l
Print commands in Makefile targets regardless of whether or not they are
prefixed by @@.
Also known as loud behavior.
.It Ar m
Print debugging information about making targets, including modification
dates.
.It Ar n
Print debugging information about target names equivalence computations.
.It Ar p
Help finding concurrency issues for parallel make by adding some
randomization.
If
.Va RANDOM_ORDER
is defined,
targets will be shuffled before being built.
If
.Va RANDOM_DELAY
is defined,
.Nm
will wait between 0 and ${RANDOM_DELAY} seconds before starting a command.
A given random seed can be forced by setting
.Va RANDOM_SEED ,
but this does not guarantee reproductibility.
.It Ar q
.Sq quick death
option: after a fatal error, instead of waiting for other jobs to die,
kill them right away.
.It Ar s
Print debugging information about inference (suffix) transformation rules.
.It Ar t
Print debugging information about target list maintenance.
.It Ar T
Print debugging information about target group determination.
.It Ar v
Print debugging information about variable assignment.
.El
.It Fl I Ar directory
Specify a directory in which to search for makefiles and
for "..."-style inclusions.
Multiple directories can be added to form a search path.
Furthermore, the system include path (see the
.Fl m
option) will be used after this search path.
.It Fl j Ar max_processes
Specify the maximum number of processes that
.Nm
may have running at any one time.
.It Fl m Ar directory
Specify a directory in which to search for system include files:
.Pa sys.mk
and <...>-style inclusions.
Multiple directories can be added to form the system search path.
Using
.Fl m
will override the default system include directory
.Pa /usr/share/mk .
.It Fl V Ar variable
Print
.Nm make Ns 's
idea of the value of
.Ar variable .
Do not build any targets.
Multiple instances of this option may be specified;
the variables will be printed one per line,
with a blank line for each null or undefined variable.
.El
.Pp
There are seven different types of lines in a makefile: dependency
lines, shell commands, variable assignments, include statements,
conditional directives, for loops, and comments.
Of these, include statements, conditional directives and for loops are
extensions.
.Pp
A complete target rule is composed of a dependency line,
followed by a list of shell commands.
.Pp
In general, lines may be continued from one line to the next by ending
them with a backslash
.Pq Ql \e .
The trailing newline character and initial whitespace on the following
line are compressed into a single space.
.Sh DEPENDENCY LINES
Dependency lines consist of one or more targets, an operator, and zero
or more prerequisites:
.Bd -ragged -offset indent
.Ar target ... : Ns Op Ar prerequisite ...
.Ed
.Pp
This creates a relationship where the targets
.Dq depend
on the prerequisites and are usually built from them.
The exact relationship between targets and prerequisites is determined
by the operator that separates them.
.Pp
It is an error to use different dependency operators for the same target.
.Pp
The operators are as follows:
.Bl -tag -width flag
.It Ic \&:
A target is considered out of date if any of its prerequisites has
been modified more recently than the target (that is, its modification time
is less than that of any of its prerequisites).
Thus, targets with no prerequisites are always out of date.
.Pp
.Nm
will then execute the list of shell commands associated with that target.
.Pp
Additional prerequisites may be specified over additional dependency lines:
.Nm
will consider all prerequisites for determining out-of-date status.
The target is removed if
.Nm
is interrupted.
.It Ic \&!
.Nm
first examines all prerequisites and re-creates them as necessary.
.Pp
It will then always execute the list of shell commands associated with
that target (as if the target always was out of date).
.Pp
Like
.Ic \&: ,
additional prerequisites may be specified over additional dependency lines,
and the target is still removed if
.Nm
is interrupted.
.It Ic \&::
Each dependency line for a target is considered independently.
A target is considered out of date for this target rule if any of its
prerequisites in this dependency has been modified more recently than
the target.
.Pp
.Nm
will then execute the list of shell commands associated with that target.
Target rules that specify no prerequisites are always executed.
.Pp
The target will not be removed if
.Nm
is interrupted.
.El
.Pp
The
.Ic \&:
operator is the only standard operator.
The
.Ic \&::
operator is a fairly standard extension,
popularized by
.Sy imake .
The
.Ic !\&
operator is a
.Bx
extension.
.Pp
As an extension, targets and prerequisites may contain the shell wildcard
expressions
.Ql \&? ,
.Ql * ,
.Ql []
and
.Ql {} .
The expressions
.Ql \&? ,
.Ql *
and
.Ql []
may only be used as part of the final
component of the target or prerequisite, and must be used to describe existing
files.
The expression
.Ql {}
need not necessarily be used to describe existing files.
Expansion is in directory order, not alphabetically as done in the shell.
.Pp
For maximum portability, target names should only consist of periods,
underscores, digits and alphabetic characters.
.Pp
The use of several targets can be a shorthand for duplicate rules.
Specifically,
.Bd -literal -offset indent
target1 target2: reqa reqa
	cmd1
	cmd2
.Ed
.Pp
may be replaced with
.Bd -literal -offset indent
target1: reqa reqa
	cmd1
	cmd2
target2: reqa reqa
	cmd1
	cmd2
.Ed
.Pp
in general.
But
.Nm
is aware of parallel issues, and will not build those targets concurrently,
if not appropriate.
.Sh SHELL COMMANDS
Each target may have associated with it a series of shell commands, normally
used to build the target.
While several dependency lines may name the same target, only one of
these dependency lines should be followed by shell commands, and thus
define a complete target rule (unless the
.Sq Ic ::
operator is used).
Each of the shell commands in the target rule
.Em must
be preceded by a tab.
.Pp
If a command line begins with a combination of the characters,
.Sq Ic @@ ,
.Sq Ic \-
and/or
.Sq Ic + ,
the command is treated specially:
.Bl -tag -width `@@'
.It Sq Ic @@
causes the command not to be echoed before it is executed.
.It Sq Ic \-
causes any non-zero exit status of the command line to be ignored.
.It Sq Ic +
causes the command to be executed even if
.Fl n
has been specified.
(This can be useful to debug recursive Makefiles.)
.El
.Pp
Commands are executed using
.Pa /bin/sh
in
.Qq set -e
mode, unless
.Sq Ic \-
is specified.
.Pp
As an optimization,
.Nm
may execute very simple commands without going through an extra shell
process, as long as this does not change observable behavior.
.Sh INFERENCE RULES
.Nm
also maintains a list of valid suffixes through the use of the
.Ic .SUFFIXES
special target.
.Pp
These suffixes can be used to write generic transformation rules called
inference rules.
.Pp
If a target has the form
.Sq \&.s1.s2 ,
where .s1 and .s2 are currently valid suffixes, then it defines a
transformation from *.s1 to *.s2 (double suffix inference).
If a target has the form
.Sq \&.s1 ,
where .s1 is a currently valid suffix, then it defines a
transformation from *.s1 to * (single suffix inference).
.Pp
A complete inference rule is a dependency line with such a target, the
normal dependency operator, no prerequisites and a list of shell commands.
.Pp
When
.Nm
requires a target for which it has no complete target rule, it will try
to apply a single active inference rule to create the target.
.Pp
For instance, with the following Makefile, describing a C program compiled
from sources a.c and b.c, with header file a.h:
.Bd -literal -offset indent
\&.SUFFIXES: .c .o
\&.c.o:
	${CC} ${CFLAGS} -c $<

prog: a.o b.o
	${CC} ${CFLAGS} -o $@@ a.o

a.o b.o: a.h

b.o: b.c
	${CC} -DFOO ${CFLAGS} -o $@@ $<
.Ed
.Pp
Consider b.o:
there is a complete target rule re-creating it from b.c, so
it will be compiled using ${CC} -DFOO.
.Pp
Consider a.o:
there is no explicit target rule, so
.Nm
will consider valid transforms.
Fortunately, there is an inference rule that can create a.o from a.c,
so it will be compiled using ${CC}.
.Pp
Note that extra prerequisites are still taken into account, so both a.o
and b.o depend on a.h for re-creation.
.Pp
Valid suffixes accumulate over
.Ic .SUFFIXES
lines.
An empty
.Ic .SUFFIXES
can be used to reset the currently valid list of suffixes,
but inference rules already read are still known by
.Nm ,
and they are marked as inactive.
Redefining the corresponding suffix (or suffixes) will reactivate the rule.
.Pp
In case of duplicate inference rules with the same suffix combination,
the new rule overrides the old one.
.Pp
For maximal portability, suffixes should start with a dot.
.Sh VARIABLE ASSIGNMENTS
Variables in
.Nm
are much like variables in the shell and, by tradition,
consist of all upper-case letters.
They are also called
.Sq macros
in various texts.
For portability, only periods, underscores, digits and letters should be
used for variable names.
The five operators that can be used to assign values to variables are as
follows:
.Bl -tag -width Ds
.It Ic \&=
Assign the value to the variable.
Any previous value is overridden.
.It Ic \&:=
Assign with expansion, i.e., expand the value before assigning it
to the variable (extension).
.It Ic \&+=
Append the value to the current value of the variable (extension).
.It Ic \&?=
Assign the value to the variable if it is not already defined
.Po
.Bx
extension
.Pc .
Normally, expansion is not done until the variable is referenced.
.It Ic \&!=
Perform variable expansion and pass the result to the shell for
execution on the spot, assigning the result to the variable.
Any newlines in the result are also replaced with spaces
.Po
.Bx
extension
.Pc .
.It Ic \&!!=
Perform variable expansion on the spot and pass the result to the shell
for execution only when the value is needed, assigning the result to
the variable.
.Pp
This is almost identical to
.Ic \&!=
except that a shell is only run when the variable value is needed.
Any newlines in the result are also replaced with spaces
.Po
.Ox
extension
.Pc .
.El
.Pp
Any whitespace before the assigned
.Ar value
is removed; if the value is being appended, a single space is inserted
between the previous contents of the variable and the appended value.
.Pp
Several extended assignment operators may be combined together.
For instance,
.Bd -literal -offset indent
A ?!= cmd
.Ed
.Pp
will only run
.Qq cmd
and put its output into
.Va A
if
.Va A
is not yet defined.
.Pp
Combinations that do not make sense, such as
.Bd -literal -offset indent
A +!!= cmd
.Ed
will not work.
.Pp
Variables are expanded by surrounding the variable name with either
curly braces
.Pq Ql {}
or parentheses
.Pq Ql ()
and preceding it with
a dollar sign
.Pq Ql \&$ .
If the variable name contains only a single letter, the surrounding
braces or parentheses are not required.
This shorter form is not recommended.
.Pp
Variable substitution occurs at two distinct times, depending on where
the variable is being used.
Variables in dependency lines are expanded as the line is read.
Variables in shell commands are expanded when the shell command is
executed.
.Pp
The four different classes of variables (in order of increasing precedence)
are:
.Bl -tag -width Ds
.It Environment variables
Variables defined as part of
.Nm make Ns 's
environment.
.It Global variables
Variables defined in the makefile or in included makefiles.
.It Command line variables
Variables defined as part of the command line.
.It Local variables
Variables that are defined specific to a certain target.
Standard local variables are as follows:
.Bl -tag -width ".ARCHIVE"
.It Va @@
The name of the target.
.It Va \&%
The name of the archive member (only valid for library rules).
.It Va \&!
The name of the archive file (only valid for library rules).
.It Va \&?
The list of prerequisites for this target that were deemed out of date.
.It Va \&<
The name of the prerequisite from which this target is to be built, if a valid
inference rule (suffix rule) is in scope.
.It Va *
The file prefix of the file, containing only the file portion,
no suffix or preceding directory components.
.El
.Pp
The six variables
.Sq Va "@@F" ,
.Sq Va "@@D" ,
.Sq Va "<F" ,
.Sq Va "<D" ,
.Sq Va "*F" ,
and
.Sq Va "*D"
yield the
.Qq filename
and
.Qq directory
parts of the corresponding macros.
.Pp
For maximum compatibility,
.Sq Va \&<
should only be used for actual inference rules.
It is also set for normal target rules when there is an inference rule
that matches the current target and prerequisite in scope.
That is, in
.Bd -literal -offset indent
\&.SUFFIXES: .c .o
file.o: file.c
	cmd1 $<

\&.c.o:
	cmd2
.Ed
.Pp
building
.Pa file.o
will execute
.Qq cmd1 file.c .
.Pp
As an extension,
.Nm
supports the following local variables:
.Bl -tag -width ".ARCHIVE"
.It Va \&>
The list of all prerequisites for this target.
.It Va .ALLSRC
Synonym for
.Sq Va \&> .
.It Va .ARCHIVE
Synonym for
.Sq Va \&! .
.It Va .IMPSRC
Synonym for
.Sq Va \&< .
.It Va .MEMBER
Synonym for
.Sq Va \&% .
.It Va .OODATE
Synonym for
.Sq Va \&? .
.It Va .PREFIX
Synonym for
.Sq Va * .
.It Va .TARGET
Synonym for
.Sq Va @@ .
.El
.Pp
These variables may be used on the dependency half of dependency
lines, when they make sense.
.El
.Pp
In addition,
.Nm
sets or knows about the following internal variables, or environment
variables:
.Bl -tag -width MAKEFLAGS
.It Va \&$
A single dollar sign
.Ql \&$ ,
i.e.,
.Ql \&$$
expands to a single dollar
sign.
.It Va .MAKE
The name that
.Nm
was executed with
.Pq Va argv Ns Op 0 .
.It Va .CURDIR
A path to the directory where
.Nm
was executed.
.It Va .OBJDIR
Path to the directory where targets are built.
At startup,
.Nm
searches for an alternate directory to place target files.
.Nm
tries to
.Xr chdir 2
into
.Ev MAKEOBJDIR
(or
.Pa obj
if
.Ev MAKEOBJDIR
is not defined),
and sets
.Va .OBJDIR
accordingly.
Should that fail,
.Va .OBJDIR
is set to
.Va .CURDIR .
.It Va MAKEFILE_LIST
The list of files read by
.Nm .
.It Va .MAKEFLAGS
The environment variable
.Ev MAKEFLAGS
may contain anything that
may be specified on
.Nm make Ns 's
command line.
Its contents are stored in
.Nm make Ns 's
.Va .MAKEFLAGS
variable.
Anything specified on
.Nm make Ns 's
command line is appended to the
.Va .MAKEFLAGS
variable which is then
entered into the environment as
.Ev MAKEFLAGS
for all programs which
.Nm
executes.
.It Va MFLAGS
A shorter synonym for
.Va .MAKEFLAGS .
.It Ev PWD
Alternate path to the current directory.
.Nm
normally sets
.Sq Va .CURDIR
to the canonical path given by
.Xr getcwd 3 .
However, if the environment variable
.Ev PWD
is set and gives a path to the current directory, then
.Nm
sets
.Sq Va .CURDIR
to the value of
.Ev PWD
instead.
.Ev PWD
is always set to the value of
.Sq Va .OBJDIR
for all programs which
.Nm
executes.
.It Va .TARGETS
List of targets
.Nm
is currently building.
.It Va MACHINE
Name of the machine architecture
.Nm
is running on, obtained from the
.Ev MACHINE
environment variable, or through
.Xr uname 3
if not defined.
.It Va MACHINE_ARCH
Name of the machine architecture
.Nm
was compiled for, obtained from the
.Ev MACHINE_ARCH
environment variable, or defined at compilation time.
.It Va MACHINE_CPU
Name of the machine processor
.Nm
was compiled for, obtained from the
.Ev MACHINE_CPU
environment variable, or defined at compilation time.
On processors where only one endianness is possible, the value of this
variable is always the same as
.Ev MACHINE_ARCH .
.It Va MAKEFILE
Possibly the file name of the last makefile that has been read.
It should not be used; see the
.Sx BUGS
section below.
.El
.Pp
Variable expansion may be modified to select or modify each word of the
variable (where
.Dq word
is a whitespace delimited sequence of characters).
The general format of a variable expansion is as follows:
.Pp
.Dl {variable[:modifier[:...]]}
.Pp
Each modifier begins with a colon and one of the following
special characters.
The colon may be escaped with a backslash
.Pq Ql \e .
.Bl -tag -width Ds
.It Cm :E
Replaces each word in the variable with its suffix.
.It Cm :H
Replaces each word in the variable with everything but the last component.
.It Cm :L
Replaces each word in the variable with its lower case equivalent.
.It Cm :U
Replaces each word in the variable with its upper case equivalent.
.It Cm :M Ns Ar pattern
Select only those words that match the rest of the modifier.
The standard shell wildcard characters
.Pf ( Ql * ,
.Ql \&? ,
and
.Ql [] )
may
be used.
The wildcard characters may be escaped with a backslash
.Pq Ql \e .
.It Cm :N Ns Ar pattern
This is identical to
.Cm :M ,
but selects all words which do not match
the rest of the modifier.
.It Cm :Q
Quotes every shell meta-character in the variable, so that it can be passed
safely through recursive invocations of
.Nm make .
.It Cm :QL
Quote list: quotes every shell meta-character in the variable, except
whitespace, so that it can be passed to a shell's
.Sq for
loops.
.It Cm :R
Replaces each word in the variable with everything but its suffix.
.Sm off
.It Cm :S No \&/ Ar old_string Xo
.No \&/ Ar new_string
.No \&/ Op Cm 1g
.Xc
.Sm on
Modify the first occurrence of
.Ar old_string
in the variable's value, replacing it with
.Ar new_string .
If a
.Ql g
is appended to the last slash of the pattern, all occurrences
in each word are replaced.
If a
.Ql 1
is appended to the last slash of the pattern, only the first word
is affected.
If
.Ar old_string
begins with a caret
.Pq Ql ^ ,
.Ar old_string
is anchored at the beginning of each word.
If
.Ar old_string
ends with a dollar sign
.Pq Ql \&$ ,
it is anchored at the end of each word.
Inside
.Ar new_string ,
an ampersand
.Pq Ql &
is replaced by
.Ar old_string
(without any
.Ql ^
or
.Ql \&$ ) .
Any character may be used as a delimiter for the parts of the modifier
string.
The anchoring, ampersand and delimiter characters may be escaped with a
backslash
.Pq Ql \e .
.Pp
Variable expansion occurs in the normal fashion inside both
.Ar old_string
and
.Ar new_string
with the single exception that a backslash is used to prevent the expansion
of a dollar sign
.Pq Ql \&$ ,
not a preceding dollar sign as is usual.
.Sm off
.It Cm :C No \&/ Ar pattern Xo
.No \&/ Ar replacement
.No \&/ Op Cm 1g
.Xc
.Sm on
The
.Cm :C
modifier is just like the
.Cm :S
modifier except that the old and new strings, instead of being
simple strings, are an extended regular expression (see
.Xr re_format 7 )
and an
.Xr ed 1 Ns \-style
replacement string.
Normally, the first occurrence of the pattern in
each word of the value is changed.
The
.Ql 1
modifier causes the substitution to apply to at most one word; the
.Ql g
modifier causes the substitution to apply to as many instances of the
search pattern as occur in the word or words it is found in.
Note that
.Ql 1
and
.Ql g
are orthogonal; the former specifies whether multiple words are
potentially affected, the latter whether multiple substitutions can
potentially occur within each affected word.
.It Cm :T
Replaces each word in the variable with its last component.
.It Ar :old_string Ns = Ns Ar new_string
This is the
.At V
style variable substitution.
It must be the last modifier specified.
If
.Ar old_string
or
.Ar new_string
do not contain the pattern matching character
.Sq %
then it is assumed that they are
anchored at the end of each word, so only suffixes or entire
words may be replaced.
Otherwise
.Sq %
is the substring of
.Ar old_string
to be replaced in
.Ar new_string .
The right hand side
.Pq Ar new_string
may contain variable values, which will be expanded.
To put an actual single dollar, just double it.
.El
.Pp
All modifiers are
.Bx
extensions, except for the standard
.At V
style variable substitution.
.Pp
The interpretation of
.Sq %
and
.Sq $
in
.At V
variable substitutions is not mandated by POSIX, though it is
fairly common.
.Sh INCLUDE STATEMENTS, CONDITIONALS AND FOR LOOPS
Makefile inclusion, conditional structures and for loops reminiscent
of the C programming language are provided in
.Nm make .
All such structures are identified by a line beginning with a single
dot
.Pq Ql \&.
character.
Whitespace characters may follow this dot, e.g.,
.Bd -literal -offset indent
\&.include <file>
.Ed
and
.Bd -literal -offset indent -compact
\&.   include <file>
.Ed
.Pp
are identical constructs.
Files are included with either
.Ql .include <file>
or
.Ql .include Qq file .
Variables between the angle brackets or double quotes are expanded
to form the file name.
If angle brackets are used, the included makefile is expected to be in
the system makefile directory.
If double quotes are used, the including makefile's directory and any
directories specified using the
.Fl I
option are searched before the system
makefile directory.
.Pp
Conditional expressions are also preceded by a single dot as the first
character of a line.
The possible conditionals are as follows:
.Bl -tag -width Ds
.It Ic .undef Ar variable
Un-define the specified global variable.
Only global variables may be un-defined.
.It Ic .poison Ar variable
Poison the specified global variable.
Any further reference to
.Ar variable
will be flagged as an error.
.It Ic .poison !defined Pq Ar variable
It is an error to try to use the value of
.Ar variable
in a context where it is not defined.
.It Ic .poison empty Pq Ar variable
It is an error to try to use the value of
.Ar variable
in a context where it is not defined or empty.
.It Xo
.Ic \&.if
.Oo \&! Oc Ns Ar expression
.Op Ar operator expression ...
.Xc
Test the value of an expression.
.It Xo
.Ic .ifdef
.Oo \&! Oc Ns Ar variable
.Op Ar operator variable ...
.Xc
Test the value of a variable.
.It Xo
.Ic .ifndef
.Oo \&! Oc Ns Ar variable
.Op Ar operator variable ...
.Xc
Test the value of a variable.
.It Xo
.Ic .ifmake
.Oo \&! Oc Ns Ar target
.Op Ar operator target ...
.Xc
Test the target being built.
.It Xo
.Ic .ifnmake
.Oo \&! Oc Ar target
.Op Ar operator target ...
.Xc
Test the target being built.
.It Ic .else
Reverse the sense of the last conditional.
.It Xo
.Ic .elif
.Oo \&! Oc Ar expression
.Op Ar operator expression ...
.Xc
A combination of
.Sq Ic .else
followed by
.Sq Ic .if .
.It Xo
.Ic .elifdef
.Oo \&! Oc Ns Ar variable
.Op Ar operator variable ...
.Xc
A combination of
.Sq Ic .else
followed by
.Sq Ic .ifdef .
.It Xo
.Ic .elifndef
.Oo \&! Oc Ns Ar variable
.Op Ar operator variable ...
.Xc
A combination of
.Sq Ic .else
followed by
.Sq Ic .ifndef .
.It Xo
.Ic .elifmake
.Oo \&! Oc Ns Ar target
.Op Ar operator target ...
.Xc
A combination of
.Sq Ic .else
followed by
.Sq Ic .ifmake .
.It Xo
.Ic .elifnmake
.Oo \&! Oc Ns Ar target
.Op Ar operator target ...
.Xc
A combination of
.Sq Ic .else
followed by
.Sq Ic .ifnmake .
.It Ic .endif
End the body of the conditional.
.El
.Pp
The
.Ar operator
may be any one of the following:
.Bl -tag -width "Cm XX"
.It Cm ||
logical OR
.It Cm \&&&
Logical AND; of higher precedence than
.Cm || .
.El
.Pp
As in C,
.Nm
will only evaluate a conditional as far as is necessary to determine
its value.
Parentheses may be used to change the order of evaluation.
The boolean operator
.Sq Ic \&!
may be used to logically negate an entire
conditional.
It is of higher precedence than
.Sq Ic \&&& .
.Pp
The value of
.Ar expression
may be any of the following:
.Bl -tag -width commands
.It Ic commands
Takes a target name as an argument and evaluates to true if the target
has been defined and has shell commands associated with it.
.It Ic defined
Takes a variable name as an argument and evaluates to true if the variable
has been defined.
.It Ic make
Takes a target name as an argument and evaluates to true if the target
was specified as part of
.Nm make Ns 's
command line or was declared the default target (either implicitly or
explicitly, see
.Va .MAIN )
before the line containing the conditional.
.It Ic empty
Takes a variable, with possible modifiers, and evaluates to true if
the expansion of the variable would result in an empty string.
.It Ic exists
Takes a file name as an argument and evaluates to true if the file exists.
The file is searched for on the system search path (see
.Va .PATH ) .
.It Ic target
Takes a target name as an argument and evaluates to true if the target
has been defined.
.El
.Pp
.Ar expression
may also be an arithmetic or string comparison.
Variable expansion is
performed on both sides of the comparison, after which the integral
values are compared.
A value is interpreted as hexadecimal if it is
preceded by 0x, otherwise it is decimal; octal numbers are not supported.
The standard C relational operators are all supported.
If after
variable expansion, either the left or right hand side of a
.Sq Ic ==
or
.Sq Ic "!="
operator is not an integral value, then
string comparison is performed between the expanded
variables.
If no relational operator is given, it is assumed that the expanded
variable is being compared against 0.
.Pp
When
.Nm
is evaluating one of these conditional expressions, and it encounters
a word it doesn't recognize, either the
.Dq make
or
.Dq defined
expression is applied to it, depending on the form of the conditional.
If the form is
.Sq Ic .ifdef
or
.Sq Ic .ifndef ,
the
.Dq defined
expression is applied.
Similarly, if the form is
.Sq Ic .ifmake
or
.Sq Ic .ifnmake ,
the
.Dq make
expression is applied.
.Pp
If the conditional evaluates to true the parsing of the makefile continues
as before.
If it evaluates to false, the following lines are skipped.
In both cases this continues until a
.Sq Ic .else
or
.Sq Ic .endif
is found.
.Pp
For loops are typically used to apply a set of rules to a list of files.
The syntax of a for loop is:
.Bd -unfilled -offset indent
.Ic .for Ar variable Oo Ar variable ... Oc Ic in Ar expression
	<make-rules>
.Ic .endfor
.Ed
.Pp
After the for
.Ar expression
is evaluated, it is split into words.
On each iteration of the loop, one word is assigned to each
.Ar variable ,
in order,
and these
.Ar variables
are substituted in the
.Ic make-rules
inside the body of the for loop.
The number of words must match the number of iteration variables;
that is, if there are three iteration variables, the number of words
must be a multiple of three.
.Pp
Loops and conditional expressions may nest arbitrarily, but
they may not cross include file boundaries.
.Pp
.Nm
also supports
.Ic sinclude
and
.Ic -include
for compatibility with other implementations.
Both use the same syntax:
.Bd -unfilled -offset indent
.Ic sinclude Pa file
.Ic -include Pa file
.Ed
.Pp
.Po
note no quotes around
.Pa file
.Pc
and will include
.Pa file ,
but without any error if it does not exist.
.Sh COMMENTS
Comments begin with a hash
.Pq Ql \&#
character, anywhere but in a shell
command line, and continue to the end of the line
(but a
.Pq Ql \&#
character in a shell command line will be interpreted as a comment by
the shell).
.Sh TARGET ATTRIBUTES
Some targets may be tagged with some specific attributes by one
of the
.Sx SPECIAL TARGETS
or
.Sx SPECIAL PREREQUISITES
described below.
.Bl -tag -width "Ignoring errors"
.It Dq Always build
Run the commands associated with this target even if the
.Fl n
or
.Fl t
options were specified.
Can be used to mark recursive
.Nm make Ns 's ,
but prefer standard
.Sq Ic + Ns Ar cmd .
.It Dq Cheap
In parallel mode, don't scan the commands for occurrences of
.Nm ,
thus letting normal recursive
.Fl j
behavior apply.
.It Dq Expensive
In parallel mode, assume commands will invoke recursive commands.
Once
.Nm
starts building an expensive target, it won't start building anything else
until that target has finished building.
.It Dq Ignoring errors
Ignore any errors generating by running shell commands, exactly
as if they were all preceded by a dash
.Pq Ql \- .
.It Dq Phony
A phony target is a target that does not correspond to any object in the
file system (more like a placeholder for a list of commands).
.Pp
Phony targets are always out of date at the start of a run, but
.Nm
still keeps track of when they are built (that is, when the associated
command list finishes running).
.It Dq Precious
Don't remove the target if
.Nm
is interrupted in the middle of building it.
.It Dq Silent
Do not display shell commands before running them, exactly as
if they were all preceded by a
.Sq @@ .
.El
.Sh SPECIAL TARGETS
.Nm
recognizes standard special targets:
.Bl -tag -width ".NOTPARALLEL"
.It Ic .DEFAULT
If there is a
.Ic .DEFAULT
target rule, with commands but no prequisites, and
.Nm
can't figure out another way to build a target, it will use that
list of commands, setting
.Va \&<
and
.Va @@
appropriately.
.It Ic .IGNORE
Mark its prerequisites as
.Dq Ignoring errors .
.Pp
If the list of prerequisites is empty, apply that to all targets, exactly
like the
.Fl i
command-line option.
.It Ic .PRECIOUS
Mark its prerequisites as
.Dq Precious .
.Pp
If the list of prerequisites is empty, apply that to all targets.
.It Ic .SILENT
Mark its prerequisites as
.Dq Silent .
.Pp
If the list of prerequisites is empty, apply that to all targets, exactly
like the
.Fl s
command-line option.
.It Ic .SUFFIXES
See
.Sx INFERENCE RULES .
.El
.Pp
and also some other special targets as an extension:
.Bl -tag -width ".NOTPARALLEL"
.It Ic .BEGIN
Command lines attached to this target are executed before anything
else is done.
.It Ic .CHEAP
Mark its prerequisites as
.Dq Cheap .
.It Ic .END
Command lines attached to this target are executed at the end of a successful
run.
.It Ic .EXPENSIVE
Mark its prerequisites as
.Dq Expensive .
.It Ic .INTERRUPT
Command lines attached to this target are executed if
.Nm
is interrupted by a SIGINT.
.It Ic .MADE
Mark its prerequisites as being up to date.
.It Ic .MAKE
Mark its prerequisites as
.Dq Always build .
Prefer standard
.Sq Ic + Ns Ar cmd .
.It Ic .MAIN
If no target is specified when
.Nm
is invoked, this target will be built.
This is always set, either
explicitly, or implicitly when
.Nm
selects the default target, to give the user a way to refer to the default
target on the command line.
.It Ic .MAKEFLAGS
This target provides a way to specify flags for
.Nm
when the makefile is used.
The flags are as if typed to the shell, though the
.Fl f
option will have
no effect.
.It Ic .NOTPARALLEL
Disable parallel mode for the current makefile.
The
.Fl j
option is still passed to submakes.
.It Ic .NO_PARALLEL
Same as above, for compatibility with other pmake variants.
.It Ic .ORDER
The list of prerequisites should be built in sequence.
.It Ic .PATH
The prerequisites define a search path: directories that will be searched
for files not found in the current directory.
If no prerequisites are specified, any previously specified directories are
deleted.
.It Ic .PATH\fI.suffix\fR
This target is only valid if .suffix is a currently valid suffix.
The prerequisites defines a search path for files ending in that suffix.
For files not found in the current directory,
.Nm
will first look in that path, before reverting to the default search path.
.It Ic .PHONY
Mark its prerequisites as
.Dq Phony
targets.
.El
.Pp
It is an error to use several special targets, or a special target and
normal targets, in a single dependency line.
.Sh SPECIAL PREREQUISITES
Of the special targets described in the previous
section, the ones that tag prerequisites can also be used as prerequisites,
in which case the corresponding targets will be tagged accordingly.
.Pp
This is an extension, even for standard special targets.
.Pp
.Nm
also recognizes some other prerequisites:
.Bl -tag -width ".PRECIOUS"
.It Ic .NOTMAIN
Normally
.Nm
selects the first target it encounters as the default target to be built
if no target was specified.
This prerequisite prevents this target from being selected.
.It Ic .OPTIONAL
If a target is marked with this attribute and
.Nm
can't figure out how to create it, it will ignore this fact and assume
the file isn't needed or already exists.
.It Ic .USE
Turn the target into
.Nm make Ns 's
version of a macro.
When the target is used as a prerequisite for another target, the other target
acquires the commands, prerequisites, and attributes (except for
.Ic .USE )
of the
prerequisite.
If the target already has commands, the
.Ic .USE
target's commands are appended
to them.
.It Ic .WAIT
If
.Ic .WAIT
appears in a dependency line, the prerequisites that precede it are
made before the prerequisites that follow it in the line.
Loops are not
detected and targets that form loops will be silently ignored.
.El
.Sh ENVIRONMENT
.Nm
uses the following environment variables, if they exist:
.Ev MACHINE ,
.Ev MACHINE_ARCH ,
.Ev MACHINE_CPU ,
.Ev MAKEFLAGS ,
.Ev MAKEOBJDIR ,
.Ev MAKEOBJDIRPREFIX ,
and
.Ev PWD .
.Nm
also ignores and unsets
.Ev CDPATH .
.Sh FILES
.Bl -tag -width /usr/share/mk -compact
.It Pa .depend
list of dependencies
.It Pa makefile
default makefile
.It Pa Makefile
default makefile if
.Pa makefile
does not exist
.It Pa sys.mk
system makefile
.It Pa /usr/share/mk
system makefile directory
.It Pa /usr/obj
default
.Ev MAKEOBJDIRPREFIX
directory
.El
.Sh EXIT STATUS
If
.Fl q
was specified, the
.Nm
utility exits with one of the following values:
.Pp
.Bl -tag -width Ds -offset indent -compact
.It 0
Normal behavior.
.It 1
The target was not up to date.
.It >1
An error occurred.
.El
.Pp
Otherwise, the
.Nm
utility exits with a value of 0 on success, and >0 if an error occurred.
.Sh SEE ALSO
.Xr ed 1 ,
.Xr mkdep 1 ,
.Xr sh 1 ,
.Xr getcwd 3 ,
.Xr uname 3 ,
.Xr re_format 7
.Sh STANDARDS
The
.Nm
utility is mostly compliant with the
.St -p1003.1-2008
specification,
though its presence is optional.
.Pp
The flags
.Op Fl BCDdIjmV
are extensions to that specification.
.Pp
Older versions of
.Nm
used
.Ev MAKE
instead of
.Ev MAKEFLAGS .
This was removed for POSIX compatibility.
The internal variable
.Va MAKE
is set to the same value as
.Va .MAKE .
Support for this may be removed in the future.
.Pp
Most of the more esoteric features of
.Nm
should probably be avoided for greater compatibility.
.Sh HISTORY
A
.Nm
command appeared in
.At v7 .
.Pp
This implementation is a distant derivative of
.Nm pmake ,
originally written by Adam de Boor.
.Sh BUGS
If the same target is specified several times in complete target rules,
.Nm
silently ignores all commands after the first non empty set of commands,
e.g., in
.Bd -literal -offset indent
a:
	@@echo "Executed"
a:
	@@echo "Bad luck"
.Ed
.Pp
@@echo "Bad luck" will be ignored.
.Pp
.Va .TARGETS
is not set to the default target when
.Nm
is invoked without a target name and no
.Ic MAIN
special target exists.
.Pp
The evaluation of
.Ar expression
in a test is somewhat simplistic.
Variables don't need to be quoted, but strings do:
Tests like
.Ql .if ${VAR} == "string" ,
.Ql .if ${VAR} >= 5 ,
.Ql .if 5 <= 10 ,
and
.Ql .if "string" == ${VAR}
do work, but
.Ql .if string = ${VAR}
doesn't.
.Pp
For loops are expanded before tests, so a fragment such as:
.Bd -literal -offset indent
\&.for TMACHINE in ${SHARED_ARCHS}
\&.if "${TMACHINE}" == ${MACHINE}
     ...
\&.endif
\&.endfor
.Ed
.Pp
requires the quotes.
.Pp
When handling
.Pf pre- Bx 4.4
archives,
.Nm
may erroneously mark archive members as out of date if the archive name
was truncated.
.Pp
The handling of
.Sq ;\&
and other special characters in tests may be utterly bogus.
For instance, in
.Bd -literal -offset indent
\&A=abcd;c.c
\&.if ${A:R} == "abcd;c"
.Ed
.Pp
the test will never match, even though the value is correct.
.Pp
In a .for loop, only the variable value is used; assignments will be
evaluated later, e.g., in
.Bd -literal -offset indent
\&.for I in a b c d
I:=${I:S/a/z/}
A+=$I
\&.endfor
.Ed
.Pp
.Sq A
will evaluate to a b c d after the loop, not z b c d.
.Pp
.Ic ORDER
is currently only used in parallel mode, so
keep prerequisites ordered for sequential mode!
.Pp
Distinct target names are treated separately, even though they might
correspond to the same file in the file system.
This can cause excessive rebuilds of some targets, and bogus
races in parallel mode.
This can also prevent
.Nm
from finding a rule to solve a dependency if the target name is not
exactly the same as the dependency.
.Pp
In parallel mode,
.Fl j Ar n
only limits the number of direct children of
.Nm .
During recursive invocations, each level may multiply the total number
of processes by
.Ar n .
However,
.Nm
includes some heuristics to try to prevent catastrophic behavior:
if a command is marked as expensive, or preceded by
.Sq + ,
or seems to
invoke a program that looks sufficiently like
.Sq make ,
.Nm
will assume recursive invocation, and not start any new process until
said command has finished running.
Thus the number of processes run directly or indirectly by
.Nm
will increase linearly with each level of recursion instead of exponentially.
.Pp
The
.Va MAKEFILE
variable cannot be used reliably.
It is a compatibility feature and may get set to the last makefile
specified, as it is set by System V make.
@


1.123
log
@fix the remaining cases of .Xr with only one argument
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.122 2016/10/23 17:27:01 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: October 23 2016 $
d114 1
a114 1
are up-to-date, and 1 otherwise.
d131 1
a131 1
or update its modification time to make it appear up-to-date, a bit like
d289 1
a289 1
A target is considered out-of-date if any of its prerequisites has
d292 1
a292 1
Thus, targets with no prerequisites are always out-of-date.
d308 1
a308 1
that target (as if the target always was out-of-date).
d318 1
a318 1
A target is considered out-of-date for this target rule if any of its
d620 1
a620 1
The list of prerequisites for this target that were deemed out-of-date.
d1325 1
a1325 1
Phony targets are always out-of-date at the start of a run, but
d1398 1
a1398 1
Mark its prerequisites as being up-to-date.
d1535 1
a1535 1
The target was not up-to date.
@


1.122
log
@zap trailing whitespace;
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.121 2016/10/23 14:54:14 espie Exp $
d338 1
a338 1
.Xr imake .
@


1.121
log
@add !!=
feedback and okay millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.120 2015/03/13 19:58:41 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: March 13 2015 $
d533 1
a533 1
Perform variable expansion and pass the result to the shell for 
d541 2
a542 2
Perform variable expansion on the spot and pass the result to the shell 
for execution only when the value is needed, assigning the result to 
@


1.120
log
@remove the first comma from constructs like ", and," and ", or,": you can use
"and" and "or" to join sentence clauses, and you can use commas, but both hinders
reading;
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.119 2015/02/28 21:51:57 bentley Exp $
d33 1
a33 1
.Dd $Mdocdate: February 28 2015 $
d533 3
a535 3
Expand the value and pass it to the shell for execution and assign
the result to the variable.
Any newlines in the result are replaced with spaces
d540 13
d573 6
@


1.119
log
@Reduce usage of predefined strings in manpages.

Predefined strings are not very portable across troff implementations,
and they make the source much harder to read. Usually the intended
character can be written directly.

No output changes, except for two instances where the incorrect escape
was used in the first place.

tweaks + ok schwarze@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.118 2015/02/07 13:35:00 espie Exp $
d33 1
a33 1
.Dd $Mdocdate: February 7 2015 $
d507 1
a507 1
are much like variables in the shell, and, by tradition,
@


1.118
log
@document -C
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.117 2014/11/03 12:48:37 espie Exp $
d33 1
a33 1
.Dd $Mdocdate: November 3 2014 $
d998 1
a998 1
.Ql .include \*qfile\*q .
d1517 1
a1517 1
.It \*(Gt1
d1523 1
a1523 1
utility exits with a value of 0 on success, and \*(Gt0 if an error occurred.
@


1.117
log
@introspection feature: ${MAKEFILE_LIST} contains the list of makefiles
parsed.

name stolen from gmake, from a suggestion from guenther@@, to avoid
gratuitous confusin.

okay guenther@@, millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.116 2014/10/20 07:27:46 espie Exp $
d33 1
a33 1
.Dd $Mdocdate: October 20 2014 $
d42 1
d147 4
d1540 1
a1540 1
.Op Fl BDdIjmV
@


1.116
log
@document sinclude/-include
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.115 2014/07/16 14:11:50 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: July 16 2014 $
d715 3
@


1.115
log
@tweak previous;
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.114 2014/07/15 23:07:19 deraadt Exp $
d33 1
a33 1
.Dd $Mdocdate: July 15 2014 $
d1231 20
@


1.114
log
@remove support for the non-standard BSDmakefile, which make tries to
open first.  a handful of strange ports will cope soon.
ok espie
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.113 2014/04/14 07:03:19 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: April 14 2014 $
d57 1
a57 1
.Ar makefile :
d60 6
a65 9
By default, this
.Ar makefile
is determined as follows:
first the file
.Sq Pa makefile
if it exists, then the file
.Sq Pa Makefile
in that order.
If none of these files exist,
d80 1
a80 1
extensions.
a1463 1
does not exist
@


1.113
log
@STANDARDS: note that make is optional
ok schwarze sobrado
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.112 2014/03/14 10:19:01 espie Exp $
d33 1
a33 1
.Dd $Mdocdate: March 14 2014 $
a63 2
.Sq Pa BSDmakefile ,
if it exists, then the files
d65 2
a66 2
and
.Sq Pa Makefile ,
a79 2
.Sq Pa BSDmakefile
and
d81 1
a81 1
are
d1465 1
a1465 1
.It Pa BSDmakefile
a1466 3
.It Pa makefile
default makefile if
.Pa BSDmakefile
@


1.112
log
@.depend is definitely not *appended* to Makefile. Its rules are also
read after the main makefile.
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.111 2014/03/14 07:46:12 jmc Exp $
d1519 2
a1520 1
specification.
@


1.111
log
@better wording;
From: Daniel Dickman
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.110 2014/02/13 07:30:39 guenther Exp $
d33 1
a33 1
.Dd $Mdocdate: February 13 2014 $
d76 1
a76 1
exists, its contents are appended to the main
@


1.110
log
@Don't use use .Tn with AND/OR/NOT
Phrase any "The _flags_ argument is the ..." line consistently,
eliminating unnecessary use of 'inclusive' and saying "zero or more"
or "one or more" as appropriate

ok millert@@ jmc@@ schwarze@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.109 2013/11/24 12:36:13 espie Exp $
d33 1
a33 1
.Dd $Mdocdate: November 24 2013 $
d74 1
a74 1
In addition, if the file
d76 1
a76 1
exists, it is also read on top of the main
@


1.109
log
@simplify determination of OBJDIR to what we actually use.
(prevents some race conditions by just chdir()'ing into the right objdir)
problem noticed by theo
okay'd by general apathy...
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.108 2013/10/19 18:15:39 schwarze Exp $
d33 1
a33 1
.Dd $Mdocdate: October 19 2013 $
d1116 1
a1116 3
Logical
.Tn AND ;
of higher precedence than
@


1.108
log
@fix a few obvious .Ar markup errors (unfortunately, there are many more)
found while working on mandoc apropos
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.107 2013/08/26 16:54:04 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: August 26 2013 $
d701 1
a701 1
A path to the directory where the targets are built.
d704 1
a704 5
searches for an alternate directory to place target files -- it
will attempt to change into this special directory.
First, if
.Ev MAKEOBJDIRPREFIX
is defined,
d706 7
a712 10
prepends its contents to the current directory name and tries for
the resulting directory.
If that fails,
.Nm
remains in the current directory.
If
.Ev MAKEOBJDIRPREFIX
is not defined,
.Nm
checks
d714 4
a717 1
and tries to change into that directory.
d719 3
a721 21
.Nm
remains in the current directory.
If
.Ev MAKEOBJDIR
is not defined, it tries to change into the directory named
.Pa obj.${MACHINE}
(see
.Va MACHINE
variable).
If it still has found no special directory,
.Nm
next tries the directory named
.Pa obj .
If this fails,
.Nm
tries to prepend
.Pa /usr/obj
to the current directory name.
Finally, if none of these directories are available
.Nm
will settle for and use the current directory.
a1552 4
The determination of
.Va .OBJDIR
is contorted to the point of absurdity.
.Pp
@


1.107
log
@"reactivate";
make.1 part From: Christian Schulte
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.106 2013/08/14 08:39:26 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: August 14 2013 $
d968 1
a968 1
.Ar %
d973 1
a973 1
.Ar %
d991 1
a991 1
.Ar %
d993 1
a993 1
.Ar $
@


1.106
log
@some Bx/Ox conversion;
From: Jan Stary
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.105 2013/06/24 15:44:36 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: June 24 2013 $
d500 1
a500 1
Redefining the corresponding suffix (or suffixes) will re-active the rule.
@


1.105
log
@do not use literal displays when the display contains mark up;
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.104 2013/06/15 13:03:41 espie Exp $
d33 1
a33 1
.Dd $Mdocdate: June 15 2013 $
d85 3
a87 1
are BSD extensions.
d343 3
a345 1
operator is a BSD extension.
d528 5
a532 2
Assign the value to the variable if it is not already defined (BSD
extension).
d537 5
a541 1
Any newlines in the result are replaced with spaces (BSD extension).
d984 3
a986 1
All modifiers are BSD extensions, except for the standard
d1624 3
a1626 1
When handling pre-BSD 4.4 archives,
@


1.104
log
@make explicit some hidden assumptions, make path handling clearer,
fix set -e description, as we actually match what posix says.

a bit of feedback from millert@@, guenther@@, jmc@@ will probably have
further fixes when he's back :)
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.103 2013/05/06 20:57:26 naddy Exp $
d33 1
a33 1
.Dd $Mdocdate: May 6 2013 $
d274 2
a275 2
.Bd -literal -offset indent
.Ar target ... Ns : Ns Op Ar prerequisite ...
@


1.103
log
@clarify that the :C modifier uses extended regular expressions; ok espie@@ jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.102 2013/02/19 02:00:57 william Exp $
d33 1
a33 1
.Dd $Mdocdate: February 19 2013 $
d44 1
a44 1
.Op Fl f Ar makefile
d90 1
a90 1
Specify that environment variables override macro assignments within
d92 4
a95 2
.It Fl f Ar makefile
Specify a makefile to read instead of the default.
d97 1
a97 1
.Ar makefile
d100 1
a100 1
standard input is read.
d120 2
a121 1
Do not use the built-in rules specified in the system makefile.
d135 2
a136 1
or update its modification time to make it appear up-to-date.
d227 4
a230 2
Specify a directory in which to search for makefiles and included makefiles.
The system makefile directory (or directories, see the
d232 1
a232 1
option) is automatically included as part of this list.
d238 1
a238 1
Specify a directory in which to search for
d240 5
a244 4
and makefiles included
via the <...> style.
Multiple directories can be added to form a search path.
This path will override the default system include path:
a245 4
Furthermore, the system include path will be appended to the search path used
for "..."-style inclusions (see the
.Fl I
option).
d273 5
a277 1
or more prerequisites.
d419 1
a419 1
Commands are always executed using
d423 3
a425 1
mode.
@


1.102
log
@Add missing trailing slash on the :S modifier in the BUGS section.

ok espie
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.101 2013/02/04 14:44:58 espie Exp $
d33 1
a33 1
.Dd $Mdocdate: February 4 2013 $
d916 2
a917 2
simple strings, are a regular expression (see
.Xr regex 3 )
d1514 2
a1515 2
.Xr regex 3 ,
.Xr uname 3
@


1.101
log
@synch with reality, okay jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.100 2012/10/12 21:44:19 espie Exp $
d33 1
a33 1
.Dd $Mdocdate: October 12 2012 $
d1622 1
a1622 1
I:=${I:S/a/z}
@


1.100
log
@Document duplicate inference rules. That's posix behavior, and what we do.
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.99 2012/10/11 14:56:59 espie Exp $
d33 1
a33 1
.Dd $Mdocdate: October 11 2012 $
d529 14
d1559 1
a1559 1
ignores all commands after the first non empty set of commands,
a1616 7
.Pp
The conditional handler is incredibly lame.
Junk such as
.Pp
.Dl \&.if defined anything goes (A)
.Pp
will be accepted silently.
@


1.99
log
@amend bug section with some fixed stuff.
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.98 2012/10/09 19:52:44 espie Exp $
d33 1
a33 1
.Dd $Mdocdate: October 9 2012 $
d488 3
@


1.98
log
@... yet more documentation, lots of inputs from jmc@@ as usual.
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.97 2012/10/06 18:41:53 espie Exp $
d33 1
a33 1
.Dd $Mdocdate: October 6 2012 $
d380 2
a381 1
is aware of parallel issues, and will not build those targets concurrently.
d1120 1
a1120 1
.Bl -tag -width defined
d1563 1
a1563 1
Currently, tests should start with a variable or with a quoted string.
d1566 2
a1567 1
.Ql .if ${VAR} >= 5
a1570 2
.Ql .if 5 <= ${VAR} ,
.Ql .if 5 <= 10 ,
d1572 1
a1572 1
don't.
@


1.97
log
@rework section about special targets/prereq to be somewhat readable.

feedback & ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.96 2012/10/05 13:06:00 espie Exp $
d33 1
a33 1
.Dd $Mdocdate: October 5 2012 $
d58 1
a58 1
a list of specifications (target rules) describing creation
d167 2
d178 3
d217 2
d273 1
a273 1
on the prerequisites and are usually created from them.
d359 1
a359 2
Note that the use of several targets is merely a shorthand for duplicate
rules.
d367 1
a367 1
is just a short form of
d377 2
d380 1
a380 6
does not support Solaris syntax for true multiple targets:
.Bd -literal -offset indent
target1 + target2: reqa reqa
	cmd1
	cmd2
.Ed
d383 1
a383 1
used to create the target.
d433 1
a433 1
transformation from *.s1 to *.s2 (two suffixes inference).
d437 1
a437 1
transformation from *.s1 to * (one suffix inference).
d1120 3
d1226 5
a1230 1
command line, and continue to the end of the line.
a1364 4
.\" XXX: NOT YET!!!!
.\" .It Ic .NOTPARALLEL
.\" The named targets are executed in non parallel mode. If no targets are
.\" specified, then all targets are executed in non parallel mode.
d1366 4
a1369 1
Disable parallel mode.
a1373 4
.\" XXX: NOT YET!!!!
.\" .It Ic .PARALLEL
.\" The named targets are executed in parallel mode. If no targets are
.\" specified, then all targets are executed in parallel mode.
d1390 3
d1394 8
d1539 1
a1539 1
If the same target is specified several times in normal dependency rules,
d1541 1
a1541 1
silently ignores all commands after the first non empty set of commands,
d1550 1
a1550 1
@@echo "Bad luck" will be silently ignored.
d1561 3
a1563 4
in a test is very simple-minded.
Currently, the only form that works is
.Ql .if ${VAR} op something \.
For instance, tests should be written as
d1565 8
a1572 1
not the other way around, which doesn't work.
d1577 1
a1577 1
\&.if ${TMACHINE} == ${MACHINE}
d1583 1
a1583 1
won't work, and should be rewritten the other way around.
@


1.96
log
@document implicit rules and target dependency operators better.
some input from jmc@@, might not be 100% perfect yet, but better than
nothing at all.
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.95 2012/10/02 10:18:37 espie Exp $
d33 1
a33 1
.Dd $Mdocdate: October 2 2012 $
d1221 33
a1253 5
.Sh SPECIAL PREREQUISITES
.Bl -tag -width ".PRECIOUS"
.It Ic .IGNORE
Ignore any errors from the commands associated with this target, exactly
as if they all were preceded by a dash
d1255 18
a1272 2
.It Ic .NOTMAIN
Normally
d1274 21
a1294 8
selects the first target it encounters as the default target to be built
if no target was specified.
This prerequisite prevents this target from being selected.
.It Ic .OPTIONAL
If a target is marked with this attribute and
.Nm
can't figure out how to create it, it will ignore this fact and assume
the file isn't needed or already exists.
d1296 4
a1299 4
When
.Nm
is interrupted, it removes any partially made targets.
This prerequisite prevents the target from being removed.
d1301 10
a1310 23
Do not echo any of the commands associated with this target, exactly
as if they all were preceded by an at sign
.Pq Ql @@ .
.It Ic .USE
Turn the target into
.Nm make Ns 's
version of a macro.
When the target is used as a prerequisite for another target, the other target
acquires the commands, prerequisite, and attributes (except for
.Ic .USE )
of the
prerequisite.
If the target already has commands, the
.Ic .USE
target's commands are appended
to them.
.It Ic .WAIT
If
.Ic .WAIT
appears in a dependency line, the prerequisites that precede it are
made before the prerequisites that follow it in the line.
Loops are not
detected and targets that form loops will be silently ignored.
d1312 2
a1313 3
.Sh SPECIAL TARGETS
Special targets may not be included with other targets, i.e., they must be
the only target specified.
d1316 1
a1316 1
Any command lines attached to this target are executed before anything
d1319 2
a1320 18
In parallel mode, don't scan the commands for
.Nm ,
let recursive
.Fl j
behavior apply.
.It Ic .DEFAULT
This is sort of a
.Ic .USE
rule for any target (that was used only as a prerequisite) that
.Nm
can't figure out any other way to create.
Uses only the commands.
The
.Ic .IMPSRC
variable of a target that inherits
.Ic .DEFAULT Ns 's
commands is set
to the target's own name.
d1322 2
a1323 2
Any command lines attached to this target are executed after everything
else is done.
d1325 6
a1330 11
In parallel mode, don't scan the commands for
.Nm ,
assume the whole target invokes recursive commands and don't start
commands for other targets until that target is finished building.
.It Ic .IGNORE
Mark each of the prerequisites with the
.Ic .IGNORE
attribute.
If no prerequisites are specified, this is the equivalent of specifying the
.Fl i
option.
d1332 1
a1332 1
Mark all prerequisites as being up-to-date.
d1334 3
a1336 8
Execute the commands associated with this target even if the
.Fl n
or
.Fl t
options were specified.
Can be used to mark recursive
.Nm make Ns 's ,
prefer standard
d1364 1
a1364 1
The named targets are made in sequence.
d1370 2
a1371 2
The prerequisites are directories which are to be searched for files not
found in the current directory.
d1374 4
a1377 3
.It Ic .PATH\fIsuffix\fR
The prerequisites are directories which are to be searched for suffixed files
not found in the current directory.
d1379 1
a1379 2
first searches the suffixed search path, before reverting to the default
path if the file is not found there.
d1381 37
a1417 24
Apply the
.Ic .PHONY
attribute to any specified prerequisites.
Targets with this attribute are always
considered to be out of date.
.It Ic .PRECIOUS
Apply the
.Ic .PRECIOUS
attribute to any specified prerequisites.
If no prerequisites are specified, the
.Ic .PRECIOUS
attribute is applied to every
target in the file.
.It Ic .SILENT
Apply the
.Ic .SILENT
attribute to any specified prerequisites.
If no prerequisites are specified, the
.Ic .SILENT
attribute is applied to every
command in the file.
.It Ic .SUFFIXES
See
.Sx INFERENCE RULES .
@


1.95
log
@rework make documentation to correspond to usual terms (prerequisites
instead of "sources", target rules, makefile names).
document most recent changes.
discussed with jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.94 2012/09/21 07:55:20 espie Exp $
d33 1
a33 1
.Dd $Mdocdate: September 21 2012 $
d178 2
d209 1
a209 1
Print debugging information about suffix-transformation rules.
d267 1
a267 1
The exact relationship between the target and the prerequisite is determined
a268 8
Note that the use of several targets is merely a shorthand for duplicate
rules.
Specifically,
.Bd -literal -offset indent
target1 target2: reqa reqa
	cmd1
	cmd2
.Ed
d270 1
a270 17
is just a short form of
.Bd -literal -offset indent
target1: reqa reqa
	cmd1
	cmd2
target2: reqa reqa
	cmd1
	cmd2
.Ed
.Pp
.Nm
does not support Solaris syntax for true multiple targets:
.Bd -literal -offset indent
target1 + target2: reqa reqa
	cmd1
	cmd2
.Ed
d275 11
a285 4
A target is considered out-of-date if its modification time is less than
those of any of its prerequisites.
Prerequisites for a target accumulate over dependency lines
when this operator is used.
d290 10
a299 5
Targets are always re-created, but not until all prerequisites have been
examined and re-created as necessary.
Prerequisites for a target accumulate over dependency lines when this
operator is used.
The target is removed if
d303 9
a311 5
If no prerequisites are specified, the target is always re-created.
Otherwise, a target is considered out-of-date if any of its prerequisites has
been modified more recently than the target.
Prerequisites for a target do not accumulate over dependency lines when this
operator is used.
d318 3
d322 3
a324 1
operator is a fairly standard extension.
d351 27
d418 68
d565 1
a565 1
implied rule (suffix rule) is in scope.
d587 3
a589 3
should only be used for actual implied rules.
It is also set when there is an implied rule that matches the current
dependency in scope.
d1386 2
a1387 4
Each prerequisites specifies a suffix to
.Nm make .
If no prerequisites are specified, any previously specified suffixes
are deleted.
@


1.94
log
@major overhaul of the way make handle jobs, inspired by dpb:
instead of forking a "job" per target, and having that job further fork
separate commands, have make maintain a list of jobs, indexed by pid
of currently running commands, and handle process termination
continuation-style.  This has lots of benefits:
- make is responsible for most printing, so we no longer need pipes nor
job control: make -j jobs see the tty.
- no more special-casing for jobs that don't really execute anything.
- unify code for make -jn and make -B, including signal handlers and
job waiting.  So make -n, make -q, +cmd now run commands in the same
way in all cases.
- unified more accurate error-reporting, as make knows precisely which
command failed. Commands are tagged with their lines, and we display failing
commands in silent mode.
- fine-grained "expensive" command handling (recursion limiter). Do it
per-command instead of per-target.

Moreover, signal response is now simpler, as we just block the signals
in a small critical sections, test for events, and sigpause (thanks a lot
to guenther@@ and millert@@), so running make is now almost always paused
without any busy-waiting.

Thanks to everyone who tested and gave input.
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.93 2012/04/11 18:27:30 espie Exp $
d33 1
a33 1
.Dd $Mdocdate: April 11 2012 $
d41 1
a41 1
.Op Fl BeiknPqrSst
d46 1
a46 1
.Op Fl j Ar max_jobs
d56 10
a65 6
Its input is a list of specifications as to the files upon which programs
and other files depend.
If the file
.Sq Pa BSDmakefile
exists, it is read for this list of specifications.
If it does not exist, the files
d68 7
a74 3
.Sq Pa Makefile
are tried in order.
If the file
d76 3
a78 1
exists, it is read in addition to the makefile (see
d93 1
a93 4
Specify a makefile to read instead of the default
.Sq Pa makefile
and
.Sq Pa Makefile .
d111 3
d143 4
a146 5
Try to be backwards compatible by executing a single shell per command and
by executing the commands to make the sources of a dependency line in sequence.
This is turned on by default unless
.Fl j
is used.
d168 1
a168 1
Print debugging information about expensive jobs heuristics.
d177 1
a177 1
Print debugging information about external jobs forked.
d198 1
a198 1
will wait between 0 and ${RANDOM_DELAY} seconds at the start of each job.
d218 2
a219 2
.It Fl j Ar max_jobs
Specify the maximum number of jobs that
a221 3
Turns compatibility mode off, unless the
.Fl B
flag is also specified.
a233 6
.It Fl P
Collate the output of a given job and display it only when the job finishes,
instead of mixing the output of parallel jobs together.
This option has no effect unless
.Fl j
is used too.
d245 2
a246 2
There are seven different types of lines in a makefile: file dependency
specifications, shell commands, variable assignments, include statements,
d251 3
d259 1
a259 1
.Sh FILE DEPENDENCY SPECIFICATIONS
d261 1
a261 1
or more sources.
d264 2
a265 3
on the sources
and are usually created from them.
The exact relationship between the target and the source is determined
d271 1
a271 1
target1 target2: depa depb
d278 1
a278 1
target1: depa depb
d281 1
a281 1
target2: depa depb
d289 1
a289 1
target1 + target2: depa depb
d298 3
a300 3
those of any of its sources.
Sources for a target accumulate over dependency lines when this operator
is used.
d305 1
a305 1
Targets are always re-created, but not until all sources have been
d307 2
a308 2
Sources for a target accumulate over dependency lines when this operator
is used.
d313 2
a314 2
If no sources are specified, the target is always re-created.
Otherwise, a target is considered out-of-date if any of its sources has
d316 1
a316 1
Sources for a target do not accumulate over dependency lines when this
d330 1
a330 1
As an extension, targets and sources may contain the shell wildcard
d343 1
a343 1
component of the target or source, and must be used to describe existing
d355 6
a360 1
Each of the commands in this script
a362 4
While any target may appear on a dependency line, only one of these
dependencies may be followed by a creation script, unless the
.Sq Ic ::
operator is used.
d382 1
a382 1
The command is always executed using
d387 5
d470 1
a470 1
The name of the source from which this target is to be built, if a valid
d516 1
a516 1
The list of all sources for this target.
a658 8
.It Va .INCLUDES
See
.Ic .INCLUDES
special target.
.It Va .LIBS
See
.Ic .LIBS
special target.
d1127 1
a1127 1
.Sh SPECIAL SOURCES
a1132 12
.It Ic .MADE
Mark all sources of this target as being up-to-date.
.It Ic .MAKE
Execute the commands associated with this target even if the
.Fl n
or
.Fl t
options were specified.
Can be used to mark recursive
.Nm make Ns 's ,
prefer standard
.Sq Ic + Ns Ar cmd .
d1138 1
a1138 1
This source prevents this target from being selected.
d1148 1
a1148 1
This source prevents the target from being removed.
d1157 2
a1158 2
When the target is used as a source for another target, the other target
acquires the commands, sources, and attributes (except for
d1161 1
a1161 1
source.
d1169 2
a1170 2
appears in a dependency line, the sources that precede it are
made before the sources that succeed it in the line.
d1190 1
a1190 1
rule for any target (that was used only as a source) that
d1206 2
a1207 2
assume target is recursive and don't start other jobs until
it is finished.
d1209 1
a1209 1
Mark each of the sources with the
d1212 1
a1212 1
If no sources are specified, this is the equivalent of specifying the
d1215 12
a1226 21
.It Ic .INCLUDES
A list of suffixes that indicate files that can be included in a source
file.
The suffix must have already been declared with
.Ic .SUFFIXES ,
any suffix so declared will have the directories in its search path (see
.Ic .PATH )
placed in the
.Va .INCLUDES
special variable, each preceded by a
.Fl I
flag.
.It Ic .INTERRUPT
If
.Nm
is interrupted, the commands for this target will be executed.
.It Ic .LIBS
This does for libraries what
.Ic .INCLUDES
does for include files, except that the flag used is
.Fl L .
d1259 1
a1259 1
The sources are directories which are to be searched for files not
d1261 1
a1261 1
If no sources are specified, any previously specified directories are
d1264 1
a1264 1
The sources are directories which are to be searched for suffixed files
d1272 1
a1272 1
attribute to any specified sources.
d1278 2
a1279 2
attribute to any specified sources.
If no sources are specified, the
d1286 2
a1287 2
attribute to any specified sources.
If no sources are specified, the
d1292 1
a1292 1
Each source specifies a suffix to
d1294 2
a1295 1
If no sources are specified, any previously specified suffixes are deleted.
d1363 1
a1363 1
utility is compliant with the
d1365 1
a1365 2
specification,
though its presence is optional.
d1368 1
a1368 1
.Op Fl BDdIjmPV
d1392 4
d1477 2
a1478 2
is only used in parallel mode, so
keep dependency ordered for sequential mode!
d1491 3
a1493 2
only limits the number of concurrent makes it knows about.
During recursive invocations, each level will multiply the number
d1496 14
@


1.93
log
@make has had heuristics to avoid parallel make recursion.
Sometimes they mess up, so add .CHEAP/.EXPENSIVE to explicitly tell make
'hey this is not THAT bad' or 'worse than you think'.
agreed by guenther@@, millert@@ (and some tweaks)
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.92 2011/05/02 11:14:11 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: May 2 2011 $
d158 2
a166 2
.It Ar J
Print job tokens showing which output corresponds to what job.
d168 1
a168 1
Print debugging information about running multiple shells.
d193 4
d1141 4
a1144 2
Normally used to mark recursive
.Nm make Ns 's .
d1202 1
a1202 2
rule for any target (that was used only as a
source) that
d1205 1
a1205 1
Only the shell script is used.
@


1.92
log
@no need to escape `|'; as discussed with schwartze
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.91 2011/01/23 20:43:55 schwarze Exp $
d33 1
a33 1
.Dd $Mdocdate: January 23 2011 $
d1187 6
d1210 5
@


1.91
log
@Remove an ugly workaround that was needed to cope with the 9-argument-limit
of our former groff-1.15.  The workaround relied on undocumented behaviour
of stand-alone .Xo inside .Bd -unfilled; in groff-1.20.1, that undocumented
behaviour is different and the workaround produces wrong output.
Mandoc is happy either way.
While here, remove a useless escape sequence from the next line.
"i guess that's ok" jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.90 2010/10/18 14:42:16 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: October 18 2010 $
d994 1
a994 1
.It Cm \&|\&|
d1000 1
a1000 1
.Dq \&|\&| .
@


1.90
log
@remove references to now removed usd/psd/smm docs;
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.89 2010/09/29 07:44:56 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: September 29 2010 $
d1096 1
a1096 5
.Xo
.Ic .for Ar variable Op Ar variable ...
.Ic in
.Ar expression
.Xc
d1098 1
a1098 1
.Ic \&.endfor
@


1.89
log
@various EXIT STATUS fixes; from Daniel Dickman
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.88 2010/07/19 21:43:17 espie Exp $
d33 1
a33 1
.Dd $Mdocdate: July 19 2010 $
a1367 3
.Pp
"Make \(em A Tutorial",
.Pa /usr/share/doc/psd/12.make/ .
@


1.88
log
@document new. hints from jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.87 2010/07/19 19:46:44 espie Exp $
d1342 19
@


1.87
log
@Correct $OpenBSD$ stuff
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.86 2010/02/04 07:46:20 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: February 4 2010 $
d726 5
d839 4
d848 9
@


1.86
log
@MACHINE_CPU here too;
@
text
@d1 1
a1 2
.\"	$OpenBSD: make.1,v 1.85 2010/02/03 20:45:44 miod Exp $
.\"	$OpenPackages$
d33 1
a33 1
.Dd $Mdocdate: Febuary 3 2010 $
@


1.85
log
@Add a new default variable in Makefile context, MACHINE_CPU. Its value is
decided at compile-time and is either MACHINE_CPU from <machine/param.h> if
it is defined, or the same value as MACHINE_ARCH otherwise.
This will be used to allow ports with suffixes to their canonical MACHINE_ARCH
to provide this canonical name as MACHINE_CPU, and in turn to let Makefiles
do TRT.
ok kettenis@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.84 2009/02/10 19:24:17 jmc Exp $
d34 1
a34 1
.Dd $Mdocdate: February 10 2009 $
d1293 1
@


1.84
log
@STANDARDS:
mark these utilities as being either optional (SD/FR/UP); or as
being compliant only with XPG4 (XSI); strip.1 and talk.1 are tweaked
purely for consistency;

thanks otto for feedback
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.83 2009/02/08 17:15:10 jmc Exp $
d34 1
a34 1
.Dd $Mdocdate: February 8 2009 $
d670 9
@


1.83
log
@bump the posix reference in STANDARDS to IEEE Std 1003.1-2008, with a few
updates to follow;
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.82 2008/11/04 07:22:35 espie Exp $
d34 1
a34 1
.Dd $Mdocdate: November 4 2008 $
d1330 2
a1331 1
specification.
@


1.82
log
@changes to get target equivalence to work better.
- add new file to create lists of equivalent targets (siblings)
- use that for sequential mode to have much better VPATH support
- separate checking commands from reporting error, for later.
- zap DieHorribly accordingly
- renumber existing flags
- signal_running_jobs() is simpler than pass_signal_to_jobs()
- new debug option -dn for name matching.

Similar code to handle parallel make is still missing.

thanks to Mark, Miod, Theo, Otto, Todd for tests and/or comments.
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d34 1
a34 1
.Dd $Mdocdate$
d1329 1
a1329 1
.St -p1003.1-2004
@


1.81
log
@section headings do not need to be quoted; from Alan R. S. Bueno
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.80 2008/08/01 14:19:09 bluhm Exp $
d34 1
a34 1
.Dd $Mdocdate: August 1 2008 $
d177 2
@


1.80
log
@Document the MAKEFILE variable as unreliable.
ok jmc espie
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.79 2008/03/03 23:04:33 jmc Exp $
d34 1
a34 1
.Dd $Mdocdate: March 3 2008 $
d1156 1
a1156 1
.Sh "SPECIAL TARGETS"
@


1.79
log
@tweak previous;
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.78 2008/03/02 23:56:58 espie Exp $
d34 1
a34 1
.Dd $Mdocdate: March 2 2008 $
d668 5
d1454 6
@


1.78
log
@document the two big bugs left that somewhat hinder parallel mode.
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.77 2007/12/01 17:45:02 jmc Exp $
d34 1
a34 1
.Dd $Mdocdate: December 1 2007 $
d1434 1
a1434 1
Distinct target names are treated separately, even though they might 
d1448 1
a1448 1
.Ar n.
@


1.77
log
@zap trailing whitespace;
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.76 2007/12/01 15:14:34 espie Exp $
d1433 16
@


1.76
log
@I was sure I had committed this already, grrrr.
Anyways, switch to a growable array for job to do.
Allows us to randomize it.
fix manpage.
do not add delay if just one job to run.
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d34 1
a34 1
.Dd $Mdocdate$
d178 1
a178 1
Help finding concurrency issues for parallel make by adding some 
@


1.75
log
@debug scaffolding: allows the insertion of a random delay before firing up
jobs in parallel mode.
@
text
@d178 2
a179 1
Help finding concurrency issues for parallel make by adding some randomization.
d186 1
a186 1
is defined, 
@


1.74
log
@remove extraneous space;
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.73 2007/11/03 11:43:41 espie Exp $
d34 1
a34 1
.Dd $Mdocdate: November 3 2007 $
d177 14
@


1.73
log
@document that .ORDER only means something in parallel mode
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d34 1
a34 1
.Dd $Mdocdate$
d1417 1
a1417 1
keep dependency ordered for sequential mode !
@


1.72
log
@sort arguments;
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.71 2007/11/02 17:27:24 espie Exp $
d34 1
a34 1
.Dd $Mdocdate: November 2 2007 $
d1414 4
@


1.71
log
@Work done at p2k7.


This is a really big step towards getting parallel make to work.


Note that this is not yet complete. There are still a few `details' to
fix before this works 100%.  Specifically: sequential make (compat) and
parallel make don't use the same engine, and the parallel engine still
has a few limitations. For instance, some known issues:
- parallel make does not deal with .phony targets correctly all the time.
- some errors are deadly in parallel make mode.
- parallel make NEEDS way more sturdy correspondance of file system paths
and target names, since it often needs to match dependencies to targets
before the corresponding files exist.
- some local variables like $* get set in a bogus way in some cases.
- suffix handling has issues, especially related to the NULL suffix.
So, if you find stuff that does NOT yet work with parallel make, don't go
blindly try to fix the Makefile. It's very likely you might have stumbled
into a make bug. (unless you really, really, understand Makefiles, DON'T
GO CHANGING THEM YET).



Tested by lots of people, thanks go to miod@@, and robert@@ among other people.

Quick summary of what this does:

- remove `saving commands' extension (it's not really usable, nor used)
- move compat job runner and parallel interrupt handling into engine.c
- tweak the code so that both compat and parallel mode use the same job runner
and the same interrupt handling. Remove the other one.
- optimize job runner so that, in parallel mode, the last command does not
fork if we can avoid it (as it's already running in a sub shell).
- scrape all the code that dealt with creating shell scripts from commands.
- scrape all the code that dealt with recognizing special sequences in
command output to print/not print output.
- fix the parallel job pipe to not keep around file descriptors that are not
needed.
- replace the parallel job buffering with a nicer one, that deals with
non-blocking descriptors to try to agregate as much output from one job in
one go (greed) to unconfuse the users.
- create two pipes per job, so that stdout and stderr stay separate.
- make job token printing a debug option.
- always use the parallel job-runner to `execute' commands, even if we just
print them out.
- store list of errors encountered during parallel make running, and print them
on exit, so that we know what went wrong.
- add a dirty hack to targ.c to deal with paths produced by gccmakedep.
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d34 1
a34 1
.Dd $Mdocdate$
d166 2
a169 2
.It Ar J
Print job tokens showing which output corresponds to what job.
@


1.70
log
@tweaks;
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.69 2007/07/08 17:44:20 espie Exp $
d34 1
a34 1
.Dd $Mdocdate: May 31 2007 $
d168 2
a1413 4
.Pp
The
.Ql +
command modificator is ignored in parallel make mode.
@


1.69
log
@A set of big related changes. okay millert@@, tested further by kettenis@@
and matthieu@@

This all revolves around putting ALL global variables into one single big
hash, and using flags. This removes some impossible to understand stuff,
like old varfind, and allows for some nice stuff.
- each time we reference a global variable, we create it, possibly as a dummy
variable.
- each time we go to the environment, we remember it, thus we no longer go
back to it.

Lists of dependant changes:
- isolate changes to oldVars and checkEnvFirst.
- remove VAR_CMD and VAR_GLOBAL contexts. The only distinction is in parsevar.
Split Parse_DoVar into Parse_DoVar and Parse_CmdlineVar
- rework var modules around obtain_global_var, observe flags in various
functions like Var_Value and Var_Seti.
- Var_Seti/Var_Appendi are almost the same code, use that internally.
- add magic to handle the very special SHELL variable.
- introduce Var_Definedi for the cases where we don't want the actual
value, to simplify tests.
- add keyword .poison, parse it and set global flags accordingly.
- do poison_checks where needed.
- document poison.
- in for loops, set variable temporarily, so that Var_SubstVar will also
substitute it in varmodifiers expressions.
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.68 2007/05/31 19:20:13 jmc Exp $
d848 1
a848 1
Any further reference to 
d851 1
a851 5
.It Xo
.Ic \&.poison \&!defined 
.Po Ar variable
.Pc
.Xc
d854 2
a855 6
in a context  where it is not defined.
.It Xo
.Ic \&.poison empty
.Po Ar variable
.Pc
.Xc
d858 1
a858 1
in a context  where it is not defined or empty.
@


1.68
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.67 2007/05/30 04:41:34 jmc Exp $
d34 1
a34 1
.Dd $Mdocdate$
d846 21
@


1.67
log
@- use a consistent text for STANDARDS
- note which options are extensions to POSIX
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.66 2006/01/12 17:15:59 jmc Exp $
d34 1
a34 1
.Dd March 19, 1994
@


1.66
log
@change incorrect FILES entries for makefiles;
problem found by marc balmer;
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.65 2005/12/29 10:09:51 jmc Exp $
d1289 1
d1291 7
a1297 2
mostly conforms to the Single Unix Specification, Version 2,
with some noted extensions and a few problems.
@


1.65
log
@correction from ray lai;
ok espie
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.64 2005/01/15 20:42:49 mbalmer Exp $
d1260 5
a1264 1
list of dependencies
d1266 3
a1268 3
list of dependencies
.It Pa makefile
list of dependencies
@


1.64
log
@Operator for comparisons is '==' and not '='.

ok naddy@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.63 2004/04/21 13:17:49 jmc Exp $
d468 1
a468 1
\&.SUFFIXES: .c.o
@


1.63
log
@- correct SYNOPSIS
- add missing options to usage() and slight sync
- point people to psd doc
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.62 2004/03/13 22:57:09 jmc Exp $
d1341 1
a1341 1
.Ql .if ${VAR} = "string" ,
d1347 1
a1347 1
\&.if ${TMACHINE} = ${MACHINE}
@


1.62
log
@.IT -> .It
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.61 2004/02/12 14:08:00 jmc Exp $
d42 1
a42 1
.Op Fl BPSeiknqrst
d1282 2
a1283 3
.Rs
.%T Make \- A Tutorial
.Re
@


1.61
log
@plural of suffix is suffixes;
idea stolen from a NetBSD PR submitted by Todd Vierling;
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.60 2004/02/09 00:32:20 espie Exp $
d1269 1
a1269 1
.IT Pa /usr/obj
@


1.60
log
@slight tweaks, ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.59 2004/01/23 23:08:47 jmc Exp $
d1240 1
a1240 1
If no sources are specified, any previously specified suffices are deleted.
@


1.59
log
@`Ns' implies `No', so `Ns No' -> `Ns'; (even simpler in adduser(8))
discussed with todd@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.58 2003/11/22 11:52:49 espie Exp $
d50 1
a50 1
.Op Ar variable Ns = Ns Ar value
d124 1
a124 1
.It Ar variable Ns = Ns Ar value
d126 1
a126 1
.Ar variable
d367 3
@


1.58
log
@:mod, simpler search patterns. Idea from NetBSD.
ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.57 2003/09/29 11:35:11 jmc Exp $
d50 1
a50 1
.Op Ar variable Ns No = Ns Ar value
d124 1
a124 1
.It Ar variable Ns No = Ns Ar value
d779 1
a779 1
.It Ar :old_string Ns No = Ns Ar new_string
@


1.57
log
@- add some indent and spacing
- punctuation fixes
- update SEE ALSO
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.56 2003/09/04 22:14:43 jmc Exp $
d663 1
a663 1
.It Cm E
d665 1
a665 1
.It Cm H
d667 1
a667 1
.It Cm L
d669 1
a669 1
.It Cm U
d671 1
a671 1
.It Cm M Ns Ar pattern
d682 1
a682 1
.It Cm N Ns Ar pattern
d684 1
a684 1
.Cm M ,
d687 1
a687 1
.It Cm Q
d691 1
a691 1
.It Cm R
d694 1
a694 1
.It Cm S No \&/ Ar old_string Xo
d747 1
a747 1
.It Cm C No \&/ Ar pattern Xo
d753 1
a753 1
.Cm C
d755 1
a755 1
.Cm S
d777 1
a777 1
.It Cm T
d779 1
a779 1
.It Ar old_string Ns No = Ns Ar new_string
@


1.56
log
@put escapes in the right place;
(i.e. stuff I got wrong the first time, or missed)

this includes some .Cd's with missing quotes and .Nm abuse in man4;
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.55 2003/09/02 18:50:06 jmc Exp $
d192 1
a192 1
.Ar B
d246 1
a246 1
.Bd -literal
d251 1
d253 1
a253 1
.Bd -literal
d264 1
a264 1
.Bd -literal
d344 1
a344 1
the command is treated specially.
d353 2
a354 1
has been specified (This can be useful to debug recursive Makefiles).
d377 1
a377 1
to the variable (extension)
d464 1
a464 1
.Bd -literal
d472 1
d629 1
a629 1
special target
d633 1
a633 1
special target
d813 2
a814 2
.Bd -literal
    \&.include <file>
d817 2
a818 2
.Bd -literal
    \&.   include <file>
d820 1
d1269 1
a1269 1
directory.
d1272 6
a1277 1
.Xr mkdep 1
d1317 1
a1317 1
.Bd -literal
d1343 1
a1343 1
.Bd -literal
d1358 3
a1360 2
The handling of ; and other special characters in tests may be utterly
bogus.
d1362 1
a1362 1
.Bd -literal
d1371 2
a1372 3
.Bd -literal
\&.if defined anything goes (A)
.Ed
d1376 1
a1376 1
In a .for loop, only the variable value is used, assignments will be
d1378 1
a1378 1
.Bd -literal
d1384 3
a1386 1
A will evaluate to a b c d after the loop, not z b c d.
@


1.55
log
@escape punctuation;
ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.54 2003/07/14 12:29:22 jmc Exp $
d302 1
a302 1
.Ic \&!
@


1.54
log
@- .Ql -> .Sq where literal doesn't make sense
- fix the width specifiers in lists/displays
- change the for loop into a display for better formatting

ok espie@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.53 2003/06/27 22:01:42 jmc Exp $
d307 1
a307 1
.Ql ? ,
d313 1
a313 1
.Ql ? ,
d672 1
a672 1
.Ql ? ,
@


1.53
log
@missing full stop and a .Pp;
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.52 2003/06/10 09:12:11 jmc Exp $
d60 1
a60 1
.Ql Pa BSDmakefile
d63 1
a63 1
.Ql Pa makefile
d65 1
a65 1
.Ql Pa Makefile
d68 1
a68 1
.Ql Pa .depend
d73 1
a73 1
.Ql Pa BSDmakefile
d75 1
a75 1
.Ql Pa .depend
d85 1
a85 1
.Ql Pa makefile
d87 1
a87 1
.Ql Pa Makefile .
d119 1
a119 1
.Ql Ic @@
d335 1
a335 1
.Ql Ic ::
d339 2
a340 2
.Ql Ic @@ ,
.Ql Ic \-
d342 1
a342 1
.Ql Ic + ,
d345 1
a345 1
.It Ql Ic @@
d347 1
a347 1
.It Ql Ic \-
d349 1
a349 1
.It Ql Ic +
d443 5
a447 5
.Ql Va "@@F" ,
.Ql Va "@@D" ,
.Ql Va "<F" ,
.Ql Va "<D" ,
.Ql Va "*F" ,
d449 1
a449 1
.Ql Va "*D"
d457 1
a457 1
.Ql Va \&<
d460 2
a461 1
dependency in scope. That is, in
d483 1
a483 1
.Ql Va \&> .
d486 1
a486 1
.Ql Va \&! .
d489 1
a489 1
.Ql Va \&< .
d492 1
a492 1
.Ql Va \&% .
d495 1
a495 1
.Ql Va \&? .
d498 1
a498 1
.Ql Va * .
d501 1
a501 1
.Ql Va @@ .
d601 1
a601 1
.Ql Va .CURDIR
d609 1
a609 1
.Ql Va .CURDIR
d615 1
a615 1
.Ql Va .OBJDIR
d659 1
a659 1
.Bl -tag -width Cm E\&
d674 1
a674 1
.Ql Op )
d877 1
a877 1
.Ql Ic .else
d879 1
a879 1
.Ql Ic .if .
d886 1
a886 1
.Ql Ic .else
d888 1
a888 1
.Ql Ic .ifdef .
d895 1
a895 1
.Ql Ic .else
d897 1
a897 1
.Ql Ic .ifndef .
d904 1
a904 1
.Ql Ic .else
d906 1
a906 1
.Ql Ic .ifmake .
d913 1
a913 1
.Ql Ic .else
d915 1
a915 1
.Ql Ic .ifnmake .
d939 1
a939 1
.Ql Ic \&!
d943 1
a943 1
.Ql Ic \&&& .
d948 1
a948 1
.Bl -tag -width Ic defined
d982 1
a982 1
.Ql Ic ==
d984 1
a984 1
.Ql Ic "!="
d1000 1
a1000 1
.Ql Ic .ifdef
d1002 1
a1002 1
.Ql Ic .ifndef ,
d1007 1
a1007 1
.Ql Ic .ifmake
d1009 1
a1009 1
.Ql Ic .ifnmake ,
d1018 1
a1018 1
.Ql Ic .else
d1020 1
a1020 1
.Ql Ic .endif
d1025 3
a1027 5
.Bl -tag -width Ds
.It Xo
.Ic \&.for
.Ar variable
.Op Ar variable ...
d1031 1
a1031 4
.It Xo
<make-rules>
.Xc
.It Xo
d1033 2
a1034 2
.Xc
.El
d1058 1
a1058 1
.Bl -tag -width Ic .IGNORE
d1117 1
a1117 1
.Bl -tag -width Ic .BEGIN
@


1.52
log
@- section reorder
- COMPATIBILITY merge
- macro cleanup
- kill whitespace at EOL
- new sentence, new line

ssh pages ok markus@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.51 2003/06/03 02:56:12 millert Exp $
d794 1
a794 1
.Ar new_string
d796 1
@


1.51
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.50 2003/03/28 09:56:06 jmc Exp $
a472 1

d1267 2
a1268 1
.Ev MAKEOBJDIRPREFIX directory.
d1273 4
a1276 2
.%T "Make \- A Tutorial" .
.Sh COMPATIBILITY
@


1.50
log
@little cleanup;

systrace(1) ok provos@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.49 2003/03/10 15:37:30 jmc Exp $
d16 1
a16 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
@


1.49
log
@these pages all had bad section numbers in the .Xr's;

lots of help and ok millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.48 2003/01/05 10:10:44 pvalchev Exp $
a50 1
.Bk -words
a52 1
.Ek
d55 1
d57 1
d110 1
a110 1
Do not execute any commands, but exit with status 0 if the specified targets 
d199 2
a200 2
Specify a directory in which to search for 
.Pa sys.mk 
d248 1
a248 1
rules. 
d309 1
a309 1
As an extension, targets and sources may contain the shell wildcard 
d344 1
a344 1
.Ql Ic \- 
d359 1
a359 1
The command is always executed using 
d801 1
a801 1
All modifiers are BSD extensions,  except for the standard
d1046 1
a1046 1
On each iteration of the loop, one word is assigned to each 
d1049 2
a1050 2
and these 
.Ar variables 
d1309 1
a1309 1
If you specify the same target several times in normal dependency rules,
d1334 1
a1334 1
For instance, you should write tests as
d1382 1
a1382 1
The 
@


1.48
log
@Grammar and typo fixes, general language improvements
from jmc@@prioris.mini.pw.edu.pl with changes by me
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.47 2002/08/30 22:59:01 jsyn Exp $
d607 1
a607 1
.Xr getcwd 2 .
@


1.47
log
@okay, I'll bite.  s/sports/supports/ can go in; it's clearer.
from Tomoyuki Sahara <tshr@@oak.dti.ne.jp>; nick@@ says this looks better, too
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.46 2002/06/08 00:14:09 espie Exp $
d652 1
a652 1
variable (where a
d654 1
a654 1
is whitespace delimited sequence of characters).
d1056 1
a1056 1
must be a multiple a three.
d1115 1
a1115 1
If special
d1117 1
a1117 1
source is appears in a dependency line, the sources that precede it are
d1119 1
a1119 1
Loops are not being
d1158 1
a1158 1
any suffix so declared will have the directories on its search path (see
d1241 1
a1241 1
If no sources are specified, any previous specified suffices are deleted.
d1293 2
a1294 2
.Va .MAKE ,
support for this may be removed in the future.
d1333 1
a1333 1
.Ql .if ${VAR} op something
d1335 1
a1335 1
.Ql .if ${VAR} = "string"
@


1.46
log
@.  include,
variable modifiers: standard vs non-standard.

ok miod@@, millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.45 2002/04/16 19:37:16 espie Exp $
d481 1
a481 1
sports the following local variables:
@


1.45
log
@explain how conditionals/includes/loops interact.
ok aaron@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.44 2002/03/23 16:32:16 deraadt Exp $
d801 3
d812 9
d933 1
a933 1
.Dq .
@


1.44
log
@uname(3); hunter@@dg.net.ua
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.43 2002/03/06 17:48:33 espie Exp $
d1045 3
@


1.43
log
@First step in really explaining what make does, and what's standard,
and what's not.
okay millert@@, miod@@.
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.42 2001/08/20 05:57:55 mpech Exp $
d641 1
a641 1
.Xr uname 2
@


1.42
log
@Powered by @@mantoya.
o) fix bogus .Xr usage;

millert@@ ok.
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.41 2001/05/05 12:57:48 espie Exp $
d76 58
a133 5
This manual page is intended as a reference document only.
For a more thorough introduction to
.Nm
and makefiles, please refer to
.%T "Make \- A Tutorial" .
d135 1
a135 1
The options are as follows:
a185 14
.It Fl e
Specify that environment variables override macro assignments within
makefiles.
.It Fl f Ar makefile
Specify a makefile to read instead of the default
.Ql Pa makefile
and
.Ql Pa Makefile .
If
.Ar makefile
is
.Ql \- ,
standard input is read.
Multiple makefiles may be specified, and are read in the order specified.
a190 5
.It Fl i
Ignore non-zero exit of shell commands in the makefile.
Equivalent to specifying
.Ql \-
before each command line in the makefile.
a197 3
.It Fl k
Continue processing after errors are encountered, but only on those targets
that do not depend on the target whose creation caused the error.
a209 3
.It Fl n
Display the commands that would have been executed, but do not actually
execute them.
a215 19
.It Fl q
Do not execute any commands, but exit with status 0 if the specified targets 
are up-to-date, and 1 otherwise.
.It Fl r
Do not use the built-in rules specified in the system makefile.
.It Fl S
Stop processing when an error is encountered.
Default behavior.
This is needed to negate the
.Fl k
option during recursive builds.
.It Fl s
Do not echo commands as they are executed.
Equivalent to specifying
.Ql Ic @@
before each command line in the makefile.
.It Fl t
Rather than re-building a target as specified in the makefile, create it
or update its modification time to make it appear up-to-date.
a224 5
.It Ar variable Ns No = Ns Ar value
Set the value of the variable
.Ar variable
to
.Ar value .
d230 2
d247 26
d302 9
a310 1
Targets and sources may contain the shell wildcard expressions
d328 3
d358 6
d369 2
d377 3
d381 1
a381 1
Append the value to the current value of the variable.
d383 2
a384 4
Assign the value to the variable if it is not already defined.
.It Ic \&:=
Assign with expansion, i.e., expand the value before assigning it
to the variable.
d389 1
a389 1
Any newlines in the result are replaced with spaces.
d428 1
a428 1
The seven local variables are as follows:
d430 55
d486 1
a486 1
The list of all sources for this target; also known as
d489 1
a489 1
The name of the archive file; also known as
d492 1
a492 4
The name/path of the source from which the target is to be transformed
(the
.Dq implied
source); also known as
d495 1
a495 1
The name of the archive member; also known as
d498 1
a498 2
The list of sources for this target that were deemed out-of-date; also
known as
d501 1
a501 2
The file prefix of the file, containing only the file portion, no suffix
or preceding directory components; also known as
d504 1
a504 1
The name of the target; also known as
d508 2
a509 32
The shorter forms
.Ql Va @@ ,
.Ql Va ! ,
.Ql Va \&< ,
.Ql Va \&% ,
.Ql Va ? ,
.Ql Va \&> ,
and
.Ql Va *
are permitted for backward
compatibility with historical makefiles and are not recommended.
The six variables
.Ql Va "@@F" ,
.Ql Va "@@D" ,
.Ql Va "<F" ,
.Ql Va "<D" ,
.Ql Va "*F" ,
and
.Ql Va "*D"
are
permitted for compatibility with
.At V
makefiles and are not recommended.
.Pp
Four of the local variables may be used in sources on dependency lines
because they expand to the proper value for each target on the line.
These variables are
.Ql Va .TARGET ,
.Ql Va .PREFIX ,
.Ql Va .ARCHIVE ,
and
.Ql Va .MEMBER .
d1264 4
@


1.41
log
@Document for loop mechanics for several variables.
Idea taken from NetBSD. implementation completely different,
as our loop implementation diverged a while back.
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.40 2001/05/03 14:00:58 espie Exp $
d74 1
a74 1
.Xr mkdep 1) .
@


1.40
log
@Minor manpage tweaks
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.39 2001/03/29 17:15:47 aaron Exp $
d948 1
d962 6
a967 3
The iteration
.Ar variable
is successively set to each word, and substituted in the
d970 3
@


1.39
log
@Pretty.
@
text
@d1 2
a2 1
.\"	$OpenBSD: make.1,v 1.38 2000/12/06 20:28:41 todd Exp $
d64 1
a64 1
.Pa BSDmakefile
d67 1
a67 1
.Pa makefile
d69 1
a69 1
.Pa Makefile
d72 2
a73 2
.Pa .depend
exists, it is read (see
d93 1
a93 1
to be 1, in the global context.
d111 1
a111 1
Print debugging information about the execution of for loops.
d119 4
d138 1
a138 1
.Pa makefile
d140 1
a140 1
.Pa Makefile .
d168 3
a170 1
Specify a directory in which to search for sys.mk and makefiles included
d189 2
a190 2
Do not execute any commands, but exit 0 if the specified targets are
up-to-date and 1, otherwise.
d200 1
a200 1
Do not echo any commands as they are executed.
d211 1
a211 2
.Ar variable ,
in the global context.
d241 1
a241 1
The three operators are as follows:
d516 1
a516 1
Any flag or variable setting specified on
a1254 2
.Pp
Variable handling is somewhat inefficient.
@


1.38
log
@we actually have useful code for '.for' loops, its not a no-op. ok espie@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.37 2000/11/10 05:10:34 aaron Exp $
d210 1
a210 1
.It Ar variable=value
d702 1
a702 1
.It Ar old_string=new_string
@


1.37
log
@- Section shuffling: comply to the section ordering outlined in mdoc(7).
- Some .Nm trimming.
- .Sh AUTHOR -> .Sh AUTHORS
- Other miscellaneous fixes here and there.
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.36 2000/07/31 21:01:40 espie Exp $
a110 1
Currently a no-op.
@


1.36
log
@POSIX rules: pass variables set on the command line to submakes through
MAKEFLAGS
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.35 2000/07/06 03:43:35 aaron Exp $
a1143 17
.Sh COMPATIBILITY
Older versions of
.Nm
used
.Ev MAKE
instead of
.Ev MAKEFLAGS .
This was removed for POSIX compatibility.
The internal variable
.Va MAKE
is set to the same value as
.Va .MAKE ,
support for this may be removed in the future.
.Pp
Most of the more esoteric features of
.Nm
should probably be avoided for greater compatibility.
d1175 26
a1283 9
.Sh SEE ALSO
.Xr mkdep 1
.Pp
.%T "Make \- A Tutorial" .
.Sh HISTORY
A
.Nm
command appeared in
.At v7 .
@


1.35
log
@Insert missing .El directive; todd@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.34 2000/07/01 18:08:43 espie Exp $
d511 1
a511 1
Anything specified on
@


1.34
log
@Slightly nicer wording: begins by -> begins with
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.33 2000/06/30 23:26:25 espie Exp $
d1143 1
@


1.33
log
@Recognize `+cmd' as a command that should always be executed, even in
make -n mode.

Currently works only in sequential make mode. In parallel make mode,
it's just a no-op.

Useful to debug recursive Makefiles, and part of POSIX.
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.32 2000/06/06 15:32:25 ericj Exp $
d294 1
a294 1
If a command line begins by a combination of the characters,
@


1.32
log
@close pr1260 from danh@@nfol.com
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.31 2000/04/12 21:47:49 aaron Exp $
d294 3
a296 2
If the first or first two characters of the command line are
.Ql Ic @@
d298 1
a298 1
.Ql Ic \- ,
d300 2
a301 2
A
.Ql Ic @@
d303 1
a303 2
A
.Ql Ic \-
d305 5
d1241 1
a1241 1
Variable handling is incredibly inefficient.
d1270 4
@


1.31
log
@Trailing whitespace begone!
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.30 2000/04/03 02:58:46 espie Exp $
d1226 1
a1226 1
\&.fi
@


1.30
log
@Junk CDPATH from the environment.
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.29 2000/03/11 21:40:07 aaron Exp $
d1166 1
a1166 1
also ignores and unsets 
d1192 1
a1192 1
.Nm 
d1194 1
a1194 1
e.g., in 
d1231 1
a1231 1
When handling pre-BSD 4.4 archives, 
@


1.29
log
@Various cleanups and standardizations.
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.28 2000/03/10 19:07:21 aaron Exp $
d1165 3
@


1.28
log
@Various cleanups and standardization.
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.27 2000/01/19 17:28:52 espie Exp $
d321 1
a321 1
Assign with expansion, i.e. expand the value before assigning it
d438 1
a438 1
i.e.
d1019 1
a1019 1
Special targets may not be included with other targets, i.e. they must be
@


1.27
log
@.MAIN is nothing special.
Silently ignoring all commands but the first set in a normal dependency
is a generic `feature' of make.
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.26 2000/01/02 15:59:52 espie Exp $
d63 1
a63 1
.Ql Pa BSDmakefile
d66 1
a66 1
.Ql Pa makefile
d68 1
a68 1
.Ql Pa Makefile
d71 1
a71 1
.Ql Pa .depend
d110 2
a111 2
Print debugging information about the execution of for loops. Currently a
no-op.
d134 1
a134 1
.Ql Pa makefile
d136 1
a136 1
.Ql Pa Makefile .
d156 2
a157 1
may have running at any one time. Turns compatibility mode off, unless the
d165 2
a166 1
via the <...> style.  Multiple directories can be added to form a search path.
d188 3
a190 2
Stop processing when an error is encountered.  Default
behavior. This is needed to negate the
d462 2
a463 1
the resulting directory. If that fails,
d472 2
a473 1
and tries to change into that directory.  Should that fail,
d475 2
a476 1
remains in the current directory.  If
d482 2
a483 1
variable). If it still has found no special directory,
d501 2
a502 1
command line. Its contents are stored in
d680 4
a683 2
replacement string.  Normally, the first occurrence of the pattern in
each word of the value is changed.  The
d688 2
a689 1
search pattern as occur in the word or words it is found in.  Note that
d711 2
a712 1
words may be replaced. Otherwise
d720 1
a720 1
Makefile inclusion, conditional structures and for loops  reminiscent
d882 2
a883 1
may also be an arithmetic or string comparison.  Variable expansion is
d885 2
a886 1
values are compared.  A value is interpreted as hexadecimal if it is
d888 2
a889 1
The standard C relational operators are all supported.  If after
d950 2
a951 2
is evaluated, it is split into words. The
iteration
d1014 2
a1015 1
made before the sources that succeed it in the line. Loops are not being
d1051 2
a1052 1
file. The suffix must have already been declared with
d1073 2
a1074 1
is invoked, this target will be built. This is always set, either
d1115 2
a1116 1
attribute to any specified sources. Targets with this attribute are always
d1210 2
a1211 1
in a test is very simple-minded. Currently, the only form that works is
d1236 2
a1237 1
bogus. For instance, in
d1245 2
a1246 1
The conditional handler is incredibly lame. Junk such as
d1264 2
@


1.26
log
@More bugs... fixes for most pending.
make needs quite a lot more of cleaning up yet.
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.25 1999/12/26 00:20:33 espie Exp $
d1169 12
a1180 5
In the presence of several
.Ic .MAIN
special targets,
.Nm
silently ignores all but the first.
@


1.25
log
@For loops are no longer that bad.
However, I found some more oddities while going through the scanner...
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.24 1999/12/06 22:20:34 espie Exp $
d1206 2
d1216 7
@


1.24
log
@Fix handling of
VAR!=

specifically, properly distinguish between bad commands and empty results.
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.23 1999/11/11 11:43:18 espie Exp $
d1198 1
d1206 18
a1223 1
Variable handling and for loop expansion are incredibly inefficient.
@


1.23
log
@Close bug
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.22 1999/11/10 14:11:49 espie Exp $
a1198 7
.Pp
Command-line expansion as in
.Bd -literal
VAR != cat /dev/null
.Ed
does not distinguish between problems in the command and empty command
result.
@


1.22
log
@Turn on strict-prototypes, add missing prototypes.
Move main prototype to main.c, as this is not used
from any other file.

Close open bug.
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.21 1999/11/06 14:43:57 espie Exp $
a1198 2
.Pp
Syntax errors in for loops yield erroneous line numbers.
@


1.21
log
@Document a few of the problems I've found while revamping make.

Temporary solution, until Todd or somebody else *finally* starts reviewing
the first patches of the 20,000 lines diff I currently have...
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.20 1999/09/25 14:44:00 espie Exp $
a1200 3
.Pp
End of file handling is not consistent. Some missing newlines are reported
as weird errors, others are ignored silently.
@


1.20
log
@Add :L/:U modificators (lowercase/uppercase)
To use to get ports building more user-friendly.
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.19 1999/06/05 01:21:33 aaron Exp $
d1199 19
a1217 1

@


1.19
log
@- remove trailing white space
- remove arguments from .Os macros
- remove arguments from .Nm macros, where appropriate
- some more Dq/Sq/Ql insanity
- still lots to do in the usr.bin tree... :/
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.18 1999/05/16 21:53:31 espie Exp $
d578 4
@


1.18
log
@More special targets documentation.

More odd behavior (filed as `bugs' in some cases...)
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.17 1999/03/17 17:35:01 espie Exp $
d44 1
a44 1
.Nm 
d55 1
a55 1
.Op Ar variable=value
d58 1
a58 1
.Nm make
d77 1
a77 1
.Nm make
d95 1
a95 1
.Nm make
d140 1
a140 1
.Ql Fl ,
d151 1
a151 1
.Ql Fl
d155 1
a155 1
.Nm make
d175 3
a177 3
Collate the output of a given job and display it only when the job finishes, 
instead of mixing the output of parallel jobs together.  
This option has no effect unless 
d227 3
a229 1
This creates a relationship where the targets ``depend'' on the sources
d241 1
a241 1
.Nm make
d249 1
a249 1
.Nm make
d258 1
a258 1
.Nm make
d304 1
a304 1
.Nm make
d373 3
a375 1
(the ``implied'' source); also known as
d428 2
a429 2
.Nm make
sets or knows about the following internal variables, or environment 
d441 1
a441 1
.Nm make
d446 1
a446 1
.Nm make
d451 1
a451 1
.Nm make
d454 4
a457 4
First, if 
.Ev MAKEOBJDIRPREFIX 
is defined, 
.Nm make 
d460 1
a460 1
.Nm make
d462 1
a462 1
If 
d465 1
a465 1
.Nm make 
d467 4
a470 4
.Ev MAKEOBJDIR 
and tries to change into that directory.  Should that fail, 
.Nm make
remains in the current directory.  If 
d474 4
a477 4
(see 
.Va MACHINE 
variable). If it still has found no special directory, 
.Nm make 
d481 4
a484 2
.Nm make
tries to prepend /usr/obj to the current directory name.
d486 1
a486 1
.Nm make
d494 1
a494 1
command line. Its contents are stored in 
d496 1
a496 1
.Va .MAKEFLAGS 
d503 1
a503 1
entered into the environment as 
d506 1
a506 1
.Nm make
d509 1
a509 1
A shorter synonym for 
d513 1
a513 1
.Nm make
d521 1
a521 1
.Nm make
d531 1
a531 1
.Nm make
d534 2
a535 2
List of targets 
.Nm make 
d538 1
a538 1
See 
d542 1
a542 1
See 
d546 2
a547 2
Name of the machine architecture 
.Nm make 
d550 1
a550 1
environment variable, or through 
d555 1
a555 1
.Nm make
d557 1
a557 1
.Ev MACHINE_ARCH 
d562 3
a564 1
variable (where a ``word'' is whitespace delimited sequence of characters).
d827 1
a827 1
.Nm make
d882 1
a882 1
.Nm make
d884 4
a887 1
a word it doesn't recognize, either the ``make'' or ``defined''
d893 3
a895 2
the ``defined'' expression
is applied.
d900 2
a901 1
the ``make''
d949 1
a949 1
Mark all sources of this target as being up-to-date. 
d960 1
a960 1
.Nm make
d966 1
a966 1
.Nm make
d971 1
a971 1
.Nm make
d1010 1
a1010 1
.Nm make
d1035 1
a1035 1
placed in the 
d1037 2
a1038 2
special variable, each preceded by a 
.Fl I 
d1042 1
a1042 1
.Nm make
d1045 2
a1046 2
This does for libraries what 
.Ic .INCLUDES 
d1051 1
a1051 1
.Nm make
d1053 2
a1054 2
explicitly, or implicitly when 
.Nm make
d1059 1
a1059 1
.Nm make
d1087 2
a1088 2
.Nm make
first searches the suffixed search path, before reverting to the default 
d1116 3
a1118 3
Older versions of 
.Nm make
used 
d1120 1
a1120 1
instead of 
d1123 1
a1123 1
The internal variable 
d1129 2
a1130 2
Most of the more esoteric features of 
.Nm make
d1133 1
a1133 1
.Nm make
d1157 1
a1157 1
default 
d1163 1
a1163 1
is contorted to the point of absurdity.  
d1168 1
a1168 1
.Nm make
d1173 1
a1173 1
.Nm make
d1175 1
a1175 1
.Ic MAIN 
d1200 1
a1200 1
.Nm make
@


1.17
log
@Document known problem and work-around, until I manage to get it fixed.
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.16 1999/02/23 18:24:51 espie Exp $
d44 1
a44 1
.Nm make
d76 1
a76 1
For a more thorough description of
d450 3
d454 5
a458 2
first tries to change into the prepend the path named by the environment
variable
d460 17
a476 11
to 
.Va .CURDIR .
If that fails, it then
tries to change into the directory named by the environment
variable
.Ev MAKEOBJDIR .
If that fails, it tries to change into the directory named
.Pa obj.$MACHINE
(if the environment variable
.Ev MACHINE
is not set,
d478 2
a479 6
calls
.Xr uname 2
to determine the type of machine).  If it still has found no special
directory, it next tries the directory named
.Pa obj .
Finally, if none of the above directories are available
d528 3
a530 1
todo
d532 3
a534 1
todo
d536 3
a538 1
todo
d540 7
a546 1
todo
d548 5
a552 1
todo
d1016 11
d1031 5
d1071 6
d1115 4
d1148 17
@


1.16
log
@Document the other side of .MAIN
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.15 1998/12/05 00:06:28 espie Exp $
d1097 19
@


1.15
log
@Modifications from netbsd:
- don't interfere with MACHINE/MACHINE_ARCH defines for bootstrap
- type clean-up, time_t, and printing `unknown' ints
- fix TARGET/MEMBER bug in archive rules
- memmove...
- cleaner Error handler.
- reentrant brk_string
- .MAKE env variable
- preliminary scaffolding for .NOPATH

Other improvements:
- efree
- shellneed streamlined
- display Stop in .CURDIR after an error.
- document most features and misfeatures.
- add a few OpenBSD notes to the tutorial.
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.13 1998/09/05 17:41:47 deraadt Exp $
d999 5
a1003 1
is invoked, this target will be built.
@


1.14
log
@usr.bin/ man page fixes, f-m.
@
text
@d45 1
a45 1
.Op Fl Beiknqrst
d86 3
d109 3
d174 6
d185 5
d260 1
a260 1
Targets and sources may contain the shell wildcard values
d266 1
a266 1
The values
d274 1
a274 1
The value
d367 2
a368 1
The name of the archive file.
d374 2
a375 1
The name of the archive member.
d391 3
d421 1
d425 2
a426 1
sets or knows about the following variables:
d450 8
a457 2
.Nm make
first tries to change into the directory named by the environment
d474 1
a474 1
.It Ev MAKEFLAGS
d480 4
a483 1
command line.
d487 3
d491 1
a491 2
variable which is then
entered into the environment for all programs which
d494 3
d514 1
a514 1
is set to the value of
d519 10
d1052 13
d1067 1
a1067 1
utilizes the following environment variables, if they exist:
d1069 1
a1069 1
.Ev MAKE ,
d1072 1
d1079 2
d1089 3
@


1.13
log
@more man page repairs; aaron@@ug.cs.dal.ca
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.12 1998/01/28 12:41:51 niklas Exp $
d58 1
a58 1
.Nm Make
d94 1
a94 1
.Ar Flags
d136 1
a136 1
Multiple makefile's may be specified, and are read in the order specified.
d159 3
a161 2
This path will override the default system include path: /usr/share/mk.
Furthermore the system include path will be appended to the search path used
d284 3
a286 1
Variables in make are much like variables in the shell, and, by tradition,
d308 1
a308 1
Any white-space before the assigned
d373 1
a373 1
.Ql Va \&>
d383 1
a383 1
.Ql Va "*F"
d415 1
a415 1
.Pq Va argv Op 0
d446 1
a446 1
.Ql Ev MAKEFLAGS
d454 1
a454 1
.Ql Ev MAKEFLAGS
d467 1
a467 1
.Ql Ev PWD
d473 1
a473 1
.Ql Ev PWD
d475 1
a475 1
.Ql Ev PWD
d484 1
a484 1
variable (where a ``word'' is white-space delimited sequence of characters).
d511 1
a511 1
.Ql Cm M ,
d517 1
a517 1
.Nm .
d785 1
a785 1
.Ar Expression
d803 1
a803 1
is evaluating one of these conditional expression, and it encounters
d815 2
a816 1
.Ql Ic .ifnmake , the ``make''
d845 1
a845 1
.Ic expression
d848 1
a848 1
.Ic variable
d895 1
a895 1
.Nm make Ns 's .
d1005 1
a1005 1
.Nm Make
d1015 1
a1015 1
.It .depend
d1017 1
a1017 1
.It Makefile
d1019 1
a1019 1
.It makefile
d1021 1
a1021 1
.It sys.mk
d1023 1
a1023 1
.It /usr/share/mk
d1030 1
a1030 1
.Nm Make
@


1.12
log
@Use BSDmakefile in favour of [mM]akefile if existent.  Good for
cases where you want BSDmake specific facilities not messing up other
implementations of make
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.11 1997/09/18 14:12:37 deraadt Exp $
d580 1
a580 1
modifier except that the the old and new strings, instead of being
@


1.11
log
@environment variables
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.10 1997/04/01 07:28:15 millert Exp $
d63 3
d67 1
a67 2
exists, it is read for this list of specifications.
If it does not exist, the file
d69 1
a69 1
is read.
@


1.10
log
@Sync with NetBSD (mostly by christos initial substitution/regexp from Der Mouse)

- fix the variable substitution code in make [PR/2748]
      1. change s/a/b/ so that it substitutes the first occurance of the
         pattern on each word, not only the first word.
      2. add flag '1' to the variable substitution so that the substitutions
         get performed only once.

  ***THIS IS AN INCOMPATIBLE CHANGE!***

  Unfortunately there was no way to make things consistent without
  modifying the current behavior. Fortunately none of our Makefiles
  depended on this.

            OLD:

                VAR      = aa1 aa2 aa3 aa4

                S/a/b/   = ba1 aa2 aa3 aa4
                S/a/b/g  = bb1 bb2 bb3 bb4

            NEW:
                VAR      = aa1 aa2 aa3 aa4

                S/a/b/   = ba1 ba2 ba3 ba4
                S/a/b/1  = ba1 aa2 aa3 aa4
                S/a/b/g  = bb1 bb2 bb3 bb4
                S/a/b/1g = bb1 aa2 aa3 aa4
- add regexp variable substitution via 'C/foo/bar/' [PR/2752]
- add variable quoting via the ${VAR:Q} modifier. This is useful when running
  recursive invocations of make(1):

        make VAR=${VAR:Q}

  will always work... (This may prove useful in the kernel builds...) [PR/2981]
- BSD did not traditionally have <sys/cdefs.h>; use BSD4_4 instead and include
  <sys/param.h> to grab it.
- Don't compile the regex code if MAKE_BOOTSTRAP (from gwr)
- Use explicit .c.o rule in Makefile.boot so that the bootstrap process works.
- Use only integral types in procedure arguments. [buf.c buf.h]
- Include <stdlib.h> to get getenv() prototype on SVR4
- if __STDC__ -> ifdef __STDC__ to appease SVR4
- Define const and volatile for non __STDC__
- Implement snprintf() and vsnprintf() for non BSD4_4 systems.
- Make $MACHINE_ARCH settable from the environment.
- Fix .USE directive problems: (reported by cgd)
    1. ${.*} variables did not get expanded in dependencies.
    2. expanded ${.*} variables in .USE dependencies can cause tree
       restructuring; handle it.
    3. in compat mode, expand .USE before evaluating the list of targets,
       instead of doing .USE expansions on demand, because they can cause
       tree restructuring.
- Add a .MADE directive to indicated that the children of a target are
  up-to-date, even when they are not. This is to simulate our current
  make install behavior with proper dependencies.
- Fix problems in the RE substitution error handling.
- Locate all the children of a node marked as MADE.
- Do not compile-in ${MACHINE} (as per NetBSD PR#3386)
- Disable globbing for targets/dependencies when POSIX is defined.
- Fix globbing so that patterns that don't have a matching number of [] or {}
  don't get expanded. (before the [ case got expanded to nothing!) This is
  disabled.
- Make sure that the children of nodes that are marked .MADE, are marked
  UPTODATE and their timestamps are consistent.
- Don't disable wildcards completely; they are used by other Makefiles.
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.9 1996/11/30 21:08:59 millert Exp $
d122 1
a122 1
Specify that environmental variables override macro assignments within
@


1.9
log
@Sync with NetBSD:
- Merge in FreeBSD and Lite2 changes.
- Fix bug where a non-archive target with a .a suffix would always
  be considered to be out of date, since it does not have a TOC.
- Fix NetBSD PR #2930: declare missing variable.
@
text
@d1 2
a2 2
.\"	$OpenBSD: make.1,v 1.8 1996/09/21 10:53:48 deraadt Exp $
.\"	$NetBSD: make.1,v 1.16 1996/11/06 17:59:13 christos Exp $
d509 4
d516 3
a518 3
.It Cm S No \&/ Ar old_pattern Xo
.No \&/ Ar new_pattern
.No \&/ Op Cm g
d522 3
a524 3
.Ar old_pattern
in each word to be replaced with
.Ar new_pattern .
d529 4
d534 2
a535 2
.Ar old_pattern
begins with a carat
d537 1
a537 1
.Ar old_pattern
d540 1
a540 1
.Ar old_pattern
d549 5
a553 1
.Ar old_pattern .
d566 1
a566 1
.Pq Ql \&$
d568 28
d857 2
@


1.8
log
@document special MAKEOBJDIR/obj.$MACHINE/obj behaviour of make
@
text
@d1 2
a2 2
.\"	$OpenBSD: make.1,v 1.7 1996/09/02 16:04:13 briggs Exp $
.\"	$NetBSD: make.1,v 1.15 1996/08/30 17:59:40 thorpej Exp $
d4 2
a5 2
.\" Copyright (c) 1990 The Regents of the University of California.
.\" All rights reserved.
d35 1
a35 1
.\"	from: @@(#)make.1	5.7 (Berkeley) 7/24/91
d37 1
a37 1
.Dd July 24, 1991
d45 1
a45 1
.Op Fl Beiknqrstv
d54 1
d81 1
a81 1
.It Fl B 
d148 1
a148 1
may have running at any one time. Turns compatibility mode off, unless the 
d178 10
d454 22
d563 1
a563 1
If 
d569 1
a569 1
then it is assumed that they are 
d571 1
a571 1
words may be replaced. Otherwise 
d573 2
a574 2
is the substring of 
.Ar old_string 
d579 1
a579 1
Makefile inclusion, conditional structures and for loops  reminiscent 
d705 1
a705 1
Parenthesis may be used to change the order of evaluation.
d781 1
a781 1
.Pp 
d787 2
a788 2
.Ar variable 
.Ic in 
d799 2
a800 2
.Ic expression 
is evaluated, it is split into words. The 
d803 2
a804 2
is successively set to each word, and substituted in the 
.Ic make-rules 
d959 1
d961 2
a962 1
.Ev MAKEFLAGS
d964 1
a964 1
.Ev MAKEOBJDIR .
@


1.7
log
@Sync up with NetBSD:
(christos)
	Fix bug reported by Greg Hudson where leaf (source only) nodes were
	referenced only by their basename and not by their full pathname. This
	breaks when .PATH or MAKEOBJDIR are used. There might be Makefiles
	around that try to work around this bug by prepending ${.CURDIR} to
	the sources, and they should be found and fixed. Also a lot of the gunk
	in suff.c that was attempting to work around the same problem could be
	removed.
(christos)
	- Move -D flags from Makefile to config.h and explain what they do. Add
	  -Wall -Wno-unused to CFLAGS. Add new define SYSVVARSUB to enable SysV
	  style variable substitutions and enable them.
	- Add SunOS style command substitutions via SUNSHCMD
	- Fix core dump with '{variable = value'
(christos)
	Fix bug where make will always exit with 0, even when one or more
	parallel jobs failed. (Only affects parallel make code)
(christos)
	Protect __P from being multiply defined (for systems that already
	define it)
(christos) Add strdup() since ultrix is missing it.
	From Larry Schwimmer <rosebud@@cyclone.Stanford.EDU>
(christos) Add estrdup(), a checked version of strdup and use it.
(christos) Recognize SVR4 style long filename entries in archives.
(thorpej) Tidy up some RCS ids a bit.
@
text
@d1 1
a1 1
.\"	$OpenBSD: make.1,v 1.6 1996/03/27 19:32:37 niklas Exp $
d406 22
@


1.6
log
@From NetBSD: merge of 960317
@
text
@d1 3
a3 2
.\"	$OpenBSD$
.\"	$NetBSD: make.1,v 1.14 1996/03/15 21:52:32 christos Exp $
@


1.5
log
@Implement an -m option used for replacing /usr/share/mk with a
custom search path, like $DESTDIR/usr/share/mk
@
text
@d1 2
a2 1
.\"	$NetBSD: make.1,v 1.12 1995/12/16 05:03:09 christos Exp $
d875 5
@


1.4
log
@from christos:
- Added .WAIT to synchronize between sources like other pmake variants.
- Updated documentation to include .ORDER .PARALLEL .NO_PARALLEL .NONPARALLEL
@
text
@d50 1
d134 3
a136 2
The system makefile directory is automatically included as part of this
list.
d151 8
@


1.3
log
@from christos@@netbsd:
Minor:
    - ${.PREFIX} should never contain a full pathname
    - Fixed gcc -Wall warnings
Major:
    - compatMake is now FALSE. This means that we are now running in
      full pmake mode:
          * rules on dependency lines can be executed in parallel and or
            out of sequence:

            foo: bar baz

            can fire the rule for baz before the rule for bar is fired.
            To enforce bar to be fired before baz, another rule needs to be
            added. [bar: baz]
          * adjacent shell commands in a target are now executed by a single
            invocation of the shell, not one invocation of the shell per line
      (compatMake can be turned off using the -B flag)
    - The -j flag now works... I.e. make -j 4 will fork up to four jobs in
      parallel when it can. The target name is printed before each burst
      of output caused by the target execution as '--- target ---', when j > 1
    - I have changed all the Makefiles so that they work with make -j N, and
      I have tested the whole netbsd by:
          'make -j 4 cleandir; make -j 4 depend; make -j 4; make -j 4 install'
    - I have not compiled or tested this version of make with -DREMOTE.
- Turn compat mode on by default. It gets turned off when the -j without
  the -B flag is specified. [Thus you can use -j 1 to turn it off].
- Fix malloc -> emalloc as Gordon noted.
Updates for POSIX/SVR4 compiling:
arch.c:          Don't require ranlib stuff. Not everybody has it.
dir.c:           SunOS-4 != Solaris; change #ifdef sun to #if sun && !__svr4__
job.c, compat.c: Don't use 'union wait', use int and the W*() macros.
main.c:          Check for uname() == -1; some unames return > 0...
util.c, job.c:   Add signal() with BSD semantics for svr4, don't use bsd
                 sigmask and friends.

from cgd@@netbsd:
pull in make.h.  (PAlloc() now uses emalloc(), which is prototyped in
make.h.  If the prototype is not in scope on the Alpha, I see lots
of "cast to pointer from integer of different size" warnings.)
@
text
@d1 1
a1 1
.\"	$NetBSD: make.1,v 1.11 1995/11/08 02:31:00 christos Exp $
d791 6
d845 14
@


1.2
log
@s/environmental/environment/
@
text
@d1 1
a1 1
.\"	$NetBSD: make.1,v 1.9.2.1 1995/12/05 02:50:07 jtc Exp $
d43 1
a43 1
.Op Fl eiknqrstv
d77 3
d118 1
a118 1
Specify that environment variables override macro assignments within
d143 3
a145 1
may have running at any one time.
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
.\"	$NetBSD: make.1,v 1.9 1995/06/14 15:19:37 christos Exp $
d115 1
a115 1
Specify that environmental variables override macro assignments within
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
