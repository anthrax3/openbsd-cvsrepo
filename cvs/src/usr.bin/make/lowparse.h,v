head	1.11;
access;
symbols
	OPENBSD_6_0:1.11.0.16
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.12
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.14
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.6
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.10
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.8
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.4
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.2
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.8.0.2
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.8
	OPENBSD_5_0:1.7.0.6
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.4
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.2
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.5.0.8
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.10
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.6
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.4
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.2
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.4.0.26
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.24
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.22
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.20
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.18
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.16
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.14
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.12
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.10
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.8
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.6
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2;
locks; strict;
comment	@ * @;


1.11
date	2012.10.02.10.29.31;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2012.09.21.07.55.20;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2012.08.25.08.12.56;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2012.03.22.13.47.12;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2010.07.19.19.46.44;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2010.07.19.19.30.37;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2007.09.17.09.28.36;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.23.12.34.45;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.03.13.41.07;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.23.16.40.50;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.23.16.39.45;	author espie;	state Exp;
branches;
next	;


desc
@@


1.11
log
@more changes, discussed and tested by various people.
- put back some job control, turns out it's necessary when we don't run a
shell.
- zap old #ifdef CLEANUP code... probably doesn't even compile.
- kill most of the OP_LIB code. Just keep a wee little bit for compatibility
(deprecated .LIBS and .INCLUDES, warns for weird dependencies instead of
erroring out).
- much improved debugging and -p output: sort variables, targets, rules,
output stuff in a nicer format mimicing input.
- better error message when no command is found, explain where the target comes from.
- sort final error list by file.
- show system files in errors as <bsd.prog.mk>
- reincorporate random delay, that was dropped
- optimize siginfo output by not regenerating the whole string each time.
- finish zapping old LocationInfo field that's no longer used.
@
text
@#ifndef LOWPARSE_H
#define LOWPARSE_H

/* $OpenBSD: lowparse.h,v 1.10 2012/09/21 07:55:20 espie Exp $ */

/*
 * Copyright (c) 1999 Marc Espie.
 *
 * Extensive code changes for the OpenBSD project.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE OPENBSD PROJECT AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENBSD
 * PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/* low-level parsing module:
 *	select input stream to parse, and do high-speed processing of
 *	lines: skipping comments, handling continuation lines, or skipping
 *	over dead conditionals.
 *
 * Basic template:
 *
 * Parse_Fromxxx(source);
 * do {
 * 	while ((line = Parse_ReadNormalLine(&buf)) != NULL) {
 *		handle line, use Parse_Fromxxx to push includes,
 *		Parse_ReadNextConditional to get over non-conditional lines.
 *		or Parse_ReadUnparsedLine to handle special cases manually.
 * 	}
 * } while (Parse_NextFile());
 */

/* Selection of input stream */
/* Parse_FromFile(filename, filehandle);
 *	Push given filehandle on the input stack, using filename for diagnostic
 *	messages.  The module assumes ownership of the filehandle and of
 *	the filename: provide copies if necessary.  */
extern void Parse_FromFile(const char *, FILE *);
/* Parse_FromString(str, lineno);
 *	Push expanded string str on the input stack, assuming it starts at
 *	lineno in the current file.  This is used to reparse .for loops
 *	after the variable has been expanded, hence no need to respecify
 *	the filename. The module assumes ownership of the string: provide a
 *	copy if necessary.  */
extern void Parse_FromString(char *, unsigned long);

/* Error reporting, and tagging of read structures. */
/* lineno = Parse_Getlineno();
 *	Returns the current lineno. */
extern unsigned long Parse_Getlineno(void);
/* name = Parse_Getfilename();
 *	Returns the current filename.  Safe to keep without copying.  */
extern const char *Parse_Getfilename(void);

/* Parse_FillLocation(origin)
 * 	Fill the location pointed by origin with the current location. */
extern void Parse_FillLocation(Location *);

/* Parse_SetLocation(origin)
 *	Set the "parse location" to a given origin.
 *	Used for parse errors that occur during variable expansion at
 *	runtime.
 */
extern void Parse_SetLocation(Location *);

/* continue = Parse_NextFile();
 *	Advance parsing to the next file in the input stack. Returns true
 *	if there is parsing left to do.
 */
extern bool Parse_NextFile(void);


/* line = Parse_ReadNormalLine(buf);
 *	Reads next line into buffer and return its contents.  Handles line
 *	continuation, remove extra blanks, and skip trivial comments.  tabs at
 *	beginning of line are left alone, to be able to recognize target
 *	lines. */
extern char *Parse_ReadNormalLine(Buffer);

/* line = ParseReadNextConditionalLine(buf);
 *	Returns next conditional line, skipping over everything else. */
extern char *Parse_ReadNextConditionalLine(Buffer);
/* line = ParseReadUnparsedLine(buf, type);
 *	Reads line without parsing anything beyond continuations.
 *	Handle special cases such as conditional lines, or lines that
 *	need a reparse (loops). */
extern char *Parse_ReadUnparsedLine(Buffer, const char *);
/* Parse_ReportErrors();
 *	At end of parsing, report on fatal errors.
 */
extern void Parse_ReportErrors(void);

extern void Parse_setcurdir(const char *);
#endif
@


1.10
log
@major overhaul of the way make handle jobs, inspired by dpb:
instead of forking a "job" per target, and having that job further fork
separate commands, have make maintain a list of jobs, indexed by pid
of currently running commands, and handle process termination
continuation-style.  This has lots of benefits:
- make is responsible for most printing, so we no longer need pipes nor
job control: make -j jobs see the tty.
- no more special-casing for jobs that don't really execute anything.
- unify code for make -jn and make -B, including signal handlers and
job waiting.  So make -n, make -q, +cmd now run commands in the same
way in all cases.
- unified more accurate error-reporting, as make knows precisely which
command failed. Commands are tagged with their lines, and we display failing
commands in silent mode.
- fine-grained "expensive" command handling (recursion limiter). Do it
per-command instead of per-target.

Moreover, signal response is now simpler, as we just block the signals
in a small critical sections, test for events, and sigpause (thanks a lot
to guenther@@ and millert@@), so running make is now almost always paused
without any busy-waiting.

Thanks to everyone who tested and gave input.
@
text
@d4 1
a4 1
/* $OpenBSD: lowparse.h,v 1.9 2012/08/25 08:12:56 espie Exp $ */
a47 9

/* Initialization and cleanup */
#ifdef CLEANUP
extern void LowParse_Init(void);
extern void LowParse_End(void);
#else
#define LowParse_Init()
#define LowParse_End()
#endif
@


1.9
log
@- make wrong variable specs (unterminated) parse errors.
- add info to be able to pinpoint parse errors at runtime.
- let job runners abort when a parse error happens while expanding a variable
during execution
- fix an infinite loop when compiling without FEATURE_RECVARS.

okay millert@@, krw@@
the very few errors found out by this (less than 10 over src/X/ports)
fixed trivially beforehand, as requested by deraadt@@
@
text
@d4 1
a4 1
/* $OpenBSD: lowparse.h,v 1.8 2012/03/22 13:47:12 espie Exp $ */
d117 2
@


1.8
log
@minor cleanup: error messages include lineno and fileno together, so
recognize that and create a struct Location_ for it.

mostly from Jonathan Calmels, a few nits from me.

okay otto@@
@
text
@d4 1
a4 1
/* $OpenBSD: lowparse.h,v 1.7 2010/07/19 19:46:44 espie Exp $ */
d83 7
@


1.7
log
@Correct $OpenBSD$ stuff
@
text
@d4 1
a4 1
/* $OpenBSD: lowparse.h,v 1.6 2010/07/19 19:30:37 espie Exp $ */
d79 4
@


1.6
log
@two small changes:
- allow variables in SysV modifiers, as requested by matthieu@@
(since recursive variables are an extension, this just extends the
extension)
- variation on :Q  called :QL (quote list), which does quote every character
EXCEPT for whitespace. e.g.,

toto:
	@@for i in ${VAR:QL} ...
@
text
@d4 1
a4 2
/* $OpenPackages$ */
/* $OpenBSD$ */
@


1.5
log
@kill extra spaces at end of line
@
text
@d5 1
a5 1
/* $OpenBSD: lowparse.h,v 1.4 2001/05/23 12:34:45 espie Exp $ */
@


1.4
log
@Mostly clean-up:
- cut up those huge include files into separate interfaces for all modules.
Put the interface documentation there, and not with the implementation.
- light-weight includes for needed concrete types (lst_t.h, timestamp_t.h).
- cut out some more logically separate parts: cmd_exec, varname, parsevar,
timestamp.
- put all error handling functions together, so that we will be able to
clean them up.
- more systematic naming: functioni  to handle interval, function to handle
string.
- put the init/end code apart to minimize coupling.
- kill weird types like ReturnStatus and Boolean. Use standard bool (with a
fallback for non-iso systems)
- better interface documentation for lots of subsystems.

As a result, make compilation goes somewhat faster (5%, even considering
the largish BSD copyrights to read). The corresponding preprocessed
source goes down from 1,5M to 1M.

A few minor code changes as well: Parse_DoVar is no longer destructive.
Parse_IsVar functionality is folded into Parse_DoVar (as it knows what an
assignment is), a few more interval handling functions. Avoid calling
XXX_End when they do nothing, just #define XXX_End   to nothing.

Parse_DoVar is slightly more general: it will handle compound assignments
as long as they make sense, e.g., VAR +!= cmd
will work.  As a side effect, VAR++=value now triggers an error
(two + in assignment).
- this stuff doesn't occur in portable Makefiles.
- writing VAR++ = value or VAR+ +=value  disambiguates it.
- this is a good thing, it uncovered a bug in bsd.port.mk.

Tested by naddy@@. Okayed millert@@. I'll handle the fallback if there is
any. This went through a full make build anyways, including isakmpd
(without mickey's custom binutils, as he didn't see fit to share it with me).
@
text
@d5 1
a5 1
/* $OpenBSD$ */
d43 1
a43 1
 *		handle line, use Parse_Fromxxx to push includes, 
@


1.3
log
@Synch with my current work.
Numerous changes:
- generate can build several tables
- style cleanup
- statistics code
- use variable names throughout (struct Name)
- recursive variables everywhere
- faster parser (pass buffer along instead of allocating multiple copies)
- correct parser. Handles comments everywhere, and ; correctly
- more string intervals
- simplified dir.c, less recursion.
- extended for loops
- sinclude()
- finished removing extra junk from Lst_*
- handles ${@@D} and friends in a simpler way
- cleaned up and modular VarModifiers handling.
- recognizes some gnu Makefile usages and errors out about them.

Additionally, some extra functionality is defined by FEATURES. The set of
functionalities is currently hardcoded to OpenBSD defaults, but this may
include support for some NetBSD extensions, like ODE modifiers.

Backed by miod@@ and millert@@, who finally got sick of my endless patches...
@
text
@d1 3
d33 18
a50 4
#ifndef LOWPARSE_H
#define LOWPARSE_H
extern void Parse_FromFile(char *, FILE *);
extern Boolean Parse_NextFile(void);
d54 3
d58 49
a106 4
extern char *ParseReadLine(Buffer);
extern char *ParseSkipGetLine(Buffer);
extern char *ParseGetLine(Buffer, const char *);
extern void Finish_Errors(void);
@


1.2
log
@This is complementary to the previous patch.

There is no code change in this patch, we just move the remaining
`lowparse' functions to the right file, and adjust the interface file
accordingly.

Reviewed by miod@@
@
text
@d1 2
a2 1
/* $OpenBSD: lowparse.h,v 1.1 2000/06/23 16:39:45 espie Exp $ */
d32 2
a33 2
extern void Parse_FromFile __P((char *, FILE *));
extern Boolean Parse_NextFile __P((void));
d35 2
a36 2
extern void LowParse_Init __P((void));
extern void LowParse_End __P((void));
d38 4
a41 3
extern char *ParseReadLine __P((void));
extern char *ParseSkipLine __P((int));
extern void Finish_Errors __P((void));
@


1.1
log
@This patch is worth a lot, speed-wise.

This does introduce a proper stack of IFiles to handle included files:
instead of having the current file be a special case, it's also an IFile.

The corresponding code is slightly unobfuscated, removing the error-prone
ParseEOF function, freeing the filename systematically (thus, main.c needs
to strdup stdin), and merging both include functions lookup into one.

The speed gain comes from changing the IFile structure to merge with
fgetln seamlessly.

The low-level parse code is mostly moved to a new file, lowparse.c, to
make things easier to read (see next patch as well).

Accordingly, util.c gains a fgetln.

Note the interaction between Parse_File, Dir_FindFile, and ReadMakefile in
main.c. This patch closes a subtle memory hole (only the Makefile names,
so rather small).

Reviewed by miod@@.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d37 2
a39 17
extern void ParseUnreadc __P((char));

/* Definitions for handling #include specifications */
typedef struct IFile_ {
    char           	*fname;	/* name of file */
    unsigned long      	lineno;	/* line number */
    FILE 		*F;	/* open stream */
    char 		*str;	/* read from char area */	
    char 		*ptr;	/* where we are */
    char 		*end;	/* don't overdo it */
} IFile;

IFile	*current;

int newline __P((void));
#define ParseReadc()	current->ptr < current->end ? *current->ptr++ : newline()

@

