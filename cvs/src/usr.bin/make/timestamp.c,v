head	1.10;
access;
symbols
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.18
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.14
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.10
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.12
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.4
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.8
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.6
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.2
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.7.0.6
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.4
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.6.0.6
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.4
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.2
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.3.0.10
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.6
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.4
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.2
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.2.0.14
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.12
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.10
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.8
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.6
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.4
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.1.0.12
	OPENBSD_3_5_BASE:1.1
	OPENBSD_3_4:1.1.0.10
	OPENBSD_3_4_BASE:1.1
	OPENBSD_3_3:1.1.0.8
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.6
	OPENBSD_3_2_BASE:1.1
	OPENBSD_3_1:1.1.0.4
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.2
	OPENBSD_3_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.10
date	2013.05.22.12.14.08;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2013.04.23.14.32.53;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2013.04.22.07.21.52;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2011.12.10.04.12.36;	author guenther;	state Exp;
branches;
next	1.6;

1.6
date	2010.07.19.19.46.44;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2010.07.19.19.30.38;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2009.08.16.09.53.43;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2007.09.16.12.09.36;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2004.04.07.13.11.36;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.23.12.34.50;	author espie;	state Exp;
branches;
next	;


desc
@@


1.10
log
@as checked through thorough tests, youngest->mtime == ctime, so ditch
the extra field.

remove some extra abstraction layer: use clock_gettime directly
instead of ts_set_from_now (what is "now" anyways)

time_to_string takes param by pointer

rename "now" into starttime (more accurate term)

randomize queue uses arc4random_uniform (prompted by deraadt@@)

display debug timestamp with ns too (it's debug, so it doesn't really
matter whichever way it's done, as long as it's done)

okay millert@@
@
text
@/*	$OpenBSD: timestamp.c,v 1.9 2013/04/23 14:32:53 espie Exp $ */

/*
 * Copyright (c) 2001 Marc Espie.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE OPENBSD PROJECT AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENBSD
 * PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#include <sys/time.h>
#include <stdio.h>
#include <string.h>
#include "config.h"
#include "defines.h"
#include "timestamp.h"


struct timespec starttime;

int
set_times(const char *f)
{
    return utimes(f, NULL);
}

#define PLACEHOLDER "XXXXXXXXX "
char *
time_to_string(struct timespec *t)
{
	struct tm *parts;
	static char buf[128];
	char *s;

	parts = localtime(&t->tv_sec);
	strftime(buf, sizeof buf, "%H:%M:%S." PLACEHOLDER "%b %d, %Y", parts);
	s = strstr(buf, PLACEHOLDER);
	if (s) {
		snprintf(s, sizeof(PLACEHOLDER), "%09ld", t->tv_nsec);
		s[9] = ' ';
	}
	buf[sizeof(buf) - 1] = '\0';
	return buf;
}

@


1.9
log
@remove TIMESTAMP abstraction layer, prodded by theo.
while there, clean up includes.
use strtoll for ar timestamps (pretty much unused in reality, more
standard conforming than anything)

use idea from Todd to adapt to time_t being 32 bits OR 64 bits
(pedantically correct: INT_MIN would work just fine up to 1910 or so...)

okay millert@@, gone thru a make build.
@
text
@d1 1
a1 1
/*	$OpenBSD: timestamp.c,v 1.8 2013/04/22 07:21:52 espie Exp $ */
d28 2
d35 1
a35 1
struct timespec now;	/* The time at the start of this whole process */
d43 1
d45 1
a45 1
time_to_string(struct timespec time)
d49 1
a49 1
	time_t t;
d51 7
a57 4
	t = timestamp2time_t(time);

	parts = localtime(&t);
	strftime(buf, sizeof buf, "%H:%M:%S %b %d, %Y", parts);
@


1.8
log
@unifdef non full TIMESPEC code
@
text
@d1 1
a1 1
/*	$OpenBSD: timestamp.c,v 1.7 2011/12/10 04:12:36 guenther Exp $ */
d27 1
d33 1
a33 1
TIMESTAMP now;		/* The time at the start of this whole process */
d42 1
a42 1
time_to_string(TIMESTAMP time)
@


1.7
log
@Use clock_gettime() to get a high precision timestamp, instead of
converting gettimeofday()'s output, and pass utimes() NULL to get
the time from inside the kernel instead

ok espie@@, stress testing on NFS by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: timestamp.c,v 1.6 2010/07/19 19:46:44 espie Exp $ */
a30 4
#ifndef USE_TIMESPEC
#include <sys/types.h>
#include <utime.h>
#endif
a36 1
#ifdef USE_TIMESPEC
a37 7
#else
    struct utimbuf times;

    time(&times.actime);
    times.modtime = times.actime;
    return utime(f, &times);
#endif
@


1.6
log
@Correct $OpenBSD$ stuff
@
text
@d1 1
a1 1
/*	$OpenBSD: timestamp.c,v 1.5 2010/07/19 19:30:38 espie Exp $ */
d42 1
a42 5
    struct timeval tv[2];

    gettimeofday(&tv[0], NULL);
    tv[1] = tv[0];
    return utimes(f, tv);
@


1.5
log
@two small changes:
- allow variables in SysV modifiers, as requested by matthieu@@
(since recursive variables are an extension, this just extends the
extension)
- variation on :Q  called :QL (quote list), which does quote every character
EXCEPT for whitespace. e.g.,

toto:
	@@for i in ${VAR:QL} ...
@
text
@d1 1
a1 2
/*	$OpenPackages$ */
/*	$OpenBSD$ */
@


1.4
log
@modify timestamp handling to grab current time instead of relying on a
stale timestamp.

all those diffs sent to people ages ago, who didn't answer, except for
Theo, who said he ran it with no issues, so let's get this in...
@
text
@@


1.3
log
@rename Targ_FmtTime into time_to_string and move it, as it's not related
to target nodes at all (reduces modules inter-dependencies)
@
text
@d2 1
a2 1
/*	$OpenBSD: timestamp.c,v 1.2 2004/04/07 13:11:36 espie Exp $ */
d45 2
a46 2
    TIMESPEC_TO_TIMEVAL(&tv[0], &now);
    TIMESPEC_TO_TIMEVAL(&tv[1], &now);
d51 2
a52 1
    times.actime = times.modtime = now;
@


1.2
log
@ISO function declarations, trim a few comments, rename a few variables to
more explicit/more consistent names.

okay otto@@
@
text
@d2 1
a2 1
/*	$OpenBSD: timestamp.c,v 1.1 2001/05/23 12:34:50 espie Exp $ */
d55 16
@


1.1
log
@Mostly clean-up:
- cut up those huge include files into separate interfaces for all modules.
Put the interface documentation there, and not with the implementation.
- light-weight includes for needed concrete types (lst_t.h, timestamp_t.h).
- cut out some more logically separate parts: cmd_exec, varname, parsevar,
timestamp.
- put all error handling functions together, so that we will be able to
clean them up.
- more systematic naming: functioni  to handle interval, function to handle
string.
- put the init/end code apart to minimize coupling.
- kill weird types like ReturnStatus and Boolean. Use standard bool (with a
fallback for non-iso systems)
- better interface documentation for lots of subsystems.

As a result, make compilation goes somewhat faster (5%, even considering
the largish BSD copyrights to read). The corresponding preprocessed
source goes down from 1,5M to 1M.

A few minor code changes as well: Parse_DoVar is no longer destructive.
Parse_IsVar functionality is folded into Parse_DoVar (as it knows what an
assignment is), a few more interval handling functions. Avoid calling
XXX_End when they do nothing, just #define XXX_End   to nothing.

Parse_DoVar is slightly more general: it will handle compound assignments
as long as they make sense, e.g., VAR +!= cmd
will work.  As a side effect, VAR++=value now triggers an error
(two + in assignment).
- this stuff doesn't occur in portable Makefiles.
- writing VAR++ = value or VAR+ +=value  disambiguates it.
- this is a good thing, it uncovered a bug in bsd.port.mk.

Tested by naddy@@. Okayed millert@@. I'll handle the fallback if there is
any. This went through a full make build anyways, including isakmpd
(without mickey's custom binutils, as he didn't see fit to share it with me).
@
text
@d2 1
a2 1
/*	$OpenBSD$ */
d37 1
a37 2
TIMESTAMP now;		/* The time at the start of this whole
			 * process */
d40 1
a40 2
set_times(f)
    const char *f;
@

