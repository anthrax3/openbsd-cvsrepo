head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.16
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.14
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.10
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.12
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.4
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.8
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.6
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.7.0.2
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.6.0.10
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.8
	OPENBSD_5_0:1.6.0.6
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.4
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.2
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.4.0.8
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.10
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.6
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.4
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.2
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.1.0.26
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.24
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.22
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.20
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.18
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.16
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.14
	OPENBSD_3_6_BASE:1.1
	OPENBSD_3_5:1.1.0.12
	OPENBSD_3_5_BASE:1.1
	OPENBSD_3_4:1.1.0.10
	OPENBSD_3_4_BASE:1.1
	OPENBSD_3_3:1.1.0.8
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.6
	OPENBSD_3_2_BASE:1.1
	OPENBSD_3_1:1.1.0.4
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.2
	OPENBSD_3_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2013.04.23.14.32.53;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2012.10.02.10.29.30;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2010.07.19.19.46.43;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2010.07.19.19.30.37;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2007.09.17.10.12.35;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2007.09.17.09.44.20;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2007.09.17.09.28.36;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.23.12.34.40;	author espie;	state Exp;
branches;
next	;


desc
@@


1.8
log
@remove TIMESTAMP abstraction layer, prodded by theo.
while there, clean up includes.
use strtoll for ar timestamps (pretty much unused in reality, more
standard conforming than anything)

use idea from Todd to adapt to time_t being 32 bits OR 64 bits
(pedantically correct: INT_MIN would work just fine up to 1910 or so...)

okay millert@@, gone thru a make build.
@
text
@#ifndef ARCH_H
#define ARCH_H
/*	$OpenBSD: arch.h,v 1.7 2012/10/02 10:29:30 espie Exp $ */

/*
 * Copyright (c) 2001 Marc Espie.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE OPENBSD PROJECT AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENBSD
 * PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*-
 * arch --
 *	Functions to manipulate libraries, archives and their members.
 */

#include <sys/time.h>

/* Initialization and cleanup */
extern void Arch_Init(void);

/* ok = Arch_ParseArchive(&begin, nodeLst, ctxt);
 *	Given an archive specification, add list of corresponding GNodes to
 *	nodeLst, one for each member in the spec.
 *	false is returned if the specification is invalid for some reason.
 *	Side-effect: begin is bumped to the end of the specification.  */
extern bool Arch_ParseArchive(const char **, Lst, SymTable *);
/* Arch_Touch(node);
 *	Alter the modification time of the archive member described by node
 *	to the current time.  */
extern void Arch_Touch(GNode *);
/* stamp = Arch_MTime(node);
 *	Find the modification time of a member of an archive *in the
 *	archive*, and returns it.
 *	The time is also stored in the member's GNode.  */
extern struct timespec Arch_MTime(GNode *);
/* stamp = Arch_MemMTime(node);
 *	Find the modification time of a member of an archive and returns it.
 *	To use when the member only exists within the archive.  */
extern struct timespec Arch_MemMTime(GNode *);

#endif
@


1.7
log
@more changes, discussed and tested by various people.
- put back some job control, turns out it's necessary when we don't run a
shell.
- zap old #ifdef CLEANUP code... probably doesn't even compile.
- kill most of the OP_LIB code. Just keep a wee little bit for compatibility
(deprecated .LIBS and .INCLUDES, warns for weird dependencies instead of
erroring out).
- much improved debugging and -p output: sort variables, targets, rules,
output stuff in a nicer format mimicing input.
- better error message when no command is found, explain where the target comes from.
- sort final error list by file.
- show system files in errors as <bsd.prog.mk>
- reincorporate random delay, that was dropped
- optimize siginfo output by not regenerating the whole string each time.
- finish zapping old LocationInfo field that's no longer used.
@
text
@d3 1
a3 1
/*	$OpenBSD: arch.h,v 1.6 2010/07/19 19:46:43 espie Exp $ */
d35 1
a35 3
#ifndef TIMESTAMP_TYPE
#include "timestamp_t.h"
#endif
d54 1
a54 1
extern TIMESTAMP Arch_MTime(GNode *);
d58 1
a58 1
extern TIMESTAMP Arch_MemMTime(GNode *);
@


1.6
log
@Correct $OpenBSD$ stuff
@
text
@d3 1
a3 1
/*	$OpenBSD: arch.h,v 1.5 2010/07/19 19:30:37 espie Exp $ */
a40 5
#ifdef CLEANUP
extern void Arch_End(void);
#else
#define Arch_End()
#endif
a51 5
/* Arch_TouchLib(node);
 *	Update the modification time of the library described by node.
 *	This is distinct from Arch_Touch, as it also updates the mtime
 *	of the library's table of contents.  */
extern void Arch_TouchLib(GNode *);
a60 13
/* Arch_FindLib(node, path);
 *	Search for a library node along a path, and fills the gnode's path
 *	field to the actual complete path. If we don't find it, we set the
 *	library name to libname.a, assuming some other mechanism will take
 *	care of finding it.  The library name should be in -l<name> format.  */
extern void Arch_FindLib(GNode *, Lst);
/* bool = Arch_LibOODate(node);
 *	Decide whether a library node is out-of-date. */
extern bool Arch_LibOODate(GNode *);

/* bool = Arch_IsLib(node);
 *	Decide whether a node is a library.  */
extern bool Arch_IsLib(GNode *);
@


1.5
log
@two small changes:
- allow variables in SysV modifiers, as requested by matthieu@@
(since recursive variables are an extension, this just extends the
extension)
- variation on :Q  called :QL (quote list), which does quote every character
EXCEPT for whitespace. e.g.,

toto:
	@@for i in ${VAR:QL} ...
@
text
@d3 1
a3 2
/*	$OpenPackages$ */
/*	$OpenBSD$ */
@


1.4
log
@reindent garray.h, add new function, to be used later
@
text
@d4 1
a4 1
/*	$OpenBSD: arch.h,v 1.3 2007/09/17 09:44:20 espie Exp $ */
@


1.3
log
@zap more spaces at end of line
@
text
@d4 1
a4 1
/*	$OpenBSD: arch.h,v 1.2 2007/09/17 09:28:36 espie Exp $ */
d53 1
a53 1
extern bool Arch_ParseArchive(char **, Lst, SymTable *);
@


1.2
log
@kill extra spaces at end of line
@
text
@d4 1
a4 1
/*	$OpenBSD: arch.h,v 1.1 2001/05/23 12:34:40 espie Exp $ */
d63 1
a63 1
/* stamp = Arch_MTime(node);		
d68 1
a68 1
/* stamp = Arch_MemMTime(node);		
@


1.1
log
@Mostly clean-up:
- cut up those huge include files into separate interfaces for all modules.
Put the interface documentation there, and not with the implementation.
- light-weight includes for needed concrete types (lst_t.h, timestamp_t.h).
- cut out some more logically separate parts: cmd_exec, varname, parsevar,
timestamp.
- put all error handling functions together, so that we will be able to
clean them up.
- more systematic naming: functioni  to handle interval, function to handle
string.
- put the init/end code apart to minimize coupling.
- kill weird types like ReturnStatus and Boolean. Use standard bool (with a
fallback for non-iso systems)
- better interface documentation for lots of subsystems.

As a result, make compilation goes somewhat faster (5%, even considering
the largish BSD copyrights to read). The corresponding preprocessed
source goes down from 1,5M to 1M.

A few minor code changes as well: Parse_DoVar is no longer destructive.
Parse_IsVar functionality is folded into Parse_DoVar (as it knows what an
assignment is), a few more interval handling functions. Avoid calling
XXX_End when they do nothing, just #define XXX_End   to nothing.

Parse_DoVar is slightly more general: it will handle compound assignments
as long as they make sense, e.g., VAR +!= cmd
will work.  As a side effect, VAR++=value now triggers an error
(two + in assignment).
- this stuff doesn't occur in portable Makefiles.
- writing VAR++ = value or VAR+ +=value  disambiguates it.
- this is a good thing, it uncovered a bug in bsd.port.mk.

Tested by naddy@@. Okayed millert@@. I'll handle the fallback if there is
any. This went through a full make build anyways, including isakmpd
(without mickey's custom binutils, as he didn't see fit to share it with me).
@
text
@d4 1
a4 1
/*	$OpenBSD$ */
d50 1
a50 1
 *	nodeLst, one for each member in the spec.  
d55 1
a55 1
 *	Alter the modification time of the archive member described by node 
d59 1
a59 1
 *	Update the modification time of the library described by node. 
d69 1
a69 1
 *	Find the modification time of a member of an archive and returns it. 
@

