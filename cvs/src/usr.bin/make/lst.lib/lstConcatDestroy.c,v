head	1.11;
access;
symbols
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.26
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.22
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.24
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.16
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.20
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.18
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.14
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.12
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.10
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.8
	OPENBSD_5_0:1.11.0.6
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.4
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.2
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.10.0.8
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.10
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.6
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.4
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.2
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.9.0.2
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.7.0.12
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.10
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.8
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.6
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.4
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.5.0.8
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2;
locks; strict;
comment	@ * @;


1.11
date	2010.07.19.19.46.44;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2007.09.16.09.46.14;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2007.07.30.09.51.53;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2007.07.29.13.49.54;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2004.04.07.13.11.36;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.03.02.56.12;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.29.12.53.45;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.23.12.34.54;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.03.13.41.19;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2000.09.14.13.32.08;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.17.14.44.26;	author espie;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Correct $OpenBSD$ stuff
@
text
@/*	$OpenBSD: lstConcatDestroy.c,v 1.10 2007/09/16 09:46:14 espie Exp $	*/
/*	$NetBSD: lstConcat.c,v 1.6 1996/11/06 17:59:34 christos Exp $	*/

/*
 * Copyright (c) 1988, 1989, 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Adam de Boor.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*-
 * listConcat.c --
 *	Function to concatentate two lists.
 */

#include    "lstInt.h"
#include    <stddef.h>

/*-
 *-----------------------------------------------------------------------
 * Lst_ConcatDestroy --
 *	Concatenate two lists.	The elements of the second list are
 *	destructively added to the first list.	If the elements should
 *	be duplicated to avoid confusion with another list, the
 *	Lst_Duplicate function should be called first.
 *
 * Side Effects:
 *	The second list is destroyed.
 *-----------------------------------------------------------------------
 */
void
Lst_ConcatDestroy(Lst l1, Lst l2)
{
	if (l2->firstPtr != NULL) {
		/*
		 * So long as the second list isn't empty, we just link the
		 * first element of the second list to the last element of the
		 * first list. If the first list isn't empty, we then link the
		 * last element of the list to the first element of the second
		 * list The last element of the second list, if it exists, then
		 * becomes the last element of the first list.
		 */
		l2->firstPtr->prevPtr = l1->lastPtr;
		if (l1->lastPtr != NULL)
			l1->lastPtr->nextPtr = l2->firstPtr;
		else
			l1->firstPtr = l2->firstPtr;
		l1->lastPtr = l2->lastPtr;
	}
}

@


1.10
log
@remove dead code: #define RECHECK is always on
@
text
@d1 1
a1 2
/*	$OpenPackages$ */
/*	$OpenBSD: lstConcatDestroy.c,v 1.7 2004/04/07 13:11:36 espie Exp $	*/
@


1.9
log
@everywhere except in Var_Parse, we always add/append variables to the
VAR_GLOBAL context, so make it the common case: rename the basic functions
to Var_Set_with_ctxt/Var_Append_with_ctxt, define Var_Set and Var_Append
as macros that specify VAR_GLOBAL, and use these.

okay miod@@
@
text
@@


1.8
log
@reindent, no code change
@
text
@@


1.7
log
@ISO function declarations, trim a few comments, rename a few variables to
more explicit/more consistent names.

okay otto@@
@
text
@d2 1
a2 1
/*	$OpenBSD: lstConcatDestroy.c,v 1.6 2003/06/03 02:56:12 millert Exp $	*/
d60 16
a75 16
    if (l2->firstPtr != NULL) {
	/*
	 * So long as the second list isn't empty, we just link the
	 * first element of the second list to the last element of the
	 * first list. If the first list isn't empty, we then link the
	 * last element of the list to the first element of the second list
	 * The last element of the second list, if it exists, then becomes
	 * the last element of the first list.
	 */
	l2->firstPtr->prevPtr = l1->lastPtr;
	if (l1->lastPtr != NULL)
	    l1->lastPtr->nextPtr = l2->firstPtr;
	else
	    l1->firstPtr = l2->firstPtr;
	l1->lastPtr = l2->lastPtr;
    }
@


1.6
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d2 1
a2 1
/*	$OpenBSD: lstConcatDestroy.c,v 1.5 2001/05/29 12:53:45 espie Exp $	*/
d58 1
a58 3
Lst_ConcatDestroy(l1, l2)
    Lst 		l1;	/* The list to which l2 is to be appended */
    Lst 		l2;	/* The list to append to l1 */
@


1.5
log
@Take includes out of lst.h, re-add what's needed to separate files.
Removes remaining lint stuff from lst.lib.
@
text
@d2 1
a2 1
/*	$OpenBSD: lstConcat.c,v 1.4 1998/12/05 00:06:31 espie Exp $	*/
d20 1
a20 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.4
log
@Mostly clean-up:
- cut up those huge include files into separate interfaces for all modules.
Put the interface documentation there, and not with the implementation.
- light-weight includes for needed concrete types (lst_t.h, timestamp_t.h).
- cut out some more logically separate parts: cmd_exec, varname, parsevar,
timestamp.
- put all error handling functions together, so that we will be able to
clean them up.
- more systematic naming: functioni  to handle interval, function to handle
string.
- put the init/end code apart to minimize coupling.
- kill weird types like ReturnStatus and Boolean. Use standard bool (with a
fallback for non-iso systems)
- better interface documentation for lots of subsystems.

As a result, make compilation goes somewhat faster (5%, even considering
the largish BSD copyrights to read). The corresponding preprocessed
source goes down from 1,5M to 1M.

A few minor code changes as well: Parse_DoVar is no longer destructive.
Parse_IsVar functionality is folded into Parse_DoVar (as it knows what an
assignment is), a few more interval handling functions. Avoid calling
XXX_End when they do nothing, just #define XXX_End   to nothing.

Parse_DoVar is slightly more general: it will handle compound assignments
as long as they make sense, e.g., VAR +!= cmd
will work.  As a side effect, VAR++=value now triggers an error
(two + in assignment).
- this stuff doesn't occur in portable Makefiles.
- writing VAR++ = value or VAR+ +=value  disambiguates it.
- this is a good thing, it uncovered a bug in bsd.port.mk.

Tested by naddy@@. Okayed millert@@. I'll handle the fallback if there is
any. This went through a full make build anyways, including isakmpd
(without mickey's custom binutils, as he didn't see fit to share it with me).
@
text
@d47 1
a47 9

#ifndef lint
#if 0
static char sccsid[] = "@@(#)lstConcat.c 8.1 (Berkeley) 6/6/93";
#else
UNUSED
static char rcsid[] = "$OpenBSD: lstConcat.c,v 1.4 1998/12/05 00:06:31 espie Exp $";
#endif
#endif /* not lint */
@


1.3
log
@Synch with my current work.
Numerous changes:
- generate can build several tables
- style cleanup
- statistics code
- use variable names throughout (struct Name)
- recursive variables everywhere
- faster parser (pass buffer along instead of allocating multiple copies)
- correct parser. Handles comments everywhere, and ; correctly
- more string intervals
- simplified dir.c, less recursion.
- extended for loops
- sinclude()
- finished removing extra junk from Lst_*
- handles ${@@D} and friends in a simpler way
- cleaned up and modular VarModifiers handling.
- recognizes some gnu Makefile usages and errors out about them.

Additionally, some extra functionality is defined by FEATURES. The set of
functionalities is currently hardcoded to OpenBSD defaults, but this may
include support for some NetBSD extensions, like ODE modifiers.

Backed by miod@@ and millert@@, who finally got sick of my endless patches...
@
text
@@


1.2
log
@Some systematic clean-up.
- UNUSED macro that expands to __attribute__((unused)) for gcc
- move rcsid around so that they can be tagged UNUSED.
- activate -Wunused.
- use UNUSED instead of kludgy junk for function arguments.
- add extern to all extern prototypes.
- update comments in lst.h.
- clean up var.c a little bit, constifying arguments, updating comments...
@
text
@d1 2
a2 1
/*	$OpenBSD: lstConcatDestroy.c,v 1.1 2000/06/17 14:44:26 espie Exp $	*/
d42 1
a42 1
 * listConcatDestroy.c --
d47 1
d50 1
a50 1
static char sccsid[] = "@@(#)lstConcat.c	8.1 (Berkeley) 6/6/93";
d53 1
a53 1
static char rcsid[] = "$OpenBSD: lstConcatDestroy.c,v 1.1 2000/06/17 14:44:26 espie Exp $";
a56 1

d60 3
a62 3
 *	Concatenate two lists. The elements of the second list are
 *	destructively added to the first list.  If the elements should 
 *	be duplicated to avoid confusion with another list, the 
a64 3
 * Results:
 *	SUCCESS if all went well. FAILURE otherwise.
 *
d66 1
a66 1
 *	The second list is destroyed
d71 2
a72 2
    Lst    	  	l1; 	/* The list to which l2 is to be appended */
    Lst    	  	l2; 	/* The list to append to l1 */
a75 9
	 * We set the nextPtr of the
	 * last element of list two to be NULL to make the loop easier and
	 * so we don't need an extra case should the first list turn
	 * out to be non-circular -- the final element will already point
	 * to NULL space and the first element will be untouched if it
	 * existed before and will also point to NULL space if it didn't.
	 */
	l2->lastPtr->nextPtr = NULL;
	/*
d84 1
a84 1
	if (l1->lastPtr != NULL) {
d86 1
a86 1
	} else {
a87 1
	}
@


1.1
log
@Needed to allow complete dynamic list removal.
@
text
@d1 1
a1 1
/*	$OpenBSD: lstConcat.c,v 1.4 1998/12/05 00:06:31 espie Exp $	*/
d40 6
d50 2
a51 1
static char rcsid[] = "$OpenBSD: lstConcat.c,v 1.4 1998/12/05 00:06:31 espie Exp $";
a54 6
/*-
 * listConcatDestroy.c --
 *	Function to concatentate two lists.
 */

#include    "lstInt.h"
a75 5
    LstNode  	ln;     	/* original LstNode */
    LstNode  	nln;    	/* new LstNode */
    LstNode  	last;   	/* the last element in the list. Keeps
				 * bookkeeping until the end */

@

