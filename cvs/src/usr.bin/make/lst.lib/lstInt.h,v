head	1.15;
access;
symbols
	OPENBSD_6_1:1.15.0.30
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.15.0.26
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.22
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.24
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.16
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.15.0.20
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.15.0.18
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.14
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.12
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.10
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.8
	OPENBSD_5_0:1.15.0.6
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.4
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.2
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.14.0.26
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.28
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.24
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.22
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.20
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.14.0.18
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.14.0.16
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.14
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.14.0.12
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.14.0.10
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.14.0.8
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.14.0.6
	OPENBSD_3_6_BASE:1.14
	OPENBSD_3_5:1.14.0.4
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.14.0.2
	OPENBSD_3_4_BASE:1.14
	OPENBSD_3_3:1.13.0.8
	OPENBSD_3_3_BASE:1.13
	OPENBSD_3_2:1.13.0.6
	OPENBSD_3_2_BASE:1.13
	OPENBSD_3_1:1.13.0.4
	OPENBSD_3_1_BASE:1.13
	OPENBSD_3_0:1.13.0.2
	OPENBSD_3_0_BASE:1.13
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_9:1.11.0.4
	OPENBSD_2_8:1.11.0.2
	OPENBSD_2_8_BASE:1.11
	OPENBSD_2_7:1.8.0.2
	OPENBSD_2_7_BASE:1.8
	OPENBSD_2_6:1.6.0.4
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.2
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.5.0.4
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.15
date	2010.07.19.19.46.44;	author espie;	state Exp;
branches;
next	1.14;

1.14
date	2003.06.03.02.56.12;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2001.05.23.12.34.56;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2001.05.03.13.41.22;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2000.06.17.14.43.40;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2000.06.17.14.34.09;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2000.06.10.01.41.07;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	99.12.18.21.53.34;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	99.12.18.02.11.28;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	98.12.05.00.06.32;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	98.02.22.19.57.36;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	96.11.30.21.09.18;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.06.26.05.36.51;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.12.14.03.26.56;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.45;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.45;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Correct $OpenBSD$ stuff
@
text
@/*	$OpenBSD: lstInt.h,v 1.14 2003/06/03 02:56:12 millert Exp $	*/
/*	$NetBSD: lstInt.h,v 1.7 1996/11/06 17:59:44 christos Exp $	*/

/*
 * Copyright (c) 1988, 1989, 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Adam de Boor.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	from: @@(#)lstInt.h	8.1 (Berkeley) 6/6/93
 */

/*-
 * lstInt.h --
 *	Internals for the list library
 */
#ifndef _LSTINT_H_
#define _LSTINT_H_

#include "config.h"
#include "defines.h"
#include "lst.h"

/*
 * PAlloc(var, ptype) --
 *	Allocate a pointer-typedef structure 'ptype' into the variable 'var'
 */
#define PAlloc(var,ptype)	var = (ptype) emalloc (sizeof (*var))

#endif /* _LSTINT_H_ */
@


1.14
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 2
/*	$OpenPackages$ */
/*	$OpenBSD: lstInt.h,v 1.13 2001/05/23 12:34:56 espie Exp $	*/
@


1.13
log
@Mostly clean-up:
- cut up those huge include files into separate interfaces for all modules.
Put the interface documentation there, and not with the implementation.
- light-weight includes for needed concrete types (lst_t.h, timestamp_t.h).
- cut out some more logically separate parts: cmd_exec, varname, parsevar,
timestamp.
- put all error handling functions together, so that we will be able to
clean them up.
- more systematic naming: functioni  to handle interval, function to handle
string.
- put the init/end code apart to minimize coupling.
- kill weird types like ReturnStatus and Boolean. Use standard bool (with a
fallback for non-iso systems)
- better interface documentation for lots of subsystems.

As a result, make compilation goes somewhat faster (5%, even considering
the largish BSD copyrights to read). The corresponding preprocessed
source goes down from 1,5M to 1M.

A few minor code changes as well: Parse_DoVar is no longer destructive.
Parse_IsVar functionality is folded into Parse_DoVar (as it knows what an
assignment is), a few more interval handling functions. Avoid calling
XXX_End when they do nothing, just #define XXX_End   to nothing.

Parse_DoVar is slightly more general: it will handle compound assignments
as long as they make sense, e.g., VAR +!= cmd
will work.  As a side effect, VAR++=value now triggers an error
(two + in assignment).
- this stuff doesn't occur in portable Makefiles.
- writing VAR++ = value or VAR+ +=value  disambiguates it.
- this is a good thing, it uncovered a bug in bsd.port.mk.

Tested by naddy@@. Okayed millert@@. I'll handle the fallback if there is
any. This went through a full make build anyways, including isakmpd
(without mickey's custom binutils, as he didn't see fit to share it with me).
@
text
@d2 1
a2 1
/*	$OpenBSD: lstInt.h,v 1.6 1998/12/05 00:06:32 espie Exp $	*/
d20 1
a20 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.12
log
@Synch with my current work.
Numerous changes:
- generate can build several tables
- style cleanup
- statistics code
- use variable names throughout (struct Name)
- recursive variables everywhere
- faster parser (pass buffer along instead of allocating multiple copies)
- correct parser. Handles comments everywhere, and ; correctly
- more string intervals
- simplified dir.c, less recursion.
- extended for loops
- sinclude()
- finished removing extra junk from Lst_*
- handles ${@@D} and friends in a simpler way
- cleaned up and modular VarModifiers handling.
- recognizes some gnu Makefile usages and errors out about them.

Additionally, some extra functionality is defined by FEATURES. The set of
functionalities is currently hardcoded to OpenBSD defaults, but this may
include support for some NetBSD extensions, like ODE modifiers.

Backed by miod@@ and millert@@, who finally got sick of my endless patches...
@
text
@d50 3
a52 2
#include	  "make.h"
#include	  "lst.h"
@


1.11
log
@This removes the few instances of Lst_New left.
- replaces Lst_Duplicate with Lst_Clone, which does not allocate storage
- split Lst_Concat into Lst_Concat/Lst_ConcatDestroy
Thus, all the LstValid checks are gone, since we always invoke list
functions with valid pointers.

Note that dynamic list allocation accounted for roughly 20% of all calls
to malloc.  The extraneous calls to malloc left are now mostly in parse.c,
which makes some wasteful usage of temporary buffers.

With those few patches, the code is sturdier, and easier to maintain.

Reviewed by millert@@
@
text
@d1 2
a2 1
/*	$OpenBSD: lstInt.h,v 1.10 2000/06/17 14:34:09 espie Exp $	*/
d54 1
a54 7
 * Flags required for synchronization
 */
#define LN_DELETED  	0x0001      /* List node should be removed when done */


/*
 * PAlloc (var, ptype) --
d57 1
a57 13
#define	PAlloc(var,ptype)	var = (ptype) emalloc (sizeof (*var))

/*
 * LstNodeValid (ln, l) --
 *	Return TRUE if the LstNode ln is valid with respect to l
 */
#define LstNodeValid(ln, l)	((ln) == NULL ? FALSE : TRUE)

/*
 * LstIsEmpty (l) --
 *	TRUE if the list l is empty.
 */
#define LstIsEmpty(l)	((l)->firstPtr == NULL)
@


1.10
log
@This patch moves the definition of lists and list nodes to lst.h.
C is not well-suited for opaque data structures.

Then it proceeds by removing a lot of non-sensical casts and white space.

There are two motivations behind this change:
* small functions like Lst_First can now be redefined as macros safely
(otherwise, the cast would mean that you might write Lst_First(5) and
find out about it rather late)
* the size of the Lst data structure is exposed to user code. This will
be used to allocate lists statically, instead of malloc/free them like
crazy.
@
text
@d1 1
a1 1
/*	$OpenBSD: lstInt.h,v 1.9 2000/06/10 01:41:07 espie Exp $	*/
a62 6

/*
 * LstValid (l) --
 *	Return TRUE if the list l is valid
 */
#define LstValid(l)	((l) == NULL ? FALSE : TRUE)
@


1.9
log
@Clean-up patch: use `void *' instead of old-fashioned ClientData/Address.
@
text
@d1 1
a1 1
/*	$OpenBSD: lstInt.h,v 1.8 1999/12/18 21:53:34 espie Exp $	*/
a51 9
typedef struct ListNode {
	struct ListNode	*prevPtr;   /* previous element in list */
	struct ListNode	*nextPtr;   /* next in list */
	short	    	useCount:8, /* Count of functions using the node.
				     * node may not be deleted until count
				     * goes to 0 */
 	    	    	flags:8;    /* Node status flags */
	void		*datum;	    /* datum associated with this element */
} *ListNode;
a56 17
typedef enum {
    Head, Middle, Tail, Unknown
} Where;

typedef struct	{
	ListNode  	firstPtr; /* first node in list */
	ListNode  	lastPtr;  /* last node in list */
/*
 * fields for sequential access
 */
	Where	  	atEnd;	  /* Where in the list the last access was */
	Boolean	  	isOpen;	  /* true if list has been Lst_Open'ed */
	ListNode  	curPtr;	  /* current node, if open. NULL if
				   * *just* opened */
	ListNode  	prevPtr;  /* Previous node, if open. Used by
				   * Lst_Remove */
} *List;
d80 1
a80 1
#define LstIsEmpty(l)	(((List)l)->firstPtr == NULL)
@


1.8
log
@NIL, NILGNODE, etc, are only glorified NULL.
Get rid of them.

Get rid of list.h, nothing uses it anyway.
@
text
@d1 1
a1 1
/*	$OpenBSD: lstInt.h,v 1.7 1999/12/18 02:11:28 espie Exp $	*/
d59 1
a59 1
	ClientData	datum;	    /* datum associated with this element */
@


1.7
log
@make does not use circular lists, get rid of the extra weight.
@
text
@d1 1
a1 1
/*	$OpenBSD: lstInt.h,v 1.6 1998/12/05 00:06:32 espie Exp $	*/
a65 2
#define NilListNode	((ListNode)-1)

d78 1
a78 1
	ListNode  	curPtr;	  /* current node, if open. NilListNode if
a83 2
#define NilList	  	((List)-1)

d94 1
a94 1
#define LstValid(l)	(((Lst)l == NILLST) ? FALSE : TRUE)
d100 1
a100 1
#define LstNodeValid(ln, l)	((((LstNode)ln) == NILLNODE) ? FALSE : TRUE)
d106 1
a106 1
#define LstIsEmpty(l)	(((List)l)->firstPtr == NilListNode)
@


1.6
log
@Modifications from netbsd:
- don't interfere with MACHINE/MACHINE_ARCH defines for bootstrap
- type clean-up, time_t, and printing `unknown' ints
- fix TARGET/MEMBER bug in archive rules
- memmove...
- cleaner Error handler.
- reentrant brk_string
- .MAKE env variable
- preliminary scaffolding for .NOPATH

Other improvements:
- efree
- shellneed streamlined
- display Stop in .CURDIR after an error.
- document most features and misfeatures.
- add a few OpenBSD notes to the tutorial.
@
text
@d1 1
a1 1
/*	$OpenBSD: lstInt.h,v 1.4 1996/11/30 21:09:18 millert Exp $	*/
a74 2
	Boolean	  	isCirc;	  /* true if the list should be considered
				   * circular */
@


1.5
log
@some ansi
@
text
@@


1.4
log
@Sync with NetBSD:
- Merge in FreeBSD and Lite2 changes.
- Fix bug where a non-archive target with a .a suffix would always
  be considered to be out of date, since it does not have a TOC.
- Fix NetBSD PR #2930: declare missing variable.
@
text
@d1 1
a1 1
/*	$OpenBSD: lstInt.h,v 1.3 1996/06/26 05:36:51 deraadt Exp $	*/
d114 1
a114 1
#endif _LSTINT_H_
@


1.3
log
@rcsid
@
text
@d1 2
a2 2
/*	$OpenBSD: lstInt.h,v 1.6 1995/11/10 21:27:27 cgd Exp $	*/
/*	$NetBSD: lstInt.h,v 1.6 1995/11/10 21:27:27 cgd Exp $	*/
d5 2
a6 2
 * Copyright (c) 1988, 1989, 1990 The Regents of the University of California.
 * All rights reserved.
d39 1
a39 1
 *	from: @@(#)lstInt.h	5.4 (Berkeley) 12/28/90
@


1.2
log
@from christos@@netbsd:
Minor:
    - ${.PREFIX} should never contain a full pathname
    - Fixed gcc -Wall warnings
Major:
    - compatMake is now FALSE. This means that we are now running in
      full pmake mode:
          * rules on dependency lines can be executed in parallel and or
            out of sequence:

            foo: bar baz

            can fire the rule for baz before the rule for bar is fired.
            To enforce bar to be fired before baz, another rule needs to be
            added. [bar: baz]
          * adjacent shell commands in a target are now executed by a single
            invocation of the shell, not one invocation of the shell per line
      (compatMake can be turned off using the -B flag)
    - The -j flag now works... I.e. make -j 4 will fork up to four jobs in
      parallel when it can. The target name is printed before each burst
      of output caused by the target execution as '--- target ---', when j > 1
    - I have changed all the Makefiles so that they work with make -j N, and
      I have tested the whole netbsd by:
          'make -j 4 cleandir; make -j 4 depend; make -j 4; make -j 4 install'
    - I have not compiled or tested this version of make with -DREMOTE.
- Turn compat mode on by default. It gets turned off when the -j without
  the -B flag is specified. [Thus you can use -j 1 to turn it off].
- Fix malloc -> emalloc as Gordon noted.
Updates for POSIX/SVR4 compiling:
arch.c:          Don't require ranlib stuff. Not everybody has it.
dir.c:           SunOS-4 != Solaris; change #ifdef sun to #if sun && !__svr4__
job.c, compat.c: Don't use 'union wait', use int and the W*() macros.
main.c:          Check for uname() == -1; some unames return > 0...
util.c, job.c:   Add signal() with BSD semantics for svr4, don't use bsd
                 sigmask and friends.

from cgd@@netbsd:
pull in make.h.  (PAlloc() now uses emalloc(), which is prototyped in
make.h.  If the prototype is not in scope on the Alpha, I see lots
of "cast to pointer from integer of different size" warnings.)
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: lstInt.h,v 1.4 1995/06/14 15:21:23 christos Exp $	*/
d48 1
d93 1
a93 1
#define	PAlloc(var,ptype)	var = (ptype) malloc (sizeof (*var))
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
