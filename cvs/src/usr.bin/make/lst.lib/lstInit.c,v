head	1.19;
access;
symbols
	OPENBSD_6_0:1.19.0.26
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.19.0.22
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.19.0.24
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.19.0.16
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.19.0.20
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.19.0.18
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.19.0.14
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.19.0.12
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.19.0.10
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.19
	OPENBSD_5_1:1.19.0.8
	OPENBSD_5_0:1.19.0.6
	OPENBSD_5_0_BASE:1.19
	OPENBSD_4_9:1.19.0.4
	OPENBSD_4_9_BASE:1.19
	OPENBSD_4_8:1.19.0.2
	OPENBSD_4_8_BASE:1.19
	OPENBSD_4_7:1.18.0.8
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.18.0.10
	OPENBSD_4_6_BASE:1.18
	OPENBSD_4_5:1.18.0.6
	OPENBSD_4_5_BASE:1.18
	OPENBSD_4_4:1.18.0.4
	OPENBSD_4_4_BASE:1.18
	OPENBSD_4_3:1.18.0.2
	OPENBSD_4_3_BASE:1.18
	OPENBSD_4_2:1.17.0.2
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.15.0.12
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.10
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.15.0.8
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.15.0.6
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.15.0.4
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.15.0.2
	OPENBSD_3_6_BASE:1.15
	OPENBSD_3_5:1.14.0.4
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.14.0.2
	OPENBSD_3_4_BASE:1.14
	OPENBSD_3_3:1.13.0.8
	OPENBSD_3_3_BASE:1.13
	OPENBSD_3_2:1.13.0.6
	OPENBSD_3_2_BASE:1.13
	OPENBSD_3_1:1.13.0.4
	OPENBSD_3_1_BASE:1.13
	OPENBSD_3_0:1.13.0.2
	OPENBSD_3_0_BASE:1.13
	OPENBSD_2_9_BASE:1.10
	OPENBSD_2_9:1.10.0.4
	OPENBSD_2_8:1.10.0.2
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.6.0.2
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.4.0.4
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.2
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.19
date	2010.07.19.19.46.44;	author espie;	state Exp;
branches;
next	1.18;

1.18
date	2007.09.16.09.46.14;	author espie;	state Exp;
branches;
next	1.17;

1.17
date	2007.07.30.09.51.53;	author espie;	state Exp;
branches;
next	1.16;

1.16
date	2007.07.29.13.49.54;	author espie;	state Exp;
branches;
next	1.15;

1.15
date	2004.04.07.13.11.36;	author espie;	state Exp;
branches;
next	1.14;

1.14
date	2003.06.03.02.56.12;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2001.05.29.12.53.46;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2001.05.23.12.34.56;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2001.05.03.13.41.21;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2000.09.14.13.32.09;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2000.06.17.14.43.39;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2000.06.17.14.38.22;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2000.06.17.14.34.08;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	99.12.18.21.53.33;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	99.12.18.02.11.27;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	98.12.05.00.06.32;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	96.11.30.21.09.17;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.36.50;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.45;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.45;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Correct $OpenBSD$ stuff
@
text
@/*	$OpenBSD: lstInit.c,v 1.18 2007/09/16 09:46:14 espie Exp $	*/
/*	$NetBSD: lstInit.c,v 1.5 1996/11/06 17:59:43 christos Exp $	*/

/*
 * Copyright (c) 1988, 1989, 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Adam de Boor.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*-
 * init.c --
 *	Initialize a new linked list.
 */

#include	"lstInt.h"
#include	<stddef.h>

/*-
 *-----------------------------------------------------------------------
 * Lst_Init --
 *	Create and initialize a new list.
 *-----------------------------------------------------------------------
 */
void
Lst_Init(Lst l)
{
	l->firstPtr = NULL;
	l->lastPtr = NULL;
}

@


1.18
log
@remove dead code: #define RECHECK is always on
@
text
@d1 1
a1 2
/*	$OpenPackages$ */
/*	$OpenBSD: lstInit.c,v 1.15 2004/04/07 13:11:36 espie Exp $	*/
@


1.17
log
@everywhere except in Var_Parse, we always add/append variables to the
VAR_GLOBAL context, so make it the common case: rename the basic functions
to Var_Set_with_ctxt/Var_Append_with_ctxt, define Var_Set and Var_Append
as macros that specify VAR_GLOBAL, and use these.

okay miod@@
@
text
@@


1.16
log
@reindent, no code change
@
text
@@


1.15
log
@ISO function declarations, trim a few comments, rename a few variables to
more explicit/more consistent names.

okay otto@@
@
text
@d2 1
a2 1
/*	$OpenBSD: lstInit.c,v 1.14 2003/06/03 02:56:12 millert Exp $	*/
d54 2
a55 2
    l->firstPtr = NULL;
    l->lastPtr = NULL;
@


1.14
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d2 1
a2 1
/*	$OpenBSD: lstInit.c,v 1.13 2001/05/29 12:53:46 espie Exp $	*/
d52 1
a52 2
Lst_Init(l)
    Lst l;
@


1.13
log
@Take includes out of lst.h, re-add what's needed to separate files.
Removes remaining lint stuff from lst.lib.
@
text
@d2 1
a2 1
/*	$OpenBSD: lstInit.c,v 1.4 1998/12/05 00:06:32 espie Exp $	*/
d20 1
a20 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.12
log
@Mostly clean-up:
- cut up those huge include files into separate interfaces for all modules.
Put the interface documentation there, and not with the implementation.
- light-weight includes for needed concrete types (lst_t.h, timestamp_t.h).
- cut out some more logically separate parts: cmd_exec, varname, parsevar,
timestamp.
- put all error handling functions together, so that we will be able to
clean them up.
- more systematic naming: functioni  to handle interval, function to handle
string.
- put the init/end code apart to minimize coupling.
- kill weird types like ReturnStatus and Boolean. Use standard bool (with a
fallback for non-iso systems)
- better interface documentation for lots of subsystems.

As a result, make compilation goes somewhat faster (5%, even considering
the largish BSD copyrights to read). The corresponding preprocessed
source goes down from 1,5M to 1M.

A few minor code changes as well: Parse_DoVar is no longer destructive.
Parse_IsVar functionality is folded into Parse_DoVar (as it knows what an
assignment is), a few more interval handling functions. Avoid calling
XXX_End when they do nothing, just #define XXX_End   to nothing.

Parse_DoVar is slightly more general: it will handle compound assignments
as long as they make sense, e.g., VAR +!= cmd
will work.  As a side effect, VAR++=value now triggers an error
(two + in assignment).
- this stuff doesn't occur in portable Makefiles.
- writing VAR++ = value or VAR+ +=value  disambiguates it.
- this is a good thing, it uncovered a bug in bsd.port.mk.

Tested by naddy@@. Okayed millert@@. I'll handle the fallback if there is
any. This went through a full make build anyways, including isakmpd
(without mickey's custom binutils, as he didn't see fit to share it with me).
@
text
@d47 1
a47 9

#ifndef lint
#if 0
static char sccsid[] = "@@(#)lstInit.c	8.1 (Berkeley) 6/6/93";
#else
UNUSED
static char rcsid[] = "$OpenBSD: lstInit.c,v 1.4 1998/12/05 00:06:32 espie Exp $";
#endif
#endif /* not lint */
@


1.11
log
@Synch with my current work.
Numerous changes:
- generate can build several tables
- style cleanup
- statistics code
- use variable names throughout (struct Name)
- recursive variables everywhere
- faster parser (pass buffer along instead of allocating multiple copies)
- correct parser. Handles comments everywhere, and ; correctly
- more string intervals
- simplified dir.c, less recursion.
- extended for loops
- sinclude()
- finished removing extra junk from Lst_*
- handles ${@@D} and friends in a simpler way
- cleaned up and modular VarModifiers handling.
- recognizes some gnu Makefile usages and errors out about them.

Additionally, some extra functionality is defined by FEATURES. The set of
functionalities is currently hardcoded to OpenBSD defaults, but this may
include support for some NetBSD extensions, like ODE modifiers.

Backed by miod@@ and millert@@, who finally got sick of my endless patches...
@
text
@@


1.10
log
@Some systematic clean-up.
- UNUSED macro that expands to __attribute__((unused)) for gcc
- move rcsid around so that they can be tagged UNUSED.
- activate -Wunused.
- use UNUSED instead of kludgy junk for function arguments.
- add extern to all extern prototypes.
- update comments in lst.h.
- clean up var.c a little bit, constifying arguments, updating comments...
@
text
@d1 2
a2 1
/*	$OpenBSD: lstInit.c,v 1.9 2000/06/17 14:43:39 espie Exp $	*/
d47 1
d53 1
a53 1
static char rcsid[] = "$OpenBSD: lstInit.c,v 1.9 2000/06/17 14:43:39 espie Exp $";
a56 1

d60 1
a60 1
 *	Initialize a new list.
a68 2
    l->isOpen = FALSE;
    l->atEnd = Unknown;
d70 1
@


1.9
log
@This removes the few instances of Lst_New left.
- replaces Lst_Duplicate with Lst_Clone, which does not allocate storage
- split Lst_Concat into Lst_Concat/Lst_ConcatDestroy
Thus, all the LstValid checks are gone, since we always invoke list
functions with valid pointers.

Note that dynamic list allocation accounted for roughly 20% of all calls
to malloc.  The extraneous calls to malloc left are now mostly in parse.c,
which makes some wasteful usage of temporary buffers.

With those few patches, the code is sturdier, and easier to maintain.

Reviewed by millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lstInit.c,v 1.8 2000/06/17 14:38:22 espie Exp $	*/
d40 6
d50 2
a51 1
static char rcsid[] = "$OpenBSD: lstInit.c,v 1.8 2000/06/17 14:38:22 espie Exp $";
a54 6
/*-
 * init.c --
 *	Initialize a new linked list.
 */

#include	"lstInt.h"
@


1.8
log
@This patch introduces a distinction between
Lst_Init (constructor) and Lst_New (allocation + construction)
Lst_Destroy (destructor) and Lst_Delete (deallocation + destruction),
and uses that to turn most dynamic allocation of lists (Lst pointers)
into static structures (LIST).

Most of this is mundane, except for allGNs in targ.c, where the code must
be checked to verify that Targ_Init is called soon enough.

Lst_New is a temporary addition. All lists will soon be static.

Reviewed by millert@@, like the previous patch.
@
text
@d1 1
a1 1
/*	$OpenBSD: lstInit.c,v 1.7 2000/06/17 14:34:08 espie Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: lstInit.c,v 1.7 2000/06/17 14:34:08 espie Exp $";
a54 16
/*-
 *-----------------------------------------------------------------------
 * Lst_New --
 *	Create and initialize a new list.
 *-----------------------------------------------------------------------
 */
Lst
Lst_New()
{
    register Lst	nList;

    PAlloc(nList, Lst);
    Lst_Init(nList);

    return nList;
}
@


1.7
log
@This patch moves the definition of lists and list nodes to lst.h.
C is not well-suited for opaque data structures.

Then it proceeds by removing a lot of non-sensical casts and white space.

There are two motivations behind this change:
* small functions like Lst_First can now be redefined as macros safely
(otherwise, the cast would mean that you might write Lst_First(5) and
find out about it rather late)
* the size of the Lst data structure is exposed to user code. This will
be used to allocate lists statically, instead of malloc/free them like
crazy.
@
text
@d1 1
a1 1
/*	$OpenBSD: lstInit.c,v 1.6 1999/12/18 21:53:33 espie Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: lstInit.c,v 1.6 1999/12/18 21:53:33 espie Exp $";
d57 1
a57 1
 * Lst_Init --
a58 7
 *
 * Results:
 *	The created list.
 *
 * Side Effects:
 *	A list is created, what else?
 *
d62 1
a62 1
Lst_Init()
d67 1
a67 5

    nList->firstPtr = NULL;
    nList->lastPtr = NULL;
    nList->isOpen = FALSE;
    nList->atEnd = Unknown;
d70 15
@


1.6
log
@NIL, NILGNODE, etc, are only glorified NULL.
Get rid of them.

Get rid of list.h, nothing uses it anyway.
@
text
@d1 1
a1 1
/*	$OpenBSD: lstInit.c,v 1.5 1999/12/18 02:11:27 espie Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: lstInit.c,v 1.5 1999/12/18 02:11:27 espie Exp $";
d71 1
a71 1
    register List	nList;
d73 1
a73 1
    PAlloc (nList, List);
d80 1
a80 1
    return ((Lst)nList);
@


1.5
log
@make does not use circular lists, get rid of the extra weight.
@
text
@d1 1
a1 1
/*	$OpenBSD: lstInit.c,v 1.4 1998/12/05 00:06:32 espie Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: lstInit.c,v 1.4 1998/12/05 00:06:32 espie Exp $";
d75 2
a76 2
    nList->firstPtr = NilListNode;
    nList->lastPtr = NilListNode;
@


1.4
log
@Modifications from netbsd:
- don't interfere with MACHINE/MACHINE_ARCH defines for bootstrap
- type clean-up, time_t, and printing `unknown' ints
- fix TARGET/MEMBER bug in archive rules
- memmove...
- cleaner Error handler.
- reentrant brk_string
- .MAKE env variable
- preliminary scaffolding for .NOPATH

Other improvements:
- efree
- shellneed streamlined
- display Stop in .CURDIR after an error.
- document most features and misfeatures.
- add a few OpenBSD notes to the tutorial.
@
text
@d1 1
a1 1
/*	$OpenBSD: lstInit.c,v 1.2 1996/06/26 05:36:50 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: lstInit.c,v 1.2 1996/06/26 05:36:50 deraadt Exp $";
d69 1
a69 2
Lst_Init(circ)
    Boolean		circ;	/* TRUE if the list should be made circular */
a77 1
    nList->isCirc = circ;
@


1.3
log
@Sync with NetBSD:
- Merge in FreeBSD and Lite2 changes.
- Fix bug where a non-archive target with a .a suffix would always
  be considered to be out of date, since it does not have a TOC.
- Fix NetBSD PR #2930: declare missing variable.
@
text
@@


1.2
log
@rcsid
@
text
@d1 2
a2 2
/*	$OpenBSD: lstInit.c,v 1.4 1995/06/14 15:21:18 christos Exp $	*/
/*	$NetBSD: lstInit.c,v 1.4 1995/06/14 15:21:18 christos Exp $	*/
d5 2
a6 2
 * Copyright (c) 1988, 1989, 1990 The Regents of the University of California.
 * All rights reserved.
d42 1
a42 1
static char sccsid[] = "@@(#)lstInit.c	5.4 (Berkeley) 12/28/90";
d44 1
a44 1
static char rcsid[] = "$OpenBSD: lstInit.c,v 1.4 1995/06/14 15:21:18 christos Exp $";
d73 1
a73 1
    
d75 1
a75 1
    
d81 1
a81 1
    
@


1.1
log
@Initial revision
@
text
@d1 1
d44 1
a44 1
static char rcsid[] = "$NetBSD: lstInit.c,v 1.4 1995/06/14 15:21:18 christos Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
