head	1.16;
access;
symbols
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.16.0.6
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.2
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.16.0.4
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.15.0.4
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.14.0.10
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.6
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.4
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.2
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.16
	OPENBSD_5_0:1.13.0.14
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.12
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.10
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.6
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.8
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.4
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.2
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.12.0.4
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.2
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.11.0.6
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.4
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.2
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.9.0.2
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.7.0.6
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.4
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.6.0.6
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2;
locks; strict;
comment	@ * @;


1.16
date	2015.03.19.21.22.15;	author bcallah;	state Exp;
branches;
next	1.15;
commitid	GbEBL4CfPvDkB8hj;

1.15
date	2014.03.20.07.47.29;	author lum;	state Exp;
branches;
next	1.14;

1.14
date	2012.04.12.04.47.59;	author lum;	state Exp;
branches;
next	1.13;

1.13
date	2008.06.10.02.39.22;	author kjell;	state Exp;
branches;
next	1.12;

1.12
date	2007.03.29.17.37.15;	author kjell;	state Exp;
branches;
next	1.11;

1.11
date	2005.12.20.06.17.36;	author kjell;	state Exp;
branches;
next	1.10;

1.10
date	2005.11.18.20.56.53;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2005.06.14.18.14.40;	author kjell;	state Exp;
branches;
next	1.8;

1.8
date	2005.04.03.02.09.28;	author db;	state Exp;
branches;
next	1.7;

1.7
date	2004.02.01.22.26.41;	author vincent;	state Exp;
branches;
next	1.6;

1.6
date	2002.07.01.14.33.44;	author vincent;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.03.05.24;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.29.01.58.08;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.01.14.59.09;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.13.06.12.16;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.25.19.08.48;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Clean up the includes in mg.
This does the following:
Moves all POSIX headers from sysdef.h into the individual .c files so that
each file now only includes what it needs. All headers are properly sorted.
Moves the remainder of sysdef.h to other files (mostly def.h) and deletes
sysdef.h now that it's no longer contains anything.
Tweak a comment that references sysdef.h so that it no longer does that.
ok florian@@
@
text
@/*	$OpenBSD: macro.c,v 1.15 2014/03/20 07:47:29 lum Exp $	*/

/* This file is in the public domain. */

/*
 *	Keyboard macros.
 */

#include <sys/queue.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>

#include "def.h"
#include "key.h"
#include "macro.h"

int inmacro = FALSE;	/* Macro playback in progess */
int macrodef = FALSE;	/* Macro recording in progress */
int macrocount = 0;

struct line *maclhead = NULL;
struct line *maclcur;

union macrodef macro[MAXMACRO];

/* ARGSUSED */
int
definemacro(int f, int n)
{
	struct line	*lp1, *lp2;

	macrocount = 0;

	if (macrodef) {
		ewprintf("already defining macro");
		return (macrodef = FALSE);
	}

	/* free lines allocated for string arguments */
	if (maclhead != NULL) {
		for (lp1 = maclhead->l_fp; lp1 != maclhead; lp1 = lp2) {
			lp2 = lp1->l_fp;
			free(lp1);
		}
		free(lp1);
	}

	if ((maclhead = lp1 = lalloc(0)) == NULL)
		return (FALSE);

	ewprintf("Defining Keyboard Macro...");
	maclcur = lp1->l_fp = lp1->l_bp = lp1;
	return (macrodef = TRUE);
}

/* ARGSUSED */
int
finishmacro(int f, int n)
{
	if (macrodef == TRUE) {
		macrodef = FALSE;
		ewprintf("End Keyboard Macro Definition");
		return (TRUE);
	}
	return (FALSE);
}

/* ARGSUSED */
int
executemacro(int f, int n)
{
	int	 i, j, flag, num;
	PF	 funct;

	if (macrodef ||
	    (macrocount >= MAXMACRO && macro[MAXMACRO - 1].m_funct
	    != finishmacro)) {
		dobeep();
		ewprintf("Macro too long. Aborting.");
		return (FALSE);
	}

	if (macrocount == 0)
		return (TRUE);

	inmacro = TRUE;

	for (i = n; i > 0; i--) {
		maclcur = maclhead->l_fp;
		flag = 0;
		num = 1;
		for (j = 0; j < macrocount - 1; j++) {
			funct = macro[j].m_funct;
			if (funct == universal_argument) {
				flag = FFARG;
				num = macro[++j].m_count;
				continue;
			}
			if ((*funct)(flag, num) != TRUE) {
				inmacro = FALSE;
				return (FALSE);
			}
			lastflag = thisflag;
			thisflag = 0;
			flag = 0;
			num = 1;
		}
	}
	inmacro = FALSE;
	return (TRUE);
}
@


1.15
log
@Add some missing dobeeps.
ok florian@@
@
text
@d1 1
a1 1
/*	$OpenBSD: macro.c,v 1.14 2012/04/12 04:47:59 lum Exp $	*/
d8 5
@


1.14
log
@Remove the conditional directives NO_MACRO and NO_STARTUP.
They have not compiled for numerous years.
ok kjell@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: macro.c,v 1.13 2008/06/10 02:39:22 kjell Exp $	*/
d74 1
@


1.13
log
@Fix obvious off-by-one in macro loop. From Marc Butler via debian
@
text
@d1 1
a1 1
/*	$OpenBSD: macro.c,v 1.12 2007/03/29 17:37:15 kjell Exp $	*/
a8 1
#ifndef NO_MACRO
a106 1
#endif	/* NO_MACRO */
@


1.12
log
@Indicate when macro recording is in progress on the modeline.
(This should eventually move to becoming a "real" mode.)
Don't print end macro message unless the macro is being recorded.
ok cloder@@. looks fine art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: macro.c,v 1.11 2005/12/20 06:17:36 kjell Exp $	*/
d14 2
a15 2
int inmacro = FALSE;
int macrodef = FALSE;
d73 3
a75 1
	    (macrocount >= MAXMACRO && macro[MAXMACRO].m_funct != finishmacro))
d77 1
@


1.11
log
@Clean up the ugly casted frees. In one case, this meant eliminating a nasty
struct/union/casting nightmare when building the list of names for filename
completion. In particular, be consistent about strduping and freeing
the list data.
@
text
@d1 1
a1 1
/*	$OpenBSD: macro.c,v 1.10 2005/11/18 20:56:53 deraadt Exp $	*/
d57 6
a62 3
	macrodef = FALSE;
	ewprintf("End Keyboard Macro Definition");
	return (TRUE);
@


1.10
log
@greedy use of typedef struct was making code harder to read; ok kjell cloder
@
text
@d1 1
a1 1
/*	$OpenBSD: macro.c,v 1.9 2005/06/14 18:14:40 kjell Exp $	*/
d40 1
a40 1
			free((char *)lp1);
d42 1
a42 1
		free((char *)lp1);
@


1.9
log
@Add explicit public domain notices to all public domain files.
ok millert@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: macro.c,v 1.8 2005/04/03 02:09:28 db Exp $	*/
d18 2
a19 2
LINE *maclhead = NULL;
LINE *maclcur;
d27 1
a27 1
	LINE	*lp1, *lp2;
@


1.8
log
@This is a no binary change which does:

- spelling, punctuation fixes
- variable declaration lineup
- use parentheses for return and sizeof
- K&R function declarations -> ANSI
- other minor code beautification

ok henning@@
@
text
@d1 3
a3 1
/*	$OpenBSD: macro.c,v 1.7 2004/02/01 22:26:41 vincent Exp $	*/
@


1.7
log
@remove old precompiler weirdness that is not really needed...
@
text
@d1 1
a1 1
/*	$OpenBSD: macro.c,v 1.6 2002/07/01 14:33:44 vincent Exp $	*/
d31 1
a31 1
		return macrodef = FALSE;
d44 1
a44 1
		return FALSE;
d48 1
a48 1
	return macrodef = TRUE;
d57 1
a57 1
	return TRUE;
d69 1
a69 1
		return FALSE;
d72 1
a72 1
		return TRUE;
d89 1
a89 1
				return FALSE;
d98 1
a98 1
	return TRUE;
@


1.6
log
@KNF + ansi; from zyrnix (only the easy part of his diffs)
@
text
@d1 1
a1 1
/*	$OpenBSD: macro.c,v 1.5 2001/05/24 03:05:24 mickey Exp $	*/
a9 2
#define EXTERN
#define INIT(i) = (i)
d11 9
@


1.5
log
@spaces
@
text
@d1 1
a1 1
/*	$OpenBSD: macro.c,v 1.4 2001/01/29 01:58:08 niklas Exp $	*/
d16 1
a16 2
definemacro(f, n)
	int	f, n;
d46 1
a46 2
finishmacro(f, n)
	int	f, n;
d55 1
a55 2
executemacro(f, n)
	int f, n;
@


1.4
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d63 1
a63 1
	if (macrodef || 
@


1.3
log
@More -Wall anmd KNF, from op2@@tomahawk.SQUiSH.org
@
text
@d1 2
@


1.2
log
@The start of KNF + -Wall.  The code has been run through indent but
needs hand fixup.  I stopped at keymap.c...
@
text
@d1 3
a3 1
/* keyboard macros for Mg 2 */
d13 1
d15 1
a15 1
	int             f, n;
d17 1
a17 2
	register LINE  *lp1;
	LINE           *lp2;
d20 1
d25 1
d30 1
a30 1
			free((char *) lp1);
d32 1
a32 1
		free((char *) lp1);
d34 1
d37 1
d44 1
d46 1
a46 1
	int             f, n;
d54 1
d56 1
a56 1
	int             f, n;
d58 2
a59 4
	int             i, j;
	PF              funct;
	int             universal_argument();
	int             flag, num;
d61 2
a62 2
	if (macrodef ||
	 (macrocount >= MAXMACRO && macro[MAXMACRO].m_funct != finishmacro))
d64 1
d67 1
d69 1
d81 1
a81 1
			if ((*funct) (flag, num) != TRUE) {
d94 1
a94 1
#endif
@


1.1
log
@initial import of mg2a
@
text
@d1 1
a1 1
/* keyboard macros for MicroGnuEmacs 1x */
d10 1
a10 1
/*ARGSUSED*/
d12 1
a12 1
int	f, n;
d14 2
a15 2
	register LINE *lp1;
	LINE *lp2;
d18 3
a20 3
	if(macrodef) {
	    ewprintf("already defining macro");
	    return macrodef = FALSE;
d23 6
a28 6
	if(maclhead != NULL) {
	    for(lp1 = maclhead->l_fp; lp1 != maclhead; lp1 = lp2) {
		lp2 = lp1->l_fp;
		free((char *)lp1);
	    }
	    free((char *)lp1);
d30 2
a31 1
	if((maclhead = lp1 = lalloc(0)) == NULL) return FALSE;
d37 1
a37 1
/*ARGSUSED*/
d39 1
a39 1
int	f, n;
d41 3
a43 3
    macrodef = FALSE;
    ewprintf("End Keyboard Macro Definition");
    return TRUE;
d46 1
a46 1
/*ARGSUSED*/
d48 1
a48 1
int	f, n;
d50 7
a56 23
	int	i, j;
	PF	funct;
	int	universal_argument();
	int	flag, num;

    if(macrodef ||
	    (macrocount >= MAXMACRO && macro[MAXMACRO].m_funct != finishmacro))
	return FALSE;
    if(macrocount == 0) return TRUE;
    inmacro = TRUE;
    for(i = n; i > 0; i--) {
	maclcur = maclhead->l_fp;
	flag = 0;
	num = 1;
	for(j = 0; j < macrocount-1; j++) {
	    funct = macro[j].m_funct;
	    if(funct == universal_argument) {
		flag = FFARG;
		num = macro[++j].m_count;
		continue;
	    }
	    if((*funct)(flag, num) != TRUE) {
		inmacro = FALSE;
d58 23
a80 5
	    }
	    lastflag = thisflag;
	    thisflag = 0;
	    flag = 0;
	    num = 1;
d82 2
a83 3
    }
    inmacro = FALSE;
    return TRUE;
@

