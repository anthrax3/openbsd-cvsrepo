head	1.17;
access;
symbols
	OPENBSD_6_2:1.17.0.4
	OPENBSD_6_2_BASE:1.17
	OPENBSD_6_1:1.16.0.8
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.16.0.4
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.2
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.15.0.6
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.14.0.8
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.6
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.2
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.12.0.2
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.11.0.2
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.2
	OPENBSD_5_0:1.5.0.14
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.12
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.10
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.6
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.8
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.4
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.2
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.4.0.12
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.10
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.8
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.6
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.4
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.2
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.2.0.16
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.14
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.12
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.10
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.8
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.6
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.4
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.6
	OPENBSD_2_8:1.1.0.4
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.2
	OPENBSD_2_7_BASE:1.1;
locks; strict;
comment	@# @;


1.17
date	2017.05.30.07.11.40;	author tb;	state Exp;
branches;
next	1.16;
commitid	VbJyyCiiivze7380;

1.16
date	2015.12.21.08.08.43;	author lum;	state Exp;
branches;
next	1.15;
commitid	FGUCzzQBuEZ5Y1PO;

1.15
date	2014.10.19.20.53.51;	author lum;	state Exp;
branches;
next	1.14;
commitid	wXvydsSOduu367Sc;

1.14
date	2013.05.18.05.51.51;	author lum;	state Exp;
branches;
next	1.13;

1.13
date	2013.05.17.20.35.49;	author lum;	state Exp;
branches;
next	1.12;

1.12
date	2013.02.10.15.38.18;	author lum;	state Exp;
branches;
next	1.11;

1.11
date	2012.05.25.16.49.05;	author lum;	state Exp;
branches;
next	1.10;

1.10
date	2012.05.25.15.29.13;	author lum;	state Exp;
branches;
next	1.9;

1.9
date	2012.05.07.13.52.58;	author lum;	state Exp;
branches;
next	1.8;

1.8
date	2012.01.17.04.24.24;	author lum;	state Exp;
branches;
next	1.7;

1.7
date	2011.09.10.17.48.04;	author lum;	state Exp;
branches;
next	1.6;

1.6
date	2011.09.02.02.37.52;	author lum;	state Exp;
branches;
next	1.5;

1.5
date	2008.07.30.17.39.31;	author kjell;	state Exp;
branches;
next	1.4;

1.4
date	2005.05.25.23.16.11;	author cloder;	state Exp;
branches;
next	1.3;

1.3
date	2005.04.03.02.09.28;	author db;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.24.03.05.27;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.25.19.08.52;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.17
log
@The is open-file command is actually called find-file.  Typo pointed out
by "Choose a display name <thelocals_job_applicant protonmail com>".
@
text
@The mg Tutorial
---------------

The mg editor is a public domain editor intended to loosely resemble GNU Emacs,
while still retaining fast speed and a small memory footprint. 

Most mg commands involve using the Control (sometimes labelled "Ctrl") or the 
Meta (sometimes labelled "Alt") key. We will use the following conventions in
this tutorial:

  C-<chr>   means hold down the Control key while typing the character <chr>.
  M-<chr>   means hold down the Meta key while typing the character <chr>.

If you don't have a Meta key, you can use Esc instead. Press and release the
Esc key and type <chr>. This is equivalent to M-<chr>.

The first thing to learn is how to move up and down a document. To move your 
cursor down a line, use the down-arrow cursor key or C-n (Control and n).

>> Now type C-n multiple times and move your cursor past this line.

Congratulations. You have now learned how to move your cursor down. To move
your cursor up one line, you can use the up-arrow cursor key or C-p (Control
and p). 

>> Try using C-p and C-n to move up and down and then move past this line.

The next commands to learn are how to move your cursor left and right. To do 
this, you can use the left-arrow and right-arrow cursor keys. Alternatively, 
you can use C-b and C-f to do this.

>> Practise using the arrow keys or C-b and C-f on this line.

To make it easy to remember these commands, it helps to remember by letter: 
P - Previous line, N - Next line, B - Backwards and F - Forward.

Now that you've learned how to move single characters at a time, next we learn
how to move one word at a time. To do this, you can use M-f (Meta and f) or 
M-b (Meta and b) to move forwards and backwards, one word at a time.

>> Try moving one word at a time by using M-f and M-b on this line.

Notice how the Ctrl and Meta key combinations perform related functions. C-f 
moves one letter forward, whereas M-f moves one word forward. There are many
key combinations in mg, where C-<chr> will perform one function and M-<chr>
will perform a similar related function.

Most probably by now you have moved passed the bottom of the text which was
initially shown to you when you opened this document. mg redraws your terminal
screen so that the cursor is in the middle. This is a feature of mg, which
allows you to see the lines before and after the current cursor position. The
same effect can be achieved manually.

>> Now move the cursor down to this line and then type C-l (that's Control and
   lowercase L).

Note that C-l refreshes the screen and centers it on the line you typed it on.

To move to the beginning or end of a line, you can use the Home and End keys,
or you can use C-a and C-e to move to the beginning and end.

>> Use C-a and C-e to move to the beginning and end of this line.

The next commands we will learn is how to move up and down, one page at a time.
To do this, you can use the Page Up (sometimes labelled PgUp) and Page Down 
(sometimes labelled PgDn) keys. You can also use C-v and M-v to do this. C-v
moves the cursor down one page and M-v moves it up one page.

>> Try using M-v and C-v to move up and down, one page at a time.

The final two motion commands we will learn are M-< (Meta-Less than) and 
M-> (Meta-Greater than) which move you to the beginning and end of a file,
respectively. You may not want to try that now as you will probably lose your
place in this tutorial. Note that on most terminals, < is above the , key, so
you'll need to press the Shift key to type <.

Movement Summary
-----------------

The following is a summary of the movement commands we've learned so far:

	C-f	Move forward one character (can also use right arrow key).
	C-b	Move backward one character (can also use left arrow key).
	C-p     Move up one line (can also use up arrow key).
	C-n	Move down one line (can also use down arrow key).
	M-f	Move forward one word.
	M-b	Move backward one word.
	C-a	Move to beginning of line (can also use Home key).
	C-e	Move to end of line (can also use End key).
	C-v     Move forward one page (can also use PgDn/Page Down key).
	M-v     Move backward one page (can also use PgUp/Page Up key).
	M-<	Move to beginning of file.
	M->	Move to end of file.

Now that you've mastered the basics of moving around in mg, you can cause mg
to execute these commands multiple times. The way to do this is to type C-u
followed by some digits followed by a movement command.

>> Type C-u 5 C-f to move forward 5 characters.

In general, C-u allows you to execute any command multiple times, not just 
cursor motion commands. The only exception to this rule are C-v and M-v. 
When using these two commands with an argument, they move the cursor by that 
many lines instead of pages.

Cancelling mg Commands
----------------------

If you have started typing out a command that you didn't mean to finish, you
can use the C-g command to cancel the command immediately.

>> For example, type C-u 50 and then type C-g to cancel the C-u command.
>> Type Esc and then C-g to cancel the Esc key.

In general, you can use C-g to stop any mg commands. You may type it multiple
times if you wish. You should see the word "Quit" appear in the bottom of the
screen when you type C-g indicating that a command was cancelled. 

In general, when in doubt, use C-g to get out of trouble.

Inserting/Deleting Text
-----------------------

To insert text anywhere, simply move your cursor to the appropriate position
and begin typing. To delete characters, use the backspace key. If you use
M-<backspace> (Meta and backspace key), you will delete one word instead
of one character at a time.

To delete characters to the right of the cursor, you can use C-d to delete
characters to the right of the current position.  If you use M-d instead of
C-d, you can delete one word at a time instead of one character at a time.

>> Try inserting and deleting characters and words on this line.

Note that if you type too many characters on a single line, the line will 
scroll off the screen and you will see a $ on the line to indicate that the 
line is too long to fit on the screen at one time.

To delete a line at a time, you can use C-k to kill the line from the current 
cursor position to the end of the line. You can type C-k multiple times to 
kill many lines.

You can issue insert or delete commands multiple times using C-u. For example,
C-u 10 e will type out eeeeeeeeee, C-u 4 M-d will delete four words to the
right of the cursor and so on.

To undo any operation, you can use C-_ (that's control-underscore).

Now if you kill something that you didn't mean to, you can yank it back from
the dead by using C-y. In general, when you kill something bigger than a single
character, mg saves it in a buffer somewhere and you can restore it by using
C-y. This is useful for moving text around. You can kill text in one place,
move your cursor to the new location and then use C-y to paste it there.

Search for Text
---------------

To search for text, type C-s followed by the text you wish to search for. Note
that as you start typing the characters, mg automatically searches as you type
the characters.

To continue searching the text you're looking for, type C-s to find the next
instance. To search in reverse, type C-r instead of C-s. If you type C-s or 
C-r twice, it will simply search for the last text that you searched for.

To stop searching for text, simply use the cursor keys (or C-f, C-b etc.) or
C-g to stop the search operation. 

>> Use C-s foo to search for "foo" in the text. You can use C-s again to
   find other instances of foo in the file.
   
Note that if a word cannot be found, it will say Failing I-search: at the 
bottom of the screen. Typing C-s again will wrap the search around from the
top of the file and begin searching from there.

Replace Text
------------

To replace text, use M-%. You will be prompted for the text to search for and
the text to replace it with. You will then be taken to the first instance of
text from the current position. At this point you can do one of the following:
	
	y - Replace the text at this instance and search for more items.
	n - Skip this instance and search for more items.
	. or Enter - Stop replacing text (you can also use C-g).
	! - Replace all the instances without prompting at each one.

>> Try replacing "frobnitz" with "zutwalt" on this line.

Cut/Copy/Paste Text
-------------------

As explained above, you can cut regions using C-k to kill multiple lines. To
paste the text that you just cut, simply move your cursor to the point and 
then type C-y to restore the text. You may type C-y multiple times to restore
the text. Hence, to copy text, you can use C-k to kill all the lines, use C-y
to restore it immediately, then move to the region you want to copy it to and
then type C-y again to restore the last cut text block again.

Another way to cut or copy chunks of text is to first position your cursor at
the starting point of the chunk of text. Then type C-<space> to mark this as
the starting point to cut or copy. Then move the cursor to the end point of the 
text chunk that you wish to manipulate. Then type C-w to cut the region, or 
M-w to copy the region. If you wish to cancel marking a block of text, simply
type C-g to cancel the operation.

To paste the region that you've cut or copied above, simply move your cursor 
to the desired location and then type C-y to paste it.

Status Line
-----------

At the bottom of your screen is a reverse highlighted line. This is the status
line and lets you know some useful information about the file you're editing.

On the status line, you should see "Mg: tutorial". This lets you know that 
you're editing a file named "tutorial". If you've edited this file and not 
saved it, it should have a "**" to the left of those words. If this file is 
read-only, you should see a "%%" to the left of those words. 

To the right of the status line, you should see L followed by digits and C
followed by some more digits. These indicate the line number and column number
of the file that your cursor is currently on. If you move the cursor around,
you should see the line and column number change.

In the middle of the screen, you should see the word "(fundamental)" which 
indicates that the current editing mode is "fundamental-mode". The mg editor
also supports a c-mode that is more suited to editing C code. There are also
some other useful editing modes for different situations. See the man page 
for mg(1) to learn about the various editing modes.

Opening and Saving Files
------------------------

To open a file, you can use C-x C-f. You will then be prompted for a file name.
If you type a file name that doesn't already exist, a new file will be opened
for you. If the file name already exists, then it will be opened for you and 
you can begin editing it. Note that you do not need to type the whole file 
name for an existing file. You can type part of the file name and then press
the TAB key. If there is only file name that matches, mg will fill in the rest
of the file name for you. If there are multiple files, mg will display that 
the choice is ambiguous. If you type the TAB key again, mg will show you all 
the available choices for file names.

NOTE: If you type C-x f instead of C-x C-f, you can use C-g to cancel the
Set-Fill-Column command. You can also use C-g to cancel the C-x C-f command
if you don't wish to open a new file.

To save the file once you've edited it, use C-x C-s to save the file. When
mg is done saving the file, you should see the words "Wrote /path/to/file"
in the bottom of your screen. In general, it is a good idea to save quite 
often. When you save a file, mg saves a backup of the file with a tilde (~)
character at the end.

If you decide to open a directory instead of a file, mg will transistion into a
mode called dired. Dired fills a buffer with the contents of the selected
directory, one file or sub-directory's details per line. Some basic file
management functions can be performed on the files and sub-directories in the
buffer. For example, with the cursor over a specific file:

	Pressing c will give you the opportunity to copy the file.
	Pressing d will mark the file for deletion.
	Pressing x will unlink files previously marked for deletion.
	Pressing Return will open the highlighted file into it's own buffer for
	editing.

There are more dired commands, see the man page for further information.

Working with Buffers and Windows
--------------------------------

Once a file is loaded into mg, it is often referred to as a buffer.

The mg editor is capable of editing multiple buffers at the same time. When you
open a second file with C-x C-f, the first buffer is still being edited by mg.

Both buffers can be viewed simultaneously because mg can support several windows
at the same time, each one displaying different text. To split a screen into two
horizontal windows use C-x 2. To return to one window, use C-x 1 to close the
other windows and only keep the current window.

>> Use C-x 2 to split the screen into two windows. 

>> Use C-x o to move from one window to the other. You can scroll up and down
   in each window using the cursor keys or C-n and C-p keys.

>> Use C-x 1 to restore back to one window.

You can list all the buffers that are opened by mg by typing C-x C-b. The 
screen should divide into two and the top window will list the buffers that
are currently open. Use C-x o to switch to the top window, then use the arrow
keys to move to the buffer you wish to switch to, and then type the Enter key to
select that buffer. Then use C-x 1 to switch back to only one window.

You may also move back to the last opened buffer by using C-x b to toggle back
and forth between two buffers. Note the difference between C-x b and C-x C-b.

>> Use C-x C-f to open a new file
>> Use C-x b to switch back and forth between that buffer and this one.

To kill any buffer, use C-x k. You will be prompted for the buffer to kill.
By default, the current buffer is selected as the one to kill. You may also
type another buffer name or use C-g to cancel the operation.

Extended Commands
-----------------

The mg editor has several extended commands, more than what can be covered
by the Control and Meta keys. The mg editor gets around this by using what is
called the X (eXtend) command. There are two forms of this:

	C-x	Character eXtension. Followed by one character.
	M-x	Named character eXtension. Followed by a long command.

You've already seen C-x C-f and C-x C-s to open and save a file. There are
other longer commands. For instance, you can also open a file by typing
M-x find-file Enter. When you type a command using M-x, mg prompts you for
the command at the bottom of the screen. You can type out the whole command
if you wish, or you can type out part of the command and then use the TAB key
for autocompleting the command.

For instance, to replace text, you can type M-x repl TAB enter to execute 
the replace-text command. To cancel this command, type C-g. 

To see a list of all available mg(1) commands, consult the man page.

Exiting mg
----------

To exit mg temporarily and return to the shell, use C-z. This will take you
back to the command shell. To return back to mg, type fg in the shell and you
will be returned to your mg session.

To exit mg permanently, type C-x C-c. If you have any unsaved buffers, you 
will be asked if you wish to save them or not. 

Conclusion
----------

This tutorial is meant to get new users up and running with mg. There is more
information available via the mg(1) man page. If you have any suggestions for
improvement, please don't hesitate to drop a message or (better still) submit
a diff to tech@@openbsd.org.

Author Info
-----------

Original Author of this document: Mayukh Bose, 
Date last updated: 2015-12-21

Copyright
---------

None. This document is in the public domain.
@


1.16
log
@Mention dired.
@
text
@d317 1
a317 1
M-x open-file Enter. When you type a command using M-x, mg prompts you for
@


1.15
log
@Move the description of mg automatic recentering further down the
tutorial, next to the C-l (recenter) command description. This also
removes confusion if you read the tutorial on a screen larger than 24
lines. Input jmc@@ ok florian@@
@
text
@a120 1

d255 14
d349 1
a349 1
Date last updated: 2014-10-19
@


1.14
log
@Update last updated date.
@
text
@d18 1
a18 1
cursor down, use the down-arrow cursor key or C-n (Control and n).
d22 3
a24 7
Congratulations. You have now learned how to move your cursor down. Note how 
mg has redrawn your screen so that the cursor is now in the middle of the 
screen. This is a feature of mg, which allows you to see the lines before and 
after the current cursor position.

To move your cursor up, you can use the up-arrow cursor key or C-p (Control and
p). 
d48 5
a52 1
Next, we will learn how to refresh and redraw the screen.
d55 1
a55 1
   lowercase L) to refresh the screen.
d336 1
a336 1
Date last updated: 2013-05-17
a341 1

@


1.13
log
@Describe the file -> buffer semantic.

Reviewed and suggestions from jmc@@.
@
text
@d336 1
a336 1
Date last updated: 2012-05-25
@


1.12
log
@Grammar nits.
@
text
@d256 2
a257 2
Windows
-------
d259 9
a267 4
The mg editor can support several windows at the same time, each one displaying
different text. To split a screen into two horizontal windows use C-x 2 to do
this. To return to one window, use C-x 1 to close the other windows and only
keep the current window.
a275 5
Buffers
-------

The mg editor is capable of editing multiple files at the same time. When you
open a second file with C-x C-f, the first file is still being edited by mg.
d278 2
a279 3
are currently open. Use C-x o to switch to the top window (we already learned
this key combination above in the Windows section) and then use the arrow keys
to move to the buffer you wish to switch to and then type the Enter key to 
a286 5

To edit files in multiple windows, use C-x 2 to split the screen into two 
windows. Then use C-x C-f to open a new file in one of the two windows. You
can then switch between the two windows using C-x o. You can switch between
buffers in any window using C-x b. To go back to one window, use C-x 1.
@


1.11
log
@full-stops mainly.
@
text
@d148 1
a148 1
To undo any operation, you can use C-_ (That's control-underscore).
d186 1
a186 1
	. or Enter - Stop replacing text (You can also use C-g).
@


1.10
log
@Move the windows section in the tutorial to a more sensible place
(next to buffers) and move the mg history into the README file which
seems a more sensible place as well.
@
text
@d18 1
a18 1
cursor down, use the down-arrow cursor key or C-n (Control and n)
d82 11
a92 11
	C-f	Move forward one character (can also use right arrow key)
	C-b	Move backward one character (can also use left arrow key)
	C-p     Move up one line (can also use up arrow key)
	C-n	Move down one line (can also use down arrow key)
	M-f	Move forward one word
	M-b	Move backward one word
	C-a	Move to beginning of line (can also use Home key)
	C-e	Move to end of line (can also use End key)
	C-v     Move forward one page (can also use PgDn/Page Down key)
	M-v     Move backward one page (can also use PgUp/Page Up key)
	M-<	Move to beginning of file
d96 2
a97 2
to execute these commands multiple times. The way to do this is to type
C-u followed by some digits followed by a movement command.
d106 1
a106 1
Cancelling mg commands
d184 3
a186 3
	y - Replace the text at this instance and search for more items
	n - Skip this instance and search for more items
	. or Enter - Stop replacing text (You can also use C-g)
@


1.9
log
@Remove CVS tag. Makes tutorial look a bit neater.
ok sthen@@ (thanks to kettenis@@ for simpler solution)
@
text
@a120 14
Windows
-------

The mg editor can support several windows at the same time, each one displaying
different text. To split a screen into two horizontal windows use C-x 2 to do
this. To return to one window, use C-x 1 to close the other windows and only
keep the current window.

>> Use C-x 2 to split the screen into two windows. 

>> Use C-x o to move from one window to the other. You can scroll up and down
   in each window using the cursor keys or C-n and C-p keys.

>> Use C-x 1 to restore back to one window.
d256 15
a337 20
History
-------

mg is a public-domain text editor. It was originally based on MicroEMACS, but
has since moved to more closely resemble GNU Emacs while still maintaining a
small memory footprint and fast speed. 

* Nov 16, 1986: First release to mod.sources
* Mar 3, 1987: First Release (mg1a) via comp.sources.unix
* May 26, 1988: Second release: (mg2a) via comp.sources.misc
* Jan 26, 1992: Linux port released by Charles Hedrick. This version
  later makes its way onto tsx-11, Infomagic, and various other Linux
  repositories. 
* Feb 25, 2000: First import into the OpenBSD tree, where it is
  currently maintained

The mg editor was originally named MicroGNUEmacs. The name was changed at
the request of Richard Stallman, as this software is entirely unrelated to
the GNU project. 

d342 1
a342 1
Date last updated: 2012-01-17
@


1.8
log
@Did Richard Stallman suggest the name change AND the new name "mg"? This is
the only place where I can find a reference to Richard suggesting the name
itself, I suspect it is an error. Unfortunately Richard cannot remember.

No definitive information from tech@@ (yet)

Also make some lines wrap better.
@
text
@a0 2
$Id: tutorial,v 1.7 2011/09/10 17:48:04 lum Exp $

@


1.7
log
@Another small tidy up. ok jmc@@
@
text
@d1 1
a1 1
$Id: tutorial,v 1.6 2011/09/02 02:37:52 lum Exp $
d342 3
a344 3
mg is a public-domain text editor. It was originally based on
MicroEMACS, but has since moved to more closely resemble GNU Emacs while
still maintaining a small memory footprint and fast speed. 
d355 3
a357 3
The mg editor was originally named MicroGNUEmacs. The name was changed
to "mg" at the request of Richard Stallman, as this software is
entirely unrelated to the GNU project. 
d363 1
a363 1
Date last updated: 2011-09-10
@


1.6
log
@Add email address for diffs and remove plural man pages. ok jmc@@

Also tweak man page from jmc@@
@
text
@d1 1
a1 1
$Id: tutorial,v 1.5 2008/07/30 17:39:31 kjell Exp $
d74 4
a77 4
M-> (Meta-Greater than) which move you to the beginning and end of this file.
You may not want to try that now as you will probably lose your place in this 
tutorial. Note that on most terminals, < is above the , key, so you'll need
to press the Shift key to type <.
d143 1
a143 1
M-<backspace (Meta and backspace key), you will delete one word instead
d218 2
a219 2
the starting point of the chunk of text. Then type C-space to mark this as the
starting point to cut or copy. Then move the cursor to the end point of the 
d363 1
a363 1
Date last updated: 2011-09-02
@


1.5
log
@Replace GNU tutorial with public domain one, written from scratch by
Mayukh Bose. Minor additions from me. Thanks!
@
text
@d1 1
a1 1
$Id$
d246 1
a246 1
some other useful editing modes for different situations. See the man pages 
d319 1
a319 1
To see a list of all available mg(1) commands, consult the man pages.
d335 1
a335 1
information available via the mg(1) man pages. If you have any suggestions for
d337 1
a337 1
a diff listing.
d363 1
a363 1
Date last updated: 2008-07-29
@


1.4
log
@Mention isearch wrap
@
text
@d1 1
a1 1
Copyright (c) 1985 Richard M. Stallman.  See end for copying conditions.
d3 2
a4 1
You are looking at the Emacs tutorial.
d6 2
a7 3
Emacs commands generally involve the CONTROL key or the META (ESC)
key.  Rather than write out META or CONTROL each time we want you to
prefix a character, we'll use the following abbreviations:
d9 3
a11 3
 C-<chr>  means hold the CONTROL key while typing the character <chr>
	  Thus, C-f would be: hold the CONTROL key and type f.
 M-<chr>  means type <ESC>, release it, then type the character <chr>.
d13 2
a14 2
The characters ">>" at the left margin indicate directions for you to
try using a command.  For instance:
d16 2
a17 4
>>  Now type C-v (View next screen) to move to the next screen.
	(go ahead, do it by depressing the control key and v together).
	From now on, you'll be expected to do this whenever you finish
	reading the screen.
d19 2
a20 2
Note that there is an overlap when going from screen to screen; this
provides some continuity when moving through the file.
d22 1
a22 3
The first thing that you need to know is how to move around from
place to place in the file.  You already know how to move forward a
screen, with C-v.  To move backwards a screen, type M-v (type <ESC>v).
d24 4
a27 1
>>  Try typing M-v and then C-v to move back and forth a few times.
d29 2
d32 1
a32 75
SUMMARY
-------

The following commands are useful for viewing screenfuls:

	C-v	Move forward one screenful
	M-v	Move backward one screenful
	C-l	Clear screen and redisplay everything
		 putting the text near the cursor at the center.
		 (That's control-L, not control-1.
		  There is no such character as control-1.)

>> Find the cursor and remember what text is near it.
   Then type a C-l.
   Find the cursor again and see what text is near it now.


BASIC CURSOR CONTROL
--------------------

Getting from screenful to screenful is useful, but how do you
reposition yourself within a given screen to a specific place?  There
are several ways you can do this.  One way (not the best, but the most
basic) is to use the commands previous, backward, forward and next.
As you can imagine these commands (which are given to Emacs as C-p,
C-b, C-f, and C-n respectively) move the cursor from where it
currently is to a new place in the given direction.  It is also
possible to move the cursor with the arrow keys, but this requires you
move your hand from the keyboard, it is also not supported on other
machines that do support Emacs.  Emacs runs on everything from a CP/M
machine to large mainframes. Here then, in a more graphical form are
the commands:

			  Previous line, C-p
				  :
				  :
   Backward, C-b .... Current cursor position .... Forward, C-f
				  :
				  :
			  Next line, C-n

>> Move the cursor to the line in the middle of that diagram
   and type C-l to see the whole diagram centered in the screen.

You'll probably find it easy to think of these by letter.  P for
previous, N for next, B for backward and F for forward.  These are
the basic cursor positioning commands and you'll be using them ALL
the time so it would be of great benefit if you learn them now.

>> Do a few C-n's to bring the cursor down to this line.

>> Move into the line with C-f's and then up with C-p's.
   See what C-p does when the cursor is in the middle of the line.

>> Try to C-b at the beginning of a line.  Do a few more C-b's.
   Then do C-f's back to the end of the line and beyond.

When you go off the top or bottom of the screen, the text beyond
the edge is shifted onto the screen so that your instructions can
be carried out while keeping the cursor on the screen.

>> Try to move the cursor off the bottom of the screen with C-n and
   see what happens.

If moving by characters is too slow, you can move by words.  M-f
(ESC-f) moves forward a word and M-b moves back a word.

>> Type a few M-f's and M-b's.  Intersperse them with C-f's and C-b's.

Notice the parallel between C-f and C-b on the one hand, and M-f and
M-b on the other hand.  Very often Meta characters are used for
operations related to English text whereas Control characters operate
on the basic textual units that are independent of what you are
editing (characters, lines, etc). C-a and C-e move to the beginning or
end of a line.
d34 3
a36 2
>> Try a couple of C-a's, and then a couple of C-e's.
   See how repeated C-a's do nothing.
d38 1
a38 7
Two other simple cursor motion commands are M-< (Meta Less-than),
which moves to the beginning of the file, and M-> (Meta Greater-than),
which moves to the end of the file.  You probably don't need to try
them, since finding this spot again will be boring.  On most terminals
the "<" is above the comma and you must use the shift key to type it.
On these terminals you must use the shift key to type M-< also;
without the shift key, you would be typing M-comma.
d40 2
a41 3
The location of the cursor in the text is also called "point".  To
paraphrase, the cursor shows on the screen where point is located in
the text.
d43 3
a45 2
Here is a summary of simple moving operations including the word and
sentence moving commands:
d47 1
a47 2
	C-f	Move forward a character
	C-b	Move backward a character
d49 4
a52 2
	M-f	Move forward a word
	M-b	Move backward a word
d54 1
a54 2
	c-n	Move to next line
	C-p	Move to previous line
d56 2
a57 2
	C-a	Move to beginning of line
	C-e	Move to end of line
d59 1
a59 2
	M-<	Go to beginning of file
	M->	Go to end of file
d61 2
a62 4
>> Try all of these commands now a few times for practice.
   Since the last two will take you away from this screen,
   you can come back here with M-v's and C-v's.  These are
   the most often used commands.
d64 1
a64 4
Like all other commands in Emacs, these commands can be given
arguments which cause them to be executed repeatedly.  The way you
give a command a repeat count is by typing C-u and then the digits
before you type the command.
d66 4
a69 1
For instance, C-u 8 C-f moves forward eight characters.
d71 1
a71 2
>> Try giving a suitable argument to C-n or C-p to come as close
   as you can to this line in one jump.
d73 5
a77 4
The only apparent exception to this is the screen moving commands,
C-v and M-v.  When given an argument, they scroll the screen up or
down by that many lines, rather than screenfuls.  This proves to be
much more useful.
d79 1
a79 7
>> Try typing C-u 8 C-v now.

Did it scroll the screen up by 8 lines?  If you would like to
scroll it down you can give an argument to M-v.


WHEN EMACS IS HUNG
d82 1
a82 30
If Emacs gets into an infinite (or simply very long) computation which
you don't want to finish, you can stop it safely by typing C-g.
You can also use C-g to discard a numeric argument or the beginning of
a command that you don't want to finish.

>> Type C-u 100 to make a numeric arg of 100, then type C-g.
   Now type C-f.  How many characters does it move?
   If you have typed an <ESC> by mistake, you can get rid of it
   with a C-g.

WINDOWS
-------

Emacs can have several windows, each displaying its own text.
At this stage it is better not to go into the techniques of
using multiple windows.  But you do need to know how to get
rid of extra windows that may appear to display help or
output from certain commands.  It is simple:

	C-x 1	One window (i.e., kill all other windows).

That is Control-x followed by the digit 1.
C-x 1 makes the window which the cursor is in become
the full screen, by getting rid of any other windows.

>> Move the cursor to this line and type C-l (Control-L).
>> Type M-x. The cursor will move to the bottom of the screen.
>> Type the words "describe-bindings" and hit return.
   See how this window shrinks, while a new one appears
   to display which functions are connected to which keys.
d84 23
a106 1
>> Type C-x 1 and see the documentation listing window disappear.
d108 1
a108 2

INSERTING AND DELETING
d111 2
a112 4
If you want to insert text, just type it.  Characters which you can
see, such as A, 7, *, etc. are taken by Emacs as text and inserted
immediately.  Type <Return> (the carriage-return key) to insert a
Newline character.
d114 2
a115 3
You can delete the last character you typed by typing <DEL>.  More
generally, <DEL> deletes the character immediately before the current
cursor position.
d117 3
a119 4
>> Do this now, type a few characters and then delete them
   by typing <DEL> a few times.  Don't worry about this file
   being changed; you won't affect the master tutorial.  This is just
   a copy of it.
d121 1
a121 7
>> Now start typing text until you reach the right margin, and keep
   typing.  When a line of text gets too big for one line on the
   screen, the line of text is "continued" off the edge of the screen.
   The dollar sign at the right margin indicates a line which has
   been continued.
>> Use <DEL>s to delete the text until the line fits on one screen
   line again.  The continuation mark goes away.
d123 2
a124 5
>> Move the cursor to the beginning of a line and type <DEL>.  This
   deletes the newline before the line and merges the line onto
   the previous line.  The resulting line may be too long to fit, in
   which case it has a continuation mark.
>> Type <Return> to reinsert the Newline you deleted.
d126 145
a270 2
Remember that most Emacs commands can be given a repeat count;
this includes characters which insert themselves.
d272 2
a273 1
>>  Try that now -- type C-u 8 * and see what happens.
d275 23
a297 3
You've now learned the most basic way of typing something in
Emacs and correcting errors.  You can delete by words or lines
as well.  Here is a summary of the delete operations:
d299 2
a300 2
	<DEL>        delete the character just before the cursor
	C-d	     delete the next character after the cursor
d302 13
a314 2
	M-<DEL>      kill the word immediately before the cursor
	M-d	     kill the next word after the cursor
d316 2
a317 1
	C-k	     kill from the cursor position to end of line
d319 1
a319 3
Notice that <DEL> and C-d vs M-<DEL> and M-d extend the parallel
started by C-f and M-f (well, <DEL> isn't really a control
character, but let's not worry about that).
d321 2
a322 10
Now suppose you kill something, and then you decide that you want to
get it back?  Well, whenever you kill something bigger than a
character, Emacs saves it for you.  To yank it back, use C-y.  You
can kill text in one place, move elsewhere, and then do C-y; this is
a good way to move text around.  Note that the difference
between "Killing" and "Deleting" something is that "Killed" things
can be yanked back, and "Deleted" things cannot.  Generally, the
commands that can destroy a lot of text save it, while the ones that
attack only one character, or nothing but blank lines and spaces, do
not save.
d324 3
a326 2
For instance, type C-n a couple times to position the cursor
at some line on this screen.
d328 2
a329 1
>> Do this now, move the cursor and kill that line with C-k.
d331 2
a332 15
Note that a single C-k kills the contents of the line, and a second
C-k kills the line itself, and make all the other lines move up.  If
you give C-k a repeat count, it kills that many lines AND their
contents.

The text that has just disappeared is saved so that you can
retrieve it.  To retrieve the last killed text and put it where
the cursor currently is, type C-y.

>> Try it; type C-y to yank the text back.

Think of C-y as if you were yanking something back that someone
took away from you.  Notice that if you do several C-k's in a row
the text that is killed is all saved together so that one C-y will
yank all of the lines.
d334 4
a337 1
>> Do this now, type C-k several times.
d339 1
a339 68
Now to retrieve that killed text:

>> Type C-y.  Then move the cursor down a few lines and type C-y
   again.  You now see how to copy some text.


FILES
-----

In order to make the text you edit permanent, you must put it in a
file.  Otherwise, it will go away when your invocation of Emacs goes
away.  You put your editing in a file by "finding" the file.  What
finding means is that you see the contents of the file in your Emacs;
and, loosely speaking, what you are editing is the file itself.
However, the changes still don't become permanent until you "save" the
file.  This is so you can have control to avoid leaving a half-changed
file around when you don't want to.

If you look near the bottom of the screen you will see a line that
begins and ends with dashes, and contains the string:
     "Mg: TUTORIAL"
Your copy of the Emacs tutorial is called "TUTORIAL".  Whatever
file you find, that file's name will appear in that precise
spot.

The commands for finding and saving files are unlike the other
commands you have learned in that they consist of two characters.
They both start with the character Control-x.  There is a whole series
of commands that start with Control-x; many of them have to do with
files, buffers, and related things, and all of them consist of
Control-x followed by some other character.

Another thing about the command for finding a file is that you have
to say what file name you want.  We say the command "reads an argument
from the terminal" (in this case, the argument is the name of the
file).  After you type the command

	C-x C-f   Find a file

Emacs asks you to type the file name.  It echoes on the bottom line of
the screen.  When you type <Return> to end the file name it disappears.

>> Type C-x C-f, then type C-g.  This cancels the  C-x C-f command
   that was using the minibuffer.  So you do not find any file.

In a little while the file contents appear on the screen.  You can
edit the contents.  When you wish to make the changes permanent,
issue the command

	C-x C-s   Save the file

The contents of Emacs are written into the file.

When saving is finished, Emacs prints the name of the file written.
You should save fairly often, so that you will not lose very much
work if the system should crash.

>> Type C-x C-s, saving your copy of the tutorial.
   This should print "Wrote TUTORIAL" at the bottom of the screen.

To make a new file, just find it "as if" it already existed.  Then
start typing in the text.  When you ask to "save" the file, Emacs
will really create the file with the text that you have inserted.
>From then on, you can consider yourself to be editing an already
existing file.


BUFFERS
d342 16
a357 2
If you find a second file with C-x C-f, the first file remains inside
Emacs.  This way you can get quite a number of files inside Emacs.
d359 2
a360 84
The object inside Emacs which holds the text read from one file
is called a "buffer."  Finding a file makes a new buffer inside Emacs.
To see a list of the buffers that exist in Emacs, type

	C-x C-b   List buffers

>> Try C-x C-b now.

See how each buffer has a name, and it may also have a file name
for the file whose contents it holds.  Some buffers do not correspond
to files.  For example, the buffer named "*Buffer List*" does
not have any file.  It is the buffer which contains the buffer
list that was made by C-x C-b.  ANY text you see in an Emacs window
has to be in some buffer.

>> Type C-x 1 to get rid of the buffer list.

If you make changes to the text of one file, then find another file,
this does not save the first file.  Its changes remain inside Emacs,
in that file's buffer.  The creation or editing of the second file's
buffer has no effect on the first file's buffer.  This is very useful,
but it also means that you need a convenient way to save the first
file's buffer.  It would be a nuisance to have to switch back to
it with C-x C-f in order to save it with C-x C-s.  So we have

	C-x s     Save some buffers

C-x s goes through the list of all the buffers you have
and finds the ones that contain files you have changed.
For each such buffer, C-x s asks you whether to save it.


EXTENDING THE COMMAND SET
-------------------------

There are many, many more Emacs commands than could possibly be put
on all the control and meta characters.  Emacs gets around this with
the X (eXtend) command.  This comes in two flavors:

	C-x	Character eXtend.  Followed by one character.
	M-x	Named command eXtend.  Followed by a long name.

These are commands that are generally useful but used less than the
commands you have already learned about.  You have already seen two
of them: the file commands C-x C-f to Find and C-x C-s to Save.
Another example is the command to tell Emacs that you'd like to stop
editing and get rid of Emacs.  The command to do this is C-x C-c.
(Don't worry; it offers to save each changed file before it kills the
Emacs.)

C-z is the usual way to exit Emacs, because it is always better not to
kill the Emacs if you are going to do any more editing.  On systems
which allow it, C-z exits from Emacs to a CLI but does not destroy the
Emacs; you can resume editing by ending that CLI or depth arranging.

You would use C-x C-c if you were running out of memory.  You would
also use it to exit an Emacs invoked under mail handling programs and
other random utilities, since they may not believe you have really
finished using the Emacs if it continues to exist.

There are many C-x commands.  The ones you know are:

	C-x C-f		Find file.
	C-x C-s		Save file.
	C-x C-b		List buffers.
	C-x C-c		Quit Emacs.

Named eXtended commands are commands which are used even less
frequently, or commands which are used only in certain modes.  These
commands are usually called "functions".  An example is the function
replace-string, which globally replaces one string with another.  When
you type M-x, Emacs prompts you at the bottom of the screen with
M-x and you should type the name of the function you wish to call; in
this case, "query-replace".  Just type "que<TAB>" and Emacs will
complete the name.  End the command name with <Return>.
Then type the two "arguments"--the string to be replaced, and the string
to replace it with--each one ended with a Return.

>> Move the cursor to the blank line two lines below this one.
   Then type M-x repl s<Return>changed<Return>altered<Return>.

   Notice how this line has changed: you've replaced
   the word c-h-a-n-g-e-d with "altered" wherever it occurred
   after the cursor.
d362 2
d365 1
a365 1
MODE LINE
d368 1
a368 156
If Emacs sees that you are typing commands slowly it shows them to you
at the bottom of the screen in an area called the "echo area."  The echo
area contains the bottom line of the screen.  The line immediately above
it is called the MODE LINE.  The mode line says something like

--**-Mg: TUTORIAL			   (fundamental)------------------------

This is a very useful "information" line.

The stars near the front mean that you have made changes to the text.
Right after you visit or save a file, there are no stars, just dashes.

The part of the mode line inside the parentheses is to tell you what
modes you are in.  The default mode is fundamental which is what you
are in now.  It is an example of a "mode".  There are several modes in
Emacs for editing different styles of text, such as indent, bsmap,
fill, etc.  Each mode makes a few commands behave differently.

One mode which is very useful, especially for editing English text, is
Auto Fill mode.  When this mode is on, Emacs breaks the line in
between words automatically whenever the line gets too long.  You can
turn this mode on by doing M-x auto-fill-mode<Return>.  When the mode
is on, you can turn it off by doing M-x auto-fill-mode<Return>.

>> Type M-x auto-fill-mode<Return> now.  Then insert a line of "asdf "
   over again until you see it divide into two lines.  You must put in
   spaces between them because Auto Fill breaks lines only at spaces.

The margin is usually set at 70 characters, but you can change it
with the C-x f command.  You should give the margin setting you want
as a numeric argument.

>> Type C-x f with an argument of 20.  (C-u 2 0 C-x f).
   Then type in some text and see Emacs fill lines of 20
   characters with it.  Then set the margin back to 70 using
   C-x f again.

If you make changes in the middle of a paragraph, Auto Fill mode
does not re-fill it for you.
To re-fill the paragraph, type M-q (Meta-q) with the cursor inside
that paragraph.

>> Move the cursor into the previous paragraph and type M-q.

SEARCHING
---------

Emacs can do searches for strings (these are groups of contiguous
characters or words) either forward through the file or backward
through it.  To search for the string means that you are trying to
locate it somewhere in the file and have Emacs show you where the
occurrences of the string exist.  This type of search is somewhat
different from what you may be familiar with.  It is a search that is
performed as you type in the thing to search for.  The command to
initiate a search is C-s for forward search, and C-r for reverse
search.  BUT WAIT!  Don't do them now.  When you type C-s you'll
notice that the string "I-search" appears as a prompt in the echo
area.  This tells you that Emacs is in what is called an incremental
search waiting for you to type the thing that you want to search for.
<ESC> terminates a search.

>> Now type C-s to start a search.  SLOWLY, one letter at a time,
   type the word 'cursor', pausing after you type each
   character to notice what happens to the cursor.
>> Type C-s to find the next occurrence of "cursor".
>> Now type <DEL> four times and see how the cursor moves.
>> Type <ESC> to terminate the search.

Did you see what happened?  Emacs, in an incremental search, tries to
go to the occurrence of the string that you've typed out so far.  To go
to the next occurrence of 'cursor' just type C-s again.  If no such
occurrence exists Emacs beeps and tells you that it is a failing
search.  C-g would also terminate the search.

If you are in the middle of an incremental search and type <DEL>,
you'll notice that the last character in the search string is erased
and the search backs up to the last place of the search.  For
instance, suppose you currently have typed 'cu' and you see that your
cursor is at the first occurrence of 'cu'.  If you now type <DEL>,
the 'u' on the search line is erased and you'll be repositioned in the
text to the occurrence of 'c' where the search took you before you
typed the 'u'.  This provides a useful means for backing up while you
are searching.

If you are in the middle of a search and happen to type a control
character (other than a C-s or C-r, which tell Emacs to search for the
next occurrence of the string), the search is terminated.

The C-s starts a search that looks for any occurrence of the search
string AFTER the current cursor position.  But what if you want to
search for something earlier in the text?  To do this, type C-r for
Reverse search.  Everything that applies to C-s applies to C-r except
that the direction of the search is reversed.

If your incremental search fails and you type C-s or C-r again
(without changing your search direction), Emacs will wrap the
search around to the beginning (or end, if searching backwards) of
the buffer and search from there.

GETTING MORE HELP
-----------------

In this tutorial we have tried to supply just enough information to
get you started using Emacs.  There is so much available in Emacs that
it would be impossible to explain it all here.  However, you may want
to learn more about Emacs since it has numerous desirable features
that you don't know about yet.


CONCLUSION
----------

Remember, to exit Emacs permanently use C-x C-c.  To exit to a shell
temporarily, so that you can come back in, use C-z.

This tutorial is meant to be understandable to all new users, so if
you found something unclear, don't sit and blame yourself - complain!


COPYING
-------

This tutorial, like all of GNU Emacs, is copyrighted, and comes with
permission to distribute copies on certain conditions:

Copyright (c) 1985 Richard M. Stallman

   Permission is granted to anyone to make or distribute verbatim copies
   of this document as received, in any medium, provided that the
   copyright notice and permission notice are preserved,
   and that the distributor grants the recipient permission
   for further redistribution as permitted by this notice.

   Permission is granted to distribute modified versions
   of this document, or of portions of it,
   under the above conditions, provided also that they
   carry prominent notices stating who last altered them.

The conditions for copying Emacs itself are slightly different
but in the same spirit.  Please read the file COPYING and then
do give copies of GNU Emacs to your friends.
Help stamp out ownership of software by using, writing,
and sharing free software!

Mg itself is public domain, and may be given away freely.  See the
README file about differences from GNU emacs, and why Mg exists.

*******************************************************************************
***        This document heavily cut by Randy M. Spencer to apply to        ***
***      Mg written my Mike Meyer and gang.  It was released		    ***
***      at the AAA users group meeting in Lafayette CA, an Amiga Users     ***
***      Group.  My profound thanks to Richard Stallman for his work, I     ***
***      am proud to carry his initials.                                    ***
***	 Additional modifications were done by Robert A. Larson for Mg	    ***
***	 version 2a, mainly the name change from MicroGnuEmacs to Mg.	    ***
*******************************************************************************
a369 1
See other files accompanying this for more system specific information.
@


1.3
log
@This is a no binary change which does:

- spelling, punctuation fixes
- variable declaration lineup
- use parentheses for return and sizeof
- K&R function declarations -> ANSI
- other minor code beautification

ok henning@@
@
text
@d545 4
@


1.2
log
@spaces
@
text
@d266 1
a266 1
For instance, type C-n a couple times to postion the cursor
d444 1
a444 1
   the word c-h-a-n-g-e-d with "altered" wherever it occured
d600 1
a600 1
***	 Additional modifacations were done by Robert A. Larson for Mg	    ***
@


1.1
log
@initial import of mg2a
@
text
@d63 1
a63 1
 
d148 1
a148 1
before you type the command.  
d151 1
a151 1
	
d244 1
a244 1
	C-d   	     delete the next character after the cursor
d329 1
a329 1
the screen.  When you type <Return> to end the file name it disappears. 
d331 1
a331 1
>> Type C-x C-f, then type C-g.  This cancels the  C-x C-f command 
d340 1
a340 1
The contents of Emacs are written into the file.  
d360 1
a360 1
Emacs.  This way you can get quite a number of files inside Emacs. 
d420 1
a420 1
finished using the Emacs if it continues to exist. 
d456 1
a456 1
--**-Mg: TUTORIAL		  	   (fundamental)------------------------
d533 1
a533 1
are searching. 
d553 1
a553 1
that you don't know about yet.  
@

