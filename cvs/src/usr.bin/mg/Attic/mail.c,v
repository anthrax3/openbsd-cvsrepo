head	1.10;
access;
symbols
	OPENBSD_4_3:1.9.0.10
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.8
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.6
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.4
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.2
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.6.0.2
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.4.0.4
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.3.0.2
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.1.0.2
	OPENBSD_3_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.10
date	2008.06.13.18.51.02;	author kjell;	state dead;
branches;
next	1.9;

1.9
date	2005.11.18.20.56.53;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2005.10.14.19.46.46;	author kjell;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.13.05.47.45;	author kjell;	state Exp;
branches;
next	1.6;

1.6
date	2005.08.09.00.53.48;	author kjell;	state Exp;
branches;
next	1.5;

1.5
date	2005.04.03.02.09.28;	author db;	state Exp;
branches;
next	1.4;

1.4
date	2004.07.22.01.25.25;	author vincent;	state Exp;
branches;
next	1.3;

1.3
date	2004.01.27.23.43.37;	author vincent;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.12.22.55.00;	author vincent;	state Exp;
branches;
next	1.1;

1.1
date	2003.05.05.11.12.07;	author vincent;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Remove mail-mode. It was a buggy reimplementation of auto-fill-mode.
If you use this, change your habits (and .mg) to use the following
commands instead:

mail-mode => auto-fill-mode
mail-set-margin => set-fill-column

ok henning@@. Will also "fix" debian bug #460189
@
text
@/* $OpenBSD: mail.c,v 1.9 2005/11/18 20:56:53 deraadt Exp $ */
/*
 * This file is in the public domain.
 *
 * Author: Vincent Labrecque, April 2003
 */
#include <ctype.h>

#include "def.h"
#include "kbd.h"
#include "funmap.h"

void		 mail_init(void);
static int	 fake_self_insert(int, int);
static int	 mail(int, int);

int limit = 72;

/* mappings for all "printable" characters ('-' -> '~') */
static PF mail_fake[] = {
	fake_self_insert, fake_self_insert, fake_self_insert, fake_self_insert,
	fake_self_insert, fake_self_insert, fake_self_insert, fake_self_insert,
	fake_self_insert, fake_self_insert, fake_self_insert, fake_self_insert,
	fake_self_insert, fake_self_insert, fake_self_insert, fake_self_insert,
	fake_self_insert, fake_self_insert, fake_self_insert, fake_self_insert,
	fake_self_insert, fake_self_insert, fake_self_insert, fake_self_insert,
	fake_self_insert, fake_self_insert, fake_self_insert, fake_self_insert,
	fake_self_insert, fake_self_insert, fake_self_insert, fake_self_insert,
	fake_self_insert, fake_self_insert, fake_self_insert, fake_self_insert,
	fake_self_insert, fake_self_insert, fake_self_insert, fake_self_insert,
	fake_self_insert, fake_self_insert, fake_self_insert, fake_self_insert,
	fake_self_insert, fake_self_insert, fake_self_insert, fake_self_insert,
	fake_self_insert, fake_self_insert, fake_self_insert, fake_self_insert,
	fake_self_insert, fake_self_insert, fake_self_insert, fake_self_insert,
	fake_self_insert, fake_self_insert, fake_self_insert, fake_self_insert,
	fake_self_insert, fake_self_insert, fake_self_insert, fake_self_insert,
	fake_self_insert, fake_self_insert, fake_self_insert, fake_self_insert,
	fake_self_insert, fake_self_insert, fake_self_insert, fake_self_insert,
	fake_self_insert, fake_self_insert, fake_self_insert, fake_self_insert,
	fake_self_insert, fake_self_insert, fake_self_insert, fake_self_insert,
	fake_self_insert, fake_self_insert, fake_self_insert, fake_self_insert,
	fake_self_insert, fake_self_insert, fake_self_insert, fake_self_insert,
	fake_self_insert, fake_self_insert, fake_self_insert, fake_self_insert,
	fake_self_insert, fake_self_insert, fake_self_insert
};

static struct KEYMAPE (1 + IMAPEXT) mailmap = {
	1,
	1 + IMAPEXT,
	rescan,
	{
		{ ' ', '~', mail_fake, NULL }
	}
};

int
mail_set_limit(int f, int n)
{
	char buf[32], *rep;

	if ((f & FFARG) != 0) {
		limit = n;
	} else {
		if ((rep = eread("Margin: ", buf, sizeof(buf),
		    EFNEW | EFCR)) == NULL)
			return (ABORT);
		else if (rep[0] == '\0')
			return (FALSE);
		limit = atoi(rep);
	}
	return (TRUE);
}

void
mail_init(void)
{
	funmap_add(mail, "mail-mode");
	funmap_add(mail_set_limit, "mail-set-margin");
	maps_add((KEYMAP *)&mailmap, "mail-mode");
}

/* ARGSUSED */
static int
mail(int f, int n)
{
	curbp->b_modes[0] = name_mode("fundamental");
	curbp->b_modes[1] = name_mode("mail-mode");
	if (curbp->b_modes[1] == NULL) {
		panic("can't happen");
		mail_init();
		curbp->b_modes[1] = name_mode("mail-mode");
	}
	curbp->b_nmodes = 1;
	curwp->w_flag |= WFMODE;
	return (TRUE);
}

static int
fake_self_insert(int f, int n)
{
	int len = llength(curwp->w_dotp), col;

	if (len + 1 > limit) {
		/*
		 * Find the column at which we should cut, taking
		 * word boundaries into account.
		 */
		for (col = limit; col > 0; col--)
			if (isspace(curwp->w_dotp->l_text[col])) {
				col++;	/* XXX - skip the space */
				break;
			}

		if (curbp->b_doto == len) {
			/*
			 * User is appending to the line; simple case.
			 */
			if (col) {
				curwp->w_doto = col;
				lnewline();
				gotoeol(0, 1);
			}
			curwp->w_wrapline = NULL;
		} else if ((len - col) > 0) {
			/*
			 * User is shifting words by inserting in the middle.
			 */
			const char *trail;
			int save_doto = curwp->w_doto;
			struct line *save_dotp = curwp->w_dotp;
			int tlen = len - col;

			trail = curwp->w_dotp->l_text + col;

			/*
			 * Create a new line or reuse the last wrapping line
			 * unless we could fill it.
			 */
			if (curwp->w_wrapline != lforw(curwp->w_dotp) ||
			    llength(curwp->w_wrapline) + tlen >= limit) {
				curwp->w_doto = col;
				lnewline();
				curwp->w_wrapline = curwp->w_dotp;
				curwp->w_dotp = save_dotp;
			} else {
				curwp->w_dotp = curwp->w_wrapline;
				curwp->w_doto = 0;

				/* insert trail */
				linsert_str(trail, tlen);

				/* delete trail */
				curwp->w_dotp = save_dotp;
				curwp->w_doto = col;
				ldelete(tlen, KNONE);	/* don't store in kill ring */
			}

			/*
			 * Readjust dot to point at where the user expects
			 * it to be after an insertion.
			 */
			curwp->w_doto = save_doto;
			if (curwp->w_doto >= col) {
				curwp->w_dotp = curwp->w_wrapline;
				curwp->w_doto -= col;
			}
		}
	}
	selfinsert(f, n);
	return (TRUE);
}
@


1.9
log
@greedy use of typedef struct was making code harder to read; ok kjell cloder
@
text
@d1 1
a1 1
/* $OpenBSD: mail.c,v 1.8 2005/10/14 19:46:46 kjell Exp $ */
@


1.8
log
@add missing /* ARGSUSED */ to quiet lint.
@
text
@d1 1
a1 1
/* $OpenBSD: mail.c,v 1.7 2005/10/13 05:47:45 kjell Exp $ */
d130 1
a130 1
			LINE *save_dotp = curwp->w_dotp;
@


1.7
log
@Fix dired mode. Make deletions work, and keystrokes match emacs.
* dired-other-window should default to current buffer's path.
* Remove redundant code (from Han Boetes)
* Move initialization (and since we're here, fix mail-mode initialization
  too)
* Remove redundant keymap in dired.c, and replace it with
  the better one that was being ignored in keymap.c.
@
text
@d1 1
a1 1
/* $OpenBSD: mail.c,v 1.6 2005/08/09 00:53:48 kjell Exp $ */
d82 1
@


1.6
log
@Clean up eread handling in mg. (basically, fallout from the 'enter often
means abort' behaviour added during the hackathon). Eliminates
redundant ereply function, fixes miscellaneous cores when aborting,
and move a number of assumed pathnames into the prompt text, since
they are used there anyway. All changes consistent with emacs behavior

ok beck@@ many, many moons ago.
@
text
@d1 1
a1 1
/* $OpenBSD: mail.c,v 1.5 2005/04/03 02:09:28 db Exp $ */
d13 1
@


1.5
log
@This is a no binary change which does:

- spelling, punctuation fixes
- variable declaration lineup
- use parentheses for return and sizeof
- K&R function declarations -> ANSI
- other minor code beautification

ok henning@@
@
text
@d1 1
a1 1
/* $OpenBSD: mail.c,v 1.4 2004/07/22 01:25:25 vincent Exp $ */
d63 2
a64 1
		if ((rep = ereply("Margin: ", buf, sizeof(buf))) == NULL)
d66 1
a66 1
		else if (*rep == '\0')
@


1.4
log
@stage 1 of the infinite minibuffer work - add support for on the fly
buffer reallocation in veread().  This commit only changes the API.
All the buffers have exactly the same bounds as before for now.

tested by a couple of my very helpful testers!
@
text
@d1 1
a1 1
/* $OpenBSD: mail.c,v 1.3 2004/01/27 23:43:37 vincent Exp $ */
d51 1
a51 1
		{ ' ', '~', mail_fake, NULL },
d64 1
a64 1
			return ABORT;
d66 1
a66 1
			return FALSE;
d69 1
a69 1
	return TRUE;
d102 2
a103 2
		 * find the column at which we should cut, taking
		 * word boundaries into account
d113 1
a113 1
			 * user is appending to the line; simple case.
d123 1
a123 1
			 * user is shifting words by inserting in the middle.
d156 1
a156 1
			 * readjust dot to point at where the user expects
@


1.3
log
@make mail-mode more intelligent on middle-of-line insertions, and add a
comment to change the wrapping column. (mail-set-margin)

tested by henning and phessler, thanks!
@
text
@d1 1
a1 1
/* $OpenBSD: mail.c,v 1.2 2004/01/12 22:55:00 vincent Exp $ */
d58 1
a58 2
	char buf[32];
	int s;
d63 5
a67 3
		if ((s = ereply("Margin: ", buf, sizeof(buf))) != TRUE)
			return s;
		limit = atoi(buf);
@


1.2
log
@request modeline redrawing to see mail-mode appear as soon as the mode
is turned on
@
text
@d1 1
a1 1
/* $OpenBSD: mail.c,v 1.1 2003/05/05 11:12:07 vincent Exp $ */
a12 2
#define LIMIT	72

d16 2
d43 1
a43 1
	fake_self_insert, fake_self_insert, fake_self_insert,
d55 16
d75 1
d97 1
a97 2
	if (curwp->w_doto >= LIMIT - 1) {
		int save = curwp->w_doto;
d99 1
d101 2
a102 7
		 * Find the last word boundary.
		 */
		while (curwp->w_doto > 0 &&
		    !isspace(curwp->w_dotp->l_text[curwp->w_doto - 1]))
			curwp->w_doto--;
		/*
		 * handle lines without any spaces correctly!
d104 60
a163 4
		if (curwp->w_doto == 0 && !isspace(curwp->w_dotp->l_text[0]))
			curwp->w_doto = save;
		newline(FFRAND, 1);
		gotoeol(0, 1);
@


1.1
log
@add a mail-mode, to do automatic line-wrapping.

(at the same time, change the command line parsing to support a
 -f <mode> that is slightly different from the one in gnu emacs,
we apply it to all buffers created from command line arguments,
so you can use "mg -f mail-mode" as your editor. manpage change
coming soon)

ok henning
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d73 1
@

