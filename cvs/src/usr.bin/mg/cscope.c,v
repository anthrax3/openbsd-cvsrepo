head	1.16;
access;
symbols
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.16.0.4
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.2
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.9.0.4
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.3.0.6
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3;
locks; strict;
comment	@ * @;


1.16
date	2016.01.19.14.51.00;	author sunil;	state Exp;
branches;
next	1.15;
commitid	kwqKGWJ3XBGYK7ah;

1.15
date	2016.01.19.11.39.06;	author sunil;	state Exp;
branches;
next	1.14;
commitid	DhSVWLolj5gTMoeI;

1.14
date	2016.01.19.11.21.38;	author sunil;	state Exp;
branches;
next	1.13;
commitid	xPk8Mt3md4pIV7vR;

1.13
date	2016.01.19.11.15.39;	author sunil;	state Exp;
branches;
next	1.12;
commitid	semod6Lz8bpwZMKT;

1.12
date	2016.01.19.11.13.02;	author sunil;	state Exp;
branches;
next	1.11;
commitid	3miqQGHAqXtPujsX;

1.11
date	2015.09.29.02.07.49;	author guenther;	state Exp;
branches;
next	1.10;
commitid	CahbaEqQk6XXuFul;

1.10
date	2015.09.26.21.51.58;	author jasper;	state Exp;
branches;
next	1.9;
commitid	yS81WdIVlzEJxLUH;

1.9
date	2015.03.19.21.22.15;	author bcallah;	state Exp;
branches;
next	1.8;
commitid	GbEBL4CfPvDkB8hj;

1.8
date	2014.11.16.04.16.41;	author guenther;	state Exp;
branches;
next	1.7;
commitid	a9yG0qCw9VEW27qI;

1.7
date	2014.11.16.00.59.25;	author guenther;	state Exp;
branches;
next	1.6;
commitid	wPiRVLQSgR82vXRT;

1.6
date	2014.04.10.14.03.57;	author jsg;	state Exp;
branches;
next	1.5;

1.5
date	2014.03.20.07.47.29;	author lum;	state Exp;
branches;
next	1.4;

1.4
date	2014.01.22.09.43.53;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.07.02.08.08.31;	author lum;	state Exp;
branches;
next	1.2;

1.2
date	2012.06.26.16.59.23;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2012.06.07.15.15.04;	author lum;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Bounds check while stripping trailing slashes. From max at
max-fillinger.net.

Ok lum@@
@
text
@/*	$OpenBSD: cscope.c,v 1.15 2016/01/19 11:39:06 sunil Exp $	*/

/*
 * This file is in the public domain.
 *
 * Author: Sunil Nimmagadda <sunil@@openbsd.org>
 */

#include <sys/queue.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <ctype.h>
#include <errno.h>
#include <fcntl.h>
#include <fnmatch.h>
#include <limits.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "def.h"

#define CSSYMBOL      0
#define CSDEFINITION  1
#define CSCALLEDFUNCS 2
#define CSCALLERFUNCS 3
#define CSTEXT        4
#define CSEGREP       6
#define CSFINDFILE    7
#define CSINCLUDES    8

struct cstokens {
	const char *fname;
	const char *function;
	const char *lineno;
	const char *pattern;
};

struct csmatch {
	TAILQ_ENTRY(csmatch) entry;
	int lineno;
};

struct csrecord {
	TAILQ_ENTRY(csrecord) entry;
	char *filename;
	TAILQ_HEAD(matches, csmatch) matches;
};

static TAILQ_HEAD(csrecords, csrecord) csrecords = TAILQ_HEAD_INITIALIZER(csrecords);
static struct csrecord *addentryr;
static struct csrecord *currecord;
static struct csmatch  *curmatch;
static const char      *addentryfn;
static const char      *csprompt[] = {
	"Find this symbol: ",
	"Find this global definition: ",
	"Find functions called by this function: ",
	"Find functions calling this function: ",
	"Find this text string: ",
	"Change this text string: ",
	"Find this egrep pattern: ",
	"Find this file: ",
	"Find files #including this file: "
};

static int  addentry(struct buffer *, char *);
static void csflush(void);
static int  do_cscope(int);
static int  csexists(const char *);
static int  getattr(char *, struct cstokens *);
static int  jumptomatch(void);
static void prettyprint(struct buffer *, struct cstokens *);
static const char *ltrim(const char *);

/*
 * Find this symbol. Bound to C-c s s
 */
/* ARGSUSED */
int
cssymbol(int f, int n)
{
	return (do_cscope(CSSYMBOL));
}

/*
 * Find this global definition. Bound to C-c s d
 */
/* ARGSUSED */int
csdefinition(int f, int n)
{
	return (do_cscope(CSDEFINITION));
}

/*
 * Find functions called by this function. Bound to C-c s l
 */
/* ARGSUSED */
int
csfuncalled(int f, int n)
{
	return (do_cscope(CSCALLEDFUNCS));
}

/*
 * Find functions calling this function. Bound to C-c s c
 */
/* ARGSUSED */
int
cscallerfuncs(int f, int n)
{
	return (do_cscope(CSCALLERFUNCS));
}

/*
 * Find this text. Bound to C-c s t
 */
/* ARGSUSED */
int
csfindtext(int f, int n)
{
	return (do_cscope(CSTEXT));
}

/*
 * Find this egrep pattern. Bound to C-c s e
 */
/* ARGSUSED */
int
csegrep(int f, int n)
{
	return (do_cscope(CSEGREP));
}

/*
 * Find this file. Bound to C-c s f
 */
/* ARGSUSED */
int
csfindfile(int f, int n)
{
	return (do_cscope(CSFINDFILE));
}

/*
 * Find files #including this file. Bound to C-c s i
 */
/* ARGSUSED */
int
csfindinc(int f, int n)
{
	return (do_cscope(CSINCLUDES));
}

/*
 * Create list of files to index in the given directory
 * using cscope-indexer.
 */
/* ARGSUSED */
int
cscreatelist(int f, int n)
{
	struct buffer *bp;
	struct stat sb;
	FILE *fpipe;
	char dir[NFILEN], cmd[BUFSIZ], title[BUFSIZ], *line, *bufp;
	size_t len;
	int clen;

	if (getbufcwd(dir, sizeof(dir)) == FALSE)
		dir[0] = '\0';

	bufp = eread("Index files in directory: ", dir,
	    sizeof(dir), EFCR | EFDEF | EFNEW | EFNUL);

	if (bufp == NULL)
		return (ABORT);
	else if (bufp[0] == '\0')
		return (FALSE);

	if (stat(dir, &sb) == -1) {
		dobeep();
		ewprintf("stat: %s", strerror(errno));
		return (FALSE);
	} else if (S_ISDIR(sb.st_mode) == 0) {
		dobeep();
		ewprintf("%s: Not a directory", dir);
		return (FALSE);
	}

	if (csexists("cscope-indexer") == FALSE) {
		dobeep();
		ewprintf("no such file or directory, cscope-indexer");
		return (FALSE);
	}

	clen = snprintf(cmd, sizeof(cmd), "cscope-indexer -v %s", dir);
	if (clen < 0 || clen >= sizeof(cmd))
		return (FALSE);

	if ((fpipe = popen(cmd, "r")) == NULL) {
		dobeep();
		ewprintf("problem opening pipe");
		return (FALSE);
	}

	bp = bfind("*cscope*", TRUE);
	if (bclear(bp) != TRUE) {
		pclose(fpipe);
		return (FALSE);
	}
	bp->b_flag |= BFREADONLY;

	clen = snprintf(title, sizeof(title), "%s%s",
	    "Creating cscope file list 'cscope.files' in: ", dir);
	if (clen < 0 || clen >= sizeof(title)) {
		pclose(fpipe);
		return (FALSE);
	}
	addline(bp, title);
	addline(bp, "");
	/* All lines are NUL terminated */
	while ((line = fgetln(fpipe, &len)) != NULL) {
		line[len - 1] = '\0';
		addline(bp, line);
	}
	pclose(fpipe);
	return (popbuftop(bp, WNONE));
}

/*
 * Next Symbol. Bound to C-c s n
 */
/* ARGSUSED */
int
csnextmatch(int f, int n)
{
	struct csrecord *r;
	struct csmatch *m;

	if (curmatch == NULL) {
		if ((r = TAILQ_FIRST(&csrecords)) == NULL) {
			dobeep();
			ewprintf("The *cscope* buffer does not exist yet");
			return (FALSE);
		}
		currecord = r;
		curmatch = TAILQ_FIRST(&r->matches);
	} else {
		m = TAILQ_NEXT(curmatch, entry);
		if (m == NULL) {
			r = TAILQ_NEXT(currecord, entry);
			if (r == NULL) {
				dobeep();
				ewprintf("The end of *cscope* buffer has been"
				    " reached");
				return (FALSE);
			} else {
				currecord = r;
				curmatch = TAILQ_FIRST(&currecord->matches);
			}
		} else
			curmatch = m;
	}
	return (jumptomatch());
}

/*
 * Previous Symbol. Bound to C-c s p
 */
/* ARGSUSED */
int
csprevmatch(int f, int n)
{
	struct csmatch *m;
	struct csrecord *r;

	if (curmatch == NULL)
		return (FALSE);
	else {
		m  = TAILQ_PREV(curmatch, matches, entry);
		if (m)
			curmatch = m;
		else {
			r = TAILQ_PREV(currecord, csrecords, entry);
			if (r == NULL) {
				dobeep();
				ewprintf("The beginning of *cscope* buffer has"
				    " been reached");
				return (FALSE);
			} else {
				currecord = r;
				curmatch = TAILQ_LAST(&currecord->matches,
				    matches);
			}
		}
	}
	return (jumptomatch());
}

/*
 * Next file.
 */
int
csnextfile(int f, int n)
{
	struct csrecord *r;

	if (curmatch == NULL) {
		if ((r = TAILQ_FIRST(&csrecords)) == NULL) {
			dobeep();
			ewprintf("The *cscope* buffer does not exist yet");
			return (FALSE);
		}

	} else {
		if ((r = TAILQ_NEXT(currecord, entry)) == NULL) {
			dobeep();
			ewprintf("The end of *cscope* buffer has been reached");
			return (FALSE);
		}
	}
	currecord = r;
	curmatch = TAILQ_FIRST(&currecord->matches);
	return (jumptomatch());
}

/*
 * Previous file.
 */
int
csprevfile(int f, int n)
{
	struct csrecord *r;

	if (curmatch == NULL) {
		if ((r = TAILQ_FIRST(&csrecords)) == NULL) {
			dobeep();
			ewprintf("The *cscope* buffer does not exist yet");
			return (FALSE);
		}

	} else {
		if ((r = TAILQ_PREV(currecord, csrecords, entry)) == NULL) {
			dobeep();
			ewprintf("The beginning of *cscope* buffer has been"
			    " reached");
			return (FALSE);
		}
	}
	currecord = r;
	curmatch = TAILQ_FIRST(&currecord->matches);
	return (jumptomatch());
}

/*
 * The current symbol location is extracted from currecord->filename and
 * curmatch->lineno. Load the file similar to filevisit and goto the
 * lineno recorded.
 */
int
jumptomatch(void)
{
	struct buffer *bp;
	char *adjf;

	if (curmatch == NULL || currecord == NULL)
		return (FALSE);
	adjf = adjustname(currecord->filename, TRUE);
	if (adjf == NULL)
		return (FALSE);
	if ((bp = findbuffer(adjf)) == NULL)
		return (FALSE);
	curbp = bp;
	if (showbuffer(bp, curwp, WFFULL) != TRUE)
		return (FALSE);
	if (bp->b_fname[0] == '\0') {
		if (readin(adjf) != TRUE)
			killbuffer(bp);
	}
	gotoline(FFARG, curmatch->lineno);
	return (TRUE);
}

/*
 * Ask for the symbol, construct cscope commandline with the symbol
 * and passed in index. Popen cscope, read the output into *cscope*
 * buffer and pop it.
 */
int
do_cscope(int i)
{
	struct buffer *bp;
	FILE *fpipe;
	char pattern[MAX_TOKEN], cmd[BUFSIZ], title[BUFSIZ];
	char *p, *buf;
	int clen, nores = 0;
	size_t len;

	/* If current buffer isn't a source file just return */
	if (fnmatch("*.[chy]", curbp->b_fname, 0) != 0) {
		dobeep();
		ewprintf("C-c s not defined");
		return (FALSE);
	}

	if (curtoken(0, 1, pattern) == FALSE)
		return (FALSE);
	p = eread("%s", pattern, MAX_TOKEN, EFNEW | EFCR | EFDEF, csprompt[i]);
	if (p == NULL)
		return (ABORT);
	else if (p[0] == '\0')
		return (FALSE);

	if (csexists("cscope") == FALSE) {
		dobeep();
		ewprintf("no such file or directory, cscope");
		return (FALSE);
	}

	csflush();
	clen = snprintf(cmd, sizeof(cmd), "cscope -L -%d %s 2>/dev/null",
	    i, pattern);
	if (clen < 0 || clen >= sizeof(cmd))
		return (FALSE);

	if ((fpipe = popen(cmd, "r")) == NULL) {
		dobeep();
		ewprintf("problem opening pipe");
		return (FALSE);
	}

	bp = bfind("*cscope*", TRUE);
	if (bclear(bp) != TRUE) {
		pclose(fpipe);
		return (FALSE);
	}
	bp->b_flag |= BFREADONLY;

	clen = snprintf(title, sizeof(title), "%s%s", csprompt[i], pattern);
	if (clen < 0 || clen >= sizeof(title)) {
		pclose(fpipe);
		return (FALSE);
	}
	addline(bp, title);
	addline(bp, "");
	addline(bp, "-------------------------------------------------------------------------------");
	/* All lines are NUL terminated */
	while ((buf = fgetln(fpipe, &len)) != NULL) {
		buf[len - 1] = '\0';
		if (addentry(bp, buf) != TRUE)
			return (FALSE);
		nores = 1;
	};
	pclose(fpipe);
	addline(bp, "-------------------------------------------------------------------------------");
	if (nores == 0)
		ewprintf("No matches were found.");
	return (popbuftop(bp, WNONE));
}

/*
 * For each line read from cscope output, extract the tokens,
 * add them to list and pretty print a line in *cscope* buffer.
 */
int
addentry(struct buffer *bp, char *csline)
{
	struct csrecord *r;
	struct csmatch *m;
	struct cstokens t;
	int lineno;
	char buf[BUFSIZ];
	const char *errstr;

	r = NULL;
	if (getattr(csline, &t) == FALSE)
		return (FALSE);

	lineno = strtonum(t.lineno, INT_MIN, INT_MAX, &errstr);
	if (errstr)
		return (FALSE);

	if (addentryfn == NULL || strcmp(addentryfn, t.fname) != 0) {
		if ((r = malloc(sizeof(struct csrecord))) == NULL)
			return (FALSE);
		addentryr = r;
		if ((r->filename = strndup(t.fname, NFILEN)) == NULL)
			goto cleanup;
		addentryfn = r->filename;
		TAILQ_INIT(&r->matches);
		if ((m = malloc(sizeof(struct csmatch))) == NULL)
			goto cleanup;
		m->lineno = lineno;
		TAILQ_INSERT_TAIL(&r->matches, m, entry);
		TAILQ_INSERT_TAIL(&csrecords, r, entry);
		addline(bp, "");
		if (snprintf(buf, sizeof(buf), "*** %s", t.fname) < 0)
			goto cleanup;
		addline(bp, buf);
	} else {
		if ((m = malloc(sizeof(struct csmatch))) == NULL)
			goto cleanup;
		m->lineno = lineno;
		TAILQ_INSERT_TAIL(&addentryr->matches, m, entry);
	}
	prettyprint(bp, &t);
	return (TRUE);
cleanup:
	free(r);
	return (FALSE);
}

/*
 * Cscope line: <filename> <function> <lineno> <pattern>
 */
int
getattr(char *line, struct cstokens *t)
{
	char *p;

	if ((p = strchr(line, ' ')) == NULL)
		return (FALSE);
	*p++ = '\0';
	t->fname = line;
	line = p;

	if ((p = strchr(line, ' ')) == NULL)
		return (FALSE);
	*p++ = '\0';
	t->function = line;
	line = p;

	if ((p = strchr(line, ' ')) == NULL)
		return (FALSE);
	*p++ = '\0';
	t->lineno = line;

	if (*p == '\0')
		return (FALSE);
	t->pattern = p;

	return (TRUE);
}

void
prettyprint(struct buffer *bp, struct cstokens *t)
{
	char buf[BUFSIZ];

	if (snprintf(buf, sizeof(buf), "%s[%s]\t\t%s",
	    t->function, t->lineno, ltrim(t->pattern)) < 0)
		return;
	addline(bp, buf);
}

const char *
ltrim(const char *s)
{
	while (isblank((unsigned char)*s))
		s++;
	return s;
}

void
csflush(void)
{
	struct csrecord *r;
	struct csmatch *m;

	while ((r = TAILQ_FIRST(&csrecords)) != NULL) {
		free(r->filename);
		while ((m = TAILQ_FIRST(&r->matches)) != NULL) {
			TAILQ_REMOVE(&r->matches, m, entry);
			free(m);
		}
		TAILQ_REMOVE(&csrecords, r, entry);
		free(r);
	}
	addentryr = NULL;
	addentryfn = NULL;
	currecord = NULL;
	curmatch = NULL;
}

/*
 * Check if the cmd exists in $PATH. Split on ":" and iterate through
 * all paths in $PATH.
 */
int
csexists(const char *cmd)
{
	char fname[NFILEN], *dir, *path, *pathc, *tmp;
	int  len, dlen;

	/* Special case if prog contains '/' */
	if (strchr(cmd, '/')) {
		if (access(cmd, F_OK) == -1)
			return (FALSE);
		else
			return (TRUE);
	}
	if ((tmp = getenv("PATH")) == NULL)
		return (FALSE);
	if ((pathc = path = strndup(tmp, NFILEN)) == NULL) {
		dobeep();
		ewprintf("out of memory");
		return (FALSE);
	}
	while ((dir = strsep(&path, ":")) != NULL) {
		if (*dir == '\0')
			continue;

		dlen = strlen(dir);
		while (dlen > 0 && dir[dlen-1] == '/')
			dir[--dlen] = '\0';     /* strip trailing '/' */

		len = snprintf(fname, sizeof(fname), "%s/%s", dir, cmd);
		if (len == -1 || len >= sizeof(fname)) {
			dobeep();
			ewprintf("path too long");
			goto cleanup;
		}
		if(access(fname, F_OK) == 0) {
			free(pathc);
			return (TRUE);
		}
	}
cleanup:
	free(pathc);
	return (FALSE);
}
@


1.15
log
@Update my mail address.
@
text
@d1 1
a1 1
/*	$OpenBSD: cscope.c,v 1.14 2016/01/19 11:21:38 sunil Exp $	*/
d617 1
a617 1
		while (dir[dlen-1] == '/')
@


1.14
log
@Fix bad indents. From max at max-fillinger.net

Ok lum@@ jasper@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cscope.c,v 1.13 2016/01/19 11:15:39 sunil Exp $	*/
d6 1
a6 1
 * Author: Sunil Nimmagadda <sunil@@sunilnimmagadda.com>
@


1.13
log
@Check snprintf(3) return value for overflow instead of manual length
check. From max at max-fillinger.net.

Ok lum@@ jasper@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cscope.c,v 1.12 2016/01/19 11:13:02 sunil Exp $	*/
d595 2
a596 2
       char fname[NFILEN], *dir, *path, *pathc, *tmp;
       int  len, dlen;
d598 16
a613 16
       /* Special case if prog contains '/' */
       if (strchr(cmd, '/')) {
               if (access(cmd, F_OK) == -1)
                       return (FALSE);
               else
                       return (TRUE);
       }
       if ((tmp = getenv("PATH")) == NULL)
               return (FALSE);
       if ((pathc = path = strndup(tmp, NFILEN)) == NULL) {
               dobeep();
               ewprintf("out of memory");
               return (FALSE);
       }
       while ((dir = strsep(&path, ":")) != NULL) {
               if (*dir == '\0')
d616 15
a630 15
               dlen = strlen(dir);
               while (dir[dlen-1] == '/')
                       dir[--dlen] = '\0';     /* strip trailing '/' */

               len = snprintf(fname, sizeof(fname), "%s/%s", dir, cmd);
               if (len == -1 || len >= sizeof(fname)) {
                       dobeep();
                       ewprintf("path too long");
                       goto cleanup;
               }
               if(access(fname, F_OK) == 0) {
		       free(pathc);
		       return (TRUE);
	       }
       }
@


1.12
log
@Skip empty entries in $PATH instead of erroneously interpreting
them as ".".

Ok lum@@ jasper@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cscope.c,v 1.11 2015/09/29 02:07:49 guenther Exp $	*/
d596 1
a596 1
       int  cmdlen, dlen;
a611 1
       cmdlen = strlen(cmd);
d620 2
a621 1
               if (dlen + 1 + cmdlen >= sizeof(fname))  {
a625 1
               snprintf(fname, sizeof(fname), "%s/%s", dir, cmd);
@


1.11
log
@Mark eread(), veread(), and eformat() as printf-like and
Convert eread(buf, a2, a3, a4) to eread("%s", a2, a3, a4, buf)

ok millert@@ lum@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cscope.c,v 1.10 2015/09/26 21:51:58 jasper Exp $	*/
d615 1
a615 1
                       *dir = '.';
@


1.10
log
@whitespace
@
text
@d1 1
a1 1
/*	$OpenBSD: cscope.c,v 1.9 2015/03/19 21:22:15 bcallah Exp $	*/
d411 1
a411 1
	p = eread(csprompt[i], pattern, MAX_TOKEN, EFNEW | EFCR | EFDEF);
@


1.9
log
@Clean up the includes in mg.
This does the following:
Moves all POSIX headers from sysdef.h into the individual .c files so that
each file now only includes what it needs. All headers are properly sorted.
Moves the remainder of sysdef.h to other files (mostly def.h) and deletes
sysdef.h now that it's no longer contains anything.
Tweak a comment that references sysdef.h so that it no longer does that.
ok florian@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cscope.c,v 1.8 2014/11/16 04:16:41 guenther Exp $	*/
d171 1
a171 1
	
d174 2
a175 2
	
	bufp = eread("Index files in directory: ", dir, 
d177 1
a177 1
	
d182 1
a182 1
		
d192 1
a192 1
	
d198 1
a198 1
	
d208 1
a208 1
	
d230 1
a230 1
	return (popbuftop(bp, WNONE));	
d242 1
a242 1
	
d310 1
a310 1
	
d327 1
a327 1
	return (jumptomatch());	
d337 1
a337 1
	
d355 1
a355 1
	return (jumptomatch());	
d359 2
a360 2
 * The current symbol location is extracted from currecord->filename and 
 * curmatch->lineno. Load the file similar to filevisit and goto the 
d368 1
a368 1
	
a384 1
	
d389 1
a389 1
 * and passed in index. Popen cscope, read the output into *cscope* 
d408 1
a408 1
	
d410 1
a410 1
		return (FALSE);	
d422 1
a422 1
	
d434 1
a434 1
	
d456 1
a456 1
	}; 
d485 1
a485 1
		
d572 1
a572 1
	
@


1.8
log
@Stop using <sys/param.h>; replace MAXPATHLEN with PATH_MAX, stop using MAX(),
and pull in <limits.h> for *_MAX constants.

inspired on a diff from Kamil Rytarowski (n54 (at) gmx.com)
ok bcallah@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cscope.c,v 1.7 2014/11/16 00:59:25 guenther Exp $	*/
d9 2
a11 3
#include <sys/stat.h>
#include <sys/queue.h>

d13 1
d17 1
d21 1
@


1.7
log
@ctype macros/functions expect unsigned char values.  Note that the lgetc()
macro does the cast internally like getc() does, so its return should be
put an in int for the same reason.

based on a diff from Kamil Rytarowski (n54 (at) gmx.com)
@
text
@d1 1
a1 1
/*	$OpenBSD: cscope.c,v 1.6 2014/04/10 14:03:57 jsg Exp $	*/
d16 1
@


1.6
log
@fix fd leaks in error paths missed last time around
@
text
@d1 1
a1 1
/*	$OpenBSD: cscope.c,v 1.5 2014/03/20 07:47:29 lum Exp $	*/
d560 1
a560 1
	while (isblank(*s))
@


1.5
log
@Add some missing dobeeps.
ok florian@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cscope.c,v 1.4 2014/01/22 09:43:53 jsg Exp $	*/
d215 2
a216 1
	if (clen < 0 || clen >= sizeof(title))
d218 1
d441 2
a442 1
	if (clen < 0 || clen >= sizeof(title))
d444 1
@


1.4
log
@fix fd leaks in error paths
ok krw@@ phessler@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cscope.c,v 1.3 2012/07/02 08:08:31 lum Exp $	*/
d181 1
d185 1
d191 1
d201 1
d240 1
d251 1
d284 1
d308 1
d315 1
d335 1
d342 1
d400 1
d414 1
d426 1
d602 1
d616 1
@


1.3
log
@Maintain mg's Public Domain license heritage.

Sunil Nimmagadda agrees.
@
text
@d1 1
a1 1
/*	$OpenBSD: cscope.c,v 1.2 2012/06/26 16:59:23 jasper Exp $	*/
d203 2
a204 1
	if (bclear(bp) != TRUE)
d206 1
d418 2
a419 1
	if (bclear(bp) != TRUE)
d421 1
@


1.2
log
@add missing rcs ids
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.78 2012/03/14 13:56:35 lum Exp $	*/
d4 1
a4 1
 * Copyright (c) 2012 Sunil Nimmagadda <sunil@@sunilnimmagadda.com>
d6 1
a6 11
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
@


1.1
log
@Add some cscope support to mg. From Sunil Nimmagadda.  Due to some
structural limitations in mg, mg doesn't behave exactly the same as
emacs cscope (see the README) but is still very usable.

man page bits reviewed by jmc@@, otherwise tested and reviewed by
myself.
@
text
@d1 2
@

