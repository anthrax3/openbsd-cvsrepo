head	1.17;
access;
symbols
	OPENBSD_6_1:1.17.0.6
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.17.0.4
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.16.0.4
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.14.0.34
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.32
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.28
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.26
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.24
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.22
	OPENBSD_5_0:1.14.0.20
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.18
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.16
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.12
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.14
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.10
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.8
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.6
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.14.0.4
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.14.0.2
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.10.0.4
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.2
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.8.0.2
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.5.0.2
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.3.0.2
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.2.0.6
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2;
locks; strict;
comment	@ * @;


1.17
date	2015.09.26.21.51.58;	author jasper;	state Exp;
branches;
next	1.16;
commitid	yS81WdIVlzEJxLUH;

1.16
date	2015.03.19.21.22.15;	author bcallah;	state Exp;
branches;
next	1.15;
commitid	GbEBL4CfPvDkB8hj;

1.15
date	2014.10.11.03.03.44;	author doug;	state Exp;
branches;
next	1.14;
commitid	5mf7dV5N2C1gLdRE;

1.14
date	2007.02.08.21.40.03;	author kjell;	state Exp;
branches;
next	1.13;

1.13
date	2006.12.20.21.31.45;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2006.12.20.20.21.06;	author kjell;	state Exp;
branches;
next	1.11;

1.11
date	2006.12.20.20.16.16;	author kjell;	state Exp;
branches;
next	1.10;

1.10
date	2005.10.14.19.46.46;	author kjell;	state Exp;
branches;
next	1.9;

1.9
date	2005.10.13.20.28.49;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2005.08.09.00.53.47;	author kjell;	state Exp;
branches;
next	1.7;

1.7
date	2005.04.29.07.22.38;	author otto;	state Exp;
branches;
next	1.6;

1.6
date	2005.04.03.02.09.28;	author db;	state Exp;
branches;
next	1.5;

1.5
date	2005.03.10.16.58.57;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2004.07.22.01.25.24;	author vincent;	state Exp;
branches;
next	1.3;

1.3
date	2003.09.22.23.07.07;	author vincent;	state Exp;
branches;
next	1.2;

1.2
date	2002.08.22.23.28.19;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.29.12.41.42;	author vincent;	state Exp;
branches;
next	;


desc
@@


1.17
log
@whitespace
@
text
@/* $OpenBSD: autoexec.c,v 1.16 2015/03/19 21:22:15 bcallah Exp $ */
/* this file is in the public domain */
/* Author: Vincent Labrecque <vincent@@openbsd.org>	April 2002 */

#include <sys/queue.h>
#include <fnmatch.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "def.h"
#include "funmap.h"

struct autoexec {
	SLIST_ENTRY(autoexec) next;	/* link in the linked list */
	const char	*pattern;	/* Pattern to match to filenames */
	PF		 fp;
};

static SLIST_HEAD(, autoexec)	 autos;
static int			 ready;


#define AUTO_GROW 8
/*
 * Return a NULL terminated array of function pointers to be called
 * when we open a file that matches <fname>.  The list must be free(ed)
 * after use.
 */
PF *
find_autoexec(const char *fname)
{
	PF		*pfl, *npfl;
	int		 have, used;
	struct autoexec *ae;

	if (!ready)
		return (NULL);

	pfl = NULL;
	have = 0;
	used = 0;
	SLIST_FOREACH(ae, &autos, next) {
		if (fnmatch(ae->pattern, fname, 0) == 0) {
			if (used >= have) {
				npfl = reallocarray(pfl, have + AUTO_GROW + 1,
				    sizeof(PF));
				if (npfl == NULL)
					panic("out of memory");
				pfl = npfl;
				have += AUTO_GROW;
			}
			pfl[used++] = ae->fp;
		}
	}
	if (used)
		pfl[used] = NULL;

	return (pfl);
}

int
add_autoexec(const char *pattern, const char *func)
{
	PF		 fp;
	struct autoexec *ae;

	if (!ready) {
		SLIST_INIT(&autos);
		ready = 1;
	}
	fp = name_function(func);
	if (fp == NULL)
		return (FALSE);
	ae = malloc(sizeof(*ae));
	if (ae == NULL)
		return (FALSE);
	ae->fp = fp;
	ae->pattern = strdup(pattern);
	if (ae->pattern == NULL) {
		free(ae);
		return (FALSE);
	}
	SLIST_INSERT_HEAD(&autos, ae, next);

	return (TRUE);
}

/*
 * Register an auto-execute hook; that is, specify a filename pattern
 * (conforming to the shell's filename globbing rules) and an associated
 * function to execute when a file matching the specified pattern
 * is read into a buffer.
*/
/* ARGSUSED */
int
auto_execute(int f, int n)
{
	char	patbuf[128], funcbuf[128], *patp, *funcp;
	int	s;

	if ((patp = eread("Filename pattern: ", patbuf, sizeof(patbuf),
	    EFNEW | EFCR)) == NULL)
		return (ABORT);
	else if (patp[0] == '\0')
		return (FALSE);
	if ((funcp = eread("Execute: ", funcbuf, sizeof(funcbuf),
	    EFNEW | EFCR | EFFUNC)) == NULL)
		return (ABORT);
	else if (funcp[0] == '\0')
		return (FALSE);
	if ((s = add_autoexec(patp, funcp)) != TRUE)
		return (s);
	return (TRUE);
}
@


1.16
log
@Clean up the includes in mg.
This does the following:
Moves all POSIX headers from sysdef.h into the individual .c files so that
each file now only includes what it needs. All headers are properly sorted.
Moves the remainder of sysdef.h to other files (mostly def.h) and deletes
sysdef.h now that it's no longer contains anything.
Tweak a comment that references sysdef.h so that it no longer does that.
ok florian@@
@
text
@d1 1
a1 1
/* $OpenBSD: autoexec.c,v 1.15 2014/10/11 03:03:44 doug Exp $ */
d94 1
a94 1
 * is read into a buffer. 
@


1.15
log
@Userland reallocarray() audit.

Avoid potential integer overflow in the size argument of malloc() and
realloc() by using reallocarray() to avoid unchecked multiplication.

ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: autoexec.c,v 1.14 2007/02/08 21:40:03 kjell Exp $ */
d5 7
a13 2

#include <fnmatch.h>
@


1.14
log
@comment a function
@
text
@d1 1
a1 1
/* $OpenBSD: autoexec.c,v 1.13 2006/12/20 21:31:45 deraadt Exp $ */
d42 1
a42 1
				npfl = realloc(pfl, (have + AUTO_GROW + 1) *
@


1.13
log
@kjell loves his extra spaces
@
text
@d1 1
a1 1
/* $OpenBSD: autoexec.c,v 1.12 2006/12/20 20:21:06 kjell Exp $ */
d85 6
@


1.12
log
@since auto-execute expects a function name at the "Execute:" prompt anyway,
enable autocomplete for that field.
@
text
@d1 1
a1 1
/* $OpenBSD: autoexec.c,v 1.11 2006/12/20 20:16:16 kjell Exp $ */
d52 1
a52 1
	if (used) 
@


1.11
log
@kill an ill-formed (and totally unnecessary) realloc.
Spotted by theo.
@
text
@d1 1
a1 1
/* $OpenBSD: autoexec.c,v 1.10 2005/10/14 19:46:46 kjell Exp $ */
d98 1
a98 1
	    EFNEW | EFCR)) == NULL)
@


1.10
log
@add missing /* ARGSUSED */ to quiet lint.
@
text
@d1 1
a1 1
/* $OpenBSD: autoexec.c,v 1.9 2005/10/13 20:28:49 deraadt Exp $ */
d19 2
d42 2
a43 1
				npfl = realloc(pfl, (have + 8 + 1) * sizeof(PF));
d47 1
a47 1
				have += 8;
d52 1
a52 1
	if (used) {
d54 1
a54 2
		pfl = realloc(pfl, (used + 1) * sizeof(PF));
	}
@


1.9
log
@spacing
@
text
@d1 1
a1 1
/* $OpenBSD: autoexec.c,v 1.8 2005/08/09 00:53:47 kjell Exp $ */
d83 1
@


1.8
log
@Clean up eread handling in mg. (basically, fallout from the 'enter often
means abort' behaviour added during the hackathon). Eliminates
redundant ereply function, fixes miscellaneous cores when aborting,
and move a number of assumed pathnames into the prompt text, since
they are used there anyway. All changes consistent with emacs behavior

ok beck@@ many, many moons ago.
@
text
@d1 1
a1 1
/* $OpenBSD: autoexec.c,v 1.7 2005/04/29 07:22:38 otto Exp $ */
d59 1
a59 1
	PF 		 fp;
@


1.7
log
@Remove unneeded include. Han Boetes.
@
text
@d1 1
a1 1
/* $OpenBSD: autoexec.c,v 1.6 2005/04/03 02:09:28 db Exp $ */
d89 2
a90 1
	if ((patp = ereply("Filename pattern: ", patbuf, sizeof(patbuf))) == NULL)
d94 2
a95 1
	if ((funcp = ereply("Execute: ", funcbuf, sizeof(funcbuf))) == NULL)
@


1.6
log
@This is a no binary change which does:

- spelling, punctuation fixes
- variable declaration lineup
- use parentheses for return and sizeof
- K&R function declarations -> ANSI
- other minor code beautification

ok henning@@
@
text
@d1 1
a1 1
/* $OpenBSD: autoexec.c,v 1.5 2005/03/10 16:58:57 deraadt Exp $ */
a6 2

#include <sys/queue.h>
@


1.5
log
@spacing
@
text
@d1 1
a1 1
/* $OpenBSD: autoexec.c,v 1.4 2004/07/22 01:25:24 vincent Exp $ */
d29 2
a30 2
	PF *pfl, *npfl;
	int have, used;
d61 1
a61 1
	PF fp;
d71 1
a71 1
	ae = malloc(sizeof *ae);
d88 2
a89 2
	char patbuf[128], funcbuf[128], *patp, *funcp;
	int s;
d91 2
a92 2
	if ((patp = ereply("Filename pattern: ", patbuf, sizeof patbuf)) == NULL)
		return ABORT;
d94 3
a96 3
		return FALSE;
	if ((funcp = ereply("Execute: ", funcbuf, sizeof funcbuf)) == NULL)
		return ABORT;
d98 1
a98 1
		return FALSE;
@


1.4
log
@stage 1 of the infinite minibuffer work - add support for on the fly
buffer reallocation in veread().  This commit only changes the API.
All the buffers have exactly the same bounds as before for now.

tested by a couple of my very helpful testers!
@
text
@d1 1
a1 1
/* $OpenBSD: autoexec.c,v 1.3 2003/09/22 23:07:07 vincent Exp $ */
a41 4
				/*
				 * XXX - realloc(NULL, ...) is not really
				 *       portable
				 */
@


1.3
log
@canonical realloc

ok tedu henning
@
text
@d1 1
a1 1
/* $OpenBSD: autoexec.c,v 1.2 2002/08/22 23:28:19 deraadt Exp $ */
d92 1
a92 1
	char patbuf[128], funcbuf[128];
d95 9
a103 5
	if ((s = ereply("Filename pattern: ", patbuf, sizeof patbuf)) != TRUE)
		return (s);
	if ((s = ereply("Execute: ", funcbuf, sizeof funcbuf)) != TRUE)
		return (s);
	if ((s = add_autoexec(patbuf, funcbuf)) != TRUE)
@


1.2
log
@knf
@
text
@d1 1
a1 1
/* $OpenBSD: autoexec.c,v 1.1 2002/05/29 12:41:42 vincent Exp $ */
d29 1
a29 1
	PF *pfl;
a41 1
				have += 8;
d46 2
a47 2
				pfl = realloc(pfl, (have + 1) * sizeof(PF));
				if (pfl == NULL)
d49 2
@


1.1
log
@ add an "auto-execute" feature, that allows binding function calls to
certain patterns. for example, `auto-execute "*.c" auto-indent-mode'.

 ok art@@
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d43 1
a43 1
				/* 
d93 1
a93 1
	
@

