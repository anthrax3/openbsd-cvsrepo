head	1.30;
access;
symbols
	OPENBSD_6_2_BASE:1.30
	OPENBSD_6_1:1.29.0.4
	OPENBSD_6_1_BASE:1.29
	OPENBSD_6_0:1.28.0.6
	OPENBSD_6_0_BASE:1.28
	OPENBSD_5_9:1.28.0.2
	OPENBSD_5_9_BASE:1.28
	OPENBSD_5_8:1.28.0.4
	OPENBSD_5_8_BASE:1.28
	OPENBSD_5_7:1.27.0.2
	OPENBSD_5_7_BASE:1.27
	OPENBSD_5_6:1.27.0.4
	OPENBSD_5_6_BASE:1.27
	OPENBSD_5_5:1.24.0.4
	OPENBSD_5_5_BASE:1.24
	OPENBSD_5_4:1.23.0.2
	OPENBSD_5_4_BASE:1.23
	OPENBSD_5_3:1.20.0.2
	OPENBSD_5_3_BASE:1.20
	OPENBSD_5_2:1.19.0.18
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.19
	OPENBSD_5_1:1.19.0.16
	OPENBSD_5_0:1.19.0.14
	OPENBSD_5_0_BASE:1.19
	OPENBSD_4_9:1.19.0.12
	OPENBSD_4_9_BASE:1.19
	OPENBSD_4_8:1.19.0.10
	OPENBSD_4_8_BASE:1.19
	OPENBSD_4_7:1.19.0.6
	OPENBSD_4_7_BASE:1.19
	OPENBSD_4_6:1.19.0.8
	OPENBSD_4_6_BASE:1.19
	OPENBSD_4_5:1.19.0.4
	OPENBSD_4_5_BASE:1.19
	OPENBSD_4_4:1.19.0.2
	OPENBSD_4_4_BASE:1.19
	OPENBSD_4_3:1.18.0.4
	OPENBSD_4_3_BASE:1.18
	OPENBSD_4_2:1.18.0.2
	OPENBSD_4_2_BASE:1.18
	OPENBSD_4_1:1.17.0.4
	OPENBSD_4_1_BASE:1.17
	OPENBSD_4_0:1.17.0.2
	OPENBSD_4_0_BASE:1.17
	OPENBSD_3_9:1.16.0.2
	OPENBSD_3_9_BASE:1.16
	OPENBSD_3_8:1.14.0.2
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.11.0.4
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.2
	OPENBSD_3_6_BASE:1.11
	OPENBSD_3_5:1.10.0.2
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.9.0.6
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.9.0.4
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3;
locks; strict;
comment	@ * @;


1.30
date	2017.05.30.07.05.22;	author florian;	state Exp;
branches;
next	1.29;
commitid	L2GD0imd4EtMY0Yn;

1.29
date	2016.09.12.18.32.54;	author millert;	state Exp;
branches;
next	1.28;
commitid	bY831WNxIZskCNii;

1.28
date	2015.03.19.21.22.15;	author bcallah;	state Exp;
branches;
next	1.27;
commitid	GbEBL4CfPvDkB8hj;

1.27
date	2014.04.03.20.17.12;	author lum;	state Exp;
branches;
next	1.26;

1.26
date	2014.03.31.18.00.58;	author lum;	state Exp;
branches;
next	1.25;

1.25
date	2014.03.20.07.47.29;	author lum;	state Exp;
branches;
next	1.24;

1.24
date	2013.10.21.19.04.56;	author florian;	state Exp;
branches;
next	1.23;

1.23
date	2013.05.30.04.17.25;	author lum;	state Exp;
branches;
next	1.22;

1.22
date	2013.05.18.11.23.29;	author lum;	state Exp;
branches;
next	1.21;

1.21
date	2013.05.17.04.59.29;	author lum;	state Exp;
branches;
next	1.20;

1.20
date	2012.11.27.19.46.46;	author jasper;	state Exp;
branches;
next	1.19;

1.19
date	2008.06.13.20.07.40;	author kjell;	state Exp;
branches;
next	1.18;

1.18
date	2007.05.28.17.52.17;	author kjell;	state Exp;
branches;
next	1.17;

1.17
date	2006.05.02.17.10.25;	author kjell;	state Exp;
branches;
next	1.16;

1.16
date	2005.12.20.05.04.28;	author kjell;	state Exp;
branches;
next	1.15;

1.15
date	2005.11.20.18.47.11;	author kjell;	state Exp;
branches;
next	1.14;

1.14
date	2005.08.09.00.53.48;	author kjell;	state Exp;
branches;
next	1.13;

1.13
date	2005.06.14.18.14.40;	author kjell;	state Exp;
branches;
next	1.12;

1.12
date	2005.04.03.02.09.28;	author db;	state Exp;
branches;
next	1.11;

1.11
date	2004.07.22.01.25.24;	author vincent;	state Exp;
branches;
next	1.10;

1.10
date	2004.03.05.22.02.18;	author vincent;	state Exp;
branches;
next	1.9;

1.9
date	2002.07.01.14.33.44;	author vincent;	state Exp;
branches;
next	1.8;

1.8
date	2002.03.11.13.02.56;	author vincent;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.13.03.03.49;	author vincent;	state Exp;
branches;
next	1.6;

1.6
date	2001.05.24.03.05.21;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.23.22.20.35;	author art;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.29.01.58.06;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.13.06.12.14;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2000.02.26.22.53.16;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.25.19.08.46;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.30
log
@fix -Wshadow warnings.
Found by bcallah, thanks!
@
text
@/*	$OpenBSD: dir.c,v 1.29 2016/09/12 18:32:54 millert Exp $	*/

/* This file is in the public domain. */

/*
 * Name:	MG 2a
 *		Directory management functions
 * Created:	Ron Flax (ron@@vsedev.vse.com)
 *		Modified for MG 2a by Mic Kaczmarczik 03-Aug-1987
 */

#include <sys/queue.h>
#include <sys/stat.h>
#include <signal.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>

#include "def.h"

static char	 mgcwd[NFILEN];

/*
 * Initialize anything the directory management routines need.
 */
void
dirinit(void)
{
	mgcwd[0] = '\0';
	if (getcwd(mgcwd, sizeof(mgcwd)) == NULL)
		ewprintf("Can't get current directory!");
	if (mgcwd[0] != '\0' && !(mgcwd[0] == '/' && mgcwd[1] == '\0'))
		(void)strlcat(mgcwd, "/", sizeof(mgcwd));
}

/*
 * Change current working directory.
 */
/* ARGSUSED */
int
changedir(int f, int n)
{
	char	bufc[NFILEN], *bufp;

	(void)strlcpy(bufc, mgcwd, sizeof(bufc));
	if ((bufp = eread("Change default directory: ", bufc, NFILEN,
	    EFDEF | EFNEW | EFCR | EFFILE)) == NULL)
		return (ABORT);
	else if (bufp[0] == '\0')
		return (FALSE);
	/* Append trailing slash */
	if (chdir(bufc) == -1) {
		dobeep();
		ewprintf("Can't change dir to %s", bufc);
		return (FALSE);
	}
	if ((bufp = getcwd(mgcwd, sizeof(mgcwd))) == NULL) {
		if (bufc[0] == '/')
			(void)strlcpy(mgcwd, bufc, sizeof(mgcwd));
		else
			(void)strlcat(mgcwd, bufc, sizeof(mgcwd));
	}
	if (mgcwd[strlen(mgcwd) - 1] != '/')
		(void)strlcat(mgcwd, "/", sizeof(mgcwd));
	ewprintf("Current directory is now %s", mgcwd);
	return (TRUE);
}

/*
 * Show current directory.
 */
/* ARGSUSED */
int
showcwdir(int f, int n)
{
	ewprintf("Current directory: %s", mgcwd);
	return (TRUE);
}

int
getcwdir(char *buf, size_t len)
{
	if (strlcpy(buf, mgcwd, len) >= len)
		return (FALSE);

	return (TRUE);
}

/* Create the directory and it's parents. */
/* ARGSUSED */
int
makedir(int f, int n)
{
	return (ask_makedir());
}

int
ask_makedir(void)
{

	char		 bufc[NFILEN];
	char		*path;

	if (getbufcwd(bufc, sizeof(bufc)) != TRUE)
		return (ABORT);
	if ((path = eread("Make directory: ", bufc, NFILEN,
	    EFDEF | EFNEW | EFCR | EFFILE)) == NULL)
		return (ABORT);
	else if (path[0] == '\0')
		return (FALSE);

	return (do_makedir(path));
}

int
do_makedir(char *path)
{
	struct stat	 sb;
	int		 finished, ishere;
	mode_t		 dir_mode, f_mode, oumask;
	char		*slash;

	if ((path = adjustname(path, TRUE)) == NULL)
		return (FALSE);

	/* Remove trailing slashes */
	slash = strrchr(path, '\0');
	while (--slash > path && *slash == '/')
		*slash = '\0';

	slash = path;

	oumask = umask(0);
	f_mode = 0777 & ~oumask;
	dir_mode = f_mode | S_IWUSR | S_IXUSR;

	for (;;) {
		slash += strspn(slash, "/");
		slash += strcspn(slash, "/");

		finished = (*slash == '\0');
		*slash = '\0';

		ishere = !stat(path, &sb);
		if (finished && ishere) {
			dobeep();
			ewprintf("Cannot create directory %s: file exists",
			     path);
			return(FALSE);
		} else if (!finished && ishere && S_ISDIR(sb.st_mode)) {
			*slash = '/';
			continue;
		}

		if (mkdir(path, finished ? f_mode : dir_mode) == 0) {
			if (f_mode > 0777 && chmod(path, f_mode) < 0) {
				umask(oumask);
				return (ABORT);
			}
		} else {
			if (!ishere || !S_ISDIR(sb.st_mode)) {
				if (!ishere) {
					dobeep();
					ewprintf("Creating directory: "
					    "permission denied, %s", path);
				} else
					eerase();

				umask(oumask);
				return (FALSE);
			}
		}

		if (finished)
			break;

		*slash = '/';
	}

	eerase();
	umask(oumask);
	return (TRUE);
}
@


1.29
log
@If we can't get the CWD, use relative paths.  Fixes editing files
in a directory without read permission.  OK lum@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.c,v 1.28 2015/03/19 21:22:15 bcallah Exp $	*/
d120 1
a120 1
	mode_t		 dir_mode, mode, oumask;
d134 2
a135 2
	mode = 0777 & ~oumask;
	dir_mode = mode | S_IWUSR | S_IXUSR;
d155 2
a156 2
		if (mkdir(path, finished ? mode : dir_mode) == 0) {
			if (mode > 0777 && chmod(path, mode) < 0) {
@


1.28
log
@Clean up the includes in mg.
This does the following:
Moves all POSIX headers from sysdef.h into the individual .c files so that
each file now only includes what it needs. All headers are properly sorted.
Moves the remainder of sysdef.h to other files (mostly def.h) and deletes
sysdef.h now that it's no longer contains anything.
Tweak a comment that references sysdef.h so that it no longer does that.
ok florian@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.c,v 1.27 2014/04/03 20:17:12 lum Exp $	*/
d30 1
a30 1
	if (getcwd(mgcwd, sizeof(mgcwd)) == NULL) {
d32 1
a32 3
		chdir("/");
	}
	if (!(mgcwd[0] == '/' && mgcwd [1] == '\0'))
d57 6
a62 2
	if ((bufp = getcwd(mgcwd, sizeof(mgcwd))) == NULL)
		panic("Can't get current directory!");
d65 1
a65 1
	ewprintf("Current directory is now %s", bufp);
@


1.27
log
@When finding a file in a non-existant directory:

C-x C-f ~/no/dir/here/fn

offer to make the directory by pressing 'y', instead of suggesting the
make-directory command. ok jasper@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.c,v 1.26 2014/03/31 18:00:58 lum Exp $	*/
d12 1
d14 4
@


1.26
log
@Allow more than one level of directories to be create via
make-directory again. ok florian@@ jasper@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.c,v 1.25 2014/03/20 07:47:29 lum Exp $	*/
d87 1
a87 1
	return (do_makedir());
d91 1
a91 1
do_makedir(void)
a93 3
	struct stat	 sb;
	int		 finished, ishere;
	mode_t		 dir_mode, mode, oumask;
d95 1
a95 1
	char		*slash,	*path;
d104 11
@


1.25
log
@Add some missing dobeeps.
ok florian@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.c,v 1.24 2013/10/21 19:04:56 florian Exp $	*/
d115 2
@


1.24
log
@unbreak make-directory by stripping trailing '/'
OK jasper@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.c,v 1.23 2013/05/30 04:17:25 lum Exp $	*/
d50 1
d129 1
d145 2
a146 1
				if (!ishere)
d149 1
a149 1
				else
@


1.23
log
@Reuse the makedir() function in dir.c for dired's
dired-create-directory command.
ok jasper@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.c,v 1.22 2013/05/18 11:23:29 lum Exp $	*/
d110 4
a113 1
	slash = path;
@


1.22
log
@Use adjustname() for path. ok jasper@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.c,v 1.21 2013/05/17 04:59:29 lum Exp $	*/
d86 7
@


1.21
log
@If directory exists when trying to create a new one, warn user.

ok jasper@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.c,v 1.20 2012/11/27 19:46:46 jasper Exp $	*/
d89 2
a90 2
	char		 bufc[NFILEN], path[MAXPATHLEN];
	char		*slash,	*tpath, *fpath;
d94 1
a94 1
	if ((tpath = eread("Make directory: ", bufc, NFILEN,
d97 1
a97 1
	else if (tpath[0] == '\0')
d100 1
a100 1
	if ((fpath = expandtilde(tpath)) == NULL)
d103 1
a103 2
	(void)strlcpy(path, fpath, sizeof(path));
	free(fpath);
a104 1
	slash = path;
@


1.20
log
@- add 'make-directory' (not bound to any shortcut).

feedback from florian@@ lum@@
ok florian@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.c,v 1.19 2008/06/13 20:07:40 kjell Exp $	*/
d119 5
a123 1
		if (!finished && ishere && S_ISDIR(sb.st_mode)) {
@


1.19
log
@One more "//" instead of "/" case. Hidden in a getcwd.
Noted, ok otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.c,v 1.18 2007/05/28 17:52:17 kjell Exp $	*/
d12 2
d78 72
@


1.18
log
@Add a global-wd-mode command, which toggles between the current
behavior (every buffer maintains its own cwd) and the old behavior of
one global working directory. This makes it slightly easier to hack
on things like kernel code, where compilation, etc, are initiated from
a different directory than you are working in.
While here, fix setting/handling of global wd.
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.c,v 1.17 2006/05/02 17:10:25 kjell Exp $	*/
d27 2
a28 1
	(void)strlcat(mgcwd, "/", sizeof(mgcwd));
@


1.17
log
@Make buffers store their own working directory. This makes things like
grep, compile, lint work as expected (act on current buffer's cwd).
Display this path when opening or replacing a file, rather than
relying on the user to guess, or remember.
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.c,v 1.16 2005/12/20 05:04:28 kjell Exp $	*/
d41 1
a41 1
	    EFDEF | EFNEW | EFCR)) == NULL)
d45 1
a48 5
	} else {
		if ((bufp = getcwd(mgcwd, sizeof(mgcwd))) == NULL)
			panic("Can't get current directory!");
		ewprintf("Current directory is now %s", bufp);
		return (TRUE);
d50 6
@


1.16
log
@Do some delinting of strl-type functions. Also, remove a superfluous
word in the undo-list.
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.c,v 1.15 2005/11/20 18:47:11 kjell Exp $	*/
d14 1
a14 2
char		*wdir;
static char	 cwd[NFILEN];
d22 2
a23 1
	if ((wdir = getcwd(cwd, sizeof(cwd))) == NULL) {
a25 1
		(void)strlcpy(cwd, "/", sizeof(cwd));
d27 1
d37 1
a37 1
	char	bufc[NPAT], *bufp;
d39 2
a40 2
	(void)strlcpy(bufc, wdir, sizeof(bufc));
	if ((bufp = eread("Change default directory: ", bufc, NPAT,
d49 1
a49 1
		if ((wdir = getcwd(cwd, sizeof(cwd))) == NULL)
d51 1
a51 1
		ewprintf("Current directory is now %s", wdir);
d63 10
a72 1
	ewprintf("Current directory: %s", wdir);
@


1.15
log
@#ifdef NO_DIR can go too. From Han Boetes.
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.c,v 1.14 2005/08/09 00:53:48 kjell Exp $	*/
d26 1
a26 1
		strlcpy(cwd, "/", sizeof(cwd));
@


1.14
log
@Clean up eread handling in mg. (basically, fallout from the 'enter often
means abort' behaviour added during the hackathon). Eliminates
redundant ereply function, fixes miscellaneous cores when aborting,
and move a number of assumed pathnames into the prompt text, since
they are used there anyway. All changes consistent with emacs behavior

ok beck@@ many, many moons ago.
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.c,v 1.13 2005/06/14 18:14:40 kjell Exp $	*/
a13 1
#ifndef NO_DIR
a65 1
#endif
@


1.13
log
@Add explicit public domain notices to all public domain files.
ok millert@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.c,v 1.12 2005/04/03 02:09:28 db Exp $	*/
d40 3
a42 1
	if ((bufp = ereply("Change default directory: ", bufc, NPAT)) == NULL)
d44 2
a45 2
	if (bufc[0] == '\0')
		(void)strlcpy(bufc, wdir, sizeof(bufc));
@


1.12
log
@This is a no binary change which does:

- spelling, punctuation fixes
- variable declaration lineup
- use parentheses for return and sizeof
- K&R function declarations -> ANSI
- other minor code beautification

ok henning@@
@
text
@d1 3
a3 1
/*	$OpenBSD: dir.c,v 1.11 2004/07/22 01:25:24 vincent Exp $	*/
@


1.11
log
@stage 1 of the infinite minibuffer work - add support for on the fly
buffer reallocation in veread().  This commit only changes the API.
All the buffers have exactly the same bounds as before for now.

tested by a couple of my very helpful testers!
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.c,v 1.10 2004/03/05 22:02:18 vincent Exp $	*/
d14 1
a14 1
static char	cwd[NFILEN];
d17 1
a17 1
 * Initialize anything the directory management routines need
d30 1
a30 1
 * Change current working directory
d39 1
a39 1
		return ABORT;
d41 1
a41 1
		(void)strlcpy(bufc, wdir, sizeof bufc);
d54 1
a54 1
 * Show current directory
a59 1

@


1.10
log
@don't panic if we can't getcwd() initially, just chdir("/")

spotted by and ok henning
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.c,v 1.9 2002/07/01 14:33:44 vincent Exp $	*/
d36 1
a36 2
	int	s;
	char	bufc[NPAT];
d38 2
a39 2
	if ((s = ereply("Change default directory: ", bufc, NPAT)) != TRUE)
		return (s);
@


1.9
log
@KNF + ansi; from zyrnix (only the easy part of his diffs)
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.c,v 1.8 2002/03/11 13:02:56 vincent Exp $	*/
d22 5
a26 2
	if ((wdir = getcwd(cwd, sizeof(cwd))) == NULL)
		panic("Can't get current directory!");
@


1.8
log
@  * Move to ANSI function definitions.
  * Add a whole lot of consts where I thought it made sense

   no ok, but no objections either...
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.c,v 1.7 2002/02/13 03:03:49 vincent Exp $	*/
d22 1
a22 1
	if (!(wdir = getcwd(cwd, sizeof(cwd))))
d39 1
a39 1
		(void) strlcpy(bufc, wdir, sizeof bufc);
d44 1
a44 1
		if (!(wdir = getcwd(cwd, sizeof(cwd))))
@


1.7
log
@ * Replace unsafe strcpy and strcat calls to safe strlcpy and strlcat.
 * Be a little bit more verbose about some errors
 * Fix some memory leaks in fileio.c

ok deraadt@@, art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.c,v 1.6 2001/05/24 03:05:21 mickey Exp $	*/
d20 1
a20 1
dirinit()
a21 1

d31 1
a31 2
changedir(f, n)
	int	f, n;
d56 1
a56 1
showcwdir(f, n)
@


1.6
log
@spaces
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.c,v 1.5 2001/05/23 22:20:35 art Exp $	*/
d41 1
a41 1
		(void) strcpy(bufc, wdir);
@


1.5
log
@remove VOID. We're way beyond the point where this could build with an
ancient compiler.
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.c,v 1.4 2001/01/29 01:58:06 niklas Exp $	*/
d13 2
a14 2
char           *wdir;
static char     cwd[NFILEN];
d33 1
a33 1
	int    f, n;
d35 2
a36 2
	int    s;
	char   bufc[NPAT];
@


1.4
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d19 1
a19 1
VOID
d41 1
a41 1
		(VOID) strcpy(bufc, wdir);
@


1.3
log
@The start of KNF + -Wall.  The code has been run through indent but
needs hand fixup.  I stopped at keymap.c...
@
text
@d1 2
@


1.2
log
@change WINDOW -> MGWIN to avoid curses type conflict
convert to terminfo in tty*.c
add support for some keypad function keys (arrows, pgup, pgdown)
@
text
@d11 2
a12 2
char	*wdir;
static char cwd[NFILEN];
d17 1
d20 1
d28 2
a29 1
/*ARGSUSED*/
d31 1
d33 2
a34 2
	register int s;
	char bufc[NPAT];
d36 2
a37 2
	if ((s=ereply("Change default directory: ", bufc, NPAT)) != TRUE)
		return(s);
d42 1
a42 1
		return(FALSE);
d47 1
a47 1
		return(TRUE);
d54 2
a55 1
/*ARGSUSED*/
d58 1
d60 1
a60 1
	return(TRUE);
@


1.1
log
@initial import of mg2a
@
text
@a10 3
#ifndef	getwd			/* may be a #define */
char	*getwd();
#endif
d19 1
a19 1
	if (!(wdir = getwd(cwd)))
d40 1
a40 1
		if (!(wdir = getwd(cwd)))
@

