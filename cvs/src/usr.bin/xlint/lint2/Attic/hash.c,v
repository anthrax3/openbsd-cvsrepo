head	1.7;
access;
symbols
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	OPENBSD_5_0:1.5.0.24
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.22
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.20
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.16
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.18
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.14
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.12
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.10
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.8
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.6
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.4
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.2
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.4.0.16
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.14
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.12
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.10
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.8
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.6
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.3.0.14
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.12
	OPENBSD_2_8:1.3.0.10
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.8
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.6
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.4
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.2
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2012.04.08.16.27.00;	author jsg;	state dead;
branches;
next	1.6;

1.6
date	2011.09.21.18.08.07;	author jsg;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.20.17.09.55;	author cloder;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.16.21.27.59;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	98.07.29.03.14.52;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.44.23;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.47.03;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.47.03;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.7
log
@tedu lint
ok tedu@@ guenther@@ krw@@ espie@@ deraadt@@
@
text
@/*	$OpenBSD: hash.c,v 1.6 2011/09/21 18:08:07 jsg Exp $	*/
/*	$NetBSD: hash.c,v 1.2 1995/07/03 21:24:47 cgd Exp $	*/

/*
 * Copyright (c) 1994, 1995 Jochen Pohl
 * All Rights Reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Jochen Pohl for
 *	The NetBSD Project.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <stddef.h>
#include <string.h>
#include <limits.h>

#include "lint2.h"

/* pointer to hash table, initialized in inithash() */
static	hte_t	**htab;

static	int	hash(const char *);

/*
 * Initialize hash table.
 */
void
inithash(void)
{
	htab = xcalloc(HSHSIZ2, sizeof (hte_t *));
}

/*
 * Compute hash value from a string.
 */
static int
hash(const char *s)
{
	u_int	v;
	const	u_char *us;

	v = 0;
	for (us = (const u_char *)s; *us != '\0'; us++) {
		v = (v << sizeof (v)) + *us;
		v ^= v >> (sizeof (v) * CHAR_BIT - sizeof (v));
	}
	return (v % HSHSIZ2);
}

/*
 * Look for a hash table entry. If no hash table entry for the
 * given name exists and mknew is set, create a new one.
 */
hte_t *
hsearch(const char *s, int mknew)
{
	int	h;
	hte_t	*hte;

	h = hash(s);
	for (hte = htab[h]; hte != NULL; hte = hte->h_link) {
		if (strcmp(hte->h_name, s) == 0)
			break;
	}

	if (hte != NULL || !mknew)
		return (hte);

	/* create a new hte */
	hte = xalloc(sizeof (hte_t));
	memset(hte, 0, sizeof (hte_t));
	hte->h_name = xstrdup(s);
	hte->h_lsym = &hte->h_syms;
	hte->h_lcall = &hte->h_calls;
	hte->h_lusym = &hte->h_usyms;
	hte->h_link = htab[h];
	htab[h] = hte;

	return (hte);
}

/*
 * Call function f for each name in the hash table.
 */
void
forall(void (*f)(hte_t *))
{
	int	i;
	hte_t	*hte;

	for (i = 0; i < HSHSIZ2; i++) {
		for (hte = htab[i]; hte != NULL; hte = hte->h_link)
			(*f)(hte);
	}
}
@


1.6
log
@remove rcsids which escaped the purge of 2009
@
text
@d1 1
a1 1
/*	$OpenBSD: hash.c,v 1.5 2005/11/20 17:09:55 cloder Exp $	*/
@


1.5
log
@KNF. OK kjell, millert
@
text
@d1 1
a1 1
/*	$OpenBSD: hash.c,v 1.4 2002/02/16 21:27:59 millert Exp $	*/
a33 4

#ifndef lint
static char rcsid[] = "$OpenBSD: hash.c,v 1.4 2002/02/16 21:27:59 millert Exp $";
#endif
@


1.4
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: hash.c,v 1.3 1998/07/29 03:14:52 millert Exp $	*/
d36 1
a36 1
static char rcsid[] = "$OpenBSD: hash.c,v 1.3 1998/07/29 03:14:52 millert Exp $";
d54 1
a54 1
inithash()
d63 1
a63 2
hash(s)
	const	char *s;
d81 1
a81 3
hsearch(s, mknew)
	const	char *s;
	int	mknew;
d112 1
a112 2
forall(f)
	void	(*f)(hte_t *);
@


1.3
log
@fix some initialization; ITOH Yasufumi <yasufu-i@@is.aist-nara.ac.jp>
@
text
@d1 1
a1 1
/*	$OpenBSD: hash.c,v 1.2 1996/06/26 05:44:23 deraadt Exp $	*/
d36 1
a36 1
static char rcsid[] = "$OpenBSD: hash.c,v 1.2 1996/06/26 05:44:23 deraadt Exp $";
d48 1
a48 1
static	int	hash __P((const char *));
d116 1
a116 1
	void	(*f) __P((hte_t *));
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: hash.c,v 1.2 1995/07/03 21:24:47 cgd Exp $	*/
d36 1
a36 1
static char rcsid[] = "$OpenBSD: hash.c,v 1.2 1995/07/03 21:24:47 cgd Exp $";
d100 1
@


1.1
log
@Initial revision
@
text
@d1 1
d36 1
a36 1
static char rcsid[] = "$NetBSD: hash.c,v 1.2 1995/07/03 21:24:47 cgd Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
