head	1.3;
access;
symbols
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.18
	OPENBSD_5_0:1.2.0.16
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.14
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.12
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.8
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.10
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.6
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.4
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.2
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.1.0.6
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.4
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.2
	OPENBSD_4_0_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2012.04.08.16.26.59;	author jsg;	state dead;
branches;
next	1.2;

1.2
date	2007.09.24.19.56.34;	author jmc;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.26.16.33.38;	author cloder;	state Exp;
branches;
next	;


desc
@@


1.3
log
@tedu lint
ok tedu@@ guenther@@ krw@@ espie@@ deraadt@@
@
text
@lint is divided into 3 separate programs: lint, lint1, and
lint2 (the latter two programs reside in /usr/libexec).

lint calls /usr/libexec/cpp to preprocess the program, then passes
the output to lint1, which does most of the work. lint1 then outputs
a .ln file, which is parsed by lint2 to do more holistic checks. all
of this is driven by /usr/bin/lint, which is like a wrapper program.

lint1 implements its own C parser.  it is incapable of parsing some
weird gcc things, such as __attribute__ and so on. OpenBSD's source
tree already does a good job of removing gcc'isms when parsers other
than gcc are detected.

lint1 keeps a symbol table for the current context, which always
includes global symbols for the current translation unit, as well as
locals (inside a function definition). When it parses a function
definition, it pushes a symbol table context onto the stack, and
then pops it off when the function definition ends.

lint1 does the vast majority of its checks one expression at a time.
It uses the symbol table (which contains types of symbols) and almost
nothing else when doing type conversions. All of the checks happen at
parse time. lint1 does not really build an abstract syntax tree (AST)
to represent the entire program; it only keeps track of the symbols
in the current context, and some minimal information about the types
of enclosing control blocks (loops, switch statements, etc). When lint1
is finished parsing an expression, you will not see any more warnings
regarding that expression.

$OpenBSD: README,v 1.2 2007/09/24 19:56:34 jmc Exp $
@


1.2
log
@typos; from Pierre Riteau
@
text
@d30 1
a30 1
$OpenBSD: README,v 1.1 2006/04/26 16:33:38 cloder Exp $
@


1.1
log
@Something very small and lame for now
@
text
@d18 1
a18 1
then pops it off when it when the function definition ends.
d30 1
a30 1
$OpenBSD$
@

