head	1.11;
access;
symbols
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.22
	OPENBSD_5_0:1.10.0.20
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.18
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.16
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.12
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.14
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.10
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.8
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.6
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.4
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.2
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.9.0.4
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.2
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.4.0.8
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.6
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.4
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.2
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.3.0.10
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.8
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.6
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.4
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.20
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.11
date	2012.04.08.16.26.59;	author jsg;	state dead;
branches;
next	1.10;

1.10
date	2006.11.03.16.27.52;	author otto;	state Exp;
branches;
next	1.9;

1.9
date	2005.12.11.20.03.03;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2005.12.10.17.41.03;	author cloder;	state Exp;
branches;
next	1.7;

1.7
date	2005.12.07.01.55.12;	author cloder;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.29.19.57.28;	author cloder;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.29.19.50.33;	author cloder;	state Exp;
branches;
next	1.4;

1.4
date	2004.01.05.02.55.28;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2001.09.11.00.06.28;	author jason;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.44.07;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.47.01;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.47.01;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.11
log
@tedu lint
ok tedu@@ guenther@@ krw@@ espie@@ deraadt@@
@
text
@#	$OpenBSD: Makefile,v 1.10 2006/11/03 16:27:52 otto Exp $
#	$NetBSD: Makefile,v 1.3 1995/07/04 01:53:05 cgd Exp $

PROG=	lint1
SRCS=	cgram.y scan.l mem1.c mem.c err.c main1.c decl.c tree.c func.c \
	init.c emit.c emit1.c
NOMAN=
LDADD+=	-ll
DPADD+=	${LIBL}
YFLAGS=	-d
CFLAGS+=-I. -I${.CURDIR}
LINTFLAGS=-aehpz

BINDIR=	/usr/libexec

.include <bsd.prog.mk>
@


1.10
log
@ouT makefile rules are smarter now, kill a redundant CLEANFILES
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.9 2005/12/11 20:03:03 deraadt Exp $
@


1.9
log
@SRCS should contain .y and .l references, then make will do the right thing
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.8 2005/12/10 17:41:03 cloder Exp $
a12 1
CLEANFILES+=y.tab.h cgram.c scan.c
@


1.8
log
@Back out all gcc attribute parsing changes until we can do this the right
way some day.  The effect of __attribute__ on a LALR C grammar is just too
ugly to fix quicklly.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.7 2005/12/07 01:55:12 cloder Exp $
d5 1
a5 1
SRCS=	cgram.c scan.c mem1.c mem.c err.c main1.c decl.c tree.c func.c \
@


1.7
log
@Refactor __attribute__ parsing a bit.  This takes us further to being able
to not only consume, but also make sense of gcc __attribute__ syntax.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.6 2005/11/29 19:57:28 cloder Exp $
d6 1
a6 1
	init.c emit.c emit1.c attr.c
@


1.6
log
@Remove old gcc 2.9.5 workaround for sparc64 now that we use gcc3.
Tested sturm@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.5 2005/11/29 19:50:33 cloder Exp $
d6 1
a6 1
	init.c emit.c emit1.c
@


1.5
log
@Remove XXX_BROKEN_GCC ifdefs, which were used to work around an ancient
(from 1995) gcc bug on i386.  From NetBSD.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.4 2004/01/05 02:55:28 espie Exp $
a15 4

.if (${MACHINE_ARCH} == "sparc64")
CFLAGS+= -O0
.endif
@


1.4
log
@include path fixes for gcc3.
tests otto@@, okay millert@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.3 2001/09/11 00:06:28 jason Exp $
a16 2
 XXX: -O causes the gcc to die on the i386, when compiling tree.o
CFLAGS+= -DXXX_BROKEN_GCC
@


1.3
log
@gcc on sparc64 needs -O0 or it barfs
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.2 1996/06/26 05:44:07 deraadt Exp $
d11 1
a11 1
CFLAGS+=-I.
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.3 1995/07/04 01:53:05 cgd Exp $
d17 1
a17 1
# XXX: -O causes the gcc to die on the i386, when compiling tree.o
d19 3
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
