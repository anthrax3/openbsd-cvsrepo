head	1.8;
access;
symbols
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.8
	OPENBSD_5_0:1.7.0.6
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.4
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.2
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.6.0.14
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.16
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.12
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.10
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.8
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.6
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.4
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.3.0.2
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.2.0.38
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.36
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.34
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.32
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.30
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.28
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.26
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.24
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.22
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.20
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2012.04.08.16.27.00;	author jsg;	state dead;
branches;
next	1.7;

1.7
date	2010.07.24.22.17.03;	author guenther;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.29.20.47.22;	author cloder;	state Exp;
branches;
next	1.5;

1.5
date	2006.04.25.01.25.41;	author cloder;	state Exp;
branches;
next	1.4;

1.4
date	2006.03.08.07.18.51;	author moritz;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.10.18.51.54;	author martin;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.44.14;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.47.02;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.47.02;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.8
log
@tedu lint
ok tedu@@ guenther@@ krw@@ espie@@ deraadt@@
@
text
@/*	$OpenBSD: lint.h,v 1.7 2010/07/24 22:17:03 guenther Exp $	*/
/*	$NetBSD: lint.h,v 1.2 1995/07/03 21:24:18 cgd Exp $	*/

/*
 * Copyright (c) 1994, 1995 Jochen Pohl
 * All Rights Reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Jochen Pohl for
 *	The NetBSD Project.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <stdio.h>
#include <stddef.h>

#include "param.h"

/*
 * Type specifiers, used in type structures (type_t) and elsewhere.
 */
typedef enum {
	NOTSPEC,
	SIGNED,		/* keyword "signed", only used in the parser */
	UNSIGN,		/* keyword "unsigned", only used in the parser */
	BOOL,		/* _Bool */
	CHAR,		/* char */
	SCHAR,		/* signed char */
	UCHAR,		/* unsigned char */
	SHORT,		/* (signed) short */
	USHORT,		/* unsigned short */
	INT,		/* (signed) int */
	UINT,		/* unsigned int */
	LONG,		/* (signed) long */
	ULONG,		/* unsigned long */
	QUAD,		/* (signed) long long */
	UQUAD,		/* unsigned long long */
	FLOAT,		/* float */
	DOUBLE,		/* double */
	LDOUBLE,	/* long double */
	COMPLEX,	/* float _Complex */
	DCOMPLEX,	/* double _Complex */
	LDCOMPLEX,	/* long double _Complex */
	IMAGINARY,	/* float _Imaginary */
	DIMAGINARY,	/* double _Imaginary */
	LDIMAGINARY,	/* long double _Imaginary */
	VOID,		/* void */
	STRUCT,		/* structure tag */
	UNION,		/* union tag */
	ENUM,		/* enum tag */
	PTR,		/* pointer */
	ARRAY,		/* array */
	FUNC		/* function */
#define	NTSPEC		((int)FUNC + 1)
} tspec_t;

/*
 * size of types, name and classification
 */
typedef	struct {
	int	tt_sz;			/* size in bits */
	int	tt_psz;			/* size, different from tt_sz
					   if pflag is set */
	int	tt_rank;		/* rank (C99), similar to tt_psz */
	tspec_t	tt_styp;		/* signed counterpart */
	tspec_t	tt_utyp;		/* unsigned counterpart */
	u_int	tt_isityp : 1;		/* 1 if integer type */
	u_int	tt_isutyp : 1;		/* 1 if unsigned integer type */
	u_int	tt_isftyp : 1;		/* 1 if floating point type */
	u_int	tt_isatyp : 1;		/* 1 if arithmetic type */
	u_int	tt_domain : 2;		/* 0 if non-scalar, 1 if real,
					   2 if imaginary, 3 if complex */
	char	*tt_name;		/* type name */
} ttab_t;

#define size(t)		(ttab[t].tt_sz)
#define psize(t)	(ttab[t].tt_psz)
#define rank(t)		(ttab[t].tt_rank)
#define styp(t)		(ttab[t].tt_styp)
#define utyp(t)		(ttab[t].tt_utyp)
#define isityp(t)	(ttab[t].tt_isityp)
#define isutyp(t)	(ttab[t].tt_isutyp)
#define isftyp(t)	(ttab[t].tt_isftyp)
#define isatyp(t)	(ttab[t].tt_isatyp)
#define issclt(t)	(ttab[t].tt_domain != 0)
#define iscomplex(t)	(ttab[t].tt_domain == 3)
#define isimag(t)	(ttab[t].tt_domain == 2)

extern	ttab_t	ttab[];


typedef	enum {
	NODECL,			/* until now not declared */
	DECL,			/* declared */
	TDEF,			/* tentative defined */
	DEF			/* defined */
} def_t;

/*
 * Following structure contains some data used for the output buffer.
 */
typedef	struct	ob {
	char	*o_buf;		/* buffer */
	char	*o_end;		/* first byte after buffer */
	size_t	o_len;		/* length of buffer */
	char	*o_nxt;		/* next free byte in buffer */
} ob_t;

#include "externs.h"
@


1.7
log
@Teach lint about C99's _Bool and _Complex, plus some related gcc
extensions: __real__ and __imag__ operators, the use of '~' for
complex conjugation, and 'i' or 'j' as a suffix for complex constants.
While this doesn't handle folding and overflow detection for complex
constants correctly, it's good enough to make it through libm...and
found several bugs once it could do so.

"no objections" miod@@, krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lint.h,v 1.6 2006/05/29 20:47:22 cloder Exp $	*/
@


1.6
log
@Get rid of -t (traditional C) option. Some corrections by moritz.
@
text
@d1 1
a1 1
/*	$OpenBSD: lint.h,v 1.5 2006/04/25 01:25:41 cloder Exp $	*/
d48 1
d63 6
d93 2
a94 1
	u_int	tt_issclt : 1;		/* 1 if scalar type */
d107 3
a109 1
#define issclt(t)	(ttab[t].tt_issclt)
@


1.5
log
@Rather than use the psize() macro everywhere (portable size macro which
only makes sense when -p option is specified to lint), add a new concept
and macro called rank(), which corresponds to the C99 definition of rank
for integral types. This has one main benefit, which is that on ILP32
platforms, if -p was not specified, lint did not warn when the code
converted from long to int, because they are the same size. This is
fixed.

While here, get rid of a false positive with warning 259, when converting
from an unsigned char to an int, for example.
@
text
@d1 1
a1 1
/*	$OpenBSD: lint.h,v 1.4 2006/03/08 07:18:51 moritz Exp $	*/
d60 1
a60 1
	DOUBLE,		/* double or, with tflag, long float */
@


1.4
log
@some cleanup including:

o typos in comments
o missing #include
o remove pointless nomem() func
o unused variables
o more use of asprintf(3)

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lint.h,v 1.3 2005/12/10 18:51:54 martin Exp $	*/
d79 1
d92 1
@


1.3
log
@translate a bunch of comments from german to english

ok cloder@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lint.h,v 1.2 1996/06/26 05:44:14 deraadt Exp $	*/
d42 1
a42 1
 * Type specifiers, used in type structures (type_t) and otherwere.
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: lint.h,v 1.2 1995/07/03 21:24:18 cgd Exp $	*/
d86 1
a86 1
	char	*tt_name;		/* Bezeichnung des Typs */
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
