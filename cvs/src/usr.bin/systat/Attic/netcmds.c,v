head	1.21;
access;
symbols
	OPENBSD_4_3:1.19.0.2
	OPENBSD_4_3_BASE:1.19
	OPENBSD_4_2:1.18.0.2
	OPENBSD_4_2_BASE:1.18
	OPENBSD_4_1:1.16.0.4
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.16.0.2
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.15.0.6
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.15.0.4
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.15.0.2
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.13.0.2
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.12.0.4
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.12.0.2
	OPENBSD_3_4_BASE:1.12
	OPENBSD_3_3:1.11.0.4
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.2
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.5.0.8
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.6
	OPENBSD_2_8:1.5.0.4
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.4.0.10
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.8
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.6
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.21
date	2008.06.13.22.02.04;	author canacar;	state dead;
branches;
next	1.20;

1.20
date	2008.06.12.22.26.01;	author canacar;	state Exp;
branches;
next	1.19;

1.19
date	2007.09.11.15.47.17;	author gilles;	state Exp;
branches;
next	1.18;

1.18
date	2007.08.09.02.38.09;	author ray;	state Exp;
branches;
next	1.17;

1.17
date	2007.03.20.03.56.13;	author tedu;	state Exp;
branches;
next	1.16;

1.16
date	2006.03.31.04.10.59;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2005.03.13.19.00.45;	author cloder;	state Exp;
branches;
next	1.14;

1.14
date	2004.09.29.21.59.28;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2004.04.26.19.22.30;	author itojun;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.03.02.56.17;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2002.06.18.00.46.47;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2002.02.16.21.27.54;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2001.12.07.09.18.08;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2001.12.07.07.57.35;	author pvalchev;	state Exp;
branches;
next	1.7;

1.7
date	2001.11.23.22.20.06;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2001.11.19.19.02.16;	author mpech;	state Exp;
branches;
next	1.5;

1.5
date	2000.01.05.11.04.22;	author itojun;	state Exp;
branches;
next	1.4;

1.4
date	97.06.23.22.21.47;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.01.17.07.13.25;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.40.09;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.46.10;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.46.10;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Remove unused files. Noticed by sthen@@
@
text
@@


1.20
log
@New display engine for systat, based on pftop. Adds new views for pf
(status, state, rule, queue). While all displays work, some keyboard
comands are not implemented yet. Other features include better handling
of display resize and scrolling for long views. Committing now to fix
the remaining issues in the tree.
Testing and comments by otto@@ and harding@@, ok deraadt@@
@
text
@@


1.19
log
@use strcspn to properly overwrite '\n' in fgets returned buffer

ok pyr@@, ray@@, millert@@, moritz@@, chl@@
@
text
@a0 360
/*	$OpenBSD: netcmds.c,v 1.18 2007/08/09 02:38:09 ray Exp $	*/
/*	$NetBSD: netcmds.c,v 1.4 1995/05/21 17:14:38 mycroft Exp $	*/

/*-
 * Copyright (c) 1980, 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)netcmds.c	8.1 (Berkeley) 6/6/93";
#endif
static char rcsid[] = "$OpenBSD: netcmds.c,v 1.18 2007/08/09 02:38:09 ray Exp $";
#endif /* not lint */

/*
 * Common network command support routines.
 */
#include <sys/param.h>
#include <sys/socket.h>
#include <sys/socketvar.h>
#include <sys/mbuf.h>
#include <sys/protosw.h>

#include <net/route.h>
#include <netinet/in.h>
#include <netinet/in_systm.h>
#include <netinet/ip.h>
#include <netinet/in_pcb.h>

#include <arpa/inet.h>

#include <errno.h>
#include <netdb.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include "systat.h"
#include "extern.h"

#define	streq(a,b)	(strcmp(a,b)==0)

static	struct hitem {
	struct sockaddr_storage addr;
	int	onoff;
} *hosts;

size_t nports, nhosts;
int protos;

static void changeitems(char *, int);
static int selectproto(char *);
static void showprotos(void);
static int selectport(long, int);
static void showports(void);
static int addrcmp(struct sockaddr *, struct sockaddr *);
static int selecthost(struct sockaddr *, int);
static void showhosts(void);

int
netcmd(char *cmd, char *args)
{

	if (prefix(cmd, "tcp") || prefix(cmd, "udp")) {
		selectproto(cmd);
		return (1);
	}
	if (prefix(cmd, "ignore") || prefix(cmd, "display")) {
		changeitems(args, prefix(cmd, "display"));
		return (1);
	}
	if (prefix(cmd, "reset")) {
		selectproto(0);
		selecthost(0, 0);
		selectport(htons(-1), 0);
		return (1);
	}
	if (prefix(cmd, "show")) {
		move(CMDLINE, 0);
		clrtoeol();
		if (*args == '\0') {
			showprotos();
			showhosts();
			showports();
			return (1);
		}
		if (prefix(args, "protos"))
			showprotos();
		else if (prefix(args, "hosts"))
			showhosts();
		else if (prefix(args, "ports"))
			showports();
		else
			addstr("show what?");
		return (1);
	}
	return (0);
}


static void
changeitems(char *args, int onoff)
{
	char *cp;
	struct servent *sp;
	struct addrinfo hints, *res0, *res;

	args[strcspn(args, "\n")] = '\0';

	for (;;args = cp) {
		for (cp = args; isspace(*cp); cp++)
			;
		args = cp;
		for (; *cp && !isspace(*cp); cp++)
			;
		if (*cp)
			*cp++ = '\0';
		if (cp - args == 0)
			break;
		sp = getservbyname(args,
		    protos == TCP ? "tcp" : protos == UDP ? "udp" : 0);
		if (sp) {
			selectport(sp->s_port, onoff);
			continue;
		}

		memset(&hints, 0, sizeof(hints));
		hints.ai_family = PF_UNSPEC;
		hints.ai_socktype = SOCK_DGRAM;
		if (getaddrinfo(args, "0", &hints, &res0) != 0) {
			error("%s: unknown host or port", args);
			continue;
		}
		for (res = res0; res; res = res->ai_next)
			selecthost(res->ai_addr, onoff);
		freeaddrinfo(res0);
	}
}

static int
selectproto(char *proto)
{
	int new = protos;

	if (proto == 0 || streq(proto, "all"))
		new = TCP|UDP;
	else if (streq(proto, "tcp"))
		new = TCP;
	else if (streq(proto, "udp"))
		new = UDP;
	return (protos = new);
}

static void
showprotos(void)
{

	if ((protos&TCP) == 0)
		addch('!');
	addstr("tcp ");
	if ((protos&UDP) == 0)
		addch('!');
	addstr("udp ");
}

static	struct pitem {
	long	port;
	int	onoff;
} *ports;

static int
selectport(long port, int onoff)
{
	struct pitem *p;

	if (ntohs(port) == -1) {
		if (ports == 0)
			return (0);
		free(ports);
		ports = NULL;
		nports = 0;
		return (1);
	}
	for (p = ports; p < ports+nports; p++)
		if (p->port == port) {
			p->onoff = onoff;
			return (0);
		}
	if (nports + 1 > SIZE_MAX / sizeof(*p) ||
	    (p = realloc(ports, (nports + 1) * sizeof(*p))) == NULL) {
		error("selectport: %s", strerror(ENOMEM));
		die();
	}
	ports = p;

	p = &ports[nports++];
	p->port = port;
	p->onoff = onoff;
	return (1);
}

int
checkport(struct inpcb *inp)
{
	struct pitem *p;

	if (ports)
	for (p = ports; p < ports+nports; p++)
		if (p->port == inp->inp_lport || p->port == inp->inp_fport)
			return (p->onoff);
	return (1);
}

static void
showports(void)
{
	struct pitem *p;
	struct servent *sp;

	for (p = ports; p < ports+nports; p++) {
		sp = getservbyport(p->port,
		    protos == (TCP|UDP) ? 0 : protos == TCP ? "tcp" : "udp");
		if (!p->onoff)
			addch('!');
		if (sp)
			printw("%s ", sp->s_name);
		else
			printw("%d ", ntohs(p->port));
	}
}

static int
addrcmp(struct sockaddr *sa1, struct sockaddr *sa2)
{
	if (sa1->sa_family != sa2->sa_family)
		return 0;
	if (sa1->sa_len != sa2->sa_len)
		return 0;
	switch (sa1->sa_family) {
	case AF_INET:
		if (((struct sockaddr_in *)sa1)->sin_addr.s_addr ==
		    ((struct sockaddr_in *)sa2)->sin_addr.s_addr)
			return 1;
		break;
	case AF_INET6:
		if (IN6_ARE_ADDR_EQUAL(&((struct sockaddr_in6 *)sa1)->sin6_addr,
		    &((struct sockaddr_in6 *)sa2)->sin6_addr))
			return 1;
		break;
	default:
		if (memcmp(sa1, sa2, sa1->sa_len) == 0)
			return 1;
		break;
	}
	return 0;
}

static int
selecthost(struct sockaddr *sa, int onoff)
{
	struct hitem *p;

	if (sa == 0) {
		if (hosts == 0)
			return (0);
		free(hosts);
		hosts = NULL;
		nhosts = 0;
		return (1);
	}
	for (p = hosts; p < hosts+nhosts; p++)
		if (addrcmp((struct sockaddr *)&p->addr, sa)) {
			p->onoff = onoff;
			return (0);
		}
	if (sa->sa_len > sizeof(struct sockaddr_storage))
		return (-1);	/*XXX*/
	if (nhosts + 1 > SIZE_MAX / sizeof(*p) ||
	    (p = realloc(hosts, (nhosts + 1) * sizeof(*p))) == NULL) {
		error("selecthost: %s", strerror(ENOMEM));
		die();
	}
	hosts = p;

	p = &hosts[nhosts++];
	memcpy(&p->addr, sa, sa->sa_len);
	p->onoff = onoff;
	return (1);
}

int
checkhost(struct inpcb *inp)
{
	struct hitem *p;

	if (hosts)
	for (p = hosts; p < hosts+nhosts; p++) {
		if (((struct sockaddr *)&p->addr)->sa_family == AF_INET &&
		    !(inp->inp_flags & INP_IPV6)) {
			struct sockaddr_in *sin;
			sin = (struct sockaddr_in *)&p->addr;
			if (sin->sin_addr.s_addr == inp->inp_laddr.s_addr ||
			    sin->sin_addr.s_addr == inp->inp_faddr.s_addr)
				return (p->onoff);
		}
		if (((struct sockaddr *)&p->addr)->sa_family == AF_INET6 &&
		    (inp->inp_flags & INP_IPV6)) {
			struct sockaddr_in6 *sin6;
			sin6 = (struct sockaddr_in6 *)&p->addr;
			if (IN6_ARE_ADDR_EQUAL(&sin6->sin6_addr, &inp->inp_laddr6) ||
			    IN6_ARE_ADDR_EQUAL(&sin6->sin6_addr, &inp->inp_faddr6))
				return (p->onoff);
		}
	}
	return (1);
}

static void
showhosts(void)
{
	struct hitem *p;
	char hbuf[NI_MAXHOST];
	struct sockaddr *sa;
	int flags;

	flags = nflag ? NI_NUMERICHOST : 0;
	for (p = hosts; p < hosts+nhosts; p++) {
		sa = (struct sockaddr *)&p->addr;
		if (getnameinfo(sa, sa->sa_len, hbuf, sizeof(hbuf), NULL, 0,
		    flags) != 0)
			strlcpy(hbuf, "(invalid)", sizeof hbuf);
		if (!p->onoff)
			addch('!');
		printw("%s ", hbuf);
	}
}
@


1.18
log
@Let realloc handle NULL.  Check for integer overflow and realloc
failure.  Avoid passing negative integers to realloc by changing
variables to size_t.

Initial diff from Charles Longeau.

OK millert.
@
text
@d1 1
a1 1
/*	$OpenBSD: netcmds.c,v 1.17 2007/03/20 03:56:13 tedu Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: netcmds.c,v 1.17 2007/03/20 03:56:13 tedu Exp $";
d132 2
a133 3
	cp = strchr(args, '\n');
	if (cp)
		*cp = '\0';
@


1.17
log
@remove some bogus *p tests from charles longeau
ok deraadt millert
@
text
@d1 1
a1 1
/*	$OpenBSD: netcmds.c,v 1.16 2006/03/31 04:10:59 deraadt Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: netcmds.c,v 1.16 2006/03/31 04:10:59 deraadt Exp $";
d57 1
d72 2
a73 1
int nports, nhosts, protos;
d214 7
a220 4
	if (nports == 0)
		ports = (struct pitem *)malloc(sizeof (*p));
	else
		ports = (struct pitem *)realloc(ports, (nports+1)*sizeof (*p));
d303 7
a309 4
	if (nhosts == 0)
		hosts = (struct hitem *)malloc(sizeof (*p));
	else
		hosts = (struct hitem *)realloc(hosts, (nhosts+1)*sizeof (*p));
@


1.16
log
@fairly simple cleanup, lots of testing done
@
text
@d1 1
a1 1
/*	$OpenBSD: netcmds.c,v 1.15 2005/03/13 19:00:45 cloder Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: netcmds.c,v 1.15 2005/03/13 19:00:45 cloder Exp $";
d134 1
a134 1
		for (cp = args; *cp && isspace(*cp); cp++)
@


1.15
log
@Use correct byte order when printing out port numbers.
OK jaredy@@, tdeval@@, hshoexer@@
@
text
@d1 1
a1 1
/*	$OpenBSD: netcmds.c,v 1.14 2004/09/29 21:59:28 deraadt Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: netcmds.c,v 1.14 2004/09/29 21:59:28 deraadt Exp $";
d101 2
a102 1
		move(CMDLINE, 0); clrtoeol();
d202 2
a203 1
		free((char *)ports), ports = 0;
d262 1
a262 1
				((struct sockaddr_in *)sa2)->sin_addr.s_addr)
d267 1
a267 1
				&((struct sockaddr_in6 *)sa2)->sin6_addr))
d286 2
a287 1
		free((char *)hosts), hosts = 0;
d347 1
a347 1
				flags) != 0)
@


1.14
log
@always compile in INET6 support
@
text
@d1 1
a1 1
/*	$OpenBSD: netcmds.c,v 1.13 2004/04/26 19:22:30 itojun Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: netcmds.c,v 1.13 2004/04/26 19:22:30 itojun Exp $";
d97 1
a97 1
		selectport(-1, 0);
d198 1
a198 1
	if (port == -1) {
d246 1
a246 1
			printw("%d ", p->port);
@


1.13
log
@add -n flag (do not reverse-lookup).  pb and deraadt ok
@
text
@d1 1
a1 1
/*	$OpenBSD: netcmds.c,v 1.12 2003/06/03 02:56:17 millert Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: netcmds.c,v 1.12 2003/06/03 02:56:17 millert Exp $";
a262 1
#ifdef INET6
a267 1
#endif
a319 1
#ifdef INET6
a327 1
#endif
@


1.12
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: netcmds.c,v 1.11 2002/06/18 00:46:47 deraadt Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: netcmds.c,v 1.11 2002/06/18 00:46:47 deraadt Exp $";
a343 1
#if 0
a344 3
#else
	flags = 0;
#endif
@


1.11
log
@ANSI
@
text
@d1 1
a1 1
/*	$OpenBSD: netcmds.c,v 1.10 2002/02/16 21:27:54 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static char rcsid[] = "$OpenBSD: netcmds.c,v 1.10 2002/02/16 21:27:54 millert Exp $";
@


1.10
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: netcmds.c,v 1.9 2001/12/07 09:18:08 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: netcmds.c,v 1.9 2001/12/07 09:18:08 deraadt Exp $";
d87 1
a87 2
netcmd(cmd, args)
	char *cmd, *args;
d127 1
a127 3
changeitems(args, onoff)
	char *args;
	int onoff;
d167 1
a167 2
selectproto(proto)
	char *proto;
d181 1
a181 1
showprotos()
d198 1
a198 3
selectport(port, onoff)
	long port;
	int onoff;
d225 1
a225 2
checkport(inp)
	struct inpcb *inp;
d237 1
a237 1
showports()
d255 1
a255 3
addrcmp(sa1, sa2)
	struct sockaddr *sa1;
	struct sockaddr *sa2;
d283 1
a283 3
selecthost(sa, onoff)
	struct sockaddr *sa;
	int onoff;
d312 1
a312 2
checkhost(inp)
	struct inpcb *inp;
d341 1
a341 1
showhosts()
@


1.9
log
@move back.  pvalchev -- the bug was quite obscure
@
text
@d1 1
a1 1
/*	$OpenBSD: netcmds.c,v 1.7 2001/11/23 22:20:06 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: netcmds.c,v 1.7 2001/11/23 22:20:06 deraadt Exp $";
d77 8
a84 8
static void changeitems __P((char *, int));
static int selectproto __P((char *));
static void showprotos __P((void));
static int selectport __P((long, int));
static void showports __P((void));
static int addrcmp __P((struct sockaddr *, struct sockaddr *));
static int selecthost __P((struct sockaddr *, int));
static void showhosts __P((void));
@


1.8
log
@back out latest changes which cause problems on alpha/sparc64 until
they are fixed
@
text
@d1 1
a1 1
/*	$OpenBSD: netcmds.c,v 1.6 2001/11/19 19:02:16 mpech Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: netcmds.c,v 1.6 2001/11/19 19:02:16 mpech Exp $";
d330 2
a331 2
		if (((struct sockaddr *)&p->addr)->sa_family == AF_INET
		 && !(inp->inp_flags & INP_IPV6)) {
d339 2
a340 2
		if (((struct sockaddr *)&p->addr)->sa_family == AF_INET6
		 && (inp->inp_flags & INP_IPV6)) {
d369 1
a369 1
			strcpy(hbuf, "(invalid)");
@


1.7
log
@fix signal races.  use sysctl() instead of kvm where possible, and then KNF
the hell out of it; checked by miod
@
text
@d330 2
a331 2
		if (((struct sockaddr *)&p->addr)->sa_family == AF_INET &&
		    !(inp->inp_flags & INP_IPV6)) {
d339 2
a340 2
		if (((struct sockaddr *)&p->addr)->sa_family == AF_INET6 &&
		    (inp->inp_flags & INP_IPV6)) {
d369 1
a369 1
			strlcpy(hbuf, "(invalid)", sizeof hbuf);
@


1.6
log
@kill more registers

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: netcmds.c,v 1.5 2000/01/05 11:04:22 itojun Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: netcmds.c,v 1.5 2000/01/05 11:04:22 itojun Exp $";
d330 2
a331 2
		if (((struct sockaddr *)&p->addr)->sa_family == AF_INET
		 && !(inp->inp_flags & INP_IPV6)) {
d339 2
a340 2
		if (((struct sockaddr *)&p->addr)->sa_family == AF_INET6
		 && (inp->inp_flags & INP_IPV6)) {
d369 1
a369 1
			strcpy(hbuf, "(invalid)");
@


1.5
log
@IPv6 support.  commands under "netstat" are all IPv6-aware.
const checks in netstat.c.
@
text
@d1 1
a1 1
/*	$OpenBSD: netcmds.c,v 1.4 1997/06/23 22:21:47 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: netcmds.c,v 1.4 1997/06/23 22:21:47 millert Exp $";
d132 1
a132 1
	register char *cp;
d206 1
a206 1
	register struct pitem *p;
d232 1
a232 1
	register struct inpcb *inp;
d234 1
a234 1
	register struct pitem *p;
d246 1
a246 1
	register struct pitem *p;
d296 1
a296 1
	register struct hitem *p;
d324 1
a324 1
	register struct inpcb *inp;
d326 1
a326 1
	register struct hitem *p;
d355 1
a355 1
	register struct hitem *p;
@


1.4
log
@Cleanup by Theo and myself.  CMDLINE changed to long to make
command line work on 64bit platforms.  This is somewhat bogus
and is really just a temporary workaround (there may be a curses bug).
@
text
@d1 1
a1 1
/*	$OpenBSD: netcmds.c,v 1.3 1997/01/17 07:13:25 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: netcmds.c,v 1.3 1997/01/17 07:13:25 millert Exp $";
d71 1
a71 1
	struct	in_addr addr;
d82 2
a83 1
static int selecthost __P((struct in_addr *, int));
d134 1
a134 2
	struct hostent *hp;
	struct in_addr in;
d155 7
a161 7
		if (inet_aton(args, &in) == 0) {
			hp = gethostbyname(args);
			if (hp == 0) {
				error("%s: unknown host or port", args);
				continue;
			}
			memcpy(&in, hp->h_addr, hp->h_length);
d163 3
a165 1
		selecthost(&in, onoff);
d262 32
a293 2
selecthost(in, onoff)
	struct in_addr *in;
d298 1
a298 1
	if (in == 0) {
d306 1
a306 1
		if (p->addr.s_addr == in->s_addr) {
d310 2
d317 1
a317 1
	p->addr = *in;
d329 20
a348 4
	for (p = hosts; p < hosts+nhosts; p++)
		if (p->addr.s_addr == inp->inp_laddr.s_addr ||
		    p->addr.s_addr == inp->inp_faddr.s_addr)
			return (p->onoff);
d356 3
a358 1
	struct hostent *hp;
d360 5
d366 4
a369 1
		hp = gethostbyaddr((char *)&p->addr, sizeof (p->addr), AF_INET);
d372 1
a372 1
		printw("%s ", hp ? hp->h_name : inet_ntoa(p->addr));
@


1.3
log
@r?index -> strr?chr
@
text
@d1 1
a1 1
/*	$OpenBSD: netcmds.c,v 1.2 1996/06/26 05:40:09 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: netcmds.c,v 1.2 1996/06/26 05:40:09 deraadt Exp $";
d179 1
a179 1
	return (new != protos, protos = new);
d249 1
a249 1
		    protos == TCP|UDP ? 0 : protos == TCP ? "tcp" : "udp");
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: netcmds.c,v 1.4 1995/05/21 17:14:38 mycroft Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: netcmds.c,v 1.4 1995/05/21 17:14:38 mycroft Exp $";
a134 1
	char *index();
d136 1
a136 1
	cp = index(args, '\n');
@


1.1
log
@Initial revision
@
text
@d1 1
d41 1
a41 1
static char rcsid[] = "$NetBSD: netcmds.c,v 1.4 1995/05/21 17:14:38 mycroft Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
