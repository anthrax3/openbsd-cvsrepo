head	1.17;
access;
symbols
	OPENBSD_4_3:1.16.0.4
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.16.0.2
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.13.0.4
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.2
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.12.0.12
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.10
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.8
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.12.0.6
	OPENBSD_3_6_BASE:1.12
	OPENBSD_3_5:1.12.0.4
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.12.0.2
	OPENBSD_3_4_BASE:1.12
	OPENBSD_3_3:1.11.0.4
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.2
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.16
	OPENBSD_2_8:1.5.0.14
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.12
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.10
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.8
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.6
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.4
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.4.0.4
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.17
date	2008.06.13.22.02.04;	author canacar;	state dead;
branches;
next	1.16;

1.16
date	2007.05.29.20.56.54;	author tedu;	state Exp;
branches;
next	1.15;

1.15
date	2007.04.24.06.32.08;	author tedu;	state Exp;
branches;
next	1.14;

1.14
date	2007.03.20.03.56.13;	author tedu;	state Exp;
branches;
next	1.13;

1.13
date	2006.03.31.04.10.59;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.03.02.56.17;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2002.06.18.00.46.47;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2001.12.07.09.18.08;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2001.12.07.07.57.35;	author pvalchev;	state Exp;
branches;
next	1.8;

1.8
date	2001.11.23.22.20.06;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2001.11.19.19.02.16;	author mpech;	state Exp;
branches;
next	1.6;

1.6
date	2001.09.04.23.35.59;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.06.23.22.21.45;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	96.06.26.05.40.04;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.06.25.15.20.07;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.05.22.11.35.30;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.46.10;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.46.10;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Remove unused files. Noticed by sthen@@
@
text
@/*	$OpenBSD: cmds.c,v 1.16 2007/05/29 20:56:54 tedu Exp $	*/
/*	$NetBSD: cmds.c,v 1.4 1996/05/10 23:16:32 thorpej Exp $	*/

/*-
 * Copyright (c) 1980, 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)cmds.c	8.2 (Berkeley) 4/29/95";
#endif
static char rcsid[] = "$OpenBSD: cmds.c,v 1.16 2007/05/29 20:56:54 tedu Exp $";
#endif /* not lint */

#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <ctype.h>
#include <string.h>
#include "systat.h"
#include "extern.h"

void
command(char *cmd)
{
	struct cmdtab *p;
	char *cp;
	double interval;
	sigset_t mask, omask;

	sigemptyset(&mask);
	sigaddset(&mask, SIGALRM);
	sigprocmask(SIG_BLOCK, &mask, &omask);
	for (cp = cmd; *cp && !isspace(*cp); cp++)
		;
	if (*cp)
		*cp++ = '\0';
	if (*cmd == '\0')
		return;
	for (; isspace(*cp); cp++)
		;
	if (strcmp(cmd, "quit") == 0 || strcmp(cmd, "q") == 0)
		die();
	if (strcmp(cmd, "load") == 0) {
		load();
		goto done;
	}
	if (strcmp(cmd, "stop") == 0) {
		alarm(0);
		mvaddstr(CMDLINE, 0, "Refresh disabled.");
		clrtoeol();
		goto done;
	}
	if (strcmp(cmd, "help") == 0) {
		size_t len;
		int column = 0;

		move(CMDLINE, column);
		for (p = cmdtab; p->c_name; p++) {
			len = strlen(p->c_name);
			if (column + len > COLS)
				break;
			addstr(p->c_name);
			column += len;
			if (column + 1 < COLS)
				addch(' ');
		}
		clrtoeol();
		goto done;
	}
	interval = strtod(cmd, NULL);
	if (interval < 0.09 &&
	    (strcmp(cmd, "start") == 0 || strcmp(cmd, "interval") == 0)) {
		interval = *cp ? strtod(cp, NULL) : naptime;
		if (interval < 0.09) {
			error("%d: bad interval.", interval);
			goto done;
		}
	}
	if (interval >= 0.09) {
		alarm(0);
		naptime = interval;
		display();
		status();
		goto done;
	}
	p = lookup(cmd);
	if (p == (struct cmdtab *)-1) {
		error("%s: Ambiguous command.", cmd);
		goto done;
	}
	if (p) {
		if (curcmd == p)
			goto done;
		alarm(0);
		(*curcmd->c_close)(wnd);
		wnd = (*p->c_open)();
		if (wnd == 0) {
			error("Couldn't open new display");
			wnd = (*curcmd->c_open)();
			if (wnd == 0) {
				error("Couldn't change back to previous cmd");
				exit(1);
			}
			p = curcmd;
		}
		if ((p->c_flags & CF_INIT) == 0) {
			if ((*p->c_init)())
				p->c_flags |= CF_INIT;
			else
				goto done;
		}
		curcmd = p;
		labels();
		display();
		status();
		goto done;
	}
	if (curcmd->c_cmd == 0 || !(*curcmd->c_cmd)(cmd, cp))
		error("%s: Unknown command.", cmd);
done:
	sigprocmask(SIG_SETMASK, &omask, NULL);
}

struct cmdtab *
lookup(char *name)
{
	char *p, *q;
	struct cmdtab *c, *found;
	int nmatches, longest;

	longest = 0;
	nmatches = 0;
	found = (struct cmdtab *) 0;
	for (c = cmdtab; (p = c->c_name); c++) {
		for (q = name; *q == *p++; q++)
			if (*q == 0)		/* exact match? */
				return (c);
		if (!*q) {			/* the name was a prefix */
			if (q - name > longest) {
				longest = q - name;
				nmatches = 1;
				found = c;
			} else if (q - name == longest)
				nmatches++;
		}
	}
	if (nmatches > 1)
		return ((struct cmdtab *)-1);
	return (found);
}

void
status(void)
{

	error("Showing %s, refresh every %.1f seconds.",
	    curcmd->c_name, naptime);
}

int
prefix(char *s1, char *s2)
{

	while (*s1 == *s2) {
		if (*s1 == '\0')
			return (1);
		s1++, s2++;
	}
	return (*s1 == '\0');
}
@


1.16
log
@otto would prefer only displaying one digit after decimal for refresh rate
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.15 2007/04/24 06:32:08 tedu Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: cmds.c,v 1.15 2007/04/24 06:32:08 tedu Exp $";
@


1.15
log
@support non-integral refresh intervals, possibly as low as 0.1s.
this makes it more useful for real time display of fast changing stats
ok art deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.14 2007/03/20 03:56:13 tedu Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: cmds.c,v 1.14 2007/03/20 03:56:13 tedu Exp $";
d182 1
a182 1
	error("Showing %s, refresh every %f seconds.",
@


1.14
log
@remove some bogus *p tests from charles longeau
ok deraadt millert
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.13 2006/03/31 04:10:59 deraadt Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: cmds.c,v 1.13 2006/03/31 04:10:59 deraadt Exp $";
d53 1
a53 1
	int interval;
d96 2
a97 2
	interval = atoi(cmd);
	if (interval <= 0 &&
d99 2
a100 2
		interval = *cp ? atoi(cp) : naptime;
		if (interval <= 0) {
d105 1
a105 1
	if (interval > 0) {
d182 1
a182 1
	error("Showing %s, refresh every %d seconds.",
@


1.13
log
@fairly simple cleanup, lots of testing done
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.12 2003/06/03 02:56:17 millert Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: cmds.c,v 1.12 2003/06/03 02:56:17 millert Exp $";
d65 1
a65 1
	for (; *cp && isspace(*cp); cp++)
@


1.12
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.11 2002/06/18 00:46:47 deraadt Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: cmds.c,v 1.11 2002/06/18 00:46:47 deraadt Exp $";
d80 2
a81 1
		int col, len;
d83 1
a83 1
		move(CMDLINE, col = 0);
d86 1
a86 1
			if (col + len > COLS)
d88 3
a90 2
			addstr(p->c_name); col += len;
			if (col + 1 < COLS)
@


1.11
log
@ANSI
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.10 2001/12/07 09:18:08 deraadt Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static char rcsid[] = "$OpenBSD: cmds.c,v 1.10 2001/12/07 09:18:08 deraadt Exp $";
@


1.10
log
@move back.  pvalchev -- the bug was quite obscure
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.8 2001/11/23 22:20:06 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: cmds.c,v 1.8 2001/11/23 22:20:06 deraadt Exp $";
d53 1
a53 2
command(cmd)
	char *cmd;
d153 1
a153 2
lookup(name)
	char *name;
d181 1
a181 1
status()
d189 1
a189 2
prefix(s1, s2)
	char *s1, *s2;
@


1.9
log
@back out latest changes which cause problems on alpha/sparc64 until
they are fixed
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.7 2001/11/19 19:02:16 mpech Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: cmds.c,v 1.7 2001/11/19 19:02:16 mpech Exp $";
d54 1
a54 1
        char *cmd;
d56 2
a57 2
        struct cmdtab *p;
        char *cp;
d64 4
a67 4
        for (cp = cmd; *cp && !isspace(*cp); cp++)
                ;
        if (*cp)
                *cp++ = '\0';
d72 2
a73 2
        if (strcmp(cmd, "quit") == 0 || strcmp(cmd, "q") == 0)
                die(0);
d78 4
a81 4
        if (strcmp(cmd, "stop") == 0) {
                alarm(0);
                mvaddstr(CMDLINE, 0, "Refresh disabled.");
                clrtoeol();
d83 1
a83 1
        }
d100 1
a100 1
        if (interval <= 0 &&
d103 1
a103 1
                if (interval <= 0) {
d106 1
a106 1
                }
d109 4
a112 4
                alarm(0);
                naptime = interval;
                display(0);
                status();
d114 1
a114 1
        }
d120 2
a121 2
        if (p) {
                if (curcmd == p)
d123 1
a123 1
                alarm(0);
d141 1
a141 1
                curcmd = p;
d143 2
a144 2
                display(0);
                status();
d146 1
a146 1
        }
d186 2
a187 2
        error("Showing %s, refresh every %d seconds.",
          curcmd->c_name, naptime);
d192 1
a192 1
        char *s1, *s2;
d195 6
a200 6
        while (*s1 == *s2) {
                if (*s1 == '\0')
                        return (1);
                s1++, s2++;
        }
        return (*s1 == '\0');
@


1.8
log
@fix signal races.  use sysctl() instead of kvm where possible, and then KNF
the hell out of it; checked by miod
@
text
@d54 1
a54 1
	char *cmd;
d56 2
a57 2
	struct cmdtab *p;
	char *cp;
d64 4
a67 4
	for (cp = cmd; *cp && !isspace(*cp); cp++)
		;
	if (*cp)
		*cp++ = '\0';
d72 2
a73 2
	if (strcmp(cmd, "quit") == 0 || strcmp(cmd, "q") == 0)
		die();
d78 4
a81 4
	if (strcmp(cmd, "stop") == 0) {
		alarm(0);
		mvaddstr(CMDLINE, 0, "Refresh disabled.");
		clrtoeol();
d83 1
a83 1
	}
d100 1
a100 1
	if (interval <= 0 &&
d103 1
a103 1
		if (interval <= 0) {
d106 1
a106 1
		}
d109 4
a112 4
		alarm(0);
		naptime = interval;
		display();
		status();
d114 1
a114 1
	}
d120 2
a121 2
	if (p) {
		if (curcmd == p)
d123 1
a123 1
		alarm(0);
d141 1
a141 1
		curcmd = p;
d143 2
a144 2
		display();
		status();
d146 1
a146 1
	}
d186 2
a187 2
	error("Showing %s, refresh every %d seconds.",
	    curcmd->c_name, naptime);
d192 1
a192 1
	char *s1, *s2;
d195 6
a200 6
	while (*s1 == *s2) {
		if (*s1 == '\0')
			return (1);
		s1++, s2++;
	}
	return (*s1 == '\0');
@


1.7
log
@kill more registers

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.6 2001/09/04 23:35:59 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: cmds.c,v 1.6 2001/09/04 23:35:59 millert Exp $";
d54 1
a54 1
        char *cmd;
d56 2
a57 2
        struct cmdtab *p;
        char *cp;
d64 4
a67 4
        for (cp = cmd; *cp && !isspace(*cp); cp++)
                ;
        if (*cp)
                *cp++ = '\0';
d72 2
a73 2
        if (strcmp(cmd, "quit") == 0 || strcmp(cmd, "q") == 0)
                die(0);
d78 4
a81 4
        if (strcmp(cmd, "stop") == 0) {
                alarm(0);
                mvaddstr(CMDLINE, 0, "Refresh disabled.");
                clrtoeol();
d83 1
a83 1
        }
d100 1
a100 1
        if (interval <= 0 &&
d103 1
a103 1
                if (interval <= 0) {
d106 1
a106 1
                }
d109 4
a112 4
                alarm(0);
                naptime = interval;
                display(0);
                status();
d114 1
a114 1
        }
d120 2
a121 2
        if (p) {
                if (curcmd == p)
d123 1
a123 1
                alarm(0);
d141 1
a141 1
                curcmd = p;
d143 2
a144 2
                display(0);
                status();
d146 1
a146 1
        }
d186 2
a187 2
        error("Showing %s, refresh every %d seconds.",
          curcmd->c_name, naptime);
d192 1
a192 1
        char *s1, *s2;
d195 6
a200 6
        while (*s1 == *s2) {
                if (*s1 == '\0')
                        return (1);
                s1++, s2++;
        }
        return (*s1 == '\0');
@


1.6
log
@Replace the deprecated BSD sigsetmask/sigblock/sigpause functions with their POSIX counterparts.
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.5 1997/06/23 22:21:45 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: cmds.c,v 1.5 1997/06/23 22:21:45 millert Exp $";
d56 2
a57 2
        register struct cmdtab *p;
        register char *cp;
d155 1
a155 1
	register char *name;
d157 3
a159 3
	register char *p, *q;
	register struct cmdtab *c, *found;
	register int nmatches, longest;
d192 1
a192 1
        register char *s1, *s2;
@


1.5
log
@Cleanup by Theo and myself.  CMDLINE changed to long to make
command line work on 64bit platforms.  This is somewhat bogus
and is really just a temporary workaround (there may be a curses bug).
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.4 1996/06/26 05:40:04 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: cmds.c,v 1.4 1996/06/26 05:40:04 deraadt Exp $";
d58 2
a59 1
	int interval, omask;
d61 3
a63 1
	omask = sigblock(sigmask(SIGALRM));
d150 1
a150 1
	sigsetmask(omask);
@


1.4
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.4 1996/05/10 23:16:32 thorpej Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: cmds.c,v 1.4 1996/05/10 23:16:32 thorpej Exp $";
d161 1
a161 1
	for (c = cmdtab; p = c->c_name; c++) {
@


1.3
log
@distinguish ambigious and unknown commands; netbsd pr$2536; leo@@marco.de
@
text
@d1 1
d41 1
a41 1
static char rcsid[] = "$NetBSD: cmds.c,v 1.4 1996/05/10 23:16:32 thorpej Exp $";
@


1.2
log
@libutil
@
text
@d113 1
a113 3
		/* if not a primary command, try a display specific one */
		if (curcmd->c_cmd == 0 || !(*curcmd->c_cmd)(cmd, cp))
			error("%s: Ambiguous command.", cmd);
d143 2
d173 1
a173 1
	if (nmatches != 1)
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: cmds.c,v 1.3 1995/08/31 22:20:18 jtc Exp $	*/
d40 1
a40 1
static char rcsid[] = "$NetBSD: cmds.c,v 1.3 1995/08/31 22:20:18 jtc Exp $";
d113 3
a115 1
		error("%s: Ambiguous command.", cmd);
a144 2
	if (curcmd->c_cmd == 0 || !(*curcmd->c_cmd)(cmd, cp))
		error("%s: Unknown command.", cmd);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
