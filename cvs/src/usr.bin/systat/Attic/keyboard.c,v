head	1.21;
access;
symbols
	OPENBSD_4_3:1.19.0.4
	OPENBSD_4_3_BASE:1.19
	OPENBSD_4_2:1.19.0.2
	OPENBSD_4_2_BASE:1.19
	OPENBSD_4_1:1.18.0.4
	OPENBSD_4_1_BASE:1.18
	OPENBSD_4_0:1.18.0.2
	OPENBSD_4_0_BASE:1.18
	OPENBSD_3_9:1.17.0.4
	OPENBSD_3_9_BASE:1.17
	OPENBSD_3_8:1.17.0.2
	OPENBSD_3_8_BASE:1.17
	OPENBSD_3_7:1.16.0.4
	OPENBSD_3_7_BASE:1.16
	OPENBSD_3_6:1.16.0.2
	OPENBSD_3_6_BASE:1.16
	OPENBSD_3_5:1.14.0.4
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.14.0.2
	OPENBSD_3_4_BASE:1.14
	OPENBSD_3_3:1.12.0.4
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.12.0.2
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.11.0.2
	OPENBSD_3_1_BASE:1.11
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.4
	OPENBSD_2_8:1.6.0.2
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.4.0.12
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.10
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.8
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.6
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.21
date	2008.06.13.22.02.04;	author canacar;	state dead;
branches;
next	1.20;

1.20
date	2008.06.12.22.26.01;	author canacar;	state Exp;
branches;
next	1.19;

1.19
date	2007.04.15.16.25.08;	author matthieu;	state Exp;
branches;
next	1.18;

1.18
date	2006.03.31.04.10.59;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2005.08.01.22.51.50;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2004.07.11.05.24.56;	author pvalchev;	state Exp;
branches;
next	1.15;

1.15
date	2004.04.14.19.53.04;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2003.07.10.00.06.51;	author david;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.03.02.56.17;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2002.06.18.00.46.47;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2002.02.18.23.34.46;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2001.12.07.09.18.08;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2001.12.07.07.57.35;	author pvalchev;	state Exp;
branches;
next	1.8;

1.8
date	2001.11.23.22.20.06;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2001.09.04.23.35.59;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2000.07.10.03.10.17;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2000.06.04.23.06.17;	author aaron;	state Exp;
branches;
next	1.4;

1.4
date	97.07.15.13.42.05;	author kstailey;	state Exp;
branches;
next	1.3;

1.3
date	96.07.25.01.46.56;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.40.07;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.46.10;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.46.10;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Remove unused files. Noticed by sthen@@
@
text
@@


1.20
log
@New display engine for systat, based on pftop. Adds new views for pf
(status, state, rule, queue). While all displays work, some keyboard
comands are not implemented yet. Other features include better handling
of display resize and scrolling for long views. Committing now to fix
the remaining issues in the tree.
Testing and comments by otto@@ and harding@@, ok deraadt@@
@
text
@@


1.19
log
@allow systat(1) to be exited with 'q' like top(1).
ok beck@@ ckuethe@@ hshoexer@@ millert@@
@
text
@a0 165
/*	$OpenBSD: keyboard.c,v 1.18 2006/03/31 04:10:59 deraadt Exp $	*/
/*	$NetBSD: keyboard.c,v 1.2 1995/01/20 08:51:59 jtc Exp $	*/

/*-
 * Copyright (c) 1980, 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)keyboard.c	8.1 (Berkeley) 6/6/93";
#endif
static char rcsid[] = "$OpenBSD: keyboard.c,v 1.18 2006/03/31 04:10:59 deraadt Exp $";
#endif /* not lint */

#include <sys/types.h>
#include <ctype.h>
#include <signal.h>
#include <stdlib.h>
#include <unistd.h>
#include <termios.h>
#include <errno.h>

#include "systat.h"
#include "extern.h"

void
keyboard(void)
{
	char line[80];
	sigset_t mask, omask;
	int ch, col;

	for (;;) {
		col = 0;
		move(CMDLINE, 0);
		do {
			if (gottstp) {
				endwin();
				signal(SIGTSTP, SIG_DFL);
				kill(getpid(), SIGTSTP);
				signal(SIGTSTP, sigtstp);
				siginterrupt(SIGTSTP, 1);
				gotwinch = 1;
				gottstp = 0;
			}
			if (gotdisplay) {
				display();
				gotdisplay = 0;
			}
			if (gotdie) {
				die();
			}
			if (gotwinch) {
				clearok(curscr, TRUE);
				wrefresh(curscr);
				gotwinch = 0;
			}

			refresh();
			if ((ch = getch()) == ERR) {
				if (errno == EINTR)
					continue;
				exit(1);
			}
			ch &= 0177;
			if (ch == 0177 && ferror(stdin)) {
				clearerr(stdin);
				continue;
			}
			if (ch >= 'A' && ch <= 'Z')
				ch += 'a' - 'A';
			if (col == 0) {
				switch (ch) {
				case CTRL('l'):
				case CTRL('g'):
					sigemptyset(&mask);
					sigaddset(&mask, SIGALRM);
					sigprocmask(SIG_BLOCK, &mask, &omask);
					if (ch == CTRL('l'))
						wrefresh(curscr);
					else
						status();
					sigprocmask(SIG_SETMASK, &omask, NULL);
					continue;
				case ':':
					break;
				case 'q':
					gotdie=1;
					break;
				default:
					continue;
				}
				move(CMDLINE, 0);
				clrtoeol();
			}
			if (ch == erasechar() && col > 0) {
				if (col == 1 && line[0] == ':')
					continue;
				col--;
				goto doerase;
			}
			if (ch == CTRL('w') && col > 0) {
				while (--col >= 0 && isspace(line[col]))
					;
				col++;
				while (--col >= 0 && !isspace(line[col]))
					if (col == 0 && line[0] == ':')
						break;
				col++;
				goto doerase;
			}
			if (ch == killchar() && col > 0) {
				col = 0;
				if (line[0] == ':')
					col++;
		doerase:
				move(CMDLINE, col);
				clrtoeol();
				continue;
			}
			if (col >= sizeof(line) - 1) {
				/* line too long */
				beep();
				continue;
			}
			if (isprint(ch) || ch == ' ') {
				line[col] = ch;
				mvaddch(CMDLINE, col, (chtype)ch);
				col++;
			}
		} while (col == 0 || (ch != '\r' && ch != '\n'));
		line[col] = '\0';
		sigemptyset(&mask);
		sigaddset(&mask, SIGALRM);
		sigprocmask(SIG_BLOCK, &mask, &omask);
		command(line + 1);
		sigprocmask(SIG_SETMASK, &omask, NULL);
	}
	/*NOTREACHED*/
}
@


1.18
log
@fairly simple cleanup, lots of testing done
@
text
@d1 1
a1 1
/*	$OpenBSD: keyboard.c,v 1.17 2005/08/01 22:51:50 millert Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: keyboard.c,v 1.17 2005/08/01 22:51:50 millert Exp $";
d111 3
@


1.17
log
@Send ourselves SIGTSTP, not SIGSTOP on ^Z.  Noticed and OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: keyboard.c,v 1.16 2004/07/11 05:24:56 pvalchev Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: keyboard.c,v 1.16 2004/07/11 05:24:56 pvalchev Exp $";
d56 1
a56 1
	int ch;
d150 1
a150 1
				mvaddch(CMDLINE, col, ch);
@


1.16
log
@prototypes; ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: keyboard.c,v 1.15 2004/04/14 19:53:04 deraadt Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: keyboard.c,v 1.15 2004/04/14 19:53:04 deraadt Exp $";
d64 4
a67 1
				kill(getpid(), SIGSTOP);
@


1.15
log
@wakeup after ^Z did not continue redraws and such.  use own ^Z handler.
ok otto millert
@
text
@d1 1
a1 1
/*	$OpenBSD: keyboard.c,v 1.14 2003/07/10 00:06:51 david Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: keyboard.c,v 1.14 2003/07/10 00:06:51 david Exp $";
d40 1
d44 1
@


1.14
log
@add missing includes
ok deraadt@@ tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: keyboard.c,v 1.13 2003/06/03 02:56:17 millert Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: keyboard.c,v 1.13 2003/06/03 02:56:17 millert Exp $";
d60 6
@


1.13
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: keyboard.c,v 1.12 2002/06/18 00:46:47 deraadt Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: keyboard.c,v 1.12 2002/06/18 00:46:47 deraadt Exp $";
d42 1
@


1.12
log
@ANSI
@
text
@d1 1
a1 1
/*	$OpenBSD: keyboard.c,v 1.11 2002/02/18 23:34:46 deraadt Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static char rcsid[] = "$OpenBSD: keyboard.c,v 1.11 2002/02/18 23:34:46 deraadt Exp $";
@


1.11
log
@more "char c = getchar(); if (c == EOF) ..." balony
@
text
@d1 1
a1 1
/*	$OpenBSD: keyboard.c,v 1.10 2001/12/07 09:18:08 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: keyboard.c,v 1.10 2001/12/07 09:18:08 deraadt Exp $";
d53 1
a53 1
keyboard()
@


1.10
log
@move back.  pvalchev -- the bug was quite obscure
@
text
@d1 1
a1 1
/*	$OpenBSD: keyboard.c,v 1.8 2001/11/23 22:20:06 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: keyboard.c,v 1.8 2001/11/23 22:20:06 deraadt Exp $";
d55 1
a55 1
	char ch, line[80];
d57 1
@


1.9
log
@back out latest changes which cause problems on alpha/sparc64 until
they are fixed
@
text
@d1 1
a1 1
/*	$OpenBSD: keyboard.c,v 1.7 2001/09/04 23:35:59 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: keyboard.c,v 1.7 2001/09/04 23:35:59 millert Exp $";
d47 1
d55 1
a55 1
        char ch, line[80];
d58 21
a78 6
        for (;;) {
                col = 0;
                move(CMDLINE, 0);
                do {
                        refresh();
                        if ((ch = getch()) == ERR)
d80 9
a88 8
                        ch &= 0177;
                        if (ch == 0177 && ferror(stdin)) {
                                clearerr(stdin);
                                continue;
                        }
                        if (ch >= 'A' && ch <= 'Z')
                                ch += 'a' - 'A';
                        if (col == 0) {
d100 1
a100 1
                                        continue;
d106 28
a133 28
                                move(CMDLINE, 0);
                                clrtoeol();
                        }
                        if (ch == erasechar() && col > 0) {
                                if (col == 1 && line[0] == ':')
                                        continue;
                                col--;
                                goto doerase;
                        }
                        if (ch == CTRL('w') && col > 0) {
                                while (--col >= 0 && isspace(line[col]))
                                        ;
                                col++;
                                while (--col >= 0 && !isspace(line[col]))
                                        if (col == 0 && line[0] == ':')
                                                break;
                                col++;
                                goto doerase;
                        }
                        if (ch == killchar() && col > 0) {
                                col = 0;
                                if (line[0] == ':')
                                        col++;
                doerase:
                                move(CMDLINE, col);
                                clrtoeol();
                                continue;
                        }
d139 7
a145 7
                        if (isprint(ch) || ch == ' ') {
                                line[col] = ch;
                                mvaddch(CMDLINE, col, ch);
                                col++;
                        }
                } while (col == 0 || (ch != '\r' && ch != '\n'));
                line[col] = '\0';
d149 1
a149 1
                command(line + 1);
d151 1
a151 1
        }
@


1.8
log
@fix signal races.  use sysctl() instead of kvm where possible, and then KNF
the hell out of it; checked by miod
@
text
@a46 1
#include <errno.h>
d54 1
a54 1
	char ch, line[80];
d57 6
a62 21
	for (;;) {
		col = 0;
		move(CMDLINE, 0);
		do {
			if (gotdisplay) {
				display();
				gotdisplay = 0;
			}
			if (gotdie) {
				die();
			}
			if (gotwinch) {
				clearok(curscr, TRUE);
				wrefresh(curscr);
				gotwinch = 0;
			}

			refresh();
			if ((ch = getch()) == ERR) {
				if (errno == EINTR)
					continue;
d64 8
a71 9
			}
			ch &= 0177;
			if (ch == 0177 && ferror(stdin)) {
				clearerr(stdin);
				continue;
			}
			if (ch >= 'A' && ch <= 'Z')
				ch += 'a' - 'A';
			if (col == 0) {
d83 1
a83 1
					continue;
d89 28
a116 28
				move(CMDLINE, 0);
				clrtoeol();
			}
			if (ch == erasechar() && col > 0) {
				if (col == 1 && line[0] == ':')
					continue;
				col--;
				goto doerase;
			}
			if (ch == CTRL('w') && col > 0) {
				while (--col >= 0 && isspace(line[col]))
					;
				col++;
				while (--col >= 0 && !isspace(line[col]))
					if (col == 0 && line[0] == ':')
						break;
				col++;
				goto doerase;
			}
			if (ch == killchar() && col > 0) {
				col = 0;
				if (line[0] == ':')
					col++;
		doerase:
				move(CMDLINE, col);
				clrtoeol();
				continue;
			}
d122 7
a128 7
			if (isprint(ch) || ch == ' ') {
				line[col] = ch;
				mvaddch(CMDLINE, col, ch);
				col++;
			}
		} while (col == 0 || (ch != '\r' && ch != '\n'));
		line[col] = '\0';
d132 1
a132 1
		command(line + 1);
d134 1
a134 1
	}
@


1.7
log
@Replace the deprecated BSD sigsetmask/sigblock/sigpause functions with their POSIX counterparts.
@
text
@d1 1
a1 1
/*	$OpenBSD: keyboard.c,v 1.6 2000/07/10 03:10:17 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: keyboard.c,v 1.6 2000/07/10 03:10:17 millert Exp $";
d47 1
d55 1
a55 1
        char ch, line[80];
d58 21
a78 6
        for (;;) {
                col = 0;
                move(CMDLINE, 0);
                do {
                        refresh();
                        if ((ch = getch()) == ERR)
d80 9
a88 8
                        ch &= 0177;
                        if (ch == 0177 && ferror(stdin)) {
                                clearerr(stdin);
                                continue;
                        }
                        if (ch >= 'A' && ch <= 'Z')
                                ch += 'a' - 'A';
                        if (col == 0) {
d100 1
a100 1
                                        continue;
d106 28
a133 28
                                move(CMDLINE, 0);
                                clrtoeol();
                        }
                        if (ch == erasechar() && col > 0) {
                                if (col == 1 && line[0] == ':')
                                        continue;
                                col--;
                                goto doerase;
                        }
                        if (ch == CTRL('w') && col > 0) {
                                while (--col >= 0 && isspace(line[col]))
                                        ;
                                col++;
                                while (--col >= 0 && !isspace(line[col]))
                                        if (col == 0 && line[0] == ':')
                                                break;
                                col++;
                                goto doerase;
                        }
                        if (ch == killchar() && col > 0) {
                                col = 0;
                                if (line[0] == ':')
                                        col++;
                doerase:
                                move(CMDLINE, col);
                                clrtoeol();
                                continue;
                        }
d139 7
a145 7
                        if (isprint(ch) || ch == ' ') {
                                line[col] = ch;
                                mvaddch(CMDLINE, col, ch);
                                col++;
                        }
                } while (col == 0 || (ch != '\r' && ch != '\n'));
                line[col] = '\0';
d149 1
a149 1
                command(line + 1);
d151 1
a151 1
        }
@


1.6
log
@Bail if getch() returns ERR.  In ncurses < 5.1 getch() incorrectly
returned 0 on EOF (due to a side effect of how curses buffers reads).
@
text
@d1 1
a1 1
/*	$OpenBSD: keyboard.c,v 1.5 2000/06/04 23:06:17 aaron Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: keyboard.c,v 1.5 2000/06/04 23:06:17 aaron Exp $";
d55 1
a55 1
	int oldmask;
d72 11
a82 5
#define	mask(s)	(1 << ((s) - 1))
                                if (ch == CTRL('l')) {
					oldmask = sigblock(mask(SIGALRM));
					wrefresh(curscr);
					sigsetmask(oldmask);
d84 3
a86 5
                                }
				if (ch == CTRL('g')) {
					oldmask = sigblock(mask(SIGALRM));
					status();
					sigsetmask(oldmask);
a88 2
                                if (ch != ':')
                                        continue;
d129 3
a131 1
		oldmask = sigblock(mask(SIGALRM));
d133 1
a133 1
		sigsetmask(oldmask);
@


1.5
log
@Fix one-byte overflow; millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: keyboard.c,v 1.4 1997/07/15 13:42:05 kstailey Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: keyboard.c,v 1.4 1997/07/15 13:42:05 kstailey Exp $";
d62 3
a64 1
                        ch = getch() & 0177;
@


1.4
log
@keyboard() does not return an int
@
text
@d1 1
a1 1
/*	$OpenBSD: keyboard.c,v 1.2 1996/06/26 05:40:07 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: keyboard.c,v 1.2 1996/06/26 05:40:07 deraadt Exp $";
d113 1
a113 1
			if (col >= sizeof(line)) {
@


1.3
log
@buffer overflow prevention
@
text
@d51 1
a51 1
int
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: keyboard.c,v 1.2 1995/01/20 08:51:59 jtc Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: keyboard.c,v 1.2 1995/01/20 08:51:59 jtc Exp $";
d113 5
@


1.1
log
@Initial revision
@
text
@d1 1
d41 1
a41 1
static char rcsid[] = "$NetBSD: keyboard.c,v 1.2 1995/01/20 08:51:59 jtc Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
