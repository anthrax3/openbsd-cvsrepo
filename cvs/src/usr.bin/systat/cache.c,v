head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.2
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.6.0.4
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.14
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.12
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.8
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.6
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.4
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	OPENBSD_5_0:1.3.0.12
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.10
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.8
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.6
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2;
locks; strict;
comment	@ * @;


1.7
date	2016.08.26.09.10.11;	author guenther;	state Exp;
branches;
next	1.6;
commitid	eGqGT9YIhgSQ689y;

1.6
date	2016.01.16.03.30.26;	author canacar;	state Exp;
branches;
next	1.5;
commitid	f9790JrBS1aXEyQy;

1.5
date	2014.10.08.04.10.04;	author doug;	state Exp;
branches;
next	1.4;
commitid	cpW0LtZf9XzHlFrl;

1.4
date	2011.11.29.10.17.52;	author dlg;	state Exp;
branches;
next	1.3;

1.3
date	2008.12.07.02.56.06;	author canacar;	state Exp;
branches;
next	1.2;

1.2
date	2008.07.16.10.23.39;	author canacar;	state Exp;
branches;
next	1.1;

1.1
date	2008.06.12.22.26.01;	author canacar;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Pull in <time.h> for time()

ok deraadt@@
@
text
@/* $Id: cache.c,v 1.6 2016/01/16 03:30:26 canacar Exp $ */
/*
 * Copyright (c) 2001, 2007 Can Erkin Acar <canacar@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/ioctl.h>
#include <sys/socket.h>

#include <net/if.h>
#include <netinet/in.h>

#include <netinet/tcp_fsm.h>
#ifdef TEST_COMPAT
#include "pfvarmux.h"
#else
#include <net/pfvar.h>
#endif
#include <arpa/inet.h>

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#include <assert.h>

#include "cache.h"

/* prototypes */
void update_state(struct sc_ent *, struct pfsync_state *, double);
struct sc_ent *cache_state(struct pfsync_state *);
static __inline int sc_cmp(struct sc_ent *s1, struct sc_ent *s2);

/* initialize the tree and queue */
RB_HEAD(sc_tree, sc_ent) sctree;
TAILQ_HEAD(sc_queue, sc_ent) scq1, scq2, scq_free;
RB_GENERATE(sc_tree, sc_ent, tlink, sc_cmp)

struct sc_queue *scq_act = NULL;
struct sc_queue *scq_exp = NULL;

int cache_max = 0;
int cache_size = 0;

struct sc_ent *sc_store = NULL;

/* preallocate the cache and insert into the 'free' queue */
int
cache_init(int max)
{
	int n;
	static int initialized = 0;

	if (max < 0 || initialized)
		return (1);

	if (max == 0) {
		sc_store = NULL;
	} else {
		sc_store = reallocarray(NULL, max, sizeof(struct sc_ent));
		if (sc_store == NULL)
			return (1);
	}

	RB_INIT(&sctree);
	TAILQ_INIT(&scq1);
	TAILQ_INIT(&scq2);
	TAILQ_INIT(&scq_free);

	scq_act = &scq1;
	scq_exp = &scq2;

	for (n = 0; n < max; n++)
		TAILQ_INSERT_HEAD(&scq_free, sc_store + n, qlink);

	cache_size = cache_max = max;
	initialized++;

	return (0);
}

void
update_state(struct sc_ent *prev, struct pfsync_state *new, double rate)
{
	assert (prev != NULL && new != NULL);
	prev->t = time(NULL);
	prev->rate = rate;
	prev->bytes = COUNTER(new->bytes[0]) + COUNTER(new->bytes[1]);
	if (prev->peak < rate)
		prev->peak = rate;
}

void
add_state(struct pfsync_state *st)
{
	struct sc_ent *ent;
	assert(st != NULL);

	if (cache_max == 0)
		return;

	if (TAILQ_EMPTY(&scq_free))
		return;

	ent = TAILQ_FIRST(&scq_free);
	TAILQ_REMOVE(&scq_free, ent, qlink);

	cache_size--;

	ent->id = st->id;
	ent->creatorid = st->creatorid;
	ent->bytes = COUNTER(st->bytes[0]) + COUNTER(st->bytes[1]);
	ent->peak = 0;
	ent->rate = 0;
	ent->t = 0;

	RB_INSERT(sc_tree, &sctree, ent);
	TAILQ_INSERT_HEAD(scq_act, ent, qlink);
}

/* must be called only once for each state before cache_endupdate */
struct sc_ent *
cache_state(struct pfsync_state *st)
{
	struct sc_ent ent, *old;
	double sd, td, r;

	if (cache_max == 0)
		return (NULL);

	ent.id = st->id;
	ent.creatorid = st->creatorid;
	old = RB_FIND(sc_tree, &sctree, &ent);

	if (old == NULL) {
		add_state(st);
		return (NULL);
	}

	if (COUNTER(st->bytes[0]) + COUNTER(st->bytes[1]) < old->bytes)
		return (NULL);

	sd = COUNTER(st->bytes[0]) + COUNTER(st->bytes[1]) - old->bytes;
	td = time(NULL) - old->t;

	if (td > 0) {
		r = sd/td;
		update_state(old, st, r);		
	}

	/* move to active queue */
	TAILQ_REMOVE(scq_exp, old, qlink);
	TAILQ_INSERT_HEAD(scq_act, old, qlink);

	return (old);
}

/* remove the states that are not updated in this cycle */
void
cache_endupdate(void)
{
	struct sc_queue *tmp;
	struct sc_ent *ent;

	while (! TAILQ_EMPTY(scq_exp)) {
		ent = TAILQ_FIRST(scq_exp);
		TAILQ_REMOVE(scq_exp, ent, qlink);
		RB_REMOVE(sc_tree, &sctree, ent);
		TAILQ_INSERT_HEAD(&scq_free, ent, qlink);
		cache_size++;
	}

	tmp = scq_act;
	scq_act = scq_exp;
	scq_exp = tmp;
}

static __inline int
sc_cmp(struct sc_ent *a, struct sc_ent *b)
{
	if (a->id > b->id)
		return (1);
	if (a->id < b->id)
		return (-1);
	if (a->creatorid > b->creatorid)
		return (1);
	if (a->creatorid < b->creatorid)
		return (-1);
	return (0);
}
@


1.6
log
@fix a number of minor issues in the state view:

1. peak and rate computations were using uint32 size which caused
the fields from working for states that transferred more than 4GB
also fix an unnecessary cast to double found while looking for the bug.

2. When creating new cache entries for existing states, start time from
0 rather than the current time to prevent a "spike" in rate and peak.
@
text
@d1 1
a1 1
/* $Id: cache.c,v 1.5 2014/10/08 04:10:04 doug Exp $ */
d35 1
@


1.5
log
@userland reallocarray audit.

Replace malloc() and realloc() calls that may have integer overflow in the
multiplication of the size argument with reallocarray().

ok deraadt@@
@
text
@d1 1
a1 1
/* $Id: cache.c,v 1.4 2011/11/29 10:17:52 dlg Exp $ */
d126 1
a126 1
	ent->t = time(NULL);
@


1.4
log
@use a u_int64_t for the state id in pfsync_state. this makes it consistent
with every other thing that stores the state id (including other pfsync
messages).

includes improvements to the systat code to consider the creatorid as well
as the state id in its cache to avoid collisions between states created on
different hosts.

tested by me in production and on amd64 talking to sparc64.
ok henning@@
@
text
@d1 1
a1 1
/* $Id: cache.c,v 1.3 2008/12/07 02:56:06 canacar Exp $ */
d71 1
a71 1
		sc_store = malloc(max * sizeof(struct sc_ent));
@


1.3
log
@Warning cleanup including unused variables and shadowed names
@
text
@d1 1
a1 1
/* $Id: cache.c,v 1.2 2008/07/16 10:23:39 canacar Exp $ */
d121 2
a122 2
	ent->id[0] = st->id[0];
	ent->id[1] = st->id[1];
d142 2
a143 2
	ent.id[0] = st->id[0];
	ent.id[1] = st->id[1];
d192 1
a192 1
	if (a->id[0] > b->id[0])
d194 1
a194 1
	if (a->id[0] < b->id[0])
d196 1
a196 1
	if (a->id[1] > b->id[1])
d198 1
a198 1
	if (a->id[1] < b->id[1])
@


1.2
log
@Cleanup #define maze leftover from pftop compatibility.
Pointed out by mcbride@@, makes sense henning@@
@
text
@d1 1
a1 1
/* $Id: cache.c,v 1.1 2008/06/12 22:26:01 canacar Exp $ */
d48 1
a48 1
RB_GENERATE(sc_tree, sc_ent, tlink, sc_cmp);
@


1.1
log
@New display engine for systat, based on pftop. Adds new views for pf
(status, state, rule, queue). While all displays work, some keyboard
comands are not implemented yet. Other features include better handling
of display resize and scrolling for long views. Committing now to fix
the remaining issues in the tree.
Testing and comments by otto@@ and harding@@, ok deraadt@@
@
text
@d1 1
a1 1
/* $Id: cache.c,v 1.6 2008/06/12 01:19:47 canacar Exp $ */
d41 2
a42 2
void update_state(struct sc_ent *, pf_state_t *, double);
struct sc_ent *cache_state(pf_state_t *);
d94 1
a94 1
update_state(struct sc_ent *prev, pf_state_t *new, double rate)
a98 1
#ifdef HAVE_INOUT_COUNT
a99 3
#else
	prev->bytes = COUNTER(new->bytes);
#endif
d105 1
a105 1
add_state(pf_state_t *st)
a120 1
#ifdef HAVE_PFSYNC_STATE
a122 9
#else
	ent->addr[0] = st->lan.addr;
	ent->port[0] = st->lan.port;
	ent->addr[1] = st->ext.addr;
	ent->port[1] = st->ext.port;
	ent->af = st->af;
	ent->proto = st->proto;
#endif
#ifdef HAVE_INOUT_COUNT
a123 3
#else
	ent->bytes = st->bytes;
#endif
d134 1
a134 1
cache_state(pf_state_t *st)
a141 1
#ifdef HAVE_PFSYNC_STATE
a143 8
#else
	ent.addr[0] = st->lan.addr;
	ent.port[0] = st->lan.port;
	ent.addr[1] = st->ext.addr;
	ent.port[1] = st->ext.port;
	ent.af = st->af;
	ent.proto = st->proto;
#endif
a150 1
#ifdef HAVE_INOUT_COUNT
a154 7
#else
	if (st->bytes < old->bytes)
		return (NULL);

	sd = st->bytes - old->bytes;
#endif

a191 1
#ifdef HAVE_PFSYNC_STATE
a199 61
#else	
       	int diff;

	if ((diff = a->proto - b->proto) != 0)
		return (diff);
	if ((diff = a->af - b->af) != 0)
		return (diff);
	switch (a->af) {
	case AF_INET:
		if (a->addr[0].addr32[0] > b->addr[0].addr32[0])
			return (1);
		if (a->addr[0].addr32[0] < b->addr[0].addr32[0])
			return (-1);
		if (a->addr[1].addr32[0] > b->addr[1].addr32[0])
			return (1);
		if (a->addr[1].addr32[0] < b->addr[1].addr32[0])
			return (-1);
		break;
	case AF_INET6:
		if (a->addr[0].addr32[0] > b->addr[0].addr32[0])
			return (1);
		if (a->addr[0].addr32[0] < b->addr[0].addr32[0])
			return (-1);
		if (a->addr[0].addr32[1] > b->addr[0].addr32[1])
			return (1);
		if (a->addr[0].addr32[1] < b->addr[0].addr32[1])
			return (-1);
		if (a->addr[0].addr32[2] > b->addr[0].addr32[2])
			return (1);
		if (a->addr[0].addr32[2] < b->addr[0].addr32[2])
			return (-1);
		if (a->addr[0].addr32[3] > b->addr[0].addr32[3])
			return (1);
		if (a->addr[0].addr32[3] < b->addr[0].addr32[3])
			return (-1);
		if (a->addr[1].addr32[0] > b->addr[1].addr32[0])
			return (1);
		if (a->addr[1].addr32[0] < b->addr[1].addr32[0])
			return (-1);
		if (a->addr[1].addr32[1] > b->addr[1].addr32[1])
			return (1);
		if (a->addr[1].addr32[1] < b->addr[1].addr32[1])
			return (-1);
		if (a->addr[1].addr32[2] > b->addr[1].addr32[2])
			return (1);
		if (a->addr[1].addr32[2] < b->addr[1].addr32[2])
			return (-1);
		if (a->addr[1].addr32[3] > b->addr[1].addr32[3])
			return (1);
		if (a->addr[1].addr32[3] < b->addr[1].addr32[3])
			return (-1);
		break;
		default:
			return 1;
	}

	if ((diff = a->port[0] - b->port[0]) != 0)
		return (diff);
	if ((diff = a->port[1] - b->port[1]) != 0)
		return (diff);
#endif
@

