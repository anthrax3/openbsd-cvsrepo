head	1.20;
access;
symbols
	OPENBSD_6_1:1.20.0.12
	OPENBSD_6_1_BASE:1.20
	OPENBSD_6_0:1.20.0.8
	OPENBSD_6_0_BASE:1.20
	OPENBSD_5_9:1.20.0.4
	OPENBSD_5_9_BASE:1.20
	OPENBSD_5_8:1.20.0.6
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.20.0.2
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.19.0.6
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.19.0.4
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.17.0.2
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.16.0.8
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.6
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.4
	OPENBSD_5_0:1.16.0.2
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.15.0.12
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.10
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.6
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.8
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.4
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.2
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.14.0.2
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.12.0.2
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.11.0.6
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.4
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.2
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.8.0.10
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.8
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.7.0.2
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4;
locks; strict;
comment	@ * @;


1.20
date	2015.01.16.06.40.06;	author deraadt;	state Exp;
branches;
next	1.19;
commitid	Uu5nFG3wCl0LACBb;

1.19
date	2014.01.06.12.38.10;	author espie;	state Exp;
branches;
next	1.18;

1.18
date	2014.01.04.15.39.17;	author tobias;	state Exp;
branches;
next	1.17;

1.17
date	2013.03.07.16.54.28;	author espie;	state Exp;
branches;
next	1.16;

1.16
date	2011.04.06.11.36.26;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2008.04.27.23.06.40;	author fgsch;	state Exp;
branches;
next	1.14;

1.14
date	2007.09.10.16.31.35;	author cloder;	state Exp;
branches;
next	1.13;

1.13
date	2007.09.02.15.19.31;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2007.05.01.01.26.12;	author jdixon;	state Exp;
branches;
next	1.11;

1.11
date	2006.01.23.17.29.22;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2006.01.17.00.56.04;	author aaron;	state Exp;
branches;
next	1.9;

1.9
date	2005.11.12.15.26.23;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.09.11.33.14;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2003.03.13.09.32.06;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2003.03.13.09.09.29;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.12.14.21.28.08;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2002.04.18.22.17.04;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2002.04.18.22.07.04;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2002.04.18.21.48.36;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2002.04.18.20.18.31;	author espie;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@/* $OpenBSD: cddb.c,v 1.19 2014/01/06 12:38:10 espie Exp $ */
/*
 * Copyright (c) 2002 Marc Espie.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE OPENBSD PROJECT AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENBSD
 * PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/socket.h>
#include <netinet/in.h>
#include <sys/cdio.h>
#include <err.h>
#include <netdb.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <limits.h>
#include <vis.h>
#include "extern.h"

unsigned long	cddb_sum(unsigned long);
void		send_hello(FILE *);
void		send_query(FILE *, int, struct cd_toc_entry *);
int		further_query(FILE *, char *);
int		connect_to(const char *, const char *);
int		parse_connect_to(const char *, const char *);
char *		get_line(FILE *);
char *		get_answer(FILE *);
void		verify_track_names(char **, int, struct cd_toc_entry *);
void		safe_copy(char **, const char *);

unsigned long
cddb_sum(unsigned long v)
{
	unsigned long sum = 0;

	while (v > 0) {
		sum += v % 10;
		v /= 10;
	}
	return (sum);
}

unsigned long
cddb_discid(int n, struct cd_toc_entry *e)
{
	unsigned long sum;
	int i;

	sum = 0;
	for (i =0; i < n; i++)
		sum += cddb_sum(entry2time(e+i));
	return (((sum % 0xff) << 24) |
	    ((entry2time(e+n) - entry2time(e)) << 8) | n);
}

void
send_hello(FILE *cout)
{
	char hostname[HOST_NAME_MAX+1];

	if (gethostname(hostname, sizeof(hostname)) == -1)
		strlcpy(hostname, "unknown", sizeof hostname);
	fprintf(cout, "CDDB HELLO %s %s cdio " VERSION "\r\n",
	    getlogin(), hostname);
	fflush(cout);
}

void
send_query(FILE *f, int n, struct cd_toc_entry *e)
{
	int i;

	fprintf(f, "cddb query %8lx %d", cddb_discid(n, e), n);
	for (i = 0; i < n; i++)
		fprintf(f, " %lu", entry2frames(e+i));
	fprintf(f, " %lu\r\n", (entry2frames(e+n)-entry2frames(e)) /75);
}

#define MAXSIZE 256
char copy_buffer[MAXSIZE];

void
safe_copy(char **p, const char *title)
{
	strnvis(copy_buffer, title, MAXSIZE-1, VIS_TAB|VIS_NL);
	if (*p == NULL)
		*p = strdup(copy_buffer);
	else {
		char *n;

		if (asprintf(&n, "%s%s", *p, copy_buffer) == -1)
			return;
		free(*p);
		*p = n;
	}
}

int
further_query(FILE *cout, char *line)
{
	char *key;
	char *title;

	key = strchr(line, ' ');
	if (!key)
		return 0;
	*key++ = 0;
	title = strchr(key, ' ');
	if (!title)
		return 0;
	*title++ = 0;
	strnvis(copy_buffer, title, MAXSIZE-1, VIS_TAB|VIS_NL);
	printf("%s", copy_buffer);
	strnvis(copy_buffer, line, MAXSIZE-1, VIS_TAB|VIS_NL);
	printf("(%s)\n", copy_buffer);
	fprintf(cout, "CDDB READ %s %s\r\n", line, key);
	fflush(cout);
	return 1;
}


int
connect_to(const char *host, const char *serv)
{
	int s = -1;
	struct addrinfo hints, *res0 = NULL, *res;
	int error;

	memset(&hints, 0, sizeof hints);
	hints.ai_family = PF_UNSPEC;
	hints.ai_socktype = SOCK_STREAM;

	error = getaddrinfo(host, serv, &hints, &res0);
	if (error) {
		warnx("%s", gai_strerror(error));
		return -1;
	}

	for (res = res0; res; res = res->ai_next) {
		s = socket(res->ai_family, res->ai_socktype,
		    res->ai_protocol);
		if (s == -1)
			continue;
		if (connect(s, res->ai_addr, res->ai_addrlen) == -1) {
			close(s);
			s = -1;
			continue;
		}
		break;
	}
	if (s == -1)
		warn("cddb");
	freeaddrinfo(res0);
	return s;
}

int
parse_connect_to(const char *host_port, const char *port)
{
	int s;
	char *last, *host;

	host = (char *)host_port;

	last = strrchr(host_port, ':');
	if (last != 0 && !(last != host && last[-1] == ':')) {
		port = last + 1;
		host = malloc(last - host_port + 1);
		if (!host)
			return -1;
		memcpy(host, host_port, last-host_port);
		host[last-host_port] = 0;
	}
	s = connect_to(host, port);
	if (host != host_port)
		free(host);
	return s;
}

char *
get_line(FILE *cin)
{
	char *line;
	size_t len;

	line = fgetln(cin, &len);
	if (!line)
		return NULL;
	if (len == 0)
		return NULL;
	if (line[len-1] == '\n')
		line[--len] = 0;
	if (len != 0 && line[len-1] == '\r')
		line[--len] = 0;
	if (line[len] != 0)
		return NULL;
	return line;
}

char *
get_answer(FILE *cin)
{
	char *line;

	line = get_line(cin);
	if (!line || *line != '2')
		return NULL;
	else
		return line;
}

void
verify_track_names(char **names, int n, struct cd_toc_entry *e)
{
	int i;

	for (i = 0; i < n; i++) {
		if (names[i] == 0)
			names[i] = strdup(e->control & 4 ? "data" : "audio");
	}
}

char **
cddb(const char *host_port, int n, struct cd_toc_entry *e, char *arg)
{
	int s = -1;
	int s2 = -1;
	FILE *cin = NULL;
	FILE *cout = NULL;
	char *type;
	char *line;
	char **result = NULL;
	int i;
	const char *errstr;

	s = parse_connect_to(host_port, "cddb");
	if (s == -1)
		goto end;
	s2 = dup(s);
	if (s2 == -1)
		goto end;
	cin = fdopen(s, "r");
	if (!cin) {
		warn("cddb: fdopen");
		goto end;
	}
	s = -1;
	cout = fdopen(s2, "w");
	if (!cout) {
		warn("cddb: fdopen");
		goto end;
	}
	s2 = -1;
	line = get_answer(cin);
	if (!line) {
		warnx("cddb: won't talk to us");
		goto end;
	}

	send_hello(cout);
	line = get_answer(cin);
	if (!line) {
		warnx("cddb: problem in hello");
		goto end;
	}

	send_query(cout, n, e);
	fflush(cout);
	line = get_answer(cin);
	if (!line) {
		warnx("cddb: problem in query");
		goto end;
	}
	type = strchr(line, ' ');
	if (!type)
		goto end;
	*type++ = 0;
	/* no match or other issue */
	if (strcmp(line, "202") == 0) {
		printf("cddb: No match in database\n");
		goto end;
	}
	if (strcmp(line, "211") == 0 || strcmp(line, "212") == 0) {
		int number = strtonum(arg, 0, INT_MAX, &errstr);
		if (errstr != NULL && *arg != '\0') {
			warnx("cddb: invalid index");
			goto end;
		}
		if (number == 0) {
			if (strcmp(line, "211") == 0)
				printf("cddb: multiple matches\n");
			else {
				printf("cddb: inexact match\n");
				number = 1;
			}
		}
		if (number == 0) {
			for (i = 1;; i++) {
				line = get_line(cin);
				if (!line || strcmp(line, ".") == 0)
					goto end;
				printf("%d: %s\n", i, line);
			}
		} else {
			int ok = 0;

			for (i = 1;; i++) {
				line = get_line(cin);
				if (!line)
					break;
				if (strcmp(line, ".") == 0)
					break;
				if (i == number)
					ok = further_query(cout, line);
			}
			if (!ok)
				goto end;
		}
	} else if (strcmp(line, "200") != 0 || !further_query(cout, type))
		goto end;
	result = calloc(sizeof(char *), n + 1);
	if (!result)
		goto end;
	for (i = 0; i <= n; i++)
		result[i] = NULL;
	line = get_answer(cin);
	if (!line)
		goto end2;
	for (;;) {
		int k;
		char *end;

		line = get_line(cin);
		if (!line)
			goto end2;
		if (strcmp(line, ".") == 0)
			break;
		if (strncmp(line, "TTITLE", 6) != 0)
			continue;
		line += 6;
		end = strchr(line, '=');
		if (end == NULL)
			continue;
		*end++ = '\0';
		k = strtonum(line, 0, n - 1, &errstr);
		if (errstr != NULL)
			continue;
		safe_copy(&result[k], end);
	}
	fprintf(cout, "QUIT\r\n");
	verify_track_names(result, n, e);
	goto end;
end2:
	free(result);
	result = NULL;
end:
	if (cout)
		fclose(cout);
	if (cin)
		fclose(cin);
	if (s != -1)
		close(s);
	if (s2 != -1)
		close(s2);
	return result;
}

void
free_names(char **names)
{
	int i;

	for (i = 0; names[i]; i++)
		free(names[i]);
	free(names);
}
@


1.19
log
@fgetln may return incomplete lines (Tobias Stoeckmann <tobias@@stoeckmann.org>)

simple solution: error out. This is not a correct cddb answer anyways.
@
text
@d1 1
a1 1
/* $OpenBSD: cddb.c,v 1.18 2014/01/04 15:39:17 tobias Exp $ */
a26 1
#include <sys/param.h>
d36 1
d79 1
a79 1
	char hostname[MAXHOSTNAMELEN];
@


1.18
log
@Properly validate index value received from CDDB server.

ok deraadt@@, millert@@
@
text
@d1 1
a1 1
/* $OpenBSD: cddb.c,v 1.17 2013/03/07 16:54:28 espie Exp $ */
d215 2
@


1.17
log
@fix atrocious code, do socket -> FILE* conversion correctly, with proper
error handling.

okay millert@@, otto@@
@
text
@d1 1
a1 1
/* $OpenBSD: cddb.c,v 1.16 2011/04/06 11:36:26 miod Exp $ */
d348 1
a348 1
		long k;
d359 2
a360 2
		k = strtol(line, &end, 10);
		if (*end++ != '=')
d362 3
a364 1
		if (k >= n)
@


1.16
log
@Avoid using NULL in non-pointer contexts: use 0 for integer values and '\0'
for chars.
@
text
@d1 1
a1 1
/* $OpenBSD: cddb.c,v 1.15 2008/04/27 23:06:40 fgsch Exp $ */
d245 1
d257 3
a264 1
	cout = fdopen(s, "w");
d266 1
d271 1
d379 2
@


1.15
log
@o if no argument is passed to cddbinfo, treat it as 0 in order to print
  the list in case of multiple/inexact matches
o if the argument to cddb is invalid, do not exit, just print and error
  and ignore the command
espie@@ ok.
@
text
@d1 1
a1 1
/* $OpenBSD: cddb.c,v 1.14 2007/09/10 16:31:35 cloder Exp $ */
d298 1
a298 1
		if (errstr != NULL && *arg != NULL) {
@


1.14
log
@Make sure we don't skip the code which sends the QUIT command to the CDDB
server and validates the returned track names. Unreachable code spotted
by lint.
OK krw@@, deraadt@@, espie@@
@
text
@d1 1
a1 1
/* $OpenBSD: cddb.c,v 1.13 2007/09/02 15:19:31 deraadt Exp $ */
d298 4
a301 2
		if (errstr != NULL)
			errx(1, "%s: %s", errstr, arg);
@


1.13
log
@use calloc() to avoid malloc(n * m) overflows; checked by djm canacar jsg
@
text
@d1 1
a1 1
/* $OpenBSD: cddb.c,v 1.12 2007/05/01 01:26:12 jdixon Exp $ */
d348 1
a348 1
			goto end;
@


1.12
log
@use strtonum; ok millert@@
@
text
@d1 1
a1 1
/* $OpenBSD: cddb.c,v 1.11 2006/01/23 17:29:22 millert Exp $ */
d332 1
a332 1
	result = malloc(sizeof(char *) * (n + 1));
@


1.11
log
@Include <sys/param.h> instead of <sys/types.h> so we get MAXHOSTNAMELEN
@
text
@d1 1
a1 1
/* $OpenBSD: cddb.c,v 1.10 2006/01/17 00:56:04 aaron Exp $ */
d251 1
d297 3
a299 1
		int number = atoi(arg);
@


1.10
log
@Fix malloc calculation to avoid memory bounds error.  deraadt@@ ok
@
text
@d1 1
a1 1
/* $OpenBSD: cddb.c,v 1.9 2005/11/12 15:26:23 deraadt Exp $ */
d27 1
a27 1
#include <sys/types.h>
@


1.9
log
@more asprintf; ok dhill@@mindcry.org
@
text
@d1 1
a1 1
/* $OpenBSD: cddb.c,v 1.8 2003/06/09 11:33:14 espie Exp $ */
d329 1
a329 1
	result = malloc(sizeof(char *) * n+1);
@


1.8
log
@Protect all get_line calls against null pointers.
Problem pointed out by Pedro Bastos, thanks Pedro.
@
text
@d1 1
a1 1
/* $OpenBSD: cddb.c,v 1.7 2003/03/13 09:32:06 espie Exp $ */
d109 3
a111 3
		size_t len = strlen(*p) + strlen(copy_buffer) + 1;
		char *n = malloc(len);
		if (n == NULL)
a112 1
		snprintf(n, len, "%s%s", *p, copy_buffer);
@


1.7
log
@my style: length is size_t, not int.
@
text
@d1 1
a1 1
/* $OpenBSD: cddb.c,v 1.6 2003/03/13 09:09:29 deraadt Exp $ */
d225 1
a225 1
	if (*line != '2')
d309 1
a309 1
				if (strcmp(line, ".") == 0)
@


1.6
log
@lots of sprintf -> snprintf and strcpy -> strlcpy; checked by tedu
@
text
@d1 1
a1 1
/* $OpenBSD: cddb.c,v 1.5 2002/12/14 21:28:08 espie Exp $ */
d109 1
a109 1
		int len = strlen(*p) + strlen(copy_buffer) + 1;
@


1.5
log
@handle multiline replies from the server.
this actually happens on the 3.2 audio CD.
ok millert@@
@
text
@d1 1
a1 1
/* $OpenBSD: cddb.c,v 1.4 2002/04/18 22:17:04 espie Exp $ */
d82 1
a82 1
		strcpy(hostname, "unknown");
d109 2
a110 1
		char *n = malloc(strlen(*p) + strlen(copy_buffer) + 1);
d113 1
a113 2
		strcpy(n, *p);
		strcat(n, copy_buffer);
@


1.4
log
@Reuse cddb code to support FreeBSD new cdid command.
(who knows ? scripts might use it).
ok fgs@@, pval@@
@
text
@d1 1
a1 1
/* $OpenBSD: cddb.c,v 1.3 2002/04/18 22:07:04 espie Exp $ */
d49 1
a49 1
char *		safe_copy(const char *);
d102 2
a103 2
char *
safe_copy(const char *title)
d106 11
a116 1
	return strdup(copy_buffer);
d355 1
a355 1
		result[k] = safe_copy(end);
@


1.3
log
@remove extra spaces, fix rcsid (noticed by millert)
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a39 1
unsigned long	cddb_discid(int, struct cd_toc_entry *);
@


1.2
log
@KNF
@
text
@d1 1
a1 1
/* $OpenBSD $*/
d40 8
a47 8
unsigned long 	cddb_discid(int, struct cd_toc_entry *);
unsigned long 	cddb_sum(unsigned long);
void 		send_hello(FILE *);
void 		send_query(FILE *, int, struct cd_toc_entry *);
int 		further_query(FILE *, char *);
int 		connect_to(const char *, const char *);
int 		parse_connect_to(const char *, const char *);
char * 		get_line(FILE *);
d49 2
a50 2
void 		verify_track_names(char **, int, struct cd_toc_entry *);
char * 		safe_copy(const char *);
d64 1
a64 1
unsigned long 
d71 1
a71 1
	for (i =0; i < n; i++) 
d73 1
a73 1
	return (((sum % 0xff) << 24) | 
d84 1
a84 1
	fprintf(cout, "CDDB HELLO %s %s cdio " VERSION "\r\n", 
d89 1
a89 1
void 
d233 1
a233 1
char ** 
@


1.1
log
@Add cddb support.
@
text
@d356 1
a356 1
	    fclose(cout);
d358 1
a358 1
	    fclose(cin);
d360 1
a360 1
	    close(s);
@

