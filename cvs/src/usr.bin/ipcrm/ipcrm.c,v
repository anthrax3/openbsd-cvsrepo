head	1.12;
access;
symbols
	OPENBSD_6_0:1.12.0.6
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.4
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.10.0.34
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.38
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.36
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.32
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.30
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.28
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.26
	OPENBSD_5_0:1.10.0.24
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.22
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.20
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.16
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.18
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.14
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.12
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.10
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.8
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.6
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.4
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.2
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.9.0.4
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.2
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.4.0.6
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.3.0.18
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.16
	OPENBSD_2_8:1.3.0.14
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.12
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.10
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.8
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.6
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.4
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2015.07.26.22.17.34;	author chl;	state Exp;
branches;
next	1.11;
commitid	t9TTOyvBPwBfhN5P;

1.11
date	2015.04.18.18.28.37;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	6b2lLILbgCR1fvia;

1.10
date	2005.12.19.19.13.50;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2005.02.22.14.56.21;	author jmc;	state Exp;
branches;
next	1.8;

1.8
date	2004.09.14.22.25.16;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2004.06.29.17.05.41;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	2003.10.06.07.31.24;	author fgsch;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.10.22.20.47;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.16.21.27.47;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.09.11.07.59.01;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.34.35;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.25;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.25;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.12
log
@fix format string

ok deraadt@@
@
text
@/*	$OpenBSD: ipcrm.c,v 1.11 2015/04/18 18:28:37 deraadt Exp $*/

/*
 * Copyright (c) 1994 Adam Glass
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Adam Glass.
 * 4. The name of the Author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY Adam Glass ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL Adam Glass BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <sys/sem.h>
#include <sys/shm.h>
#include <stdio.h>
#include <unistd.h>
#include <limits.h>
#include <stdlib.h>
#include <ctype.h>
#include <err.h>
#include <signal.h>

#define IPC_TO_STR(x) (x == 'Q' ? "msq" : (x == 'M' ? "shm" : "sem"))
#define IPC_TO_STRING(x) (x == 'Q' ? "message queue" : \
	(x == 'M' ? "shared memory segment" : "semaphore"))

int signaled;

void	usage(void);
int	msgrm(key_t, int);
int	shmrm(key_t, int);
int	semrm(key_t, int);
void	not_configured(int);

void
usage(void)
{
	extern char *__progname;
	fprintf(stderr, "usage: %s [-M shmkey] [-m shmid] [-Q msgkey]\n"
			"         [-q msqid] [-S semkey] [-s semid] ...\n",
		__progname);
	exit(1);
}

int
msgrm(key_t key, int id)
{
	if (key) {
		id = msgget(key, 0);
		if (id == -1)
			return (-1);
	}
	return (msgctl(id, IPC_RMID, NULL));
}

int
shmrm(key_t key, int id)
{
	if (key) {
		id = shmget(key, 0, 0);
		if (id == -1)
			return (-1);
	}
	return (shmctl(id, IPC_RMID, NULL));
}

int
semrm(key_t key, int id)
{
	union semun arg;

	if (key) {
		id = semget(key, 0, 0);
		if (id == -1)
			return (-1);
	}
	return (semctl(id, 0, IPC_RMID, arg));
}

/* ARGSUSED */
void
not_configured(int signo)
{
	signaled++;
}

int
main(int argc, char *argv[])
{
	int c, result, errflg, target_id;
	const char *errstr;
	key_t target_key;

	errflg = 0;
	signal(SIGSYS, not_configured);
	while ((c = getopt(argc, argv, ":q:m:s:Q:M:S:")) != -1) {
		signaled = 0;
		switch (c) {
		case 'q':
		case 'm':
		case 's':
			target_id = strtonum(optarg, 0, INT_MAX, &errstr);
			if (errstr)
				errx(1, "-%c %s: %s\n", c, optarg, errstr);
			if (c == 'q')
				result = msgrm(0, target_id);
			else if (c == 'm')
				result = shmrm(0, target_id);
			else
				result = semrm(0, target_id);
			if (result < 0) {
				errflg++;
				if (!signaled)
					warn("%sid(%d)",
					    IPC_TO_STR(toupper(c)), target_id);
				else
					warnx("%ss are not configured in the running kernel",
					    IPC_TO_STRING(toupper(c)));
			}
			break;
		case 'Q':
		case 'M':
		case 'S':
			target_key = atol(optarg);
			if (target_key == IPC_PRIVATE) {
				warnx("can't remove private %ss", IPC_TO_STRING(c));
				continue;
			}
			if (c == 'Q')
				result = msgrm(target_key, 0);
			else if (c == 'M')
				result = shmrm(target_key, 0);
			else
				result = semrm(target_key, 0);
			if (result < 0) {
				errflg++;
				if (!signaled)
					warn("%skey(%ld)", IPC_TO_STR(c),
					    target_key);
				else
					warnx("%ss are not configured in the running kernel",
					    IPC_TO_STRING(c));
			}
			break;
		case ':':
			warnx("option -%c requires an argument", optopt);
			usage();
		default:
			warnx("unrecognized option: -%c", optopt);
			usage();
		}
	}

	if (optind != argc) {
		warnx("unknown argument: %s", argv[optind]);
		usage();
	}
	exit(errflg);
}
@


1.11
log
@Convert many atoi() calls to strtonum(), adding range checks and failure
handling along the way.
Reviews by Brendan MacDonell, Jeremy Devenport, florian, doug, millert
@
text
@d1 1
a1 1
/*	$OpenBSD: ipcrm.c,v 1.10 2005/12/19 19:13:50 millert Exp $*/
d129 1
a129 1
				errx(1, "-%c %s: %s\n", c, optarg, &errstr);
@


1.10
log
@fix indentation
@
text
@d1 1
a1 1
/*	$OpenBSD: ipcrm.c,v 1.9 2005/02/22 14:56:21 jmc Exp $*/
d42 1
d116 1
d127 3
a129 1
			target_id = atoi(optarg);
@


1.9
log
@sort options; sync usage();
@
text
@d1 1
a1 1
/*	$OpenBSD: ipcrm.c,v 1.8 2004/09/14 22:25:16 deraadt Exp $*/
d87 1
a87 1
	    }
@


1.8
log
@ARGSUSED before signal handler with unused signo
@
text
@d1 1
a1 1
/*	$OpenBSD: ipcrm.c,v 1.7 2004/06/29 17:05:41 mickey Exp $*/
d63 2
a64 2
	fprintf(stderr, "usage: %s [ [-q msqid] [-m shmid] [-s semid]\n"
			"         [-Q msgkey] [-M shmkey] [-S semkey] ...]\n",
@


1.7
log
@use warx instea of fprintf
@
text
@d1 1
a1 1
/*	$OpenBSD: ipcrm.c,v 1.6 2003/10/06 07:31:24 fgsch Exp $*/
d104 1
@


1.6
log
@better output on error; ok henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipcrm.c,v 1.4 2002/02/16 21:27:47 millert Exp $*/
d62 4
a65 2
        fprintf(stderr, "usage: ipcrm [ [-q msqid] [-m shmid] [-s semid]\n");
	fprintf(stderr, "        [-Q msgkey] [-M shmkey] [-S semkey] ...]\n");
d166 1
a166 1
			fprintf(stderr, "option -%c requires an argument\n", optopt);
d169 1
a169 1
			fprintf(stderr, "unrecognized option: -%c\n", optopt);
d175 1
a175 1
		fprintf(stderr, "unknown argument: %s\n", argv[optind]);
@


1.5
log
@mostly ansi cleanup; pval ok
@
text
@d132 1
a132 1
					warn("%sid(%d): ",
d156 1
a156 1
					warn("%skey(%ld): ", IPC_TO_STR(c),
@


1.4
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipcrm.c,v 1.3 1997/09/11 07:59:01 deraadt Exp $*/
d60 1
a60 1
usage()
d68 1
a68 3
msgrm(key, id)
	key_t key;
	int id;
d79 1
a79 3
shmrm(key, id)
	key_t key;
	int id;
d90 1
a90 3
semrm(key, id)
	key_t key;
	int id;
d103 1
a103 2
not_configured(sig)
	int sig;
d109 1
a109 3
main(argc, argv)
	int argc;
	char *argv[];
@


1.3
log
@fix one warnx, -Wall the rest
@
text
@d1 1
a1 1
/*	$OpenBSD: ipcrm.c,v 1.2 1996/06/26 05:34:35 deraadt Exp $*/
d53 5
a57 5
void	usage __P((void));
int	msgrm __P((key_t, int));
int	shmrm __P((key_t, int));
int	semrm __P((key_t, int));
void	not_configured __P((int));
@


1.2
log
@rcsid
@
text
@d1 2
a2 1
/* * $OpenBSD: ipcrm.c,v 1.1.1.1 1995/10/18 08:45:25 deraadt Exp $*/
a34 4
#include <stdio.h>
#include <unistd.h>
#include <err.h>
#include <signal.h>
d40 6
d53 8
a60 1
void usage()
d67 22
a88 74
int msgrm(key, id)
    key_t key;
    int id;
{
    if (key) {
	id = msgget(key, 0);
	if (id == -1)
	    return -1;
    }
    return msgctl(id, IPC_RMID, NULL);    
}

int shmrm(key, id)
    key_t key;
    int id;
{
    if (key) {
	id = shmget(key, 0, 0);
	if (id == -1)
	    return -1;
    }
    return shmctl(id, IPC_RMID, NULL);
}

int semrm(key, id)
    key_t key;
    int id;
{
    union semun arg;

    if (key) {
	id = semget(key, 0, 0);
	if (id == -1)
	    return -1;
    }
    return semctl(id, 0, IPC_RMID, arg);
}

void not_configured()
{
    signaled++;
}
    
int main(argc, argv)
    int argc;
    char *argv[];

{
    int c, result, errflg, target_id;
    key_t target_key;

    errflg = 0;
    signal(SIGSYS, not_configured);
    while ((c = getopt(argc, argv, ":q:m:s:Q:M:S:")) != -1) {

	signaled = 0;
	switch (c) {
	case 'q':
	case 'm':
	case 's':
	    target_id = atoi(optarg);
	    if (c == 'q')
		result = msgrm(0, target_id);
	    else if (c == 'm')
		result = shmrm(0, target_id);
	    else
		result = semrm(0, target_id);
	    if (result < 0) {
		errflg++;
		if (!signaled)
		    warn("%sid(%d): ", IPC_TO_STR(toupper(c)), target_id);
		else
		    warnx("%ss are not configured in the running kernel",
			  IPC_TO_STRING(toupper(c)));
d90 89
a178 30
	    break;
	case 'Q':
	case 'M':
	case 'S':
	    target_key = atol(optarg);
	    if (target_key == IPC_PRIVATE) {
		warnx("can't remove private %ss", IPC_TO_STRING(c));
		continue;
	    }
	    if (c == 'Q')
		result = msgrm(target_key, 0);
	    else if (c == 'M')
		result = shmrm(target_key, 0);
	    else
		result = semrm(target_key, 0);
	    if (result < 0) {
		errflg++;
		if (!signaled)
		    warn("%key(%ld): ", IPC_TO_STR(c), target_key);
		else
		    warnx("%ss are not configured in the running kernel",
			  IPC_TO_STRING(c));
	    }
	    break;
	case ':':
	    fprintf(stderr, "option -%c requires an argument\n", optopt);
	    usage();
	case '?':
	    fprintf(stderr, "unrecognized option: -%c\n", optopt);
	    usage();
a179 1
    }
d181 5
a185 5
    if (optind != argc) {
	    fprintf(stderr, "unknown argument: %s\n", argv[optind]);
	    usage();
    }
    exit(errflg);
a186 1
    
@


1.1
log
@Initial revision
@
text
@d1 1
a31 1
 * $Id: ipcrm.c,v 1.4 1994/08/07 18:27:42 glass Exp $
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
