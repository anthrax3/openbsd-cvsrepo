head	1.16;
access;
symbols
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.16.0.2
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.15.0.2
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.13.0.6
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.2
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.12.0.6
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.4
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.11.0.2
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.9.0.12
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.10
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.8
	OPENBSD_5_0:1.9.0.6
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.4
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.2
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.7.0.10
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.6
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.4
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.2
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.5.0.2
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.4.0.2
	OPENBSD_4_1_BASE:1.4;
locks; strict;
comment	@ * @;


1.16
date	2016.04.05.21.57.58;	author sthen;	state Exp;
branches;
next	1.15;
commitid	6YnMdqG81IPM34fu;

1.15
date	2015.12.09.17.52.24;	author mmcc;	state Exp;
branches;
next	1.14;
commitid	jVNYgLkiKaQCoaAB;

1.14
date	2015.10.18.22.37.30;	author benno;	state Exp;
branches;
next	1.13;
commitid	3qJVcdUEwIkeEQLS;

1.13
date	2015.01.16.06.40.06;	author deraadt;	state Exp;
branches;
next	1.12;
commitid	Uu5nFG3wCl0LACBb;

1.12
date	2013.11.25.18.02.50;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2013.06.02.14.11.38;	author florian;	state Exp;
branches;
next	1.10;

1.10
date	2013.06.01.18.47.55;	author reyk;	state Exp;
branches;
next	1.9;

1.9
date	2010.04.02.21.20.49;	author sthen;	state Exp;
branches;
next	1.8;

1.8
date	2010.01.09.02.37.32;	author claudio;	state Exp;
branches;
next	1.7;

1.7
date	2007.10.10.13.23.40;	author claudio;	state Exp;
branches;
next	1.6;

1.6
date	2007.09.13.23.32.39;	author cloder;	state Exp;
branches;
next	1.5;

1.5
date	2007.04.13.15.31.02;	author claudio;	state Exp;
branches;
next	1.4;

1.4
date	2006.12.12.14.18.05;	author reyk;	state Exp;
branches;
next	1.3;

1.3
date	2006.12.12.11.43.50;	author reyk;	state Exp;
branches;
next	1.2;

1.2
date	2006.12.12.11.37.55;	author reyk;	state Exp;
branches;
next	1.1;

1.1
date	2006.12.11.23.10.10;	author reyk;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Use SERVER_NAME for bgplg's hostname (displayed on the page), this is passed
from the webserver so is more likely to be the correct name to expose, and is
easier to adjust if needed.  OK claudio@@ florian@@
@
text
@/*	$OpenBSD: bgplg.c,v 1.15 2015/12/09 17:52:24 mmcc Exp $	*/

/*
 * Copyright (c) 2005, 2006 Reyk Floeter <reyk@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/stat.h>

#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <string.h>
#include <unistd.h>
#include <limits.h>
#include <ctype.h>
#include <errno.h>
#include <fcntl.h>
#include <err.h>

#include "bgplg.h"

#define INC_STYLE	"/conf/bgplg.css"
#define INC_HEAD	"/conf/bgplg.head"
#define INC_FOOT	"/conf/bgplg.foot"

#define BGPDSOCK	"/run/bgpd.rsock"
#define BGPCTL		"/bin/bgpctl", "-s", BGPDSOCK
#define PING		"/bin/ping"
#define TRACEROUTE	"/bin/traceroute"
#define PING6		"/bin/ping6"
#define TRACEROUTE6	"/bin/traceroute6"
#define CONTENT_TYPE	"text/html"

static struct cmd cmds[] = CMDS;

char		 *lg_getenv(const char *, int *);
void		  lg_urldecode(char *);
char		**lg_arg2argv(char *, int *);
char		**lg_argextra(char **, int, struct cmd *);
char		 *lg_getarg(const char *, char *, int);
int		  lg_incl(const char *);

void
lg_urldecode(char *str)
{
	size_t i, c, len;
	char code[3];
	long result;

	if (str && *str) {
		len = strlen(str);
		i = c = 0;
		while (i < len) {
			if (str[i] == '%' && i <= (len - 2)) {
				if (isxdigit((unsigned char)str[i + 1]) &&
				    isxdigit((unsigned char)str[i + 2])) {
					code[0] = str[i + 1];
					code[1] = str[i + 2];
					code[2] = 0;
					result = strtol(code, NULL, 16);
					/* Replace NUL chars with a space */
					if (result == 0)
						result = ' ';
					str[c++] = result;
					i += 3;
				} else {
					str[c++] = '%';
					i++;
				}
			} else if (str[i] == '+') {
				str[i] = ' ';
			} else {
				if (c != i)
					str[c] = str[i];
				c++;
				i++;
			}
		}
		str[c] = 0x0;
	}
}

char *
lg_getenv(const char *name, int *lenp)
{
	size_t len;
	u_int i;
	char *ptr;

	if ((ptr = getenv(name)) == NULL)
		return (NULL);

	lg_urldecode(ptr);

	if (!(len = strlen(ptr)))
		return (NULL);

	if (lenp != NULL)
		*lenp = len;

#define allowed_in_string(_x)                                           \
	(isalnum((unsigned char)_x) || strchr("-_.:/= ", _x))

	for (i = 0; i < len; i++) {
		if (ptr[i] == '&')
			ptr[i] = '\0';
		if (!allowed_in_string(ptr[i])) {
			printf("invalid character in input\n");
			return (NULL);
		}
	}

	return (ptr);
#undef allowed_in_string
}

char *
lg_getarg(const char *name, char *arg, int len)
{
	char *ptr = arg;
	size_t namelen, ptrlen;
	int i;

	namelen = strlen(name);

	for (i = 0; i < len; i++) {
		if (arg[i] == '\0')
			continue;
		ptr = arg + i;
		ptrlen = strlen(ptr);
		if (namelen >= ptrlen)
			continue;
		if (strncmp(name, ptr, namelen) == 0)
			return (ptr + namelen);
	}

	return (NULL);
}

char **
lg_arg2argv(char *arg, int *argc)
{
	char **argv, *ptr = arg;
	size_t len;
	u_int i, c = 1;

	len = strlen(arg);

	/* Count elements */
	for (i = 0; i < (len - 1); i++) {
		if (isspace((unsigned char)arg[i])) {
			/* filter out additional options */
			if (arg[i + 1] == '-') {
				printf("invalid input\n");
				return (NULL);
			}
			arg[i] = '\0';
			c++;
		}
	}

	/* Generate array */
	if ((argv = calloc(c + 1, sizeof(char *))) == NULL) {
		printf("fatal error: %s\n", strerror(errno));
		return (NULL);
	}

	argv[c] = NULL;
	*argc = c;

	/* Fill array */
	for (i = c = 0; i < (len - 1); i++) {
		if (arg[i] == '\0' || i == 0) {
			if (i != 0)
				ptr = &arg[i + 1];
			argv[c++] = ptr;
		}
	}

	return (argv);
}

char **
lg_argextra(char **argv, int argc, struct cmd *cmdp)
{
	char **new_argv;
	int i, c = 0;

	/* Count elements */
	for (i = 0; cmdp->earg[i] != NULL; i++)
		c++;

	/* Generate array */
	if ((new_argv = calloc(c + argc + 1, sizeof(char *))) == NULL) {
		printf("fatal error: %s\n", strerror(errno));
		return (NULL);
	}

	/* Fill array */
	for (i = c = 0; cmdp->earg[i] != NULL; i++)
		new_argv[c++] = cmdp->earg[i];

	/* Append old array */
	for (i = 0; i < argc; i++)
		new_argv[c++] = argv[i];

	new_argv[c] = NULL;

	free(argv);

	return (new_argv);
}

int
lg_incl(const char *file)
{
	char buf[BUFSIZ];
	int fd, len;

	if ((fd = open(file, O_RDONLY)) == -1)
		return (errno);

	do {
		len = read(fd, buf, sizeof(buf));
		fwrite(buf, len, 1, stdout);
	} while(len == BUFSIZ);

	close(fd);
	return (0);
}

int
main(void)
{
	char *query, *myname, *self, *cmd = NULL, *req;
	char **argv = NULL;
	int ret = 1, argc = 0, query_length = 0;
	struct stat st;
	u_int i;
	struct cmd *cmdp = NULL;

	if (pledge("stdio rpath proc exec", NULL) == -1)
		err(1, "pledge");

	if ((myname = lg_getenv("SERVER_NAME", NULL)) == NULL)
		return (1);

	printf("Content-Type: %s\n"
	    "Cache-Control: no-cache\n\n"
	    "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n"
	    "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" "
	    "\"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n"
	    "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n"
	    "<head>\n"
	    "<title>%s: %s</title>\n",
	    CONTENT_TYPE, NAME, myname);
	if (stat(INC_STYLE, &st) == 0) {
		printf("<style type='text/css'><!--\n");
		lg_incl(INC_STYLE);
		printf("--></style>\n");
	}
	if (stat(INC_HEAD, &st) != 0 || lg_incl(INC_HEAD) != 0) {
		printf("</head>\n"
		    "<body>\n");
	}

	printf("<h1>%s: %s</h1>\n", NAME, myname);
	printf("<h2>%s</h2>\n", BRIEF);

	/* print a form with possible options */
	if ((self = lg_getenv("SCRIPT_NAME", NULL)) == NULL) {
		printf("fatal error: invalid request\n");
		goto err;
	}
	if ((query = lg_getenv("QUERY_STRING", &query_length)) != NULL)
		cmd = lg_getarg("cmd=", query, query_length);
	printf(
	    "<form action='%s'>\n"
	    "<div class=\"command\">\n"
	    "<select name='cmd'>\n",
	    self);
	for (i = 0; cmds[i].name != NULL; i++) {
		if (!lg_checkperm(&cmds[i]))
			continue;

		if (cmd != NULL && strcmp(cmd, cmds[i].name) == 0)
			printf("<option value='%s' selected='selected'>%s"
			    "</option>\n",
			    cmds[i].name, cmds[i].name);
		else
			printf("<option value='%s'>%s</option>\n",
			    cmds[i].name, cmds[i].name);
	}
	printf("</select>\n"
	    "<input type='text' name='req'/>\n"
	    "<input type='submit' value='submit'/>\n"
	    "</div>\n"
	    "</form>\n"
	    "<pre>\n");
	fflush(stdout);

#ifdef DEBUG
	if (close(2) == -1 || dup2(1, 2) == -1)
#else
	if (close(2) == -1)
#endif
	{
		printf("fatal error: %s\n", strerror(errno));
		goto err;
	}

	if (query == NULL)
		goto err;
	if (cmd == NULL) {
		printf("unspecified command\n");
		goto err;
	}
	if ((req = lg_getarg("req=", query, query_length)) != NULL) {
		/* Could be NULL */
		argv = lg_arg2argv(req, &argc);
	}

	for (i = 0; cmds[i].name != NULL; i++) {
		if (strcmp(cmd, cmds[i].name) == 0) {
			cmdp = &cmds[i];
			break;
		}
	}

	if (cmdp == NULL) {
		printf("invalid command: %s\n", cmd);
		goto err;
	}
	if (argc > cmdp->maxargs) {
		printf("superfluous argument(s): %s %s\n",
		    cmd, cmdp->args ? cmdp->args : "");
		goto err;
	}
	if (argc < cmdp->minargs) {
		printf("missing argument(s): %s %s\n", cmd, cmdp->args);
		goto err;
	}

	if (cmdp->func != NULL) {
		ret = cmdp->func(cmds, argv);
	} else {
		if ((argv = lg_argextra(argv, argc, cmdp)) == NULL)
			goto err;
		ret = lg_exec(cmdp->earg[0], argv);
	}
	if (ret != 0)
		printf("\nfailed%s\n", ret == 127 ? ": file not found" : ".");
	else
		printf("\nsuccess.\n");

 err:
	fflush(stdout);

	free(argv);

	printf("</pre>\n");

	if (stat(INC_FOOT, &st) != 0 || lg_incl(INC_FOOT) != 0)
		printf("<hr/>\n");

	printf("<div class='footer'>\n"
	    "<small>%s - %s<br/>Copyright (c) %s</small>\n"
	    "</div>\n"
	    "</body>\n"
	    "</html>\n", NAME, BRIEF, COPYRIGHT);

	return (ret);
}
@


1.15
log
@Remove NULL-checks before free(). ok tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bgplg.c,v 1.14 2015/10/18 22:37:30 benno Exp $	*/
d248 1
a248 1
	char *query, *self, *cmd = NULL, *req;
a249 1
	char myname[HOST_NAME_MAX+1];
d258 1
a258 1
	if (gethostname(myname, sizeof(myname)) != 0)
@


1.14
log
@pledge bgplg(8).
ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: bgplg.c,v 1.13 2015/01/16 06:40:06 deraadt Exp $	*/
d222 1
a222 2
	if (argv != NULL)
		free(argv);
d373 1
a373 2
	if (argv != NULL)
		free(argv);
@


1.13
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: bgplg.c,v 1.12 2013/11/25 18:02:50 deraadt Exp $	*/
d31 1
d256 3
@


1.12
log
@variety of unsigned char casts (or conversions) for ctype
ok krw
@
text
@d1 1
a1 1
/*	$OpenBSD: bgplg.c,v 1.11 2013/06/02 14:11:38 florian Exp $	*/
d19 1
a20 2
#include <sys/types.h>
#include <sys/param.h>
d27 1
d250 1
a250 1
	char myname[MAXHOSTNAMELEN];
@


1.11
log
@move bgplg and slowcgi sockets to /var/www/run
input reyk@@, guenther@@
"move fast" deraadt@@
OK naddy@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bgplg.c,v 1.10 2013/06/01 18:47:55 reyk Exp $	*/
d67 2
a68 2
				if (isxdigit(str[i + 1]) &&
				    isxdigit(str[i + 2])) {
d114 1
a114 1
	(isalnum(_x) || strchr("-_.:/= ", _x))
d126 1
d163 1
a163 1
		if (isspace(arg[i])) {
@


1.10
log
@Update my email address to reyk@@openbsd.org, especially for the HTML output.
@
text
@d1 1
a1 1
/*	$OpenBSD: bgplg.c,v 1.9 2010/04/02 21:20:49 sthen Exp $	*/
d38 1
a38 1
#define BGPDSOCK	"/logs/bgpd.rsock"
@


1.9
log
@Support ping6 and traceroute6 in bgplg and bgplgsh.
From Rod Whitworth, ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bgplg.c,v 1.8 2010/01/09 02:37:32 claudio Exp $	*/
d4 1
a4 1
 * Copyright (c) 2005, 2006 Reyk Floeter <reyk@@vantronix.net>
@


1.8
log
@Plug fd leak in lg_incl(). Fix by Igor Zinovik, OK beck@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bgplg.c,v 1.7 2007/10/10 13:23:40 claudio Exp $	*/
d42 2
@


1.7
log
@Limit the allowed characters in a request to [a-zA-Z0-9-_.:/= ] everything
else will cause an "invalid character in input" error.
Fixes xss issue noticed by Anton Karpov.
OK henning@@, sthen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bgplg.c,v 1.6 2007/09/13 23:32:39 cloder Exp $	*/
d238 1
@


1.6
log
@Fix missing free statement due to extraneous semicolon spotted by a
modified lint.
@
text
@d1 1
a1 1
/*	$OpenBSD: bgplg.c,v 1.5 2007/04/13 15:31:02 claudio Exp $	*/
d112 1
a112 2
	((isalnum(_x) || isprint(_x)) &&				\
	(_x != '%' && _x != '\\' && _x != ';' && _x != '|'))
d115 2
a120 2
		if (ptr[i] == '&')
			ptr[i] = '\0';
@


1.5
log
@spaces
@
text
@d1 1
a1 1
/*	$OpenBSD: bgplg.c,v 1.4 2006/12/12 14:18:05 reyk Exp $	*/
d367 1
a367 1
	if (argv != NULL);
@


1.4
log
@print the hostname in the HTML title.
@
text
@d1 1
a1 1
/*	$OpenBSD: bgplg.c,v 1.3 2006/12/12 11:43:50 reyk Exp $	*/
d287 1
a287 1
"<div class=\"command\">\n"
@


1.3
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: bgplg.c,v 1.2 2006/12/12 11:37:55 reyk Exp $	*/
d42 1
d253 4
a256 1
	printf("Content-Type: text/html\n"
d263 2
a264 1
	    "<title>bgplg</title>\n");
a273 3

	if (gethostname(myname, sizeof(myname)) != 0)
		goto err;
@


1.2
log
@Valid XHTML 1.1! (according to http://validator.w3.org/)
@
text
@d1 1
a1 1
/*	$OpenBSD: bgplg.c,v 1.1 2006/12/11 23:10:10 reyk Exp $	*/
d64 1
a64 1
				if (isxdigit(str[i + 1]) && 
d111 2
a112 2
        ((isalnum(_x) || isprint(_x)) &&				\
        (_x != '%' && _x != '\\' && _x != ';' && _x != '|'))
@


1.1
log
@import a looking glass for bgpd(8) (CGI web interface), see the
bgplg(8) and bgplgsh(8) manpages for installation and usage
instructions.

this has been tested by various users and on openbgp route servers in
the DE-CIX.

ok deraadt@@ henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d254 4
a257 1
	    "<html>\n"
d283 3
a285 1
	printf("<form action='%s'>\n"
d303 1
@

