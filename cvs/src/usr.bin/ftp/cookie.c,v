head	1.7;
access;
symbols
	OPENBSD_6_2:1.7.0.2
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.7.0.4
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.5.0.30
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.26
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.28
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.22
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.24
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.20
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.18
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.16
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.14
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.12
	OPENBSD_5_0:1.5.0.10
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.8
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.6
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.4
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.4.0.2
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.3.0.2
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.2.0.2
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.1.0.2
	OPENBSD_4_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2017.01.21.08.33.07;	author krw;	state Exp;
branches;
next	1.6;
commitid	l2fu419jw6ah0BY2;

1.6
date	2016.12.28.17.48.04;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	UIBQPJAx3NVjVFnr;

1.5
date	2009.05.05.19.35.30;	author martynas;	state Exp;
branches;
next	1.4;

1.4
date	2008.12.07.21.12.07;	author cloder;	state Exp;
branches;
next	1.3;

1.3
date	2008.06.25.21.15.19;	author martynas;	state Exp;
branches;
next	1.2;

1.2
date	2007.10.08.18.39.37;	author pyr;	state Exp;
branches;
next	1.1;

1.1
date	2007.06.13.13.52.26;	author pyr;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Nuke whitespace foolish enough to expose itself during the great
"warning:" rectification.
@
text
@/*	$OpenBSD: cookie.c,v 1.6 2016/12/28 17:48:04 deraadt Exp $	*/

/*
 * Copyright (c) 2007 Pierre-Yves Ritschard <pyr@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef NOSSL

#include <sys/types.h>
#include <sys/queue.h>

#include <err.h>
#include <errno.h>
#include <fnmatch.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>

#include "ftp_var.h"

struct cookie {
	TAILQ_ENTRY(cookie)	 entry;
	TAILQ_ENTRY(cookie)	 tempentry;
	u_int8_t		 flags;
#define F_SECURE		 0x01
#define F_TAILMATCH		 0x02
#define F_NOEXPIRY		 0x04
#define F_MATCHPATH		 0x08
	time_t			 expires;
	char			*domain;
	char			*path;
	char			*key;
	char			*val;
};
TAILQ_HEAD(cookiejar, cookie);

typedef enum {
	DOMAIN = 0, TAILMATCH = 1, PATH = 2, SECURE = 3,
	EXPIRES = 4, NAME = 5, VALUE = 6, DONE = 7
} field_t;

static struct cookiejar jar;

void
cookie_load(void)
{
	field_t		 field;
	size_t		 len;
	time_t		 date;
	char		*line;
	char		*lbuf;
	char		*param;
	const char	*estr;
	FILE		*fp;
	struct cookie	*ck;

	if (cookiefile == NULL)
		return;

	TAILQ_INIT(&jar);
	fp = fopen(cookiefile, "r");
	if (fp == NULL)
		err(1, "cannot open cookie file %s", cookiefile);
	date = time(NULL);
	lbuf = NULL;
	while ((line = fgetln(fp, &len)) != NULL) {
		if (line[len - 1] == '\n') {
			line[len - 1] = '\0';
			--len;
		} else {
			if ((lbuf = malloc(len + 1)) == NULL)
				err(1, NULL);
			memcpy(lbuf, line, len);
			lbuf[len] = '\0';
			line = lbuf;
		}
		line[strcspn(line, "\r")] = '\0';

		line += strspn(line, " \t");
		if ((*line == '#') || (*line == '\0')) {
			continue;
		}
		field = DOMAIN;
		ck = calloc(1, sizeof(*ck));
		if (ck == NULL)
			err(1, NULL);
		while ((param = strsep(&line, "\t")) != NULL) {
			switch (field) {
			case DOMAIN:
				if (*param == '.') {
					if (asprintf(&ck->domain,
					    "*%s", param) == -1)
						err(1, NULL);
				} else {
					ck->domain = strdup(param);
					if (ck->domain == NULL)
						err(1, NULL);
				}
				break;
			case TAILMATCH:
				if (strcasecmp(param, "TRUE") == 0) {
					ck->flags |= F_TAILMATCH;
				} else if (strcasecmp(param, "FALSE") != 0) {
					errx(1, "invalid cookie file");
				}
				break;
			case PATH:
				if (strcmp(param, "/") != 0) {
					ck->flags |= F_MATCHPATH;
					if (asprintf(&ck->path,
					    "%s*", param) == -1)
						err(1, NULL);
				}
				break;
			case SECURE:
				if (strcasecmp(param, "TRUE") == 0) {
					ck->flags |= F_SECURE;
				} else if (strcasecmp(param, "FALSE") != 0) {
					errx(1, "invalid cookie file");
				}
				break;
			case EXPIRES:
				/*
				 * rely on sizeof(time_t) being 4
				 */
				ck->expires = strtonum(param, 0,
				    INT_MAX, &estr);
				if (estr) {
					if (errno == ERANGE)
						ck->flags |= F_NOEXPIRY;
					else
						errx(1, "invalid cookie file");
				}
				break;
			case NAME:
				ck->key = strdup(param);
				if (ck->key == NULL)
					err(1, NULL);
				break;
			case VALUE:
				ck->val = strdup(param);
				if (ck->val == NULL)
					err(1, NULL);
				break;
			case DONE:
				errx(1, "invalid cookie file");
				break;
			}
			field++;
		}
		if (field != DONE)
			errx(1, "invalid cookie file");
		if (ck->expires < date && !(ck->flags & F_NOEXPIRY)) {
			free(ck->val);
			free(ck->key);
			free(ck->path);
			free(ck->domain);
			free(ck);
		} else
			TAILQ_INSERT_TAIL(&jar, ck, entry);
	}
	free(lbuf);
	fclose(fp);
}

void
cookie_get(const char *domain, const char *path, int secure, char **pstr)
{
	size_t		 len;
	size_t		 headlen;
	char		*head;
	char		*str;
	struct cookie	*ck;
	struct cookiejar tempjar;

	*pstr = NULL;

	if (cookiefile == NULL)
		return;

	TAILQ_INIT(&tempjar);
	len = strlen("Cookie\r\n");

	TAILQ_FOREACH(ck, &jar, entry) {
		if (fnmatch(ck->domain, domain, 0) == 0 &&
		    (secure || !(ck->flags & F_SECURE))) {

			if (ck->flags & F_MATCHPATH &&
			    fnmatch(ck->path, path, 0) != 0)
				continue;

			len += strlen(ck->key) + strlen(ck->val) +
			    strlen("; =");
			TAILQ_INSERT_TAIL(&tempjar, ck, tempentry);
		}
	}
	if (TAILQ_EMPTY(&tempjar))
		return;
	len += 1;
	str = malloc(len);
	if (str == NULL)
		err(1, NULL);

	(void)strlcpy(str, "Cookie:", len);
	TAILQ_FOREACH(ck, &tempjar, tempentry) {
		head = str + strlen(str);
		headlen = len - strlen(str);

		snprintf(head, headlen, "%s %s=%s",
		    (ck == TAILQ_FIRST(&tempjar))? "" : ";", ck->key, ck->val);
	}
	if (strlcat(str, "\r\n", len) >= len)
		errx(1, "cookie header truncated");
	*pstr = str;
}

#endif /* !SMALL */

@


1.6
log
@Split -DSMALL into -DNOSSL, so that a SSL-enabled version of ftp can
be built, which is still pretty small (in distrib/special/ftp-ssl).
Lots of testing by rpe.
@
text
@d1 1
a1 1
/*	$OpenBSD: cookie.c,v 1.5 2009/05/05 19:35:30 martynas Exp $	*/
d52 1
a52 1
	EXPIRES = 4, NAME = 5, VALUE = 6, DONE = 7 
d174 1
a174 1
	}	
@


1.5
log
@make it clean removing the ifdef SMALL maze.  separate cmds and
small stuff.  make it a fetcher.  shrinks quite a bit
agreed by millert@@, krw@@
ok theo, sthen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cookie.c,v 1.4 2008/12/07 21:12:07 cloder Exp $	*/
d19 1
a19 1
#ifndef SMALL
@


1.4
log
@time_t is signed, so use INT_MAX rather than UINT_MAX when parsing a time_t
with strtonum
@
text
@d1 2
a2 1
/* $OpenBSD: cookie.c,v 1.3 2008/06/25 21:15:19 martynas Exp $	*/
d20 1
d231 1
@


1.3
log
@in resume mode, pass -c to mget when {dir,file}hasglob, so that i'm
able to continue multiple transfers with -C;  ok millert@@
while here fix some comments (!SMALL vs. SMALL stuff), and add
missing
@
text
@d1 1
a1 1
/* $OpenBSD: cookie.c,v 1.2 2007/10/08 18:39:37 pyr Exp $	*/
d138 1
a138 1
				    UINT_MAX, &estr);
@


1.2
log
@Simplify the code that strips out \r by using strcspn.
ok millert@@
@
text
@d1 1
a1 1
/* $OpenBSD: cookie.c,v 1.1 2007/06/13 13:52:26 pyr Exp $	*/
d228 1
a228 1
#endif /* ! SMALL */
@


1.1
log
@Enable cookie support. This allows parsing of netscape-like cookie jars
and sending of appropriate cookies. No retrieval of new cookies is done.
Careful review and lots of input by millert and ray.

ok millert@@, ray@@
@
text
@d1 1
a1 1
/* $OpenBSD$	*/
d88 1
a88 4
		if (len > 0 && line[len - 1] == '\r') {
			line[len - 1] = '\0';
			--len;
		}
@

