head	1.16;
access;
symbols
	OPENBSD_6_2_BASE:1.16
	OPENBSD_6_1:1.15.0.6
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.15.0.4
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.14.0.40
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.14.0.38
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.32
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.36
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.34
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.30
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.28
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.26
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.24
	OPENBSD_5_0:1.14.0.22
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.20
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.18
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.14
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.16
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.12
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.10
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.8
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.14.0.6
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.14.0.2
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.4
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.13.0.8
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.6
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.4
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.2
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.12.0.10
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.12.0.8
	OPENBSD_3_4_BASE:1.12
	OPENBSD_3_3:1.12.0.6
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.12.0.4
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.12.0.2
	OPENBSD_3_1_BASE:1.12
	OPENBSD_3_0:1.11.0.4
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_9:1.11.0.2
	OPENBSD_2_8:1.9.0.2
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.7.0.2
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4;
locks; strict;
comment	@ * @;


1.16
date	2017.04.30.23.26.54;	author djm;	state Exp;
branches;
next	1.15;
commitid	NFLGF6f0all0Auw3;

1.15
date	2016.05.03.09.03.49;	author dtucker;	state Exp;
branches;
next	1.14;
commitid	BKN611NtJwU1dsZq;

1.14
date	2006.03.25.22.22.43;	author djm;	state Exp;
branches;
next	1.13;

1.13
date	2004.07.11.17.48.47;	author deraadt;	state Exp;
branches
	1.13.6.1
	1.13.8.1;
next	1.12;

1.12
date	2002.03.04.17.27.39;	author stevesk;	state Exp;
branches
	1.12.8.1
	1.12.10.1;
next	1.11;

1.11
date	2001.04.14.16.33.20;	author stevesk;	state Exp;
branches
	1.11.2.1
	1.11.4.1;
next	1.10;

1.10
date	2001.03.10.15.02.05;	author stevesk;	state Exp;
branches;
next	1.9;

1.9
date	2000.09.07.20.27.55;	author deraadt;	state Exp;
branches
	1.9.2.1;
next	1.8;

1.8
date	2000.06.20.01.39.45;	author markus;	state Exp;
branches;
next	1.7;

1.7
date	2000.04.14.10.30.34;	author markus;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	99.11.24.19.53.54;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	99.11.24.00.26.04;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	99.10.03.04.12.21;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	99.09.30.08.34.25;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	99.09.30.05.03.05;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	99.09.26.20.53.38;	author deraadt;	state Exp;
branches;
next	;

1.7.2.1
date	2000.09.01.18.23.25;	author jason;	state Exp;
branches;
next	1.7.2.2;

1.7.2.2
date	2000.11.08.21.31.35;	author jason;	state Exp;
branches;
next	1.7.2.3;

1.7.2.3
date	2001.03.12.15.44.18;	author jason;	state Exp;
branches;
next	1.7.2.4;

1.7.2.4
date	2001.03.21.18.53.19;	author jason;	state Exp;
branches;
next	;

1.9.2.1
date	2001.03.21.19.46.32;	author jason;	state Exp;
branches;
next	1.9.2.2;

1.9.2.2
date	2001.05.07.21.09.39;	author jason;	state Exp;
branches;
next	1.9.2.3;

1.9.2.3
date	2001.09.27.00.15.43;	author miod;	state Exp;
branches;
next	1.9.2.4;

1.9.2.4
date	2002.03.08.17.04.44;	author brad;	state Exp;
branches;
next	;

1.11.2.1
date	2002.03.09.00.20.45;	author miod;	state Exp;
branches;
next	;

1.11.4.1
date	2002.03.07.17.37.48;	author jason;	state Exp;
branches;
next	;

1.12.8.1
date	2004.08.19.22.37.33;	author brad;	state Exp;
branches;
next	;

1.12.10.1
date	2004.08.19.04.13.28;	author brad;	state Exp;
branches;
next	;

1.13.6.1
date	2006.10.06.03.19.33;	author brad;	state Exp;
branches;
next	;

1.13.8.1
date	2006.09.30.04.06.51;	author brad;	state Exp;
branches;
next	;


desc
@@


1.16
log
@purge the last traces of SSHv1 from the TTY modes handling code

ok markus
@
text
@/* $OpenBSD: ttymodes.h,v 1.15 2016/05/03 09:03:49 dtucker Exp $ */

/*
 * Author: Tatu Ylonen <ylo@@cs.hut.fi>
 * Copyright (c) 1995 Tatu Ylonen <ylo@@cs.hut.fi>, Espoo, Finland
 *                    All rights reserved
 *
 * As far as I am concerned, the code I have written for this software
 * can be used freely for any purpose.  Any derived versions of this
 * software must be clearly marked as such, and if the derived work is
 * incompatible with the protocol description in the RFC file, it must be
 * called by a name other than "ssh" or "Secure Shell".
 */

/*
 * SSH2 tty modes support by Kevin Steves.
 * Copyright (c) 2001 Kevin Steves.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * The tty mode description is a string, consisting of
 * opcode-arguments pairs.  It is terminated by opcode TTY_OP_END (0).
 * Opcodes 1-159 have uint32 arguments.
 * Opcodes 160-255 are not yet defined and cause parsing to stop (they
 * should only be used after any other data).
 *
 * The client puts in the string any modes it knows about, and the
 * server ignores any modes it does not know about.  This allows some degree
 * of machine-independence, at least between systems that use a posix-like
 * tty interface.  The protocol can support other systems as well, but might
 * require reimplementing as mode names would likely be different.
 */

/*
 * Some constants and prototypes are defined in packet.h; this file
 * is only intended for including from ttymodes.c.
 */

/* termios macro */
/* name, op */
TTYCHAR(VINTR, 1)
TTYCHAR(VQUIT, 2)
TTYCHAR(VERASE, 3)
#if defined(VKILL)
TTYCHAR(VKILL, 4)
#endif /* VKILL */
TTYCHAR(VEOF, 5)
#if defined(VEOL)
TTYCHAR(VEOL, 6)
#endif /* VEOL */
#ifdef VEOL2
TTYCHAR(VEOL2, 7)
#endif /* VEOL2 */
TTYCHAR(VSTART, 8)
TTYCHAR(VSTOP, 9)
#if defined(VSUSP)
TTYCHAR(VSUSP, 10)
#endif /* VSUSP */
#if defined(VDSUSP)
TTYCHAR(VDSUSP, 11)
#endif /* VDSUSP */
#if defined(VREPRINT)
TTYCHAR(VREPRINT, 12)
#endif /* VREPRINT */
#if defined(VWERASE)
TTYCHAR(VWERASE, 13)
#endif /* VWERASE */
#if defined(VLNEXT)
TTYCHAR(VLNEXT, 14)
#endif /* VLNEXT */
#if defined(VFLUSH)
TTYCHAR(VFLUSH, 15)
#endif /* VFLUSH */
#ifdef VSWTCH
TTYCHAR(VSWTCH, 16)
#endif /* VSWTCH */
#if defined(VSTATUS)
TTYCHAR(VSTATUS, 17)
#endif /* VSTATUS */
#ifdef VDISCARD
TTYCHAR(VDISCARD, 18)
#endif /* VDISCARD */

/* name, field, op */
TTYMODE(IGNPAR,	c_iflag, 30)
TTYMODE(PARMRK,	c_iflag, 31)
TTYMODE(INPCK,	c_iflag, 32)
TTYMODE(ISTRIP,	c_iflag, 33)
TTYMODE(INLCR,	c_iflag, 34)
TTYMODE(IGNCR,	c_iflag, 35)
TTYMODE(ICRNL,	c_iflag, 36)
#if defined(IUCLC)
TTYMODE(IUCLC,	c_iflag, 37)
#endif
TTYMODE(IXON,	c_iflag, 38)
TTYMODE(IXANY,	c_iflag, 39)
TTYMODE(IXOFF,	c_iflag, 40)
#ifdef IMAXBEL
TTYMODE(IMAXBEL,c_iflag, 41)
#endif /* IMAXBEL */
#ifdef IUTF8
TTYMODE(IUTF8,  c_iflag, 42)
#endif /* IUTF8 */

TTYMODE(ISIG,	c_lflag, 50)
TTYMODE(ICANON,	c_lflag, 51)
#ifdef XCASE
TTYMODE(XCASE,	c_lflag, 52)
#endif
TTYMODE(ECHO,	c_lflag, 53)
TTYMODE(ECHOE,	c_lflag, 54)
TTYMODE(ECHOK,	c_lflag, 55)
TTYMODE(ECHONL,	c_lflag, 56)
TTYMODE(NOFLSH,	c_lflag, 57)
TTYMODE(TOSTOP,	c_lflag, 58)
#ifdef IEXTEN
TTYMODE(IEXTEN, c_lflag, 59)
#endif /* IEXTEN */
#if defined(ECHOCTL)
TTYMODE(ECHOCTL,c_lflag, 60)
#endif /* ECHOCTL */
#ifdef ECHOKE
TTYMODE(ECHOKE,	c_lflag, 61)
#endif /* ECHOKE */
#if defined(PENDIN)
TTYMODE(PENDIN,	c_lflag, 62)
#endif /* PENDIN */

TTYMODE(OPOST,	c_oflag, 70)
#if defined(OLCUC)
TTYMODE(OLCUC,	c_oflag, 71)
#endif
TTYMODE(ONLCR,	c_oflag, 72)
#ifdef OCRNL
TTYMODE(OCRNL,	c_oflag, 73)
#endif
#ifdef ONOCR
TTYMODE(ONOCR,	c_oflag, 74)
#endif
#ifdef ONLRET
TTYMODE(ONLRET,	c_oflag, 75)
#endif

TTYMODE(CS7,	c_cflag, 90)
TTYMODE(CS8,	c_cflag, 91)
TTYMODE(PARENB,	c_cflag, 92)
TTYMODE(PARODD,	c_cflag, 93)
@


1.15
log
@Implement IUTF8 as per draft-sgtatham-secsh-iutf8-00.  Patch from Simon
Tatham, ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: ttymodes.h,v 1.14 2006/03/25 22:22:43 djm Exp $ */
d41 1
a41 2
 * SSH1:
 * The tty mode description is a stream of bytes.  The stream consists of
d43 3
a45 3
 * Opcodes 1-127 have one-byte arguments.  Opcodes 128-159 have integer
 * arguments.  Opcodes 160-255 are not yet defined, and cause parsing to
 * stop (they should only be used after any other data).
d47 1
a47 9
 * SSH2:
 * Differences between SSH1 and SSH2 terminal mode encoding include:
 * 1. Encoded terminal modes are represented as a string, and a stream
 *    of bytes within that string.
 * 2. Opcode arguments are uint32 (1-159); 160-255 remain undefined.
 * 3. The values for TTY_OP_ISPEED and TTY_OP_OSPEED are different;
 *    128 and 129 vs. 192 and 193 respectively.
 *
 * The client puts in the stream any modes it knows about, and the
@


1.14
log
@standardise spacing in $OpenBSD$ tags; requested by deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: ttymodes.h,v 1.13 2004/07/11 17:48:47 deraadt Exp $ */
d130 3
@


1.13
log
@spaces
@
text
@d1 1
a1 1
/*	$OpenBSD: ttymodes.h,v 1.12 2002/03/04 17:27:39 stevesk Exp $	*/
@


1.13.6.1
log
@upgrade to OpenSSH 4.4
@
text
@d1 1
a1 1
/* $OpenBSD: ttymodes.h,v 1.14 2006/03/25 22:22:43 djm Exp $ */
@


1.13.8.1
log
@upgrade to OpenSSH 4.4
@
text
@d1 1
a1 1
/* $OpenBSD: ttymodes.h,v 1.14 2006/03/25 22:22:43 djm Exp $ */
@


1.12
log
@$OpenBSD$ and RCSID() cleanup: don't use RCSID() in .h files; add
missing RCSID() to .c files and remove dup /*$OpenBSD$*/ from .c
files.  ok markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ttymodes.h,v 1.11 2001/04/14 16:33:20 stevesk Exp $	*/
d116 1
a116 1
TTYMODE(INPCK, 	c_iflag, 32)
d118 3
a120 3
TTYMODE(INLCR, 	c_iflag, 34)
TTYMODE(IGNCR, 	c_iflag, 35)
TTYMODE(ICRNL, 	c_iflag, 36)
d122 1
a122 1
TTYMODE(IUCLC, 	c_iflag, 37)
d124 3
a126 3
TTYMODE(IXON,  	c_iflag, 38)
TTYMODE(IXANY, 	c_iflag, 39)
TTYMODE(IXOFF, 	c_iflag, 40)
@


1.12.8.1
log
@upgrade to OpenSSH 3.9
@
text
@d1 1
a1 1
/*	$OpenBSD: ttymodes.h,v 1.13 2004/07/11 17:48:47 deraadt Exp $	*/
d116 1
a116 1
TTYMODE(INPCK,	c_iflag, 32)
d118 3
a120 3
TTYMODE(INLCR,	c_iflag, 34)
TTYMODE(IGNCR,	c_iflag, 35)
TTYMODE(ICRNL,	c_iflag, 36)
d122 1
a122 1
TTYMODE(IUCLC,	c_iflag, 37)
d124 3
a126 3
TTYMODE(IXON,	c_iflag, 38)
TTYMODE(IXANY,	c_iflag, 39)
TTYMODE(IXOFF,	c_iflag, 40)
@


1.12.10.1
log
@upgrade to OpenSSH 3.9
@
text
@d1 1
a1 1
/*	$OpenBSD: ttymodes.h,v 1.13 2004/07/11 17:48:47 deraadt Exp $	*/
d116 1
a116 1
TTYMODE(INPCK,	c_iflag, 32)
d118 3
a120 3
TTYMODE(INLCR,	c_iflag, 34)
TTYMODE(IGNCR,	c_iflag, 35)
TTYMODE(ICRNL,	c_iflag, 36)
d122 1
a122 1
TTYMODE(IUCLC,	c_iflag, 37)
d124 3
a126 3
TTYMODE(IXON,	c_iflag, 38)
TTYMODE(IXANY,	c_iflag, 39)
TTYMODE(IXOFF,	c_iflag, 40)
@


1.11
log
@protocol 2 tty modes support; ok markus@@
@
text
@d1 2
a2 1
/* RCSID("$OpenBSD: ttymodes.h,v 1.10 2001/03/10 15:02:05 stevesk Exp $"); */
@


1.11.2.1
log
@Merge OpenSSH 3.1, keeping /etc as configuration files directory.
(i.e. OpenSSH 3.1 + openbsd29_3.1.patch)
@
text
@d1 1
a1 2
/*	$OpenBSD: ttymodes.h,v 1.12 2002/03/04 17:27:39 stevesk Exp $	*/

@


1.11.4.1
log
@Update to OpenSSH-3.1 on 3.0-stable branch
@
text
@d1 1
a1 2
/*	$OpenBSD: ttymodes.h,v 1.12 2002/03/04 17:27:39 stevesk Exp $	*/

@


1.10
log
@remove unused sgtty macros; ok markus@@
@
text
@d1 1
a3 1
 * 	SGTTY stuff contributed by Janne Snabb <snabb@@niksula.hut.fi>
d14 24
a37 1
/* RCSID("$OpenBSD: ttymodes.h,v 1.9 2000/09/07 20:27:55 deraadt Exp $"); */
d39 3
a41 1
/* The tty mode description is a stream of bytes.  The stream consists of
d46 8
@


1.9
log
@cleanup copyright notices on all files.  I have attempted to be accurate with
the details.  everything is now under Tatu's licence (which I copied from his
readme), and/or the core-sdi bsd-ish thing for deattack, or various openbsd
developers under a 2-term bsd licence.  We're not changing any rules, just
being accurate.
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: ttymodes.h,v 1.8 2000/06/20 01:39:45 markus Exp $"); */
d34 1
a34 1
/* termios macro */		/* sgtty macro */
d36 3
a38 3
TTYCHAR(VINTR, 1) 		SGTTYCHAR(tiotc.t_intrc, 1)
TTYCHAR(VQUIT, 2)		SGTTYCHAR(tiotc.t_quitc, 2)
TTYCHAR(VERASE, 3)		SGTTYCHAR(tio.sg_erase, 3)
d40 1
a40 1
TTYCHAR(VKILL, 4)		SGTTYCHAR(tio.sg_kill, 4)
d42 1
a42 1
TTYCHAR(VEOF, 5)		SGTTYCHAR(tiotc.t_eofc, 5)
d44 1
a44 1
TTYCHAR(VEOL, 6)		SGTTYCHAR(tiotc.t_brkc, 6)
d46 1
a46 1
#ifdef VEOL2			/* n/a */
d49 2
a50 2
TTYCHAR(VSTART, 8)		SGTTYCHAR(tiotc.t_startc, 8)
TTYCHAR(VSTOP, 9)		SGTTYCHAR(tiotc.t_stopc, 9)
d52 1
a52 1
TTYCHAR(VSUSP, 10)		SGTTYCHAR(tioltc.t_suspc, 10)
d55 1
a55 1
TTYCHAR(VDSUSP, 11)		SGTTYCHAR(tioltc.t_dsuspc, 11)
d58 1
a58 1
TTYCHAR(VREPRINT, 12)		SGTTYCHAR(tioltc.t_rprntc, 12)
d61 1
a61 1
TTYCHAR(VWERASE, 13)		SGTTYCHAR(tioltc.t_werasc, 13)
d64 1
a64 1
TTYCHAR(VLNEXT, 14)		SGTTYCHAR(tioltc.t_lnextc, 14)
d67 1
a67 1
TTYCHAR(VFLUSH, 15)		SGTTYCHAR(tioltc.t_flushc, 15)
d70 1
a70 1
TTYCHAR(VSWTCH, 16)		/* n/a */
d73 1
a73 1
TTYCHAR(VSTATUS, 17)		SGTTYCHAR(tiots.tc_statusc, 17)
d76 1
a76 1
TTYCHAR(VDISCARD, 18)		/* n/a */
d80 7
a86 7
TTYMODE(IGNPAR,	c_iflag, 30)	/* n/a */
TTYMODE(PARMRK,	c_iflag, 31)	/* n/a */
TTYMODE(INPCK, 	c_iflag, 32)	SGTTYMODEN(ANYP, tio.sg_flags, 32)
TTYMODE(ISTRIP,	c_iflag, 33)	SGTTYMODEN(LPASS8, tiolm, 33)
TTYMODE(INLCR, 	c_iflag, 34)	/* n/a */
TTYMODE(IGNCR, 	c_iflag, 35)	/* n/a */
TTYMODE(ICRNL, 	c_iflag, 36)	SGTTYMODE(CRMOD, tio.sg_flags, 36)
d88 1
a88 1
TTYMODE(IUCLC, 	c_iflag, 37)	SGTTYMODE(LCASE, tio.sg_flags, 37)
d90 3
a92 3
TTYMODE(IXON,  	c_iflag, 38)	/* n/a */
TTYMODE(IXANY, 	c_iflag, 39)	SGTTYMODEN(LDECCTQ, tiolm, 39)
TTYMODE(IXOFF, 	c_iflag, 40)	SGTTYMODE(TANDEM, tio.sg_flags, 40)
d94 1
a94 1
TTYMODE(IMAXBEL,c_iflag, 41)	/* n/a */
d97 2
a98 2
TTYMODE(ISIG,	c_lflag, 50)	/* n/a */
TTYMODE(ICANON,	c_lflag, 51)	SGTTYMODEN(CBREAK, tio.sg_flags, 51)
d100 1
a100 1
TTYMODE(XCASE,	c_lflag, 52)	/* n/a */
d102 6
a107 6
TTYMODE(ECHO,	c_lflag, 53)	SGTTYMODE(ECHO, tio.sg_flags, 53)
TTYMODE(ECHOE,	c_lflag, 54)	SGTTYMODE(LCRTERA, tiolm, 54)
TTYMODE(ECHOK,	c_lflag, 55)	SGTTYMODE(LCRTKIL, tiolm, 55)
TTYMODE(ECHONL,	c_lflag, 56)	/* n/a */
TTYMODE(NOFLSH,	c_lflag, 57)	SGTTYMODE(LNOFLSH, tiolm, 57)
TTYMODE(TOSTOP,	c_lflag, 58)	SGTTYMODE(LTOSTOP, tiolm, 58)
d109 1
a109 1
TTYMODE(IEXTEN, c_lflag, 59)	/* n/a */
d112 1
a112 1
TTYMODE(ECHOCTL,c_lflag, 60)	SGTTYMODE(LCTLECH, tiolm, 60)
d115 1
a115 1
TTYMODE(ECHOKE,	c_lflag, 61)	/* n/a */
d118 1
a118 1
TTYMODE(PENDIN,	c_lflag, 62)	SGTTYMODE(LPENDIN, tiolm, 62)
d121 1
a121 1
TTYMODE(OPOST,	c_oflag, 70)	/* n/a */
d123 1
a123 1
TTYMODE(OLCUC,	c_oflag, 71)	SGTTYMODE(LCASE, tio.sg_flags, 71)
d125 1
a125 1
TTYMODE(ONLCR,	c_oflag, 72)	SGTTYMODE(CRMOD, tio.sg_flags, 72)
d127 1
a127 1
TTYMODE(OCRNL,	c_oflag, 73)	/* n/a */
d130 1
a130 1
TTYMODE(ONOCR,	c_oflag, 74)	/* n/a */
d133 1
a133 1
TTYMODE(ONLRET,	c_oflag, 75)	/* n/a */
d136 4
a139 5
TTYMODE(CS7,	c_cflag, 90)	/* n/a */
TTYMODE(CS8,	c_cflag, 91)	SGTTYMODE(LPASS8, tiolm, 91)
TTYMODE(PARENB,	c_cflag, 92)	/* n/a */
TTYMODE(PARODD,	c_cflag, 93)	SGTTYMODE(ODDP, tio.sg_flags, 93)

@


1.9.2.1
log
@Pull in OpenSSH-2.5.2 for 2.8 branch.
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: ttymodes.h,v 1.10 2001/03/10 15:02:05 stevesk Exp $"); */
d34 1
a34 1
/* termios macro */
d36 3
a38 3
TTYCHAR(VINTR, 1)
TTYCHAR(VQUIT, 2)
TTYCHAR(VERASE, 3)
d40 1
a40 1
TTYCHAR(VKILL, 4)
d42 1
a42 1
TTYCHAR(VEOF, 5)
d44 1
a44 1
TTYCHAR(VEOL, 6)
d46 1
a46 1
#ifdef VEOL2
d49 2
a50 2
TTYCHAR(VSTART, 8)
TTYCHAR(VSTOP, 9)
d52 1
a52 1
TTYCHAR(VSUSP, 10)
d55 1
a55 1
TTYCHAR(VDSUSP, 11)
d58 1
a58 1
TTYCHAR(VREPRINT, 12)
d61 1
a61 1
TTYCHAR(VWERASE, 13)
d64 1
a64 1
TTYCHAR(VLNEXT, 14)
d67 1
a67 1
TTYCHAR(VFLUSH, 15)
d70 1
a70 1
TTYCHAR(VSWTCH, 16)
d73 1
a73 1
TTYCHAR(VSTATUS, 17)
d76 1
a76 1
TTYCHAR(VDISCARD, 18)
d80 7
a86 7
TTYMODE(IGNPAR,	c_iflag, 30)
TTYMODE(PARMRK,	c_iflag, 31)
TTYMODE(INPCK, 	c_iflag, 32)
TTYMODE(ISTRIP,	c_iflag, 33)
TTYMODE(INLCR, 	c_iflag, 34)
TTYMODE(IGNCR, 	c_iflag, 35)
TTYMODE(ICRNL, 	c_iflag, 36)
d88 1
a88 1
TTYMODE(IUCLC, 	c_iflag, 37)
d90 3
a92 3
TTYMODE(IXON,  	c_iflag, 38)
TTYMODE(IXANY, 	c_iflag, 39)
TTYMODE(IXOFF, 	c_iflag, 40)
d94 1
a94 1
TTYMODE(IMAXBEL,c_iflag, 41)
d97 2
a98 2
TTYMODE(ISIG,	c_lflag, 50)
TTYMODE(ICANON,	c_lflag, 51)
d100 1
a100 1
TTYMODE(XCASE,	c_lflag, 52)
d102 6
a107 6
TTYMODE(ECHO,	c_lflag, 53)
TTYMODE(ECHOE,	c_lflag, 54)
TTYMODE(ECHOK,	c_lflag, 55)
TTYMODE(ECHONL,	c_lflag, 56)
TTYMODE(NOFLSH,	c_lflag, 57)
TTYMODE(TOSTOP,	c_lflag, 58)
d109 1
a109 1
TTYMODE(IEXTEN, c_lflag, 59)
d112 1
a112 1
TTYMODE(ECHOCTL,c_lflag, 60)
d115 1
a115 1
TTYMODE(ECHOKE,	c_lflag, 61)
d118 1
a118 1
TTYMODE(PENDIN,	c_lflag, 62)
d121 1
a121 1
TTYMODE(OPOST,	c_oflag, 70)
d123 1
a123 1
TTYMODE(OLCUC,	c_oflag, 71)
d125 1
a125 1
TTYMODE(ONLCR,	c_oflag, 72)
d127 1
a127 1
TTYMODE(OCRNL,	c_oflag, 73)
d130 1
a130 1
TTYMODE(ONOCR,	c_oflag, 74)
d133 1
a133 1
TTYMODE(ONLRET,	c_oflag, 75)
d136 5
a140 4
TTYMODE(CS7,	c_cflag, 90)
TTYMODE(CS8,	c_cflag, 91)
TTYMODE(PARENB,	c_cflag, 92)
TTYMODE(PARODD,	c_cflag, 93)
@


1.9.2.2
log
@Pull in OpenSSH-2.9 to 2.8 branch.
@
text
@a0 1
/* RCSID("$OpenBSD: ttymodes.h,v 1.11 2001/04/14 16:33:20 stevesk Exp $"); */
d3 1
d14 1
a14 24
/*
 * SSH2 tty modes support by Kevin Steves.
 * Copyright (c) 2001 Kevin Steves.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
d16 1
a16 3
/*
 * SSH1:
 * The tty mode description is a stream of bytes.  The stream consists of
a20 8
 *
 * SSH2:
 * Differences between SSH1 and SSH2 terminal mode encoding include:
 * 1. Encoded terminal modes are represented as a string, and a stream
 *    of bytes within that string.
 * 2. Opcode arguments are uint32 (1-159); 160-255 remain undefined.
 * 3. The values for TTY_OP_ISPEED and TTY_OP_OSPEED are different;
 *    128 and 129 vs. 192 and 193 respectively.
@


1.9.2.3
log
@Pull in OpenSSH 2.9.9 to the 2.8 branch.
@
text
@@


1.9.2.4
log
@Merge OpenSSH 3.1.
@
text
@d1 1
a1 2
/*	$OpenBSD: ttymodes.h,v 1.12 2002/03/04 17:27:39 stevesk Exp $	*/

@


1.8
log
@OpenBSD tag
@
text
@a1 3
 *
 * ttymodes.h
 *
a3 1
 *
d7 5
a11 2
 * Created: Tue Mar 21 15:42:09 1995 ylo
 *
d14 1
a14 1
/* RCSID("$OpenBSD: ttymodes.h,v 1.7 2000/04/14 10:30:34 markus Exp $"); */
@


1.7
log
@whitespace cleanup
@
text
@d15 1
a15 1
/* RCSID("$Id: ttymodes.h,v 1.6 1999/11/24 19:53:54 markus Exp $"); */
@


1.7.2.1
log
@Pull in the rest of openssh-2.2.0 to 2.7 branch (luvin' cvs...)
@
text
@d15 1
a15 1
/* RCSID("$OpenBSD: ttymodes.h,v 1.8 2000/06/20 01:39:45 markus Exp $"); */
@


1.7.2.2
log
@openssh-2.3.0 (again) for 2.7 branch
@
text
@d2 3
d7 1
d11 2
a12 5
 * As far as I am concerned, the code I have written for this software
 * can be used freely for any purpose.  Any derived versions of this
 * software must be clearly marked as such, and if the derived work is
 * incompatible with the protocol description in the RFC file, it must be
 * called by a name other than "ssh" or "Secure Shell".
d15 1
a15 1
/* RCSID("$OpenBSD: ttymodes.h,v 1.9 2000/09/07 20:27:55 deraadt Exp $"); */
@


1.7.2.3
log
@OpenSSH-2.5.1 for 2.7 patch branch
@
text
@@


1.7.2.4
log
@Pull in OpenSSH-2.5.2 for 2.7 branch.
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: ttymodes.h,v 1.10 2001/03/10 15:02:05 stevesk Exp $"); */
d34 1
a34 1
/* termios macro */
d36 3
a38 3
TTYCHAR(VINTR, 1)
TTYCHAR(VQUIT, 2)
TTYCHAR(VERASE, 3)
d40 1
a40 1
TTYCHAR(VKILL, 4)
d42 1
a42 1
TTYCHAR(VEOF, 5)
d44 1
a44 1
TTYCHAR(VEOL, 6)
d46 1
a46 1
#ifdef VEOL2
d49 2
a50 2
TTYCHAR(VSTART, 8)
TTYCHAR(VSTOP, 9)
d52 1
a52 1
TTYCHAR(VSUSP, 10)
d55 1
a55 1
TTYCHAR(VDSUSP, 11)
d58 1
a58 1
TTYCHAR(VREPRINT, 12)
d61 1
a61 1
TTYCHAR(VWERASE, 13)
d64 1
a64 1
TTYCHAR(VLNEXT, 14)
d67 1
a67 1
TTYCHAR(VFLUSH, 15)
d70 1
a70 1
TTYCHAR(VSWTCH, 16)
d73 1
a73 1
TTYCHAR(VSTATUS, 17)
d76 1
a76 1
TTYCHAR(VDISCARD, 18)
d80 7
a86 7
TTYMODE(IGNPAR,	c_iflag, 30)
TTYMODE(PARMRK,	c_iflag, 31)
TTYMODE(INPCK, 	c_iflag, 32)
TTYMODE(ISTRIP,	c_iflag, 33)
TTYMODE(INLCR, 	c_iflag, 34)
TTYMODE(IGNCR, 	c_iflag, 35)
TTYMODE(ICRNL, 	c_iflag, 36)
d88 1
a88 1
TTYMODE(IUCLC, 	c_iflag, 37)
d90 3
a92 3
TTYMODE(IXON,  	c_iflag, 38)
TTYMODE(IXANY, 	c_iflag, 39)
TTYMODE(IXOFF, 	c_iflag, 40)
d94 1
a94 1
TTYMODE(IMAXBEL,c_iflag, 41)
d97 2
a98 2
TTYMODE(ISIG,	c_lflag, 50)
TTYMODE(ICANON,	c_lflag, 51)
d100 1
a100 1
TTYMODE(XCASE,	c_lflag, 52)
d102 6
a107 6
TTYMODE(ECHO,	c_lflag, 53)
TTYMODE(ECHOE,	c_lflag, 54)
TTYMODE(ECHOK,	c_lflag, 55)
TTYMODE(ECHONL,	c_lflag, 56)
TTYMODE(NOFLSH,	c_lflag, 57)
TTYMODE(TOSTOP,	c_lflag, 58)
d109 1
a109 1
TTYMODE(IEXTEN, c_lflag, 59)
d112 1
a112 1
TTYMODE(ECHOCTL,c_lflag, 60)
d115 1
a115 1
TTYMODE(ECHOKE,	c_lflag, 61)
d118 1
a118 1
TTYMODE(PENDIN,	c_lflag, 62)
d121 1
a121 1
TTYMODE(OPOST,	c_oflag, 70)
d123 1
a123 1
TTYMODE(OLCUC,	c_oflag, 71)
d125 1
a125 1
TTYMODE(ONLCR,	c_oflag, 72)
d127 1
a127 1
TTYMODE(OCRNL,	c_oflag, 73)
d130 1
a130 1
TTYMODE(ONOCR,	c_oflag, 74)
d133 1
a133 1
TTYMODE(ONLRET,	c_oflag, 75)
d136 5
a140 4
TTYMODE(CS7,	c_cflag, 90)
TTYMODE(CS8,	c_cflag, 91)
TTYMODE(PARENB,	c_cflag, 92)
TTYMODE(PARODD,	c_cflag, 93)
@


1.6
log
@KNF, final part 3
@
text
@d2 1
a2 1
 * 
d4 1
a4 1
 * 
d7 1
a7 1
 * 
d10 1
a10 1
 * 
d12 1
a12 1
 * 
d15 1
a15 1
/* RCSID("$Id: ttymodes.h,v 1.5 1999/11/24 00:26:04 deraadt Exp $"); */
@


1.5
log
@much more KNF
@
text
@d15 1
a15 1
/* RCSID("$Id: ttymodes.h,v 1.4 1999/10/03 04:12:21 deraadt Exp $"); */
d32 1
a32 1
 * is only intended for including from ttymodes.h.
d35 1
a35 1
 /* termios macro *//* sgtty macro */
d37 3
a39 3
TTYCHAR(VINTR, 1) SGTTYCHAR(tiotc.t_intrc, 1)
TTYCHAR(VQUIT, 2) SGTTYCHAR(tiotc.t_quitc, 2)
TTYCHAR(VERASE, 3) SGTTYCHAR(tio.sg_erase, 3)
d41 3
a43 3
TTYCHAR(VKILL, 4) SGTTYCHAR(tio.sg_kill, 4)
#endif				/* VKILL */
TTYCHAR(VEOF, 5) SGTTYCHAR(tiotc.t_eofc, 5)
d45 2
a46 2
TTYCHAR(VEOL, 6) SGTTYCHAR(tiotc.t_brkc, 6)
#endif				/* VEOL */
d49 3
a51 3
#endif				/* VEOL2 */
TTYCHAR(VSTART, 8) SGTTYCHAR(tiotc.t_startc, 8)
TTYCHAR(VSTOP, 9) SGTTYCHAR(tiotc.t_stopc, 9)
d53 2
a54 2
TTYCHAR(VSUSP, 10) SGTTYCHAR(tioltc.t_suspc, 10)
#endif				/* VSUSP */
d56 2
a57 2
TTYCHAR(VDSUSP, 11) SGTTYCHAR(tioltc.t_dsuspc, 11)
#endif				/* VDSUSP */
d59 2
a60 2
TTYCHAR(VREPRINT, 12) SGTTYCHAR(tioltc.t_rprntc, 12)
#endif				/* VREPRINT */
d62 2
a63 2
TTYCHAR(VWERASE, 13) SGTTYCHAR(tioltc.t_werasc, 13)
#endif				/* VWERASE */
d65 2
a66 2
TTYCHAR(VLNEXT, 14) SGTTYCHAR(tioltc.t_lnextc, 14)
#endif				/* VLNEXT */
d68 2
a69 2
TTYCHAR(VFLUSH, 15) SGTTYCHAR(tioltc.t_flushc, 15)
#endif				/* VFLUSH */
d72 1
a72 1
#endif				/* VSWTCH */
d74 2
a75 2
TTYCHAR(VSTATUS, 17) SGTTYCHAR(tiots.tc_statusc, 17)
#endif				/* VSTATUS */
d78 1
a78 1
#endif				/* VDISCARD */
d81 7
a87 7
TTYMODE(IGNPAR, c_iflag, 30)	/* n/a */
TTYMODE(PARMRK, c_iflag, 31)	/* n/a */
TTYMODE(INPCK, c_iflag, 32) SGTTYMODEN(ANYP, tio.sg_flags, 32)
TTYMODE(ISTRIP, c_iflag, 33) SGTTYMODEN(LPASS8, tiolm, 33)
TTYMODE(INLCR, c_iflag, 34)	/* n/a */
TTYMODE(IGNCR, c_iflag, 35)	/* n/a */
TTYMODE(ICRNL, c_iflag, 36) SGTTYMODE(CRMOD, tio.sg_flags, 36)
d89 1
a89 1
TTYMODE(IUCLC, c_iflag, 37) SGTTYMODE(LCASE, tio.sg_flags, 37)
d91 3
a93 3
TTYMODE(IXON, c_iflag, 38)	/* n/a */
TTYMODE(IXANY, c_iflag, 39) SGTTYMODEN(LDECCTQ, tiolm, 39)
TTYMODE(IXOFF, c_iflag, 40) SGTTYMODE(TANDEM, tio.sg_flags, 40)
d95 2
a96 2
TTYMODE(IMAXBEL, c_iflag, 41)		/* n/a */
#endif				/* IMAXBEL */
d98 2
a99 2
TTYMODE(ISIG, c_lflag, 50)	/* n/a */
TTYMODE(ICANON, c_lflag, 51) SGTTYMODEN(CBREAK, tio.sg_flags, 51)
d101 1
a101 1
TTYMODE(XCASE, c_lflag, 52)	/* n/a */
d103 6
a108 6
TTYMODE(ECHO, c_lflag, 53) SGTTYMODE(ECHO, tio.sg_flags, 53)
TTYMODE(ECHOE, c_lflag, 54) SGTTYMODE(LCRTERA, tiolm, 54)
TTYMODE(ECHOK, c_lflag, 55) SGTTYMODE(LCRTKIL, tiolm, 55)
TTYMODE(ECHONL, c_lflag, 56)	/* n/a */
TTYMODE(NOFLSH, c_lflag, 57) SGTTYMODE(LNOFLSH, tiolm, 57)
TTYMODE(TOSTOP, c_lflag, 58) SGTTYMODE(LTOSTOP, tiolm, 58)
d111 1
a111 1
#endif				/* IEXTEN */
d113 2
a114 2
TTYMODE(ECHOCTL, c_lflag, 60) SGTTYMODE(LCTLECH, tiolm, 60)
#endif				/* ECHOCTL */
d116 2
a117 2
TTYMODE(ECHOKE, c_lflag, 61)	/* n/a */
#endif				/* ECHOKE */
d119 2
a120 2
TTYMODE(PENDIN, c_lflag, 62) SGTTYMODE(LPENDIN, tiolm, 62)
#endif				/* PENDIN */
d122 1
a122 1
TTYMODE(OPOST, c_oflag, 70)	/* n/a */
d124 1
a124 1
TTYMODE(OLCUC, c_oflag, 71) SGTTYMODE(LCASE, tio.sg_flags, 71)
d126 1
a126 1
TTYMODE(ONLCR, c_oflag, 72) SGTTYMODE(CRMOD, tio.sg_flags, 72)
d128 1
a128 1
TTYMODE(OCRNL, c_oflag, 73)	/* n/a */
d131 1
a131 1
TTYMODE(ONOCR, c_oflag, 74)	/* n/a */
d134 1
a134 1
TTYMODE(ONLRET, c_oflag, 75)	/* n/a */
d137 5
a141 4
TTYMODE(CS7, c_cflag, 90)	/* n/a */
TTYMODE(CS8, c_cflag, 91) SGTTYMODE(LPASS8, tiolm, 91)
TTYMODE(PARENB, c_cflag, 92)	/* n/a */
TTYMODE(PARODD, c_cflag, 93) SGTTYMODE(ODDP, tio.sg_flags, 93)
@


1.4
log
@i screwed up the ttymode handling
@
text
@d2 12
d15 1
a15 13
ttymodes.h

Author: Tatu Ylonen <ylo@@cs.hut.fi>
	SGTTY stuff contributed by Janne Snabb <snabb@@niksula.hut.fi>

Copyright (c) 1995 Tatu Ylonen <ylo@@cs.hut.fi>, Espoo, Finland
                   All rights reserved

Created: Tue Mar 21 15:42:09 1995 ylo

*/

/* RCSID("$Id: ttymodes.h,v 1.1 1999/09/26 20:53:38 deraadt Exp $"); */
d18 16
a33 13
   opcode-arguments pairs.  It is terminated by opcode TTY_OP_END (0).
   Opcodes 1-127 have one-byte arguments.  Opcodes 128-159 have integer
   arguments.  Opcodes 160-255 are not yet defined, and cause parsing to
   stop (they should only be used after any other data).

   The client puts in the stream any modes it knows about, and the
   server ignores any modes it does not know about.  This allows some degree
   of machine-independence, at least between systems that use a posix-like
   tty interface.  The protocol can support other systems as well, but might
   require reimplementing as mode names would likely be different. */
     
/* Some constants and prototypes are defined in packet.h; this file
   is only intended for including from ttymodes.h. */
d35 1
a35 1
/* termios macro */		/* sgtty macro */
d37 3
a39 3
TTYCHAR(VINTR, 1) 		SGTTYCHAR(tiotc.t_intrc, 1)
TTYCHAR(VQUIT, 2)		SGTTYCHAR(tiotc.t_quitc, 2)
TTYCHAR(VERASE, 3)		SGTTYCHAR(tio.sg_erase, 3)
d41 3
a43 3
TTYCHAR(VKILL, 4)		SGTTYCHAR(tio.sg_kill, 4)
#endif /* VKILL */
TTYCHAR(VEOF, 5)		SGTTYCHAR(tiotc.t_eofc, 5)
d45 2
a46 2
TTYCHAR(VEOL, 6)		SGTTYCHAR(tiotc.t_brkc, 6)
#endif /* VEOL */
d49 3
a51 3
#endif /* VEOL2 */
TTYCHAR(VSTART, 8)		SGTTYCHAR(tiotc.t_startc, 8)
TTYCHAR(VSTOP, 9)		SGTTYCHAR(tiotc.t_stopc, 9)
d53 2
a54 2
TTYCHAR(VSUSP, 10)		SGTTYCHAR(tioltc.t_suspc, 10)
#endif /* VSUSP */
d56 2
a57 2
TTYCHAR(VDSUSP, 11)		SGTTYCHAR(tioltc.t_dsuspc, 11)
#endif /* VDSUSP */
d59 2
a60 2
TTYCHAR(VREPRINT, 12)		SGTTYCHAR(tioltc.t_rprntc, 12)
#endif /* VREPRINT */
d62 2
a63 2
TTYCHAR(VWERASE, 13)		SGTTYCHAR(tioltc.t_werasc, 13)
#endif /* VWERASE */
d65 2
a66 2
TTYCHAR(VLNEXT, 14)		SGTTYCHAR(tioltc.t_lnextc, 14)
#endif /* VLNEXT */
d68 2
a69 2
TTYCHAR(VFLUSH, 15)		SGTTYCHAR(tioltc.t_flushc, 15)
#endif /* VFLUSH */
d72 1
a72 1
#endif /* VSWTCH */
d74 2
a75 2
TTYCHAR(VSTATUS, 17)		SGTTYCHAR(tiots.tc_statusc, 17)
#endif /* VSTATUS */
d78 1
a78 1
#endif /* VDISCARD */
d81 7
a87 7
TTYMODE(IGNPAR,	c_iflag, 30)	/* n/a */
TTYMODE(PARMRK,	c_iflag, 31)	/* n/a */
TTYMODE(INPCK, 	c_iflag, 32)	SGTTYMODEN(ANYP, tio.sg_flags, 32)
TTYMODE(ISTRIP,	c_iflag, 33)	SGTTYMODEN(LPASS8, tiolm, 33)
TTYMODE(INLCR, 	c_iflag, 34)	/* n/a */
TTYMODE(IGNCR, 	c_iflag, 35)	/* n/a */
TTYMODE(ICRNL, 	c_iflag, 36)	SGTTYMODE(CRMOD, tio.sg_flags, 36)
d89 1
a89 1
TTYMODE(IUCLC, 	c_iflag, 37)	SGTTYMODE(LCASE, tio.sg_flags, 37)
d91 3
a93 3
TTYMODE(IXON,  	c_iflag, 38)	/* n/a */
TTYMODE(IXANY, 	c_iflag, 39)	SGTTYMODEN(LDECCTQ, tiolm, 39)
TTYMODE(IXOFF, 	c_iflag, 40)	SGTTYMODE(TANDEM, tio.sg_flags, 40)
d95 2
a96 2
TTYMODE(IMAXBEL,c_iflag, 41)	/* n/a */
#endif /* IMAXBEL */
d98 2
a99 2
TTYMODE(ISIG,	c_lflag, 50)	/* n/a */
TTYMODE(ICANON,	c_lflag, 51)	SGTTYMODEN(CBREAK, tio.sg_flags, 51)
d101 1
a101 1
TTYMODE(XCASE,	c_lflag, 52)	/* n/a */
d103 6
a108 6
TTYMODE(ECHO,	c_lflag, 53)	SGTTYMODE(ECHO, tio.sg_flags, 53)
TTYMODE(ECHOE,	c_lflag, 54)	SGTTYMODE(LCRTERA, tiolm, 54)
TTYMODE(ECHOK,	c_lflag, 55)	SGTTYMODE(LCRTKIL, tiolm, 55)
TTYMODE(ECHONL,	c_lflag, 56)	/* n/a */
TTYMODE(NOFLSH,	c_lflag, 57)	SGTTYMODE(LNOFLSH, tiolm, 57)
TTYMODE(TOSTOP,	c_lflag, 58)	SGTTYMODE(LTOSTOP, tiolm, 58)
d111 1
a111 1
#endif /* IEXTEN */
d113 2
a114 2
TTYMODE(ECHOCTL,c_lflag, 60)	SGTTYMODE(LCTLECH, tiolm, 60)
#endif /* ECHOCTL */
d116 2
a117 2
TTYMODE(ECHOKE,	c_lflag, 61)	/* n/a */
#endif /* ECHOKE */
d119 2
a120 2
TTYMODE(PENDIN,	c_lflag, 62)	SGTTYMODE(LPENDIN, tiolm, 62)
#endif /* PENDIN */
d122 1
a122 1
TTYMODE(OPOST,	c_oflag, 70)	/* n/a */
d124 1
a124 1
TTYMODE(OLCUC,	c_oflag, 71)	SGTTYMODE(LCASE, tio.sg_flags, 71)
d126 1
a126 1
TTYMODE(ONLCR,	c_oflag, 72)	SGTTYMODE(CRMOD, tio.sg_flags, 72)
d128 1
a128 1
TTYMODE(OCRNL,	c_oflag, 73)	/* n/a */
d131 1
a131 1
TTYMODE(ONOCR,	c_oflag, 74)	/* n/a */
d134 1
a134 1
TTYMODE(ONLRET,	c_oflag, 75)	/* n/a */
d137 4
a140 5
TTYMODE(CS7,	c_cflag, 90)	/* n/a */
TTYMODE(CS8,	c_cflag, 91)	SGTTYMODE(LPASS8, tiolm, 91)
TTYMODE(PARENB,	c_cflag, 92)	/* n/a */
TTYMODE(PARODD,	c_cflag, 93)	SGTTYMODE(ODDP, tio.sg_flags, 93)

@


1.3
log
@even smaller
@
text
@d15 1
a15 1
/* RCSID("$Id: ttymodes.h,v 1.2 1999/09/30 05:03:05 deraadt Exp $"); */
d37 3
d41 4
d46 1
d49 18
d70 4
d75 1
d85 3
d91 1
d93 1
d97 1
d99 1
d106 1
d108 5
d114 4
d120 3
d124 1
d126 2
d129 2
d132 1
@


1.2
log
@cull more ancient garbage from pre-POSIX days
@
text
@d15 1
a15 1
/* RCSID("$Id: ttymodes.h,v 1.1 1999/09/26 20:53:38 deraadt Exp $"); */
a37 1
#ifdef VEOL2			/* n/a */
a38 1
#endif /* VEOL2 */
a43 1
#ifdef VDISCARD
a44 1
#endif /* VDISCARD */
a56 1
#ifdef IMAXBEL
a57 1
#endif /* IMAXBEL */
a60 1
#ifdef XCASE
a61 1
#endif
a67 1
#ifdef IEXTEN
a68 2
#endif /* IEXTEN */
#ifdef ECHOKE
a69 1
#endif /* ECHOKE */
a72 1
#ifdef OCRNL
a73 2
#endif
#ifdef ONOCR
a74 2
#endif
#ifdef ONLRET
a75 1
#endif
@


1.1
log
@i bet a lot of people didn't know what ssh 1.2.16 had a nice license.
well, except for the patent issues.  someone in sweden (forget their
name at the moment) cleaned out most of the patented code, and now
this code removes rsa code.  when this is done, it will link against
libssl, but the work isn't completely done yet.  then we need to bring
this up to modern days, featurewise.
@
text
@d15 1
a15 1
/* RCSID("$Id: ttymodes.h,v 1.2 1999/05/04 11:59:26 bg Exp $"); */
a36 3
#if defined(VKILL) || defined(USING_SGTTY)
TTYCHAR(VKILL, 4)		SGTTYCHAR(tio.sg_kill, 4)
#endif /* VKILL */
a37 3
#if defined(VEOL) || defined(USING_SGTTY)
TTYCHAR(VEOL, 6)		SGTTYCHAR(tiotc.t_brkc, 6)
#endif /* VEOL */
a42 18
#if defined(VSUSP) || defined(USING_SGTTY)
TTYCHAR(VSUSP, 10)		SGTTYCHAR(tioltc.t_suspc, 10)
#endif /* VSUSP */
#if defined(VDSUSP) || defined(USING_SGTTY)
TTYCHAR(VDSUSP, 11)		SGTTYCHAR(tioltc.t_dsuspc, 11)
#endif /* VDSUSP */
#if defined(VREPRINT) || defined(USING_SGTTY)
TTYCHAR(VREPRINT, 12)		SGTTYCHAR(tioltc.t_rprntc, 12)
#endif /* VREPRINT */
#if defined(VWERASE) || defined(USING_SGTTY)
TTYCHAR(VWERASE, 13)		SGTTYCHAR(tioltc.t_werasc, 13)
#endif /* VWERASE */
#if defined(VLNEXT) || defined(USING_SGTTY)
TTYCHAR(VLNEXT, 14)		SGTTYCHAR(tioltc.t_lnextc, 14)
#endif /* VLNEXT */
#if defined(VFLUSH) || defined(USING_SGTTY)
TTYCHAR(VFLUSH, 15)		SGTTYCHAR(tioltc.t_flushc, 15)
#endif /* VFLUSH */
a45 3
#if defined(VSTATUS) || (defined(USING_SGTTY) && defined(TIOCGSTAT))
TTYCHAR(VSTATUS, 17)		SGTTYCHAR(tiots.tc_statusc, 17)
#endif /* VSTATUS */
a57 3
#if defined(IUCLC) || defined(USING_SGTTY)
TTYMODE(IUCLC, 	c_iflag, 37)	SGTTYMODE(LCASE, tio.sg_flags, 37)
#endif
a78 3
#if defined(ECHOCTL) || defined(USING_SGTTY)
TTYMODE(ECHOCTL,c_lflag, 60)	SGTTYMODE(LCTLECH, tiolm, 60)
#endif /* ECHOCTL */
a81 3
#if defined(PENDIN) || defined(USING_SGTTY)
TTYMODE(PENDIN,	c_lflag, 62)	SGTTYMODE(LPENDIN, tiolm, 62)
#endif /* PENDIN */
a83 3
#if defined(OLCUC) || defined(USING_SGTTY)
TTYMODE(OLCUC,	c_oflag, 71)	SGTTYMODE(LCASE, tio.sg_flags, 71)
#endif
@

