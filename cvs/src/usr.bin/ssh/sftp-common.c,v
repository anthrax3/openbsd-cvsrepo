head	1.29;
access;
symbols
	OPENBSD_6_0:1.28.0.10
	OPENBSD_6_0_BASE:1.28
	OPENBSD_5_9:1.28.0.6
	OPENBSD_5_9_BASE:1.28
	OPENBSD_5_8:1.28.0.4
	OPENBSD_5_8_BASE:1.28
	OPENBSD_5_7:1.28.0.2
	OPENBSD_5_7_BASE:1.28
	OPENBSD_5_6:1.26.0.6
	OPENBSD_5_6_BASE:1.26
	OPENBSD_5_5:1.26.0.4
	OPENBSD_5_5_BASE:1.26
	OPENBSD_5_4:1.24.0.2
	OPENBSD_5_4_BASE:1.24
	OPENBSD_5_3:1.23.0.14
	OPENBSD_5_3_BASE:1.23
	OPENBSD_5_2:1.23.0.12
	OPENBSD_5_2_BASE:1.23
	OPENBSD_5_1_BASE:1.23
	OPENBSD_5_1:1.23.0.10
	OPENBSD_5_0:1.23.0.8
	OPENBSD_5_0_BASE:1.23
	OPENBSD_4_9:1.23.0.6
	OPENBSD_4_9_BASE:1.23
	OPENBSD_4_8:1.23.0.4
	OPENBSD_4_8_BASE:1.23
	OPENBSD_4_7:1.23.0.2
	OPENBSD_4_7_BASE:1.23
	OPENBSD_4_6:1.20.0.16
	OPENBSD_4_6_BASE:1.20
	OPENBSD_4_5:1.20.0.12
	OPENBSD_4_5_BASE:1.20
	OPENBSD_4_4:1.20.0.10
	OPENBSD_4_4_BASE:1.20
	OPENBSD_4_3:1.20.0.8
	OPENBSD_4_3_BASE:1.20
	OPENBSD_4_2:1.20.0.6
	OPENBSD_4_2_BASE:1.20
	OPENBSD_4_1:1.20.0.2
	OPENBSD_4_1_BASE:1.20
	OPENBSD_4_0:1.20.0.4
	OPENBSD_4_0_BASE:1.20
	OPENBSD_3_9:1.11.0.2
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.10.0.8
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.6
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.4
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.2
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.8.0.2
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_8:1.2.0.2;
locks; strict;
comment	@ * @;


1.29
date	2016.09.12.01.22.38;	author deraadt;	state Exp;
branches;
next	1.28;
commitid	ZllbGwdb0fOmLhjK;

1.28
date	2015.01.20.23.14.00;	author deraadt;	state Exp;
branches;
next	1.27;
commitid	cBx23BaCk6gYBpRj;

1.27
date	2015.01.14.13.54.13;	author djm;	state Exp;
branches;
next	1.26;
commitid	5mVYZPiIJUHzgjMn;

1.26
date	2014.01.09.03.26.00;	author guenther;	state Exp;
branches;
next	1.25;

1.25
date	2013.11.08.11.15.19;	author dtucker;	state Exp;
branches;
next	1.24;

1.24
date	2013.05.17.00.13.14;	author djm;	state Exp;
branches;
next	1.23;

1.23
date	2010.01.15.09.24.23;	author markus;	state Exp;
branches;
next	1.22;

1.22
date	2010.01.14.23.41.49;	author dtucker;	state Exp;
branches;
next	1.21;

1.21
date	2010.01.13.01.40.16;	author djm;	state Exp;
branches;
next	1.20;

1.20
date	2006.08.03.03.34.42;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2006.08.01.23.22.47;	author stevesk;	state Exp;
branches;
next	1.18;

1.18
date	2006.07.26.02.35.17;	author stevesk;	state Exp;
branches;
next	1.17;

1.17
date	2006.07.22.20.48.23;	author stevesk;	state Exp;
branches;
next	1.16;

1.16
date	2006.07.22.19.08.54;	author stevesk;	state Exp;
branches;
next	1.15;

1.15
date	2006.07.06.16.03.53;	author stevesk;	state Exp;
branches;
next	1.14;

1.14
date	2006.07.02.22.45.59;	author stevesk;	state Exp;
branches;
next	1.13;

1.13
date	2006.03.25.13.17.02;	author djm;	state Exp;
branches;
next	1.12;

1.12
date	2006.03.19.18.51.18;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2006.02.20.17.19.54;	author stevesk;	state Exp;
branches
	1.11.2.1;
next	1.10;

1.10
date	2003.11.10.16.23.41;	author jakob;	state Exp;
branches
	1.10.8.1;
next	1.9;

1.9
date	2003.05.24.09.30.40;	author djm;	state Exp;
branches
	1.9.2.1;
next	1.8;

1.8
date	2002.10.16.14.31.48;	author itojun;	state Exp;
branches
	1.8.2.1;
next	1.7;

1.7
date	2002.09.11.22.41.50;	author djm;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2002.06.23.09.30.14;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2001.12.02.02.08.32;	author deraadt;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2001.07.14.15.10.17;	author stevesk;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2001.06.26.17.27.24;	author markus;	state Exp;
branches;
next	1.2;

1.2
date	2001.02.06.23.50.10;	author markus;	state Exp;
branches
	1.2.2.1
	1.2.4.1
	1.2.6.1;
next	1.1;

1.1
date	2001.02.04.11.11.54;	author djm;	state Exp;
branches;
next	;

1.2.2.1
date	2001.02.16.20.13.14;	author jason;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2001.02.19.17.19.22;	author jason;	state Exp;
branches;
next	1.2.2.3;

1.2.2.3
date	2001.03.21.19.46.28;	author jason;	state Exp;
branches;
next	1.2.2.4;

1.2.2.4
date	2001.05.07.21.09.34;	author jason;	state Exp;
branches;
next	1.2.2.5;

1.2.2.5
date	2001.09.27.00.15.42;	author miod;	state Exp;
branches;
next	1.2.2.6;

1.2.2.6
date	2002.03.08.17.04.43;	author brad;	state Exp;
branches;
next	;

1.2.4.1
date	2001.03.12.15.44.15;	author jason;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2001.03.21.18.53.04;	author jason;	state Exp;
branches;
next	;

1.2.6.1
date	2001.09.27.19.03.55;	author jason;	state Exp;
branches;
next	1.2.6.2;

1.2.6.2
date	2002.03.09.00.20.45;	author miod;	state Exp;
branches;
next	;

1.4.2.1
date	2002.03.07.17.37.47;	author jason;	state Exp;
branches;
next	1.4.2.2;

1.4.2.2
date	2002.06.26.18.22.36;	author miod;	state Exp;
branches;
next	1.4.2.3;

1.4.2.3
date	2002.10.11.14.53.07;	author miod;	state Exp;
branches;
next	;

1.5.2.1
date	2002.06.26.15.30.38;	author jason;	state Exp;
branches;
next	1.5.2.2;

1.5.2.2
date	2002.10.11.14.51.52;	author miod;	state Exp;
branches;
next	1.5.2.3;

1.5.2.3
date	2003.04.03.22.35.17;	author miod;	state Exp;
branches;
next	;

1.7.2.1
date	2003.04.01.00.12.14;	author margarida;	state Exp;
branches;
next	1.7.2.2;

1.7.2.2
date	2003.09.16.21.20.27;	author brad;	state Exp;
branches;
next	;

1.8.2.1
date	2003.09.16.20.50.43;	author brad;	state Exp;
branches;
next	1.8.2.2;

1.8.2.2
date	2004.03.04.18.18.16;	author brad;	state Exp;
branches;
next	;

1.9.2.1
date	2004.02.28.03.51.34;	author brad;	state Exp;
branches;
next	;

1.10.8.1
date	2006.10.06.03.19.33;	author brad;	state Exp;
branches;
next	;

1.11.2.1
date	2006.09.30.04.06.51;	author brad;	state Exp;
branches;
next	;


desc
@@


1.29
log
@Add MAXIMUM(), MINIMUM(), and ROUNDUP() to misc.h, then use those definitions
rather than pulling <sys/param.h> and unknown namespace pollution.
ok djm markus dtucker
@
text
@/* $OpenBSD: sftp-common.c,v 1.28 2015/01/20 23:14:00 deraadt Exp $ */
/*
 * Copyright (c) 2001 Markus Friedl.  All rights reserved.
 * Copyright (c) 2001 Damien Miller.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/stat.h>

#include <grp.h>
#include <pwd.h>
#include <stdio.h>
#include <string.h>
#include <time.h>
#include <stdarg.h>
#include <stdlib.h>
#include <util.h>

#include "xmalloc.h"
#include "ssherr.h"
#include "sshbuf.h"
#include "log.h"
#include "misc.h"

#include "sftp.h"
#include "sftp-common.h"

/* Clear contents of attributes structure */
void
attrib_clear(Attrib *a)
{
	a->flags = 0;
	a->size = 0;
	a->uid = 0;
	a->gid = 0;
	a->perm = 0;
	a->atime = 0;
	a->mtime = 0;
}

/* Convert from struct stat to filexfer attribs */
void
stat_to_attrib(const struct stat *st, Attrib *a)
{
	attrib_clear(a);
	a->flags = 0;
	a->flags |= SSH2_FILEXFER_ATTR_SIZE;
	a->size = st->st_size;
	a->flags |= SSH2_FILEXFER_ATTR_UIDGID;
	a->uid = st->st_uid;
	a->gid = st->st_gid;
	a->flags |= SSH2_FILEXFER_ATTR_PERMISSIONS;
	a->perm = st->st_mode;
	a->flags |= SSH2_FILEXFER_ATTR_ACMODTIME;
	a->atime = st->st_atime;
	a->mtime = st->st_mtime;
}

/* Convert from filexfer attribs to struct stat */
void
attrib_to_stat(const Attrib *a, struct stat *st)
{
	memset(st, 0, sizeof(*st));

	if (a->flags & SSH2_FILEXFER_ATTR_SIZE)
		st->st_size = a->size;
	if (a->flags & SSH2_FILEXFER_ATTR_UIDGID) {
		st->st_uid = a->uid;
		st->st_gid = a->gid;
	}
	if (a->flags & SSH2_FILEXFER_ATTR_PERMISSIONS)
		st->st_mode = a->perm;
	if (a->flags & SSH2_FILEXFER_ATTR_ACMODTIME) {
		st->st_atime = a->atime;
		st->st_mtime = a->mtime;
	}
}

/* Decode attributes in buffer */
int
decode_attrib(struct sshbuf *b, Attrib *a)
{
	int r;

	attrib_clear(a);
	if ((r = sshbuf_get_u32(b, &a->flags)) != 0)
		return r;
	if (a->flags & SSH2_FILEXFER_ATTR_SIZE) {
		if ((r = sshbuf_get_u64(b, &a->size)) != 0)
			return r;
	}
	if (a->flags & SSH2_FILEXFER_ATTR_UIDGID) {
		if ((r = sshbuf_get_u32(b, &a->uid)) != 0 ||
		    (r = sshbuf_get_u32(b, &a->gid)) != 0)
			return r;
	}
	if (a->flags & SSH2_FILEXFER_ATTR_PERMISSIONS) {
		if ((r = sshbuf_get_u32(b, &a->perm)) != 0)
			return r;
	}
	if (a->flags & SSH2_FILEXFER_ATTR_ACMODTIME) {
		if ((r = sshbuf_get_u32(b, &a->atime)) != 0 ||
		    (r = sshbuf_get_u32(b, &a->mtime)) != 0)
			return r;
	}
	/* vendor-specific extensions */
	if (a->flags & SSH2_FILEXFER_ATTR_EXTENDED) {
		char *type;
		u_char *data;
		size_t dlen;
		u_int i, count;

		if ((r = sshbuf_get_u32(b, &count)) != 0)
			fatal("%s: buffer error: %s", __func__, ssh_err(r));
		for (i = 0; i < count; i++) {
			if ((r = sshbuf_get_cstring(b, &type, NULL)) != 0 ||
			    (r = sshbuf_get_string(b, &data, &dlen)) != 0)
				return r;
			debug3("Got file attribute \"%.100s\" len %zu",
			    type, dlen);
			free(type);
			free(data);
		}
	}
	return 0;
}

/* Encode attributes to buffer */
int
encode_attrib(struct sshbuf *b, const Attrib *a)
{
	int r;

	if ((r = sshbuf_put_u32(b, a->flags)) != 0)
		return r;
	if (a->flags & SSH2_FILEXFER_ATTR_SIZE) {
		if ((r = sshbuf_put_u64(b, a->size)) != 0)
			return r;
	}
	if (a->flags & SSH2_FILEXFER_ATTR_UIDGID) {
		if ((r = sshbuf_put_u32(b, a->uid)) != 0 ||
		    (r = sshbuf_put_u32(b, a->gid)) != 0)
			return r;
	}
	if (a->flags & SSH2_FILEXFER_ATTR_PERMISSIONS) {
		if ((r = sshbuf_put_u32(b, a->perm)) != 0)
			return r;
	}
	if (a->flags & SSH2_FILEXFER_ATTR_ACMODTIME) {
		if ((r = sshbuf_put_u32(b, a->atime)) != 0 ||
		    (r = sshbuf_put_u32(b, a->mtime)) != 0)
			return r;
	}
	return 0;
}

/* Convert from SSH2_FX_ status to text error message */
const char *
fx2txt(int status)
{
	switch (status) {
	case SSH2_FX_OK:
		return("No error");
	case SSH2_FX_EOF:
		return("End of file");
	case SSH2_FX_NO_SUCH_FILE:
		return("No such file or directory");
	case SSH2_FX_PERMISSION_DENIED:
		return("Permission denied");
	case SSH2_FX_FAILURE:
		return("Failure");
	case SSH2_FX_BAD_MESSAGE:
		return("Bad message");
	case SSH2_FX_NO_CONNECTION:
		return("No connection");
	case SSH2_FX_CONNECTION_LOST:
		return("Connection lost");
	case SSH2_FX_OP_UNSUPPORTED:
		return("Operation unsupported");
	default:
		return("Unknown status");
	}
	/* NOTREACHED */
}

/*
 * drwxr-xr-x    5 markus   markus       1024 Jan 13 18:39 .ssh
 */
char *
ls_file(const char *name, const struct stat *st, int remote, int si_units)
{
	int ulen, glen, sz = 0;
	struct tm *ltime = localtime(&st->st_mtime);
	char *user, *group;
	char buf[1024], mode[11+1], tbuf[12+1], ubuf[11+1], gbuf[11+1];
	char sbuf[FMT_SCALED_STRSIZE];
	time_t now;

	strmode(st->st_mode, mode);
	if (!remote) {
		user = user_from_uid(st->st_uid, 0);
	} else {
		snprintf(ubuf, sizeof ubuf, "%u", (u_int)st->st_uid);
		user = ubuf;
	}
	if (!remote) {
		group = group_from_gid(st->st_gid, 0);
	} else {
		snprintf(gbuf, sizeof gbuf, "%u", (u_int)st->st_gid);
		group = gbuf;
	}
	if (ltime != NULL) {
		now = time(NULL);
		if (now - (365*24*60*60)/2 < st->st_mtime &&
		    now >= st->st_mtime)
			sz = strftime(tbuf, sizeof tbuf, "%b %e %H:%M", ltime);
		else
			sz = strftime(tbuf, sizeof tbuf, "%b %e  %Y", ltime);
	}
	if (sz == 0)
		tbuf[0] = '\0';
	ulen = MAXIMUM(strlen(user), 8);
	glen = MAXIMUM(strlen(group), 8);
	if (si_units) {
		fmt_scaled((long long)st->st_size, sbuf);
		snprintf(buf, sizeof buf, "%s %3u %-*s %-*s %8s %s %s", mode,
		    (u_int)st->st_nlink, ulen, user, glen, group,
		    sbuf, tbuf, name);
	} else {
		snprintf(buf, sizeof buf, "%s %3u %-*s %-*s %8llu %s %s", mode,
		    (u_int)st->st_nlink, ulen, user, glen, group,
		    (unsigned long long)st->st_size, tbuf, name);
	}
	return xstrdup(buf);
}
@


1.28
log
@Reduce use of <sys/param.h> and transition to <limits.h> throughout.
ok djm markus
@
text
@d1 1
a1 1
/* $OpenBSD: sftp-common.c,v 1.27 2015/01/14 13:54:13 djm Exp $ */
a26 1
#include <sys/param.h>	/* MAX */
d43 1
d242 2
a243 2
	ulen = MAX(strlen(user), 8);
	glen = MAX(strlen(group), 8);
@


1.27
log
@update sftp client and server to new buffer API.
pretty much just mechanical changes; with & ok markus
@
text
@d1 1
a1 1
/* $OpenBSD: sftp-common.c,v 1.26 2014/01/09 03:26:00 guenther Exp $ */
d27 1
a29 1
#include <sys/param.h>
@


1.26
log
@When formating the time for "ls -l"-style output, show dates in the future
with the year, and rearrange a comparison to avoid a potentional signed
arithmetic overflow that would give the wrong result.

ok djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: sftp-common.c,v 1.25 2013/11/08 11:15:19 dtucker Exp $ */
d41 2
a42 1
#include "buffer.h"
d100 2
a101 2
Attrib *
decode_attrib(Buffer *b)
d103 1
a103 1
	static Attrib a;
d105 20
a124 13
	attrib_clear(&a);
	a.flags = buffer_get_int(b);
	if (a.flags & SSH2_FILEXFER_ATTR_SIZE)
		a.size = buffer_get_int64(b);
	if (a.flags & SSH2_FILEXFER_ATTR_UIDGID) {
		a.uid = buffer_get_int(b);
		a.gid = buffer_get_int(b);
	}
	if (a.flags & SSH2_FILEXFER_ATTR_PERMISSIONS)
		a.perm = buffer_get_int(b);
	if (a.flags & SSH2_FILEXFER_ATTR_ACMODTIME) {
		a.atime = buffer_get_int(b);
		a.mtime = buffer_get_int(b);
d127 5
a131 3
	if (a.flags & SSH2_FILEXFER_ATTR_EXTENDED) {
		char *type, *data;
		int i, count;
d133 2
a134 1
		count = buffer_get_int(b);
d136 5
a140 3
			type = buffer_get_string(b, NULL);
			data = buffer_get_string(b, NULL);
			debug3("Got file attribute \"%s\"", type);
d145 1
a145 1
	return &a;
d149 2
a150 2
void
encode_attrib(Buffer *b, const Attrib *a)
d152 8
a159 3
	buffer_put_int(b, a->flags);
	if (a->flags & SSH2_FILEXFER_ATTR_SIZE)
		buffer_put_int64(b, a->size);
d161 7
a167 2
		buffer_put_int(b, a->uid);
		buffer_put_int(b, a->gid);
a168 2
	if (a->flags & SSH2_FILEXFER_ATTR_PERMISSIONS)
		buffer_put_int(b, a->perm);
d170 3
a172 2
		buffer_put_int(b, a->atime);
		buffer_put_int(b, a->mtime);
d174 1
@


1.25
log
@Include stdlib.h for free() as per the man page.
@
text
@d1 1
a1 1
/* $OpenBSD: sftp-common.c,v 1.24 2013/05/17 00:13:14 djm Exp $ */
d194 1
d210 3
a212 1
		if (time(NULL) - st->st_mtime < (365*24*60*60)/2)
@


1.24
log
@bye, bye xfree(); ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: sftp-common.c,v 1.23 2010/01/15 09:24:23 markus Exp $ */
d37 1
@


1.23
log
@unused
@
text
@d1 1
a1 1
/* $OpenBSD: sftp-common.c,v 1.22 2010/01/14 23:41:49 dtucker Exp $ */
d127 2
a128 2
			xfree(type);
			xfree(data);
@


1.22
log
@use user_from{uid,gid} to lookup up ids since it keeps a small cache.  ok djm
@
text
@d1 1
a1 1
/* $OpenBSD: sftp-common.c,v 1.21 2010/01/13 01:40:16 djm Exp $ */
a188 2
	struct passwd *pw;
	struct group *gr;
@


1.21
log
@support '-h' (human-readable units) for sftp's ls command, just like
ls(1); ok dtucker@@
@
text
@d1 1
a1 1
/* $OpenBSD: sftp-common.c,v 1.20 2006/08/03 03:34:42 deraadt Exp $ */
d197 2
a198 2
	if (!remote && (pw = getpwuid(st->st_uid)) != NULL) {
		user = pw->pw_name;
d203 2
a204 2
	if (!remote && (gr = getgrgid(st->st_gid)) != NULL) {
		group = gr->gr_name;
@


1.20
log
@almost entirely get rid of the culture of ".h files that include .h files"
ok djm, sort of ok stevesk
makes the pain stop in one easy step
@
text
@d1 1
a1 1
/* $OpenBSD: sftp-common.c,v 1.19 2006/08/01 23:22:47 stevesk Exp $ */
d37 1
d186 1
a186 1
ls_file(const char *name, const struct stat *st, int remote)
d194 1
d219 10
a228 3
	snprintf(buf, sizeof buf, "%s %3u %-*s %-*s %8llu %s %s", mode,
	    (u_int)st->st_nlink, ulen, user, glen, group,
	    (unsigned long long)st->st_size, tbuf, name);
@


1.19
log
@move #include <stdio.h> out of includes.h
@
text
@d1 1
a1 1
/* $OpenBSD: sftp-common.c,v 1.18 2006/07/26 02:35:17 stevesk Exp $ */
a26 2
#include "includes.h"

d36 1
d38 1
a39 1
#include "bufaux.h"
a40 1
#include "xmalloc.h"
@


1.18
log
@move #include <sys/param.h> out of includes.h
@
text
@d1 1
a1 1
/* $OpenBSD: sftp-common.c,v 1.17 2006/07/22 20:48:23 stevesk Exp $ */
d35 1
@


1.17
log
@move #include <string.h> out of includes.h
@
text
@d1 1
a1 1
/* $OpenBSD: sftp-common.c,v 1.16 2006/07/22 19:08:54 stevesk Exp $ */
d31 1
@


1.16
log
@move #include <time.h> out of includes.h
@
text
@d1 1
a1 1
/* $OpenBSD: sftp-common.c,v 1.15 2006/07/06 16:03:53 stevesk Exp $ */
d34 1
@


1.15
log
@move #include <pwd.h> out of includes.h; ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: sftp-common.c,v 1.14 2006/07/02 22:45:59 stevesk Exp $ */
d34 1
@


1.14
log
@move #include <grp.h> out of includes.h
@
text
@d1 1
a1 1
/* $OpenBSD: sftp-common.c,v 1.13 2006/03/25 13:17:02 djm Exp $ */
d33 1
@


1.13
log
@Put $OpenBSD$ tags back (as comments) to replace the RCSID()s that
Theo nuked - our scripts to sync -portable need them in the files
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d31 2
@


1.12
log
@RCSID() can die
@
text
@d1 1
@


1.11
log
@move #include <sys/stat.h> out of includes.h; ok markus@@
@
text
@a26 1
RCSID("$OpenBSD: sftp-common.c,v 1.10 2003/11/10 16:23:41 jakob Exp $");
@


1.11.2.1
log
@upgrade to OpenSSH 4.4
@
text
@a0 1
/* $OpenBSD: sftp-common.c,v 1.20 2006/08/03 03:34:42 deraadt Exp $ */
d26 3
a30 8
#include <sys/param.h>

#include <grp.h>
#include <pwd.h>
#include <stdio.h>
#include <string.h>
#include <time.h>
#include <stdarg.h>
a31 1
#include "xmalloc.h"
d33 1
d35 1
@


1.10
log
@constify. ok markus@@ & djm@@
@
text
@d27 4
a30 1
RCSID("$OpenBSD: sftp-common.c,v 1.9 2003/05/24 09:30:40 djm Exp $");
@


1.10.8.1
log
@upgrade to OpenSSH 4.4
@
text
@a0 1
/* $OpenBSD: sftp-common.c,v 1.20 2006/08/03 03:34:42 deraadt Exp $ */
d26 2
a27 3
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/param.h>
a28 8
#include <grp.h>
#include <pwd.h>
#include <stdio.h>
#include <string.h>
#include <time.h>
#include <stdarg.h>

#include "xmalloc.h"
d30 1
d32 1
@


1.9
log
@cast some types for printing; ok markus@@
@
text
@d27 1
a27 1
RCSID("$OpenBSD: sftp-common.c,v 1.8 2002/10/16 14:31:48 itojun Exp $");
d52 1
a52 1
stat_to_attrib(struct stat *st, Attrib *a)
d70 1
a70 1
attrib_to_stat(Attrib *a, struct stat *st)
d127 1
a127 1
encode_attrib(Buffer *b, Attrib *a)
d177 1
a177 1
ls_file(char *name, struct stat *st, int remote)
@


1.9.2.1
log
@upgrade to OpenSSH 3.8
@
text
@d27 1
a27 1
RCSID("$OpenBSD: sftp-common.c,v 1.10 2003/11/10 16:23:41 jakob Exp $");
d52 1
a52 1
stat_to_attrib(const struct stat *st, Attrib *a)
d70 1
a70 1
attrib_to_stat(const Attrib *a, struct stat *st)
d127 1
a127 1
encode_attrib(Buffer *b, const Attrib *a)
d177 1
a177 1
ls_file(const char *name, const struct stat *st, int remote)
@


1.8
log
@64bit pedant.  %llu is "unsigned long long".  markus ok
@
text
@d27 1
a27 1
RCSID("$OpenBSD: sftp-common.c,v 1.7 2002/09/11 22:41:50 djm Exp $");
d209 2
a210 2
	snprintf(buf, sizeof buf, "%s %3d %-*s %-*s %8llu %s %s", mode,
	    st->st_nlink, ulen, user, glen, group,
@


1.8.2.1
log
@upgrade to OpenSSH 3.7
@
text
@d27 1
a27 1
RCSID("$OpenBSD: sftp-common.c,v 1.9 2003/05/24 09:30:40 djm Exp $");
d209 2
a210 2
	snprintf(buf, sizeof buf, "%s %3u %-*s %-*s %8llu %s %s", mode,
	    (u_int)st->st_nlink, ulen, user, glen, group,
@


1.8.2.2
log
@upgrade to OpenSSH 3.8upgrade to OpenSSH 3.8upgrade to OpenSSH 3.8
@
text
@d27 1
a27 1
RCSID("$OpenBSD: sftp-common.c,v 1.10 2003/11/10 16:23:41 jakob Exp $");
d52 1
a52 1
stat_to_attrib(const struct stat *st, Attrib *a)
d70 1
a70 1
attrib_to_stat(const Attrib *a, struct stat *st)
d127 1
a127 1
encode_attrib(Buffer *b, const Attrib *a)
d177 1
a177 1
ls_file(const char *name, const struct stat *st, int remote)
@


1.7
log
@support for short/long listings and globbing in "ls"; ok markus@@
@
text
@d27 1
a27 1
RCSID("$OpenBSD: sftp-common.c,v 1.6 2002/06/23 09:30:14 deraadt Exp $");
d211 1
a211 1
	    (u_int64_t)st->st_size, tbuf, name);
@


1.7.2.1
log
@Update to OpenSSH 3.6
@
text
@d27 1
a27 1
RCSID("$OpenBSD: sftp-common.c,v 1.8 2002/10/16 14:31:48 itojun Exp $");
d211 1
a211 1
	    (unsigned long long)st->st_size, tbuf, name);
@


1.7.2.2
log
@upgrade to OpenSSH 3.7
@
text
@d27 1
a27 1
RCSID("$OpenBSD: sftp-common.c,v 1.9 2003/05/24 09:30:40 djm Exp $");
d209 2
a210 2
	snprintf(buf, sizeof buf, "%s %3u %-*s %-*s %8llu %s %s", mode,
	    (u_int)st->st_nlink, ulen, user, glen, group,
@


1.6
log
@bunch of u_int vs int stuff
@
text
@d27 1
a27 1
RCSID("$OpenBSD: sftp-common.c,v 1.5 2001/12/02 02:08:32 deraadt Exp $");
d68 20
d171 42
@


1.5
log
@zap };
@
text
@d27 1
a27 1
RCSID("$OpenBSD: sftp-common.c,v 1.4 2001/07/14 15:10:17 stevesk Exp $");
d73 1
d92 1
@


1.5.2.1
log
@Pull in OpenSSH-3.4
@
text
@d27 1
a27 1
RCSID("$OpenBSD: sftp-common.c,v 1.6 2002/06/23 09:30:14 deraadt Exp $");
a72 1

a90 1

@


1.5.2.2
log
@Update to OpenSSH 3.5
@
text
@d27 1
a27 1
RCSID("$OpenBSD: sftp-common.c,v 1.7 2002/09/11 22:41:50 djm Exp $");
a67 20
/* Convert from filexfer attribs to struct stat */
void
attrib_to_stat(Attrib *a, struct stat *st)
{
	memset(st, 0, sizeof(*st));

	if (a->flags & SSH2_FILEXFER_ATTR_SIZE)
		st->st_size = a->size;
	if (a->flags & SSH2_FILEXFER_ATTR_UIDGID) {
		st->st_uid = a->uid;
		st->st_gid = a->gid;
	}
	if (a->flags & SSH2_FILEXFER_ATTR_PERMISSIONS)
		st->st_mode = a->perm;
	if (a->flags & SSH2_FILEXFER_ATTR_ACMODTIME) {
		st->st_atime = a->atime;
		st->st_mtime = a->mtime;
	}
}

a150 42
}

/*
 * drwxr-xr-x    5 markus   markus       1024 Jan 13 18:39 .ssh
 */
char *
ls_file(char *name, struct stat *st, int remote)
{
	int ulen, glen, sz = 0;
	struct passwd *pw;
	struct group *gr;
	struct tm *ltime = localtime(&st->st_mtime);
	char *user, *group;
	char buf[1024], mode[11+1], tbuf[12+1], ubuf[11+1], gbuf[11+1];

	strmode(st->st_mode, mode);
	if (!remote && (pw = getpwuid(st->st_uid)) != NULL) {
		user = pw->pw_name;
	} else {
		snprintf(ubuf, sizeof ubuf, "%u", (u_int)st->st_uid);
		user = ubuf;
	}
	if (!remote && (gr = getgrgid(st->st_gid)) != NULL) {
		group = gr->gr_name;
	} else {
		snprintf(gbuf, sizeof gbuf, "%u", (u_int)st->st_gid);
		group = gbuf;
	}
	if (ltime != NULL) {
		if (time(NULL) - st->st_mtime < (365*24*60*60)/2)
			sz = strftime(tbuf, sizeof tbuf, "%b %e %H:%M", ltime);
		else
			sz = strftime(tbuf, sizeof tbuf, "%b %e  %Y", ltime);
	}
	if (sz == 0)
		tbuf[0] = '\0';
	ulen = MAX(strlen(user), 8);
	glen = MAX(strlen(group), 8);
	snprintf(buf, sizeof buf, "%s %3d %-*s %-*s %8llu %s %s", mode,
	    st->st_nlink, ulen, user, glen, group,
	    (u_int64_t)st->st_size, tbuf, name);
	return xstrdup(buf);
@


1.5.2.3
log
@Merge OpenSSH 3.6.1
@
text
@d27 1
a27 1
RCSID("$OpenBSD: sftp-common.c,v 1.8 2002/10/16 14:31:48 itojun Exp $");
d211 1
a211 1
	    (unsigned long long)st->st_size, tbuf, name);
@


1.4
log
@delete spurious #includes; ok deraadt@@ markus@@
@
text
@d27 1
a27 1
RCSID("$OpenBSD: sftp-common.c,v 1.3 2001/06/26 17:27:24 markus Exp $");
d147 1
a147 1
	};
@


1.4.2.1
log
@Update to OpenSSH-3.1 on 3.0-stable branch
@
text
@d27 1
a27 1
RCSID("$OpenBSD: sftp-common.c,v 1.5 2001/12/02 02:08:32 deraadt Exp $");
d147 1
a147 1
	}
@


1.4.2.2
log
@There was an update to OpenSSH 3.4, and people rejoiced.
@
text
@d27 1
a27 1
RCSID("$OpenBSD: sftp-common.c,v 1.4.2.1 2002/03/07 17:37:47 jason Exp $");
a72 1

a90 1

@


1.4.2.3
log
@Update to OpenSSH 3.5
@
text
@d27 1
a27 1
RCSID("$OpenBSD: sftp-common.c,v 1.7 2002/09/11 22:41:50 djm Exp $");
a67 20
/* Convert from filexfer attribs to struct stat */
void
attrib_to_stat(Attrib *a, struct stat *st)
{
	memset(st, 0, sizeof(*st));

	if (a->flags & SSH2_FILEXFER_ATTR_SIZE)
		st->st_size = a->size;
	if (a->flags & SSH2_FILEXFER_ATTR_UIDGID) {
		st->st_uid = a->uid;
		st->st_gid = a->gid;
	}
	if (a->flags & SSH2_FILEXFER_ATTR_PERMISSIONS)
		st->st_mode = a->perm;
	if (a->flags & SSH2_FILEXFER_ATTR_ACMODTIME) {
		st->st_atime = a->atime;
		st->st_mtime = a->mtime;
	}
}

a150 42
}

/*
 * drwxr-xr-x    5 markus   markus       1024 Jan 13 18:39 .ssh
 */
char *
ls_file(char *name, struct stat *st, int remote)
{
	int ulen, glen, sz = 0;
	struct passwd *pw;
	struct group *gr;
	struct tm *ltime = localtime(&st->st_mtime);
	char *user, *group;
	char buf[1024], mode[11+1], tbuf[12+1], ubuf[11+1], gbuf[11+1];

	strmode(st->st_mode, mode);
	if (!remote && (pw = getpwuid(st->st_uid)) != NULL) {
		user = pw->pw_name;
	} else {
		snprintf(ubuf, sizeof ubuf, "%u", (u_int)st->st_uid);
		user = ubuf;
	}
	if (!remote && (gr = getgrgid(st->st_gid)) != NULL) {
		group = gr->gr_name;
	} else {
		snprintf(gbuf, sizeof gbuf, "%u", (u_int)st->st_gid);
		group = gbuf;
	}
	if (ltime != NULL) {
		if (time(NULL) - st->st_mtime < (365*24*60*60)/2)
			sz = strftime(tbuf, sizeof tbuf, "%b %e %H:%M", ltime);
		else
			sz = strftime(tbuf, sizeof tbuf, "%b %e  %Y", ltime);
	}
	if (sz == 0)
		tbuf[0] = '\0';
	ulen = MAX(strlen(user), 8);
	glen = MAX(strlen(group), 8);
	snprintf(buf, sizeof buf, "%s %3d %-*s %-*s %8llu %s %s", mode,
	    st->st_nlink, ulen, user, glen, group,
	    (u_int64_t)st->st_size, tbuf, name);
	return xstrdup(buf);
@


1.3
log
@remove comments from .h, since they are cut&paste from the .c files
and out of sync
@
text
@d27 1
a27 1
RCSID("$OpenBSD: sftp-common.c,v 1.2 2001/02/06 23:50:10 markus Exp $");
a30 1
#include "getput.h"
@


1.2
log
@use lower case error messages similar to errno.h
@
text
@d27 1
a27 1
RCSID("$OpenBSD: sftp-common.c,v 1.1 2001/02/04 11:11:54 djm Exp $");
d38 1
d51 1
d69 1
d104 1
d123 1
a150 1

@


1.2.6.1
log
@Pull in OpenSSH-2.9.9
@
text
@d27 1
a27 1
RCSID("$OpenBSD: sftp-common.c,v 1.4 2001/07/14 15:10:17 stevesk Exp $");
d31 1
a37 1
/* Clear contents of attributes structure */
a49 1
/* Convert from struct stat to filexfer attribs */
a66 1
/* Decode attributes in buffer */
a100 1
/* Encode attributes to buffer */
a118 1
/* Convert from SSH2_FX_ status to text error message */
d146 1
@


1.2.6.2
log
@Merge OpenSSH 3.1, keeping /etc as configuration files directory.
(i.e. OpenSSH 3.1 + openbsd29_3.1.patch)
@
text
@d27 1
a27 1
RCSID("$OpenBSD: sftp-common.c,v 1.5 2001/12/02 02:08:32 deraadt Exp $");
d147 1
a147 1
	}
@


1.2.4.1
log
@OpenSSH-2.5.1 for 2.7 patch branch
@
text
@d27 1
a27 1
RCSID("$OpenBSD: sftp-common.c,v 1.2 2001/02/06 23:50:10 markus Exp $");
@


1.2.4.2
log
@Pull in OpenSSH-2.5.2 for 2.7 branch.
@
text
@@


1.2.2.1
log
@Pull in OpenSSH 2.5.0
@
text
@d27 1
a27 1
RCSID("$OpenBSD: sftp-common.c,v 1.2 2001/02/06 23:50:10 markus Exp $");
@


1.2.2.2
log
@Pull in OpenSSH-2.5.1
@
text
@@


1.2.2.3
log
@Pull in OpenSSH-2.5.2 for 2.8 branch.
@
text
@@


1.2.2.4
log
@Pull in OpenSSH-2.9 to 2.8 branch.
@
text
@@


1.2.2.5
log
@Pull in OpenSSH 2.9.9 to the 2.8 branch.
@
text
@d27 1
a27 1
RCSID("$OpenBSD: sftp-common.c,v 1.4 2001/07/14 15:10:17 stevesk Exp $");
d31 1
a37 1
/* Clear contents of attributes structure */
a49 1
/* Convert from struct stat to filexfer attribs */
a66 1
/* Decode attributes in buffer */
a100 1
/* Encode attributes to buffer */
a118 1
/* Convert from SSH2_FX_ status to text error message */
d146 1
@


1.2.2.6
log
@Merge OpenSSH 3.1.
@
text
@d27 1
a27 1
RCSID("$OpenBSD: sftp-common.c,v 1.5 2001/12/02 02:08:32 deraadt Exp $");
d147 1
a147 1
	}
@


1.1
log
@Basic interactive sftp client; ok theo@@
@
text
@d27 1
a27 1
RCSID("$OpenBSD$");
d124 1
a124 1
		return("No Error");
d126 1
a126 1
		return("End of File");
d128 1
a128 1
		return("No Such File");
d130 1
a130 1
		return("Permission Denied");
@

