head	1.29;
access;
symbols
	OPENBSD_6_0:1.29.0.6
	OPENBSD_6_0_BASE:1.29
	OPENBSD_5_9:1.29.0.2
	OPENBSD_5_9_BASE:1.29
	OPENBSD_5_8:1.28.0.8
	OPENBSD_5_8_BASE:1.28
	OPENBSD_5_7:1.28.0.2
	OPENBSD_5_7_BASE:1.28
	OPENBSD_5_6:1.28.0.6
	OPENBSD_5_6_BASE:1.28
	OPENBSD_5_5:1.28.0.4
	OPENBSD_5_5_BASE:1.28
	OPENBSD_5_4:1.27.0.12
	OPENBSD_5_4_BASE:1.27
	OPENBSD_5_3:1.27.0.10
	OPENBSD_5_3_BASE:1.27
	OPENBSD_5_2:1.27.0.8
	OPENBSD_5_2_BASE:1.27
	OPENBSD_5_1_BASE:1.27
	OPENBSD_5_1:1.27.0.6
	OPENBSD_5_0:1.27.0.4
	OPENBSD_5_0_BASE:1.27
	OPENBSD_4_9:1.27.0.2
	OPENBSD_4_9_BASE:1.27
	OPENBSD_4_8:1.25.0.6
	OPENBSD_4_8_BASE:1.25
	OPENBSD_4_7:1.25.0.2
	OPENBSD_4_7_BASE:1.25
	OPENBSD_4_6:1.25.0.4
	OPENBSD_4_6_BASE:1.25
	OPENBSD_4_5:1.24.0.6
	OPENBSD_4_5_BASE:1.24
	OPENBSD_4_4:1.24.0.4
	OPENBSD_4_4_BASE:1.24
	OPENBSD_4_3:1.24.0.2
	OPENBSD_4_3_BASE:1.24
	OPENBSD_4_2:1.23.0.6
	OPENBSD_4_2_BASE:1.23
	OPENBSD_4_1:1.23.0.2
	OPENBSD_4_1_BASE:1.23
	OPENBSD_4_0:1.23.0.4
	OPENBSD_4_0_BASE:1.23
	OPENBSD_3_9:1.18.0.2
	OPENBSD_3_9_BASE:1.18
	OPENBSD_3_8:1.17.0.14
	OPENBSD_3_8_BASE:1.17
	OPENBSD_3_7:1.17.0.12
	OPENBSD_3_7_BASE:1.17
	OPENBSD_3_6:1.17.0.10
	OPENBSD_3_6_BASE:1.17
	OPENBSD_3_5:1.17.0.8
	OPENBSD_3_5_BASE:1.17
	OPENBSD_3_4:1.17.0.6
	OPENBSD_3_4_BASE:1.17
	OPENBSD_3_3:1.17.0.4
	OPENBSD_3_3_BASE:1.17
	OPENBSD_3_2:1.17.0.2
	OPENBSD_3_2_BASE:1.17
	OPENBSD_3_1:1.13.0.4
	OPENBSD_3_1_BASE:1.13
	OPENBSD_3_0:1.13.0.2
	OPENBSD_3_0_BASE:1.13
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_9:1.9.0.2
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.1.0.2
	OPENBSD_2_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.29
date	2015.11.15.22.26.49;	author jcs;	state Exp;
branches;
next	1.28;
commitid	mjNGB5AAtJeHDag2;

1.28
date	2013.10.16.02.31.47;	author djm;	state Exp;
branches;
next	1.27;

1.27
date	2010.11.29.23.45.51;	author djm;	state Exp;
branches;
next	1.26;

1.26
date	2010.10.06.06.39.28;	author djm;	state Exp;
branches;
next	1.25;

1.25
date	2009.05.27.06.38.16;	author andreas;	state Exp;
branches;
next	1.24;

1.24
date	2007.09.04.11.15.56;	author djm;	state Exp;
branches;
next	1.23;

1.23
date	2006.08.03.03.34.42;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	2006.07.08.21.47.12;	author stevesk;	state Exp;
branches;
next	1.21;

1.21
date	2006.07.06.16.03.53;	author stevesk;	state Exp;
branches;
next	1.20;

1.20
date	2006.06.06.10.20.20;	author markus;	state Exp;
branches;
next	1.19;

1.19
date	2006.03.25.22.22.43;	author djm;	state Exp;
branches;
next	1.18;

1.18
date	2005.12.06.22.38.28;	author reyk;	state Exp;
branches
	1.18.2.1;
next	1.17;

1.17
date	2002.06.19.00.27.55;	author deraadt;	state Exp;
branches
	1.17.12.1
	1.17.14.1;
next	1.16;

1.16
date	2002.06.11.04.14.26;	author markus;	state Exp;
branches;
next	1.15;

1.15
date	2002.06.09.13.32.01;	author markus;	state Exp;
branches;
next	1.14;

1.14
date	2002.05.23.19.24.30;	author markus;	state Exp;
branches;
next	1.13;

1.13
date	2001.10.08.19.05.05;	author markus;	state Exp;
branches
	1.13.2.1
	1.13.4.1;
next	1.12;

1.12
date	2001.06.26.17.27.25;	author markus;	state Exp;
branches;
next	1.11;

1.11
date	2001.06.26.06.33.03;	author itojun;	state Exp;
branches;
next	1.10;

1.10
date	2001.06.23.02.34.32;	author markus;	state Exp;
branches;
next	1.9;

1.9
date	2001.04.12.19.15.25;	author markus;	state Exp;
branches
	1.9.2.1;
next	1.8;

1.8
date	2001.04.06.21.00.15;	author markus;	state Exp;
branches;
next	1.7;

1.7
date	2001.03.26.08.07.09;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2001.02.15.23.19.59;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2001.01.29.01.58.18;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.21.19.05.59;	author markus;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.16.23.58.09;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2000.09.07.20.27.54;	author deraadt;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2000.04.26.21.28.33;	author markus;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2000.11.08.21.31.29;	author jason;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2001.03.12.15.44.17;	author jason;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2001.03.21.18.53.15;	author jason;	state Exp;
branches;
next	;

1.2.2.1
date	2001.02.16.20.13.22;	author jason;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2001.02.19.17.19.36;	author jason;	state Exp;
branches;
next	1.2.2.3;

1.2.2.3
date	2001.03.21.19.46.31;	author jason;	state Exp;
branches;
next	1.2.2.4;

1.2.2.4
date	2001.05.07.21.09.37;	author jason;	state Exp;
branches;
next	1.2.2.5;

1.2.2.5
date	2001.09.27.00.15.43;	author miod;	state Exp;
branches;
next	1.2.2.6;

1.2.2.6
date	2001.11.15.00.15.00;	author miod;	state Exp;
branches;
next	1.2.2.7;

1.2.2.7
date	2002.03.08.17.04.43;	author brad;	state Exp;
branches;
next	;

1.9.2.1
date	2001.09.27.19.03.55;	author jason;	state Exp;
branches;
next	1.9.2.2;

1.9.2.2
date	2001.11.15.00.15.19;	author miod;	state Exp;
branches;
next	1.9.2.3;

1.9.2.3
date	2002.03.09.00.20.45;	author miod;	state Exp;
branches;
next	;

1.13.2.1
date	2002.06.22.07.23.18;	author miod;	state Exp;
branches;
next	;

1.13.4.1
date	2002.06.26.15.30.39;	author jason;	state Exp;
branches;
next	;

1.17.12.1
date	2006.02.03.02.53.45;	author brad;	state Exp;
branches;
next	;

1.17.14.1
date	2006.02.03.03.01.58;	author brad;	state Exp;
branches;
next	1.17.14.2;

1.17.14.2
date	2006.10.06.03.19.33;	author brad;	state Exp;
branches;
next	;

1.18.2.1
date	2006.09.30.04.06.51;	author brad;	state Exp;
branches;
next	;


desc
@@


1.29
log
@Add an AddKeysToAgent client option which can be set to 'yes', 'no',
'ask', or 'confirm', and defaults to 'no'.  When enabled, a private
key that is used during authentication will be added to ssh-agent if
it is running (with confirmation enabled if set to 'confirm').

Initial version from Joachim Schipper many years ago.

ok markus@@
@
text
@/* $OpenBSD: sshconnect.h,v 1.28 2013/10/16 02:31:47 djm Exp $ */

/*
 * Copyright (c) 2000 Markus Friedl.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

typedef struct Sensitive Sensitive;
struct Sensitive {
	Key	**keys;
	int	nkeys;
	int	external_keysign;
};

struct addrinfo;
int	 ssh_connect(const char *, struct addrinfo *, struct sockaddr_storage *,
    u_short, int, int, int *, int, int);
void	 ssh_kill_proxy_command(void);

void	 ssh_login(Sensitive *, const char *, struct sockaddr *, u_short,
    struct passwd *, int);

void	 ssh_exchange_identification(int);

int	 verify_host_key(char *, struct sockaddr *, Key *);

void	 get_hostfile_hostname_ipaddr(char *, struct sockaddr *, u_short,
    char **, char **);

void	 ssh_kex(char *, struct sockaddr *);
void	 ssh_kex2(char *, struct sockaddr *, u_short);

void	 ssh_userauth1(const char *, const char *, char *, Sensitive *);
void	 ssh_userauth2(const char *, const char *, char *, Sensitive *);

void	 ssh_put_password(char *);
int	 ssh_local_cmd(const char *);

void	 maybe_add_key_to_agent(char *, Key *, char *, char *);

/*
 * Macros to raise/lower permissions.
 */
#define PRIV_START do {					\
	int save_errno = errno;				\
	if (seteuid(original_effective_uid) != 0)	\
		fatal("PRIV_START: seteuid: %s",	\
		    strerror(errno));			\
	errno = save_errno;				\
} while (0)

#define PRIV_END do {					\
	int save_errno = errno;				\
	if (seteuid(original_real_uid) != 0)		\
		fatal("PRIV_END: seteuid: %s",		\
		    strerror(errno));			\
	errno = save_errno;				\
} while (0)
@


1.28
log
@Implement client-side hostname canonicalisation to allow an explicit
search path of domain suffixes to use to convert unqualified host names
to fully-qualified ones for host key matching.
This is particularly useful for host certificates, which would otherwise
need to list unqualified names alongside fully-qualified ones (and this
causes a number of problems).

"looks fine" markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: sshconnect.h,v 1.27 2010/11/29 23:45:51 djm Exp $ */
d57 2
@


1.27
log
@automatically order the hostkeys requested by the client based on
which hostkeys are already recorded in known_hosts. This avoids
hostkey warnings when connecting to servers with new ECDSA keys
that are preferred by default; with markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: sshconnect.h,v 1.26 2010/10/06 06:39:28 djm Exp $ */
d34 3
a36 3
int
ssh_connect(const char *, struct sockaddr_storage *, u_short, int, int,
    int *, int, int, const char *);
@


1.26
log
@kill proxy command on fatal() (we already kill it on clean exit);
ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: sshconnect.h,v 1.25 2009/05/27 06:38:16 andreas Exp $ */
d39 2
a40 2
void
ssh_login(Sensitive *, const char *, struct sockaddr *, struct passwd *, int);
d46 3
d50 1
a50 1
void	 ssh_kex2(char *, struct sockaddr *);
@


1.25
log
@Un-static ssh_exchange_identification(), part of a larger change from
Martin Forssen and needed for upcoming changes.
ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: sshconnect.h,v 1.24 2007/09/04 11:15:56 djm Exp $ */
d37 1
@


1.24
log
@make ssh(1)'s ConnectTimeout option apply to both the TCP connection and
SSH banner exchange (previously it just covered the TCP connection).
This allows callers of ssh(1) to better detect and deal with stuck servers
that accept a TCP connection but don't progress the protocol, and also makes
ConnectTimeout useful for connections via a ProxyCommand;
feedback and "looks ok" markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: sshconnect.h,v 1.23 2006/08/03 03:34:42 deraadt Exp $ */
d40 2
@


1.23
log
@almost entirely get rid of the culture of ".h files that include .h files"
ok djm, sort of ok stevesk
makes the pain stop in one easy step
@
text
@d1 1
a1 1
/* $OpenBSD: sshconnect.h,v 1.22 2006/07/08 21:47:12 stevesk Exp $ */
d36 1
a36 1
    int, const char *);
d39 1
a39 1
ssh_login(Sensitive *, const char *, struct sockaddr *, struct passwd *);
@


1.22
log
@move #include <sys/socket.h> out of includes.h
@
text
@d1 1
a1 1
/* $OpenBSD: sshconnect.h,v 1.21 2006/07/06 16:03:53 stevesk Exp $ */
a25 7
#ifndef SSHCONNECT_H
#define SSHCONNECT_H

#include <sys/types.h>
#include <sys/socket.h>

#include <pwd.h>
a69 2

#endif
@


1.21
log
@move #include <pwd.h> out of includes.h; ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: sshconnect.h,v 1.20 2006/06/06 10:20:20 markus Exp $ */
d30 1
@


1.20
log
@replace remaining setuid() calls with permanently_set_uid() and
check seteuid() return values; report Marcus Meissner; ok dtucker djm
@
text
@d1 1
a1 1
/* $OpenBSD: sshconnect.h,v 1.19 2006/03/25 22:22:43 djm Exp $ */
d28 4
@


1.19
log
@standardise spacing in $OpenBSD$ tags; requested by deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: sshconnect.h,v 1.18 2005/12/06 22:38:28 reyk Exp $ */
d57 6
a62 4
#define PRIV_START do {				\
	int save_errno = errno;			\
	(void)seteuid(original_effective_uid);	\
	errno = save_errno;			\
d65 6
a70 4
#define PRIV_END do {				\
	int save_errno = errno;			\
	(void)seteuid(original_real_uid);	\
	errno = save_errno;			\
@


1.18
log
@Add support for tun(4) forwarding over OpenSSH, based on an idea and
initial channel code bits by markus@@. This is a simple and easy way to
use OpenSSH for ad hoc virtual private network connections, e.g.
administrative tunnels or secure wireless access. It's based on a new
ssh channel and works similar to the existing TCP forwarding support,
except that it depends on the tun(4) network interface on both ends of
the connection for layer 2 or layer 3 tunneling. This diff also adds
support for LocalCommand in the ssh(1) client.

ok djm@@, markus@@, jmc@@ (manpages), tested and discussed with others
@
text
@d1 1
a1 1
/*	$OpenBSD: sshconnect.h,v 1.17 2002/06/19 00:27:55 deraadt Exp $	*/
@


1.18.2.1
log
@upgrade to OpenSSH 4.4
@
text
@d1 1
a1 1
/* $OpenBSD: sshconnect.h,v 1.23 2006/08/03 03:34:42 deraadt Exp $ */
d26 2
d57 4
a60 6
#define PRIV_START do {					\
	int save_errno = errno;				\
	if (seteuid(original_effective_uid) != 0)	\
		fatal("PRIV_START: seteuid: %s",	\
		    strerror(errno));			\
	errno = save_errno;				\
d63 4
a66 6
#define PRIV_END do {					\
	int save_errno = errno;				\
	if (seteuid(original_real_uid) != 0)		\
		fatal("PRIV_END: seteuid: %s",		\
		    strerror(errno));			\
	errno = save_errno;				\
d68 2
@


1.17
log
@KNF done automatically while reading....
@
text
@d1 1
a1 1
/*	$OpenBSD: sshconnect.h,v 1.16 2002/06/11 04:14:26 markus Exp $	*/
d52 1
a52 1

@


1.17.14.1
log
@upgrade to OpenSSH 4.3
@
text
@d1 1
a1 1
/*	$OpenBSD: sshconnect.h,v 1.18 2005/12/06 22:38:28 reyk Exp $	*/
d52 1
a52 1
int	 ssh_local_cmd(const char *);
@


1.17.14.2
log
@upgrade to OpenSSH 4.4
@
text
@d1 1
a1 1
/* $OpenBSD: sshconnect.h,v 1.23 2006/08/03 03:34:42 deraadt Exp $ */
d26 2
d57 4
a60 6
#define PRIV_START do {					\
	int save_errno = errno;				\
	if (seteuid(original_effective_uid) != 0)	\
		fatal("PRIV_START: seteuid: %s",	\
		    strerror(errno));			\
	errno = save_errno;				\
d63 4
a66 6
#define PRIV_END do {					\
	int save_errno = errno;				\
	if (seteuid(original_real_uid) != 0)		\
		fatal("PRIV_END: seteuid: %s",		\
		    strerror(errno));			\
	errno = save_errno;				\
d68 2
@


1.17.12.1
log
@upgrade to OpenSSH 4.3
@
text
@d1 1
a1 1
/*	$OpenBSD: sshconnect.h,v 1.18 2005/12/06 22:38:28 reyk Exp $	*/
d52 1
a52 1
int	 ssh_local_cmd(const char *);
@


1.16
log
@no longer use uidswap.[ch] from the ssh client
run less code with euid==0 if ssh is installed setuid root
just switch the euid, don't switch the complete set of groups
(this is only needed by sshd). ok provos@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sshconnect.h,v 1.15 2002/06/09 13:32:01 markus Exp $	*/
d31 3
a33 3
	Key     **keys;
	int     nkeys;
	int     external_keysign;
d57 4
a60 4
#define PRIV_START do {                         \
        int save_errno = errno;                 \
        (void)seteuid(original_effective_uid);  \
        errno = save_errno;                     \
d63 4
a66 4
#define PRIV_END do {                           \
        int save_errno = errno;                 \
        (void)seteuid(original_real_uid);       \
        errno = save_errno;                     \
@


1.15
log
@use tab not spaces (|unexpand)
@
text
@d1 1
a1 1
/*	$OpenBSD: sshconnect.h,v 1.14 2002/05/23 19:24:30 markus Exp $	*/
d38 1
a38 1
    int, struct passwd *, const char *);
d52 16
@


1.14
log
@add /usr/libexec/ssh-keysign: a setuid helper program for hostbased authentication
in protocol v2 (needs to access the hostkeys).
@
text
@d1 1
a1 1
/*	$OpenBSD: sshconnect.h,v 1.13 2001/10/08 19:05:05 markus Exp $	*/
d31 3
a33 3
        Key     **keys;
        int     nkeys;
        int     external_keysign;
@


1.13
log
@some more IPv4or6 cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: sshconnect.h,v 1.12 2001/06/26 17:27:25 markus Exp $	*/
d29 7
d41 1
a41 1
ssh_login(Key **, int, const char *, struct sockaddr *, struct passwd *);
d48 2
a49 2
void	 ssh_userauth1(const char *, const char *, char *, Key **, int);
void	 ssh_userauth2(const char *, const char *, char *, Key **, int);
@


1.13.4.1
log
@Pull in OpenSSH-3.4
@
text
@d1 1
a1 1
/*	$OpenBSD: sshconnect.h,v 1.17 2002/06/19 00:27:55 deraadt Exp $	*/
a28 7
typedef struct Sensitive Sensitive;
struct Sensitive {
	Key	**keys;
	int	nkeys;
	int	external_keysign;
};

d31 1
a31 1
    int, const char *);
d34 1
a34 1
ssh_login(Sensitive *, const char *, struct sockaddr *, struct passwd *);
d41 2
a42 2
void	 ssh_userauth1(const char *, const char *, char *, Sensitive *);
void	 ssh_userauth2(const char *, const char *, char *, Sensitive *);
a44 16


/*
 * Macros to raise/lower permissions.
 */
#define PRIV_START do {				\
	int save_errno = errno;			\
	(void)seteuid(original_effective_uid);	\
	errno = save_errno;			\
} while (0)

#define PRIV_END do {				\
	int save_errno = errno;			\
	(void)seteuid(original_real_uid);	\
	errno = save_errno;			\
} while (0)
@


1.13.2.1
log
@Update OpenSSH to version 3.3 (with local changes, configuration files still
living in /etc and privsep user being nobody).
@
text
@d1 1
a1 1
/*	$OpenBSD: sshconnect.h,v 1.13 2001/10/08 19:05:05 markus Exp $	*/
a28 7
typedef struct Sensitive Sensitive;
struct Sensitive {
	Key	**keys;
	int	nkeys;
	int	external_keysign;
};

d31 1
a31 1
    int, const char *);
d34 1
a34 1
ssh_login(Sensitive *, const char *, struct sockaddr *, struct passwd *);
d41 2
a42 2
void	 ssh_userauth1(const char *, const char *, char *, Sensitive *);
void	 ssh_userauth2(const char *, const char *, char *, Sensitive *);
a44 16


/*
 * Macros to raise/lower permissions.
 */
#define PRIV_START do {				\
	int save_errno = errno;			\
	(void)seteuid(original_effective_uid);	\
	errno = save_errno;			\
} while (0)

#define PRIV_END do {				\
	int save_errno = errno;			\
	(void)seteuid(original_real_uid);	\
	errno = save_errno;			\
} while (0)
@


1.12
log
@remove comments from .h, since they are cut&paste from the .c files
and out of sync
@
text
@d1 1
a1 1
/*	$OpenBSD: sshconnect.h,v 1.11 2001/06/26 06:33:03 itojun Exp $	*/
d30 1
a30 1
ssh_connect(const char *, struct sockaddr_storage *, u_short, int,
@


1.11
log
@prototype pedant.  not very creative...
- () -> (void)
- no variable names
@
text
@d1 1
a1 1
/*	$OpenBSD: sshconnect.h,v 1.10 2001/06/23 02:34:32 markus Exp $	*/
d36 1
a36 1
int	verify_host_key(char *, struct sockaddr *, Key *);
d38 2
a39 2
void	ssh_kex(char *, struct sockaddr *);
void	ssh_kex2(char *, struct sockaddr *);
d41 2
a42 2
void	ssh_userauth1(const char *, const char *, char *, Key **, int);
void	ssh_userauth2(const char *, const char *, char *, Key **, int);
d44 1
a44 1
void	ssh_put_password(char *);
@


1.10
log
@get rid of known_hosts2, use it for hostkey lookup, but do not modify.
@
text
@d1 1
a1 1
/*	$OpenBSD: sshconnect.h,v 1.9 2001/04/12 19:15:25 markus Exp $	*/
d30 2
a31 4
ssh_connect(const char *host, struct sockaddr_storage * hostaddr,
    u_short port, int connection_attempts,
    int anonymous, struct passwd *pw,
    const char *proxy_command);
d34 1
a34 2
ssh_login(Key **keys, int nkeys, const char *orighost,
    struct sockaddr *hostaddr, struct passwd *pw);
d36 1
a36 1
int	verify_host_key(char *host, struct sockaddr *hostaddr, Key *host_key);
d38 2
a39 2
void	ssh_kex(char *host, struct sockaddr *hostaddr);
void	ssh_kex2(char *host, struct sockaddr *hostaddr);
d41 2
a42 6
void
ssh_userauth1(const char *local_user, const char *server_user, char *host,
    Key **keys, int nkeys);
void
ssh_userauth2(const char *local_user, const char *server_user, char *host,
    Key **keys, int nkeys);
d44 1
a44 1
void	ssh_put_password(char *password);
@


1.9
log
@implement HostbasedAuthentication (= RhostRSAAuthentication for ssh v2)
similar to RhostRSAAuthentication unless you enable (the experimental)
HostbasedUsesNameFromPacketOnly option.  please test. :)
@
text
@d1 1
a1 1
/*	$OpenBSD: sshconnect.h,v 1.8 2001/04/06 21:00:15 markus Exp $	*/
d39 1
a39 3
void
check_host_key(char *host, struct sockaddr *hostaddr, Key *host_key,
    const char *user_hostfile, const char *system_hostfile);
@


1.9.2.1
log
@Pull in OpenSSH-2.9.9
@
text
@d1 1
a1 1
/*	$OpenBSD: sshconnect.h,v 1.12 2001/06/26 17:27:25 markus Exp $	*/
d30 4
a33 2
ssh_connect(const char *, struct sockaddr_storage *, u_short, int,
    int, struct passwd *, const char *);
d36 2
a37 1
ssh_login(Key **, int, const char *, struct sockaddr *, struct passwd *);
d39 3
a41 1
int	 verify_host_key(char *, struct sockaddr *, Key *);
d43 2
a44 2
void	 ssh_kex(char *, struct sockaddr *);
void	 ssh_kex2(char *, struct sockaddr *);
d46 6
a51 2
void	 ssh_userauth1(const char *, const char *, char *, Key **, int);
void	 ssh_userauth2(const char *, const char *, char *, Key **, int);
d53 1
a53 1
void	 ssh_put_password(char *);
@


1.9.2.2
log
@Merge OpenSSH 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: sshconnect.h,v 1.9.2.1 2001/09/27 19:03:55 jason Exp $	*/
d30 1
a30 1
ssh_connect(const char *, struct sockaddr_storage *, u_short, int, int,
@


1.9.2.3
log
@Merge OpenSSH 3.1, keeping /etc as configuration files directory.
(i.e. OpenSSH 3.1 + openbsd29_3.1.patch)
@
text
@d1 1
a1 1
/*	$OpenBSD: sshconnect.h,v 1.13 2001/10/08 19:05:05 markus Exp $	*/
@


1.8
log
@do gid/groups-swap in addition to uid-swap, should help if /home/group
is chmod 750 + chgrp grp /home/group/, work be deraadt and me, thanks
to olar@@openwall.com is comments.  we had many requests for this.
@
text
@d1 1
a1 1
/*	$OpenBSD: sshconnect.h,v 1.7 2001/03/26 08:07:09 markus Exp $	*/
d28 1
a28 9
/*
 * Opens a TCP/IP connection to the remote server on the given host.  If port
 * is 0, the default port will be used.  If anonymous is zero, a privileged
 * port will be allocated to make the connection. This requires super-user
 * privileges if anonymous is false. Connection_attempts specifies the
 * maximum number of tries, one per second.  This returns true on success,
 * and zero on failure.  If the connection is successful, this calls
 * packet_set_connection for the connection.
 */
a34 9
/*
 * Starts a dialog with the server, and authenticates the current user on the
 * server.  This does not need any extra privileges.  The basic connection to
 * the server must already have been established before this is called. If
 * login fails, this function prints an error and never returns. This
 * initializes the random state, and leaves it initialized (it will also have
 * references from the packet module).
 */

d36 2
a37 3
ssh_login(Key *host_key, const char *host,
    struct sockaddr * hostaddr, struct passwd *pw);

d44 2
d47 5
a51 5
ssh_userauth(const char * local_user, const char * server_user, char *host,
    Key *own_host_key);

void	ssh_kex2(char *host, struct sockaddr *hostaddr);
void	ssh_userauth2(const char *server_user, char *host);
@


1.7
log
@simpler key load/save interface, see authfile.h
@
text
@d1 1
a1 1
/*	$OpenBSD: sshconnect.h,v 1.6 2001/02/15 23:19:59 markus Exp $	*/
d40 1
a40 1
    int anonymous, uid_t original_real_uid,
d54 1
a54 1
    struct sockaddr * hostaddr, uid_t original_real_uid);
@


1.6
log
@genericize password padding function for SSH1 and SSH2.
add stylized echo to 2, too.
@
text
@d1 1
a1 1
/*	$OpenBSD: sshconnect.h,v 1.5 2001/01/29 01:58:18 niklas Exp $	*/
d53 1
a53 1
ssh_login(int host_key_valid, RSA * host_key, const char *host,
d64 1
a64 1
    int host_key_valid, RSA *own_host_key);
@


1.5
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d68 2
@


1.4
log
@split ssh.h and try to cleanup the #include mess. remove unnecessary #includes.
rename util.[ch] -> misc.[ch]
@
text
@d1 2
@


1.3
log
@indent
@
text
@d26 28
@


1.2
log
@cleanup copyright notices on all files.  I have attempted to be accurate with
the details.  everything is now under Tatu's licence (which I copied from his
readme), and/or the core-sdi bsd-ish thing for deattack, or various openbsd
developers under a 2-term bsd licence.  We're not changing any rules, just
being accurate.
@
text
@d33 1
a33 1
ssh_userauth(const char* local_user, const char* server_user, char *host,
@


1.2.2.1
log
@Pull in OpenSSH 2.5.0
@
text
@a0 2
/*	$OpenBSD: sshconnect.h,v 1.6 2001/02/15 23:19:59 markus Exp $	*/

a25 28
/*
 * Opens a TCP/IP connection to the remote server on the given host.  If port
 * is 0, the default port will be used.  If anonymous is zero, a privileged
 * port will be allocated to make the connection. This requires super-user
 * privileges if anonymous is false. Connection_attempts specifies the
 * maximum number of tries, one per second.  This returns true on success,
 * and zero on failure.  If the connection is successful, this calls
 * packet_set_connection for the connection.
 */
int
ssh_connect(const char *host, struct sockaddr_storage * hostaddr,
    u_short port, int connection_attempts,
    int anonymous, uid_t original_real_uid,
    const char *proxy_command);

/*
 * Starts a dialog with the server, and authenticates the current user on the
 * server.  This does not need any extra privileges.  The basic connection to
 * the server must already have been established before this is called. If
 * login fails, this function prints an error and never returns. This
 * initializes the random state, and leaves it initialized (it will also have
 * references from the packet module).
 */

void
ssh_login(int host_key_valid, RSA * host_key, const char *host,
    struct sockaddr * hostaddr, uid_t original_real_uid);

d33 1
a33 1
ssh_userauth(const char * local_user, const char * server_user, char *host,
a37 2

void	ssh_put_password(char *password);
@


1.2.2.2
log
@Pull in OpenSSH-2.5.1
@
text
@@


1.2.2.3
log
@Pull in OpenSSH-2.5.2 for 2.8 branch.
@
text
@@


1.2.2.4
log
@Pull in OpenSSH-2.9 to 2.8 branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: sshconnect.h,v 1.9 2001/04/12 19:15:25 markus Exp $	*/
d28 9
a36 1

d40 1
a40 1
    int anonymous, struct passwd *pw,
d43 9
d53 3
a55 2
ssh_login(Key **keys, int nkeys, const char *orighost,
    struct sockaddr *hostaddr, struct passwd *pw);
d62 4
d67 1
a67 7

void
ssh_userauth1(const char *local_user, const char *server_user, char *host,
    Key **keys, int nkeys);
void
ssh_userauth2(const char *local_user, const char *server_user, char *host,
    Key **keys, int nkeys);
@


1.2.2.5
log
@Pull in OpenSSH 2.9.9 to the 2.8 branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: sshconnect.h,v 1.12 2001/06/26 17:27:25 markus Exp $	*/
d30 4
a33 2
ssh_connect(const char *, struct sockaddr_storage *, u_short, int,
    int, struct passwd *, const char *);
d36 2
a37 1
ssh_login(Key **, int, const char *, struct sockaddr *, struct passwd *);
d39 3
a41 1
int	 verify_host_key(char *, struct sockaddr *, Key *);
d43 2
a44 2
void	 ssh_kex(char *, struct sockaddr *);
void	 ssh_kex2(char *, struct sockaddr *);
d46 6
a51 2
void	 ssh_userauth1(const char *, const char *, char *, Key **, int);
void	 ssh_userauth2(const char *, const char *, char *, Key **, int);
d53 1
a53 1
void	 ssh_put_password(char *);
@


1.2.2.6
log
@Merge OpenSSH 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: sshconnect.h,v 1.2.2.5 2001/09/27 00:15:43 miod Exp $	*/
d30 1
a30 1
ssh_connect(const char *, struct sockaddr_storage *, u_short, int, int,
@


1.2.2.7
log
@Merge OpenSSH 3.1.
@
text
@d1 1
a1 1
/*	$OpenBSD: sshconnect.h,v 1.13 2001/10/08 19:05:05 markus Exp $	*/
@


1.1
log
@split auth/sshconnect in one file per protocol version
@
text
@d1 23
@


1.1.2.1
log
@openssh-2.3.0 (again) for 2.7 branch
@
text
@a0 23
/*
 * Copyright (c) 2000 Markus Friedl.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
@


1.1.2.2
log
@OpenSSH-2.5.1 for 2.7 patch branch
@
text
@a0 2
/*	$OpenBSD: sshconnect.h,v 1.6 2001/02/15 23:19:59 markus Exp $	*/

a25 28
/*
 * Opens a TCP/IP connection to the remote server on the given host.  If port
 * is 0, the default port will be used.  If anonymous is zero, a privileged
 * port will be allocated to make the connection. This requires super-user
 * privileges if anonymous is false. Connection_attempts specifies the
 * maximum number of tries, one per second.  This returns true on success,
 * and zero on failure.  If the connection is successful, this calls
 * packet_set_connection for the connection.
 */
int
ssh_connect(const char *host, struct sockaddr_storage * hostaddr,
    u_short port, int connection_attempts,
    int anonymous, uid_t original_real_uid,
    const char *proxy_command);

/*
 * Starts a dialog with the server, and authenticates the current user on the
 * server.  This does not need any extra privileges.  The basic connection to
 * the server must already have been established before this is called. If
 * login fails, this function prints an error and never returns. This
 * initializes the random state, and leaves it initialized (it will also have
 * references from the packet module).
 */

void
ssh_login(int host_key_valid, RSA * host_key, const char *host,
    struct sockaddr * hostaddr, uid_t original_real_uid);

d33 1
a33 1
ssh_userauth(const char * local_user, const char * server_user, char *host,
a37 2

void	ssh_put_password(char *password);
@


1.1.2.3
log
@Pull in OpenSSH-2.5.2 for 2.7 branch.
@
text
@@


