head	1.16;
access;
symbols
	OPENBSD_6_2:1.16.0.8
	OPENBSD_6_2_BASE:1.16
	OPENBSD_6_1:1.16.0.12
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.16.0.10
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.6
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.16.0.4
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.15.0.36
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.15.0.34
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.30
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.28
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.26
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.24
	OPENBSD_5_0:1.15.0.22
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.20
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.18
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.14
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.16
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.12
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.10
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.8
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.6
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.2
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.4
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.8.0.4
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.2
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.7.0.6
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.4
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_0:1.2.0.2;
locks; strict;
comment	@ * @;


1.16
date	2015.01.15.09.40.00;	author djm;	state Exp;
branches;
next	1.15;
commitid	akRUKeZEbb3ylbKG;

1.15
date	2006.08.03.03.34.42;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2006.07.22.20.48.23;	author stevesk;	state Exp;
branches;
next	1.13;

1.13
date	2006.07.17.01.31.09;	author stevesk;	state Exp;
branches;
next	1.12;

1.12
date	2006.07.11.20.07.25;	author stevesk;	state Exp;
branches;
next	1.11;

1.11
date	2006.03.30.09.58.15;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2006.03.25.13.17.02;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2006.03.19.18.51.18;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2005.05.24.17.32.43;	author avsm;	state Exp;
branches
	1.8.2.1
	1.8.4.1;
next	1.7;

1.7
date	2003.11.17.09.45.39;	author djm;	state Exp;
branches
	1.7.4.1
	1.7.6.1;
next	1.6;

1.6
date	2003.06.28.16.23.06;	author deraadt;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2002.12.19.00.07.02;	author djm;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2002.07.01.16.15.25;	author deraadt;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2002.06.24.15.49.22;	author itojun;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2002.06.19.00.27.55;	author deraadt;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2002.05.23.19.24.30;	author markus;	state Exp;
branches;
next	;

1.2.2.1
date	2002.06.22.07.23.17;	author miod;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2002.06.26.18.22.35;	author miod;	state Exp;
branches;
next	1.2.2.3;

1.2.2.3
date	2002.10.11.14.53.06;	author miod;	state Exp;
branches;
next	;

1.3.2.1
date	2002.06.26.15.51.09;	author jason;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2002.10.11.14.51.52;	author miod;	state Exp;
branches;
next	1.3.2.3;

1.3.2.3
date	2003.04.03.22.35.17;	author miod;	state Exp;
branches;
next	;

1.4.2.1
date	2003.04.01.00.12.13;	author margarida;	state Exp;
branches;
next	1.4.2.2;

1.4.2.2
date	2003.09.16.21.20.26;	author brad;	state Exp;
branches;
next	;

1.5.2.1
date	2003.09.16.20.50.43;	author brad;	state Exp;
branches;
next	1.5.2.2;

1.5.2.2
date	2004.03.04.18.18.16;	author brad;	state Exp;
branches;
next	;

1.6.2.1
date	2004.02.28.03.51.33;	author brad;	state Exp;
branches;
next	1.6.2.2;

1.6.2.2
date	2004.08.19.22.37.31;	author brad;	state Exp;
branches;
next	;

1.7.4.1
date	2005.09.02.03.45.00;	author brad;	state Exp;
branches;
next	;

1.7.6.1
date	2005.09.04.18.40.02;	author brad;	state Exp;
branches;
next	;

1.8.2.1
date	2006.10.06.03.19.32;	author brad;	state Exp;
branches;
next	;

1.8.4.1
date	2006.09.30.04.06.50;	author brad;	state Exp;
branches;
next	;


desc
@@


1.16
log
@sync ssh-keysign, ssh-keygen and some dependencies to the new
buffer/key API; mostly mechanical, ok markus@@
@
text
@/* $OpenBSD: msg.c,v 1.15 2006/08/03 03:34:42 deraadt Exp $ */
/*
 * Copyright (c) 2002 Markus Friedl.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/uio.h>

#include <errno.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <stdarg.h>

#include "sshbuf.h"
#include "ssherr.h"
#include "log.h"
#include "atomicio.h"
#include "msg.h"
#include "misc.h"

int
ssh_msg_send(int fd, u_char type, struct sshbuf *m)
{
	u_char buf[5];
	u_int mlen = sshbuf_len(m);

	debug3("ssh_msg_send: type %u", (unsigned int)type & 0xff);

	put_u32(buf, mlen + 1);
	buf[4] = type;		/* 1st byte of payload is mesg-type */
	if (atomicio(vwrite, fd, buf, sizeof(buf)) != sizeof(buf)) {
		error("ssh_msg_send: write");
		return (-1);
	}
	if (atomicio(vwrite, fd, (u_char *)sshbuf_ptr(m), mlen) != mlen) {
		error("ssh_msg_send: write");
		return (-1);
	}
	return (0);
}

int
ssh_msg_recv(int fd, struct sshbuf *m)
{
	u_char buf[4], *p;
	u_int msg_len;
	int r;

	debug3("ssh_msg_recv entering");

	if (atomicio(read, fd, buf, sizeof(buf)) != sizeof(buf)) {
		if (errno != EPIPE)
			error("ssh_msg_recv: read: header");
		return (-1);
	}
	msg_len = get_u32(buf);
	if (msg_len > 256 * 1024) {
		error("ssh_msg_recv: read: bad msg_len %u", msg_len);
		return (-1);
	}
	sshbuf_reset(m);
	if ((r = sshbuf_reserve(m, msg_len, &p)) != 0) {
		error("%s: buffer error: %s", __func__, ssh_err(r));
		return -1;
	}
	if (atomicio(read, fd, p, msg_len) != msg_len) {
		error("ssh_msg_recv: read: %s", strerror(errno));
		return (-1);
	}
	return (0);
}
@


1.15
log
@almost entirely get rid of the culture of ".h files that include .h files"
ok djm, sort of ok stevesk
makes the pain stop in one easy step
@
text
@d1 1
a1 1
/* $OpenBSD: msg.c,v 1.14 2006/07/22 20:48:23 stevesk Exp $ */
d35 2
a36 1
#include "buffer.h"
d43 1
a43 1
ssh_msg_send(int fd, u_char type, Buffer *m)
d46 1
a46 1
	u_int mlen = buffer_len(m);
d56 1
a56 1
	if (atomicio(vwrite, fd, buffer_ptr(m), mlen) != mlen) {
d64 1
a64 1
ssh_msg_recv(int fd, Buffer *m)
d66 1
a66 1
	u_char buf[4];
d68 1
d82 6
a87 3
	buffer_clear(m);
	buffer_append_space(m, msg_len);
	if (atomicio(read, fd, buffer_ptr(m), msg_len) != msg_len) {
@


1.14
log
@move #include <string.h> out of includes.h
@
text
@d1 1
a1 1
/* $OpenBSD: msg.c,v 1.13 2006/07/17 01:31:09 stevesk Exp $ */
a24 1
#include "includes.h"
d27 1
d30 1
d33 1
@


1.13
log
@move #include <unistd.h> out of includes.h
@
text
@d1 1
a1 1
/* $OpenBSD: msg.c,v 1.12 2006/07/11 20:07:25 stevesk Exp $ */
d30 1
@


1.12
log
@move #include <errno.h> out of includes.h; ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: msg.c,v 1.11 2006/03/30 09:58:15 djm Exp $ */
d27 2
d30 1
@


1.11
log
@replace {GET,PUT}_XXBIT macros with functionally similar functions,
silencing a heap of lint warnings. also allows them to use
__bounded__ checking which can't be applied to macros; requested
by and feedback from deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: msg.c,v 1.10 2006/03/25 13:17:02 djm Exp $ */
d26 2
@


1.10
log
@Put $OpenBSD$ tags back (as comments) to replace the RCSID()s that
Theo nuked - our scripts to sync -portable need them in the files
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a27 1
#include "getput.h"
d31 1
d41 1
a41 1
	PUT_32BIT(buf, mlen + 1);
d67 1
a67 1
	msg_len = GET_32BIT(buf);
@


1.9
log
@RCSID() can die
@
text
@d1 1
@


1.8
log
@Switch atomicio to use a simpler interface; it now returns a size_t
(containing number of bytes read/written), and indicates error by
returning 0.  EOF is signalled by errno==EPIPE.
Typical use now becomes:

if (atomicio(read, ..., len) != len)
        err(1,"read");

ok deraadt@@, cloder@@, djm@@
@
text
@a24 1
RCSID("$OpenBSD: msg.c,v 1.7 2003/11/17 09:45:39 djm Exp $");
@


1.8.2.1
log
@upgrade to OpenSSH 4.4
@
text
@a0 1
/* $OpenBSD: msg.c,v 1.15 2006/08/03 03:34:42 deraadt Exp $ */
d24 2
a25 9

#include <sys/types.h>
#include <sys/uio.h>

#include <errno.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <stdarg.h>
d28 1
a31 1
#include "misc.h"
d41 1
a41 1
	put_u32(buf, mlen + 1);
d67 1
a67 1
	msg_len = get_u32(buf);
@


1.8.4.1
log
@upgrade to OpenSSH 4.4
@
text
@a0 1
/* $OpenBSD: msg.c,v 1.15 2006/08/03 03:34:42 deraadt Exp $ */
d24 2
a25 9

#include <sys/types.h>
#include <sys/uio.h>

#include <errno.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <stdarg.h>
d28 1
a31 1
#include "misc.h"
d41 1
a41 1
	put_u32(buf, mlen + 1);
d67 1
a67 1
	msg_len = get_u32(buf);
@


1.7
log
@return error on msg send/receive failure (rather than fatal); ok markus@@
@
text
@d25 1
a25 1
RCSID("$OpenBSD: msg.c,v 1.6 2003/06/28 16:23:06 deraadt Exp $");
a57 1
	ssize_t res;
d62 3
a64 4
	res = atomicio(read, fd, buf, sizeof(buf));
	if (res != sizeof(buf)) {
		if (res != 0)
			error("ssh_msg_recv: read: header %ld", (long)res);
d74 2
a75 3
	res = atomicio(read, fd, buffer_ptr(m), msg_len);
	if (res != msg_len) {
		error("ssh_msg_recv: read: %ld != msg_len", (long)res);
@


1.7.6.1
log
@upgrade to OpenSSH 4.2
@
text
@d25 1
a25 1
RCSID("$OpenBSD: msg.c,v 1.8 2005/05/24 17:32:43 avsm Exp $");
d58 1
d63 4
a66 3
	if (atomicio(read, fd, buf, sizeof(buf)) != sizeof(buf)) {
		if (errno != EPIPE)
			error("ssh_msg_recv: read: header");
d76 3
a78 2
	if (atomicio(read, fd, buffer_ptr(m), msg_len) != msg_len) {
		error("ssh_msg_recv: read: %s", strerror(errno));
@


1.7.4.1
log
@upgrade to OpenSSH 4.2
@
text
@d25 1
a25 1
RCSID("$OpenBSD: msg.c,v 1.8 2005/05/24 17:32:43 avsm Exp $");
d58 1
d63 4
a66 3
	if (atomicio(read, fd, buf, sizeof(buf)) != sizeof(buf)) {
		if (errno != EPIPE)
			error("ssh_msg_recv: read: header");
d76 3
a78 2
	if (atomicio(read, fd, buffer_ptr(m), msg_len) != msg_len) {
		error("ssh_msg_recv: read: %s", strerror(errno));
@


1.6
log
@deal with typing of write vs read in atomicio
@
text
@d25 1
a25 1
RCSID("$OpenBSD: msg.c,v 1.5 2002/12/19 00:07:02 djm Exp $");
d33 1
a33 1
void
d43 9
a51 4
	if (atomicio(vwrite, fd, buf, sizeof(buf)) != sizeof(buf))
		fatal("ssh_msg_send: write");
	if (atomicio(vwrite, fd, buffer_ptr(m), mlen) != mlen)
		fatal("ssh_msg_send: write");
d65 3
a67 3
		if (res == 0)
			return -1;
		fatal("ssh_msg_recv: read: header %ld", (long)res);
d70 4
a73 2
	if (msg_len > 256 * 1024)
		fatal("ssh_msg_recv: read: bad msg_len %u", msg_len);
d77 5
a81 3
	if (res != msg_len)
		fatal("ssh_msg_recv: read: %ld != msg_len", (long)res);
	return 0;
@


1.6.2.1
log
@upgrade to OpenSSH 3.8
@
text
@d25 1
a25 1
RCSID("$OpenBSD: msg.c,v 1.7 2003/11/17 09:45:39 djm Exp $");
d33 1
a33 1
int
d43 4
a46 9
	if (atomicio(vwrite, fd, buf, sizeof(buf)) != sizeof(buf)) {
		error("ssh_msg_send: write");
		return (-1);
	}
	if (atomicio(vwrite, fd, buffer_ptr(m), mlen) != mlen) {
		error("ssh_msg_send: write");
		return (-1);
	}
	return (0);
d60 3
a62 3
		if (res != 0)
			error("ssh_msg_recv: read: header %ld", (long)res);
		return (-1);
d65 2
a66 4
	if (msg_len > 256 * 1024) {
		error("ssh_msg_recv: read: bad msg_len %u", msg_len);
		return (-1);
	}
d70 3
a72 5
	if (res != msg_len) {
		error("ssh_msg_recv: read: %ld != msg_len", (long)res);
		return (-1);
	}
	return (0);
@


1.6.2.2
log
@upgrade to OpenSSH 3.9
@
text
@@


1.5
log
@s/msg_send/ssh_msg_send/ to avoid namespace clashes in portable; ok markus@@
@
text
@d25 1
a25 1
RCSID("$OpenBSD: msg.c,v 1.4 2002/07/01 16:15:25 deraadt Exp $");
d43 1
a43 1
	if (atomicio(write, fd, buf, sizeof(buf)) != sizeof(buf))
d45 1
a45 1
	if (atomicio(write, fd, buffer_ptr(m), mlen) != mlen)
@


1.5.2.1
log
@upgrade to OpenSSH 3.7
@
text
@d25 1
a25 1
RCSID("$OpenBSD: msg.c,v 1.6 2003/06/28 16:23:06 deraadt Exp $");
d43 1
a43 1
	if (atomicio(vwrite, fd, buf, sizeof(buf)) != sizeof(buf))
d45 1
a45 1
	if (atomicio(vwrite, fd, buffer_ptr(m), mlen) != mlen)
@


1.5.2.2
log
@upgrade to OpenSSH 3.8upgrade to OpenSSH 3.8upgrade to OpenSSH 3.8
@
text
@d25 1
a25 1
RCSID("$OpenBSD: msg.c,v 1.7 2003/11/17 09:45:39 djm Exp $");
d33 1
a33 1
int
d43 4
a46 9
	if (atomicio(vwrite, fd, buf, sizeof(buf)) != sizeof(buf)) {
		error("ssh_msg_send: write");
		return (-1);
	}
	if (atomicio(vwrite, fd, buffer_ptr(m), mlen) != mlen) {
		error("ssh_msg_send: write");
		return (-1);
	}
	return (0);
d60 3
a62 3
		if (res != 0)
			error("ssh_msg_recv: read: header %ld", (long)res);
		return (-1);
d65 2
a66 4
	if (msg_len > 256 * 1024) {
		error("ssh_msg_recv: read: bad msg_len %u", msg_len);
		return (-1);
	}
d70 3
a72 5
	if (res != msg_len) {
		error("ssh_msg_recv: read: %ld != msg_len", (long)res);
		return (-1);
	}
	return (0);
@


1.4
log
@%u
@
text
@d25 1
a25 1
RCSID("$OpenBSD: msg.c,v 1.3 2002/06/24 15:49:22 itojun Exp $");
d34 1
a34 1
msg_send(int fd, u_char type, Buffer *m)
d39 1
a39 1
	debug3("msg_send: type %u", (unsigned int)type & 0xff);
d44 1
a44 1
		fatal("msg_send: write");
d46 1
a46 1
		fatal("msg_send: write");
d50 1
a50 1
msg_recv(int fd, Buffer *m)
d56 1
a56 1
	debug3("msg_recv entering");
d62 1
a62 1
		fatal("msg_recv: read: header %ld", (long)res);
d66 1
a66 1
		fatal("msg_recv: read: bad msg_len %u", msg_len);
d71 1
a71 1
		fatal("msg_recv: read: %ld != msg_len", (long)res);
@


1.4.2.1
log
@Update to OpenSSH 3.6
@
text
@d25 1
a25 1
RCSID("$OpenBSD: msg.c,v 1.5 2002/12/19 00:07:02 djm Exp $");
d34 1
a34 1
ssh_msg_send(int fd, u_char type, Buffer *m)
d39 1
a39 1
	debug3("ssh_msg_send: type %u", (unsigned int)type & 0xff);
d44 1
a44 1
		fatal("ssh_msg_send: write");
d46 1
a46 1
		fatal("ssh_msg_send: write");
d50 1
a50 1
ssh_msg_recv(int fd, Buffer *m)
d56 1
a56 1
	debug3("ssh_msg_recv entering");
d62 1
a62 1
		fatal("ssh_msg_recv: read: header %ld", (long)res);
d66 1
a66 1
		fatal("ssh_msg_recv: read: bad msg_len %u", msg_len);
d71 1
a71 1
		fatal("ssh_msg_recv: read: %ld != msg_len", (long)res);
@


1.4.2.2
log
@upgrade to OpenSSH 3.7
@
text
@d25 1
a25 1
RCSID("$OpenBSD: msg.c,v 1.6 2003/06/28 16:23:06 deraadt Exp $");
d43 1
a43 1
	if (atomicio(vwrite, fd, buf, sizeof(buf)) != sizeof(buf))
d45 1
a45 1
	if (atomicio(vwrite, fd, buffer_ptr(m), mlen) != mlen)
@


1.3
log
@printf type pedant
@
text
@d25 1
a25 1
RCSID("$OpenBSD: msg.c,v 1.2 2002/06/19 00:27:55 deraadt Exp $");
d66 1
a66 1
		fatal("msg_recv: read: bad msg_len %d", msg_len);
@


1.3.2.1
log
@Missed two files from 3.4 merge
@
text
@d25 1
a25 1
RCSID("$OpenBSD: msg.c,v 1.3 2002/06/24 15:49:22 itojun Exp $");
@


1.3.2.2
log
@Update to OpenSSH 3.5
@
text
@d25 1
a25 1
RCSID("$OpenBSD: msg.c,v 1.4 2002/07/01 16:15:25 deraadt Exp $");
d66 1
a66 1
		fatal("msg_recv: read: bad msg_len %u", msg_len);
@


1.3.2.3
log
@Merge OpenSSH 3.6.1
@
text
@d25 1
a25 1
RCSID("$OpenBSD: msg.c,v 1.5 2002/12/19 00:07:02 djm Exp $");
d34 1
a34 1
ssh_msg_send(int fd, u_char type, Buffer *m)
d39 1
a39 1
	debug3("ssh_msg_send: type %u", (unsigned int)type & 0xff);
d44 1
a44 1
		fatal("ssh_msg_send: write");
d46 1
a46 1
		fatal("ssh_msg_send: write");
d50 1
a50 1
ssh_msg_recv(int fd, Buffer *m)
d56 1
a56 1
	debug3("ssh_msg_recv entering");
d62 1
a62 1
		fatal("ssh_msg_recv: read: header %ld", (long)res);
d66 1
a66 1
		fatal("ssh_msg_recv: read: bad msg_len %u", msg_len);
d71 1
a71 1
		fatal("ssh_msg_recv: read: %ld != msg_len", (long)res);
@


1.2
log
@KNF done automatically while reading....
@
text
@d25 1
a25 1
RCSID("$OpenBSD: msg.c,v 1.1 2002/05/23 19:24:30 markus Exp $");
d39 1
a39 1
	debug3("msg_send: type %d", type);
d62 1
a62 1
		fatal("msg_recv: read: header %d", res);
@


1.2.2.1
log
@Update OpenSSH to version 3.3 (with local changes, configuration files still
living in /etc and privsep user being nobody).
@
text
@d25 1
a25 1
RCSID("$OpenBSD: msg.c,v 1.2 2002/06/19 00:27:55 deraadt Exp $");
@


1.2.2.2
log
@There was an update to OpenSSH 3.4, and people rejoiced.
@
text
@d25 1
a25 1
RCSID("$OpenBSD: msg.c,v 1.2.2.1 2002/06/22 07:23:17 miod Exp $");
d39 1
a39 1
	debug3("msg_send: type %u", (unsigned int)type & 0xff);
d62 1
a62 1
		fatal("msg_recv: read: header %ld", (long)res);
@


1.2.2.3
log
@Update to OpenSSH 3.5
@
text
@d25 1
a25 1
RCSID("$OpenBSD: msg.c,v 1.4 2002/07/01 16:15:25 deraadt Exp $");
d66 1
a66 1
		fatal("msg_recv: read: bad msg_len %u", msg_len);
@


1.1
log
@add /usr/libexec/ssh-keysign: a setuid helper program for hostbased authentication
in protocol v2 (needs to access the hostkeys).
@
text
@d25 1
a25 1
RCSID("$OpenBSD: $");
d42 1
a42 1
	buf[4] = type;         /* 1st byte of payload is mesg-type */
@

