head	1.125;
access;
symbols
	OPENBSD_6_1:1.123.0.4
	OPENBSD_6_1_BASE:1.123
	OPENBSD_6_0:1.120.0.8
	OPENBSD_6_0_BASE:1.120
	OPENBSD_5_9:1.120.0.4
	OPENBSD_5_9_BASE:1.120
	OPENBSD_5_8:1.120.0.2
	OPENBSD_5_8_BASE:1.120
	OPENBSD_5_7:1.116.0.2
	OPENBSD_5_7_BASE:1.116
	OPENBSD_5_6:1.114.0.4
	OPENBSD_5_6_BASE:1.114
	OPENBSD_5_5:1.112.0.4
	OPENBSD_5_5_BASE:1.112
	OPENBSD_5_4:1.109.0.2
	OPENBSD_5_4_BASE:1.109
	OPENBSD_5_3:1.107.0.2
	OPENBSD_5_3_BASE:1.107
	OPENBSD_5_2:1.103.0.2
	OPENBSD_5_2_BASE:1.103
	OPENBSD_5_1_BASE:1.99
	OPENBSD_5_1:1.99.0.4
	OPENBSD_5_0:1.99.0.2
	OPENBSD_5_0_BASE:1.99
	OPENBSD_4_9:1.95.0.2
	OPENBSD_4_9_BASE:1.95
	OPENBSD_4_8:1.93.0.2
	OPENBSD_4_8_BASE:1.93
	OPENBSD_4_7:1.92.0.2
	OPENBSD_4_7_BASE:1.92
	OPENBSD_4_6:1.87.0.6
	OPENBSD_4_6_BASE:1.87
	OPENBSD_4_5:1.87.0.2
	OPENBSD_4_5_BASE:1.87
	OPENBSD_4_4:1.85.0.2
	OPENBSD_4_4_BASE:1.85
	OPENBSD_4_3:1.82.0.2
	OPENBSD_4_3_BASE:1.82
	OPENBSD_4_2:1.80.0.4
	OPENBSD_4_2_BASE:1.80
	OPENBSD_4_1:1.80.0.2
	OPENBSD_4_1_BASE:1.80
	OPENBSD_4_0:1.79.0.4
	OPENBSD_4_0_BASE:1.79
	OPENBSD_3_9:1.72.0.2
	OPENBSD_3_9_BASE:1.72
	OPENBSD_3_8:1.71.0.4
	OPENBSD_3_8_BASE:1.71
	OPENBSD_3_7:1.71.0.2
	OPENBSD_3_7_BASE:1.71
	OPENBSD_3_6:1.70.0.2
	OPENBSD_3_6_BASE:1.70
	OPENBSD_3_5:1.67.0.2
	OPENBSD_3_5_BASE:1.67
	OPENBSD_3_4:1.65.0.2
	OPENBSD_3_4_BASE:1.65
	OPENBSD_3_3:1.59.0.4
	OPENBSD_3_3_BASE:1.59
	OPENBSD_3_2:1.59.0.2
	OPENBSD_3_2_BASE:1.59
	OPENBSD_3_1:1.57.0.2
	OPENBSD_3_1_BASE:1.57
	OPENBSD_3_0:1.49.0.2
	OPENBSD_3_0_BASE:1.49
	OPENBSD_2_9_BASE:1.41
	OPENBSD_2_9:1.41.0.2
	OPENBSD_2_8:1.30.0.2
	OPENBSD_2_8_BASE:1.30
	OPENBSD_2_7:1.22.0.2
	OPENBSD_2_7_BASE:1.22
	OPENBSD_2_6:1.10.0.2
	OPENBSD_2_6_BASE:1.10;
locks; strict;
comment	@ * @;


1.125
date	2017.09.12.06.32.07;	author djm;	state Exp;
branches;
next	1.124;
commitid	Amj5uk8F1JrQpmI5;

1.124
date	2017.06.24.06.34.38;	author djm;	state Exp;
branches;
next	1.123;
commitid	t1sqOvl7ysAY3CkV;

1.123
date	2016.11.30.03.00.05;	author djm;	state Exp;
branches;
next	1.122;
commitid	JiLWdRxWiRohf4cK;

1.122
date	2016.08.19.03.18.06;	author djm;	state Exp;
branches;
next	1.121;
commitid	o9ZQ52UJzA8fd7BT;

1.121
date	2016.08.15.12.27.56;	author naddy;	state Exp;
branches;
next	1.120;
commitid	Xx3KKNu5BoFBkpj3;

1.120
date	2015.07.10.06.21.53;	author markus;	state Exp;
branches;
next	1.119;
commitid	iQTtbsbSVdO9zivU;

1.119
date	2015.05.22.03.50.02;	author djm;	state Exp;
branches;
next	1.118;
commitid	FvDetWtDGSVa4xnt;

1.118
date	2015.05.21.06.43.31;	author djm;	state Exp;
branches;
next	1.117;
commitid	0jtBXwojTXMGT6Vz;

1.117
date	2015.04.29.03.48.56;	author dtucker;	state Exp;
branches;
next	1.116;
commitid	8c7S03ez3xfusEB2;

1.116
date	2015.01.13.07.39.19;	author djm;	state Exp;
branches;
next	1.115;
commitid	oriBpre3xTnTQZ4b;

1.115
date	2014.12.21.22.27.56;	author djm;	state Exp;
branches;
next	1.114;
commitid	EbtriidyZdsmXksl;

1.114
date	2014.07.15.15.54.14;	author millert;	state Exp;
branches;
next	1.113;
commitid	z7plx8Gkj6l2sxem;

1.113
date	2014.07.03.22.40.43;	author djm;	state Exp;
branches;
next	1.112;
commitid	cw6lnAok4n9rxQzD;

1.112
date	2014.01.29.06.18.35;	author djm;	state Exp;
branches;
next	1.111;

1.111
date	2013.12.05.01.16.41;	author djm;	state Exp;
branches;
next	1.110;

1.110
date	2013.10.29.09.48.02;	author djm;	state Exp;
branches;
next	1.109;

1.109
date	2013.07.19.07.37.48;	author markus;	state Exp;
branches;
next	1.108;

1.108
date	2013.05.16.04.09.14;	author dtucker;	state Exp;
branches;
next	1.107;

1.107
date	2013.01.03.05.49.36;	author djm;	state Exp;
branches;
next	1.106;

1.106
date	2012.12.02.20.46.11;	author djm;	state Exp;
branches;
next	1.105;

1.105
date	2012.11.04.11.09.15;	author djm;	state Exp;
branches;
next	1.104;

1.104
date	2012.10.30.21.29.55;	author djm;	state Exp;
branches;
next	1.103;

1.103
date	2012.07.10.02.19.15;	author djm;	state Exp;
branches;
next	1.102;

1.102
date	2012.06.19.18.25.28;	author markus;	state Exp;
branches;
next	1.101;

1.101
date	2012.05.13.01.42.32;	author dtucker;	state Exp;
branches;
next	1.100;

1.100
date	2012.04.12.02.42.32;	author djm;	state Exp;
branches;
next	1.99;

1.99
date	2011.06.22.21.57.01;	author djm;	state Exp;
branches;
next	1.98;

1.98
date	2011.05.23.03.30.07;	author djm;	state Exp;
branches;
next	1.97;

1.97
date	2011.05.20.03.25.45;	author djm;	state Exp;
branches;
next	1.96;

1.96
date	2011.05.11.04.47.06;	author djm;	state Exp;
branches;
next	1.95;

1.95
date	2010.11.13.23.27.50;	author djm;	state Exp;
branches;
next	1.94;

1.94
date	2010.09.22.05.01.29;	author djm;	state Exp;
branches;
next	1.93;

1.93
date	2010.05.07.11.30.30;	author djm;	state Exp;
branches;
next	1.92;

1.92
date	2010.03.04.10.36.03;	author djm;	state Exp;
branches;
next	1.91;

1.91
date	2010.02.26.20.29.54;	author djm;	state Exp;
branches;
next	1.90;

1.90
date	2010.01.13.03.48.13;	author djm;	state Exp;
branches;
next	1.89;

1.89
date	2010.01.09.23.04.13;	author dtucker;	state Exp;
branches;
next	1.88;

1.88
date	2009.10.28.16.38.18;	author reyk;	state Exp;
branches;
next	1.87;

1.87
date	2009.01.22.10.02.34;	author djm;	state Exp;
branches;
next	1.86;

1.86
date	2008.11.04.08.22.13;	author djm;	state Exp;
branches;
next	1.85;

1.85
date	2008.06.10.04.50.25;	author dtucker;	state Exp;
branches;
next	1.84;

1.84
date	2008.05.08.12.21.16;	author djm;	state Exp;
branches;
next	1.83;

1.83
date	2008.05.07.05.49.37;	author pyr;	state Exp;
branches;
next	1.82;

1.82
date	2008.02.13.22.38.17;	author djm;	state Exp;
branches;
next	1.81;

1.81
date	2008.02.08.23.24.08;	author djm;	state Exp;
branches;
next	1.80;

1.80
date	2007.02.19.10.45.58;	author dtucker;	state Exp;
branches;
next	1.79;

1.79
date	2006.08.14.12.40.25;	author dtucker;	state Exp;
branches;
next	1.78;

1.78
date	2006.08.03.03.34.42;	author deraadt;	state Exp;
branches;
next	1.77;

1.77
date	2006.07.21.12.43.36;	author dtucker;	state Exp;
branches;
next	1.76;

1.76
date	2006.07.19.13.07.10;	author dtucker;	state Exp;
branches;
next	1.75;

1.75
date	2006.07.12.11.34.58;	author dtucker;	state Exp;
branches;
next	1.74;

1.74
date	2006.07.06.10.47.05;	author djm;	state Exp;
branches;
next	1.73;

1.73
date	2006.03.25.22.22.43;	author djm;	state Exp;
branches;
next	1.72;

1.72
date	2005.12.06.22.38.27;	author reyk;	state Exp;
branches
	1.72.2.1;
next	1.71;

1.71
date	2004.12.23.23.11.00;	author djm;	state Exp;
branches
	1.71.2.1
	1.71.4.1;
next	1.70;

1.70
date	2004.06.24.19.30.54;	author djm;	state Exp;
branches
	1.70.2.1;
next	1.69;

1.69
date	2004.05.23.23.59.53;	author dtucker;	state Exp;
branches;
next	1.68;

1.68
date	2004.04.27.09.46.37;	author djm;	state Exp;
branches;
next	1.67;

1.67
date	2003.12.23.16.12.10;	author jakob;	state Exp;
branches
	1.67.2.1;
next	1.66;

1.66
date	2003.12.09.21.53.37;	author markus;	state Exp;
branches;
next	1.65;

1.65
date	2003.09.01.18.15.50;	author markus;	state Exp;
branches
	1.65.2.1;
next	1.64;

1.64
date	2003.08.22.10.56.09;	author markus;	state Exp;
branches;
next	1.63;

1.63
date	2003.08.13.08.46.30;	author markus;	state Exp;
branches;
next	1.62;

1.62
date	2003.07.22.13.35.22;	author markus;	state Exp;
branches;
next	1.61;

1.61
date	2003.06.02.09.17.34;	author markus;	state Exp;
branches;
next	1.60;

1.60
date	2003.05.15.01.48.10;	author jakob;	state Exp;
branches;
next	1.59;

1.59
date	2002.07.30.17.03.55;	author markus;	state Exp;
branches
	1.59.2.1
	1.59.4.1;
next	1.58;

1.58
date	2002.06.20.23.05.55;	author markus;	state Exp;
branches;
next	1.57;

1.57
date	2002.03.20.19.12.25;	author stevesk;	state Exp;
branches
	1.57.2.1;
next	1.56;

1.56
date	2002.03.19.03.03.43;	author stevesk;	state Exp;
branches;
next	1.55;

1.55
date	2002.03.18.17.50.31;	author provos;	state Exp;
branches;
next	1.54;

1.54
date	2002.03.04.17.27.39;	author stevesk;	state Exp;
branches;
next	1.53;

1.53
date	2002.01.29.14.32.03;	author markus;	state Exp;
branches;
next	1.52;

1.52
date	2002.01.27.14.57.46;	author stevesk;	state Exp;
branches;
next	1.51;

1.51
date	2001.12.19.07.18.56;	author deraadt;	state Exp;
branches;
next	1.50;

1.50
date	2001.12.06.13.30.05;	author markus;	state Exp;
branches;
next	1.49;

1.49
date	2001.08.17.18.59.47;	author stevesk;	state Exp;
branches
	1.49.2.1;
next	1.48;

1.48
date	2001.08.16.19.18.34;	author jakob;	state Exp;
branches;
next	1.47;

1.47
date	2001.06.26.17.27.24;	author markus;	state Exp;
branches;
next	1.46;

1.46
date	2001.06.26.16.15.24;	author dugsong;	state Exp;
branches;
next	1.45;

1.45
date	2001.06.26.06.33.00;	author itojun;	state Exp;
branches;
next	1.44;

1.44
date	2001.06.23.02.34.31;	author markus;	state Exp;
branches;
next	1.43;

1.43
date	2001.05.20.17.20.35;	author markus;	state Exp;
branches;
next	1.42;

1.42
date	2001.05.18.14.13.29;	author markus;	state Exp;
branches;
next	1.41;

1.41
date	2001.04.13.22.46.53;	author beck;	state Exp;
branches
	1.41.2.1;
next	1.40;

1.40
date	2001.04.12.19.15.25;	author markus;	state Exp;
branches;
next	1.39;

1.39
date	2001.03.25.13.16.10;	author stevesk;	state Exp;
branches;
next	1.38;

1.38
date	2001.02.12.16.16.23;	author markus;	state Exp;
branches;
next	1.37;

1.37
date	2001.02.11.12.59.25;	author markus;	state Exp;
branches;
next	1.36;

1.36
date	2001.02.03.10.08.37;	author markus;	state Exp;
branches;
next	1.35;

1.35
date	2001.01.22.23.06.40;	author markus;	state Exp;
branches;
next	1.34;

1.34
date	2001.01.19.12.45.27;	author markus;	state Exp;
branches;
next	1.33;

1.33
date	2001.01.08.22.29.05;	author markus;	state Exp;
branches;
next	1.32;

1.32
date	2000.12.19.23.17.58;	author markus;	state Exp;
branches;
next	1.31;

1.31
date	2000.11.12.19.50.38;	author markus;	state Exp;
branches;
next	1.30;

1.30
date	2000.10.14.12.12.09;	author markus;	state Exp;
branches
	1.30.2.1;
next	1.29;

1.29
date	2000.10.11.20.14.39;	author markus;	state Exp;
branches;
next	1.28;

1.28
date	2000.09.07.20.27.53;	author deraadt;	state Exp;
branches;
next	1.27;

1.27
date	2000.07.22.09.14.36;	author markus;	state Exp;
branches;
next	1.26;

1.26
date	2000.06.26.21.59.18;	author markus;	state Exp;
branches;
next	1.25;

1.25
date	2000.06.20.01.39.44;	author markus;	state Exp;
branches;
next	1.24;

1.24
date	2000.06.17.22.52.33;	author jakob;	state Exp;
branches;
next	1.23;

1.23
date	2000.05.31.06.36.40;	author markus;	state Exp;
branches;
next	1.22;

1.22
date	2000.05.06.17.45.37;	author markus;	state Exp;
branches
	1.22.2.1;
next	1.21;

1.21
date	2000.05.03.18.03.07;	author markus;	state Exp;
branches;
next	1.20;

1.20
date	2000.05.03.10.21.48;	author markus;	state Exp;
branches;
next	1.19;

1.19
date	2000.05.01.18.50.59;	author markus;	state Exp;
branches;
next	1.18;

1.18
date	2000.04.14.10.30.33;	author markus;	state Exp;
branches;
next	1.17;

1.17
date	2000.04.12.07.45.44;	author markus;	state Exp;
branches;
next	1.16;

1.16
date	2000.04.06.08.55.22;	author markus;	state Exp;
branches;
next	1.15;

1.15
date	2000.01.04.00.08.00;	author markus;	state Exp;
branches;
next	1.14;

1.14
date	99.11.24.19.53.51;	author markus;	state Exp;
branches;
next	1.13;

1.13
date	99.11.24.00.26.03;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	99.11.11.22.58.38;	author markus;	state Exp;
branches;
next	1.11;

1.11
date	99.11.10.23.36.44;	author markus;	state Exp;
branches;
next	1.10;

1.10
date	99.10.17.20.48.07;	author dugsong;	state Exp;
branches;
next	1.9;

1.9
date	99.10.12.18.11.54;	author markus;	state Exp;
branches;
next	1.8;

1.8
date	99.10.11.21.48.29;	author markus;	state Exp;
branches;
next	1.7;

1.7
date	99.10.11.21.07.37;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	99.10.07.22.46.32;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	99.10.07.21.45.02;	author markus;	state Exp;
branches;
next	1.4;

1.4
date	99.10.01.02.38.09;	author provos;	state Exp;
branches;
next	1.3;

1.3
date	99.09.29.18.16.20;	author dugsong;	state Exp;
branches;
next	1.2;

1.2
date	99.09.28.07.56.47;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	99.09.26.20.53.37;	author deraadt;	state Exp;
branches;
next	;

1.22.2.1
date	2000.06.12.02.37.35;	author jason;	state Exp;
branches;
next	1.22.2.2;

1.22.2.2
date	2000.09.01.18.23.22;	author jason;	state Exp;
branches;
next	1.22.2.3;

1.22.2.3
date	2000.11.08.21.31.13;	author jason;	state Exp;
branches;
next	1.22.2.4;

1.22.2.4
date	2001.03.12.15.44.14;	author jason;	state Exp;
branches;
next	1.22.2.5;

1.22.2.5
date	2001.03.21.18.53.02;	author jason;	state Exp;
branches;
next	;

1.30.2.1
date	2001.02.16.20.13.13;	author jason;	state Exp;
branches;
next	1.30.2.2;

1.30.2.2
date	2001.02.19.17.19.19;	author jason;	state Exp;
branches;
next	1.30.2.3;

1.30.2.3
date	2001.03.21.19.46.28;	author jason;	state Exp;
branches;
next	1.30.2.4;

1.30.2.4
date	2001.05.07.21.09.33;	author jason;	state Exp;
branches;
next	1.30.2.5;

1.30.2.5
date	2001.09.27.00.15.42;	author miod;	state Exp;
branches;
next	1.30.2.6;

1.30.2.6
date	2002.03.08.17.04.43;	author brad;	state Exp;
branches;
next	;

1.41.2.1
date	2001.09.27.19.03.55;	author jason;	state Exp;
branches;
next	1.41.2.2;

1.41.2.2
date	2002.03.09.00.20.44;	author miod;	state Exp;
branches;
next	1.41.2.3;

1.41.2.3
date	2002.06.02.22.56.10;	author miod;	state Exp;
branches;
next	;

1.49.2.1
date	2002.03.07.17.37.47;	author jason;	state Exp;
branches;
next	1.49.2.2;

1.49.2.2
date	2002.05.17.00.03.24;	author miod;	state Exp;
branches;
next	1.49.2.3;

1.49.2.3
date	2002.06.22.07.23.17;	author miod;	state Exp;
branches;
next	1.49.2.4;

1.49.2.4
date	2002.10.11.14.53.07;	author miod;	state Exp;
branches;
next	;

1.57.2.1
date	2002.06.26.15.30.38;	author jason;	state Exp;
branches;
next	1.57.2.2;

1.57.2.2
date	2002.10.11.14.51.52;	author miod;	state Exp;
branches;
next	;

1.59.2.1
date	2003.09.16.21.20.27;	author brad;	state Exp;
branches;
next	;

1.59.4.1
date	2003.09.16.20.50.43;	author brad;	state Exp;
branches;
next	1.59.4.2;

1.59.4.2
date	2004.03.04.18.18.16;	author brad;	state Exp;
branches;
next	;

1.65.2.1
date	2004.02.28.03.51.33;	author brad;	state Exp;
branches;
next	1.65.2.2;

1.65.2.2
date	2004.08.19.22.37.32;	author brad;	state Exp;
branches;
next	;

1.67.2.1
date	2004.08.19.04.13.27;	author brad;	state Exp;
branches;
next	1.67.2.2;

1.67.2.2
date	2005.03.10.17.15.04;	author brad;	state Exp;
branches;
next	;

1.70.2.1
date	2005.03.10.16.28.27;	author brad;	state Exp;
branches;
next	;

1.71.2.1
date	2006.02.03.02.53.45;	author brad;	state Exp;
branches;
next	;

1.71.4.1
date	2006.02.03.03.01.57;	author brad;	state Exp;
branches;
next	1.71.4.2;

1.71.4.2
date	2006.10.06.03.19.33;	author brad;	state Exp;
branches;
next	;

1.72.2.1
date	2006.09.30.04.06.51;	author brad;	state Exp;
branches;
next	;


desc
@@


1.125
log
@refactor channels.c

Move static state to a "struct ssh_channels" that is allocated at
runtime and tracked as a member of struct ssh.

Explicitly pass "struct ssh" to all channels functions.

Replace use of the legacy packet APIs in channels.c.

Rework sshd_config PermitOpen handling: previously the configuration
parser would call directly into the channels layer. After the refactor
this is not possible, as the channels structures are allocated at
connection time and aren't available when the configuration is parsed.
The server config parser now tracks PermitOpen itself and explicitly
configures the channels code later.

ok markus@@
@
text
@/* $OpenBSD: servconf.h,v 1.124 2017/06/24 06:34:38 djm Exp $ */

/*
 * Author: Tatu Ylonen <ylo@@cs.hut.fi>
 * Copyright (c) 1995 Tatu Ylonen <ylo@@cs.hut.fi>, Espoo, Finland
 *                    All rights reserved
 * Definitions for server configuration data and for the functions reading it.
 *
 * As far as I am concerned, the code I have written for this software
 * can be used freely for any purpose.  Any derived versions of this
 * software must be clearly marked as such, and if the derived work is
 * incompatible with the protocol description in the RFC file, it must be
 * called by a name other than "ssh" or "Secure Shell".
 */

#ifndef SERVCONF_H
#define SERVCONF_H

#define MAX_PORTS		256	/* Max # ports. */

#define MAX_ALLOW_USERS		256	/* Max # users on allow list. */
#define MAX_DENY_USERS		256	/* Max # users on deny list. */
#define MAX_ALLOW_GROUPS	256	/* Max # groups on allow list. */
#define MAX_DENY_GROUPS		256	/* Max # groups on deny list. */
#define MAX_SUBSYSTEMS		256	/* Max # subsystems. */
#define MAX_HOSTKEYS		256	/* Max # hostkeys. */
#define MAX_HOSTCERTS		256	/* Max # host certificates. */
#define MAX_ACCEPT_ENV		256	/* Max # of env vars. */
#define MAX_MATCH_GROUPS	256	/* Max # of groups for Match. */
#define MAX_AUTHKEYS_FILES	256	/* Max # of authorized_keys files. */
#define MAX_AUTH_METHODS	256	/* Max # of AuthenticationMethods. */

/* permit_root_login */
#define	PERMIT_NOT_SET		-1
#define	PERMIT_NO		0
#define	PERMIT_FORCED_ONLY	1
#define	PERMIT_NO_PASSWD	2
#define	PERMIT_YES		3

/* use_privsep */
#define PRIVSEP_OFF		0
#define PRIVSEP_ON		1
#define PRIVSEP_NOSANDBOX	2

/* AllowTCPForwarding */
#define FORWARD_DENY		0
#define FORWARD_REMOTE		(1)
#define FORWARD_LOCAL		(1<<1)
#define FORWARD_ALLOW		(FORWARD_REMOTE|FORWARD_LOCAL)

/* PermitOpen */
#define PERMITOPEN_ANY		0
#define PERMITOPEN_NONE		-2

#define DEFAULT_AUTH_FAIL_MAX	6	/* Default for MaxAuthTries */
#define DEFAULT_SESSIONS_MAX	10	/* Default for MaxSessions */

/* Magic name for internal sftp-server */
#define INTERNAL_SFTP_NAME	"internal-sftp"

struct ssh;
struct fwd_perm_list;

typedef struct {
	u_int	num_ports;
	u_int	ports_from_cmdline;
	int	ports[MAX_PORTS];	/* Port number to listen on. */
	u_int	num_queued_listens;
	char   **queued_listen_addrs;
	int    *queued_listen_ports;
	struct addrinfo *listen_addrs;	/* Addresses on which the server listens. */
	int     address_family;		/* Address family used by the server. */
	char   *host_key_files[MAX_HOSTKEYS];	/* Files containing host keys. */
	int     num_host_key_files;     /* Number of files for host keys. */
	char   *host_cert_files[MAX_HOSTCERTS];	/* Files containing host certs. */
	int     num_host_cert_files;     /* Number of files for host certs. */
	char   *host_key_agent;		 /* ssh-agent socket for host keys. */
	char   *pid_file;	/* Where to put our pid */
	int     login_grace_time;	/* Disconnect if no auth in this time
					 * (sec). */
	int     permit_root_login;	/* PERMIT_*, see above */
	int     ignore_rhosts;	/* Ignore .rhosts and .shosts. */
	int     ignore_user_known_hosts;	/* Ignore ~/.ssh/known_hosts
						 * for RhostsRsaAuth */
	int     print_motd;	/* If true, print /etc/motd. */
	int	print_lastlog;	/* If true, print lastlog */
	int     x11_forwarding;	/* If true, permit inet (spoofing) X11 fwd. */
	int     x11_display_offset;	/* What DISPLAY number to start
					 * searching at */
	int     x11_use_localhost;	/* If true, use localhost for fake X11 server. */
	char   *xauth_location;	/* Location of xauth program */
	int	permit_tty;	/* If false, deny pty allocation */
	int	permit_user_rc;	/* If false, deny ~/.ssh/rc execution */
	int     strict_modes;	/* If true, require string home dir modes. */
	int     tcp_keep_alive;	/* If true, set SO_KEEPALIVE. */
	int	ip_qos_interactive;	/* IP ToS/DSCP/class for interactive */
	int	ip_qos_bulk;		/* IP ToS/DSCP/class for bulk traffic */
	char   *ciphers;	/* Supported SSH2 ciphers. */
	char   *macs;		/* Supported SSH2 macs. */
	char   *kex_algorithms;	/* SSH2 kex methods in order of preference. */
	struct ForwardOptions fwd_opts;	/* forwarding options */
	SyslogFacility log_facility;	/* Facility for system logging. */
	LogLevel log_level;	/* Level for system logging. */
	int     hostbased_authentication;	/* If true, permit ssh2 hostbased auth */
	int     hostbased_uses_name_from_packet_only; /* experimental */
	char   *hostbased_key_types;	/* Key types allowed for hostbased */
	char   *hostkeyalgorithms;	/* SSH2 server key types */
	int     pubkey_authentication;	/* If true, permit ssh2 pubkey authentication. */
	char   *pubkey_key_types;	/* Key types allowed for public key */
	int     kerberos_authentication;	/* If true, permit Kerberos
						 * authentication. */
	int     kerberos_or_local_passwd;	/* If true, permit kerberos
						 * and any other password
						 * authentication mechanism,
						 * such as SecurID or
						 * /etc/passwd */
	int     kerberos_ticket_cleanup;	/* If true, destroy ticket
						 * file on logout. */
	int     kerberos_get_afs_token;		/* If true, try to get AFS token if
						 * authenticated with Kerberos. */
	int     gss_authentication;	/* If true, permit GSSAPI authentication */
	int     gss_cleanup_creds;	/* If true, destroy cred cache on logout */
	int     gss_strict_acceptor;	/* If true, restrict the GSSAPI acceptor name */
	int     password_authentication;	/* If true, permit password
						 * authentication. */
	int     kbd_interactive_authentication;	/* If true, permit */
	int     challenge_response_authentication;
	int     permit_empty_passwd;	/* If false, do not permit empty
					 * passwords. */
	int     permit_user_env;	/* If true, read ~/.ssh/environment */
	int     compression;	/* If true, compression is allowed */
	int	allow_tcp_forwarding; /* One of FORWARD_* */
	int	allow_streamlocal_forwarding; /* One of FORWARD_* */
	int	allow_agent_forwarding;
	int	disable_forwarding;
	u_int num_allow_users;
	char   *allow_users[MAX_ALLOW_USERS];
	u_int num_deny_users;
	char   *deny_users[MAX_DENY_USERS];
	u_int num_allow_groups;
	char   *allow_groups[MAX_ALLOW_GROUPS];
	u_int num_deny_groups;
	char   *deny_groups[MAX_DENY_GROUPS];

	u_int num_subsystems;
	char   *subsystem_name[MAX_SUBSYSTEMS];
	char   *subsystem_command[MAX_SUBSYSTEMS];
	char   *subsystem_args[MAX_SUBSYSTEMS];

	u_int num_accept_env;
	char   *accept_env[MAX_ACCEPT_ENV];

	int	max_startups_begin;
	int	max_startups_rate;
	int	max_startups;
	int	max_authtries;
	int	max_sessions;
	char   *banner;			/* SSH-2 banner message */
	int	use_dns;
	int	client_alive_interval;	/*
					 * poke the client this often to
					 * see if it's still there
					 */
	int	client_alive_count_max;	/*
					 * If the client is unresponsive
					 * for this many intervals above,
					 * disconnect the session
					 */

	u_int num_authkeys_files;	/* Files containing public keys */
	char   *authorized_keys_files[MAX_AUTHKEYS_FILES];

	char   *adm_forced_command;

	int	permit_tun;

	char   **permitted_opens;
	u_int   num_permitted_opens; /* May also be one of PERMITOPEN_* */

	char   *chroot_directory;
	char   *revoked_keys_file;
	char   *trusted_user_ca_keys;
	char   *authorized_keys_command;
	char   *authorized_keys_command_user;
	char   *authorized_principals_file;
	char   *authorized_principals_command;
	char   *authorized_principals_command_user;

	int64_t rekey_limit;
	int	rekey_interval;

	char   *version_addendum;	/* Appended to SSH banner */

	u_int	num_auth_methods;
	char   *auth_methods[MAX_AUTH_METHODS];

	int	fingerprint_hash;
	int	expose_userauth_info;
}       ServerOptions;

/* Information about the incoming connection as used by Match */
struct connection_info {
	const char *user;
	const char *host;	/* possibly resolved hostname */
	const char *address; 	/* remote address */
	const char *laddress;	/* local address */
	int lport;		/* local port */
};


/*
 * These are string config options that must be copied between the
 * Match sub-config and the main config, and must be sent from the
 * privsep slave to the privsep master. We use a macro to ensure all
 * the options are copied and the copies are done in the correct order.
 *
 * NB. an option must appear in servconf.c:copy_set_server_options() or
 * COPY_MATCH_STRING_OPTS here but never both.
 */
#define COPY_MATCH_STRING_OPTS() do { \
		M_CP_STROPT(banner); \
		M_CP_STROPT(trusted_user_ca_keys); \
		M_CP_STROPT(revoked_keys_file); \
		M_CP_STROPT(authorized_keys_command); \
		M_CP_STROPT(authorized_keys_command_user); \
		M_CP_STROPT(authorized_principals_file); \
		M_CP_STROPT(authorized_principals_command); \
		M_CP_STROPT(authorized_principals_command_user); \
		M_CP_STROPT(hostbased_key_types); \
		M_CP_STROPT(pubkey_key_types); \
		M_CP_STRARRAYOPT(authorized_keys_files, num_authkeys_files); \
		M_CP_STRARRAYOPT(allow_users, num_allow_users); \
		M_CP_STRARRAYOPT(deny_users, num_deny_users); \
		M_CP_STRARRAYOPT(allow_groups, num_allow_groups); \
		M_CP_STRARRAYOPT(deny_groups, num_deny_groups); \
		M_CP_STRARRAYOPT(accept_env, num_accept_env); \
		M_CP_STRARRAYOPT(auth_methods, num_auth_methods); \
		M_CP_STRARRAYOPT(permitted_opens, num_permitted_opens); \
	} while (0)

struct connection_info *get_connection_info(int, int);
void	 initialize_server_options(ServerOptions *);
void	 fill_default_server_options(ServerOptions *);
int	 process_server_config_line(ServerOptions *, char *, const char *, int,
	     int *, struct connection_info *);
void	 process_permitopen(struct ssh *ssh, ServerOptions *options);
void	 load_server_config(const char *, Buffer *);
void	 parse_server_config(ServerOptions *, const char *, Buffer *,
	     struct connection_info *);
void	 parse_server_match_config(ServerOptions *, struct connection_info *);
int	 parse_server_match_testspec(struct connection_info *, char *);
int	 server_match_spec_complete(struct connection_info *);
void	 copy_set_server_options(ServerOptions *, ServerOptions *, int);
void	 dump_config(ServerOptions *);
char	*derelativise_path(const char *);

#endif				/* SERVCONF_H */
@


1.124
log
@refactor authentication logging

optionally record successful auth methods and public credentials
used in a file accessible to user sessions

feedback and ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.123 2016/11/30 03:00:05 djm Exp $ */
d51 4
d61 3
d177 2
a178 1
	int	num_permitted_opens;
d238 1
d246 1
@


1.123
log
@Add a sshd_config DisableForwaring option that disables X11, agent,
TCP, tunnel and Unix domain socket forwarding, as well as anything
else we might implement in the future.

This, like the 'restrict' authorized_keys flag, is intended to be a
simple and future-proof way of restricting an account. Suggested as
a complement to 'restrict' by Jann Horn; ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.122 2016/08/19 03:18:06 djm Exp $ */
d190 1
@


1.122
log
@remove UseLogin option and support for having /bin/login manage
login sessions; ok deraadt markus dtucker
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.121 2016/08/15 12:27:56 naddy Exp $ */
d128 1
@


1.121
log
@Remove more SSH1 server code:
* Drop sshd's -k option.
* Retire configuration keywords that only apply to protocol 1, as well as
  the "protocol" keyword.
* Remove some related vestiges of protocol 1 support.

ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.120 2015/07/10 06:21:53 markus Exp $ */
a123 1
	int     use_login;	/* If true, login(1) is used */
@


1.120
log
@Turn off DSA by default; add HostKeyAlgorithms to the server and
PubkeyAcceptedKeyTypes to the client side, so it still can be
tested or turned back on; feedback and ok djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.119 2015/05/22 03:50:02 djm Exp $ */
a71 1
	int     server_key_bits;/* Size of the server key. */
a73 1
	int     key_regeneration_time;	/* Server key lifetime (seconds). */
a93 1
	int	protocol;	/* Supported protocol versions. */
a96 2
	int     rhosts_rsa_authentication;	/* If true, permit rhosts RSA
						 * authentication. */
a100 1
	int     rsa_authentication;	/* If true, permit RSA authentication. */
@


1.119
log
@add knob to relax GSSAPI host credential check for multihomed hosts
bz#928, patch by Simon Wilkinson; ok dtucker
(kerberos/GSSAPI is not compiled by default on OpenBSD)
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.118 2015/05/21 06:43:31 djm Exp $ */
d105 1
@


1.118
log
@add AuthorizedPrincipalsCommand that allows getting authorized_principals
from a subprocess rather than a file, which is quite useful in
deployments with large userbases

feedback and ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.117 2015/04/29 03:48:56 dtucker Exp $ */
d121 1
@


1.117
log
@Allow ListenAddress, Port and AddressFamily in any order.  bz#68,
ok djm@@, jmc@@ (for the man page bit).
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.116 2015/01/13 07:39:19 djm Exp $ */
a178 1
	char   *authorized_principals_file;
d181 3
a218 1
		M_CP_STROPT(authorized_principals_file); \
d221 3
@


1.116
log
@add sshd_config HostbasedAcceptedKeyTypes and PubkeyAcceptedKeyTypes
options to allow sshd to control what public key types will be
accepted. Currently defaults to all. Feedback & ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.115 2014/12/21 22:27:56 djm Exp $ */
d61 3
a63 1
	char   *listen_addr;		/* Address on which the server listens. */
@


1.115
log
@Add FingerprintHash option to control algorithm used for key
fingerprints. Default changes from MD5 to SHA256 and format
from hex to base64.

Feedback and ok naddy@@ markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.114 2014/07/15 15:54:14 millert Exp $ */
d102 1
d105 1
d218 2
@


1.114
log
@Add support for Unix domain socket forwarding.  A remote TCP port
may be forwarded to a local Unix domain socket and vice versa or
both ends may be a Unix domain socket.  This is a reimplementation
of the streamlocal patches by William Ahern from:
    http://www.25thandclement.com/~william/projects/streamlocal.html
OK djm@@ markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.113 2014/07/03 22:40:43 djm Exp $ */
d186 2
@


1.113
log
@Add a sshd_config PermitUserRC option to control whether ~/.ssh/rc is
executed, mirroring the no-user-rc authorized_keys option;
bz#2160; ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.112 2014/01/29 06:18:35 djm Exp $ */
d95 1
a95 1
	int     gateway_ports;	/* If true, allow remote connects to forwarded ports. */
d127 1
@


1.112
log
@remove experimental, never-enabled JPAKE code; ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.111 2013/12/05 01:16:41 djm Exp $ */
d86 1
@


1.111
log
@bz#2161 - fix AuthorizedKeysCommand inside a Match block and
rearrange things so the same error is harder to make next time;
with and ok dtucker@@
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.110 2013/10/29 09:48:02 djm Exp $ */
a119 2
	int     zero_knowledge_password_authentication;
					/* If true, permit jpake auth */
@


1.110
log
@shd_config PermitTTY to disallow TTY allocation, mirroring the
longstanding no-pty authorized_keys option;
bz#2070, patch from Teran McKinney; ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.109 2013/07/19 07:37:48 markus Exp $ */
d203 3
@


1.109
log
@add ssh-agent(1) support to sshd(8); allows encrypted hostkeys,
or hostkeys on smartcards; most of the work by Zev Weiss; bz #1974
ok djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.108 2013/05/16 04:09:14 dtucker Exp $ */
d85 1
@


1.108
log
@Add RekeyLimit to sshd with the same syntax as the client allowing rekeying
based on traffic volume or time.  ok djm@@, help & ok jmc@@ for the man page.
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.107 2013/01/03 05:49:36 djm Exp $ */
d68 1
@


1.107
log
@add a couple of ServerOptions members that should be copied to the privsep
child (for consistency, in this case they happen only to be accessed in the
monitor); ok dtucker@@
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.106 2012/12/02 20:46:11 djm Exp $ */
d176 3
@


1.106
log
@make AllowTcpForwarding accept "local" and "remote" in addition to its
current "yes"/"no" to allow the server to specify whether just local or
remote TCP forwarding is enabled. ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.105 2012/11/04 11:09:15 djm Exp $ */
d204 2
@


1.105
log
@Support multiple required authentication via an AuthenticationMethods
option. This option lists one or more comma-separated lists of
authentication method names. Successful completion of all the methods in
any list is required for authentication to complete;
feedback and ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.104 2012/10/30 21:29:55 djm Exp $ */
d45 6
d125 1
a125 1
	int	allow_tcp_forwarding;
@


1.104
log
@new sshd_config option AuthorizedKeysCommand to support fetching
authorized_keys from a command in addition to (or instead of) from
the filesystem. The command is run as the target server user unless
another specified via a new AuthorizedKeysCommandUser option.

patch originally by jchadima AT redhat.com, reworked by me; feedback
and ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.103 2012/07/10 02:19:15 djm Exp $ */
d31 1
d172 3
d204 1
@


1.103
log
@Turn on systrace sandboxing of pre-auth sshd by default for new installs
by shipping a config that overrides the current UsePrivilegeSeparation=yes
default. Make it easier to flip the default in the future by adding too.
prodded markus@@ feedback dtucker@@ "get it in" deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.102 2012/06/19 18:25:28 markus Exp $ */
d167 2
@


1.102
log
@sshd_config: extend Match to allow AcceptEnv and {Allow,Deny}{Users,Groups}
this allows 'Match LocalPort 1022' combined with 'AllowUser bauer'
ok djm@@ (back in March)
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.101 2012/05/13 01:42:32 dtucker Exp $ */
d42 1
a42 1
#define PRIVSEP_SANDBOX		2
@


1.101
log
@Add "Match LocalAddress" and "Match LocalPort" to sshd and adjust tests
to match.  Feedback and ok djm@@ markus@@.
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.100 2012/04/12 02:42:32 djm Exp $ */
d193 5
@


1.100
log
@VersionAddendum option to allow server operators to append some arbitrary
text to the SSH-... banner; ok deraadt@@ "don't care" markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.99 2011/06/22 21:57:01 djm Exp $ */
d171 10
d195 1
d199 1
a199 1
	     int *, const char *, const char *, const char *);
d202 4
a205 3
	     const char *, const char *, const char *);
void	 parse_server_match_config(ServerOptions *, const char *, const char *,
	     const char *);
@


1.99
log
@introduce sandboxing of the pre-auth privsep child using systrace(4).

This introduces a new "UsePrivilegeSeparation=sandbox" option for
sshd_config that applies mandatory restrictions on the syscalls the
privsep child can perform. This prevents a compromised privsep child
from being used to attack other hosts (by opening sockets and proxying)
or probing local kernel attack surface.

The sandbox is implemented using systrace(4) in unsupervised "fast-path"
mode, where a list of permitted syscalls is supplied. Any syscall not
on the list results in SIGKILL being sent to the privsep child. Note
that this requires a kernel with the new SYSTR_POLICY_KILL option.

UsePrivilegeSeparation=sandbox will become the default in the future
so please start testing it now.

feedback dtucker@@; ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.98 2011/05/23 03:30:07 djm Exp $ */
d167 2
@


1.98
log
@allow AuthorizedKeysFile to specify multiple files, separated by spaces.
Bring back authorized_keys2 as a default search path (to avoid breaking
existing users of this file), but override this in sshd_config so it will
be no longer used on fresh installs. Maybe in 2015 we can remove it
entierly :)

feedback and ok markus@@ dtucker@@
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.97 2011/05/20 03:25:45 djm Exp $ */
d38 5
@


1.97
log
@use a macro to define which string options to copy between configs
for Match. This avoids problems caused by forgetting to keep three
code locations in perfect sync and ordering

"this is at once beautiful and horrible" + ok dtucker@@
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.96 2011/05/11 04:47:06 djm Exp $ */
d30 1
d149 2
a150 1
	char   *authorized_keys_file;	/* File containing public keys */
a173 1
		M_CP_STROPT(authorized_keys_file); \
d175 1
@


1.96
log
@remove support for authorized_keys2; it is a relic from the early days
of protocol v.2 support and has been undocumented for many years;
ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.95 2010/11/13 23:27:50 djm Exp $ */
d161 14
@


1.95
log
@allow ssh and sshd to set arbitrary TOS/DSCP/QoS values instead of
hardcoding lowdelay/throughput.

bz#1733 patch from philipp AT redfish-solutions.com; ok markus@@ deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.94 2010/09/22 05:01:29 djm Exp $ */
a148 1
	char   *authorized_keys_file2;
@


1.94
log
@add a KexAlgorithms knob to the client and server configuration to allow
selection of which key exchange methods are used by ssh(1) and sshd(8)
and their order of preference.

ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.93 2010/05/07 11:30:30 djm Exp $ */
d73 2
@


1.93
log
@add some optional indirection to matching of principal names listed
in certificates. Currently, a certificate must include the a user's name
to be accepted for authentication. This change adds the ability to
specify a list of certificate principal names that are acceptable.

When authenticating using a CA trusted through ~/.ssh/authorized_keys,
this adds a new principals="name1[,name2,...]" key option.

For CAs listed through sshd_config's TrustedCAKeys option, a new config
option "AuthorizedPrincipalsFile" specifies a per-user file containing
the list of acceptable names.

If either option is absent, the current behaviour of requiring the
username to appear in principals continues to apply.

These options are useful for role accounts, disjoint account namespaces
and "user@@realm"-style naming policies in certificates.

feedback and ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.92 2010/03/04 10:36:03 djm Exp $ */
d75 1
@


1.92
log
@Add a TrustedUserCAKeys option to sshd_config to specify CA keys that
are trusted to authenticate users (in addition than doing it per-user
in authorized_keys).

Add a RevokedKeys option to sshd_config and a @@revoked marker to
known_hosts to allow keys to me revoked and banned for user or host
authentication.

feedback and ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.91 2010/02/26 20:29:54 djm Exp $ */
d157 1
@


1.91
log
@Add support for certificate key types for users and hosts.

OpenSSH certificate key types are not X.509 certificates, but a much
simpler format that encodes a public key, identity information and
some validity constraints and signs it with a CA key. CA keys are
regular SSH keys. This certificate style avoids the attack surface
of X.509 certificates and is very easy to deploy.

Certified host keys allow automatic acceptance of new host keys
when a CA certificate is marked as trusted in ~/.ssh/known_hosts.
see VERIFYING HOST KEYS in ssh(1) for details.

Certified user keys allow authentication of users when the signing
CA key is marked as trusted in authorized_keys. See "AUTHORIZED_KEYS
FILE FORMAT" in sshd(8) for details.

Certificates are minted using ssh-keygen(1), documentation is in
the "CERTIFICATES" section of that manpage.

Documentation on the format of certificates is in the file
PROTOCOL.certkeys

feedback and ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.90 2010/01/13 03:48:13 djm Exp $ */
d155 2
@


1.90
log
@avoid run-time failures when specifying hostkeys via a relative
path by prepending the cwd in these cases; bz#1290; ok dtucker@@
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.89 2010/01/09 23:04:13 dtucker Exp $ */
d27 1
d53 2
@


1.89
log
@Remove RoutingDomain from ssh since it's now not needed.  It can be replaced
with "route exec" or "nc -V" as a proxycommand.  "route exec" also ensures
that trafic such as DNS lookups stays withing the specified routingdomain.

For example (from reyk):
# route -T 2 exec /usr/sbin/sshd
or inherited from the parent process
$ route -T 2 exec sh
$ ssh 10.1.2.3

ok deraadt@@ markus@@ stevesk@@ reyk@@
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.87 2009/01/22 10:02:34 djm Exp $ */
d165 1
@


1.88
log
@Allow to set the rdomain in ssh/sftp/scp/sshd and ssh-keyscan.

ok markus@@
@
text
@a150 2
	int	rdomain;

@


1.87
log
@make a2port() return -1 when it encounters an invalid port number
rather than 0, which it will now treat as valid (needed for future work)

adjust current consumers of a2port() to check its return value is <= 0,
which in turn required some things to be converted from u_short => int

make use of int vs. u_short consistent in some other places too

feedback & ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.86 2008/11/04 08:22:13 djm Exp $ */
d150 2
@


1.86
log
@Add support for an experimental zero-knowledge password authentication
method using the J-PAKE protocol described in F. Hao, P. Ryan,
"Password Authenticated Key Exchange by Juggling", 16th Workshop on
Security Protocols, Cambridge, April 2008.

This method allows password-based authentication without exposing
the password to the server. Instead, the client and server exchange
cryptographic proofs to demonstrate of knowledge of the password while
revealing nothing useful to an attacker or compromised endpoint.

This is experimental, work-in-progress code and is presently
compiled-time disabled (turn on -DJPAKE in Makefile.inc).

"just commit it.  It isn't too intrusive." deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.85 2008/06/10 04:50:25 dtucker Exp $ */
d44 3
a46 3
	u_int num_ports;
	u_int ports_from_cmdline;
	u_short ports[MAX_PORTS];	/* Port number to listen on. */
@


1.85
log
@Add extended test mode (-T) and connection parameters for test mode (-C).
-T causes sshd to write its effective configuration to stdout and exit.
-C causes any relevant Match rules to be applied before output.  The
combination allows tesing of the parser and config files.  ok deraadt djm
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.84 2008/05/08 12:21:16 djm Exp $ */
d99 2
@


1.84
log
@Make the maximum number of sessions run-time controllable via
a sshd_config MaxSessions knob. This is useful for disabling
login/shell/subsystem access while leaving port-forwarding working
(MaxSessions 0), disabling connection multiplexing (MaxSessions 1) or
simply increasing the number of allows multiplexed sessions.

Because some bozos are sure to configure MaxSessions in excess of the
number of available file descriptors in sshd (which, at peak, might be
as many as 9*MaxSessions), audit sshd to ensure that it doesn't leak fds
on error paths, and make it fail gracefully on out-of-fd conditions -
sending channel errors instead of than exiting with fatal().

bz#1090; MaxSessions config bits and manpage from junyer AT gmail.com

ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.83 2008/05/07 05:49:37 pyr Exp $ */
d162 1
@


1.83
log
@Enable the AllowAgentForwarding option in sshd_config (global and match
context), to specify if agents should be permitted on the server.
As the man page states:

``Note that disabling Agent forwarding does not improve security
unless users are also denied shell access, as they can always install
their own forwarders.''

ok djm@@, ok and a mild frown markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.82 2008/02/13 22:38:17 djm Exp $ */
d38 1
d127 1
@


1.82
log
@rekey arc4random and OpenSSL RNG in postauth child
closefrom fds > 2 before shell/command execution
ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.81 2008/02/08 23:24:08 djm Exp $ */
d104 1
@


1.81
log
@add sshd_config ChrootDirectory option to chroot(2) users to a directory and
tweak internal sftp server to work with it (no special files in chroot
required). ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.80 2007/02/19 10:45:58 dtucker Exp $ */
d38 3
@


1.80
log
@Teach Match how handle config directives that are used before authentication.
This allows configurations such as permitting password authentication from
the local net only while requiring pubkey from offsite.  ok djm@@, man page
bits ok jmc@@
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.79 2006/08/14 12:40:25 dtucker Exp $ */
d142 2
@


1.79
log
@Add ability to match groups to Match keyword in sshd_config.  Feedback djm@@,
stevesk@@, ok stevesk@@.
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.78 2006/08/03 03:34:42 deraadt Exp $ */
d153 1
a153 1
void	 copy_set_server_options(ServerOptions *, ServerOptions *);
@


1.78
log
@almost entirely get rid of the culture of ".h files that include .h files"
ok djm, sort of ok stevesk
makes the pain stop in one easy step
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.77 2006/07/21 12:43:36 dtucker Exp $ */
d28 1
@


1.77
log
@Make PermitOpen take a list of permitted ports and act more like most other
keywords (ie the first match is the effective setting).  This also makes it
easier to override a previously set PermitOpen.  ok djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.76 2006/07/19 13:07:10 dtucker Exp $ */
a17 2

#include "buffer.h"
@


1.76
log
@Add ForceCommand keyword to sshd_config, equivalent to the "command="
key option, man page entry and example in sshd_config.  Feedback & ok djm@@,
man page corrections & ok jmc@@
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.75 2006/07/12 11:34:58 dtucker Exp $ */
d141 2
@


1.75
log
@Add support for conditional directives to sshd_config via a "Match" keyword,
which works similarly to the "Host" directive in ssh_config.

Lines after a Match line override the default set in the main section
if the condition on the Match line is true, eg

AllowTcpForwarding yes
Match User anoncvs
        AllowTcpForwarding no

will allow port forwarding by all users except "anoncvs".

Currently only a very small subset of directives are supported.

ok djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.74 2006/07/06 10:47:05 djm Exp $ */
d137 2
@


1.74
log
@support arguments to Subsystem commands; ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.73 2006/03/25 22:22:43 djm Exp $ */
d143 2
a144 1
int	 process_server_config_line(ServerOptions *, char *, const char *, int);
d146 5
a150 1
void	 parse_server_config(ServerOptions *, const char *, Buffer *);
@


1.73
log
@standardise spacing in $OpenBSD$ tags; requested by deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.72 2005/12/06 22:38:27 reyk Exp $ */
d114 1
@


1.72
log
@Add support for tun(4) forwarding over OpenSSH, based on an idea and
initial channel code bits by markus@@. This is a simple and easy way to
use OpenSSH for ad hoc virtual private network connections, e.g.
administrative tunnels or secure wireless access. It's based on a new
ssh channel and works similar to the existing TCP forwarding support,
except that it depends on the tun(4) network interface on both ends of
the connection for layer 2 or layer 3 tunneling. This diff also adds
support for LocalCommand in the ssh(1) client.

ok djm@@, markus@@, jmc@@ (manpages), tested and discussed with others
@
text
@d1 1
a1 1
/*	$OpenBSD: servconf.h,v 1.71 2004/12/23 23:11:00 djm Exp $	*/
@


1.72.2.1
log
@upgrade to OpenSSH 4.4
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.79 2006/08/14 12:40:25 dtucker Exp $ */
d19 2
a29 1
#define MAX_MATCH_GROUPS	256	/* Max # of groups for Match. */
a113 1
	char   *subsystem_args[MAX_SUBSYSTEMS];
a136 2
	char   *adm_forced_command;

a137 2

	int	num_permitted_opens;
d142 1
a142 2
int	 process_server_config_line(ServerOptions *, char *, const char *, int,
	     int *, const char *, const char *, const char *);
d144 1
a144 5
void	 parse_server_config(ServerOptions *, const char *, Buffer *,
	     const char *, const char *, const char *);
void	 parse_server_match_config(ServerOptions *, const char *, const char *,
	     const char *);
void	 copy_set_server_options(ServerOptions *, ServerOptions *);
@


1.71
log
@bz #898: support AddressFamily in sshd_config. from peak@@argo.troja.mff.cuni.cz
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: servconf.h,v 1.70 2004/06/24 19:30:54 djm Exp $	*/
d136 2
@


1.71.4.1
log
@upgrade to OpenSSH 4.3
@
text
@d1 1
a1 1
/*	$OpenBSD: servconf.h,v 1.72 2005/12/06 22:38:27 reyk Exp $	*/
a135 2

	int	permit_tun;
@


1.71.4.2
log
@upgrade to OpenSSH 4.4
@
text
@d1 1
a1 1
/* $OpenBSD: servconf.h,v 1.79 2006/08/14 12:40:25 dtucker Exp $ */
d19 2
a29 1
#define MAX_MATCH_GROUPS	256	/* Max # of groups for Match. */
a113 1
	char   *subsystem_args[MAX_SUBSYSTEMS];
a136 2
	char   *adm_forced_command;

a137 2

	int	num_permitted_opens;
d142 1
a142 2
int	 process_server_config_line(ServerOptions *, char *, const char *, int,
	     int *, const char *, const char *, const char *);
d144 1
a144 5
void	 parse_server_config(ServerOptions *, const char *, Buffer *,
	     const char *, const char *, const char *);
void	 parse_server_match_config(ServerOptions *, const char *, const char *,
	     const char *);
void	 copy_set_server_options(ServerOptions *, ServerOptions *);
@


1.71.2.1
log
@upgrade to OpenSSH 4.3
@
text
@d1 1
a1 1
/*	$OpenBSD: servconf.h,v 1.72 2005/12/06 22:38:27 reyk Exp $	*/
a135 2

	int	permit_tun;
@


1.70
log
@re-exec sshd on accept(); initial work, final debugging and ok markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: servconf.h,v 1.69 2004/05/23 23:59:53 dtucker Exp $	*/
d46 1
@


1.70.2.1
log
@upgrade to OpenSSH 4.0
@
text
@d1 1
a1 1
/*	$OpenBSD: servconf.h,v 1.71 2004/12/23 23:11:00 djm Exp $	*/
a45 1
	int     address_family;		/* Address family used by the server. */
@


1.69
log
@Add MaxAuthTries sshd config option; ok markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: servconf.h,v 1.68 2004/04/27 09:46:37 djm Exp $	*/
d19 2
a137 1
void	 read_server_config(ServerOptions *, const char *);
d140 2
a141 1

@


1.68
log
@bz #815: implement ability to pass specified environment variables from the
client to the server; ok markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: servconf.h,v 1.67 2003/12/23 16:12:10 jakob Exp $	*/
d36 1
d118 1
@


1.67
log
@implement KerberosGetAFSToken server option. ok markus@@, beck@@
@
text
@d1 1
a1 1
/*	$OpenBSD: servconf.h,v 1.66 2003/12/09 21:53:37 markus Exp $	*/
d27 1
d110 3
@


1.67.2.1
log
@upgrade to OpenSSH 3.9
@
text
@d1 1
a1 1
/*	$OpenBSD: servconf.h,v 1.70 2004/06/24 19:30:54 djm Exp $	*/
a18 2
#include "buffer.h"

a26 1
#define MAX_ACCEPT_ENV		256	/* Max # of env vars. */
a34 1
#define DEFAULT_AUTH_FAIL_MAX	6	/* Default for MaxAuthTries */
a109 3
	u_int num_accept_env;
	char   *accept_env[MAX_ACCEPT_ENV];

a112 1
	int	max_authtries;
d130 1
d133 1
a133 2
void	 load_server_config(const char *, Buffer *);
void	 parse_server_config(ServerOptions *, const char *, Buffer *);
@


1.67.2.2
log
@upgrade to OpenSSH 4.0
@
text
@d1 1
a1 1
/*	$OpenBSD: servconf.h,v 1.71 2004/12/23 23:11:00 djm Exp $	*/
a45 1
	int     address_family;		/* Address family used by the server. */
@


1.66
log
@rename keepalive to tcpkeepalive; the old name causes too much
confusion; ok djm, dtucker; with help from jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: servconf.h,v 1.65 2003/09/01 18:15:50 markus Exp $	*/
d83 2
@


1.65
log
@remove unused kerberos code; ok henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: servconf.h,v 1.64 2003/08/22 10:56:09 markus Exp $	*/
d61 1
a61 1
	int     keepalives;	/* If true, set SO_KEEPALIVE. */
@


1.65.2.1
log
@upgrade to OpenSSH 3.8
@
text
@d1 1
a1 1
/*	$OpenBSD: servconf.h,v 1.67 2003/12/23 16:12:10 jakob Exp $	*/
d61 1
a61 1
	int     tcp_keep_alive;	/* If true, set SO_KEEPALIVE. */
a82 2
	int     kerberos_get_afs_token;		/* If true, try to get AFS token if
						 * authenticated with Kerberos. */
@


1.65.2.2
log
@upgrade to OpenSSH 3.9
@
text
@d1 1
a1 1
/*	$OpenBSD: servconf.h,v 1.70 2004/06/24 19:30:54 djm Exp $	*/
a18 2
#include "buffer.h"

a26 1
#define MAX_ACCEPT_ENV		256	/* Max # of env vars. */
a34 1
#define DEFAULT_AUTH_FAIL_MAX	6	/* Default for MaxAuthTries */
a109 3
	u_int num_accept_env;
	char   *accept_env[MAX_ACCEPT_ENV];

a112 1
	int	max_authtries;
d130 1
d133 1
a133 2
void	 load_server_config(const char *, Buffer *);
void	 parse_server_config(ServerOptions *, const char *, Buffer *);
@


1.64
log
@support GSS API user authentication; patches from Simon Wilkinson,
stripped down and tested by Jakob and myself.
@
text
@d1 1
a1 1
/*	$OpenBSD: servconf.h,v 1.63 2003/08/13 08:46:30 markus Exp $	*/
a82 2
	int     kerberos_tgt_passing;	/* If true, permit Kerberos TGT
					 * passing. */
@


1.63
log
@remove RhostsAuthentication; suggested by djm@@ before; ok djm@@, deraadt@@,
fgsch@@, miod@@, henning@@, jakob@@ and others
@
text
@d1 1
a1 1
/*	$OpenBSD: servconf.h,v 1.62 2003/07/22 13:35:22 markus Exp $	*/
d85 2
@


1.62
log
@remove (already disabled) KRB4/AFS support, re-enable -k in ssh(1);
test+ok henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: servconf.h,v 1.61 2003/06/02 09:17:34 markus Exp $	*/
a67 2
	int     rhosts_authentication;	/* If true, permit rhosts
					 * authentication. */
@


1.61
log
@deprecate VerifyReverseMapping since it's dangerous if combined
with IP based access control as noted by Mike Harding; replace with
a UseDNS option, UseDNS is on by default and includes the
VerifyReverseMapping check; with itojun@@, provos@@, jakob@@ and deraadt@@
ok deraadt@@, djm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: servconf.h,v 1.60 2003/05/15 01:48:10 jakob Exp $	*/
a86 1
	int     afs_token_passing;	/* If true, permit AFS token passing. */
@


1.60
log
@always parse kerberos options. ok djm@@ markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: servconf.h,v 1.59 2002/07/30 17:03:55 markus Exp $	*/
d115 1
a115 1
	int	verify_reverse_mapping;	/* cross-check ip and dns */
@


1.59
log
@add PermitUserEnvironment (off by default!); from dot@@dotat.at; ok provos, deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: servconf.h,v 1.58 2002/06/20 23:05:55 markus Exp $	*/
a75 1
#if defined(KRB4) || defined(KRB5)
a84 2
#endif
#if defined(AFS) || defined(KRB5)
a86 2
#endif
#ifdef AFS
a87 1
#endif
@


1.59.2.1
log
@upgrade to OpenSSH 3.7
@
text
@d1 1
a1 1
/*	$OpenBSD: servconf.h,v 1.65 2003/09/01 18:15:50 markus Exp $	*/
d68 2
d76 1
d86 8
a93 2
	int     gss_authentication;	/* If true, permit GSSAPI authentication */
	int     gss_cleanup_creds;	/* If true, destroy cred cache on logout */
d121 1
a121 1
	int	use_dns;
@


1.59.4.1
log
@upgrade to OpenSSH 3.7
@
text
@d1 1
a1 1
/*	$OpenBSD: servconf.h,v 1.65 2003/09/01 18:15:50 markus Exp $	*/
d68 2
d76 1
d86 8
a93 2
	int     gss_authentication;	/* If true, permit GSSAPI authentication */
	int     gss_cleanup_creds;	/* If true, destroy cred cache on logout */
d121 1
a121 1
	int	use_dns;
@


1.59.4.2
log
@upgrade to OpenSSH 3.8upgrade to OpenSSH 3.8upgrade to OpenSSH 3.8
@
text
@d1 1
a1 1
/*	$OpenBSD: servconf.h,v 1.67 2003/12/23 16:12:10 jakob Exp $	*/
d61 1
a61 1
	int     tcp_keep_alive;	/* If true, set SO_KEEPALIVE. */
a82 2
	int     kerberos_get_afs_token;		/* If true, try to get AFS token if
						 * authenticated with Kerberos. */
@


1.58
log
@allow Compression=yes/no in sshd_config
@
text
@d1 1
a1 1
/*	$OpenBSD: servconf.h,v 1.57 2002/03/20 19:12:25 stevesk Exp $	*/
d100 1
@


1.57
log
@for unprivileged user, group do:
pw=getpwnam(SSH_PRIVSEP_USER); do_setusercontext(pw).  ok provos@@
@
text
@d1 1
a1 1
/*	$OpenBSD: servconf.h,v 1.56 2002/03/19 03:03:43 stevesk Exp $	*/
d101 1
@


1.57.2.1
log
@Pull in OpenSSH-3.4
@
text
@d1 1
a1 1
/*	$OpenBSD: servconf.h,v 1.58 2002/06/20 23:05:55 markus Exp $	*/
a100 1
	int     compression;	/* If true, compression is allowed */
@


1.57.2.2
log
@Update to OpenSSH 3.5
@
text
@d1 1
a1 1
/*	$OpenBSD: servconf.h,v 1.59 2002/07/30 17:03:55 markus Exp $	*/
a99 1
	int     permit_user_env;	/* If true, read ~/.ssh/environment */
@


1.56
log
@_PATH_PRIVSEP_CHROOT_DIR; ok provos@@
@
text
@d1 1
a1 1
/*	$OpenBSD: servconf.h,v 1.55 2002/03/18 17:50:31 provos Exp $	*/
a131 3

	int	unprivileged_user;	/* User unprivileged child uses */
	int	unprivileged_group;	/* Group unprivileged child uses */
@


1.55
log
@integrate privilege separated openssh; its turned off by default for now.
work done by me and markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: servconf.h,v 1.54 2002/03/04 17:27:39 stevesk Exp $	*/
a134 1
	char   *unprivileged_dir;	/* Chroot dir for unprivileged user */
@


1.54
log
@$OpenBSD$ and RCSID() cleanup: don't use RCSID() in .h files; add
missing RCSID() to .c files and remove dup /*$OpenBSD$*/ from .c
files.  ok markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: servconf.h,v 1.53 2002/01/29 14:32:03 markus Exp $	*/
d133 3
@


1.53
log
@s/ReverseMappingCheck/VerifyReverseMapping/ and avoid confusion; ok stevesk@@
@
text
@d1 2
a14 2

/* RCSID("$OpenBSD: servconf.h,v 1.52 2002/01/27 14:57:46 stevesk Exp $"); */
@


1.52
log
@add X11UseLocalhost; ok markus@@
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: servconf.h,v 1.51 2001/12/19 07:18:56 deraadt Exp $"); */
d119 1
a119 1
	int	reverse_mapping_check;	/* cross-check ip and dns */
@


1.51
log
@basic KNF done while i was looking for something else
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: servconf.h,v 1.50 2001/12/06 13:30:05 markus Exp $"); */
d58 1
@


1.50
log
@add -o to sshd, too. ok deraadt@@
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: servconf.h,v 1.49 2001/08/17 18:59:47 stevesk Exp $"); */
d120 2
a121 2
					 * poke the client this often to 
					 * see if it's still there 
d126 1
a126 1
					 * disconnect the session 
@


1.49
log
@typo in comment
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: servconf.h,v 1.48 2001/08/16 19:18:34 jakob Exp $"); */
d137 2
@


1.49.2.1
log
@Update to OpenSSH-3.1 on 3.0-stable branch
@
text
@a0 2
/*	$OpenBSD: servconf.h,v 1.54 2002/03/04 17:27:39 stevesk Exp $	*/

d14 2
a57 1
	int     x11_use_localhost;	/* If true, use localhost for fake X11 server. */
d118 1
a118 1
	int	verify_reverse_mapping;	/* cross-check ip and dns */
d120 2
a121 2
					 * poke the client this often to
					 * see if it's still there
d126 1
a126 1
					 * disconnect the session
a136 2
int	 process_server_config_line(ServerOptions *, char *, const char *, int);

@


1.49.2.2
log
@Update OpenSSH to version 3.2.2.
@
text
@d1 1
a1 1
/*	$OpenBSD: servconf.h,v 1.57 2002/03/20 19:12:25 stevesk Exp $	*/
d132 1
@


1.49.2.3
log
@Update OpenSSH to version 3.3 (with local changes, configuration files still
living in /etc and privsep user being nobody).
@
text
@d1 1
a1 1
/*	$OpenBSD: servconf.h,v 1.49.2.2 2002/05/17 00:03:24 miod Exp $	*/
a100 1
	int     compression;	/* If true, compression is allowed */
@


1.49.2.4
log
@Update to OpenSSH 3.5
@
text
@d1 1
a1 1
/*	$OpenBSD: servconf.h,v 1.59 2002/07/30 17:03:55 markus Exp $	*/
a99 1
	int     permit_user_env;	/* If true, read ~/.ssh/environment */
@


1.48
log
@deprecate CheckMail. ok markus@@
----------------------------------------------------------------------
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: servconf.h,v 1.47 2001/06/26 17:27:24 markus Exp $"); */
d124 3
a126 3
					 *If the client is unresponsive
					 * for this many intervals, above
					 * diconnect the session 
@


1.47
log
@remove comments from .h, since they are cut&paste from the .c files
and out of sync
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: servconf.h,v 1.46 2001/06/26 16:15:24 dugsong Exp $"); */
a54 1
	int     check_mail;	/* If true, check for new mail. */
@


1.46
log
@Kerberos v5 support for SSH1, mostly from Assar Westerlund <assar@@freebsd.org> and Bjorn Gronvall <bg@@sics.se>. markus@@ ok
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: servconf.h,v 1.45 2001/06/26 06:33:00 itojun Exp $"); */
a133 11
/*
 * Initializes the server options to special values that indicate that they
 * have not yet been set.
 */
void    initialize_server_options(ServerOptions *);

/*
 * Reads the server configuration file.  This only sets the values for those
 * options that have the special value indicating they have not been set.
 */
void    read_server_config(ServerOptions *, const char *);
d135 3
a137 2
/* Sets values for those values that have not yet been set. */
void    fill_default_server_options(ServerOptions *);
@


1.45
log
@prototype pedant.  not very creative...
- () -> (void)
- no variable names
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: servconf.h,v 1.44 2001/06/23 02:34:31 markus Exp $"); */
d76 1
a76 1
#ifdef KRB4
d87 4
a91 2
	int     kerberos_tgt_passing;	/* If true, permit Kerberos tgt
					 * passing. */
@


1.44
log
@get rid of known_hosts2, use it for hostkey lookup, but do not modify.
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: servconf.h,v 1.43 2001/05/20 17:20:35 markus Exp $"); */
d136 1
a136 1
void    initialize_server_options(ServerOptions * options);
d142 1
a142 1
void    read_server_config(ServerOptions * options, const char *filename);
d145 1
a145 1
void    fill_default_server_options(ServerOptions * options);
@


1.43
log
@configurable authorized_keys{,2} location; originally from peter@@; ok djm@@
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: servconf.h,v 1.42 2001/05/18 14:13:29 markus Exp $"); */
d128 2
a129 2
	char   *authorized_keys_file;	/* File containing public RSA keys */
	char   *authorized_keys_file2;	/* File containing public SSH2 keys */
@


1.42
log
@improved kbd-interactive support. work by per@@appgate.com and me
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: servconf.h,v 1.41 2001/04/13 22:46:53 beck Exp $"); */
d127 3
@


1.41
log
@Add options ClientAliveInterval and ClientAliveCountMax to sshd.
This gives the ability to do a "keepalive" via the encrypted channel
which can't be spoofed (unlike TCP keepalives). Useful for when you want
to use ssh connections to authenticate people for something, and know
relatively quickly when they are no longer authenticated. Disabled
by default (of course). ok markus@@
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: servconf.h,v 1.40 2001/04/12 19:15:25 markus Exp $"); */
d95 1
a95 1
	int     challenge_reponse_authentication;
@


1.41.2.1
log
@Pull in OpenSSH-2.9.9
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: servconf.h,v 1.49 2001/08/17 18:59:47 stevesk Exp $"); */
d55 1
d76 1
a76 1
#if defined(KRB4) || defined(KRB5)
d87 2
a88 2
#if defined(AFS) || defined(KRB5)
	int     kerberos_tgt_passing;	/* If true, permit Kerberos TGT
a89 2
#endif
#ifdef AFS
d95 1
a95 1
	int     challenge_response_authentication;
d123 3
a125 3
					 * If the client is unresponsive
					 * for this many intervals above,
					 * disconnect the session 
a127 3
	char   *authorized_keys_file;	/* File containing public keys */
	char   *authorized_keys_file2;

d129 11
d141 2
a142 3
void	 initialize_server_options(ServerOptions *);
void	 read_server_config(ServerOptions *, const char *);
void	 fill_default_server_options(ServerOptions *);
@


1.41.2.2
log
@Merge OpenSSH 3.1, keeping /etc as configuration files directory.
(i.e. OpenSSH 3.1 + openbsd29_3.1.patch)
@
text
@a0 2
/*	$OpenBSD: servconf.h,v 1.54 2002/03/04 17:27:39 stevesk Exp $	*/

d14 2
a57 1
	int     x11_use_localhost;	/* If true, use localhost for fake X11 server. */
d118 1
a118 1
	int	verify_reverse_mapping;	/* cross-check ip and dns */
d120 2
a121 2
					 * poke the client this often to
					 * see if it's still there
d126 1
a126 1
					 * disconnect the session
a136 2
int	 process_server_config_line(ServerOptions *, char *, const char *, int);

@


1.41.2.3
log
@Upgrade to OpenSSH 3.2.3.

Except for improbable compilation error fixes, this should be the last
commit made to the 2.9-STABLE branche. Have fun upgrading.
@
text
@d1 1
a1 1
/*	$OpenBSD: servconf.h,v 1.57 2002/03/20 19:12:25 stevesk Exp $	*/
d132 1
@


1.40
log
@implement HostbasedAuthentication (= RhostRSAAuthentication for ssh v2)
similar to RhostRSAAuthentication unless you enable (the experimental)
HostbasedUsesNameFromPacketOnly option.  please test. :)
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: servconf.h,v 1.39 2001/03/25 13:16:10 stevesk Exp $"); */
d118 9
@


1.39
log
@PrintLastLog option; from chip@@valinux.com with some minor
changes by me.  ok markus@@
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: servconf.h,v 1.38 2001/02/12 16:16:23 markus Exp $"); */
d72 2
@


1.38
log
@PermitRootLogin={yes,without-password,forced-commands-only,no}
(before this change, root could login even if PermitRootLogin==no)
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: servconf.h,v 1.37 2001/02/11 12:59:25 markus Exp $"); */
d54 1
@


1.37
log
@1) clean up the MAC support for SSH-2
2) allow you to specify the MAC with 'ssh -m'
3) or the 'MACs' keyword in ssh(d)_config
4) add hmac-{md5,sha1}-96
	ok stevesk@@, provos@@
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: servconf.h,v 1.36 2001/02/03 10:08:37 markus Exp $"); */
d28 8
d49 1
a49 1
	int     permit_root_login;	/* If true, permit root login. */
@


1.36
log
@make ReverseMappingCheck optional in sshd_config; ok djm@@,dugsong@@
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: servconf.h,v 1.35 2001/01/22 23:06:40 markus Exp $"); */
d53 3
a55 2
	char   *ciphers;	/* Ciphers in order of preference. */
	int	protocol;	/* Protocol in order of preference. */
@


1.35
log
@rename skey -> challenge response.
auto-enable kbd-interactive for ssh2 if challenge-reponse is enabled.
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: servconf.h,v 1.34 2001/01/19 12:45:27 markus Exp $"); */
d105 1
@


1.34
log
@only auth-chall.c needs #ifdef SKEY
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: servconf.h,v 1.33 2001/01/08 22:29:05 markus Exp $"); */
d83 1
a83 2
	int     skey_authentication;	/* If true, permit s/key
					 * authentication. */
@


1.33
log
@implement option 'Banner /etc/issue.net' for ssh2, move version to
2.3.1 (needed for bugcompat detection, 2.3.0 would fail if Banner
is enabled).
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: servconf.h,v 1.32 2000/12/19 23:17:58 markus Exp $"); */
a82 1
#ifdef SKEY
a84 1
#endif
@


1.32
log
@replace 'unsigned bla' with 'u_bla' everywhere. also, replace 'char unsigned'
with u_char.
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: servconf.h,v 1.31 2000/11/12 19:50:38 markus Exp $"); */
d107 1
@


1.31
log
@add support for RSA to SSH2.  please test.

there are now 3 types of keys: RSA1 is used by ssh-1 only,
RSA and DSA are used by SSH2.

you can use 'ssh-keygen -t rsa -f ssh2_rsa_file' to generate RSA
keys for SSH2 and use the RSA keys for hostkeys or for user keys.

SSH2 RSA or DSA keys are added to .ssh/authorised_keys2 as before.

IdentityFile2, HostDsaKey and DSAAuthentication are obsolete.
you can use multiple IdentityFile and HostKey for all types of keys.

the option DSAAuthentication is replaced by PubkeyAuthetication.
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: servconf.h,v 1.30 2000/10/14 12:12:09 markus Exp $"); */
d29 2
a30 2
	unsigned int num_ports;
	unsigned int ports_from_cmdline;
d91 1
a91 1
	unsigned int num_allow_users;
d93 1
a93 1
	unsigned int num_deny_users;
d95 1
a95 1
	unsigned int num_allow_groups;
d97 1
a97 1
	unsigned int num_deny_groups;
d100 1
a100 1
	unsigned int num_subsystems;
@


1.30
log
@AllowTcpForwarding; from naddy@@
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: servconf.h,v 1.29 2000/10/11 20:14:39 markus Exp $"); */
d26 1
d34 2
a35 2
	char   *host_key_file;	/* File containing host key. */
	char   *host_dsa_key_file;	/* File containing dsa host key. */
d63 1
a63 1
	int     dsa_authentication;	/* If true, permit DSA authentication. */
@


1.30.2.1
log
@Pull in OpenSSH 2.5.0
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: servconf.h,v 1.38 2001/02/12 16:16:23 markus Exp $"); */
a25 9
#define MAX_HOSTKEYS		256	/* Max # hostkeys. */

/* permit_root_login */
#define	PERMIT_NOT_SET		-1
#define	PERMIT_NO		0
#define	PERMIT_FORCED_ONLY	1
#define	PERMIT_NO_PASSWD	2
#define	PERMIT_YES		3

d28 2
a29 2
	u_int num_ports;
	u_int ports_from_cmdline;
d33 2
a34 2
	char   *host_key_files[MAX_HOSTKEYS];	/* Files containing host keys. */
	int     num_host_key_files;     /* Number of files for host keys. */
d40 1
a40 1
	int     permit_root_login;	/* PERMIT_*, see above */
d52 2
a53 3
	char   *ciphers;	/* Supported SSH2 ciphers. */
	char   *macs;		/* Supported SSH2 macs. */
	int	protocol;	/* Supported protocol versions. */
d62 1
a62 1
	int     pubkey_authentication;	/* If true, permit ssh2 pubkey authentication. */
d82 4
a85 1
	int     challenge_reponse_authentication;
d90 1
a90 1
	u_int num_allow_users;
d92 1
a92 1
	u_int num_deny_users;
d94 1
a94 1
	u_int num_allow_groups;
d96 1
a96 1
	u_int num_deny_groups;
d99 1
a99 1
	u_int num_subsystems;
a105 2
	char   *banner;			/* SSH-2 banner message */
	int	reverse_mapping_check;	/* cross-check ip and dns */
@


1.30.2.2
log
@Pull in OpenSSH-2.5.1
@
text
@@


1.30.2.3
log
@Pull in OpenSSH-2.5.2 for 2.8 branch.
@
text
@@


1.30.2.4
log
@Pull in OpenSSH-2.9 to 2.8 branch.
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: servconf.h,v 1.41 2001/04/13 22:46:53 beck Exp $"); */
a53 1
	int	print_lastlog;	/* If true, print lastlog */
a70 2
	int     hostbased_authentication;	/* If true, permit ssh2 hostbased auth */
	int     hostbased_uses_name_from_packet_only; /* experimental */
a114 9
	int	client_alive_interval;	/*
					 * poke the client this often to 
					 * see if it's still there 
					 */
	int	client_alive_count_max;	/*
					 *If the client is unresponsive
					 * for this many intervals, above
					 * diconnect the session 
					 */
@


1.30.2.5
log
@Pull in OpenSSH 2.9.9 to the 2.8 branch.
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: servconf.h,v 1.49 2001/08/17 18:59:47 stevesk Exp $"); */
d55 1
d76 1
a76 1
#if defined(KRB4) || defined(KRB5)
d87 2
a88 2
#if defined(AFS) || defined(KRB5)
	int     kerberos_tgt_passing;	/* If true, permit Kerberos TGT
a89 2
#endif
#ifdef AFS
d95 1
a95 1
	int     challenge_response_authentication;
d123 3
a125 3
					 * If the client is unresponsive
					 * for this many intervals above,
					 * disconnect the session 
a127 3
	char   *authorized_keys_file;	/* File containing public keys */
	char   *authorized_keys_file2;

d129 11
d141 2
a142 3
void	 initialize_server_options(ServerOptions *);
void	 read_server_config(ServerOptions *, const char *);
void	 fill_default_server_options(ServerOptions *);
@


1.30.2.6
log
@Merge OpenSSH 3.1.
@
text
@a0 2
/*	$OpenBSD: servconf.h,v 1.54 2002/03/04 17:27:39 stevesk Exp $	*/

d14 2
a57 1
	int     x11_use_localhost;	/* If true, use localhost for fake X11 server. */
d118 1
a118 1
	int	verify_reverse_mapping;	/* cross-check ip and dns */
d120 2
a121 2
					 * poke the client this often to
					 * see if it's still there
d126 1
a126 1
					 * disconnect the session
a136 2
int	 process_server_config_line(ServerOptions *, char *, const char *, int);

@


1.29
log
@add support for s/key (kbd-interactive) to ssh2, based on work by mkiernan@@avantgo.com and me
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: servconf.h,v 1.28 2000/09/07 20:27:53 deraadt Exp $"); */
d89 1
@


1.28
log
@cleanup copyright notices on all files.  I have attempted to be accurate with
the details.  everything is now under Tatu's licence (which I copied from his
readme), and/or the core-sdi bsd-ish thing for deattack, or various openbsd
developers under a 2-term bsd licence.  We're not changing any rules, just
being accurate.
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: servconf.h,v 1.27 2000/07/22 09:14:36 markus Exp $"); */
d81 1
@


1.27
log
@random early drop; ok theo, niels
@
text
@a1 3
 *
 * servconf.h
 *
a2 1
 *
a4 3
 *
 * Created: Mon Aug 21 15:35:03 1995 ylo
 *
d7 5
d14 1
a14 1
/* RCSID("$OpenBSD: servconf.h,v 1.26 2000/06/26 21:59:18 markus Exp $"); */
@


1.26
log
@MaxStartups: limit number of unauthenticated connections, work by theo and me
@
text
@d16 1
a16 1
/* RCSID("$OpenBSD: servconf.h,v 1.25 2000/06/20 01:39:44 markus Exp $"); */
d103 2
@


1.25
log
@OpenBSD tag
@
text
@d16 1
a16 1
/* RCSID("$OpenBSD: servconf.h,v 1.24 2000/06/17 22:52:33 jakob Exp $"); */
d102 3
@


1.24
log
@add support for ssh v2 subsystems. ok markus@@.
@
text
@d16 1
a16 1
/* RCSID("$Id: servconf.h,v 1.23 2000/05/31 06:36:40 markus Exp $"); */
@


1.23
log
@xauth_location support; pr 1234
@
text
@d16 1
a16 1
/* RCSID("$Id: servconf.h,v 1.22 2000/05/06 17:45:37 markus Exp $"); */
d27 1
d98 4
@


1.22
log
@add DSAAuthetication option to ssh/sshd, document SSH2 in sshd.8
@
text
@d16 1
a16 1
/* RCSID("$Id: servconf.h,v 1.21 2000/05/03 18:03:07 markus Exp $"); */
d50 1
@


1.22.2.1
log
@lovin' CVS... update patch branch to OpenSSH-2.1.1
@
text
@d16 1
a16 1
/* RCSID("$Id: servconf.h,v 1.23 2000/05/31 06:36:40 markus Exp $"); */
a49 1
	char   *xauth_location;	/* Location of xauth program */
@


1.22.2.2
log
@Pull in the rest of openssh-2.2.0 to 2.7 branch (luvin' cvs...)
@
text
@d16 1
a16 1
/* RCSID("$OpenBSD: servconf.h,v 1.27 2000/07/22 09:14:36 markus Exp $"); */
a26 1
#define MAX_SUBSYSTEMS		256	/* Max # subsystems. */
a96 9

	unsigned int num_subsystems;
	char   *subsystem_name[MAX_SUBSYSTEMS];
	char   *subsystem_command[MAX_SUBSYSTEMS];

	int	max_startups_begin;
	int	max_startups_rate;
	int	max_startups;

@


1.22.2.3
log
@openssh-2.3.0 (again) for 2.7 branch
@
text
@d2 3
d6 1
d9 3
a13 5
 * As far as I am concerned, the code I have written for this software
 * can be used freely for any purpose.  Any derived versions of this
 * software must be clearly marked as such, and if the derived work is
 * incompatible with the protocol description in the RFC file, it must be
 * called by a name other than "ssh" or "Secure Shell".
d16 1
a16 1
/* RCSID("$OpenBSD: servconf.h,v 1.30 2000/10/14 12:12:09 markus Exp $"); */
a82 1
	int     kbd_interactive_authentication;	/* If true, permit */
a89 1
	int	allow_tcp_forwarding;
@


1.22.2.4
log
@OpenSSH-2.5.1 for 2.7 patch branch
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: servconf.h,v 1.38 2001/02/12 16:16:23 markus Exp $"); */
a25 9
#define MAX_HOSTKEYS		256	/* Max # hostkeys. */

/* permit_root_login */
#define	PERMIT_NOT_SET		-1
#define	PERMIT_NO		0
#define	PERMIT_FORCED_ONLY	1
#define	PERMIT_NO_PASSWD	2
#define	PERMIT_YES		3

d28 2
a29 2
	u_int num_ports;
	u_int ports_from_cmdline;
d33 2
a34 2
	char   *host_key_files[MAX_HOSTKEYS];	/* Files containing host keys. */
	int     num_host_key_files;     /* Number of files for host keys. */
d40 1
a40 1
	int     permit_root_login;	/* PERMIT_*, see above */
d52 2
a53 3
	char   *ciphers;	/* Supported SSH2 ciphers. */
	char   *macs;		/* Supported SSH2 macs. */
	int	protocol;	/* Supported protocol versions. */
d62 1
a62 1
	int     pubkey_authentication;	/* If true, permit ssh2 pubkey authentication. */
d82 4
a85 1
	int     challenge_reponse_authentication;
d90 1
a90 1
	u_int num_allow_users;
d92 1
a92 1
	u_int num_deny_users;
d94 1
a94 1
	u_int num_allow_groups;
d96 1
a96 1
	u_int num_deny_groups;
d99 1
a99 1
	u_int num_subsystems;
a105 2
	char   *banner;			/* SSH-2 banner message */
	int	reverse_mapping_check;	/* cross-check ip and dns */
@


1.22.2.5
log
@Pull in OpenSSH-2.5.2 for 2.7 branch.
@
text
@@


1.21
log
@GatewayPorts for sshd, ok deraadt@@
@
text
@d16 1
a16 1
/* RCSID("$Id: servconf.h,v 1.20 2000/05/03 10:21:48 markus Exp $"); */
d62 1
@


1.20
log
@s/DsaKey/HostDSAKey/, document option
@
text
@d16 1
a16 1
/* RCSID("$Id: servconf.h,v 1.19 2000/05/01 18:50:59 markus Exp $"); */
d54 1
@


1.19
log
@PidFile, pr 1210
@
text
@d16 1
a16 1
/* RCSID("$Id: servconf.h,v 1.18 2000/04/14 10:30:33 markus Exp $"); */
d35 1
a35 1
	char   *dsa_key_file;	/* File containing dsa host key. */
@


1.18
log
@whitespace cleanup
@
text
@d16 1
a16 1
/* RCSID("$Id: servconf.h,v 1.17 2000/04/12 07:45:44 markus Exp $"); */
d36 1
@


1.17
log
@add Cipher and Protocol options to ssh/sshd, e.g.:
ssh -o 'Protocol 1,2' if you prefer proto 1, ssh -o 'Ciphers arcfour,3des-cbc'
@
text
@d2 1
a2 1
 * 
d4 1
a4 1
 * 
d6 1
a6 1
 * 
d9 1
a9 1
 * 
d11 1
a11 1
 * 
d13 1
a13 1
 * 
d16 1
a16 1
/* RCSID("$Id: servconf.h,v 1.16 2000/04/06 08:55:22 markus Exp $"); */
@


1.16
log
@ssh2 server side, see README.openssh2; enable with 'sshd -2'
@
text
@d16 1
a16 1
/* RCSID("$Id: servconf.h,v 1.15 2000/01/04 00:08:00 markus Exp $"); */
d51 2
@


1.15
log
@ipv6 support: mostly gethostbyname->getaddrinfo/getnameinfo, new features:
sshd allows multiple ListenAddress and Port options.  note that libwrap is
not IPv6-ready. (based on patches from <kick@@kyoto.wide.ad.jp> and
fujiwara@@rcac.tdi.co.jp)
@
text
@d16 1
a16 1
/* RCSID("$Id: servconf.h,v 1.14 1999/11/24 19:53:51 markus Exp $"); */
d35 1
@


1.14
log
@KNF, final part 3
@
text
@d16 1
a16 1
/* RCSID("$Id: servconf.h,v 1.13 1999/11/24 00:26:03 deraadt Exp $"); */
d21 2
d29 5
a33 3
	int     port;		/* Port number to listen on. */
	struct in_addr listen_addr;	/* Address on which the server
					 * listens. */
@


1.13
log
@much more KNF
@
text
@d16 1
a16 1
/* RCSID("$Id: servconf.h,v 1.12 1999/11/11 22:58:38 markus Exp $"); */
d87 4
a90 2
/* Initializes the server options to special values that indicate that they
   have not yet been set. */
d93 4
a96 2
/* Reads the server configuration file.  This only sets the values for those
   options that have the special value indicating they have not been set. */
@


1.12
log
@IgnoreUserKnownHosts(default=no), used for RhostRSAAuth, ok deraadt,millert
@
text
@d2 13
d16 1
a16 14
servconf.h

Author: Tatu Ylonen <ylo@@cs.hut.fi>

Copyright (c) 1995 Tatu Ylonen <ylo@@cs.hut.fi>, Espoo, Finland
                   All rights reserved

Created: Mon Aug 21 15:35:03 1995 ylo

Definitions for server configuration data and for the functions reading it.

*/

/* RCSID("$Id: servconf.h,v 1.11 1999/11/10 23:36:44 markus Exp $"); */
d21 32
a52 27
#define MAX_ALLOW_USERS		256 /* Max # users on allow list. */
#define MAX_DENY_USERS		256 /* Max # users on deny list. */
#define MAX_ALLOW_GROUPS	256 /* Max # groups on allow list. */
#define MAX_DENY_GROUPS		256 /* Max # groups on deny list. */

typedef struct
{
  int port;			/* Port number to listen on. */
  struct in_addr listen_addr;	/* Address on which the server listens. */
  char *host_key_file;		/* File containing host key. */
  int server_key_bits;		/* Size of the server key. */
  int login_grace_time;		/* Disconnect if no auth in this time (sec). */
  int key_regeneration_time;	/* Server key lifetime (seconds). */
  int permit_root_login;	/* If true, permit root login. */
  int ignore_rhosts;		/* Ignore .rhosts and .shosts. */
  int ignore_user_known_hosts;	/* Ignore ~/.ssh/known_hosts for RhostsRsaAuth */
  int print_motd;		/* If true, print /etc/motd. */
  int check_mail;               /* If true, check for new mail. */
  int x11_forwarding;		/* If true, permit inet (spoofing) X11 fwd. */
  int x11_display_offset;	/* What DISPLAY number to start searching at */
  int strict_modes;		/* If true, require string home dir modes. */
  int keepalives;		/* If true, set SO_KEEPALIVE. */
  SyslogFacility log_facility;	/* Facility for system logging. */
  LogLevel log_level;		/* Level for system logging. */
  int rhosts_authentication;	/* If true, permit rhosts authentication. */
  int rhosts_rsa_authentication;/* If true, permit rhosts RSA authentication.*/
  int rsa_authentication;	/* If true, permit RSA authentication. */
d54 9
a62 5
  int kerberos_authentication;	/* If true, permit Kerberos authentication. */
  int kerberos_or_local_passwd;	/* If true, permit kerberos and any other
				   password authentication mechanism, such
				   as SecurID or /etc/passwd */
  int kerberos_ticket_cleanup;	/* If true, destroy ticket file on logout. */
d65 3
a67 2
  int kerberos_tgt_passing;	/* If true, permit Kerberos tgt passing. */
  int afs_token_passing;	/* If true, permit AFS token passing. */
d69 2
a70 1
  int password_authentication;  /* If true, permit password authentication. */
d72 2
a73 1
  int skey_authentication;      /* If true, permit s/key authentication. */
d75 12
a86 12
  int permit_empty_passwd;      /* If false, do not permit empty passwords. */
  int use_login;                /* If true, login(1) is used */
  unsigned int num_allow_users;
  char *allow_users[MAX_ALLOW_USERS];
  unsigned int num_deny_users;
  char *deny_users[MAX_DENY_USERS];
  unsigned int num_allow_groups;
  char *allow_groups[MAX_ALLOW_GROUPS];
  unsigned int num_deny_groups;
  char *deny_groups[MAX_DENY_GROUPS];
} ServerOptions;

d89 1
a89 1
void initialize_server_options(ServerOptions *options);
d93 1
a93 1
void read_server_config(ServerOptions *options, const char *filename);
d96 1
a96 1
void fill_default_server_options(ServerOptions *options);
d98 1
a98 1
#endif /* SERVCONF_H */
@


1.11
log
@add LogLevel {QUIET, FATAL, ERROR, INFO, CHAT, DEBUG} to ssh/sshd,
obsoletes QuietMode and FascistLogging in sshd.
@
text
@d16 1
a16 1
/* RCSID("$Id: servconf.h,v 1.10 1999/10/17 20:48:07 dugsong Exp $"); */
d36 1
@


1.10
log
@remove AllowHosts, DenyHosts, SilentDeny server access control cruft - replace with LIBWRAP moved to child. ok markus@@ deraat@@
@
text
@d16 1
a16 1
/* RCSID("$Id: servconf.h,v 1.9 1999/10/12 18:11:54 markus Exp $"); */
a35 2
  int quiet_mode;		/* If true, don't log anything but fatals. */
  int fascist_logging;		/* Perform very verbose logging. */
d43 1
@


1.9
log
@SilentDeny, don't log/answer refused connections, deraadt@@
@
text
@d16 1
a16 1
/* RCSID("$Id: servconf.h,v 1.8 1999/10/11 21:48:29 markus Exp $"); */
a20 2
#define MAX_ALLOW_HOSTS		256 /* Max # hosts on allow list. */
#define MAX_DENY_HOSTS		256 /* Max # hosts on deny list. */
a64 5
  int silent_deny;              /* If true, do not complain to denied hosts */
  unsigned int num_allow_hosts;
  char *allow_hosts[MAX_ALLOW_HOSTS];
  unsigned int num_deny_hosts;
  char *deny_hosts[MAX_DENY_HOSTS];
@


1.8
log
@Allow/Deny Users/Groups, from zzlevo@@dd.chalmers.se, ok deraadt@@
@
text
@d16 1
a16 1
/* RCSID("$Id: servconf.h,v 1.7 1999/10/11 21:07:37 markus Exp $"); */
d67 1
@


1.7
log
@UseLogin, default=no, from kpa@@gmx.net, ok deraadt@@
@
text
@d16 1
a16 1
/* RCSID("$Id: servconf.h,v 1.6 1999/10/07 22:46:32 markus Exp $"); */
d23 4
d71 8
@


1.6
log
@You have Mail. Email fuer Dich. Karsten Patzwaldt <kpa@@gmx.net> default=no
@
text
@d16 1
a16 1
/* RCSID("$Id: servconf.h,v 1.5 1999/10/07 21:45:02 markus Exp $"); */
d62 1
@


1.5
log
@add skey to sshd:

1) pass *pw to auth_password() not user_name, do_authentication already
   keeps private copy of struct passwd for current user.
2) limit authentication attemps to 5, otherwise
        ssh -o 'NumberOfPasswordPrompts 100000' host
   lets you enter 100000 passwds
3) make s/key a run-time option in /etc/sshd_config
4) generate fake skeys,
   for s/key for nonexisting users, too
   limit auth-tries for nonexisting users, too.
Note that
% ssh -l nonexisting-user -o 'NumberOfPasswordPrompts 100000' host
has NO limits in ssh-1.2.27
@
text
@d16 1
a16 1
/* RCSID("$Id: servconf.h,v 1.4 1999/10/01 02:38:09 provos Exp $"); */
d37 1
@


1.4
log
@get rid of references to randomseedfile we dont need it.  for sshd
just spit out a warning that the configuration option is obsolete.
@
text
@d16 1
a16 1
/* RCSID("$Id: servconf.h,v 1.3 1999/09/29 18:16:20 dugsong Exp $"); */
d57 3
@


1.3
log
@update krb4/AFS support to ssh-1.2.27-afs-kerberos-pl1 level, clean up unused variables, update manpages
@
text
@d16 1
a16 1
/* RCSID("$Id: servconf.h,v 1.2 1999/09/28 07:56:47 deraadt Exp $"); */
a28 1
  char *random_seed_file;	/* File containing random seed. */
@


1.2
log
@X11DisplayOffset; aaron
@
text
@d16 1
a16 1
/* RCSID("$Id: servconf.h,v 1.1 1999/09/26 20:53:37 deraadt Exp $"); */
d48 3
a50 3
  int kerberos_or_local_passwd;
#endif
#if defined(KRB4) || defined(AFS)
d53 1
a53 1
#ifdef KERBEROS_TGT_PASSING
a54 2
#endif
#ifdef AFS
@


1.1
log
@i bet a lot of people didn't know what ssh 1.2.16 had a nice license.
well, except for the patent issues.  someone in sweden (forget their
name at the moment) cleaned out most of the patented code, and now
this code removes rsa code.  when this is done, it will link against
libssl, but the work isn't completely done yet.  then we need to bring
this up to modern days, featurewise.
@
text
@d16 1
a16 1
/* RCSID("$Id: servconf.h,v 1.6 1999/05/04 11:59:10 bg Exp $"); */
d39 1
@

