head	1.21;
access;
symbols
	OPENBSD_6_2:1.21.0.2
	OPENBSD_6_2_BASE:1.21
	OPENBSD_6_1:1.15.0.4
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.13.0.4
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.9.0.2
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.1.0.4
	OPENBSD_5_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.21
date	2017.07.01.13.50.45;	author djm;	state Exp;
branches;
next	1.20;
commitid	jGKycoTTk52hb7Q7;

1.20
date	2017.06.28.01.09.22;	author djm;	state Exp;
branches;
next	1.19;
commitid	WWTXo6fdZaQafCwj;

1.19
date	2017.06.13.11.22.15;	author djm;	state Exp;
branches;
next	1.18;
commitid	mlj7SpIknVZeIWPD;

1.18
date	2017.05.07.23.15.59;	author djm;	state Exp;
branches;
next	1.17;
commitid	uIPOxK9LAWTB4bJn;

1.17
date	2017.05.03.21.08.09;	author naddy;	state Exp;
branches;
next	1.16;
commitid	wlKSvaBqtNpb5VOS;

1.16
date	2017.04.30.23.18.44;	author djm;	state Exp;
branches;
next	1.15;
commitid	NPnVhZTcf5ddO7Ys;

1.15
date	2017.03.10.04.07.20;	author djm;	state Exp;
branches;
next	1.14;
commitid	jIzoiBuLJ7h3Ymf6;

1.14
date	2016.09.12.23.31.27;	author djm;	state Exp;
branches;
next	1.13;
commitid	LKO6f6n1OiczQZjL;

1.13
date	2016.05.02.09.36.42;	author djm;	state Exp;
branches;
next	1.12;
commitid	g1pzvVA0Azqu3umf;

1.12
date	2015.12.04.16.41.28;	author markus;	state Exp;
branches;
next	1.11;
commitid	K3glY441IowbrjDE;

1.11
date	2015.11.19.01.08.55;	author djm;	state Exp;
branches;
next	1.10;
commitid	HrzGeuKItIoUaPu0;

1.10
date	2015.09.13.14.39.16;	author tim;	state Exp;
branches;
next	1.9;
commitid	o7lHtj0fKIytZvfO;

1.9
date	2015.08.04.05.23.06;	author djm;	state Exp;
branches;
next	1.8;
commitid	J7ksbUfI55hZsQJA;

1.8
date	2015.07.03.04.05.54;	author djm;	state Exp;
branches;
next	1.7;
commitid	SfSLUUFiV6CBl5tD;

1.7
date	2015.07.03.03.43.18;	author djm;	state Exp;
branches;
next	1.6;
commitid	cnvu1kGgoFFYv6D3;

1.6
date	2015.05.21.04.55.51;	author djm;	state Exp;
branches;
next	1.5;
commitid	nG9alHg6vyBAJq6L;

1.5
date	2015.01.26.02.59.11;	author djm;	state Exp;
branches;
next	1.4;
commitid	IWERLH63u2Z5LhgY;

1.4
date	2015.01.13.07.39.19;	author djm;	state Exp;
branches;
next	1.3;
commitid	oriBpre3xTnTQZ4b;

1.3
date	2015.01.08.10.14.08;	author djm;	state Exp;
branches;
next	1.2;
commitid	397Wklb10N5bP6VW;

1.2
date	2014.12.21.22.27.55;	author djm;	state Exp;
branches;
next	1.1;
commitid	EbtriidyZdsmXksl;

1.1
date	2014.06.24.01.16.58;	author djm;	state Exp;
branches;
next	;
commitid	s0kDXoL9MZ0tUFYL;


desc
@@


1.21
log
@remove post-SSHv1 removal dead code from rsa.c and merge the
remaining bit that it still used into ssh-rsa.c; ok markus
@
text
@/* $OpenBSD: sshkey.h,v 1.20 2017/06/28 01:09:22 djm Exp $ */

/*
 * Copyright (c) 2000, 2001 Markus Friedl.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef SSHKEY_H
#define SSHKEY_H

#include <sys/types.h>

#ifdef WITH_OPENSSL
#include <openssl/rsa.h>
#include <openssl/dsa.h>
#include <openssl/ec.h>
#else /* OPENSSL */
#define RSA		void
#define DSA		void
#define EC_KEY		void
#define EC_GROUP	void
#define EC_POINT	void
#endif /* WITH_OPENSSL */

#define SSH_RSA_MINIMUM_MODULUS_SIZE	1024
#define SSH_KEY_MAX_SIGN_DATA_SIZE	(1 << 20)

struct sshbuf;

/* Key types */
enum sshkey_types {
	KEY_RSA,
	KEY_DSA,
	KEY_ECDSA,
	KEY_ED25519,
	KEY_RSA_CERT,
	KEY_DSA_CERT,
	KEY_ECDSA_CERT,
	KEY_ED25519_CERT,
	KEY_UNSPEC
};

/* Default fingerprint hash */
#define SSH_FP_HASH_DEFAULT	SSH_DIGEST_SHA256

/* Fingerprint representation formats */
enum sshkey_fp_rep {
	SSH_FP_DEFAULT = 0,
	SSH_FP_HEX,
	SSH_FP_BASE64,
	SSH_FP_BUBBLEBABBLE,
	SSH_FP_RANDOMART
};

/* key is stored in external hardware */
#define SSHKEY_FLAG_EXT		0x0001

#define SSHKEY_CERT_MAX_PRINCIPALS	256
/* XXX opaquify? */
struct sshkey_cert {
	struct sshbuf	*certblob; /* Kept around for use on wire */
	u_int		 type; /* SSH2_CERT_TYPE_USER or SSH2_CERT_TYPE_HOST */
	u_int64_t	 serial;
	char		*key_id;
	u_int		 nprincipals;
	char		**principals;
	u_int64_t	 valid_after, valid_before;
	struct sshbuf	*critical;
	struct sshbuf	*extensions;
	struct sshkey	*signature_key;
};

/* XXX opaquify? */
struct sshkey {
	int	 type;
	int	 flags;
	RSA	*rsa;
	DSA	*dsa;
	int	 ecdsa_nid;	/* NID of curve */
	EC_KEY	*ecdsa;
	u_char	*ed25519_sk;
	u_char	*ed25519_pk;
	struct sshkey_cert *cert;
};

#define	ED25519_SK_SZ	crypto_sign_ed25519_SECRETKEYBYTES
#define	ED25519_PK_SZ	crypto_sign_ed25519_PUBLICKEYBYTES

struct sshkey	*sshkey_new(int);
int		 sshkey_add_private(struct sshkey *);
struct sshkey	*sshkey_new_private(int);
void		 sshkey_free(struct sshkey *);
int		 sshkey_demote(const struct sshkey *, struct sshkey **);
int		 sshkey_equal_public(const struct sshkey *,
    const struct sshkey *);
int		 sshkey_equal(const struct sshkey *, const struct sshkey *);
char		*sshkey_fingerprint(const struct sshkey *,
    int, enum sshkey_fp_rep);
int		 sshkey_fingerprint_raw(const struct sshkey *k,
    int, u_char **retp, size_t *lenp);
const char	*sshkey_type(const struct sshkey *);
const char	*sshkey_cert_type(const struct sshkey *);
int		 sshkey_format_text(const struct sshkey *, struct sshbuf *);
int		 sshkey_write(const struct sshkey *, FILE *);
int		 sshkey_read(struct sshkey *, char **);
u_int		 sshkey_size(const struct sshkey *);

int		 sshkey_generate(int type, u_int bits, struct sshkey **keyp);
int		 sshkey_from_private(const struct sshkey *, struct sshkey **);
int	 sshkey_type_from_name(const char *);
int	 sshkey_is_cert(const struct sshkey *);
int	 sshkey_type_is_cert(int);
int	 sshkey_type_plain(int);
int	 sshkey_to_certified(struct sshkey *);
int	 sshkey_drop_cert(struct sshkey *);
int	 sshkey_cert_copy(const struct sshkey *, struct sshkey *);
int	 sshkey_cert_check_authority(const struct sshkey *, int, int,
    const char *, const char **);
size_t	 sshkey_format_cert_validity(const struct sshkey_cert *,
    char *, size_t) __attribute__((__bounded__(__string__, 2, 3)));

int	 sshkey_certify(struct sshkey *, struct sshkey *, const char *);
/* Variant allowing use of a custom signature function (e.g. for ssh-agent) */
typedef int sshkey_certify_signer(const struct sshkey *, u_char **, size_t *,
    const u_char *, size_t, const char *, u_int, void *);
int	 sshkey_certify_custom(struct sshkey *, struct sshkey *, const char *,
    sshkey_certify_signer *, void *);

int		 sshkey_ecdsa_nid_from_name(const char *);
int		 sshkey_curve_name_to_nid(const char *);
const char *	 sshkey_curve_nid_to_name(int);
u_int		 sshkey_curve_nid_to_bits(int);
int		 sshkey_ecdsa_bits_to_nid(int);
int		 sshkey_ecdsa_key_to_nid(EC_KEY *);
int		 sshkey_ec_nid_to_hash_alg(int nid);
int		 sshkey_ec_validate_public(const EC_GROUP *, const EC_POINT *);
int		 sshkey_ec_validate_private(const EC_KEY *);
const char	*sshkey_ssh_name(const struct sshkey *);
const char	*sshkey_ssh_name_plain(const struct sshkey *);
int		 sshkey_names_valid2(const char *, int);
char		*sshkey_alg_list(int, int, int, char);

int	 sshkey_from_blob(const u_char *, size_t, struct sshkey **);
int	 sshkey_fromb(struct sshbuf *, struct sshkey **);
int	 sshkey_froms(struct sshbuf *, struct sshkey **);
int	 sshkey_to_blob(const struct sshkey *, u_char **, size_t *);
int	 sshkey_to_base64(const struct sshkey *, char **);
int	 sshkey_putb(const struct sshkey *, struct sshbuf *);
int	 sshkey_puts(const struct sshkey *, struct sshbuf *);
int	 sshkey_plain_to_blob(const struct sshkey *, u_char **, size_t *);
int	 sshkey_putb_plain(const struct sshkey *, struct sshbuf *);

int	 sshkey_sign(const struct sshkey *, u_char **, size_t *,
    const u_char *, size_t, const char *, u_int);
int	 sshkey_verify(const struct sshkey *, const u_char *, size_t,
    const u_char *, size_t, u_int);

/* for debug */
void	sshkey_dump_ec_point(const EC_GROUP *, const EC_POINT *);
void	sshkey_dump_ec_key(const EC_KEY *);

/* private key parsing and serialisation */
int	sshkey_private_serialize(const struct sshkey *key, struct sshbuf *buf);
int	sshkey_private_deserialize(struct sshbuf *buf,  struct sshkey **keyp);

/* private key file format parsing and serialisation */
int	sshkey_private_to_fileblob(struct sshkey *key, struct sshbuf *blob,
    const char *passphrase, const char *comment,
    int force_new_format, const char *new_format_cipher, int new_format_rounds);
int	sshkey_parse_private_fileblob(struct sshbuf *buffer,
    const char *passphrase, struct sshkey **keyp, char **commentp);
int	sshkey_parse_private_fileblob_type(struct sshbuf *blob, int type,
    const char *passphrase, struct sshkey **keyp, char **commentp);

/* XXX should be internal, but used by ssh-keygen */
int ssh_rsa_generate_additional_parameters(struct sshkey *);

#ifdef SSHKEY_INTERNAL
int ssh_rsa_sign(const struct sshkey *key,
    u_char **sigp, size_t *lenp, const u_char *data, size_t datalen,
    const char *ident);
int ssh_rsa_verify(const struct sshkey *key,
    const u_char *sig, size_t siglen, const u_char *data, size_t datalen);
int ssh_dss_sign(const struct sshkey *key, u_char **sigp, size_t *lenp,
    const u_char *data, size_t datalen, u_int compat);
int ssh_dss_verify(const struct sshkey *key,
    const u_char *signature, size_t signaturelen,
    const u_char *data, size_t datalen, u_int compat);
int ssh_ecdsa_sign(const struct sshkey *key, u_char **sigp, size_t *lenp,
    const u_char *data, size_t datalen, u_int compat);
int ssh_ecdsa_verify(const struct sshkey *key,
    const u_char *signature, size_t signaturelen,
    const u_char *data, size_t datalen, u_int compat);
int ssh_ed25519_sign(const struct sshkey *key, u_char **sigp, size_t *lenp,
    const u_char *data, size_t datalen, u_int compat);
int ssh_ed25519_verify(const struct sshkey *key,
    const u_char *signature, size_t signaturelen,
    const u_char *data, size_t datalen, u_int compat);
#endif

#ifndef WITH_OPENSSL
#undef RSA
#undef DSA
#undef EC_KEY
#undef EC_GROUP
#undef EC_POINT
#endif /* WITH_OPENSSL */

#endif /* SSHKEY_H */
@


1.20
log
@Allow ssh-keygen to use a key held in ssh-agent as a CA when signing
certificates. bz#2377 ok markus
@
text
@d1 1
a1 1
/* $OpenBSD: sshkey.h,v 1.19 2017/06/13 11:22:15 djm Exp $ */
d192 3
@


1.19
log
@missing prototype.
@
text
@d1 1
a1 1
/* $OpenBSD: sshkey.h,v 1.18 2017/05/07 23:15:59 djm Exp $ */
a133 1
int	 sshkey_certify(struct sshkey *, struct sshkey *, const char *);
d139 7
@


1.18
log
@Refuse RSA keys <1024 bits in length. Improve reporting for keys that
do not meet this requirement. ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: sshkey.h,v 1.17 2017/05/03 21:08:09 naddy Exp $ */
d121 1
@


1.17
log
@remove miscellaneous SSH1 leftovers; ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: sshkey.h,v 1.16 2017/04/30 23:18:44 djm Exp $ */
d43 1
a43 1
#define SSH_RSA_MINIMUM_MODULUS_SIZE	768
@


1.16
log
@remove KEY_RSA1

ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: sshkey.h,v 1.15 2017/03/10 04:07:20 djm Exp $ */
a180 2
int	sshkey_parse_public_rsa1_fileblob(struct sshbuf *blob,
    struct sshkey **keyp, char **commentp);
@


1.15
log
@fix regression in 7.4 server-sig-algs, where we were accidentally
excluding SHA2 RSA signature methods. bz#2680, patch from Nuno
Goncalves; ok dtucker@@
@
text
@d1 1
a1 1
/* $OpenBSD: sshkey.h,v 1.14 2016/09/12 23:31:27 djm Exp $ */
a49 1
	KEY_RSA1,
@


1.14
log
@list all supported signature algorithms in the server-sig-algs
Reported by mb AT smartftp.com in bz#2547 and (independantly)
Ron Frederick; ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: sshkey.h,v 1.13 2016/05/02 09:36:42 djm Exp $ */
d153 1
a153 1
char		*sshkey_alg_list(int, int, char);
@


1.13
log
@support SHA256 and SHA512 RSA signatures in certificates;
ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: sshkey.h,v 1.12 2015/12/04 16:41:28 markus Exp $ */
d153 1
a153 1
char		*key_alg_list(int, int);
@


1.12
log
@implement SHA2-{256,512} for RSASSA-PKCS1-v1_5 signatures (user and host auth)
based on draft-rsa-dsa-sha2-256-03.txt and draft-ssh-ext-info-04.txt;
with & ok djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: sshkey.h,v 1.11 2015/11/19 01:08:55 djm Exp $ */
d134 1
a134 1
int	 sshkey_certify(struct sshkey *, struct sshkey *);
@


1.11
log
@move the certificate validity formatting code to sshkey.[ch]
@
text
@d1 1
a1 1
/* $OpenBSD: sshkey.h,v 1.10 2015/09/13 14:39:16 tim Exp $ */
d166 1
a166 1
    const u_char *, size_t, u_int);
d190 3
a192 2
int ssh_rsa_sign(const struct sshkey *key, u_char **sigp, size_t *lenp,
    const u_char *data, size_t datalen, u_int compat);
d194 1
a194 2
    const u_char *signature, size_t signaturelen,
    const u_char *data, size_t datalen, u_int compat);
@


1.10
log
@- Fix error message: passphrase needs to be at least 5 characters, not 4.
- Remove unused function argument.
- Remove two unnecessary variables.

OK djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: sshkey.h,v 1.9 2015/08/04 05:23:06 djm Exp $ */
d138 2
@


1.9
log
@backout SSH_RSA_MINIMUM_MODULUS_SIZE increase for this release;
problems spotted by sthen@@ ok deraadt@@ markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: sshkey.h,v 1.8 2015/07/03 04:05:54 djm Exp $ */
d183 1
a183 2
    const char *passphrase, const char *filename, struct sshkey **keyp,
    char **commentp);
@


1.8
log
@another SSH_RSA_MINIMUM_MODULUS_SIZE that needed cranking
@
text
@d1 1
a1 1
/* $OpenBSD: sshkey.h,v 1.7 2015/07/03 03:43:18 djm Exp $ */
d43 1
a43 1
#define SSH_RSA_MINIMUM_MODULUS_SIZE	1024
@


1.7
log
@delete support for legacy v00 certificates; "sure" markus@@ dtucker@@
@
text
@d1 1
a1 1
/* $OpenBSD: sshkey.h,v 1.6 2015/05/21 04:55:51 djm Exp $ */
d43 1
a43 1
#define SSH_RSA_MINIMUM_MODULUS_SIZE	768
@


1.6
log
@refactor: split base64 encoding of pubkey into its own
sshkey_to_base64() function and out of sshkey_write();
ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: sshkey.h,v 1.5 2015/01/26 02:59:11 djm Exp $ */
a58 2
	KEY_RSA_CERT_V00,
	KEY_DSA_CERT_V00,
d132 1
a132 1
int	 sshkey_to_certified(struct sshkey *, int);
a137 1
int	 sshkey_cert_is_legacy(const struct sshkey *);
@


1.5
log
@small refactor and add some convenience functions;
ok markus
@
text
@d1 1
a1 1
/* $OpenBSD: sshkey.h,v 1.4 2015/01/13 07:39:19 djm Exp $ */
d160 1
@


1.4
log
@add sshd_config HostbasedAcceptedKeyTypes and PubkeyAcceptedKeyTypes
options to allow sshd to control what public key types will be
accepted. Currently defaults to all. Feedback & ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: sshkey.h,v 1.3 2015/01/08 10:14:08 djm Exp $ */
d157 2
a158 1
int	 sshkey_to_blob_buf(const struct sshkey *, struct sshbuf *);
d160 2
a161 1
int	 sshkey_plain_to_blob_buf(const struct sshkey *, struct sshbuf *);
d163 1
@


1.3
log
@deprecate key_load_private_pem() and sshkey_load_private_pem()
interfaces. Refactor the generic key loading API to not require
pathnames to be specified (they weren't really used).

Fixes a few other things en passant:

Makes ed25519 keys work for hostbased authentication (ssh-keysign
previously used the PEM-only routines).

Fixes key comment regression bz#2306: key pathnames were being lost as
comment fields.

ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: sshkey.h,v 1.2 2014/12/21 22:27:55 djm Exp $ */
d153 1
a153 1
int		 sshkey_names_valid2(const char *);
@


1.2
log
@Add FingerprintHash option to control algorithm used for key
fingerprints. Default changes from MD5 to SHA256 and format
from hex to base64.

Feedback and ok naddy@@ markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: sshkey.h,v 1.1 2014/06/24 01:16:58 djm Exp $ */
a180 2
int	sshkey_parse_private_pem_fileblob(struct sshbuf *blob, int type,
    const char *passphrase, struct sshkey **keyp, char **commentp);
@


1.1
log
@New key API: refactor key-related functions to be more library-like,
existing API is offered as a set of wrappers.

with and ok markus@@

Thanks also to Ben Hawkes, David Tomaschik, Ivan Fratric, Matthew
Dempsky and Ron Bowes for a detailed review a few months ago.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d64 2
a65 6
/* Fingerprint hash algorithms */
enum sshkey_fp_type {
	SSH_FP_SHA1,
	SSH_FP_MD5,
	SSH_FP_SHA256
};
d69 1
d71 1
d119 1
a119 1
    enum sshkey_fp_type, enum sshkey_fp_rep);
d121 1
a121 1
    enum sshkey_fp_type dgst_type, u_char **retp, size_t *lenp);
@

