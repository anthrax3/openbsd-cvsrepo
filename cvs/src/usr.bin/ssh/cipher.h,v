head	1.52;
access;
symbols
	OPENBSD_6_2_BASE:1.52
	OPENBSD_6_1:1.49.0.4
	OPENBSD_6_1_BASE:1.49
	OPENBSD_6_0:1.48.0.8
	OPENBSD_6_0_BASE:1.48
	OPENBSD_5_9:1.48.0.4
	OPENBSD_5_9_BASE:1.48
	OPENBSD_5_8:1.48.0.2
	OPENBSD_5_8_BASE:1.48
	OPENBSD_5_7:1.47.0.2
	OPENBSD_5_7_BASE:1.47
	OPENBSD_5_6:1.46.0.4
	OPENBSD_5_6_BASE:1.46
	OPENBSD_5_5:1.44.0.4
	OPENBSD_5_5_BASE:1.44
	OPENBSD_5_4:1.40.0.2
	OPENBSD_5_4_BASE:1.40
	OPENBSD_5_3:1.39.0.2
	OPENBSD_5_3_BASE:1.39
	OPENBSD_5_2:1.37.0.16
	OPENBSD_5_2_BASE:1.37
	OPENBSD_5_1_BASE:1.37
	OPENBSD_5_1:1.37.0.14
	OPENBSD_5_0:1.37.0.12
	OPENBSD_5_0_BASE:1.37
	OPENBSD_4_9:1.37.0.10
	OPENBSD_4_9_BASE:1.37
	OPENBSD_4_8:1.37.0.8
	OPENBSD_4_8_BASE:1.37
	OPENBSD_4_7:1.37.0.4
	OPENBSD_4_7_BASE:1.37
	OPENBSD_4_6:1.37.0.6
	OPENBSD_4_6_BASE:1.37
	OPENBSD_4_5:1.37.0.2
	OPENBSD_4_5_BASE:1.37
	OPENBSD_4_4:1.36.0.10
	OPENBSD_4_4_BASE:1.36
	OPENBSD_4_3:1.36.0.8
	OPENBSD_4_3_BASE:1.36
	OPENBSD_4_2:1.36.0.6
	OPENBSD_4_2_BASE:1.36
	OPENBSD_4_1:1.36.0.2
	OPENBSD_4_1_BASE:1.36
	OPENBSD_4_0:1.36.0.4
	OPENBSD_4_0_BASE:1.36
	OPENBSD_3_9:1.35.0.8
	OPENBSD_3_9_BASE:1.35
	OPENBSD_3_8:1.35.0.6
	OPENBSD_3_8_BASE:1.35
	OPENBSD_3_7:1.35.0.4
	OPENBSD_3_7_BASE:1.35
	OPENBSD_3_6:1.35.0.2
	OPENBSD_3_6_BASE:1.35
	OPENBSD_3_5:1.34.0.2
	OPENBSD_3_5_BASE:1.34
	OPENBSD_3_4:1.33.0.8
	OPENBSD_3_4_BASE:1.33
	OPENBSD_3_3:1.33.0.6
	OPENBSD_3_3_BASE:1.33
	OPENBSD_3_2:1.33.0.4
	OPENBSD_3_2_BASE:1.33
	OPENBSD_3_1:1.33.0.2
	OPENBSD_3_1_BASE:1.33
	OPENBSD_3_0:1.29.0.2
	OPENBSD_3_0_BASE:1.29
	OPENBSD_2_9_BASE:1.25
	OPENBSD_2_9:1.25.0.2
	OPENBSD_2_8:1.22.0.2
	OPENBSD_2_8_BASE:1.22
	OPENBSD_2_7:1.17.0.2
	OPENBSD_2_7_BASE:1.17
	OPENBSD_2_6:1.7.0.2
	OPENBSD_2_6_BASE:1.7;
locks; strict;
comment	@ * @;


1.52
date	2017.05.07.23.12.57;	author djm;	state Exp;
branches;
next	1.51;
commitid	rjagy2MdppXCAqQE;

1.51
date	2017.05.04.01.33.21;	author djm;	state Exp;
branches;
next	1.50;
commitid	51JKwr3UQ1nwwCXG;

1.50
date	2017.04.30.23.15.04;	author djm;	state Exp;
branches;
next	1.49;
commitid	xiQciajHVystMZXG;

1.49
date	2016.08.03.05.41.57;	author djm;	state Exp;
branches;
next	1.48;
commitid	otf59Ccl8VGeZugs;

1.48
date	2015.07.08.19.09.25;	author markus;	state Exp;
branches;
next	1.47;
commitid	o0u3zNlGo1qpFgiz;

1.47
date	2015.01.14.10.24.42;	author markus;	state Exp;
branches;
next	1.46;
commitid	ppGlctmNxl1em1em;

1.46
date	2014.06.24.01.13.21;	author djm;	state Exp;
branches;
next	1.45;
commitid	1h9UxAQmwdaqUzyX;

1.45
date	2014.04.29.18.01.49;	author markus;	state Exp;
branches;
next	1.44;

1.44
date	2014.01.25.10.12.50;	author dtucker;	state Exp;
branches;
next	1.43;

1.43
date	2013.12.06.13.34.54;	author markus;	state Exp;
branches;
next	1.42;

1.42
date	2013.11.21.00.45.44;	author djm;	state Exp;
branches;
next	1.41;

1.41
date	2013.11.07.11.58.27;	author dtucker;	state Exp;
branches;
next	1.40;

1.40
date	2013.04.19.01.06.50;	author djm;	state Exp;
branches;
next	1.39;

1.39
date	2013.01.08.18.49.04;	author markus;	state Exp;
branches;
next	1.38;

1.38
date	2012.12.11.22.31.18;	author markus;	state Exp;
branches;
next	1.37;

1.37
date	2009.01.26.09.58.15;	author markus;	state Exp;
branches;
next	1.36;

1.36
date	2006.03.25.22.22.42;	author djm;	state Exp;
branches;
next	1.35;

1.35
date	2004.07.28.09.40.29;	author markus;	state Exp;
branches
	1.35.6.1
	1.35.8.1;
next	1.34;

1.34
date	2003.11.10.16.23.41;	author jakob;	state Exp;
branches
	1.34.2.1;
next	1.33;

1.33
date	2002.03.18.17.13.15;	author markus;	state Exp;
branches
	1.33.6.1
	1.33.8.1;
next	1.32;

1.32
date	2002.03.04.17.27.39;	author stevesk;	state Exp;
branches;
next	1.31;

1.31
date	2002.02.18.13.05.32;	author markus;	state Exp;
branches;
next	1.30;

1.30
date	2002.02.14.23.41.01;	author markus;	state Exp;
branches;
next	1.29;

1.29
date	2001.08.23.11.31.59;	author markus;	state Exp;
branches
	1.29.2.1;
next	1.28;

1.28
date	2001.06.26.17.27.23;	author markus;	state Exp;
branches;
next	1.27;

1.27
date	2001.06.26.06.32.49;	author itojun;	state Exp;
branches;
next	1.26;

1.26
date	2001.05.28.22.51.11;	author markus;	state Exp;
branches;
next	1.25;

1.25
date	2000.12.19.23.17.56;	author markus;	state Exp;
branches
	1.25.2.1;
next	1.24;

1.24
date	2000.12.09.13.41.52;	author markus;	state Exp;
branches;
next	1.23;

1.23
date	2000.12.06.23.05.42;	author markus;	state Exp;
branches;
next	1.22;

1.22
date	2000.10.13.18.59.14;	author markus;	state Exp;
branches
	1.22.2.1;
next	1.21;

1.21
date	2000.10.12.09.59.18;	author markus;	state Exp;
branches;
next	1.20;

1.20
date	2000.10.11.20.27.23;	author markus;	state Exp;
branches;
next	1.19;

1.19
date	2000.09.07.20.27.50;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2000.06.20.01.39.40;	author markus;	state Exp;
branches;
next	1.17;

1.17
date	2000.05.08.17.12.15;	author markus;	state Exp;
branches
	1.17.2.1;
next	1.16;

1.16
date	2000.04.14.10.30.30;	author markus;	state Exp;
branches;
next	1.15;

1.15
date	2000.04.12.09.39.10;	author markus;	state Exp;
branches;
next	1.14;

1.14
date	2000.04.12.07.45.43;	author markus;	state Exp;
branches;
next	1.13;

1.13
date	2000.04.04.21.37.27;	author markus;	state Exp;
branches;
next	1.12;

1.12
date	2000.03.28.20.24.50;	author markus;	state Exp;
branches;
next	1.11;

1.11
date	2000.03.22.09.55.10;	author markus;	state Exp;
branches;
next	1.10;

1.10
date	99.11.24.19.53.46;	author markus;	state Exp;
branches;
next	1.9;

1.9
date	99.11.24.00.26.01;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	99.11.15.21.38.54;	author markus;	state Exp;
branches;
next	1.7;

1.7
date	99.10.02.19.14.54;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	99.09.30.19.22.58;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	99.09.30.08.34.24;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	99.09.28.04.45.36;	author provos;	state Exp;
branches;
next	1.3;

1.3
date	99.09.26.22.53.25;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	99.09.26.21.02.15;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	99.09.26.20.53.34;	author deraadt;	state Exp;
branches;
next	;

1.17.2.1
date	2000.09.01.18.23.18;	author jason;	state Exp;
branches;
next	1.17.2.2;

1.17.2.2
date	2000.11.08.21.30.35;	author jason;	state Exp;
branches;
next	1.17.2.3;

1.17.2.3
date	2001.03.12.15.44.09;	author jason;	state Exp;
branches;
next	1.17.2.4;

1.17.2.4
date	2001.03.21.18.52.41;	author jason;	state Exp;
branches;
next	;

1.22.2.1
date	2001.02.16.20.12.58;	author jason;	state Exp;
branches;
next	1.22.2.2;

1.22.2.2
date	2001.02.19.17.18.47;	author jason;	state Exp;
branches;
next	1.22.2.3;

1.22.2.3
date	2001.03.21.19.46.24;	author jason;	state Exp;
branches;
next	1.22.2.4;

1.22.2.4
date	2001.05.07.21.09.28;	author jason;	state Exp;
branches;
next	1.22.2.5;

1.22.2.5
date	2001.09.27.00.15.41;	author miod;	state Exp;
branches;
next	1.22.2.6;

1.22.2.6
date	2002.03.08.17.04.42;	author brad;	state Exp;
branches;
next	;

1.25.2.1
date	2001.09.27.19.03.54;	author jason;	state Exp;
branches;
next	1.25.2.2;

1.25.2.2
date	2002.03.09.00.20.44;	author miod;	state Exp;
branches;
next	1.25.2.3;

1.25.2.3
date	2002.06.02.22.56.10;	author miod;	state Exp;
branches;
next	;

1.29.2.1
date	2002.03.07.17.37.46;	author jason;	state Exp;
branches;
next	1.29.2.2;

1.29.2.2
date	2002.05.17.00.03.23;	author miod;	state Exp;
branches;
next	;

1.33.6.1
date	2004.03.04.18.18.15;	author brad;	state Exp;
branches;
next	;

1.33.8.1
date	2004.02.28.03.51.33;	author brad;	state Exp;
branches;
next	1.33.8.2;

1.33.8.2
date	2004.08.19.22.37.31;	author brad;	state Exp;
branches;
next	;

1.34.2.1
date	2004.08.19.04.13.26;	author brad;	state Exp;
branches;
next	;

1.35.6.1
date	2006.10.06.03.19.32;	author brad;	state Exp;
branches;
next	;

1.35.8.1
date	2006.09.30.04.06.50;	author brad;	state Exp;
branches;
next	;


desc
@@


1.52
log
@As promised in last release announcement: remove support for
Blowfish, RC4 and CAST ciphers. ok markus@@ deraadt@@
@
text
@/* $OpenBSD: cipher.h,v 1.51 2017/05/04 01:33:21 djm Exp $ */

/*
 * Author: Tatu Ylonen <ylo@@cs.hut.fi>
 * Copyright (c) 1995 Tatu Ylonen <ylo@@cs.hut.fi>, Espoo, Finland
 *                    All rights reserved
 *
 * As far as I am concerned, the code I have written for this software
 * can be used freely for any purpose.  Any derived versions of this
 * software must be clearly marked as such, and if the derived work is
 * incompatible with the protocol description in the RFC file, it must be
 * called by a name other than "ssh" or "Secure Shell".
 *
 * Copyright (c) 2000 Markus Friedl.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef CIPHER_H
#define CIPHER_H

#include <sys/types.h>
#include <openssl/evp.h>
#include "cipher-chachapoly.h"
#include "cipher-aesctr.h"

#define CIPHER_ENCRYPT		1
#define CIPHER_DECRYPT		0

struct sshcipher;
struct sshcipher_ctx;

const struct sshcipher *cipher_by_name(const char *);
const char *cipher_warning_message(const struct sshcipher_ctx *);
int	 ciphers_valid(const char *);
char	*cipher_alg_list(char, int);
int	 cipher_init(struct sshcipher_ctx **, const struct sshcipher *,
    const u_char *, u_int, const u_char *, u_int, int);
int	 cipher_crypt(struct sshcipher_ctx *, u_int, u_char *, const u_char *,
    u_int, u_int, u_int);
int	 cipher_get_length(struct sshcipher_ctx *, u_int *, u_int,
    const u_char *, u_int);
void	 cipher_free(struct sshcipher_ctx *);
u_int	 cipher_blocksize(const struct sshcipher *);
u_int	 cipher_keylen(const struct sshcipher *);
u_int	 cipher_seclen(const struct sshcipher *);
u_int	 cipher_authlen(const struct sshcipher *);
u_int	 cipher_ivlen(const struct sshcipher *);
u_int	 cipher_is_cbc(const struct sshcipher *);

u_int	 cipher_ctx_is_plaintext(struct sshcipher_ctx *);

int	 cipher_get_keyiv(struct sshcipher_ctx *, u_char *, u_int);
int	 cipher_set_keyiv(struct sshcipher_ctx *, const u_char *);
int	 cipher_get_keyiv_len(const struct sshcipher_ctx *);

#endif				/* CIPHER_H */
@


1.51
log
@another tentacle: cipher_set_key_string() was only ever used for SSHv1
@
text
@d1 1
a1 1
/* $OpenBSD: cipher.h,v 1.50 2017/04/30 23:15:04 djm Exp $ */
a73 2
int	 cipher_get_keycontext(const struct sshcipher_ctx *, u_char *);
void	 cipher_set_keycontext(struct sshcipher_ctx *, const u_char *);
@


1.50
log
@remove SSHv1 ciphers; ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: cipher.h,v 1.49 2016/08/03 05:41:57 djm Exp $ */
a61 2
int	 cipher_set_key_string(struct sshcipher_ctx **,
    const struct sshcipher *, const char *, int);
@


1.49
log
@small refactor of cipher.c: make ciphercontext opaque to callers
feedback and ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: cipher.h,v 1.48 2015/07/08 19:09:25 markus Exp $ */
a44 17
/*
 * Cipher types for SSH-1.  New types can be added, but old types should not
 * be removed for compatibility.  The maximum allowed value is 31.
 */
#define SSH_CIPHER_SSH2		-3
#define SSH_CIPHER_INVALID	-2	/* No valid cipher selected. */
#define SSH_CIPHER_NOT_SET	-1	/* None selected (invalid number). */
#define SSH_CIPHER_NONE		0	/* no encryption */
#define SSH_CIPHER_IDEA		1	/* IDEA CFB */
#define SSH_CIPHER_DES		2	/* DES CBC */
#define SSH_CIPHER_3DES		3	/* 3DES CBC */
#define SSH_CIPHER_BROKEN_TSS	4	/* TRI's Simple Stream encryption CBC */
#define SSH_CIPHER_BROKEN_RC4	5	/* Alleged RC4 */
#define SSH_CIPHER_BLOWFISH	6
#define SSH_CIPHER_RESERVED	7
#define SSH_CIPHER_MAX		31

a50 1
u_int	 cipher_mask_ssh1(int);
a51 3
const struct sshcipher *cipher_by_number(int);
int	 cipher_number(const char *);
char	*cipher_name(int);
a71 1
u_int	 cipher_ctx_get_number(struct sshcipher_ctx *);
a72 1
u_int	 cipher_get_number(const struct sshcipher *);
@


1.48
log
@typedefs for Cipher&CipherContext are unused
@
text
@d1 1
a1 1
/* $OpenBSD: cipher.h,v 1.47 2015/01/14 10:24:42 markus Exp $ */
d66 1
a66 8
struct sshcipher_ctx {
	int	plaintext;
	int	encrypt;
	EVP_CIPHER_CTX evp;
	struct chachapoly_ctx cp_ctx; /* XXX union with evp? */
	struct aesctr_ctx ac_ctx; /* XXX union with evp? */
	const struct sshcipher *cipher;
};
d76 1
a76 1
int	 cipher_init(struct sshcipher_ctx *, const struct sshcipher *,
d82 3
a84 3
int	 cipher_cleanup(struct sshcipher_ctx *);
int	 cipher_set_key_string(struct sshcipher_ctx *, const struct sshcipher *,
    const char *, int);
d92 3
d101 1
@


1.47
log
@remove unneeded includes, sync my copyright across files & whitespace; ok djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: cipher.h,v 1.46 2014/06/24 01:13:21 djm Exp $ */
a73 3

typedef struct sshcipher Cipher;
typedef struct sshcipher_ctx CipherContext;
@


1.46
log
@New key API: refactor key-related functions to be more library-like,
existing API is offered as a set of wrappers.

with and ok markus@@

Thanks also to Ben Hawkes, David Tomaschik, Ivan Fratric, Matthew
Dempsky and Ron Bowes for a detailed review a few months ago.
@
text
@d1 1
a1 1
/* $OpenBSD: cipher.h,v 1.45 2014/04/29 18:01:49 markus Exp $ */
d75 2
a76 2
typedef struct sshcipher Cipher ;
typedef struct sshcipher_ctx CipherContext ;
d83 1
a87 1
const char* cipher_warning_message(const struct sshcipher_ctx *);
@


1.45
log
@make compiling against OpenSSL optional (make OPENSSL=no);
reduces algorithms to curve25519, aes-ctr, chacha, ed25519;
allows us to explore further options; with and ok djm
@
text
@d1 1
a1 1
/* $OpenBSD: cipher.h,v 1.44 2014/01/25 10:12:50 dtucker Exp $ */
d40 1
d65 2
a66 5
typedef struct Cipher Cipher;
typedef struct CipherContext CipherContext;

struct Cipher;
struct CipherContext {
d72 1
a72 1
	const Cipher *cipher;
d75 3
d79 2
a80 2
const Cipher	*cipher_by_name(const char *);
const Cipher	*cipher_by_number(int);
d85 4
a88 3
void	 cipher_init(CipherContext *, const Cipher *, const u_char *, u_int,
    const u_char *, u_int, int);
int	 cipher_crypt(CipherContext *, u_int, u_char *, const u_char *,
d90 1
a90 1
int	 cipher_get_length(CipherContext *, u_int *, u_int,
d92 16
a107 15
void	 cipher_cleanup(CipherContext *);
void	 cipher_set_key_string(CipherContext *, const Cipher *, const char *, int);
u_int	 cipher_blocksize(const Cipher *);
u_int	 cipher_keylen(const Cipher *);
u_int	 cipher_seclen(const Cipher *);
u_int	 cipher_authlen(const Cipher *);
u_int	 cipher_ivlen(const Cipher *);
u_int	 cipher_is_cbc(const Cipher *);

u_int	 cipher_get_number(const Cipher *);
void	 cipher_get_keyiv(CipherContext *, u_char *, u_int);
void	 cipher_set_keyiv(CipherContext *, u_char *);
int	 cipher_get_keyiv_len(const CipherContext *);
int	 cipher_get_keycontext(const CipherContext *, u_char *);
void	 cipher_set_keycontext(CipherContext *, u_char *);
@


1.44
log
@Add a special case for the DH group size for 3des-cbc, which has an
effective strength much lower than the key size.  This causes problems
with some cryptlib implementations, which don't support group sizes larger
than 4k but also don't use the largest group size it does support as
specified in the RFC.  Based on a patch from Petr Lautrbach at Redhat,
reduced by me with input from Markus.  ok djm@@ markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: cipher.h,v 1.43 2013/12/06 13:34:54 markus Exp $ */
d42 1
d73 1
@


1.43
log
@new private key format, bcrypt as KDF by default; details in PROTOCOL.key;
feedback and lots help from djm; ok djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: cipher.h,v 1.42 2013/11/21 00:45:44 djm Exp $ */
d92 1
@


1.42
log
@Add a new protocol 2 transport cipher "chacha20-poly1305@@openssh.com"
that combines Daniel Bernstein's ChaCha20 stream cipher and Poly1305 MAC
to build an authenticated encryption mode.

Inspired by and similar to Adam Langley's proposal for TLS:
http://tools.ietf.org/html/draft-agl-tls-chacha20poly1305-03
but differs in layout used for the MAC calculation and the use of a
second ChaCha20 instance to separately encrypt packet lengths.
Details are in the PROTOCOL.chacha20poly1305 file.

Feedback markus@@, naddy@@; manpage bits Loganden Velvindron @@ AfriNIC
ok markus@@ naddy@@
@
text
@d1 1
a1 1
/* $OpenBSD: cipher.h,v 1.41 2013/11/07 11:58:27 dtucker Exp $ */
d84 1
a84 1
void	 cipher_crypt(CipherContext *, u_int, u_char *, const u_char *,
@


1.41
log
@Output the effective values of Ciphers, MACs and KexAlgorithms when
the default has not been overridden.  ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: cipher.h,v 1.40 2013/04/19 01:06:50 djm Exp $ */
d41 2
d71 1
d81 1
a81 1
char	*cipher_alg_list(char);
d84 1
a84 1
void	 cipher_crypt(CipherContext *, u_char *, const u_char *,
d86 2
@


1.40
log
@add the ability to query supported ciphers, MACs, key type and KEX
algorithms to ssh. Includes some refactoring of KEX and key type handling
to be table-driven; ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: cipher.h,v 1.39 2013/01/08 18:49:04 markus Exp $ */
d78 1
a78 1
char	*cipher_alg_list(void);
@


1.39
log
@support AES-GCM as defined in RFC 5647 (but with simpler KEX handling)
ok and feedback djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: cipher.h,v 1.38 2012/12/11 22:31:18 markus Exp $ */
d69 1
a69 1
	Cipher *cipher;
d73 2
a74 2
Cipher	*cipher_by_name(const char *);
Cipher	*cipher_by_number(int);
d78 2
a79 1
void	 cipher_init(CipherContext *, Cipher *, const u_char *, u_int,
d84 1
a84 1
void	 cipher_set_key_string(CipherContext *, Cipher *, const char *, int);
@


1.38
log
@add encrypt-then-mac (EtM) modes to openssh by defining new mac algorithms
that change the packet format and compute the MAC over the encrypted
message (including the packet size) instead of the plaintext data;
these EtM modes are considered more secure and used by default.
feedback and ok djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: cipher.h,v 1.37 2009/01/26 09:58:15 markus Exp $ */
d67 1
d80 2
a81 1
void	 cipher_crypt(CipherContext *, u_char *, const u_char *, u_int, u_int);
d86 2
@


1.37
log
@Work around the CPNI-957037 Plaintext Recovery Attack by always
reading 256K of data on packet size or HMAC errors (in CBC mode only).
Help, feedback and ok djm@@
Feedback from Martin Albrecht and Paterson Kenny
@
text
@d1 1
a1 1
/* $OpenBSD: cipher.h,v 1.36 2006/03/25 22:22:42 djm Exp $ */
d79 1
a79 1
void	 cipher_crypt(CipherContext *, u_char *, const u_char *, u_int);
@


1.36
log
@standardise spacing in $OpenBSD$ tags; requested by deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: cipher.h,v 1.35 2004/07/28 09:40:29 markus Exp $ */
d84 1
@


1.35
log
@more s/illegal/invalid/
@
text
@d1 1
a1 1
/*	$OpenBSD: cipher.h,v 1.34 2003/11/10 16:23:41 jakob Exp $	*/
@


1.35.6.1
log
@upgrade to OpenSSH 4.4
@
text
@d1 1
a1 1
/* $OpenBSD: cipher.h,v 1.36 2006/03/25 22:22:42 djm Exp $ */
@


1.35.8.1
log
@upgrade to OpenSSH 4.4
@
text
@d1 1
a1 1
/* $OpenBSD: cipher.h,v 1.36 2006/03/25 22:22:42 djm Exp $ */
@


1.34
log
@constify. ok markus@@ & djm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cipher.h,v 1.33 2002/03/18 17:13:15 markus Exp $	*/
d46 1
a46 1
#define SSH_CIPHER_ILLEGAL	-2	/* No valid cipher selected. */
@


1.34.2.1
log
@upgrade to OpenSSH 3.9
@
text
@d1 1
a1 1
/*	$OpenBSD: cipher.h,v 1.35 2004/07/28 09:40:29 markus Exp $	*/
d46 1
a46 1
#define SSH_CIPHER_INVALID	-2	/* No valid cipher selected. */
@


1.33
log
@export/import cipher states; needed by ssh-privsep
@
text
@d1 1
a1 1
/*	$OpenBSD: cipher.h,v 1.32 2002/03/04 17:27:39 stevesk Exp $	*/
d82 2
a83 2
u_int	 cipher_blocksize(Cipher *);
u_int	 cipher_keylen(Cipher *);
d85 1
a85 1
u_int	 cipher_get_number(Cipher *);
d88 2
a89 2
int	 cipher_get_keyiv_len(CipherContext *);
int	 cipher_get_keycontext(CipherContext *, u_char *);
@


1.33.6.1
log
@upgrade to OpenSSH 3.8upgrade to OpenSSH 3.8upgrade to OpenSSH 3.8
@
text
@d1 1
a1 1
/*	$OpenBSD: cipher.h,v 1.34 2003/11/10 16:23:41 jakob Exp $	*/
d82 2
a83 2
u_int	 cipher_blocksize(const Cipher *);
u_int	 cipher_keylen(const Cipher *);
d85 1
a85 1
u_int	 cipher_get_number(const Cipher *);
d88 2
a89 2
int	 cipher_get_keyiv_len(const CipherContext *);
int	 cipher_get_keycontext(const CipherContext *, u_char *);
@


1.33.8.1
log
@upgrade to OpenSSH 3.8
@
text
@d1 1
a1 1
/*	$OpenBSD: cipher.h,v 1.34 2003/11/10 16:23:41 jakob Exp $	*/
d82 2
a83 2
u_int	 cipher_blocksize(const Cipher *);
u_int	 cipher_keylen(const Cipher *);
d85 1
a85 1
u_int	 cipher_get_number(const Cipher *);
d88 2
a89 2
int	 cipher_get_keyiv_len(const CipherContext *);
int	 cipher_get_keycontext(const CipherContext *, u_char *);
@


1.33.8.2
log
@upgrade to OpenSSH 3.9
@
text
@d1 1
a1 1
/*	$OpenBSD: cipher.h,v 1.35 2004/07/28 09:40:29 markus Exp $	*/
d46 1
a46 1
#define SSH_CIPHER_INVALID	-2	/* No valid cipher selected. */
@


1.32
log
@$OpenBSD$ and RCSID() cleanup: don't use RCSID() in .h files; add
missing RCSID() to .c files and remove dup /*$OpenBSD$*/ from .c
files.  ok markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cipher.h,v 1.31 2002/02/18 13:05:32 markus Exp $	*/
d84 7
@


1.31
log
@switch to EVP, ok djm@@ deraadt@@
@
text
@d1 2
a35 2

/* RCSID("$OpenBSD: cipher.h,v 1.29 2001/08/23 11:31:59 markus Exp $"); */
@


1.30
log
@hide some more implementation details of cipher.[ch] and prepares for move
to EVP, ok deraadt@@
@
text
@d40 1
a40 5
#include <openssl/des.h>
#include <openssl/blowfish.h>
#include <openssl/rc4.h>
#include <openssl/cast.h>
#include "rijndael.h"
a65 28
	union {
		struct {
			des_key_schedule key;
			des_cblock iv;
		}	des;
		struct {
			des_key_schedule key1;
			des_key_schedule key2;
			des_key_schedule key3;
			des_cblock iv1;
			des_cblock iv2;
			des_cblock iv3;
		}       des3;
		struct {
			struct bf_key_st key;
			u_char iv[8];
		}       bf;
		struct {
			CAST_KEY key;
			u_char iv[8];
		} cast;
		struct {
			u_char iv[16];
			rijndael_ctx enc;
			rijndael_ctx dec;
		} rijndael;
		RC4_KEY rc4;
	}       u;
d67 1
a67 1
	int	encrypt;
@


1.29
log
@switch to the optimised AES reference code from
http://www.esat.kuleuven.ac.be/~rijmen/rijndael/rijndael-fst-3.0.zip
@
text
@d35 1
a35 1
/* RCSID("$OpenBSD: cipher.h,v 1.28 2001/06/26 17:27:23 markus Exp $"); */
d62 3
d68 1
d98 2
a101 10
struct Cipher {
	char	*name;
	int	number;		/* for ssh1 only */
	u_int	block_size;
	u_int	key_len;
	void	(*setkey)(CipherContext *, const u_char *, u_int);
	void	(*setiv)(CipherContext *, const u_char *, u_int);
	void	(*encrypt)(CipherContext *, u_char *, const u_char *, u_int);
	void	(*decrypt)(CipherContext *, u_char *, const u_char *, u_int);
};
d110 6
a115 5
    const u_char *, u_int);
void	 cipher_encrypt(CipherContext *, u_char *, const u_char *, u_int);
void	 cipher_decrypt(CipherContext *, u_char *, const u_char *, u_int);
void	 cipher_set_key_string(CipherContext *, Cipher *, const char *);

@


1.29.2.1
log
@Update to OpenSSH-3.1 on 3.0-stable branch
@
text
@a0 2
/*	$OpenBSD: cipher.h,v 1.32 2002/03/04 17:27:39 stevesk Exp $	*/

d35 2
d40 5
a44 1
#include <openssl/evp.h>
a61 3
#define CIPHER_ENCRYPT		1
#define CIPHER_DECRYPT		0

a64 1
struct Cipher;
d66 28
a93 2
	int	plaintext;
	EVP_CIPHER_CTX evp;
d96 10
d114 5
a118 6
    const u_char *, u_int, int);
void	 cipher_crypt(CipherContext *, u_char *, const u_char *, u_int);
void	 cipher_cleanup(CipherContext *);
void	 cipher_set_key_string(CipherContext *, Cipher *, const char *, int);
u_int	 cipher_blocksize(Cipher *);
u_int	 cipher_keylen(Cipher *);
@


1.29.2.2
log
@Update OpenSSH to version 3.2.2.
@
text
@d1 1
a1 1
/*	$OpenBSD: cipher.h,v 1.33 2002/03/18 17:13:15 markus Exp $	*/
a83 7

u_int	 cipher_get_number(Cipher *);
void	 cipher_get_keyiv(CipherContext *, u_char *, u_int);
void	 cipher_set_keyiv(CipherContext *, u_char *);
int	 cipher_get_keyiv_len(CipherContext *);
int	 cipher_get_keycontext(CipherContext *, u_char *);
void	 cipher_set_keycontext(CipherContext *, u_char *);
@


1.28
log
@remove comments from .h, since they are cut&paste from the .c files
and out of sync
@
text
@d35 1
a35 1
/* RCSID("$OpenBSD: cipher.h,v 1.27 2001/06/26 06:32:49 itojun Exp $"); */
d88 1
a88 1
			u4byte iv[4];
@


1.27
log
@prototype pedant.  not very creative...
- () -> (void)
- no variable names
@
text
@d35 1
a35 1
/* RCSID("$OpenBSD: cipher.h,v 1.26 2001/05/28 22:51:11 markus Exp $"); */
d107 7
a113 7
u_int cipher_mask_ssh1(int);
Cipher *cipher_by_name(const char *);
Cipher *cipher_by_number(int);
int cipher_number(const char *);
char *cipher_name(int);
int ciphers_valid(const char *);
void cipher_init(CipherContext *, Cipher *, const u_char *, u_int,
d115 3
a117 3
void cipher_encrypt(CipherContext *, u_char *, const u_char *, u_int);
void cipher_decrypt(CipherContext *, u_char *, const u_char *, u_int);
void cipher_set_key_string(CipherContext *, Cipher *, const char *);
@


1.26
log
@simpler 3des for ssh1
@
text
@d35 1
a35 1
/* RCSID("$OpenBSD: cipher.h,v 1.25 2000/12/19 23:17:56 markus Exp $"); */
d107 11
a117 10
u_int cipher_mask_ssh1(int client);
Cipher *cipher_by_name(const char *name);
Cipher *cipher_by_number(int id);
int cipher_number(const char *name);
char *cipher_name(int id);
int ciphers_valid(const char *names);
void cipher_init(CipherContext *, Cipher *, const u_char *, u_int, const u_char *, u_int);
void cipher_encrypt(CipherContext *context, u_char *dest, const u_char *src, u_int len);
void cipher_decrypt(CipherContext *context, u_char *dest, const u_char *src, u_int len);
void cipher_set_key_string(CipherContext *context, Cipher *cipher, const char *passphrase);
@


1.25
log
@replace 'unsigned bla' with 'u_bla' everywhere. also, replace 'char unsigned'
with u_char.
@
text
@d35 1
a35 1
/* RCSID("$OpenBSD: cipher.h,v 1.24 2000/12/09 13:41:52 markus Exp $"); */
d74 2
a76 1
			des_key_schedule key3;
@


1.25.2.1
log
@Pull in OpenSSH-2.9.9
@
text
@d35 1
a35 1
/* RCSID("$OpenBSD: cipher.h,v 1.29 2001/08/23 11:31:59 markus Exp $"); */
d74 1
a75 2
			des_cblock iv1;
			des_cblock iv2;
d87 1
a87 1
			u_char iv[16];
d106 10
a115 11
u_int	 cipher_mask_ssh1(int);
Cipher	*cipher_by_name(const char *);
Cipher	*cipher_by_number(int);
int	 cipher_number(const char *);
char	*cipher_name(int);
int	 ciphers_valid(const char *);
void	 cipher_init(CipherContext *, Cipher *, const u_char *, u_int,
    const u_char *, u_int);
void	 cipher_encrypt(CipherContext *, u_char *, const u_char *, u_int);
void	 cipher_decrypt(CipherContext *, u_char *, const u_char *, u_int);
void	 cipher_set_key_string(CipherContext *, Cipher *, const char *);
@


1.25.2.2
log
@Merge OpenSSH 3.1, keeping /etc as configuration files directory.
(i.e. OpenSSH 3.1 + openbsd29_3.1.patch)
@
text
@a0 2
/*	$OpenBSD: cipher.h,v 1.32 2002/03/04 17:27:39 stevesk Exp $	*/

d35 2
d40 5
a44 1
#include <openssl/evp.h>
a61 3
#define CIPHER_ENCRYPT		1
#define CIPHER_DECRYPT		0

a64 1
struct Cipher;
d66 28
a93 2
	int	plaintext;
	EVP_CIPHER_CTX evp;
d96 10
d114 5
a118 6
    const u_char *, u_int, int);
void	 cipher_crypt(CipherContext *, u_char *, const u_char *, u_int);
void	 cipher_cleanup(CipherContext *);
void	 cipher_set_key_string(CipherContext *, Cipher *, const char *, int);
u_int	 cipher_blocksize(Cipher *);
u_int	 cipher_keylen(Cipher *);
@


1.25.2.3
log
@Upgrade to OpenSSH 3.2.3.

Except for improbable compilation error fixes, this should be the last
commit made to the 2.9-STABLE branche. Have fun upgrading.
@
text
@d1 1
a1 1
/*	$OpenBSD: cipher.h,v 1.33 2002/03/18 17:13:15 markus Exp $	*/
a83 7

u_int	 cipher_get_number(Cipher *);
void	 cipher_get_keyiv(CipherContext *, u_char *, u_int);
void	 cipher_set_keyiv(CipherContext *, u_char *);
int	 cipher_get_keyiv_len(CipherContext *);
int	 cipher_get_keycontext(CipherContext *, u_char *);
void	 cipher_set_keycontext(CipherContext *, u_char *);
@


1.24
log
@undo rijndael changes
@
text
@d35 1
a35 1
/* RCSID("$OpenBSD: cipher.h,v 1.22 2000/10/13 18:59:14 markus Exp $"); */
d106 1
a106 1
unsigned int cipher_mask_ssh1(int client);
@


1.23
log
@new rijndael implementation. fixes endian bugs
@
text
@a43 1

a44 1

d87 3
a89 3
			u_char iv[16];
			rijndael_key enc;
			rijndael_key dec;
@


1.22
log
@rijndael/aes support
@
text
@d35 1
a35 1
/* RCSID("$OpenBSD: cipher.h,v 1.21 2000/10/12 09:59:18 markus Exp $"); */
d44 1
d46 1
d89 3
a91 3
			u4byte iv[4];
			rijndael_ctx enc;
			rijndael_ctx dec;
@


1.22.2.1
log
@Pull in OpenSSH 2.5.0
@
text
@d35 1
a35 1
/* RCSID("$OpenBSD: cipher.h,v 1.25 2000/12/19 23:17:56 markus Exp $"); */
d106 1
a106 1
u_int cipher_mask_ssh1(int client);
@


1.22.2.2
log
@Pull in OpenSSH-2.5.1
@
text
@@


1.22.2.3
log
@Pull in OpenSSH-2.5.2 for 2.8 branch.
@
text
@@


1.22.2.4
log
@Pull in OpenSSH-2.9 to 2.8 branch.
@
text
@@


1.22.2.5
log
@Pull in OpenSSH 2.9.9 to the 2.8 branch.
@
text
@d35 1
a35 1
/* RCSID("$OpenBSD: cipher.h,v 1.29 2001/08/23 11:31:59 markus Exp $"); */
d74 1
a75 2
			des_cblock iv1;
			des_cblock iv2;
d87 1
a87 1
			u_char iv[16];
d106 10
a115 11
u_int	 cipher_mask_ssh1(int);
Cipher	*cipher_by_name(const char *);
Cipher	*cipher_by_number(int);
int	 cipher_number(const char *);
char	*cipher_name(int);
int	 ciphers_valid(const char *);
void	 cipher_init(CipherContext *, Cipher *, const u_char *, u_int,
    const u_char *, u_int);
void	 cipher_encrypt(CipherContext *, u_char *, const u_char *, u_int);
void	 cipher_decrypt(CipherContext *, u_char *, const u_char *, u_int);
void	 cipher_set_key_string(CipherContext *, Cipher *, const char *);
@


1.22.2.6
log
@Merge OpenSSH 3.1.
@
text
@a0 2
/*	$OpenBSD: cipher.h,v 1.32 2002/03/04 17:27:39 stevesk Exp $	*/

d35 2
d40 5
a44 1
#include <openssl/evp.h>
a61 3
#define CIPHER_ENCRYPT		1
#define CIPHER_DECRYPT		0

a64 1
struct Cipher;
d66 28
a93 2
	int	plaintext;
	EVP_CIPHER_CTX evp;
d96 10
d114 5
a118 6
    const u_char *, u_int, int);
void	 cipher_crypt(CipherContext *, u_char *, const u_char *, u_int);
void	 cipher_cleanup(CipherContext *);
void	 cipher_set_key_string(CipherContext *, Cipher *, const char *, int);
u_int	 cipher_blocksize(Cipher *);
u_int	 cipher_keylen(Cipher *);
@


1.21
log
@enable DES in SSH-1 clients only
@
text
@d35 1
a35 1
/* RCSID("$OpenBSD: cipher.h,v 1.20 2000/10/11 20:27:23 markus Exp $"); */
d44 1
d86 5
@


1.20
log
@new cipher framework
@
text
@d35 1
a35 1
/* RCSID("$OpenBSD: cipher.h,v 1.19 2000/09/07 20:27:50 deraadt Exp $"); */
d100 1
a100 1
unsigned int cipher_mask1();
@


1.19
log
@cleanup copyright notices on all files.  I have attempted to be accurate with
the details.  everything is now under Tatu's licence (which I copied from his
readme), and/or the core-sdi bsd-ish thing for deattack, or various openbsd
developers under a 2-term bsd licence.  We're not changing any rules, just
being accurate.
@
text
@d11 22
d35 1
a35 1
/* RCSID("$OpenBSD: cipher.h,v 1.18 2000/06/20 01:39:40 markus Exp $"); */
d44 5
a48 3

/* Cipher types.  New types can be added, but old types should not be removed
   for compatibility.  The maximum allowed value is 31. */
d59 1
d61 2
a62 5
/* these ciphers are used in SSH2: */
#define SSH_CIPHER_BLOWFISH_CBC	8
#define SSH_CIPHER_3DES_CBC	9
#define SSH_CIPHER_ARCFOUR	10	/* Alleged RC4 */
#define SSH_CIPHER_CAST128_CBC	11
d64 1
a64 2
typedef struct {
	unsigned int type;
d67 4
d79 1
a79 1
			unsigned char iv[8];
d83 1
a83 1
			unsigned char iv[8];
d87 13
a99 7
}       CipherContext;
/*
 * Returns a bit mask indicating which ciphers are supported by this
 * implementation.  The bit mask has the corresponding bit set of each
 * supported cipher.
 */
unsigned int cipher_mask();
d101 9
a109 43
unsigned int cipher_mask2();

/* Returns the name of the cipher. */
const char *cipher_name(int cipher);

/*
 * Parses the name of the cipher.  Returns the number of the corresponding
 * cipher, or -1 on error.
 */
int     cipher_number(const char *name);

/* returns 1 if all ciphers are supported (ssh2 only) */
int     ciphers_valid(const char *names);

/*
 * Selects the cipher to use and sets the key.  If for_encryption is true,
 * the key is setup for encryption; otherwise it is setup for decryption.
 */
void
cipher_set_key(CipherContext * context, int cipher,
    const unsigned char *key, int keylen);
void
cipher_set_key_iv(CipherContext * context, int cipher,
    const unsigned char *key, int keylen,
    const unsigned char *iv, int ivlen);

/*
 * Sets key for the cipher by computing the MD5 checksum of the passphrase,
 * and using the resulting 16 bytes as the key.
 */
void
cipher_set_key_string(CipherContext * context, int cipher,
    const char *passphrase);

/* Encrypts data using the cipher. */
void
cipher_encrypt(CipherContext * context, unsigned char *dest,
    const unsigned char *src, unsigned int len);

/* Decrypts data using the cipher. */
void
cipher_decrypt(CipherContext * context, unsigned char *dest,
    const unsigned char *src, unsigned int len);
@


1.18
log
@OpenBSD tag
@
text
@a1 3
 *
 * cipher.h
 *
a2 1
 *
d6 5
a10 2
 * Created: Wed Apr 19 16:50:42 1995 ylo
 *
d13 1
a13 1
/* RCSID("$OpenBSD: cipher.h,v 1.17 2000/05/08 17:12:15 markus Exp $"); */
@


1.17
log
@complain about invalid ciphers in SSH1 (e.g. arcfour is SSH2 only)
@
text
@d14 1
a14 1
/* RCSID("$Id: cipher.h,v 1.16 2000/04/14 10:30:30 markus Exp $"); */
@


1.17.2.1
log
@Pull in the rest of openssh-2.2.0 to 2.7 branch (luvin' cvs...)
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: cipher.h,v 1.18 2000/06/20 01:39:40 markus Exp $"); */
@


1.17.2.2
log
@openssh-2.3.0 (again) for 2.7 branch
@
text
@d2 3
d6 1
d10 1
a10 5
 * As far as I am concerned, the code I have written for this software
 * can be used freely for any purpose.  Any derived versions of this
 * software must be clearly marked as such, and if the derived work is
 * incompatible with the protocol description in the RFC file, it must be
 * called by a name other than "ssh" or "Secure Shell".
a11 21
 * Copyright (c) 2000 Markus Friedl.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
d14 1
a14 1
/* RCSID("$OpenBSD: cipher.h,v 1.22 2000/10/13 18:59:14 markus Exp $"); */
d23 3
a25 6
#include "rijndael.h"
/*
 * Cipher types for SSH-1.  New types can be added, but old types should not
 * be removed for compatibility.  The maximum allowed value is 31.
 */
#define SSH_CIPHER_SSH2		-3
a35 1
#define SSH_CIPHER_MAX		31
d37 5
a41 2
typedef struct Cipher Cipher;
typedef struct CipherContext CipherContext;
d43 2
a44 1
struct CipherContext {
a46 4
			des_key_schedule key;
			des_cblock iv;
		}	des;
		struct {
d55 1
a55 1
			u_char iv[8];
d59 1
a59 1
			u_char iv[8];
a60 5
		struct {
			u4byte iv[4];
			rijndael_ctx enc;
			rijndael_ctx dec;
		} rijndael;
d63 51
a113 23
	Cipher *cipher;
};
struct Cipher {
	char	*name;
	int	number;		/* for ssh1 only */
	u_int	block_size;
	u_int	key_len;
	void	(*setkey)(CipherContext *, const u_char *, u_int);
	void	(*setiv)(CipherContext *, const u_char *, u_int);
	void	(*encrypt)(CipherContext *, u_char *, const u_char *, u_int);
	void	(*decrypt)(CipherContext *, u_char *, const u_char *, u_int);
};

unsigned int cipher_mask_ssh1(int client);
Cipher *cipher_by_name(const char *name);
Cipher *cipher_by_number(int id);
int cipher_number(const char *name);
char *cipher_name(int id);
int ciphers_valid(const char *names);
void cipher_init(CipherContext *, Cipher *, const u_char *, u_int, const u_char *, u_int);
void cipher_encrypt(CipherContext *context, u_char *dest, const u_char *src, u_int len);
void cipher_decrypt(CipherContext *context, u_char *dest, const u_char *src, u_int len);
void cipher_set_key_string(CipherContext *context, Cipher *cipher, const char *passphrase);
@


1.17.2.3
log
@OpenSSH-2.5.1 for 2.7 patch branch
@
text
@d35 1
a35 1
/* RCSID("$OpenBSD: cipher.h,v 1.25 2000/12/19 23:17:56 markus Exp $"); */
d106 1
a106 1
u_int cipher_mask_ssh1(int client);
@


1.17.2.4
log
@Pull in OpenSSH-2.5.2 for 2.7 branch.
@
text
@@


1.16
log
@whitespace cleanup
@
text
@d14 1
a14 1
/* RCSID("$Id: cipher.h,v 1.15 2000/04/12 09:39:10 markus Exp $"); */
d26 1
@


1.15
log
@#include <ssl/foo.h> -> <openssh/foo.h>
@
text
@d2 1
a2 1
 * 
d4 1
a4 1
 * 
d6 1
a6 1
 * 
d9 1
a9 1
 * 
d11 1
a11 1
 * 
d14 1
a14 1
/* RCSID("$Id: cipher.h,v 1.14 2000/04/12 07:45:43 markus Exp $"); */
d88 1
a88 1
void 
d91 1
a91 1
void 
d93 1
a93 1
    const unsigned char *key, int keylen, 
d100 1
a100 1
void 
d105 1
a105 1
void 
d110 1
a110 1
void 
@


1.14
log
@add Cipher and Protocol options to ssh/sshd, e.g.:
ssh -o 'Protocol 1,2' if you prefer proto 1, ssh -o 'Ciphers arcfour,3des-cbc'
@
text
@d14 1
a14 1
/* RCSID("$Id: cipher.h,v 1.13 2000/04/04 21:37:27 markus Exp $"); */
d19 4
a22 4
#include <ssl/des.h>
#include <ssl/blowfish.h>
#include <ssl/rc4.h>
#include <ssl/cast.h>
@


1.13
log
@remove unused argument, split cipher_mask()
@
text
@d14 1
a14 1
/* RCSID("$Id: cipher.h,v 1.12 2000/03/28 20:24:50 markus Exp $"); */
d80 3
@


1.12
log
@support ssh2 ciphers
@
text
@d14 1
a14 1
/* RCSID("$Id: cipher.h,v 1.12 2000/03/22 13:40:45 markus Exp $"); */
d69 2
d87 1
a87 1
    const unsigned char *key, int keylen, int for_encryption);
d99 1
a99 1
    const char *passphrase, int for_encryption);
@


1.11
log
@remove unused cipher_attack_detected code
@
text
@d14 1
a14 1
/* RCSID("$Id: cipher.h,v 1.10 1999/11/24 19:53:46 markus Exp $"); */
d21 2
d34 7
d56 5
d86 4
@


1.10
log
@KNF, final part 3
@
text
@d14 1
a14 1
/* RCSID("$Id: cipher.h,v 1.9 1999/11/24 00:26:01 deraadt Exp $"); */
a89 6

/*
 * If and CRC-32 attack is detected this function is called. Defaults to
 * fatal, changed to packet_disconnect in sshd and ssh.
 */
extern void (*cipher_attack_detected) (const char *fmt, ...);
@


1.9
log
@much more KNF
@
text
@d14 1
a14 1
/* RCSID("$Id: cipher.h,v 1.8 1999/11/15 21:38:54 markus Exp $"); */
d49 5
a53 3
/* Returns a bit mask indicating which ciphers are supported by this
   implementation.  The bit mask has the corresponding bit set of each
   supported cipher. */
d59 4
a62 2
/* Parses the name of the cipher.  Returns the number of the corresponding
   cipher, or -1 on error. */
d65 4
a68 2
/* Selects the cipher to use and sets the key.  If for_encryption is true,
   the key is setup for encryption; otherwise it is setup for decryption. */
d73 4
a76 2
/* Sets key for the cipher by computing the MD5 checksum of the passphrase,
   and using the resulting 16 bytes as the key. */
d91 5
a95 3
/* If and CRC-32 attack is detected this function is called. Defaults
 * to fatal, changed to packet_disconnect in sshd and ssh. */
extern void (*cipher_attack_detected) (const char *fmt,...);
@


1.8
log
@remove support for cipher RC4
@
text
@d2 11
d14 1
a14 12
cipher.h

Author: Tatu Ylonen <ylo@@cs.hut.fi>

Copyright (c) 1995 Tatu Ylonen <ylo@@cs.hut.fi>, Espoo, Finland
                   All rights reserved

Created: Wed Apr 19 16:50:42 1995 ylo

*/

/* RCSID("$Id: cipher.h,v 1.7 1999/10/02 19:14:54 deraadt Exp $"); */
d24 7
a30 7
#define SSH_CIPHER_NOT_SET	-1 /* None selected (invalid number). */
#define SSH_CIPHER_NONE		0 /* no encryption */
#define SSH_CIPHER_IDEA		1 /* IDEA CFB */
#define SSH_CIPHER_DES		2 /* DES CBC */
#define SSH_CIPHER_3DES		3 /* 3DES CBC */
#define SSH_CIPHER_BROKEN_TSS	4 /* TRI's Simple Stream encryption CBC */
#define SSH_CIPHER_BROKEN_RC4	5 /* Alleged RC4 */
d34 15
a48 16
  unsigned int type;
  union {
    struct {
      des_key_schedule key1;
      des_key_schedule key2;
      des_cblock iv2;
      des_key_schedule key3;
      des_cblock iv3;
    } des3;
    struct {
      struct bf_key_st key;
      unsigned char iv[8];
    } bf;
  } u;
} CipherContext;

d59 1
a59 1
int cipher_number(const char *name);
d63 3
a65 2
void cipher_set_key(CipherContext *context, int cipher,
		    const unsigned char *key, int keylen, int for_encryption);
d69 3
a71 2
void cipher_set_key_string(CipherContext *context, int cipher,
			   const char *passphrase, int for_encryption);
d74 3
a76 2
void cipher_encrypt(CipherContext *context, unsigned char *dest,
		    const unsigned char *src, unsigned int len);
d79 3
a81 2
void cipher_decrypt(CipherContext *context, unsigned char *dest,
		    const unsigned char *src, unsigned int len);
d85 1
a85 1
extern void (*cipher_attack_detected)(const char *fmt, ...);
d87 1
a87 1
#endif /* CIPHER_H */
@


1.7
log
@remove local blowfish code
@
text
@d14 1
a14 1
/* RCSID("$Id: cipher.h,v 1.6 1999/09/30 19:22:58 deraadt Exp $"); */
d19 1
a19 1
#include <des.h>
d29 2
a30 2
#define SSH_CIPHER_TSS		4 /* TRI's Simple Stream encryption CBC */
#define SSH_CIPHER_RC4		5 /* Alleged RC4 */
@


1.6
log
@<des.h>
@
text
@d14 1
a14 1
/* RCSID("$Id: cipher.h,v 1.5 1999/09/30 08:34:24 deraadt Exp $"); */
d20 1
a20 1
#include "blowfish.h"
@


1.5
log
@even smaller
@
text
@d14 1
a14 1
/* RCSID("$Id: cipher.h,v 1.4 1999/09/28 04:45:36 provos Exp $"); */
d19 1
a19 1
#include "des.h"
@


1.4
log
@convert all uses of gmp to SSL bignum
convert all used of rsa to SSL rsa functions
remove all use of randomstate to OpenBSD arc4random() and arc4_stir()
all this done at a long long night in Canada.
@
text
@d14 1
a14 1
/* RCSID("$Id: cipher.h,v 1.9 1999/05/28 15:21:52 bg Exp $"); */
a35 6
#ifdef WITH_DES
    struct {
      des_key_schedule key;
      des_cblock iv;
    } des;
#endif /* WITH_DES */
@


1.3
log
@blowfish is always there
@
text
@d14 1
a14 1
/* RCSID("$Id: cipher.h,v 1.2 1999/09/26 21:02:15 deraadt Exp $"); */
a19 3
#ifdef WITH_RC4
#include "rc4.h"
#endif
d26 1
a26 1
#define SSH_CIPHER_IDEA		1 /* IDEA CFB -- not implemented */
a48 3
#ifdef WITH_RC4
    RC4Context rc4;
#endif
@


1.2
log
@all the idea code goes away
@
text
@d14 1
a14 1
/* RCSID("$Id: cipher.h,v 1.1 1999/09/26 20:53:34 deraadt Exp $"); */
a22 1
#ifdef WITH_BLOWFISH
a23 1
#endif
a54 1
#ifdef WITH_BLOWFISH
a58 1
#endif /* WITH_BLOWFISH */
@


1.1
log
@i bet a lot of people didn't know what ssh 1.2.16 had a nice license.
well, except for the patent issues.  someone in sweden (forget their
name at the moment) cleaned out most of the patented code, and now
this code removes rsa code.  when this is done, it will link against
libssl, but the work isn't completely done yet.  then we need to bring
this up to modern days, featurewise.
@
text
@d14 1
a14 1
/* RCSID("$Id: cipher.h,v 1.9 1999/05/28 15:21:52 bg Exp $"); */
a18 3
#ifdef WITH_IDEA
#include "idea.h"
#endif /* WITH_IDEA */
d31 1
a31 1
#define SSH_CIPHER_IDEA		1 /* IDEA CFB */
a40 6
#ifdef WITH_IDEA
    struct {
      IDEAContext key;
      unsigned char iv[8];
    } idea;
#endif /* WITH_IDEA */
@

