head	1.29;
access;
symbols
	OPENBSD_6_1:1.27.0.10
	OPENBSD_6_1_BASE:1.27
	OPENBSD_6_0:1.27.0.8
	OPENBSD_6_0_BASE:1.27
	OPENBSD_5_9:1.27.0.4
	OPENBSD_5_9_BASE:1.27
	OPENBSD_5_8:1.27.0.2
	OPENBSD_5_8_BASE:1.27
	OPENBSD_5_7:1.26.0.2
	OPENBSD_5_7_BASE:1.26
	OPENBSD_5_6:1.22.0.26
	OPENBSD_5_6_BASE:1.22
	OPENBSD_5_5:1.22.0.24
	OPENBSD_5_5_BASE:1.22
	OPENBSD_5_4:1.22.0.20
	OPENBSD_5_4_BASE:1.22
	OPENBSD_5_3:1.22.0.18
	OPENBSD_5_3_BASE:1.22
	OPENBSD_5_2:1.22.0.16
	OPENBSD_5_2_BASE:1.22
	OPENBSD_5_1_BASE:1.22
	OPENBSD_5_1:1.22.0.14
	OPENBSD_5_0:1.22.0.12
	OPENBSD_5_0_BASE:1.22
	OPENBSD_4_9:1.22.0.10
	OPENBSD_4_9_BASE:1.22
	OPENBSD_4_8:1.22.0.8
	OPENBSD_4_8_BASE:1.22
	OPENBSD_4_7:1.22.0.4
	OPENBSD_4_7_BASE:1.22
	OPENBSD_4_6:1.22.0.6
	OPENBSD_4_6_BASE:1.22
	OPENBSD_4_5:1.22.0.2
	OPENBSD_4_5_BASE:1.22
	OPENBSD_4_4:1.21.0.10
	OPENBSD_4_4_BASE:1.21
	OPENBSD_4_3:1.21.0.8
	OPENBSD_4_3_BASE:1.21
	OPENBSD_4_2:1.21.0.6
	OPENBSD_4_2_BASE:1.21
	OPENBSD_4_1:1.21.0.2
	OPENBSD_4_1_BASE:1.21
	OPENBSD_4_0:1.21.0.4
	OPENBSD_4_0_BASE:1.21
	OPENBSD_3_9:1.16.0.12
	OPENBSD_3_9_BASE:1.16
	OPENBSD_3_8:1.16.0.10
	OPENBSD_3_8_BASE:1.16
	OPENBSD_3_7:1.16.0.8
	OPENBSD_3_7_BASE:1.16
	OPENBSD_3_6:1.16.0.6
	OPENBSD_3_6_BASE:1.16
	OPENBSD_3_5:1.16.0.4
	OPENBSD_3_5_BASE:1.16
	OPENBSD_3_4:1.16.0.2
	OPENBSD_3_4_BASE:1.16
	OPENBSD_3_3:1.15.0.6
	OPENBSD_3_3_BASE:1.15
	OPENBSD_3_2:1.15.0.4
	OPENBSD_3_2_BASE:1.15
	OPENBSD_3_1:1.15.0.2
	OPENBSD_3_1_BASE:1.15
	OPENBSD_3_0:1.11.0.2
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9_BASE:1.10
	OPENBSD_2_9:1.10.0.2
	OPENBSD_2_8:1.5.0.2
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2;
locks; strict;
comment	@ * @;


1.29
date	2017.04.30.23.28.42;	author djm;	state Exp;
branches;
next	1.28;
commitid	mCEJ1LTymp03ZrA9;

1.28
date	2017.04.30.23.13.25;	author djm;	state Exp;
branches;
next	1.27;
commitid	Ss7V57MvgEZubdtr;

1.27
date	2015.05.01.07.10.01;	author djm;	state Exp;
branches;
next	1.26;
commitid	OeI8NmAwBXD07SOv;

1.26
date	2015.02.12.20.34.19;	author dtucker;	state Exp;
branches;
next	1.25;
commitid	HWvgeYp5F0RkosOV;

1.25
date	2015.01.30.01.13.33;	author djm;	state Exp;
branches;
next	1.24;
commitid	BuE3vBiYMFEA1E3u;

1.24
date	2015.01.28.22.05.31;	author djm;	state Exp;
branches;
next	1.23;
commitid	DDK44DXHtwb4DOMZ;

1.23
date	2015.01.19.20.07.45;	author markus;	state Exp;
branches;
next	1.22;
commitid	GrtSC5ve2VERgUln;

1.22
date	2008.10.31.15.05.34;	author stevesk;	state Exp;
branches;
next	1.21;

1.21
date	2006.08.03.03.34.42;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2006.07.23.01.11.05;	author stevesk;	state Exp;
branches;
next	1.19;

1.19
date	2006.04.20.09.27.09;	author djm;	state Exp;
branches;
next	1.18;

1.18
date	2006.03.25.13.17.01;	author djm;	state Exp;
branches;
next	1.17;

1.17
date	2006.03.19.18.51.18;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2003.04.08.20.21.28;	author itojun;	state Exp;
branches
	1.16.10.1
	1.16.12.1;
next	1.15;

1.15
date	2002.01.11.13.39.36;	author markus;	state Exp;
branches
	1.15.4.1
	1.15.6.1;
next	1.14;

1.14
date	2001.12.28.15.06.00;	author markus;	state Exp;
branches;
next	1.13;

1.13
date	2001.12.28.14.50.54;	author markus;	state Exp;
branches;
next	1.12;

1.12
date	2001.12.20.22.50.24;	author djm;	state Exp;
branches;
next	1.11;

1.11
date	2001.06.10.11.29.20;	author markus;	state Exp;
branches
	1.11.2.1;
next	1.10;

1.10
date	2001.02.18.18.33.53;	author markus;	state Exp;
branches
	1.10.2.1;
next	1.9;

1.9
date	2001.02.04.15.32.23;	author stevesk;	state Exp;
branches;
next	1.8;

1.8
date	2001.01.28.10.15.34;	author markus;	state Exp;
branches;
next	1.7;

1.7
date	2001.01.21.19.05.49;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2001.01.19.15.55.11;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2000.09.21.11.25.34;	author markus;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2000.09.07.20.27.51;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2000.06.20.01.39.41;	author markus;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.14.10.30.31;	author markus;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2000.03.28.20.40.48;	author markus;	state Exp;
branches;
next	;

1.2.2.1
date	2000.09.01.18.23.19;	author jason;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2000.11.08.21.30.45;	author jason;	state Exp;
branches;
next	1.2.2.3;

1.2.2.3
date	2001.03.12.15.44.10;	author jason;	state Exp;
branches;
next	1.2.2.4;

1.2.2.4
date	2001.03.21.18.52.45;	author jason;	state Exp;
branches;
next	;

1.5.2.1
date	2001.02.16.20.13.01;	author jason;	state Exp;
branches;
next	1.5.2.2;

1.5.2.2
date	2001.02.19.17.18.54;	author jason;	state Exp;
branches;
next	1.5.2.3;

1.5.2.3
date	2001.03.21.19.46.25;	author jason;	state Exp;
branches;
next	1.5.2.4;

1.5.2.4
date	2001.05.07.21.09.29;	author jason;	state Exp;
branches;
next	1.5.2.5;

1.5.2.5
date	2001.09.27.00.15.42;	author miod;	state Exp;
branches;
next	1.5.2.6;

1.5.2.6
date	2002.03.08.17.04.42;	author brad;	state Exp;
branches;
next	;

1.10.2.1
date	2001.09.27.19.03.54;	author jason;	state Exp;
branches;
next	1.10.2.2;

1.10.2.2
date	2002.03.09.00.20.44;	author miod;	state Exp;
branches;
next	;

1.11.2.1
date	2002.03.07.17.37.46;	author jason;	state Exp;
branches;
next	;

1.15.4.1
date	2003.09.16.21.20.25;	author brad;	state Exp;
branches;
next	;

1.15.6.1
date	2003.09.16.20.50.43;	author brad;	state Exp;
branches;
next	1.15.6.2;

1.15.6.2
date	2004.03.04.18.18.15;	author brad;	state Exp;
branches;
next	;

1.16.10.1
date	2006.10.06.03.19.32;	author brad;	state Exp;
branches;
next	;

1.16.12.1
date	2006.09.30.04.06.50;	author brad;	state Exp;
branches;
next	;


desc
@@


1.29
log
@obliterate ssh1.h and some dead code that used it

ok markus@@
@
text
@/* $OpenBSD: dispatch.c,v 1.28 2017/04/30 23:13:25 djm Exp $ */
/*
 * Copyright (c) 2000 Markus Friedl.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>

#include <signal.h>
#include <stdarg.h>

#include "ssh2.h"
#include "log.h"
#include "dispatch.h"
#include "packet.h"
#include "compat.h"
#include "ssherr.h"

int
dispatch_protocol_error(int type, u_int32_t seq, void *ctx)
{
	struct ssh *ssh = active_state; /* XXX */
	int r;

	logit("dispatch_protocol_error: type %d seq %u", type, seq);
	if ((r = sshpkt_start(ssh, SSH2_MSG_UNIMPLEMENTED)) != 0 ||
	    (r = sshpkt_put_u32(ssh, seq)) != 0 ||
	    (r = sshpkt_send(ssh)) != 0 ||
	    (r = ssh_packet_write_wait(ssh)) != 0)
		sshpkt_fatal(ssh, __func__, r);
	return 0;
}

int
dispatch_protocol_ignore(int type, u_int32_t seq, void *ssh)
{
	logit("dispatch_protocol_ignore: type %d seq %u", type, seq);
	return 0;
}

void
ssh_dispatch_init(struct ssh *ssh, dispatch_fn *dflt)
{
	u_int i;
	for (i = 0; i < DISPATCH_MAX; i++)
		ssh->dispatch[i] = dflt;
}

void
ssh_dispatch_range(struct ssh *ssh, u_int from, u_int to, dispatch_fn *fn)
{
	u_int i;

	for (i = from; i <= to; i++) {
		if (i >= DISPATCH_MAX)
			break;
		ssh->dispatch[i] = fn;
	}
}

void
ssh_dispatch_set(struct ssh *ssh, int type, dispatch_fn *fn)
{
	ssh->dispatch[type] = fn;
}

int
ssh_dispatch_run(struct ssh *ssh, int mode, volatile sig_atomic_t *done,
    void *ctxt)
{
	int r;
	u_char type;
	u_int32_t seqnr;

	for (;;) {
		if (mode == DISPATCH_BLOCK) {
			r = ssh_packet_read_seqnr(ssh, &type, &seqnr);
			if (r != 0)
				return r;
		} else {
			r = ssh_packet_read_poll_seqnr(ssh, &type, &seqnr);
			if (r != 0)
				return r;
			if (type == SSH_MSG_NONE)
				return 0;
		}
		if (type > 0 && type < DISPATCH_MAX &&
		    ssh->dispatch[type] != NULL) {
			if (ssh->dispatch_skip_packets) {
				debug2("skipped packet (type %u)", type);
				ssh->dispatch_skip_packets--;
				continue;
			}
			/* XXX 'ssh' will replace 'ctxt' later */
			r = (*ssh->dispatch[type])(type, seqnr, ctxt);
			if (r != 0)
				return r;
		} else {
			r = sshpkt_disconnect(ssh,
			    "protocol error: rcvd type %d", type);
			if (r != 0)
				return r;
			return SSH_ERR_DISCONNECTED;
		}
		if (done != NULL && *done)
			return 0;
	}
}

void
ssh_dispatch_run_fatal(struct ssh *ssh, int mode, volatile sig_atomic_t *done,
    void *ctxt)
{
	int r;

	if ((r = ssh_dispatch_run(ssh, mode, done, ctxt)) != 0)
		sshpkt_fatal(ssh, __func__, r);
}
@


1.28
log
@remove compat20/compat13/compat15 variables

ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: dispatch.c,v 1.27 2015/05/01 07:10:01 djm Exp $ */
a30 1
#include "ssh1.h"
@


1.27
log
@refactor ssh_dispatch_run_fatal() to use sshpkt_fatal() to better
report error conditions. Teach sshpkt_fatal() about ECONNRESET.

Improves error messages on TCP connection resets. bz#2257

ok dtucker@@
@
text
@d1 1
a1 1
/* $OpenBSD: dispatch.c,v 1.26 2015/02/12 20:34:19 dtucker Exp $ */
a45 2
	if (!compat20)
		fatal("protocol error");
@


1.26
log
@Prevent sshd spamming syslog with "ssh_dispatch_run_fatal: disconnected".
ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: dispatch.c,v 1.25 2015/01/30 01:13:33 djm Exp $ */
d138 2
a139 18
	if ((r = ssh_dispatch_run(ssh, mode, done, ctxt)) != 0) {
		switch (r) {
		case SSH_ERR_CONN_CLOSED:
			logit("Connection closed by %.200s",
			    ssh_remote_ipaddr(ssh));
			cleanup_exit(255);
		case SSH_ERR_CONN_TIMEOUT:
			logit("Connection to %.200s timed out while "
			    "waiting to read", ssh_remote_ipaddr(ssh));
			cleanup_exit(255);
		case SSH_ERR_DISCONNECTED:
			logit("Disconnected from %.200s",
			    ssh_remote_ipaddr(ssh));
			cleanup_exit(255);
		default:
			fatal("%s: %s", __func__, ssh_err(r));
		}
	}
@


1.25
log
@avoid more fatal/exit in the packet.c paths that ssh-keyscan
uses; feedback and "looks good" markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: dispatch.c,v 1.24 2015/01/28 22:05:31 djm Exp $ */
d147 4
@


1.24
log
@avoid fatal() calls in packet code
makes ssh-keyscan more reliable against server failures
ok dtucker@@ markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: dispatch.c,v 1.23 2015/01/19 20:07:45 markus Exp $ */
d50 3
a52 3
	    (r = sshpkt_send(ssh)) != 0)
		fatal("%s: %s", __func__, ssh_err(r));
	ssh_packet_write_wait(ssh);
@


1.23
log
@move dispatch to struct ssh; ok djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: dispatch.c,v 1.22 2008/10/31 15:05:34 stevesk Exp $ */
d138 14
a151 2
	if ((r = ssh_dispatch_run(ssh, mode, done, ctxt)) != 0)
		fatal("%s: %s", __func__, ssh_err(r));
@


1.22
log
@remove unused #define DISPATCH_MIN; ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: dispatch.c,v 1.21 2006/08/03 03:34:42 deraadt Exp $ */
d37 1
d39 5
a43 3
#define DISPATCH_MAX	255

dispatch_fn *dispatch[DISPATCH_MAX];
a44 3
void
dispatch_protocol_error(int type, u_int32_t seq, void *ctxt)
{
d48 6
a53 4
	packet_start(SSH2_MSG_UNIMPLEMENTED);
	packet_put_int(seq);
	packet_send();
	packet_write_wait();
d55 3
a57 2
void
dispatch_protocol_ignore(int type, u_int32_t seq, void *ctxt)
d60 1
d62 1
d64 1
a64 1
dispatch_init(dispatch_fn *dflt)
d68 1
a68 1
		dispatch[i] = dflt;
d70 1
d72 1
a72 1
dispatch_range(u_int from, u_int to, dispatch_fn *fn)
d79 1
a79 1
		dispatch[i] = fn;
d82 1
d84 1
a84 1
dispatch_set(int type, dispatch_fn *fn)
d86 1
a86 1
	dispatch[type] = fn;
d88 9
a96 3
void
dispatch_run(int mode, volatile sig_atomic_t *done, void *ctxt)
{
a97 3
		int type;
		u_int32_t seqnr;

d99 3
a101 1
			type = packet_read_seqnr(&seqnr);
d103 3
a105 1
			type = packet_read_poll_seqnr(&seqnr);
d107 19
a125 1
				return;
a126 4
		if (type > 0 && type < DISPATCH_MAX && dispatch[type] != NULL)
			(*dispatch[type])(type, seqnr, ctxt);
		else
			packet_disconnect("protocol error: rcvd type %d", type);
d128 1
a128 1
			return;
d130 10
@


1.21
log
@almost entirely get rid of the culture of ".h files that include .h files"
ok djm, sort of ok stevesk
makes the pain stop in one easy step
@
text
@d1 1
a1 1
/* $OpenBSD: dispatch.c,v 1.20 2006/07/23 01:11:05 stevesk Exp $ */
a37 1
#define DISPATCH_MIN	0
@


1.20
log
@#include <signal.h> for sig_atomic_t; need this prior to <sys/param.h>
move
@
text
@d1 1
a1 1
/* $OpenBSD: dispatch.c,v 1.19 2006/04/20 09:27:09 djm Exp $ */
d25 2
a26 1
#include "includes.h"
d29 1
@


1.19
log
@replace the last non-sig_atomic_t flag used in a signal handler with a
sig_atomic_t, unfortunately with some knock-on effects in other (non-
signal) contexts in which it is used; ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: dispatch.c,v 1.18 2006/03/25 13:17:01 djm Exp $ */
d26 2
@


1.18
log
@Put $OpenBSD$ tags back (as comments) to replace the RCSID()s that
Theo nuked - our scripts to sync -portable need them in the files
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d79 1
a79 1
dispatch_run(int mode, int *done, void *ctxt)
@


1.17
log
@RCSID() can die
@
text
@d1 1
@


1.16
log
@rename log() into logit() to avoid name conflict.  markus ok, from netbsd
@
text
@a24 1
RCSID("$OpenBSD: dispatch.c,v 1.15 2002/01/11 13:39:36 markus Exp $");
@


1.16.10.1
log
@upgrade to OpenSSH 4.4
@
text
@a0 1
/* $OpenBSD: dispatch.c,v 1.21 2006/08/03 03:34:42 deraadt Exp $ */
d24 2
a25 5

#include <sys/types.h>

#include <signal.h>
#include <stdarg.h>
d79 1
a79 1
dispatch_run(int mode, volatile sig_atomic_t *done, void *ctxt)
@


1.16.12.1
log
@upgrade to OpenSSH 4.4
@
text
@a0 1
/* $OpenBSD: dispatch.c,v 1.21 2006/08/03 03:34:42 deraadt Exp $ */
d24 2
a25 5

#include <sys/types.h>

#include <signal.h>
#include <stdarg.h>
d79 1
a79 1
dispatch_run(int mode, volatile sig_atomic_t *done, void *ctxt)
@


1.15
log
@a single dispatch_protocol_error() that sends a message of type 'UNIMPLEMENTED'
dispatch_range(): set handler for a ranges message types
use dispatch_protocol_ignore() for authentication requests after
	successful authentication (the drafts requirement).
serverloop/clientloop now send a 'UNIMPLEMENTED' message instead of exiting.
@
text
@d25 1
a25 1
RCSID("$OpenBSD: dispatch.c,v 1.14 2001/12/28 15:06:00 markus Exp $");
d42 1
a42 1
	log("dispatch_protocol_error: type %d seq %u", type, seq);
d53 1
a53 1
	log("dispatch_protocol_ignore: type %d seq %u", type, seq);
@


1.15.4.1
log
@upgrade to OpenSSH 3.7
@
text
@d25 1
a25 1
RCSID("$OpenBSD: dispatch.c,v 1.16 2003/04/08 20:21:28 itojun Exp $");
d42 1
a42 1
	logit("dispatch_protocol_error: type %d seq %u", type, seq);
d53 1
a53 1
	logit("dispatch_protocol_ignore: type %d seq %u", type, seq);
@


1.15.6.1
log
@upgrade to OpenSSH 3.7
@
text
@d25 1
a25 1
RCSID("$OpenBSD: dispatch.c,v 1.16 2003/04/08 20:21:28 itojun Exp $");
d42 1
a42 1
	logit("dispatch_protocol_error: type %d seq %u", type, seq);
d53 1
a53 1
	logit("dispatch_protocol_ignore: type %d seq %u", type, seq);
@


1.15.6.2
log
@upgrade to OpenSSH 3.8upgrade to OpenSSH 3.8upgrade to OpenSSH 3.8
@
text
@@


1.14
log
@remove plen from the dispatch fn. it's no longer used.
@
text
@d25 1
a25 1
RCSID("$OpenBSD: dispatch.c,v 1.13 2001/12/28 14:50:54 markus Exp $");
d42 12
a53 1
	fatal("dispatch_protocol_error: type %d seq %u", type, seq);
d58 1
a58 1
	int i;
d61 11
@


1.13
log
@packet_read* no longer return the packet length, since it's not used.
@
text
@d25 1
a25 1
RCSID("$OpenBSD: dispatch.c,v 1.12 2001/12/20 22:50:24 djm Exp $");
d40 1
a40 1
dispatch_protocol_error(int type, int plen, u_int32_t seq, void *ctxt)
d42 1
a42 2
	fatal("dispatch_protocol_error: type %d seq %u plen %d", type, 
	    seq, plen);
d71 1
a71 1
			(*dispatch[type])(type, 1234, seqnr, ctxt);
@


1.12
log
@Conformance fix: we should send failing packet sequence number when
responding with a SSH_MSG_UNIMPLEMENTED message. Spotted by
yakk@@yakk.dot.net; ok markus@@
@
text
@d25 1
a25 1
RCSID("$OpenBSD: dispatch.c,v 1.11 2001/06/10 11:29:20 markus Exp $");
a60 1
		int plen;
d65 1
a65 1
			type = packet_read_seqnr(&plen, &seqnr);
d67 1
a67 1
			type = packet_read_poll_seqnr(&plen, &seqnr);
d72 1
a72 1
			(*dispatch[type])(type, plen, seqnr, ctxt);
@


1.11
log
@we support rekeying
protocol errors are fatal.
@
text
@d25 1
a25 1
RCSID("$OpenBSD: dispatch.c,v 1.10 2001/02/18 18:33:53 markus Exp $");
d40 1
a40 1
dispatch_protocol_error(int type, int plen, void *ctxt)
d42 2
a43 1
	fatal("dispatch_protocol_error: type %d plen %d", type, plen);
d63 1
d66 1
a66 1
			type = packet_read(&plen);
d68 1
a68 1
			type = packet_read_poll(&plen);
d73 1
a73 1
			(*dispatch[type])(type, plen, ctxt);
@


1.11.2.1
log
@Update to OpenSSH-3.1 on 3.0-stable branch
@
text
@d25 1
a25 1
RCSID("$OpenBSD: dispatch.c,v 1.15 2002/01/11 13:39:36 markus Exp $");
d40 1
a40 1
dispatch_protocol_error(int type, u_int32_t seq, void *ctxt)
d42 1
a42 12
	log("dispatch_protocol_error: type %d seq %u", type, seq);
	if (!compat20)
		fatal("protocol error");
	packet_start(SSH2_MSG_UNIMPLEMENTED);
	packet_put_int(seq);
	packet_send();
	packet_write_wait();
}
void
dispatch_protocol_ignore(int type, u_int32_t seq, void *ctxt)
{
	log("dispatch_protocol_ignore: type %d seq %u", type, seq);
d47 1
a47 1
	u_int i;
a51 11
dispatch_range(u_int from, u_int to, dispatch_fn *fn)
{
	u_int i;

	for (i = from; i <= to; i++) {
		if (i >= DISPATCH_MAX)
			break;
		dispatch[i] = fn;
	}
}
void
d60 1
a61 1
		u_int32_t seqnr;
d64 1
a64 1
			type = packet_read_seqnr(&seqnr);
d66 1
a66 1
			type = packet_read_poll_seqnr(&seqnr);
d71 1
a71 1
			(*dispatch[type])(type, seqnr, ctxt);
@


1.10
log
@typo, SSH2_MSG_KEXINIT, from aspa@@kronodoc.fi
@
text
@d25 1
a25 1
RCSID("$OpenBSD: dispatch.c,v 1.9 2001/02/04 15:32:23 stevesk Exp $");
d42 1
a42 3
	error("Hm, dispatch protocol error: type %d plen %d", type, plen);
	if (compat20 && type == SSH2_MSG_KEXINIT)
		fatal("dispatch_protocol_error: rekeying is not supported");
@


1.10.2.1
log
@Pull in OpenSSH-2.9.9
@
text
@d25 1
a25 1
RCSID("$OpenBSD: dispatch.c,v 1.11 2001/06/10 11:29:20 markus Exp $");
d42 3
a44 1
	fatal("dispatch_protocol_error: type %d plen %d", type, plen);
@


1.10.2.2
log
@Merge OpenSSH 3.1, keeping /etc as configuration files directory.
(i.e. OpenSSH 3.1 + openbsd29_3.1.patch)
@
text
@d25 1
a25 1
RCSID("$OpenBSD: dispatch.c,v 1.15 2002/01/11 13:39:36 markus Exp $");
d40 1
a40 1
dispatch_protocol_error(int type, u_int32_t seq, void *ctxt)
d42 1
a42 12
	log("dispatch_protocol_error: type %d seq %u", type, seq);
	if (!compat20)
		fatal("protocol error");
	packet_start(SSH2_MSG_UNIMPLEMENTED);
	packet_put_int(seq);
	packet_send();
	packet_write_wait();
}
void
dispatch_protocol_ignore(int type, u_int32_t seq, void *ctxt)
{
	log("dispatch_protocol_ignore: type %d seq %u", type, seq);
d47 1
a47 1
	u_int i;
a51 11
dispatch_range(u_int from, u_int to, dispatch_fn *fn)
{
	u_int i;

	for (i = from; i <= to; i++) {
		if (i >= DISPATCH_MAX)
			break;
		dispatch[i] = fn;
	}
}
void
d60 1
a61 1
		u_int32_t seqnr;
d64 1
a64 1
			type = packet_read_seqnr(&seqnr);
d66 1
a66 1
			type = packet_read_poll_seqnr(&seqnr);
d71 1
a71 1
			(*dispatch[type])(type, seqnr, ctxt);
@


1.9
log
@unexpand and remove end-of-line whitespace; ok markus@@
@
text
@d25 1
a25 1
RCSID("$OpenBSD: dispatch.c,v 1.8 2001/01/28 10:15:34 markus Exp $");
d43 1
a43 1
	if (compat20 && type == SSH2_MSG_KEXDH_INIT)
@


1.8
log
@re-keying is not supported; ok deraadt@@
@
text
@d25 1
a25 1
RCSID("$OpenBSD: dispatch.c,v 1.7 2001/01/21 19:05:49 markus Exp $");
d75 1
a75 1
			packet_disconnect("protocol error: rcvd type %d", type);	
@


1.7
log
@split ssh.h and try to cleanup the #include mess. remove unnecessary #includes.
rename util.[ch] -> misc.[ch]
@
text
@d25 1
a25 1
RCSID("$OpenBSD: dispatch.c,v 1.6 2001/01/19 15:55:11 markus Exp $");
d28 1
d32 1
d43 2
@


1.6
log
@move ssh1 definitions to ssh1.h, pathnames to pathnames.h
@
text
@d25 2
a26 2
RCSID("$OpenBSD: dispatch.c,v 1.5 2000/09/21 11:25:34 markus Exp $");
#include "ssh.h"
d28 1
@


1.5
log
@add context to dispatch_run
@
text
@d25 1
a25 1
RCSID("$OpenBSD: dispatch.c,v 1.4 2000/09/07 20:27:51 deraadt Exp $");
d27 1
@


1.5.2.1
log
@Pull in OpenSSH 2.5.0
@
text
@d25 2
a26 5
RCSID("$OpenBSD: dispatch.c,v 1.9 2001/02/04 15:32:23 stevesk Exp $");

#include "ssh1.h"
#include "ssh2.h"
#include "log.h"
a28 1
#include "compat.h"
a38 2
	if (compat20 && type == SSH2_MSG_KEXDH_INIT)
		fatal("dispatch_protocol_error: rekeying is not supported");
d69 1
a69 1
			packet_disconnect("protocol error: rcvd type %d", type);
@


1.5.2.2
log
@Pull in OpenSSH-2.5.1
@
text
@d25 1
a25 1
RCSID("$OpenBSD: dispatch.c,v 1.10 2001/02/18 18:33:53 markus Exp $");
d43 1
a43 1
	if (compat20 && type == SSH2_MSG_KEXINIT)
@


1.5.2.3
log
@Pull in OpenSSH-2.5.2 for 2.8 branch.
@
text
@@


1.5.2.4
log
@Pull in OpenSSH-2.9 to 2.8 branch.
@
text
@@


1.5.2.5
log
@Pull in OpenSSH 2.9.9 to the 2.8 branch.
@
text
@d25 1
a25 1
RCSID("$OpenBSD: dispatch.c,v 1.11 2001/06/10 11:29:20 markus Exp $");
d42 3
a44 1
	fatal("dispatch_protocol_error: type %d plen %d", type, plen);
@


1.5.2.6
log
@Merge OpenSSH 3.1.
@
text
@d25 1
a25 1
RCSID("$OpenBSD: dispatch.c,v 1.15 2002/01/11 13:39:36 markus Exp $");
d40 1
a40 1
dispatch_protocol_error(int type, u_int32_t seq, void *ctxt)
d42 1
a42 12
	log("dispatch_protocol_error: type %d seq %u", type, seq);
	if (!compat20)
		fatal("protocol error");
	packet_start(SSH2_MSG_UNIMPLEMENTED);
	packet_put_int(seq);
	packet_send();
	packet_write_wait();
}
void
dispatch_protocol_ignore(int type, u_int32_t seq, void *ctxt)
{
	log("dispatch_protocol_ignore: type %d seq %u", type, seq);
d47 1
a47 1
	u_int i;
a51 11
dispatch_range(u_int from, u_int to, dispatch_fn *fn)
{
	u_int i;

	for (i = from; i <= to; i++) {
		if (i >= DISPATCH_MAX)
			break;
		dispatch[i] = fn;
	}
}
void
d60 1
a61 1
		u_int32_t seqnr;
d64 1
a64 1
			type = packet_read_seqnr(&seqnr);
d66 1
a66 1
			type = packet_read_poll_seqnr(&seqnr);
d71 1
a71 1
			(*dispatch[type])(type, seqnr, ctxt);
@


1.4
log
@cleanup copyright notices on all files.  I have attempted to be accurate with
the details.  everything is now under Tatu's licence (which I copied from his
readme), and/or the core-sdi bsd-ish thing for deattack, or various openbsd
developers under a 2-term bsd licence.  We're not changing any rules, just
being accurate.
@
text
@d25 1
a25 1
RCSID("$OpenBSD: dispatch.c,v 1.3 2000/06/20 01:39:41 markus Exp $");
d36 1
a36 1
dispatch_protocol_error(int type, int plen)
d53 1
a53 1
dispatch_run(int mode, int *done)
d67 1
a67 1
			(*dispatch[type])(type, plen);
@


1.3
log
@OpenBSD tag
@
text
@a11 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Markus Friedl.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
d25 1
a25 1
RCSID("$OpenBSD: dispatch.c,v 1.2 2000/04/14 10:30:31 markus Exp $");
@


1.2
log
@whitespace cleanup
@
text
@d30 1
a30 1
RCSID("$Id: dispatch.c,v 1.1 2000/03/28 20:40:48 markus Exp $");
@


1.2.2.1
log
@Pull in the rest of openssh-2.2.0 to 2.7 branch (luvin' cvs...)
@
text
@d30 1
a30 1
RCSID("$OpenBSD: dispatch.c,v 1.3 2000/06/20 01:39:41 markus Exp $");
@


1.2.2.2
log
@openssh-2.3.0 (again) for 2.7 branch
@
text
@d12 5
d30 1
a30 1
RCSID("$OpenBSD: dispatch.c,v 1.5 2000/09/21 11:25:34 markus Exp $");
d41 1
a41 1
dispatch_protocol_error(int type, int plen, void *ctxt)
d58 1
a58 1
dispatch_run(int mode, int *done, void *ctxt)
d72 1
a72 1
			(*dispatch[type])(type, plen, ctxt);
@


1.2.2.3
log
@OpenSSH-2.5.1 for 2.7 patch branch
@
text
@d25 2
a26 5
RCSID("$OpenBSD: dispatch.c,v 1.10 2001/02/18 18:33:53 markus Exp $");

#include "ssh1.h"
#include "ssh2.h"
#include "log.h"
a28 1
#include "compat.h"
a38 2
	if (compat20 && type == SSH2_MSG_KEXINIT)
		fatal("dispatch_protocol_error: rekeying is not supported");
d69 1
a69 1
			packet_disconnect("protocol error: rcvd type %d", type);
@


1.2.2.4
log
@Pull in OpenSSH-2.5.2 for 2.7 branch.
@
text
@@


1.1
log
@function tables for different message types
@
text
@d30 1
a30 1
RCSID("$Id: dispatch.c,v 1.2 2000/02/24 14:16:23 markus Exp $");
d45 1
a45 1
void 
@

