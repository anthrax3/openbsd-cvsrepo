head	1.19;
access;
symbols
	OPENBSD_6_1:1.19.0.2
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.19.0.4
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.18.0.6
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.18.0.4
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.2
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.15.0.6
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.15.0.4
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.13.0.2
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.12.0.10
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.8
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.6
	OPENBSD_5_0:1.12.0.4
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.2
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.11.0.16
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.12
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.14
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.10
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.8
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.6
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.4
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.2
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.9.0.4
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.3.0.2
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.2.0.6
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.4
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.1.0.10
	OPENBSD_3_5_BASE:1.1
	OPENBSD_3_4:1.1.0.8
	OPENBSD_3_4_BASE:1.1
	OPENBSD_3_1:1.1.0.6
	OPENBSD_3_2:1.1.0.4
	OPENBSD_3_3:1.1.0.2
	OPENBSD_3_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.19
date	2016.05.02.10.26.04;	author djm;	state Exp;
branches;
next	1.18;
commitid	rVUG0L3JBpFl5b0k;

1.18
date	2015.01.26.06.10.03;	author djm;	state Exp;
branches;
next	1.17;
commitid	F603CYAZ9E536XCr;

1.17
date	2015.01.19.20.16.15;	author markus;	state Exp;
branches;
next	1.16;
commitid	U9l75XYAjMKaQ8Jp;

1.16
date	2015.01.19.19.52.16;	author markus;	state Exp;
branches;
next	1.15;
commitid	UHlhoIB5NMb8eAPm;

1.15
date	2014.02.02.03.44.31;	author djm;	state Exp;
branches;
next	1.14;

1.14
date	2014.01.12.08.13.13;	author djm;	state Exp;
branches;
next	1.13;

1.13
date	2013.05.17.00.13.13;	author djm;	state Exp;
branches;
next	1.12;

1.12
date	2010.11.10.01.33.07;	author djm;	state Exp;
branches;
next	1.11;

1.11
date	2006.11.06.21.25.28;	author markus;	state Exp;
branches;
next	1.10;

1.10
date	2006.10.31.16.33.12;	author markus;	state Exp;
branches;
next	1.9;

1.9
date	2006.08.03.03.34.42;	author deraadt;	state Exp;
branches
	1.9.4.1;
next	1.8;

1.8
date	2006.08.01.23.22.47;	author stevesk;	state Exp;
branches;
next	1.7;

1.7
date	2006.07.22.20.48.23;	author stevesk;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.18.21.27.25;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2006.03.25.13.17.02;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2006.03.19.18.51.18;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.04.05.15.59;	author djm;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2004.06.13.12.53.24;	author djm;	state Exp;
branches
	1.2.4.1
	1.2.6.1;
next	1.1;

1.1
date	2003.02.16.17.09.57;	author markus;	state Exp;
branches
	1.1.4.1
	1.1.6.1
	1.1.8.1
	1.1.10.1;
next	;

1.1.4.1
date	2003.04.01.10.38.57;	author margarida;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2003.09.16.21.20.26;	author brad;	state Exp;
branches;
next	;

1.1.6.1
date	2003.04.03.22.35.17;	author miod;	state Exp;
branches;
next	;

1.1.8.1
date	2004.08.19.22.37.31;	author brad;	state Exp;
branches;
next	;

1.1.10.1
date	2004.08.19.04.13.26;	author brad;	state Exp;
branches;
next	;

1.2.4.1
date	2006.02.03.02.53.44;	author brad;	state Exp;
branches;
next	;

1.2.6.1
date	2006.02.03.03.01.56;	author brad;	state Exp;
branches;
next	1.2.6.2;

1.2.6.2
date	2006.10.06.03.19.32;	author brad;	state Exp;
branches;
next	1.2.6.3;

1.2.6.3
date	2006.11.08.00.44.05;	author brad;	state Exp;
branches;
next	;

1.3.2.1
date	2006.09.30.04.06.50;	author brad;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2006.11.08.00.17.14;	author brad;	state Exp;
branches;
next	;

1.9.4.1
date	2006.11.08.00.42.10;	author brad;	state Exp;
branches;
next	;


desc
@@


1.19
log
@add support for additional fixed DH groups from
draft-ietf-curdle-ssh-kex-sha2-03

diffie-hellman-group14-sha256 (2K group)
diffie-hellman-group16-sha512 (4K group)
diffie-hellman-group18-sha512 (8K group)

based on patch from Mark D. Baushke and Darren Tucker
ok markus@@
@
text
@/* $OpenBSD: kexdhc.c,v 1.18 2015/01/26 06:10:03 djm Exp $ */
/*
 * Copyright (c) 2001 Markus Friedl.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>

#include <openssl/dh.h>

#include <stdio.h>
#include <string.h>
#include <signal.h>

#include "sshkey.h"
#include "cipher.h"
#include "digest.h"
#include "kex.h"
#include "log.h"
#include "packet.h"
#include "dh.h"
#include "ssh2.h"
#include "dispatch.h"
#include "compat.h"
#include "ssherr.h"
#include "sshbuf.h"

static int input_kex_dh(int, u_int32_t, void *);

int
kexdh_client(struct ssh *ssh)
{
	struct kex *kex = ssh->kex;
	int r;

	/* generate and send 'e', client DH public key */
	switch (kex->kex_type) {
	case KEX_DH_GRP1_SHA1:
		kex->dh = dh_new_group1();
		break;
	case KEX_DH_GRP14_SHA1:
	case KEX_DH_GRP14_SHA256:
		kex->dh = dh_new_group14();
		break;
	case KEX_DH_GRP16_SHA512:
		kex->dh = dh_new_group16();
		break;
	case KEX_DH_GRP18_SHA512:
		kex->dh = dh_new_group18();
		break;
	default:
		r = SSH_ERR_INVALID_ARGUMENT;
		goto out;
	}
	if (kex->dh == NULL) {
		r = SSH_ERR_ALLOC_FAIL;
		goto out;
	}
	debug("sending SSH2_MSG_KEXDH_INIT");
	if ((r = dh_gen_key(kex->dh, kex->we_need * 8)) != 0 ||
	    (r = sshpkt_start(ssh, SSH2_MSG_KEXDH_INIT)) != 0 ||
	    (r = sshpkt_put_bignum2(ssh, kex->dh->pub_key)) != 0 ||
	    (r = sshpkt_send(ssh)) != 0)
		goto out;
#ifdef DEBUG_KEXDH
	DHparams_print_fp(stderr, kex->dh);
	fprintf(stderr, "pub= ");
	BN_print_fp(stderr, kex->dh->pub_key);
	fprintf(stderr, "\n");
#endif
	debug("expecting SSH2_MSG_KEXDH_REPLY");
	ssh_dispatch_set(ssh, SSH2_MSG_KEXDH_REPLY, &input_kex_dh);
	r = 0;
 out:
	return r;
}

static int
input_kex_dh(int type, u_int32_t seq, void *ctxt)
{
	struct ssh *ssh = ctxt;
	struct kex *kex = ssh->kex;
	BIGNUM *dh_server_pub = NULL, *shared_secret = NULL;
	struct sshkey *server_host_key = NULL;
	u_char *kbuf = NULL, *server_host_key_blob = NULL, *signature = NULL;
	u_char hash[SSH_DIGEST_MAX_LENGTH];
	size_t klen = 0, slen, sbloblen, hashlen;
	int kout, r;

	if (kex->verify_host_key == NULL) {
		r = SSH_ERR_INVALID_ARGUMENT;
		goto out;
	}
	/* key, cert */
	if ((r = sshpkt_get_string(ssh, &server_host_key_blob,
	    &sbloblen)) != 0 ||
	    (r = sshkey_from_blob(server_host_key_blob, sbloblen,
	    &server_host_key)) != 0)
		goto out;
	if (server_host_key->type != kex->hostkey_type ||
	    (kex->hostkey_type == KEY_ECDSA &&
	    server_host_key->ecdsa_nid != kex->hostkey_nid)) {
		r = SSH_ERR_KEY_TYPE_MISMATCH;
		goto out;
	}
	if (kex->verify_host_key(server_host_key, ssh) == -1) {
		r = SSH_ERR_SIGNATURE_INVALID;
		goto out;
	}
	/* DH parameter f, server public DH key */
	if ((dh_server_pub = BN_new()) == NULL) {
		r = SSH_ERR_ALLOC_FAIL;
		goto out;
	}
	/* signed H */
	if ((r = sshpkt_get_bignum2(ssh, dh_server_pub)) != 0 ||
	    (r = sshpkt_get_string(ssh, &signature, &slen)) != 0 ||
	    (r = sshpkt_get_end(ssh)) != 0)
		goto out;
#ifdef DEBUG_KEXDH
	fprintf(stderr, "dh_server_pub= ");
	BN_print_fp(stderr, dh_server_pub);
	fprintf(stderr, "\n");
	debug("bits %d", BN_num_bits(dh_server_pub));
#endif
	if (!dh_pub_is_valid(kex->dh, dh_server_pub)) {
		sshpkt_disconnect(ssh, "bad server public DH value");
		r = SSH_ERR_MESSAGE_INCOMPLETE;
		goto out;
	}

	klen = DH_size(kex->dh);
	if ((kbuf = malloc(klen)) == NULL ||
	    (shared_secret = BN_new()) == NULL) {
		r = SSH_ERR_ALLOC_FAIL;
		goto out;
	}
	if ((kout = DH_compute_key(kbuf, dh_server_pub, kex->dh)) < 0 ||
	    BN_bin2bn(kbuf, kout, shared_secret) == NULL) {
		r = SSH_ERR_LIBCRYPTO_ERROR;
		goto out;
	}
#ifdef DEBUG_KEXDH
	dump_digest("shared secret", kbuf, kout);
#endif

	/* calc and verify H */
	hashlen = sizeof(hash);
	if ((r = kex_dh_hash(
	    kex->hash_alg,
	    kex->client_version_string,
	    kex->server_version_string,
	    sshbuf_ptr(kex->my), sshbuf_len(kex->my),
	    sshbuf_ptr(kex->peer), sshbuf_len(kex->peer),
	    server_host_key_blob, sbloblen,
	    kex->dh->pub_key,
	    dh_server_pub,
	    shared_secret,
	    hash, &hashlen)) != 0)
		goto out;

	if ((r = sshkey_verify(server_host_key, signature, slen, hash, hashlen,
	    ssh->compat)) != 0)
		goto out;

	/* save session id */
	if (kex->session_id == NULL) {
		kex->session_id_len = hashlen;
		kex->session_id = malloc(kex->session_id_len);
		if (kex->session_id == NULL) {
			r = SSH_ERR_ALLOC_FAIL;
			goto out;
		}
		memcpy(kex->session_id, hash, kex->session_id_len);
	}

	if ((r = kex_derive_keys_bn(ssh, hash, hashlen, shared_secret)) == 0)
		r = kex_send_newkeys(ssh);
 out:
	explicit_bzero(hash, sizeof(hash));
	DH_free(kex->dh);
	kex->dh = NULL;
	if (dh_server_pub)
		BN_clear_free(dh_server_pub);
	if (kbuf) {
		explicit_bzero(kbuf, klen);
		free(kbuf);
	}
	if (shared_secret)
		BN_clear_free(shared_secret);
	sshkey_free(server_host_key);
	free(server_host_key_blob);
	free(signature);
	return r;
}
@


1.18
log
@correctly match ECDSA subtype (== curve) for offered/recevied
host keys. Fixes connection-killing host key mismatches when
a server offers multiple ECDSA keys with different curve type
(an extremely unlikely configuration).

ok markus, "looks mechanical" deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: kexdhc.c,v 1.17 2015/01/19 20:16:15 markus Exp $ */
d61 1
d64 6
d169 1
@


1.17
log
@adapt kex to sshbuf and struct ssh; ok djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: kexdhc.c,v 1.16 2015/01/19 19:52:16 markus Exp $ */
d112 3
a114 1
	if (server_host_key->type != kex->hostkey_type) {
@


1.16
log
@update packet.c & isolate, introduce struct ssh
a) switch packet.c to buffer api and isolate per-connection info into struct ssh
b) (de)serialization of the state is moved from monitor to packet.c
c) the old packet.c API is implemented in opacket.[ch]
d) compress.c/h is removed and integrated into packet.c
with and ok djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: kexdhc.c,v 1.15 2014/02/02 03:44:31 djm Exp $ */
d34 1
a34 3
#include "xmalloc.h"
#include "buffer.h"
#include "key.h"
d36 1
d42 4
d47 4
a50 2
void
kexdh_client(Kex *kex)
d52 2
a53 7
	BIGNUM *dh_server_pub = NULL, *shared_secret = NULL;
	DH *dh;
	Key *server_host_key;
	u_char *server_host_key_blob = NULL, *signature = NULL;
	u_char *kbuf, *hash;
	u_int klen, slen, sbloblen, hashlen;
	int kout;
d58 1
a58 1
		dh = dh_new_group1();
d61 1
a61 1
		dh = dh_new_group14();
d64 6
a69 1
		fatal("%s: Unexpected KEX type %d", __func__, kex->kex_type);
a70 5
	dh_gen_key(dh, kex->we_need * 8);
	packet_start(SSH2_MSG_KEXDH_INIT);
	packet_put_bignum2(dh->pub_key);
	packet_send();

d72 5
d78 1
a78 1
	DHparams_print_fp(stderr, dh);
d80 1
a80 1
	BN_print_fp(stderr, dh->pub_key);
a82 1

d84 5
a88 1
	packet_read_expect(SSH2_MSG_KEXDH_REPLY);
d90 16
d107 13
a119 11
	server_host_key_blob = packet_get_string(&sbloblen);
	server_host_key = key_from_blob(server_host_key_blob, sbloblen);
	if (server_host_key == NULL)
		fatal("cannot decode server_host_key_blob");
	if (server_host_key->type != kex->hostkey_type)
		fatal("type mismatch for decoded server_host_key_blob");
	if (kex->verify_host_key == NULL)
		fatal("cannot verify server_host_key");
	if (kex->verify_host_key(server_host_key) == -1)
		fatal("server_host_key verification failed");

d121 9
a129 4
	if ((dh_server_pub = BN_new()) == NULL)
		fatal("dh_server_pub == NULL");
	packet_get_bignum2(dh_server_pub);

d136 5
d142 11
a152 11
	/* signed H */
	signature = packet_get_string(&slen);
	packet_check_eom();

	if (!dh_pub_is_valid(dh, dh_server_pub))
		packet_disconnect("bad server public DH value");

	klen = DH_size(dh);
	kbuf = xmalloc(klen);
	if ((kout = DH_compute_key(kbuf, dh_server_pub, dh)) < 0)
		fatal("DH_compute_key: failed");
a155 6
	if ((shared_secret = BN_new()) == NULL)
		fatal("kexdh_client: BN_new failed");
	if (BN_bin2bn(kbuf, kout, shared_secret) == NULL)
		fatal("kexdh_client: BN_bin2bn failed");
	explicit_bzero(kbuf, klen);
	free(kbuf);
d158 2
a159 1
	kex_dh_hash(
d162 2
a163 2
	    buffer_ptr(kex->my), buffer_len(kex->my),
	    buffer_ptr(kex->peer), buffer_len(kex->peer),
d165 1
a165 1
	    dh->pub_key,
d168 2
a169 5
	    &hash, &hashlen
	);
	free(server_host_key_blob);
	BN_clear_free(dh_server_pub);
	DH_free(dh);
d171 3
a173 4
	if (key_verify(server_host_key, signature, slen, hash, hashlen) != 1)
		fatal("key_verify failed for server_host_key");
	key_free(server_host_key);
	free(signature);
d178 5
a182 1
		kex->session_id = xmalloc(kex->session_id_len);
d186 18
a203 3
	kex_derive_keys_bn(kex, hash, hashlen, shared_secret);
	BN_clear_free(shared_secret);
	kex_finish(kex);
@


1.15
log
@convert memset of potentially-private data to explicit_bzero()
@
text
@d1 1
a1 1
/* $OpenBSD: kexdhc.c,v 1.14 2014/01/12 08:13:13 djm Exp $ */
d131 2
a132 2
	    buffer_ptr(&kex->my), buffer_len(&kex->my),
	    buffer_ptr(&kex->peer), buffer_len(&kex->peer),
@


1.14
log
@avoid use of OpenSSL BIGNUM type and functions for KEX with
Curve25519 by adding a buffer_put_bignum2_from_string() that stores
a string using the bignum encoding rules. Will make it easier to
build a reduced-feature OpenSSH without OpenSSL in the future;
ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: kexdhc.c,v 1.13 2013/05/17 00:13:13 djm Exp $ */
d124 1
a124 1
	memset(kbuf, 0, klen);
@


1.13
log
@bye, bye xfree(); ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: kexdhc.c,v 1.12 2010/11/10 01:33:07 djm Exp $ */
d155 1
a155 1
	kex_derive_keys(kex, hash, hashlen, shared_secret);
@


1.12
log
@use only libcrypto APIs that are retained with OPENSSL_NO_DEPRECATED.
these have been around for years by this time. ok markus
@
text
@d1 1
a1 1
/* $OpenBSD: kexdhc.c,v 1.11 2006/11/06 21:25:28 markus Exp $ */
d125 1
a125 1
	xfree(kbuf);
d139 1
a139 1
	xfree(server_host_key_blob);
d146 1
a146 1
	xfree(signature);
@


1.11
log
@add missing checks for openssl return codes; with & ok djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: kexdhc.c,v 1.10 2006/10/31 16:33:12 markus Exp $ */
d27 2
@


1.10
log
@check DH_compute_key() for -1 even if it should not happen because of
earlier calls to dh_pub_is_valid(); report krahmer at suse.de; ok djm
@
text
@d1 1
a1 1
/* $OpenBSD: kexdhc.c,v 1.9 2006/08/03 03:34:42 deraadt Exp $ */
d120 2
a121 1
	BN_bin2bn(kbuf, kout, shared_secret);
@


1.9
log
@almost entirely get rid of the culture of ".h files that include .h files"
ok djm, sort of ok stevesk
makes the pain stop in one easy step
@
text
@d1 1
a1 1
/* $OpenBSD: kexdhc.c,v 1.8 2006/08/01 23:22:47 stevesk Exp $ */
d50 2
a51 1
	u_int klen, kout, slen, sbloblen, hashlen;
d113 2
a114 1
	kout = DH_compute_key(kbuf, dh_server_pub, dh);
@


1.9.4.1
log
@upgrade to OpenSSH 4.5
@
text
@d1 1
a1 1
/* $OpenBSD: kexdhc.c,v 1.11 2006/11/06 21:25:28 markus Exp $ */
d50 1
a50 2
	u_int klen, slen, sbloblen, hashlen;
	int kout;
d112 1
a112 2
	if ((kout = DH_compute_key(kbuf, dh_server_pub, dh)) < 0)
		fatal("DH_compute_key: failed");
d118 1
a118 2
	if (BN_bin2bn(kbuf, kout, shared_secret) == NULL)
		fatal("kexdh_client: BN_bin2bn failed");
@


1.8
log
@move #include <stdio.h> out of includes.h
@
text
@d1 1
a1 1
/* $OpenBSD: kexdhc.c,v 1.7 2006/07/22 20:48:23 stevesk Exp $ */
d26 1
a26 1
#include "includes.h"
d30 1
d33 1
d35 1
@


1.7
log
@move #include <string.h> out of includes.h
@
text
@d1 1
a1 1
/* $OpenBSD: kexdhc.c,v 1.6 2006/05/18 21:27:25 miod Exp $ */
d28 1
@


1.6
log
@paramter -> parameter
@
text
@d1 1
a1 1
/* $OpenBSD: kexdhc.c,v 1.5 2006/03/25 13:17:02 djm Exp $ */
d27 2
@


1.5
log
@Put $OpenBSD$ tags back (as comments) to replace the RCSID()s that
Theo nuked - our scripts to sync -portable need them in the files
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d85 1
a85 1
	/* DH paramter f, server public DH key */
@


1.4
log
@RCSID() can die
@
text
@d1 1
@


1.3
log
@remove hardcoded hash lengths in key exchange code, allowing
implementation of KEX methods with different hashes (e.g. SHA-256);
ok markus@@ dtucker@@ stevesk@@
@
text
@a25 1
RCSID("$OpenBSD: kexdhc.c,v 1.2 2004/06/13 12:53:24 djm Exp $");
@


1.3.2.1
log
@upgrade to OpenSSH 4.4
@
text
@a0 1
/* $OpenBSD: kexdhc.c,v 1.9 2006/08/03 03:34:42 deraadt Exp $ */
d25 2
a26 5
#include <sys/types.h>

#include <stdio.h>
#include <string.h>
#include <signal.h>
a28 1
#include "buffer.h"
a29 1
#include "cipher.h"
d85 1
a85 1
	/* DH parameter f, server public DH key */
@


1.3.2.2
log
@upgrade to OpenSSH 4.5
@
text
@d1 1
a1 1
/* $OpenBSD: kexdhc.c,v 1.11 2006/11/06 21:25:28 markus Exp $ */
d50 1
a50 2
	u_int klen, slen, sbloblen, hashlen;
	int kout;
d112 1
a112 2
	if ((kout = DH_compute_key(kbuf, dh_server_pub, dh)) < 0)
		fatal("DH_compute_key: failed");
d118 1
a118 2
	if (BN_bin2bn(kbuf, kout, shared_secret) == NULL)
		fatal("kexdh_client: BN_bin2bn failed");
@


1.2
log
@implement diffie-hellman-group14-sha1 kex method (trivial extension to
existing diffie-hellman-group1-sha1); ok markus@@
@
text
@d26 1
a26 1
RCSID("$OpenBSD: kexdhc.c,v 1.1 2003/02/16 17:09:57 markus Exp $");
d44 1
a44 1
	u_int klen, kout, slen, sbloblen;
d117 1
a117 1
	hash = kex_dh_hash(
d125 2
a126 1
	    shared_secret
d132 1
a132 1
	if (key_verify(server_host_key, signature, slen, hash, 20) != 1)
d139 1
a139 1
		kex->session_id_len = 20;
d144 1
a144 1
	kex_derive_keys(kex, hash, shared_secret);
@


1.2.6.1
log
@upgrade to OpenSSH 4.3
@
text
@d26 1
a26 1
RCSID("$OpenBSD: kexdhc.c,v 1.3 2005/11/04 05:15:59 djm Exp $");
d44 1
a44 1
	u_int klen, kout, slen, sbloblen, hashlen;
d117 1
a117 1
	kex_dh_hash(
d125 1
a125 2
	    shared_secret,
	    &hash, &hashlen
d131 1
a131 1
	if (key_verify(server_host_key, signature, slen, hash, hashlen) != 1)
d138 1
a138 1
		kex->session_id_len = hashlen;
d143 1
a143 1
	kex_derive_keys(kex, hash, hashlen, shared_secret);
@


1.2.6.2
log
@upgrade to OpenSSH 4.4
@
text
@a0 1
/* $OpenBSD: kexdhc.c,v 1.9 2006/08/03 03:34:42 deraadt Exp $ */
d25 2
a26 5
#include <sys/types.h>

#include <stdio.h>
#include <string.h>
#include <signal.h>
a28 1
#include "buffer.h"
a29 1
#include "cipher.h"
d85 1
a85 1
	/* DH parameter f, server public DH key */
@


1.2.6.3
log
@upgrade to OpenSSH 4.5
@
text
@d1 1
a1 1
/* $OpenBSD: kexdhc.c,v 1.11 2006/11/06 21:25:28 markus Exp $ */
d50 1
a50 2
	u_int klen, slen, sbloblen, hashlen;
	int kout;
d112 1
a112 2
	if ((kout = DH_compute_key(kbuf, dh_server_pub, dh)) < 0)
		fatal("DH_compute_key: failed");
d118 1
a118 2
	if (BN_bin2bn(kbuf, kout, shared_secret) == NULL)
		fatal("kexdh_client: BN_bin2bn failed");
@


1.2.4.1
log
@upgrade to OpenSSH 4.3
@
text
@d26 1
a26 1
RCSID("$OpenBSD: kexdhc.c,v 1.3 2005/11/04 05:15:59 djm Exp $");
d44 1
a44 1
	u_int klen, kout, slen, sbloblen, hashlen;
d117 1
a117 1
	kex_dh_hash(
d125 1
a125 2
	    shared_secret,
	    &hash, &hashlen
d131 1
a131 1
	if (key_verify(server_host_key, signature, slen, hash, hashlen) != 1)
d138 1
a138 1
		kex->session_id_len = hashlen;
d143 1
a143 1
	kex_derive_keys(kex, hash, hashlen, shared_secret);
@


1.1
log
@split kex into client and server code, no need to link
server code into the client; ok provos@@
@
text
@d26 1
a26 1
RCSID("$OpenBSD: kexdh.c,v 1.18 2002/03/18 17:50:31 provos Exp $");
d47 10
a56 1
	dh = dh_new_group1();
@


1.1.8.1
log
@upgrade to OpenSSH 3.9
@
text
@d26 1
a26 1
RCSID("$OpenBSD: kexdhc.c,v 1.2 2004/06/13 12:53:24 djm Exp $");
d47 1
a47 10
	switch (kex->kex_type) {
	case KEX_DH_GRP1_SHA1:
		dh = dh_new_group1();
		break;
	case KEX_DH_GRP14_SHA1:
		dh = dh_new_group14();
		break;
	default:
		fatal("%s: Unexpected KEX type %d", __func__, kex->kex_type);
	}
@


1.1.10.1
log
@upgrade to OpenSSH 3.9
@
text
@d26 1
a26 1
RCSID("$OpenBSD: kexdhc.c,v 1.2 2004/06/13 12:53:24 djm Exp $");
d47 1
a47 10
	switch (kex->kex_type) {
	case KEX_DH_GRP1_SHA1:
		dh = dh_new_group1();
		break;
	case KEX_DH_GRP14_SHA1:
		dh = dh_new_group14();
		break;
	default:
		fatal("%s: Unexpected KEX type %d", __func__, kex->kex_type);
	}
@


1.1.6.1
log
@Merge OpenSSH 3.6.1
@
text
@d26 1
a26 1
RCSID("$OpenBSD: kexdhc.c,v 1.1 2003/02/16 17:09:57 markus Exp $");
@


1.1.4.1
log
@These were missed on the update to the last openssh.

Thanks to all who pointed it out.
@
text
@d26 1
a26 1
RCSID("$OpenBSD: kexdhc.c,v 1.1 2003/02/16 17:09:57 markus Exp $");
@


1.1.4.2
log
@upgrade to OpenSSH 3.7
@
text
@@


