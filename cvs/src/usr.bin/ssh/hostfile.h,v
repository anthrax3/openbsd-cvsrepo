head	1.24;
access;
symbols
	OPENBSD_6_1:1.24.0.12
	OPENBSD_6_1_BASE:1.24
	OPENBSD_6_0:1.24.0.10
	OPENBSD_6_0_BASE:1.24
	OPENBSD_5_9:1.24.0.6
	OPENBSD_5_9_BASE:1.24
	OPENBSD_5_8:1.24.0.4
	OPENBSD_5_8_BASE:1.24
	OPENBSD_5_7:1.24.0.2
	OPENBSD_5_7_BASE:1.24
	OPENBSD_5_6:1.20.0.8
	OPENBSD_5_6_BASE:1.20
	OPENBSD_5_5:1.20.0.6
	OPENBSD_5_5_BASE:1.20
	OPENBSD_5_4:1.20.0.2
	OPENBSD_5_4_BASE:1.20
	OPENBSD_5_3:1.19.0.10
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.19.0.8
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.19
	OPENBSD_5_1:1.19.0.6
	OPENBSD_5_0:1.19.0.4
	OPENBSD_5_0_BASE:1.19
	OPENBSD_4_9:1.19.0.2
	OPENBSD_4_9_BASE:1.19
	OPENBSD_4_8:1.18.0.4
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.18.0.2
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.16.0.16
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.12
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.10
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.8
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.16.0.6
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.16.0.2
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.16.0.4
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.15.0.6
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.15.0.4
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.15.0.2
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.14.0.4
	OPENBSD_3_6_BASE:1.14
	OPENBSD_3_5:1.14.0.2
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.13.0.4
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.13.0.2
	OPENBSD_3_3_BASE:1.13
	OPENBSD_3_2:1.12.0.2
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.9.0.2
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.2
	OPENBSD_2_8:1.4.0.2
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2;
locks; strict;
comment	@ * @;


1.24
date	2015.02.16.22.08.57;	author djm;	state Exp;
branches;
next	1.23;
commitid	iBG3mh48h4UsmNe0;

1.23
date	2015.01.26.03.04.45;	author djm;	state Exp;
branches;
next	1.22;
commitid	Xp9DfQmHQHbZ815k;

1.22
date	2015.01.18.21.40.24;	author djm;	state Exp;
branches;
next	1.21;
commitid	kf1j4R9wpxfflwLe;

1.21
date	2015.01.15.09.40.00;	author djm;	state Exp;
branches;
next	1.20;
commitid	akRUKeZEbb3ylbKG;

1.20
date	2013.07.12.00.19.58;	author djm;	state Exp;
branches;
next	1.19;

1.19
date	2010.11.29.23.45.51;	author djm;	state Exp;
branches;
next	1.18;

1.18
date	2010.03.04.10.36.03;	author djm;	state Exp;
branches;
next	1.17;

1.17
date	2010.02.26.20.29.54;	author djm;	state Exp;
branches;
next	1.16;

1.16
date	2006.03.25.22.22.43;	author djm;	state Exp;
branches;
next	1.15;

1.15
date	2005.03.01.10.40.26;	author djm;	state Exp;
branches
	1.15.4.1
	1.15.6.1;
next	1.14;

1.14
date	2003.11.10.16.23.41;	author jakob;	state Exp;
branches
	1.14.2.1
	1.14.4.1;
next	1.13;

1.13
date	2002.11.21.23.03.51;	author deraadt;	state Exp;
branches
	1.13.2.1
	1.13.4.1;
next	1.12;

1.12
date	2002.09.08.20.24.08;	author markus;	state Exp;
branches
	1.12.2.1;
next	1.11;

1.11
date	2002.07.24.16.11.18;	author markus;	state Exp;
branches;
next	1.10;

1.10
date	2001.12.18.10.04.21;	author jakob;	state Exp;
branches
	1.10.2.1;
next	1.9;

1.9
date	2001.06.26.17.27.23;	author markus;	state Exp;
branches
	1.9.2.1;
next	1.8;

1.8
date	2001.06.26.06.32.53;	author itojun;	state Exp;
branches;
next	1.7;

1.7
date	2001.02.08.19.30.51;	author itojun;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2001.01.29.01.58.16;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.21.15.10.17;	author markus;	state Exp;
branches;
next	1.4;

1.4
date	2000.09.07.21.13.37;	author markus;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2000.09.07.20.27.51;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.14.10.30.31;	author markus;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2000.03.23.22.15.33;	author markus;	state Exp;
branches;
next	;

1.2.2.1
date	2000.11.08.21.30.49;	author jason;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2001.03.12.15.44.10;	author jason;	state Exp;
branches;
next	1.2.2.3;

1.2.2.3
date	2001.03.21.18.52.46;	author jason;	state Exp;
branches;
next	;

1.4.2.1
date	2001.02.16.20.13.03;	author jason;	state Exp;
branches;
next	1.4.2.2;

1.4.2.2
date	2001.02.19.17.18.58;	author jason;	state Exp;
branches;
next	1.4.2.3;

1.4.2.3
date	2001.03.21.19.46.25;	author jason;	state Exp;
branches;
next	1.4.2.4;

1.4.2.4
date	2001.05.07.21.09.30;	author jason;	state Exp;
branches;
next	1.4.2.5;

1.4.2.5
date	2001.09.27.00.15.42;	author miod;	state Exp;
branches;
next	1.4.2.6;

1.4.2.6
date	2002.03.08.17.04.42;	author brad;	state Exp;
branches;
next	;

1.7.2.1
date	2001.09.27.19.03.54;	author jason;	state Exp;
branches;
next	1.7.2.2;

1.7.2.2
date	2002.03.09.00.20.44;	author miod;	state Exp;
branches;
next	;

1.9.2.1
date	2002.03.07.17.37.46;	author jason;	state Exp;
branches;
next	1.9.2.2;

1.9.2.2
date	2002.10.11.14.53.06;	author miod;	state Exp;
branches;
next	;

1.10.2.1
date	2002.10.11.14.51.52;	author miod;	state Exp;
branches;
next	1.10.2.2;

1.10.2.2
date	2003.04.03.22.35.17;	author miod;	state Exp;
branches;
next	;

1.12.2.1
date	2003.04.01.00.12.13;	author margarida;	state Exp;
branches;
next	1.12.2.2;

1.12.2.2
date	2003.09.16.21.20.25;	author brad;	state Exp;
branches;
next	;

1.13.2.1
date	2004.03.04.18.18.15;	author brad;	state Exp;
branches;
next	;

1.13.4.1
date	2004.02.28.03.51.33;	author brad;	state Exp;
branches;
next	;

1.14.2.1
date	2005.03.10.17.15.04;	author brad;	state Exp;
branches;
next	;

1.14.4.1
date	2005.03.10.16.28.27;	author brad;	state Exp;
branches;
next	;

1.15.4.1
date	2006.10.06.03.19.32;	author brad;	state Exp;
branches;
next	;

1.15.6.1
date	2006.09.30.04.06.50;	author brad;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Refactor hostkeys_foreach() and dependent code
Deal with IP addresses (i.e. CheckHostIP)
Don't clobber known_hosts when nothing changed
ok markus@@ as part of larger commit
@
text
@/* $OpenBSD: hostfile.h,v 1.23 2015/01/26 03:04:45 djm Exp $ */

/*
 * Author: Tatu Ylonen <ylo@@cs.hut.fi>
 * Copyright (c) 1995 Tatu Ylonen <ylo@@cs.hut.fi>, Espoo, Finland
 *                    All rights reserved
 *
 * As far as I am concerned, the code I have written for this software
 * can be used freely for any purpose.  Any derived versions of this
 * software must be clearly marked as such, and if the derived work is
 * incompatible with the protocol description in the RFC file, it must be
 * called by a name other than "ssh" or "Secure Shell".
 */
#ifndef HOSTFILE_H
#define HOSTFILE_H

typedef enum {
	HOST_OK, HOST_NEW, HOST_CHANGED, HOST_REVOKED, HOST_FOUND
}       HostStatus;

typedef enum {
	MRK_ERROR, MRK_NONE, MRK_REVOKE, MRK_CA
}	HostkeyMarker;

struct hostkey_entry {
	char *host;
	char *file;
	u_long line;
	struct sshkey *key;
	HostkeyMarker marker;
};
struct hostkeys;

struct hostkeys *init_hostkeys(void);
void	 load_hostkeys(struct hostkeys *, const char *, const char *);
void	 free_hostkeys(struct hostkeys *);

HostStatus check_key_in_hostkeys(struct hostkeys *, struct sshkey *,
    const struct hostkey_entry **);
int	 lookup_key_in_hostkeys_by_type(struct hostkeys *, int,
    const struct hostkey_entry **);

int	 hostfile_read_key(char **, u_int *, struct sshkey *);
int	 add_host_to_hostfile(const char *, const char *,
    const struct sshkey *, int);

int	 hostfile_replace_entries(const char *filename,
    const char *host, const char *ip, struct sshkey **keys, size_t nkeys,
    int store_hash, int quiet, int hash_alg);

#define HASH_MAGIC	"|1|"
#define HASH_DELIM	'|'

#define CA_MARKER	"@@cert-authority"
#define REVOKE_MARKER	"@@revoked"

char	*host_hash(const char *, const char *, u_int);

/*
 * Iterate through a hostkeys file, optionally parsing keys and matching
 * hostnames. Allows access to the raw keyfile lines to allow
 * streaming edits to the file to take place.
 */
#define HKF_WANT_MATCH		(1)	/* return only matching hosts/addrs */
#define HKF_WANT_PARSE_KEY	(1<<1)	/* need key parsed */

#define HKF_STATUS_OK		0	/* Line parsed, didn't match host */
#define HKF_STATUS_INVALID	1	/* line had parse error */
#define HKF_STATUS_COMMENT	2	/* valid line contained no key */
#define HKF_STATUS_MATCHED	3	/* hostname or IP matched */

#define HKF_MATCH_HOST		(1)	/* hostname matched */
#define HKF_MATCH_IP		(1<<1)	/* address matched */
#define HKF_MATCH_HOST_HASHED	(1<<2)	/* hostname was hashed */
#define HKF_MATCH_IP_HASHED	(1<<3)	/* address was hashed */
/* XXX HKF_MATCH_KEY_TYPE? */

/*
 * The callback function receives this as an argument for each matching 
 * hostkey line. The callback may "steal" the 'key' field by setting it to NULL.
 * If a parse error occurred, then "hosts" and subsequent options may be NULL.
 */
struct hostkey_foreach_line {
	const char *path; /* Path of file */
	u_long linenum;	/* Line number */
	u_int status;	/* One of HKF_STATUS_* */
	u_int match;	/* Zero or more of HKF_MATCH_* OR'd together */
	char *line;	/* Entire key line; mutable by callback */
	int marker;	/* CA/revocation markers; indicated by MRK_* value */
	const char *hosts; /* Raw hosts text, may be hashed or list multiple */
	const char *rawkey; /* Text of key and any comment following it */
	int keytype;	/* Type of key; KEY_UNSPEC for invalid/comment lines */
	struct sshkey *key; /* Key, if parsed ok and HKF_WANT_MATCH_HOST set */
	const char *comment; /* Any comment following the key */
};

/*
 * Callback fires for each line (or matching line if a HKF_WANT_* option
 * is set). The foreach loop will terminate if the callback returns a non-
 * zero exit status.
 */
typedef int hostkeys_foreach_fn(struct hostkey_foreach_line *l, void *ctx);

/* Iterate over a hostkeys file */
int hostkeys_foreach(const char *path, hostkeys_foreach_fn *callback, void *ctx,
    const char *host, const char *ip, u_int options);

#endif
@


1.23
log
@Host key rotation support.

Add a hostkeys@@openssh.com protocol extension (global request) for
a server to inform a client of all its available host key after
authentication has completed. The client may record the keys in
known_hosts, allowing it to upgrade to better host key algorithms
and a server to gracefully rotate its keys.

The client side of this is controlled by a UpdateHostkeys config
option (default on).

ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: hostfile.h,v 1.22 2015/01/18 21:40:24 djm Exp $ */
d47 3
a49 2
int	 hostfile_replace_entries(const char *filename, const char *host,
    struct sshkey **keys, size_t nkeys, int store_hash, int quiet);
d64 1
a64 1
#define HKF_WANT_MATCH_HOST	(1)	/* return only matching hosts */
d67 10
a76 4
#define HKF_STATUS_OK		1	/* Line parsed, didn't match host */
#define HKF_STATUS_INVALID	2	/* line had parse error */
#define HKF_STATUS_COMMENT	3	/* valid line contained no key */
#define HKF_STATUS_HOST_MATCHED	4	/* hostname matched */
d86 2
a87 1
	int status;	/* One of HKF_STATUS_* */
a90 1
	int was_hashed;	/* Non-zero if hostname was hashed */
d92 1
d104 1
d106 1
a106 1
    const char *host, u_int options);
@


1.22
log
@introduce hostkeys_foreach() to allow iteration over a
known_hosts file or controlled subset thereof. This will
allow us to pull out some ugly and duplicated code, and
will be used to implement hostkey rotation later.

feedback and ok markus
@
text
@d1 1
a1 1
/* $OpenBSD: hostfile.h,v 1.21 2015/01/15 09:40:00 djm Exp $ */
d46 3
@


1.21
log
@sync ssh-keysign, ssh-keygen and some dependencies to the new
buffer/key API; mostly mechanical, ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: hostfile.h,v 1.20 2013/07/12 00:19:58 djm Exp $ */
d54 41
@


1.20
log
@fix pointer-signedness warnings from clang/llvm-3.3; "seems nice" deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: hostfile.h,v 1.19 2010/11/29 23:45:51 djm Exp $ */
d29 1
a29 1
	Key *key;
d38 1
a38 1
HostStatus check_key_in_hostkeys(struct hostkeys *, Key *,
d43 3
a45 2
int	 hostfile_read_key(char **, int *, Key *);
int	 add_host_to_hostfile(const char *, const char *, const Key *, int);
@


1.19
log
@automatically order the hostkeys requested by the client based on
which hostkeys are already recorded in known_hosts. This avoids
hostkey warnings when connecting to servers with new ECDSA keys
that are preferred by default; with markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: hostfile.h,v 1.18 2010/03/04 10:36:03 djm Exp $ */
d43 1
a43 1
int	 hostfile_read_key(char **, u_int *, Key *);
@


1.18
log
@Add a TrustedUserCAKeys option to sshd_config to specify CA keys that
are trusted to authenticate users (in addition than doing it per-user
in authorized_keys).

Add a RevokedKeys option to sshd_config and a @@revoked marker to
known_hosts to allow keys to me revoked and banned for user or host
authentication.

feedback and ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: hostfile.h,v 1.17 2010/02/26 20:29:54 djm Exp $ */
d21 22
d44 1
a44 5
HostStatus check_host_in_hostfile(const char *, const char *,
	    const Key *, Key *, int *);
int	add_host_to_hostfile(const char *, const char *, const Key *, int);
int	lookup_key_in_hostfile_by_type(const char *, const char *,
	    int, Key *, int *);
@


1.17
log
@Add support for certificate key types for users and hosts.

OpenSSH certificate key types are not X.509 certificates, but a much
simpler format that encodes a public key, identity information and
some validity constraints and signs it with a CA key. CA keys are
regular SSH keys. This certificate style avoids the attack surface
of X.509 certificates and is very easy to deploy.

Certified host keys allow automatic acceptance of new host keys
when a CA certificate is marked as trusted in ~/.ssh/known_hosts.
see VERIFYING HOST KEYS in ssh(1) for details.

Certified user keys allow authentication of users when the signing
CA key is marked as trusted in authorized_keys. See "AUTHORIZED_KEYS
FILE FORMAT" in sshd(8) for details.

Certificates are minted using ssh-keygen(1), documentation is in
the "CERTIFICATES" section of that manpage.

Documentation on the format of certificates is in the file
PROTOCOL.certkeys

feedback and ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: hostfile.h,v 1.16 2006/03/25 22:22:43 djm Exp $ */
d18 1
a18 1
	HOST_OK, HOST_NEW, HOST_CHANGED, HOST_FOUND
d32 1
@


1.16
log
@standardise spacing in $OpenBSD$ tags; requested by deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: hostfile.h,v 1.15 2005/03/01 10:40:26 djm Exp $ */
d30 2
@


1.15
log
@add support for hashing host names and addresses added to known_hosts files,
to improve privacy of which hosts user have been visiting; ok markus@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hostfile.h,v 1.14 2003/11/10 16:23:41 jakob Exp $	*/
@


1.15.4.1
log
@upgrade to OpenSSH 4.4
@
text
@d1 1
a1 1
/* $OpenBSD: hostfile.h,v 1.16 2006/03/25 22:22:43 djm Exp $ */
@


1.15.6.1
log
@upgrade to OpenSSH 4.4
@
text
@d1 1
a1 1
/* $OpenBSD: hostfile.h,v 1.16 2006/03/25 22:22:43 djm Exp $ */
@


1.14
log
@constify. ok markus@@ & djm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hostfile.h,v 1.13 2002/11/21 23:03:51 deraadt Exp $	*/
d24 1
a24 1
int	add_host_to_hostfile(const char *, const char *, const Key *);
d27 5
@


1.14.2.1
log
@upgrade to OpenSSH 4.0
@
text
@d1 1
a1 1
/*	$OpenBSD: hostfile.h,v 1.15 2005/03/01 10:40:26 djm Exp $	*/
d24 1
a24 1
int	add_host_to_hostfile(const char *, const char *, const Key *, int);
a26 5

#define HASH_MAGIC	"|1|"
#define HASH_DELIM	'|'

char	*host_hash(const char *, const char *, u_int);
@


1.14.4.1
log
@upgrade to OpenSSH 4.0
@
text
@d1 1
a1 1
/*	$OpenBSD: hostfile.h,v 1.15 2005/03/01 10:40:26 djm Exp $	*/
d24 1
a24 1
int	add_host_to_hostfile(const char *, const char *, const Key *, int);
a26 5

#define HASH_MAGIC	"|1|"
#define HASH_DELIM	'|'

char	*host_hash(const char *, const char *, u_int);
@


1.13
log
@KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: hostfile.h,v 1.12 2002/09/08 20:24:08 markus Exp $	*/
d23 2
a24 2
	    Key *, Key *, int *);
int	add_host_to_hostfile(const char *, const char *, Key *);
@


1.13.2.1
log
@upgrade to OpenSSH 3.8upgrade to OpenSSH 3.8upgrade to OpenSSH 3.8
@
text
@d1 1
a1 1
/*	$OpenBSD: hostfile.h,v 1.14 2003/11/10 16:23:41 jakob Exp $	*/
d23 2
a24 2
	    const Key *, Key *, int *);
int	add_host_to_hostfile(const char *, const char *, const Key *);
@


1.13.4.1
log
@upgrade to OpenSSH 3.8
@
text
@d1 1
a1 1
/*	$OpenBSD: hostfile.h,v 1.14 2003/11/10 16:23:41 jakob Exp $	*/
d23 2
a24 2
	    const Key *, Key *, int *);
int	add_host_to_hostfile(const char *, const char *, const Key *);
@


1.12
log
@no comma at end of enumerator list
@
text
@d1 1
a1 1
/*	$OpenBSD: hostfile.h,v 1.11 2002/07/24 16:11:18 markus Exp $	*/
d22 5
a26 5
HostStatus
check_host_in_hostfile(const char *, const char *, Key *, Key *, int *);
int	 add_host_to_hostfile(const char *, const char *, Key *);
int	
lookup_key_in_hostfile_by_type(const char *, const char *, int , Key *, int *);
@


1.12.2.1
log
@Update to OpenSSH 3.6
@
text
@d1 1
a1 1
/*	$OpenBSD: hostfile.h,v 1.13 2002/11/21 23:03:51 deraadt Exp $	*/
d22 5
a26 5
HostStatus check_host_in_hostfile(const char *, const char *,
	    Key *, Key *, int *);
int	add_host_to_hostfile(const char *, const char *, Key *);
int	lookup_key_in_hostfile_by_type(const char *, const char *,
	    int, Key *, int *);
@


1.12.2.2
log
@upgrade to OpenSSH 3.7
@
text
@@


1.11
log
@print out all known keys for a host if we get a unknown host key,
see discussion at http://marc.theaimsgroup.com/?t=101069210100016&r=1&w=4

the ssharp mitm tool attacks users in a similar way, so i'd like to
pointed out again:
	A MITM attack is always possible if the ssh client prints:
	The authenticity of host 'bla' can't be established.
(protocol version 2 with pubkey authentication allows you to detect
MITM attacks)
@
text
@d1 1
a1 1
/*	$OpenBSD: hostfile.h,v 1.10 2001/12/18 10:04:21 jakob Exp $	*/
d18 1
a18 1
	HOST_OK, HOST_NEW, HOST_CHANGED, HOST_FOUND,
@


1.10
log
@remove auth_rsa_read_key, make hostfile_ready_key non static; ok markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hostfile.h,v 1.9 2001/06/26 17:27:23 markus Exp $	*/
d18 1
a18 1
	HOST_OK, HOST_NEW, HOST_CHANGED
d25 2
@


1.10.2.1
log
@Update to OpenSSH 3.5
@
text
@d1 1
a1 1
/*	$OpenBSD: hostfile.h,v 1.12 2002/09/08 20:24:08 markus Exp $	*/
d18 1
a18 1
	HOST_OK, HOST_NEW, HOST_CHANGED, HOST_FOUND
a24 2
int	
lookup_key_in_hostfile_by_type(const char *, const char *, int , Key *, int *);
@


1.10.2.2
log
@Merge OpenSSH 3.6.1
@
text
@d1 1
a1 1
/*	$OpenBSD: hostfile.h,v 1.13 2002/11/21 23:03:51 deraadt Exp $	*/
d22 5
a26 5
HostStatus check_host_in_hostfile(const char *, const char *,
	    Key *, Key *, int *);
int	add_host_to_hostfile(const char *, const char *, Key *);
int	lookup_key_in_hostfile_by_type(const char *, const char *,
	    int, Key *, int *);
@


1.9
log
@remove comments from .h, since they are cut&paste from the .c files
and out of sync
@
text
@d1 1
a1 1
/*	$OpenBSD: hostfile.h,v 1.8 2001/06/26 06:32:53 itojun Exp $	*/
d21 1
a24 1
int	 auth_rsa_read_key(char **, u_int *, BIGNUM *, BIGNUM *);
@


1.9.2.1
log
@Update to OpenSSH-3.1 on 3.0-stable branch
@
text
@d1 1
a1 1
/*	$OpenBSD: hostfile.h,v 1.10 2001/12/18 10:04:21 jakob Exp $	*/
a20 1
int	 hostfile_read_key(char **, u_int *, Key *);
d24 1
@


1.9.2.2
log
@Update to OpenSSH 3.5
@
text
@d1 1
a1 1
/*	$OpenBSD: hostfile.h,v 1.12 2002/09/08 20:24:08 markus Exp $	*/
d18 1
a18 1
	HOST_OK, HOST_NEW, HOST_CHANGED, HOST_FOUND
a24 2
int	
lookup_key_in_hostfile_by_type(const char *, const char *, int , Key *, int *);
@


1.8
log
@prototype pedant.  not very creative...
- () -> (void)
- no variable names
@
text
@d1 1
a1 1
/*	$OpenBSD: hostfile.h,v 1.7 2001/02/08 19:30:51 itojun Exp $	*/
a16 9
int
auth_rsa_read_key(char **, u_int *, BIGNUM *, BIGNUM *);

/*
 * Checks whether the given host is already in the list of our known hosts.
 * Returns HOST_OK if the host is known and has the specified key, HOST_NEW
 * if the host is not known, and HOST_CHANGED if the host is known but used
 * to have a different host key.  The host must be in all lowercase.
 */
d23 2
a24 6

/*
 * Appends an entry to the host file.  Returns false if the entry could not
 * be appended.
 */
int	add_host_to_hostfile(const char *, const char *, Key *);
@


1.7
log
@sync with netbsd tree changes.
- more strict prototypes, include necessary headers
- use paths.h/pathnames.h decls
- size_t typecase to int -> u_long
@
text
@d1 1
a1 1
/*	$OpenBSD: hostfile.h,v 1.6 2001/01/29 01:58:16 niklas Exp $	*/
d18 1
a18 1
auth_rsa_read_key(char **cpp, u_int *bitsp, BIGNUM * e, BIGNUM * n);
d31 1
a31 2
check_host_in_hostfile(const char *filename, const char *host, Key *key,
    Key *found, int *line);
d37 1
a37 1
int	add_host_to_hostfile(const char *filename, const char *host, Key *key);
@


1.7.2.1
log
@Pull in OpenSSH-2.9.9
@
text
@d1 1
a1 1
/*	$OpenBSD: hostfile.h,v 1.9 2001/06/26 17:27:23 markus Exp $	*/
d17 9
d31 8
a38 3
check_host_in_hostfile(const char *, const char *, Key *, Key *, int *);
int	 add_host_to_hostfile(const char *, const char *, Key *);
int	 auth_rsa_read_key(char **, u_int *, BIGNUM *, BIGNUM *);
@


1.7.2.2
log
@Merge OpenSSH 3.1, keeping /etc as configuration files directory.
(i.e. OpenSSH 3.1 + openbsd29_3.1.patch)
@
text
@d1 1
a1 1
/*	$OpenBSD: hostfile.h,v 1.10 2001/12/18 10:04:21 jakob Exp $	*/
a20 1
int	 hostfile_read_key(char **, u_int *, Key *);
d24 1
@


1.6
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d16 3
@


1.5
log
@print keyfile:line for changed hostkeys, for deraadt@@; ok deraadt@@
@
text
@d1 2
@


1.4
log
@some more Copyright fixes
@
text
@d24 1
d26 2
a27 1
check_host_in_hostfile(const char *filename, const char *host, Key *key, Key *found);
@


1.4.2.1
log
@Pull in OpenSSH 2.5.0
@
text
@a0 2
/*	$OpenBSD: hostfile.h,v 1.7 2001/02/08 19:30:51 itojun Exp $	*/

a14 3
int
auth_rsa_read_key(char **cpp, u_int *bitsp, BIGNUM * e, BIGNUM * n);

a23 1

d25 1
a25 2
check_host_in_hostfile(const char *filename, const char *host, Key *key,
    Key *found, int *line);
@


1.4.2.2
log
@Pull in OpenSSH-2.5.1
@
text
@@


1.4.2.3
log
@Pull in OpenSSH-2.5.2 for 2.8 branch.
@
text
@@


1.4.2.4
log
@Pull in OpenSSH-2.9 to 2.8 branch.
@
text
@@


1.4.2.5
log
@Pull in OpenSSH 2.9.9 to the 2.8 branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: hostfile.h,v 1.9 2001/06/26 17:27:23 markus Exp $	*/
d17 9
d31 8
a38 3
check_host_in_hostfile(const char *, const char *, Key *, Key *, int *);
int	 add_host_to_hostfile(const char *, const char *, Key *);
int	 auth_rsa_read_key(char **, u_int *, BIGNUM *, BIGNUM *);
@


1.4.2.6
log
@Merge OpenSSH 3.1.
@
text
@d1 1
a1 1
/*	$OpenBSD: hostfile.h,v 1.10 2001/12/18 10:04:21 jakob Exp $	*/
a20 1
int	 hostfile_read_key(char **, u_int *, Key *);
d24 1
@


1.3
log
@cleanup copyright notices on all files.  I have attempted to be accurate with
the details.  everything is now under Tatu's licence (which I copied from his
readme), and/or the core-sdi bsd-ish thing for deattack, or various openbsd
developers under a 2-term bsd licence.  We're not changing any rules, just
being accurate.
@
text
@d2 3
a4 1
 * Copyright (c) 2000 Markus Friedl.  All rights reserved.
d6 5
a10 19
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
@


1.2
log
@whitespace cleanup
@
text
@d1 23
@


1.2.2.1
log
@openssh-2.3.0 (again) for 2.7 branch
@
text
@a0 11
/*
 * Author: Tatu Ylonen <ylo@@cs.hut.fi>
 * Copyright (c) 1995 Tatu Ylonen <ylo@@cs.hut.fi>, Espoo, Finland
 *                    All rights reserved
 *
 * As far as I am concerned, the code I have written for this software
 * can be used freely for any purpose.  Any derived versions of this
 * software must be clearly marked as such, and if the derived work is
 * incompatible with the protocol description in the RFC file, it must be
 * called by a name other than "ssh" or "Secure Shell".
 */
@


1.2.2.2
log
@OpenSSH-2.5.1 for 2.7 patch branch
@
text
@a0 2
/*	$OpenBSD: hostfile.h,v 1.7 2001/02/08 19:30:51 itojun Exp $	*/

a14 3
int
auth_rsa_read_key(char **cpp, u_int *bitsp, BIGNUM * e, BIGNUM * n);

a23 1

d25 1
a25 2
check_host_in_hostfile(const char *filename, const char *host, Key *key,
    Key *found, int *line);
@


1.2.2.3
log
@Pull in OpenSSH-2.5.2 for 2.7 branch.
@
text
@@


1.1
log
@initial support for DSA keys. ok deraadt@@, niels@@
@
text
@d13 1
a13 1
HostStatus 
@

