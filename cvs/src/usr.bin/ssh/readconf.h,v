head	1.117;
access;
symbols
	OPENBSD_6_0:1.117.0.4
	OPENBSD_6_0_BASE:1.117
	OPENBSD_5_9:1.113.0.2
	OPENBSD_5_9_BASE:1.113
	OPENBSD_5_8:1.110.0.2
	OPENBSD_5_8_BASE:1.110
	OPENBSD_5_7:1.109.0.2
	OPENBSD_5_7_BASE:1.109
	OPENBSD_5_6:1.102.0.4
	OPENBSD_5_6_BASE:1.102
	OPENBSD_5_5:1.101.0.4
	OPENBSD_5_5_BASE:1.101
	OPENBSD_5_4:1.95.0.2
	OPENBSD_5_4_BASE:1.95
	OPENBSD_5_3:1.93.0.2
	OPENBSD_5_3_BASE:1.93
	OPENBSD_5_2:1.91.0.4
	OPENBSD_5_2_BASE:1.91
	OPENBSD_5_1_BASE:1.91
	OPENBSD_5_1:1.91.0.2
	OPENBSD_5_0:1.90.0.2
	OPENBSD_5_0_BASE:1.90
	OPENBSD_4_9:1.88.0.2
	OPENBSD_4_9_BASE:1.88
	OPENBSD_4_8:1.86.0.2
	OPENBSD_4_8_BASE:1.86
	OPENBSD_4_7:1.82.0.2
	OPENBSD_4_7_BASE:1.82
	OPENBSD_4_6:1.79.0.4
	OPENBSD_4_6_BASE:1.79
	OPENBSD_4_5:1.78.0.2
	OPENBSD_4_5_BASE:1.78
	OPENBSD_4_4:1.74.0.2
	OPENBSD_4_4_BASE:1.74
	OPENBSD_4_3:1.72.0.2
	OPENBSD_4_3_BASE:1.72
	OPENBSD_4_2:1.71.0.6
	OPENBSD_4_2_BASE:1.71
	OPENBSD_4_1:1.71.0.2
	OPENBSD_4_1_BASE:1.71
	OPENBSD_4_0:1.71.0.4
	OPENBSD_4_0_BASE:1.71
	OPENBSD_3_9:1.68.0.2
	OPENBSD_3_9_BASE:1.68
	OPENBSD_3_8:1.67.0.2
	OPENBSD_3_8_BASE:1.67
	OPENBSD_3_7:1.66.0.2
	OPENBSD_3_7_BASE:1.66
	OPENBSD_3_6:1.64.0.2
	OPENBSD_3_6_BASE:1.64
	OPENBSD_3_5:1.60.0.2
	OPENBSD_3_5_BASE:1.60
	OPENBSD_3_4:1.55.0.2
	OPENBSD_3_4_BASE:1.55
	OPENBSD_3_3:1.44.0.2
	OPENBSD_3_3_BASE:1.44
	OPENBSD_3_2:1.43.0.2
	OPENBSD_3_2_BASE:1.43
	OPENBSD_3_1:1.42.0.2
	OPENBSD_3_1_BASE:1.42
	OPENBSD_3_0:1.40.0.2
	OPENBSD_3_0_BASE:1.40
	OPENBSD_2_9_BASE:1.30
	OPENBSD_2_9:1.30.0.2
	OPENBSD_2_8:1.22.0.2
	OPENBSD_2_8_BASE:1.22
	OPENBSD_2_7:1.18.0.2
	OPENBSD_2_7_BASE:1.18
	OPENBSD_2_6:1.7.0.2
	OPENBSD_2_6_BASE:1.7;
locks; strict;
comment	@ * @;


1.117
date	2016.07.15.00.24.30;	author djm;	state Exp;
branches;
next	1.116;
commitid	PAQPO8bvkonq4i81;

1.116
date	2016.06.03.03.14.41;	author dtucker;	state Exp;
branches;
next	1.115;
commitid	ovpSdW3xBjKJO7iw;

1.115
date	2016.05.04.12.21.53;	author markus;	state Exp;
branches;
next	1.114;
commitid	cxcRWNRjlPdtRVOI;

1.114
date	2016.04.15.00.30.19;	author djm;	state Exp;
branches;
next	1.113;
commitid	my9uXywHtGIyCVPH;

1.113
date	2016.01.14.16.17.40;	author markus;	state Exp;
branches;
next	1.112;
commitid	W9ye0gltieEl87AJ;

1.112
date	2015.11.15.22.26.49;	author jcs;	state Exp;
branches;
next	1.111;
commitid	mjNGB5AAtJeHDag2;

1.111
date	2015.09.24.06.15.11;	author djm;	state Exp;
branches;
next	1.110;
commitid	nGLvQjqT3Z8tECCC;

1.110
date	2015.07.10.06.21.53;	author markus;	state Exp;
branches;
next	1.109;
commitid	iQTtbsbSVdO9zivU;

1.109
date	2015.02.16.22.13.32;	author djm;	state Exp;
branches;
next	1.108;
commitid	vWL0dluw4oITNbM8;

1.108
date	2015.01.30.11.43.14;	author djm;	state Exp;
branches;
next	1.107;
commitid	NHgy1atCg6tWjTbF;

1.107
date	2015.01.26.03.04.45;	author djm;	state Exp;
branches;
next	1.106;
commitid	Xp9DfQmHQHbZ815k;

1.106
date	2015.01.15.09.40.00;	author djm;	state Exp;
branches;
next	1.105;
commitid	akRUKeZEbb3ylbKG;

1.105
date	2014.12.21.22.27.56;	author djm;	state Exp;
branches;
next	1.104;
commitid	EbtriidyZdsmXksl;

1.104
date	2014.12.04.02.24.32;	author djm;	state Exp;
branches;
next	1.103;
commitid	0YGyOuIh3H3xTolw;

1.103
date	2014.10.08.22.20.25;	author djm;	state Exp;
branches;
next	1.102;
commitid	FjkSE9L51UbRANmo;

1.102
date	2014.07.15.15.54.14;	author millert;	state Exp;
branches;
next	1.101;
commitid	z7plx8Gkj6l2sxem;

1.101
date	2014.02.23.20.11.36;	author djm;	state Exp;
branches;
next	1.100;

1.100
date	2014.01.29.06.18.35;	author djm;	state Exp;
branches;
next	1.99;

1.99
date	2013.10.16.22.49.38;	author djm;	state Exp;
branches;
next	1.98;

1.98
date	2013.10.16.02.31.46;	author djm;	state Exp;
branches;
next	1.97;

1.97
date	2013.10.14.22.22.03;	author djm;	state Exp;
branches;
next	1.96;

1.96
date	2013.08.20.00.11.38;	author djm;	state Exp;
branches;
next	1.95;

1.95
date	2013.05.16.04.27.50;	author djm;	state Exp;
branches;
next	1.94;

1.94
date	2013.05.16.02.00.34;	author dtucker;	state Exp;
branches;
next	1.93;

1.93
date	2013.02.22.04.45.09;	author dtucker;	state Exp;
branches;
next	1.92;

1.92
date	2013.02.17.23.16.57;	author dtucker;	state Exp;
branches;
next	1.91;

1.91
date	2011.09.23.07.45.05;	author markus;	state Exp;
branches;
next	1.90;

1.90
date	2011.05.24.07.15.47;	author djm;	state Exp;
branches;
next	1.89;

1.89
date	2011.05.06.21.34.32;	author djm;	state Exp;
branches;
next	1.88;

1.88
date	2010.11.13.23.27.50;	author djm;	state Exp;
branches;
next	1.87;

1.87
date	2010.09.22.05.01.29;	author djm;	state Exp;
branches;
next	1.86;

1.86
date	2010.07.19.09.15.12;	author djm;	state Exp;
branches;
next	1.85;

1.85
date	2010.06.25.23.15.36;	author djm;	state Exp;
branches;
next	1.84;

1.84
date	2010.06.25.07.14.46;	author djm;	state Exp;
branches;
next	1.83;

1.83
date	2010.05.16.12.55.51;	author markus;	state Exp;
branches;
next	1.82;

1.82
date	2010.02.08.10.50.20;	author markus;	state Exp;
branches;
next	1.81;

1.81
date	2010.01.09.23.04.13;	author dtucker;	state Exp;
branches;
next	1.80;

1.80
date	2009.10.28.16.38.18;	author reyk;	state Exp;
branches;
next	1.79;

1.79
date	2009.06.27.09.35.06;	author andreas;	state Exp;
branches;
next	1.78;

1.78
date	2009.02.12.03.00.56;	author djm;	state Exp;
branches;
next	1.77;

1.77
date	2009.01.22.10.02.34;	author djm;	state Exp;
branches;
next	1.76;

1.76
date	2008.11.04.08.22.13;	author djm;	state Exp;
branches;
next	1.75;

1.75
date	2008.11.01.17.40.33;	author stevesk;	state Exp;
branches;
next	1.74;

1.74
date	2008.06.26.11.46.31;	author grunk;	state Exp;
branches;
next	1.73;

1.73
date	2008.06.11.21.01.35;	author grunk;	state Exp;
branches;
next	1.72;

1.72
date	2008.01.19.23.09.49;	author djm;	state Exp;
branches;
next	1.71;

1.71
date	2006.08.03.03.34.42;	author deraadt;	state Exp;
branches;
next	1.70;

1.70
date	2006.07.11.18.50.48;	author markus;	state Exp;
branches;
next	1.69;

1.69
date	2006.03.25.22.22.43;	author djm;	state Exp;
branches;
next	1.68;

1.68
date	2005.12.06.22.38.27;	author reyk;	state Exp;
branches
	1.68.2.1;
next	1.67;

1.67
date	2005.06.08.11.25.09;	author djm;	state Exp;
branches
	1.67.2.1;
next	1.66;

1.66
date	2005.03.01.10.40.27;	author djm;	state Exp;
branches
	1.66.2.1;
next	1.65;

1.65
date	2005.03.01.10.09.52;	author djm;	state Exp;
branches;
next	1.64;

1.64
date	2004.07.11.17.48.47;	author deraadt;	state Exp;
branches
	1.64.2.1;
next	1.63;

1.63
date	2004.06.13.15.03.02;	author djm;	state Exp;
branches;
next	1.62;

1.62
date	2004.04.27.09.46.37;	author djm;	state Exp;
branches;
next	1.61;

1.61
date	2004.04.18.23.10.26;	author djm;	state Exp;
branches;
next	1.60;

1.60
date	2004.03.05.10.53.58;	author markus;	state Exp;
branches
	1.60.2.1;
next	1.59;

1.59
date	2003.12.16.15.49.51;	author markus;	state Exp;
branches;
next	1.58;

1.58
date	2003.12.09.21.53.36;	author markus;	state Exp;
branches;
next	1.57;

1.57
date	2003.11.21.11.57.03;	author djm;	state Exp;
branches;
next	1.56;

1.56
date	2003.10.11.08.24.08;	author markus;	state Exp;
branches;
next	1.55;

1.55
date	2003.09.01.18.15.50;	author markus;	state Exp;
branches
	1.55.2.1;
next	1.54;

1.54
date	2003.08.22.10.56.09;	author markus;	state Exp;
branches;
next	1.53;

1.53
date	2003.08.13.08.46.30;	author markus;	state Exp;
branches;
next	1.52;

1.52
date	2003.07.22.13.35.22;	author markus;	state Exp;
branches;
next	1.51;

1.51
date	2003.07.03.08.09.06;	author djm;	state Exp;
branches;
next	1.50;

1.50
date	2003.05.15.14.55.25;	author djm;	state Exp;
branches;
next	1.49;

1.49
date	2003.05.15.01.48.10;	author jakob;	state Exp;
branches;
next	1.48;

1.48
date	2003.05.14.18.16.20;	author jakob;	state Exp;
branches;
next	1.47;

1.47
date	2003.04.02.09.48.07;	author markus;	state Exp;
branches;
next	1.46;

1.46
date	2003.04.01.10.22.21;	author markus;	state Exp;
branches;
next	1.45;

1.45
date	2003.04.01.10.10.23;	author markus;	state Exp;
branches;
next	1.44;

1.44
date	2002.11.07.22.08.07;	author markus;	state Exp;
branches
	1.44.2.1;
next	1.43;

1.43
date	2002.06.08.05.17.01;	author markus;	state Exp;
branches
	1.43.2.1;
next	1.42;

1.42
date	2002.03.04.17.27.39;	author stevesk;	state Exp;
branches
	1.42.2.1;
next	1.41;

1.41
date	2002.02.10.01.07.05;	author deraadt;	state Exp;
branches;
next	1.40;

1.40
date	2001.10.01.21.51.16;	author markus;	state Exp;
branches
	1.40.2.1;
next	1.39;

1.39
date	2001.09.19.19.24.18;	author stevesk;	state Exp;
branches;
next	1.38;

1.38
date	2001.09.03.20.58.33;	author stevesk;	state Exp;
branches;
next	1.37;

1.37
date	2001.08.01.22.03.33;	author markus;	state Exp;
branches;
next	1.36;

1.36
date	2001.07.31.09.28.44;	author jakob;	state Exp;
branches;
next	1.35;

1.35
date	2001.06.26.17.27.24;	author markus;	state Exp;
branches;
next	1.34;

1.34
date	2001.06.26.16.15.24;	author dugsong;	state Exp;
branches;
next	1.33;

1.33
date	2001.06.26.06.32.58;	author itojun;	state Exp;
branches;
next	1.32;

1.32
date	2001.05.18.14.13.29;	author markus;	state Exp;
branches;
next	1.31;

1.31
date	2001.04.30.11.18.52;	author markus;	state Exp;
branches;
next	1.30;

1.30
date	2001.04.17.10.53.25;	author markus;	state Exp;
branches
	1.30.2.1;
next	1.29;

1.29
date	2001.04.12.19.15.25;	author markus;	state Exp;
branches;
next	1.28;

1.28
date	2001.03.10.17.51.04;	author markus;	state Exp;
branches;
next	1.27;

1.27
date	2001.03.08.21.42.32;	author markus;	state Exp;
branches;
next	1.26;

1.26
date	2001.02.11.12.59.25;	author markus;	state Exp;
branches;
next	1.25;

1.25
date	2001.01.22.23.06.39;	author markus;	state Exp;
branches;
next	1.24;

1.24
date	2000.12.27.12.30.20;	author markus;	state Exp;
branches;
next	1.23;

1.23
date	2000.11.12.19.50.37;	author markus;	state Exp;
branches;
next	1.22;

1.22
date	2000.10.11.20.14.39;	author markus;	state Exp;
branches
	1.22.2.1;
next	1.21;

1.21
date	2000.09.07.20.27.53;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2000.06.20.01.39.43;	author markus;	state Exp;
branches;
next	1.19;

1.19
date	2000.05.31.06.36.40;	author markus;	state Exp;
branches;
next	1.18;

1.18
date	2000.05.08.17.12.15;	author markus;	state Exp;
branches
	1.18.2.1;
next	1.17;

1.17
date	2000.05.06.17.45.36;	author markus;	state Exp;
branches;
next	1.16;

1.16
date	2000.04.26.20.56.29;	author markus;	state Exp;
branches;
next	1.15;

1.15
date	2000.04.14.10.30.32;	author markus;	state Exp;
branches;
next	1.14;

1.14
date	2000.04.12.07.45.44;	author markus;	state Exp;
branches;
next	1.13;

1.13
date	99.12.01.13.59.15;	author markus;	state Exp;
branches;
next	1.12;

1.12
date	99.11.24.19.53.49;	author markus;	state Exp;
branches;
next	1.11;

1.11
date	99.11.24.00.26.02;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	99.11.22.21.52.41;	author markus;	state Exp;
branches;
next	1.9;

1.9
date	99.11.14.21.45.07;	author markus;	state Exp;
branches;
next	1.8;

1.8
date	99.11.10.23.36.44;	author markus;	state Exp;
branches;
next	1.7;

1.7
date	99.10.12.21.04.22;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	99.10.06.20.07.42;	author dugsong;	state Exp;
branches;
next	1.5;

1.5
date	99.10.03.21.50.03;	author provos;	state Exp;
branches;
next	1.4;

1.4
date	99.09.30.05.03.05;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	99.09.29.18.16.20;	author dugsong;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.00.10.16;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	99.09.26.20.53.37;	author deraadt;	state Exp;
branches;
next	;

1.18.2.1
date	2000.06.12.02.37.34;	author jason;	state Exp;
branches;
next	1.18.2.2;

1.18.2.2
date	2000.09.01.18.23.21;	author jason;	state Exp;
branches;
next	1.18.2.3;

1.18.2.3
date	2000.11.08.21.31.07;	author jason;	state Exp;
branches;
next	1.18.2.4;

1.18.2.4
date	2001.03.12.15.44.13;	author jason;	state Exp;
branches;
next	1.18.2.5;

1.18.2.5
date	2001.03.21.18.52.57;	author jason;	state Exp;
branches;
next	;

1.22.2.1
date	2001.02.16.20.13.10;	author jason;	state Exp;
branches;
next	1.22.2.2;

1.22.2.2
date	2001.02.19.17.19.13;	author jason;	state Exp;
branches;
next	1.22.2.3;

1.22.2.3
date	2001.03.21.19.46.27;	author jason;	state Exp;
branches;
next	1.22.2.4;

1.22.2.4
date	2001.05.07.21.09.32;	author jason;	state Exp;
branches;
next	1.22.2.5;

1.22.2.5
date	2001.09.27.00.15.42;	author miod;	state Exp;
branches;
next	1.22.2.6;

1.22.2.6
date	2001.11.15.00.14.59;	author miod;	state Exp;
branches;
next	1.22.2.7;

1.22.2.7
date	2002.03.08.17.04.42;	author brad;	state Exp;
branches;
next	;

1.30.2.1
date	2001.09.27.19.03.55;	author jason;	state Exp;
branches;
next	1.30.2.2;

1.30.2.2
date	2001.11.15.00.15.19;	author miod;	state Exp;
branches;
next	1.30.2.3;

1.30.2.3
date	2002.03.09.00.20.44;	author miod;	state Exp;
branches;
next	;

1.40.2.1
date	2002.03.07.17.37.47;	author jason;	state Exp;
branches;
next	1.40.2.2;

1.40.2.2
date	2002.03.08.15.17.18;	author brad;	state Exp;
branches;
next	1.40.2.3;

1.40.2.3
date	2002.06.22.07.23.17;	author miod;	state Exp;
branches;
next	;

1.42.2.1
date	2002.06.26.15.30.38;	author jason;	state Exp;
branches;
next	1.42.2.2;

1.42.2.2
date	2003.04.03.22.35.17;	author miod;	state Exp;
branches;
next	;

1.43.2.1
date	2003.04.01.00.12.14;	author margarida;	state Exp;
branches;
next	1.43.2.2;

1.43.2.2
date	2003.09.16.21.20.26;	author brad;	state Exp;
branches;
next	;

1.44.2.1
date	2003.09.16.20.50.43;	author brad;	state Exp;
branches;
next	1.44.2.2;

1.44.2.2
date	2004.03.04.18.18.16;	author brad;	state Exp;
branches;
next	;

1.55.2.1
date	2004.02.28.03.51.33;	author brad;	state Exp;
branches;
next	1.55.2.2;

1.55.2.2
date	2004.08.19.22.37.31;	author brad;	state Exp;
branches;
next	;

1.60.2.1
date	2004.08.19.04.13.27;	author brad;	state Exp;
branches;
next	1.60.2.2;

1.60.2.2
date	2005.03.10.17.15.04;	author brad;	state Exp;
branches;
next	;

1.64.2.1
date	2005.03.10.16.28.27;	author brad;	state Exp;
branches;
next	1.64.2.2;

1.64.2.2
date	2005.09.02.03.45.00;	author brad;	state Exp;
branches;
next	;

1.66.2.1
date	2005.09.04.18.40.03;	author brad;	state Exp;
branches;
next	1.66.2.2;

1.66.2.2
date	2006.02.03.02.53.44;	author brad;	state Exp;
branches;
next	;

1.67.2.1
date	2006.02.03.03.01.56;	author brad;	state Exp;
branches;
next	1.67.2.2;

1.67.2.2
date	2006.10.06.03.19.33;	author brad;	state Exp;
branches;
next	;

1.68.2.1
date	2006.09.30.04.06.51;	author brad;	state Exp;
branches;
next	;


desc
@@


1.117
log
@Add a ProxyJump ssh_config(5) option and corresponding -J ssh(1)
command-line flag to allow simplified indirection through a
SSH bastion or "jump host".

These options construct a proxy command that connects to the
specified jump host(s) (more than one may be specified) and uses
port-forwarding to establish a connection to the next destination.

This codifies the safest way of indirecting connections through SSH
servers and makes it easy to use.

ok markus@@
@
text
@/* $OpenBSD: readconf.h,v 1.116 2016/06/03 03:14:41 dtucker Exp $ */

/*
 * Author: Tatu Ylonen <ylo@@cs.hut.fi>
 * Copyright (c) 1995 Tatu Ylonen <ylo@@cs.hut.fi>, Espoo, Finland
 *                    All rights reserved
 * Functions for reading the configuration file.
 *
 * As far as I am concerned, the code I have written for this software
 * can be used freely for any purpose.  Any derived versions of this
 * software must be clearly marked as such, and if the derived work is
 * incompatible with the protocol description in the RFC file, it must be
 * called by a name other than "ssh" or "Secure Shell".
 */

#ifndef READCONF_H
#define READCONF_H

/* Data structure for representing option data. */

#define MAX_SEND_ENV		256
#define SSH_MAX_HOSTS_FILES	32
#define MAX_CANON_DOMAINS	32
#define PATH_MAX_SUN		(sizeof((struct sockaddr_un *)0)->sun_path)

struct allowed_cname {
	char *source_list;
	char *target_list;
};

typedef struct {
	int     forward_agent;	/* Forward authentication agent. */
	int     forward_x11;	/* Forward X11 display. */
	int     forward_x11_timeout;	/* Expiration for Cookies */
	int     forward_x11_trusted;	/* Trust Forward X11 display. */
	int     exit_on_forward_failure;	/* Exit if bind(2) fails for -L/-R */
	char   *xauth_location;	/* Location for xauth program */
	struct ForwardOptions fwd_opts;	/* forwarding options */
	int     use_privileged_port;	/* Don't use privileged port if false. */
	int     rhosts_rsa_authentication;	/* Try rhosts with RSA
						 * authentication. */
	int     rsa_authentication;	/* Try RSA authentication. */
	int     pubkey_authentication;	/* Try ssh2 pubkey authentication. */
	int     hostbased_authentication;	/* ssh2's rhosts_rsa */
	int     challenge_response_authentication;
					/* Try S/Key or TIS, authentication. */
	int     gss_authentication;	/* Try GSS authentication */
	int     gss_deleg_creds;	/* Delegate GSS credentials */
	int     password_authentication;	/* Try password
						 * authentication. */
	int     kbd_interactive_authentication; /* Try keyboard-interactive auth. */
	char	*kbd_interactive_devices; /* Keyboard-interactive auth devices. */
	int     batch_mode;	/* Batch mode: do not ask for passwords. */
	int     check_host_ip;	/* Also keep track of keys for IP address */
	int     strict_host_key_checking;	/* Strict host key checking. */
	int     compression;	/* Compress packets in both directions. */
	int     compression_level;	/* Compression level 1 (fast) to 9
					 * (best). */
	int     tcp_keep_alive;	/* Set SO_KEEPALIVE. */
	int	ip_qos_interactive;	/* IP ToS/DSCP/class for interactive */
	int	ip_qos_bulk;		/* IP ToS/DSCP/class for bulk traffic */
	LogLevel log_level;	/* Level for logging. */

	int     port;		/* Port to connect. */
	int     address_family;
	int     connection_attempts;	/* Max attempts (seconds) before
					 * giving up */
	int     connection_timeout;	/* Max time (seconds) before
					 * aborting connection attempt */
	int     number_of_password_prompts;	/* Max number of password
						 * prompts. */
	int     cipher;		/* Cipher to use. */
	char   *ciphers;	/* SSH2 ciphers in order of preference. */
	char   *macs;		/* SSH2 macs in order of preference. */
	char   *hostkeyalgorithms;	/* SSH2 server key types in order of preference. */
	char   *kex_algorithms;	/* SSH2 kex methods in order of preference. */
	int	protocol;	/* Protocol in order of preference. */
	char   *hostname;	/* Real host to connect. */
	char   *host_key_alias;	/* hostname alias for .ssh/known_hosts */
	char   *proxy_command;	/* Proxy command for connecting the host. */
	char   *user;		/* User to log in as. */
	int     escape_char;	/* Escape character; -2 = none */

	u_int	num_system_hostfiles;	/* Paths for /etc/ssh/ssh_known_hosts */
	char   *system_hostfiles[SSH_MAX_HOSTS_FILES];
	u_int	num_user_hostfiles;	/* Path for $HOME/.ssh/known_hosts */
	char   *user_hostfiles[SSH_MAX_HOSTS_FILES];
	char   *preferred_authentications;
	char   *bind_address;	/* local socket address for connection to sshd */
	char   *pkcs11_provider; /* PKCS#11 provider */
	int	verify_host_key_dns;	/* Verify host key using DNS */

	int     num_identity_files;	/* Number of files for RSA/DSA identities. */
	char   *identity_files[SSH_MAX_IDENTITY_FILES];
	int    identity_file_userprovided[SSH_MAX_IDENTITY_FILES];
	struct sshkey *identity_keys[SSH_MAX_IDENTITY_FILES];

	int	num_certificate_files; /* Number of extra certificates for ssh. */
	char	*certificate_files[SSH_MAX_CERTIFICATE_FILES];
	int	certificate_file_userprovided[SSH_MAX_CERTIFICATE_FILES];
	struct sshkey *certificates[SSH_MAX_CERTIFICATE_FILES];

	int	add_keys_to_agent;
	char   *identity_agent;		/* Optional path to ssh-agent socket */

	/* Local TCP/IP forward requests. */
	int     num_local_forwards;
	struct Forward *local_forwards;

	/* Remote TCP/IP forward requests. */
	int     num_remote_forwards;
	struct Forward *remote_forwards;
	int	clear_forwardings;

	/* stdio forwarding (-W) host and port */
	char   *stdio_forward_host;
	int	stdio_forward_port;

	int	enable_ssh_keysign;
	int64_t rekey_limit;
	int	rekey_interval;
	int	no_host_authentication_for_localhost;
	int	identities_only;
	int	server_alive_interval;
	int	server_alive_count_max;

	int     num_send_env;
	char   *send_env[MAX_SEND_ENV];

	char	*control_path;
	int	control_master;
	int     control_persist; /* ControlPersist flag */
	int     control_persist_timeout; /* ControlPersist timeout (seconds) */

	int	hash_known_hosts;

	int	tun_open;	/* tun(4) */
	int     tun_local;	/* force tun device (optional) */
	int     tun_remote;	/* force tun device (optional) */

	char	*local_command;
	int	permit_local_command;
	int	visual_host_key;

	int	request_tty;

	int	proxy_use_fdpass;

	int	num_canonical_domains;
	char	*canonical_domains[MAX_CANON_DOMAINS];
	int	canonicalize_hostname;
	int	canonicalize_max_dots;
	int	canonicalize_fallback_local;
	int	num_permitted_cnames;
	struct allowed_cname permitted_cnames[MAX_CANON_DOMAINS];

	char	*revoked_host_keys;

	int	 fingerprint_hash;

	int	 update_hostkeys; /* one of SSH_UPDATE_HOSTKEYS_* */

	char   *hostbased_key_types;
	char   *pubkey_key_types;

	char   *jump_user;
	char   *jump_host;
	int	jump_port;
	char   *jump_extra;

	char	*ignored_unknown; /* Pattern list of unknown tokens to ignore */
}       Options;

#define SSH_CANONICALISE_NO	0
#define SSH_CANONICALISE_YES	1
#define SSH_CANONICALISE_ALWAYS	2

#define SSHCTL_MASTER_NO	0
#define SSHCTL_MASTER_YES	1
#define SSHCTL_MASTER_AUTO	2
#define SSHCTL_MASTER_ASK	3
#define SSHCTL_MASTER_AUTO_ASK	4

#define REQUEST_TTY_AUTO	0
#define REQUEST_TTY_NO		1
#define REQUEST_TTY_YES		2
#define REQUEST_TTY_FORCE	3

#define SSHCONF_CHECKPERM	1  /* check permissions on config file */
#define SSHCONF_USERCONF	2  /* user provided config file not system */
#define SSHCONF_POSTCANON	4  /* After hostname canonicalisation */
#define SSHCONF_NEVERMATCH	8  /* Match/Host never matches; internal only */

#define SSH_UPDATE_HOSTKEYS_NO	0
#define SSH_UPDATE_HOSTKEYS_YES	1
#define SSH_UPDATE_HOSTKEYS_ASK	2

void     initialize_options(Options *);
void     fill_default_options(Options *);
void	 fill_default_options_for_canonicalization(Options *);
int	 process_config_line(Options *, struct passwd *, const char *,
    const char *, char *, const char *, int, int *, int);
int	 read_config_file(const char *, struct passwd *, const char *,
    const char *, Options *, int);
int	 parse_forward(struct Forward *, const char *, int, int);
int	 parse_jump(const char *, Options *, int);
int	 default_ssh_port(void);
int	 option_clear_or_none(const char *);
void	 dump_client_config(Options *o, const char *host);

void	 add_local_forward(Options *, const struct Forward *);
void	 add_remote_forward(Options *, const struct Forward *);
void	 add_identity_file(Options *, const char *, const char *, int);
void	 add_certificate_file(Options *, const char *, int);

#endif				/* READCONF_H */
@


1.116
log
@Move the host and port used by ssh -W into the Options struct.
This will make future changes a bit easier.  ok djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.115 2016/05/04 12:21:53 markus Exp $ */
d166 5
d206 1
@


1.115
log
@IdentityAgent for specifying specific agent sockets; ok djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.114 2016/04/15 00:30:19 djm Exp $ */
d114 4
@


1.114
log
@Include directive for ssh_config(5); feedback & ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.113 2016/01/14 16:17:40 markus Exp $ */
d104 1
@


1.113
log
@remove roaming support; ok djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.112 2015/11/15 22:26:49 jcs Exp $ */
d182 1
@


1.112
log
@Add an AddKeysToAgent client option which can be set to 'yes', 'no',
'ask', or 'confirm', and defaults to 'no'.  When enabled, a private
key that is used during authentication will be added to ssh-agent if
it is running (with confirmation enabled if set to 'confirm').

Initial version from Joachim Schipper many years ago.

ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.111 2015/09/24 06:15:11 djm Exp $ */
a138 2

	int	use_roaming;
@


1.111
log
@add ssh_config CertificateFile option to explicitly list
a certificate; patch from Meghana Bhat on bz#2436; ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.110 2015/07/10 06:21:53 markus Exp $ */
d102 2
@


1.110
log
@Turn off DSA by default; add HostKeyAlgorithms to the server and
PubkeyAcceptedKeyTypes to the client side, so it still can be
tested or turned back on; feedback and ok djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.109 2015/02/16 22:13:32 djm Exp $ */
d98 5
d202 1
@


1.109
log
@Revise hostkeys@@openssh.com hostkey learning extension.

The client will not ask the server to prove ownership of the private
halves of any hitherto-unseen hostkeys it offers to the client.

Allow UpdateHostKeys option to take an 'ask' argument to let the
user manually review keys offered.

ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.108 2015/01/30 11:43:14 djm Exp $ */
d153 2
a154 1
	char	*hostbased_key_types;
@


1.108
log
@Add a ssh_config HostbasedKeyType option to control which
host public key types are tried during hostbased authentication.

This may be used to prevent too many keys being sent to the server,
and blowing past its MaxAuthTries limit.

bz#2211 based on patch by Iain Morgan; ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.107 2015/01/26 03:04:45 djm Exp $ */
d151 1
a151 1
	int	 update_hostkeys;
d176 4
@


1.107
log
@Host key rotation support.

Add a hostkeys@@openssh.com protocol extension (global request) for
a server to inform a client of all its available host key after
authentication has completed. The client may record the keys in
known_hosts, allowing it to upgrade to better host key algorithms
and a server to gracefully rotate its keys.

The client side of this is controlled by a UpdateHostkeys config
option (default on).

ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.106 2015/01/15 09:40:00 djm Exp $ */
d152 2
@


1.106
log
@sync ssh-keysign, ssh-keygen and some dependencies to the new
buffer/key API; mostly mechanical, ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.105 2014/12/21 22:27:56 djm Exp $ */
d149 3
a151 1
	int	fingerprint_hash;
@


1.105
log
@Add FingerprintHash option to control algorithm used for key
fingerprints. Default changes from MD5 to SHA256 and format
from hex to base64.

Feedback and ok naddy@@ markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.104 2014/12/04 02:24:32 djm Exp $ */
d96 1
a96 1
	Key    *identity_keys[SSH_MAX_IDENTITY_FILES];
@


1.104
log
@add RevokedHostKeys option for the client

Allow textfile or KRL-based revocation of hostkeys.
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.103 2014/10/08 22:20:25 djm Exp $ */
d148 2
@


1.103
log
@Tweak config reparsing with host canonicalisation

Make the second pass through the config files always run when
hostname canonicalisation is enabled.

Add a "Match canonical" criteria that allows ssh_config Match
blocks to trigger only in the second config pass.

Add a -G option to ssh that causes it to parse its configuration
and dump the result to stdout, similar to "sshd -T"

Allow ssh_config Port options set in the second config parse
phase to be applied (they were being ignored).

bz#2267 bz#2286; ok markus
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.102 2014/07/15 15:54:14 millert Exp $ */
d146 2
@


1.102
log
@Add support for Unix domain socket forwarding.  A remote TCP port
may be forwarded to a local Unix domain socket and vice versa or
both ends may be a Unix domain socket.  This is a reimplementation
of the streamlocal patches by William Ahern from:
    http://www.25thandclement.com/~william/projects/streamlocal.html
OK djm@@ markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.101 2014/02/23 20:11:36 djm Exp $ */
d167 1
d172 2
a173 2
int	 process_config_line(Options *, struct passwd *, const char *, char *,
    const char *, int, int *, int);
d175 1
a175 1
    Options *, int);
d179 1
@


1.101
log
@reparse ssh_config and ~/.ssh/config if hostname canonicalisation changes
the hostname. This allows users to write configurations that always
refer to canonical hostnames, e.g.

CanonicalizeHostname yes
CanonicalDomains int.example.org example.org
CanonicalizeFallbackLocal no

Host *.int.example.org
    Compression off
Host *.example.org
    User djm

ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.100 2014/01/29 06:18:35 djm Exp $ */
a18 10
/* Data structure for representing a forwarding request. */

typedef struct {
	char	 *listen_host;		/* Host (address) to listen on. */
	int	  listen_port;		/* Port to forward. */
	char	 *connect_host;		/* Host to connect. */
	int	  connect_port;		/* Port to connect on connect_host. */
	int	  allocated_port;	/* Dynamically allocated listen port */
	int	  handle;		/* Handle for dynamic listen ports */
}       Forward;
d24 1
d38 1
a38 1
	int     gateway_ports;	/* Allow remote connects to forwarded ports. */
d100 1
a100 1
	Forward *local_forwards;
d104 1
a104 1
	Forward *remote_forwards;
d175 1
a175 1
int	 parse_forward(Forward *, const char *, int, int);
d179 2
a180 2
void	 add_local_forward(Options *, const Forward *);
void	 add_remote_forward(Options *, const Forward *);
@


1.100
log
@remove experimental, never-enabled JPAKE code; ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.99 2013/10/16 22:49:38 djm Exp $ */
d179 1
d186 1
@


1.99
log
@s/canonicalise/canonicalize/ for consistency with existing spelling,
e.g. authorized_keys; pointed out by naddy@@
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.98 2013/10/16 02:31:46 djm Exp $ */
a61 1
	int     zero_knowledge_password_authentication;	/* Try jpake */
@


1.98
log
@Implement client-side hostname canonicalisation to allow an explicit
search path of domain suffixes to use to convert unqualified host names
to fully-qualified ones for host key matching.
This is particularly useful for host certificates, which would otherwise
need to list unqualified names alongside fully-qualified ones (and this
causes a number of problems).

"looks fine" markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.97 2013/10/14 22:22:03 djm Exp $ */
d151 3
a153 3
	int	canonicalise_hostname;
	int	canonicalise_max_dots;
	int	canonicalise_fallback_local;
@


1.97
log
@add a "Match" keyword to ssh_config that allows matching on hostname,
user and result of arbitrary commands. "nice work" markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.96 2013/08/20 00:11:38 djm Exp $ */
d32 7
a38 1
#define SSH_MAX_HOSTS_FILES	256
d149 8
d159 4
@


1.96
log
@Add a ssh_config ProxyUseFDPass option that supports the use of
ProxyCommands that establish a connection and then pass a connected
file descriptor back to ssh(1). This allows the ProxyCommand to exit
rather than have to shuffle data back and forth and enables ssh to use
getpeername, etc. to obtain address information just like it does with
regular directly-connected sockets. ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.95 2013/05/16 04:27:50 djm Exp $ */
d162 4
a165 1
int	 read_config_file(const char *, const char *, Options *, int);
d167 1
a167 4

int
process_config_line(Options *, const char *, char *, const char *, int, int *,
    int);
@


1.95
log
@add the ability to ignore specific unrecognised ssh_config options;
bz#866; ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.94 2013/05/16 02:00:34 dtucker Exp $ */
d140 2
@


1.94
log
@Add an optional second argument to RekeyLimit in the client to allow
rekeying based on elapsed time in addition to amount of traffic.
with djm@@ jmc@@, ok djm
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.93 2013/02/22 04:45:09 dtucker Exp $ */
d140 2
@


1.93
log
@Don't complain if IdentityFiles specified in system-wide configs are missing.
ok djm, deraadt.
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.92 2013/02/17 23:16:57 dtucker Exp $ */
d113 1
@


1.92
log
@Keep track of which IndentityFile options were manually supplied and which
were default options, and don't warn if the latter are missing.  ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.91 2011/09/23 07:45:05 markus Exp $ */
d152 3
d161 2
a162 1
process_config_line(Options *, const char *, char *, const char *, int, int *);
@


1.91
log
@unbreak remote portforwarding with dynamic allocated listen ports:
1) send the actual listen port in the open message (instead of 0).
   this allows multiple forwardings with a dynamic listen port
2) update the matching permit-open entry, so we can identify where
   to connect to
report: den at skbkontur.ru and P. Szczygielski
feedback and ok djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.90 2011/05/24 07:15:47 djm Exp $ */
d99 1
d162 1
@


1.90
log
@Remove undocumented legacy options UserKnownHostsFile2 and
GlobalKnownHostsFile2 by making UserKnownHostsFile/GlobalKnownHostsFile
accept multiple paths per line and making their defaults include
known_hosts2; ok markus
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.89 2011/05/06 21:34:32 djm Exp $ */
d27 1
@


1.89
log
@Add a RequestTTY ssh_config option to allow configuration-based
control over tty allocation (like -t/-T); ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.88 2010/11/13 23:27:50 djm Exp $ */
d30 2
a31 1
#define MAX_SEND_ENV	256
d87 4
a90 4
	char   *system_hostfile;/* Path for /etc/ssh/ssh_known_hosts. */
	char   *user_hostfile;	/* Path for $HOME/.ssh/known_hosts. */
	char   *system_hostfile2;
	char   *user_hostfile2;
@


1.88
log
@allow ssh and sshd to set arbitrary TOS/DSCP/QoS values instead of
hardcoding lowdelay/throughput.

bz#1733 patch from philipp AT redfish-solutions.com; ok markus@@ deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.87 2010/09/22 05:01:29 djm Exp $ */
d135 1
d143 5
@


1.87
log
@add a KexAlgorithms knob to the client and server configuration to allow
selection of which key exchange methods are used by ssh(1) and sshd(8)
and their order of preference.

ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.86 2010/07/19 09:15:12 djm Exp $ */
d62 2
@


1.86
log
@add a "ControlPersist" option that automatically starts a background
ssh(1) multiplex master when connecting. This connection can stay alive
indefinitely, or can be set to automatically close after a user-specified
duration of inactivity. bz#1330 - patch by dwmw2 AT infradead.org, but
further hacked on by wmertens AT cisco.com, apb AT cequrux.com,
martin-mindrot-bugzilla AT earth.li and myself; "looks ok" markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.85 2010/06/25 23:15:36 djm Exp $ */
d76 1
@


1.85
log
@Add X11ForwardTimeout option to specify timeout for untrusted X11
authentication cookies to avoid fallback in X11 code to fully-trusted
implicit authentication using SO_PEERCRED described at:
http://lists.x.org/archives/xorg-devel/2010-May/008636.html

After the X11ForwardTimeout has expired the client will now refuse
incoming X11 channel opens.

based on patch from Tavis Ormandy; "nice" markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.84 2010/06/25 07:14:46 djm Exp $ */
d117 2
@


1.84
log
@bz#1327: remove hardcoded limit of 100 permitopen clauses and port
forwards per direction; ok markus@@ stevesk@@
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.83 2010/05/16 12:55:51 markus Exp $ */
d35 1
@


1.83
log
@mux support for remote forwarding with dynamic port allocation,
use with
	LPORT=`ssh -S muxsocket -R0:localhost:25 -O forward somehost`
feedback and ok djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.82 2010/02/08 10:50:20 markus Exp $ */
d97 1
a97 1
	Forward local_forwards[SSH_MAX_FORWARDS_PER_DIRECTION];
d101 1
a101 1
	Forward remote_forwards[SSH_MAX_FORWARDS_PER_DIRECTION];
@


1.82
log
@replace our obsolete smartcard code with PKCS#11.
	ftp://ftp.rsasecurity.com/pub/pkcs/pkcs-11/v2-20/pkcs-11v2-20.pdf
ssh(1) and ssh-keygen(1) use dlopen(3) directly to talk to a PKCS#11
provider (shared library) while ssh-agent(1) delegates PKCS#11 to
a forked a ssh-pkcs11-helper process.
PKCS#11 is currently a compile time option.
feedback and ok djm@@; inspired by patches from Alon Bar-Lev
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.81 2010/01/09 23:04:13 dtucker Exp $ */
d26 1
@


1.81
log
@Remove RoutingDomain from ssh since it's now not needed.  It can be replaced
with "route exec" or "nc -V" as a proxycommand.  "route exec" also ensures
that trafic such as DNS lookups stays withing the specified routingdomain.

For example (from reyk):
# route -T 2 exec /usr/sbin/sshd
or inherited from the parent process
$ route -T 2 exec sh
$ ssh 10.1.2.3

ok deraadt@@ markus@@ stevesk@@ reyk@@
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.79 2009/06/27 09:35:06 andreas Exp $ */
d87 1
a87 1
	char   *smartcard_device; /* Smartcard reader device */
@


1.80
log
@Allow to set the rdomain in ssh/sftp/scp/sshd and ssh-keyscan.

ok markus@@
@
text
@a127 2
	int	rdomain;	/* routing domain a.k.a. VRF */

@


1.79
log
@Add client option UseRoaming. It doesn't do anything yet but will
control whether the client tries to use roaming if enabled on the
server. From Martin Forssen.
ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.78 2009/02/12 03:00:56 djm Exp $ */
d127 2
@


1.78
log
@support remote port forwarding with a zero listen port (-R0:...) to
dyamically allocate a listen port at runtime (this is actually
specified in rfc4254); bz#1003 ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.77 2009/01/22 10:02:34 djm Exp $ */
d125 2
@


1.77
log
@make a2port() return -1 when it encounters an invalid port number
rather than 0, which it will now treat as valid (needed for future work)

adjust current consumers of a2port() to check its return value is <= 0,
which in turn required some things to be converted from u_short => int

make use of int vs. u_short consistent in some other places too

feedback & ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.76 2008/11/04 08:22:13 djm Exp $ */
d137 1
a137 1
int	 parse_forward(Forward *, const char *, int);
@


1.76
log
@Add support for an experimental zero-knowledge password authentication
method using the J-PAKE protocol described in F. Hao, P. Ryan,
"Password Authenticated Key Exchange by Juggling", 16th Workshop on
Security Protocols, Cambridge, April 2008.

This method allows password-based authentication without exposing
the password to the server. Instead, the client and server exchange
cryptographic proofs to demonstrate of knowledge of the password while
revealing nothing useful to an attacker or compromised endpoint.

This is experimental, work-in-progress code and is presently
compiled-time disabled (turn on -DJPAKE in Makefile.inc).

"just commit it.  It isn't too intrusive." deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.75 2008/11/01 17:40:33 stevesk Exp $ */
d23 1
a23 1
	u_short	  listen_port;		/* Port to forward. */
d25 1
a25 1
	u_short	  connect_port;		/* Port to connect on connect_host. */
@


1.75
log
@merge dynamic forward parsing into parse_forward(); 'i think this is OK' djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.74 2008/06/26 11:46:31 grunk Exp $ */
d52 1
@


1.74
log
@Move SSH Fingerprint Visualization away from sharing the config option
CheckHostIP to an own config option named VisualHostKey.
While there, fix the behaviour that ssh would draw a random art picture
on every newly seen host even when the option was not enabled.

prodded by deraadt@@, discussions,
help and ok markus@@ djm@@ dtucker@@
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.73 2008/06/11 21:01:35 grunk Exp $ */
d136 1
a136 1
int	 parse_forward(Forward *, const char *);
@


1.73
log
@Introduce SSH Fingerprint ASCII Visualization, a technique inspired by the
graphical hash visualization schemes known as "random art", and by
Dan Kaminsky's musings on the subject during a BlackOp talk at the
23C3 in Berlin.

Scientific publication (original paper):
"Hash Visualization: a New Technique to improve Real-World Security",
Perrig A. and Song D., 1999, International Workshop on Cryptographic
Techniques and E-Commerce (CrypTEC '99)
http://sparrow.ece.cmu.edu/~adrian/projects/validation/validation.pdf

The algorithm used here is a worm crawling over a discrete plane,
leaving a trace (augmenting the field) everywhere it goes.
Movement is taken from dgst_raw 2bit-wise.  Bumping into walls
makes the respective movement vector be ignored for this turn,
thus switching to the other color of the chessboard.
Graphs are not unambiguous for now, because circles in graphs can be
walked in either direction.

discussions with several people,
help, corrections and ok markus@@ djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.72 2008/01/19 23:09:49 djm Exp $ */
d123 1
a125 4

#define SSHCTL_CHECKHOSTIP_NO	0
#define SSHCTL_CHECKHOSTIP_YES	1
#define SSHCTL_CHECKHOSTIP_FPR	2
@


1.72
log
@promote rekeylimit to a int64 so it can hold the maximum useful limit
of 2^32; report and patch from Jan.Pechanec AT Sun.COM, ok dtucker@@
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.71 2006/08/03 03:34:42 deraadt Exp $ */
d125 4
@


1.71
log
@almost entirely get rid of the culture of ".h files that include .h files"
ok djm, sort of ok stevesk
makes the pain stop in one easy step
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.70 2006/07/11 18:50:48 markus Exp $ */
d103 1
a103 1
	int	rekey_limit;
@


1.70
log
@add ExitOnForwardFailure: terminate the connection if ssh(1)
cannot set up all requested dynamic, local, and remote port
forwardings. ok djm, dtucker, stevesk, jmc
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.69 2006/03/25 22:22:43 djm Exp $ */
a17 2

#include "key.h"
@


1.69
log
@standardise spacing in $OpenBSD$ tags; requested by deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.68 2005/12/06 22:38:27 reyk Exp $ */
d37 1
@


1.68
log
@Add support for tun(4) forwarding over OpenSSH, based on an idea and
initial channel code bits by markus@@. This is a simple and easy way to
use OpenSSH for ad hoc virtual private network connections, e.g.
administrative tunnels or secure wireless access. It's based on a new
ssh channel and works similar to the existing TCP forwarding support,
except that it depends on the tun(4) network interface on both ends of
the connection for layer 2 or layer 3 tunneling. This diff also adds
support for LocalCommand in the ssh(1) client.

ok djm@@, markus@@, jmc@@ (manpages), tested and discussed with others
@
text
@d1 1
a1 1
/*	$OpenBSD: readconf.h,v 1.67 2005/06/08 11:25:09 djm Exp $	*/
@


1.68.2.1
log
@upgrade to OpenSSH 4.4
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.71 2006/08/03 03:34:42 deraadt Exp $ */
d19 2
a36 1
	int     exit_on_forward_failure;	/* Exit if bind(2) fails for -L/-R */
@


1.67
log
@add ControlMaster=auto/autoask options to support opportunistic multiplexing;
tested avsm@@ and jakob@@, ok markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: readconf.h,v 1.66 2005/03/01 10:40:27 djm Exp $	*/
d117 8
@


1.67.2.1
log
@upgrade to OpenSSH 4.3
@
text
@d1 1
a1 1
/*	$OpenBSD: readconf.h,v 1.68 2005/12/06 22:38:27 reyk Exp $	*/
a116 8

	int	tun_open;	/* tun(4) */
	int     tun_local;	/* force tun device (optional) */
	int     tun_remote;	/* force tun device (optional) */

	char	*local_command;
	int	permit_local_command;

@


1.67.2.2
log
@upgrade to OpenSSH 4.4
@
text
@d1 1
a1 1
/* $OpenBSD: readconf.h,v 1.71 2006/08/03 03:34:42 deraadt Exp $ */
d19 2
a36 1
	int     exit_on_forward_failure;	/* Exit if bind(2) fails for -L/-R */
@


1.66
log
@add support for hashing host names and addresses added to known_hosts files,
to improve privacy of which hosts user have been visiting; ok markus@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: readconf.h,v 1.65 2005/03/01 10:09:52 djm Exp $	*/
d119 5
@


1.66.2.1
log
@upgrade to OpenSSH 4.2
@
text
@d1 1
a1 1
/*	$OpenBSD: readconf.h,v 1.67 2005/06/08 11:25:09 djm Exp $	*/
a118 5
#define SSHCTL_MASTER_NO	0
#define SSHCTL_MASTER_YES	1
#define SSHCTL_MASTER_AUTO	2
#define SSHCTL_MASTER_ASK	3
#define SSHCTL_MASTER_AUTO_ASK	4
@


1.66.2.2
log
@upgrade to OpenSSH 4.3
@
text
@d1 1
a1 1
/*	$OpenBSD: readconf.h,v 1.68 2005/12/06 22:38:27 reyk Exp $	*/
a116 8

	int	tun_open;	/* tun(4) */
	int     tun_local;	/* force tun device (optional) */
	int     tun_remote;	/* force tun device (optional) */

	char	*local_command;
	int	permit_local_command;

@


1.65
log
@bz#413: allow optional specification of bind address for port forwardings.
Patch originally by Dan Astorian, but worked on by several people
Adds GatewayPorts=clientspecified option on server to allow remote forwards
to bind to client-specified ports.

ok markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: readconf.h,v 1.64 2004/07/11 17:48:47 deraadt Exp $	*/
d115 2
@


1.64
log
@spaces
@
text
@d1 1
a1 1
/*	$OpenBSD: readconf.h,v 1.63 2004/06/13 15:03:02 djm Exp $	*/
d24 4
a27 3
	u_short	  port;		/* Port to forward. */
	char	 *host;		/* Host to connect. */
	u_short	  host_port;	/* Port to connect on host. */
d121 1
d126 2
a127 2
void	 add_local_forward(Options *, u_short, const char *, u_short);
void	 add_remote_forward(Options *, u_short, const char *, u_short);
@


1.64.2.1
log
@upgrade to OpenSSH 4.0
@
text
@d1 1
a1 1
/*	$OpenBSD: readconf.h,v 1.66 2005/03/01 10:40:27 djm Exp $	*/
d24 3
a26 4
	char	 *listen_host;		/* Host (address) to listen on. */
	u_short	  listen_port;		/* Port to forward. */
	char	 *connect_host;		/* Host to connect. */
	u_short	  connect_port;		/* Port to connect on connect_host. */
a113 2

	int	hash_known_hosts;
a119 1
int	 parse_forward(Forward *, const char *);
d124 2
a125 2
void	 add_local_forward(Options *, const Forward *);
void	 add_remote_forward(Options *, const Forward *);
@


1.64.2.2
log
@upgrade to OpenSSH 4.2
@
text
@d1 1
a1 1
/*	$OpenBSD: readconf.h,v 1.67 2005/06/08 11:25:09 djm Exp $	*/
a118 5
#define SSHCTL_MASTER_NO	0
#define SSHCTL_MASTER_YES	1
#define SSHCTL_MASTER_AUTO	2
#define SSHCTL_MASTER_ASK	3
#define SSHCTL_MASTER_AUTO_ASK	4
@


1.63
log
@implement session multiplexing in the client (the server has supported this
since 2.0); ok markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: readconf.h,v 1.62 2004/04/27 09:46:37 djm Exp $	*/
d106 1
a106 1
	int	server_alive_interval; 
@


1.62
log
@bz #815: implement ability to pass specified environment variables from the
client to the server; ok markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: readconf.h,v 1.61 2004/04/18 23:10:26 djm Exp $	*/
d111 3
@


1.61
log
@perform strict ownership and modes checks for ~/.ssh/config files, as these
can be used to execute arbitrary programs; ok markus@@

NB. ssh will now exit when it detects a config with poor permissions
@
text
@d1 1
a1 1
/*	$OpenBSD: readconf.h,v 1.60 2004/03/05 10:53:58 markus Exp $	*/
d30 2
d108 3
@


1.60
log
@add IdentitiesOnly; ok djm@@, pb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: readconf.h,v 1.59 2003/12/16 15:49:51 markus Exp $	*/
d111 1
a111 1
int	 read_config_file(const char *, const char *, Options *);
@


1.60.2.1
log
@upgrade to OpenSSH 3.9
@
text
@d1 1
a1 1
/*	$OpenBSD: readconf.h,v 1.64 2004/07/11 17:48:47 deraadt Exp $	*/
a29 2
#define MAX_SEND_ENV	256

d104 1
a104 1
	int	server_alive_interval;
a105 6

	int     num_send_env;
	char   *send_env[MAX_SEND_ENV];

	char	*control_path;
	int	control_master;
d111 1
a111 1
int	 read_config_file(const char *, const char *, Options *, int);
@


1.60.2.2
log
@upgrade to OpenSSH 4.0
@
text
@d1 1
a1 1
/*	$OpenBSD: readconf.h,v 1.66 2005/03/01 10:40:27 djm Exp $	*/
d24 3
a26 4
	char	 *listen_host;		/* Host (address) to listen on. */
	u_short	  listen_port;		/* Port to forward. */
	char	 *connect_host;		/* Host to connect. */
	u_short	  connect_port;		/* Port to connect on connect_host. */
a113 2

	int	hash_known_hosts;
a119 1
int	 parse_forward(Forward *, const char *);
d124 2
a125 2
void	 add_local_forward(Options *, const Forward *);
void	 add_remote_forward(Options *, const Forward *);
@


1.59
log
@application layer keep alive (ServerAliveInterval ServerAliveCountMax)
for ssh(1), similar to the sshd(8) option; ok beck@@; with help from
jmc and dtucker@@
@
text
@d1 1
a1 1
/*	$OpenBSD: readconf.h,v 1.58 2003/12/09 21:53:36 markus Exp $	*/
d103 1
@


1.58
log
@rename keepalive to tcpkeepalive; the old name causes too much
confusion; ok djm, dtucker; with help from jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: readconf.h,v 1.57 2003/11/21 11:57:03 djm Exp $	*/
d103 2
@


1.57
log
@unexpand and delete whitespace at EOL; ok markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: readconf.h,v 1.56 2003/10/11 08:24:08 markus Exp $	*/
d56 1
a56 1
	int     keepalives;	/* Set SO_KEEPALIVE. */
@


1.56
log
@remote x11 clients are now untrusted by default, uses xauth(8) to generate
untrusted cookies; ForwardX11Trusted=yes restores old behaviour.
ok deraadt; feedback and ok djm/fries
@
text
@d1 1
a1 1
/*	$OpenBSD: readconf.h,v 1.55 2003/09/01 18:15:50 markus Exp $	*/
d64 1
a64 1
				 	 * aborting connection attempt */
@


1.55
log
@remove unused kerberos code; ok henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: readconf.h,v 1.54 2003/08/22 10:56:09 markus Exp $	*/
d33 1
@


1.55.2.1
log
@upgrade to OpenSSH 3.8
@
text
@d1 1
a1 1
/*	$OpenBSD: readconf.h,v 1.59 2003/12/16 15:49:51 markus Exp $	*/
a32 1
	int     forward_x11_trusted;	/* Trust Forward X11 display. */
d55 1
a55 1
	int     tcp_keep_alive;	/* Set SO_KEEPALIVE. */
d63 1
a63 1
					 * aborting connection attempt */
a101 2
	int	server_alive_interval; 
	int	server_alive_count_max;
@


1.55.2.2
log
@upgrade to OpenSSH 3.9
@
text
@d1 1
a1 1
/*	$OpenBSD: readconf.h,v 1.64 2004/07/11 17:48:47 deraadt Exp $	*/
a29 2
#define MAX_SEND_ENV	256

d103 1
a103 2
	int	identities_only;
	int	server_alive_interval;
a104 6

	int     num_send_env;
	char   *send_env[MAX_SEND_ENV];

	char	*control_path;
	int	control_master;
d110 1
a110 1
int	 read_config_file(const char *, const char *, Options *, int);
@


1.54
log
@support GSS API user authentication; patches from Simon Wilkinson,
stripped down and tested by Jakob and myself.
@
text
@d1 1
a1 1
/*	$OpenBSD: readconf.h,v 1.53 2003/08/13 08:46:30 markus Exp $	*/
a42 2
	int     kerberos_authentication;	/* Try Kerberos authentication. */
	int     kerberos_tgt_passing;	/* Try Kerberos TGT passing. */
@


1.53
log
@remove RhostsAuthentication; suggested by djm@@ before; ok djm@@, deraadt@@,
fgsch@@, miod@@, henning@@, jakob@@ and others
@
text
@d1 1
a1 1
/*	$OpenBSD: readconf.h,v 1.52 2003/07/22 13:35:22 markus Exp $	*/
d45 2
@


1.52
log
@remove (already disabled) KRB4/AFS support, re-enable -k in ssh(1);
test+ok henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: readconf.h,v 1.51 2003/07/03 08:09:06 djm Exp $	*/
a35 1
	int     rhosts_authentication;	/* Try rhosts authentication. */
@


1.51
log
@fix AddressFamily option in config file, from brent@@graveland.net; ok markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: readconf.h,v 1.50 2003/05/15 14:55:25 djm Exp $	*/
a45 1
	int     afs_token_passing;	/* Try AFS token passing. */
@


1.50
log
@add a ConnectTimeout option to ssh, based on patch from
Jean-Charles Longuet (jclonguet at free.fr); portable #207 ok markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: readconf.h,v 1.49 2003/05/15 01:48:10 jakob Exp $	*/
d61 1
@


1.49
log
@always parse kerberos options. ok djm@@ markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: readconf.h,v 1.48 2003/05/14 18:16:20 jakob Exp $	*/
d63 2
@


1.48
log
@add experimental support for verifying hos keys using DNS as described
in draft-ietf-secsh-dns-xx.txt. more information in README.dns.
ok markus@@ and henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: readconf.h,v 1.47 2003/04/02 09:48:07 markus Exp $	*/
a43 1
#if defined(KRB4) || defined(KRB5)
a44 2
#endif
#if defined(AFS) || defined(KRB5)
a45 2
#endif
#ifdef AFS
a46 1
#endif
@


1.47
log
@reapply rekeying chage, tested by henning@@, ok djm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: readconf.h,v 1.46 2003/04/01 10:22:21 markus Exp $	*/
d89 1
@


1.46
log
@backout rekeying changes (for 3.6.1)
@
text
@d1 1
a1 1
/*	$OpenBSD: readconf.h,v 1.45 2003/04/01 10:10:23 markus Exp $	*/
d104 1
@


1.45
log
@rekeying bugfixes and automatic rekeying:

* both client and server rekey _automatically_
      (a) after 2^31 packets, because after 2^32 packets
          the sequence number for packets wraps
      (b) after 2^(blocksize_in_bits/4) blocks
  (see: http://www.ietf.org/internet-drafts/draft-ietf-secsh-newmodes-00.txt)
  (a) and (b) are _enabled_ by default, and only disabled for known
  openssh versions, that don't support rekeying properly.
* client option 'RekeyLimit'
* do not reply to requests during rekeying
@
text
@d1 1
a1 1
/*	$OpenBSD: readconf.h,v 1.44 2002/11/07 22:08:07 markus Exp $	*/
a103 1
	int	rekey_limit;
@


1.44
log
@we cannot use HostbasedAuthentication for enabling ssh-keysign(8),
because HostbasedAuthentication might be enabled based on the
target host and ssh-keysign(8) does not know the remote hostname
and not trust ssh(1) about the hostname, so we add a new option
EnableSSHKeysign; ok djm@@, report from zierke@@informatik.uni-hamburg.de
@
text
@d1 1
a1 1
/*	$OpenBSD: readconf.h,v 1.43 2002/06/08 05:17:01 markus Exp $	*/
d104 1
@


1.44.2.1
log
@upgrade to OpenSSH 3.7
@
text
@d1 1
a1 1
/*	$OpenBSD: readconf.h,v 1.55 2003/09/01 18:15:50 markus Exp $	*/
d36 1
d44 9
a52 2
	int     gss_authentication;	/* Try GSS authentication */
	int     gss_deleg_creds;	/* Delegate GSS credentials */
a66 1
	int     address_family;
a68 2
	int     connection_timeout;	/* Max time (seconds) before
				 	 * aborting connection attempt */
a88 1
	int	verify_host_key_dns;	/* Verify host key using DNS */
a103 1
	int	rekey_limit;
@


1.44.2.2
log
@upgrade to OpenSSH 3.8upgrade to OpenSSH 3.8upgrade to OpenSSH 3.8
@
text
@d1 1
a1 1
/*	$OpenBSD: readconf.h,v 1.59 2003/12/16 15:49:51 markus Exp $	*/
a32 1
	int     forward_x11_trusted;	/* Trust Forward X11 display. */
d55 1
a55 1
	int     tcp_keep_alive;	/* Set SO_KEEPALIVE. */
d63 1
a63 1
					 * aborting connection attempt */
a101 2
	int	server_alive_interval; 
	int	server_alive_count_max;
@


1.43
log
@deprecate FallBackToRsh and UseRsh; patch from djm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: readconf.h,v 1.42 2002/03/04 17:27:39 stevesk Exp $	*/
d102 2
@


1.43.2.1
log
@Update to OpenSSH 3.6
@
text
@d1 1
a1 1
/*	$OpenBSD: readconf.h,v 1.44 2002/11/07 22:08:07 markus Exp $	*/
a101 2

	int	enable_ssh_keysign;
@


1.43.2.2
log
@upgrade to OpenSSH 3.7
@
text
@d1 1
a1 1
/*	$OpenBSD: readconf.h,v 1.55 2003/09/01 18:15:50 markus Exp $	*/
d36 1
d44 9
a52 2
	int     gss_authentication;	/* Try GSS authentication */
	int     gss_deleg_creds;	/* Delegate GSS credentials */
a66 1
	int     address_family;
a68 2
	int     connection_timeout;	/* Max time (seconds) before
				 	 * aborting connection attempt */
a88 1
	int	verify_host_key_dns;	/* Verify host key using DNS */
a103 1
	int	rekey_limit;
@


1.42
log
@$OpenBSD$ and RCSID() cleanup: don't use RCSID() in .h files; add
missing RCSID() to .c files and remove dup /*$OpenBSD$*/ from .c
files.  ok markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: readconf.h,v 1.41 2002/02/10 01:07:05 deraadt Exp $	*/
a56 2
	int     fallback_to_rsh;/* Use rsh if cannot connect with ssh. */
	int     use_rsh;	/* Always use rsh (don\'t try ssh). */
@


1.42.2.1
log
@Pull in OpenSSH-3.4
@
text
@d1 1
a1 1
/*	$OpenBSD: readconf.h,v 1.43 2002/06/08 05:17:01 markus Exp $	*/
d57 2
@


1.42.2.2
log
@Merge OpenSSH 3.6.1
@
text
@d1 1
a1 1
/*	$OpenBSD: readconf.h,v 1.46 2003/04/01 10:22:21 markus Exp $	*/
a101 2

	int	enable_ssh_keysign;
@


1.41
log
@more /etc/ssh; openbsd@@davidkrause.com
@
text
@d1 2
a14 2

/* RCSID("$OpenBSD: readconf.h,v 1.40 2001/10/01 21:51:16 markus Exp $"); */
@


1.40
log
@add NoHostAuthenticationForLocalhost; note that the hostkey is
now check for localhost, too.
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: readconf.h,v 1.39 2001/09/19 19:24:18 stevesk Exp $"); */
d84 1
a84 1
	char   *system_hostfile;/* Path for /etc/ssh_known_hosts. */
@


1.40.2.1
log
@Update to OpenSSH-3.1 on 3.0-stable branch
@
text
@a0 2
/*	$OpenBSD: readconf.h,v 1.42 2002/03/04 17:27:39 stevesk Exp $	*/

d14 2
d84 1
a84 1
	char   *system_hostfile;/* Path for /etc/ssh/ssh_known_hosts. */
@


1.40.2.2
log
@apply the necessary openbsd30_3.1.patch patch.
--
Ok'd by markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: readconf.h,v 1.40.2.1 2002/03/07 17:37:47 jason Exp $	*/
d84 1
a84 1
	char   *system_hostfile;/* Path for /etc/ssh_known_hosts. */
@


1.40.2.3
log
@Update OpenSSH to version 3.3 (with local changes, configuration files still
living in /etc and privsep user being nobody).
@
text
@d1 1
a1 1
/*	$OpenBSD: readconf.h,v 1.40.2.2 2002/03/08 15:17:18 brad Exp $	*/
d57 2
@


1.39
log
@add ClearAllForwardings ssh option and set it in scp and sftp; ok markus@@
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: readconf.h,v 1.38 2001/09/03 20:58:33 stevesk Exp $"); */
d104 1
@


1.38
log
@fatal() for nonexistent -Fssh_config. ok markus@@
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: readconf.h,v 1.37 2001/08/01 22:03:33 markus Exp $"); */
d103 1
@


1.37
log
@use strings instead of ints for smartcard reader ids
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: readconf.h,v 1.36 2001/07/31 09:28:44 jakob Exp $"); */
d108 1
a108 1
void	 read_config_file(const char *, const char *, Options *);
@


1.36
log
@add 'SmartcardDevice' client option to specify which smartcard device is used
to access a smartcard used for storing the user's private RSA key. ok markus@@.
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: readconf.h,v 1.35 2001/06/26 17:27:24 markus Exp $"); */
d90 1
a90 1
	int	smartcard_device; /* Smartcard reader device */
@


1.35
log
@remove comments from .h, since they are cut&paste from the .c files
and out of sync
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: readconf.h,v 1.34 2001/06/26 16:15:24 dugsong Exp $"); */
d90 1
@


1.34
log
@Kerberos v5 support for SSH1, mostly from Assar Westerlund <assar@@freebsd.org> and Bjorn Gronvall <bg@@sics.se>. markus@@ ok
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: readconf.h,v 1.33 2001/06/26 06:32:58 itojun Exp $"); */
d105 4
a108 19
/*
 * Initializes options to special values that indicate that they have not yet
 * been set.  Read_config_file will only set options with this value. Options
 * are processed in the following order: command line, user config file,
 * system config file.  Last, fill_default_options is called.
 */
void    initialize_options(Options *);

/*
 * Called after processing other sources of option data, this fills those
 * options for which no value has been specified with their default values.
 */
void    fill_default_options(Options *);

/*
 * Processes a single option line as used in the configuration files. This
 * only sets those values that have not already been set. Returns 0 for legal
 * options
 */
d112 2
a113 21
/*
 * Reads the config file and modifies the options accordingly.  Options
 * should already be initialized before this call.  This never returns if
 * there is an error.  If the file does not exist, this returns immediately.
 */
void
read_config_file(const char *, const char *, Options *);

/*
 * Adds a local TCP/IP port forward to options.  Never returns if there is an
 * error.
 */
void
add_local_forward(Options *, u_short, const char *, u_short);

/*
 * Adds a remote TCP/IP port forward to options.  Never returns if there is
 * an error.
 */
void
add_remote_forward(Options *, u_short, const char *, u_short);
@


1.33
log
@prototype pedant.  not very creative...
- () -> (void)
- no variable names
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: readconf.h,v 1.32 2001/05/18 14:13:29 markus Exp $"); */
d44 5
a48 3
#ifdef KRB4
	int     kerberos_authentication;	/* Try Kerberos
						 * authentication. */
a50 1
	int     kerberos_tgt_passing;	/* Try Kerberos tgt passing. */
@


1.32
log
@improved kbd-interactive support. work by per@@appgate.com and me
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: readconf.h,v 1.31 2001/04/30 11:18:52 markus Exp $"); */
d110 1
a110 1
void    initialize_options(Options * options);
d116 1
a116 1
void    fill_default_options(Options * options);
d124 1
a124 3
process_config_line(Options * options, const char *host,
    char *line, const char *filename, int linenum,
    int *activep);
d132 1
a132 2
read_config_file(const char *filename, const char *host,
    Options * options);
d139 1
a139 2
add_local_forward(Options * options, u_short port, const char *host,
    u_short host_port);
d146 1
a146 2
add_remote_forward(Options * options, u_short port, const char *host,
    u_short host_port);
@


1.31
log
@implement 'ssh -b bind_address' like 'telnet -b'
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: readconf.h,v 1.30 2001/04/17 10:53:25 markus Exp $"); */
d42 1
a42 1
	int     challenge_reponse_authentication;
@


1.30
log
@add HostKeyAlgorithms; based on patch from res@@shore.net; ok provos@@
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: readconf.h,v 1.29 2001/04/12 19:15:25 markus Exp $"); */
d88 1
@


1.30.2.1
log
@Pull in OpenSSH-2.9.9
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: readconf.h,v 1.39 2001/09/19 19:24:18 stevesk Exp $"); */
d42 1
a42 1
	int     challenge_response_authentication;
d44 3
a46 5
#if defined(KRB4) || defined(KRB5)
	int     kerberos_authentication;	/* Try Kerberos authentication. */
#endif
#if defined(AFS) || defined(KRB5)
	int     kerberos_tgt_passing;	/* Try Kerberos TGT passing. */
d49 1
a87 2
	char   *bind_address;	/* local socket address for connection to sshd */
	char   *smartcard_device; /* Smartcard reader device */
a99 1
	int	clear_forwardings;
d103 19
a121 4
void     initialize_options(Options *);
void     fill_default_options(Options *);
int	 read_config_file(const char *, const char *, Options *);

d123 28
a150 4
process_config_line(Options *, const char *, char *, const char *, int, int *);

void	 add_local_forward(Options *, u_short, const char *, u_short);
void	 add_remote_forward(Options *, u_short, const char *, u_short);
@


1.30.2.2
log
@Merge OpenSSH 3.0
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: readconf.h,v 1.30.2.1 2001/09/27 19:03:55 jason Exp $"); */
a103 1
	int	no_host_authentication_for_localhost;
@


1.30.2.3
log
@Merge OpenSSH 3.1, keeping /etc as configuration files directory.
(i.e. OpenSSH 3.1 + openbsd29_3.1.patch)
@
text
@a0 2
/*	$OpenBSD: readconf.h,v 1.42 2002/03/04 17:27:39 stevesk Exp $	*/

d13 2
@


1.29
log
@implement HostbasedAuthentication (= RhostRSAAuthentication for ssh v2)
similar to RhostRSAAuthentication unless you enable (the experimental)
HostbasedUsesNameFromPacketOnly option.  please test. :)
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: readconf.h,v 1.28 2001/03/10 17:51:04 markus Exp $"); */
d75 1
@


1.28
log
@add PreferredAuthentications
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: readconf.h,v 1.27 2001/03/08 21:42:32 markus Exp $"); */
d41 1
@


1.27
log
@implement client side of SSH2_MSG_USERAUTH_PK_OK (test public key ->
no need to do enter passphrase or do expensive sign operations if the
server does not accept key).
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: readconf.h,v 1.26 2001/02/11 12:59:25 markus Exp $"); */
d85 1
@


1.26
log
@1) clean up the MAC support for SSH-2
2) allow you to specify the MAC with 'ssh -m'
3) or the 'MACs' keyword in ssh(d)_config
4) add hmac-{md5,sha1}-96
	ok stevesk@@, provos@@
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: readconf.h,v 1.25 2001/01/22 23:06:39 markus Exp $"); */
d19 2
d88 1
a88 1
	int	identity_files_type[SSH_MAX_IDENTITY_FILES];
@


1.25
log
@rename skey -> challenge response.
auto-enable kbd-interactive for ssh2 if challenge-reponse is enabled.
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: readconf.h,v 1.24 2000/12/27 12:30:20 markus Exp $"); */
d71 1
@


1.24
log
@new option: HostKeyAlias: allows the user to record the host key
under a different name. This is useful for ssh tunneling over
forwarded connections or if you run multiple sshd's on different
ports on the same machine.
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: readconf.h,v 1.23 2000/11/12 19:50:37 markus Exp $"); */
d39 2
a40 1
	int     skey_authentication;	/* Try S/Key or TIS authentication. */
@


1.23
log
@add support for RSA to SSH2.  please test.

there are now 3 types of keys: RSA1 is used by ssh-1 only,
RSA and DSA are used by SSH2.

you can use 'ssh-keygen -t rsa -f ssh2_rsa_file' to generate RSA
keys for SSH2 and use the RSA keys for hostkeys or for user keys.

SSH2 RSA or DSA keys are added to .ssh/authorised_keys2 as before.

IdentityFile2, HostDsaKey and DSAAuthentication are obsolete.
you can use multiple IdentityFile and HostKey for all types of keys.

the option DSAAuthentication is replaced by PubkeyAuthetication.
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: readconf.h,v 1.22 2000/10/11 20:14:39 markus Exp $"); */
d72 1
@


1.22
log
@add support for s/key (kbd-interactive) to ssh2, based on work by mkiernan@@avantgo.com and me
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: readconf.h,v 1.21 2000/09/07 20:27:53 deraadt Exp $"); */
d38 1
a38 1
	int     dsa_authentication;	/* Try DSA authentication. */
d81 1
a81 2
	int     num_identity_files;	/* Number of files for RSA identities. */
	int     num_identity_files2;	/* DSA identities. */
d83 1
a83 1
	char   *identity_files2[SSH_MAX_IDENTITY_FILES];
@


1.22.2.1
log
@Pull in OpenSSH 2.5.0
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: readconf.h,v 1.26 2001/02/11 12:59:25 markus Exp $"); */
d38 2
a39 3
	int     pubkey_authentication;	/* Try ssh2 pubkey authentication. */
	int     challenge_reponse_authentication;
					/* Try S/Key or TIS, authentication. */
a69 1
	char   *macs;		/* SSH2 macs in order of preference. */
a71 1
	char   *host_key_alias;	/* hostname alias for .ssh/known_hosts */
d81 2
a82 1
	int     num_identity_files;	/* Number of files for RSA/DSA identities. */
d84 1
a84 1
	int	identity_files_type[SSH_MAX_IDENTITY_FILES];
@


1.22.2.2
log
@Pull in OpenSSH-2.5.1
@
text
@@


1.22.2.3
log
@Pull in OpenSSH-2.5.2 for 2.8 branch.
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: readconf.h,v 1.28 2001/03/10 17:51:04 markus Exp $"); */
a18 2
#include "key.h"

a82 1
	char   *preferred_authentications;
d86 1
a86 1
	Key    *identity_keys[SSH_MAX_IDENTITY_FILES];
@


1.22.2.4
log
@Pull in OpenSSH-2.9 to 2.8 branch.
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: readconf.h,v 1.30 2001/04/17 10:53:25 markus Exp $"); */
a40 1
	int     hostbased_authentication;	/* ssh2's rhosts_rsa */
a73 1
	char   *hostkeyalgorithms;	/* SSH2 server key types in order of preference. */
@


1.22.2.5
log
@Pull in OpenSSH 2.9.9 to the 2.8 branch.
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: readconf.h,v 1.39 2001/09/19 19:24:18 stevesk Exp $"); */
d42 1
a42 1
	int     challenge_response_authentication;
d44 3
a46 5
#if defined(KRB4) || defined(KRB5)
	int     kerberos_authentication;	/* Try Kerberos authentication. */
#endif
#if defined(AFS) || defined(KRB5)
	int     kerberos_tgt_passing;	/* Try Kerberos TGT passing. */
d49 1
a87 2
	char   *bind_address;	/* local socket address for connection to sshd */
	char   *smartcard_device; /* Smartcard reader device */
a99 1
	int	clear_forwardings;
d103 19
a121 4
void     initialize_options(Options *);
void     fill_default_options(Options *);
int	 read_config_file(const char *, const char *, Options *);

d123 28
a150 4
process_config_line(Options *, const char *, char *, const char *, int, int *);

void	 add_local_forward(Options *, u_short, const char *, u_short);
void	 add_remote_forward(Options *, u_short, const char *, u_short);
@


1.22.2.6
log
@Merge OpenSSH 3.0
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: readconf.h,v 1.22.2.5 2001/09/27 00:15:42 miod Exp $"); */
a103 1
	int	no_host_authentication_for_localhost;
@


1.22.2.7
log
@Merge OpenSSH 3.1.
@
text
@a0 2
/*	$OpenBSD: readconf.h,v 1.42 2002/03/04 17:27:39 stevesk Exp $	*/

d13 2
@


1.21
log
@cleanup copyright notices on all files.  I have attempted to be accurate with
the details.  everything is now under Tatu's licence (which I copied from his
readme), and/or the core-sdi bsd-ish thing for deattack, or various openbsd
developers under a 2-term bsd licence.  We're not changing any rules, just
being accurate.
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: readconf.h,v 1.20 2000/06/20 01:39:43 markus Exp $"); */
d50 2
@


1.20
log
@OpenBSD tag
@
text
@a1 3
 *
 * readconf.h
 *
a2 1
 *
a4 3
 *
 * Created: Sat Apr 22 00:25:29 1995 ylo
 *
d7 5
d14 1
a14 1
/* RCSID("$OpenBSD: readconf.h,v 1.19 2000/05/31 06:36:40 markus Exp $"); */
@


1.19
log
@xauth_location support; pr 1234
@
text
@d16 1
a16 1
/* RCSID("$Id: readconf.h,v 1.18 2000/05/08 17:12:15 markus Exp $"); */
@


1.18
log
@complain about invalid ciphers in SSH1 (e.g. arcfour is SSH2 only)
@
text
@d16 1
a16 1
/* RCSID("$Id: readconf.h,v 1.17 2000/05/06 17:45:36 markus Exp $"); */
d33 1
@


1.18.2.1
log
@lovin' CVS... update patch branch to OpenSSH-2.1.1
@
text
@d16 1
a16 1
/* RCSID("$Id: readconf.h,v 1.19 2000/05/31 06:36:40 markus Exp $"); */
a32 1
	char   *xauth_location;	/* Location for xauth program */
@


1.18.2.2
log
@Pull in the rest of openssh-2.2.0 to 2.7 branch (luvin' cvs...)
@
text
@d16 1
a16 1
/* RCSID("$OpenBSD: readconf.h,v 1.20 2000/06/20 01:39:43 markus Exp $"); */
@


1.18.2.3
log
@openssh-2.3.0 (again) for 2.7 branch
@
text
@d2 3
d6 1
d9 3
a13 5
 * As far as I am concerned, the code I have written for this software
 * can be used freely for any purpose.  Any derived versions of this
 * software must be clearly marked as such, and if the derived work is
 * incompatible with the protocol description in the RFC file, it must be
 * called by a name other than "ssh" or "Secure Shell".
d16 1
a16 1
/* RCSID("$OpenBSD: readconf.h,v 1.22 2000/10/11 20:14:39 markus Exp $"); */
a51 2
	int     kbd_interactive_authentication; /* Try keyboard-interactive auth. */
	char	*kbd_interactive_devices; /* Keyboard-interactive auth devices. */
@


1.18.2.4
log
@OpenSSH-2.5.1 for 2.7 patch branch
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: readconf.h,v 1.26 2001/02/11 12:59:25 markus Exp $"); */
d38 2
a39 3
	int     pubkey_authentication;	/* Try ssh2 pubkey authentication. */
	int     challenge_reponse_authentication;
					/* Try S/Key or TIS, authentication. */
a69 1
	char   *macs;		/* SSH2 macs in order of preference. */
a71 1
	char   *host_key_alias;	/* hostname alias for .ssh/known_hosts */
d81 2
a82 1
	int     num_identity_files;	/* Number of files for RSA/DSA identities. */
d84 1
a84 1
	int	identity_files_type[SSH_MAX_IDENTITY_FILES];
@


1.18.2.5
log
@Pull in OpenSSH-2.5.2 for 2.7 branch.
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: readconf.h,v 1.28 2001/03/10 17:51:04 markus Exp $"); */
a18 2
#include "key.h"

a82 1
	char   *preferred_authentications;
d86 1
a86 1
	Key    *identity_keys[SSH_MAX_IDENTITY_FILES];
@


1.17
log
@add DSAAuthetication option to ssh/sshd, document SSH2 in sshd.8
@
text
@d16 1
a16 1
/* RCSID("$Id: readconf.h,v 1.16 2000/04/26 20:56:29 markus Exp $"); */
d68 1
a68 1
	char   *ciphers;	/* Ciphers in order of preference. */
@


1.16
log
@add DSA pubkey auth and other SSH2 fixes.  use ssh-keygen -[xX]
for trading keys with the real and the original SSH, directly from the
people who invented the SSH protocol.
@
text
@d16 1
a16 1
/* RCSID("$Id: readconf.h,v 1.15 2000/04/14 10:30:32 markus Exp $"); */
d39 1
@


1.15
log
@whitespace cleanup
@
text
@d16 1
a16 1
/* RCSID("$Id: readconf.h,v 1.14 2000/04/12 07:45:44 markus Exp $"); */
d76 2
d80 1
d82 1
@


1.14
log
@add Cipher and Protocol options to ssh/sshd, e.g.:
ssh -o 'Protocol 1,2' if you prefer proto 1, ssh -o 'Ciphers arcfour,3des-cbc'
@
text
@d2 1
a2 1
 * 
d4 1
a4 1
 * 
d6 1
a6 1
 * 
d9 1
a9 1
 * 
d11 1
a11 1
 * 
d13 1
a13 1
 * 
d16 1
a16 1
/* RCSID("$Id: readconf.h,v 1.13 1999/12/01 13:59:15 markus Exp $"); */
d109 1
a109 1
int 
d119 1
a119 1
void 
d127 1
a127 1
void 
d135 1
a135 1
void 
@


1.13
log
@ports are u_short
@
text
@d16 1
a16 1
/* RCSID("$Id: readconf.h,v 1.12 1999/11/24 19:53:49 markus Exp $"); */
d67 2
@


1.12
log
@KNF, final part 3
@
text
@d16 1
a16 1
/* RCSID("$Id: readconf.h,v 1.11 1999/11/24 00:26:02 deraadt Exp $"); */
d24 3
a26 3
	int     port;		/* Port to forward. */
	char   *host;		/* Host to connect. */
	int     host_port;	/* Port to connect on host. */
d126 2
a127 2
add_local_forward(Options * options, int port, const char *host,
    int host_port);
d134 2
a135 2
add_remote_forward(Options * options, int port, const char *host,
    int host_port);
@


1.11
log
@much more KNF
@
text
@d16 1
a16 1
/* RCSID("$Id: readconf.h,v 1.10 1999/11/22 21:52:41 markus Exp $"); */
d88 6
a93 4
/* Initializes options to special values that indicate that they have not
   yet been set.  Read_config_file will only set options with this value.
   Options are processed in the following order: command line, user config
   file, system config file.  Last, fill_default_options is called. */
d96 4
a99 2
/* Called after processing other sources of option data, this fills those
   options for which no value has been specified with their default values. */
d102 5
a106 3
/* Processes a single option line as used in the configuration files.
   This only sets those values that have not already been set.
   Returns 0 for legal options */
d112 5
a116 3
/* Reads the config file and modifies the options accordingly.  Options should
   already be initialized before this call.  This never returns if there
   is an error.  If the file does not exist, this returns immediately. */
d121 4
a124 2
/* Adds a local TCP/IP port forward to options.  Never returns if there
   is an error. */
d129 4
a132 2
/* Adds a remote TCP/IP port forward to options.  Never returns if there
   is an error. */
a135 1

@


1.10
log
@tranfer s/key challenge/response data in SSH_SMSG_AUTH_TIS_CHALLENGE
messages. allows use of s/key in windows (ttssh, securecrt) and
ssh-1.2.27 clients without 'ssh -v', ok: niels@@
@
text
@d2 13
d16 1
a16 14
readconf.h

Author: Tatu Ylonen <ylo@@cs.hut.fi>

Copyright (c) 1995 Tatu Ylonen <ylo@@cs.hut.fi>, Espoo, Finland
                   All rights reserved

Created: Sat Apr 22 00:25:29 1995 ylo

Functions for reading the configuration file.

*/

/* RCSID("$Id: readconf.h,v 1.9 1999/11/14 21:45:07 markus Exp $"); */
d23 5
a27 7
typedef struct
{
  int port;		/* Port to forward. */
  char *host;		/* Host to connect. */
  int host_port;	/* Port to connect on host. */
} Forward;

d30 10
a39 10
typedef struct
{
  int forward_agent;		/* Forward authentication agent. */
  int forward_x11;		/* Forward X11 display. */
  int gateway_ports;		/* Allow remote connects to forwarded ports. */
  int use_privileged_port;	/* Don't use privileged port if false. */
  int rhosts_authentication;	/* Try rhosts authentication. */
  int rhosts_rsa_authentication;/* Try rhosts with RSA authentication. */
  int rsa_authentication;	/* Try RSA authentication. */
  int skey_authentication;	/* Try S/Key or TIS authentication. */
d41 2
a42 1
  int kerberos_authentication;	/* Try Kerberos authentication. */
d45 2
a46 2
  int kerberos_tgt_passing;	/* Try Kerberos tgt passing. */
  int afs_token_passing;	/* Try AFS token passing. */
d48 38
a85 34
  int password_authentication;	/* Try password authentication. */
  int fallback_to_rsh;		/* Use rsh if cannot connect with ssh. */
  int use_rsh;			/* Always use rsh (don\'t try ssh). */
  int batch_mode;		/* Batch mode: do not ask for passwords. */
  int check_host_ip;		/* Also keep track of keys for IP address */
  int strict_host_key_checking;	/* Strict host key checking. */
  int compression;		/* Compress packets in both directions. */
  int compression_level;	/* Compression level 1 (fast) to 9 (best). */
  int keepalives;		/* Set SO_KEEPALIVE. */
  LogLevel log_level;		/* Level for logging. */

  int port;			/* Port to connect. */
  int connection_attempts;	/* Max attempts (seconds) before giving up */
  int number_of_password_prompts; /* Max number of password prompts. */
  int cipher;			/* Cipher to use. */
  char *hostname;		/* Real host to connect. */
  char *proxy_command;		/* Proxy command for connecting the host. */
  char *user;			/* User to log in as. */
  int escape_char;		/* Escape character; -2 = none */

  char *system_hostfile;	/* Path for /etc/ssh_known_hosts. */
  char *user_hostfile;		/* Path for $HOME/.ssh/known_hosts. */

  int num_identity_files;	/* Number of files for RSA identities. */
  char *identity_files[SSH_MAX_IDENTITY_FILES];

  /* Local TCP/IP forward requests. */
  int num_local_forwards;
  Forward local_forwards[SSH_MAX_FORWARDS_PER_DIRECTION];

  /* Remote TCP/IP forward requests. */
  int num_remote_forwards;
  Forward remote_forwards[SSH_MAX_FORWARDS_PER_DIRECTION];
} Options;
d92 1
a92 1
void initialize_options(Options *options);
d96 1
a96 1
void fill_default_options(Options *options);
d98 1
a98 1
/* Processes a single option line as used in the configuration files. 
d101 4
a104 3
int process_config_line(Options *options, const char *host,
			 char *line, const char *filename, int linenum,
			 int *activep);
d109 3
a111 2
void read_config_file(const char *filename, const char *host, 
		      Options *options);
d115 3
a117 2
void add_local_forward(Options *options, int port, const char *host,
		       int host_port);
d121 3
a123 2
void add_remote_forward(Options *options, int port, const char *host,
			int host_port);
d126 1
a126 1
#endif /* READCONF_H */
@


1.9
log
@print _all_ bad config-options in ssh(1), too
@
text
@d16 1
a16 1
/* RCSID("$Id: readconf.h,v 1.8 1999/11/10 23:36:44 markus Exp $"); */
d41 1
@


1.8
log
@add LogLevel {QUIET, FATAL, ERROR, INFO, CHAT, DEBUG} to ssh/sshd,
obsoletes QuietMode and FascistLogging in sshd.
@
text
@d16 1
a16 1
/* RCSID("$Id: readconf.h,v 1.7 1999/10/12 21:04:22 markus Exp $"); */
d95 3
a97 2
   This only sets those values that have not already been set. */
void process_config_line(Options *options, const char *host,
@


1.7
log
@-P/UsePrivilegedPort from 1.2.27, it turns of allocation of priv. port
and disabled rhosts/rhosts-rsa, ok deraadt@@
@
text
@d16 1
a16 1
/* RCSID("$Id: readconf.h,v 1.6 1999/10/06 20:07:42 dugsong Exp $"); */
d57 1
@


1.6
log
@implement client NumberOfPasswordPrompts option
@
text
@d16 1
a16 1
/* RCSID("$Id: readconf.h,v 1.5 1999/10/03 21:50:03 provos Exp $"); */
d37 1
@


1.5
log
@add code to detect DNS spoofing:

the main idea is to not only store the host key for the hostname but
also for the according IP address.  When we check the host key in the
known_hosts file, we also check the key against the according IP address.
When the server key changes, host_status = HOST_CHANGED.  If
check_host_in_hostfile() returns differing status for the IP address
that means that either DNS was spoofed or that the IP address
for the host and the host key changed at the same time.
@
text
@d16 1
a16 1
/* RCSID("$Id: readconf.h,v 1.4 1999/09/30 05:03:05 deraadt Exp $"); */
d59 1
@


1.4
log
@cull more ancient garbage from pre-POSIX days
@
text
@d16 1
a16 1
/* RCSID("$Id: readconf.h,v 1.3 1999/09/29 18:16:20 dugsong Exp $"); */
d51 1
@


1.3
log
@update krb4/AFS support to ssh-1.2.27-afs-kerberos-pl1 level, clean up unused variables, update manpages
@
text
@d16 1
a16 1
/* RCSID("$Id: readconf.h,v 1.2 1999/09/29 00:10:16 deraadt Exp $"); */
a51 1
#ifdef WITH_ZLIB
a53 1
#endif /* WITH_ZLIB */
@


1.2
log
@GatewayPorts and ssh -g; markus.friedl@@informatik.uni-erlangen.de
@
text
@d16 1
a16 1
/* RCSID("$Id: readconf.h,v 1.1 1999/09/26 20:53:37 deraadt Exp $"); */
d43 1
a43 1
#ifdef KERBEROS_TGT_PASSING
a44 2
#endif
#ifdef AFS
@


1.1
log
@i bet a lot of people didn't know what ssh 1.2.16 had a nice license.
well, except for the patent issues.  someone in sweden (forget their
name at the moment) cleaned out most of the patented code, and now
this code removes rsa code.  when this is done, it will link against
libssl, but the work isn't completely done yet.  then we need to bring
this up to modern days, featurewise.
@
text
@d16 1
a16 1
/* RCSID("$Id: readconf.h,v 1.6 1999/05/04 11:59:02 bg Exp $"); */
d36 1
@

