head	1.14;
access;
symbols
	OPENBSD_6_1:1.14.0.14
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.14.0.12
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.8
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.14.0.6
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.4
	OPENBSD_5_6_BASE:1.14
	OPENBSD_3_6:1.12.0.12
	OPENBSD_3_6_BASE:1.12
	OPENBSD_3_5:1.12.0.10
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.12.0.8
	OPENBSD_3_4_BASE:1.12
	OPENBSD_3_3:1.12.0.6
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.12.0.4
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.12.0.2
	OPENBSD_3_1_BASE:1.12
	OPENBSD_3_0:1.11.0.2
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.2
	OPENBSD_2_7:1.1.0.4
	OPENBSD_2_8:1.1.0.2
	OPENBSD_2_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.14
date	2014.04.29.15.42.07;	author markus;	state Exp;
branches;
next	1.13;

1.13
date	2004.12.22.02.13.19;	author djm;	state dead;
branches;
next	1.12;

1.12
date	2001.12.19.07.18.56;	author deraadt;	state Exp;
branches
	1.12.10.1
	1.12.12.1;
next	1.11;

1.11
date	2001.09.13.09.48.39;	author markus;	state Exp;
branches
	1.11.2.1;
next	1.10;

1.10
date	2001.08.23.11.31.59;	author markus;	state Exp;
branches;
next	1.9;

1.9
date	2001.07.30.16.23.30;	author stevesk;	state Exp;
branches;
next	1.8;

1.8
date	2001.05.09.23.01.31;	author markus;	state Exp;
branches;
next	1.7;

1.7
date	2001.03.01.03.38.33;	author deraadt;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2001.01.29.01.58.17;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.29.10.56.27;	author markus;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.19.23.17.57;	author markus;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.09.13.41.52;	author markus;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.06.23.05.43;	author markus;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.13.18.59.14;	author markus;	state Exp;
branches
	1.1.2.1
	1.1.4.1;
next	;

1.1.2.1
date	2001.02.16.20.13.11;	author jason;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2001.02.19.17.19.15;	author jason;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2001.03.21.19.46.27;	author jason;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2001.05.07.21.09.32;	author jason;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2001.09.27.00.15.42;	author miod;	state Exp;
branches;
next	1.1.2.6;

1.1.2.6
date	2002.03.08.17.04.42;	author brad;	state Exp;
branches;
next	;

1.1.4.1
date	2000.11.08.21.31.09;	author jason;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2001.03.12.15.44.13;	author jason;	state Exp;
branches;
next	1.1.4.3;

1.1.4.3
date	2001.03.21.18.52.58;	author jason;	state Exp;
branches;
next	;

1.7.2.1
date	2001.09.27.19.03.55;	author jason;	state Exp;
branches;
next	1.7.2.2;

1.7.2.2
date	2002.03.09.00.20.44;	author miod;	state Exp;
branches;
next	;

1.11.2.1
date	2002.03.07.17.37.47;	author jason;	state Exp;
branches;
next	;

1.12.10.1
date	2005.03.10.17.15.04;	author brad;	state dead;
branches;
next	;

1.12.12.1
date	2005.03.10.16.28.27;	author brad;	state dead;
branches;
next	;


desc
@@


1.14
log
@re-add our own aesctr implementation; ok djm@@
@
text
@/*	$OpenBSD: rijndael.h,v 1.13 2008/06/09 07:49:45 djm Exp $ */

/**
 * rijndael-alg-fst.h
 *
 * @@version 3.0 (December 2000)
 *
 * Optimised ANSI C code for the Rijndael cipher (now AES)
 *
 * @@author Vincent Rijmen <vincent.rijmen@@esat.kuleuven.ac.be>
 * @@author Antoon Bosselaers <antoon.bosselaers@@esat.kuleuven.ac.be>
 * @@author Paulo Barreto <paulo.barreto@@terra.com.br>
 *
 * This code is hereby placed in the public domain.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ''AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef _PRIVATE_RIJNDAEL_H
#define _PRIVATE_RIJNDAEL_H

#define AES_MAXKEYBITS	(256)
#define AES_MAXKEYBYTES	(AES_MAXKEYBITS/8)
/* for 256-bit keys, fewer for less */
#define AES_MAXROUNDS	14

typedef unsigned char	u8;
typedef unsigned short	u16;
typedef unsigned int	u32;

int	rijndaelKeySetupEnc(unsigned int [], const unsigned char [], int);
void	rijndaelEncrypt(const unsigned int [], int, const unsigned char [],
	    unsigned char []);

#endif /* _PRIVATE_RIJNDAEL_H */
@


1.13
log
@remove fallback AES support for old OpenSSL, as OpenBSD has had it for many
years now; ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rijndael.h,v 1.12 2001/12/19 07:18:56 deraadt Exp $ */
d28 2
a29 2
#ifndef __RIJNDAEL_H
#define __RIJNDAEL_H
d31 4
a34 3
#define MAXKC	(256/32)
#define MAXKB	(256/8)
#define MAXNR	14
d40 3
a42 7
/*  The structure for key information */
typedef struct {
	int	decrypt;
	int	Nr;			/* key-length-dependent number of rounds */
	u32	ek[4*(MAXNR + 1)];	/* encrypt key schedule */
	u32	dk[4*(MAXNR + 1)];	/* decrypt key schedule */
} rijndael_ctx;
d44 1
a44 5
void	 rijndael_set_key(rijndael_ctx *, u_char *, int, int);
void	 rijndael_decrypt(rijndael_ctx *, u_char *, u_char *);
void	 rijndael_encrypt(rijndael_ctx *, u_char *, u_char *);

#endif /* __RIJNDAEL_H */
@


1.12
log
@basic KNF done while i was looking for something else
@
text
@d1 1
a1 1
/*	$OpenBSD: rijndael.h,v 1.11 2001/09/13 09:48:39 markus Exp $ */
@


1.12.10.1
log
@upgrade to OpenSSH 4.0
@
text
@d1 1
a1 1
/*	$OpenBSD: rijndael.h,v 1.12 2001/12/19 07:18:56 deraadt Exp $ */
@


1.12.12.1
log
@upgrade to OpenSSH 4.0
@
text
@d1 1
a1 1
/*	$OpenBSD: rijndael.h,v 1.12 2001/12/19 07:18:56 deraadt Exp $ */
@


1.11
log
@missing $OpenBSD:
@
text
@d1 1
a1 1
/*	$OpenBSD: pf.c,v 1.121 2001/07/30 23:00:37 deraadt Exp $ */
d35 2
a36 2
typedef unsigned char	u8;	
typedef unsigned short	u16;	
@


1.11.2.1
log
@Update to OpenSSH-3.1 on 3.0-stable branch
@
text
@d1 1
a1 1
/*	$OpenBSD: rijndael.h,v 1.12 2001/12/19 07:18:56 deraadt Exp $ */
d35 2
a36 2
typedef unsigned char	u8;
typedef unsigned short	u16;
@


1.10
log
@switch to the optimised AES reference code from
http://www.esat.kuleuven.ac.be/~rijmen/rijndael/rijndael-fst-3.0.zip
@
text
@d1 2
@


1.9
log
@new BSD-style license:
Brian Gladman <brg@@gladman.plus.com>:
>I have updated my code at:
>http://fp.gladman.plus.com/cryptography_technology/rijndael/index.htm
>with a copyright notice as follows:
>[...]
>I am not sure which version of my old code you are using but I am
>happy for the notice above to be substituted for my existing copyright
>intent if this meets your purpose.
@
text
@d1 42
a42 47
/*	$OpenBSD: rijndael.h,v 1.8 2001/05/09 23:01:31 markus Exp $	*/

/* This is an independent implementation of the encryption algorithm:   */
/*                                                                      */
/*         RIJNDAEL by Joan Daemen and Vincent Rijmen                   */
/*                                                                      */
/* which is a candidate algorithm in the Advanced Encryption Standard   */
/* programme of the US National Institute of Standards and Technology.  */

/*
   -----------------------------------------------------------------------
   Copyright (c) 2001 Dr Brian Gladman <brg@@gladman.uk.net>, Worcester, UK
   
   TERMS

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:
   1. Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
   2. Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

   This software is provided 'as is' with no guarantees of correctness or
   fitness for purpose.
   -----------------------------------------------------------------------
*/

#ifndef _RIJNDAEL_H_
#define _RIJNDAEL_H_

/* 1. Standard types for AES cryptography source code               */

typedef u_int8_t   u1byte; /* an 8 bit unsigned character type */
typedef u_int16_t  u2byte; /* a 16 bit unsigned integer type   */
typedef u_int32_t  u4byte; /* a 32 bit unsigned integer type   */

typedef int8_t     s1byte; /* an 8 bit signed character type   */
typedef int16_t    s2byte; /* a 16 bit signed integer type     */
typedef int32_t    s4byte; /* a 32 bit signed integer type     */

typedef struct _rijndael_ctx {
	u4byte  k_len;
	int decrypt;
	u4byte  e_key[64];
	u4byte  d_key[64];
d45 3
d49 1
a49 11
/* 2. Standard interface for AES cryptographic routines             */

/* These are all based on 32 bit unsigned values and will therefore */
/* require endian conversions for big-endian architectures          */

rijndael_ctx *
rijndael_set_key __P((rijndael_ctx *, const u4byte *, const u4byte, int));
void rijndael_encrypt __P((rijndael_ctx *, const u4byte *, u4byte *));
void rijndael_decrypt __P((rijndael_ctx *, const u4byte *, u4byte *));

#endif /* _RIJNDAEL_H_ */
@


1.8
log
@fix prototype; J.S.Peatfield@@damtp.cam.ac.uk
@
text
@d1 1
a1 1
/*	$OpenBSD: rijndael.h,v 1.7 2001/03/01 03:38:33 deraadt Exp $	*/
d9 20
a28 7
/*                                                                      */
/* Copyright in this implementation is held by Dr B R Gladman but I     */
/* hereby give permission for its free direct or derivative use subject */
/* to acknowledgment of its origin and compliance with any conditions   */
/* that the originators of the algorithm place on its exploitation.     */
/*                                                                      */
/* Dr Brian Gladman (gladman@@seven77.demon.co.uk) 14th January 1999     */
@


1.7
log
@copyright notices on all source files
@
text
@d1 1
a1 1
/*	$OpenBSD: rijndael.h,v 1.6 2001/01/29 01:58:17 niklas Exp $	*/
d43 2
a44 1
rijndael_ctx *rijndael_set_key  __P((rijndael_ctx *, const u4byte *, u4byte, int));
@


1.7.2.1
log
@Pull in OpenSSH-2.9.9
@
text
@d1 1
a1 1
/*	$OpenBSD: rijndael.h,v 1.11 2001/09/13 09:48:39 markus Exp $ */
d3 32
a34 42
/**
 * rijndael-alg-fst.h
 *
 * @@version 3.0 (December 2000)
 *
 * Optimised ANSI C code for the Rijndael cipher (now AES)
 *
 * @@author Vincent Rijmen <vincent.rijmen@@esat.kuleuven.ac.be>
 * @@author Antoon Bosselaers <antoon.bosselaers@@esat.kuleuven.ac.be>
 * @@author Paulo Barreto <paulo.barreto@@terra.com.br>
 *
 * This code is hereby placed in the public domain.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ''AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef __RIJNDAEL_H
#define __RIJNDAEL_H

#define MAXKC	(256/32)
#define MAXKB	(256/8)
#define MAXNR	14

typedef unsigned char	u8;	
typedef unsigned short	u16;	
typedef unsigned int	u32;

/*  The structure for key information */
typedef struct {
	int	decrypt;
	int	Nr;			/* key-length-dependent number of rounds */
	u32	ek[4*(MAXNR + 1)];	/* encrypt key schedule */
	u32	dk[4*(MAXNR + 1)];	/* decrypt key schedule */
a36 3
void	 rijndael_set_key(rijndael_ctx *, u_char *, int, int);
void	 rijndael_decrypt(rijndael_ctx *, u_char *, u_char *);
void	 rijndael_encrypt(rijndael_ctx *, u_char *, u_char *);
d38 10
a47 1
#endif /* __RIJNDAEL_H */
@


1.7.2.2
log
@Merge OpenSSH 3.1, keeping /etc as configuration files directory.
(i.e. OpenSSH 3.1 + openbsd29_3.1.patch)
@
text
@d1 1
a1 1
/*	$OpenBSD: rijndael.h,v 1.12 2001/12/19 07:18:56 deraadt Exp $ */
d35 2
a36 2
typedef unsigned char	u8;
typedef unsigned short	u16;
@


1.6
log
@$OpenBSD$
@
text
@d1 15
a15 1
/*	$OpenBSD$	*/
@


1.5
log
@undo change in comment; stevesk@@pobox.com
@
text
@d1 2
@


1.4
log
@replace 'unsigned bla' with 'u_bla' everywhere. also, replace 'char unsigned'
with u_char.
@
text
@d6 3
a8 3
typedef u_int8_t   u1byte; /* an 8 bit u_character type */
typedef u_int16_t  u2byte; /* a 16 bit u_integer type   */
typedef u_int32_t  u4byte; /* a 32 bit u_integer type   */
d24 1
a24 1
/* These are all based on 32 bit u_values and will therefore */
@


1.3
log
@undo rijndael changes
@
text
@d6 3
a8 3
typedef u_int8_t   u1byte; /* an 8 bit unsigned character type */
typedef u_int16_t  u2byte; /* a 16 bit unsigned integer type   */
typedef u_int32_t  u4byte; /* a 32 bit unsigned integer type   */
d24 1
a24 1
/* These are all based on 32 bit unsigned values and will therefore */
@


1.2
log
@new rijndael implementation. fixes endian bugs
@
text
@d1 2
a2 25
/*
 * rijndael-alg-fst.h   v2.4   April '2000
 * rijndael-api-fst.h   v2.4   April '2000
 *
 * Optimised ANSI C code
 *
 */

#ifndef RIJNDAEL_H
#define RIJNDAEL_H

#define RIJNDAEL_MAXKC		(256/32)
#define RIJNDAEL_MAXROUNDS	14

#define	RIJNDAEL_ENCRYPT	0
#define	RIJNDAEL_DECRYPT	1

typedef struct {
	int ROUNDS;		/* key-length-dependent number of rounds */
	u_int8_t keySched[RIJNDAEL_MAXROUNDS+1][4][4];
} rijndael_key;

int rijndael_encrypt(rijndael_key *key, u_int8_t a[16], u_int8_t b[16]);
int rijndael_decrypt(rijndael_key *key, u_int8_t a[16], u_int8_t b[16]);
int rijndael_makekey(rijndael_key *key, int direction, int keyLen, u_int8_t *keyMaterial);
d4 28
a31 1
#endif
@


1.1
log
@rijndael/aes support
@
text
@d1 25
a25 2
#ifndef _RIJNDAEL_H_
#define _RIJNDAEL_H_
d27 1
a27 28
/* 1. Standard types for AES cryptography source code               */

typedef u_int8_t   u1byte; /* an 8 bit unsigned character type */
typedef u_int16_t  u2byte; /* a 16 bit unsigned integer type   */
typedef u_int32_t  u4byte; /* a 32 bit unsigned integer type   */

typedef int8_t     s1byte; /* an 8 bit signed character type   */
typedef int16_t    s2byte; /* a 16 bit signed integer type     */
typedef int32_t    s4byte; /* a 32 bit signed integer type     */

typedef struct _rijndael_ctx {
	u4byte  k_len;
	int decrypt;
	u4byte  e_key[64];
	u4byte  d_key[64];
} rijndael_ctx;


/* 2. Standard interface for AES cryptographic routines             */

/* These are all based on 32 bit unsigned values and will therefore */
/* require endian conversions for big-endian architectures          */

rijndael_ctx *rijndael_set_key  __P((rijndael_ctx *, const u4byte *, u4byte, int));
void rijndael_encrypt __P((rijndael_ctx *, const u4byte *, u4byte *));
void rijndael_decrypt __P((rijndael_ctx *, const u4byte *, u4byte *));

#endif /* _RIJNDAEL_H_ */
@


1.1.2.1
log
@Pull in OpenSSH 2.5.0
@
text
@a0 2
/*	$OpenBSD: rijndael.h,v 1.6 2001/01/29 01:58:17 niklas Exp $	*/

@


1.1.2.2
log
@Pull in OpenSSH-2.5.1
@
text
@@


1.1.2.3
log
@Pull in OpenSSH-2.5.2 for 2.8 branch.
@
text
@d1 1
a1 15
/*	$OpenBSD: rijndael.h,v 1.7 2001/03/01 03:38:33 deraadt Exp $	*/

/* This is an independent implementation of the encryption algorithm:   */
/*                                                                      */
/*         RIJNDAEL by Joan Daemen and Vincent Rijmen                   */
/*                                                                      */
/* which is a candidate algorithm in the Advanced Encryption Standard   */
/* programme of the US National Institute of Standards and Technology.  */
/*                                                                      */
/* Copyright in this implementation is held by Dr B R Gladman but I     */
/* hereby give permission for its free direct or derivative use subject */
/* to acknowledgment of its origin and compliance with any conditions   */
/* that the originators of the algorithm place on its exploitation.     */
/*                                                                      */
/* Dr Brian Gladman (gladman@@seven77.demon.co.uk) 14th January 1999     */
@


1.1.2.4
log
@Pull in OpenSSH-2.9 to 2.8 branch.
@
text
@@


1.1.2.5
log
@Pull in OpenSSH 2.9.9 to the 2.8 branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: rijndael.h,v 1.11 2001/09/13 09:48:39 markus Exp $ */
d3 32
a34 42
/**
 * rijndael-alg-fst.h
 *
 * @@version 3.0 (December 2000)
 *
 * Optimised ANSI C code for the Rijndael cipher (now AES)
 *
 * @@author Vincent Rijmen <vincent.rijmen@@esat.kuleuven.ac.be>
 * @@author Antoon Bosselaers <antoon.bosselaers@@esat.kuleuven.ac.be>
 * @@author Paulo Barreto <paulo.barreto@@terra.com.br>
 *
 * This code is hereby placed in the public domain.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ''AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef __RIJNDAEL_H
#define __RIJNDAEL_H

#define MAXKC	(256/32)
#define MAXKB	(256/8)
#define MAXNR	14

typedef unsigned char	u8;	
typedef unsigned short	u16;	
typedef unsigned int	u32;

/*  The structure for key information */
typedef struct {
	int	decrypt;
	int	Nr;			/* key-length-dependent number of rounds */
	u32	ek[4*(MAXNR + 1)];	/* encrypt key schedule */
	u32	dk[4*(MAXNR + 1)];	/* decrypt key schedule */
a36 3
void	 rijndael_set_key(rijndael_ctx *, u_char *, int, int);
void	 rijndael_decrypt(rijndael_ctx *, u_char *, u_char *);
void	 rijndael_encrypt(rijndael_ctx *, u_char *, u_char *);
d38 10
a47 1
#endif /* __RIJNDAEL_H */
@


1.1.2.6
log
@Merge OpenSSH 3.1.
@
text
@d1 1
a1 1
/*	$OpenBSD: rijndael.h,v 1.12 2001/12/19 07:18:56 deraadt Exp $ */
d35 2
a36 2
typedef unsigned char	u8;
typedef unsigned short	u16;
@


1.1.4.1
log
@openssh-2.3.0 (again) for 2.7 branch
@
text
@@


1.1.4.2
log
@OpenSSH-2.5.1 for 2.7 patch branch
@
text
@a0 2
/*	$OpenBSD: rijndael.h,v 1.6 2001/01/29 01:58:17 niklas Exp $	*/

@


1.1.4.3
log
@Pull in OpenSSH-2.5.2 for 2.7 branch.
@
text
@d1 1
a1 15
/*	$OpenBSD: rijndael.h,v 1.7 2001/03/01 03:38:33 deraadt Exp $	*/

/* This is an independent implementation of the encryption algorithm:   */
/*                                                                      */
/*         RIJNDAEL by Joan Daemen and Vincent Rijmen                   */
/*                                                                      */
/* which is a candidate algorithm in the Advanced Encryption Standard   */
/* programme of the US National Institute of Standards and Technology.  */
/*                                                                      */
/* Copyright in this implementation is held by Dr B R Gladman but I     */
/* hereby give permission for its free direct or derivative use subject */
/* to acknowledgment of its origin and compliance with any conditions   */
/* that the originators of the algorithm place on its exploitation.     */
/*                                                                      */
/* Dr Brian Gladman (gladman@@seven77.demon.co.uk) 14th January 1999     */
@


