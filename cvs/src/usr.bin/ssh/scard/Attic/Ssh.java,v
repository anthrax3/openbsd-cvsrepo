head	1.4;
access;
symbols
	OPENBSD_4_6:1.3.0.34
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.30
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.28
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.26
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.24
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.20
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.22
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.18
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.16
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.14
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.12
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.10
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.8
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.6
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.4
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.2.0.6
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_8:1.2.0.2;
locks; strict;
comment	@# @;


1.4
date	2010.02.08.12.48.38;	author markus;	state dead;
branches;
next	1.3;

1.3
date	2002.03.21.22.44.05;	author rees;	state Exp;
branches;
next	1.2;

1.2
date	2001.07.30.20.08.14;	author rees;	state Exp;
branches
	1.2.2.1
	1.2.4.1
	1.2.6.1;
next	1.1;

1.1
date	2001.06.28.21.55.28;	author markus;	state Exp;
branches;
next	;

1.2.2.1
date	2001.09.27.00.15.50;	author miod;	state Exp;
branches;
next	;

1.2.4.1
date	2001.09.27.19.03.56;	author jason;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2002.03.09.00.22.15;	author miod;	state Exp;
branches;
next	1.2.4.3;

1.2.4.3
date	2002.06.02.22.56.32;	author miod;	state Exp;
branches;
next	;

1.2.6.1
date	2002.05.17.00.03.34;	author miod;	state Exp;
branches;
next	;


desc
@@


1.4
log
@remove obsole scard code
@
text
@// $Id: Ssh.java,v 1.3 2002/03/21 22:44:05 rees Exp $
//
// Ssh.java
// SSH / smartcard integration project, smartcard side
//
// Tomoko Fukuzawa, created, Feb., 2000
//
// Naomaru Itoi, modified, Apr., 2000
//

// copyright 2000
// the regents of the university of michigan
// all rights reserved
//
// permission is granted to use, copy, create derivative works
// and redistribute this software and such derivative works
// for any purpose, so long as the name of the university of
// michigan is not used in any advertising or publicity
// pertaining to the use or distribution of this software
// without specific, written prior authorization.  if the
// above copyright notice or any other identification of the
// university of michigan is included in any copy of any
// portion of this software, then the disclaimer below must
// also be included.
//
// this software is provided as is, without representation
// from the university of michigan as to its fitness for any
// purpose, and without warranty by the university of
// michigan of any kind, either express or implied, including
// without limitation the implied warranties of
// merchantability and fitness for a particular purpose. the
// regents of the university of michigan shall not be liable
// for any damages, including special, indirect, incidental, or
// consequential damages, with respect to any claim arising
// out of or in connection with the use of the software, even
// if it has been or is hereafter advised of the possibility of
// such damages.

import javacard.framework.*;
import javacardx.framework.*;
import javacardx.crypto.*;

public class Ssh extends javacard.framework.Applet
{
    // Change this when the applet changes; hi byte is major, low byte is minor
    static final short applet_version = (short)0x0102;

    /* constants declaration */
    // code of CLA byte in the command APDU header
    static final byte Ssh_CLA =(byte)0x05;

    // codes of INS byte in the command APDU header
    static final byte DECRYPT = (byte) 0x10;
    static final byte GET_KEYLENGTH = (byte) 0x20;
    static final byte GET_PUBKEY = (byte) 0x30;
    static final byte GET_VERSION = (byte) 0x32;
    static final byte GET_RESPONSE = (byte) 0xc0;

    static final short keysize = 1024;
    static final short root_fid = (short)0x3f00;
    static final short privkey_fid = (short)0x0012;
    static final short pubkey_fid = (short)(('s'<<8)|'h');

    /* instance variables declaration */
    AsymKey rsakey;
    CyberflexFile file;
    CyberflexOS os;

    private Ssh()
    {
	file = new CyberflexFile();
	os = new CyberflexOS();

	rsakey = new RSA_CRT_PrivateKey (keysize);

	if ( ! rsakey.isSupportedLength (keysize) )
	    ISOException.throwIt (ISO.SW_WRONG_LENGTH);

	register();
    } // end of the constructor

    public boolean select() {
	if (!rsakey.isInitialized())
	    rsakey.setKeyInstance ((short)0xc8, (short)0x10);

	return true;
    }

    public static void install(APDU apdu)
    {
	new Ssh();	// create a Ssh applet instance (card)
    } // end of install method

    public static void main(String args[]) {
	ISOException.throwIt((short) 0x9000);
    }

    public void process(APDU apdu)
    {
	// APDU object carries a byte array (buffer) to
	// transfer incoming and outgoing APDU header
	// and data bytes between card and CAD
	byte buffer[] = apdu.getBuffer();
	short size, st;

	// verify that if the applet can accept this
	// APDU message
	// NI: change suggested by Wayne Dyksen, Purdue
	if (buffer[ISO.OFFSET_INS] == ISO.INS_SELECT)
	    ISOException.throwIt(ISO.SW_NO_ERROR);

	switch (buffer[ISO.OFFSET_INS]) {
	case DECRYPT:
	    if (buffer[ISO.OFFSET_CLA] != Ssh_CLA)
		ISOException.throwIt(ISO.SW_CLA_NOT_SUPPORTED);
	    //decrypt (apdu);
	    size = (short) (buffer[ISO.OFFSET_LC] & 0x00FF);

	    if (apdu.setIncomingAndReceive() != size)
		ISOException.throwIt (ISO.SW_WRONG_LENGTH);

	    // check access; depends on bit 2 (x/a)
	    file.selectFile(root_fid);
	    file.selectFile(privkey_fid);
	    st = os.checkAccess(ACL.EXECUTE);
	    if (st != ST.ACCESS_CLEARED) {
		CyberflexAPDU.prepareSW1SW2(st);
		ISOException.throwIt(CyberflexAPDU.getSW1SW2());
	    }

	    rsakey.cryptoUpdate (buffer, (short) ISO.OFFSET_CDATA, size,
				 buffer, (short) ISO.OFFSET_CDATA);

	    apdu.setOutgoingAndSend ((short) ISO.OFFSET_CDATA, size);
	    break;
	case GET_PUBKEY:
	    file.selectFile(root_fid); // select root
	    file.selectFile(pubkey_fid); // select public key file
	    size = (short)(file.getFileSize() - 16);
	    st = os.readBinaryFile(buffer, (short)0, (short)0, size);
	    if (st == ST.SUCCESS)
		apdu.setOutgoingAndSend((short)0, size);
	    else {
		CyberflexAPDU.prepareSW1SW2(st);
		ISOException.throwIt(CyberflexAPDU.getSW1SW2());
	    }
	    break;
	case GET_KEYLENGTH:
	    Util.setShort(buffer, (short)0, keysize);
	    apdu.setOutgoingAndSend ((short)0, (short)2);
	    break;
	case GET_VERSION:
	    Util.setShort(buffer, (short)0, applet_version);
	    apdu.setOutgoingAndSend ((short)0, (short)2);
	    break;
	case GET_RESPONSE:
	    break;
	default:
	    ISOException.throwIt (ISO.SW_INS_NOT_SUPPORTED);
	}

    } // end of process method

} // end of class Ssh
@


1.3
log
@Add PIN-protection for secret key.
@
text
@d1 1
a1 1
// $Id: Ssh.java,v 1.6 2002/03/19 17:41:46 rees Exp $
@


1.2
log
@initialize key in select method, not Constructor
@
text
@d1 1
a1 1
// $Id: Ssh.java,v 1.3 2001/07/27 16:52:53 rees Exp $
d45 3
d56 1
a58 1
    /* instance variables declaration */
d60 3
d64 1
a64 1
    //RSA_CRT_PrivateKey rsakey;
a68 4
    byte buffer[];

    static byte[] keyHdr = {(byte)0xC2, (byte)0x01, (byte)0x05};

d103 2
a104 1
	buffer = apdu.getBuffer();
d117 1
a117 1
	    short size = (short) (buffer[ISO.OFFSET_LC] & 0x00FF);
d122 9
d135 1
a135 1
	    return;
d137 11
a147 5
	    file.selectFile((short)(0x3f<<8)); // select root
	    file.selectFile((short)(('s'<<8)|'h')); // select public key file
	    os.readBinaryFile (buffer, (short)0, (short)0, (short)(keysize/8));
	    apdu.setOutgoingAndSend((short)0, (short)(keysize/8));
	    return;
d149 5
a153 2
	    buffer[0] = (byte)((keysize >> 8) & 0xff);
	    buffer[1] = (byte)(keysize & 0xff);
d155 1
a155 1
	    return;
d157 1
a157 1
	    return;
@


1.2.6.1
log
@Update OpenSSH to version 3.2.2.
@
text
@d1 1
a1 1
// $Id: Ssh.java,v 1.3 2002/03/21 22:44:05 rees Exp $
a44 3
    // Change this when the applet changes; hi byte is major, low byte is minor
    static final short applet_version = (short)0x0102;

a52 1
    static final byte GET_VERSION = (byte) 0x32;
d55 1
a56 3
    static final short root_fid = (short)0x3f00;
    static final short privkey_fid = (short)0x0012;
    static final short pubkey_fid = (short)(('s'<<8)|'h');
d58 1
a58 1
    /* instance variables declaration */
d63 4
d101 1
a101 2
	byte buffer[] = apdu.getBuffer();
	short size, st;
d114 1
a114 1
	    size = (short) (buffer[ISO.OFFSET_LC] & 0x00FF);
a118 9
	    // check access; depends on bit 2 (x/a)
	    file.selectFile(root_fid);
	    file.selectFile(privkey_fid);
	    st = os.checkAccess(ACL.EXECUTE);
	    if (st != ST.ACCESS_CLEARED) {
		CyberflexAPDU.prepareSW1SW2(st);
		ISOException.throwIt(CyberflexAPDU.getSW1SW2());
	    }

d123 1
a123 1
	    break;
d125 5
a129 11
	    file.selectFile(root_fid); // select root
	    file.selectFile(pubkey_fid); // select public key file
	    size = (short)(file.getFileSize() - 16);
	    st = os.readBinaryFile(buffer, (short)0, (short)0, size);
	    if (st == ST.SUCCESS)
		apdu.setOutgoingAndSend((short)0, size);
	    else {
		CyberflexAPDU.prepareSW1SW2(st);
		ISOException.throwIt(CyberflexAPDU.getSW1SW2());
	    }
	    break;
d131 2
a132 5
	    Util.setShort(buffer, (short)0, keysize);
	    apdu.setOutgoingAndSend ((short)0, (short)2);
	    break;
	case GET_VERSION:
	    Util.setShort(buffer, (short)0, applet_version);
d134 1
a134 1
	    break;
d136 1
a136 1
	    break;
@


1.2.4.1
log
@Pull in OpenSSH-2.9.9
@
text
@d1 1
a1 1
// $Id: Ssh.java,v 1.2 2001/07/30 20:08:14 rees Exp $
@


1.2.4.2
log
@*** empty log message ***
@
text
@@


1.2.4.3
log
@Upgrade to OpenSSH 3.2.3.

Except for improbable compilation error fixes, this should be the last
commit made to the 2.9-STABLE branche. Have fun upgrading.
@
text
@d1 1
a1 1
// $Id: Ssh.java,v 1.3 2002/03/21 22:44:05 rees Exp $
a44 3
    // Change this when the applet changes; hi byte is major, low byte is minor
    static final short applet_version = (short)0x0102;

a52 1
    static final byte GET_VERSION = (byte) 0x32;
d55 1
a56 3
    static final short root_fid = (short)0x3f00;
    static final short privkey_fid = (short)0x0012;
    static final short pubkey_fid = (short)(('s'<<8)|'h');
d58 1
a58 1
    /* instance variables declaration */
d63 4
d101 1
a101 2
	byte buffer[] = apdu.getBuffer();
	short size, st;
d114 1
a114 1
	    size = (short) (buffer[ISO.OFFSET_LC] & 0x00FF);
a118 9
	    // check access; depends on bit 2 (x/a)
	    file.selectFile(root_fid);
	    file.selectFile(privkey_fid);
	    st = os.checkAccess(ACL.EXECUTE);
	    if (st != ST.ACCESS_CLEARED) {
		CyberflexAPDU.prepareSW1SW2(st);
		ISOException.throwIt(CyberflexAPDU.getSW1SW2());
	    }

d123 1
a123 1
	    break;
d125 5
a129 11
	    file.selectFile(root_fid); // select root
	    file.selectFile(pubkey_fid); // select public key file
	    size = (short)(file.getFileSize() - 16);
	    st = os.readBinaryFile(buffer, (short)0, (short)0, size);
	    if (st == ST.SUCCESS)
		apdu.setOutgoingAndSend((short)0, size);
	    else {
		CyberflexAPDU.prepareSW1SW2(st);
		ISOException.throwIt(CyberflexAPDU.getSW1SW2());
	    }
	    break;
d131 2
a132 5
	    Util.setShort(buffer, (short)0, keysize);
	    apdu.setOutgoingAndSend ((short)0, (short)2);
	    break;
	case GET_VERSION:
	    Util.setShort(buffer, (short)0, applet_version);
d134 1
a134 1
	    break;
d136 1
a136 1
	    break;
@


1.2.2.1
log
@Pull in OpenSSH 2.9.9 to the 2.8 branch.
@
text
@d1 1
a1 1
// $Id: Ssh.java,v 1.2 2001/07/30 20:08:14 rees Exp $
@


1.1
log
@ssh java cardlet for smartcard support (source and uuencoded binary)
@
text
@d1 37
a37 34
/*
 * copyright 1997, 2000
 * the regents of the university of michigan
 * all rights reserved
 *
 * permission is granted to use, copy, create derivative works 
 * and redistribute this software and such derivative works 
 * for any purpose, so long as the name of the university of 
 * michigan is not used in any advertising or publicity 
 * pertaining to the use or distribution of this software 
 * without specific, written prior authorization.  if the 
 * above copyright notice or any other identification of the 
 * university of michigan is included in any copy of any 
 * portion of this software, then the disclaimer below must 
 * also be included.
 * 
 * this software is provided as is, without representation 
 * from the university of michigan as to its fitness for any 
 * purpose, and without warranty by the university of 
 * michigan of any kind, either express or implied, including 
 * without limitation the implied warranties of 
 * merchantability and fitness for a particular purpose. the 
 * regents of the university of michigan shall not be liable 
 * for any damages, including special, indirect, incidental, or 
 * consequential damages, with respect to any claim arising 
 * out of or in connection with the use of the software, even 
 * if it has been or is hereafter advised of the possibility of 
 * such damages.
 *
 * SSH / smartcard integration project, smartcard side 
 *
 * Tomoko Fukuzawa, created, Feb., 2000
 * Naomaru Itoi, modified, Apr., 2000
 */
d44 5
a48 5
{ 
    /* constants declaration */ 
    // code of CLA byte in the command APDU header 
    private final byte Ssh_CLA =(byte)0x05;
    
d50 4
a53 4
    private final byte DECRYPT = (byte) 0x10;
    private final byte GET_KEYLENGTH = (byte) 0x20;
    private final byte GET_PUBKEY = (byte) 0x30;
    private final byte GET_RESPONSE = (byte) 0xc0;
d56 1
a56 1
    private final short keysize = 1024;
d62 1
a62 1
    
a63 1
    //byte pubkey[];
d71 1
a71 1
	
a72 1
	rsakey.setKeyInstance ((short)0xc8, (short)0x10);
d77 9
a85 8
	/*
	pubkey = new byte[keysize/8];
	file.selectFile((short)(0x3f<<8)); // select root
	file.selectFile((short)(('s'<<8)|'h')); // select public key file
	os.readBinaryFile (pubkey, (short)0, (short)0, (short)(keysize/8));
	*/
	register(); 
    } // end of the constructor 
d89 1
a89 1
	new Ssh();	// create a Ssh applet instance (card) 
d92 4
d97 3
a99 3
    { 
	// APDU object carries a byte array (buffer) to 
	// transfer incoming and outgoing APDU header 
d101 1
a101 1
	buffer = apdu.getBuffer(); 
d104 1
a104 1
	// APDU message 
d108 1
a108 1
		
d115 1
a115 1
	    
d118 1
a118 1
	    
d121 1
d128 1
a128 6
	    apdu.setOutgoingAndSend((short)0, (short)(keysize/8)); 
	    /*
	    apdu.setOutgoing();
	    apdu.setOutgoingLength((short)(keysize/8)); 
	    apdu.sendBytesLong(pubkey, (short)0, (short)(keysize/8));
	    */
d138 2
a139 2
	    ISOException.throwIt (ISO.SW_INS_NOT_SUPPORTED); 
	} 
d143 1
a143 16
    /*
    private void decrypt (APDU apdu)
    {
 	short size = (short) (buffer[ISO.OFFSET_LC] & 0x00FF);

	if (apdu.setIncomingAndReceive() != size)
	    ISOException.throwIt (ISO.SW_WRONG_LENGTH);

	//short offset = (short) ISO.OFFSET_CDATA;

	rsakey.cryptoUpdate (buffer, (short) ISO.OFFSET_CDATA, size, buffer,
			     (short) ISO.OFFSET_CDATA);
	apdu.setOutgoingAndSend ((short) ISO.OFFSET_CDATA, size);
    }
    */
} // end of class Ssh 
@

