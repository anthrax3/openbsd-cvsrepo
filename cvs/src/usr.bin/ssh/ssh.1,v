head	1.384;
access;
symbols
	OPENBSD_6_2:1.384.0.2
	OPENBSD_6_2_BASE:1.384
	OPENBSD_6_1:1.376.0.6
	OPENBSD_6_1_BASE:1.376
	OPENBSD_6_0:1.376.0.4
	OPENBSD_6_0_BASE:1.376
	OPENBSD_5_9:1.369.0.2
	OPENBSD_5_9_BASE:1.369
	OPENBSD_5_8:1.361.0.2
	OPENBSD_5_8_BASE:1.361
	OPENBSD_5_7:1.356.0.2
	OPENBSD_5_7_BASE:1.356
	OPENBSD_5_6:1.348.0.4
	OPENBSD_5_6_BASE:1.348
	OPENBSD_5_5:1.343.0.4
	OPENBSD_5_5_BASE:1.343
	OPENBSD_5_4:1.334.0.2
	OPENBSD_5_4_BASE:1.334
	OPENBSD_5_3:1.330.0.2
	OPENBSD_5_3_BASE:1.330
	OPENBSD_5_2:1.326.0.2
	OPENBSD_5_2_BASE:1.326
	OPENBSD_5_1_BASE:1.323
	OPENBSD_5_1:1.323.0.2
	OPENBSD_5_0:1.320.0.2
	OPENBSD_5_0_BASE:1.320
	OPENBSD_4_9:1.316.0.2
	OPENBSD_4_9_BASE:1.316
	OPENBSD_4_8:1.309.0.2
	OPENBSD_4_8_BASE:1.309
	OPENBSD_4_7:1.302.0.2
	OPENBSD_4_7_BASE:1.302
	OPENBSD_4_6:1.283.0.4
	OPENBSD_4_6_BASE:1.283
	OPENBSD_4_5:1.282.0.2
	OPENBSD_4_5_BASE:1.282
	OPENBSD_4_4:1.277.0.2
	OPENBSD_4_4_BASE:1.277
	OPENBSD_4_3:1.273.0.2
	OPENBSD_4_3_BASE:1.273
	OPENBSD_4_2:1.270.0.2
	OPENBSD_4_2_BASE:1.270
	OPENBSD_4_1:1.266.0.2
	OPENBSD_4_1_BASE:1.266
	OPENBSD_4_0:1.263.0.4
	OPENBSD_4_0_BASE:1.263
	OPENBSD_3_9:1.257.0.2
	OPENBSD_3_9_BASE:1.257
	OPENBSD_3_8:1.209.0.2
	OPENBSD_3_8_BASE:1.209
	OPENBSD_3_7:1.205.0.2
	OPENBSD_3_7_BASE:1.205
	OPENBSD_3_6:1.196.0.2
	OPENBSD_3_6_BASE:1.196
	OPENBSD_3_5:1.182.0.2
	OPENBSD_3_5_BASE:1.182
	OPENBSD_3_4:1.175.0.2
	OPENBSD_3_4_BASE:1.175
	OPENBSD_3_3:1.167.0.4
	OPENBSD_3_3_BASE:1.167
	OPENBSD_3_2:1.167.0.2
	OPENBSD_3_2_BASE:1.167
	OPENBSD_3_1:1.150.0.2
	OPENBSD_3_1_BASE:1.150
	OPENBSD_3_0:1.139.0.2
	OPENBSD_3_0_BASE:1.139
	OPENBSD_2_9_BASE:1.107
	OPENBSD_2_9:1.107.0.2
	OPENBSD_2_8:1.64.0.2
	OPENBSD_2_8_BASE:1.64
	OPENBSD_2_7:1.52.0.2
	OPENBSD_2_7_BASE:1.52
	OPENBSD_2_6:1.22.0.2
	OPENBSD_2_6_BASE:1.22;
locks; strict;
comment	@.\" @;


1.384
date	2017.09.21.19.16.53;	author markus;	state Exp;
branches;
next	1.383;
commitid	trdBaE0Ug2XpXLIx;

1.383
date	2017.06.09.06.43.01;	author djm;	state Exp;
branches;
next	1.382;
commitid	j6cf2pTLHXxFudnp;

1.382
date	2017.05.30.18.58.37;	author bluhm;	state Exp;
branches;
next	1.381;
commitid	j7BllWBE4YuWyULn;

1.381
date	2017.05.05.10.41.58;	author naddy;	state Exp;
branches;
next	1.380;
commitid	VIW7SWpf7IS4KFdz;

1.380
date	2017.05.03.21.49.18;	author naddy;	state Exp;
branches;
next	1.379;
commitid	qVss2xGmxPBNdLEP;

1.379
date	2017.05.03.06.32.02;	author jmc;	state Exp;
branches;
next	1.378;
commitid	NNIlzHLJ71CXYS5g;

1.378
date	2017.05.02.13.44.51;	author jmc;	state Exp;
branches;
next	1.377;
commitid	9ep49wmW9sWflpaw;

1.377
date	2017.04.30.23.18.22;	author djm;	state Exp;
branches;
next	1.376;
commitid	JXK97829jBc4Iwod;

1.376
date	2016.07.16.06.57.55;	author jmc;	state Exp;
branches;
next	1.375;
commitid	YtGE59gQHprFvUUp;

1.375
date	2016.07.15.00.24.30;	author djm;	state Exp;
branches;
next	1.374;
commitid	PAQPO8bvkonq4i81;

1.374
date	2016.06.29.17.14.28;	author jmc;	state Exp;
branches;
next	1.373;
commitid	fRmNChfVCQuwvIag;

1.373
date	2016.06.03.06.44.12;	author jmc;	state Exp;
branches;
next	1.372;
commitid	1JWJNcx35t2WJSZP;

1.372
date	2016.06.03.04.09.39;	author dtucker;	state Exp;
branches;
next	1.371;
commitid	KcqPbgryCK0G1AKK;

1.371
date	2016.05.04.12.21.53;	author markus;	state Exp;
branches;
next	1.370;
commitid	cxcRWNRjlPdtRVOI;

1.370
date	2016.04.15.00.30.19;	author djm;	state Exp;
branches;
next	1.369;
commitid	my9uXywHtGIyCVPH;

1.369
date	2016.02.17.07.38.19;	author jmc;	state Exp;
branches;
next	1.368;
commitid	EioSSmAAduCymkBM;

1.368
date	2016.02.16.07.47.54;	author jmc;	state Exp;
branches;
next	1.367;
commitid	ATJjM0W27RmIi3Ze;

1.367
date	2016.02.16.05.11.04;	author djm;	state Exp;
branches;
next	1.366;
commitid	GecgNm76VKv0Y3TT;

1.366
date	2015.11.15.22.26.49;	author jcs;	state Exp;
branches;
next	1.365;
commitid	mjNGB5AAtJeHDag2;

1.365
date	2015.11.06.00.31.41;	author mmcc;	state Exp;
branches;
next	1.364;
commitid	B3pDgGJHUs4buK8j;

1.364
date	2015.09.25.18.19.54;	author jmc;	state Exp;
branches;
next	1.363;
commitid	bDGtLfIWAQWS7gma;

1.363
date	2015.09.24.06.15.11;	author djm;	state Exp;
branches;
next	1.362;
commitid	nGLvQjqT3Z8tECCC;

1.362
date	2015.09.11.03.42.32;	author djm;	state Exp;
branches;
next	1.361;
commitid	SLa17utXXyyWcTCJ;

1.361
date	2015.07.20.18.44.12;	author millert;	state Exp;
branches;
next	1.360;
commitid	kjq2AicRmYV9JS22;

1.360
date	2015.07.20.15.39.52;	author millert;	state Exp;
branches;
next	1.359;
commitid	C7NjCX6YW50AkboO;

1.359
date	2015.07.10.06.21.53;	author markus;	state Exp;
branches;
next	1.358;
commitid	iQTtbsbSVdO9zivU;

1.358
date	2015.05.22.05.28.45;	author djm;	state Exp;
branches;
next	1.357;
commitid	IutsqeUwULpHbCfv;

1.357
date	2015.05.06.05.45.17;	author dtucker;	state Exp;
branches;
next	1.356;
commitid	5TDEmRcVybPNdsKD;

1.356
date	2015.03.03.06.48.58;	author djm;	state Exp;
branches;
next	1.355;
commitid	FmYNy3aFBDiZmN1Z;

1.355
date	2015.01.30.11.43.14;	author djm;	state Exp;
branches;
next	1.354;
commitid	NHgy1atCg6tWjTbF;

1.354
date	2015.01.26.12.16.36;	author djm;	state Exp;
branches;
next	1.353;
commitid	Qkeu18lNkzEqe7DP;

1.353
date	2014.12.22.09.26.31;	author jmc;	state Exp;
branches;
next	1.352;
commitid	pYqBpWMRG89Q2OWn;

1.352
date	2014.12.21.22.27.56;	author djm;	state Exp;
branches;
next	1.351;
commitid	EbtriidyZdsmXksl;

1.351
date	2014.10.09.06.21.31;	author jmc;	state Exp;
branches;
next	1.350;
commitid	v1cNuSL1F1D0GTqB;

1.350
date	2014.10.08.22.20.25;	author djm;	state Exp;
branches;
next	1.349;
commitid	FjkSE9L51UbRANmo;

1.349
date	2014.08.30.15.33.50;	author sobrado;	state Exp;
branches;
next	1.348;
commitid	qDOCDATnMVba0efh;

1.348
date	2014.07.24.22.57.10;	author millert;	state Exp;
branches;
next	1.347;
commitid	ZWcXR04lxGD1iWCU;

1.347
date	2014.07.16.14.48.57;	author jmc;	state Exp;
branches;
next	1.346;
commitid	CjMaZHIGczyKjtun;

1.346
date	2014.07.03.05.38.17;	author djm;	state Exp;
branches;
next	1.345;
commitid	v1GbKKvqHwLKG0tZ;

1.345
date	2014.04.19.18.42.19;	author tedu;	state Exp;
branches;
next	1.344;

1.344
date	2014.03.17.19.44.10;	author tedu;	state Exp;
branches;
next	1.343;

1.343
date	2013.12.07.11.58.46;	author naddy;	state Exp;
branches;
next	1.342;

1.342
date	2013.11.26.12.14.54;	author jmc;	state Exp;
branches;
next	1.341;

1.341
date	2013.11.25.18.04.21;	author deraadt;	state Exp;
branches;
next	1.340;

1.340
date	2013.11.21.00.45.44;	author djm;	state Exp;
branches;
next	1.339;

1.339
date	2013.10.16.22.49.38;	author djm;	state Exp;
branches;
next	1.338;

1.338
date	2013.10.16.02.31.46;	author djm;	state Exp;
branches;
next	1.337;

1.337
date	2013.10.15.14.10.25;	author jmc;	state Exp;
branches;
next	1.336;

1.336
date	2013.08.20.06.56.07;	author jmc;	state Exp;
branches;
next	1.335;

1.335
date	2013.08.14.08.39.27;	author jmc;	state Exp;
branches;
next	1.334;

1.334
date	2013.07.18.01.12.26;	author djm;	state Exp;
branches;
next	1.333;

1.333
date	2013.06.27.14.05.37;	author jmc;	state Exp;
branches;
next	1.332;

1.332
date	2013.04.19.01.06.50;	author djm;	state Exp;
branches;
next	1.331;

1.331
date	2013.04.07.02.10.33;	author dtucker;	state Exp;
branches;
next	1.330;

1.330
date	2012.10.04.13.21.50;	author markus;	state Exp;
branches;
next	1.329;

1.329
date	2012.09.26.16.12.13;	author jmc;	state Exp;
branches;
next	1.328;

1.328
date	2012.09.06.13.57.42;	author jmc;	state Exp;
branches;
next	1.327;

1.327
date	2012.09.06.04.37.39;	author dtucker;	state Exp;
branches;
next	1.326;

1.326
date	2012.06.18.12.17.18;	author dtucker;	state Exp;
branches;
next	1.325;

1.325
date	2012.06.18.12.07.07;	author dtucker;	state Exp;
branches;
next	1.324;

1.324
date	2012.04.20.16.26.22;	author jmc;	state Exp;
branches;
next	1.323;

1.323
date	2011.09.11.06.59.05;	author okan;	state Exp;
branches;
next	1.322;

1.322
date	2011.09.10.22.26.34;	author markus;	state Exp;
branches;
next	1.321;

1.321
date	2011.08.26.01.45.15;	author djm;	state Exp;
branches;
next	1.320;

1.320
date	2011.08.02.01.22.11;	author djm;	state Exp;
branches;
next	1.319;

1.319
date	2011.05.07.23.20.25;	author jmc;	state Exp;
branches;
next	1.318;

1.318
date	2011.04.18.00.21.11;	author jmc;	state Exp;
branches;
next	1.317;

1.317
date	2011.04.17.22.42.41;	author djm;	state Exp;
branches;
next	1.316;

1.316
date	2010.11.18.15.01.00;	author jmc;	state Exp;
branches;
next	1.315;

1.315
date	2010.10.28.18.33.28;	author jmc;	state Exp;
branches;
next	1.314;

1.314
date	2010.09.22.08.30.08;	author jmc;	state Exp;
branches;
next	1.313;

1.313
date	2010.09.11.21.44.20;	author djm;	state Exp;
branches;
next	1.312;

1.312
date	2010.09.04.09.38.34;	author jmc;	state Exp;
branches;
next	1.311;

1.311
date	2010.08.31.21.14.58;	author jmc;	state Exp;
branches;
next	1.310;

1.310
date	2010.08.31.11.54.45;	author djm;	state Exp;
branches;
next	1.309;

1.309
date	2010.08.08.19.36.30;	author jmc;	state Exp;
branches;
next	1.308;

1.308
date	2010.08.04.05.37.01;	author djm;	state Exp;
branches;
next	1.307;

1.307
date	2010.07.23.08.49.25;	author dtucker;	state Exp;
branches;
next	1.306;

1.306
date	2010.07.14.17.06.58;	author jmc;	state Exp;
branches;
next	1.305;

1.305
date	2010.05.16.12.55.51;	author markus;	state Exp;
branches;
next	1.304;

1.304
date	2010.03.26.06.54.36;	author jmc;	state Exp;
branches;
next	1.303;

1.303
date	2010.03.26.00.26.58;	author djm;	state Exp;
branches;
next	1.302;

1.302
date	2010.03.05.10.28.21;	author djm;	state Exp;
branches;
next	1.301;

1.301
date	2010.03.05.08.31.20;	author jmc;	state Exp;
branches;
next	1.300;

1.300
date	2010.03.05.06.50.34;	author jmc;	state Exp;
branches;
next	1.299;

1.299
date	2010.03.04.23.19.29;	author djm;	state Exp;
branches;
next	1.298;

1.298
date	2010.03.04.12.51.25;	author jmc;	state Exp;
branches;
next	1.297;

1.297
date	2010.03.04.10.36.03;	author djm;	state Exp;
branches;
next	1.296;

1.296
date	2010.02.26.22.09.28;	author jmc;	state Exp;
branches;
next	1.295;

1.295
date	2010.02.26.20.29.54;	author djm;	state Exp;
branches;
next	1.294;

1.294
date	2010.02.11.13.23.29;	author jmc;	state Exp;
branches;
next	1.293;

1.293
date	2010.02.10.23.20.38;	author markus;	state Exp;
branches;
next	1.292;

1.292
date	2010.02.08.22.03.05;	author jmc;	state Exp;
branches;
next	1.291;

1.291
date	2010.02.08.10.50.20;	author markus;	state Exp;
branches;
next	1.290;

1.290
date	2010.01.11.01.39.46;	author dtucker;	state Exp;
branches;
next	1.289;

1.289
date	2010.01.09.23.04.13;	author dtucker;	state Exp;
branches;
next	1.288;

1.288
date	2009.12.29.16.38.41;	author stevesk;	state Exp;
branches;
next	1.287;

1.287
date	2009.10.28.16.38.18;	author reyk;	state Exp;
branches;
next	1.286;

1.286
date	2009.10.22.15.02.12;	author sobrado;	state Exp;
branches;
next	1.285;

1.285
date	2009.10.22.12.35.53;	author sobrado;	state Exp;
branches;
next	1.284;

1.284
date	2009.10.08.20.42.12;	author jmc;	state Exp;
branches;
next	1.283;

1.283
date	2009.03.19.15.15.09;	author jmc;	state Exp;
branches;
next	1.282;

1.282
date	2009.02.12.03.44.25;	author djm;	state Exp;
branches;
next	1.281;

1.281
date	2009.02.12.03.42.09;	author djm;	state Exp;
branches;
next	1.280;

1.280
date	2008.11.09.12.34.47;	author tobias;	state Exp;
branches;
next	1.279;

1.279
date	2008.11.05.03.23.09;	author stevesk;	state Exp;
branches;
next	1.278;

1.278
date	2008.10.08.23.34.03;	author djm;	state Exp;
branches;
next	1.277;

1.277
date	2008.07.02.13.47.39;	author djm;	state Exp;
branches;
next	1.276;

1.276
date	2008.06.26.21.11.46;	author jmc;	state Exp;
branches;
next	1.275;

1.275
date	2008.06.26.11.46.31;	author grunk;	state Exp;
branches;
next	1.274;

1.274
date	2008.06.13.20.13.26;	author grunk;	state Exp;
branches;
next	1.273;

1.273
date	2008.02.11.07.58.28;	author jmc;	state Exp;
branches;
next	1.272;

1.272
date	2008.02.09.12.15.43;	author mcbride;	state Exp;
branches;
next	1.271;

1.271
date	2008.01.19.19.13.28;	author djm;	state Exp;
branches;
next	1.270;

1.270
date	2007.06.12.13.43.55;	author jmc;	state Exp;
branches;
next	1.269;

1.269
date	2007.06.12.11.15.17;	author djm;	state Exp;
branches;
next	1.268;

1.268
date	2007.06.07.19.37.34;	author pvalchev;	state Exp;
branches;
next	1.267;

1.267
date	2007.05.31.19.20.16;	author jmc;	state Exp;
branches;
next	1.266;

1.266
date	2006.12.11.21.25.46;	author markus;	state Exp;
branches;
next	1.265;

1.265
date	2006.10.28.18.08.10;	author otto;	state Exp;
branches;
next	1.264;

1.264
date	2006.09.25.04.55.38;	author ray;	state Exp;
branches;
next	1.263;

1.263
date	2006.07.11.18.50.48;	author markus;	state Exp;
branches
	1.263.4.1;
next	1.262;

1.262
date	2006.07.02.23.01.55;	author stevesk;	state Exp;
branches;
next	1.261;

1.261
date	2006.07.02.17.12.58;	author stevesk;	state Exp;
branches;
next	1.260;

1.260
date	2006.05.29.16.13.23;	author jmc;	state Exp;
branches;
next	1.259;

1.259
date	2006.03.22.21.16.24;	author jakob;	state Exp;
branches;
next	1.258;

1.258
date	2006.03.16.04.24.42;	author djm;	state Exp;
branches;
next	1.257;

1.257
date	2006.02.24.20.31.30;	author jmc;	state Exp;
branches
	1.257.2.1;
next	1.256;

1.256
date	2006.02.15.16.53.20;	author jmc;	state Exp;
branches;
next	1.255;

1.255
date	2006.02.06.21.44.47;	author jmc;	state Exp;
branches;
next	1.254;

1.254
date	2006.02.06.15.54.07;	author msf;	state Exp;
branches;
next	1.253;

1.253
date	2006.01.30.13.37.49;	author jmc;	state Exp;
branches;
next	1.252;

1.252
date	2006.01.26.08.47.56;	author jmc;	state Exp;
branches;
next	1.251;

1.251
date	2006.01.20.00.14.55;	author dtucker;	state Exp;
branches;
next	1.250;

1.250
date	2006.01.18.10.53.29;	author jmc;	state Exp;
branches;
next	1.249;

1.249
date	2006.01.15.17.37.05;	author jmc;	state Exp;
branches;
next	1.248;

1.248
date	2006.01.12.22.34.12;	author jmc;	state Exp;
branches;
next	1.247;

1.247
date	2006.01.12.18.48.48;	author jmc;	state Exp;
branches;
next	1.246;

1.246
date	2006.01.12.14.44.12;	author jmc;	state Exp;
branches;
next	1.245;

1.245
date	2006.01.06.13.29.10;	author jmc;	state Exp;
branches;
next	1.244;

1.244
date	2006.01.06.13.27.32;	author jmc;	state Exp;
branches;
next	1.243;

1.243
date	2006.01.04.19.50.09;	author jmc;	state Exp;
branches;
next	1.242;

1.242
date	2006.01.04.19.40.24;	author jmc;	state Exp;
branches;
next	1.241;

1.241
date	2006.01.04.18.45.01;	author jmc;	state Exp;
branches;
next	1.240;

1.240
date	2006.01.04.18.42.46;	author jmc;	state Exp;
branches;
next	1.239;

1.239
date	2006.01.03.16.55.18;	author jmc;	state Exp;
branches;
next	1.238;

1.238
date	2006.01.03.16.52.36;	author jmc;	state Exp;
branches;
next	1.237;

1.237
date	2006.01.03.16.35.30;	author jmc;	state Exp;
branches;
next	1.236;

1.236
date	2006.01.03.16.31.10;	author jmc;	state Exp;
branches;
next	1.235;

1.235
date	2006.01.02.12.31.06;	author jmc;	state Exp;
branches;
next	1.234;

1.234
date	2005.12.31.13.45.19;	author jmc;	state Exp;
branches;
next	1.233;

1.233
date	2005.12.31.13.44.04;	author jmc;	state Exp;
branches;
next	1.232;

1.232
date	2005.12.31.10.46.17;	author jmc;	state Exp;
branches;
next	1.231;

1.231
date	2005.12.31.01.38.45;	author stevesk;	state Exp;
branches;
next	1.230;

1.230
date	2005.12.23.23.46.23;	author jmc;	state Exp;
branches;
next	1.229;

1.229
date	2005.12.23.14.55.53;	author jmc;	state Exp;
branches;
next	1.228;

1.228
date	2005.12.22.11.23.42;	author jmc;	state Exp;
branches;
next	1.227;

1.227
date	2005.12.21.12.53.31;	author jmc;	state Exp;
branches;
next	1.226;

1.226
date	2005.12.21.11.57.25;	author jmc;	state Exp;
branches;
next	1.225;

1.225
date	2005.12.21.11.48.16;	author jmc;	state Exp;
branches;
next	1.224;

1.224
date	2005.12.20.22.09.41;	author jmc;	state Exp;
branches;
next	1.223;

1.223
date	2005.12.20.22.02.50;	author jmc;	state Exp;
branches;
next	1.222;

1.222
date	2005.12.20.21.59.43;	author jmc;	state Exp;
branches;
next	1.221;

1.221
date	2005.12.16.18.14.40;	author jmc;	state Exp;
branches;
next	1.220;

1.220
date	2005.12.16.18.12.22;	author jmc;	state Exp;
branches;
next	1.219;

1.219
date	2005.12.16.18.08.53;	author jmc;	state Exp;
branches;
next	1.218;

1.218
date	2005.12.16.18.07.08;	author jmc;	state Exp;
branches;
next	1.217;

1.217
date	2005.12.08.14.59.44;	author jmc;	state Exp;
branches;
next	1.216;

1.216
date	2005.12.07.10.52.13;	author jmc;	state Exp;
branches;
next	1.215;

1.215
date	2005.12.06.22.38.27;	author reyk;	state Exp;
branches;
next	1.214;

1.214
date	2005.11.30.11.45.20;	author jmc;	state Exp;
branches;
next	1.213;

1.213
date	2005.11.30.11.18.27;	author jmc;	state Exp;
branches;
next	1.212;

1.212
date	2005.09.19.23.31.31;	author djm;	state Exp;
branches;
next	1.211;

1.211
date	2005.09.19.15.38.27;	author jmc;	state Exp;
branches;
next	1.210;

1.210
date	2005.09.19.11.37.34;	author djm;	state Exp;
branches;
next	1.209;

1.209
date	2005.07.06.09.33.05;	author dtucker;	state Exp;
branches
	1.209.2.1;
next	1.208;

1.208
date	2005.05.23.23.32.46;	author djm;	state Exp;
branches;
next	1.207;

1.207
date	2005.04.21.06.17.50;	author djm;	state Exp;
branches;
next	1.206;

1.206
date	2005.04.14.12.30.30;	author jmc;	state Exp;
branches;
next	1.205;

1.205
date	2005.03.07.23.41.54;	author jmc;	state Exp;
branches
	1.205.2.1;
next	1.204;

1.204
date	2005.03.02.11.45.01;	author jmc;	state Exp;
branches;
next	1.203;

1.203
date	2005.03.02.02.21.07;	author djm;	state Exp;
branches;
next	1.202;

1.202
date	2005.03.01.14.47.58;	author jmc;	state Exp;
branches;
next	1.201;

1.201
date	2005.03.01.10.40.27;	author djm;	state Exp;
branches;
next	1.200;

1.200
date	2005.03.01.10.09.52;	author djm;	state Exp;
branches;
next	1.199;

1.199
date	2004.11.07.17.42.36;	author jmc;	state Exp;
branches;
next	1.198;

1.198
date	2004.11.07.00.01.46;	author djm;	state Exp;
branches;
next	1.197;

1.197
date	2004.10.07.10.10.24;	author djm;	state Exp;
branches;
next	1.196;

1.196
date	2004.08.30.21.22.49;	author jmc;	state Exp;
branches
	1.196.2.1;
next	1.195;

1.195
date	2004.08.26.16.00.55;	author markus;	state Exp;
branches;
next	1.194;

1.194
date	2004.08.12.21.41.13;	author jakob;	state Exp;
branches;
next	1.193;

1.193
date	2004.06.26.09.03.21;	author jmc;	state Exp;
branches;
next	1.192;

1.192
date	2004.06.18.10.55.43;	author markus;	state Exp;
branches;
next	1.191;

1.191
date	2004.06.17.23.56.57;	author djm;	state Exp;
branches;
next	1.190;

1.190
date	2004.06.13.15.03.02;	author djm;	state Exp;
branches;
next	1.189;

1.189
date	2004.06.13.14.01.42;	author dtucker;	state Exp;
branches;
next	1.188;

1.188
date	2004.05.22.16.01.05;	author jmc;	state Exp;
branches;
next	1.187;

1.187
date	2004.05.22.06.32.12;	author djm;	state Exp;
branches;
next	1.186;

1.186
date	2004.05.21.11.33.11;	author djm;	state Exp;
branches;
next	1.185;

1.185
date	2004.05.02.11.57.52;	author dtucker;	state Exp;
branches;
next	1.184;

1.184
date	2004.04.28.07.13.42;	author jmc;	state Exp;
branches;
next	1.183;

1.183
date	2004.04.19.13.02.40;	author djm;	state Exp;
branches;
next	1.182;

1.182
date	2004.03.05.10.53.58;	author markus;	state Exp;
branches
	1.182.2.1;
next	1.181;

1.181
date	2003.12.16.15.49.51;	author markus;	state Exp;
branches;
next	1.180;

1.180
date	2003.12.09.21.53.37;	author markus;	state Exp;
branches;
next	1.179;

1.179
date	2003.11.24.00.16.35;	author dtucker;	state Exp;
branches;
next	1.178;

1.178
date	2003.10.11.08.24.08;	author markus;	state Exp;
branches;
next	1.177;

1.177
date	2003.10.08.08.27.36;	author jmc;	state Exp;
branches;
next	1.176;

1.176
date	2003.09.29.11.40.51;	author jmc;	state Exp;
branches;
next	1.175;

1.175
date	2003.07.22.13.35.22;	author markus;	state Exp;
branches
	1.175.2.1;
next	1.174;

1.174
date	2003.07.02.14.51.16;	author markus;	state Exp;
branches;
next	1.173;

1.173
date	2003.06.10.09.12.11;	author jmc;	state Exp;
branches;
next	1.172;

1.172
date	2003.05.20.12.09.31;	author jmc;	state Exp;
branches;
next	1.171;

1.171
date	2003.05.15.04.08.41;	author markus;	state Exp;
branches;
next	1.170;

1.170
date	2003.05.14.22.24.42;	author markus;	state Exp;
branches;
next	1.169;

1.169
date	2003.04.12.11.40.15;	author naddy;	state Exp;
branches;
next	1.168;

1.168
date	2003.03.28.10.11.43;	author jmc;	state Exp;
branches;
next	1.167;

1.167
date	2002.09.27.15.46.21;	author stevesk;	state Exp;
branches
	1.167.2.1
	1.167.4.1;
next	1.166;

1.166
date	2002.09.12.19.50.36;	author stevesk;	state Exp;
branches;
next	1.165;

1.165
date	2002.09.11.17.55.03;	author stevesk;	state Exp;
branches;
next	1.164;

1.164
date	2002.08.29.16.02.54;	author stevesk;	state Exp;
branches;
next	1.163;

1.163
date	2002.08.17.23.07.14;	author stevesk;	state Exp;
branches;
next	1.162;

1.162
date	2002.08.12.17.30.35;	author stevesk;	state Exp;
branches;
next	1.161;

1.161
date	2002.08.02.16.00.07;	author marc;	state Exp;
branches;
next	1.160;

1.160
date	2002.06.22.11.51.39;	author naddy;	state Exp;
branches;
next	1.159;

1.159
date	2002.06.22.02.40.23;	author stevesk;	state Exp;
branches;
next	1.158;

1.158
date	2002.06.20.19.56.07;	author stevesk;	state Exp;
branches;
next	1.157;

1.157
date	2002.06.19.00.27.55;	author deraadt;	state Exp;
branches;
next	1.156;

1.156
date	2002.06.10.17.45.20;	author stevesk;	state Exp;
branches;
next	1.155;

1.155
date	2002.06.09.22.15.15;	author stevesk;	state Exp;
branches;
next	1.154;

1.154
date	2002.06.08.05.17.01;	author markus;	state Exp;
branches;
next	1.153;

1.153
date	2002.05.29.03.06.30;	author stevesk;	state Exp;
branches;
next	1.152;

1.152
date	2002.05.26.20.35.10;	author stevesk;	state Exp;
branches;
next	1.151;

1.151
date	2002.05.06.23.34.33;	author millert;	state Exp;
branches;
next	1.150;

1.150
date	2002.03.26.11.34.49;	author markus;	state Exp;
branches
	1.150.2.1;
next	1.149;

1.149
date	2002.03.21.15.17.26;	author jakob;	state Exp;
branches;
next	1.148;

1.148
date	2002.02.18.17.55.20;	author markus;	state Exp;
branches;
next	1.147;

1.147
date	2002.02.09.17.37.34;	author deraadt;	state Exp;
branches;
next	1.146;

1.146
date	2002.02.03.22.35.57;	author stevesk;	state Exp;
branches;
next	1.145;

1.145
date	2002.01.29.23.50.37;	author markus;	state Exp;
branches;
next	1.144;

1.144
date	2002.01.16.17.42.33;	author stevesk;	state Exp;
branches;
next	1.143;

1.143
date	2002.01.05.21.51.56;	author stevesk;	state Exp;
branches;
next	1.142;

1.142
date	2001.12.28.22.37.48;	author stevesk;	state Exp;
branches;
next	1.141;

1.141
date	2001.11.08.17.49.53;	author markus;	state Exp;
branches;
next	1.140;

1.140
date	2001.10.30.20.29.09;	author markus;	state Exp;
branches;
next	1.139;

1.139
date	2001.10.01.21.51.16;	author markus;	state Exp;
branches
	1.139.2.1;
next	1.138;

1.138
date	2001.09.19.19.24.19;	author stevesk;	state Exp;
branches;
next	1.137;

1.137
date	2001.09.05.06.23.07;	author deraadt;	state Exp;
branches;
next	1.136;

1.136
date	2001.08.30.16.04.35;	author stevesk;	state Exp;
branches;
next	1.135;

1.135
date	2001.08.30.15.42.36;	author naddy;	state Exp;
branches;
next	1.134;

1.134
date	2001.08.29.23.39.40;	author stevesk;	state Exp;
branches;
next	1.133;

1.133
date	2001.08.29.23.13.11;	author stevesk;	state Exp;
branches;
next	1.132;

1.132
date	2001.08.28.15.39.48;	author markus;	state Exp;
branches;
next	1.131;

1.131
date	2001.08.22.17.45.16;	author stevesk;	state Exp;
branches;
next	1.130;

1.130
date	2001.08.22.16.21.21;	author stevesk;	state Exp;
branches;
next	1.129;

1.129
date	2001.08.21.21.47.41;	author stevesk;	state Exp;
branches;
next	1.128;

1.128
date	2001.08.16.20.14.57;	author stevesk;	state Exp;
branches;
next	1.127;

1.127
date	2001.08.14.17.54.29;	author stevesk;	state Exp;
branches;
next	1.126;

1.126
date	2001.08.01.22.16.45;	author markus;	state Exp;
branches;
next	1.125;

1.125
date	2001.07.31.09.28.44;	author jakob;	state Exp;
branches;
next	1.124;

1.124
date	2001.07.25.14.35.18;	author markus;	state Exp;
branches;
next	1.123;

1.123
date	2001.07.23.12.47.05;	author markus;	state Exp;
branches;
next	1.122;

1.122
date	2001.07.22.22.04.19;	author markus;	state Exp;
branches;
next	1.121;

1.121
date	2001.07.22.21.32.42;	author pvalchev;	state Exp;
branches;
next	1.120;

1.120
date	2001.07.20.18.41.51;	author stevesk;	state Exp;
branches;
next	1.119;

1.119
date	2001.07.19.00.41.44;	author stevesk;	state Exp;
branches;
next	1.118;

1.118
date	2001.06.26.17.25.34;	author markus;	state Exp;
branches;
next	1.117;

1.117
date	2001.06.23.17.48.19;	author itojun;	state Exp;
branches;
next	1.116;

1.116
date	2001.06.23.02.34.31;	author markus;	state Exp;
branches;
next	1.115;

1.115
date	2001.06.22.21.55.49;	author markus;	state Exp;
branches;
next	1.114;

1.114
date	2001.06.22.10.17.51;	author mpech;	state Exp;
branches;
next	1.113;

1.113
date	2001.05.19.16.46.19;	author markus;	state Exp;
branches;
next	1.112;

1.112
date	2001.05.19.16.32.16;	author markus;	state Exp;
branches;
next	1.111;

1.111
date	2001.05.17.21.34.15;	author markus;	state Exp;
branches;
next	1.110;

1.110
date	2001.05.15.22.04.01;	author deraadt;	state Exp;
branches;
next	1.109;

1.109
date	2001.05.04.14.21.55;	author stevesk;	state Exp;
branches;
next	1.108;

1.108
date	2001.04.30.11.18.52;	author markus;	state Exp;
branches;
next	1.107;

1.107
date	2001.04.22.23.58.36;	author markus;	state Exp;
branches
	1.107.2.1;
next	1.106;

1.106
date	2001.04.22.13.32.27;	author markus;	state Exp;
branches;
next	1.105;

1.105
date	2001.04.22.08.13.30;	author djm;	state Exp;
branches;
next	1.104;

1.104
date	2001.04.20.07.17.51;	author djm;	state Exp;
branches;
next	1.103;

1.103
date	2001.04.17.10.53.26;	author markus;	state Exp;
branches;
next	1.102;

1.102
date	2001.04.10.09.13.22;	author itojun;	state Exp;
branches;
next	1.101;

1.101
date	2001.04.05.15.45.43;	author markus;	state Exp;
branches;
next	1.100;

1.100
date	2001.03.26.15.47.59;	author stevesk;	state Exp;
branches;
next	1.99;

1.99
date	2001.03.19.12.49.51;	author djm;	state Exp;
branches;
next	1.98;

1.98
date	2001.03.08.00.15.48;	author markus;	state Exp;
branches;
next	1.97;

1.97
date	2001.03.07.04.05.58;	author deraadt;	state Exp;
branches;
next	1.96;

1.96
date	2001.03.07.01.19.06;	author deraadt;	state Exp;
branches;
next	1.95;

1.95
date	2001.03.05.17.40.48;	author stevesk;	state Exp;
branches;
next	1.94;

1.94
date	2001.03.05.15.56.16;	author deraadt;	state Exp;
branches;
next	1.93;

1.93
date	2001.03.02.18.54.31;	author deraadt;	state Exp;
branches;
next	1.92;

1.92
date	2001.02.22.21.57.26;	author markus;	state Exp;
branches;
next	1.91;

1.91
date	2001.02.11.12.59.25;	author markus;	state Exp;
branches;
next	1.90;

1.90
date	2001.02.10.16.03.29;	author markus;	state Exp;
branches;
next	1.89;

1.89
date	2001.02.10.15.48.53;	author stevesk;	state Exp;
branches;
next	1.88;

1.88
date	2001.02.09.18.18.26;	author provos;	state Exp;
branches;
next	1.87;

1.87
date	2001.02.08.19.22.38;	author itojun;	state Exp;
branches;
next	1.86;

1.86
date	2001.02.06.23.05.44;	author jakob;	state Exp;
branches;
next	1.85;

1.85
date	2001.02.06.23.03.24;	author jakob;	state Exp;
branches;
next	1.84;

1.84
date	2001.02.04.15.10.44;	author markus;	state Exp;
branches;
next	1.83;

1.83
date	2001.02.04.11.11.55;	author djm;	state Exp;
branches;
next	1.82;

1.82
date	2001.02.03.17.03.05;	author stevesk;	state Exp;
branches;
next	1.81;

1.81
date	2001.02.03.10.19.50;	author markus;	state Exp;
branches;
next	1.80;

1.80
date	2001.01.29.12.36.10;	author djm;	state Exp;
branches;
next	1.79;

1.79
date	2001.01.28.20.36.16;	author stevesk;	state Exp;
branches;
next	1.78;

1.78
date	2001.01.28.10.24.04;	author markus;	state Exp;
branches;
next	1.77;

1.77
date	2001.01.18.16.20.22;	author markus;	state Exp;
branches;
next	1.76;

1.76
date	2001.01.07.11.28.06;	author markus;	state Exp;
branches;
next	1.75;

1.75
date	2001.01.04.22.35.32;	author djm;	state Exp;
branches;
next	1.74;

1.74
date	2000.12.27.12.30.20;	author markus;	state Exp;
branches;
next	1.73;

1.73
date	2000.12.27.11.51.53;	author markus;	state Exp;
branches;
next	1.72;

1.72
date	2000.12.12.23.11.48;	author markus;	state Exp;
branches;
next	1.71;

1.71
date	2000.12.07.04.24.59;	author djm;	state Exp;
branches;
next	1.70;

1.70
date	2000.12.01.00.00.51;	author markus;	state Exp;
branches;
next	1.69;

1.69
date	2000.11.30.07.04.02;	author markus;	state Exp;
branches;
next	1.68;

1.68
date	2000.11.12.19.50.38;	author markus;	state Exp;
branches;
next	1.67;

1.67
date	2000.11.10.05.10.40;	author aaron;	state Exp;
branches;
next	1.66;

1.66
date	2000.11.08.23.51.08;	author aaron;	state Exp;
branches;
next	1.65;

1.65
date	2000.11.08.19.37.33;	author aaron;	state Exp;
branches;
next	1.64;

1.64
date	2000.10.16.21.46.31;	author markus;	state Exp;
branches
	1.64.2.1;
next	1.63;

1.63
date	2000.10.16.09.38.44;	author djm;	state Exp;
branches;
next	1.62;

1.62
date	2000.10.14.12.09.46;	author markus;	state Exp;
branches;
next	1.61;

1.61
date	2000.10.13.17.20.44;	author aaron;	state Exp;
branches;
next	1.60;

1.60
date	2000.09.12.20.53.10;	author markus;	state Exp;
branches;
next	1.59;

1.59
date	2000.09.07.20.27.54;	author deraadt;	state Exp;
branches;
next	1.58;

1.58
date	2000.09.03.15.23.28;	author itojun;	state Exp;
branches;
next	1.57;

1.57
date	2000.08.25.16.16.15;	author deraadt;	state Exp;
branches;
next	1.56;

1.56
date	2000.07.26.17.46.50;	author deraadt;	state Exp;
branches;
next	1.55;

1.55
date	2000.05.31.06.36.40;	author markus;	state Exp;
branches;
next	1.54;

1.54
date	2000.05.29.20.20.46;	author markus;	state Exp;
branches;
next	1.53;

1.53
date	2000.05.15.06.54.03;	author markus;	state Exp;
branches;
next	1.52;

1.52
date	2000.05.08.17.21.32;	author hugh;	state Exp;
branches
	1.52.2.1;
next	1.51;

1.51
date	2000.05.08.17.12.15;	author markus;	state Exp;
branches;
next	1.50;

1.50
date	2000.05.06.17.45.37;	author markus;	state Exp;
branches;
next	1.49;

1.49
date	2000.05.03.22.01.09;	author markus;	state Exp;
branches;
next	1.48;

1.48
date	2000.05.03.18.04.39;	author markus;	state Exp;
branches;
next	1.47;

1.47
date	2000.05.02.22.01.55;	author markus;	state Exp;
branches;
next	1.46;

1.46
date	2000.04.14.10.11.12;	author markus;	state Exp;
branches;
next	1.45;

1.45
date	2000.04.12.23.00.28;	author markus;	state Exp;
branches;
next	1.44;

1.44
date	2000.04.12.21.47.51;	author aaron;	state Exp;
branches;
next	1.43;

1.43
date	2000.03.24.03.04.46;	author brad;	state Exp;
branches;
next	1.42;

1.42
date	2000.03.23.21.39.55;	author aaron;	state Exp;
branches;
next	1.41;

1.41
date	2000.03.23.21.11.38;	author aaron;	state Exp;
branches;
next	1.40;

1.40
date	2000.03.11.21.40.03;	author aaron;	state Exp;
branches;
next	1.39;

1.39
date	2000.03.04.07.07.05;	author djm;	state Exp;
branches;
next	1.38;

1.38
date	2000.02.28.19.51.58;	author markus;	state Exp;
branches;
next	1.37;

1.37
date	2000.02.21.14.19.09;	author deraadt;	state Exp;
branches;
next	1.36;

1.36
date	2000.02.15.16.36.14;	author markus;	state Exp;
branches;
next	1.35;

1.35
date	2000.01.22.02.17.50;	author aaron;	state Exp;
branches;
next	1.34;

1.34
date	2000.01.14.09.47.26;	author markus;	state Exp;
branches;
next	1.33;

1.33
date	2000.01.14.09.24.31;	author markus;	state Exp;
branches;
next	1.32;

1.32
date	2000.01.04.16.57.16;	author markus;	state Exp;
branches;
next	1.31;

1.31
date	99.12.25.13.35.55;	author markus;	state Exp;
branches;
next	1.30;

1.30
date	99.12.10.04.19.25;	author provos;	state Exp;
branches;
next	1.29;

1.29
date	99.12.02.17.23.54;	author markus;	state Exp;
branches;
next	1.28;

1.28
date	99.11.24.20.15.36;	author markus;	state Exp;
branches;
next	1.27;

1.27
date	99.11.22.21.52.41;	author markus;	state Exp;
branches;
next	1.26;

1.26
date	99.11.17.21.08.07;	author aaron;	state Exp;
branches;
next	1.25;

1.25
date	99.11.16.22.53.29;	author provos;	state Exp;
branches;
next	1.24;

1.24
date	99.11.10.23.36.44;	author markus;	state Exp;
branches;
next	1.23;

1.23
date	99.11.09.23.09.58;	author markus;	state Exp;
branches;
next	1.22;

1.22
date	99.10.17.16.58.39;	author provos;	state Exp;
branches;
next	1.21;

1.21
date	99.10.17.00.31.06;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	99.10.17.00.26.59;	author provos;	state Exp;
branches;
next	1.19;

1.19
date	99.10.16.20.56.52;	author markus;	state Exp;
branches;
next	1.18;

1.18
date	99.10.16.20.47.14;	author markus;	state Exp;
branches;
next	1.17;

1.17
date	99.10.14.18.17.42;	author markus;	state Exp;
branches;
next	1.16;

1.16
date	99.10.12.21.04.22;	author markus;	state Exp;
branches;
next	1.15;

1.15
date	99.10.11.20.40.08;	author markus;	state Exp;
branches;
next	1.14;

1.14
date	99.10.06.20.07.42;	author dugsong;	state Exp;
branches;
next	1.13;

1.13
date	99.10.03.21.50.04;	author provos;	state Exp;
branches;
next	1.12;

1.12
date	99.10.03.18.46.12;	author aaron;	state Exp;
branches;
next	1.11;

1.11
date	99.10.02.21.35.47;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	99.10.02.21.19.42;	author provos;	state Exp;
branches;
next	1.9;

1.9
date	99.10.02.13.10.26;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	99.10.01.18.17.49;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	99.09.30.17.20.44;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	99.09.30.16.49.00;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	99.09.30.08.52.34;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	99.09.29.18.16.20;	author dugsong;	state Exp;
branches;
next	1.3;

1.3
date	99.09.29.00.10.16;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	99.09.26.22.30.06;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	99.09.26.20.53.37;	author deraadt;	state Exp;
branches;
next	;

1.52.2.1
date	2000.06.12.02.37.36;	author jason;	state Exp;
branches;
next	1.52.2.2;

1.52.2.2
date	2000.09.01.18.23.23;	author jason;	state Exp;
branches;
next	1.52.2.3;

1.52.2.3
date	2000.11.08.21.31.23;	author jason;	state Exp;
branches;
next	1.52.2.4;

1.52.2.4
date	2001.03.12.15.44.16;	author jason;	state Exp;
branches;
next	1.52.2.5;

1.52.2.5
date	2001.03.21.18.53.11;	author jason;	state Exp;
branches;
next	;

1.64.2.1
date	2001.02.16.20.13.19;	author jason;	state Exp;
branches;
next	1.64.2.2;

1.64.2.2
date	2001.02.19.17.19.32;	author jason;	state Exp;
branches;
next	1.64.2.3;

1.64.2.3
date	2001.03.21.19.46.30;	author jason;	state Exp;
branches;
next	1.64.2.4;

1.64.2.4
date	2001.05.07.21.09.36;	author jason;	state Exp;
branches;
next	1.64.2.5;

1.64.2.5
date	2001.09.27.00.15.42;	author miod;	state Exp;
branches;
next	1.64.2.6;

1.64.2.6
date	2001.11.15.00.15.00;	author miod;	state Exp;
branches;
next	1.64.2.7;

1.64.2.7
date	2001.11.15.22.50.30;	author miod;	state Exp;
branches;
next	1.64.2.8;

1.64.2.8
date	2002.03.08.17.04.43;	author brad;	state Exp;
branches;
next	;

1.107.2.1
date	2001.09.27.19.03.55;	author jason;	state Exp;
branches;
next	1.107.2.2;

1.107.2.2
date	2001.11.15.00.15.19;	author miod;	state Exp;
branches;
next	1.107.2.3;

1.107.2.3
date	2001.11.15.22.51.15;	author miod;	state Exp;
branches;
next	1.107.2.4;

1.107.2.4
date	2002.03.09.00.20.45;	author miod;	state Exp;
branches;
next	1.107.2.5;

1.107.2.5
date	2002.06.02.22.56.11;	author miod;	state Exp;
branches;
next	;

1.139.2.1
date	2001.11.14.03.24.39;	author jason;	state Exp;
branches;
next	1.139.2.2;

1.139.2.2
date	2002.03.07.17.37.47;	author jason;	state Exp;
branches;
next	1.139.2.3;

1.139.2.3
date	2002.03.08.15.17.18;	author brad;	state Exp;
branches;
next	1.139.2.4;

1.139.2.4
date	2002.05.17.00.03.24;	author miod;	state Exp;
branches;
next	1.139.2.5;

1.139.2.5
date	2002.06.22.07.23.18;	author miod;	state Exp;
branches;
next	1.139.2.6;

1.139.2.6
date	2002.06.26.18.22.36;	author miod;	state Exp;
branches;
next	1.139.2.7;

1.139.2.7
date	2002.10.11.14.53.07;	author miod;	state Exp;
branches;
next	;

1.150.2.1
date	2002.05.18.04.12.11;	author jason;	state Exp;
branches;
next	1.150.2.2;

1.150.2.2
date	2002.05.18.04.50.38;	author jason;	state Exp;
branches;
next	1.150.2.3;

1.150.2.3
date	2002.06.26.15.30.39;	author jason;	state Exp;
branches;
next	1.150.2.4;

1.150.2.4
date	2002.10.11.14.51.53;	author miod;	state Exp;
branches;
next	1.150.2.5;

1.150.2.5
date	2003.04.03.22.35.18;	author miod;	state Exp;
branches;
next	;

1.167.2.1
date	2003.04.03.23.27.13;	author margarida;	state Exp;
branches;
next	1.167.2.2;

1.167.2.2
date	2003.09.16.21.20.28;	author brad;	state Exp;
branches;
next	;

1.167.4.1
date	2003.05.11.12.01.52;	author margarida;	state Exp;
branches;
next	1.167.4.2;

1.167.4.2
date	2003.09.16.20.50.44;	author brad;	state Exp;
branches;
next	1.167.4.3;

1.167.4.3
date	2004.03.04.18.18.16;	author brad;	state Exp;
branches;
next	;

1.175.2.1
date	2004.02.28.03.51.34;	author brad;	state Exp;
branches;
next	1.175.2.2;

1.175.2.2
date	2004.08.19.22.37.32;	author brad;	state Exp;
branches;
next	;

1.182.2.1
date	2004.08.19.04.13.27;	author brad;	state Exp;
branches;
next	1.182.2.2;

1.182.2.2
date	2005.03.10.17.15.05;	author brad;	state Exp;
branches;
next	;

1.196.2.1
date	2005.03.10.16.28.28;	author brad;	state Exp;
branches;
next	1.196.2.2;

1.196.2.2
date	2005.09.02.03.45.01;	author brad;	state Exp;
branches;
next	;

1.205.2.1
date	2005.09.04.18.40.10;	author brad;	state Exp;
branches;
next	1.205.2.2;

1.205.2.2
date	2006.02.03.02.53.45;	author brad;	state Exp;
branches;
next	;

1.209.2.1
date	2006.02.03.03.01.57;	author brad;	state Exp;
branches;
next	1.209.2.2;

1.209.2.2
date	2006.10.06.03.19.33;	author brad;	state Exp;
branches;
next	1.209.2.3;

1.209.2.3
date	2006.11.08.00.44.05;	author brad;	state Exp;
branches;
next	;

1.257.2.1
date	2006.09.30.04.06.51;	author brad;	state Exp;
branches;
next	1.257.2.2;

1.257.2.2
date	2006.11.08.00.17.14;	author brad;	state Exp;
branches;
next	;

1.263.4.1
date	2006.11.08.00.42.11;	author brad;	state Exp;
branches;
next	;


desc
@@


1.384
log
@Add 'reverse' dynamic forwarding which combines dynamic forwarding
(-D) with remote forwarding (-R) where the remote-forwarded port
expects SOCKS-requests.

The SSH server code is unchanged and the parsing happens at the SSH
clients side. Thus the full SOCKS-request is sent over the forwarded
channel and the client parses c->output. Parsing happens in
channel_before_prepare_select(), _before_ the select bitmask is
computed in the pre[] handlers, but after network input processing
in the post[] handlers.

help and ok djm@@
@
text
@.\"
.\" Author: Tatu Ylonen <ylo@@cs.hut.fi>
.\" Copyright (c) 1995 Tatu Ylonen <ylo@@cs.hut.fi>, Espoo, Finland
.\"                    All rights reserved
.\"
.\" As far as I am concerned, the code I have written for this software
.\" can be used freely for any purpose.  Any derived versions of this
.\" software must be clearly marked as such, and if the derived work is
.\" incompatible with the protocol description in the RFC file, it must be
.\" called by a name other than "ssh" or "Secure Shell".
.\"
.\" Copyright (c) 1999,2000 Markus Friedl.  All rights reserved.
.\" Copyright (c) 1999 Aaron Campbell.  All rights reserved.
.\" Copyright (c) 1999 Theo de Raadt.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
.\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.\" $OpenBSD: ssh.1,v 1.383 2017/06/09 06:43:01 djm Exp $
.Dd $Mdocdate: June 9 2017 $
.Dt SSH 1
.Os
.Sh NAME
.Nm ssh
.Nd OpenSSH SSH client (remote login program)
.Sh SYNOPSIS
.Nm ssh
.Bk -words
.Op Fl 46AaCfGgKkMNnqsTtVvXxYy
.Op Fl b Ar bind_address
.Op Fl c Ar cipher_spec
.Op Fl D Oo Ar bind_address : Oc Ns Ar port
.Op Fl E Ar log_file
.Op Fl e Ar escape_char
.Op Fl F Ar configfile
.Op Fl I Ar pkcs11
.Op Fl i Ar identity_file
.Op Fl J Oo Ar user Ns @@ Oc Ns Ar host Ns Op : Ns Ar port
.Op Fl L Ar address
.Op Fl l Ar login_name
.Op Fl m Ar mac_spec
.Op Fl O Ar ctl_cmd
.Op Fl o Ar option
.Op Fl p Ar port
.Op Fl Q Ar query_option
.Op Fl R Ar address
.Op Fl S Ar ctl_path
.Op Fl W Ar host : Ns Ar port
.Op Fl w Ar local_tun Ns Op : Ns Ar remote_tun
.Oo Ar user Ns @@ Oc Ns Ar hostname
.Op Ar command
.Ek
.Sh DESCRIPTION
.Nm
(SSH client) is a program for logging into a remote machine and for
executing commands on a remote machine.
It is intended to provide secure encrypted communications between
two untrusted hosts over an insecure network.
X11 connections, arbitrary TCP ports and
.Ux Ns -domain
sockets can also be forwarded over the secure channel.
.Pp
.Nm
connects and logs into the specified
.Ar hostname
(with optional
.Ar user
name).
The user must prove
his/her identity to the remote machine using one of several methods
(see below).
.Pp
If
.Ar command
is specified,
it is executed on the remote host instead of a login shell.
.Pp
The options are as follows:
.Pp
.Bl -tag -width Ds -compact
.It Fl 4
Forces
.Nm
to use IPv4 addresses only.
.Pp
.It Fl 6
Forces
.Nm
to use IPv6 addresses only.
.Pp
.It Fl A
Enables forwarding of the authentication agent connection.
This can also be specified on a per-host basis in a configuration file.
.Pp
Agent forwarding should be enabled with caution.
Users with the ability to bypass file permissions on the remote host
(for the agent's
.Ux Ns -domain
socket) can access the local agent through the forwarded connection.
An attacker cannot obtain key material from the agent,
however they can perform operations on the keys that enable them to
authenticate using the identities loaded into the agent.
.Pp
.It Fl a
Disables forwarding of the authentication agent connection.
.Pp
.It Fl b Ar bind_address
Use
.Ar bind_address
on the local machine as the source address
of the connection.
Only useful on systems with more than one address.
.Pp
.It Fl C
Requests compression of all data (including stdin, stdout, stderr, and
data for forwarded X11, TCP and
.Ux Ns -domain
connections).
The compression algorithm is the same used by
.Xr gzip 1 .
Compression is desirable on modem lines and other
slow connections, but will only slow down things on fast networks.
The default value can be set on a host-by-host basis in the
configuration files; see the
.Cm Compression
option.
.Pp
.It Fl c Ar cipher_spec
Selects the cipher specification for encrypting the session.
.Ar cipher_spec
is a comma-separated list of ciphers
listed in order of preference.
See the
.Cm Ciphers
keyword in
.Xr ssh_config 5
for more information.
.Pp
.It Fl D Xo
.Sm off
.Oo Ar bind_address : Oc
.Ar port
.Sm on
.Xc
Specifies a local
.Dq dynamic
application-level port forwarding.
This works by allocating a socket to listen to
.Ar port
on the local side, optionally bound to the specified
.Ar bind_address .
Whenever a connection is made to this port, the
connection is forwarded over the secure channel, and the application
protocol is then used to determine where to connect to from the
remote machine.
Currently the SOCKS4 and SOCKS5 protocols are supported, and
.Nm
will act as a SOCKS server.
Only root can forward privileged ports.
Dynamic port forwardings can also be specified in the configuration file.
.Pp
IPv6 addresses can be specified by enclosing the address in square brackets.
Only the superuser can forward privileged ports.
By default, the local port is bound in accordance with the
.Cm GatewayPorts
setting.
However, an explicit
.Ar bind_address
may be used to bind the connection to a specific address.
The
.Ar bind_address
of
.Dq localhost
indicates that the listening port be bound for local use only, while an
empty address or
.Sq *
indicates that the port should be available from all interfaces.
.Pp
.It Fl E Ar log_file
Append debug logs to
.Ar log_file
instead of standard error.
.Pp
.It Fl e Ar escape_char
Sets the escape character for sessions with a pty (default:
.Ql ~ ) .
The escape character is only recognized at the beginning of a line.
The escape character followed by a dot
.Pq Ql \&.
closes the connection;
followed by control-Z suspends the connection;
and followed by itself sends the escape character once.
Setting the character to
.Dq none
disables any escapes and makes the session fully transparent.
.Pp
.It Fl F Ar configfile
Specifies an alternative per-user configuration file.
If a configuration file is given on the command line,
the system-wide configuration file
.Pq Pa /etc/ssh/ssh_config
will be ignored.
The default for the per-user configuration file is
.Pa ~/.ssh/config .
.Pp
.It Fl f
Requests
.Nm
to go to background just before command execution.
This is useful if
.Nm
is going to ask for passwords or passphrases, but the user
wants it in the background.
This implies
.Fl n .
The recommended way to start X11 programs at a remote site is with
something like
.Ic ssh -f host xterm .
.Pp
If the
.Cm ExitOnForwardFailure
configuration option is set to
.Dq yes ,
then a client started with
.Fl f
will wait for all remote port forwards to be successfully established
before placing itself in the background.
.Pp
.It Fl G
Causes
.Nm
to print its configuration after evaluating
.Cm Host
and
.Cm Match
blocks and exit.
.Pp
.It Fl g
Allows remote hosts to connect to local forwarded ports.
If used on a multiplexed connection, then this option must be specified
on the master process.
.Pp
.It Fl I Ar pkcs11
Specify the PKCS#11 shared library
.Nm
should use to communicate with a PKCS#11 token providing the user's
private RSA key.
.Pp
.It Fl i Ar identity_file
Selects a file from which the identity (private key) for
public key authentication is read.
The default is
.Pa ~/.ssh/id_dsa ,
.Pa ~/.ssh/id_ecdsa ,
.Pa ~/.ssh/id_ed25519
and
.Pa ~/.ssh/id_rsa .
Identity files may also be specified on
a per-host basis in the configuration file.
It is possible to have multiple
.Fl i
options (and multiple identities specified in
configuration files).
If no certificates have been explicitly specified by the
.Cm CertificateFile
directive,
.Nm
will also try to load certificate information from the filename obtained
by appending
.Pa -cert.pub
to identity filenames.
.Pp
.It Fl J Xo
.Sm off
.Op Ar user No @@
.Ar host
.Op : Ar port
.Sm on
.Xc
Connect to the target host by first making a
.Nm
connection to the jump
.Ar host
and then establishing a TCP forwarding to the ultimate destination from
there.
Multiple jump hops may be specified separated by comma characters.
This is a shortcut to specify a
.Cm ProxyJump
configuration directive.
.Pp
.It Fl K
Enables GSSAPI-based authentication and forwarding (delegation) of GSSAPI
credentials to the server.
.Pp
.It Fl k
Disables forwarding (delegation) of GSSAPI credentials to the server.
.Pp
.It Fl L Xo
.Sm off
.Oo Ar bind_address : Oc
.Ar port : host : hostport
.Sm on
.Xc
.It Fl L Xo
.Sm off
.Oo Ar bind_address : Oc
.Ar port : remote_socket
.Sm on
.Xc
.It Fl L Xo
.Sm off
.Ar local_socket : host : hostport
.Sm on
.Xc
.It Fl L Xo
.Sm off
.Ar local_socket : remote_socket
.Sm on
.Xc
Specifies that connections to the given TCP port or Unix socket on the local
(client) host are to be forwarded to the given host and port, or Unix socket,
on the remote side.
This works by allocating a socket to listen to either a TCP
.Ar port
on the local side, optionally bound to the specified
.Ar bind_address ,
or to a Unix socket.
Whenever a connection is made to the local port or socket, the
connection is forwarded over the secure channel, and a connection is
made to either
.Ar host
port
.Ar hostport ,
or the Unix socket
.Ar remote_socket ,
from the remote machine.
.Pp
Port forwardings can also be specified in the configuration file.
Only the superuser can forward privileged ports.
IPv6 addresses can be specified by enclosing the address in square brackets.
.Pp
By default, the local port is bound in accordance with the
.Cm GatewayPorts
setting.
However, an explicit
.Ar bind_address
may be used to bind the connection to a specific address.
The
.Ar bind_address
of
.Dq localhost
indicates that the listening port be bound for local use only, while an
empty address or
.Sq *
indicates that the port should be available from all interfaces.
.Pp
.It Fl l Ar login_name
Specifies the user to log in as on the remote machine.
This also may be specified on a per-host basis in the configuration file.
.Pp
.It Fl M
Places the
.Nm
client into
.Dq master
mode for connection sharing.
Multiple
.Fl M
options places
.Nm
into
.Dq master
mode with confirmation required before slave connections are accepted.
Refer to the description of
.Cm ControlMaster
in
.Xr ssh_config 5
for details.
.Pp
.It Fl m Ar mac_spec
A comma-separated list of MAC (message authentication code) algorithms,
specified in order of preference.
See the
.Cm MACs
keyword for more information.
.Pp
.It Fl N
Do not execute a remote command.
This is useful for just forwarding ports.
.Pp
.It Fl n
Redirects stdin from
.Pa /dev/null
(actually, prevents reading from stdin).
This must be used when
.Nm
is run in the background.
A common trick is to use this to run X11 programs on a remote machine.
For example,
.Ic ssh -n shadows.cs.hut.fi emacs &
will start an emacs on shadows.cs.hut.fi, and the X11
connection will be automatically forwarded over an encrypted channel.
The
.Nm
program will be put in the background.
(This does not work if
.Nm
needs to ask for a password or passphrase; see also the
.Fl f
option.)
.Pp
.It Fl O Ar ctl_cmd
Control an active connection multiplexing master process.
When the
.Fl O
option is specified, the
.Ar ctl_cmd
argument is interpreted and passed to the master process.
Valid commands are:
.Dq check
(check that the master process is running),
.Dq forward
(request forwardings without command execution),
.Dq cancel
(cancel forwardings),
.Dq exit
(request the master to exit), and
.Dq stop
(request the master to stop accepting further multiplexing requests).
.Pp
.It Fl o Ar option
Can be used to give options in the format used in the configuration file.
This is useful for specifying options for which there is no separate
command-line flag.
For full details of the options listed below, and their possible values, see
.Xr ssh_config 5 .
.Pp
.Bl -tag -width Ds -offset indent -compact
.It AddKeysToAgent
.It AddressFamily
.It BatchMode
.It BindAddress
.It CanonicalDomains
.It CanonicalizeFallbackLocal
.It CanonicalizeHostname
.It CanonicalizeMaxDots
.It CanonicalizePermittedCNAMEs
.It CertificateFile
.It ChallengeResponseAuthentication
.It CheckHostIP
.It Ciphers
.It ClearAllForwardings
.It Compression
.It ConnectionAttempts
.It ConnectTimeout
.It ControlMaster
.It ControlPath
.It ControlPersist
.It DynamicForward
.It EscapeChar
.It ExitOnForwardFailure
.It FingerprintHash
.It ForwardAgent
.It ForwardX11
.It ForwardX11Timeout
.It ForwardX11Trusted
.It GatewayPorts
.It GlobalKnownHostsFile
.It GSSAPIAuthentication
.It GSSAPIDelegateCredentials
.It HashKnownHosts
.It Host
.It HostbasedAuthentication
.It HostbasedKeyTypes
.It HostKeyAlgorithms
.It HostKeyAlias
.It HostName
.It IdentitiesOnly
.It IdentityAgent
.It IdentityFile
.It Include
.It IPQoS
.It KbdInteractiveAuthentication
.It KbdInteractiveDevices
.It KexAlgorithms
.It LocalCommand
.It LocalForward
.It LogLevel
.It MACs
.It Match
.It NoHostAuthenticationForLocalhost
.It NumberOfPasswordPrompts
.It PasswordAuthentication
.It PermitLocalCommand
.It PKCS11Provider
.It Port
.It PreferredAuthentications
.It ProxyCommand
.It ProxyJump
.It ProxyUseFdpass
.It PubkeyAcceptedKeyTypes
.It PubkeyAuthentication
.It RekeyLimit
.It RemoteCommand
.It RemoteForward
.It RequestTTY
.It SendEnv
.It ServerAliveInterval
.It ServerAliveCountMax
.It StreamLocalBindMask
.It StreamLocalBindUnlink
.It StrictHostKeyChecking
.It TCPKeepAlive
.It Tunnel
.It TunnelDevice
.It UpdateHostKeys
.It UsePrivilegedPort
.It User
.It UserKnownHostsFile
.It VerifyHostKeyDNS
.It VisualHostKey
.It XAuthLocation
.El
.Pp
.It Fl p Ar port
Port to connect to on the remote host.
This can be specified on a
per-host basis in the configuration file.
.Pp
.It Fl Q Ar query_option
Queries
.Nm
for the algorithms supported for the specified version 2.
The available features are:
.Ar cipher
(supported symmetric ciphers),
.Ar cipher-auth
(supported symmetric ciphers that support authenticated encryption),
.Ar mac
(supported message integrity codes),
.Ar kex
(key exchange algorithms),
.Ar key
(key types),
.Ar key-cert
(certificate key types),
.Ar key-plain
(non-certificate key types), and
.Ar protocol-version
(supported SSH protocol versions).
.Pp
.It Fl q
Quiet mode.
Causes most warning and diagnostic messages to be suppressed.
.Pp
.It Fl R Xo
.Sm off
.Oo Ar bind_address : Oc
.Ar port : host : hostport
.Sm on
.Xc
.It Fl R Xo
.Sm off
.Oo Ar bind_address : Oc
.Ar port : local_socket
.Sm on
.Xc
.It Fl R Xo
.Sm off
.Ar remote_socket : host : hostport
.Sm on
.Xc
.It Fl R Xo
.Sm off
.Ar remote_socket : local_socket
.Sm on
.Xc
.It Fl R Xo
.Sm off
.Oo Ar bind_address : Oc
.Ar port
.Sm on
.Xc
Specifies that connections to the given TCP port or Unix socket on the remote
(server) host are to be forwarded to the local side.
.Pp
This works by allocating a socket to listen to either a TCP
.Ar port
or to a Unix socket on the remote side.
Whenever a connection is made to this port or Unix socket, the
connection is forwarded over the secure channel, and a connection
is made from the local machine to either an explicit destination specified by
.Ar host
port
.Ar hostport ,
or
.Ar local_socket ,
or, if no explicit destination was specified,
.Nm
will act as a SOCKS 4/5 proxy and forward connections to the destinations
requested by the remote SOCKS client.
.Pp
Port forwardings can also be specified in the configuration file.
Privileged ports can be forwarded only when
logging in as root on the remote machine.
IPv6 addresses can be specified by enclosing the address in square brackets.
.Pp
By default, TCP listening sockets on the server will be bound to the loopback
interface only.
This may be overridden by specifying a
.Ar bind_address .
An empty
.Ar bind_address ,
or the address
.Ql * ,
indicates that the remote socket should listen on all interfaces.
Specifying a remote
.Ar bind_address
will only succeed if the server's
.Cm GatewayPorts
option is enabled (see
.Xr sshd_config 5 ) .
.Pp
If the
.Ar port
argument is
.Ql 0 ,
the listen port will be dynamically allocated on the server and reported
to the client at run time.
When used together with
.Ic -O forward
the allocated port will be printed to the standard output.
.Pp
.It Fl S Ar ctl_path
Specifies the location of a control socket for connection sharing,
or the string
.Dq none
to disable connection sharing.
Refer to the description of
.Cm ControlPath
and
.Cm ControlMaster
in
.Xr ssh_config 5
for details.
.Pp
.It Fl s
May be used to request invocation of a subsystem on the remote system.
Subsystems facilitate the use of SSH
as a secure transport for other applications (e.g.\&
.Xr sftp 1 ) .
The subsystem is specified as the remote command.
.Pp
.It Fl T
Disable pseudo-terminal allocation.
.Pp
.It Fl t
Force pseudo-terminal allocation.
This can be used to execute arbitrary
screen-based programs on a remote machine, which can be very useful,
e.g. when implementing menu services.
Multiple
.Fl t
options force tty allocation, even if
.Nm
has no local tty.
.Pp
.It Fl V
Display the version number and exit.
.Pp
.It Fl v
Verbose mode.
Causes
.Nm
to print debugging messages about its progress.
This is helpful in
debugging connection, authentication, and configuration problems.
Multiple
.Fl v
options increase the verbosity.
The maximum is 3.
.Pp
.It Fl W Ar host : Ns Ar port
Requests that standard input and output on the client be forwarded to
.Ar host
on
.Ar port
over the secure channel.
Implies
.Fl N ,
.Fl T ,
.Cm ExitOnForwardFailure
and
.Cm ClearAllForwardings ,
though these can be overridden in the configuration file or using
.Fl o
command line options.
.Pp
.It Fl w Xo
.Ar local_tun Ns Op : Ns Ar remote_tun
.Xc
Requests
tunnel
device forwarding with the specified
.Xr tun 4
devices between the client
.Pq Ar local_tun
and the server
.Pq Ar remote_tun .
.Pp
The devices may be specified by numerical ID or the keyword
.Dq any ,
which uses the next available tunnel device.
If
.Ar remote_tun
is not specified, it defaults to
.Dq any .
See also the
.Cm Tunnel
and
.Cm TunnelDevice
directives in
.Xr ssh_config 5 .
If the
.Cm Tunnel
directive is unset, it is set to the default tunnel mode, which is
.Dq point-to-point .
.Pp
.It Fl X
Enables X11 forwarding.
This can also be specified on a per-host basis in a configuration file.
.Pp
X11 forwarding should be enabled with caution.
Users with the ability to bypass file permissions on the remote host
(for the user's X authorization database)
can access the local X11 display through the forwarded connection.
An attacker may then be able to perform activities such as keystroke monitoring.
.Pp
For this reason, X11 forwarding is subjected to X11 SECURITY extension
restrictions by default.
Please refer to the
.Nm
.Fl Y
option and the
.Cm ForwardX11Trusted
directive in
.Xr ssh_config 5
for more information.
.Pp
.It Fl x
Disables X11 forwarding.
.Pp
.It Fl Y
Enables trusted X11 forwarding.
Trusted X11 forwardings are not subjected to the X11 SECURITY extension
controls.
.Pp
.It Fl y
Send log information using the
.Xr syslog 3
system module.
By default this information is sent to stderr.
.El
.Pp
.Nm
may additionally obtain configuration data from
a per-user configuration file and a system-wide configuration file.
The file format and configuration options are described in
.Xr ssh_config 5 .
.Sh AUTHENTICATION
The OpenSSH SSH client supports SSH protocol 2.
.Pp
The methods available for authentication are:
GSSAPI-based authentication,
host-based authentication,
public key authentication,
challenge-response authentication,
and password authentication.
Authentication methods are tried in the order specified above,
though
.Cm PreferredAuthentications
can be used to change the default order.
.Pp
Host-based authentication works as follows:
If the machine the user logs in from is listed in
.Pa /etc/hosts.equiv
or
.Pa /etc/shosts.equiv
on the remote machine, and the user names are
the same on both sides, or if the files
.Pa ~/.rhosts
or
.Pa ~/.shosts
exist in the user's home directory on the
remote machine and contain a line containing the name of the client
machine and the name of the user on that machine, the user is
considered for login.
Additionally, the server
.Em must
be able to verify the client's
host key (see the description of
.Pa /etc/ssh/ssh_known_hosts
and
.Pa ~/.ssh/known_hosts ,
below)
for login to be permitted.
This authentication method closes security holes due to IP
spoofing, DNS spoofing, and routing spoofing.
[Note to the administrator:
.Pa /etc/hosts.equiv ,
.Pa ~/.rhosts ,
and the rlogin/rsh protocol in general, are inherently insecure and should be
disabled if security is desired.]
.Pp
Public key authentication works as follows:
The scheme is based on public-key cryptography,
using cryptosystems
where encryption and decryption are done using separate keys,
and it is unfeasible to derive the decryption key from the encryption key.
The idea is that each user creates a public/private
key pair for authentication purposes.
The server knows the public key, and only the user knows the private key.
.Nm
implements public key authentication protocol automatically,
using one of the DSA, ECDSA, Ed25519 or RSA algorithms.
The HISTORY section of
.Xr ssl 8
contains a brief discussion of the DSA and RSA algorithms.
.Pp
The file
.Pa ~/.ssh/authorized_keys
lists the public keys that are permitted for logging in.
When the user logs in, the
.Nm
program tells the server which key pair it would like to use for
authentication.
The client proves that it has access to the private key
and the server checks that the corresponding public key
is authorized to accept the account.
.Pp
The server may inform the client of errors that prevented public key
authentication from succeeding after authentication completes using a
different method.
These may be viewed by increasing the
.Cm LogLevel
to
.Cm DEBUG
or higher (e.g. by using the
.Fl v
flag).
.Pp
The user creates his/her key pair by running
.Xr ssh-keygen 1 .
This stores the private key in
.Pa ~/.ssh/id_dsa
(DSA),
.Pa ~/.ssh/id_ecdsa
(ECDSA),
.Pa ~/.ssh/id_ed25519
(Ed25519),
or
.Pa ~/.ssh/id_rsa
(RSA)
and stores the public key in
.Pa ~/.ssh/id_dsa.pub
(DSA),
.Pa ~/.ssh/id_ecdsa.pub
(ECDSA),
.Pa ~/.ssh/id_ed25519.pub
(Ed25519),
or
.Pa ~/.ssh/id_rsa.pub
(RSA)
in the user's home directory.
The user should then copy the public key
to
.Pa ~/.ssh/authorized_keys
in his/her home directory on the remote machine.
The
.Pa authorized_keys
file corresponds to the conventional
.Pa ~/.rhosts
file, and has one key
per line, though the lines can be very long.
After this, the user can log in without giving the password.
.Pp
A variation on public key authentication
is available in the form of certificate authentication:
instead of a set of public/private keys,
signed certificates are used.
This has the advantage that a single trusted certification authority
can be used in place of many public/private keys.
See the CERTIFICATES section of
.Xr ssh-keygen 1
for more information.
.Pp
The most convenient way to use public key or certificate authentication
may be with an authentication agent.
See
.Xr ssh-agent 1
and (optionally) the
.Cm AddKeysToAgent
directive in
.Xr ssh_config 5
for more information.
.Pp
Challenge-response authentication works as follows:
The server sends an arbitrary
.Qq challenge
text, and prompts for a response.
Examples of challenge-response authentication include
.Bx
Authentication (see
.Xr login.conf 5 )
and PAM (some
.Pf non- Ox
systems).
.Pp
Finally, if other authentication methods fail,
.Nm
prompts the user for a password.
The password is sent to the remote
host for checking; however, since all communications are encrypted,
the password cannot be seen by someone listening on the network.
.Pp
.Nm
automatically maintains and checks a database containing
identification for all hosts it has ever been used with.
Host keys are stored in
.Pa ~/.ssh/known_hosts
in the user's home directory.
Additionally, the file
.Pa /etc/ssh/ssh_known_hosts
is automatically checked for known hosts.
Any new hosts are automatically added to the user's file.
If a host's identification ever changes,
.Nm
warns about this and disables password authentication to prevent
server spoofing or man-in-the-middle attacks,
which could otherwise be used to circumvent the encryption.
The
.Cm StrictHostKeyChecking
option can be used to control logins to machines whose
host key is not known or has changed.
.Pp
When the user's identity has been accepted by the server, the server
either executes the given command in a non-interactive session or,
if no command has been specified, logs into the machine and gives
the user a normal shell as an interactive session.
All communication with
the remote command or shell will be automatically encrypted.
.Pp
If an interactive session is requested
.Nm
by default will only request a pseudo-terminal (pty) for interactive
sessions when the client has one.
The flags
.Fl T
and
.Fl t
can be used to override this behaviour.
.Pp
If a pseudo-terminal has been allocated the
user may use the escape characters noted below.
.Pp
If no pseudo-terminal has been allocated,
the session is transparent and can be used to reliably transfer binary data.
On most systems, setting the escape character to
.Dq none
will also make the session transparent even if a tty is used.
.Pp
The session terminates when the command or shell on the remote
machine exits and all X11 and TCP connections have been closed.
.Sh ESCAPE CHARACTERS
When a pseudo-terminal has been requested,
.Nm
supports a number of functions through the use of an escape character.
.Pp
A single tilde character can be sent as
.Ic ~~
or by following the tilde by a character other than those described below.
The escape character must always follow a newline to be interpreted as
special.
The escape character can be changed in configuration files using the
.Cm EscapeChar
configuration directive or on the command line by the
.Fl e
option.
.Pp
The supported escapes (assuming the default
.Ql ~ )
are:
.Bl -tag -width Ds
.It Cm ~.
Disconnect.
.It Cm ~^Z
Background
.Nm .
.It Cm ~#
List forwarded connections.
.It Cm ~&
Background
.Nm
at logout when waiting for forwarded connection / X11 sessions to terminate.
.It Cm ~?
Display a list of escape characters.
.It Cm ~B
Send a BREAK to the remote system
(only useful if the peer supports it).
.It Cm ~C
Open command line.
Currently this allows the addition of port forwardings using the
.Fl L ,
.Fl R
and
.Fl D
options (see above).
It also allows the cancellation of existing port-forwardings
with
.Sm off
.Fl KL Oo Ar bind_address : Oc Ar port
.Sm on
for local,
.Sm off
.Fl KR Oo Ar bind_address : Oc Ar port
.Sm on
for remote and
.Sm off
.Fl KD Oo Ar bind_address : Oc Ar port
.Sm on
for dynamic port-forwardings.
.Ic !\& Ns Ar command
allows the user to execute a local command if the
.Ic PermitLocalCommand
option is enabled in
.Xr ssh_config 5 .
Basic help is available, using the
.Fl h
option.
.It Cm ~R
Request rekeying of the connection
(only useful if the peer supports it).
.It Cm ~V
Decrease the verbosity
.Pq Ic LogLevel
when errors are being written to stderr.
.It Cm ~v
Increase the verbosity
.Pq Ic LogLevel
when errors are being written to stderr.
.El
.Sh TCP FORWARDING
Forwarding of arbitrary TCP connections over the secure channel can
be specified either on the command line or in a configuration file.
One possible application of TCP forwarding is a secure connection to a
mail server; another is going through firewalls.
.Pp
In the example below, we look at encrypting communication between
an IRC client and server, even though the IRC server does not directly
support encrypted communications.
This works as follows:
the user connects to the remote host using
.Nm ,
specifying a port to be used to forward connections
to the remote server.
After that it is possible to start the service which is to be encrypted
on the client machine,
connecting to the same local port,
and
.Nm
will encrypt and forward the connection.
.Pp
The following example tunnels an IRC session from client machine
.Dq 127.0.0.1
(localhost)
to remote server
.Dq server.example.com :
.Bd -literal -offset 4n
$ ssh -f -L 1234:localhost:6667 server.example.com sleep 10
$ irc -c '#users' -p 1234 pinky 127.0.0.1
.Ed
.Pp
This tunnels a connection to IRC server
.Dq server.example.com ,
joining channel
.Dq #users ,
nickname
.Dq pinky ,
using port 1234.
It doesn't matter which port is used,
as long as it's greater than 1023
(remember, only root can open sockets on privileged ports)
and doesn't conflict with any ports already in use.
The connection is forwarded to port 6667 on the remote server,
since that's the standard port for IRC services.
.Pp
The
.Fl f
option backgrounds
.Nm
and the remote command
.Dq sleep 10
is specified to allow an amount of time
(10 seconds, in the example)
to start the service which is to be tunnelled.
If no connections are made within the time specified,
.Nm
will exit.
.Sh X11 FORWARDING
If the
.Cm ForwardX11
variable is set to
.Dq yes
(or see the description of the
.Fl X ,
.Fl x ,
and
.Fl Y
options above)
and the user is using X11 (the
.Ev DISPLAY
environment variable is set), the connection to the X11 display is
automatically forwarded to the remote side in such a way that any X11
programs started from the shell (or command) will go through the
encrypted channel, and the connection to the real X server will be made
from the local machine.
The user should not manually set
.Ev DISPLAY .
Forwarding of X11 connections can be
configured on the command line or in configuration files.
.Pp
The
.Ev DISPLAY
value set by
.Nm
will point to the server machine, but with a display number greater than zero.
This is normal, and happens because
.Nm
creates a
.Dq proxy
X server on the server machine for forwarding the
connections over the encrypted channel.
.Pp
.Nm
will also automatically set up Xauthority data on the server machine.
For this purpose, it will generate a random authorization cookie,
store it in Xauthority on the server, and verify that any forwarded
connections carry this cookie and replace it by the real cookie when
the connection is opened.
The real authentication cookie is never
sent to the server machine (and no cookies are sent in the plain).
.Pp
If the
.Cm ForwardAgent
variable is set to
.Dq yes
(or see the description of the
.Fl A
and
.Fl a
options above) and
the user is using an authentication agent, the connection to the agent
is automatically forwarded to the remote side.
.Sh VERIFYING HOST KEYS
When connecting to a server for the first time,
a fingerprint of the server's public key is presented to the user
(unless the option
.Cm StrictHostKeyChecking
has been disabled).
Fingerprints can be determined using
.Xr ssh-keygen 1 :
.Pp
.Dl $ ssh-keygen -l -f /etc/ssh/ssh_host_rsa_key
.Pp
If the fingerprint is already known, it can be matched
and the key can be accepted or rejected.
If only legacy (MD5) fingerprints for the server are available, the
.Xr ssh-keygen 1
.Fl E
option may be used to downgrade the fingerprint algorithm to match.
.Pp
Because of the difficulty of comparing host keys
just by looking at fingerprint strings,
there is also support to compare host keys visually,
using
.Em random art .
By setting the
.Cm VisualHostKey
option to
.Dq yes ,
a small ASCII graphic gets displayed on every login to a server, no matter
if the session itself is interactive or not.
By learning the pattern a known server produces, a user can easily
find out that the host key has changed when a completely different pattern
is displayed.
Because these patterns are not unambiguous however, a pattern that looks
similar to the pattern remembered only gives a good probability that the
host key is the same, not guaranteed proof.
.Pp
To get a listing of the fingerprints along with their random art for
all known hosts, the following command line can be used:
.Pp
.Dl $ ssh-keygen -lv -f ~/.ssh/known_hosts
.Pp
If the fingerprint is unknown,
an alternative method of verification is available:
SSH fingerprints verified by DNS.
An additional resource record (RR),
SSHFP,
is added to a zonefile
and the connecting client is able to match the fingerprint
with that of the key presented.
.Pp
In this example, we are connecting a client to a server,
.Dq host.example.com .
The SSHFP resource records should first be added to the zonefile for
host.example.com:
.Bd -literal -offset indent
$ ssh-keygen -r host.example.com.
.Ed
.Pp
The output lines will have to be added to the zonefile.
To check that the zone is answering fingerprint queries:
.Pp
.Dl $ dig -t SSHFP host.example.com
.Pp
Finally the client connects:
.Bd -literal -offset indent
$ ssh -o "VerifyHostKeyDNS ask" host.example.com
[...]
Matching host key fingerprint found in DNS.
Are you sure you want to continue connecting (yes/no)?
.Ed
.Pp
See the
.Cm VerifyHostKeyDNS
option in
.Xr ssh_config 5
for more information.
.Sh SSH-BASED VIRTUAL PRIVATE NETWORKS
.Nm
contains support for Virtual Private Network (VPN) tunnelling
using the
.Xr tun 4
network pseudo-device,
allowing two networks to be joined securely.
The
.Xr sshd_config 5
configuration option
.Cm PermitTunnel
controls whether the server supports this,
and at what level (layer 2 or 3 traffic).
.Pp
The following example would connect client network 10.0.50.0/24
with remote network 10.0.99.0/24 using a point-to-point connection
from 10.1.1.1 to 10.1.1.2,
provided that the SSH server running on the gateway to the remote network,
at 192.168.1.15, allows it.
.Pp
On the client:
.Bd -literal -offset indent
# ssh -f -w 0:1 192.168.1.15 true
# ifconfig tun0 10.1.1.1 10.1.1.2 netmask 255.255.255.252
# route add 10.0.99.0/24 10.1.1.2
.Ed
.Pp
On the server:
.Bd -literal -offset indent
# ifconfig tun1 10.1.1.2 10.1.1.1 netmask 255.255.255.252
# route add 10.0.50.0/24 10.1.1.1
.Ed
.Pp
Client access may be more finely tuned via the
.Pa /root/.ssh/authorized_keys
file (see below) and the
.Cm PermitRootLogin
server option.
The following entry would permit connections on
.Xr tun 4
device 1 from user
.Dq jane
and on tun device 2 from user
.Dq john ,
if
.Cm PermitRootLogin
is set to
.Dq forced-commands-only :
.Bd -literal -offset 2n
tunnel="1",command="sh /etc/netstart tun1" ssh-rsa ... jane
tunnel="2",command="sh /etc/netstart tun2" ssh-rsa ... john
.Ed
.Pp
Since an SSH-based setup entails a fair amount of overhead,
it may be more suited to temporary setups,
such as for wireless VPNs.
More permanent VPNs are better provided by tools such as
.Xr ipsecctl 8
and
.Xr isakmpd 8 .
.Sh ENVIRONMENT
.Nm
will normally set the following environment variables:
.Bl -tag -width "SSH_ORIGINAL_COMMAND"
.It Ev DISPLAY
The
.Ev DISPLAY
variable indicates the location of the X11 server.
It is automatically set by
.Nm
to point to a value of the form
.Dq hostname:n ,
where
.Dq hostname
indicates the host where the shell runs, and
.Sq n
is an integer \*(Ge 1.
.Nm
uses this special value to forward X11 connections over the secure
channel.
The user should normally not set
.Ev DISPLAY
explicitly, as that
will render the X11 connection insecure (and will require the user to
manually copy any required authorization cookies).
.It Ev HOME
Set to the path of the user's home directory.
.It Ev LOGNAME
Synonym for
.Ev USER ;
set for compatibility with systems that use this variable.
.It Ev MAIL
Set to the path of the user's mailbox.
.It Ev PATH
Set to the default
.Ev PATH ,
as specified when compiling
.Nm .
.It Ev SSH_ASKPASS
If
.Nm
needs a passphrase, it will read the passphrase from the current
terminal if it was run from a terminal.
If
.Nm
does not have a terminal associated with it but
.Ev DISPLAY
and
.Ev SSH_ASKPASS
are set, it will execute the program specified by
.Ev SSH_ASKPASS
and open an X11 window to read the passphrase.
This is particularly useful when calling
.Nm
from a
.Pa .xsession
or related script.
(Note that on some machines it
may be necessary to redirect the input from
.Pa /dev/null
to make this work.)
.It Ev SSH_AUTH_SOCK
Identifies the path of a
.Ux Ns -domain
socket used to communicate with the agent.
.It Ev SSH_CONNECTION
Identifies the client and server ends of the connection.
The variable contains
four space-separated values: client IP address, client port number,
server IP address, and server port number.
.It Ev SSH_ORIGINAL_COMMAND
This variable contains the original command line if a forced command
is executed.
It can be used to extract the original arguments.
.It Ev SSH_TTY
This is set to the name of the tty (path to the device) associated
with the current shell or command.
If the current session has no tty,
this variable is not set.
.It Ev TZ
This variable is set to indicate the present time zone if it
was set when the daemon was started (i.e. the daemon passes the value
on to new connections).
.It Ev USER
Set to the name of the user logging in.
.El
.Pp
Additionally,
.Nm
reads
.Pa ~/.ssh/environment ,
and adds lines of the format
.Dq VARNAME=value
to the environment if the file exists and users are allowed to
change their environment.
For more information, see the
.Cm PermitUserEnvironment
option in
.Xr sshd_config 5 .
.Sh FILES
.Bl -tag -width Ds -compact
.It Pa ~/.rhosts
This file is used for host-based authentication (see above).
On some machines this file may need to be
world-readable if the user's home directory is on an NFS partition,
because
.Xr sshd 8
reads it as root.
Additionally, this file must be owned by the user,
and must not have write permissions for anyone else.
The recommended
permission for most machines is read/write for the user, and not
accessible by others.
.Pp
.It Pa ~/.shosts
This file is used in exactly the same way as
.Pa .rhosts ,
but allows host-based authentication without permitting login with
rlogin/rsh.
.Pp
.It Pa ~/.ssh/
This directory is the default location for all user-specific configuration
and authentication information.
There is no general requirement to keep the entire contents of this directory
secret, but the recommended permissions are read/write/execute for the user,
and not accessible by others.
.Pp
.It Pa ~/.ssh/authorized_keys
Lists the public keys (DSA, ECDSA, Ed25519, RSA)
that can be used for logging in as this user.
The format of this file is described in the
.Xr sshd 8
manual page.
This file is not highly sensitive, but the recommended
permissions are read/write for the user, and not accessible by others.
.Pp
.It Pa ~/.ssh/config
This is the per-user configuration file.
The file format and configuration options are described in
.Xr ssh_config 5 .
Because of the potential for abuse, this file must have strict permissions:
read/write for the user, and not writable by others.
.Pp
.It Pa ~/.ssh/environment
Contains additional definitions for environment variables; see
.Sx ENVIRONMENT ,
above.
.Pp
.It Pa ~/.ssh/id_dsa
.It Pa ~/.ssh/id_ecdsa
.It Pa ~/.ssh/id_ed25519
.It Pa ~/.ssh/id_rsa
Contains the private key for authentication.
These files
contain sensitive data and should be readable by the user but not
accessible by others (read/write/execute).
.Nm
will simply ignore a private key file if it is accessible by others.
It is possible to specify a passphrase when
generating the key which will be used to encrypt the
sensitive part of this file using 3DES.
.Pp
.It Pa ~/.ssh/id_dsa.pub
.It Pa ~/.ssh/id_ecdsa.pub
.It Pa ~/.ssh/id_ed25519.pub
.It Pa ~/.ssh/id_rsa.pub
Contains the public key for authentication.
These files are not
sensitive and can (but need not) be readable by anyone.
.Pp
.It Pa ~/.ssh/known_hosts
Contains a list of host keys for all hosts the user has logged into
that are not already in the systemwide list of known host keys.
See
.Xr sshd 8
for further details of the format of this file.
.Pp
.It Pa ~/.ssh/rc
Commands in this file are executed by
.Nm
when the user logs in, just before the user's shell (or command) is
started.
See the
.Xr sshd 8
manual page for more information.
.Pp
.It Pa /etc/hosts.equiv
This file is for host-based authentication (see above).
It should only be writable by root.
.Pp
.It Pa /etc/shosts.equiv
This file is used in exactly the same way as
.Pa hosts.equiv ,
but allows host-based authentication without permitting login with
rlogin/rsh.
.Pp
.It Pa /etc/ssh/ssh_config
Systemwide configuration file.
The file format and configuration options are described in
.Xr ssh_config 5 .
.Pp
.It Pa /etc/ssh/ssh_host_key
.It Pa /etc/ssh/ssh_host_dsa_key
.It Pa /etc/ssh/ssh_host_ecdsa_key
.It Pa /etc/ssh/ssh_host_ed25519_key
.It Pa /etc/ssh/ssh_host_rsa_key
These files contain the private parts of the host keys
and are used for host-based authentication.
.Pp
.It Pa /etc/ssh/ssh_known_hosts
Systemwide list of known host keys.
This file should be prepared by the
system administrator to contain the public host keys of all machines in the
organization.
It should be world-readable.
See
.Xr sshd 8
for further details of the format of this file.
.Pp
.It Pa /etc/ssh/sshrc
Commands in this file are executed by
.Nm
when the user logs in, just before the user's shell (or command) is started.
See the
.Xr sshd 8
manual page for more information.
.El
.Sh EXIT STATUS
.Nm
exits with the exit status of the remote command or with 255
if an error occurred.
.Sh SEE ALSO
.Xr scp 1 ,
.Xr sftp 1 ,
.Xr ssh-add 1 ,
.Xr ssh-agent 1 ,
.Xr ssh-keygen 1 ,
.Xr ssh-keyscan 1 ,
.Xr tun 4 ,
.Xr ssh_config 5 ,
.Xr ssh-keysign 8 ,
.Xr sshd 8
.Sh STANDARDS
.Rs
.%A S. Lehtinen
.%A C. Lonvick
.%D January 2006
.%R RFC 4250
.%T The Secure Shell (SSH) Protocol Assigned Numbers
.Re
.Pp
.Rs
.%A T. Ylonen
.%A C. Lonvick
.%D January 2006
.%R RFC 4251
.%T The Secure Shell (SSH) Protocol Architecture
.Re
.Pp
.Rs
.%A T. Ylonen
.%A C. Lonvick
.%D January 2006
.%R RFC 4252
.%T The Secure Shell (SSH) Authentication Protocol
.Re
.Pp
.Rs
.%A T. Ylonen
.%A C. Lonvick
.%D January 2006
.%R RFC 4253
.%T The Secure Shell (SSH) Transport Layer Protocol
.Re
.Pp
.Rs
.%A T. Ylonen
.%A C. Lonvick
.%D January 2006
.%R RFC 4254
.%T The Secure Shell (SSH) Connection Protocol
.Re
.Pp
.Rs
.%A J. Schlyter
.%A W. Griffin
.%D January 2006
.%R RFC 4255
.%T Using DNS to Securely Publish Secure Shell (SSH) Key Fingerprints
.Re
.Pp
.Rs
.%A F. Cusack
.%A M. Forssen
.%D January 2006
.%R RFC 4256
.%T Generic Message Exchange Authentication for the Secure Shell Protocol (SSH)
.Re
.Pp
.Rs
.%A J. Galbraith
.%A P. Remaker
.%D January 2006
.%R RFC 4335
.%T The Secure Shell (SSH) Session Channel Break Extension
.Re
.Pp
.Rs
.%A M. Bellare
.%A T. Kohno
.%A C. Namprempre
.%D January 2006
.%R RFC 4344
.%T The Secure Shell (SSH) Transport Layer Encryption Modes
.Re
.Pp
.Rs
.%A B. Harris
.%D January 2006
.%R RFC 4345
.%T Improved Arcfour Modes for the Secure Shell (SSH) Transport Layer Protocol
.Re
.Pp
.Rs
.%A M. Friedl
.%A N. Provos
.%A W. Simpson
.%D March 2006
.%R RFC 4419
.%T Diffie-Hellman Group Exchange for the Secure Shell (SSH) Transport Layer Protocol
.Re
.Pp
.Rs
.%A J. Galbraith
.%A R. Thayer
.%D November 2006
.%R RFC 4716
.%T The Secure Shell (SSH) Public Key File Format
.Re
.Pp
.Rs
.%A D. Stebila
.%A J. Green
.%D December 2009
.%R RFC 5656
.%T Elliptic Curve Algorithm Integration in the Secure Shell Transport Layer
.Re
.Pp
.Rs
.%A A. Perrig
.%A D. Song
.%D 1999
.%O International Workshop on Cryptographic Techniques and E-Commerce (CrypTEC '99)
.%T Hash Visualization: a New Technique to improve Real-World Security
.Re
.Sh AUTHORS
OpenSSH is a derivative of the original and free
ssh 1.2.12 release by Tatu Ylonen.
Aaron Campbell, Bob Beck, Markus Friedl, Niels Provos,
Theo de Raadt and Dug Song
removed many bugs, re-added newer features and
created OpenSSH.
Markus Friedl contributed the support for SSH
protocol versions 1.5 and 2.0.
@


1.383
log
@in description of public key authentication, mention that the server
will send debug messages to the client for some error conditions
after authentication has completed. bz#2709 ok dtucker
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.382 2017/05/30 18:58:37 bluhm Exp $
.Dd $Mdocdate: May 30 2017 $
d595 6
d602 2
a603 2
(server) host are to be forwarded to the given host and port, or Unix socket,
on the local side.
d609 1
a609 1
is made to either
d615 4
a618 1
from the local machine.
@


1.382
log
@Add RemoteCommand option to specify a command in the ssh config
file instead of giving it on the client's command line.  This command
will be executed on the remote host.  The feature allows to automate
tasks using ssh config.
OK markus@@
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.381 2017/05/05 10:41:58 naddy Exp $
.Dd $Mdocdate: May 5 2017 $
d848 11
@


1.381
log
@remove superfluous protocol 2 mentions; ok jmc@@
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.380 2017/05/03 21:49:18 naddy Exp $
.Dd $Mdocdate: May 3 2017 $
d521 1
@


1.380
log
@restore mistakenly deleted description of the ConnectionAttempts option
ok markus@@
@
text
@d36 1
a36 1
.\" $OpenBSD: ssh.1,v 1.379 2017/05/03 06:32:02 jmc Exp $
d274 1
a274 2
.Pa ~/.ssh/id_rsa
for protocol version 2.
@


1.379
log
@more protocol 1 stuff to go; ok djm
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.378 2017/05/02 13:44:51 jmc Exp $
.Dd $Mdocdate: May 2 2017 $
d472 1
@


1.378
log
@remove now obsolete protocol1 options from the -o lists;
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.377 2017/04/30 23:18:22 djm Exp $
.Dd $Mdocdate: April 30 2017 $
a1443 1
.It Pa ~/.ssh/identity
a1457 1
.It Pa ~/.ssh/identity.pub
@


1.377
log
@remove SSHv1 configuration options and man pages bits

ok markus@@
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.376 2016/07/16 06:57:55 jmc Exp $
.Dd $Mdocdate: July 16 2016 $
a468 1
.It Cipher
a471 1
.It ConnectionAttempts
@


1.376
log
@- add proxyjump to the options list
- formatting fixes
- update usage()

ok djm
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.375 2016/07/15 00:24:30 djm Exp $
.Dd $Mdocdate: July 15 2016 $
d46 1
a46 1
.Op Fl 1246AaCfGgKkMNnqsTtVvXxYy
a97 10
.It Fl 1
Forces
.Nm
to try protocol version 1 only.
.Pp
.It Fl 2
Forces
.Nm
to try protocol version 2 only.
.Pp
d137 1
a137 6
.Xr gzip 1 ,
and the
.Dq level
can be controlled by the
.Cm CompressionLevel
option for protocol version 1.
a146 8
.Pp
Protocol version 1 allows specification of a single cipher.
The supported values are
.Dq 3des ,
.Dq blowfish ,
and
.Dq des .
For protocol version 2,
a269 2
.Pa ~/.ssh/identity
for protocol version 1, and
a472 1
.It CompressionLevel
a516 1
.It Protocol
a524 2
.It RhostsRSAAuthentication
.It RSAAuthentication
d780 1
a780 15
The OpenSSH SSH client supports SSH protocols 1 and 2.
The default is to use protocol 2 only,
though this can be changed via the
.Cm Protocol
option in
.Xr ssh_config 5
or the
.Fl 1
and
.Fl 2
options (see above).
Protocol 1 should not be used
and is only offered to support legacy devices.
It suffers from a number of cryptographic weaknesses
and doesn't support many of the advanced features available for protocol 2.
a852 2
.Pa ~/.ssh/identity
(protocol 1),
a862 2
.Pa ~/.ssh/identity.pub
(protocol 1),
@


1.375
log
@Add a ProxyJump ssh_config(5) option and corresponding -J ssh(1)
command-line flag to allow simplified indirection through a
SSH bastion or "jump host".

These options construct a proxy command that connects to the
specified jump host(s) (more than one may be specified) and uses
port-forwarding to establish a connection to the next destination.

This codifies the safest way of indirecting connections through SSH
servers and makes it easy to use.

ok markus@@
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.374 2016/06/29 17:14:28 jmc Exp $
.Dd $Mdocdate: June 29 2016 $
d55 1
a55 1
.Oo Fl J Ar user Ns @@ Oc Ns Ar host Ns Op : Ns Ar port
d318 3
a320 3
.Oo Ar jump_user @@ Oc
.Ar jump_host
.Ns Op : Ns Ar jump_port
d325 3
a327 3
connection to
.Ar jump_host
and then establishing a TCP forward to the ultimate destination from
@


1.374
log
@sort the -o list;
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.373 2016/06/03 06:44:12 jmc Exp $
.Dd $Mdocdate: June 3 2016 $
d55 1
d316 18
d545 1
@


1.373
log
@tweak previous;
@
text
@d36 1
a36 1
.\" $OpenBSD: ssh.1,v 1.372 2016/06/03 04:09:39 dtucker Exp $
d504 1
a506 1
.It IdentitiesOnly
@


1.372
log
@Allow ExitOnForwardFailure and ClearAllForwardings to be overridden when
using ssh -W (but still default to yes in that case).  bz#2577, ok djm@@.
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.371 2016/05/04 12:21:53 markus Exp $
.Dd $Mdocdate: May 4 2016 $
d712 2
a713 2
.Cm ClearAllForwardings
although these can be overridden in the configuration file or
@


1.371
log
@IdentityAgent for specifying specific agent sockets; ok djm@@
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.370 2016/04/15 00:30:19 djm Exp $
.Dd $Mdocdate: April 15 2016 $
d712 4
a715 1
.Cm ClearAllForwardings .
@


1.370
log
@Include directive for ssh_config(5); feedback & ok markus@@
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.369 2016/02/17 07:38:19 jmc Exp $
.Dd $Mdocdate: February 17 2016 $
d504 1
@


1.369
log
@since these pages now clearly tell folks to avoid v1, normalise
the docs from a v2 perspective (i.e. stop pointing out which bits
are v2 only);

ok/tweaks djm ok markus
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.368 2016/02/16 07:47:54 jmc Exp $
.Dd $Mdocdate: February 16 2016 $
d506 1
@


1.368
log
@no need to state that protocol 2 is the default twice;
@
text
@d36 1
a36 1
.\" $OpenBSD: ssh.1,v 1.367 2016/02/16 05:11:04 djm Exp $
d405 2
a406 3
Additionally, for protocol version 2 a comma-separated list of MAC
(message authentication code) algorithms can
be specified in order of preference.
d413 1
a413 2
This is useful for just forwarding ports
(protocol version 2 only).
d665 2
a666 2
Subsystems are a feature of the SSH2 protocol which facilitate the use
of SSH as a secure transport for other applications (eg.\&
a710 1
Works with Protocol version 2 only.
d795 4
a798 2
Protocol 1 should not be used - it suffers from a number of cryptographic
weaknesses and is only offered to support legacy devices.
d807 3
a809 2
though protocol 2 has a configuration option to change the default order:
.Cm PreferredAuthentications .
a852 2
Protocol 1 is restricted to using only RSA keys,
but protocol 2 may use any.
d874 1
a874 1
(protocol 2 DSA),
d876 1
a876 1
(protocol 2 ECDSA),
d878 1
a878 1
(protocol 2 Ed25519),
d881 1
a881 1
(protocol 2 RSA)
d886 1
a886 1
(protocol 2 DSA),
d888 1
a888 1
(protocol 2 ECDSA),
d890 1
a890 1
(protocol 2 Ed25519),
d893 1
a893 1
(protocol 2 RSA)
a930 2
Protocol 2 allows multiple challenges and responses;
protocol 1 is restricted to just one challenge/response.
d1029 1
a1029 1
(only useful for SSH protocol version 2 and if the peer supports it).
d1062 1
a1062 1
(only useful for SSH protocol version 2 and if the peer supports it).
a1529 14
If protocol version 1 is used,
.Nm
must be setuid root, since the host key is readable only by root.
For protocol version 2,
.Nm
uses
.Xr ssh-keysign 8
to access the host keys,
eliminating the requirement that
.Nm
be setuid root when host-based authentication is used.
By default
.Nm
is not setuid root.
@


1.367
log
@Replace list of ciphers and MACs adjacent to -1/-2 flag descriptions in
ssh(1) with a strong recommendation not to use protocol 1. Add a similar
warning to the Protocol option descriptions in ssh_config(5) and
sshd_config(5);

prompted by and ok mmcc@@
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.366 2015/11/15 22:26:49 jcs Exp $
.Dd $Mdocdate: November 15 2015 $
a797 1
Protocol 2 is the default.
@


1.366
log
@Add an AddKeysToAgent client option which can be set to 'yes', 'no',
'ask', or 'confirm', and defaults to 'no'.  When enabled, a private
key that is used during authentication will be added to ssh-agent if
it is running (with confirmation enabled if set to 'confirm').

Initial version from Joachim Schipper many years ago.

ok markus@@
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.365 2015/11/06 00:31:41 mmcc Exp $
.Dd $Mdocdate: November 6 2015 $
d798 3
a800 9
Both protocols support similar authentication methods,
but protocol 2 is the default since
it provides additional mechanisms for confidentiality
(the traffic is encrypted using AES, 3DES, Blowfish, CAST128, or Arcfour)
and integrity (hmac-md5, hmac-sha1,
hmac-sha2-256, hmac-sha2-512,
umac-64, umac-128, hmac-ripemd160).
Protocol 1 lacks a strong mechanism for ensuring the
integrity of the connection.
@


1.365
log
@1. rlogin and rsh are long gone
2. protocol version isn't of core relevance here, and v1 is going away

ok markus@@, deraadt@@
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.364 2015/09/25 18:19:54 jmc Exp $
.Dd $Mdocdate: September 25 2015 $
d465 1
d930 4
@


1.364
log
@some certificatefile tweaks; ok djm
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.363 2015/09/24 06:15:11 djm Exp $
.Dd $Mdocdate: September 24 2015 $
d73 1
a73 2
It is intended to replace rlogin and rsh,
and provide secure encrypted communications between
d87 1
a87 1
depending on the protocol version used (see below).
@


1.363
log
@add ssh_config CertificateFile option to explicitly list
a certificate; patch from Meghana Bhat on bz#2436; ok markus@@
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.362 2015/09/11 03:42:32 djm Exp $
.Dd $Mdocdate: September 11 2015 $
d307 1
a307 1
If no certificates have been explicitly specified by
@


1.362
log
@mention -Q key-plain and -Q key-cert;
bz#2455 pointed out by Jakub Jelen
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.361 2015/07/20 18:44:12 millert Exp $
.Dd $Mdocdate: July 20 2015 $
d307 3
d474 1
@


1.361
log
@Move .Pp before .Bl, not after to quiet mandoc -Tlint.
Noticed by jmc@@
@
text
@d36 1
a36 1
.\" $OpenBSD: ssh.1,v 1.360 2015/07/20 15:39:52 millert Exp $
d61 1
a61 1
.Op Fl Q Cm cipher | cipher-auth | mac | kex | key | protocol-version
d553 1
a553 1
.It Fl Q Cm cipher | cipher-auth | mac | kex | key | protocol-version
d567 5
a571 1
(key types) and
@


1.360
log
@Better desciption of Unix domain socket forwarding.
bz#2423; ok jmc@@
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.359 2015/07/10 06:21:53 markus Exp $
.Dd $Mdocdate: July 10 2015 $
d96 1
a97 1
.Pp
@


1.359
log
@Turn off DSA by default; add HostKeyAlgorithms to the server and
PubkeyAcceptedKeyTypes to the client side, so it still can be
tested or turned back on; feedback and ok djm@@
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.358 2015/05/22 05:28:45 djm Exp $
.Dd $Mdocdate: May 22 2015 $
d55 1
a55 1
.Op Fl L Oo Ar bind_address : Oc Ns Ar port : Ns Ar host : Ns Ar hostport
d62 1
a62 1
.Op Fl R Oo Ar bind_address : Oc Ns Ar port : Ns Ar host : Ns Ar hostport
d96 2
a97 1
.Bl -tag -width Ds
d102 1
d107 1
d112 1
d117 1
d130 1
d133 1
d140 1
d159 1
d178 1
d218 1
d223 1
d236 1
d245 1
d268 1
d277 1
d282 1
d288 1
d312 1
d316 1
d319 1
d326 20
a345 3
Specifies that the given port on the local (client) host is to be
forwarded to the given host and port on the remote side.
This works by allocating a socket to listen to
d348 3
a350 2
.Ar bind_address .
Whenever a connection is made to this port, the
d352 1
a352 1
made to
d355 3
a357 1
.Ar hostport
d359 1
d361 1
d363 1
a363 1
Only the superuser can forward privileged ports.
d378 1
d382 1
d401 1
d409 1
d414 1
d435 1
d454 1
d547 1
d552 1
d570 1
d574 1
d581 20
a600 3
Specifies that the given port on the remote (server) host is to be
forwarded to the given host and port on the local side.
This works by allocating a socket to listen to
d602 4
a605 3
on the remote side, and whenever a connection is made to this port, the
connection is forwarded over the secure channel, and a connection is
made to
d608 3
a610 1
.Ar hostport
d618 1
a618 1
By default, the listening socket on the server will be bound to the loopback
d643 1
d656 1
d663 1
d666 1
d677 1
d680 1
d692 1
d706 1
d736 1
d757 1
d760 1
d765 1
@


1.358
log
@mention ssh-keygen -E for comparing legacy MD5 fingerprints; bz#2332
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.357 2015/05/06 05:45:17 dtucker Exp $
.Dd $Mdocdate: May 6 2015 $
d473 1
@


1.357
log
@Clarify pseudo-terminal request behaviour and use "pseudo-terminal"
consistently.  bz#1716, ok jmc@@ "I like it" deraadt@@.
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.356 2015/03/03 06:48:58 djm Exp $
.Dd $Mdocdate: March 3 2015 $
d1109 5
@


1.356
log
@Allow "ssh -Q protocol-version" to list supported SSH protocol
versions. Useful for detecting builds without SSH v.1 support;
idea and ok markus@@
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.355 2015/01/30 11:43:14 djm Exp $
.Dd $Mdocdate: January 30 2015 $
d587 1
a587 1
Disable pseudo-tty allocation.
d589 1
a589 1
Force pseudo-tty allocation.
d879 3
a881 2
either executes the given command, or logs into the machine and gives
the user a normal shell on the remote machine.
d885 11
a895 1
If a pseudo-terminal has been allocated (normal login session), the
d898 1
a898 1
If no pseudo-tty has been allocated,
@


1.355
log
@Add a ssh_config HostbasedKeyType option to control which
host public key types are tried during hostbased authentication.

This may be used to prevent too many keys being sent to the server,
and blowing past its MaxAuthTries limit.

bz#2211 based on patch by Iain Morgan; ok markus@@
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.354 2015/01/26 12:16:36 djm Exp $
.Dd $Mdocdate: January 26 2015 $
d61 1
a61 1
.Op Fl Q Cm cipher | cipher-auth | mac | kex | key
d500 1
a500 1
.It Fl Q Cm cipher | cipher-auth | mac | kex | key
d514 3
a516 1
(key types).
@


1.354
log
@correct description of UpdateHostKeys in ssh_config.5 and
add it to -o lists for ssh, scp and sftp;
pointed out by jmc@@
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.353 2014/12/22 09:26:31 jmc Exp $
.Dd $Mdocdate: December 22 2014 $
d448 1
@


1.353
log
@add fingerprinthash to the options list;
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.352 2014/12/21 22:27:56 djm Exp $
.Dd $Mdocdate: December 21 2014 $
d487 1
@


1.352
log
@Add FingerprintHash option to control algorithm used for key
fingerprints. Default changes from MD5 to SHA256 and format
from hex to base64.

Feedback and ok naddy@@ markus@@
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.351 2014/10/09 06:21:31 jmc Exp $
.Dd $Mdocdate: October 9 2014 $
d436 1
@


1.351
log
@tweak previous;
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.350 2014/10/08 22:20:25 djm Exp $
.Dd $Mdocdate: October 8 2014 $
d1094 1
a1094 1
just by looking at hex strings,
@


1.350
log
@Tweak config reparsing with host canonicalisation

Make the second pass through the config files always run when
hostname canonicalisation is enabled.

Add a "Match canonical" criteria that allows ssh_config Match
blocks to trigger only in the second config pass.

Add a -G option to ssh that causes it to parse its configuration
and dump the result to stdout, similar to "sshd -T"

Allow ssh_config Port options set in the second config parse
phase to be applied (they were being ignored).

bz#2267 bz#2286; ok markus
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.349 2014/08/30 15:33:50 sobrado Exp $
.Dd $Mdocdate: August 30 2014 $
d46 1
a46 1
.Op Fl 1246AaCfgGKkMNnqsTtVvXxYy
@


1.349
log
@improve capitalization for the Ed25519 public-key signature system.

ok djm@@
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.348 2014/07/24 22:57:10 millert Exp $
.Dd $Mdocdate: July 24 2014 $
d46 1
a46 1
.Op Fl 1246AaCfgKkMNnqsTtVvXxYy
d254 8
@


1.348
log
@Mention UNIX-domain socket forwarding too.  OK jmc@@ deraadt@@
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.347 2014/07/16 14:48:57 jmc Exp $
.Dd $Mdocdate: July 16 2014 $
d751 1
a751 1
using one of the DSA, ECDSA, ED25519 or RSA algorithms.
d779 1
a779 1
(protocol 2 ED25519),
d791 1
a791 1
(protocol 2 ED25519),
d1331 1
a1331 1
Lists the public keys (DSA, ECDSA, ED25519, RSA)
@


1.347
log
@add the streamlocal* options to ssh's -o list; millert says they're
irrelevant for scp/sftp;

ok markus millert
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.346 2014/07/03 05:38:17 djm Exp $
.Dd $Mdocdate: July 3 2014 $
d76 3
a78 2
X11 connections and arbitrary TCP ports
can also be forwarded over the secure channel.
d135 3
a137 1
data for forwarded X11 and TCP connections).
@


1.346
log
@document that -g will only work in the multiplexed case if applied to
the mux master
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.345 2014/04/19 18:42:19 tedu Exp $
.Dd $Mdocdate: April 19 2014 $
d469 2
@


1.345
log
@delete .xr to hosts.equiv. there's still an unfortunate amount of
documentation referring to rhosts equivalency in here.
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.344 2014/03/17 19:44:10 tedu Exp $
.Dd $Mdocdate: March 17 2014 $
d253 2
@


1.344
log
@old descriptions of des and blowfish are old. maybe ok deraadt
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.343 2013/12/07 11:58:46 naddy Exp $
.Dd $Mdocdate: December 7 2013 $
a1450 1
.Xr hosts.equiv 5 ,
@


1.343
log
@add missing mentions of ed25519; ok djm@@
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.342 2013/11/26 12:14:54 jmc Exp $
.Dd $Mdocdate: November 26 2013 $
a156 17
.Ar 3des
(triple-des) is an encrypt-decrypt-encrypt triple with three different keys.
It is believed to be secure.
.Ar blowfish
is a fast block cipher; it appears very secure and is much faster than
.Ar 3des .
.Ar des
is only supported in the
.Nm
client for interoperability with legacy protocol 1 implementations
that do not support the
.Ar 3des
cipher.
Its use is strongly discouraged due to cryptographic weaknesses.
The default is
.Dq 3des .
.Pp
@


1.342
log
@- put -Q in the right place
- Ar was a poor choice for the arguments to -Q. i've chosen an admittedly equally
poor Cm, at least consistent with the rest of the docs. also no need for multiple
instances
- zap a now redundant Nm
- usage() sync
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.341 2013/11/25 18:04:21 deraadt Exp $
.Dd $Mdocdate: November 25 2013 $
d282 2
a283 1
.Pa ~/.ssh/id_ecdsa
d761 1
a761 1
using one of the DSA, ECDSA or RSA algorithms.
d788 2
d800 2
d1341 2
a1342 2
Lists the public keys (DSA/ECDSA/RSA) that can be used for logging in as
this user.
d1364 1
d1379 1
d1419 1
@


1.341
log
@improve -Q usage and such.  One usage change is that the option is now
case-sensitive
ok dtucker markus djm
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.340 2013/11/21 00:45:44 djm Exp $
.Dd $Mdocdate: November 21 2013 $
d61 1
a63 1
.Op Fl Q Ar cipher | Ar cipher-auth | Ar mac | Ar kex | Ar key
a68 1
.Nm
d498 1
a498 1
.It Fl Q Ar cipher | Ar cipher-auth | Ar mac | Ar kex | Ar key
@


1.340
log
@Add a new protocol 2 transport cipher "chacha20-poly1305@@openssh.com"
that combines Daniel Bernstein's ChaCha20 stream cipher and Poly1305 MAC
to build an authenticated encryption mode.

Inspired by and similar to Adam Langley's proposal for TLS:
http://tools.ietf.org/html/draft-agl-tls-chacha20poly1305-03
but differs in layout used for the MAC calculation and the use of a
second ChaCha20 instance to separately encrypt packet lengths.
Details are in the PROTOCOL.chacha20poly1305 file.

Feedback markus@@, naddy@@; manpage bits Loganden Velvindron @@ AfriNIC
ok markus@@ naddy@@
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.339 2013/10/16 22:49:38 djm Exp $
.Dd $Mdocdate: October 16 2013 $
d63 1
a69 1
.Fl Q Ar protocol_feature
d499 1
a499 1
.It Fl Q Ar protocol_feature
d502 3
a504 4
for the algorithms supported for the specified version 2
.Ar protocol_feature .
The queriable features are:
.Dq cipher
d506 1
a506 1
.Dq cipher-auth
d508 1
a508 1
.Dq MAC
d510 1
a510 1
.Dq KEX
d512 1
a512 1
.Dq key
a513 1
Protocol features are treated case-insensitively.
@


1.339
log
@s/canonicalise/canonicalize/ for consistency with existing spelling,
e.g. authorized_keys; pointed out by naddy@@
@
text
@d36 1
a36 1
.\" $OpenBSD: ssh.1,v 1.338 2013/10/16 02:31:46 djm Exp $
d507 2
@


1.338
log
@Implement client-side hostname canonicalisation to allow an explicit
search path of domain suffixes to use to convert unqualified host names
to fully-qualified ones for host key matching.
This is particularly useful for host certificates, which would otherwise
need to list unqualified names alongside fully-qualified ones (and this
causes a number of problems).

"looks fine" markus@@
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.337 2013/10/15 14:10:25 jmc Exp $
.Dd $Mdocdate: October 15 2013 $
d421 4
a424 4
.It CanonicaliseFallbackLocal
.It CanonicaliseHostname
.It CanonicaliseMaxDots
.It CanonicalisePermittedCNAMEs
@


1.337
log
@tweak previous;
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.336 2013/08/20 06:56:07 jmc Exp $
.Dd $Mdocdate: August 20 2013 $
d420 5
@


1.336
log
@some proxyusefdpass tweaks;
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.335 2013/08/14 08:39:27 jmc Exp $
.Dd $Mdocdate: August 14 2013 $
d459 1
@


1.335
log
@some Bx/Ox conversion;
From: Jan Stary
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.334 2013/07/18 01:12:26 djm Exp $
.Dd $Mdocdate: July 18 2013 $
d468 1
@


1.334
log
@be more exact wrt perms for ~/.ssh/config; bz#2078
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.333 2013/06/27 14:05:37 jmc Exp $
.Dd $Mdocdate: June 27 2013 $
d830 2
a831 1
BSD Authentication (see
d833 3
a835 1
and PAM (some non-OpenBSD systems).
@


1.333
log
@do not use Sx for sections outwith the man page - ingo informs me that
stuff like html will render with broken links;

issue reported by Eric S. Raymond, via djm
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.332 2013/04/19 01:06:50 djm Exp $
.Dd $Mdocdate: April 19 2013 $
d1340 1
a1340 1
read/write for the user, and not accessible by others.
@


1.332
log
@add the ability to query supported ciphers, MACs, key type and KEX
algorithms to ssh. Includes some refactoring of KEX and key type handling
to be table-driven; ok markus@@
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.331 2013/04/07 02:10:33 dtucker Exp $
.Dd $Mdocdate: April 7 2013 $
d757 1
a757 3
The
.Sx HISTORY
section of
d813 1
a813 3
See the
.Sx CERTIFICATES
section of
@


1.331
log
@Add -E option to ssh and sshd to append debugging logs to a specified file
instead of stderr or syslog.  ok markus@@, man page help jmc@@
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.330 2012/10/04 13:21:50 markus Exp $
.Dd $Mdocdate: October 4 2012 $
d68 2
d492 15
@


1.330
log
@add umac128 variant; ok djm@@ at n2k12
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.329 2012/09/26 16:12:13 jmc Exp $
.Dd $Mdocdate: September 26 2012 $
d50 1
d221 4
@


1.329
log
@last stage of rfc changes, using consistent Rs/Re blocks, and moving the
references into a STANDARDS section;
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.328 2012/09/06 13:57:42 jmc Exp $
.Dd $Mdocdate: September 6 2012 $
d677 1
a677 1
umac-64, hmac-ripemd160).
@


1.328
log
@missing letter in previous;
@
text
@d36 1
a36 1
.\" $OpenBSD: ssh.1,v 1.327 2012/09/06 04:37:39 dtucker Exp $
d1437 1
d1439 3
d1443 1
a1443 2
.%T "The Secure Shell (SSH) Protocol Assigned Numbers"
.%D 2006
d1445 1
d1447 3
d1451 1
a1451 2
.%T "The Secure Shell (SSH) Protocol Architecture"
.%D 2006
d1453 1
d1455 3
d1459 1
a1459 2
.%T "The Secure Shell (SSH) Authentication Protocol"
.%D 2006
d1461 1
d1463 3
d1467 1
a1467 2
.%T "The Secure Shell (SSH) Transport Layer Protocol"
.%D 2006
d1469 1
d1471 3
d1475 1
a1475 2
.%T "The Secure Shell (SSH) Connection Protocol"
.%D 2006
d1477 1
d1479 3
d1483 1
a1483 2
.%T "Using DNS to Securely Publish Secure Shell (SSH) Key Fingerprints"
.%D 2006
d1485 1
d1487 3
d1491 1
a1491 2
.%T "Generic Message Exchange Authentication for the Secure Shell Protocol (SSH)"
.%D 2006
d1493 1
d1495 3
d1499 1
a1499 2
.%T "The Secure Shell (SSH) Session Channel Break Extension"
.%D 2006
d1501 1
d1503 4
d1508 1
a1508 2
.%T "The Secure Shell (SSH) Transport Layer Encryption Modes"
.%D 2006
d1510 1
d1512 2
d1515 1
a1515 2
.%T "Improved Arcfour Modes for the Secure Shell (SSH) Transport Layer Protocol"
.%D 2006
d1517 1
d1519 4
d1524 1
a1524 2
.%T "Diffie-Hellman Group Exchange for the Secure Shell (SSH) Transport Layer Protocol"
.%D 2006
d1526 1
d1528 3
d1532 1
a1532 2
.%T "The Secure Shell (SSH) Public Key File Format"
.%D 2006
d1534 1
d1536 3
d1540 1
a1540 2
.%T "Elliptic Curve Algorithm Integration in the Secure Shell Transport Layer"
.%D 2009
d1542 1
a1543 1
.%T "Hash Visualization: a New Technique to improve Real-World Security"
d1547 2
a1548 1
.%O "International Workshop on Cryptographic Techniques and E-Commerce (CrypTEC '99)"
@


1.327
log
@Add ~v and ~V escape sequences to raise and lower the logging level
respectively. Man page help from jmc, ok deraadt jmc
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.326 2012/06/18 12:17:18 dtucker Exp $
.Dd $Mdocdate: June 18 2012 $
d934 1
a934 1
Increase the verbosit
@


1.326
log
@Clarify description of -W.  Noted by Steve.McClellan at radisys com, ok jmc
@
text
@d36 1
a36 1
.\" $OpenBSD: ssh.1,v 1.325 2012/06/18 12:07:07 dtucker Exp $
d929 8
@


1.325
log
@Remove mention of 'three' key files since there are now four.  From
Steve.McClellan at radisys com.
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.324 2012/04/20 16:26:22 jmc Exp $
.Dd $Mdocdate: April 20 2012 $
d590 2
a591 2
.Cm ClearAllForwardings
and works with Protocol version 2 only.
@


1.324
log
@use "brackets" instead of "braces", for consistency;
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.323 2011/09/11 06:59:05 okan Exp $
.Dd $Mdocdate: September 11 2011 $
d1378 1
a1378 1
These three files contain the private parts of the host keys
@


1.323
log
@document new -O cancel command; ok djm@@
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.322 2011/09/10 22:26:34 markus Exp $
.Dd $Mdocdate: September 10 2011 $
d509 1
a509 1
IPv6 addresses can be specified by enclosing the address in square braces.
@


1.322
log
@support cancellation of local/dynamic forwardings from ~C commandline;
ok & feedback djm@@
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.321 2011/08/26 01:45:15 djm Exp $
.Dd $Mdocdate: August 26 2011 $
d396 2
@


1.321
log
@Add some missing ssh_config(5) options that can be used in ssh(1)'s
-o argument. Patch from duclare AT guu.fi
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.320 2011/08/02 01:22:11 djm Exp $
.Dd $Mdocdate: August 2 2011 $
d902 2
a903 2
It also allows the cancellation of existing remote port-forwardings
using
d905 1
a905 1
.Fl KR Oo Ar bind_address : Oc Ar port .
d907 9
@


1.320
log
@Add new SHA256 and SHA512 based HMAC modes from
http://www.ietf.org/id/draft-dbider-sha2-mac-for-ssh-02.txt

feedback and ok markus@@
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.319 2011/05/07 23:20:25 jmc Exp $
.Dd $Mdocdate: May 7 2011 $
d422 1
d428 1
d443 1
@


1.319
log
@+.It RequestTTY
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.318 2011/04/18 00:21:11 jmc Exp $
.Dd $Mdocdate: April 18 2011 $
d670 3
a672 1
and integrity (hmac-md5, hmac-sha1, umac-64, hmac-ripemd160).
@


1.318
log
@tweak previous;
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.317 2011/04/17 22:42:41 djm Exp $
.Dd $Mdocdate: April 17 2011 $
d459 1
@


1.317
log
@allow graceful shutdown of multiplexing: request that a mux server removes
its listener socket and refuse future multiplexing requests; ok markus@@
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.316 2010/11/18 15:01:00 jmc Exp $
.Dd $Mdocdate: November 18 2010 $
d395 1
a395 1
(request forwardings without command execution) and
d397 1
a397 1
(request the master to exit).
@


1.316
log
@add IPQoS to the various -o lists, and zap some trailing whitespace;
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.315 2010/10/28 18:33:28 jmc Exp $
.Dd $Mdocdate: October 28 2010 $
d398 2
@


1.315
log
@knock out some "-*- nroff -*-" lines;
@
text
@d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.314 2010/09/22 08:30:08 jmc Exp $
.Dd $Mdocdate: September 22 2010 $
d438 1
@


1.314
log
@ssh.1: add kexalgorithms to the -o list
ssh_config.5: format the kexalgorithms in a more consistent (prettier!) way

ok djm
@
text
@a0 1
.\"  -*- nroff -*-
d36 2
a37 2
.\" $OpenBSD: ssh.1,v 1.313 2010/09/11 21:44:20 djm Exp $
.Dd $Mdocdate: September 11 2010 $
@


1.313
log
@mention RFC 5656 for ECC stuff
@
text
@d37 2
a38 2
.\" $OpenBSD: ssh.1,v 1.312 2010/09/04 09:38:34 jmc Exp $
.Dd $Mdocdate: September 4 2010 $
d440 1
@


1.312
log
@two more EXIT STATUS sections;
@
text
@d37 2
a38 2
.\" $OpenBSD: ssh.1,v 1.311 2010/08/31 21:14:58 jmc Exp $
.Dd $Mdocdate: August 31 2010 $
d1468 5
@


1.311
log
@small text tweak to accommodate previous;
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.310 2010/08/31 11:54:45 djm Exp $
a649 4
.Pp
.Nm
exits with the exit status of the remote command or with 255
if an error occurred.
d1393 4
@


1.310
log
@Implement Elliptic Curve Cryptography modes for key exchange (ECDH) and
host/user keys (ECDSA) as specified by RFC5656. ECDH and ECDSA offer
better performance than plain DH and DSA at the same equivalent symmetric
key length, as well as much shorter keys.

Only the mandatory sections of RFC5656 are implemented, specifically the
three REQUIRED curves nistp256, nistp384 and nistp521 and only ECDH and
ECDSA. Point compression (optional in RFC5656 is NOT implemented).

Certificate host and user keys using the new ECDSA key types are supported.

Note that this code has not been tested for interoperability and may be
subject to change.

feedback and ok markus@@
@
text
@d37 2
a38 2
.\" $OpenBSD: ssh.1,v 1.309 2010/08/08 19:36:30 jmc Exp $
.Dd $Mdocdate: August 8 2010 $
d732 1
a732 1
contains a brief discussion of the two algorithms.
@


1.309
log
@use the same template for all FILES sections; i.e. -compact/.Pp where we
have multiple items, and .Pa for path names;
@
text
@d37 2
a38 2
.\" $OpenBSD: ssh.1,v 1.308 2010/08/04 05:37:01 djm Exp $
.Dd $Mdocdate: August 4 2010 $
d272 1
a272 1
RSA or DSA authentication is read.
d276 3
a279 2
and
.Pa ~/.ssh/id_dsa
d725 1
a725 1
using either the RSA or DSA algorithms.
d727 1
a727 1
but protocol 2 may use either.
d752 2
d762 2
d1285 2
a1286 1
Lists the public keys (RSA/DSA) that can be used for logging in as this user.
d1307 1
d1321 1
d1360 1
@


1.308
log
@Remove mentions of weird "addr/port" alternate address format for IPv6
addresses combinations. It hasn't worked for ages and we have supported
the more commen "[addr]:port" format for a long time. ok jmc@@ markus@@
@
text
@d37 2
a38 2
.\" $OpenBSD: ssh.1,v 1.307 2010/07/23 08:49:25 dtucker Exp $
.Dd $Mdocdate: July 23 2010 $
d1253 1
a1253 1
.It ~/.rhosts
d1266 1
a1266 1
.It ~/.shosts
d1272 1
a1272 1
.It ~/.ssh/
d1279 1
a1279 1
.It ~/.ssh/authorized_keys
d1287 1
a1287 1
.It ~/.ssh/config
d1294 1
a1294 1
.It ~/.ssh/environment
d1299 3
a1301 3
.It ~/.ssh/identity
.It ~/.ssh/id_dsa
.It ~/.ssh/id_rsa
d1312 3
a1314 3
.It ~/.ssh/identity.pub
.It ~/.ssh/id_dsa.pub
.It ~/.ssh/id_rsa.pub
d1319 1
a1319 1
.It ~/.ssh/known_hosts
d1326 1
a1326 1
.It ~/.ssh/rc
d1335 1
a1335 1
.It /etc/hosts.equiv
d1339 1
a1339 1
.It /etc/shosts.equiv
d1350 3
a1352 3
.It /etc/ssh/ssh_host_key
.It /etc/ssh/ssh_host_dsa_key
.It /etc/ssh/ssh_host_rsa_key
d1370 1
a1370 1
.It /etc/ssh/ssh_known_hosts
d1380 1
a1380 1
.It /etc/ssh/sshrc
@


1.307
log
@Ciphers is documented in ssh_config(5) these days
@
text
@d37 2
a38 2
.\" $OpenBSD: ssh.1,v 1.306 2010/07/14 17:06:58 jmc Exp $
.Dd $Mdocdate: July 14 2010 $
d205 1
a205 8
IPv6 addresses can be specified with an alternative syntax:
.Sm off
.Xo
.Op Ar bind_address No /
.Ar port
.Xc
.Sm on
or by enclosing the address in square brackets.
d316 1
a316 9
IPv6 addresses can be specified with an alternative syntax:
.Sm off
.Xo
.Op Ar bind_address No /
.Ar port No / Ar host No /
.Ar hostport
.Xc
.Sm on
or by enclosing the address in square brackets.
d499 1
a499 9
IPv6 addresses can be specified by enclosing the address in square braces or
using an alternative syntax:
.Sm off
.Xo
.Op Ar bind_address No /
.Ar host No / Ar port No /
.Ar hostport
.Xc .
.Sm on
@


1.306
log
@finally ssh synopsis looks nice again! this commit just removes a ton of
hacks we had in place to make it work with old groff;
@
text
@d37 2
a38 2
.\" $OpenBSD: ssh.1,v 1.305 2010/05/16 12:55:51 markus Exp $
.Dd $Mdocdate: May 16 2010 $
d179 3
a181 1
keyword for more information.
@


1.305
log
@mux support for remote forwarding with dynamic port allocation,
use with
	LPORT=`ssh -S muxsocket -R0:localhost:25 -O forward somehost`
feedback and ok djm@@
@
text
@d37 2
a38 2
.\" $OpenBSD: ssh.1,v 1.304 2010/03/26 06:54:36 jmc Exp $
.Dd $Mdocdate: March 26 2010 $
d46 1
d50 1
a50 6
.Oo Fl D\ \&
.Sm off
.Oo Ar bind_address : Oc
.Ar port
.Sm on
.Oc
a53 1
.Bk -words
d55 1
a55 8
.Ek
.Oo Fl L\ \&
.Sm off
.Oo Ar bind_address : Oc
.Ar port : host : hostport
.Sm on
.Oc
.Bk -words
a56 1
.Ek
d61 1
a61 6
.Oo Fl R\ \&
.Sm off
.Oo Ar bind_address : Oc
.Ar port : host : hostport
.Sm on
.Oc
d64 1
a64 2
.Oo Fl w Ar local_tun Ns
.Op : Ns Ar remote_tun Oc
d67 1
@


1.304
log
@tweak previous;
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.303 2010/03/26 00:26:58 djm Exp $
d424 3
a426 1
(check that the master process is running) and
d562 3
@


1.303
log
@mention that -S none disables connection sharing; from Colin Watson
@
text
@d37 2
a38 2
.\" $OpenBSD: ssh.1,v 1.302 2010/03/05 10:28:21 djm Exp $
.Dd $Mdocdate: March 5 2010 $
d561 1
a561 1
Specifies the location of a control socket for connection sharing
@


1.302
log
@mention loading of certificate files from [private]-cert.pub when
they are present; feedback and ok jmc@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.301 2010/03/05 08:31:20 jmc Exp $
d561 4
a564 1
Specifies the location of a control socket for connection sharing.
@


1.301
log
@document certificate authentication; help/ok djm
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.300 2010/03/05 06:50:34 jmc Exp $
d309 5
@


1.300
log
@tweak previous;
@
text
@d37 2
a38 2
.\" $OpenBSD: ssh.1,v 1.299 2010/03/04 23:19:29 djm Exp $
.Dd $Mdocdate: March 4 2010 $
d801 14
a814 2
The most convenient way to use public key authentication may be with an
authentication agent.
@


1.299
log
@move section on CA and revoked keys from ssh.1 to sshd.8's known hosts
format section and rework it a bit; requested by jmc@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.298 2010/03/04 12:51:25 jmc Exp $
a1105 1
.Pp
@


1.298
log
@tweak previous;
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.297 2010/03/04 10:36:03 djm Exp $
a1106 33
Host keys may also be presented as certificates signed by a trusted
certification authority (CA).
In this case, trust of the CA key alone is sufficient for the host key
to be accepted.
To specify a public key as a trusted CA key in a known hosts file,
it should be added after a
.Dq @@cert-authority
tag and a set of one or more domain-name wildcards separated by commas.
For example:
.Pp
.Dl @@cert-authority *.mydomain.org,*.mydomain.com ssh-rsa AAAAB5W...
.Pp
See the
.Sx CERTIFICATES
section of
.Xr ssh-keygen 1
for more details.
.Pp
Keys may also be marked as revoked using the
.Dq @@revoked
marker.
Revoked keys will always trigger a warning when encountered and the host
that presented them will be treated as untrusted.
For example:
.Pp
.Dl @@revoked * ssh-rsa AAAAB5W...
.Pp
Revoking a key revokes it for direct use and as a certification authority.
Do not use both the
.Dq @@cert-authority
and
.Dq @@revoked
markers on the same line.
@


1.297
log
@Add a TrustedUserCAKeys option to sshd_config to specify CA keys that
are trusted to authenticate users (in addition than doing it per-user
in authorized_keys).

Add a RevokedKeys option to sshd_config and a @@revoked marker to
known_hosts to allow keys to me revoked and banned for user or host
authentication.

feedback and ok markus@@
@
text
@d37 2
a38 2
.\" $OpenBSD: ssh.1,v 1.296 2010/02/26 22:09:28 jmc Exp $
.Dd $Mdocdate: February 26 2010 $
d1125 1
a1125 1
Keys may be also be marked as revoked using the
d1136 2
a1137 1
.Dq @@cert-authority and
a1139 1
.Pp
@


1.296
log
@tweak previous;
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.295 2010/02/26 20:29:54 djm Exp $
d1124 16
@


1.295
log
@Add support for certificate key types for users and hosts.

OpenSSH certificate key types are not X.509 certificates, but a much
simpler format that encodes a public key, identity information and
some validity constraints and signs it with a CA key. CA keys are
regular SSH keys. This certificate style avoids the attack surface
of X.509 certificates and is very easy to deploy.

Certified host keys allow automatic acceptance of new host keys
when a CA certificate is marked as trusted in ~/.ssh/known_hosts.
see VERIFYING HOST KEYS in ssh(1) for details.

Certified user keys allow authentication of users when the signing
CA key is marked as trusted in authorized_keys. See "AUTHORIZED_KEYS
FILE FORMAT" in sshd(8) for details.

Certificates are minted using ssh-keygen(1), documentation is in
the "CERTIFICATES" section of that manpage.

Documentation on the format of certificates is in the file
PROTOCOL.certkeys

feedback and ok markus@@
@
text
@d37 2
a38 2
.\" $OpenBSD: ssh.1,v 1.294 2010/02/11 13:23:29 jmc Exp $
.Dd $Mdocdate: February 11 2010 $
a1123 1
.Pp
@


1.294
log
@libarary -> library;
@
text
@d37 2
a38 2
.\" $OpenBSD: ssh.1,v 1.293 2010/02/10 23:20:38 markus Exp $
.Dd $Mdocdate: February 10 2010 $
d1106 19
@


1.293
log
@pkcs#11 is no longer optional; improve wording; ok jmc@@
@
text
@d37 2
a38 2
.\" $OpenBSD: ssh.1,v 1.292 2010/02/08 22:03:05 jmc Exp $
.Dd $Mdocdate: February 8 2010 $
d289 1
a289 1
Specify the PKCS#11 shared libarary
@


1.292
log
@tweak previous; ok markus
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.291 2010/02/08 10:50:20 markus Exp $
d291 1
a291 1
should use to communicate with a PKCS#11 token used for storing the user's
a292 2
This option is only available if support for PKCS#11
is compiled in (default is no support).
@


1.291
log
@replace our obsolete smartcard code with PKCS#11.
	ftp://ftp.rsasecurity.com/pub/pkcs/pkcs-11/v2-20/pkcs-11v2-20.pdf
ssh(1) and ssh-keygen(1) use dlopen(3) directly to talk to a PKCS#11
provider (shared library) while ssh-agent(1) delegates PKCS#11 to
a forked a ssh-pkcs11-helper process.
PKCS#11 is currently a compile time option.
feedback and ok djm@@; inspired by patches from Alon Bar-Lev
@
text
@d37 2
a38 2
.\" $OpenBSD: ssh.1,v 1.290 2010/01/11 01:39:46 dtucker Exp $
.Dd $Mdocdate: January 11 2010 $
d57 1
@


1.290
log
@Add a 'netcat mode' (ssh -W).  This connects stdio on the client to a single
port forward on the server.  This allows, for example, using ssh as
a ProxyCommand to route connections via intermediate servers.
bz #1618, man page help from jmc@@, ok markus@@
@
text
@d37 2
a38 2
.\" $OpenBSD: ssh.1,v 1.289 2010/01/09 23:04:13 dtucker Exp $
.Dd $Mdocdate: January 9 2010 $
d287 2
a288 2
.It Fl I Ar smartcard_device
Specify the device
d290 1
a290 1
should use to communicate with a smartcard used for storing the user's
d292 1
a292 1
This option is only available if support for smartcard devices
d472 1
a484 1
.It SmartcardDevice
@


1.289
log
@Remove RoutingDomain from ssh since it's now not needed.  It can be replaced
with "route exec" or "nc -V" as a proxycommand.  "route exec" also ensures
that trafic such as DNS lookups stays withing the specified routingdomain.

For example (from reyk):
# route -T 2 exec /usr/sbin/sshd
or inherited from the parent process
$ route -T 2 exec sh
$ ssh 10.1.2.3

ok deraadt@@ markus@@ stevesk@@ reyk@@
@
text
@d37 2
a38 2
.\" $OpenBSD: ssh.1,v 1.286 2009/10/22 15:02:12 sobrado Exp $
.Dd $Mdocdate: October 22 2009 $
d80 1
a80 1
.Bk -words
a84 1
.Ek
d596 13
@


1.288
log
@Rename RDomain config option to RoutingDomain to be more clear and
consistent with other options.

NOTE: if you currently use RDomain in the ssh client or server config,
or ssh/sshd -o, you must update to use RoutingDomain.

ok markus@@ djm@@
@
text
@d37 2
a38 2
.\" $OpenBSD: ssh.1,v 1.287 2009/10/28 16:38:18 reyk Exp $
.Dd $Mdocdate: October 28 2009 $
a480 1
.It RoutingDomain
@


1.287
log
@Allow to set the rdomain in ssh/sftp/scp/sshd and ssh-keyscan.

ok markus@@
@
text
@d37 2
a38 2
.\" $OpenBSD: ssh.1,v 1.286 2009/10/22 15:02:12 sobrado Exp $
.Dd $Mdocdate: October 22 2009 $
a477 1
.It RDomain
d481 1
@


1.286
log
@write UNIX-domain in a more consistent way; while here, replace a
few remaining ".Tn UNIX" macros with ".Ux" ones.

pointed out by ratchov@@, thanks!

ok jmc@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.285 2009/10/22 12:35:53 sobrado Exp $
d478 1
@


1.285
log
@use the UNIX-related macros (.At and .Ux) where appropriate.

ok jmc@@
@
text
@d37 2
a38 2
.\" $OpenBSD: ssh.1,v 1.284 2009/10/08 20:42:12 jmc Exp $
.Dd $Mdocdate: October 8 2009 $
d136 2
a137 2
.Ux
domain socket) can access the local agent through the forwarded connection.
@


1.284
log
@some tweaks now that protocol 1 is not offered by default; ok markus
@
text
@d37 2
a38 2
.\" $OpenBSD: ssh.1,v 1.283 2009/03/19 15:15:09 jmc Exp $
.Dd $Mdocdate: March 19 2009 $
d135 3
a137 2
(for the agent's Unix-domain socket)
can access the local agent through the forwarded connection.
@


1.283
log
@for "Ciphers", just point the reader to the keyword in ssh_config(5), just
as we do for "MACs": this stops us getting out of sync when the lists
change;

fixes documentation/6102, submitted by Peter J. Philipp
alternative fix proposed by djm
ok markus
@
text
@d37 2
a38 2
.\" $OpenBSD: ssh.1,v 1.282 2009/02/12 03:44:25 djm Exp $
.Dd $Mdocdate: February 12 2009 $
d669 2
a670 4
Protocol 2 is the default, with
.Nm
falling back to protocol 1 if it detects protocol 2 is unsupported.
These settings may be altered using the
d673 2
a674 2
.Xr ssh_config 5 ,
or enforced using the
d680 1
a680 1
but protocol 2 is preferred since
@


1.282
log
@consistency: Dq => Ql
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.281 2009/02/12 03:42:09 djm Exp $
d194 3
a196 20
The supported ciphers are:
3des-cbc,
aes128-cbc,
aes192-cbc,
aes256-cbc,
aes128-ctr,
aes192-ctr,
aes256-ctr,
arcfour128,
arcfour256,
arcfour,
blowfish-cbc,
and
cast128-cbc.
The default is:
.Bd -literal -offset indent
aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,arcfour128,
arcfour256,arcfour,aes192-cbc,aes256-cbc,aes128-ctr,
aes192-ctr,aes256-ctr
.Ed
@


1.281
log
@document -R0:... usage
@
text
@d37 2
a38 2
.\" $OpenBSD: ssh.1,v 1.280 2008/11/09 12:34:47 tobias Exp $
.Dd $Mdocdate: November 9 2008 $
d570 1
a570 1
.Dq 0 ,
@


1.280
log
@typo fixed (overriden -> overridden)

ok espie, jmc
@
text
@d37 2
a38 2
.\" $OpenBSD: ssh.1,v 1.279 2008/11/05 03:23:09 stevesk Exp $
.Dd $Mdocdate: November 5 2008 $
d566 7
@


1.279
log
@add dynamic forward escape command line; ok djm@@
@
text
@d37 2
a38 2
.\" $OpenBSD: ssh.1,v 1.278 2008/10/08 23:34:03 djm Exp $
.Dd $Mdocdate: October 8 2008 $
d553 1
a553 1
This may be overriden by specifying a
@


1.278
log
@Add -y option to force logging via syslog rather than stderr.
Useful for daemonised ssh connection (ssh -f). Patch originally from
and ok'd by markus@@
@
text
@d37 2
a38 2
.\" $OpenBSD: ssh.1,v 1.277 2008/07/02 13:47:39 djm Exp $
.Dd $Mdocdate: July 2 2008 $
d901 2
a902 1
.Fl L
d904 1
a904 1
.Fl R
@


1.277
log
@When forking after authentication ("ssh -f") with ExitOnForwardFailure
enabled, delay the fork until after replies for any -R forwards have
been seen. Allows for robust detection of -R forward failure when
using -f (similar to bz#92); ok dtucker@@
@
text
@d37 2
a38 2
.\" $OpenBSD: ssh.1,v 1.276 2008/06/26 21:11:46 jmc Exp $
.Dd $Mdocdate: June 26 2008 $
d46 1
a46 1
.Op Fl 1246AaCfgKkMNnqsTtVvXxY
d661 5
@


1.276
log
@add VisualHostKey to the list of options listed in -o;
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.275 2008/06/26 11:46:31 grunk Exp $
d293 9
@


1.275
log
@Move SSH Fingerprint Visualization away from sharing the config option
CheckHostIP to an own config option named VisualHostKey.
While there, fix the behaviour that ssh would draw a random art picture
on every newly seen host even when the option was not enabled.

prodded by deraadt@@, discussions,
help and ok markus@@ djm@@ dtucker@@
@
text
@d37 2
a38 2
.\" $OpenBSD: ssh.1,v 1.274 2008/06/13 20:13:26 grunk Exp $
.Dd $Mdocdate: June 13 2008 $
d501 1
@


1.274
log
@Explain the use of SSH fpr visualization using random art, and cite the
original scientific paper inspiring that technique.
Much help with English and nroff by jmc@@, thanks.
@
text
@d37 2
a38 2
.\" $OpenBSD: ssh.1,v 1.273 2008/02/11 07:58:28 jmc Exp $
.Dd $Mdocdate: February 11 2008 $
d1038 1
a1038 1
.Cm CheckHostIP
d1040 1
a1040 1
.Dq fingerprint ,
@


1.273
log
@bump Mdocdate for pages committed in "febuary", necessary because
of a typo in rcs.c;
@
text
@d37 2
a38 2
.\" $OpenBSD: ssh.1,v 1.272 2008/02/09 12:15:43 mcbride Exp $
.Dd $Mdocdate$
d1030 25
a1054 3
If the fingerprint is already known,
it can be matched and verified,
and the key can be accepted.
d1457 7
@


1.272
log
@Document the correct permissions for the ~/.ssh/ directory.

ok jmc
@
text
@d37 2
a38 2
.\" $OpenBSD: ssh.1,v 1.271 2008/01/19 19:13:28 djm Exp $
.Dd $Mdocdate: January 19 2008 $
@


1.271
log
@satisfy the pedants: -q does not suppress all diagnostic messages (e.g.
some commandline parsing warnings go unconditionally to stdout).
@
text
@d37 2
a38 2
.\" $OpenBSD: ssh.1,v 1.270 2007/06/12 13:43:55 jmc Exp $
.Dd $Mdocdate: June 12 2007 $
d1247 7
@


1.270
log
@add -K to SYNOPSIS;
@
text
@d37 2
a38 2
.\" $OpenBSD: ssh.1,v 1.269 2007/06/12 11:15:17 djm Exp $
.Dd $Mdocdate: June 7 2007 $
d509 1
a509 1
Causes all warning and diagnostic messages to be suppressed.
@


1.269
log
@Add "-K" flag for ssh to set GSSAPIAuthentication=yes and
GSSAPIDelegateCredentials=yes. This is symmetric with -k (disable GSSAPI)
and is useful for hosts with /home on Kerberised NFS; bz #1312
patch from Markus.Kuhn AT cl.cam.ac.uk; ok dtucker@@ markus@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.268 2007/06/07 19:37:34 pvalchev Exp $
d46 1
a46 1
.Op Fl 1246AaCfgkMNnqsTtVvXxY
@


1.268
log
@Add a new MAC algorithm for data integrity, UMAC-64 (not default yet, must
specify umac-64@@openssh.com). Provides about 20% end-to-end speedup
compared to hmac-md5. Represents a different approach to message
authentication to that of HMAC that may be beneficial if HMAC based on one
of its underlying hash algorithms is found to be vulnerable to a new attack.
http://www.ietf.org/rfc/rfc4418.txt

in conjunction with and OK djm@@
@
text
@d37 2
a38 2
.\" $OpenBSD: ssh.1,v 1.267 2007/05/31 19:20:16 jmc Exp $
.Dd $Mdocdate$
d318 3
@


1.267
log
@convert to new .Dd format;
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.266 2006/12/11 21:25:46 markus Exp $
d677 1
a677 1
and integrity (hmac-md5, hmac-sha1, hmac-ripemd160).
@


1.266
log
@add rfc 4716 (public key format); ok jmc
@
text
@d37 2
a38 2
.\" $OpenBSD: ssh.1,v 1.265 2006/10/28 18:08:10 otto Exp $
.Dd September 25, 1999
@


1.265
log
@correct/expand example of usage of -w; ok jmc@@ stevesk@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.264 2006/09/25 04:55:38 ray Exp $
d1419 5
@


1.264
log
@Change "a SSH" to "an SSH".  Hurray, I'm not the only one who
pronounces "SSH" as "ess-ess-aich".

OK jmc@@ and stevesk@@.
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.263 2006/07/11 18:50:48 markus Exp $
d1080 6
a1085 3
with remote network 10.0.99.0/24, provided that the SSH server
running on the gateway to the remote network,
at 192.168.1.15, allows it:
d1088 8
a1095 1
# ifconfig tun0 10.0.50.1 10.0.99.1 netmask 255.255.255.252
@


1.263
log
@add ExitOnForwardFailure: terminate the connection if ssh(1)
cannot set up all requested dynamic, local, and remote port
forwardings. ok djm, dtucker, stevesk, jmc
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.262 2006/07/02 23:01:55 stevesk Exp $
d1108 1
a1108 1
Since a SSH-based setup entails a fair amount of overhead,
@


1.263.4.1
log
@upgrade to OpenSSH 4.5
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.265 2006/10/28 18:08:10 otto Exp $
d1080 3
a1082 6
with remote network 10.0.99.0/24 using a point-to-point connection
from 10.1.1.1 to 10.1.1.2,
provided that the SSH server running on the gateway to the remote network,
at 192.168.1.15, allows it.
.Pp
On the client:
d1085 1
a1085 8
# ifconfig tun0 10.1.1.1 10.1.1.2 netmask 255.255.255.252
# route add 10.0.99.0/24 10.1.1.2
.Ed
.Pp
On the server:
.Bd -literal -offset indent
# ifconfig tun1 10.1.1.2 10.1.1.1 netmask 255.255.255.252
# route add 10.0.50.0/24 10.1.1.1
d1108 1
a1108 1
Since an SSH-based setup entails a fair amount of overhead,
@


1.262
log
@use -KR[bind_address:]port here; ok djm@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.261 2006/07/02 17:12:58 stevesk Exp $
d452 1
@


1.261
log
@more details and clarity for tun(4) device forwarding; ok and help
jmc@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.260 2006/05/29 16:13:23 jmc Exp $
d888 3
a890 1
.Fl KR Ar hostport .
@


1.260
log
@add GSSAPI to the list of authentication methods supported;
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.259 2006/03/22 21:16:24 jakob Exp $
d81 2
a82 1
.Op Fl w Ar tunnel : Ns Ar tunnel
d592 6
a597 2
.It Fl w Ar tunnel : Ns Ar tunnel
Requests a
d599 5
a603 8
device on the client
(first
.Ar tunnel
arg)
and server
(second
.Ar tunnel
arg).
d607 4
d613 3
a615 1
directive in
d617 4
@


1.259
log
@simplify SSHFP example; ok jmc@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.258 2006/03/16 04:24:42 djm Exp $
d669 1
@


1.258
log
@Add RFC4419 (Diffie-Hellman group exchange KEX) to the list of SSH RFCs
that OpenSSH supports
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.257 2006/02/24 20:31:30 jmc Exp $
d1028 1
a1028 2
$ ssh-keygen -f /etc/ssh/ssh_host_rsa_key.pub -r host.example.com.
$ ssh-keygen -f /etc/ssh/ssh_host_dsa_key.pub -r host.example.com.
@


1.257
log
@more consistency fixes;
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.256 2006/02/15 16:53:20 jmc Exp $
d1389 5
@


1.257.2.1
log
@upgrade to OpenSSH 4.4
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.263 2006/07/11 18:50:48 markus Exp $
d81 1
a81 2
.Oo Fl w Ar local_tun Ns
.Op : Ns Ar remote_tun Oc
a450 1
.It ExitOnForwardFailure
d591 2
a592 6
.It Fl w Xo
.Ar local_tun Ns Op : Ns Ar remote_tun
.Xc
Requests
tunnel
device forwarding with the specified
d594 8
a601 5
devices between the client
.Pq Ar local_tun
and the server
.Pq Ar remote_tun .
.Pp
a604 4
If
.Ar remote_tun
is not specified, it defaults to
.Dq any .
d607 1
a607 3
and
.Cm TunnelDevice
directives in
a608 4
If the
.Cm Tunnel
directive is unset, it is set to the default tunnel mode, which is
.Dq point-to-point .
a668 1
GSSAPI-based authentication,
d875 1
a875 3
.Sm off
.Fl KR Oo Ar bind_address : Oc Ar port .
.Sm on
d1028 2
a1029 1
$ ssh-keygen -r host.example.com.
a1388 5
.%D 2006
.Re
.Rs
.%R RFC 4419
.%T "Diffie-Hellman Group Exchange for the Secure Shell (SSH) Transport Layer Protocol"
@


1.257.2.2
log
@upgrade to OpenSSH 4.5
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.265 2006/10/28 18:08:10 otto Exp $
d1080 3
a1082 6
with remote network 10.0.99.0/24 using a point-to-point connection
from 10.1.1.1 to 10.1.1.2,
provided that the SSH server running on the gateway to the remote network,
at 192.168.1.15, allows it.
.Pp
On the client:
d1085 1
a1085 8
# ifconfig tun0 10.1.1.1 10.1.1.2 netmask 255.255.255.252
# route add 10.0.99.0/24 10.1.1.2
.Ed
.Pp
On the server:
.Bd -literal -offset indent
# ifconfig tun1 10.1.1.2 10.1.1.1 netmask 255.255.255.252
# route add 10.0.50.0/24 10.1.1.1
d1108 1
a1108 1
Since an SSH-based setup entails a fair amount of overhead,
@


1.256
log
@remove the IETF draft references and replace them with some updated RFCs;
list from markus;
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.255 2006/02/06 21:44:47 jmc Exp $
d572 1
a572 1
e.g., when implementing menu services.
d1181 1
a1181 1
was set when the daemon was started (i.e., the daemon passes the value
@


1.255
log
@make this a little less ambiguous...
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.254 2006/02/06 15:54:07 msf Exp $
d1342 48
a1389 9
.%A T. Ylonen
.%A T. Kivinen
.%A M. Saarinen
.%A T. Rinne
.%A S. Lehtinen
.%T "SSH Protocol Architecture"
.%N draft-ietf-secsh-architecture-12.txt
.%D January 2002
.%O work in progress material
@


1.254
log
@- typo fix

ok jmc@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.253 2006/01/30 13:37:49 jmc Exp $
d1078 1
a1078 1
The following entry would permit connections on the first
d1080 1
a1080 1
device from user
d1082 1
a1082 1
and on the second device from user
@


1.253
log
@remove an incorrect sentence;

reported by roumen petrov;
ok djm markus
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.252 2006/01/26 08:47:56 jmc Exp $
d1090 1
a1090 1
tunnel="2",command="sh /etc/netstart tun1" ssh-rsa ... john
@


1.252
log
@add a section on verifying host keys in dns;

written with a lot of help from jakob;
feedback dtucker/markus;
ok markus
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.251 2006/01/20 00:14:55 dtucker Exp $
a1258 3
They are
never used automatically and are not necessary: they are only provided for
the convenience of the user.
@


1.251
log
@Document RekeyLimit.  Based on patch from jan.iven at cern.ch from mindrot #1056
with feedback from jmc, djm and markus; ok jmc@@ djm@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.250 2006/01/18 10:53:29 jmc Exp $
a812 9
.Nm
can be configured to verify host identification using fingerprint resource
records (SSHFP) published in DNS.
The
.Cm VerifyHostKeyDNS
option can be used to control how DNS lookups are performed.
SSHFP resource records can be generated using
.Xr ssh-keygen 1 .
.Pp
d1000 50
@


1.250
log
@add a section on ssh-based vpn, based on reyk's README.tun;
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.249 2006/01/15 17:37:05 jmc Exp $
d480 1
@


1.249
log
@correction from deraadt
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.248 2006/01/12 22:34:12 jmc Exp $
d1008 50
d1297 1
@


1.248
log
@back out a sentence - AUTHENTICATION already documents this;
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.247 2006/01/12 18:48:48 jmc Exp $
d646 1
a646 1
The OpenSSH SSH client supports OpenSSH protocols 1 and 2.
@


1.247
log
@refer to `TCP' rather than `TCP/IP' in the context of connection
forwarding;

ok markus
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.246 2006/01/12 14:44:12 jmc Exp $
a952 3
Once opened,
a SSH connection will remain active
until all actively forwarded connections have closed.
@


1.246
log
@split sections on tcp and x11 forwarding into two sections.
add an example in the tcp section, based on sth i wrote for ssh faq;

help + ok: djm markus dtucker
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.245 2006/01/06 13:29:10 jmc Exp $
d92 1
a92 1
X11 connections and arbitrary TCP/IP ports
d149 1
a149 1
data for forwarded X11 and TCP/IP connections).
d837 1
a837 1
machine exits and all X11 and TCP/IP connections have been closed.
@


1.245
log
@final round of whacking FILES for duplicate info, and some consistency
fixes;

ok djm
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.244 2006/01/06 13:27:32 jmc Exp $
d896 61
a956 1
.Sh X11 AND TCP FORWARDING
a1010 5
.Pp
Forwarding of arbitrary TCP/IP connections over the secure channel can
be specified either on the command line or in a configuration file.
One possible application of TCP/IP forwarding is a secure connection to an
electronic purse; another is going through firewalls.
@


1.244
log
@weed out some duplicate info in the known_hosts FILES entries;
ok djm
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.243 2006/01/04 19:50:09 jmc Exp $
a1080 3
In the simplest form the format is the same as the
.Pa .pub
identity files.
d1129 1
a1129 1
when the user logs in just before the user's shell (or command) is
d1154 2
a1155 7
and are used for
.Cm RhostsRSAAuthentication
and
.Cm HostbasedAuthentication .
If the protocol version 1
.Cm RhostsRSAAuthentication
method is used,
d1162 2
a1163 3
to access the host keys for
.Cm HostbasedAuthentication .
This eliminates the requirement that
d1165 1
a1165 1
be setuid root when that authentication method is used.
d1183 1
a1183 1
when the user logs in just before the user's shell (or command) is started.
@


1.243
log
@-.Xr gzip 1 ,
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.242 2006/01/04 19:40:24 jmc Exp $
d1123 2
a1124 3
Records host keys for all hosts the user has logged into that are not
in
.Pa /etc/ssh/ssh_known_hosts .
d1126 2
a1127 1
.Xr sshd 8 .
d1184 2
a1185 8
This file should be world-readable.
This file contains
public keys, one per line, in the following format (fields separated
by spaces): system name, public key and optional comment field.
When different names are used
for the same machine, all such names should be listed, separated by
commas.
The format is described in the
d1187 1
a1187 9
manual page.
.Pp
The canonical system name (as returned by name servers) is used by
.Xr sshd 8
to verify the client host when logging in; other names are needed because
.Nm
does not convert the user-supplied name to a canonical name before
checking the key, because someone with access to the name servers
would then be able to fool host authentication.
@


1.242
log
@+.Xr ssh-keyscan 1 ,
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.241 2006/01/04 18:45:01 jmc Exp $
a1211 1
.Xr gzip 1 ,
@


1.241
log
@remove .Xr's to rsh(1) and telnet(1): they are hardly needed;
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.240 2006/01/04 18:42:46 jmc Exp $
d1218 1
@


1.240
log
@chop out some duplication in the .{r,s}hosts/{h,sh}osts.equiv FILES
entries;

ok markus
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.239 2006/01/03 16:55:18 jmc Exp $
a1212 1
.Xr rsh 1 ,
a1217 1
.Xr telnet 1 ,
@


1.239
log
@tweak the description of ~/.ssh/environment
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.238 2006/01/03 16:52:36 jmc Exp $
d1058 1
a1058 11
This file is used in
.Cm RhostsRSAAuthentication
and
.Cm HostbasedAuthentication
authentication to list the
host/user pairs that are permitted to log in.
(Note that this file is
also used by rlogin and rsh, which makes using this file insecure.)
Each line of the file contains a host name (in the canonical form
returned by name servers), and then a user name on that host,
separated by a space.
d1060 1
a1060 1
world-readable if the user's home directory is on a NFS partition,
a1069 13
Note that
.Xr sshd 8
allows authentication only in combination with client host key
authentication before permitting log in.
If the server machine does not have the client's host key in
.Pa /etc/ssh/ssh_known_hosts ,
it can be stored in
.Pa ~/.ssh/known_hosts .
The easiest way to do this is to
connect back to the client from the server machine using ssh; this
will automatically add the host key to
.Pa ~/.ssh/known_hosts .
.Pp
d1071 4
a1074 11
This file is used exactly the same way as
.Pa .rhosts .
The purpose for
having this file is to be able to use
.Cm RhostsRSAAuthentication
and
.Cm HostbasedAuthentication
authentication without permitting login with
.Xr rlogin
or
.Xr rsh 1 .
d1139 2
a1140 14
This file is used during
.Cm RhostsRSAAuthentication
and
.Cm HostbasedAuthentication
authentication.
It contains
canonical hosts names, one per line (the full format is described in the
.Xr sshd 8
manual page).
If the client host is found in this file, login is
automatically permitted provided client and server user names are the
same.
Additionally, successful client host key authentication is required.
This file should only be writable by root.
d1143 4
a1146 5
This file is processed exactly as
.Pa /etc/hosts.equiv .
This file may be useful to permit logins using
.Nm
but not using rsh/rlogin.
@


1.238
log
@put FILES in some sort of order: sort by pathname
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.237 2006/01/03 16:35:30 jmc Exp $
d1125 2
a1126 2
Contains additional definitions for environment variables, see section
.Sx ENVIRONMENT
@


1.237
log
@use a larger width for the ENVIRONMENT list;
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.236 2006/01/03 16:31:10 jmc Exp $
a1056 103
.It ~/.ssh/known_hosts
Records host keys for all hosts the user has logged into that are not
in
.Pa /etc/ssh/ssh_known_hosts .
See
.Xr sshd 8 .
.Pp
.It ~/.ssh/identity
.It ~/.ssh/id_dsa
.It ~/.ssh/id_rsa
Contains the private key for authentication.
These files
contain sensitive data and should be readable by the user but not
accessible by others (read/write/execute).
.Nm
will simply ignore a private key file if it is accessible by others.
It is possible to specify a passphrase when
generating the key which will be used to encrypt the
sensitive part of this file using 3DES.
.Pp
.It ~/.ssh/identity.pub
.It ~/.ssh/id_dsa.pub
.It ~/.ssh/id_rsa.pub
Contains the public key for authentication.
These files are not
sensitive and can (but need not) be readable by anyone.
They are
never used automatically and are not necessary: they are only provided for
the convenience of the user.
.Pp
.It ~/.ssh/config
This is the per-user configuration file.
The file format and configuration options are described in
.Xr ssh_config 5 .
Because of the potential for abuse, this file must have strict permissions:
read/write for the user, and not accessible by others.
.Pp
.It ~/.ssh/authorized_keys
Lists the public keys (RSA/DSA) that can be used for logging in as this user.
The format of this file is described in the
.Xr sshd 8
manual page.
In the simplest form the format is the same as the
.Pa .pub
identity files.
This file is not highly sensitive, but the recommended
permissions are read/write for the user, and not accessible by others.
.Pp
.It /etc/ssh/ssh_known_hosts
Systemwide list of known host keys.
This file should be prepared by the
system administrator to contain the public host keys of all machines in the
organization.
This file should be world-readable.
This file contains
public keys, one per line, in the following format (fields separated
by spaces): system name, public key and optional comment field.
When different names are used
for the same machine, all such names should be listed, separated by
commas.
The format is described in the
.Xr sshd 8
manual page.
.Pp
The canonical system name (as returned by name servers) is used by
.Xr sshd 8
to verify the client host when logging in; other names are needed because
.Nm
does not convert the user-supplied name to a canonical name before
checking the key, because someone with access to the name servers
would then be able to fool host authentication.
.Pp
.It Pa /etc/ssh/ssh_config
Systemwide configuration file.
The file format and configuration options are described in
.Xr ssh_config 5 .
.Pp
.It /etc/ssh/ssh_host_key
.It /etc/ssh/ssh_host_dsa_key
.It /etc/ssh/ssh_host_rsa_key
These three files contain the private parts of the host keys
and are used for
.Cm RhostsRSAAuthentication
and
.Cm HostbasedAuthentication .
If the protocol version 1
.Cm RhostsRSAAuthentication
method is used,
.Nm
must be setuid root, since the host key is readable only by root.
For protocol version 2,
.Nm
uses
.Xr ssh-keysign 8
to access the host keys for
.Cm HostbasedAuthentication .
This eliminates the requirement that
.Nm
be setuid root when that authentication method is used.
By default
.Nm
is not setuid root.
.Pp
d1106 62
d1191 28
a1218 2
.It /etc/ssh/sshrc
Commands in this file are executed by
d1220 19
a1238 2
when the user logs in just before the user's shell (or command) is started.
See the
d1240 5
a1244 1
manual page for more information.
d1246 1
a1246 1
.It ~/.ssh/rc
d1249 1
a1249 2
when the user logs in just before the user's shell (or command) is
started.
a1252 5
.Pp
.It ~/.ssh/environment
Contains additional definitions for environment variables, see section
.Sx ENVIRONMENT
above.
@


1.236
log
@move FILES to a -compact list, and make each files an item in that list.
this avoids nastly line wrap when we have long pathnames, and treats
each file as a separate item;

remove the .Pa too, since it is useless.
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.235 2006/01/02 12:31:06 jmc Exp $
d959 1
a959 1
.Bl -tag -width LOGNAME
@


1.235
log
@start to cut some duplicate info from FILES;
help/ok djm
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.234 2005/12/31 13:45:19 jmc Exp $
d1056 2
a1057 2
.Bl -tag -width Ds
.It Pa ~/.ssh/known_hosts
d1063 4
a1066 1
.It Pa ~/.ssh/identity, ~/.ssh/id_dsa, ~/.ssh/id_rsa
d1076 4
a1079 1
.It Pa ~/.ssh/identity.pub, ~/.ssh/id_dsa.pub, ~/.ssh/id_rsa.pub
d1086 2
a1087 1
.It Pa ~/.ssh/config
d1093 2
a1094 1
.It Pa ~/.ssh/authorized_keys
d1104 2
a1105 1
.It Pa /etc/ssh/ssh_known_hosts
d1128 1
d1133 4
a1136 1
.It Pa /etc/ssh/ssh_host_key, /etc/ssh/ssh_host_dsa_key, /etc/ssh/ssh_host_rsa_key
d1159 2
a1160 1
.It Pa ~/.rhosts
d1195 2
a1196 1
.It Pa ~/.shosts
d1208 2
a1209 1
.It Pa /etc/hosts.equiv
d1224 2
a1225 1
.It Pa /etc/shosts.equiv
d1231 2
a1232 1
.It Pa /etc/ssh/sshrc
d1239 2
a1240 1
.It Pa ~/.ssh/rc
d1248 2
a1249 1
.It Pa ~/.ssh/environment
@


1.234
log
@.Nm does not require an argument;
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.233 2005/12/31 13:44:04 jmc Exp $
d1064 1
a1064 2
Contains the authentication identity of the user.
They are for protocol 1 RSA, protocol 2 DSA, and protocol 2 RSA, respectively.
a1067 1
Note that
d1069 1
a1069 1
ignores a private key file if it is accessible by others.
d1071 1
a1071 1
generating the key; the passphrase will be used to encrypt the
d1074 1
a1074 16
Contains the public key for authentication (public part of the
identity file in human-readable form).
The contents of the
.Pa ~/.ssh/identity.pub
file should be added to the file
.Pa ~/.ssh/authorized_keys
on all machines
where the user wishes to log in using protocol version 1 RSA authentication.
The contents of the
.Pa ~/.ssh/id_dsa.pub
and
.Pa ~/.ssh/id_rsa.pub
file should be added to
.Pa ~/.ssh/authorized_keys
on all machines
where the user wishes to log in using protocol version 2 DSA/RSA authentication.
d1077 2
a1078 2
These files are
never used automatically and are not necessary; they are only provided for
@


1.233
log
@clean up ENVIRONMENT a little;
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.232 2005/12/31 10:46:17 jmc Exp $
d862 1
a862 1
.Nm ssh .
d993 1
a993 1
.Nm ssh .
@


1.232
log
@merge the "LOGIN SESSION AND REMOTE EXECUTION" and "SERVER
AUTHENTICATION" sections into "AUTHENTICATION";

some rewording done to make the text read better, plus some
improvements from djm;

ok djm
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.231 2005/12/31 01:38:45 stevesk Exp $
d967 6
a972 3
.Dq hostname:n
where hostname indicates
the host where the shell runs, and n is an integer \*(Ge 1.
d1018 3
a1020 2
Identifies the path of a unix-domain socket used to communicate with the
agent.
d1024 2
a1025 2
four space-separated values: client ip-address, client port number,
server ip-address and server port number.
d1027 1
a1027 1
The variable contains the original command line if a forced command
d1049 1
a1049 1
to the environment if the file exists and if users are allowed to
@


1.231
log
@document -MM; ok djm@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.230 2005/12/23 23:46:23 jmc Exp $
d791 30
a820 1
.Sh LOGIN SESSION AND REMOTE EXECUTION
a955 30
.Sh SERVER AUTHENTICATION
.Nm
automatically maintains and checks a database containing
identifications for all hosts it has ever been used with.
Host keys are stored in
.Pa ~/.ssh/known_hosts
in the user's home directory.
Additionally, the file
.Pa /etc/ssh/ssh_known_hosts
is automatically checked for known hosts.
Any new hosts are automatically added to the user's file.
If a host's identification ever changes,
.Nm
warns about this and disables password authentication to prevent a
trojan horse from getting the user's password.
Another purpose of this mechanism is to prevent man-in-the-middle attacks
which could otherwise be used to circumvent the encryption.
The
.Cm StrictHostKeyChecking
option can be used to prevent logins to machines whose
host key is not known or has changed.
.Pp
.Nm
can be configured to verify host identification using fingerprint resource
records (SSHFP) published in DNS.
The
.Cm VerifyHostKeyDNS
option can be used to control how DNS lookups are performed.
SSHFP resource records can be generated using
.Xr ssh-keygen 1 .
@


1.230
log
@less mark up for -c;
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.229 2005/12/23 14:55:53 jmc Exp $
d372 7
@


1.229
log
@- sync the description of -e w/ synopsis
- simplify the description of -I
- note that -I is only available if support compiled in, and that it
isn't by default

feedback/ok djm@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.228 2005/12/22 11:23:42 jmc Exp $
d189 1
a189 1
For protocol version 2
d193 12
a204 12
The supported ciphers are
.Dq 3des-cbc ,
.Dq aes128-cbc ,
.Dq aes192-cbc ,
.Dq aes256-cbc ,
.Dq aes128-ctr ,
.Dq aes192-ctr ,
.Dq aes256-ctr ,
.Dq arcfour128 ,
.Dq arcfour256 ,
.Dq arcfour ,
.Dq blowfish-cbc ,
d206 1
a206 1
.Dq cast128-cbc .
@


1.228
log
@expand the description of -w somewhat;
help/ok reyk
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.227 2005/12/21 12:53:31 jmc Exp $
d259 1
a259 1
.It Fl e Ar ch | ^ch | none
d295 1
a295 2
Specifies which smartcard device to use.
The argument is the device
d299 2
@


1.227
log
@-Y does X11 forwarding too;
ok markus
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.226 2005/12/21 11:57:25 jmc Exp $
d585 12
a596 1
device on the client and server like the
@


1.226
log
@options now described `above', rather than `later';
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.225 2005/12/21 11:48:16 jmc Exp $
d854 2
a855 1
.Fl X
d857 1
a857 1
.Fl x
@


1.225
log
@-L and -R descriptions are now above, not below, ~C description;
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.224 2005/12/20 22:09:41 jmc Exp $
d857 1
a857 1
options described later)
d899 1
a899 1
options described later) and
@


1.224
log
@move info on ssh return values and config files up into the main
description;
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.223 2005/12/20 22:02:50 jmc Exp $
d832 1
a832 1
options (see below).
@


1.223
log
@.Ss -> .Sh: subsections have not made this page more readable
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.222 2005/12/20 21:59:43 jmc Exp $
d616 10
a789 8
The exit status of the remote program is returned as the exit status of
.Nm ssh .
.Pp
.Nm
may additionally obtain configuration data from
a per-user configuration file and a system-wide configuration file.
The file format and configuration options are described in
.Xr ssh_config 5 .
a1227 4
.Sh DIAGNOSTICS
.Nm
exits with the exit status of the remote command or with 255
if an error occurred.
@


1.222
log
@merge the sections on protocols 1 and 2 into one section on authentication;

feedback djm dtucker
ok deraadt markus dtucker
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.221 2005/12/16 18:14:40 jmc Exp $
d762 1
a762 1
.Ss Login session and remote execution
d788 1
a788 1
.Ss Escape Characters
d846 1
a846 1
.Ss X11 and TCP forwarding
d905 1
a905 1
.Ss Server authentication
@


1.221
log
@signpost the protocol sections;
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.220 2005/12/16 18:12:22 jmc Exp $
d616 32
a647 6
.Ss SSH protocol version 1
The first authentication method is the
.Em rhosts
or
.Em hosts.equiv
method combined with RSA-based host authentication.
d660 5
a664 3
considered for log in.
Additionally, if the server can verify the client's
host key (see
d667 3
a669 4
.Pa ~/.ssh/known_hosts
in the
.Sx FILES
section), only then is login permitted.
d671 1
a671 1
spoofing, DNS spoofing and routing spoofing.
d678 5
a682 7
As a second authentication method,
.Nm
supports RSA based authentication.
The scheme is based on public-key cryptography: there are cryptosystems
where encryption and decryption are done using separate keys, and it
is not possible to derive the decryption key from the encryption key.
RSA is one such system.
d686 10
d704 3
a706 9
The server checks if this key is permitted, and if so,
sends the user (actually the
.Nm
program running on behalf of the user) a challenge, a random number,
encrypted by the user's public key.
The challenge can only be decrypted using the proper private key.
The user's client then decrypts the challenge using the private key,
proving that he/she knows the private key
but without disclosing it to the server.
d708 1
a708 3
.Nm
implements the RSA authentication protocol automatically.
The user creates his/her RSA key pair by running
d712 6
d720 6
d727 1
a727 2
The user should then copy the
.Pa identity.pub
d730 2
a731 1
in his/her home directory on the remote machine (the
d736 1
a736 1
per line, though the lines can be very long).
d739 1
a739 1
The most convenient way to use RSA authentication may be with an
d745 12
a756 1
If other authentication methods fail,
a761 35
.Ss SSH protocol version 2
When a user connects using protocol version 2,
similar authentication methods are available.
Using the default values for
.Cm PreferredAuthentications ,
the client will try to authenticate first using the hostbased method;
if this method fails, public key authentication is attempted,
and finally if this method fails, keyboard-interactive and
password authentication are tried.
.Pp
The public key method is similar to RSA authentication described
in the previous section and allows the RSA or DSA algorithm to be used:
The client uses his private key,
.Pa ~/.ssh/id_dsa
or
.Pa ~/.ssh/id_rsa ,
to sign the session identifier and sends the result to the server.
The server checks whether the matching public key is listed in
.Pa ~/.ssh/authorized_keys
and grants access if both the key is found and the signature is correct.
The session identifier is derived from a shared Diffie-Hellman value
and is only known to the client and the server.
.Pp
If public key authentication fails or is not available, a password
can be sent encrypted to the remote host to prove the user's identity.
.Pp
Additionally,
.Nm
supports hostbased or challenge response authentication.
.Pp
Protocol 2 provides additional mechanisms for confidentiality
(the traffic is encrypted using AES, 3DES, Blowfish, CAST128 or Arcfour)
and integrity (hmac-md5, hmac-sha1, hmac-ripemd160).
Note that protocol 1 lacks a strong mechanism for ensuring the
integrity of the connection.
@


1.220
log
@make the description of -c a little nicer;
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.219 2005/12/16 18:08:53 jmc Exp $
d103 1
a103 1
depending on the protocol version used.
@


1.219
log
@simplify a sentence;
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.218 2005/12/16 18:07:08 jmc Exp $
d169 1
a169 1
.Dq blowfish
d207 5
a211 5
The default is
.Bd -literal
  ``aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,arcfour128,
    arcfour256,arcfour,aes192-cbc,aes256-cbc,aes128-ctr,
    aes192-ctr,aes256-ctr''
@


1.218
log
@move the option descriptions up the page: start of a restructure;
ok markus deraadt
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.217 2005/12/08 14:59:44 jmc Exp $
d108 1
a108 2
.Ar command
is executed on the remote host instead of a login shell.
@


1.217
log
@make `!command' a little clearer;
ok reyk
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.216 2005/12/07 10:52:13 jmc Exp $
a109 34
.Ss SSH protocol version 1
The first authentication method is the
.Em rhosts
or
.Em hosts.equiv
method combined with RSA-based host authentication.
If the machine the user logs in from is listed in
.Pa /etc/hosts.equiv
or
.Pa /etc/shosts.equiv
on the remote machine, and the user names are
the same on both sides, or if the files
.Pa ~/.rhosts
or
.Pa ~/.shosts
exist in the user's home directory on the
remote machine and contain a line containing the name of the client
machine and the name of the user on that machine, the user is
considered for log in.
Additionally, if the server can verify the client's
host key (see
.Pa /etc/ssh/ssh_known_hosts
and
.Pa ~/.ssh/known_hosts
in the
.Sx FILES
section), only then is login permitted.
This authentication method closes security holes due to IP
spoofing, DNS spoofing and routing spoofing.
[Note to the administrator:
.Pa /etc/hosts.equiv ,
.Pa ~/.rhosts ,
and the rlogin/rsh protocol in general, are inherently insecure and should be
disabled if security is desired.]
d111 4
a114 1
As a second authentication method,
d116 3
a118 13
supports RSA based authentication.
The scheme is based on public-key cryptography: there are cryptosystems
where encryption and decryption are done using separate keys, and it
is not possible to derive the decryption key from the encryption key.
RSA is one such system.
The idea is that each user creates a public/private
key pair for authentication purposes.
The server knows the public key, and only the user knows the private key.
.Pp
The file
.Pa ~/.ssh/authorized_keys
lists the public keys that are permitted for logging in.
When the user logs in, the
d120 3
a122 4
program tells the server which key pair it would like to use for
authentication.
The server checks if this key is permitted, and if so,
sends the user (actually the
d124 3
a126 7
program running on behalf of the user) a challenge, a random number,
encrypted by the user's public key.
The challenge can only be decrypted using the proper private key.
The user's client then decrypts the challenge using the private key,
proving that he/she knows the private key
but without disclosing it to the server.
.Pp
d128 4
a131 19
implements the RSA authentication protocol automatically.
The user creates his/her RSA key pair by running
.Xr ssh-keygen 1 .
This stores the private key in
.Pa ~/.ssh/identity
and stores the public key in
.Pa ~/.ssh/identity.pub
in the user's home directory.
The user should then copy the
.Pa identity.pub
to
.Pa ~/.ssh/authorized_keys
in his/her home directory on the remote machine (the
.Pa authorized_keys
file corresponds to the conventional
.Pa ~/.rhosts
file, and has one key
per line, though the lines can be very long).
After this, the user can log in without giving the password.
d133 33
a165 5
The most convenient way to use RSA authentication may be with an
authentication agent.
See
.Xr ssh-agent 1
for more information.
d167 14
a180 1
If other authentication methods fail,
d182 7
a188 13
prompts the user for a password.
The password is sent to the remote
host for checking; however, since all communications are encrypted,
the password cannot be seen by someone listening on the network.
.Ss SSH protocol version 2
When a user connects using protocol version 2,
similar authentication methods are available.
Using the default values for
.Cm PreferredAuthentications ,
the client will try to authenticate first using the hostbased method;
if this method fails, public key authentication is attempted,
and finally if this method fails, keyboard-interactive and
password authentication are tried.
d190 42
a231 17
The public key method is similar to RSA authentication described
in the previous section and allows the RSA or DSA algorithm to be used:
The client uses his private key,
.Pa ~/.ssh/id_dsa
or
.Pa ~/.ssh/id_rsa ,
to sign the session identifier and sends the result to the server.
The server checks whether the matching public key is listed in
.Pa ~/.ssh/authorized_keys
and grants access if both the key is found and the signature is correct.
The session identifier is derived from a shared Diffie-Hellman value
and is only known to the client and the server.
.Pp
If public key authentication fails or is not available, a password
can be sent encrypted to the remote host to prove the user's identity.
.Pp
Additionally,
d233 3
a235 1
supports hostbased or challenge response authentication.
d237 33
a269 18
Protocol 2 provides additional mechanisms for confidentiality
(the traffic is encrypted using AES, 3DES, Blowfish, CAST128 or Arcfour)
and integrity (hmac-md5, hmac-sha1, hmac-ripemd160).
Note that protocol 1 lacks a strong mechanism for ensuring the
integrity of the connection.
.Ss Login session and remote execution
When the user's identity has been accepted by the server, the server
either executes the given command, or logs into the machine and gives
the user a normal shell on the remote machine.
All communication with
the remote command or shell will be automatically encrypted.
.Pp
If a pseudo-terminal has been allocated (normal login session), the
user may use the escape characters noted below.
.Pp
If no pseudo-tty has been allocated,
the session is transparent and can be used to reliably transfer binary data.
On most systems, setting the escape character to
d271 14
a284 8
will also make the session transparent even if a tty is used.
.Pp
The session terminates when the command or shell on the remote
machine exits and all X11 and TCP/IP connections have been closed.
The exit status of the remote program is returned as the exit status of
.Nm ssh .
.Ss Escape Characters
When a pseudo-terminal has been requested,
d286 12
a297 26
supports a number of functions through the use of an escape character.
.Pp
A single tilde character can be sent as
.Ic ~~
or by following the tilde by a character other than those described below.
The escape character must always follow a newline to be interpreted as
special.
The escape character can be changed in configuration files using the
.Cm EscapeChar
configuration directive or on the command line by the
.Fl e
option.
.Pp
The supported escapes (assuming the default
.Ql ~ )
are:
.Bl -tag -width Ds
.It Cm ~.
Disconnect.
.It Cm ~^Z
Background
.Nm ssh .
.It Cm ~#
List forwarded connections.
.It Cm ~&
Background
d299 9
a307 10
at logout when waiting for forwarded connection / X11 sessions to terminate.
.It Cm ~?
Display a list of escape characters.
.It Cm ~B
Send a BREAK to the remote system
(only useful for SSH protocol version 2 and if the peer supports it).
.It Cm ~C
Open command line.
Currently this allows the addition of port forwardings using the
.Fl L
d309 46
a354 39
.Fl R
options (see below).
It also allows the cancellation of existing remote port-forwardings
using
.Fl KR Ar hostport .
.Ic !\& Ns Ar command
allows the user to execute a local command if the
.Ic PermitLocalCommand
option is enabled in
.Xr ssh_config 5 .
Basic help is available, using the
.Fl h
option.
.It Cm ~R
Request rekeying of the connection
(only useful for SSH protocol version 2 and if the peer supports it).
.El
.Ss X11 and TCP forwarding
If the
.Cm ForwardX11
variable is set to
.Dq yes
(or see the description of the
.Fl X
and
.Fl x
options described later)
and the user is using X11 (the
.Ev DISPLAY
environment variable is set), the connection to the X11 display is
automatically forwarded to the remote side in such a way that any X11
programs started from the shell (or command) will go through the
encrypted channel, and the connection to the real X server will be made
from the local machine.
The user should not manually set
.Ev DISPLAY .
Forwarding of X11 connections can be
configured on the command line or in configuration files.
.Pp
d356 37
a392 2
.Ev DISPLAY
value set by
d394 7
a400 2
will point to the server machine, but with a display number greater than zero.
This is normal, and happens because
d402 2
a403 5
creates a
.Dq proxy
X server on the server machine for forwarding the
connections over the encrypted channel.
.Pp
d405 21
a425 7
will also automatically set up Xauthority data on the server machine.
For this purpose, it will generate a random authorization cookie,
store it in Xauthority on the server, and verify that any forwarded
connections carry this cookie and replace it by the real cookie when
the connection is opened.
The real authentication cookie is never
sent to the server machine (and no cookies are sent in the plain).
d427 87
a513 11
If the
.Cm ForwardAgent
variable is set to
.Dq yes
(or see the description of the
.Fl A
and
.Fl a
options described later) and
the user is using an authentication agent, the connection to the agent
is automatically forwarded to the remote side.
d515 12
a526 25
Forwarding of arbitrary TCP/IP connections over the secure channel can
be specified either on the command line or in a configuration file.
One possible application of TCP/IP forwarding is a secure connection to an
electronic purse; another is going through firewalls.
.Ss Server authentication
.Nm
automatically maintains and checks a database containing
identifications for all hosts it has ever been used with.
Host keys are stored in
.Pa ~/.ssh/known_hosts
in the user's home directory.
Additionally, the file
.Pa /etc/ssh/ssh_known_hosts
is automatically checked for known hosts.
Any new hosts are automatically added to the user's file.
If a host's identification ever changes,
.Nm
warns about this and disables password authentication to prevent a
trojan horse from getting the user's password.
Another purpose of this mechanism is to prevent man-in-the-middle attacks
which could otherwise be used to circumvent the encryption.
The
.Cm StrictHostKeyChecking
option can be used to prevent logins to machines whose
host key is not known or has changed.
d528 40
d569 6
a574 12
can be configured to verify host identification using fingerprint resource
records (SSHFP) published in DNS.
The
.Cm VerifyHostKeyDNS
option can be used to control how DNS lookups are performed.
SSHFP resource records can be generated using
.Xr ssh-keygen 1 .
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl 1
Forces
d576 16
a591 15
to try protocol version 1 only.
.It Fl 2
Forces
.Nm
to try protocol version 2 only.
.It Fl 4
Forces
.Nm
to use IPv4 addresses only.
.It Fl 6
Forces
.Nm
to use IPv6 addresses only.
.It Fl A
Enables forwarding of the authentication agent connection.
d594 1
a594 1
Agent forwarding should be enabled with caution.
d596 43
a638 36
(for the agent's Unix-domain socket)
can access the local agent through the forwarded connection.
An attacker cannot obtain key material from the agent,
however they can perform operations on the keys that enable them to
authenticate using the identities loaded into the agent.
.It Fl a
Disables forwarding of the authentication agent connection.
.It Fl b Ar bind_address
Use
.Ar bind_address
on the local machine as the source address
of the connection.
Only useful on systems with more than one address.
.It Fl C
Requests compression of all data (including stdin, stdout, stderr, and
data for forwarded X11 and TCP/IP connections).
The compression algorithm is the same used by
.Xr gzip 1 ,
and the
.Dq level
can be controlled by the
.Cm CompressionLevel
option for protocol version 1.
Compression is desirable on modem lines and other
slow connections, but will only slow down things on fast networks.
The default value can be set on a host-by-host basis in the
configuration files; see the
.Cm Compression
option.
.It Fl c Ar cipher_spec
Selects the cipher specification for encrypting the session.
.Pp
Protocol version 1 allows specification of a single cipher.
The supported values are
.Dq 3des ,
.Dq blowfish
d640 11
a650 17
.Dq des .
.Ar 3des
(triple-des) is an encrypt-decrypt-encrypt triple with three different keys.
It is believed to be secure.
.Ar blowfish
is a fast block cipher; it appears very secure and is much faster than
.Ar 3des .
.Ar des
is only supported in the
.Nm
client for interoperability with legacy protocol 1 implementations
that do not support the
.Ar 3des
cipher.
Its use is strongly discouraged due to cryptographic weaknesses.
The default is
.Dq 3des .
d652 1
a652 42
For protocol version 2
.Ar cipher_spec
is a comma-separated list of ciphers
listed in order of preference.
The supported ciphers are
.Dq 3des-cbc ,
.Dq aes128-cbc ,
.Dq aes192-cbc ,
.Dq aes256-cbc ,
.Dq aes128-ctr ,
.Dq aes192-ctr ,
.Dq aes256-ctr ,
.Dq arcfour128 ,
.Dq arcfour256 ,
.Dq arcfour ,
.Dq blowfish-cbc ,
and
.Dq cast128-cbc .
The default is
.Bd -literal
  ``aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,arcfour128,
    arcfour256,arcfour,aes192-cbc,aes256-cbc,aes128-ctr,
    aes192-ctr,aes256-ctr''
.Ed
.It Fl D Xo
.Sm off
.Oo Ar bind_address : Oc
.Ar port
.Sm on
.Xc
Specifies a local
.Dq dynamic
application-level port forwarding.
This works by allocating a socket to listen to
.Ar port
on the local side, optionally bound to the specified
.Ar bind_address .
Whenever a connection is made to this port, the
connection is forwarded over the secure channel, and the application
protocol is then used to determine where to connect to from the
remote machine.
Currently the SOCKS4 and SOCKS5 protocols are supported, and
d654 8
a661 3
will act as a SOCKS server.
Only root can forward privileged ports.
Dynamic port forwardings can also be specified in the configuration file.
d663 4
a666 45
IPv6 addresses can be specified with an alternative syntax:
.Sm off
.Xo
.Op Ar bind_address No /
.Ar port
.Xc
.Sm on
or by enclosing the address in square brackets.
Only the superuser can forward privileged ports.
By default, the local port is bound in accordance with the
.Cm GatewayPorts
setting.
However, an explicit
.Ar bind_address
may be used to bind the connection to a specific address.
The
.Ar bind_address
of
.Dq localhost
indicates that the listening port be bound for local use only, while an
empty address or
.Sq *
indicates that the port should be available from all interfaces.
.It Fl e Ar ch | ^ch | none
Sets the escape character for sessions with a pty (default:
.Ql ~ ) .
The escape character is only recognized at the beginning of a line.
The escape character followed by a dot
.Pq Ql \&.
closes the connection;
followed by control-Z suspends the connection;
and followed by itself sends the escape character once.
Setting the character to
.Dq none
disables any escapes and makes the session fully transparent.
.It Fl F Ar configfile
Specifies an alternative per-user configuration file.
If a configuration file is given on the command line,
the system-wide configuration file
.Pq Pa /etc/ssh/ssh_config
will be ignored.
The default for the per-user configuration file is
.Pa ~/.ssh/config .
.It Fl f
Requests
d668 4
a671 2
to go to background just before command execution.
This is useful if
d673 7
a679 12
is going to ask for passwords or passphrases, but the user
wants it in the background.
This implies
.Fl n .
The recommended way to start X11 programs at a remote site is with
something like
.Ic ssh -f host xterm .
.It Fl g
Allows remote hosts to connect to local forwarded ports.
.It Fl I Ar smartcard_device
Specifies which smartcard device to use.
The argument is the device
d681 4
a684 6
should use to communicate with a smartcard used for storing the user's
private RSA key.
.It Fl i Ar identity_file
Selects a file from which the identity (private key) for
RSA or DSA authentication is read.
The default is
d686 40
a725 3
for protocol version 1, and
.Pa ~/.ssh/id_rsa
and
d727 13
a739 58
for protocol version 2.
Identity files may also be specified on
a per-host basis in the configuration file.
It is possible to have multiple
.Fl i
options (and multiple identities specified in
configuration files).
.It Fl k
Disables forwarding (delegation) of GSSAPI credentials to the server.
.It Fl L Xo
.Sm off
.Oo Ar bind_address : Oc
.Ar port : host : hostport
.Sm on
.Xc
Specifies that the given port on the local (client) host is to be
forwarded to the given host and port on the remote side.
This works by allocating a socket to listen to
.Ar port
on the local side, optionally bound to the specified
.Ar bind_address .
Whenever a connection is made to this port, the
connection is forwarded over the secure channel, and a connection is
made to
.Ar host
port
.Ar hostport
from the remote machine.
Port forwardings can also be specified in the configuration file.
IPv6 addresses can be specified with an alternative syntax:
.Sm off
.Xo
.Op Ar bind_address No /
.Ar port No / Ar host No /
.Ar hostport
.Xc
.Sm on
or by enclosing the address in square brackets.
Only the superuser can forward privileged ports.
By default, the local port is bound in accordance with the
.Cm GatewayPorts
setting.
However, an explicit
.Ar bind_address
may be used to bind the connection to a specific address.
The
.Ar bind_address
of
.Dq localhost
indicates that the listening port be bound for local use only, while an
empty address or
.Sq *
indicates that the port should be available from all interfaces.
.It Fl l Ar login_name
Specifies the user to log in as on the remote machine.
This also may be specified on a per-host basis in the configuration file.
.It Fl M
Places the
d741 28
a768 24
client into
.Dq master
mode for connection sharing.
Refer to the description of
.Cm ControlMaster
in
.Xr ssh_config 5
for details.
.It Fl m Ar mac_spec
Additionally, for protocol version 2 a comma-separated list of MAC
(message authentication code) algorithms can
be specified in order of preference.
See the
.Cm MACs
keyword for more information.
.It Fl N
Do not execute a remote command.
This is useful for just forwarding ports
(protocol version 2 only).
.It Fl n
Redirects stdin from
.Pa /dev/null
(actually, prevents reading from stdin).
This must be used when
d770 6
a775 7
is run in the background.
A common trick is to use this to run X11 programs on a remote machine.
For example,
.Ic ssh -n shadows.cs.hut.fi emacs &
will start an emacs on shadows.cs.hut.fi, and the X11
connection will be automatically forwarded over an encrypted channel.
The
d777 26
a802 2
program will be put in the background.
(This does not work if
d804 20
a823 20
needs to ask for a password or passphrase; see also the
.Fl f
option.)
.It Fl O Ar ctl_cmd
Control an active connection multiplexing master process.
When the
.Fl O
option is specified, the
.Ar ctl_cmd
argument is interpreted and passed to the master process.
Valid commands are:
.Dq check
(check that the master process is running) and
.Dq exit
(request the master to exit).
.It Fl o Ar option
Can be used to give options in the format used in the configuration file.
This is useful for specifying options for which there is no separate
command-line flag.
For full details of the options listed below, and their possible values, see
d825 6
a830 63
.Pp
.Bl -tag -width Ds -offset indent -compact
.It AddressFamily
.It BatchMode
.It BindAddress
.It ChallengeResponseAuthentication
.It CheckHostIP
.It Cipher
.It Ciphers
.It ClearAllForwardings
.It Compression
.It CompressionLevel
.It ConnectionAttempts
.It ConnectTimeout
.It ControlMaster
.It ControlPath
.It DynamicForward
.It EscapeChar
.It ForwardAgent
.It ForwardX11
.It ForwardX11Trusted
.It GatewayPorts
.It GlobalKnownHostsFile
.It GSSAPIAuthentication
.It GSSAPIDelegateCredentials
.It HashKnownHosts
.It Host
.It HostbasedAuthentication
.It HostKeyAlgorithms
.It HostKeyAlias
.It HostName
.It IdentityFile
.It IdentitiesOnly
.It KbdInteractiveDevices
.It LocalCommand
.It LocalForward
.It LogLevel
.It MACs
.It NoHostAuthenticationForLocalhost
.It NumberOfPasswordPrompts
.It PasswordAuthentication
.It PermitLocalCommand
.It Port
.It PreferredAuthentications
.It Protocol
.It ProxyCommand
.It PubkeyAuthentication
.It RemoteForward
.It RhostsRSAAuthentication
.It RSAAuthentication
.It SendEnv
.It ServerAliveInterval
.It ServerAliveCountMax
.It SmartcardDevice
.It StrictHostKeyChecking
.It TCPKeepAlive
.It Tunnel
.It TunnelDevice
.It UsePrivilegedPort
.It User
.It UserKnownHostsFile
.It VerifyHostKeyDNS
.It XAuthLocation
d832 16
a847 23
.It Fl p Ar port
Port to connect to on the remote host.
This can be specified on a
per-host basis in the configuration file.
.It Fl q
Quiet mode.
Causes all warning and diagnostic messages to be suppressed.
.It Fl R Xo
.Sm off
.Oo Ar bind_address : Oc
.Ar port : host : hostport
.Sm on
.Xc
Specifies that the given port on the remote (server) host is to be
forwarded to the given host and port on the local side.
This works by allocating a socket to listen to
.Ar port
on the remote side, and whenever a connection is made to this port, the
connection is forwarded over the secure channel, and a connection is
made to
.Ar host
port
.Ar hostport
d849 16
d866 8
a873 12
Port forwardings can also be specified in the configuration file.
Privileged ports can be forwarded only when
logging in as root on the remote machine.
IPv6 addresses can be specified by enclosing the address in square braces or
using an alternative syntax:
.Sm off
.Xo
.Op Ar bind_address No /
.Ar host No / Ar port No /
.Ar hostport
.Xc .
.Sm on
d875 6
a880 19
By default, the listening socket on the server will be bound to the loopback
interface only.
This may be overriden by specifying a
.Ar bind_address .
An empty
.Ar bind_address ,
or the address
.Ql * ,
indicates that the remote socket should listen on all interfaces.
Specifying a remote
.Ar bind_address
will only succeed if the server's
.Cm GatewayPorts
option is enabled (see
.Xr sshd_config 5 ) .
.It Fl S Ar ctl_path
Specifies the location of a control socket for connection sharing.
Refer to the description of
.Cm ControlPath
d882 10
a891 20
.Cm ControlMaster
in
.Xr ssh_config 5
for details.
.It Fl s
May be used to request invocation of a subsystem on the remote system.
Subsystems are a feature of the SSH2 protocol which facilitate the use
of SSH as a secure transport for other applications (eg.\&
.Xr sftp 1 ) .
The subsystem is specified as the remote command.
.It Fl T
Disable pseudo-tty allocation.
.It Fl t
Force pseudo-tty allocation.
This can be used to execute arbitrary
screen-based programs on a remote machine, which can be very useful,
e.g., when implementing menu services.
Multiple
.Fl t
options force tty allocation, even if
d893 10
a902 6
has no local tty.
.It Fl V
Display the version number and exit.
.It Fl v
Verbose mode.
Causes
d904 8
a911 23
to print debugging messages about its progress.
This is helpful in
debugging connection, authentication, and configuration problems.
Multiple
.Fl v
options increase the verbosity.
The maximum is 3.
.It Fl w Ar tunnel : Ns Ar tunnel
Requests a
.Xr tun 4
device on the client and server like the
.Cm Tunnel
directive in
.Xr ssh_config 5 .
.It Fl X
Enables X11 forwarding.
This can also be specified on a per-host basis in a configuration file.
.Pp
X11 forwarding should be enabled with caution.
Users with the ability to bypass file permissions on the remote host
(for the user's X authorization database)
can access the local X11 display through the forwarded connection.
An attacker may then be able to perform activities such as keystroke monitoring.
a912 3
For this reason, X11 forwarding is subjected to X11 SECURITY extension
restrictions by default.
Please refer to the
d914 7
a920 19
.Fl Y
option and the
.Cm ForwardX11Trusted
directive in
.Xr ssh_config 5
for more information.
.It Fl x
Disables X11 forwarding.
.It Fl Y
Enables trusted X11 forwarding.
Trusted X11 forwardings are not subjected to the X11 SECURITY extension
controls.
.El
.Sh CONFIGURATION FILES
.Nm
may additionally obtain configuration data from
a per-user configuration file and a system-wide configuration file.
The file format and configuration options are described in
.Xr ssh_config 5 .
@


1.216
log
@- avoid line split in SYNOPSIS
- add args to -w
- kill trailing whitespace
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.215 2005/12/06 22:38:27 reyk Exp $
d307 1
a307 2
The
.Ic ! Ar command
@


1.215
log
@Add support for tun(4) forwarding over OpenSSH, based on an idea and
initial channel code bits by markus@@. This is a simple and easy way to
use OpenSSH for ad hoc virtual private network connections, e.g.
administrative tunnels or secure wireless access. It's based on a new
ssh channel and works similar to the existing TCP forwarding support,
except that it depends on the tun(4) network interface on both ends of
the connection for layer 2 or layer 3 tunneling. This diff also adds
support for LocalCommand in the ssh(1) client.

ok djm@@, markus@@, jmc@@ (manpages), tested and discussed with others
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.214 2005/11/30 11:45:20 jmc Exp $
d80 2
a81 1
.Op Fl w Ar tunnel : tunnel
d84 1
d307 1
a307 1
The 
d882 1
a882 1
.It Fl w
@


1.214
log
@avoid ambiguities in describing TZ;
ok djm@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.213 2005/11/30 11:18:27 jmc Exp $
d80 1
d305 6
d757 1
d764 1
d779 2
d880 7
@


1.213
log
@timezone -> time zone
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.212 2005/09/19 23:31:31 djm Exp $
d978 1
a978 1
The time zone variable is set to indicate the present time zone if it
@


1.212
log
@spelling nit from stevesk@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.211 2005/09/19 15:38:27 jmc Exp $
d978 1
a978 1
The timezone variable is set to indicate the present timezone if it
@


1.211
log
@some more .Bk/.Ek to avoid ugly line split;
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.210 2005/09/19 11:37:34 djm Exp $
d458 1
a458 1
The suported values are
@


1.210
log
@mention ability to specify bind_address for DynamicForward and -D options;
bz#1077 spotted by Haruyama Seigo
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.209 2005/07/06 09:33:05 dtucker Exp $
a45 1
.Bk -words
d57 1
d59 1
d66 1
d68 1
a81 1
.Ek
@


1.209
log
@clarify meaning of ssh -b ; with & ok jmc@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.208 2005/05/23 23:32:46 djm Exp $
d50 6
a55 1
.Op Fl D Ar port
d502 6
a507 1
.It Fl D Ar port
d513 3
a515 1
on the local side, and whenever a connection is made to this port, the
d524 24
@


1.209.2.1
log
@upgrade to OpenSSH 4.3
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.253 2006/01/30 13:37:49 jmc Exp $
d46 1
d50 1
a50 6
.Oo Fl D\ \&
.Sm off
.Oo Ar bind_address : Oc
.Ar port
.Sm on
.Oc
a52 1
.Bk -words
a53 1
.Ek
a59 1
.Bk -words
a60 1
.Ek
a71 2
.Bk -words
.Op Fl w Ar tunnel : Ns Ar tunnel
d82 1
a82 1
X11 connections and arbitrary TCP ports
d93 1
a93 1
depending on the protocol version used (see below).
d98 295
a392 1
it is executed on the remote host instead of a login shell.
d433 1
a433 1
data for forwarded X11 and TCP connections).
d451 1
a451 1
The supported values are
d453 1
a453 1
.Dq blowfish ,
d473 1
a473 1
For protocol version 2,
d477 12
a488 12
The supported ciphers are:
3des-cbc,
aes128-cbc,
aes192-cbc,
aes256-cbc,
aes128-ctr,
aes192-ctr,
aes256-ctr,
arcfour128,
arcfour256,
arcfour,
blowfish-cbc,
d490 6
a495 6
cast128-cbc.
The default is:
.Bd -literal -offset indent
aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,arcfour128,
arcfour256,arcfour,aes192-cbc,aes256-cbc,aes128-ctr,
aes192-ctr,aes256-ctr
d497 1
a497 6
.It Fl D Xo
.Sm off
.Oo Ar bind_address : Oc
.Ar port
.Sm on
.Xc
d503 1
a503 3
on the local side, optionally bound to the specified
.Ar bind_address .
Whenever a connection is made to this port, the
d512 1
a512 25
.Pp
IPv6 addresses can be specified with an alternative syntax:
.Sm off
.Xo
.Op Ar bind_address No /
.Ar port
.Xc
.Sm on
or by enclosing the address in square brackets.
Only the superuser can forward privileged ports.
By default, the local port is bound in accordance with the
.Cm GatewayPorts
setting.
However, an explicit
.Ar bind_address
may be used to bind the connection to a specific address.
The
.Ar bind_address
of
.Dq localhost
indicates that the listening port be bound for local use only, while an
empty address or
.Sq *
indicates that the port should be available from all interfaces.
.It Fl e Ar escape_char
d548 2
a549 1
Specify the device
a552 2
This option is only available if support for smartcard devices
is compiled in (default is no support).
d624 1
a624 8
Multiple
.Fl M
options places
.Nm
into
.Dq master
mode with confirmation required before slave connections are accepted.
Refer to the description of
a711 1
.It LocalCommand
a717 1
.It PermitLocalCommand
a722 1
.It RekeyLimit
a731 2
.It Tunnel
.It TunnelDevice
a830 18
.It Fl w Ar tunnel : Ns Ar tunnel
Requests a
.Xr tun 4
device on the client
(first
.Ar tunnel
arg)
and server
(second
.Ar tunnel
arg).
The devices may be specified by numerical ID or the keyword
.Dq any ,
which uses the next available tunnel device.
See also the
.Cm Tunnel
directive in
.Xr ssh_config 5 .
d858 1
a858 1
.Pp
a863 458
.Pp
.Nm
exits with the exit status of the remote command or with 255
if an error occurred.
.Sh AUTHENTICATION
The OpenSSH SSH client supports SSH protocols 1 and 2.
Protocol 2 is the default, with
.Nm
falling back to protocol 1 if it detects protocol 2 is unsupported.
These settings may be altered using the
.Cm Protocol
option in
.Xr ssh_config 5 ,
or enforced using the
.Fl 1
and
.Fl 2
options (see above).
Both protocols support similar authentication methods,
but protocol 2 is preferred since
it provides additional mechanisms for confidentiality
(the traffic is encrypted using AES, 3DES, Blowfish, CAST128, or Arcfour)
and integrity (hmac-md5, hmac-sha1, hmac-ripemd160).
Protocol 1 lacks a strong mechanism for ensuring the
integrity of the connection.
.Pp
The methods available for authentication are:
host-based authentication,
public key authentication,
challenge-response authentication,
and password authentication.
Authentication methods are tried in the order specified above,
though protocol 2 has a configuration option to change the default order:
.Cm PreferredAuthentications .
.Pp
Host-based authentication works as follows:
If the machine the user logs in from is listed in
.Pa /etc/hosts.equiv
or
.Pa /etc/shosts.equiv
on the remote machine, and the user names are
the same on both sides, or if the files
.Pa ~/.rhosts
or
.Pa ~/.shosts
exist in the user's home directory on the
remote machine and contain a line containing the name of the client
machine and the name of the user on that machine, the user is
considered for login.
Additionally, the server
.Em must
be able to verify the client's
host key (see the description of
.Pa /etc/ssh/ssh_known_hosts
and
.Pa ~/.ssh/known_hosts ,
below)
for login to be permitted.
This authentication method closes security holes due to IP
spoofing, DNS spoofing, and routing spoofing.
[Note to the administrator:
.Pa /etc/hosts.equiv ,
.Pa ~/.rhosts ,
and the rlogin/rsh protocol in general, are inherently insecure and should be
disabled if security is desired.]
.Pp
Public key authentication works as follows:
The scheme is based on public-key cryptography,
using cryptosystems
where encryption and decryption are done using separate keys,
and it is unfeasible to derive the decryption key from the encryption key.
The idea is that each user creates a public/private
key pair for authentication purposes.
The server knows the public key, and only the user knows the private key.
.Nm
implements public key authentication protocol automatically,
using either the RSA or DSA algorithms.
Protocol 1 is restricted to using only RSA keys,
but protocol 2 may use either.
The
.Sx HISTORY
section of
.Xr ssl 8
contains a brief discussion of the two algorithms.
.Pp
The file
.Pa ~/.ssh/authorized_keys
lists the public keys that are permitted for logging in.
When the user logs in, the
.Nm
program tells the server which key pair it would like to use for
authentication.
The client proves that it has access to the private key
and the server checks that the corresponding public key
is authorized to accept the account.
.Pp
The user creates his/her key pair by running
.Xr ssh-keygen 1 .
This stores the private key in
.Pa ~/.ssh/identity
(protocol 1),
.Pa ~/.ssh/id_dsa
(protocol 2 DSA),
or
.Pa ~/.ssh/id_rsa
(protocol 2 RSA)
and stores the public key in
.Pa ~/.ssh/identity.pub
(protocol 1),
.Pa ~/.ssh/id_dsa.pub
(protocol 2 DSA),
or
.Pa ~/.ssh/id_rsa.pub
(protocol 2 RSA)
in the user's home directory.
The user should then copy the public key
to
.Pa ~/.ssh/authorized_keys
in his/her home directory on the remote machine.
The
.Pa authorized_keys
file corresponds to the conventional
.Pa ~/.rhosts
file, and has one key
per line, though the lines can be very long.
After this, the user can log in without giving the password.
.Pp
The most convenient way to use public key authentication may be with an
authentication agent.
See
.Xr ssh-agent 1
for more information.
.Pp
Challenge-response authentication works as follows:
The server sends an arbitrary
.Qq challenge
text, and prompts for a response.
Protocol 2 allows multiple challenges and responses;
protocol 1 is restricted to just one challenge/response.
Examples of challenge-response authentication include
BSD Authentication (see
.Xr login.conf 5 )
and PAM (some non-OpenBSD systems).
.Pp
Finally, if other authentication methods fail,
.Nm
prompts the user for a password.
The password is sent to the remote
host for checking; however, since all communications are encrypted,
the password cannot be seen by someone listening on the network.
.Pp
.Nm
automatically maintains and checks a database containing
identification for all hosts it has ever been used with.
Host keys are stored in
.Pa ~/.ssh/known_hosts
in the user's home directory.
Additionally, the file
.Pa /etc/ssh/ssh_known_hosts
is automatically checked for known hosts.
Any new hosts are automatically added to the user's file.
If a host's identification ever changes,
.Nm
warns about this and disables password authentication to prevent
server spoofing or man-in-the-middle attacks,
which could otherwise be used to circumvent the encryption.
The
.Cm StrictHostKeyChecking
option can be used to control logins to machines whose
host key is not known or has changed.
.Pp
When the user's identity has been accepted by the server, the server
either executes the given command, or logs into the machine and gives
the user a normal shell on the remote machine.
All communication with
the remote command or shell will be automatically encrypted.
.Pp
If a pseudo-terminal has been allocated (normal login session), the
user may use the escape characters noted below.
.Pp
If no pseudo-tty has been allocated,
the session is transparent and can be used to reliably transfer binary data.
On most systems, setting the escape character to
.Dq none
will also make the session transparent even if a tty is used.
.Pp
The session terminates when the command or shell on the remote
machine exits and all X11 and TCP connections have been closed.
.Sh ESCAPE CHARACTERS
When a pseudo-terminal has been requested,
.Nm
supports a number of functions through the use of an escape character.
.Pp
A single tilde character can be sent as
.Ic ~~
or by following the tilde by a character other than those described below.
The escape character must always follow a newline to be interpreted as
special.
The escape character can be changed in configuration files using the
.Cm EscapeChar
configuration directive or on the command line by the
.Fl e
option.
.Pp
The supported escapes (assuming the default
.Ql ~ )
are:
.Bl -tag -width Ds
.It Cm ~.
Disconnect.
.It Cm ~^Z
Background
.Nm .
.It Cm ~#
List forwarded connections.
.It Cm ~&
Background
.Nm
at logout when waiting for forwarded connection / X11 sessions to terminate.
.It Cm ~?
Display a list of escape characters.
.It Cm ~B
Send a BREAK to the remote system
(only useful for SSH protocol version 2 and if the peer supports it).
.It Cm ~C
Open command line.
Currently this allows the addition of port forwardings using the
.Fl L
and
.Fl R
options (see above).
It also allows the cancellation of existing remote port-forwardings
using
.Fl KR Ar hostport .
.Ic !\& Ns Ar command
allows the user to execute a local command if the
.Ic PermitLocalCommand
option is enabled in
.Xr ssh_config 5 .
Basic help is available, using the
.Fl h
option.
.It Cm ~R
Request rekeying of the connection
(only useful for SSH protocol version 2 and if the peer supports it).
.El
.Sh TCP FORWARDING
Forwarding of arbitrary TCP connections over the secure channel can
be specified either on the command line or in a configuration file.
One possible application of TCP forwarding is a secure connection to a
mail server; another is going through firewalls.
.Pp
In the example below, we look at encrypting communication between
an IRC client and server, even though the IRC server does not directly
support encrypted communications.
This works as follows:
the user connects to the remote host using
.Nm ,
specifying a port to be used to forward connections
to the remote server.
After that it is possible to start the service which is to be encrypted
on the client machine,
connecting to the same local port,
and
.Nm
will encrypt and forward the connection.
.Pp
The following example tunnels an IRC session from client machine
.Dq 127.0.0.1
(localhost)
to remote server
.Dq server.example.com :
.Bd -literal -offset 4n
$ ssh -f -L 1234:localhost:6667 server.example.com sleep 10
$ irc -c '#users' -p 1234 pinky 127.0.0.1
.Ed
.Pp
This tunnels a connection to IRC server
.Dq server.example.com ,
joining channel
.Dq #users ,
nickname
.Dq pinky ,
using port 1234.
It doesn't matter which port is used,
as long as it's greater than 1023
(remember, only root can open sockets on privileged ports)
and doesn't conflict with any ports already in use.
The connection is forwarded to port 6667 on the remote server,
since that's the standard port for IRC services.
.Pp
The
.Fl f
option backgrounds
.Nm
and the remote command
.Dq sleep 10
is specified to allow an amount of time
(10 seconds, in the example)
to start the service which is to be tunnelled.
If no connections are made within the time specified,
.Nm
will exit.
.Sh X11 FORWARDING
If the
.Cm ForwardX11
variable is set to
.Dq yes
(or see the description of the
.Fl X ,
.Fl x ,
and
.Fl Y
options above)
and the user is using X11 (the
.Ev DISPLAY
environment variable is set), the connection to the X11 display is
automatically forwarded to the remote side in such a way that any X11
programs started from the shell (or command) will go through the
encrypted channel, and the connection to the real X server will be made
from the local machine.
The user should not manually set
.Ev DISPLAY .
Forwarding of X11 connections can be
configured on the command line or in configuration files.
.Pp
The
.Ev DISPLAY
value set by
.Nm
will point to the server machine, but with a display number greater than zero.
This is normal, and happens because
.Nm
creates a
.Dq proxy
X server on the server machine for forwarding the
connections over the encrypted channel.
.Pp
.Nm
will also automatically set up Xauthority data on the server machine.
For this purpose, it will generate a random authorization cookie,
store it in Xauthority on the server, and verify that any forwarded
connections carry this cookie and replace it by the real cookie when
the connection is opened.
The real authentication cookie is never
sent to the server machine (and no cookies are sent in the plain).
.Pp
If the
.Cm ForwardAgent
variable is set to
.Dq yes
(or see the description of the
.Fl A
and
.Fl a
options above) and
the user is using an authentication agent, the connection to the agent
is automatically forwarded to the remote side.
.Sh VERIFYING HOST KEYS
When connecting to a server for the first time,
a fingerprint of the server's public key is presented to the user
(unless the option
.Cm StrictHostKeyChecking
has been disabled).
Fingerprints can be determined using
.Xr ssh-keygen 1 :
.Pp
.Dl $ ssh-keygen -l -f /etc/ssh/ssh_host_rsa_key
.Pp
If the fingerprint is already known,
it can be matched and verified,
and the key can be accepted.
If the fingerprint is unknown,
an alternative method of verification is available:
SSH fingerprints verified by DNS.
An additional resource record (RR),
SSHFP,
is added to a zonefile
and the connecting client is able to match the fingerprint
with that of the key presented.
.Pp
In this example, we are connecting a client to a server,
.Dq host.example.com .
The SSHFP resource records should first be added to the zonefile for
host.example.com:
.Bd -literal -offset indent
$ ssh-keygen -f /etc/ssh/ssh_host_rsa_key.pub -r host.example.com.
$ ssh-keygen -f /etc/ssh/ssh_host_dsa_key.pub -r host.example.com.
.Ed
.Pp
The output lines will have to be added to the zonefile.
To check that the zone is answering fingerprint queries:
.Pp
.Dl $ dig -t SSHFP host.example.com
.Pp
Finally the client connects:
.Bd -literal -offset indent
$ ssh -o "VerifyHostKeyDNS ask" host.example.com
[...]
Matching host key fingerprint found in DNS.
Are you sure you want to continue connecting (yes/no)?
.Ed
.Pp
See the
.Cm VerifyHostKeyDNS
option in
.Xr ssh_config 5
for more information.
.Sh SSH-BASED VIRTUAL PRIVATE NETWORKS
.Nm
contains support for Virtual Private Network (VPN) tunnelling
using the
.Xr tun 4
network pseudo-device,
allowing two networks to be joined securely.
The
.Xr sshd_config 5
configuration option
.Cm PermitTunnel
controls whether the server supports this,
and at what level (layer 2 or 3 traffic).
.Pp
The following example would connect client network 10.0.50.0/24
with remote network 10.0.99.0/24, provided that the SSH server
running on the gateway to the remote network,
at 192.168.1.15, allows it:
.Bd -literal -offset indent
# ssh -f -w 0:1 192.168.1.15 true
# ifconfig tun0 10.0.50.1 10.0.99.1 netmask 255.255.255.252
.Ed
.Pp
Client access may be more finely tuned via the
.Pa /root/.ssh/authorized_keys
file (see below) and the
.Cm PermitRootLogin
server option.
The following entry would permit connections on the first
.Xr tun 4
device from user
.Dq jane
and on the second device from user
.Dq john ,
if
.Cm PermitRootLogin
is set to
.Dq forced-commands-only :
.Bd -literal -offset 2n
tunnel="1",command="sh /etc/netstart tun1" ssh-rsa ... jane
tunnel="2",command="sh /etc/netstart tun1" ssh-rsa ... john
.Ed
.Pp
Since a SSH-based setup entails a fair amount of overhead,
it may be more suited to temporary setups,
such as for wireless VPNs.
More permanent VPNs are better provided by tools such as
.Xr ipsecctl 8
and
.Xr isakmpd 8 .
d867 1
a867 1
.Bl -tag -width "SSH_ORIGINAL_COMMAND"
d875 3
a877 6
.Dq hostname:n ,
where
.Dq hostname
indicates the host where the shell runs, and
.Sq n
is an integer \*(Ge 1.
d898 1
a898 1
.Nm .
d923 2
a924 3
Identifies the path of a
.Ux Ns -domain
socket used to communicate with the agent.
d928 2
a929 2
four space-separated values: client IP address, client port number,
server IP address, and server port number.
d931 1
a931 1
This variable contains the original command line if a forced command
d940 1
a940 1
This variable is set to indicate the present time zone if it
d953 1
a953 1
to the environment if the file exists and users are allowed to
d960 10
a969 44
.Bl -tag -width Ds -compact
.It ~/.rhosts
This file is used for host-based authentication (see above).
On some machines this file may need to be
world-readable if the user's home directory is on an NFS partition,
because
.Xr sshd 8
reads it as root.
Additionally, this file must be owned by the user,
and must not have write permissions for anyone else.
The recommended
permission for most machines is read/write for the user, and not
accessible by others.
.Pp
.It ~/.shosts
This file is used in exactly the same way as
.Pa .rhosts ,
but allows host-based authentication without permitting login with
rlogin/rsh.
.Pp
.It ~/.ssh/authorized_keys
Lists the public keys (RSA/DSA) that can be used for logging in as this user.
The format of this file is described in the
.Xr sshd 8
manual page.
This file is not highly sensitive, but the recommended
permissions are read/write for the user, and not accessible by others.
.Pp
.It ~/.ssh/config
This is the per-user configuration file.
The file format and configuration options are described in
.Xr ssh_config 5 .
Because of the potential for abuse, this file must have strict permissions:
read/write for the user, and not accessible by others.
.Pp
.It ~/.ssh/environment
Contains additional definitions for environment variables; see
.Sx ENVIRONMENT ,
above.
.Pp
.It ~/.ssh/identity
.It ~/.ssh/id_dsa
.It ~/.ssh/id_rsa
Contains the private key for authentication.
d973 1
d975 1
a975 1
will simply ignore a private key file if it is accessible by others.
d977 1
a977 1
generating the key which will be used to encrypt the
d979 17
a995 5
.Pp
.It ~/.ssh/identity.pub
.It ~/.ssh/id_dsa.pub
.It ~/.ssh/id_rsa.pub
Contains the public key for authentication.
d998 34
d1033 1
a1033 4
.It ~/.ssh/known_hosts
Contains a list of host keys for all hosts the user has logged into
that are not already in the systemwide list of known host keys.
See
d1035 1
a1035 4
for further details of the format of this file.
.Pp
.It ~/.ssh/rc
Commands in this file are executed by
d1037 3
a1039 16
when the user logs in, just before the user's shell (or command) is
started.
See the
.Xr sshd 8
manual page for more information.
.Pp
.It /etc/hosts.equiv
This file is for host-based authentication (see above).
It should only be writable by root.
.Pp
.It /etc/shosts.equiv
This file is used in exactly the same way as
.Pa hosts.equiv ,
but allows host-based authentication without permitting login with
rlogin/rsh.
.Pp
d1044 1
a1044 4
.Pp
.It /etc/ssh/ssh_host_key
.It /etc/ssh/ssh_host_dsa_key
.It /etc/ssh/ssh_host_rsa_key
d1046 7
a1052 2
and are used for host-based authentication.
If protocol version 1 is used,
d1059 3
a1061 2
to access the host keys,
eliminating the requirement that
d1063 1
a1063 1
be setuid root when host-based authentication is used.
d1067 22
d1090 50
a1139 7
.It /etc/ssh/ssh_known_hosts
Systemwide list of known host keys.
This file should be prepared by the
system administrator to contain the public host keys of all machines in the
organization.
It should be world-readable.
See
d1141 2
a1142 3
for further details of the format of this file.
.Pp
.It /etc/ssh/sshrc
d1145 2
a1146 1
when the user logs in, just before the user's shell (or command) is started.
d1150 4
d1155 4
d1160 2
d1167 1
a1167 2
.Xr ssh-keyscan 1 ,
.Xr tun 4 ,
@


1.209.2.2
log
@upgrade to OpenSSH 4.4
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.263 2006/07/11 18:50:48 markus Exp $
d81 1
a81 2
.Oo Fl w Ar local_tun Ns
.Op : Ns Ar remote_tun Oc
a450 1
.It ExitOnForwardFailure
d572 1
a572 1
e.g. when implementing menu services.
d591 2
a592 6
.It Fl w Xo
.Ar local_tun Ns Op : Ns Ar remote_tun
.Xc
Requests
tunnel
device forwarding with the specified
d594 8
a601 5
devices between the client
.Pq Ar local_tun
and the server
.Pq Ar remote_tun .
.Pp
a604 4
If
.Ar remote_tun
is not specified, it defaults to
.Dq any .
d607 1
a607 3
and
.Cm TunnelDevice
directives in
a608 4
If the
.Cm Tunnel
directive is unset, it is set to the default tunnel mode, which is
.Dq point-to-point .
a668 1
GSSAPI-based authentication,
d875 1
a875 3
.Sm off
.Fl KR Oo Ar bind_address : Oc Ar port .
.Sm on
d1028 2
a1029 1
$ ssh-keygen -r host.example.com.
d1078 1
a1078 1
The following entry would permit connections on
d1080 1
a1080 1
device 1 from user
d1082 1
a1082 1
and on tun device 2 from user
d1090 1
a1090 1
tunnel="2",command="sh /etc/netstart tun2" ssh-rsa ... john
d1181 1
a1181 1
was set when the daemon was started (i.e. the daemon passes the value
d1342 9
a1350 53
.%R RFC 4250
.%T "The Secure Shell (SSH) Protocol Assigned Numbers"
.%D 2006
.Re
.Rs
.%R RFC 4251
.%T "The Secure Shell (SSH) Protocol Architecture"
.%D 2006
.Re
.Rs
.%R RFC 4252
.%T "The Secure Shell (SSH) Authentication Protocol"
.%D 2006
.Re
.Rs
.%R RFC 4253
.%T "The Secure Shell (SSH) Transport Layer Protocol"
.%D 2006
.Re
.Rs
.%R RFC 4254
.%T "The Secure Shell (SSH) Connection Protocol"
.%D 2006
.Re
.Rs
.%R RFC 4255
.%T "Using DNS to Securely Publish Secure Shell (SSH) Key Fingerprints"
.%D 2006
.Re
.Rs
.%R RFC 4256
.%T "Generic Message Exchange Authentication for the Secure Shell Protocol (SSH)"
.%D 2006
.Re
.Rs
.%R RFC 4335
.%T "The Secure Shell (SSH) Session Channel Break Extension"
.%D 2006
.Re
.Rs
.%R RFC 4344
.%T "The Secure Shell (SSH) Transport Layer Encryption Modes"
.%D 2006
.Re
.Rs
.%R RFC 4345
.%T "Improved Arcfour Modes for the Secure Shell (SSH) Transport Layer Protocol"
.%D 2006
.Re
.Rs
.%R RFC 4419
.%T "Diffie-Hellman Group Exchange for the Secure Shell (SSH) Transport Layer Protocol"
.%D 2006
@


1.209.2.3
log
@upgrade to OpenSSH 4.5
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.265 2006/10/28 18:08:10 otto Exp $
d1080 3
a1082 6
with remote network 10.0.99.0/24 using a point-to-point connection
from 10.1.1.1 to 10.1.1.2,
provided that the SSH server running on the gateway to the remote network,
at 192.168.1.15, allows it.
.Pp
On the client:
d1085 1
a1085 8
# ifconfig tun0 10.1.1.1 10.1.1.2 netmask 255.255.255.252
# route add 10.0.99.0/24 10.1.1.2
.Ed
.Pp
On the server:
.Bd -literal -offset indent
# ifconfig tun1 10.1.1.2 10.1.1.1 netmask 255.255.255.252
# route add 10.0.50.0/24 10.1.1.1
d1108 1
a1108 1
Since an SSH-based setup entails a fair amount of overhead,
@


1.208
log
@add support for draft-harris-ssh-arcfour-fixes-02 improved arcfour modes;
ok markus@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.207 2005/04/21 06:17:50 djm Exp $
d426 5
a430 2
Specify the interface address to transmit from on machines with multiple
interfaces or aliased addresses.
@


1.207
log
@OpenSSH doesn't ever look at the $HOME environment variable, so don't say
that we do (bz #623); ok deraadt@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.206 2005/04/14 12:30:30 jmc Exp $
d482 2
d490 3
a492 2
  ``aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,arcfour,
    aes192-cbc,aes256-cbc''
@


1.206
log
@arg to -b is an address, not if_name;
ok markus@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.205 2005/03/07 23:41:54 jmc Exp $
d112 1
a112 1
.Pa $HOME/.rhosts
d114 1
a114 1
.Pa $HOME/.shosts
d123 1
a123 1
.Pa $HOME/.ssh/known_hosts
d131 1
a131 1
.Pa $HOME/.rhosts ,
d147 1
a147 1
.Pa $HOME/.ssh/authorized_keys
d168 1
a168 1
.Pa $HOME/.ssh/identity
d170 1
a170 1
.Pa $HOME/.ssh/identity.pub
d175 1
a175 1
.Pa $HOME/.ssh/authorized_keys
d179 1
a179 1
.Pa $HOME/.rhosts
d209 1
a209 1
.Pa $HOME/.ssh/id_dsa
d211 1
a211 1
.Pa $HOME/.ssh/id_rsa ,
d214 1
a214 1
.Pa $HOME/.ssh/authorized_keys
d368 1
a368 1
.Pa $HOME/.ssh/known_hosts
d525 1
a525 1
.Pa $HOME/.ssh/config .
d551 1
a551 1
.Pa $HOME/.ssh/identity
d553 1
a553 1
.Pa $HOME/.ssh/id_rsa
d555 1
a555 1
.Pa $HOME/.ssh/id_dsa
d944 1
a944 1
.Pa $HOME/.ssh/environment ,
d955 1
a955 1
.It Pa $HOME/.ssh/known_hosts
d961 1
a961 1
.It Pa $HOME/.ssh/identity, $HOME/.ssh/id_dsa, $HOME/.ssh/id_rsa
d973 1
a973 1
.It Pa $HOME/.ssh/identity.pub, $HOME/.ssh/id_dsa.pub, $HOME/.ssh/id_rsa.pub
d977 1
a977 1
.Pa $HOME/.ssh/identity.pub
d979 1
a979 1
.Pa $HOME/.ssh/authorized_keys
d983 1
a983 1
.Pa $HOME/.ssh/id_dsa.pub
d985 1
a985 1
.Pa $HOME/.ssh/id_rsa.pub
d987 1
a987 1
.Pa $HOME/.ssh/authorized_keys
d995 1
a995 1
.It Pa $HOME/.ssh/config
d1001 1
a1001 1
.It Pa $HOME/.ssh/authorized_keys
d1061 1
a1061 1
.It Pa $HOME/.rhosts
d1091 1
a1091 1
.Pa $HOME/.ssh/known_hosts .
d1095 2
a1096 2
.Pa $HOME/.ssh/known_hosts .
.It Pa $HOME/.shosts
d1136 1
a1136 1
.It Pa $HOME/.ssh/rc
d1144 1
a1144 1
.It Pa $HOME/.ssh/environment
@


1.205
log
@more macro simplification;
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.204 2005/03/02 11:45:01 jmc Exp $
d426 1
a426 1
Specify the interface to transmit from on machines with multiple
@


1.205.2.1
log
@upgrade to OpenSSH 4.2
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.209 2005/07/06 09:33:05 dtucker Exp $
d112 1
a112 1
.Pa ~/.rhosts
d114 1
a114 1
.Pa ~/.shosts
d123 1
a123 1
.Pa ~/.ssh/known_hosts
d131 1
a131 1
.Pa ~/.rhosts ,
d147 1
a147 1
.Pa ~/.ssh/authorized_keys
d168 1
a168 1
.Pa ~/.ssh/identity
d170 1
a170 1
.Pa ~/.ssh/identity.pub
d175 1
a175 1
.Pa ~/.ssh/authorized_keys
d179 1
a179 1
.Pa ~/.rhosts
d209 1
a209 1
.Pa ~/.ssh/id_dsa
d211 1
a211 1
.Pa ~/.ssh/id_rsa ,
d214 1
a214 1
.Pa ~/.ssh/authorized_keys
d368 1
a368 1
.Pa ~/.ssh/known_hosts
d426 2
a427 5
Use
.Ar bind_address
on the local machine as the source address
of the connection.
Only useful on systems with more than one address.
a481 2
.Dq arcfour128 ,
.Dq arcfour256 ,
d488 2
a489 3
  ``aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,arcfour128,
    arcfour256,arcfour,aes192-cbc,aes256-cbc,aes128-ctr,
    aes192-ctr,aes256-ctr''
d525 1
a525 1
.Pa ~/.ssh/config .
d551 1
a551 1
.Pa ~/.ssh/identity
d553 1
a553 1
.Pa ~/.ssh/id_rsa
d555 1
a555 1
.Pa ~/.ssh/id_dsa
d944 1
a944 1
.Pa ~/.ssh/environment ,
d955 1
a955 1
.It Pa ~/.ssh/known_hosts
d961 1
a961 1
.It Pa ~/.ssh/identity, ~/.ssh/id_dsa, ~/.ssh/id_rsa
d973 1
a973 1
.It Pa ~/.ssh/identity.pub, ~/.ssh/id_dsa.pub, ~/.ssh/id_rsa.pub
d977 1
a977 1
.Pa ~/.ssh/identity.pub
d979 1
a979 1
.Pa ~/.ssh/authorized_keys
d983 1
a983 1
.Pa ~/.ssh/id_dsa.pub
d985 1
a985 1
.Pa ~/.ssh/id_rsa.pub
d987 1
a987 1
.Pa ~/.ssh/authorized_keys
d995 1
a995 1
.It Pa ~/.ssh/config
d1001 1
a1001 1
.It Pa ~/.ssh/authorized_keys
d1061 1
a1061 1
.It Pa ~/.rhosts
d1091 1
a1091 1
.Pa ~/.ssh/known_hosts .
d1095 2
a1096 2
.Pa ~/.ssh/known_hosts .
.It Pa ~/.shosts
d1136 1
a1136 1
.It Pa ~/.ssh/rc
d1144 1
a1144 1
.It Pa ~/.ssh/environment
@


1.205.2.2
log
@upgrade to OpenSSH 4.3
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.253 2006/01/30 13:37:49 jmc Exp $
d46 1
d50 1
a50 6
.Oo Fl D\ \&
.Sm off
.Oo Ar bind_address : Oc
.Ar port
.Sm on
.Oc
a52 1
.Bk -words
a53 1
.Ek
a59 1
.Bk -words
a60 1
.Ek
a71 2
.Bk -words
.Op Fl w Ar tunnel : Ns Ar tunnel
d82 1
a82 1
X11 connections and arbitrary TCP ports
d93 1
a93 1
depending on the protocol version used (see below).
d98 295
a392 1
it is executed on the remote host instead of a login shell.
d433 1
a433 1
data for forwarded X11 and TCP connections).
d451 1
a451 1
The supported values are
d453 1
a453 1
.Dq blowfish ,
d473 1
a473 1
For protocol version 2,
d477 12
a488 12
The supported ciphers are:
3des-cbc,
aes128-cbc,
aes192-cbc,
aes256-cbc,
aes128-ctr,
aes192-ctr,
aes256-ctr,
arcfour128,
arcfour256,
arcfour,
blowfish-cbc,
d490 6
a495 6
cast128-cbc.
The default is:
.Bd -literal -offset indent
aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,arcfour128,
arcfour256,arcfour,aes192-cbc,aes256-cbc,aes128-ctr,
aes192-ctr,aes256-ctr
d497 1
a497 6
.It Fl D Xo
.Sm off
.Oo Ar bind_address : Oc
.Ar port
.Sm on
.Xc
d503 1
a503 3
on the local side, optionally bound to the specified
.Ar bind_address .
Whenever a connection is made to this port, the
d512 1
a512 25
.Pp
IPv6 addresses can be specified with an alternative syntax:
.Sm off
.Xo
.Op Ar bind_address No /
.Ar port
.Xc
.Sm on
or by enclosing the address in square brackets.
Only the superuser can forward privileged ports.
By default, the local port is bound in accordance with the
.Cm GatewayPorts
setting.
However, an explicit
.Ar bind_address
may be used to bind the connection to a specific address.
The
.Ar bind_address
of
.Dq localhost
indicates that the listening port be bound for local use only, while an
empty address or
.Sq *
indicates that the port should be available from all interfaces.
.It Fl e Ar escape_char
d548 2
a549 1
Specify the device
a552 2
This option is only available if support for smartcard devices
is compiled in (default is no support).
d624 1
a624 8
Multiple
.Fl M
options places
.Nm
into
.Dq master
mode with confirmation required before slave connections are accepted.
Refer to the description of
a711 1
.It LocalCommand
a717 1
.It PermitLocalCommand
a722 1
.It RekeyLimit
a731 2
.It Tunnel
.It TunnelDevice
a830 18
.It Fl w Ar tunnel : Ns Ar tunnel
Requests a
.Xr tun 4
device on the client
(first
.Ar tunnel
arg)
and server
(second
.Ar tunnel
arg).
The devices may be specified by numerical ID or the keyword
.Dq any ,
which uses the next available tunnel device.
See also the
.Cm Tunnel
directive in
.Xr ssh_config 5 .
d858 1
a858 1
.Pp
a863 458
.Pp
.Nm
exits with the exit status of the remote command or with 255
if an error occurred.
.Sh AUTHENTICATION
The OpenSSH SSH client supports SSH protocols 1 and 2.
Protocol 2 is the default, with
.Nm
falling back to protocol 1 if it detects protocol 2 is unsupported.
These settings may be altered using the
.Cm Protocol
option in
.Xr ssh_config 5 ,
or enforced using the
.Fl 1
and
.Fl 2
options (see above).
Both protocols support similar authentication methods,
but protocol 2 is preferred since
it provides additional mechanisms for confidentiality
(the traffic is encrypted using AES, 3DES, Blowfish, CAST128, or Arcfour)
and integrity (hmac-md5, hmac-sha1, hmac-ripemd160).
Protocol 1 lacks a strong mechanism for ensuring the
integrity of the connection.
.Pp
The methods available for authentication are:
host-based authentication,
public key authentication,
challenge-response authentication,
and password authentication.
Authentication methods are tried in the order specified above,
though protocol 2 has a configuration option to change the default order:
.Cm PreferredAuthentications .
.Pp
Host-based authentication works as follows:
If the machine the user logs in from is listed in
.Pa /etc/hosts.equiv
or
.Pa /etc/shosts.equiv
on the remote machine, and the user names are
the same on both sides, or if the files
.Pa ~/.rhosts
or
.Pa ~/.shosts
exist in the user's home directory on the
remote machine and contain a line containing the name of the client
machine and the name of the user on that machine, the user is
considered for login.
Additionally, the server
.Em must
be able to verify the client's
host key (see the description of
.Pa /etc/ssh/ssh_known_hosts
and
.Pa ~/.ssh/known_hosts ,
below)
for login to be permitted.
This authentication method closes security holes due to IP
spoofing, DNS spoofing, and routing spoofing.
[Note to the administrator:
.Pa /etc/hosts.equiv ,
.Pa ~/.rhosts ,
and the rlogin/rsh protocol in general, are inherently insecure and should be
disabled if security is desired.]
.Pp
Public key authentication works as follows:
The scheme is based on public-key cryptography,
using cryptosystems
where encryption and decryption are done using separate keys,
and it is unfeasible to derive the decryption key from the encryption key.
The idea is that each user creates a public/private
key pair for authentication purposes.
The server knows the public key, and only the user knows the private key.
.Nm
implements public key authentication protocol automatically,
using either the RSA or DSA algorithms.
Protocol 1 is restricted to using only RSA keys,
but protocol 2 may use either.
The
.Sx HISTORY
section of
.Xr ssl 8
contains a brief discussion of the two algorithms.
.Pp
The file
.Pa ~/.ssh/authorized_keys
lists the public keys that are permitted for logging in.
When the user logs in, the
.Nm
program tells the server which key pair it would like to use for
authentication.
The client proves that it has access to the private key
and the server checks that the corresponding public key
is authorized to accept the account.
.Pp
The user creates his/her key pair by running
.Xr ssh-keygen 1 .
This stores the private key in
.Pa ~/.ssh/identity
(protocol 1),
.Pa ~/.ssh/id_dsa
(protocol 2 DSA),
or
.Pa ~/.ssh/id_rsa
(protocol 2 RSA)
and stores the public key in
.Pa ~/.ssh/identity.pub
(protocol 1),
.Pa ~/.ssh/id_dsa.pub
(protocol 2 DSA),
or
.Pa ~/.ssh/id_rsa.pub
(protocol 2 RSA)
in the user's home directory.
The user should then copy the public key
to
.Pa ~/.ssh/authorized_keys
in his/her home directory on the remote machine.
The
.Pa authorized_keys
file corresponds to the conventional
.Pa ~/.rhosts
file, and has one key
per line, though the lines can be very long.
After this, the user can log in without giving the password.
.Pp
The most convenient way to use public key authentication may be with an
authentication agent.
See
.Xr ssh-agent 1
for more information.
.Pp
Challenge-response authentication works as follows:
The server sends an arbitrary
.Qq challenge
text, and prompts for a response.
Protocol 2 allows multiple challenges and responses;
protocol 1 is restricted to just one challenge/response.
Examples of challenge-response authentication include
BSD Authentication (see
.Xr login.conf 5 )
and PAM (some non-OpenBSD systems).
.Pp
Finally, if other authentication methods fail,
.Nm
prompts the user for a password.
The password is sent to the remote
host for checking; however, since all communications are encrypted,
the password cannot be seen by someone listening on the network.
.Pp
.Nm
automatically maintains and checks a database containing
identification for all hosts it has ever been used with.
Host keys are stored in
.Pa ~/.ssh/known_hosts
in the user's home directory.
Additionally, the file
.Pa /etc/ssh/ssh_known_hosts
is automatically checked for known hosts.
Any new hosts are automatically added to the user's file.
If a host's identification ever changes,
.Nm
warns about this and disables password authentication to prevent
server spoofing or man-in-the-middle attacks,
which could otherwise be used to circumvent the encryption.
The
.Cm StrictHostKeyChecking
option can be used to control logins to machines whose
host key is not known or has changed.
.Pp
When the user's identity has been accepted by the server, the server
either executes the given command, or logs into the machine and gives
the user a normal shell on the remote machine.
All communication with
the remote command or shell will be automatically encrypted.
.Pp
If a pseudo-terminal has been allocated (normal login session), the
user may use the escape characters noted below.
.Pp
If no pseudo-tty has been allocated,
the session is transparent and can be used to reliably transfer binary data.
On most systems, setting the escape character to
.Dq none
will also make the session transparent even if a tty is used.
.Pp
The session terminates when the command or shell on the remote
machine exits and all X11 and TCP connections have been closed.
.Sh ESCAPE CHARACTERS
When a pseudo-terminal has been requested,
.Nm
supports a number of functions through the use of an escape character.
.Pp
A single tilde character can be sent as
.Ic ~~
or by following the tilde by a character other than those described below.
The escape character must always follow a newline to be interpreted as
special.
The escape character can be changed in configuration files using the
.Cm EscapeChar
configuration directive or on the command line by the
.Fl e
option.
.Pp
The supported escapes (assuming the default
.Ql ~ )
are:
.Bl -tag -width Ds
.It Cm ~.
Disconnect.
.It Cm ~^Z
Background
.Nm .
.It Cm ~#
List forwarded connections.
.It Cm ~&
Background
.Nm
at logout when waiting for forwarded connection / X11 sessions to terminate.
.It Cm ~?
Display a list of escape characters.
.It Cm ~B
Send a BREAK to the remote system
(only useful for SSH protocol version 2 and if the peer supports it).
.It Cm ~C
Open command line.
Currently this allows the addition of port forwardings using the
.Fl L
and
.Fl R
options (see above).
It also allows the cancellation of existing remote port-forwardings
using
.Fl KR Ar hostport .
.Ic !\& Ns Ar command
allows the user to execute a local command if the
.Ic PermitLocalCommand
option is enabled in
.Xr ssh_config 5 .
Basic help is available, using the
.Fl h
option.
.It Cm ~R
Request rekeying of the connection
(only useful for SSH protocol version 2 and if the peer supports it).
.El
.Sh TCP FORWARDING
Forwarding of arbitrary TCP connections over the secure channel can
be specified either on the command line or in a configuration file.
One possible application of TCP forwarding is a secure connection to a
mail server; another is going through firewalls.
.Pp
In the example below, we look at encrypting communication between
an IRC client and server, even though the IRC server does not directly
support encrypted communications.
This works as follows:
the user connects to the remote host using
.Nm ,
specifying a port to be used to forward connections
to the remote server.
After that it is possible to start the service which is to be encrypted
on the client machine,
connecting to the same local port,
and
.Nm
will encrypt and forward the connection.
.Pp
The following example tunnels an IRC session from client machine
.Dq 127.0.0.1
(localhost)
to remote server
.Dq server.example.com :
.Bd -literal -offset 4n
$ ssh -f -L 1234:localhost:6667 server.example.com sleep 10
$ irc -c '#users' -p 1234 pinky 127.0.0.1
.Ed
.Pp
This tunnels a connection to IRC server
.Dq server.example.com ,
joining channel
.Dq #users ,
nickname
.Dq pinky ,
using port 1234.
It doesn't matter which port is used,
as long as it's greater than 1023
(remember, only root can open sockets on privileged ports)
and doesn't conflict with any ports already in use.
The connection is forwarded to port 6667 on the remote server,
since that's the standard port for IRC services.
.Pp
The
.Fl f
option backgrounds
.Nm
and the remote command
.Dq sleep 10
is specified to allow an amount of time
(10 seconds, in the example)
to start the service which is to be tunnelled.
If no connections are made within the time specified,
.Nm
will exit.
.Sh X11 FORWARDING
If the
.Cm ForwardX11
variable is set to
.Dq yes
(or see the description of the
.Fl X ,
.Fl x ,
and
.Fl Y
options above)
and the user is using X11 (the
.Ev DISPLAY
environment variable is set), the connection to the X11 display is
automatically forwarded to the remote side in such a way that any X11
programs started from the shell (or command) will go through the
encrypted channel, and the connection to the real X server will be made
from the local machine.
The user should not manually set
.Ev DISPLAY .
Forwarding of X11 connections can be
configured on the command line or in configuration files.
.Pp
The
.Ev DISPLAY
value set by
.Nm
will point to the server machine, but with a display number greater than zero.
This is normal, and happens because
.Nm
creates a
.Dq proxy
X server on the server machine for forwarding the
connections over the encrypted channel.
.Pp
.Nm
will also automatically set up Xauthority data on the server machine.
For this purpose, it will generate a random authorization cookie,
store it in Xauthority on the server, and verify that any forwarded
connections carry this cookie and replace it by the real cookie when
the connection is opened.
The real authentication cookie is never
sent to the server machine (and no cookies are sent in the plain).
.Pp
If the
.Cm ForwardAgent
variable is set to
.Dq yes
(or see the description of the
.Fl A
and
.Fl a
options above) and
the user is using an authentication agent, the connection to the agent
is automatically forwarded to the remote side.
.Sh VERIFYING HOST KEYS
When connecting to a server for the first time,
a fingerprint of the server's public key is presented to the user
(unless the option
.Cm StrictHostKeyChecking
has been disabled).
Fingerprints can be determined using
.Xr ssh-keygen 1 :
.Pp
.Dl $ ssh-keygen -l -f /etc/ssh/ssh_host_rsa_key
.Pp
If the fingerprint is already known,
it can be matched and verified,
and the key can be accepted.
If the fingerprint is unknown,
an alternative method of verification is available:
SSH fingerprints verified by DNS.
An additional resource record (RR),
SSHFP,
is added to a zonefile
and the connecting client is able to match the fingerprint
with that of the key presented.
.Pp
In this example, we are connecting a client to a server,
.Dq host.example.com .
The SSHFP resource records should first be added to the zonefile for
host.example.com:
.Bd -literal -offset indent
$ ssh-keygen -f /etc/ssh/ssh_host_rsa_key.pub -r host.example.com.
$ ssh-keygen -f /etc/ssh/ssh_host_dsa_key.pub -r host.example.com.
.Ed
.Pp
The output lines will have to be added to the zonefile.
To check that the zone is answering fingerprint queries:
.Pp
.Dl $ dig -t SSHFP host.example.com
.Pp
Finally the client connects:
.Bd -literal -offset indent
$ ssh -o "VerifyHostKeyDNS ask" host.example.com
[...]
Matching host key fingerprint found in DNS.
Are you sure you want to continue connecting (yes/no)?
.Ed
.Pp
See the
.Cm VerifyHostKeyDNS
option in
.Xr ssh_config 5
for more information.
.Sh SSH-BASED VIRTUAL PRIVATE NETWORKS
.Nm
contains support for Virtual Private Network (VPN) tunnelling
using the
.Xr tun 4
network pseudo-device,
allowing two networks to be joined securely.
The
.Xr sshd_config 5
configuration option
.Cm PermitTunnel
controls whether the server supports this,
and at what level (layer 2 or 3 traffic).
.Pp
The following example would connect client network 10.0.50.0/24
with remote network 10.0.99.0/24, provided that the SSH server
running on the gateway to the remote network,
at 192.168.1.15, allows it:
.Bd -literal -offset indent
# ssh -f -w 0:1 192.168.1.15 true
# ifconfig tun0 10.0.50.1 10.0.99.1 netmask 255.255.255.252
.Ed
.Pp
Client access may be more finely tuned via the
.Pa /root/.ssh/authorized_keys
file (see below) and the
.Cm PermitRootLogin
server option.
The following entry would permit connections on the first
.Xr tun 4
device from user
.Dq jane
and on the second device from user
.Dq john ,
if
.Cm PermitRootLogin
is set to
.Dq forced-commands-only :
.Bd -literal -offset 2n
tunnel="1",command="sh /etc/netstart tun1" ssh-rsa ... jane
tunnel="2",command="sh /etc/netstart tun1" ssh-rsa ... john
.Ed
.Pp
Since a SSH-based setup entails a fair amount of overhead,
it may be more suited to temporary setups,
such as for wireless VPNs.
More permanent VPNs are better provided by tools such as
.Xr ipsecctl 8
and
.Xr isakmpd 8 .
d867 1
a867 1
.Bl -tag -width "SSH_ORIGINAL_COMMAND"
d875 3
a877 6
.Dq hostname:n ,
where
.Dq hostname
indicates the host where the shell runs, and
.Sq n
is an integer \*(Ge 1.
d898 1
a898 1
.Nm .
d923 2
a924 3
Identifies the path of a
.Ux Ns -domain
socket used to communicate with the agent.
d928 2
a929 2
four space-separated values: client IP address, client port number,
server IP address, and server port number.
d931 1
a931 1
This variable contains the original command line if a forced command
d940 1
a940 1
This variable is set to indicate the present time zone if it
d953 1
a953 1
to the environment if the file exists and users are allowed to
d960 10
a969 44
.Bl -tag -width Ds -compact
.It ~/.rhosts
This file is used for host-based authentication (see above).
On some machines this file may need to be
world-readable if the user's home directory is on an NFS partition,
because
.Xr sshd 8
reads it as root.
Additionally, this file must be owned by the user,
and must not have write permissions for anyone else.
The recommended
permission for most machines is read/write for the user, and not
accessible by others.
.Pp
.It ~/.shosts
This file is used in exactly the same way as
.Pa .rhosts ,
but allows host-based authentication without permitting login with
rlogin/rsh.
.Pp
.It ~/.ssh/authorized_keys
Lists the public keys (RSA/DSA) that can be used for logging in as this user.
The format of this file is described in the
.Xr sshd 8
manual page.
This file is not highly sensitive, but the recommended
permissions are read/write for the user, and not accessible by others.
.Pp
.It ~/.ssh/config
This is the per-user configuration file.
The file format and configuration options are described in
.Xr ssh_config 5 .
Because of the potential for abuse, this file must have strict permissions:
read/write for the user, and not accessible by others.
.Pp
.It ~/.ssh/environment
Contains additional definitions for environment variables; see
.Sx ENVIRONMENT ,
above.
.Pp
.It ~/.ssh/identity
.It ~/.ssh/id_dsa
.It ~/.ssh/id_rsa
Contains the private key for authentication.
d973 1
d975 1
a975 1
will simply ignore a private key file if it is accessible by others.
d977 1
a977 1
generating the key which will be used to encrypt the
d979 17
a995 5
.Pp
.It ~/.ssh/identity.pub
.It ~/.ssh/id_dsa.pub
.It ~/.ssh/id_rsa.pub
Contains the public key for authentication.
d998 34
d1033 1
a1033 4
.It ~/.ssh/known_hosts
Contains a list of host keys for all hosts the user has logged into
that are not already in the systemwide list of known host keys.
See
d1035 1
a1035 4
for further details of the format of this file.
.Pp
.It ~/.ssh/rc
Commands in this file are executed by
d1037 3
a1039 16
when the user logs in, just before the user's shell (or command) is
started.
See the
.Xr sshd 8
manual page for more information.
.Pp
.It /etc/hosts.equiv
This file is for host-based authentication (see above).
It should only be writable by root.
.Pp
.It /etc/shosts.equiv
This file is used in exactly the same way as
.Pa hosts.equiv ,
but allows host-based authentication without permitting login with
rlogin/rsh.
.Pp
d1044 1
a1044 4
.Pp
.It /etc/ssh/ssh_host_key
.It /etc/ssh/ssh_host_dsa_key
.It /etc/ssh/ssh_host_rsa_key
d1046 7
a1052 2
and are used for host-based authentication.
If protocol version 1 is used,
d1059 3
a1061 2
to access the host keys,
eliminating the requirement that
d1063 1
a1063 1
be setuid root when host-based authentication is used.
d1067 22
d1090 50
a1139 7
.It /etc/ssh/ssh_known_hosts
Systemwide list of known host keys.
This file should be prepared by the
system administrator to contain the public host keys of all machines in the
organization.
It should be world-readable.
See
d1141 2
a1142 3
for further details of the format of this file.
.Pp
.It /etc/ssh/sshrc
d1145 2
a1146 1
when the user logs in, just before the user's shell (or command) is started.
d1150 4
d1155 4
d1160 2
d1167 1
a1167 2
.Xr ssh-keyscan 1 ,
.Xr tun 4 ,
@


1.204
log
@missing word;
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.203 2005/03/02 02:21:07 djm Exp $
d588 1
a588 1
.Oo Ar bind_address No / Oc
d764 1
a764 1
.Oo Ar bind_address No / Oc
@


1.203
log
@bz#987: mention ForwardX11Trusted in ssh.1,
reported by andrew.benham AT thus.net; ok deraadt@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.202 2005/03/01 14:47:58 jmc Exp $
d835 1
a835 1
For this reason, X11 forwarding is subjected X11 SECURITY extension
@


1.202
log
@remove some unneccesary macros;
do not mark up punctuation;
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.201 2005/03/01 10:40:27 djm Exp $
d834 11
d849 2
@


1.201
log
@add support for hashing host names and addresses added to known_hosts files,
to improve privacy of which hosts user have been visiting; ok markus@@ deraadt@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.200 2005/03/01 10:09:52 djm Exp $
d46 1
a49 1
.Bk -words
d54 1
a54 1
.Oo Fl L Xo
d57 1
a57 3
.Ar port :
.Ar host :
.Ar hostport
a58 1
.Xc
a63 1
.Bk -words
d65 1
a65 2
.Ek
.Oo Fl R Xo
d68 1
a68 3
.Ar port :
.Ar host :
.Ar hostport
a69 1
.Xc
d74 1
d588 1
a588 1
.Oo Ar bind_address / Oc
d605 3
a607 3
indicates that the listening port be bound for local use only, while an 
empty address or 
.Dq *
d762 1
d764 4
a767 3
.Sm off
.Oo Ar bind_address / Oc
.Ar host/port/hostport
a768 1
.Xc .
d774 2
a775 2
An empty 
.Ar bind_address , 
d777 1
a777 1
.Ql *
d781 2
a782 2
will only succeed if the server's 
.Cm GatewayPorts 
d784 1
a784 1
.Xr sshd_config 5 ).
@


1.200
log
@bz#413: allow optional specification of bind address for port forwardings.
Patch originally by Dan Astorian, but worked on by several people
Adds GatewayPorts=clientspecified option on server to allow remote forwards
to bind to client-specified ports.

ok markus@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.199 2004/11/07 17:42:36 jmc Exp $
d704 1
@


1.199
log
@options sort, and whitespace;
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.198 2004/11/07 00:01:46 djm Exp $
d56 1
a62 1
.Ek
d72 1
d574 1
d582 3
a584 1
on the local side, and whenever a connection is made to this port, the
a591 1
Only root can forward privileged ports.
d595 1
d597 1
a597 1
.Ar hostport .
d600 16
d747 1
d762 1
d766 3
a768 1
IPv6 addresses can be specified with an alternative syntax:
d770 2
a771 4
.Xo
.Ar port No / Ar host No /
.Ar hostport .
.Xc
d773 17
@


1.198
log
@add basic control of a running multiplex master connection; including the
ability to check its status and request it to exit; ok markus@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.197 2004/10/07 10:10:24 djm Exp $
a616 12
.It Fl O Ar ctl_cmd
Control an active connection multiplexing master process.
When the
.Fl O
option is specified, the 
.Ar ctl_cmd
argument is interpreted and passed to the master process.
Valid commands are:
.Dq check
(check that the master process is running) and 
.Dq exit
(request the master to exit).
d641 12
@


1.197
log
@document KbdInteractiveDevices; ok markus@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.196 2004/08/30 21:22:49 jmc Exp $
d65 1
d78 1
a78 1
.Op Fl S Ar ctl
d617 12
d751 1
a751 1
.It Fl S Ar ctl
@


1.196
log
@.Xsession -> .xsession;
originally from a pr from f at obiit dot org, but missed by myself;

ok markus@@ matthieu@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.195 2004/08/26 16:00:55 markus Exp $
d678 1
@


1.196.2.1
log
@upgrade to OpenSSH 4.0
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.205 2005/03/07 23:41:54 jmc Exp $
a45 1
.Bk -words
d49 1
d54 1
a54 1
.Oo Fl L\ \&
d56 3
a58 2
.Oo Ar bind_address : Oc
.Ar port : host : hostport
d60 1
d62 1
a64 1
.Op Fl O Ar ctl_cmd
d66 1
d68 2
a69 1
.Oo Fl R\ \&
d71 3
a73 2
.Oo Ar bind_address : Oc
.Ar port : host : hostport
d75 1
d77 1
a77 1
.Op Fl S Ar ctl_path
a79 1
.Ek
a571 1
.Oo Ar bind_address : Oc
d579 1
a579 3
on the local side, optionally bound to the specified
.Ar bind_address .
Whenever a connection is made to this port, the
d587 1
a590 1
.Op Ar bind_address No /
d592 1
a592 1
.Ar hostport
a594 16
or by enclosing the address in square brackets.
Only the superuser can forward privileged ports.
By default, the local port is bound in accordance with the
.Cm GatewayPorts
setting.
However, an explicit
.Ar bind_address
may be used to bind the connection to a specific address.
The
.Ar bind_address
of
.Dq localhost
indicates that the listening port be bound for local use only, while an
empty address or
.Sq *
indicates that the port should be available from all interfaces.
a639 12
.It Fl O Ar ctl_cmd
Control an active connection multiplexing master process.
When the
.Fl O
option is specified, the
.Ar ctl_cmd
argument is interpreted and passed to the master process.
Valid commands are:
.Dq check
(check that the master process is running) and
.Dq exit
(request the master to exit).
a670 1
.It HashKnownHosts
a677 1
.It KbdInteractiveDevices
a712 1
.Oo Ar bind_address : Oc
a726 1
.Pp
d730 1
a730 2
IPv6 addresses can be specified by enclosing the address in square braces or
using an alternative syntax:
d733 3
a735 4
.Op Ar bind_address No /
.Ar host No / Ar port No /
.Ar hostport
.Xc .
d737 1
a737 17
.Pp
By default, the listening socket on the server will be bound to the loopback
interface only.
This may be overriden by specifying a
.Ar bind_address .
An empty
.Ar bind_address ,
or the address
.Ql * ,
indicates that the remote socket should listen on all interfaces.
Specifying a remote
.Ar bind_address
will only succeed if the server's
.Cm GatewayPorts
option is enabled (see
.Xr sshd_config 5 ) .
.It Fl S Ar ctl_path
a785 11
.Pp
For this reason, X11 forwarding is subjected to X11 SECURITY extension
restrictions by default.
Please refer to the
.Nm
.Fl Y
option and the
.Cm ForwardX11Trusted
directive in
.Xr ssh_config 5
for more information.
a789 2
Trusted X11 forwardings are not subjected to the X11 SECURITY extension
controls.
@


1.196.2.2
log
@upgrade to OpenSSH 4.2
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.209 2005/07/06 09:33:05 dtucker Exp $
d112 1
a112 1
.Pa ~/.rhosts
d114 1
a114 1
.Pa ~/.shosts
d123 1
a123 1
.Pa ~/.ssh/known_hosts
d131 1
a131 1
.Pa ~/.rhosts ,
d147 1
a147 1
.Pa ~/.ssh/authorized_keys
d168 1
a168 1
.Pa ~/.ssh/identity
d170 1
a170 1
.Pa ~/.ssh/identity.pub
d175 1
a175 1
.Pa ~/.ssh/authorized_keys
d179 1
a179 1
.Pa ~/.rhosts
d209 1
a209 1
.Pa ~/.ssh/id_dsa
d211 1
a211 1
.Pa ~/.ssh/id_rsa ,
d214 1
a214 1
.Pa ~/.ssh/authorized_keys
d368 1
a368 1
.Pa ~/.ssh/known_hosts
d426 2
a427 5
Use
.Ar bind_address
on the local machine as the source address
of the connection.
Only useful on systems with more than one address.
a481 2
.Dq arcfour128 ,
.Dq arcfour256 ,
d488 2
a489 3
  ``aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,arcfour128,
    arcfour256,arcfour,aes192-cbc,aes256-cbc,aes128-ctr,
    aes192-ctr,aes256-ctr''
d525 1
a525 1
.Pa ~/.ssh/config .
d551 1
a551 1
.Pa ~/.ssh/identity
d553 1
a553 1
.Pa ~/.ssh/id_rsa
d555 1
a555 1
.Pa ~/.ssh/id_dsa
d944 1
a944 1
.Pa ~/.ssh/environment ,
d955 1
a955 1
.It Pa ~/.ssh/known_hosts
d961 1
a961 1
.It Pa ~/.ssh/identity, ~/.ssh/id_dsa, ~/.ssh/id_rsa
d973 1
a973 1
.It Pa ~/.ssh/identity.pub, ~/.ssh/id_dsa.pub, ~/.ssh/id_rsa.pub
d977 1
a977 1
.Pa ~/.ssh/identity.pub
d979 1
a979 1
.Pa ~/.ssh/authorized_keys
d983 1
a983 1
.Pa ~/.ssh/id_dsa.pub
d985 1
a985 1
.Pa ~/.ssh/id_rsa.pub
d987 1
a987 1
.Pa ~/.ssh/authorized_keys
d995 1
a995 1
.It Pa ~/.ssh/config
d1001 1
a1001 1
.It Pa ~/.ssh/authorized_keys
d1061 1
a1061 1
.It Pa ~/.rhosts
d1091 1
a1091 1
.Pa ~/.ssh/known_hosts .
d1095 2
a1096 2
.Pa ~/.ssh/known_hosts .
.It Pa ~/.shosts
d1136 1
a1136 1
.It Pa ~/.ssh/rc
d1144 1
a1144 1
.It Pa ~/.ssh/environment
@


1.195
log
@get rid of references to rhosts authentication; with jmc@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.194 2004/08/12 21:41:13 jakob Exp $
d849 1
a849 1
.Pa .Xsession
@


1.194
log
@improve SSHFP documentation; ok deraadt@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.193 2004/06/26 09:03:21 jmc Exp $
d106 6
a111 1
First, if the machine the user logs in from is listed in
d116 2
a117 3
the same on both sides, the user is immediately permitted to log in.
Second, if
.Pa .rhosts
d119 3
a121 3
.Pa .shosts
exists in the user's home directory on the
remote machine and contains a line containing the name of the client
d123 2
a124 16
permitted to log in.
This form of authentication alone is normally not
allowed by the server because it is not secure.
.Pp
The second authentication method is the
.Em rhosts
or
.Em hosts.equiv
method combined with RSA-based host authentication.
It means that if the login would be permitted by
.Pa $HOME/.rhosts ,
.Pa $HOME/.shosts ,
.Pa /etc/hosts.equiv ,
or
.Pa /etc/shosts.equiv ,
and if additionally the server can verify the client's
d140 1
a140 1
As a third authentication method,
a187 3
RSA authentication is much more secure than
.Em rhosts
authentication.
d1002 3
a1004 1
.Em rhosts
d1023 1
a1023 1
Note that by default
d1025 2
a1026 4
will be installed so that it requires successful RSA host
authentication before permitting
.Em rhosts
authentication.
d1039 5
a1043 3
having this file is to be able to use rhosts authentication with
.Nm
without permitting login with
d1049 3
a1051 1
.Em rhosts
d1060 1
a1060 2
Additionally, successful RSA host authentication is normally
required.
@


1.193
log
@- remove double word
- rearrange .Bk to keep SYNOPSIS nice
- -M before -m in options description
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.192 2004/06/18 10:55:43 markus Exp $
d402 9
@


1.192
log
@trim synopsis for -S, allow -S and -oControlMaster, -MM means 'ask'; ok djm
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.191 2004/06/17 23:56:57 djm Exp $
d49 1
a53 1
.Bk -words
a601 7
.It Fl m Ar mac_spec
Additionally, for protocol version 2 a comma-separated list of MAC
(message authentication code) algorithms can
be specified in order of preference.
See the
.Cm MACs
keyword for more information.
d613 7
d742 1
a742 1
Specifies the location of a control socket for for connection sharing.
@


1.191
log
@sync usage() and SYNPOSIS with connection sharing changes
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.190 2004/06/13 15:03:02 djm Exp $
d77 1
a77 1
.Op Fl S Ar ctl_path
d741 1
a741 1
.It Fl S Ar ctl_path
@


1.190
log
@implement session multiplexing in the client (the server has supported this
since 2.0); ok markus@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.189 2004/06/13 14:01:42 dtucker Exp $
d46 1
a46 1
.Op Fl 1246AaCfgkMNnqSsTtVvXxY
d77 1
d741 2
a742 4
.It Fl S
Places the
.Nm
client into slave mode for connection sharing.
d744 2
@


1.189
log
@List supported ciphers in man pages, tidy up ssh -c;
"looks fine" jmc@@, ok markus@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.188 2004/05/22 16:01:05 jmc Exp $
d46 1
a46 1
.Op Fl 1246AaCfgkNnqsTtVvXxY
d608 11
d663 2
d740 9
@


1.188
log
@kill whitespace at eol;
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.187 2004/05/22 06:32:12 djm Exp $
d244 2
a245 2
(the traffic is encrypted using 3DES, Blowfish, CAST128 or Arcfour)
and integrity (hmac-md5, hmac-sha1).
d452 9
a460 2
.It Fl c Ar blowfish | 3des | des
Selects the cipher to use for encrypting the session.
d462 1
a462 1
is used by default.
a463 2
.Ar 3des
(triple-des) is an encrypt-decrypt-encrypt triple with three different keys.
d475 24
a498 6
.It Fl c Ar cipher_spec
Additionally, for protocol version 2 a comma-separated list of ciphers can
be specified in order of preference.
See
.Cm Ciphers
for more information.
@


1.187
log
@use '-h' for help in ~C commandline instead of '-?'; inspired by jmc@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.186 2004/05/21 11:33:11 djm Exp $
d311 1
a311 1
It also allows the cancellation of existing remote port-forwardings 
@


1.186
log
@bz #756: add support for the cancel-tcpip-forward request for the server and
the client (through the ~C commandline). reported by z3p AT twistedmatrix.com;
ok markus@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.185 2004/05/02 11:57:52 dtucker Exp $
d314 2
a315 2
Basic help is available, using the 
.Fl ?
@


1.185
log
@ConnectionTimeout -> ConnectTimeout, from m.a.ellis at ncl.ac.uk via Debian.
ok djm@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.184 2004/04/28 07:13:42 jmc Exp $
d305 2
a306 1
Open command line (only useful for adding port forwardings using the
d310 7
a316 1
options).
@


1.184
log
@add SendEnv to -o list;
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.183 2004/04/19 13:02:40 djm Exp $
d621 1
a621 1
.It ConnectionTimeout
@


1.183
log
@document strict permission checks on ~/.ssh/config; prompted by, with & ok jmc@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.182 2004/03/05 10:53:58 markus Exp $
d652 1
@


1.182
log
@add IdentitiesOnly; ok djm@@, pb@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.181 2003/12/16 15:49:51 markus Exp $
d888 2
@


1.182.2.1
log
@upgrade to OpenSSH 3.9
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.194 2004/08/12 21:41:13 jakob Exp $
d46 1
a46 1
.Op Fl 1246AaCfgkMNnqsTtVvXxY
a48 1
.Bk -words
d53 1
a76 1
.Op Fl S Ar ctl
d244 2
a245 2
(the traffic is encrypted using AES, 3DES, Blowfish, CAST128 or Arcfour)
and integrity (hmac-md5, hmac-sha1, hmac-ripemd160).
d305 1
a305 2
Open command line.
Currently this allows the addition of port forwardings using the
d309 1
a309 7
options (see below).
It also allows the cancellation of existing remote port-forwardings
using
.Fl KR Ar hostport .
Basic help is available, using the
.Fl h
option.
a394 9
.Nm
can be configured to verify host identification using fingerprint resource
records (SSHFP) published in DNS.
The
.Cm VerifyHostKeyDNS
option can be used to control how DNS lookups are performed.
SSHFP resource records can be generated using
.Xr ssh-keygen 1 .
.Pp
d445 5
a449 9
.It Fl c Ar cipher_spec
Selects the cipher specification for encrypting the session.
.Pp
Protocol version 1 allows specification of a single cipher.
The suported values are
.Dq 3des ,
.Dq blowfish
and
.Dq des .
a451 1
It is believed to be secure.
d463 6
a468 24
The default is
.Dq 3des .
.Pp
For protocol version 2
.Ar cipher_spec
is a comma-separated list of ciphers
listed in order of preference.
The supported ciphers are
.Dq 3des-cbc ,
.Dq aes128-cbc ,
.Dq aes192-cbc ,
.Dq aes256-cbc ,
.Dq aes128-ctr ,
.Dq aes192-ctr ,
.Dq aes256-ctr ,
.Dq arcfour ,
.Dq blowfish-cbc ,
and
.Dq cast128-cbc .
The default is
.Bd -literal
  ``aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,arcfour,
    aes192-cbc,aes256-cbc''
.Ed
a570 11
.It Fl M
Places the
.Nm
client into
.Dq master
mode for connection sharing.
Refer to the description of
.Cm ControlMaster
in
.Xr ssh_config 5
for details.
d621 1
a621 3
.It ConnectTimeout
.It ControlMaster
.It ControlPath
a651 1
.It SendEnv
a695 9
.It Fl S Ar ctl
Specifies the location of a control socket for connection sharing.
Refer to the description of
.Cm ControlPath
and
.Cm ControlMaster
in
.Xr ssh_config 5
for details.
a887 2
Because of the potential for abuse, this file must have strict permissions:
read/write for the user, and not accessible by others.
@


1.182.2.2
log
@upgrade to OpenSSH 4.0
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.205 2005/03/07 23:41:54 jmc Exp $
a45 1
.Bk -words
d49 1
d54 1
a54 1
.Oo Fl L\ \&
d56 3
a58 2
.Oo Ar bind_address : Oc
.Ar port : host : hostport
d60 1
d62 1
a64 1
.Op Fl O Ar ctl_cmd
d66 1
d68 2
a69 1
.Oo Fl R\ \&
d71 3
a73 2
.Oo Ar bind_address : Oc
.Ar port : host : hostport
d75 1
d77 1
a77 1
.Op Fl S Ar ctl_path
a79 1
.Ek
d106 1
a106 6
The first authentication method is the
.Em rhosts
or
.Em hosts.equiv
method combined with RSA-based host authentication.
If the machine the user logs in from is listed in
d111 3
a113 2
the same on both sides, or if the files
.Pa $HOME/.rhosts
d115 3
a117 3
.Pa $HOME/.shosts
exist in the user's home directory on the
remote machine and contain a line containing the name of the client
d119 16
a134 2
considered for log in.
Additionally, if the server can verify the client's
d150 1
a150 1
As a second authentication method,
d198 3
a584 1
.Oo Ar bind_address : Oc
d592 1
a592 3
on the local side, optionally bound to the specified
.Ar bind_address .
Whenever a connection is made to this port, the
d600 1
a603 1
.Op Ar bind_address No /
d605 1
a605 1
.Ar hostport
a607 16
or by enclosing the address in square brackets.
Only the superuser can forward privileged ports.
By default, the local port is bound in accordance with the
.Cm GatewayPorts
setting.
However, an explicit
.Ar bind_address
may be used to bind the connection to a specific address.
The
.Ar bind_address
of
.Dq localhost
indicates that the listening port be bound for local use only, while an
empty address or
.Sq *
indicates that the port should be available from all interfaces.
a652 12
.It Fl O Ar ctl_cmd
Control an active connection multiplexing master process.
When the
.Fl O
option is specified, the
.Ar ctl_cmd
argument is interpreted and passed to the master process.
Valid commands are:
.Dq check
(check that the master process is running) and
.Dq exit
(request the master to exit).
a683 1
.It HashKnownHosts
a690 1
.It KbdInteractiveDevices
a725 1
.Oo Ar bind_address : Oc
a739 1
.Pp
d743 1
a743 2
IPv6 addresses can be specified by enclosing the address in square braces or
using an alternative syntax:
d746 3
a748 4
.Op Ar bind_address No /
.Ar host No / Ar port No /
.Ar hostport
.Xc .
d750 1
a750 17
.Pp
By default, the listening socket on the server will be bound to the loopback
interface only.
This may be overriden by specifying a
.Ar bind_address .
An empty
.Ar bind_address ,
or the address
.Ql * ,
indicates that the remote socket should listen on all interfaces.
Specifying a remote
.Ar bind_address
will only succeed if the server's
.Cm GatewayPorts
option is enabled (see
.Xr sshd_config 5 ) .
.It Fl S Ar ctl_path
a798 11
.Pp
For this reason, X11 forwarding is subjected to X11 SECURITY extension
restrictions by default.
Please refer to the
.Nm
.Fl Y
option and the
.Cm ForwardX11Trusted
directive in
.Xr ssh_config 5
for more information.
a802 2
Trusted X11 forwardings are not subjected to the X11 SECURITY extension
controls.
d862 1
a862 1
.Pa .xsession
d1015 1
a1015 3
.Cm RhostsRSAAuthentication
and
.Cm HostbasedAuthentication
d1034 1
a1034 1
Note that
d1036 4
a1039 2
allows authentication only in combination with client host key
authentication before permitting log in.
d1052 3
a1054 5
having this file is to be able to use
.Cm RhostsRSAAuthentication
and
.Cm HostbasedAuthentication
authentication without permitting login with
d1060 1
a1060 3
.Cm RhostsRSAAuthentication
and
.Cm HostbasedAuthentication
d1069 2
a1070 1
Additionally, successful client host key authentication is required.
@


1.181
log
@application layer keep alive (ServerAliveInterval ServerAliveCountMax)
for ssh(1), similar to the sshd(8) option; ok beck@@; with help from
jmc and dtucker@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.180 2003/12/09 21:53:37 markus Exp $
d637 1
@


1.180
log
@rename keepalive to tcpkeepalive; the old name causes too much
confusion; ok djm, dtucker; with help from jmc@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.179 2003/11/24 00:16:35 dtucker Exp $
d651 2
@


1.179
log
@Make ssh -k mean GSSAPIDelegateCredentials=no. Suggestion & ok markus@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.178 2003/10/11 08:24:08 markus Exp $
a636 1
.It KeepAlive
d653 1
@


1.178
log
@remote x11 clients are now untrusted by default, uses xauth(8) to generate
untrusted cookies; ForwardX11Trusted=yes restores old behaviour.
ok deraadt; feedback and ok djm/fries
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.177 2003/10/08 08:27:36 jmc Exp $
d542 1
a542 2
Disables forwarding of Kerberos tickets.
This may also be specified on a per-host basis in the configuration file.
@


1.177
log
@scp and sftp: add options list and sort options. options list requested
by deraadt@@
sshd: use same format as ssh
ssh: remove wrong option from list
sftp-server: Subsystem is documented in ssh_config(5), not sshd(8)

ok deraadt@@ markus@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.176 2003/09/29 11:40:51 jmc Exp $
d46 1
a46 1
.Op Fl 1246AaCfgkNnqsTtVvXx
d627 1
d736 2
@


1.176
log
@- add list of options to -o and .Xr ssh_config(5)
- some other cleanup

requested by deraadt@@;
ok deraadt@@ markus@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.175 2003/07/22 13:35:22 markus Exp $
a623 1
.It EnableSSHKeysign
@


1.175
log
@remove (already disabled) KRB4/AFS support, re-enable -k in ssh(1);
test+ok henning@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.174 2003/07/02 14:51:16 markus Exp $
d46 1
a46 7
.Op Fl l Ar login_name
.Ar hostname | user@@hostname
.Op Ar command
.Pp
.Nm ssh
.Bk -words
.Op Fl afgknqstvxACNTVX1246
d49 1
d51 1
d53 1
a53 5
.Op Fl l Ar login_name
.Op Fl m Ar mac_spec
.Op Fl o Ar option
.Op Fl p Ar port
.Op Fl F Ar configfile
d63 3
d67 2
d77 1
a77 2
.Op Fl D Ar port
.Ar hostname | user@@hostname
a78 1
.Ek
d83 2
a84 2
It is intended to replace
rlogin and rsh, and provide secure encrypted communications between
d86 2
a87 2
X11 connections and
arbitrary TCP/IP ports can also be forwarded over the secure channel.
d91 4
a94 1
.Ar hostname .
d97 1
a97 1
depending on the protocol version used:
d99 5
a104 1
.Pp
d112 1
a112 1
.Pa \&.rhosts
d114 1
a114 1
.Pa \&.shosts
d123 1
a123 1
.Pa rhosts
d125 1
a125 1
.Pa hosts.equiv
d140 1
a140 1
section), only then login is permitted.
d159 1
d162 1
a162 2
lists the public keys that are permitted for logging
in.
d167 2
a168 2
The server checks if this key is permitted, and if
so, sends the user (actually the
d172 4
a175 5
The challenge can only be
decrypted using the proper private key.
The user's client then decrypts the
challenge using the private key, proving that he/she knows the private
key but without disclosing it to the server.
d183 1
a183 1
and the public key in
d197 3
a199 2
RSA authentication is much
more secure than rhosts authentication.
a212 1
.Pp
d214 1
a214 2
.Pp
When a user connects using protocol version 2
d219 2
a220 2
if this method fails public key authentication is attempted,
and finally if this method fails keyboard-interactive and
d236 2
a237 2
If public key authentication fails or is not available a password
can be sent encrypted to the remote host for proving the user's identity.
a247 1
.Pp
a248 1
.Pp
d258 2
a259 3
If no pseudo tty has been allocated, the
session is transparent and can be used to reliably transfer binary
data.
d266 1
a266 2
The exit status of the remote program is returned as the exit status
of
a267 1
.Pp
d269 3
a271 3
.Pp
When a pseudo terminal has been requested, ssh supports a number of functions
through the use of an escape character.
d289 1
a289 1
Disconnect
d291 2
a292 1
Background ssh
d294 1
a294 1
List forwarded connections
d296 3
a298 2
Background ssh at logout when waiting for forwarded connection / X11 sessions
to terminate
d300 1
a300 1
Display a list of escape characters
d302 2
a303 2
Send a BREAK to the remote system (only useful for SSH protocol version 2
and if the peer supports it)
d309 1
a309 1
options)
d311 2
a312 2
Request rekeying of the connection (only useful for SSH protocol version 2
and if the peer supports it)
a313 1
.Pp
a314 1
.Pp
d319 1
a319 1
(or, see the description of the
d340 1
a340 2
will point to the server machine, but with a display number greater
than zero.
d361 1
a361 1
(or, see the description of the
a372 1
.Pp
a373 1
.Pp
d384 1
a384 2
If a host's identification
ever changes,
d388 2
a389 3
Another purpose of
this mechanism is to prevent man-in-the-middle attacks which could
otherwise be used to circumvent the encryption.
d397 16
a412 2
.It Fl a
Disables forwarding of the authentication agent connection.
d424 2
d429 17
a445 1
.It Fl c Ar blowfish|3des|des
d453 1
a453 1
is a fast block cipher, it appears very secure and is much faster than
d469 16
a484 1
.It Fl e Ar ch|^ch|none
d490 3
a492 3
closes the connection, followed
by control-Z suspends the connection, and followed by itself sends the
escape character once.
d496 8
d519 6
a540 6
.It Fl I Ar smartcard_device
Specifies which smartcard device to use.
The argument is the device
.Nm
should use to communicate with a smartcard used for storing the user's
private RSA key.
d544 25
d579 4
a602 4
.It Fl N
Do not execute a remote command.
This is useful for just forwarding ports
(protocol version 2 only).
d607 54
d668 26
d697 2
a698 1
of SSH as a secure transport for other applications (eg. sftp).
d700 2
d712 2
a713 2
.It Fl T
Disable pseudo-tty allocation.
a724 4
.It Fl V
Display the version number and exit.
.It Fl x
Disables X11 forwarding.
d734 2
a735 88
.It Fl C
Requests compression of all data (including stdin, stdout, stderr, and
data for forwarded X11 and TCP/IP connections).
The compression algorithm is the same used by
.Xr gzip 1 ,
and the
.Dq level
can be controlled by the
.Cm CompressionLevel
option for protocol version 1.
Compression is desirable on modem lines and other
slow connections, but will only slow down things on fast networks.
The default value can be set on a host-by-host basis in the
configuration files; see the
.Cm Compression
option.
.It Fl F Ar configfile
Specifies an alternative per-user configuration file.
If a configuration file is given on the command line,
the system-wide configuration file
.Pq Pa /etc/ssh/ssh_config
will be ignored.
The default for the per-user configuration file is
.Pa $HOME/.ssh/config .
.It Fl L Ar port:host:hostport
Specifies that the given port on the local (client) host is to be
forwarded to the given host and port on the remote side.
This works by allocating a socket to listen to
.Ar port
on the local side, and whenever a connection is made to this port, the
connection is forwarded over the secure channel, and a connection is
made to
.Ar host
port
.Ar hostport
from the remote machine.
Port forwardings can also be specified in the configuration file.
Only root can forward privileged ports.
IPv6 addresses can be specified with an alternative syntax:
.Ar port/host/hostport
.It Fl R Ar port:host:hostport
Specifies that the given port on the remote (server) host is to be
forwarded to the given host and port on the local side.
This works by allocating a socket to listen to
.Ar port
on the remote side, and whenever a connection is made to this port, the
connection is forwarded over the secure channel, and a connection is
made to
.Ar host
port
.Ar hostport
from the local machine.
Port forwardings can also be specified in the configuration file.
Privileged ports can be forwarded only when
logging in as root on the remote machine.
IPv6 addresses can be specified with an alternative syntax:
.Ar port/host/hostport
.It Fl D Ar port
Specifies a local
.Dq dynamic
application-level port forwarding.
This works by allocating a socket to listen to
.Ar port
on the local side, and whenever a connection is made to this port, the
connection is forwarded over the secure channel, and the application
protocol is then used to determine where to connect to from the
remote machine.
Currently the SOCKS4 and SOCKS5 protocols are supported, and
.Nm
will act as a SOCKS server.
Only root can forward privileged ports.
Dynamic port forwardings can also be specified in the configuration file.
.It Fl 1
Forces
.Nm
to try protocol version 1 only.
.It Fl 2
Forces
.Nm
to try protocol version 2 only.
.It Fl 4
Forces
.Nm
to use IPv4 addresses only.
.It Fl 6
Forces
.Nm
to use IPv6 addresses only.
d746 1
a746 1
.Bl -tag -width Ds
d756 1
a756 1
the host where the shell runs, and n is an integer >= 1.
d834 1
a834 1
See the
d863 1
a863 1
file should be added to
d889 2
a890 1
In the simplest form the format is the same as the .pub
d906 1
a906 1
The format is described on the
d946 1
a946 1
.Pa \&.rhosts
d968 3
a970 1
authentication before permitting \s+2.\s0rhosts authentication.
d981 1
a981 1
.Pa \&.rhosts .
d986 1
a986 1
.Nm rlogin
d991 1
a991 1
.Pa \&.rhosts
d994 1
a994 2
canonical hosts names, one per line (the full format is described on
the
d1034 1
d1042 1
@


1.175.2.1
log
@upgrade to OpenSSH 3.8
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.181 2003/12/16 15:49:51 markus Exp $
d46 7
a52 1
.Op Fl 1246AaCfgkNnqsTtVvXxY
a54 1
.Op Fl D Ar port
d56 5
a61 2
.Op Fl i Ar identity_file
.Bk -words
a70 3
.Op Fl l Ar login_name
.Op Fl m Ar mac_spec
.Op Fl o Ar option
a71 2
.Op Fl p Ar port
.Ek
d80 2
a81 1
.Oo Ar user Ns @@ Oc Ns Ar hostname
d83 1
d88 2
a89 2
It is intended to replace rlogin and rsh,
and provide secure encrypted communications between
d91 2
a92 2
X11 connections and arbitrary TCP/IP ports
can also be forwarded over the secure channel.
d96 1
a96 4
.Ar hostname
(with optional
.Ar user
name).
d99 1
a99 1
depending on the protocol version used.
a100 5
If
.Ar command
is specified,
.Ar command
is executed on the remote host instead of a login shell.
d102 1
d110 1
a110 1
.Pa .rhosts
d112 1
a112 1
.Pa .shosts
d121 1
a121 1
.Em rhosts
d123 1
a123 1
.Em hosts.equiv
d138 1
a138 1
section), only then is login permitted.
a156 1
.Pp
d159 2
a160 1
lists the public keys that are permitted for logging in.
d165 2
a166 2
The server checks if this key is permitted, and if so,
sends the user (actually the
d170 5
a174 4
The challenge can only be decrypted using the proper private key.
The user's client then decrypts the challenge using the private key,
proving that he/she knows the private key
but without disclosing it to the server.
d182 1
a182 1
and stores the public key in
d196 2
a197 3
RSA authentication is much more secure than
.Em rhosts
authentication.
d211 1
d213 2
a214 1
When a user connects using protocol version 2,
d219 2
a220 2
if this method fails, public key authentication is attempted,
and finally if this method fails, keyboard-interactive and
d236 2
a237 2
If public key authentication fails or is not available, a password
can be sent encrypted to the remote host to prove the user's identity.
d248 1
d250 1
d260 3
a262 2
If no pseudo-tty has been allocated,
the session is transparent and can be used to reliably transfer binary data.
d269 2
a270 1
The exit status of the remote program is returned as the exit status of
d272 1
d274 3
a276 3
When a pseudo-terminal has been requested,
.Nm
supports a number of functions through the use of an escape character.
d294 1
a294 1
Disconnect.
d296 1
a296 2
Background
.Nm ssh .
d298 1
a298 1
List forwarded connections.
d300 2
a301 3
Background
.Nm
at logout when waiting for forwarded connection / X11 sessions to terminate.
d303 1
a303 1
Display a list of escape characters.
d305 2
a306 2
Send a BREAK to the remote system
(only useful for SSH protocol version 2 and if the peer supports it).
d312 1
a312 1
options).
d314 2
a315 2
Request rekeying of the connection
(only useful for SSH protocol version 2 and if the peer supports it).
d317 1
d319 1
d324 1
a324 1
(or see the description of the
d345 2
a346 1
will point to the server machine, but with a display number greater than zero.
d367 1
a367 1
(or see the description of the
d379 1
d381 1
d392 2
a393 1
If a host's identification ever changes,
d397 3
a399 2
Another purpose of this mechanism is to prevent man-in-the-middle attacks
which could otherwise be used to circumvent the encryption.
d407 2
a408 16
.It Fl 1
Forces
.Nm
to try protocol version 1 only.
.It Fl 2
Forces
.Nm
to try protocol version 2 only.
.It Fl 4
Forces
.Nm
to use IPv4 addresses only.
.It Fl 6
Forces
.Nm
to use IPv6 addresses only.
a419 2
.It Fl a
Disables forwarding of the authentication agent connection.
d423 1
a423 17
.It Fl C
Requests compression of all data (including stdin, stdout, stderr, and
data for forwarded X11 and TCP/IP connections).
The compression algorithm is the same used by
.Xr gzip 1 ,
and the
.Dq level
can be controlled by the
.Cm CompressionLevel
option for protocol version 1.
Compression is desirable on modem lines and other
slow connections, but will only slow down things on fast networks.
The default value can be set on a host-by-host basis in the
configuration files; see the
.Cm Compression
option.
.It Fl c Ar blowfish | 3des | des
d431 1
a431 1
is a fast block cipher; it appears very secure and is much faster than
d447 1
a447 16
.It Fl D Ar port
Specifies a local
.Dq dynamic
application-level port forwarding.
This works by allocating a socket to listen to
.Ar port
on the local side, and whenever a connection is made to this port, the
connection is forwarded over the secure channel, and the application
protocol is then used to determine where to connect to from the
remote machine.
Currently the SOCKS4 and SOCKS5 protocols are supported, and
.Nm
will act as a SOCKS server.
Only root can forward privileged ports.
Dynamic port forwardings can also be specified in the configuration file.
.It Fl e Ar ch | ^ch | none
d453 3
a455 3
closes the connection;
followed by control-Z suspends the connection;
and followed by itself sends the escape character once.
a458 8
.It Fl F Ar configfile
Specifies an alternative per-user configuration file.
If a configuration file is given on the command line,
the system-wide configuration file
.Pq Pa /etc/ssh/ssh_config
will be ignored.
The default for the per-user configuration file is
.Pa $HOME/.ssh/config .
a473 6
.It Fl I Ar smartcard_device
Specifies which smartcard device to use.
The argument is the device
.Nm
should use to communicate with a smartcard used for storing the user's
private RSA key.
d490 6
d497 2
a498 26
Disables forwarding (delegation) of GSSAPI credentials to the server.
.It Fl L Xo
.Sm off
.Ar port : host : hostport
.Sm on
.Xc
Specifies that the given port on the local (client) host is to be
forwarded to the given host and port on the remote side.
This works by allocating a socket to listen to
.Ar port
on the local side, and whenever a connection is made to this port, the
connection is forwarded over the secure channel, and a connection is
made to
.Ar host
port
.Ar hostport
from the remote machine.
Port forwardings can also be specified in the configuration file.
Only root can forward privileged ports.
IPv6 addresses can be specified with an alternative syntax:
.Sm off
.Xo
.Ar port No / Ar host No /
.Ar hostport .
.Xc
.Sm on
a508 4
.It Fl N
Do not execute a remote command.
This is useful for just forwarding ports
(protocol version 2 only).
d529 4
a536 56
For full details of the options listed below, and their possible values, see
.Xr ssh_config 5 .
.Pp
.Bl -tag -width Ds -offset indent -compact
.It AddressFamily
.It BatchMode
.It BindAddress
.It ChallengeResponseAuthentication
.It CheckHostIP
.It Cipher
.It Ciphers
.It ClearAllForwardings
.It Compression
.It CompressionLevel
.It ConnectionAttempts
.It ConnectionTimeout
.It DynamicForward
.It EscapeChar
.It ForwardAgent
.It ForwardX11
.It ForwardX11Trusted
.It GatewayPorts
.It GlobalKnownHostsFile
.It GSSAPIAuthentication
.It GSSAPIDelegateCredentials
.It Host
.It HostbasedAuthentication
.It HostKeyAlgorithms
.It HostKeyAlias
.It HostName
.It IdentityFile
.It LocalForward
.It LogLevel
.It MACs
.It NoHostAuthenticationForLocalhost
.It NumberOfPasswordPrompts
.It PasswordAuthentication
.It Port
.It PreferredAuthentications
.It Protocol
.It ProxyCommand
.It PubkeyAuthentication
.It RemoteForward
.It RhostsRSAAuthentication
.It RSAAuthentication
.It ServerAliveInterval
.It ServerAliveCountMax
.It SmartcardDevice
.It StrictHostKeyChecking
.It TCPKeepAlive
.It UsePrivilegedPort
.It User
.It UserKnownHostsFile
.It VerifyHostKeyDNS
.It XAuthLocation
.El
a543 26
.It Fl R Xo
.Sm off
.Ar port : host : hostport
.Sm on
.Xc
Specifies that the given port on the remote (server) host is to be
forwarded to the given host and port on the local side.
This works by allocating a socket to listen to
.Ar port
on the remote side, and whenever a connection is made to this port, the
connection is forwarded over the secure channel, and a connection is
made to
.Ar host
port
.Ar hostport
from the local machine.
Port forwardings can also be specified in the configuration file.
Privileged ports can be forwarded only when
logging in as root on the remote machine.
IPv6 addresses can be specified with an alternative syntax:
.Sm off
.Xo
.Ar port No / Ar host No /
.Ar hostport .
.Xc
.Sm on
d547 1
a547 2
of SSH as a secure transport for other applications (eg.\&
.Xr sftp 1 ) .
a548 2
.It Fl T
Disable pseudo-tty allocation.
d559 2
a560 2
.It Fl V
Display the version number and exit.
d572 4
d585 88
a672 4
.It Fl x
Disables X11 forwarding.
.It Fl Y
Enables trusted X11 forwarding.
d683 1
a683 1
.Bl -tag -width LOGNAME
d693 1
a693 1
the host where the shell runs, and n is an integer \*(Ge 1.
d771 1
a771 1
For more information, see the
d800 1
a800 1
file should be added to the file
d826 1
a826 2
In the simplest form the format is the same as the
.Pa .pub
d842 1
a842 1
The format is described in the
d882 1
a882 1
.Em rhosts
d904 1
a904 3
authentication before permitting
.Em rhosts
authentication.
d915 1
a915 1
.Pa .rhosts .
d920 1
a920 1
.Xr rlogin
d925 1
a925 1
.Em rhosts
d928 2
a929 1
canonical hosts names, one per line (the full format is described in the
a968 1
.Xr gzip 1 ,
a975 1
.Xr hosts.equiv 5 ,
@


1.175.2.2
log
@upgrade to OpenSSH 3.9
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.194 2004/08/12 21:41:13 jakob Exp $
d46 1
a46 1
.Op Fl 1246AaCfgkMNnqsTtVvXxY
a48 1
.Bk -words
d53 1
a76 1
.Op Fl S Ar ctl
d244 2
a245 2
(the traffic is encrypted using AES, 3DES, Blowfish, CAST128 or Arcfour)
and integrity (hmac-md5, hmac-sha1, hmac-ripemd160).
d305 1
a305 2
Open command line.
Currently this allows the addition of port forwardings using the
d309 1
a309 7
options (see below).
It also allows the cancellation of existing remote port-forwardings
using
.Fl KR Ar hostport .
Basic help is available, using the
.Fl h
option.
a394 9
.Nm
can be configured to verify host identification using fingerprint resource
records (SSHFP) published in DNS.
The
.Cm VerifyHostKeyDNS
option can be used to control how DNS lookups are performed.
SSHFP resource records can be generated using
.Xr ssh-keygen 1 .
.Pp
d445 5
a449 9
.It Fl c Ar cipher_spec
Selects the cipher specification for encrypting the session.
.Pp
Protocol version 1 allows specification of a single cipher.
The suported values are
.Dq 3des ,
.Dq blowfish
and
.Dq des .
a451 1
It is believed to be secure.
d463 6
a468 24
The default is
.Dq 3des .
.Pp
For protocol version 2
.Ar cipher_spec
is a comma-separated list of ciphers
listed in order of preference.
The supported ciphers are
.Dq 3des-cbc ,
.Dq aes128-cbc ,
.Dq aes192-cbc ,
.Dq aes256-cbc ,
.Dq aes128-ctr ,
.Dq aes192-ctr ,
.Dq aes256-ctr ,
.Dq arcfour ,
.Dq blowfish-cbc ,
and
.Dq cast128-cbc .
The default is
.Bd -literal
  ``aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,arcfour,
    aes192-cbc,aes256-cbc''
.Ed
a570 11
.It Fl M
Places the
.Nm
client into
.Dq master
mode for connection sharing.
Refer to the description of
.Cm ControlMaster
in
.Xr ssh_config 5
for details.
d621 1
a621 3
.It ConnectTimeout
.It ControlMaster
.It ControlPath
a636 1
.It IdentitiesOnly
a650 1
.It SendEnv
a694 9
.It Fl S Ar ctl
Specifies the location of a control socket for connection sharing.
Refer to the description of
.Cm ControlPath
and
.Cm ControlMaster
in
.Xr ssh_config 5
for details.
a886 2
Because of the potential for abuse, this file must have strict permissions:
read/write for the user, and not accessible by others.
@


1.174
log
@(re)add socks5 suppport to -D; ok djm@@
now ssh(1) can act both as a socks 4 and socks 5 server and
dynamically forward ports.
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.173 2003/06/10 09:12:11 jmc Exp $
d497 1
a497 1
Disables forwarding of Kerberos tickets and AFS tokens.
@


1.173
log
@- section reorder
- COMPATIBILITY merge
- macro cleanup
- kill whitespace at EOL
- new sentence, new line

ssh pages ok markus@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.172 2003/05/20 12:09:31 jmc Exp $
d652 1
a652 1
Currently the SOCKS4 protocol is supported, and
d654 1
a654 1
will act as a SOCKS4 server.
@


1.172
log
@new sentence, new line
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.171 2003/05/15 04:08:41 markus Exp $
d925 2
a926 1
.Pa \&.rhosts authentication.
a967 9
.Sh AUTHORS
OpenSSH is a derivative of the original and free
ssh 1.2.12 release by Tatu Ylonen.
Aaron Campbell, Bob Beck, Markus Friedl, Niels Provos,
Theo de Raadt and Dug Song
removed many bugs, re-added newer features and
created OpenSSH.
Markus Friedl contributed the support for SSH
protocol versions 1.5 and 2.0.
d990 9
@


1.171
log
@~B is ssh2 only
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.170 2003/05/14 22:24:42 markus Exp $
d491 2
a492 2
Specifies which smartcard device to use. The argument is
the device
d545 4
a548 3
May be used to request invocation of a subsystem on the remote system. Subsystems are a feature of the SSH2 protocol which facilitate the use
of SSH as a secure transport for other applications (eg. sftp). The
subsystem is specified as the remote command.
@


1.170
log
@allow to send a BREAK to the remote system; ok various
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.169 2003/04/12 11:40:15 naddy Exp $
d305 2
a306 1
Send a BREAK to the remote system.
@


1.169
log
@document -V switch, fix wording; ok markus@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.168 2003/03/28 10:11:43 jmc Exp $
d304 2
@


1.168
log
@- killed whitespace
- new sentence new line
- .Bk for arguments

ok markus@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.167 2002/09/27 15:46:21 stevesk Exp $
d52 1
a52 1
.Op Fl afgknqstvxACNTX1246
d566 4
a569 2
options increases the verbosity.
Maximum is 3.
@


1.167
log
@clarify compression level protocol 1 only; ok markus@@ deraadt@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.166 2002/09/12 19:50:36 stevesk Exp $
d51 1
d70 2
d83 1
d368 1
a368 1
options described later) and 
d410 5
a414 4
Agent forwarding should be enabled with caution.  Users with the
ability to bypass file permissions on the remote host (for the agent's
Unix-domain socket) can access the local agent through the forwarded
connection.  An attacker cannot obtain key material from the agent,
d436 2
a437 2
cipher.  Its use is strongly discouraged due to cryptographic
weaknesses.
d574 5
a578 5
X11 forwarding should be enabled with caution.  Users with the ability
to bypass file permissions on the remote host (for the user's X
authorization database) can access the local X11 display through the
forwarded connection.  An attacker may then be able to perform
activities such as keystroke monitoring.
d645 2
a646 1
remote machine.  Currently the SOCKS4 protocol is supported, and
@


1.167.4.1
log
@Update OpenSSH to version 3.6.1
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.167.2.1 2003/04/03 23:27:13 margarida Exp $
a50 1
.Bk -words
a68 2
.Ek
.Bk -words
a79 1
.Ek
d364 1
a364 1
options described later) and
d406 4
a409 5
Agent forwarding should be enabled with caution.
Users with the ability to bypass file permissions on the remote host
(for the agent's Unix-domain socket)
can access the local agent through the forwarded connection.
An attacker cannot obtain key material from the agent,
d431 2
a432 2
cipher.
Its use is strongly discouraged due to cryptographic weaknesses.
d569 5
a573 5
X11 forwarding should be enabled with caution.
Users with the ability to bypass file permissions on the remote host
(for the user's X authorization database)
can access the local X11 display through the forwarded connection.
An attacker may then be able to perform activities such as keystroke monitoring.
d640 1
a640 2
remote machine.
Currently the SOCKS4 protocol is supported, and
@


1.167.4.2
log
@upgrade to OpenSSH 3.7
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.175 2003/07/22 13:35:22 markus Exp $
d52 1
a52 1
.Op Fl afgknqstvxACNTVX1246
a303 3
.It Cm ~B
Send a BREAK to the remote system (only useful for SSH protocol version 2
and if the peer supports it)
d488 2
a489 2
Specifies which smartcard device to use.
The argument is the device
d494 1
a494 1
Disables forwarding of Kerberos tickets.
d542 3
a544 4
May be used to request invocation of a subsystem on the remote system.
Subsystems are a feature of the SSH2 protocol which facilitate the use
of SSH as a secure transport for other applications (eg. sftp).
The subsystem is specified as the remote command.
d566 2
a567 4
options increase the verbosity.
The maximum is 3.
.It Fl V
Display the version number and exit.
d646 1
a646 1
Currently the SOCKS4 and SOCKS5 protocols are supported, and
d648 1
a648 1
will act as a SOCKS server.
d919 1
a919 2
.Pa \&.rhosts
authentication.
d961 9
a991 9
.Sh AUTHORS
OpenSSH is a derivative of the original and free
ssh 1.2.12 release by Tatu Ylonen.
Aaron Campbell, Bob Beck, Markus Friedl, Niels Provos,
Theo de Raadt and Dug Song
removed many bugs, re-added newer features and
created OpenSSH.
Markus Friedl contributed the support for SSH
protocol versions 1.5 and 2.0.
@


1.167.4.3
log
@upgrade to OpenSSH 3.8upgrade to OpenSSH 3.8upgrade to OpenSSH 3.8
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.181 2003/12/16 15:49:51 markus Exp $
d46 7
a52 1
.Op Fl 1246AaCfgkNnqsTtVvXxY
a54 1
.Op Fl D Ar port
d56 5
a61 2
.Op Fl i Ar identity_file
.Bk -words
a70 3
.Op Fl l Ar login_name
.Op Fl m Ar mac_spec
.Op Fl o Ar option
a71 2
.Op Fl p Ar port
.Ek
d80 2
a81 1
.Oo Ar user Ns @@ Oc Ns Ar hostname
d83 1
d88 2
a89 2
It is intended to replace rlogin and rsh,
and provide secure encrypted communications between
d91 2
a92 2
X11 connections and arbitrary TCP/IP ports
can also be forwarded over the secure channel.
d96 1
a96 4
.Ar hostname
(with optional
.Ar user
name).
d99 1
a99 1
depending on the protocol version used.
a100 5
If
.Ar command
is specified,
.Ar command
is executed on the remote host instead of a login shell.
d102 1
d110 1
a110 1
.Pa .rhosts
d112 1
a112 1
.Pa .shosts
d121 1
a121 1
.Em rhosts
d123 1
a123 1
.Em hosts.equiv
d138 1
a138 1
section), only then is login permitted.
a156 1
.Pp
d159 2
a160 1
lists the public keys that are permitted for logging in.
d165 2
a166 2
The server checks if this key is permitted, and if so,
sends the user (actually the
d170 5
a174 4
The challenge can only be decrypted using the proper private key.
The user's client then decrypts the challenge using the private key,
proving that he/she knows the private key
but without disclosing it to the server.
d182 1
a182 1
and stores the public key in
d196 2
a197 3
RSA authentication is much more secure than
.Em rhosts
authentication.
d211 1
d213 2
a214 1
When a user connects using protocol version 2,
d219 2
a220 2
if this method fails, public key authentication is attempted,
and finally if this method fails, keyboard-interactive and
d236 2
a237 2
If public key authentication fails or is not available, a password
can be sent encrypted to the remote host to prove the user's identity.
d248 1
d250 1
d260 3
a262 2
If no pseudo-tty has been allocated,
the session is transparent and can be used to reliably transfer binary data.
d269 2
a270 1
The exit status of the remote program is returned as the exit status of
d272 1
d274 3
a276 3
When a pseudo-terminal has been requested,
.Nm
supports a number of functions through the use of an escape character.
d294 1
a294 1
Disconnect.
d296 1
a296 2
Background
.Nm ssh .
d298 1
a298 1
List forwarded connections.
d300 2
a301 3
Background
.Nm
at logout when waiting for forwarded connection / X11 sessions to terminate.
d303 1
a303 1
Display a list of escape characters.
d305 2
a306 2
Send a BREAK to the remote system
(only useful for SSH protocol version 2 and if the peer supports it).
d312 1
a312 1
options).
d314 2
a315 2
Request rekeying of the connection
(only useful for SSH protocol version 2 and if the peer supports it).
d317 1
d319 1
d324 1
a324 1
(or see the description of the
d345 2
a346 1
will point to the server machine, but with a display number greater than zero.
d367 1
a367 1
(or see the description of the
d379 1
d381 1
d392 2
a393 1
If a host's identification ever changes,
d397 3
a399 2
Another purpose of this mechanism is to prevent man-in-the-middle attacks
which could otherwise be used to circumvent the encryption.
d407 2
a408 16
.It Fl 1
Forces
.Nm
to try protocol version 1 only.
.It Fl 2
Forces
.Nm
to try protocol version 2 only.
.It Fl 4
Forces
.Nm
to use IPv4 addresses only.
.It Fl 6
Forces
.Nm
to use IPv6 addresses only.
a419 2
.It Fl a
Disables forwarding of the authentication agent connection.
d423 1
a423 17
.It Fl C
Requests compression of all data (including stdin, stdout, stderr, and
data for forwarded X11 and TCP/IP connections).
The compression algorithm is the same used by
.Xr gzip 1 ,
and the
.Dq level
can be controlled by the
.Cm CompressionLevel
option for protocol version 1.
Compression is desirable on modem lines and other
slow connections, but will only slow down things on fast networks.
The default value can be set on a host-by-host basis in the
configuration files; see the
.Cm Compression
option.
.It Fl c Ar blowfish | 3des | des
d431 1
a431 1
is a fast block cipher; it appears very secure and is much faster than
d447 1
a447 16
.It Fl D Ar port
Specifies a local
.Dq dynamic
application-level port forwarding.
This works by allocating a socket to listen to
.Ar port
on the local side, and whenever a connection is made to this port, the
connection is forwarded over the secure channel, and the application
protocol is then used to determine where to connect to from the
remote machine.
Currently the SOCKS4 and SOCKS5 protocols are supported, and
.Nm
will act as a SOCKS server.
Only root can forward privileged ports.
Dynamic port forwardings can also be specified in the configuration file.
.It Fl e Ar ch | ^ch | none
d453 3
a455 3
closes the connection;
followed by control-Z suspends the connection;
and followed by itself sends the escape character once.
a458 8
.It Fl F Ar configfile
Specifies an alternative per-user configuration file.
If a configuration file is given on the command line,
the system-wide configuration file
.Pq Pa /etc/ssh/ssh_config
will be ignored.
The default for the per-user configuration file is
.Pa $HOME/.ssh/config .
a473 6
.It Fl I Ar smartcard_device
Specifies which smartcard device to use.
The argument is the device
.Nm
should use to communicate with a smartcard used for storing the user's
private RSA key.
d490 6
d497 2
a498 26
Disables forwarding (delegation) of GSSAPI credentials to the server.
.It Fl L Xo
.Sm off
.Ar port : host : hostport
.Sm on
.Xc
Specifies that the given port on the local (client) host is to be
forwarded to the given host and port on the remote side.
This works by allocating a socket to listen to
.Ar port
on the local side, and whenever a connection is made to this port, the
connection is forwarded over the secure channel, and a connection is
made to
.Ar host
port
.Ar hostport
from the remote machine.
Port forwardings can also be specified in the configuration file.
Only root can forward privileged ports.
IPv6 addresses can be specified with an alternative syntax:
.Sm off
.Xo
.Ar port No / Ar host No /
.Ar hostport .
.Xc
.Sm on
a508 4
.It Fl N
Do not execute a remote command.
This is useful for just forwarding ports
(protocol version 2 only).
d529 4
a536 56
For full details of the options listed below, and their possible values, see
.Xr ssh_config 5 .
.Pp
.Bl -tag -width Ds -offset indent -compact
.It AddressFamily
.It BatchMode
.It BindAddress
.It ChallengeResponseAuthentication
.It CheckHostIP
.It Cipher
.It Ciphers
.It ClearAllForwardings
.It Compression
.It CompressionLevel
.It ConnectionAttempts
.It ConnectionTimeout
.It DynamicForward
.It EscapeChar
.It ForwardAgent
.It ForwardX11
.It ForwardX11Trusted
.It GatewayPorts
.It GlobalKnownHostsFile
.It GSSAPIAuthentication
.It GSSAPIDelegateCredentials
.It Host
.It HostbasedAuthentication
.It HostKeyAlgorithms
.It HostKeyAlias
.It HostName
.It IdentityFile
.It LocalForward
.It LogLevel
.It MACs
.It NoHostAuthenticationForLocalhost
.It NumberOfPasswordPrompts
.It PasswordAuthentication
.It Port
.It PreferredAuthentications
.It Protocol
.It ProxyCommand
.It PubkeyAuthentication
.It RemoteForward
.It RhostsRSAAuthentication
.It RSAAuthentication
.It ServerAliveInterval
.It ServerAliveCountMax
.It SmartcardDevice
.It StrictHostKeyChecking
.It TCPKeepAlive
.It UsePrivilegedPort
.It User
.It UserKnownHostsFile
.It VerifyHostKeyDNS
.It XAuthLocation
.El
a543 26
.It Fl R Xo
.Sm off
.Ar port : host : hostport
.Sm on
.Xc
Specifies that the given port on the remote (server) host is to be
forwarded to the given host and port on the local side.
This works by allocating a socket to listen to
.Ar port
on the remote side, and whenever a connection is made to this port, the
connection is forwarded over the secure channel, and a connection is
made to
.Ar host
port
.Ar hostport
from the local machine.
Port forwardings can also be specified in the configuration file.
Privileged ports can be forwarded only when
logging in as root on the remote machine.
IPv6 addresses can be specified with an alternative syntax:
.Sm off
.Xo
.Ar port No / Ar host No /
.Ar hostport .
.Xc
.Sm on
d547 1
a547 2
of SSH as a secure transport for other applications (eg.\&
.Xr sftp 1 ) .
a548 2
.It Fl T
Disable pseudo-tty allocation.
d559 2
a560 2
.It Fl V
Display the version number and exit.
d572 4
d585 88
a672 4
.It Fl x
Disables X11 forwarding.
.It Fl Y
Enables trusted X11 forwarding.
d683 1
a683 1
.Bl -tag -width LOGNAME
d693 1
a693 1
the host where the shell runs, and n is an integer \*(Ge 1.
d771 1
a771 1
For more information, see the
d800 1
a800 1
file should be added to the file
d826 1
a826 2
In the simplest form the format is the same as the
.Pa .pub
d842 1
a842 1
The format is described in the
d882 1
a882 1
.Em rhosts
d904 1
a904 3
authentication before permitting
.Em rhosts
authentication.
d915 1
a915 1
.Pa .rhosts .
d920 1
a920 1
.Xr rlogin
d925 1
a925 1
.Em rhosts
d928 2
a929 1
canonical hosts names, one per line (the full format is described in the
a968 1
.Xr gzip 1 ,
a975 1
.Xr hosts.equiv 5 ,
@


1.167.2.1
log
@Update to OpenSSH 3.6.1
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.168 2003/03/28 10:11:43 jmc Exp $
a50 1
.Bk -words
a68 2
.Ek
.Bk -words
a79 1
.Ek
d364 1
a364 1
options described later) and
d406 4
a409 5
Agent forwarding should be enabled with caution.
Users with the ability to bypass file permissions on the remote host
(for the agent's Unix-domain socket)
can access the local agent through the forwarded connection.
An attacker cannot obtain key material from the agent,
d431 2
a432 2
cipher.
Its use is strongly discouraged due to cryptographic weaknesses.
d569 5
a573 5
X11 forwarding should be enabled with caution.
Users with the ability to bypass file permissions on the remote host
(for the user's X authorization database)
can access the local X11 display through the forwarded connection.
An attacker may then be able to perform activities such as keystroke monitoring.
d640 1
a640 2
remote machine.
Currently the SOCKS4 protocol is supported, and
@


1.167.2.2
log
@upgrade to OpenSSH 3.7
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.175 2003/07/22 13:35:22 markus Exp $
d52 1
a52 1
.Op Fl afgknqstvxACNTVX1246
a303 3
.It Cm ~B
Send a BREAK to the remote system (only useful for SSH protocol version 2
and if the peer supports it)
d488 2
a489 2
Specifies which smartcard device to use.
The argument is the device
d494 1
a494 1
Disables forwarding of Kerberos tickets.
d542 3
a544 4
May be used to request invocation of a subsystem on the remote system.
Subsystems are a feature of the SSH2 protocol which facilitate the use
of SSH as a secure transport for other applications (eg. sftp).
The subsystem is specified as the remote command.
d566 2
a567 4
options increase the verbosity.
The maximum is 3.
.It Fl V
Display the version number and exit.
d646 1
a646 1
Currently the SOCKS4 and SOCKS5 protocols are supported, and
d648 1
a648 1
will act as a SOCKS server.
d919 1
a919 2
.Pa \&.rhosts
authentication.
d961 9
a991 9
.Sh AUTHORS
OpenSSH is a derivative of the original and free
ssh 1.2.12 release by Tatu Ylonen.
Aaron Campbell, Bob Beck, Markus Friedl, Niels Provos,
Theo de Raadt and Dug Song
removed many bugs, re-added newer features and
created OpenSSH.
Markus Friedl contributed the support for SSH
protocol versions 1.5 and 2.0.
@


1.166
log
@add SSH_CONNECTION and deprecate SSH_CLIENT; bug #384.  ok markus@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.165 2002/09/11 17:55:03 stevesk Exp $
d583 1
a583 1
option.
@


1.165
log
@add agent and X11 forwarding warning text from ssh_config.5; ok markus@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.164 2002/08/29 16:02:54 stevesk Exp $
d729 2
a730 2
.It Ev SSH_CLIENT
Identifies the client end of the connection.
d732 2
a733 2
three space-separated values: client ip-address, client port number,
and server port number.
@


1.164
log
@deprecate -P as UsePrivilegedPort defaults to no now; ok markus@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.163 2002/08/17 23:07:14 stevesk Exp $
d405 7
d568 6
@


1.163
log
@ForwardAgent has defaulted to no for over 2 years; be more clear here.
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.162 2002/08/12 17:30:35 stevesk Exp $
d51 1
a51 1
.Op Fl afgknqstvxACNPTX1246
a525 9
.It Fl P
Use a non-privileged port for outgoing connections.
This can be used if a firewall does
not permit connections from privileged ports.
Note that this option turns off
.Cm RhostsAuthentication
and
.Cm RhostsRSAAuthentication
for older servers.
@


1.162
log
@more PermitUserEnvironment; ok markus@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.161 2002/08/02 16:00:07 marc Exp $
d356 11
a366 3
If the user is using an authentication agent, the connection to the agent
is automatically forwarded to the remote side unless disabled on
the command line or in a configuration file.
@


1.161
log
@note that .ssh/environment is only read when
allowed (PermitUserEnvironment in sshd_config).
OK markus@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.160 2002/06/22 11:51:39 naddy Exp $
d747 1
a747 1
See
d749 1
a749 1
in
@


1.160
log
@typo
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.159 2002/06/22 02:40:23 stevesk Exp $
d745 6
a750 1
to the environment.
@


1.159
log
@section 5 not 4 for ssh_config
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.158 2002/06/20 19:56:07 stevesk Exp $
d956 1
a956 1
.Xr ssh-keysign 8,
@


1.158
log
@move configuration file options from ssh.1/sshd.8 to
ssh_config.5/sshd_config.5; ok deraadt@@ millert@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.157 2002/06/19 00:27:55 deraadt Exp $
d955 1
a955 1
.Xr ssh_config 4 ,
@


1.157
log
@KNF done automatically while reading....
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.156 2002/06/10 17:45:20 stevesk Exp $
d387 1
a387 1
option (see below) can be used to prevent logins to machines whose
d571 1
a571 1
option (see below).
d577 1
a577 1
option below.
d652 4
a655 541
obtains configuration data from the following sources in
the following order:
command line options, user's configuration file
.Pq Pa $HOME/.ssh/config ,
and system-wide configuration file
.Pq Pa /etc/ssh/ssh_config .
For each parameter, the first obtained value
will be used.
The configuration files contain sections bracketed by
.Dq Host
specifications, and that section is only applied for hosts that
match one of the patterns given in the specification.
The matched host name is the one given on the command line.
.Pp
Since the first obtained value for each parameter is used, more
host-specific declarations should be given near the beginning of the
file, and general defaults at the end.
.Pp
The configuration file has the following format:
.Pp
Empty lines and lines starting with
.Ql #
are comments.
.Pp
Otherwise a line is of the format
.Dq keyword arguments .
Configuration options may be separated by whitespace or
optional whitespace and exactly one
.Ql = ;
the latter format is useful to avoid the need to quote whitespace
when specifying configuration options using the
.Nm ssh ,
.Nm scp
and
.Nm sftp
.Fl o
option.
.Pp
The possible
keywords and their meanings are as follows (note that
keywords are case-insensitive and arguments are case-sensitive):
.Bl -tag -width Ds
.It Cm Host
Restricts the following declarations (up to the next
.Cm Host
keyword) to be only for those hosts that match one of the patterns
given after the keyword.
.Ql \&*
and
.Ql ?
can be used as wildcards in the
patterns.
A single
.Ql \&*
as a pattern can be used to provide global
defaults for all hosts.
The host is the
.Ar hostname
argument given on the command line (i.e., the name is not converted to
a canonicalized host name before matching).
.It Cm AFSTokenPassing
Specifies whether to pass AFS tokens to remote host.
The argument to this keyword must be
.Dq yes
or
.Dq no .
This option applies to protocol version 1 only.
.It Cm BatchMode
If set to
.Dq yes ,
passphrase/password querying will be disabled.
This option is useful in scripts and other batch jobs where no user
is present to supply the password.
The argument must be
.Dq yes
or
.Dq no .
The default is
.Dq no .
.It Cm BindAddress
Specify the interface to transmit from on machines with multiple
interfaces or aliased addresses.
Note that this option does not work if
.Cm UsePrivilegedPort
is set to
.Dq yes .
.It Cm ChallengeResponseAuthentication
Specifies whether to use challenge response authentication.
The argument to this keyword must be
.Dq yes
or
.Dq no .
The default is
.Dq yes .
.It Cm CheckHostIP
If this flag is set to
.Dq yes ,
ssh will additionally check the host IP address in the
.Pa known_hosts
file.
This allows ssh to detect if a host key changed due to DNS spoofing.
If the option is set to
.Dq no ,
the check will not be executed.
The default is
.Dq yes .
.It Cm Cipher
Specifies the cipher to use for encrypting the session
in protocol version 1.
Currently,
.Dq blowfish ,
.Dq 3des ,
and
.Dq des
are supported.
.Ar des
is only supported in the
.Nm
client for interoperability with legacy protocol 1 implementations
that do not support the
.Ar 3des
cipher.  Its use is strongly discouraged due to cryptographic
weaknesses.
The default is
.Dq 3des .
.It Cm Ciphers
Specifies the ciphers allowed for protocol version 2
in order of preference.
Multiple ciphers must be comma-separated.
The default is
.Pp
.Bd -literal
  ``aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,arcfour,
    aes192-cbc,aes256-cbc''
.Ed
.It Cm ClearAllForwardings
Specifies that all local, remote and dynamic port forwardings
specified in the configuration files or on the command line be
cleared.  This option is primarily useful when used from the
.Nm
command line to clear port forwardings set in
configuration files, and is automatically set by
.Xr scp 1
and
.Xr sftp 1 .
The argument must be
.Dq yes
or
.Dq no .
The default is
.Dq no .
.It Cm Compression
Specifies whether to use compression.
The argument must be
.Dq yes
or
.Dq no .
The default is
.Dq no .
.It Cm CompressionLevel
Specifies the compression level to use if compression is enabled.
The argument must be an integer from 1 (fast) to 9 (slow, best).
The default level is 6, which is good for most applications.
The meaning of the values is the same as in
.Xr gzip 1 .
Note that this option applies to protocol version 1 only.
.It Cm ConnectionAttempts
Specifies the number of tries (one per second) to make before exiting.
The argument must be an integer.
This may be useful in scripts if the connection sometimes fails.
The default is 1.
.It Cm DynamicForward
Specifies that a TCP/IP port on the local machine be forwarded
over the secure channel, and the application
protocol is then used to determine where to connect to from the
remote machine.  The argument must be a port number.
Currently the SOCKS4 protocol is supported, and
.Nm
will act as a SOCKS4 server.
Multiple forwardings may be specified, and
additional forwardings can be given on the command line.  Only
the superuser can forward privileged ports.
.It Cm EscapeChar
Sets the escape character (default:
.Ql ~ ) .
The escape character can also
be set on the command line.
The argument should be a single character,
.Ql ^
followed by a letter, or
.Dq none
to disable the escape
character entirely (making the connection transparent for binary
data).
.It Cm ForwardAgent
Specifies whether the connection to the authentication agent (if any)
will be forwarded to the remote machine.
The argument must be
.Dq yes
or
.Dq no .
The default is
.Dq no .
.It Cm ForwardX11
Specifies whether X11 connections will be automatically redirected
over the secure channel and
.Ev DISPLAY
set.
The argument must be
.Dq yes
or
.Dq no .
The default is
.Dq no .
.It Cm GatewayPorts
Specifies whether remote hosts are allowed to connect to local
forwarded ports.
By default,
.Nm
binds local port forwardings to the loopback address.  This
prevents other remote hosts from connecting to forwarded ports.
.Cm GatewayPorts
can be used to specify that
.Nm
should bind local port forwardings to the wildcard address,
thus allowing remote hosts to connect to forwarded ports.
The argument must be
.Dq yes
or
.Dq no .
The default is
.Dq no .
.It Cm GlobalKnownHostsFile
Specifies a file to use for the global
host key database instead of
.Pa /etc/ssh/ssh_known_hosts .
.It Cm HostbasedAuthentication
Specifies whether to try rhosts based authentication with public key
authentication.
The argument must be
.Dq yes
or
.Dq no .
The default is
.Dq no .
This option applies to protocol version 2 only and
is similar to
.Cm RhostsRSAAuthentication .
.It Cm HostKeyAlgorithms
Specifies the protocol version 2 host key algorithms
that the client wants to use in order of preference.
The default for this option is:
.Dq ssh-rsa,ssh-dss .
.It Cm HostKeyAlias
Specifies an alias that should be used instead of the
real host name when looking up or saving the host key
in the host key database files.
This option is useful for tunneling ssh connections
or for multiple servers running on a single host.
.It Cm HostName
Specifies the real host name to log into.
This can be used to specify nicknames or abbreviations for hosts.
Default is the name given on the command line.
Numeric IP addresses are also permitted (both on the command line and in
.Cm HostName
specifications).
.It Cm IdentityFile
Specifies a file from which the user's RSA or DSA authentication identity
is read. The default is
.Pa $HOME/.ssh/identity
for protocol version 1, and
.Pa $HOME/.ssh/id_rsa
and
.Pa $HOME/.ssh/id_dsa
for protocol version 2.
Additionally, any identities represented by the authentication agent
will be used for authentication.
The file name may use the tilde
syntax to refer to a user's home directory.
It is possible to have
multiple identity files specified in configuration files; all these
identities will be tried in sequence.
.It Cm KeepAlive
Specifies whether the system should send TCP keepalive messages to the
other side.
If they are sent, death of the connection or crash of one
of the machines will be properly noticed.
However, this means that
connections will die if the route is down temporarily, and some people
find it annoying.
.Pp
The default is
.Dq yes
(to send keepalives), and the client will notice
if the network goes down or the remote host dies.
This is important in scripts, and many users want it too.
.Pp
To disable keepalives, the value should be set to
.Dq no .
.It Cm KerberosAuthentication
Specifies whether Kerberos authentication will be used.
The argument to this keyword must be
.Dq yes
or
.Dq no .
.It Cm KerberosTgtPassing
Specifies whether a Kerberos TGT will be forwarded to the server.
This will only work if the Kerberos server is actually an AFS kaserver.
The argument to this keyword must be
.Dq yes
or
.Dq no .
.It Cm LocalForward
Specifies that a TCP/IP port on the local machine be forwarded over
the secure channel to the specified host and port from the remote machine.
The first argument must be a port number, and the second must be
.Ar host:port .
IPv6 addresses can be specified with an alternative syntax:
.Ar host/port .
Multiple forwardings may be specified, and additional
forwardings can be given on the command line.
Only the superuser can forward privileged ports.
.It Cm LogLevel
Gives the verbosity level that is used when logging messages from
.Nm ssh .
The possible values are:
QUIET, FATAL, ERROR, INFO, VERBOSE, DEBUG, DEBUG1, DEBUG2 and DEBUG3.
The default is INFO.  DEBUG and DEBUG1 are equivalent.  DEBUG2
and DEBUG3 each specify higher levels of verbose output.
.It Cm MACs
Specifies the MAC (message authentication code) algorithms
in order of preference.
The MAC algorithm is used in protocol version 2
for data integrity protection.
Multiple algorithms must be comma-separated.
The default is
.Dq hmac-md5,hmac-sha1,hmac-ripemd160,hmac-sha1-96,hmac-md5-96 .
.It Cm NoHostAuthenticationForLocalhost
This option can be used if the home directory is shared across machines.
In this case localhost will refer to a different machine on each of
the machines and the user will get many warnings about changed host keys.
However, this option disables host authentication for localhost.
The argument to this keyword must be
.Dq yes
or
.Dq no .
The default is to check the host key for localhost.
.It Cm NumberOfPasswordPrompts
Specifies the number of password prompts before giving up.
The argument to this keyword must be an integer.
Default is 3.
.It Cm PasswordAuthentication
Specifies whether to use password authentication.
The argument to this keyword must be
.Dq yes
or
.Dq no .
The default is
.Dq yes .
.It Cm Port
Specifies the port number to connect on the remote host.
Default is 22.
.It Cm PreferredAuthentications
Specifies the order in which the client should try protocol 2
authentication methods. This allows a client to prefer one method (e.g.
.Cm keyboard-interactive )
over another method (e.g.
.Cm password )
The default for this option is:
.Dq hostbased,publickey,keyboard-interactive,password .
.It Cm Protocol
Specifies the protocol versions
.Nm
should support in order of preference.
The possible values are
.Dq 1
and
.Dq 2 .
Multiple versions must be comma-separated.
The default is
.Dq 2,1 .
This means that
.Nm
tries version 2 and falls back to version 1
if version 2 is not available.
.It Cm ProxyCommand
Specifies the command to use to connect to the server.
The command
string extends to the end of the line, and is executed with
.Pa /bin/sh .
In the command string,
.Ql %h
will be substituted by the host name to
connect and
.Ql %p
by the port.
The command can be basically anything,
and should read from its standard input and write to its standard output.
It should eventually connect an
.Xr sshd 8
server running on some machine, or execute
.Ic sshd -i
somewhere.
Host key management will be done using the
HostName of the host being connected (defaulting to the name typed by
the user).
Note that
.Cm CheckHostIP
is not available for connects with a proxy command.
.Pp
.It Cm PubkeyAuthentication
Specifies whether to try public key authentication.
The argument to this keyword must be
.Dq yes
or
.Dq no .
The default is
.Dq yes .
This option applies to protocol version 2 only.
.It Cm RemoteForward
Specifies that a TCP/IP port on the remote machine be forwarded over
the secure channel to the specified host and port from the local machine.
The first argument must be a port number, and the second must be
.Ar host:port .
IPv6 addresses can be specified with an alternative syntax:
.Ar host/port .
Multiple forwardings may be specified, and additional
forwardings can be given on the command line.
Only the superuser can forward privileged ports.
.It Cm RhostsAuthentication
Specifies whether to try rhosts based authentication.
Note that this
declaration only affects the client side and has no effect whatsoever
on security.
Most servers do not permit RhostsAuthentication because it
is not secure (see
.Cm RhostsRSAAuthentication ) .
The argument to this keyword must be
.Dq yes
or
.Dq no .
The default is
.Dq no .
This option applies to protocol version 1 only.
.It Cm RhostsRSAAuthentication
Specifies whether to try rhosts based authentication with RSA host
authentication.
The argument must be
.Dq yes
or
.Dq no .
The default is
.Dq no .
This option applies to protocol version 1 only and requires
.Nm
to be setuid root.
.It Cm RSAAuthentication
Specifies whether to try RSA authentication.
The argument to this keyword must be
.Dq yes
or
.Dq no .
RSA authentication will only be
attempted if the identity file exists, or an authentication agent is
running.
The default is
.Dq yes .
Note that this option applies to protocol version 1 only.
.It Cm SmartcardDevice
Specifies which smartcard device to use. The argument to this keyword is
the device
.Nm
should use to communicate with a smartcard used for storing the user's
private RSA key. By default, no device is specified and smartcard support
is not activated.
.It Cm StrictHostKeyChecking
If this flag is set to
.Dq yes ,
.Nm
will never automatically add host keys to the
.Pa $HOME/.ssh/known_hosts
file, and refuses to connect to hosts whose host key has changed.
This provides maximum protection against trojan horse attacks,
however, can be annoying when the
.Pa /etc/ssh/ssh_known_hosts
file is poorly maintained, or connections to new hosts are
frequently made.
This option forces the user to manually
add all new hosts.
If this flag is set to
.Dq no ,
.Nm
will automatically add new host keys to the
user known hosts files.
If this flag is set to
.Dq ask ,
new host keys
will be added to the user known host files only after the user
has confirmed that is what they really want to do, and
.Nm
will refuse to connect to hosts whose host key has changed.
The host keys of
known hosts will be verified automatically in all cases.
The argument must be
.Dq yes ,
.Dq no
or
.Dq ask .
The default is
.Dq ask .
.It Cm UsePrivilegedPort
Specifies whether to use a privileged port for outgoing connections.
The argument must be
.Dq yes
or
.Dq no .
The default is
.Dq no .
Note that this option must be set to
.Dq yes
if
.Cm RhostsAuthentication
and
.Cm RhostsRSAAuthentication
authentications are needed with older servers.
.It Cm User
Specifies the user to log in as.
This can be useful when a different user name is used on different machines.
This saves the trouble of
having to remember to give the user name on the command line.
.It Cm UserKnownHostsFile
Specifies a file to use for the user
host key database instead of
.Pa $HOME/.ssh/known_hosts .
.It Cm XAuthLocation
Specifies the location of the
.Xr xauth 1
program.
The default is
.Pa /usr/X11R6/bin/xauth .
.El
d790 2
a791 7
The format of this file is described above.
This file is used by the
.Nm
client.
This file does not usually contain any sensitive information,
but the recommended permissions are read/write for the user, and not
accessible by others.
d826 2
a827 4
This file provides defaults for those
values that are not specified in the user's configuration file, and
for those users who do not have a configuration file.
This file must be world-readable.
d955 1
@


1.156
log
@change RhostsRSAAuthentication and RhostsAuthentication default to no
since ssh is no longer setuid root by default; ok markus@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.155 2002/06/09 22:15:15 stevesk Exp $
d1380 1
a1380 1
method is used, 
@


1.155
log
@update for no setuid root and ssh-keysign; ok deraadt@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.154 2002/06/08 05:17:01 markus Exp $
a1085 3
Disabling rhosts authentication may reduce
authentication time on slow connections when rhosts authentication is
not used.
d1094 1
a1094 1
.Dq yes .
d1104 1
a1104 1
.Dq yes .
@


1.154
log
@deprecate FallBackToRsh and UseRsh; patch from djm@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.153 2002/05/29 03:06:30 stevesk Exp $
d1108 3
a1110 1
This option applies to protocol version 1 only.
d1381 15
a1395 1
Since they are readable only by root
d1397 1
a1397 1
must be setuid root if these authentication methods are desired.
d1502 1
@


1.153
log
@spelling
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.152 2002/05/26 20:35:10 stevesk Exp $
d819 1
a819 2
Specifies the number of tries (one per second) to make before falling
back to rsh or exiting.
a845 15
.It Cm FallBackToRsh
Specifies that if connecting via
.Nm
fails due to a connection refused error (there is no
.Xr sshd 8
listening on the remote host),
.Xr rsh 1
should automatically be used instead (after a suitable warning about
the session being unencrypted).
The argument must be
.Dq yes
or
.Dq no .
The default is
.Dq no .
a1186 16
.It Cm UseRsh
Specifies that rlogin/rsh should be used for this host.
It is possible that the host does not at all support the
.Nm
protocol.
This causes
.Nm
to immediately execute
.Xr rsh 1 .
All other options (except
.Cm HostName )
are ignored if this has been specified.
The argument must be
.Dq yes
or
.Dq no .
@


1.152
log
@sort ChallengeResponseAuthentication; ok markus@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.151 2002/05/06 23:34:33 millert Exp $
d887 1
a887 1
binds local port forwardings to the loopback addresss.  This
@


1.151
log
@Kill/adjust r(login|exec)d? references now that those are no longer in
the tree.
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.150 2002/03/26 11:34:49 markus Exp $
d738 8
a1136 8
.It Cm ChallengeResponseAuthentication
Specifies whether to use challenge response authentication.
The argument to this keyword must be
.Dq yes
or
.Dq no .
The default is
.Dq yes .
@


1.150
log
@update to recent drafts
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.149 2002/03/21 15:17:26 jakob Exp $
d1454 1
a1454 1
.Xr rlogin 1
a1510 1
.Xr rlogin 1 ,
@


1.150.2.1
log
@Update to OpenSSH-3.2.2
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.151 2002/05/06 23:34:33 millert Exp $
d1454 1
a1454 1
.Nm rlogin
d1511 1
@


1.150.2.2
log
@Update to OpenSSH-3.2.3
@
text
@@


1.150.2.3
log
@Pull in OpenSSH-3.4
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.160 2002/06/22 11:51:39 naddy Exp $
d387 1
a387 1
option can be used to prevent logins to machines whose
d571 1
a571 1
option.
d577 1
a577 1
option.
d652 574
a1225 4
may additionally obtain configuration data from
a per-user configuration file and a system-wide configuration file.
The file format and configuration options are described in
.Xr ssh_config 5 .
d1360 7
a1366 2
The file format and configuration options are described in
.Xr ssh_config 5 .
d1401 4
a1404 2
The file format and configuration options are described in
.Xr ssh_config 5 .
d1411 1
a1411 15
If the protocol version 1
.Cm RhostsRSAAuthentication
method is used,
.Nm
must be setuid root, since the host key is readable only by root.
For protocol version 2,
.Nm
uses
.Xr ssh-keysign 8
to access the host keys for
.Cm HostbasedAuthentication .
This eliminates the requirement that
.Nm
be setuid root when that authentication method is used.
By default
d1413 1
a1413 1
is not setuid root.
a1517 2
.Xr ssh_config 5 ,
.Xr ssh-keysign 8 ,
@


1.150.2.4
log
@Update to OpenSSH 3.5
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.167 2002/09/27 15:46:21 stevesk Exp $
d51 1
a51 1
.Op Fl afgknqstvxACNTX1246
d356 3
a358 11
If the
.Cm ForwardAgent
variable is set to
.Dq yes
(or, see the description of the
.Fl A
and
.Fl a
options described later) and 
the user is using an authentication agent, the connection to the agent
is automatically forwarded to the remote side.
a396 7
.Pp
Agent forwarding should be enabled with caution.  Users with the
ability to bypass file permissions on the remote host (for the agent's
Unix-domain socket) can access the local agent through the forwarded
connection.  An attacker cannot obtain key material from the agent,
however they can perform operations on the keys that enable them to
authenticate using the identities loaded into the agent.
d518 9
a561 6
.Pp
X11 forwarding should be enabled with caution.  Users with the ability
to bypass file permissions on the remote host (for the user's X
authorization database) can access the local X11 display through the
forwarded connection.  An attacker may then be able to perform
activities such as keystroke monitoring.
d571 1
a571 1
option for protocol version 1.
d717 2
a718 2
.It Ev SSH_CONNECTION
Identifies the client and server ends of the connection.
d720 2
a721 2
four space-separated values: client ip-address, client port number,
server ip-address and server port number.
d745 1
a745 6
to the environment if the file exists and if users are allowed to
change their environment.
See the
.Cm PermitUserEnvironment
option in
.Xr sshd_config 5 .
@


1.150.2.5
log
@Merge OpenSSH 3.6.1
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.168 2003/03/28 10:11:43 jmc Exp $
a50 1
.Bk -words
a68 2
.Ek
.Bk -words
a79 1
.Ek
d364 1
a364 1
options described later) and
d406 4
a409 5
Agent forwarding should be enabled with caution.
Users with the ability to bypass file permissions on the remote host
(for the agent's Unix-domain socket)
can access the local agent through the forwarded connection.
An attacker cannot obtain key material from the agent,
d431 2
a432 2
cipher.
Its use is strongly discouraged due to cryptographic weaknesses.
d569 5
a573 5
X11 forwarding should be enabled with caution.
Users with the ability to bypass file permissions on the remote host
(for the user's X authorization database)
can access the local X11 display through the forwarded connection.
An attacker may then be able to perform activities such as keystroke monitoring.
d640 1
a640 2
remote machine.
Currently the SOCKS4 protocol is supported, and
@


1.149
log
@add built-in command line for adding new port forwardings on the fly.
based on a patch from brian wellington. ok markus@@.
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.148 2002/02/18 17:55:20 markus Exp $
d1527 2
a1528 2
.%N draft-ietf-secsh-architecture-09.txt
.%D July 2001
@


1.148
log
@-q: Fatal errors are _not_ displayed.
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.147 2002/02/09 17:37:34 deraadt Exp $
d300 6
@


1.147
log
@move ssh config files to /etc/ssh
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.146 2002/02/03 22:35:57 stevesk Exp $
a523 1
Only fatal errors are displayed.
@


1.146
log
@some KeepAlive cleanup/clarify; ok markus@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.145 2002/01/29 23:50:37 markus Exp $
d129 1
a129 1
.Pa /etc/ssh_known_hosts
d368 1
a368 1
.Pa /etc/ssh_known_hosts
d577 1
a577 1
.Pq Pa /etc/ssh_config
d652 1
a652 1
.Pq Pa /etc/ssh_config .
d890 1
a890 1
.Pa /etc/ssh_known_hosts .
d1148 1
a1148 1
.Pa /etc/ssh_known_hosts
d1316 1
a1316 1
.Pa /etc/ssh_known_hosts .
d1371 1
a1371 1
.It Pa /etc/ssh_known_hosts
d1394 1
a1394 1
.It Pa /etc/ssh_config
d1400 1
a1400 1
.It Pa /etc/ssh_host_key, /etc/ssh_host_dsa_key, /etc/ssh_host_rsa_key
d1435 1
a1435 1
.Pa /etc/ssh_known_hosts ,
d1472 1
a1472 1
.It Pa /etc/sshrc
@


1.145
log
@mention exit status; ok stevesk@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.144 2002/01/16 17:42:33 stevesk Exp $
d938 1
a938 1
Specifies whether the system should send keepalive messages to the
d953 1
a953 2
.Dq no
in both the server and the client configuration files.
@


1.144
log
@correct defaults for -i/IdentityFile; ok markus@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.143 2002/01/05 21:51:56 stevesk Exp $
d210 2
a211 2
When a user connects using the protocol version 2
different authentication methods are available.
d1493 4
@


1.143
log
@some missing and misplaced periods
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.142 2001/12/28 22:37:48 stevesk Exp $
d446 1
a446 1
Selects the file from which the identity (private key) for
d448 1
a448 1
Default is
d450 5
a454 1
in the user's home directory.
d922 2
a923 2
Specifies the file from which the user's RSA or DSA authentication identity
is read (default
d925 5
a929 1
in the user's home directory).
@


1.142
log
@document LogLevel DEBUG[123]; ok markus@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.141 2001/11/08 17:49:53 markus Exp $
d903 1
a903 1
.Dq ssh-rsa,ssh-dss
d1017 1
a1017 1
.Dq hostbased,publickey,keyboard-interactive,password
@


1.141
log
@mention setuid root requirements; noted by cnorris@@csc.UVic.ca; ok stevesk@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.140 2001/10/30 20:29:09 markus Exp $
d974 3
a976 2
QUIET, FATAL, ERROR, INFO, VERBOSE and DEBUG.
The default is INFO.
@


1.140
log
@ssh.1
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.139 2001/10/01 21:51:16 markus Exp $
d1392 9
@


1.139
log
@add NoHostAuthenticationForLocalhost; note that the hostkey is
now check for localhost, too.
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.138 2001/09/19 19:24:19 stevesk Exp $
d297 1
a297 1
to terminate (protocol version 1 only)
@


1.139.2.1
log
@Pull in patches from current (Errata 002):
Update to OpenSSH-3.0.1 via errata patch (Instead of using release tarball)
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.141 2001/11/08 17:49:53 markus Exp $
d297 1
a297 1
to terminate
a1391 9
.It Pa /etc/ssh_host_key, /etc/ssh_host_dsa_key, /etc/ssh_host_rsa_key
These three files contain the private parts of the host keys
and are used for
.Cm RhostsRSAAuthentication
and
.Cm HostbasedAuthentication .
Since they are readable only by root
.Nm
must be setuid root if these authentication methods are desired.
@


1.139.2.2
log
@Update to OpenSSH-3.1 on 3.0-stable branch
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.148 2002/02/18 17:55:20 markus Exp $
d129 1
a129 1
.Pa /etc/ssh/ssh_known_hosts
d210 2
a211 2
When a user connects using protocol version 2
similar authentication methods are available.
d368 1
a368 1
.Pa /etc/ssh/ssh_known_hosts
d446 1
a446 1
Selects a file from which the identity (private key) for
d448 1
a448 1
The default is
d450 1
a450 5
for protocol version 1, and
.Pa $HOME/.ssh/id_rsa
and
.Pa $HOME/.ssh/id_dsa
for protocol version 2.
d520 1
d573 1
a573 1
.Pq Pa /etc/ssh/ssh_config
d648 1
a648 1
.Pq Pa /etc/ssh/ssh_config .
d886 1
a886 1
.Pa /etc/ssh/ssh_known_hosts .
d903 1
a903 1
.Dq ssh-rsa,ssh-dss .
d918 2
a919 2
Specifies a file from which the user's RSA or DSA authentication identity
is read. The default is
d921 1
a921 5
for protocol version 1, and
.Pa $HOME/.ssh/id_rsa
and
.Pa $HOME/.ssh/id_dsa
for protocol version 2.
d930 1
a930 1
Specifies whether the system should send TCP keepalive messages to the
d945 2
a946 1
.Dq no .
d974 2
a975 3
QUIET, FATAL, ERROR, INFO, VERBOSE, DEBUG, DEBUG1, DEBUG2 and DEBUG3.
The default is INFO.  DEBUG and DEBUG1 are equivalent.  DEBUG2
and DEBUG3 each specify higher levels of verbose output.
d1016 1
a1016 1
.Dq hostbased,publickey,keyboard-interactive,password .
d1140 1
a1140 1
.Pa /etc/ssh/ssh_known_hosts
d1308 1
a1308 1
.Pa /etc/ssh/ssh_known_hosts .
d1363 1
a1363 1
.It Pa /etc/ssh/ssh_known_hosts
d1386 1
a1386 1
.It Pa /etc/ssh/ssh_config
d1392 1
a1392 1
.It Pa /etc/ssh/ssh_host_key, /etc/ssh/ssh_host_dsa_key, /etc/ssh/ssh_host_rsa_key
d1427 1
a1427 1
.Pa /etc/ssh/ssh_known_hosts ,
d1464 1
a1464 1
.It Pa /etc/ssh/sshrc
a1483 4
.Sh DIAGNOSTICS
.Nm
exits with the exit status of the remote command or with 255
if an error occurred.
@


1.139.2.3
log
@apply the necessary openbsd30_3.1.patch patch.
--
Ok'd by markus@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.139.2.2 2002/03/07 17:37:47 jason Exp $
d129 1
a129 1
.Pa /etc/ssh_known_hosts
d368 1
a368 1
.Pa /etc/ssh_known_hosts
d576 1
a576 1
.Pq Pa /etc/ssh_config
d651 1
a651 1
.Pq Pa /etc/ssh_config .
d889 1
a889 1
.Pa /etc/ssh_known_hosts .
d1147 1
a1147 1
.Pa /etc/ssh_known_hosts
d1315 1
a1315 1
.Pa /etc/ssh_known_hosts .
d1370 1
a1370 1
.It Pa /etc/ssh_known_hosts
d1393 1
a1393 1
.It Pa /etc/ssh_config
d1399 1
a1399 1
.It Pa /etc/ssh_host_key, /etc/ssh_host_dsa_key, /etc/ssh_host_rsa_key
d1434 1
a1434 1
.Pa /etc/ssh_known_hosts ,
d1471 1
a1471 1
.It Pa /etc/sshrc
@


1.139.2.4
log
@Update OpenSSH to version 3.2.2.
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.151 2002/05/06 23:34:33 millert Exp $
a299 6
.It Cm ~C
Open command line (only useful for adding port forwardings using the
.Fl L
and
.Fl R
options)
d1448 1
a1448 1
.Nm rlogin
d1505 1
d1521 2
a1522 2
.%N draft-ietf-secsh-architecture-12.txt
.%D January 2002
@


1.139.2.5
log
@Update OpenSSH to version 3.3 (with local changes, configuration files still
living in /etc and privsep user being nobody).
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.139.2.4 2002/05/17 00:03:24 miod Exp $
d387 1
a387 1
option can be used to prevent logins to machines whose
d571 1
a571 1
option.
d577 1
a577 1
option.
d652 574
a1225 4
may additionally obtain configuration data from
a per-user configuration file and a system-wide configuration file.
The file format and configuration options are described in
.Xr ssh_config 5 .
d1360 7
a1366 2
The file format and configuration options are described in
.Xr ssh_config 5 .
d1399 1
a1399 1
.It Pa /etc/ssh/ssh_config
d1401 5
a1405 3
The file format and configuration options are described in
.Xr ssh_config 5 .
.It Pa /etc/ssh/ssh_host_key, /etc/ssh/ssh_host_dsa_key, /etc/ssh/ssh_host_rsa_key
d1411 1
a1411 15
If the protocol version 1
.Cm RhostsRSAAuthentication
method is used,
.Nm
must be setuid root, since the host key is readable only by root.
For protocol version 2,
.Nm
uses
.Xr ssh-keysign 8
to access the host keys for
.Cm HostbasedAuthentication .
This eliminates the requirement that
.Nm
be setuid root when that authentication method is used.
By default
d1413 1
a1413 1
is not setuid root.
a1517 2
.Xr ssh_config 4 ,
.Xr ssh-keysign 8,
@


1.139.2.6
log
@There was an update to OpenSSH 3.4, and people rejoiced.
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.139.2.5 2002/06/22 07:23:18 miod Exp $
d824 1
a824 1
.It Pa /etc/ssh_config
d828 1
a828 1
.It Pa /etc/ssh_host_key, /etc/ssh_host_dsa_key, /etc/ssh_host_rsa_key
d955 2
a956 2
.Xr ssh_config 5 ,
.Xr ssh-keysign 8 ,
@


1.139.2.7
log
@Update to OpenSSH 3.5
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.167 2002/09/27 15:46:21 stevesk Exp $
d51 1
a51 1
.Op Fl afgknqstvxACNTX1246
d356 3
a358 11
If the
.Cm ForwardAgent
variable is set to
.Dq yes
(or, see the description of the
.Fl A
and
.Fl a
options described later) and 
the user is using an authentication agent, the connection to the agent
is automatically forwarded to the remote side.
a396 7
.Pp
Agent forwarding should be enabled with caution.  Users with the
ability to bypass file permissions on the remote host (for the agent's
Unix-domain socket) can access the local agent through the forwarded
connection.  An attacker cannot obtain key material from the agent,
however they can perform operations on the keys that enable them to
authenticate using the identities loaded into the agent.
d518 9
a561 6
.Pp
X11 forwarding should be enabled with caution.  Users with the ability
to bypass file permissions on the remote host (for the user's X
authorization database) can access the local X11 display through the
forwarded connection.  An attacker may then be able to perform
activities such as keystroke monitoring.
d571 1
a571 1
option for protocol version 1.
d717 2
a718 2
.It Ev SSH_CONNECTION
Identifies the client and server ends of the connection.
d720 2
a721 2
four space-separated values: client ip-address, client port number,
server ip-address and server port number.
d745 1
a745 6
to the environment if the file exists and if users are allowed to
change their environment.
See the
.Cm PermitUserEnvironment
option in
.Xr sshd_config 5 .
@


1.138
log
@add ClearAllForwardings ssh option and set it in scp and sftp; ok markus@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.137 2001/09/05 06:23:07 deraadt Exp $
d984 10
@


1.137
log
@avoid first person in manual pages
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.136 2001/08/30 16:04:35 stevesk Exp $
d770 16
@


1.136
log
@validate ports for LocalForward/RemoteForward.
add host/port alternative syntax for IPv6 (like -L/-R).
ok markus@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.135 2001/08/30 15:42:36 naddy Exp $
d498 1
a498 1
This is useful if you just want to forward ports
d510 1
a510 1
This can be used if your firewall does
d714 2
a715 2
This option is useful in scripts and other batch jobs where you have no
user to supply the password.
d893 1
a893 1
or if you have multiple servers running on a single host.
d1112 2
a1113 2
This provides maximum protection against trojan horse attacks.
However, it can be somewhat annoying if you don't have good
d1115 2
a1116 2
files installed and frequently
connect to new hosts.
d1148 1
a1148 1
Note that you need to set this option to
d1150 1
a1150 1
if you want to use
d1154 1
a1154 1
with older servers.
d1157 1
a1157 1
This can be useful if you have a different user name on different machines.
d1305 1
a1305 1
where you wish to log in using protocol version 1 RSA authentication.
d1313 1
a1313 1
where you wish to log in using protocol version 2 DSA/RSA authentication.
d1391 1
a1391 1
If your server machine does not have the client's host key in
d1393 1
a1393 1
you can store it in
@


1.135
log
@add -D to synopsis line; ok markus@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.134 2001/08/29 23:39:40 stevesk Exp $
d946 1
a946 1
the secure channel to given host:port from the remote machine.
d948 3
a950 1
host:port.
d1042 1
a1042 1
the secure channel to given host:port from the local machine.
d1044 3
a1046 1
host:port.
@


1.134
log
@additional documentation for GatewayPorts; ok markus@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.133 2001/08/29 23:13:11 stevesk Exp $
d77 1
@


1.133
log
@document -D and DynamicForward; ok markus@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.132 2001/08/28 15:39:48 markus Exp $
d851 9
@


1.132
log
@allow: ssh -F configfile host
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.131 2001/08/22 17:45:16 stevesk Exp $
d609 14
d790 11
@


1.131
log
@document cipher des for protocol 1; ok deraadt@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.130 2001/08/22 16:21:21 stevesk Exp $
d60 1
d568 8
@


1.130
log
@hostname not optional; ok markus@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.129 2001/08/21 21:47:41 stevesk Exp $
d392 1
a392 1
.It Fl c Ar blowfish|3des
a398 4
It is presumably more secure than the
.Ar des
cipher which is no longer fully supported in
.Nm ssh .
d402 8
d721 2
a722 1
.Dq blowfish
d724 1
a724 1
.Dq 3des
d726 8
@


1.129
log
@minor typos and cleanup
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.128 2001/08/16 20:14:57 stevesk Exp $
d47 1
a47 1
.Op Ar hostname | user@@hostname
d76 1
a76 1
.Op Ar hostname | user@@hostname
@


1.128
log
@document case sensitivity for ssh, sshd and key file
options and arguments; ok markus@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.127 2001/08/14 17:54:29 stevesk Exp $
d1155 1
a1155 1
Set to point the user's mailbox.
d1185 1
a1185 1
indicates the path of a unix-domain socket used to communicate with the
d1219 1
a1219 1
Records host keys for all hosts the user has logged into (that are not
@


1.127
log
@consistent documentation and example of ``-o ssh_option'' for sftp and
scp; document keyword=argument for ssh.
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.126 2001/08/01 22:16:45 markus Exp $
d654 2
a655 2
keywords and their meanings are as follows (note that the
configuration files are case-sensitive):
@


1.126
log
@refer to current ietf drafts for protocol v2
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.125 2001/07/31 09:28:44 jakob Exp $
d495 1
a495 1
Can be used to give options in the format used in the config file.
a497 1
The option has the same format as a line in the configuration file.
d615 2
a616 1
obtains configuration data from the following sources (in this order):
d641 12
@


1.125
log
@add 'SmartcardDevice' client option to specify which smartcard device is used
to access a smartcard used for storing the user's private RSA key. ok markus@@.
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.124 2001/07/25 14:35:18 markus Exp $
d1402 2
a1403 2
.%N draft-ietf-secsh-architecture-07.txt
.%D January 2001
@


1.124
log
@cleanup connect(); connection_attempts 4 -> 1; from eivind@@freebsd.org
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.123 2001/07/23 12:47:05 markus Exp $
d451 6
d1025 7
@


1.123
log
@sync PreferredAuthentications
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.122 2001/07/22 22:04:19 markus Exp $
d735 1
a735 1
The default is 4.
@


1.122
log
@enable challenge-response auth by default; ok millert@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.121 2001/07/22 21:32:42 pvalchev Exp $
d212 4
a215 6
the client will try to authenticate first using the public key method;
if this method fails password authentication is attempted,
and finally if this method fails keyboard-interactive authentication
is attempted.
If this method fails password authentication is
tried.
d913 1
a913 1
.Dq publickey,hostbased,password,keyboard-interactive
@


1.121
log
@There is no option "Compress", point to "Compression" instead; ok markus
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.120 2001/07/20 18:41:51 stevesk Exp $
a1014 3
Currently there is only support for
.Xr skey 1
authentication.
d1020 1
a1020 1
.Dq no .
@


1.120
log
@"the" command line
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.119 2001/07/19 00:41:44 stevesk Exp $
d558 1
a558 1
.Cm Compress
@


1.119
log
@escape chars are below now
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.118 2001/06/26 17:25:34 markus Exp $
d352 1
a352 1
command line or in a configuration file.
d355 1
a355 1
be specified either on command line or in a configuration file.
@


1.118
log
@document SSH_ASKPASS; fubob@@MIT.EDU
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.117 2001/06/23 17:48:19 itojun Exp $
d276 1
a276 1
(or by following the tilde by a character other than those described above).
@


1.117
log
@kill whitespace at EOL.
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.116 2001/06/23 02:34:31 markus Exp $
d1141 23
@


1.116
log
@get rid of known_hosts2, use it for hostkey lookup, but do not modify.
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.115 2001/06/22 21:55:49 markus Exp $
d272 1
a272 1
through the use of an escape character. 
d281 1
a281 1
configuration directive or on the command line by the 
d513 2
a514 2
May be used to request invocation of a subsystem on the remote system. Subsystems are a feature of the SSH2 protocol which facilitate the use 
of SSH as a secure transport for other applications (eg. sftp). The 
d701 1
a701 1
.Dq blowfish 
d886 1
a886 1
Specifies the MAC (message authentication code) algorithms 
d909 2
a910 2
Specifies the order in which the client should try protocol 2 
authentication methods. This allows a client to prefer one method (e.g. 
d982 1
a982 1
is not secure (see 
@


1.115
log
@merge authorized_keys2 into authorized_keys.
authorized_keys2 is used for backward compat.
(just append authorized_keys2 to authorized_keys).
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.114 2001/06/22 10:17:51 mpech Exp $
d364 1
a364 1
RSA host keys are stored in
a365 3
and
host keys used in the protocol version 2 are stored in
.Pa $HOME/.ssh/known_hosts2
d367 1
a367 1
Additionally, the files
d369 1
a369 3
and
.Pa /etc/ssh_known_hosts2
are automatically checked for known hosts.
d795 1
a795 1
Specifies a file to use for the protocol version 1 global
a797 4
.It Cm GlobalKnownHostsFile2
Specifies a file to use for the protocol version 2 global
host key database instead of
.Pa /etc/ssh_known_hosts2 .
d1030 1
a1030 3
and
.Pa $HOME/.ssh/known_hosts2
files, and refuses to connect to hosts whose host key has changed.
a1033 2
and
.Pa /etc/ssh_known_hosts2
d1080 1
a1080 1
Specifies a file to use for the protocol version 1 user
a1082 4
.It Cm UserKnownHostsFile2
Specifies a file to use for the protocol version 2 user
host key database instead of
.Pa $HOME/.ssh/known_hosts2 .
d1175 1
a1175 1
.It Pa $HOME/.ssh/known_hosts, $HOME/.ssh/known_hosts2
d1178 1
a1178 4
.Pa /etc/ssh_known_hosts
for protocol version 1 or
.Pa /etc/ssh_known_hosts2
for protocol version 2).
d1229 2
d1233 1
a1233 1
.It Pa /etc/ssh_known_hosts, /etc/ssh_known_hosts2
d1235 1
a1235 5
.Pa /etc/ssh_known_hosts
contains RSA and
.Pa /etc/ssh_known_hosts2
contains RSA or DSA keys for protocol version 2.
These files should be prepared by the
d1241 1
a1241 2
by spaces): system name, number of bits in modulus, public exponent,
modulus, and optional comment field.
@


1.114
log
@o) .Sh AUTHOR -> .Sh AUTHORS;
o) remove unnecessary .Pp;
o) better -mdoc style;
o) typo;
o) sort SEE ALSO;

aaron@@ ok
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.113 2001/05/19 16:46:19 markus Exp $
d227 1
a227 1
.Pa $HOME/.ssh/authorized_keys2
d1227 1
a1227 1
.Pa $HOME/.ssh/authorized_keys2
d1245 1
a1245 1
Lists the RSA keys that can be used for logging in as this user.
a1248 8
In the simplest form the format is the same as the .pub
identity files (that is, each line contains the number of bits in
modulus, public exponent, modulus, and comment fields, separated by
spaces).
This file is not highly sensitive, but the recommended
permissions are read/write for the user, and not accessible by others.
.It Pa $HOME/.ssh/authorized_keys2
Lists the public keys (RSA/DSA) that can be used for logging in as this user.
@


1.113
log
@document MACs defaults with .Dq
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.112 2001/05/19 16:32:16 markus Exp $
d992 1
a992 1
.Cm RhostsRSAAuthentication ).
@


1.112
log
@change preferredauthentication order to
	publickey,hostbased,password,keyboard-interactive
document that hostbased defaults to no, document order
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.111 2001/05/17 21:34:15 markus Exp $
d901 1
a901 5
.Pp
.Bd -literal
  ``hmac-md5,hmac-sha1,hmac-ripemd160,hmac-ripemd160@@openssh.com,
    hmac-sha1-96,hmac-md5-96''
.Ed
@


1.111
log
@no spaces in PreferredAuthentications; meixner@@rbg.informatik.tu-darmstadt.de
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.110 2001/05/15 22:04:01 deraadt Exp $
d815 1
a815 1
.Dq yes .
d928 1
a928 1
.Dq publickey,password,keyboard-interactive
@


1.110
log
@X11 forwarding details improved
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.109 2001/05/04 14:21:55 stevesk Exp $
d928 1
a928 1
.Dq publickey, password, keyboard-interactive
@


1.109
log
@typos
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.108 2001/04/30 11:18:52 markus Exp $
d307 10
a316 1
If the user is using X11 (the
@


1.108
log
@implement 'ssh -b bind_address' like 'telnet -b'
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.107 2001/04/22 23:58:36 markus Exp $
d510 1
a510 1
of SSH as a secure transport for other application (eg. sftp). The 
d811 1
a811 1
Specfies the protocol version 2 host key algorithms
@


1.107
log
@document hostbased and other cleanup
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.106 2001/04/22 13:32:27 markus Exp $
d52 1
d387 3
d674 7
@


1.107.2.1
log
@Pull in OpenSSH-2.9.9
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.138 2001/09/19 19:24:19 stevesk Exp $
d47 1
a47 1
.Ar hostname | user@@hostname
a51 1
.Op Fl b Ar bind_address
a58 1
.Op Fl F Ar configfile
d75 1
a75 2
.Op Fl D Ar port
.Ar hostname | user@@hostname
d211 6
a216 4
the client will try to authenticate first using the hostbased method;
if this method fails public key authentication is attempted,
and finally if this method fails keyboard-interactive and
password authentication are tried.
d226 1
a226 1
.Pa $HOME/.ssh/authorized_keys
d271 1
a271 1
through the use of an escape character.
d275 1
a275 1
or by following the tilde by a character other than those described below.
d280 1
a280 1
configuration directive or on the command line by the
d306 1
a306 10
If the
.Cm ForwardX11
variable is set to
.Dq yes
(or, see the description of the
.Fl X
and
.Fl x
options described later)
and the user is using X11 (the
d342 1
a342 1
the command line or in a configuration file.
d345 1
a345 1
be specified either on the command line or in a configuration file.
d354 1
a354 1
Host keys are stored in
d356 3
d360 1
a360 1
Additionally, the file
d362 3
a364 1
is automatically checked for known hosts.
d386 1
a386 4
.It Fl b Ar bind_address
Specify the interface to transmit from on machines with multiple
interfaces or aliased addresses.
.It Fl c Ar blowfish|3des|des
d393 4
a399 8
.Ar des
is only supported in the
.Nm
client for interoperability with legacy protocol 1 implementations
that do not support the
.Ar 3des
cipher.  Its use is strongly discouraged due to cryptographic
weaknesses.
a444 6
.It Fl I Ar smartcard_device
Specifies which smartcard device to use. The argument is
the device
.Nm
should use to communicate with a smartcard used for storing the user's
private RSA key.
d480 1
a480 1
This is useful for just forwarding ports
d483 1
a483 1
Can be used to give options in the format used in the configuration file.
d486 1
d493 1
a493 1
This can be used if a firewall does
d505 2
a506 2
May be used to request invocation of a subsystem on the remote system. Subsystems are a feature of the SSH2 protocol which facilitate the use
of SSH as a secure transport for other applications (eg. sftp). The
d550 1
a550 1
.Cm Compression
a551 8
.It Fl F Ar configfile
Specifies an alternative per-user configuration file.
If a configuration file is given on the command line,
the system-wide configuration file
.Pq Pa /etc/ssh_config
will be ignored.
The default for the per-user configuration file is
.Pa $HOME/.ssh/config .
a584 14
.It Fl D Ar port
Specifies a local
.Dq dynamic
application-level port forwarding.
This works by allocating a socket to listen to
.Ar port
on the local side, and whenever a connection is made to this port, the
connection is forwarded over the secure channel, and the application
protocol is then used to determine where to connect to from the
remote machine.  Currently the SOCKS4 protocol is supported, and
.Nm
will act as a SOCKS4 server.
Only root can forward privileged ports.
Dynamic port forwardings can also be specified in the configuration file.
d604 1
a604 2
obtains configuration data from the following sources in
the following order:
a628 12
Configuration options may be separated by whitespace or
optional whitespace and exactly one
.Ql = ;
the latter format is useful to avoid the need to quote whitespace
when specifying configuration options using the
.Nm ssh ,
.Nm scp
and
.Nm sftp
.Fl o
option.
.Pp
d630 2
a631 2
keywords and their meanings are as follows (note that
keywords are case-insensitive and arguments are case-sensitive):
d662 2
a663 2
This option is useful in scripts and other batch jobs where no user
is present to supply the password.
a669 7
.It Cm BindAddress
Specify the interface to transmit from on machines with multiple
interfaces or aliased addresses.
Note that this option does not work if
.Cm UsePrivilegedPort
is set to
.Dq yes .
d686 1
a686 2
.Dq blowfish ,
.Dq 3des ,
d688 1
a688 1
.Dq des
a689 8
.Ar des
is only supported in the
.Nm
client for interoperability with legacy protocol 1 implementations
that do not support the
.Ar 3des
cipher.  Its use is strongly discouraged due to cryptographic
weaknesses.
a701 16
.It Cm ClearAllForwardings
Specifies that all local, remote and dynamic port forwardings
specified in the configuration files or on the command line be
cleared.  This option is primarily useful when used from the
.Nm
command line to clear port forwardings set in
configuration files, and is automatically set by
.Xr scp 1
and
.Xr sftp 1 .
The argument must be
.Dq yes
or
.Dq no .
The default is
.Dq no .
d722 1
a722 12
The default is 1.
.It Cm DynamicForward
Specifies that a TCP/IP port on the local machine be forwarded
over the secure channel, and the application
protocol is then used to determine where to connect to from the
remote machine.  The argument must be a port number.
Currently the SOCKS4 protocol is supported, and
.Nm
will act as a SOCKS4 server.
Multiple forwardings may be specified, and
additional forwardings can be given on the command line.  Only
the superuser can forward privileged ports.
a772 9
By default,
.Nm
binds local port forwardings to the loopback addresss.  This
prevents other remote hosts from connecting to forwarded ports.
.Cm GatewayPorts
can be used to specify that
.Nm
should bind local port forwardings to the wildcard address,
thus allowing remote hosts to connect to forwarded ports.
d780 1
a780 1
Specifies a file to use for the global
d783 4
d795 1
a795 1
.Dq no .
d800 1
a800 1
Specifies the protocol version 2 host key algorithms
d809 1
a809 1
or for multiple servers running on a single host.
d862 1
a862 1
the secure channel to the specified host and port from the remote machine.
d864 1
a864 3
.Ar host:port .
IPv6 addresses can be specified with an alternative syntax:
.Ar host/port .
d875 1
a875 1
Specifies the MAC (message authentication code) algorithms
d881 5
a885 1
.Dq hmac-md5,hmac-sha1,hmac-ripemd160,hmac-sha1-96,hmac-md5-96 .
d902 2
a903 2
Specifies the order in which the client should try protocol 2
authentication methods. This allows a client to prefer one method (e.g.
d908 1
a908 1
.Dq hostbased,publickey,keyboard-interactive,password
d960 1
a960 1
the secure channel to the specified host and port from the local machine.
d962 1
a962 3
.Ar host:port .
IPv6 addresses can be specified with an alternative syntax:
.Ar host/port .
d975 2
a976 2
is not secure (see
.Cm RhostsRSAAuthentication ) .
d1008 3
d1016 1
a1016 8
.Dq yes .
.It Cm SmartcardDevice
Specifies which smartcard device to use. The argument to this keyword is
the device
.Nm
should use to communicate with a smartcard used for storing the user's
private RSA key. By default, no device is specified and smartcard support
is not activated.
d1023 5
a1027 3
file, and refuses to connect to hosts whose host key has changed.
This provides maximum protection against trojan horse attacks,
however, can be annoying when the
d1029 4
a1032 2
file is poorly maintained, or connections to new hosts are
frequently made.
d1064 1
a1064 1
Note that this option must be set to
d1066 1
a1066 1
if
d1070 1
a1070 1
authentications are needed with older servers.
d1073 1
a1073 1
This can be useful when a different user name is used on different machines.
d1077 1
a1077 1
Specifies a file to use for the user
d1080 4
d1136 1
a1136 1
Set to the path of the user's mailbox.
a1141 23
.It Ev SSH_ASKPASS
If
.Nm
needs a passphrase, it will read the passphrase from the current
terminal if it was run from a terminal.
If
.Nm
does not have a terminal associated with it but
.Ev DISPLAY
and
.Ev SSH_ASKPASS
are set, it will execute the program specified by
.Ev SSH_ASKPASS
and open an X11 window to read the passphrase.
This is particularly useful when calling
.Nm
from a
.Pa .Xsession
or related script.
(Note that on some machines it
may be necessary to redirect the input from
.Pa /dev/null
to make this work.)
d1143 1
a1143 1
Identifies the path of a unix-domain socket used to communicate with the
d1176 2
a1177 2
.It Pa $HOME/.ssh/known_hosts
Records host keys for all hosts the user has logged into that are not
d1179 4
a1182 1
.Pa /etc/ssh_known_hosts .
d1205 1
a1205 1
where the user wishes to log in using protocol version 1 RSA authentication.
d1211 1
a1211 1
.Pa $HOME/.ssh/authorized_keys
d1213 1
a1213 1
where the user wishes to log in using protocol version 2 DSA/RSA authentication.
d1229 1
a1229 1
Lists the public keys (RSA/DSA) that can be used for logging in as this user.
d1234 3
a1236 1
identity files.
d1239 5
a1243 1
.It Pa /etc/ssh_known_hosts
d1245 5
a1249 1
This file should be prepared by the
d1255 2
a1256 1
by spaces): system name, public key and optional comment field.
d1302 1
a1302 1
If the server machine does not have the client's host key in
d1304 1
a1304 1
it can be stored in
d1386 2
a1387 2
.%N draft-ietf-secsh-architecture-09.txt
.%D July 2001
@


1.107.2.2
log
@Merge OpenSSH 3.0
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.107.2.1 2001/09/27 19:03:55 jason Exp $
a983 10
.It Cm NoHostAuthenticationForLocalhost
This option can be used if the home directory is shared across machines.
In this case localhost will refer to a different machine on each of
the machines and the user will get many warnings about changed host keys.
However, this option disables host authentication for localhost.
The argument to this keyword must be
.Dq yes
or
.Dq no .
The default is to check the host key for localhost.
@


1.107.2.3
log
@Merge OpenSSH 3.0.1.
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.107.2.2 2001/11/15 00:15:19 miod Exp $
d297 1
a297 1
to terminate
a1391 9
.It Pa /etc/ssh_host_key, /etc/ssh_host_dsa_key, /etc/ssh_host_rsa_key
These three files contain the private parts of the host keys
and are used for
.Cm RhostsRSAAuthentication
and
.Cm HostbasedAuthentication .
Since they are readable only by root
.Nm
must be setuid root if these authentication methods are desired.
@


1.107.2.4
log
@Merge OpenSSH 3.1, keeping /etc as configuration files directory.
(i.e. OpenSSH 3.1 + openbsd29_3.1.patch)
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.148 2002/02/18 17:55:20 markus Exp $
d210 2
a211 2
When a user connects using protocol version 2
similar authentication methods are available.
d446 1
a446 1
Selects a file from which the identity (private key) for
d448 1
a448 1
The default is
d450 1
a450 5
for protocol version 1, and
.Pa $HOME/.ssh/id_rsa
and
.Pa $HOME/.ssh/id_dsa
for protocol version 2.
d520 1
d903 1
a903 1
.Dq ssh-rsa,ssh-dss .
d918 2
a919 2
Specifies a file from which the user's RSA or DSA authentication identity
is read. The default is
d921 1
a921 5
for protocol version 1, and
.Pa $HOME/.ssh/id_rsa
and
.Pa $HOME/.ssh/id_dsa
for protocol version 2.
d930 1
a930 1
Specifies whether the system should send TCP keepalive messages to the
d945 2
a946 1
.Dq no .
d974 2
a975 3
QUIET, FATAL, ERROR, INFO, VERBOSE, DEBUG, DEBUG1, DEBUG2 and DEBUG3.
The default is INFO.  DEBUG and DEBUG1 are equivalent.  DEBUG2
and DEBUG3 each specify higher levels of verbose output.
d1016 1
a1016 1
.Dq hostbased,publickey,keyboard-interactive,password .
a1483 4
.Sh DIAGNOSTICS
.Nm
exits with the exit status of the remote command or with 255
if an error occurred.
@


1.107.2.5
log
@Upgrade to OpenSSH 3.2.3.

Except for improbable compilation error fixes, this should be the last
commit made to the 2.9-STABLE branche. Have fun upgrading.
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.151 2002/05/06 23:34:33 millert Exp $
a299 6
.It Cm ~C
Open command line (only useful for adding port forwardings using the
.Fl L
and
.Fl R
options)
d1448 1
a1448 1
.Nm rlogin
d1505 1
d1521 2
a1522 2
.%N draft-ietf-secsh-architecture-12.txt
.%D January 2002
@


1.106
log
@xref draft-ietf-secsh-*
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.105 2001/04/22 08:13:30 djm Exp $
d113 1
a113 1
The second (and primary) authentication method is the
d208 9
a216 3
different authentication methods are available:
At first, the client attempts to authenticate using the public key method.
If this method fails password authentication is tried.
d219 1
a219 2
in the previous section except that the DSA or RSA algorithm is used
instead.
d233 4
a236 2
This protocol 2 implementation does not yet support Kerberos or
S/Key authentication.
d296 1
a296 1
to terminate (this does not currently work for SSH protocol version 2)
d583 2
d657 1
d700 1
a700 2
    aes192-cbc,aes256-cbc,rijndael128-cbc,rijndael192-cbc,
    rijndael256-cbc,rijndael-cbc@@lysator.liu.se''
d716 1
a722 9
.It Cm PubkeyAuthentication
Specifies whether to try public key authentication.
The argument to this keyword must be
.Dq yes
or
.Dq no .
The default is
.Dq yes .
Note that this option applies to protocol version 2 only.
d787 17
d807 1
a807 1
in the known_hosts files.
a809 5
.It Cm HostKeyAlgorithms
Specfies the protocol version 2 host key algorithms
that the client wants to use in order of preference.
The default for this option is:
.Dq ssh-rsa,ssh-dss
d818 1
a818 1
Specifies the file from which the user's RSA authentication identity
a897 1
Note that this option applies to both protocol version 1 and 2.
d949 9
d975 2
a976 1
is not secure (see RhostsRSAAuthentication).
d983 1
d993 1
d1064 3
a1066 3
Note that setting this option to
.Dq no
turns off
d1070 1
a1070 1
for older servers.
d1124 3
a1126 1
The user should normally not set DISPLAY explicitly, as that
d1240 1
a1240 1
Lists the public keys (DSA/RSA) that can be used for logging in as this user.
d1248 1
a1248 1
contains DSA or RSA keys for protocol version 2.
@


1.105
log
@typos spotted by stevesk@@; ok deraadt@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.104 2001/04/20 07:17:51 djm Exp $
d1353 11
@


1.104
log
@Split out and improve escape character documentation, mention ~R in
~? help text; ok markus@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.103 2001/04/17 10:53:26 markus Exp $
d264 1
a264 1
through the use of an escape charater. 
d293 2
a294 2
Request rekeying of connection (only useful for SSH protocol version 2 and if
the peer supports it)
@


1.103
log
@add HostKeyAlgorithms; based on patch from res@@shore.net; ok provos@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.102 2001/04/10 09:13:22 itojun Exp $
d246 1
a246 24
user can disconnect with
.Ic ~. ,
and suspend
.Nm
with
.Ic ~^Z .
All forwarded connections can be listed with
.Ic ~#
and if
the session blocks waiting for forwarded X11 or TCP/IP
connections to terminate, it can be backgrounded with
.Ic ~&
(this should not be used while the user shell is active, as it can cause the
shell to hang).
All available escapes can be listed with
.Ic ~? .
.Pp
A single tilde character can be sent as
.Ic ~~
(or by following the tilde by a character other than those described above).
The escape character must always follow a newline to be interpreted as
special.
The escape character can be changed in configuration files
or on the command line.
d260 36
@


1.102
log
@document id_rsa{.pub,}.  markus ok
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.101 2001/04/05 15:45:43 markus Exp $
d779 5
@


1.101
log
@ssh defaults to protocol v2; from quisar@@quisar.ambre.net
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.100 2001/03/26 15:47:59 stevesk Exp $
d215 1
a215 1
The client uses his private key
d217 2
d1141 3
a1143 2
.It Pa $HOME/.ssh/identity, $HOME/.ssh/id_dsa
Contains the RSA and the DSA authentication identity of the user.
d1153 1
a1153 1
.It Pa $HOME/.ssh/identity.pub, $HOME/.ssh/id_dsa.pub
d1161 1
a1161 1
where you wish to log in using RSA authentication.
d1164 2
d1169 1
a1169 1
where you wish to log in using DSA authentication.
@


1.100
log
@document more defaults; misc. cleanup.  ok markus@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.99 2001/03/19 12:49:51 djm Exp $
d887 1
a887 1
.Dq 1,2 .
d890 2
a891 2
tries version 1 and falls back to version 2
if version 1 is not available.
@


1.99
log
@document PreferredAuthentications options; ok markus@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.98 2001/03/08 00:15:48 markus Exp $
d643 2
d648 1
a648 1
ssh will additionally check the host ip address in the
d655 2
d684 2
d687 1
a687 1
Specifies the compression level to use if compression is enable.
d697 1
d704 2
d732 2
d863 2
d939 2
a943 1
This is the primary authentication method for most sites.
d948 2
d959 2
@


1.98
log
@turn off useprivilegedports by default. only rhost-auth needs
this. older sshd's may need this, too.
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.97 2001/03/07 04:05:58 deraadt Exp $
d856 8
@


1.97
log
@removed dated comment
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.96 2001/03/07 01:19:06 deraadt Exp $
d993 1
a993 1
.Dq yes .
@


1.96
log
@the name "secure shell" is boring, noone ever uses it
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.95 2001/03/05 17:40:48 stevesk Exp $
a1283 3
.It Pa libcrypto.so.X.1
A version of this library which includes support for the RSA algorithm
is required for proper operation.
@


1.95
log
@more ssh_known_hosts2 documentation; ok markus@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.94 2001/03/05 15:56:16 deraadt Exp $
d43 1
a43 1
.Nd OpenSSH secure shell client (remote login program)
d79 1
a79 1
(Secure Shell) is a program for logging into a remote machine and for
@


1.94
log
@switch to aes128-cbc/hmac-md5 by default in SSH2 -- faster; provos & markus ok
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.93 2001/03/02 18:54:31 deraadt Exp $
d753 2
a754 1
Specifies a file to use instead of
d756 4
d1007 2
a1008 1
Specifies a file to use instead of
d1010 4
d1104 1
a1104 1
.It Pa $HOME/.ssh/known_hosts
d1107 4
a1110 1
.Pa /etc/ssh_known_hosts ) .
@


1.93
log
@make copyright lines the same format
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.92 2001/02/22 21:57:26 markus Exp $
d231 1
a231 1
and integrity (hmac-sha1, hmac-md5).
d670 1
a670 1
  ``3des-cbc,blowfish-cbc,cast128-cbc,arcfour,aes128-cbc,
d834 1
a834 1
  ``hmac-sha1,hmac-md5,hmac-ripemd160,hmac-ripemd160@@openssh.com,
@


1.92
log
@typos/grammar from matt@@anzen.com
@
text
@d13 3
a15 3
.\" Copyright (c) 1999,2000 Markus Friedl. All rights reserved.
.\" Copyright (c) 1999 Aaron Campbell. All rights reserved.
.\" Copyright (c) 1999 Theo de Raadt. All rights reserved.
d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.91 2001/02/11 12:59:25 markus Exp $
@


1.91
log
@1) clean up the MAC support for SSH-2
2) allow you to specify the MAC with 'ssh -m'
3) or the 'MACs' keyword in ssh(d)_config
4) add hmac-{md5,sha1}-96
	ok stevesk@@, provos@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.90 2001/02/10 16:03:29 markus Exp $
d277 1
a277 1
machine exists and all X11 and TCP/IP connections have been closed.
d325 1
a325 1
electronic purse; another is going trough firewalls.
d1199 1
a1199 1
One some machines this file may need to be
@


1.90
log
@add xref Ciphers to -c
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.89 2001/02/10 15:48:53 stevesk Exp $
d56 1
d429 7
d825 12
@


1.89
log
@remove mapping of argv[0] -> hostname; ok markus@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.88 2001/02/09 18:18:26 provos Exp $
d377 1
a377 1
.It Fl c Ar "3des-cbc,blowfish-cbc,arcfour,cast128-cbc"
d380 3
a382 2
Protocol version 2 supports 3DES, Blowfish, and CAST128 in CBC mode
and Arcfour.
@


1.88
log
@correct default ciphers
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.87 2001/02/08 19:22:38 itojun Exp $
a568 16
.Pp
If
.Nm
is not invoked with one of the standard program names
.Pf ( Dq ssh ,
.Dq slogin ,
.Dq rsh ,
.Dq rlogin ,
or
.Dq remsh ) ,
it uses this name as its
.Ar hostname
argument.
This is consistent with traditional
.Xr rsh 1
behavior.
@


1.87
log
@drop references to ssl(8).  markus ok
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.86 2001/02/06 23:05:44 jakob Exp $
d675 6
a680 1
.Dq 3des-cbc,blowfish-cbc,cast128-cbc,arcfour,aes128-cbc .
@


1.86
log
@add missing -1 option
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.85 2001/02/06 23:03:24 jakob Exp $
d1283 1
a1283 2
.Xr sshd 8 ,
.Xr ssl 8
@


1.85
log
@add -1 option (force protocol version 1). ok markus@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.84 2001/02/04 15:10:44 markus Exp $
d51 1
a51 1
.Op Fl afgknqstvxACNPTX246
@


1.84
log
@typo; dpo@@club-internet.fr
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.83 2001/02/04 11:11:55 djm Exp $
d552 4
@


1.83
log
@Basic interactive sftp client; ok theo@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.82 2001/02/03 17:03:05 stevesk Exp $
d1115 1
a1115 1
never used automatically and are not necessary; they is only provided for
@


1.82
log
@typos; ok markus@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.81 2001/02/03 10:19:50 markus Exp $
d1274 1
@


1.81
log
@Skey is now called ChallengeResponse
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.80 2001/01/29 12:36:10 djm Exp $
d756 2
a757 2
the kown_hosts files.
This option is useful for tunneling ssh connection
@


1.80
log
@Allow invocation of sybsystem by commandline (-s); ok markus@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.79 2001/01/28 20:36:16 stevesk Exp $
d917 3
a919 2
.It Cm SkeyAuthentication
Specifies whether to use
@


1.79
log
@``StrictHostKeyChecking ask'' documentation and small cleanup.
ok markus@@
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.78 2001/01/28 10:24:04 markus Exp $
d51 1
a51 1
.Op Fl afgknqtvxACNPTX246
d473 4
@


1.78
log
@cleanup AUTHORS sections
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.77 2001/01/18 16:20:22 markus Exp $
d927 1
a927 1
ssh will never automatically add host keys to the
d931 1
a931 1
files, and refuses to connect hosts whose host key has changed.
d938 15
a952 5
connect new hosts.
Basically this option forces the user to manually
add any new hosts.
Normally this option is disabled, and new hosts
will automatically be added to the known host files.
d954 1
a954 1
known hosts will be verified automatically in either case.
d956 2
a957 1
.Dq yes
d959 3
a961 1
.Dq no .
@


1.77
log
@log() is at pri=LOG_INFO, since LOG_NOTICE goes to /dev/console on many systems
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.76 2001/01/07 11:28:06 markus Exp $
d1244 8
a1251 31
OpenSSH
is a derivative of the original (free) ssh 1.2.12 release by Tatu Ylonen,
but with bugs removed and newer features re-added.
Rapidly after the
1.2.12 release, newer versions of the original ssh bore successively
more restrictive licenses, and thus demand for a free version was born.
.Pp
This version of OpenSSH
.Bl -bullet
.It
has all components of a restrictive nature (i.e., patents, see
.Xr ssl 8 )
directly removed from the source code; any licensed or patented components
are chosen from
external libraries.
.It
has been updated to support SSH protocol 1.5 and 2, making it compatible with
all other SSH clients and servers.
.It
contains added support for
.Xr kerberos 8
authentication and ticket passing.
.It
supports one-time password authentication with
.Xr skey 1 .
.El
.Pp
OpenSSH has been created by Aaron Campbell, Bob Beck, Markus Friedl,
Niels Provos, Theo de Raadt, and Dug Song.
.Pp
The support for SSH protocol 2 was written by Markus Friedl.
@


1.76
log
@rename SYSLOG_LEVEL_INFO->SYSLOG_LEVEL_NOTICE
syslog priority changes:
	fatal() LOG_ERR  -> LOG_CRIT
	log()   LOG_INFO -> LOG_NOTICE
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.75 2001/01/04 22:35:32 djm Exp $
d817 2
a818 2
QUIET, FATAL, ERROR, NOTICE, VERBOSE and DEBUG.
The default is NOTICE.
@


1.75
log
@Mention AES as available SSH2 Cipher; ok markus
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.74 2000/12/27 12:30:20 markus Exp $
d817 2
a818 2
QUIET, FATAL, ERROR, INFO, VERBOSE and DEBUG.
The default is INFO.
@


1.74
log
@new option: HostKeyAlias: allows the user to record the host key
under a different name. This is useful for ssh tunneling over
forwarded connections or if you run multiple sshd's on different
ports on the same machine.
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.73 2000/12/27 11:51:53 markus Exp $
d667 1
a667 1
.Dq 3des-cbc,blowfish-cbc,cast128-cbc,arcfour .
@


1.73
log
@multiple -t force pty allocation, document ORIGINAL_COMMAND
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.72 2000/12/12 23:11:48 markus Exp $
d749 6
@


1.72
log
@rhosts-rsa is no longer automagically disabled if ssh is not privileged.
UsePrivilegedPort=no disables rhosts-rsa _only_ for old servers.
these changes should not change the visible default behaviour of the ssh client.
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.71 2000/12/07 04:24:59 djm Exp $
d478 5
d492 3
a494 4
The verbose mode is also used to display
.Xr skey 1
challenges, if the user entered "s/key" as password.
Multiple -v options increases the verbosity.
d1030 4
@


1.71
log
@Typo fix from Wilfredo Sanchez <wsanchez@@apple.com>; ok theo
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.70 2000/12/01 00:00:51 markus Exp $
d467 2
a468 1
.Cm RhostsRSAAuthentication .
d952 2
a953 1
.Cm RhostsRSAAuthentication .
@


1.70
log
@typo; from green@@FreeBSD.org
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.69 2000/11/30 07:04:02 markus Exp $
d275 1
a275 1
The session terminates when the command or shell in on the remote
@


1.69
log
@-T is for both protocols
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.68 2000/11/12 19:50:38 markus Exp $
d449 1
a449 1
This is usefull if you just want to forward ports
@


1.68
log
@add support for RSA to SSH2.  please test.

there are now 3 types of keys: RSA1 is used by ssh-1 only,
RSA and DSA are used by SSH2.

you can use 'ssh-keygen -t rsa -f ssh2_rsa_file' to generate RSA
keys for SSH2 and use the RSA keys for hostkeys or for user keys.

SSH2 RSA or DSA keys are added to .ssh/authorised_keys2 as before.

IdentityFile2, HostDsaKey and DSAAuthentication are obsolete.
you can use multiple IdentityFile and HostKey for all types of keys.

the option DSAAuthentication is replaced by PubkeyAuthetication.
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.67 2000/11/10 05:10:40 aaron Exp $
d478 1
a478 1
Disable pseudo-tty allocation (protocol version 2 only).
@


1.67
log
@- Section shuffling: comply to the section ordering outlined in mdoc(7).
- Some .Nm trimming.
- .Sh AUTHOR -> .Sh AUTHORS
- Other miscellaneous fixes here and there.
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.66 2000/11/08 23:51:08 aaron Exp $
d212 3
a214 3
in the previous section except that the DSA algorithm is used
instead of the patented RSA algorithm.
The client uses his private DSA key
d334 1
a334 1
DSA host keys are stored in
d411 1
a411 1
RSA authentication is read.
d680 2
a681 2
.It Cm DSAAuthentication
Specifies whether to try DSA authentication.
a685 2
DSA authentication will only be
attempted if a DSA identity file exists.
a762 10
.It Cm IdentityFile2
Specifies the file from which the user's DSA authentication identity
is read (default
.Pa $HOME/.ssh/id_dsa
in the user's home directory).
The file name may use the tilde
syntax to refer to a user's home directory.
It is possible to have
multiple identity files specified in configuration files; all these
identities will be tried in sequence.
d1104 1
a1104 1
Lists the DSA keys that can be used for logging in as this user.
d1112 1
a1112 1
contains DSA keys.
@


1.66
log
@Document that rsh and ssh will take their invocation name as a hostname to
connect to if argv[0] is not one of the standard program names; closes
PR/1493. While I'm here, change the "host" argument in rsh(1) to "hostname"
for consistency, and also remove some redundancy in the option descriptions.
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.65 2000/11/08 19:37:33 aaron Exp $
d1239 1
a1239 1
.Sh AUTHOR
@


1.65
log
@- Get rid of ".Sh OPTIONS" and always use the standard options list intro.
- Move some BUGS/CAVEATS to the end of the man pages where they should go.
- Correct some .Nm usage.
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.64 2000/10/16 21:46:31 markus Exp $
d556 16
@


1.64
log
@fixes from pekkas@@netcore.fi
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.63 2000/10/16 09:38:44 djm Exp $
d355 2
a356 1
.Sh OPTIONS
@


1.64.2.1
log
@Pull in OpenSSH 2.5.0
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.91 2001/02/11 12:59:25 markus Exp $
d51 1
a51 1
.Op Fl afgknqstvxACNPTX1246
a55 1
.Op Fl m Ar mac_spec
d212 3
a214 3
in the previous section except that the DSA or RSA algorithm is used
instead.
The client uses his private key
d275 1
a275 1
The session terminates when the command or shell on the remote
d334 1
a334 1
host keys used in the protocol version 2 are stored in
d355 1
a355 2
.Pp
The options are as follows:
d376 1
a376 1
.It Fl c Ar cipher_spec
d379 2
a380 3
See
.Cm Ciphers
for more information.
d410 1
a410 1
RSA or DSA authentication is read.
a425 7
.It Fl m Ar mac_spec
Additionally, for protocol version 2 a comma-separated list of MAC
(message authentication code) algorithms can
be specified in order of preference.
See the
.Cm MACs
keyword for more information.
d448 1
a448 1
This is useful if you just want to forward ports
d466 1
a466 2
.Cm RhostsRSAAuthentication
for older servers.
a470 4
.It Fl s
May be used to request invocation of a subsystem on the remote system. Subsystems are a feature of the SSH2 protocol which facilitate the use 
of SSH as a secure transport for other application (eg. sftp). The 
subsystem is specified as the remote command.
a475 5
Multiple
.Fl t
options force tty allocation, even if
.Nm
has no local tty.
d477 1
a477 1
Disable pseudo-tty allocation.
d485 4
a488 3
Multiple
.Fl v
options increases the verbosity.
a541 4
.It Fl 1
Forces
.Nm
to try protocol version 1 only.
d645 1
a645 6
.Pp
.Bd -literal
  ``3des-cbc,blowfish-cbc,cast128-cbc,arcfour,aes128-cbc,
    aes192-cbc,aes256-cbc,rijndael128-cbc,rijndael192-cbc,
    rijndael256-cbc,rijndael-cbc@@lysator.liu.se''
.Ed
d663 2
a664 2
.It Cm PubkeyAuthentication
Specifies whether to try public key authentication.
d669 2
a728 6
.It Cm HostKeyAlias
Specifies an alias that should be used instead of the
real host name when looking up or saving the host key
in the known_hosts files.
This option is useful for tunneling ssh connections
or if you have multiple servers running on a single host.
d748 10
a802 12
.It Cm MACs
Specifies the MAC (message authentication code) algorithms 
in order of preference.
The MAC algorithm is used in protocol version 2
for data integrity protection.
Multiple algorithms must be comma-separated.
The default is
.Pp
.Bd -literal
  ``hmac-sha1,hmac-md5,hmac-ripemd160,hmac-ripemd160@@openssh.com,
    hmac-sha1-96,hmac-md5-96''
.Ed
d897 2
a898 3
.It Cm ChallengeResponseAuthentication
Specifies whether to use challenge response authentication.
Currently there is only support for
d911 1
a911 1
will never automatically add host keys to the
d915 1
a915 1
files, and refuses to connect to hosts whose host key has changed.
d922 5
a926 15
connect to new hosts.
This option forces the user to manually
add all new hosts.
If this flag is set to
.Dq no ,
.Nm
will automatically add new host keys to the
user known hosts files.
If this flag is set to
.Dq ask ,
new host keys
will be added to the user known host files only after the user
has confirmed that is what they really want to do, and
.Nm
will refuse to connect to hosts whose host key has changed.
d928 1
a928 1
known hosts will be verified automatically in all cases.
d930 1
a930 2
.Dq yes ,
.Dq no
d932 1
a932 3
.Dq ask .
The default is
.Dq ask .
d946 1
a946 2
.Cm RhostsRSAAuthentication
for older servers.
a1018 4
.It Ev SSH_ORIGINAL_COMMAND
The variable contains the original command line if a forced command
is executed.
It can be used to extract the original arguments.
d1076 1
a1076 1
never used automatically and are not necessary; they are only provided for
d1099 1
a1099 1
Lists the public keys (DSA/RSA) that can be used for logging in as this user.
d1107 1
a1107 1
contains DSA or RSA keys for protocol version 2.
d1222 32
a1253 9
.Sh AUTHORS
OpenSSH is a derivative of the original and free
ssh 1.2.12 release by Tatu Ylonen.
Aaron Campbell, Bob Beck, Markus Friedl, Niels Provos,
Theo de Raadt and Dug Song
removed many bugs, re-added newer features and
created OpenSSH.
Markus Friedl contributed the support for SSH
protocol versions 1.5 and 2.0.
a1257 1
.Xr sftp 1 ,
d1262 2
a1263 1
.Xr sshd 8
@


1.64.2.2
log
@Pull in OpenSSH-2.5.1
@
text
@@


1.64.2.3
log
@Pull in OpenSSH-2.5.2 for 2.8 branch.
@
text
@d13 3
a15 3
.\" Copyright (c) 1999,2000 Markus Friedl.  All rights reserved.
.\" Copyright (c) 1999 Aaron Campbell.  All rights reserved.
.\" Copyright (c) 1999 Theo de Raadt.  All rights reserved.
d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.99 2001/03/19 12:49:51 djm Exp $
d43 1
a43 1
.Nd OpenSSH SSH client (remote login program)
d79 1
a79 1
(SSH client) is a program for logging into a remote machine and for
d231 1
a231 1
and integrity (hmac-md5, hmac-sha1).
d277 1
a277 1
machine exits and all X11 and TCP/IP connections have been closed.
d325 1
a325 1
electronic purse; another is going through firewalls.
d670 1
a670 1
  ``aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,arcfour,
d753 1
a753 2
Specifies a file to use for the protocol version 1 global
host key database instead of
a754 4
.It Cm GlobalKnownHostsFile2
Specifies a file to use for the protocol version 2 global
host key database instead of
.Pa /etc/ssh_known_hosts2 .
d834 1
a834 1
  ``hmac-md5,hmac-sha1,hmac-ripemd160,hmac-ripemd160@@openssh.com,
a850 8
.It Cm PreferredAuthentications
Specifies the order in which the client should try protocol 2 
authentication methods. This allows a client to prefer one method (e.g. 
.Cm keyboard-interactive )
over another method (e.g.
.Cm password )
The default for this option is:
.Dq publickey, password, keyboard-interactive
d988 1
a988 1
.Dq no .
d1002 1
a1002 2
Specifies a file to use for the protocol version 1 user
host key database instead of
a1003 4
.It Cm UserKnownHostsFile2
Specifies a file to use for the protocol version 2 user
host key database instead of
.Pa $HOME/.ssh/known_hosts2 .
d1094 1
a1094 1
.It Pa $HOME/.ssh/known_hosts, $HOME/.ssh/known_hosts2
d1097 1
a1097 4
.Pa /etc/ssh_known_hosts
for protocol version 1 or
.Pa /etc/ssh_known_hosts2
for protocol version 2).
d1199 1
a1199 1
On some machines this file may need to be
d1271 3
@


1.64.2.4
log
@Pull in OpenSSH-2.9 to 2.8 branch.
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.107 2001/04/22 23:58:36 markus Exp $
d113 1
a113 1
The second authentication method is the
d208 3
a210 9
different authentication methods are available.
Using the default values for
.Cm PreferredAuthentications ,
the client will try to authenticate first using the public key method;
if this method fails password authentication is attempted,
and finally if this method fails keyboard-interactive authentication
is attempted.
If this method fails password authentication is
tried.
d213 3
a215 2
in the previous section and allows the RSA or DSA algorithm to be used:
The client uses his private key,
a216 2
or
.Pa $HOME/.ssh/id_rsa ,
d226 2
a227 4
.Pp
Additionally,
.Nm
supports hostbased or challenge response authentication.
d244 24
a267 1
user may use the escape characters noted below.
a281 36
.Ss Escape Characters
.Pp
When a pseudo terminal has been requested, ssh supports a number of functions
through the use of an escape character. 
.Pp
A single tilde character can be sent as
.Ic ~~
(or by following the tilde by a character other than those described above).
The escape character must always follow a newline to be interpreted as
special.
The escape character can be changed in configuration files using the
.Cm EscapeChar
configuration directive or on the command line by the 
.Fl e
option.
.Pp
The supported escapes (assuming the default
.Ql ~ )
are:
.Bl -tag -width Ds
.It Cm ~.
Disconnect
.It Cm ~^Z
Background ssh
.It Cm ~#
List forwarded connections
.It Cm ~&
Background ssh at logout when waiting for forwarded connection / X11 sessions
to terminate (protocol version 1 only)
.It Cm ~?
Display a list of escape characters
.It Cm ~R
Request rekeying of the connection (only useful for SSH protocol version 2
and if the peer supports it)
.El
.Pp
a560 2
IPv6 addresses can be specified with an alternative syntax:
.Ar port/host/hostport
a632 1
This option applies to protocol version 1 only.
a642 2
The default is
.Dq no .
d646 1
a646 1
ssh will additionally check the host IP address in the
a652 2
The default is
.Dq yes .
d671 2
a672 1
    aes192-cbc,aes256-cbc''
a679 2
The default is
.Dq no .
d681 1
a681 1
Specifies the compression level to use if compression is enabled.
a685 1
Note that this option applies to protocol version 1 only.
d691 7
a697 1
The default is 4.
a722 2
The default is
.Dq no .
a759 17
.It Cm HostbasedAuthentication
Specifies whether to try rhosts based authentication with public key
authentication.
The argument must be
.Dq yes
or
.Dq no .
The default is
.Dq yes .
This option applies to protocol version 2 only and
is similar to
.Cm RhostsRSAAuthentication .
.It Cm HostKeyAlgorithms
Specfies the protocol version 2 host key algorithms
that the client wants to use in order of preference.
The default for this option is:
.Dq ssh-rsa,ssh-dss
d763 1
a763 1
in the host key database files.
d774 1
a774 1
Specifies the file from which the user's RSA or DSA authentication identity
d852 1
a852 2
The default is
.Dq yes .
d874 1
a874 1
.Dq 2,1 .
d877 2
a878 2
tries version 2 and falls back to version 1
if version 2 is not available.
a903 9
.It Cm PubkeyAuthentication
Specifies whether to try public key authentication.
The argument to this keyword must be
.Dq yes
or
.Dq no .
The default is
.Dq yes .
This option applies to protocol version 2 only.
d921 1
a921 2
is not secure (see 
.Cm RhostsRSAAuthentication ).
a925 3
The default is
.Dq yes .
This option applies to protocol version 1 only.
d929 1
a933 3
The default is
.Dq yes .
This option applies to protocol version 1 only.
a942 2
The default is
.Dq yes .
d1002 3
a1004 3
Note that you need to set this option to
.Dq yes
if you want to use
d1008 1
a1008 1
with older servers.
d1062 1
a1062 3
The user should normally not set
.Ev DISPLAY
explicitly, as that
d1121 2
a1122 3
.It Pa $HOME/.ssh/identity, $HOME/.ssh/id_dsa, $HOME/.ssh/id_rsa
Contains the authentication identity of the user.
They are for protocol 1 RSA, protocol 2 DSA, and protocol 2 RSA, respectively.
d1132 1
a1132 1
.It Pa $HOME/.ssh/identity.pub, $HOME/.ssh/id_dsa.pub, $HOME/.ssh/id_rsa.pub
d1140 1
a1140 1
where you wish to log in using protocol version 1 RSA authentication.
a1142 2
and
.Pa $HOME/.ssh/id_rsa.pub
d1146 1
a1146 1
where you wish to log in using protocol version 2 DSA/RSA authentication.
d1173 1
a1173 1
Lists the public keys (RSA/DSA) that can be used for logging in as this user.
d1181 1
a1181 1
contains RSA or DSA keys for protocol version 2.
a1311 11
.Rs
.%A T. Ylonen
.%A T. Kivinen
.%A M. Saarinen
.%A T. Rinne
.%A S. Lehtinen
.%T "SSH Protocol Architecture"
.%N draft-ietf-secsh-architecture-07.txt
.%D January 2001
.%O work in progress material
.Re
@


1.64.2.5
log
@Pull in OpenSSH 2.9.9 to the 2.8 branch.
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.138 2001/09/19 19:24:19 stevesk Exp $
d47 1
a47 1
.Ar hostname | user@@hostname
a51 1
.Op Fl b Ar bind_address
a58 1
.Op Fl F Ar configfile
d75 1
a75 2
.Op Fl D Ar port
.Ar hostname | user@@hostname
d211 6
a216 4
the client will try to authenticate first using the hostbased method;
if this method fails public key authentication is attempted,
and finally if this method fails keyboard-interactive and
password authentication are tried.
d226 1
a226 1
.Pa $HOME/.ssh/authorized_keys
d271 1
a271 1
through the use of an escape character.
d275 1
a275 1
or by following the tilde by a character other than those described below.
d280 1
a280 1
configuration directive or on the command line by the
d306 1
a306 10
If the
.Cm ForwardX11
variable is set to
.Dq yes
(or, see the description of the
.Fl X
and
.Fl x
options described later)
and the user is using X11 (the
d342 1
a342 1
the command line or in a configuration file.
d345 1
a345 1
be specified either on the command line or in a configuration file.
d354 1
a354 1
Host keys are stored in
d356 3
d360 1
a360 1
Additionally, the file
d362 3
a364 1
is automatically checked for known hosts.
d386 1
a386 4
.It Fl b Ar bind_address
Specify the interface to transmit from on machines with multiple
interfaces or aliased addresses.
.It Fl c Ar blowfish|3des|des
d393 4
a399 8
.Ar des
is only supported in the
.Nm
client for interoperability with legacy protocol 1 implementations
that do not support the
.Ar 3des
cipher.  Its use is strongly discouraged due to cryptographic
weaknesses.
a444 6
.It Fl I Ar smartcard_device
Specifies which smartcard device to use. The argument is
the device
.Nm
should use to communicate with a smartcard used for storing the user's
private RSA key.
d480 1
a480 1
This is useful for just forwarding ports
d483 1
a483 1
Can be used to give options in the format used in the configuration file.
d486 1
d493 1
a493 1
This can be used if a firewall does
d505 2
a506 2
May be used to request invocation of a subsystem on the remote system. Subsystems are a feature of the SSH2 protocol which facilitate the use
of SSH as a secure transport for other applications (eg. sftp). The
d550 1
a550 1
.Cm Compression
a551 8
.It Fl F Ar configfile
Specifies an alternative per-user configuration file.
If a configuration file is given on the command line,
the system-wide configuration file
.Pq Pa /etc/ssh_config
will be ignored.
The default for the per-user configuration file is
.Pa $HOME/.ssh/config .
a584 14
.It Fl D Ar port
Specifies a local
.Dq dynamic
application-level port forwarding.
This works by allocating a socket to listen to
.Ar port
on the local side, and whenever a connection is made to this port, the
connection is forwarded over the secure channel, and the application
protocol is then used to determine where to connect to from the
remote machine.  Currently the SOCKS4 protocol is supported, and
.Nm
will act as a SOCKS4 server.
Only root can forward privileged ports.
Dynamic port forwardings can also be specified in the configuration file.
d604 1
a604 2
obtains configuration data from the following sources in
the following order:
a628 12
Configuration options may be separated by whitespace or
optional whitespace and exactly one
.Ql = ;
the latter format is useful to avoid the need to quote whitespace
when specifying configuration options using the
.Nm ssh ,
.Nm scp
and
.Nm sftp
.Fl o
option.
.Pp
d630 2
a631 2
keywords and their meanings are as follows (note that
keywords are case-insensitive and arguments are case-sensitive):
d662 2
a663 2
This option is useful in scripts and other batch jobs where no user
is present to supply the password.
a669 7
.It Cm BindAddress
Specify the interface to transmit from on machines with multiple
interfaces or aliased addresses.
Note that this option does not work if
.Cm UsePrivilegedPort
is set to
.Dq yes .
d686 1
a686 2
.Dq blowfish ,
.Dq 3des ,
d688 1
a688 1
.Dq des
a689 8
.Ar des
is only supported in the
.Nm
client for interoperability with legacy protocol 1 implementations
that do not support the
.Ar 3des
cipher.  Its use is strongly discouraged due to cryptographic
weaknesses.
a701 16
.It Cm ClearAllForwardings
Specifies that all local, remote and dynamic port forwardings
specified in the configuration files or on the command line be
cleared.  This option is primarily useful when used from the
.Nm
command line to clear port forwardings set in
configuration files, and is automatically set by
.Xr scp 1
and
.Xr sftp 1 .
The argument must be
.Dq yes
or
.Dq no .
The default is
.Dq no .
d722 1
a722 12
The default is 1.
.It Cm DynamicForward
Specifies that a TCP/IP port on the local machine be forwarded
over the secure channel, and the application
protocol is then used to determine where to connect to from the
remote machine.  The argument must be a port number.
Currently the SOCKS4 protocol is supported, and
.Nm
will act as a SOCKS4 server.
Multiple forwardings may be specified, and
additional forwardings can be given on the command line.  Only
the superuser can forward privileged ports.
a772 9
By default,
.Nm
binds local port forwardings to the loopback addresss.  This
prevents other remote hosts from connecting to forwarded ports.
.Cm GatewayPorts
can be used to specify that
.Nm
should bind local port forwardings to the wildcard address,
thus allowing remote hosts to connect to forwarded ports.
d780 1
a780 1
Specifies a file to use for the global
d783 4
d795 1
a795 1
.Dq no .
d800 1
a800 1
Specifies the protocol version 2 host key algorithms
d809 1
a809 1
or for multiple servers running on a single host.
d862 1
a862 1
the secure channel to the specified host and port from the remote machine.
d864 1
a864 3
.Ar host:port .
IPv6 addresses can be specified with an alternative syntax:
.Ar host/port .
d875 1
a875 1
Specifies the MAC (message authentication code) algorithms
d881 5
a885 1
.Dq hmac-md5,hmac-sha1,hmac-ripemd160,hmac-sha1-96,hmac-md5-96 .
d902 2
a903 2
Specifies the order in which the client should try protocol 2
authentication methods. This allows a client to prefer one method (e.g.
d908 1
a908 1
.Dq hostbased,publickey,keyboard-interactive,password
d960 1
a960 1
the secure channel to the specified host and port from the local machine.
d962 1
a962 3
.Ar host:port .
IPv6 addresses can be specified with an alternative syntax:
.Ar host/port .
d975 2
a976 2
is not secure (see
.Cm RhostsRSAAuthentication ) .
d1008 3
d1016 1
a1016 8
.Dq yes .
.It Cm SmartcardDevice
Specifies which smartcard device to use. The argument to this keyword is
the device
.Nm
should use to communicate with a smartcard used for storing the user's
private RSA key. By default, no device is specified and smartcard support
is not activated.
d1023 5
a1027 3
file, and refuses to connect to hosts whose host key has changed.
This provides maximum protection against trojan horse attacks,
however, can be annoying when the
d1029 4
a1032 2
file is poorly maintained, or connections to new hosts are
frequently made.
d1064 1
a1064 1
Note that this option must be set to
d1066 1
a1066 1
if
d1070 1
a1070 1
authentications are needed with older servers.
d1073 1
a1073 1
This can be useful when a different user name is used on different machines.
d1077 1
a1077 1
Specifies a file to use for the user
d1080 4
d1136 1
a1136 1
Set to the path of the user's mailbox.
a1141 23
.It Ev SSH_ASKPASS
If
.Nm
needs a passphrase, it will read the passphrase from the current
terminal if it was run from a terminal.
If
.Nm
does not have a terminal associated with it but
.Ev DISPLAY
and
.Ev SSH_ASKPASS
are set, it will execute the program specified by
.Ev SSH_ASKPASS
and open an X11 window to read the passphrase.
This is particularly useful when calling
.Nm
from a
.Pa .Xsession
or related script.
(Note that on some machines it
may be necessary to redirect the input from
.Pa /dev/null
to make this work.)
d1143 1
a1143 1
Identifies the path of a unix-domain socket used to communicate with the
d1176 2
a1177 2
.It Pa $HOME/.ssh/known_hosts
Records host keys for all hosts the user has logged into that are not
d1179 4
a1182 1
.Pa /etc/ssh_known_hosts .
d1205 1
a1205 1
where the user wishes to log in using protocol version 1 RSA authentication.
d1211 1
a1211 1
.Pa $HOME/.ssh/authorized_keys
d1213 1
a1213 1
where the user wishes to log in using protocol version 2 DSA/RSA authentication.
d1229 1
a1229 1
Lists the public keys (RSA/DSA) that can be used for logging in as this user.
d1234 3
a1236 1
identity files.
d1239 5
a1243 1
.It Pa /etc/ssh_known_hosts
d1245 5
a1249 1
This file should be prepared by the
d1255 2
a1256 1
by spaces): system name, public key and optional comment field.
d1302 1
a1302 1
If the server machine does not have the client's host key in
d1304 1
a1304 1
it can be stored in
d1386 2
a1387 2
.%N draft-ietf-secsh-architecture-09.txt
.%D July 2001
@


1.64.2.6
log
@Merge OpenSSH 3.0
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.64.2.5 2001/09/27 00:15:42 miod Exp $
a983 10
.It Cm NoHostAuthenticationForLocalhost
This option can be used if the home directory is shared across machines.
In this case localhost will refer to a different machine on each of
the machines and the user will get many warnings about changed host keys.
However, this option disables host authentication for localhost.
The argument to this keyword must be
.Dq yes
or
.Dq no .
The default is to check the host key for localhost.
@


1.64.2.7
log
@Merge OpenSSH 3.0.1.

This is likely to be the last commit to the 2.8-STABLE branch.
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.64.2.6 2001/11/15 00:15:00 miod Exp $
d297 1
a297 1
to terminate
a1391 9
.It Pa /etc/ssh_host_key, /etc/ssh_host_dsa_key, /etc/ssh_host_rsa_key
These three files contain the private parts of the host keys
and are used for
.Cm RhostsRSAAuthentication
and
.Cm HostbasedAuthentication .
Since they are readable only by root
.Nm
must be setuid root if these authentication methods are desired.
@


1.64.2.8
log
@Merge OpenSSH 3.1.
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.148 2002/02/18 17:55:20 markus Exp $
d210 2
a211 2
When a user connects using protocol version 2
similar authentication methods are available.
d446 1
a446 1
Selects a file from which the identity (private key) for
d448 1
a448 1
The default is
d450 1
a450 5
for protocol version 1, and
.Pa $HOME/.ssh/id_rsa
and
.Pa $HOME/.ssh/id_dsa
for protocol version 2.
d520 1
d903 1
a903 1
.Dq ssh-rsa,ssh-dss .
d918 2
a919 2
Specifies a file from which the user's RSA or DSA authentication identity
is read. The default is
d921 1
a921 5
for protocol version 1, and
.Pa $HOME/.ssh/id_rsa
and
.Pa $HOME/.ssh/id_dsa
for protocol version 2.
d930 1
a930 1
Specifies whether the system should send TCP keepalive messages to the
d945 2
a946 1
.Dq no .
d974 2
a975 3
QUIET, FATAL, ERROR, INFO, VERBOSE, DEBUG, DEBUG1, DEBUG2 and DEBUG3.
The default is INFO.  DEBUG and DEBUG1 are equivalent.  DEBUG2
and DEBUG3 each specify higher levels of verbose output.
d1016 1
a1016 1
.Dq hostbased,publickey,keyboard-interactive,password .
a1483 4
.Sh DIAGNOSTICS
.Nm
exits with the exit status of the remote command or with 255
if an error occurred.
@


1.63
log
@Add idents for files which lack them

Fix idents Id -> OpenBSD for the rest
@
text
@d37 1
a37 1
.\" $OpenBSD$
d371 1
a371 1
cipher which is no longer supported in
d632 1
a632 1
in protocol version 1
d634 1
a634 1
.Dq blowfish ,
@


1.62
log
@Cipher is for SSH-1 only
@
text
@d37 1
@


1.61
log
@Repair formatting errors introduced after 2.7.
@
text
@d630 2
a631 1
Specifies the cipher to use for encrypting the session.
d644 1
a644 1
.Dq 3des-cbc,blowfish-cbc,arcfour,cast128-cbc .
@


1.60
log
@multiple debug levels
@
text
@d377 3
a379 2
be specified in order of preference. Protocol version 2 supports
3DES, Blowfish and CAST128 in CBC mode and Arcfour.
d487 2
a488 1
Multiple -v options increases the verbosity. Maximum is 3.
@


1.59
log
@cleanup copyright notices on all files.  I have attempted to be accurate with
the details.  everything is now under Tatu's licence (which I copied from his
readme), and/or the core-sdi bsd-ish thing for deattack, or various openbsd
developers under a 2-term bsd licence.  We're not changing any rules, just
being accurate.
@
text
@d486 1
@


1.58
log
@add missing .El against .Bl.
@
text
@a2 2
.\" ssh.1.in
.\"
a3 1
.\"
d7 18
a24 1
.\" Created: Sat Apr 22 21:55:14 1995 ylo
d26 10
a35 1
.\" $Id: ssh.1,v 1.57 2000/08/25 16:16:15 deraadt Exp $
@


1.57
log
@no need for those dynamic libraries anymore
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.56 2000/07/26 17:46:50 deraadt Exp $
d949 1
d1193 1
@


1.56
log
@typo
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.55 2000/05/31 06:36:40 markus Exp $
a1218 4
.Pp
The libraries described in
.Xr ssl 8
are required for proper operation.
@


1.55
log
@xauth_location support; pr 1234
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.54 2000/05/29 20:20:46 markus Exp $
d997 1
a997 1
was set when the daemon was started (e.i., the daemon passes the value
@


1.54
log
@forwardagent defaults to no, add ssh -A
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.53 2000/05/15 06:54:03 markus Exp $
d943 6
@


1.53
log
@document ssh -T -N (ssh2 only)
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.10 2000/05/08 19:01:44 markus Exp $
d27 1
a27 1
.Op Fl afgknqtvxCNPTX246
d335 3
a337 1
This may also be specified on a per-host basis in the configuration file.
a464 1
This can also be specified on a per-host basis in a configuration file.
d467 1
d675 2
@


1.52
log
@zap typo
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.51 2000/05/08 17:12:15 markus Exp $
d27 1
a27 1
.Op Fl afgknqtvxCPX246
d419 4
d449 2
@


1.52.2.1
log
@lovin' CVS... update patch branch to OpenSSH-2.1.1
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.55 2000/05/31 06:36:40 markus Exp $
d27 1
a27 1
.Op Fl afgknqtvxACNPTX246
d335 1
a335 3
.It Fl A
Enables forwarding of the authentication agent connection.
This can also be specified on a per-host basis in a configuration file.
a418 4
.It Fl N
Do not execute a remote command.
This is usefull if you just want to forward ports
(protocol version 2 only).
a444 2
.It Fl T
Disable pseudo-tty allocation (protocol version 2 only).
d457 1
a459 1
This can also be specified on a per-host basis in a configuration file.
a667 2
The default is
.Dq no .
a932 6
.It Cm XAuthLocation
Specifies the location of the
.Xr xauth 1
program.
The default is
.Pa /usr/X11R6/bin/xauth .
@


1.52.2.2
log
@Pull in the rest of openssh-2.2.0 to 2.7 branch (luvin' cvs...)
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.57 2000/08/25 16:16:15 deraadt Exp $
d997 1
a997 1
was set when the daemon was started (i.e., the daemon passes the value
d1219 4
@


1.52.2.3
log
@openssh-2.3.0 (again) for 2.7 branch
@
text
@d3 2
d6 1
d10 1
a10 9
.\" As far as I am concerned, the code I have written for this software
.\" can be used freely for any purpose.  Any derived versions of this
.\" software must be clearly marked as such, and if the derived work is
.\" incompatible with the protocol description in the RFC file, it must be
.\" called by a name other than "ssh" or "Secure Shell".
.\"
.\" Copyright (c) 1999,2000 Markus Friedl. All rights reserved.
.\" Copyright (c) 1999 Aaron Campbell. All rights reserved.
.\" Copyright (c) 1999 Theo de Raadt. All rights reserved.
d12 1
a12 8
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
a13 12
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
.\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.\" $OpenBSD: ssh.1,v 1.64 2000/10/16 21:46:31 markus Exp $
d347 1
a347 1
cipher which is no longer fully supported in
d354 2
a355 3
be specified in order of preference.
Protocol version 2 supports 3DES, Blowfish, and CAST128 in CBC mode
and Arcfour.
a462 2
Multiple -v options increases the verbosity.
Maximum is 3.
d604 1
a604 2
Specifies the cipher to use for encrypting the session
in protocol version 1.
d606 1
a606 1
.Dq blowfish 
d617 1
a617 1
.Dq 3des-cbc,blowfish-cbc,cast128-cbc,arcfour .
a948 1
.El
a1191 1
.El
@


1.52.2.4
log
@OpenSSH-2.5.1 for 2.7 patch branch
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.91 2001/02/11 12:59:25 markus Exp $
d51 1
a51 1
.Op Fl afgknqstvxACNPTX1246
a55 1
.Op Fl m Ar mac_spec
d212 3
a214 3
in the previous section except that the DSA or RSA algorithm is used
instead.
The client uses his private key
d275 1
a275 1
The session terminates when the command or shell on the remote
d334 1
a334 1
host keys used in the protocol version 2 are stored in
d355 1
a355 2
.Pp
The options are as follows:
d376 1
a376 1
.It Fl c Ar cipher_spec
d379 2
a380 3
See
.Cm Ciphers
for more information.
d410 1
a410 1
RSA or DSA authentication is read.
a425 7
.It Fl m Ar mac_spec
Additionally, for protocol version 2 a comma-separated list of MAC
(message authentication code) algorithms can
be specified in order of preference.
See the
.Cm MACs
keyword for more information.
d448 1
a448 1
This is useful if you just want to forward ports
d466 1
a466 2
.Cm RhostsRSAAuthentication
for older servers.
a470 4
.It Fl s
May be used to request invocation of a subsystem on the remote system. Subsystems are a feature of the SSH2 protocol which facilitate the use 
of SSH as a secure transport for other application (eg. sftp). The 
subsystem is specified as the remote command.
a475 5
Multiple
.Fl t
options force tty allocation, even if
.Nm
has no local tty.
d477 1
a477 1
Disable pseudo-tty allocation.
d485 4
a488 3
Multiple
.Fl v
options increases the verbosity.
a541 4
.It Fl 1
Forces
.Nm
to try protocol version 1 only.
d645 1
a645 6
.Pp
.Bd -literal
  ``3des-cbc,blowfish-cbc,cast128-cbc,arcfour,aes128-cbc,
    aes192-cbc,aes256-cbc,rijndael128-cbc,rijndael192-cbc,
    rijndael256-cbc,rijndael-cbc@@lysator.liu.se''
.Ed
d663 2
a664 2
.It Cm PubkeyAuthentication
Specifies whether to try public key authentication.
d669 2
a728 6
.It Cm HostKeyAlias
Specifies an alias that should be used instead of the
real host name when looking up or saving the host key
in the known_hosts files.
This option is useful for tunneling ssh connections
or if you have multiple servers running on a single host.
d748 10
a802 12
.It Cm MACs
Specifies the MAC (message authentication code) algorithms 
in order of preference.
The MAC algorithm is used in protocol version 2
for data integrity protection.
Multiple algorithms must be comma-separated.
The default is
.Pp
.Bd -literal
  ``hmac-sha1,hmac-md5,hmac-ripemd160,hmac-ripemd160@@openssh.com,
    hmac-sha1-96,hmac-md5-96''
.Ed
d897 2
a898 3
.It Cm ChallengeResponseAuthentication
Specifies whether to use challenge response authentication.
Currently there is only support for
d911 1
a911 1
will never automatically add host keys to the
d915 1
a915 1
files, and refuses to connect to hosts whose host key has changed.
d922 5
a926 15
connect to new hosts.
This option forces the user to manually
add all new hosts.
If this flag is set to
.Dq no ,
.Nm
will automatically add new host keys to the
user known hosts files.
If this flag is set to
.Dq ask ,
new host keys
will be added to the user known host files only after the user
has confirmed that is what they really want to do, and
.Nm
will refuse to connect to hosts whose host key has changed.
d928 1
a928 1
known hosts will be verified automatically in all cases.
d930 1
a930 2
.Dq yes ,
.Dq no
d932 1
a932 3
.Dq ask .
The default is
.Dq ask .
d946 1
a946 2
.Cm RhostsRSAAuthentication
for older servers.
a1018 4
.It Ev SSH_ORIGINAL_COMMAND
The variable contains the original command line if a forced command
is executed.
It can be used to extract the original arguments.
d1076 1
a1076 1
never used automatically and are not necessary; they are only provided for
d1099 1
a1099 1
Lists the public keys (DSA/RSA) that can be used for logging in as this user.
d1107 1
a1107 1
contains DSA or RSA keys for protocol version 2.
d1222 32
a1253 9
.Sh AUTHORS
OpenSSH is a derivative of the original and free
ssh 1.2.12 release by Tatu Ylonen.
Aaron Campbell, Bob Beck, Markus Friedl, Niels Provos,
Theo de Raadt and Dug Song
removed many bugs, re-added newer features and
created OpenSSH.
Markus Friedl contributed the support for SSH
protocol versions 1.5 and 2.0.
a1257 1
.Xr sftp 1 ,
d1262 2
a1263 1
.Xr sshd 8
@


1.52.2.5
log
@Pull in OpenSSH-2.5.2 for 2.7 branch.
@
text
@d13 3
a15 3
.\" Copyright (c) 1999,2000 Markus Friedl.  All rights reserved.
.\" Copyright (c) 1999 Aaron Campbell.  All rights reserved.
.\" Copyright (c) 1999 Theo de Raadt.  All rights reserved.
d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.99 2001/03/19 12:49:51 djm Exp $
d43 1
a43 1
.Nd OpenSSH SSH client (remote login program)
d79 1
a79 1
(SSH client) is a program for logging into a remote machine and for
d231 1
a231 1
and integrity (hmac-md5, hmac-sha1).
d277 1
a277 1
machine exits and all X11 and TCP/IP connections have been closed.
d325 1
a325 1
electronic purse; another is going through firewalls.
d670 1
a670 1
  ``aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,arcfour,
d753 1
a753 2
Specifies a file to use for the protocol version 1 global
host key database instead of
a754 4
.It Cm GlobalKnownHostsFile2
Specifies a file to use for the protocol version 2 global
host key database instead of
.Pa /etc/ssh_known_hosts2 .
d834 1
a834 1
  ``hmac-md5,hmac-sha1,hmac-ripemd160,hmac-ripemd160@@openssh.com,
a850 8
.It Cm PreferredAuthentications
Specifies the order in which the client should try protocol 2 
authentication methods. This allows a client to prefer one method (e.g. 
.Cm keyboard-interactive )
over another method (e.g.
.Cm password )
The default for this option is:
.Dq publickey, password, keyboard-interactive
d988 1
a988 1
.Dq no .
d1002 1
a1002 2
Specifies a file to use for the protocol version 1 user
host key database instead of
a1003 4
.It Cm UserKnownHostsFile2
Specifies a file to use for the protocol version 2 user
host key database instead of
.Pa $HOME/.ssh/known_hosts2 .
d1094 1
a1094 1
.It Pa $HOME/.ssh/known_hosts, $HOME/.ssh/known_hosts2
d1097 1
a1097 4
.Pa /etc/ssh_known_hosts
for protocol version 1 or
.Pa /etc/ssh_known_hosts2
for protocol version 2).
d1199 1
a1199 1
On some machines this file may need to be
d1271 3
@


1.51
log
@complain about invalid ciphers in SSH1 (e.g. arcfour is SSH2 only)
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.50 2000/05/06 17:45:37 markus Exp $
d793 1
a793 1
if version 1 is no available.
@


1.50
log
@add DSAAuthetication option to ssh/sshd, document SSH2 in sshd.8
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.49 2000/05/03 22:01:09 markus Exp $
d28 1
a28 1
.Op Fl c Ar blowfish | 3des
d205 1
a205 1
(the traffic is encrypted using 3DES, blowfish, cast128 or arcfour)
d345 2
a346 1
cipher which is no longer supported in ssh.
d350 4
d609 1
a609 1
.Dq blowfish-cbc,3des-cbc,arcfour,cast128-cbc .
@


1.49
log
@more info on proto 2
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.48 2000/05/03 18:04:39 markus Exp $
d505 1
a505 1
to use protocol version 2 only.
d622 9
d770 1
d853 1
@


1.48
log
@more doc on: DSA, id_dsa, known_hosts2, authorized_keys2
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.47 2000/05/02 22:01:55 markus Exp $
d66 4
a69 1
his/her identity to the remote machine using one of several methods.
d94 2
a95 2
.Pa \&.rhosts ,
.Pa \&.shosts ,
d111 1
a111 1
.Pa \&.rhosts ,
d149 1
a149 1
.Pa \&.ssh/identity
d151 1
a151 1
.Pa \&.ssh/identity.pub
d156 1
a156 1
.Pa \&.ssh/authorized_keys
d160 1
a160 1
.Pa \&.rhosts
d180 32
d257 2
d302 2
d305 1
a305 1
automatically maintains and checks a database containing RSA-based
d307 5
a311 2
The database is stored in
.Pa \&.ssh/known_hosts
d313 1
a313 1
Additionally, the file
d315 3
a317 1
is automatically checked for known hosts.
d380 1
a380 1
.Pa \&.ssh/identity
d687 1
a687 1
.Pa .ssh/identity
d699 1
a699 1
.Pa .ssh/id_dsa
d774 5
a778 1
.Dq 1 .
@


1.47
log
@update AUTHOR
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.7 2000/04/18 15:01:32 markus Exp $
d652 10
d811 3
a813 1
file, and refuses to connect hosts whose host key has changed.
d817 2
d938 4
a941 4
.It Pa $HOME/.ssh/identity
Contains the RSA authentication identity of the user.
This file
contains sensitive data and should be readable by the user but not
d945 1
a945 1
ignores this file if it is accessible by others.
d949 1
a949 1
.It Pa $HOME/.ssh/identity.pub
d952 3
a954 1
The contents of this file should be added to
d958 7
a964 1
This file is not
d966 2
a967 2
This file is
never used automatically and is not necessary; it is only provided for
d989 5
a993 1
.It Pa /etc/ssh_known_hosts
d995 5
a999 1
This file should be prepared by the
d1058 1
a1058 1
will automatically add the host key inxi
@


1.46
log
@ssh -2
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.45 2000/04/12 23:00:28 markus Exp $
d1089 1
d1099 2
a1100 2
has been updated to support ssh protocol 1.5, making it compatible with
all other ssh protocol 1 clients and servers.
d1116 2
@


1.45
log
@document Protocol, Ciphers
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.44 2000/04/12 21:47:51 aaron Exp $
d27 1
a27 1
.Op Fl afgknqtvxCPX46
d458 4
@


1.44
log
@Trailing whitespace begone!
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.43 2000/03/24 03:04:46 brad Exp $
d551 6
d706 11
@


1.43
log
@fix spelling errors, From: FreeBSD
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.42 2000/03/23 21:39:55 aaron Exp $
d52 1
a52 1
.Sh DESCRIPTION 
d63 1
a63 1
connects and logs into the specified 
d74 1
a74 1
Second, if 
d97 1
a97 1
host key (see 
d112 1
a112 1
As a third authentication method, 
d119 1
a119 1
The idea is that each user creates a public/private 
d122 1
a122 1
The file 
d145 1
a145 1
This stores the private key in 
d152 1
a152 1
to 
d154 1
a154 1
in his/her home directory on the remote machine (the 
d156 1
a156 1
file corresponds to the conventional 
d170 1
a170 1
If other authentication methods fail, 
d191 1
a191 1
.Ic ~# 
d235 1
a235 1
.Ev DISPLAY 
d268 1
a268 1
The database is stored in 
d271 1
a271 1
Additionally, the file 
d293 1
a293 1
Selects the cipher to use for encrypting the session. 
d296 1
a296 1
It is believed to be secure. 
d325 1
a325 1
This implies 
d333 1
a333 1
Selects the file from which the identity (private key) for 
d335 1
a335 1
Default is 
d580 1
a580 1
.It Cm FallBackToRsh 
d585 1
a585 1
listening on the remote host), 
d602 1
a602 1
over the secure channel and 
d605 1
a605 1
The argument must be 
d621 1
a621 1
Specifies a file to use instead of 
d776 1
a776 1
.Dq yes , 
d842 1
a842 1
It is automatically set by 
d888 1
a888 1
Additionally, 
d890 2
a891 2
reads 
.Pa $HOME/.ssh/environment , 
d914 1
a914 1
.It Pa $HOME/.ssh/identity.pub 
d1034 1
a1034 1
This file is processed exactly as 
d1051 1
a1051 1
See the 
d1080 1
a1080 1
contains added support for 
@


1.42
log
@More pedantic man page formatting insanity, lalala
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.41 2000/03/23 21:11:38 aaron Exp $
d393 1
a393 1
This can be used to execute arbitary
@


1.41
log
@Fix some formatting problems I missed before.
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.40 2000/03/11 21:40:03 aaron Exp $
d290 2
a291 2
Disables forwarding of the authentication agent connection. This may
also be specified on a per-host basis in the configuration file.
d345 2
a346 2
Disables forwarding of Kerberos tickets and AFS tokens. This may
also be specified on a per-host basis in the configuration file.
d517 2
a518 2
Specifies whether to pass AFS tokens to remote host. The argument to 
this keyword must be
d537 2
a538 1
file. This allows ssh to detect if a host key changed due to DNS spoofing.
d661 2
a662 2
Specifies whether Kerberos authentication will be used. The argument to 
this keyword must be
d667 3
a669 3
Specifies whether a Kerberos TGT will be forwarded to the server. This
will only work if the Kerberos server is actually an AFS kaserver. The
argument to this keyword must be
d688 3
a690 2
Specifies the number of password prompts before giving up. The
argument to this keyword must be an integer. Default is 3.
@


1.40
log
@Various cleanups and standardizations.
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.39 2000/03/04 07:07:05 djm Exp $
d648 1
a648 1
find it annoying.  
@


1.39
log
@Change invalid 'CHAT' loglevel to 'VERBOSE'
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.38 2000/02/28 19:51:58 markus Exp $
d55 2
a56 1
executing commands on a remote machine.  It is intended to replace
d58 2
a59 1
two untrusted hosts over an insecure network.  X11 connections and
d81 2
a82 1
permitted to log in.  This form of authentication alone is normally not
d89 2
a90 2
method combined with RSA-based host authentication.  It
means that if the login would be permitted by
d103 4
a106 4
section), only then login is
permitted.  This authentication method closes security holes due to IP
spoofing, DNS spoofing and routing spoofing.  [Note to the
administrator:
d118 4
a121 3
RSA is one such system.  The idea is that each user creates a public/private 
key pair for authentication purposes.  The
server knows the public key, and only the user knows the private key.
d125 2
a126 1
in.  When the user logs in, the
d129 2
a130 1
authentication.  The server checks if this key is permitted, and if
d134 4
a137 2
encrypted by the user's public key.  The challenge can only be
decrypted using the proper private key.  The user's client then decrypts the
d142 2
a143 2
implements the RSA authentication protocol automatically.  The user
creates his/her RSA key pair by running
d149 2
a150 2
in the user's home directory.  The user should then
copy the 
d159 3
a161 2
per line, though the lines can be very long).  After this, the user
can log in without giving the password.  RSA authentication is much
d165 2
a166 1
authentication agent.  See
d172 2
a173 1
prompts the user for a password.  The password is sent to the remote
d179 2
a180 1
the user a normal shell on the remote machine.  All communication with
d197 2
a198 1
shell to hang).  All available escapes can be listed with
d205 3
a207 2
special.  The escape character can be changed in configuration files
or on the command line.  
d211 2
a212 1
data.  On most systems, setting the escape character to
d228 2
a229 1
from the local machine.  The user should not manually set
d239 2
a240 1
than zero.  This is normal, and happens because
d252 2
a253 1
the connection is opened.  The real authentication cookie is never
d261 2
a262 2
be specified either on command line or in a configuration file.  One
possible application of TCP/IP forwarding is a secure connection to an
d267 2
a268 2
identifications for all hosts it has ever been used with.  The
database is stored in 
d270 2
a271 1
in the user's home directory.  Additionally, the file 
d273 3
a275 2
is automatically checked for known hosts.  Any new hosts are
automatically added to the user's file.  If a host's identification
d279 2
a280 1
trojan horse from getting the user's password.  Another purpose of
d282 2
a283 1
otherwise be used to circumvent the encryption.  The
d295 2
a296 1
is used by default.  It is believed to be secure. 
d304 1
a304 1
.Ar 3des .  
d308 2
a309 2
The escape character is only recognized at the beginning of a line.  The
escape character followed by a dot
d313 2
a314 1
escape character once.  Setting the character to
d320 2
a321 2
to go to background just before command execution.  This is useful
if
d324 2
a325 1
wants it in the background.  This implies 
d334 2
a335 1
RSA authentication is read.  Default is 
d337 4
a340 3
in the user's home directory.  Identity files may also be specified on
a per-host basis in the configuration file.  It is possible to have
multiple
d348 2
a349 2
Specifies the user to log in as on the remote machine.  This may also
be specified on a per-host basis in the configuration file.
d356 3
a358 2
is run in the background.  A common trick is to use this to run X11
programs in a remote machine.  For example,
d373 2
a374 2
command-line flag.  The option has the same format as a line in the
configuration file.
d376 2
a377 1
Port to connect to on the remote host.  This can be specified on a
d388 3
a390 2
Quiet mode.  Causes all warning and diagnostic messages to be
suppressed.  Only fatal errors are displayed.
d392 4
a395 3
Force pseudo-tty allocation.  This can be used to execute arbitary
screen-based programs on a remote machine, which can be very useful
e.g. when implementing menu services.
d397 2
a398 1
Verbose mode.  Causes
d400 2
a401 1
to print debugging messages about its progress.  This is helpful in
d407 2
a408 2
Disables X11 forwarding.  This can also be specified on a per-host
basis in a configuration file.
d413 2
a414 2
data for forwarded X11 and TCP/IP connections).  The compression
algorithm is the same used by
d420 2
a421 1
option (see below).  Compression is desirable on modem lines and other
d429 2
a430 2
forwarded to the given host and port on the remote side.  This works
by allocating a socket to listen to
d438 3
a440 2
from the remote machine.  Port forwardings can also be specified in the
configuration file.  Only root can forward privileged ports.
d445 2
a446 2
forwarded to the given host and port on the local side.  This works
by allocating a socket to listen to
d454 3
a456 2
from the local machine.  Port forwardings can also be specified in the
configuration file.  Privileged ports can be forwarded only when
d475 6
a480 4
will be used.  The configuration files contain sections bracketed by
"Host" specifications, and that section is only applied for hosts that
match one of the patterns given in the specification.  The matched
host name is the one given on the command line.
d507 2
a508 1
patterns.  A single
d511 2
a512 1
defaults for all hosts.  The host is the
d525 4
a528 3
passphrase/password querying will be disabled.  This
option is useful in scripts and other batch jobs where you have no
user to supply the password.  The argument must be
d542 2
a543 1
Specifies the cipher to use for encrypting the session.  Currently,
d547 2
a548 1
are supported.  The default is
d551 2
a552 1
Specifies whether to use compression.  The argument must be
d557 4
a560 4
Specifies the compression level to use if compression is enable.  The
argument must be an integer from 1 (fast) to 9 (slow, best).  The
default level is 6, which is good for most applications.  The meaning
of the values is the same as in
d564 3
a566 2
back to rsh or exiting.  The argument must be an integer.  This may be
useful in scripts if the connection sometimes fails.
d571 2
a572 2
be set on the command line.  The argument should be a single
character,
d587 2
a588 1
the session being unencrypted).  The argument must be
d594 2
a595 1
will be forwarded to the remote machine.  The argument must be
d603 2
a604 1
set.  The argument must be 
d623 4
a626 4
Specifies the real host name to log into.  This can be used to specify
nicnames or abbreviations for hosts.  Default is the name given on the
command line.  Numeric IP addresses are also permitted (both on the
command line and in
d635 4
a638 2
will be used for authentication.  The file name may use the tilde
syntax to refer to a user's home directory.  It is possible to have
d643 4
a646 2
other side.  If they are sent, death of the connection or crash of one
of the machines will be properly noticed.  However, this means that
d653 2
a654 2
if the network goes down or the remote host dies.  This is important
in scripts, and many users want it too.
d674 6
a679 5
the secure channel to given host:port from the remote machine.  The
first argument must be a port number, and the second must be
host:port.  Multiple forwardings may be specified, and additional
forwardings can be given on the command line.  Only the root can
forward privileged ports.
d690 2
a691 2
Specifies whether to use password authentication.  The argument to
this keyword must be
d696 2
a697 2
Specifies the port number to connect on the remote host.  Default is
22.
d699 13
a711 6
Specifies the command to use to connect to the server.  The command
string extends to the end of the line, and is executed with /bin/sh.
In the command string, %h will be substituted by the host name to
connect and %p by the port.  The command can be basically anything,
and should read from its stdin and write to its stdout.  It should
eventually connect an
d715 2
a716 1
somewhere.  Host key management will be done using the
d725 6
a730 5
the secure channel to given host:port from the local machine.  The
first argument must be a port number, and the second must be
host:port.  Multiple forwardings may be specified, and additional
forwardings can be given on the command line.  Only the root can
forward privileged ports.
d732 2
a733 1
Specifies whether to try rhosts based authentication.  Note that this
d735 2
a736 1
on security.  Disabling rhosts authentication may reduce
d738 4
a741 3
not used.  Most servers do not permit RhostsAuthentication because it
is not secure (see RhostsRSAAuthentication).  The argument to this
keyword must be
d747 3
a749 2
authentication.  This is the primary authentication method for most
sites.  The argument must be
d754 2
a755 2
Specifies whether to try RSA authentication.  The argument to this
keyword must be
d765 2
a766 2
authentication.  The argument to
this keyword must be
d778 3
a780 3
file, and refuses to connect hosts whose host key has changed.  This
provides maximum protection against trojan horse attacks.  However, it
can be somewhat annoying if you don't have good
d783 8
a790 5
connect new hosts.  Basically this option forces the user to manually
add any new hosts.  Normally this option is disabled, and new hosts
will automatically be added to the known host files.  The host keys of
known hosts will be verified automatically in either case.  The
argument must be
d809 3
a811 2
Specifies the user to log in as.  This can be useful if you have a
different user name in different machines.  This saves the trouble of
d817 2
a818 2
Specifies that rlogin/rsh should be used for this host.  It is
possible that the host does not at all support the
d820 2
a821 1
protocol.  This causes
d823 1
a823 1
to immediately exec 
d827 2
a828 1
are ignored if this has been specified.  The argument must be
d839 2
a840 2
variable indicates the location of the X11 server.  It is
automatically set by 
d845 5
a849 3
the host where the shell runs, and n is an integer >= 1.  Ssh uses
this special value to forward X11 connections over the secure
channel.  The user should normally not set DISPLAY explicitly, as that
d860 1
a860 1
.It Ev  PATH
d869 2
a870 1
Identifies the client end of the connection.  The variable contains
d875 2
a876 1
with the current shell or command.  If the current session has no tty,
d902 2
a903 1
Contains the RSA authentication identity of the user.  This file
d914 2
a915 2
identity file in human-readable form).  The contents of this file
should be added to
d918 4
a921 2
where you wish to log in using RSA authentication.  This file is not
sensitive and can (but need not) be readable by anyone.  This file is
d925 3
a927 2
This is the per-user configuration file.  The format of this file is
described above.  This file is used by the
d929 2
a930 1
client.  This file does not usually contain any sensitive information,
d934 2
a935 2
Lists the RSA keys that can be used for logging in as this user.  The
format of this file is described in the
d937 2
a938 1
manual page.  In the simplest form the format is the same as the .pub
d941 2
a942 1
spaces).  This file is not highly sensitive, but the recommended
d945 2
a946 1
Systemwide list of known host keys.  This file should be prepared by the
d948 3
a950 1
organization.  This file should be world-readable.  This file contains
d953 2
a954 1
modulus, and optional comment field.  When different names are used
d956 2
a957 1
commas.  The format is described on the
d969 2
a970 1
Systemwide configuration file.  This file provides defaults for those
d972 2
a973 2
for those users who do not have a configuration file.  This file must
be world-readable.
d978 2
a979 1
host/user pairs that are permitted to log in.  (Note that this file is
d983 2
a984 1
separated by a space.  One some machines this file may need to be
d988 4
a991 2
reads it as root.  Additionally, this file must be owned by the user,
and must not have write permissions for anyone else.  The recommended
d998 2
a999 2
authentication before permitting \s+2.\s0rhosts authentication.  If your
server machine does not have the client's host key in
d1019 2
a1020 1
.Pa \&.rhosts authentication.  It contains
d1024 2
a1025 1
manual page).  If the client host is found in this file, login is
d1027 4
a1030 2
same.  Additionally, successful RSA host authentication is normally
required.  This file should only be writable by root.
d1062 2
a1063 1
but with bugs removed and newer features re-added.   Rapidly after the
@


1.38
log
@turn off x11-fwd for the client, too.
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.37 2000/02/21 14:19:09 deraadt Exp $
d631 1
a631 1
QUIET, FATAL, ERROR, INFO, CHAT and DEBUG.
@


1.37
log
@do not link to a commercial page..
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.36 2000/02/15 16:36:14 markus Exp $
d559 2
@


1.36
log
@consistent indent. ok aaron@@
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.35 2000/01/22 02:17:50 aaron Exp $
a960 6
Tatu Ylonen <ylo@@cs.hut.fi>
.Pp
Issues can be found from the SSH WWW home page:
.Pp
.Dl http://www.cs.hut.fi/ssh
.Pp
d962 5
a966 4
is a derivative of the original (free) ssh 1.2.12 release, but with bugs
removed and newer features re-added.   Rapidly after the 1.2.12 release,
newer versions bore successively more restrictive licenses.  This version
of OpenSSH
d975 2
a976 1
has been updated to support ssh protocol 1.5.
@


1.35
log
@ie. -> i.e.,
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.34 2000/01/14 09:47:26 markus Exp $
d816 1
a816 1
.Bl -tag -width $HOME/.ssh/known_hosts
@


1.34
log
@sort options, from paskalis@@di.uoa.gr; .Xr gzip 1
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.33 2000/01/14 09:24:31 markus Exp $
d974 1
a974 1
has all components of a restrictive nature (ie. patents, see
@


1.33
log
@port:host:hostport in SYNOPSIS, from mep@@netsec.net
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.32 2000/01/04 16:57:16 markus Exp $
d305 2
a316 2
.It Fl g
Allows remote hosts to connect to local forwarded ports.
d381 3
a383 1
algorithm is the same used by gzip, and the
d491 9
d516 2
a517 1
of the values is the same as in GNU GZIP.
a624 6
.It Cm PasswordAuthentication
Specifies whether to use password authentication.  The argument to
this keyword must be
.Dq yes
or
.Dq no .
d634 6
a703 9
.It Cm CheckHostIP
If this flag is set to
.Dq yes ,
ssh will additionally check the host ip address in the
.Pa known_hosts
file. This allows ssh to detect if a host key changed due to DNS spoofing.
If the option is set to
.Dq no ,
the check will not be executed.
a722 7
.It Cm User
Specifies the user to log in as.  This can be useful if you have a
different user name in different machines.  This saves the trouble of
having to remember to give the user name on the command line.
.It Cm UserKnownHostsFile
Specifies a file to use instead of
.Pa $HOME/.ssh/known_hosts .
d737 7
@


1.32
log
@document -4, -6, and 'ssh -L 2022/::1/22'
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.31 1999/12/25 13:35:55 markus Exp $
d36 1
a37 1
.Ar port :
d44 1
a45 1
.Ar port :
@


1.31
log
@remove ref to .ssh/random_seed, mention .ssh/environment in .Sh FILES, too
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.30 1999/12/10 04:19:25 provos Exp $
d27 1
a27 1
.Op Fl afgknqtvxCPX
d399 3
a401 1
.Ar host:hostport
d404 2
d414 3
a416 1
.Ar host:hostport
d420 8
@


1.30
log
@typo; mark.baushke@@solipsa.com
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.29 1999/12/02 17:23:54 markus Exp $
a805 6
.It Pa $HOME/.ssh/random_seed
Used for seeding the random number generator.  This file contains
sensitive data and should read/write for the user and not accessible
for others.  This file is created the first time the program is run
and updated automatically.  The user should never need to read or
modify this file.
d936 4
@


1.29
log
@CheckHostIP is not available for connects via proxy command
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.28 1999/11/24 20:15:36 markus Exp $
d354 1
a354 1
Note that this option turns of
d723 1
a723 1
turns of
@


1.28
log
@postpone fork_after_authentication until command execution,
request/patch from jahakala@@cc.jyu.fi via damien@@ibs.com.au
plus: use daemon() for backgrounding
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.27 1999/11/22 21:52:41 markus Exp $
d630 3
@


1.27
log
@tranfer s/key challenge/response data in SSH_SMSG_AUTH_TIS_CHALLENGE
messages. allows use of s/key in windows (ttssh, securecrt) and
ssh-1.2.27 clients without 'ssh -v', ok: niels@@
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.26 1999/11/17 21:08:07 aaron Exp $
d296 1
a296 1
to go to background after authentication.  This is useful
@


1.26
log
@Spell my name right.
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.25 1999/11/16 22:53:29 provos Exp $
d665 10
@


1.25
log
@add OpenSSH information to AUTHOR section. okay markus@@
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.24 1999/11/10 23:36:44 markus Exp $
d966 1
a966 1
OpenSSH has been created by Aaron Cambell, Bob Beck, Markus Friedl,
@


1.24
log
@add LogLevel {QUIET, FATAL, ERROR, INFO, CHAT, DEBUG} to ssh/sshd,
obsoletes QuietMode and FascistLogging in sshd.
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.23 1999/11/09 23:09:58 markus Exp $
d965 3
@


1.23
log
@user/958: check ~/.ssh/known_hosts for rhosts-rsa, too, ok niels/millert
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.22 1999/10/17 16:58:39 provos Exp $
d605 6
@


1.22
log
@mention that verbose mode can be used s/key authentication
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.21 1999/10/17 00:31:06 deraadt Exp $
d96 2
@


1.21
log
@update trailer, and copy to other pages
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.20 1999/10/17 00:26:59 provos Exp $
d368 3
@


1.20
log
@mention OpenSSH, plus added features.
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.19 1999/10/16 20:56:52 markus Exp $
d929 4
a932 3
is a derivative of the original ssh 1.2.12 release, but with bugs removed and
newer features re-added.   Rapidly after the 1.2.12 release, newer versions
bore successively more restrictive licenses.  This version of OpenSSH,
d935 5
a939 4
all components
of a restrictive nature (ie. patents) have been directly removed from the
source code; any licensed or patented components are chosen from external
libraries.
d941 1
a941 1
has been updated to support ssh protocol 1.5
d947 1
a947 1
support for one-time password authentication with
@


1.19
log
@typo, add '-f' to SYNOPSIS
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.18 1999/10/16 20:47:14 markus Exp $
d19 1
a19 1
.Nd secure shell client (remote login program)
d928 2
a929 3
This version of
.Nm
is a derivative of the original 1.2.12 release, but with bugs removed and
d931 4
a934 1
bore successively more restrictive licenses.  In this version, all components
d937 13
a949 1
libraries.  The libraries described in
@


1.18
log
@support for SSH protocol 1.5 which is poorly documented, the RFC.troff lies.
interops (x11,agent,etc) with 1.2.27 and protocol 1.3
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.17 1999/10/14 18:17:42 markus Exp $
d27 1
a27 1
.Op Fl agknqtvxCPX
@


1.17
log
@fix old connect() race security-bug for ssh-agent and agent-forwarding
by removing the connect() junk, with the following restrictions:
1) change the version to "OpenSSH-1.1":
   agent-forwarding will work only between OpenSSH-1.1 client and
   OpenSSH-1.1 server
2) renamed the environment variable of OpenSSH-1.1 to
   "SSH_AUTH_SOCKET", since useing OpenSSH-1.0 ssh-add against the new
   ssh-agent does not work
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.16 1999/10/12 21:04:22 markus Exp $
d748 1
a748 1
.It Ev SSH_AUTH_SOCKET
@


1.16
log
@-P/UsePrivilegedPort from 1.2.27, it turns of allocation of priv. port
and disabled rhosts/rhosts-rsa, ok deraadt@@
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.15 1999/10/11 20:40:08 markus Exp $
d748 3
a750 10
.It Ev SSH_AUTHENTICATION_FD
This is set to an integer value if you are using the authentication
agent and a connection to it has been forwarded.  The value indicates
a file descriptor number used for communicating with the agent.  On
some systems, 
.Ev SSH_AUTHENTICATION_SOCKET
may be used instead to
indicate the path of a unix-domain socket used to communicate with the
agent (this method is less secure, and is only used on systems that
don't support the first method).
@


1.15
log
@document reality (no askpass, ignore group-world-accessible private keys)
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.14 1999/10/06 20:07:42 dugsong Exp $
d27 1
a27 1
.Op Fl agknqtvxXC
d348 8
d689 14
@


1.14
log
@implement client NumberOfPasswordPrompts option
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.13 1999/10/03 21:50:04 provos Exp $
d776 5
a780 1
accessible by others.  It is possible to specify a passphrase when
@


1.13
log
@add code to detect DNS spoofing:

the main idea is to not only store the host key for the hostname but
also for the according IP address.  When we check the host key in the
known_hosts file, we also check the key against the according IP address.
When the server key changes, host_status = HOST_CHANGED.  If
check_host_in_hostfile() returns differing status for the IP address
that means that either DNS was spoofed or that the IP address
for the host and the host key changed at the same time.
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.12 1999/10/03 18:46:12 aaron Exp $
d592 3
@


1.12
log
@- Fix up SYNOPSIS sections.
- Remove refereces to /etc/environment and /etc/default/login; markus@@
- Document X11DisplayOffset in sshd(8).
- Some other fixes...
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.11 1999/10/02 21:35:47 deraadt Exp $
d643 9
@


1.11
log
@rhosts-rsa-auth ignores ~/.ssh/known_hosts; markus.friedl@@informatik.uni-erlangen.de
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.10 1999/10/02 21:19:42 provos Exp $
d28 1
a28 1
.Op Fl c Ar blowfish|3des
d34 16
a49 2
.Op Fl L Ar port:host:hostport
.Op Fl R Ar port:host:hostport
a608 4
Note that
.Nm
can also be configured to support the SOCKS system using the
--with-socks compile-time configuration option.
d705 2
a706 2
.Ev USER ; set for compatibility with systems that use
this variable.
d713 1
a713 5
.Nm
or, on some systems, 
.Pa /etc/environment 
or 
.Pa /etc/default/login .
a742 2
.Pa /etc/environment 
and 
d746 1
a746 4
to the environment.  Some systems may have
still additional mechanisms for setting up the environment, such as
.Pa /etc/default/login
on Solaris.
@


1.10
log
@remove mention of 'none' cipher.
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.9 1999/10/02 13:10:26 deraadt Exp $
d79 1
a79 1
and additionally it can verify the client's
a80 2
.Pa $HOME/.ssh/known_hosts
and
@


1.9
log
@detail how we manage to not include RSA, and point people at ssl(8)
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.8 1999/10/01 18:17:49 deraadt Exp $
a452 1
.Dq 3des ,
d454 1
a454 1
.Dq none
a456 4
Using
.Dq none
(no encryption) is intended only for debugging, and will render the connection
insecure.
@


1.8
log
@s/IDEA/3DES/
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.7 1999/09/30 17:20:44 deraadt Exp $
d906 2
a907 2
newer features re-added.   Rapidly after 1.2.12 release newer versions bore
successively more restrictive licenses.  In this version, all components
a913 1
.Xr make-ssh-known-hosts 1 ,
@


1.7
log
@oops, misremembered history. 1.2.12 was the last free version; beck
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.6 1999/09/30 16:49:00 deraadt Exp $
d772 1
a772 1
sensitive part of this file using IDEA.
@


1.6
log
@-c none dies
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.5 1999/09/30 08:52:34 deraadt Exp $
d905 2
a906 2
is a derivative of the original 1.2.16 release, but with bugs removed and
newer features re-added.   Rapidly after 1.2.16 release newer versions bore
@


1.5
log
@initial tweaking
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.4 1999/09/29 18:16:20 dugsong Exp $
d28 1
a28 1
.Op Fl c Ar blowfish|3des|none
d256 1
a256 1
.It Fl c Ar blowfish|3des|none
a267 3
.Ar none
disables encryption entirely; it is only intended for debugging, and
it renders the connection insecure.
@


1.4
log
@update krb4/AFS support to ssh-1.2.27-afs-kerberos-pl1 level, clean up unused variables, update manpages
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.3 1999/09/29 00:10:16 deraadt Exp $
d23 1
a23 1
.Ar hostname
d28 1
a28 1
.Op Fl c Ar blowfish|idea|des|3des|none
d36 1
a36 1
.Ar hostname
d40 2
a41 2
(Secure Shell) a program for logging into a remote machine and for
executing commands in a remote machine.  It is intended to replace
d256 1
a256 1
.It Fl c Ar blowfish|idea|des|3des|none
d260 3
d264 4
a267 5
is the data encryption standard, but is breakable by 
governments, large corporations, and major criminal organizations.
.Ar 3des
(triple-des) is encrypt-decrypt-encrypt triple with three different keys.
It is presumably more secure than DES.
a455 2
.Dq idea ,
.Dq des ,
d896 3
a898 20
.Sh INSTALLATION
.Nm
is normally installed as suid root.  It needs root privileges only for
rhosts authentication (rhosts authentication requires that the
connection must come from a privileged port, and allocating such a
port requires root privileges).  It also needs to be able to read
.Pa /etc/ssh_host_key
to perform RSA
host authentication.  It is possible to use
.Nm
without root privileges, but rhosts authentication will then be
disabled.  
.Nm
drops any extra privileges immediately after the connection to the
remote host has been made.
.Pp
Considerable work has been put into making
.Xr sshd 8
secure.  However, if you find a security problem, please report it
immediately to <ssh-bugs@@cs.hut.fi>.
d905 11
d925 2
a926 1
.Xr sshd 8
@


1.3
log
@GatewayPorts and ssh -g; markus.friedl@@informatik.uni-erlangen.de
@
text
@d12 1
a12 1
.\" $Id: ssh.1,v 1.2 1999/09/26 22:30:06 deraadt Exp $
d27 1
a27 1
.Op Fl gknqtvxXC
d253 3
d305 1
a305 1
Disables forwarding of Kerberos tickets / AFS tokens. This may
d563 5
a567 1
Specifies whether Kerberos authentication will be used. 
d569 6
a574 2
Specifies whether a Kerberos TGT will be forwarded to the server.
Note that TGT forwarding is normally not enabled in the server.
@


1.2
log
@first cut of mandoc man pages from aaron
@
text
@d12 1
a12 1
.\" $Id: ssh.1.in,v 1.6 1999/06/08 07:52:59 bg Exp $
d27 1
a27 1
.Op Fl knqtvxXC
d299 2
d513 9
@


1.1
log
@i bet a lot of people didn't know what ssh 1.2.16 had a nice license.
well, except for the patent issues.  someone in sweden (forget their
name at the moment) cleaned out most of the patented code, and now
this code removes rsa code.  when this is done, it will link against
libssl, but the work isn't completely done yet.  then we need to bring
this up to modern days, featurewise.
@
text
@d14 26
a39 73
.TH SSH 1 "November 8, 1995" "SSH" "SSH"

.SH NAME
ssh \- secure shell client (remote login program)

.SH SYNOPSIS
.B ssh
[\c
.BI \-l \ login_name\fR\c
]
.B hostname
[\c
.IR command \c
]

.B ssh
[\c
.BR \-k \c
]
[\c
.B \-c
\fIblowfish\fR\||\|\fIidea\fR\||\|\fIdes\fR\||\|\fI3des\fR\||\|\fInone\fR\c
]
[\c
.BI \-e \ escape_char\fR\c
]
[\c
.BI \-i \ identity_file\fR\c
]
[\c
.BI \-l \ login_name\fR\c
]
[\c
.BR \-n \c
]
[\c
.BI \-o \ option\fR\c
]
[\c
.BI \-p \ port\fR\c
]
[\c
.BR \-q \c
]
[\c
.BR \-t \c
]
[\c
.BR \-v \c
]
[\c
.BR \-x \c
]
[\c
.BR \-X \c
]
[\c
.BR \-C \c
]
[\c
.BI \-L \ port\fB:\fIhost\fB:\fIhostport\fR\c
]
[\c
.BI \-R \ port\fB:\fIhost\fB:\fIhostport\fR\c
]
.I hostname
[\c
.IR command \c
]

.SH DESCRIPTION 
.LP
.B Ssh
d45 2
a46 2
.LP
.B Ssh 
d48 1
a48 1
.IR hostname .  
d51 1
a51 1
.LP
d53 1
a53 1
.I /etc/hosts.equiv
d55 1
a55 1
.I /etc/shosts.equiv
d59 1
a59 1
.I \&\s+2.\s0rhosts
d61 1
a61 1
.I \&\s+2.\s0shosts
d67 1
a67 1
.LP
d69 1
a69 1
.B rhosts
d71 1
a71 1
.B hosts.equiv
d74 3
a76 6
.I \&\s+2.\s0rhosts\c
\|,
.I \&\s+2.\s0shosts\c
\|,
.IR /etc/hosts.equiv\c
\|,
d78 1
a78 1
.IR /etc/shosts.equiv ",
d81 1
a81 1
.I \&$HOME/\s+2.\s0ssh/known_hosts
d83 1
a83 1
.I /etc/ssh_known_hosts
d85 1
a85 1
.B \s-1FILES\s0
d90 2
a91 2
.IR /etc/hosts.equiv ", 
.IR \&\s+2.\s0rhosts ",
d94 1
a94 1
.LP
d96 1
a96 1
.B ssh 
d105 1
a105 1
.I \&$HOME/\s+2.\s0ssh/authorized_keys
d108 1
a108 1
.B ssh 
d112 1
a112 1
.B ssh
d118 2
a119 2
.LP
.B Ssh
d122 1
a122 1
.BR ssh-keygen (1).
d124 1
a124 1
.I \&\s+2.\s0ssh/identity
d126 1
a126 1
.I \&\s+2.\s0ssh/identity.pub
d129 1
a129 1
.I identity.pub
d131 1
a131 1
.I \&\s+2.\s0ssh/authorized_keys
d133 1
a133 1
.I authorized_keys
d135 1
a135 1
.I \&\s+2.\s0rhosts
d140 1
a140 1
.LP
d143 1
a143 1
.BR ssh-agent (1)
d145 1
a145 1
.LP
d147 1
a147 1
.B ssh
d151 1
a151 1
.LP
d156 1
a156 1
.LP
d158 9
a166 3
user can disconnect with "~.", and suspend
.B ssh
with "~^Z".  All forwarded connections can be listed with "~#", and if
d168 9
a176 6
connections to terminate, it can be backgrounded with "~&" (this
should not be used while the user shell is active, as it can cause the
shell to hang).  All available escapes can be listed with "~?".
.LP
A single tilde character can be sent as "~~" (or by
following the tilde by a character other than those described above).
d180 1
a180 1
.LP
d183 4
a186 3
data.  On most systems, setting the escape character to ``none'' will
also make the session transparent even if a tty is used.
.LP
d191 2
a192 2
.B ssh.
.LP
d194 1
a194 1
.B \s-1DISPLAY\s0
d200 1
a200 1
.BR \s-1DISPLAY\s0 ".
d203 5
a207 3
.LP
The DISPLAY value set by
.B ssh
d210 4
a213 2
.B ssh
creates a "proxy" X server on the server machine for forwarding the
d215 2
a216 2
.LP
.B Ssh
d223 1
a223 1
.LP
d227 1
a227 1
.LP
d232 2
a233 2
.LP
.B Ssh
d237 1
a237 1
.I \&\s+2.\s0ssh/known_hosts
d239 1
a239 1
.I /etc/ssh_known_hosts
d243 1
a243 1
.B ssh
d248 1
a248 1
.B StrictHostKeyChecking
d251 3
a253 6


.ne 5
.SH OPTIONS
.TP
.BI \-c \ \fIblowfish\fR\||\|\fIidea\fR\||\|\fIdes\fR\||\|\fI3des\fR\||\|\fInone\fR
d255 1
a255 1
.B \s-13DES\s0
d257 1
a257 1
.B \s-1DES\s0
d260 4
a263 5
.B \s-13DES\s0
(triple-des) is encrypt-decrypt-encrypt triple with three different
keys.  It is presumably more secure than
DES.
.B none
d266 7
a272 6
.ne 3
.TP
.B \-e \fIch\fR\||\|\fI^ch\fR\||\|\fInone\fR
Sets the escape character for sessions with a pty (default: ~).  The
escape character is only recognized at the beginning of a line.  The
escape character followed by a dot (.) closes the connection, followed
d274 10
a283 7
escape character once.  Setting the character to 'none' disables any
escapes and makes the session fully transparent.
.ne 3
.TP
.B \-f
Requests ssh to go to background after authentication.  This is useful
if ssh is going to ask for passwords or passphrases, but the user
d285 1
a285 1
.B \-n.
d287 3
a289 4
something like "ssh -f host xterm".
.ne 3
.TP
.BI \-i \ identity_file
d291 2
a292 3
.B \s-1RSA\s0
authentication is read.  Default is 
.I \&\s+2.\s0ssh/identity
d295 3
a297 1
multiple \-i options (and multiple identities specified in
d299 1
a299 3
.ne 3
.TP
.B \-k
d302 1
a302 3
.ne 3
.TP
.BI -l \ login_name
d305 4
a308 4
.ne 3
.TP
.B \-n
Redirects stdin from /dev/null (actually, prevents reading from stdin).
d310 1
a310 1
.B ssh
d312 3
a314 2
programs in a remote machine.  For example, "ssh -n shadows.cs.hut.fi
emacs &" will start an emacs on shadows.cs.hut.fi, and the X11
d317 1
a317 1
.B ssh
d320 5
a324 5
.B ssh
needs to ask for a password or passphrase; see also the -f option.)
.ne 3
.TP
.BI \-o "\ 'option'
d329 1
a329 3
.ne 3
.TP
.BI \-p "\ port
d332 1
a332 3
.ne 3
.TP
.B \-q
d335 1
a335 3
.ne 3
.TP
.B \-t
d339 1
a339 3
.ne 3
.TP
.B \-v
d341 1
a341 1
.B ssh
d344 1
a344 3
.ne 3
.TP
.B \-x
d347 1
a347 3
.ne 3
.TP
.B \-X
d349 1
a349 3
.ne 3
.TP
.B \-C
d352 4
a355 3
algorithm is the same used by gzip, and the "level" can be controlled
by the
.B CompressionLevel
d360 1
a360 1
.B Compress
d362 1
a362 3
.ne 3
.TP
.BI \-L "\ port:host:hostport
d366 1
a366 1
.B port
d370 1
a370 1
.B host:hostport
d373 1
a373 3
.ne 3
.TP
.BI \-R "\ port:host:hostport
d377 1
a377 1
.B port
d381 1
a381 1
.B host:hostport
d385 3
a387 4

.SH CONFIGURATION FILES
.LP
.B Ssh
d390 4
a393 2
(\fI\&$HOME/\s+2.\s0ssh/config\fR), and system-wide configuration file
(\fI/etc/ssh_config\fR).  For each parameter, the first obtained value
d398 1
a398 1
.LP
d402 1
a402 1
.LP
d404 8
a411 4
.IP
Empty lines and lines starting with '#' are comments.
.IP
Otherwise a line is of the format "keyword arguments".  The possible
d414 2
a415 7
.ne 3
.TP
.de YN
"\fByes\fR" or "\fBno\fR".
..

.B Host
d417 1
a417 1
.B Host
d419 8
a426 2
given after the keyword.  '*' and '?' can be as wildcards in the
patterns.  A single '*' as a pattern can be used to provide global
d428 1
a428 1
.IR hostname
d431 1
a431 3
.ne 3
.TP
.B AFSTokenPassing
d434 7
a440 5
.YN
.ne 3
.TP
.B BatchMode
If set to "yes", passphrase/password querying will be disabled.  This
d443 4
a446 4
.YN
.ne 3
.TP
.B Cipher
d448 4
a451 4
.IR blowfish ",
.IR idea ",
.IR des ",
.IR 3des ",
d453 8
a460 6
.I none
are supported.  The default is "3des". Using "none" (no encryption) is intended
only for debugging, and will render the connection insecure.
.ne 3
.TP
.B Compression
d462 4
a465 4
.YN
.ne 3
.TP
.B CompressionLevel
d470 1
a470 3
.ne 3
.TP
.B ConnectionAttempts
d474 4
a477 4
.ne 3
.TP
.B EscapeChar
Sets the escape character (default: ~).  The escape character can also
d479 5
a483 1
character, '^' followed by a letter, or ``none'' to disable the escape
d486 1
a486 3
.ne 3
.TP
.B FallBackToRsh 
d488 1
a488 1
.B ssh
d490 1
a490 1
.B sshd
d492 1
a492 1
.B rsh
d495 4
a498 4
.YN
.ne 3
.TP
.B ForwardAgent
d501 4
a504 4
.YN
.ne 3
.TP
.B ForwardX11
d507 1
a507 1
.B \s-1DISPLAY\s0
d509 4
a512 4
.YN
.ne 3
.TP
.B GlobalKnownHostsFile
d514 2
a515 4
.IR /etc/ssh_known_hosts ".
.ne 3
.TP
.B HostName
d520 1
a520 1
.B HostName
d522 1
a522 3
.ne 3
.TP
.B IdentityFile
d524 3
a526 1
is read (default \fI\s+2.\s0ssh/identity\fR in the user's home directory).
d532 1
a532 3
.ne 3
.TP
.B KeepAlive
d538 4
a541 2

The default is "yes" (to send keepalives), and the client will notice
d544 5
a548 6

To disable keepalives, the value should be set to "no" in both the
server and the client configuration files.
.ne 3
.TP
.B KerberosAuthentication
d550 1
a550 2
.TP
.B KerberosTgtPassing
d553 1
a553 2
.TP
.B LocalForward
d560 1
a560 3
.ne 3
.TP
.B PasswordAuthentication
d563 4
a566 4
.YN
.ne 3
.TP
.B Port
d569 1
a569 3
.ne 3
.TP
.B ProxyCommand
d576 1
a576 1
.B sshd
d578 2
a579 1
"sshd -i" somewhere.  Host key management will be done using the
d582 1
a582 1

d584 1
a584 1
.B ssh
d587 1
a587 3
.ne 3
.TP
.B RemoteForward
d594 1
a594 3
.ne 3
.TP
.B RhostsAuthentication
d602 4
a605 4
.YN
.ne 3
.TP
.B RhostsRSAAuthentication
d609 4
a612 4
.YN
.ne 3
.TP
.B RSAAuthentication
d615 3
a617 1
.YN
d621 4
a624 5
.ne 3
.TP
.B StrictHostKeyChecking
If this flag is set to "yes", 
.B ssh
d626 1
a626 1
.I $HOME/.ssh/known_hosts
d630 1
a630 1
.I /etc/ssh_known_hosts
d637 4
a640 4
.YN
.ne3
.TP
.B User
d644 4
a647 7
.ne 3
.TP
.B UserKnownHostsFile
Specifies a file to use instead of \fI$HOME/\s+2.\s0ssh/known_hosts\fR.
.ne 3
.TP
.B UseRsh
d650 1
a650 1
.B ssh
d652 1
a652 1
.B ssh
d654 1
a654 1
.B rsh.
d656 1
a656 1
.BR HostName )
d658 5
a662 5
.YN

.SH ENVIRONMENT
.LP
.B Ssh 
d664 5
a668 3
.TP
.B DISPLAY
The DISPLAY variable indicates the location of the X11 server.  It is
d670 4
a673 2
.B ssh
to point to a value of the form "hostname:n" where hostname indicates
d679 1
a679 3
.ne 3
.TP
.B HOME
d681 3
a683 4
.ne 3
.TP
.B LOGNAME
Synonym for USER; set for compatibility with systems that use
d685 1
a685 3
.ne 3
.TP
.B MAIL
d687 5
a691 5
.ne 3
.TP
.B PATH
Set to the default PATH, as specified when compiling
.B ssh
d693 1
a693 1
.I /etc/environment 
d695 2
a696 4
.IR /etc/default/login ".
.ne 3
.TP
.B SSH_AUTHENTICATION_FD
d701 1
a701 1
.B SSH_AUTHENTICATION_SOCKET
d706 1
a706 3
.ne 3
.TP
.B SSH_CLIENT
d710 1
a710 3
.ne 3
.TP
.B SSH_TTY
d714 1
a714 3
.ne 3
.TP
.B TZ
d718 1
a718 3
.ne 3
.TP
.B USER
d720 2
a721 2
.LP
.RT
d723 1
a723 1
.B ssh
d725 1
a725 1
.I /etc/environment 
d727 3
a729 4
.IR $HOME/.ssh/environment ", 
and adds lines of
the format 
.I VARNAME=value
d732 1
a732 1
.I /etc/default/login
d734 3
a736 5

.ne 3
.SH FILES
.TP
.I \&$HOME/\s+2.\s0ssh/known_hosts
d738 5
a742 6
in \fI/etc/ssh_known_hosts\fR).  See
.B sshd
manual page.
.ne 3
.TP
.I \&$HOME/\s+2.\s0ssh/random_seed
d748 1
a748 3
.ne 5
.TP
.I \&$HOME/\s+2.\s0ssh/identity
d753 2
a754 5
sensitive part of this file using
.BR \s-1IDEA\s0 ".
.ne 3
.TP
.I \&$HOME/\s+2.\s0ssh/identity.pub 
d757 3
a759 1
should be added to \fI$HOME/\s+2.\s0ssh/authorized_keys\fR on all machines
d764 1
a764 3
.ne 3
.TP
.I \&$HOME/\s+2.\s0ssh/config
d767 1
a767 1
.B ssh
d771 1
a771 3
.ne 3
.TP
.I \&$HOME/\s+2.\s0ssh/authorized_keys
d774 1
a774 1
.B sshd
d780 1
a780 3
.ne 3
.TP
.I /etc/ssh_known_hosts
d789 1
a789 1
.B sshd 
d791 1
a791 1
.IP
d793 1
a793 1
.B sshd
d795 1
a795 1
.B ssh
d799 1
a799 3
.ne 3
.TP
.I /etc/ssh_config
d804 4
a807 4
.ne 3
.TP
.I $HOME/\s+2.\s0rhosts
This file is used in \s+2.\s0rhosts authentication to list the
d815 1
a815 1
.B sshd 
d820 1
a820 1
.IP
d822 1
a822 1
.B sshd
d826 4
a829 2
\fI/etc/ssh_known_hosts\fR, you can store it in
\fI$HOME/\s+2.\s0ssh/known_hosts\fR.  The easiest way to do this is to
d831 6
a836 5
will automatically add the host key in \fI$HOME/\s+2.\s0ssh/known_hosts\fR.
.ne 3
.TP
.I $HOME/\s+2.\s0shosts
This file is used exactly the same way as \s+2.\s0rhosts.  The purpose for
d838 8
a845 6
.B ssh
without permitting login with rlogin or rsh.
.ne 3
.TP
.I /etc/hosts.equiv
This file is used during \s+2.\s0rhosts authentication.  It contains
d848 1
a848 1
.B sshd
d853 1
a853 2
.TP
.I /etc/shosts.equiv
d855 1
a855 1
.IR /etc/hosts.equiv ".  
d857 1
a857 1
.B ssh
d859 1
a859 3
.ne 3
.TP
.I /etc/sshrc
d861 1
a861 1
.B ssh
d864 1
a864 1
.B sshd
d866 1
a866 3
.ne 3
.TP
.I $HOME/.ssh/rc
d868 1
a868 1
.B ssh
d872 1
a872 1
.B sshd
d874 2
a875 4

.SH INSTALLATION
.LP
.B Ssh
d880 2
a881 2
\fI/etc/ssh_host_key\fR to perform
.B \s-1RSA\s0
d883 1
a883 1
.B ssh
d886 1
a886 1
.B Ssh
d889 1
a889 1
.LP
d891 1
a891 1
.B sshd
d894 1
a894 4


.SH AUTHOR
.LP
d896 14
a909 15
.LP
Information about new releases, mailing lists, and other related
issues can be found from the ssh WWW home page at
http://www.cs.hut.fi/ssh.

.SH SEE ALSO
.BR sshd (8),
.BR ssh-keygen (1),
.BR ssh-agent (1),
.BR ssh-add (1),
.BR scp (1),
.BR make-ssh-known-hosts (1),
.BR rlogin (1),
.BR rsh (1),
.BR telnet (1)
@

