head	1.17;
access;
symbols
	OPENBSD_6_2_BASE:1.17
	OPENBSD_6_1:1.16.0.8
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.16.0.6
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.2
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.15.0.2
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.14.0.4
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.8
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.6
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.2
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.13.0.28
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.26
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.24
	OPENBSD_5_0:1.13.0.22
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.20
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.18
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.14
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.16
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.12
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.10
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.8
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.6
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.2
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.4
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.9.0.16
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.14
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.12
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.10
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.8
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.6
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.9.0.4
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.4
	OPENBSD_2_8:1.5.0.2
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.1.0.2
	OPENBSD_2_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.17
date	2017.05.31.09.15.42;	author deraadt;	state Exp;
branches;
next	1.16;
commitid	zCd5GrUCVAe14Y6J;

1.16
date	2016.02.15.09.47.49;	author dtucker;	state Exp;
branches;
next	1.15;
commitid	ut5A0buLh4mhCTFu;

1.15
date	2015.04.24.01.36.01;	author deraadt;	state Exp;
branches;
next	1.14;
commitid	LHkUmZjv49ojnnuH;

1.14
date	2013.05.17.00.13.14;	author djm;	state Exp;
branches;
next	1.13;

1.13
date	2006.08.03.03.34.42;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2006.03.25.22.22.43;	author djm;	state Exp;
branches;
next	1.11;

1.11
date	2006.03.25.01.13.23;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2006.03.25.00.05.41;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2002.06.19.00.27.55;	author deraadt;	state Exp;
branches
	1.9.14.1
	1.9.16.1;
next	1.8;

1.8
date	2002.03.04.17.27.39;	author stevesk;	state Exp;
branches
	1.8.2.1;
next	1.7;

1.7
date	2001.06.26.17.27.25;	author markus;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2001.06.26.06.33.07;	author itojun;	state Exp;
branches;
next	1.5;

1.5
date	2000.09.07.20.27.56;	author deraadt;	state Exp;
branches
	1.5.2.1
	1.5.4.1;
next	1.4;

1.4
date	2000.06.20.01.39.45;	author markus;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.14.10.30.34;	author markus;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	99.11.24.00.26.04;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	99.09.26.20.53.38;	author deraadt;	state Exp;
branches;
next	;

1.3.2.1
date	2000.09.01.18.23.25;	author jason;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2000.11.08.21.31.41;	author jason;	state Exp;
branches;
next	1.3.2.3;

1.3.2.3
date	2001.03.12.15.44.18;	author jason;	state Exp;
branches;
next	1.3.2.4;

1.3.2.4
date	2001.03.21.18.53.21;	author jason;	state Exp;
branches;
next	;

1.5.2.1
date	2001.09.27.00.15.43;	author miod;	state Exp;
branches;
next	1.5.2.2;

1.5.2.2
date	2002.03.08.17.04.44;	author brad;	state Exp;
branches;
next	;

1.5.4.1
date	2001.09.27.19.03.56;	author jason;	state Exp;
branches;
next	1.5.4.2;

1.5.4.2
date	2002.03.09.00.20.45;	author miod;	state Exp;
branches;
next	;

1.7.2.1
date	2002.03.07.17.37.48;	author jason;	state Exp;
branches;
next	1.7.2.2;

1.7.2.2
date	2002.06.22.07.23.18;	author miod;	state Exp;
branches;
next	;

1.8.2.1
date	2002.06.26.15.30.39;	author jason;	state Exp;
branches;
next	;

1.9.14.1
date	2006.10.06.03.19.33;	author brad;	state Exp;
branches;
next	;

1.9.16.1
date	2006.09.30.04.06.51;	author brad;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Switch to recallocarray() for a few operations.  Both growth and shrinkage
are handled safely, and there also is no need for preallocation dances.
Future changes in this area will be less error prone.
Review and one bug found by markus
@
text
@/* $OpenBSD: xmalloc.h,v 1.16 2016/02/15 09:47:49 dtucker Exp $ */

/*
 * Author: Tatu Ylonen <ylo@@cs.hut.fi>
 * Copyright (c) 1995 Tatu Ylonen <ylo@@cs.hut.fi>, Espoo, Finland
 *                    All rights reserved
 * Created: Mon Mar 20 22:09:17 1995 ylo
 *
 * Versions of malloc and friends that check their results, and never return
 * failure (they call fatal if they encounter an error).
 *
 * As far as I am concerned, the code I have written for this software
 * can be used freely for any purpose.  Any derived versions of this
 * software must be clearly marked as such, and if the derived work is
 * incompatible with the protocol description in the RFC file, it must be
 * called by a name other than "ssh" or "Secure Shell".
 */

void	 ssh_malloc_init(void);
void	*xmalloc(size_t);
void	*xcalloc(size_t, size_t);
void	*xreallocarray(void *, size_t, size_t);
void	*xrecallocarray(void *, size_t, size_t, size_t);
char	*xstrdup(const char *);
int	 xasprintf(char **, const char *, ...)
                __attribute__((__format__ (printf, 2, 3)))
                __attribute__((__nonnull__ (2)));
@


1.16
log
@Add a function to enable security-related malloc_options.  With and ok
deraadt@@, something similar has been in the snaps for a while.
@
text
@d1 1
a1 1
/* $OpenBSD: xmalloc.h,v 1.15 2015/04/24 01:36:01 deraadt Exp $ */
d23 1
@


1.15
log
@rename xrealloc() to xreallocarray() since it follows that form.
ok djm
@
text
@d1 1
a1 1
/* $OpenBSD: xmalloc.h,v 1.14 2013/05/17 00:13:14 djm Exp $ */
d19 1
@


1.14
log
@bye, bye xfree(); ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: xmalloc.h,v 1.13 2006/08/03 03:34:42 deraadt Exp $ */
d21 1
a21 1
void	*xrealloc(void *, size_t, size_t);
@


1.13
log
@almost entirely get rid of the culture of ".h files that include .h files"
ok djm, sort of ok stevesk
makes the pain stop in one easy step
@
text
@d1 1
a1 1
/* $OpenBSD: xmalloc.h,v 1.12 2006/03/25 22:22:43 djm Exp $ */
a21 1
void     xfree(void *);
@


1.12
log
@standardise spacing in $OpenBSD$ tags; requested by deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: xmalloc.h,v 1.11 2006/03/25 01:13:23 djm Exp $ */
a18 3
#ifndef XMALLOC_H
#define XMALLOC_H

a26 2

#endif				/* XMALLOC_H */
@


1.11
log
@change OpenSSH's xrealloc() function from being xrealloc(p, new_size) to
xrealloc(p, new_nmemb, new_itemsize).

realloc is particularly prone to integer overflows because it is almost
always allocating "n * size" bytes, so this is a far safer API;
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: xmalloc.h,v 1.10 2006/03/25 00:05:41 djm Exp $	*/
@


1.10
log
@introduce xcalloc() and xasprintf() failure-checked allocations functions
and use them throughout openssh

xcalloc is particularly important because malloc(nmemb * size) is a
dangerous idiom (subject to integer overflow) and it is time for it to
die

feedback and ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: xmalloc.h,v 1.9 2002/06/19 00:27:55 deraadt Exp $	*/
d24 1
a24 1
void	*xrealloc(void *, size_t);
@


1.9
log
@KNF done automatically while reading....
@
text
@d1 1
a1 1
/*	$OpenBSD: xmalloc.h,v 1.8 2002/03/04 17:27:39 stevesk Exp $	*/
d23 1
d27 3
@


1.9.14.1
log
@upgrade to OpenSSH 4.4
@
text
@d1 1
a1 1
/* $OpenBSD: xmalloc.h,v 1.13 2006/08/03 03:34:42 deraadt Exp $ */
d19 3
d23 1
a23 2
void	*xcalloc(size_t, size_t);
void	*xrealloc(void *, size_t, size_t);
d26 2
a27 3
int	 xasprintf(char **, const char *, ...)
                __attribute__((__format__ (printf, 2, 3)))
                __attribute__((__nonnull__ (2)));
@


1.9.16.1
log
@upgrade to OpenSSH 4.4
@
text
@d1 1
a1 1
/* $OpenBSD: xmalloc.h,v 1.13 2006/08/03 03:34:42 deraadt Exp $ */
d19 3
d23 1
a23 2
void	*xcalloc(size_t, size_t);
void	*xrealloc(void *, size_t, size_t);
d26 2
a27 3
int	 xasprintf(char **, const char *, ...)
                __attribute__((__format__ (printf, 2, 3)))
                __attribute__((__nonnull__ (2)));
@


1.8
log
@$OpenBSD$ and RCSID() cleanup: don't use RCSID() in .h files; add
missing RCSID() to .c files and remove dup /*$OpenBSD$*/ from .c
files.  ok markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: xmalloc.h,v 1.7 2001/06/26 17:27:25 markus Exp $	*/
d25 1
a25 1
char 	*xstrdup(const char *);
@


1.8.2.1
log
@Pull in OpenSSH-3.4
@
text
@d1 1
a1 1
/*	$OpenBSD: xmalloc.h,v 1.9 2002/06/19 00:27:55 deraadt Exp $	*/
d25 1
a25 1
char	*xstrdup(const char *);
@


1.7
log
@remove comments from .h, since they are cut&paste from the .c files
and out of sync
@
text
@d1 2
a17 2

/* RCSID("$OpenBSD: xmalloc.h,v 1.6 2001/06/26 06:33:07 itojun Exp $"); */
@


1.7.2.1
log
@Update to OpenSSH-3.1 on 3.0-stable branch
@
text
@a0 2
/*	$OpenBSD: xmalloc.h,v 1.8 2002/03/04 17:27:39 stevesk Exp $	*/

d16 2
@


1.7.2.2
log
@Update OpenSSH to version 3.3 (with local changes, configuration files still
living in /etc and privsep user being nobody).
@
text
@d1 1
a1 1
/*	$OpenBSD: xmalloc.h,v 1.7.2.1 2002/03/07 17:37:48 jason Exp $	*/
d25 1
a25 1
char	*xstrdup(const char *);
@


1.6
log
@prototype pedant.  not very creative...
- () -> (void)
- no variable names
@
text
@d17 1
a17 1
/* RCSID("$OpenBSD: xmalloc.h,v 1.5 2000/09/07 20:27:56 deraadt Exp $"); */
d22 4
a25 11
/* Like malloc, but calls fatal() if out of memory. */
void   *xmalloc(size_t);

/* Like realloc, but calls fatal() if out of memory. */
void   *xrealloc(void *, size_t);

/* Frees memory allocated using xmalloc or xrealloc. */
void    xfree(void *);

/* Allocates memory using xmalloc, and copies the string into that memory. */
char   *xstrdup(const char *);
@


1.5
log
@cleanup copyright notices on all files.  I have attempted to be accurate with
the details.  everything is now under Tatu's licence (which I copied from his
readme), and/or the core-sdi bsd-ish thing for deattack, or various openbsd
developers under a 2-term bsd licence.  We're not changing any rules, just
being accurate.
@
text
@d17 1
a17 1
/* RCSID("$OpenBSD: xmalloc.h,v 1.4 2000/06/20 01:39:45 markus Exp $"); */
d23 1
a23 1
void   *xmalloc(size_t size);
d26 1
a26 1
void   *xrealloc(void *ptr, size_t new_size);
d29 1
a29 1
void    xfree(void *ptr);
d32 1
a32 1
char   *xstrdup(const char *str);
@


1.5.4.1
log
@Pull in OpenSSH-2.9.9
@
text
@d17 1
a17 1
/* RCSID("$OpenBSD: xmalloc.h,v 1.7 2001/06/26 17:27:25 markus Exp $"); */
d22 11
a32 4
void	*xmalloc(size_t);
void	*xrealloc(void *, size_t);
void     xfree(void *);
char 	*xstrdup(const char *);
@


1.5.4.2
log
@Merge OpenSSH 3.1, keeping /etc as configuration files directory.
(i.e. OpenSSH 3.1 + openbsd29_3.1.patch)
@
text
@a0 2
/*	$OpenBSD: xmalloc.h,v 1.8 2002/03/04 17:27:39 stevesk Exp $	*/

d16 2
@


1.5.2.1
log
@Pull in OpenSSH 2.9.9 to the 2.8 branch.
@
text
@d17 1
a17 1
/* RCSID("$OpenBSD: xmalloc.h,v 1.7 2001/06/26 17:27:25 markus Exp $"); */
d22 11
a32 4
void	*xmalloc(size_t);
void	*xrealloc(void *, size_t);
void     xfree(void *);
char 	*xstrdup(const char *);
@


1.5.2.2
log
@Merge OpenSSH 3.1.
@
text
@a0 2
/*	$OpenBSD: xmalloc.h,v 1.8 2002/03/04 17:27:39 stevesk Exp $	*/

d16 2
@


1.4
log
@OpenBSD tag
@
text
@a1 3
 *
 * xmalloc.h
 *
a2 1
 *
a4 1
 *
d10 5
d17 1
a17 1
/* RCSID("$OpenBSD: xmalloc.h,v 1.3 2000/04/14 10:30:34 markus Exp $"); */
@


1.3
log
@whitespace cleanup
@
text
@d17 1
a17 1
/* RCSID("$Id: xmalloc.h,v 1.2 1999/11/24 00:26:04 deraadt Exp $"); */
@


1.3.2.1
log
@Pull in the rest of openssh-2.2.0 to 2.7 branch (luvin' cvs...)
@
text
@d17 1
a17 1
/* RCSID("$OpenBSD: xmalloc.h,v 1.4 2000/06/20 01:39:45 markus Exp $"); */
@


1.3.2.2
log
@openssh-2.3.0 (again) for 2.7 branch
@
text
@d2 3
d6 1
d9 1
a14 5
 * As far as I am concerned, the code I have written for this software
 * can be used freely for any purpose.  Any derived versions of this
 * software must be clearly marked as such, and if the derived work is
 * incompatible with the protocol description in the RFC file, it must be
 * called by a name other than "ssh" or "Secure Shell".
d17 1
a17 1
/* RCSID("$OpenBSD: xmalloc.h,v 1.5 2000/09/07 20:27:56 deraadt Exp $"); */
@


1.3.2.3
log
@OpenSSH-2.5.1 for 2.7 patch branch
@
text
@@


1.3.2.4
log
@Pull in OpenSSH-2.5.2 for 2.7 branch.
@
text
@@


1.2
log
@much more KNF
@
text
@d2 1
a2 1
 * 
d4 1
a4 1
 * 
d6 1
a6 1
 * 
d9 1
a9 1
 * 
d11 1
a11 1
 * 
d14 1
a14 1
 * 
d17 1
a17 1
/* RCSID("$Id: xmalloc.h,v 1.1 1999/09/26 20:53:38 deraadt Exp $"); */
@


1.1
log
@i bet a lot of people didn't know what ssh 1.2.16 had a nice license.
well, except for the patent issues.  someone in sweden (forget their
name at the moment) cleaned out most of the patented code, and now
this code removes rsa code.  when this is done, it will link against
libssl, but the work isn't completely done yet.  then we need to bring
this up to modern days, featurewise.
@
text
@d2 14
d17 1
a17 15
xmalloc.h

Author: Tatu Ylonen <ylo@@cs.hut.fi>

Copyright (c) 1995 Tatu Ylonen <ylo@@cs.hut.fi>, Espoo, Finland
                   All rights reserved

Created: Mon Mar 20 22:09:17 1995 ylo

Versions of malloc and friends that check their results, and never return
failure (they call fatal if they encounter an error).

*/

/* RCSID("$Id: xmalloc.h,v 1.2 1999/05/04 11:59:29 bg Exp $"); */
d23 1
a23 1
void *xmalloc(size_t size);
d26 1
a26 1
void *xrealloc(void *ptr, size_t new_size);
d29 1
a29 1
void xfree(void *ptr);
d32 1
a32 1
char *xstrdup(const char *str);
d34 1
a34 1
#endif /* XMALLOC_H */
@

