head	1.31;
access;
symbols
	OPENBSD_6_2:1.31.0.6
	OPENBSD_6_2_BASE:1.31
	OPENBSD_6_1:1.31.0.4
	OPENBSD_6_1_BASE:1.31
	OPENBSD_6_0:1.30.0.8
	OPENBSD_6_0_BASE:1.30
	OPENBSD_5_9:1.30.0.4
	OPENBSD_5_9_BASE:1.30
	OPENBSD_5_8:1.30.0.2
	OPENBSD_5_8_BASE:1.30
	OPENBSD_5_7:1.29.0.2
	OPENBSD_5_7_BASE:1.29
	OPENBSD_5_6:1.28.0.30
	OPENBSD_5_6_BASE:1.28
	OPENBSD_5_5:1.28.0.28
	OPENBSD_5_5_BASE:1.28
	OPENBSD_5_4:1.28.0.24
	OPENBSD_5_4_BASE:1.28
	OPENBSD_5_3:1.28.0.22
	OPENBSD_5_3_BASE:1.28
	OPENBSD_5_2:1.28.0.20
	OPENBSD_5_2_BASE:1.28
	OPENBSD_5_1_BASE:1.28
	OPENBSD_5_1:1.28.0.18
	OPENBSD_5_0:1.28.0.16
	OPENBSD_5_0_BASE:1.28
	OPENBSD_4_9:1.28.0.14
	OPENBSD_4_9_BASE:1.28
	OPENBSD_4_8:1.28.0.12
	OPENBSD_4_8_BASE:1.28
	OPENBSD_4_7:1.28.0.8
	OPENBSD_4_7_BASE:1.28
	OPENBSD_4_6:1.28.0.10
	OPENBSD_4_6_BASE:1.28
	OPENBSD_4_5:1.28.0.6
	OPENBSD_4_5_BASE:1.28
	OPENBSD_4_4:1.28.0.4
	OPENBSD_4_4_BASE:1.28
	OPENBSD_4_3:1.28.0.2
	OPENBSD_4_3_BASE:1.28
	OPENBSD_4_2:1.26.0.6
	OPENBSD_4_2_BASE:1.26
	OPENBSD_4_1:1.26.0.2
	OPENBSD_4_1_BASE:1.26
	OPENBSD_4_0:1.26.0.4
	OPENBSD_4_0_BASE:1.26
	OPENBSD_3_9:1.16.0.2
	OPENBSD_3_9_BASE:1.16
	OPENBSD_3_8:1.12.0.6
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.4
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.12.0.2
	OPENBSD_3_6_BASE:1.12
	OPENBSD_3_5:1.11.0.2
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.8.0.2
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.6
	OPENBSD_2_8:1.1.0.4
	OPENBSD_2_7:1.1.0.2;
locks; strict;
comment	@ * @;


1.31
date	2016.11.29.03.54.50;	author dtucker;	state Exp;
branches;
next	1.30;
commitid	1YuZ6y9PSwz2mkJm;

1.30
date	2015.07.30.23.09.15;	author djm;	state Exp;
branches;
next	1.29;
commitid	FqRUkhpZ2MqbGKLp;

1.29
date	2014.09.03.18.55.07;	author djm;	state Exp;
branches
	1.29.2.1;
next	1.28;
commitid	zpaVksPpTGSMFXLX;

1.28
date	2007.09.11.23.49.09;	author stevesk;	state Exp;
branches;
next	1.27;

1.27
date	2007.09.11.04.36.29;	author stevesk;	state Exp;
branches;
next	1.26;

1.26
date	2006.08.03.03.34.42;	author deraadt;	state Exp;
branches;
next	1.25;

1.25
date	2006.07.22.20.48.23;	author stevesk;	state Exp;
branches;
next	1.24;

1.24
date	2006.07.17.01.31.10;	author stevesk;	state Exp;
branches;
next	1.23;

1.23
date	2006.07.11.20.07.25;	author stevesk;	state Exp;
branches;
next	1.22;

1.22
date	2006.07.09.15.15.11;	author stevesk;	state Exp;
branches;
next	1.21;

1.21
date	2006.07.06.16.03.53;	author stevesk;	state Exp;
branches;
next	1.20;

1.20
date	2006.07.02.22.45.59;	author stevesk;	state Exp;
branches;
next	1.19;

1.19
date	2006.03.25.13.17.03;	author djm;	state Exp;
branches;
next	1.18;

1.18
date	2006.03.20.18.14.02;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2006.03.19.18.51.19;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2006.02.20.17.19.54;	author stevesk;	state Exp;
branches
	1.16.2.1;
next	1.15;

1.15
date	2006.02.10.00.27.13;	author stevesk;	state Exp;
branches;
next	1.14;

1.14
date	2006.02.08.12.15.27;	author stevesk;	state Exp;
branches;
next	1.13;

1.13
date	2006.02.07.01.42.00;	author stevesk;	state Exp;
branches;
next	1.12;

1.12
date	2004.06.21.17.36.31;	author avsm;	state Exp;
branches
	1.12.6.1;
next	1.11;

1.11
date	2004.01.11.21.55.06;	author deraadt;	state Exp;
branches
	1.11.2.1;
next	1.10;

1.10
date	2003.06.12.07.57.38;	author markus;	state Exp;
branches
	1.10.2.1;
next	1.9;

1.9
date	2003.05.24.09.30.40;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2003.02.03.08.56.16;	author markus;	state Exp;
branches
	1.8.2.1;
next	1.7;

1.7
date	2002.06.24.17.57.20;	author deraadt;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2002.06.23.21.06.13;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.06.23.03.30.58;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2001.12.19.07.18.56;	author deraadt;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2001.07.22.21.32.27;	author markus;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2001.07.18.21.10.43;	author markus;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.04.01.46.30;	author djm;	state Exp;
branches
	1.1.2.1
	1.1.4.1
	1.1.6.1;
next	;

1.1.2.1
date	2001.03.21.18.53.18;	author jason;	state Exp;
branches;
next	;

1.1.4.1
date	2001.03.21.19.46.32;	author jason;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2001.05.07.21.09.38;	author jason;	state Exp;
branches;
next	1.1.4.3;

1.1.4.3
date	2001.09.27.00.15.43;	author miod;	state Exp;
branches;
next	1.1.4.4;

1.1.4.4
date	2002.03.08.17.04.43;	author brad;	state Exp;
branches;
next	;

1.1.6.1
date	2001.09.27.19.03.56;	author jason;	state Exp;
branches;
next	1.1.6.2;

1.1.6.2
date	2002.03.09.00.20.45;	author miod;	state Exp;
branches;
next	;

1.3.2.1
date	2002.03.07.17.37.48;	author jason;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2002.06.26.18.22.37;	author miod;	state Exp;
branches;
next	;

1.4.2.1
date	2002.06.26.15.30.39;	author jason;	state Exp;
branches;
next	1.4.2.2;

1.4.2.2
date	2003.04.03.22.35.18;	author miod;	state Exp;
branches;
next	;

1.7.2.1
date	2003.04.01.00.12.14;	author margarida;	state Exp;
branches;
next	1.7.2.2;

1.7.2.2
date	2003.09.16.21.20.29;	author brad;	state Exp;
branches;
next	;

1.8.2.1
date	2003.09.16.20.50.44;	author brad;	state Exp;
branches;
next	1.8.2.2;

1.8.2.2
date	2004.03.04.18.18.17;	author brad;	state Exp;
branches;
next	;

1.10.2.1
date	2004.02.28.03.51.34;	author brad;	state Exp;
branches;
next	1.10.2.2;

1.10.2.2
date	2004.08.19.22.37.33;	author brad;	state Exp;
branches;
next	;

1.11.2.1
date	2004.08.19.04.13.28;	author brad;	state Exp;
branches;
next	;

1.12.6.1
date	2006.10.06.03.19.33;	author brad;	state Exp;
branches;
next	;

1.16.2.1
date	2006.09.30.04.06.51;	author brad;	state Exp;
branches;
next	;

1.29.2.1
date	2015.08.12.20.22.42;	author sthen;	state Exp;
branches;
next	;
commitid	7qODXQiG65TJQV3D;


desc
@@


1.31
log
@Factor out code to disconnect from controlling terminal into its own
function.  ok djm@@
@
text
@/* $OpenBSD: sshpty.c,v 1.30 2015/07/30 23:09:15 djm Exp $ */
/*
 * Author: Tatu Ylonen <ylo@@cs.hut.fi>
 * Copyright (c) 1995 Tatu Ylonen <ylo@@cs.hut.fi>, Espoo, Finland
 *                    All rights reserved
 * Allocating a pseudo-terminal, and making it the controlling tty.
 *
 * As far as I am concerned, the code I have written for this software
 * can be used freely for any purpose.  Any derived versions of this
 * software must be clearly marked as such, and if the derived work is
 * incompatible with the protocol description in the RFC file, it must be
 * called by a name other than "ssh" or "Secure Shell".
 */

#include <sys/types.h>
#include <sys/ioctl.h>
#include <sys/stat.h>

#include <errno.h>
#include <fcntl.h>
#include <grp.h>
#include <paths.h>
#include <pwd.h>
#include <stdarg.h>
#include <string.h>
#include <termios.h>
#include <unistd.h>
#include <util.h>

#include "sshpty.h"
#include "log.h"

#ifndef O_NOCTTY
#define O_NOCTTY 0
#endif

/*
 * Allocates and opens a pty.  Returns 0 if no pty could be allocated, or
 * nonzero if a pty was successfully allocated.  On success, open file
 * descriptors for the pty and tty sides and the name of the tty side are
 * returned (the buffer must be able to hold at least 64 characters).
 */

int
pty_allocate(int *ptyfd, int *ttyfd, char *namebuf, size_t namebuflen)
{
	char buf[64];
	int i;

	i = openpty(ptyfd, ttyfd, buf, NULL, NULL);
	if (i < 0) {
		error("openpty: %.100s", strerror(errno));
		return 0;
	}
	strlcpy(namebuf, buf, namebuflen);	/* possible truncation */
	return 1;
}

/* Releases the tty.  Its ownership is returned to root, and permissions to 0666. */

void
pty_release(const char *tty)
{
	if (chown(tty, (uid_t) 0, (gid_t) 0) < 0)
		error("chown %.100s 0 0 failed: %.100s", tty, strerror(errno));
	if (chmod(tty, (mode_t) 0666) < 0)
		error("chmod %.100s 0666 failed: %.100s", tty, strerror(errno));
}

/* Makes the tty the process's controlling tty and sets it to sane modes. */

void
pty_make_controlling_tty(int *ttyfd, const char *tty)
{
	int fd;

	/* First disconnect from the old controlling tty. */
#ifdef TIOCNOTTY
	fd = open(_PATH_TTY, O_RDWR | O_NOCTTY);
	if (fd >= 0) {
		(void) ioctl(fd, TIOCNOTTY, NULL);
		close(fd);
	}
#endif /* TIOCNOTTY */
	if (setsid() < 0)
		error("setsid: %.100s", strerror(errno));

	/*
	 * Verify that we are successfully disconnected from the controlling
	 * tty.
	 */
	fd = open(_PATH_TTY, O_RDWR | O_NOCTTY);
	if (fd >= 0) {
		error("Failed to disconnect from controlling tty.");
		close(fd);
	}
	/* Make it our controlling tty. */
#ifdef TIOCSCTTY
	debug("Setting controlling tty using TIOCSCTTY.");
	if (ioctl(*ttyfd, TIOCSCTTY, NULL) < 0)
		error("ioctl(TIOCSCTTY): %.100s", strerror(errno));
#endif /* TIOCSCTTY */
	fd = open(tty, O_RDWR);
	if (fd < 0)
		error("%.100s: %.100s", tty, strerror(errno));
	else
		close(fd);

	/* Verify that we now have a controlling tty. */
	fd = open(_PATH_TTY, O_WRONLY);
	if (fd < 0)
		error("open /dev/tty failed - could not set controlling tty: %.100s",
		    strerror(errno));
	else
		close(fd);
}

/* Changes the window size associated with the pty. */

void
pty_change_window_size(int ptyfd, u_int row, u_int col,
	u_int xpixel, u_int ypixel)
{
	struct winsize w;

	/* may truncate u_int -> u_short */
	w.ws_row = row;
	w.ws_col = col;
	w.ws_xpixel = xpixel;
	w.ws_ypixel = ypixel;
	(void) ioctl(ptyfd, TIOCSWINSZ, &w);
}

void
pty_setowner(struct passwd *pw, const char *tty)
{
	struct group *grp;
	gid_t gid;
	mode_t mode;
	struct stat st;

	/* Determine the group to make the owner of the tty. */
	grp = getgrnam("tty");
	gid = (grp != NULL) ? grp->gr_gid : pw->pw_gid;
	mode = (grp != NULL) ? 0620 : 0600;

	/*
	 * Change owner and mode of the tty as required.
	 * Warn but continue if filesystem is read-only and the uids match/
	 * tty is owned by root.
	 */
	if (stat(tty, &st))
		fatal("stat(%.100s) failed: %.100s", tty,
		    strerror(errno));

	if (st.st_uid != pw->pw_uid || st.st_gid != gid) {
		if (chown(tty, pw->pw_uid, gid) < 0) {
			if (errno == EROFS &&
			    (st.st_uid == pw->pw_uid || st.st_uid == 0))
				debug("chown(%.100s, %u, %u) failed: %.100s",
				    tty, (u_int)pw->pw_uid, (u_int)gid,
				    strerror(errno));
			else
				fatal("chown(%.100s, %u, %u) failed: %.100s",
				    tty, (u_int)pw->pw_uid, (u_int)gid,
				    strerror(errno));
		}
	}

	if ((st.st_mode & (S_IRWXU|S_IRWXG|S_IRWXO)) != mode) {
		if (chmod(tty, mode) < 0) {
			if (errno == EROFS &&
			    (st.st_mode & (S_IRGRP | S_IROTH)) == 0)
				debug("chmod(%.100s, 0%o) failed: %.100s",
				    tty, (u_int)mode, strerror(errno));
			else
				fatal("chmod(%.100s, 0%o) failed: %.100s",
				    tty, (u_int)mode, strerror(errno));
		}
	}
}

/* Disconnect from the controlling tty. */
void
disconnect_controlling_tty(void)
{
	int fd;

	if ((fd = open(_PATH_TTY, O_RDWR | O_NOCTTY)) >= 0) {
		(void) ioctl(fd, TIOCNOTTY, NULL);
		close(fd);
	}
}
@


1.30
log
@fix pty permissions; patch from Nikolay Edigaryev; ok deraadt
@
text
@d1 1
a1 1
/* $OpenBSD: sshpty.c,v 1.29 2014/09/03 18:55:07 djm Exp $ */
d180 12
@


1.29
log
@tighten permissions on pty when the "tty" group does not exist;
pointed out by Corinna Vinschen; ok markus
@
text
@d1 1
a1 1
/* $OpenBSD: sshpty.c,v 1.28 2007/09/11 23:49:09 stevesk Exp $ */
d145 1
a145 1
	mode = (grp != NULL) ? 0622 : 0600;
@


1.29.2.1
log
@MFC sshpty.c r1.30, "fix pty permissions; patch from Nikolay Edigaryev; ok deraadt"
@
text
@d1 1
a1 1
/* $OpenBSD: sshpty.c,v 1.29 2014/09/03 18:55:07 djm Exp $ */
d145 1
a145 1
	mode = (grp != NULL) ? 0620 : 0600;
@


1.28
log
@remove #if defined block not needed; ok markus@@ dtucker@@
@
text
@d1 1
a1 1
/* $OpenBSD: sshpty.c,v 1.27 2007/09/11 04:36:29 stevesk Exp $ */
d144 2
a145 7
	if (grp) {
		gid = grp->gr_gid;
		mode = S_IRUSR | S_IWUSR | S_IWGRP;
	} else {
		gid = pw->pw_gid;
		mode = S_IRUSR | S_IWUSR | S_IWGRP | S_IWOTH;
	}
@


1.27
log
@sort #include
@
text
@d1 1
a1 1
/* $OpenBSD: sshpty.c,v 1.26 2006/08/03 03:34:42 deraadt Exp $ */
a31 5

/* Pty allocated with _getpty gets broken if we do I_PUSH:es to it. */
#if defined(HAVE__GETPTY) || defined(HAVE_OPENPTY)
#undef HAVE_DEV_PTMX
#endif
@


1.26
log
@almost entirely get rid of the culture of ".h files that include .h files"
ok djm, sort of ok stevesk
makes the pain stop in one easy step
@
text
@d1 1
a1 1
/* $OpenBSD: sshpty.c,v 1.25 2006/07/22 20:48:23 stevesk Exp $ */
d18 1
d24 1
a28 1
#include <stdarg.h>
@


1.25
log
@move #include <string.h> out of includes.h
@
text
@d1 1
a1 1
/* $OpenBSD: sshpty.c,v 1.24 2006/07/17 01:31:10 stevesk Exp $ */
d15 1
a15 2
#include "includes.h"

a16 1
#include <sys/types.h>
a17 1

d27 1
@


1.24
log
@move #include <unistd.h> out of includes.h
@
text
@d1 1
a1 1
/* $OpenBSD: sshpty.c,v 1.23 2006/07/11 20:07:25 stevesk Exp $ */
d26 1
@


1.23
log
@move #include <errno.h> out of includes.h; ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: sshpty.c,v 1.22 2006/07/09 15:15:11 stevesk Exp $ */
d27 1
@


1.22
log
@move #include <fcntl.h> out of includes.h
@
text
@d1 1
a1 1
/* $OpenBSD: sshpty.c,v 1.21 2006/07/06 16:03:53 stevesk Exp $ */
d21 1
@


1.21
log
@move #include <pwd.h> out of includes.h; ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: sshpty.c,v 1.20 2006/07/02 22:45:59 stevesk Exp $ */
d21 1
@


1.20
log
@move #include <grp.h> out of includes.h
@
text
@d1 1
a1 1
/* $OpenBSD: sshpty.c,v 1.19 2006/03/25 13:17:03 djm Exp $ */
d23 1
@


1.19
log
@Put $OpenBSD$ tags back (as comments) to replace the RCSID()s that
Theo nuked - our scripts to sync -portable need them in the files
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d21 1
@


1.18
log
@sprinkle u_int throughout pty subsystem, ok markus
@
text
@d1 1
@


1.17
log
@RCSID() can die
@
text
@d44 1
a44 1
pty_allocate(int *ptyfd, int *ttyfd, char *namebuf, int namebuflen)
d120 2
a121 2
pty_change_window_size(int ptyfd, int row, int col,
	int xpixel, int ypixel)
d125 1
@


1.16
log
@move #include <sys/stat.h> out of includes.h; ok markus@@
@
text
@a14 1
RCSID("$OpenBSD: sshpty.c,v 1.15 2006/02/10 00:27:13 stevesk Exp $");
@


1.16.2.1
log
@upgrade to OpenSSH 4.4
@
text
@a0 1
/* $OpenBSD: sshpty.c,v 1.26 2006/08/03 03:34:42 deraadt Exp $ */
d14 4
a18 1
#include <sys/ioctl.h>
d20 1
a20 3
#include <errno.h>
#include <fcntl.h>
#include <grp.h>
a21 2
#include <pwd.h>
#include <string.h>
a22 1
#include <unistd.h>
a23 1
#include <stdarg.h>
d45 1
a45 1
pty_allocate(int *ptyfd, int *ttyfd, char *namebuf, size_t namebuflen)
d121 2
a122 2
pty_change_window_size(int ptyfd, u_int row, u_int col,
	u_int xpixel, u_int ypixel)
a125 1
	/* may truncate u_int -> u_short */
@


1.15
log
@move #include <sys/ioctl.h> out of includes.h; ok markus@@
@
text
@d15 1
a15 1
RCSID("$OpenBSD: sshpty.c,v 1.14 2006/02/08 12:15:27 stevesk Exp $");
d18 2
@


1.14
log
@move #include <paths.h> out of includes.h; ok markus@@
@
text
@d15 3
a17 1
RCSID("$OpenBSD: sshpty.c,v 1.13 2006/02/07 01:42:00 stevesk Exp $");
@


1.13
log
@move #include <termios.h> out of includes.h; ok markus@@
@
text
@d15 1
a15 1
RCSID("$OpenBSD: sshpty.c,v 1.12 2004/06/21 17:36:31 avsm Exp $");
d17 1
@


1.12
log
@make ssh -Wshadow clean, no functional changes
markus@@ ok
@
text
@d15 1
a15 1
RCSID("$OpenBSD: sshpty.c,v 1.11 2004/01/11 21:55:06 deraadt Exp $");
d17 1
d19 1
@


1.12.6.1
log
@upgrade to OpenSSH 4.4
@
text
@a0 1
/* $OpenBSD: sshpty.c,v 1.26 2006/08/03 03:34:42 deraadt Exp $ */
d14 3
a16 11
#include <sys/types.h>
#include <sys/ioctl.h>
#include <sys/stat.h>
#include <errno.h>
#include <fcntl.h>
#include <grp.h>
#include <paths.h>
#include <pwd.h>
#include <string.h>
#include <termios.h>
#include <unistd.h>
a17 2
#include <stdarg.h>

d38 1
a38 1
pty_allocate(int *ptyfd, int *ttyfd, char *namebuf, size_t namebuflen)
d114 2
a115 2
pty_change_window_size(int ptyfd, u_int row, u_int col,
	u_int xpixel, u_int ypixel)
a118 1
	/* may truncate u_int -> u_short */
@


1.11
log
@for pty opening, only use the openpty() path.  the other stuff only needs
to be in openssh-p; markus ok
@
text
@d15 1
a15 1
RCSID("$OpenBSD: sshpty.c,v 1.10 2003/06/12 07:57:38 markus Exp $");
d55 1
a55 1
pty_release(const char *ttyname)
d57 4
a60 4
	if (chown(ttyname, (uid_t) 0, (gid_t) 0) < 0)
		error("chown %.100s 0 0 failed: %.100s", ttyname, strerror(errno));
	if (chmod(ttyname, (mode_t) 0666) < 0)
		error("chmod %.100s 0666 failed: %.100s", ttyname, strerror(errno));
d66 1
a66 1
pty_make_controlling_tty(int *ttyfd, const char *ttyname)
d96 1
a96 1
	fd = open(ttyname, O_RDWR);
d98 1
a98 1
		error("%.100s: %.100s", ttyname, strerror(errno));
d127 1
a127 1
pty_setowner(struct passwd *pw, const char *ttyname)
d149 2
a150 2
	if (stat(ttyname, &st))
		fatal("stat(%.100s) failed: %.100s", ttyname,
d154 1
a154 1
		if (chown(ttyname, pw->pw_uid, gid) < 0) {
d158 1
a158 1
				    ttyname, (u_int)pw->pw_uid, (u_int)gid,
d162 1
a162 1
				    ttyname, (u_int)pw->pw_uid, (u_int)gid,
d168 1
a168 1
		if (chmod(ttyname, mode) < 0) {
d172 1
a172 1
				    ttyname, (u_int)mode, strerror(errno));
d175 1
a175 1
				    ttyname, (u_int)mode, strerror(errno));
@


1.11.2.1
log
@upgrade to OpenSSH 3.9
@
text
@d15 1
a15 1
RCSID("$OpenBSD: sshpty.c,v 1.12 2004/06/21 17:36:31 avsm Exp $");
d55 1
a55 1
pty_release(const char *tty)
d57 4
a60 4
	if (chown(tty, (uid_t) 0, (gid_t) 0) < 0)
		error("chown %.100s 0 0 failed: %.100s", tty, strerror(errno));
	if (chmod(tty, (mode_t) 0666) < 0)
		error("chmod %.100s 0666 failed: %.100s", tty, strerror(errno));
d66 1
a66 1
pty_make_controlling_tty(int *ttyfd, const char *tty)
d96 1
a96 1
	fd = open(tty, O_RDWR);
d98 1
a98 1
		error("%.100s: %.100s", tty, strerror(errno));
d127 1
a127 1
pty_setowner(struct passwd *pw, const char *tty)
d149 2
a150 2
	if (stat(tty, &st))
		fatal("stat(%.100s) failed: %.100s", tty,
d154 1
a154 1
		if (chown(tty, pw->pw_uid, gid) < 0) {
d158 1
a158 1
				    tty, (u_int)pw->pw_uid, (u_int)gid,
d162 1
a162 1
				    tty, (u_int)pw->pw_uid, (u_int)gid,
d168 1
a168 1
		if (chmod(tty, mode) < 0) {
d172 1
a172 1
				    tty, (u_int)mode, strerror(errno));
d175 1
a175 1
				    tty, (u_int)mode, strerror(errno));
@


1.10
log
@typos; dtucker at zip.com.au
@
text
@d15 1
a15 1
RCSID("$OpenBSD: sshpty.c,v 1.9 2003/05/24 09:30:40 djm Exp $");
a39 2
#if defined(HAVE_OPENPTY) || defined(BSD4_4)
	/* openpty(3) exists in OSF/1 and some other os'es */
a49 119
#else /* HAVE_OPENPTY */
#ifdef HAVE__GETPTY
	/*
	 * _getpty(3) exists in SGI Irix 4.x, 5.x & 6.x -- it generates more
	 * pty's automagically when needed
	 */
	char *slave;

	slave = _getpty(ptyfd, O_RDWR, 0622, 0);
	if (slave == NULL) {
		error("_getpty: %.100s", strerror(errno));
		return 0;
	}
	strlcpy(namebuf, slave, namebuflen);
	/* Open the slave side. */
	*ttyfd = open(namebuf, O_RDWR | O_NOCTTY);
	if (*ttyfd < 0) {
		error("%.200s: %.100s", namebuf, strerror(errno));
		close(*ptyfd);
		return 0;
	}
	return 1;
#else /* HAVE__GETPTY */
#ifdef HAVE_DEV_PTMX
	/*
	 * This code is used e.g. on Solaris 2.x.  (Note that Solaris 2.3
	 * also has bsd-style ptys, but they simply do not work.)
	 */
	int ptm;
	char *pts;

	ptm = open("/dev/ptmx", O_RDWR | O_NOCTTY);
	if (ptm < 0) {
		error("/dev/ptmx: %.100s", strerror(errno));
		return 0;
	}
	if (grantpt(ptm) < 0) {
		error("grantpt: %.100s", strerror(errno));
		return 0;
	}
	if (unlockpt(ptm) < 0) {
		error("unlockpt: %.100s", strerror(errno));
		return 0;
	}
	pts = ptsname(ptm);
	if (pts == NULL)
		error("Slave pty side name could not be obtained.");
	strlcpy(namebuf, pts, namebuflen);
	*ptyfd = ptm;

	/* Open the slave side. */
	*ttyfd = open(namebuf, O_RDWR | O_NOCTTY);
	if (*ttyfd < 0) {
		error("%.100s: %.100s", namebuf, strerror(errno));
		close(*ptyfd);
		return 0;
	}
	/* Push the appropriate streams modules, as described in Solaris pts(7). */
	if (ioctl(*ttyfd, I_PUSH, "ptem") < 0)
		error("ioctl I_PUSH ptem: %.100s", strerror(errno));
	if (ioctl(*ttyfd, I_PUSH, "ldterm") < 0)
		error("ioctl I_PUSH ldterm: %.100s", strerror(errno));
	if (ioctl(*ttyfd, I_PUSH, "ttcompat") < 0)
		error("ioctl I_PUSH ttcompat: %.100s", strerror(errno));
	return 1;
#else /* HAVE_DEV_PTMX */
#ifdef HAVE_DEV_PTS_AND_PTC
	/* AIX-style pty code. */
	const char *name;

	*ptyfd = open("/dev/ptc", O_RDWR | O_NOCTTY);
	if (*ptyfd < 0) {
		error("Could not open /dev/ptc: %.100s", strerror(errno));
		return 0;
	}
	name = ttyname(*ptyfd);
	if (!name)
		fatal("Open of /dev/ptc returns device for which ttyname fails.");
	strlcpy(namebuf, name, namebuflen);
	*ttyfd = open(name, O_RDWR | O_NOCTTY);
	if (*ttyfd < 0) {
		error("Could not open pty slave side %.100s: %.100s",
		    name, strerror(errno));
		close(*ptyfd);
		return 0;
	}
	return 1;
#else /* HAVE_DEV_PTS_AND_PTC */
	/* BSD-style pty code. */
	char buf[64];
	int i;
	const char *ptymajors = "pqrstuvwxyzabcdefghijklmnoABCDEFGHIJKLMNOPQRSTUVWXYZ";
	const char *ptyminors = "0123456789abcdef";
	int num_minors = strlen(ptyminors);
	int num_ptys = strlen(ptymajors) * num_minors;

	for (i = 0; i < num_ptys; i++) {
		snprintf(buf, sizeof buf, "/dev/pty%c%c", ptymajors[i / num_minors],
			 ptyminors[i % num_minors]);
		*ptyfd = open(buf, O_RDWR | O_NOCTTY);
		if (*ptyfd < 0)
			continue;
		snprintf(namebuf, namebuflen, "/dev/tty%c%c",
		    ptymajors[i / num_minors], ptyminors[i % num_minors]);

		/* Open the slave side. */
		*ttyfd = open(namebuf, O_RDWR | O_NOCTTY);
		if (*ttyfd < 0) {
			error("%.100s: %.100s", namebuf, strerror(errno));
			close(*ptyfd);
			return 0;
		}
		return 1;
	}
	return 0;
#endif /* HAVE_DEV_PTS_AND_PTC */
#endif /* HAVE_DEV_PTMX */
#endif /* HAVE__GETPTY */
#endif /* HAVE_OPENPTY */
@


1.10.2.1
log
@upgrade to OpenSSH 3.8
@
text
@d15 1
a15 1
RCSID("$OpenBSD: sshpty.c,v 1.11 2004/01/11 21:55:06 deraadt Exp $");
d40 2
d52 119
@


1.10.2.2
log
@upgrade to OpenSSH 3.9
@
text
@d15 1
a15 1
RCSID("$OpenBSD: sshpty.c,v 1.12 2004/06/21 17:36:31 avsm Exp $");
d55 1
a55 1
pty_release(const char *tty)
d57 4
a60 4
	if (chown(tty, (uid_t) 0, (gid_t) 0) < 0)
		error("chown %.100s 0 0 failed: %.100s", tty, strerror(errno));
	if (chmod(tty, (mode_t) 0666) < 0)
		error("chmod %.100s 0666 failed: %.100s", tty, strerror(errno));
d66 1
a66 1
pty_make_controlling_tty(int *ttyfd, const char *tty)
d96 1
a96 1
	fd = open(tty, O_RDWR);
d98 1
a98 1
		error("%.100s: %.100s", tty, strerror(errno));
d127 1
a127 1
pty_setowner(struct passwd *pw, const char *tty)
d149 2
a150 2
	if (stat(tty, &st))
		fatal("stat(%.100s) failed: %.100s", tty,
d154 1
a154 1
		if (chown(tty, pw->pw_uid, gid) < 0) {
d158 1
a158 1
				    tty, (u_int)pw->pw_uid, (u_int)gid,
d162 1
a162 1
				    tty, (u_int)pw->pw_uid, (u_int)gid,
d168 1
a168 1
		if (chmod(tty, mode) < 0) {
d172 1
a172 1
				    tty, (u_int)mode, strerror(errno));
d175 1
a175 1
				    tty, (u_int)mode, strerror(errno));
@


1.9
log
@cast some types for printing; ok markus@@
@
text
@d15 1
a15 1
RCSID("$OpenBSD: sshpty.c,v 1.8 2003/02/03 08:56:16 markus Exp $");
d184 1
a184 1
/* Makes the tty the processes controlling tty and sets it to sane modes. */
@


1.8
log
@don't call error() for readonly /dev; from soekris list; ok mcbride,
henning, deraadt.
@
text
@d15 1
a15 1
RCSID("$OpenBSD: sshpty.c,v 1.7 2002/06/24 17:57:20 deraadt Exp $");
d293 1
a293 1
				    ttyname, mode, strerror(errno));
d296 1
a296 1
				    ttyname, mode, strerror(errno));
@


1.8.2.1
log
@upgrade to OpenSSH 3.7
@
text
@d15 1
a15 1
RCSID("$OpenBSD: sshpty.c,v 1.10 2003/06/12 07:57:38 markus Exp $");
d184 1
a184 1
/* Makes the tty the process's controlling tty and sets it to sane modes. */
d293 1
a293 1
				    ttyname, (u_int)mode, strerror(errno));
d296 1
a296 1
				    ttyname, (u_int)mode, strerror(errno));
@


1.8.2.2
log
@upgrade to OpenSSH 3.8upgrade to OpenSSH 3.8upgrade to OpenSSH 3.8
@
text
@d15 1
a15 1
RCSID("$OpenBSD: sshpty.c,v 1.11 2004/01/11 21:55:06 deraadt Exp $");
d40 2
d52 119
@


1.7
log
@explicit (u_int) for uid and gid
@
text
@d15 1
a15 1
RCSID("$OpenBSD: sshpty.c,v 1.6 2002/06/23 21:06:13 deraadt Exp $");
d278 1
a278 1
				error("chown(%.100s, %u, %u) failed: %.100s",
d292 1
a292 1
				error("chmod(%.100s, 0%o) failed: %.100s",
@


1.7.2.1
log
@Update to OpenSSH 3.6
@
text
@d15 1
a15 1
RCSID("$OpenBSD: sshpty.c,v 1.8 2003/02/03 08:56:16 markus Exp $");
d278 1
a278 1
				debug("chown(%.100s, %u, %u) failed: %.100s",
d292 1
a292 1
				debug("chmod(%.100s, 0%o) failed: %.100s",
@


1.7.2.2
log
@upgrade to OpenSSH 3.7
@
text
@d15 1
a15 1
RCSID("$OpenBSD: sshpty.c,v 1.10 2003/06/12 07:57:38 markus Exp $");
d184 1
a184 1
/* Makes the tty the process's controlling tty and sets it to sane modes. */
d293 1
a293 1
				    ttyname, (u_int)mode, strerror(errno));
d296 1
a296 1
				    ttyname, (u_int)mode, strerror(errno));
@


1.6
log
@KNF
@
text
@d15 1
a15 1
RCSID("$OpenBSD: sshpty.c,v 1.5 2002/06/23 03:30:58 deraadt Exp $");
d279 1
a279 1
				    ttyname, pw->pw_uid, gid,
d283 1
a283 1
				    ttyname, pw->pw_uid, gid,
@


1.5
log
@various KNF and %d for unsigned
@
text
@d15 1
a15 1
RCSID("$OpenBSD: sshpty.c,v 1.4 2001/12/19 07:18:56 deraadt Exp $");
d228 1
a228 1
	else {
a229 1
	}
d239 1
d277 1
a277 1
			   (st.st_uid == pw->pw_uid || st.st_uid == 0))
@


1.4
log
@basic KNF done while i was looking for something else
@
text
@d15 1
a15 1
RCSID("$OpenBSD: sshpty.c,v 1.3 2001/07/22 21:32:27 markus Exp $");
d278 1
a278 1
				error("chown(%.100s, %d, %d) failed: %.100s",
d282 1
a282 1
				fatal("chown(%.100s, %d, %d) failed: %.100s",
@


1.4.2.1
log
@Pull in OpenSSH-3.4
@
text
@d15 1
a15 1
RCSID("$OpenBSD: sshpty.c,v 1.7 2002/06/24 17:57:20 deraadt Exp $");
d228 1
a228 1
	else
d230 1
a239 1

d277 3
a279 3
			    (st.st_uid == pw->pw_uid || st.st_uid == 0))
				error("chown(%.100s, %u, %u) failed: %.100s",
				    ttyname, (u_int)pw->pw_uid, (u_int)gid,
d282 2
a283 2
				fatal("chown(%.100s, %u, %u) failed: %.100s",
				    ttyname, (u_int)pw->pw_uid, (u_int)gid,
@


1.4.2.2
log
@Merge OpenSSH 3.6.1
@
text
@d15 1
a15 1
RCSID("$OpenBSD: sshpty.c,v 1.8 2003/02/03 08:56:16 markus Exp $");
d278 1
a278 1
				debug("chown(%.100s, %u, %u) failed: %.100s",
d292 1
a292 1
				debug("chmod(%.100s, 0%o) failed: %.100s",
@


1.3
log
@update comment
@
text
@d15 1
a15 1
RCSID("$OpenBSD: sshpty.c,v 1.2 2001/07/18 21:10:43 markus Exp $");
d134 1
a134 1
		      name, strerror(errno));
d227 1
a227 1
		      strerror(errno));
d237 1
a237 1
		       int xpixel, int ypixel)
d276 1
a276 1
			if (errno == EROFS && 
d279 2
a280 2
				      ttyname, pw->pw_uid, gid,
				      strerror(errno));
d283 2
a284 2
				      ttyname, pw->pw_uid, gid,
				      strerror(errno));
d293 1
a293 1
				      ttyname, mode, strerror(errno));
d296 1
a296 1
				      ttyname, mode, strerror(errno));
@


1.3.2.1
log
@Update to OpenSSH-3.1 on 3.0-stable branch
@
text
@d15 1
a15 1
RCSID("$OpenBSD: sshpty.c,v 1.4 2001/12/19 07:18:56 deraadt Exp $");
d134 1
a134 1
		    name, strerror(errno));
d227 1
a227 1
		    strerror(errno));
d237 1
a237 1
	int xpixel, int ypixel)
d276 1
a276 1
			if (errno == EROFS &&
d279 2
a280 2
				    ttyname, pw->pw_uid, gid,
				    strerror(errno));
d283 2
a284 2
				    ttyname, pw->pw_uid, gid,
				    strerror(errno));
d293 1
a293 1
				    ttyname, mode, strerror(errno));
d296 1
a296 1
				    ttyname, mode, strerror(errno));
@


1.3.2.2
log
@There was an update to OpenSSH 3.4, and people rejoiced.
@
text
@d15 1
a15 1
RCSID("$OpenBSD: sshpty.c,v 1.3.2.1 2002/03/07 17:37:48 jason Exp $");
d228 1
a228 1
	else
d230 1
a239 1

d277 3
a279 3
			    (st.st_uid == pw->pw_uid || st.st_uid == 0))
				error("chown(%.100s, %u, %u) failed: %.100s",
				    ttyname, (u_int)pw->pw_uid, (u_int)gid,
d282 2
a283 2
				fatal("chown(%.100s, %u, %u) failed: %.100s",
				    ttyname, (u_int)pw->pw_uid, (u_int)gid,
@


1.2
log
@pr #1946, allow sshd if /dev is readonly
@
text
@d15 1
a15 1
RCSID("$OpenBSD: sshpty.c,v 1.1 2001/03/04 01:46:30 djm Exp $");
d267 2
a268 1
	 * Warn but continue if filesystem is read-only and the uids match.
@


1.1
log
@Rename pty.[ch] -> sshpty.[ch] and login.[ch] to sshlogin.[ch] to avoid
header conflicts in portable; ok markus@@
@
text
@d15 1
a15 1
RCSID("$OpenBSD: pty.c,v 1.22 2001/02/08 19:30:52 itojun Exp $");
d275 2
a276 1
			if (errno == EROFS && st.st_uid == pw->pw_uid)
@


1.1.6.1
log
@Pull in OpenSSH-2.9.9
@
text
@d15 1
a15 1
RCSID("$OpenBSD: sshpty.c,v 1.3 2001/07/22 21:32:27 markus Exp $");
d267 1
a267 2
	 * Warn but continue if filesystem is read-only and the uids match/
	 * tty is owned by root.
d275 1
a275 2
			if (errno == EROFS && 
			   (st.st_uid == pw->pw_uid || st.st_uid == 0))
@


1.1.6.2
log
@Merge OpenSSH 3.1, keeping /etc as configuration files directory.
(i.e. OpenSSH 3.1 + openbsd29_3.1.patch)
@
text
@d15 1
a15 1
RCSID("$OpenBSD: sshpty.c,v 1.4 2001/12/19 07:18:56 deraadt Exp $");
d134 1
a134 1
		    name, strerror(errno));
d227 1
a227 1
		    strerror(errno));
d237 1
a237 1
	int xpixel, int ypixel)
d276 1
a276 1
			if (errno == EROFS &&
d279 2
a280 2
				    ttyname, pw->pw_uid, gid,
				    strerror(errno));
d283 2
a284 2
				    ttyname, pw->pw_uid, gid,
				    strerror(errno));
d293 1
a293 1
				    ttyname, mode, strerror(errno));
d296 1
a296 1
				    ttyname, mode, strerror(errno));
@


1.1.4.1
log
@Pull in OpenSSH-2.5.2 for 2.8 branch.
@
text
@d15 1
a15 1
RCSID("$OpenBSD: sshpty.c,v 1.1 2001/03/04 01:46:30 djm Exp $");
@


1.1.4.2
log
@Pull in OpenSSH-2.9 to 2.8 branch.
@
text
@@


1.1.4.3
log
@Pull in OpenSSH 2.9.9 to the 2.8 branch.
@
text
@d15 1
a15 1
RCSID("$OpenBSD: sshpty.c,v 1.3 2001/07/22 21:32:27 markus Exp $");
d267 1
a267 2
	 * Warn but continue if filesystem is read-only and the uids match/
	 * tty is owned by root.
d275 1
a275 2
			if (errno == EROFS && 
			   (st.st_uid == pw->pw_uid || st.st_uid == 0))
@


1.1.4.4
log
@Merge OpenSSH 3.1.
@
text
@d15 1
a15 1
RCSID("$OpenBSD: sshpty.c,v 1.4 2001/12/19 07:18:56 deraadt Exp $");
d134 1
a134 1
		    name, strerror(errno));
d227 1
a227 1
		    strerror(errno));
d237 1
a237 1
	int xpixel, int ypixel)
d276 1
a276 1
			if (errno == EROFS &&
d279 2
a280 2
				    ttyname, pw->pw_uid, gid,
				    strerror(errno));
d283 2
a284 2
				    ttyname, pw->pw_uid, gid,
				    strerror(errno));
d293 1
a293 1
				    ttyname, mode, strerror(errno));
d296 1
a296 1
				    ttyname, mode, strerror(errno));
@


1.1.2.1
log
@Pull in OpenSSH-2.5.2 for 2.7 branch.
@
text
@d15 1
a15 1
RCSID("$OpenBSD: sshpty.c,v 1.1 2001/03/04 01:46:30 djm Exp $");
@

