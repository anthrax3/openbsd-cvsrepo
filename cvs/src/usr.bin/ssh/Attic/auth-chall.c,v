head	1.15;
access;
symbols
	OPENBSD_6_0:1.14.0.12
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.8
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.14.0.6
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.4
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.13.0.6
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.2
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.12.0.28
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.26
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.24
	OPENBSD_5_0:1.12.0.22
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.20
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.18
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.14
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.16
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.12
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.10
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.8
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.6
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.2
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.4
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.9.0.10
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.8
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.6
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.4
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.2
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.8.0.10
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.8.0.8
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.6
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.4
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.2
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_8:1.4.0.2;
locks; strict;
comment	@ * @;


1.15
date	2016.08.13.17.47.40;	author markus;	state dead;
branches;
next	1.14;
commitid	dl4RDERdJITM8DKC;

1.14
date	2014.06.24.01.13.21;	author djm;	state Exp;
branches;
next	1.13;
commitid	1h9UxAQmwdaqUzyX;

1.13
date	2013.05.17.00.13.13;	author djm;	state Exp;
branches;
next	1.12;

1.12
date	2006.08.03.03.34.41;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2006.03.25.13.17.01;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2006.03.19.18.51.18;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2003.11.03.09.03.37;	author djm;	state Exp;
branches
	1.9.8.1
	1.9.10.1;
next	1.8;

1.8
date	2001.05.18.14.13.28;	author markus;	state Exp;
branches
	1.8.8.1
	1.8.10.1;
next	1.7;

1.7
date	2001.04.05.10.42.47;	author markus;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2001.03.20.18.57.04;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2001.03.02.18.54.30;	author deraadt;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2001.02.04.15.32.22;	author stevesk;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2001.01.21.19.05.41;	author markus;	state Exp;
branches;
next	1.2;

1.2
date	2001.01.19.12.45.26;	author markus;	state Exp;
branches;
next	1.1;

1.1
date	2001.01.18.17.12.43;	author markus;	state Exp;
branches;
next	;

1.4.2.1
date	2001.02.16.20.12.51;	author jason;	state Exp;
branches;
next	1.4.2.2;

1.4.2.2
date	2001.02.19.17.18.32;	author jason;	state Exp;
branches;
next	1.4.2.3;

1.4.2.3
date	2001.03.21.19.46.22;	author jason;	state Exp;
branches;
next	1.4.2.4;

1.4.2.4
date	2001.05.07.21.09.25;	author jason;	state Exp;
branches;
next	1.4.2.5;

1.4.2.5
date	2001.09.27.00.15.41;	author miod;	state Exp;
branches;
next	;

1.5.2.1
date	2001.03.12.15.44.07;	author jason;	state Exp;
branches;
next	1.5.2.2;

1.5.2.2
date	2001.03.21.18.52.31;	author jason;	state Exp;
branches;
next	;

1.7.2.1
date	2001.09.27.19.03.54;	author jason;	state Exp;
branches;
next	1.7.2.2;

1.7.2.2
date	2002.03.09.00.20.43;	author miod;	state Exp;
branches;
next	;

1.8.8.1
date	2004.03.04.18.18.14;	author brad;	state Exp;
branches;
next	;

1.8.10.1
date	2004.02.28.03.51.32;	author brad;	state Exp;
branches;
next	;

1.9.8.1
date	2006.10.06.03.19.32;	author brad;	state Exp;
branches;
next	;

1.9.10.1
date	2006.09.30.04.06.50;	author brad;	state Exp;
branches;
next	;


desc
@@


1.15
log
@remove ssh1 server code; ok djm@@
@
text
@/* $OpenBSD: auth-chall.c,v 1.14 2014/06/24 01:13:21 djm Exp $ */
/*
 * Copyright (c) 2001 Markus Friedl.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <stdarg.h>
#include <stdlib.h>
#include <stdio.h>

#include "xmalloc.h"
#include "key.h"
#include "hostfile.h"
#include "auth.h"
#include "log.h"

/* limited protocol v1 interface to kbd-interactive authentication */

extern KbdintDevice *devices[];
static KbdintDevice *device;

char *
get_challenge(Authctxt *authctxt)
{
	char *challenge, *name, *info, **prompts;
	u_int i, numprompts;
	u_int *echo_on;

	device = devices[0]; /* we always use the 1st device for protocol 1 */
	if (device == NULL)
		return NULL;
	if ((authctxt->kbdintctxt = device->init_ctx(authctxt)) == NULL)
		return NULL;
	if (device->query(authctxt->kbdintctxt, &name, &info,
	    &numprompts, &prompts, &echo_on)) {
		device->free_ctx(authctxt->kbdintctxt);
		authctxt->kbdintctxt = NULL;
		return NULL;
	}
	if (numprompts < 1)
		fatal("get_challenge: numprompts < 1");
	challenge = xstrdup(prompts[0]);
	for (i = 0; i < numprompts; i++)
		free(prompts[i]);
	free(prompts);
	free(name);
	free(echo_on);
	free(info);

	return (challenge);
}
int
verify_response(Authctxt *authctxt, const char *response)
{
	char *resp[1];
	int authenticated = 0;

	if (device == NULL)
		return 0;
	if (authctxt->kbdintctxt == NULL)
		return 0;
	resp[0] = (char *)response;
	if (device->respond(authctxt->kbdintctxt, 1, resp) == 0)
		authenticated = 1;
	device->free_ctx(authctxt->kbdintctxt);
	authctxt->kbdintctxt = NULL;
	return authenticated;
}
@


1.14
log
@New key API: refactor key-related functions to be more library-like,
existing API is offered as a set of wrappers.

with and ok markus@@

Thanks also to Ben Hawkes, David Tomaschik, Ivan Fratric, Matthew
Dempsky and Ron Bowes for a detailed review a few months ago.
@
text
@d1 1
a1 1
/* $OpenBSD: auth-chall.c,v 1.13 2013/05/17 00:13:13 djm Exp $ */
@


1.13
log
@bye, bye xfree(); ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: auth-chall.c,v 1.12 2006/08/03 03:34:41 deraadt Exp $ */
d27 3
@


1.12
log
@almost entirely get rid of the culture of ".h files that include .h files"
ok djm, sort of ok stevesk
makes the pain stop in one easy step
@
text
@d1 1
a1 1
/* $OpenBSD: auth-chall.c,v 1.11 2006/03/25 13:17:01 djm Exp $ */
d61 5
a65 5
		xfree(prompts[i]);
	xfree(prompts);
	xfree(name);
	xfree(echo_on);
	xfree(info);
@


1.11
log
@Put $OpenBSD$ tags back (as comments) to replace the RCSID()s that
Theo nuked - our scripts to sync -portable need them in the files
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d26 1
a26 1
#include "includes.h"
d28 3
a32 1
#include "xmalloc.h"
@


1.10
log
@RCSID() can die
@
text
@d1 1
@


1.9
log
@make this a little more idiot-proof; ok markus@@
@
text
@a25 1
RCSID("$OpenBSD: auth-chall.c,v 1.8 2001/05/18 14:13:28 markus Exp $");
@


1.9.8.1
log
@upgrade to OpenSSH 4.4
@
text
@a0 1
/* $OpenBSD: auth-chall.c,v 1.12 2006/08/03 03:34:41 deraadt Exp $ */
d25 2
a26 1
#include <sys/types.h>
a27 3
#include "xmalloc.h"
#include "key.h"
#include "hostfile.h"
d30 1
@


1.9.10.1
log
@upgrade to OpenSSH 4.4
@
text
@a0 1
/* $OpenBSD: auth-chall.c,v 1.12 2006/08/03 03:34:41 deraadt Exp $ */
d25 2
a26 1
#include <sys/types.h>
a27 3
#include "xmalloc.h"
#include "key.h"
#include "hostfile.h"
d30 1
@


1.8
log
@improved kbd-interactive support. work by per@@appgate.com and me
@
text
@d26 1
a26 1
RCSID("$OpenBSD: auth-chall.c,v 1.7 2001/04/05 10:42:47 markus Exp $");
d71 1
a71 1
	int res;
d78 2
a79 1
	res = device->respond(authctxt->kbdintctxt, 1, resp);
d82 1
a82 1
	return res ? 0 : 1;
@


1.8.8.1
log
@upgrade to OpenSSH 3.8upgrade to OpenSSH 3.8upgrade to OpenSSH 3.8
@
text
@d26 1
a26 1
RCSID("$OpenBSD: auth-chall.c,v 1.9 2003/11/03 09:03:37 djm Exp $");
d71 1
a71 1
	int authenticated = 0;
d78 1
a78 2
	if (device->respond(authctxt->kbdintctxt, 1, resp) == 0)
		authenticated = 1;
d81 1
a81 1
	return authenticated;
@


1.8.10.1
log
@upgrade to OpenSSH 3.8
@
text
@d26 1
a26 1
RCSID("$OpenBSD: auth-chall.c,v 1.9 2003/11/03 09:03:37 djm Exp $");
d71 1
a71 1
	int authenticated = 0;
d78 1
a78 2
	if (device->respond(authctxt->kbdintctxt, 1, resp) == 0)
		authenticated = 1;
d81 1
a81 1
	return authenticated;
@


1.7
log
@fix whitespace: unexpand + trailing spaces.
@
text
@d26 1
a26 1
RCSID("$OpenBSD: auth-chall.c,v 1.6 2001/03/20 18:57:04 markus Exp $");
d30 6
a36 1
#ifdef BSD_AUTH
d38 1
a38 1
get_challenge(Authctxt *authctxt, char *devs)
d40 3
a42 1
	char *challenge;
d44 10
a53 9
	if (authctxt->as != NULL) {
		debug2("try reuse session");
		challenge = auth_getitem(authctxt->as, AUTHV_CHALLENGE);
		if (challenge != NULL) {
			debug2("reuse bsd auth session");
			return challenge;
		}
		auth_close(authctxt->as);
		authctxt->as = NULL;
d55 11
a65 10
	debug2("new bsd auth session");
	if (devs == NULL || strlen(devs) == 0)
		devs = authctxt->style;
	debug3("bsd auth: devs %s", devs ? devs : "<default>");
	authctxt->as = auth_userchallenge(authctxt->user, devs, "auth-ssh",
	    &challenge);
	if (authctxt->as == NULL)
		return NULL;
	debug2("get_challenge: <%s>", challenge ? challenge : "EMPTY");
	return challenge;
d68 1
a68 1
verify_response(Authctxt *authctxt, char *response)
d70 2
a71 12
	int authok;

	if (authctxt->as == 0)
		error("verify_response: no bsd auth session");
	authok = auth_userresponse(authctxt->as, response, 0);
	authctxt->as = NULL;
	debug("verify_response: <%s> = <%d>", response, authok);
	return authok != 0;
}
#else
#ifdef SKEY
#include <skey.h>
d73 9
a81 28
char *
get_challenge(Authctxt *authctxt, char *devs)
{
	static char challenge[1024];
	struct skey skey;
	if (skeychallenge(&skey, authctxt->user, challenge) == -1)
		return NULL;
	strlcat(challenge, "\nS/Key Password: ", sizeof challenge);
	return challenge;
}
int
verify_response(Authctxt *authctxt, char *response)
{
	return (authctxt->valid &&
	    skey_haskey(authctxt->pw->pw_name) == 0 &&
	    skey_passcheck(authctxt->pw->pw_name, response) != -1);
}
#else
/* not available */
char *
get_challenge(Authctxt *authctxt, char *devs)
{
	return NULL;
}
int
verify_response(Authctxt *authctxt, char *response)
{
	return 0;
a82 2
#endif
#endif
@


1.7.2.1
log
@Pull in OpenSSH-2.9.9
@
text
@d26 1
a26 1
RCSID("$OpenBSD: auth-chall.c,v 1.8 2001/05/18 14:13:28 markus Exp $");
a29 1
#include "xmalloc.h"
d31 5
a35 1
/* limited protocol v1 interface to kbd-interactive authentication */
d37 36
a72 2
extern KbdintDevice *devices[];
static KbdintDevice *device;
d75 1
a75 1
get_challenge(Authctxt *authctxt)
d77 3
a79 6
	char *challenge, *name, *info, **prompts;
	u_int i, numprompts;
	u_int *echo_on;

	device = devices[0]; /* we always use the 1st device for protocol 1 */
	if (device == NULL)
d81 16
a96 19
	if ((authctxt->kbdintctxt = device->init_ctx(authctxt)) == NULL)
		return NULL;
	if (device->query(authctxt->kbdintctxt, &name, &info,
	    &numprompts, &prompts, &echo_on)) {
		device->free_ctx(authctxt->kbdintctxt);
		authctxt->kbdintctxt = NULL;
		return NULL;
	}
	if (numprompts < 1)
		fatal("get_challenge: numprompts < 1");
	challenge = xstrdup(prompts[0]);
	for (i = 0; i < numprompts; i++)
		xfree(prompts[i]);
	xfree(prompts);
	xfree(name);
	xfree(echo_on);
	xfree(info);

	return (challenge);
d99 1
a99 1
verify_response(Authctxt *authctxt, const char *response)
d101 1
a101 12
	char *resp[1];
	int res;

	if (device == NULL)
		return 0;
	if (authctxt->kbdintctxt == NULL)
		return 0;
	resp[0] = (char *)response;
	res = device->respond(authctxt->kbdintctxt, 1, resp);
	device->free_ctx(authctxt->kbdintctxt);
	authctxt->kbdintctxt = NULL;
	return res ? 0 : 1;
d103 2
@


1.7.2.2
log
@Merge OpenSSH 3.1, keeping /etc as configuration files directory.
(i.e. OpenSSH 3.1 + openbsd29_3.1.patch)
@
text
@@


1.6
log
@add changes need for BSD_AUTH plus disabled BSD_AUTH code
@
text
@d26 1
a26 1
RCSID("$OpenBSD: auth-chall.c,v 1.5 2001/03/02 18:54:30 deraadt Exp $");
d53 2
a54 2
        if (authctxt->as == NULL)
                return NULL;
@


1.5
log
@make copyright lines the same format
@
text
@d26 1
a26 1
RCSID("$OpenBSD: auth-chall.c,v 1.4 2001/02/04 15:32:22 stevesk Exp $");
d29 1
d31 40
d103 1
@


1.5.2.1
log
@OpenSSH-2.5.1 for 2.7 patch branch
@
text
@d2 1
a2 1
 * Copyright (c) 2001 Markus Friedl. All rights reserved.
@


1.5.2.2
log
@Pull in OpenSSH-2.5.2 for 2.7 branch.
@
text
@d2 1
a2 1
 * Copyright (c) 2001 Markus Friedl.  All rights reserved.
d26 1
a26 1
RCSID("$OpenBSD: auth-chall.c,v 1.5 2001/03/02 18:54:30 deraadt Exp $");
@


1.4
log
@unexpand and remove end-of-line whitespace; ok markus@@
@
text
@d2 1
a2 1
 * Copyright (c) 2001 Markus Friedl. All rights reserved.
d26 1
a26 1
RCSID("$OpenBSD: auth-chall.c,v 1.3 2001/01/21 19:05:41 markus Exp $");
@


1.4.2.1
log
@Pull in OpenSSH 2.5.0
@
text
@d26 1
a26 1
RCSID("$OpenBSD: auth-chall.c,v 1.4 2001/02/04 15:32:22 stevesk Exp $");
@


1.4.2.2
log
@Pull in OpenSSH-2.5.1
@
text
@@


1.4.2.3
log
@Pull in OpenSSH-2.5.2 for 2.8 branch.
@
text
@d2 1
a2 1
 * Copyright (c) 2001 Markus Friedl.  All rights reserved.
d26 1
a26 1
RCSID("$OpenBSD: auth-chall.c,v 1.5 2001/03/02 18:54:30 deraadt Exp $");
@


1.4.2.4
log
@Pull in OpenSSH-2.9 to 2.8 branch.
@
text
@d26 1
a26 1
RCSID("$OpenBSD: auth-chall.c,v 1.7 2001/04/05 10:42:47 markus Exp $");
a28 1
#include "log.h"
a29 40
#ifdef BSD_AUTH
char *
get_challenge(Authctxt *authctxt, char *devs)
{
	char *challenge;

	if (authctxt->as != NULL) {
		debug2("try reuse session");
		challenge = auth_getitem(authctxt->as, AUTHV_CHALLENGE);
		if (challenge != NULL) {
			debug2("reuse bsd auth session");
			return challenge;
		}
		auth_close(authctxt->as);
		authctxt->as = NULL;
	}
	debug2("new bsd auth session");
	if (devs == NULL || strlen(devs) == 0)
		devs = authctxt->style;
	debug3("bsd auth: devs %s", devs ? devs : "<default>");
	authctxt->as = auth_userchallenge(authctxt->user, devs, "auth-ssh",
	    &challenge);
	if (authctxt->as == NULL)
		return NULL;
	debug2("get_challenge: <%s>", challenge ? challenge : "EMPTY");
	return challenge;
}
int
verify_response(Authctxt *authctxt, char *response)
{
	int authok;

	if (authctxt->as == 0)
		error("verify_response: no bsd auth session");
	authok = auth_userresponse(authctxt->as, response, 0);
	authctxt->as = NULL;
	debug("verify_response: <%s> = <%d>", response, authok);
	return authok != 0;
}
#else
a61 1
#endif
@


1.4.2.5
log
@Pull in OpenSSH 2.9.9 to the 2.8 branch.
@
text
@d26 1
a26 1
RCSID("$OpenBSD: auth-chall.c,v 1.8 2001/05/18 14:13:28 markus Exp $");
a29 1
#include "xmalloc.h"
d31 5
a35 1
/* limited protocol v1 interface to kbd-interactive authentication */
d37 36
a72 2
extern KbdintDevice *devices[];
static KbdintDevice *device;
d75 1
a75 1
get_challenge(Authctxt *authctxt)
d77 3
a79 6
	char *challenge, *name, *info, **prompts;
	u_int i, numprompts;
	u_int *echo_on;

	device = devices[0]; /* we always use the 1st device for protocol 1 */
	if (device == NULL)
d81 16
a96 19
	if ((authctxt->kbdintctxt = device->init_ctx(authctxt)) == NULL)
		return NULL;
	if (device->query(authctxt->kbdintctxt, &name, &info,
	    &numprompts, &prompts, &echo_on)) {
		device->free_ctx(authctxt->kbdintctxt);
		authctxt->kbdintctxt = NULL;
		return NULL;
	}
	if (numprompts < 1)
		fatal("get_challenge: numprompts < 1");
	challenge = xstrdup(prompts[0]);
	for (i = 0; i < numprompts; i++)
		xfree(prompts[i]);
	xfree(prompts);
	xfree(name);
	xfree(echo_on);
	xfree(info);

	return (challenge);
d99 1
a99 1
verify_response(Authctxt *authctxt, const char *response)
d101 1
a101 12
	char *resp[1];
	int res;

	if (device == NULL)
		return 0;
	if (authctxt->kbdintctxt == NULL)
		return 0;
	resp[0] = (char *)response;
	res = device->respond(authctxt->kbdintctxt, 1, resp);
	device->free_ctx(authctxt->kbdintctxt);
	authctxt->kbdintctxt = NULL;
	return res ? 0 : 1;
d103 2
@


1.3
log
@split ssh.h and try to cleanup the #include mess. remove unnecessary #includes.
rename util.[ch] -> misc.[ch]
@
text
@d26 1
a26 1
RCSID("$OpenBSD: auth-chall.c,v 1.2 2001/01/19 12:45:26 markus Exp $");
d37 1
a37 1
        struct skey skey;
@


1.2
log
@only auth-chall.c needs #ifdef SKEY
@
text
@d26 1
a26 1
RCSID("$OpenBSD: auth-chall.c,v 1.1 2001/01/18 17:12:43 markus Exp $");
a27 1
#include "ssh.h"
@


1.1
log
@rename *-skey.c *-chall.c since the files are not skey specific
@
text
@d26 1
a26 1
RCSID("$OpenBSD: auth-skey.c,v 1.10 2001/01/18 16:59:59 markus Exp $");
d32 2
@

