head	1.19;
access;
symbols
	OPENBSD_5_9:1.18.0.2
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.17.0.2
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.13.0.4
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.9.0.4
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.6.0.4
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.2
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.4
	OPENBSD_5_0:1.4.0.2
	OPENBSD_5_0_BASE:1.4;
locks; strict;
comment	@ * @;


1.19
date	2016.05.07.19.56.59;	author deraadt;	state dead;
branches;
next	1.18;
commitid	mX9pvIPr1V802qxw;

1.18
date	2015.10.02.01.39.26;	author deraadt;	state Exp;
branches;
next	1.17;
commitid	KGDraLUidYi7hL7j;

1.17
date	2015.07.27.16.29.23;	author guenther;	state Exp;
branches;
next	1.16;
commitid	TJqNjKn0tfSEifOu;

1.16
date	2015.06.29.22.35.12;	author djm;	state Exp;
branches;
next	1.15;
commitid	R0LPGIopGotGH5cA;

1.15
date	2015.05.18.15.06.05;	author deraadt;	state Exp;
branches;
next	1.14;
commitid	xE51SNgHkE0P5Ysk;

1.14
date	2015.01.20.23.14.00;	author deraadt;	state Exp;
branches;
next	1.13;
commitid	cBx23BaCk6gYBpRj;

1.13
date	2014.07.17.00.10.56;	author djm;	state Exp;
branches;
next	1.12;
commitid	E1283lYCmRdeL8wr;

1.12
date	2014.07.11.08.09.54;	author deraadt;	state Exp;
branches;
next	1.11;
commitid	Sdci4rkPgxaMLs6d;

1.11
date	2014.06.18.02.59.13;	author matthew;	state Exp;
branches;
next	1.10;
commitid	ACMN1XvKKlsH6vMH;

1.10
date	2014.06.13.08.26.29;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	sIs0Y9CO54rVd6io;

1.9
date	2014.01.31.16.39.19;	author tedu;	state Exp;
branches;
next	1.8;

1.8
date	2014.01.30.22.26.14;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2013.06.01.13.15.52;	author dtucker;	state Exp;
branches;
next	1.6;

1.6
date	2012.06.30.14.35.09;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2012.06.26.11.02.30;	author dtucker;	state Exp;
branches;
next	1.4;

1.4
date	2011.07.29.14.42.45;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2011.06.23.09.34.13;	author djm;	state Exp;
branches;
next	1.2;

1.2
date	2011.06.22.22.14.05;	author djm;	state Exp;
branches;
next	1.1;

1.1
date	2011.06.22.21.57.01;	author djm;	state Exp;
branches;
next	;


desc
@@


1.19
log
@systrace is dead.  long live systrace.
@
text
@/* $OpenBSD: sandbox-systrace.c,v 1.18 2015/10/02 01:39:26 deraadt Exp $ */
/*
 * Copyright (c) 2011 Damien Miller <djm@@mindrot.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/ioctl.h>
#include <sys/syscall.h>
#include <sys/socket.h>
#include <sys/wait.h>

#include <dev/systrace.h>

#include <errno.h>
#include <fcntl.h>
#include <limits.h>
#include <signal.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <limits.h>

#include "atomicio.h"
#include "log.h"
#include "ssh-sandbox.h"
#include "xmalloc.h"

struct sandbox_policy {
	int syscall;
	int action;
};

/* Permitted syscalls in preauth. Unlisted syscalls get SYSTR_POLICY_KILL */
static const struct sandbox_policy preauth_policy[] = {
	{ SYS_exit, SYSTR_POLICY_PERMIT },
#ifdef SYS_kbind
	{ SYS_kbind, SYSTR_POLICY_PERMIT },
#endif

	{ SYS_getpid, SYSTR_POLICY_PERMIT },
	{ SYS_getpgid, SYSTR_POLICY_PERMIT },
	{ SYS_clock_gettime, SYSTR_POLICY_PERMIT },
	{ SYS_gettimeofday, SYSTR_POLICY_PERMIT },
	{ SYS_sigprocmask, SYSTR_POLICY_PERMIT },

	{ SYS_getentropy, SYSTR_POLICY_PERMIT },

	{ SYS_sendsyslog, SYSTR_POLICY_PERMIT },

	{ SYS_madvise, SYSTR_POLICY_PERMIT },
	{ SYS_mmap, SYSTR_POLICY_PERMIT },
	{ SYS_mprotect, SYSTR_POLICY_PERMIT },
	{ SYS_mquery, SYSTR_POLICY_PERMIT },
	{ SYS_munmap, SYSTR_POLICY_PERMIT },

	{ SYS_poll, SYSTR_POLICY_PERMIT },
	{ SYS_select, SYSTR_POLICY_PERMIT },
	{ SYS_read, SYSTR_POLICY_PERMIT },
	{ SYS_write, SYSTR_POLICY_PERMIT },
	{ SYS_shutdown, SYSTR_POLICY_PERMIT },
	{ SYS_close, SYSTR_POLICY_PERMIT },

	{ SYS_open, SYSTR_POLICY_NEVER },

	{ -1, -1 }
};

struct ssh_sandbox {
	int systrace_fd;
	pid_t child_pid;
	void (*osigchld)(int);
};

struct ssh_sandbox *
ssh_sandbox_init(void)
{
	struct ssh_sandbox *box;

	debug3("%s: preparing systrace sandbox", __func__);
	box = xcalloc(1, sizeof(*box));
	box->systrace_fd = -1;
	box->child_pid = 0;
	box->osigchld = signal(SIGCHLD, SIG_IGN);

	return box;
}

void
ssh_sandbox_child(struct ssh_sandbox *box)
{
	debug3("%s: ready", __func__);
	signal(SIGCHLD, box->osigchld);
	if (kill(getpid(), SIGSTOP) != 0)
		fatal("%s: kill(%d, SIGSTOP)", __func__, getpid());
	debug3("%s: started", __func__);
}

static void
ssh_sandbox_parent(struct ssh_sandbox *box, pid_t child_pid,
    const struct sandbox_policy *allowed_syscalls)
{
	int dev_systrace, i, j, found, status;
	pid_t pid;
	struct systrace_policy policy;

	/* Wait for the child to send itself a SIGSTOP */
	debug3("%s: wait for child %ld", __func__, (long)child_pid);
	do {
		pid = waitpid(child_pid, &status, WUNTRACED);
	} while (pid == -1 && errno == EINTR);
	signal(SIGCHLD, box->osigchld);
	if (!WIFSTOPPED(status)) {
		if (WIFSIGNALED(status))
			fatal("%s: child terminated with signal %d",
			    __func__, WTERMSIG(status));
		if (WIFEXITED(status))
			fatal("%s: child exited with status %d",
			    __func__, WEXITSTATUS(status));
		fatal("%s: child not stopped", __func__);
	}
	debug3("%s: child %ld stopped", __func__, (long)child_pid);
	box->child_pid = child_pid;

	/* Set up systracing of child */
	if ((dev_systrace = open("/dev/systrace", O_RDONLY)) == -1)
		fatal("%s: open(\"/dev/systrace\"): %s", __func__,
		    strerror(errno));
	if (ioctl(dev_systrace, STRIOCCLONE, &box->systrace_fd) == -1)
		fatal("%s: ioctl(STRIOCCLONE, %d): %s", __func__,
		    dev_systrace, strerror(errno));
	close(dev_systrace);
	debug3("%s: systrace attach, fd=%d", __func__, box->systrace_fd);
	if (ioctl(box->systrace_fd, STRIOCATTACH, &child_pid) == -1)
		fatal("%s: ioctl(%d, STRIOCATTACH, %d): %s", __func__,
		    box->systrace_fd, child_pid, strerror(errno));

	/* Allocate and assign policy */
	memset(&policy, 0, sizeof(policy));
	policy.strp_op = SYSTR_POLICY_NEW;
	policy.strp_maxents = SYS_MAXSYSCALL;
	if (ioctl(box->systrace_fd, STRIOCPOLICY, &policy) == -1)
		fatal("%s: ioctl(%d, STRIOCPOLICY (new)): %s", __func__,
		    box->systrace_fd, strerror(errno));

	policy.strp_op = SYSTR_POLICY_ASSIGN;
	policy.strp_pid = box->child_pid;
	if (ioctl(box->systrace_fd, STRIOCPOLICY, &policy) == -1)
		fatal("%s: ioctl(%d, STRIOCPOLICY (assign)): %s",
		    __func__, box->systrace_fd, strerror(errno));

	/* Set per-syscall policy */
	for (i = 0; i < SYS_MAXSYSCALL; i++) {
		found = 0;
		for (j = 0; allowed_syscalls[j].syscall != -1; j++) {
			if (allowed_syscalls[j].syscall == i) {
				found = 1;
				break;
			}
		}
		policy.strp_op = SYSTR_POLICY_MODIFY;
		policy.strp_code = i;
		policy.strp_policy = found ?
		    allowed_syscalls[j].action : SYSTR_POLICY_KILL;
		if (found)
			debug3("%s: policy: enable syscall %d", __func__, i);
		if (ioctl(box->systrace_fd, STRIOCPOLICY, &policy) == -1)
			fatal("%s: ioctl(%d, STRIOCPOLICY (modify)): %s",
			    __func__, box->systrace_fd, strerror(errno));
	}

	/* Signal the child to start running */
	debug3("%s: start child %ld", __func__, (long)child_pid);
	if (kill(box->child_pid, SIGCONT) != 0)
		fatal("%s: kill(%d, SIGCONT)", __func__, box->child_pid);
}

void
ssh_sandbox_parent_finish(struct ssh_sandbox *box)
{
	/* Closing this before the child exits will terminate it */
	close(box->systrace_fd);

	free(box);
	debug3("%s: finished", __func__);
}

void
ssh_sandbox_parent_preauth(struct ssh_sandbox *box, pid_t child_pid)
{
	ssh_sandbox_parent(box, child_pid, preauth_policy);
}
@


1.18
log
@re-order system calls in order of risk, ok i'll be honest, ordered this
way they look like tame...
ok djm
@
text
@d1 1
a1 1
/* $OpenBSD: sandbox-systrace.c,v 1.17 2015/07/27 16:29:23 guenther Exp $ */
@


1.17
log
@Permit kbind(2) use in the sandbox now, to ease testing of ld.so work using it

reminded by miod@@, ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: sandbox-systrace.c,v 1.16 2015/06/29 22:35:12 djm Exp $ */
a48 2
	{ SYS_clock_gettime, SYSTR_POLICY_PERMIT },
	{ SYS_close, SYSTR_POLICY_PERMIT },
d50 4
a53 1
	{ SYS_getentropy, SYSTR_POLICY_PERMIT },
d56 1
d58 6
a63 3
#ifdef SYS_kbind
	{ SYS_kbind, SYSTR_POLICY_PERMIT },
#endif
d69 1
a69 1
	{ SYS_open, SYSTR_POLICY_NEVER },
d71 1
d73 1
a73 2
	{ SYS_select, SYSTR_POLICY_PERMIT },
	{ SYS_sendsyslog, SYSTR_POLICY_PERMIT },
d75 4
a78 2
	{ SYS_sigprocmask, SYSTR_POLICY_PERMIT },
	{ SYS_write, SYSTR_POLICY_PERMIT },
@


1.16
log
@add getpid to sandbox, reachable by grace_alarm_handler

reported by Jakub Jelen; bz#2419
@
text
@d1 1
a1 1
/* $OpenBSD: sandbox-systrace.c,v 1.15 2015/05/18 15:06:05 deraadt Exp $ */
d56 3
@


1.15
log
@getentropy() and sendsyslog() have been around long enough.
openssh-portable may want the #ifdef's but not base.
discussed with djm few weeks back
@
text
@d1 1
a1 1
/* $OpenBSD: sandbox-systrace.c,v 1.14 2015/01/20 23:14:00 deraadt Exp $ */
d54 1
@


1.14
log
@Reduce use of <sys/param.h> and transition to <limits.h> throughout.
ok djm markus
@
text
@d1 1
a1 1
/* $OpenBSD: sandbox-systrace.c,v 1.13 2014/07/17 00:10:56 djm Exp $ */
d49 1
a49 12
	{ SYS_open, SYSTR_POLICY_NEVER },

#ifdef SYS_getentropy
	/* OpenBSD 5.6 and newer use getentropy(2) to seed arc4random(3). */
	{ SYS_getentropy, SYSTR_POLICY_PERMIT },
#else
	/* Previous releases used sysctl(3)'s kern.arnd variable. */
	{ SYS___sysctl, SYSTR_POLICY_PERMIT },
#endif
#ifdef SYS_sendsyslog
	{ SYS_sendsyslog, SYSTR_POLICY_PERMIT },
#endif
d52 1
a54 1
	{ SYS_clock_gettime, SYSTR_POLICY_PERMIT },
d59 2
a61 1
	{ SYS_munmap, SYSTR_POLICY_PERMIT },
d64 1
@


1.13
log
@ifdef SYS_sendsyslog so this will compile without patching on -stable
@
text
@d1 1
a1 1
/* $OpenBSD: sandbox-systrace.c,v 1.12 2014/07/11 08:09:54 deraadt Exp $ */
a18 1
#include <sys/param.h>
d35 1
@


1.12
log
@Permit use of SYS_sendsyslog from inside the sandbox.  Clock is ticking,
update your kernels and sshd soon.. libc will start using sendsyslog()
in about 4 days.
@
text
@d1 1
a1 1
/* $OpenBSD: sandbox-systrace.c,v 1.11 2014/06/18 02:59:13 matthew Exp $ */
d58 1
a58 1

d60 1
@


1.11
log
@Now that we have a dedicated getentropy(2) system call for
arc4random(3), we can disallow __sysctl(2) in OpenSSH's systrace
sandbox.

ok djm
@
text
@d1 1
a1 1
/* $OpenBSD: sandbox-systrace.c,v 1.10 2014/06/13 08:26:29 deraadt Exp $ */
d59 1
@


1.10
log
@permit SYS_getentropy
from matthew
@
text
@d1 1
a1 1
/* $OpenBSD: sandbox-systrace.c,v 1.9 2014/01/31 16:39:19 tedu Exp $ */
d51 5
d57 2
a61 1
	{ SYS_getentropy, SYSTR_POLICY_PERMIT },
@


1.9
log
@replace most bzero with explicit_bzero, except a few that cna be memset
ok djm dtucker
@
text
@d1 1
a1 1
/* $OpenBSD: sandbox-systrace.c,v 1.8 2014/01/30 22:26:14 djm Exp $ */
d55 1
@


1.8
log
@allow shutdown(2) syscall in sandbox - it may be called by packet_close()
from portable
@
text
@d1 1
a1 1
/* $OpenBSD: sandbox-systrace.c,v 1.7 2013/06/01 13:15:52 dtucker Exp $ */
d141 1
a141 1
	bzero(&policy, sizeof(policy));
@


1.7
log
@Use clock_gettime(CLOCK_MONOTONIC ...) for ssh timers so that things like
keepalives and rekeying will work properly over clock steps.  Suggested by
markus@@, "looks good" djm@@.
@
text
@d1 1
a1 1
/* $OpenBSD: sandbox-systrace.c,v 1.6 2012/06/30 14:35:09 markus Exp $ */
d65 1
@


1.6
log
@fix a during the load of the sandbox policies (child can still make
the read-syscall and wait forever for systrace-answers) by replacing
the read/write synchronisation with SIGSTOP/SIGCONT;
report and help hshoexer@@; ok djm@@, dtucker@@
@
text
@d1 1
a1 1
/* $OpenBSD: sandbox-systrace.c,v 1.5 2012/06/26 11:02:30 dtucker Exp $ */
d56 1
@


1.5
log
@Add mquery to the list of allowed syscalls for "UsePrivilegeSeparation
sandbox" since malloc now uses it.  From johnw.mail at gmail com.
@
text
@d1 1
a1 1
/* $OpenBSD: sandbox-systrace.c,v 1.4 2011/07/29 14:42:45 djm Exp $ */
d23 1
d30 1
a69 2
	int child_sock;
	int parent_sock;
d72 1
a78 1
	int s[2];
a81 4
	if (socketpair(AF_UNIX, SOCK_STREAM, 0, s) == -1)
		fatal("%s: socketpair: %s", __func__, strerror(errno));
	box->child_sock = s[0];
	box->parent_sock = s[1];
d84 1
a91 4
	char whatever = 0;

	close(box->parent_sock);
	/* Signal parent that we are ready */
d93 3
a95 5
	if (atomicio(vwrite, box->child_sock, &whatever, 1) != 1)
		fatal("%s: write: %s", __func__, strerror(errno));
	/* Wait for parent to signal for us to go */
	if (atomicio(read, box->child_sock, &whatever, 1) != 1)
		fatal("%s: read: %s", __func__, strerror(errno));
a96 1
	close(box->child_sock);
d103 2
a104 2
	int dev_systrace, i, j, found;
	char whatever = 0;
d107 1
d109 14
a123 5
	close(box->child_sock);
	/* Wait for child to signal that it is ready */
	if (atomicio(read, box->parent_sock, &whatever, 1) != 1)
		fatal("%s: read: %s", __func__, strerror(errno));
	debug3("%s: child %ld ready", __func__, (long)child_pid);
d174 2
a175 3
	if (atomicio(vwrite, box->parent_sock, &whatever, 1) != 1)
		fatal("%s: write: %s", __func__, strerror(errno));
	close(box->parent_sock);
@


1.4
log
@fail open(2) with EPERM rather than SIGKILLing the whole process. libc
will call open() to do strerror() when NLS is enabled;
feedback and ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: sandbox-systrace.c,v 1.3 2011/06/23 09:34:13 djm Exp $ */
d57 1
@


1.3
log
@rename sandbox.h => ssh-sandbox.h to make things easier for portable
@
text
@d1 1
a1 1
/* $OpenBSD: sandbox-systrace.c,v 1.2 2011/06/22 22:14:05 djm Exp $ */
d40 24
a63 16
static const int preauth_policy[] = {
	SYS___sysctl,
	SYS_close,
	SYS_exit,
	SYS_getpid,
	SYS_gettimeofday,
	SYS_madvise,
	SYS_mmap,
	SYS_mprotect,
	SYS_poll,
	SYS_munmap,
	SYS_read,
	SYS_select,
	SYS_sigprocmask,
	SYS_write,
	-1
a70 1
	struct systrace_policy policy;
d110 1
a110 1
    const int *allowed_syscalls)
d114 1
d138 4
a141 4
	bzero(&box->policy, sizeof(box->policy));
	box->policy.strp_op = SYSTR_POLICY_NEW;
	box->policy.strp_maxents = SYS_MAXSYSCALL;
	if (ioctl(box->systrace_fd, STRIOCPOLICY, &box->policy) == -1)
d145 3
a147 3
	box->policy.strp_op = SYSTR_POLICY_ASSIGN;
	box->policy.strp_pid = box->child_pid;
	if (ioctl(box->systrace_fd, STRIOCPOLICY, &box->policy) == -1)
d153 3
a155 2
		for (j = found = 0; allowed_syscalls[j] != -1 && !found; j++) {
			if (allowed_syscalls[j] == i)
d157 2
d160 4
a163 4
		box->policy.strp_op = SYSTR_POLICY_MODIFY;
		box->policy.strp_code = i;
		box->policy.strp_policy = found ?
		    SYSTR_POLICY_PERMIT : SYSTR_POLICY_KILL;
d166 1
a166 2
		if (ioctl(box->systrace_fd, STRIOCPOLICY,
		    &box->policy) == -1)
@


1.2
log
@$OpenBSD$ makers
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d37 1
a37 1
#include "sandbox.h"
@


1.1
log
@introduce sandboxing of the pre-auth privsep child using systrace(4).

This introduces a new "UsePrivilegeSeparation=sandbox" option for
sshd_config that applies mandatory restrictions on the syscalls the
privsep child can perform. This prevents a compromised privsep child
from being used to attack other hosts (by opening sockets and proxying)
or probing local kernel attack surface.

The sandbox is implemented using systrace(4) in unsupervised "fast-path"
mode, where a list of permitted syscalls is supplied. Any syscall not
on the list results in SIGKILL being sent to the privsep child. Note
that this requires a kernel with the new SYSTR_POLICY_KILL option.

UsePrivilegeSeparation=sandbox will become the default in the future
so please start testing it now.

feedback dtucker@@; ok markus@@
@
text
@d1 1
@

