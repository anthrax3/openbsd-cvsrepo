head	1.14;
access;
symbols
	OPENBSD_5_8:1.13.0.4
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.2
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.12.0.6
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.4
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.10.0.2
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.9.0.6
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.4
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.2
	OPENBSD_5_0:1.8.0.8
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.6
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.4
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.5.0.4
	OPENBSD_4_6_BASE:1.5;
locks; strict;
comment	@ * @;


1.14
date	2016.01.14.16.17.40;	author markus;	state dead;
branches;
next	1.13;
commitid	W9ye0gltieEl87AJ;

1.13
date	2015.01.27.12.54.06;	author okan;	state Exp;
branches;
next	1.12;
commitid	hLG4Epd56gGTFJL3;

1.12
date	2014.01.09.23.20.00;	author djm;	state Exp;
branches;
next	1.11;

1.11
date	2013.11.03.10.37.19;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2013.07.12.00.19.59;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2011.12.07.05.44.38;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2010.01.12.00.59.29;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2009.12.06.23.53.45;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2009.10.24.11.22.37;	author andreas;	state Exp;
branches;
next	1.5;

1.5
date	2009.06.27.09.32.43;	author andreas;	state Exp;
branches;
next	1.4;

1.4
date	2009.06.21.09.04.03;	author dtucker;	state Exp;
branches;
next	1.3;

1.3
date	2009.06.13.11.55.39;	author andreas;	state Exp;
branches;
next	1.2;

1.2
date	2009.06.12.20.43.22;	author andreas;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.28.16.50.16;	author andreas;	state Exp;
branches;
next	;


desc
@@


1.14
log
@remove roaming support; ok djm@@
@
text
@/* $OpenBSD: roaming_common.c,v 1.13 2015/01/27 12:54:06 okan Exp $ */
/*
 * Copyright (c) 2004-2009 AppGate Network Security AB
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <sys/uio.h>

#include <errno.h>
#include <stdarg.h>
#include <string.h>
#include <unistd.h>

#include "atomicio.h"
#include "log.h"
#include "packet.h"
#include "xmalloc.h"
#include "cipher.h"
#include "buffer.h"
#include "roaming.h"
#include "digest.h"

static size_t out_buf_size = 0;
static char *out_buf = NULL;
static size_t out_start;
static size_t out_last;

static u_int64_t write_bytes = 0;
static u_int64_t read_bytes = 0;

int roaming_enabled = 0;
int resume_in_progress = 0;

int
get_snd_buf_size(void)
{
	int fd = packet_get_connection_out();
	int optval;
	socklen_t optvallen = sizeof(optval);

	if (getsockopt(fd, SOL_SOCKET, SO_SNDBUF, &optval, &optvallen) != 0)
		optval = DEFAULT_ROAMBUF;
	return optval;
}

int
get_recv_buf_size(void)
{
	int fd = packet_get_connection_in();
	int optval;
	socklen_t optvallen = sizeof(optval);

	if (getsockopt(fd, SOL_SOCKET, SO_RCVBUF, &optval, &optvallen) != 0)
		optval = DEFAULT_ROAMBUF;
	return optval;
}

void
set_out_buffer_size(size_t size)
{
	if (size == 0 || size > MAX_ROAMBUF)
		fatal("%s: bad buffer size %lu", __func__, (u_long)size);
	/*
	 * The buffer size can only be set once and the buffer will live
	 * as long as the session lives.
	 */
	if (out_buf == NULL) {
		out_buf_size = size;
		out_buf = xmalloc(size);
		out_start = 0;
		out_last = 0;
	}
}

u_int64_t
get_recv_bytes(void)
{
	return read_bytes;
}

void
add_recv_bytes(u_int64_t num)
{
	read_bytes += num;
}

u_int64_t
get_sent_bytes(void)
{
	return write_bytes;
}

void
roam_set_bytes(u_int64_t sent, u_int64_t recvd)
{
	read_bytes = recvd;
	write_bytes = sent;
}

static void
buf_append(const char *buf, size_t count)
{
	if (count > out_buf_size) {
		buf += count - out_buf_size;
		count = out_buf_size;
	}
	if (count < out_buf_size - out_last) {
		memcpy(out_buf + out_last, buf, count);
		if (out_start > out_last)
			out_start += count;
		out_last += count;
	} else {
		/* data will wrap */
		size_t chunk = out_buf_size - out_last;
		memcpy(out_buf + out_last, buf, chunk);
		memcpy(out_buf, buf + chunk, count - chunk);
		out_last = count - chunk;
		out_start = out_last + 1;
	}
}

ssize_t
roaming_write(int fd, const void *buf, size_t count, int *cont)
{
	ssize_t ret;

	ret = write(fd, buf, count);
	if (ret > 0 && !resume_in_progress) {
		write_bytes += ret;
		if (out_buf_size > 0)
			buf_append(buf, ret);
	}
	if (out_buf_size > 0 &&
	    (ret == 0 || (ret == -1 && errno == EPIPE))) {
		if (wait_for_roaming_reconnect() != 0) {
			ret = 0;
			*cont = 1;
		} else {
			ret = -1;
			errno = EAGAIN;
		}
	}
	return ret;
}

ssize_t
roaming_read(int fd, void *buf, size_t count, int *cont)
{
	ssize_t ret = read(fd, buf, count);
	if (ret > 0) {
		if (!resume_in_progress) {
			read_bytes += ret;
		}
	} else if (out_buf_size > 0 &&
	    (ret == 0 || (ret == -1 && (errno == ECONNRESET
	    || errno == ECONNABORTED || errno == ETIMEDOUT
	    || errno == EHOSTUNREACH)))) {
		debug("roaming_read failed for %d  ret=%ld  errno=%d",
		    fd, (long)ret, errno);
		ret = 0;
		if (wait_for_roaming_reconnect() == 0)
			*cont = 1;
	}
	return ret;
}

size_t
roaming_atomicio(ssize_t(*f)(int, void*, size_t), int fd, void *buf,
    size_t count)
{
	size_t ret = atomicio(f, fd, buf, count);

	if (f == vwrite && ret > 0 && !resume_in_progress) {
		write_bytes += ret;
	} else if (f == read && ret > 0 && !resume_in_progress) {
		read_bytes += ret;
	}
	return ret;
}

void
resend_bytes(int fd, u_int64_t *offset)
{
	size_t available, needed;

	if (out_start < out_last)
		available = out_last - out_start;
	else
		available = out_buf_size;
	needed = write_bytes - *offset;
	debug3("resend_bytes: resend %lu bytes from %llu",
	    (unsigned long)needed, (unsigned long long)*offset);
	if (needed > available)
		fatal("Needed to resend more data than in the cache");
	if (out_last < needed) {
		int chunkend = needed - out_last;
		atomicio(vwrite, fd, out_buf + out_buf_size - chunkend,
		    chunkend);
		atomicio(vwrite, fd, out_buf, out_last);
	} else {
		atomicio(vwrite, fd, out_buf + (out_last - needed), needed);
	}
}

/*
 * Caclulate a new key after a reconnect
 */
void
calculate_new_key(u_int64_t *key, u_int64_t cookie, u_int64_t challenge)
{
	u_char hash[SSH_DIGEST_MAX_LENGTH];
	Buffer b;

	buffer_init(&b);
	buffer_put_int64(&b, *key);
	buffer_put_int64(&b, cookie);
	buffer_put_int64(&b, challenge);

	if (ssh_digest_buffer(SSH_DIGEST_SHA1, &b, hash, sizeof(hash)) != 0)
		fatal("%s: digest_buffer failed", __func__);

	buffer_clear(&b);
	buffer_append(&b, hash, ssh_digest_bytes(SSH_DIGEST_SHA1));
	*key = buffer_get_int64(&b);
	buffer_free(&b);
}
@


1.13
log
@Since r1.2 removed the use of PRI* macros, inttypes.h is no longer
required.

ok djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: roaming_common.c,v 1.12 2014/01/09 23:20:00 djm Exp $ */
@


1.12
log
@Introduce digest API and use it to perform all hashing operations
rather than calling OpenSSL EVP_Digest* directly. Will make it easier
to build a reduced-feature OpenSSH without OpenSSL in future;
feedback, ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: roaming_common.c,v 1.11 2013/11/03 10:37:19 djm Exp $ */
a22 1
#include <inttypes.h>
@


1.11
log
@fix a couple of function definitions foo() -> foo(void)
(-Wold-style-definition)
@
text
@d1 1
a1 1
/* $OpenBSD: roaming_common.c,v 1.10 2013/07/12 00:19:59 djm Exp $ */
d35 1
d225 1
a225 3
	const EVP_MD *md = EVP_sha1();
	EVP_MD_CTX ctx;
	u_char hash[EVP_MAX_MD_SIZE];
d233 2
a234 3
	EVP_DigestInit(&ctx, md);
	EVP_DigestUpdate(&ctx, buffer_ptr(&b), buffer_len(&b));
	EVP_DigestFinal(&ctx, hash, NULL);
d237 1
a237 1
	buffer_append(&b, hash, EVP_MD_size(md));
@


1.10
log
@fix pointer-signedness warnings from clang/llvm-3.3; "seems nice" deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: roaming_common.c,v 1.9 2011/12/07 05:44:38 djm Exp $ */
d48 1
a48 1
get_snd_buf_size()
d60 1
a60 1
get_recv_buf_size()
@


1.9
log
@fix some harmless and/or unreachable int overflows;
reported Xi Wang, ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: roaming_common.c,v 1.8 2010/01/12 00:59:29 djm Exp $ */
d226 1
a226 1
	char hash[EVP_MAX_MD_SIZE];
@


1.8
log
@delete with extreme prejudice a debug() that fired with every keypress;
ok dtucker deraadt
@
text
@d1 1
a1 1
/* $OpenBSD: roaming_common.c,v 1.7 2009/12/06 23:53:45 djm Exp $ */
d74 2
@


1.7
log
@use socklen_t for getsockopt optlen parameter; reported by
Steve.McClellan AT radisys.com, ok dtucker@@
@
text
@d1 1
a1 1
/* $OpenBSD: roaming_common.c,v 1.6 2009/10/24 11:22:37 andreas Exp $ */
a143 2
	debug3("Wrote %ld bytes for a total of %llu", (long)ret,
	    (unsigned long long)write_bytes);
@


1.6
log
@Do the actual suspend/resume in the client. This won't be useful until
the server side supports roaming.
Most code from Martin Forssen, maf at appgate dot com. Some changes by
me and markus@@
ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: roaming_common.c,v 1.5 2009/06/27 09:32:43 andreas Exp $ */
d51 2
a52 1
	int optval, optvallen;
a53 1
	optvallen = sizeof(optval);
d63 2
a64 1
	int optval, optvallen;
a65 1
	optvallen = sizeof(optval);
@


1.5
log
@It may be necessary to retransmit some data when resuming, so add it
to a buffer when roaming is enabled.
Most of this code was written by Martin Forssen, maf at appgate dot com.
ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: roaming_common.c,v 1.4 2009/06/21 09:04:03 dtucker Exp $ */
d146 10
d167 9
d216 26
@


1.4
log
@Add  tags for the benefit of the sync scripts
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d25 1
d36 5
d44 1
d47 39
d111 22
d141 2
d173 24
@


1.3
log
@Use debug3() instead of debug(), requested by markus@@
ok dtucker@@
@
text
@d1 1
@


1.2
log
@Fix warnings found by chl@@ and djm@@ and change roaming_atomicio's
return type to match atomicio's
Diff from djm@@, ok markus@@
@
text
@d73 2
a74 1
	debug("Wrote %ld bytes for a total of %lld", (long)ret, write_bytes);
@


1.1
log
@Keep track of number of bytes read and written. Needed for upcoming
changes. Most code from Martin Forssen, maf at appgate dot com.
ok markus@@
@
text
@d58 1
a58 1
roam_set_bytes(u_int64_t sent, u_int64_t recv)
d60 1
a60 1
	read_bytes = recv;
d73 1
a73 1
	debug("Wrote %d bytes for a total of %lld", ret, write_bytes);
d89 3
a91 2
ssize_t
roaming_atomicio(ssize_t(*f)(), int fd, void *buf, size_t count)
d93 1
a93 1
	ssize_t ret = atomicio(f, fd, buf, count);
d95 1
a95 1
	if ((f == write || f == vwrite) && ret > 0 && !resume_in_progress) {
@

