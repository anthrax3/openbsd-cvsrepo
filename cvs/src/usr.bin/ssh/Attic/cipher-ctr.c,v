head	1.12;
access;
symbols
	OPENBSD_5_2:1.11.0.8
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.6
	OPENBSD_5_0:1.11.0.4
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.2
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.10.0.18
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.14
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.16
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.12
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.10
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.8
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.6
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.2
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.4
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.6.0.4
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.2
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.5.0.2
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.4.0.4
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.2
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_2:1.2.0.6
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_4:1.2.0.2
	OPENBSD_3_4_BASE:1.2;
locks; strict;
comment	@ * @;


1.12
date	2012.12.12.16.46.10;	author naddy;	state dead;
branches;
next	1.11;

1.11
date	2010.10.01.23.05.32;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2006.08.03.03.34.42;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2006.07.22.20.48.22;	author stevesk;	state Exp;
branches;
next	1.8;

1.8
date	2006.03.25.13.17.01;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2006.03.19.18.51.18;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2005.07.17.07.17.55;	author djm;	state Exp;
branches
	1.6.2.1
	1.6.4.1;
next	1.5;

1.5
date	2004.12.22.02.13.19;	author djm;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2004.02.06.23.41.13;	author dtucker;	state Exp;
branches
	1.4.2.1
	1.4.4.1;
next	1.3;

1.3
date	2003.11.21.11.57.03;	author djm;	state Exp;
branches;
next	1.2;

1.2
date	2003.06.17.18.14.23;	author markus;	state Exp;
branches
	1.2.2.1
	1.2.4.1
	1.2.6.1;
next	1.1;

1.1
date	2003.05.17.04.27.52;	author markus;	state Exp;
branches;
next	;

1.2.2.1
date	2004.02.28.03.51.33;	author brad;	state Exp;
branches;
next	;

1.2.4.1
date	2003.09.16.20.50.42;	author brad;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2004.03.04.18.18.15;	author brad;	state Exp;
branches;
next	;

1.2.6.1
date	2003.09.16.21.20.25;	author brad;	state Exp;
branches;
next	;

1.4.2.1
date	2005.03.10.17.15.04;	author brad;	state Exp;
branches;
next	;

1.4.4.1
date	2005.03.10.16.28.27;	author brad;	state Exp;
branches;
next	1.4.4.2;

1.4.4.2
date	2005.09.02.03.45.00;	author brad;	state Exp;
branches;
next	;

1.5.2.1
date	2005.09.04.18.40.01;	author brad;	state Exp;
branches;
next	;

1.6.2.1
date	2006.10.06.03.19.32;	author brad;	state Exp;
branches;
next	;

1.6.4.1
date	2006.09.30.04.06.50;	author brad;	state Exp;
branches;
next	;


desc
@@


1.12
log
@use OpenSSL's EVP_aes_{128,192,256}_ctr() API and remove our hand-rolled
counter mode code; ok djm@@
@
text
@/* $OpenBSD: cipher-ctr.c,v 1.11 2010/10/01 23:05:32 djm Exp $ */
/*
 * Copyright (c) 2003 Markus Friedl <markus@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <string.h>

#include <openssl/evp.h>
#include <openssl/aes.h>

#include "xmalloc.h"
#include "log.h"

const EVP_CIPHER *evp_aes_128_ctr(void);
void ssh_aes_ctr_iv(EVP_CIPHER_CTX *, int, u_char *, size_t);

struct ssh_aes_ctr_ctx
{
	AES_KEY		aes_ctx;
	u_char		aes_counter[AES_BLOCK_SIZE];
};

/*
 * increment counter 'ctr',
 * the counter is of size 'len' bytes and stored in network-byte-order.
 * (LSB at ctr[len-1], MSB at ctr[0])
 */
static void
ssh_ctr_inc(u_char *ctr, size_t len)
{
	int i;

	for (i = len - 1; i >= 0; i--)
		if (++ctr[i])	/* continue on overflow */
			return;
}

static int
ssh_aes_ctr(EVP_CIPHER_CTX *ctx, u_char *dest, const u_char *src,
    size_t len)
{
	struct ssh_aes_ctr_ctx *c;
	size_t n = 0;
	u_char buf[AES_BLOCK_SIZE];

	if (len == 0)
		return (1);
	if ((c = EVP_CIPHER_CTX_get_app_data(ctx)) == NULL)
		return (0);

	while ((len--) > 0) {
		if (n == 0) {
			AES_encrypt(c->aes_counter, buf, &c->aes_ctx);
			ssh_ctr_inc(c->aes_counter, AES_BLOCK_SIZE);
		}
		*(dest++) = *(src++) ^ buf[n];
		n = (n + 1) % AES_BLOCK_SIZE;
	}
	return (1);
}

static int
ssh_aes_ctr_init(EVP_CIPHER_CTX *ctx, const u_char *key, const u_char *iv,
    int enc)
{
	struct ssh_aes_ctr_ctx *c;

	if ((c = EVP_CIPHER_CTX_get_app_data(ctx)) == NULL) {
		c = xmalloc(sizeof(*c));
		EVP_CIPHER_CTX_set_app_data(ctx, c);
	}
	if (key != NULL)
		AES_set_encrypt_key(key, EVP_CIPHER_CTX_key_length(ctx) * 8,
		    &c->aes_ctx);
	if (iv != NULL)
		memcpy(c->aes_counter, iv, AES_BLOCK_SIZE);
	return (1);
}

static int
ssh_aes_ctr_cleanup(EVP_CIPHER_CTX *ctx)
{
	struct ssh_aes_ctr_ctx *c;

	if ((c = EVP_CIPHER_CTX_get_app_data(ctx)) != NULL) {
		memset(c, 0, sizeof(*c));
		xfree(c);
		EVP_CIPHER_CTX_set_app_data(ctx, NULL);
	}
	return (1);
}

void
ssh_aes_ctr_iv(EVP_CIPHER_CTX *evp, int doset, u_char * iv, size_t len)
{
	struct ssh_aes_ctr_ctx *c;

	if ((c = EVP_CIPHER_CTX_get_app_data(evp)) == NULL)
		fatal("ssh_aes_ctr_iv: no context");
	if (doset)
		memcpy(c->aes_counter, iv, len);
	else
		memcpy(iv, c->aes_counter, len);
}

const EVP_CIPHER *
evp_aes_128_ctr(void)
{
	static EVP_CIPHER aes_ctr;

	memset(&aes_ctr, 0, sizeof(EVP_CIPHER));
	aes_ctr.nid = NID_undef;
	aes_ctr.block_size = AES_BLOCK_SIZE;
	aes_ctr.iv_len = AES_BLOCK_SIZE;
	aes_ctr.key_len = 16;
	aes_ctr.init = ssh_aes_ctr_init;
	aes_ctr.cleanup = ssh_aes_ctr_cleanup;
	aes_ctr.do_cipher = ssh_aes_ctr;
	aes_ctr.flags = EVP_CIPH_CBC_MODE | EVP_CIPH_VARIABLE_LENGTH |
	    EVP_CIPH_ALWAYS_CALL_INIT | EVP_CIPH_CUSTOM_IV;
	return (&aes_ctr);
}
@


1.11
log
@adapt to API changes in openssl-1.0.0a
@
text
@d1 1
a1 1
/* $OpenBSD: cipher-ctr.c,v 1.10 2006/08/03 03:34:42 deraadt Exp $ */
@


1.10
log
@almost entirely get rid of the culture of ".h files that include .h files"
ok djm, sort of ok stevesk
makes the pain stop in one easy step
@
text
@d1 1
a1 1
/* $OpenBSD: cipher-ctr.c,v 1.9 2006/07/22 20:48:22 stevesk Exp $ */
d29 1
a29 1
void ssh_aes_ctr_iv(EVP_CIPHER_CTX *, int, u_char *, u_int);
d43 1
a43 1
ssh_ctr_inc(u_char *ctr, u_int len)
d54 1
a54 1
    u_int len)
d57 1
a57 1
	u_int n = 0;
d108 1
a108 1
ssh_aes_ctr_iv(EVP_CIPHER_CTX *evp, int doset, u_char * iv, u_int len)
@


1.9
log
@move #include <string.h> out of includes.h
@
text
@d1 1
a1 1
/* $OpenBSD: cipher-ctr.c,v 1.8 2006/03/25 13:17:01 djm Exp $ */
d17 2
a18 1
#include "includes.h"
d25 1
a26 1
#include "xmalloc.h"
@


1.8
log
@Put $OpenBSD$ tags back (as comments) to replace the RCSID()s that
Theo nuked - our scripts to sync -portable need them in the files
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d18 2
@


1.7
log
@RCSID() can die
@
text
@d1 1
@


1.6
log
@knf says that a 2nd level indent is four (not three or five) spaces
@
text
@a16 1
RCSID("$OpenBSD: cipher-ctr.c,v 1.5 2004/12/22 02:13:19 djm Exp $");
@


1.6.2.1
log
@upgrade to OpenSSH 4.4
@
text
@a0 1
/* $OpenBSD: cipher-ctr.c,v 1.10 2006/08/03 03:34:42 deraadt Exp $ */
d16 2
a17 4

#include <sys/types.h>

#include <string.h>
d22 1
a23 1
#include "log.h"
@


1.6.4.1
log
@upgrade to OpenSSH 4.4
@
text
@a0 1
/* $OpenBSD: cipher-ctr.c,v 1.10 2006/08/03 03:34:42 deraadt Exp $ */
d16 2
a17 4

#include <sys/types.h>

#include <string.h>
d22 1
a23 1
#include "log.h"
@


1.5
log
@remove fallback AES support for old OpenSSL, as OpenBSD has had it for many
years now; ok deraadt@@
@
text
@d17 1
a17 1
RCSID("$OpenBSD: cipher-ctr.c,v 1.4 2004/02/06 23:41:13 dtucker Exp $");
d85 1
a85 1
		     &c->aes_ctx);
@


1.5.2.1
log
@upgrade to OpenSSH 4.2
@
text
@d17 1
a17 1
RCSID("$OpenBSD: cipher-ctr.c,v 1.6 2005/07/17 07:17:55 djm Exp $");
d85 1
a85 1
		    &c->aes_ctx);
@


1.4
log
@Use EVP_CIPHER_CTX_key_length for key length.  ok markus@@
@
text
@d17 1
a17 1
RCSID("$OpenBSD: cipher-ctr.c,v 1.3 2003/11/21 11:57:03 djm Exp $");
d20 1
a23 10

#if OPENSSL_VERSION_NUMBER < 0x00907000L
#include "rijndael.h"
#define AES_KEY rijndael_ctx
#define AES_BLOCK_SIZE 16
#define AES_encrypt(a, b, c) rijndael_encrypt(c, a, b)
#define AES_set_encrypt_key(a, b, c) rijndael_set_key(c, (char *)a, b, 1)
#else
#include <openssl/aes.h>
#endif
@


1.4.2.1
log
@upgrade to OpenSSH 4.0
@
text
@d17 1
a17 1
RCSID("$OpenBSD: cipher-ctr.c,v 1.5 2004/12/22 02:13:19 djm Exp $");
a19 1
#include <openssl/aes.h>
d23 10
@


1.4.4.1
log
@upgrade to OpenSSH 4.0
@
text
@d17 1
a17 1
RCSID("$OpenBSD: cipher-ctr.c,v 1.5 2004/12/22 02:13:19 djm Exp $");
a19 1
#include <openssl/aes.h>
d23 10
@


1.4.4.2
log
@upgrade to OpenSSH 4.2
@
text
@d17 1
a17 1
RCSID("$OpenBSD: cipher-ctr.c,v 1.6 2005/07/17 07:17:55 djm Exp $");
d85 1
a85 1
		    &c->aes_ctx);
@


1.3
log
@unexpand and delete whitespace at EOL; ok markus@@
@
text
@d17 1
a17 1
RCSID("$OpenBSD: cipher-ctr.c,v 1.2 2003/06/17 18:14:23 markus Exp $");
d93 2
a94 1
		AES_set_encrypt_key(key, ctx->key_len * 8, &c->aes_ctx);
@


1.2
log
@use license from /usr/share/misc/license.template for new code
@
text
@d17 1
a17 1
RCSID("$OpenBSD: cipher-ctr.c,v 1.1 2003/05/17 04:27:52 markus Exp $");
d93 1
a93 1
                AES_set_encrypt_key(key, ctx->key_len * 8, &c->aes_ctx);
@


1.2.2.1
log
@upgrade to OpenSSH 3.8
@
text
@d17 1
a17 1
RCSID("$OpenBSD: cipher-ctr.c,v 1.4 2004/02/06 23:41:13 dtucker Exp $");
d93 1
a93 2
		AES_set_encrypt_key(key, EVP_CIPHER_CTX_key_length(ctx) * 8,
		     &c->aes_ctx);
@


1.2.6.1
log
@upgrade to OpenSSH 3.7
@
text
@d17 1
a17 1
RCSID("$OpenBSD: cipher-ctr.c,v 1.2 2003/06/17 18:14:23 markus Exp $");
@


1.2.4.1
log
@upgrade to OpenSSH 3.7
@
text
@d17 1
a17 1
RCSID("$OpenBSD: cipher-ctr.c,v 1.2 2003/06/17 18:14:23 markus Exp $");
@


1.2.4.2
log
@upgrade to OpenSSH 3.8upgrade to OpenSSH 3.8upgrade to OpenSSH 3.8
@
text
@d17 1
a17 1
RCSID("$OpenBSD: cipher-ctr.c,v 1.4 2004/02/06 23:41:13 dtucker Exp $");
d93 1
a93 2
		AES_set_encrypt_key(key, EVP_CIPHER_CTX_key_length(ctx) * 8,
		     &c->aes_ctx);
@


1.1
log
@experimental support for aes-ctr modes from
http://www.ietf.org/internet-drafts/draft-ietf-secsh-newmodes-00.txt
ok djm@@
@
text
@d2 1
a2 1
 * Copyright (c) 2003 Markus Friedl.  All rights reserved.
d4 3
a6 8
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
d8 7
a14 10
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
d17 1
a17 1
RCSID("$OpenBSD: $");
@

