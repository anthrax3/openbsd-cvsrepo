head	1.5;
access;
symbols
	OPENBSD_3_9:1.3.0.6
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_7:1.3.0.4
	OPENBSD_3_8:1.3.0.2;
locks; strict;
comment	@# @;


1.5
date	2006.04.30.06.32.01;	author deraadt;	state dead;
branches;
next	1.4;

1.4
date	2006.03.28.00.12.31;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.08.18.34.10;	author reyk;	state Exp;
branches
	1.3.2.1
	1.3.4.1
	1.3.6.1;
next	1.2;

1.2
date	2005.12.07.09.38.26;	author reyk;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.06.22.48.36;	author reyk;	state Exp;
branches;
next	;

1.3.2.1
date	2006.02.03.17.36.13;	author brad;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2006.10.06.03.19.32;	author brad;	state dead;
branches;
next	;

1.3.4.1
date	2006.02.03.17.39.01;	author brad;	state Exp;
branches;
next	;

1.3.6.1
date	2006.09.30.04.06.50;	author brad;	state dead;
branches;
next	;


desc
@@


1.5
log
@these files should not exist.  the developers have been given ample time
and warnings to integrate this into the manual page proper, but users who
find documentation missing keep being pointed at these files in the src
tree. we now delete the files, so that they will document these things
in the correct place.  you know who you are, and btw, jmc will help you
integrate the information into the man page if you just wrote simple bits
of text and asked nicely..
@
text
@How to use OpenSSH-based virtual private networks
-------------------------------------------------

OpenSSH contains support for VPN tunneling using the tun(4) network
tunnel pseudo-device which is available on most platforms, either for
layer 2 or 3 traffic.

The following brief instructions on how to use this feature use
a network configuration specific to the OpenBSD operating system.

(1) Server: Enable support for SSH tunneling

To enable the ssh server to accept tunnel requests from the client, you
have to add the following option to the ssh server configuration file
(/etc/ssh/sshd_config):

	PermitTunnel yes

Restart the server or send the hangup signal (SIGHUP) to let the server
reread it's configuration.

(2) Server: Restrict client access and assign the tunnel

The OpenSSH server simply uses the file /root/.ssh/authorized_keys to
restrict the client to connect to a specified tunnel and to
automatically start the related interface configuration command. These
settings are optional but recommended:

	tunnel="1",command="sh /etc/netstart tun1" ssh-rsa ... reyk@@openbsd.org

(3) Client: Configure the local network tunnel interface

Use the hostname.if(5) interface-specific configuration file to set up
the network tunnel configuration with OpenBSD. For example, use the
following configuration in /etc/hostname.tun0 to set up the layer 3
tunnel on the client:

	inet 192.168.5.1 255.255.255.252 192.168.5.2

OpenBSD also supports layer 2 tunneling over the tun device by adding
the link0 flag:

	inet 192.168.1.78 255.255.255.0 192.168.1.255 link0

Layer 2 tunnels can be used in combination with an Ethernet bridge(4)
interface, like the following example for /etc/bridgename.bridge0:

	add tun0
	add sis0
	up

(4) Client: Configure the OpenSSH client

To establish tunnel forwarding for connections to a specified
remote host by default, use the following ssh client configuration for
the privileged user (in /root/.ssh/config):

	Host sshgateway
		Tunnel yes
		TunnelDevice 0:any
		PermitLocalCommand yes
	        LocalCommand sh /etc/netstart tun0

A more complicated configuration is possible to establish a tunnel to
a remote host which is not directly accessible by the client.
The following example describes a client configuration to connect to
the remote host over two ssh hops in between. It uses the OpenSSH
ProxyCommand in combination with the nc(1) program to forward the final
ssh tunnel destination over multiple ssh sessions.

	Host access.somewhere.net
	        User puffy
	Host dmzgw
	        User puffy
	        ProxyCommand ssh access.somewhere.net nc dmzgw 22
	Host sshgateway
	        Tunnel Ethernet
	        TunnelDevice 0:any
	        PermitLocalCommand yes
	        LocalCommand sh /etc/netstart tun0
	        ProxyCommand ssh dmzgw nc sshgateway 22

The following network plan illustrates the previous configuration in
combination with layer 2 tunneling and Ethernet bridging.

+--------+       (          )      +----------------------+
| Client |------(  Internet  )-----| access.somewhere.net |
+--------+       (          )      +----------------------+
    : 192.168.1.78                             |
    :.............................         +-------+
     Forwarded ssh connection    :         | dmzgw |
     Layer 2 tunnel              :         +-------+
                                 :             |
                                 :             |
                                 :      +------------+
                                 :......| sshgateway |
                                      | +------------+
--- real connection                 Bridge ->  |          +----------+
... "virtual connection"                     [ X ]--------| somehost |
[X] switch                                                +----------+
                                                          192.168.1.25

(5) Client: Connect to the server and establish the tunnel

Finally connect to the OpenSSH server to establish the tunnel by using
the following command:

	ssh sshgateway

It is also possible to tell the client to fork into the background after
the connection has been successfully established:

	ssh -f sshgateway true

Without the ssh configuration done in step (4), it is also possible
to use the following command lines:

	ssh -fw 0:1 sshgateway true
	ifconfig tun0 192.168.5.1 192.168.5.2 netmask 255.255.255.252

Using OpenSSH tunnel forwarding is a simple way to establish secure
and ad hoc virtual private networks. Possible fields of application
could be wireless networks or administrative VPN tunnels.

Nevertheless, ssh tunneling requires some packet header overhead and
runs on top of TCP. It is still suggested to use the IP Security
Protocol (IPSec) for robust and permanent VPN connections and to
interconnect corporate networks.

	Reyk Floeter

$OpenBSD: README.tun,v 1.4 2006/03/28 00:12:31 deraadt Exp $
@


1.4
log
@spacing
@
text
@d132 1
a132 1
$OpenBSD: README.tun,v 1.3 2005/12/08 18:34:10 reyk Exp $
@


1.3
log
@two changes to the new ssh tunnel support. this breaks compatibility
with the initial commit but is required for a portable approach.
- make the tunnel id u_int and platform friendly, use predefined types.
- support configuration of layer 2 (ethernet) or layer 3
(point-to-point, default) modes. configuration is done using the
Tunnel (yes|point-to-point|ethernet|no) option is ssh_config(5) and
restricted by the PermitTunnel (yes|point-to-point|ethernet|no) option
in sshd_config(5).

ok djm@@, man page bits by jmc@@
@
text
@d90 1
a90 1
    :.............................         +-------+       
d95 1
a95 1
                                 :      +------------+  
d107 1
a107 1
	
d132 1
a132 1
$OpenBSD: README.tun,v 1.2 2005/12/07 09:38:26 reyk Exp $
@


1.3.6.1
log
@upgrade to OpenSSH 4.4
@
text
@d132 1
a132 1
$OpenBSD: README.tun,v 1.3 2005/12/08 18:34:10 reyk Exp $
@


1.3.4.1
log
@I missed this new README.

Pointed out by niallo@@
@
text
@d132 1
a132 1
$OpenBSD: README.tun,v 1.3 2005/12/08 18:34:10 reyk Exp $
@


1.3.2.1
log
@I missed this new README.

Pointed out by niallo@@
@
text
@d132 1
a132 1
$OpenBSD: README.tun,v 1.3 2005/12/08 18:34:10 reyk Exp $
@


1.3.2.2
log
@upgrade to OpenSSH 4.4
@
text
@d132 1
a132 1
$OpenBSD: README.tun,v 1.3.2.1 2006/02/03 17:36:13 brad Exp $
@


1.2
log
@typo
@
text
@d77 1
a77 1
	        Tunnel yes
d132 1
a132 1
$OpenBSD: README.tun,v 1.1 2005/12/06 22:48:36 reyk Exp $
@


1.1
log
@Add brief instructions on how to use the new tun(4) forwarding over
OpenSSH with OpenBSD.

Please note that tunnel forwarding is still somewhat experimental and
specific to the OpenBSD version of OpenSSH. Nevertheless, porting and
interoperability is possible due to the availability of a tun(4)-like
device for most of the other operating systems.

ok jmc@@, requested by djm@@
@
text
@d1 2
a2 2
Host to use OpenSSH-based virtual private networks
--------------------------------------------------
d132 1
a132 1
$OpenBSD$
@

