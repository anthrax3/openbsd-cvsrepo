head	1.12;
access;
symbols
	OPENBSD_2_8:1.11.0.2
	OPENBSD_2_8_BASE:1.11
	OPENBSD_2_7:1.7.0.2
	OPENBSD_2_7_BASE:1.7;
locks; strict;
comment	@ * @;


1.12
date	2000.11.12.19.50.37;	author markus;	state dead;
branches;
next	1.11;

1.11
date	2000.09.07.20.27.51;	author deraadt;	state Exp;
branches
	1.11.2.1;
next	1.10;

1.10
date	2000.07.20.00.33.12;	author markus;	state Exp;
branches;
next	1.9;

1.9
date	2000.06.20.01.39.41;	author markus;	state Exp;
branches;
next	1.8;

1.8
date	2000.06.19.02.56.17;	author markus;	state Exp;
branches;
next	1.7;

1.7
date	2000.05.08.17.42.24;	author markus;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2000.05.04.22.37.59;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2000.04.26.20.56.29;	author markus;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.14.10.30.31;	author markus;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.12.09.39.10;	author markus;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.12.06.37.02;	author markus;	state Exp;
branches;
next	1.1;

1.1
date	2000.04.03.20.06.14;	author markus;	state Exp;
branches;
next	;

1.7.2.1
date	2000.09.01.18.23.19;	author jason;	state Exp;
branches;
next	1.7.2.2;

1.7.2.2
date	2000.11.08.21.30.46;	author jason;	state Exp;
branches;
next	1.7.2.3;

1.7.2.3
date	2001.03.12.15.44.10;	author jason;	state dead;
branches;
next	;

1.11.2.1
date	2001.02.16.20.13.01;	author jason;	state dead;
branches;
next	;


desc
@@


1.12
log
@add support for RSA to SSH2.  please test.

there are now 3 types of keys: RSA1 is used by ssh-1 only,
RSA and DSA are used by SSH2.

you can use 'ssh-keygen -t rsa -f ssh2_rsa_file' to generate RSA
keys for SSH2 and use the RSA keys for hostkeys or for user keys.

SSH2 RSA or DSA keys are added to .ssh/authorised_keys2 as before.

IdentityFile2, HostDsaKey and DSAAuthentication are obsolete.
you can use multiple IdentityFile and HostKey for all types of keys.

the option DSAAuthentication is replaced by PubkeyAuthetication.
@
text
@/*
 * Copyright (c) 2000 Markus Friedl.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include "includes.h"
RCSID("$OpenBSD: dsa.c,v 1.11 2000/09/07 20:27:51 deraadt Exp $");

#include "ssh.h"
#include "xmalloc.h"
#include "buffer.h"
#include "bufaux.h"
#include "compat.h"

#include <openssl/bn.h>
#include <openssl/dh.h>
#include <openssl/rsa.h>
#include <openssl/dsa.h>
#include <openssl/evp.h>
#include <openssl/bio.h>
#include <openssl/pem.h>

#include <openssl/hmac.h>
#include "kex.h"
#include "key.h"
#include "uuencode.h"

#define INTBLOB_LEN	20
#define SIGBLOB_LEN	(2*INTBLOB_LEN)

Key *
dsa_key_from_blob(char *blob, int blen)
{
	Buffer b;
	char *ktype;
	int rlen;
	DSA *dsa;
	Key *key;

#ifdef DEBUG_DSS
	dump_base64(stderr, blob, blen);
#endif
	/* fetch & parse DSA/DSS pubkey */
	buffer_init(&b);
	buffer_append(&b, blob, blen);
	ktype = buffer_get_string(&b, NULL);
	if (strcmp(KEX_DSS, ktype) != 0) {
		error("dsa_key_from_blob: cannot handle type %s", ktype);
		buffer_free(&b);
		xfree(ktype);
		return NULL;
	}
	key = key_new(KEY_DSA);
	dsa = key->dsa;
	buffer_get_bignum2(&b, dsa->p);
	buffer_get_bignum2(&b, dsa->q);
	buffer_get_bignum2(&b, dsa->g);
	buffer_get_bignum2(&b, dsa->pub_key);
	rlen = buffer_len(&b);
	if(rlen != 0)
		error("dsa_key_from_blob: remaining bytes in key blob %d", rlen);
	buffer_free(&b);
	xfree(ktype);

#ifdef DEBUG_DSS
	DSA_print_fp(stderr, dsa, 8);
#endif
	return key;
}
int
dsa_make_key_blob(Key *key, unsigned char **blobp, unsigned int *lenp)
{
	Buffer b;
	int len;
	unsigned char *buf;

	if (key == NULL || key->type != KEY_DSA)
		return 0;
	buffer_init(&b);
	buffer_put_cstring(&b, KEX_DSS);
	buffer_put_bignum2(&b, key->dsa->p);
	buffer_put_bignum2(&b, key->dsa->q);
	buffer_put_bignum2(&b, key->dsa->g);
	buffer_put_bignum2(&b, key->dsa->pub_key);
	len = buffer_len(&b);
	buf = xmalloc(len);
	memcpy(buf, buffer_ptr(&b), len);
	memset(buffer_ptr(&b), 0, len);
	buffer_free(&b);
	if (lenp != NULL)
		*lenp = len;
	if (blobp != NULL)
		*blobp = buf;
	return len;
}
int
dsa_sign(
    Key *key,
    unsigned char **sigp, int *lenp,
    unsigned char *data, int datalen)
{
	unsigned char *digest;
	unsigned char *ret;
	DSA_SIG *sig;
	EVP_MD *evp_md = EVP_sha1();
	EVP_MD_CTX md;
	unsigned int rlen;
	unsigned int slen;
	unsigned int len;
	unsigned char sigblob[SIGBLOB_LEN];
	Buffer b;

	if (key == NULL || key->type != KEY_DSA || key->dsa == NULL) {
		error("dsa_sign: no DSA key");
		return -1;
	}
	digest = xmalloc(evp_md->md_size);
	EVP_DigestInit(&md, evp_md);
	EVP_DigestUpdate(&md, data, datalen);
	EVP_DigestFinal(&md, digest, NULL);

	sig = DSA_do_sign(digest, evp_md->md_size, key->dsa);
	if (sig == NULL) {
		fatal("dsa_sign: cannot sign");
	}

	rlen = BN_num_bytes(sig->r);
	slen = BN_num_bytes(sig->s);
	if (rlen > INTBLOB_LEN || slen > INTBLOB_LEN) {
		error("bad sig size %d %d", rlen, slen);
		DSA_SIG_free(sig);
		return -1;
	}
	debug("sig size %d %d", rlen, slen);

	memset(sigblob, 0, SIGBLOB_LEN);
	BN_bn2bin(sig->r, sigblob+ SIGBLOB_LEN - INTBLOB_LEN - rlen);
	BN_bn2bin(sig->s, sigblob+ SIGBLOB_LEN - slen);
	DSA_SIG_free(sig);

	if (datafellows & SSH_BUG_SIGBLOB) {
		debug("datafellows");
		ret = xmalloc(SIGBLOB_LEN);
		memcpy(ret, sigblob, SIGBLOB_LEN);
		if (lenp != NULL)
			*lenp = SIGBLOB_LEN;
		if (sigp != NULL)
			*sigp = ret;
	} else {
		/* ietf-drafts */
		buffer_init(&b);
		buffer_put_cstring(&b, KEX_DSS);
		buffer_put_string(&b, sigblob, SIGBLOB_LEN);
		len = buffer_len(&b);
		ret = xmalloc(len);
		memcpy(ret, buffer_ptr(&b), len);
		buffer_free(&b);
		if (lenp != NULL)
			*lenp = len;
		if (sigp != NULL)
			*sigp = ret;
	}
	return 0;
}
int
dsa_verify(
    Key *key,
    unsigned char *signature, int signaturelen,
    unsigned char *data, int datalen)
{
	Buffer b;
	unsigned char *digest;
	DSA_SIG *sig;
	EVP_MD *evp_md = EVP_sha1();
	EVP_MD_CTX md;
	unsigned char *sigblob;
	char *txt;
	unsigned int len;
	int rlen;
	int ret;

	if (key == NULL || key->type != KEY_DSA || key->dsa == NULL) {
		error("dsa_verify: no DSA key");
		return -1;
	}

	if (!(datafellows & SSH_BUG_SIGBLOB) &&
	    signaturelen == SIGBLOB_LEN) {
		datafellows |= ~SSH_BUG_SIGBLOB;
		log("autodetect SSH_BUG_SIGBLOB");
	} else if ((datafellows & SSH_BUG_SIGBLOB) &&
	    signaturelen != SIGBLOB_LEN) {
		log("autoremove SSH_BUG_SIGBLOB");
		datafellows &= ~SSH_BUG_SIGBLOB;
	}

	debug("len %d datafellows %d", signaturelen, datafellows);

	/* fetch signature */
	if (datafellows & SSH_BUG_SIGBLOB) {
		sigblob = signature;
		len = signaturelen;
	} else {
		/* ietf-drafts */
		char *ktype;
		buffer_init(&b);
		buffer_append(&b, (char *) signature, signaturelen);
		ktype = buffer_get_string(&b, NULL);
		if (strcmp(KEX_DSS, ktype) != 0) {
			error("dsa_verify: cannot handle type %s", ktype);
			buffer_free(&b);
			return -1;
		}
		sigblob = (unsigned char *)buffer_get_string(&b, &len);
		rlen = buffer_len(&b);
		if(rlen != 0) {
			error("remaining bytes in signature %d", rlen);
			buffer_free(&b);
			return -1;
		}
		buffer_free(&b);
		xfree(ktype);
	}

	if (len != SIGBLOB_LEN) {
		fatal("bad sigbloblen %d != SIGBLOB_LEN", len);
	}

	/* parse signature */
	sig = DSA_SIG_new();
	sig->r = BN_new();
	sig->s = BN_new();
	BN_bin2bn(sigblob, INTBLOB_LEN, sig->r);
	BN_bin2bn(sigblob+ INTBLOB_LEN, INTBLOB_LEN, sig->s);

	if (!(datafellows & SSH_BUG_SIGBLOB)) {
		memset(sigblob, 0, len);
		xfree(sigblob);
	}
	
	/* sha1 the data */
	digest = xmalloc(evp_md->md_size);
	EVP_DigestInit(&md, evp_md);
	EVP_DigestUpdate(&md, data, datalen);
	EVP_DigestFinal(&md, digest, NULL);

	ret = DSA_do_verify(digest, evp_md->md_size, sig, key->dsa);

	memset(digest, 0, evp_md->md_size);
	xfree(digest);
	DSA_SIG_free(sig);

	switch (ret) {
	case 1:
		txt = "correct";
		break;
	case 0:
		txt = "incorrect";
		break;
	case -1:
	default:
		txt = "error";
		break;
	}
	debug("dsa_verify: signature %s", txt);
	return ret;
}

Key *
dsa_generate_key(unsigned int bits)
{
	DSA *dsa = DSA_generate_parameters(bits, NULL, 0, NULL, NULL, NULL, NULL);
	Key *k;
	if (dsa == NULL) {
		fatal("DSA_generate_parameters failed");
	}
	if (!DSA_generate_key(dsa)) {
		fatal("DSA_generate_keys failed");
	}

	k = key_new(KEY_EMPTY);
	k->type = KEY_DSA;
	k->dsa = dsa;
	return k;
}
@


1.11
log
@cleanup copyright notices on all files.  I have attempted to be accurate with
the details.  everything is now under Tatu's licence (which I copied from his
readme), and/or the core-sdi bsd-ish thing for deattack, or various openbsd
developers under a 2-term bsd licence.  We're not changing any rules, just
being accurate.
@
text
@d26 1
a26 1
RCSID("$OpenBSD: dsa.c,v 1.10 2000/07/20 00:33:12 markus Exp $");
@


1.11.2.1
log
@Pull in OpenSSH 2.5.0
@
text
@d26 1
a26 1
RCSID("$OpenBSD: dsa.c,v 1.11 2000/09/07 20:27:51 deraadt Exp $");
@


1.10
log
@missing free, reorder
@
text
@a11 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Markus Friedl.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
d26 1
a26 1
RCSID("$OpenBSD: dsa.c,v 1.9 2000/06/20 01:39:41 markus Exp $");
@


1.9
log
@OpenBSD tag
@
text
@d31 1
a31 1
RCSID("$OpenBSD: dsa.c,v 1.8 2000/06/19 02:56:17 markus Exp $");
d56 1
a56 2
dsa_key_from_blob(
    char *blob, int blen)
a67 2
	key = key_new(KEY_DSA);
	dsa = key->dsa;
d73 2
a74 1
		key_free(key);
d77 2
d87 1
a88 1
	debug("keytype %s", ktype);
@


1.8
log
@mem leak + be more paranoid in dsa_verify.
@
text
@d31 1
a31 1
RCSID("$Id: dsa.c,v 1.7 2000/05/08 17:42:24 markus Exp $");
@


1.7
log
@bug compat w/ ssh-2.0.13 x11, split out bugs
@
text
@d31 1
a31 1
RCSID("$Id: dsa.c,v 1.6 2000/05/04 22:37:59 markus Exp $");
d75 1
a75 1
		error("dsa_key_from_blob: cannot handle type  %s", ktype);
a199 1
	char *ktype;
d229 1
d233 5
d240 1
a240 1
		if(rlen != 0)
d242 3
d246 1
@


1.7.2.1
log
@Pull in the rest of openssh-2.2.0 to 2.7 branch (luvin' cvs...)
@
text
@d31 1
a31 1
RCSID("$OpenBSD: dsa.c,v 1.10 2000/07/20 00:33:12 markus Exp $");
d56 2
a57 1
dsa_key_from_blob(char *blob, int blen)
d69 2
d75 2
a76 3
		error("dsa_key_from_blob: cannot handle type %s", ktype);
		buffer_free(&b);
		xfree(ktype);
a78 2
	key = key_new(KEY_DSA);
	dsa = key->dsa;
a86 1
	xfree(ktype);
d88 1
d200 1
a229 1
		char *ktype;
a232 5
		if (strcmp(KEX_DSS, ktype) != 0) {
			error("dsa_verify: cannot handle type %s", ktype);
			buffer_free(&b);
			return -1;
		}
d235 1
a235 1
		if(rlen != 0) {
a236 3
			buffer_free(&b);
			return -1;
		}
a237 1
		xfree(ktype);
@


1.7.2.2
log
@openssh-2.3.0 (again) for 2.7 branch
@
text
@d12 5
d31 1
a31 1
RCSID("$OpenBSD: dsa.c,v 1.11 2000/09/07 20:27:51 deraadt Exp $");
@


1.7.2.3
log
@OpenSSH-2.5.1 for 2.7 patch branch
@
text
@d26 1
a26 1
RCSID("$OpenBSD: dsa.c,v 1.7.2.2 2000/11/08 21:30:46 jason Exp $");
@


1.6
log
@replace broken uuencode w/ libc b64_ntop
@
text
@d31 1
a31 1
RCSID("$Id: dsa.c,v 1.5 2000/04/26 20:56:29 markus Exp $");
d165 1
a165 1
	if (datafellows) {
d212 8
a219 3
	if (datafellows && signaturelen != SIGBLOB_LEN) {
		log("heh? datafellows ssh2 complies with ietf-drafts????");
		datafellows = 0;
d225 1
a225 1
	if (datafellows) {
d250 2
a251 1
	if (!datafellows) {
@


1.5
log
@add DSA pubkey auth and other SSH2 fixes.  use ssh-keygen -[xX]
for trading keys with the real and the original SSH, directly from the
people who invented the SSH protocol.
@
text
@d31 1
a31 1
RCSID("$Id: dsa.c,v 1.4 2000/04/14 10:30:31 markus Exp $");
d66 1
a66 1
	dump_base64(blob, blen);
@


1.4
log
@whitespace cleanup
@
text
@d31 1
a31 1
RCSID("$Id: dsa.c,v 1.3 2000/04/12 09:39:10 markus Exp $");
d50 1
d56 2
a57 2
dsa_serverkey_from_blob(
    char *serverhostkey, int serverhostkeylen)
d65 3
d72 1
a72 1
	buffer_append(&b, serverhostkey, serverhostkeylen);
d75 1
a75 1
		error("dsa_serverkey_from_blob: cannot handle type  %s", ktype);
d85 1
a85 1
		error("dsa_serverkey_from_blob: remaining bytes in serverhostkey %d", rlen);
a93 29
DSA *
dsa_load_private(char *filename)
{
	DSA *dsa;
	BIO *in;

	in = BIO_new(BIO_s_file());
	if (in == NULL)
		fatal("BIO_new failed");
	if (BIO_read_filename(in, filename) <= 0)
		fatal("BIO_read failed %s: %s", filename, strerror(errno));
	fprintf(stderr, "read DSA private key\n");
	dsa = PEM_read_bio_DSAPrivateKey(in,NULL,NULL,NULL);
	if (dsa == NULL)
		fatal("PEM_read_bio_DSAPrivateKey failed %s", filename);
	BIO_free(in);
	return dsa;
}
Key *
dsa_get_serverkey(char *filename)
{
	Key *k = key_new(KEY_EMPTY);
	k->type = KEY_DSA;
	k->dsa = dsa_load_private(filename);
#ifdef DEBUG_DSS
	DSA_print_fp(stderr, dsa, 8);
#endif
	return k;
}
d95 1
a95 1
dsa_make_serverkey_blob(Key *key, unsigned char **blobp, unsigned int *lenp)
d124 1
a124 1
    unsigned char *hash, int hlen)
d143 1
a143 1
	EVP_DigestUpdate(&md, hash, hlen);
d147 3
d193 1
a193 1
    unsigned char *hash, int hlen)
d250 1
a250 1
	/* sha1 the signed data (== session_id == hash) */
d253 1
a253 1
	EVP_DigestUpdate(&md, hash, hlen);
d276 18
@


1.3
log
@#include <ssl/foo.h> -> <openssh/foo.h>
@
text
@d31 1
a31 1
RCSID("$Id: dsa.c,v 1.2 2000/04/12 06:37:02 markus Exp $");
d99 1
a99 1
	if (BIO_read_filename(in, filename) <= 0) 
d173 3
a175 3
        rlen = BN_num_bytes(sig->r);
        slen = BN_num_bytes(sig->s);
        if (rlen > INTBLOB_LEN || slen > INTBLOB_LEN) {
@


1.2
log
@less debugging output
@
text
@d31 1
a31 1
RCSID("$Id: dsa.c,v 1.1 2000/04/03 20:06:14 markus Exp $");
d39 7
a45 7
#include <ssl/bn.h>
#include <ssl/dh.h>
#include <ssl/rsa.h>
#include <ssl/dsa.h>
#include <ssl/evp.h>
#include <ssl/bio.h>
#include <ssl/pem.h>
d47 1
a47 1
#include <ssl/hmac.h>
@


1.1
log
@DSA, keyexchange, algorithm agreement for ssh2
@
text
@d31 1
a31 1
RCSID("$Id: dsa.c,v 1.5 2000/04/03 18:36:59 markus Exp $");
d71 1
a71 1
		log("dsa_serverkey_from_blob: cannot handle type  %s", ktype);
d81 1
a81 1
		log("dsa_serverkey_from_blob: remaining bytes in serverhostkey %d", rlen);
d84 1
a84 1
	log("keytype %s", ktype);
d163 1
a163 1
		log("dsa_sign: no DSA key");
d176 1
a176 1
		log("bad sig size %d %d", rlen, slen);
d180 1
a180 1
	log("sig size %d %d", rlen, slen);
d188 1
a188 1
		log("datafellows");
d230 1
a230 1
		log("dsa_verify: no DSA key");
d239 1
a239 1
	log("len %d datafellows %d", signaturelen, datafellows);
d253 1
a253 1
			log("remaining bytes in signature %d", rlen);
d296 1
a296 1
	log("dsa_verify: signature %s", txt);
@

