head	1.18;
access;
symbols
	OPENBSD_2_8:1.15.0.2
	OPENBSD_2_8_BASE:1.15
	OPENBSD_2_7:1.13.0.2
	OPENBSD_2_7_BASE:1.13
	OPENBSD_2_6:1.7.0.2
	OPENBSD_2_6_BASE:1.7;
locks; strict;
comment	@ * @;


1.18
date	2001.03.04.01.46.29;	author djm;	state dead;
branches;
next	1.17;

1.17
date	2001.01.21.19.05.51;	author markus;	state Exp;
branches;
next	1.16;

1.16
date	2000.12.19.23.17.57;	author markus;	state Exp;
branches;
next	1.15;

1.15
date	2000.09.07.20.27.52;	author deraadt;	state Exp;
branches
	1.15.2.1;
next	1.14;

1.14
date	2000.06.20.01.39.42;	author markus;	state Exp;
branches;
next	1.13;

1.13
date	2000.04.19.07.05.49;	author deraadt;	state Exp;
branches
	1.13.2.1;
next	1.12;

1.12
date	2000.04.14.10.30.31;	author markus;	state Exp;
branches;
next	1.11;

1.11
date	2000.01.04.00.07.59;	author markus;	state Exp;
branches;
next	1.10;

1.10
date	99.11.24.19.53.47;	author markus;	state Exp;
branches;
next	1.9;

1.9
date	99.11.24.00.26.02;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	99.11.23.22.25.54;	author markus;	state Exp;
branches;
next	1.7;

1.7
date	99.09.30.16.55.06;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	99.09.30.05.43.33;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	99.09.30.04.30.03;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	99.09.30.04.10.28;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	99.09.29.21.14.16;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.18.16.19;	author dugsong;	state Exp;
branches;
next	1.1;

1.1
date	99.09.26.20.53.36;	author deraadt;	state Exp;
branches;
next	;

1.13.2.1
date	2000.09.01.18.23.20;	author jason;	state Exp;
branches;
next	1.13.2.2;

1.13.2.2
date	2000.11.08.21.30.56;	author jason;	state Exp;
branches;
next	1.13.2.3;

1.13.2.3
date	2001.03.12.15.44.11;	author jason;	state Exp;
branches;
next	1.13.2.4;

1.13.2.4
date	2001.03.21.18.52.50;	author jason;	state dead;
branches;
next	;

1.15.2.1
date	2001.02.16.20.13.05;	author jason;	state Exp;
branches;
next	1.15.2.2;

1.15.2.2
date	2001.02.19.17.19.03;	author jason;	state Exp;
branches;
next	1.15.2.3;

1.15.2.3
date	2001.03.21.19.46.26;	author jason;	state dead;
branches;
next	;


desc
@@


1.18
log
@Rename pty.[ch] -> sshpty.[ch] and login.[ch] to sshlogin.[ch] to avoid
header conflicts in portable; ok markus@@
@
text
@/*
 * Author: Tatu Ylonen <ylo@@cs.hut.fi>
 * Copyright (c) 1995 Tatu Ylonen <ylo@@cs.hut.fi>, Espoo, Finland
 *                    All rights reserved
 * This file performs some of the things login(1) normally does.  We cannot
 * easily use something like login -p -h host -f user, because there are
 * several different logins around, and it is hard to determined what kind of
 * login the current system has.  Also, we want to be able to execute commands
 * on a tty.
 *
 * As far as I am concerned, the code I have written for this software
 * can be used freely for any purpose.  Any derived versions of this
 * software must be clearly marked as such, and if the derived work is
 * incompatible with the protocol description in the RFC file, it must be
 * called by a name other than "ssh" or "Secure Shell".
 *
 * Copyright (c) 1999 Theo de Raadt.  All rights reserved.
 * Copyright (c) 1999 Markus Friedl.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include "includes.h"
RCSID("$OpenBSD: login.c,v 1.17 2001/01/21 19:05:51 markus Exp $");

#include <util.h>
#include <utmp.h>
#include "login.h"
#include "log.h"

/*
 * Returns the time when the user last logged in.  Returns 0 if the
 * information is not available.  This must be called before record_login.
 * The host the user logged in from will be returned in buf.
 */

/*
 * Returns the time when the user last logged in (or 0 if no previous login
 * is found).  The name of the host used last time is returned in buf.
 */

u_long
get_last_login_time(uid_t uid, const char *logname,
		    char *buf, u_int bufsize)
{
	struct lastlog ll;
	char *lastlog;
	int fd;

	lastlog = _PATH_LASTLOG;
	buf[0] = '\0';

	fd = open(lastlog, O_RDONLY);
	if (fd < 0)
		return 0;
	lseek(fd, (off_t) ((long) uid * sizeof(ll)), SEEK_SET);
	if (read(fd, &ll, sizeof(ll)) != sizeof(ll)) {
		close(fd);
		return 0;
	}
	close(fd);
	if (bufsize > sizeof(ll.ll_host) + 1)
		bufsize = sizeof(ll.ll_host) + 1;
	strncpy(buf, ll.ll_host, bufsize - 1);
	buf[bufsize - 1] = 0;
	return ll.ll_time;
}

/*
 * Records that the user has logged in.  I these parts of operating systems
 * were more standardized.
 */

void
record_login(pid_t pid, const char *ttyname, const char *user, uid_t uid,
	     const char *host, struct sockaddr * addr)
{
	int fd;
	struct lastlog ll;
	char *lastlog;
	struct utmp u;
	const char *utmp, *wtmp;

	/* Construct an utmp/wtmp entry. */
	memset(&u, 0, sizeof(u));
	strncpy(u.ut_line, ttyname + 5, sizeof(u.ut_line));
	u.ut_time = time(NULL);
	strncpy(u.ut_name, user, sizeof(u.ut_name));
	strncpy(u.ut_host, host, sizeof(u.ut_host));

	/* Figure out the file names. */
	utmp = _PATH_UTMP;
	wtmp = _PATH_WTMP;

	login(&u);
	lastlog = _PATH_LASTLOG;

	/* Update lastlog unless actually recording a logout. */
	if (strcmp(user, "") != 0) {
		/*
		 * It is safer to bzero the lastlog structure first because
		 * some systems might have some extra fields in it (e.g. SGI)
		 */
		memset(&ll, 0, sizeof(ll));

		/* Update lastlog. */
		ll.ll_time = time(NULL);
		strncpy(ll.ll_line, ttyname + 5, sizeof(ll.ll_line));
		strncpy(ll.ll_host, host, sizeof(ll.ll_host));
		fd = open(lastlog, O_RDWR);
		if (fd >= 0) {
			lseek(fd, (off_t) ((long) uid * sizeof(ll)), SEEK_SET);
			if (write(fd, &ll, sizeof(ll)) != sizeof(ll))
				log("Could not write %.100s: %.100s", lastlog, strerror(errno));
			close(fd);
		}
	}
}

/* Records that the user has logged out. */

void
record_logout(pid_t pid, const char *ttyname)
{
	const char *line = ttyname + 5;	/* /dev/ttyq8 -> ttyq8 */
	if (logout(line))
		logwtmp(line, "", "");
}
@


1.17
log
@split ssh.h and try to cleanup the #include mess. remove unnecessary #includes.
rename util.[ch] -> misc.[ch]
@
text
@d42 1
a42 1
RCSID("$OpenBSD: login.c,v 1.16 2000/12/19 23:17:57 markus Exp $");
@


1.16
log
@replace 'unsigned bla' with 'u_bla' everywhere. also, replace 'char unsigned'
with u_char.
@
text
@d42 1
a42 1
RCSID("$OpenBSD: login.c,v 1.15 2000/09/07 20:27:52 deraadt Exp $");
d46 2
a47 1
#include "ssh.h"
@


1.15
log
@cleanup copyright notices on all files.  I have attempted to be accurate with
the details.  everything is now under Tatu's licence (which I copied from his
readme), and/or the core-sdi bsd-ish thing for deattack, or various openbsd
developers under a 2-term bsd licence.  We're not changing any rules, just
being accurate.
@
text
@d42 1
a42 1
RCSID("$OpenBSD: login.c,v 1.14 2000/06/20 01:39:42 markus Exp $");
d59 1
a59 1
unsigned long
d61 1
a61 1
		    char *buf, unsigned int bufsize)
@


1.15.2.1
log
@Pull in OpenSSH 2.5.0
@
text
@d42 1
a42 1
RCSID("$OpenBSD: login.c,v 1.17 2001/01/21 19:05:51 markus Exp $");
d46 1
a46 2
#include "login.h"
#include "log.h"
d59 1
a59 1
u_long
d61 1
a61 1
		    char *buf, u_int bufsize)
@


1.15.2.2
log
@Pull in OpenSSH-2.5.1
@
text
@@


1.15.2.3
log
@Pull in OpenSSH-2.5.2 for 2.8 branch.
@
text
@d42 1
a42 1
RCSID("$OpenBSD: login.c,v 1.15.2.2 2001/02/19 17:19:03 jason Exp $");
@


1.14
log
@OpenBSD tag
@
text
@a1 3
 *
 * login.c
 *
a2 1
 *
a4 3
 *
 * Created: Fri Mar 24 14:51:08 1995 ylo
 *
d11 28
d42 1
a42 1
RCSID("$OpenBSD: login.c,v 1.13 2000/04/19 07:05:49 deraadt Exp $");
@


1.13
log
@pid_t
@
text
@d21 1
a21 1
RCSID("$Id: login.c,v 1.12 2000/04/14 10:30:31 markus Exp $");
@


1.13.2.1
log
@Pull in the rest of openssh-2.2.0 to 2.7 branch (luvin' cvs...)
@
text
@d21 1
a21 1
RCSID("$OpenBSD: login.c,v 1.14 2000/06/20 01:39:42 markus Exp $");
@


1.13.2.2
log
@openssh-2.3.0 (again) for 2.7 branch
@
text
@d2 3
d6 1
d9 3
a17 28
 * As far as I am concerned, the code I have written for this software
 * can be used freely for any purpose.  Any derived versions of this
 * software must be clearly marked as such, and if the derived work is
 * incompatible with the protocol description in the RFC file, it must be
 * called by a name other than "ssh" or "Secure Shell".
 *
 * Copyright (c) 1999 Theo de Raadt.  All rights reserved.
 * Copyright (c) 1999 Markus Friedl.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
d21 1
a21 1
RCSID("$OpenBSD: login.c,v 1.15 2000/09/07 20:27:52 deraadt Exp $");
@


1.13.2.3
log
@OpenSSH-2.5.1 for 2.7 patch branch
@
text
@d42 1
a42 1
RCSID("$OpenBSD: login.c,v 1.17 2001/01/21 19:05:51 markus Exp $");
d46 1
a46 2
#include "login.h"
#include "log.h"
d59 1
a59 1
u_long
d61 1
a61 1
		    char *buf, u_int bufsize)
@


1.13.2.4
log
@Pull in OpenSSH-2.5.2 for 2.7 branch.
@
text
@d42 1
a42 1
RCSID("$OpenBSD: login.c,v 1.13.2.3 2001/03/12 15:44:11 jason Exp $");
@


1.12
log
@whitespace cleanup
@
text
@d21 1
a21 1
RCSID("$Id: login.c,v 1.11 2000/01/04 00:07:59 markus Exp $");
d71 1
a71 1
record_login(int pid, const char *ttyname, const char *user, uid_t uid,
d119 1
a119 1
record_logout(int pid, const char *ttyname)
@


1.11
log
@ipv6 support: mostly gethostbyname->getaddrinfo/getnameinfo, new features:
sshd allows multiple ListenAddress and Port options.  note that libwrap is
not IPv6-ready. (based on patches from <kick@@kyoto.wide.ad.jp> and
fujiwara@@rcac.tdi.co.jp)
@
text
@d2 1
a2 1
 * 
d4 1
a4 1
 * 
d6 1
a6 1
 * 
d9 1
a9 1
 * 
d11 1
a11 1
 * 
d17 1
a17 1
 * 
d21 1
a21 1
RCSID("$Id: login.c,v 1.10 1999/11/24 19:53:47 markus Exp $");
d38 1
a38 1
unsigned long 
d70 1
a70 1
void 
d118 1
a118 1
void 
@


1.10
log
@KNF, final part 3
@
text
@d21 1
a21 1
RCSID("$Id: login.c,v 1.9 1999/11/24 00:26:02 deraadt Exp $");
d72 1
a72 1
	     const char *host, struct sockaddr_in * addr)
@


1.9
log
@much more KNF
@
text
@d21 1
a21 1
RCSID("$Id: login.c,v 1.8 1999/11/23 22:25:54 markus Exp $");
d27 10
a36 6
/* Returns the time when the user last logged in.  Returns 0 if the
   information is not available.  This must be called before record_login.
   The host the user logged in from will be returned in buf. */

/* Returns the time when the user last logged in (or 0 if no previous login
   is found).  The name of the host used last time is returned in buf. */
d65 4
a68 2
/* Records that the user has logged in.  I these parts of operating systems
   were more standardized. */
d96 4
a99 3
		/* It is safer to bzero the lastlog structure first
		   because some systems might have some extra fields in it
		   (e.g. SGI) */
@


1.8
log
@KNF part 1
@
text
@d2 17
a18 17

login.c

Author: Tatu Ylonen <ylo@@cs.hut.fi>

Copyright (c) 1995 Tatu Ylonen <ylo@@cs.hut.fi>, Espoo, Finland
                   All rights reserved

Created: Fri Mar 24 14:51:08 1995 ylo

This file performs some of the things login(1) normally does.  We cannot
easily use something like login -p -h host -f user, because there are
several different logins around, and it is hard to determined what kind of
login the current system has.  Also, we want to be able to execute commands
on a tty.

*/
d21 1
a21 1
RCSID("$Id: login.c,v 1.7 1999/09/30 16:55:06 deraadt Exp $");
@


1.7
log
@off_t, but needs more looking at later
@
text
@d21 1
a21 1
RCSID("$Id: login.c,v 1.6 1999/09/30 05:43:33 deraadt Exp $");
d27 2
a28 2
/* Returns the time when the user last logged in.  Returns 0 if the 
   information is not available.  This must be called before record_login. 
d34 3
a36 2
unsigned long get_last_login_time(uid_t uid, const char *logname,
				  char *buf, unsigned int bufsize)
d38 21
a58 23
  struct lastlog ll;
  char *lastlog;
  int fd;

  lastlog = _PATH_LASTLOG;

  buf[0] = '\0';

  fd = open(lastlog, O_RDONLY);
  if (fd < 0)
    return 0;
  lseek(fd, (off_t)((long)uid * sizeof(ll)), SEEK_SET);
  if (read(fd, &ll, sizeof(ll)) != sizeof(ll))
    {
      close(fd);
      return 0;
    }
  close(fd);
  if (bufsize > sizeof(ll.ll_host) + 1)
    bufsize = sizeof(ll.ll_host) + 1;
  strncpy(buf, ll.ll_host, bufsize - 1);
  buf[bufsize - 1] = 0;
  return ll.ll_time;
d64 3
a66 2
void record_login(int pid, const char *ttyname, const char *user, uid_t uid,
		  const char *host, struct sockaddr_in *addr)
d68 38
a105 40
  int fd;
  struct lastlog ll;
  char *lastlog;

  struct utmp u;
  const char *utmp, *wtmp;

  /* Construct an utmp/wtmp entry. */
  memset(&u, 0, sizeof(u));
  strncpy(u.ut_line, ttyname + 5, sizeof(u.ut_line));
  u.ut_time = time(NULL);
  strncpy(u.ut_name, user, sizeof(u.ut_name));
  strncpy(u.ut_host, host, sizeof(u.ut_host));

  /* Figure out the file names. */
  utmp = _PATH_UTMP;
  wtmp = _PATH_WTMP;
  
  login(&u);

  lastlog = _PATH_LASTLOG;

  /* Update lastlog unless actually recording a logout. */
  if (strcmp(user, "") != 0)
    {
      /* It is safer to bzero the lastlog structure first because some
	 systems might have some extra fields in it (e.g. SGI) */
      memset(&ll, 0, sizeof(ll));

      /* Update lastlog. */
      ll.ll_time = time(NULL);
      strncpy(ll.ll_line, ttyname + 5, sizeof(ll.ll_line));
      strncpy(ll.ll_host, host, sizeof(ll.ll_host));
      fd = open(lastlog, O_RDWR);
      if (fd >= 0)
	{
	  lseek(fd, (off_t)((long)uid * sizeof(ll)), SEEK_SET);
	  if (write(fd, &ll, sizeof(ll)) != sizeof(ll))
	    log("Could not write %.100s: %.100s", lastlog, strerror(errno));
	  close(fd);
a106 1
    }
d108 1
a108 1
  
d111 2
a112 1
void record_logout(int pid, const char *ttyname)
d114 3
a116 3
  const char *line = ttyname + 5; /* /dev/ttyq8 -> ttyq8 */
  if (logout(line))
    logwtmp(line, "", "");
@


1.6
log
@wringing out all the water
@
text
@d21 1
a21 1
RCSID("$Id: login.c,v 1.5 1999/09/30 04:30:03 deraadt Exp $");
d48 1
a48 1
  lseek(fd, (off_t)((long)uid * sizeof(ll)), 0);
d104 1
a104 1
	  lseek(fd, (off_t)((long)uid * sizeof(ll)), 0);
@


1.5
log
@more culling
@
text
@d21 1
a21 1
RCSID("$Id: login.c,v 1.4 1999/09/30 04:10:28 deraadt Exp $");
a22 1
#ifdef HAVE_LIBUTIL_LOGIN
a23 2
#endif /* HAVE_LIBUTIL_LOGIN */
#ifdef HAVE_UTMP_H
a24 10
#ifdef HAVE_LASTLOG_H
#include <lastlog.h> /* Some have the definitions in utmp.h. */
#endif /* HAVE_LASTLOG_H */
#endif /* HAVE_UTMP_H */
#ifdef HAVE_UTMPX_H
#include <utmpx.h>
#endif /* HAVE_UTMPX_H */
#ifdef HAVE_USERSEC_H
#include <usersec.h>
#endif /* HAVE_USERSEC_H */
a30 38
#ifdef LASTLOG_IS_DIR
unsigned long get_last_login_time(uid_t uid, const char *name, 
				  char *buf, unsigned int bufsize)
{
#if defined(HAVE_LASTLOG_H) || defined(HAVE_LASTLOG)
  struct lastlog ll;
  char lastlogfile[500];
  int fd;

  snprintf(lastlogfile, sizeof lastlogfile, "%.200s/%.200s",
    _PATH_LASTLOG, name);

  buf[0] = '\0';

  fd = open(lastlogfile, O_RDONLY);
  if (fd < 0)
    return 0;
  if (read(fd, &ll, sizeof(ll)) != sizeof(ll))
    {
      close(fd);
      return 0;
    }
  close(fd);
  if (bufsize > sizeof(ll.ll_host) + 1)
    bufsize = sizeof(ll.ll_host) + 1;
  strncpy(buf, ll.ll_host, bufsize - 1);
  buf[bufsize - 1] = 0;
  return ll.ll_time;
  
#else /* HAVE_LASTLOG_H || HAVE_LASTLOG */

  return 0;

#endif /* HAVE_LASTLOG_H || HAVE_LASTLOG */
}

#else /* LASTLOG_IS_DIR */

a36 2
#if defined(HAVE_LASTLOG_H) || defined(HAVE_LASTLOG)

a59 32

#else /* HAVE_LASTLOG_H || HAVE_LASTLOG */

#ifdef HAVE_USERSEC_H

  char *lasthost;
  int lasttime;
  if (setuserdb(S_READ) < 0)
    return 0;
  if (getuserattr((char *)logname, S_LASTTIME, &lasttime, SEC_INT) < 0)
    {
      enduserdb();
      return 0;
    }
  if (getuserattr((char *)logname, S_LASTHOST, &lasthost, SEC_CHAR) < 0)
    {
      enduserdb();
      return 0;
    }
  strncpy(buf, lasthost, bufsize);
  buf[bufsize - 1] = 0;
  if (enduserdb() < 0)
    return 0;
  return lasttime;

#else /* HAVE_USERSEC_H */
  
  return 0;

#endif /* HAVE_USERSEC_H */

#endif /* HAVE_LASTLOG_H || HAVE_LASTLOG */
a60 1
#endif /* LASTLOG_IS_DIR */
a68 2

#if defined(HAVE_LASTLOG_H) || defined(HAVE_LASTLOG)
a70 4
#ifdef LASTLOG_IS_DIR
  char lastlogfile[100];
#endif /* LASTLOG_IS_DIR */
#endif /* HAVE_LASTLOG_H || HAVE_LASTLOG */
a71 1
#if defined(HAVE_UTMP_H) && !defined(HAVE_UTMPX_H)
a76 15
#ifdef DEAD_PROCESS
  if (strcmp(user, "") == 0)
    u.ut_type = DEAD_PROCESS; /* logout */
  else
    u.ut_type = USER_PROCESS;
#endif /* LOGIN_PROCESS */
#ifdef HAVE_PID_IN_UTMP
  u.ut_pid = pid;
#endif /* PID_IN_UTMP */
#ifdef HAVE_ID_IN_UTMP
    if (sizeof(u.ut_id) > 4)
      strncpy(u.ut_id, ttyname + 5, sizeof(u.ut_id));
    else
      strncpy(u.ut_id, ttyname + strlen(ttyname) - 2, sizeof(u.ut_id));
#endif /* HAVE_ID_IN_UTMP */
a78 1
#ifdef HAVE_NAME_IN_UTMP
a79 4
#else /* HAVE_NAME_IN_UTMP */
  strncpy(u.ut_user, user, sizeof(u.ut_user));
#endif /* HAVE_NAME_IN_UTMP */
#ifdef HAVE_HOST_IN_UTMP
a80 7
#endif /* HAVE_HOST_IN_UTMP */
#ifdef HAVE_ADDR_IN_UTMP
  if (addr)
    memcpy(&u.ut_addr, &addr->sin_addr, sizeof(u.ut_addr));
  else
    memset(&u.ut_addr, 0, sizeof(u.ut_addr));
#endif
a85 1
#ifdef HAVE_LIBUTIL_LOGIN
a86 76
#else /* HAVE_LIBUTIL_LOGIN */
  /* Append an entry to wtmp. */
  fd = open(wtmp, O_WRONLY|O_APPEND);
  if (fd >= 0)
    {
      if (write(fd, &u, sizeof(u)) != sizeof(u))
	log("Could not write %.100s: %.100s", wtmp, strerror(errno));
      close(fd);
    }

  /* Replace the proper entry in utmp, as identified by ut_line.  Append a
     new entry if the line could not be found. */
  fd = open(utmp, O_RDWR);
  if (fd >= 0)
    {
      while (1)
	{
	  offset = lseek(fd, (off_t)0L, 1);
	  if (read(fd, &u2, sizeof(u2)) != sizeof(u2))
	    {
	      lseek(fd, offset, 0);
	      if (write(fd, &u, sizeof(u)) != sizeof(u))
		log("Could not append to %.100s: %.100s", 
		    utmp, strerror(errno));
	      break;
	    }
	  if (strncmp(u2.ut_line, ttyname + 5, sizeof(u2.ut_line)) == 0)
	    {
	      lseek(fd, offset, 0);
	      if (write(fd, &u, sizeof(u)) != sizeof(u))
		log("Could not write to %.100s: %.100s", 
		    utmp, strerror(errno));
	      break;
	    }
	}
      close(fd);
    }
#endif /* HAVE_LIBUTIL_LOGIN */
#endif /* HAVE_UTMP_H && !HAVE_UTMPX_H */

#ifdef HAVE_UTMPX_H
  {
    struct utmpx ux, *uxp;
    memset(&ux, 0, sizeof(ux));
    strncpy(ux.ut_line, ttyname + 5, sizeof(ux.ut_line));
    uxp = getutxline(&ux);
    if (uxp)
      ux = *uxp;
    strncpy(ux.ut_user, user, sizeof(ux.ut_user));
    if (sizeof(ux.ut_id) > 4)
      strncpy(ux.ut_id, ttyname + 5, sizeof(ux.ut_id));
    else
      strncpy(ux.ut_id, ttyname + strlen(ttyname) - 2, sizeof(ux.ut_id));
    ux.ut_pid = pid;
    if (strcmp(user, "") == 0)
      ux.ut_type = DEAD_PROCESS;
    else
      ux.ut_type = USER_PROCESS;
    gettimeofday(&ux.ut_tv, NULL);
#if HAVE_UT_SESSION
    ux.ut_session = pid;
#endif
    strncpy(ux.ut_host, host, sizeof(ux.ut_host));
    ux.ut_host[sizeof(ux.ut_host) - 1] = 0;
#ifdef HAVE_UT_SYSLEN
    ux.ut_syslen = strlen(ux.ut_host);
#endif
    pututxline(&ux);
#ifdef WTMPX_FILE
    updwtmpx(WTMPX_FILE, &ux);
#endif
    endutxent();
  }
#endif /* HAVE_UTMPX_H */

#if defined(HAVE_LASTLOG_H) || defined(HAVE_LASTLOG)
a100 16
#ifdef LASTLOG_IS_DIR
      snprintf(lastlogfile, sizeof lastlogfile, "%.100s/%.100s",
        lastlog, user);
      fd = open(lastlogfile, O_WRONLY | O_CREAT, 0644);
      if (fd >= 0)
	{
	  if (write(fd, &ll, sizeof(ll)) != sizeof(ll))
	    log("Could not write %.100s: %.100s", 
		lastlogfile, strerror(errno));
	  close(fd);
	} 
      else 
	{
	  log("Could not open %.100s: %.100s", lastlogfile, strerror(errno));
	}
#else /* LASTLOG_IS_DIR */
a108 24
#endif /* LASTLOG_IS_DIR */
    }
#endif /* HAVE_LASTLOG_H || HAVE_LASTLOG */

#ifdef HAVE_USERSEC_H

  if (strcmp(user, "") != 0)
    {
      int lasttime = time(NULL);
      if (setuserdb(S_WRITE) < 0)
	log("setuserdb S_WRITE failed: %.100s", strerror(errno));
      if (putuserattr((char *)user, S_LASTTIME, (void *)lasttime, SEC_INT) < 0)
	log("putuserattr S_LASTTIME failed: %.100s", strerror(errno));
      if (putuserattr((char *)user, S_LASTTTY, (void *)(ttyname + 5), 
		      SEC_CHAR) < 0)
	log("putuserattr S_LASTTTY %.900s failed: %.100s", 
	    ttyname, strerror(errno));
      if (putuserattr((char *)user, S_LASTHOST, (void *)host, SEC_CHAR) < 0)
	log("putuserattr S_LASTHOST %.900s failed: %.100s", 
	    host, strerror(errno));
      if (putuserattr((char *)user, 0, NULL, SEC_COMMIT) < 0)
	log("putuserattr SEC_COMMIT failed: %.100s", strerror(errno));
      if (enduserdb() < 0)
	log("enduserdb failed: %.100s", strerror(errno));
a109 1
#endif   
a115 1
#ifdef HAVE_LIBUTIL_LOGIN
a118 3
#else /* HAVE_LIBUTIL_LOGIN */
  record_login(pid, ttyname, "", -1, "", NULL);
#endif /* HAVE_LIBUTIL_LOGIN */  
@


1.4
log
@rely on paths.h more
@
text
@d21 1
a21 1
RCSID("$Id: login.c,v 1.3 1999/09/29 21:14:16 deraadt Exp $");
a179 3
#ifdef __sgi
    strncpy(u.ut_id, ttyname + 8, sizeof(u.ut_id)); /* /dev/ttyq99 -> q99 */
#else /* __sgi */
a183 1
#endif /* __sgi */
a256 3
#ifdef __sgi
    strncpy(ux.ut_id, ttyname + 8, sizeof(ux.ut_id)); /* /dev/ttyq99 -> q99 */
#else /* __sgi */
a260 1
#endif /* __sgi */
@


1.3
log
@numerous sprintf, strncpy, strcpy cleanups
@
text
@d21 1
a21 1
RCSID("$Id: login.c,v 1.2 1999/09/29 18:16:19 dugsong Exp $");
a52 1
#ifdef _PATH_LASTLOG
a54 9
#else
#ifdef LASTLOG_FILE
  snprintf(lastlogfile, sizeof lastlogfile, "%.200s/%.200s",
    LASTLOG_FILE, name);
#else
  snprintf(lastlogfile, sizeof lastlogfile, "%.200s/%.200s",
    SSH_LASTLOG, name);
#endif
#endif
a93 1
#ifdef _PATH_LASTLOG
a94 7
#else
#ifdef LASTLOG_FILE
  lastlog = LASTLOG_FILE;
#else
  lastlog = SSH_LASTLOG;
#endif
#endif
a206 1
#ifdef _PATH_UTMP
a208 9
#else
#ifdef UTMP_FILE
  utmp = UTMP_FILE;
  wtmp = WTMP_FILE;
#else
  utmp = SSH_UTMP;
  wtmp = SSH_WTMP;
#endif
#endif
a292 1
#ifdef _PATH_LASTLOG
a293 7
#else
#ifdef LASTLOG_FILE
  lastlog = LASTLOG_FILE;
#else
  lastlog = SSH_LASTLOG;
#endif
#endif
@


1.2
log
@update krb4/AFS support to ssh-1.2.27-afs-kerberos-pl1 level, clean up unused variables, update manpages
@
text
@d21 1
a21 1
RCSID("$Id: login.c,v 1.1 1999/09/26 20:53:36 deraadt Exp $");
d54 2
a55 1
  sprintf(lastlogfile, "%.200s/%.200s", _PATH_LASTLOG, name);
d58 2
a59 1
  sprintf(lastlogfile, "%.200s/%.200s", LASTLOG_FILE, name);
d61 2
a62 1
  sprintf(lastlogfile, "%.200s/%.200s", SSH_LASTLOG, name);
d66 1
a66 1
  strcpy(buf, "");
d114 1
a114 1
  strcpy(buf, "");
d343 2
a344 1
      sprintf(lastlogfile, "%.100s/%.100s", lastlog, user);
@


1.1
log
@i bet a lot of people didn't know what ssh 1.2.16 had a nice license.
well, except for the patent issues.  someone in sweden (forget their
name at the moment) cleaned out most of the patented code, and now
this code removes rsa code.  when this is done, it will link against
libssl, but the work isn't completely done yet.  then we need to bring
this up to modern days, featurewise.
@
text
@d21 1
a21 1
RCSID("$Id: login.c,v 1.3 1999/05/04 11:58:49 bg Exp $");
d23 3
d180 1
a180 2
  struct utmp u, u2;
  off_t offset;
@

