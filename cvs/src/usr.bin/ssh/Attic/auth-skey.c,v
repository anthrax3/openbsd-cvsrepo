head	1.28;
access;
symbols
	OPENBSD_4_2:1.27.0.4
	OPENBSD_4_2_BASE:1.27
	OPENBSD_4_1:1.27.0.2
	OPENBSD_4_1_BASE:1.27
	OPENBSD_4_0:1.26.0.4
	OPENBSD_4_0_BASE:1.26
	OPENBSD_3_9:1.20.0.16
	OPENBSD_3_9_BASE:1.20
	OPENBSD_3_8:1.20.0.14
	OPENBSD_3_8_BASE:1.20
	OPENBSD_3_7:1.20.0.12
	OPENBSD_3_7_BASE:1.20
	OPENBSD_3_6:1.20.0.10
	OPENBSD_3_6_BASE:1.20
	OPENBSD_3_5:1.20.0.8
	OPENBSD_3_5_BASE:1.20
	OPENBSD_3_4:1.20.0.6
	OPENBSD_3_4_BASE:1.20
	OPENBSD_3_3:1.20.0.4
	OPENBSD_3_3_BASE:1.20
	OPENBSD_3_2:1.20.0.2
	OPENBSD_3_2_BASE:1.20
	OPENBSD_3_1:1.17.0.2
	OPENBSD_3_1_BASE:1.17
	OPENBSD_3_0:1.12.0.4
	OPENBSD_3_0_BASE:1.12
	OPENBSD_2_9:1.12.0.2
	OPENBSD_2_8:1.9.0.2
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.6.0.2
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2;
locks; strict;
comment	@ * @;


1.28
date	2007.09.21.08.15.29;	author djm;	state dead;
branches;
next	1.27;

1.27
date	2007.01.21.01.41.54;	author stevesk;	state Exp;
branches;
next	1.26;

1.26
date	2006.08.05.08.28.24;	author dtucker;	state Exp;
branches;
next	1.25;

1.25
date	2006.08.05.08.00.33;	author dtucker;	state Exp;
branches;
next	1.24;

1.24
date	2006.08.03.03.34.41;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	2006.03.25.13.17.01;	author djm;	state Exp;
branches;
next	1.22;

1.22
date	2006.03.25.00.05.41;	author djm;	state Exp;
branches;
next	1.21;

1.21
date	2006.03.19.18.51.18;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2002.06.30.21.59.45;	author deraadt;	state Exp;
branches
	1.20.14.1
	1.20.16.1;
next	1.19;

1.19
date	2002.06.19.00.27.55;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2002.05.13.02.37.39;	author itojun;	state Exp;
branches;
next	1.17;

1.17
date	2002.03.18.17.50.31;	author provos;	state Exp;
branches
	1.17.2.1;
next	1.16;

1.16
date	2002.01.12.13.10.29;	author markus;	state Exp;
branches;
next	1.15;

1.15
date	2002.01.11.23.26.30;	author markus;	state Exp;
branches;
next	1.14;

1.14
date	2002.01.11.20.14.11;	author markus;	state Exp;
branches;
next	1.13;

1.13
date	2001.12.19.07.18.56;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2001.05.18.14.13.28;	author markus;	state Exp;
branches
	1.12.2.1
	1.12.4.1;
next	1.11;

1.11
date	2001.01.18.17.12.43;	author markus;	state dead;
branches;
next	1.10;

1.10
date	2001.01.18.16.59.59;	author markus;	state Exp;
branches;
next	1.9;

1.9
date	2000.10.19.16.41.13;	author deraadt;	state Exp;
branches
	1.9.2.1;
next	1.8;

1.8
date	2000.09.07.20.27.49;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2000.06.20.01.39.38;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2000.04.14.10.30.29;	author markus;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	99.12.06.19.04.57;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	99.12.01.16.54.35;	author markus;	state Exp;
branches;
next	1.3;

1.3
date	99.11.23.22.25.52;	author markus;	state Exp;
branches;
next	1.2;

1.2
date	99.10.16.20.57.52;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	99.10.07.21.45.02;	author markus;	state Exp;
branches;
next	;

1.6.2.1
date	2000.09.01.18.23.17;	author jason;	state Exp;
branches;
next	1.6.2.2;

1.6.2.2
date	2000.11.08.21.30.22;	author jason;	state Exp;
branches;
next	1.6.2.3;

1.6.2.3
date	2001.03.12.15.44.07;	author jason;	state dead;
branches;
next	;

1.9.2.1
date	2001.02.16.20.12.52;	author jason;	state dead;
branches;
next	1.9.2.2;

1.9.2.2
date	2001.09.27.00.15.41;	author miod;	state Exp;
branches;
next	1.9.2.3;

1.9.2.3
date	2002.03.08.17.04.41;	author brad;	state Exp;
branches;
next	;

1.12.2.1
date	2001.09.27.19.03.54;	author jason;	state Exp;
branches;
next	1.12.2.2;

1.12.2.2
date	2002.03.09.00.20.43;	author miod;	state Exp;
branches;
next	1.12.2.3;

1.12.2.3
date	2002.06.02.22.56.09;	author miod;	state Exp;
branches;
next	;

1.12.4.1
date	2002.03.07.17.37.46;	author jason;	state Exp;
branches;
next	1.12.4.2;

1.12.4.2
date	2002.05.17.00.03.23;	author miod;	state Exp;
branches;
next	1.12.4.3;

1.12.4.3
date	2002.06.22.07.23.16;	author miod;	state Exp;
branches;
next	1.12.4.4;

1.12.4.4
date	2002.10.11.14.53.06;	author miod;	state Exp;
branches;
next	;

1.17.2.1
date	2002.05.18.04.12.10;	author jason;	state Exp;
branches;
next	1.17.2.2;

1.17.2.2
date	2002.05.18.04.50.37;	author jason;	state Exp;
branches;
next	1.17.2.3;

1.17.2.3
date	2002.06.26.15.30.37;	author jason;	state Exp;
branches;
next	1.17.2.4;

1.17.2.4
date	2002.10.11.14.51.51;	author miod;	state Exp;
branches;
next	;

1.20.14.1
date	2006.10.06.03.19.32;	author brad;	state Exp;
branches;
next	;

1.20.16.1
date	2006.09.30.04.06.50;	author brad;	state Exp;
branches;
next	;


desc
@@


1.28
log
@unifdef -DBSD_AUTH
unifdef -USKEY

These options have been in use for some years;
ok markus@@ "no objection" millert@@
@
text
@/* $OpenBSD: auth-skey.c,v 1.27 2007/01/21 01:41:54 stevesk Exp $ */
/*
 * Copyright (c) 2001 Markus Friedl.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifdef SKEY

#include <sys/types.h>

#include <pwd.h>
#include <stdio.h>

#include <skey.h>

#include "xmalloc.h"
#include "key.h"
#include "hostfile.h"
#include "auth.h"
#include "monitor_wrap.h"

static void *
skey_init_ctx(Authctxt *authctxt)
{
	return authctxt;
}

int
skey_query(void *ctx, char **name, char **infotxt,
    u_int* numprompts, char ***prompts, u_int **echo_on)
{
	Authctxt *authctxt = ctx;
	char challenge[1024];
	struct skey skey;

	if (skeychallenge(&skey, authctxt->user, challenge) == -1)
		return -1;

	*name = xstrdup("");
	*infotxt = xstrdup("");
	*numprompts = 1;
	*prompts = xcalloc(*numprompts, sizeof(char *));
	*echo_on = xcalloc(*numprompts, sizeof(u_int));

	xasprintf(*prompts, "%s%s", challenge, SKEY_PROMPT);

	return 0;
}

int
skey_respond(void *ctx, u_int numresponses, char **responses)
{
	Authctxt *authctxt = ctx;

	if (authctxt->valid &&
	    numresponses == 1 &&
	    skey_haskey(authctxt->pw->pw_name) == 0 &&
	    skey_passcheck(authctxt->pw->pw_name, responses[0]) != -1)
	    return 0;
	return -1;
}

static void
skey_free_ctx(void *ctx)
{
	/* we don't have a special context */
}

KbdintDevice skey_device = {
	"skey",
	skey_init_ctx,
	skey_query,
	skey_respond,
	skey_free_ctx
};

KbdintDevice mm_skey_device = {
	"skey",
	skey_init_ctx,
	mm_skey_query,
	mm_skey_respond,
	skey_free_ctx
};
#endif /* SKEY */
@


1.27
log
@spaces
@
text
@d1 1
a1 1
/* $OpenBSD: auth-skey.c,v 1.26 2006/08/05 08:28:24 dtucker Exp $ */
@


1.26
log
@Zap unused variables in -DSKEY code.  ok djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: auth-skey.c,v 1.25 2006/08/05 08:00:33 dtucker Exp $ */
d58 2
a59 2
	*name  = xstrdup("");
	*infotxt  = xstrdup("");
@


1.25
log
@Add headers required to build with -DSKEY.  ok djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: auth-skey.c,v 1.24 2006/08/03 03:34:41 deraadt Exp $ */
d52 1
a52 2
	char challenge[1024], *p;
	int len;
@


1.24
log
@almost entirely get rid of the culture of ".h files that include .h files"
ok djm, sort of ok stevesk
makes the pain stop in one easy step
@
text
@d1 1
a1 1
/* $OpenBSD: auth-skey.c,v 1.23 2006/03/25 13:17:01 djm Exp $ */
d30 3
d36 2
@


1.23
log
@Put $OpenBSD$ tags back (as comments) to replace the RCSID()s that
Theo nuked - our scripts to sync -portable need them in the files
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a24 1
#include "includes.h"
d27 2
@


1.22
log
@introduce xcalloc() and xasprintf() failure-checked allocations functions
and use them throughout openssh

xcalloc is particularly important because malloc(nmemb * size) is a
dangerous idiom (subject to integer overflow) and it is time for it to
die

feedback and ok deraadt@@
@
text
@d1 1
@


1.21
log
@RCSID() can die
@
text
@d55 2
a56 3
	*prompts = xmalloc(*numprompts * sizeof(char *));
	*echo_on = xmalloc(*numprompts * sizeof(u_int));
	(*echo_on)[0] = 0;
d58 1
a58 5
	len = strlen(challenge) + strlen(SKEY_PROMPT) + 1;
	p = xmalloc(len);
	strlcpy(p, challenge, len);
	strlcat(p, SKEY_PROMPT, len);
	(*prompts)[0] = p;
@


1.20
log
@minor KNF
@
text
@a24 1
RCSID("$OpenBSD: auth-skey.c,v 1.19 2002/06/19 00:27:55 deraadt Exp $");
@


1.20.14.1
log
@upgrade to OpenSSH 4.4
@
text
@a0 1
/* $OpenBSD: auth-skey.c,v 1.26 2006/08/05 08:28:24 dtucker Exp $ */
d24 2
a28 5
#include <sys/types.h>

#include <pwd.h>
#include <stdio.h>

a31 2
#include "key.h"
#include "hostfile.h"
d46 2
a47 1
	char challenge[1024];
d56 9
a64 4
	*prompts = xcalloc(*numprompts, sizeof(char *));
	*echo_on = xcalloc(*numprompts, sizeof(u_int));

	xasprintf(*prompts, "%s%s", challenge, SKEY_PROMPT);
@


1.20.16.1
log
@upgrade to OpenSSH 4.4
@
text
@a0 1
/* $OpenBSD: auth-skey.c,v 1.26 2006/08/05 08:28:24 dtucker Exp $ */
d24 2
a28 5
#include <sys/types.h>

#include <pwd.h>
#include <stdio.h>

a31 2
#include "key.h"
#include "hostfile.h"
d46 2
a47 1
	char challenge[1024];
d56 9
a64 4
	*prompts = xcalloc(*numprompts, sizeof(char *));
	*echo_on = xcalloc(*numprompts, sizeof(u_int));

	xasprintf(*prompts, "%s%s", challenge, SKEY_PROMPT);
@


1.19
log
@KNF done automatically while reading....
@
text
@d25 1
a25 1
RCSID("$OpenBSD: auth-skey.c,v 1.18 2002/05/13 02:37:39 itojun Exp $");
d56 1
a56 1
	*prompts = xmalloc(*numprompts * sizeof(char*));
@


1.18
log
@less warnings.  skey_{respond,query} are public (in auth.h)
@
text
@d25 1
a25 1
RCSID("$OpenBSD: auth-skey.c,v 1.17 2002/03/18 17:50:31 provos Exp $");
d53 2
a54 2
	*name       = xstrdup("");
	*infotxt    = xstrdup("");
@


1.17
log
@integrate privilege separated openssh; its turned off by default for now.
work done by me and markus@@
@
text
@d25 1
a25 1
RCSID("$OpenBSD: auth-skey.c,v 1.16 2002/01/12 13:10:29 markus Exp $");
d41 1
a41 1
static int
d69 1
a69 1
static int
@


1.17.2.1
log
@Update to OpenSSH-3.2.2
@
text
@d25 1
a25 1
RCSID("$OpenBSD: auth-skey.c,v 1.18 2002/05/13 02:37:39 itojun Exp $");
d41 1
a41 1
int
d69 1
a69 1
int
@


1.17.2.2
log
@Update to OpenSSH-3.2.3
@
text
@@


1.17.2.3
log
@Pull in OpenSSH-3.4
@
text
@d25 1
a25 1
RCSID("$OpenBSD: auth-skey.c,v 1.19 2002/06/19 00:27:55 deraadt Exp $");
d53 2
a54 2
	*name  = xstrdup("");
	*infotxt  = xstrdup("");
@


1.17.2.4
log
@Update to OpenSSH 3.5
@
text
@d25 1
a25 1
RCSID("$OpenBSD: auth-skey.c,v 1.20 2002/06/30 21:59:45 deraadt Exp $");
d56 1
a56 1
	*prompts = xmalloc(*numprompts * sizeof(char *));
@


1.16
log
@undo local change
@
text
@d25 1
a25 1
RCSID("$OpenBSD: auth-skey.c,v 1.14 2002/01/11 20:14:11 markus Exp $");
d33 1
a40 2
#define PROMPT "\nS/Key Password: "

d60 1
a60 1
	len = strlen(challenge) + strlen(PROMPT) + 1;
d63 1
a63 1
	strlcat(p, PROMPT, len);
d93 8
@


1.15
log
@use snprintf; mouring@@
@
text
@d63 2
a64 1
	snprintf(p, len, "%s%s", challenge, PROMPT);
@


1.14
log
@use strlcpy not strlcat; mouring@@
@
text
@d25 1
a25 1
RCSID("$OpenBSD: auth-skey.c,v 1.13 2001/12/19 07:18:56 deraadt Exp $");
d63 1
a63 2
	strlcpy(p, challenge, len);
	strlcat(p, PROMPT, len);
@


1.13
log
@basic KNF done while i was looking for something else
@
text
@d25 1
a25 1
RCSID("$OpenBSD: auth-skey.c,v 1.12 2001/05/18 14:13:28 markus Exp $");
d63 1
a63 2
	p[0] = '\0';
	strlcat(p, challenge, len);
@


1.12
log
@improved kbd-interactive support. work by per@@appgate.com and me
@
text
@d25 1
a25 1
RCSID("$OpenBSD: auth2-chall.c,v 1.4 2001/03/28 22:43:31 markus Exp $");
d43 1
a43 1
skey_query(void *ctx, char **name, char **infotxt, 
d75 1
a75 1
 
d77 1
a77 1
	    numresponses == 1 && 
@


1.12.4.1
log
@Update to OpenSSH-3.1 on 3.0-stable branch
@
text
@d25 1
a25 1
RCSID("$OpenBSD: auth-skey.c,v 1.16 2002/01/12 13:10:29 markus Exp $");
d43 1
a43 1
skey_query(void *ctx, char **name, char **infotxt,
d63 2
a64 1
	strlcpy(p, challenge, len);
d75 1
a75 1

d77 1
a77 1
	    numresponses == 1 &&
@


1.12.4.2
log
@Update OpenSSH to version 3.2.2.
@
text
@d25 1
a25 1
RCSID("$OpenBSD: auth-skey.c,v 1.18 2002/05/13 02:37:39 itojun Exp $");
a32 1
#include "monitor_wrap.h"
d40 3
a42 1
int
d61 1
a61 1
	len = strlen(challenge) + strlen(SKEY_PROMPT) + 1;
d64 1
a64 1
	strlcat(p, SKEY_PROMPT, len);
d70 1
a70 1
int
a93 8
	skey_free_ctx
};

KbdintDevice mm_skey_device = {
	"skey",
	skey_init_ctx,
	mm_skey_query,
	mm_skey_respond,
@


1.12.4.3
log
@Update OpenSSH to version 3.3 (with local changes, configuration files still
living in /etc and privsep user being nobody).
@
text
@d25 1
a25 1
RCSID("$OpenBSD: auth-skey.c,v 1.12.4.2 2002/05/17 00:03:23 miod Exp $");
d53 2
a54 2
	*name  = xstrdup("");
	*infotxt  = xstrdup("");
@


1.12.4.4
log
@Update to OpenSSH 3.5
@
text
@d25 1
a25 1
RCSID("$OpenBSD: auth-skey.c,v 1.20 2002/06/30 21:59:45 deraadt Exp $");
d56 1
a56 1
	*prompts = xmalloc(*numprompts * sizeof(char *));
@


1.12.2.1
log
@Pull in OpenSSH-2.9.9
@
text
@d25 1
a25 1
RCSID("$OpenBSD: auth-skey.c,v 1.12 2001/05/18 14:13:28 markus Exp $");
@


1.12.2.2
log
@Merge OpenSSH 3.1, keeping /etc as configuration files directory.
(i.e. OpenSSH 3.1 + openbsd29_3.1.patch)
@
text
@d25 1
a25 1
RCSID("$OpenBSD: auth-skey.c,v 1.16 2002/01/12 13:10:29 markus Exp $");
d43 1
a43 1
skey_query(void *ctx, char **name, char **infotxt,
d63 2
a64 1
	strlcpy(p, challenge, len);
d75 1
a75 1

d77 1
a77 1
	    numresponses == 1 &&
@


1.12.2.3
log
@Upgrade to OpenSSH 3.2.3.

Except for improbable compilation error fixes, this should be the last
commit made to the 2.9-STABLE branche. Have fun upgrading.
@
text
@d25 1
a25 1
RCSID("$OpenBSD: auth-skey.c,v 1.18 2002/05/13 02:37:39 itojun Exp $");
a32 1
#include "monitor_wrap.h"
d40 3
a42 1
int
d61 1
a61 1
	len = strlen(challenge) + strlen(SKEY_PROMPT) + 1;
d64 1
a64 1
	strlcat(p, SKEY_PROMPT, len);
d70 1
a70 1
int
a93 8
	skey_free_ctx
};

KbdintDevice mm_skey_device = {
	"skey",
	skey_init_ctx,
	mm_skey_query,
	mm_skey_respond,
@


1.11
log
@rename *-skey.c *-chall.c since the files are not skey specific
@
text
@d2 1
a2 1
 * Copyright (c) 2001 Markus Friedl. All rights reserved.
d24 4
d29 1
a29 2
#include "includes.h"
RCSID("$OpenBSD: auth-skey.c,v 1.10 2001/01/18 16:59:59 markus Exp $");
d31 1
a31 1
#include "ssh.h"
d34 11
a44 3
#ifdef SKEY
char *
get_challenge(Authctxt *authctxt, char *devs)
d46 5
a50 2
	static char challenge[1024];
        struct skey skey;
d52 17
a68 3
		return NULL;
	strlcat(challenge, "\nS/Key Password: ", sizeof challenge);
	return challenge;
d70 3
a72 2
int
verify_response(Authctxt *authctxt, char *response)
d74 4
a77 1
	return (authctxt->valid &&
d79 3
a81 1
	    skey_passcheck(authctxt->pw->pw_name, response) != -1);
d83 3
a85 4
#else
/* not available */
char *
get_challenge(Authctxt *authctxt, char *devs)
d87 1
a87 1
	return NULL;
d89 9
a97 6
int
verify_response(Authctxt *authctxt, char *response)
{
	return 0;
}
#endif
@


1.10
log
@1) removes fake skey from sshd, since this will be much
   harder with /usr/libexec/auth/login_XXX
2) share/unify code used in ssh-1 and ssh-2 authentication (server side)
3) make addition of BSD_AUTH and other challenge reponse methods
   easier.
@
text
@d26 1
a26 1
RCSID("$OpenBSD: auth-chall.c,v 1.11 2000/10/11 20:27:23 markus Exp $");
@


1.9
log
@fmt string problem in unused code
@
text
@d2 1
a2 1
 * Copyright (c) 1999,2000 Markus Friedl.  All rights reserved.
d26 1
a26 1
RCSID("$OpenBSD: auth-skey.c,v 1.8 2000/09/07 20:27:49 deraadt Exp $");
d29 1
a29 7
#include "packet.h"
#include <sha1.h>

/*
 * try skey authentication,
 * return 1 on success, 0 on failure, -1 if skey is not available
 */
d31 11
d43 1
a43 1
auth_skey_password(struct passwd * pw, const char *password)
d45 3
a47 18
	if (strncasecmp(password, "s/key", 5) == 0) {
		char *skeyinfo = skey_keyinfo(pw->pw_name);
		if (skeyinfo == NULL) {
			debug("generating fake skeyinfo for %.100s.",
			    pw->pw_name);
			skeyinfo = skey_fake_keyinfo(pw->pw_name);
		}
		if (skeyinfo != NULL)
			packet_send_debug("%s", skeyinfo);
		/* Try again. */
		return 0;
	} else if (skey_haskey(pw->pw_name) == 0 &&
		   skey_passcheck(pw->pw_name, (char *) password) != -1) {
		/* Authentication succeeded. */
		return 1;
	}
	/* Fall back to ordinary passwd authentication. */
	return -1;
d49 4
a52 12

/* from %OpenBSD: skeylogin.c,v 1.32 1999/08/16 14:46:56 millert Exp % */

#define ROUND(x)   (((x)[0] << 24) + (((x)[1]) << 16) + (((x)[2]) << 8) + \
		    ((x)[3]))

/*
 * hash_collapse()
 */
static u_int32_t
hash_collapse(s)
	u_char *s;
d54 1
a54 12
	int len, target;
	u_int32_t i;
	
	if ((strlen(s) % sizeof(u_int32_t)) == 0)
		target = strlen(s);    /* Multiple of 4 */
	else
		target = strlen(s) - (strlen(s) % sizeof(u_int32_t));

	for (i = 0, len = 0; len < target; len += 4)
		i ^= ROUND(s + len);

	return i;
d56 2
a57 3

char *
skey_fake_keyinfo(char *username)
d59 1
a59 116
	int i;
	u_int ptr;
	u_char hseed[SKEY_MAX_SEED_LEN], flg = 1, *up;
	char pbuf[SKEY_MAX_PW_LEN+1];
	static char skeyprompt[SKEY_MAX_CHALLENGE+1];
	char *secret = NULL;
	size_t secretlen = 0;
	SHA1_CTX ctx;
	char *p, *u;

	/*
	 * Base first 4 chars of seed on hostname.
	 * Add some filler for short hostnames if necessary.
	 */
	if (gethostname(pbuf, sizeof(pbuf)) == -1)
		*(p = pbuf) = '.';
	else
		for (p = pbuf; *p && isalnum(*p); p++)
			if (isalpha(*p) && isupper(*p))
				*p = tolower(*p);
	if (*p && pbuf - p < 4)
		(void)strncpy(p, "asjd", 4 - (pbuf - p));
	pbuf[4] = '\0';

	/* Hash the username if possible */
	if ((up = SHA1Data(username, strlen(username), NULL)) != NULL) {
		struct stat sb;
		time_t t;
		int fd;

		/* Collapse the hash */
		ptr = hash_collapse(up);
		memset(up, 0, strlen(up));

		/* See if the random file's there, else use ctime */
		if ((fd = open(_SKEY_RAND_FILE_PATH_, O_RDONLY)) != -1
		    && fstat(fd, &sb) == 0 &&
		    sb.st_size > (off_t)SKEY_MAX_SEED_LEN &&
		    lseek(fd, ptr % (sb.st_size - SKEY_MAX_SEED_LEN),
		    SEEK_SET) != -1 && read(fd, hseed,
		    SKEY_MAX_SEED_LEN) == SKEY_MAX_SEED_LEN) {
			close(fd);
			fd = -1;
			secret = hseed;
			secretlen = SKEY_MAX_SEED_LEN;
			flg = 0;
		} else if (!stat(_PATH_MEM, &sb) || !stat("/", &sb)) {
			t = sb.st_ctime;
			secret = ctime(&t);
			secretlen = strlen(secret);
			flg = 0;
		}
		if (fd != -1)
			close(fd);
	}

	/* Put that in your pipe and smoke it */
	if (flg == 0) {
		/* Hash secret value with username */
		SHA1Init(&ctx);
		SHA1Update(&ctx, secret, secretlen);
		SHA1Update(&ctx, username, strlen(username));
		SHA1End(&ctx, up);
		
		/* Zero out */
		memset(secret, 0, secretlen);

		/* Now hash the hash */
		SHA1Init(&ctx);
		SHA1Update(&ctx, up, strlen(up));
		SHA1End(&ctx, up);
		
		ptr = hash_collapse(up + 4);
		
		for (i = 4; i < 9; i++) {
			pbuf[i] = (ptr % 10) + '0';
			ptr /= 10;
		}
		pbuf[i] = '\0';

		/* Sequence number */
		ptr = ((up[2] + up[3]) % 99) + 1;

		memset(up, 0, 20); /* SHA1 specific */
		free(up);

		(void)snprintf(skeyprompt, sizeof skeyprompt,
			      "otp-%.*s %d %.*s",
			      SKEY_MAX_HASHNAME_LEN,
			      skey_get_algorithm(),
			      ptr, SKEY_MAX_SEED_LEN,
			      pbuf);
	} else {
		/* Base last 8 chars of seed on username */
		u = username;
		i = 8;
		p = &pbuf[4];
		do {
			if (*u == 0) {
				/* Pad remainder with zeros */
				while (--i >= 0)
					*p++ = '0';
				break;
			}

			*p++ = (*u++ % 10) + '0';
		} while (--i != 0);
		pbuf[12] = '\0';

		(void)snprintf(skeyprompt, sizeof skeyprompt,
			      "otp-%.*s %d %.*s",
			      SKEY_MAX_HASHNAME_LEN,
			      skey_get_algorithm(),
			      99, SKEY_MAX_SEED_LEN, pbuf);
	}
	return skeyprompt;
d61 1
@


1.9.2.1
log
@Pull in OpenSSH 2.5.0
@
text
@d26 1
a26 1
RCSID("$OpenBSD: auth-skey.c,v 1.9 2000/10/19 16:41:13 deraadt Exp $");
@


1.9.2.2
log
@Pull in OpenSSH 2.9.9 to the 2.8 branch.
@
text
@d2 1
a2 1
 * Copyright (c) 2001 Markus Friedl.  All rights reserved.
d24 1
d26 1
a26 1
RCSID("$OpenBSD: auth-skey.c,v 1.12 2001/05/18 14:13:28 markus Exp $");
d28 8
a35 3
#ifdef SKEY

#include <skey.h>
d37 2
a38 5
#include "xmalloc.h"
#include "auth.h"

static void *
skey_init_ctx(Authctxt *authctxt)
d40 18
a57 1
	return authctxt;
d60 4
a63 1
#define PROMPT "\nS/Key Password: "
d65 6
a70 3
static int
skey_query(void *ctx, char **name, char **infotxt, 
    u_int* numprompts, char ***prompts, u_int **echo_on)
d72 7
a78 21
	Authctxt *authctxt = ctx;
	char challenge[1024], *p;
	int len;
	struct skey skey;

	if (skeychallenge(&skey, authctxt->user, challenge) == -1)
		return -1;

	*name       = xstrdup("");
	*infotxt    = xstrdup("");
	*numprompts = 1;
	*prompts = xmalloc(*numprompts * sizeof(char*));
	*echo_on = xmalloc(*numprompts * sizeof(u_int));
	(*echo_on)[0] = 0;

	len = strlen(challenge) + strlen(PROMPT) + 1;
	p = xmalloc(len);
	p[0] = '\0';
	strlcat(p, challenge, len);
	strlcat(p, PROMPT, len);
	(*prompts)[0] = p;
d80 2
a81 2
	return 0;
}
d83 1
a83 11
static int
skey_respond(void *ctx, u_int numresponses, char **responses)
{
	Authctxt *authctxt = ctx;
 
	if (authctxt->valid &&
	    numresponses == 1 && 
	    skey_haskey(authctxt->pw->pw_name) == 0 &&
	    skey_passcheck(authctxt->pw->pw_name, responses[0]) != -1)
	    return 0;
	return -1;
d86 2
a87 2
static void
skey_free_ctx(void *ctx)
d89 116
a204 1
	/* we don't have a special context */
a205 9

KbdintDevice skey_device = {
	"skey",
	skey_init_ctx,
	skey_query,
	skey_respond,
	skey_free_ctx
};
#endif /* SKEY */
@


1.9.2.3
log
@Merge OpenSSH 3.1.
@
text
@d25 1
a25 1
RCSID("$OpenBSD: auth-skey.c,v 1.16 2002/01/12 13:10:29 markus Exp $");
d43 1
a43 1
skey_query(void *ctx, char **name, char **infotxt,
d63 2
a64 1
	strlcpy(p, challenge, len);
d75 1
a75 1

d77 1
a77 1
	    numresponses == 1 &&
@


1.8
log
@cleanup copyright notices on all files.  I have attempted to be accurate with
the details.  everything is now under Tatu's licence (which I copied from his
readme), and/or the core-sdi bsd-ish thing for deattack, or various openbsd
developers under a 2-term bsd licence.  We're not changing any rules, just
being accurate.
@
text
@d26 1
a26 1
RCSID("$OpenBSD: auth-skey.c,v 1.7 2000/06/20 01:39:38 markus Exp $");
d48 1
a48 1
			packet_send_debug(skeyinfo);
@


1.7
log
@OpenBSD tag
@
text
@d1 24
d26 1
a26 1
RCSID("$OpenBSD: auth-skey.c,v 1.6 2000/04/14 10:30:29 markus Exp $");
@


1.6
log
@whitespace cleanup
@
text
@d2 1
a2 1
RCSID("$Id: auth-skey.c,v 1.5 1999/12/06 19:04:57 deraadt Exp $");
@


1.6.2.1
log
@Pull in the rest of openssh-2.2.0 to 2.7 branch (luvin' cvs...)
@
text
@d2 1
a2 1
RCSID("$OpenBSD: auth-skey.c,v 1.7 2000/06/20 01:39:38 markus Exp $");
@


1.6.2.2
log
@openssh-2.3.0 (again) for 2.7 branch
@
text
@a0 24
/*
 * Copyright (c) 1999,2000 Markus Friedl.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

d2 1
a2 1
RCSID("$OpenBSD: auth-skey.c,v 1.9 2000/10/19 16:41:13 deraadt Exp $");
d24 1
a24 1
			packet_send_debug("%s", skeyinfo);
@


1.6.2.3
log
@OpenSSH-2.5.1 for 2.7 patch branch
@
text
@d26 1
a26 1
RCSID("$OpenBSD: auth-skey.c,v 1.6.2.2 2000/11/08 21:30:22 jason Exp $");
@


1.5
log
@fd leak
@
text
@d2 1
a2 1
RCSID("$Id: auth-skey.c,v 1.4 1999/12/01 16:54:35 markus Exp $");
d8 1
a8 1
/* 
d10 1
a10 1
 * return 1 on success, 0 on failure, -1 if skey is not available 
d13 1
a13 1
int 
d46 1
a46 1
        u_char *s;
d48 1
a48 1
        int len, target;
d52 1
a52 1
  		target = strlen(s);    /* Multiple of 4 */
d55 1
a55 1
  
d57 1
a57 1
        	i ^= ROUND(s + len);
@


1.4
log
@move skey-auth from auth-passwd.c to auth-skey.c, same for krb4
@
text
@d2 1
a2 1
RCSID("$Id: auth-skey.c,v 1.3 1999/11/23 22:25:52 markus Exp $");
d107 1
d117 2
@


1.3
log
@KNF part 1
@
text
@d2 1
a2 1
RCSID("$Id: auth-skey.c,v 1.2 1999/10/16 20:57:52 deraadt Exp $");
d5 1
d8 28
a36 1

@


1.2
log
@snprintf
@
text
@d2 1
a2 1
RCSID("$Id: auth-skey.c,v 1.1 1999/10/07 21:45:02 markus Exp $");
d33 1
@


1.1
log
@add skey to sshd:

1) pass *pw to auth_password() not user_name, do_authentication already
   keeps private copy of struct passwd for current user.
2) limit authentication attemps to 5, otherwise
        ssh -o 'NumberOfPasswordPrompts 100000' host
   lets you enter 100000 passwds
3) make s/key a run-time option in /etc/sshd_config
4) generate fake skeys,
   for s/key for nonexisting users, too
   limit auth-tries for nonexisting users, too.
Note that
% ssh -l nonexisting-user -o 'NumberOfPasswordPrompts 100000' host
has NO limits in ssh-1.2.27
@
text
@d2 1
a2 1
RCSID("$Id: auth-passwd.c,v 1.5 1999/09/30 04:30:03 deraadt Exp $");
d119 1
a119 1
		(void)sprintf(skeyprompt,
d142 2
a143 1
		(void)sprintf(skeyprompt, "otp-%.*s %d %.*s",
@

