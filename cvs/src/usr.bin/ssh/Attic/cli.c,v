head	1.15;
access;
symbols
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_9:1.11.0.2
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2;
locks; strict;
comment	@ * @;


1.15
date	2001.06.24.05.35.33;	author markus;	state dead;
branches;
next	1.14;

1.14
date	2001.06.23.15.12.18;	author itojun;	state Exp;
branches;
next	1.13;

1.13
date	2001.05.06.21.23.31;	author markus;	state Exp;
branches;
next	1.12;

1.12
date	2001.05.06.17.52.07;	author mouring;	state Exp;
branches;
next	1.11;

1.11
date	2001.03.06.00.33.04;	author deraadt;	state Exp;
branches
	1.11.2.1;
next	1.10;

1.10
date	2001.03.01.03.38.33;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2001.02.10.12.44.02;	author markus;	state Exp;
branches;
next	1.8;

1.8
date	2001.02.08.19.30.51;	author itojun;	state Exp;
branches;
next	1.7;

1.7
date	2001.02.04.15.32.23;	author stevesk;	state Exp;
branches;
next	1.6;

1.6
date	2001.01.21.19.05.47;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2001.01.08.08.50.29;	author markus;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.07.21.26.55;	author markus;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.07.19.04.47;	author markus;	state Exp;
branches;
next	1.2;

1.2
date	2000.10.16.09.38.44;	author djm;	state Exp;
branches
	1.2.2.1
	1.2.4.1;
next	1.1;

1.1
date	2000.10.11.20.14.39;	author markus;	state Exp;
branches;
next	;

1.2.2.1
date	2001.02.16.20.12.58;	author jason;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2001.02.19.17.18.48;	author jason;	state Exp;
branches;
next	1.2.2.3;

1.2.2.3
date	2001.03.21.19.46.24;	author jason;	state Exp;
branches;
next	1.2.2.4;

1.2.2.4
date	2001.05.07.21.09.28;	author jason;	state Exp;
branches;
next	1.2.2.5;

1.2.2.5
date	2001.09.27.00.15.41;	author miod;	state dead;
branches;
next	;

1.2.4.1
date	2000.11.08.21.30.36;	author jason;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2001.03.12.15.44.09;	author jason;	state Exp;
branches;
next	1.2.4.3;

1.2.4.3
date	2001.03.21.18.52.41;	author jason;	state Exp;
branches;
next	;

1.11.2.1
date	2001.09.27.19.03.54;	author jason;	state dead;
branches;
next	;


desc
@@


1.15
log
@switch to readpassphrase(3)
2.7/8-stable needs readpassphrase.[ch] from libc
@
text
@/*	$OpenBSD: cli.c,v 1.14 2001/06/23 15:12:18 itojun Exp $	*/

/*
 * Copyright (c) 2000 Markus Friedl.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include "includes.h"
RCSID("$OpenBSD: cli.c,v 1.14 2001/06/23 15:12:18 itojun Exp $");

#include "xmalloc.h"
#include "log.h"
#include "cli.h"

#include <vis.h>

static int cli_input = -1;
static int cli_output = -1;
static int cli_from_stdin = 0;

sigset_t oset;
sigset_t nset;
struct sigaction nsa;
struct sigaction osa;
struct termios ntio;
struct termios otio;
int echo_modified;

volatile int intr;

static int
cli_open(int from_stdin)
{
	if (cli_input >= 0 && cli_output >= 0 && cli_from_stdin == from_stdin)
		return 1;

	if (from_stdin) {
		if (!cli_from_stdin && cli_input >= 0) {
			(void)close(cli_input);
		}
		cli_input = STDIN_FILENO;
		cli_output = STDERR_FILENO;
	} else {
		cli_input = cli_output = open(_PATH_TTY, O_RDWR);
		if (cli_input < 0)
			fatal("You have no controlling tty.  Cannot read passphrase.");
	}

	cli_from_stdin = from_stdin;

	return cli_input >= 0 && cli_output >= 0 && cli_from_stdin == from_stdin;
}

static void
cli_close(void)
{
	if (!cli_from_stdin && cli_input >= 0)
		close(cli_input);
	cli_input = -1;
	cli_output = -1;
	cli_from_stdin = 0;
	return;
}

static void
intrcatch(int sig)
{
	intr = 1;
}

static void
cli_echo_disable(void)
{
	sigemptyset(&nset);
	sigaddset(&nset, SIGTSTP);
	(void) sigprocmask(SIG_BLOCK, &nset, &oset);

	intr = 0;

	memset(&nsa, 0, sizeof(nsa));
	nsa.sa_handler = intrcatch;
	(void) sigaction(SIGINT, &nsa, &osa);

	echo_modified = 0;
	if (tcgetattr(cli_input, &otio) == 0 && (otio.c_lflag & ECHO)) {
		echo_modified = 1;
		ntio = otio;
		ntio.c_lflag &= ~(ECHO | ECHOE | ECHOK | ECHONL);
		(void) tcsetattr(cli_input, TCSANOW, &ntio);
	}
	return;
}

static void
cli_echo_restore(void)
{
	if (echo_modified != 0) {
		tcsetattr(cli_input, TCSANOW, &otio);
		echo_modified = 0;
	}

	(void) sigprocmask(SIG_SETMASK, &oset, NULL);
	(void) sigaction(SIGINT, &osa, NULL);

	if (intr != 0) {
		kill(getpid(), SIGINT);
		sigemptyset(&nset);
		/* XXX tty has not neccessarily drained by now? */
		sigsuspend(&nset);
		intr = 0;
	}
	return;
}

static int
cli_read(char* buf, int size, int echo)
{
	char ch = 0;
	int i = 0;
	int n;

	if (!echo)
		cli_echo_disable();

	while (ch != '\n') {
		n = read(cli_input, &ch, 1);
		if (intr)
			break;
		if (n == -1 && (errno == EAGAIN || errno == EINTR))
			continue;
		if (n != 1)
			break;
		if (ch == '\n')
			break;
		if (i < size - 1)
			buf[i++] = ch;
	}
	if (intr)
		i = 0;
	buf[i] = '\0';

	if (!echo)
		cli_echo_restore();
	if (!intr && !echo)
		(void) write(cli_output, "\n", 1);
	return i;
}

static int
cli_write(const char* buf, int size)
{
	int i, len, pos, ret = 0;
	char *output, *p;

	output = xmalloc(4*size);
	for (p = output, i = 0; i < size; i++) {
		if (buf[i] == '\n' || buf[i] == '\r')
			*p++ = buf[i];
		else
			p = vis(p, buf[i], 0, 0);
	}
	len = p - output;

	for (pos = 0; pos < len; pos += ret) {
		ret = write(cli_output, output + pos, len - pos);
		if (ret == -1) {
			xfree(output);
			return -1;
		}
	}
	xfree(output);
	return 0;
}

/*
 * Presents a prompt and returns the response allocated with xmalloc().
 * Uses /dev/tty or stdin/out depending on arg.  Optionally disables echo
 * of response depending on arg.  Tries to ensure that no other userland
 * buffer is storing the response.
 */
char*
cli_read_passphrase(const char* prompt, int from_stdin, int echo_enable)
{
	char	buf[BUFSIZ];
	char*	p;

	if (!cli_open(from_stdin))
		fatal("Cannot read passphrase.");

	fflush(stdout);

	cli_write(prompt, strlen(prompt));
	cli_read(buf, sizeof buf, echo_enable);

	cli_close();

	p = xstrdup(buf);
	memset(buf, 0, sizeof(buf));
	return (p);
}

char*
cli_prompt(char* prompt, int echo_enable)
{
	return cli_read_passphrase(prompt, 0, echo_enable);
}

void
cli_mesg(char* mesg)
{
	cli_open(0);
	cli_write(mesg, strlen(mesg));
	cli_write("\n", strlen("\n"));
	cli_close();
	return;
}
@


1.14
log
@more strict prototypes.  raise warning level in Makefile.inc.  markus ok'ed
TODO; cleanup headers
@
text
@d1 1
a1 1
/*	$OpenBSD: cli.c,v 1.13 2001/05/06 21:23:31 markus Exp $	*/
d28 1
a28 1
RCSID("$OpenBSD: cli.c,v 1.13 2001/05/06 21:23:31 markus Exp $");
@


1.13
log
@cli_read() fails to catch SIGINT + overflow; from obdb@@zzlevo.net
@
text
@d1 1
a1 1
/*	$OpenBSD: cli.c,v 1.12 2001/05/06 17:52:07 mouring Exp $	*/
d28 1
a28 1
RCSID("$OpenBSD: cli.c,v 1.12 2001/05/06 17:52:07 mouring Exp $");
d84 1
a84 1
void
@


1.12
log
@Use const for 'prompt'.  Brought over from portable tree.
@
text
@d1 1
a1 1
/*	$OpenBSD: cli.c,v 1.11 2001/03/06 00:33:04 deraadt Exp $	*/
d28 1
a28 1
RCSID("$OpenBSD: cli.c,v 1.11 2001/03/06 00:33:04 deraadt Exp $");
d146 2
d152 1
a152 1
		if (ch == '\n' || intr != 0)
d154 1
a154 1
		if (i < size)
d157 2
@


1.11
log
@EINTR/EAGAIN handling is required in more cases
@
text
@d1 1
a1 1
/*	$OpenBSD: cli.c,v 1.10 2001/03/01 03:38:33 deraadt Exp $	*/
d28 1
a28 1
RCSID("$OpenBSD: cli.c,v 1.10 2001/03/01 03:38:33 deraadt Exp $");
d165 1
a165 1
cli_write(char* buf, int size)
d197 1
a197 1
cli_read_passphrase(char* prompt, int from_stdin, int echo_enable)
@


1.11.2.1
log
@Pull in OpenSSH-2.9.9
@
text
@d1 1
a1 1
/*	$OpenBSD: cli.c,v 1.11 2001/03/06 00:33:04 deraadt Exp $	*/
d28 1
a28 1
RCSID("$OpenBSD: cli.c,v 1.11 2001/03/06 00:33:04 deraadt Exp $");
@


1.10
log
@copyright notices on all source files
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.c,v 1.4 2001/02/28 17:52:54 deraadt Exp $	*/
d28 1
a28 1
RCSID("$OpenBSD: cli.c,v 1.9 2001/02/10 12:44:02 markus Exp $");
d139 1
d145 4
a148 1
		if (read(cli_input, &ch, 1) != 1)
@


1.9
log
@don't call vis() for \r
@
text
@d1 26
d28 1
a28 1
RCSID("$OpenBSD: cli.c,v 1.8 2001/02/08 19:30:51 itojun Exp $");
@


1.8
log
@sync with netbsd tree changes.
- more strict prototypes, include necessary headers
- use paths.h/pathnames.h decls
- size_t typecase to int -> u_long
@
text
@d2 1
a2 1
RCSID("$OpenBSD: cli.c,v 1.7 2001/02/04 15:32:23 stevesk Exp $");
d142 1
a142 1
		if (buf[i] == '\n')
@


1.7
log
@unexpand and remove end-of-line whitespace; ok markus@@
@
text
@d2 1
a2 1
RCSID("$OpenBSD: cli.c,v 1.6 2001/01/21 19:05:47 markus Exp $");
d6 1
d37 1
a37 1
		cli_input = cli_output = open("/dev/tty", O_RDWR);
d48 1
a48 1
cli_close()
d59 1
a59 1
intrcatch()
d65 1
a65 1
cli_echo_disable()
d88 1
a88 1
cli_echo_restore()
@


1.6
log
@split ssh.h and try to cleanup the #include mess. remove unnecessary #includes.
rename util.[ch] -> misc.[ch]
@
text
@d2 1
a2 1
RCSID("$OpenBSD: cli.c,v 1.5 2001/01/08 08:50:29 markus Exp $");
d141 5
a145 5
                if (buf[i] == '\n')
                        *p++ = buf[i];
                else
                        p = vis(p, buf[i], 0, 0);
        }
@


1.5
log
@yet another typo; bad markus
@
text
@d2 1
a2 1
RCSID("$OpenBSD: cli.c,v 1.4 2001/01/07 21:26:55 markus Exp $");
d5 2
a6 1
#include "ssh.h"
@


1.4
log
@typo
@
text
@d2 1
a2 1
RCSID("$OpenBSD: cli.c,v 1.3 2001/01/07 19:04:47 markus Exp $");
d154 1
a154 1
	xfree(output)
@


1.3
log
@missing free, stevesk@@pobox.com
@
text
@d2 1
a2 1
RCSID("$OpenBSD: cli.c,v 1.2 2000/10/16 09:38:44 djm Exp $");
d150 1
a150 1
			xfree(output)
@


1.2
log
@Add idents for files which lack them

Fix idents Id -> OpenBSD for the rest
@
text
@d2 1
a2 1
RCSID("$OpenBSD: cli.c,v 1.1 2000/10/11 20:14:39 markus Exp $");
d149 2
a150 1
		if (ret == -1)
d152 1
d154 1
@


1.2.2.1
log
@Pull in OpenSSH 2.5.0
@
text
@d2 1
a2 1
RCSID("$OpenBSD: cli.c,v 1.9 2001/02/10 12:44:02 markus Exp $");
d5 1
a5 3
#include "log.h"
#include "cli.h"

d35 1
a35 1
		cli_input = cli_output = open(_PATH_TTY, O_RDWR);
d46 1
a46 1
cli_close(void)
d57 1
a57 1
intrcatch(int sig)
d63 1
a63 1
cli_echo_disable(void)
d86 1
a86 1
cli_echo_restore(void)
d140 5
a144 5
		if (buf[i] == '\n' || buf[i] == '\r')
			*p++ = buf[i];
		else
			p = vis(p, buf[i], 0, 0);
	}
d149 1
a149 2
		if (ret == -1) {
			xfree(output);
a150 1
		}
a151 1
	xfree(output);
@


1.2.2.2
log
@Pull in OpenSSH-2.5.1
@
text
@@


1.2.2.3
log
@Pull in OpenSSH-2.5.2 for 2.8 branch.
@
text
@a0 26
/*	$OpenBSD: cli.c,v 1.11 2001/03/06 00:33:04 deraadt Exp $	*/

/*
 * Copyright (c) 2000 Markus Friedl.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

d2 1
a2 1
RCSID("$OpenBSD: cli.c,v 1.11 2001/03/06 00:33:04 deraadt Exp $");
a112 1
	int n;
d118 1
a118 4
		n = read(cli_input, &ch, 1);
		if (n == -1 && (errno == EAGAIN || errno == EINTR))
			continue;
		if (n != 1)
@


1.2.2.4
log
@Pull in OpenSSH-2.9 to 2.8 branch.
@
text
@@


1.2.2.5
log
@Pull in OpenSSH 2.9.9 to the 2.8 branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: cli.c,v 1.2.2.4 2001/05/07 21:09:28 jason Exp $	*/
d28 1
a28 1
RCSID("$OpenBSD: cli.c,v 1.2.2.4 2001/05/07 21:09:28 jason Exp $");
@


1.2.4.1
log
@openssh-2.3.0 (again) for 2.7 branch
@
text
@d2 1
a2 1
RCSID("$OpenBSD: cli.c,v 1.2 2000/10/16 09:38:44 djm Exp $");
@


1.2.4.2
log
@OpenSSH-2.5.1 for 2.7 patch branch
@
text
@d2 1
a2 1
RCSID("$OpenBSD: cli.c,v 1.9 2001/02/10 12:44:02 markus Exp $");
d5 1
a5 3
#include "log.h"
#include "cli.h"

d35 1
a35 1
		cli_input = cli_output = open(_PATH_TTY, O_RDWR);
d46 1
a46 1
cli_close(void)
d57 1
a57 1
intrcatch(int sig)
d63 1
a63 1
cli_echo_disable(void)
d86 1
a86 1
cli_echo_restore(void)
d140 5
a144 5
		if (buf[i] == '\n' || buf[i] == '\r')
			*p++ = buf[i];
		else
			p = vis(p, buf[i], 0, 0);
	}
d149 1
a149 2
		if (ret == -1) {
			xfree(output);
a150 1
		}
a151 1
	xfree(output);
@


1.2.4.3
log
@Pull in OpenSSH-2.5.2 for 2.7 branch.
@
text
@a0 26
/*	$OpenBSD: cli.c,v 1.11 2001/03/06 00:33:04 deraadt Exp $	*/

/*
 * Copyright (c) 2000 Markus Friedl.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

d2 1
a2 1
RCSID("$OpenBSD: cli.c,v 1.11 2001/03/06 00:33:04 deraadt Exp $");
a112 1
	int n;
d118 1
a118 4
		n = read(cli_input, &ch, 1);
		if (n == -1 && (errno == EAGAIN || errno == EINTR))
			continue;
		if (n != 1)
@


1.1
log
@add support for s/key (kbd-interactive) to ssh2, based on work by mkiernan@@avantgo.com and me
@
text
@d2 1
a2 1
RCSID("$Id$");
@

