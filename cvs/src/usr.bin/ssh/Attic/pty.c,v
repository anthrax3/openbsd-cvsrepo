head	1.23;
access;
symbols
	OPENBSD_2_8:1.16.0.2
	OPENBSD_2_8_BASE:1.16
	OPENBSD_2_7:1.13.0.2
	OPENBSD_2_7_BASE:1.13
	OPENBSD_2_6:1.5.0.2
	OPENBSD_2_6_BASE:1.5;
locks; strict;
comment	@ * @;


1.23
date	2001.03.04.01.46.29;	author djm;	state dead;
branches;
next	1.22;

1.22
date	2001.02.08.19.30.52;	author itojun;	state Exp;
branches;
next	1.21;

1.21
date	2001.02.04.15.32.24;	author stevesk;	state Exp;
branches;
next	1.20;

1.20
date	2001.01.21.19.05.53;	author markus;	state Exp;
branches;
next	1.19;

1.19
date	2000.12.20.20.00.34;	author markus;	state Exp;
branches;
next	1.18;

1.18
date	2000.12.13.06.36.05;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2000.12.12.22.50.21;	author ho;	state Exp;
branches;
next	1.16;

1.16
date	2000.09.07.21.13.37;	author markus;	state Exp;
branches
	1.16.2.1;
next	1.15;

1.15
date	2000.09.07.20.27.52;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2000.06.20.01.39.43;	author markus;	state Exp;
branches;
next	1.13;

1.13
date	2000.04.14.10.30.32;	author markus;	state Exp;
branches
	1.13.2.1;
next	1.12;

1.12
date	2000.02.15.16.52.58;	author markus;	state Exp;
branches;
next	1.11;

1.11
date	99.12.11.09.35.46;	author markus;	state Exp;
branches;
next	1.10;

1.10
date	99.12.09.00.24.03;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	99.12.06.12.10.12;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	99.11.24.19.53.48;	author markus;	state Exp;
branches;
next	1.7;

1.7
date	99.11.24.00.26.02;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	99.11.23.22.25.54;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	99.10.16.20.57.52;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	99.09.30.05.19.57;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	99.09.30.05.03.05;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.21.15.54;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	99.09.26.20.53.36;	author deraadt;	state Exp;
branches;
next	;

1.13.2.1
date	2000.09.01.18.23.21;	author jason;	state Exp;
branches;
next	1.13.2.2;

1.13.2.2
date	2000.11.08.21.31.03;	author jason;	state Exp;
branches;
next	1.13.2.3;

1.13.2.3
date	2001.03.12.15.44.12;	author jason;	state Exp;
branches;
next	1.13.2.4;

1.13.2.4
date	2001.03.21.18.52.56;	author jason;	state dead;
branches;
next	;

1.16.2.1
date	2001.02.16.20.13.09;	author jason;	state Exp;
branches;
next	1.16.2.2;

1.16.2.2
date	2001.02.19.17.19.11;	author jason;	state Exp;
branches;
next	1.16.2.3;

1.16.2.3
date	2001.03.21.19.46.27;	author jason;	state dead;
branches;
next	;


desc
@@


1.23
log
@Rename pty.[ch] -> sshpty.[ch] and login.[ch] to sshlogin.[ch] to avoid
header conflicts in portable; ok markus@@
@
text
@/*
 * Author: Tatu Ylonen <ylo@@cs.hut.fi>
 * Copyright (c) 1995 Tatu Ylonen <ylo@@cs.hut.fi>, Espoo, Finland
 *                    All rights reserved
 * Allocating a pseudo-terminal, and making it the controlling tty.
 *
 * As far as I am concerned, the code I have written for this software
 * can be used freely for any purpose.  Any derived versions of this
 * software must be clearly marked as such, and if the derived work is
 * incompatible with the protocol description in the RFC file, it must be
 * called by a name other than "ssh" or "Secure Shell".
 */

#include "includes.h"
RCSID("$OpenBSD: pty.c,v 1.22 2001/02/08 19:30:52 itojun Exp $");

#include <util.h>
#include "pty.h"
#include "log.h"

/* Pty allocated with _getpty gets broken if we do I_PUSH:es to it. */
#if defined(HAVE__GETPTY) || defined(HAVE_OPENPTY)
#undef HAVE_DEV_PTMX
#endif

#ifndef O_NOCTTY
#define O_NOCTTY 0
#endif

/*
 * Allocates and opens a pty.  Returns 0 if no pty could be allocated, or
 * nonzero if a pty was successfully allocated.  On success, open file
 * descriptors for the pty and tty sides and the name of the tty side are
 * returned (the buffer must be able to hold at least 64 characters).
 */

int
pty_allocate(int *ptyfd, int *ttyfd, char *namebuf, int namebuflen)
{
#if defined(HAVE_OPENPTY) || defined(BSD4_4)
	/* openpty(3) exists in OSF/1 and some other os'es */
	char buf[64];
	int i;

	i = openpty(ptyfd, ttyfd, buf, NULL, NULL);
	if (i < 0) {
		error("openpty: %.100s", strerror(errno));
		return 0;
	}
	strlcpy(namebuf, buf, namebuflen);	/* possible truncation */
	return 1;
#else /* HAVE_OPENPTY */
#ifdef HAVE__GETPTY
	/*
	 * _getpty(3) exists in SGI Irix 4.x, 5.x & 6.x -- it generates more
	 * pty's automagically when needed
	 */
	char *slave;

	slave = _getpty(ptyfd, O_RDWR, 0622, 0);
	if (slave == NULL) {
		error("_getpty: %.100s", strerror(errno));
		return 0;
	}
	strlcpy(namebuf, slave, namebuflen);
	/* Open the slave side. */
	*ttyfd = open(namebuf, O_RDWR | O_NOCTTY);
	if (*ttyfd < 0) {
		error("%.200s: %.100s", namebuf, strerror(errno));
		close(*ptyfd);
		return 0;
	}
	return 1;
#else /* HAVE__GETPTY */
#ifdef HAVE_DEV_PTMX
	/*
	 * This code is used e.g. on Solaris 2.x.  (Note that Solaris 2.3
	 * also has bsd-style ptys, but they simply do not work.)
	 */
	int ptm;
	char *pts;

	ptm = open("/dev/ptmx", O_RDWR | O_NOCTTY);
	if (ptm < 0) {
		error("/dev/ptmx: %.100s", strerror(errno));
		return 0;
	}
	if (grantpt(ptm) < 0) {
		error("grantpt: %.100s", strerror(errno));
		return 0;
	}
	if (unlockpt(ptm) < 0) {
		error("unlockpt: %.100s", strerror(errno));
		return 0;
	}
	pts = ptsname(ptm);
	if (pts == NULL)
		error("Slave pty side name could not be obtained.");
	strlcpy(namebuf, pts, namebuflen);
	*ptyfd = ptm;

	/* Open the slave side. */
	*ttyfd = open(namebuf, O_RDWR | O_NOCTTY);
	if (*ttyfd < 0) {
		error("%.100s: %.100s", namebuf, strerror(errno));
		close(*ptyfd);
		return 0;
	}
	/* Push the appropriate streams modules, as described in Solaris pts(7). */
	if (ioctl(*ttyfd, I_PUSH, "ptem") < 0)
		error("ioctl I_PUSH ptem: %.100s", strerror(errno));
	if (ioctl(*ttyfd, I_PUSH, "ldterm") < 0)
		error("ioctl I_PUSH ldterm: %.100s", strerror(errno));
	if (ioctl(*ttyfd, I_PUSH, "ttcompat") < 0)
		error("ioctl I_PUSH ttcompat: %.100s", strerror(errno));
	return 1;
#else /* HAVE_DEV_PTMX */
#ifdef HAVE_DEV_PTS_AND_PTC
	/* AIX-style pty code. */
	const char *name;

	*ptyfd = open("/dev/ptc", O_RDWR | O_NOCTTY);
	if (*ptyfd < 0) {
		error("Could not open /dev/ptc: %.100s", strerror(errno));
		return 0;
	}
	name = ttyname(*ptyfd);
	if (!name)
		fatal("Open of /dev/ptc returns device for which ttyname fails.");
	strlcpy(namebuf, name, namebuflen);
	*ttyfd = open(name, O_RDWR | O_NOCTTY);
	if (*ttyfd < 0) {
		error("Could not open pty slave side %.100s: %.100s",
		      name, strerror(errno));
		close(*ptyfd);
		return 0;
	}
	return 1;
#else /* HAVE_DEV_PTS_AND_PTC */
	/* BSD-style pty code. */
	char buf[64];
	int i;
	const char *ptymajors = "pqrstuvwxyzabcdefghijklmnoABCDEFGHIJKLMNOPQRSTUVWXYZ";
	const char *ptyminors = "0123456789abcdef";
	int num_minors = strlen(ptyminors);
	int num_ptys = strlen(ptymajors) * num_minors;

	for (i = 0; i < num_ptys; i++) {
		snprintf(buf, sizeof buf, "/dev/pty%c%c", ptymajors[i / num_minors],
			 ptyminors[i % num_minors]);
		*ptyfd = open(buf, O_RDWR | O_NOCTTY);
		if (*ptyfd < 0)
			continue;
		snprintf(namebuf, namebuflen, "/dev/tty%c%c",
		    ptymajors[i / num_minors], ptyminors[i % num_minors]);

		/* Open the slave side. */
		*ttyfd = open(namebuf, O_RDWR | O_NOCTTY);
		if (*ttyfd < 0) {
			error("%.100s: %.100s", namebuf, strerror(errno));
			close(*ptyfd);
			return 0;
		}
		return 1;
	}
	return 0;
#endif /* HAVE_DEV_PTS_AND_PTC */
#endif /* HAVE_DEV_PTMX */
#endif /* HAVE__GETPTY */
#endif /* HAVE_OPENPTY */
}

/* Releases the tty.  Its ownership is returned to root, and permissions to 0666. */

void
pty_release(const char *ttyname)
{
	if (chown(ttyname, (uid_t) 0, (gid_t) 0) < 0)
		error("chown %.100s 0 0 failed: %.100s", ttyname, strerror(errno));
	if (chmod(ttyname, (mode_t) 0666) < 0)
		error("chmod %.100s 0666 failed: %.100s", ttyname, strerror(errno));
}

/* Makes the tty the processes controlling tty and sets it to sane modes. */

void
pty_make_controlling_tty(int *ttyfd, const char *ttyname)
{
	int fd;

	/* First disconnect from the old controlling tty. */
#ifdef TIOCNOTTY
	fd = open(_PATH_TTY, O_RDWR | O_NOCTTY);
	if (fd >= 0) {
		(void) ioctl(fd, TIOCNOTTY, NULL);
		close(fd);
	}
#endif /* TIOCNOTTY */
	if (setsid() < 0)
		error("setsid: %.100s", strerror(errno));

	/*
	 * Verify that we are successfully disconnected from the controlling
	 * tty.
	 */
	fd = open(_PATH_TTY, O_RDWR | O_NOCTTY);
	if (fd >= 0) {
		error("Failed to disconnect from controlling tty.");
		close(fd);
	}
	/* Make it our controlling tty. */
#ifdef TIOCSCTTY
	debug("Setting controlling tty using TIOCSCTTY.");
	if (ioctl(*ttyfd, TIOCSCTTY, NULL) < 0)
		error("ioctl(TIOCSCTTY): %.100s", strerror(errno));
#endif /* TIOCSCTTY */
	fd = open(ttyname, O_RDWR);
	if (fd < 0)
		error("%.100s: %.100s", ttyname, strerror(errno));
	else
		close(fd);

	/* Verify that we now have a controlling tty. */
	fd = open(_PATH_TTY, O_WRONLY);
	if (fd < 0)
		error("open /dev/tty failed - could not set controlling tty: %.100s",
		      strerror(errno));
	else {
		close(fd);
	}
}

/* Changes the window size associated with the pty. */

void
pty_change_window_size(int ptyfd, int row, int col,
		       int xpixel, int ypixel)
{
	struct winsize w;
	w.ws_row = row;
	w.ws_col = col;
	w.ws_xpixel = xpixel;
	w.ws_ypixel = ypixel;
	(void) ioctl(ptyfd, TIOCSWINSZ, &w);
}

void
pty_setowner(struct passwd *pw, const char *ttyname)
{
	struct group *grp;
	gid_t gid;
	mode_t mode;
	struct stat st;

	/* Determine the group to make the owner of the tty. */
	grp = getgrnam("tty");
	if (grp) {
		gid = grp->gr_gid;
		mode = S_IRUSR | S_IWUSR | S_IWGRP;
	} else {
		gid = pw->pw_gid;
		mode = S_IRUSR | S_IWUSR | S_IWGRP | S_IWOTH;
	}

	/*
	 * Change owner and mode of the tty as required.
	 * Warn but continue if filesystem is read-only and the uids match.
	 */
	if (stat(ttyname, &st))
		fatal("stat(%.100s) failed: %.100s", ttyname,
		    strerror(errno));

	if (st.st_uid != pw->pw_uid || st.st_gid != gid) {
		if (chown(ttyname, pw->pw_uid, gid) < 0) {
			if (errno == EROFS && st.st_uid == pw->pw_uid)
				error("chown(%.100s, %d, %d) failed: %.100s",
				      ttyname, pw->pw_uid, gid,
				      strerror(errno));
			else
				fatal("chown(%.100s, %d, %d) failed: %.100s",
				      ttyname, pw->pw_uid, gid,
				      strerror(errno));
		}
	}

	if ((st.st_mode & (S_IRWXU|S_IRWXG|S_IRWXO)) != mode) {
		if (chmod(ttyname, mode) < 0) {
			if (errno == EROFS &&
			    (st.st_mode & (S_IRGRP | S_IROTH)) == 0)
				error("chmod(%.100s, 0%o) failed: %.100s",
				      ttyname, mode, strerror(errno));
			else
				fatal("chmod(%.100s, 0%o) failed: %.100s",
				      ttyname, mode, strerror(errno));
		}
	}
}
@


1.22
log
@sync with netbsd tree changes.
- more strict prototypes, include necessary headers
- use paths.h/pathnames.h decls
- size_t typecase to int -> u_long
@
text
@d15 1
a15 1
RCSID("$OpenBSD: pty.c,v 1.21 2001/02/04 15:32:24 stevesk Exp $");
@


1.21
log
@unexpand and remove end-of-line whitespace; ok markus@@
@
text
@d15 1
a15 1
RCSID("$OpenBSD: pty.c,v 1.20 2001/01/21 19:05:53 markus Exp $");
d193 1
a193 1
	fd = open("/dev/tty", O_RDWR | O_NOCTTY);
d206 1
a206 1
	fd = open("/dev/tty", O_RDWR | O_NOCTTY);
d224 1
a224 1
	fd = open("/dev/tty", O_WRONLY);
@


1.20
log
@split ssh.h and try to cleanup the #include mess. remove unnecessary #includes.
rename util.[ch] -> misc.[ch]
@
text
@d15 1
a15 1
RCSID("$OpenBSD: pty.c,v 1.19 2000/12/20 20:00:34 markus Exp $");
d277 1
a277 1
				      ttyname, pw->pw_uid, gid, 
d281 1
a281 1
				      ttyname, pw->pw_uid, gid, 
@


1.19
log
@remove comments about HPUX and call error() if ioctl fails; from stevesk@@pobox.com
@
text
@d15 1
a15 1
RCSID("$OpenBSD: pty.c,v 1.18 2000/12/13 06:36:05 deraadt Exp $");
d19 1
a19 1
#include "ssh.h"
@


1.18
log
@KNF
@
text
@d15 1
a15 1
RCSID("$OpenBSD: pty.c,v 1.17 2000/12/12 22:50:21 ho Exp $");
d214 2
a215 6
	/*
	 * We ignore errors from this, because HPSUX defines TIOCSCTTY, but
	 * returns EINVAL with these arguments, and there is absolutely no
	 * documentation.
	 */
	ioctl(*ttyfd, TIOCSCTTY, NULL);
@


1.17
log
@When failing to set tty owner and mode on a read-only filesystem, don't
abort if the tty already has correct owner and reasonably sane modes.
Example; permit 'root' to login to a firewall with read-only root fs.
(markus@@ ok)
@
text
@d15 1
a15 1
RCSID("$OpenBSD: pty.c,v 1.16 2000/09/07 21:13:37 markus Exp $");
d273 1
a273 1
	if (stat (ttyname, &st))
d278 2
a279 2
		if (chown (ttyname, pw->pw_uid, gid) < 0) {
			if ((errno == EROFS) && (st.st_uid == pw->pw_uid))
d291 3
a293 3
		if (chmod (ttyname, mode) < 0) {
			if ((errno == EROFS) &&
			    ((st.st_mode & (S_IRGRP | S_IROTH)) == 0))
@


1.16
log
@some more Copyright fixes
@
text
@d15 1
a15 1
RCSID("$OpenBSD: pty.c,v 1.15 2000/09/07 20:27:52 deraadt Exp $");
d257 1
d269 32
a300 7
	/* Change ownership of the tty. */
	if (chown(ttyname, pw->pw_uid, gid) < 0)
		fatal("chown(%.100s, %d, %d) failed: %.100s",
		    ttyname, pw->pw_uid, gid, strerror(errno));
	if (chmod(ttyname, mode) < 0)
		fatal("chmod(%.100s, 0%o) failed: %.100s",
		    ttyname, mode, strerror(errno));
@


1.16.2.1
log
@Pull in OpenSSH 2.5.0
@
text
@d15 1
a15 1
RCSID("$OpenBSD: pty.c,v 1.22 2001/02/08 19:30:52 itojun Exp $");
d19 1
a19 1
#include "log.h"
d193 1
a193 1
	fd = open(_PATH_TTY, O_RDWR | O_NOCTTY);
d206 1
a206 1
	fd = open(_PATH_TTY, O_RDWR | O_NOCTTY);
d214 6
a219 2
	if (ioctl(*ttyfd, TIOCSCTTY, NULL) < 0)
		error("ioctl(TIOCSCTTY): %.100s", strerror(errno));
d228 1
a228 1
	fd = open(_PATH_TTY, O_WRONLY);
a256 1
	struct stat st;
d268 7
a274 32
	/*
	 * Change owner and mode of the tty as required.
	 * Warn but continue if filesystem is read-only and the uids match.
	 */
	if (stat(ttyname, &st))
		fatal("stat(%.100s) failed: %.100s", ttyname,
		    strerror(errno));

	if (st.st_uid != pw->pw_uid || st.st_gid != gid) {
		if (chown(ttyname, pw->pw_uid, gid) < 0) {
			if (errno == EROFS && st.st_uid == pw->pw_uid)
				error("chown(%.100s, %d, %d) failed: %.100s",
				      ttyname, pw->pw_uid, gid,
				      strerror(errno));
			else
				fatal("chown(%.100s, %d, %d) failed: %.100s",
				      ttyname, pw->pw_uid, gid,
				      strerror(errno));
		}
	}

	if ((st.st_mode & (S_IRWXU|S_IRWXG|S_IRWXO)) != mode) {
		if (chmod(ttyname, mode) < 0) {
			if (errno == EROFS &&
			    (st.st_mode & (S_IRGRP | S_IROTH)) == 0)
				error("chmod(%.100s, 0%o) failed: %.100s",
				      ttyname, mode, strerror(errno));
			else
				fatal("chmod(%.100s, 0%o) failed: %.100s",
				      ttyname, mode, strerror(errno));
		}
	}
@


1.16.2.2
log
@Pull in OpenSSH-2.5.1
@
text
@@


1.16.2.3
log
@Pull in OpenSSH-2.5.2 for 2.8 branch.
@
text
@d15 1
a15 1
RCSID("$OpenBSD: pty.c,v 1.16.2.2 2001/02/19 17:19:11 jason Exp $");
@


1.15
log
@cleanup copyright notices on all files.  I have attempted to be accurate with
the details.  everything is now under Tatu's licence (which I copied from his
readme), and/or the core-sdi bsd-ish thing for deattack, or various openbsd
developers under a 2-term bsd licence.  We're not changing any rules, just
being accurate.
@
text
@a11 23
 *
 *
 * Copyright (c) 2000 Markus Friedl.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
d15 1
a15 1
RCSID("$OpenBSD: pty.c,v 1.14 2000/06/20 01:39:43 markus Exp $");
@


1.14
log
@OpenBSD tag
@
text
@a1 3
 *
 * pty.c
 *
a2 1
 *
a4 3
 *
 * Created: Fri Mar 17 04:37:25 1995 ylo
 *
d7 28
d38 1
a38 1
RCSID("$OpenBSD: pty.c,v 1.13 2000/04/14 10:30:32 markus Exp $");
@


1.13
log
@whitespace cleanup
@
text
@d17 1
a17 1
RCSID("$Id: pty.c,v 1.12 2000/02/15 16:52:58 markus Exp $");
@


1.13.2.1
log
@Pull in the rest of openssh-2.2.0 to 2.7 branch (luvin' cvs...)
@
text
@d17 1
a17 1
RCSID("$OpenBSD: pty.c,v 1.14 2000/06/20 01:39:43 markus Exp $");
@


1.13.2.2
log
@openssh-2.3.0 (again) for 2.7 branch
@
text
@d2 3
d6 1
d9 3
a13 5
 * As far as I am concerned, the code I have written for this software
 * can be used freely for any purpose.  Any derived versions of this
 * software must be clearly marked as such, and if the derived work is
 * incompatible with the protocol description in the RFC file, it must be
 * called by a name other than "ssh" or "Secure Shell".
d17 1
a17 1
RCSID("$OpenBSD: pty.c,v 1.16 2000/09/07 21:13:37 markus Exp $");
@


1.13.2.3
log
@OpenSSH-2.5.1 for 2.7 patch branch
@
text
@d15 1
a15 1
RCSID("$OpenBSD: pty.c,v 1.22 2001/02/08 19:30:52 itojun Exp $");
d19 1
a19 1
#include "log.h"
d193 1
a193 1
	fd = open(_PATH_TTY, O_RDWR | O_NOCTTY);
d206 1
a206 1
	fd = open(_PATH_TTY, O_RDWR | O_NOCTTY);
d214 6
a219 2
	if (ioctl(*ttyfd, TIOCSCTTY, NULL) < 0)
		error("ioctl(TIOCSCTTY): %.100s", strerror(errno));
d228 1
a228 1
	fd = open(_PATH_TTY, O_WRONLY);
a256 1
	struct stat st;
d268 7
a274 32
	/*
	 * Change owner and mode of the tty as required.
	 * Warn but continue if filesystem is read-only and the uids match.
	 */
	if (stat(ttyname, &st))
		fatal("stat(%.100s) failed: %.100s", ttyname,
		    strerror(errno));

	if (st.st_uid != pw->pw_uid || st.st_gid != gid) {
		if (chown(ttyname, pw->pw_uid, gid) < 0) {
			if (errno == EROFS && st.st_uid == pw->pw_uid)
				error("chown(%.100s, %d, %d) failed: %.100s",
				      ttyname, pw->pw_uid, gid,
				      strerror(errno));
			else
				fatal("chown(%.100s, %d, %d) failed: %.100s",
				      ttyname, pw->pw_uid, gid,
				      strerror(errno));
		}
	}

	if ((st.st_mode & (S_IRWXU|S_IRWXG|S_IRWXO)) != mode) {
		if (chmod(ttyname, mode) < 0) {
			if (errno == EROFS &&
			    (st.st_mode & (S_IRGRP | S_IROTH)) == 0)
				error("chmod(%.100s, 0%o) failed: %.100s",
				      ttyname, mode, strerror(errno));
			else
				fatal("chmod(%.100s, 0%o) failed: %.100s",
				      ttyname, mode, strerror(errno));
		}
	}
@


1.13.2.4
log
@Pull in OpenSSH-2.5.2 for 2.7 branch.
@
text
@d15 1
a15 1
RCSID("$OpenBSD: pty.c,v 1.13.2.3 2001/03/12 15:44:12 jason Exp $");
@


1.12
log
@register cleanup for pty earlier. move code for pty-owner handling to pty.c
ok provos@@, dugsong@@
@
text
@d2 1
a2 1
 * 
d4 1
a4 1
 * 
d6 1
a6 1
 * 
d9 1
a9 1
 * 
d11 1
a11 1
 * 
d13 1
a13 1
 * 
d17 1
a17 1
RCSID("$Id: pty.c,v 1.11 1999/12/11 09:35:46 markus Exp $");
d39 1
a39 1
int 
d177 1
a177 1
void 
d188 1
a188 1
void 
d241 1
a241 1
void 
@


1.11
log
@namebuflen not sizeof namebuflen; bnd@@ep-ag.com via djm@@mindrot.org
@
text
@d17 1
a17 1
RCSID("$Id: pty.c,v 1.10 1999/12/09 00:24:03 deraadt Exp $");
d181 1
a181 1
		debug("chown %.100s 0 0 failed: %.100s", ttyname, strerror(errno));
d183 1
a183 1
		debug("chmod %.100s 0666 failed: %.100s", ttyname, strerror(errno));
d251 26
@


1.10
log
@fix proto; markus
@
text
@d17 1
a17 1
RCSID("$Id: pty.c,v 1.9 1999/12/06 12:10:12 deraadt Exp $");
d156 1
a156 1
		snprintf(namebuf, sizeof namebuflen, "/dev/tty%c%c",
@


1.9
log
@use openpty() if it exists (it does on BSD4_4)
@
text
@d17 1
a17 1
RCSID("$Id: pty.c,v 1.8 1999/11/24 19:53:48 markus Exp $");
d19 1
@


1.8
log
@KNF, final part 3
@
text
@d17 1
a17 1
RCSID("$Id: pty.c,v 1.7 1999/11/24 00:26:02 deraadt Exp $");
d39 1
a39 1
pty_allocate(int *ptyfd, int *ttyfd, char *namebuf)
d41 1
a41 1
#ifdef HAVE_OPENPTY
d43 1
d46 1
a46 1
	i = openpty(ptyfd, ttyfd, namebuf, NULL, NULL);
d51 1
d66 1
a66 1
	strcpy(namebuf, slave);
d100 1
a100 1
	strcpy(namebuf, pts);
d131 1
a131 1
	strcpy(namebuf, name);
d155 2
a156 2
		snprintf(namebuf, sizeof buf, "/dev/tty%c%c", ptymajors[i / num_minors],
			 ptyminors[i % num_minors]);
@


1.7
log
@much more KNF
@
text
@d17 1
a17 1
RCSID("$Id: pty.c,v 1.6 1999/11/23 22:25:54 markus Exp $");
d31 6
a36 4
/* Allocates and opens a pty.  Returns 0 if no pty could be allocated,
   or nonzero if a pty was successfully allocated.  On success, open file
   descriptors for the pty and tty sides and the name of the tty side are
   returned (the buffer must be able to hold at least 64 characters). */
d53 4
a56 2
	/* _getpty(3) exists in SGI Irix 4.x, 5.x & 6.x -- it generates
	   more pty's automagically when needed */
d75 4
a78 2
	/* This code is used e.g. on Solaris 2.x.  (Note that Solaris 2.3
	   also has bsd-style ptys, but they simply do not work.) */
d108 1
a108 2
	/* Push the appropriate streams modules, as described in Solaris
	   pts(7). */
d142 1
a142 2
	const char *ptymajors =
	"pqrstuvwxyzabcdefghijklmnoABCDEFGHIJKLMNOPQRSTUVWXYZ";
d201 4
a204 2
	/* Verify that we are successfully disconnected from the
	   controlling tty. */
d213 5
a217 3
	/* We ignore errors from this, because HPSUX defines TIOCSCTTY,
	   but returns EINVAL with these arguments, and there is
	   absolutely no documentation. */
@


1.6
log
@KNF part 1
@
text
@d2 13
a14 13

pty.c

Author: Tatu Ylonen <ylo@@cs.hut.fi>

Copyright (c) 1995 Tatu Ylonen <ylo@@cs.hut.fi>, Espoo, Finland
                   All rights reserved

Created: Fri Mar 17 04:37:25 1995 ylo

Allocating a pseudo-terminal, and making it the controlling tty.

*/
d17 1
a17 1
RCSID("$Id: pty.c,v 1.5 1999/10/16 20:57:52 deraadt Exp $");
@


1.5
log
@snprintf
@
text
@d17 1
a17 1
RCSID("$Id: pty.c,v 1.4 1999/09/30 05:19:57 deraadt Exp $");
d33 1
a33 1
   descriptors for the pty and tty sides and the name of the tty side are 
d36 2
a37 1
int pty_allocate(int *ptyfd, int *ttyfd, char *namebuf)
d40 2
d43 6
a48 14
  /* openpty(3) exists in OSF/1 and some other os'es */

  int i;

  i = openpty(ptyfd, ttyfd, namebuf, NULL, NULL);

  if (i < 0) 
    {
      error("openpty: %.100s", strerror(errno));
      return 0;
    }
  
  return 1;

d51 18
a68 23

  /* _getpty(3) exists in SGI Irix 4.x, 5.x & 6.x -- it generates more
     pty's automagically when needed */

  char *slave;

  slave = _getpty(ptyfd, O_RDWR, 0622, 0);
  if (slave == NULL)
    {
      error("_getpty: %.100s", strerror(errno));
      return 0;
    }
  strcpy(namebuf, slave);
  /* Open the slave side. */
  *ttyfd = open(namebuf, O_RDWR|O_NOCTTY);
  if (*ttyfd < 0)
    {
      error("%.200s: %.100s", namebuf, strerror(errno));
      close(*ptyfd);
      return 0;
    }
  return 1;

d71 40
a110 45
  /* This code is used e.g. on Solaris 2.x.  (Note that Solaris 2.3 also has
     bsd-style ptys, but they simply do not work.) */

  int ptm;
  char *pts;
  
  ptm = open("/dev/ptmx", O_RDWR|O_NOCTTY);
  if (ptm < 0)
    {
      error("/dev/ptmx: %.100s", strerror(errno));
      return 0;
    }
  if (grantpt(ptm) < 0)
    {
      error("grantpt: %.100s", strerror(errno));
      return 0;
    }
  if (unlockpt(ptm) < 0)
    {
      error("unlockpt: %.100s", strerror(errno));
      return 0;
    }
  pts = ptsname(ptm);
  if (pts == NULL)
    error("Slave pty side name could not be obtained.");
  strcpy(namebuf, pts);
  *ptyfd = ptm;

  /* Open the slave side. */
  *ttyfd = open(namebuf, O_RDWR|O_NOCTTY);
  if (*ttyfd < 0)
    {
      error("%.100s: %.100s", namebuf, strerror(errno));
      close(*ptyfd);
      return 0;
    }
  /* Push the appropriate streams modules, as described in Solaris pts(7). */
  if (ioctl(*ttyfd, I_PUSH, "ptem") < 0)
    error("ioctl I_PUSH ptem: %.100s", strerror(errno));
  if (ioctl(*ttyfd, I_PUSH, "ldterm") < 0)
    error("ioctl I_PUSH ldterm: %.100s", strerror(errno));
  if (ioctl(*ttyfd, I_PUSH, "ttcompat") < 0)
    error("ioctl I_PUSH ttcompat: %.100s", strerror(errno));
  return 1;

d113 2
d116 17
a132 24
  /* AIX-style pty code. */

  const char *name;

  *ptyfd = open("/dev/ptc", O_RDWR|O_NOCTTY);
  if (*ptyfd < 0)
    {
      error("Could not open /dev/ptc: %.100s", strerror(errno));
      return 0;
    }
  name = ttyname(*ptyfd);
  if (!name)
    fatal("Open of /dev/ptc returns device for which ttyname fails.");
  strcpy(namebuf, name);
  *ttyfd = open(name, O_RDWR|O_NOCTTY);
  if (*ttyfd < 0)
    {
      error("Could not open pty slave side %.100s: %.100s", 
	    name, strerror(errno));
      close(*ptyfd);
      return 0;
    }
  return 1;

d134 28
a161 31
  /* BSD-style pty code. */

  char buf[64];
  int i;
  const char *ptymajors = 
    "pqrstuvwxyzabcdefghijklmnoABCDEFGHIJKLMNOPQRSTUVWXYZ";
  const char *ptyminors = "0123456789abcdef";
  int num_minors = strlen(ptyminors);
  int num_ptys = strlen(ptymajors) * num_minors;

  for (i = 0; i < num_ptys; i++)
    {
      snprintf(buf, sizeof buf, "/dev/pty%c%c", ptymajors[i / num_minors], 
	      ptyminors[i % num_minors]);
      *ptyfd = open(buf, O_RDWR|O_NOCTTY);
      if (*ptyfd < 0)
	continue;
      snprintf(namebuf, sizeof buf, "/dev/tty%c%c", ptymajors[i / num_minors], 
	      ptyminors[i % num_minors]);

      /* Open the slave side. */
      *ttyfd = open(namebuf, O_RDWR|O_NOCTTY);
      if (*ttyfd < 0)
	{
	  error("%.100s: %.100s", namebuf, strerror(errno));
	  close(*ptyfd);
	  return 0;
	}
      return 1;
    }
  return 0;
d168 1
a168 2
/* Releases the tty.  Its ownership is returned to root, and permissions to
   0666. */
d170 2
a171 1
void pty_release(const char *ttyname)
d173 4
a176 4
  if (chown(ttyname, (uid_t)0, (gid_t)0) < 0)
    debug("chown %.100s 0 0 failed: %.100s", ttyname, strerror(errno));
  if (chmod(ttyname, (mode_t)0666) < 0)
    debug("chmod %.100s 0666 failed: %.100s", ttyname, strerror(errno));
d181 2
a182 1
void pty_make_controlling_tty(int *ttyfd, const char *ttyname)
d184 1
a184 1
  int fd;
d186 1
a186 1
  /* First disconnect from the old controlling tty. */
d188 5
a192 6
  fd = open("/dev/tty", O_RDWR|O_NOCTTY);
  if (fd >= 0)
    {
      (void)ioctl(fd, TIOCNOTTY, NULL);
      close(fd);
    }
d194 2
a195 10
  if (setsid() < 0)
    error("setsid: %.100s", strerror(errno));
  
  /* Verify that we are successfully disconnected from the controlling tty. */
  fd = open("/dev/tty", O_RDWR|O_NOCTTY);
  if (fd >= 0)
    {
      error("Failed to disconnect from controlling tty.");
      close(fd);
    }
d197 8
a204 1
  /* Make it our controlling tty. */
d206 5
a210 4
  debug("Setting controlling tty using TIOCSCTTY.");
  /* We ignore errors from this, because HPSUX defines TIOCSCTTY, but returns
     EINVAL with these arguments, and there is absolutely no documentation. */
  ioctl(*ttyfd, TIOCSCTTY, NULL);
d212 14
a225 15
  fd = open(ttyname, O_RDWR);
  if (fd < 0)
    error("%.100s: %.100s", ttyname, strerror(errno));
  else
    close(fd);

  /* Verify that we now have a controlling tty. */
  fd = open("/dev/tty", O_WRONLY);
  if (fd < 0)
    error("open /dev/tty failed - could not set controlling tty: %.100s",
	  strerror(errno));
  else
    {
      close(fd);
    }
d230 3
a232 2
void pty_change_window_size(int ptyfd, int row, int col,
			    int xpixel, int ypixel)
d234 6
a239 6
  struct winsize w;
  w.ws_row = row;
  w.ws_col = col;
  w.ws_xpixel = xpixel;  
  w.ws_ypixel = ypixel;
  (void)ioctl(ptyfd, TIOCSWINSZ, &w);
a240 1

@


1.4
log
@cull, cull, cull
@
text
@d17 1
a17 1
RCSID("$Id: pty.c,v 1.3 1999/09/30 05:03:05 deraadt Exp $");
d166 1
a166 1
      sprintf(buf, "/dev/pty%c%c", ptymajors[i / num_minors], 
d171 1
a171 1
      sprintf(namebuf, "/dev/tty%c%c", ptymajors[i / num_minors], 
@


1.3
log
@cull more ancient garbage from pre-POSIX days
@
text
@d17 1
a17 1
RCSID("$Id: pty.c,v 1.2 1999/09/29 21:15:54 deraadt Exp $");
a26 6
#ifdef HAVE_DEV_PTMX
#include <sys/stream.h>
#include <stropts.h>
#include <sys/conf.h>
#endif /* HAVE_DEV_PTMX */

a248 11
#ifdef HAVE_VHANGUP
      signal(SIGHUP, SIG_IGN);
      vhangup();
      signal(SIGHUP, SIG_DFL);
      fd = open(ttyname, O_RDWR);
      if (fd == -1)
	error("pty_make_controlling_tty: reopening controlling tty after vhangup failed for %.100s",
	      ttyname);
      close(*ttyfd);
      *ttyfd = fd;
#endif /* HAVE_VHANGUP */
@


1.2
log
@we have setsid
@
text
@d17 1
a17 1
RCSID("$Id: pty.c,v 1.1 1999/09/26 20:53:36 deraadt Exp $");
a159 25
#ifdef CRAY
  char buf[64];
  int i;

  for (i = 0; i < 128; i++)
    {
      sprintf(buf, "/dev/pty/%03d", i);
      *ptyfd = open(buf, O_RDWR|O_NOCTTY);
      if (*ptyfd < 0)
	continue;
      sprintf(namebuf, "/dev/ttyp%03d", i);
      /* Open the slave side. */
      *ttyfd = open(namebuf, O_RDWR|O_NOCTTY);
      if (*ttyfd < 0)
	{
	  error("%.100s: %.100s", namebuf, strerror(errno));
	  close(*ptyfd);
	  return 0;
	}
      return 1;
    }
  return 0;

#else /* CRAY */  

a190 1
#endif /* CRAY */
@


1.1
log
@i bet a lot of people didn't know what ssh 1.2.16 had a nice license.
well, except for the patent issues.  someone in sweden (forget their
name at the moment) cleaned out most of the patented code, and now
this code removes rsa code.  when this is done, it will link against
libssl, but the work isn't completely done yet.  then we need to bring
this up to modern days, featurewise.
@
text
@d17 1
a17 1
RCSID("$Id: pty.c,v 1.2 1999/05/04 11:58:56 bg Exp $");
a248 4
#ifdef HAVE_SETSID
#ifdef ultrix
  setpgrp(0, 0);
#else /* ultrix */
a250 2
#endif /* ultrix */
#endif /* HAVE_SETSID */
@

