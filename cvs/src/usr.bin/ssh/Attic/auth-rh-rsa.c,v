head	1.46;
access;
symbols
	OPENBSD_6_0:1.45.0.4
	OPENBSD_6_0_BASE:1.45
	OPENBSD_5_9:1.44.0.8
	OPENBSD_5_9_BASE:1.44
	OPENBSD_5_8:1.44.0.6
	OPENBSD_5_8_BASE:1.44
	OPENBSD_5_7:1.44.0.2
	OPENBSD_5_7_BASE:1.44
	OPENBSD_5_6:1.44.0.4
	OPENBSD_5_6_BASE:1.44
	OPENBSD_5_5:1.43.0.20
	OPENBSD_5_5_BASE:1.43
	OPENBSD_5_4:1.43.0.16
	OPENBSD_5_4_BASE:1.43
	OPENBSD_5_3:1.43.0.14
	OPENBSD_5_3_BASE:1.43
	OPENBSD_5_2:1.43.0.12
	OPENBSD_5_2_BASE:1.43
	OPENBSD_5_1_BASE:1.43
	OPENBSD_5_1:1.43.0.10
	OPENBSD_5_0:1.43.0.8
	OPENBSD_5_0_BASE:1.43
	OPENBSD_4_9:1.43.0.6
	OPENBSD_4_9_BASE:1.43
	OPENBSD_4_8:1.43.0.4
	OPENBSD_4_8_BASE:1.43
	OPENBSD_4_7:1.43.0.2
	OPENBSD_4_7_BASE:1.43
	OPENBSD_4_6:1.42.0.16
	OPENBSD_4_6_BASE:1.42
	OPENBSD_4_5:1.42.0.12
	OPENBSD_4_5_BASE:1.42
	OPENBSD_4_4:1.42.0.10
	OPENBSD_4_4_BASE:1.42
	OPENBSD_4_3:1.42.0.8
	OPENBSD_4_3_BASE:1.42
	OPENBSD_4_2:1.42.0.6
	OPENBSD_4_2_BASE:1.42
	OPENBSD_4_1:1.42.0.2
	OPENBSD_4_1_BASE:1.42
	OPENBSD_4_0:1.42.0.4
	OPENBSD_4_0_BASE:1.42
	OPENBSD_3_9:1.38.0.4
	OPENBSD_3_9_BASE:1.38
	OPENBSD_3_8:1.38.0.2
	OPENBSD_3_8_BASE:1.38
	OPENBSD_3_7:1.37.0.6
	OPENBSD_3_7_BASE:1.37
	OPENBSD_3_6:1.37.0.4
	OPENBSD_3_6_BASE:1.37
	OPENBSD_3_5:1.37.0.2
	OPENBSD_3_5_BASE:1.37
	OPENBSD_3_4:1.36.0.2
	OPENBSD_3_4_BASE:1.36
	OPENBSD_3_3:1.34.0.6
	OPENBSD_3_3_BASE:1.34
	OPENBSD_3_2:1.34.0.4
	OPENBSD_3_2_BASE:1.34
	OPENBSD_3_1:1.34.0.2
	OPENBSD_3_1_BASE:1.34
	OPENBSD_3_0:1.25.0.2
	OPENBSD_3_0_BASE:1.25
	OPENBSD_2_9_BASE:1.23
	OPENBSD_2_9:1.23.0.2
	OPENBSD_2_8:1.17.0.2
	OPENBSD_2_8_BASE:1.17
	OPENBSD_2_7:1.13.0.2
	OPENBSD_2_7_BASE:1.13
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2;
locks; strict;
comment	@ * @;


1.46
date	2016.08.13.17.47.40;	author markus;	state dead;
branches;
next	1.45;
commitid	dl4RDERdJITM8DKC;

1.45
date	2016.03.07.19.02.43;	author djm;	state Exp;
branches;
next	1.44;
commitid	kr9hjdmg99uVnhW2;

1.44
date	2014.07.15.15.54.14;	author millert;	state Exp;
branches;
next	1.43;
commitid	z7plx8Gkj6l2sxem;

1.43
date	2010.03.04.10.36.03;	author djm;	state Exp;
branches;
next	1.42;

1.42
date	2006.08.03.03.34.41;	author deraadt;	state Exp;
branches;
next	1.41;

1.41
date	2006.07.06.16.03.53;	author stevesk;	state Exp;
branches;
next	1.40;

1.40
date	2006.03.25.13.17.01;	author djm;	state Exp;
branches;
next	1.39;

1.39
date	2006.03.19.18.51.18;	author deraadt;	state Exp;
branches;
next	1.38;

1.38
date	2005.07.17.07.17.54;	author djm;	state Exp;
branches
	1.38.2.1
	1.38.4.1;
next	1.37;

1.37
date	2003.11.04.08.54.09;	author djm;	state Exp;
branches
	1.37.4.1
	1.37.6.1;
next	1.36;

1.36
date	2003.06.02.09.17.34;	author markus;	state Exp;
branches
	1.36.2.1;
next	1.35;

1.35
date	2003.04.08.20.21.28;	author itojun;	state Exp;
branches;
next	1.34;

1.34
date	2002.03.25.09.25.06;	author markus;	state Exp;
branches
	1.34.4.1
	1.34.6.1;
next	1.33;

1.33
date	2002.03.19.10.49.35;	author markus;	state Exp;
branches;
next	1.32;

1.32
date	2002.03.18.17.50.31;	author provos;	state Exp;
branches;
next	1.31;

1.31
date	2002.03.16.17.22.09;	author markus;	state Exp;
branches;
next	1.30;

1.30
date	2002.03.14.16.56.33;	author markus;	state Exp;
branches;
next	1.29;

1.29
date	2002.03.04.12.43.06;	author markus;	state Exp;
branches;
next	1.28;

1.28
date	2002.01.29.14.32.03;	author markus;	state Exp;
branches;
next	1.27;

1.27
date	2001.12.27.19.54.53;	author markus;	state Exp;
branches;
next	1.26;

1.26
date	2001.11.07.22.41.51;	author markus;	state Exp;
branches;
next	1.25;

1.25
date	2001.06.23.03.04.42;	author markus;	state Exp;
branches
	1.25.2.1;
next	1.24;

1.24
date	2001.06.23.00.20.57;	author markus;	state Exp;
branches;
next	1.23;

1.23
date	2001.04.06.21.00.04;	author markus;	state Exp;
branches
	1.23.2.1;
next	1.22;

1.22
date	2001.02.03.10.08.36;	author markus;	state Exp;
branches;
next	1.21;

1.21
date	2001.01.21.19.05.42;	author markus;	state Exp;
branches;
next	1.20;

1.20
date	2001.01.19.15.55.10;	author markus;	state Exp;
branches;
next	1.19;

1.19
date	2000.12.21.15.10.16;	author markus;	state Exp;
branches;
next	1.18;

1.18
date	2000.11.12.19.50.37;	author markus;	state Exp;
branches;
next	1.17;

1.17
date	2000.10.03.18.03.03;	author markus;	state Exp;
branches
	1.17.2.1;
next	1.16;

1.16
date	2000.09.07.21.13.36;	author markus;	state Exp;
branches;
next	1.15;

1.15
date	2000.09.07.20.27.49;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2000.06.20.01.39.38;	author markus;	state Exp;
branches;
next	1.13;

1.13
date	2000.04.14.10.30.29;	author markus;	state Exp;
branches
	1.13.2.1;
next	1.12;

1.12
date	2000.04.12.09.39.09;	author markus;	state Exp;
branches;
next	1.11;

1.11
date	2000.03.23.22.15.33;	author markus;	state Exp;
branches;
next	1.10;

1.10
date	99.11.24.19.53.43;	author markus;	state Exp;
branches;
next	1.9;

1.9
date	99.11.24.00.26.00;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	99.11.23.22.25.52;	author markus;	state Exp;
branches;
next	1.7;

1.7
date	99.11.22.21.02.38;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	99.11.15.20.53.24;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	99.11.11.23.36.52;	author markus;	state Exp;
branches;
next	1.4;

1.4
date	99.11.11.22.58.38;	author markus;	state Exp;
branches;
next	1.3;

1.3
date	99.11.09.23.09.58;	author markus;	state Exp;
branches;
next	1.2;

1.2
date	99.10.03.21.50.03;	author provos;	state Exp;
branches;
next	1.1;

1.1
date	99.09.28.04.45.35;	author provos;	state Exp;
branches;
next	;

1.13.2.1
date	2000.09.01.18.23.16;	author jason;	state Exp;
branches;
next	1.13.2.2;

1.13.2.2
date	2000.11.08.21.30.20;	author jason;	state Exp;
branches;
next	1.13.2.3;

1.13.2.3
date	2001.03.12.15.44.07;	author jason;	state Exp;
branches;
next	1.13.2.4;

1.13.2.4
date	2001.03.21.18.52.33;	author jason;	state Exp;
branches;
next	;

1.17.2.1
date	2001.02.16.20.12.52;	author jason;	state Exp;
branches;
next	1.17.2.2;

1.17.2.2
date	2001.02.19.17.18.35;	author jason;	state Exp;
branches;
next	1.17.2.3;

1.17.2.3
date	2001.03.21.19.46.22;	author jason;	state Exp;
branches;
next	1.17.2.4;

1.17.2.4
date	2001.05.07.21.09.25;	author jason;	state Exp;
branches;
next	1.17.2.5;

1.17.2.5
date	2001.09.27.00.15.41;	author miod;	state Exp;
branches;
next	1.17.2.6;

1.17.2.6
date	2001.11.15.22.50.30;	author miod;	state Exp;
branches;
next	1.17.2.7;

1.17.2.7
date	2002.03.08.17.04.41;	author brad;	state Exp;
branches;
next	;

1.23.2.1
date	2001.09.27.19.03.54;	author jason;	state Exp;
branches;
next	1.23.2.2;

1.23.2.2
date	2001.11.15.22.51.15;	author miod;	state Exp;
branches;
next	1.23.2.3;

1.23.2.3
date	2002.03.09.00.20.43;	author miod;	state Exp;
branches;
next	1.23.2.4;

1.23.2.4
date	2002.06.02.22.56.09;	author miod;	state Exp;
branches;
next	;

1.25.2.1
date	2001.11.14.03.24.38;	author jason;	state Exp;
branches;
next	1.25.2.2;

1.25.2.2
date	2002.03.07.17.37.46;	author jason;	state Exp;
branches;
next	1.25.2.3;

1.25.2.3
date	2002.05.17.00.03.23;	author miod;	state Exp;
branches;
next	;

1.34.4.1
date	2003.09.16.21.20.24;	author brad;	state Exp;
branches;
next	;

1.34.6.1
date	2003.09.16.20.50.42;	author brad;	state Exp;
branches;
next	1.34.6.2;

1.34.6.2
date	2004.03.04.18.18.15;	author brad;	state Exp;
branches;
next	;

1.36.2.1
date	2004.02.28.03.51.32;	author brad;	state Exp;
branches;
next	;

1.37.4.1
date	2005.09.02.03.44.59;	author brad;	state Exp;
branches;
next	;

1.37.6.1
date	2005.09.04.18.39.52;	author brad;	state Exp;
branches;
next	;

1.38.2.1
date	2006.10.06.03.19.32;	author brad;	state Exp;
branches;
next	;

1.38.4.1
date	2006.09.30.04.06.50;	author brad;	state Exp;
branches;
next	;


desc
@@


1.46
log
@remove ssh1 server code; ok djm@@
@
text
@/* $OpenBSD: auth-rh-rsa.c,v 1.45 2016/03/07 19:02:43 djm Exp $ */
/*
 * Author: Tatu Ylonen <ylo@@cs.hut.fi>
 * Copyright (c) 1995 Tatu Ylonen <ylo@@cs.hut.fi>, Espoo, Finland
 *                    All rights reserved
 * Rhosts or /etc/hosts.equiv authentication combined with RSA host
 * authentication.
 *
 * As far as I am concerned, the code I have written for this software
 * can be used freely for any purpose.  Any derived versions of this
 * software must be clearly marked as such, and if the derived work is
 * incompatible with the protocol description in the RFC file, it must be
 * called by a name other than "ssh" or "Secure Shell".
 */

#include <sys/types.h>

#include <pwd.h>
#include <stdarg.h>

#include "packet.h"
#include "uidswap.h"
#include "log.h"
#include "buffer.h"
#include "misc.h"
#include "servconf.h"
#include "key.h"
#include "hostfile.h"
#include "pathnames.h"
#include "auth.h"
#include "canohost.h"
#ifdef GSSAPI
#include "ssh-gss.h"
#endif
#include "monitor_wrap.h"

/* import */
extern ServerOptions options;

int
auth_rhosts_rsa_key_allowed(struct passwd *pw, const char *cuser,
    const char *chost, Key *client_host_key)
{
	HostStatus host_status;

	if (auth_key_is_revoked(client_host_key))
		return 0;

	/* Check if we would accept it using rhosts authentication. */
	if (!auth_rhosts(pw, cuser))
		return 0;

	host_status = check_key_in_hostfiles(pw, client_host_key,
	    chost, _PATH_SSH_SYSTEM_HOSTFILE,
	    options.ignore_user_known_hosts ? NULL : _PATH_SSH_USER_HOSTFILE);

	return (host_status == HOST_OK);
}

/*
 * Tries to authenticate the user using the .rhosts file and the host using
 * its host key.  Returns true if authentication succeeds.
 */
int
auth_rhosts_rsa(Authctxt *authctxt, char *cuser, Key *client_host_key)
{
	struct ssh *ssh = active_state; /* XXX */
	const char *chost;
	struct passwd *pw = authctxt->pw;

	debug("Trying rhosts with RSA host authentication for client user %.100s",
	    cuser);

	if (!authctxt->valid || client_host_key == NULL ||
	    client_host_key->rsa == NULL)
		return 0;

	chost = auth_get_canonical_hostname(ssh, options.use_dns);
	debug("Rhosts RSA authentication: canonical host %.900s", chost);

	if (!PRIVSEP(auth_rhosts_rsa_key_allowed(pw, cuser, chost, client_host_key))) {
		debug("Rhosts with RSA host authentication denied: unknown or invalid host key");
		packet_send_debug("Your host key cannot be verified: unknown or invalid host key.");
		return 0;
	}
	/* A matching host key was found and is known. */

	/* Perform the challenge-response dialog with the client for the host key. */
	if (!auth_rsa_challenge_dialog(client_host_key)) {
		logit("Client on %.800s failed to respond correctly to host authentication.",
		    chost);
		return 0;
	}
	/*
	 * We have authenticated the user using .rhosts or /etc/hosts.equiv,
	 * and the host using RSA. We accept the authentication.
	 */

	verbose("Rhosts with RSA host authentication accepted for %.100s, %.100s on %.700s.",
	    pw->pw_name, cuser, chost);
	packet_send_debug("Rhosts with RSA host authentication accepted.");
	return 1;
}
@


1.45
log
@refactor canohost.c: move functions that cache results closer to the
places that use them (authn and session code). After this, no state is
cached in canohost.c

feedback and ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: auth-rh-rsa.c,v 1.44 2014/07/15 15:54:14 millert Exp $ */
@


1.44
log
@Add support for Unix domain socket forwarding.  A remote TCP port
may be forwarded to a local Unix domain socket and vice versa or
both ends may be a Unix domain socket.  This is a reimplementation
of the streamlocal patches by William Ahern from:
    http://www.25thandclement.com/~william/projects/streamlocal.html
OK djm@@ markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: auth-rh-rsa.c,v 1.43 2010/03/04 10:36:03 djm Exp $ */
d41 2
a42 2
auth_rhosts_rsa_key_allowed(struct passwd *pw, char *cuser, char *chost,
    Key *client_host_key)
d67 2
a68 1
	char *chost;
d78 1
a78 1
	chost = (char *)get_canonical_hostname(options.use_dns);
@


1.43
log
@Add a TrustedUserCAKeys option to sshd_config to specify CA keys that
are trusted to authenticate users (in addition than doing it per-user
in authorized_keys).

Add a RevokedKeys option to sshd_config and a @@revoked marker to
known_hosts to allow keys to me revoked and banned for user or host
authentication.

feedback and ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: auth-rh-rsa.c,v 1.42 2006/08/03 03:34:41 deraadt Exp $ */
d25 1
@


1.42
log
@almost entirely get rid of the culture of ".h files that include .h files"
ok djm, sort of ok stevesk
makes the pain stop in one easy step
@
text
@d1 1
a1 1
/* $OpenBSD: auth-rh-rsa.c,v 1.41 2006/07/06 16:03:53 stevesk Exp $ */
d44 3
@


1.41
log
@move #include <pwd.h> out of includes.h; ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: auth-rh-rsa.c,v 1.40 2006/03/25 13:17:01 djm Exp $ */
a15 2
#include "includes.h"

d19 1
d24 1
d31 3
a33 1

@


1.40
log
@Put $OpenBSD$ tags back (as comments) to replace the RCSID()s that
Theo nuked - our scripts to sync -portable need them in the files
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d17 4
@


1.39
log
@RCSID() can die
@
text
@d1 1
@


1.38
log
@knf says that a 2nd level indent is four (not three or five) spaces
@
text
@a15 1
RCSID("$OpenBSD: auth-rh-rsa.c,v 1.37 2003/11/04 08:54:09 djm Exp $");
@


1.38.2.1
log
@upgrade to OpenSSH 4.4
@
text
@a0 1
/* $OpenBSD: auth-rh-rsa.c,v 1.42 2006/08/03 03:34:41 deraadt Exp $ */
d15 2
a16 4
#include <sys/types.h>

#include <pwd.h>
#include <stdarg.h>
a20 1
#include "buffer.h"
d27 1
a27 3
#ifdef GSSAPI
#include "ssh-gss.h"
#endif
@


1.38.4.1
log
@upgrade to OpenSSH 4.4
@
text
@a0 1
/* $OpenBSD: auth-rh-rsa.c,v 1.42 2006/08/03 03:34:41 deraadt Exp $ */
d15 2
a16 4
#include <sys/types.h>

#include <pwd.h>
#include <stdarg.h>
a20 1
#include "buffer.h"
d27 1
a27 3
#ifdef GSSAPI
#include "ssh-gss.h"
#endif
@


1.37
log
@standardise arguments to auth methods - they should all take authctxt.
check authctxt->valid rather then pw != NULL; ok markus@@
@
text
@d16 1
a16 1
RCSID("$OpenBSD: auth-rh-rsa.c,v 1.36 2003/06/02 09:17:34 markus Exp $");
d89 1
a89 1
	   pw->pw_name, cuser, chost);
@


1.37.6.1
log
@upgrade to OpenSSH 4.2
@
text
@d16 1
a16 1
RCSID("$OpenBSD: auth-rh-rsa.c,v 1.38 2005/07/17 07:17:54 djm Exp $");
d89 1
a89 1
	    pw->pw_name, cuser, chost);
@


1.37.4.1
log
@upgrade to OpenSSH 4.2
@
text
@d16 1
a16 1
RCSID("$OpenBSD: auth-rh-rsa.c,v 1.38 2005/07/17 07:17:54 djm Exp $");
d89 1
a89 1
	    pw->pw_name, cuser, chost);
@


1.36
log
@deprecate VerifyReverseMapping since it's dangerous if combined
with IP based access control as noted by Mike Harding; replace with
a UseDNS option, UseDNS is on by default and includes the
VerifyReverseMapping check; with itojun@@, provos@@, jakob@@ and deraadt@@
ok deraadt@@, djm@@
@
text
@d16 1
a16 1
RCSID("$OpenBSD: auth-rh-rsa.c,v 1.35 2003/04/08 20:21:28 itojun Exp $");
d55 1
a55 1
auth_rhosts_rsa(struct passwd *pw, char *cuser, Key *client_host_key)
d58 1
d63 1
a63 1
	if (pw == NULL || client_host_key == NULL ||
@


1.36.2.1
log
@upgrade to OpenSSH 3.8
@
text
@d16 1
a16 1
RCSID("$OpenBSD: auth-rh-rsa.c,v 1.37 2003/11/04 08:54:09 djm Exp $");
d55 1
a55 1
auth_rhosts_rsa(Authctxt *authctxt, char *cuser, Key *client_host_key)
a57 1
	struct passwd *pw = authctxt->pw;
d62 1
a62 1
	if (!authctxt->valid || client_host_key == NULL ||
@


1.35
log
@rename log() into logit() to avoid name conflict.  markus ok, from netbsd
@
text
@d16 1
a16 1
RCSID("$OpenBSD: auth-rh-rsa.c,v 1.34 2002/03/25 09:25:06 markus Exp $");
d66 1
a66 1
	chost = (char *)get_canonical_hostname(options.verify_reverse_mapping);
@


1.34
log
@rm bogus comment
@
text
@d16 1
a16 1
RCSID("$OpenBSD: auth-rh-rsa.c,v 1.33 2002/03/19 10:49:35 markus Exp $");
d78 1
a78 1
		log("Client on %.800s failed to respond correctly to host authentication.",
@


1.34.4.1
log
@upgrade to OpenSSH 3.7
@
text
@d16 1
a16 1
RCSID("$OpenBSD: auth-rh-rsa.c,v 1.36 2003/06/02 09:17:34 markus Exp $");
d66 1
a66 1
	chost = (char *)get_canonical_hostname(options.use_dns);
d78 1
a78 1
		logit("Client on %.800s failed to respond correctly to host authentication.",
@


1.34.6.1
log
@upgrade to OpenSSH 3.7
@
text
@d16 1
a16 1
RCSID("$OpenBSD: auth-rh-rsa.c,v 1.36 2003/06/02 09:17:34 markus Exp $");
d66 1
a66 1
	chost = (char *)get_canonical_hostname(options.use_dns);
d78 1
a78 1
		logit("Client on %.800s failed to respond correctly to host authentication.",
@


1.34.6.2
log
@upgrade to OpenSSH 3.8upgrade to OpenSSH 3.8upgrade to OpenSSH 3.8
@
text
@d16 1
a16 1
RCSID("$OpenBSD: auth-rh-rsa.c,v 1.37 2003/11/04 08:54:09 djm Exp $");
d55 1
a55 1
auth_rhosts_rsa(Authctxt *authctxt, char *cuser, Key *client_host_key)
a57 1
	struct passwd *pw = authctxt->pw;
d62 1
a62 1
	if (!authctxt->valid || client_host_key == NULL ||
@


1.33
log
@KNF whitespace
@
text
@d16 1
a16 1
RCSID("$OpenBSD: auth-rh-rsa.c,v 1.32 2002/03/18 17:50:31 provos Exp $");
a31 5

/*
 * Tries to authenticate the user using the .rhosts file and the host using
 * its host key.  Returns true if authentication succeeds.
 */
@


1.32
log
@integrate privilege separated openssh; its turned off by default for now.
work done by me and markus@@
@
text
@d16 1
a16 1
RCSID("$OpenBSD: auth-rh-rsa.c,v 1.29 2002/03/04 12:43:06 markus Exp $");
d52 1
a52 1
        return (host_status == HOST_OK);
@


1.31
log
@split auth_rhosts_rsa(), ok provos@@
@
text
@d28 2
d74 1
a74 1
	if (!auth_rhosts_rsa_key_allowed(pw, cuser, chost, client_host_key)) {
@


1.30
log
@split auth_rsa() for better readability and privsep; ok provos@@
@
text
@d28 3
d37 2
a38 1
auth_rhosts_rsa(struct passwd *pw, const char *client_user, Key *client_host_key)
a39 2
	extern ServerOptions options;
	const char *canonical_hostname;
d42 3
a44 1
	debug("Trying rhosts with RSA host authentication for client user %.100s", client_user);
d46 6
a51 2
	if (pw == NULL || client_host_key == NULL || client_host_key->rsa == NULL)
		return 0;
d53 8
a60 3
	/* Check if we would accept it using rhosts authentication. */
	if (!auth_rhosts(pw, client_user))
		return 0;
d62 2
a63 2
	canonical_hostname = get_canonical_hostname(
	    options.verify_reverse_mapping);
d65 3
a67 1
	debug("Rhosts RSA authentication: canonical host %.900s", canonical_hostname);
d69 2
a70 3
	host_status = check_key_in_hostfiles(pw, client_host_key,
	    canonical_hostname, _PATH_SSH_SYSTEM_HOSTFILE,
	    options.ignore_user_known_hosts ? NULL : _PATH_SSH_USER_HOSTFILE);
d72 1
a72 1
	if (host_status != HOST_OK) {
d82 1
a82 1
		    canonical_hostname);
d91 1
a91 1
	   pw->pw_name, client_user, canonical_hostname);
@


1.29
log
@unused include
@
text
@d16 1
a16 1
RCSID("$OpenBSD: auth-rh-rsa.c,v 1.28 2002/01/29 14:32:03 markus Exp $");
d66 1
a66 1
	if (!auth_rsa_challenge_dialog(client_host_key->rsa)) {
@


1.28
log
@s/ReverseMappingCheck/VerifyReverseMapping/ and avoid confusion; ok stevesk@@
@
text
@d16 1
a16 1
RCSID("$OpenBSD: auth-rh-rsa.c,v 1.27 2001/12/27 19:54:53 markus Exp $");
a18 1
#include "xmalloc.h"
@


1.27
log
@auth_rhosts_rsa now accept generic keys.
@
text
@d16 1
a16 1
RCSID("$OpenBSD: auth-rh-rsa.c,v 1.26 2001/11/07 22:41:51 markus Exp $");
d51 1
a51 1
	    options.reverse_mapping_check);
@


1.26
log
@unused includes
@
text
@d16 1
a16 1
RCSID("$OpenBSD: auth-rh-rsa.c,v 1.25 2001/06/23 03:04:42 markus Exp $");
d35 1
a35 1
auth_rhosts_rsa(struct passwd *pw, const char *client_user, RSA *client_host_key)
a39 1
	Key *client_key;
d43 1
a43 1
	if (pw == NULL || client_host_key == NULL)
d55 2
a56 7
	/* wrap the RSA key into a 'generic' key */
	client_key = key_new(KEY_RSA1);
	BN_copy(client_key->rsa->e, client_host_key->e);
	BN_copy(client_key->rsa->n, client_host_key->n);

	host_status = check_key_in_hostfiles(pw, client_key, canonical_hostname,
	    _PATH_SSH_SYSTEM_HOSTFILE,
a58 2
	key_free(client_key);

d67 1
a67 1
	if (!auth_rsa_challenge_dialog(client_host_key)) {
@


1.25
log
@restore correct ignore_user_known_hosts logic.
@
text
@d16 1
a16 1
RCSID("$OpenBSD: auth-rh-rsa.c,v 1.24 2001/06/23 00:20:57 markus Exp $");
a26 1
#include "tildexpand.h"
@


1.25.2.1
log
@Pull in patches from current (Errata 002):
Update to OpenSSH-3.0.1 via errata patch (Instead of using release tarball)
@
text
@d16 1
a16 1
RCSID("$OpenBSD: auth-rh-rsa.c,v 1.26 2001/11/07 22:41:51 markus Exp $");
d27 1
@


1.25.2.2
log
@Update to OpenSSH-3.1 on 3.0-stable branch
@
text
@d16 1
a16 1
RCSID("$OpenBSD: auth-rh-rsa.c,v 1.29 2002/03/04 12:43:06 markus Exp $");
d19 1
d35 1
a35 1
auth_rhosts_rsa(struct passwd *pw, const char *client_user, Key *client_host_key)
d40 1
d44 1
a44 1
	if (pw == NULL || client_host_key == NULL || client_host_key->rsa == NULL)
d52 1
a52 1
	    options.verify_reverse_mapping);
d56 7
a62 2
	host_status = check_key_in_hostfiles(pw, client_host_key,
	    canonical_hostname, _PATH_SSH_SYSTEM_HOSTFILE,
d65 2
d75 1
a75 1
	if (!auth_rsa_challenge_dialog(client_host_key->rsa)) {
@


1.25.2.3
log
@Update OpenSSH to version 3.2.2.
@
text
@d16 1
a16 1
RCSID("$OpenBSD: auth-rh-rsa.c,v 1.34 2002/03/25 09:25:06 markus Exp $");
d28 4
a31 4
#include "monitor_wrap.h"

/* import */
extern ServerOptions options;
d34 1
a34 2
auth_rhosts_rsa_key_allowed(struct passwd *pw, char *cuser, char *chost,
    Key *client_host_key)
d36 2
d40 5
d46 1
a46 1
	if (!auth_rhosts(pw, cuser))
d49 5
d55 1
a55 1
	    chost, _PATH_SSH_SYSTEM_HOSTFILE,
d58 1
a58 23
	return (host_status == HOST_OK);
}

/*
 * Tries to authenticate the user using the .rhosts file and the host using
 * its host key.  Returns true if authentication succeeds.
 */
int
auth_rhosts_rsa(struct passwd *pw, char *cuser, Key *client_host_key)
{
	char *chost;

	debug("Trying rhosts with RSA host authentication for client user %.100s",
	    cuser);

	if (pw == NULL || client_host_key == NULL ||
	    client_host_key->rsa == NULL)
		return 0;

	chost = (char *)get_canonical_hostname(options.verify_reverse_mapping);
	debug("Rhosts RSA authentication: canonical host %.900s", chost);

	if (!PRIVSEP(auth_rhosts_rsa_key_allowed(pw, cuser, chost, client_host_key))) {
d66 1
a66 1
	if (!auth_rsa_challenge_dialog(client_host_key)) {
d68 1
a68 1
		    chost);
d77 1
a77 1
	   pw->pw_name, cuser, chost);
@


1.24
log
@*known_hosts2 is obsolete for hostbased authentication and
only used for backward compat. merge ssh1/2 hostkey check
and move it to auth.c
@
text
@d16 1
a16 1
RCSID("$OpenBSD: auth-rh-rsa.c,v 1.23 2001/04/06 21:00:04 markus Exp $");
d64 1
a64 1
	    options.ignore_user_known_hosts ? _PATH_SSH_USER_HOSTFILE : NULL);
@


1.23
log
@do gid/groups-swap in addition to uid-swap, should help if /home/group
is chmod 750 + chgrp grp /home/group/, work be deraadt and me, thanks
to olar@@openwall.com is comments.  we had many requests for this.
@
text
@d16 1
a16 1
RCSID("$OpenBSD: auth-rh-rsa.c,v 1.22 2001/02/03 10:08:36 markus Exp $");
d41 1
a41 1
	Key *client_key, *found;
a60 1
	found = key_new(KEY_RSA1);
d62 4
a65 27
	/* Check if we know the host and its host key. */
	host_status = check_host_in_hostfile(_PATH_SSH_SYSTEM_HOSTFILE, canonical_hostname,
	    client_key, found, NULL);

	/* Check user host file unless ignored. */
	if (host_status != HOST_OK && !options.ignore_user_known_hosts) {
		struct stat st;
		char *user_hostfile = tilde_expand_filename(_PATH_SSH_USER_HOSTFILE, pw->pw_uid);
		/*
		 * Check file permissions of _PATH_SSH_USER_HOSTFILE, auth_rsa()
		 * did already check pw->pw_dir, but there is a race XXX
		 */
		if (options.strict_modes &&
		    (stat(user_hostfile, &st) == 0) &&
		    ((st.st_uid != 0 && st.st_uid != pw->pw_uid) ||
		     (st.st_mode & 022) != 0)) {
			log("Rhosts RSA authentication refused for %.100s: bad owner or modes for %.200s",
			    pw->pw_name, user_hostfile);
		} else {
			/* XXX race between stat and the following open() */
			temporarily_use_uid(pw);
			host_status = check_host_in_hostfile(user_hostfile, canonical_hostname,
			    client_key, found, NULL);
			restore_uid();
		}
		xfree(user_hostfile);
	}
a66 1
	key_free(found);
@


1.23.2.1
log
@Pull in OpenSSH-2.9.9
@
text
@d16 1
a16 1
RCSID("$OpenBSD: auth-rh-rsa.c,v 1.25 2001/06/23 03:04:42 markus Exp $");
d41 1
a41 1
	Key *client_key;
d61 1
d63 27
a89 4
	host_status = check_key_in_hostfiles(pw, client_key, canonical_hostname,
	    _PATH_SSH_SYSTEM_HOSTFILE,
	    options.ignore_user_known_hosts ? NULL : _PATH_SSH_USER_HOSTFILE);

d91 1
@


1.23.2.2
log
@Merge OpenSSH 3.0.1.
@
text
@d16 1
a16 1
RCSID("$OpenBSD: auth-rh-rsa.c,v 1.23.2.1 2001/09/27 19:03:54 jason Exp $");
d27 1
@


1.23.2.3
log
@Merge OpenSSH 3.1, keeping /etc as configuration files directory.
(i.e. OpenSSH 3.1 + openbsd29_3.1.patch)
@
text
@d16 1
a16 1
RCSID("$OpenBSD: auth-rh-rsa.c,v 1.29 2002/03/04 12:43:06 markus Exp $");
d19 1
d35 1
a35 1
auth_rhosts_rsa(struct passwd *pw, const char *client_user, Key *client_host_key)
d40 1
d44 1
a44 1
	if (pw == NULL || client_host_key == NULL || client_host_key->rsa == NULL)
d52 1
a52 1
	    options.verify_reverse_mapping);
d56 7
a62 2
	host_status = check_key_in_hostfiles(pw, client_host_key,
	    canonical_hostname, _PATH_SSH_SYSTEM_HOSTFILE,
d65 2
d75 1
a75 1
	if (!auth_rsa_challenge_dialog(client_host_key->rsa)) {
@


1.23.2.4
log
@Upgrade to OpenSSH 3.2.3.

Except for improbable compilation error fixes, this should be the last
commit made to the 2.9-STABLE branche. Have fun upgrading.
@
text
@d16 1
a16 1
RCSID("$OpenBSD: auth-rh-rsa.c,v 1.34 2002/03/25 09:25:06 markus Exp $");
d28 4
a31 4
#include "monitor_wrap.h"

/* import */
extern ServerOptions options;
d34 1
a34 2
auth_rhosts_rsa_key_allowed(struct passwd *pw, char *cuser, char *chost,
    Key *client_host_key)
d36 2
d40 5
d46 1
a46 1
	if (!auth_rhosts(pw, cuser))
d49 5
d55 1
a55 1
	    chost, _PATH_SSH_SYSTEM_HOSTFILE,
d58 1
a58 23
	return (host_status == HOST_OK);
}

/*
 * Tries to authenticate the user using the .rhosts file and the host using
 * its host key.  Returns true if authentication succeeds.
 */
int
auth_rhosts_rsa(struct passwd *pw, char *cuser, Key *client_host_key)
{
	char *chost;

	debug("Trying rhosts with RSA host authentication for client user %.100s",
	    cuser);

	if (pw == NULL || client_host_key == NULL ||
	    client_host_key->rsa == NULL)
		return 0;

	chost = (char *)get_canonical_hostname(options.verify_reverse_mapping);
	debug("Rhosts RSA authentication: canonical host %.900s", chost);

	if (!PRIVSEP(auth_rhosts_rsa_key_allowed(pw, cuser, chost, client_host_key))) {
d66 1
a66 1
	if (!auth_rsa_challenge_dialog(client_host_key)) {
d68 1
a68 1
		    chost);
d77 1
a77 1
	   pw->pw_name, cuser, chost);
@


1.22
log
@make ReverseMappingCheck optional in sshd_config; ok djm@@,dugsong@@
@
text
@d16 1
a16 1
RCSID("$OpenBSD: auth-rh-rsa.c,v 1.21 2001/01/21 19:05:42 markus Exp $");
d83 1
a83 1
			temporarily_use_uid(pw->pw_uid);
@


1.21
log
@split ssh.h and try to cleanup the #include mess. remove unnecessary #includes.
rename util.[ch] -> misc.[ch]
@
text
@d16 1
a16 1
RCSID("$OpenBSD: auth-rh-rsa.c,v 1.20 2001/01/19 15:55:10 markus Exp $");
d52 2
a53 1
	canonical_hostname = get_canonical_hostname();
@


1.20
log
@move ssh1 definitions to ssh1.h, pathnames to pathnames.h
@
text
@d16 1
a16 1
RCSID("$OpenBSD: auth-rh-rsa.c,v 1.19 2000/12/21 15:10:16 markus Exp $");
a18 1
#include "ssh.h"
d21 1
a22 3

#include <openssl/rsa.h>
#include <openssl/dsa.h>
d26 3
@


1.19
log
@print keyfile:line for changed hostkeys, for deraadt@@; ok deraadt@@
@
text
@d16 1
a16 1
RCSID("$OpenBSD: auth-rh-rsa.c,v 1.18 2000/11/12 19:50:37 markus Exp $");
d28 1
d63 1
a63 1
	host_status = check_host_in_hostfile(SSH_SYSTEM_HOSTFILE, canonical_hostname,
d69 1
a69 1
		char *user_hostfile = tilde_expand_filename(SSH_USER_HOSTFILE, pw->pw_uid);
d71 1
a71 1
		 * Check file permissions of SSH_USER_HOSTFILE, auth_rsa()
@


1.18
log
@add support for RSA to SSH2.  please test.

there are now 3 types of keys: RSA1 is used by ssh-1 only,
RSA and DSA are used by SSH2.

you can use 'ssh-keygen -t rsa -f ssh2_rsa_file' to generate RSA
keys for SSH2 and use the RSA keys for hostkeys or for user keys.

SSH2 RSA or DSA keys are added to .ssh/authorised_keys2 as before.

IdentityFile2, HostDsaKey and DSAAuthentication are obsolete.
you can use multiple IdentityFile and HostKey for all types of keys.

the option DSAAuthentication is replaced by PubkeyAuthetication.
@
text
@d16 1
a16 1
RCSID("$OpenBSD: auth-rh-rsa.c,v 1.17 2000/10/03 18:03:03 markus Exp $");
d63 1
a63 1
	    client_key, found);
d83 1
a83 1
			    client_key, found);
@


1.17
log
@move fake-auth from auth1.c to individual auth methods, disables s/key in debug-msg
@
text
@d16 1
a16 1
RCSID("$OpenBSD: auth-rh-rsa.c,v 1.16 2000/09/07 21:13:36 markus Exp $");
d56 1
a56 1
	client_key = key_new(KEY_RSA);
d59 1
a59 1
	found = key_new(KEY_RSA);
@


1.17.2.1
log
@Pull in OpenSSH 2.5.0
@
text
@d16 1
a16 1
RCSID("$OpenBSD: auth-rh-rsa.c,v 1.22 2001/02/03 10:08:36 markus Exp $");
d19 1
a21 1
#include "log.h"
d23 3
a27 4
#include "pathnames.h"
#include "auth.h"
#include "tildexpand.h"
#include "canohost.h"
d51 1
a51 2
	canonical_hostname = get_canonical_hostname(
	    options.reverse_mapping_check);
d56 1
a56 1
	client_key = key_new(KEY_RSA1);
d59 1
a59 1
	found = key_new(KEY_RSA1);
d62 2
a63 2
	host_status = check_host_in_hostfile(_PATH_SSH_SYSTEM_HOSTFILE, canonical_hostname,
	    client_key, found, NULL);
d68 1
a68 1
		char *user_hostfile = tilde_expand_filename(_PATH_SSH_USER_HOSTFILE, pw->pw_uid);
d70 1
a70 1
		 * Check file permissions of _PATH_SSH_USER_HOSTFILE, auth_rsa()
d83 1
a83 1
			    client_key, found, NULL);
@


1.17.2.2
log
@Pull in OpenSSH-2.5.1
@
text
@@


1.17.2.3
log
@Pull in OpenSSH-2.5.2 for 2.8 branch.
@
text
@@


1.17.2.4
log
@Pull in OpenSSH-2.9 to 2.8 branch.
@
text
@d16 1
a16 1
RCSID("$OpenBSD: auth-rh-rsa.c,v 1.23 2001/04/06 21:00:04 markus Exp $");
d83 1
a83 1
			temporarily_use_uid(pw);
@


1.17.2.5
log
@Pull in OpenSSH 2.9.9 to the 2.8 branch.
@
text
@d16 1
a16 1
RCSID("$OpenBSD: auth-rh-rsa.c,v 1.25 2001/06/23 03:04:42 markus Exp $");
d41 1
a41 1
	Key *client_key;
d61 1
d63 27
a89 4
	host_status = check_key_in_hostfiles(pw, client_key, canonical_hostname,
	    _PATH_SSH_SYSTEM_HOSTFILE,
	    options.ignore_user_known_hosts ? NULL : _PATH_SSH_USER_HOSTFILE);

d91 1
@


1.17.2.6
log
@Merge OpenSSH 3.0.1.

This is likely to be the last commit to the 2.8-STABLE branch.
@
text
@d16 1
a16 1
RCSID("$OpenBSD: auth-rh-rsa.c,v 1.17.2.5 2001/09/27 00:15:41 miod Exp $");
d27 1
@


1.17.2.7
log
@Merge OpenSSH 3.1.
@
text
@d16 1
a16 1
RCSID("$OpenBSD: auth-rh-rsa.c,v 1.29 2002/03/04 12:43:06 markus Exp $");
d19 1
d35 1
a35 1
auth_rhosts_rsa(struct passwd *pw, const char *client_user, Key *client_host_key)
d40 1
d44 1
a44 1
	if (pw == NULL || client_host_key == NULL || client_host_key->rsa == NULL)
d52 1
a52 1
	    options.verify_reverse_mapping);
d56 7
a62 2
	host_status = check_key_in_hostfiles(pw, client_host_key,
	    canonical_hostname, _PATH_SSH_SYSTEM_HOSTFILE,
d65 2
d75 1
a75 1
	if (!auth_rsa_challenge_dialog(client_host_key->rsa)) {
@


1.16
log
@some more Copyright fixes
@
text
@d16 1
a16 1
RCSID("$OpenBSD: auth-rh-rsa.c,v 1.15 2000/09/07 20:27:49 deraadt Exp $");
d42 1
a42 1
	debug("Trying rhosts with RSA host authentication for %.100s", client_user);
d44 1
a44 1
	if (client_host_key == NULL)
@


1.15
log
@cleanup copyright notices on all files.  I have attempted to be accurate with
the details.  everything is now under Tatu's licence (which I copied from his
readme), and/or the core-sdi bsd-ish thing for deattack, or various openbsd
developers under a 2-term bsd licence.  We're not changing any rules, just
being accurate.
@
text
@a12 23
 *
 *
 * Copyright (c) 2000 Markus Friedl.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
d16 1
a16 1
RCSID("$OpenBSD: auth-rh-rsa.c,v 1.14 2000/06/20 01:39:38 markus Exp $");
@


1.14
log
@OpenBSD tag
@
text
@a1 3
 *
 * auth-rh-rsa.c
 *
a2 1
 *
a4 3
 *
 * Created: Sun May  7 03:08:06 1995 ylo
 *
d8 28
d39 1
a39 1
RCSID("$OpenBSD: auth-rh-rsa.c,v 1.13 2000/04/14 10:30:29 markus Exp $");
@


1.13
log
@whitespace cleanup
@
text
@d18 1
a18 1
RCSID("$Id: auth-rh-rsa.c,v 1.12 2000/04/12 09:39:09 markus Exp $");
@


1.13.2.1
log
@Pull in the rest of openssh-2.2.0 to 2.7 branch (luvin' cvs...)
@
text
@d18 1
a18 1
RCSID("$OpenBSD: auth-rh-rsa.c,v 1.14 2000/06/20 01:39:38 markus Exp $");
@


1.13.2.2
log
@openssh-2.3.0 (again) for 2.7 branch
@
text
@d2 3
d6 1
d9 3
a14 5
 * As far as I am concerned, the code I have written for this software
 * can be used freely for any purpose.  Any derived versions of this
 * software must be clearly marked as such, and if the derived work is
 * incompatible with the protocol description in the RFC file, it must be
 * called by a name other than "ssh" or "Secure Shell".
d18 1
a18 1
RCSID("$OpenBSD: auth-rh-rsa.c,v 1.17 2000/10/03 18:03:03 markus Exp $");
d44 1
a44 1
	debug("Trying rhosts with RSA host authentication for client user %.100s", client_user);
d46 1
a46 1
	if (pw == NULL || client_host_key == NULL)
@


1.13.2.3
log
@OpenSSH-2.5.1 for 2.7 patch branch
@
text
@d16 1
a16 1
RCSID("$OpenBSD: auth-rh-rsa.c,v 1.22 2001/02/03 10:08:36 markus Exp $");
d19 1
a21 1
#include "log.h"
d23 3
a27 4
#include "pathnames.h"
#include "auth.h"
#include "tildexpand.h"
#include "canohost.h"
d51 1
a51 2
	canonical_hostname = get_canonical_hostname(
	    options.reverse_mapping_check);
d56 1
a56 1
	client_key = key_new(KEY_RSA1);
d59 1
a59 1
	found = key_new(KEY_RSA1);
d62 2
a63 2
	host_status = check_host_in_hostfile(_PATH_SSH_SYSTEM_HOSTFILE, canonical_hostname,
	    client_key, found, NULL);
d68 1
a68 1
		char *user_hostfile = tilde_expand_filename(_PATH_SSH_USER_HOSTFILE, pw->pw_uid);
d70 1
a70 1
		 * Check file permissions of _PATH_SSH_USER_HOSTFILE, auth_rsa()
d83 1
a83 1
			    client_key, found, NULL);
@


1.13.2.4
log
@Pull in OpenSSH-2.5.2 for 2.7 branch.
@
text
@@


1.12
log
@#include <ssl/foo.h> -> <openssh/foo.h>
@
text
@d2 1
a2 1
 * 
d4 1
a4 1
 * 
d6 1
a6 1
 * 
d9 1
a9 1
 * 
d11 1
a11 1
 * 
d18 1
a18 1
RCSID("$Id: auth-rh-rsa.c,v 1.11 2000/03/23 22:15:33 markus Exp $");
d36 1
a36 1
int 
@


1.11
log
@initial support for DSA keys. ok deraadt@@, niels@@
@
text
@d18 1
a18 1
RCSID("$Id: auth-rh-rsa.c,v 1.5 2000/02/17 17:24:08 markus Exp $");
d26 2
a27 2
#include <ssl/rsa.h>
#include <ssl/dsa.h>
@


1.10
log
@KNF, final part 3
@
text
@d18 1
a18 1
RCSID("$Id: auth-rh-rsa.c,v 1.9 1999/11/24 00:26:00 deraadt Exp $");
d26 5
d37 1
a37 2
auth_rhosts_rsa(struct passwd *pw, const char *client_user,
		BIGNUM *client_host_key_e, BIGNUM *client_host_key_n)
d42 1
a42 1
	BIGNUM *ke, *kn;
d46 3
d55 7
a61 2
	debug("Rhosts RSA authentication: canonical host %.900s",
	      canonical_hostname);
a63 2
	ke = BN_new();
	kn = BN_new();
d65 1
a65 2
			   		     client_host_key_e, client_host_key_n,
					     ke, kn);
d85 1
a85 2
							     client_host_key_e, client_host_key_n,
							     ke, kn);
d90 2
a91 2
	BN_free(ke);
	BN_free(kn);
d101 1
a101 1
	if (!auth_rsa_challenge_dialog(client_host_key_e, client_host_key_n)) {
d112 1
a112 1
		pw->pw_name, client_user, canonical_hostname);
@


1.9
log
@much more KNF
@
text
@d18 1
a18 1
RCSID("$Id: auth-rh-rsa.c,v 1.8 1999/11/23 22:25:52 markus Exp $");
d26 4
a29 2
/* Tries to authenticate the user using the .rhosts file and the host using
   its host key.  Returns true if authentication succeeds. */
d62 4
a65 2
		/* Check file permissions of SSH_USER_HOSTFILE, auth_rsa()
		   did already check pw->pw_dir, but there is a race XXX */
d98 4
a101 2
	/* We have authenticated the user using .rhosts or /etc/hosts.equiv, and the host using RSA.
	   We accept the authentication. */
@


1.8
log
@KNF part 1
@
text
@d2 14
a15 14

auth-rh-rsa.c

Author: Tatu Ylonen <ylo@@cs.hut.fi>

Copyright (c) 1995 Tatu Ylonen <ylo@@cs.hut.fi>, Espoo, Finland
                   All rights reserved

Created: Sun May  7 03:08:06 1995 ylo

Rhosts or /etc/hosts.equiv authentication combined with RSA host
authentication.

*/
d18 1
a18 1
RCSID("$Id: auth-rh-rsa.c,v 1.7 1999/11/22 21:02:38 markus Exp $");
@


1.7
log
@syslog changes:
* Unified Logmessage for all auth-types, for success and for failed
* Standard connections get only ONE line in the LOG when level==LOG:
  Auth-attempts are logged only, if authentication is:
        a) successfull or
        b) with passwd or
        c) we had more than AUTH_FAIL_LOG failues
* many log() became verbose()
* old behaviour with level=VERBOSE
@
text
@d18 1
a18 1
RCSID("$Id: auth-rh-rsa.c,v 1.6 1999/11/15 20:53:24 markus Exp $");
d29 3
a31 2
int auth_rhosts_rsa(struct passwd *pw, const char *client_user,
		    BIGNUM *client_host_key_e, BIGNUM *client_host_key_n)
d33 68
a100 71
  extern ServerOptions options;
  const char *canonical_hostname;
  HostStatus host_status;
  BIGNUM *ke, *kn;

  debug("Trying rhosts with RSA host authentication for %.100s", client_user);

  /* Check if we would accept it using rhosts authentication. */
  if (!auth_rhosts(pw, client_user))
    return 0;

  canonical_hostname = get_canonical_hostname();

  debug("Rhosts RSA authentication: canonical host %.900s",
	canonical_hostname);
  
  /* Check if we know the host and its host key. */
  /* Check system-wide host file. */
  ke = BN_new();
  kn = BN_new();
  host_status = check_host_in_hostfile(SSH_SYSTEM_HOSTFILE, canonical_hostname,
				       client_host_key_e, client_host_key_n, ke, kn);

  /* Check user host file unless ignored. */
  if (host_status != HOST_OK && !options.ignore_user_known_hosts) {
    struct stat st;
    char *user_hostfile = tilde_expand_filename(SSH_USER_HOSTFILE, pw->pw_uid);
    /* Check file permissions of SSH_USER_HOSTFILE,
       auth_rsa() did already check pw->pw_dir, but there is a race XXX */
    if (options.strict_modes &&
	(stat(user_hostfile, &st) == 0) &&
	((st.st_uid != 0 && st.st_uid != pw->pw_uid) ||
	(st.st_mode & 022) != 0)) {
       log("Rhosts RSA authentication refused for %.100s: bad owner or modes for %.200s",
	   pw->pw_name, user_hostfile);
    } else {
      /* XXX race between stat and the following open() */
      temporarily_use_uid(pw->pw_uid);
      host_status = check_host_in_hostfile(user_hostfile, canonical_hostname,
					   client_host_key_e, client_host_key_n, ke, kn);
      restore_uid();
    }
    xfree(user_hostfile);
  }
  BN_free(ke);
  BN_free(kn);

  if (host_status != HOST_OK) {
    /* The host key was not found. */
    debug("Rhosts with RSA host authentication denied: unknown or invalid host key");
    packet_send_debug("Your host key cannot be verified: unknown or invalid host key.");
    return 0;
  }

  /* A matching host key was found and is known. */
  
  /* Perform the challenge-response dialog with the client for the host key. */
  if (!auth_rsa_challenge_dialog(client_host_key_e, client_host_key_n))
    {
      log("Client on %.800s failed to respond correctly to host authentication.",
	  canonical_hostname);
      return 0;
    }

  /* We have authenticated the user using .rhosts or /etc/hosts.equiv, and
     the host using RSA.  We accept the authentication. */
  
  verbose("Rhosts with RSA host authentication accepted for %.100s, %.100s on %.700s.",
      pw->pw_name, client_user, canonical_hostname);
  packet_send_debug("Rhosts with RSA host authentication accepted.");
  return 1;
@


1.6
log
@the keysize of rsa-parameter 'n' is passed implizit,
a few more checks and warnings about 'pretended' keysizes.
@
text
@d18 1
a18 1
RCSID("$Id: auth-rh-rsa.c,v 1.5 1999/11/11 23:36:52 markus Exp $");
d99 1
a99 1
  log("Rhosts with RSA host authentication accepted for %.100s, %.100s on %.700s.",
@


1.5
log
@make all access to options via 'extern Options options'
and 'extern ServerOptions options' respectively;
options are no longer passed as arguments:
 * make options handling more consistent
 * remove #include "readconf.h" from ssh.h
 * readconf.h is only included if necessary
@
text
@d18 1
a18 1
RCSID("$Id: auth-rh-rsa.c,v 1.4 1999/11/11 22:58:38 markus Exp $");
a29 1
		    unsigned int client_host_key_bits,
d53 1
a53 2
				       client_host_key_bits, client_host_key_e,
				       client_host_key_n, ke, kn);
d71 1
a71 2
					   client_host_key_bits, client_host_key_e,
					   client_host_key_n, ke, kn);
d89 1
a89 2
  if (!auth_rsa_challenge_dialog(client_host_key_bits,
				 client_host_key_e, client_host_key_n))
@


1.4
log
@IgnoreUserKnownHosts(default=no), used for RhostRSAAuth, ok deraadt,millert
@
text
@d18 1
a18 1
RCSID("$Id: auth-rh-rsa.c,v 1.3 1999/11/09 23:09:58 markus Exp $");
d41 1
a41 1
  if (!auth_rhosts(pw, client_user, options.ignore_rhosts, options.strict_modes))
@


1.3
log
@user/958: check ~/.ssh/known_hosts for rhosts-rsa, too, ok niels/millert
@
text
@d18 1
a18 1
RCSID("$Id: auth-rh-rsa.c,v 1.2 1999/10/03 21:50:03 provos Exp $");
d24 1
d27 1
a27 2
   its host key.  Returns true if authentication succeeds. 
   .rhosts and .shosts will be ignored if ignore_rhosts is non-zero. */
d31 1
a31 2
		    BIGNUM *client_host_key_e, BIGNUM *client_host_key_n,
		    int ignore_rhosts, int strict_modes)
d33 1
d41 1
a41 1
  if (!auth_rhosts(pw, client_user, ignore_rhosts, strict_modes))
d56 3
a58 2
  /* Check user host file. */
  if (host_status != HOST_OK) {
d63 1
a63 1
    if (strict_modes &&
@


1.2
log
@add code to detect DNS spoofing:

the main idea is to not only store the host key for the hostname but
also for the according IP address.  When we check the host key in the
known_hosts file, we also check the key against the according IP address.
When the server key changes, host_status = HOST_CHANGED.  If
check_host_in_hostfile() returns differing status for the IP address
that means that either DNS was spoofed or that the IP address
for the host and the host key changed at the same time.
@
text
@d18 1
a18 1
RCSID("$Id: auth-rh-rsa.c,v 1.1 1999/09/28 04:45:35 provos Exp $");
d56 22
d80 1
@


1.1
log
@convert all uses of gmp to SSL bignum
convert all used of rsa to SSL rsa functions
remove all use of randomstate to OpenBSD arc4random() and arc4_stir()
all this done at a long long night in Canada.
@
text
@d18 1
a18 1
RCSID("$Id: auth-rh-rsa.c,v 1.3 1999/05/04 11:58:23 bg Exp $");
d35 2
d51 14
a64 9
  if (check_host_in_hostfile(SSH_SYSTEM_HOSTFILE, canonical_hostname,
			     client_host_key_bits, client_host_key_e,
			     client_host_key_n) != HOST_OK)
    {
      /* The host key was not found. */
      debug("Rhosts with RSA host authentication denied: unknown or invalid host key");
      packet_send_debug("Your host key cannot be verified: unknown or invalid host key.");
      return 0;
    }
@

