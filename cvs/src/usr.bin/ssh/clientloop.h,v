head	1.34;
access;
symbols
	OPENBSD_6_1:1.33.0.4
	OPENBSD_6_1_BASE:1.33
	OPENBSD_6_0:1.32.0.6
	OPENBSD_6_0_BASE:1.32
	OPENBSD_5_9:1.32.0.2
	OPENBSD_5_9_BASE:1.32
	OPENBSD_5_8:1.31.0.10
	OPENBSD_5_8_BASE:1.31
	OPENBSD_5_7:1.31.0.4
	OPENBSD_5_7_BASE:1.31
	OPENBSD_5_6:1.31.0.8
	OPENBSD_5_6_BASE:1.31
	OPENBSD_5_5:1.31.0.6
	OPENBSD_5_5_BASE:1.31
	OPENBSD_5_4:1.31.0.2
	OPENBSD_5_4_BASE:1.31
	OPENBSD_5_3:1.30.0.2
	OPENBSD_5_3_BASE:1.30
	OPENBSD_5_2:1.29.0.4
	OPENBSD_5_2_BASE:1.29
	OPENBSD_5_1_BASE:1.29
	OPENBSD_5_1:1.29.0.2
	OPENBSD_5_0:1.28.0.2
	OPENBSD_5_0_BASE:1.28
	OPENBSD_4_9:1.25.0.4
	OPENBSD_4_9_BASE:1.25
	OPENBSD_4_8:1.25.0.2
	OPENBSD_4_8_BASE:1.25
	OPENBSD_4_7:1.23.0.2
	OPENBSD_4_7_BASE:1.23
	OPENBSD_4_6:1.22.0.8
	OPENBSD_4_6_BASE:1.22
	OPENBSD_4_5:1.22.0.4
	OPENBSD_4_5_BASE:1.22
	OPENBSD_4_4:1.22.0.2
	OPENBSD_4_4_BASE:1.22
	OPENBSD_4_3:1.17.0.4
	OPENBSD_4_3_BASE:1.17
	OPENBSD_4_2:1.17.0.2
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.16.0.2
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.16.0.4
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.15.0.2
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.14.0.2
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.12.0.2
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.11.0.2
	OPENBSD_3_6_BASE:1.11
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.7.0.6
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.7.0.4
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.6.0.4
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_7:1.4.0.4
	OPENBSD_2_8:1.4.0.2;
locks; strict;
comment	@ * @;


1.34
date	2017.09.12.06.32.07;	author djm;	state Exp;
branches;
next	1.33;
commitid	Amj5uk8F1JrQpmI5;

1.33
date	2016.09.30.09.19.13;	author markus;	state Exp;
branches;
next	1.32;
commitid	VHQRRel9yTEUINVH;

1.32
date	2016.01.13.23.04.47;	author djm;	state Exp;
branches;
next	1.31;
commitid	ALMWb9LK721aNRnl;

1.31
date	2013.06.02.23.36.29;	author dtucker;	state Exp;
branches
	1.31.4.1
	1.31.10.1;
next	1.30;

1.30
date	2012.08.17.00.45.45;	author dtucker;	state Exp;
branches;
next	1.29;

1.29
date	2011.09.09.22.46.44;	author djm;	state Exp;
branches;
next	1.28;

1.28
date	2011.06.22.22.08.42;	author djm;	state Exp;
branches;
next	1.27;

1.27
date	2011.05.08.12.52.01;	author djm;	state Exp;
branches;
next	1.26;

1.26
date	2011.04.17.22.42.41;	author djm;	state Exp;
branches;
next	1.25;

1.25
date	2010.06.25.23.15.36;	author djm;	state Exp;
branches;
next	1.24;

1.24
date	2010.05.16.12.55.51;	author markus;	state Exp;
branches;
next	1.23;

1.23
date	2010.01.26.01.28.35;	author djm;	state Exp;
branches;
next	1.22;

1.22
date	2008.06.12.15.19.17;	author djm;	state Exp;
branches;
next	1.21;

1.21
date	2008.06.12.04.06.00;	author djm;	state Exp;
branches;
next	1.20;

1.20
date	2008.06.12.03.40.52;	author djm;	state Exp;
branches;
next	1.19;

1.19
date	2008.05.09.14.18.44;	author djm;	state Exp;
branches;
next	1.18;

1.18
date	2008.05.08.13.06.11;	author djm;	state Exp;
branches;
next	1.17;

1.17
date	2007.08.07.07.32.53;	author djm;	state Exp;
branches;
next	1.16;

1.16
date	2006.03.25.22.22.42;	author djm;	state Exp;
branches;
next	1.15;

1.15
date	2006.02.07.01.42.00;	author stevesk;	state Exp;
branches
	1.15.2.1;
next	1.14;

1.14
date	2005.07.04.00.58.43;	author djm;	state Exp;
branches
	1.14.2.1;
next	1.13;

1.13
date	2005.06.16.03.38.36;	author djm;	state Exp;
branches;
next	1.12;

1.12
date	2004.11.07.00.01.46;	author djm;	state Exp;
branches
	1.12.2.1;
next	1.11;

1.11
date	2004.07.11.17.48.47;	author deraadt;	state Exp;
branches
	1.11.2.1;
next	1.10;

1.10
date	2004.06.17.14.52.48;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2004.06.13.15.03.02;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2003.12.16.15.49.51;	author markus;	state Exp;
branches
	1.8.2.1;
next	1.7;

1.7
date	2002.04.22.21.04.52;	author markus;	state Exp;
branches
	1.7.4.1
	1.7.6.1;
next	1.6;

1.6
date	2001.06.26.17.27.23;	author markus;	state Exp;
branches
	1.6.2.1
	1.6.4.1;
next	1.5;

1.5
date	2001.06.26.06.32.50;	author itojun;	state Exp;
branches;
next	1.4;

1.4
date	2001.02.06.22.43.02;	author markus;	state Exp;
branches
	1.4.2.1
	1.4.4.1
	1.4.6.1;
next	1.3;

1.3
date	2001.01.29.01.58.15;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	2001.01.21.19.05.48;	author markus;	state Exp;
branches;
next	1.1;

1.1
date	2001.01.13.19.14.09;	author markus;	state Exp;
branches;
next	;

1.4.2.1
date	2001.02.16.20.12.59;	author jason;	state Exp;
branches;
next	1.4.2.2;

1.4.2.2
date	2001.02.19.17.18.49;	author jason;	state Exp;
branches;
next	1.4.2.3;

1.4.2.3
date	2001.03.21.19.46.24;	author jason;	state Exp;
branches;
next	1.4.2.4;

1.4.2.4
date	2001.05.07.21.09.28;	author jason;	state Exp;
branches;
next	1.4.2.5;

1.4.2.5
date	2001.09.27.00.15.41;	author miod;	state Exp;
branches;
next	;

1.4.4.1
date	2001.03.12.15.44.09;	author jason;	state Exp;
branches;
next	1.4.4.2;

1.4.4.2
date	2001.03.21.18.52.42;	author jason;	state Exp;
branches;
next	;

1.4.6.1
date	2001.09.27.19.03.54;	author jason;	state Exp;
branches;
next	1.4.6.2;

1.4.6.2
date	2002.03.09.00.20.44;	author miod;	state Exp;
branches;
next	1.4.6.3;

1.4.6.3
date	2002.06.02.22.56.10;	author miod;	state Exp;
branches;
next	;

1.6.2.1
date	2002.05.17.00.03.23;	author miod;	state Exp;
branches;
next	;

1.6.4.1
date	2002.05.18.04.12.10;	author jason;	state Exp;
branches;
next	1.6.4.2;

1.6.4.2
date	2002.05.18.04.50.38;	author jason;	state Exp;
branches;
next	1.6.4.3;

1.6.4.3
date	2002.06.26.15.30.38;	author jason;	state Exp;
branches;
next	;

1.7.4.1
date	2004.03.04.18.18.15;	author brad;	state Exp;
branches;
next	;

1.7.6.1
date	2004.02.28.03.51.33;	author brad;	state Exp;
branches;
next	1.7.6.2;

1.7.6.2
date	2004.08.19.22.37.31;	author brad;	state Exp;
branches;
next	;

1.8.2.1
date	2004.08.19.04.13.26;	author brad;	state Exp;
branches;
next	1.8.2.2;

1.8.2.2
date	2005.03.10.17.15.04;	author brad;	state Exp;
branches;
next	;

1.11.2.1
date	2005.03.10.16.28.27;	author brad;	state Exp;
branches;
next	1.11.2.2;

1.11.2.2
date	2005.09.02.03.45.00;	author brad;	state Exp;
branches;
next	;

1.12.2.1
date	2005.09.04.18.40.02;	author brad;	state Exp;
branches;
next	;

1.14.2.1
date	2006.10.06.03.19.32;	author brad;	state Exp;
branches;
next	;

1.15.2.1
date	2006.09.30.04.06.50;	author brad;	state Exp;
branches;
next	;

1.31.4.1
date	2016.01.14.11.53.20;	author sthen;	state Exp;
branches;
next	;
commitid	T6tcqH9MXVck1Xkf;

1.31.10.1
date	2016.01.14.11.50.37;	author sthen;	state Exp;
branches;
next	;
commitid	kuomKbPjnfGwrKrZ;


desc
@@


1.34
log
@refactor channels.c

Move static state to a "struct ssh_channels" that is allocated at
runtime and tracked as a member of struct ssh.

Explicitly pass "struct ssh" to all channels functions.

Replace use of the legacy packet APIs in channels.c.

Rework sshd_config PermitOpen handling: previously the configuration
parser would call directly into the channels layer. After the refactor
this is not possible, as the channels structures are allocated at
connection time and aren't available when the configuration is parsed.
The server config parser now tracks PermitOpen itself and explicitly
configures the channels code later.

ok markus@@
@
text
@/* $OpenBSD: clientloop.h,v 1.33 2016/09/30 09:19:13 markus Exp $ */

/*
 * Author: Tatu Ylonen <ylo@@cs.hut.fi>
 * Copyright (c) 1995 Tatu Ylonen <ylo@@cs.hut.fi>, Espoo, Finland
 *                    All rights reserved
 *
 * As far as I am concerned, the code I have written for this software
 * can be used freely for any purpose.  Any derived versions of this
 * software must be clearly marked as such, and if the derived work is
 * incompatible with the protocol description in the RFC file, it must be
 * called by a name other than "ssh" or "Secure Shell".
 */
/*
 * Copyright (c) 2001 Markus Friedl.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <termios.h>

struct ssh;

/* Client side main loop for the interactive session. */
int	 client_loop(struct ssh *, int, int, int);
int	 client_x11_get_proto(struct ssh *, const char *, const char *,
	    u_int, u_int, char **, char **);
void	 client_global_request_reply_fwd(int, u_int32_t, void *);
void	 client_session2_setup(struct ssh *, int, int, int,
	    const char *, struct termios *, int, Buffer *, char **);
int	 client_request_tun_fwd(struct ssh *, int, int, int);
void	 client_stop_mux(void);

/* Escape filter for protocol 2 sessions */
void	*client_new_escape_filter_ctx(int);
void	 client_filter_cleanup(struct ssh *, int, void *);
int	 client_simple_escape_filter(struct ssh *, Channel *, char *, int);

/* Global request confirmation callbacks */
typedef void global_confirm_cb(struct ssh *, int, u_int32_t, void *);
void	 client_register_global_confirm(global_confirm_cb *, void *);

/* Channel request confirmation callbacks */
enum confirm_action { CONFIRM_WARN = 0, CONFIRM_CLOSE, CONFIRM_TTY };
void client_expect_confirm(struct ssh *, int, const char *,
    enum confirm_action);

/* Multiplexing protocol version */
#define SSHMUX_VER			4

/* Multiplexing control protocol flags */
#define SSHMUX_COMMAND_OPEN		1	/* Open new connection */
#define SSHMUX_COMMAND_ALIVE_CHECK	2	/* Check master is alive */
#define SSHMUX_COMMAND_TERMINATE	3	/* Ask master to exit */
#define SSHMUX_COMMAND_STDIO_FWD	4	/* Open stdio fwd (ssh -W) */
#define SSHMUX_COMMAND_FORWARD		5	/* Forward only, no command */
#define SSHMUX_COMMAND_STOP		6	/* Disable mux but not conn */
#define SSHMUX_COMMAND_CANCEL_FWD	7	/* Cancel forwarding(s) */
#define SSHMUX_COMMAND_PROXY		8	/* Open new connection */

void	muxserver_listen(struct ssh *);
int	muxclient(const char *);
void	mux_exit_message(struct ssh *, Channel *, int);
void	mux_tty_alloc_failed(struct ssh *ssh, Channel *);

@


1.33
log
@ssh proxy mux mode (-O proxy; idea from Simon Tatham):
- mux client speaks the ssh-packet protocol directly over unix-domain socket.
- mux server acts as a proxy, translates channel IDs and relays to the server.
- no filedescriptor passing necessary.
- combined with unix-domain forwarding it's even possible to run mux client
  and server on different machines.
feedback & ok djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: clientloop.h,v 1.32 2016/01/13 23:04:47 djm Exp $ */
d40 2
d43 3
a45 3
int	 client_loop(int, int, int);
int	 client_x11_get_proto(const char *, const char *, u_int, u_int,
	    char **, char **);
d47 3
a49 3
void	 client_session2_setup(int, int, int, const char *, struct termios *,
	    int, Buffer *, char **);
int	 client_request_tun_fwd(int, int, int);
d54 2
a55 2
void	 client_filter_cleanup(int, void *);
int	 client_simple_escape_filter(Channel *, char *, int);
d58 1
a58 1
typedef void global_confirm_cb(int, u_int32_t seq, void *);
d63 2
a64 1
void client_expect_confirm(int, const char *, enum confirm_action);
d79 1
a79 1
void	muxserver_listen(void);
d81 2
a82 2
void	mux_exit_message(Channel *, int);
void	mux_tty_alloc_failed(Channel *);
@


1.32
log
@eliminate fallback from untrusted X11 forwarding to trusted
forwarding when the X server disables the SECURITY extension;
Reported by Thomas Hoger; ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: clientloop.h,v 1.31 2013/06/02 23:36:29 dtucker Exp $ */
d74 1
d77 1
a77 1
void	muxclient(const char *);
@


1.31
log
@No need for the mux cleanup callback to be visible so restore it to static
and call it through the detach_user function pointer.  ok djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: clientloop.h,v 1.30 2012/08/17 00:45:45 dtucker Exp $ */
d42 1
a42 1
void	 client_x11_get_proto(const char *, const char *, u_int, u_int,
@


1.31.4.1
log
@MFC changes by djm@@cvs.openbsd.org, 2016/01/13 16:04:47

"eliminate fallback from untrusted X11 forwarding to trusted
forwarding when the X server disables the SECURITY extension;
Reported by Thomas Hoger; ok deraadt@@"
@
text
@d1 1
a1 1
/* $OpenBSD: clientloop.h,v 1.31 2013/06/02 23:36:29 dtucker Exp $ */
d42 1
a42 1
int	 client_x11_get_proto(const char *, const char *, u_int, u_int,
@


1.31.10.1
log
@MFC changes by djm@@cvs.openbsd.org, 2016/01/13 16:04:47

"eliminate fallback from untrusted X11 forwarding to trusted
forwarding when the X server disables the SECURITY extension;
Reported by Thomas Hoger; ok deraadt@@"
@
text
@d1 1
a1 1
/* $OpenBSD: clientloop.h,v 1.31 2013/06/02 23:36:29 dtucker Exp $ */
d42 1
a42 1
int	 client_x11_get_proto(const char *, const char *, u_int, u_int,
@


1.30
log
@Force a clean shutdown of ControlMaster client sessions when the ~. escape
sequence is used.  This means that ~. should now work in mux clients even
if the server is no longer responding.  Found by tedu, ok djm.
@
text
@d1 1
a1 1
/* $OpenBSD: clientloop.h,v 1.29 2011/09/09 22:46:44 djm Exp $ */
a78 1
void	mux_master_session_cleanup_cb(int, void *);
@


1.29
log
@support for cancelling local and remote port forwards via the multiplex
socket. Use ssh -O cancel -L xx:xx:xx -R yy:yy:yy user@@host" to request
the cancellation of the specified forwardings; ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: clientloop.h,v 1.28 2011/06/22 22:08:42 djm Exp $ */
d79 1
@


1.28
log
@hook up a channel confirm callback to warn the user then requested X11
forwarding was refused by the server; ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: clientloop.h,v 1.27 2011/05/08 12:52:01 djm Exp $ */
d73 1
@


1.27
log
@improve our behaviour when TTY allocation fails: if we are in
RequestTTY=auto mode (the default), then do not treat at TTY
allocation error as fatal but rather just restore the local TTY
to cooked mode and continue. This is more graceful on devices that
never allocate TTYs.

If RequestTTY is set to "yes" or "force", then failure to allocate
a TTY is fatal.

ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: clientloop.h,v 1.26 2011/04/17 22:42:41 djm Exp $ */
d58 4
@


1.26
log
@allow graceful shutdown of multiplexing: request that a mux server removes
its listener socket and refuse future multiplexing requests; ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: clientloop.h,v 1.25 2010/06/25 23:15:36 djm Exp $ */
d73 2
@


1.25
log
@Add X11ForwardTimeout option to specify timeout for untrusted X11
authentication cookies to avoid fallback in X11 code to fully-trusted
implicit authentication using SO_PEERCRED described at:
http://lists.x.org/archives/xorg-devel/2010-May/008636.html

After the X11ForwardTimeout has expired the client will now refuse
incoming X11 channel opens.

based on patch from Tavis Ormandy; "nice" markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: clientloop.h,v 1.24 2010/05/16 12:55:51 markus Exp $ */
d48 1
d68 1
@


1.24
log
@mux support for remote forwarding with dynamic port allocation,
use with
	LPORT=`ssh -S muxsocket -R0:localhost:25 -O forward somehost`
feedback and ok djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: clientloop.h,v 1.23 2010/01/26 01:28:35 djm Exp $ */
d42 1
a42 1
void	 client_x11_get_proto(const char *, const char *, u_int,
@


1.23
log
@rewrite ssh(1) multiplexing code to a more sensible protocol.

The new multiplexing code uses channels for the listener and
accepted control sockets to make the mux master non-blocking, so
no stalls when processing messages from a slave.

avoid use of fatal() in mux master protocol parsing so an errant slave
process cannot take down a running master.

implement requesting of port-forwards over multiplexed sessions. Any
port forwards requested by the slave are added to those the master has
established.

add support for stdio forwarding ("ssh -W host:port ...") in mux slaves.

document master/slave mux protocol so that other tools can use it to
control a running ssh(1). Note: there are no guarantees that this
protocol won't be incompatibly changed (though it is versioned).

feedback Salvador Fandino, dtucker@@
channel changes ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: clientloop.h,v 1.22 2008/06/12 15:19:17 djm Exp $ */
d66 1
@


1.22
log
@The multiplexing escape char handler commit last night introduced a
small memory leak per session; plug it.
@
text
@d1 1
a1 1
/* $OpenBSD: clientloop.h,v 1.21 2008/06/12 04:06:00 djm Exp $ */
d59 1
a59 1
#define SSHMUX_VER			2
d65 1
a65 5

#define SSHMUX_FLAG_TTY			(1)	/* Request tty on open */
#define SSHMUX_FLAG_SUBSYS		(1<<1)	/* Subsystem request on open */
#define SSHMUX_FLAG_X11_FWD		(1<<2)	/* Request X11 forwarding */
#define SSHMUX_FLAG_AGENT_FWD		(1<<3)	/* Request agent forwarding */
a67 1
int	muxserver_accept_control(void);
d69 1
@


1.21
log
@maintain an ordered queue of outstanding global requests that we
expect replies to, similar to the per-channel confirmation queue.

Use this queue to verify success or failure for remote forward
establishment in a race free way.

ok dtucker@@
@
text
@d1 1
a1 1
/* $OpenBSD: clientloop.h,v 1.20 2008/06/12 03:40:52 djm Exp $ */
d51 1
@


1.20
log
@Enable ~ escapes for multiplex slave sessions; give each channel
its own escape state and hook the escape filters up to muxed
channels. bz #1331

Mux slaves do not currently support the ~^Z and ~& escapes.

NB. this change cranks the mux protocol version, so a new ssh
mux client will not be able to connect to a running old ssh
mux master.

ok dtucker@@
@
text
@d1 1
a1 1
/* $OpenBSD: clientloop.h,v 1.19 2008/05/09 14:18:44 djm Exp $ */
d52 4
@


1.19
log
@tidy up session multiplexing code, moving it into its own file and
making the function names more consistent - making ssh.c and
clientloop.c a fair bit more readable.

ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: clientloop.h,v 1.18 2008/05/08 13:06:11 djm Exp $ */
d49 4
d54 1
a54 1
#define SSHMUX_VER			1
a65 14
/* Multiplexing routines */

struct mux_session_confirm_ctx {
	int want_tty;
	int want_subsys;
	int want_x_fwd;
	int want_agent_fwd;
	Buffer cmd;
	char *term;
	struct termios tio;
	char **env;
};

/* mux.c */
@


1.18
log
@Use new channel status confirmation callback system to properly deal
with "important" channel requests that fail, in particular command exec,
shell and subsystem requests. Previously we would optimistically assume
that the requests would always succeed, which could cause hangs if they
did not (e.g. when the server runs out of fds) or were unimplemented by
the server (bz #1384)

Also, properly report failing multiplex channel requests via the mux
client stderr (subject to LogLevel in the mux master) - better than
silently failing.

most bits ok markus@@ (as part of a larger diff)
@
text
@d1 1
a1 1
/* $OpenBSD: clientloop.h,v 1.17 2007/08/07 07:32:53 djm Exp $ */
d61 18
@


1.17
log
@bz#1232: ensure that any specified LocalCommand is executed after the
tunnel device is opened. Also, make failures to open a tunnel device
fatal when ExitOnForwardFailure is active.
Reported by h.goebel AT goebel-consult.de; ok dtucker markus reyk deraadt
@
text
@d1 1
a1 1
/* $OpenBSD: clientloop.h,v 1.16 2006/03/25 22:22:42 djm Exp $ */
d46 1
a46 1
	    int, Buffer *, char **, dispatch_fn *);
@


1.16
log
@standardise spacing in $OpenBSD$ tags; requested by deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: clientloop.h,v 1.15 2006/02/07 01:42:00 stevesk Exp $ */
d47 1
@


1.15
log
@move #include <termios.h> out of includes.h; ok markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: clientloop.h,v 1.14 2005/07/04 00:58:43 djm Exp $	*/
@


1.15.2.1
log
@upgrade to OpenSSH 4.4
@
text
@d1 1
a1 1
/* $OpenBSD: clientloop.h,v 1.16 2006/03/25 22:22:42 djm Exp $ */
@


1.14
log
@implement support for X11 and agent forwarding over multiplex slave
connections. Because of protocol limitations, the slave connections inherit
the master's DISPLAY and SSH_AUTH_SOCK rather than distinctly forwarding
their own.

ok dtucker@@ "put it in" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: clientloop.h,v 1.13 2005/06/16 03:38:36 djm Exp $	*/
d37 2
@


1.14.2.1
log
@upgrade to OpenSSH 4.4
@
text
@d1 1
a1 1
/* $OpenBSD: clientloop.h,v 1.16 2006/03/25 22:22:42 djm Exp $ */
a36 2

#include <termios.h>
@


1.13
log
@move x11_get_proto from ssh.c to clientloop.c, to make muliplexed xfwd easier
later; ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: clientloop.h,v 1.12 2004/11/07 00:01:46 djm Exp $	*/
d46 3
d56 2
@


1.12
log
@add basic control of a running multiplex master connection; including the
ability to check its status and request it to exit; ok markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: clientloop.h,v 1.11 2004/07/11 17:48:47 deraadt Exp $	*/
d40 2
@


1.12.2.1
log
@upgrade to OpenSSH 4.2
@
text
@d1 1
a1 1
/*	$OpenBSD: clientloop.h,v 1.14 2005/07/04 00:58:43 djm Exp $	*/
a39 2
void	 client_x11_get_proto(const char *, const char *, u_int,
	    char **, char **);
a43 3
/* Multiplexing protocol version */
#define SSHMUX_VER			1

a50 2
#define SSHMUX_FLAG_X11_FWD		(1<<2)	/* Request X11 forwarding */
#define SSHMUX_FLAG_AGENT_FWD		(1<<3)	/* Request agent forwarding */
@


1.11
log
@spaces
@
text
@d1 1
a1 1
/*	$OpenBSD: clientloop.h,v 1.10 2004/06/17 14:52:48 djm Exp $	*/
d43 8
@


1.11.2.1
log
@upgrade to OpenSSH 4.0
@
text
@d1 1
a1 1
/*	$OpenBSD: clientloop.h,v 1.12 2004/11/07 00:01:46 djm Exp $	*/
a42 8

/* Multiplexing control protocol flags */
#define SSHMUX_COMMAND_OPEN		1	/* Open new connection */
#define SSHMUX_COMMAND_ALIVE_CHECK	2	/* Check master is alive */
#define SSHMUX_COMMAND_TERMINATE	3	/* Ask master to exit */

#define SSHMUX_FLAG_TTY			(1)	/* Request tty on open */
#define SSHMUX_FLAG_SUBSYS		(1<<1)	/* Subsystem request on open */
@


1.11.2.2
log
@upgrade to OpenSSH 4.2
@
text
@d1 1
a1 1
/*	$OpenBSD: clientloop.h,v 1.14 2005/07/04 00:58:43 djm Exp $	*/
a39 2
void	 client_x11_get_proto(const char *, const char *, u_int,
	    char **, char **);
a43 3
/* Multiplexing protocol version */
#define SSHMUX_VER			1

a50 2
#define SSHMUX_FLAG_X11_FWD		(1<<2)	/* Request X11 forwarding */
#define SSHMUX_FLAG_AGENT_FWD		(1<<3)	/* Request agent forwarding */
@


1.10
log
@support environment passing over shared connections; ok markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: clientloop.h,v 1.9 2004/06/13 15:03:02 djm Exp $	*/
d41 1
a41 1
void	 client_session2_setup(int, int, int, const char *, struct termios *, 
@


1.9
log
@implement session multiplexing in the client (the server has supported this
since 2.0); ok markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: clientloop.h,v 1.8 2003/12/16 15:49:51 markus Exp $	*/
d42 1
a42 1
	    int, Buffer *, dispatch_fn *);
@


1.8
log
@application layer keep alive (ServerAliveInterval ServerAliveCountMax)
for ssh(1), similar to the sshd(8) option; ok beck@@; with help from
jmc and dtucker@@
@
text
@d1 1
a1 1
/*	$OpenBSD: clientloop.h,v 1.7 2002/04/22 21:04:52 markus Exp $	*/
d41 2
@


1.8.2.1
log
@upgrade to OpenSSH 3.9
@
text
@d1 1
a1 1
/*	$OpenBSD: clientloop.h,v 1.11 2004/07/11 17:48:47 deraadt Exp $	*/
a40 2
void	 client_session2_setup(int, int, int, const char *, struct termios *,
	    int, Buffer *, char **, dispatch_fn *);
@


1.8.2.2
log
@upgrade to OpenSSH 4.0
@
text
@d1 1
a1 1
/*	$OpenBSD: clientloop.h,v 1.12 2004/11/07 00:01:46 djm Exp $	*/
a42 8

/* Multiplexing control protocol flags */
#define SSHMUX_COMMAND_OPEN		1	/* Open new connection */
#define SSHMUX_COMMAND_ALIVE_CHECK	2	/* Check master is alive */
#define SSHMUX_COMMAND_TERMINATE	3	/* Ask master to exit */

#define SSHMUX_FLAG_TTY			(1)	/* Request tty on open */
#define SSHMUX_FLAG_SUBSYS		(1<<1)	/* Subsystem request on open */
@


1.7
log
@request reply (success/failure) for -R style fwd in protocol v2,
depends on ordered replies.
fixes http://bugzilla.mindrot.org/show_bug.cgi?id=215; ok provos@@
@
text
@d1 1
a1 1
/*	$OpenBSD: clientloop.h,v 1.6 2001/06/26 17:27:23 markus Exp $	*/
d40 1
a40 1
void	 client_global_request_reply(int type, u_int32_t seq, void *ctxt);
@


1.7.4.1
log
@upgrade to OpenSSH 3.8upgrade to OpenSSH 3.8upgrade to OpenSSH 3.8
@
text
@d1 1
a1 1
/*	$OpenBSD: clientloop.h,v 1.8 2003/12/16 15:49:51 markus Exp $	*/
d40 1
a40 1
void	 client_global_request_reply_fwd(int, u_int32_t, void *);
@


1.7.6.1
log
@upgrade to OpenSSH 3.8
@
text
@d1 1
a1 1
/*	$OpenBSD: clientloop.h,v 1.8 2003/12/16 15:49:51 markus Exp $	*/
d40 1
a40 1
void	 client_global_request_reply_fwd(int, u_int32_t, void *);
@


1.7.6.2
log
@upgrade to OpenSSH 3.9
@
text
@d1 1
a1 1
/*	$OpenBSD: clientloop.h,v 1.11 2004/07/11 17:48:47 deraadt Exp $	*/
a40 2
void	 client_session2_setup(int, int, int, const char *, struct termios *,
	    int, Buffer *, char **, dispatch_fn *);
@


1.6
log
@remove comments from .h, since they are cut&paste from the .c files
and out of sync
@
text
@d1 1
a1 1
/*	$OpenBSD: clientloop.h,v 1.5 2001/06/26 06:32:50 itojun Exp $	*/
d40 1
@


1.6.4.1
log
@Update to OpenSSH-3.2.2
@
text
@d1 1
a1 1
/*	$OpenBSD: clientloop.h,v 1.7 2002/04/22 21:04:52 markus Exp $	*/
a39 1
void	 client_global_request_reply(int type, u_int32_t seq, void *ctxt);
@


1.6.4.2
log
@Update to OpenSSH-3.2.3
@
text
@@


1.6.4.3
log
@Pull in OpenSSH-3.4
@
text
@@


1.6.2.1
log
@Update OpenSSH to version 3.2.2.
@
text
@d1 1
a1 1
/*	$OpenBSD: clientloop.h,v 1.7 2002/04/22 21:04:52 markus Exp $	*/
a39 1
void	 client_global_request_reply(int type, u_int32_t seq, void *ctxt);
@


1.5
log
@prototype pedant.  not very creative...
- () -> (void)
- no variable names
@
text
@d1 1
a1 1
/*	$OpenBSD: clientloop.h,v 1.4 2001/02/06 22:43:02 markus Exp $	*/
d39 1
a39 1
int     client_loop(int, int, int);
@


1.4
log
@remove confusing callback code
@
text
@d1 1
a1 1
/*	$OpenBSD: clientloop.h,v 1.3 2001/01/29 01:58:15 niklas Exp $	*/
d39 1
a39 1
int     client_loop(int have_pty, int escape_char, int id);
@


1.4.6.1
log
@Pull in OpenSSH-2.9.9
@
text
@d1 1
a1 1
/*	$OpenBSD: clientloop.h,v 1.6 2001/06/26 17:27:23 markus Exp $	*/
d39 1
a39 1
int	 client_loop(int, int, int);
@


1.4.6.2
log
@Merge OpenSSH 3.1, keeping /etc as configuration files directory.
(i.e. OpenSSH 3.1 + openbsd29_3.1.patch)
@
text
@@


1.4.6.3
log
@Upgrade to OpenSSH 3.2.3.

Except for improbable compilation error fixes, this should be the last
commit made to the 2.9-STABLE branche. Have fun upgrading.
@
text
@d1 1
a1 1
/*	$OpenBSD: clientloop.h,v 1.7 2002/04/22 21:04:52 markus Exp $	*/
a39 1
void	 client_global_request_reply(int type, u_int32_t seq, void *ctxt);
@


1.4.4.1
log
@OpenSSH-2.5.1 for 2.7 patch branch
@
text
@d1 1
a1 1
/*	$OpenBSD: clientloop.h,v 1.4 2001/02/06 22:43:02 markus Exp $	*/
@


1.4.4.2
log
@Pull in OpenSSH-2.5.2 for 2.7 branch.
@
text
@@


1.4.2.1
log
@Pull in OpenSSH 2.5.0
@
text
@d1 1
a1 1
/*	$OpenBSD: clientloop.h,v 1.4 2001/02/06 22:43:02 markus Exp $	*/
@


1.4.2.2
log
@Pull in OpenSSH-2.5.1
@
text
@@


1.4.2.3
log
@Pull in OpenSSH-2.5.2 for 2.8 branch.
@
text
@@


1.4.2.4
log
@Pull in OpenSSH-2.9 to 2.8 branch.
@
text
@@


1.4.2.5
log
@Pull in OpenSSH 2.9.9 to the 2.8 branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: clientloop.h,v 1.6 2001/06/26 17:27:23 markus Exp $	*/
d39 1
a39 1
int	 client_loop(int, int, int);
@


1.3
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a36 2

void	clientloop_set_session_ident(int id);
@


1.2
log
@split ssh.h and try to cleanup the #include mess. remove unnecessary #includes.
rename util.[ch] -> misc.[ch]
@
text
@d1 2
@


1.1
log
@move callback to headerfile
@
text
@d2 11
d35 1
d37 3
@

