head	1.21;
access;
symbols
	OPENBSD_6_1:1.21.0.6
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.21.0.4
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.20.0.6
	OPENBSD_5_9_BASE:1.20
	OPENBSD_5_8:1.20.0.4
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.20.0.2
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.19.0.22
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.19.0.20
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.19.0.16
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.19.0.14
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.19.0.12
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.19
	OPENBSD_5_1:1.19.0.10
	OPENBSD_5_0:1.19.0.8
	OPENBSD_5_0_BASE:1.19
	OPENBSD_4_9:1.19.0.6
	OPENBSD_4_9_BASE:1.19
	OPENBSD_4_8:1.19.0.4
	OPENBSD_4_8_BASE:1.19
	OPENBSD_4_7:1.19.0.2
	OPENBSD_4_7_BASE:1.19
	OPENBSD_4_6:1.18.0.6
	OPENBSD_4_6_BASE:1.18
	OPENBSD_4_5:1.18.0.2
	OPENBSD_4_5_BASE:1.18
	OPENBSD_4_4:1.17.0.2
	OPENBSD_4_4_BASE:1.17
	OPENBSD_4_3:1.14.0.2
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.12.0.6
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.2
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.4
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.6.0.8
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.6
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.4
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.2
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.4.0.8
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.6
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENBSD_2_9:1.2.0.6
	OPENBSD_3_0:1.2.0.4
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2;
locks; strict;
comment	@ * @;


1.21
date	2016.02.29.20.22.36;	author jca;	state Exp;
branches;
next	1.20;
commitid	fTLsdsfGLcvRL1Vg;

1.20
date	2015.02.25.23.05.47;	author djm;	state Exp;
branches;
next	1.19;
commitid	r20nDJ0fZvvBJqhO;

1.19
date	2010.01.12.00.58.25;	author djm;	state Exp;
branches;
next	1.18;

1.18
date	2008.11.30.11.59.26;	author dtucker;	state Exp;
branches;
next	1.17;

1.17
date	2008.03.24.16.11.07;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2008.03.15.16.19.02;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2008.03.13.01.49.53;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2008.03.02.18.19.35;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2007.09.04.03.21.03;	author djm;	state Exp;
branches;
next	1.12;

1.12
date	2006.08.03.03.34.42;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2006.07.22.20.48.23;	author stevesk;	state Exp;
branches;
next	1.10;

1.10
date	2006.07.11.20.07.25;	author stevesk;	state Exp;
branches;
next	1.9;

1.9
date	2006.07.08.21.47.12;	author stevesk;	state Exp;
branches;
next	1.8;

1.8
date	2006.03.25.13.17.02;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2006.03.19.18.51.18;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2004.08.13.02.51.48;	author djm;	state Exp;
branches
	1.6.6.1
	1.6.8.1;
next	1.5;

1.5
date	2004.06.21.17.36.31;	author avsm;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.26.14.50.04;	author deraadt;	state Exp;
branches
	1.4.6.1
	1.4.8.1;
next	1.3;

1.3
date	2002.06.04.23.05.49;	author markus;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.24.17.53.16;	author stevesk;	state Exp;
branches
	1.2.2.1
	1.2.4.1
	1.2.6.1;
next	1.1;

1.1
date	2002.03.18.17.27.22;	author provos;	state Exp;
branches;
next	;

1.2.2.1
date	2002.06.26.15.30.38;	author jason;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2002.10.11.14.51.52;	author miod;	state Exp;
branches;
next	;

1.2.4.1
date	2002.05.17.00.03.23;	author miod;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2002.06.22.07.23.17;	author miod;	state Exp;
branches;
next	1.2.4.3;

1.2.4.3
date	2002.10.11.14.53.06;	author miod;	state Exp;
branches;
next	;

1.2.6.1
date	2002.06.02.22.56.10;	author miod;	state Exp;
branches;
next	;

1.4.6.1
date	2004.08.19.22.37.31;	author brad;	state Exp;
branches;
next	;

1.4.8.1
date	2004.08.19.04.13.26;	author brad;	state Exp;
branches;
next	;

1.6.6.1
date	2006.10.06.03.19.32;	author brad;	state Exp;
branches;
next	;

1.6.8.1
date	2006.09.30.04.06.50;	author brad;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Print ssize_t with %zd; ok deraadt@@ mmcc@@
@
text
@/* $OpenBSD: monitor_fdpass.c,v 1.20 2015/02/25 23:05:47 djm Exp $ */
/*
 * Copyright 2001 Niels Provos <provos@@citi.umich.edu>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <sys/uio.h>

#include <errno.h>
#include <poll.h>
#include <string.h>
#include <stdarg.h>

#include "log.h"
#include "monitor_fdpass.h"

int
mm_send_fd(int sock, int fd)
{
	struct msghdr msg;
	union {
		struct cmsghdr hdr;
		char buf[CMSG_SPACE(sizeof(int))];
	} cmsgbuf;
	struct cmsghdr *cmsg;
	struct iovec vec;
	char ch = '\0';
	ssize_t n;
	struct pollfd pfd;

	memset(&msg, 0, sizeof(msg));
	memset(&cmsgbuf, 0, sizeof(cmsgbuf));
	msg.msg_control = (caddr_t)&cmsgbuf.buf;
	msg.msg_controllen = sizeof(cmsgbuf.buf);
	cmsg = CMSG_FIRSTHDR(&msg);
	cmsg->cmsg_len = CMSG_LEN(sizeof(int));
	cmsg->cmsg_level = SOL_SOCKET;
	cmsg->cmsg_type = SCM_RIGHTS;
	*(int *)CMSG_DATA(cmsg) = fd;

	vec.iov_base = &ch;
	vec.iov_len = 1;
	msg.msg_iov = &vec;
	msg.msg_iovlen = 1;

	pfd.fd = sock;
	pfd.events = POLLOUT;
	while ((n = sendmsg(sock, &msg, 0)) == -1 &&
	    (errno == EAGAIN || errno == EINTR)) {
		debug3("%s: sendmsg(%d): %s", __func__, fd, strerror(errno));
		(void)poll(&pfd, 1, -1);
	}
	if (n == -1) {
		error("%s: sendmsg(%d): %s", __func__, fd,
		    strerror(errno));
		return -1;
	}

	if (n != 1) {
		error("%s: sendmsg: expected sent 1 got %zd", __func__, n);
		return -1;
	}
	return 0;
}

int
mm_receive_fd(int sock)
{
	struct msghdr msg;
	union {
		struct cmsghdr hdr;
		char buf[CMSG_SPACE(sizeof(int))];
	} cmsgbuf;
	struct cmsghdr *cmsg;
	struct iovec vec;
	ssize_t n;
	char ch;
	int fd;
	struct pollfd pfd;

	memset(&msg, 0, sizeof(msg));
	memset(&cmsgbuf, 0, sizeof(cmsgbuf));
	vec.iov_base = &ch;
	vec.iov_len = 1;
	msg.msg_iov = &vec;
	msg.msg_iovlen = 1;
	msg.msg_control = &cmsgbuf.buf;
	msg.msg_controllen = sizeof(cmsgbuf.buf);

	pfd.fd = sock;
	pfd.events = POLLIN;
	while ((n = recvmsg(sock, &msg, 0)) == -1 &&
	    (errno == EAGAIN || errno == EINTR)) {
		debug3("%s: recvmsg: %s", __func__, strerror(errno));
		(void)poll(&pfd, 1, -1);
	}
	if (n == -1) {
		error("%s: recvmsg: %s", __func__, strerror(errno));
		return -1;
	}

	if (n != 1) {
		error("%s: recvmsg: expected received 1 got %zd", __func__, n);
		return -1;
	}

	cmsg = CMSG_FIRSTHDR(&msg);
	if (cmsg == NULL) {
		error("%s: no message header", __func__);
		return -1;
	}

	if (cmsg->cmsg_type != SCM_RIGHTS) {
		error("%s: expected type %d got %d", __func__,
		    SCM_RIGHTS, cmsg->cmsg_type);
		return -1;
	}
	fd = (*(int *)CMSG_DATA(cmsg));
	return fd;
}
@


1.20
log
@zero cmsgbuf before use; we initialise the bits we use but
valgrind still spams warning on it
@
text
@d1 1
a1 1
/* $OpenBSD: monitor_fdpass.c,v 1.19 2010/01/12 00:58:25 djm Exp $ */
d82 1
a82 2
		error("%s: sendmsg: expected sent 1 got %ld",
		    __func__, (long)n);
d125 1
a125 2
		error("%s: recvmsg: expected received 1 got %ld",
		    __func__, (long)n);
@


1.19
log
@avoid spinning when fd passing on nonblocking sockets by calling poll()
in the EINTR/EAGAIN path, much like we do in atomicio; ok dtucker@@
@
text
@d1 1
a1 1
/* $OpenBSD: monitor_fdpass.c,v 1.18 2008/11/30 11:59:26 dtucker Exp $ */
d54 1
d105 1
@


1.18
log
@Retry sendmsg/recvmsg on EAGAIN and EINTR; ok djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: monitor_fdpass.c,v 1.17 2008/03/24 16:11:07 deraadt Exp $ */
d32 1
d51 1
d67 4
a70 2
	while ((n = sendmsg(sock, &msg, 0)) == -1 && (errno == EAGAIN ||
	    errno == EINTR))
d72 2
d101 1
d111 4
a114 2
	while ((n = recvmsg(sock, &msg, 0)) == -1 && (errno == EAGAIN ||
	    errno == EINTR))
d116 2
@


1.17
log
@msg_controllen has to be CMSG_SPACE so that the kernel can account for
each cmsg_len (ie. msg_controllen = sum of CMSG_ALIGN(cmsg_len).  This
works now that kernel fd passing has been fixed to accept a bit of
sloppiness because of this ABI repair.
lots of discussion with kettenis
@
text
@d1 1
a1 1
/* $OpenBSD: monitor_fdpass.c,v 1.16 2008/03/15 16:19:02 deraadt Exp $ */
d65 4
a68 1
	if ((n = sendmsg(sock, &msg, 0)) == -1) {
d104 4
a107 1
	if ((n = recvmsg(sock, &msg, 0)) == -1) {
@


1.16
log
@Repair the simple cases for msg_controllen where it should just be
CMSG_SIZE(sizeof(int)), not sizeof(buffer) which may be larger because
of alignment; ok kettenis hshoexer
@
text
@d1 1
a1 1
/* $OpenBSD: monitor_fdpass.c,v 1.15 2008/03/13 01:49:53 deraadt Exp $ */
d53 1
a53 1
	msg.msg_controllen = CMSG_LEN(sizeof(int));
d99 1
a99 1
	msg.msg_controllen = CMSG_LEN(sizeof(int));
@


1.15
log
@Correct CMSG_SPACE and CMSG_LEN usage everywhere in the tree. Due to
an extensive discussion with otto, kettenis, millert, and hshoexer
@
text
@d1 1
a1 1
/* $OpenBSD: monitor_fdpass.c,v 1.14 2008/03/02 18:19:35 deraadt Exp $ */
d53 1
a53 1
	msg.msg_controllen = sizeof(cmsgbuf.buf);
d99 1
a99 1
	msg.msg_controllen = sizeof(cmsgbuf.buf);
@


1.14
log
@use a union to ensure alignment of the cmsg (pay attention: various other
parts of the tree need this treatment too); ok djm
@
text
@d1 1
a1 1
/* $OpenBSD: monitor_fdpass.c,v 1.13 2007/09/04 03:21:03 djm Exp $ */
d44 2
a45 2
		char tmp[CMSG_SPACE(sizeof(int))];
	} tmp;
d52 2
a53 2
	msg.msg_control = (caddr_t)&tmp;
	msg.msg_controllen = CMSG_LEN(sizeof(int));
a83 1
		char tmp[CMSG_SPACE(sizeof(int))];
d85 2
a86 1
	} tmp;
d98 2
a99 2
	msg.msg_control = &tmp;
	msg.msg_controllen = sizeof(tmp);
@


1.13
log
@make file descriptor passing code return an error rather than call fatal()
when it encounters problems, and use this to make session multiplexing
masters survive slaves failing to pass all stdio FDs; ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: monitor_fdpass.c,v 1.12 2006/08/03 03:34:42 deraadt Exp $ */
d42 4
a45 1
	char tmp[CMSG_SPACE(sizeof(int))];
d52 1
a52 1
	msg.msg_control = (caddr_t)tmp;
d83 4
a86 1
	char tmp[CMSG_SPACE(sizeof(int))];
d98 1
a98 1
	msg.msg_control = tmp;
@


1.12
log
@almost entirely get rid of the culture of ".h files that include .h files"
ok djm, sort of ok stevesk
makes the pain stop in one easy step
@
text
@d1 1
a1 1
/* $OpenBSD: monitor_fdpass.c,v 1.11 2006/07/22 20:48:23 stevesk Exp $ */
d38 1
a38 1
void
d62 2
a63 2
	if ((n = sendmsg(sock, &msg, 0)) == -1)
		fatal("%s: sendmsg(%d): %s", __func__, fd,
d65 5
a69 2
	if (n != 1)
		fatal("%s: sendmsg: expected sent 1 got %ld",
d71 3
d95 7
a101 4
	if ((n = recvmsg(sock, &msg, 0)) == -1)
		fatal("%s: recvmsg: %s", __func__, strerror(errno));
	if (n != 1)
		fatal("%s: recvmsg: expected received 1 got %ld",
d103 2
d107 7
a113 4
	if (cmsg == NULL)
		fatal("%s: no message header", __func__);
	if (cmsg->cmsg_type != SCM_RIGHTS)
		fatal("%s: expected type %d got %d", __func__,
d115 2
@


1.11
log
@move #include <string.h> out of includes.h
@
text
@d1 1
a1 1
/* $OpenBSD: monitor_fdpass.c,v 1.10 2006/07/11 20:07:25 stevesk Exp $ */
a26 2
#include "includes.h"

d33 1
@


1.10
log
@move #include <errno.h> out of includes.h; ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: monitor_fdpass.c,v 1.9 2006/07/08 21:47:12 stevesk Exp $ */
d34 1
@


1.9
log
@move #include <sys/socket.h> out of includes.h
@
text
@d1 1
a1 1
/* $OpenBSD: monitor_fdpass.c,v 1.8 2006/03/25 13:17:02 djm Exp $ */
d32 2
@


1.8
log
@Put $OpenBSD$ tags back (as comments) to replace the RCSID()s that
Theo nuked - our scripts to sync -portable need them in the files
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d29 2
@


1.7
log
@RCSID() can die
@
text
@d1 1
@


1.6
log
@extra check for no message case; ok markus, deraadt, hshoexer, henning
@
text
@a26 1
RCSID("$OpenBSD: monitor_fdpass.c,v 1.5 2004/06/21 17:36:31 avsm Exp $");
@


1.6.6.1
log
@upgrade to OpenSSH 4.4
@
text
@a0 1
/* $OpenBSD: monitor_fdpass.c,v 1.12 2006/08/03 03:34:42 deraadt Exp $ */
d26 3
a28 2
#include <sys/types.h>
#include <sys/socket.h>
a29 4

#include <errno.h>
#include <string.h>
#include <stdarg.h>
@


1.6.8.1
log
@upgrade to OpenSSH 4.4
@
text
@a0 1
/* $OpenBSD: monitor_fdpass.c,v 1.12 2006/08/03 03:34:42 deraadt Exp $ */
d26 3
a28 2
#include <sys/types.h>
#include <sys/socket.h>
a29 4

#include <errno.h>
#include <string.h>
#include <stdarg.h>
@


1.5
log
@make ssh -Wshadow clean, no functional changes
markus@@ ok
@
text
@d27 1
a27 1
RCSID("$OpenBSD: monitor_fdpass.c,v 1.4 2002/06/26 14:50:04 deraadt Exp $");
d92 2
@


1.4
log
@use ssize_t for recvmsg() and sendmsg() return
@
text
@d27 1
a27 1
RCSID("$OpenBSD: monitor_fdpass.c,v 1.3 2002/06/04 23:05:49 markus Exp $");
d35 1
a35 1
mm_send_fd(int socket, int fd)
d58 1
a58 1
	if ((n = sendmsg(socket, &msg, 0)) == -1)
d67 1
a67 1
mm_receive_fd(int socket)
d85 1
a85 1
	if ((n = recvmsg(socket, &msg, 0)) == -1)
@


1.4.6.1
log
@upgrade to OpenSSH 3.9
@
text
@d27 1
a27 1
RCSID("$OpenBSD: monitor_fdpass.c,v 1.6 2004/08/13 02:51:48 djm Exp $");
d35 1
a35 1
mm_send_fd(int sock, int fd)
d58 1
a58 1
	if ((n = sendmsg(sock, &msg, 0)) == -1)
d67 1
a67 1
mm_receive_fd(int sock)
d85 1
a85 1
	if ((n = recvmsg(sock, &msg, 0)) == -1)
a91 2
	if (cmsg == NULL)
		fatal("%s: no message header", __func__);
@


1.4.8.1
log
@upgrade to OpenSSH 3.9
@
text
@d27 1
a27 1
RCSID("$OpenBSD: monitor_fdpass.c,v 1.6 2004/08/13 02:51:48 djm Exp $");
d35 1
a35 1
mm_send_fd(int sock, int fd)
d58 1
a58 1
	if ((n = sendmsg(sock, &msg, 0)) == -1)
d67 1
a67 1
mm_receive_fd(int sock)
d85 1
a85 1
	if ((n = recvmsg(sock, &msg, 0)) == -1)
a91 2
	if (cmsg == NULL)
		fatal("%s: no message header", __func__);
@


1.3
log
@__FUNCTION__ -> __func__
@
text
@d27 1
a27 1
RCSID("$OpenBSD: monitor_fdpass.c,v 1.2 2002/03/24 17:53:16 stevesk Exp $");
d42 1
a42 1
	int n;
d62 2
a63 2
		fatal("%s: sendmsg: expected sent 1 got %d",
		    __func__, n);
d73 1
d75 1
a75 1
	int fd, n;
d88 2
a89 2
		fatal("%s: recvmsg: expected received 1 got %d",
		    __func__, n);
@


1.2
log
@minor cleanup and more error checking; ok markus@@
@
text
@d27 1
a27 1
RCSID("$OpenBSD: monitor_fdpass.c,v 1.1 2002/03/18 17:27:22 provos Exp $");
d59 1
a59 1
		fatal("%s: sendmsg(%d): %s", __FUNCTION__, fd,
d63 1
a63 1
		    __FUNCTION__, n);
d85 1
a85 1
		fatal("%s: recvmsg: %s", __FUNCTION__, strerror(errno));
d88 1
a88 1
		    __FUNCTION__, n);
d92 1
a92 1
		fatal("%s: expected type %d got %d", __FUNCTION__,
@


1.2.2.1
log
@Pull in OpenSSH-3.4
@
text
@d27 1
a27 1
RCSID("$OpenBSD: monitor_fdpass.c,v 1.3 2002/06/04 23:05:49 markus Exp $");
d59 1
a59 1
		fatal("%s: sendmsg(%d): %s", __func__, fd,
d63 1
a63 1
		    __func__, n);
d85 1
a85 1
		fatal("%s: recvmsg: %s", __func__, strerror(errno));
d88 1
a88 1
		    __func__, n);
d92 1
a92 1
		fatal("%s: expected type %d got %d", __func__,
@


1.2.2.2
log
@Update to OpenSSH 3.5
@
text
@d27 1
a27 1
RCSID("$OpenBSD: monitor_fdpass.c,v 1.4 2002/06/26 14:50:04 deraadt Exp $");
d42 1
a42 1
	ssize_t n;
d62 2
a63 2
		fatal("%s: sendmsg: expected sent 1 got %ld",
		    __func__, (long)n);
a72 1
	ssize_t n;
d74 1
a74 1
	int fd;
d87 2
a88 2
		fatal("%s: recvmsg: expected received 1 got %ld",
		    __func__, (long)n);
@


1.2.6.1
log
@Upgrade to OpenSSH 3.2.3.

Except for improbable compilation error fixes, this should be the last
commit made to the 2.9-STABLE branche. Have fun upgrading.
@
text
@d27 1
a27 1
RCSID("$OpenBSD: monitor_fdpass.c,v 1.2 2002/03/24 17:53:16 stevesk Exp $");
@


1.2.4.1
log
@Update OpenSSH to version 3.2.2.
@
text
@d27 1
a27 1
RCSID("$OpenBSD: monitor_fdpass.c,v 1.2 2002/03/24 17:53:16 stevesk Exp $");
@


1.2.4.2
log
@Update OpenSSH to version 3.3 (with local changes, configuration files still
living in /etc and privsep user being nobody).
@
text
@d27 1
a27 1
RCSID("$OpenBSD: monitor_fdpass.c,v 1.2.4.1 2002/05/17 00:03:23 miod Exp $");
d59 1
a59 1
		fatal("%s: sendmsg(%d): %s", __func__, fd,
d63 1
a63 1
		    __func__, n);
d85 1
a85 1
		fatal("%s: recvmsg: %s", __func__, strerror(errno));
d88 1
a88 1
		    __func__, n);
d92 1
a92 1
		fatal("%s: expected type %d got %d", __func__,
@


1.2.4.3
log
@Update to OpenSSH 3.5
@
text
@d27 1
a27 1
RCSID("$OpenBSD: monitor_fdpass.c,v 1.4 2002/06/26 14:50:04 deraadt Exp $");
d42 1
a42 1
	ssize_t n;
d62 2
a63 2
		fatal("%s: sendmsg: expected sent 1 got %ld",
		    __func__, (long)n);
a72 1
	ssize_t n;
d74 1
a74 1
	int fd;
d87 2
a88 2
		fatal("%s: recvmsg: expected received 1 got %ld",
		    __func__, (long)n);
@


1.1
log
@file descriptor passing abstraction for ssh-privsep
@
text
@d27 1
a27 1
RCSID("$OpenBSD$");
d41 2
a42 1
	char ch;
d58 6
a63 2
	if (sendmsg(socket, &msg, 0) == -1)
		fatal("%s: sendmsg(%d)", __FUNCTION__, fd);
d74 1
d84 5
a88 2
	if (recvmsg(socket, &msg, 0) == -1)
		fatal("%s: recvmsg", __FUNCTION__);
d94 2
a95 1
	return (*(int *)CMSG_DATA(cmsg));
@

