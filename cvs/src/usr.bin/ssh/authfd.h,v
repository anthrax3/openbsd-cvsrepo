head	1.39;
access;
symbols
	OPENBSD_6_1:1.39.0.4
	OPENBSD_6_1_BASE:1.39
	OPENBSD_6_0:1.39.0.6
	OPENBSD_6_0_BASE:1.39
	OPENBSD_5_9:1.39.0.2
	OPENBSD_5_9_BASE:1.39
	OPENBSD_5_8:1.38.0.4
	OPENBSD_5_8_BASE:1.38
	OPENBSD_5_7:1.38.0.2
	OPENBSD_5_7_BASE:1.38
	OPENBSD_5_6:1.37.0.22
	OPENBSD_5_6_BASE:1.37
	OPENBSD_5_5:1.37.0.20
	OPENBSD_5_5_BASE:1.37
	OPENBSD_5_4:1.37.0.16
	OPENBSD_5_4_BASE:1.37
	OPENBSD_5_3:1.37.0.14
	OPENBSD_5_3_BASE:1.37
	OPENBSD_5_2:1.37.0.12
	OPENBSD_5_2_BASE:1.37
	OPENBSD_5_1_BASE:1.37
	OPENBSD_5_1:1.37.0.10
	OPENBSD_5_0:1.37.0.8
	OPENBSD_5_0_BASE:1.37
	OPENBSD_4_9:1.37.0.6
	OPENBSD_4_9_BASE:1.37
	OPENBSD_4_8:1.37.0.4
	OPENBSD_4_8_BASE:1.37
	OPENBSD_4_7:1.37.0.2
	OPENBSD_4_7_BASE:1.37
	OPENBSD_4_6:1.36.0.16
	OPENBSD_4_6_BASE:1.36
	OPENBSD_4_5:1.36.0.12
	OPENBSD_4_5_BASE:1.36
	OPENBSD_4_4:1.36.0.10
	OPENBSD_4_4_BASE:1.36
	OPENBSD_4_3:1.36.0.8
	OPENBSD_4_3_BASE:1.36
	OPENBSD_4_2:1.36.0.6
	OPENBSD_4_2_BASE:1.36
	OPENBSD_4_1:1.36.0.2
	OPENBSD_4_1_BASE:1.36
	OPENBSD_4_0:1.36.0.4
	OPENBSD_4_0_BASE:1.36
	OPENBSD_3_9:1.34.0.10
	OPENBSD_3_9_BASE:1.34
	OPENBSD_3_8:1.34.0.8
	OPENBSD_3_8_BASE:1.34
	OPENBSD_3_7:1.34.0.6
	OPENBSD_3_7_BASE:1.34
	OPENBSD_3_6:1.34.0.4
	OPENBSD_3_6_BASE:1.34
	OPENBSD_3_5:1.34.0.2
	OPENBSD_3_5_BASE:1.34
	OPENBSD_3_4:1.33.0.2
	OPENBSD_3_4_BASE:1.33
	OPENBSD_3_3:1.32.0.2
	OPENBSD_3_3_BASE:1.32
	OPENBSD_3_2:1.31.0.2
	OPENBSD_3_2_BASE:1.31
	OPENBSD_3_1:1.24.0.2
	OPENBSD_3_1_BASE:1.24
	OPENBSD_3_0:1.21.0.2
	OPENBSD_3_0_BASE:1.21
	OPENBSD_2_9_BASE:1.16
	OPENBSD_2_9:1.16.0.2
	OPENBSD_2_8:1.13.0.2
	OPENBSD_2_8_BASE:1.13
	OPENBSD_2_7:1.7.0.2
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3;
locks; strict;
comment	@ * @;


1.39
date	2015.12.04.16.41.28;	author markus;	state Exp;
branches;
next	1.38;
commitid	K3glY441IowbrjDE;

1.38
date	2015.01.14.20.05.27;	author djm;	state Exp;
branches;
next	1.37;
commitid	YqNUZu0ifI7Q95nk;

1.37
date	2009.08.27.17.44.52;	author djm;	state Exp;
branches;
next	1.36;

1.36
date	2006.08.03.03.34.41;	author deraadt;	state Exp;
branches;
next	1.35;

1.35
date	2006.03.25.22.22.42;	author djm;	state Exp;
branches;
next	1.34;

1.34
date	2003.11.21.11.57.03;	author djm;	state Exp;
branches
	1.34.8.1
	1.34.10.1;
next	1.33;

1.33
date	2003.06.11.11.18.38;	author djm;	state Exp;
branches
	1.33.2.1;
next	1.32;

1.32
date	2003.01.23.13.50.27;	author markus;	state Exp;
branches
	1.32.2.1;
next	1.31;

1.31
date	2002.09.11.18.27.25;	author stevesk;	state Exp;
branches
	1.31.2.1;
next	1.30;

1.30
date	2002.06.19.00.27.55;	author deraadt;	state Exp;
branches;
next	1.29;

1.29
date	2002.06.15.01.27.48;	author markus;	state Exp;
branches;
next	1.28;

1.28
date	2002.06.15.00.07.38;	author markus;	state Exp;
branches;
next	1.27;

1.27
date	2002.06.15.00.01.36;	author markus;	state Exp;
branches;
next	1.26;

1.26
date	2002.06.05.21.55.44;	author markus;	state Exp;
branches;
next	1.25;

1.25
date	2002.06.05.19.57.12;	author markus;	state Exp;
branches;
next	1.24;

1.24
date	2002.03.21.22.44.05;	author rees;	state Exp;
branches
	1.24.2.1;
next	1.23;

1.23
date	2002.03.04.17.27.39;	author stevesk;	state Exp;
branches;
next	1.22;

1.22
date	2002.02.24.19.14.59;	author markus;	state Exp;
branches;
next	1.21;

1.21
date	2001.08.07.10.37.46;	author markus;	state Exp;
branches
	1.21.2.1;
next	1.20;

1.20
date	2001.08.01.22.03.33;	author markus;	state Exp;
branches;
next	1.19;

1.19
date	2001.06.26.17.27.22;	author markus;	state Exp;
branches;
next	1.18;

1.18
date	2001.06.26.06.32.47;	author itojun;	state Exp;
branches;
next	1.17;

1.17
date	2001.06.26.04.59.59;	author markus;	state Exp;
branches;
next	1.16;

1.16
date	2000.12.20.19.37.21;	author markus;	state Exp;
branches
	1.16.2.1;
next	1.15;

1.15
date	2000.12.19.23.17.55;	author markus;	state Exp;
branches;
next	1.14;

1.14
date	2000.11.12.19.50.37;	author markus;	state Exp;
branches;
next	1.13;

1.13
date	2000.10.09.21.51.00;	author markus;	state Exp;
branches
	1.13.2.1;
next	1.12;

1.12
date	2000.09.21.11.07.51;	author markus;	state Exp;
branches;
next	1.11;

1.11
date	2000.09.07.20.27.49;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2000.08.19.21.34.43;	author markus;	state Exp;
branches;
next	1.9;

1.9
date	2000.07.16.08.27.21;	author markus;	state Exp;
branches;
next	1.8;

1.8
date	2000.06.20.01.39.38;	author markus;	state Exp;
branches;
next	1.7;

1.7
date	2000.04.14.10.30.30;	author markus;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	99.11.24.19.53.44;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	99.11.24.00.26.00;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	99.11.15.20.53.24;	author markus;	state Exp;
branches;
next	1.3;

1.3
date	99.10.14.18.17.42;	author markus;	state Exp;
branches;
next	1.2;

1.2
date	99.09.28.04.45.35;	author provos;	state Exp;
branches;
next	1.1;

1.1
date	99.09.26.20.53.33;	author deraadt;	state Exp;
branches;
next	;

1.7.2.1
date	2000.09.01.18.23.17;	author jason;	state Exp;
branches;
next	1.7.2.2;

1.7.2.2
date	2000.11.08.21.30.26;	author jason;	state Exp;
branches;
next	1.7.2.3;

1.7.2.3
date	2001.03.12.15.44.08;	author jason;	state Exp;
branches;
next	1.7.2.4;

1.7.2.4
date	2001.03.21.18.52.36;	author jason;	state Exp;
branches;
next	;

1.13.2.1
date	2001.02.16.20.12.54;	author jason;	state Exp;
branches;
next	1.13.2.2;

1.13.2.2
date	2001.02.19.17.18.40;	author jason;	state Exp;
branches;
next	1.13.2.3;

1.13.2.3
date	2001.03.21.19.46.23;	author jason;	state Exp;
branches;
next	1.13.2.4;

1.13.2.4
date	2001.05.07.21.09.26;	author jason;	state Exp;
branches;
next	1.13.2.5;

1.13.2.5
date	2001.09.27.00.15.41;	author miod;	state Exp;
branches;
next	1.13.2.6;

1.13.2.6
date	2002.03.08.17.04.42;	author brad;	state Exp;
branches;
next	;

1.16.2.1
date	2001.09.27.19.03.54;	author jason;	state Exp;
branches;
next	1.16.2.2;

1.16.2.2
date	2002.03.09.00.20.44;	author miod;	state Exp;
branches;
next	1.16.2.3;

1.16.2.3
date	2002.06.02.22.56.09;	author miod;	state Exp;
branches;
next	;

1.21.2.1
date	2002.03.07.17.37.46;	author jason;	state Exp;
branches;
next	1.21.2.2;

1.21.2.2
date	2002.05.17.00.03.23;	author miod;	state Exp;
branches;
next	1.21.2.3;

1.21.2.3
date	2002.06.22.07.23.17;	author miod;	state Exp;
branches;
next	1.21.2.4;

1.21.2.4
date	2002.10.11.14.53.06;	author miod;	state Exp;
branches;
next	;

1.24.2.1
date	2002.06.26.15.30.37;	author jason;	state Exp;
branches;
next	1.24.2.2;

1.24.2.2
date	2002.10.11.14.51.52;	author miod;	state Exp;
branches;
next	1.24.2.3;

1.24.2.3
date	2003.04.03.22.35.16;	author miod;	state Exp;
branches;
next	;

1.31.2.1
date	2003.04.01.00.12.13;	author margarida;	state Exp;
branches;
next	1.31.2.2;

1.31.2.2
date	2003.09.16.21.20.24;	author brad;	state Exp;
branches;
next	;

1.32.2.1
date	2003.09.16.20.50.42;	author brad;	state Exp;
branches;
next	1.32.2.2;

1.32.2.2
date	2004.03.04.18.18.15;	author brad;	state Exp;
branches;
next	;

1.33.2.1
date	2004.02.28.03.51.32;	author brad;	state Exp;
branches;
next	;

1.34.8.1
date	2006.10.06.03.19.32;	author brad;	state Exp;
branches;
next	;

1.34.10.1
date	2006.09.30.04.06.50;	author brad;	state Exp;
branches;
next	;


desc
@@


1.39
log
@implement SHA2-{256,512} for RSASSA-PKCS1-v1_5 signatures (user and host auth)
based on draft-rsa-dsa-sha2-256-03.txt and draft-ssh-ext-info-04.txt;
with & ok djm@@
@
text
@/* $OpenBSD: authfd.h,v 1.38 2015/01/14 20:05:27 djm Exp $ */

/*
 * Author: Tatu Ylonen <ylo@@cs.hut.fi>
 * Copyright (c) 1995 Tatu Ylonen <ylo@@cs.hut.fi>, Espoo, Finland
 *                    All rights reserved
 * Functions to interface with the SSH_AUTHENTICATION_FD socket.
 *
 * As far as I am concerned, the code I have written for this software
 * can be used freely for any purpose.  Any derived versions of this
 * software must be clearly marked as such, and if the derived work is
 * incompatible with the protocol description in the RFC file, it must be
 * called by a name other than "ssh" or "Secure Shell".
 */

#ifndef AUTHFD_H
#define AUTHFD_H

/* List of identities returned by ssh_fetch_identitylist() */
struct ssh_identitylist {
	size_t nkeys;
	struct sshkey **keys;
	char **comments;
};

int	ssh_get_authentication_socket(int *fdp);
void	ssh_close_authentication_socket(int sock);

int	ssh_lock_agent(int sock, int lock, const char *password);
int	ssh_fetch_identitylist(int sock, int version,
	    struct ssh_identitylist **idlp);
void	ssh_free_identitylist(struct ssh_identitylist *idl);
int	ssh_add_identity_constrained(int sock, struct sshkey *key,
	    const char *comment, u_int life, u_int confirm);
int	ssh_remove_identity(int sock, struct sshkey *key);
int	ssh_update_card(int sock, int add, const char *reader_id,
	    const char *pin, u_int life, u_int confirm);
int	ssh_remove_all_identities(int sock, int version);

int	ssh_decrypt_challenge(int sock, struct sshkey* key, BIGNUM *challenge,
	    u_char session_id[16], u_char response[16]);
int	ssh_agent_sign(int sock, struct sshkey *key,
	    u_char **sigp, size_t *lenp,
	    const u_char *data, size_t datalen, const char *alg, u_int compat);

/* Messages for the authentication agent connection. */
#define SSH_AGENTC_REQUEST_RSA_IDENTITIES	1
#define SSH_AGENT_RSA_IDENTITIES_ANSWER		2
#define SSH_AGENTC_RSA_CHALLENGE		3
#define SSH_AGENT_RSA_RESPONSE			4
#define SSH_AGENT_FAILURE			5
#define SSH_AGENT_SUCCESS			6
#define SSH_AGENTC_ADD_RSA_IDENTITY		7
#define SSH_AGENTC_REMOVE_RSA_IDENTITY		8
#define SSH_AGENTC_REMOVE_ALL_RSA_IDENTITIES	9

/* private OpenSSH extensions for SSH2 */
#define SSH2_AGENTC_REQUEST_IDENTITIES		11
#define SSH2_AGENT_IDENTITIES_ANSWER		12
#define SSH2_AGENTC_SIGN_REQUEST		13
#define SSH2_AGENT_SIGN_RESPONSE		14
#define SSH2_AGENTC_ADD_IDENTITY		17
#define SSH2_AGENTC_REMOVE_IDENTITY		18
#define SSH2_AGENTC_REMOVE_ALL_IDENTITIES	19

/* smartcard */
#define SSH_AGENTC_ADD_SMARTCARD_KEY		20
#define SSH_AGENTC_REMOVE_SMARTCARD_KEY		21

/* lock/unlock the agent */
#define SSH_AGENTC_LOCK				22
#define SSH_AGENTC_UNLOCK			23

/* add key with constraints */
#define SSH_AGENTC_ADD_RSA_ID_CONSTRAINED	24
#define SSH2_AGENTC_ADD_ID_CONSTRAINED		25
#define SSH_AGENTC_ADD_SMARTCARD_KEY_CONSTRAINED 26

#define	SSH_AGENT_CONSTRAIN_LIFETIME		1
#define	SSH_AGENT_CONSTRAIN_CONFIRM		2

/* extended failure messages */
#define SSH2_AGENT_FAILURE			30

/* additional error code for ssh.com's ssh-agent2 */
#define SSH_COM_AGENT2_FAILURE			102

#define	SSH_AGENT_OLD_SIGNATURE			0x01
#define	SSH_AGENT_RSA_SHA2_256			0x02
#define	SSH_AGENT_RSA_SHA2_512			0x04

#endif				/* AUTHFD_H */
@


1.38
log
@move authfd.c and its tentacles to the new buffer/key API;
ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: authfd.h,v 1.37 2009/08/27 17:44:52 djm Exp $ */
d44 1
a44 1
	    const u_char *data, size_t datalen, u_int compat);
d89 2
@


1.37
log
@Do not fall back to adding keys without contraints (ssh-add -c / -t ...)
when the agent refuses the constrained add request. This was a useful
migration measure back in 2002 when constraints were new, but just
adds risk now.

bz #1612, report and patch from dkg AT fifthhorseman.net; ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: authfd.h,v 1.36 2006/08/03 03:34:41 deraadt Exp $ */
d19 27
a88 31

typedef struct {
	int	fd;
	Buffer	identities;
	int	howmany;
}	AuthenticationConnection;

int	ssh_agent_present(void);
int	ssh_get_authentication_socket(void);
void	ssh_close_authentication_socket(int);

AuthenticationConnection *ssh_get_authentication_connection(void);
void	ssh_close_authentication_connection(AuthenticationConnection *);
int	 ssh_get_num_identities(AuthenticationConnection *, int);
Key	*ssh_get_first_identity(AuthenticationConnection *, char **, int);
Key	*ssh_get_next_identity(AuthenticationConnection *, char **, int);
int	 ssh_add_identity_constrained(AuthenticationConnection *, Key *,
    const char *, u_int, u_int);
int	 ssh_remove_identity(AuthenticationConnection *, Key *);
int	 ssh_remove_all_identities(AuthenticationConnection *, int);
int	 ssh_lock_agent(AuthenticationConnection *, int, const char *);
int	 ssh_update_card(AuthenticationConnection *, int, const char *,
    const char *, u_int, u_int);

int
ssh_decrypt_challenge(AuthenticationConnection *, Key *, BIGNUM *, u_char[16],
    u_int, u_char[16]);

int
ssh_agent_sign(AuthenticationConnection *, Key *, u_char **, u_int *, u_char *,
    u_int);
@


1.36
log
@almost entirely get rid of the culture of ".h files that include .h files"
ok djm, sort of ok stevesk
makes the pain stop in one easy step
@
text
@d1 1
a1 1
/* $OpenBSD: authfd.h,v 1.35 2006/03/25 22:22:42 djm Exp $ */
a77 1
int	 ssh_add_identity(AuthenticationConnection *, Key *, const char *);
@


1.35
log
@standardise spacing in $OpenBSD$ tags; requested by deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: authfd.h,v 1.34 2003/11/21 11:57:03 djm Exp $ */
a17 2

#include "buffer.h"
@


1.34
log
@unexpand and delete whitespace at EOL; ok markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: authfd.h,v 1.33 2003/06/11 11:18:38 djm Exp $	*/
@


1.34.8.1
log
@upgrade to OpenSSH 4.4
@
text
@d1 1
a1 1
/* $OpenBSD: authfd.h,v 1.36 2006/08/03 03:34:41 deraadt Exp $ */
d18 2
@


1.34.10.1
log
@upgrade to OpenSSH 4.4
@
text
@d1 1
a1 1
/* $OpenBSD: authfd.h,v 1.36 2006/08/03 03:34:41 deraadt Exp $ */
d18 2
@


1.33
log
@make agent constraints (lifetime, confirm) work with smartcard keys; ok markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: authfd.h,v 1.32 2003/01/23 13:50:27 markus Exp $	*/
d86 1
a86 1
int	 ssh_update_card(AuthenticationConnection *, int, const char *, 
@


1.33.2.1
log
@upgrade to OpenSSH 3.8
@
text
@d1 1
a1 1
/*	$OpenBSD: authfd.h,v 1.34 2003/11/21 11:57:03 djm Exp $	*/
d86 1
a86 1
int	 ssh_update_card(AuthenticationConnection *, int, const char *,
@


1.32
log
@ssh-add -c, prompt user for confirmation (using ssh-askpass) when
private agent key is used; with djm@@; test by dugsong@@, djm@@; ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: authfd.h,v 1.31 2002/09/11 18:27:25 stevesk Exp $	*/
d52 1
d86 2
a87 1
int	 ssh_update_card(AuthenticationConnection *, int, const char *, const char *);
@


1.32.2.1
log
@upgrade to OpenSSH 3.7
@
text
@d1 1
a1 1
/*	$OpenBSD: authfd.h,v 1.33 2003/06/11 11:18:38 djm Exp $	*/
a51 1
#define SSH_AGENTC_ADD_SMARTCARD_KEY_CONSTRAINED 26
d85 1
a85 2
int	 ssh_update_card(AuthenticationConnection *, int, const char *, 
    const char *, u_int, u_int);
@


1.32.2.2
log
@upgrade to OpenSSH 3.8upgrade to OpenSSH 3.8upgrade to OpenSSH 3.8
@
text
@d1 1
a1 1
/*	$OpenBSD: authfd.h,v 1.34 2003/11/21 11:57:03 djm Exp $	*/
d86 1
a86 1
int	 ssh_update_card(AuthenticationConnection *, int, const char *,
@


1.31
log
@don't connect to agent to test for presence if we've previously
connected; ok markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: authfd.h,v 1.30 2002/06/19 00:27:55 deraadt Exp $	*/
d54 1
d80 2
a81 1
int	 ssh_add_identity_constrained(AuthenticationConnection *, Key *, const char *, u_int);
@


1.31.2.1
log
@Update to OpenSSH 3.6
@
text
@d1 1
a1 1
/*	$OpenBSD: authfd.h,v 1.32 2003/01/23 13:50:27 markus Exp $	*/
a53 1
#define	SSH_AGENT_CONSTRAIN_CONFIRM		2
d79 1
a79 2
int	 ssh_add_identity_constrained(AuthenticationConnection *, Key *,
    const char *, u_int, u_int);
@


1.31.2.2
log
@upgrade to OpenSSH 3.7
@
text
@d1 1
a1 1
/*	$OpenBSD: authfd.h,v 1.33 2003/06/11 11:18:38 djm Exp $	*/
a51 1
#define SSH_AGENTC_ADD_SMARTCARD_KEY_CONSTRAINED 26
d85 1
a85 2
int	 ssh_update_card(AuthenticationConnection *, int, const char *, 
    const char *, u_int, u_int);
@


1.30
log
@KNF done automatically while reading....
@
text
@d1 1
a1 1
/*	$OpenBSD: authfd.h,v 1.29 2002/06/15 01:27:48 markus Exp $	*/
d69 1
@


1.29
log
@remove the CONSTRAIN_IDENTITY messages and introduce a new
ADD_ID message with contraints instead. contraints can be
only added together with the private key.
@
text
@d1 1
a1 1
/*	$OpenBSD: authfd.h,v 1.28 2002/06/15 00:07:38 markus Exp $	*/
d43 1
a43 1
#define SSH_AGENTC_REMOVE_SMARTCARD_KEY	        21
d47 1
a47 1
#define SSH_AGENTC_UNLOCK		        23
d59 1
a59 1
#define SSH_COM_AGENT2_FAILURE                  102
d64 4
a67 4
	int     fd;
	Buffer  identities;
	int     howmany;
}       AuthenticationConnection;
d69 2
a70 2
int      ssh_get_authentication_socket(void);
void     ssh_close_authentication_socket(int);
d73 1
a73 1
void     ssh_close_authentication_connection(AuthenticationConnection *);
@


1.28
log
@fix stupid typo
@
text
@d1 1
a1 1
/*	$OpenBSD: authfd.h,v 1.27 2002/06/15 00:01:36 markus Exp $	*/
d49 3
a51 3
/* constrain key usage */
#define	SSH_AGENTC_CONSTRAIN_IDENTITY1		24
#define	SSH_AGENTC_CONSTRAIN_IDENTITY		25
d78 1
a78 1
int	 ssh_constrain_identity(AuthenticationConnection *, Key *, u_int);
@


1.27
log
@break agent key lifetime protocol and allow other contraints for key usage.
@
text
@d1 1
a1 1
/*	$OpenBSD: authfd.h,v 1.26 2002/06/05 21:55:44 markus Exp $	*/
d50 2
a51 2
#define	SSH_AGENTC_CONTRAIN_IDENTITY1		24
#define	SSH_AGENTC_CONTRAIN_IDENTITY		25
d53 1
a53 1
#define	SSH_AGENT_CONTRAIN_LIFETIME		1
d78 1
a78 1
int	 ssh_contrain_identity(AuthenticationConnection *, Key *, u_int);
@


1.26
log
@ssh-add -t life,  Set lifetime (in seconds) when adding identities; ok provos@@
@
text
@d1 1
a1 1
/*	$OpenBSD: authfd.h,v 1.25 2002/06/05 19:57:12 markus Exp $	*/
d49 5
a53 3
/* set key lifetime */
#define	SSH_AGENTC_LIFETIME_IDENTITY1		24
#define	SSH_AGENTC_LIFETIME_IDENTITY		25
d78 1
a78 1
int	 ssh_lifetime_identity(AuthenticationConnection *, Key *, u_int);
@


1.25
log
@ssh-add -x for lock and -X for unlocking the agent.
todo: encrypt private keys with locked...
@
text
@d1 1
a1 1
/*	$OpenBSD: authfd.h,v 1.24 2002/03/21 22:44:05 rees Exp $	*/
d49 4
d76 1
@


1.24
log
@Add PIN-protection for secret key.
@
text
@d1 1
a1 1
/*	$OpenBSD: authfd.h,v 1.23 2002/03/04 17:27:39 stevesk Exp $	*/
d45 4
d74 1
@


1.24.2.1
log
@Pull in OpenSSH-3.4
@
text
@d1 1
a1 1
/*	$OpenBSD: authfd.h,v 1.30 2002/06/19 00:27:55 deraadt Exp $	*/
d43 1
a43 11
#define SSH_AGENTC_REMOVE_SMARTCARD_KEY		21

/* lock/unlock the agent */
#define SSH_AGENTC_LOCK				22
#define SSH_AGENTC_UNLOCK			23

/* add key with constraints */
#define SSH_AGENTC_ADD_RSA_ID_CONSTRAINED	24
#define SSH2_AGENTC_ADD_ID_CONSTRAINED		25

#define	SSH_AGENT_CONSTRAIN_LIFETIME		1
d49 1
a49 1
#define SSH_COM_AGENT2_FAILURE			102
d54 4
a57 4
	int	fd;
	Buffer	identities;
	int	howmany;
}	AuthenticationConnection;
d59 2
a60 2
int	ssh_get_authentication_socket(void);
void	ssh_close_authentication_socket(int);
d63 1
a63 1
void	ssh_close_authentication_connection(AuthenticationConnection *);
a67 1
int	 ssh_add_identity_constrained(AuthenticationConnection *, Key *, const char *, u_int);
a69 1
int	 ssh_lock_agent(AuthenticationConnection *, int, const char *);
@


1.24.2.2
log
@Update to OpenSSH 3.5
@
text
@d1 1
a1 1
/*	$OpenBSD: authfd.h,v 1.31 2002/09/11 18:27:25 stevesk Exp $	*/
a68 1
int	ssh_agent_present(void);
@


1.24.2.3
log
@Merge OpenSSH 3.6.1
@
text
@d1 1
a1 1
/*	$OpenBSD: authfd.h,v 1.32 2003/01/23 13:50:27 markus Exp $	*/
a53 1
#define	SSH_AGENT_CONSTRAIN_CONFIRM		2
d79 1
a79 2
int	 ssh_add_identity_constrained(AuthenticationConnection *, Key *,
    const char *, u_int, u_int);
@


1.23
log
@$OpenBSD$ and RCSID() cleanup: don't use RCSID() in .h files; add
missing RCSID() to .c files and remove dup /*$OpenBSD$*/ from .c
files.  ok markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: authfd.h,v 1.22 2002/02/24 19:14:59 markus Exp $	*/
d70 1
a70 1
int	 ssh_update_card(AuthenticationConnection *, int, const char *);
@


1.22
log
@signed vs. unsigned: make size arguments u_int, ok stevesk@@
@
text
@d1 2
a14 2

/* RCSID("$OpenBSD: authfd.h,v 1.21 2001/08/07 10:37:46 markus Exp $"); */
@


1.21
log
@extended failure messages from galb@@vandyke.com
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: authfd.h,v 1.20 2001/08/01 22:03:33 markus Exp $"); */
d77 2
a78 2
ssh_agent_sign(AuthenticationConnection *, Key *, u_char **, int *, u_char *,
    int);
@


1.21.2.1
log
@Update to OpenSSH-3.1 on 3.0-stable branch
@
text
@a0 2
/*	$OpenBSD: authfd.h,v 1.23 2002/03/04 17:27:39 stevesk Exp $	*/

d14 2
d77 2
a78 2
ssh_agent_sign(AuthenticationConnection *, Key *, u_char **, u_int *, u_char *,
    u_int);
@


1.21.2.2
log
@Update OpenSSH to version 3.2.2.
@
text
@d1 1
a1 1
/*	$OpenBSD: authfd.h,v 1.24 2002/03/21 22:44:05 rees Exp $	*/
d70 1
a70 1
int	 ssh_update_card(AuthenticationConnection *, int, const char *, const char *);
@


1.21.2.3
log
@Update OpenSSH to version 3.3 (with local changes, configuration files still
living in /etc and privsep user being nobody).
@
text
@d1 1
a1 1
/*	$OpenBSD: authfd.h,v 1.21.2.2 2002/05/17 00:03:23 miod Exp $	*/
d43 1
a43 11
#define SSH_AGENTC_REMOVE_SMARTCARD_KEY		21

/* lock/unlock the agent */
#define SSH_AGENTC_LOCK				22
#define SSH_AGENTC_UNLOCK			23

/* add key with constraints */
#define SSH_AGENTC_ADD_RSA_ID_CONSTRAINED	24
#define SSH2_AGENTC_ADD_ID_CONSTRAINED		25

#define	SSH_AGENT_CONSTRAIN_LIFETIME		1
d49 1
a49 1
#define SSH_COM_AGENT2_FAILURE			102
d54 4
a57 4
	int	fd;
	Buffer	identities;
	int	howmany;
}	AuthenticationConnection;
d59 2
a60 2
int	ssh_get_authentication_socket(void);
void	ssh_close_authentication_socket(int);
d63 1
a63 1
void	ssh_close_authentication_connection(AuthenticationConnection *);
a67 1
int	 ssh_add_identity_constrained(AuthenticationConnection *, Key *, const char *, u_int);
a69 1
int	 ssh_lock_agent(AuthenticationConnection *, int, const char *);
@


1.21.2.4
log
@Update to OpenSSH 3.5
@
text
@d1 1
a1 1
/*	$OpenBSD: authfd.h,v 1.31 2002/09/11 18:27:25 stevesk Exp $	*/
a68 1
int	ssh_agent_present(void);
@


1.20
log
@use strings instead of ints for smartcard reader ids
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: authfd.h,v 1.19 2001/06/26 17:27:22 markus Exp $"); */
d44 3
@


1.19
log
@remove comments from .h, since they are cut&paste from the .c files
and out of sync
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: authfd.h,v 1.18 2001/06/26 06:32:47 itojun Exp $"); */
d65 1
a65 1
int      ssh_remove_identity(AuthenticationConnection *, Key *);
d67 1
a67 1
int	 ssh_update_card(AuthenticationConnection *, int, int);
@


1.18
log
@prototype pedant.  not very creative...
- () -> (void)
- no variable names
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: authfd.h,v 1.17 2001/06/26 04:59:59 markus Exp $"); */
d46 1
a46 1
#define SSH_COM_AGENT2_FAILURE                   102
a49 1

d56 2
a57 2
/* Returns the number of the authentication fd, or -1 if there is none. */
int     ssh_get_authentication_socket(void);
a58 13
/*
 * This should be called for any descriptor returned by
 * ssh_get_authentication_socket().  Depending on the way the descriptor was
 * obtained, this may close the descriptor.
 */
void    ssh_close_authentication_socket(int);

/*
 * Opens and connects a private socket for communication with the
 * authentication agent.  Returns NULL if an error occurred and the
 * connection could not be opened.  The connection should be closed by the
 * caller by calling ssh_close_authentication_connection().
 */
d60 2
a61 17

/*
 * Closes the connection to the authentication agent and frees any associated
 * memory.
 */
void    ssh_close_authentication_connection(AuthenticationConnection *);

/*
 * Returns the number authentication identity held by the agent.
 */
int	ssh_get_num_identities(AuthenticationConnection *, int);

/*
 * Returns the first authentication identity held by the agent or NULL if
 * no identies are available. Caller must free comment and key.
 * Note that you cannot mix calls with different versions.
 */
a62 7

/*
 * Returns the next authentication identity for the agent.  Other functions
 * can be called between this and ssh_get_first_identity or two calls of this
 * function.  This returns NULL if there are no more identities.  The caller
 * must free key and comment after a successful return.
 */
d64 4
a68 4
/*
 * Requests the agent to decrypt the given challenge.  Returns true if the
 * agent claims it was able to decrypt it.
 */
a72 1
/* Requests the agent to sign data using key */
d74 2
a75 26
ssh_agent_sign(AuthenticationConnection *, Key *, u_char **, int *,
    u_char *, int);

/*
 * Adds an identity to the authentication server.  This call is not meant to
 * be used by normal applications.  This returns true if the identity was
 * successfully added.
 */
int
ssh_add_identity(AuthenticationConnection *, Key *, const char *);

/*
 * Removes the identity from the authentication server.  This call is not
 * meant to be used by normal applications.  This returns true if the
 * identity was successfully added.
 */
int     ssh_remove_identity(AuthenticationConnection *, Key *);

/*
 * Removes all identities from the authentication agent.  This call is not
 * meant to be used by normal applications.  This returns true if the
 * operation was successful.
 */
int	ssh_remove_all_identities(AuthenticationConnection *, int);

int	ssh_update_card(AuthenticationConnection *, int, int);
@


1.17
log
@initial support for smartcards in the agent
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: authfd.h,v 1.16 2000/12/20 19:37:21 markus Exp $"); */
d65 1
a65 1
void    ssh_close_authentication_socket(int authfd);
d79 1
a79 1
void    ssh_close_authentication_connection(AuthenticationConnection *auth);
d84 1
a84 1
int	ssh_get_num_identities(AuthenticationConnection *auth, int version);
d91 1
a91 1
Key	*ssh_get_first_identity(AuthenticationConnection *auth, char **comment, int version);
d99 1
a99 1
Key	*ssh_get_next_identity(AuthenticationConnection *auth, char **comment, int version);
d106 2
a107 5
ssh_decrypt_challenge(AuthenticationConnection *auth,
    Key *key, BIGNUM * challenge,
    u_char session_id[16],
    u_int response_type,
    u_char response[16]);
d111 2
a112 4
ssh_agent_sign(AuthenticationConnection *auth,
    Key *key,
    u_char **sigp, int *lenp,
    u_char *data, int datalen);
d120 1
a120 2
ssh_add_identity(AuthenticationConnection *auth, Key *key,
    const char *comment);
d127 1
a127 1
int     ssh_remove_identity(AuthenticationConnection *auth, Key *key);
d134 1
a134 1
int	ssh_remove_all_identities(AuthenticationConnection *auth, int version);
d136 1
a136 1
int	ssh_update_card(AuthenticationConnection *auth, int add, int reader_id);
@


1.16
log
@fix prototypes; from  stevesk@@pobox.com
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: authfd.h,v 1.15 2000/12/19 23:17:55 markus Exp $"); */
d41 4
d140 3
a142 1
int     ssh_remove_all_identities(AuthenticationConnection *auth, int version);
@


1.16.2.1
log
@Pull in OpenSSH-2.9.9
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: authfd.h,v 1.21 2001/08/07 10:37:46 markus Exp $"); */
a40 7
/* smartcard */
#define SSH_AGENTC_ADD_SMARTCARD_KEY		20
#define SSH_AGENTC_REMOVE_SMARTCARD_KEY	        21

/* extended failure messages */
#define SSH2_AGENT_FAILURE			30

d42 1
a42 1
#define SSH_COM_AGENT2_FAILURE                  102
d46 1
d53 2
a54 2
int      ssh_get_authentication_socket(void);
void     ssh_close_authentication_socket(int);
d56 13
a69 8
void     ssh_close_authentication_connection(AuthenticationConnection *);
int	 ssh_get_num_identities(AuthenticationConnection *, int);
Key	*ssh_get_first_identity(AuthenticationConnection *, char **, int);
Key	*ssh_get_next_identity(AuthenticationConnection *, char **, int);
int	 ssh_add_identity(AuthenticationConnection *, Key *, const char *);
int	 ssh_remove_identity(AuthenticationConnection *, Key *);
int	 ssh_remove_all_identities(AuthenticationConnection *, int);
int	 ssh_update_card(AuthenticationConnection *, int, const char *);
d71 30
d102 5
a106 2
ssh_decrypt_challenge(AuthenticationConnection *, Key *, BIGNUM *, u_char[16],
    u_int, u_char[16]);
d108 1
d110 27
a136 2
ssh_agent_sign(AuthenticationConnection *, Key *, u_char **, int *, u_char *,
    int);
@


1.16.2.2
log
@Merge OpenSSH 3.1, keeping /etc as configuration files directory.
(i.e. OpenSSH 3.1 + openbsd29_3.1.patch)
@
text
@a0 2
/*	$OpenBSD: authfd.h,v 1.23 2002/03/04 17:27:39 stevesk Exp $	*/

d14 2
d77 2
a78 2
ssh_agent_sign(AuthenticationConnection *, Key *, u_char **, u_int *, u_char *,
    u_int);
@


1.16.2.3
log
@Upgrade to OpenSSH 3.2.3.

Except for improbable compilation error fixes, this should be the last
commit made to the 2.9-STABLE branche. Have fun upgrading.
@
text
@d1 1
a1 1
/*	$OpenBSD: authfd.h,v 1.24 2002/03/21 22:44:05 rees Exp $	*/
d70 1
a70 1
int	 ssh_update_card(AuthenticationConnection *, int, const char *, const char *);
@


1.15
log
@replace 'unsigned bla' with 'u_bla' everywhere. also, replace 'char unsigned'
with u_char.
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: authfd.h,v 1.14 2000/11/12 19:50:37 markus Exp $"); */
d54 1
a54 1
int     ssh_get_authentication_socket();
d69 1
a69 1
AuthenticationConnection *ssh_get_authentication_connection();
@


1.14
log
@add support for RSA to SSH2.  please test.

there are now 3 types of keys: RSA1 is used by ssh-1 only,
RSA and DSA are used by SSH2.

you can use 'ssh-keygen -t rsa -f ssh2_rsa_file' to generate RSA
keys for SSH2 and use the RSA keys for hostkeys or for user keys.

SSH2 RSA or DSA keys are added to .ssh/authorised_keys2 as before.

IdentityFile2, HostDsaKey and DSAAuthentication are obsolete.
you can use multiple IdentityFile and HostKey for all types of keys.

the option DSAAuthentication is replaced by PubkeyAuthetication.
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: authfd.h,v 1.13 2000/10/09 21:51:00 markus Exp $"); */
d104 3
a106 3
    unsigned char session_id[16],
    unsigned int response_type,
    unsigned char response[16]);
d112 2
a113 2
    unsigned char **sigp, int *lenp,
    unsigned char *data, int datalen);
@


1.13
log
@interop with ssh-agent2, from <res@@shore.net>
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: authfd.h,v 1.12 2000/09/21 11:07:51 markus Exp $"); */
d76 5
@


1.13.2.1
log
@Pull in OpenSSH 2.5.0
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: authfd.h,v 1.16 2000/12/20 19:37:21 markus Exp $"); */
d54 1
a54 1
int     ssh_get_authentication_socket(void);
d69 1
a69 1
AuthenticationConnection *ssh_get_authentication_connection(void);
a77 5
 * Returns the number authentication identity held by the agent.
 */
int	ssh_get_num_identities(AuthenticationConnection *auth, int version);

/*
d99 3
a101 3
    u_char session_id[16],
    u_int response_type,
    u_char response[16]);
d107 2
a108 2
    u_char **sigp, int *lenp,
    u_char *data, int datalen);
@


1.13.2.2
log
@Pull in OpenSSH-2.5.1
@
text
@@


1.13.2.3
log
@Pull in OpenSSH-2.5.2 for 2.8 branch.
@
text
@@


1.13.2.4
log
@Pull in OpenSSH-2.9 to 2.8 branch.
@
text
@@


1.13.2.5
log
@Pull in OpenSSH 2.9.9 to the 2.8 branch.
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: authfd.h,v 1.21 2001/08/07 10:37:46 markus Exp $"); */
a40 7
/* smartcard */
#define SSH_AGENTC_ADD_SMARTCARD_KEY		20
#define SSH_AGENTC_REMOVE_SMARTCARD_KEY	        21

/* extended failure messages */
#define SSH2_AGENT_FAILURE			30

d42 1
a42 1
#define SSH_COM_AGENT2_FAILURE                  102
d46 1
d53 2
a54 2
int      ssh_get_authentication_socket(void);
void     ssh_close_authentication_socket(int);
d56 13
a69 8
void     ssh_close_authentication_connection(AuthenticationConnection *);
int	 ssh_get_num_identities(AuthenticationConnection *, int);
Key	*ssh_get_first_identity(AuthenticationConnection *, char **, int);
Key	*ssh_get_next_identity(AuthenticationConnection *, char **, int);
int	 ssh_add_identity(AuthenticationConnection *, Key *, const char *);
int	 ssh_remove_identity(AuthenticationConnection *, Key *);
int	 ssh_remove_all_identities(AuthenticationConnection *, int);
int	 ssh_update_card(AuthenticationConnection *, int, const char *);
d71 30
d102 5
a106 2
ssh_decrypt_challenge(AuthenticationConnection *, Key *, BIGNUM *, u_char[16],
    u_int, u_char[16]);
d108 1
d110 27
a136 2
ssh_agent_sign(AuthenticationConnection *, Key *, u_char **, int *, u_char *,
    int);
@


1.13.2.6
log
@Merge OpenSSH 3.1.
@
text
@a0 2
/*	$OpenBSD: authfd.h,v 1.23 2002/03/04 17:27:39 stevesk Exp $	*/

d14 2
d77 2
a78 2
ssh_agent_sign(AuthenticationConnection *, Key *, u_char **, u_int *, u_char *,
    u_int);
@


1.12
log
@bug compat for old ssh.com software
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: authfd.h,v 1.11 2000/09/07 20:27:49 deraadt Exp $"); */
d32 1
d40 3
@


1.11
log
@cleanup copyright notices on all files.  I have attempted to be accurate with
the details.  everything is now under Tatu's licence (which I copied from his
readme), and/or the core-sdi bsd-ish thing for deattack, or various openbsd
developers under a 2-term bsd licence.  We're not changing any rules, just
being accurate.
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: authfd.h,v 1.10 2000/08/19 21:34:43 markus Exp $"); */
d39 3
@


1.10
log
@add SSH2/DSA support to the agent and some other DSA related cleanups.
(note that we cannot talk to ssh.com's ssh2 agents)
@
text
@a1 3
 *
 * authfd.h
 *
a2 1
 *
a4 3
 *
 * Created: Wed Mar 29 01:17:41 1995 ylo
 *
d7 5
d14 1
a14 1
/* RCSID("$OpenBSD: authfd.h,v 1.9 2000/07/16 08:27:21 markus Exp $"); */
@


1.9
log
@make ssh-add accept dsa keys (the agent does not)
@
text
@d16 1
a16 1
/* RCSID("$OpenBSD: authfd.h,v 1.8 2000/06/20 01:39:38 markus Exp $"); */
a37 2
#define SSH2_AGENT_FAILURE			SSH_AGENT_FAILURE
#define SSH2_AGENT_SUCCESS			SSH_AGENT_SUCCESS
a43 1
	Buffer  packet;
d47 1
d70 1
a70 1
void    ssh_close_authentication_connection(AuthenticationConnection * ac);
d73 3
a75 4
 * Returns the first authentication identity held by the agent. Returns true
 * if an identity is available, 0 otherwise. The caller must initialize the
 * integers before the call, and free the comment after a successful call
 * (before calling ssh_get_next_identity).
d77 1
a77 3
int
ssh_get_first_identity(AuthenticationConnection * connection,
    BIGNUM * e, BIGNUM * n, char **comment);
d82 2
a83 2
 * function.  This returns 0 if there are no more identities.  The caller
 * must free comment after a successful return.
d85 1
a85 3
int
ssh_get_next_identity(AuthenticationConnection * connection,
    BIGNUM * e, BIGNUM * n, char **comment);
d87 4
a90 2
/* Requests the agent to decrypt the given challenge.  Returns true if
   the agent claims it was able to decrypt it. */
d92 2
a93 2
ssh_decrypt_challenge(AuthenticationConnection * auth,
    BIGNUM * e, BIGNUM * n, BIGNUM * challenge,
d98 7
d111 1
a111 1
ssh_add_identity(AuthenticationConnection * connection, Key *key,
d119 1
a119 1
int     ssh_remove_identity(AuthenticationConnection * connection, RSA * key);
d126 1
a126 4
int     ssh_remove_all_identities(AuthenticationConnection * connection);

/* Closes the connection to the authentication agent. */
void    ssh_close_authentication(AuthenticationConnection * connection);
@


1.8
log
@OpenBSD tag
@
text
@d16 1
a16 1
/* RCSID("$OpenBSD: authfd.h,v 1.7 2000/04/14 10:30:30 markus Exp $"); */
d34 10
d109 1
a109 1
ssh_add_identity(AuthenticationConnection * connection, RSA * key,
@


1.7
log
@whitespace cleanup
@
text
@d16 1
a16 1
/* RCSID("$Id: authfd.h,v 1.6 1999/11/24 19:53:44 markus Exp $"); */
@


1.7.2.1
log
@Pull in the rest of openssh-2.2.0 to 2.7 branch (luvin' cvs...)
@
text
@d16 1
a16 1
/* RCSID("$OpenBSD: authfd.h,v 1.10 2000/08/19 21:34:43 markus Exp $"); */
a33 8
#define SSH2_AGENTC_REQUEST_IDENTITIES		11
#define SSH2_AGENT_IDENTITIES_ANSWER		12
#define SSH2_AGENTC_SIGN_REQUEST		13
#define SSH2_AGENT_SIGN_RESPONSE		14
#define SSH2_AGENTC_ADD_IDENTITY		17
#define SSH2_AGENTC_REMOVE_IDENTITY		18
#define SSH2_AGENTC_REMOVE_ALL_IDENTITIES	19

d36 1
a39 1

d62 1
a62 1
void    ssh_close_authentication_connection(AuthenticationConnection *auth);
d65 4
a68 3
 * Returns the first authentication identity held by the agent or NULL if
 * no identies are available. Caller must free comment and key.
 * Note that you cannot mix calls with different versions.
d70 3
a72 1
Key	*ssh_get_first_identity(AuthenticationConnection *auth, char **comment, int version);
d77 2
a78 2
 * function.  This returns NULL if there are no more identities.  The caller
 * must free key and comment after a successful return.
d80 3
a82 1
Key	*ssh_get_next_identity(AuthenticationConnection *auth, char **comment, int version);
d84 2
a85 4
/*
 * Requests the agent to decrypt the given challenge.  Returns true if the
 * agent claims it was able to decrypt it.
 */
d87 2
a88 2
ssh_decrypt_challenge(AuthenticationConnection *auth,
    Key *key, BIGNUM * challenge,
a92 7
/* Requests the agent to sign data using key */
int
ssh_agent_sign(AuthenticationConnection *auth,
    Key *key,
    unsigned char **sigp, int *lenp,
    unsigned char *data, int datalen);

d99 1
a99 1
ssh_add_identity(AuthenticationConnection *auth, Key *key,
d107 1
a107 1
int     ssh_remove_identity(AuthenticationConnection *auth, Key *key);
d114 4
a117 1
int     ssh_remove_all_identities(AuthenticationConnection *auth, int version);
@


1.7.2.2
log
@openssh-2.3.0 (again) for 2.7 branch
@
text
@d2 3
d6 1
d9 3
a13 5
 * As far as I am concerned, the code I have written for this software
 * can be used freely for any purpose.  Any derived versions of this
 * software must be clearly marked as such, and if the derived work is
 * incompatible with the protocol description in the RFC file, it must be
 * called by a name other than "ssh" or "Secure Shell".
d16 1
a16 1
/* RCSID("$OpenBSD: authfd.h,v 1.13 2000/10/09 21:51:00 markus Exp $"); */
a33 1
/* private OpenSSH extensions for SSH2 */
a40 6

/* additional error code for ssh.com's ssh-agent2 */
#define SSH_COM_AGENT2_FAILURE                   102

#define	SSH_AGENT_OLD_SIGNATURE			0x01

@


1.7.2.3
log
@OpenSSH-2.5.1 for 2.7 patch branch
@
text
@d14 1
a14 1
/* RCSID("$OpenBSD: authfd.h,v 1.16 2000/12/20 19:37:21 markus Exp $"); */
d54 1
a54 1
int     ssh_get_authentication_socket(void);
d69 1
a69 1
AuthenticationConnection *ssh_get_authentication_connection(void);
a77 5
 * Returns the number authentication identity held by the agent.
 */
int	ssh_get_num_identities(AuthenticationConnection *auth, int version);

/*
d99 3
a101 3
    u_char session_id[16],
    u_int response_type,
    u_char response[16]);
d107 2
a108 2
    u_char **sigp, int *lenp,
    u_char *data, int datalen);
@


1.7.2.4
log
@Pull in OpenSSH-2.5.2 for 2.7 branch.
@
text
@@


1.6
log
@KNF, final part 3
@
text
@d2 1
a2 1
 * 
d4 1
a4 1
 * 
d6 1
a6 1
 * 
d9 1
a9 1
 * 
d11 1
a11 1
 * 
d13 1
a13 1
 * 
d16 1
a16 1
/* RCSID("$Id: authfd.h,v 1.5 1999/11/24 00:26:00 deraadt Exp $"); */
d70 1
a70 1
int 
d80 1
a80 1
int 
d86 1
a86 1
int 
d98 1
a98 1
int    
@


1.5
log
@much more KNF
@
text
@d16 1
a16 1
/* RCSID("$Id: authfd.h,v 1.4 1999/11/15 20:53:24 markus Exp $"); */
d43 5
a47 3
/* This should be called for any descriptor returned by
   ssh_get_authentication_socket().  Depending on the way the descriptor was
   obtained, this may close the descriptor. */
d50 6
a55 4
/* Opens and connects a private socket for communication with the
   authentication agent.  Returns NULL if an error occurred and the
   connection could not be opened.  The connection should be closed by
   the caller by calling ssh_close_authentication_connection(). */
d58 4
a61 2
/* Closes the connection to the authentication agent and frees any associated
   memory. */
d64 6
a69 4
/* Returns the first authentication identity held by the agent.
   Returns true if an identity is available, 0 otherwise.
   The caller must initialize the integers before the call, and free the
   comment after a successful call (before calling ssh_get_next_identity). */
d74 6
a79 4
/* Returns the next authentication identity for the agent.  Other functions
   can be called between this and ssh_get_first_identity or two calls of this
   function.  This returns 0 if there are no more identities.  The caller
   must free comment after a successful return. */
d93 22
a114 16
/* Adds an identity to the authentication server.  This call is not meant to
   be used by normal applications.  This returns true if the identity
   was successfully added. */
	int     ssh_add_identity(AuthenticationConnection * connection,
            RSA * key, const char *comment);

/* Removes the identity from the authentication server.  This call is
   not meant to be used by normal applications.  This returns true if the
   identity was successfully added. */
	int     ssh_remove_identity(AuthenticationConnection * connection,
            RSA * key);

/* Removes all identities from the authentication agent.  This call is not
   meant to be used by normal applications.  This returns true if the
   operation was successful. */
	int     ssh_remove_all_identities(AuthenticationConnection * connection);
d117 1
a117 1
	void    ssh_close_authentication(AuthenticationConnection * connection);
@


1.4
log
@the keysize of rsa-parameter 'n' is passed implizit,
a few more checks and warnings about 'pretended' keysizes.
@
text
@d2 13
d16 1
a16 14
authfd.h

Author: Tatu Ylonen <ylo@@cs.hut.fi>

Copyright (c) 1995 Tatu Ylonen <ylo@@cs.hut.fi>, Espoo, Finland
                   All rights reserved

Created: Wed Mar 29 01:17:41 1995 ylo

Functions to interface with the SSH_AUTHENTICATION_FD socket.

*/

/* RCSID("$Id: authfd.h,v 1.3 1999/10/14 18:17:42 markus Exp $"); */
d34 6
a39 8
typedef struct
{
  int fd;
  Buffer packet;
  Buffer identities;
  int howmany;
} AuthenticationConnection;

d41 1
a41 1
int ssh_get_authentication_socket();
d43 1
a43 1
/* This should be called for any descriptor returned by 
d46 1
a46 1
void ssh_close_authentication_socket(int authfd);
d49 1
a49 1
   authentication agent.  Returns NULL if an error occurred and the 
d56 1
a56 1
void ssh_close_authentication_connection(AuthenticationConnection *ac);
d62 3
a64 2
int ssh_get_first_identity(AuthenticationConnection *connection,
			   BIGNUM *e, BIGNUM *n, char **comment);
d70 3
a72 2
int ssh_get_next_identity(AuthenticationConnection *connection,
			  BIGNUM *e, BIGNUM *n, char **comment);
d76 6
a81 5
int ssh_decrypt_challenge(AuthenticationConnection *auth,
			  BIGNUM *e, BIGNUM *n, BIGNUM *challenge,
			  unsigned char session_id[16], 
			  unsigned int response_type,
			  unsigned char response[16]);
d86 2
a87 2
int ssh_add_identity(AuthenticationConnection *connection,
		     RSA *key, const char *comment);
d92 2
a93 2
int ssh_remove_identity(AuthenticationConnection *connection,
			RSA *key);
d98 1
a98 1
int ssh_remove_all_identities(AuthenticationConnection *connection);
d101 1
a101 1
void ssh_close_authentication(AuthenticationConnection *connection);
d103 1
a103 1
#endif /* AUTHFD_H */
@


1.3
log
@fix old connect() race security-bug for ssh-agent and agent-forwarding
by removing the connect() junk, with the following restrictions:
1) change the version to "OpenSSH-1.1":
   agent-forwarding will work only between OpenSSH-1.1 client and
   OpenSSH-1.1 server
2) renamed the environment variable of OpenSSH-1.1 to
   "SSH_AUTH_SOCKET", since useing OpenSSH-1.0 ssh-add against the new
   ssh-agent does not work
@
text
@d16 1
a16 1
/* RCSID("$Id: authfd.h,v 1.2 1999/09/28 04:45:35 provos Exp $"); */
d65 1
a65 1
			   int *bitsp, BIGNUM *e, BIGNUM *n, char **comment);
d72 1
a72 1
			  int *bitsp, BIGNUM *e, BIGNUM *n, char **comment);
d77 1
a77 1
			  int bits, BIGNUM *e, BIGNUM *n, BIGNUM *challenge,
@


1.2
log
@convert all uses of gmp to SSL bignum
convert all used of rsa to SSL rsa functions
remove all use of randomstate to OpenBSD arc4random() and arc4_stir()
all this done at a long long night in Canada.
@
text
@d16 1
a16 1
/* RCSID("$Id: authfd.h,v 1.2 1999/05/04 11:58:27 bg Exp $"); */
a22 3
/* Message types for SSH_AUTHENTICATION_FD socket. */
#define SSH_AUTHFD_CONNECT	0xf0

d43 1
a43 1
int ssh_get_authentication_fd();
d46 1
a46 1
   ssh_get_authentication_fd().  Depending on the way the descriptor was
a48 4

/* Opens a socket to the authentication server.  Returns the number of
   that socket, or -1 if no connection could be made. */
int ssh_get_authentication_connection_fd();
@


1.1
log
@i bet a lot of people didn't know what ssh 1.2.16 had a nice license.
well, except for the patent issues.  someone in sweden (forget their
name at the moment) cleaned out most of the patented code, and now
this code removes rsa code.  when this is done, it will link against
libssl, but the work isn't completely done yet.  then we need to bring
this up to modern days, featurewise.
@
text
@d72 1
a72 1
			   int *bitsp, MP_INT *e, MP_INT *n, char **comment);
d79 1
a79 1
			  int *bitsp, MP_INT *e, MP_INT *n, char **comment);
d84 1
a84 1
			  int bits, MP_INT *e, MP_INT *n, MP_INT *challenge,
d93 1
a93 1
		     RSAPrivateKey *key, const char *comment);
d99 1
a99 1
			RSAPublicKey *key);
@

