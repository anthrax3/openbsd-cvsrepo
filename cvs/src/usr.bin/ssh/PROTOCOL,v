head	1.31;
access;
symbols
	OPENBSD_6_2:1.31.0.4
	OPENBSD_6_2_BASE:1.31
	OPENBSD_6_1:1.30.0.6
	OPENBSD_6_1_BASE:1.30
	OPENBSD_6_0:1.30.0.4
	OPENBSD_6_0_BASE:1.30
	OPENBSD_5_9:1.29.0.4
	OPENBSD_5_9_BASE:1.29
	OPENBSD_5_8:1.29.0.2
	OPENBSD_5_8_BASE:1.29
	OPENBSD_5_7:1.27.0.2
	OPENBSD_5_7_BASE:1.27
	OPENBSD_5_6:1.24.0.4
	OPENBSD_5_6_BASE:1.24
	OPENBSD_5_5:1.23.0.4
	OPENBSD_5_5_BASE:1.23
	OPENBSD_5_4:1.20.0.4
	OPENBSD_5_4_BASE:1.20
	OPENBSD_5_3:1.20.0.2
	OPENBSD_5_3_BASE:1.20
	OPENBSD_5_2:1.17.0.8
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.6
	OPENBSD_5_0:1.17.0.4
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.17.0.2
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.15.0.4
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.2
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.12.0.6
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.2
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.11.0.2
	OPENBSD_4_4_BASE:1.11;
locks; strict;
comment	@# @;


1.31
date	2017.05.26.01.40.07;	author djm;	state Exp;
branches;
next	1.30;
commitid	wwzQi96MTQSSvYr7;

1.30
date	2016.04.08.06.35.54;	author djm;	state Exp;
branches;
next	1.29;
commitid	01PypWUKlfIRAIre;

1.29
date	2015.07.17.03.09.19;	author djm;	state Exp;
branches;
next	1.28;
commitid	fPYJRTRTE6VQ44x2;

1.28
date	2015.05.08.03.56.51;	author djm;	state Exp;
branches;
next	1.27;
commitid	nNRsnk70tMvQF1WZ;

1.27
date	2015.02.20.22.17.21;	author djm;	state Exp;
branches;
next	1.26;
commitid	9L88tCQWzQkTa0uX;

1.26
date	2015.02.16.22.13.32;	author djm;	state Exp;
branches;
next	1.25;
commitid	vWL0dluw4oITNbM8;

1.25
date	2015.01.26.03.04.45;	author djm;	state Exp;
branches;
next	1.24;
commitid	Xp9DfQmHQHbZ815k;

1.24
date	2014.07.15.15.54.14;	author millert;	state Exp;
branches;
next	1.23;
commitid	z7plx8Gkj6l2sxem;

1.23
date	2013.12.01.23.19.05;	author djm;	state Exp;
branches;
next	1.22;

1.22
date	2013.11.21.00.45.43;	author djm;	state Exp;
branches;
next	1.21;

1.21
date	2013.10.17.00.30.13;	author djm;	state Exp;
branches;
next	1.20;

1.20
date	2013.01.08.18.49.04;	author markus;	state Exp;
branches;
next	1.19;

1.19
date	2013.01.03.12.49.01;	author djm;	state Exp;
branches;
next	1.18;

1.18
date	2012.12.11.22.31.18;	author markus;	state Exp;
branches;
next	1.17;

1.17
date	2010.12.04.00.18.01;	author djm;	state Exp;
branches;
next	1.16;

1.16
date	2010.08.31.11.54.45;	author djm;	state Exp;
branches;
next	1.15;

1.15
date	2010.02.26.20.29.54;	author djm;	state Exp;
branches;
next	1.14;

1.14
date	2010.01.09.00.57.10;	author djm;	state Exp;
branches;
next	1.13;

1.13
date	2009.12.20.23.20.40;	author djm;	state Exp;
branches;
next	1.12;

1.12
date	2009.02.14.06.35.49;	author djm;	state Exp;
branches;
next	1.11;

1.11
date	2008.07.05.05.16.01;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2008.06.30.12.18.34;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2008.06.28.14.08.30;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2008.06.28.07.25.07;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2008.06.12.05.15.41;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2008.06.10.22.15.23;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2008.06.09.13.38.46;	author dtucker;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.08.20.15.29;	author dtucker;	state Exp;
branches;
next	1.3;

1.3
date	2008.06.07.21.52.46;	author djm;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.17.01.31.56;	author djm;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.16.08.30.42;	author djm;	state Exp;
branches;
next	;


desc
@@


1.31
log
@fix references to obsolete v00 cert format; spotted by Jakub Jelen
@
text
@This documents OpenSSH's deviations and extensions to the published SSH
protocol.

Note that OpenSSH's sftp and sftp-server implement revision 3 of the SSH
filexfer protocol described in:

http://www.openssh.com/txt/draft-ietf-secsh-filexfer-02.txt

Newer versions of the draft will not be supported, though some features
are individually implemented as extensions described below.

The protocol used by OpenSSH's ssh-agent is described in the file
PROTOCOL.agent

1. Transport protocol changes

1.1. transport: Protocol 2 MAC algorithm "umac-64@@openssh.com"

This is a new transport-layer MAC method using the UMAC algorithm
(rfc4418). This method is identical to the "umac-64" method documented
in:

http://www.openssh.com/txt/draft-miller-secsh-umac-01.txt

1.2. transport: Protocol 2 compression algorithm "zlib@@openssh.com"

This transport-layer compression method uses the zlib compression
algorithm (identical to the "zlib" method in rfc4253), but delays the
start of compression until after authentication has completed. This
avoids exposing compression code to attacks from unauthenticated users.

The method is documented in:

http://www.openssh.com/txt/draft-miller-secsh-compression-delayed-00.txt

1.3. transport: New public key algorithms "ssh-rsa-cert-v01@@openssh.com",
     "ssh-dsa-cert-v01@@openssh.com",
     "ecdsa-sha2-nistp256-cert-v01@@openssh.com",
     "ecdsa-sha2-nistp384-cert-v01@@openssh.com" and
     "ecdsa-sha2-nistp521-cert-v01@@openssh.com"

OpenSSH introduces new public key algorithms to support certificate
authentication for users and host keys. These methods are documented
in the file PROTOCOL.certkeys

1.4. transport: Elliptic Curve cryptography

OpenSSH supports ECC key exchange and public key authentication as
specified in RFC5656. Only the ecdsa-sha2-nistp256, ecdsa-sha2-nistp384
and ecdsa-sha2-nistp521 curves over GF(p) are supported. Elliptic
curve points encoded using point compression are NOT accepted or
generated.

1.5 transport: Protocol 2 Encrypt-then-MAC MAC algorithms

OpenSSH supports MAC algorithms, whose names contain "-etm", that
perform the calculations in a different order to that defined in RFC
4253. These variants use the so-called "encrypt then MAC" ordering,
calculating the MAC over the packet ciphertext rather than the
plaintext. This ordering closes a security flaw in the SSH transport
protocol, where decryption of unauthenticated ciphertext provided a
"decryption oracle" that could, in conjunction with cipher flaws, reveal
session plaintext.

Specifically, the "-etm" MAC algorithms modify the transport protocol
to calculate the MAC over the packet ciphertext and to send the packet
length unencrypted. This is necessary for the transport to obtain the
length of the packet and location of the MAC tag so that it may be
verified without decrypting unauthenticated data.

As such, the MAC covers:

      mac = MAC(key, sequence_number || packet_length || encrypted_packet)

where "packet_length" is encoded as a uint32 and "encrypted_packet"
contains:

      byte      padding_length
      byte[n1]  payload; n1 = packet_length - padding_length - 1
      byte[n2]  random padding; n2 = padding_length

1.6 transport: AES-GCM

OpenSSH supports the AES-GCM algorithm as specified in RFC 5647.
Because of problems with the specification of the key exchange
the behaviour of OpenSSH differs from the RFC as follows:

AES-GCM is only negotiated as the cipher algorithms
"aes128-gcm@@openssh.com" or "aes256-gcm@@openssh.com" and never as
an MAC algorithm. Additionally, if AES-GCM is selected as the cipher
the exchanged MAC algorithms are ignored and there doesn't have to be
a matching MAC.

1.7 transport: chacha20-poly1305@@openssh.com authenticated encryption

OpenSSH supports authenticated encryption using ChaCha20 and Poly1305
as described in PROTOCOL.chacha20poly1305.

1.8 transport: curve25519-sha256@@libssh.org key exchange algorithm

OpenSSH supports the use of ECDH in Curve25519 for key exchange as
described at:
http://git.libssh.org/users/aris/libssh.git/plain/doc/curve25519-sha256@@libssh.org.txt?h=curve25519

2. Connection protocol changes

2.1. connection: Channel write close extension "eow@@openssh.com"

The SSH connection protocol (rfc4254) provides the SSH_MSG_CHANNEL_EOF
message to allow an endpoint to signal its peer that it will send no
more data over a channel. Unfortunately, there is no symmetric way for
an endpoint to request that its peer should cease sending data to it
while still keeping the channel open for the endpoint to send data to
the peer.

This is desirable, since it saves the transmission of data that would
otherwise need to be discarded and it allows an endpoint to signal local
processes of the condition, e.g. by closing the corresponding file
descriptor.

OpenSSH implements a channel extension message to perform this
signalling: "eow@@openssh.com" (End Of Write). This message is sent by
an endpoint when the local output of a session channel is closed or
experiences a write error. The message is formatted as follows:

	byte		SSH_MSG_CHANNEL_REQUEST
	uint32		recipient channel
	string		"eow@@openssh.com"
	boolean		FALSE

On receiving this message, the peer SHOULD cease sending data of
the channel and MAY signal the process from which the channel data
originates (e.g. by closing its read file descriptor).

As with the symmetric SSH_MSG_CHANNEL_EOF message, the channel does
remain open after a "eow@@openssh.com" has been sent and more data may
still be sent in the other direction. This message does not consume
window space and may be sent even if no window space is available.

NB. due to certain broken SSH implementations aborting upon receipt
of this message (in contravention of RFC4254 section 5.4), this
message is only sent to OpenSSH peers (identified by banner).
Other SSH implementations may be whitelisted to receive this message
upon request.

2.2. connection: disallow additional sessions extension
     "no-more-sessions@@openssh.com"

Most SSH connections will only ever request a single session, but a
attacker may abuse a running ssh client to surreptitiously open
additional sessions under their control. OpenSSH provides a global
request "no-more-sessions@@openssh.com" to mitigate this attack.

When an OpenSSH client expects that it will never open another session
(i.e. it has been started with connection multiplexing disabled), it
will send the following global request:

	byte		SSH_MSG_GLOBAL_REQUEST
	string		"no-more-sessions@@openssh.com"
	char		want-reply

On receipt of such a message, an OpenSSH server will refuse to open
future channels of type "session" and instead immediately abort the
connection.

Note that this is not a general defence against compromised clients
(that is impossible), but it thwarts a simple attack.

NB. due to certain broken SSH implementations aborting upon receipt
of this message, the no-more-sessions request is only sent to OpenSSH
servers (identified by banner). Other SSH implementations may be
whitelisted to receive this message upon request.

2.3. connection: Tunnel forward extension "tun@@openssh.com"

OpenSSH supports layer 2 and layer 3 tunnelling via the "tun@@openssh.com"
channel type. This channel type supports forwarding of network packets
with datagram boundaries intact between endpoints equipped with
interfaces like the BSD tun(4) device. Tunnel forwarding channels are
requested by the client with the following packet:

	byte		SSH_MSG_CHANNEL_OPEN
	string		"tun@@openssh.com"
	uint32		sender channel
	uint32		initial window size
	uint32		maximum packet size
	uint32		tunnel mode
	uint32		remote unit number

The "tunnel mode" parameter specifies whether the tunnel should forward
layer 2 frames or layer 3 packets. It may take one of the following values:

	SSH_TUNMODE_POINTOPOINT  1		/* layer 3 packets */
	SSH_TUNMODE_ETHERNET     2		/* layer 2 frames */

The "tunnel unit number" specifies the remote interface number, or may
be 0x7fffffff to allow the server to automatically chose an interface. A
server that is not willing to open a client-specified unit should refuse
the request with a SSH_MSG_CHANNEL_OPEN_FAILURE error. On successful
open, the server should reply with SSH_MSG_CHANNEL_OPEN_SUCCESS.

Once established the client and server may exchange packet or frames
over the tunnel channel by encapsulating them in SSH protocol strings
and sending them as channel data. This ensures that packet boundaries
are kept intact. Specifically, packets are transmitted using normal
SSH_MSG_CHANNEL_DATA packets:

	byte		SSH_MSG_CHANNEL_DATA
	uint32		recipient channel
	string		data

The contents of the "data" field for layer 3 packets is:

	uint32			packet length
	uint32			address family
	byte[packet length - 4]	packet data

The "address family" field identifies the type of packet in the message.
It may be one of:

	SSH_TUN_AF_INET		2		/* IPv4 */
	SSH_TUN_AF_INET6	24		/* IPv6 */

The "packet data" field consists of the IPv4/IPv6 datagram itself
without any link layer header.

The contents of the "data" field for layer 2 packets is:

	uint32			packet length
	byte[packet length]	frame

The "frame" field contains an IEEE 802.3 Ethernet frame, including
header.

2.4. connection: Unix domain socket forwarding

OpenSSH supports local and remote Unix domain socket forwarding
using the "streamlocal" extension.  Forwarding is initiated as per
TCP sockets but with a single path instead of a host and port.

Similar to direct-tcpip, direct-streamlocal is sent by the client
to request that the server make a connection to a Unix domain socket.

	byte		SSH_MSG_CHANNEL_OPEN
	string		"direct-streamlocal@@openssh.com"
	uint32		sender channel
	uint32		initial window size
	uint32		maximum packet size
	string		socket path
	string		reserved
	uint32		reserved

Similar to forwarded-tcpip, forwarded-streamlocal is sent by the
server when the client has previously send the server a streamlocal-forward
GLOBAL_REQUEST.

	byte		SSH_MSG_CHANNEL_OPEN
	string		"forwarded-streamlocal@@openssh.com"
	uint32		sender channel
	uint32		initial window size
	uint32		maximum packet size
	string		socket path
	string		reserved for future use

The reserved field is not currently defined and is ignored on the
remote end.  It is intended to be used in the future to pass
information about the socket file, such as ownership and mode.
The client currently sends the empty string for this field.

Similar to tcpip-forward, streamlocal-forward is sent by the client
to request remote forwarding of a Unix domain socket.

	byte		SSH2_MSG_GLOBAL_REQUEST
	string		"streamlocal-forward@@openssh.com"
	boolean		TRUE
	string		socket path

Similar to cancel-tcpip-forward, cancel-streamlocal-forward is sent
by the client cancel the forwarding of a Unix domain socket.

	byte		SSH2_MSG_GLOBAL_REQUEST
	string		"cancel-streamlocal-forward@@openssh.com"
	boolean		FALSE
	string		socket path

2.5. connection: hostkey update and rotation "hostkeys-00@@openssh.com"
and "hostkeys-prove-00@@openssh.com"

OpenSSH supports a protocol extension allowing a server to inform
a client of all its protocol v.2 host keys after user-authentication
has completed.

	byte		SSH_MSG_GLOBAL_REQUEST
	string		"hostkeys-00@@openssh.com"
	string[]	hostkeys

Upon receiving this message, a client should check which of the
supplied host keys are present in known_hosts. For keys that are
not present, it should send a "hostkeys-prove@@openssh.com" message
to request the server prove ownership of the private half of the
key.

	byte		SSH_MSG_GLOBAL_REQUEST
	string		"hostkeys-prove-00@@openssh.com"
	char		1 /* want-reply */
	string[]	hostkeys

When a server receives this message, it should generate a signature
using each requested key over the following:

	string		"hostkeys-prove-00@@openssh.com"
	string		session identifier
	string		hostkey

These signatures should be included in the reply, in the order matching
the hostkeys in the request:

	byte		SSH_MSG_REQUEST_SUCCESS
	string[]	signatures

When the client receives this reply (and not a failure), it should
validate the signatures and may update its known_hosts file, adding keys
that it has not seen before and deleting keys for the server host that
are no longer offered.

These extensions let a client learn key types that it had not previously
encountered, thereby allowing it to potentially upgrade from weaker
key algorithms to better ones. It also supports graceful key rotation:
a server may offer multiple keys of the same type for a period (to
give clients an opportunity to learn them using this extension) before
removing the deprecated key from those offered.

3. SFTP protocol changes

3.1. sftp: Reversal of arguments to SSH_FXP_SYMLINK

When OpenSSH's sftp-server was implemented, the order of the arguments
to the SSH_FXP_SYMLINK method was inadvertently reversed. Unfortunately,
the reversal was not noticed until the server was widely deployed. Since
fixing this to follow the specification would cause incompatibility, the
current order was retained. For correct operation, clients should send
SSH_FXP_SYMLINK as follows:

	uint32		id
	string		targetpath
	string		linkpath

3.2. sftp: Server extension announcement in SSH_FXP_VERSION

OpenSSH's sftp-server lists the extensions it supports using the
standard extension announcement mechanism in the SSH_FXP_VERSION server
hello packet:

	uint32		3		/* protocol version */
	string		ext1-name
	string		ext1-version
	string		ext2-name
	string		ext2-version
	...
	string		extN-name
	string		extN-version

Each extension reports its integer version number as an ASCII encoded
string, e.g. "1". The version will be incremented if the extension is
ever changed in an incompatible way. The server MAY advertise the same
extension with multiple versions (though this is unlikely). Clients MUST
check the version number before attempting to use the extension.

3.3. sftp: Extension request "posix-rename@@openssh.com"

This operation provides a rename operation with POSIX semantics, which
are different to those provided by the standard SSH_FXP_RENAME in
draft-ietf-secsh-filexfer-02.txt. This request is implemented as a
SSH_FXP_EXTENDED request with the following format:

	uint32		id
	string		"posix-rename@@openssh.com"
	string		oldpath
	string		newpath

On receiving this request the server will perform the POSIX operation
rename(oldpath, newpath) and will respond with a SSH_FXP_STATUS message.
This extension is advertised in the SSH_FXP_VERSION hello with version
"1".

3.4. sftp: Extension requests "statvfs@@openssh.com" and
         "fstatvfs@@openssh.com"

These requests correspond to the statvfs and fstatvfs POSIX system
interfaces. The "statvfs@@openssh.com" request operates on an explicit
pathname, and is formatted as follows:

	uint32		id
	string		"statvfs@@openssh.com"
	string		path

The "fstatvfs@@openssh.com" operates on an open file handle:

	uint32		id
	string		"fstatvfs@@openssh.com"
	string		handle

These requests return a SSH_FXP_STATUS reply on failure. On success they
return the following SSH_FXP_EXTENDED_REPLY reply:

	uint32		id
	uint64		f_bsize		/* file system block size */
	uint64		f_frsize	/* fundamental fs block size */
	uint64		f_blocks	/* number of blocks (unit f_frsize) */
	uint64		f_bfree		/* free blocks in file system */
	uint64		f_bavail	/* free blocks for non-root */
	uint64		f_files		/* total file inodes */
	uint64		f_ffree		/* free file inodes */
	uint64		f_favail	/* free file inodes for to non-root */
	uint64		f_fsid		/* file system id */
	uint64		f_flag		/* bit mask of f_flag values */
	uint64		f_namemax	/* maximum filename length */

The values of the f_flag bitmask are as follows:

	#define SSH_FXE_STATVFS_ST_RDONLY	0x1	/* read-only */
	#define SSH_FXE_STATVFS_ST_NOSUID	0x2	/* no setuid */

Both the "statvfs@@openssh.com" and "fstatvfs@@openssh.com" extensions are
advertised in the SSH_FXP_VERSION hello with version "2".

10. sftp: Extension request "hardlink@@openssh.com"

This request is for creating a hard link to a regular file. This
request is implemented as a SSH_FXP_EXTENDED request with the
following format:

	uint32		id
	string		"hardlink@@openssh.com"
	string		oldpath
	string		newpath

On receiving this request the server will perform the operation
link(oldpath, newpath) and will respond with a SSH_FXP_STATUS message.
This extension is advertised in the SSH_FXP_VERSION hello with version
"1".

10. sftp: Extension request "fsync@@openssh.com"

This request asks the server to call fsync(2) on an open file handle.

	uint32		id
	string		"fsync@@openssh.com"
	string		handle

One receiving this request, a server will call fsync(handle_fd) and will
respond with a SSH_FXP_STATUS message.

This extension is advertised in the SSH_FXP_VERSION hello with version
"1".

$OpenBSD: PROTOCOL,v 1.30 2016/04/08 06:35:54 djm Exp $
@


1.30
log
@We accidentally send an empty string and a zero uint32 with every
direct-streamlocal@@openssh.com channel open, in contravention of
our own spec.

Fixing this is too hard wrt existing versions that expect these
fields to be present and fatal() if they aren't, so document them
as "reserved" fields in the PROTOCOL spec as though we always
intended this and let us never speak of it again.

bz#2529, reported by Ron Frederick
@
text
@d36 2
a37 2
1.3. transport: New public key algorithms "ssh-rsa-cert-v00@@openssh.com",
     "ssh-dsa-cert-v00@@openssh.com",
d457 1
a457 1
$OpenBSD: PROTOCOL,v 1.29 2015/07/17 03:09:19 djm Exp $
@


1.29
log
@direct-streamlocal@@openssh.com Unix domain foward messages do not
contain a "reserved for future use" field and in fact, serverloop.c
checks that there isn't one. Remove erroneous mention from PROTOCOL
description. bz#2421 from Daniel Black
@
text
@d250 2
d457 1
a457 1
$OpenBSD: PROTOCOL,v 1.28 2015/05/08 03:56:51 djm Exp $
@


1.28
log
@whitespace at EOL
@
text
@a249 1
	string		reserved for future use
d455 1
a455 1
$OpenBSD: PROTOCOL,v 1.27 2015/02/20 22:17:21 djm Exp $
@


1.27
log
@UpdateHostKeys fixes:

I accidentally changed the format of the hostkeys@@openssh.com messages
last week without changing the extension name, and this has been causing
connection failures for people who are running -current. First reported
by sthen@@

s/hostkeys@@openssh.com/hostkeys-00@@openssh.com/
Change the name of the proof message too, and reorder it a little.

Also, UpdateHostKeys=ask is incompatible with ControlPersist (no TTY
available to read the response) so disable UpdateHostKeys if it is in
ask mode and ControlPersist is active (and document this)
@
text
@d178 1
a178 1
with datagram boundaries intact between endpoints equipped with 
d456 1
a456 1
$OpenBSD: PROTOCOL,v 1.26 2015/02/16 22:13:32 djm Exp $
@


1.26
log
@Revise hostkeys@@openssh.com hostkey learning extension.

The client will not ask the server to prove ownership of the private
halves of any hitherto-unseen hostkeys it offers to the client.

Allow UpdateHostKeys option to take an 'ask' argument to let the
user manually review keys offered.

ok markus@@
@
text
@d285 2
a286 2
2.5. connection: hostkey update and rotation "hostkeys@@openssh.com"
and "hostkeys-prove@@openssh.com"
d293 1
a293 1
	string		"hostkeys@@openssh.com"
d303 1
a303 1
	string		"hostkeys-prove@@openssh.com"
d310 1
a311 1
	string		"hostkeys-prove@@openssh.com"
d456 1
a456 1
$OpenBSD: PROTOCOL,v 1.25 2015/01/26 03:04:45 djm Exp $
@


1.25
log
@Host key rotation support.

Add a hostkeys@@openssh.com protocol extension (global request) for
a server to inform a client of all its available host key after
authentication has completed. The client may record the keys in
known_hosts, allowing it to upgrade to better host key algorithms
and a server to gracefully rotate its keys.

The client side of this is controlled by a UpdateHostkeys config
option (default on).

ok markus@@
@
text
@d43 2
a44 2
authentication for users and hostkeys. These methods are documented in
the file PROTOCOL.certkeys
d286 1
d289 1
a289 1
a client of all its protocol v.2 hostkeys after user-authentication
d296 35
a330 11
Upon receiving this message, a client may update its known_hosts
file, adding keys that it has not seen before and deleting keys
for the server host that are no longer offered.

This extension allows a client to learn key types that it had
not previously encountered, thereby allowing it to potentially
upgrade from weaker key algorithms to better ones. It also
supports graceful key rotation: a server may offer multiple keys
of the same type for a period (to give clients an opportunity to
learn them using this extension) before removing the deprecated
key from those offered.
d456 1
a456 1
$OpenBSD: PROTOCOL,v 1.24 2014/07/15 15:54:14 millert Exp $
@


1.24
log
@Add support for Unix domain socket forwarding.  A remote TCP port
may be forwarded to a local Unix domain socket and vice versa or
both ends may be a Unix domain socket.  This is a reimplementation
of the streamlocal patches by William Ahern from:
    http://www.25thandclement.com/~william/projects/streamlocal.html
OK djm@@ markus@@
@
text
@d285 22
d431 1
a431 1
$OpenBSD: PROTOCOL,v 1.23 2013/12/01 23:19:05 djm Exp $
@


1.23
log
@mention curve25519-sha256@@libssh.org key exchange algorithm
@
text
@d235 50
d409 1
a409 1
$OpenBSD: PROTOCOL,v 1.22 2013/11/21 00:45:43 djm Exp $
@


1.22
log
@Add a new protocol 2 transport cipher "chacha20-poly1305@@openssh.com"
that combines Daniel Bernstein's ChaCha20 stream cipher and Poly1305 MAC
to build an authenticated encryption mode.

Inspired by and similar to Adam Langley's proposal for TLS:
http://tools.ietf.org/html/draft-agl-tls-chacha20poly1305-03
but differs in layout used for the MAC calculation and the use of a
second ChaCha20 instance to separately encrypt packet lengths.
Details are in the PROTOCOL.chacha20poly1305 file.

Feedback markus@@, naddy@@; manpage bits Loganden Velvindron @@ AfriNIC
ok markus@@ naddy@@
@
text
@d99 6
d359 1
a359 1
$OpenBSD: PROTOCOL,v 1.21 2013/10/17 00:30:13 djm Exp $
@


1.21
log
@fsync@@openssh.com protocol extension for sftp-server
client support to allow calling fsync() faster successful transfer
patch mostly by imorgan AT nas.nasa.gov; bz#1798
"fine" markus@@ "grumble OK" deraadt@@ "doesn't sound bad to me" millert@@
@
text
@d94 5
d353 1
a353 1
$OpenBSD: PROTOCOL,v 1.20 2013/01/08 18:49:04 markus Exp $
@


1.20
log
@support AES-GCM as defined in RFC 5647 (but with simpler KEX handling)
ok and feedback djm@@
@
text
@d334 15
a348 1
$OpenBSD: PROTOCOL,v 1.19 2013/01/03 12:49:01 djm Exp $
@


1.19
log
@fix description of MAC calculation for EtM modes; ok markus@@
@
text
@d82 12
d334 1
a334 1
$OpenBSD: PROTOCOL,v 1.18 2012/12/11 22:31:18 markus Exp $
@


1.18
log
@add encrypt-then-mac (EtM) modes to openssh by defining new mac algorithms
that change the packet format and compute the MAC over the encrypted
message (including the packet size) instead of the plaintext data;
these EtM modes are considered more secure and used by default.
feedback and ok djm@@
@
text
@d73 1
a73 1
      mac = MAC(key, sequence_number || encrypted_packet)
d75 2
a76 1
where "encrypted_packet" contains:
d322 1
a322 1
$OpenBSD: PROTOCOL,v 1.17 2010/12/04 00:18:01 djm Exp $
@


1.17
log
@add a protocol extension to support a hard link operation. It is
available through the "ln" command in the client. The old "ln"
behaviour of creating a symlink is available using its "-s" option
or through the preexisting "symlink" command; based on a patch from
miklos AT szeredi.hu in bz#1555; ok markus@@
@
text
@d54 27
d321 1
a321 1
$OpenBSD: PROTOCOL,v 1.16 2010/08/31 11:54:45 djm Exp $
@


1.16
log
@Implement Elliptic Curve Cryptography modes for key exchange (ECDH) and
host/user keys (ECDSA) as specified by RFC5656. ECDH and ECDSA offer
better performance than plain DH and DSA at the same equivalent symmetric
key length, as well as much shorter keys.

Only the mandatory sections of RFC5656 are implemented, specifically the
three REQUIRED curves nistp256, nistp384 and nistp521 and only ECDH and
ECDSA. Point compression (optional in RFC5656 is NOT implemented).

Certificate host and user keys using the new ECDSA key types are supported.

Note that this code has not been tested for interoperability and may be
subject to change.

feedback and ok markus@@
@
text
@d278 17
a294 1
$OpenBSD: PROTOCOL,v 1.15 2010/02/26 20:29:54 djm Exp $
@


1.15
log
@Add support for certificate key types for users and hosts.

OpenSSH certificate key types are not X.509 certificates, but a much
simpler format that encodes a public key, identity information and
some validity constraints and signs it with a CA key. CA keys are
regular SSH keys. This certificate style avoids the attack surface
of X.509 certificates and is very easy to deploy.

Certified host keys allow automatic acceptance of new host keys
when a CA certificate is marked as trusted in ~/.ssh/known_hosts.
see VERIFYING HOST KEYS in ssh(1) for details.

Certified user keys allow authentication of users when the signing
CA key is marked as trusted in authorized_keys. See "AUTHORIZED_KEYS
FILE FORMAT" in sshd(8) for details.

Certificates are minted using ssh-keygen(1), documentation is in
the "CERTIFICATES" section of that manpage.

Documentation on the format of certificates is in the file
PROTOCOL.certkeys

feedback and ok markus@@
@
text
@d15 3
a17 1
1. transport: Protocol 2 MAC algorithm "umac-64@@openssh.com"
d25 1
a25 1
2. transport: Protocol 2 compression algorithm "zlib@@openssh.com"
d36 5
a40 2
3. transport: New public key algorithms "ssh-rsa-cert-v00@@openssh.com" and
   "ssh-dsa-cert-v00@@openssh.com"
d42 1
a42 1
OpenSSH introduces two new public key algorithms to support certificate
d46 11
a56 1
4. connection: Channel write close extension "eow@@openssh.com"
d95 2
a96 2
5. connection: disallow additional sessions extension
   "no-more-sessions@@openssh.com"
d123 1
a123 1
6. connection: Tunnel forward extension "tun@@openssh.com"
d184 3
a186 1
7. sftp: Reversal of arguments to SSH_FXP_SYMLINK
d199 1
a199 1
8. sftp: Server extension announcement in SSH_FXP_VERSION
d220 1
a220 1
9. sftp: Extension request "posix-rename@@openssh.com"
d237 1
a237 1
10. sftp: Extension requests "statvfs@@openssh.com" and
d278 1
a278 1
$OpenBSD: PROTOCOL,v 1.14 2010/01/09 00:57:10 djm Exp $
@


1.14
log
@tweak language
@
text
@d34 8
a41 1
3. connection: Channel write close extension "eow@@openssh.com"
d80 1
a80 1
4. connection: disallow additional sessions extension
d108 1
a108 1
5. connection: Tunnel forward extension "tun@@openssh.com"
d169 1
a169 1
6. sftp: Reversal of arguments to SSH_FXP_SYMLINK
d182 1
a182 1
7. sftp: Server extension announcement in SSH_FXP_VERSION
d203 1
a203 1
8. sftp: Extension request "posix-rename@@openssh.com"
d220 1
a220 1
9. sftp: Extension requests "statvfs@@openssh.com" and
d261 1
a261 1
$OpenBSD: PROTOCOL,v 1.13 2009/12/20 23:20:40 djm Exp $
@


1.13
log
@fix an incorrect magic number and typo in PROTOCOL; bz#1688
report and fix from ueno AT unixuser.org
@
text
@d9 2
a10 2
Features from newer versions of the draft are not supported, unless
explicitly implemented as extensions described below.
d254 1
a254 1
$OpenBSD: PROTOCOL,v 1.12 2009/02/14 06:35:49 djm Exp $
@


1.12
log
@mention that eow and no-more-sessions extensions are sent only to
OpenSSH peers
@
text
@d124 4
a127 4
be zero to allow the server to automatically chose an interface. A server
that is not willing to open a client-specified unit should refuse the
request with a SSH_MSG_CHANNEL_OPEN_FAILURE error. On successful open,
the server should reply with SSH_MSG_CHANNEL_OPEN_SUCCESS.
d154 1
a154 1
The contents of the "data" field for layer 3 packets is:
d254 1
a254 1
$OpenBSD: PROTOCOL,v 1.11 2008/07/05 05:16:01 djm Exp $
@


1.11
log
@grammar
@
text
@d67 6
d96 5
d254 1
a254 1
$OpenBSD: PROTOCOL,v 1.10 2008/06/30 12:18:34 djm Exp $
@


1.10
log
@clarify that eow@@openssh.com is only sent on session channels
@
text
@d240 2
a241 2
This extension is advertised in the SSH_FXP_VERSION hello with version
"2".
d243 1
a243 1
$OpenBSD: PROTOCOL,v 1.9 2008/06/28 14:08:30 djm Exp $
@


1.9
log
@document the protocol used by ssh-agent; "looks ok" markus@@
@
text
@d49 3
a51 3
signalling: "eow@@openssh.com" (End Of Write). This message is sent by an
endpoint when the local output of a channel is closed or experiences a
write error. The message is formatted as follows:
d243 1
a243 1
$OpenBSD: PROTOCOL,v 1.8 2008/06/28 07:25:07 djm Exp $
@


1.8
log
@spelling fixes
@
text
@d12 3
d243 1
a243 1
$OpenBSD: PROTOCOL,v 1.7 2008/06/12 05:15:41 djm Exp $
@


1.7
log
@document tun@@openssh.com forwarding method
@
text
@d89 1
a89 1
OpenSSH supports layer 2 and layer 3 tunneling via the "tun@@openssh.com"
d91 1
a91 1
with datagram boundaries entact between endpoints equipped with 
d145 1
a145 1
The "frame" field contains an IEEE 802.3 ethernet frame, including
d151 1
a151 1
to the SSH_FXP_SYMLINK method was inadvertendly reversed. Unfortunately,
d180 1
a180 1
check the version number before attemping to use the extension.
d210 1
a210 1
The "fstatvfs@@openssh.com" operates on an open filehandle:
d240 1
a240 1
$OpenBSD: PROTOCOL,v 1.6 2008/06/10 22:15:23 djm Exp $
@


1.6
log
@Add a no-more-sessions@@openssh.com global request extension that the
client sends when it knows that it will never request another session
(i.e. when session multiplexing is disabled). This allows a server to
disallow further session requests and terminate the session.

Why would a non-multiplexing client ever issue additional session
requests? It could have been attacked with something like SSH'jack:
http://www.storm.net.nz/projects/7

feedback & ok markus
@
text
@d87 62
a148 1
5. sftp: Reversal of arguments to SSH_FXP_SYMLINK
d161 1
a161 1
6. sftp: Server extension announcement in SSH_FXP_VERSION
d182 1
a182 1
7. sftp: Extension request "posix-rename@@openssh.com"
d199 1
a199 1
8. sftp: Extension requests "statvfs@@openssh.com" and
d240 1
a240 2
$OpenBSD: PROTOCOL,v 1.5 2008/06/09 13:38:46 dtucker Exp $

@


1.5
log
@Use a $OpenBSD tag so our scripts will sync changes.
@
text
@d64 24
a87 1
4. sftp: Reversal of arguments to SSH_FXP_SYMLINK
d100 1
a100 1
5. sftp: Server extension announcement in SSH_FXP_VERSION
d121 1
a121 1
6. sftp: Extension request "posix-rename@@openssh.com"
d138 1
a138 1
7. sftp: Extension requests "statvfs@@openssh.com" and
d179 1
a179 1
$OpenBSD: PROTOCOL,v 1.4 2008/06/08 20:15:29 dtucker Exp $
@


1.4
log
@Have the sftp client store the statvfs replies in wire format,
which prevents problems when the server's native sizes exceed the
client's.

Also extends the sizes of the remaining 32bit wire format to 64bit,
they're specified as unsigned long in the standard.
@
text
@d156 1
a156 1
$Id: PROTOCOL,v 1.3 2008/06/07 21:52:46 djm Exp $
@


1.3
log
@statvfs member fsid needs to be wider, increase it to 64 bits and
crank extension revision number to 2; prodded and ok dtucker@@
@
text
@d136 2
a137 2
	uint32		f_bsize		/* file system block size */
	uint32		f_frsize	/* fundamental fs block size */
d145 2
a146 2
	uint32		f_flag		/* bit mask of f_flag values */
	uint32		f_namemax	/* maximum filename length */
d156 1
a156 1
$Id: PROTOCOL,v 1.2 2008/05/17 01:31:56 djm Exp $
@


1.2
log
@grammar and correctness fixes from stevesk@@
@
text
@d144 1
a144 1
	uint32		f_fsid		/* file system id */
d153 4
a156 1
$Id: PROTOCOL,v 1.1 2008/05/16 08:30:42 djm Exp $
@


1.1
log
@document our protocol extensions and deviations; ok markus@@
@
text
@d4 2
a5 2
Note that OpenSSH's sftp and sftp-server implement revision 3 of the the
SSH filexfer protocol described in:
d25 1
a25 1
avoid exposing compression code to attacks from unauthenticated users.
d40 1
a40 1
This is desirable, since it saves the transmission of data the would
d116 1
a116 1
   "fstatvfs@@openssh.com"
d129 1
a129 1
	string		"statvfs@@openssh.com"
d153 1
a153 1
$Id$
@

