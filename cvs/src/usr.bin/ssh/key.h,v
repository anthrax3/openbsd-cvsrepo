head	1.51;
access;
symbols
	OPENBSD_6_2_BASE:1.51
	OPENBSD_6_1:1.50.0.4
	OPENBSD_6_1_BASE:1.50
	OPENBSD_6_0:1.49.0.6
	OPENBSD_6_0_BASE:1.49
	OPENBSD_5_9:1.49.0.2
	OPENBSD_5_9_BASE:1.49
	OPENBSD_5_8:1.48.0.2
	OPENBSD_5_8_BASE:1.48
	OPENBSD_5_7:1.47.0.2
	OPENBSD_5_7_BASE:1.47
	OPENBSD_5_6:1.42.0.4
	OPENBSD_5_6_BASE:1.42
	OPENBSD_5_5:1.41.0.4
	OPENBSD_5_5_BASE:1.41
	OPENBSD_5_4:1.37.0.2
	OPENBSD_5_4_BASE:1.37
	OPENBSD_5_3:1.35.0.2
	OPENBSD_5_3_BASE:1.35
	OPENBSD_5_2:1.34.0.2
	OPENBSD_5_2_BASE:1.34
	OPENBSD_5_1_BASE:1.33
	OPENBSD_5_1:1.33.0.6
	OPENBSD_5_0:1.33.0.4
	OPENBSD_5_0_BASE:1.33
	OPENBSD_4_9:1.33.0.2
	OPENBSD_4_9_BASE:1.33
	OPENBSD_4_8:1.30.0.2
	OPENBSD_4_8_BASE:1.30
	OPENBSD_4_7:1.29.0.2
	OPENBSD_4_7_BASE:1.29
	OPENBSD_4_6:1.27.0.8
	OPENBSD_4_6_BASE:1.27
	OPENBSD_4_5:1.27.0.4
	OPENBSD_4_5_BASE:1.27
	OPENBSD_4_4:1.27.0.2
	OPENBSD_4_4_BASE:1.27
	OPENBSD_4_3:1.26.0.8
	OPENBSD_4_3_BASE:1.26
	OPENBSD_4_2:1.26.0.6
	OPENBSD_4_2_BASE:1.26
	OPENBSD_4_1:1.26.0.2
	OPENBSD_4_1_BASE:1.26
	OPENBSD_4_0:1.26.0.4
	OPENBSD_4_0_BASE:1.26
	OPENBSD_3_9:1.23.0.10
	OPENBSD_3_9_BASE:1.23
	OPENBSD_3_8:1.23.0.8
	OPENBSD_3_8_BASE:1.23
	OPENBSD_3_7:1.23.0.6
	OPENBSD_3_7_BASE:1.23
	OPENBSD_3_6:1.23.0.4
	OPENBSD_3_6_BASE:1.23
	OPENBSD_3_5:1.23.0.2
	OPENBSD_3_5_BASE:1.23
	OPENBSD_3_4:1.22.0.2
	OPENBSD_3_4_BASE:1.22
	OPENBSD_3_3:1.20.0.2
	OPENBSD_3_3_BASE:1.20
	OPENBSD_3_2:1.19.0.4
	OPENBSD_3_2_BASE:1.19
	OPENBSD_3_1:1.19.0.2
	OPENBSD_3_1_BASE:1.19
	OPENBSD_3_0:1.17.0.2
	OPENBSD_3_0_BASE:1.17
	OPENBSD_2_9_BASE:1.12
	OPENBSD_2_9:1.12.0.2
	OPENBSD_2_8:1.5.0.2
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3;
locks; strict;
comment	@ * @;


1.51
date	2017.05.30.14.16.41;	author markus;	state Exp;
branches;
next	1.50;
commitid	qvTM0EqWXxMps7F0;

1.50
date	2016.09.12.23.31.27;	author djm;	state Exp;
branches;
next	1.49;
commitid	LKO6f6n1OiczQZjL;

1.49
date	2015.12.04.16.41.28;	author markus;	state Exp;
branches;
next	1.48;
commitid	K3glY441IowbrjDE;

1.48
date	2015.07.03.03.43.18;	author djm;	state Exp;
branches;
next	1.47;
commitid	cnvu1kGgoFFYv6D3;

1.47
date	2015.01.28.22.36.00;	author djm;	state Exp;
branches;
next	1.46;
commitid	P7KG9D8zB61mMUPV;

1.46
date	2015.01.13.07.39.19;	author djm;	state Exp;
branches;
next	1.45;
commitid	oriBpre3xTnTQZ4b;

1.45
date	2015.01.08.10.14.08;	author djm;	state Exp;
branches;
next	1.44;
commitid	397Wklb10N5bP6VW;

1.44
date	2014.12.21.22.27.56;	author djm;	state Exp;
branches;
next	1.43;
commitid	EbtriidyZdsmXksl;

1.43
date	2014.12.04.20.47.36;	author djm;	state Exp;
branches;
next	1.42;
commitid	IKArE6kTGiisPPIV;

1.42
date	2014.06.24.01.13.21;	author djm;	state Exp;
branches;
next	1.41;
commitid	1h9UxAQmwdaqUzyX;

1.41
date	2014.01.09.23.20.00;	author djm;	state Exp;
branches;
next	1.40;

1.40
date	2013.12.06.13.39.49;	author markus;	state Exp;
branches;
next	1.39;

1.39
date	2013.12.06.13.30.08;	author markus;	state Exp;
branches;
next	1.38;

1.38
date	2013.10.29.09.42.11;	author djm;	state Exp;
branches;
next	1.37;

1.37
date	2013.05.19.02.42.42;	author djm;	state Exp;
branches;
next	1.36;

1.36
date	2013.04.19.01.06.50;	author djm;	state Exp;
branches;
next	1.35;

1.35
date	2013.01.17.23.00.01;	author djm;	state Exp;
branches;
next	1.34;

1.34
date	2012.05.23.03.28.28;	author djm;	state Exp;
branches;
next	1.33;

1.33
date	2010.10.28.11.22.09;	author djm;	state Exp;
branches;
next	1.32;

1.32
date	2010.09.09.10.45.45;	author djm;	state Exp;
branches;
next	1.31;

1.31
date	2010.08.31.11.54.45;	author djm;	state Exp;
branches;
next	1.30;

1.30
date	2010.04.16.01.47.26;	author djm;	state Exp;
branches;
next	1.29;

1.29
date	2010.03.15.19.40.02;	author stevesk;	state Exp;
branches;
next	1.28;

1.28
date	2010.02.26.20.29.54;	author djm;	state Exp;
branches;
next	1.27;

1.27
date	2008.06.11.21.01.35;	author grunk;	state Exp;
branches;
next	1.26;

1.26
date	2006.08.03.03.34.42;	author deraadt;	state Exp;
branches;
next	1.25;

1.25
date	2006.08.01.23.22.47;	author stevesk;	state Exp;
branches;
next	1.24;

1.24
date	2006.03.25.22.22.43;	author djm;	state Exp;
branches;
next	1.23;

1.23
date	2003.11.10.16.23.41;	author jakob;	state Exp;
branches
	1.23.8.1
	1.23.10.1;
next	1.22;

1.22
date	2003.06.24.08.23.46;	author markus;	state Exp;
branches
	1.22.2.1;
next	1.21;

1.21
date	2003.05.14.18.16.20;	author jakob;	state Exp;
branches;
next	1.20;

1.20
date	2003.02.12.09.33.04;	author markus;	state Exp;
branches
	1.20.2.1;
next	1.19;

1.19
date	2002.03.18.17.23.31;	author markus;	state Exp;
branches
	1.19.2.1
	1.19.4.1;
next	1.18;

1.18
date	2002.02.24.19.14.59;	author markus;	state Exp;
branches;
next	1.17;

1.17
date	2001.09.17.19.27.15;	author stevesk;	state Exp;
branches
	1.17.2.1;
next	1.16;

1.16
date	2001.06.26.20.14.10;	author markus;	state Exp;
branches;
next	1.15;

1.15
date	2001.06.26.17.27.23;	author markus;	state Exp;
branches;
next	1.14;

1.14
date	2001.06.26.06.32.54;	author itojun;	state Exp;
branches;
next	1.13;

1.13
date	2001.06.25.08.25.38;	author markus;	state Exp;
branches;
next	1.12;

1.12
date	2001.04.17.10.53.24;	author markus;	state Exp;
branches
	1.12.2.1;
next	1.11;

1.11
date	2001.03.12.22.02.01;	author markus;	state Exp;
branches;
next	1.10;

1.10
date	2001.03.11.15.03.16;	author jakob;	state Exp;
branches;
next	1.9;

1.9
date	2001.01.29.01.58.16;	author niklas;	state Exp;
branches;
next	1.8;

1.8
date	2001.01.21.19.05.50;	author markus;	state Exp;
branches;
next	1.7;

1.7
date	2000.12.19.23.17.57;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2000.11.12.19.50.37;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2000.09.07.20.27.51;	author deraadt;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2000.08.19.21.34.43;	author markus;	state Exp;
branches;
next	1.3;

1.3
date	2000.05.04.09.50.22;	author markus;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2000.04.26.20.56.29;	author markus;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.23.22.15.33;	author markus;	state Exp;
branches;
next	;

1.3.2.1
date	2000.09.01.18.23.20;	author jason;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2000.11.08.21.30.52;	author jason;	state Exp;
branches;
next	1.3.2.3;

1.3.2.3
date	2001.03.12.15.44.11;	author jason;	state Exp;
branches;
next	1.3.2.4;

1.3.2.4
date	2001.03.21.18.52.48;	author jason;	state Exp;
branches;
next	;

1.5.2.1
date	2001.02.16.20.13.04;	author jason;	state Exp;
branches;
next	1.5.2.2;

1.5.2.2
date	2001.02.19.17.19.00;	author jason;	state Exp;
branches;
next	1.5.2.3;

1.5.2.3
date	2001.03.21.19.46.25;	author jason;	state Exp;
branches;
next	1.5.2.4;

1.5.2.4
date	2001.05.07.21.09.30;	author jason;	state Exp;
branches;
next	1.5.2.5;

1.5.2.5
date	2001.09.27.00.15.42;	author miod;	state Exp;
branches;
next	1.5.2.6;

1.5.2.6
date	2002.03.08.17.04.42;	author brad;	state Exp;
branches;
next	;

1.12.2.1
date	2001.09.27.19.03.54;	author jason;	state Exp;
branches;
next	1.12.2.2;

1.12.2.2
date	2002.03.09.00.20.44;	author miod;	state Exp;
branches;
next	1.12.2.3;

1.12.2.3
date	2002.06.02.22.56.10;	author miod;	state Exp;
branches;
next	;

1.17.2.1
date	2002.03.07.17.37.46;	author jason;	state Exp;
branches;
next	1.17.2.2;

1.17.2.2
date	2002.05.17.00.03.23;	author miod;	state Exp;
branches;
next	;

1.19.2.1
date	2003.04.03.22.35.17;	author miod;	state Exp;
branches;
next	;

1.19.4.1
date	2003.04.01.00.12.13;	author margarida;	state Exp;
branches;
next	1.19.4.2;

1.19.4.2
date	2003.09.16.21.20.26;	author brad;	state Exp;
branches;
next	;

1.20.2.1
date	2003.09.16.20.50.43;	author brad;	state Exp;
branches;
next	1.20.2.2;

1.20.2.2
date	2004.03.04.18.18.15;	author brad;	state Exp;
branches;
next	;

1.22.2.1
date	2004.02.28.03.51.33;	author brad;	state Exp;
branches;
next	;

1.23.8.1
date	2006.10.06.03.19.32;	author brad;	state Exp;
branches;
next	;

1.23.10.1
date	2006.09.30.04.06.50;	author brad;	state Exp;
branches;
next	;


desc
@@


1.51
log
@remove unused wrapper functions from key.[ch]; ok djm@@
@
text
@/* $OpenBSD: key.h,v 1.50 2016/09/12 23:31:27 djm Exp $ */

/*
 * Copyright (c) 2000, 2001 Markus Friedl.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef KEY_H
#define KEY_H

#include "sshkey.h"

typedef struct sshkey Key;

#define types sshkey_types
#define fp_type sshkey_fp_type
#define fp_rep sshkey_fp_rep

#ifndef SSH_KEY_NO_DEFINE
#define key_free		sshkey_free
#define key_equal_public	sshkey_equal_public
#define key_equal		sshkey_equal
#define key_type		sshkey_type
#define key_ssh_name		sshkey_ssh_name
#define key_ssh_name_plain	sshkey_ssh_name_plain
#define key_type_from_name	sshkey_type_from_name
#define key_is_cert		sshkey_is_cert
#define key_type_plain		sshkey_type_plain
#endif

void	 key_free(Key *);
Key	*key_demote(const Key *);

int	 key_drop_cert(Key *);
int	 key_cert_check_authority(const Key *, int, int, const char *,
	    const char **);

Key	*key_from_blob(const u_char *, u_int);
int	 key_to_blob(const Key *, u_char **, u_int *);

int	 key_sign(const Key *, u_char **, u_int *, const u_char *, u_int,
    const char *);
int	 key_verify(const Key *, const u_char *, u_int, const u_char *, u_int);

/* authfile.c */
Key	*key_load_cert(const char *);
Key	*key_load_public(const char *, char **);
Key	*key_load_private(const char *, const char *, char **);
Key	*key_load_private_cert(int, const char *, const char *, int *);
Key	*key_load_private_type(int, const char *, const char *, char **, int *);

#endif
@


1.50
log
@list all supported signature algorithms in the server-sig-algs
Reported by mb AT smartftp.com in bz#2547 and (independantly)
Ron Frederick; ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: key.h,v 1.49 2015/12/04 16:41:28 markus Exp $ */
a37 1
#define key_new			sshkey_new
a41 1
#define key_cert_type		sshkey_cert_type
a44 5
#define key_ecdsa_nid_from_name	sshkey_ecdsa_nid_from_name
#define key_type_is_cert	sshkey_type_is_cert
#define key_size		sshkey_size
#define key_ecdsa_bits_to_nid	sshkey_ecdsa_bits_to_nid
#define key_ecdsa_key_to_nid	sshkey_ecdsa_key_to_nid
a46 6
#define key_curve_name_to_nid	sshkey_curve_name_to_nid
#define key_curve_nid_to_bits	sshkey_curve_nid_to_bits
#define key_curve_nid_to_name	sshkey_curve_nid_to_name
#define key_ec_nid_to_hash_alg	sshkey_ec_nid_to_hash_alg
#define key_dump_ec_point	sshkey_dump_ec_point
#define key_dump_ec_key		sshkey_dump_ec_key
a48 2
void	 key_add_private(Key *);
Key	*key_new_private(int);
a50 2
int	 key_write(const Key *, FILE *);
int	 key_read(Key *, char **);
a51 3
Key	*key_generate(int, u_int);
Key	*key_from_private(const Key *);
int	 key_to_certified(Key *);
a52 2
int	 key_certify(Key *, Key *);
void	 key_cert_copy(const Key *, Key *);
a55 5
#ifdef WITH_OPENSSL
int	 key_ec_validate_public(const EC_GROUP *, const EC_POINT *);
int	 key_ec_validate_private(const EC_KEY *);
#endif /* WITH_OPENSSL */

a62 3
void     key_private_serialize(const Key *, struct sshbuf *);
Key	*key_private_deserialize(struct sshbuf *);

a63 3
int	 key_save_private(Key *, const char *, const char *, const char *,
    int, const char *, int);
int	 key_load_file(int, const char *, struct sshbuf *);
a68 1
int	 key_perm_ok(int, const char *);
@


1.49
log
@implement SHA2-{256,512} for RSASSA-PKCS1-v1_5 signatures (user and host auth)
based on draft-rsa-dsa-sha2-256-03.txt and draft-ssh-ext-info-04.txt;
with & ok djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: key.h,v 1.48 2015/07/03 03:43:18 djm Exp $ */
a76 1
char	*key_alg_list(int, int);
@


1.48
log
@delete support for legacy v00 certificates; "sure" markus@@ dtucker@@
@
text
@d1 1
a1 1
/* $OpenBSD: key.h,v 1.47 2015/01/28 22:36:00 djm Exp $ */
d87 2
a88 1
int	 key_sign(const Key *, u_char **, u_int *, const u_char *, u_int);
@


1.47
log
@update to new API (key_fingerprint => sshkey_fingerprint)
check sshkey_fingerprint return values;
ok markus
@
text
@d1 1
a1 1
/* $OpenBSD: key.h,v 1.46 2015/01/13 07:39:19 djm Exp $ */
a53 1
#define key_cert_is_legacy	sshkey_cert_is_legacy
d71 1
a71 1
int	 key_to_certified(Key *, int);
@


1.46
log
@add sshd_config HostbasedAcceptedKeyTypes and PubkeyAcceptedKeyTypes
options to allow sshd to control what public key types will be
accepted. Currently defaults to all. Feedback & ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: key.h,v 1.45 2015/01/08 10:14:08 djm Exp $ */
a41 1
#define key_fingerprint		sshkey_fingerprint
a60 1
#define key_fingerprint		sshkey_fingerprint
a66 1
u_char	*key_fingerprint_raw(const Key *, int, u_int *);
@


1.45
log
@deprecate key_load_private_pem() and sshkey_load_private_pem()
interfaces. Refactor the generic key loading API to not require
pathnames to be specified (they weren't really used).

Fixes a few other things en passant:

Makes ed25519 keys work for hostbased authentication (ssh-keysign
previously used the PEM-only routines).

Fixes key comment regression bz#2306: key pathnames were being lost as
comment fields.

ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: key.h,v 1.44 2014/12/21 22:27:56 djm Exp $ */
a52 1
#define key_names_valid2	sshkey_names_valid2
@


1.44
log
@Add FingerprintHash option to control algorithm used for key
fingerprints. Default changes from MD5 to SHA256 and format
from hex to base64.

Feedback and ok naddy@@ markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: key.h,v 1.43 2014/12/04 20:47:36 djm Exp $ */
a106 1
Key	*key_load_private_pem(int, int, const char *, char **);
@


1.43
log
@key_in_file() wrapper is no longer used
@
text
@d1 1
a1 1
/* $OpenBSD: key.h,v 1.42 2014/06/24 01:13:21 djm Exp $ */
d70 1
a70 1
u_char	*key_fingerprint_raw(const Key *, enum fp_type, u_int *);
@


1.42
log
@New key API: refactor key-related functions to be more library-like,
existing API is offered as a set of wrappers.

with and ok markus@@

Thanks also to Ben Hawkes, David Tomaschik, Ivan Fratric, Matthew
Dempsky and Ron Bowes for a detailed review a few months ago.
@
text
@d1 1
a1 1
/* $OpenBSD: key.h,v 1.41 2014/01/09 23:20:00 djm Exp $ */
a108 1
int	 key_in_file(Key *, const char *, int);
@


1.41
log
@Introduce digest API and use it to perform all hashing operations
rather than calling OpenSSL EVP_Digest* directly. Will make it easier
to build a reduced-feature OpenSSH without OpenSSL in future;
feedback, ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: key.h,v 1.40 2013/12/06 13:39:49 markus Exp $ */
d29 44
a72 77
#include "buffer.h"
#include <openssl/rsa.h>
#include <openssl/dsa.h>
#include <openssl/ec.h>

typedef struct Key Key;
enum types {
	KEY_RSA1,
	KEY_RSA,
	KEY_DSA,
	KEY_ECDSA,
	KEY_ED25519,
	KEY_RSA_CERT,
	KEY_DSA_CERT,
	KEY_ECDSA_CERT,
	KEY_ED25519_CERT,
	KEY_RSA_CERT_V00,
	KEY_DSA_CERT_V00,
	KEY_UNSPEC
};
enum fp_type {
	SSH_FP_SHA1,
	SSH_FP_MD5,
	SSH_FP_SHA256
};
enum fp_rep {
	SSH_FP_HEX,
	SSH_FP_BUBBLEBABBLE,
	SSH_FP_RANDOMART
};

/* key is stored in external hardware */
#define KEY_FLAG_EXT		0x0001

#define CERT_MAX_PRINCIPALS	256
struct KeyCert {
	Buffer		 certblob; /* Kept around for use on wire */
	u_int		 type; /* SSH2_CERT_TYPE_USER or SSH2_CERT_TYPE_HOST */
	u_int64_t	 serial;
	char		*key_id;
	u_int		 nprincipals;
	char		**principals;
	u_int64_t	 valid_after, valid_before;
	Buffer		 critical;
	Buffer		 extensions;
	Key		*signature_key;
};

struct Key {
	int	 type;
	int	 flags;
	RSA	*rsa;
	DSA	*dsa;
	int	 ecdsa_nid;	/* NID of curve */
	EC_KEY	*ecdsa;
	struct KeyCert *cert;
	u_char	*ed25519_sk;
	u_char	*ed25519_pk;
};

#define	ED25519_SK_SZ	crypto_sign_ed25519_SECRETKEYBYTES
#define	ED25519_PK_SZ	crypto_sign_ed25519_PUBLICKEYBYTES

Key		*key_new(int);
void		 key_add_private(Key *);
Key		*key_new_private(int);
void		 key_free(Key *);
Key		*key_demote(const Key *);
int		 key_equal_public(const Key *, const Key *);
int		 key_equal(const Key *, const Key *);
char		*key_fingerprint(const Key *, enum fp_type, enum fp_rep);
u_char		*key_fingerprint_raw(const Key *, enum fp_type, u_int *);
const char	*key_type(const Key *);
const char	*key_cert_type(const Key *);
int		 key_write(const Key *, FILE *);
int		 key_read(Key *, char **);
u_int		 key_size(const Key *);
a75 4
int	 key_type_from_name(char *);
int	 key_is_cert(const Key *);
int	 key_type_is_cert(int);
int	 key_type_plain(int);
d79 1
a79 1
void	 key_cert_copy(const Key *, struct Key *);
d82 6
a87 1
int	 key_cert_is_legacy(const Key *);
d89 2
a90 16
int		 key_ecdsa_nid_from_name(const char *);
int		 key_curve_name_to_nid(const char *);
const char	*key_curve_nid_to_name(int);
u_int		 key_curve_nid_to_bits(int);
int		 key_ecdsa_bits_to_nid(int);
int		 key_ecdsa_key_to_nid(EC_KEY *);
int		 key_ec_nid_to_hash_alg(int nid);
int		 key_ec_validate_public(const EC_GROUP *, const EC_POINT *);
int		 key_ec_validate_private(const EC_KEY *);
char		*key_alg_list(int, int);

Key		*key_from_blob(const u_char *, u_int);
int		 key_to_blob(const Key *, u_char **, u_int *);
const char	*key_ssh_name(const Key *);
const char	*key_ssh_name_plain(const Key *);
int		 key_names_valid2(const char *);
d95 2
a96 13
int	 ssh_dss_sign(const Key *, u_char **, u_int *, const u_char *, u_int);
int	 ssh_dss_verify(const Key *, const u_char *, u_int, const u_char *, u_int);
int	 ssh_ecdsa_sign(const Key *, u_char **, u_int *, const u_char *, u_int);
int	 ssh_ecdsa_verify(const Key *, const u_char *, u_int, const u_char *, u_int);
int	 ssh_rsa_sign(const Key *, u_char **, u_int *, const u_char *, u_int);
int	 ssh_rsa_verify(const Key *, const u_char *, u_int, const u_char *, u_int);
int	 ssh_ed25519_sign(const Key *, u_char **, u_int *, const u_char *, u_int);
int	 ssh_ed25519_verify(const Key *, const u_char *, u_int, const u_char *, u_int);

#if defined(DEBUG_KEXECDH) || defined(DEBUG_PK)
void	key_dump_ec_point(const EC_GROUP *, const EC_POINT *);
void	key_dump_ec_key(const EC_KEY *);
#endif
d98 12
a109 2
void     key_private_serialize(const Key *, Buffer *);
Key	*key_private_deserialize(Buffer *);
@


1.40
log
@support ed25519 keys (hostkeys and user identities) using the public domain
ed25519 reference code from SUPERCOP, see http://ed25519.cr.yp.to/software.html
feedback, help & ok djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: key.h,v 1.39 2013/12/06 13:30:08 markus Exp $ */
d127 1
a127 1
const EVP_MD	*key_ec_nid_to_evpmd(int nid);
@


1.39
log
@move private key (de)serialization to key.c; ok djm
@
text
@d1 1
a1 1
/* $OpenBSD: key.h,v 1.38 2013/10/29 09:42:11 djm Exp $ */
d40 1
d44 1
d85 2
d89 3
d130 1
a130 1
char		*key_alg_list(void);
d147 2
@


1.38
log
@fix potential stack exhaustion caused by nested certificates;
report by Mateusz Kocielski; ok dtucker@@ markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: key.h,v 1.37 2013/05/19 02:42:42 djm Exp $ */
d145 3
@


1.37
log
@Standardise logging of supplemental information during userauth. Keys
and ruser is now logged in the auth success/failure message alongside
the local username, remote host/port and protocol in use. Certificates
contents and CA are logged too.

Pushing all logging onto a single line simplifies log analysis as it is
no longer necessary to relate information scattered across multiple log
entries. "I like it" markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: key.h,v 1.36 2013/04/19 01:06:50 djm Exp $ */
d104 1
@


1.36
log
@add the ability to query supported ciphers, MACs, key type and KEX
algorithms to ssh. Includes some refactoring of KEX and key type handling
to be table-driven; ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: key.h,v 1.35 2013/01/17 23:00:01 djm Exp $ */
d92 1
a92 1
char		*key_fingerprint(Key *, enum fp_type, enum fp_rep);
@


1.35
log
@add support for Key Revocation Lists (KRLs). These are a compact way to
represent lists of revoked keys and certificates, taking as little as
a single bit of incremental cost to revoke a certificate by serial number.
KRLs are loaded via the existing RevokedKeys sshd_config option.

feedback and ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: key.h,v 1.34 2012/05/23 03:28:28 djm Exp $ */
d115 1
a115 1
const char *	 key_curve_nid_to_name(int);
d119 1
a119 1
const EVP_MD *	 key_ec_nid_to_evpmd(int nid);
d122 1
@


1.34
log
@add support for RFC6594 SSHFP DNS records for ECDSA key types.
patch from bugzilla-m67 AT nulld.me in bz#1978; ok + tweak markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: key.h,v 1.33 2010/10/28 11:22:09 djm Exp $ */
d93 1
a93 1
u_char		*key_fingerprint_raw(Key *, enum fp_type, u_int *);
d111 1
a111 1
int	 key_cert_is_legacy(Key *);
@


1.33
log
@fix a possible NULL deref on loading a corrupt ECDH key

store ECDH group information in private keys files as "named groups"
rather than as a set of explicit group parameters (by setting
the OPENSSL_EC_NAMED_CURVE flag). This makes for shorter key files and
retrieves the group's OpenSSL NID that we need for various things.
@
text
@d1 1
a1 1
/* $OpenBSD: key.h,v 1.32 2010/09/09 10:45:45 djm Exp $ */
d49 2
a50 1
	SSH_FP_MD5
@


1.32
log
@ECDH/ECDSA compliance fix: these methods vary the hash function they use
(SHA256/384/512) depending on the length of the curve in use. The previous
code incorrectly used SHA256 in all cases.

This fix will cause authentication failure when using 384 or 521-bit curve
keys if one peer hasn't been upgraded and the other has. (256-bit curve
keys work ok). In particular you may need to specify HostkeyAlgorithms
when connecting to a server that has not been upgraded from an upgraded
client.

ok naddy@@
@
text
@d1 1
a1 1
/* $OpenBSD: key.h,v 1.31 2010/08/31 11:54:45 djm Exp $ */
d117 1
a117 1
int		 key_ecdsa_group_to_nid(const EC_GROUP *);
@


1.31
log
@Implement Elliptic Curve Cryptography modes for key exchange (ECDH) and
host/user keys (ECDSA) as specified by RFC5656. ECDH and ECDSA offer
better performance than plain DH and DSA at the same equivalent symmetric
key length, as well as much shorter keys.

Only the mandatory sections of RFC5656 are implemented, specifically the
three REQUIRED curves nistp256, nistp384 and nistp521 and only ECDH and
ECDSA. Point compression (optional in RFC5656 is NOT implemented).

Certificate host and user keys using the new ECDSA key types are supported.

Note that this code has not been tested for interoperability and may be
subject to change.

feedback and ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: key.h,v 1.30 2010/04/16 01:47:26 djm Exp $ */
d115 1
d118 1
@


1.30
log
@revised certificate format ssh-{dss,rsa}-cert-v01@@openssh.com with the
following changes:

move the nonce field to the beginning of the certificate where it can
better protect against chosen-prefix attacks on the signature hash

Rename "constraints" field to "critical options"

Add a new non-critical "extensions" field

Add a serial number

The older format is still support for authentication and cert generation
(use "ssh-keygen -t v00 -s ca_key ..." to generate a v00 certificate)

ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: key.h,v 1.29 2010/03/15 19:40:02 stevesk Exp $ */
d32 1
d39 1
d42 1
d79 2
d112 8
d123 1
d131 2
d135 5
@


1.29
log
@also print certificate type (user or host) for ssh-keygen -L
ok djm kettenis
@
text
@d1 1
a1 1
/* $OpenBSD: key.h,v 1.28 2010/02/26 20:29:54 djm Exp $ */
d40 2
d61 1
d66 2
a67 1
	Buffer		 constraints;
d99 1
a99 1
int	 key_to_certified(Key *);
d105 1
@


1.28
log
@Add support for certificate key types for users and hosts.

OpenSSH certificate key types are not X.509 certificates, but a much
simpler format that encodes a public key, identity information and
some validity constraints and signs it with a CA key. CA keys are
regular SSH keys. This certificate style avoids the attack surface
of X.509 certificates and is very easy to deploy.

Certified host keys allow automatic acceptance of new host keys
when a CA certificate is marked as trusted in ~/.ssh/known_hosts.
see VERIFYING HOST KEYS in ssh(1) for details.

Certified user keys allow authentication of users when the signing
CA key is marked as trusted in authorized_keys. See "AUTHORIZED_KEYS
FILE FORMAT" in sshd(8) for details.

Certificates are minted using ssh-keygen(1), documentation is in
the "CERTIFICATES" section of that manpage.

Documentation on the format of certificates is in the file
PROTOCOL.certkeys

feedback and ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: key.h,v 1.27 2008/06/11 21:01:35 grunk Exp $ */
d85 1
@


1.27
log
@Introduce SSH Fingerprint ASCII Visualization, a technique inspired by the
graphical hash visualization schemes known as "random art", and by
Dan Kaminsky's musings on the subject during a BlackOp talk at the
23C3 in Berlin.

Scientific publication (original paper):
"Hash Visualization: a New Technique to improve Real-World Security",
Perrig A. and Song D., 1999, International Workshop on Cryptographic
Techniques and E-Commerce (CrypTEC '99)
http://sparrow.ece.cmu.edu/~adrian/projects/validation/validation.pdf

The algorithm used here is a worm crawling over a discrete plane,
leaving a trace (augmenting the field) everywhere it goes.
Movement is taken from dgst_raw 2bit-wise.  Bumping into walls
makes the respective movement vector be ignored for this turn,
thus switching to the other color of the chessboard.
Graphs are not unambiguous for now, because circles in graphs can be
walked in either direction.

discussions with several people,
help, corrections and ok markus@@ djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: key.h,v 1.26 2006/08/03 03:34:42 deraadt Exp $ */
d29 1
d38 2
d55 12
d72 1
d76 1
d80 1
d82 2
a83 2
char		*key_fingerprint(const Key *, enum fp_type, enum fp_rep);
u_char		*key_fingerprint_raw(const Key *, enum fp_type, u_int *);
d92 8
@


1.26
log
@almost entirely get rid of the culture of ".h files that include .h files"
ok djm, sort of ok stevesk
makes the pain stop in one easy step
@
text
@d1 1
a1 1
/* $OpenBSD: key.h,v 1.25 2006/08/01 23:22:47 stevesk Exp $ */
d45 2
a46 1
	SSH_FP_BUBBLEBABBLE
@


1.25
log
@move #include <stdio.h> out of includes.h
@
text
@d1 1
a1 1
/* $OpenBSD: key.h,v 1.24 2006/03/25 22:22:43 djm Exp $ */
a30 2

#include <stdio.h>
@


1.24
log
@standardise spacing in $OpenBSD$ tags; requested by deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: key.h,v 1.23 2003/11/10 16:23:41 jakob Exp $ */
d31 2
@


1.23
log
@constify. ok markus@@ & djm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: key.h,v 1.22 2003/06/24 08:23:46 markus Exp $	*/
@


1.23.8.1
log
@upgrade to OpenSSH 4.4
@
text
@d1 1
a1 1
/* $OpenBSD: key.h,v 1.26 2006/08/03 03:34:42 deraadt Exp $ */
@


1.23.10.1
log
@upgrade to OpenSSH 4.4
@
text
@d1 1
a1 1
/* $OpenBSD: key.h,v 1.26 2006/08/03 03:34:42 deraadt Exp $ */
@


1.22
log
@int -> u_int; ok djm@@, deraadt@@, mouring@@
@
text
@d1 1
a1 1
/*	$OpenBSD: key.h,v 1.21 2003/05/14 18:16:20 jakob Exp $	*/
d58 11
a68 11
Key	*key_new(int);
Key	*key_new_private(int);
void	 key_free(Key *);
Key	*key_demote(Key *);
int	 key_equal(Key *, Key *);
char	*key_fingerprint(Key *, enum fp_type, enum fp_rep);
u_char	*key_fingerprint_raw(Key *, enum fp_type, u_int *);
char	*key_type(Key *);
int	 key_write(Key *, FILE *);
int	 key_read(Key *, char **);
u_int	 key_size(Key *);
d71 1
a71 1
Key	*key_from_private(Key *);
d74 12
a85 12
Key	*key_from_blob(u_char *, u_int);
int	 key_to_blob(Key *, u_char **, u_int *);
char	*key_ssh_name(Key *);
int	 key_names_valid2(const char *);

int	 key_sign(Key *, u_char **, u_int *, u_char *, u_int);
int	 key_verify(Key *, u_char *, u_int, u_char *, u_int);

int	 ssh_dss_sign(Key *, u_char **, u_int *, u_char *, u_int);
int	 ssh_dss_verify(Key *, u_char *, u_int, u_char *, u_int);
int	 ssh_rsa_sign(Key *, u_char **, u_int *, u_char *, u_int);
int	 ssh_rsa_verify(Key *, u_char *, u_int, u_char *, u_int);
@


1.22.2.1
log
@upgrade to OpenSSH 3.8
@
text
@d1 1
a1 1
/*	$OpenBSD: key.h,v 1.23 2003/11/10 16:23:41 jakob Exp $	*/
d58 11
a68 11
Key		*key_new(int);
Key		*key_new_private(int);
void		 key_free(Key *);
Key		*key_demote(const Key *);
int		 key_equal(const Key *, const Key *);
char		*key_fingerprint(const Key *, enum fp_type, enum fp_rep);
u_char		*key_fingerprint_raw(const Key *, enum fp_type, u_int *);
const char	*key_type(const Key *);
int		 key_write(const Key *, FILE *);
int		 key_read(Key *, char **);
u_int		 key_size(const Key *);
d71 1
a71 1
Key	*key_from_private(const Key *);
d74 12
a85 12
Key		*key_from_blob(const u_char *, u_int);
int		 key_to_blob(const Key *, u_char **, u_int *);
const char	*key_ssh_name(const Key *);
int		 key_names_valid2(const char *);

int	 key_sign(const Key *, u_char **, u_int *, const u_char *, u_int);
int	 key_verify(const Key *, const u_char *, u_int, const u_char *, u_int);

int	 ssh_dss_sign(const Key *, u_char **, u_int *, const u_char *, u_int);
int	 ssh_dss_verify(const Key *, const u_char *, u_int, const u_char *, u_int);
int	 ssh_rsa_sign(const Key *, u_char **, u_int *, const u_char *, u_int);
int	 ssh_rsa_verify(const Key *, const u_char *, u_int, const u_char *, u_int);
@


1.21
log
@add experimental support for verifying hos keys using DNS as described
in draft-ietf-secsh-dns-xx.txt. more information in README.dns.
ok markus@@ and henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: key.h,v 1.20 2003/02/12 09:33:04 markus Exp $	*/
d74 1
a74 1
Key	*key_from_blob(u_char *, int);
@


1.20
log
@merge ssh-dss.h ssh-rsa.h into key.h; ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: key.h,v 1.19 2002/03/18 17:23:31 markus Exp $	*/
d64 1
@


1.20.2.1
log
@upgrade to OpenSSH 3.7
@
text
@d1 1
a1 1
/*	$OpenBSD: key.h,v 1.22 2003/06/24 08:23:46 markus Exp $	*/
a63 1
u_char	*key_fingerprint_raw(Key *, enum fp_type, u_int *);
d73 1
a73 1
Key	*key_from_blob(u_char *, u_int);
@


1.20.2.2
log
@upgrade to OpenSSH 3.8upgrade to OpenSSH 3.8upgrade to OpenSSH 3.8
@
text
@d1 1
a1 1
/*	$OpenBSD: key.h,v 1.23 2003/11/10 16:23:41 jakob Exp $	*/
d58 11
a68 11
Key		*key_new(int);
Key		*key_new_private(int);
void		 key_free(Key *);
Key		*key_demote(const Key *);
int		 key_equal(const Key *, const Key *);
char		*key_fingerprint(const Key *, enum fp_type, enum fp_rep);
u_char		*key_fingerprint_raw(const Key *, enum fp_type, u_int *);
const char	*key_type(const Key *);
int		 key_write(const Key *, FILE *);
int		 key_read(Key *, char **);
u_int		 key_size(const Key *);
d71 1
a71 1
Key	*key_from_private(const Key *);
d74 12
a85 12
Key		*key_from_blob(const u_char *, u_int);
int		 key_to_blob(const Key *, u_char **, u_int *);
const char	*key_ssh_name(const Key *);
int		 key_names_valid2(const char *);

int	 key_sign(const Key *, u_char **, u_int *, const u_char *, u_int);
int	 key_verify(const Key *, const u_char *, u_int, const u_char *, u_int);

int	 ssh_dss_sign(const Key *, u_char **, u_int *, const u_char *, u_int);
int	 ssh_dss_verify(const Key *, const u_char *, u_int, const u_char *, u_int);
int	 ssh_rsa_sign(const Key *, u_char **, u_int *, const u_char *, u_int);
int	 ssh_rsa_verify(const Key *, const u_char *, u_int, const u_char *, u_int);
@


1.19
log
@add key_demote() for ssh-privsep
@
text
@d1 1
a1 1
/*	$OpenBSD: key.h,v 1.18 2002/02/24 19:14:59 markus Exp $	*/
d80 5
@


1.19.2.1
log
@Merge OpenSSH 3.6.1
@
text
@d1 1
a1 1
/*	$OpenBSD: key.h,v 1.20 2003/02/12 09:33:04 markus Exp $	*/
a79 5

int	 ssh_dss_sign(Key *, u_char **, u_int *, u_char *, u_int);
int	 ssh_dss_verify(Key *, u_char *, u_int, u_char *, u_int);
int	 ssh_rsa_sign(Key *, u_char **, u_int *, u_char *, u_int);
int	 ssh_rsa_verify(Key *, u_char *, u_int, u_char *, u_int);
@


1.19.4.1
log
@Update to OpenSSH 3.6
@
text
@d1 1
a1 1
/*	$OpenBSD: key.h,v 1.20 2003/02/12 09:33:04 markus Exp $	*/
a79 5

int	 ssh_dss_sign(Key *, u_char **, u_int *, u_char *, u_int);
int	 ssh_dss_verify(Key *, u_char *, u_int, u_char *, u_int);
int	 ssh_rsa_sign(Key *, u_char **, u_int *, u_char *, u_int);
int	 ssh_rsa_verify(Key *, u_char *, u_int, u_char *, u_int);
@


1.19.4.2
log
@upgrade to OpenSSH 3.7
@
text
@d1 1
a1 1
/*	$OpenBSD: key.h,v 1.22 2003/06/24 08:23:46 markus Exp $	*/
a63 1
u_char	*key_fingerprint_raw(Key *, enum fp_type, u_int *);
d73 1
a73 1
Key	*key_from_blob(u_char *, u_int);
@


1.18
log
@signed vs. unsigned: make size arguments u_int, ok stevesk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: key.h,v 1.17 2001/09/17 19:27:15 stevesk Exp $	*/
d61 1
@


1.17
log
@u_char*/char* cleanup; ok markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: key.h,v 1.16 2001/06/26 20:14:10 markus Exp $	*/
d77 2
a78 2
int	 key_sign(Key *, u_char **, int *, u_char *, int);
int	 key_verify(Key *, u_char *, int, u_char *, int);
@


1.17.2.1
log
@Update to OpenSSH-3.1 on 3.0-stable branch
@
text
@d1 1
a1 1
/*	$OpenBSD: key.h,v 1.18 2002/02/24 19:14:59 markus Exp $	*/
d77 2
a78 2
int	 key_sign(Key *, u_char **, u_int *, u_char *, u_int);
int	 key_verify(Key *, u_char *, u_int, u_char *, u_int);
@


1.17.2.2
log
@Update OpenSSH to version 3.2.2.
@
text
@d1 1
a1 1
/*	$OpenBSD: key.h,v 1.19 2002/03/18 17:23:31 markus Exp $	*/
a60 1
Key	*key_demote(Key *);
@


1.16
log
@add smartcard support to the client, too (now you can use both
the agent and the client).
@
text
@d1 1
a1 1
/*	$OpenBSD: key.h,v 1.15 2001/06/26 17:27:23 markus Exp $	*/
d72 1
a72 1
Key	*key_from_blob(char *, int);
@


1.15
log
@remove comments from .h, since they are cut&paste from the .c files
and out of sync
@
text
@d1 1
a1 1
/*	$OpenBSD: key.h,v 1.14 2001/06/26 06:32:54 itojun Exp $	*/
d47 4
d52 2
a53 1
	int	type;
@


1.14
log
@prototype pedant.  not very creative...
- () -> (void)
- no variable names
@
text
@d1 1
a1 1
/*	$OpenBSD: key.h,v 1.13 2001/06/25 08:25:38 markus Exp $	*/
d55 2
a56 2
void	key_free(Key *);
int	key_equal(Key *, Key *);
d59 3
a61 3
int	key_write(Key *, FILE *);
int	key_read(Key *, char **);
u_int	key_size(Key *);
d65 1
a65 1
int	key_type_from_name(char *);
d68 1
a68 1
int	key_to_blob(Key *, u_char **, u_int *);
d70 1
a70 1
int	key_names_valid2(const char *);
d72 2
a73 3
int	key_sign(Key *, u_char **, int *, u_char *, int);

int	key_verify(Key *, u_char *, int, u_char *, int);
@


1.13
log
@update copyright for 2001
@
text
@d1 1
a1 1
/*	$OpenBSD: key.h,v 1.12 2001/04/17 10:53:24 markus Exp $	*/
d53 22
a74 30
Key	*key_new(int type);
Key	*key_new_private(int type);
void	key_free(Key *k);
int	key_equal(Key *a, Key *b);
char	*key_fingerprint(Key *k, enum fp_type dgst_type, enum fp_rep dgst_rep);
char	*key_type(Key *k);
int	key_write(Key *key, FILE *f);
int	key_read(Key *key, char **cpp);
u_int	key_size(Key *k);

Key	*key_generate(int type, u_int bits);
Key	*key_from_private(Key *k);
int	key_type_from_name(char *name);

Key	*key_from_blob(char *blob, int blen);
int	key_to_blob(Key *key, u_char **blobp, u_int *lenp);
char	*key_ssh_name(Key *k);
int	key_names_valid2(const char *names);

int
key_sign(
    Key *key,
    u_char **sigp, int *lenp,
    u_char *data, int datalen);

int
key_verify(
    Key *key,
    u_char *signature, int signaturelen,
    u_char *data, int datalen);
@


1.12
log
@add HostKeyAlgorithms; based on patch from res@@shore.net; ok provos@@
@
text
@d1 1
a1 1
/*	$OpenBSD: key.h,v 1.11 2001/03/12 22:02:01 markus Exp $	*/
d4 1
a4 1
 * Copyright (c) 2000 Markus Friedl.  All rights reserved.
@


1.12.2.1
log
@Pull in OpenSSH-2.9.9
@
text
@d1 1
a1 1
/*	$OpenBSD: key.h,v 1.17 2001/09/17 19:27:15 stevesk Exp $	*/
d4 1
a4 1
 * Copyright (c) 2000, 2001 Markus Friedl.  All rights reserved.
a46 4

/* key is stored in external hardware */
#define KEY_FLAG_EXT		0x0001

d48 1
a48 2
	int	 type;
	int	 flags;
d53 30
a82 21
Key	*key_new(int);
Key	*key_new_private(int);
void	 key_free(Key *);
int	 key_equal(Key *, Key *);
char	*key_fingerprint(Key *, enum fp_type, enum fp_rep);
char	*key_type(Key *);
int	 key_write(Key *, FILE *);
int	 key_read(Key *, char **);
u_int	 key_size(Key *);

Key	*key_generate(int, u_int);
Key	*key_from_private(Key *);
int	 key_type_from_name(char *);

Key	*key_from_blob(u_char *, int);
int	 key_to_blob(Key *, u_char **, u_int *);
char	*key_ssh_name(Key *);
int	 key_names_valid2(const char *);

int	 key_sign(Key *, u_char **, int *, u_char *, int);
int	 key_verify(Key *, u_char *, int, u_char *, int);
@


1.12.2.2
log
@Merge OpenSSH 3.1, keeping /etc as configuration files directory.
(i.e. OpenSSH 3.1 + openbsd29_3.1.patch)
@
text
@d1 1
a1 1
/*	$OpenBSD: key.h,v 1.18 2002/02/24 19:14:59 markus Exp $	*/
d77 2
a78 2
int	 key_sign(Key *, u_char **, u_int *, u_char *, u_int);
int	 key_verify(Key *, u_char *, u_int, u_char *, u_int);
@


1.12.2.3
log
@Upgrade to OpenSSH 3.2.3.

Except for improbable compilation error fixes, this should be the last
commit made to the 2.9-STABLE branche. Have fun upgrading.
@
text
@d1 1
a1 1
/*	$OpenBSD: key.h,v 1.19 2002/03/18 17:23:31 markus Exp $	*/
a60 1
Key	*key_demote(Key *);
@


1.11
log
@remove old key_fingerprint interface, s/_ex//
@
text
@d1 1
a1 1
/*	$OpenBSD: key.h,v 1.10 2001/03/11 15:03:16 jakob Exp $	*/
d70 1
@


1.10
log
@add improved fingerprint functions. based on work by Carsten
Raskgaard <cara@@int.tele.dk> and modified by me. ok markus@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: key.h,v 1.9 2001/01/29 01:58:16 niklas Exp $	*/
d57 1
a57 2
char	*key_fingerprint_ex(Key *k, enum fp_type dgst_type, enum fp_rep dgst_rep);
char	*key_fingerprint(Key *k);
@


1.9
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d39 8
d57 1
@


1.8
log
@split ssh.h and try to cleanup the #include mess. remove unnecessary #includes.
rename util.[ch] -> misc.[ch]
@
text
@d1 2
@


1.7
log
@replace 'unsigned bla' with 'u_bla' everywhere. also, replace 'char unsigned'
with u_char.
@
text
@d27 3
@


1.6
log
@add support for RSA to SSH2.  please test.

there are now 3 types of keys: RSA1 is used by ssh-1 only,
RSA and DSA are used by SSH2.

you can use 'ssh-keygen -t rsa -f ssh2_rsa_file' to generate RSA
keys for SSH2 and use the RSA keys for hostkeys or for user keys.

SSH2 RSA or DSA keys are added to .ssh/authorised_keys2 as before.

IdentityFile2, HostDsaKey and DSAAuthentication are obsolete.
you can use multiple IdentityFile and HostKey for all types of keys.

the option DSAAuthentication is replaced by PubkeyAuthetication.
@
text
@d50 1
a50 1
Key	*key_generate(int type, unsigned int bits);
d55 1
a55 1
int	key_to_blob(Key *key, unsigned char **blobp, unsigned int *lenp);
d61 2
a62 2
    unsigned char **sigp, int *lenp,
    unsigned char *data, int datalen);
d67 2
a68 2
    unsigned char *signature, int signaturelen,
    unsigned char *data, int datalen);
@


1.5
log
@cleanup copyright notices on all files.  I have attempted to be accurate with
the details.  everything is now under Tatu's licence (which I copied from his
readme), and/or the core-sdi bsd-ish thing for deattack, or various openbsd
developers under a 2-term bsd licence.  We're not changing any rules, just
being accurate.
@
text
@d29 1
d32 1
a32 1
	KEY_EMPTY
d41 1
d47 22
a68 2
unsigned int	key_read(Key *key, char **cpp);
unsigned int	key_size(Key *k);
@


1.5.2.1
log
@Pull in OpenSSH 2.5.0
@
text
@a0 2
/*	$OpenBSD: key.h,v 1.9 2001/01/29 01:58:16 niklas Exp $	*/

a26 3
#include <openssl/rsa.h>
#include <openssl/dsa.h>

a28 1
	KEY_RSA1,
d31 1
a31 1
	KEY_UNSPEC
a39 1
Key	*key_new_private(int type);
d45 2
a46 22
int	key_read(Key *key, char **cpp);
u_int	key_size(Key *k);

Key	*key_generate(int type, u_int bits);
Key	*key_from_private(Key *k);
int	key_type_from_name(char *name);

Key	*key_from_blob(char *blob, int blen);
int	key_to_blob(Key *key, u_char **blobp, u_int *lenp);
char	*key_ssh_name(Key *k);

int
key_sign(
    Key *key,
    u_char **sigp, int *lenp,
    u_char *data, int datalen);

int
key_verify(
    Key *key,
    u_char *signature, int signaturelen,
    u_char *data, int datalen);
@


1.5.2.2
log
@Pull in OpenSSH-2.5.1
@
text
@@


1.5.2.3
log
@Pull in OpenSSH-2.5.2 for 2.8 branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: key.h,v 1.11 2001/03/12 22:02:01 markus Exp $	*/
a38 8
enum fp_type {
	SSH_FP_SHA1,
	SSH_FP_MD5
};
enum fp_rep {
	SSH_FP_HEX,
	SSH_FP_BUBBLEBABBLE
};
d49 1
a49 1
char	*key_fingerprint(Key *k, enum fp_type dgst_type, enum fp_rep dgst_rep);
@


1.5.2.4
log
@Pull in OpenSSH-2.9 to 2.8 branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: key.h,v 1.12 2001/04/17 10:53:24 markus Exp $	*/
a69 1
int	key_names_valid2(const char *names);
@


1.5.2.5
log
@Pull in OpenSSH 2.9.9 to the 2.8 branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: key.h,v 1.17 2001/09/17 19:27:15 stevesk Exp $	*/
d4 1
a4 1
 * Copyright (c) 2000, 2001 Markus Friedl.  All rights reserved.
a46 4

/* key is stored in external hardware */
#define KEY_FLAG_EXT		0x0001

d48 1
a48 2
	int	 type;
	int	 flags;
d53 30
a82 21
Key	*key_new(int);
Key	*key_new_private(int);
void	 key_free(Key *);
int	 key_equal(Key *, Key *);
char	*key_fingerprint(Key *, enum fp_type, enum fp_rep);
char	*key_type(Key *);
int	 key_write(Key *, FILE *);
int	 key_read(Key *, char **);
u_int	 key_size(Key *);

Key	*key_generate(int, u_int);
Key	*key_from_private(Key *);
int	 key_type_from_name(char *);

Key	*key_from_blob(u_char *, int);
int	 key_to_blob(Key *, u_char **, u_int *);
char	*key_ssh_name(Key *);
int	 key_names_valid2(const char *);

int	 key_sign(Key *, u_char **, int *, u_char *, int);
int	 key_verify(Key *, u_char *, int, u_char *, int);
@


1.5.2.6
log
@Merge OpenSSH 3.1.
@
text
@d1 1
a1 1
/*	$OpenBSD: key.h,v 1.18 2002/02/24 19:14:59 markus Exp $	*/
d77 2
a78 2
int	 key_sign(Key *, u_char **, u_int *, u_char *, u_int);
int	 key_verify(Key *, u_char *, u_int, u_char *, u_int);
@


1.4
log
@add SSH2/DSA support to the agent and some other DSA related cleanups.
(note that we cannot talk to ssh.com's ssh2 agents)
@
text
@d1 23
@


1.3
log
@print key type when talking about host keys
@
text
@d22 2
a23 2
unsigned int
key_read(Key *key, char **cpp);
@


1.3.2.1
log
@Pull in the rest of openssh-2.2.0 to 2.7 branch (luvin' cvs...)
@
text
@d22 2
a23 2
unsigned int	key_read(Key *key, char **cpp);
unsigned int	key_size(Key *k);
@


1.3.2.2
log
@openssh-2.3.0 (again) for 2.7 branch
@
text
@a0 23
/*
 * Copyright (c) 2000 Markus Friedl.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
@


1.3.2.3
log
@OpenSSH-2.5.1 for 2.7 patch branch
@
text
@a0 2
/*	$OpenBSD: key.h,v 1.9 2001/01/29 01:58:16 niklas Exp $	*/

a26 3
#include <openssl/rsa.h>
#include <openssl/dsa.h>

a28 1
	KEY_RSA1,
d31 1
a31 1
	KEY_UNSPEC
a39 1
Key	*key_new_private(int type);
d45 2
a46 22
int	key_read(Key *key, char **cpp);
u_int	key_size(Key *k);

Key	*key_generate(int type, u_int bits);
Key	*key_from_private(Key *k);
int	key_type_from_name(char *name);

Key	*key_from_blob(char *blob, int blen);
int	key_to_blob(Key *key, u_char **blobp, u_int *lenp);
char	*key_ssh_name(Key *k);

int
key_sign(
    Key *key,
    u_char **sigp, int *lenp,
    u_char *data, int datalen);

int
key_verify(
    Key *key,
    u_char *signature, int signaturelen,
    u_char *data, int datalen);
@


1.3.2.4
log
@Pull in OpenSSH-2.5.2 for 2.7 branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: key.h,v 1.11 2001/03/12 22:02:01 markus Exp $	*/
a38 8
enum fp_type {
	SSH_FP_SHA1,
	SSH_FP_MD5
};
enum fp_rep {
	SSH_FP_HEX,
	SSH_FP_BUBBLEBABBLE
};
d49 1
a49 1
char	*key_fingerprint(Key *k, enum fp_type dgst_type, enum fp_rep dgst_rep);
@


1.2
log
@add DSA pubkey auth and other SSH2 fixes.  use ssh-keygen -[xX]
for trading keys with the real and the original SSH, directly from the
people who invented the SSH protocol.
@
text
@d20 1
@


1.1
log
@initial support for DSA keys. ok deraadt@@, niels@@
@
text
@d21 2
a22 1
int	key_read(Key *key, unsigned int bits, char **cpp);
@

