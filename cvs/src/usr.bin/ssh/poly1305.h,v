head	1.4;
access;
symbols
	OPENBSD_6_0:1.4.0.12
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.8
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.2.0.4
	OPENBSD_5_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2014.05.02.03.27.54;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2014.03.26.04.55.35;	author djm;	state Exp;
branches;
next	1.2;

1.2
date	2013.12.19.22.57.13;	author djm;	state Exp;
branches;
next	1.1;

1.1
date	2013.11.21.00.45.44;	author djm;	state Exp;
branches;
next	;


desc
@@


1.4
log
@revert __bounded change; it causes way more problems for portable than
it solves; pointed out by dtucker@@
@
text
@/* $OpenBSD: poly1305.h,v 1.2 2013/12/19 22:57:13 djm Exp $ */

/* 
 * Public Domain poly1305 from Andrew Moon
 * poly1305-donna-unrolled.c from https://github.com/floodyberry/poly1305-donna
 */

#ifndef POLY1305_H
#define POLY1305_H

#include <sys/types.h>

#define POLY1305_KEYLEN		32
#define POLY1305_TAGLEN		16

void poly1305_auth(u_char out[POLY1305_TAGLEN], const u_char *m, size_t inlen,
    const u_char key[POLY1305_KEYLEN])
    __attribute__((__bounded__(__minbytes__, 1, POLY1305_TAGLEN)))
    __attribute__((__bounded__(__buffer__, 2, 3)))
    __attribute__((__bounded__(__minbytes__, 4, POLY1305_KEYLEN)));

#endif	/* POLY1305_H */
@


1.3
log
@use __bounded(...) attribute recently added to sys/cdefs.h instead of
longform __attribute__(__bounded(...));

for brevity and a warning free compilation with llvm/clan
@
text
@d18 3
a20 3
    __bounded((__minbytes__, 1, POLY1305_TAGLEN))
    __bounded((__buffer__, 2, 3))
    __bounded((__minbytes__, 4, POLY1305_KEYLEN));
@


1.2
log
@use full name for author, with his permission
@
text
@d1 1
a1 1
/* $OpenBSD: poly1305.h,v 1.1 2013/11/21 00:45:44 djm Exp $ */
d18 3
a20 3
    __attribute__((__bounded__(__minbytes__, 1, POLY1305_TAGLEN)))
    __attribute__((__bounded__(__buffer__, 2, 3)))
    __attribute__((__bounded__(__minbytes__, 4, POLY1305_KEYLEN)));
@


1.1
log
@Add a new protocol 2 transport cipher "chacha20-poly1305@@openssh.com"
that combines Daniel Bernstein's ChaCha20 stream cipher and Poly1305 MAC
to build an authenticated encryption mode.

Inspired by and similar to Adam Langley's proposal for TLS:
http://tools.ietf.org/html/draft-agl-tls-chacha20poly1305-03
but differs in layout used for the MAC calculation and the use of a
second ChaCha20 instance to separately encrypt packet lengths.
Details are in the PROTOCOL.chacha20poly1305 file.

Feedback markus@@, naddy@@; manpage bits Loganden Velvindron @@ AfriNIC
ok markus@@ naddy@@
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d4 1
a4 1
 * Public Domain poly1305 from Andrew M.
@

