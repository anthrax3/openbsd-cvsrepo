head	1.32;
access;
symbols
	OPENBSD_6_1_BASE:1.32
	OPENBSD_6_0:1.30.0.4
	OPENBSD_6_0_BASE:1.30
	OPENBSD_5_9:1.29.0.2
	OPENBSD_5_9_BASE:1.29
	OPENBSD_5_8:1.27.0.2
	OPENBSD_5_8_BASE:1.27
	OPENBSD_5_7:1.26.0.2
	OPENBSD_5_7_BASE:1.26
	OPENBSD_5_6:1.24.0.6
	OPENBSD_5_6_BASE:1.24
	OPENBSD_5_5:1.24.0.4
	OPENBSD_5_5_BASE:1.24
	OPENBSD_5_4:1.23.0.10
	OPENBSD_5_4_BASE:1.23
	OPENBSD_5_3:1.23.0.8
	OPENBSD_5_3_BASE:1.23
	OPENBSD_5_2:1.23.0.6
	OPENBSD_5_2_BASE:1.23
	OPENBSD_5_1_BASE:1.23
	OPENBSD_5_1:1.23.0.4
	OPENBSD_5_0:1.23.0.2
	OPENBSD_5_0_BASE:1.23
	OPENBSD_4_9:1.22.0.8
	OPENBSD_4_9_BASE:1.22
	OPENBSD_4_8:1.22.0.6
	OPENBSD_4_8_BASE:1.22
	OPENBSD_4_7:1.22.0.2
	OPENBSD_4_7_BASE:1.22
	OPENBSD_4_6:1.22.0.4
	OPENBSD_4_6_BASE:1.22
	OPENBSD_4_5:1.21.0.2
	OPENBSD_4_5_BASE:1.21
	OPENBSD_4_4:1.20.0.10
	OPENBSD_4_4_BASE:1.20
	OPENBSD_4_3:1.20.0.8
	OPENBSD_4_3_BASE:1.20
	OPENBSD_4_2:1.20.0.6
	OPENBSD_4_2_BASE:1.20
	OPENBSD_4_1:1.20.0.2
	OPENBSD_4_1_BASE:1.20
	OPENBSD_4_0:1.20.0.4
	OPENBSD_4_0_BASE:1.20
	OPENBSD_3_9:1.14.0.8
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.14.0.6
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.14.0.4
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.14.0.2
	OPENBSD_3_6_BASE:1.14
	OPENBSD_3_5:1.13.0.2
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.8.0.4
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_2_9:1.5.0.4
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4;
locks; strict;
comment	@ * @;


1.32
date	2016.09.28.16.33.07;	author djm;	state Exp;
branches;
next	1.31;
commitid	e2NJzal9PUi2o22D;

1.31
date	2016.08.13.17.47.41;	author markus;	state Exp;
branches;
next	1.30;
commitid	dl4RDERdJITM8DKC;

1.30
date	2016.03.07.19.02.43;	author djm;	state Exp;
branches;
next	1.29;
commitid	kr9hjdmg99uVnhW2;

1.29
date	2015.12.04.16.41.28;	author markus;	state Exp;
branches;
next	1.28;
commitid	K3glY441IowbrjDE;

1.28
date	2015.11.11.01.48.01;	author djm;	state Exp;
branches;
next	1.27;
commitid	4FA47ChE4xCQXTsd;

1.27
date	2015.05.01.03.23.51;	author djm;	state Exp;
branches;
next	1.26;
commitid	weFq4BCuIOdeuIhV;

1.26
date	2015.02.16.22.13.32;	author djm;	state Exp;
branches;
next	1.25;
commitid	vWL0dluw4oITNbM8;

1.25
date	2015.01.19.19.52.16;	author markus;	state Exp;
branches;
next	1.24;
commitid	UHlhoIB5NMb8eAPm;

1.24
date	2014.01.29.06.18.35;	author djm;	state Exp;
branches;
next	1.23;

1.23
date	2011.06.17.21.44.31;	author djm;	state Exp;
branches;
next	1.22;

1.22
date	2009.03.05.07.18.19;	author djm;	state Exp;
branches;
next	1.21;

1.21
date	2008.11.04.08.22.13;	author djm;	state Exp;
branches;
next	1.20;

1.20
date	2006.08.03.03.34.42;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2006.07.14.01.15.28;	author stevesk;	state Exp;
branches;
next	1.18;

1.18
date	2006.07.06.17.36.37;	author stevesk;	state Exp;
branches;
next	1.17;

1.17
date	2006.07.06.16.03.53;	author stevesk;	state Exp;
branches;
next	1.16;

1.16
date	2006.03.25.22.22.43;	author djm;	state Exp;
branches;
next	1.15;

1.15
date	2006.03.20.18.14.02;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2004.06.21.17.36.31;	author avsm;	state Exp;
branches
	1.14.6.1
	1.14.8.1;
next	1.13;

1.13
date	2003.11.17.11.06.07;	author markus;	state Exp;
branches
	1.13.2.1;
next	1.12;

1.12
date	2003.09.23.20.17.11;	author markus;	state Exp;
branches;
next	1.11;

1.11
date	2003.08.28.12.54.34;	author markus;	state Exp;
branches
	1.11.2.1;
next	1.10;

1.10
date	2003.08.22.10.56.09;	author markus;	state Exp;
branches;
next	1.9;

1.9
date	2003.07.22.13.35.22;	author markus;	state Exp;
branches;
next	1.8;

1.8
date	2002.09.26.11.38.43;	author markus;	state Exp;
branches
	1.8.2.1
	1.8.4.1;
next	1.7;

1.7
date	2002.09.09.06.48.06;	author itojun;	state Exp;
branches;
next	1.6;

1.6
date	2002.06.30.21.59.45;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.12.23.53.45;	author djm;	state Exp;
branches
	1.5.2.1
	1.5.4.1;
next	1.4;

1.4
date	2002.03.26.03.24.01;	author stevesk;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2002.03.19.14.27.39;	author markus;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.19.10.35.39;	author markus;	state Exp;
branches;
next	1.1;

1.1
date	2002.03.18.17.28.37;	author provos;	state Exp;
branches;
next	;

1.4.2.1
date	2002.05.18.04.12.11;	author jason;	state Exp;
branches;
next	1.4.2.2;

1.4.2.2
date	2002.05.18.04.50.38;	author jason;	state Exp;
branches;
next	1.4.2.3;

1.4.2.3
date	2002.06.26.15.30.38;	author jason;	state Exp;
branches;
next	1.4.2.4;

1.4.2.4
date	2002.10.11.14.51.52;	author miod;	state Exp;
branches;
next	;

1.5.2.1
date	2002.05.17.00.03.23;	author miod;	state Exp;
branches;
next	1.5.2.2;

1.5.2.2
date	2002.10.11.14.53.06;	author miod;	state Exp;
branches;
next	;

1.5.4.1
date	2002.06.02.22.56.10;	author miod;	state Exp;
branches;
next	;

1.8.2.1
date	2003.09.16.21.20.26;	author brad;	state Exp;
branches;
next	;

1.8.4.1
date	2003.09.16.20.50.43;	author brad;	state Exp;
branches;
next	1.8.4.2;

1.8.4.2
date	2004.03.04.18.18.16;	author brad;	state Exp;
branches;
next	;

1.11.2.1
date	2004.02.28.03.51.33;	author brad;	state Exp;
branches;
next	1.11.2.2;

1.11.2.2
date	2004.08.19.22.37.31;	author brad;	state Exp;
branches;
next	;

1.13.2.1
date	2004.08.19.04.13.26;	author brad;	state Exp;
branches;
next	;

1.14.6.1
date	2006.10.06.03.19.32;	author brad;	state Exp;
branches;
next	;

1.14.8.1
date	2006.09.30.04.06.50;	author brad;	state Exp;
branches;
next	;


desc
@@


1.32
log
@Remove support for pre-authentication compression. Doing compression
early in the protocol probably seemed reasonable in the 1990s, but
today it's clearly a bad idea in terms of both cryptography (cf.
multiple compression oracle attacks in TLS) and attack surface.

Moreover, to support it across privilege-separation zlib needed
the assistance of a complex shared-memory manager that made the
required attack surface considerably larger.

Prompted by Guido Vranken pointing out a compiler-elided security
check in the shared memory manager found by Stack
(http://css.csail.mit.edu/stack/); ok deraadt@@ markus@@

NB. pre-auth authentication has been disabled by default in sshd
for >10 years.
@
text
@/* $OpenBSD: monitor_wrap.h,v 1.31 2016/08/13 17:47:41 markus Exp $ */

/*
 * Copyright 2002 Niels Provos <provos@@citi.umich.edu>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _MM_WRAP_H_
#define _MM_WRAP_H_

extern int use_privsep;
#define PRIVSEP(x)	(use_privsep ? mm_##x : x)

enum mm_keytype { MM_NOKEY, MM_HOSTKEY, MM_USERKEY };

struct monitor;
struct mm_master;
struct Authctxt;

void mm_log_handler(LogLevel, const char *, void *);
int mm_is_monitor(void);
DH *mm_choose_dh(int, int, int);
int mm_key_sign(Key *, u_char **, u_int *, const u_char *, u_int, const char *);
void mm_inform_authserv(char *, char *);
struct passwd *mm_getpwnamallow(const char *);
char *mm_auth2_read_banner(void);
int mm_auth_password(struct Authctxt *, char *);
int mm_key_allowed(enum mm_keytype, const char *, const char *, Key *, int);
int mm_user_key_allowed(struct passwd *, Key *, int);
int mm_hostbased_key_allowed(struct passwd *, const char *,
    const char *, Key *);
int mm_key_verify(Key *, u_char *, u_int, u_char *, u_int);

#ifdef GSSAPI
OM_uint32 mm_ssh_gssapi_server_ctx(Gssctxt **, gss_OID);
OM_uint32 mm_ssh_gssapi_accept_ctx(Gssctxt *,
   gss_buffer_desc *, gss_buffer_desc *, OM_uint32 *);
int mm_ssh_gssapi_userok(char *user);
OM_uint32 mm_ssh_gssapi_checkmic(Gssctxt *, gss_buffer_t, gss_buffer_t);
#endif

struct Session;
void mm_terminate(void);
int mm_pty_allocate(int *, int *, char *, size_t);
void mm_session_pty_cleanup2(struct Session *);

/* Key export functions */
struct newkeys *mm_newkeys_from_blob(u_char *, int);
int mm_newkeys_to_blob(int, u_char **, u_int *);

void monitor_apply_keystate(struct monitor *);
void mm_get_keystate(struct monitor *);
void mm_send_keystate(struct monitor*);

/* bsdauth */
int mm_bsdauth_query(void *, char **, char **, u_int *, char ***, u_int **);
int mm_bsdauth_respond(void *, u_int, char **);

#endif /* _MM_WRAP_H_ */
@


1.31
log
@remove ssh1 server code; ok djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: monitor_wrap.h,v 1.30 2016/03/07 19:02:43 djm Exp $ */
a77 3

/* zlib allocation hooks */
void mm_init_compression(struct mm_master *);
@


1.30
log
@refactor canohost.c: move functions that cache results closer to the
places that use them (authn and session code). After this, no state is
cached in canohost.c

feedback and ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: monitor_wrap.h,v 1.29 2015/12/04 16:41:28 markus Exp $ */
d34 1
a34 1
enum mm_keytype {MM_NOKEY, MM_HOSTKEY, MM_USERKEY, MM_RSAHOSTKEY, MM_RSAUSERKEY};
a51 2
int mm_auth_rhosts_rsa_key_allowed(struct passwd *, const char *,
    const char *, Key *);
a52 3
int mm_auth_rsa_key_allowed(struct passwd *, BIGNUM *, Key **);
int mm_auth_rsa_verify_response(Key *, BIGNUM *, u_char *);
BIGNUM *mm_auth_rsa_generate_challenge(Key *);
a65 4

/* SSHv1 interfaces */
void mm_ssh1_session_id(u_char *);
int mm_ssh1_session_key(BIGNUM *);
@


1.29
log
@implement SHA2-{256,512} for RSASSA-PKCS1-v1_5 signatures (user and host auth)
based on draft-rsa-dsa-sha2-256-03.txt and draft-ssh-ext-info-04.txt;
with & ok djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: monitor_wrap.h,v 1.28 2015/11/11 01:48:01 djm Exp $ */
d48 1
a48 1
int mm_key_allowed(enum mm_keytype, char *, char *, Key *, int);
d50 4
a53 2
int mm_hostbased_key_allowed(struct passwd *, char *, char *, Key *);
int mm_auth_rhosts_rsa_key_allowed(struct passwd *, char *, char *, Key *);
@


1.28
log
@remove prototypes for long-gone s/key support; ok dtucker@@
@
text
@d1 1
a1 1
/* $OpenBSD: monitor_wrap.h,v 1.27 2015/05/01 03:23:51 djm Exp $ */
d43 1
a43 1
int mm_key_sign(Key *, u_char **, u_int *, const u_char *, u_int);
@


1.27
log
@prevent authorized_keys options picked up on public key tests without
a corresponding private key authentication being applied to other
authentication methods. Reported by halex@@, ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: monitor_wrap.h,v 1.26 2015/02/16 22:13:32 djm Exp $ */
a84 4

/* skey */
int mm_skey_query(void *, char **, char **, u_int *, char ***, u_int **);
int mm_skey_respond(void *, u_int, char **);
@


1.26
log
@Revise hostkeys@@openssh.com hostkey learning extension.

The client will not ask the server to prove ownership of the private
halves of any hitherto-unseen hostkeys it offers to the client.

Allow UpdateHostKeys option to take an 'ask' argument to let the
user manually review keys offered.

ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: monitor_wrap.h,v 1.25 2015/01/19 19:52:16 markus Exp $ */
d48 2
a49 2
int mm_key_allowed(enum mm_keytype, char *, char *, Key *);
int mm_user_key_allowed(struct passwd *, Key *);
@


1.25
log
@update packet.c & isolate, introduce struct ssh
a) switch packet.c to buffer api and isolate per-connection info into struct ssh
b) (de)serialization of the state is moved from monitor to packet.c
c) the old packet.c API is implemented in opacket.[ch]
d) compress.c/h is removed and integrated into packet.c
with and ok djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: monitor_wrap.h,v 1.24 2014/01/29 06:18:35 djm Exp $ */
d43 1
a43 1
int mm_key_sign(Key *, u_char **, u_int *, u_char *, u_int);
@


1.24
log
@remove experimental, never-enabled JPAKE code; ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: monitor_wrap.h,v 1.23 2011/06/17 21:44:31 djm Exp $ */
d75 1
a75 1
struct Newkeys *mm_newkeys_from_blob(u_char *, int);
a90 3

void *mm_zalloc(struct mm_master *, u_int, u_int);
void mm_zfree(struct mm_master *, void *);
@


1.23
log
@make the pre-auth privsep slave log via a socketpair shared with the
monitor rather than /var/empty/dev/log; ok dtucker@@ deraadt@@ markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: monitor_wrap.h,v 1.22 2009/03/05 07:18:19 djm Exp $ */
a88 20

/* jpake */
struct modp_group;
void mm_auth2_jpake_get_pwdata(struct Authctxt *, BIGNUM **, char **, char **);
void mm_jpake_step1(struct modp_group *, u_char **, u_int *,
    BIGNUM **, BIGNUM **, BIGNUM **, BIGNUM **,
    u_char **, u_int *, u_char **, u_int *);
void mm_jpake_step2(struct modp_group *, BIGNUM *,
    BIGNUM *, BIGNUM *, BIGNUM *, BIGNUM *,
    const u_char *, u_int, const u_char *, u_int,
    const u_char *, u_int, const u_char *, u_int,
    BIGNUM **, u_char **, u_int *);
void mm_jpake_key_confirm(struct modp_group *, BIGNUM *, BIGNUM *,
    BIGNUM *, BIGNUM *, BIGNUM *, BIGNUM *, BIGNUM *,
    const u_char *, u_int, const u_char *, u_int,
    const u_char *, u_int, const u_char *, u_int,
    BIGNUM **, u_char **, u_int *);
int mm_jpake_check_confirm(const BIGNUM *,
    const u_char *, u_int, const u_char *, u_int, const u_char *, u_int);

@


1.22
log
@refactor the (disabled) Schnorr proof code to make it a little more
generally useful
@
text
@d1 1
a1 1
/* $OpenBSD: monitor_wrap.h,v 1.21 2008/11/04 08:22:13 djm Exp $ */
d40 1
@


1.21
log
@Add support for an experimental zero-knowledge password authentication
method using the J-PAKE protocol described in F. Hao, P. Ryan,
"Password Authenticated Key Exchange by Juggling", 16th Workshop on
Security Protocols, Cambridge, April 2008.

This method allows password-based authentication without exposing
the password to the server. Instead, the client and server exchange
cryptographic proofs to demonstrate of knowledge of the password while
revealing nothing useful to an attacker or compromised endpoint.

This is experimental, work-in-progress code and is presently
compiled-time disabled (turn on -DJPAKE in Makefile.inc).

"just commit it.  It isn't too intrusive." deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: monitor_wrap.h,v 1.20 2006/08/03 03:34:42 deraadt Exp $ */
d90 1
a90 1
struct jpake_group;
d92 1
a92 1
void mm_jpake_step1(struct jpake_group *, u_char **, u_int *,
d95 1
a95 1
void mm_jpake_step2(struct jpake_group *, BIGNUM *,
d100 1
a100 1
void mm_jpake_key_confirm(struct jpake_group *, BIGNUM *, BIGNUM *,
@


1.20
log
@almost entirely get rid of the culture of ".h files that include .h files"
ok djm, sort of ok stevesk
makes the pain stop in one easy step
@
text
@d1 1
a1 1
/* $OpenBSD: monitor_wrap.h,v 1.19 2006/07/14 01:15:28 stevesk Exp $ */
d88 20
@


1.19
log
@don't need incompletely-typed 'struct passwd' now with
#include <pwd.h>; ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: monitor_wrap.h,v 1.18 2006/07/06 17:36:37 stevesk Exp $ */
a30 7
#include <sys/types.h>

#include <pwd.h>

#include "key.h"
#include "buffer.h"

a56 1
#include "ssh-gss.h"
@


1.18
log
@typo in comment
@
text
@d1 1
a1 1
/* $OpenBSD: monitor_wrap.h,v 1.17 2006/07/06 16:03:53 stevesk Exp $ */
a44 1
struct passwd;
@


1.17
log
@move #include <pwd.h> out of includes.h; ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: monitor_wrap.h,v 1.16 2006/03/25 22:22:43 djm Exp $ */
d104 1
a104 1
#endif /* _MM_H_ */
@


1.16
log
@standardise spacing in $OpenBSD$ tags; requested by deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: monitor_wrap.h,v 1.15 2006/03/20 18:14:02 deraadt Exp $ */
d30 5
@


1.15
log
@sprinkle u_int throughout pty subsystem, ok markus
@
text
@d1 1
a1 1
/*	$OpenBSD: monitor_wrap.h,v 1.14 2004/06/21 17:36:31 avsm Exp $	*/
@


1.14
log
@make ssh -Wshadow clean, no functional changes
markus@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: monitor_wrap.h,v 1.13 2003/11/17 11:06:07 markus Exp $	*/
d70 1
a70 1
int mm_pty_allocate(int *, int *, char *, int);
@


1.14.6.1
log
@upgrade to OpenSSH 4.4
@
text
@d1 1
a1 1
/* $OpenBSD: monitor_wrap.h,v 1.20 2006/08/03 03:34:42 deraadt Exp $ */
d30 2
d40 1
d60 1
d70 1
a70 1
int mm_pty_allocate(int *, int *, char *, size_t);
d99 1
a99 1
#endif /* _MM_WRAP_H_ */
@


1.14.8.1
log
@upgrade to OpenSSH 4.4
@
text
@d1 1
a1 1
/* $OpenBSD: monitor_wrap.h,v 1.20 2006/08/03 03:34:42 deraadt Exp $ */
d30 2
d40 1
d60 1
d70 1
a70 1
int mm_pty_allocate(int *, int *, char *, size_t);
d99 1
a99 1
#endif /* _MM_WRAP_H_ */
@


1.13
log
@replace "gssapi" with "gssapi-with-mic"; from Simon Wilkinson; test + ok jakob.
@
text
@d1 1
a1 1
/*	$OpenBSD: monitor_wrap.h,v 1.12 2003/09/23 20:17:11 markus Exp $	*/
d61 3
a63 3
OM_uint32 mm_ssh_gssapi_server_ctx(Gssctxt **ctxt, gss_OID oid);
OM_uint32 mm_ssh_gssapi_accept_ctx(Gssctxt *ctxt,
   gss_buffer_desc *recv, gss_buffer_desc *send, OM_uint32 *flags);
@


1.13.2.1
log
@upgrade to OpenSSH 3.9
@
text
@d1 1
a1 1
/*	$OpenBSD: monitor_wrap.h,v 1.14 2004/06/21 17:36:31 avsm Exp $	*/
d61 3
a63 3
OM_uint32 mm_ssh_gssapi_server_ctx(Gssctxt **, gss_OID);
OM_uint32 mm_ssh_gssapi_accept_ctx(Gssctxt *,
   gss_buffer_desc *, gss_buffer_desc *, OM_uint32 *);
@


1.12
log
@replace fatal_cleanup() and linked list of fatal callbacks with static
cleanup_exit() function.  re-refine cleanup_exit() where appropriate,
allocate sshd's authctxt eary to allow simpler cleanup in sshd.
tested by many, ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: monitor_wrap.h,v 1.11 2003/08/28 12:54:34 markus Exp $	*/
d65 1
@


1.11
log
@remove kerberos support from ssh1, since it has been replaced with GSSAPI;
but keep kerberos passwd auth for ssh1 and 2; ok djm, hin, henning, ...
@
text
@d1 1
a1 1
/*	$OpenBSD: monitor_wrap.h,v 1.10 2003/08/22 10:56:09 markus Exp $	*/
d43 1
d67 1
d70 1
a70 1
void mm_session_pty_cleanup2(void *);
@


1.11.2.1
log
@upgrade to OpenSSH 3.8
@
text
@d1 1
a1 1
/*	$OpenBSD: monitor_wrap.h,v 1.13 2003/11/17 11:06:07 markus Exp $	*/
a42 1
int mm_is_monitor(void);
a63 1
OM_uint32 mm_ssh_gssapi_checkmic(Gssctxt *, gss_buffer_t, gss_buffer_t);
a65 1
struct Session;
d68 1
a68 1
void mm_session_pty_cleanup2(struct Session *);
@


1.11.2.2
log
@upgrade to OpenSSH 3.9
@
text
@d1 1
a1 1
/*	$OpenBSD: monitor_wrap.h,v 1.14 2004/06/21 17:36:31 avsm Exp $	*/
d61 3
a63 3
OM_uint32 mm_ssh_gssapi_server_ctx(Gssctxt **, gss_OID);
OM_uint32 mm_ssh_gssapi_accept_ctx(Gssctxt *,
   gss_buffer_desc *, gss_buffer_desc *, OM_uint32 *);
@


1.10
log
@support GSS API user authentication; patches from Simon Wilkinson,
stripped down and tested by Jakob and myself.
@
text
@d1 1
a1 1
/*	$OpenBSD: monitor_wrap.h,v 1.9 2003/07/22 13:35:22 markus Exp $	*/
a88 7

/* auth_krb */
#ifdef KRB5
/* auth and reply are really krb5_data objects, but we don't want to
 * include all of the krb5 headers here */
int mm_auth_krb5(void *authctxt, void *auth, char **client, void *reply);
#endif
@


1.9
log
@remove (already disabled) KRB4/AFS support, re-enable -k in ssh(1);
test+ok henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: monitor_wrap.h,v 1.8 2002/09/26 11:38:43 markus Exp $	*/
d57 8
@


1.8
log
@krb4 + privsep; ok dugsong@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: monitor_wrap.h,v 1.7 2002/09/09 06:48:06 itojun Exp $	*/
a82 3
#ifdef KRB4
int mm_auth_krb4(struct Authctxt *, void *, char **, void *);
#endif
@


1.8.2.1
log
@upgrade to OpenSSH 3.7
@
text
@d1 1
a1 1
/*	$OpenBSD: monitor_wrap.h,v 1.11 2003/08/28 12:54:34 markus Exp $	*/
a57 8
#ifdef GSSAPI
#include "ssh-gss.h"
OM_uint32 mm_ssh_gssapi_server_ctx(Gssctxt **ctxt, gss_OID oid);
OM_uint32 mm_ssh_gssapi_accept_ctx(Gssctxt *ctxt,
   gss_buffer_desc *recv, gss_buffer_desc *send, OM_uint32 *flags);
int mm_ssh_gssapi_userok(char *user);
#endif

d81 10
@


1.8.4.1
log
@upgrade to OpenSSH 3.7
@
text
@d1 1
a1 1
/*	$OpenBSD: monitor_wrap.h,v 1.11 2003/08/28 12:54:34 markus Exp $	*/
a57 8
#ifdef GSSAPI
#include "ssh-gss.h"
OM_uint32 mm_ssh_gssapi_server_ctx(Gssctxt **ctxt, gss_OID oid);
OM_uint32 mm_ssh_gssapi_accept_ctx(Gssctxt *ctxt,
   gss_buffer_desc *recv, gss_buffer_desc *send, OM_uint32 *flags);
int mm_ssh_gssapi_userok(char *user);
#endif

d81 10
@


1.8.4.2
log
@upgrade to OpenSSH 3.8upgrade to OpenSSH 3.8upgrade to OpenSSH 3.8
@
text
@d1 1
a1 1
/*	$OpenBSD: monitor_wrap.h,v 1.13 2003/11/17 11:06:07 markus Exp $	*/
a42 1
int mm_is_monitor(void);
a63 1
OM_uint32 mm_ssh_gssapi_checkmic(Gssctxt *, gss_buffer_t, gss_buffer_t);
a65 1
struct Session;
d68 1
a68 1
void mm_session_pty_cleanup2(struct Session *);
@


1.7
log
@kerberos support for privsep.  confirmed to work by lha@@stacken.kth.se
patch from markus
@
text
@d1 1
a1 1
/*	$OpenBSD: monitor_wrap.h,v 1.6 2002/06/30 21:59:45 deraadt Exp $	*/
d82 4
a85 1
/* auth_krb5 */
@


1.6
log
@minor KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: monitor_wrap.h,v 1.5 2002/05/12 23:53:45 djm Exp $	*/
d81 7
@


1.5
log
@Fix sshd Banner option for privsep; ok markus@@ provos@@
@
text
@d1 1
a1 1
/*	$OpenBSD: monitor_wrap.h,v 1.4 2002/03/26 03:24:01 stevesk Exp $	*/
d47 1
a47 1
char* mm_auth2_read_banner(void);
@


1.5.4.1
log
@Upgrade to OpenSSH 3.2.3.

Except for improbable compilation error fixes, this should be the last
commit made to the 2.9-STABLE branche. Have fun upgrading.
@
text
@d1 1
a1 1
/*	$OpenBSD: monitor_wrap.h,v 1.5 2002/05/12 23:53:45 djm Exp $	*/
@


1.5.2.1
log
@Update OpenSSH to version 3.2.2.
@
text
@d1 1
a1 1
/*	$OpenBSD: monitor_wrap.h,v 1.5 2002/05/12 23:53:45 djm Exp $	*/
@


1.5.2.2
log
@Update to OpenSSH 3.5
@
text
@d1 1
a1 1
/*	$OpenBSD: monitor_wrap.h,v 1.8 2002/09/26 11:38:43 markus Exp $	*/
d47 1
a47 1
char *mm_auth2_read_banner(void);
a80 10

/* auth_krb */
#ifdef KRB4
int mm_auth_krb4(struct Authctxt *, void *, char **, void *);
#endif
#ifdef KRB5
/* auth and reply are really krb5_data objects, but we don't want to
 * include all of the krb5 headers here */
int mm_auth_krb5(void *authctxt, void *auth, char **client, void *reply);
#endif
@


1.4
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d47 1
@


1.4.2.1
log
@Update to OpenSSH-3.2.2
@
text
@d1 1
a1 1
/*	$OpenBSD: monitor_wrap.h,v 1.5 2002/05/12 23:53:45 djm Exp $	*/
a46 1
char* mm_auth2_read_banner(void);
@


1.4.2.2
log
@Update to OpenSSH-3.2.3
@
text
@@


1.4.2.3
log
@Pull in OpenSSH-3.4
@
text
@@


1.4.2.4
log
@Update to OpenSSH 3.5
@
text
@d1 1
a1 1
/*	$OpenBSD: monitor_wrap.h,v 1.8 2002/09/26 11:38:43 markus Exp $	*/
d47 1
a47 1
char *mm_auth2_read_banner(void);
a80 10

/* auth_krb */
#ifdef KRB4
int mm_auth_krb4(struct Authctxt *, void *, char **, void *);
#endif
#ifdef KRB5
/* auth and reply are really krb5_data objects, but we don't want to
 * include all of the krb5 headers here */
int mm_auth_krb5(void *authctxt, void *auth, char **client, void *reply);
#endif
@


1.3
log
@make getpwnamallow() allways call pwcopy()
@
text
@d1 2
@


1.2
log
@clean up prototypes
@
text
@a84 3
/* Utility functions */

void pwfree(struct passwd *);
@


1.1
log
@implementation of the interface between privileged and unprivileged process
for ssh-privsep
@
text
@d40 1
@

