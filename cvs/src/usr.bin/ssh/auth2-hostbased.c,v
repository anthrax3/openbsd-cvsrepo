head	1.27;
access;
symbols
	OPENBSD_6_1:1.26.0.6
	OPENBSD_6_1_BASE:1.26
	OPENBSD_6_0:1.26.0.4
	OPENBSD_6_0_BASE:1.26
	OPENBSD_5_9:1.25.0.4
	OPENBSD_5_9_BASE:1.25
	OPENBSD_5_8:1.25.0.2
	OPENBSD_5_8_BASE:1.25
	OPENBSD_5_7:1.24.0.2
	OPENBSD_5_7_BASE:1.24
	OPENBSD_5_6:1.18.0.4
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.17.0.4
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.16.0.2
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.14.0.12
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.10
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.8
	OPENBSD_5_0:1.14.0.6
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.4
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.2
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.13.0.2
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.12.0.8
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.4
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.2
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.11.0.8
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.6
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.2
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.4
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.6.0.10
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.8
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.6
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.4
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.2.0.8
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.6
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.4
	OPENBSD_3_0:1.2.0.2;
locks; strict;
comment	@ * @;


1.27
date	2017.05.30.08.52.19;	author markus;	state Exp;
branches;
next	1.26;
commitid	AQD3o1zTZEMIcuBx;

1.26
date	2016.03.07.19.02.43;	author djm;	state Exp;
branches;
next	1.25;
commitid	kr9hjdmg99uVnhW2;

1.25
date	2015.05.04.06.10.48;	author djm;	state Exp;
branches;
next	1.24;
commitid	KfZDG8r2EByk0YBR;

1.24
date	2015.01.28.22.36.00;	author djm;	state Exp;
branches;
next	1.23;
commitid	P7KG9D8zB61mMUPV;

1.23
date	2015.01.28.11.07.25;	author djm;	state Exp;
branches;
next	1.22;
commitid	HVRvYXNC08jWpncT;

1.22
date	2015.01.13.07.39.19;	author djm;	state Exp;
branches;
next	1.21;
commitid	oriBpre3xTnTQZ4b;

1.21
date	2015.01.08.10.14.08;	author djm;	state Exp;
branches;
next	1.20;
commitid	397Wklb10N5bP6VW;

1.20
date	2014.12.23.22.42.48;	author djm;	state Exp;
branches;
next	1.19;
commitid	tkRozQaasbezrwHY;

1.19
date	2014.12.21.22.27.56;	author djm;	state Exp;
branches;
next	1.18;
commitid	EbtriidyZdsmXksl;

1.18
date	2014.07.15.15.54.14;	author millert;	state Exp;
branches;
next	1.17;
commitid	z7plx8Gkj6l2sxem;

1.17
date	2013.12.30.23.52.27;	author djm;	state Exp;
branches;
next	1.16;

1.16
date	2013.06.21.00.34.49;	author djm;	state Exp;
branches;
next	1.15;

1.15
date	2013.05.17.00.13.13;	author djm;	state Exp;
branches;
next	1.14;

1.14
date	2010.08.04.05.42.47;	author djm;	state Exp;
branches;
next	1.13;

1.13
date	2010.03.04.10.36.03;	author djm;	state Exp;
branches;
next	1.12;

1.12
date	2008.07.17.08.51.07;	author djm;	state Exp;
branches;
next	1.11;

1.11
date	2006.08.03.03.34.41;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2006.07.22.20.48.22;	author stevesk;	state Exp;
branches;
next	1.9;

1.9
date	2006.07.06.16.03.53;	author stevesk;	state Exp;
branches;
next	1.8;

1.8
date	2006.03.25.13.17.01;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2006.03.19.18.51.18;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2004.01.19.21.25.15;	author markus;	state Exp;
branches
	1.6.8.1
	1.6.10.1;
next	1.5;

1.5
date	2003.06.24.08.23.46;	author markus;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2003.06.02.09.17.34;	author markus;	state Exp;
branches;
next	1.3;

1.3
date	2003.04.08.20.21.28;	author itojun;	state Exp;
branches;
next	1.2;

1.2
date	2002.05.31.11.35.15;	author markus;	state Exp;
branches
	1.2.2.1
	1.2.4.1
	1.2.6.1
	1.2.8.1;
next	1.1;

1.1
date	2002.05.25.18.51.07;	author markus;	state Exp;
branches;
next	;

1.2.2.1
date	2002.06.22.07.23.16;	author miod;	state Exp;
branches;
next	;

1.2.4.1
date	2002.06.26.15.52.13;	author jason;	state Exp;
branches;
next	;

1.2.6.1
date	2003.09.16.21.20.24;	author brad;	state Exp;
branches;
next	;

1.2.8.1
date	2003.09.16.20.50.42;	author brad;	state Exp;
branches;
next	1.2.8.2;

1.2.8.2
date	2004.03.04.18.18.15;	author brad;	state Exp;
branches;
next	;

1.5.2.1
date	2004.02.28.03.51.32;	author brad;	state Exp;
branches;
next	;

1.6.8.1
date	2006.10.06.03.19.32;	author brad;	state Exp;
branches;
next	;

1.6.10.1
date	2006.09.30.04.06.50;	author brad;	state Exp;
branches;
next	;


desc
@@


1.27
log
@switch from Key typedef with struct sshkey; ok djm@@
@
text
@/* $OpenBSD: auth2-hostbased.c,v 1.26 2016/03/07 19:02:43 djm Exp $ */
/*
 * Copyright (c) 2000 Markus Friedl.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


#include <sys/types.h>

#include <pwd.h>
#include <string.h>
#include <stdarg.h>

#include "xmalloc.h"
#include "ssh2.h"
#include "packet.h"
#include "buffer.h"
#include "log.h"
#include "misc.h"
#include "servconf.h"
#include "compat.h"
#include "key.h"
#include "hostfile.h"
#include "auth.h"
#include "canohost.h"
#ifdef GSSAPI
#include "ssh-gss.h"
#endif
#include "monitor_wrap.h"
#include "pathnames.h"
#include "match.h"

/* import */
extern ServerOptions options;
extern u_char *session_id2;
extern u_int session_id2_len;

static int
userauth_hostbased(Authctxt *authctxt)
{
	Buffer b;
	struct sshkey *key = NULL;
	char *pkalg, *cuser, *chost, *service;
	u_char *pkblob, *sig;
	u_int alen, blen, slen;
	int pktype;
	int authenticated = 0;

	if (!authctxt->valid) {
		debug2("userauth_hostbased: disabled because of invalid user");
		return 0;
	}
	pkalg = packet_get_string(&alen);
	pkblob = packet_get_string(&blen);
	chost = packet_get_string(NULL);
	cuser = packet_get_string(NULL);
	sig = packet_get_string(&slen);

	debug("userauth_hostbased: cuser %s chost %s pkalg %s slen %d",
	    cuser, chost, pkalg, slen);
#ifdef DEBUG_PK
	debug("signature:");
	buffer_init(&b);
	buffer_append(&b, sig, slen);
	buffer_dump(&b);
	buffer_free(&b);
#endif
	pktype = key_type_from_name(pkalg);
	if (pktype == KEY_UNSPEC) {
		/* this is perfectly legal */
		logit("userauth_hostbased: unsupported "
		    "public key algorithm: %s", pkalg);
		goto done;
	}
	key = key_from_blob(pkblob, blen);
	if (key == NULL) {
		error("userauth_hostbased: cannot decode key: %s", pkalg);
		goto done;
	}
	if (key->type != pktype) {
		error("userauth_hostbased: type mismatch for decoded key "
		    "(received %d, expected %d)", key->type, pktype);
		goto done;
	}
	if (key_type_plain(key->type) == KEY_RSA &&
	    (datafellows & SSH_BUG_RSASIGMD5) != 0) {
		error("Refusing RSA key because peer uses unsafe "
		    "signature format");
		goto done;
	}
	if (match_pattern_list(sshkey_ssh_name(key),
	    options.hostbased_key_types, 0) != 1) {
		logit("%s: key type %s not in HostbasedAcceptedKeyTypes",
		    __func__, sshkey_type(key));
		goto done;
	}

	service = datafellows & SSH_BUG_HBSERVICE ? "ssh-userauth" :
	    authctxt->service;
	buffer_init(&b);
	buffer_put_string(&b, session_id2, session_id2_len);
	/* reconstruct packet */
	buffer_put_char(&b, SSH2_MSG_USERAUTH_REQUEST);
	buffer_put_cstring(&b, authctxt->user);
	buffer_put_cstring(&b, service);
	buffer_put_cstring(&b, "hostbased");
	buffer_put_string(&b, pkalg, alen);
	buffer_put_string(&b, pkblob, blen);
	buffer_put_cstring(&b, chost);
	buffer_put_cstring(&b, cuser);
#ifdef DEBUG_PK
	buffer_dump(&b);
#endif

	pubkey_auth_info(authctxt, key,
	    "client user \"%.100s\", client host \"%.100s\"", cuser, chost);

	/* test for allowed key and correct signature */
	authenticated = 0;
	if (PRIVSEP(hostbased_key_allowed(authctxt->pw, cuser, chost, key)) &&
	    PRIVSEP(key_verify(key, sig, slen, buffer_ptr(&b),
			buffer_len(&b))) == 1)
		authenticated = 1;

	buffer_free(&b);
done:
	debug2("userauth_hostbased: authenticated %d", authenticated);
	if (key != NULL)
		key_free(key);
	free(pkalg);
	free(pkblob);
	free(cuser);
	free(chost);
	free(sig);
	return authenticated;
}

/* return 1 if given hostkey is allowed */
int
hostbased_key_allowed(struct passwd *pw, const char *cuser, char *chost,
    struct sshkey *key)
{
	struct ssh *ssh = active_state; /* XXX */
	const char *resolvedname, *ipaddr, *lookup, *reason;
	HostStatus host_status;
	int len;
	char *fp;

	if (auth_key_is_revoked(key))
		return 0;

	resolvedname = auth_get_canonical_hostname(ssh, options.use_dns);
	ipaddr = ssh_remote_ipaddr(ssh);

	debug2("%s: chost %s resolvedname %s ipaddr %s", __func__,
	    chost, resolvedname, ipaddr);

	if (((len = strlen(chost)) > 0) && chost[len - 1] == '.') {
		debug2("stripping trailing dot from chost %s", chost);
		chost[len - 1] = '\0';
	}

	if (options.hostbased_uses_name_from_packet_only) {
		if (auth_rhosts2(pw, cuser, chost, chost) == 0) {
			debug2("%s: auth_rhosts2 refused "
			    "user \"%.100s\" host \"%.100s\" (from packet)",
			    __func__, cuser, chost);
			return 0;
		}
		lookup = chost;
	} else {
		if (strcasecmp(resolvedname, chost) != 0)
			logit("userauth_hostbased mismatch: "
			    "client sends %s, but we resolve %s to %s",
			    chost, ipaddr, resolvedname);
		if (auth_rhosts2(pw, cuser, resolvedname, ipaddr) == 0) {
			debug2("%s: auth_rhosts2 refused "
			    "user \"%.100s\" host \"%.100s\" addr \"%.100s\"",
			    __func__, cuser, resolvedname, ipaddr);
			return 0;
		}
		lookup = resolvedname;
	}
	debug2("%s: access allowed by auth_rhosts2", __func__);

	if (key_is_cert(key) && 
	    key_cert_check_authority(key, 1, 0, lookup, &reason)) {
		error("%s", reason);
		auth_debug_add("%s", reason);
		return 0;
	}

	host_status = check_key_in_hostfiles(pw, key, lookup,
	    _PATH_SSH_SYSTEM_HOSTFILE,
	    options.ignore_user_known_hosts ? NULL : _PATH_SSH_USER_HOSTFILE);

	/* backward compat if no key has been found. */
	if (host_status == HOST_NEW) {
		host_status = check_key_in_hostfiles(pw, key, lookup,
		    _PATH_SSH_SYSTEM_HOSTFILE2,
		    options.ignore_user_known_hosts ? NULL :
		    _PATH_SSH_USER_HOSTFILE2);
	}

	if (host_status == HOST_OK) {
		if (key_is_cert(key)) {
			if ((fp = sshkey_fingerprint(key->cert->signature_key,
			    options.fingerprint_hash, SSH_FP_DEFAULT)) == NULL)
				fatal("%s: sshkey_fingerprint fail", __func__);
			verbose("Accepted certificate ID \"%s\" signed by "
			    "%s CA %s from %s@@%s", key->cert->key_id,
			    key_type(key->cert->signature_key), fp,
			    cuser, lookup);
		} else {
			if ((fp = sshkey_fingerprint(key,
			    options.fingerprint_hash, SSH_FP_DEFAULT)) == NULL)
				fatal("%s: sshkey_fingerprint fail", __func__);
			verbose("Accepted %s public key %s from %s@@%s",
			    key_type(key), fp, cuser, lookup);
		}
		free(fp);
	}

	return (host_status == HOST_OK);
}

Authmethod method_hostbased = {
	"hostbased",
	userauth_hostbased,
	&options.hostbased_authentication
};
@


1.26
log
@refactor canohost.c: move functions that cache results closer to the
places that use them (authn and session code). After this, no state is
cached in canohost.c

feedback and ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: auth2-hostbased.c,v 1.25 2015/05/04 06:10:48 djm Exp $ */
d61 1
a61 1
	Key *key = NULL;
d160 1
a160 1
    Key *key)
@


1.25
log
@Remove pattern length argument from match_pattern_list(),
we only ever use it for strlen(pattern).

Prompted by hanno AT hboeck.de pointing an out-of-bound read
error caused by an incorrect pattern length found using AFL
and his own tools.

ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: auth2-hostbased.c,v 1.24 2015/01/28 22:36:00 djm Exp $ */
d162 1
d171 2
a172 2
	resolvedname = get_canonical_hostname(options.use_dns);
	ipaddr = get_remote_ipaddr();
@


1.24
log
@update to new API (key_fingerprint => sshkey_fingerprint)
check sshkey_fingerprint return values;
ok markus
@
text
@d1 1
a1 1
/* $OpenBSD: auth2-hostbased.c,v 1.23 2015/01/28 11:07:25 djm Exp $ */
d111 1
a111 2
	    options.hostbased_key_types,
	    strlen(options.hostbased_key_types), 0) != 1) {
@


1.23
log
@remove obsolete comment
@
text
@d1 1
a1 1
/* $OpenBSD: auth2-hostbased.c,v 1.22 2015/01/13 07:39:19 djm Exp $ */
d226 3
a228 2
			fp = key_fingerprint(key->cert->signature_key,
			    options.fingerprint_hash, SSH_FP_DEFAULT);
d234 3
a236 2
			fp = key_fingerprint(key, options.fingerprint_hash,
			    SSH_FP_DEFAULT);
@


1.22
log
@add sshd_config HostbasedAcceptedKeyTypes and PubkeyAcceptedKeyTypes
options to allow sshd to control what public key types will be
accepted. Currently defaults to all. Feedback & ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: auth2-hostbased.c,v 1.21 2015/01/08 10:14:08 djm Exp $ */
a86 1
	/* XXX provide some way to allow admin to specify key types accepted */
@


1.21
log
@deprecate key_load_private_pem() and sshkey_load_private_pem()
interfaces. Refactor the generic key loading API to not require
pathnames to be specified (they weren't really used).

Fixes a few other things en passant:

Makes ed25519 keys work for hostbased authentication (ssh-keysign
previously used the PEM-only routines).

Fixes key comment regression bz#2306: key pathnames were being lost as
comment fields.

ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: auth2-hostbased.c,v 1.20 2014/12/23 22:42:48 djm Exp $ */
d50 1
d111 8
@


1.20
log
@KNF and add a little more debug()
@
text
@d1 1
a1 1
/* $OpenBSD: auth2-hostbased.c,v 1.19 2014/12/21 22:27:56 djm Exp $ */
d86 1
@


1.19
log
@Add FingerprintHash option to control algorithm used for key
fingerprints. Default changes from MD5 to SHA256 and format
from hex to base64.

Feedback and ok naddy@@ markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: auth2-hostbased.c,v 1.18 2014/07/15 15:54:14 millert Exp $ */
d165 1
a165 1
	debug2("userauth_hostbased: chost %s resolvedname %s ipaddr %s",
d174 4
a177 1
		if (auth_rhosts2(pw, cuser, chost, chost) == 0)
d179 1
d186 4
a189 1
		if (auth_rhosts2(pw, cuser, resolvedname, ipaddr) == 0)
d191 1
d194 1
a194 1
	debug2("userauth_hostbased: access allowed by auth_rhosts2");
@


1.18
log
@Add support for Unix domain socket forwarding.  A remote TCP port
may be forwarded to a local Unix domain socket and vice versa or
both ends may be a Unix domain socket.  This is a reimplementation
of the streamlocal patches by William Ahern from:
    http://www.25thandclement.com/~william/projects/streamlocal.html
OK djm@@ markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: auth2-hostbased.c,v 1.17 2013/12/30 23:52:27 djm Exp $ */
d210 1
a210 1
			    SSH_FP_MD5, SSH_FP_HEX);
d216 2
a217 1
			fp = key_fingerprint(key, SSH_FP_MD5, SSH_FP_HEX);
@


1.17
log
@refuse RSA keys from old proprietary clients/servers that use the
obsolete RSA+MD5 signature scheme. it will still be possible to connect
with these clients/servers but only DSA keys will be accepted, and we'll
deprecate them entirely in a future release. ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: auth2-hostbased.c,v 1.16 2013/06/21 00:34:49 djm Exp $ */
d38 1
@


1.16
log
@for hostbased authentication, print the client host and user on
the auth success/failure line; bz#2064, ok dtucker@@
@
text
@d1 1
a1 1
/* $OpenBSD: auth2-hostbased.c,v 1.15 2013/05/17 00:13:13 djm Exp $ */
d100 6
@


1.15
log
@bye, bye xfree(); ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: auth2-hostbased.c,v 1.14 2010/08/04 05:42:47 djm Exp $ */
d118 4
@


1.14
log
@enable certificates for hostbased authentication, from Iain Morgan;
"looks ok" markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: auth2-hostbased.c,v 1.13 2010/03/04 10:36:03 djm Exp $ */
d130 5
a134 5
	xfree(pkalg);
	xfree(pkblob);
	xfree(cuser);
	xfree(chost);
	xfree(sig);
d209 1
a209 1
		xfree(fp);
@


1.13
log
@Add a TrustedUserCAKeys option to sshd_config to specify CA keys that
are trusted to authenticate users (in addition than doing it per-user
in authorized_keys).

Add a RevokedKeys option to sshd_config and a @@revoked marker to
known_hosts to allow keys to me revoked and banned for user or host
authentication.

feedback and ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: auth2-hostbased.c,v 1.12 2008/07/17 08:51:07 djm Exp $ */
d143 1
a143 1
	const char *resolvedname, *ipaddr, *lookup;
d146 1
d177 7
d189 1
a189 1
	if (host_status == HOST_NEW)
d194 17
@


1.12
log
@strip trailing '.' from hostname when HostbasedUsesNameFromPacketOnly=yes
report and patch from res AT qoxp.net (bz#1200); ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: auth2-hostbased.c,v 1.11 2006/08/03 03:34:41 deraadt Exp $ */
d146 3
@


1.11
log
@almost entirely get rid of the culture of ".h files that include .h files"
ok djm, sort of ok stevesk
makes the pain stop in one easy step
@
text
@d1 1
a1 1
/* $OpenBSD: auth2-hostbased.c,v 1.10 2006/07/22 20:48:22 stevesk Exp $ */
d153 5
a162 4
		if (((len = strlen(chost)) > 0) && chost[len - 1] == '.') {
			debug2("stripping trailing dot from chost %s", chost);
			chost[len - 1] = '\0';
		}
@


1.10
log
@move #include <string.h> out of includes.h
@
text
@d1 1
a1 1
/* $OpenBSD: auth2-hostbased.c,v 1.9 2006/07/06 16:03:53 stevesk Exp $ */
a25 1
#include "includes.h"
d31 1
d33 1
a34 1
#include "xmalloc.h"
d40 2
a41 1
#include "bufaux.h"
a42 1
#include "key.h"
d44 3
@


1.9
log
@move #include <pwd.h> out of includes.h; ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: auth2-hostbased.c,v 1.8 2006/03/25 13:17:01 djm Exp $ */
d31 1
@


1.8
log
@Put $OpenBSD$ tags back (as comments) to replace the RCSID()s that
Theo nuked - our scripts to sync -portable need them in the files
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d27 4
@


1.7
log
@RCSID() can die
@
text
@d1 1
@


1.6
log
@fix mem leaks; some fixes from Pete Flugstad; tested dtucker@@
@
text
@a25 1
RCSID("$OpenBSD: auth2-hostbased.c,v 1.5 2003/06/24 08:23:46 markus Exp $");
@


1.6.8.1
log
@upgrade to OpenSSH 4.4
@
text
@a0 1
/* $OpenBSD: auth2-hostbased.c,v 1.11 2006/08/03 03:34:41 deraadt Exp $ */
d25 2
d28 1
a28 6
#include <sys/types.h>

#include <pwd.h>
#include <string.h>
#include <stdarg.h>

a29 1
#include "ssh2.h"
d35 2
a37 2
#include "hostfile.h"
#include "auth.h"
a38 3
#ifdef GSSAPI
#include "ssh-gss.h"
#endif
@


1.6.10.1
log
@upgrade to OpenSSH 4.4
@
text
@a0 1
/* $OpenBSD: auth2-hostbased.c,v 1.11 2006/08/03 03:34:41 deraadt Exp $ */
d25 2
d28 1
a28 6
#include <sys/types.h>

#include <pwd.h>
#include <string.h>
#include <stdarg.h>

a29 1
#include "ssh2.h"
d35 2
a37 2
#include "hostfile.h"
#include "auth.h"
a38 3
#ifdef GSSAPI
#include "ssh-gss.h"
#endif
@


1.5
log
@int -> u_int; ok djm@@, deraadt@@, mouring@@
@
text
@d26 1
a26 1
RCSID("$OpenBSD: auth2-hostbased.c,v 1.4 2003/06/02 09:17:34 markus Exp $");
d117 1
a117 1
	buffer_clear(&b);
@


1.5.2.1
log
@upgrade to OpenSSH 3.8
@
text
@d26 1
a26 1
RCSID("$OpenBSD: auth2-hostbased.c,v 1.6 2004/01/19 21:25:15 markus Exp $");
d117 1
a117 1
	buffer_free(&b);
@


1.4
log
@deprecate VerifyReverseMapping since it's dangerous if combined
with IP based access control as noted by Mike Harding; replace with
a UseDNS option, UseDNS is on by default and includes the
VerifyReverseMapping check; with itojun@@, provos@@, jakob@@ and deraadt@@
ok deraadt@@, djm@@
@
text
@d26 1
a26 1
RCSID("$OpenBSD: auth2-hostbased.c,v 1.3 2003/04/08 20:21:28 itojun Exp $");
d45 1
a45 1
extern int session_id2_len;
@


1.3
log
@rename log() into logit() to avoid name conflict.  markus ok, from netbsd
@
text
@d26 1
a26 1
RCSID("$OpenBSD: auth2-hostbased.c,v 1.2 2002/05/31 11:35:15 markus Exp $");
d139 1
a139 1
	resolvedname = get_canonical_hostname(options.verify_reverse_mapping);
@


1.2
log
@move Authmethod definitons to per-method file.
@
text
@d26 1
a26 1
RCSID("$OpenBSD: auth2-hostbased.c,v 1.1 2002/05/25 18:51:07 markus Exp $");
d80 1
a80 1
		log("userauth_hostbased: unsupported "
d155 1
a155 1
			log("userauth_hostbased mismatch: "
@


1.2.6.1
log
@upgrade to OpenSSH 3.7
@
text
@d26 1
a26 1
RCSID("$OpenBSD: auth2-hostbased.c,v 1.5 2003/06/24 08:23:46 markus Exp $");
d45 1
a45 1
extern u_int session_id2_len;
d80 1
a80 1
		logit("userauth_hostbased: unsupported "
d139 1
a139 1
	resolvedname = get_canonical_hostname(options.use_dns);
d155 1
a155 1
			logit("userauth_hostbased mismatch: "
@


1.2.8.1
log
@upgrade to OpenSSH 3.7
@
text
@d26 1
a26 1
RCSID("$OpenBSD: auth2-hostbased.c,v 1.5 2003/06/24 08:23:46 markus Exp $");
d45 1
a45 1
extern u_int session_id2_len;
d80 1
a80 1
		logit("userauth_hostbased: unsupported "
d139 1
a139 1
	resolvedname = get_canonical_hostname(options.use_dns);
d155 1
a155 1
			logit("userauth_hostbased mismatch: "
@


1.2.8.2
log
@upgrade to OpenSSH 3.8upgrade to OpenSSH 3.8upgrade to OpenSSH 3.8
@
text
@d26 1
a26 1
RCSID("$OpenBSD: auth2-hostbased.c,v 1.6 2004/01/19 21:25:15 markus Exp $");
d117 1
a117 1
	buffer_free(&b);
@


1.2.4.1
log
@More missing files in 3.4 merge
@
text
@d26 1
a26 1
RCSID("$OpenBSD: auth2-hostbased.c,v 1.2 2002/05/31 11:35:15 markus Exp $");
@


1.2.2.1
log
@Update OpenSSH to version 3.3 (with local changes, configuration files still
living in /etc and privsep user being nobody).
@
text
@d26 1
a26 1
RCSID("$OpenBSD: auth2-hostbased.c,v 1.2 2002/05/31 11:35:15 markus Exp $");
@


1.1
log
@split auth2.c into one file per method; ok provos@@/deraadt@@
@
text
@d26 1
a26 1
RCSID("$OpenBSD: auth2.c,v 1.91 2002/05/13 02:37:39 itojun Exp $");
d47 1
a47 1
int
d177 6
@

