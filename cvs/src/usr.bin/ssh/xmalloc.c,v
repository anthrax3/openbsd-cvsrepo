head	1.33;
access;
symbols
	OPENBSD_6_1_BASE:1.33
	OPENBSD_6_0:1.33.0.6
	OPENBSD_6_0_BASE:1.33
	OPENBSD_5_9:1.33.0.2
	OPENBSD_5_9_BASE:1.33
	OPENBSD_5_8:1.32.0.2
	OPENBSD_5_8_BASE:1.32
	OPENBSD_5_7:1.31.0.2
	OPENBSD_5_7_BASE:1.31
	OPENBSD_5_6:1.29.0.6
	OPENBSD_5_6_BASE:1.29
	OPENBSD_5_5:1.29.0.4
	OPENBSD_5_5_BASE:1.29
	OPENBSD_5_4:1.28.0.2
	OPENBSD_5_4_BASE:1.28
	OPENBSD_5_3:1.27.0.28
	OPENBSD_5_3_BASE:1.27
	OPENBSD_5_2:1.27.0.26
	OPENBSD_5_2_BASE:1.27
	OPENBSD_5_1_BASE:1.27
	OPENBSD_5_1:1.27.0.24
	OPENBSD_5_0:1.27.0.22
	OPENBSD_5_0_BASE:1.27
	OPENBSD_4_9:1.27.0.20
	OPENBSD_4_9_BASE:1.27
	OPENBSD_4_8:1.27.0.18
	OPENBSD_4_8_BASE:1.27
	OPENBSD_4_7:1.27.0.14
	OPENBSD_4_7_BASE:1.27
	OPENBSD_4_6:1.27.0.16
	OPENBSD_4_6_BASE:1.27
	OPENBSD_4_5:1.27.0.12
	OPENBSD_4_5_BASE:1.27
	OPENBSD_4_4:1.27.0.10
	OPENBSD_4_4_BASE:1.27
	OPENBSD_4_3:1.27.0.8
	OPENBSD_4_3_BASE:1.27
	OPENBSD_4_2:1.27.0.6
	OPENBSD_4_2_BASE:1.27
	OPENBSD_4_1:1.27.0.2
	OPENBSD_4_1_BASE:1.27
	OPENBSD_4_0:1.27.0.4
	OPENBSD_4_0_BASE:1.27
	OPENBSD_3_9:1.16.0.20
	OPENBSD_3_9_BASE:1.16
	OPENBSD_3_8:1.16.0.18
	OPENBSD_3_8_BASE:1.16
	OPENBSD_3_7:1.16.0.16
	OPENBSD_3_7_BASE:1.16
	OPENBSD_3_6:1.16.0.14
	OPENBSD_3_6_BASE:1.16
	OPENBSD_3_5:1.16.0.12
	OPENBSD_3_5_BASE:1.16
	OPENBSD_3_4:1.16.0.10
	OPENBSD_3_4_BASE:1.16
	OPENBSD_3_3:1.16.0.8
	OPENBSD_3_3_BASE:1.16
	OPENBSD_3_2:1.16.0.6
	OPENBSD_3_2_BASE:1.16
	OPENBSD_3_1:1.16.0.4
	OPENBSD_3_1_BASE:1.16
	OPENBSD_3_0:1.16.0.2
	OPENBSD_3_0_BASE:1.16
	OPENBSD_2_9_BASE:1.15
	OPENBSD_2_9:1.15.0.2
	OPENBSD_2_8:1.8.0.2
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.6.0.2
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3;
locks; strict;
comment	@ * @;


1.33
date	2016.02.15.09.47.49;	author dtucker;	state Exp;
branches;
next	1.32;
commitid	ut5A0buLh4mhCTFu;

1.32
date	2015.04.24.01.36.01;	author deraadt;	state Exp;
branches;
next	1.31;
commitid	LHkUmZjv49ojnnuH;

1.31
date	2015.02.06.23.21.59;	author millert;	state Exp;
branches;
next	1.30;
commitid	STdsVrA5MGLlnbLm;

1.30
date	2015.01.16.06.40.12;	author deraadt;	state Exp;
branches;
next	1.29;
commitid	Uu5nFG3wCl0LACBb;

1.29
date	2014.01.04.17.50.55;	author tedu;	state Exp;
branches;
next	1.28;

1.28
date	2013.05.17.00.13.14;	author djm;	state Exp;
branches;
next	1.27;

1.27
date	2006.08.03.03.34.42;	author deraadt;	state Exp;
branches;
next	1.26;

1.26
date	2006.08.01.23.22.48;	author stevesk;	state Exp;
branches;
next	1.25;

1.25
date	2006.07.26.13.57.17;	author stevesk;	state Exp;
branches;
next	1.24;

1.24
date	2006.07.26.02.35.17;	author stevesk;	state Exp;
branches;
next	1.23;

1.23
date	2006.07.22.20.48.23;	author stevesk;	state Exp;
branches;
next	1.22;

1.22
date	2006.07.10.16.37.36;	author stevesk;	state Exp;
branches;
next	1.21;

1.21
date	2006.03.27.01.21.18;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2006.03.25.13.17.03;	author djm;	state Exp;
branches;
next	1.19;

1.19
date	2006.03.25.01.13.23;	author djm;	state Exp;
branches;
next	1.18;

1.18
date	2006.03.25.00.05.41;	author djm;	state Exp;
branches;
next	1.17;

1.17
date	2006.03.19.18.51.19;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2001.07.23.18.21.46;	author stevesk;	state Exp;
branches
	1.16.18.1
	1.16.20.1;
next	1.15;

1.15
date	2001.04.16.08.05.34;	author deraadt;	state Exp;
branches
	1.15.2.1;
next	1.14;

1.14
date	2001.02.07.18.04.50;	author itojun;	state Exp;
branches;
next	1.13;

1.13
date	2001.02.07.16.46.08;	author markus;	state Exp;
branches;
next	1.12;

1.12
date	2001.02.07.08.57.26;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2001.02.04.15.32.27;	author stevesk;	state Exp;
branches;
next	1.10;

1.10
date	2001.01.28.20.53.21;	author stevesk;	state Exp;
branches;
next	1.9;

1.9
date	2001.01.21.19.06.02;	author markus;	state Exp;
branches;
next	1.8;

1.8
date	2000.09.07.20.27.55;	author deraadt;	state Exp;
branches
	1.8.2.1;
next	1.7;

1.7
date	2000.06.20.01.39.45;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2000.04.14.10.30.34;	author markus;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	99.11.24.00.26.04;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	99.11.23.22.25.56;	author markus;	state Exp;
branches;
next	1.3;

1.3
date	99.09.30.04.30.03;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.21.14.16;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	99.09.26.20.53.38;	author deraadt;	state Exp;
branches;
next	;

1.6.2.1
date	2000.09.01.18.23.25;	author jason;	state Exp;
branches;
next	1.6.2.2;

1.6.2.2
date	2000.11.08.21.31.40;	author jason;	state Exp;
branches;
next	1.6.2.3;

1.6.2.3
date	2001.03.12.15.44.18;	author jason;	state Exp;
branches;
next	1.6.2.4;

1.6.2.4
date	2001.03.21.18.53.21;	author jason;	state Exp;
branches;
next	;

1.8.2.1
date	2001.02.16.20.13.25;	author jason;	state Exp;
branches;
next	1.8.2.2;

1.8.2.2
date	2001.02.19.17.19.44;	author jason;	state Exp;
branches;
next	1.8.2.3;

1.8.2.3
date	2001.03.21.19.46.32;	author jason;	state Exp;
branches;
next	1.8.2.4;

1.8.2.4
date	2001.05.07.21.09.39;	author jason;	state Exp;
branches;
next	1.8.2.5;

1.8.2.5
date	2001.09.27.00.15.43;	author miod;	state Exp;
branches;
next	;

1.15.2.1
date	2001.09.27.19.03.56;	author jason;	state Exp;
branches;
next	1.15.2.2;

1.15.2.2
date	2002.03.09.00.20.45;	author miod;	state Exp;
branches;
next	;

1.16.18.1
date	2006.10.06.03.19.33;	author brad;	state Exp;
branches;
next	;

1.16.20.1
date	2006.09.30.04.06.51;	author brad;	state Exp;
branches;
next	;


desc
@@


1.33
log
@Add a function to enable security-related malloc_options.  With and ok
deraadt@@, something similar has been in the snaps for a while.
@
text
@/* $OpenBSD: xmalloc.c,v 1.32 2015/04/24 01:36:01 deraadt Exp $ */
/*
 * Author: Tatu Ylonen <ylo@@cs.hut.fi>
 * Copyright (c) 1995 Tatu Ylonen <ylo@@cs.hut.fi>, Espoo, Finland
 *                    All rights reserved
 * Versions of malloc and friends that check their results, and never return
 * failure (they call fatal if they encounter an error).
 *
 * As far as I am concerned, the code I have written for this software
 * can be used freely for any purpose.  Any derived versions of this
 * software must be clearly marked as such, and if the derived work is
 * incompatible with the protocol description in the RFC file, it must be
 * called by a name other than "ssh" or "Secure Shell".
 */

#include <stdarg.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "xmalloc.h"
#include "log.h"

void
ssh_malloc_init(void)
{
	extern char *malloc_options;

	malloc_options = "S";
}

void *
xmalloc(size_t size)
{
	void *ptr;

	if (size == 0)
		fatal("xmalloc: zero size");
	ptr = malloc(size);
	if (ptr == NULL)
		fatal("xmalloc: out of memory (allocating %zu bytes)", size);
	return ptr;
}

void *
xcalloc(size_t nmemb, size_t size)
{
	void *ptr;

	if (size == 0 || nmemb == 0)
		fatal("xcalloc: zero size");
	if (SIZE_MAX / nmemb < size)
		fatal("xcalloc: nmemb * size > SIZE_MAX");
	ptr = calloc(nmemb, size);
	if (ptr == NULL)
		fatal("xcalloc: out of memory (allocating %zu bytes)",
		    size * nmemb);
	return ptr;
}

void *
xreallocarray(void *ptr, size_t nmemb, size_t size)
{
	void *new_ptr;

	new_ptr = reallocarray(ptr, nmemb, size);
	if (new_ptr == NULL)
		fatal("xreallocarray: out of memory (%zu elements of %zu bytes)",
		    nmemb, size);
	return new_ptr;
}

char *
xstrdup(const char *str)
{
	size_t len;
	char *cp;

	len = strlen(str) + 1;
	cp = xmalloc(len);
	strlcpy(cp, str, len);
	return cp;
}

int
xasprintf(char **ret, const char *fmt, ...)
{
	va_list ap;
	int i;

	va_start(ap, fmt);
	i = vasprintf(ret, fmt, ap);
	va_end(ap);

	if (i < 0 || *ret == NULL)
		fatal("xasprintf: could not allocate memory");

	return (i);
}
@


1.32
log
@rename xrealloc() to xreallocarray() since it follows that form.
ok djm
@
text
@d1 1
a1 1
/* $OpenBSD: xmalloc.c,v 1.31 2015/02/06 23:21:59 millert Exp $ */
d24 8
@


1.31
log
@SIZE_MAX is standard, we should be using it in preference to the
obsolete SIZE_T_MAX.  OK miod@@ beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: xmalloc.c,v 1.30 2015/01/16 06:40:12 deraadt Exp $ */
d55 1
a55 1
xrealloc(void *ptr, size_t nmemb, size_t size)
a57 1
	size_t new_size = nmemb * size;
d59 1
a59 8
	if (new_size == 0)
		fatal("xrealloc: zero size");
	if (SIZE_MAX / nmemb < size)
		fatal("xrealloc: nmemb * size > SIZE_MAX");
	if (ptr == NULL)
		new_ptr = malloc(new_size);
	else
		new_ptr = realloc(ptr, new_size);
d61 2
a62 2
		fatal("xrealloc: out of memory (new_size %zu bytes)",
		    new_size);
@


1.30
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/* $OpenBSD: xmalloc.c,v 1.29 2014/01/04 17:50:55 tedu Exp $ */
d17 1
a20 1
#include <limits.h>
d45 2
a46 2
	if (SIZE_T_MAX / nmemb < size)
		fatal("xcalloc: nmemb * size > SIZE_T_MAX");
d62 2
a63 2
	if (SIZE_T_MAX / nmemb < size)
		fatal("xrealloc: nmemb * size > SIZE_T_MAX");
@


1.29
log
@use standard types and formats for size_t like variables. ok dtucker
@
text
@d1 1
a1 1
/* $OpenBSD: xmalloc.c,v 1.28 2013/05/17 00:13:14 djm Exp $ */
a15 1
#include <sys/param.h>
d20 1
@


1.28
log
@bye, bye xfree(); ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: xmalloc.c,v 1.27 2006/08/03 03:34:42 deraadt Exp $ */
d34 1
a34 1
		fatal("xmalloc: out of memory (allocating %lu bytes)", (u_long) size);
d49 2
a50 2
		fatal("xcalloc: out of memory (allocating %lu bytes)",
		    (u_long)(size * nmemb));
d69 2
a70 2
		fatal("xrealloc: out of memory (new_size %lu bytes)",
		    (u_long) new_size);
@


1.27
log
@almost entirely get rid of the culture of ".h files that include .h files"
ok djm, sort of ok stevesk
makes the pain stop in one easy step
@
text
@d1 1
a1 1
/* $OpenBSD: xmalloc.c,v 1.26 2006/08/01 23:22:48 stevesk Exp $ */
a71 8
}

void
xfree(void *ptr)
{
	if (ptr == NULL)
		fatal("xfree: NULL pointer given as argument");
	free(ptr);
@


1.26
log
@move #include <stdio.h> out of includes.h
@
text
@d1 1
a1 1
/* $OpenBSD: xmalloc.c,v 1.25 2006/07/26 13:57:17 stevesk Exp $ */
a15 2
#include "includes.h"

a16 1

@


1.25
log
@move #include <stdlib.h> out of includes.h
@
text
@d1 1
a1 1
/* $OpenBSD: xmalloc.c,v 1.24 2006/07/26 02:35:17 stevesk Exp $ */
d21 1
@


1.24
log
@move #include <sys/param.h> out of includes.h
@
text
@d1 1
a1 1
/* $OpenBSD: xmalloc.c,v 1.23 2006/07/22 20:48:23 stevesk Exp $ */
d21 1
@


1.23
log
@move #include <string.h> out of includes.h
@
text
@d1 1
a1 1
/* $OpenBSD: xmalloc.c,v 1.22 2006/07/10 16:37:36 stevesk Exp $ */
d17 2
@


1.22
log
@move #include <stdarg.h> out of includes.h; ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: xmalloc.c,v 1.21 2006/03/27 01:21:18 deraadt Exp $ */
d19 1
@


1.21
log
@we can do the size & nmemb check before the integer overflow check; evol
@
text
@d1 1
a1 1
/* $OpenBSD: xmalloc.c,v 1.20 2006/03/25 13:17:03 djm Exp $ */
d17 2
@


1.20
log
@Put $OpenBSD$ tags back (as comments) to replace the RCSID()s that
Theo nuked - our scripts to sync -portable need them in the files
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a38 2
	if (nmemb && size && SIZE_T_MAX / nmemb < size)
		fatal("xcalloc: nmemb * size > SIZE_T_MAX");
d41 2
a55 2
	if (nmemb && size && SIZE_T_MAX / nmemb < size)
		fatal("xrealloc: nmemb * size > SIZE_T_MAX");
d58 2
@


1.19
log
@change OpenSSH's xrealloc() function from being xrealloc(p, new_size) to
xrealloc(p, new_nmemb, new_itemsize).

realloc is particularly prone to integer overflows because it is almost
always allocating "n * size" bytes, so this is a far safer API;
ok deraadt@@
@
text
@d1 1
@


1.18
log
@introduce xcalloc() and xasprintf() failure-checked allocations functions
and use them throughout openssh

xcalloc is particularly important because malloc(nmemb * size) is a
dangerous idiom (subject to integer overflow) and it is time for it to
die

feedback and ok deraadt@@
@
text
@d38 1
a38 1
        if (nmemb && size && SIZE_T_MAX / nmemb < size)
d50 1
a50 1
xrealloc(void *ptr, size_t new_size)
d53 1
d55 2
d64 2
a65 1
		fatal("xrealloc: out of memory (new_size %lu bytes)", (u_long) new_size);
@


1.17
log
@RCSID() can die
@
text
@d34 16
d83 16
@


1.16
log
@no zero size xstrdup() error; ok markus@@
@
text
@a15 1
RCSID("$OpenBSD: xmalloc.c,v 1.15 2001/04/16 08:05:34 deraadt Exp $");
@


1.16.18.1
log
@upgrade to OpenSSH 4.4
@
text
@a0 1
/* $OpenBSD: xmalloc.c,v 1.27 2006/08/03 03:34:42 deraadt Exp $ */
d15 2
a16 5
#include <sys/param.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
d35 1
a35 17
xcalloc(size_t nmemb, size_t size)
{
	void *ptr;

	if (size == 0 || nmemb == 0)
		fatal("xcalloc: zero size");
	if (SIZE_T_MAX / nmemb < size)
		fatal("xcalloc: nmemb * size > SIZE_T_MAX");
	ptr = calloc(nmemb, size);
	if (ptr == NULL)
		fatal("xcalloc: out of memory (allocating %lu bytes)",
		    (u_long)(size * nmemb));
	return ptr;
}

void *
xrealloc(void *ptr, size_t nmemb, size_t size)
a37 1
	size_t new_size = nmemb * size;
a40 2
	if (SIZE_T_MAX / nmemb < size)
		fatal("xrealloc: nmemb * size > SIZE_T_MAX");
d46 1
a46 2
		fatal("xrealloc: out of memory (new_size %lu bytes)",
		    (u_long) new_size);
a67 16
}

int
xasprintf(char **ret, const char *fmt, ...)
{
	va_list ap;
	int i;

	va_start(ap, fmt);
	i = vasprintf(ret, fmt, ap);
	va_end(ap);

	if (i < 0 || *ret == NULL)
		fatal("xasprintf: could not allocate memory");

	return (i);
@


1.16.20.1
log
@upgrade to OpenSSH 4.4
@
text
@a0 1
/* $OpenBSD: xmalloc.c,v 1.27 2006/08/03 03:34:42 deraadt Exp $ */
d15 2
a16 5
#include <sys/param.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
d35 1
a35 17
xcalloc(size_t nmemb, size_t size)
{
	void *ptr;

	if (size == 0 || nmemb == 0)
		fatal("xcalloc: zero size");
	if (SIZE_T_MAX / nmemb < size)
		fatal("xcalloc: nmemb * size > SIZE_T_MAX");
	ptr = calloc(nmemb, size);
	if (ptr == NULL)
		fatal("xcalloc: out of memory (allocating %lu bytes)",
		    (u_long)(size * nmemb));
	return ptr;
}

void *
xrealloc(void *ptr, size_t nmemb, size_t size)
a37 1
	size_t new_size = nmemb * size;
a40 2
	if (SIZE_T_MAX / nmemb < size)
		fatal("xrealloc: nmemb * size > SIZE_T_MAX");
d46 1
a46 2
		fatal("xrealloc: out of memory (new_size %lu bytes)",
		    (u_long) new_size);
a67 16
}

int
xasprintf(char **ret, const char *fmt, ...)
{
	va_list ap;
	int i;

	va_start(ap, fmt);
	i = vasprintf(ret, fmt, ap);
	va_end(ap);

	if (i < 0 || *ret == NULL)
		fatal("xasprintf: could not allocate memory");

	return (i);
@


1.15
log
@xrealloc dealing with ptr == nULL; mouring
@
text
@d16 1
a16 1
RCSID("$OpenBSD: xmalloc.c,v 1.14 2001/02/07 18:04:50 itojun Exp $");
d61 1
a61 1
	size_t len = strlen(str) + 1;
d64 1
a64 2
	if (len == 0)
		fatal("xstrdup: zero size");
@


1.15.2.1
log
@Pull in OpenSSH-2.9.9
@
text
@d16 1
a16 1
RCSID("$OpenBSD: xmalloc.c,v 1.16 2001/07/23 18:21:46 stevesk Exp $");
d61 1
a61 1
	size_t len;
d64 2
a65 1
	len = strlen(str) + 1;
@


1.15.2.2
log
@Merge OpenSSH 3.1, keeping /etc as configuration files directory.
(i.e. OpenSSH 3.1 + openbsd29_3.1.patch)
@
text
@@


1.14
log
@fix size_t -> int cast (use u_long).  markus ok
@
text
@d16 1
a16 1
RCSID("$OpenBSD: xmalloc.c,v 1.13 2001/02/07 16:46:08 markus Exp $");
d42 3
a44 2
		fatal("xrealloc: NULL pointer given as argument");
	new_ptr = realloc(ptr, new_size);
@


1.13
log
@typo in fatal()
@
text
@d16 1
a16 1
RCSID("$OpenBSD: xmalloc.c,v 1.12 2001/02/07 08:57:26 deraadt Exp $");
d30 1
a30 1
		fatal("xmalloc: out of memory (allocating %d bytes)", (int) size);
d45 1
a45 1
		fatal("xrealloc: out of memory (new_size %d bytes)", (int) new_size);
@


1.12
log
@deal with new ANSI malloc stuff
@
text
@d16 1
a16 1
RCSID("$OpenBSD: xmalloc.c,v 1.11 2001/02/04 15:32:27 stevesk Exp $");
d40 1
a40 1
		fatal("xmalloc: zero size");
d64 1
a64 1
		fatal("xmalloc: zero size");
@


1.11
log
@unexpand and remove end-of-line whitespace; ok markus@@
@
text
@d16 1
a16 1
RCSID("$OpenBSD: xmalloc.c,v 1.10 2001/01/28 20:53:21 stevesk Exp $");
d24 5
a28 1
	void *ptr = malloc(size);
d39 2
d61 1
d63 3
a65 1
	char *cp = xmalloc(len);
@


1.10
log
@use size_t for strlen() return.  ok markus@@
@
text
@d7 1
a7 1
 * 
d16 1
a16 1
RCSID("$OpenBSD: xmalloc.c,v 1.9 2001/01/21 19:06:02 markus Exp $");
@


1.9
log
@split ssh.h and try to cleanup the #include mess. remove unnecessary #includes.
rename util.[ch] -> misc.[ch]
@
text
@d16 1
a16 1
RCSID("$OpenBSD: xmalloc.c,v 1.8 2000/09/07 20:27:55 deraadt Exp $");
d54 1
a54 1
	int len = strlen(str) + 1;
@


1.8
log
@cleanup copyright notices on all files.  I have attempted to be accurate with
the details.  everything is now under Tatu's licence (which I copied from his
readme), and/or the core-sdi bsd-ish thing for deattack, or various openbsd
developers under a 2-term bsd licence.  We're not changing any rules, just
being accurate.
@
text
@d16 1
a16 1
RCSID("$OpenBSD: xmalloc.c,v 1.7 2000/06/20 01:39:45 markus Exp $");
d18 2
a19 1
#include "ssh.h"
@


1.8.2.1
log
@Pull in OpenSSH 2.5.0
@
text
@d7 1
a7 1
 *
d16 1
a16 1
RCSID("$OpenBSD: xmalloc.c,v 1.14 2001/02/07 18:04:50 itojun Exp $");
d18 1
a18 2
#include "xmalloc.h"
#include "log.h"
d23 1
a23 5
	void *ptr;

	if (size == 0)
		fatal("xmalloc: zero size");
	ptr = malloc(size);
d25 1
a25 1
		fatal("xmalloc: out of memory (allocating %lu bytes)", (u_long) size);
a33 2
	if (new_size == 0)
		fatal("xrealloc: zero size");
d38 1
a38 1
		fatal("xrealloc: out of memory (new_size %lu bytes)", (u_long) new_size);
d53 1
a53 2
	size_t len = strlen(str) + 1;
	char *cp;
d55 1
a55 3
	if (len == 0)
		fatal("xstrdup: zero size");
	cp = xmalloc(len);
@


1.8.2.2
log
@Pull in OpenSSH-2.5.1
@
text
@@


1.8.2.3
log
@Pull in OpenSSH-2.5.2 for 2.8 branch.
@
text
@@


1.8.2.4
log
@Pull in OpenSSH-2.9 to 2.8 branch.
@
text
@d16 1
a16 1
RCSID("$OpenBSD: xmalloc.c,v 1.15 2001/04/16 08:05:34 deraadt Exp $");
d42 2
a43 3
		new_ptr = malloc(new_size);
	else
		new_ptr = realloc(ptr, new_size);
@


1.8.2.5
log
@Pull in OpenSSH 2.9.9 to the 2.8 branch.
@
text
@d16 1
a16 1
RCSID("$OpenBSD: xmalloc.c,v 1.16 2001/07/23 18:21:46 stevesk Exp $");
d61 1
a61 1
	size_t len;
d64 2
a65 1
	len = strlen(str) + 1;
@


1.7
log
@OpenBSD tag
@
text
@a4 1
 * Created: Mon Mar 20 21:23:10 1995 ylo
d7 6
d16 1
a16 1
RCSID("$OpenBSD: xmalloc.c,v 1.6 2000/04/14 10:30:34 markus Exp $");
@


1.6
log
@whitespace cleanup
@
text
@d11 1
a11 1
RCSID("$Id: xmalloc.c,v 1.5 1999/11/24 00:26:04 deraadt Exp $");
@


1.6.2.1
log
@Pull in the rest of openssh-2.2.0 to 2.7 branch (luvin' cvs...)
@
text
@d11 1
a11 1
RCSID("$OpenBSD: xmalloc.c,v 1.7 2000/06/20 01:39:45 markus Exp $");
@


1.6.2.2
log
@openssh-2.3.0 (again) for 2.7 branch
@
text
@d5 1
a7 6
 * 
 * As far as I am concerned, the code I have written for this software
 * can be used freely for any purpose.  Any derived versions of this
 * software must be clearly marked as such, and if the derived work is
 * incompatible with the protocol description in the RFC file, it must be
 * called by a name other than "ssh" or "Secure Shell".
d11 1
a11 1
RCSID("$OpenBSD: xmalloc.c,v 1.8 2000/09/07 20:27:55 deraadt Exp $");
@


1.6.2.3
log
@OpenSSH-2.5.1 for 2.7 patch branch
@
text
@d7 1
a7 1
 *
d16 1
a16 1
RCSID("$OpenBSD: xmalloc.c,v 1.14 2001/02/07 18:04:50 itojun Exp $");
d18 1
a18 2
#include "xmalloc.h"
#include "log.h"
d23 1
a23 5
	void *ptr;

	if (size == 0)
		fatal("xmalloc: zero size");
	ptr = malloc(size);
d25 1
a25 1
		fatal("xmalloc: out of memory (allocating %lu bytes)", (u_long) size);
a33 2
	if (new_size == 0)
		fatal("xrealloc: zero size");
d38 1
a38 1
		fatal("xrealloc: out of memory (new_size %lu bytes)", (u_long) new_size);
d53 1
a53 2
	size_t len = strlen(str) + 1;
	char *cp;
d55 1
a55 3
	if (len == 0)
		fatal("xstrdup: zero size");
	cp = xmalloc(len);
@


1.6.2.4
log
@Pull in OpenSSH-2.5.2 for 2.7 branch.
@
text
@@


1.5
log
@much more KNF
@
text
@d11 1
a11 1
RCSID("$Id: xmalloc.c,v 1.4 1999/11/23 22:25:56 markus Exp $");
d37 1
a37 1
void 
@


1.4
log
@KNF part 1
@
text
@d2 7
a8 14

xmalloc.c

Author: Tatu Ylonen <ylo@@cs.hut.fi>

Copyright (c) 1995 Tatu Ylonen <ylo@@cs.hut.fi>, Espoo, Finland
                   All rights reserved

Created: Mon Mar 20 21:23:10 1995 ylo

Versions of malloc and friends that check their results, and never return
failure (they call fatal if they encounter an error).

*/
d11 1
a11 1
RCSID("$Id: xmalloc.c,v 1.3 1999/09/30 04:30:03 deraadt Exp $");
@


1.3
log
@more culling
@
text
@d18 1
a18 1
RCSID("$Id: xmalloc.c,v 1.2 1999/09/29 21:14:16 deraadt Exp $");
d22 2
a23 1
void *xmalloc(size_t size)
d25 4
a28 4
  void *ptr = malloc(size);
  if (ptr == NULL)
    fatal("xmalloc: out of memory (allocating %d bytes)", (int)size);
  return ptr;
d31 2
a32 1
void *xrealloc(void *ptr, size_t new_size)
d34 1
a34 1
  void *new_ptr;
d36 6
a41 6
  if (ptr == NULL)
    fatal("xrealloc: NULL pointer given as argument");
  new_ptr = realloc(ptr, new_size);
  if (new_ptr == NULL)
    fatal("xrealloc: out of memory (new_size %d bytes)", (int)new_size);
  return new_ptr;
d44 2
a45 1
void xfree(void *ptr)
d47 3
a49 3
  if (ptr == NULL)
    fatal("xfree: NULL pointer given as argument");
  free(ptr);
d52 2
a53 1
char *xstrdup(const char *str)
d55 1
a55 1
  int len = strlen(str) + 1;
d57 3
a59 3
  char *cp = xmalloc(len);
  strlcpy(cp, str, len);
  return cp;
@


1.2
log
@numerous sprintf, strncpy, strcpy cleanups
@
text
@d18 1
a18 1
RCSID("$Id: xmalloc.c,v 1.1 1999/09/26 20:53:38 deraadt Exp $");
a20 6

#if 0
void *malloc(size_t size);
void *realloc(void *ptr, size_t size);
void free(void *ptr);
#endif
@


1.1
log
@i bet a lot of people didn't know what ssh 1.2.16 had a nice license.
well, except for the patent issues.  someone in sweden (forget their
name at the moment) cleaned out most of the patented code, and now
this code removes rsa code.  when this is done, it will link against
libssl, but the work isn't completely done yet.  then we need to bring
this up to modern days, featurewise.
@
text
@d18 1
a18 1
RCSID("$Id: xmalloc.c,v 1.2 1999/05/04 11:59:28 bg Exp $");
d57 4
a60 2
  char *cp = xmalloc(strlen(str) + 1);
  strcpy(cp, str);
@

