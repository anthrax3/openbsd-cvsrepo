head	1.83;
access;
symbols
	OPENBSD_6_2:1.83.0.2
	OPENBSD_6_2_BASE:1.83
	OPENBSD_6_1:1.81.0.4
	OPENBSD_6_1_BASE:1.81
	OPENBSD_6_0:1.78.0.4
	OPENBSD_6_0_BASE:1.78
	OPENBSD_5_9:1.76.0.2
	OPENBSD_5_9_BASE:1.76
	OPENBSD_5_8:1.73.0.2
	OPENBSD_5_8_BASE:1.73
	OPENBSD_5_7:1.71.0.2
	OPENBSD_5_7_BASE:1.71
	OPENBSD_5_6:1.64.0.4
	OPENBSD_5_6_BASE:1.64
	OPENBSD_5_5:1.62.0.4
	OPENBSD_5_5_BASE:1.62
	OPENBSD_5_4:1.56.0.2
	OPENBSD_5_4_BASE:1.56
	OPENBSD_5_3:1.54.0.2
	OPENBSD_5_3_BASE:1.54
	OPENBSD_5_2:1.52.0.8
	OPENBSD_5_2_BASE:1.52
	OPENBSD_5_1_BASE:1.52
	OPENBSD_5_1:1.52.0.6
	OPENBSD_5_0:1.52.0.4
	OPENBSD_5_0_BASE:1.52
	OPENBSD_4_9:1.52.0.2
	OPENBSD_4_9_BASE:1.52
	OPENBSD_4_8:1.49.0.4
	OPENBSD_4_8_BASE:1.49
	OPENBSD_4_7:1.49.0.2
	OPENBSD_4_7_BASE:1.49
	OPENBSD_4_6:1.47.0.4
	OPENBSD_4_6_BASE:1.47
	OPENBSD_4_5:1.46.0.8
	OPENBSD_4_5_BASE:1.46
	OPENBSD_4_4:1.46.0.6
	OPENBSD_4_4_BASE:1.46
	OPENBSD_4_3:1.46.0.4
	OPENBSD_4_3_BASE:1.46
	OPENBSD_4_2:1.46.0.2
	OPENBSD_4_2_BASE:1.46
	OPENBSD_4_1:1.44.0.2
	OPENBSD_4_1_BASE:1.44
	OPENBSD_4_0:1.44.0.4
	OPENBSD_4_0_BASE:1.44
	OPENBSD_3_9:1.38.0.2
	OPENBSD_3_9_BASE:1.38
	OPENBSD_3_8:1.37.0.2
	OPENBSD_3_8_BASE:1.37
	OPENBSD_3_7:1.35.0.4
	OPENBSD_3_7_BASE:1.35
	OPENBSD_3_6:1.35.0.2
	OPENBSD_3_6_BASE:1.35
	OPENBSD_3_5:1.33.0.6
	OPENBSD_3_5_BASE:1.33
	OPENBSD_3_4:1.33.0.4
	OPENBSD_3_4_BASE:1.33
	OPENBSD_3_3:1.33.0.2
	OPENBSD_3_3_BASE:1.33
	OPENBSD_3_2:1.32.0.2
	OPENBSD_3_2_BASE:1.32
	OPENBSD_3_1:1.30.0.2
	OPENBSD_3_1_BASE:1.30
	OPENBSD_3_0:1.26.0.2
	OPENBSD_3_0_BASE:1.26
	OPENBSD_2_9_BASE:1.22
	OPENBSD_2_9:1.22.0.2
	OPENBSD_2_8:1.7.0.2
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2;
locks; strict;
comment	@ * @;


1.83
date	2017.05.30.14.23.52;	author markus;	state Exp;
branches;
next	1.82;
commitid	tEOGxoM4kvBMLD6J;

1.82
date	2017.05.03.21.08.09;	author naddy;	state Exp;
branches;
next	1.81;
commitid	wlKSvaBqtNpb5VOS;

1.81
date	2016.09.28.21.44.52;	author djm;	state Exp;
branches;
next	1.80;
commitid	dcmMFjyoLwi1xMmB;

1.80
date	2016.09.28.20.32.42;	author djm;	state Exp;
branches;
next	1.79;
commitid	TvNoQIkfkdH4jhbD;

1.79
date	2016.09.22.21.15.41;	author djm;	state Exp;
branches;
next	1.78;
commitid	L0PbxkBMH4yTMJpd;

1.78
date	2016.05.02.10.26.04;	author djm;	state Exp;
branches;
next	1.77;
commitid	rVUG0L3JBpFl5b0k;

1.77
date	2016.05.02.08.49.03;	author djm;	state Exp;
branches;
next	1.76;
commitid	RYYIr1bk0phq4fXa;

1.76
date	2016.02.08.10.57.07;	author djm;	state Exp;
branches;
next	1.75;
commitid	eSwtzi7BWC7eBzrp;

1.75
date	2016.01.14.16.17.39;	author markus;	state Exp;
branches;
next	1.74;
commitid	W9ye0gltieEl87AJ;

1.74
date	2015.12.04.16.41.28;	author markus;	state Exp;
branches;
next	1.73;
commitid	K3glY441IowbrjDE;

1.73
date	2015.07.30.00.01.34;	author djm;	state Exp;
branches;
next	1.72;
commitid	YReS3Mui4FCZvL7z;

1.72
date	2015.07.29.04.43.06;	author djm;	state Exp;
branches;
next	1.71;
commitid	2orWlXaVca3RWjbl;

1.71
date	2015.02.16.22.13.32;	author djm;	state Exp;
branches;
next	1.70;
commitid	vWL0dluw4oITNbM8;

1.70
date	2015.01.26.06.10.03;	author djm;	state Exp;
branches;
next	1.69;
commitid	F603CYAZ9E536XCr;

1.69
date	2015.01.19.20.16.15;	author markus;	state Exp;
branches;
next	1.68;
commitid	U9l75XYAjMKaQ8Jp;

1.68
date	2015.01.19.20.07.45;	author markus;	state Exp;
branches;
next	1.67;
commitid	GrtSC5ve2VERgUln;

1.67
date	2015.01.19.19.52.16;	author markus;	state Exp;
branches;
next	1.66;
commitid	UHlhoIB5NMb8eAPm;

1.66
date	2015.01.15.09.40.00;	author djm;	state Exp;
branches;
next	1.65;
commitid	akRUKeZEbb3ylbKG;

1.65
date	2015.01.13.19.31.40;	author markus;	state Exp;
branches;
next	1.64;
commitid	sCqZ9ho1RfL2Vg0U;

1.64
date	2014.05.02.03.27.54;	author djm;	state Exp;
branches;
next	1.63;

1.63
date	2014.03.26.04.55.35;	author djm;	state Exp;
branches;
next	1.62;

1.62
date	2014.01.27.18.58.14;	author markus;	state Exp;
branches;
next	1.61;

1.61
date	2014.01.25.10.12.50;	author dtucker;	state Exp;
branches;
next	1.60;

1.60
date	2014.01.12.08.13.13;	author djm;	state Exp;
branches;
next	1.59;

1.59
date	2014.01.09.23.20.00;	author djm;	state Exp;
branches;
next	1.58;

1.58
date	2013.11.07.11.58.27;	author dtucker;	state Exp;
branches;
next	1.57;

1.57
date	2013.11.02.21.59.15;	author markus;	state Exp;
branches;
next	1.56;

1.56
date	2013.07.19.07.37.48;	author markus;	state Exp;
branches;
next	1.55;

1.55
date	2013.04.19.01.06.50;	author djm;	state Exp;
branches;
next	1.54;

1.54
date	2013.01.08.18.49.04;	author markus;	state Exp;
branches;
next	1.53;

1.53
date	2012.12.11.22.31.18;	author markus;	state Exp;
branches;
next	1.52;

1.52
date	2010.09.22.05.01.29;	author djm;	state Exp;
branches;
next	1.51;

1.51
date	2010.09.09.10.45.45;	author djm;	state Exp;
branches;
next	1.50;

1.50
date	2010.08.31.11.54.45;	author djm;	state Exp;
branches;
next	1.49;

1.49
date	2010.02.26.20.29.54;	author djm;	state Exp;
branches;
next	1.48;

1.48
date	2009.10.24.11.13.54;	author andreas;	state Exp;
branches;
next	1.47;

1.47
date	2009.05.27.06.34.36;	author andreas;	state Exp;
branches;
next	1.46;

1.46
date	2007.06.07.19.37.34;	author pvalchev;	state Exp;
branches;
next	1.45;

1.45
date	2007.06.05.06.52.37;	author djm;	state Exp;
branches;
next	1.44;

1.44
date	2006.08.03.03.34.42;	author deraadt;	state Exp;
branches;
next	1.43;

1.43
date	2006.07.23.01.11.05;	author stevesk;	state Exp;
branches;
next	1.42;

1.42
date	2006.04.20.09.27.09;	author djm;	state Exp;
branches;
next	1.41;

1.41
date	2006.03.25.22.22.43;	author djm;	state Exp;
branches;
next	1.40;

1.40
date	2006.03.19.18.53.12;	author deraadt;	state Exp;
branches;
next	1.39;

1.39
date	2006.03.07.09.07.40;	author djm;	state Exp;
branches;
next	1.38;

1.38
date	2005.11.04.05.15.59;	author djm;	state Exp;
branches
	1.38.2.1;
next	1.37;

1.37
date	2005.07.25.11.59.39;	author markus;	state Exp;
branches
	1.37.2.1;
next	1.36;

1.36
date	2005.06.17.02.44.32;	author djm;	state Exp;
branches;
next	1.35;

1.35
date	2004.06.13.12.53.24;	author djm;	state Exp;
branches
	1.35.2.1
	1.35.4.1;
next	1.34;

1.34
date	2004.05.21.08.43.03;	author markus;	state Exp;
branches;
next	1.33;

1.33
date	2003.02.16.17.09.57;	author markus;	state Exp;
branches
	1.33.4.1
	1.33.6.1;
next	1.32;

1.32
date	2002.09.09.14.54.14;	author markus;	state Exp;
branches
	1.32.2.1;
next	1.31;

1.31
date	2002.05.16.22.02.50;	author markus;	state Exp;
branches;
next	1.30;

1.30
date	2002.03.18.17.50.31;	author provos;	state Exp;
branches
	1.30.2.1;
next	1.29;

1.29
date	2002.02.14.23.41.01;	author markus;	state Exp;
branches;
next	1.28;

1.28
date	2001.12.28.15.06.00;	author markus;	state Exp;
branches;
next	1.27;

1.27
date	2001.12.20.22.50.24;	author djm;	state Exp;
branches;
next	1.26;

1.26
date	2001.06.26.17.27.23;	author markus;	state Exp;
branches
	1.26.2.1;
next	1.25;

1.25
date	2001.06.26.06.32.53;	author itojun;	state Exp;
branches;
next	1.24;

1.24
date	2001.06.25.08.25.37;	author markus;	state Exp;
branches;
next	1.23;

1.23
date	2001.06.23.02.34.28;	author markus;	state Exp;
branches;
next	1.22;

1.22
date	2001.04.04.20.25.37;	author markus;	state Exp;
branches
	1.22.2.1;
next	1.21;

1.21
date	2001.04.04.14.34.58;	author markus;	state Exp;
branches;
next	1.20;

1.20
date	2001.04.04.09.48.34;	author markus;	state Exp;
branches;
next	1.19;

1.19
date	2001.04.03.23.32.12;	author markus;	state Exp;
branches;
next	1.18;

1.18
date	2001.04.03.19.53.29;	author markus;	state Exp;
branches;
next	1.17;

1.17
date	2001.03.29.21.17.40;	author markus;	state Exp;
branches;
next	1.16;

1.16
date	2001.03.28.21.59.40;	author provos;	state Exp;
branches;
next	1.15;

1.15
date	2001.03.05.17.17.20;	author markus;	state Exp;
branches;
next	1.14;

1.14
date	2001.02.11.12.59.24;	author markus;	state Exp;
branches;
next	1.13;

1.13
date	2001.02.04.15.32.24;	author stevesk;	state Exp;
branches;
next	1.12;

1.12
date	2001.01.29.01.58.16;	author niklas;	state Exp;
branches;
next	1.11;

1.11
date	2000.12.20.19.37.22;	author markus;	state Exp;
branches;
next	1.10;

1.10
date	2000.12.19.23.17.56;	author markus;	state Exp;
branches;
next	1.9;

1.9
date	2000.12.15.17.30.14;	author provos;	state Exp;
branches;
next	1.8;

1.8
date	2000.11.12.19.50.37;	author markus;	state Exp;
branches;
next	1.7;

1.7
date	2000.10.12.14.21.12;	author markus;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2000.10.11.20.27.23;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2000.10.11.04.02.17;	author provos;	state Exp;
branches;
next	1.4;

1.4
date	2000.09.07.20.27.51;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2000.05.25.20.45.20;	author markus;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.12.07.03.06;	author markus;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2000.04.03.20.06.16;	author markus;	state Exp;
branches;
next	;

1.2.2.1
date	2000.06.12.02.37.34;	author jason;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2000.11.08.21.30.51;	author jason;	state Exp;
branches;
next	1.2.2.3;

1.2.2.3
date	2001.03.12.15.44.11;	author jason;	state Exp;
branches;
next	1.2.2.4;

1.2.2.4
date	2001.03.21.18.52.47;	author jason;	state Exp;
branches;
next	;

1.7.2.1
date	2001.02.16.20.13.04;	author jason;	state Exp;
branches;
next	1.7.2.2;

1.7.2.2
date	2001.02.19.17.18.59;	author jason;	state Exp;
branches;
next	1.7.2.3;

1.7.2.3
date	2001.03.21.19.46.25;	author jason;	state Exp;
branches;
next	1.7.2.4;

1.7.2.4
date	2001.05.07.21.09.30;	author jason;	state Exp;
branches;
next	1.7.2.5;

1.7.2.5
date	2001.09.27.00.15.42;	author miod;	state Exp;
branches;
next	1.7.2.6;

1.7.2.6
date	2002.03.08.17.04.42;	author brad;	state Exp;
branches;
next	;

1.22.2.1
date	2001.09.27.19.03.54;	author jason;	state Exp;
branches;
next	1.22.2.2;

1.22.2.2
date	2002.03.09.00.20.44;	author miod;	state Exp;
branches;
next	1.22.2.3;

1.22.2.3
date	2002.06.02.22.56.10;	author miod;	state Exp;
branches;
next	;

1.26.2.1
date	2002.03.07.17.37.46;	author jason;	state Exp;
branches;
next	1.26.2.2;

1.26.2.2
date	2002.05.17.00.03.23;	author miod;	state Exp;
branches;
next	1.26.2.3;

1.26.2.3
date	2002.06.22.07.23.17;	author miod;	state Exp;
branches;
next	1.26.2.4;

1.26.2.4
date	2002.10.11.14.53.06;	author miod;	state Exp;
branches;
next	;

1.30.2.1
date	2002.06.26.15.30.38;	author jason;	state Exp;
branches;
next	1.30.2.2;

1.30.2.2
date	2002.10.11.14.51.52;	author miod;	state Exp;
branches;
next	1.30.2.3;

1.30.2.3
date	2003.04.03.22.35.17;	author miod;	state Exp;
branches;
next	;

1.32.2.1
date	2003.04.01.00.12.13;	author margarida;	state Exp;
branches;
next	1.32.2.2;

1.32.2.2
date	2003.09.16.21.20.25;	author brad;	state Exp;
branches;
next	;

1.33.4.1
date	2004.08.19.22.37.31;	author brad;	state Exp;
branches;
next	;

1.33.6.1
date	2004.08.19.04.13.26;	author brad;	state Exp;
branches;
next	;

1.35.2.1
date	2005.09.02.03.45.00;	author brad;	state Exp;
branches;
next	;

1.35.4.1
date	2005.09.04.18.40.02;	author brad;	state Exp;
branches;
next	1.35.4.2;

1.35.4.2
date	2006.02.03.02.53.44;	author brad;	state Exp;
branches;
next	;

1.37.2.1
date	2006.02.03.03.01.56;	author brad;	state Exp;
branches;
next	1.37.2.2;

1.37.2.2
date	2006.10.06.03.19.32;	author brad;	state Exp;
branches;
next	;

1.38.2.1
date	2006.09.30.04.06.50;	author brad;	state Exp;
branches;
next	;


desc
@@


1.83
log
@protocol handlers all get struct ssh passed; ok djm@@
@
text
@/* $OpenBSD: kex.h,v 1.82 2017/05/03 21:08:09 naddy Exp $ */

/*
 * Copyright (c) 2000, 2001 Markus Friedl.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef KEX_H
#define KEX_H

#include "mac.h"
#include "buffer.h" /* XXX for typedef */
#include "key.h" /* XXX for typedef */

#ifdef WITH_LEAKMALLOC
#include "leakmalloc.h"
#endif

#define KEX_COOKIE_LEN	16

#define	KEX_DH1				"diffie-hellman-group1-sha1"
#define	KEX_DH14_SHA1			"diffie-hellman-group14-sha1"
#define	KEX_DH14_SHA256			"diffie-hellman-group14-sha256"
#define	KEX_DH16_SHA512			"diffie-hellman-group16-sha512"
#define	KEX_DH18_SHA512			"diffie-hellman-group18-sha512"
#define	KEX_DHGEX_SHA1			"diffie-hellman-group-exchange-sha1"
#define	KEX_DHGEX_SHA256		"diffie-hellman-group-exchange-sha256"
#define	KEX_ECDH_SHA2_NISTP256		"ecdh-sha2-nistp256"
#define	KEX_ECDH_SHA2_NISTP384		"ecdh-sha2-nistp384"
#define	KEX_ECDH_SHA2_NISTP521		"ecdh-sha2-nistp521"
#define	KEX_CURVE25519_SHA256		"curve25519-sha256"
#define	KEX_CURVE25519_SHA256_OLD	"curve25519-sha256@@libssh.org"

#define COMP_NONE	0
#define COMP_ZLIB	1
#define COMP_DELAYED	2

#define CURVE25519_SIZE 32

enum kex_init_proposals {
	PROPOSAL_KEX_ALGS,
	PROPOSAL_SERVER_HOST_KEY_ALGS,
	PROPOSAL_ENC_ALGS_CTOS,
	PROPOSAL_ENC_ALGS_STOC,
	PROPOSAL_MAC_ALGS_CTOS,
	PROPOSAL_MAC_ALGS_STOC,
	PROPOSAL_COMP_ALGS_CTOS,
	PROPOSAL_COMP_ALGS_STOC,
	PROPOSAL_LANG_CTOS,
	PROPOSAL_LANG_STOC,
	PROPOSAL_MAX
};

enum kex_modes {
	MODE_IN,
	MODE_OUT,
	MODE_MAX
};

enum kex_exchange {
	KEX_DH_GRP1_SHA1,
	KEX_DH_GRP14_SHA1,
	KEX_DH_GRP14_SHA256,
	KEX_DH_GRP16_SHA512,
	KEX_DH_GRP18_SHA512,
	KEX_DH_GEX_SHA1,
	KEX_DH_GEX_SHA256,
	KEX_ECDH_SHA2,
	KEX_C25519_SHA256,
	KEX_MAX
};

#define KEX_INIT_SENT	0x0001

struct sshenc {
	char	*name;
	const struct sshcipher *cipher;
	int	enabled;
	u_int	key_len;
	u_int	iv_len;
	u_int	block_size;
	u_char	*key;
	u_char	*iv;
};
struct sshcomp {
	u_int	type;
	int	enabled;
	char	*name;
};
struct newkeys {
	struct sshenc	enc;
	struct sshmac	mac;
	struct sshcomp  comp;
};

struct ssh;

struct kex {
	u_char	*session_id;
	size_t	session_id_len;
	struct newkeys	*newkeys[MODE_MAX];
	u_int	we_need;
	u_int	dh_need;
	int	server;
	char	*name;
	char	*hostkey_alg;
	int	hostkey_type;
	int	hostkey_nid;
	u_int	kex_type;
	int	rsa_sha2;
	int	ext_info_c;
	struct sshbuf *my;
	struct sshbuf *peer;
	sig_atomic_t done;
	u_int	flags;
	int	hash_alg;
	int	ec_nid;
	char	*client_version_string;
	char	*server_version_string;
	char	*failed_choice;
	int	(*verify_host_key)(struct sshkey *, struct ssh *);
	struct sshkey *(*load_host_public_key)(int, int, struct ssh *);
	struct sshkey *(*load_host_private_key)(int, int, struct ssh *);
	int	(*host_key_index)(struct sshkey *, int, struct ssh *);
	int	(*sign)(struct sshkey *, struct sshkey *, u_char **, size_t *,
	    const u_char *, size_t, const char *, u_int);
	int	(*kex[KEX_MAX])(struct ssh *);
	/* kex specific state */
	DH	*dh;			/* DH */
	u_int	min, max, nbits;	/* GEX */
	EC_KEY	*ec_client_key;		/* ECDH */
	const EC_GROUP *ec_group;	/* ECDH */
	u_char c25519_client_key[CURVE25519_SIZE]; /* 25519 */
	u_char c25519_client_pubkey[CURVE25519_SIZE]; /* 25519 */
};

int	 kex_names_valid(const char *);
char	*kex_alg_list(char);
char	*kex_names_cat(const char *, const char *);
int	 kex_assemble_names(const char *, char **);

int	 kex_new(struct ssh *, char *[PROPOSAL_MAX], struct kex **);
int	 kex_setup(struct ssh *, char *[PROPOSAL_MAX]);
void	 kex_free_newkeys(struct newkeys *);
void	 kex_free(struct kex *);

int	 kex_buf2prop(struct sshbuf *, int *, char ***);
int	 kex_prop2buf(struct sshbuf *, char *proposal[PROPOSAL_MAX]);
void	 kex_prop_free(char **);

int	 kex_send_kexinit(struct ssh *);
int	 kex_input_kexinit(int, u_int32_t, struct ssh *);
int	 kex_input_ext_info(int, u_int32_t, struct ssh *);
int	 kex_derive_keys(struct ssh *, u_char *, u_int, const struct sshbuf *);
int	 kex_derive_keys_bn(struct ssh *, u_char *, u_int, const BIGNUM *);
int	 kex_send_newkeys(struct ssh *);
int	 kex_start_rekex(struct ssh *);

int	 kexdh_client(struct ssh *);
int	 kexdh_server(struct ssh *);
int	 kexgex_client(struct ssh *);
int	 kexgex_server(struct ssh *);
int	 kexecdh_client(struct ssh *);
int	 kexecdh_server(struct ssh *);
int	 kexc25519_client(struct ssh *);
int	 kexc25519_server(struct ssh *);

int	 kex_dh_hash(int, const char *, const char *,
    const u_char *, size_t, const u_char *, size_t, const u_char *, size_t,
    const BIGNUM *, const BIGNUM *, const BIGNUM *, u_char *, size_t *);

int	 kexgex_hash(int, const char *, const char *,
    const u_char *, size_t, const u_char *, size_t, const u_char *, size_t,
    int, int, int,
    const BIGNUM *, const BIGNUM *, const BIGNUM *,
    const BIGNUM *, const BIGNUM *,
    u_char *, size_t *);

int kex_ecdh_hash(int, const EC_GROUP *, const char *, const char *,
    const u_char *, size_t, const u_char *, size_t, const u_char *, size_t,
    const EC_POINT *, const EC_POINT *, const BIGNUM *, u_char *, size_t *);

int	 kex_c25519_hash(int, const char *, const char *,
    const u_char *, size_t, const u_char *, size_t,
    const u_char *, size_t, const u_char *, const u_char *,
    const u_char *, size_t, u_char *, size_t *);

void	kexc25519_keygen(u_char key[CURVE25519_SIZE], u_char pub[CURVE25519_SIZE])
	__attribute__((__bounded__(__minbytes__, 1, CURVE25519_SIZE)))
	__attribute__((__bounded__(__minbytes__, 2, CURVE25519_SIZE)));
int	kexc25519_shared_key(const u_char key[CURVE25519_SIZE],
    const u_char pub[CURVE25519_SIZE], struct sshbuf *out)
	__attribute__((__bounded__(__minbytes__, 1, CURVE25519_SIZE)))
	__attribute__((__bounded__(__minbytes__, 2, CURVE25519_SIZE)));

#if defined(DEBUG_KEX) || defined(DEBUG_KEXDH) || defined(DEBUG_KEXECDH)
void	dump_digest(char *, u_char *, int);
#endif

#endif
@


1.82
log
@remove miscellaneous SSH1 leftovers; ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: kex.h,v 1.81 2016/09/28 21:44:52 djm Exp $ */
d170 2
a171 2
int	 kex_input_kexinit(int, u_int32_t, void *);
int	 kex_input_ext_info(int, u_int32_t, void *);
@


1.81
log
@put back some pre-auth zlib bits that I shouldn't have removed -
they are still used by the client. Spotted by naddy@@
@
text
@d1 1
a1 1
/* $OpenBSD: kex.h,v 1.80 2016/09/28 20:32:42 djm Exp $ */
a212 3

int
derive_ssh1_session_id(BIGNUM *, BIGNUM *, u_int8_t[8], u_int8_t[16]);
@


1.80
log
@restore pre-auth compression support in the client -- the previous
commit was intended to remove it from the server only.

remove a few server-side pre-auth compression bits that escaped

adjust wording of Compression directive in sshd_config(5)

pointed out by naddy@@ ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: kex.h,v 1.79 2016/09/22 21:15:41 djm Exp $ */
d53 2
a54 1
#define COMP_DELAYED	1
@


1.79
log
@missing bit from previous commit
@
text
@d1 1
a1 1
/* $OpenBSD: kex.h,v 1.78 2016/05/02 10:26:04 djm Exp $ */
d53 1
a53 2
#define COMP_ZLIB	1
#define COMP_DELAYED	2
@


1.78
log
@add support for additional fixed DH groups from
draft-ietf-curdle-ssh-kex-sha2-03

diffie-hellman-group14-sha256 (2K group)
diffie-hellman-group16-sha512 (4K group)
diffie-hellman-group18-sha512 (8K group)

based on patch from Mark D. Baushke and Darren Tucker
ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: kex.h,v 1.77 2016/05/02 08:49:03 djm Exp $ */
d39 12
a50 11
#define	KEX_DH1			"diffie-hellman-group1-sha1"
#define	KEX_DH14_SHA1		"diffie-hellman-group14-sha1"
#define	KEX_DH14_SHA256		"diffie-hellman-group14-sha256"
#define	KEX_DH16_SHA512		"diffie-hellman-group16-sha512"
#define	KEX_DH18_SHA512		"diffie-hellman-group18-sha512"
#define	KEX_DHGEX_SHA1		"diffie-hellman-group-exchange-sha1"
#define	KEX_DHGEX_SHA256	"diffie-hellman-group-exchange-sha256"
#define	KEX_ECDH_SHA2_NISTP256	"ecdh-sha2-nistp256"
#define	KEX_ECDH_SHA2_NISTP384	"ecdh-sha2-nistp384"
#define	KEX_ECDH_SHA2_NISTP521	"ecdh-sha2-nistp521"
#define	KEX_CURVE25519_SHA256	"curve25519-sha256@@libssh.org"
@


1.77
log
@fix signed/unsigned errors reported by clang-3.7; add
sshbuf_dup_string() to replace a common idiom of
strdup(sshbuf_ptr()) with better safety checking;
feedback and ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: kex.h,v 1.76 2016/02/08 10:57:07 djm Exp $ */
d40 4
a43 1
#define	KEX_DH14		"diffie-hellman-group14-sha1"
d80 3
d185 1
a185 1
int	 kex_dh_hash(const char *, const char *,
@


1.76
log
@refactor activation of rekeying

This makes automatic rekeying internal to the packet code (previously
the server and client loops needed to assist). In doing to it makes
application of rekey limits more accurate by accounting for packets
about to be sent as well as packets queued during rekeying events
themselves.

Based on a patch from dtucker@@ which was in turn based on a patch
Aleksander Adamowski in bz#2521; ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: kex.h,v 1.75 2016/01/14 16:17:39 markus Exp $ */
d194 3
a196 2
int	 kex_c25519_hash(int, const char *, const char *, const char *, size_t,
    const char *, size_t, const u_char *, size_t, const u_char *, const u_char *,
@


1.75
log
@remove roaming support; ok djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: kex.h,v 1.74 2015/12/04 16:41:28 markus Exp $ */
d168 1
@


1.74
log
@implement SHA2-{256,512} for RSASSA-PKCS1-v1_5 signatures (user and host auth)
based on draft-rsa-dsa-sha2-256-03.txt and draft-ssh-ext-info-04.txt;
with & ok djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: kex.h,v 1.73 2015/07/30 00:01:34 djm Exp $ */
a42 1
#define	KEX_RESUME		"resume@@appgate.com"
a120 1
	int	roaming;
@


1.73
log
@Allow ssh_config and sshd_config kex parameters options be prefixed
by a '+' to indicate that the specified items be appended to the
default rather than replacing it.

approach suggested by dtucker@@, feedback dlg@@, ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: kex.h,v 1.72 2015/07/29 04:43:06 djm Exp $ */
d118 1
d123 2
d138 2
a139 2
	int	(*sign)(struct sshkey *, struct sshkey *,
	    u_char **, size_t *, const u_char *, size_t, u_int);
d166 1
@


1.72
log
@include the peer's offer when logging a failure to negotiate a
mutual set of algorithms (kex, pubkey, ciphers, etc.)
ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: kex.h,v 1.71 2015/02/16 22:13:32 djm Exp $ */
d149 2
@


1.71
log
@Revise hostkeys@@openssh.com hostkey learning extension.

The client will not ask the server to prove ownership of the private
halves of any hitherto-unseen hostkeys it offers to the client.

Allow UpdateHostKeys option to take an 'ask' argument to let the
user manually review keys offered.

ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: kex.h,v 1.70 2015/01/26 06:10:03 djm Exp $ */
d130 1
@


1.70
log
@correctly match ECDSA subtype (== curve) for offered/recevied
host keys. Fixes connection-killing host key mismatches when
a server offers multiple ECDSA keys with different curve type
(an extremely unlikely configuration).

ok markus, "looks mechanical" deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: kex.h,v 1.69 2015/01/19 20:16:15 markus Exp $ */
d133 1
a133 1
	int	(*host_key_index)(struct sshkey *, struct ssh *);
d135 1
a135 1
	    u_char **, size_t *, u_char *, size_t, u_int);
@


1.69
log
@adapt kex to sshbuf and struct ssh; ok djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: kex.h,v 1.68 2015/01/19 20:07:45 markus Exp $ */
d119 1
d131 2
a132 2
	struct sshkey *(*load_host_public_key)(int, struct ssh *);
	struct sshkey *(*load_host_private_key)(int, struct ssh *);
@


1.68
log
@move dispatch to struct ssh; ok djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: kex.h,v 1.67 2015/01/19 19:52:16 markus Exp $ */
d33 4
d53 2
a86 6
typedef struct kex Kex;
typedef struct sshcomp Comp;
typedef struct sshmac Mac;
typedef struct sshenc Enc;
typedef struct newkeys Newkeys;

d105 1
a105 1
	struct sshcomp	comp;
d107 3
d119 1
a119 1
	int	kex_type;
d124 1
a124 1
	int	flags;
d129 14
a142 6
	int	(*verify_host_key)(Key *);
	Key	*(*load_host_public_key)(int);
	Key	*(*load_host_private_key)(int);
	int	(*host_key_index)(Key *);
	void    (*sign)(Key *, Key *, u_char **, u_int *, u_char *, u_int);
	void	(*kex[KEX_MAX])(Kex *);
d148 8
a155 3
Kex	*kex_setup(char *[PROPOSAL_MAX]);
void	 kex_finish(Kex *);
void     kex_free_newkeys(struct newkeys *);
d157 1
a157 1
void	 kex_send_kexinit(Kex *);
d159 31
a189 2
void	 kex_derive_keys(Kex *, u_char *, u_int, const u_char *, u_int);
void	 kex_derive_keys_bn(Kex *, u_char *, u_int, const BIGNUM *);
d191 1
a191 27
void	 kexdh_client(Kex *);
void	 kexdh_server(Kex *);
void	 kexgex_client(Kex *);
void	 kexgex_server(Kex *);
void	 kexecdh_client(Kex *);
void	 kexecdh_server(Kex *);
void	 kexc25519_client(Kex *);
void	 kexc25519_server(Kex *);

void
kex_dh_hash(char *, char *, char *, int, char *, int, u_char *, int,
    BIGNUM *, BIGNUM *, BIGNUM *, u_char **, u_int *);
void
kexgex_hash(int, char *, char *, char *, int, char *,
    int, u_char *, int, int, int, int, BIGNUM *, BIGNUM *, BIGNUM *,
    BIGNUM *, BIGNUM *, u_char **, u_int *);
void
kex_ecdh_hash(int, const EC_GROUP *, char *, char *, char *, int,
    char *, int, u_char *, int, const EC_POINT *, const EC_POINT *,
    const BIGNUM *, u_char **, u_int *);
void
kex_c25519_hash(int, char *, char *, char *, int,
    char *, int, u_char *, int, const u_char *, const u_char *,
    const u_char *, u_int, u_char **, u_int *);

#define CURVE25519_SIZE 32
void	kexc25519_keygen(u_char[CURVE25519_SIZE], u_char[CURVE25519_SIZE])
d194 2
a195 2
void kexc25519_shared_key(const u_char key[CURVE25519_SIZE],
    const u_char pub[CURVE25519_SIZE], Buffer *out)
d199 1
a199 1
void
@


1.67
log
@update packet.c & isolate, introduce struct ssh
a) switch packet.c to buffer api and isolate per-connection info into struct ssh
b) (de)serialization of the state is moved from monitor to packet.c
c) the old packet.c API is implemented in opacket.[ch]
d) compress.c/h is removed and integrated into packet.c
with and ok djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: kex.h,v 1.66 2015/01/15 09:40:00 djm Exp $ */
d142 1
a142 1
void	 kex_input_kexinit(int, u_int32_t, void *);
@


1.66
log
@sync ssh-keysign, ssh-keygen and some dependencies to the new
buffer/key API; mostly mechanical, ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: kex.h,v 1.65 2015/01/13 19:31:40 markus Exp $ */
d81 2
a82 2
typedef struct Kex Kex;
typedef struct Comp Comp;
d84 2
a85 2
typedef struct Enc Enc;
typedef struct Newkeys Newkeys;
d87 1
a87 1
struct Enc {
d89 1
a89 1
	const Cipher *cipher;
d97 2
a98 2
struct Comp {
	int	type;
d102 4
a105 4
struct Newkeys {
	Enc	enc;
	Mac	mac;
	Comp	comp;
d107 1
a107 1
struct Kex {
d109 2
a110 2
	u_int	session_id_len;
	Newkeys	*newkeys[MODE_MAX];
d118 2
a119 2
	Buffer	my;
	Buffer	peer;
d139 1
a144 2

Newkeys *kex_get_newkeys(int);
@


1.65
log
@adapt mac.c to ssherr.h return codes (de-fatal) and simplify dependencies
ok djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: kex.h,v 1.64 2014/05/02 03:27:54 djm Exp $ */
d30 2
@


1.64
log
@revert __bounded change; it causes way more problems for portable than
it solves; pointed out by dtucker@@
@
text
@d1 1
a1 1
/* $OpenBSD: kex.h,v 1.62 2014/01/27 18:58:14 markus Exp $ */
d29 1
a29 3
#include <openssl/evp.h>
#include <openssl/hmac.h>
#include <openssl/ec.h>
a79 1
typedef struct Mac Mac;
d81 1
a93 11
};
struct Mac {
	char	*name;
	int	enabled;
	u_int	mac_len;
	u_char	*key;
	u_int	key_len;
	int	type;
	int	etm;		/* Encrypt-then-MAC */
	struct ssh_hmac_ctx	*hmac_ctx;
	struct umac_ctx		*umac_ctx;
@


1.63
log
@use __bounded(...) attribute recently added to sys/cdefs.h instead of
longform __attribute__(__bounded(...));

for brevity and a warning free compilation with llvm/clan
@
text
@d185 2
a186 2
	__bounded((__minbytes__, 1, CURVE25519_SIZE))
	__bounded((__minbytes__, 2, CURVE25519_SIZE));
d189 2
a190 2
	__bounded((__minbytes__, 1, CURVE25519_SIZE))
	__bounded((__minbytes__, 2, CURVE25519_SIZE));
@


1.62
log
@replace openssl HMAC with an implementation based on our ssh_digest_*
ok and feedback djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: kex.h,v 1.61 2014/01/25 10:12:50 dtucker Exp $ */
d185 2
a186 2
	__attribute__((__bounded__(__minbytes__, 1, CURVE25519_SIZE)))
	__attribute__((__bounded__(__minbytes__, 2, CURVE25519_SIZE)));
d189 2
a190 2
	__attribute__((__bounded__(__minbytes__, 1, CURVE25519_SIZE)))
	__attribute__((__bounded__(__minbytes__, 2, CURVE25519_SIZE)));
@


1.61
log
@Add a special case for the DH group size for 3des-cbc, which has an
effective strength much lower than the key size.  This causes problems
with some cryptlib implementations, which don't support group sizes larger
than 4k but also don't use the largest group size it does support as
specified in the RFC.  Based on a patch from Petr Lautrbach at Redhat,
reduced by me with input from Markus.  ok djm@@ markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: kex.h,v 1.60 2014/01/12 08:13:13 djm Exp $ */
d105 2
a106 3
	const EVP_MD	*evp_md;
	HMAC_CTX	evp_ctx;
	struct umac_ctx *umac_ctx;
@


1.60
log
@avoid use of OpenSSL BIGNUM type and functions for KEX with
Curve25519 by adding a buffer_put_bignum2_from_string() that stores
a string using the bignum encoding rules. Will make it easier to
build a reduced-feature OpenSSH without OpenSSL in the future;
ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: kex.h,v 1.59 2014/01/09 23:20:00 djm Exp $ */
d124 1
@


1.59
log
@Introduce digest API and use it to perform all hashing operations
rather than calling OpenSSL EVP_Digest* directly. Will make it easier
to build a reduced-feature OpenSSH without OpenSSL in future;
feedback, ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: kex.h,v 1.58 2013/11/07 11:58:27 dtucker Exp $ */
d153 2
a154 1
void	 kex_derive_keys(Kex *, u_char *, u_int, BIGNUM *);
d181 1
a181 1
    const BIGNUM *, u_char **, u_int *);
d187 2
a188 2
BIGNUM *kexc25519_shared_key(const u_char[CURVE25519_SIZE],
    const u_char[CURVE25519_SIZE])
@


1.58
log
@Output the effective values of Ciphers, MACs and KexAlgorithms when
the default has not been overridden.  ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: kex.h,v 1.57 2013/11/02 21:59:15 markus Exp $ */
d133 1
a133 1
	const EVP_MD *evp_md;
d170 1
a170 1
kexgex_hash(const EVP_MD *, char *, char *, char *, int, char *,
d174 1
a174 1
kex_ecdh_hash(const EVP_MD *, const EC_GROUP *, char *, char *, char *, int,
d178 1
a178 1
kex_c25519_hash(const EVP_MD *, char *, char *, char *, int,
@


1.57
log
@use curve25519 for default key exchange (curve25519-sha256@@libssh.org);
initial patch from Aris Adamantiadis; ok djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: kex.h,v 1.56 2013/07/19 07:37:48 markus Exp $ */
d146 1
a146 1
char	*kex_alg_list(void);
@


1.56
log
@add ssh-agent(1) support to sshd(8); allows encrypted hostkeys,
or hostkeys on smartcards; most of the work by Zev Weiss; bz #1974
ok djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: kex.h,v 1.55 2013/04/19 01:06:50 djm Exp $ */
d43 1
d75 1
d163 2
d177 13
@


1.55
log
@add the ability to query supported ciphers, MACs, key type and KEX
algorithms to ssh. Includes some refactoring of KEX and key type handling
to be table-driven; ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: kex.h,v 1.54 2013/01/08 18:49:04 markus Exp $ */
d139 1
@


1.54
log
@support AES-GCM as defined in RFC 5647 (but with simpler KEX handling)
ok and feedback djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: kex.h,v 1.53 2012/12/11 22:31:18 markus Exp $ */
d40 3
a42 2
/* The following represents the family of ECDH methods */
#define	KEX_ECDH_SHA2_STEM	"ecdh-sha2-"
d87 1
a87 1
	Cipher	*cipher;
d132 1
d143 1
a171 3

int	kex_ecdh_name_to_nid(const char *);
const EVP_MD *kex_ecdh_name_to_evpmd(const char *);
@


1.53
log
@add encrypt-then-mac (EtM) modes to openssh by defining new mac algorithms
that change the packet format and compute the MAC over the encrypted
message (including the packet size) instead of the plaintext data;
these EtM modes are considered more secure and used by default.
feedback and ok djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: kex.h,v 1.52 2010/09/22 05:01:29 djm Exp $ */
d89 1
@


1.52
log
@add a KexAlgorithms knob to the client and server configuration to allow
selection of which key exchange methods are used by ssh(1) and sshd(8)
and their order of preference.

ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: kex.h,v 1.51 2010/09/09 10:45:45 djm Exp $ */
d100 1
@


1.51
log
@ECDH/ECDSA compliance fix: these methods vary the hash function they use
(SHA256/384/512) depending on the length of the curve in use. The previous
code incorrectly used SHA256 in all cases.

This fix will cause authentication failure when using 384 or 521-bit curve
keys if one peer hasn't been upgraded and the other has. (256-bit curve
keys work ok). In particular you may need to specify HostkeyAlgorithms
when connecting to a server that has not been upgraded from an upgraded
client.

ok naddy@@
@
text
@d1 1
a1 1
/* $OpenBSD: kex.h,v 1.50 2010/08/31 11:54:45 djm Exp $ */
d137 2
@


1.50
log
@Implement Elliptic Curve Cryptography modes for key exchange (ECDH) and
host/user keys (ECDSA) as specified by RFC5656. ECDH and ECDSA offer
better performance than plain DH and DSA at the same equivalent symmetric
key length, as well as much shorter keys.

Only the mandatory sections of RFC5656 are implemented, specifically the
three REQUIRED curves nistp256, nistp384 and nistp521 and only ECDH and
ECDSA. Point compression (optional in RFC5656 is NOT implemented).

Certificate host and user keys using the new ECDSA key types are supported.

Note that this code has not been tested for interoperability and may be
subject to change.

feedback and ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: kex.h,v 1.49 2010/02/26 20:29:54 djm Exp $ */
d41 1
a41 1
#define	KEX_ECDH_SHA256		"ecdh-sha2-"
d167 1
@


1.49
log
@Add support for certificate key types for users and hosts.

OpenSSH certificate key types are not X.509 certificates, but a much
simpler format that encodes a public key, identity information and
some validity constraints and signs it with a CA key. CA keys are
regular SSH keys. This certificate style avoids the attack surface
of X.509 certificates and is very easy to deploy.

Certified host keys allow automatic acceptance of new host keys
when a CA certificate is marked as trusted in ~/.ssh/known_hosts.
see VERIFYING HOST KEYS in ssh(1) for details.

Certified user keys allow authentication of users when the signing
CA key is marked as trusted in authorized_keys. See "AUTHORIZED_KEYS
FILE FORMAT" in sshd(8) for details.

Certificates are minted using ssh-keygen(1), documentation is in
the "CERTIFICATES" section of that manpage.

Documentation on the format of certificates is in the file
PROTOCOL.certkeys

feedback and ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: kex.h,v 1.48 2009/10/24 11:13:54 andreas Exp $ */
d31 1
d40 2
d72 1
d151 2
d161 6
d171 1
a171 1
#if defined(DEBUG_KEX) || defined(DEBUG_KEXDH)
@


1.48
log
@Let the client detect if the server supports roaming by looking
for the resume@@appgate.com kex algorithm.
ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: kex.h,v 1.47 2009/05/27 06:34:36 andreas Exp $ */
d128 2
a129 1
	Key	*(*load_host_key)(int);
@


1.47
log
@Move the KEX_COOKIE_LEN define to kex.h
ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: kex.h,v 1.46 2007/06/07 19:37:34 pvalchev Exp $ */
d38 1
d119 1
@


1.46
log
@Add a new MAC algorithm for data integrity, UMAC-64 (not default yet, must
specify umac-64@@openssh.com). Provides about 20% end-to-end speedup
compared to hmac-md5. Represents a different approach to message
authentication to that of HMAC that may be beneficial if HMAC based on one
of its underlying hash algorithms is found to be vulnerable to a new attack.
http://www.ietf.org/rfc/rfc4418.txt

in conjunction with and OK djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: kex.h,v 1.45 2007/06/05 06:52:37 djm Exp $ */
d31 2
@


1.45
log
@Preserve MAC ctx between packets, saving 2xhash calls per-packet.
Yields around a 12-16% end-to-end speedup for arcfour256/hmac-md5

patch from markus@@ tested dtucker@@ and myself, ok markus@@ and me (I'm
committing at his request)
@
text
@d1 1
a1 1
/* $OpenBSD: kex.h,v 1.44 2006/08/03 03:34:42 deraadt Exp $ */
a88 1
	const EVP_MD	*md;
d92 4
a95 1
	HMAC_CTX	ctx;
@


1.44
log
@almost entirely get rid of the culture of ".h files that include .h files"
ok djm, sort of ok stevesk
makes the pain stop in one easy step
@
text
@d1 1
a1 1
/* $OpenBSD: kex.h,v 1.43 2006/07/23 01:11:05 stevesk Exp $ */
d30 1
d93 1
@


1.43
log
@#include <signal.h> for sig_atomic_t; need this prior to <sys/param.h>
move
@
text
@d1 1
a1 1
/* $OpenBSD: kex.h,v 1.42 2006/04/20 09:27:09 djm Exp $ */
a29 6

#include <signal.h>

#include "buffer.h"
#include "cipher.h"
#include "key.h"
@


1.42
log
@replace the last non-sig_atomic_t flag used in a signal handler with a
sig_atomic_t, unfortunately with some knock-on effects in other (non-
signal) contexts in which it is used; ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: kex.h,v 1.41 2006/03/25 22:22:43 djm Exp $ */
d30 3
@


1.41
log
@standardise spacing in $OpenBSD$ tags; requested by deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: kex.h,v 1.40 2006/03/19 18:53:12 deraadt Exp $ */
d117 1
a117 1
	int	done;
@


1.40
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.39 2006/03/07 09:07:40 djm Exp $	*/
@


1.39
log
@Implement the diffie-hellman-group-exchange-sha256 key exchange method
using the SHA256 code in libc (and wrapper to make it into an OpenSSL
EVP), interop tested against CVS PuTTY
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.38 2005/11/04 05:15:59 djm Exp $	*/
d147 1
a147 1
    int, u_char *, int, int, int, int, BIGNUM *, BIGNUM *, BIGNUM *, 
@


1.38
log
@remove hardcoded hash lengths in key exchange code, allowing
implementation of KEX methods with different hashes (e.g. SHA-256);
ok markus@@ dtucker@@ stevesk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.37 2005/07/25 11:59:39 markus Exp $	*/
d37 1
d67 1
@


1.38.2.1
log
@upgrade to OpenSSH 4.4
@
text
@d1 1
a1 1
/* $OpenBSD: kex.h,v 1.44 2006/08/03 03:34:42 deraadt Exp $ */
d30 3
a36 1
#define	KEX_DHGEX_SHA256	"diffie-hellman-group-exchange-sha256"
a65 1
	KEX_DH_GEX_SHA256,
d115 1
a115 1
	sig_atomic_t done;
d145 1
a145 1
    int, u_char *, int, int, int, int, BIGNUM *, BIGNUM *, BIGNUM *,
@


1.37
log
@add a new compression method that delays compression until the user
has been authenticated successfully and set compression to 'delayed'
for sshd.

this breaks older openssh clients (< 3.5) if they insist on
compression, so you have to re-enable compression in sshd_config.
ok djm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.36 2005/06/17 02:44:32 djm Exp $	*/
d34 3
a36 3
#define	KEX_DH1		"diffie-hellman-group1-sha1"
#define	KEX_DH14	"diffie-hellman-group14-sha1"
#define	KEX_DHGEX	"diffie-hellman-group-exchange-sha1"
d117 1
d131 1
a131 1
void	 kex_derive_keys(Kex *, u_char *, BIGNUM *);
d140 1
a140 1
u_char *
d142 5
a146 4
    BIGNUM *, BIGNUM *, BIGNUM *);
u_char *
kexgex_hash(char *, char *, char *, int, char *, int, u_char *, int,
    int, int, int, BIGNUM *, BIGNUM *, BIGNUM *, BIGNUM *, BIGNUM *);
@


1.37.2.1
log
@upgrade to OpenSSH 4.3
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.38 2005/11/04 05:15:59 djm Exp $	*/
d34 3
a36 3
#define	KEX_DH1			"diffie-hellman-group1-sha1"
#define	KEX_DH14		"diffie-hellman-group14-sha1"
#define	KEX_DHGEX_SHA1		"diffie-hellman-group-exchange-sha1"
a116 1
	const EVP_MD *evp_md;
d130 1
a130 1
void	 kex_derive_keys(Kex *, u_char *, u_int, BIGNUM *);
d139 1
a139 1
void
d141 4
a144 5
    BIGNUM *, BIGNUM *, BIGNUM *, u_char **, u_int *);
void
kexgex_hash(const EVP_MD *, char *, char *, char *, int, char *,
    int, u_char *, int, int, int, int, BIGNUM *, BIGNUM *, BIGNUM *, 
    BIGNUM *, BIGNUM *, u_char **, u_int *);
@


1.37.2.2
log
@upgrade to OpenSSH 4.4
@
text
@d1 1
a1 1
/* $OpenBSD: kex.h,v 1.44 2006/08/03 03:34:42 deraadt Exp $ */
d30 3
a36 1
#define	KEX_DHGEX_SHA256	"diffie-hellman-group-exchange-sha256"
a65 1
	KEX_DH_GEX_SHA256,
d115 1
a115 1
	sig_atomic_t done;
d145 1
a145 1
    int, u_char *, int, int, int, int, BIGNUM *, BIGNUM *, BIGNUM *,
@


1.36
log
@make this -Wsign-compare clean; ok avsm@@ markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.35 2004/06/13 12:53:24 djm Exp $	*/
d37 4
@


1.35
log
@implement diffie-hellman-group14-sha1 kex method (trivial extension to
existing diffie-hellman-group1-sha1); ok markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.34 2004/05/21 08:43:03 markus Exp $	*/
d86 1
a86 1
	int	mac_len;
d88 1
a88 1
	int	key_len;
d104 1
a104 1
	int	we_need;
@


1.35.4.1
log
@upgrade to OpenSSH 4.2
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.37 2005/07/25 11:59:39 markus Exp $	*/
a37 4
#define COMP_NONE	0
#define COMP_ZLIB	1
#define COMP_DELAYED	2

d86 1
a86 1
	u_int	mac_len;
d88 1
a88 1
	u_int	key_len;
d104 1
a104 1
	u_int	we_need;
@


1.35.4.2
log
@upgrade to OpenSSH 4.3
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.38 2005/11/04 05:15:59 djm Exp $	*/
d34 3
a36 3
#define	KEX_DH1			"diffie-hellman-group1-sha1"
#define	KEX_DH14		"diffie-hellman-group14-sha1"
#define	KEX_DHGEX_SHA1		"diffie-hellman-group-exchange-sha1"
a116 1
	const EVP_MD *evp_md;
d130 1
a130 1
void	 kex_derive_keys(Kex *, u_char *, u_int, BIGNUM *);
d139 1
a139 1
void
d141 4
a144 5
    BIGNUM *, BIGNUM *, BIGNUM *, u_char **, u_int *);
void
kexgex_hash(const EVP_MD *, char *, char *, char *, int, char *,
    int, u_char *, int, int, int, int, BIGNUM *, BIGNUM *, BIGNUM *, 
    BIGNUM *, BIGNUM *, u_char **, u_int *);
@


1.35.2.1
log
@upgrade to OpenSSH 4.2
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.37 2005/07/25 11:59:39 markus Exp $	*/
a37 4
#define COMP_NONE	0
#define COMP_ZLIB	1
#define COMP_DELAYED	2

d86 1
a86 1
	u_int	mac_len;
d88 1
a88 1
	u_int	key_len;
d104 1
a104 1
	u_int	we_need;
@


1.34
log
@add prototypes for -Wall; ok djm
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.33 2003/02/16 17:09:57 markus Exp $	*/
d35 1
d60 1
@


1.33
log
@split kex into client and server code, no need to link
server code into the client; ok provos@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.32 2002/09/09 14:54:14 markus Exp $	*/
d139 3
@


1.33.4.1
log
@upgrade to OpenSSH 3.9
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.35 2004/06/13 12:53:24 djm Exp $	*/
a34 1
#define	KEX_DH14	"diffie-hellman-group14-sha1"
a58 1
	KEX_DH_GRP14_SHA1,
a138 3

void
derive_ssh1_session_id(BIGNUM *, BIGNUM *, u_int8_t[8], u_int8_t[16]);
@


1.33.6.1
log
@upgrade to OpenSSH 3.9
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.35 2004/06/13 12:53:24 djm Exp $	*/
a34 1
#define	KEX_DH14	"diffie-hellman-group14-sha1"
a58 1
	KEX_DH_GRP14_SHA1,
a138 3

void
derive_ssh1_session_id(BIGNUM *, BIGNUM *, u_int8_t[8], u_int8_t[16]);
@


1.32
log
@signed vs unsigned from -pedantic; ok henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.31 2002/05/16 22:02:50 markus Exp $	*/
d58 3
a60 2
	DH_GRP1_SHA1,
	DH_GEX_SHA1
d116 1
d126 1
a126 2
void	 kexdh(Kex *);
void	 kexgex(Kex *);
d128 11
a138 1
Newkeys *kex_get_newkeys(int);
@


1.32.2.1
log
@Update to OpenSSH 3.6
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.33 2003/02/16 17:09:57 markus Exp $	*/
d58 2
a59 3
	KEX_DH_GRP1_SHA1,
	KEX_DH_GEX_SHA1,
	KEX_MAX
a114 1
	void	(*kex[KEX_MAX])(Kex *);
d124 3
a127 12

void	 kexdh_client(Kex *);
void	 kexdh_server(Kex *);
void	 kexgex_client(Kex *);
void	 kexgex_server(Kex *);

u_char *
kex_dh_hash(char *, char *, char *, int, char *, int, u_char *, int,
    BIGNUM *, BIGNUM *, BIGNUM *);
u_char *
kexgex_hash(char *, char *, char *, int, char *, int, u_char *, int,
    int, int, int, BIGNUM *, BIGNUM *, BIGNUM *, BIGNUM *, BIGNUM *);
@


1.32.2.2
log
@upgrade to OpenSSH 3.7
@
text
@@


1.31
log
@fix warnings (openssl 0.9.7 requires const)
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.30 2002/03/18 17:50:31 provos Exp $	*/
d99 1
a99 1
	int	session_id_len;
@


1.30
log
@integrate privilege separated openssh; its turned off by default for now.
work done by me and markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.29 2002/02/14 23:41:01 markus Exp $	*/
d82 1
a82 1
	EVP_MD	*md;
@


1.30.2.1
log
@Pull in OpenSSH-3.4
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.31 2002/05/16 22:02:50 markus Exp $	*/
d82 1
a82 1
	const EVP_MD	*md;
@


1.30.2.2
log
@Update to OpenSSH 3.5
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.32 2002/09/09 14:54:14 markus Exp $	*/
d99 1
a99 1
	u_int	session_id_len;
@


1.30.2.3
log
@Merge OpenSSH 3.6.1
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.33 2003/02/16 17:09:57 markus Exp $	*/
d58 2
a59 3
	KEX_DH_GRP1_SHA1,
	KEX_DH_GEX_SHA1,
	KEX_MAX
a114 1
	void	(*kex[KEX_MAX])(Kex *);
d124 3
a127 12

void	 kexdh_client(Kex *);
void	 kexdh_server(Kex *);
void	 kexgex_client(Kex *);
void	 kexgex_server(Kex *);

u_char *
kex_dh_hash(char *, char *, char *, int, char *, int, u_char *, int,
    BIGNUM *, BIGNUM *, BIGNUM *);
u_char *
kexgex_hash(char *, char *, char *, int, char *, int, u_char *, int,
    int, int, int, BIGNUM *, BIGNUM *, BIGNUM *, BIGNUM *, BIGNUM *);
@


1.29
log
@hide some more implementation details of cipher.[ch] and prepares for move
to EVP, ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.28 2001/12/28 15:06:00 markus Exp $	*/
d114 1
@


1.28
log
@remove plen from the dispatch fn. it's no longer used.
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.27 2001/12/20 22:50:24 djm Exp $	*/
d74 2
@


1.27
log
@Conformance fix: we should send failing packet sequence number when
responding with a SSH_MSG_UNIMPLEMENTED message. Spotted by
yakk@@yakk.dot.net; ok markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.26 2001/06/26 17:27:23 markus Exp $	*/
d118 1
a118 1
void	 kex_input_kexinit(int, int, u_int32_t, void *);
@


1.26
log
@remove comments from .h, since they are cut&paste from the .c files
and out of sync
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.25 2001/06/26 06:32:53 itojun Exp $	*/
d118 1
a118 1
void	 kex_input_kexinit(int, int, void *);
@


1.26.2.1
log
@Update to OpenSSH-3.1 on 3.0-stable branch
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.29 2002/02/14 23:41:01 markus Exp $	*/
a73 2
	u_int	key_len;
	u_int	block_size;
d118 1
a118 1
void	 kex_input_kexinit(int, u_int32_t, void *);
@


1.26.2.2
log
@Update OpenSSH to version 3.2.2.
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.30 2002/03/18 17:50:31 provos Exp $	*/
a113 1
	int	(*host_key_index)(Key *);
@


1.26.2.3
log
@Update OpenSSH to version 3.3 (with local changes, configuration files still
living in /etc and privsep user being nobody).
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.26.2.2 2002/05/17 00:03:23 miod Exp $	*/
d82 1
a82 1
	const EVP_MD	*md;
@


1.26.2.4
log
@Update to OpenSSH 3.5
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.32 2002/09/09 14:54:14 markus Exp $	*/
d99 1
a99 1
	u_int	session_id_len;
@


1.25
log
@prototype pedant.  not very creative...
- () -> (void)
- no variable names
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.24 2001/06/25 08:25:37 markus Exp $	*/
d115 1
a115 1
void	kex_finish(Kex *);
d117 3
a119 3
void	kex_send_kexinit(Kex *);
void	kex_input_kexinit(int, int, void *);
void	kex_derive_keys(Kex *, u_char *, BIGNUM *);
d121 2
a122 2
void	kexdh(Kex *);
void	kexgex(Kex *);
@


1.24
log
@update copyright for 2001
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.23 2001/06/23 02:34:28 markus Exp $	*/
d110 2
a111 2
	int	(*verify_host_key)(Key *hostkey);
	Key	*(*load_host_key)(int type);
d114 2
a115 2
Kex	*kex_setup(char *proposal[PROPOSAL_MAX]);
void	kex_finish(Kex *kex);
d117 3
a119 3
void	kex_send_kexinit(Kex *kex);
void	kex_input_kexinit(int type, int plen, void *ctxt);
void	kex_derive_keys(Kex *k, u_char *hash, BIGNUM *shared_secret);
d124 1
a124 1
Newkeys *kex_get_newkeys(int mode);
d127 1
a127 1
void	dump_digest(char *msg, u_char *digest, int len);
@


1.23
log
@get rid of known_hosts2, use it for hostkey lookup, but do not modify.
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.22 2001/04/04 20:25:37 markus Exp $	*/
d4 1
a4 1
 * Copyright (c) 2000 Markus Friedl.  All rights reserved.
@


1.22
log
@more robust rekeying
don't send channel data after rekeying is started.
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.21 2001/04/04 14:34:58 markus Exp $	*/
d110 1
a110 1
	int	(*check_host_key)(Key *hostkey);
@


1.22.2.1
log
@Pull in OpenSSH-2.9.9
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.26 2001/06/26 17:27:23 markus Exp $	*/
d4 1
a4 1
 * Copyright (c) 2000, 2001 Markus Friedl.  All rights reserved.
d110 2
a111 2
	int	(*verify_host_key)(Key *);
	Key	*(*load_host_key)(int);
d114 2
a115 2
Kex	*kex_setup(char *[PROPOSAL_MAX]);
void	 kex_finish(Kex *);
d117 3
a119 3
void	 kex_send_kexinit(Kex *);
void	 kex_input_kexinit(int, int, void *);
void	 kex_derive_keys(Kex *, u_char *, BIGNUM *);
d121 2
a122 2
void	 kexdh(Kex *);
void	 kexgex(Kex *);
d124 1
a124 1
Newkeys *kex_get_newkeys(int);
d127 1
a127 1
void	dump_digest(char *, u_char *, int);
@


1.22.2.2
log
@Merge OpenSSH 3.1, keeping /etc as configuration files directory.
(i.e. OpenSSH 3.1 + openbsd29_3.1.patch)
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.29 2002/02/14 23:41:01 markus Exp $	*/
a73 2
	u_int	key_len;
	u_int	block_size;
d118 1
a118 1
void	 kex_input_kexinit(int, u_int32_t, void *);
@


1.22.2.3
log
@Upgrade to OpenSSH 3.2.3.

Except for improbable compilation error fixes, this should be the last
commit made to the 2.9-STABLE branche. Have fun upgrading.
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.30 2002/03/18 17:50:31 provos Exp $	*/
a113 1
	int	(*host_key_index)(Key *);
@


1.21
log
@enable server side rekeying + some rekey related clientup.
todo: we should not send any non-KEX messages after we send KEXINIT
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.20 2001/04/04 09:48:34 markus Exp $	*/
d98 1
a98 1
	Newkeys	*keys[MODE_MAX];
d106 1
a106 1
	int	newkeys;
@


1.20
log
@don't sent multiple kexinit-requests.
send newkeys, block while waiting for newkeys.
fix comments.
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.19 2001/04/03 23:32:12 markus Exp $	*/
d118 1
a118 1
void	kex_protocol_error(int type, int plen, void *ctxt);
@


1.19
log
@undo parts of recent my changes: main part of keyexchange does not
need dispatch-callbacks, since application data is delayed until
the keyexchange completes (if i understand the drafts correctly).

add some infrastructure for re-keying.
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.18 2001/04/03 19:53:29 markus Exp $	*/
d114 3
a116 2
Kex	*kex_start(char *proposal[PROPOSAL_MAX]);
void	kex_send_newkeys(void);
@


1.18
log
@move kex to kex*.c, used dispatch_set() callbacks for kex. should
make rekeying easier.
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.17 2001/03/29 21:17:40 markus Exp $	*/
d62 2
d68 1
d71 3
a73 3
	char		*name;
	Cipher		*cipher;
	int		enabled;
d78 4
a81 4
	char		*name;
	int		enabled;
	EVP_MD		*md;
	int		mac_len;
d83 1
a83 1
	int		key_len;
d86 8
a93 3
	int		type;
	int		enabled;
	char		*name;
a94 1
#define KEX_INIT_SENT	0x0001
d96 16
a111 20
	Enc		enc [MODE_MAX];
	Mac		mac [MODE_MAX];
	Comp		comp[MODE_MAX];
	int		we_need;
	int		server;
	char		*name;
	int		hostkey_type;
	int		kex_type;

	/* used during kex */
	Buffer		my;
	Buffer		peer;
	int		newkeys;
	int		flags;
	void		*state;
	char		*client_version_string;
	char		*server_version_string;

	int		(*check_host_key)(Key *hostkey);
	Key		*(*load_host_key)(int type);
a113 2
void	kex_derive_keys(Kex *k, u_char *hash, BIGNUM *shared_secret);
void	packet_set_kex(Kex *k);
d116 1
d118 1
d122 2
@


1.17
log
@prepare for rekeying: move DH code to dh.c
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.16 2001/03/28 21:59:40 provos Exp $	*/
d31 2
d87 1
d97 12
d111 1
a111 9
Buffer	*kex_init(char *myproposal[PROPOSAL_MAX]);
void
kex_exchange_kexinit(
    Buffer *my_kexinit, Buffer *peer_kexint,
    char *peer_proposal[PROPOSAL_MAX]);
Kex *
kex_choose_conf(char *cprop[PROPOSAL_MAX],
    char *sprop[PROPOSAL_MAX], int server);
int	kex_derive_keys(Kex *k, u_char *hash, BIGNUM *shared_secret);
d113 10
a123 23
u_char *
kex_hash(
    char *client_version_string,
    char *server_version_string,
    char *ckexinit, int ckexinitlen,
    char *skexinit, int skexinitlen,
    char *serverhostkeyblob, int sbloblen,
    BIGNUM *client_dh_pub,
    BIGNUM *server_dh_pub,
    BIGNUM *shared_secret);

u_char *
kex_hash_gex(
    char *client_version_string,
    char *server_version_string,
    char *ckexinit, int ckexinitlen,
    char *skexinit, int skexinitlen,
    char *serverhostkeyblob, int sbloblen,
    int min, int wantbits, int max,
    BIGNUM *prime, BIGNUM *gen,
    BIGNUM *client_dh_pub,
    BIGNUM *server_dh_pub,
    BIGNUM *shared_secret);
@


1.16
log
@forgot to include min and max params in hash, okay markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.15 2001/03/05 17:17:20 markus Exp $	*/
a105 5
int	dh_pub_is_valid(DH *dh, BIGNUM *dh_pub);
DH	*dh_new_group_asc(const char *, const char *);
DH	*dh_new_group(BIGNUM *, BIGNUM *);
void	dh_gen_key(DH *, int);
DH	*dh_new_group1(void);
@


1.15
log
@generate a 2*need size (~300 instead of 1024/2048) random private
exponent during the DH key agreement. according to Niels (the great
german advisor) this is safe since /etc/primes contains strong
primes only.

References:
        P. C. van Oorschot and M. J. Wiener, On Diffie-Hellman key
        agreement with short exponents, In Advances in Cryptology
        - EUROCRYPT'96, LNCS 1070, Springer-Verlag, 1996, pp.332-343.
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.14 2001/02/11 12:59:24 markus Exp $	*/
d130 2
a131 1
    int minbits, BIGNUM *prime, BIGNUM *gen,
@


1.14
log
@1) clean up the MAC support for SSH-2
2) allow you to specify the MAC with 'ssh -m'
3) or the 'MACs' keyword in ssh(d)_config
4) add hmac-{md5,sha1}-96
	ok stevesk@@, provos@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.13 2001/02/04 15:32:24 stevesk Exp $	*/
d109 1
a109 1
void	dh_gen_key(DH *);
@


1.13
log
@unexpand and remove end-of-line whitespace; ok markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.12 2001/01/29 01:58:16 niklas Exp $	*/
d29 3
a33 1
#define	KEX_DSS		"ssh-dss"
@


1.12
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d57 1
a57 1
		
@


1.11
log
@fix prototypes; from  stevesk@@pobox.com
@
text
@d1 2
@


1.10
log
@replace 'unsigned bla' with 'u_bla' everywhere. also, replace 'char unsigned'
with u_char.
@
text
@d105 2
a106 2
void	dh_gen_key();
DH	*dh_new_group1();
@


1.9
log
@compute diffie-hellman in parallel between server and client. okay markus@@
@
text
@d65 2
a66 2
	unsigned char	*key;
	unsigned char	*iv;
d73 1
a73 1
	unsigned char	*key;
d100 1
a100 1
int	kex_derive_keys(Kex *k, unsigned char *hash, BIGNUM *shared_secret);
d108 1
a108 1
unsigned char *
d119 1
a119 1
unsigned char *
@


1.8
log
@add support for RSA to SSH2.  please test.

there are now 3 types of keys: RSA1 is used by ssh-1 only,
RSA and DSA are used by SSH2.

you can use 'ssh-keygen -t rsa -f ssh2_rsa_file' to generate RSA
keys for SSH2 and use the RSA keys for hostkeys or for user keys.

SSH2 RSA or DSA keys are added to .ssh/authorised_keys2 as before.

IdentityFile2, HostDsaKey and DSAAuthentication are obsolete.
you can use multiple IdentityFile and HostKey for all types of keys.

the option DSAAuthentication is replaced by PubkeyAuthetication.
@
text
@d105 1
@


1.7
log
@remove unused
@
text
@d88 1
a88 1
	char		*hostkeyalg;
@


1.7.2.1
log
@Pull in OpenSSH 2.5.0
@
text
@a0 2
/*	$OpenBSD: kex.h,v 1.14 2001/02/11 12:59:24 markus Exp $	*/

a26 3
#include <openssl/evp.h>
#include "buffer.h"

d29 1
d55 1
a55 1

d65 2
a66 2
	u_char	*key;
	u_char	*iv;
d73 1
a73 1
	u_char	*key;
d88 1
a88 1
	int		hostkey_type;
d100 1
a100 1
int	kex_derive_keys(Kex *k, u_char *hash, BIGNUM *shared_secret);
d105 1
a105 2
void	dh_gen_key(DH *);
DH	*dh_new_group1(void);
d107 1
a107 1
u_char *
d118 1
a118 1
u_char *
@


1.7.2.2
log
@Pull in OpenSSH-2.5.1
@
text
@@


1.7.2.3
log
@Pull in OpenSSH-2.5.2 for 2.8 branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.15 2001/03/05 17:17:20 markus Exp $	*/
d109 1
a109 1
void	dh_gen_key(DH *, int);
@


1.7.2.4
log
@Pull in OpenSSH-2.9 to 2.8 branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.22 2001/04/04 20:25:37 markus Exp $	*/
a30 2
#include "cipher.h"
#include "key.h"
a59 2
#define KEX_INIT_SENT	0x0001

a63 1
typedef struct Newkeys Newkeys;
d66 3
a68 3
	char	*name;
	Cipher	*cipher;
	int	enabled;
d73 4
a76 4
	char	*name;
	int	enabled;
	EVP_MD	*md;
	int	mac_len;
d78 1
a78 1
	int	key_len;
d81 3
a83 8
	int	type;
	int	enabled;
	char	*name;
};
struct Newkeys {
	Enc	enc;
	Mac	mac;
	Comp	comp;
d86 48
a133 34
	u_char	*session_id;
	int	session_id_len;
	Newkeys	*newkeys[MODE_MAX];
	int	we_need;
	int	server;
	char	*name;
	int	hostkey_type;
	int	kex_type;
	Buffer	my;
	Buffer	peer;
	int	done;
	int	flags;
	char	*client_version_string;
	char	*server_version_string;
	int	(*check_host_key)(Key *hostkey);
	Key	*(*load_host_key)(int type);
};

Kex	*kex_setup(char *proposal[PROPOSAL_MAX]);
void	kex_finish(Kex *kex);

void	kex_send_kexinit(Kex *kex);
void	kex_input_kexinit(int type, int plen, void *ctxt);
void	kex_derive_keys(Kex *k, u_char *hash, BIGNUM *shared_secret);

void	kexdh(Kex *);
void	kexgex(Kex *);

Newkeys *kex_get_newkeys(int mode);

#if defined(DEBUG_KEX) || defined(DEBUG_KEXDH)
void	dump_digest(char *msg, u_char *digest, int len);
#endif

@


1.7.2.5
log
@Pull in OpenSSH 2.9.9 to the 2.8 branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.26 2001/06/26 17:27:23 markus Exp $	*/
d4 1
a4 1
 * Copyright (c) 2000, 2001 Markus Friedl.  All rights reserved.
d110 2
a111 2
	int	(*verify_host_key)(Key *);
	Key	*(*load_host_key)(int);
d114 2
a115 2
Kex	*kex_setup(char *[PROPOSAL_MAX]);
void	 kex_finish(Kex *);
d117 3
a119 3
void	 kex_send_kexinit(Kex *);
void	 kex_input_kexinit(int, int, void *);
void	 kex_derive_keys(Kex *, u_char *, BIGNUM *);
d121 2
a122 2
void	 kexdh(Kex *);
void	 kexgex(Kex *);
d124 1
a124 1
Newkeys *kex_get_newkeys(int);
d127 1
a127 1
void	dump_digest(char *, u_char *, int);
@


1.7.2.6
log
@Merge OpenSSH 3.1.
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.29 2002/02/14 23:41:01 markus Exp $	*/
a73 2
	u_int	key_len;
	u_int	block_size;
d118 1
a118 1
void	 kex_input_kexinit(int, u_int32_t, void *);
@


1.6
log
@new cipher framework
@
text
@a62 1
	int		type;
@


1.5
log
@First rough implementation of the diffie-hellman group exchange.  The
client can ask the server for bigger groups to perform the diffie-hellman
in, thus increasing the attack complexity when using ciphers with longer
keys.  University of Windsor provided network, T the company.
@
text
@d62 1
d64 1
a65 1
	int		block_size;
a67 3
	int		key_len;
	int		iv_len;
	char		*name;
d70 2
a72 1
	int		enabled;
a75 1
	char		*name;
@


1.4
log
@cleanup copyright notices on all files.  I have attempted to be accurate with
the details.  everything is now under Tatu's licence (which I copied from his
readme), and/or the core-sdi bsd-ish thing for deattack, or various openbsd
developers under a 2-term bsd licence.  We're not changing any rules, just
being accurate.
@
text
@d27 3
a29 2
#define	KEX_DH1	"diffie-hellman-group1-sha1"
#define KEX_DSS	"ssh-dss"
d51 5
d92 1
d106 2
d121 11
@


1.3
log
@split kexinit/kexdh, factor out common code
@
text
@a11 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Markus Friedl.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.2
log
@check for reasonable public DH values
@
text
@d94 9
a104 4
Kex 	*kex_choose_conf(char *cprop[PROPOSAL_MAX], char *sprop[PROPOSAL_MAX], int server);
int	kex_derive_keys(Kex *k, unsigned char *hash, BIGNUM *shared_secret);
void	bignum_print(BIGNUM *b);
void	packet_set_kex(Kex *k);
@


1.2.2.1
log
@lovin' CVS... update patch branch to OpenSSH-2.1.1
@
text
@d94 3
a96 7
void
kex_exchange_kexinit(
    Buffer *my_kexinit, Buffer *peer_kexint,
    char *peer_proposal[PROPOSAL_MAX]);
Kex *
kex_choose_conf(char *cprop[PROPOSAL_MAX],
    char *sprop[PROPOSAL_MAX], int server);
d98 1
a99 2
int	dh_pub_is_valid(DH *dh, BIGNUM *dh_pub);
DH	*dh_new_group1();
@


1.2.2.2
log
@openssh-2.3.0 (again) for 2.7 branch
@
text
@d12 5
d32 2
a33 3
#define	KEX_DH1		"diffie-hellman-group1-sha1"
#define	KEX_DHGEX	"diffie-hellman-group-exchange-sha1"
#define	KEX_DSS		"ssh-dss"
a54 5
enum kex_exchange {
	DH_GRP1_SHA1,
	DH_GEX_SHA1
};
		
d61 1
a61 2
	char		*name;
	Cipher		*cipher;
d63 1
d66 3
d71 1
a71 1
	char		*name;
a72 1
	EVP_MD		*md;
d76 1
a90 1
	int		kex_type;
a103 2
DH	*dh_new_group_asc(const char *, const char *);
DH	*dh_new_group(BIGNUM *, BIGNUM *);
a116 11
unsigned char *
kex_hash_gex(
    char *client_version_string,
    char *server_version_string,
    char *ckexinit, int ckexinitlen,
    char *skexinit, int skexinitlen,
    char *serverhostkeyblob, int sbloblen,
    int minbits, BIGNUM *prime, BIGNUM *gen,
    BIGNUM *client_dh_pub,
    BIGNUM *server_dh_pub,
    BIGNUM *shared_secret);
@


1.2.2.3
log
@OpenSSH-2.5.1 for 2.7 patch branch
@
text
@a0 2
/*	$OpenBSD: kex.h,v 1.14 2001/02/11 12:59:24 markus Exp $	*/

a26 3
#include <openssl/evp.h>
#include "buffer.h"

d29 1
d55 1
a55 1

d65 2
a66 2
	u_char	*key;
	u_char	*iv;
d73 1
a73 1
	u_char	*key;
d88 1
a88 1
	int		hostkey_type;
d100 1
a100 1
int	kex_derive_keys(Kex *k, u_char *hash, BIGNUM *shared_secret);
d105 1
a105 2
void	dh_gen_key(DH *);
DH	*dh_new_group1(void);
d107 1
a107 1
u_char *
d118 1
a118 1
u_char *
@


1.2.2.4
log
@Pull in OpenSSH-2.5.2 for 2.7 branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: kex.h,v 1.15 2001/03/05 17:17:20 markus Exp $	*/
d109 1
a109 1
void	dh_gen_key(DH *, int);
@


1.1
log
@DSA, keyexchange, algorithm agreement for ssh2
@
text
@d94 2
a95 1
DH	*new_dh_group1();
@

