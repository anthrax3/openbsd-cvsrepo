head	1.32;
access;
symbols
	OPENBSD_6_0:1.32.0.12
	OPENBSD_6_0_BASE:1.32
	OPENBSD_5_9:1.32.0.8
	OPENBSD_5_9_BASE:1.32
	OPENBSD_5_8:1.32.0.6
	OPENBSD_5_8_BASE:1.32
	OPENBSD_5_7:1.32.0.2
	OPENBSD_5_7_BASE:1.32
	OPENBSD_5_6:1.32.0.4
	OPENBSD_5_6_BASE:1.32
	OPENBSD_5_5:1.31.0.4
	OPENBSD_5_5_BASE:1.31
	OPENBSD_5_4:1.30.0.2
	OPENBSD_5_4_BASE:1.30
	OPENBSD_5_3:1.29.0.26
	OPENBSD_5_3_BASE:1.29
	OPENBSD_5_2:1.29.0.24
	OPENBSD_5_2_BASE:1.29
	OPENBSD_5_1_BASE:1.29
	OPENBSD_5_1:1.29.0.22
	OPENBSD_5_0:1.29.0.20
	OPENBSD_5_0_BASE:1.29
	OPENBSD_4_9:1.29.0.18
	OPENBSD_4_9_BASE:1.29
	OPENBSD_4_8:1.29.0.16
	OPENBSD_4_8_BASE:1.29
	OPENBSD_4_7:1.29.0.12
	OPENBSD_4_7_BASE:1.29
	OPENBSD_4_6:1.29.0.14
	OPENBSD_4_6_BASE:1.29
	OPENBSD_4_5:1.29.0.10
	OPENBSD_4_5_BASE:1.29
	OPENBSD_4_4:1.29.0.8
	OPENBSD_4_4_BASE:1.29
	OPENBSD_4_3:1.29.0.6
	OPENBSD_4_3_BASE:1.29
	OPENBSD_4_2:1.29.0.4
	OPENBSD_4_2_BASE:1.29
	OPENBSD_4_1:1.29.0.2
	OPENBSD_4_1_BASE:1.29
	OPENBSD_4_0:1.28.0.4
	OPENBSD_4_0_BASE:1.28
	OPENBSD_3_9:1.24.0.18
	OPENBSD_3_9_BASE:1.24
	OPENBSD_3_8:1.24.0.16
	OPENBSD_3_8_BASE:1.24
	OPENBSD_3_7:1.24.0.14
	OPENBSD_3_7_BASE:1.24
	OPENBSD_3_6:1.24.0.12
	OPENBSD_3_6_BASE:1.24
	OPENBSD_3_5:1.24.0.10
	OPENBSD_3_5_BASE:1.24
	OPENBSD_3_4:1.24.0.8
	OPENBSD_3_4_BASE:1.24
	OPENBSD_3_3:1.24.0.6
	OPENBSD_3_3_BASE:1.24
	OPENBSD_3_2:1.24.0.4
	OPENBSD_3_2_BASE:1.24
	OPENBSD_3_1:1.24.0.2
	OPENBSD_3_1_BASE:1.24
	OPENBSD_3_0:1.23.0.2
	OPENBSD_3_0_BASE:1.23
	OPENBSD_2_9_BASE:1.22
	OPENBSD_2_9:1.22.0.2
	OPENBSD_2_8:1.16.0.2
	OPENBSD_2_8_BASE:1.16
	OPENBSD_2_7:1.14.0.2
	OPENBSD_2_7_BASE:1.14
	OPENBSD_2_6:1.5.0.2
	OPENBSD_2_6_BASE:1.5;
locks; strict;
comment	@ * @;


1.32
date	2014.06.24.01.13.21;	author djm;	state Exp;
branches;
next	1.31;
commitid	1h9UxAQmwdaqUzyX;

1.31
date	2014.02.02.03.44.31;	author djm;	state Exp;
branches;
next	1.30;

1.30
date	2013.05.17.00.13.14;	author djm;	state Exp;
branches;
next	1.29;

1.29
date	2006.11.06.21.25.28;	author markus;	state Exp;
branches;
next	1.28;

1.28
date	2006.08.03.03.34.42;	author deraadt;	state Exp;
branches
	1.28.4.1;
next	1.27;

1.27
date	2006.07.22.20.48.23;	author stevesk;	state Exp;
branches;
next	1.26;

1.26
date	2006.03.25.13.17.02;	author djm;	state Exp;
branches;
next	1.25;

1.25
date	2006.03.19.18.51.18;	author deraadt;	state Exp;
branches;
next	1.24;

1.24
date	2001.12.27.18.22.16;	author markus;	state Exp;
branches
	1.24.16.1
	1.24.18.1;
next	1.23;

1.23
date	2001.06.27.05.42.24;	author markus;	state Exp;
branches
	1.23.2.1;
next	1.22;

1.22
date	2001.03.26.23.23.23;	author markus;	state Exp;
branches
	1.22.2.1;
next	1.21;

1.21
date	2001.02.04.15.32.24;	author stevesk;	state Exp;
branches;
next	1.20;

1.20
date	2001.01.29.19.47.30;	author markus;	state Exp;
branches;
next	1.19;

1.19
date	2001.01.21.19.05.54;	author markus;	state Exp;
branches;
next	1.18;

1.18
date	2000.12.19.23.17.57;	author markus;	state Exp;
branches;
next	1.17;

1.17
date	2000.11.12.19.50.37;	author markus;	state Exp;
branches;
next	1.16;

1.16
date	2000.09.07.20.27.53;	author deraadt;	state Exp;
branches
	1.16.2.1;
next	1.15;

1.15
date	2000.06.20.01.39.44;	author markus;	state Exp;
branches;
next	1.14;

1.14
date	2000.04.14.10.30.32;	author markus;	state Exp;
branches
	1.14.2.1;
next	1.13;

1.13
date	2000.03.16.20.56.14;	author markus;	state Exp;
branches;
next	1.12;

1.12
date	2000.02.21.21.47.31;	author markus;	state Exp;
branches;
next	1.11;

1.11
date	99.11.24.19.53.50;	author markus;	state Exp;
branches;
next	1.10;

1.10
date	99.11.24.00.26.03;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	99.11.23.22.25.54;	author markus;	state Exp;
branches;
next	1.8;

1.8
date	99.11.08.20.13.42;	author markus;	state Exp;
branches;
next	1.7;

1.7
date	99.11.05.07.09.07;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	99.11.02.19.42.36;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	99.10.16.23.54.12;	author provos;	state Exp;
branches;
next	1.4;

1.4
date	99.10.16.23.20.25;	author provos;	state Exp;
branches;
next	1.3;

1.3
date	99.09.29.18.16.20;	author dugsong;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.06.15.00;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	99.09.28.04.45.37;	author provos;	state Exp;
branches;
next	;

1.14.2.1
date	2000.09.01.18.23.22;	author jason;	state Exp;
branches;
next	1.14.2.2;

1.14.2.2
date	2000.11.08.21.31.10;	author jason;	state Exp;
branches;
next	1.14.2.3;

1.14.2.3
date	2001.03.12.15.44.13;	author jason;	state Exp;
branches;
next	1.14.2.4;

1.14.2.4
date	2001.03.21.18.52.59;	author jason;	state Exp;
branches;
next	;

1.16.2.1
date	2001.02.16.20.13.11;	author jason;	state Exp;
branches;
next	1.16.2.2;

1.16.2.2
date	2001.02.19.17.19.15;	author jason;	state Exp;
branches;
next	1.16.2.3;

1.16.2.3
date	2001.03.21.19.46.27;	author jason;	state Exp;
branches;
next	1.16.2.4;

1.16.2.4
date	2001.05.07.21.09.32;	author jason;	state Exp;
branches;
next	1.16.2.5;

1.16.2.5
date	2001.09.27.00.15.42;	author miod;	state Exp;
branches;
next	1.16.2.6;

1.16.2.6
date	2002.03.08.17.04.42;	author brad;	state Exp;
branches;
next	;

1.22.2.1
date	2001.09.27.19.03.55;	author jason;	state Exp;
branches;
next	1.22.2.2;

1.22.2.2
date	2002.03.09.00.20.44;	author miod;	state Exp;
branches;
next	;

1.23.2.1
date	2002.03.07.17.37.47;	author jason;	state Exp;
branches;
next	;

1.24.16.1
date	2006.10.06.03.19.33;	author brad;	state Exp;
branches;
next	1.24.16.2;

1.24.16.2
date	2006.11.08.00.44.05;	author brad;	state Exp;
branches;
next	;

1.24.18.1
date	2006.09.30.04.06.51;	author brad;	state Exp;
branches;
next	1.24.18.2;

1.24.18.2
date	2006.11.08.00.17.14;	author brad;	state Exp;
branches;
next	;

1.28.4.1
date	2006.11.08.00.42.10;	author brad;	state Exp;
branches;
next	;


desc
@@


1.32
log
@New key API: refactor key-related functions to be more library-like,
existing API is offered as a set of wrappers.

with and ok markus@@

Thanks also to Ben Hawkes, David Tomaschik, Ivan Fratric, Matthew
Dempsky and Ron Bowes for a detailed review a few months ago.
@
text
@/* $OpenBSD: rsa.c,v 1.31 2014/02/02 03:44:31 djm Exp $ */
/*
 * Author: Tatu Ylonen <ylo@@cs.hut.fi>
 * Copyright (c) 1995 Tatu Ylonen <ylo@@cs.hut.fi>, Espoo, Finland
 *                    All rights reserved
 *
 * As far as I am concerned, the code I have written for this software
 * can be used freely for any purpose.  Any derived versions of this
 * software must be clearly marked as such, and if the derived work is
 * incompatible with the protocol description in the RFC file, it must be
 * called by a name other than "ssh" or "Secure Shell".
 *
 *
 * Copyright (c) 1999 Niels Provos.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *
 * Description of the RSA algorithm can be found e.g. from the following
 * sources:
 *
 *   Bruce Schneier: Applied Cryptography.  John Wiley & Sons, 1994.
 *
 *   Jennifer Seberry and Josed Pieprzyk: Cryptography: An Introduction to
 *   Computer Security.  Prentice-Hall, 1989.
 *
 *   Man Young Rhee: Cryptography and Secure Data Communications.  McGraw-Hill,
 *   1994.
 *
 *   R. Rivest, A. Shamir, and L. M. Adleman: Cryptographic Communications
 *   System and Method.  US Patent 4,405,829, 1983.
 *
 *   Hans Riesel: Prime Numbers and Computer Methods for Factorization.
 *   Birkhauser, 1994.
 *
 *   The RSA Frequently Asked Questions document by RSA Data Security,
 *   Inc., 1995.
 *
 *   RSA in 3 lines of perl by Adam Back <aba@@atlax.ex.ac.uk>, 1995, as
 * included below:
 *
 *     [gone - had to be deleted - what a pity]
 */

#include <sys/types.h>

#include <string.h>

#include "rsa.h"
#include "log.h"
#include "ssherr.h"

int
rsa_public_encrypt(BIGNUM *out, BIGNUM *in, RSA *key)
{
	u_char *inbuf = NULL, *outbuf = NULL;
	int len, ilen, olen, r = SSH_ERR_INTERNAL_ERROR;

	if (BN_num_bits(key->e) < 2 || !BN_is_odd(key->e))
		return SSH_ERR_INVALID_ARGUMENT;

	olen = BN_num_bytes(key->n);
	if ((outbuf = malloc(olen)) == NULL) {
		r = SSH_ERR_ALLOC_FAIL;
		goto out;
	}

	ilen = BN_num_bytes(in);
	if ((inbuf = malloc(ilen)) == NULL) {
		r = SSH_ERR_ALLOC_FAIL;
		goto out;
	}
	BN_bn2bin(in, inbuf);

	if ((len = RSA_public_encrypt(ilen, inbuf, outbuf, key,
	    RSA_PKCS1_PADDING)) <= 0) {
		r = SSH_ERR_LIBCRYPTO_ERROR;
		goto out;
	}

	if (BN_bin2bn(outbuf, len, out) == NULL) {
		r = SSH_ERR_LIBCRYPTO_ERROR;
		goto out;
	}
	r = 0;

 out:
	if (outbuf != NULL) {
		explicit_bzero(outbuf, olen);
		free(outbuf);
	}
	if (inbuf != NULL) {
		explicit_bzero(inbuf, ilen);
		free(inbuf);
	}
	return r;
}

int
rsa_private_decrypt(BIGNUM *out, BIGNUM *in, RSA *key)
{
	u_char *inbuf = NULL, *outbuf = NULL;
	int len, ilen, olen, r = SSH_ERR_INTERNAL_ERROR;

	olen = BN_num_bytes(key->n);
	if ((outbuf = malloc(olen)) == NULL) {
		r = SSH_ERR_ALLOC_FAIL;
		goto out;
	}

	ilen = BN_num_bytes(in);
	if ((inbuf = malloc(ilen)) == NULL) {
		r = SSH_ERR_ALLOC_FAIL;
		goto out;
	}
	BN_bn2bin(in, inbuf);

	if ((len = RSA_private_decrypt(ilen, inbuf, outbuf, key,
	    RSA_PKCS1_PADDING)) <= 0) {
		r = SSH_ERR_LIBCRYPTO_ERROR;
		goto out;
	} else if (BN_bin2bn(outbuf, len, out) == NULL) {
		r = SSH_ERR_LIBCRYPTO_ERROR;
		goto out;
	}
	r = 0;
 out:
	if (outbuf != NULL) {
		explicit_bzero(outbuf, olen);
		free(outbuf);
	}
	if (inbuf != NULL) {
		explicit_bzero(inbuf, ilen);
		free(inbuf);
	}
	return r;
}

/* calculate p-1 and q-1 */
int
rsa_generate_additional_parameters(RSA *rsa)
{
	BIGNUM *aux = NULL;
	BN_CTX *ctx = NULL;
	int r;

	if ((ctx = BN_CTX_new()) == NULL)
		return SSH_ERR_ALLOC_FAIL;
	if ((aux = BN_new()) == NULL) {
		r = SSH_ERR_ALLOC_FAIL;
		goto out;
	}

	if ((BN_sub(aux, rsa->q, BN_value_one()) == 0) ||
	    (BN_mod(rsa->dmq1, rsa->d, aux, ctx) == 0) ||
	    (BN_sub(aux, rsa->p, BN_value_one()) == 0) ||
	    (BN_mod(rsa->dmp1, rsa->d, aux, ctx) == 0)) {
		r = SSH_ERR_LIBCRYPTO_ERROR;
		goto out;
	}
	r = 0;
 out:
	BN_clear_free(aux);
	BN_CTX_free(ctx);
	return r;
}

@


1.31
log
@convert memset of potentially-private data to explicit_bzero()
@
text
@d1 1
a1 1
/* $OpenBSD: rsa.c,v 1.30 2013/05/17 00:13:14 djm Exp $ */
a66 1
#include "xmalloc.h"
d69 1
d71 1
a71 1
void
d74 2
a75 2
	u_char *inbuf, *outbuf;
	int len, ilen, olen;
d78 1
a78 1
		fatal("rsa_public_encrypt() exponent too small or not odd");
d81 4
a84 1
	outbuf = xmalloc(olen);
d87 4
a90 1
	inbuf = xmalloc(ilen);
d94 4
a97 2
	    RSA_PKCS1_PADDING)) <= 0)
		fatal("rsa_public_encrypt() failed");
d99 5
a103 2
	if (BN_bin2bn(outbuf, len, out) == NULL)
		fatal("rsa_public_encrypt: BN_bin2bn failed");
d105 10
a114 4
	explicit_bzero(outbuf, olen);
	explicit_bzero(inbuf, ilen);
	free(outbuf);
	free(inbuf);
d120 2
a121 2
	u_char *inbuf, *outbuf;
	int len, ilen, olen;
d124 4
a127 1
	outbuf = xmalloc(olen);
d130 4
a133 1
	inbuf = xmalloc(ilen);
d138 17
a154 10
		error("rsa_private_decrypt() failed");
	} else {
		if (BN_bin2bn(outbuf, len, out) == NULL)
			fatal("rsa_private_decrypt: BN_bin2bn failed");
	}
	explicit_bzero(outbuf, olen);
	explicit_bzero(inbuf, ilen);
	free(outbuf);
	free(inbuf);
	return len;
d158 1
a158 1
void
d161 3
a163 2
	BIGNUM *aux;
	BN_CTX *ctx;
a164 2
	if ((aux = BN_new()) == NULL)
		fatal("rsa_generate_additional_parameters: BN_new failed");
d166 5
a170 1
		fatal("rsa_generate_additional_parameters: BN_CTX_new failed");
d175 6
a180 3
	    (BN_mod(rsa->dmp1, rsa->d, aux, ctx) == 0))
		fatal("rsa_generate_additional_parameters: BN_sub/mod failed");

d183 1
@


1.30
log
@bye, bye xfree(); ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: rsa.c,v 1.29 2006/11/06 21:25:28 markus Exp $ */
d94 2
a95 2
	memset(outbuf, 0, olen);
	memset(inbuf, 0, ilen);
d120 2
a121 2
	memset(outbuf, 0, olen);
	memset(inbuf, 0, ilen);
@


1.29
log
@add missing checks for openssl return codes; with & ok djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: rsa.c,v 1.28 2006/08/03 03:34:42 deraadt Exp $ */
d96 2
a97 2
	xfree(outbuf);
	xfree(inbuf);
d122 2
a123 2
	xfree(outbuf);
	xfree(inbuf);
@


1.28
log
@almost entirely get rid of the culture of ".h files that include .h files"
ok djm, sort of ok stevesk
makes the pain stop in one easy step
@
text
@d1 1
a1 1
/* $OpenBSD: rsa.c,v 1.27 2006/07/22 20:48:23 stevesk Exp $ */
d91 2
a92 1
	BN_bin2bn(outbuf, len, out);
d117 2
a118 1
		BN_bin2bn(outbuf, len, out);
d139 5
a143 5
	BN_sub(aux, rsa->q, BN_value_one());
	BN_mod(rsa->dmq1, rsa->d, aux, ctx);

	BN_sub(aux, rsa->p, BN_value_one());
	BN_mod(rsa->dmp1, rsa->d, aux, ctx);
@


1.28.4.1
log
@upgrade to OpenSSH 4.5
@
text
@d1 1
a1 1
/* $OpenBSD: rsa.c,v 1.29 2006/11/06 21:25:28 markus Exp $ */
d91 1
a91 2
	if (BN_bin2bn(outbuf, len, out) == NULL)
		fatal("rsa_public_encrypt: BN_bin2bn failed");
d116 1
a116 2
		if (BN_bin2bn(outbuf, len, out) == NULL)
			fatal("rsa_private_decrypt: BN_bin2bn failed");
d137 5
a141 5
	if ((BN_sub(aux, rsa->q, BN_value_one()) == 0) ||
	    (BN_mod(rsa->dmq1, rsa->d, aux, ctx) == 0) ||
	    (BN_sub(aux, rsa->p, BN_value_one()) == 0) ||
	    (BN_mod(rsa->dmp1, rsa->d, aux, ctx) == 0))
		fatal("rsa_generate_additional_parameters: BN_sub/mod failed");
@


1.27
log
@move #include <string.h> out of includes.h
@
text
@d1 1
a1 1
/* $OpenBSD: rsa.c,v 1.26 2006/03/25 13:17:02 djm Exp $ */
d63 1
a63 1
#include "includes.h"
d67 1
a69 1
#include "xmalloc.h"
@


1.26
log
@Put $OpenBSD$ tags back (as comments) to replace the RCSID()s that
Theo nuked - our scripts to sync -portable need them in the files
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d64 2
@


1.25
log
@RCSID() can die
@
text
@d1 1
@


1.24
log
@call fatal() for openssl allocation failures
@
text
@a62 1
RCSID("$OpenBSD: rsa.c,v 1.23 2001/06/27 05:42:24 markus Exp $");
@


1.24.16.1
log
@upgrade to OpenSSH 4.4
@
text
@a0 1
/* $OpenBSD: rsa.c,v 1.28 2006/08/03 03:34:42 deraadt Exp $ */
d62 2
a63 1
#include <sys/types.h>
a64 3
#include <string.h>

#include "xmalloc.h"
d67 1
@


1.24.16.2
log
@upgrade to OpenSSH 4.5
@
text
@d1 1
a1 1
/* $OpenBSD: rsa.c,v 1.29 2006/11/06 21:25:28 markus Exp $ */
d91 1
a91 2
	if (BN_bin2bn(outbuf, len, out) == NULL)
		fatal("rsa_public_encrypt: BN_bin2bn failed");
d116 1
a116 2
		if (BN_bin2bn(outbuf, len, out) == NULL)
			fatal("rsa_private_decrypt: BN_bin2bn failed");
d137 5
a141 5
	if ((BN_sub(aux, rsa->q, BN_value_one()) == 0) ||
	    (BN_mod(rsa->dmq1, rsa->d, aux, ctx) == 0) ||
	    (BN_sub(aux, rsa->p, BN_value_one()) == 0) ||
	    (BN_mod(rsa->dmp1, rsa->d, aux, ctx) == 0))
		fatal("rsa_generate_additional_parameters: BN_sub/mod failed");
@


1.24.18.1
log
@upgrade to OpenSSH 4.4
@
text
@a0 1
/* $OpenBSD: rsa.c,v 1.28 2006/08/03 03:34:42 deraadt Exp $ */
d62 2
a63 1
#include <sys/types.h>
a64 3
#include <string.h>

#include "xmalloc.h"
d67 1
@


1.24.18.2
log
@upgrade to OpenSSH 4.5
@
text
@d1 1
a1 1
/* $OpenBSD: rsa.c,v 1.29 2006/11/06 21:25:28 markus Exp $ */
d91 1
a91 2
	if (BN_bin2bn(outbuf, len, out) == NULL)
		fatal("rsa_public_encrypt: BN_bin2bn failed");
d116 1
a116 2
		if (BN_bin2bn(outbuf, len, out) == NULL)
			fatal("rsa_private_decrypt: BN_bin2bn failed");
d137 5
a141 5
	if ((BN_sub(aux, rsa->q, BN_value_one()) == 0) ||
	    (BN_mod(rsa->dmq1, rsa->d, aux, ctx) == 0) ||
	    (BN_sub(aux, rsa->p, BN_value_one()) == 0) ||
	    (BN_mod(rsa->dmp1, rsa->d, aux, ctx) == 0))
		fatal("rsa_generate_additional_parameters: BN_sub/mod failed");
@


1.23
log
@s/generate_additional_parameters/rsa_generate_additional_parameters/
http://www.humppa.com/
@
text
@d63 1
a63 1
RCSID("$OpenBSD: rsa.c,v 1.22 2001/03/26 23:23:23 markus Exp $");
d123 1
d129 5
a133 3
	/* Generate additional parameters */
	aux = BN_new();
	ctx = BN_CTX_new();
@


1.23.2.1
log
@Update to OpenSSH-3.1 on 3.0-stable branch
@
text
@d63 1
a63 1
RCSID("$OpenBSD: rsa.c,v 1.24 2001/12/27 18:22:16 markus Exp $");
a122 1
/* calculate p-1 and q-1 */
d128 3
a130 5

	if ((aux = BN_new()) == NULL)
		fatal("rsa_generate_additional_parameters: BN_new failed");
	if ((ctx = BN_CTX_new()) == NULL)
		fatal("rsa_generate_additional_parameters: BN_CTX_new failed");
@


1.22
log
@try to read private f-secure ssh v2 rsa keys.
@
text
@d63 1
a63 1
RCSID("$OpenBSD: rsa.c,v 1.21 2001/02/04 15:32:24 stevesk Exp $");
d124 1
a124 1
generate_additional_parameters(RSA *rsa)
@


1.22.2.1
log
@Pull in OpenSSH-2.9.9
@
text
@d63 1
a63 1
RCSID("$OpenBSD: rsa.c,v 1.23 2001/06/27 05:42:24 markus Exp $");
d124 1
a124 1
rsa_generate_additional_parameters(RSA *rsa)
@


1.22.2.2
log
@Merge OpenSSH 3.1, keeping /etc as configuration files directory.
(i.e. OpenSSH 3.1 + openbsd29_3.1.patch)
@
text
@d63 1
a63 1
RCSID("$OpenBSD: rsa.c,v 1.24 2001/12/27 18:22:16 markus Exp $");
a122 1
/* calculate p-1 and q-1 */
d128 3
a130 5

	if ((aux = BN_new()) == NULL)
		fatal("rsa_generate_additional_parameters: BN_new failed");
	if ((ctx = BN_CTX_new()) == NULL)
		fatal("rsa_generate_additional_parameters: BN_CTX_new failed");
@


1.21
log
@unexpand and remove end-of-line whitespace; ok markus@@
@
text
@d63 1
a63 1
RCSID("$OpenBSD: rsa.c,v 1.20 2001/01/29 19:47:30 markus Exp $");
d122 20
@


1.20
log
@handle rsa_private_decrypt failures; helps against the Bleichenbacher pkcs#1 attack
@
text
@d11 1
a11 1
 * 
d63 1
a63 1
RCSID("$OpenBSD: rsa.c,v 1.19 2001/01/21 19:05:54 markus Exp $");
@


1.19
log
@split ssh.h and try to cleanup the #include mess. remove unnecessary #includes.
rename util.[ch] -> misc.[ch]
@
text
@d63 1
a63 1
RCSID("$OpenBSD: rsa.c,v 1.18 2000/12/19 23:17:57 markus Exp $");
d97 1
a97 1
void
d111 5
a115 5
	    RSA_PKCS1_PADDING)) <= 0)
		fatal("rsa_private_decrypt() failed");

	BN_bin2bn(outbuf, len, out);

d120 1
@


1.18
log
@replace 'unsigned bla' with 'u_bla' everywhere. also, replace 'char unsigned'
with u_char.
@
text
@d63 1
a63 1
RCSID("$OpenBSD: rsa.c,v 1.17 2000/11/12 19:50:37 markus Exp $");
d66 1
a66 1
#include "ssh.h"
@


1.17
log
@add support for RSA to SSH2.  please test.

there are now 3 types of keys: RSA1 is used by ssh-1 only,
RSA and DSA are used by SSH2.

you can use 'ssh-keygen -t rsa -f ssh2_rsa_file' to generate RSA
keys for SSH2 and use the RSA keys for hostkeys or for user keys.

SSH2 RSA or DSA keys are added to .ssh/authorised_keys2 as before.

IdentityFile2, HostDsaKey and DSAAuthentication are obsolete.
you can use multiple IdentityFile and HostKey for all types of keys.

the option DSAAuthentication is replaced by PubkeyAuthetication.
@
text
@d63 1
a63 1
RCSID("$OpenBSD: rsa.c,v 1.16 2000/09/07 20:27:53 deraadt Exp $");
d72 1
a72 1
	unsigned char *inbuf, *outbuf;
d100 1
a100 1
	unsigned char *inbuf, *outbuf;
@


1.16
log
@cleanup copyright notices on all files.  I have attempted to be accurate with
the details.  everything is now under Tatu's licence (which I copied from his
readme), and/or the core-sdi bsd-ish thing for deattack, or various openbsd
developers under a 2-term bsd licence.  We're not changing any rules, just
being accurate.
@
text
@d63 1
a63 1
RCSID("$OpenBSD: rsa.c,v 1.15 2000/06/20 01:39:44 markus Exp $");
a68 66
int rsa_verbose = 1;

int
rsa_alive()
{
	RSA *key;

	key = RSA_generate_key(32, 3, NULL, NULL);
	if (key == NULL)
		return (0);
	RSA_free(key);
	return (1);
}

/*
 * Generates RSA public and private keys.  This initializes the data
 * structures; they should be freed with rsa_clear_private_key and
 * rsa_clear_public_key.
 */

void
rsa_generate_key(RSA *prv, RSA *pub, unsigned int bits)
{
	RSA *key;

	if (rsa_verbose) {
		printf("Generating RSA keys:  ");
		fflush(stdout);
	}
	key = RSA_generate_key(bits, 35, NULL, NULL);
	if (key == NULL)
		fatal("rsa_generate_key: key generation failed.");

	/* Copy public key parameters */
	pub->n = BN_new();
	BN_copy(pub->n, key->n);
	pub->e = BN_new();
	BN_copy(pub->e, key->e);

	/* Copy private key parameters */
	prv->n = BN_new();
	BN_copy(prv->n, key->n);
	prv->e = BN_new();
	BN_copy(prv->e, key->e);
	prv->d = BN_new();
	BN_copy(prv->d, key->d);
	prv->p = BN_new();
	BN_copy(prv->p, key->p);
	prv->q = BN_new();
	BN_copy(prv->q, key->q);

	prv->dmp1 = BN_new();
	BN_copy(prv->dmp1, key->dmp1);

	prv->dmq1 = BN_new();
	BN_copy(prv->dmq1, key->dmq1);

	prv->iqmp = BN_new();
	BN_copy(prv->iqmp, key->iqmp);

	RSA_free(key);

	if (rsa_verbose)
		printf("Key generation complete.\n");
}

a119 8
}

/* Set whether to output verbose messages during key generation. */

void
rsa_set_verbose(int verbose)
{
	rsa_verbose = verbose;
@


1.16.2.1
log
@Pull in OpenSSH 2.5.0
@
text
@d11 1
a11 1
 *
d63 1
a63 1
RCSID("$OpenBSD: rsa.c,v 1.21 2001/02/04 15:32:24 stevesk Exp $");
d66 1
a66 1
#include "log.h"
d69 66
d138 1
a138 1
	u_char *inbuf, *outbuf;
d163 1
a163 1
int
d166 1
a166 1
	u_char *inbuf, *outbuf;
d177 5
a181 5
	    RSA_PKCS1_PADDING)) <= 0) {
		error("rsa_private_decrypt() failed");
	} else {
		BN_bin2bn(outbuf, len, out);
	}
d186 8
a193 1
	return len;
@


1.16.2.2
log
@Pull in OpenSSH-2.5.1
@
text
@@


1.16.2.3
log
@Pull in OpenSSH-2.5.2 for 2.8 branch.
@
text
@@


1.16.2.4
log
@Pull in OpenSSH-2.9 to 2.8 branch.
@
text
@d63 1
a63 1
RCSID("$OpenBSD: rsa.c,v 1.22 2001/03/26 23:23:23 markus Exp $");
a121 20

void
generate_additional_parameters(RSA *rsa)
{
	BIGNUM *aux;
	BN_CTX *ctx;
	/* Generate additional parameters */
	aux = BN_new();
	ctx = BN_CTX_new();

	BN_sub(aux, rsa->q, BN_value_one());
	BN_mod(rsa->dmq1, rsa->d, aux, ctx);

	BN_sub(aux, rsa->p, BN_value_one());
	BN_mod(rsa->dmp1, rsa->d, aux, ctx);

	BN_clear_free(aux);
	BN_CTX_free(ctx);
}

@


1.16.2.5
log
@Pull in OpenSSH 2.9.9 to the 2.8 branch.
@
text
@d63 1
a63 1
RCSID("$OpenBSD: rsa.c,v 1.23 2001/06/27 05:42:24 markus Exp $");
d124 1
a124 1
rsa_generate_additional_parameters(RSA *rsa)
@


1.16.2.6
log
@Merge OpenSSH 3.1.
@
text
@d63 1
a63 1
RCSID("$OpenBSD: rsa.c,v 1.24 2001/12/27 18:22:16 markus Exp $");
a122 1
/* calculate p-1 and q-1 */
d128 3
a130 5

	if ((aux = BN_new()) == NULL)
		fatal("rsa_generate_additional_parameters: BN_new failed");
	if ((ctx = BN_CTX_new()) == NULL)
		fatal("rsa_generate_additional_parameters: BN_CTX_new failed");
@


1.15
log
@OpenBSD tag
@
text
@a1 3
 *
 * rsa.c
 *
a2 1
 *
d6 28
a33 1
 * Created: Fri Mar  3 22:07:06 1995 ylo
d35 3
a37 1
 * Description of the RSA algorithm can be found e.g. from the following sources:
d53 2
a54 1
 *   The RSA Frequently Asked Questions document by RSA Data Security, Inc., 1995.
d56 2
a57 2
 *   RSA in 3 lines of perl by Adam Back <aba@@atlax.ex.ac.uk>, 1995, as included
 *   below:
d60 1
a60 2
 *
*/
d63 1
a63 1
RCSID("$OpenBSD: rsa.c,v 1.14 2000/04/14 10:30:32 markus Exp $");
@


1.14
log
@whitespace cleanup
@
text
@d38 1
a38 1
RCSID("$Id: rsa.c,v 1.13 2000/03/16 20:56:14 markus Exp $");
@


1.14.2.1
log
@Pull in the rest of openssh-2.2.0 to 2.7 branch (luvin' cvs...)
@
text
@d38 1
a38 1
RCSID("$OpenBSD: rsa.c,v 1.15 2000/06/20 01:39:44 markus Exp $");
@


1.14.2.2
log
@openssh-2.3.0 (again) for 2.7 branch
@
text
@d2 3
d6 1
d10 1
a10 28
 * As far as I am concerned, the code I have written for this software
 * can be used freely for any purpose.  Any derived versions of this
 * software must be clearly marked as such, and if the derived work is
 * incompatible with the protocol description in the RFC file, it must be
 * called by a name other than "ssh" or "Secure Shell".
 * 
 *
 * Copyright (c) 1999 Niels Provos.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
d12 1
a12 3
 *
 * Description of the RSA algorithm can be found e.g. from the following
 * sources:
d28 1
a28 2
 *   The RSA Frequently Asked Questions document by RSA Data Security,
 *   Inc., 1995.
d30 2
a31 2
 *   RSA in 3 lines of perl by Adam Back <aba@@atlax.ex.ac.uk>, 1995, as
 * included below:
d34 2
a35 1
 */
d38 1
a38 1
RCSID("$OpenBSD: rsa.c,v 1.16 2000/09/07 20:27:53 deraadt Exp $");
@


1.14.2.3
log
@OpenSSH-2.5.1 for 2.7 patch branch
@
text
@d11 1
a11 1
 *
d63 1
a63 1
RCSID("$OpenBSD: rsa.c,v 1.21 2001/02/04 15:32:24 stevesk Exp $");
d66 1
a66 1
#include "log.h"
d69 66
d138 1
a138 1
	u_char *inbuf, *outbuf;
d163 1
a163 1
int
d166 1
a166 1
	u_char *inbuf, *outbuf;
d177 5
a181 5
	    RSA_PKCS1_PADDING)) <= 0) {
		error("rsa_private_decrypt() failed");
	} else {
		BN_bin2bn(outbuf, len, out);
	}
d186 8
a193 1
	return len;
@


1.14.2.4
log
@Pull in OpenSSH-2.5.2 for 2.7 branch.
@
text
@@


1.13
log
@-pedantic: signed vs. unsigned, void*-arithm, etc
@
text
@d2 1
a2 1
 * 
d4 1
a4 1
 * 
d6 1
a6 1
 * 
d9 1
a9 1
 * 
d11 1
a11 1
 * 
d13 1
a13 1
 * 
d15 1
a15 1
 * 
d18 1
a18 1
 * 
d21 1
a21 1
 * 
d24 1
a24 1
 * 
d27 1
a27 1
 * 
d29 1
a29 1
 * 
d32 1
a32 1
 * 
d34 1
a34 1
 * 
d38 1
a38 1
RCSID("$Id: rsa.c,v 1.12 2000/02/21 21:47:31 markus Exp $");
@


1.12
log
@PKCS#1 padding
@
text
@d38 1
a38 1
RCSID("$Id: rsa.c,v 1.11 1999/11/24 19:53:50 markus Exp $");
d113 1
a113 1
	char *inbuf, *outbuf;
d141 1
a141 1
	char *inbuf, *outbuf;
@


1.11
log
@KNF, final part 3
@
text
@d38 1
a38 1
RCSID("$Id: rsa.c,v 1.10 1999/11/24 00:26:03 deraadt Exp $");
d127 1
a127 1
				      RSA_PKCS1_PADDING)) <= 0)
d152 1
a152 1
				       RSA_SSLV23_PADDING)) <= 0)
@


1.10
log
@much more KNF
@
text
@d38 1
a38 1
RCSID("$Id: rsa.c,v 1.9 1999/11/23 22:25:54 markus Exp $");
d58 5
a62 3
/* Generates RSA public and private keys.  This initializes the data
   structures; they should be freed with rsa_clear_private_key and
   rsa_clear_public_key. */
@


1.9
log
@KNF part 1
@
text
@d2 33
a34 33

rsa.c

Author: Tatu Ylonen <ylo@@cs.hut.fi>

Copyright (c) 1995 Tatu Ylonen <ylo@@cs.hut.fi>, Espoo, Finland
                   All rights reserved

Created: Fri Mar  3 22:07:06 1995 ylo

Description of the RSA algorithm can be found e.g. from the following sources:

  Bruce Schneier: Applied Cryptography.  John Wiley & Sons, 1994.

  Jennifer Seberry and Josed Pieprzyk: Cryptography: An Introduction to
    Computer Security.  Prentice-Hall, 1989.

  Man Young Rhee: Cryptography and Secure Data Communications.  McGraw-Hill,
    1994.

  R. Rivest, A. Shamir, and L. M. Adleman: Cryptographic Communications
    System and Method.  US Patent 4,405,829, 1983.

  Hans Riesel: Prime Numbers and Computer Methods for Factorization.
    Birkhauser, 1994.

  The RSA Frequently Asked Questions document by RSA Data Security, Inc., 1995.

  RSA in 3 lines of perl by Adam Back <aba@@atlax.ex.ac.uk>, 1995, as included
    below:

    gone - had to be deleted - what a pity

d38 1
a38 1
RCSID("$Id: rsa.c,v 1.8 1999/11/08 20:13:42 markus Exp $");
@


1.8
log
@bugfix: use correct size for memset(), report from damien@@ibs.com.au
@
text
@d16 1
a16 1
  Jennifer Seberry and Josed Pieprzyk: Cryptography: An Introduction to 
d19 1
a19 1
  Man Young Rhee: Cryptography and Secure Data Communications.  McGraw-Hill, 
d25 1
a25 1
  Hans Riesel: Prime Numbers and Computer Methods for Factorization.  
d38 1
a38 1
RCSID("$Id: rsa.c,v 1.7 1999/11/05 07:09:07 markus Exp $");
d49 1
a49 1
  RSA *key;
d51 5
a55 5
  key = RSA_generate_key(32, 3, NULL, NULL);
  if (key == NULL)
    return (0);
  RSA_free(key);
  return (1);
d65 1
a65 1
  RSA *key;
d67 39
a105 40
  if (rsa_verbose) {
    printf("Generating RSA keys:  "); 
    fflush(stdout);
  }

  key = RSA_generate_key(bits, 35, NULL, NULL);
  if (key == NULL)
    fatal("rsa_generate_key: key generation failed.");

  /* Copy public key parameters */
  pub->n = BN_new();
  BN_copy(pub->n, key->n);
  pub->e = BN_new();
  BN_copy(pub->e, key->e);

  /* Copy private key parameters */
  prv->n = BN_new();
  BN_copy(prv->n, key->n);
  prv->e = BN_new();
  BN_copy(prv->e, key->e);
  prv->d = BN_new();
  BN_copy(prv->d, key->d);
  prv->p = BN_new();
  BN_copy(prv->p, key->p);
  prv->q = BN_new();
  BN_copy(prv->q, key->q);

  prv->dmp1 = BN_new();
  BN_copy(prv->dmp1, key->dmp1);

  prv->dmq1 = BN_new();
  BN_copy(prv->dmq1, key->dmq1);

  prv->iqmp = BN_new();
  BN_copy(prv->iqmp, key->iqmp);

  RSA_free(key);
  
  if (rsa_verbose)
    printf("Key generation complete.\n");
d109 1
a109 1
rsa_public_encrypt(BIGNUM *out, BIGNUM *in, RSA* key)
d111 2
a112 2
  char *inbuf, *outbuf;
  int len, ilen, olen;
d114 2
a115 2
  if (BN_num_bits(key->e) < 2 || !BN_is_odd(key->e))
    fatal("rsa_public_encrypt() exponent too small or not odd");
d117 2
a118 2
  olen = BN_num_bytes(key->n);
  outbuf = xmalloc(olen);
d120 3
a122 3
  ilen = BN_num_bytes(in);
  inbuf = xmalloc(ilen);
  BN_bn2bin(in, inbuf);
d124 3
a126 3
  if ((len = RSA_public_encrypt(ilen, inbuf, outbuf, key,
				RSA_PKCS1_PADDING)) <= 0)
    fatal("rsa_public_encrypt() failed");
d128 1
a128 1
  BN_bin2bn(outbuf, len, out);
d130 4
a133 4
  memset(outbuf, 0, olen);
  memset(inbuf, 0, ilen);
  xfree(outbuf);
  xfree(inbuf);
d139 2
a140 2
  char *inbuf, *outbuf;
  int len, ilen, olen;
d142 2
a143 2
  olen = BN_num_bytes(key->n);
  outbuf = xmalloc(olen);
d145 14
a158 14
  ilen = BN_num_bytes(in);
  inbuf = xmalloc(ilen);
  BN_bn2bin(in, inbuf);

  if ((len = RSA_private_decrypt(ilen, inbuf, outbuf, key,
				 RSA_SSLV23_PADDING)) <= 0)
    fatal("rsa_private_decrypt() failed");

  BN_bin2bn(outbuf, len, out);

  memset(outbuf, 0, olen);
  memset(inbuf, 0, ilen);
  xfree(outbuf);
  xfree(inbuf);
d166 1
a166 1
  rsa_verbose = verbose;
@


1.7
log
@clear buffers used for encryption. ok: niels@@
@
text
@d38 1
a38 1
RCSID("$Id: rsa.c,v 1.6 1999/11/02 19:42:36 markus Exp $");
d113 1
a113 1
  int len;
d118 2
a119 2
  len = BN_num_bytes(key->n);
  outbuf = xmalloc(len);
d121 2
a122 2
  len = BN_num_bytes(in);
  inbuf = xmalloc(len);
d125 1
a125 1
  if ((len = RSA_public_encrypt(len, inbuf, outbuf, key,
d131 2
a132 2
  memset(outbuf, 0, len);
  memset(inbuf, 0, len);
d141 1
a141 1
  int len;
d143 2
a144 2
  len = BN_num_bytes(key->n);
  outbuf = xmalloc(len);
d146 2
a147 2
  len = BN_num_bytes(in);
  inbuf = xmalloc(len);
d150 1
a150 1
  if ((len = RSA_private_decrypt(len, inbuf, outbuf, key,
d156 2
a157 2
  memset(outbuf, 0, len);
  memset(inbuf, 0, len);
@


1.6
log
@replace assert() with error, fatal or packet_disconnect
@
text
@d38 1
a38 1
RCSID("$Id: rsa.c,v 1.5 1999/10/16 23:54:12 provos Exp $");
d131 2
d156 2
@


1.5
log
@public exponent needs to be odd.
@
text
@d38 1
a38 1
RCSID("$Id: rsa.c,v 1.4 1999/10/16 23:20:25 provos Exp $");
d73 2
a74 2

  assert(key != NULL);
@


1.4
log
@dont encrypt with public exponent < 3.
@
text
@d38 1
a38 1
RCSID("$Id: rsa.c,v 1.3 1999/09/29 18:16:20 dugsong Exp $");
d115 2
a116 2
  if (BN_num_bits(key->e) < 2)
    fatal("rsa_public_encrypt() exponent too small");
@


1.3
log
@update krb4/AFS support to ssh-1.2.27-afs-kerberos-pl1 level, clean up unused variables, update manpages
@
text
@d38 1
a38 1
RCSID("$Id: rsa.c,v 1.2 1999/09/29 06:15:00 deraadt Exp $");
d114 3
@


1.2
log
@test for RSA in the ssl library, real early on
@
text
@d38 1
a38 1
RCSID("$Id: rsa.c,v 1.1 1999/09/28 04:45:37 provos Exp $");
a49 1
  extern char *__progname;
@


1.1
log
@convert all uses of gmp to SSL bignum
convert all used of rsa to SSL rsa functions
remove all use of randomstate to OpenBSD arc4random() and arc4_stir()
all this done at a long long night in Canada.
@
text
@d38 1
a38 1
RCSID("$Id: rsa.c,v 1.2 1999/05/04 11:59:05 bg Exp $");
d45 13
@

