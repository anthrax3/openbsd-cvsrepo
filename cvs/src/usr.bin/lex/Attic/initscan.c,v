head	1.18;
access;
symbols
	OPENBSD_5_8:1.14.0.10
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.6
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.4
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.13.0.28
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.26
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.24
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.22
	OPENBSD_5_0:1.13.0.20
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.18
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.16
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.12
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.14
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.10
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.8
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.6
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.4
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.2
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.10.0.14
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.12
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.10
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.8
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.6
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.9.0.4
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.5.0.18
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.16
	OPENBSD_2_8:1.5.0.14
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.12
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.10
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.8
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.6
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.4
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.18
date	2015.11.22.19.56.14;	author tedu;	state dead;
branches;
next	1.17;
commitid	UOZDNIxrctpP1Mu9;

1.17
date	2015.11.19.23.34.56;	author mmcc;	state Exp;
branches;
next	1.16;
commitid	sr9v9L5qZs3TeEb4;

1.16
date	2015.11.19.23.20.34;	author tedu;	state Exp;
branches;
next	1.15;
commitid	BIjrMDODd4w0xnpk;

1.15
date	2015.11.19.19.43.40;	author tedu;	state Exp;
branches;
next	1.14;
commitid	TCPdLh99ETkn9X6R;

1.14
date	2013.11.04.17.03.32;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2007.01.26.14.38.19;	author tsi;	state Exp;
branches;
next	1.12;

1.12
date	2007.01.16.14.43.28;	author tsi;	state Exp;
branches;
next	1.11;

1.11
date	2006.12.06.05.03.29;	author ray;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.04.17.34.44;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.05.31.22.49.29;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2002.05.31.00.56.21;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2002.05.30.10.53.44;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2001.11.19.19.02.14;	author mpech;	state Exp;
branches;
next	1.5;

1.5
date	97.07.25.21.05.29;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	96.12.10.22.22.01;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.07.13.22.22.03;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.35.36;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.30;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.30;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.18
log
@remove the init files that we don't build. if they are ever needed for
bootstrapping, they are available in the attic, but they clutter up the
directory.
@
text
@/*	$OpenBSD: initscan.c,v 1.17 2015/11/19 23:34:56 mmcc Exp $	*/

#line 3 "scan.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	(yytext_ptr) -= (yy_more_len); \
	yyleng = (size_t) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 251
#define YY_END_OF_BUFFER 252
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1223] =
    {   0,
      248,  248,  252,  250,  251,    9,  250,  251,   20,  250,
      251,  250,  251,   18,  250,  251,    1,    9,  250,  251,
       19,   20,  250,  251,  250,  251,  250,  251,  250,  251,
      250,  251,   17,   18,  250,  251,  164,  250,  251,  149,
      164,  250,  251,  150,  250,  251,  164,  250,  251,  142,
      164,  250,  251,  164,  250,  251,  161,  163,  164,  250,
      251,  162,  163,  164,  250,  251,  163,  164,  250,  251,
      163,  164,  250,  251,  164,  250,  251,  164,  250,  251,
      164,  250,  251,  163,  164,  250,  251,  148,  149,  164,
      250,  251,  138,  150,  250,  251,  164,  250,  251,  164,

      250,  251,  140,  164,  250,  251,  141,  164,  250,  251,
      136,  250,  251,  137,  250,  251,  136,  250,  251,  135,
      136,  250,  251,  134,  136,  250,  251,  135,  136,  250,
      251,  248,  249,  250,  251,  248,  249,  250,  251,  249,
      250,  251,  249,  250,  251,   41,  250,  251,   42,  250,
      251,   41,  250,  251,   41,  250,  251,   41,  250,  251,
       41,  250,  251,   41,  250,  251,   41,  250,  251,   50,
      250,  251,   49,  250,  251,   51,  250,  251,  250,  251,
      170,  250,  251,  170,  250,  251,  165,  250,  251,  170,
      250,  251,  166,  170,  250,  251,  167,  170,  250,  251,

      169,  170,  250,  251,  171,  250,  251,  219,  250,  251,
      220,  250,  251,  219,  250,  251,  217,  219,  250,  251,
      216,  219,  250,  251,  218,  219,  250,  251,  172,  250,
      251,  174,  250,  251,  172,  250,  251,  173,  250,  251,
      172,  250,  251,  186,  250,  251,  186,  250,  251,  186,
      250,  251,  186,  250,  251,  188,  190,  250,  251,  190,
      250,  251,  188,  190,  250,  251,  188,  190,  250,  251,
      188,  190,  250,  251,  188,  190,  250,  251,  189,  190,
      250,  251,  233,  239,  250,  251,  238,  250,  251,  233,
      239,  250,  251,  237,  239,  250,  251,  239,  250,  251,

      239,  250,  251,  235,  239,  250,  251,  235,  239,  250,
      251,  235,  239,  250,  251,  234,  239,  250,  251,  234,
      239,  250,  251,  229,  239,  250,  251,  230,  239,  250,
      251,  250,  251,  131,  250,  251,  250,  251,   25,  250,
      251,   26,  250,  251,   25,  250,  251,   22,  250,  251,
       25,  250,  251,   25,  250,  251,  240,  244,  250,  251,
      242,  250,  251,  240,  244,  250,  251,  243,  244,  250,
      251,  244,  250,  251,  227,  250,  251,  227,  250,  251,
      228,  250,  251,  227,  250,  251,  227,  250,  251,  227,
      250,  251,  227,  250,  251,  227,  250,  251,  227,  250,

      251,  227,  250,  251,  130,  250,  251,   53,  130,  250,
      251,   52,  250,  251,  130,  250,  251,  130,  250,  251,
      130,  250,  251,  130,  250,  251,   54,  130,  250,  251,
      130,  250,  251,  130,  250,  251,  130,  250,  251,  130,
      250,  251,  130,  250,  251,  130,  250,  251,  130,  250,
      251,  130,  250,  251,  130,  250,  251,  130,  250,  251,
      130,  250,  251,  130,  250,  251,  130,  250,  251,  130,
      250,  251,  130,  250,  251,  130,  250,  251,  130,  250,
      251,  130,  250,  251,  130,  250,  251,  130,  250,  251,
      130,  250,  251,   37,  250,  251,   34,  250,  251,   37,

      250,  251,   35,   37,  250,  251,   48,  250,  251,   45,
      250,  251,  250,  251,   48,  250,  251,   48,  250,  251,
       44,  250,  251,   43,  250,  251,  176,  250,  251,  175,
      250,  251,  177,  250,  251,  178,  250,  251,  179,  250,
      251,  180,  250,  251,  181,  250,  251,  182,  250,  251,
      183,  250,  251,   32,  250,  251,   33,  250,  251,   32,
      250,  251,   31,  250,  251,   29,  250,  251,   30,  250,
      251,   29,  250,  251,   28,  250,  251,    9,   20,   18,
        1,    9,   19,   20,   16,   10,   16,    4,   16,    5,
        2,   17,   18,  149,  150,  144,  160,  158,  154,  154,

      245,  245,  245,  143,  148,  149,  138,  150,  140,  141,
      153,  139,  137,  135,  134,  134,  132,  135,  133,  135,
      248,  248,  246,  247,   42,   39,   40,   50,   49,   51,
      165,  165,  168,  169,  220,  216,  174,  184,  185,  190,
      187,  233,  238,  236,  222,  235,  235,  235,  231,  232,
      131,   26,   21,   23,   24,  240,  242,  241,  228,  221,
      225,  226,   53,   52,  129,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,   55,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,   36,   35,   45,

       46,   47,   32,   33,   30,   27,   16,   10,   16,   14,
        4,   16,    5,    6,  145,  146,  159,  154,  154,  154,
      154,  154,  245,  245,  156,  155,  157,  139,  145,  147,
      153,  132,  135,  133,  135,   38,  235,  235,  221,  130,
      130,  130,  130,  130,  130,  130,   67,  130,  130,  130,
      130,   72,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,   14,   15,    4,
        8,   16,    5,  154,  154,  154,  154,  154,  154,  154,

      245,  157,  235,  235,   56,   57,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,   73,  130,   74,
      130,  130,  130,  130,  130,   79,  130,  130,  130,  130,
      130,  130,  130,  130,   84,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,   93,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,   15,    8,   16,    8,
       16,    8,   16,  154,  154,  154,  154,  154,  154,  154,
      215,  235,  235,   58,  130,  130,  130,   60,  130,  130,
       64,  130,  130,  130,  130,  130,   70,  130,  130,  130,
      130,   75,  130,  130,  130,  130,  130,  130,  130,  130,

      130,  130,  130,  130,   87,  130,  130,  130,  130,  130,
       91,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,    3,    8,   16,    7,    8,   16,  154,  154,
      154,  223,  224,  223,  235,  224,  235,  130,  130,  130,
       63,  130,  130,  130,  130,  130,  130,  130,  130,  126,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  124,
      130,  130,   86,  130,  130,   89,  130,  130,   90,  130,
      130,  130,  130,  105,  130,  130,   95,  130,  130,   96,
      130,   12,   13,  152,  151,  152,  130,  130,  130,  130,
      130,  130,  130,   68,  130,  130,   71,  130,  130,  130,

      130,  130,  130,  130,  123,  130,  130,   83,  130,  130,
      130,   88,  130,  130,   92,  130,  103,  130,  125,  130,
      130,  130,  151,  130,  130,  130,  130,  130,  130,  130,
       69,  130,  130,  130,  130,  130,   80,  130,  130,  130,
      130,  130,  130,  130,  114,   94,  130,  130,  115,   11,
      191,  215,  192,  215,  193,  215,  194,  215,  195,  215,
      196,  215,  197,  215,  198,  215,  199,  215,  200,  215,
      201,  215,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,   85,  130,  130,  130,
      116,  104,  130,  117,  202,  215,  203,  215,  204,  215,

      205,  215,  206,  215,  207,  215,  208,  215,  209,  215,
      210,  215,  211,  215,  212,  215,  213,  215,  130,  130,
      130,  130,  130,  130,  130,  122,  130,  130,  130,   77,
      130,  130,  130,  130,  130,  130,  110,  120,  118,  111,
      121,  119,  214,  215,  130,  130,  130,  130,  130,  130,
      130,  126,  130,   76,  130,  130,   82,  130,  130,  127,
      130,  130,  106,  108,  107,  109,  130,  130,  130,   65,
      130,  130,  130,  130,  130,   78,  130,  130,  112,  113,
       98,   99,  130,  130,  130,  130,  130,  130,  130,  128,
      130,   97,  101,  130,  130,  130,  130,  130,   68,  130,

      130,  100,  102,  130,  130,   62,  130,   66,  130,  130,
      130,  130,   61,  130,   69,  130,  130,  130,   81,  130,
       59,  130
    } ;

static yyconst flex_int16_t yy_accept[1108] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    4,
        6,    9,   12,   14,   17,   21,   25,   27,   29,   31,
       33,   37,   40,   44,   47,   50,   54,   57,   62,   67,
       71,   75,   78,   81,   84,   88,   93,   97,  100,  103,
      107,  111,  114,  117,  120,  124,  128,  132,  136,  140,
      143,  146,  149,  152,  155,  158,  161,  164,  167,  170,

      173,  176,  179,  181,  184,  187,  190,  193,  197,  201,
      205,  208,  211,  214,  217,  221,  225,  229,  232,  235,
      238,  241,  244,  247,  250,  253,  256,  260,  263,  267,
      271,  275,  279,  283,  287,  290,  294,  298,  301,  304,
      308,  312,  316,  320,  324,  328,  332,  334,  337,  339,
      342,  345,  348,  351,  354,  357,  361,  364,  368,  372,
      375,  378,  381,  384,  387,  390,  393,  396,  399,  402,
      405,  408,  412,  415,  418,  421,  424,  427,  431,  434,
      437,  440,  443,  446,  449,  452,  455,  458,  461,  464,
      467,  470,  473,  476,  479,  482,  485,  488,  491,  494,

      497,  500,  503,  507,  510,  513,  515,  518,  521,  524,
      527,  530,  533,  536,  539,  542,  545,  548,  551,  554,
      557,  560,  563,  566,  569,  572,  575,  578,  579,  580,
      580,  581,  583,  585,  585,  585,  585,  586,  588,  588,
      588,  588,  588,  589,  590,  591,  591,  592,  594,  595,
      596,  596,  596,  596,  597,  597,  598,  599,  599,  600,
      601,  601,  602,  603,  604,  604,  604,  605,  605,  607,
      609,  609,  609,  609,  610,  611,  612,  613,  613,  614,
      615,  616,  617,  619,  621,  622,  623,  624,  625,  626,
      626,  626,  627,  628,  628,  629,  630,  631,  631,  632,

      632,  633,  634,  635,  636,  637,  638,  638,  639,  640,
      641,  642,  643,  644,  644,  645,  645,  646,  647,  648,
      649,  650,  651,  651,  652,  652,  653,  654,  655,  656,
      657,  658,  659,  659,  659,  660,  661,  662,  663,  664,
      665,  665,  666,  666,  666,  667,  668,  669,  670,  671,
      672,  673,  674,  675,  676,  677,  678,  679,  680,  681,
      682,  683,  684,  685,  686,  687,  688,  689,  690,  691,
      692,  693,  694,  695,  696,  697,  698,  698,  699,  700,
      701,  702,  703,  704,  705,  706,  707,  707,  708,  710,
      710,  711,  711,  711,  711,  711,  711,  712,  713,  714,

      714,  715,  715,  716,  716,  717,  717,  718,  718,  719,
      720,  720,  721,  722,  723,  724,  725,  726,  727,  727,
      728,  730,  731,  731,  732,  732,  734,  736,  736,  736,
      736,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  738,  739,  740,  740,  740,
      741,  742,  743,  744,  745,  746,  747,  749,  750,  751,
      752,  754,  755,  756,  757,  758,  759,  760,  761,  762,
      763,  764,  765,  766,  767,  768,  769,  770,  771,  772,
      773,  774,  775,  776,  777,  778,  779,  780,  781,  782,
      783,  784,  785,  786,  787,  788,  788,  788,  788,  788,

      790,  790,  790,  790,  790,  790,  790,  791,  793,  794,
      794,  795,  796,  797,  798,  799,  800,  801,  802,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  804,  805,  806,  807,
      808,  809,  810,  811,  812,  813,  814,  815,  816,  817,
      818,  820,  822,  823,  824,  825,  826,  828,  829,  830,
      831,  832,  833,  834,  835,  837,  838,  839,  840,  841,
      842,  843,  844,  845,  846,  848,  849,  850,  851,  852,
      853,  854,  855,  856,  857,  857,  857,  857,  857,  858,

      858,  858,  858,  858,  858,  860,  862,  864,  864,  865,
      866,  867,  868,  869,  870,  871,  871,  871,  871,  871,
      872,  872,  872,  872,  872,  872,  872,  872,  872,  872,
      872,  872,  872,  872,  872,  872,  872,  872,  872,  872,
      872,  872,  872,  872,  873,  874,  876,  877,  878,  880,
      881,  883,  884,  885,  886,  887,  889,  890,  891,  892,
      894,  895,  896,  897,  898,  899,  900,  901,  902,  903,
      904,  905,  907,  908,  909,  910,  911,  913,  914,  915,
      916,  917,  918,  919,  920,  921,  922,  923,  923,  923,
      923,  923,  924,  924,  924,  924,  926,  927,  929,  929,

      930,  931,  932,  932,  932,  933,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  936,  938,  939,  940,  941,  943,  944,  945,  946,
      947,  948,  949,  950,  952,  953,  954,  955,  956,  957,
      958,  959,  960,  962,  963,  965,  966,  968,  969,  971,
      972,  973,  974,  976,  976,  977,  979,  980,  980,  982,
      982,  982,  982,  982,  982,  983,  983,  984,  984,  985,
      985,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,

      987,  987,  987,  987,  987,  987,  988,  989,  990,  991,
      992,  993,  994,  996,  997,  999, 1000, 1001, 1002, 1003,
     1004, 1005, 1007, 1008, 1010, 1011, 1012, 1014, 1015, 1017,
     1019, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1022, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1025, 1026, 1027, 1028, 1029,
     1030, 1031, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041,
     1042, 1043, 1044, 1045, 1045, 1045, 1046, 1046, 1046, 1046,

     1046, 1046, 1046, 1048, 1049, 1049, 1049, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1051, 1051, 1053,
     1055, 1057, 1059, 1061, 1063, 1065, 1067, 1069, 1071, 1073,
     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073,
     1073, 1073, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080,
     1081, 1082, 1083, 1084, 1085, 1086, 1087, 1089, 1090, 1091,
     1091, 1091, 1091, 1091, 1091, 1091, 1092, 1092, 1094, 1094,
     1094, 1094, 1094, 1094, 1095, 1095, 1095, 1095, 1095, 1095,
     1097, 1099, 1101, 1103, 1105, 1107, 1109, 1111, 1113, 1115,
     1117, 1119, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126,

     1128, 1129, 1130, 1132, 1133, 1134, 1135, 1136, 1137, 1137,
     1137, 1138, 1138, 1139, 1140, 1141, 1141, 1141, 1141, 1142,
     1143, 1143, 1143, 1143, 1143, 1143, 1143, 1145, 1146, 1147,
     1148, 1149, 1150, 1151, 1152, 1154, 1156, 1157, 1159, 1160,
     1162, 1163, 1164, 1165, 1165, 1166, 1167, 1167, 1167, 1167,
     1167, 1167, 1167, 1167, 1168, 1169, 1170, 1172, 1173, 1174,
     1175, 1176, 1178, 1179, 1180, 1181, 1182, 1182, 1182, 1182,
     1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1192,
     1193, 1193, 1194, 1194, 1195, 1196, 1197, 1198, 1199, 1201,
     1202, 1203, 1204, 1205, 1206, 1208, 1210, 1211, 1212, 1213,

     1215, 1217, 1218, 1219, 1221, 1223, 1223
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    6,    7,    8,    9,    1,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   19,   19,
       19,   19,   19,   19,   20,   21,   22,   23,    1,   24,
       25,   26,   27,    1,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   50,   51,   52,   44,
       53,   54,   55,   56,   57,    1,   58,   59,   60,   61,

       62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
       72,   73,   44,   74,   75,   76,   77,   78,   79,   80,
       81,   44,   82,   83,   84,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[85] =
    {   0,
        1,    1,    2,    1,    3,    4,    1,    1,    1,    5,
        1,    6,    1,    7,    1,    8,    1,    5,    9,    9,
        9,    9,   10,    1,    1,    1,    1,   11,   11,   11,
       11,   11,   11,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   13,   14,   15,    1,   16,   11,   11,   11,
       11,   11,   11,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,    5,    1,   17
    } ;

static yyconst flex_int16_t yy_base[1201] =
    {   0,
        0,   84,  167,  250,  171,  184,  174,  179,  192,  233,
      196,  200,  334,    0, 3343, 3340,  203,  416,  206,  211,
      187,  216,  276,  417,  500,    0,  210,  223,  421,  427,
      436,  440,  583,  588,  669,    0,  277,  299,  584,  751,
      579,  580,  576,  732,  279,  305,  310,  444, 3378, 3975,
      228, 3975, 3371,    0,  322, 3975, 3358,  423,  827, 3328,
        0, 3975,  755, 3975, 3337, 3975,  448, 3312, 3975, 3975,
     3323, 3291,  222,  408,  444,  764, 3975, 3311,  230, 3289,
     3975, 3975, 3975, 3306,    0, 3306,  164, 3304, 3975, 3236,
     3217, 3975, 3975, 3266,  239,  119, 3215, 3212, 3180,    0,

     3248, 3975, 3243, 3975,  476, 3227, 3222, 3975, 3168,    0,
     3975, 3975, 3975, 3203, 3975,  464, 3975, 3975, 3975, 3186,
     3975,  742, 3975, 3161,  751,  180, 3975, 3975, 3171,    0,
     3149,  757, 3975,    0, 3975, 3149, 3975,  200, 3138,    0,
      429,  241, 3097, 3092, 3975, 3975,  306, 3975,  323, 3975,
     3975, 3126, 3108, 3072, 3069,    0, 3975, 3115, 3975,    0,
     3975,  446, 3975, 3114, 3031, 3098,  435,  371, 3045, 3026,
     3975, 3076, 3975, 3074, 3070,  439,  440, 3975,  578,  751,
      586,  562,  735,  752,    0,  572,  577,  588,  786,  749,
      396,  809,  727,  582,  747,  753,  764,  769,  580, 3975,

     3975, 3067,  588, 3975, 3975, 3053, 3002, 2996, 3975, 3975,
     3975, 3975, 3975, 3975, 3975, 3975, 3975, 3975, 3975,    0,
     3975, 3046, 3975, 3975, 3975, 3018, 2986,  837, 3975, 2998,
        0,  847, 3975, 2997,  817,  777,    0,    0,  891,  903,
      912,  924,    0,  774,    0,  451, 3975,    0,  858, 3975,
     2996, 2914,  472, 3975, 2974, 2953, 3975,  791,  236,  822,
      899, 3975,  275,    0, 2873, 2872, 3975, 2871,  949, 3975,
     2949, 2850, 2918, 2906, 3975,    0, 3975,  796, 3975,    0,
        0, 2925,    0,    0, 2597, 3975, 3975, 3975, 3975,  795,
      794, 3975, 3975,  484,    0, 2597, 3975,  877, 2596, 2594,

     2594, 3975,    0, 3975,  918, 3975, 1005, 3975, 3975, 3975,
     3975,    0, 3975,  611, 3975,    0, 3975,    0,  853,  851,
     3975, 3975,  490, 3975,  608, 3975, 3975, 3975, 3975,    0,
     3975, 3975,  596, 2510, 3975,    0, 3975, 3975, 2588, 3975,
     2581, 3975,  894,  906,    0,  911,  717,  727,  923,  728,
     2571,  882,  930,  889,  902,  916,  917,  940,  928,  923,
      940,  933,    0,  932, 3975,  935,  939,  951,  956, 1059,
      964,  965, 1052,  955,  957, 1099, 2578, 3975, 1078, 3975,
     3975, 3975,    0, 3975, 3975, 3975,  987,    0,    0, 1087,
     3975, 2576, 1132,  985, 1046, 1058,    0, 1058,    0, 1009,

     3975, 1016, 3975, 1057, 3975, 1099, 3975, 1068,  731, 1088,
     1095, 1178, 1244, 1280,  988,    0, 3975, 3975, 2492, 1162,
     3975, 3975, 1081,    0, 1086,    0,    0, 1098, 1105, 1100,
     3975, 1167, 1245, 1246, 1247, 1250, 2539, 1248, 1249, 1258,
     1244, 1251, 1259, 1321, 1233, 1224,    0, 1072, 1228, 1243,
     1261, 1287, 1298, 1289, 1298, 1287,    0, 1299, 1228, 1308,
        0, 1280, 1298, 1307, 1316, 1314, 1316, 2532, 1322, 1337,
     1338, 1340, 1342, 1342, 1348, 1353, 1356, 1347, 1357, 1362,
     1366, 1358, 1353, 1356, 1377, 1366, 1370, 1371, 1367, 1383,
     1384, 1379, 1391, 1392, 1381, 1388, 1397, 1275, 1455, 3975,

     1439, 1463, 1444, 1415, 1412, 1415,    0, 1409,    0, 1429,
     1492, 1558, 1594, 1524, 2449, 1564, 1639, 3975, 3975, 1537,
     1556, 1560, 1407, 2427, 1558, 1563, 1559, 1564, 1572, 1584,
     1574, 1562, 1615, 1619, 1609, 1625, 1626, 1643, 1614, 1651,
     1662, 1658, 1664, 1665, 1616, 1616, 1637, 3975, 3975, 1638,
     1631, 2352, 1634, 1641, 1655, 1650, 1677, 1679, 1671, 1689,
        0,    0, 1690, 1677, 1681, 1697,    0, 2348, 1684, 1694,
     2274, 1686, 1685, 1695,    0, 1692, 1711, 1704, 1703, 1701,
     1713, 1703, 1704, 1712,    0, 1717, 1731, 1731, 1719, 1723,
     1722, 1741, 1726, 1742, 1734, 1747, 1741, 2241, 3975, 1464,

     1485, 1729, 1743, 1740,    0, 1721, 1591, 2173, 1585, 2139,
     1771, 1807, 1417,  962, 1426, 1755, 2049, 1745, 1769, 3975,
     1774, 1782, 1789, 1775, 1796, 1791, 1810, 1800, 1820, 1822,
     1821, 1823, 1832, 1831, 1838, 1840, 1853, 1856, 1854, 1855,
     1863, 1865, 1861, 1846, 1862,    0, 1853, 1864,    0, 1857,
        0, 2008, 1866, 1862, 1869,    0, 1874, 1893, 1870,    0,
     1888, 1875, 1886, 1882, 1880, 1878, 1897, 1876, 1882, 1889,
     1889,    0, 1904, 1895, 1899, 1919,    0, 1907, 1909, 1908,
     1923, 1791, 1924, 1925, 1919, 1747, 1917, 1918, 1918, 1938,
     1924, 1726, 1599, 1927, 1937, 1970, 3975, 1702, 1652, 1923,

     1755, 1941, 1625, 1618, 3975, 3975, 1961, 1977, 1966, 1969,
     1956, 1979, 1983, 1986, 1989, 1984, 1992, 1987, 1994, 1990,
     1988, 1995, 2007, 2004, 2016, 2022, 1996, 2028, 2018, 2026,
        0,    0, 1620, 1990, 2009,    0, 2035, 2020, 2035, 2029,
     2024, 2025, 2029, 1589, 2049, 2041, 2052, 2048, 2053, 2054,
     2044, 2057,    0, 2064,    0, 2048,    0, 1576,    0, 2064,
     2070, 2056,    0, 2096, 2062,    0, 2067, 2108,    0, 1531,
     2072, 2078, 1438, 1853, 3975, 2105, 3975, 2068, 3975, 1463,
     3975, 1407, 1402, 1348, 1345, 1314, 1307, 1269, 1260, 1256,
     1210, 1158, 2106, 2111, 2097, 2118, 2122, 2129, 2125, 2140,

     2131, 2136, 2141, 2143, 2156, 2131, 2138, 2147, 2101, 2151,
     2138, 2153,    0, 2141,    0, 2144, 2165, 2153, 2159, 2158,
     2165,    0, 2165,    0, 2167, 2169,    0, 2178,    0,    0,
        0, 2183, 2167, 2179, 2210, 2178, 2189, 2188, 2189, 2202,
     2186, 2194, 2218, 2196, 2202, 1119, 1114, 2206, 2118, 3975,
     1106, 1100, 1081, 1068, 1065, 1061, 1057,  972,  968,  965,
      914,  925,  893,  881,  874,  869,  865,  861,  854,  843,
      807,  802,  776, 2235, 2212, 2226, 2221, 2227, 2239, 2238,
     2228,    0, 2228, 2239, 2242, 2252,    0, 2238, 2244, 2249,
     2244, 2258, 2263, 2269, 2255, 3975, 2263, 2265, 2265, 2281,

     2265, 2262,    0, 2285, 2288, 2274, 3975, 2277, 2280, 2295,
     2279, 2280, 2283, 2303, 2283, 2330, 3975, 2335, 3975, 3975,
     3975, 3975, 3975, 3975, 3975, 3975, 3975, 3975, 3975,  735,
      612,  608,  598,  441,  374,  261,  245,  202,  152,  149,
      137,  165, 2296, 2303, 2304, 2320, 2326, 2316, 2324, 2329,
     2324, 2316, 2319, 2335, 2324, 2327,    0, 2332, 2328, 2327,
     2332, 2345, 2348, 2352, 2344, 3975, 2338,    0, 2338, 2343,
     2357, 2362, 2357, 3975, 2371, 2356, 2359, 2358, 2380, 3975,
     3975, 3975, 3975, 3975, 3975, 3975, 3975, 3975, 3975, 3975,
     3975,  128, 2384, 2382, 2373, 2387, 2376, 2378, 2378,    0,

     2395, 2396,    0, 2385, 2384, 2405, 2403, 2401, 2405, 2413,
     3975, 2401, 3975, 3975, 3975, 2409, 2416, 2404, 3975, 3975,
     2400, 2422, 2422, 2414, 2417, 2417, 3975, 2421, 2421, 2418,
     2424, 2441, 2442, 2443,    0,    0, 2453,    0, 2436,    0,
     2451, 3975, 3975, 2445, 3975, 3975, 2446, 2457, 2445, 2461,
     2464, 2462, 2468, 2473, 2466, 2460,    0, 2462, 2459, 2461,
     2483,    0, 2463, 3975, 3975, 3975, 2484, 2488, 2476, 2482,
     3975, 2495, 2485, 2497, 2495, 2501, 2506, 2493,    0, 3975,
     2496, 3975, 2508, 2498, 2506, 2503, 2506, 2505,    0, 2520,
     3975, 3975, 2522, 2514,    0,    0, 2529, 2514, 2515,    0,

        0, 2533, 2539,    0,    0, 3975, 2601, 2618, 2635, 2652,
     2669, 2686, 2703, 2720, 2737, 2754, 2771, 2788, 2805, 2822,
     2839, 2856, 2873, 2890, 2907, 2917, 2933, 2942, 2958, 2975,
     2986, 3002, 3019, 3036, 3053, 3063, 3079, 3096, 3113, 3127,
     3137, 3153, 3170, 3187, 3204, 3215, 2009, 3227, 3244, 3254,
     3270, 3287, 3294, 3300, 3316, 3326, 3342, 3359, 3376, 2564,
     3386, 3403, 3420, 3437, 3454, 3471, 3488, 3505, 3522, 3532,
     3548, 3562, 3572, 3588, 3605, 3622, 3639, 3650, 3662, 3679,
     3696, 3713, 3730, 3740, 3749, 3765, 3782, 3799, 2571, 3809,
     3826, 3843, 3860, 3877, 3885, 3890, 3906, 3923, 3940, 3957

    } ;

static yyconst flex_int16_t yy_def[1201] =
    {   0,
     1106, 1106, 1107, 1107, 1108, 1109, 1110, 1110, 1111, 1111,
     1112, 1112, 1106,   13, 1113, 1113, 1114, 1114, 1115, 1115,
     1116, 1116, 1117, 1117, 1106,   25, 1118, 1118, 1119, 1119,
     1120, 1120, 1121, 1121, 1106,   35, 1122, 1122, 1123, 1123,
     1113, 1113, 1113, 1113, 1124, 1124, 1125, 1125, 1106, 1106,
     1106, 1106, 1106, 1126, 1106, 1106, 1106, 1106, 1127, 1106,
     1128, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1129, 1130, 1131, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1132, 1133, 1132, 1134, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1135,

     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1136,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1130, 1106, 1106, 1130, 1137, 1106, 1106, 1106, 1138,
     1106, 1130, 1106, 1139, 1106, 1139, 1106, 1140, 1106, 1141,
     1141, 1141, 1106, 1106, 1106, 1106, 1142, 1106, 1142, 1106,
     1106, 1106, 1106, 1106, 1106, 1143, 1106, 1143, 1106, 1144,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1145, 1106, 1106, 1106, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1147,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1106,

     1106, 1148, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1149,
     1106, 1149, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1150, 1106, 1106, 1106, 1106, 1106, 1151, 1152, 1106, 1106,
     1106, 1106, 1153, 1151, 1154, 1155, 1106, 1156, 1106, 1106,
     1106, 1106, 1157, 1106, 1106, 1106, 1106, 1106, 1158, 1158,
     1159, 1106, 1106, 1160, 1106, 1106, 1106, 1161, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1162, 1106, 1106, 1106, 1163,
     1164, 1164, 1165, 1166, 1167, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1168, 1169, 1106, 1106, 1106, 1106, 1106,

     1106, 1106, 1170, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1171, 1106, 1172, 1106, 1172, 1106, 1173, 1173, 1173,
     1106, 1106, 1174, 1106, 1174, 1106, 1106, 1106, 1106, 1175,
     1106, 1106, 1106, 1106, 1106, 1176, 1106, 1106, 1106, 1106,
     1177, 1106, 1106, 1106, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1106, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1179, 1106, 1106, 1106,
     1106, 1106, 1180, 1106, 1106, 1106, 1106, 1181, 1182, 1183,
     1106, 1106, 1106, 1106, 1106, 1106, 1184, 1181, 1185, 1186,

     1106, 1186, 1106, 1187, 1106, 1187, 1106, 1106, 1188, 1188,
     1188, 1106, 1188, 1188, 1106, 1189, 1106, 1106, 1190, 1106,
     1106, 1106, 1106, 1191, 1106, 1192, 1193, 1106, 1106, 1194,
     1106, 1194, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1196, 1196, 1197, 1106, 1106, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1106, 1106, 1183, 1183, 1106,

     1183, 1183, 1106, 1106, 1106, 1106, 1184, 1198, 1185, 1106,
     1106, 1188,  414,  412,  412, 1188,  414, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1195, 1195, 1195, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1196, 1196, 1106, 1106, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1106, 1106, 1106, 1106, 1106, 1183,

     1183, 1106, 1106, 1106, 1198, 1198, 1198, 1106,  511,  511,
     1188,  414, 1188, 1188, 1188, 1106, 1106, 1106, 1106, 1106,
     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
     1195, 1195, 1195, 1196, 1196, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1106, 1106, 1106,
     1106, 1106, 1199, 1106, 1106, 1198, 1106, 1198, 1106, 1188,

     1188, 1188, 1106, 1106, 1106, 1106, 1195, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
     1196, 1196, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1106, 1178, 1178, 1178, 1106, 1178, 1106,
     1106, 1106, 1106, 1199, 1106, 1199, 1106, 1106, 1106, 1106,
     1106, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,

     1195, 1195, 1195, 1195, 1195, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1106, 1106, 1106, 1106, 1106, 1106, 1178, 1178, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1200, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1106, 1106, 1106, 1106, 1106, 1106, 1106,

     1106, 1106, 1178, 1178, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1200, 1106, 1200, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1195, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1178, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,

     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1106,
     1106, 1106, 1106, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1106, 1106, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,

     1178, 1178, 1178, 1178, 1178,    0, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106

    } ;

static yyconst flex_int16_t yy_nxt[4060] =
    {   0,
       50,   51,   52,   50,   53,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   50,   50,   50,   50,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   50,   50,   50,   50,   55,   56,   50,   57,   50,
       58,   50,   59,   50,   50,   50,   50,   50,   50,   50,

       50,   60,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   50,   50,   50,   50,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   50,   50,   50,   63,   64,
      291,   65,   66,   83,   67,   84,   89,   68,   69,   70,
       70,   89, 1027,   70,   71,   86,   83,  992,   84,   50,
       72,  991,   87,   70,   93,  309,   94,  101,  102,  291,

      103,  101,  102,  990,  103,  113,  989,  114,  119,  315,
      120,  121,  148,  119,  149,  120,  121,  115,   50,   73,
       74,  116,  116,  116,  116,  148,   90,  149,   91,  228,
      229,   90,  230,   91,  309,   93,   95,   94,  276,  124,
      125,   99,  126,   96,   97,  283,   98,  284,   75,   70,
       70,   76,   77,  316,   78,   66,  988,   67,   79,  122,
       68,   69,   70,   70,  122,   95,   70,   71,  124,  125,
      290,  126,   96,   80,  260,  261,   70,   95,  128,  201,
      129,  221,  202,  222,   96,   97,  117,   98,  410,  411,
      223,  130,  320,  415,  415,  203,  203,  203,  203,  987,

      290,  201,   73,   74,  202,   81,   95,  221,  324,  222,
      325,  277,  225,   96,  226,  986,  223,  203,  203,  203,
      203,  320,  227,  232,  233,  324,  234,  325,  131,  132,
      133,   75,   70,   70,  104,  105,  106,  104,  107,  104,
      104,  104,  104,  104,  104,  104,  108,  104,  108,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  109,
      104,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  104,  104,  104,  104,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,

      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  104,  104,  104,  113,  128,
      114,  129,  291,  151,  235,  152,  263,  263,  985,  151,
      115,  152,  130,  153,  116,  116,  116,  116,  157,  153,
      158,  159,  157,  366,  158,  159,  225,  333,  226,  254,
      254,  291,  255,  401,  334,  402,  227,  265,  264,  266,
      319,  236,  267,  267,  267,  267,  290,  343,  344,  131,
      132,  133,  366,  154,  405,  155,  406,  298,  299,  154,
      300,  155,  305,  305,  305,  305,  431,  264,  432,  160,
      319,  236,  324,  160,  325,  984,  290,  343,  344,  117,

      134,  134,  135,  134,  136,  137,  134,  134,  134,  138,
      134,  134,  134,  134,  134,  134,  134,  139,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  141,  140,  140,  140,  140,  140,
      140,  142,  143,  134,  144,  134,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  141,  140,  140,  140,  140,  140,  140,
      142,  145,  134,  146,  162,  163,  205,  164,  206,  162,
      163,  165,  164,  353,  211,  211,  165,  333,  216,  351,

      166,  212,  212,  358,  334,  166,  379,  379,  379,  379,
      324,  217,  325,  352,  213,  213,  346,  359,  347,  360,
      315,  218,  348,  353,  214,  214,  219,  167,  371,  215,
      215,  376,  167,  358,  168,  169,  207,  170,  208,  168,
      169,  217,  170,  352,  213,  213,  346,  359,  347,  360,
      218,  348,  983,  214,  214,  219,  167,  371,  215,  215,
      376,  167,  982,  168,  316,  209,  981,  210,  168,  171,
      172,  173,  171,  174,  175,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  176,  177,
      171,  171,  171,  178,  171,  171,  179,  180,  181,  182,

      183,  184,  185,  186,  187,  185,  185,  188,  189,  190,
      191,  192,  185,  193,  194,  195,  196,  197,  198,  185,
      199,  171,  171,  171,  171,  171,  179,  180,  181,  182,
      183,  184,  185,  186,  187,  185,  185,  188,  189,  190,
      191,  192,  193,  194,  195,  196,  197,  198,  185,  199,
      171,  171,  171,  205,  216,  206,  249,  250,  370,  251,
      263,  263,  452,  252,  354,  269,  270,  217,  271,  263,
      263,  453,  272,  456,  372,  263,  263,  218,  349,  356,
      364,  273,  219,  410,  411,  355,  350,  274,  370,  980,
      365,  452,  264,  373,  354,  374,  375,  217,  941,  357,

      453,  264,  456,  207,  372,  208,  218,  264,  349,  356,
      364,  219,  387,  361,  355,  398,  350,  362,  235,  275,
      365,  264,  408,  373,  940,  374,  375,  425,  357,  939,
      264,  428,  209,  429,  210,  238,  264,  253,  228,  229,
      367,  230,  387,  361,  412,  398,  253,  362,  232,  233,
      368,  234,  408,  369,  239,  236,  240,  425,  240,  249,
      250,  428,  251,  429,  240,  938,  252,  240,  241,  242,
      367,  240,  243,  244,  410,  411,  937,  245,  298,  299,
      368,  300,  369,  936,  239,  236,  240,  935,  240,  445,
      446,  934,  390,  391,  240,  392,  933,  240,  241,  242,

      240,  243,  244,  932,  390,  391,  245,  392,  246,  393,
      393,  393,  393,  390,  391,  931,  392,  413,  413,  445,
      446,  393,  393,  393,  393,  390,  391,  458,  392,  448,
      393,  393,  393,  393,  461,  394,  305,  305,  305,  305,
      253,  449,  393,  393,  393,  393,  450,  930,  462,  414,
      269,  270,  454,  271,  395,  464,  458,  272,  459,  448,
      451,  463,  460,  461,  394,  396,  273,  465,  929,  455,
      466,  449,  274,  468,  467,  469,  450,  462,  414,  470,
      471,  472,  454,  473,  395,  464,  474,  476,  459,  451,
      463,  480,  460,  482,  481,  396,  475,  465,  455,  485,

      466,  486,  468,  467,  275,  469,  262,  262,  470,  471,
      472,  401,  473,  402,  410,  411,  474,  476,  401,  928,
      402,  480,  927,  482,  481,  475,  926,  497,  485,  504,
      486,  253,  433,  434,  435,  436,  437,  437,  438,  437,
      437,  437,  437,  439,  437,  437,  437,  440,  437,  437,
      441,  437,  442,  437,  437,  443,  437,  497,  504,  405,
      444,  406,  433,  434,  435,  436,  437,  437,  438,  437,
      437,  437,  437,  439,  437,  437,  437,  440,  437,  441,
      437,  442,  437,  437,  443,  437,  477,  483,  499,  500,
      478,  501,  505,  506,  484,  479,  379,  379,  379,  379,

      508,  405,  431,  406,  432,  502,  502,  502,  502,  510,
      511,  925,  520,  512,  512,  924,  477,  483,  548,  923,
      478,  505,  922,  506,  484,  479,  487,  521,  488,  522,
      508,  489,  490,  503,  391,  921,  392,  491,  492,  510,
      410,  411,  520,  493,  494,  513,  523,  548,  495,  409,
      393,  393,  393,  393,  920,  496,  487,  521,  488,  522,
      919,  489,  490,  519,  519,  519,  519,  491,  492,  431,
      914,  432,  493,  494,  513,  913,  523,  495,  409,  409,
      861,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,

      409,  409,  409,  409,  409,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      410,  411,  860,  515,  409,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  409,
      409,  409,  516,  516,  546,  547,  524,  524,  524,  524,
      524,  524,  524,  524,  549,  558,  550,  599,  859,  600,
      524,  524,  858,  525,  526,  528,  533,  527,  551,  535,
      530,  857,  529,  534,  546,  547,  410,  411,  517,  517,

      517,  517,  531,  549,  558,  532,  550,  517,  517,  517,
      517,  517,  517,  525,  526,  528,  533,  527,  551,  535,
      530,  529,  552,  534,  560,  553,  554,  555,  556,  856,
      557,  531,  410,  411,  532,  559,  855,  517,  517,  517,
      517,  517,  517, 1106,  561,  562,  563,  565,  536,  537,
      538,  539,  552,  560,  540,  553,  554,  555,  556,  541,
      557,  564,  567,  542,  568,  559,  543,  854,  544,  569,
      853,  545,  570,  561,  571,  562,  563,  565,  536,  537,
      538,  539,  572,  573,  540,  574,  575,  576,  577,  541,
      564,  578,  567,  542,  568,  543,  581,  544,  582,  569,

      545,  579,  570,  583,  571,  584,  585,  580,  586,  587,
      606,  588,  572,  573,  589,  574,  575,  576,  577,  590,
      591,  578,  592,  593,  852,  594,  581,  582,  598,  851,
      595,  579,  583,  596,  597,  584,  585,  580,  586,  587,
      588,  500,  602,  600,  589,  503,  391,  603,  392,  590,
      591,  619,  592,  593,  594,  604,  499,  500,  598,  501,
      595,  608,  596,  597,  601,  500,  599,  501,  600,  410,
      411,  259,  602,  502,  502,  502,  502,  603,  410,  411,
      619,  502,  502,  502,  502,  604,  601,  500,  850,  501,
      607,  608,  409,  409,  848,  409,  409,  409,  409,  409,

      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  409,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  410,  411,  613,  610,  409,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  409,  409,  409,  611,  611,  616,  409,
      524,  524,  614,  614,  524,  524,  524,  845,  617,  618,
      623,  828,  696,  697,  524,  698,  524,  625,  621,  626,

      622,  775,  629,  776,  817,  624,  524,  700,  616,  628,
      410,  411,  612,  612,  612,  612,  410,  411,  617,  618,
      623,  612,  612,  612,  612,  612,  612,  625,  621,  626,
      622,  524,  629,  627,  624,  806,  524,  524,  524,  628,
      409,  524,  630,  781,  632,  644,  643,  524,  524,  636,
      780,  612,  612,  612,  612,  612,  612,  615,  615,  615,
      615,  631,  627,  633,  634,  524,  615,  615,  615,  615,
      615,  615,  630,  524,  632,  644,  643,  779,  646,  636,
      524,  645,  647,  635,  524,  649,  524,  524,  650,  651,
      652,  631,  653,  633,  634,  637,  615,  615,  615,  615,

      615,  615,  639,  638,  697,  640,  641,  642,  646,  654,
      645,  647,  656,  635,  649,  655,  658,  650,  657,  651,
      652,  659,  606,  660,  637,  661,  662,  692,  664,  665,
      669,  639,  667,  638,  640,  668,  641,  642,  670,  654,
      671,  672,  656,  673,  675,  655,  658,  657,  674,  676,
      677,  659,  660,  678,  661,  679,  662,  664,  680,  665,
      669,  667,  681,  683,  668,  682,  684,  670,  685,  687,
      671,  672,  686,  673,  675,  688,  690,  674,  676,  677,
      693,  689,  691,  678,  694,  679,  695,  703,  680,  701,
      701,  705,  681,  683,  682,  684,  524,  524,  685,  687,

      706,  686,  607,  768,  524,  688,  690,  410,  411,  693,
      689,  524,  691,  524,  694,  695,  708,  703,  524,  710,
      705,  707,  524,  410,  411,  702,  702,  702,  702,  709,
      706,  711,  524,  712,  702,  702,  702,  702,  702,  702,
      714,  713,  524,  524,  524,  524,  708,  764,  710,  715,
      707,  716,  717,  524,  524,  775,  718,  776,  721,  709,
      524,  711,  524,  712,  702,  702,  702,  702,  702,  702,
      714,  713,  719,  723,  720,  524,  524,  524,  524,  715,
      724,  716,  717,  524,  722,  524,  718,  524,  721,  726,
      728,  752,  731,  732,  734,  727,  730,  748,  733,  736,

      741,  738,  719,  723,  720,  725,  735,  729,  743,  740,
      724,  739,  742,  722,  744,  745,  746,  747,  749,  726,
      728,  731,  750,  732,  734,  727,  730,  733,  751,  736,
      741,  738,  753,  754,  725,  755,  735,  729,  740,  756,
      739,  757,  742,  744,  758,  745,  746,  747,  749,  759,
      761,  750,  760,  762,  763,  765,  766,  767,  751,  769,
      770,  753,  754,  771,  755,  772,  773,  777,  778,  756,
      757,  696,  697,  758,  698,  410,  411,  409,  524,  759,
      761,  760,  762,  524,  763,  765,  766,  767,  524,  769,
      770,  524,  771,  410,  411,  772,  773,  777,  778,  524,

      782,  524,  786,  784,  783,  524,  524,  785,  524,  524,
      524,  524,  524,  787,  524,  791,  524,  524,  524,  363,
      363,  807,  793,  737,  795,  802,  524,  788,  796,  524,
      782,  786,  789,  784,  783,  790,  792,  785,  524,  797,
      524,  794,  798,  787,  524,  791,  799,  800,  524,  804,
      524,  807,  793,  808,  795,  802,  788,  803,  796,  805,
      811,  789,  801,  809,  790,  792,  812,  813,  797,  814,
      794,  815,  798,  810,  704,  816,  799,  800,  818,  804,
      819,  820,  808,  821,  822,  823,  825,  803,  824,  805,
      811,  826,  801,  809,  827,  829,  812,  813,  814,  830,

      815,  831,  838,  810,  816,  839,  846,  775,  818,  776,
      819,  820,  849,  821,  822,  823,  825,  824,  847,  524,
      917,  826,  918,  827,  864,  829,  832,  833,  524,  830,
      831,  834,  838,  524,  835,  839,  846,  836,  840,  841,
      524,  849,  837,  842,  524,  878,  843,  524,  847,  844,
      863,  524,  862,  524,  864,  865,  832,  833,  524,  868,
      866,  834,  524,  524,  835,  524,  875,  836,  840,  841,
      876,  837,  872,  842,  878,  867,  843,  870,  524,  844,
      863,  862,  871,  880,  869,  865,  882,  873,  877,  868,
      866,  874,  879,  881,  409,  883,  875,  884,  699,  885,

      876,  886,  872,  887,  867,  888,  870,  889,  890,  891,
      892,  871,  880,  869,  894,  882,  873,  895,  877,  896,
      902,  874,  879,  881,  883,  901,  893,  884,  885,  903,
      904,  886,  887,  905,  907,  888,  906,  889,  890,  891,
      892,  897,  692,  911,  894,  898,  895,  912,  899,  896,
      902,  915,  943,  908,  901,  893,  909,  524,  900,  903,
      904,  944,  946,  905,  907,  906,  910,  945,  947,  948,
      950,  897,  911,  949,  951,  898,  912,  952,  899,  953,
      915,  942,  943,  908,  954,  955,  909,  900,  956,  666,
      957,  944,  946,  958,  959,  910,  945,  960,  947,  948,

      950,  961,  949,  962,  951,  963,  964,  952,  965,  953,
      942,  966,  967,  954,  968,  955,  969,  971,  956,  957,
      970,  972,  973,  958,  959,  974,  975,  960,  976,  979,
      961,  977,  917,  962,  918,  963,  964,  917,  965,  918,
      966,  967,  993,  994,  968,  995,  969,  971,  978,  970,
      996,  972,  973,  997,  974,  975,  998,  976,  979,  999,
     1000,  977, 1001,  663, 1002, 1003, 1004,  648, 1005, 1006,
     1007,  993, 1008,  994, 1009,  995, 1010,  978, 1011, 1012,
      996, 1013, 1014,  997, 1015, 1016,  998, 1017, 1018,  999,
     1000, 1019, 1001, 1002, 1003, 1020, 1004, 1005, 1021, 1006,

     1007, 1008, 1022, 1009, 1025, 1010, 1023, 1026, 1011, 1012,
     1024, 1013, 1014, 1015, 1016, 1028, 1017, 1029, 1018, 1030,
     1031, 1019, 1032, 1033, 1034, 1020, 1035, 1036, 1021, 1037,
     1038, 1022, 1039, 1025, 1040, 1023, 1041, 1026, 1042, 1024,
     1043, 1044, 1045, 1046, 1047, 1028, 1048, 1029, 1030, 1049,
     1031, 1032, 1033, 1034, 1050, 1057, 1035, 1036, 1037, 1038,
     1051, 1052, 1039, 1053, 1040, 1054, 1041, 1055, 1042, 1056,
     1043, 1044, 1045, 1046, 1047, 1048, 1058, 1059, 1060, 1049,
     1061,  620, 1062, 1063, 1050, 1057, 1064, 1065, 1066, 1051,
     1052, 1067, 1053, 1068, 1054, 1069, 1055, 1070, 1056, 1071,

     1072, 1073, 1074, 1075,  409, 1076, 1058, 1059, 1060, 1077,
     1061, 1062, 1078, 1063, 1079, 1080, 1064, 1065, 1066, 1081,
     1067, 1082, 1083, 1068, 1084, 1069, 1085, 1070, 1086, 1071,
     1072, 1073, 1074, 1075, 1076, 1087, 1088, 1089, 1077, 1090,
     1091, 1092, 1078, 1079, 1093, 1080, 1094,  566, 1095, 1081,
     1082, 1096, 1083, 1097, 1084, 1098, 1085, 1099, 1086, 1100,
     1101,  524, 1102, 1103, 1104, 1087, 1088, 1089, 1090, 1091,
     1105, 1092,  416, 1093,  416,  420, 1094, 1095,  391,  518,
     1096,  518, 1097,  378,  457, 1098,  342, 1099, 1100,  339,
     1101, 1102, 1103,  336, 1104,  301,  299,  301,  296,  286,

     1105,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,

      100,  100,  100,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,

      147,  147,  147,  147,  147,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,

      220,  220,  220,  220,  220,  220,  220,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  231,  231,  282,  231,  231,  423,
      422,  421,  231,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  248,
      248,  270,  248,  248,  420,  418,  417,  248,  259,  407,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  262,  254,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  268,  268,  268,  403,  268,  268,  250,  233,

      229,  268,  280,  386,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  281,
      385,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  384,  285,
      382,  285,  285,  295,  381,  380,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      303,  303,  378,  303,  303,  342,  340,  339,  303,  308,
      338,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  311,  337,  311,  311,

      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      317,  311,  311,  312,  336,  312,  335,  331,  312,  312,
      312,  312,  312,  329,  328,  327,  312,  314,  326,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  318,  318,  322,  318,  318,  321,
      317,  313,  318,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      330,  307,  330,  310,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  307,  330,  330,  330,  332,  306,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,

      332,  332,  332,  332,  341,  304,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  345,  345,  302,  299,  345,  345,  377,  301,  377,
      377,  377,  377,  377,  377,  377,  377,  377,  377,  377,
      377,  377,  377,  377,  383,  297,  383,  383,  383,  296,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  231,  231,  294,  231,  231,  293,  292,  289,  231,
      388,  288,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  389,  287,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,

      389,  389,  389,  389,  397,  397,  286,  282,  279,  397,
      399,  399,  278,  270,  258,  399,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  248,  248,  257,  248,  248,  256,  250,
      247,  248,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  409,
      233,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  229,  409,  409,  259, 1106,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  419,  419,  111,  419,  419,  111, 1106,

     1106,  419,  419,  424, 1106,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      280, 1106,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  281, 1106,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  426, 1106,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  427, 1106,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,

     1106,  285, 1106,  285,  285,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  295, 1106, 1106,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  303,
      303, 1106,  303,  303, 1106, 1106, 1106,  303,  312, 1106,
      312, 1106, 1106,  312,  312,  312,  312,  312, 1106, 1106,
     1106,  312,  314, 1106,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  318,
      318, 1106,  318,  318, 1106, 1106, 1106,  318,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,

      323,  323,  323,  323,  323,  330, 1106,  330, 1106,  330,
      330,  330,  330,  330,  330,  330,  330,  330, 1106,  330,
      330,  330,  447, 1106,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  341,
     1106,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  345,  345, 1106, 1106,
      345,  345,  377, 1106,  377,  377,  377,  377,  377,  377,
      377,  377,  377,  377,  377,  377,  377,  377,  377,  383,
     1106,  383,  383,  383, 1106,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  388, 1106,  388,  388,

      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  389, 1106,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  507,  507, 1106,
      507,  507, 1106, 1106, 1106,  507,  509,  509, 1106,  509,
      509, 1106, 1106, 1106,  509,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  409,

     1106,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  409, 1106,  409,  409,  419,  419, 1106,  419,
      419, 1106, 1106, 1106,  419,  419,  424, 1106,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  426, 1106,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      427, 1106,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  437,  437,  437,  318,  318, 1106,

      318,  318, 1106, 1106, 1106,  318,  447, 1106,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  605, 1106,  605,  605,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  605,  605,  605,  605,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,   49, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,

     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106
    } ;

static yyconst flex_int16_t yy_chk[4060] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    3,    3,
       96,    3,    3,    5,    3,    5,    7,    3,    3,    3,
        3,    8,  992,    3,    3,    6,    6,  942,    6,   21,
        3,  941,    6,    3,    9,  126,    9,   11,   11,   96,

       11,   12,   12,  940,   12,   17,  939,   17,   19,  138,
       19,   19,   27,   20,   27,   20,   20,   17,   22,    3,
        3,   17,   17,   17,   17,   28,    7,   28,    7,   51,
       51,    8,   51,    8,  126,   10,    9,   10,   79,   21,
       21,   10,   21,    9,    9,   87,    9,   87,    3,    3,
        3,    4,    4,  138,    4,    4,  938,    4,    4,   19,
        4,    4,    4,    4,   20,    9,    4,    4,   22,   22,
       95,   22,    9,    4,   73,   73,    4,   10,   23,   37,
       23,   45,   37,   45,   10,   10,   17,   10,  259,  259,
       45,   23,  142,  263,  263,   37,   37,   37,   37,  937,

       95,   38,    4,    4,   38,    4,   10,   46,  147,   46,
      147,   79,   47,   10,   47,  936,   46,   38,   38,   38,
       38,  142,   47,   55,   55,  149,   55,  149,   23,   23,
       23,    4,    4,    4,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   18,   24,
       18,   24,  168,   29,   58,   29,   74,   74,  935,   30,
       18,   30,   24,   29,   18,   18,   18,   18,   31,   30,
       31,   31,   32,  191,   32,   32,   48,  162,   48,   67,
       67,  168,   67,  246,  162,  246,   48,   75,   74,   75,
      141,   58,   75,   75,   75,   75,  167,  176,  177,   24,
       24,   24,  191,   29,  253,   29,  253,  105,  105,   30,
      105,   30,  116,  116,  116,  116,  294,   74,  294,   31,
      141,   58,  323,   32,  323,  934,  167,  176,  177,   18,

       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   33,   33,   39,   33,   39,   34,
       34,   33,   34,  182,   41,   42,   34,  333,   43,  181,

       33,   41,   42,  186,  333,   34,  203,  203,  203,  203,
      325,   43,  325,  181,   41,   42,  179,  187,  179,  188,
      314,   43,  179,  182,   41,   42,   43,   33,  194,   41,
       42,  199,   34,  186,   33,   33,   39,   33,   39,   34,
       34,   43,   34,  181,   41,   42,  179,  187,  179,  188,
       43,  179,  933,   41,   42,   43,   33,  194,   41,   42,
      199,   34,  932,   33,  314,   39,  931,   39,   34,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,

       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   40,   44,   40,   63,   63,  193,   63,
      122,  122,  347,   63,  183,   76,   76,   44,   76,  125,
      125,  348,   76,  350,  195,  132,  132,   44,  180,  184,
      190,   76,   44,  409,  409,  183,  180,   76,  193,  930,
      190,  347,  122,  196,  183,  197,  198,   44,  873,  184,

      348,  125,  350,   40,  195,   40,   44,  132,  180,  184,
      190,   44,  236,  189,  183,  244,  180,  189,  235,   76,
      190,  122,  258,  196,  872,  197,  198,  278,  184,  871,
      125,  290,   40,  291,   40,   59,  132,   63,  228,  228,
      192,  228,  236,  189,  260,  244,   76,  189,  232,  232,
      192,  232,  258,  192,   59,  235,   59,  278,   59,  249,
      249,  290,  249,  291,   59,  870,  249,   59,   59,   59,
      192,   59,   59,   59,  260,  260,  869,   59,  298,  298,
      192,  298,  192,  868,   59,  235,   59,  867,   59,  319,
      320,  866,  239,  239,   59,  239,  865,   59,   59,   59,

       59,   59,   59,  864,  240,  240,   59,  240,   59,  239,
      239,  239,  239,  241,  241,  863,  241,  261,  261,  319,
      320,  240,  240,  240,  240,  242,  242,  352,  242,  343,
      241,  241,  241,  241,  354,  239,  305,  305,  305,  305,
      249,  344,  242,  242,  242,  242,  346,  862,  355,  261,
      269,  269,  349,  269,  241,  357,  352,  269,  353,  343,
      346,  356,  353,  354,  239,  242,  269,  358,  861,  349,
      359,  344,  269,  360,  359,  361,  346,  355,  261,  362,
      364,  366,  349,  367,  241,  357,  368,  369,  353,  346,
      356,  371,  353,  372,  371,  242,  368,  358,  349,  374,

      359,  375,  360,  359,  269,  361,  415,  415,  362,  364,
      366,  400,  367,  400,  614,  614,  368,  369,  402,  860,
      402,  371,  859,  372,  371,  368,  858,  387,  374,  394,
      375,  269,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  387,  394,  404,
      307,  404,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  370,  373,  390,  390,
      370,  390,  395,  396,  373,  370,  379,  379,  379,  379,

      398,  406,  430,  406,  430,  390,  390,  390,  390,  408,
      410,  857,  423,  411,  411,  856,  370,  373,  448,  855,
      370,  395,  854,  396,  373,  370,  376,  425,  376,  428,
      398,  376,  376,  393,  393,  853,  393,  376,  376,  408,
      410,  410,  423,  376,  376,  411,  429,  448,  376,  411,
      393,  393,  393,  393,  852,  376,  376,  425,  376,  428,
      851,  376,  376,  420,  420,  420,  420,  376,  376,  432,
      847,  432,  376,  376,  411,  846,  429,  376,  412,  412,
      792,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,

      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  791,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  413,  413,  445,  446,  441,  433,  434,  435,
      438,  439,  436,  442,  449,  459,  450,  498,  790,  498,
      440,  443,  789,  433,  434,  436,  441,  435,  451,  443,
      439,  788,  438,  442,  445,  446,  413,  413,  414,  414,

      414,  414,  440,  449,  459,  440,  450,  414,  414,  414,
      414,  414,  414,  433,  434,  436,  441,  435,  451,  443,
      439,  438,  452,  442,  462,  453,  454,  455,  456,  787,
      458,  440,  414,  414,  440,  460,  786,  414,  414,  414,
      414,  414,  414,  444,  463,  464,  465,  467,  444,  444,
      444,  444,  452,  462,  444,  453,  454,  455,  456,  444,
      458,  466,  469,  444,  470,  460,  444,  785,  444,  471,
      784,  444,  472,  463,  473,  464,  465,  467,  444,  444,
      444,  444,  474,  475,  444,  476,  477,  478,  479,  444,
      466,  480,  469,  444,  470,  444,  482,  444,  483,  471,

      444,  481,  472,  484,  473,  485,  486,  481,  487,  488,
      508,  489,  474,  475,  490,  476,  477,  478,  479,  491,
      492,  480,  493,  494,  783,  495,  482,  483,  497,  782,
      496,  481,  484,  496,  496,  485,  486,  481,  487,  488,
      489,  501,  504,  501,  490,  503,  503,  505,  503,  491,
      492,  523,  493,  494,  495,  506,  499,  499,  497,  499,
      496,  510,  496,  496,  502,  502,  600,  502,  600,  613,
      613,  613,  504,  499,  499,  499,  499,  505,  615,  615,
      523,  502,  502,  502,  502,  506,  601,  601,  780,  601,
      508,  510,  511,  511,  773,  511,  511,  511,  511,  511,

      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  514,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  512,  512,  520,  514,
      525,  527,  516,  516,  532,  526,  528,  770,  521,  522,
      526,  758,  607,  607,  529,  607,  531,  528,  525,  529,

      525,  693,  532,  693,  744,  527,  530,  609,  520,  531,
      512,  512,  513,  513,  513,  513,  516,  516,  521,  522,
      526,  513,  513,  513,  513,  513,  513,  528,  525,  529,
      525,  535,  532,  530,  527,  733,  539,  533,  545,  531,
      609,  534,  533,  704,  535,  546,  545,  536,  537,  539,
      703,  513,  513,  513,  513,  513,  513,  517,  517,  517,
      517,  534,  530,  536,  537,  538,  517,  517,  517,  517,
      517,  517,  533,  540,  535,  546,  545,  699,  550,  539,
      542,  547,  551,  538,  541,  553,  543,  544,  554,  555,
      556,  534,  557,  536,  537,  540,  517,  517,  517,  517,

      517,  517,  542,  541,  698,  542,  543,  544,  550,  557,
      547,  551,  558,  538,  553,  557,  560,  554,  559,  555,
      556,  563,  606,  564,  540,  565,  566,  692,  569,  570,
      574,  542,  572,  541,  542,  573,  543,  544,  576,  557,
      577,  578,  558,  579,  581,  557,  560,  559,  580,  582,
      583,  563,  564,  584,  565,  586,  566,  569,  587,  570,
      574,  572,  588,  590,  573,  589,  591,  576,  592,  594,
      577,  578,  593,  579,  581,  595,  596,  580,  582,  583,
      602,  595,  597,  584,  603,  586,  604,  616,  587,  611,
      611,  618,  588,  590,  589,  591,  621,  624,  592,  594,

      619,  593,  606,  686,  622,  595,  596,  701,  701,  602,
      595,  623,  597,  626,  603,  604,  622,  616,  625,  624,
      618,  621,  628,  611,  611,  612,  612,  612,  612,  623,
      619,  625,  627,  626,  612,  612,  612,  612,  612,  612,
      628,  627,  629,  631,  630,  632,  622,  682,  624,  629,
      621,  630,  631,  634,  633,  774,  632,  774,  634,  623,
      635,  625,  636,  626,  612,  612,  612,  612,  612,  612,
      628,  627,  633,  636,  633,  637,  639,  640,  638,  629,
      637,  630,  631,  643,  635,  641,  632,  642,  634,  639,
      641,  668,  644,  645,  648,  640,  643,  664,  647,  650,

      655,  653,  633,  636,  633,  638,  648,  642,  658,  654,
      637,  653,  657,  635,  659,  661,  662,  663,  665,  639,
      641,  644,  666,  645,  648,  640,  643,  647,  667,  650,
      655,  653,  669,  670,  638,  671,  648,  642,  654,  673,
      653,  674,  657,  659,  675,  661,  662,  663,  665,  676,
      679,  666,  678,  680,  681,  683,  684,  685,  667,  687,
      688,  669,  670,  689,  671,  690,  691,  694,  695,  673,
      674,  696,  696,  675,  696,  700,  700,  700,  711,  676,
      679,  678,  680,  707,  681,  683,  684,  685,  709,  687,
      688,  710,  689,  702,  702,  690,  691,  694,  695,  708,

      707,  712,  711,  709,  708,  713,  716,  710,  714,  718,
      721,  715,  720,  712,  717,  716,  719,  722,  727, 1147,
     1147,  734,  718,  652,  720,  727,  724,  713,  721,  723,
      707,  711,  714,  709,  708,  715,  717,  710,  725,  722,
      729,  719,  723,  712,  726,  716,  724,  725,  730,  729,
      728,  734,  718,  735,  720,  727,  713,  728,  721,  730,
      738,  714,  726,  737,  715,  717,  739,  740,  722,  741,
      719,  742,  723,  737,  617,  743,  724,  725,  745,  729,
      746,  747,  735,  748,  749,  750,  752,  728,  751,  730,
      738,  754,  726,  737,  756,  760,  739,  740,  741,  761,

      742,  762,  765,  737,  743,  767,  771,  776,  745,  776,
      746,  747,  778,  748,  749,  750,  752,  751,  772,  795,
      849,  754,  849,  756,  795,  760,  764,  764,  793,  761,
      762,  764,  765,  794,  764,  767,  771,  764,  768,  768,
      796,  778,  764,  768,  797,  809,  768,  799,  772,  768,
      794,  798,  793,  801,  795,  796,  764,  764,  802,  799,
      797,  764,  800,  803,  764,  804,  806,  764,  768,  768,
      807,  764,  803,  768,  809,  798,  768,  801,  805,  768,
      794,  793,  802,  811,  800,  796,  814,  804,  808,  799,
      797,  805,  810,  812,  610,  816,  806,  817,  608,  818,

      807,  819,  803,  820,  798,  821,  801,  823,  825,  826,
      828,  802,  811,  800,  832,  814,  804,  833,  808,  834,
      837,  805,  810,  812,  816,  836,  828,  817,  818,  838,
      839,  819,  820,  840,  842,  821,  841,  823,  825,  826,
      828,  835,  598,  844,  832,  835,  833,  845,  835,  834,
      837,  848,  875,  843,  836,  828,  843,  874,  835,  838,
      839,  876,  878,  840,  842,  841,  843,  877,  879,  880,
      883,  835,  844,  881,  884,  835,  845,  885,  835,  886,
      848,  874,  875,  843,  888,  889,  843,  835,  890,  571,
      891,  876,  878,  892,  893,  843,  877,  894,  879,  880,

      883,  895,  881,  897,  884,  898,  899,  885,  900,  886,
      874,  901,  902,  888,  904,  889,  905,  908,  890,  891,
      906,  909,  910,  892,  893,  911,  912,  894,  913,  915,
      895,  914,  916,  897,  916,  898,  899,  918,  900,  918,
      901,  902,  943,  944,  904,  945,  905,  908,  914,  906,
      946,  909,  910,  947,  911,  912,  948,  913,  915,  949,
      950,  914,  951,  568,  952,  953,  954,  552,  955,  956,
      958,  943,  959,  944,  960,  945,  961,  914,  962,  963,
      946,  964,  965,  947,  967,  969,  948,  970,  971,  949,
      950,  972,  951,  952,  953,  973,  954,  955,  975,  956,

      958,  959,  976,  960,  978,  961,  977,  979,  962,  963,
      977,  964,  965,  967,  969,  993,  970,  994,  971,  995,
      996,  972,  997,  998,  999,  973, 1001, 1002,  975, 1004,
     1005,  976, 1006,  978, 1007,  977, 1008,  979, 1009,  977,
     1010, 1012, 1016, 1017, 1018,  993, 1021,  994,  995, 1022,
      996,  997,  998,  999, 1023, 1031, 1001, 1002, 1004, 1005,
     1024, 1025, 1006, 1026, 1007, 1028, 1008, 1029, 1009, 1030,
     1010, 1012, 1016, 1017, 1018, 1021, 1032, 1033, 1034, 1022,
     1037,  524, 1039, 1041, 1023, 1031, 1044, 1047, 1048, 1024,
     1025, 1049, 1026, 1050, 1028, 1051, 1029, 1052, 1030, 1053,

     1054, 1055, 1056, 1058,  515, 1059, 1032, 1033, 1034, 1060,
     1037, 1039, 1061, 1041, 1063, 1067, 1044, 1047, 1048, 1068,
     1049, 1069, 1070, 1050, 1072, 1051, 1073, 1052, 1074, 1053,
     1054, 1055, 1056, 1058, 1059, 1075, 1076, 1077, 1060, 1078,
     1081, 1083, 1061, 1063, 1084, 1067, 1085,  468, 1086, 1068,
     1069, 1087, 1070, 1088, 1072, 1090, 1073, 1093, 1074, 1094,
     1097,  437, 1098, 1099, 1102, 1075, 1076, 1077, 1078, 1081,
     1103, 1083, 1160, 1084, 1160,  419, 1085, 1086,  392, 1189,
     1087, 1189, 1088,  377,  351, 1090,  341, 1093, 1094,  339,
     1097, 1098, 1099,  334, 1102,  301,  300,  299,  296,  285,

     1103, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107,
     1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1109, 1109, 1109, 1109, 1109,
     1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109,
     1109, 1109, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1112, 1112, 1112, 1112,
     1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112,

     1112, 1112, 1112, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
     1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114,
     1114, 1114, 1114, 1114, 1114, 1114, 1114, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117,
     1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,

     1118, 1118, 1118, 1118, 1118, 1119, 1119, 1119, 1119, 1119,
     1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119,
     1119, 1119, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1121,
     1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121,
     1121, 1121, 1121, 1121, 1121, 1121, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1123, 1123, 1123, 1123, 1123, 1123, 1123,
     1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123,
     1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124,

     1124, 1124, 1124, 1124, 1124, 1124, 1124, 1125, 1125, 1125,
     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125,
     1125, 1125, 1125, 1125, 1126, 1126,  282, 1126, 1126,  274,
      273,  272, 1126, 1127, 1127, 1127, 1127, 1127, 1127, 1127,
     1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1128,
     1128,  271, 1128, 1128,  268,  266,  265, 1128, 1129,  256,
     1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129,
     1129, 1129, 1129, 1129, 1129, 1130,  255, 1130, 1130, 1130,
     1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130,
     1130, 1130, 1131, 1131, 1131,  252, 1131, 1131,  251,  234,

      230, 1131, 1132,  227, 1132, 1132, 1132, 1132, 1132, 1132,
     1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1133,
      226, 1133, 1133, 1133, 1133, 1133, 1133, 1133, 1133, 1133,
     1133, 1133, 1133, 1133, 1133, 1133, 1134, 1134, 1134, 1134,
     1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134,  222, 1134,
      208, 1134, 1134, 1135,  207,  206, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1136, 1136,  202, 1136, 1136,  175,  174,  172, 1136, 1137,
      170, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1138,  169, 1138, 1138,

     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
      166, 1138, 1138, 1139,  165, 1139,  164,  158, 1139, 1139,
     1139, 1139, 1139,  155,  154,  153, 1139, 1140,  152, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1141, 1141,  144, 1141, 1141,  143,
      139,  136, 1141, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1143,  131, 1143,  129, 1143, 1143, 1143, 1143, 1143, 1143,
     1143, 1143, 1143,  124, 1143, 1143, 1143, 1144,  120, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,

     1144, 1144, 1144, 1144, 1145,  114, 1145, 1145, 1145, 1145,
     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145,
     1145, 1146, 1146,  109,  107, 1146, 1146, 1148,  106, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1149,  103, 1149, 1149, 1149,  101,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1150, 1150,   99, 1150, 1150,   98,   97,   94, 1150,
     1151,   91, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1152,   90, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,

     1152, 1152, 1152, 1152, 1153, 1153,   88,   86,   84, 1153,
     1154, 1154,   80,   78,   72, 1154, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1156, 1156,   71, 1156, 1156,   68,   65,
       60, 1156, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157,
     1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1158,
       57, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158,   53, 1158, 1158, 1159,   49, 1159, 1159,
     1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159,
     1159, 1159, 1159, 1161, 1161,   16, 1161, 1161,   15,    0,

        0, 1161, 1161, 1162,    0, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1163,    0, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1164,    0, 1164,
     1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164,
     1164, 1164, 1164, 1164, 1165,    0, 1165, 1165, 1165, 1165,
     1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165,
     1165, 1166,    0, 1166, 1166, 1166, 1166, 1166, 1166, 1166,
     1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1167, 1167,
     1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167,

        0, 1167,    0, 1167, 1167, 1168, 1168, 1168, 1168, 1168,
     1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168,
     1168, 1168, 1169,    0,    0, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1170,
     1170,    0, 1170, 1170,    0,    0,    0, 1170, 1171,    0,
     1171,    0,    0, 1171, 1171, 1171, 1171, 1171,    0,    0,
        0, 1171, 1172,    0, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1173,
     1173,    0, 1173, 1173,    0,    0,    0, 1173, 1174, 1174,
     1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,

     1174, 1174, 1174, 1174, 1174, 1175,    0, 1175,    0, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,    0, 1175,
     1175, 1175, 1176,    0, 1176, 1176, 1176, 1176, 1176, 1176,
     1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1177,
        0, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
     1177, 1177, 1177, 1177, 1177, 1177, 1178, 1178,    0,    0,
     1178, 1178, 1179,    0, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1180,
        0, 1180, 1180, 1180,    0, 1180, 1180, 1180, 1180, 1180,
     1180, 1180, 1180, 1180, 1180, 1180, 1181,    0, 1181, 1181,

     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1182,    0, 1182, 1182, 1182, 1182, 1182,
     1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1184, 1184,    0,
     1184, 1184,    0,    0,    0, 1184, 1185, 1185,    0, 1185,
     1185,    0,    0,    0, 1185, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1188,

        0, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188,    0, 1188, 1188, 1190, 1190,    0, 1190,
     1190,    0,    0,    0, 1190, 1190, 1191,    0, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1192,    0, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1193,    0, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1195, 1195, 1195, 1196, 1196,    0,

     1196, 1196,    0,    0,    0, 1196, 1197,    0, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1198,    0, 1198, 1198, 1198, 1198, 1198,
     1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198,
     1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199,
     1199, 1199, 1199, 1199, 1199, 1199, 1199, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,

     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106
    } ;

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
++(yy_lp); \
goto find_rule; \
}

static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "scan.l"
/* scan.l - scanner for flex input -*-C-*- */
#line 4 "scan.l"
/*  Copyright (c) 1990 The Regents of the University of California. */
/*  All rights reserved. */

/*  This code is derived from software contributed to Berkeley by */
/*  Vern Paxson. */

/*  The United States Government has rights in this work pursuant */
/*  to contract no. DE-AC03-76SF00098 between the United States */
/*  Department of Energy and the University of California. */

/*  This file is part of flex. */

/*  Redistribution and use in source and binary forms, with or without */
/*  modification, are permitted provided that the following conditions */
/*  are met: */

/*  1. Redistributions of source code must retain the above copyright */
/*     notice, this list of conditions and the following disclaimer. */
/*  2. Redistributions in binary form must reproduce the above copyright */
/*     notice, this list of conditions and the following disclaimer in the */
/*     documentation and/or other materials provided with the distribution. */

/*  Neither the name of the University nor the names of its contributors */
/*  may be used to endorse or promote products derived from this software */
/*  without specific prior written permission. */

/*  THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR */
/*  IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED */
/*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR */
/*  PURPOSE. */

#include "flexdef.h"
#include "parse.h"
extern bool tablesverify, tablesext;
extern int trlcontxt; /* Set in  parse.y for each rule. */
extern const char *escaped_qstart, *escaped_qend;

#define ACTION_ECHO add_action( yytext )
#define ACTION_IFDEF(def, should_define) \
	{ \
	if ( should_define ) \
		action_define( def, 1 ); \
	}

#define ACTION_ECHO_QSTART add_action (escaped_qstart)
#define ACTION_ECHO_QEND   add_action (escaped_qend)

#define ACTION_M4_IFDEF(def, should_define) \
    do{ \
        if ( should_define ) \
            buf_m4_define( &m4defs_buf, def, NULL);\
        else \
            buf_m4_undefine( &m4defs_buf, def);\
    } while(0)

#define MARK_END_OF_PROLOG mark_prolog();

#define YY_DECL \
	int flexscan()

#define RETURNCHAR \
	yylval = (unsigned char) yytext[0]; \
	return CHAR;

#define RETURNNAME \
	if(yyleng < MAXLINE) \
         { \
	strlcpy( nmstr, yytext, sizeof nmstr ); \
	 } \
	else \
	 { \
	   synerr(_("Input line too long\n")); \
	   FLEX_EXIT(EXIT_FAILURE);  \
	 }  \
	return NAME;

#define PUT_BACK_STRING(str, start) \
	for ( i = strlen( str ) - 1; i >= start; --i ) \
		unput((str)[i])

#define CHECK_REJECT(str) \
	if ( all_upper( str ) ) \
		reject = true;

#define CHECK_YYMORE(str) \
	if ( all_lower( str ) ) \
		yymore_used = true;

#define YY_USER_INIT \
	if ( getenv("POSIXLY_CORRECT") ) \
		posix_compat = true;








#line 1979 "scan.c"

#define INITIAL 0
#define SECT2 1
#define SECT2PROLOG 2
#define SECT3 3
#define CODEBLOCK 4
#define PICKUPDEF 5
#define SC 6
#define CARETISBOL 7
#define NUM 8
#define QUOTE 9
#define FIRSTCCL 10
#define CCL 11
#define ACTION 12
#define RECOVER 13
#define COMMENT 14
#define ACTION_STRING 15
#define PERCENT_BRACE_ACTION 16
#define OPTION 17
#define LINEDIR 18
#define CODEBLOCK_MATCH_BRACE 19
#define GROUP_WITH_PARAMS 20
#define GROUP_MINUS_PARAMS 21
#define EXTENDED_COMMENT 22
#define COMMENT_DISCARD 23

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	{
#line 131 "scan.l"

	static int bracelevel, didadef, indented_code;
	static int doing_rule_action = false;
	static int option_sense;

	int doing_codeblock = false;
	int i, brace_depth=0, brace_start_line=0;
	u_char nmdef[MAXLINE];


#line 2239 "scan.c"

	while ( 1 )		/* loops until end-of-file is reached */
		{
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (yy_c_buf_p) - (yytext_ptr);
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1107 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3975 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
					{
					(yy_full_match) = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */

case 1:
YY_RULE_SETUP
#line 142 "scan.l"
indented_code = true; BEGIN(CODEBLOCK);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 143 "scan.l"
ACTION_ECHO; yy_push_state( COMMENT );
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 144 "scan.l"
yy_push_state( LINEDIR );
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 145 "scan.l"
return SCDECL;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 146 "scan.l"
return XSCDECL;
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 147 "scan.l"
{
			++linenum;
			line_directive_out( (FILE *) 0, 1 );
			indented_code = false;
			BEGIN(CODEBLOCK);
			}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 153 "scan.l"
{
                brace_start_line = linenum;
                ++linenum;
                buf_linedir( &top_buf, infilename?infilename:"<stdin>", linenum);
                brace_depth = 1;
                yy_push_state(CODEBLOCK_MATCH_BRACE);
            }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 161 "scan.l"
synerr( _("malformed '%top' directive") );
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 163 "scan.l"
/* discard */
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 165 "scan.l"
{
			sectnum = 2;
			bracelevel = 0;
			mark_defs1();
			line_directive_out( (FILE *) 0, 1 );
			BEGIN(SECT2PROLOG);
			return SECTEND;
			}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 174 "scan.l"
yytext_is_array = false; ++linenum;
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 175 "scan.l"
yytext_is_array = true; ++linenum;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 177 "scan.l"
BEGIN(OPTION); return OPTION_OP;
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 179 "scan.l"
++linenum; /* ignore */
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 180 "scan.l"
++linenum;	/* ignore */
	YY_BREAK
/* xgettext: no-c-format */
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 183 "scan.l"
synerr( _( "unrecognized '%' directive" ) );
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 185 "scan.l"
{
			if(yyleng < MAXLINE)
        		 {
			strlcpy( nmstr, yytext, sizeof nmstr );
			 }
			else
			 {
			   synerr( _("Definition name too long\n"));
			   FLEX_EXIT(EXIT_FAILURE);
			 }

			didadef = false;
			BEGIN(PICKUPDEF);
			}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 200 "scan.l"
RETURNNAME;
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 201 "scan.l"
++linenum; /* allows blank lines in section 1 */
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 202 "scan.l"
ACTION_ECHO; ++linenum; /* maybe end of comment line */
	YY_BREAK


case 21:
YY_RULE_SETUP
#line 207 "scan.l"
ACTION_ECHO; yy_pop_state();
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 208 "scan.l"
ACTION_ECHO;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 209 "scan.l"
ACTION_ECHO_QSTART;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 210 "scan.l"
ACTION_ECHO_QEND;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 211 "scan.l"
ACTION_ECHO;
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 212 "scan.l"
++linenum; ACTION_ECHO;
	YY_BREAK


/* This is the same as COMMENT, but is discarded rather than output. */
case 27:
YY_RULE_SETUP
#line 217 "scan.l"
yy_pop_state();
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 218 "scan.l"
;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 219 "scan.l"
;
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 220 "scan.l"
++linenum;
	YY_BREAK


case 31:
YY_RULE_SETUP
#line 224 "scan.l"
yy_pop_state();
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 225 "scan.l"
;
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 226 "scan.l"
++linenum;        
	YY_BREAK


case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 230 "scan.l"
yy_pop_state();
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 231 "scan.l"
linenum = myctoi( yytext );
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 233 "scan.l"
{
			free( (void *) infilename );
			infilename = copy_string( yytext + 1 );
			infilename[strlen( infilename ) - 1] = '\0';
			}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 238 "scan.l"
/* ignore spurious characters */
	YY_BREAK


case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 242 "scan.l"
++linenum; BEGIN(INITIAL);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 244 "scan.l"
ACTION_ECHO_QSTART;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 245 "scan.l"
ACTION_ECHO_QEND;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 246 "scan.l"
ACTION_ECHO;
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 248 "scan.l"
{
			++linenum;
			ACTION_ECHO;
			if ( indented_code )
				BEGIN(INITIAL);
			}
	YY_BREAK


case 43:
YY_RULE_SETUP
#line 257 "scan.l"
{
                if( --brace_depth == 0){
                    /* TODO: Matched. */
                    yy_pop_state();
                }else
                    buf_strnappend(&top_buf, yytext, yyleng);
            }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 265 "scan.l"
{
                brace_depth++;
                buf_strnappend(&top_buf, yytext, yyleng);
            }
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 270 "scan.l"
{
                ++linenum;
                buf_strnappend(&top_buf, yytext, yyleng);
            }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 275 "scan.l"
buf_strnappend(&top_buf, escaped_qstart, strlen(escaped_qstart));
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 276 "scan.l"
buf_strnappend(&top_buf, escaped_qend, strlen(escaped_qend));
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 278 "scan.l"
{
                buf_strnappend(&top_buf, yytext, yyleng);
               }
	YY_BREAK
case YY_STATE_EOF(CODEBLOCK_MATCH_BRACE):
#line 282 "scan.l"
{
                linenum = brace_start_line;
                synerr(_("Unmatched '{'"));
                yyterminate();
                }
	YY_BREAK


case 49:
YY_RULE_SETUP
#line 291 "scan.l"
/* separates name and definition */
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 293 "scan.l"
{
 		        if(yyleng < MAXLINE)
 		         {
			strlcpy( (char *) nmdef, yytext, sizeof nmdef );
 		         }
 		        else
 		         {
 		           format_synerr( _("Definition value for {%s} too long\n"), nmstr);
 		           FLEX_EXIT(EXIT_FAILURE);
			 }
			/* Skip trailing whitespace. */
			for ( i = strlen( (char *) nmdef ) - 1;
			      i >= 0 && (nmdef[i] == ' ' || nmdef[i] == '\t');
			      --i )
				;

			nmdef[i + 1] = '\0';

			ndinstal( nmstr, nmdef );
			didadef = true;
			}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 315 "scan.l"
{
			if ( ! didadef )
				synerr( _( "incomplete name definition" ) );
			BEGIN(INITIAL);
			++linenum;
			}
	YY_BREAK


case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 325 "scan.l"
++linenum; BEGIN(INITIAL);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 326 "scan.l"
option_sense = true;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 328 "scan.l"
return '=';
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 330 "scan.l"
option_sense = ! option_sense;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 332 "scan.l"
csize = option_sense ? 128 : 256;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 333 "scan.l"
csize = option_sense ? 256 : 128;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 335 "scan.l"
long_align = option_sense;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 336 "scan.l"
{
			ACTION_M4_IFDEF( "M4""_YY_ALWAYS_INTERACTIVE", option_sense );
            interactive = option_sense;
			}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 340 "scan.l"
yytext_is_array = option_sense;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 341 "scan.l"
ansi_func_defs = option_sense;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 342 "scan.l"
ansi_func_protos = option_sense;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 343 "scan.l"
backing_up_report = option_sense;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 344 "scan.l"
interactive = ! option_sense;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 345 "scan.l"
bison_bridge_lval = option_sense;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 346 "scan.l"
{ if((bison_bridge_lloc = option_sense))
                            bison_bridge_lval = true;
                     }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 349 "scan.l"
C_plus_plus = option_sense;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 350 "scan.l"
sf_set_case_ins(!option_sense);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 351 "scan.l"
sf_set_case_ins(option_sense);
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 352 "scan.l"
ddebug = option_sense;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 353 "scan.l"
spprdflt = ! option_sense;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 354 "scan.l"
useecs = option_sense;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 355 "scan.l"
{
			useecs = usemecs = false;
			use_read = fullspd = true;
			}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 359 "scan.l"
{
			useecs = usemecs = false;
			use_read = fulltbl = true;
			}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 363 "scan.l"
ACTION_IFDEF("YY_NO_INPUT", ! option_sense);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 364 "scan.l"
interactive = option_sense;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 365 "scan.l"
lex_compat = option_sense;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 366 "scan.l"
posix_compat = option_sense;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 367 "scan.l"
{
			ACTION_M4_IFDEF( "M4""_YY_MAIN", option_sense);
            /* Override yywrap */
            if( option_sense == true )
                do_yywrap = false;
			}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 373 "scan.l"
usemecs = option_sense;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 374 "scan.l"
{
			ACTION_M4_IFDEF( "M4""_YY_NEVER_INTERACTIVE", option_sense );
            interactive = !option_sense;
			}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 378 "scan.l"
performance_report += option_sense ? 1 : -1;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 379 "scan.l"
yytext_is_array = ! option_sense;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 380 "scan.l"
use_read = option_sense;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 381 "scan.l"
reentrant = option_sense;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 382 "scan.l"
reject_really_used = option_sense;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 383 "scan.l"
ACTION_M4_IFDEF( "M4""_YY_STACK_USED", option_sense );
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 384 "scan.l"
do_stdinit = option_sense;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 385 "scan.l"
use_stdout = option_sense;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 386 "scan.l"
ACTION_IFDEF("YY_NO_UNISTD_H", ! option_sense);
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 387 "scan.l"
ACTION_M4_IFDEF("M4""_YY_NO_UNPUT", ! option_sense);
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 388 "scan.l"
printstats = option_sense;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 389 "scan.l"
nowarn = ! option_sense;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 390 "scan.l"
do_yylineno = option_sense; ACTION_M4_IFDEF("M4""_YY_USE_LINENO", option_sense);
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 391 "scan.l"
yymore_really_used = option_sense;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 392 "scan.l"
do_yywrap = option_sense;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 394 "scan.l"
ACTION_M4_IFDEF("M4""_YY_NO_PUSH_STATE", ! option_sense);
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 395 "scan.l"
ACTION_M4_IFDEF("M4""_YY_NO_POP_STATE", ! option_sense);
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 396 "scan.l"
ACTION_M4_IFDEF("M4""_YY_NO_TOP_STATE", ! option_sense);
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 398 "scan.l"
ACTION_M4_IFDEF("M4""_YY_NO_SCAN_BUFFER", ! option_sense);
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 399 "scan.l"
ACTION_M4_IFDEF("M4""_YY_NO_SCAN_BYTES", ! option_sense);
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 400 "scan.l"
ACTION_M4_IFDEF("M4""_YY_NO_SCAN_STRING", ! option_sense);
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 402 "scan.l"
ACTION_M4_IFDEF("M4""_YY_NO_FLEX_ALLOC", ! option_sense);
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 403 "scan.l"
ACTION_M4_IFDEF("M4""_YY_NO_FLEX_REALLOC", ! option_sense);
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 404 "scan.l"
ACTION_M4_IFDEF("M4""_YY_NO_FLEX_FREE", ! option_sense);
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 406 "scan.l"
ACTION_M4_IFDEF("M4""_YY_NO_GET_DEBUG", ! option_sense);
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 407 "scan.l"
ACTION_M4_IFDEF("M4""_YY_NO_SET_DEBUG", ! option_sense);
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 408 "scan.l"
ACTION_M4_IFDEF("M4""_YY_NO_GET_EXTRA", ! option_sense);
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 409 "scan.l"
ACTION_M4_IFDEF("M4""_YY_NO_SET_EXTRA", ! option_sense);
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 410 "scan.l"
ACTION_M4_IFDEF("M4""_YY_NO_GET_LENG", ! option_sense);
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 411 "scan.l"
ACTION_M4_IFDEF("M4""_YY_NO_GET_TEXT", ! option_sense);
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 412 "scan.l"
ACTION_M4_IFDEF("M4""_YY_NO_GET_LINENO", ! option_sense);
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 413 "scan.l"
ACTION_M4_IFDEF("M4""_YY_NO_SET_LINENO", ! option_sense);
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 414 "scan.l"
ACTION_M4_IFDEF("M4""_YY_NO_GET_IN", ! option_sense);
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 415 "scan.l"
ACTION_M4_IFDEF("M4""_YY_NO_SET_IN", ! option_sense);
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 416 "scan.l"
ACTION_M4_IFDEF("M4""_YY_NO_GET_OUT", ! option_sense);
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 417 "scan.l"
ACTION_M4_IFDEF("M4""_YY_NO_SET_OUT", ! option_sense);
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 418 "scan.l"
ACTION_M4_IFDEF("M4""_YY_NO_GET_LVAL", ! option_sense);
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 419 "scan.l"
ACTION_M4_IFDEF("M4""_YY_NO_SET_LVAL", ! option_sense);
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 420 "scan.l"
ACTION_M4_IFDEF("M4""_YY_NO_GET_LLOC", ! option_sense);
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 421 "scan.l"
ACTION_M4_IFDEF("M4""_YY_NO_SET_LLOC", ! option_sense);
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 423 "scan.l"
return OPT_EXTRA_TYPE;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 424 "scan.l"
return OPT_OUTFILE;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 425 "scan.l"
return OPT_PREFIX;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 426 "scan.l"
return OPT_YYCLASS;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 427 "scan.l"
return OPT_HEADER;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 428 "scan.l"
return OPT_TABLES;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 429 "scan.l"
{
                    tablesverify = option_sense;
                    if(!tablesext && option_sense)
                        tablesext = true;
                    }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 436 "scan.l"
{
			if(yyleng-1 < MAXLINE)
        		 {
			strlcpy( nmstr, yytext + 1, sizeof nmstr );
			 }
			else
			 {
			   synerr( _("Option line too long\n"));
			   FLEX_EXIT(EXIT_FAILURE);
			 }
			if (nmstr[strlen( nmstr ) - 1] == '"')
				nmstr[strlen( nmstr ) - 1] = '\0';
			return NAME;
			}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 450 "scan.l"
{
			format_synerr( _( "unrecognized %%option: %s" ),
				yytext );
			BEGIN(RECOVER);
			}
	YY_BREAK

case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 457 "scan.l"
++linenum; BEGIN(INITIAL);
	YY_BREAK

case 132:
YY_RULE_SETUP
#line 461 "scan.l"
++bracelevel; yyless( 2 );	/* eat only %{ */
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 462 "scan.l"
--bracelevel; yyless( 2 );	/* eat only %} */
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 464 "scan.l"
ACTION_ECHO;	/* indented code in prolog */
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 466 "scan.l"
{	/* non-indented code */
			if ( bracelevel <= 0 )
				{ /* not in %{ ... %} */
				yyless( 0 );	/* put it all back */
				yy_set_bol( 1 );
				mark_prolog();
				BEGIN(SECT2);
				}
			else
				ACTION_ECHO;
			}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 478 "scan.l"
ACTION_ECHO;
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 479 "scan.l"
++linenum; ACTION_ECHO;
	YY_BREAK
case YY_STATE_EOF(SECT2PROLOG):
#line 481 "scan.l"
{
			mark_prolog();
			sectnum = 0;
			yyterminate(); /* to stop the parser */
			}
	YY_BREAK


case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 489 "scan.l"
++linenum; /* allow blank lines in section 2 */
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 491 "scan.l"
{
			indented_code = false;
			doing_codeblock = true;
			bracelevel = 1;
			BEGIN(PERCENT_BRACE_ACTION);
			}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 498 "scan.l"
{
                        /* Allow "<" to appear in (?x) patterns. */
                        if (!sf_skip_ws())
                            BEGIN(SC);
                        return '<';
                    }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 504 "scan.l"
return '^';
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 505 "scan.l"
BEGIN(QUOTE); return '"';
	YY_BREAK
case 143:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 506 "scan.l"
{
			BEGIN(NUM);
			if ( lex_compat || posix_compat )
				return BEGIN_REPEAT_POSIX;
			else
				return BEGIN_REPEAT_FLEX;
			}
	YY_BREAK
case 144:
/* rule 144 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 1);
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 513 "scan.l"
return '$';
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 515 "scan.l"
{
			bracelevel = 1;
			BEGIN(PERCENT_BRACE_ACTION);

			if ( in_rule )
				{
				doing_rule_action = true;
				in_rule = false;
				return '\n';
				}
			}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 526 "scan.l"
{
                        if (sf_skip_ws()){
                            /* We're in the middle of a (?x: ) pattern. */
                            /* Push back everything starting at the "|" */
                            size_t amt;
                            amt = strchr (yytext, '|') - yytext;
                            yyless(amt);
                        }
                        else {
                            continued_action = true;
                            ++linenum;
                            return '\n';
                        }
                    }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 541 "scan.l"
{

                if (sf_skip_ws()){
                    /* We're in the middle of a (?x: ) pattern. */
                    yy_push_state(COMMENT_DISCARD);
                }
                else{
                    yyless( yyleng - 2 );	/* put back '/', '*' */
                    bracelevel = 0;
                    continued_action = false;
                    BEGIN(ACTION);
                }
			}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 555 "scan.l"
/* allow indented rules */ ;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 557 "scan.l"
{
            if (sf_skip_ws()){
                /* We're in the middle of a (?x: ) pattern. */
            }
            else{
                /* This rule is separate from the one below because
                 * otherwise we get variable trailing context, so
                 * we can't build the scanner using -{f,F}.
                 */
                bracelevel = 0;
                continued_action = false;
                BEGIN(ACTION);

                if ( in_rule )
                    {
                    doing_rule_action = true;
                    in_rule = false;
                    return '\n';
                    }
            }
			}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 579 "scan.l"
{
            if (sf_skip_ws()){
                /* We're in the middle of a (?x: ) pattern. */
                ++linenum;
            }
            else{
                bracelevel = 0;
                continued_action = false;
                BEGIN(ACTION);
                unput( '\n' );	/* so <ACTION> sees it */

                if ( in_rule )
                    {
                    doing_rule_action = true;
                    in_rule = false;
                    return '\n';
                    }
            }
			}
	YY_BREAK
case 151:
#line 600 "scan.l"
case 152:
YY_RULE_SETUP
#line 600 "scan.l"
return EOF_OP;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 602 "scan.l"
{
			sectnum = 3;
			BEGIN(SECT3);
			outn("/* Begin user sect3 */");
			yyterminate(); /* to stop the parser */
			}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 609 "scan.l"
{
			int cclval;

			if(yyleng < MAXLINE)
        		 {
			strlcpy( nmstr, yytext, sizeof nmstr );
			 }
			else
			 {
			   synerr( _("Input line too long\n"));
			   FLEX_EXIT(EXIT_FAILURE);
			 }

			/* Check to see if we've already encountered this
			 * ccl.
			 */
			if (0 /* <--- This "0" effectively disables the reuse of a
                   * character class (purely based on its source text).
                   * The reason it was disabled is so yacc/bison can parse
                   * ccl operations, such as ccl difference and union.
                   */
                &&  (cclval = ccllookup( (u_char *) nmstr )) != 0 )
				{
				if ( input() != ']' )
					synerr( _( "bad character class" ) );

				yylval = cclval;
				++cclreuse;
				return PREVCCL;
				}
			else
				{
				/* We fudge a bit.  We know that this ccl will
				 * soon be numbered as lastccl + 1 by cclinit.
				 */
				cclinstal( (u_char *) nmstr, lastccl + 1 );

				/* Push back everything but the leading bracket
				 * so the ccl can be rescanned.
				 */
				yyless( 1 );

				BEGIN(FIRSTCCL);
				return '[';
				}
			}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 655 "scan.l"
return CCL_OP_DIFF;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 656 "scan.l"
return CCL_OP_UNION;
	YY_BREAK
/* Check for :space: at the end of the rule so we don't
     * wrap the expanded regex in '(' ')' -- breaking trailing
     * context.
     */
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 663 "scan.l"
{
			u_char *nmdefptr;
            int end_is_ws, end_ch;

            end_ch = yytext[yyleng-1];
            end_is_ws = end_ch != '}' ? 1 : 0;

 			if(yyleng-1 < MAXLINE)
         		 {
			strlcpy( nmstr, yytext + 1, sizeof nmstr );
 			 }
 			else
 			 {
 			   synerr( _("Input line too long\n"));
 			   FLEX_EXIT(EXIT_FAILURE);
 			 }
nmstr[yyleng - 2 - end_is_ws] = '\0';  /* chop trailing brace */

			if ( (nmdefptr = ndlookup( nmstr )) == 0 )
				format_synerr(
					_( "undefined definition {%s}" ),
						nmstr );

			else
				{ /* push back name surrounded by ()'s */
				int len = strlen( (char *) nmdefptr );
                if (end_is_ws)
                    unput(end_ch);

				if ( lex_compat || nmdefptr[0] == '^' ||
				     (len > 0 && nmdefptr[len - 1] == '$')
                     || (end_is_ws && trlcontxt && !sf_skip_ws()))
					{ /* don't use ()'s after all */
					PUT_BACK_STRING((char *) nmdefptr, 0);

					if ( nmdefptr[0] == '^' )
						BEGIN(CARETISBOL);
					}

				else
					{
					unput(')');
					PUT_BACK_STRING((char *) nmdefptr, 0);
					unput('(');
					}
				}
			}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 711 "scan.l"
{
                    if (sf_skip_ws())
                        yy_push_state(COMMENT_DISCARD);
                    else{
                        /* Push back the "*" and return "/" as usual. */
                        yyless(1);
                        return '/';
                    }
                }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 721 "scan.l"
{
                    if (lex_compat || posix_compat){
                        /* Push back the "?#" and treat it like a normal parens. */
                        yyless(1);
                        sf_push(); 
                        return '(';
                    }
                    else
                        yy_push_state(EXTENDED_COMMENT);
                }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 731 "scan.l"
{
                    sf_push();
                    if (lex_compat || posix_compat)
                        /* Push back the "?" and treat it like a normal parens. */
                        yyless(1);
                    else
                        BEGIN(GROUP_WITH_PARAMS);
                    return '(';
                }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 740 "scan.l"
sf_push(); return '(';
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 741 "scan.l"
sf_pop(); return ')';
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 743 "scan.l"
return (unsigned char) yytext[0];
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 744 "scan.l"
RETURNCHAR;
	YY_BREAK


case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 749 "scan.l"
++linenum;	/* Allow blank lines & continuations */
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 750 "scan.l"
return (unsigned char) yytext[0];
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 751 "scan.l"
BEGIN(SECT2); return '>';
	YY_BREAK
case 168:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 752 "scan.l"
BEGIN(CARETISBOL); return '>';
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 753 "scan.l"
RETURNNAME;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 754 "scan.l"
{
			format_synerr( _( "bad <start condition>: %s" ),
				yytext );
			}
	YY_BREAK

case 171:
YY_RULE_SETUP
#line 760 "scan.l"
BEGIN(SECT2); return '^';
	YY_BREAK

case 172:
YY_RULE_SETUP
#line 764 "scan.l"
RETURNCHAR;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 765 "scan.l"
BEGIN(SECT2); return '"';
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 767 "scan.l"
{
			synerr( _( "missing quote" ) );
			BEGIN(SECT2);
			++linenum;
			return '"';
			}
	YY_BREAK


case 175:
YY_RULE_SETUP
#line 776 "scan.l"
BEGIN(SECT2);
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 777 "scan.l"
BEGIN(GROUP_MINUS_PARAMS);
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 778 "scan.l"
sf_set_case_ins(1);
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 779 "scan.l"
sf_set_dot_all(1);
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 780 "scan.l"
sf_set_skip_ws(1);
	YY_BREAK


case 180:
YY_RULE_SETUP
#line 783 "scan.l"
BEGIN(SECT2);
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 784 "scan.l"
sf_set_case_ins(0);
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 785 "scan.l"
sf_set_dot_all(0);
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 786 "scan.l"
sf_set_skip_ws(0);
	YY_BREAK


case 184:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 790 "scan.l"
BEGIN(CCL); return '^';
	YY_BREAK
case 185:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 791 "scan.l"
return '^';
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 792 "scan.l"
BEGIN(CCL); RETURNCHAR;
	YY_BREAK


case 187:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 796 "scan.l"
return '-';
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 797 "scan.l"
RETURNCHAR;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 798 "scan.l"
BEGIN(SECT2); return ']';
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 799 "scan.l"
{
			synerr( _( "bad character class" ) );
			BEGIN(SECT2);
			return ']';
			}
	YY_BREAK


case 191:
YY_RULE_SETUP
#line 807 "scan.l"
BEGIN(CCL); return CCE_ALNUM;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 808 "scan.l"
BEGIN(CCL); return CCE_ALPHA;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 809 "scan.l"
BEGIN(CCL); return CCE_BLANK;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 810 "scan.l"
BEGIN(CCL); return CCE_CNTRL;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 811 "scan.l"
BEGIN(CCL); return CCE_DIGIT;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 812 "scan.l"
BEGIN(CCL); return CCE_GRAPH;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 813 "scan.l"
BEGIN(CCL); return CCE_LOWER;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 814 "scan.l"
BEGIN(CCL); return CCE_PRINT;
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 815 "scan.l"
BEGIN(CCL); return CCE_PUNCT;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 816 "scan.l"
BEGIN(CCL); return CCE_SPACE;
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 817 "scan.l"
BEGIN(CCL); return CCE_UPPER;
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 818 "scan.l"
BEGIN(CCL); return CCE_XDIGIT;
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 820 "scan.l"
BEGIN(CCL); return CCE_NEG_ALNUM;
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 821 "scan.l"
BEGIN(CCL); return CCE_NEG_ALPHA;
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 822 "scan.l"
BEGIN(CCL); return CCE_NEG_BLANK;
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 823 "scan.l"
BEGIN(CCL); return CCE_NEG_CNTRL;
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 824 "scan.l"
BEGIN(CCL); return CCE_NEG_DIGIT;
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 825 "scan.l"
BEGIN(CCL); return CCE_NEG_GRAPH;
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 826 "scan.l"
BEGIN(CCL); return CCE_NEG_LOWER;
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 827 "scan.l"
BEGIN(CCL); return CCE_NEG_PRINT;
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 828 "scan.l"
BEGIN(CCL); return CCE_NEG_PUNCT;
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 829 "scan.l"
BEGIN(CCL); return CCE_NEG_SPACE;
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 830 "scan.l"
BEGIN(CCL); return CCE_NEG_UPPER;
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 831 "scan.l"
BEGIN(CCL); return CCE_NEG_XDIGIT;
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 832 "scan.l"
{
			format_synerr(
				_( "bad character class expression: %s" ),
					yytext );
			BEGIN(CCL); return CCE_ALNUM;
			}
	YY_BREAK


case 216:
YY_RULE_SETUP
#line 841 "scan.l"
{
			yylval = myctoi( yytext );
			return NUMBER;
			}
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 846 "scan.l"
return ',';
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 847 "scan.l"
{
			BEGIN(SECT2);
			if ( lex_compat || posix_compat )
				return END_REPEAT_POSIX;
			else
				return END_REPEAT_FLEX;
			}
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 855 "scan.l"
{
			synerr( _( "bad character inside {}'s" ) );
			BEGIN(SECT2);
			return '}';
			}
	YY_BREAK
case 220:
/* rule 220 can match eol */
YY_RULE_SETUP
#line 861 "scan.l"
{
			synerr( _( "missing }" ) );
			BEGIN(SECT2);
			++linenum;
			return '}';
			}
	YY_BREAK


case 221:
YY_RULE_SETUP
#line 871 "scan.l"
bracelevel = 0;
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 873 "scan.l"
ACTION_ECHO; yy_push_state( COMMENT );
	YY_BREAK

case 223:
YY_RULE_SETUP
#line 876 "scan.l"
{
			ACTION_ECHO;
			CHECK_REJECT(yytext);
			}
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 880 "scan.l"
{
			ACTION_ECHO;
			CHECK_YYMORE(yytext);
			}
	YY_BREAK

case 225:
YY_RULE_SETUP
#line 886 "scan.l"
ACTION_ECHO_QSTART;
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 887 "scan.l"
ACTION_ECHO_QEND;
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 888 "scan.l"
ACTION_ECHO;
	YY_BREAK
case 228:
/* rule 228 can match eol */
YY_RULE_SETUP
#line 889 "scan.l"
{
			++linenum;
			ACTION_ECHO;
			if ( bracelevel == 0 ||
			     (doing_codeblock && indented_code) )
				{
				if ( doing_rule_action )
					add_action( "\tYY_BREAK\n" );

				doing_rule_action = doing_codeblock = false;
				BEGIN(SECT2);
				}
			}
	YY_BREAK

/* Reject and YYmore() are checked for above, in PERCENT_BRACE_ACTION */

case 229:
YY_RULE_SETUP
#line 907 "scan.l"
ACTION_ECHO; ++bracelevel;
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 908 "scan.l"
ACTION_ECHO; --bracelevel;
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 909 "scan.l"
ACTION_ECHO_QSTART;
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 910 "scan.l"
ACTION_ECHO_QEND;
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 911 "scan.l"
ACTION_ECHO;
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 912 "scan.l"
ACTION_ECHO;
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 913 "scan.l"
ACTION_ECHO;
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 914 "scan.l"
ACTION_ECHO; /* character constant */
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 915 "scan.l"
ACTION_ECHO; BEGIN(ACTION_STRING);
	YY_BREAK
case 238:
/* rule 238 can match eol */
YY_RULE_SETUP
#line 916 "scan.l"
{
			++linenum;
			ACTION_ECHO;
			if ( bracelevel == 0 )
				{
				if ( doing_rule_action )
					add_action( "\tYY_BREAK\n" );

				doing_rule_action = false;
				BEGIN(SECT2);
				}
			}
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 928 "scan.l"
ACTION_ECHO;
	YY_BREAK


case 240:
YY_RULE_SETUP
#line 932 "scan.l"
ACTION_ECHO;
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 933 "scan.l"
ACTION_ECHO;
	YY_BREAK
case 242:
/* rule 242 can match eol */
YY_RULE_SETUP
#line 934 "scan.l"
++linenum; ACTION_ECHO; BEGIN(ACTION);
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 935 "scan.l"
ACTION_ECHO; BEGIN(ACTION);
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 936 "scan.l"
ACTION_ECHO;
	YY_BREAK

case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(COMMENT_DISCARD):
case YY_STATE_EOF(ACTION):
case YY_STATE_EOF(ACTION_STRING):
#line 939 "scan.l"
{
			synerr( _( "EOF encountered inside an action" ) );
			yyterminate();
			}
	YY_BREAK
case YY_STATE_EOF(EXTENDED_COMMENT):
case YY_STATE_EOF(GROUP_WITH_PARAMS):
case YY_STATE_EOF(GROUP_MINUS_PARAMS):
#line 944 "scan.l"
{
			synerr( _( "EOF encountered inside pattern" ) );
			yyterminate();
			}
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 949 "scan.l"
{
			yylval = myesc( (u_char *) yytext );

			if ( YY_START == FIRSTCCL )
				BEGIN(CCL);

			return CHAR;
			}
	YY_BREAK

case 246:
YY_RULE_SETUP
#line 960 "scan.l"
fwrite (escaped_qstart, 1, strlen(escaped_qstart), yyout);
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 961 "scan.l"
fwrite (escaped_qend, 1, strlen(escaped_qend), yyout);
	YY_BREAK
case 248:
/* rule 248 can match eol */
YY_RULE_SETUP
#line 962 "scan.l"
ECHO;
	YY_BREAK
case 249:
/* rule 249 can match eol */
YY_RULE_SETUP
#line 963 "scan.l"
ECHO;
	YY_BREAK
case YY_STATE_EOF(SECT3):
#line 964 "scan.l"
sectnum = 0; yyterminate();
	YY_BREAK

case 250:
/* rule 250 can match eol */
YY_RULE_SETUP
#line 967 "scan.l"
format_synerr( _( "bad character: %s" ), yytext );
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 969 "scan.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 4115 "scan.c"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(SECT2):
			case YY_STATE_EOF(CODEBLOCK):
			case YY_STATE_EOF(PICKUPDEF):
			case YY_STATE_EOF(SC):
			case YY_STATE_EOF(CARETISBOL):
			case YY_STATE_EOF(NUM):
			case YY_STATE_EOF(QUOTE):
			case YY_STATE_EOF(FIRSTCCL):
			case YY_STATE_EOF(CCL):
			case YY_STATE_EOF(RECOVER):
			case YY_STATE_EOF(PERCENT_BRACE_ACTION):
			case YY_STATE_EOF(OPTION):
			case YY_STATE_EOF(LINEDIR):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1107 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    
	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1107 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1106);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

		return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @@param input_file A readable stream.
 * 
 * @@note This function does not reset the start condition to @@c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @@param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @@param file A readable stream.
 * @@param size The character buffer size in bytes. When in doubt, use @@c YY_BUF_SIZE.
 * 
 * @@return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @@param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @@param b the buffer state to be flushed, usually @@c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @@param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @@param base the character buffer
 * @@param size the size in bytes of the character buffer
 * 
 * @@return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @@e copy of @@a str.
 * @@param yystr a NUL-terminated string to scan
 * 
 * @@return the newly allocated buffer state object.
 * @@note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @@e copy of @@a bytes.
 * @@param yybytes the byte buffer to scan
 * @@param _yybytes_len the number of bytes in the buffer pointed to by @@a bytes.
 * 
 * @@return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @@param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @@param in_str A readable stream.
 * 
 * @@see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 969 "scan.l"




int yywrap()
	{
	if ( --num_input_files > 0 )
		{
		set_input_file( *++input_files );
		return 0;
		}

	else
		return 1;
	}


/* set_input_file - open the given file (if NULL, stdin) for scanning */

void set_input_file( file )
char *file;
	{
	if ( file && strcmp( file, "-" ) )
		{
		infilename = copy_string( file );
		yyin = fopen( infilename, "r" );

		if ( yyin == NULL )
			lerrsf( _( "can't open %s" ), file );
		}

	else
		{
		yyin = stdin;
		infilename = copy_string( "<stdin>" );
		}

	linenum = 1;
	}

@


1.17
log
@Replace Char (defined as unsigned char) with u_char.

ok tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: initscan.c,v 1.16 2015/11/19 23:20:34 tedu Exp $	*/
@


1.16
log
@flex_alloc and flex_free are nothing more than malloc and free, so replace
them with the real functions so as to not trick people into thinking they
are special
@
text
@d1 1
a1 1
/*	$OpenBSD: initscan.c,v 1.15 2015/11/19 19:43:40 tedu Exp $	*/
d2236 1
a2236 1
	Char nmdef[MAXLINE];
d3385 1
a3385 1
                &&  (cclval = ccllookup( (Char *) nmstr )) != 0 )
d3399 1
a3399 1
				cclinstal( (Char *) nmstr, lastccl + 1 );
d3430 1
a3430 1
			Char *nmdefptr;
d4069 1
a4069 1
			yylval = myesc( (Char *) yytext );
@


1.15
log
@Update flex from ancient 2.5.4 to the recent 2.5.39.
This work was all done by Serguey Parkhomovsky. Thanks.
Some changes from upstream:
* Removed autotools cruft/localization/texinfo manual/etc
* Kept the old manpage, as the new manpage is content-free
* Used safe string handling functions and fixed several compiler warnings
* pledge(2). Flex 2.5.39 now forks/execs its filter chains and needs proc
  exec in addition to what was previously pledged
* Removed register keyword from all variable declarations
* renamed parse.c, parse.h, scan.c, skel.c with init prefix so compiling
  flex outside of obj by accident wouldn't clobber the bootstrap files
* Minor fixes (spelling, accessing buf[strlen(buf) - 1] for zero-length
  strings in initscan.c/scan.l, etc) that were already in our tree

This is a huge change, so it's going in the tree code bomb style.
I'm not excited about the growth in complexity (like now running m4
to _post_ process lexers) but hopefully this will be a one time update
and we will now take "ownership" of the code.
@
text
@d1 1
a1 1
/*	$OpenBSD: initscan.c,v 1.14 2013/11/04 17:03:32 millert Exp $	*/
d2540 1
a2540 1
			flex_free( (void *) infilename );
a5179 23
	}


/* Wrapper routines for accessing the scanner's malloc routines. */

void *flex_alloc( size )
size_t size;
	{
	return (void *) malloc( size );
	}

void *flex_realloc( ptr, size )
void *ptr;
size_t size;
	{
	return (void *) realloc( ptr, size );
	}

void flex_free( ptr )
void *ptr;
	{
	if ( ptr )
		free( ptr );
@


1.14
log
@Use proper ANSI function definitions for functions that take no
arguments.  Avoids warnings when -Wold-style-definition is used.
OK deraadt@@
@
text
@d1 5
a5 1
/*	$OpenBSD: initscan.c,v 1.13 2007/01/26 14:38:19 tsi Exp $	*/
a6 1
#line 2 "scan.c"
a8 4
/* Scanner skeleton version:
 * $Header: /home/cvs/openbsd/src/usr.bin/lex/initscan.c,v 1.13 2007/01/26 14:38:19 tsi Exp $
 */

d12 6
d19 1
d21 5
d27 30
d58 3
a60 4
/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
d62 2
d65 23
d89 1
a92 6
#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

d98 2
a99 1
#ifdef __STDC__
a100 1
#define YY_USE_PROTOS
d103 1
a103 1
#endif	/* __STDC__ */
a105 9
#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

a111 7

#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

d126 1
a126 1
#define BEGIN yy_start = 1 + 2 *
d132 1
a132 1
#define YY_START ((yy_start - 1) / 2)
d139 1
a139 1
#define YY_NEW_FILE yyrestart( yyin )
d144 1
d146 5
d152 2
d155 8
a163 1
extern int yyleng;
d170 4
a173 16
/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

d178 3
a180 1
		*yy_cp = yy_hold_char; \
d182 1
a182 1
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
d187 1
a187 8
#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;

d189 2
d206 1
a206 1
	int yy_n_chars;
d227 3
d236 1
d250 1
d252 1
d254 4
a257 1
static YY_BUFFER_STATE yy_current_buffer = 0;
d262 2
d265 3
a267 1
#define YY_CURRENT_BUFFER yy_current_buffer
d269 4
d276 2
a277 5

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;
d281 1
a281 1
static int yy_init = 1;		/* whether we need to initialize */
d289 21
a309 17
void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));
d315 6
a320 3
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
d325 6
a330 3
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
d333 3
a335 1
#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)
d338 1
d340 1
d342 5
d350 4
a353 4
static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));
d359 4
a362 3
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
d364 149
a512 1
	yy_c_buf_p = yy_cp;
d514 1
a514 3
#define YY_NUM_RULES 165
#define YY_END_OF_BUFFER 166
static yyconst short int yy_accept[769] =
d516 122
a637 84
        0,    0,    0,    0,   87,   87,  163,  163,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  166,  164,
        7,   18,  164,   16,    1,   17,  164,  164,  164,  164,
       15,  108,  100,  101,  108,   93,  108,  107,  108,  108,
      108,  107,   99,   89,  108,  108,   91,   92,   87,   88,
       87,   86,   85,   86,   86,  163,  163,   28,   29,   28,
       28,   28,   28,   28,   28,   31,   30,   32,   31,  113,
      109,  110,  112,  114,  141,  142,  141,  139,  138,  140,

      115,  117,  115,  116,  115,  120,  120,  120,  120,  122,
      124,  122,  122,  122,  122,  123,  151,  155,  151,  154,
      156,  156,  152,  152,  152,  149,  150,  164,   82,  164,
       21,   22,   21,   20,  157,  159,  157,  160,  161,  147,
      147,  148,  147,  147,  147,  147,  147,  147,  147,   81,
       34,   33,   81,   81,   81,   81,   35,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   26,   23,   26,   24,
        7,   18,    0,   16,    1,   17,    0,    0,    0,   14,
        8,    0,    0,    0,    0,    4,    5,    0,    2,   15,

      100,  101,    0,    0,    0,   95,    0,    0,  105,  105,
        0,  162,  162,  162,   94,    0,   99,   89,    0,    0,
        0,   91,   92,  104,   90,    0,   87,   88,   86,   85,
       85,   83,   84,  163,  163,   28,   29,   28,   28,   28,
       28,   31,   30,   32,  111,  112,  142,  138,  117,    0,
      118,  119,  124,  121,  151,  155,    0,  153,    0,  144,
      152,  152,  152,    0,   82,    0,   21,   22,   21,   19,
      157,  159,  158,  147,  147,  147,  148,  143,  147,  147,
      147,   34,   33,    0,   80,    0,    0,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,

       81,   81,   81,   36,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,    0,   25,   24,    0,   14,    8,
        0,   12,    0,    0,    0,    0,    0,    4,    5,    0,
        6,    0,   96,    0,   97,    0,    0,  105,  105,    0,
      105,  105,  105,  162,  162,    0,  106,   90,   98,    0,
      104,    0,   83,   84,   28,   28,   28,   27,   28,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  152,  152,  143,  143,  147,  147,    0,    0,   81,
       81,   81,   81,   81,   44,   81,   81,   81,   49,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,

       81,   81,   81,   81,   81,   81,   81,   81,    0,   81,
       81,   81,   81,    0,    0,    0,   12,    0,    0,    0,
        0,    0,    0,    4,    5,    0,  105,  105,  105,  105,
      105,  105,  162,    0,    0,   28,   28,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      152,  152,  147,  147,   37,   38,   81,   81,   81,   81,
       81,   81,   81,   81,   50,   51,   81,   81,   81,   55,
       81,   81,   81,   81,   81,   81,   60,   81,   81,   81,
       81,   81,   81,   67,    0,    0,    0,   81,   81,   81,
       81,    0,   13,    0,    0,    0,    0,    0,    0,  105,

      105,  105,  105,  105,  105,    0,    0,   28,   28,  137,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  152,  152,  147,  147,   39,   81,   41,   81,
       43,   81,   81,   81,   47,   81,   52,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   62,   81,   81,   65,
       81,    0,    0,    0,    0,   81,   81,   81,   81,    3,
        0,    0,    0,    0,  105,  105,  105,    0,    0,   28,
       28,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  145,  146,  145,  146,   81,   42,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,

       81,   78,   61,   81,   64,   81,    0,    0,    0,    0,
       81,   81,   69,   70,    0,   10,    0,   11,    0,  103,
        0,  102,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   81,   81,   81,   45,   81,   48,
       81,   81,   81,   81,   77,   81,   59,   63,   66,    0,
        0,    0,    0,   79,   81,    0,  102,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   81,
       81,   81,   46,   81,   81,   56,   81,   81,    0,    0,
        0,    0,   68,    0,    9,    0,  125,  126,  127,  128,
      129,  130,  131,  132,  133,  134,  135,    0,   81,   81,

       81,   81,   81,   81,   81,    0,    0,    0,    0,    0,
      136,   81,   81,   81,   81,   54,   81,   81,    0,    0,
        0,    0,    0,    0,   81,   81,   81,   53,   81,   58,
        0,    0,    0,    0,    0,    0,   81,   81,   81,   81,
       72,    0,    0,    0,    0,   73,   81,   81,   81,   81,
       71,    0,   75,    0,   81,   81,   81,   74,   76,   81,
       81,   81,   81,   81,   81,   57,   40,    0
d640 1
a640 1
static yyconst int yy_ec[256] =
d643 1
a643 1
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
d645 11
a655 11
        1,    2,    1,    5,    6,    7,    8,    1,    9,   10,
       10,   11,   12,   13,   14,   10,   15,   16,   16,   16,
       16,   16,   16,   16,   17,   18,   19,   20,    1,   21,
       22,   23,   10,    1,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   48,   49,   50,   51,   52,   53,   54,   55,   47,
       26,   27,   28,   29,   30,    1,   31,   32,   33,   34,

       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   47,   56,   57,   58,    1,    1,    1,    1,    1,
d672 1
a672 1
static yyconst int yy_meta[59] =
d674 9
a682 6
        1,    1,    2,    1,    3,    1,    1,    1,    4,    1,
        5,    6,    1,    7,    4,    8,    8,    8,    8,    1,
        1,    1,    1,    9,   10,    1,   11,   12,    1,   13,
       14,   14,   14,   14,   14,   14,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,    4,    1,   16
d685 1
a685 1
static yyconst short int yy_base[858] =
d687 132
a818 94
        0,   58,  115,  172,  120,  129, 2712, 2711,  230, 2705,
      136,  141,  288,    0, 2683, 2682,  144,  151,  185,  191,
      178,  188,  344,  347,  375,    0,  125,  131,  147,  216,
      431,  434,  461,    0,  519,    0,  205,  349, 2710, 2716,
      353, 2716, 2706,    0,  360, 2716, 2705,  144,  570, 2696,
        0, 2716,  577, 2716, 2703, 2716,  438, 2716, 2684,  126,
      149,  427,  591, 2716, 2701,  141, 2682, 2716,    0, 2716,
     2699,    0, 2699, 2697,  155, 2696, 2716,    0, 2716, 2695,
     2716,    0, 2662, 2641, 2637,    0, 2692, 2716, 2690, 2716,
     2716, 2663,    0, 2716, 2716, 2716, 2688, 2716,  431, 2716,

     2716, 2716, 2687, 2716,  567, 2716, 2669,  571,  164, 2716,
     2716, 2685,    0, 2667,  573, 2716,    0, 2716, 2683, 2716,
      573, 2674,    0, 2649, 2628, 2716, 2716,  222, 2716,  356,
      448, 2716,  450, 2667,    0, 2716, 2678, 2716,    0,    0,
      198, 2716, 2677, 2621, 2716, 2667,    0, 2642, 2621, 2716,
     2673, 2716, 2671, 2668, 2640, 2639, 2716,  544, 2639,  579,
     2634, 2635,  318,    0, 2623, 2631,  424,  562, 2614,  587,
     2629, 2613, 2618, 2626, 2629, 2604, 2716, 2716, 2653,  612,
      634, 2716, 2654,    0,  637, 2716, 2653,  600, 2616,    0,
        0,  641,  647,  651,  669,    0,    0,  453, 2716,    0,

      672, 2716, 2651, 2597,  605, 2716, 2649, 2616,  620,  657,
      645, 2716,  662,    0, 2716, 2592,  688, 2716, 2646, 2592,
     2636, 2625, 2716,    0, 2716, 2610,    0, 2716,    0,    0,
     2642,    0,    0, 2640, 2716,    0, 2716,    0, 2602, 2598,
      745,    0, 2638, 2716, 2716,    0, 2716,  688, 2716,  773,
     2716, 2716, 2716, 2716,    0, 2716,  673, 2716,    0, 2716,
        0, 2599, 2595,  690, 2716,  698,  707, 2716,  709, 2716,
        0, 2716, 2716,    0,  596, 2579, 2716,  827,    0, 2596,
     2592, 2632, 2716, 2628, 2716, 2593, 2592,    0,  642, 2582,
      563, 2617, 2579,  620, 2578, 2577, 2583,  669, 2570, 2584,

     2572,    0, 2569, 2716, 2570, 2571, 2579, 2582,  685,  125,
     2570, 2567, 2566,  688, 2608, 2716,  716, 2568,    0,    0,
      720, 2716, 2608,  884, 2562, 2559, 2569,    0,    0,  723,
     2716,  739, 2716,  805, 2716,  808, 2562,  787,  869,  876,
      930,  881,  973,  800,    0, 2548, 2716, 2716, 2716, 2570,
        0, 2559,    0,    0, 2568, 2557,    0, 2716,    0, 1009,
     2581,  678,  870,  871,  874,  879,  913,  992,  974, 1013,
      885, 2565, 2554,    0, 1067, 2563, 2552, 2546, 2545, 2557,
     2562, 2561, 2550, 2557,    0, 2554, 2537, 2556,    0, 2536,
     2543, 2533, 2548, 2568, 2537, 2549, 2544, 2542, 2541, 2532,

     2539, 2540, 2538, 2539,  578, 2520, 2538, 2525,  860, 2526,
     2528, 2521, 2517, 2529,  817, 1044, 2716,  822, 1095,  914,
     2532, 2523, 2517,    0,    0, 2524, 1102, 1025, 1142, 2539,
     1028, 1163, 2716, 2513, 2521, 2523, 2507,    0, 2526, 1058,
      891, 1014, 1019,  894, 1038, 1080, 1072, 1086, 1083, 1081,
     2520, 2504, 2518, 2502, 2716, 2716, 2505, 2493, 2492, 2495,
     2507, 1148, 2507, 2492,    0,    0, 2492, 2493, 2507,    0,
     2525, 2490, 2498, 2522, 2485, 2495,    0, 2500, 2491, 2487,
     2479, 2479, 2483,    0,  875, 2494, 2481, 2494, 2480, 2475,
     2491, 2519, 2716,  920,  999, 2465, 2474, 2468, 2494, 2496,

     1105, 1184, 1081,  902,  969, 2479, 2491, 2463, 2477, 2716,
      165, 1090, 1144, 1143, 1147, 1163, 1095, 1145, 1037, 1085,
     1150, 1173, 2461, 2475, 2459, 2473,    0, 2458,    0, 2460,
        0, 1165, 2454, 2469,    0, 2461,    0, 2471, 2410, 2414,
     2434, 2400, 2393, 2405, 2385, 2382,    0, 2383, 2335,    0,
     2335, 2330, 2326, 2309, 2278, 2259, 2269, 2268, 2256, 2297,
     1046, 2238, 2242, 2253, 1179, 1142, 1145, 2247, 2246,    0,
        0, 1191, 1192, 1172, 1201, 1202, 1204, 1205, 1206, 1207,
     1209, 1210, 1208,    0,    0,    0,    0, 2254,    0, 2221,
     2229, 2218, 2208, 2200, 2209, 2198, 2195, 2165, 2168, 2149,

     2132,    0,    0, 2129,    0, 2139, 2143, 2134, 2124, 2137,
     2117, 2116,    0,    0, 1228, 2716, 1232, 2716, 2111, 2716,
     2117, 2716, 2115, 2114, 2108, 2107, 2106, 2103, 2102, 2098,
     2095, 2063, 2047, 1213, 2012, 1986, 1975,    0, 1954,    0,
     1947, 1950, 1941, 1945,    0, 1942,    0,    0,    0, 1938,
     1940, 1934, 1905,    0, 1872, 1234, 2716, 1888, 1882, 1881,
     1864, 1848, 1832, 1828, 1827, 1826, 1823, 1806, 1809, 1784,
     1787, 1772,    0, 1781, 1786,    0, 1766, 1767, 1759, 1744,
     1213, 1736,    0, 1236, 2716, 1245, 2716, 2716, 2716, 2716,
     2716, 2716, 2716, 2716, 2716, 2716, 2716, 1750, 1727, 1720,

     1701, 1687, 1670, 1681, 1667, 1679, 1659,  689, 1658, 1671,
     2716, 1657, 1627, 1621, 1635,    0, 1603, 1596, 1595, 1608,
     1602, 1587, 1586, 1583, 1581, 1587, 1555,    0, 1547,    0,
     1527, 1507, 1520, 1503, 1483, 1482, 1485, 1443, 1440, 1228,
     2716, 1225, 1224, 1206, 1210, 2716, 1213, 1202, 1018,  948,
     2716,  945, 2716,  884,  780,  771,  779, 2716, 2716,  689,
      673,  581,  408,  318,   86,    0,    0, 2716, 1263, 1279,
     1295, 1311, 1327, 1343, 1359, 1375, 1391, 1407, 1423, 1439,
     1455, 1471, 1481, 1496, 1505, 1520, 1536, 1545, 1560, 1576,
     1592, 1608, 1624, 1634, 1649, 1659, 1674, 1690, 1706, 1718,

     1728, 1743, 1759, 1775, 1791, 1807, 1817, 1832, 1843, 1236,
     1858, 1874, 1890, 1898, 1905, 1920, 1936, 1952, 1968, 1977,
     1985, 2001, 2017, 2033, 2049, 2065, 2081, 2097, 2113, 2123,
     2138, 2148, 2155, 2170, 2182, 2192, 2207, 2223, 2239, 2255,
     2265, 2280, 2291, 2306, 2322, 2338, 2354, 2364, 2373, 2388,
     2404, 2420, 2429, 2437, 2453, 2469, 2485
d821 1
a821 1
static yyconst short int yy_def[858] =
d823 132
a954 94
      768,  768,  769,  769,  770,  771,  772,  772,  768,    9,
      773,  773,  768,   13,  774,  774,  775,  775,  776,  776,
      777,  777,  778,  778,  768,   25,  779,  779,  780,  780,
      781,  781,  768,   33,  768,   35,  782,  782,  768,  768,
      768,  768,  768,  783,  768,  768,  768,  768,  784,  768,
      785,  768,  768,  768,  768,  768,  768,  768,  768,  786,
      787,  788,  768,  768,  768,  768,  768,  768,  789,  768,
      789,  790,  791,  790,  790,  792,  768,  793,  768,  793,
      768,  794,  794,  794,  793,  795,  768,  768,  795,  768,
      768,  768,  796,  768,  768,  768,  768,  768,  768,  768,

      768,  768,  768,  768,  787,  768,  768,  787,  797,  768,
      768,  768,  798,  768,  787,  768,  799,  768,  799,  768,
      800,  768,  801,  801,  801,  768,  768,  802,  768,  802,
      803,  768,  803,  768,  804,  768,  804,  768,  805,  806,
      806,  768,  806,  806,  768,  806,  807,  807,  807,  768,
      768,  768,  768,  808,  768,  768,  768,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  810,  809,  809,
      809,  809,  809,  809,  809,  809,  768,  768,  811,  768,
      768,  768,  768,  783,  768,  768,  768,  768,  768,  812,
      813,  768,  768,  768,  768,  814,  815,  816,  768,  785,

      768,  768,  768,  768,  817,  768,  768,  768,  818,  818,
      819,  768,  768,  820,  768,  821,  768,  768,  768,  768,
      768,  768,  768,  822,  768,  768,  823,  768,  824,  825,
      825,  826,  827,  828,  768,  829,  768,  830,  830,  830,
      768,  831,  768,  768,  768,  832,  768,  768,  768,  833,
      768,  768,  768,  768,  834,  768,  835,  768,  835,  768,
      836,  836,  836,  837,  768,  837,  838,  768,  838,  768,
      839,  768,  768,  840,  840,  840,  768,  768,  841,  841,
      841,  768,  768,  842,  768,  768,  768,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,

      843,  843,  843,  768,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  844,  768,  768,  768,  845,  846,
      847,  768,  768,  768,  768,  768,  768,  848,  849,  850,
      768,  850,  768,  851,  768,  851,  768,  852,  852,  852,
      768,  852,  852,  768,  853,  854,  768,  768,  768,  768,
      855,  768,  826,  827,  830,  830,  241,  768,  241,  241,
      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
      833,  836,  836,  278,  278,  841,  841,  768,  768,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,

      843,  843,  843,  843,  843,  843,  843,  843,  768,  843,
      843,  843,  843,  768,  847,  847,  768,  847,  847,  768,
      768,  768,  768,  848,  849,  768,  341,  852,  343,  341,
      852,  343,  768,  768,  768,  830,  830,  360,  768,  833,
      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
      836,  836,  841,  841,  768,  768,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  768,  768,  768,  843,  843,  843,
      843,  768,  768,  847,  847,  768,  768,  768,  768,  427,

      852,  343,  852,  852,  852,  768,  768,  830,  830,  768,
      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
      833,  833,  836,  836,  841,  841,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  768,  768,  768,  768,  843,  843,  843,  843,  768,
      856,  768,  768,  768,  852,  852,  852,  768,  768,  830,
      830,  833,  833,  833,  833,  833,  833,  833,  833,  833,
      833,  833,  833,  836,  836,  841,  841,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,

      843,  843,  843,  843,  843,  843,  768,  768,  768,  768,
      843,  843,  843,  843,  856,  768,  856,  768,  768,  768,
      768,  768,  833,  833,  833,  833,  833,  833,  833,  833,
      833,  833,  833,  833,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  768,
      768,  768,  768,  843,  843,  857,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  833,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  768,  768,
      768,  768,  843,  857,  768,  857,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  843,  843,

      843,  843,  843,  843,  843,  768,  768,  768,  768,  768,
      768,  843,  843,  843,  843,  843,  843,  843,  768,  768,
      768,  768,  768,  768,  843,  843,  843,  843,  843,  843,
      768,  768,  768,  768,  768,  768,  843,  843,  843,  843,
      768,  768,  768,  768,  768,  768,  843,  843,  843,  843,
      768,  768,  768,  768,  843,  843,  843,  768,  768,  843,
      843,  843,  843,  843,  843,  843,  843,    0,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,

      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768
d957 1
a957 1
static yyconst short int yy_nxt[2775] =
d959 288
a1246 28
       40,   41,   42,   43,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   44,   44,   40,   40,   40,   40,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   40,   40,   40,   40,   45,
       46,   47,   40,   48,   40,   49,   40,   40,   40,   40,
       40,   40,   50,   40,   40,   40,   40,   40,   40,   40,
       40,   51,   51,   40,   40,   40,   40,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,

       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   40,   40,   40,   53,   54,   55,   56,
      767,   57,   70,   71,   58,   58,   58,  129,  130,   58,
       73,   70,   74,  129,  130,   59,   75,   87,   88,   89,
       60,   61,   87,   88,   89,  188,   96,   97,  224,  132,
      133,  210,  211,   96,   97,  404,   98,  134,  405,   99,
       99,   99,   99,   98,  213,  213,   99,   99,   99,   99,
       62,   58,   58,   63,   64,   65,   56,  252,   57,   66,
       40,   58,   58,   58,  439,  189,   58,  102,  103,  104,
       40,  252,   67,  102,  103,  104,  225,   60,   61,  275,

       68,  100,  214,  107,  108,  276,  109,  178,  100,  179,
      232,  105,  233,  107,  108,  572,  109,  105,  132,  133,
      180,  180,  180,  180,  265,  266,  134,   62,   58,   58,
       78,   78,   79,   80,   78,   78,   78,   78,   78,   78,
       81,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   82,   82,   78,   78,   78,   78,   82,
d1248 14
a1261 16
       82,   82,   82,   82,   82,   82,   82,   83,   82,   82,
       82,   82,   82,   82,   84,   78,   78,   78,   90,   90,
       40,   90,   90,   90,   90,   90,   90,   90,   91,   90,

       91,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       92,   93,   93,   90,   90,   90,   90,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   90,   90,   90,  111,  112,  296,  111,
      112,  178,  766,  179,  181,  182,  183,  113,  265,  266,
      113,  185,  186,  187,  180,  180,  180,  180,  297,  114,
      115,  116,  114,  115,  116,  117,  117,  118,  119,  120,
      117,  117,  117,  121,  117,  117,  117,  117,  117,  122,
      117,  117,  117,  117,  117,  117,  117,  117,  123,  123,

      117,  117,  117,  117,  123,  123,  123,  123,  123,  123,
d1263 2
a1264 7
      123,  123,  124,  123,  123,  123,  123,  123,  123,  125,
      126,  117,  127,  136,  137,  138,  136,  137,  138,  206,
      206,  207,  215,  215,  215,  215,  248,  248,  248,  248,
      268,  269,  268,  269,  300,  331,  332,  139,  301,  765,
      139,  140,  141,  142,  143,  140,  140,  140,  144,  140,
      140,  145,  140,  140,  140,  146,  140,  140,  140,  140,
      140,  140,  140,  140,  147,  147,  140,  140,  140,  140,
d1267 78
a1344 50
      147,  147,  147,  147,  147,  147,  147,  147,  148,  147,
      147,  147,  147,  147,  147,  149,  140,  140,  140,  150,
      151,  152,  153,  154,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  155,  156,  150,  150,  150,
      157,  150,  150,  150,  150,  150,  150,  150,  150,  158,
      159,  160,  161,  162,  163,  164,  164,  165,  164,  164,
      166,  167,  168,  169,  170,  164,  171,  172,  164,  173,
      174,  175,  164,  176,  150,  150,  150,  191,  201,  202,
      203,  258,  213,  213,  204,  289,  213,  213,  213,  213,
      292,  290,  217,  218,  219,  383,  303,  275,  220,  259,

      192,  188,  193,  276,  193,  221,  304,  335,  336,  293,
      193,  222,  384,  193,  194,  195,  480,  193,  196,  223,
      214,  306,  481,  197,  214,  198,  214,  317,  317,  317,
      317,  307,  764,  205,  308,  181,  182,  183,  185,  186,
      187,  189,  321,  322,  323,  339,  340,  205,  321,  322,
      323,  387,  321,  322,  323,  388,  324,  324,  324,  324,
      342,  342,  324,  324,  324,  324,  324,  324,  324,  324,
      321,  322,  323,  201,  202,  203,  341,  344,  344,  204,
      380,  258,  339,  340,  324,  324,  324,  324,  325,  217,
      218,  219,  265,  266,  381,  220,  326,  439,  343,  259,

      265,  266,  221,  248,  248,  248,  248,  673,  222,  268,
      269,  268,  269,  327,  392,  402,  223,  409,  393,  440,
      410,  416,  417,  418,  403,  331,  332,  763,  205,  411,
      412,  317,  317,  317,  317,  419,  419,  419,  419,  721,
      413,  331,  332,  722,  205,  357,  357,  358,  359,  357,
      357,  357,  357,  357,  357,  360,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  360,  360,
      357,  357,  357,  357,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,

      357,  357,  357,  362,  363,  364,  365,  335,  336,  366,
      335,  336,  339,  340,  367,  212,  212,  762,  368,  493,
      494,  369,  761,  370,  417,  494,  371,  374,  374,  760,
      374,  374,  374,  374,  374,  374,  374,  375,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      375,  375,  374,  374,  374,  374,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  374,  374,  374,  420,  322,  323,  427,  439,
      439,  428,  428,  439,  339,  340,  431,  431,  439,  324,

      324,  324,  324,  338,  439,  485,  339,  340,  486,  487,
      439,  441,  443,  439,  442,  420,  322,  323,  450,  552,
      759,  513,  493,  494,  516,  553,  444,  339,  340,  429,
      338,  338,  439,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  430,  430,  339,  340,  445,  338,  338,
d1346 39
d1386 1
a1386 2
      430,  430,  430,  430,  430,  338,  338,  338,  432,  432,
      432,  432,  758,  439,  339,  340,  432,  757,  339,  340,
d1388 17
a1404 195
      495,  417,  418,  432,  432,  432,  432,  432,  432,  360,
      360,  439,  438,  360,  360,  360,  360,  360,  360,  448,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  439,  439,  360,  360,  360,  360,  439,  446,
      501,  501,  447,  504,  504,  416,  417,  418,  616,  617,
      339,  340,  638,  339,  340,  515,  439,  439,  449,  419,
      419,  419,  419,  514,  360,  360,  360,  375,  375,  580,
      375,  375,  375,  375,  375,  375,  375,  439,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      517,  439,  375,  375,  375,  375,  495,  417,  418,  439,

      439,  511,  439,  512,  439,  439,  339,  340,  209,  439,
      419,  419,  419,  419,  439,  519,  520,  581,  518,  522,
      566,  566,  375,  375,  375,  500,  500,  573,  521,  578,
      339,  340,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  502,  502,  502,
      502,  532,  439,  439,  439,  502,  439,  339,  340,  439,
      339,  340,  502,  502,  502,  502,  502,  502,  505,  505,
      505,  505,  439,  533,  582,  576,  505,  574,  579,  534,
      575,  439,  439,  505,  505,  505,  505,  505,  505,  567,

      567,  567,  567,  590,  339,  340,  338,  567,  577,  583,
      439,  439,  625,  591,  567,  567,  567,  567,  567,  567,
      439,  439,  624,  439,  439,  439,  439,  439,  439,  439,
      616,  617,  439,  623,  616,  617,  685,  686,  685,  686,
      756,  628,  626,  632,  708,  755,  634,  685,  686,  302,
      302,  627,  629,  754,  753,  630,  631,  633,  752,  751,
      750,  709,  669,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   72,   72,   72,   72,   72,

       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  106,  106,  106,  106,  106,  106,  106,  106,  106,

      106,  106,  106,  106,  106,  106,  106,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  184,  184,  184,
      184,  749,  748,  184,  184,  184,  190,  190,  190,  190,

      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  200,  200,  200,  200,  747,  746,  200,  200,  200,
      209,  745,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  212,  744,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  216,  216,  216,  743,  742,  216,  216,  216,
      227,  741,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  229,  740,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  230,  739,  230,  230,  230,  230,  230,  230,

      230,  230,  230,  230,  230,  230,  230,  230,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  236,  738,  236,  236,  737,  236,
      236,  236,  736,  735,  236,  236,  734,  733,  732,  236,
      238,  238,  238,  238,  731,  730,  238,  238,  238,  242,
      729,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  246,  246,  246,  246,  728,
      727,  246,  246,  246,  251,  726,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      254,  725,  254,  254,  254,  254,  254,  254,  254,  254,

      254,  724,  254,  254,  254,  254,  255,  723,  720,  719,
      255,  255,  255,  255,  718,  717,  255,  255,  257,  716,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  261,  261,  261,  261,  715,  714,
      261,  261,  261,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  267,
      267,  267,  267,  713,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  271,  712,  711,  271,  271,
      271,  271,  271,  271,  271,  710,  271,  271,  271,  271,
      271,  273,  707,  273,  273,  273,  273,  273,  273,  273,

      273,  273,  273,  273,  273,  273,  273,  274,  706,  274,
      274,  705,  274,  274,  274,  704,  703,  274,  274,  702,
      701,  700,  274,  279,  279,  279,  279,  699,  698,  279,
      279,  279,  284,  697,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  288,  288,
      696,  288,  288,  695,  694,  693,  288,  288,  315,  692,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  319,  691,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      320,  690,  320,  320,  320,  320,  320,  320,  320,  320,

      320,  320,  320,  320,  320,  320,  328,  328,  689,  688,
      328,  328,  328,  329,  329,  687,  683,  329,  329,  329,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  334,  338,  682,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  681,  338,  338,  338,  338,  209,  680,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  345,  345,  679,  678,  677,  676,
      345,  346,  346,  346,  346,  675,  674,  346,  346,  346,

      346,  351,  673,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  227,  672,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  229,  671,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  230,
      670,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  353,  668,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  354,  667,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  234,  234,  234,

      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  236,  666,  236,  236,  665,  236,  236,
      236,  664,  663,  236,  236,  662,  661,  660,  236,  238,
      238,  238,  238,  659,  658,  238,  238,  238,  242,  657,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  246,  246,  246,  246,  656,  655,
      246,  246,  246,  361,  361,  654,  653,  652,  361,  361,
      255,  651,  650,  649,  255,  255,  255,  255,  648,  647,
      255,  255,  257,  646,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  261,  261,

      261,  261,  645,  644,  261,  261,  261,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  267,  267,  267,  267,  643,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  271,
      642,  641,  271,  271,  271,  271,  271,  271,  271,  640,
      271,  271,  271,  271,  271,  274,  639,  274,  274,  638,
      274,  274,  274,  637,  636,  274,  274,  635,  622,  621,
      274,  279,  279,  279,  279,  620,  619,  279,  279,  279,
      284,  618,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  288,  288,  560,  288,

      288,  614,  613,  612,  288,  288,  315,  611,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  319,  610,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  320,  609,
      320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      424,  424,  424,  424,  608,  607,  424,  424,  424,  425,
      425,  425,  425,  606,  605,  425,  425,  425,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,

      330,  330,  330,  330,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      338,  604,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  603,  338,  338,  338,  338,  433,  433,  602,  601,
      600,  599,  433,  346,  346,  346,  346,  598,  597,  346,
      346,  346,  346,  351,  596,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,

      684,  595,  594,  593,  592,  589,  588,  587,  586,  585,
      584,  571,  570,  569,  568,  565,  564,  563,  562,  561,
      560,  559,  558,  557,  556,  555,  554,  551,  550,  549,
      548,  547,  546,  545,  544,  543,  542,  541,  540,  539,
      538,  537,  536,  535,  531,  530,  529,  528,  527,  526,
      525,  524,  523,  510,  509,  508,  507,  506,  503,  499,
      498,  497,  496,  492,  491,  490,  489,  488,  484,  483,
      482,  479,  478,  477,  476,  475,  474,  473,  472,  471,
      470,  469,  468,  467,  466,  465,  464,  463,  462,  461,
      460,  459,  458,  457,  456,  455,  454,  453,  452,  451,

      439,  437,  436,  435,  434,  347,  426,  423,  422,  421,
      322,  414,  316,  408,  407,  406,  401,  400,  399,  398,
      397,  396,  395,  394,  391,  390,  389,  386,  385,  382,
      379,  378,  285,  282,  377,  376,  278,  373,  372,  243,
      356,  355,  235,  231,  352,  350,  349,  348,  218,  347,
      337,  206,  333,  202,  318,  186,  182,  316,  314,  313,
      312,  311,  310,  309,  305,  299,  298,  295,  294,  291,
      287,  286,  285,  283,  282,  281,  280,  260,  278,  277,
      272,  270,  263,  262,  260,  256,  250,  253,  250,  249,
      247,  245,  244,  243,  241,  240,  239,  237,  235,  228,

      231,  228,  226,  218,  208,  202,  199,  186,  182,  768,
       94,   94,   85,   77,   77,   39,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768
d1407 1
a1407 1
static yyconst short int yy_chk[2775] =
d1414 7
a1420 1
        1,    1,    1,    1,    1,    1,    1,    1,    2,    2,
a1424 1

d1426 22
a1447 19
        2,    2,    2,    2,    2,    2,    3,    3,    3,    3,
      765,    3,    5,    5,    3,    3,    3,   27,   27,    3,
        6,    6,    6,   28,   28,    3,    6,   11,   11,   11,
        3,    3,   12,   12,   12,   48,   17,   17,   66,   29,
       29,   60,   60,   18,   18,  310,   17,   29,  310,   17,
       17,   17,   17,   18,   61,   61,   18,   18,   18,   18,
        3,    3,    3,    4,    4,    4,    4,  109,    4,    4,
       21,    4,    4,    4,  511,   48,    4,   19,   19,   19,
       22,  109,    4,   20,   20,   20,   66,    4,    4,  141,

        4,   17,   61,   21,   21,  141,   21,   37,   18,   37,
       75,   19,   75,   22,   22,  511,   22,   20,   30,   30,
       37,   37,   37,   37,  128,  128,   30,    4,    4,    4,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,   13,   13,
a1448 1

d1452 1
d1454 13
a1466 4
       13,   13,   13,   13,   13,   13,   23,   23,  163,   24,
       24,   38,  764,   38,   41,   41,   41,   23,  130,  130,
       24,   45,   45,   45,   38,   38,   38,   38,  163,   23,
       23,   23,   24,   24,   24,   25,   25,   25,   25,   25,
a1468 1

d1472 13
a1484 7
       25,   25,   25,   31,   31,   31,   32,   32,   32,   57,
       57,   57,   62,   62,   62,   62,   99,   99,   99,   99,
      131,  131,  133,  133,  167,  198,  198,   31,  167,  763,
       32,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
a1485 2
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   35,
d1491 364
a1854 243
       35,   35,   35,   35,   35,   35,   35,   49,   53,   53,
       53,  121,  105,  105,   53,  158,  108,  108,  115,  115,
      160,  158,   63,   63,   63,  291,  168,  275,   63,  121,

       49,  188,   49,  275,   49,   63,  168,  205,  205,  160,
       49,   63,  291,   49,   49,   49,  405,   49,   49,   63,
      105,  170,  405,   49,  108,   49,  115,  180,  180,  180,
      180,  170,  762,   53,  170,  181,  181,  181,  185,  185,
      185,  188,  192,  192,  192,  209,  209,   63,  193,  193,
      193,  294,  194,  194,  194,  294,  192,  192,  192,  192,
      211,  211,  193,  193,  193,  193,  194,  194,  194,  194,
      195,  195,  195,  201,  201,  201,  210,  213,  213,  201,
      289,  257,  210,  210,  195,  195,  195,  195,  192,  217,
      217,  217,  264,  264,  289,  217,  194,  362,  211,  257,

      266,  266,  217,  248,  248,  248,  248,  761,  217,  267,
      267,  269,  269,  195,  298,  309,  217,  314,  298,  362,
      314,  321,  321,  321,  309,  330,  330,  760,  201,  314,
      314,  317,  317,  317,  317,  321,  321,  321,  321,  708,
      314,  332,  332,  708,  217,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,

      241,  241,  241,  250,  250,  250,  250,  334,  334,  250,
      336,  336,  338,  338,  250,  344,  344,  757,  250,  415,
      415,  250,  756,  250,  418,  418,  250,  278,  278,  755,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  324,  324,  324,  339,  363,
      364,  340,  340,  365,  339,  339,  342,  342,  366,  324,

      324,  324,  324,  340,  371,  409,  342,  342,  409,  409,
      441,  363,  365,  444,  364,  420,  420,  420,  371,  485,
      754,  441,  494,  494,  444,  485,  366,  504,  504,  340,
      341,  341,  367,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  367,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  343,  343,
      343,  343,  752,  369,  505,  505,  343,  750,  343,  343,

      495,  495,  495,  343,  343,  343,  343,  343,  343,  360,
      360,  368,  360,  360,  360,  360,  360,  360,  360,  369,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  370,  442,  360,  360,  360,  360,  443,  368,
      428,  428,  368,  431,  431,  416,  416,  416,  561,  561,
      428,  428,  749,  431,  431,  443,  519,  445,  370,  416,
      416,  416,  416,  442,  360,  360,  360,  375,  375,  519,
      375,  375,  375,  375,  375,  375,  375,  440,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      445,  447,  375,  375,  375,  375,  419,  419,  419,  446,

      450,  440,  449,  440,  520,  448,  503,  503,  503,  512,
      419,  419,  419,  419,  517,  447,  448,  520,  446,  450,
      501,  501,  375,  375,  375,  427,  427,  512,  449,  517,
      501,  501,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  429,  429,  429,
      429,  462,  514,  513,  518,  429,  515,  566,  566,  521,
      567,  567,  429,  429,  429,  429,  429,  429,  432,  432,
      432,  432,  516,  462,  521,  515,  432,  513,  518,  462,
      514,  574,  522,  432,  432,  432,  432,  432,  432,  502,

      502,  502,  502,  532,  565,  565,  565,  502,  516,  522,
      572,  573,  574,  532,  502,  502,  502,  502,  502,  502,
      575,  576,  573,  577,  578,  579,  580,  583,  581,  582,
      615,  615,  634,  572,  617,  617,  656,  656,  684,  684,
      748,  577,  575,  581,  681,  747,  583,  686,  686,  810,
      810,  576,  578,  745,  744,  579,  580,  582,  743,  742,
      740,  681,  634,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  771,  771,  771,  771,  771,

      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  777,  777,  777,  777,  777,  777,  777,  777,  777,

      777,  777,  777,  777,  777,  777,  777,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  779,  779,  779,  779,  779,  779,  779,
      779,  779,  779,  779,  779,  779,  779,  779,  779,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  781,  781,  781,  781,  781,
      781,  781,  781,  781,  781,  781,  781,  781,  781,  781,
      781,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  783,  783,  783,
      783,  739,  738,  783,  783,  783,  784,  784,  784,  784,

      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  785,  785,  785,  785,  737,  736,  785,  785,  785,
      786,  735,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  787,  734,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  788,  788,  788,  733,  732,  788,  788,  788,
      789,  731,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  790,  729,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  791,  727,  791,  791,  791,  791,  791,  791,

      791,  791,  791,  791,  791,  791,  791,  791,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  793,  726,  793,  793,  725,  793,
      793,  793,  724,  723,  793,  793,  722,  721,  720,  793,
      794,  794,  794,  794,  719,  718,  794,  794,  794,  795,
      717,  795,  795,  795,  795,  795,  795,  795,  795,  795,
      795,  795,  795,  795,  795,  796,  796,  796,  796,  715,
      714,  796,  796,  796,  797,  713,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      798,  712,  798,  798,  798,  798,  798,  798,  798,  798,

      798,  710,  798,  798,  798,  798,  799,  709,  707,  706,
      799,  799,  799,  799,  705,  704,  799,  799,  800,  703,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  801,  801,  801,  801,  702,  701,
      801,  801,  801,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  803,
      803,  803,  803,  700,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  804,  699,  698,  804,  804,
      804,  804,  804,  804,  804,  682,  804,  804,  804,  804,
      804,  805,  680,  805,  805,  805,  805,  805,  805,  805,

      805,  805,  805,  805,  805,  805,  805,  806,  679,  806,
      806,  678,  806,  806,  806,  677,  675,  806,  806,  674,
      672,  671,  806,  807,  807,  807,  807,  670,  669,  807,
      807,  807,  808,  668,  808,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  808,  808,  809,  809,
      667,  809,  809,  666,  665,  664,  809,  809,  811,  663,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  812,  662,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      813,  661,  813,  813,  813,  813,  813,  813,  813,  813,

      813,  813,  813,  813,  813,  813,  814,  814,  660,  659,
      814,  814,  814,  815,  815,  658,  655,  815,  815,  815,
      816,  816,  816,  816,  816,  816,  816,  816,  816,  816,
      816,  816,  816,  816,  816,  816,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  818,  653,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  652,  818,  818,  818,  818,  819,  651,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  820,  820,  650,  646,  644,  643,
      820,  821,  821,  821,  821,  642,  641,  821,  821,  821,

      821,  822,  639,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  823,  637,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  824,  636,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  825,
      635,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  826,  633,  826,  826,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  827,  632,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  827,  828,  828,  828,

      828,  828,  828,  828,  828,  828,  828,  828,  828,  828,
      828,  828,  828,  829,  631,  829,  829,  630,  829,  829,
      829,  629,  628,  829,  829,  627,  626,  625,  829,  830,
      830,  830,  830,  624,  623,  830,  830,  830,  831,  621,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  832,  832,  832,  832,  619,  612,
      832,  832,  832,  833,  833,  611,  610,  609,  833,  833,
      834,  608,  607,  606,  834,  834,  834,  834,  604,  601,
      834,  834,  835,  600,  835,  835,  835,  835,  835,  835,
      835,  835,  835,  835,  835,  835,  835,  835,  836,  836,

      836,  836,  599,  598,  836,  836,  836,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  838,  838,  838,  838,  597,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  839,
      596,  595,  839,  839,  839,  839,  839,  839,  839,  594,
      839,  839,  839,  839,  839,  840,  593,  840,  840,  592,
      840,  840,  840,  591,  590,  840,  840,  588,  569,  568,
      840,  841,  841,  841,  841,  564,  563,  841,  841,  841,
      842,  562,  842,  842,  842,  842,  842,  842,  842,  842,
      842,  842,  842,  842,  842,  842,  843,  843,  560,  843,

      843,  559,  558,  557,  843,  843,  844,  556,  844,  844,
      844,  844,  844,  844,  844,  844,  844,  844,  844,  844,
      844,  844,  845,  555,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  846,  554,
      846,  846,  846,  846,  846,  846,  846,  846,  846,  846,
      846,  846,  846,  846,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      848,  848,  848,  848,  553,  552,  848,  848,  848,  849,
      849,  849,  849,  551,  549,  849,  849,  849,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,

      850,  850,  850,  850,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      852,  548,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  546,  852,  852,  852,  852,  853,  853,  545,  544,
      543,  542,  853,  854,  854,  854,  854,  541,  540,  854,
      854,  854,  854,  855,  539,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  856,
      856,  856,  856,  856,  856,  856,  856,  856,  856,  856,
      856,  856,  856,  856,  856,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,

      857,  538,  536,  534,  533,  530,  528,  526,  525,  524,
      523,  509,  508,  507,  506,  500,  499,  498,  497,  496,
      492,  491,  490,  489,  488,  487,  486,  483,  482,  481,
      480,  479,  478,  476,  475,  474,  473,  472,  471,  469,
      468,  467,  464,  463,  461,  460,  459,  458,  457,  454,
      453,  452,  451,  439,  437,  436,  435,  434,  430,  426,
      423,  422,  421,  414,  413,  412,  411,  410,  408,  407,
      406,  404,  403,  402,  401,  400,  399,  398,  397,  396,
      395,  394,  393,  392,  391,  390,  388,  387,  386,  384,
      383,  382,  381,  380,  379,  378,  377,  376,  373,  372,

      361,  356,  355,  352,  350,  346,  337,  327,  326,  325,
      323,  318,  315,  313,  312,  311,  308,  307,  306,  305,
      303,  301,  300,  299,  297,  296,  295,  293,  292,  290,
      287,  286,  284,  282,  281,  280,  276,  263,  262,  243,
      240,  239,  234,  231,  226,  222,  221,  220,  219,  216,
      208,  207,  204,  203,  189,  187,  183,  179,  176,  175,
      174,  173,  172,  171,  169,  166,  165,  162,  161,  159,
      156,  155,  154,  153,  151,  149,  148,  146,  144,  143,
      137,  134,  125,  124,  122,  119,  114,  112,  107,  103,
       97,   92,   89,   87,   85,   84,   83,   80,   76,   74,

       73,   71,   67,   65,   59,   55,   50,   47,   43,   39,
       16,   15,   10,    8,    7,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768
d1857 2
a1858 2
static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;
d1860 15
a1874 6
/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
d1878 1
a1878 2
#define INITIAL 0
/* scan.l - scanner for flex input */
d1880 5
a1884 30
/*-
 * Copyright (c) 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Vern Paxson.
 * 
 * The United States Government has rights in this work pursuant
 * to contract no. DE-AC03-76SF00098 between the United States
 * Department of Energy and the University of California.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * Neither the name of the University nor the names of its contributors
 * may be used to endorse or promote products derived from this software
 * without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE.
 */
d1886 24
a1909 1
/* $Header: /home/cvs/openbsd/src/usr.bin/lex/initscan.c,v 1.13 2007/01/26 14:38:19 tsi Exp $ */
d1913 3
d1924 11
d1945 2
d1948 6
d1967 15
a1981 2
#define YY_STACK_USED 1
#define YY_NO_TOP_STATE 1
a1990 1

a1997 1

d2000 30
d2031 17
a2047 1
#line 1333 "scan.c"
d2055 1
a2055 1
extern "C" int yywrap YY_PROTO(( void ));
d2057 1
a2057 1
extern int yywrap YY_PROTO(( void ));
d2061 2
a2062 4
#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

d2064 1
a2064 1
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
d2068 1
a2068 1
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
d2071 2
a2072 1
#if defined(YY_NO_INPUT) && YY_NO_INPUT
d2074 1
a2074 20
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#ifdef YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

d2076 1
a2076 3
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
a2078 13
#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#ifdef __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
d2081 8
a2094 1

d2099 1
a2099 1
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
d2107 1
a2107 1
	if ( yy_current_buffer->yy_is_interactive ) \
d2109 2
a2110 1
		int c = '*', n; \
d2120 16
a2135 3
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
d2156 2
d2162 6
a2167 2
#define YY_DECL int yylex YY_PROTO(( void ))
#endif
d2183 1
a2183 1
		yy_current_buffer->yy_at_bol = \
d2187 2
d2190 1
a2190 1
	{
d2194 2
a2195 15

#line 94 "scan.l"

	static int bracelevel, didadef, indented_code;
	static int doing_rule_action = false;
	static int option_sense;

	int doing_codeblock = false;
	int i;
	Char nmdef[MAXLINE], myesc();


#line 1498 "scan.c"

	if ( yy_init )
d2197 1
a2197 1
		yy_init = 0;
d2203 8
a2210 2
		if ( ! yy_start )
			yy_start = 1;	/* first start state */
d2218 5
a2222 3
		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );
d2224 1
a2224 1
		yy_load_buffer_state();
d2227 14
d2243 7
a2249 1
		yy_cp = yy_c_buf_p;
d2252 1
a2252 1
		*yy_cp = yy_hold_char;
d2259 1
a2259 1
		yy_current_state = yy_start;
d2261 4
d2268 1
a2268 6
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
d2272 1
a2272 1
				if ( yy_current_state >= 769 )
d2276 1
d2279 1
a2279 1
		while ( yy_base[yy_current_state] != 2716 );
d2282 16
a2297 6
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
a2301 1

a2303 1

a2305 7
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

d2309 1
a2309 1
#line 105 "scan.l"
d2314 1
a2314 1
#line 106 "scan.l"
d2319 1
a2319 1
#line 107 "scan.l"
d2324 1
a2324 1
#line 108 "scan.l"
d2329 1
a2329 1
#line 109 "scan.l"
d2333 1
d2335 1
a2335 1
#line 110 "scan.l"
d2344 17
d2362 1
a2362 1
#line 117 "scan.l"
d2365 1
a2365 1
case 8:
d2367 1
a2367 1
#line 119 "scan.l"
d2377 2
a2378 1
case 9:
d2380 1
a2380 1
#line 128 "scan.l"
d2383 2
a2384 1
case 10:
d2386 1
a2386 1
#line 129 "scan.l"
d2389 1
a2389 1
case 11:
d2391 1
a2391 1
#line 131 "scan.l"
d2394 2
a2395 1
case 12:
d2397 1
a2397 1
#line 133 "scan.l"
d2400 2
a2401 1
case 13:
d2403 1
a2403 1
#line 134 "scan.l"
d2406 3
a2408 1
case 14:
d2410 1
a2410 1
#line 136 "scan.l"
d2413 1
a2413 1
case 15:
d2415 1
a2415 1
#line 138 "scan.l"
d2417 2
d2420 7
d2431 1
a2431 1
case 16:
d2433 1
a2433 1
#line 144 "scan.l"
d2436 2
a2437 1
case 17:
d2439 1
a2439 1
#line 145 "scan.l"
d2442 2
a2443 1
case 18:
d2445 1
a2445 1
#line 146 "scan.l"
d2450 1
a2450 1
case 19:
d2452 1
a2452 1
#line 151 "scan.l"
d2455 1
a2455 1
case 20:
d2457 1
a2457 1
#line 152 "scan.l"
d2460 11
a2470 1
case 21:
d2472 1
a2472 1
#line 153 "scan.l"
d2475 2
a2476 1
case 22:
d2478 1
a2478 1
#line 154 "scan.l"
d2483 44
a2526 1
case 23:
d2528 1
a2528 1
#line 158 "scan.l"
d2531 1
a2531 1
case 24:
d2533 1
a2533 1
#line 159 "scan.l"
d2536 1
a2536 1
case 25:
d2538 1
a2538 1
#line 161 "scan.l"
d2545 1
a2545 1
case 26:
d2547 1
a2547 1
#line 166 "scan.l"
d2552 2
a2553 1
case 27:
d2555 1
a2555 1
#line 170 "scan.l"
d2558 11
a2568 1
case 28:
d2570 1
a2570 1
#line 172 "scan.l"
d2573 2
a2574 1
case 29:
d2576 1
a2576 1
#line 174 "scan.l"
d2586 56
a2641 1
case 30:
d2643 1
a2643 1
#line 184 "scan.l"
d2646 1
a2646 1
case 31:
d2648 1
a2648 1
#line 186 "scan.l"
d2650 2
d2653 6
a2658 1

d2671 2
a2672 1
case 32:
d2674 1
a2674 1
#line 201 "scan.l"
d2684 2
a2685 1
case 33:
d2687 1
a2687 1
#line 211 "scan.l"
d2690 1
a2690 1
case 34:
d2692 1
a2692 1
#line 212 "scan.l"
d2695 1
a2695 1
case 35:
d2697 1
a2697 1
#line 214 "scan.l"
d2700 1
a2700 1
case 36:
d2702 1
a2702 1
#line 216 "scan.l"
d2705 1
a2705 1
case 37:
d2707 1
a2707 1
#line 218 "scan.l"
d2710 1
a2710 1
case 38:
d2712 1
a2712 1
#line 219 "scan.l"
d2715 1
a2715 1
case 39:
d2717 1
a2717 1
#line 221 "scan.l"
d2720 1
a2720 1
case 40:
d2722 1
a2722 1
#line 222 "scan.l"
d2724 2
a2725 1
			action_define( "YY_ALWAYS_INTERACTIVE", option_sense );
d2728 1
a2728 1
case 41:
d2730 1
a2730 1
#line 225 "scan.l"
d2733 11
a2743 1
case 42:
d2745 1
a2745 1
#line 226 "scan.l"
d2748 1
a2748 1
case 43:
d2750 1
a2750 1
#line 227 "scan.l"
d2753 13
a2765 1
case 44:
d2767 1
a2767 1
#line 228 "scan.l"
d2770 1
a2770 1
case 45:
d2772 2
a2773 2
#line 229 "scan.l"
caseins = ! option_sense;
d2775 1
a2775 1
case 46:
d2777 2
a2778 2
#line 230 "scan.l"
caseins = option_sense;
d2780 1
a2780 1
case 47:
d2782 1
a2782 1
#line 231 "scan.l"
d2785 1
a2785 1
case 48:
d2787 1
a2787 1
#line 232 "scan.l"
d2790 1
a2790 1
case 49:
d2792 1
a2792 1
#line 233 "scan.l"
d2795 1
a2795 1
case 50:
d2797 1
a2797 1
#line 234 "scan.l"
d2803 1
a2803 1
case 51:
d2805 1
a2805 1
#line 238 "scan.l"
d2811 1
a2811 1
case 52:
d2813 1
a2813 1
#line 242 "scan.l"
d2816 1
a2816 1
case 53:
d2818 1
a2818 1
#line 243 "scan.l"
d2821 1
a2821 1
case 54:
d2823 1
a2823 1
#line 244 "scan.l"
d2826 6
a2831 1
case 55:
d2833 1
a2833 1
#line 245 "scan.l"
d2835 4
a2838 2
			action_define( "YY_MAIN", option_sense );
			do_yywrap = ! option_sense;
d2841 1
a2841 1
case 56:
d2843 1
a2843 1
#line 249 "scan.l"
d2846 1
a2846 1
case 57:
d2848 1
a2848 1
#line 250 "scan.l"
d2850 2
a2851 1
			action_define( "YY_NEVER_INTERACTIVE", option_sense );
d2854 1
a2854 1
case 58:
d2856 1
a2856 1
#line 253 "scan.l"
d2859 1
a2859 1
case 59:
d2861 1
a2861 1
#line 254 "scan.l"
d2864 1
a2864 1
case 60:
d2866 1
a2866 1
#line 255 "scan.l"
d2869 6
a2874 1
case 61:
d2876 1
a2876 1
#line 256 "scan.l"
d2879 1
a2879 1
case 62:
d2881 2
a2882 2
#line 257 "scan.l"
action_define( "YY_STACK_USED", option_sense );
d2884 1
a2884 1
case 63:
d2886 1
a2886 1
#line 258 "scan.l"
d2889 1
a2889 1
case 64:
d2891 1
a2891 1
#line 259 "scan.l"
d2894 6
a2899 1
case 65:
d2901 2
a2902 2
#line 260 "scan.l"
ACTION_IFDEF("YY_NO_UNPUT", ! option_sense);
d2904 1
a2904 1
case 66:
d2906 1
a2906 1
#line 261 "scan.l"
d2909 1
a2909 1
case 67:
d2911 1
a2911 1
#line 262 "scan.l"
d2914 1
a2914 1
case 68:
d2916 2
a2917 2
#line 263 "scan.l"
do_yylineno = option_sense;
d2919 1
a2919 1
case 69:
d2921 1
a2921 1
#line 264 "scan.l"
d2924 1
a2924 1
case 70:
d2926 1
a2926 1
#line 265 "scan.l"
d2929 101
a3029 1
case 71:
d3031 2
a3032 2
#line 267 "scan.l"
ACTION_IFDEF("YY_NO_PUSH_STATE", ! option_sense);
d3034 1
a3034 1
case 72:
d3036 2
a3037 2
#line 268 "scan.l"
ACTION_IFDEF("YY_NO_POP_STATE", ! option_sense);
d3039 1
a3039 1
case 73:
d3041 2
a3042 2
#line 269 "scan.l"
ACTION_IFDEF("YY_NO_TOP_STATE", ! option_sense);
d3044 1
a3044 1
case 74:
d3046 2
a3047 2
#line 271 "scan.l"
ACTION_IFDEF("YY_NO_SCAN_BUFFER", ! option_sense);
d3049 1
a3049 1
case 75:
d3051 2
a3052 2
#line 272 "scan.l"
ACTION_IFDEF("YY_NO_SCAN_BYTES", ! option_sense);
d3054 1
a3054 1
case 76:
d3056 2
a3057 2
#line 273 "scan.l"
ACTION_IFDEF("YY_NO_SCAN_STRING", ! option_sense);
d3059 1
a3059 1
case 77:
d3061 1
a3061 1
#line 275 "scan.l"
d3064 1
a3064 1
case 78:
d3066 1
a3066 1
#line 276 "scan.l"
d3069 1
a3069 1
case 79:
d3071 1
a3071 1
#line 277 "scan.l"
d3074 20
a3093 1
case 80:
d3095 1
a3095 1
#line 279 "scan.l"
d3097 2
d3100 8
a3107 2
			if (nmstr[strlen(nmstr) - 1] == '"')
				nmstr[strlen(nmstr) - 1] = '\0';
d3111 1
a3111 1
case 81:
d3113 1
a3113 1
#line 285 "scan.l"
d3121 2
a3122 1
case 82:
d3124 1
a3124 1
#line 292 "scan.l"
d3128 1
a3128 1
case 83:
d3130 1
a3130 1
#line 296 "scan.l"
d3133 1
a3133 1
case 84:
d3135 1
a3135 1
#line 297 "scan.l"
d3138 1
a3138 1
case 85:
d3140 1
a3140 1
#line 299 "scan.l"
d3143 1
a3143 1
case 86:
d3145 1
a3145 1
#line 301 "scan.l"
d3158 1
a3158 1
case 87:
d3160 1
a3160 1
#line 313 "scan.l"
d3163 2
a3164 1
case 88:
d3166 1
a3166 1
#line 314 "scan.l"
d3170 1
a3170 1
#line 316 "scan.l"
d3179 2
a3180 1
case 89:
d3182 1
a3182 1
#line 324 "scan.l"
d3185 1
a3185 1
case 90:
d3187 1
a3187 1
#line 326 "scan.l"
d3195 1
a3195 1
case 91:
d3197 7
a3203 2
#line 333 "scan.l"
BEGIN(SC); return '<';
d3205 1
a3205 1
case 92:
d3207 1
a3207 1
#line 334 "scan.l"
d3210 1
a3210 1
case 93:
d3212 1
a3212 1
#line 335 "scan.l"
d3215 3
a3217 3
case 94:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 1;
d3220 8
a3227 2
#line 336 "scan.l"
BEGIN(NUM); return '{';
d3229 5
a3233 3
case 95:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 1;
d3236 1
a3236 1
#line 337 "scan.l"
d3239 1
a3239 1
case 96:
d3241 1
a3241 1
#line 339 "scan.l"
d3254 2
a3255 1
case 97:
d3257 15
a3271 2
#line 350 "scan.l"
continued_action = true; ++linenum; return '\n';
d3273 1
a3273 1
case 98:
d3275 1
a3275 1
#line 352 "scan.l"
d3277 11
a3287 4
			yyless( yyleng - 2 );	/* put back '/', '*' */
			bracelevel = 0;
			continued_action = false;
			BEGIN(ACTION);
d3290 1
a3290 1
case 99:
d3292 2
a3293 2
#line 359 "scan.l"
/* allow indented rules */
d3295 1
a3295 1
case 100:
d3297 1
a3297 1
#line 361 "scan.l"
d3299 19
a3317 14
			/* This rule is separate from the one below because
			 * otherwise we get variable trailing context, so
			 * we can't build the scanner using -{f,F}.
			 */
			bracelevel = 0;
			continued_action = false;
			BEGIN(ACTION);

			if ( in_rule )
				{
				doing_rule_action = true;
				in_rule = false;
				return '\n';
				}
d3320 2
a3321 1
case 101:
d3323 1
a3323 1
#line 378 "scan.l"
d3325 17
a3341 11
			bracelevel = 0;
			continued_action = false;
			BEGIN(ACTION);
			unput( '\n' );	/* so <ACTION> sees it */

			if ( in_rule )
				{
				doing_rule_action = true;
				in_rule = false;
				return '\n';
				}
d3344 3
a3346 3
case 102:
#line 393 "scan.l"
case 103:
d3348 1
a3348 1
#line 393 "scan.l"
d3351 1
a3351 1
case 104:
d3353 1
a3353 1
#line 395 "scan.l"
d3357 1
d3361 1
a3361 1
case 105:
d3363 1
a3363 1
#line 401 "scan.l"
d3367 2
d3370 6
d3380 6
a3385 1
			if ( (cclval = ccllookup( (Char *) nmstr )) != 0 )
d3411 16
a3426 1
case 106:
d3428 1
a3428 1
#line 435 "scan.l"
d3431 1
a3431 1
			Char *ndlookup();
d3433 5
d3439 7
a3445 1
			nmstr[yyleng - 2] = '\0';  /* chop trailing brace */
d3455 2
d3459 2
a3460 1
				     (len > 0 && nmdefptr[len - 1] == '$') )
d3477 51
a3527 1
case 107:
d3529 1
a3529 1
#line 469 "scan.l"
d3532 1
a3532 1
case 108:
d3534 1
a3534 1
#line 470 "scan.l"
d3539 7
a3545 1
case 109:
d3547 1
a3547 1
#line 475 "scan.l"
d3550 1
a3550 1
case 110:
d3552 1
a3552 1
#line 476 "scan.l"
d3555 3
a3557 3
case 111:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 1;
d3560 1
a3560 1
#line 477 "scan.l"
d3563 1
a3563 1
case 112:
d3565 1
a3565 1
#line 478 "scan.l"
d3568 1
a3568 1
case 113:
d3570 1
a3570 1
#line 479 "scan.l"
d3577 1
a3577 1
case 114:
d3579 1
a3579 1
#line 485 "scan.l"
d3583 1
a3583 1
case 115:
d3585 1
a3585 1
#line 489 "scan.l"
d3588 1
a3588 1
case 116:
d3590 1
a3590 1
#line 490 "scan.l"
d3593 2
a3594 1
case 117:
d3596 1
a3596 1
#line 492 "scan.l"
d3606 52
a3657 3
case 118:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 1;
d3660 1
a3660 1
#line 502 "scan.l"
d3663 3
a3665 3
case 119:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 1;
d3668 1
a3668 1
#line 503 "scan.l"
d3671 1
a3671 1
case 120:
d3673 1
a3673 1
#line 504 "scan.l"
d3678 3
a3680 3
case 121:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 1;
d3683 1
a3683 1
#line 508 "scan.l"
d3686 1
a3686 1
case 122:
d3688 1
a3688 1
#line 509 "scan.l"
d3691 1
a3691 1
case 123:
d3693 1
a3693 1
#line 510 "scan.l"
d3696 2
a3697 1
case 124:
d3699 1
a3699 1
#line 511 "scan.l"
d3708 1
a3708 1
case 125:
d3710 1
a3710 1
#line 519 "scan.l"
d3713 1
a3713 1
case 126:
d3715 1
a3715 1
#line 520 "scan.l"
d3718 1
a3718 1
case 127:
d3720 1
a3720 1
#line 521 "scan.l"
d3723 1
a3723 1
case 128:
d3725 1
a3725 1
#line 522 "scan.l"
d3728 1
a3728 1
case 129:
d3730 1
a3730 1
#line 523 "scan.l"
d3733 1
a3733 1
case 130:
d3735 1
a3735 1
#line 524 "scan.l"
d3738 1
a3738 1
case 131:
d3740 1
a3740 1
#line 525 "scan.l"
d3743 1
a3743 1
case 132:
d3745 1
a3745 1
#line 526 "scan.l"
d3748 1
a3748 1
case 133:
d3750 1
a3750 1
#line 527 "scan.l"
d3753 1
a3753 1
case 134:
d3755 1
a3755 1
#line 528 "scan.l"
d3758 1
a3758 1
case 135:
d3760 1
a3760 1
#line 529 "scan.l"
d3763 1
a3763 1
case 136:
d3765 1
a3765 1
#line 530 "scan.l"
d3768 61
a3828 1
case 137:
d3830 1
a3830 1
#line 531 "scan.l"
d3840 1
a3840 1
case 138:
d3842 1
a3842 1
#line 540 "scan.l"
d3848 1
a3848 1
case 139:
d3850 1
a3850 1
#line 545 "scan.l"
d3853 1
a3853 1
case 140:
d3855 8
a3862 2
#line 546 "scan.l"
BEGIN(SECT2); return '}';
d3864 1
a3864 1
case 141:
d3866 1
a3866 1
#line 548 "scan.l"
d3873 2
a3874 1
case 142:
d3876 1
a3876 1
#line 554 "scan.l"
d3886 1
a3886 1
case 143:
d3888 1
a3888 1
#line 564 "scan.l"
d3891 1
a3891 1
case 144:
d3893 1
a3893 1
#line 566 "scan.l"
d3897 1
a3897 1
case 145:
d3899 1
a3899 1
#line 569 "scan.l"
d3905 1
a3905 1
case 146:
d3907 1
a3907 1
#line 573 "scan.l"
d3914 11
a3924 1
case 147:
d3926 1
a3926 1
#line 579 "scan.l"
d3929 2
a3930 1
case 148:
d3932 1
a3932 1
#line 580 "scan.l"
d3950 1
a3950 1
case 149:
d3952 1
a3952 1
#line 598 "scan.l"
d3955 1
a3955 1
case 150:
d3957 1
a3957 1
#line 599 "scan.l"
d3960 16
a3975 1
case 151:
d3977 1
a3977 1
#line 600 "scan.l"
d3980 1
a3980 1
case 152:
d3982 1
a3982 1
#line 601 "scan.l"
d3985 1
a3985 1
case 153:
d3987 1
a3987 1
#line 602 "scan.l"
d3990 1
a3990 1
case 154:
d3992 1
a3992 1
#line 603 "scan.l"
d3995 2
a3996 1
case 155:
d3998 1
a3998 1
#line 604 "scan.l"
d4012 1
a4012 1
case 156:
d4014 1
a4014 1
#line 616 "scan.l"
d4019 1
a4019 1
case 157:
d4021 1
a4021 1
#line 620 "scan.l"
d4024 1
a4024 1
case 158:
d4026 1
a4026 1
#line 621 "scan.l"
d4029 2
a4030 1
case 159:
d4032 2
a4033 2
#line 622 "scan.l"
++linenum; ACTION_ECHO;
d4035 1
a4035 1
case 160:
d4037 1
a4037 1
#line 623 "scan.l"
d4040 1
a4040 1
case 161:
d4042 1
a4042 1
#line 624 "scan.l"
d4047 1
d4050 1
a4050 1
#line 627 "scan.l"
d4056 10
a4065 1
case 162:
d4067 1
a4067 1
#line 633 "scan.l"
d4078 18
a4095 1
case 163:
d4097 1
a4097 1
#line 644 "scan.l"
d4101 1
a4101 1
#line 645 "scan.l"
d4105 2
a4106 1
case 164:
d4108 1
a4108 1
#line 648 "scan.l"
d4111 1
a4111 1
case 165:
d4113 1
a4113 1
#line 650 "scan.l"
d4116 16
a4131 16
#line 2736 "scan.c"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SECT2):
case YY_STATE_EOF(CODEBLOCK):
case YY_STATE_EOF(PICKUPDEF):
case YY_STATE_EOF(SC):
case YY_STATE_EOF(CARETISBOL):
case YY_STATE_EOF(NUM):
case YY_STATE_EOF(QUOTE):
case YY_STATE_EOF(FIRSTCCL):
case YY_STATE_EOF(CCL):
case YY_STATE_EOF(RECOVER):
case YY_STATE_EOF(PERCENT_BRACE_ACTION):
case YY_STATE_EOF(OPTION):
case YY_STATE_EOF(LINEDIR):
	yyterminate();
d4136 1
a4136 1
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;
d4139 1
a4139 1
		*yy_cp = yy_hold_char;
d4142 1
a4142 1
		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
d4148 1
a4148 1
			 * consistency between yy_current_buffer and our
d4153 3
a4155 3
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
d4165 1
a4165 1
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
d4169 1
a4169 1
			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;
d4171 1
a4171 1
			yy_current_state = yy_get_previous_state();
d4184 1
a4184 1
			yy_bp = yytext_ptr + YY_MORE_ADJ;
d4189 1
a4189 1
				yy_cp = ++yy_c_buf_p;
d4196 1
a4196 1
				yy_cp = yy_c_buf_p;
d4201 1
a4201 1
		else switch ( yy_get_next_buffer() )
d4205 1
a4205 1
				yy_did_buffer_switch_on_eof = 0;
d4207 1
a4207 1
				if ( yywrap() )
d4218 1
a4218 1
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
d4226 1
a4226 1
					if ( ! yy_did_buffer_switch_on_eof )
d4233 2
a4234 2
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;
d4236 1
a4236 1
				yy_current_state = yy_get_previous_state();
d4238 2
a4239 2
				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
d4243 2
a4244 2
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];
d4246 1
a4246 1
				yy_current_state = yy_get_previous_state();
d4248 2
a4249 2
				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
d4260 2
a4261 2
	} /* end of yylex */

d4270 4
a4273 5

static int yy_get_next_buffer YY_PROTO(( void ))
	{
	char *dest = yy_current_buffer->yy_ch_buf;
	char *source = yytext_ptr;
d4277 1
a4277 1
	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
d4281 1
a4281 1
	if ( yy_current_buffer->yy_fill_buffer == 0 )
d4283 1
a4283 1
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
d4303 1
a4303 1
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;
d4308 1
a4308 1
	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
d4312 1
a4312 1
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;
d4316 2
a4317 2
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;
d4321 1
a4321 1
#ifdef YY_USES_REJECT
a4323 29
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );
a4324 5
			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
d4331 2
a4332 2
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );
d4334 1
a4334 1
		yy_current_buffer->yy_n_chars = yy_n_chars;
d4337 1
a4337 1
	if ( yy_n_chars == 0 )
d4342 1
a4342 1
			yyrestart( yyin );
d4348 1
a4348 1
			yy_current_buffer->yy_buffer_status =
d4356 11
a4366 3
	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;
d4368 1
a4368 1
	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];
d4371 1
a4371 2
	}

d4375 2
a4376 2
static yy_state_type yy_get_previous_state YY_PROTO(( void ))
	{
d4379 3
d4383 2
a4384 2
	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();
d4386 1
a4386 1
	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
a4388 5
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
d4392 1
a4392 1
			if ( yy_current_state >= 769 )
d4396 1
d4400 1
a4400 2
	}

d4407 2
a4408 8

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
d4410 1
a4410 2
	char *yy_cp = yy_c_buf_p;

a4411 5
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
d4415 1
a4415 1
		if ( yy_current_state >= 769 )
d4419 3
a4421 1
	yy_is_jam = (yy_current_state == 768);
d4423 2
a4424 2
	return yy_is_jam ? 0 : yy_current_state;
	}
d4426 5
a4430 11

#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
char *yy_bp;
#endif
	{
	char *yy_cp = yy_c_buf_p;
d4433 1
a4433 1
	*yy_cp = yy_hold_char;
d4435 1
a4435 1
	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
d4438 3
a4440 3
		int number_to_move = yy_n_chars + 2;
		char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
d4442 1
a4442 1
				&yy_current_buffer->yy_ch_buf[number_to_move];
d4444 1
a4444 1
		while ( source > yy_current_buffer->yy_ch_buf )
d4449 2
a4450 2
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;
d4452 1
a4452 1
		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
d4458 4
d4463 1
a4463 7
	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


d4465 1
a4465 1
static int yyinput YY_PROTO(( void ))
d4467 1
a4467 1
static int input YY_PROTO(( void ))
d4469 2
a4470 1
	{
d4472 2
d4475 1
a4475 3
	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
d4481 1
a4481 1
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
d4483 1
a4483 1
			*yy_c_buf_p = '\0';
d4487 2
a4488 2
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;
d4490 1
a4490 1
			switch ( yy_get_next_buffer() )
d4504 1
a4504 1
					yyrestart( yyin );
d4506 1
a4506 1
					/* fall through */
d4510 1
a4510 1
					if ( yywrap() )
d4513 1
a4513 1
					if ( ! yy_did_buffer_switch_on_eof )
d4523 1
a4523 1
					yy_c_buf_p = yytext_ptr + offset;
d4529 3
a4531 3
	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;
d4533 1
a4533 1
	yy_current_buffer->yy_at_bol = (c == '\n');
d4536 2
a4537 1
	}
d4539 12
a4550 13

#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
d4553 3
d4557 14
a4570 8
#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
d4573 1
a4573 1
	if ( yy_current_buffer )
d4576 3
a4578 3
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
d4581 2
a4582 2
	yy_current_buffer = new_buffer;
	yy_load_buffer_state();
d4589 2
a4590 2
	yy_did_buffer_switch_on_eof = 1;
	}
d4592 16
a4607 22

#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
d4609 2
a4610 2

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
d4619 1
a4619 1
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
d4625 1
a4625 1
	yy_init_buffer( b, file );
d4628 1
a4628 1
	}
d4630 7
a4636 8

#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
d4640 2
a4641 2
	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;
d4644 1
a4644 1
		yy_flex_free( (void *) b->yy_ch_buf );
d4646 2
a4647 2
	yy_flex_free( (void *) b );
	}
d4649 5
d4655 4
a4658 17
#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );
d4663 13
a4675 11
#if defined(YY_ALWAYS_INTERACTIVE) && YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if defined(YY_NEVER_INTERACTIVE) && YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}

d4677 7
a4683 9
#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
d4700 81
a4780 2
	if ( b == yy_current_buffer )
		yy_load_buffer_state();
d4783 4
d4788 22
a4809 9
#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
d4811 1
a4811 1

d4818 1
a4818 1
	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
d4832 1
a4832 1
	yy_switch_to_buffer( b );
d4835 1
a4835 2
	}
#endif
d4837 23
a4859 27

#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
d4863 2
a4864 2
	int i;

d4866 2
a4867 2
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
d4871 2
a4872 2
	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];
d4874 1
a4874 1
	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;
d4876 1
a4876 1
	b = yy_scan_buffer( buf, n );
d4886 1
a4886 2
	}
#endif
d4888 3
a4890 10

#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
d4894 2
a4895 2
		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );
d4897 2
a4898 2
		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );
d4901 1
a4901 2
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );
d4903 2
a4904 3
		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
d4907 1
a4907 1
	yy_start_stack[yy_start_stack_ptr++] = YY_START;
d4910 1
a4910 2
	}
#endif
d4912 3
a4914 5

#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ))
	{
	if ( --yy_start_stack_ptr < 0 )
d4917 2
a4918 11
	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ))
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif
d4924 3
a4926 8
#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
d4928 1
a4928 3
	}


d4937 7
a4943 5
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
d4947 74
d5022 4
a5025 1
/* Internal utility routines. */
d5027 26
a5052 3
#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
d5054 2
a5055 4
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
d5057 43
a5099 1
	{
d5103 1
a5103 1
	}
d5107 2
a5108 7
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
d5114 1
a5114 1
	}
d5117 2
a5118 8

#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
d5120 1
a5120 1
	}
d5122 2
a5123 8
#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
d5132 8
a5139 1
	}
d5141 1
a5141 9
#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}
a5142 8
#if defined(YY_MAIN) && YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 650 "scan.l"
d5204 1
@


1.13
log
@Fix flex bug introduced by my prior commit.

Problem reported by STeve Andre' via jakob@@
@
text
@d1 1
a1 1
/*	$OpenBSD: initscan.c,v 1.12tsi Exp $	*/
d7 1
a7 1
 * $Header: /cvs/src/usr.bin/lex/initscan.c,v 1.12 2007/01/16 14:43:28 tsi Exp $
d1280 1
a1280 1
/* $Header: /cvs/src/usr.bin/lex/initscan.c,v 1.12 2007/01/16 14:43:28 tsi Exp $ */
d2898 1
a2898 1
static int yy_get_next_buffer()
d3030 1
a3030 1
static yy_state_type yy_get_previous_state()
d3140 1
a3140 1
static int yyinput()
d3142 1
a3142 1
static int input()
d3514 1
a3514 1
static void yy_pop_state()
d3525 1
a3525 1
static int yy_top_state()
@


1.12
log
@Eliminate gcc -Wundef warnings in flex-generated code.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: initscan.c,v 1.11 2006/12/06 05:03:29 ray Exp $	*/
d7 1
a7 1
 * $Header: /cvs/src/usr.bin/lex/initscan.c,v 1.11 2006/12/06 05:03:29 ray Exp $
d1280 1
a1280 1
/* $Header: /cvs/src/usr.bin/lex/initscan.c,v 1.11 2006/12/06 05:03:29 ray Exp $ */
d1365 1
a1365 1
#ifndef YY_NO_INPUT
d3343 1
a3343 1
#ifdef YY_ALWAYS_INTERACTIVE
d3346 1
a3346 1
#ifdef YY_NEVER_INTERACTIVE
d3637 1
a3637 1
#ifdef YY_MAIN
@


1.11
log
@Don't access buf[strlen(buf) - 1] for zero-length strings.

OK jaredy@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: initscan.c,v 1.10 2003/06/04 17:34:44 millert Exp $	*/
d7 1
a7 1
 * $Header: /home/ray/openbsd/src/usr.bin/lex/initscan.c,v 1.10 2003/06/04 17:34:44 millert Exp $
d1280 1
a1280 1
/* $Header: /home/ray/openbsd/src/usr.bin/lex/initscan.c,v 1.10 2003/06/04 17:34:44 millert Exp $ */
d1373 1
a1373 1
#if YY_STACK_USED
d3343 1
a3343 1
#if YY_ALWAYS_INTERACTIVE
d3346 1
a3346 1
#if YY_NEVER_INTERACTIVE
d3637 1
a3637 1
#if YY_MAIN
@


1.10
log
@Update flex license from sourceforge version (is now 2-term BSD)
@
text
@d1 1
a1 1
/*	$OpenBSD: initscan.c,v 1.9 2002/05/31 22:49:29 deraadt Exp $	*/
d7 1
a7 1
 * $Header: /cvs/src/usr.bin/lex/initscan.c,v 1.9 2002/05/31 22:49:29 deraadt Exp $
d1280 1
a1280 1
/* $Header: /cvs/src/usr.bin/lex/initscan.c,v 1.9 2002/05/31 22:49:29 deraadt Exp $ */
d2055 2
a2056 1
			nmstr[strlen( nmstr ) - 1] = '\0';
@


1.9
log
@recommit strlcpy/snprintf diff after i found my bug
@
text
@d1 1
a1 1
/*	$OpenBSD: initscan.c,v 1.7 2002/05/30 10:53:44 deraadt Exp $	*/
d7 1
a7 1
 * $Header: /cvs/src/usr.bin/lex/initscan.c,v 1.7 2002/05/30 10:53:44 deraadt Exp $
d1260 18
a1277 13
 * Redistribution and use in source and binary forms are permitted provided
 * that: (1) source distributions retain this entire copyright notice and
 * comment, and (2) distributions including binaries display the following
 * acknowledgement:  ``This product includes software developed by the
 * University of California, Berkeley and its contributors'' in the
 * documentation or other materials provided with the distribution and in
 * all advertising materials mentioning features or use of this software.
 * Neither the name of the University nor the names of its contributors may
 * be used to endorse or promote products derived from this software without
 * specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
d1280 1
a1280 1
/* $Header: /cvs/src/usr.bin/lex/initscan.c,v 1.7 2002/05/30 10:53:44 deraadt Exp $ */
@


1.8
log
@undo until i find my #line bug
@
text
@d1 1
a1 1
/*	$OpenBSD: initscan.c,v 1.6 2001/11/19 19:02:14 mpech Exp $	*/
d7 1
a7 1
 * $Header: /cvs/src/usr.bin/lex/initscan.c,v 1.6 2001/11/19 19:02:14 mpech Exp $
d1275 1
a1275 1
/* $Header: /cvs/src/usr.bin/lex/initscan.c,v 1.6 2001/11/19 19:02:14 mpech Exp $ */
d1297 1
a1297 1
	strcpy( nmstr, yytext ); \
d1670 1
a1670 1
			strcpy( nmstr, yytext );
d1771 1
a1771 1
			strcpy( (char *) nmdef, yytext );
d2049 1
a2049 1
			strcpy( nmstr, yytext + 1 );
d2260 1
a2260 1
			strcpy( nmstr, yytext );
d2298 1
a2298 1
			strcpy( nmstr, yytext + 1 );
@


1.7
log
@use strlcpy and snprintf
@
text
@d1297 1
a1297 1
	strlcpy( nmstr, yytext, sizeof nmstr ); \
d1670 1
a1670 1
			strlcpy( nmstr, yytext, sizeof nmstr );
d1771 1
a1771 1
			strlcpy( (char *) nmdef, yytext, sizeof nmdef );
d2049 1
a2049 1
			strlcpy( nmstr, yytext + 1, sizeof nmstr );
d2260 1
a2260 1
			strlcpy( nmstr, yytext, sizeof nmstr );
d2298 1
a2298 1
			strlcpy( nmstr, yytext + 1, sizeof nmstr );
@


1.6
log
@kill more registers

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: initscan.c,v 1.5 1997/07/25 21:05:29 mickey Exp $	*/
d7 1
a7 1
 * $Header: /cvs/src/usr.bin/lex/initscan.c,v 1.5 1997/07/25 21:05:29 mickey Exp $
d1275 1
a1275 1
/* $Header: /cvs/src/usr.bin/lex/initscan.c,v 1.5 1997/07/25 21:05:29 mickey Exp $ */
d1297 1
a1297 1
	strcpy( nmstr, yytext ); \
d1670 1
a1670 1
			strcpy( nmstr, yytext );
d1771 1
a1771 1
			strcpy( (char *) nmdef, yytext );
d2049 1
a2049 1
			strcpy( nmstr, yytext + 1 );
d2260 1
a2260 1
			strcpy( nmstr, yytext );
d2298 1
a2298 1
			strcpy( nmstr, yytext + 1 );
@


1.5
log
@#if __STDC__ --> #ifdef __STDC__
@
text
@d1 1
a1 1
/*	$OpenBSD: initscan.c,v 1.4 1996/12/10 22:22:01 millert Exp $	*/
d7 1
a7 1
 * $Header: /cvs/src/usr.bin/lex/initscan.c,v 1.4 1996/12/10 22:22:01 millert Exp $
d1275 1
a1275 1
/* $Header: /cvs/src/usr.bin/lex/initscan.c,v 1.4 1996/12/10 22:22:01 millert Exp $ */
d1484 3
a1486 3
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
d1542 1
a1542 1
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
d2295 1
a2295 1
			register Char *nmdefptr;
d2894 3
a2896 3
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
d3026 2
a3027 2
	register yy_state_type yy_current_state;
	register char *yy_cp;
d3034 1
a3034 1
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
d3066 2
a3067 2
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;
d3069 1
a3069 1
	register YY_CHAR yy_c = 1;
d3090 1
a3090 1
static void yyunput( int c, register char *yy_bp )
d3094 1
a3094 1
register char *yy_bp;
d3097 1
a3097 1
	register char *yy_cp = yy_c_buf_p;
d3105 2
a3106 2
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
d3108 1
a3108 1
		register char *source =
d3570 1
a3570 1
	register int i;
d3584 1
a3584 1
	register int n;
@


1.4
log
@Flex 2.5.4
@
text
@d1 1
a1 1
/*	$OpenBSD: initscan.c,v 1.3 1996/07/13 22:22:03 millert Exp $	*/
d7 1
a7 1
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
d38 1
a38 1
#if __STDC__
d1275 1
a1275 1
/* $Header: /home/daffy/u0/vern/flex/RCS/scan.l,v 2.56 95/04/24 12:17:19 vern Exp $ */
d1391 1
a1391 1
#if __STDC__
@


1.3
log
@updated to flex 2.5.3
@
text
@d1 1
a1 1
/*	$OpenBSD: initscan.c,v 1.2 1996/06/26 05:35:36 deraadt Exp $	*/
d7 1
a7 1
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.89 96/05/25 21:02:21 vern Exp $
d242 1
a242 1
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *str ));
d2934 1
a2934 1
		yy_n_chars = 0;
d2989 2
d3116 2
a3117 1
		yy_n_chars = yy_current_buffer->yy_buf_size;
d3160 16
a3178 2
						{
						yy_c_buf_p = yytext_ptr + offset;
a3179 1
						}
a3192 9

				case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
					YY_FATAL_ERROR(
					"unexpected last match in yyinput()" );
#else
					YY_FATAL_ERROR(
					"unexpected last match in input()" );
#endif
d3357 3
d3419 1
a3419 1
YY_BUFFER_STATE yy_scan_string( yyconst char *str )
d3421 2
a3422 2
YY_BUFFER_STATE yy_scan_string( str )
yyconst char *str;
d3426 1
a3426 1
	for ( len = 0; str[len]; ++len )
d3429 1
a3429 1
	return yy_scan_bytes( str, len );
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d7 1
a7 1
 * $Header: /cvs/src/usr.bin/lex/initscan.c,v 1.1.1.1 1995/10/18 08:45:30 deraadt Exp $
d132 1
d1243 1
d1275 1
a1275 1
/* $Header: /cvs/src/usr.bin/lex/initscan.c,v 1.1.1.1 1995/10/18 08:45:30 deraadt Exp $ */
d1334 1
a1334 1
#line 1331 "scan.c"
d1356 4
d1499 1
a1499 1
#line 1492 "scan.c"
d2737 1
a2737 1
#line 2730 "scan.c"
d2761 1
d2907 1
a2907 1
			/* We matched a singled characater, the EOB, so
d3152 1
a3152 1
			yytext_ptr = yy_c_buf_p;
d3161 1
a3161 2
						yy_c_buf_p =
						yytext_ptr + YY_MORE_ADJ;
d3175 1
a3175 1
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
d3540 1
a3540 1
		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
d3563 16
@


1.1
log
@Initial revision
@
text
@d1 2
d7 1
a7 1
 * $Header: /a/cvsroot/src/usr.bin/lex/initscan.c,v 1.10 1995/05/05 05:35:27 jtc Exp $
d1273 1
a1273 1
/* $Header: /a/cvsroot/src/usr.bin/lex/initscan.c,v 1.10 1995/05/05 05:35:27 jtc Exp $ */
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
