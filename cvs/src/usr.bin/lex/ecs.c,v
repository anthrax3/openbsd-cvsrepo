head	1.9;
access;
symbols
	OPENBSD_6_2:1.9.0.6
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.9.0.8
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.4
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.6.0.52
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.44
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.48
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.46
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.42
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.40
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.38
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.36
	OPENBSD_5_0:1.6.0.34
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.32
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.30
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.26
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.28
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.24
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.22
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.20
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.18
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.16
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.14
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.12
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.10
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.5.0.6
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.20
	OPENBSD_2_8:1.3.0.18
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.16
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.14
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.12
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.10
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2015.11.20.18.54.49;	author tedu;	state Exp;
branches;
next	1.8;
commitid	1DCLbr246dYBrwsL;

1.8
date	2015.11.19.23.34.56;	author mmcc;	state Exp;
branches;
next	1.7;
commitid	sr9v9L5qZs3TeEb4;

1.7
date	2015.11.19.19.43.40;	author tedu;	state Exp;
branches;
next	1.6;
commitid	TCPdLh99ETkn9X6R;

1.6
date	2003.06.04.17.34.44;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.11.19.19.02.14;	author mpech;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.17.07.30.42;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.07.13.22.21.57;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.35.30;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.29;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.29;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.9
log
@ansi
@
text
@/*	$OpenBSD: ecs.c,v 1.8 2015/11/19 23:34:56 mmcc Exp $	*/

/* ecs - equivalence class routines */

/*  Copyright (c) 1990 The Regents of the University of California. */
/*  All rights reserved. */

/*  This code is derived from software contributed to Berkeley by */
/*  Vern Paxson. */

/*  The United States Government has rights in this work pursuant */
/*  to contract no. DE-AC03-76SF00098 between the United States */
/*  Department of Energy and the University of California. */

/* This file is part of flex */

/*  Redistribution and use in source and binary forms, with or without */
/*  modification, are permitted provided that the following conditions */
/*  are met: */

/*  1. Redistributions of source code must retain the above copyright */
/*     notice, this list of conditions and the following disclaimer. */
/*  2. Redistributions in binary form must reproduce the above copyright */
/*     notice, this list of conditions and the following disclaimer in the */
/*     documentation and/or other materials provided with the distribution. */

/*  Neither the name of the University nor the names of its contributors */
/*  may be used to endorse or promote products derived from this software */
/*  without specific prior written permission. */

/*  THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR */
/*  IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED */
/*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR */
/*  PURPOSE. */


#include "flexdef.h"

/* ccl2ecl - convert character classes to set of equivalence classes */

void 
ccl2ecl(void)
{
	int i, ich, newlen, cclp, ccls, cclmec;

	for (i = 1; i <= lastccl; ++i) {
		/*
		 * We loop through each character class, and for each
		 * character in the class, add the character's equivalence
		 * class to the new "character" class we are creating.  Thus
		 * when we are all done, character classes will really
		 * consist of collections of equivalence classes
		 */

		newlen = 0;
		cclp = cclmap[i];

		for (ccls = 0; ccls < ccllen[i]; ++ccls) {
			ich = ccltbl[cclp + ccls];
			cclmec = ecgroup[ich];

			if (cclmec > 0) {
				ccltbl[cclp + newlen] = cclmec;
				++newlen;
			}
		}

		ccllen[i] = newlen;
	}
}


/* cre8ecs - associate equivalence class numbers with class members
 *
 * fwd is the forward linked-list of equivalence class members.  bck
 * is the backward linked-list, and num is the number of class members.
 *
 * Returned is the number of classes.
 */

int 
cre8ecs(int *fwd, int *bck, int num)
{
	int i, j, numcl;

	numcl = 0;

	/*
	 * Create equivalence class numbers.  From now on, ABS( bck(x) ) is
	 * the equivalence class number for object x.  If bck(x) is positive,
	 * then x is the representative of its equivalence class.
	 */
	for (i = 1; i <= num; ++i)
		if (bck[i] == NIL) {
			bck[i] = ++numcl;
			for (j = fwd[i]; j != NIL; j = fwd[j])
				bck[j] = -numcl;
		}
	return numcl;
}


/* mkeccl - update equivalence classes based on character class xtions
 *
 * synopsis
 *    u_char ccls[];
 *    int lenccl, fwd[llsiz], bck[llsiz], llsiz, NUL_mapping;
 *    void mkeccl( u_char ccls[], int lenccl, int fwd[llsiz], int bck[llsiz],
 *			int llsiz, int NUL_mapping );
 *
 * ccls contains the elements of the character class, lenccl is the
 * number of elements in the ccl, fwd is the forward link-list of equivalent
 * characters, bck is the backward link-list, and llsiz size of the link-list.
 *
 * NUL_mapping is the value which NUL (0) should be mapped to.
 */

void 
mkeccl(u_char *ccls, int lenccl, int *fwd, int *bck, int llsiz, int NUL_mapping)
{
	int cclp, oldec, newec;
	int cclm, i, j;
	static unsigned char cclflags[CSIZE];	/* initialized to all '\0' */

	/*
	 * Note that it doesn't matter whether or not the character class is
	 * negated.  The same results will be obtained in either case.
	 */

	cclp = 0;

	while (cclp < lenccl) {
		cclm = ccls[cclp];

		if (NUL_mapping && cclm == 0)
			cclm = NUL_mapping;

		oldec = bck[cclm];
		newec = cclm;

		j = cclp + 1;

		for (i = fwd[cclm]; i != NIL && i <= llsiz; i = fwd[i]) {
			/* look for the symbol in the character class */
			for (; j < lenccl; ++j) {
				int ccl_char;

				if (NUL_mapping && ccls[j] == 0)
					ccl_char = NUL_mapping;
				else
					ccl_char = ccls[j];

				if (ccl_char > i)
					break;

				if (ccl_char == i && !cclflags[j]) {
					/*
					 * We found an old companion of cclm
					 * in the ccl.  Link it into the new
					 * equivalence class and flag it as
					 * having been processed.
					 */

					bck[i] = newec;
					fwd[newec] = i;
					newec = i;
					/* Set flag so we don't reprocess. */
					cclflags[j] = 1;

					/* Get next equivalence class member. */
					/* continue 2 */
					goto next_pt;
				}
			}

			/*
			 * Symbol isn't in character class.  Put it in the
			 * old equivalence class.
			 */

			bck[i] = oldec;

			if (oldec != NIL)
				fwd[oldec] = i;

			oldec = i;

	next_pt:	;
		}

		if (bck[cclm] != NIL || oldec != bck[cclm]) {
			bck[cclm] = NIL;
			fwd[oldec] = NIL;
		}
		fwd[newec] = NIL;

		/* Find next ccl member to process. */

		for (++cclp; cclflags[cclp] && cclp < lenccl; ++cclp) {
			/* Reset "doesn't need processing" flag. */
			cclflags[cclp] = 0;
		}
	}
}


/* mkechar - create equivalence class for single character */

void 
mkechar(int tch, int *fwd, int *bck)
{
	/*
	 * If until now the character has been a proper subset of an
	 * equivalence class, break it away to create a new ec
	 */

	if (fwd[tch] != NIL)
		bck[fwd[tch]] = bck[tch];

	if (bck[tch] != NIL)
		fwd[bck[tch]] = fwd[tch];

	fwd[tch] = NIL;
	bck[tch] = NIL;
}
@


1.8
log
@Replace Char (defined as unsigned char) with u_char.

ok tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ecs.c,v 1.7 2015/11/19 19:43:40 tedu Exp $	*/
d41 2
a42 1
void    ccl2ecl ()
d44 1
a44 1
	int     i, ich, newlen, cclp, ccls, cclmec;
d47 6
a52 5
		/* We loop through each character class, and for each character
		 * in the class, add the character's equivalence class to the
		 * new "character" class we are creating.  Thus when we are all
		 * done, character classes will really consist of collections
		 * of equivalence classes
d81 2
a82 2
int     cre8ecs (fwd, bck, num)
     int     fwd[], bck[], num;
d84 1
a84 1
	int     i, j, numcl;
d88 4
a91 4
	/* Create equivalence class numbers.  From now on, ABS( bck(x) )
	 * is the equivalence class number for object x.  If bck(x)
	 * is positive, then x is the representative of its equivalence
	 * class.
a98 1

d118 2
a119 3
void    mkeccl (ccls, lenccl, fwd, bck, llsiz, NUL_mapping)
     u_char    ccls[];
     int     lenccl, fwd[], bck[], llsiz, NUL_mapping;
d121 2
a122 2
	int     cclp, oldec, newec;
	int     cclm, i, j;
d125 2
a126 1
	/* Note that it doesn't matter whether or not the character class is
d143 2
a144 1
		for (i = fwd[cclm]; i != NIL && i <= llsiz; i = fwd[i]) {	/* look for the symbol in the character class */
d157 2
a158 1
					/* We found an old companion of cclm
d176 3
a178 2
			/* Symbol isn't in character class.  Put it in the old
			 * equivalence class.
d188 1
a188 1
		      next_pt:;
a194 1

d209 2
a210 2
void    mkechar (tch, fwd, bck)
     int     tch, fwd[], bck[];
d212 3
a214 2
	/* If until now the character has been a proper subset of
	 * an equivalence class, break it away to create a new ec
@


1.7
log
@Update flex from ancient 2.5.4 to the recent 2.5.39.
This work was all done by Serguey Parkhomovsky. Thanks.
Some changes from upstream:
* Removed autotools cruft/localization/texinfo manual/etc
* Kept the old manpage, as the new manpage is content-free
* Used safe string handling functions and fixed several compiler warnings
* pledge(2). Flex 2.5.39 now forks/execs its filter chains and needs proc
  exec in addition to what was previously pledged
* Removed register keyword from all variable declarations
* renamed parse.c, parse.h, scan.c, skel.c with init prefix so compiling
  flex outside of obj by accident wouldn't clobber the bootstrap files
* Minor fixes (spelling, accessing buf[strlen(buf) - 1] for zero-length
  strings in initscan.c/scan.l, etc) that were already in our tree

This is a huge change, so it's going in the tree code bomb style.
I'm not excited about the growth in complexity (like now running m4
to _post_ process lexers) but hopefully this will be a one time update
and we will now take "ownership" of the code.
@
text
@d1 1
a1 1
/*	$OpenBSD: ecs.c,v 1.6 2003/06/04 17:34:44 millert Exp $	*/
d105 1
a105 1
 *    Char ccls[];
d107 1
a107 1
 *    void mkeccl( Char ccls[], int lenccl, int fwd[llsiz], int bck[llsiz],
d118 1
a118 1
     Char    ccls[];
@


1.6
log
@Update flex license from sourceforge version (is now 2-term BSD)
@
text
@d1 1
a1 1
/*	$OpenBSD: ecs.c,v 1.5 2001/11/19 19:02:14 mpech Exp $	*/
d5 30
a34 30
/*-
 * Copyright (c) 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Vern Paxson.
 * 
 * The United States Government has rights in this work pursuant
 * to contract no. DE-AC03-76SF00098 between the United States
 * Department of Energy and the University of California.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * Neither the name of the University nor the names of its contributors
 * may be used to endorse or promote products derived from this software
 * without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE.
 */
a35 1
/* $Header: /cvs/src/usr.bin/lex/ecs.c,v 1.5 2001/11/19 19:02:14 mpech Exp $ */
d41 3
a43 3
void ccl2ecl()
	{
	int i, ich, newlen, cclp, ccls, cclmec;
d45 1
a45 2
	for ( i = 1; i <= lastccl; ++i )
		{
d56 1
a56 2
		for ( ccls = 0; ccls < ccllen[i]; ++ccls )
			{
d60 1
a60 2
			if ( cclmec > 0 )
				{
a62 1
				}
d64 1
a66 1
		}
d68 1
d79 4
a82 4
int cre8ecs( fwd, bck, num )
int fwd[], bck[], num;
	{
	int i, j, numcl;
d91 2
a92 3
	for ( i = 1; i <= num; ++i )
		if ( bck[i] == NIL )
			{
d94 1
a94 1
			for ( j = fwd[i]; j != NIL; j = fwd[j] )
d96 1
a96 1
			}
d99 1
a99 1
	}
d117 6
a122 6
void mkeccl( ccls, lenccl, fwd, bck, llsiz, NUL_mapping )
Char ccls[];
int lenccl, fwd[], bck[], llsiz, NUL_mapping;
	{
	int cclp, oldec, newec;
	int cclm, i, j;
d131 1
a131 2
	while ( cclp < lenccl )
		{
d134 1
a134 1
		if ( NUL_mapping && cclm == 0 )
d142 2
a143 4
		for ( i = fwd[cclm]; i != NIL && i <= llsiz; i = fwd[i] )
			{ /* look for the symbol in the character class */
			for ( ; j < lenccl; ++j )
				{
d146 1
a146 1
				if ( NUL_mapping && ccls[j] == 0 )
d151 1
a151 1
				if ( ccl_char > i )
d154 1
a154 2
				if ( ccl_char == i && ! cclflags[j] )
					{
a169 1
					}
d171 1
d179 1
a179 1
			if ( oldec != NIL )
d184 2
a185 2
			next_pt: ;
			}
d187 1
a187 2
		if ( bck[cclm] != NIL || oldec != bck[cclm] )
			{
d190 1
a190 1
			}
d196 1
a196 2
		for ( ++cclp; cclflags[cclp] && cclp < lenccl; ++cclp )
			{
a198 1
			}
d201 1
d206 3
a208 3
void mkechar( tch, fwd, bck )
int tch, fwd[], bck[];
	{
d213 1
a213 1
	if ( fwd[tch] != NIL )
d216 1
a216 1
	if ( bck[tch] != NIL )
d221 1
a221 1
	}
@


1.5
log
@kill more registers

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: ecs.c,v 1.4 2001/06/17 07:30:42 deraadt Exp $	*/
d17 17
a33 12
 * modification, are permitted provided that: (1) source distributions
 * retain this entire copyright notice and comment, and (2) distributions
 * including binaries display the following acknowledgement:  ``This product
 * includes software developed by the University of California, Berkeley
 * and its contributors'' in the documentation or other materials provided
 * with the distribution and in all advertising materials mentioning
 * features or use of this software. Neither the name of the University nor
 * the names of its contributors may be used to endorse or promote products
 * derived from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
d36 1
a36 1
/* $Header: /cvs/src/usr.bin/lex/ecs.c,v 1.4 2001/06/17 07:30:42 deraadt Exp $ */
@


1.4
log
@Vern says:
Yes, this came up a while ago, and I put together a flex release with
a modified copyright that begins:
     Redistribution and use in source and binary forms, with or
     without modification, are permitted provided that:
[...] feel free to update the copyrights in each of the files with the
one in COPYING.
@
text
@d1 1
a1 1
/*	$OpenBSD: ecs.c,v 1.3 1996/07/13 22:21:57 millert Exp $	*/
d31 1
a31 1
/* $Header: /cvs/src/usr.bin/lex/ecs.c,v 1.3 1996/07/13 22:21:57 millert Exp $ */
d147 1
a147 1
				register int ccl_char;
@


1.3
log
@updated to flex 2.5.3
@
text
@d1 1
a1 1
/*	$OpenBSD: ecs.c,v 1.2 1996/06/26 05:35:30 deraadt Exp $	*/
d16 10
a25 10
 * Redistribution and use in source and binary forms are permitted provided
 * that: (1) source distributions retain this entire copyright notice and
 * comment, and (2) distributions including binaries display the following
 * acknowledgement:  ``This product includes software developed by the
 * University of California, Berkeley and its contributors'' in the
 * documentation or other materials provided with the distribution and in
 * all advertising materials mentioning features or use of this software.
 * Neither the name of the University nor the names of its contributors may
 * be used to endorse or promote products derived from this software without
 * specific prior written permission.
d31 1
a31 1
/* $Header: /home/daffy/u0/vern/flex/RCS/ecs.c,v 2.9 93/12/07 10:18:20 vern Exp $ */
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d31 1
a31 1
/* $Header: /cvs/src/usr.bin/lex/ecs.c,v 1.1.1.1 1995/10/18 08:45:29 deraadt Exp $ */
@


1.1
log
@Initial revision
@
text
@d1 2
d31 1
a31 1
/* $Header: /a/cvsroot/src/usr.bin/lex/ecs.c,v 1.7 1995/05/05 05:35:15 jtc Exp $ */
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
