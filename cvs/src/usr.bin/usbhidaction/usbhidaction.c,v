head	1.22;
access;
symbols
	OPENBSD_6_0:1.22.0.2
	OPENBSD_6_0_BASE:1.22
	OPENBSD_5_9:1.21.0.2
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.19.0.6
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.19.0.2
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.17.0.6
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.17.0.4
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.16.0.6
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.4
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.2
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.4
	OPENBSD_5_0:1.15.0.2
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.14.0.4
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.2
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.10.0.8
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.4
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.2
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.9.0.6
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.4
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.2
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.6.0.6
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.4
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.2
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.2.0.8
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.6
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2;
locks; strict;
comment	@ * @;


1.22
date	2016.03.17.19.40.43;	author krw;	state Exp;
branches;
next	1.21;
commitid	aCmYZrmRmWHLuztW;

1.21
date	2015.10.26.10.08.14;	author jung;	state Exp;
branches;
next	1.20;
commitid	HllzbCvumEtKpBqi;

1.20
date	2015.10.26.09.57.55;	author deraadt;	state Exp;
branches;
next	1.19;
commitid	lT6pbS5V0UKyyVn8;

1.19
date	2015.01.18.17.18.08;	author mpi;	state Exp;
branches;
next	1.18;
commitid	DSfKatr5LR7W3bPk;

1.18
date	2014.08.15.03.51.40;	author guenther;	state Exp;
branches;
next	1.17;
commitid	ILfd29dGeQRUYnTr;

1.17
date	2013.11.27.00.13.23;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2012.03.23.10.04.59;	author robert;	state Exp;
branches;
next	1.15;

1.15
date	2011.03.07.14.59.06;	author jasper;	state Exp;
branches;
next	1.14;

1.14
date	2010.06.29.17.16.35;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2010.06.29.17.15.23;	author ckuethe;	state Exp;
branches;
next	1.12;

1.12
date	2009.10.21.15.48.27;	author sobrado;	state Exp;
branches;
next	1.11;

1.11
date	2009.10.14.20.36.56;	author guenther;	state Exp;
branches;
next	1.10;

1.10
date	2008.06.26.05.42.21;	author ray;	state Exp;
branches;
next	1.9;

1.9
date	2007.02.23.17.37.28;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2006.07.09.23.02.21;	author mk;	state Exp;
branches;
next	1.7;

1.7
date	2006.04.23.08.51.24;	author fgsch;	state Exp;
branches;
next	1.6;

1.6
date	2004.10.27.18.16.57;	author jaredy;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.14.22.59.26;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2004.06.04.00.47.32;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2004.04.03.21.01.25;	author jmc;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.11.06.16.36;	author jsyn;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.10.00.09.17;	author nate;	state Exp;
branches;
next	;


desc
@@


1.22
log
@Last parameter to execl[e]() functions *must* be cast to a pointer.
Just NULL is not good practise as NULL is theoretically allowed to
be an integer rather than a pointer.

Use (char *)NULL consistently instead of scattering a few (char *)0
and (void *)NULL into the mix.

Prompted by and probably ok deraadt@@ millert@@ kettenis@@

Definitely ok mestre@@ ratchov@@
@
text
@/*	$OpenBSD: usbhidaction.c,v 1.21 2015/10/26 10:08:14 jung Exp $ */
/*      $NetBSD: usbhidaction.c,v 1.7 2002/01/18 14:38:59 augustss Exp $ */

/*
 * Copyright (c) 2000, 2002 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Lennart Augustsson <lennart@@augustsson.net>.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <err.h>
#include <fcntl.h>
#include <limits.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/ioctl.h>
#include <dev/usb/usb.h>
#include <dev/usb/usbhid.h>
#include <usbhid.h>
#include <syslog.h>
#include <signal.h>
#include <paths.h>

int verbose = 0;
int isdemon = 0;

volatile sig_atomic_t reparse = 0;

struct command {
	struct command *next;
	int line;

	struct hid_item item;
	int value;
	char anyvalue;
	char *name;
	char *action;
};
struct command *commands;

#define SIZE 4000

void usage(void);
struct command *parse_conf(const char *, report_desc_t, int, int);
void docmd(struct command *, int, const char *, int, char **);
void freecommands(struct command *);

/* ARGSUSED */
static void
sighup(int signo)
{
	reparse = 1;
}

int
main(int argc, char **argv)
{
	const char *conf = NULL;
	const char *dev = NULL;
	int fd, ch, sz, n, val, i;
	int demon, ignore;
	report_desc_t repd;
	char buf[100];
	char devnamebuf[PATH_MAX];
	struct command *cmd;
	int reportid;

	demon = 1;
	ignore = 0;
	while ((ch = getopt(argc, argv, "c:df:iv")) != -1) {
		switch(ch) {
		case 'c':
			conf = optarg;
			break;
		case 'd':
			demon ^= 1;
			break;
		case 'i':
			ignore++;
			break;
		case 'f':
			dev = optarg;
			break;
		case 'v':
			demon = 0;
			verbose++;
			break;
		case '?':
		default:
			usage();
		}
	}
	argc -= optind;
	argv += optind;

	if (conf == NULL || dev == NULL)
		usage();

	if (hid_start(NULL) == -1)
		errx(1, "hid_init");

	if (dev[0] != '/') {
		snprintf(devnamebuf, sizeof(devnamebuf), "/dev/%s%s",
		    isdigit((unsigned char)dev[0]) ? "uhid" : "", dev);
		dev = devnamebuf;
	}

	if (demon && conf[0] != '/')
		errx(1, "config file must have an absolute path, %s", conf);

	fd = open(dev, O_RDWR | O_CLOEXEC);
	if (fd < 0)
		err(1, "%s", dev);

	if (ioctl(fd, USB_GET_REPORT_ID, &reportid) < 0)
		reportid = -1;
	repd = hid_get_report_desc(fd);
	if (repd == NULL)
		err(1, "hid_get_report_desc() failed");

	commands = parse_conf(conf, repd, reportid, ignore);

	sz = hid_report_size(repd, hid_input, reportid);

	if (verbose)
		printf("report size %d\n", sz);
	if (sz > sizeof buf)
		errx(1, "report too large");

	(void)signal(SIGHUP, sighup);

	/* we do not care about the children, so ignore them */
	(void)signal(SIGCHLD, SIG_IGN);

	if (demon) {
		if (daemon(0, 0) < 0)
			err(1, "daemon()");
		isdemon = 1;
	}

	for(;;) {
		n = read(fd, buf, sz);
		if (verbose > 2) {
			printf("read %d bytes:", n);
			for (i = 0; i < n; i++)
				printf(" %02x", buf[i]);
			printf("\n");
		}
		if (n < 0) {
			if (verbose)
				err(1, "read");
			else
				exit(1);
		}
		if (n != sz) {
			err(2, "read size");
		}
		for (cmd = commands; cmd; cmd = cmd->next) {
			val = hid_get_data(buf, &cmd->item);
			if (cmd->value == val || cmd->anyvalue)
				docmd(cmd, val, dev, argc, argv);
		}
		if (reparse) {
			struct command *cmds =
			    parse_conf(conf, repd, reportid, ignore);
			if (cmds) {
				freecommands(commands);
				commands = cmds;
			}
			reparse = 0;
		}
	}

	exit(0);
}

void
usage(void)
{
	extern char *__progname;

	fprintf(stderr, "usage: %s [-div] -c config-file -f device arg ...\n",
	    __progname);
	exit(1);
}

static int
peek(FILE *f)
{
	int c;

	c = getc(f);
	if (c != EOF)
		ungetc(c, f);
	return c;
}

struct command *
parse_conf(const char *conf, report_desc_t repd, int reportid, int ignore)
{
	FILE *f;
	char *p;
	int line;
	char buf[SIZE], name[SIZE], value[SIZE], action[SIZE];
	char usage[SIZE], coll[SIZE];
	struct command *cmd, *cmds;
	struct hid_data *d;
	struct hid_item h;
	int u, lo, hi, range;

	f = fopen(conf, "r");
	if (f == NULL)
		err(1, "%s", conf);

	cmds = NULL;
	for (line = 1; ; line++) {
		if (fgets(buf, sizeof buf, f) == NULL)
			break;
		if (buf[0] == '#' || buf[0] == '\n')
			continue;
		p = strchr(buf, '\n');
		while (p && isspace(peek(f))) {
			if (fgets(p, sizeof buf - strlen(buf), f) == NULL)
				break;
			p = strchr(buf, '\n');
		}
		if (p)
			*p = 0;
		if (sscanf(buf, "%s %s %[^\n]", name, value, action) != 3) {
			if (isdemon) {
				syslog(LOG_WARNING, "config file `%s', line %d"
				    ", syntax error: %s", conf, line, buf);
				freecommands(cmds);
				fclose(f);
				return (NULL);
			} else {
				errx(1, "config file `%s', line %d"
				    ", syntax error: %s", conf, line, buf);
			}
		}

		cmd = malloc(sizeof *cmd);
		if (cmd == NULL)
			err(1, "malloc failed");
		cmd->next = cmds;
		cmds = cmd;
		cmd->line = line;

		if (strcmp(value, "*") == 0) {
			cmd->anyvalue = 1;
		} else {
			cmd->anyvalue = 0;
			if (sscanf(value, "%d", &cmd->value) != 1) {
				if (isdemon) {
					syslog(LOG_WARNING,
					    "config file `%s', line %d, "
					    "bad value: %s",
					    conf, line, value);
					freecommands(cmds);
					fclose(f);
					return (NULL);
				} else {
					errx(1, "config file `%s', line %d, "
					    "bad value: %s",
					    conf, line, value);
				}
			}
		}

		coll[0] = 0;
		d = hid_start_parse(repd, 1 << hid_input, reportid);
		if (d == NULL)
			err(1, "hid_start_parse failed");
		while (hid_get_item(d, &h)) {
			if (verbose > 2)
				printf("kind=%d usage=%x\n", h.kind, h.usage);
			if (h.flags & HIO_CONST)
				continue;
			switch (h.kind) {
			case hid_input:
				if (h.usage_minimum != 0 ||
				    h.usage_maximum != 0) {
					lo = h.usage_minimum;
					hi = h.usage_maximum;
					range = 1;
				} else {
					lo = h.usage;
					hi = h.usage;
					range = 0;
				}
				for (u = lo; u <= hi; u++) {
					snprintf(usage, sizeof usage,  "%s:%s",
						 hid_usage_page(HID_PAGE(u)),
						 hid_usage_in_page(u));
					if (verbose > 2)
						printf("usage %s\n", usage);
					if (!strcasecmp(usage, name))
						goto foundhid;
					if (coll[0]) {
						snprintf(usage, sizeof usage,
						  "%s.%s:%s", coll+1,
						  hid_usage_page(HID_PAGE(u)),
						  hid_usage_in_page(u));
						if (verbose > 2)
							printf("usage %s\n",
							    usage);
						if (!strcasecmp(usage, name))
							goto foundhid;
					}
				}
				break;
			case hid_collection:
				snprintf(coll + strlen(coll),
				    sizeof coll - strlen(coll),  ".%s:%s",
				    hid_usage_page(HID_PAGE(h.usage)),
				    hid_usage_in_page(h.usage));
				break;
			case hid_endcollection:
				if (coll[0])
					*strrchr(coll, '.') = 0;
				break;
			default:
				break;
			}
		}
		hid_end_parse(d);
		if (ignore) {
			if (verbose)
				warnx("ignore item '%s'", name);
			/* pop and free this ignored item */
			cmds = cmd->next;
			free(cmd);
			continue;
		}
		if (isdemon) {
			syslog(LOG_WARNING, "config file `%s', line %d, HID "
			    "item not found: `%s'", conf, line, name);
			freecommands(cmds);
			fclose(f);
			return (NULL);
		} else {
			errx(1, "config file `%s', line %d, HID item "
			    "not found: `%s'", conf, line, name);
		}

	foundhid:
		hid_end_parse(d);
		cmd->item = h;
		cmd->name = strdup(name);
		cmd->action = strdup(action);
		if (range) {
			if (cmd->value == 1)
				cmd->value = u - lo;
			else
				cmd->value = -1;
		}

		if (verbose)
			printf("PARSE:%d %s, %d, '%s'\n", cmd->line, name,
			    cmd->value, cmd->action);
	}
	fclose(f);
	return (cmds);
}

void
docmd(struct command *cmd, int value, const char *hid, int argc, char **argv)
{
	char cmdbuf[SIZE], *p, *q;
	size_t len;
	int n, r;
	pid_t pid;

	if (cmd->action == NULL) {
		if (verbose)
			printf("no action for device %s value %d\n",
			    hid, value);
		return;
	}
	for (p = cmd->action, q = cmdbuf; *p && q < &cmdbuf[SIZE-1]; ) {
		if (*p == '$') {
			p++;
			len = &cmdbuf[SIZE-1] - q;
			if (isdigit((unsigned char)*p)) {
				n = strtol(p, &p, 10) - 1;
				if (n >= 0 && n < argc) {
					strncpy(q, argv[n], len);
					q += strlen(q);
				}
			} else if (*p == 'V') {
				p++;
				snprintf(q, len, "%d", value);
				q += strlen(q);
			} else if (*p == 'N') {
				p++;
				strncpy(q, cmd->name, len);
				q += strlen(q);
			} else if (*p == 'H') {
				p++;
				strncpy(q, hid, len);
				q += strlen(q);
			} else if (*p) {
				*q++ = *p++;
			}
		} else {
			*q++ = *p++;
		}
	}
	*q = 0;

	pid = fork();
	if (pid == -1)
		warn("fork failed");
	else if (pid == 0) {
		setpgid(0, 0);
		if (verbose)
			printf("executing '%s'\n", cmdbuf);
		r = execl(_PATH_BSHELL, "sh", "-c", cmdbuf, (char *)NULL);
		err(1, "execl");
	}
}

void
freecommands(struct command *cmd)
{
	struct command *next;

	while (cmd) {
		next = cmd->next;
		free(cmd);
		cmd = next;
	}
}
@


1.21
log
@remove util.h include and -lutil after pidfile removal

ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: usbhidaction.c,v 1.20 2015/10/26 09:57:55 deraadt Exp $ */
d444 1
a444 1
		r = execl(_PATH_BSHELL, "sh", "-c", cmdbuf, NULL);
@


1.20
log
@stop using pidfile()
ok benno jung jca
@
text
@d1 1
a1 1
/*	$OpenBSD: usbhidaction.c,v 1.19 2015/01/18 17:18:08 mpi Exp $ */
a45 1
#include <util.h>
@


1.19
log
@This size check was obviously commented out because of the incorrect
size computed for reports with reportID.

Tested by Benjamin Baier.
@
text
@d1 1
a1 1
/*	$OpenBSD: usbhidaction.c,v 1.18 2014/08/15 03:51:40 guenther Exp $ */
a164 1
		pidfile(NULL);
@


1.18
log
@Use O_CLOEXEC wherever we open a file and then call fcntl(F_SETFD, FD_CLOEXEC)
on it, simplifying error checking, reducing system calls, and improving
thread-safety for libraries.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: usbhidaction.c,v 1.17 2013/11/27 00:13:23 deraadt Exp $ */
a182 1
#if 0
a185 1
#endif
@


1.17
log
@unsigned char for ctype
ok okan
@
text
@d1 1
a1 1
/*	$OpenBSD: usbhidaction.c,v 1.16 2012/03/23 10:04:59 robert Exp $ */
d138 1
a138 1
	fd = open(dev, O_RDWR);
a140 4

	/* Avoid passing the device file descriptor to executed commands */
	if (fcntl(fd, F_SETFD, FD_CLOEXEC) == -1)
		err(1, "fcntl(F_SETFD, FD_CLOEXEC)");
@


1.16
log
@Ignore SIGCHLD because we don't really care what happened to the forked
processes and we don't want to wait for them to finish either.
This makes the walking dead go away.

ok espie@@, mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: usbhidaction.c,v 1.15 2011/03/07 14:59:06 jasper Exp $ */
d131 1
a131 1
		    isdigit(dev[0]) ? "uhid" : "", dev);
d418 1
a418 1
			if (isdigit(*p)) {
@


1.15
log
@- use fork(2)/exec(3) instead of system(3) to execute the specified action,
as the launched command used to be terminated when usbhidaction terminates.
using fork here prevents that.

from vadim zhukov
ok otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: usbhidaction.c,v 1.14 2010/06/29 17:16:35 deraadt Exp $ */
d162 3
@


1.14
log
@please attempt to match the style of the code
@
text
@d1 1
a1 1
/*	$OpenBSD: usbhidaction.c,v 1.13 2010/06/29 17:15:23 ckuethe Exp $ */
d49 1
d403 1
d442 10
a451 5
	if (verbose)
		printf("system '%s'\n", cmdbuf);
	r = system(cmdbuf);
	if (verbose > 1 && r)
		printf("return code = 0x%x\n", r);
@


1.13
log
@avoid a null pointer deref. ok jsg
@
text
@d1 1
a1 1
/*	$OpenBSD: usbhidaction.c,v 1.12 2009/10/21 15:48:27 sobrado Exp $ */
d403 1
a403 1
	if (cmd->action == NULL){
d406 1
a406 1
			     hid, value);
@


1.12
log
@"usage:" is lowercase; spacing.
@
text
@d1 1
a1 1
/*	$OpenBSD: usbhidaction.c,v 1.11 2009/10/14 20:36:56 guenther Exp $ */
d403 6
@


1.11
log
@Call err() instead of crashing if hid_start_parse() fails.  Don't
leak FILEs or memory when parsing the conf fails.  Don't segv on
the first action when told to ignore unknown lines and there are
lines to ignore.

ok deraadt@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: usbhidaction.c,v 1.10 2008/06/26 05:42:21 ray Exp $ */
d212 2
a213 2
	fprintf(stderr, "Usage: %s [-div] -c config-file -f device "
		"arg ...\n", __progname);
@


1.10
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: usbhidaction.c,v 1.9 2007/02/23 17:37:28 deraadt Exp $ */
d264 1
d290 1
d301 4
a304 2
		for (d = hid_start_parse(repd, 1 << hid_input, reportid);
		    hid_get_item(d, &h); ) {
d356 1
d360 3
d369 1
@


1.9
log
@signal handler flag must be volatile sig_atomic_t
@
text
@d1 1
a1 1
/*	$OpenBSD: usbhidaction.c,v 1.8 2006/07/09 23:02:21 mk Exp $ */
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.8
log
@Two fixes:

	o Prevent a config reload from always happening after the first
	round of command execution.
	o Make sure config reload works when daemonised by requiring an
	absolute path to the config file.

From NetBSD.

Ok brad.
@
text
@d1 1
a1 1
/*	$OpenBSD: usbhidaction.c,v 1.7 2006/04/23 08:51:24 fgsch Exp $ */
d59 2
a60 1
int reparse = 0;
@


1.7
log
@Avoid passing the device file descriptor to executed commands; deraadt@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: usbhidaction.c,v 1.6 2004/10/27 18:16:57 jaredy Exp $ */
d59 1
a59 1
int reparse = 1;
d139 3
@


1.6
log
@remove newlines in errx, syslog.  ok henning, hshoexer, millert
@
text
@d1 1
a1 1
/*	$OpenBSD: usbhidaction.c,v 1.5 2004/09/14 22:59:26 deraadt Exp $ */
d143 5
@


1.5
log
@ARGSUSED before signal handler with unused signo
@
text
@d1 1
a1 1
/*	$OpenBSD: usbhidaction.c,v 1.4 2004/06/04 00:47:32 deraadt Exp $ */
d264 1
a264 1
				errx(1, "config file `%s', line %d,"
d284 1
a284 1
					    "bad value: %s\n",
d290 1
a290 1
					    "bad value: %s\n",
d357 1
a357 1
			    "item not found: `%s'\n", conf, line, name);
d362 1
a362 1
			    "not found: `%s'\n", conf, line, name);
@


1.4
log
@knf + new interface: hid_start() is non-exit non-stderr spewing version of hid_init(); ok matthieu millert
@
text
@d1 1
a1 1
/*	$OpenBSD: usbhidaction.c,v 1.3 2004/04/03 21:01:25 jmc Exp $ */
d80 1
d82 1
a82 1
sighup(int sig)
@


1.3
log
@- correct SYNOPSIS
- sync usage()
- some small tweaks
@
text
@d1 1
a1 1
/*	$OpenBSD: usbhidaction.c,v 1.2 2002/06/11 06:16:36 jsyn Exp $ */
d130 2
a131 1
	hid_init(NULL);
d135 1
a135 1
			 isdigit(dev[0]) ? "uhid" : "", dev);
a236 1
	
d259 1
a259 1
				       ", syntax error: %s", conf, line, buf);
d264 1
a264 1
				     ", syntax error: %s", conf, line, buf);
d282 3
a284 3
					       "config file `%s', line %d, "
					       "bad value: %s\n",
					       conf, line, value);
d289 2
a290 2
					     "bad value: %s\n",
					     conf, line, value);
d297 1
a297 1
		     hid_get_item(d, &h); ) {
d316 1
a316 1
						 hid_usage_page(HID_PAGE(u)), 
d325 1
a325 1
						  hid_usage_page(HID_PAGE(u)), 
d329 1
a329 1
							       usage);
d338 1
a338 1
				    hid_usage_page(HID_PAGE(h.usage)), 
d356 1
a356 1
			       "item not found: `%s'\n", conf, line, name);
d361 1
a361 1
			     "not found: `%s'\n", conf, line, name);
d378 1
a378 1
			       cmd->value, cmd->action);
@


1.2
log
@kill err(3) newlines; ok miod@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: usbhidaction.c,v 1.1 2002/05/10 00:09:17 nate Exp $ */
d208 2
a209 2
	fprintf(stderr, "Usage: %s -c config_file [-d] -f hid_dev "
		"[-i] [-v]\n", __progname);
@


1.1
log
@Update usb userland stuff to reflect hid changes in the kernel.
This adds the new program usbhidaction which can be used to assign actions
to events that occur on a uhid device.  For example, you can now make the
volume buttons on some newer keyboards actually do something.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d145 1
a145 1
		err(1, "hid_get_report_desc() failed\n");
d351 1
a351 1
				warnx("ignore item '%s'\n", name);
@

