head	1.11;
access;
symbols
	OPENBSD_6_1:1.11.0.12
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.10
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.6
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.8
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.4
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.5.0.46
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.42
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.40
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.38
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.36
	OPENBSD_5_0:1.5.0.34
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.32
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.30
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.26
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.28
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.24
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.22
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.20
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.18
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.16
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.14
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.4.0.20
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.18
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.16
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.14
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.12
	OPENBSD_2_8:1.4.0.10
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.8
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.6
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.4
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2014.07.22.07.30.24;	author jsg;	state Exp;
branches;
next	1.10;
commitid	5F2TXUtxGWuYgYJc;

1.10
date	2014.07.20.10.32.23;	author jsg;	state Exp;
branches;
next	1.9;
commitid	9XoXHCD8D3PmuHcG;

1.9
date	2014.07.20.09.59.42;	author guenther;	state Exp;
branches;
next	1.8;
commitid	11DQHPdHfrXBxigB;

1.8
date	2014.07.20.08.12.46;	author guenther;	state Exp;
branches;
next	1.7;
commitid	qbZdS8s4KEeVt81G;

1.7
date	2014.07.20.06.24.19;	author guenther;	state Exp;
branches;
next	1.6;
commitid	rQULuZr296C7Ucp5;

1.6
date	2014.07.19.23.50.38;	author guenther;	state Exp;
branches;
next	1.5;
commitid	J1fNmylmVMpKGeua;

1.5
date	2003.06.03.02.56.18;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	98.05.15.03.16.40;	author art;	state Exp;
branches;
next	1.3;

1.3
date	98.03.12.04.57.38;	author art;	state Exp;
branches;
next	1.2;

1.2
date	96.03.27.19.33.05;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.46.14;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.46.14;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.11
log
@use ansi style function declarations
with suggestions from and ok guenther@@
@
text
@/*	$OpenBSD: ring.c,v 1.10 2014/07/20 10:32:23 jsg Exp $	*/
/*	$NetBSD: ring.c,v 1.7 1996/02/28 21:04:07 thorpej Exp $	*/

/*
 * Copyright (c) 1988, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <string.h>
#include "ring.h"

/*
 * This defines a structure for a ring buffer.
 *
 * The circular buffer has two parts:
 *(((
 *	full:	[consume, supply)
 *	empty:	[supply, consume)
 *]]]
 *
 */

/* Internal macros */
#define	ring_subtract(d,a,b)	(((a)-(b) >= 0)? \
					(a)-(b): (((a)-(b))+(d)->size))

#define	ring_increment(d,a,c)	(((a)+(c) < (d)->top)? \
					(a)+(c) : (((a)+(c))-(d)->size))

#define	ring_decrement(d,a,c)	(((a)-(c) >= (d)->bottom)? \
					(a)-(c) : (((a)-(c))-(d)->size))


/*
 * The following is a clock, used to determine full, empty, etc.
 *
 * There is some trickiness here.  Since the ring buffers are initialized
 * to ZERO on allocation, we need to make sure, when interpreting the
 * clock, that when the times are EQUAL, then the buffer is FULL.
 */
static unsigned long ring_clock = 0;


#define	ring_empty(d) (((d)->consume == (d)->supply) && \
				((d)->consumetime >= (d)->supplytime))
#define	ring_full(d) (((d)->supply == (d)->consume) && \
				((d)->supplytime > (d)->consumetime))


/* Buffer state transition routines */

void
ring_init(Ring *ring, unsigned char *buffer, int count)
{
    memset(ring, 0, sizeof *ring);

    ring->size = count;

    ring->supply = ring->consume = ring->bottom = buffer;

    ring->top = ring->bottom+ring->size;
}

/* Mark routines */

/*
 * Mark the most recently supplied byte.
 */

void
ring_mark(Ring *ring)
{
    ring->mark = ring_decrement(ring, ring->supply, 1);
}

/*
 * Is the ring pointing to the mark?
 */

int
ring_at_mark(Ring *ring)
{
    if (ring->mark == ring->consume) {
	return 1;
    } else {
	return 0;
    }
}

/*
 * Clear any mark set on the ring.
 */

void
ring_clear_mark(Ring *ring)
{
    ring->mark = NULL;
}

/*
 * Add characters from current segment to ring buffer.
 */
void
ring_supplied(Ring *ring, int count)
{
    ring->supply = ring_increment(ring, ring->supply, count);
    ring->supplytime = ++ring_clock;
}

/*
 * We have just consumed "c" bytes.
 */
void
ring_consumed(Ring *ring, int count)
{
    if (count == 0)	/* don't update anything */
	return;

    if (ring->mark &&
		(ring_subtract(ring, ring->mark, ring->consume) < count)) {
	ring->mark = NULL;
    }
    ring->consume = ring_increment(ring, ring->consume, count);
    ring->consumetime = ++ring_clock;
    /*
     * Try to encourage "ring_empty_consecutive()" to be large.
     */
    if (ring_empty(ring)) {
	ring->consume = ring->supply = ring->bottom;
    }
}


/* Buffer state query routines */


/* Number of bytes that may be supplied */
int
ring_empty_count(Ring *ring)
{
    if (ring_empty(ring)) {	/* if empty */
	    return ring->size;
    } else {
	return ring_subtract(ring, ring->consume, ring->supply);
    }
}

/* number of CONSECUTIVE bytes that may be supplied */
int
ring_empty_consecutive(Ring *ring)
{
    if ((ring->consume < ring->supply) || ring_empty(ring)) {
			    /*
			     * if consume is "below" supply, or empty, then
			     * return distance to the top
			     */
	return ring_subtract(ring, ring->top, ring->supply);
    } else {
				    /*
				     * else, return what we may.
				     */
	return ring_subtract(ring, ring->consume, ring->supply);
    }
}

/* Return the number of bytes that are available for consuming
 * (but don't give more than enough to get to cross over set mark)
 */

int
ring_full_count(Ring *ring)
{
    if ((ring->mark == NULL) || (ring->mark == ring->consume)) {
	if (ring_full(ring)) {
	    return ring->size;	/* nothing consumed, but full */
	} else {
	    return ring_subtract(ring, ring->supply, ring->consume);
	}
    } else {
	return ring_subtract(ring, ring->mark, ring->consume);
    }
}

/*
 * Return the number of CONSECUTIVE bytes available for consuming.
 * However, don't return more than enough to cross over set mark.
 */
int
ring_full_consecutive(Ring *ring)
{
    if ((ring->mark == NULL) || (ring->mark == ring->consume)) {
	if ((ring->supply < ring->consume) || ring_full(ring)) {
	    return ring_subtract(ring, ring->top, ring->consume);
	} else {
	    return ring_subtract(ring, ring->supply, ring->consume);
	}
    } else {
	if (ring->mark < ring->consume) {
	    return ring_subtract(ring, ring->top, ring->consume);
	} else {	/* Else, distance to mark */
	    return ring_subtract(ring, ring->mark, ring->consume);
	}
    }
}

/*
 * Move data into the "supply" portion of of the ring buffer.
 */
void
ring_supply_data(Ring *ring, unsigned char *buffer, int count)
{
    int i;

    while (count) {
	i = ring_empty_consecutive(ring);
	if (i > count)
		i = count;
	memcpy(ring->supply, buffer, i);
	ring_supplied(ring, i);
	count -= i;
	buffer += i;
    }
}
@


1.10
log
@use NULL instead of 0 when dealing with pointers
ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ring.c,v 1.9 2014/07/20 09:59:42 guenther Exp $	*/
a73 3



d77 1
a77 4
ring_init(ring, buffer, count)
    Ring *ring;
    unsigned char *buffer;
    int count;
d94 2
a95 3
    void
ring_mark(ring)
    Ring *ring;
d104 2
a105 3
    int
ring_at_mark(ring)
    Ring *ring;
d118 2
a119 3
    void
ring_clear_mark(ring)
    Ring *ring;
d127 2
a128 4
    void
ring_supplied(ring, count)
    Ring *ring;
    int count;
d137 2
a138 4
    void
ring_consumed(ring, count)
    Ring *ring;
    int count;
a157 1

d162 2
a163 3
    int
ring_empty_count(ring)
    Ring *ring;
d173 2
a174 3
    int
ring_empty_consecutive(ring)
    Ring *ring;
d194 2
a195 3
    int
ring_full_count(ring)
    Ring *ring;
d212 2
a213 3
    int
ring_full_consecutive(ring)
    Ring *ring;
d233 2
a234 5
    void
ring_supply_data(ring, buffer, count)
    Ring *ring;
    unsigned char *buffer;
    int count;
@


1.9
log
@Switch from memmove() to memcpy() where appropriate; simplify address
parsing logic; eliminate an inefficient use of MIN() macro
@
text
@d1 1
a1 1
/*	$OpenBSD: ring.c,v 1.8 2014/07/20 08:12:46 guenther Exp $	*/
d130 1
a130 1
    ring->mark = 0;
d158 1
a158 1
	ring->mark = 0;
d214 1
a214 1
    if ((ring->mark == 0) || (ring->mark == ring->consume)) {
d233 1
a233 1
    if ((ring->mark == 0) || (ring->mark == ring->consume)) {
@


1.8
log
@More encryption tentacles: intr_happened and intr_waiting vanish
Push more includes into .c files
Make ring.c only need ring.h
@
text
@d1 1
a1 1
/*	$OpenBSD: ring.c,v 1.7 2014/07/20 06:24:19 guenther Exp $	*/
a47 5

#if	!defined(MIN)
#define	MIN(a,b)	(((a)<(b))? (a):(b))
#endif	/* !defined(MIN) */

d260 4
a263 2
	i = MIN(count, ring_empty_consecutive(ring));
	memmove(ring->supply, buffer, i);
@


1.7
log
@ring_init() can't fail
KNF ring.h
@
text
@d1 1
a1 1
/*	$OpenBSD: ring.c,v 1.6 2014/07/19 23:50:38 guenther Exp $	*/
d33 2
a34 1
#include "telnet_locl.h"
d70 1
a70 1
static u_long ring_clock = 0;
@


1.6
log
@Flense the telnet code base of unwanted ifdefs: authentication/encryption
tn3270, sgtty, pre-POSIX and other ancient system support, etc.  Brings up
to date the manpage with what we support.

ok matthieu@@ beck@@ jmc@@ millert@@ deraadt@@ okan@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ring.c,v 1.5 2003/06/03 02:56:18 millert Exp $	*/
d83 1
a83 1
    int
d89 1
a89 1
    memset((char *)ring, 0, sizeof *ring);
a95 2

    return 1;
@


1.5
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: ring.c,v 1.4 1998/05/15 03:16:40 art Exp $	*/
a96 4
#if    defined(ENCRYPTION)
    ring->clearto = 0;
#endif

a165 9
#if    defined(ENCRYPTION)
    if (ring->consume < ring->clearto &&
               ring->clearto <= ring->consume + count)
	ring->clearto = 0;
    else if (ring->consume + count > ring->top &&
               ring->bottom <= ring->clearto &&
               ring->bottom + ((ring->consume + count) - ring->top))
	ring->clearto = 0;
#endif
a272 57

#ifdef notdef

/*
 * Move data from the "consume" portion of the ring buffer
 */
    void
ring_consume_data(ring, buffer, count)
    Ring *ring;
    unsigned char *buffer;
    int count;
{
    int i;

    while (count) {
	i = MIN(count, ring_full_consecutive(ring));
	memmove(buffer, ring->consume, i);
	ring_consumed(ring, i);
	count -= i;
	buffer += i;
    }
}
#endif

#if    defined(ENCRYPTION)
void
ring_encrypt(Ring *ring, void (*encryptor)())
{
    unsigned char *s, *c;

    if (ring_empty(ring) || ring->clearto == ring->supply)
	return;

    if (!(c = ring->clearto))
	c = ring->consume;

    s = ring->supply;
    
    if (s <= c) {
	(*encryptor)(c, ring->top - c);
	(*encryptor)(ring->bottom, s - ring->bottom);
    } else
	(*encryptor)(c, s - c);
    
    ring->clearto = ring->supply;
}

void
ring_clearto(Ring *ring)
{
    if (!ring_empty(ring))
	ring->clearto = ring->supply;
    else
	ring->clearto = 0;
}
#endif

@


1.4
log
@cleanup warnings.
@
text
@d1 1
a1 1
/*	$OpenBSD: ring.c,v 1.3 1998/03/12 04:57:38 art Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.3
log
@encryption support from kth-krb 0.9.8 (kerberos only)
plus some tweaks for better binary/8-bit support.
@
text
@d1 1
a1 1
/*	$OpenBSD: ring.c,v 1.2 1996/03/27 19:33:05 niklas Exp $	*/
d87 3
a89 2
    ring_init(ring, buffer, count)
Ring *ring;
@


1.2
log
@From NetBSD: merge of 960317
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d37 1
a37 8
#ifndef lint
#if 0
static char sccsid[] = "@@(#)ring.c	8.2 (Berkeley) 5/30/95";
static char rcsid[] = "$NetBSD: ring.c,v 1.7 1996/02/28 21:04:07 thorpej Exp $";
#else
static char rcsid[] = "$OpenBSD$";
#endif
#endif /* not lint */
a49 20
#include	<stdio.h>
#ifndef NO_STRING_H
#include	<string.h>
#endif
#include	<strings.h>
#include	<errno.h>

#ifdef	size_t
#undef	size_t
#endif

#include	<sys/types.h>
#ifndef	FILIO_H
#include	<sys/ioctl.h>
#endif
#include	<sys/socket.h>

#include	"ring.h"
#include	"general.h"

d100 3
d173 9
d310 33
@


1.1
log
@Initial revision
@
text
@d1 3
d38 6
a43 2
/* from: static char sccsid[] = "@@(#)ring.c	8.1 (Berkeley) 6/6/93"; */
static char *rcsid = "$Id: ring.c,v 1.4 1994/12/24 17:50:06 cgd Exp $";
d298 1
a298 1
	memcpy(ring->supply, buffer, i);
d320 1
a320 1
	memcpy(buffer, ring->consume, i);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@

