head	1.17;
access;
symbols
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.17.0.10
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.6
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.17.0.8
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.2
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.17.0.4
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.9.0.6
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.8.0.40
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.38
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.36
	OPENBSD_5_0:1.8.0.34
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.32
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.30
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.26
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.28
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.24
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.22
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.20
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.18
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.16
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.14
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.12
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.10
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.8
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.7.0.6
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.6.0.14
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.12
	OPENBSD_2_8:1.6.0.10
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.8
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.6.0.6
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.4
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.17
date	2014.07.22.07.30.24;	author jsg;	state Exp;
branches;
next	1.16;
commitid	5F2TXUtxGWuYgYJc;

1.16
date	2014.07.20.10.55.26;	author guenther;	state Exp;
branches;
next	1.15;
commitid	KvN9Bh2AXHiOi5nI;

1.15
date	2014.07.20.10.18.10;	author guenther;	state Exp;
branches;
next	1.14;
commitid	g3VtcxajtWcT7VuD;

1.14
date	2014.07.20.08.56.47;	author guenther;	state Exp;
branches;
next	1.13;
commitid	uvklKjlkNqUA10lW;

1.13
date	2014.07.20.08.12.46;	author guenther;	state Exp;
branches;
next	1.12;
commitid	qbZdS8s4KEeVt81G;

1.12
date	2014.07.20.06.24.19;	author guenther;	state Exp;
branches;
next	1.11;
commitid	rQULuZr296C7Ucp5;

1.11
date	2014.07.20.05.22.02;	author guenther;	state Exp;
branches;
next	1.10;
commitid	mkPeU1MBN7ewMEUq;

1.10
date	2014.07.19.23.50.38;	author guenther;	state Exp;
branches;
next	1.9;
commitid	J1fNmylmVMpKGeua;

1.9
date	2013.04.21.09.51.24;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.03.02.56.18;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2001.11.19.19.02.16;	author mpech;	state Exp;
branches;
next	1.6;

1.6
date	98.05.15.03.16.39;	author art;	state Exp;
branches;
next	1.5;

1.5
date	98.03.12.04.57.36;	author art;	state Exp;
branches;
next	1.4;

1.4
date	97.12.16.22.07.38;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.12.12.11.35.59;	author robin;	state Exp;
branches;
next	1.2;

1.2
date	96.03.27.19.33.04;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.46.14;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.46.14;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.17
log
@use ansi style function declarations
with suggestions from and ok guenther@@
@
text
@/*	$OpenBSD: network.c,v 1.16 2014/07/20 10:55:26 guenther Exp $	*/
/*	$NetBSD: network.c,v 1.5 1996/02/28 21:04:06 thorpej Exp $	*/

/*
 * Copyright (c) 1988, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "telnet_locl.h"

#include <sys/socket.h>
#include <errno.h>
#include <poll.h>
#include <unistd.h>

Ring		netoring, netiring;
unsigned char	netobuf[2*BUFSIZ], netibuf[BUFSIZ];

/*
 * Initialize internal network data structures.
 */

void
init_network(void)
{
	ring_init(&netoring, netobuf, sizeof netobuf);
	ring_init(&netiring, netibuf, sizeof netibuf);
	SetNetTrace(NULL);
}


/*
 * Check to see if any out-of-band data exists on a socket (for
 * Telnet "synch" processing).
 */

int
stilloob(void)
{
    struct pollfd pfd[1];
    int value;

    do {
	pfd[0].fd = net;
	pfd[0].events = POLLRDBAND;
	value = poll(pfd, 1, 0);
    } while ((value == -1) && (errno == EINTR));

    if (value < 0) {
	perror("poll");
	quit();
    }
    if (pfd[0].revents & POLLRDBAND)
	return 1;
    else
	return 0;
}

/*
 *  setneturg()
 *
 *	Sets "neturg" to the current location.
 */

void
setneturg(void)
{
    ring_mark(&netoring);
}

/*
 *  netflush
 *		Send as much data as possible to the network,
 *	handling requests for urgent data.
 *
 *		The return value indicates whether we did any
 *	useful work.
 */

int
netflush(void)
{
    int n, n1;

    if ((n1 = n = ring_full_consecutive(&netoring)) > 0) {
	if (!ring_at_mark(&netoring)) {
	    n = send(net, (char *)netoring.consume, n, 0); /* normal write */
	} else {
	    /*
	     * In 4.2 (and 4.3) systems, there is some question about
	     * what byte in a sendOOB operation is the "OOB" data.
	     * To make ourselves compatible, we only send ONE byte
	     * out of band, the one WE THINK should be OOB (though
	     * we really have more the TCP philosophy of urgent data
	     * rather than the Unix philosophy of OOB data).
	     */
	    n = send(net, (char *)netoring.consume, 1, MSG_OOB);/* URGENT data */
	}
    }
    if (n < 0) {
	if (errno != ENOBUFS && errno != EWOULDBLOCK) {
	    setcommandmode();
	    perror(hostname);
	    (void)close(net);
	    ring_clear_mark(&netoring);
	    longjmp(peerdied, -1);
	}
	n = 0;
    }
    if (netdata && n) {
	Dump('>', netoring.consume, n);
    }
    if (n) {
	ring_consumed(&netoring, n);
	/*
	 * If we sent all, and more to send, then recurse to pick
	 * up the other half.
	 */
	if ((n1 == n) && ring_full_consecutive(&netoring)) {
	    (void) netflush();
	}
	return 1;
    } else {
	return 0;
    }
}
@


1.16
log
@Mark a slurry of functions as static
Eliminate two more trivial wrappers
@
text
@d1 1
a1 1
/*	$OpenBSD: network.c,v 1.15 2014/07/20 10:18:10 guenther Exp $	*/
d61 2
a62 2
    int
stilloob()
a82 1

d89 2
a90 2
    void
setneturg()
a94 1

d104 2
a105 3

    int
netflush()
@


1.15
log
@Kill lint comments; mark ExitString() as __dead
@
text
@d1 1
a1 1
/*	$OpenBSD: network.c,v 1.14 2014/07/20 08:56:47 guenther Exp $	*/
d38 1
d131 1
a131 1
	    (void)NetClose(net);
@


1.14
log
@Add prototypes to some function callbacks and fix the type errors that
this reveals.
Make NetTrace static to utilities.c
@
text
@d1 1
a1 1
/*	$OpenBSD: network.c,v 1.13 2014/07/20 08:12:46 guenther Exp $	*/
a132 1
	    /*NOTREACHED*/
@


1.13
log
@More encryption tentacles: intr_happened and intr_waiting vanish
Push more includes into .c files
Make ring.c only need ring.h
@
text
@d1 1
a1 1
/*	$OpenBSD: network.c,v 1.12 2014/07/20 06:24:19 guenther Exp $	*/
d51 1
a51 1
	NetTrace = stdout;
@


1.12
log
@ring_init() can't fail
KNF ring.h
@
text
@d1 1
a1 1
/*	$OpenBSD: network.c,v 1.11 2014/07/20 05:22:02 guenther Exp $	*/
d34 3
@


1.11
log
@Simplify #includes, start pushing them into the .c files, eliminate
extern declarations from .c files that duplicate those in .h files,
start marking functions with __dead
@
text
@d1 1
a1 1
/*	$OpenBSD: network.c,v 1.10 2014/07/19 23:50:38 guenther Exp $	*/
d43 2
a44 2
    void
init_network()
d46 3
a48 7
    if (ring_init(&netoring, netobuf, sizeof netobuf) != 1) {
	exit(1);
    }
    if (ring_init(&netiring, netibuf, sizeof netibuf) != 1) {
	exit(1);
    }
    NetTrace = stdout;
@


1.10
log
@Flense the telnet code base of unwanted ifdefs: authentication/encryption
tn3270, sgtty, pre-POSIX and other ancient system support, etc.  Brings up
to date the manpage with what we support.

ok matthieu@@ beck@@ jmc@@ millert@@ deraadt@@ okan@@
@
text
@d1 1
a1 1
/*	$OpenBSD: network.c,v 1.9 2013/04/21 09:51:24 millert Exp $	*/
d34 1
a34 1
#include <err.h>
d75 1
a75 2
	(void) quit();
	/* NOTREACHED */
@


1.9
log
@Convert select() to poll().  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: network.c,v 1.8 2003/06/03 02:56:18 millert Exp $	*/
a112 4
#if    defined(ENCRYPTION)
    if (encrypt_output)
	ring_encrypt(&netoring, encrypt_output);
#endif
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: network.c,v 1.7 2001/11/19 19:02:16 mpech Exp $	*/
d64 1
a64 3
    static struct timeval timeout = { 0 };
    fd_set *fdsp;
    int fdsn;
a66 4
    fdsn = howmany(net+1, NFDBITS) * sizeof(fd_mask);
    if ((fdsp = (fd_set *)malloc(fdsn)) == NULL)
	err(1, "malloc");

d68 3
a70 3
	memset(fdsp, 0, fdsn);
	FD_SET(net, fdsp);
	value = select(net+1, (fd_set *)0, (fd_set *)0, fdsp, &timeout);
d74 1
a74 2
	perror("select");
	free(fdsp);
d78 1
a78 2
    if (FD_ISSET(net, fdsp)) {
	free(fdsp);
d80 1
a80 2
    } else {
   	free(fdsp);
a81 1
    }
@


1.7
log
@kill more registers

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: network.c,v 1.6 1998/05/15 03:16:39 art Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.6
log
@cleanup warnings.
@
text
@d1 1
a1 1
/*	$OpenBSD: network.c,v 1.5 1998/03/12 04:57:36 art Exp $	*/
d125 1
a125 1
    register int n, n1;
@


1.5
log
@encryption support from kth-krb 0.9.8 (kerberos only)
plus some tweaks for better binary/8-bit support.
@
text
@d1 1
a1 1
/*	$OpenBSD: network.c,v 1.4 1997/12/16 22:07:38 deraadt Exp $	*/
d38 1
@


1.4
log
@do not let fd_set overflow
@
text
@d1 1
a1 1
/*	$OpenBSD: network.c,v 1.3 1996/12/12 11:35:59 robin Exp $	*/
d37 1
a37 22
#ifndef lint
#if 0
static char sccsid[] = "@@(#)network.c	8.2 (Berkeley) 12/15/93";
static char rcsid[] = "$NetBSD: network.c,v 1.5 1996/02/28 21:04:06 thorpej Exp $";
#else
static char rcsid[] = "$OpenBSD: network.c,v 1.3 1996/12/12 11:35:59 robin Exp $";
#endif
#endif /* not lint */

#include <sys/types.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <unistd.h>
#include <errno.h>

#include <arpa/telnet.h>

#include "ring.h"

#include "defines.h"
#include "externs.h"
#include "fdset.h"
d92 1
a92 1
	free(fdsp);
d126 4
@


1.3
log
@Add <unistd.h> for select(2) prototype.
@
text
@d1 1
a1 1
/*	$OpenBSD: network.c,v 1.2 1996/03/27 19:33:04 niklas Exp $	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD: network.c,v 1.2 1996/03/27 19:33:04 niklas Exp $";
d89 2
a90 1
    fd_set	excepts;
d93 4
d98 3
a100 3
	FD_ZERO(&excepts);
	FD_SET(net, &excepts);
	value = select(net+1, (fd_set *)0, (fd_set *)0, &excepts, &timeout);
d105 1
d109 2
a110 1
    if (FD_ISSET(net, &excepts)) {
d113 1
@


1.2
log
@From NetBSD: merge of 960317
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD$";
d49 1
a49 1

@


1.1
log
@Initial revision
@
text
@d1 3
d38 6
a43 2
/* from: static char sccsid[] = "@@(#)network.c	8.1 (Berkeley) 6/6/93"; */
static char *rcsid = "$Id: network.c,v 1.3 1994/02/25 03:00:31 cgd Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@

