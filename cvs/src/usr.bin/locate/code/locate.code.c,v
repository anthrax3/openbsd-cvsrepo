head	1.19;
access;
symbols
	OPENBSD_6_0:1.19.0.4
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.19.0.2
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.18.0.6
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.2
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.17.0.6
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.17.0.4
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.16.0.16
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.14
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.12
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.10
	OPENBSD_5_0:1.16.0.8
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.6
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.4
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.2
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.15.0.12
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.8
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.6
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.4
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.2
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.14.0.2
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.13.0.12
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.10
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.8
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.6
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.4
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.13.0.2
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.9.0.6
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.4
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.7.0.20
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.18
	OPENBSD_2_8:1.7.0.16
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.14
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.7.0.12
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.10
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.7.0.8
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.7.0.6
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.7.0.4
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.7.0.2
	OPENBSD_2_1_BASE:1.7
	OPENBSD_2_0:1.5.0.2
	OPENBSD_2_0_BASE:1.5
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.19
date	2015.11.15.07.38.29;	author deraadt;	state Exp;
branches;
next	1.18;
commitid	kQQivCi4rwimmOcJ;

1.18
date	2015.01.16.06.40.09;	author deraadt;	state Exp;
branches;
next	1.17;
commitid	Uu5nFG3wCl0LACBb;

1.17
date	2013.11.17.20.19.36;	author okan;	state Exp;
branches;
next	1.16;

1.16
date	2009.10.27.23.59.39;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2007.03.18.20.13.49;	author otto;	state Exp;
branches;
next	1.14;

1.14
date	2007.02.19.20.01.12;	author ray;	state Exp;
branches;
next	1.13;

1.13
date	2003.11.09.20.13.57;	author otto;	state Exp;
branches;
next	1.12;

1.12
date	2003.09.29.16.03.16;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2003.07.07.21.36.16;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.03.02.56.10;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.02.16.21.27.48;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2001.11.19.19.02.15;	author mpech;	state Exp;
branches;
next	1.7;

1.7
date	97.01.15.23.42.42;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	96.10.20.00.52.53;	author michaels;	state Exp;
branches;
next	1.5;

1.5
date	96.09.15.16.50.36;	author michaels;	state Exp;
branches;
next	1.4;

1.4
date	96.08.30.12.54.17;	author michaels;	state Exp;
branches;
next	1.3;

1.3
date	96.08.16.22.00.11;	author michaels;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.35.50;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.32;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.32;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.19
log
@pretty simple.  pledge "stdio rpath" at startup, and pledge "stdio" after
opening the database.
@
text
@/*
 *	$OpenBSD: locate.code.c,v 1.18 2015/01/16 06:40:09 deraadt Exp $
 *
 * Copyright (c) 1989, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * James A. Woods.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * 	$Id: locate.code.c,v 1.18 2015/01/16 06:40:09 deraadt Exp $
 */

/*
 * PURPOSE:	sorted list compressor (works with a modified 'find'
 *		to encode/decode a filename database)
 *
 * USAGE:	bigram < list > bigrams
 *		process bigrams (see updatedb) > common_bigrams
 *		code common_bigrams < list > squozen_list
 *
 * METHOD:	Uses 'front compression' (see ";login:", Volume 8, Number 1
 *		February/March 1983, p. 8).  Output format is, per line, an
 *		offset differential count byte followed by a partially bigram-
 *		encoded ascii residue.  A bigram is a two-character sequence,
 *		the first 128 most common of which are encoded in one byte.
 *
 * EXAMPLE:	For simple front compression with no bigram encoding,
 *		if the input is...		then the output is...
 *
 *		/usr/src			 0 /usr/src
 *		/usr/src/cmd/aardvark.c		 8 /cmd/aardvark.c
 *		/usr/src/cmd/armadillo.c	14 armadillo.c
 *		/usr/tmp/zoo			 5 tmp/zoo
 *
 *	The codes are:
 *
 *	0-28	likeliest differential counts + offset to make nonnegative
 *	30	switch code for out-of-range count to follow in next word
 *      31      an 8 bit char followed
 *	128-255 bigram codes (128 most common, as determined by 'updatedb')
 *	32-127  single character (printable) ascii residue (ie, literal)
 *
 * The locate database store any character except newline ('\n')
 * and NUL ('\0'). The 8-bit character support don't wast extra
 * space until you have characters in file names less than 32
 * or greater than 127.
 *
 *
 * SEE ALSO:	updatedb.sh, ../bigram/locate.bigram.c
 *
 * AUTHOR:	James A. Woods, Informatics General Corp.,
 *		NASA Ames Research Center, 10/82
 *              8-bit file names characters:
 *              	Wolfram Schneider, Berlin September 1996
 */

#include <err.h>
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <limits.h>

#include "locate.h"

#define	BGBUFSIZE	(NBG * 2)	/* size of bigram buffer */

u_char buf1[PATH_MAX] = " ";
u_char buf2[PATH_MAX];
u_char bigrams[BGBUFSIZE + 1] = { 0 };

#define LOOKUP 1 /* use a lookup array instead a function, 3x faster */

#ifdef LOOKUP
#define BGINDEX(x) (big[(u_char)*x][(u_char)*(x + 1)])
typedef short bg_t;
bg_t big[UCHAR_MAX + 1][UCHAR_MAX + 1];
#else
#define BGINDEX(x) bgindex(x)
typedef int bg_t;
int	bgindex(char *);
#endif /* LOOKUP */


void	usage(void);
extern int optind;
extern int optopt;

int
main(int argc, char *argv[])
{
	u_char *cp, *oldpath, *path;
	int ch, code, count, diffcount, oldcount;
	FILE *fp;
	int i, j;

	if (pledge("stdio rpath", NULL) == -1)
		err(1, "pledge");

	while ((ch = getopt(argc, argv, "")) != -1)
		switch (ch) {
		default:
			usage();
		}
	argc -= optind;
	argv += optind;

	if (argc != 1)
		usage();

	if ((fp = fopen(argv[0], "r")) == NULL)
		err(1, "%s", argv[0]);

	if (pledge("stdio", NULL) == -1)
		err(1, "pledge");

	/* First copy bigram array to stdout. */
	if (fgets(bigrams, sizeof(bigrams), fp) == NULL)
		err(1, "fgets");

	if (strlen(bigrams) != BGBUFSIZE)
		errx(1, "bigram array too small to build db, index more files");

	if (fputs(bigrams, stdout) == EOF)
		err(1, "stdout");
	(void)fclose(fp);

#ifdef LOOKUP
	/* init lookup table */
	for (i = 0; i < UCHAR_MAX + 1; i++)
	    	for (j = 0; j < UCHAR_MAX + 1; j++)
			big[i][j] = (bg_t)-1;

	for (cp = bigrams, i = 0; *cp != '\0'; i += 2, cp += 2)
		big[(u_char)*cp][(u_char)*(cp + 1)] = (bg_t)i;

#endif /* LOOKUP */

	oldpath = buf1;
	path = buf2;
	oldcount = 0;

	while (fgets(path, sizeof(buf2), stdin) != NULL) {

		/* skip empty lines */
		if (*path == '\n')
			continue;

		/* remove newline */
		for (cp = path; *cp != '\0'; cp++) {
			/* chop newline */
			if (*cp == '\n')
				*cp = '\0';
		}

		/* Skip longest common prefix. */
		for (cp = path; *cp == *oldpath; cp++, oldpath++)
			if (*cp == '\0')
				break;

		count = cp - path;
		diffcount = count - oldcount + OFFSET;
		oldcount = count;
		if (diffcount < 0 || diffcount > 2 * OFFSET) {
			if (putchar(SWITCH) == EOF ||
			    putw(diffcount, stdout) == EOF)
				err(1, "stdout");
		} else
			if (putchar(diffcount) == EOF)
				err(1, "stdout");

		while (*cp != '\0') {
			/* print *two* characters */

			if ((code = BGINDEX(cp)) != (bg_t)-1) {
				/*
				 * print *one* as bigram
				 * Found, so mark byte with
				 *  parity bit.
				 */
				if (putchar((code / 2) | PARITY) == EOF)
					err(1, "stdout");
				cp += 2;
			} else {
				for (i = 0; i < 2; i++) {
					if (*cp == '\0')
						break;

					/* print umlauts in file names */
					if (*cp < ASCII_MIN ||
					    *cp > ASCII_MAX) {
						if (putchar(UMLAUT) == EOF ||
						    putchar(*cp++) == EOF)
							err(1, "stdout");
					} else {
						/* normal character */
						if (putchar(*cp++) == EOF)
							err(1, "stdout");
					}
				}

			}
		}

		if (path == buf1) {		/* swap pointers */
			path = buf2;
			oldpath = buf1;
		} else {
			path = buf1;
			oldpath = buf2;
		}
	}
	/* Non-zero status if there were errors */
	if (fflush(stdout) != 0 || ferror(stdout))
		exit(1);
	exit(0);
}

#ifndef LOOKUP
int
bgindex(char *bg)			/* Return location of bg in bigrams or -1. */
{
	char bg0, bg1, *p;

	bg0 = bg[0];
	bg1 = bg[1];
	for (p = bigrams; *p != NULL; p++)
		if (*p++ == bg0 && *p == bg1)
			break;
	return (*p == NULL ? -1 : (--p - bigrams));
}
#endif /* !LOOKUP */

void
usage(void)
{
	(void)fprintf(stderr,
	    "usage: locate.code common_bigrams < list > squozen_list\n");
	exit(1);
}
@


1.18
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d2 1
a2 1
 *	$OpenBSD: locate.code.c,v 1.17 2013/11/17 20:19:36 okan Exp $
d34 1
a34 1
 * 	$Id: locate.code.c,v 1.17 2013/11/17 20:19:36 okan Exp $
d122 3
d138 3
@


1.17
log
@Include unistd.h as it is the standard location for getopt().

OK millert@@
@
text
@d2 1
a2 1
 *	$OpenBSD: locate.code.c,v 1.16 2009/10/27 23:59:39 deraadt Exp $
d34 1
a34 1
 * 	$Id: locate.code.c,v 1.16 2009/10/27 23:59:39 deraadt Exp $
a80 2
#include <sys/param.h>

d87 1
d93 2
a94 2
u_char buf1[MAXPATHLEN] = " ";
u_char buf2[MAXPATHLEN];
@


1.16
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d2 1
a2 1
 *	$OpenBSD: locate.code.c,v 1.15 2007/03/18 20:13:49 otto Exp $
d34 1
a34 1
 * 	$Id: locate.code.c,v 1.15 2007/03/18 20:13:49 otto Exp $
d82 1
d85 1
d88 2
a89 1
#include <stdio.h>
@


1.15
log
@It's not smart to use a space as a field separator when a space can
be part of a bigram. So switch to tab and as a bonus detect in
locate.code if the bigram array is too short. Problem seen by Han
Boetes and other people with too big mps3 collections; these typically
contain lots of file names with spaces in them. ok jasper@@
@
text
@d2 1
a2 1
 *	$OpenBSD: locate.code.c,v 1.14 2007/02/19 20:01:12 ray Exp $
d34 1
a34 1
 * 	$Id: locate.code.c,v 1.14 2007/02/19 20:01:12 ray Exp $
a35 14

#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1989, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)locate.code.c	8.1 (Berkeley) 6/6/93";
#else
static char rcsid[] = "$OpenBSD: locate.code.c,v 1.14 2007/02/19 20:01:12 ray Exp $";
#endif
#endif /* not lint */
@


1.14
log
@- Check for fgets failure.
- Pass sizeof(buf) to fgets.
- Only print what was read.
- Simplify error checking while printing bigrams.

Inspired by diff from Charles Longeau <chl at tuxfamily dot org> long ago.

OK millert@@ and moritz@@.
@
text
@d2 1
a2 1
 *	$OpenBSD: locate.code.c,v 1.13 2003/11/09 20:13:57 otto Exp $
d34 1
a34 1
 * 	$Id: locate.code.c,v 1.13 2003/11/09 20:13:57 otto Exp $
d47 1
a47 1
static char rcsid[] = "$OpenBSD: locate.code.c,v 1.13 2003/11/09 20:13:57 otto Exp $";
d151 3
@


1.13
log
@Typos in comments from Jared Yanovich <jjy2+ at pitt dot edu>
@
text
@d2 1
a2 1
 *	$OpenBSD: locate.code.c,v 1.12 2003/09/29 16:03:16 deraadt Exp $
d34 1
a34 1
 * 	$Id: locate.code.c,v 1.12 2003/09/29 16:03:16 deraadt Exp $
d47 1
a47 1
static char rcsid[] = "$OpenBSD: locate.code.c,v 1.12 2003/09/29 16:03:16 deraadt Exp $";
d149 2
a150 1
	(void)fgets(bigrams, BGBUFSIZE + 1, fp);
d152 1
a152 1
	if (fwrite(bigrams, 1, BGBUFSIZE, stdout) != BGBUFSIZE)
@


1.12
log
@knf
@
text
@d2 1
a2 1
 *	$OpenBSD: locate.code.c,v 1.11 2003/07/07 21:36:16 deraadt Exp $
d34 1
a34 1
 * 	$Id: locate.code.c,v 1.11 2003/07/07 21:36:16 deraadt Exp $
d47 1
a47 1
static char rcsid[] = "$OpenBSD: locate.code.c,v 1.11 2003/07/07 21:36:16 deraadt Exp $";
d84 1
a84 1
 * or greather than 127.
@


1.11
log
@protos
@
text
@d2 1
a2 1
 *	$OpenBSD: locate.code.c,v 1.10 2003/06/03 02:56:10 millert Exp $
d34 1
a34 1
 * 	$Id: locate.code.c,v 1.10 2003/06/03 02:56:10 millert Exp $
d47 1
a47 1
static char rcsid[] = "$OpenBSD: locate.code.c,v 1.10 2003/06/03 02:56:10 millert Exp $";
d81 1
a81 1
 * The locate database store any character except newline ('\n') 
d85 1
a85 1
 * 
d91 1
a91 1
 *              8-bit file names characters: 
d105 1
a105 1
u_char buf1[MAXPATHLEN] = " ";	
d135 1
a135 1
		switch(ch) {
d158 1
a158 1
	    	for (j = 0; j < UCHAR_MAX + 1; j++) 
d162 1
a162 1
	        big[(u_char)*cp][(u_char)*(cp + 1)] = (bg_t)i;
d205 2
a206 2
				 * Found, so mark byte with 
				 *  parity bit. 
d211 1
a211 3
			}

			else {
d217 1
a217 1
					if (*cp < ASCII_MIN || 
d222 1
a222 3
					} 

					else {
d224 1
a224 1
						if(putchar(*cp++) == EOF)
@


1.10
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d2 1
a2 1
 *	$OpenBSD: locate.code.c,v 1.9 2002/02/16 21:27:48 millert Exp $
d34 1
a34 1
 * 	$Id: locate.code.c,v 1.9 2002/02/16 21:27:48 millert Exp $
d47 1
a47 1
static char rcsid[] = "$OpenBSD: locate.code.c,v 1.9 2002/02/16 21:27:48 millert Exp $";
d127 1
a127 3
main(argc, argv)
	int argc;
	char *argv[];
d252 1
a252 2
bgindex(bg)			/* Return location of bg in bigrams or -1. */
	char *bg;
d266 1
a266 1
usage()
@


1.9
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d2 1
a2 1
 *	$OpenBSD: locate.code.c,v 1.8 2001/11/19 19:02:15 mpech Exp $
d18 1
a18 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d34 1
a34 1
 * 	$Id: locate.code.c,v 1.8 2001/11/19 19:02:15 mpech Exp $
d47 1
a47 1
static char rcsid[] = "$OpenBSD: locate.code.c,v 1.8 2001/11/19 19:02:15 mpech Exp $";
@


1.8
log
@kill more registers

millert@@ ok
@
text
@d2 1
a2 1
 *	$OpenBSD: locate.code.c,v 1.7 1997/01/15 23:42:42 millert Exp $
d38 1
a38 1
 * 	$Id: locate.code.c,v 1.7 1997/01/15 23:42:42 millert Exp $
d51 1
a51 1
static char rcsid[] = "$OpenBSD: locate.code.c,v 1.7 1997/01/15 23:42:42 millert Exp $";
d122 1
a122 1
int	bgindex __P((char *));
d126 1
a126 1
void	usage __P((void));
@


1.7
log
@getopt(3) returns -1 when out of args, not EOF, whee!
@
text
@d2 1
a2 1
 *	$OpenBSD: locate.code.c,v 1.6 1996/10/20 00:52:53 michaels Exp $
d38 1
a38 1
 * 	$Id: locate.code.c,v 1.6 1996/10/20 00:52:53 michaels Exp $
d51 1
a51 1
static char rcsid[] = "$OpenBSD: locate.code.c,v 1.6 1996/10/20 00:52:53 michaels Exp $";
d135 1
a135 1
	register u_char *cp, *oldpath, *path;
d138 1
a138 1
	register int i, j;
d261 1
a261 1
	register char bg0, bg1, *p;
@


1.6
log
@8-Bit character support.  From wosch@@freebsd.
@
text
@d2 1
a2 1
 *	$OpenBSD$
d38 1
a38 1
 * 	$Id: locate.code.c,v 1.5 1996/09/15 16:50:36 michaels Exp $
d51 1
a51 1
static char rcsid[] = "$OpenBSD$";
d140 1
a140 1
	while ((ch = getopt(argc, argv, "")) != EOF)
@


1.5
log
@Blind update of wosch@@FreeBSD's code:

optimized search algorithm
faster IO due mmap(2) [-m | -s]
better error check for damaged databases
support for databases in network byte order (SunOS/sparc)
optional case insensitve search [-i]
optional multiple databases
optional multiple pattern
new enviroment variable LOCATE_PATH for database(s)
[-S] print some statistic about the database
[-l number] limit output to number file names
[-c] suppress normal output; instead print a count of matching file names
fix prototypes/forward declarations/return type
@
text
@a0 2
/*	$OpenBSD$	*/

d2 2
d38 1
a38 1
 * 	$Id: locate.code.c,v 1.5 1996/08/31 14:51:18 wosch Exp $
d81 1
d85 7
a91 1
 * SEE ALSO:	updatedb.csh, bigram.c
d95 2
d111 1
a111 1
char bigrams[BGBUFSIZE + 1] = { 0 };
d116 3
a118 3
#define BGINDEX(x) (big[(u_int)*x][(u_int)*(x+1)])
typedef u_char bg_t;
bg_t big[UCHAR_MAX][UCHAR_MAX];
d163 2
a164 2
	for (i = 0; i < UCHAR_MAX; i++)
	    	for (j = 0; j < UCHAR_MAX; j++) 
d168 2
a169 1
	        big[(int)*cp][(int)*(cp + 1)] = (bg_t)i;
d178 1
a178 1
	    	/* skip empty lines */
d182 1
a182 1
		/* Squelch characters that would botch the decoding. */
a186 3
			/* range */
			else if (*cp < ASCII_MIN || *cp > ASCII_MAX)
				*cp = '?';
d190 3
a192 1
		for (cp = path; *cp == *oldpath && *cp != '\0'; cp++, oldpath++);
d206 8
a213 11
			if (*(cp + 1) == '\0') {
				if (putchar(*cp) == EOF)
					err(1, "stdout");
				break;
			}
			if ((code = BGINDEX(cp)) == (bg_t)-1) {
				if (putchar(*cp++) == EOF ||
				    putchar(*cp++) == EOF)
					err(1, "stdout");
			} else {
				/* Found, so mark byte with parity bit. */
d218 22
d241 1
d268 1
a268 1
	return (*p == NUL ? -1 : (--p - bigrams));
@


1.4
log
@Bugs in code, NUL != NULL, from bde@@zeta.org.au (Bruce Evans)
@
text
@d1 1
a1 1
/*        $OpenBSD: locate.code.c,v 1.3 1996/08/16 22:00:11 michaels Exp $                                                           */
d37 2
d51 1
a51 1
static char rcsid[] = "$OpenBSD: locate.code.c,v 1.3 1996/08/16 22:00:11 michaels Exp $";
d104 2
a105 1
#define LOOKUP 1
a109 1

d113 3
a115 1
#endif
a116 1
int	bgindex __P((char *));
d147 1
d158 1
a158 1
	for (cp = bigrams, i = 0; *cp != NUL; i += 2, cp += 2)
d160 1
a160 1
#endif
d165 1
d173 1
a173 1
		for (cp = path; *cp != NUL; cp++) {
d176 1
a176 1
				*cp = NUL;
d183 1
a183 1
		for (cp = path; *cp == *oldpath && *cp; cp++, oldpath++);
d196 2
a197 2
		while (*cp != NUL) {
			if (*(cp + 1) == NUL) {
d224 1
a224 2

	return 0;
d236 1
a236 1
	for (p = bigrams; *p != NUL; p++)
@


1.3
log
@Better locate from wosch@@freebsd (Wolfram Schneider), sligthly modified.
@
text
@d1 1
a1 1
/*        $OpenBSD$                                                           */
d49 1
a49 1
static char rcsid[] = "$OpenBSD$";
d154 1
a154 1
	for (cp = bigrams, i = 0; *cp != NULL; i += 2, cp += 2)
d168 1
a168 1
		for (cp = path; *cp != NULL; cp++) {
d171 1
a171 1
				*cp = NULL;
d191 2
a192 2
		while (*cp != NULL) {
			if (*(cp + 1) == NULL) {
d232 1
a232 1
	for (p = bigrams; *p != NULL; p++)
d235 1
a235 1
	return (*p == NULL ? -1 : (--p - bigrams));
@


1.2
log
@rcsid
@
text
@d1 1
a1 2
/*	$OpenBSD: locate.code.c,v 1.5 1995/08/31 22:36:33 jtc Exp $	*/
/*	$NetBSD: locate.code.c,v 1.5 1995/08/31 22:36:33 jtc Exp $	*/
d47 3
a49 1
static char sccsid[] = "@@(#)locate.code.c	8.4 (Berkeley) 5/4/95";
a50 1
static char rcsid[] = "$OpenBSD: locate.code.c,v 1.5 1995/08/31 22:36:33 jtc Exp $";
a88 1

a90 1
#include <stdio.h>
d93 1
a93 2
#include <unistd.h>

d98 2
a99 2
char buf1[MAXPATHLEN] = " ";	
char buf2[MAXPATHLEN];
d102 11
d115 2
d123 1
a123 1
	register char *cp, *oldpath, *path;
d126 1
a129 1
		case '?':
d148 10
d162 4
a165 4
		/* Truncate newline. */
		cp = path + strlen(path) - 1;
		if (cp > path && *cp == '\n')
			*cp = '\0';
d168 6
a173 3
		for (cp = path; *cp != '\0'; cp++) {
			*cp &= PARITY-1;
			if (*cp <= SWITCH)
d178 2
a179 3
		for (cp = path; *cp == *oldpath; cp++, oldpath++)
			if (*oldpath == '\0')
				break;
d191 2
a192 2
		while (*cp != '\0') {
			if (*(cp + 1) == '\0') {
d197 1
a197 1
			if ((code = bgindex(cp)) < 0) {
d219 2
a220 1
	exit(0);
d223 1
d232 1
a232 1
	for (p = bigrams; *p != '\0'; p++)
d235 1
a235 1
	return (*p == '\0' ? -1 : --p - bigrams);
d237 1
@


1.1
log
@Initial revision
@
text
@d1 1
d50 1
a50 1
static char rcsid[] = "$NetBSD: locate.code.c,v 1.5 1995/08/31 22:36:33 jtc Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
