head	1.31;
access;
symbols
	OPENBSD_6_0:1.31.0.4
	OPENBSD_6_0_BASE:1.31
	OPENBSD_5_9:1.31.0.2
	OPENBSD_5_9_BASE:1.31
	OPENBSD_5_8:1.26.0.6
	OPENBSD_5_8_BASE:1.26
	OPENBSD_5_7:1.26.0.2
	OPENBSD_5_7_BASE:1.26
	OPENBSD_5_6:1.25.0.12
	OPENBSD_5_6_BASE:1.25
	OPENBSD_5_5:1.25.0.10
	OPENBSD_5_5_BASE:1.25
	OPENBSD_5_4:1.25.0.6
	OPENBSD_5_4_BASE:1.25
	OPENBSD_5_3:1.25.0.4
	OPENBSD_5_3_BASE:1.25
	OPENBSD_5_2:1.25.0.2
	OPENBSD_5_2_BASE:1.25
	OPENBSD_5_1_BASE:1.24
	OPENBSD_5_1:1.24.0.10
	OPENBSD_5_0:1.24.0.8
	OPENBSD_5_0_BASE:1.24
	OPENBSD_4_9:1.24.0.6
	OPENBSD_4_9_BASE:1.24
	OPENBSD_4_8:1.24.0.4
	OPENBSD_4_8_BASE:1.24
	OPENBSD_4_7:1.24.0.2
	OPENBSD_4_7_BASE:1.24
	OPENBSD_4_6:1.23.0.4
	OPENBSD_4_6_BASE:1.23
	OPENBSD_4_5:1.22.0.2
	OPENBSD_4_5_BASE:1.22
	OPENBSD_4_4:1.21.0.2
	OPENBSD_4_4_BASE:1.21
	OPENBSD_4_3:1.19.0.8
	OPENBSD_4_3_BASE:1.19
	OPENBSD_4_2:1.19.0.6
	OPENBSD_4_2_BASE:1.19
	OPENBSD_4_1:1.19.0.4
	OPENBSD_4_1_BASE:1.19
	OPENBSD_4_0:1.19.0.2
	OPENBSD_4_0_BASE:1.19
	OPENBSD_3_9:1.18.0.8
	OPENBSD_3_9_BASE:1.18
	OPENBSD_3_8:1.18.0.6
	OPENBSD_3_8_BASE:1.18
	OPENBSD_3_7:1.18.0.4
	OPENBSD_3_7_BASE:1.18
	OPENBSD_3_6:1.18.0.2
	OPENBSD_3_6_BASE:1.18
	OPENBSD_3_5:1.17.0.2
	OPENBSD_3_5_BASE:1.17
	OPENBSD_3_4:1.16.0.2
	OPENBSD_3_4_BASE:1.16
	OPENBSD_3_3:1.14.0.4
	OPENBSD_3_3_BASE:1.14
	OPENBSD_3_2:1.14.0.2
	OPENBSD_3_2_BASE:1.14
	OPENBSD_3_1:1.13.0.2
	OPENBSD_3_1_BASE:1.13
	OPENBSD_3_0:1.9.0.2
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_9:1.8.0.16
	OPENBSD_2_8:1.8.0.14
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.12
	OPENBSD_2_7_BASE:1.8
	OPENBSD_2_6:1.8.0.10
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.8.0.8
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.8.0.6
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.8.0.4
	OPENBSD_2_3_BASE:1.8
	OPENBSD_2_2:1.8.0.2
	OPENBSD_2_2_BASE:1.8
	OPENBSD_2_1:1.7.0.2
	OPENBSD_2_1_BASE:1.7
	OPENBSD_2_0:1.5.0.2
	OPENBSD_2_0_BASE:1.5
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.31
date	2015.11.19.21.46.05;	author mmcc;	state Exp;
branches;
next	1.30;
commitid	w4GRY6i5jlKot6DX;

1.30
date	2015.11.15.07.44.38;	author deraadt;	state Exp;
branches;
next	1.29;
commitid	PU562QkD03kw1ijl;

1.29
date	2015.10.23.14.16.02;	author tedu;	state Exp;
branches;
next	1.28;
commitid	gxbcfvrRSb1CuSyr;

1.28
date	2015.10.23.08.02.13;	author tedu;	state Exp;
branches;
next	1.27;
commitid	TfSdKXVQ9GaBRh5Y;

1.27
date	2015.10.23.07.57.03;	author tedu;	state Exp;
branches;
next	1.26;
commitid	eptIRj1sULvwai3n;

1.26
date	2015.01.16.06.40.09;	author deraadt;	state Exp;
branches;
next	1.25;
commitid	Uu5nFG3wCl0LACBb;

1.25
date	2012.04.13.15.13.07;	author ajacoutot;	state Exp;
branches;
next	1.24;

1.24
date	2009.10.27.23.59.39;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	2009.06.04.07.19.45;	author espie;	state Exp;
branches;
next	1.22;

1.22
date	2008.10.01.00.55.10;	author kevlo;	state Exp;
branches;
next	1.21;

1.21
date	2008.07.26.10.57.09;	author jmc;	state Exp;
branches;
next	1.20;

1.20
date	2008.07.26.09.48.00;	author pyr;	state Exp;
branches;
next	1.19;

1.19
date	2006.08.05.23.05.13;	author ray;	state Exp;
branches;
next	1.18;

1.18
date	2004.04.08.20.08.59;	author jmc;	state Exp;
branches;
next	1.17;

1.17
date	2003.09.29.16.03.16;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2003.07.07.21.36.16;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2003.06.03.02.56.10;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2002.07.07.09.02.30;	author jufi;	state Exp;
branches;
next	1.13;

1.13
date	2002.03.14.06.51.42;	author mpech;	state Exp;
branches;
next	1.12;

1.12
date	2002.02.17.19.42.31;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2002.02.16.21.27.48;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2001.11.19.19.02.15;	author mpech;	state Exp;
branches;
next	1.9;

1.9
date	2001.05.11.15.56.14;	author art;	state Exp;
branches;
next	1.8;

1.8
date	97.06.21.07.35.15;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	97.01.15.23.42.44;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	96.10.20.00.52.56;	author michaels;	state Exp;
branches;
next	1.5;

1.5
date	96.09.15.16.50.38;	author michaels;	state Exp;
branches;
next	1.4;

1.4
date	96.08.30.12.54.18;	author michaels;	state Exp;
branches;
next	1.3;

1.3
date	96.08.16.22.00.12;	author michaels;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.35.52;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.33;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.33;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.31
log
@Sort and simplify includes, remove a couple needless extern decls.

From Michael Reed. ok tedu@@
@
text
@/*
 *	$OpenBSD: locate.c,v 1.30 2015/11/15 07:44:38 deraadt Exp $
 *
 * Copyright (c) 1995 Wolfram Schneider <wosch@@FreeBSD.org>. Berlin.
 * Copyright (c) 1989, 1993
 *      The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * James A. Woods.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *      $Id: locate.c,v 1.30 2015/11/15 07:44:38 deraadt Exp $
 */

/*
 * Ref: Usenix ;login:, Vol 8, No 1, February/March, 1983, p. 8.
 *
 * Locate scans a file list for the full pathname of a file given only part
 * of the name.  The list has been processed with "front-compression"
 * and bigram coding.  Front compression reduces space by a factor of 4-5,
 * bigram coding by a further 20-25%.
 *
 * The codes are:
 *
 *      0-28    likeliest differential counts + offset to make nonnegative
 *      30      switch code for out-of-range count to follow in next word
 *      31      an 8 bit char followed
 *      128-255 bigram codes (128 most common, as determined by 'updatedb')
 *      32-127  single character (printable) ascii residue (ie, literal)
 *
 * A novel two-tiered string search technique is employed:
 *
 * First, a metacharacter-free subpattern and partial pathname is matched
 * BACKWARDS to avoid full expansion of the pathname list.  The time savings
 * is 40-50% over forward matching, which cannot efficiently handle
 * overlapped search patterns and compressed path residue.
 *
 * Then, the actual shell glob-style regular expression (if in this form) is
 * matched against the candidate pathnames using the slower routines provided
 * in the standard 'find'.
 */

#include <sys/mman.h>
#include <sys/stat.h>
#include <sys/types.h>

#include <ctype.h>
#include <err.h>
#include <fcntl.h>
#include <fnmatch.h>
#include <libgen.h>
#include <limits.h>
#include <locale.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "locate.h"
#include "pathnames.h"

#ifdef DEBUG
#  include <sys/time.h>
#  include <sys/types.h>
#  include <sys/resource.h>
#endif

char *path_fcodes;      /* locate database */
int f_mmap;             /* use mmap */
int f_icase;            /* ignore case */
int f_statistic;        /* print statistic */
int f_silent;           /* suppress output, show only count of matches */
int f_limit;            /* limit number of output lines, 0 == infinite */
int f_basename;		/* match only on the basename */
u_int counter;          /* counter for matches [-c] */


void    usage(void);
void    statistic(FILE *, char *);
void    fastfind(FILE *, char *, char *);
void    fastfind_icase(FILE *, char *, char *);
void    fastfind_mmap(char *, caddr_t, int, char *);
void    fastfind_mmap_icase(char *, caddr_t, int, char *);
void	search_mmap(char *, char **);
void	search_statistic(char *, char **);
unsigned long cputime(void);

extern char     **colon(char **, char*, char*);
extern void     print_matches(u_int);
extern int      getwm(caddr_t);
extern int      getwf(FILE *);
extern u_char   *tolower_word(u_char *);
extern int	check_bigram_char(int);
extern char 	*patprep(char *);


int
main(int argc, char *argv[])
{
	int ch;
	char **dbv = NULL;
	(void) setlocale(LC_ALL, "");

	if (pledge("stdio rpath", NULL) == -1)
		err(1, "pledge");

	while ((ch = getopt(argc, argv, "bScd:il:")) != -1)
		switch (ch) {
		case 'b':
			f_basename = 1;
			break;
		case 'S':	/* statistic lines */
			f_statistic = 1;
			break;
		case 'l': /* limit number of output lines, 0 == infinite */
			f_limit = atoi(optarg);
			break;
		case 'd':	/* database */
			dbv = colon(dbv, optarg, _PATH_FCODES);
			break;
		case 'i':	/* ignore case */
			f_icase = 1;
			break;
		case 'c': /* suppress output, show only count of matches */
			f_silent = 1;
			break;
		default:
			usage();
		}
	argv += optind;
	argc -= optind;

	/* to few arguments */
	if (argc < 1 && !(f_statistic))
		usage();

	/* no (valid) database as argument */
	if (dbv == NULL || *dbv == NULL) {
		/* try to read database from environment */
		if ((path_fcodes = getenv("LOCATE_PATH")) == NULL ||
		    *path_fcodes == '\0')
			/* use default database */
			dbv = colon(dbv, _PATH_FCODES, _PATH_FCODES);
		else		/* $LOCATE_PATH */
			dbv = colon(dbv, path_fcodes, _PATH_FCODES);
	}

	if (f_icase && UCHAR_MAX < 4096) /* init tolower lookup table */
		for (ch = 0; ch < UCHAR_MAX + 1; ch++)
			myctype[ch] = tolower(ch);

	/* foreach database ... */
	while ((path_fcodes = *dbv) != NULL) {
		dbv++;

		if (f_statistic)
			search_statistic(path_fcodes, argv);
		else
			search_mmap(path_fcodes, argv);
	}

	if (f_silent)
		print_matches(counter);
	exit(0);
}


void
search_statistic(char *db, char **s)
{
	FILE *fp;
#ifdef DEBUG
	long t0;
#endif

	if ((fp = fopen(path_fcodes, "r")) == NULL)
		err(1,  "`%s'", path_fcodes);

	/* count only chars or lines */
	statistic(fp, path_fcodes);
	(void)fclose(fp);
}

void
search_mmap(char *db, char **s)
{
	struct stat sb;
	int fd;
	caddr_t p;
	off_t len;
#ifdef DEBUG
	long t0;
#endif
	if ((fd = open(path_fcodes, O_RDONLY)) == -1 ||
	    fstat(fd, &sb) == -1)
		err(1, "`%s'", path_fcodes);
	len = sb.st_size;
	if (len < (2*NBG))
		errx(1, "database too small: %s", db);

	if ((p = mmap((caddr_t)0, (size_t)len, PROT_READ, MAP_SHARED,
	    fd, (off_t)0)) == MAP_FAILED)
		err(1, "mmap ``%s''", path_fcodes);

	/* foreach search string ... */
	while (*s != NULL) {
#ifdef DEBUG
		t0 = cputime();
#endif
		if (f_icase)
			fastfind_mmap_icase(*s, p, (int)len, path_fcodes);
		else
			fastfind_mmap(*s, p, (int)len, path_fcodes);
#ifdef DEBUG
		(void)fprintf(stderr, "fastfind %ld ms\n", cputime () - t0);
#endif
		s++;
	}

	if (munmap(p, (size_t)len) == -1)
		warn("munmap %s", path_fcodes);

	(void)close(fd);
}

#ifdef DEBUG
unsigned long
cputime(void)
{
	struct rusage rus;

	getrusage(RUSAGE_SELF, &rus);
	return(rus.ru_utime.tv_sec * 1000 + rus.ru_utime.tv_usec / 1000);
}
#endif /* DEBUG */

void
usage(void)
{
	(void)fprintf(stderr, "usage: locate [-bciS] [-d database] ");
	(void)fprintf(stderr, "[-l limit] pattern ...\n");
	(void)fprintf(stderr, "default database: `%s' or $LOCATE_PATH\n",
	    _PATH_FCODES);
	exit(1);
}

void
sane_count(int count)
{
	if (count < 0 || count >= PATH_MAX) {
		fprintf(stderr, "locate: corrupted database\n");
		exit(1);
	}
}

/* load fastfind functions */

#undef FF_ICASE
#include "fastfind.c"
#define FF_ICASE
#include "fastfind.c"
@


1.30
log
@very simple pledges, stdio and rpath, very boring
@
text
@d2 1
a2 1
 *	$OpenBSD: locate.c,v 1.29 2015/10/23 14:16:02 tedu Exp $
d35 1
a35 1
 *      $Id: locate.c,v 1.29 2015/10/23 14:16:02 tedu Exp $
d66 4
d72 1
d75 1
a80 11
#include <limits.h>

#include <sys/types.h>
#include <sys/stat.h>
#include <sys/mman.h>
#include <fcntl.h>


#ifdef sun
#include <netinet/in.h> /* SunOS byteorder(3) htohl(3) */
#endif
a117 3

extern char     *optarg;
extern int      optind;
@


1.29
log
@correct spelling of statistic in function name, from Pablo Hernandez
@
text
@d2 1
a2 1
 *	$OpenBSD: locate.c,v 1.28 2015/10/23 08:02:13 tedu Exp $
d35 1
a35 1
 *      $Id: locate.c,v 1.28 2015/10/23 08:02:13 tedu Exp $
d134 3
@


1.28
log
@undent includes, from michael reed
@
text
@d2 1
a2 1
 *	$OpenBSD: locate.c,v 1.27 2015/10/23 07:57:03 tedu Exp $
d35 1
a35 1
 *      $Id: locate.c,v 1.27 2015/10/23 07:57:03 tedu Exp $
d113 1
a113 1
void	search_stastic(char *, char **);
d185 1
a185 1
			search_stastic(path_fcodes, argv);
d197 1
a197 1
search_stastic(char *db, char **s)
@


1.27
log
@mmap is the default. it's effectively the only tested codepath. so burn down
the stdio code path.
pros: everything is simpler. how can anyone read code this heavily spliced
with ifdef?
cons: you can't pipe a database into locate. who does this???
ok deraadt
@
text
@d2 1
a2 1
 *	$OpenBSD: locate.c,v 1.26 2015/01/16 06:40:09 deraadt Exp $
d35 1
a35 1
 *      $Id: locate.c,v 1.26 2015/01/16 06:40:09 deraadt Exp $
d77 4
a80 4
#  include <sys/types.h>
#  include <sys/stat.h>
#  include <sys/mman.h>
#  include <fcntl.h>
@


1.26
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d2 1
a2 1
 *	$OpenBSD: locate.c,v 1.25 2012/04/13 15:13:07 ajacoutot Exp $
d35 1
a35 1
 *      $Id: locate.c,v 1.25 2012/04/13 15:13:07 ajacoutot Exp $
a76 1
#ifdef MMAP
a80 1
#endif
a98 1
int f_stdin;            /* read database from stdin */
d113 1
a113 1
void	search_fopen(char *, char **);
a132 3
#ifdef MMAP
	f_mmap = 1;		/* mmap is default */
#endif
d135 1
a135 1
	while ((ch = getopt(argc, argv, "bScd:il:ms")) != -1)
a151 10
		case 'm':	/* mmap */
#ifdef MMAP
			f_mmap = 1;
#else
			(void)fprintf(stderr, "mmap(2) not implemented\n");
#endif
			break;
		case 's':	/* stdio lib */
			f_mmap = 0;
			break;
d184 2
a185 10
		if (!strcmp(path_fcodes, "-"))
			f_stdin = 1;
		else
			f_stdin = 0;

#ifndef MMAP
		f_mmap = 0;	/* be paranoid */
#endif
		if (!f_mmap || f_stdin || f_statistic)
			search_fopen(path_fcodes, argv);
d197 1
a197 1
search_fopen(char *db, char **s)
d204 1
a204 11
	/* can only read stdin once */
	if (f_stdin) {
		fp = stdin;
		if (*(s+1) != NULL) {
			(void)fprintf(stderr,
			    "read database from stdin, use only");
			(void)fprintf(stderr, " `%s' as pattern\n", *s);
			*(s+1) = NULL;
		}
	}
	else if ((fp = fopen(path_fcodes, "r")) == NULL)
d208 1
a208 24
	if (f_statistic) {
		statistic(fp, path_fcodes);
		(void)fclose(fp);
		return;
	}

	/* foreach search string ... */
	while (*s != NULL) {
#ifdef DEBUG
		t0 = cputime();
#endif
		if (!f_stdin &&
		    fseek(fp, (long)0, SEEK_SET) == -1)
			err(1, "fseek to begin of ``%s''", path_fcodes);

		if (f_icase)
			fastfind_icase(fp, *s, path_fcodes);
		else
			fastfind(fp, *s, path_fcodes);
#ifdef DEBUG
		(void)fprintf(stderr, "fastfind %ld ms\n", cputime () - t0);
#endif
		s++;
	}
a211 1
#ifdef MMAP
a252 1
#endif /* MMAP */
d268 1
a268 1
	(void)fprintf(stderr, "usage: locate [-bcimSs] [-d database] ");
a285 15
/* statistic */
/* fastfind_mmap, fastfind_mmap_icase */
#ifdef MMAP
#undef FF_MMAP
#undef FF_ICASE

#define FF_MMAP
#include "fastfind.c"
#define FF_ICASE
#include "fastfind.c"
#endif /* MMAP */

/* fopen */
/* fastfind, fastfind_icase */
#undef FF_MMAP
@


1.25
log
@Don't try to mmap a 0-length file.

input/ok deraadt@@
@
text
@d2 1
a2 1
 *	$OpenBSD: locate.c,v 1.24 2009/10/27 23:59:39 deraadt Exp $
d35 1
a35 1
 *      $Id: locate.c,v 1.24 2009/10/27 23:59:39 deraadt Exp $
a65 1
#include <sys/param.h>
d75 1
d337 1
a337 1
	if (count < 0 || count >= MAXPATHLEN) {
@


1.24
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d2 1
a2 1
 *	$OpenBSD: locate.c,v 1.23 2009/06/04 07:19:45 espie Exp $
d35 1
a35 1
 *      $Id: locate.c,v 1.23 2009/06/04 07:19:45 espie Exp $
d284 2
@


1.23
log
@error out if count gets out of bounds. Happens with corrupted databases,
better than a buffer underflow and a segfault.
okay millert@@
@
text
@d2 1
a2 1
 *	$OpenBSD: locate.c,v 1.22 2008/10/01 00:55:10 kevlo Exp $
d35 1
a35 1
 *      $Id: locate.c,v 1.22 2008/10/01 00:55:10 kevlo Exp $
a36 15

#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1995-1996 Wolfram Schneider, Berlin.\n\
@@(#) Copyright (c) 1989, 1993\n\
        The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)locate.c    8.1 (Berkeley) 6/6/93";
#else
static char rcsid[] = "$OpenBSD: locate.c,v 1.22 2008/10/01 00:55:10 kevlo Exp $";
#endif
#endif /* not lint */
@


1.22
log
@in getrusage(), use RUSAGE_SELF for the current process rather than 0

ok millert@@
@
text
@d2 1
a2 1
 *	$OpenBSD: locate.c,v 1.21 2008/07/26 10:57:09 jmc Exp $
d35 1
a35 1
 *      $Id: locate.c,v 1.21 2008/07/26 10:57:09 jmc Exp $
d49 1
a49 1
static char rcsid[] = "$OpenBSD: locate.c,v 1.21 2008/07/26 10:57:09 jmc Exp $";
d347 8
@


1.21
log
@add -b to SYNOPSIS and usage();
@
text
@d2 1
a2 1
 *	$OpenBSD: locate.c,v 1.20 2008/07/26 09:48:00 pyr Exp $
d35 1
a35 1
 *      $Id: locate.c,v 1.20 2008/07/26 09:48:00 pyr Exp $
d49 1
a49 1
static char rcsid[] = "$OpenBSD: locate.c,v 1.20 2008/07/26 09:48:00 pyr Exp $";
d332 1
a332 1
	getrusage(0, &rus);
@


1.20
log
@Add -b switch for matching on the last part of the path only.

ok landry@@, otto liked the idea and the original diff, ``do it'' deraadt@@
@
text
@d2 1
a2 1
 *	$OpenBSD: locate.c,v 1.19 2006/08/05 23:05:13 ray Exp $
d35 1
a35 1
 *      $Id: locate.c,v 1.19 2006/08/05 23:05:13 ray Exp $
d49 1
a49 1
static char rcsid[] = "$OpenBSD: locate.c,v 1.19 2006/08/05 23:05:13 ray Exp $";
d340 1
a340 1
	(void)fprintf(stderr, "usage: locate [-cimSs] [-d database] ");
@


1.19
log
@Remove "with with" typos.

Fix by Tobias Stoeckmann <tobias at bugol dot de> in PR 5193.
@
text
@d2 1
a2 1
 *	$OpenBSD: locate.c,v 1.18 2004/04/08 20:08:59 jmc Exp $
d35 1
a35 1
 *      $Id: locate.c,v 1.18 2004/04/08 20:08:59 jmc Exp $
d49 1
a49 1
static char rcsid[] = "$OpenBSD: locate.c,v 1.18 2004/04/08 20:08:59 jmc Exp $";
d85 1
d120 1
d156 1
a156 1
	while ((ch = getopt(argc, argv, "Scd:il:ms")) != -1)
d158 3
@


1.18
log
@sort options and sync usage();
@
text
@d2 1
a2 1
 *	$OpenBSD: locate.c,v 1.17 2003/09/29 16:03:16 deraadt Exp $
d35 1
a35 1
 *      $Id: locate.c,v 1.17 2003/09/29 16:03:16 deraadt Exp $
d49 1
a49 1
static char rcsid[] = "$OpenBSD: locate.c,v 1.17 2003/09/29 16:03:16 deraadt Exp $";
d57 1
a57 1
 * of the name.  The list has been processed with with "front-compression"
@


1.17
log
@knf
@
text
@d2 1
a2 1
 *	$OpenBSD: locate.c,v 1.16 2003/07/07 21:36:16 deraadt Exp $
d35 1
a35 1
 *      $Id: locate.c,v 1.16 2003/07/07 21:36:16 deraadt Exp $
d49 1
a49 1
static char rcsid[] = "$OpenBSD: locate.c,v 1.16 2003/07/07 21:36:16 deraadt Exp $";
d335 2
a336 2
	(void)fprintf(stderr, "usage: locate [-Scims] [-l limit] ");
	(void)fprintf(stderr, "[-d database] pattern ...\n");
@


1.16
log
@protos
@
text
@d2 1
a2 1
 *	$OpenBSD: locate.c,v 1.15 2003/06/03 02:56:10 millert Exp $
d35 1
a35 1
 *      $Id: locate.c,v 1.15 2003/06/03 02:56:10 millert Exp $
d49 1
a49 1
static char rcsid[] = "$OpenBSD: locate.c,v 1.15 2003/06/03 02:56:10 millert Exp $";
d147 2
a148 2
        int ch;
        char **dbv = NULL;
d150 1
a150 1
        f_mmap = 1;		/* mmap is default */
d154 15
a168 15
        while ((ch = getopt(argc, argv, "Scd:il:ms")) != -1)
                switch(ch) {
                case 'S':	/* statistic lines */   
                        f_statistic = 1;
                        break;
                case 'l': /* limit number of output lines, 0 == infinite */
                        f_limit = atoi(optarg);
                        break;
                case 'd':	/* database */
                        dbv = colon(dbv, optarg, _PATH_FCODES);
                        break;
                case 'i':	/* ignore case */
                        f_icase = 1;
                        break;
                case 'm':	/* mmap */
d170 1
a170 1
                        f_mmap = 1;
d174 27
a200 35
                        break;
                case 's':	/* stdio lib */
                        f_mmap = 0;
                        break;
                case 'c': /* suppress output, show only count of matches */
                        f_silent = 1;
                        break;
                default:
                        usage();
                }
        argv += optind;
        argc -= optind;

        /* to few arguments */
        if (argc < 1 && !(f_statistic))
                usage();

        /* no (valid) database as argument */
        if (dbv == NULL || *dbv == NULL) {
                /* try to read database from environment */
                if ((path_fcodes = getenv("LOCATE_PATH")) == NULL ||
		     *path_fcodes == '\0')
                        /* use default database */
                        dbv = colon(dbv, _PATH_FCODES, _PATH_FCODES);
                else		/* $LOCATE_PATH */
                        dbv = colon(dbv, path_fcodes, _PATH_FCODES);
        }

        if (f_icase && UCHAR_MAX < 4096) /* init tolower lookup table */
                for (ch = 0; ch < UCHAR_MAX + 1; ch++)
                        myctype[ch] = tolower(ch);

        /* foreach database ... */
        while((path_fcodes = *dbv) != NULL) {
                dbv++;
d202 10
a211 2
                if (!strcmp(path_fcodes, "-"))
                        f_stdin = 1;
d218 1
a218 1
                if (!f_mmap || f_stdin || f_statistic) 
d220 1
a220 1
                else 
d222 1
a222 1
        }
d224 3
a226 3
        if (f_silent)
                print_matches(counter);
        exit(0);
d235 1
a235 1
        long t0;
d237 1
a237 1
	       
d239 1
a239 1
	if (f_stdin) { 
d242 2
a243 2
			(void)fprintf(stderr, 
				      "read database from stdin, use only");
d247 1
a247 1
	} 
d259 1
a259 1
	while(*s != NULL) {
d275 1
a275 1
	} 
d277 1
a277 1
} 
d283 4
a286 4
        struct stat sb;
        int fd;
        caddr_t p;
        off_t len;
d288 1
a288 1
        long t0;
d295 2
a296 3
	if ((p = mmap((caddr_t)0, (size_t)len,
		      PROT_READ, MAP_SHARED,
		      fd, (off_t)0)) == MAP_FAILED)
d316 1
a316 1
	
d335 1
a335 1
        (void)fprintf(stderr, "usage: locate [-Scims] [-l limit] ");
d337 3
a339 3
        (void)fprintf(stderr, "default database: `%s' or $LOCATE_PATH\n", 
		      _PATH_FCODES);
        exit(1);
@


1.15
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d2 1
a2 1
 *	$OpenBSD: locate.c,v 1.14 2002/07/07 09:02:30 jufi Exp $
d35 1
a35 1
 *      $Id: locate.c,v 1.14 2002/07/07 09:02:30 jufi Exp $
d49 1
a49 1
static char rcsid[] = "$OpenBSD: locate.c,v 1.14 2002/07/07 09:02:30 jufi Exp $";
d145 1
a145 3
main(argc, argv)
        int argc;
        char **argv;
d231 1
a231 3
search_fopen(db, s)
	char *db; /* database */
	char **s; /* search strings */
d281 1
a281 3
search_mmap(db, s)
	char *db; /* database */
	char **s; /* search strings */
d324 1
a324 1
cputime ()
d334 1
a334 1
usage ()
@


1.14
log
@
enviroment -> environment
@
text
@d2 1
a2 1
 *	$OpenBSD: locate.c,v 1.13 2002/03/14 06:51:42 mpech Exp $
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the University of
 *      California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d35 1
a35 1
 *      $Id: locate.c,v 1.13 2002/03/14 06:51:42 mpech Exp $
d49 1
a49 1
static char rcsid[] = "$OpenBSD: locate.c,v 1.13 2002/03/14 06:51:42 mpech Exp $";
@


1.13
log
@Remove \n from err/errx/warn/warnx().

millert@@ ok
@
text
@d2 1
a2 1
 *	$OpenBSD: locate.c,v 1.12 2002/02/17 19:42:31 millert Exp $
d39 1
a39 1
 *      $Id: locate.c,v 1.12 2002/02/17 19:42:31 millert Exp $
d53 1
a53 1
static char rcsid[] = "$OpenBSD: locate.c,v 1.12 2002/02/17 19:42:31 millert Exp $";
d199 1
a199 1
                /* try to read database from enviroment */
@


1.12
log
@Manual cleanup of remaining userland __P use (excluding packages maintained outside the tree)
@
text
@d2 1
a2 1
 *	$OpenBSD: locate.c,v 1.11 2002/02/16 21:27:48 millert Exp $
d39 1
a39 1
 *      $Id: locate.c,v 1.11 2002/02/16 21:27:48 millert Exp $
d53 1
a53 1
static char rcsid[] = "$OpenBSD: locate.c,v 1.11 2002/02/16 21:27:48 millert Exp $";
d273 1
a273 1
			err(1, "fseek to begin of ``%s''\n", path_fcodes);
d326 1
a326 1
		warn("munmap %s\n", path_fcodes);
@


1.11
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d2 1
a2 1
 *	$OpenBSD: locate.c,v 1.10 2001/11/19 19:02:15 mpech Exp $
d39 1
a39 1
 *      $Id: locate.c,v 1.10 2001/11/19 19:02:15 mpech Exp $
d53 1
a53 1
static char rcsid[] = "$OpenBSD: locate.c,v 1.10 2001/11/19 19:02:15 mpech Exp $";
a104 3
#ifndef __P
#define __P(x) x
#endif
@


1.10
log
@kill more registers

millert@@ ok
@
text
@d2 1
a2 1
 *	$OpenBSD: locate.c,v 1.9 2001/05/11 15:56:14 art Exp $
d39 1
a39 1
 *      $Id: locate.c,v 1.9 2001/05/11 15:56:14 art Exp $
d53 1
a53 1
static char rcsid[] = "$OpenBSD: locate.c,v 1.9 2001/05/11 15:56:14 art Exp $";
d129 17
a145 17
void    usage __P((void));
void    statistic __P((FILE *, char *));
void    fastfind __P((FILE *, char *, char *));
void    fastfind_icase __P((FILE *, char *, char *));
void    fastfind_mmap __P((char *, caddr_t, int, char *));
void    fastfind_mmap_icase __P((char *, caddr_t, int, char *));
void	search_mmap __P((char *, char **));
void	search_fopen __P((char *, char **));
unsigned long cputime __P((void));

extern char     **colon __P((char **, char*, char*));
extern void     print_matches __P((u_int));
extern int      getwm __P((caddr_t));
extern int      getwf __P((FILE *));
extern u_char   *tolower_word __P((u_char *));
extern int	check_bigram_char __P((int));
extern char 	*patprep __P((char *));
@


1.9
log
@-1 -> MAP_FAILED
@
text
@d2 1
a2 1
 *	$OpenBSD: locate.c,v 1.8 1997/06/21 07:35:15 deraadt Exp $
d39 1
a39 1
 *      $Id: locate.c,v 1.8 1997/06/21 07:35:15 deraadt Exp $
d53 1
a53 1
static char rcsid[] = "$OpenBSD: locate.c,v 1.8 1997/06/21 07:35:15 deraadt Exp $";
d156 1
a156 1
        register int ch;
@


1.8
log
@\n\n is ugly
@
text
@d2 1
a2 1
 *	$OpenBSD: locate.c,v 1.7 1997/01/15 23:42:44 millert Exp $
d39 1
a39 1
 *      $Id: locate.c,v 1.7 1997/01/15 23:42:44 millert Exp $
d53 1
a53 1
static char rcsid[] = "$OpenBSD: locate.c,v 1.7 1997/01/15 23:42:44 millert Exp $";
d310 1
a310 1
		      fd, (off_t)0)) == (caddr_t)-1)
@


1.7
log
@getopt(3) returns -1 when out of args, not EOF, whee!
@
text
@d2 1
a2 1
 *	$OpenBSD: locate.c,v 1.6 1996/10/20 00:52:56 michaels Exp $
d39 1
a39 1
 *      $Id: locate.c,v 1.6 1996/10/20 00:52:56 michaels Exp $
d53 1
a53 1
static char rcsid[] = "$OpenBSD: locate.c,v 1.6 1996/10/20 00:52:56 michaels Exp $";
d350 1
a350 1
	(void)fprintf(stderr, "[-d database] pattern ...\n\n");
@


1.6
log
@8-Bit character support.  From wosch@@freebsd.
@
text
@d2 1
a2 1
 *	$OpenBSD$
d39 1
a39 1
 *      $Id: locate.c,v 1.5 1996/09/15 16:50:38 michaels Exp $
d53 1
a53 1
static char rcsid[] = "$OpenBSD$";
d163 1
a163 1
        while ((ch = getopt(argc, argv, "Scd:il:ms")) != EOF)
@


1.5
log
@Blind update of wosch@@FreeBSD's code:

optimized search algorithm
faster IO due mmap(2) [-m | -s]
better error check for damaged databases
support for databases in network byte order (SunOS/sparc)
optional case insensitve search [-i]
optional multiple databases
optional multiple pattern
new enviroment variable LOCATE_PATH for database(s)
[-S] print some statistic about the database
[-l number] limit output to number file names
[-c] suppress normal output; instead print a count of matching file names
fix prototypes/forward declarations/return type
@
text
@a0 2
/*	$OpenBSD$	*/

d2 2
d39 1
a39 1
 *      $Id: locate.c,v 1.4 1996/08/31 23:14:53 wosch Exp $
d69 1
d86 2
d89 1
a89 1
#include <unistd.h>
d91 1
d93 2
a94 2
#include <stdlib.h>
#include <ctype.h>
d101 1
a101 1
#include <err.h>
d161 1
d212 1
a212 1
                for (ch = 0; ch <= UCHAR_MAX; ch++)
d366 1
a366 1
#include <fastfind.c>
d368 1
a368 1
#include <fastfind.c>
d375 1
a375 1
#include <fastfind.c>
d377 1
a377 1
#include <fastfind.c>
@


1.4
log
@Bugs in code, NUL != NULL, from bde@@zeta.org.au (Bruce Evans)
@
text
@d1 1
a1 1
/*        $OpenBSD: locate.c,v 1.3 1996/08/16 22:00:12 michaels Exp $                                                           */
d4 1
d6 1
a6 1
 *	The Regents of the University of California.  All rights reserved.
d21 2
a22 2
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
d38 2
d44 3
a46 2
"@@(#) Copyright (c) 1989, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
d51 1
a51 1
static char sccsid[] = "@@(#)locate.c	8.1 (Berkeley) 6/6/93";
d53 1
a53 1
static char rcsid[] = "$OpenBSD: locate.c,v 1.3 1996/08/16 22:00:12 michaels Exp $";
d67 4
a70 4
 * 	0-28	likeliest differential counts + offset to make nonnegative
 *	30	switch code for out-of-range count to follow in next word
 *	128-255 bigram codes (128 most common, as determined by 'updatedb')
 *	32-127  single character (printable) ascii residue (ie, literal)
a84 1

d89 16
d109 37
a145 1
FILE *fp;
d149 89
a237 2
	int argc;
	char *argv[];
d239 23
a261 3
	if (argc != 2) {
		(void)fprintf(stderr, "usage: locate pattern\n");
		exit(1);
d263 58
a320 4
	if ((fp = fopen(_PATH_FCODES, "r")) == NULL) {
		(void)fprintf(stderr, "locate: no database file %s.\n",
		    _PATH_FCODES);
		exit(1);
d322 3
a324 2
	while (*(++argv) != NUL)
		fastfind(*argv);
d326 1
a326 1
	return 0;
d328 1
d330 3
a332 2
fastfind(pathpart)
	char *pathpart;
d334 15
a348 40
	register char *p, *s;
	register int c;
	int count, found, globflag;
	char *cutoff, *patend, *q, *patprep();
	char bigram1[NBG], bigram2[NBG], path[MAXPATHLEN];

	for (c = 0, p = bigram1, s = bigram2; c < NBG; c++)
		p[c] = getc(fp), s[c] = getc(fp);

	p = pathpart;
	globflag = index(p, '*') || index(p, '?') || index(p, '[');
	patend = patprep(p);

	found = 0;
	for (c = getc(fp), count = 0; c != EOF; ) {
		count += ((c == SWITCH) ? getw(fp) : c) - OFFSET;
		/* overlay old path */
		for (p = path + count; (c = getc(fp)) > SWITCH;)
			if (c < PARITY)
				*p++ = c;
			else {		/* bigrams are parity-marked */
				c &= PARITY - 1;
				*p++ = bigram1[c], *p++ = bigram2[c];
			}
		*p-- = NUL;
		cutoff = (found ? path : path + count);
		for (found = 0, s = p; s >= cutoff; s--)
			if (*s == *patend) {	/* fast first char check */
				for (p = patend - 1, q = s - 1; *p != NUL;
				    p--, q--)
					if (*q != *p)
						break;
				if (*p == NUL) {	/* fast match success */
					found = 1;
					if (!globflag || !fnmatch(pathpart, path, 0))
						(void)printf("%s\n", path);
					break;
				}
			}
	}
a350 5
/*
 * extract last glob-free subpattern in name for fast pre-match; prepend
 * '\0' for backwards match; return end of new pattern
 */
static char globfree[100];
d352 1
a352 5
char *
patprep(name)
	char *name;
{
	register char *endmark, *p, *subp;
d354 19
a372 34
	subp = globfree;
	*subp++ = '\0';
	p = name + strlen(name) - 1;
	/* skip trailing metacharacters (and [] ranges) */
	for (; p >= name; p--)
		if (index("*?", *p) == 0)
			break;
	if (p < name)
		p = name;
	if (*p == ']')
		for (p--; p >= name; p--)
			if (*p == '[') {
				p--;
				break;
			}
	if (p < name)
		p = name;
	/*
	 * if pattern has only metacharacters, check every path (force '/'
	 * search)
	 */
	if ((p == name) && index("?*[]", *p) != 0)
		*subp++ = '/';
	else {
		for (endmark = p; p >= name; p--)
			if (index("]*?", *p) != 0)
				break;
		for (++p;
		    (p <= endmark) && subp < (globfree + sizeof(globfree));)
			*subp++ = *p++;
	}
	*subp = '\0';
	return(--subp);
}
@


1.3
log
@Better locate from wosch@@freebsd (Wolfram Schneider), sligthly modified.
@
text
@d1 1
a1 1
/*        $OpenBSD$                                                           */
d49 1
a49 1
static char rcsid[] = "$OpenBSD$";
d106 1
a106 1
	while (*(++argv) != NULL)
d139 1
a139 1
		*p-- = NULL;
d143 1
a143 1
				for (p = patend - 1, q = s - 1; *p != NULL;
d147 1
a147 1
				if (*p == NULL) {	/* fast match success */
@


1.2
log
@rcsid
@
text
@d1 1
a1 2
/*	$OpenBSD: locate.c,v 1.6 1994/12/22 06:17:47 jtc Exp $	*/
/*	$NetBSD: locate.c,v 1.6 1994/12/22 06:17:47 jtc Exp $	*/
d48 2
a50 1
static char rcsid[] = "$OpenBSD: locate.c,v 1.6 1994/12/22 06:17:47 jtc Exp $";
d62 1
a62 1
 * 
d67 1
a67 1
 * 
d69 1
a69 1
 * 
d74 1
a74 1
 * 
d101 1
a101 1
	if (!(fp = fopen(_PATH_FCODES, "r"))) {
d106 1
a106 1
	while (*++argv)
d108 2
a109 1
	exit(0);
d129 1
a129 1
	for (c = getc(fp), count = 0; c != EOF;) {
d149 1
a149 2
					if (!globflag ||
					    !fnmatch(pathpart, path, 0))
@


1.1
log
@Initial revision
@
text
@d1 1
d50 1
a50 1
static char rcsid[] = "$NetBSD: locate.c,v 1.6 1994/12/22 06:17:47 jtc Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
