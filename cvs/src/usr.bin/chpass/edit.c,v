head	1.35;
access;
symbols
	OPENBSD_6_1:1.35.0.12
	OPENBSD_6_1_BASE:1.35
	OPENBSD_6_0:1.35.0.8
	OPENBSD_6_0_BASE:1.35
	OPENBSD_5_9:1.35.0.4
	OPENBSD_5_9_BASE:1.35
	OPENBSD_5_8:1.35.0.6
	OPENBSD_5_8_BASE:1.35
	OPENBSD_5_7:1.35.0.2
	OPENBSD_5_7_BASE:1.35
	OPENBSD_5_6:1.34.0.6
	OPENBSD_5_6_BASE:1.34
	OPENBSD_5_5:1.34.0.4
	OPENBSD_5_5_BASE:1.34
	OPENBSD_5_4:1.33.0.16
	OPENBSD_5_4_BASE:1.33
	OPENBSD_5_3:1.33.0.14
	OPENBSD_5_3_BASE:1.33
	OPENBSD_5_2:1.33.0.12
	OPENBSD_5_2_BASE:1.33
	OPENBSD_5_1_BASE:1.33
	OPENBSD_5_1:1.33.0.10
	OPENBSD_5_0:1.33.0.8
	OPENBSD_5_0_BASE:1.33
	OPENBSD_4_9:1.33.0.6
	OPENBSD_4_9_BASE:1.33
	OPENBSD_4_8:1.33.0.4
	OPENBSD_4_8_BASE:1.33
	OPENBSD_4_7:1.33.0.2
	OPENBSD_4_7_BASE:1.33
	OPENBSD_4_6:1.32.0.4
	OPENBSD_4_6_BASE:1.32
	OPENBSD_4_5:1.31.0.6
	OPENBSD_4_5_BASE:1.31
	OPENBSD_4_4:1.31.0.4
	OPENBSD_4_4_BASE:1.31
	OPENBSD_4_3:1.31.0.2
	OPENBSD_4_3_BASE:1.31
	OPENBSD_4_2:1.30.0.2
	OPENBSD_4_2_BASE:1.30
	OPENBSD_4_1:1.29.0.4
	OPENBSD_4_1_BASE:1.29
	OPENBSD_4_0:1.29.0.2
	OPENBSD_4_0_BASE:1.29
	OPENBSD_3_9:1.28.0.2
	OPENBSD_3_9_BASE:1.28
	OPENBSD_3_8:1.27.0.10
	OPENBSD_3_8_BASE:1.27
	OPENBSD_3_7:1.27.0.8
	OPENBSD_3_7_BASE:1.27
	OPENBSD_3_6:1.27.0.6
	OPENBSD_3_6_BASE:1.27
	OPENBSD_3_5:1.27.0.4
	OPENBSD_3_5_BASE:1.27
	OPENBSD_3_4:1.27.0.2
	OPENBSD_3_4_BASE:1.27
	OPENBSD_3_3:1.25.0.2
	OPENBSD_3_3_BASE:1.25
	OPENBSD_3_2:1.23.0.2
	OPENBSD_3_2_BASE:1.23
	OPENBSD_3_1:1.21.0.4
	OPENBSD_3_1_BASE:1.21
	OPENBSD_3_0:1.21.0.2
	OPENBSD_3_0_BASE:1.21
	OPENBSD_2_9_BASE:1.20
	OPENBSD_2_9:1.20.0.4
	OPENBSD_2_8:1.20.0.2
	OPENBSD_2_8_BASE:1.20
	OPENBSD_2_7:1.19.0.2
	OPENBSD_2_7_BASE:1.19
	OPENBSD_2_6:1.16.0.2
	OPENBSD_2_6_BASE:1.16
	OPENBSD_2_5:1.15.0.4
	OPENBSD_2_5_BASE:1.15
	OPENBSD_2_4:1.15.0.2
	OPENBSD_2_4_BASE:1.15
	OPENBSD_2_3:1.13.0.2
	OPENBSD_2_3_BASE:1.13
	OPENBSD_2_2:1.12.0.2
	OPENBSD_2_2_BASE:1.12
	OPENBSD_2_1:1.11.0.4
	OPENBSD_2_1_BASE:1.11
	OPENBSD_2_0:1.11.0.2
	OPENBSD_2_0_BASE:1.11
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.35
date	2015.01.16.06.40.06;	author deraadt;	state Exp;
branches;
next	1.34;
commitid	Uu5nFG3wCl0LACBb;

1.34
date	2013.11.26.13.18.55;	author deraadt;	state Exp;
branches;
next	1.33;

1.33
date	2009.10.27.23.59.36;	author deraadt;	state Exp;
branches;
next	1.32;

1.32
date	2009.03.05.20.53.13;	author millert;	state Exp;
branches;
next	1.31;

1.31
date	2007.11.17.16.47.21;	author millert;	state Exp;
branches;
next	1.30;

1.30
date	2007.03.20.03.50.38;	author tedu;	state Exp;
branches;
next	1.29;

1.29
date	2006.03.30.21.08.21;	author robert;	state Exp;
branches;
next	1.28;

1.28
date	2005.11.14.15.31.11;	author deraadt;	state Exp;
branches;
next	1.27;

1.27
date	2003.06.03.02.56.06;	author millert;	state Exp;
branches;
next	1.26;

1.26
date	2003.04.03.17.16.32;	author millert;	state Exp;
branches;
next	1.25;

1.25
date	2003.02.07.23.28.18;	author millert;	state Exp;
branches;
next	1.24;

1.24
date	2003.02.02.18.38.22;	author millert;	state Exp;
branches;
next	1.23;

1.23
date	2002.07.31.22.08.42;	author millert;	state Exp;
branches;
next	1.22;

1.22
date	2002.06.27.19.02.40;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2001.07.12.05.16.57;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2000.09.26.16.00.08;	author aaron;	state Exp;
branches;
next	1.19;

1.19
date	2000.03.05.19.20.37;	author aaron;	state Exp;
branches;
next	1.18;

1.18
date	99.12.05.20.18.35;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	99.11.28.13.08.17;	author ho;	state Exp;
branches;
next	1.16;

1.16
date	99.08.06.20.41.06;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	98.05.28.19.13.26;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	98.05.28.10.17.49;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	98.03.30.06.59.31;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	97.06.17.20.49.55;	author kstailey;	state Exp;
branches;
next	1.11;

1.11
date	96.09.23.09.41.02;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	96.09.01.13.06.51;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	96.08.31.13.35.23;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	96.08.31.01.55.33;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	96.08.30.13.29.47;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	96.08.30.13.29.12;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	96.08.26.22.55.37;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.07.12.02.09.48;	author downsj;	state Exp;
branches;
next	1.3;

1.3
date	96.06.26.05.31.55;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.05.22.11.35.21;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.44.59;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.44.59;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.35
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@/*	$OpenBSD: edit.c,v 1.34 2013/11/26 13:18:55 deraadt Exp $	*/
/*	$NetBSD: edit.c,v 1.6 1996/05/15 21:50:45 jtc Exp $	*/

/*-
 * Copyright (c) 1990, 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/stat.h>

#include <ctype.h>
#include <err.h>
#include <errno.h>
#include <fcntl.h>
#include <paths.h>
#include <pwd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <limits.h>
#include <util.h>

#include "chpass.h"

int
edit(char *tempname, struct passwd *pw)
{
	struct stat begin, end;

	for (;;) {
		if (lstat(tempname, &begin) == -1 || S_ISLNK(begin.st_mode))
			return (EDIT_ERROR);
		pw_edit(1, tempname);
		if (lstat(tempname, &end) == -1 || S_ISLNK(end.st_mode))
			return (EDIT_ERROR);
		if (!timespeccmp(&begin.st_mtimespec, &end.st_mtimespec, -) &&
		    begin.st_size == end.st_size) {
			warnx("no changes made");
			return (EDIT_NOCHANGE);
		}
		if (verify(tempname, pw))
			break;
		pw_prompt();
	}
	return(EDIT_OK);
}

/*
 * display --
 *	print out the file for the user to edit; strange side-effect:
 *	set conditional flag if the user gets to edit the shell.
 */
void
display(char *tempname, int fd, struct passwd *pw)
{
	FILE *fp;
	char *bp, *p;
	char chngstr[256];

	if (!(fp = fdopen(fd, "w")))
		pw_error(tempname, 1, 1);

	(void)fprintf(fp,
	    "# Changing user database information for %s.\n", pw->pw_name);
	if (!uid) {
		(void)fprintf(fp, "Login: %s\n", pw->pw_name);
		(void)fprintf(fp, "Encrypted password: %s\n", pw->pw_passwd);
		(void)fprintf(fp, "Uid [#]: %u\n", pw->pw_uid);
		(void)fprintf(fp, "Gid [# or name]: %u\n", pw->pw_gid);
		(void)fprintf(fp, "Change [month day year]: %s\n",
		    ttoa(chngstr, sizeof(chngstr), pw->pw_change));
		(void)fprintf(fp, "Expire [month day year]: %s\n",
		    ttoa(chngstr, sizeof(chngstr), pw->pw_expire));
		(void)fprintf(fp, "Class: %s\n", pw->pw_class);
		(void)fprintf(fp, "Home directory: %s\n", pw->pw_dir);
		(void)fprintf(fp, "Shell: %s\n",
		    *pw->pw_shell ? pw->pw_shell : _PATH_BSHELL);
	}
	/* Only admin can change "restricted" shells. */
	else if (ok_shell(pw->pw_shell, NULL))
		/*
		 * Make shell a restricted field.  Ugly with a
		 * necklace, but there's not much else to do.
		 */
		(void)fprintf(fp, "Shell: %s\n",
		    *pw->pw_shell ? pw->pw_shell : _PATH_BSHELL);
	else
		list[E_SHELL].restricted = 1;
	bp = pw->pw_gecos;
	p = strsep(&bp, ",");
	(void)fprintf(fp, "Full Name: %s\n", p ? p : "");
	p = strsep(&bp, ",");
	(void)fprintf(fp, "Office Location: %s\n", p ? p : "");
	p = strsep(&bp, ",");
	(void)fprintf(fp, "Office Phone: %s\n", p ? p : "");
	p = strsep(&bp, ",");
	(void)fprintf(fp, "Home Phone: %s\n", p ? p : "");

	(void)fchown(fd, getuid(), getgid());
	(void)fclose(fp);
}

int
verify(char *tempname, struct passwd *pw)
{
	unsigned int line;
	size_t alen;
	static char buf[LINE_MAX];
	struct stat sb;
	char *p, *q;
	ENTRY *ep;
	FILE *fp;
	int fd;

	if ((fd = open(tempname, O_RDONLY|O_NOFOLLOW)) == -1 ||
	    (fp = fdopen(fd, "r")) == NULL)
		pw_error(tempname, 1, 1);
	if (fstat(fd, &sb))
		pw_error(tempname, 1, 1);
	if (sb.st_size == 0 || sb.st_nlink != 1 || sb.st_uid != uid) {
		warnx("corrupted temporary file");
		goto bad;
	}
	line = 0;
	while (fgets(buf, sizeof(buf), fp)) {
		line++;
		if (!buf[0] || buf[0] == '#')
			continue;
		if ((p = strchr(buf, '\n')) != NULL)
			*p = '\0';
		else if (!feof(fp)) {
			warnx("line %u too long", line);
			goto bad;
		}
		for (ep = list;; ++ep) {
			if (!ep->prompt) {
				warnx("unrecognized field on line %u", line);
				goto bad;
			}
			if (!strncasecmp(buf, ep->prompt, ep->len)) {
				if (ep->restricted && uid) {
					warnx(
					    "you may not change the %s field",
						ep->prompt);
					goto bad;
				}
				if (!(p = strchr(buf, ':'))) {
					warnx("line %u corrupted", line);
					goto bad;
				}
				while (isspace((unsigned char)*++p))
					;
				for (q = p; isprint((unsigned char)*q); q++) {
					if (ep->except && strchr(ep->except,*q))
						break;
				}
				if (*q) {
					warnx(
				   "illegal character in the \"%s\" field",
					    ep->prompt);
					goto bad;
				}
				if ((ep->func)(p, pw, ep)) {
bad:					(void)fclose(fp);
					return (0);
				}
				break;
			}
		}
	}
	(void)fclose(fp);

	if (list[E_NAME].save == NULL)
		list[E_NAME].save = "";
	if (list[E_BPHONE].save == NULL)
		list[E_BPHONE].save = "";
	if (list[E_HPHONE].save == NULL)
		list[E_HPHONE].save = "";
	if (list[E_LOCATE].save == NULL)
		list[E_LOCATE].save = "";

	/* Build the gecos field. */
	for (alen = 0, p = list[E_NAME].save; *p; p++)
		if (*p == '&')
			alen = alen + strlen(pw->pw_name) - 1;
	if (asprintf(&p, "%s,%s,%s,%s", list[E_NAME].save,
	    list[E_LOCATE].save, list[E_BPHONE].save, list[E_HPHONE].save) == -1)
		err(1, NULL);
	pw->pw_gecos = p;

	if (snprintf(buf, sizeof(buf),
	    "%s:%s:%u:%u:%s:%ld:%ld:%s:%s:%s",
	    pw->pw_name, pw->pw_passwd, pw->pw_uid, pw->pw_gid, pw->pw_class,
	    (long)pw->pw_change, (long)pw->pw_expire, pw->pw_gecos, pw->pw_dir,
	    pw->pw_shell) >= 1023 ||
	    strlen(buf) + alen >= 1023) {
		warnx("entries too long");
		free(p);
		return (0);
	}
	free(p);

	return (pw_scan(buf, pw, NULL));
}
@


1.34
log
@unsigned char casts for ctype
ok krw
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.33 2009/10/27 23:59:36 deraadt Exp $	*/
a32 1
#include <sys/param.h>
d45 1
@


1.33
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.32 2009/03/05 20:53:13 millert Exp $	*/
d176 3
a178 2
				while (isspace(*++p));
				for (q = p; isprint(*q); q++) {
@


1.32
log
@Call endusershell() at the end of ok_shell(), making a copy of the
(possibly) expanded shell as needed.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.31 2007/11/17 16:47:21 millert Exp $	*/
a31 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)edit.c	8.3 (Berkeley) 4/2/94";
#else
static char rcsid[] = "$OpenBSD: edit.c,v 1.31 2007/11/17 16:47:21 millert Exp $";
#endif
#endif /* not lint */
@


1.31
log
@Use mtimespec instead of mtime when comparing the timestamp of the edited
file.  OK miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.30 2007/03/20 03:50:38 tedu Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: edit.c,v 1.30 2007/03/20 03:50:38 tedu Exp $";
d113 1
a113 1
	else if (ok_shell(pw->pw_shell))
@


1.30
log
@remove some bogus *p tests from charles longeau
ok deraadt millert
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.29 2006/03/30 21:08:21 robert Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: edit.c,v 1.29 2006/03/30 21:08:21 robert Exp $";
d69 1
a69 1
		if (begin.st_mtime == end.st_mtime &&
@


1.29
log
@use size_t where needed; ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.28 2005/11/14 15:31:11 deraadt Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: edit.c,v 1.28 2005/11/14 15:31:11 deraadt Exp $";
d185 1
a185 1
				for (q = p; *q && isprint(*q); q++) {
@


1.28
log
@use asprintf
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.27 2003/06/03 02:56:06 millert Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: edit.c,v 1.27 2003/06/03 02:56:06 millert Exp $";
d139 2
a140 1
	unsigned int alen, line;
@


1.27
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.26 2003/04/03 17:16:32 millert Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: edit.c,v 1.26 2003/04/03 17:16:32 millert Exp $";
d59 1
a59 3
edit(tempname, pw)
	char *tempname;
	struct passwd *pw;
d87 1
a87 4
display(tempname, fd, pw)
	char *tempname;
	int fd;
	struct passwd *pw;
d137 1
a137 3
verify(tempname, pw)
	char *tempname;
	struct passwd *pw;
d139 1
a139 1
	unsigned int len, alen, line;
a213 2
	len = strlen(list[E_NAME].save) + strlen(list[E_BPHONE].save) +
	    strlen(list[E_HPHONE].save) + strlen(list[E_LOCATE].save) + 4;
d217 2
a218 1
	if (!(p = malloc(len)))
a219 2
	(void)snprintf(p, len, "%s,%s,%s,%s", list[E_NAME].save,
	    list[E_LOCATE].save, list[E_BPHONE].save, list[E_HPHONE].save);
@


1.26
log
@Deal with files w/o a trailing newline before EOF.  Found by mpech@@
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.25 2003/02/07 23:28:18 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static char rcsid[] = "$OpenBSD: edit.c,v 1.25 2003/02/07 23:28:18 millert Exp $";
@


1.25
log
@More paranoia, make sure temp file owner matches real uid.
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.24 2003/02/02 18:38:22 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: edit.c,v 1.24 2003/02/02 18:38:22 millert Exp $";
d172 3
a174 1
		if (!(p = strchr(buf, '\n'))) {
a177 1
		*p = '\0';
@


1.24
log
@More paranoia when opening temp file; don't follow symlinks and
require that the link count be one.  Prompted by a report from Marc
Bevand.  deraadt@@ OK
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.23 2002/07/31 22:08:42 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: edit.c,v 1.23 2002/07/31 22:08:42 millert Exp $";
d163 1
a163 1
	if (sb.st_size == 0 || sb.st_nlink != 1) {
@


1.23
log
@When I got removed the use of atexit() I missed the fact that edit()
calls pw_error() which in turn calls exit().  Now edit() returns
its status so the temp file gets cleaned up nicely if the user makes
no changes or if an error occurred.  Problem noticed by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.22 2002/06/27 19:02:40 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: edit.c,v 1.22 2002/06/27 19:02:40 deraadt Exp $";
d51 1
d156 1
d158 2
a159 1
	if (!(fp = fopen(tempname, "r")))
d161 1
a161 1
	if (fstat(fileno(fp), &sb))
d163 1
a163 1
	if (sb.st_size == 0) {
@


1.22
log
@cleanup; mpech & millert ok
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.21 2001/07/12 05:16:57 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: edit.c,v 1.21 2001/07/12 05:16:57 deraadt Exp $";
d61 1
a61 1
void
d70 1
a70 1
			pw_error(tempname, 1, 1);
d73 1
a73 1
			pw_error(tempname, 1, 1);
d77 1
a77 1
			pw_error(NULL, 0, 0);
d83 1
@


1.21
log
@first pass at a -Wall cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.20 2000/09/26 16:00:08 aaron Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: edit.c,v 1.20 2000/09/26 16:00:08 aaron Exp $";
d148 4
a152 2
	char *p, *q;
	struct stat sb;
a153 2
	unsigned int len, alen, line;
	static char buf[LINE_MAX];
d169 1
a169 1
			warnx("line %d too long", line);
d175 1
a175 1
				warnx("unrecognized field on line %d", line);
d186 1
a186 1
					warnx("line %d corrupted", line);
d227 1
a227 1
	(void)sprintf(pw->pw_gecos = p, "%s,%s,%s,%s", list[E_NAME].save,
d229 1
@


1.20
log
@Do not permit non-printable characters in the passwd file; deraadt@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.19 2000/03/05 19:20:37 aaron Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: edit.c,v 1.19 2000/03/05 19:20:37 aaron Exp $";
d233 1
a233 1
	    pw->pw_change, pw->pw_expire, pw->pw_gecos, pw->pw_dir,
@


1.19
log
@Change prompt string from "Location:" to "Office Location:", to disambiguate
from what is expected, and to be consistent with finger(1); from FreeBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.18 1999/12/05 20:18:35 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: edit.c,v 1.18 1999/12/05 20:18:35 millert Exp $";
d104 1
a104 1
	    "#Changing user database information for %s.\n", pw->pw_name);
d149 1
a149 1
	char *p;
d152 1
a152 1
	int len, alen, line;
d190 5
a194 1
				if (ep->except && strpbrk(p, ep->except)) {
@


1.18
log
@Fix temp file unlinking.  We use atexit() since the libutil passwd
routines do their own exit.
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.17 1999/11/28 13:08:17 ho Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: edit.c,v 1.17 1999/11/28 13:08:17 ho Exp $";
d133 1
a133 1
	(void)fprintf(fp, "Location: %s\n", p ? p : "");
@


1.17
log
@Check for size change as well as change in time. Scripted changes
usually finish in less than a second. ('vipw' already does this.)
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.16 1999/08/06 20:41:06 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: edit.c,v 1.16 1999/08/06 20:41:06 deraadt Exp $";
a76 1
			unlink(tempname);
d79 1
a79 2
		if (verify(tempname, pw)) {
			unlink(tempname);
a80 1
		}
@


1.16
log
@uid_t and gid_t, and use %u
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.15 1998/05/28 19:13:26 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: edit.c,v 1.15 1998/05/28 19:13:26 deraadt Exp $";
d74 2
a75 1
		if (begin.st_mtime == end.st_mtime) {
@


1.15
log
@unlink tmpfile; noted by chris@@dqc.org
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.14 1998/05/28 10:17:49 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: edit.c,v 1.14 1998/05/28 10:17:49 deraadt Exp $";
d110 2
a111 2
		(void)fprintf(fp, "Uid [#]: %d\n", pw->pw_uid);
		(void)fprintf(fp, "Gid [# or name]: %d\n", pw->pw_gid);
d229 1
a229 1
	    "%s:%s:%d:%d:%s:%ld:%ld:%s:%s:%s",
@


1.14
log
@permit any gecos field to be empty
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.13 1998/03/30 06:59:31 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: edit.c,v 1.13 1998/03/30 06:59:31 deraadt Exp $";
d79 2
a80 1
		if (verify(tempname, pw))
d82 1
@


1.13
log
@Y2K fixes from Andreas.Gunnarsson@@emw.ericsson.se; culled from various places
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.12 1997/06/17 20:49:55 kstailey Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: edit.c,v 1.12 1997/06/17 20:49:55 kstailey Exp $";
d205 9
@


1.12
log
@(foo *)NULL -> NULL
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.11 1996/09/23 09:41:02 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: edit.c,v 1.11 1996/09/23 09:41:02 deraadt Exp $";
d97 2
a98 1
	char *bp, *p, *ttoa();
d111 1
a111 1
		    ttoa(pw->pw_change));
d113 1
a113 1
		    ttoa(pw->pw_expire));
@


1.11
log
@for errors, tell which line #
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.10 1996/09/01 13:06:51 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: edit.c,v 1.10 1996/09/01 13:06:51 deraadt Exp $";
d228 1
a228 1
	return (pw_scan(buf, pw, (int *)NULL));
@


1.10
log
@limit to around 1024 chars post expansion
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.9 1996/08/31 13:35:23 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: edit.c,v 1.9 1996/08/31 13:35:23 deraadt Exp $";
d151 1
a151 1
	int len, alen;
d162 1
d164 1
d168 1
a168 1
			warnx("line too long");
d174 1
a174 1
				warnx("unrecognized field");
d185 1
a185 1
					warnx("line corrupted");
@


1.9
log
@constrain & expansion to LINE_MAX for safety
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.8 1996/08/31 01:55:33 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: edit.c,v 1.8 1996/08/31 01:55:33 deraadt Exp $";
d218 2
a219 2
	    pw->pw_shell) >= sizeof(buf) ||
	    strlen(buf) + alen >= sizeof(buf) -1) {
@


1.8
log
@kill leaks; help from das33@@cornell.edu
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.7 1996/08/30 13:29:47 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: edit.c,v 1.7 1996/08/30 13:29:47 deraadt Exp $";
d151 1
a151 1
	int len;
d206 3
d218 2
a219 1
	    pw->pw_shell) >= sizeof(buf)) {
d221 1
d224 2
a225 1
	/* must leave p allocated */
@


1.7
log
@typo
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.6 1996/08/30 13:29:12 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: edit.c,v 1.6 1996/08/30 13:29:12 deraadt Exp $";
d219 1
a219 1
	free(p);
@


1.6
log
@watch for slimy link races, improvement by das33@@cornell.edu & i
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.5 1996/08/26 22:55:37 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: edit.c,v 1.5 1996/08/26 22:55:37 deraadt Exp $";
d72 1
a72 1
		if (lstat(tempname, &end) == -1 || S_ISLNK(begin.st_mode))
@


1.5
log
@mem leak
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.4 1996/07/12 02:09:48 downsj Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: edit.c,v 1.4 1996/07/12 02:09:48 downsj Exp $";
d69 1
a69 1
		if (stat(tempname, &begin))
d72 1
a72 1
		if (stat(tempname, &end))
@


1.4
log
@slight clarification
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.3 1996/06/26 05:31:55 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: edit.c,v 1.3 1996/06/26 05:31:55 deraadt Exp $";
d219 1
@


1.3
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.6 1996/05/15 21:50:45 jtc Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: edit.c,v 1.6 1996/05/15 21:50:45 jtc Exp $";
d106 1
a106 1
		(void)fprintf(fp, "Password: %s\n", pw->pw_passwd);
@


1.2
log
@libutil
@
text
@d1 1
d41 1
a41 1
static char rcsid[] = "$NetBSD: edit.c,v 1.6 1996/05/15 21:50:45 jtc Exp $";
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: edit.c,v 1.5 1995/07/28 07:03:41 phil Exp $	*/
d40 1
a40 1
static char rcsid[] = "$NetBSD: edit.c,v 1.5 1995/07/28 07:03:41 phil Exp $";
d56 1
a56 3

#include <pw_scan.h>
#include <pw_util.h>
a59 2
extern char *tempname;

d61 2
a62 1
edit(pw)
d70 1
a70 1
		pw_edit(1);
d75 1
d78 1
a78 1
		if (verify(pw))
d90 2
a91 1
display(fd, pw)
d142 2
a143 1
verify(pw)
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
