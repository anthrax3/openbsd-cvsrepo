head	1.14;
access;
symbols
	OPENBSD_6_0:1.14.0.8
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.4
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.14.0.6
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.13.0.6
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.4
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.12.0.16
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.14
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.12
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.10
	OPENBSD_5_0:1.12.0.8
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.6
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.4
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.11.0.4
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.9.0.12
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.10
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.8
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.6
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.4
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.2
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.7.0.8
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.6
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.4
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.3.0.16
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.14
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.12
	OPENBSD_2_8:1.3.0.10
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.8
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.6
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.4
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.2
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2015.01.16.06.40.06;	author deraadt;	state Exp;
branches;
next	1.13;
commitid	Uu5nFG3wCl0LACBb;

1.13
date	2013.11.26.13.18.55;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2009.10.27.23.59.36;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2009.04.30.20.03.53;	author jacekm;	state Exp;
branches;
next	1.10;

1.10
date	2009.03.05.20.53.13;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2006.03.31.00.29.13;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2006.03.30.21.09.58;	author robert;	state Exp;
branches;
next	1.7;

1.7
date	2004.07.05.18.47.49;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2003.07.01.01.01.28;	author avsm;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.03.02.56.06;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.27.19.02.40;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	98.05.29.22.26.46;	author downsj;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.31.56;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.44.59;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.44.59;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@/*	$OpenBSD: field.c,v 1.13 2013/11/26 13:18:55 deraadt Exp $	*/
/*	$NetBSD: field.c,v 1.3 1995/03/26 04:55:28 glass Exp $	*/

/*
 * Copyright (c) 1988, 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <ctype.h>
#include <err.h>
#include <errno.h>
#include <grp.h>
#include <paths.h>
#include <pwd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <limits.h>

#include "chpass.h"

/* ARGSUSED */
int
p_login(char *p, struct passwd *pw, ENTRY *ep)
{
	if (!*p) {
		warnx("empty login field");
		return (1);
	}
	if (*p == '-') {
		warnx("login names may not begin with a hyphen");
		return (1);
	}
	/* XXX - what about truncated names? */
	if (strcmp(pw->pw_name, p) != 0 && getpwnam(p) != NULL) {
		warnx("login %s already exists", p);
		return (1);
	}
	if (!(pw->pw_name = strdup(p))) {
		warnx("can't save entry");
		return (1);
	}
	if (strchr(p, '.'))
		warnx("\'.\' is dangerous in a login name");
	for (; *p; ++p)
		if (isupper((unsigned char)*p)) {
			warnx("upper-case letters are dangerous in a login name");
			break;
		}
	return (0);
}

/* ARGSUSED */
int
p_passwd(char *p, struct passwd *pw, ENTRY *ep)
{
	if (!*p)
		pw->pw_passwd = "";	/* "NOLOGIN"; */
	else if (!(pw->pw_passwd = strdup(p))) {
		warnx("can't save password entry");
		return (1);
	}

	return (0);
}

/* ARGSUSED */
int
p_uid(char *p, struct passwd *pw, ENTRY *ep)
{
	uid_t id;
	const char *errstr;

	if (!*p) {
		warnx("empty uid field");
		return (1);
	}
	id = (uid_t)strtonum(p, 0, UID_MAX, &errstr);
	if (errstr) {
		warnx("uid is %s", errstr);
		return (1);
	}
	pw->pw_uid = id;
	return (0);
}

/* ARGSUSED */
int
p_gid(char *p, struct passwd *pw, ENTRY *ep)
{
	struct group *gr;
	const char *errstr;
	gid_t id;

	if (!*p) {
		warnx("empty gid field");
		return (1);
	}
	if (!isdigit((unsigned char)*p)) {
		if (!(gr = getgrnam(p))) {
			warnx("unknown group %s", p);
			return (1);
		}
		pw->pw_gid = gr->gr_gid;
		return (0);
	}
	id = (uid_t)strtonum(p, 0, GID_MAX, &errstr);
	if (errstr) {
		warnx("gid is %s", errstr);
		return (1);
	}
	pw->pw_gid = id;
	return (0);
}

/* ARGSUSED */
int
p_class(char *p, struct passwd *pw, ENTRY *ep)
{
	if (!*p)
		pw->pw_class = "";
	else if (!(pw->pw_class = strdup(p))) {
		warnx("can't save entry");
		return (1);
	}

	return (0);
}

/* ARGSUSED */
int
p_change(char *p, struct passwd *pw, ENTRY *ep)
{
	if (!atot(p, &pw->pw_change))
		return (0);
	warnx("illegal date for change field");
	return (1);
}

/* ARGSUSED */
int
p_expire(char *p, struct passwd *pw, ENTRY *ep)
{
	if (!atot(p, &pw->pw_expire))
		return (0);
	warnx("illegal date for expire field");
	return (1);
}

/* ARGSUSED */
int
p_gecos(char *p, struct passwd *pw, ENTRY *ep)
{
	if (!*p)
		ep->save = "";
	else if (!(ep->save = strdup(p))) {
		warnx("can't save entry");
		return (1);
	}
	return (0);
}

/* ARGSUSED */
int
p_hdir(char *p, struct passwd *pw, ENTRY *ep)
{
	if (!*p) {
		warnx("empty home directory field");
		return (1);
	}
	if (!(pw->pw_dir = strdup(p))) {
		warnx("can't save entry");
		return (1);
	}
	return (0);
}

/* ARGSUSED */
int
p_shell(char *p, struct passwd *pw, ENTRY *ep)
{
	char *t;

	if (!*p) {
		pw->pw_shell = _PATH_BSHELL;
		return (0);
	}
	/* only admin can change from or to "restricted" shells */
	if (uid && pw->pw_shell && !ok_shell(pw->pw_shell, NULL)) {
		warnx("%s: current shell non-standard", pw->pw_shell);
		return (1);
	}
	if (!ok_shell(p, &t)) {
		if (uid) {
			warnx("%s: non-standard shell", p);
			return (1);
		} else
			t = strdup(p);
	}
	if (!(pw->pw_shell = t)) {
		warnx("can't save entry");
		return (1);
	}
	return (0);
}
@


1.13
log
@unsigned char casts for ctype
ok krw
@
text
@d1 1
a1 1
/*	$OpenBSD: field.c,v 1.12 2009/10/27 23:59:36 deraadt Exp $	*/
a32 2
#include <sys/param.h>

d43 1
@


1.12
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: field.c,v 1.11 2009/04/30 20:03:53 jacekm Exp $	*/
d72 1
a72 1
		if (isupper(*p)) {
d125 1
a125 1
	if (!isdigit(*p)) {
@


1.11
log
@fix previous, admin may again set non-standard shell; ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: field.c,v 1.10 2009/03/05 20:53:13 millert Exp $	*/
a31 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)field.c	8.4 (Berkeley) 4/2/94";
#else
static char rcsid[] = "$OpenBSD: field.c,v 1.10 2009/03/05 20:53:13 millert Exp $";
#endif
#endif /* not lint */
@


1.10
log
@Call endusershell() at the end of ok_shell(), making a copy of the
(possibly) expanded shell as needed.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: field.c,v 1.9 2006/03/31 00:29:13 deraadt Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: field.c,v 1.9 2006/03/31 00:29:13 deraadt Exp $";
d231 2
a232 1
		}
@


1.9
log
@tiny bits of lint
@
text
@d1 1
a1 1
/*	$OpenBSD: field.c,v 1.8 2006/03/30 21:09:58 robert Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: field.c,v 1.8 2006/03/30 21:09:58 robert Exp $";
d223 1
a223 1
	if (uid && pw->pw_shell && !ok_shell(pw->pw_shell)) {
d227 1
a227 1
	if (!(t = ok_shell(p))) {
d232 2
a233 3
	} else
		p = t;
	if (!(pw->pw_shell = strdup(p))) {
@


1.8
log
@cast to uid_t where needed; ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: field.c,v 1.7 2004/07/05 18:47:49 millert Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: field.c,v 1.7 2004/07/05 18:47:49 millert Exp $";
a59 2
	struct passwd *tpw;

d69 1
a69 1
	if (strcmp(pw->pw_name, p) != 0 && (tpw = getpwnam(p)) != NULL) {
@


1.7
log
@Use strtonum() instead of assigning the value of strtoul() to a uid_t/gid_t.
Fixes a warning on 64bit platforms and is less error-prone.  OK otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: field.c,v 1.6 2003/07/01 01:01:28 avsm Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: field.c,v 1.6 2003/07/01 01:01:28 avsm Exp $";
d114 1
a114 1
	id = strtonum(p, 0, UID_MAX, &errstr);
d143 1
a143 1
	id = strtonum(p, 0, GID_MAX, &errstr);
@


1.6
log
@- no need for pathnames.h, just use <paths.h> instead
- bump mktemp randomness slightly from 8 -> 10
millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: field.c,v 1.5 2003/06/03 02:56:06 millert Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: field.c,v 1.5 2003/06/03 02:56:06 millert Exp $";
d60 2
d70 5
d108 1
a108 1
	char *np;
d114 3
a116 8
	if (!isdigit(*p)) {
		warnx("illegal uid");
		return (1);
	}
	errno = 0;
	id = strtoul(p, &np, 10);
	if (*np || (id == ULONG_MAX && errno == ERANGE)) {
		warnx("illegal uid");
d128 1
a129 1
	char *np;
d143 3
a145 4
	errno = 0;
	id = strtoul(p, &np, 10);
	if (*np || (id == ULONG_MAX && errno == ERANGE)) {
		warnx("illegal gid");
@


1.5
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: field.c,v 1.4 2002/06/27 19:02:40 deraadt Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: field.c,v 1.4 2002/06/27 19:02:40 deraadt Exp $";
d47 1
a54 1
#include "pathnames.h"
@


1.4
log
@cleanup; mpech & millert ok
@
text
@d1 1
a1 1
/*	$OpenBSD: field.c,v 1.3 1998/05/29 22:26:46 downsj Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static char rcsid[] = "$OpenBSD: field.c,v 1.3 1998/05/29 22:26:46 downsj Exp $";
@


1.3
log
@Remove shadow decl.
@
text
@d1 1
a1 1
/*	$OpenBSD: field.c,v 1.2 1996/06/26 05:31:56 deraadt Exp $	*/
d40 2
a41 2
#else 
static char rcsid[] = "$OpenBSD: field.c,v 1.2 1996/06/26 05:31:56 deraadt Exp $";
d62 1
a62 4
p_login(p, pw, ep)
	char *p;
	struct passwd *pw;
	ENTRY *ep;
d88 1
a88 4
p_passwd(p, pw, ep)
	char *p;
	struct passwd *pw;
	ENTRY *ep;
d96 1
a96 1
	
d102 1
a102 4
p_uid(p, pw, ep)
	char *p;
	struct passwd *pw;
	ENTRY *ep;
d127 1
a127 4
p_gid(p, pw, ep)
	char *p;
	struct passwd *pw;
	ENTRY *ep;
d157 1
a157 4
p_class(p, pw, ep)
	char *p;
	struct passwd *pw;
	ENTRY *ep;
d165 1
a165 1
	
d171 1
a171 4
p_change(p, pw, ep)
	char *p;
	struct passwd *pw;
	ENTRY *ep;
d181 1
a181 4
p_expire(p, pw, ep)
	char *p;
	struct passwd *pw;
	ENTRY *ep;
d191 1
a191 4
p_gecos(p, pw, ep)
	char *p;
	struct passwd *pw;
	ENTRY *ep;
d204 1
a204 4
p_hdir(p, pw, ep)
	char *p;
	struct passwd *pw;
	ENTRY *ep;
d219 1
a219 4
p_shell(p, pw, ep)
	char *p;
	struct passwd *pw;
	ENTRY *ep;
d237 1
a237 2
	}
	else
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: field.c,v 1.3 1995/03/26 04:55:28 glass Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: field.c,v 1.3 1995/03/26 04:55:28 glass Exp $";
d251 1
a251 1
	char *t, *ok_shell();
@


1.1
log
@Initial revision
@
text
@d1 1
d41 1
a41 1
static char rcsid[] = "$NetBSD: field.c,v 1.3 1995/03/26 04:55:28 glass Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
