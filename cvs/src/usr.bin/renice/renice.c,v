head	1.20;
access;
symbols
	OPENBSD_6_2_BASE:1.20
	OPENBSD_6_1:1.20.0.4
	OPENBSD_6_1_BASE:1.20
	OPENBSD_6_0:1.19.0.4
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.19.0.2
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.18.0.4
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.6
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.4
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.15.0.16
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.14
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.12
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.10
	OPENBSD_5_0:1.15.0.8
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.6
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.4
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.2
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.14.0.4
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.13.0.2
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.12.0.6
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.4
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.2
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.11.0.16
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.14
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.12
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.10
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.8
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.6
	OPENBSD_3_6_BASE:1.11
	OPENBSD_3_5:1.11.0.4
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.8.0.6
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.4
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.10
	OPENBSD_2_8:1.5.0.8
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.6
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.4
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.2
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.3.0.6
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.4
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.20
date	2016.09.19.20.20.38;	author bluhm;	state Exp;
branches;
next	1.19;
commitid	Dr6ZnHKrMaJCw4LN;

1.19
date	2015.10.22.07.52.29;	author deraadt;	state Exp;
branches;
next	1.18;
commitid	FIjgeQ0tjGrOMg9C;

1.18
date	2015.05.15.19.34.31;	author jmc;	state Exp;
branches;
next	1.17;
commitid	6CB2avfgRAmmMQEG;

1.17
date	2015.03.20.19.42.29;	author millert;	state Exp;
branches;
next	1.16;
commitid	yOGhv2I03kZYwC7P;

1.16
date	2013.11.15.22.20.04;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2009.10.27.23.59.42;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2009.04.20.13.58.20;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2008.12.08.21.23.10;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2007.03.16.16.36.06;	author jmc;	state Exp;
branches;
next	1.11;

1.11
date	2003.07.10.00.06.51;	author david;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.10.22.20.50;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.03.02.56.15;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.02.16.21.27.51;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2001.11.19.19.02.16;	author mpech;	state Exp;
branches;
next	1.6;

1.6
date	2001.07.06.21.54.57;	author pvalchev;	state Exp;
branches;
next	1.5;

1.5
date	99.03.04.16.14.58;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	98.12.20.01.13.33;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.06.20.10.02.31;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.38.27;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.59;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.59;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Replace an exit(3) call in main() with a return to enable the stack
protector.
From Rafael Neves
@
text
@/*	$OpenBSD: renice.c,v 1.19 2015/10/22 07:52:29 deraadt Exp $	*/

/*
 * Copyright (c) 2009, 2015 Todd C. Miller <Todd.Miller@@courtesan.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/time.h>
#include <sys/resource.h>

#include <ctype.h>
#include <err.h>
#include <errno.h>
#include <limits.h>
#include <pwd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#define	RENICE_NONE		0
#define	RENICE_ABSOLUTE		1
#define	RENICE_INCREMENT	2

struct renice_param {
	int pri;
	short pri_type;
	short id_type;
	id_t id;
};

int main(int, char **);
static int renice(struct renice_param *, struct renice_param *);
__dead void usage(void);

int
main(int argc, char **argv)
{
	struct renice_param *params, *p;
	struct passwd *pw;
	int ch, id_type = PRIO_PROCESS;
	int pri = 0, pri_type = RENICE_NONE;
	char *ep, *idstr;
	const char *errstr;

	if (pledge("stdio getpw proc", NULL) == -1)
		err(1, "pledge");

	if (argc < 3)
		usage();

	/* Allocate enough space for the worst case. */
	params = p = reallocarray(NULL, argc - 1, sizeof(*params));
	if (params == NULL)
		err(1, NULL);

	/* Backwards compatibility: first arg may be priority. */
	if (isdigit((unsigned char)argv[1][0]) ||
	    ((argv[1][0] == '+' || argv[1][0] == '-') &&
	    isdigit((unsigned char)argv[1][1]))) {
		pri = (int)strtol(argv[1], &ep, 10);
		if (*ep != '\0' || ep == argv[1]) {
			warnx("invalid priority %s", argv[1]);
			usage();
		}
		pri_type = RENICE_ABSOLUTE;
		optind = 2;
	}

	/*
	 * Slightly tricky getopt() usage since it is legal to have
	 * option flags interleaved with arguments.
	 */
	for (;;) {
		if ((ch = getopt(argc, argv, "g:n:p:u:")) != -1) {
			switch (ch) {
			case 'g':
				id_type = PRIO_PGRP;
				idstr = optarg;
				break;
			case 'n':
				pri = (int)strtol(optarg, &ep, 10);
				if (*ep != '\0' || ep == optarg) {
					warnx("invalid increment %s", optarg);
					usage();
				}

				/* Set priority for previous entries? */
				if (pri_type == RENICE_NONE) {
					struct renice_param *pp;
					for (pp = params; pp != p; pp++) {
						pp->pri = pri;
						pp->pri_type = RENICE_INCREMENT;
					}
				}
				pri_type = RENICE_INCREMENT;
				continue;
			case 'p':
				id_type = PRIO_PROCESS;
				idstr = optarg;
				break;
			case 'u':
				id_type = PRIO_USER;
				idstr = optarg;
				break;
			default:
				usage();
				break;
			}
		} else {
			idstr = argv[optind++];
			if (idstr == NULL)
				break;
		}
		p->id_type = id_type;
		p->pri = pri;
		p->pri_type = pri_type;
		if (id_type == PRIO_USER) {
			if ((pw = getpwnam(idstr)) == NULL) {
				uid_t id = strtonum(idstr, 0, UID_MAX, &errstr);
				if (!errstr)
					pw = getpwuid(id);
			}
			if (pw == NULL) {
				warnx("unknown user %s", idstr);
				continue;
			}
			p->id = pw->pw_uid;
		} else {
			p->id = strtonum(idstr, 0, UINT_MAX, &errstr);
			if (errstr) {
				warnx("%s is %s", idstr, errstr);
				continue;
			}
		}
		p++;
	}
	if (pri_type == RENICE_NONE)
		usage();
	return(renice(params, p));
}

static int
renice(struct renice_param *p, struct renice_param *end)
{
	int new, old, errors = 0;

	for (; p < end; p++) {
		errno = 0;
		old = getpriority(p->id_type, p->id);
		if (errno) {
			warn("getpriority: %d", p->id);
			errors++;
			continue;
		}
		if (p->pri_type == RENICE_INCREMENT)
			p->pri += old;
		new = p->pri > PRIO_MAX ? PRIO_MAX :
		    p->pri < PRIO_MIN ? PRIO_MIN : p->pri;
		if (setpriority(p->id_type, p->id, new) == -1) {
			warn("setpriority: %d", p->id);
			errors++;
			continue;
		}
		printf("%d: old priority %d, new priority %d\n",
		    p->id, old, new);
	}
	return (errors);
}

__dead void
usage(void)
{
	fprintf(stderr, "usage: renice [-n] increment [-gpu] id\n");
	exit(1);
}
@


1.19
log
@at present the setpriority() syscall is considered fairly low risk and
placed in pledge "proc".  pledge "stdio getpw proc", from Theo Buehler
@
text
@d1 1
a1 1
/*	$OpenBSD: renice.c,v 1.18 2015/05/15 19:34:31 jmc Exp $	*/
d152 1
a152 1
	exit(renice(params, p));
@


1.18
log
@rework synopsis to be a bit less ugly; the result is quite close to the posix
spec...
@
text
@d1 1
a1 1
/*	$OpenBSD: renice.c,v 1.17 2015/03/20 19:42:29 millert Exp $	*/
d57 3
@


1.17
log
@POSIX says the renice -n flag is an increment, not an absolute
priority.  The historic BSD renice used an absolute priority, so
we need to preserve that behavior for, e.g. "renice +1 $$".  When
mixing historic syntax with the -n flag, the increment specified
via -n will only affect the entries that follow it.
@
text
@d1 1
a1 1
/*	$OpenBSD: renice.c,v 1.16 2013/11/15 22:20:04 millert Exp $	*/
d183 1
a183 2
	fprintf(stderr, "usage: renice -n increment [[-g] pgrp ...] "
	    "[[-p] pid ...] [[-u] user ...]\n");
@


1.16
log
@Include unistd.h as it is the standard location for getopt().
@
text
@d1 1
a1 1
/*	$OpenBSD: renice.c,v 1.15 2009/10/27 23:59:42 deraadt Exp $	*/
d4 1
a4 1
 * Copyright (c) 2009 Todd C. Miller <Todd.Miller@@courtesan.com>
d33 4
d39 2
a40 1
	int type;
d53 2
a54 2
	int ch, type = PRIO_PROCESS;
	int nflag = 0, pri = 0;
a56 1
	long l;
d62 1
a62 1
	params = p = calloc(argc - 1, sizeof(*params));
d68 9
a76 4
	    (argv[1][0] == '-' && isdigit((unsigned char)argv[1][1]))) {
		argv[0] = "-n";
		argc++;
		argv--;
d87 1
a87 1
				type = PRIO_PGRP;
d91 1
a91 1
				l = strtol(optarg, &ep, 10);
a95 2
				pri = l > PRIO_MAX ? PRIO_MAX :
				    l < PRIO_MIN ? PRIO_MIN : (int)l;
d98 1
a98 1
				if (!nflag) {
d102 1
d105 1
a105 1
				nflag = 1;
d108 1
a108 1
				type = PRIO_PROCESS;
d112 1
a112 1
				type = PRIO_USER;
d124 1
a124 1
		p->type = type;
d126 2
a127 1
		if (type == PRIO_USER) {
d147 1
a147 1
	if (!nflag)
d155 1
a155 1
	int old, errors = 0;
d159 1
a159 1
		old = getpriority(p->type, p->id);
d165 5
a169 1
		if (setpriority(p->type, p->id, p->pri) == -1) {
d175 1
a175 1
		    p->id, old, p->pri);
@


1.15
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: renice.c,v 1.14 2009/04/20 13:58:20 millert Exp $	*/
d31 1
@


1.14
log
@Fix renicing a negative pid in historic mode.  From Bryan Linton
@
text
@d1 1
a1 1
/*	$OpenBSD: renice.c,v 1.13 2008/12/08 21:23:10 millert Exp $	*/
a17 4

#ifndef lint
static const char rcsid[] = "$OpenBSD: renice.c,v 1.13 2008/12/08 21:23:10 millert Exp $";
#endif /* not lint */
@


1.13
log
@Rewrite renice(8) to be POSIX compliant while still maintaining
traditional BSD usage.  Man page OK jmc@@, OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: renice.c,v 1.12 2007/03/16 16:36:06 jmc Exp $	*/
d20 1
a20 1
static const char rcsid[] = "$OpenBSD: renice.c,v 1.12 2007/03/16 16:36:06 jmc Exp $";
d66 2
a67 1
	if (isdigit((unsigned char)argv[1][0])) {
@


1.12
log
@make this page more readable;
@
text
@d1 1
a1 1
/*	$OpenBSD: renice.c,v 1.11 2003/07/10 00:06:51 david Exp $	*/
d4 1
a4 2
 * Copyright (c) 1983, 1989, 1993
 *	The Regents of the University of California.  All rights reserved.
d6 3
a8 11
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
d10 7
a16 11
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
d20 1
a20 11
static char copyright[] =
"@@(#) Copyright (c) 1983, 1989, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)renice.c	8.1 (Berkeley) 6/9/93";
#else
static char rcsid[] = "$OpenBSD: renice.c,v 1.11 2003/07/10 00:06:51 david Exp $";
#endif
d27 5
d35 6
a40 3
#include <pwd.h>
#include <err.h>
#include <errno.h>
d43 2
a44 2
int donice(int, uid_t, int);
void usage(void);
a45 5
/*
 * Change the priority (nice) of processes
 * or groups of processes which are already
 * running.
 */
d47 1
a47 1
main(int argc, char *argv[])
d49 7
a55 4
	int which = PRIO_PROCESS;
	int errs = 0;
	long prio, who = 0;
	char *ep;
d57 1
a57 2
	argc--, argv++;
	if (argc < 2)
d59 58
a116 12
	prio = strtol(*argv, &ep, 10);
	if (*ep != NULL)
		usage();
	argc--, argv++;
	if (prio > PRIO_MAX)
		prio = PRIO_MAX;
	if (prio < PRIO_MIN)
		prio = PRIO_MIN;
	for (; argc > 0; argc--, argv++) {
		if (strcmp(*argv, "-g") == 0) {
			which = PRIO_PGRP;
			continue;
d118 10
a127 13
		if (strcmp(*argv, "-u") == 0) {
			which = PRIO_USER;
			continue;
		}
		if (strcmp(*argv, "-p") == 0) {
			which = PRIO_PROCESS;
			continue;
		}
		if (which == PRIO_USER) {
			struct passwd *pwd = getpwnam(*argv);
			
			if (pwd == NULL) {
				warnx("%s: unknown user", *argv);
d130 1
a130 1
			who = pwd->pw_uid;
d132 3
a134 3
			who = strtol(*argv, &ep, 10);
			if (*ep != NULL || who < 0) {
				warnx("%s: bad value", *argv);
d138 1
a138 1
		errs += donice(which, (uid_t)who, (int)prio);
d140 3
a142 1
	exit(errs != 0);
d145 2
a146 2
int
donice(int which, uid_t who, int prio)
d148 1
a148 1
	int oldprio;
d150 15
a164 4
	errno = 0, oldprio = getpriority(which, who);
	if (oldprio == -1 && errno) {
		warn("getpriority: %d", who);
		return (1);
d166 1
a166 6
	if (setpriority(which, who, prio) < 0) {
		warn("setpriority: %d", who);
		return (1);
	}
	printf("%d: old priority %d, new priority %d\n", who, oldprio, prio);
	return (0);
d169 1
a169 1
void
d172 2
a173 4
	extern char *__progname;

	fprintf(stderr, "usage: %s priority [[-g] pgrp ...] [[-p] pid ...] "
	    "[[-u] user ...]\n", __progname);
@


1.11
log
@add missing includes
ok deraadt@@ tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: renice.c,v 1.10 2003/06/10 22:20:50 deraadt Exp $	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD: renice.c,v 1.10 2003/06/10 22:20:50 deraadt Exp $";
d141 1
a141 1
	fprintf(stderr, "usage: %s priority [[-p] pid ...] [[-g] pgrp ...] "
@


1.10
log
@mostly ansi cleanup; pval ok
@
text
@d1 1
a1 1
/*	$OpenBSD: renice.c,v 1.9 2003/06/03 02:56:15 millert Exp $	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD: renice.c,v 1.9 2003/06/03 02:56:15 millert Exp $";
d52 1
@


1.9
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: renice.c,v 1.8 2002/02/16 21:27:51 millert Exp $	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD: renice.c,v 1.8 2002/02/16 21:27:51 millert Exp $";
d66 1
a66 3
main(argc, argv)
	int argc;
	char **argv;
d118 1
a118 4
donice(which, who, prio)
	int which;
	uid_t who;
	int prio;
d136 1
a136 1
usage()
@


1.8
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: renice.c,v 1.7 2001/11/19 19:02:16 mpech Exp $	*/
d15 1
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d42 1
a42 1
static char rcsid[] = "$OpenBSD: renice.c,v 1.7 2001/11/19 19:02:16 mpech Exp $";
@


1.7
log
@kill more registers

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: renice.c,v 1.6 2001/07/06 21:54:57 pvalchev Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: renice.c,v 1.6 2001/07/06 21:54:57 pvalchev Exp $";
d60 3
a62 3
int main __P((int, char **));
int donice __P((int, uid_t, int));
void usage __P((void));
@


1.6
log
@missing prototypes; ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: renice.c,v 1.5 1999/03/04 16:14:58 millert Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: renice.c,v 1.5 1999/03/04 16:14:58 millert Exp $";
d104 1
a104 1
			register struct passwd *pwd = getpwnam(*argv);
@


1.5
log
@catch things like "renice --19 6706" as an error, use warn/warnx and update sccs ids to 4.4lite while we are at it
@
text
@d1 1
a1 1
/*	$OpenBSD: renice.c,v 1.4 1998/12/20 01:13:33 deraadt Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: renice.c,v 1.4 1998/12/20 01:13:33 deraadt Exp $";
d60 1
d71 1
@


1.4
log
@fix usage
@
text
@d1 1
a1 1
/*	$OpenBSD: renice.c,v 1.3 1997/06/20 10:02:31 deraadt Exp $	*/
d4 2
a5 2
 * Copyright (c) 1983 The Regents of the University of California.
 * All rights reserved.
d37 3
a39 3
char copyright[] =
"@@(#) Copyright (c) 1989 The Regents of the University of California.\n\
 All rights reserved.\n";
d43 5
a47 2
/*static char sccsid[] = "from: @@(#)renice.c	5.3 (Berkeley) 6/1/90";*/
static char rcsid[] = "$OpenBSD: renice.c,v 1.3 1997/06/20 10:02:31 deraadt Exp $";
d53 1
d57 2
d60 2
a61 1
int donice __P((int, int, int));
d73 3
a75 1
	int who = 0, prio, errs = 0;
d78 5
a82 6
	if (argc < 2) {
		fprintf(stderr, "usage: renice priority [[-p] pid ...] ");
		fprintf(stderr, "[[-g] pgrp ...] [[-u] user ...]\n");
		exit(1);
	}
	prio = atoi(*argv);
d105 1
a105 2
				fprintf(stderr, "renice: %s: unknown user\n",
					*argv);
d110 3
a112 4
			who = atoi(*argv);
			if (who < 0) {
				fprintf(stderr, "renice: %s: bad value\n",
					*argv);
d116 1
a116 1
		errs += donice(which, who, prio);
d123 3
a125 1
	int which, who, prio;
a127 1
	extern int errno;
d131 1
a131 2
		fprintf(stderr, "renice: %d: ", who);
		perror("getpriority");
d135 1
a135 2
		fprintf(stderr, "renice: %d: ", who);
		perror("setpriority");
d140 10
@


1.3
log
@Wall
@
text
@d1 1
a1 1
/*	$OpenBSD: renice.c,v 1.2 1996/06/26 05:38:27 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: renice.c,v 1.2 1996/06/26 05:38:27 deraadt Exp $";
d70 2
a71 2
		fprintf(stderr, "usage: renice priority [ [ -p ] pids ] ");
		fprintf(stderr, "[ [ -g ] pgrps ] [ [ -u ] users ]\n");
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: renice.c,v 1.1.1.1 1995/10/18 08:45:59 deraadt Exp $";
d51 1
d54 2
d61 1
d115 1
@


1.1
log
@Initial revision
@
text
@d1 2
d44 1
a44 1
static char rcsid[] = "$Id: renice.c,v 1.3 1993/12/02 19:52:15 pk Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
