head	1.25;
access;
symbols
	OPENBSD_6_1:1.24.0.12
	OPENBSD_6_1_BASE:1.24
	OPENBSD_6_0:1.24.0.8
	OPENBSD_6_0_BASE:1.24
	OPENBSD_5_9:1.24.0.4
	OPENBSD_5_9_BASE:1.24
	OPENBSD_5_8:1.24.0.6
	OPENBSD_5_8_BASE:1.24
	OPENBSD_5_7:1.24.0.2
	OPENBSD_5_7_BASE:1.24
	OPENBSD_5_6:1.23.0.12
	OPENBSD_5_6_BASE:1.23
	OPENBSD_5_5:1.23.0.10
	OPENBSD_5_5_BASE:1.23
	OPENBSD_5_4:1.23.0.6
	OPENBSD_5_4_BASE:1.23
	OPENBSD_5_3:1.23.0.4
	OPENBSD_5_3_BASE:1.23
	OPENBSD_5_2:1.23.0.2
	OPENBSD_5_2_BASE:1.23
	OPENBSD_5_1_BASE:1.22
	OPENBSD_5_1:1.22.0.10
	OPENBSD_5_0:1.22.0.8
	OPENBSD_5_0_BASE:1.22
	OPENBSD_4_9:1.22.0.6
	OPENBSD_4_9_BASE:1.22
	OPENBSD_4_8:1.22.0.4
	OPENBSD_4_8_BASE:1.22
	OPENBSD_4_7:1.22.0.2
	OPENBSD_4_7_BASE:1.22
	OPENBSD_4_6:1.21.0.12
	OPENBSD_4_6_BASE:1.21
	OPENBSD_4_5:1.21.0.8
	OPENBSD_4_5_BASE:1.21
	OPENBSD_4_4:1.21.0.6
	OPENBSD_4_4_BASE:1.21
	OPENBSD_4_3:1.21.0.4
	OPENBSD_4_3_BASE:1.21
	OPENBSD_4_2:1.21.0.2
	OPENBSD_4_2_BASE:1.21
	OPENBSD_4_1:1.20.0.4
	OPENBSD_4_1_BASE:1.20
	OPENBSD_4_0:1.20.0.2
	OPENBSD_4_0_BASE:1.20
	OPENBSD_3_9:1.15.0.10
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.15.0.8
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.15.0.6
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.15.0.4
	OPENBSD_3_6_BASE:1.15
	OPENBSD_3_5:1.15.0.2
	OPENBSD_3_5_BASE:1.15
	OPENBSD_3_4:1.14.0.2
	OPENBSD_3_4_BASE:1.14
	OPENBSD_3_3:1.10.0.6
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.4
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.2
	OPENBSD_2_8:1.5.0.4
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.4.0.10
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.8
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.6
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.25
date	2017.09.10.07.29.39;	author tb;	state Exp;
branches;
next	1.24;
commitid	dUVs7i1te0Uz9tSt;

1.24
date	2014.10.21.06.15.16;	author dlg;	state Exp;
branches;
next	1.23;
commitid	SNHh1ILNm8JMTJB1;

1.23
date	2012.05.01.04.23.21;	author gsoares;	state Exp;
branches;
next	1.22;

1.22
date	2009.10.27.23.59.44;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2007.05.11.01.47.48;	author ray;	state Exp;
branches;
next	1.20;

1.20
date	2006.07.26.09.10.03;	author mglocker;	state Exp;
branches;
next	1.19;

1.19
date	2006.07.24.17.29.58;	author mglocker;	state Exp;
branches;
next	1.18;

1.18
date	2006.07.20.09.42.44;	author mglocker;	state Exp;
branches;
next	1.17;

1.17
date	2006.07.12.16.58.51;	author mglocker;	state Exp;
branches;
next	1.16;

1.16
date	2006.05.08.13.02.51;	author claudio;	state Exp;
branches;
next	1.15;

1.15
date	2003.09.24.20.21.40;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2003.06.25.15.45.10;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.10.22.20.53;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.03.02.56.18;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2003.04.17.17.17.27;	author henning;	state Exp;
branches;
next	1.10;

1.10
date	2002.02.16.21.27.55;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2001.11.19.19.02.16;	author mpech;	state Exp;
branches;
next	1.8;

1.8
date	2001.07.31.14.32.15;	author mpech;	state Exp;
branches;
next	1.7;

1.7
date	2001.03.22.01.34.01;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	2000.12.07.18.13.14;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2000.02.01.03.23.42;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.08.06.06.43.45;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.01.17.07.13.32;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.40.35;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.46.16;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.46.16;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.25
log
@Use monotonic clock for statistics display. From Scott Cheloha.

ok dlg
@
text
@/*	$OpenBSD: tftp.c,v 1.24 2014/10/21 06:15:16 dlg Exp $	*/
/*	$NetBSD: tftp.c,v 1.5 1995/04/29 05:55:25 cgd Exp $	*/

/*
 * Copyright (c) 1983, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * TFTP User Program -- Protocol Machines
 *
 * This version includes many modifications by Jim Guyton <guyton@@rand-unix>
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <sys/stat.h>

#include <netinet/in.h>
#include <arpa/tftp.h>

#include <err.h>
#include <errno.h>
#include <poll.h>
#include <signal.h>
#include <stdio.h>
#include <stddef.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>
#include <netdb.h>

#include "extern.h"
#include "tftpsubs.h"

static int	cmpport(struct sockaddr *, struct sockaddr *);
static int	makerequest(int, const char *, struct tftphdr *, const char *);
static void	nak(int, struct sockaddr *);
static void 	tpacket(const char *, struct tftphdr *, int);
static void	startclock(void);
static void	stopclock(void);
static void	printstats(const char *, unsigned long);
static void	printtimeout(void);
static void	oack(struct tftphdr *, int, int);
static int	oack_set(const char *, const char *);

extern struct sockaddr_storage	 peeraddr;	/* filled in by main */
extern int			 f;		/* the opened socket */
extern int			 trace;
extern int			 verbose;
extern int			 rexmtval;
extern int			 maxtimeout;
extern FILE			*file;
extern volatile sig_atomic_t	 intrflag;
extern char			*ackbuf;
extern int			 has_options;
extern int			 opt_tsize;
extern int			 opt_tout;
extern int			 opt_blksize;

struct timespec	tstart;
struct timespec	tstop;
unsigned int	segment_size = SEGSIZE;
unsigned int	packet_size = SEGSIZE + 4;

struct errmsg {
	int	 e_code;
	char	*e_msg;
} errmsgs[] = {
	{ EUNDEF,	"Undefined error code" },
	{ ENOTFOUND,	"File not found" },
	{ EACCESS,	"Access violation" },
	{ ENOSPACE,	"Disk full or allocation exceeded" },
	{ EBADOP,	"Illegal TFTP operation" },
	{ EBADID,	"Unknown transfer ID" },
	{ EEXISTS,	"File already exists" },
	{ ENOUSER,	"No such user" },
	{ EOPTNEG,	"Option negotiation failed" },
	{ -1,		NULL }
};

struct options {
	const char      *o_type;
} options[] = {
	{ "tsize" },
	{ "timeout" },
	{ "blksize" },
	{ NULL }
};

enum opt_enum {
	OPT_TSIZE = 0,
	OPT_TIMEOUT,
	OPT_BLKSIZE
};

/*
 * Send the requested file.
 */
void
sendfile(int fd, char *name, char *mode)
{
	struct tftphdr		*dp, *ap; /* data and ack packets */
	struct sockaddr_storage	 from, peer;
	struct sockaddr_storage	 serv; /* valid server port number */
	struct pollfd		 pfd[1];
	unsigned long		 amount;
	socklen_t		 fromlen;
	int			 convert; /* true if converting crlf -> lf */
	int			 n, nfds, error, timeouts, size;
	uint16_t		 block = 0;
	int			 firsttrip = 1;

	startclock();		/* start stat's clock */
	dp = r_init();		/* reset fillbuf/read-ahead code */
	ap = (struct tftphdr *)ackbuf;
	file = fdopen(fd, "r");
	convert = !strcmp(mode, "netascii");
	amount = 0;
	memcpy(&peer, &peeraddr, peeraddr.ss_len);
	memset(&serv, 0, sizeof(serv));

	do {
		/* read data from file */
		if (firsttrip)
			size = makerequest(WRQ, name, dp, mode) - 4;
		else {
			size = readit(file, &dp, convert, segment_size);
			if (size < 0) {
				nak(errno + 100, (struct sockaddr *)&peer);
				break;
			}
			dp->th_opcode = htons((u_short)DATA);
			dp->th_block = htons(block);
		}

		/* send data to server and wait for server ACK */
		for (timeouts = 0, error = 0; !intrflag;) {
			if (timeouts >= maxtimeout) {
				printtimeout();
				goto abort;
			}

			if (!error) {
				if (trace)
					tpacket("sent", dp, size + 4);
				if (sendto(f, dp, size + 4, 0,
				    (struct sockaddr *)&peer,
				    peer.ss_len) != size + 4) {
					warn("sendto");
					goto abort;
				}
				if (!firsttrip)
					read_ahead(file, convert, segment_size);
			}
			error = 0;

			pfd[0].fd = f;
			pfd[0].events = POLLIN;
			nfds = poll(pfd, 1, rexmtval * 1000);
			if (nfds == 0) {
				timeouts += rexmtval;
				continue;
			}
			if (nfds == -1) {
				error = 1;
				if (errno == EINTR)
					continue;
				warn("poll");
				goto abort;
			}
			fromlen = sizeof(from);
			n = recvfrom(f, ackbuf, packet_size, 0,
			    (struct sockaddr *)&from, &fromlen);
			if (n == 0) {
				warn("recvfrom");
				goto abort;
			}
			if (n == -1) {
				error = 1;
				if (errno == EINTR)
					continue;
				warn("recvfrom");
				goto abort;
			}
			if (!serv.ss_family)
				serv = from;
			else if (!cmpport((struct sockaddr *)&serv,
			    (struct sockaddr *)&from)) {
				warn("server port mismatch");
				goto abort;
			}
			peer = from;
			if (trace)
				tpacket("received", ap, n);

			ap->th_opcode = ntohs(ap->th_opcode);

			if (ap->th_opcode == OACK) {
				oack(ap, n, 0);
				break;
			}

			ap->th_block = ntohs(ap->th_block);

			if (ap->th_opcode == ERROR) {
				printf("Error code %d: %s\n",
				    ap->th_code, ap->th_msg);
				goto abort;
			}
			if (ap->th_opcode == ACK) {
				int j;
				if (ap->th_block == block)
					break;
				/* re-synchronize with other side */
				j = synchnet(f);
				if (j && trace)
					printf("discarded %d packets\n", j);
				if (ap->th_block == (block - 1))
					continue;
			}
			error = 1;	/* received packet does not match */
		}

		if (firsttrip) {
			size = segment_size;
			firsttrip = 0;
		} else
			amount += size;
		block++;
	} while ((size == segment_size) && !intrflag);

abort:
	fclose(file);
	stopclock();
	if (amount > 0) {
		if (intrflag)
			putchar('\n');
		printstats("Sent", amount);
	}
}

/*
 * Receive a file.
 */
void
recvfile(int fd, char *name, char *mode)
{
	struct tftphdr		*dp, *ap; /* data and ack packets */
	struct sockaddr_storage	 from, peer;
	struct sockaddr_storage	 serv; /* valid server port number */
	struct pollfd		 pfd[1];
	unsigned long		 amount;
	socklen_t		 fromlen;
	int			 convert; /* true if converting crlf -> lf */
	int			 n, nfds, error, timeouts, size;
	int			 firsttrip;
	uint16_t		 block;

	startclock();		/* start stat's clock */
	dp = w_init();		/* reset fillbuf/read-ahead code */
	ap = (struct tftphdr *)ackbuf;
	file = fdopen(fd, "w");
	convert = !strcmp(mode, "netascii");
	n = 0;
	block = 1;
	amount = 0;
	firsttrip = 1;
	memcpy(&peer, &peeraddr, peeraddr.ss_len);
	memset(&serv, 0, sizeof(serv));

options:
	do {
		/* create new ACK packet */
		if (firsttrip) {
			size = makerequest(RRQ, name, ap, mode);
			firsttrip = 0;
		} else {
			ap->th_opcode = htons((u_short)ACK);
			ap->th_block = htons(block);
			size = 4;
			block++;
		}

		/* send ACK to server and wait for server data */
		for (timeouts = 0, error = 0; !intrflag;) {
			if (timeouts >= maxtimeout) {
				printtimeout();
				goto abort;
			}

			if (!error) {
				if (trace)
					tpacket("sent", ap, size);
				if (sendto(f, ackbuf, size, 0,
				    (struct sockaddr *)&peer,
				    peer.ss_len) != size) {
					warn("sendto");
					goto abort;
				}
				write_behind(file, convert);
			}
			error = 0;

			pfd[0].fd = f;
			pfd[0].events = POLLIN;
			nfds = poll(pfd, 1, rexmtval * 1000);
			if (nfds == 0) {
				timeouts += rexmtval;
				continue;
			}
			if (nfds == -1) {
				error = 1;
				if (errno == EINTR)
					continue;
				warn("poll");
				goto abort;
			}
			fromlen = sizeof(from);
			n = recvfrom(f, dp, packet_size, 0,
			    (struct sockaddr *)&from, &fromlen);
			if (n == 0) {
				warn("recvfrom");
				goto abort;
			}
			if (n == -1) {
				error = 1;
				if (errno == EINTR)
					continue;
				warn("recvfrom");
				goto abort;
			}
			if (!serv.ss_family)
				serv = from;
			else if (!cmpport((struct sockaddr *)&serv,
			    (struct sockaddr *)&from)) {
				warn("server port mismatch");
				goto abort;
			}
			peer = from;
			if (trace)
				tpacket("received", dp, n);

			dp->th_opcode = ntohs(dp->th_opcode);

			if (dp->th_opcode == OACK) {
				oack(dp, n, 0);
				block = 0;
				goto options;
			}

			dp->th_block = ntohs(dp->th_block);

			if (dp->th_opcode == ERROR) {
				printf("Error code %d: %s\n",
				    dp->th_code, dp->th_msg);
				goto abort;
			}
			if (dp->th_opcode == DATA) {
				int j;
				if (dp->th_block == block)
					break;
				/* re-synchronize with other side */
				j = synchnet(f);
				if (j && trace)
					printf("discarded %d packets\n", j);
				if (dp->th_block == (block - 1))
					continue;
			}
			error = 1;	/* received packet does not match */
		}

		/* write data to file */
		size = writeit(file, &dp, n - 4, convert);
		if (size < 0) {
			nak(errno + 100, (struct sockaddr *)&peer);
			break;
		}
		amount += size;
	} while (size == segment_size && !intrflag);

abort:
	/* ok to ack, since user has seen err msg */
	ap->th_opcode = htons((u_short)ACK);
	ap->th_block = htons(block);
	(void)sendto(f, ackbuf, 4, 0, (struct sockaddr *)&peer,
	    peer.ss_len);
	write_behind(file, convert);	/* flush last buffer */

	fclose(file);
	stopclock();
	if (amount > 0) {
		if (intrflag)
			putchar('\n');
		printstats("Received", amount);
	}
}

static int
cmpport(struct sockaddr *sa, struct sockaddr *sb)
{
	char a[NI_MAXSERV], b[NI_MAXSERV];
	if (getnameinfo(sa, sa->sa_len, NULL, 0, a, sizeof(a), NI_NUMERICSERV))
		return (0);
	if (getnameinfo(sb, sb->sa_len, NULL, 0, b, sizeof(b), NI_NUMERICSERV))
		return (0);
	if (strcmp(a, b) != 0)
		return (0);

	return (1);
}

static int
makerequest(int request, const char *name, struct tftphdr *tp,
    const char *mode)
{
	char		*cp;
	int		 len, pktlen;
	off_t		 fsize = 0;
	struct stat	 st;

	tp->th_opcode = htons((u_short)request);
	cp = tp->th_stuff;
	pktlen = packet_size - offsetof(struct tftphdr, th_stuff);
	len = strlen(name) + 1;
	strlcpy(cp, name, pktlen);
	strlcpy(cp + len, mode, pktlen - len);
	len += strlen(mode) + 1;

	if (opt_tsize) {
		if (request == WRQ) {
			stat(name, &st);
			fsize = st.st_size;
		}
		len += snprintf(cp + len, pktlen - len, "%s%c%lld%c",
		    options[OPT_TSIZE].o_type, 0, fsize, 0);
	}
	if (opt_tout)
		len += snprintf(cp + len, pktlen - len, "%s%c%d%c",
		    options[OPT_TIMEOUT].o_type, 0, rexmtval, 0);
	if (opt_blksize)
		len += snprintf(cp + len, pktlen - len, "%s%c%d%c",
		    options[OPT_BLKSIZE].o_type, 0, opt_blksize, 0);

	return (cp + len - (char *)tp);
}

/*
 * Send a nak packet (error message).
 * Error code passed in is one of the
 * standard TFTP codes, or a UNIX errno
 * offset by 100.
 */
static void
nak(int error, struct sockaddr *peer)
{
	struct errmsg	*pe;
	struct tftphdr	*tp;
	int		 length;

	tp = (struct tftphdr *)ackbuf;
	tp->th_opcode = htons((u_short)ERROR);
	tp->th_code = htons((u_short)error);
	for (pe = errmsgs; pe->e_code >= 0; pe++)
		if (pe->e_code == error)
			break;
	if (pe->e_code < 0) {
		pe->e_msg = strerror(error - 100);
		tp->th_code = EUNDEF;
	}
	length = strlcpy(tp->th_msg, pe->e_msg, packet_size) + 5;
	if (length > packet_size)
		length = packet_size;
	if (trace)
		tpacket("sent", tp, length);
	if (sendto(f, ackbuf, length, 0, peer,
	    peer->sa_len) != length)
		warn("nak");
}

static void
tpacket(const char *s, struct tftphdr *tp, int n)
{
	char		*cp, *file;
	static char	*opcodes[] =
	    { "#0", "RRQ", "WRQ", "DATA", "ACK", "ERROR", "OACK" };

	u_short op = ntohs(tp->th_opcode);

	if (op < RRQ || op > OACK)
		printf("%s opcode=%x ", s, op);
	else
		printf("%s %s ", s, opcodes[op]);

	switch (op) {
	case RRQ:
	case WRQ:
		n -= 2;
		file = cp = tp->th_stuff;
		cp = strchr(cp, '\0');
		printf("<file=%s, mode=%s", file, cp + 1);
		if (has_options)
			oack(tp, n, 1);
		printf(">\n");
		break;
	case DATA:
		printf("<block=%d, %d bytes>\n", ntohs(tp->th_block), n - 4);
		break;
	case ACK:
		printf("<block=%d>\n", ntohs(tp->th_block));
		break;
	case ERROR:
		printf("<code=%d, msg=%s>\n", ntohs(tp->th_code), tp->th_msg);
		break;
	case OACK:
		printf("<");
		oack(tp, n, 1);
		printf(">\n");
		break;
	}
}

static void
startclock(void)
{
	clock_gettime(CLOCK_MONOTONIC, &tstart);
}

static void
stopclock(void)
{
	clock_gettime(CLOCK_MONOTONIC, &tstop);
}

static void
printstats(const char *direction, unsigned long amount)
{
	double	delta;

	/* compute delta in 1/10's second units */
	delta = ((tstop.tv_sec * 10.) + (tstop.tv_nsec / 100000000)) -
	    ((tstart.tv_sec * 10.) + (tstart.tv_nsec / 100000000));
	delta = delta / 10.;	/* back to seconds */
	printf("%s %lu bytes in %.1f seconds", direction, amount, delta);
	if (verbose)
		printf(" [%.0f bits/sec]", (amount * 8.) / delta);
	putchar('\n');
}

static void
printtimeout(void)
{
	printf("Transfer timed out.\n");
}

static void
oack(struct tftphdr *tp, int size, int trace)
{
	int	 i, len, off;
	char	*opt, *val;

	u_short op = ntohs(tp->th_opcode);

	opt = tp->th_u.tu_stuff;
	val = tp->th_u.tu_stuff;

	if (op == RRQ || op == WRQ) {
		len = strlen(opt) + 1;
		opt = strchr(opt, '\0');
		opt++;
		len += strlen(opt) + 1;
		opt = strchr(opt, '\0');
		opt++;
		val = opt;
		off = len;
		if (trace)
			printf(", ");
	} else
		off = 2;

	for (i = off, len = 0; i < size - 1; i++) {
		if (*val != '\0') {
			val++;
			continue;
		}
		/* got option and value */
		val++;
		if (trace)
			printf("%s=%s", opt, val);
		else
			if (oack_set(opt, val) == -1)
				break;
		len = strlen(val) + 1;
		val += len;
		opt = val;
		i += len;
		if (trace && i < size - 1)
			printf(", ");
	}
}

int
oack_set(const char *option, const char *value)
{
	int		 i, n;
	const char	*errstr;
	struct sockaddr_storage peer;
	memcpy(&peer, &peeraddr, peeraddr.ss_len);

	for (i = 0; options[i].o_type != NULL; i++) {
		if (!strcasecmp(options[i].o_type, option)) {
			if (i == OPT_TSIZE) {
				/* XXX verify OACK response */
			}
			if (i == OPT_TIMEOUT) {
				/* verify OACK response */
				n = strtonum(value, TIMEOUT_MIN, TIMEOUT_MAX,
				    &errstr);
				if (errstr || rexmtval != n ||
				    opt_tout == 0) {
					nak(EOPTNEG, (struct sockaddr *)&peer);
					intrflag = 1;
					return (-1);
				}
				/* OK */
			}
			if (i == OPT_BLKSIZE) {
				/* verify OACK response */
				n = strtonum(value, SEGSIZE_MIN, SEGSIZE_MAX,
				    &errstr);
				if (errstr || opt_blksize != n ||
				    opt_blksize == 0) {
					nak(EOPTNEG, (struct sockaddr *)&peer);
					intrflag = 1;
					return (-1);
				}
				/* OK, set option */
				segment_size = n;
				packet_size = segment_size + 4;
			}
		}
	}

	return (1);
}
@


1.24
log
@cope with sending or receiving files beyond 65536 blocks in length.

reported by justin mayes on misc@@

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tftp.c,v 1.23 2012/05/01 04:23:21 gsoares Exp $	*/
d55 1
d87 2
a88 2
struct timeval	tstart;
struct timeval	tstop;
d552 1
a552 1
	(void)gettimeofday(&tstart, NULL);
d558 1
a558 1
	(void)gettimeofday(&tstop, NULL);
d567 2
a568 2
	delta = ((tstop.tv_sec * 10.) + (tstop.tv_usec / 100000)) -
	    ((tstart.tv_sec * 10.) + (tstart.tv_usec / 100000));
@


1.23
log
@IPv6 support; mostly a sync with netbsd code done by itojun@@

tweaks/OK henning@@ sthen@@ jmc@@ jasper@@

feedback/tests weerd@@ brad@@ (thanks)
@
text
@d1 1
a1 1
/*	$OpenBSD: tftp.c,v 1.22 2009/10/27 23:59:44 deraadt Exp $	*/
d135 3
a137 1
	int			 n, nfds, error, timeouts, block, size;
a143 1
	block = 0;
d150 1
a150 1
		if (!block)
d159 1
a159 1
			dp->th_block = htons((u_short)block);
d178 1
a178 1
				if (block > 0)
d250 4
a253 1
		if (block > 0)
d256 1
a256 1
	} while ((size == segment_size || block == 1) && !intrflag);
d281 1
a281 1
	int			 n, nfds, error, timeouts, block, size;
d283 1
d305 1
a305 1
			ap->th_block = htons((u_short)(block));
d410 1
a410 1
	ap->th_block = htons((u_short)block);
@


1.22
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: tftp.c,v 1.21 2007/05/11 01:47:48 ray Exp $	*/
d56 1
d61 1
d63 1
a63 1
static void	nak(int);
d72 1
a72 1
extern struct sockaddr_in	 peeraddr;	/* filled in by main */
d129 2
a130 1
	struct sockaddr_in	 from;
d144 2
d154 1
a154 1
				nak(errno + 100);
d172 2
a173 2
		    		    (struct sockaddr *)&peeraddr,
				    sizeof(peeraddr)) != size + 4) {
d210 8
a217 1
			peeraddr.sin_port = from.sin_port;	/* added */
d271 2
a272 1
	struct sockaddr_in	 from;
d289 2
d316 2
a317 2
			    	    (struct sockaddr *)&peeraddr,
				    sizeof(peeraddr)) != size) {
d353 8
a360 1
			peeraddr.sin_port = from.sin_port;	/* added */
d396 1
a396 1
			nak(errno + 100);
d406 2
a407 2
	(void)sendto(f, ackbuf, 4, 0, (struct sockaddr *)&peeraddr,
	    sizeof(peeraddr));
d420 14
d475 1
a475 1
nak(int error)
d496 2
a497 2
	if (sendto(f, ackbuf, length, 0, (struct sockaddr *)&peeraddr,
	    sizeof(peeraddr)) != length)
d627 2
d641 1
a641 1
					nak(EOPTNEG);
d653 1
a653 1
					nak(EOPTNEG);	
@


1.21
log
@Delinting from tbert <bret dot lambert at gmail dot com>

OK moritz@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tftp.c,v 1.20 2006/07/26 09:10:03 mglocker Exp $	*/
a31 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)tftp.c	8.1 (Berkeley) 6/6/93";
#endif
static const char rcsid[] =
    "$OpenBSD: tftp.c,v 1.20 2006/07/26 09:10:03 mglocker Exp $";
#endif /* not lint */
@


1.20
log
@Fixing several timeout quirks at tftpd and tftp:

- move TIMEOUT* defines to arpa/tftp.h, as they are used several times
  in tftpd and tftp, and the values are part of the RFC definition.
- tftpd and tftp did count the total retransmission time in retries
  instead in seconds.  fixed.
- tftpd rexmt timeout was hardcoded by a define and therefore didn't
  changed when the timeout option was sent.  fixed.
- limit total retransmission timeout in tftp to also 255 seconds.
- replace obvious atoi()'s by strtonum().

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tftp.c,v 1.19 2006/07/24 17:29:58 mglocker Exp $	*/
d38 1
a38 1
    "$OpenBSD: tftp.c,v 1.19 2006/07/24 17:29:58 mglocker Exp $";
d138 1
d140 1
a140 1
	int			 n, nfds, error, fromlen, timeouts, block, size;
d270 1
d272 1
a272 1
	int			 n, nfds, error, fromlen, timeouts, block, size;
@


1.19
log
@Adding TFTP Option Extension to the tftp client according to RFC 2347.

Implemented options are:

- TFTP Blocksize Option, RFC 2348
- TFTP Timeout Interval and Transfer Size Options, RFC 2349

We have now on the tftp client side the same options supported as in
our tftp server.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tftp.c,v 1.18 2006/07/20 09:42:44 mglocker Exp $	*/
d38 1
a38 1
    "$OpenBSD: tftp.c,v 1.18 2006/07/20 09:42:44 mglocker Exp $";
d165 1
a165 1
			if (timeouts == maxtimeout) {
d188 1
a188 1
				timeouts++;
d298 1
a298 1
			if (timeouts == maxtimeout) {
d320 1
a320 1
				timeouts++;
d605 2
a606 1
				n = strtonum(value, 1, 255, &errstr);
@


1.18
log
@Add blksize option support for tftpd according to RFC 2348.

Note:
While testing the new option, we noticed that our stable tftpd has
a problem if any option is set (e.g. tsize) and you try to put a file.
This has nothing todo with our new blksize option.  We fix this as
next.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tftp.c,v 1.17 2006/07/12 16:58:51 mglocker Exp $	*/
d38 1
a38 1
    "$OpenBSD: tftp.c,v 1.17 2006/07/12 16:58:51 mglocker Exp $";
d50 1
d61 1
a67 2
#define	PKTSIZE	SEGSIZE + 4

d75 2
d86 5
a91 1
char		ackbuf[PKTSIZE];
d94 2
d109 1
d113 15
d154 1
a154 1
			size = readit(file, &dp, convert, SEGSIZE);
d179 2
a180 1
				read_ahead(file, convert, SEGSIZE);
d199 1
a199 1
			n = recvfrom(f, ackbuf, sizeof(ackbuf), 0,
d215 1
d217 6
d247 1
a247 1
	} while ((size == SEGSIZE || block == 1) && !intrflag);
d283 1
d331 1
a331 1
			n = recvfrom(f, dp, PKTSIZE, 0,
d347 1
d349 7
d384 1
a384 1
	} while (size == SEGSIZE && !intrflag);
d407 4
a410 2
	char	*cp;
	int	 len, pktlen;
d414 1
a414 1
	pktlen = PKTSIZE - offsetof(struct tftphdr, th_stuff);
d420 15
d461 3
a463 3
	length = strlcpy(tp->th_msg, pe->e_msg, sizeof(ackbuf)) + 5;
	if (length > sizeof(ackbuf))
		length = sizeof(ackbuf);
d476 1
a476 1
	    { "#0", "RRQ", "WRQ", "DATA", "ACK", "ERROR" };
d480 1
a480 1
	if (op < RRQ || op > ERROR)
d491 4
a494 1
		printf("<file=%s, mode=%s>\n", file, cp + 1);
d505 5
d544 88
@


1.17
log
@knf.  no binary change.

ok beck@@ claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tftp.c,v 1.16 2006/05/08 13:02:51 claudio Exp $	*/
d38 1
a38 1
    "$OpenBSD: tftp.c,v 1.16 2006/05/08 13:02:51 claudio Exp $";
d130 1
a130 1
			size = readit(file, &dp, convert);
d155 1
a155 1
				read_ahead(file, convert);
@


1.16
log
@Remove unsave setjmp/longjmp calls that were used in signal handlers with
a more sane poll loop. Includes some style(9) changes.
Diff made by Marcus Glocker
@
text
@d1 1
a1 1
/*	$OpenBSD: tftp.c,v 1.15 2003/09/24 20:21:40 deraadt Exp $	*/
d37 2
a38 1
static const char rcsid[] = "$OpenBSD: tftp.c,v 1.15 2003/09/24 20:21:40 deraadt Exp $";
a40 2
/* Many bug fixes are from Jim Guyton <guyton@@rand-unix> */

d43 2
d54 1
a61 1
#include <err.h>
d68 14
a81 6
extern struct sockaddr_in	peeraddr;	/* filled in by main */
extern int			f;		/* the opened socket */
extern int			trace;
extern int			verbose;
extern int			rexmtval;
extern int			maxtimeout;
d83 1
a83 3
extern volatile sig_atomic_t	intrflag;

char	ackbuf[PKTSIZE];
d85 1
d90 1
a90 1
	int	e_code;
a103 8
static int	makerequest(int, const char *, struct tftphdr *, const char *);
static void	nak(int);
static void 	tpacket(const char *, struct tftphdr *, int);
static void	startclock(void);
static void	stopclock(void);
static void	printstats(const char *, unsigned long);
static void	printtimeout(void);

d110 6
a115 6
	struct tftphdr *dp, *ap;	/* data and ack packets */
	struct sockaddr_in from;
	struct pollfd pfd[1];
	unsigned long amount;
	int convert;			/* true if converting crlf -> lf */
	int n, nfds, error, fromlen, timeouts, block, size;
d233 7
a239 6
	struct tftphdr *dp, *ap;	/* data and ack packets */
	struct sockaddr_in from;
	struct pollfd pfd[1];
	unsigned long amount;
	int convert;			/* true if converting crlf -> lf */
	int n, nfds, error, fromlen, timeouts, block, size, firsttrip;
d349 1
a349 1
	(void) sendto(f, ackbuf, 4, 0, (struct sockaddr *)&peeraddr,
d366 2
a367 2
	char *cp;
	int len, pktlen;
d376 1
d389 3
a391 3
	struct errmsg *pe;
	struct tftphdr *tp;
	int length;
d416 2
a417 1
	static char *opcodes[] =
d419 1
a419 1
	char *cp, *file;
d450 1
a450 1
	(void) gettimeofday(&tstart, NULL);
d456 1
a456 1
	(void) gettimeofday(&tstop, NULL);
d462 1
a462 1
	double delta;
@


1.15
log
@knf
@
text
@d1 1
a1 1
/*	$OpenBSD: tftp.c,v 1.14 2003/06/25 15:45:10 deraadt Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: tftp.c,v 1.14 2003/06/25 15:45:10 deraadt Exp $";
d45 1
a50 1

d54 1
a54 1
#include <setjmp.h>
d65 10
d76 27
a102 20
extern  struct sockaddr_in peeraddr;	/* filled in by main */
extern  int     f;			/* the opened socket */
extern  int     trace;
extern  int     verbose;
extern  int     rexmtval;
extern  int     maxtimeout;

#define PKTSIZE    SEGSIZE+4
char    ackbuf[PKTSIZE];
int	timeout;
jmp_buf	toplevel;
jmp_buf	timeoutbuf;

static void nak(int);
static int makerequest(int, const char *, struct tftphdr *, const char *);
static void printstats(const char *, unsigned long);
static void startclock(void);
static void stopclock(void);
static void timer(int);
static void tpacket(const char *, struct tftphdr *, int);
d110 1
a110 3
	struct tftphdr *dp, *ap;	   /* data and ack packets */
	volatile int block, size, convert;
	volatile unsigned long amount;
d112 4
a115 2
	int n, fromlen;
	FILE *file;
a124 1
	signal(SIGALRM, timer);
d126 2
a127 1
		if (block == 0)
a129 1
		/*	size = read(fd, dp->th_data, SEGSIZE);	 */
d138 46
a183 21
		timeout = 0;
		(void) setjmp(timeoutbuf);
send_data:
		if (trace)
			tpacket("sent", dp, size + 4);
		n = sendto(f, dp, size + 4, 0,
		    (struct sockaddr *)&peeraddr, sizeof(peeraddr));
		if (n != size + 4) {
			warn("sendto");
			goto abort;
		}
		read_ahead(file, convert);
		for ( ; ; ) {
			alarm(rexmtval);
			do {
				fromlen = sizeof(from);
				n = recvfrom(f, ackbuf, sizeof(ackbuf), 0,
				    (struct sockaddr *)&from, &fromlen);
			} while (n <= 0);
			alarm(0);
			if (n < 0) {
a189 1
			/* should verify packet came from server */
d192 1
d194 2
a195 2
				printf("Error code %d: %s\n", ap->th_code,
				    ap->th_msg);
d200 1
a200 2

				if (ap->th_block == block) {
d202 1
a202 4
				}
				/* On an error, try to synchronize
				 * both sides.
				 */
d206 2
a207 2
				if (ap->th_block == (block-1))
					goto send_data;
d209 1
d211 1
d215 2
a216 1
	} while (size == SEGSIZE || block == 1);
d220 3
a222 1
	if (amount > 0)
d224 1
d233 1
a233 3
	struct tftphdr *dp, *ap;
	volatile int block, size, firsttrip;
	volatile unsigned long amount;
d235 4
a238 3
	int n, fromlen;
	FILE *file;
	volatile int convert;		/* true if converting crlf -> lf */
d240 2
a241 2
	startclock();
	dp = w_init();
d245 1
d247 1
a248 1
	amount = 0;
a249 1
	signal(SIGALRM, timer);
d251 1
d261 46
a306 21
		timeout = 0;
		(void) setjmp(timeoutbuf);
send_ack:
		if (trace)
			tpacket("sent", ap, size);
		if (sendto(f, ackbuf, size, 0, (struct sockaddr *)&peeraddr,
		    sizeof(peeraddr)) != size) {
			alarm(0);
			warn("sendto");
			goto abort;
		}
		write_behind(file, convert);
		for ( ; ; ) {
			alarm(rexmtval);
			do  {
				fromlen = sizeof(from);
				n = recvfrom(f, dp, PKTSIZE, 0,
				    (struct sockaddr *)&from, &fromlen);
			} while (n <= 0);
			alarm(0);
			if (n < 0) {
a312 1
			/* should verify client address */
d315 1
d317 2
a318 2
				printf("Error code %d: %s\n", dp->th_code,
				    dp->th_msg);
d323 3
a325 7

				if (dp->th_block == block) {
					break;		/* have next packet */
				}
				/* On an error, try to synchronize
				 * both sides.
				 */
d329 2
a330 2
				if (dp->th_block == (block-1))
					goto send_ack;	/* resend ack */
d332 1
d334 2
a335 1
	/*	size = write(fd, dp->th_data, n - 4); */
d342 5
a346 3
	} while (size == SEGSIZE);
abort:						/* ok to ack, since user */
	ap->th_opcode = htons((u_short)ACK);	/* has seen err msg */
d350 2
a351 1
	write_behind(file, convert);		/* flush last buffer */
d354 3
a356 1
	if (amount > 0)
d358 1
a377 15
struct errmsg {
	int	e_code;
	char	*e_msg;
} errmsgs[] = {
	{ EUNDEF,	"Undefined error code" },
	{ ENOTFOUND,	"File not found" },
	{ EACCESS,	"Access violation" },
	{ ENOSPACE,	"Disk full or allocation exceeded" },
	{ EBADOP,	"Illegal TFTP operation" },
	{ EBADID,	"Unknown transfer ID" },
	{ EEXISTS,	"File already exists" },
	{ ENOUSER,	"No such user" },
	{ -1,		NULL }
};

d415 1
a415 1
	   { "#0", "RRQ", "WRQ", "DATA", "ACK", "ERROR" };
d423 1
a424 1

a431 1

a434 1

a437 1

a443 3
struct timeval tstart;
struct timeval tstop;

d447 1
a447 2

	(void)gettimeofday(&tstart, NULL);
d453 1
a453 2

	(void)gettimeofday(&tstop, NULL);
d462 3
a464 3
	delta = ((tstop.tv_sec*10.)+(tstop.tv_usec/100000)) -
		((tstart.tv_sec*10.)+(tstart.tv_usec/100000));
	delta = delta/10.;      /* back to seconds */
d467 1
a467 1
		printf(" [%.0f bits/sec]", (amount*8.)/delta);
d472 1
a472 1
timer(int sig)
d474 1
a474 10
	int save_errno = errno;

	timeout += rexmtval;
	if (timeout >= maxtimeout) {
		printf("Transfer timed out.\n");
		errno = save_errno;
		longjmp(toplevel, -1);
	}
	errno = save_errno;
	longjmp(timeoutbuf, 1);
@


1.14
log
@ansi
@
text
@d1 1
a1 1
/*	$OpenBSD: tftp.c,v 1.13 2003/06/10 22:20:53 deraadt Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: tftp.c,v 1.13 2003/06/10 22:20:53 deraadt Exp $";
d154 1
a154 1
					ap->th_msg);
d167 3
a169 5
				if (j && trace) {
					printf("discarded %d packets\n",
							j);
				}
				if (ap->th_block == (block-1)) {
a170 1
				}
d250 1
a250 1
					dp->th_msg);
d263 1
a263 1
				if (j && trace) {
d265 1
a265 2
				}
				if (dp->th_block == (block-1)) {
a266 1
				}
d411 2
a412 1
			/* compute delta in 1/10's second units */
@


1.13
log
@mostly ansi cleanup; pval ok
@
text
@d1 1
a1 1
/*	$OpenBSD: tftp.c,v 1.12 2003/06/03 02:56:18 millert Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: tftp.c,v 1.12 2003/06/03 02:56:18 millert Exp $";
d91 1
a91 4
sendfile(fd, name, mode)
	int fd;
	char *name;
	char *mode;
d191 1
a191 4
recvfile(fd, name, mode)
	int fd;
	char *name;
	char *mode;
d295 2
a296 5
makerequest(request, name, tp, mode)
	int request;
	const char *name;
	struct tftphdr *tp;
	const char *mode;
d333 1
a333 2
nak(error)
	int error;
d360 1
a360 4
tpacket(s, tp, n)
	const char *s;
	struct tftphdr *tp;
	int n;
d413 1
a413 3
printstats(direction, amount)
	const char *direction;
	unsigned long amount;
d427 1
a427 2
timer(sig)
	int sig;
@


1.12
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: tftp.c,v 1.11 2003/04/17 17:17:27 henning Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: tftp.c,v 1.11 2003/04/17 17:17:27 henning Exp $";
d412 1
a412 1
startclock()
d419 1
a419 1
stopclock()
@


1.11
log
@nuke strcpy + -Wall

parts from and ok mickey@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tftp.c,v 1.10 2002/02/16 21:27:55 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: tftp.c,v 1.10 2002/02/16 21:27:55 millert Exp $";
@


1.10
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: tftp.c,v 1.9 2001/11/19 19:02:16 mpech Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: tftp.c,v 1.9 2001/11/19 19:02:16 mpech Exp $";
d61 1
d100 1
a100 3
	struct tftphdr *ap;	   /* data and ack packets */
	struct tftphdr *r_init(), *dp;
	int n;
d104 1
a104 1
	int fromlen;
d203 1
a203 3
	struct tftphdr *ap;
	struct tftphdr *dp, *w_init();
	int n;
d207 1
a207 1
	int fromlen;
d312 1
d316 6
a321 7
	strcpy(cp, name);
	cp += strlen(name);
	*cp++ = '\0';
	strcpy(cp, mode);
	cp += strlen(mode);
	*cp++ = '\0';
	return (cp - (char *)tp);
@


1.9
log
@kill more registers

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: tftp.c,v 1.8 2001/07/31 14:32:15 mpech Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: tftp.c,v 1.8 2001/07/31 14:32:15 mpech Exp $";
d82 7
a88 7
static void nak __P((int));
static int makerequest __P((int, const char *, struct tftphdr *, const char *));
static void printstats __P((const char *, unsigned long));
static void startclock __P((void));
static void stopclock __P((void));
static void timer __P((int));
static void tpacket __P((const char *, struct tftphdr *, int));
@


1.8
log
@o) better struct handling;
o) use __progname in openlog(3);
o) better ERROR packets handling;

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: tftp.c,v 1.7 2001/03/22 01:34:01 mickey Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: tftp.c,v 1.7 2001/03/22 01:34:01 mickey Exp $";
d99 1
a99 1
	register struct tftphdr *ap;	   /* data and ack packets */
d101 1
a101 1
	register int n;
d204 1
a204 1
	register struct tftphdr *ap;
d206 1
a206 1
	register int n;
d314 1
a314 1
	register char *cp;
d352 2
a353 2
	register struct errmsg *pe;
	register struct tftphdr *tp;
d384 1
a384 1
	register char *cp, *file;
@


1.7
log
@use err/warn, space police
@
text
@d1 1
a1 1
/*	$OpenBSD: tftp.c,v 1.6 2000/12/07 18:13:14 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: tftp.c,v 1.6 2000/12/07 18:13:14 deraadt Exp $";
d339 1
a339 1
	{ -1,		0 }
d366 3
a368 2
	strcpy(tp->th_msg, pe->e_msg);
	length = strlen(pe->e_msg) + 4;
@


1.6
log
@tftp argv parsing overflow; fix by vogelke@@dnaco.net and I
@
text
@d1 1
a1 1
/*	$OpenBSD: tftp.c,v 1.5 2000/02/01 03:23:42 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: tftp.c,v 1.5 2000/02/01 03:23:42 deraadt Exp $";
d63 1
d138 1
a138 1
			perror("tftp: sendto");
d151 1
a151 1
				perror("tftp: recvfrom");
d242 1
a242 1
			perror("tftp: sendto");
d255 1
a255 1
				perror("tftp: recvfrom");
a354 1
	char *strerror();
d372 1
a372 1
		perror("nak");
@


1.5
log
@no need to extern int errno if errno.h is included
@
text
@d1 1
a1 1
/*	$OpenBSD: tftp.c,v 1.4 1997/08/06 06:43:45 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: tftp.c,v 1.4 1997/08/06 06:43:45 deraadt Exp $";
d441 1
a441 1
	printf("%s %d bytes in %.1f seconds", direction, amount, delta);
@


1.4
log
@save errno in mangly handlers
@
text
@d1 1
a1 1
/*	$OpenBSD: tftp.c,v 1.3 1997/01/17 07:13:32 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: tftp.c,v 1.3 1997/01/17 07:13:32 millert Exp $";
a66 1
extern	int errno;
@


1.3
log
@r?index -> strr?chr
@
text
@d1 1
a1 1
/*	$OpenBSD: tftp.c,v 1.2 1996/06/26 05:40:35 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: tftp.c,v 1.2 1996/06/26 05:40:35 deraadt Exp $";
d452 1
d457 1
d460 1
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: tftp.c,v 1.5 1995/04/29 05:55:25 cgd Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: tftp.c,v 1.5 1995/04/29 05:55:25 cgd Exp $";
a385 1
	char *index();
d397 1
a397 1
		cp = index(cp, '\0');
@


1.1
log
@Initial revision
@
text
@d1 1
d41 1
a41 1
static char rcsid[] = "$NetBSD: tftp.c,v 1.5 1995/04/29 05:55:25 cgd Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
