head	1.16;
access;
symbols
	OPENBSD_5_3:1.15.0.14
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.12
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.10
	OPENBSD_5_0:1.15.0.8
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.6
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.4
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.2
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.14.0.8
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.4
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.2
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.12.0.18
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.16
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.14
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.12
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.10
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.8
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.6
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.12.0.4
	OPENBSD_3_6_BASE:1.12
	OPENBSD_3_5:1.12.0.2
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.9.0.2
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.5.0.8
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.6
	OPENBSD_2_8:1.5.0.4
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.4.0.10
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.8
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.6
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.16
date	2013.07.05.21.38.37;	author miod;	state dead;
branches;
next	1.15;

1.15
date	2009.10.27.23.59.43;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2008.06.01.21.42.30;	author sobrado;	state Exp;
branches;
next	1.13;

1.13
date	2008.04.23.01.02.19;	author ray;	state Exp;
branches;
next	1.12;

1.12
date	2003.10.02.05.10.03;	author mickey;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.10.22.20.52;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.03.02.56.16;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.12.08.16.50.07;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.09.23.04.10.14;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.16.21.27.53;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.11.19.19.02.16;	author mpech;	state Exp;
branches;
next	1.5;

1.5
date	2000.02.23.19.44.08;	author provos;	state Exp;
branches;
next	1.4;

1.4
date	97.09.11.11.21.54;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.06.17.23.53.16;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.39.30;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.46.09;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.46.09;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Remove usr.bin/strip and usr.bin/strings, no longer built.
@
text
@/*	$OpenBSD: strings.c,v 1.15 2009/10/27 23:59:43 deraadt Exp $	*/
/*	$NetBSD: strings.c,v 1.7 1995/02/15 15:49:19 jtc Exp $	*/

/*
 * Copyright (c) 1980, 1987, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>

#include <a.out.h>
#include <ctype.h>
#include <errno.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <locale.h>
#include <unistd.h>
#include <err.h>

#define FORMAT_DEC "%07ld "
#define FORMAT_OCT "%07lo "
#define FORMAT_HEX "%07lx "

#define DEF_LEN		4		/* default minimum string length */
#define ISSTR(ch)	(isascii(ch) && (isprint(ch) || ch == '\t'))

typedef struct exec	EXEC;		/* struct exec cast */

static long	foff;			/* offset in the file */
static int	hcnt,			/* head count */
		head_len,		/* length of header */
		read_len;		/* length to read */
static u_char	hbfr[sizeof(EXEC)];	/* buffer for struct exec */

static void usage(void);
int getch(void);

int
main(int argc, char *argv[])
{
	extern char *optarg;
	extern int optind;
	int ch, cnt;
	u_char *C;
	EXEC *head;
	int exitcode, minlen, maxlen, bfrlen;
	short asdata, fflg;
	u_char *bfr;
	char *file, *p;
	char *offset_format;

	setlocale(LC_ALL, "");

	/*
	 * for backward compatibility, allow '-' to specify 'a' flag; no
	 * longer documented in the man page or usage string.
	 */
	asdata = exitcode = fflg = 0;
	offset_format = NULL;
	minlen = -1;
	maxlen = -1;
	while ((ch = getopt(argc, argv, "0123456789an:m:oft:-")) != -1)
		switch((char)ch) {
		case '0': case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			/*
			 * kludge: strings was originally designed to take
			 * a number after a dash.
			 */
			if (minlen == -1) {
				p = argv[optind - 1];
				if (p[0] == '-' && p[1] == ch && !p[2])
					minlen = atoi(++p);
				else
					minlen = atoi(argv[optind] + 1);
			}
			break;
		case '-':
		case 'a':
			asdata = 1;
			break;
		case 'f':
			fflg = 1;
			break;
		case 'n':
			minlen = atoi(optarg);
			break;
		case 'm':
			maxlen = atoi(optarg);
			break;
		case 'o':
			offset_format = FORMAT_OCT;
			break;
		case 't':
			switch (*optarg) {
			case 'o':
			        offset_format = FORMAT_OCT;
				break;
			case 'd':
				offset_format = FORMAT_DEC;
				break;
			case 'x':
				offset_format = FORMAT_HEX;
				break;
			default:
				usage();
				/* NOTREACHED */
			}
			break;
		case '?':
		default:
			usage();
		}
	argc -= optind;
	argv += optind;

	if (minlen == -1)
		minlen = DEF_LEN;
	else if (minlen < 1)
		errx(1, "length less than 1");
	if (maxlen != -1 && maxlen < minlen)
		errx(1, "max length less than min");
	bfrlen = maxlen == -1 ? minlen : maxlen;
	bfr = malloc(bfrlen + 1);
	if (!bfr)
		err(1, "malloc");
	bfr[bfrlen] = '\0';
	file = "stdin";
	do {
		if (*argv) {
			file = *argv++;
			if (!freopen(file, "r", stdin)) {
				warn("%s", file);
				exitcode = 1;
				goto nextfile;
			}
		}
		foff = 0;
#define DO_EVERYTHING()		{read_len = -1; head_len = 0; goto start;}
		read_len = -1;
		if (asdata)
			DO_EVERYTHING()
		else {
			head = (EXEC *)hbfr;
			if ((head_len =
			    read(fileno(stdin), head, sizeof(EXEC))) == -1)
				DO_EVERYTHING()
			if (head_len == sizeof(EXEC) && !N_BADMAG(*head)) {
				foff = N_TXTOFF(*head);
				if (fseek(stdin, foff, SEEK_SET) == -1)
					DO_EVERYTHING()
				read_len = head->a_text + head->a_data;
				head_len = 0;
			}
			else
				hcnt = 0;
		}
start:
		for (cnt = 0, C = bfr; (ch = getch()) != EOF;) {
			if (ISSTR(ch)) {
				*C++ = ch;
				if (++cnt < minlen)
					continue;
				if (maxlen != -1) {
					while ((ch = getch()) != EOF &&
					       ISSTR(ch) && cnt++ < maxlen)
						*C++ = ch;
					if (ch == EOF ||
					    (ch != 0 && ch != '\n')) {
						/* get all of too big string */
						while ((ch = getch()) != EOF &&
						       ISSTR(ch))
							;
						ungetc(ch, stdin);
						goto out;
					}
					*C = 0;
				}

				if (fflg)
					printf("%s:", file);

				if (offset_format) 
					printf(offset_format, foff - minlen);

				printf("%s", bfr);
				
				if (maxlen == -1)
					while ((ch = getch()) != EOF &&
					       ISSTR(ch))
						putchar((char)ch);
				putchar('\n');
			out:
				;
			}
			cnt = 0;
			C = bfr;
		}
nextfile: ;
	} while (*argv);
	exit(exitcode);
}

/*
 * getch --
 *	get next character from wherever
 */
int
getch(void)
{
	++foff;
	if (head_len) {
		if (hcnt < head_len)
			return((int)hbfr[hcnt++]);
		head_len = 0;
	}
	if (read_len == -1 || read_len-- > 0)
		return(getchar());
	return(EOF);
}

static void
usage(void)
{
	(void)fprintf(stderr,
	    "usage: strings [-afo] [-m number] [-n number] [-t radix] [file ...]\n");
	exit(1);
}
@


1.15
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: strings.c,v 1.14 2008/06/01 21:42:30 sobrado Exp $	*/
@


1.14
log
@sort flags; synchronize synopsis and usage.

ok jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: strings.c,v 1.13 2008/04/23 01:02:19 ray Exp $	*/
a31 13

#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1980, 1987, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)strings.c	8.2 (Berkeley) 1/28/94";
#endif
static char rcsid[] = "$OpenBSD: strings.c,v 1.13 2008/04/23 01:02:19 ray Exp $";
#endif /* not lint */
@


1.13
log
@Move code around to remove a warning.  Clarifies the code for both
humans and compilers!

Issue pointed out by Lawrence Teo.

OK millert.
@
text
@d1 1
a1 1
/*	$OpenBSD: strings.c,v 1.12 2003/10/02 05:10:03 mickey Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: strings.c,v 1.12 2003/10/02 05:10:03 mickey Exp $";
d265 1
a265 1
	    "usage: strings [-afo] [-n length] [-t {o,d,x}] [file ... ]\n");
@


1.12
log
@use err/warn instead of fprintf/exit
@
text
@d1 1
a1 1
/*	$OpenBSD: strings.c,v 1.11 2003/06/10 22:20:52 deraadt Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: strings.c,v 1.11 2003/06/10 22:20:52 deraadt Exp $";
d198 1
a198 1
		for (cnt = 0; (ch = getch()) != EOF;) {
a199 2
				if (!cnt)
					C = bfr;
d236 1
@


1.11
log
@mostly ansi cleanup; pval ok
@
text
@d1 1
a1 1
/*	$OpenBSD: strings.c,v 1.10 2003/06/03 02:56:16 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: strings.c,v 1.10 2003/06/03 02:56:16 millert Exp $";
d57 1
d158 4
a161 8
	else if (minlen < 1) {
		(void)fprintf(stderr, "strings: length less than 1\n");
		exit (1);
	}
	if (maxlen != -1 && maxlen < minlen) {
		(void)fprintf(stderr, "strings: max length less than min\n");
		exit (1);
	}
d164 2
a165 4
	if (!bfr) {
		(void)fprintf(stderr, "strings: %s\n", strerror(errno));
		exit(1);
	}
d172 1
a172 2
				(void)fprintf(stderr,
				    "strings: %s: %s\n", file, strerror(errno));
@


1.10
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: strings.c,v 1.9 2002/12/08 16:50:07 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: strings.c,v 1.9 2002/12/08 16:50:07 millert Exp $";
d77 1
a77 3
main(argc, argv)
	int argc;
	char **argv;
d255 1
a255 1
getch()
d269 1
a269 1
usage()
@


1.9
log
@GNU semantics say that if optstring begins with '-' then
each non-option shall be treated as arguments to option '\1'.

BSD getopt match '-' in optstring with a '-' on the command line.
This is used to support deprecated options like "su -" that would
otherwise prevent the use of getopt().

Resolving this simply requires that the leading '-' be moved somewhere
else (I moved it to the end of optstring) since position within
optstring is not meaningful.
@
text
@d1 1
a1 1
/*	$OpenBSD: strings.c,v 1.8 2002/09/23 04:10:14 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d43 1
a43 1
static char rcsid[] = "$OpenBSD: strings.c,v 1.8 2002/09/23 04:10:14 millert Exp $";
@


1.8
log
@Add missing includes, breaks and semicolons to appease gcc3; David Krause
deraadt@@ OK
@
text
@d1 1
a1 1
/*	$OpenBSD: strings.c,v 1.7 2002/02/16 21:27:53 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: strings.c,v 1.7 2002/02/16 21:27:53 millert Exp $";
d106 1
a106 1
	while ((ch = getopt(argc, argv, "-0123456789an:m:oft:")) != -1)
@


1.7
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: strings.c,v 1.6 2001/11/19 19:02:16 mpech Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: strings.c,v 1.6 2001/11/19 19:02:16 mpech Exp $";
d247 1
@


1.6
log
@kill more registers

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: strings.c,v 1.5 2000/02/23 19:44:08 provos Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: strings.c,v 1.5 2000/02/23 19:44:08 provos Exp $";
d77 2
a78 2
static void usage __P((void));
int getch __P((void));
@


1.5
log
@new -m number parameter to specify a maximum length of strings to match,
ok millert@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: strings.c,v 1.4 1997/09/11 11:21:54 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: strings.c,v 1.4 1997/09/11 11:21:54 deraadt Exp $";
d87 2
a88 2
	register int ch, cnt;
	register u_char *C;
@


1.4
log
@cleanup -Wall
@
text
@d1 1
a1 1
/*	$OpenBSD: strings.c,v 1.3 1997/06/17 23:53:16 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: strings.c,v 1.3 1997/06/17 23:53:16 deraadt Exp $";
d90 1
a90 1
	int exitcode, minlen;
d105 2
a106 1
	while ((ch = getopt(argc, argv, "-0123456789an:oft:")) != -1)
d132 3
d167 7
a173 2

	if (!(bfr = malloc(minlen + 1))) {
d177 1
a177 1
	bfr[minlen] = '\0';
d217 15
d240 5
a244 3

				while ((ch = getch()) != EOF && ISSTR(ch))
					putchar((char)ch);
d246 1
@


1.3
log
@mem underflow
@
text
@d1 1
a1 1
/*	$OpenBSD: strings.c,v 1.2 1996/06/26 05:39:30 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: strings.c,v 1.2 1996/06/26 05:39:30 deraadt Exp $";
d77 2
a78 1
static void usage();
d80 1
d232 1
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: strings.c,v 1.7 1995/02/15 15:49:19 jtc Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: strings.c,v 1.7 1995/02/15 15:49:19 jtc Exp $";
d162 1
a162 1
	if (!(bfr = malloc(minlen))) {
@


1.1
log
@Initial revision
@
text
@d1 1
d47 1
a47 1
static char rcsid[] = "$NetBSD: strings.c,v 1.7 1995/02/15 15:49:19 jtc Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
