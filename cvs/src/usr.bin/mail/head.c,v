head	1.12;
access;
symbols
	OPENBSD_6_2:1.12.0.14
	OPENBSD_6_2_BASE:1.12
	OPENBSD_6_1:1.12.0.16
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.12
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.8
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.10
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.6
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.4
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.11.0.16
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.14
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.12
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.10
	OPENBSD_5_0:1.11.0.8
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.6
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.10.0.8
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.4
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.2
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.9.0.20
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.18
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.16
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.14
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.12
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.10
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.8
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.6
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.8.0.4
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.6.0.4
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_8:1.5.0.12
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.10
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.8
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.6
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.4
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2014.01.17.18.42.30;	author okan;	state Exp;
branches;
next	1.11;

1.11
date	2009.10.27.23.59.40;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2008.07.16.14.53.41;	author martynas;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.03.02.56.11;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.06.14.21.35.00;	author todd;	state Exp;
branches;
next	1.7;

1.7
date	2001.11.21.15.26.39;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.01.19.04.11.28;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.11.14.00.23.48;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.07.14.00.24.27;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.07.13.21.21.13;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.06.11.12.53.42;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.39;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.39;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.12
log
@ctype and other sign extension fixes.

with deraadt and millert, ok millert
@
text
@/*	$OpenBSD: head.c,v 1.11 2009/10/27 23:59:40 deraadt Exp $	*/
/*	$NetBSD: head.c,v 1.6 1996/12/28 07:11:03 tls Exp $	*/

/*
 * Copyright (c) 1980, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "rcv.h"
#include "extern.h"

/*
 * Mail -- a mail program
 *
 * Routines for processing and detecting headlines.
 */

/*
 * See if the passed line buffer is a mail header.
 * Return true if yes.  Note the extreme pains to
 * accommodate all funny formats.
 */
int
ishead(char *linebuf)
{
	char *cp;
	struct headline hl;
	char parbuf[BUFSIZ];

	cp = linebuf;
	if (*cp++ != 'F' || *cp++ != 'r' || *cp++ != 'o' || *cp++ != 'm' ||
	    *cp++ != ' ')
		return(0);
	parse(linebuf, &hl, parbuf);
	if (hl.l_from == NULL || hl.l_date == NULL) {
		fail(linebuf, "No from or date field");
		return(0);
	}
	if (!isdate(hl.l_date)) {
		fail(linebuf, "Date field not legal date");
		return(0);
	}
	/*
	 * I guess we got it!
	 */
	return(1);
}

/*ARGSUSED*/
void
fail(char *linebuf, char *reason)
{

	/*
	if (value("debug") == NULL)
		return;
	fprintf(stderr, "\"%s\"\nnot a header because %s\n", linebuf, reason);
	*/
}

/*
 * Split a headline into its useful components.
 * Copy the line into dynamic string space, then set
 * pointers into the copied line in the passed headline
 * structure.  Actually, it scans.
 */
void
parse(char *line, struct headline *hl, char *pbuf)
{
	char *cp, *sp;
	char word[LINESIZE];

	hl->l_from = NULL;
	hl->l_tty = NULL;
	hl->l_date = NULL;
	cp = line;
	sp = pbuf;
	/*
	 * Skip over "From" first.
	 */
	cp = nextword(cp, word);
	cp = nextword(cp, word);
	if (*word)
		hl->l_from = copyin(word, &sp);
	if (cp != NULL && strncmp(cp, "tty", 3) == 0) {
		cp = nextword(cp, word);
		hl->l_tty = copyin(word, &sp);
	}
	if (cp != NULL)
		hl->l_date = copyin(cp, &sp);
}

/*
 * Copy the string on the left into the string on the right
 * and bump the right (reference) string pointer by the length.
 * Thus, dynamically allocate space in the right string, copying
 * the left string into it.
 */
char *
copyin(char *src, char **space)
{
	char *cp, *top;

	top = cp = *space;
	while ((*cp++ = *src++) != '\0')
		;
	*space = cp;
	return(top);
}

/*
 * Test to see if the passed string is a ctime(3) generated
 * date string as documented in the manual.  The template
 * below is used as the criterion of correctness.
 * Also, we check for a possible trailing time zone using
 * the tmztype template.
 */

/*
 * 'A'	An upper case char
 * 'a'	A lower case char
 * ' '	A space
 * '0'	A digit
 * 'O'	A digit or space
 * 'p'	A punctuation char
 * 'P'	A punctuation char or space
 * ':'	A colon
 * 'N'	A new line
 */

/*
 * Yuck.  If the mail file is created by Sys V (Solaris),
 * there are no seconds in the time...
 */

/*
 * If the mail is created by another program such as imapd, it might
 * have timezone as <-|+>nnnn (-0800 for instance) at the end.
 */

static char *date_formats[] = {
	"Aaa Aaa O0 00:00:00 0000",	   /* Mon Jan 01 23:59:59 2001 */
	"Aaa Aaa O0 00:00:00 AAA 0000",	   /* Mon Jan 01 23:59:59 PST 2001 */
	"Aaa Aaa O0 00:00:00 0000 p0000",  /* Mon Jan 01 23:59:59 2001 -0800 */
	"Aaa Aaa O0 00:00 0000",	   /* Mon Jan 01 23:59 2001 */
	"Aaa Aaa O0 00:00 AAA 0000",	   /* Mon Jan 01 23:59 PST 2001 */
	"Aaa Aaa O0 00:00 0000 p0000",	   /* Mon Jan 01 23:59 2001 -0800 */
	""
};

int
isdate(char *date)
{
	int i;

	for(i = 0; *date_formats[i]; i++) {
		if (cmatch(date, date_formats[i]))
			return 1;
	}
	return 0;
}

/*
 * Match the given string (cp) against the given template (tp).
 * Return 1 if they match, 0 if they don't
 */
int
cmatch(char *cp, char *tp)
{

	while (*cp && *tp)
		switch (*tp++) {
		case 'a':
			if (!islower((unsigned char)*cp++))
				return(0);
			break;
		case 'A':
			if (!isupper((unsigned char)*cp++))
				return(0);
			break;
		case ' ':
			if (*cp++ != ' ')
				return(0);
			break;
		case '0':
			if (!isdigit((unsigned char)*cp++))
				return(0);
			break;
		case 'O':
			if (*cp != ' ' && !isdigit((unsigned char)*cp))
				return(0);
			cp++;
			break;
		case 'p':
			if (!ispunct((unsigned char)*cp++))
				return(0);
			break;
		case 'P':
			if (*cp != ' ' && !ispunct((unsigned char)*cp))
				return(0);
			cp++;
			break;
		case ':':
			if (*cp++ != ':')
				return(0);
			break;
		case 'N':
			if (*cp++ != '\n')
				return(0);
			break;
		}
	if (*cp || *tp)
		return(0);
	return(1);
}

/*
 * Collect a liberal (space, tab delimited) word into the word buffer
 * passed.  Also, return a pointer to the next word following that,
 * or NULL if none follow.
 */
char *
nextword(char *wp, char *wbuf)
{
	int c;

	if (wp == NULL) {
		*wbuf = 0;
		return(NULL);
	}
	while ((c = (unsigned char)*wp++) && c != ' ' && c != '\t') {
		*wbuf++ = c;
		if (c == '"') {
 			while ((c = (unsigned char)*wp++) && c != '"')
 				*wbuf++ = c;
 			if (c == '"')
 				*wbuf++ = c;
			else
				wp--;
 		}
	}
	*wbuf = '\0';
	for (; c == ' ' || c == '\t'; c = (unsigned char)*wp++)
		;
	if (c == 0)
		return(NULL);
	return(wp - 1);
}
@


1.11
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: head.c,v 1.10 2008/07/16 14:53:41 martynas Exp $	*/
d198 1
a198 1
			if (!islower(*cp++))
d202 1
a202 1
			if (!isupper(*cp++))
d210 1
a210 1
			if (!isdigit(*cp++))
d214 1
a214 1
			if (*cp != ' ' && !isdigit(*cp))
d219 1
a219 1
			if (!ispunct(*cp++))
d223 1
a223 1
			if (*cp != ' ' && !ispunct(*cp))
d255 1
a255 1
	while ((c = *wp++) && c != ' ' && c != '\t') {
d258 1
a258 1
 			while ((c = *wp++) && c != '"')
d267 1
a267 1
	for (; c == ' ' || c == '\t'; c = *wp++)
@


1.10
log
@- use strncmp/strncasecmp instead of comparing by character
- simplify istrlcpy, no need to check for isupper
- line[0] is redundant, because strcasecmp will take care of it
ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: head.c,v 1.9 2003/06/03 02:56:11 millert Exp $	*/
a31 8

#ifndef lint
#if 0
static const char sccsid[] = "@@(#)head.c	8.2 (Berkeley) 4/20/95";
#else
static const char rcsid[] = "$OpenBSD: head.c,v 1.9 2003/06/03 02:56:11 millert Exp $";
#endif
#endif /* not lint */
@


1.9
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: head.c,v 1.8 2002/06/14 21:35:00 todd Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: head.c,v 1.8 2002/06/14 21:35:00 todd Exp $";
d117 1
a117 1
	if (cp != NULL && cp[0] == 't' && cp[1] == 't' && cp[2] == 'y') {
@


1.8
log
@spelling; from Brian Poole <raj@@cerias.purdue.edu>
@
text
@d1 1
a1 1
/*	$OpenBSD: head.c,v 1.7 2001/11/21 15:26:39 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: head.c,v 1.7 2001/11/21 15:26:39 millert Exp $";
@


1.7
log
@o ANSIfy
o Style nits
o Use const to silent stupid -Wall warnings
o strnc{py,at} -> strlc{py,at}
o Use strpbrk() instead of homegrown anyof()
o Use NULL instead of #defines with 0 cast to a pointer
This still could use a proper audit
@
text
@d1 1
a1 1
/*	$OpenBSD: head.c,v 1.6 2001/01/19 04:11:28 millert Exp $	*/
d41 1
a41 1
static const char rcsid[] = "$OpenBSD: head.c,v 1.6 2001/01/19 04:11:28 millert Exp $";
d57 1
a57 1
 * accomodate all funny formats.
@


1.6
log
@More fixes from Don Beusee:
- edit and other interactive commands have no stdin (making the
  command completely broken).
- messages with "From " line having date format with -0800 type of timezone
  are not recognized correctly.
@
text
@d1 1
a1 1
/*	$OpenBSD: head.c,v 1.5 1997/11/14 00:23:48 millert Exp $	*/
d39 1
a39 1
static char sccsid[] = "@@(#)head.c	8.2 (Berkeley) 4/20/95";
d41 1
a41 1
static char rcsid[] = "$OpenBSD: head.c,v 1.5 1997/11/14 00:23:48 millert Exp $";
d60 1
a60 2
ishead(linebuf)
	char linebuf[];
d87 1
a87 2
fail(linebuf, reason)
	char linebuf[], reason[];
d104 1
a104 3
parse(line, hl, pbuf)
	char line[], pbuf[];
	struct headline *hl;
d136 1
a136 3
copyin(src, space)
	char *src;
	char **space;
d188 1
a188 2
isdate(date)
	char date[];
d204 1
a204 2
cmatch(cp, tp)
	char *cp, *tp;
d259 1
a259 2
nextword(wp, wbuf)
	char *wp, *wbuf;
@


1.5
log
@NetBSD changes (mostly comsmetic):
    replace panic() with calls to err()/errx()
    use S_IS* instead of doing by hand with S_IF*.
    Use TIMESPEC_TO_TIMEVAL() and gettimeofday instead of time(2)
    Use _POSIX_VDISABLE, not 0
    Kill register
@
text
@d1 1
a1 1
/*	$OpenBSD: head.c,v 1.4 1997/07/14 00:24:27 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: head.c,v 1.4 1997/07/14 00:24:27 millert Exp $";
d166 3
a168 1
 * 'O'	An optional digit or space
d172 1
a172 2
char ctype[] = "Aaa Aaa O0 00:00:00 0000";
char tmztype[] = "Aaa Aaa O0 00:00:00 AAA 0000";
d177 15
a191 2
char SysV_ctype[] = "Aaa Aaa O0 00:00 0000";
char SysV_tmztype[] = "Aaa Aaa O0 00:00 AAA 0000";
d197 1
d199 5
a203 2
	return(cmatch(date, ctype) || cmatch(date, tmztype)
	    || cmatch(date, SysV_tmztype) || cmatch(date, SysV_ctype));
d235 9
@


1.4
log
@NOSTR -> NULL
Use sigsetjmp/siglongjmp instead of sigjmp/longjmp for portability.
@
text
@d1 1
a1 1
/*	$OpenBSD: head.c,v 1.3 1997/07/13 21:21:13 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: head.c,v 1.3 1997/07/13 21:21:13 millert Exp $";
d63 1
a63 1
	register char *cp;
d108 1
a108 1
	register struct headline *hl;
d110 1
a110 2
	register char *cp;
	char *sp;
d141 1
a141 1
	register char *src;
d144 1
a144 2
	register char *cp;
	char *top;
d194 1
a194 1
	register char *cp, *tp;
d241 1
a241 1
	register char *wp, *wbuf;
d243 1
a243 1
	register c;
@


1.3
log
@Merge in NetBSD and 4.4BSD-lite2 changes as well as some of my own.
 - handle long lines safely (from NetBSD)
 - use puts/fputs and putchar/putc when it makes sense
 - use err/errx and warn/warnx when it makes sense
 - make return() and sizeof() style consisten
 - some more buffer safety
@
text
@d1 1
a1 1
/*	$OpenBSD: head.c,v 1.2 1996/06/11 12:53:42 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: head.c,v 1.2 1996/06/11 12:53:42 deraadt Exp $";
d72 1
a72 1
	if (hl.l_from == NOSTR || hl.l_date == NOSTR) {
d93 1
a93 1
	if (value("debug") == NOSTR)
d114 3
a116 3
	hl->l_from = NOSTR;
	hl->l_tty = NOSTR;
	hl->l_date = NOSTR;
d126 1
a126 1
	if (cp != NOSTR && cp[0] == 't' && cp[1] == 't' && cp[2] == 'y') {
d130 1
a130 1
	if (cp != NOSTR)
d239 1
a239 1
 * or NOSTR if none follow.
d247 1
a247 1
	if (wp == NOSTR) {
d249 1
a249 1
		return(NOSTR);
d266 1
a266 1
		return(NOSTR);
@


1.2
log
@from christos;
- Fix PR/105: Implement dot locking protocol and check return value of flock.
- Fix PR/2247: Don't call unknown users "ubluit". Issue an error message.
- Fix/add prototypes.
- Fix warnings.
- Use POSIX signal mask calls.
@
text
@d1 2
a2 2
/*	$OpenBSD: head.c,v 1.5 1996/06/08 19:48:26 christos Exp $	*/
/*	$NetBSD: head.c,v 1.5 1996/06/08 19:48:26 christos Exp $	*/
d39 1
a39 1
static char sccsid[] = "@@(#)head.c	8.1 (Berkeley) 6/6/93";
d41 1
a41 1
static char rcsid[] = "$OpenBSD: head.c,v 1.5 1996/06/08 19:48:26 christos Exp $";
d70 1
a70 1
		return (0);
d74 1
a74 1
		return (0);
d78 1
a78 1
		return (0);
d83 1
a83 1
	return (1);
d152 1
a152 1
	return (top);
a172 1
char ctype_without_secs[] = "Aaa Aaa O0 00:00 0000";
d174 6
a179 1
char tmztype_without_secs[] = "Aaa Aaa O0 00:00 AAA 0000";
d186 2
a187 3
	return cmatch(date, ctype_without_secs) || 
	       cmatch(date, tmztype_without_secs) || 
	       cmatch(date, ctype) || cmatch(date, tmztype);
d203 1
a203 1
				return 0;
d207 1
a207 1
				return 0;
d211 1
a211 1
				return 0;
d215 1
a215 1
				return 0;
d219 1
a219 1
				return 0;
d224 1
a224 1
				return 0;
d228 1
a228 1
				return 0;
d232 2
a233 2
		return 0;
	return (1);
d249 1
a249 1
		return (NOSTR);
d266 2
a267 2
		return (NOSTR);
	return (wp - 1);
@


1.1
log
@Initial revision
@
text
@d1 3
d38 5
a42 2
static char sccsid[] = "from: @@(#)head.c	8.1 (Berkeley) 6/6/93";
static char rcsid[] = "$Id: head.c,v 1.4 1994/12/18 23:33:48 glass Exp $";
d149 1
a149 1
	while (*cp++ = *src++)
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
