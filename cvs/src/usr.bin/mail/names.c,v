head	1.23;
access;
symbols
	OPENBSD_6_2_BASE:1.23
	OPENBSD_6_1:1.23.0.8
	OPENBSD_6_1_BASE:1.23
	OPENBSD_6_0:1.23.0.4
	OPENBSD_6_0_BASE:1.23
	OPENBSD_5_9:1.23.0.2
	OPENBSD_5_9_BASE:1.23
	OPENBSD_5_8:1.22.0.6
	OPENBSD_5_8_BASE:1.22
	OPENBSD_5_7:1.22.0.2
	OPENBSD_5_7_BASE:1.22
	OPENBSD_5_6:1.19.0.8
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.19.0.6
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.19.0.2
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.18.0.14
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.12
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.10
	OPENBSD_5_0:1.18.0.8
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.18.0.6
	OPENBSD_4_9_BASE:1.18
	OPENBSD_4_8:1.18.0.4
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.18.0.2
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.17.0.28
	OPENBSD_4_6_BASE:1.17
	OPENBSD_4_5:1.17.0.24
	OPENBSD_4_5_BASE:1.17
	OPENBSD_4_4:1.17.0.22
	OPENBSD_4_4_BASE:1.17
	OPENBSD_4_3:1.17.0.20
	OPENBSD_4_3_BASE:1.17
	OPENBSD_4_2:1.17.0.18
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.17.0.16
	OPENBSD_4_1_BASE:1.17
	OPENBSD_4_0:1.17.0.14
	OPENBSD_4_0_BASE:1.17
	OPENBSD_3_9:1.17.0.12
	OPENBSD_3_9_BASE:1.17
	OPENBSD_3_8:1.17.0.10
	OPENBSD_3_8_BASE:1.17
	OPENBSD_3_7:1.17.0.8
	OPENBSD_3_7_BASE:1.17
	OPENBSD_3_6:1.17.0.6
	OPENBSD_3_6_BASE:1.17
	OPENBSD_3_5:1.17.0.4
	OPENBSD_3_5_BASE:1.17
	OPENBSD_3_4:1.17.0.2
	OPENBSD_3_4_BASE:1.17
	OPENBSD_3_3:1.16.0.6
	OPENBSD_3_3_BASE:1.16
	OPENBSD_3_2:1.16.0.4
	OPENBSD_3_2_BASE:1.16
	OPENBSD_3_1:1.16.0.2
	OPENBSD_3_1_BASE:1.16
	OPENBSD_3_0:1.13.0.4
	OPENBSD_3_0_BASE:1.13
	OPENBSD_2_9_BASE:1.13
	OPENBSD_2_9:1.13.0.2
	OPENBSD_2_8:1.12.0.2
	OPENBSD_2_8_BASE:1.12
	OPENBSD_2_7:1.10.0.2
	OPENBSD_2_7_BASE:1.10
	OPENBSD_2_6:1.9.0.8
	OPENBSD_2_6_BASE:1.9
	OPENBSD_2_5:1.9.0.6
	OPENBSD_2_5_BASE:1.9
	OPENBSD_2_4:1.9.0.4
	OPENBSD_2_4_BASE:1.9
	OPENBSD_2_3:1.9.0.2
	OPENBSD_2_3_BASE:1.9
	OPENBSD_2_2:1.8.0.2
	OPENBSD_2_2_BASE:1.8
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.23
date	2015.10.16.17.56.07;	author mmcc;	state Exp;
branches;
next	1.22;
commitid	y3aqfd1wS5RZj9kl;

1.22
date	2015.01.20.16.59.07;	author millert;	state Exp;
branches;
next	1.21;
commitid	92usC3cTTCZG2qZC;

1.21
date	2014.12.16.18.36.46;	author millert;	state Exp;
branches;
next	1.20;
commitid	YJbiA6o8hIfC4l8p;

1.20
date	2014.08.15.03.51.40;	author guenther;	state Exp;
branches;
next	1.19;
commitid	ILfd29dGeQRUYnTr;

1.19
date	2013.04.29.00.28.23;	author okan;	state Exp;
branches;
next	1.18;

1.18
date	2009.10.27.23.59.40;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2003.06.03.02.56.11;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2001.11.21.20.41.55;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2001.11.21.18.43.27;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2001.11.21.15.26.39;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2001.01.16.05.36.08;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2000.08.23.21.24.08;	author mickey;	state Exp;
branches;
next	1.11;

1.11
date	2000.06.30.16.00.16;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2000.03.23.19.32.13;	author millert;	state Exp;
branches
	1.10.2.1;
next	1.9;

1.9
date	97.11.14.00.23.53;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	97.07.31.02.48.14;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	97.07.24.17.27.12;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	97.07.14.00.24.29;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.07.13.23.54.01;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.07.13.21.21.15;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.01.17.07.12.50;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.06.11.12.53.45;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.39;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.39;	author deraadt;	state Exp;
branches;
next	;

1.10.2.1
date	2000.10.06.21.16.14;	author jason;	state Exp;
branches;
next	;


desc
@@


1.23
log
@Modernize allocation by:

 * removing unneeded casts of void* return values
 * replacing varied and creative error messages with the allocation
   function's name
 * replacing errx() with err() so that the errno string is reported

ok beck@@, jung@@, millert@@
@
text
@/*	$OpenBSD: names.c,v 1.22 2015/01/20 16:59:07 millert Exp $	*/
/*	$NetBSD: names.c,v 1.5 1996/06/08 19:48:32 christos Exp $	*/

/*
 * Copyright (c) 1980, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Mail -- a mail program
 *
 * Handle name lists.
 */

#include "rcv.h"
#include <fcntl.h>
#include "extern.h"

/*
 * Allocate a single element of a name list,
 * initialize its name field to the passed
 * name and return it.
 */
struct name *
nalloc(char *str, int ntype)
{
	struct name *np;

	np = (struct name *)salloc(sizeof(*np));
	np->n_flink = NULL;
	np->n_blink = NULL;
	np->n_type = ntype;
	np->n_name = savestr(str);
	return(np);
}

/*
 * Find the tail of a list and return it.
 */
struct name *
tailof(struct name *name)
{
	struct name *np;

	np = name;
	if (np == NULL)
		return(NULL);
	while (np->n_flink != NULL)
		np = np->n_flink;
	return(np);
}

/*
 * Extract a list of names from a line,
 * and make a list of names from it.
 * Return the list or NULL if none found.
 */
struct name *
extract(char *line, int ntype)
{
	char *cp;
	struct name *top, *np, *t;
	char *nbuf;

	if (line == NULL || *line == '\0')
		return(NULL);
	if ((nbuf = malloc(strlen(line) + 1)) == NULL)
		err(1, "malloc");
	top = NULL;
	np = NULL;
	cp = line;
	while ((cp = yankword(cp, nbuf)) != NULL) {
		t = nalloc(nbuf, ntype);
		if (top == NULL)
			top = t;
		else
			np->n_flink = t;
		t->n_blink = np;
		np = t;
	}
	(void)free(nbuf);
	return(top);
}

/*
 * Turn a list of names into a string of the same names.
 */
char *
detract(struct name *np, int ntype)
{
	int s, comma;
	char *cp, *top;
	struct name *p;

	comma = ntype & GCOMMA;
	if (np == NULL)
		return(NULL);
	ntype &= ~GCOMMA;
	s = 0;
	if (debug && comma)
		fputs("detract asked to insert commas\n", stderr);
	for (p = np; p != NULL; p = p->n_flink) {
		if (ntype && (p->n_type & GMASK) != ntype)
			continue;
		s += strlen(p->n_name) + 1;
		if (comma)
			s++;
	}
	if (s == 0)
		return(NULL);
	s += 2;
	top = salloc(s);
	cp = top;
	for (p = np; p != NULL; p = p->n_flink) {
		if (ntype && (p->n_type & GMASK) != ntype)
			continue;
		cp = copy(p->n_name, cp);
		if (comma && p->n_flink != NULL)
			*cp++ = ',';
		*cp++ = ' ';
	}
	*--cp = 0;
	if (comma && *--cp == ',')
		*cp = 0;
	return(top);
}

/*
 * Grab a single word (liberal word)
 * Throw away things between ()'s, and take anything between <>.
 */
char *
yankword(char *ap, char *wbuf)
{
	char *cp, *cp2;

	cp = ap;
	for (;;) {
		if (*cp == '\0')
			return(NULL);
		if (*cp == '(') {
			int nesting = 0;

			while (*cp != '\0') {
				switch (*cp++) {
				case '(':
					nesting++;
					break;
				case ')':
					--nesting;
					break;
				}
				if (nesting <= 0)
					break;
			}
		} else if (*cp == ' ' || *cp == '\t' || *cp == ',')
			cp++;
		else
			break;
	}
	if (*cp ==  '<')
		for (cp2 = wbuf; *cp && (*cp2++ = *cp++) != '>';)
			;
	else
		for (cp2 = wbuf; *cp && !strchr(" \t,(", *cp); *cp2++ = *cp++)
			;
	*cp2 = '\0';
	return(cp);
}

/*
 * For each recipient in the passed name list with a /
 * in the name, append the message to the end of the named file
 * and remove him from the recipient list.
 *
 * Recipients whose name begins with | are piped through the given
 * program and removed.
 */
struct name *
outof(struct name *names, FILE *fo, struct header *hp)
{
	int c, ispipe;
	struct name *np, *top;
	time_t now;
	char *date, *fname;
	FILE *fout, *fin;

	if (value("expandaddr") == NULL)
		return(names);

	top = names;
	np = names;
	(void)time(&now);
	date = ctime(&now);
	while (np != NULL) {
		if (!isfileaddr(np->n_name) && np->n_name[0] != '|') {
			np = np->n_flink;
			continue;
		}
		ispipe = np->n_name[0] == '|';
		if (ispipe)
			fname = np->n_name+1;
		else
			fname = expand(np->n_name);

		/*
		 * See if we have copied the complete message out yet.
		 * If not, do so.
		 */
		if (image < 0) {
			int fd;
			char tempname[PATHSIZE];

			(void)snprintf(tempname, sizeof(tempname),
			    "%s/mail.ReXXXXXXXXXX", tmpdir);
			if ((fd = mkstemp(tempname)) == -1 ||
			    (fout = Fdopen(fd, "a")) == NULL) {
				warn("%s", tempname);
				senderr++;
				goto cant;
			}
			image = open(tempname, O_RDWR | O_CLOEXEC);
			(void)rm(tempname);
			if (image < 0) {
				warn("%s", tempname);
				senderr++;
				(void)Fclose(fout);
				goto cant;
			}
			fprintf(fout, "From %s %s", myname, date);
			puthead(hp, fout, GTO|GSUBJECT|GCC|GNL);
			while ((c = getc(fo)) != EOF)
				(void)putc(c, fout);
			rewind(fo);
			(void)putc('\n', fout);
			(void)fflush(fout);
			if (ferror(fout))
				warn("%s", tempname);
			(void)Fclose(fout);
		}

		/*
		 * Now either copy "image" to the desired file
		 * or give it as the standard input to the desired
		 * program as appropriate.
		 */
		if (ispipe) {
			pid_t pid;
			char *shell;
			sigset_t nset;

			/*
			 * XXX
			 * We can't really reuse the same image file,
			 * because multiple piped recipients will
			 * share the same lseek location and trample
			 * on one another.
			 */
			shell = value("SHELL");
			sigemptyset(&nset);
			sigaddset(&nset, SIGHUP);
			sigaddset(&nset, SIGINT);
			sigaddset(&nset, SIGQUIT);
			pid = start_command(shell, &nset,
				image, -1, "-c", fname, NULL);
			if (pid < 0) {
				senderr++;
				goto cant;
			}
			free_child(pid);
		} else {
			int f;
			if ((fout = Fopen(fname, "a")) == NULL) {
				warn("%s", fname);
				senderr++;
				goto cant;
			}
			if ((f = dup(image)) < 0) {
				warn("dup");
				fin = NULL;
			} else
				fin = Fdopen(f, "r");
			if (fin == NULL) {
				fputs("Can't reopen image\n", stderr);
				(void)Fclose(fout);
				senderr++;
				goto cant;
			}
			rewind(fin);
			while ((c = getc(fin)) != EOF)
				(void)putc(c, fout);
			if (ferror(fout)) {
				senderr++;
				warn("%s", fname);
			}
			(void)Fclose(fout);
			(void)Fclose(fin);
		}
cant:
		/*
		 * In days of old we removed the entry from the
		 * the list; now for sake of header expansion
		 * we leave it in and mark it as deleted.
		 */
		np->n_type |= GDEL;
		np = np->n_flink;
	}
	if (image >= 0) {
		(void)close(image);
		image = -1;
	}
	return(top);
}

/*
 * Determine if the passed address is a local "send to file" address.
 * If any of the network metacharacters precedes any slashes, it can't
 * be a filename.  We cheat with .'s to allow path names like ./...
 */
int
isfileaddr(char *name)
{
	char *cp;

	if (*name == '+')
		return(1);
	for (cp = name; *cp; cp++) {
		if (*cp == '!' || *cp == '%' || *cp == '@@')
			return(0);
		if (*cp == '/')
			return(1);
	}
	return(0);
}

/*
 * Map all of the aliased users in the invoker's mailrc
 * file and insert them into the list.
 * Changed after all these months of service to recursively
 * expand names (2/14/80).
 */
struct name *
usermap(struct name *names)
{
	struct name *new, *np, *cp;
	struct grouphead *gh;
	int metoo;

	new = NULL;
	np = names;
	metoo = (value("metoo") != NULL);
	while (np != NULL) {
		if (np->n_name[0] == '\\') {
			cp = np->n_flink;
			new = put(new, np);
			np = cp;
			continue;
		}
		gh = findgroup(np->n_name);
		cp = np->n_flink;
		if (gh != NULL)
			new = gexpand(new, gh, metoo, np->n_type);
		else
			new = put(new, np);
		np = cp;
	}
	return(new);
}

/*
 * Recursively expand a group name.  We limit the expansion to some
 * fixed level to keep things from going haywire.
 * Direct recursion is not expanded for convenience.
 */
struct name *
gexpand(struct name *nlist, struct grouphead *gh, int metoo, int ntype)
{
	struct group *gp;
	struct grouphead *ngh;
	struct name *np;
	static int depth;
	char *cp;

	if (depth > MAXEXP) {
		printf("Expanding alias to depth larger than %d\n", MAXEXP);
		return(nlist);
	}
	depth++;
	for (gp = gh->g_list; gp != NULL; gp = gp->ge_link) {
		cp = gp->ge_name;
		if (*cp == '\\')
			goto quote;
		if (strcmp(cp, gh->g_name) == 0)
			goto quote;
		if ((ngh = findgroup(cp)) != NULL) {
			nlist = gexpand(nlist, ngh, metoo, ntype);
			continue;
		}
quote:
		np = nalloc(cp, ntype);
		/*
		 * At this point should allow to expand
		 * to self if only person in group
		 */
		if (gp == gh->g_list && gp->ge_link == NULL)
			goto skip;
		if (!metoo && strcmp(cp, myname) == 0)
			np->n_type |= GDEL;
skip:
		nlist = put(nlist, np);
	}
	depth--;
	return(nlist);
}

/*
 * Concatenate the two passed name lists, return the result.
 */
struct name *
cat(struct name *n1, struct name *n2)
{
	struct name *tail;

	if (n1 == NULL)
		return(n2);
	if (n2 == NULL)
		return(n1);
	tail = tailof(n1);
	tail->n_flink = n2;
	n2->n_blink = tail;
	return(n1);
}

/*
 * Remove all of the duplicates from the passed name list by
 * insertion sorting them, then checking for dups.
 * Return the head of the new list.
 */
struct name *
elide(struct name *names)
{
	struct name *np, *t, *new;
	struct name *x;

	if (names == NULL)
		return(NULL);
	new = names;
	np = names;
	np = np->n_flink;
	if (np != NULL)
		np->n_blink = NULL;
	new->n_flink = NULL;
	while (np != NULL) {
		t = new;
		while (strcasecmp(t->n_name, np->n_name) < 0) {
			if (t->n_flink == NULL)
				break;
			t = t->n_flink;
		}

		/*
		 * If we ran out of t's, put the new entry after
		 * the current value of t.
		 */
		if (strcasecmp(t->n_name, np->n_name) < 0) {
			t->n_flink = np;
			np->n_blink = t;
			t = np;
			np = np->n_flink;
			t->n_flink = NULL;
			continue;
		}

		/*
		 * Otherwise, put the new entry in front of the
		 * current t.  If at the front of the list,
		 * the new guy becomes the new head of the list.
		 */
		if (t == new) {
			t = np;
			np = np->n_flink;
			t->n_flink = new;
			new->n_blink = t;
			t->n_blink = NULL;
			new = t;
			continue;
		}

		/*
		 * The normal case -- we are inserting into the
		 * middle of the list.
		 */
		x = np;
		np = np->n_flink;
		x->n_flink = t;
		x->n_blink = t->n_blink;
		t->n_blink->n_flink = x;
		t->n_blink = x;
	}

	/*
	 * Now the list headed up by new is sorted.
	 * Go through it and remove duplicates.
	 */
	np = new;
	while (np != NULL) {
		t = np;
		while (t->n_flink != NULL &&
		       strcasecmp(np->n_name, t->n_flink->n_name) == 0)
			t = t->n_flink;
		if (t == np || t == NULL) {
			np = np->n_flink;
			continue;
		}
		
		/*
		 * Now t points to the last entry with the same name
		 * as np.  Make np point beyond t.
		 */
		np->n_flink = t->n_flink;
		if (t->n_flink != NULL)
			t->n_flink->n_blink = np;
		np = np->n_flink;
	}
	return(new);
}

/*
 * Put another node onto a list of names and return
 * the list.
 */
struct name *
put(struct name *list, struct name *node)
{
	node->n_flink = list;
	node->n_blink = NULL;
	if (list != NULL)
		list->n_blink = node;
	return(node);
}

/*
 * Determine the number of undeleted elements in
 * a name list and return it.
 */
int
count(struct name *np)
{
	int c;

	for (c = 0; np != NULL; np = np->n_flink)
		if ((np->n_type & GDEL) == 0)
			c++;
	return(c);
}

/*
 * Delete the given name from a namelist.
 */
struct name *
delname(struct name *np, char *name)
{
	struct name *p;

	for (p = np; p != NULL; p = p->n_flink)
		if ((strcasecmp(p->n_name, name) == 0) ||
		    (value("allnet") &&
		    strncasecmp(p->n_name, name, strlen(name)) == 0 &&
		    *(p->n_name+strlen(name)) == '@@')) {
			if (p->n_blink == NULL) {
				if (p->n_flink != NULL)
					p->n_flink->n_blink = NULL;
				np = p->n_flink;
				continue;
			}
			if (p->n_flink == NULL) {
				if (p->n_blink != NULL)
					p->n_blink->n_flink = NULL;
				continue;
			}
			p->n_blink->n_flink = p->n_flink;
			p->n_flink->n_blink = p->n_blink;
		}
	return(np);
}

/*
 * Pretty print a name list
 * Uncomment it if you need it.
 */
#if 0
void
prettyprint(struct name *name)
{
	struct name *np;

	np = name;
	while (np != NULL) {
		fprintf(stderr, "%s(%d) ", np->n_name, np->n_type);
		np = np->n_flink;
	}
	putc('\n', stderr);
}
#endif
@


1.22
log
@Add support for the "-r fromaddr" flag now that we don't support
sendmail flags on the command line.
Also allow "from" to be set in mailrc.
Use sendmail's "-t" flag when executing sendmail instead of specifying
the list of recipients in argv.  The "-f" flag will be used to set
the from address if specified.
@
text
@d1 1
a1 1
/*	$OpenBSD: names.c,v 1.21 2014/12/16 18:36:46 millert Exp $	*/
d91 2
a92 2
	if ((nbuf = (char *)malloc(strlen(line) + 1)) == NULL)
		errx(1, "Out of memory");
@


1.21
log
@Add new "expandaddr" flag (disabled by default) to enable recipient
address expansion and document it.  Previously, this behavior was
always enabled.  Also document how address expansion is performed,
which used to only be described in the (no longer installed) Mail
Reference Manual.  CVE-2014-7844
@
text
@d1 1
a1 1
/*	$OpenBSD: names.c,v 1.20 2014/08/15 03:51:40 guenther Exp $	*/
a455 46
}

/*
 * Unpack the name list onto a vector of strings.
 * Return an error if the name list won't fit.
 */
char **
unpack(struct name *sm, struct name *np)
{
	char **ap, **top;
	int t, extra, metoo, verbose;

	if ((t = count(np)) == 0)
		errx(1, "No names to unpack");
	t += count(sm);

	/*
	 * Compute the number of extra arguments we will need.
	 * We need at least four extra -- one for "send-mail", one for the
	 * "-i" flag, one for the "--" to signal end of command line
	 * arguments, and one for the terminating 0 pointer.
	 */
	extra = 4;
	metoo = value("metoo") != NULL;
	if (metoo)
		extra++;
	verbose = value("verbose") != NULL;
	if (verbose)
		extra++;
	top = (char **)salloc((t + extra) * sizeof(*top));
	ap = top;
	*ap++ = "send-mail";
	*ap++ = "-i";
	if (metoo)
		*ap++ = "-m";
	if (verbose)
		*ap++ = "-v";
	for (; sm != NULL; sm = sm->n_flink)
		if ((sm->n_type & GDEL) == 0)
			*ap++ = sm->n_name;
	*ap++ = "--";
	for (; np != NULL; np = np->n_flink)
		if ((np->n_type & GDEL) == 0)
			*ap++ = np->n_name;
	*ap = NULL;
	return(top);
@


1.20
log
@Use O_CLOEXEC wherever we open a file and then call fcntl(F_SETFD, FD_CLOEXEC)
on it, simplifying error checking, reducing system calls, and improving
thread-safety for libraries.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: names.c,v 1.19 2013/04/29 00:28:23 okan Exp $	*/
d211 3
@


1.19
log
@use FD_CLOEXEC instead of 1; from David Hill

ok otto
@
text
@d1 1
a1 1
/*	$OpenBSD: names.c,v 1.18 2009/10/27 23:59:40 deraadt Exp $	*/
d243 1
a243 1
			image = open(tempname, O_RDWR);
a250 1
			(void)fcntl(image, F_SETFD, FD_CLOEXEC);
@


1.18
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: names.c,v 1.17 2003/06/03 02:56:11 millert Exp $	*/
d251 1
a251 1
			(void)fcntl(image, F_SETFD, 1);
@


1.17
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: names.c,v 1.16 2001/11/21 20:41:55 millert Exp $	*/
a31 8

#ifndef lint
#if 0
static const char sccsid[] = "@@(#)names.c	8.1 (Berkeley) 6/6/93";
#else
static const char rcsid[] = "$OpenBSD: names.c,v 1.16 2001/11/21 20:41:55 millert Exp $";
#endif
#endif /* not lint */
@


1.16
log
@o kill strcpy()
o check return values of malloc and friends
o use strdup() when sensible
@
text
@d1 1
a1 1
/*	$OpenBSD: names.c,v 1.15 2001/11/21 18:43:27 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: names.c,v 1.15 2001/11/21 18:43:27 millert Exp $";
@


1.15
log
@fix arg reversal that was introduced during ANSIfication
@
text
@d1 1
a1 1
/*	$OpenBSD: names.c,v 1.14 2001/11/21 15:26:39 millert Exp $	*/
d41 1
a41 1
static const char rcsid[] = "$OpenBSD: names.c,v 1.14 2001/11/21 15:26:39 millert Exp $";
d673 1
a673 2
prettyprint(name)
	struct name *name;
@


1.14
log
@o ANSIfy
o Style nits
o Use const to silent stupid -Wall warnings
o strnc{py,at} -> strlc{py,at}
o Use strpbrk() instead of homegrown anyof()
o Use NULL instead of #defines with 0 cast to a pointer
This still could use a proper audit
@
text
@d1 1
a1 1
/*	$OpenBSD: names.c,v 1.13 2001/01/16 05:36:08 millert Exp $	*/
d41 1
a41 1
static const char rcsid[] = "$OpenBSD: names.c,v 1.13 2001/01/16 05:36:08 millert Exp $";
d473 1
a473 1
unpack(struct name *np, struct name *sm)
@


1.13
log
@Changes from Don Beusee:
o escape From line with a leading '>' when needed
o only print To: address and Subject lines if actually present
o new variable 'allnet' to treat user@@foo and user@@bar as the same "user"
o folders command now takes an optional argument like ls.
o new "pipe" (|) command to pipe the message through an arbitrary command
o make header display format the same as SunOS 4.1.3 /usr/ucb/mail
o tilde commands work regardless of interactive mode.
o fix "read: Interrupted system call" error by retrying if EINTR
o expanded help file
Changes by me:
o read the help file via the PAGER as it is now more than 24 lines long
@
text
@d1 1
a1 1
/*	$OpenBSD: names.c,v 1.12 2000/08/23 21:24:08 mickey Exp $	*/
d39 1
a39 1
static char sccsid[] = "@@(#)names.c	8.1 (Berkeley) 6/6/93";
d41 1
a41 1
static char rcsid[] = "$OpenBSD: names.c,v 1.12 2000/08/23 21:24:08 mickey Exp $";
d61 1
a61 3
nalloc(str, ntype)
	char str[];
	int ntype;
d66 2
a67 2
	np->n_flink = NIL;
	np->n_blink = NIL;
d77 1
a77 2
tailof(name)
	struct name *name;
d82 3
a84 3
	if (np == NIL)
		return(NIL);
	while (np->n_flink != NIL)
d92 1
a92 1
 * Return the list or NIL if none found.
d95 1
a95 3
extract(line, ntype)
	char line[];
	int ntype;
d102 1
a102 1
		return(NIL);
d105 2
a106 2
	top = NIL;
	np = NIL;
d110 1
a110 1
		if (top == NIL)
d125 1
a125 3
detract(np, ntype)
	struct name *np;
	int ntype;
d132 1
a132 1
	if (np == NIL)
d138 1
a138 1
	for (p = np; p != NIL; p = p->n_flink) {
d150 1
a150 1
	for (p = np; p != NIL; p = p->n_flink) {
d154 1
a154 1
		if (comma && p->n_flink != NIL)
d169 1
a169 2
yankword(ap, wbuf)
	char *ap, wbuf[];
d216 1
a216 4
outof(names, fo, hp)
	struct name *names;
	FILE *fo;
	struct header *hp;
d228 1
a228 1
	while (np != NIL) {
a242 1

a280 1

d282 1
a282 1
			int pid;
d355 1
a355 2
isfileaddr(name)
	char *name;
a375 1

d377 1
a377 2
usermap(names)
	struct name *names;
d383 1
a383 1
	new = NIL;
d386 1
a386 1
	while (np != NIL) {
d395 1
a395 1
		if (gh != NOGRP)
a408 1

d410 1
a410 4
gexpand(nlist, gh, metoo, ntype)
	struct name *nlist;
	struct grouphead *gh;
	int metoo, ntype;
d423 1
a423 1
	for (gp = gh->g_list; gp != NOGE; gp = gp->ge_link) {
d429 1
a429 1
		if ((ngh = findgroup(cp)) != NOGRP) {
d439 1
a439 1
		if (gp == gh->g_list && gp->ge_link == NOGE)
d454 1
a454 2
cat(n1, n2)
	struct name *n1, *n2;
d458 1
a458 1
	if (n1 == NIL)
d460 1
a460 1
	if (n2 == NIL)
d473 1
a473 2
unpack(sm, np)
	struct name *np, *sm;
d503 1
a503 1
	for (; sm != NIL; sm = sm->n_flink)
d507 1
a507 1
	for (; np != NIL; np = np->n_flink)
d520 1
a520 2
elide(names)
	struct name *names;
d525 2
a526 2
	if (names == NIL)
		return(NIL);
d530 4
a533 4
	if (np != NIL)
		np->n_blink = NIL;
	new->n_flink = NIL;
	while (np != NIL) {
d536 1
a536 1
			if (t->n_flink == NIL)
a544 1

d550 1
a550 1
			t->n_flink = NIL;
a558 1

d564 1
a564 1
			t->n_blink = NIL;
a572 1

a584 1

d586 1
a586 1
	while (np != NIL) {
d588 1
a588 1
		while (t->n_flink != NIL &&
d591 1
a591 1
		if (t == np || t == NIL) {
a599 1

d601 1
a601 1
		if (t->n_flink != NIL)
d613 1
a613 2
put(list, node)
	struct name *list, *node;
d616 2
a617 2
	node->n_blink = NIL;
	if (list != NIL)
d627 1
a627 2
count(np)
	struct name *np;
d631 1
a631 1
	for (c = 0; np != NIL; np = np->n_flink)
d641 1
a641 3
delname(np, name)
	struct name *np;
	char name[];
d645 1
a645 1
	for (p = np; p != NIL; p = p->n_flink)
d650 3
a652 3
			if (p->n_blink == NIL) {
				if (p->n_flink != NIL)
					p->n_flink->n_blink = NIL;
d656 3
a658 3
			if (p->n_flink == NIL) {
				if (p->n_blink != NIL)
					p->n_blink->n_flink = NIL;
d671 1
a671 2

/*
d679 1
a679 1
	while (np != NIL) {
d685 1
a685 1
*/
@


1.12
log
@repair sendmail options handling
@
text
@d1 1
a1 1
/*	$OpenBSD: names.c,v 1.11 2000/06/30 16:00:16 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: names.c,v 1.11 2000/06/30 16:00:16 millert Exp $";
d306 1
a306 2
			if ((shell = value("SHELL")) == NULL)
				shell = _PATH_CSHELL;
d678 4
a681 1
		if (strcasecmp(p->n_name, name) == 0) {
@


1.11
log
@warnx?/errx? paranoia (use "%s" not a bare string unless it is a
constant).  These are not security holes but it is worth fixing
them anyway both for robustness and so folks looking for examples
in the tree are not misled into doing something potentially dangerous.
Furthermore, it is a bad idea to assume that pathnames will not
include '%' in them and that error routines don't return strings
with '%' in them (especially in light of the possibility of locales).
@
text
@d1 1
a1 1
/*	$OpenBSD: names.c,v 1.10 2000/03/23 19:32:13 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: names.c,v 1.10 2000/03/23 19:32:13 millert Exp $";
d495 2
a496 2
unpack(np)
	struct name *np;
a498 1
	struct name *n;
d501 1
a501 2
	n = np;
	if ((t = count(n)) == 0)
d503 2
d526 3
d530 3
a532 3
	for (; n != NIL; n = n->n_flink)
		if ((n->n_type & GDEL) == 0)
			*ap++ = n->n_name;
@


1.10
log
@When calling sendmail, use "--" to indicate end of command line arguments.
This prevents someone from sneaking arbitrary args to sendmail via
the Reply-To: or From: lines.
@
text
@d1 1
a1 1
/*	$OpenBSD: names.c,v 1.9 1997/11/14 00:23:53 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: names.c,v 1.9 1997/11/14 00:23:53 millert Exp $";
d263 1
a263 1
				warn(tempname);
d270 1
a270 1
				warn(tempname);
d284 1
a284 1
				warn(tempname);
d322 1
a322 1
				warn(fname);
d342 1
a342 1
				warn(fname);
@


1.10.2.1
log
@Pull in patch from current (even more to come):
Fix (millert):
warnx?/errx? paranoia (use "%s" not a bare string unless it is a
constant).  These are not security holes but it is worth fixing
them anyway both for robustness and so folks looking for examples
in the tree are not misled into doing something potentially dangerous.
Furthermore, it is a bad idea to assume that pathnames will not
include '%' in them and that error routines don't return strings
with '%' in them (especially in light of the possibility of locales).
@
text
@d1 1
a1 1
/*	$OpenBSD: names.c,v 1.11 2000/06/30 16:00:16 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: names.c,v 1.11 2000/06/30 16:00:16 millert Exp $";
d263 1
a263 1
				warn("%s", tempname);
d270 1
a270 1
				warn("%s", tempname);
d284 1
a284 1
				warn("%s", tempname);
d322 1
a322 1
				warn("%s", fname);
d342 1
a342 1
				warn("%s", fname);
@


1.9
log
@NetBSD changes (mostly comsmetic):
    replace panic() with calls to err()/errx()
    use S_IS* instead of doing by hand with S_IF*.
    Use TIMESPEC_TO_TIMEVAL() and gettimeofday instead of time(2)
    Use _POSIX_VDISABLE, not 0
    Kill register
@
text
@d1 1
a1 1
/*	$OpenBSD: names.c,v 1.8 1997/07/31 02:48:14 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: names.c,v 1.8 1997/07/31 02:48:14 millert Exp $";
d507 3
a509 3
	 * We need at least two extra -- one for "mail" and one for
	 * the terminating 0 pointer.  Additional spots may be needed
	 * to pass along -f to the host mailer.
d511 1
a511 2
	extra = 2;
	extra++;
d526 1
@


1.8
log
@Another static buffer bytes the dust.
@
text
@d1 1
a1 1
/*	$OpenBSD: names.c,v 1.7 1997/07/24 17:27:12 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: names.c,v 1.7 1997/07/24 17:27:12 millert Exp $";
d65 1
a65 1
	register struct name *np;
d82 1
a82 1
	register struct name *np;
d102 2
a103 2
	register char *cp;
	register struct name *top, *np, *t;
d109 1
a109 1
		panic("Out of memory");
d131 1
a131 1
	register struct name *np;
d134 3
a136 4
	register int s;
	register char *cp, *top;
	register struct name *p;
	register int comma;
d179 1
a179 1
	register char *cp, *cp2;
d186 1
a186 1
			register int nesting = 0;
d229 2
a230 2
	register int c;
	register struct name *np, *top;
a233 1
	int ispipe;
d372 1
a372 1
	register char *cp;
d396 1
a396 1
	register struct name *new, *np, *cp;
d398 1
a398 1
	register int metoo;
d478 1
a478 1
	register struct name *tail;
d498 2
a499 2
	register char **ap, **top;
	register struct name *n;
d504 1
a504 1
		panic("No names to unpack");
d543 1
a543 1
	register struct name *np, *t, *new;
d655 1
a655 1
	register struct name *np;
d657 1
a657 1
	register int c;
d670 1
a670 1
	register struct name *np;
d673 1
a673 1
	register struct name *p;
d704 1
a704 1
	register struct name *np;
@


1.7
log
@tempnam(3) goes bye bye.
@
text
@d1 1
a1 1
/*	$OpenBSD: names.c,v 1.6 1997/07/14 00:24:29 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: names.c,v 1.6 1997/07/14 00:24:29 millert Exp $";
d104 1
a104 1
	char nbuf[BUFSIZ];
d108 2
d122 1
@


1.6
log
@NOSTR -> NULL
Use sigsetjmp/siglongjmp instead of sigjmp/longjmp for portability.
@
text
@d1 1
a1 1
/*	$OpenBSD: names.c,v 1.5 1997/07/13 23:54:01 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: names.c,v 1.5 1997/07/13 23:54:01 millert Exp $";
a232 1
	extern char *tempEdit;
d255 8
a262 2
			if ((fout = Fopen(tempEdit, "a")) == NULL) {
				warn(tempEdit);
d266 2
a267 2
			image = open(tempEdit, 2);
			(void)unlink(tempEdit);
d269 1
a269 1
				warn(tempEdit);
d283 1
a283 1
				warn(tempEdit);
@


1.5
log
@bcopy() -> memcpy() and fix some casts.
@
text
@d1 1
a1 1
/*	$OpenBSD: names.c,v 1.4 1997/07/13 21:21:15 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: names.c,v 1.4 1997/07/13 21:21:15 millert Exp $";
d106 1
a106 1
	if (line == NOSTR || *line == '\0')
d111 1
a111 1
	while ((cp = yankword(cp, nbuf)) != NOSTR) {
d138 1
a138 1
		return(NOSTR);
d151 1
a151 1
		return(NOSTR);
d182 1
a182 1
			return(NOSTR);
d300 1
a300 1
			if ((shell = value("SHELL")) == NOSTR)
d307 1
a307 1
				image, -1, "-c", fname, NOSTR);
d396 1
a396 1
	metoo = (value("metoo") != NOSTR);
d507 1
a507 1
	metoo = value("metoo") != NOSTR;
d510 1
a510 1
	verbose = value("verbose") != NOSTR;
d524 1
a524 1
	*ap = NOSTR;
@


1.4
log
@Merge in NetBSD and 4.4BSD-lite2 changes as well as some of my own.
 - handle long lines safely (from NetBSD)
 - use puts/fputs and putchar/putc when it makes sense
 - use err/errx and warn/warnx when it makes sense
 - make return() and sizeof() style consisten
 - some more buffer safety
@
text
@d1 1
a1 1
/*	$OpenBSD: names.c,v 1.3 1997/01/17 07:12:50 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: names.c,v 1.3 1997/01/17 07:12:50 millert Exp $";
d67 1
a67 1
	np = (struct name *) salloc(sizeof(*np));
d237 1
a237 1
	(void) time(&now);
d262 1
a262 1
			(void) unlink(tempEdit);
d269 1
a269 1
			(void) fcntl(image, F_SETFD, 1);
d273 1
a273 1
				(void) putc(c, fout);
d275 2
a276 2
			(void) putc('\n', fout);
			(void) fflush(fout);
d333 1
a333 1
				(void) putc(c, fout);
d513 1
a513 1
	top = (char **) salloc((t + extra) * sizeof(*top));
@


1.3
log
@r?index -> strr?chr
@
text
@d1 1
a1 1
/*	$OpenBSD: names.c,v 1.2 1996/06/11 12:53:45 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: names.c,v 1.2 1996/06/11 12:53:45 deraadt Exp $";
d67 1
a67 1
	np = (struct name *) salloc(sizeof *np);
d107 1
a107 1
		return NIL;
d120 1
a120 1
	return top;
d142 1
a142 1
		fprintf(stderr, "detract asked to insert commas\n");
d182 1
a182 1
			return NOSTR;
d210 1
a210 1
	return cp;
d257 1
a257 1
				perror(tempEdit);
d264 1
a264 1
				perror(tempEdit);
d266 1
a266 1
				(void) Fclose(fout);
d278 2
a279 2
				perror(tempEdit);
			(void) Fclose(fout);
d316 1
a316 1
				perror(fname);
d321 1
a321 1
				perror("dup");
d326 2
a327 2
				fprintf(stderr, "Can't reopen image\n");
				(void) Fclose(fout);
d334 6
a339 4
			if (ferror(fout))
				senderr++, perror(fname);
			(void) Fclose(fout);
			(void) Fclose(fin);
d351 1
a351 1
		(void) close(image);
d369 1
a369 1
		return 1;
d372 1
a372 1
			return 0;
d374 1
a374 1
			return 1;
d376 1
a376 1
	return 0;
d513 1
a513 1
	top = (char **) salloc((t + extra) * sizeof *top);
d656 1
a656 1
	return c;
d685 1
a685 1
	return np;
d705 1
a705 1
	fprintf(stderr, "\n");
@


1.2
log
@from christos;
- Fix PR/105: Implement dot locking protocol and check return value of flock.
- Fix PR/2247: Don't call unknown users "ubluit". Issue an error message.
- Fix/add prototypes.
- Fix warnings.
- Use POSIX signal mask calls.
@
text
@d1 1
a1 1
/*	$OpenBSD: names.c,v 1.5 1996/06/08 19:48:32 christos Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: names.c,v 1.5 1996/06/08 19:48:32 christos Exp $";
d207 1
a207 1
		for (cp2 = wbuf; *cp && !index(" \t,(", *cp); *cp2++ = *cp++)
@


1.1
log
@Initial revision
@
text
@d1 3
d38 5
a42 2
static char sccsid[] = "from: @@(#)names.c	8.1 (Berkeley) 6/6/93";
static char rcsid[] = "$Id: names.c,v 1.4 1994/11/28 20:03:34 jtc Exp $";
d229 2
a230 2
	time_t now, time();
	char *date, *fname, *ctime();
d291 1
d302 5
a306 2
			pid = start_command(shell, sigmask(SIGHUP)|
					sigmask(SIGINT)|sigmask(SIGQUIT),
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
