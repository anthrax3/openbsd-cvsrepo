head	1.16;
access;
symbols
	OPENBSD_6_1:1.16.0.6
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.16.0.4
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.2
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.15.0.6
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.13.0.48
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.46
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.42
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.40
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.38
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.36
	OPENBSD_5_0:1.13.0.34
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.32
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.30
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.26
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.28
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.24
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.22
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.20
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.18
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.16
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.14
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.12
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.10
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.8
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.6
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.13.0.4
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.10.0.6
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.4
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.7.0.4
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.2
	OPENBSD_2_8:1.6.0.14
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.12
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.6.0.10
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.8
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.6
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.4
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.2
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.16
date	2015.10.13.08.49.51;	author guenther;	state Exp;
branches;
next	1.15;
commitid	V0DBtEuIAZDZl3vX;

1.15
date	2015.01.20.16.59.07;	author millert;	state Exp;
branches;
next	1.14;
commitid	92usC3cTTCZG2qZC;

1.14
date	2015.01.16.06.40.09;	author deraadt;	state Exp;
branches;
next	1.13;
commitid	Uu5nFG3wCl0LACBb;

1.13
date	2003.06.25.15.13.32;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.03.02.56.11;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2003.05.15.02.47.47;	author pjanzen;	state Exp;
branches;
next	1.10;

1.10
date	2002.02.16.21.27.48;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2001.11.21.15.26.39;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2001.11.20.20.50.00;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2001.01.16.05.36.08;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	97.07.14.00.24.26;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.07.13.21.21.10;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.03.29.03.01.45;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.02.03.00.25.18;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.06.11.12.53.36;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.38;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.38;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.16
log
@To alter just the atime of the mailspool, use utimensat()+UTIME_OMIT instead
of stat()+utimes().  Prefer clock_gettime() over gettimeofday() to avoid
timeval->timespec conversion

ok millert@@
@
text
@/*	$OpenBSD: def.h,v 1.15 2015/01/20 16:59:07 millert Exp $	*/
/*	$NetBSD: def.h,v 1.9 1996/12/28 07:11:00 tls Exp $	*/

/*
 * Copyright (c) 1980, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)def.h	8.4 (Berkeley) 4/20/95
 *	$OpenBSD: def.h,v 1.15 2015/01/20 16:59:07 millert Exp $
 */

/*
 * Mail -- a mail program
 *
 * Author: Kurt Shoens (UCB) March 25, 1978
 */

#ifndef MAIL_DEF_H
#define MAIL_DEF_H

#include <sys/stat.h>

#include <ctype.h>
#include <err.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <termios.h>
#include <unistd.h>
#include <limits.h>
#include <vis.h>
#include "pathnames.h"

#define	APPEND				/* New mail goes to end of mailbox */

#define	ESCAPE		'~'		/* Default escape for sending */
#define	NMLSIZE		1024		/* max names in a message list */
#define	PATHSIZE	PATH_MAX	/* Size of pathnames throughout */
#define	HSHSIZE		59		/* Hash size for aliases and vars */
#define	LINESIZE	BUFSIZ		/* max readable line width */
#define	STRINGSIZE	((unsigned) 128)/* Dynamic allocation units */
#define	MAXARGC		1024		/* Maximum list of raw strings */
#define	MAXEXP		25		/* Maximum expansion of aliases */

#define	equal(a, b)	(strcmp(a,b)==0)/* A nice function to string compare */

struct message {
	short	m_flag;			/* flags, see below */
	int	m_offset;		/* offset in block of message */
	int	m_block;		/* block number of this message */
	int	m_size;			/* Bytes in the message */
	int	m_lines;		/* Lines in the message */
};

/*
 * flag bits.
 */
#define	MUSED		(1<<0)		/* entry is used, but this bit isn't */
#define	MDELETED	(1<<1)		/* entry has been deleted */
#define	MSAVED		(1<<2)		/* entry has been saved */
#define	MTOUCH		(1<<3)		/* entry has been noticed */
#define	MPRESERVE	(1<<4)		/* keep entry in sys mailbox */
#define	MMARK		(1<<5)		/* message is marked! */
#define	MODIFY		(1<<6)		/* message has been modified */
#define	MNEW		(1<<7)		/* message has never been seen */
#define	MREAD		(1<<8)		/* message has been read sometime. */
#define	MSTATUS		(1<<9)		/* message status has changed */
#define	MBOX		(1<<10)		/* Send this to mbox, regardless */

/*
 * Given a file address, determine the block number it represents.
 */
#define blockof(off)			((int) ((off) / 4096))
#define offsetof(off)			((int) ((off) % 4096))
#define positionof(block, offset)	((off_t)(block) * 4096 + (offset))

/*
 * Format of the command description table.
 * The actual table is declared and initialized
 * in lex.c
 */
struct cmd {
	char	*c_name;		/* Name of command */
	union {
		int	(*c_func1)(void *);
		int	(*c_func2)(void *, void *);
	} cfunc;                        /* Implementor of the command */
#define c_func  cfunc.c_func1
#define c_func2 cfunc.c_func2
	short	c_argtype;		/* Type of arglist (see below) */
	short	c_msgflag;		/* Required flags of messages */
	short	c_msgmask;		/* Relevant flags of messages */
};

/* Yechh, can't initialize unions */
#define	c_minargs c_msgflag		/* Minimum argcount for RAWLIST */
#define	c_maxargs c_msgmask		/* Max argcount for RAWLIST */

/*
 * Argument types.
 */
#define	MSGLIST	0x0001		/* Message list type */
#define	STRLIST	0x0002		/* A pure string */
#define	RAWLIST	0x0004		/* Shell string list */
#define	NOLIST	0x0008		/* Just plain 0 */
#define	NDMLIST	0x0010		/* Message list, no defaults */

#define	P	0x0020		/* Autoprint dot after command */
#define	I	0x0040		/* Interactive command bit */
#define	M	0x0080		/* Legal from send mode bit */
#define	W	0x0100		/* Illegal when read only bit */
#define	F	0x0200		/* Is a conditional command */
#define	T	0x0400		/* Is a transparent command */
#define	R	0x0800		/* Cannot be called from collect */

/*
 * Oft-used mask values
 */
#define	MMNORM		(MDELETED|MSAVED)/* Look at both save and delete bits */
#define	MMNDEL		MDELETED	/* Look only at deleted bit */

/*
 * Structure used to return a break down of a head
 * line (hats off to Bill Joy!)
 */
struct headline {
	char	*l_from;	/* The name of the sender */
	char	*l_tty;		/* His tty string (if any) */
	char	*l_date;	/* The entire date string */
};

#define	GTO	1		/* Grab To: line */
#define	GSUBJECT 2		/* Likewise, Subject: line */
#define	GCC	4		/* And the Cc: line */
#define	GBCC	8		/* And also the Bcc: line */
#define	GMASK	(GTO|GSUBJECT|GCC|GBCC)
				/* Mask of places from whence */

#define	GNL	16		/* Print blank line after */
#define	GDEL	32		/* Entity removed from list */
#define	GCOMMA	64		/* detract puts in commas */

/*
 * Structure used to pass about the current
 * state of the user-typed message header.
 */
struct header {
	struct name *h_to;		/* Dynamic "To:" string */
	char *h_from;			/* User-specified "From:" string */
	char *h_subject;		/* Subject string */
	struct name *h_cc;		/* Carbon copies string */
	struct name *h_bcc;		/* Blind carbon copies */
	struct name *h_smopts;		/* Sendmail options */
};

/*
 * Structure of namelist nodes used in processing
 * the recipients of mail and aliases and all that
 * kind of stuff.
 */
struct name {
	struct	name *n_flink;		/* Forward link in list. */
	struct	name *n_blink;		/* Backward list link */
	short	n_type;			/* From which list it came */
	char	*n_name;		/* This fella's name */
};

/*
 * Structure of a variable node.  All variables are
 * kept on a singly-linked list of these, rooted by
 * "variables"
 */

struct var {
	struct	var *v_link;		/* Forward link to next variable */
	char	*v_name;		/* The variable's name */
	char	*v_value;		/* And it's current value */
};

struct group {
	struct	group *ge_link;		/* Next person in this group */
	char	*ge_name;		/* This person's user name */
};

struct grouphead {
	struct	grouphead *g_link;	/* Next grouphead in list */
	char	*g_name;		/* Name of this group */
	struct	group *g_list;		/* Users in group. */
};

/*
 * Structure of the hash table of ignored header fields
 */
struct ignoretab {
	int i_count;			/* Number of entries */
	struct ignore {
		struct ignore *i_link;	/* Next ignored field in bucket */
		char *i_field;		/* This ignored field */
	} *i_head[HSHSIZE];
};

/*
 * Token values returned by the scanner used for argument lists.
 * Also, sizes of scanner-related things.
 */
#define	TEOL	0			/* End of the command line */
#define	TNUMBER	1			/* A message number */
#define	TDASH	2			/* A simple dash */
#define	TSTRING	3			/* A string (possibly containing -) */
#define	TDOT	4			/* A "." */
#define	TUP	5			/* An "^" */
#define	TDOLLAR	6			/* A "$" */
#define	TSTAR	7			/* A "*" */
#define	TOPEN	8			/* An '(' */
#define	TCLOSE	9			/* A ')' */
#define TPLUS	10			/* A '+' */
#define TERROR	11			/* A lexical error */

#define	REGDEP	2			/* Maximum regret depth. */
#define	STRINGLEN	1024		/* Maximum length of string token */

/*
 * Constants for conditional commands.
 * These describe whether we should be executing stuff or not.
 */
#define	CANY		0		/* Execute in send or receive mode */
#define	CRCV		1		/* Execute in receive mode only */
#define	CSEND		2		/* Execute in send mode only */

/*
 * Truncate a file to the last character written. This is
 * useful just before closing an old file that was opened
 * for read/write.
 */
#define trunc(stream) do {						\
	(void)fflush(stream); 						\
	(void)ftruncate(fileno(stream), (off_t)ftell(stream));		\
} while(0)

#endif /* MAIL_DEF_H */
@


1.15
log
@Add support for the "-r fromaddr" flag now that we don't support
sendmail flags on the command line.
Also allow "from" to be set in mailrc.
Use sendmail's "-t" flag when executing sendmail instead of specifying
the list of recipients in argv.  The "-f" flag will be used to set
the from address if specified.
@
text
@d1 1
a1 1
/*	$OpenBSD: def.h,v 1.14 2015/01/16 06:40:09 deraadt Exp $	*/
d33 1
a33 1
 *	$OpenBSD: def.h,v 1.14 2015/01/16 06:40:09 deraadt Exp $
a45 1
#include <sys/time.h>
@


1.14
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: def.h,v 1.13 2003/06/25 15:13:32 millert Exp $	*/
d33 1
a33 1
 *	$OpenBSD: def.h,v 1.13 2003/06/25 15:13:32 millert Exp $
d175 1
@


1.13
log
@Remove unused c_func0; noticed by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: def.h,v 1.12 2003/06/03 02:56:11 millert Exp $	*/
d33 1
a33 1
 *	$OpenBSD: def.h,v 1.12 2003/06/03 02:56:11 millert Exp $
a44 1
#include <sys/param.h>
d56 1
d64 1
a64 1
#define	PATHSIZE	MAXPATHLEN	/* Size of pathnames throughout */
@


1.12
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: def.h,v 1.11 2003/05/15 02:47:47 pjanzen Exp $	*/
d33 1
a33 1
 *	$OpenBSD: def.h,v 1.11 2003/05/15 02:47:47 pjanzen Exp $
a110 1
		int	(*c_func0)();
@


1.11
log
@Use vis() on any remotely created input before displaying it on a screen.
deraadt@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: def.h,v 1.10 2002/02/16 21:27:48 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d33 1
a33 1
 *	$OpenBSD: def.h,v 1.10 2002/02/16 21:27:48 millert Exp $
@


1.10
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: def.h,v 1.9 2001/11/21 15:26:39 millert Exp $	*/
d37 1
a37 1
 *	$OpenBSD: def.h,v 1.9 2001/11/21 15:26:39 millert Exp $
d61 1
@


1.9
log
@o ANSIfy
o Style nits
o Use const to silent stupid -Wall warnings
o strnc{py,at} -> strlc{py,at}
o Use strpbrk() instead of homegrown anyof()
o Use NULL instead of #defines with 0 cast to a pointer
This still could use a proper audit
@
text
@d1 1
a1 1
/*	$OpenBSD: def.h,v 1.8 2001/11/20 20:50:00 millert Exp $	*/
d37 1
a37 1
 *	$OpenBSD: def.h,v 1.8 2001/11/20 20:50:00 millert Exp $
d115 2
a116 2
		int	(*c_func1) __P((void *));
		int	(*c_func2) __P((void *, void *));
@


1.8
log
@Major signal overhaul.  We no longer longjmp all over the place.
Instead, routines responsible to gathering user input (or in some
cases outputting data) catch the signals and set flags as needed.
Because of this some handlers are install without the SA_RESTART
flag so syscalls are not restarted and we can check the flag.  All
signal handlers are now safe.

This should make the flow of control a bit more grokable but the
code is still ugly.
@
text
@d1 1
a1 1
/*	$OpenBSD: def.h,v 1.7 2001/01/16 05:36:08 millert Exp $	*/
d3 1
d37 1
a37 1
 *	$OpenBSD: def.h,v 1.7 2001/01/16 05:36:08 millert Exp $
a86 1

a125 1

a131 1

a148 1

a155 1

a176 1

a189 1

a219 6
#define	NIL	((struct name *) 0)	/* The nil pointer for namelists */
#define	NONE	((struct cmd *) 0)	/* The nil pointer to command tab */
#define	NOVAR	((struct var *) 0)	/* The nil pointer to variables */
#define	NOGRP	((struct grouphead *) 0)/* The nil grouphead pointer */
#define	NOGE	((struct group *) 0)	/* The nil group pointer */

a234 1

d252 2
a253 2
 * Constants for conditional commands.  These describe whether
 * we should be executing stuff or not.
a254 1

d264 1
a264 1
#define trunc(stream) {							\
d267 1
a267 1
}
@


1.7
log
@Changes from Don Beusee:
o escape From line with a leading '>' when needed
o only print To: address and Subject lines if actually present
o new variable 'allnet' to treat user@@foo and user@@bar as the same "user"
o folders command now takes an optional argument like ls.
o new "pipe" (|) command to pipe the message through an arbitrary command
o make header display format the same as SunOS 4.1.3 /usr/ucb/mail
o tilde commands work regardless of interactive mode.
o fix "read: Interrupted system call" error by retrying if EINTR
o expanded help file
Changes by me:
o read the help file via the PAGER as it is now more than 24 lines long
@
text
@d1 1
a1 1
/*	$OpenBSD: def.h,v 1.6 1997/07/14 00:24:26 millert Exp $	*/
d36 1
a36 1
 *	$OpenBSD: def.h,v 1.6 1997/07/14 00:24:26 millert Exp $
a271 7

/*
 * Kludges to handle the change from setexit / reset to sigsetjmp / siglongjmp
 */

#define	setexit()	sigsetjmp(srbuf, 1)
#define	reset(x)	siglongjmp(srbuf, x)
@


1.6
log
@NOSTR -> NULL
Use sigsetjmp/siglongjmp instead of sigjmp/longjmp for portability.
@
text
@d1 1
a1 1
/*	$OpenBSD: def.h,v 1.5 1997/07/13 21:21:10 millert Exp $	*/
d36 1
a36 1
 *	$OpenBSD: def.h,v 1.5 1997/07/13 21:21:10 millert Exp $
d45 3
d113 7
a119 1
	int	(*c_func) __P((void *));/* Implementor of the command */
d134 13
a146 13
#define	MSGLIST	 0		/* Message list type */
#define	STRLIST	 1		/* A pure string */
#define	RAWLIST	 2		/* Shell string list */
#define	NOLIST	 3		/* Just plain 0 */
#define	NDMLIST	 4		/* Message list, no defaults */

#define	P	040		/* Autoprint dot after command */
#define	I	0100		/* Interactive command bit */
#define	M	0200		/* Legal from send mode bit */
#define	W	0400		/* Illegal when read only bit */
#define	F	01000		/* Is a conditional command */
#define	T	02000		/* Is a transparent command */
#define	R	04000		/* Cannot be called from collect */
d289 2
@


1.5
log
@Merge in NetBSD and 4.4BSD-lite2 changes as well as some of my own.
 - handle long lines safely (from NetBSD)
 - use puts/fputs and putchar/putc when it makes sense
 - use err/errx and warn/warnx when it makes sense
 - make return() and sizeof() style consisten
 - some more buffer safety
@
text
@d1 1
a1 1
/*	$OpenBSD: def.h,v 1.4 1997/03/29 03:01:45 millert Exp $	*/
d36 1
a36 1
 *	$OpenBSD$
a67 1
#define	NOSTR		((char *) 0)	/* Null string pointer */
d265 1
a265 1
 * Kludges to handle the change from setexit / reset to setjmp / longjmp
d268 2
a269 2
#define	setexit()	setjmp(srbuf)
#define	reset(x)	longjmp(srbuf, x)
@


1.4
log
@Use ``mail.local -H'' to do dot locking so we can have mode 755 mail
spool, change an occurrence of tempnam() to mkstemp(), change some
longs and shorts to ints.  Mail is now usable again.
@
text
@d1 2
a2 2
/*	$OpenBSD: def.h,v 1.3 1997/02/03 00:25:18 deraadt Exp $	*/
/*	$NetBSD: def.h,v 1.8 1996/06/08 19:48:18 christos Exp $	*/
d35 2
a36 2
 *	@@(#)def.h	8.2 (Berkeley) 3/21/94
 *	$NetBSD: def.h,v 1.8 1996/06/08 19:48:18 christos Exp $
d49 2
d52 3
a56 4
#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>
#include <string.h>
d75 1
a76 1
	int	m_offset;		/* offset in block of message */
@


1.3
log
@use a long line counter, netbsd pr#3083, rhialto@@polder.ubc.kun.nl
@
text
@d1 1
a1 1
/*	$OpenBSD: def.h,v 1.2 1996/06/11 12:53:36 deraadt Exp $	*/
d74 4
a77 4
	short	m_block;		/* block number of this message */
	short	m_offset;		/* offset in block of message */
	long	m_size;			/* Bytes in the message */
	long	m_lines;		/* Lines in the message */
@


1.2
log
@from christos;
- Fix PR/105: Implement dot locking protocol and check return value of flock.
- Fix PR/2247: Don't call unknown users "ubluit". Issue an error message.
- Fix/add prototypes.
- Fix warnings.
- Use POSIX signal mask calls.
@
text
@d1 1
a1 1
/*	$OpenBSD: def.h,v 1.8 1996/06/08 19:48:18 christos Exp $	*/
d77 1
a77 1
	short	m_lines;		/* Lines in the message */
@


1.1
log
@Initial revision
@
text
@d1 2
d35 2
a36 2
 *	from: @@(#)def.h	8.2 (Berkeley) 3/21/94
 *	$Id: def.h,v 1.7 1995/05/02 01:40:14 mycroft Exp $
d110 1
a110 1
	int	(*c_func)();		/* Implementor of the command */
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
