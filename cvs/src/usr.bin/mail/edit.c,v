head	1.20;
access;
symbols
	OPENBSD_6_0:1.19.0.28
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.19.0.24
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.19.0.26
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.19.0.18
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.19.0.22
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.19.0.20
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.19.0.16
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.19.0.14
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.19.0.12
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.19
	OPENBSD_5_1:1.19.0.10
	OPENBSD_5_0:1.19.0.8
	OPENBSD_5_0_BASE:1.19
	OPENBSD_4_9:1.19.0.6
	OPENBSD_4_9_BASE:1.19
	OPENBSD_4_8:1.19.0.4
	OPENBSD_4_8_BASE:1.19
	OPENBSD_4_7:1.19.0.2
	OPENBSD_4_7_BASE:1.19
	OPENBSD_4_6:1.18.0.8
	OPENBSD_4_6_BASE:1.18
	OPENBSD_4_5:1.18.0.4
	OPENBSD_4_5_BASE:1.18
	OPENBSD_4_4:1.18.0.2
	OPENBSD_4_4_BASE:1.18
	OPENBSD_4_3:1.17.0.2
	OPENBSD_4_3_BASE:1.17
	OPENBSD_4_2:1.14.0.4
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.14.0.2
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.13.0.10
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.8
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.6
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.4
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.2
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.12.0.4
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.12.0.2
	OPENBSD_3_4_BASE:1.12
	OPENBSD_3_3:1.11.0.6
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.4
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.11.0.2
	OPENBSD_3_1_BASE:1.11
	OPENBSD_3_0:1.9.0.4
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_9:1.9.0.2
	OPENBSD_2_8:1.8.0.2
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.7.0.10
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.7.0.8
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.6
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.7.0.4
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.7.0.2
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.6.0.2
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.20
date	2017.03.28.09.14.43;	author natano;	state Exp;
branches;
next	1.19;
commitid	xbBJhg6wvhDVdP23;

1.19
date	2009.10.27.23.59.40;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2008.07.16.14.49.09;	author martynas;	state Exp;
branches;
next	1.17;

1.17
date	2007.10.17.20.02.33;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2007.09.10.14.29.53;	author tobias;	state Exp;
branches;
next	1.15;

1.15
date	2007.08.31.23.14.21;	author ray;	state Exp;
branches;
next	1.14;

1.14
date	2006.10.10.21.38.16;	author cloder;	state Exp;
branches;
next	1.13;

1.13
date	2004.05.10.15.25.51;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.03.02.56.11;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2001.11.21.15.26.39;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2001.11.20.20.50.00;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2001.01.19.04.11.28;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2000.06.30.16.00.18;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	97.11.14.00.23.45;	author millert;	state Exp;
branches
	1.7.10.1;
next	1.6;

1.6
date	97.07.24.17.27.10;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.07.14.00.24.26;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.07.13.23.53.59;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.07.13.21.21.11;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.06.11.12.53.38;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.38;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.38;	author deraadt;	state Exp;
branches;
next	;

1.7.10.1
date	2000.10.06.21.16.15;	author jason;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Prevent edit'ing a message from corrupting the mailbox. In an mbox file
every message is terminated by an empty line, so we have to make sure it
is preserved. Otherwise the message is combined with the next one.

joint effort with deraadt and millert
@
text
@/*	$OpenBSD: edit.c,v 1.19 2009/10/27 23:59:40 deraadt Exp $	*/
/*	$NetBSD: edit.c,v 1.5 1996/06/08 19:48:20 christos Exp $	*/

/*
 * Copyright (c) 1980, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/wait.h>

#include "rcv.h"
#include <errno.h>
#include <fcntl.h>
#include "extern.h"

int editit(const char *, const char *);

/*
 * Mail -- a mail program
 *
 * Perform message editing functions.
 */

/*
 * Edit a message list.
 */
int
editor(void *v)
{
	int *msgvec = v;

	return(edit1(msgvec, 'e'));
}

/*
 * Invoke the visual editor on a message list.
 */
int
visual(void *v)
{
	int *msgvec = v;

	return(edit1(msgvec, 'v'));
}

/*
 * Edit a message by writing the message into a funnily-named file
 * (which should not exist) and forking an editor on it.
 * We get the editor from the stuff above.
 */
int
edit1(int *msgvec, int type)
{
	int nl = 0, c, i;
	FILE *fp;
	struct sigaction oact;
	sigset_t oset;
	struct message *mp;
	off_t size;

	/*
	 * Deal with each message to be edited . . .
	 */
	for (i = 0; msgvec[i] && i < msgCount; i++) {
		if (i > 0) {
			char buf[100];
			char *p;

			printf("Edit message %d [ynq]? ", msgvec[i]);
			if (fgets(buf, sizeof(buf), stdin) == NULL)
				break;
			for (p = buf; *p == ' ' || *p == '\t'; p++)
				;
			if (*p == 'q')
				break;
			if (*p == 'n')
				continue;
		}
		dot = mp = &message[msgvec[i] - 1];
		touch(mp);
		(void)ignoresig(SIGINT, &oact, &oset);
		fp = run_editor(setinput(mp), (off_t)mp->m_size, type, readonly);
		if (fp != NULL) {
			(void)fseek(otf, 0L, SEEK_END);
			size = ftell(otf);
			mp->m_block = blockof(size);
			mp->m_offset = offsetof(size);
			mp->m_size = fsize(fp);
			mp->m_lines = 0;
			mp->m_flag |= MODIFY;
			rewind(fp);
			while ((c = getc(fp)) != EOF) {
				if (c == '\n') {
					mp->m_lines++;
					nl++;
				} else
					nl = 0;
				if (putc(c, otf) == EOF)
					break;
			}
			for (; nl < 2; nl++) {
				mp->m_lines++;
				mp->m_size++;
				putc('\n', otf);
			}
			if (ferror(otf))
				warn("%s", tmpdir);
			(void)Fclose(fp);
		}
		(void)sigprocmask(SIG_SETMASK, &oset, NULL);
		(void)sigaction(SIGINT, &oact, NULL);
	}
	return(0);
}

/*
 * Run an editor on the file at "fpp" of "size" bytes,
 * and return a new file pointer.
 * Signals must be handled by the caller.
 * "Type" is 'e' for _PATH_EX, 'v' for _PATH_VI.
 */
FILE *
run_editor(FILE *fp, off_t size, int type, int readonly)
{
	FILE *nf = NULL;
	int t;
	time_t modtime;
	char *edit, tempname[PATHSIZE];
	struct stat statb;

	(void)snprintf(tempname, sizeof(tempname),
	    "%s/mail.ReXXXXXXXXXX", tmpdir);
	if ((t = mkstemp(tempname)) == -1 ||
	    (nf = Fdopen(t, "w")) == NULL) {
		warn("%s", tempname);
		goto out;
	}
	if (readonly && fchmod(t, 0400) == -1) {
		warn("%s", tempname);
		(void)rm(tempname);
		goto out;
	}
	if (size >= 0)
		while (--size >= 0 && (t = getc(fp)) != EOF)
			(void)putc(t, nf);
	else
		while ((t = getc(fp)) != EOF)
			(void)putc(t, nf);
	(void)fflush(nf);
	if (fstat(fileno(nf), &statb) < 0)
		modtime = 0;
	else
		modtime = statb.st_mtime;
	if (ferror(nf)) {
		(void)Fclose(nf);
		warn("%s", tempname);
		(void)rm(tempname);
		nf = NULL;
		goto out;
	}
	if (Fclose(nf) < 0) {
		warn("%s", tempname);
		(void)rm(tempname);
		nf = NULL;
		goto out;
	}
	nf = NULL;
	if (type == 'e') {
		edit = value("EDITOR");
		if (edit == NULL || edit[0] == '\0')
			edit = _PATH_EX;
	} else {
		edit = value("VISUAL");
		if (edit == NULL || edit[0] == '\0')
			edit = _PATH_VI;
	}
	if (editit(edit, tempname) == -1) {
		(void)rm(tempname);
		goto out;
	}
	/*
	 * If in read only mode or file unchanged, just remove the editor
	 * temporary and return.
	 */
	if (readonly) {
		(void)rm(tempname);
		goto out;
	}
	if (stat(tempname, &statb) < 0) {
		warn("%s", tempname);
		goto out;
	}
	if (modtime == statb.st_mtime) {
		(void)rm(tempname);
		goto out;
	}
	/*
	 * Now switch to new file.
	 */
	if ((nf = Fopen(tempname, "a+")) == NULL) {
		warn("%s", tempname);
		(void)rm(tempname);
		goto out;
	}
	(void)rm(tempname);
out:
	return(nf);
}

/*
 * Execute an editor on the specified pathname, which is interpreted
 * from the shell.  This means flags may be included.
 *
 * Returns -1 on error, or the exit value on success.
 */
int
editit(const char *ed, const char *pathname)
{
	char *argp[] = {"sh", "-c", NULL, NULL}, *p;
	sig_t sighup, sigint, sigquit, sigchld;
	pid_t pid;
	int saved_errno, st, ret = -1;

	if (ed == NULL)
		ed = getenv("VISUAL");
	if (ed == NULL || ed[0] == '\0')
		ed = getenv("EDITOR");
	if (ed == NULL || ed[0] == '\0')
		ed = _PATH_VI;
	if (asprintf(&p, "%s %s", ed, pathname) == -1)
		return (-1);
	argp[2] = p;

	sighup = signal(SIGHUP, SIG_IGN);
	sigint = signal(SIGINT, SIG_IGN);
	sigquit = signal(SIGQUIT, SIG_IGN);
	sigchld = signal(SIGCHLD, SIG_DFL);
	if ((pid = fork()) == -1)
		goto fail;
	if (pid == 0) {
		execv(_PATH_BSHELL, argp);
		_exit(127);
	}
	while (waitpid(pid, &st, 0) == -1)
		if (errno != EINTR)
			goto fail;
	if (!WIFEXITED(st))
		errno = EINTR;
	else
		ret = WEXITSTATUS(st);

 fail:
	saved_errno = errno;
	(void)signal(SIGHUP, sighup);
	(void)signal(SIGINT, sigint);
	(void)signal(SIGQUIT, sigquit);
	(void)signal(SIGCHLD, sigchld);
	free(p);
	errno = saved_errno;
	return (ret);
}
@


1.19
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.18 2008/07/16 14:49:09 martynas Exp $	*/
d79 1
a79 1
	int c, i;
d118 1
a118 1
				if (c == '\n')
d120 3
d125 5
@


1.18
log
@- err with the pathbuf, if we know it
- use tmpdir instead of /tmp
ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.17 2007/10/17 20:02:33 deraadt Exp $	*/
a31 8

#ifndef lint
#if 0
static const char sccsid[] = "@@(#)edit.c	8.1 (Berkeley) 6/6/93";
#else
static const char rcsid[] = "$OpenBSD: edit.c,v 1.17 2007/10/17 20:02:33 deraadt Exp $";
#endif
#endif /* not lint */
@


1.17
log
@- Be more careful about pre-existing SIGCHLD handlers (or SIG_IGN) by
  temporarily restoring default behaviour.  This is not 100% ideal.
  But this fixes editor handling in mail... bah, it is really unfortunate
  that got broken
- refactor the restoration code as well, to make it simpler
ok ray
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.16 2007/09/10 14:29:53 tobias Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: edit.c,v 1.16 2007/09/10 14:29:53 tobias Exp $";
d132 1
a132 1
				warn("/tmp");
@


1.16
log
@Proper use of fseek/fseeko macros.

OK joris@@, otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.15 2007/08/31 23:14:21 ray Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: edit.c,v 1.15 2007/08/31 23:14:21 ray Exp $";
d245 1
a245 1
	sig_t sighup, sigint, sigquit;
d247 1
a247 1
	int saved_errno, st;
d262 1
d272 1
a272 5
	free(p);
	(void)signal(SIGHUP, sighup);
	(void)signal(SIGINT, sigint);
	(void)signal(SIGQUIT, sigquit);
	if (!WIFEXITED(st)) {
d274 2
a275 3
		return (-1);
	}
	return (WEXITSTATUS(st));
d282 1
d285 1
a285 1
	return (-1);
@


1.15
log
@Copy editit() from sendbug, synchronizing editor calling code.

OK otto, millert, beck, mbalmer, deraadt.
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.14 2006/10/10 21:38:16 cloder Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: edit.c,v 1.14 2006/10/10 21:38:16 cloder Exp $";
d117 1
a117 1
			(void)fseek(otf, 0L, 2);
@


1.14
log
@fgets(3) returns NULL on error, not 0. No functional change, but it makes
the code easier to read.
OK deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.13 2004/05/10 15:25:51 deraadt Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: edit.c,v 1.13 2004/05/10 15:25:51 deraadt Exp $";
d41 3
d45 1
d49 2
d193 10
a202 3
	if ((edit = value(type == 'e' ? "EDITOR" : "VISUAL")) == NULL)
		edit = type == 'e' ? _PATH_EX : _PATH_VI;
	if (run_command(edit, 0, 0, -1, tempname, NULL, NULL) < 0) {
d233 56
@


1.13
log
@delint; millert ok
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.12 2003/06/03 02:56:11 millert Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: edit.c,v 1.12 2003/06/03 02:56:11 millert Exp $";
d97 1
a97 1
			if (fgets(buf, sizeof(buf), stdin) == 0)
@


1.12
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.11 2001/11/21 15:26:39 millert Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: edit.c,v 1.11 2001/11/21 15:26:39 millert Exp $";
d109 1
a109 1
		fp = run_editor(setinput(mp), mp->m_size, type, readonly);
@


1.11
log
@o ANSIfy
o Style nits
o Use const to silent stupid -Wall warnings
o strnc{py,at} -> strlc{py,at}
o Use strpbrk() instead of homegrown anyof()
o Use NULL instead of #defines with 0 cast to a pointer
This still could use a proper audit
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.10 2001/11/20 20:50:00 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: edit.c,v 1.10 2001/11/20 20:50:00 millert Exp $";
@


1.10
log
@Major signal overhaul.  We no longer longjmp all over the place.
Instead, routines responsible to gathering user input (or in some
cases outputting data) catch the signals and set flags as needed.
Because of this some handlers are install without the SA_RESTART
flag so syscalls are not restarted and we can check the flag.  All
signal handlers are now safe.

This should make the flow of control a bit more grokable but the
code is still ugly.
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.9 2001/01/19 04:11:28 millert Exp $	*/
d39 1
a39 1
static char sccsid[] = "@@(#)edit.c	8.1 (Berkeley) 6/6/93";
d41 1
a41 1
static char rcsid[] = "$OpenBSD: edit.c,v 1.9 2001/01/19 04:11:28 millert Exp $";
d59 1
a59 2
editor(v)
	void *v;
d70 1
a70 2
visual(v)
	void *v;
d83 1
a83 3
edit1(msgvec, type)
	int *msgvec;
	int type;
d146 1
a146 4
run_editor(fp, size, type, readonly)
	FILE *fp;
	off_t size;
	int type, readonly;
@


1.9
log
@More fixes from Don Beusee:
- edit and other interactive commands have no stdin (making the
  command completely broken).
- messages with "From " line having date format with -0800 type of timezone
  are not recognized correctly.
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.8 2000/06/30 16:00:18 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: edit.c,v 1.8 2000/06/30 16:00:18 millert Exp $";
d91 2
a99 2
		sig_t sigint;

d116 1
a116 1
		sigint = signal(SIGINT, SIG_IGN);
d137 2
a138 1
		(void)signal(SIGINT, sigint);
@


1.8
log
@warnx?/errx? paranoia (use "%s" not a bare string unless it is a
constant).  These are not security holes but it is worth fixing
them anyway both for robustness and so folks looking for examples
in the tree are not misled into doing something potentially dangerous.
Furthermore, it is a bad idea to assume that pathnames will not
include '%' in them and that error routines don't return strings
with '%' in them (especially in light of the possibility of locales).
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.7 1997/11/14 00:23:45 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: edit.c,v 1.7 1997/11/14 00:23:45 millert Exp $";
d199 1
a199 1
	if (run_command(edit, 0, -1, -1, tempname, NULL, NULL) < 0) {
@


1.7
log
@NetBSD changes (mostly comsmetic):
    replace panic() with calls to err()/errx()
    use S_IS* instead of doing by hand with S_IF*.
    Use TIMESPEC_TO_TIMEVAL() and gettimeofday instead of time(2)
    Use _POSIX_VDISABLE, not 0
    Kill register
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.6 1997/07/24 17:27:10 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: edit.c,v 1.6 1997/07/24 17:27:10 millert Exp $";
d164 1
a164 1
		warn(tempname);
d168 1
a168 1
		warn(tempname);
d185 1
a185 1
		warn(tempname);
d191 1
a191 1
		warn(tempname);
d212 1
a212 1
		warn(tempname);
d223 1
a223 1
		warn(tempname);
@


1.7.10.1
log
@Pull in patch from current (even more to come):
Fix (millert):
warnx?/errx? paranoia (use "%s" not a bare string unless it is a
constant).  These are not security holes but it is worth fixing
them anyway both for robustness and so folks looking for examples
in the tree are not misled into doing something potentially dangerous.
Furthermore, it is a bad idea to assume that pathnames will not
include '%' in them and that error routines don't return strings
with '%' in them (especially in light of the possibility of locales).
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.8 2000/06/30 16:00:18 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: edit.c,v 1.8 2000/06/30 16:00:18 millert Exp $";
d164 1
a164 1
		warn("%s", tempname);
d168 1
a168 1
		warn("%s", tempname);
d185 1
a185 1
		warn("%s", tempname);
d191 1
a191 1
		warn("%s", tempname);
d212 1
a212 1
		warn("%s", tempname);
d223 1
a223 1
		warn("%s", tempname);
@


1.6
log
@tempnam(3) goes bye bye.
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.5 1997/07/14 00:24:26 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: edit.c,v 1.5 1997/07/14 00:24:26 millert Exp $";
d89 1
a89 2
	register int c;
	int i;
d91 1
a91 1
	register struct message *mp;
d150 1
a150 1
	register FILE *fp;
d154 2
a155 2
	register FILE *nf = NULL;
	register int t;
@


1.5
log
@NOSTR -> NULL
Use sigsetjmp/siglongjmp instead of sigjmp/longjmp for portability.
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.4 1997/07/13 23:53:59 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: edit.c,v 1.4 1997/07/13 23:53:59 millert Exp $";
d158 1
a158 1
	char *edit;
a159 1
	extern char *tempEdit;
d161 5
a165 2
	if ((t = creat(tempEdit, readonly ? 0400 : 0600)) < 0) {
		warn(tempEdit);
d168 3
a170 3
	if ((nf = Fdopen(t, "w")) == NULL) {
		warn(tempEdit);
		(void)unlink(tempEdit);
d186 2
a187 2
		warn(tempEdit);
		(void)unlink(tempEdit);
d192 2
a193 2
		warn(tempEdit);
		(void)unlink(tempEdit);
d200 2
a201 2
	if (run_command(edit, 0, -1, -1, tempEdit, NULL, NULL) < 0) {
		(void)unlink(tempEdit);
d209 1
a209 1
		(void)unlink(tempEdit);
d212 2
a213 2
	if (stat(tempEdit, &statb) < 0) {
		warn(tempEdit);
d217 1
a217 1
		(void)unlink(tempEdit);
d223 3
a225 3
	if ((nf = Fopen(tempEdit, "a+")) == NULL) {
		warn(tempEdit);
		(void)unlink(tempEdit);
d228 1
a228 1
	(void)unlink(tempEdit);
@


1.4
log
@bcopy() -> memcpy() and fix some casts.
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.3 1997/07/13 21:21:11 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: edit.c,v 1.3 1997/07/13 21:21:11 millert Exp $";
d196 1
a196 1
	if ((edit = value(type == 'e' ? "EDITOR" : "VISUAL")) == NOSTR)
d198 1
a198 1
	if (run_command(edit, 0, -1, -1, tempEdit, NOSTR, NOSTR) < 0) {
@


1.3
log
@Merge in NetBSD and 4.4BSD-lite2 changes as well as some of my own.
 - handle long lines safely (from NetBSD)
 - use puts/fputs and putchar/putc when it makes sense
 - use err/errx and warn/warnx when it makes sense
 - make return() and sizeof() style consisten
 - some more buffer safety
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.2 1996/06/11 12:53:38 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: edit.c,v 1.2 1996/06/11 12:53:38 deraadt Exp $";
d120 1
a120 1
			(void) fseek(otf, 0L, 2);
d138 1
a138 1
		(void) signal(SIGINT, sigint);
d168 1
a168 1
		(void) unlink(tempEdit);
d173 1
a173 1
			(void) putc(t, nf);
d176 2
a177 2
			(void) putc(t, nf);
	(void) fflush(nf);
d183 1
a183 1
		(void) Fclose(nf);
d185 1
a185 1
		(void) unlink(tempEdit);
d191 1
a191 1
		(void) unlink(tempEdit);
d199 1
a199 1
		(void) unlink(tempEdit);
d207 1
a207 1
		(void) unlink(tempEdit);
d215 1
a215 1
		(void) unlink(tempEdit);
d223 1
a223 1
		(void) unlink(tempEdit);
d226 1
a226 1
	(void) unlink(tempEdit);
@


1.2
log
@from christos;
- Fix PR/105: Implement dot locking protocol and check return value of flock.
- Fix PR/2247: Don't call unknown users "ubluit". Issue an error message.
- Fix/add prototypes.
- Fix warnings.
- Use POSIX signal mask calls.
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.5 1996/06/08 19:48:20 christos Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: edit.c,v 1.5 1996/06/08 19:48:20 christos Exp $";
d64 1
a64 1
	return edit1(msgvec, 'e');
d76 1
a76 1
	return edit1(msgvec, 'v');
d106 1
a106 1
			if (fgets(buf, sizeof buf, stdin) == 0)
d135 2
a136 2
				perror("/tmp");
			(void) Fclose(fp);
d140 1
a140 1
	return 0;
d163 1
a163 1
		perror(tempEdit);
d167 1
a167 1
		perror(tempEdit);
d184 1
a184 1
		perror(tempEdit);
d190 1
a190 1
		perror(tempEdit);
d211 1
a211 1
		perror(tempEdit);
d222 1
a222 1
		perror(tempEdit);
d228 1
a228 1
	return nf;
@


1.1
log
@Initial revision
@
text
@d1 3
d38 5
a42 2
static char sccsid[] = "from: @@(#)edit.c	8.1 (Berkeley) 6/6/93";
static char rcsid[] = "$Id: edit.c,v 1.4 1994/11/28 20:03:32 jtc Exp $";
d59 2
a60 2
editor(msgvec)
	int *msgvec;
d62 1
d71 2
a72 2
visual(msgvec)
	int *msgvec;
d74 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
