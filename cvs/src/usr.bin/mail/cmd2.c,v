head	1.22;
access;
symbols
	OPENBSD_6_0:1.22.0.4
	OPENBSD_6_0_BASE:1.22
	OPENBSD_5_9:1.22.0.2
	OPENBSD_5_9_BASE:1.22
	OPENBSD_5_8:1.21.0.8
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.21.0.2
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.21.0.4
	OPENBSD_5_6_BASE:1.21
	OPENBSD_5_5:1.20.0.4
	OPENBSD_5_5_BASE:1.20
	OPENBSD_5_4:1.19.0.4
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.19.0.2
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.18.0.6
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.4
	OPENBSD_5_0:1.18.0.2
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.17.0.6
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.17.0.4
	OPENBSD_4_8_BASE:1.17
	OPENBSD_4_7:1.17.0.2
	OPENBSD_4_7_BASE:1.17
	OPENBSD_4_6:1.15.0.22
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.18
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.16
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.14
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.12
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.10
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.8
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.15.0.6
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.15.0.4
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.15.0.2
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.14.0.2
	OPENBSD_3_6_BASE:1.14
	OPENBSD_3_5:1.13.0.2
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.12.0.2
	OPENBSD_3_4_BASE:1.12
	OPENBSD_3_3:1.11.0.6
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.4
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.11.0.2
	OPENBSD_3_1_BASE:1.11
	OPENBSD_3_0:1.9.0.8
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_9:1.9.0.6
	OPENBSD_2_8:1.9.0.4
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.9.0.2
	OPENBSD_2_7_BASE:1.9
	OPENBSD_2_6:1.8.0.8
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.8.0.6
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.8.0.4
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.8.0.2
	OPENBSD_2_3_BASE:1.8
	OPENBSD_2_2:1.7.0.2
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.22
date	2015.10.16.17.56.07;	author mmcc;	state Exp;
branches;
next	1.21;
commitid	y3aqfd1wS5RZj9kl;

1.21
date	2014.03.16.18.38.30;	author guenther;	state Exp;
branches;
next	1.20;

1.20
date	2014.01.17.18.42.30;	author okan;	state Exp;
branches;
next	1.19;

1.19
date	2012.11.14.13.22.37;	author gsoares;	state Exp;
branches;
next	1.18;

1.18
date	2011.04.06.11.36.26;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2009.10.27.23.59.40;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2009.07.28.16.05.04;	author martynas;	state Exp;
branches;
next	1.15;

1.15
date	2004.09.15.22.21.40;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2004.05.10.12.10.50;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2003.10.24.20.32.06;	author avsm;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.03.02.56.11;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2001.11.21.20.41.55;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2001.11.21.15.26.39;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2000.04.26.15.47.30;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	97.11.14.00.23.43;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	97.08.31.14.32.13;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	97.07.30.07.19.29;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.07.14.00.24.24;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.07.13.23.53.57;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.07.13.21.21.09;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.06.11.12.53.33;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.38;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.38;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.22
log
@Modernize allocation by:

 * removing unneeded casts of void* return values
 * replacing varied and creative error messages with the allocation
   function's name
 * replacing errx() with err() so that the errno string is reported

ok beck@@, jung@@, millert@@
@
text
@/*	$OpenBSD: cmd2.c,v 1.21 2014/03/16 18:38:30 guenther Exp $	*/
/*	$NetBSD: cmd2.c,v 1.7 1997/05/17 19:55:10 pk Exp $	*/

/*
 * Copyright (c) 1980, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "rcv.h"
#include <sys/wait.h>
#include "extern.h"

/*
 * Mail -- a mail program
 *
 * More user commands.
 */
static int igcomp(const void *, const void *);

/*
 * If any arguments were given, go to the next applicable argument
 * following dot, otherwise, go to the next applicable message.
 * If given as first command with no arguments, print first message.
 */
int
next(void *v)
{
	struct message *mp;
	int *msgvec = v;
	int *ip, *ip2, list[2], mdot;

	if (*msgvec != 0) {
		/*
		 * If some messages were supplied, find the
		 * first applicable one following dot using
		 * wrap around.
		 */
		mdot = dot - &message[0] + 1;

		/*
		 * Find the first message in the supplied
		 * message list which follows dot.
		 */
		for (ip = msgvec; *ip != 0; ip++)
			if (*ip > mdot)
				break;
		if (*ip == 0)
			ip = msgvec;
		ip2 = ip;
		do {
			mp = &message[*ip2 - 1];
			if ((mp->m_flag & MDELETED) == 0) {
				dot = mp;
				goto hitit;
			}
			if (*ip2 != 0)
				ip2++;
			if (*ip2 == 0)
				ip2 = msgvec;
		} while (ip2 != ip);
		puts("No messages applicable");
		return(1);
	}

	/*
	 * If this is the first command, select message 1.
	 * Note that this must exist for us to get here at all.
	 */
	if (!sawcom)
		goto hitit;

	/*
	 * Just find the next good message after dot, no
	 * wraparound.
	 */
	for (mp = dot+1; mp < &message[msgCount]; mp++)
		if ((mp->m_flag & (MDELETED|MSAVED)) == 0)
			break;
	if (mp >= &message[msgCount]) {
		puts("At EOF");
		return(0);
	}
	dot = mp;
hitit:
	/*
	 * Print dot.
	 */
	list[0] = dot - &message[0] + 1;
	list[1] = 0;
	return(type(list));
}

/*
 * Save a message in a file.  Mark the message as saved
 * so we can discard when the user quits.
 */
int
save(void *v)
{
	char *str = v;

	return(save1(str, 1, "save", saveignore));
}

/*
 * Copy a message to a file without affected its saved-ness
 */
int
copycmd(void *v)
{
	char *str = v;

	return(save1(str, 0, "copy", saveignore));
}

/*
 * Save/copy the indicated messages at the end of the passed file name.
 * If mark is true, mark the message "saved."
 */
int
save1(char *str, int mark, char *cmd, struct ignoretab *ignore)
{
	struct message *mp;
	char *file, *disp;
	int f, *msgvec, *ip;
	FILE *obuf;

	msgvec = (int *)salloc((msgCount + 2) * sizeof(*msgvec));
	if ((file = snarf(str, &f)) == NULL)
		return(1);
	if (!f) {
		*msgvec = first(0, MMNORM);
		if (*msgvec == 0) {
			printf("No messages to %s.\n", cmd);
			return(1);
		}
		msgvec[1] = 0;
	}
	if (f && getmsglist(str, msgvec, 0) < 0)
		return(1);
	if ((file = expand(file)) == NULL)
		return(1);
	printf("\"%s\" ", file);
	fflush(stdout);
	if (access(file, F_OK) >= 0)
		disp = "[Appended]";
	else
		disp = "[New file]";
	if ((obuf = Fopen(file, "a")) == NULL) {
		warn(NULL);
		return(1);
	}
	for (ip = msgvec; *ip && ip-msgvec < msgCount; ip++) {
		mp = &message[*ip - 1];
		touch(mp);
		if (sendmessage(mp, obuf, ignore, NULL) < 0) {
			warn("%s", file);
			(void)Fclose(obuf);
			return(1);
		}
		if (mark)
			mp->m_flag |= MSAVED;
	}
	fflush(obuf);
	if (ferror(obuf))
		warn("%s", file);
	(void)Fclose(obuf);
	printf("%s\n", disp);
	return(0);
}

/*
 * Write the indicated messages at the end of the passed
 * file name, minus header and trailing blank line.
 */
int
swrite(void *v)
{
	char *str = v;

	return(save1(str, 1, "write", ignoreall));
}

/*
 * Snarf the file from the end of the command line and
 * return a pointer to it.  If there is no file attached,
 * just return NULL.  Put a null in front of the file
 * name so that the message list processing won't see it,
 * unless the file name is the only thing on the line, in
 * which case, return 0 in the reference flag variable.
 */
char *
snarf(char *linebuf, int *flag)
{
	char *cp;

	*flag = 1;
	cp = strlen(linebuf) + linebuf - 1;

	/*
	 * Strip away trailing blanks.
	 */
	while (cp > linebuf && isspace((unsigned char)*cp))
		cp--;
	*++cp = 0;

	/*
	 * Now search for the beginning of the file name.
	 */
	while (cp > linebuf && !isspace((unsigned char)*cp))
		cp--;
	if (*cp == '\0') {
		puts("No file specified.");
		return(NULL);
	}
	if (isspace((unsigned char)*cp))
		*cp++ = 0;
	else
		*flag = 0;
	return(cp);
}

/*
 * Delete messages.
 */
int
deletecmd(void *v)
{
	int *msgvec = v;

	delm(msgvec);
	return(0);
}

/*
 * Delete messages, then type the new dot.
 */
int
deltype(void *v)
{
	int *msgvec = v;
	int list[2];
	int lastdot;

	lastdot = dot - &message[0] + 1;
	if (delm(msgvec) >= 0) {
		list[0] = dot - &message[0] + 1;
		if (list[0] > lastdot) {
			touch(dot);
			list[1] = 0;
			return(type(list));
		}
		puts("At EOF");
	} else
		puts("No more messages");
	return(0);
}

/*
 * Delete the indicated messages.
 * Set dot to some nice place afterwards.
 * Internal interface.
 */
int
delm(int *msgvec)
{
	struct message *mp;
	int *ip, last;

	last = 0;
	for (ip = msgvec; *ip != 0; ip++) {
		mp = &message[*ip - 1];
		touch(mp);
		mp->m_flag |= MDELETED|MTOUCH;
		mp->m_flag &= ~(MPRESERVE|MSAVED|MBOX);
		last = *ip;
	}
	if (last != 0) {
		dot = &message[last-1];
		last = first(0, MDELETED);
		if (last != 0) {
			dot = &message[last-1];
			return(0);
		}
		else {
			dot = &message[0];
			return(-1);
		}
	}

	/*
	 * Following can't happen
	 */
	return(-1);
}

/*
 * Undelete the indicated messages.
 */
int
undeletecmd(void *v)
{
	int *msgvec = v;
	int *ip;
	struct message *mp;

	for (ip = msgvec; *ip && ip-msgvec < msgCount; ip++) {
		mp = &message[*ip - 1];
		touch(mp);
		dot = mp;
		mp->m_flag &= ~MDELETED;
	}
	return(0);
}

/*
 * Add the given header fields to the retained list.
 * If no arguments, print the current list of retained fields.
 */
int
retfield(void *v)
{
	char **list = v;

	return(ignore1(list, ignore + 1, "retained"));
}

/*
 * Add the given header fields to the ignored list.
 * If no arguments, print the current list of ignored fields.
 */
int
igfield(void *v)
{
	char **list = v;

	return(ignore1(list, ignore, "ignored"));
}

int
saveretfield(void *v)
{
	char **list = v;

	return(ignore1(list, saveignore + 1, "retained"));
}

int
saveigfield(void *v)
{
	char **list = v;

	return(ignore1(list, saveignore, "ignored"));
}

int
ignore1(char **list, struct ignoretab *tab, char *which)
{
	char field[LINESIZE];
	char **ap;
	struct ignore *igp;
	int h;

	if (*list == NULL)
		return(igshow(tab, which));
	for (ap = list; *ap != 0; ap++) {
		istrlcpy(field, *ap, sizeof(field));
		if (member(field, tab))
			continue;
		h = hash(field);
		igp = calloc(1, sizeof(struct ignore));
		if (igp == NULL)
			err(1, "calloc");
		igp->i_field = strdup(field);
		if (igp->i_field == NULL)
			err(1, "strdup");
		igp->i_link = tab->i_head[h];
		tab->i_head[h] = igp;
		tab->i_count++;
	}
	return(0);
}

/*
 * Print out all currently retained fields.
 */
int
igshow(struct ignoretab *tab, char *which)
{
	int h;
	struct ignore *igp;
	char **ap, **ring;

	if (tab->i_count == 0) {
		printf("No fields currently being %s.\n", which);
		return(0);
	}
	ring = (char **)salloc((tab->i_count + 1) * sizeof(char *));
	ap = ring;
	for (h = 0; h < HSHSIZE; h++)
		for (igp = tab->i_head[h]; igp != 0; igp = igp->i_link)
			*ap++ = igp->i_field;
	*ap = 0;
	qsort(ring, tab->i_count, sizeof(char *), igcomp);
	for (ap = ring; *ap != 0; ap++)
		puts(*ap);
	return(0);
}

/*
 * Compare two names for sorting ignored field list.
 */
static int
igcomp(const void *l, const void *r)
{

	return(strcmp(*(char **)l, *(char **)r));
}
@


1.21
log
@lint is dead (long live the lint!), so stop using it as a cpp conditional
(namespace pollution!) or talking about its opinion on code.

ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cmd2.c,v 1.20 2014/01/17 18:42:30 okan Exp $	*/
d395 1
a395 1
		igp = (struct ignore *)calloc(1, sizeof(struct ignore));
d397 1
a397 1
			errx(1, "Out of memory");
d400 1
a400 1
			errx(1, "Out of memory");
@


1.20
log
@ctype and other sign extension fixes.

with deraadt and millert, ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: cmd2.c,v 1.19 2012/11/14 13:22:37 gsoares Exp $	*/
d316 1
a316 1
	 * Following can't happen -- it keeps lint happy
@


1.19
log
@use F_OK macro instead of 0 in access() when checking by file existence. make the code easier to read.
no functional change.

OK millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cmd2.c,v 1.18 2011/04/06 11:36:26 miod Exp $	*/
d227 1
a227 1
	while (cp > linebuf && isspace(*cp))
d234 1
a234 1
	while (cp > linebuf && !isspace(*cp))
d240 1
a240 1
	if (isspace(*cp))
@


1.18
log
@Avoid using NULL in non-pointer contexts: use 0 for integer values and '\0'
for chars.
@
text
@d1 1
a1 1
/*	$OpenBSD: cmd2.c,v 1.17 2009/10/27 23:59:40 deraadt Exp $	*/
d169 1
a169 1
	if (access(file, 0) >= 0)
@


1.17
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: cmd2.c,v 1.16 2009/07/28 16:05:04 martynas Exp $	*/
d56 1
a56 1
	if (*msgvec != NULL) {
d68 1
a68 1
		for (ip = msgvec; *ip != NULL; ip++)
d80 1
a80 1
			if (*ip2 != NULL)
d113 1
a113 1
	list[1] = NULL;
d161 1
a161 1
		msgvec[1] = NULL;
d274 1
a274 1
			list[1] = NULL;
d294 2
a295 2
	last = NULL;
	for (ip = msgvec; *ip != NULL; ip++) {
d302 1
a302 1
	if (last != NULL) {
d305 1
a305 1
		if (last != NULL) {
@


1.16
log
@remove core / tilde C.  it's useless, doesn't work, never has been
documented, ^\ should be used instead.  ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cmd2.c,v 1.15 2004/09/15 22:21:40 deraadt Exp $	*/
a31 8

#ifndef lint
#if 0
static const char sccsid[] = "@@(#)cmd2.c	8.1 (Berkeley) 6/6/93";
#else
static const char rcsid[] = "$OpenBSD: cmd2.c,v 1.15 2004/09/15 22:21:40 deraadt Exp $";
#endif
#endif /* not lint */
@


1.15
log
@avoid aliasing against libc symbols
@
text
@d1 1
a1 1
/*	$OpenBSD: cmd2.c,v 1.14 2004/05/10 12:10:50 millert Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: cmd2.c,v 1.14 2004/05/10 12:10:50 millert Exp $";
a344 27
	return(0);
}

/*
 * Interactively dump core on "core"
 */
int
core(void *v)
{
	pid_t pid;
	extern int wait_status;

	switch (pid = vfork()) {
	case -1:
		warn("vfork");
		return(1);
	case 0:
		abort();
		_exit(1);
	}
	fputs("Okie dokie", stdout);
	fflush(stdout);
	wait_child(pid);
	if (WIFSIGNALED(wait_status) && WCOREDUMP(wait_status))
		puts(" -- Core dumped.");
	else
		puts(" -- Can't dump core.");
@


1.14
log
@Get rid of the ancient "clobber" command.  It was really only for debugging
purposes.  Noticed and OK by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cmd2.c,v 1.13 2003/10/24 20:32:06 avsm Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: cmd2.c,v 1.13 2003/10/24 20:32:06 avsm Exp $";
d259 1
a259 1
delete(void *v)
@


1.13
log
@dont compare int to NULL, millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: cmd2.c,v 1.12 2003/06/03 02:56:11 millert Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: cmd2.c,v 1.12 2003/06/03 02:56:11 millert Exp $";
a372 34
}

/*
 * Clobber as many bytes of stack as the user requests.
 */
int
clobber(void *v)
{
	char **argv = v;
	int times;

	if (argv[0] == 0)
		times = 1;
	else
		times = (atoi(argv[0]) + 511) / 512;
	clob1(times);
	return(0);
}

/*
 * Clobber the stack.
 */
void
clob1(n)
	int n;
{
	char buf[512];
	char *cp;

	if (n <= 0)
		return;
	for (cp = buf; cp < &buf[512]; *cp++ = 0xFF)
		;
	clob1(n - 1);
@


1.12
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: cmd2.c,v 1.11 2001/11/21 20:41:55 millert Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: cmd2.c,v 1.11 2001/11/21 20:41:55 millert Exp $";
d79 1
a79 1
		if (*ip == NULL)
d90 1
a90 1
			if (*ip2 == NULL)
d165 1
a165 1
		if (*msgvec == NULL) {
@


1.11
log
@o kill strcpy()
o check return values of malloc and friends
o use strdup() when sensible
@
text
@d1 1
a1 1
/*	$OpenBSD: cmd2.c,v 1.10 2001/11/21 15:26:39 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: cmd2.c,v 1.10 2001/11/21 15:26:39 millert Exp $";
@


1.10
log
@o ANSIfy
o Style nits
o Use const to silent stupid -Wall warnings
o strnc{py,at} -> strlc{py,at}
o Use strpbrk() instead of homegrown anyof()
o Use NULL instead of #defines with 0 cast to a pointer
This still could use a proper audit
@
text
@d1 1
a1 1
/*	$OpenBSD: cmd2.c,v 1.9 2000/04/26 15:47:30 millert Exp $	*/
d41 1
a41 1
static const char rcsid[] = "$OpenBSD: cmd2.c,v 1.9 2000/04/26 15:47:30 millert Exp $";
d469 5
a473 2
		igp->i_field = (char *)calloc(strlen(field) + 1, sizeof(char));
		strcpy(igp->i_field, field);
@


1.9
log
@Change the name of mail's send() function to sendmessages() to
avoid shadowing the libc send(2); gadams@@avernus.com
@
text
@d1 1
a1 1
/*	$OpenBSD: cmd2.c,v 1.8 1997/11/14 00:23:43 millert Exp $	*/
d39 1
a39 1
static char sccsid[] = "@@(#)cmd2.c	8.1 (Berkeley) 6/6/93";
d41 1
a41 1
static char rcsid[] = "$OpenBSD: cmd2.c,v 1.8 1997/11/14 00:23:43 millert Exp $";
d54 1
a54 1
static int igcomp __P((const void *, const void *));
d62 1
a62 2
next(v)
	void *v;
a68 1

a73 1

a79 1

a104 1

a111 1

a123 1

d134 1
a134 2
save(v)
	void *v;
d145 1
a145 2
copycmd(v)
	void *v;
d157 1
a157 5
save1(str, mark, cmd, ignore)
	char str[];
	int mark;
	char *cmd;
	struct ignoretab *ignore;
d213 1
a213 2
swrite(v)
	void *v;
a227 1

d229 1
a229 3
snarf(linebuf, flag)
	char linebuf[];
	int *flag;
a238 1

a245 1

d263 1
a263 2
delete(v)
	void *v;
d266 1
d275 1
a275 2
deltype(v)
	void *v;
d301 1
a301 2
delm(msgvec)
	int *msgvec;
a329 1

d337 1
a337 2
undeletecmd(v)
	void *v;
d356 1
a356 2
core(v)
	void *v;
d358 1
a358 1
	int pid;
d383 1
a383 2
clobber(v)
	void *v;
d418 1
a418 2
retfield(v)
	void *v;
d430 1
a430 2
igfield(v)
	void *v;
d438 1
a438 2
saveretfield(v)
	void *v;
d446 1
a446 2
saveigfield(v)
	void *v;
d454 1
a454 4
ignore1(list, tab, which)
	char *list[];
	struct ignoretab *tab;
	char *which;
d464 1
a464 1
		istrncpy(field, *ap, sizeof(field));
d482 1
a482 3
igshow(tab, which)
	struct ignoretab *tab;
	char *which;
d508 1
a508 2
igcomp(l, r)
	const void *l, *r;
d510 1
@


1.8
log
@NetBSD changes (mostly comsmetic):
    replace panic() with calls to err()/errx()
    use S_IS* instead of doing by hand with S_IF*.
    Use TIMESPEC_TO_TIMEVAL() and gettimeofday instead of time(2)
    Use _POSIX_VDISABLE, not 0
    Kill register
@
text
@d1 1
a1 1
/*	$OpenBSD: cmd2.c,v 1.7 1997/08/31 14:32:13 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: cmd2.c,v 1.7 1997/08/31 14:32:13 millert Exp $";
d205 1
a205 1
		if (send(mp, obuf, ignore, NULL) < 0) {
@


1.7
log
@Kill union wait.
@
text
@d1 1
a1 1
/*	$OpenBSD: cmd2.c,v 1.6 1997/07/30 07:19:29 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: cmd2.c,v 1.6 1997/07/30 07:19:29 millert Exp $";
d65 1
d67 1
a67 3
	register struct message *mp;
	register int *ip, *ip2;
	int list[2], mdot;
d172 1
a172 2
	register int *ip;
	register struct message *mp;
d174 1
a174 1
	int f, *msgvec;
d206 1
a206 1
			perror(file);
d215 1
a215 1
		perror(file);
d248 1
a248 1
	register char *cp;
d324 2
a325 3
	register struct message *mp;
	register *ip;
	int last;
d363 2
a364 2
	register struct message *mp;
	register *ip;
d387 1
a387 1
		perror("fork");
d411 1
a411 1
	register int times;
d429 1
a429 1
	register char *cp;
a488 2
	register int h;
	register struct ignore *igp;
d490 2
d518 1
a518 1
	register int h;
@


1.6
log
@Make istrcpy() take a size (not length) field, now called istrncpy().
Change some strcpy() -> strncpy() out of paranoia.
@
text
@d1 1
a1 1
/*	$OpenBSD: cmd2.c,v 1.5 1997/07/14 00:24:24 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: cmd2.c,v 1.5 1997/07/14 00:24:24 millert Exp $";
d386 1
a386 1
	extern union wait wait_status;
d399 1
a399 1
	if (wait_status.w_coredump)
@


1.5
log
@NOSTR -> NULL
Use sigsetjmp/siglongjmp instead of sigjmp/longjmp for portability.
@
text
@d1 1
a1 1
/*	$OpenBSD: cmd2.c,v 1.4 1997/07/13 23:53:57 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: cmd2.c,v 1.4 1997/07/13 23:53:57 millert Exp $";
d499 1
a499 1
		istrcpy(field, *ap);
@


1.4
log
@bcopy() -> memcpy() and fix some casts.
@
text
@d1 1
a1 1
/*	$OpenBSD: cmd2.c,v 1.3 1997/07/13 21:21:09 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: cmd2.c,v 1.3 1997/07/13 21:21:09 millert Exp $";
d180 1
a180 1
	if ((file = snarf(str, &f)) == NOSTR)
d192 1
a192 1
	if ((file = expand(file)) == NOSTR)
d201 1
a201 1
		warn(NOSTR);
d207 1
a207 1
		if (send(mp, obuf, ignore, NOSTR) < 0) {
d239 1
a239 1
 * just return NOSTR.  Put a null in front of the file
d271 1
a271 1
		return(NOSTR);
d496 1
a496 1
	if (*list == NOSTR)
@


1.3
log
@Merge in NetBSD and 4.4BSD-lite2 changes as well as some of my own.
 - handle long lines safely (from NetBSD)
 - use puts/fputs and putchar/putc when it makes sense
 - use err/errx and warn/warnx when it makes sense
 - make return() and sizeof() style consisten
 - some more buffer safety
@
text
@d1 1
a1 1
/*	$OpenBSD: cmd2.c,v 1.2 1996/06/11 12:53:33 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: cmd2.c,v 1.2 1996/06/11 12:53:33 deraadt Exp $";
d179 1
a179 1
	msgvec = (int *) salloc((msgCount + 2) * sizeof(*msgvec));
d503 2
a504 3
		igp = (struct ignore *) calloc(1, sizeof(struct ignore));
		igp->i_field = calloc((unsigned) strlen(field) + 1,
			sizeof(char));
d529 1
a529 1
	ring = (char **) salloc((tab->i_count + 1) * sizeof(char *));
@


1.2
log
@from christos;
- Fix PR/105: Implement dot locking protocol and check return value of flock.
- Fix PR/2247: Don't call unknown users "ubluit". Issue an error message.
- Fix/add prototypes.
- Fix warnings.
- Use POSIX signal mask calls.
@
text
@d1 2
a2 2
/*	$OpenBSD: cmd2.c,v 1.5 1996/06/08 19:48:13 christos Exp $	*/
/*	$NetBSD: cmd2.c,v 1.5 1996/06/08 19:48:13 christos Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: cmd2.c,v 1.5 1996/06/08 19:48:13 christos Exp $";
d73 1
a73 1
		 * If some messages were supplied, find the 
d102 1
a102 1
		printf("No messages applicable\n");
d123 1
a123 1
		printf("At EOF\n");
d147 1
a147 1
	return save1(str, 1, "save", saveignore);
d159 1
a159 1
	return save1(str, 0, "copy", saveignore);
d179 1
a179 1
	msgvec = (int *) salloc((msgCount + 2) * sizeof *msgvec);
d201 1
a201 1
		perror(NOSTR);
d209 1
a209 1
			Fclose(obuf);
d218 1
a218 1
	Fclose(obuf);
d233 1
a233 1
	return save1(str, 1, "write", ignoreall);
d270 1
a270 1
		printf("No file specified.\n");
d289 1
a289 1
	return 0;
d311 1
a311 1
		printf("At EOF\n");
d313 1
a313 1
		printf("No more messages\n");
d375 1
a375 1
	return 0;
d396 1
a396 1
	printf("Okie dokie");
d400 1
a400 1
		printf(" -- Core dumped.\n");
d402 2
a403 2
		printf(" -- Can't dump core.\n");
	return 0;
d421 1
a421 1
	return 0;
d451 1
a451 1
	return ignore1(list, ignore + 1, "retained");
d464 1
a464 1
	return ignore1(list, ignore, "ignored");
d473 1
a473 1
	return ignore1(list, saveignore + 1, "retained");
d482 1
a482 1
	return ignore1(list, saveignore, "ignored");
d491 1
a491 1
	char field[BUFSIZ];
d497 1
a497 1
		return igshow(tab, which);
d503 1
a503 1
		igp = (struct ignore *) calloc(1, sizeof (struct ignore));
d505 1
a505 1
			sizeof (char));
d511 1
a511 1
	return 0;
d528 1
a528 1
		return 0;
d530 1
a530 1
	ring = (char **) salloc((tab->i_count + 1) * sizeof (char *));
d536 1
a536 1
	qsort(ring, tab->i_count, sizeof (char *), igcomp);
d538 2
a539 2
		printf("%s\n", *ap);
	return 0;
d549 1
a549 1
	return (strcmp(*(char **)l, *(char **)r));
@


1.1
log
@Initial revision
@
text
@d1 3
d38 5
a42 2
static char sccsid[] = "from: @@(#)cmd2.c	8.1 (Berkeley) 6/6/93";
static char rcsid[] = "$Id: cmd2.c,v 1.4 1994/12/28 13:16:12 mycroft Exp $";
d54 1
d62 2
a63 2
next(msgvec)
	int *msgvec;
d65 1
d142 2
a143 2
save(str)
	char str[];
d145 1
d154 2
a155 2
copycmd(str)
	char str[];
d157 1
d228 2
a229 2
swrite(str)
	char str[];
d231 1
d284 2
a285 2
delete(msgvec)
	int msgvec[];
d287 1
d296 2
a297 2
deltype(msgvec)
	int msgvec[];
d299 1
d362 2
a363 2
undeletecmd(msgvec)
	int *msgvec;
d365 1
d382 2
a383 1
core()
d410 2
a411 2
clobber(argv)
	char **argv;
d413 1
d446 2
a447 2
retfield(list)
	char *list[];
d449 1
d459 2
a460 2
igfield(list)
	char *list[];
d462 1
d468 2
a469 2
saveretfield(list)
	char *list[];
d471 1
d477 2
a478 2
saveigfield(list)
	char *list[];
d480 1
a524 1
	int igcomp();
d545 1
a545 1
int
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
