head	1.13;
access;
symbols
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.4
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.12.0.26
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.18
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.22
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.20
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.16
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.14
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.12
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.10
	OPENBSD_5_0:1.12.0.8
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.6
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.4
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.11.0.12
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.8
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.6
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.4
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.2
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.10.0.16
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.14
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.12
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.10
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.8
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.6
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.9.0.4
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.6.0.4
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_8:1.5.0.12
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.10
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.8
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.6
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.4
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2015.10.16.17.56.07;	author mmcc;	state Exp;
branches;
next	1.12;
commitid	y3aqfd1wS5RZj9kl;

1.12
date	2009.10.27.23.59.40;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2007.06.19.05.47.41;	author ray;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.03.02.56.11;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.08.12.00.42.56;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	2001.11.21.20.41.56;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2001.11.21.15.26.39;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.01.16.05.36.09;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.11.14.00.24.01;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.07.13.23.54.03;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.07.13.21.21.18;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.06.11.12.53.53;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.39;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.39;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Modernize allocation by:

 * removing unneeded casts of void* return values
 * replacing varied and creative error messages with the allocation
   function's name
 * replacing errx() with err() so that the errno string is reported

ok beck@@, jung@@, millert@@
@
text
@/*	$OpenBSD: vars.c,v 1.12 2009/10/27 23:59:40 deraadt Exp $	*/
/*	$NetBSD: vars.c,v 1.4 1996/06/08 19:48:45 christos Exp $	*/

/*
 * Copyright (c) 1980, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "rcv.h"
#include "extern.h"

/*
 * Mail -- a mail program
 *
 * Variable handling stuff.
 */

/*
 * Assign a value to a variable.
 */
void
assign(char *name, char *value)
{
	struct var *vp;
	int h;

	h = hash(name);
	vp = lookup(name);
	if (vp == NULL) {
		if ((vp = calloc(1, sizeof(*vp))) == NULL)
			err(1, "calloc");
		vp->v_name = vcopy(name);
		vp->v_link = variables[h];
		variables[h] = vp;
	}
	else
		vfree(vp->v_value);
	vp->v_value = vcopy(value);
}

/*
 * Free up a variable string.  We do not bother to allocate
 * strings whose value is "" since they are expected to be frequent.
 * Thus, we cannot free same!
 */
void
vfree(char *cp)
{

	if (*cp)
		(void)free(cp);
}

/*
 * Copy a variable value into permanent (ie, not collected after each
 * command) space.  Do not bother to alloc space for ""
 */
char *
vcopy(char *str)
{
	char *new;

	if (*str == '\0')
		return("");
	if ((new = strdup(str)) == NULL)
		err(1, "strdup");
	return(new);
}

/*
 * Get the value of a variable and return it.
 * Look in the environment if it's not available locally.
 */

char *
value(char *name)
{
	struct var *vp;
	char *env;

	if ((vp = lookup(name)) != NULL)
		return(vp->v_value);
	else if ((env = getenv(name)))
		return(env);
	/* not set, see if we can provide a default */
	else if (strcmp(name, "SHELL") == 0)
		return(_PATH_CSHELL);
	else if (strcmp(name, "LISTER") == 0)
		return(_PATH_LS);
	else if (strcmp(name, "PAGER") == 0)
		return(_PATH_MORE);
	else
		return(NULL);
}

/*
 * Locate a variable and return its variable
 * node.
 */
struct var *
lookup(char *name)
{
	struct var *vp;

	for (vp = variables[hash(name)]; vp != NULL; vp = vp->v_link)
		if (*vp->v_name == *name && equal(vp->v_name, name))
			return(vp);
	return(NULL);
}

/*
 * Locate a group name and return it.
 */
struct grouphead *
findgroup(char *name)
{
	struct grouphead *gh;

	for (gh = groups[hash(name)]; gh != NULL; gh = gh->g_link)
		if (*gh->g_name == *name && equal(gh->g_name, name))
			return(gh);
	return(NULL);
}

/*
 * Print a group out on stdout
 */
void
printgroup(char *name)
{
	struct grouphead *gh;
	struct group *gp;

	if ((gh = findgroup(name)) == NULL) {
		printf("\"%s\": not a group\n", name);
		return;
	}
	printf("%s\t", gh->g_name);
	for (gp = gh->g_list; gp != NULL; gp = gp->ge_link)
		printf(" %s", gp->ge_name);
	putchar('\n');
}

/*
 * Hash the passed string and return an index into
 * the variable or group hash table.
 */
int
hash(char *name)
{
	int h = 0;

	while (*name) {
		h <<= 2;
		h += *name++;
	}
	if (h < 0 && (h = -h) < 0)
		h = 0;
	return(h % HSHSIZE);
}
@


1.12
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: vars.c,v 1.11 2007/06/19 05:47:41 ray Exp $	*/
d54 2
a55 2
		if ((vp = (struct var *)calloc(1, sizeof(*vp))) == NULL)
			errx(1, "Out of memory");
d90 1
a90 1
		errx(1, "Out of memory");
@


1.11
log
@Grammar-o.

OK jmc
@
text
@d1 1
a1 1
/*	$OpenBSD: vars.c,v 1.10 2003/06/03 02:56:11 millert Exp $	*/
a31 8

#ifndef lint
#if 0
static const char sccsid[] = "@@(#)vars.c	8.1 (Berkeley) 6/6/93";
#else
static const char rcsid[] = "$OpenBSD: vars.c,v 1.10 2003/06/03 02:56:11 millert Exp $";
#endif
#endif /* not lint */
@


1.10
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: vars.c,v 1.9 2002/08/12 00:42:56 aaron Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: vars.c,v 1.9 2002/08/12 00:42:56 aaron Exp $";
d104 1
a104 1
 * Look in the environment if its not available locally.
@


1.9
log
@Swap args to calloc(3) so they are in the correct order; art@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: vars.c,v 1.8 2001/11/21 20:41:56 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: vars.c,v 1.8 2001/11/21 20:41:56 millert Exp $";
@


1.8
log
@o kill strcpy()
o check return values of malloc and friends
o use strdup() when sensible
@
text
@d1 1
a1 1
/*	$OpenBSD: vars.c,v 1.7 2001/11/21 15:26:39 millert Exp $	*/
d41 1
a41 1
static const char rcsid[] = "$OpenBSD: vars.c,v 1.7 2001/11/21 15:26:39 millert Exp $";
d66 1
a66 1
		if ((vp = (struct var *)calloc(sizeof(*vp), 1)) == NULL)
@


1.7
log
@o ANSIfy
o Style nits
o Use const to silent stupid -Wall warnings
o strnc{py,at} -> strlc{py,at}
o Use strpbrk() instead of homegrown anyof()
o Use NULL instead of #defines with 0 cast to a pointer
This still could use a proper audit
@
text
@d1 1
a1 1
/*	$OpenBSD: vars.c,v 1.6 2001/01/16 05:36:09 millert Exp $	*/
d41 1
a41 1
static const char rcsid[] = "$OpenBSD: vars.c,v 1.6 2001/01/16 05:36:09 millert Exp $";
d66 2
a67 1
		vp = (struct var *)calloc(sizeof(*vp), 1);
@


1.6
log
@Changes from Don Beusee:
o escape From line with a leading '>' when needed
o only print To: address and Subject lines if actually present
o new variable 'allnet' to treat user@@foo and user@@bar as the same "user"
o folders command now takes an optional argument like ls.
o new "pipe" (|) command to pipe the message through an arbitrary command
o make header display format the same as SunOS 4.1.3 /usr/ucb/mail
o tilde commands work regardless of interactive mode.
o fix "read: Interrupted system call" error by retrying if EINTR
o expanded help file
Changes by me:
o read the help file via the PAGER as it is now more than 24 lines long
@
text
@d1 1
a1 1
/*	$OpenBSD: vars.c,v 1.5 1997/11/14 00:24:01 millert Exp $	*/
d39 1
a39 1
static char sccsid[] = "@@(#)vars.c	8.1 (Berkeley) 6/6/93";
d41 1
a41 1
static char rcsid[] = "$OpenBSD: vars.c,v 1.5 1997/11/14 00:24:01 millert Exp $";
d58 1
a58 2
assign(name, value)
	char name[], value[];
d65 1
a65 1
	if (vp == NOVAR) {
d82 1
a82 2
vfree(cp)
	char *cp;
d84 1
a92 1

d94 1
a94 2
vcopy(str)
	char str[];
a96 1
	unsigned len;
d100 1
a100 2
	len = strlen(str) + 1;
	if ((new = (char *)malloc(len)) == NULL)
a101 1
	(void)memcpy(new, str, len);
d111 1
a111 2
value(name)
	char name[];
d116 1
a116 1
	if ((vp = lookup(name)) != NOVAR)
a134 1

d136 1
a136 2
lookup(name)
	char name[];
d140 1
a140 1
	for (vp = variables[hash(name)]; vp != NOVAR; vp = vp->v_link)
d143 1
a143 1
	return(NOVAR);
a148 1

d150 1
a150 2
findgroup(name)
	char name[];
d154 1
a154 1
	for (gh = groups[hash(name)]; gh != NOGRP; gh = gh->g_link)
d157 1
a157 1
	return(NOGRP);
d164 1
a164 2
printgroup(name)
	char name[];
d169 1
a169 1
	if ((gh = findgroup(name)) == NOGRP) {
d174 1
a174 1
	for (gp = gh->g_list; gp != NOGE; gp = gp->ge_link)
d184 1
a184 2
hash(name)
	char *name;
@


1.5
log
@NetBSD changes (mostly comsmetic):
    replace panic() with calls to err()/errx()
    use S_IS* instead of doing by hand with S_IF*.
    Use TIMESPEC_TO_TIMEVAL() and gettimeofday instead of time(2)
    Use _POSIX_VDISABLE, not 0
    Kill register
@
text
@d1 1
a1 1
/*	$OpenBSD: vars.c,v 1.4 1997/07/13 23:54:03 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: vars.c,v 1.4 1997/07/13 23:54:03 millert Exp $";
d121 1
d123 13
a135 3
	if ((vp = lookup(name)) == NOVAR)
		return(getenv(name));
	return(vp->v_value);
@


1.4
log
@bcopy() -> memcpy() and fix some casts.
@
text
@d1 1
a1 1
/*	$OpenBSD: vars.c,v 1.3 1997/07/13 21:21:18 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: vars.c,v 1.3 1997/07/13 21:21:18 millert Exp $";
d61 2
a62 2
	register struct var *vp;
	register int h;
d106 1
a106 1
		panic("Out of memory");
d120 1
a120 1
	register struct var *vp;
d134 1
a134 1
	register char name[];
d136 1
a136 1
	register struct var *vp;
d150 1
a150 1
	register char name[];
d152 1
a152 1
	register struct grouphead *gh;
d167 2
a168 2
	register struct grouphead *gh;
	register struct group *gp;
d186 1
a186 1
	register char *name;
d188 1
a188 1
	register h = 0;
@


1.3
log
@Merge in NetBSD and 4.4BSD-lite2 changes as well as some of my own.
 - handle long lines safely (from NetBSD)
 - use puts/fputs and putchar/putc when it makes sense
 - use err/errx and warn/warnx when it makes sense
 - make return() and sizeof() style consisten
 - some more buffer safety
@
text
@d1 1
a1 1
/*	$OpenBSD: vars.c,v 1.2 1996/06/11 12:53:53 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: vars.c,v 1.2 1996/06/11 12:53:53 deraadt Exp $";
d67 1
a67 1
		vp = (struct var *) calloc(sizeof(*vp), 1);
d87 1
a87 1
		free(cp);
d105 1
a105 1
	if ((new = malloc(len)) == NULL)
d107 1
a107 1
	bcopy(str, new, (int) len);
@


1.2
log
@from christos;
- Fix PR/105: Implement dot locking protocol and check return value of flock.
- Fix PR/2247: Don't call unknown users "ubluit". Issue an error message.
- Fix/add prototypes.
- Fix warnings.
- Use POSIX signal mask calls.
@
text
@d1 1
a1 1
/*	$OpenBSD: vars.c,v 1.4 1996/06/08 19:48:45 christos Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: vars.c,v 1.4 1996/06/08 19:48:45 christos Exp $";
d67 1
a67 1
		vp = (struct var *) calloc(sizeof *vp, 1);
d103 1
a103 1
		return "";
d108 1
a108 1
	return new;
d196 1
a196 1
	return (h % HSHSIZE);
@


1.1
log
@Initial revision
@
text
@d1 3
d38 5
a42 2
static char sccsid[] = "from: @@(#)vars.c	8.1 (Berkeley) 6/6/93";
static char rcsid[] = "$Id: vars.c,v 1.3 1994/06/29 05:09:49 deraadt Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
