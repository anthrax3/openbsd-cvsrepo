head	1.17;
access;
symbols
	OPENBSD_6_2:1.17.0.10
	OPENBSD_6_2_BASE:1.17
	OPENBSD_6_1:1.17.0.8
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.17.0.4
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.16.0.14
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.6
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.10
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.8
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.4
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.2
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.15.0.8
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.6
	OPENBSD_5_0:1.15.0.4
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.2
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.14.0.4
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.2
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.13.0.10
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.6
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.4
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.2
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.12.0.18
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.16
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.14
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.12
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.10
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.8
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.12.0.6
	OPENBSD_3_6_BASE:1.12
	OPENBSD_3_5:1.12.0.4
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.12.0.2
	OPENBSD_3_4_BASE:1.12
	OPENBSD_3_3:1.10.0.4
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.2
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.20
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.17
date	2015.08.20.22.32.41;	author deraadt;	state Exp;
branches;
next	1.16;
commitid	0Dp7Dy9FuNZesYo2;

1.16
date	2012.12.05.23.20.26;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2010.09.01.14.43.34;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2009.10.27.23.59.42;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2007.10.03.14.35.48;	author weingart;	state Exp;
branches;
next	1.12;

1.12
date	2003.07.09.03.35.21;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.25.21.09.26;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2002.07.05.05.39.42;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2002.06.01.01.40.38;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2002.02.16.21.27.51;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2001.12.05.09.50.31;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2001.11.24.19.19.59;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2001.11.24.19.17.47;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2001.07.18.22.26.00;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2001.07.17.02.23.59;	author pvalchev;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.38.41;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.46.02;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.46.02;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Do not cast result of malloc/calloc/realloc* if stdlib.h is in scope
ok krw millert
@
text
@/*	$OpenBSD: rpc_util.c,v 1.16 2012/12/05 23:20:26 deraadt Exp $	*/
/*	$NetBSD: rpc_util.c,v 1.6 1995/08/29 23:05:57 cgd Exp $	*/

/*
 * Copyright (c) 2010, Oracle America, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimer in the documentation and/or other materials
 *       provided with the distribution.
 *     * Neither the name of the "Oracle America, Inc." nor the names of its
 *       contributors may be used to endorse or promote products derived
 *       from this software without specific prior written permission.
 *
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *   FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *   COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 *   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 *   GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 *   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * rpc_util.c, Utility routines for the RPC protocol compiler
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <unistd.h>
#include "rpc_scan.h"
#include "rpc_parse.h"
#include "rpc_util.h"

#define ARGEXT "argument"

static void printwhere(void);

char curline[MAXLINESIZE];	/* current read line */
char *where = curline;		/* current point in line */
int linenum = 0;		/* current line number */

char *infilename;		/* input filename */

#define NFILES 7
char *outfiles[NFILES];		/* output file names */
int nfiles;

FILE *fout;			/* file pointer of current output */
FILE *fin;			/* file pointer of current input */

list *defined;			/* list of defined things */

/*
 * Reinitialize the world
 */
void
reinitialize()
{
	memset(curline, 0, MAXLINESIZE);
	where = curline;
	linenum = 0;
	defined = NULL;
}

/*
 * string equality
 */
int
streq(a, b)
	char *a;
	char *b;
{
	return (strcmp(a, b) == 0);
}

/*
 * find a value in a list
 */
definition *
findval(lst, val, cmp)
	list *lst;
	char *val;
	int (*cmp) (definition *, char *);
{

	for (; lst != NULL; lst = lst->next) {
		if ((*cmp) (lst->val, val)) {
			return (lst->val);
		}
	}
	return (NULL);
}

/*
 * store a value in a list
 */
void
storeval(lstp, val)
	list **lstp;
	definition *val;
{
	list **l;
	list *lst;

	for (l = lstp; *l != NULL; l = (list **) & (*l)->next)
		;
	lst = malloc(sizeof(list));
	if (lst == NULL) {
		fprintf(stderr, "failed in alloc\n");
		exit(1);
	}
	lst->val = val;
	lst->next = NULL;
	*l = lst;
}

static int
findit(definition *def, char *type)
{
	return (streq(def->def_name, type));
}

static char *
fixit(char *type, char *orig)
{
	definition *def;

	def = (definition *) FINDVAL(defined, type, findit);
	if (def == NULL || def->def_kind != DEF_TYPEDEF) {
		return (orig);
	}
	switch (def->def.ty.rel) {
	case REL_VECTOR:
		return (def->def.ty.old_type);
	case REL_ALIAS:
		return (fixit(def->def.ty.old_type, orig));
	default:
		return (orig);
	}
}

char *
fixtype(type)
	char *type;
{
	return (fixit(type, type));
}

char *
stringfix(type)
	char *type;
{
	if (streq(type, "string")) {
		return ("wrapstring");
	} else {
		return (type);
	}
}

void
ptype(prefix, type, follow)
	char *prefix;
	char *type;
	int follow;
{
	if (prefix != NULL) {
		if (streq(prefix, "enum")) {
			fprintf(fout, "enum ");
		} else {
			fprintf(fout, "struct ");
		}
	}
	if (streq(type, "bool")) {
		fprintf(fout, "bool_t ");
	} else if (streq(type, "string")) {
		fprintf(fout, "char *");
	} else {
		fprintf(fout, "%s ", follow ? fixtype(type) : type);
	}
}

static int
typedefed(definition *def, char *type)
{
	if (def->def_kind != DEF_TYPEDEF || def->def.ty.old_prefix != NULL)
		return (0);
	else
		return (streq(def->def_name, type));
}

int
isvectordef(type, rel)
	char *type;
	relation rel;
{
	definition *def;

	for (;;) {
		switch (rel) {
		case REL_VECTOR:
			return (!streq(type, "string"));
		case REL_ARRAY:
			return (0);
		case REL_POINTER:
			return (0);
		case REL_ALIAS:
			def = (definition *) FINDVAL(defined, type, typedefed);
			if (def == NULL)
				return (0);
			type = def->def.ty.old_type;
			rel = def->def.ty.rel;
		}
	}
}

char *
locase(str)
	char *str;
{
	char c;
	static char buf[100];
	char *p = buf;

	while ((c = *str++))
		*p++ = (c >= 'A' && c <= 'Z') ? (c - 'A' + 'a') : c;
	*p = 0;
	return (buf);
}

void
pvname_svc(pname, vnum)
	char *pname;
	char *vnum;
{
	fprintf(fout, "%s_%s_svc", locase(pname), vnum);
}

void
pvname(pname, vnum)
	char *pname;
	char *vnum;
{
	fprintf(fout, "%s_%s", locase(pname), vnum);
}

/*
 * print a useful (?) error message, and then die
 */
void
error(msg)
	char *msg;
{
	printwhere();
	fprintf(stderr, "%s, line %d: ", infilename, linenum);
	fprintf(stderr, "%s\n", msg);
	crash();
}

/*
 * Something went wrong, unlink any files that we may have created and then
 * die.
 */
void
crash()
{
	int i;

	for (i = 0; i < nfiles; i++) {
		(void) unlink(outfiles[i]);
	}
	exit(1);
}

void
record_open(file)
	char *file;
{
	if (nfiles < NFILES) {
		outfiles[nfiles++] = file;
	} else {
		fprintf(stderr, "too many files!\n");
		crash();
	}
}

static char expectbuf[100];
static char *toktostr(tok_kind);

/*
 * error, token encountered was not the expected one
 */
void
expected1(exp1)
	tok_kind exp1;
{
	snprintf(expectbuf, sizeof expectbuf, "expected '%s'",
	    toktostr(exp1));
	error(expectbuf);
}

/*
 * error, token encountered was not one of two expected ones
 */
void
expected2(exp1, exp2)
	tok_kind exp1, exp2;
{
	snprintf(expectbuf, sizeof expectbuf, "expected '%s' or '%s'",
	    toktostr(exp1), toktostr(exp2));
	error(expectbuf);
}

/*
 * error, token encountered was not one of 3 expected ones
 */
void
expected3(exp1, exp2, exp3)
	tok_kind exp1, exp2, exp3;
{
	snprintf(expectbuf, sizeof expectbuf, "expected '%s', '%s' or '%s'",
	    toktostr(exp1), toktostr(exp2), toktostr(exp3));
	error(expectbuf);
}

void
tabify(f, tab)
	FILE *f;
	int tab;
{
	while (tab--) {
		(void) fputc('\t', f);
	}
}

static token tokstrings[] = {
	{TOK_IDENT, "identifier"},
	{TOK_CONST, "const"},
	{TOK_RPAREN, ")"},
	{TOK_LPAREN, "("},
	{TOK_RBRACE, "}"},
	{TOK_LBRACE, "{"},
	{TOK_LBRACKET, "["},
	{TOK_RBRACKET, "]"},
	{TOK_STAR, "*"},
	{TOK_COMMA, ","},
	{TOK_EQUAL, "="},
	{TOK_COLON, ":"},
	{TOK_SEMICOLON, ";"},
	{TOK_UNION, "union"},
	{TOK_STRUCT, "struct"},
	{TOK_SWITCH, "switch"},
	{TOK_CASE, "case"},
	{TOK_DEFAULT, "default"},
	{TOK_ENUM, "enum"},
	{TOK_TYPEDEF, "typedef"},
	{TOK_INT, "int"},
	{TOK_SHORT, "short"},
	{TOK_LONG, "long"},
	{TOK_UNSIGNED, "unsigned"},
	{TOK_DOUBLE, "double"},
	{TOK_FLOAT, "float"},
	{TOK_CHAR, "char"},
	{TOK_STRING, "string"},
	{TOK_OPAQUE, "opaque"},
	{TOK_BOOL, "bool"},
	{TOK_VOID, "void"},
	{TOK_PROGRAM, "program"},
	{TOK_VERSION, "version"},
	{TOK_EOF, "??????"}
};

static char *
toktostr(tok_kind kind)
{
	token *sp;

	for (sp = tokstrings; sp->kind != TOK_EOF && sp->kind != kind; sp++)
		;
	return (sp->str);
}

static void
printbuf(void)
{
	char c;
	int i;
	int cnt;

#	define TABSIZE 4

	for (i = 0; (c = curline[i]); i++) {
		if (c == '\t') {
			cnt = 8 - (i % TABSIZE);
			c = ' ';
		} else {
			cnt = 1;
		}
		while (cnt--) {
			(void) fputc(c, stderr);
		}
	}
}

static void
printwhere()
{
	int i;
	char c;
	int cnt;

	printbuf();
	for (i = 0; i < where - curline; i++) {
		c = curline[i];
		if (c == '\t') {
			cnt = 8 - (i % TABSIZE);
		} else {
			cnt = 1;
		}
		while (cnt--) {
			(void) fputc('^', stderr);
		}
	}
	(void) fputc('\n', stderr);
}

char *
make_argname(pname, vname)
	char *pname;
	char *vname;
{
	char *name;
	int len = strlen(pname) + strlen(vname) + strlen(ARGEXT) + 3;

	name = malloc(len);
	if (!name) {
		fprintf(stderr, "failed in malloc\n");
		exit(1);
	}
	snprintf(name, len, "%s_%s_%s", locase(pname), vname, ARGEXT);
	return(name);
}

bas_type *typ_list_h;
bas_type *typ_list_t;

void
add_type(len, type)
	int len;
	char *type;
{
	bas_type *ptr;

	if ((ptr = malloc(sizeof(bas_type))) == (bas_type *)NULL) {
		fprintf(stderr, "failed in malloc\n");
		exit(1);
	}

	ptr->name = type;
	ptr->length = len;
	ptr->next = NULL;
	if (typ_list_t == NULL) {
		typ_list_t = ptr;
		typ_list_h = ptr;
	} else {
		typ_list_t->next = ptr;
		typ_list_t = ptr;
	}
}

bas_type *
find_type(type)
	char *type;
{
	bas_type * ptr;

	ptr = typ_list_h;

	while (ptr != NULL) {
		if (strcmp(ptr->name, type) == 0)
			return(ptr);
		else
			ptr = ptr->next;
	}
	return(NULL);
}

@


1.16
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: rpc_util.c,v 1.15 2010/09/01 14:43:34 millert Exp $	*/
d120 1
a120 1
	lst = ALLOC(list);
d447 1
a447 1
	name = (char *)malloc(len);
d466 1
a466 1
	if ((ptr = (bas_type *)malloc(sizeof(bas_type))) == (bas_type *)NULL) {
@


1.15
log
@Oracle has re-licensed sunrpc under a three-clause BSD license.
Update our sources appropriately.  OK deraadt@@ jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rpc_util.c,v 1.14 2009/10/27 23:59:42 deraadt Exp $	*/
a37 1
#include <sys/cdefs.h>
@


1.14
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: rpc_util.c,v 1.13 2007/10/03 14:35:48 weingart Exp $	*/
d3 1
d5 1
a5 7
 * Sun RPC is a product of Sun Microsystems, Inc. and is provided for
 * unrestricted use provided that this legend is included on all tape
 * media and as a part of the software program in whole or part.  Users
 * may copy or modify Sun RPC without charge, but are not authorized
 * to license or distribute it to anyone else except as part of a product or
 * program developed by the user or with the express written consent of
 * Sun Microsystems, Inc.
d7 3
a9 3
 * SUN RPC IS PROVIDED AS IS WITH NO WARRANTIES OF ANY KIND INCLUDING THE
 * WARRANTIES OF DESIGN, MERCHANTIBILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE OR TRADE PRACTICE.
d11 9
a19 3
 * Sun RPC is provided with no support and without any obligation on the
 * part of Sun Microsystems, Inc. to assist in its use, correction,
 * modification or enhancement.
d21 12
a32 11
 * SUN MICROSYSTEMS, INC. SHALL HAVE NO LIABILITY WITH RESPECT TO THE
 * INFRINGEMENT OF COPYRIGHTS, TRADE SECRETS OR ANY PATENTS BY SUN RPC
 * OR ANY PART THEREOF.
 *
 * In no event will Sun Microsystems, Inc. be liable for any lost revenue
 * or profits or other special, indirect and consequential damages, even if
 * Sun has been advised of the possibility of such damages.
 *
 * Sun Microsystems, Inc.
 * 2550 Garcia Avenue
 * Mountain View, California  94043
@


1.13
log
@Some -Wall cleanup to help fix other bugs.
ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rpc_util.c,v 1.12 2003/07/09 03:35:21 deraadt Exp $	*/
a31 4

#ifndef lint
static const char sccsid[] = "@@(#)rpc_util.c 1.11 89/02/22 (C) 1987 SMI";
#endif
@


1.12
log
@protos
@
text
@d1 1
a1 1
/*	$OpenBSD: rpc_util.c,v 1.11 2003/06/25 21:09:26 deraadt Exp $	*/
d34 1
a34 1
static char sccsid[] = "@@(#)rpc_util.c 1.11 89/02/22 (C) 1987 SMI";
@


1.11
log
@protos
@
text
@d1 1
a1 1
/*	$OpenBSD: rpc_util.c,v 1.10 2002/07/05 05:39:42 deraadt Exp $	*/
d134 1
a134 3
findit(def, type)
	definition *def;
	char *type;
d140 1
a140 3
fixit(type, orig)
	char *type;
	char *orig;
d199 1
a199 3
typedefed(def, type)
	definition *def;
	char *type;
d303 1
a303 1
static char *toktostr();
d389 1
a389 2
toktostr(kind)
	tok_kind kind;
d399 1
a399 1
printbuf()
@


1.10
log
@allocation mischecks by cloder@@acm.org; lots of other cleanup by me
@
text
@d1 1
a1 1
/*	$OpenBSD: rpc_util.c,v 1.9 2002/06/01 01:40:38 deraadt Exp $	*/
d99 1
a99 2
	int (*cmp) ();

@


1.9
log
@cleanups
@
text
@d1 1
a1 1
/*	$OpenBSD: rpc_util.c,v 1.8 2002/02/16 21:27:51 millert Exp $	*/
d122 2
a123 1
	for (l = lstp; *l != NULL; l = (list **) & (*l)->next);
d125 4
d208 1
a208 1
	if (def->def_kind != DEF_TYPEDEF || def->def.ty.old_prefix != NULL) {
d210 1
a210 1
	} else {
a211 1
	}
d231 1
a231 1
			if (def == NULL) {
a232 1
			}
d247 1
a247 1
	while ((c = *str++)) {
a248 1
	}
d320 1
a320 1
		toktostr(exp1));
d332 1
a332 2
		toktostr(exp1),
		toktostr(exp2));
d344 1
a344 3
		toktostr(exp1),
		toktostr(exp2),
		toktostr(exp3));
d401 2
a402 1
	for (sp = tokstrings; sp->kind != TOK_EOF && sp->kind != kind; sp++);
d460 1
a460 1
		fprintf(stderr, "failed in malloc");
d471 1
a471 1
add_type(len,type)
d478 1
a478 1
		fprintf(stderr, "failed in malloc");
d482 3
a484 3
	ptr->name=type;
	ptr->length=len;
	ptr->next=NULL;
d486 2
a487 2
		typ_list_t=ptr;
		typ_list_h=ptr;
d489 2
a490 2
		typ_list_t->next=ptr;
		typ_list_t=ptr;
d503 1
a503 1
		if (strcmp(ptr->name,type) == 0)
d506 1
a506 1
			ptr=ptr->next;
@


1.8
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: rpc_util.c,v 1.7 2001/12/05 09:50:31 deraadt Exp $	*/
d184 1
a184 1
			f_print(fout, "enum ");
d186 1
a186 1
			f_print(fout, "struct ");
d190 1
a190 1
		f_print(fout, "bool_t ");
d192 1
a192 1
		f_print(fout, "char *");
d194 1
a194 1
		f_print(fout, "%s ", follow ? fixtype(type) : type);
d256 1
a256 1
	f_print(fout, "%s_%s_svc", locase(pname), vnum);
d264 1
a264 1
	f_print(fout, "%s_%s", locase(pname), vnum);
d275 2
a276 2
	f_print(stderr, "%s, line %d: ", infilename, linenum);
	f_print(stderr, "%s\n", msg);
d302 1
a302 1
		f_print(stderr, "too many files!\n");
d317 1
a317 1
	s_print(expectbuf, "expected '%s'",
d329 1
a329 1
	s_print(expectbuf, "expected '%s' or '%s'",
d342 1
a342 1
	s_print(expectbuf, "expected '%s', '%s' or '%s'",
d456 1
d458 1
a458 1
	name = (char *)malloc(strlen(pname) + strlen(vname) + strlen(ARGEXT) + 3);
d463 1
a463 1
	sprintf(name, "%s_%s_%s", locase(pname), vname, ARGEXT);
@


1.7
log
@KNF, and remove part of the TLI garbage
@
text
@d1 1
a1 1
/*	$OpenBSD: rpc_util.c,v 1.5 2001/11/24 19:17:47 deraadt Exp $	*/
d52 1
a52 1
static void printwhere __P((void));
@


1.6
log
@argh!  i messed something up!
@
text
@d1 1
a1 1
/*	$OpenBSD: rpc_util.c,v 1.4 2001/07/18 22:26:00 deraadt Exp $	*/
d38 1
a38 1
 * rpc_util.c, Utility routines for the RPC protocol compiler 
d45 1
d70 1
a70 1
 * Reinitialize the world 
d72 1
d82 1
a82 1
 * string equality 
d84 1
d93 1
a93 1
 * find a value in a list 
d102 1
a102 1
         
d112 1
a112 1
 * store a value in a list 
a121 1
	
d129 1
a129 1
static
d198 1
a198 1
static
d210 1
d244 1
a244 1
	while (c = *str++) {
d268 1
a268 1
 * print a useful (?) error message, and then die 
d282 1
a282 1
 * die. 
d284 1
d311 1
a311 1
 * error, token encountered was not the expected one 
d323 1
a323 1
 * error, token encountered was not one of two expected ones 
d336 1
a336 1
 * error, token encountered was not one of 3 expected ones 
a358 1

d406 1
a406 1
static
d415 1
a415 1
	for (i = 0; c = curline[i]; i++) {
d450 2
a451 2
char * 
make_argname(pname, vname) 
d456 1
a456 1
	
d499 1
a499 2
	ptr=typ_list_h;

@


1.5
log
@half finished KNF
@
text
@a44 1
#include <unistd.h>
a70 1
void
a81 1
int
d119 1
d127 1
a127 1
static int
d196 1
a196 1
static int
a207 1
int
d241 1
a241 1
	while ((c = *str++)) {
a280 1
void
d355 1
d403 1
a403 1
static void
d412 1
a412 1
	for (i = 0; (c = curline[i]); i++) {
d453 1
a453 1

d496 2
a497 1
	ptr = typ_list_h;
@


1.4
log
@Uhmm, nope, this broke everything
@
text
@d1 1
a1 1
/*	$OpenBSD: rpc_util.c,v 1.2 1996/06/26 05:38:41 deraadt Exp $	*/
d45 1
d72 1
d84 1
a121 1
	
d129 1
a129 1
static
d198 1
a198 1
static
d210 1
d244 1
a244 1
	while (c = *str++) {
d284 1
a358 1

d406 1
a406 1
static
d415 1
a415 1
	for (i = 0; c = curline[i]; i++) {
d456 1
a456 1
	
d499 1
a499 2
	ptr=typ_list_h;

@


1.3
log
@-Wall cleanup; ok deraadt
@
text
@a43 1
#include <unistd.h>
a70 1
void
a81 1
int
d127 1
a127 1
static int
d196 1
a196 1
static int
a207 1
int
a280 1
void
d403 1
a403 1
static void
d412 1
a412 1
	for (i = 0; (c = curline[i]) != '\0'; i++) {
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: rpc_util.c,v 1.6 1995/08/29 23:05:57 cgd Exp $	*/
d44 1
d72 1
d84 1
d130 1
a130 1
static
d199 1
a199 1
static
d211 1
d285 1
d408 1
a408 1
static
d417 1
a417 1
	for (i = 0; c = curline[i]; i++) {
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
