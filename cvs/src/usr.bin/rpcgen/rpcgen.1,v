head	1.17;
access;
symbols
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.17.0.4
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.16.0.10
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.6
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.4
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.15.0.4
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.2
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.14.0.8
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.6
	OPENBSD_5_0:1.14.0.4
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.2
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.13.0.12
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.8
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.10
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.6
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.4
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.2
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.12.0.2
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.11.0.16
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.14
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.12
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.10
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.8
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.6
	OPENBSD_3_6_BASE:1.11
	OPENBSD_3_5:1.11.0.4
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.10.0.2
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.9.0.4
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.8.0.4
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_9:1.8.0.2
	OPENBSD_2_8:1.6.0.4
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.2
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.5.0.2
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.4.0.4
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.17
date	2015.09.11.20.07.27;	author schwarze;	state Exp;
branches;
next	1.16;
commitid	FvrN0CltFdms7K4B;

1.16
date	2014.01.20.05.07.48;	author schwarze;	state Exp;
branches;
next	1.15;

1.15
date	2013.01.17.21.29.15;	author jmc;	state Exp;
branches;
next	1.14;

1.14
date	2010.09.19.21.30.05;	author jmc;	state Exp;
branches;
next	1.13;

1.13
date	2007.11.17.11.50.00;	author jmc;	state Exp;
branches;
next	1.12;

1.12
date	2007.05.31.19.20.15;	author jmc;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.10.09.12.11;	author jmc;	state Exp;
branches;
next	1.10;

1.10
date	2003.03.11.08.11.08;	author jmc;	state Exp;
branches;
next	1.9;

1.9
date	2001.12.05.09.50.31;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2000.11.10.05.10.39;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	2000.11.09.17.52.33;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	2000.03.10.20.17.50;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	99.07.07.10.50.07;	author aaron;	state Exp;
branches;
next	1.4;

1.4
date	98.09.27.16.57.51;	author aaron;	state Exp;
branches;
next	1.3;

1.3
date	96.06.26.05.38.42;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.12.08.19.48.14;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.46.02;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.46.02;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.17
log
@The -D option requires an argument, and the argument must follow
without intervening whitespace.  Documentation bug found because
the SYNOPSIS markup was technically incomplete.
@
text
@.\" $OpenBSD: rpcgen.1,v 1.16 2014/01/20 05:07:48 schwarze Exp $
.\" $NetBSD: rpcgen.1,v 1.5.2.1 1995/12/05 02:51:02 jtc Exp $
.\" from: @@(#)rpcgen.new.1	1.1 90/11/09 TIRPC 1.0; from 40.10 of 10/10/89
.\" Copyright (c) 1988,1990 Sun Microsystems, Inc. - All Rights Reserved.
.Dd $Mdocdate: January 20 2014 $
.Dt RPCGEN 1
.Os
.Sh NAME
.Nm rpcgen
.Nd RPC protocol compiler
.Sh SYNOPSIS
.Nm rpcgen
.Op Fl aALTNbC
.Op Fl D Ns Ar name Ns Op = Ns Ar value
.Op Fl K Ar secs
.Op Fl i Ar lines
.Ar infile
.Nm rpcgen
.Fl c |
.Fl h |
.Fl l |
.Fl m |
.Fl t |
.Fl S\&c |
.Fl S\&s |
.Op Fl o Ar outfile
.Op Ar infile
.Nm rpcgen
.Fl c |
.Ar nettype
.Op Fl o Ar outfile
.Op Ar infile
.Sh DESCRIPTION
.Nm
is a tool that generates C code to implement an
.Tn RPC
protocol.
The input is a language similar to C known as
.Tn RPC
Language (Remote Procedure Call Language).
.Nm
is normally used as in the first synopsis where
it takes an input file and generates up to four output files.
If the
.Ar infile
is named
.Pa proto.x ,
then
.Nm
will generate a header file in
.Pa proto.h ,
.Tn XDR
routines in
.Pa proto_xdr.c ,
server-side stubs in
.Pa proto_svc.c ,
and client-side stubs in
.Pa proto_clnt.c .
With the
.Fl T
option,
it will also generate the
.Tn RPC
dispatch table in
.Pa proto_tbl.i .
With the
.Fl S\&c
option,
it will also generate sample code which would illustrate how to use the
remote procedures on the client side.
This code would be created in
.Pa proto_client.c .
With the
.Fl S\&s
option,
it will also generate a sample server code which would illustrate how to write
the remote procedures.
This code would be created in
.Pa proto_server.c .
.Pp
The server created can be started both by the port monitors
(for example,
.Xr inetd 8 )
or by itself.
When it is started by a port monitor,
it creates servers only for the transport for which
the file descriptor 0 was passed.
The transports are chosen at run time and not at compile time.
When the server is self-started,
it backgrounds itself by default.
A special define symbol
.Dv RPC_SVC_FG
can be used to run the server process in the foreground.
.Pp
The second synopsis provides special features which allow
for the creation of more sophisticated
.Tn RPC
servers.
These features include support for user provided
.Li #defines
and
.Tn RPC
dispatch tables.
The entries in the
.Tn RPC
dispatch table contain:
.Pp
.Bl -inset -offset indent -compact
.It +
pointers to the service routine corresponding to that procedure,
.It +
a pointer to the input and output arguments,
.It +
the size of these routines
.El
.Pp
A server can use the dispatch table to check authorization
and then to execute the service routine;
a client library may use it to deal with the details of storage
management and
.Tn XDR
data conversion.
.Pp
The other three synopses shown above are used when
one does not want to generate all the output files,
but only a particular one.
Some examples of their usage is described in the
.Sx EXAMPLES
section below.
When
.Nm
is executed with the
.Fl s
option,
it creates servers for that particular class of transports.
When
executed with the
.Fl n
option,
it creates a server for the transport specified by
.Em netid .
If
.Ar infile
is not specified,
.Nm
accepts the standard input.
.Pp
The C preprocessor,
.Xr cpp 1
is run on the input file before it is actually interpreted by
.Nm rpcgen .
For each type of output file,
.Nm
defines a special preprocessor symbol for use by the
.Nm
programmer:
.Pp
.Bl -tag -width RPC_CLNT -compact
.It Dv RPC_HDR
Defined when compiling into header files.
.It Dv RPC_XDR
Defined when compiling into
.Tn XDR
routines.
.It Dv RPC_SVC
Defined when compiling into server-side stubs.
.It Dv RPC_CLNT
Defined when compiling into client-side stubs.
.It Dv RPC_TBL
Defined when compiling into
.Tn RPC
dispatch tables.
.El
.Pp
Any line beginning with
.Sq %
is passed directly into the output file,
uninterpreted by
.Nm rpcgen .
.Pp
For every data type referred to in
.Ar infile
.Nm
assumes that there exists a
routine with the string
.Dq xdr_
prepended to the name of the data type.
If this routine does not exist in the
.Tn RPC/XDR
library, it must be provided.
Providing an undefined data type
allows customization of
.Tn XDR
routines.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl a
Generate all the files including sample code for client and server side.
.It Fl b
This generates code for the
.Tn SunOS4.1
style of RPC.
This is the default.
.It Fl c
Compile into
.Tn XDR
routines.
.It Fl C
Generate code in ANSI C.
This option also generates code that could be
compiled with the C++ compiler.
.It Fl D Ns Ar name Ns Op = Ns Ar value
Define a symbol
.Dv name .
Equivalent to the
.Dv #define
directive in the source.
If no
.Ar value
is given,
.Ar value
is defined as 1.
This option may be specified more than once.
.It Fl h
Compile into C data-definitions (a header file).
The
.Fl T
option can be used in conjunction to produce a
header file which supports
.Tn RPC
dispatch tables.
.It Fl K Ar secs
By default, services created using
.Nm
wait 120 seconds
after servicing a request before exiting.
That interval can be changed using the
.Fl K
flag.
To create a server that exits immediately upon servicing a request,
.Dq Fl K No 0
can be used.
To create a server that never exits, the appropriate argument is
.Dq Fl K No -1 .
.Pp
When monitoring for a server,
some port monitors, like the
.At V
.Sy listen
utility,
.Em always
spawn a new process in response to a service request.
If it is known that a server will be used with such a monitor, the
server should exit immediately on completion.
For such servers,
.Nm
should be used with
.Dq Fl K No -1 .
.It Fl l
Compile into client-side stubs.
.It Fl m
Compile into server-side stubs,
but do not generate a
.Fn main
routine.
This option is useful for doing callback-routines
and for users who need to write their own
.Fn main
routine to do initialization.
.It Fl n Ar netid
Compile into server-side stubs for the transport
specified by
.Ar netid .
There should be an entry for
.Ar netid
in the
netconfig database.
This option may be specified more than once,
so as to compile a server that serves multiple transports.
.It Fl N
Use the newstyle of
.Nm rpcgen .
This allows procedures to have multiple arguments.
It also uses the style of parameter passing that closely resembles C.
So, when
passing an argument to a remote procedure you do not have to pass a pointer to
the argument but the argument itself.
This behaviour is different from the oldstyle
of
.Nm
generated code.
The newstyle is not the default case because of
backward compatibility.
.It Fl o Ar outfile
Specify the name of the output file.
If none is specified,
standard output is used
.Po
.Fl c Fl h Fl l
.Fl m Fl n Fl s
modes only
.Pc .
.It Fl s Ar nettype
Compile into server-side stubs for all the
transports belonging to the class
.Ar nettype .
The supported classes are
.Em netpath ,
.Em visible ,
.Em circuit_n ,
.Em circuit_v ,
.Em datagram_n ,
.Em datagram_v ,
.Em tcp ,
and
.Em udp
[see
.Xr rpc 3
for the meanings associated with these classes.
Note:
.Bx
currently supports only the
.Em tcp
and
.Em udp
classes].
This option may be specified more than once.
Note:
the transports are chosen at run time and not at compile time.
.It Fl S\&c
Generate sample code to show the use of remote procedure and how to bind
to the server before calling the client side stubs generated by
.Nm rpcgen .
.It Fl S\&s
Generate skeleton code for the remote procedures on the server side.
You would need
to fill in the actual code for the remote procedures.
.It Fl t
Compile into
.Tn RPC
dispatch table.
.It Fl T
Generate the code to support
.Tn RPC
dispatch tables.
.El
.Pp
The options
.Fl c ,
.Fl h ,
.Fl l ,
.Fl m ,
.Fl s ,
and
.Fl t
are used exclusively to generate a particular type of file,
while the options
.Fl D
and
.Fl T
are global and can be used with the other options.
.Sh EXAMPLES
The command
.Bd -literal -offset indent
$ rpcgen -T prot.x
.Ed
.Pp
generates the five files:
.Pa prot.h ,
.Pa prot_clnt.c ,
.Pa prot_svc.c ,
.Pa prot_xdr.c
and
.Pa prot_tbl.i .
.Pp
The following example sends the C data-definitions (header file)
to standard output:
.Bd -literal -offset indent
$ rpcgen -h prot.x
.Ed
.Pp
To send the test version of the
.Dv -DTEST ,
server side stubs for
all the transport belonging to the class
.Em datagram_n
to standard output, use:
.Bd -literal -offset indent
$ rpcgen -s datagram_n -DTEST prot.x
.Ed
.Pp
To create the server side stubs for the transport indicated by
.Em netid
.Em tcp ,
use:
.Bd -literal -offset indent
$ rpcgen -n tcp -o prot_svc.c prot.x
.Ed
.Sh NOTES
The
.Tn RPC
Language does not support nesting of structures.
As a workaround, structures can be declared at the top-level, and their
name used inside other structures in order to achieve the same effect.
.Pp
Name clashes can occur when using program definitions, since the apparent
scoping does not really apply.
Most of these can be avoided by giving unique names for programs,
versions, procedures, and types.
.Pp
The server code generated with
.Fl n
option refers to the transport indicated by
.Em netid
and hence is very site specific.
.Sh SEE ALSO
.Xr cpp 1
@


1.16
log
@Obvious .Xr fixes, found while testing mandocdb(8).
@
text
@d1 1
a1 1
.\" $OpenBSD: rpcgen.1,v 1.15 2013/01/17 21:29:15 jmc Exp $
d5 1
a5 1
.Dd $Mdocdate: January 17 2013 $
d14 1
a14 1
.Op Fl D Op Ar name Ns Op =value
d213 1
a213 1
.It Fl D Ar name Ns Op Ar =value
d220 1
a220 1
.Dv value
d222 1
a222 1
.Dv value
@


1.15
log
@remove uesless Pp;
@
text
@d1 1
a1 1
.\" $OpenBSD: rpcgen.1,v 1.14 2010/09/19 21:30:05 jmc Exp $
d5 1
a5 1
.Dd $Mdocdate: September 19 2010 $
d249 2
a250 2
.Tn SVR4
.Xr listen
@


1.14
log
@more wacky macro fixing;
@
text
@d1 1
a1 1
.\" $OpenBSD: rpcgen.1,v 1.13 2007/11/17 11:50:00 jmc Exp $
d5 1
a5 1
.Dd $Mdocdate: November 17 2007 $
a364 1
.Pp
a378 1
.Pp
a388 1
.Pp
a396 1
.Pp
@


1.13
log
@.IP -> .Pp
@
text
@d1 1
a1 1
.\" $OpenBSD: rpcgen.1,v 1.12 2007/05/31 19:20:15 jmc Exp $
d5 1
a5 1
.Dd $Mdocdate: May 31 2007 $
d19 7
a25 7
.Fl c Li |
.Fl h Li |
.Fl l Li |
.Fl m Li |
.Fl t Li |
.Fl S\&c Li |
.Fl S\&s Li |
d29 1
a29 1
.Fl c Li |
d94 1
a94 1
.P
@


1.12
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\" $OpenBSD: rpcgen.1,v 1.11 2003/06/10 09:12:11 jmc Exp $
d5 1
a5 1
.Dd $Mdocdate$
d246 1
a246 1
.IP
@


1.11
log
@- section reorder
- COMPATIBILITY merge
- macro cleanup
- kill whitespace at EOL
- new sentence, new line

ssh pages ok markus@@
@
text
@d1 1
a1 1
.\" $OpenBSD: rpcgen.1,v 1.10 2003/03/11 08:11:08 jmc Exp $
d5 1
a5 1
.Dd June 11, 1995
@


1.10
log
@files with dead .Xr's;

left .Xr, but removed man page number
as suggested by mpech@@

more help and ok millert@@
@
text
@d1 1
a1 1
.\" $OpenBSD: rpcgen.1,v 1.9 2001/12/05 09:50:31 deraadt Exp $
d83 1
a83 1
.Xr inetd 8 Ns )
@


1.9
log
@KNF, and remove part of the TLI garbage
@
text
@d1 1
a1 1
.\" $OpenBSD: rpcgen.1,v 1.8 2000/11/10 05:10:39 aaron Exp $
d250 2
a251 2
utility
.Xr listen 1 ,
@


1.8
log
@- Section shuffling: comply to the section ordering outlined in mdoc(7).
- Some .Nm trimming.
- .Sh AUTHOR -> .Sh AUTHORS
- Other miscellaneous fixes here and there.
@
text
@d1 1
a1 1
.\" $OpenBSD: rpcgen.1,v 1.7 2000/11/09 17:52:33 aaron Exp $
d13 2
a14 6
.Ar infile
.Nm rpcgen
.Op Fl D Op Ar name=value
.Op Fl A
.Op Fl M
.Op Fl T
d16 1
a32 5
.Nm rpcgen
.Fl s Li |
.Ar netid
.Op Fl o Ar outfile
.Op Ar infile
d83 1
a83 3
.Em inetd
or
.Em listen )
d88 1
a88 16
The name of the transport must be specified
by setting up the environment variable
.Ev PM_TRANSPORT .
When the server generated by
.Nm
is executed,
it creates server handles for all the transports
specified in
.Ev NETPATH
environment variable,
or if it is unset,
it creates server handles for all the visible transports from
.Pa /etc/netconfig
file.
Note:
the transports are chosen at run time and not at compile time.
@


1.7
log
@Change all option list specifications to ".Bl -tag -width Ds". Most man
pages just needed their -width parameter tweaked to "Ds", which provides
a nice width of 6 constant characters. For consistency more than anything.
@
text
@d1 1
a1 1
.\" $OpenBSD: rpcgen.1,v 1.6 2000/03/10 20:17:50 aaron Exp $
a387 21
.Sh NOTES
The
.Tn RPC
Language does not support nesting of structures.
As a work-around,
structures can be declared at the top-level,
and their name used inside other structures in
order to achieve the same effect.
.Pp
Name clashes can occur when using program definitions,
since the apparent scoping does not really apply.
Most of these can be avoided by giving
unique names for programs,
versions,
procedures and types.
.Pp
The server code generated with
.Fl n
option refers to the transport indicated by
.Em netid
and hence is very site specific.
d429 17
@


1.6
log
@Various cleanups and standardization.
@
text
@d1 1
a1 1
.\" $OpenBSD: rpcgen.1,v 1.5 1999/07/07 10:50:07 aaron Exp $
d222 1
a222 1
.Bl -tag -width indent
@


1.5
log
@The proper order of the ``introductory'' macros in a man page is .Dd/.Dt/.Os.
Out of the approximately 1450 man pages, only about 90 of them were wrong.
Thanks to kwesterback@@home.com for coming up with a script and patch to repair
this. The patch also inserted a .Os macro in the few man pages that were
missing one.
@
text
@d1 1
a1 1
.\" $OpenBSD: rpcgen.1,v 1.4 1998/09/27 16:57:51 aaron Exp $
d42 1
a42 1
.Nm rpcgen
d46 1
a46 3
The input to
.Nm
is a language similar to C known as
d49 1
a49 1
.Nm rpcgen
d57 1
a57 1
.Nm rpcgen
d78 2
a79 1
remote procedures on the client side. This code would be created in
d85 2
a86 1
the remote procedures. This code would be created in
d102 1
a102 1
.Nm rpcgen
d153 1
a153 1
EXAMPLE
d156 1
a156 1
.Nm rpcgen
d170 1
a170 1
.Nm rpcgen
d178 1
a178 1
.Nm rpcgen
d180 1
a180 1
.Nm rpcgen
d208 1
a208 1
.Nm rpcgen
d220 2
a221 1
.Sh OPTIONS
d228 2
a229 1
style of RPC. This is the default.
d235 2
a236 1
Generate code in ANSI C. This option also generates code that could be
d260 1
a260 1
.Nm rpcgen
d282 1
a282 1
.Nm rpcgen
d310 2
a311 1
It also uses the style of parameter passing that closely resembles C. So, when
d313 2
a314 1
the argument but the argument itself. This behaviour is different from the oldstyle
d316 3
a318 2
.Nm rpcgen
generated code. The newstyle is not the default case because of
d345 2
a346 1
for the meanings associated with these classes. Note:
d361 2
a362 1
Generate skeleton code for the remote procedures on the server side. You would need
d409 1
a409 1
.Sh EXAMPLE
@


1.4
log
@usr.bin/ man page cleanups, n-s
@
text
@d1 1
a1 1
.\" $OpenBSD: rpcgen.1,v 1.3 1996/06/26 05:38:42 deraadt Exp $
d7 1
@


1.3
log
@rcsid
@
text
@d1 1
a1 1
.\" $OpenBSD: rpcgen.1,v 1.5.2.1 1995/12/05 02:51:02 jtc Exp $
d117 1
a117 1
can be used to run the server process in foreground.
d175 1
a175 1
.Nm rpcgen
d182 5
a186 7
.PD 0
.TP 12
.Dv RPC_HDR
defined when compiling into header files
.TP
.Dv RPC_XDR
defined when compiling into
d188 7
a194 10
routines
.TP
.Dv RPC_SVC
defined when compiling into server-side stubs
.TP
.Dv RPC_CLNT
defined when compiling into client-side stubs
.TP
.Dv RPC_TBL
defined when compiling into
d196 2
a197 2
dispatch tables
.PD
d203 1
a203 1
.Nm rpcgen
d226 1
a226 1
style of rpc. This is the default.
d295 1
a295 1
.Ar netid.
d303 3
a305 1
Use the newstyle of rpcgen. This allows procedures to have multiple arguments.
d309 3
a311 1
of rpcgen generated code. The newstyle is not the default case because of
d321 1
a321 1
.Pc
d327 7
a333 7
.Em netpath,
.Em visible,
.Em circuit_n,
.Em circuit_v,
.Em datagram_n,
.Em datagram_v,
.Em tcp,
d350 2
a351 1
to the server before calling the client side stubs generated by rpcgen.
a400 1
.Pp
d416 1
a416 1
to standard output.
@


1.2
log
@s/environmental/environment/
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
.\" $NetBSD: rpcgen.1,v 1.5 1995/06/11 21:50:11 pk Exp $
d97 1
a97 1
by setting up the environmental variable
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
