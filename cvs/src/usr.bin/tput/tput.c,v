head	1.22;
access;
symbols
	OPENBSD_6_0:1.22.0.4
	OPENBSD_6_0_BASE:1.22
	OPENBSD_5_9:1.22.0.2
	OPENBSD_5_9_BASE:1.22
	OPENBSD_5_8:1.21.0.6
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.21.0.2
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.19.0.6
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.19.0.4
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.17.0.16
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.17.0.14
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.17.0.12
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.10
	OPENBSD_5_0:1.17.0.8
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.17.0.6
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.17.0.4
	OPENBSD_4_8_BASE:1.17
	OPENBSD_4_7:1.17.0.2
	OPENBSD_4_7_BASE:1.17
	OPENBSD_4_6:1.16.0.22
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.18
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.16
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.14
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.16.0.12
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.16.0.10
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.16.0.8
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.16.0.6
	OPENBSD_3_9_BASE:1.16
	OPENBSD_3_8:1.16.0.4
	OPENBSD_3_8_BASE:1.16
	OPENBSD_3_7:1.16.0.2
	OPENBSD_3_7_BASE:1.16
	OPENBSD_3_6:1.15.0.6
	OPENBSD_3_6_BASE:1.15
	OPENBSD_3_5:1.15.0.4
	OPENBSD_3_5_BASE:1.15
	OPENBSD_3_4:1.15.0.2
	OPENBSD_3_4_BASE:1.15
	OPENBSD_3_3:1.12.0.6
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.12.0.4
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.12.0.2
	OPENBSD_3_1_BASE:1.12
	OPENBSD_3_0:1.11.0.2
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9_BASE:1.10
	OPENBSD_2_9:1.10.0.8
	OPENBSD_2_8:1.10.0.6
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.10.0.4
	OPENBSD_2_7_BASE:1.10
	OPENBSD_2_6:1.10.0.2
	OPENBSD_2_6_BASE:1.10
	OPENBSD_2_5:1.7.0.2
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.5.0.6
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.4
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.22
date	2015.11.16.03.03.28;	author deraadt;	state Exp;
branches;
next	1.21;
commitid	0xI5DzrKOJTogPxj;

1.21
date	2015.01.16.06.40.13;	author deraadt;	state Exp;
branches;
next	1.20;
commitid	Uu5nFG3wCl0LACBb;

1.20
date	2014.10.08.04.10.47;	author doug;	state Exp;
branches;
next	1.19;
commitid	6gYMgY4QHhQHn9fJ;

1.19
date	2013.11.27.15.23.01;	author yasuoka;	state Exp;
branches;
next	1.18;

1.18
date	2013.11.27.00.13.24;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2009.10.27.23.59.46;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2004.10.05.14.46.11;	author jaredy;	state Exp;
branches;
next	1.15;

1.15
date	2003.06.17.21.56.26;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2003.06.10.22.20.53;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.03.01.52.41;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2002.02.16.21.27.55;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2001.07.09.07.04.56;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	99.09.12.10.29.01;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	99.07.02.16.00.13;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	99.06.29.19.39.40;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	99.03.06.20.27.42;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	99.03.06.20.19.22;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.06.24.02.40.15;	author dgregor;	state Exp;
branches;
next	1.4;

1.4
date	97.03.07.21.54.48;	author gene;	state Exp;
branches;
next	1.3;

1.3
date	97.01.15.23.43.23;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.41.47;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.46.26;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.46.26;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.22
log
@pledge "stdio rpath wpath tty"
@
text
@/*	$OpenBSD: tput.c,v 1.21 2015/01/16 06:40:13 deraadt Exp $	*/

/*
 * Copyright (c) 1999 Todd C. Miller <Todd.Miller@@courtesan.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
/*-
 * Copyright (c) 1980, 1988, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <ctype.h>
#include <err.h>
#include <curses.h>
#include <term.h>
#include <stdio.h>
#include <stdlib.h>
#include <termios.h>
#include <unistd.h>
#include <limits.h>
#include <string.h>

#define MAXIMUM(a, b)	(((a) > (b)) ? (a) : (b))

#include <sys/wait.h>

static void   init(void);
static char **process(char *, char *, char **);
static void   reset(void);
static void   set_margins(void);
static void   usage(void);

extern char  *__progname;

int
main(int argc, char *argv[])
{
	int ch, exitval, n, Sflag;
	size_t len;
	char *p, *term, *str;
	char **oargv;

	if (pledge("stdio rpath wpath tty", NULL) == -1)
		err(1, "pledge");

	oargv = argv;
	term = NULL;
	Sflag = exitval = 0;
	while ((ch = getopt(argc, argv, "ST:")) != -1)
		switch(ch) {
		case 'T':
			term = optarg;
			break;
		case 'S':
			Sflag = 1;
			break;
		case '?':
		default:
			usage();
		}
	argc -= optind;
	argv += optind;

	if (Sflag && argc > 0)
		usage();

	if (!term && !(term = getenv("TERM")))
		errx(2, "No value for $TERM and no -T specified");

	/*
	 * NOTE: tgetent() will call setupterm() and set ospeed for us
	 * (this is ncurses-specific behavior)
	 */
	if (tgetent(NULL, term) != 1)
		errx(3, "Unknown terminal type `%s'", term);

	if (strcmp(__progname, "clear") == 0) {
		if (Sflag)
			usage();
		argv = oargv;
		*argv = __progname;
		*(argv+1) = NULL;
	}
	if (Sflag) {
		char **av;

		/* Build new argv based on stdin */
		argc = n = 0;
		av = NULL;
		while ((str = fgetln(stdin, &len)) != NULL) {
			if (str[len-1] != '\n')
				errx(1, "premature EOF");
			str[len-1] = '\0';
			while ((p = strsep(&str, " \t")) != NULL) {
				/* grow av as needed */
				if (argc + 1 >= n) {
					n += 64;
					av = reallocarray(av, n,
					    sizeof(char *));
					if (av == NULL)
						errx(1, "out of memory");
				}
				if (*p != '\0' &&
				    (av[argc++] = strdup(p)) == NULL)
					errx(1, "out of memory");
			}
		}
		if (argc > 0) {
			av[argc] = NULL;
			argv = av;
		}
	}
	while ((p = *argv++)) {
		switch (*p) {
		case 'i':
			if (!strcmp(p, "init")) {
				init();
				continue;
			}
			break;
		case 'l':
			if (!strcmp(p, "longname")) {
				puts(longname());
				continue;
			}
			break;
		case 'r':
			if (!strcmp(p, "reset")) {
				reset();
				continue;
			}
			break;
		}

		/* First try as terminfo */
		if ((str = tigetstr(p)) && str != (char *)-1)
			argv = process(p, str, argv);
		else if ((n = tigetnum(p)) != -2)
			(void)printf("%d\n", n);
		else if ((n = tigetflag(p)) != -1)
			exitval = !n;
		/* Then fall back on termcap */
		else if ((str = tgetstr(p, NULL)))
			argv = process(p, str, argv);
		else if ((n = tgetnum(p)) != -1)
			(void)printf("%d\n", n);
		else if ((exitval = tgetflag(p)) != 0)
			exitval = !exitval;
		else {
			warnx("Unknown terminfo capability `%s'", p);
			exitval = 4;
		}
	}
	exit(exitval);
}

static char **
process(char *cap, char *str, char **argv)
{
	char *cp, *s, *nargv[9];
	int arg_need, popcount, i;

	/* Count how many values we need for this capability. */
	for (cp = str, arg_need = popcount = 0; *cp != '\0'; cp++) {
		if (*cp == '%') {
			switch (*++cp) {
			case '%':
			   	cp++;
				break;
			case 'i':
				if (popcount < 2)
					popcount = 2;
				break;
			case 'p':
				cp++;
				if (isdigit((unsigned char)cp[1]) &&
				    popcount < cp[1] - '0')
					popcount = cp[1] - '0';
				break;
			case 'd':
			case 's':
			case '0':
			case '1':
			case '2':
			case '3':
			case '4':
			case '5':
			case '6':
			case '7':
			case '8':
			case '9':
			case '.':
			case '+':
				arg_need++;
				break;
			default:
				break;
			}
		}
	}
	arg_need = MAXIMUM(arg_need, popcount);
	if (arg_need > 9)
		errx(2, "too many arguments (%d) for capability `%s'",
		    arg_need, cap);
	
	for (i = 0; i < arg_need; i++) {
		long l;

		if (argv[i] == NULL)
			errx(2, "not enough arguments (%d) for capability `%s'",
			    arg_need, cap);

		/* convert ascii representation of numbers to longs */
		if (isdigit((unsigned char)argv[i][0])
		    && (l = strtol(argv[i], &cp, 10)) >= 0
		    && l < LONG_MAX && *cp == '\0')
			nargv[i] = (char *)l;
		else
			nargv[i] = argv[i];
	}

	s = tparm(str, nargv[0], nargv[1], nargv[2], nargv[3],
	    nargv[4], nargv[5], nargv[6], nargv[7], nargv[8]);
	putp(s);
	fflush(stdout);

	return (argv + arg_need);
}

static void
init(void)
{
	FILE *ifile;
	size_t len;
	char *buf;
	int wstatus;

	if (init_prog && !issetugid()) {
		switch (vfork()) {
		case -1:
			err(4, "vfork");
			break;
		case 0:
			/* child */
			execl(init_prog, init_prog, (char *)NULL);
			_exit(127);
			break;
		default:
			wait(&wstatus);
			/* parent */
			break;
		}
	}
	if (init_1string)
		putp(init_1string);
	if (init_2string)
		putp(init_2string);
	set_margins();
	/* always use 8 space tabs */
	if (init_tabs != 8 && clear_all_tabs && set_tab) {
		int i;

		putp(clear_all_tabs);
		for (i = 0; i < (columns - 1) / 8; i++) {
			if (parm_right_cursor)
				putp(tparm(parm_right_cursor, 8));
			else
				fputs("        ", stdout);
			putp(set_tab);
		}
	}
	if (init_file && !issetugid() && (ifile = fopen(init_file, "r"))) {
		while ((buf = fgetln(ifile, &len)) != NULL) {
			if (buf[len-1] != '\n')
				errx(1, "premature EOF reading %s", init_file);
			buf[len-1] = '\0';
			putp(buf);
		}
		fclose(ifile);
	}
	if (init_3string)
		putp(init_3string);
	fflush(stdout);
}

static void
reset(void)
{
	FILE *rfile;
	size_t len;
	char *buf;

	if (reset_1string)
		putp(reset_1string);
	if (reset_2string)
		putp(reset_2string);
	set_margins();
	if (reset_file && !issetugid() && (rfile = fopen(reset_file, "r"))) {
		while ((buf = fgetln(rfile, &len)) != NULL) {
			if (buf[len-1] != '\n')
				errx(1, "premature EOF reading %s", reset_file);
			buf[len-1] = '\0';
			putp(buf);
		}
		fclose(rfile);
	}
	if (reset_3string)
		putp(reset_3string);
	fflush(stdout);
}

static void
set_margins(void)
{

	/*
	 * Four possibilities:
	 *	1) we have set_lr_margin and can set things with one call
	 *	2) we have set_{left,right}_margin_parm, use two calls
	 *	3) we have set_{left,right}_margin, set based on position
	 *	4) none of the above, leave things the way they are
	 */
	if (set_lr_margin) {
		putp(tparm(set_lr_margin, 0, columns - 1));
	} else if (set_left_margin_parm && set_right_margin_parm) {
		putp(tparm(set_left_margin_parm, 0));
		putp(tparm(set_right_margin_parm, columns - 1));
	} else if (set_left_margin && set_right_margin && clear_margins) {
		putp(clear_margins);

		/* go to column 0 and set the left margin */
		putp(carriage_return ? carriage_return : "\r");
		putp(set_left_margin);

		/* go to last column and set the right margin */
		if (parm_right_cursor)
			putp(tparm(parm_right_cursor, columns - 1));
		else
			printf("%*s", columns - 1, " ");
		putp(set_right_margin);
		putp(carriage_return ? carriage_return : "\r");
	}
	fflush(stdout);
}

static void
usage(void)
{

	if (strcmp(__progname, "clear") == 0)
		(void)fprintf(stderr, "usage: %s [-T term]\n", __progname);
	else
		(void)fprintf(stderr,
		    "usage: %s [-T term] attribute [attribute-args] ...\n"
		    "       %s [-T term] -S\n", __progname, __progname);
	exit(1);
}
@


1.21
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: tput.c,v 1.20 2014/10/08 04:10:47 doug Exp $	*/
d77 3
@


1.20
log
@userland reallocarray audit.

Replace malloc() and realloc() calls that may have integer overflow in the
multiplication of the size argument with reallocarray().

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tput.c,v 1.19 2013/11/27 15:23:01 yasuoka Exp $	*/
a46 2
#include <sys/param.h>

d55 1
d58 2
d233 1
a233 1
	arg_need = MAX(arg_need, popcount);
@


1.19
log
@unsigned char cast was on a wrong place.

ok okan
@
text
@d1 1
a1 1
/*	$OpenBSD: tput.c,v 1.18 2013/11/27 00:13:24 deraadt Exp $	*/
d129 2
a130 1
					av = (char **)realloc(av, sizeof(char *) * n);
@


1.18
log
@unsigned char for ctype
ok okan
@
text
@d1 1
a1 1
/*	$OpenBSD: tput.c,v 1.17 2009/10/27 23:59:46 deraadt Exp $	*/
d244 1
a244 1
		if ((unsigned char)isdigit(argv[i][0])
@


1.17
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: tput.c,v 1.16 2004/10/05 14:46:11 jaredy Exp $	*/
d206 2
a207 1
				if (isdigit(cp[1]) && popcount < cp[1] - '0')
d244 2
a245 1
		if (isdigit(argv[i][0]) && (l = strtol(argv[i], &cp, 10)) >= 0
@


1.16
log
@fix an overflow in the handling of -S

ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: tput.c,v 1.15 2003/06/17 21:56:26 millert Exp $	*/
a45 13

#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1980, 1988, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)tput.c	8.3 (Berkeley) 4/28/95";
#endif
static char rcsid[] = "$OpenBSD: tput.c,v 1.15 2003/06/17 21:56:26 millert Exp $";
#endif /* not lint */
@


1.15
log
@Sync with share/misc/license.template and add missing DARPA credit
where applicable.
@
text
@d1 1
a1 1
/*	$OpenBSD: tput.c,v 1.14 2003/06/10 22:20:53 deraadt Exp $	*/
d57 1
a57 1
static char rcsid[] = "$OpenBSD: tput.c,v 1.14 2003/06/10 22:20:53 deraadt Exp $";
a137 7
			/* grow av as needed */
			if (argc + 1 >= n) {
				n += 64;
				av = (char **)realloc(av, sizeof(char *) * n);
				if (av == NULL)
					errx(1, "out of memory");
			}
d139 7
@


1.14
log
@mostly ansi cleanup; pval ok
@
text
@d1 1
a1 1
/*	$OpenBSD: tput.c,v 1.13 2003/06/03 01:52:41 millert Exp $	*/
d10 7
a16 7
 * THE SOFTWARE IS PROVIDED "AS IS" AND TODD C. MILLER DISCLAIMS ALL
 * WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL TODD C. MILLER BE LIABLE
 * FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
d57 1
a57 1
static char rcsid[] = "$OpenBSD: tput.c,v 1.13 2003/06/03 01:52:41 millert Exp $";
@


1.13
log
@Use an ISC-tyle license for all my code; it is simpler and more permissive.
@
text
@d1 1
a1 1
/*	$OpenBSD: tput.c,v 1.12 2002/02/16 21:27:55 millert Exp $	*/
d57 1
a57 1
static char rcsid[] = "$OpenBSD: tput.c,v 1.12 2002/02/16 21:27:55 millert Exp $";
d83 1
a83 3
main(argc, argv)
	int argc;
	char **argv;
d201 1
a201 2
process(cap, str, argv)
	char *cap, *str, **argv;
d272 1
a272 1
init()
d328 1
a328 1
reset()
d354 1
a354 1
set_margins()
d388 1
a388 1
usage()
@


1.12
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: tput.c,v 1.11 2001/07/09 07:04:56 deraadt Exp $	*/
a4 1
 * All rights reserved.
d6 3
a8 10
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
d10 7
a16 10
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
d30 1
a30 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d57 1
a57 1
static char rcsid[] = "$OpenBSD: tput.c,v 1.11 2001/07/09 07:04:56 deraadt Exp $";
@


1.11
log
@correct type on last arg to execl(); nordin@@cse.ogi.edu
@
text
@d1 1
a1 1
/*	$OpenBSD: tput.c,v 1.10 1999/09/12 10:29:01 millert Exp $	*/
d72 1
a72 1
static char rcsid[] = "$OpenBSD: tput.c,v 1.10 1999/09/12 10:29:01 millert Exp $";
d89 5
a93 5
static void   init __P((void));
static char **process __P((char *, char *, char **));
static void   reset __P((void));
static void   set_margins __P((void));
static void   usage __P((void));
@


1.10
log
@correct exit value; noted by shinobi@@monkey.org
@
text
@d1 1
a1 1
/*	$OpenBSD: tput.c,v 1.9 1999/07/02 16:00:13 millert Exp $	*/
d72 1
a72 1
static char rcsid[] = "$OpenBSD: tput.c,v 1.9 1999/07/02 16:00:13 millert Exp $";
d304 1
a304 1
			execl(init_prog, init_prog, NULL);
@


1.9
log
@For "tput init" set margins and 8 character tabs, for "tput reset" set margins
@
text
@d1 1
a1 1
/*	$OpenBSD: tput.c,v 1.8 1999/06/29 19:39:40 millert Exp $	*/
d72 1
a72 1
static char rcsid[] = "$OpenBSD: tput.c,v 1.8 1999/06/29 19:39:40 millert Exp $";
a212 3

		if (*argv == NULL)
			break;
d214 1
a214 1
	exit(*argv ? exitval : 2);
@


1.8
log
@Heavily modified to support both terminfo and termcap attributes.
Now links with -lcurses (ncurses), not -locurses.
TODO: set tabs/margins for init/reset pseudo-attributes.
@
text
@d1 1
a1 1
/*	$OpenBSD: tput.c,v 1.5 1997/06/24 02:40:15 dgregor Exp $	*/
d72 1
a72 1
static char rcsid[] = "$OpenBSD: tput.c,v 1.5 1997/06/24 02:40:15 dgregor Exp $";
d92 1
d298 1
a298 1
	int waitinfo;
a299 1
	/* XXX - should we check for existence before exec()'ing? */
d311 2
a312 2
			wait(&waitinfo);
			/* XXX - interpret waitinfo? */
d320 14
a344 1
	/* XXX - do tabs and margins */
d359 1
a359 1
	/* XXX - cat reset_file */
d371 34
a404 1
	/* XXX - do tabs and margins */
@


1.7
log
@back out changes that should not have escaped my local tree
@
text
@a1 1
/*	$NetBSD: tput.c,v 1.8 1995/08/31 22:11:37 jtc Exp $	*/
d3 26
d75 1
a75 1
#include <termios.h>
d77 1
d80 1
d83 1
d87 5
a91 3
static void   prlongname __P((char *));
static void   setospeed __P((void));
static void   outc __P((int));
d93 2
a94 1
static char **process __P((char *, char *, char **));
d101 4
a104 4
	extern char *optarg;
	extern int optind;
	int ch, exitval, n;
	char *argv0, *cptr, *p, *term, buf[1024], tbuf[1024];
d106 1
d108 2
a109 1
	while ((ch = getopt(argc, argv, "T:")) != -1)
d114 3
a120 4
	if ((argv0 = (char *)strrchr(argv[0], '/')) != NULL)
		argv0++;
	else
		argv0 = argv[0];
d124 2
d128 14
a141 6
errx(2, "no terminal type specified and no TERM environmental variable.");
	if (tgetent(tbuf, term) != 1)
		err(2, "tgetent failure");
	setospeed();
	if (strcmp(argv0, "clear") == 0) {
		*argv = "clear";
d144 29
a172 1
	for (exitval = 0; (p = *argv) != NULL; ++argv) {
a173 4
		case 'c':
			if (!strcmp(p, "clear"))
				p = "cl";
			break;
d175 4
a178 2
			if (!strcmp(p, "init"))
				p = "is";
d182 1
a182 1
				prlongname(tbuf);
d187 4
a190 2
			if (!strcmp(p, "reset"))
				p = "rs";
d193 11
a203 3
		cptr = buf;
		if (tgetstr(p, &cptr))
			argv = process(p, buf, argv);
d206 6
a211 2
		else
			exitval = !tgetflag(p);
d213 1
a213 1
		if (argv == NULL)
d216 1
a216 17
	exit(argv ? exitval : 2);
}

static void
prlongname(buf)
	char *buf;
{
	int savech;
	char *p, *savep;

	for (p = buf; *p && *p != ':'; ++p)
		continue;
	savech = *(savep = p);
	for (*p = '\0'; p >= buf && *p != '|'; --p)
		continue;
	(void)printf("%s\n", p + 1);
	*savep = savech;
d223 2
a224 8
	static char errfew[] =
	    "not enough arguments (%d) for capability `%s'";
	static char errmany[] =
	    "too many arguments (%d) for capability `%s'";
	static char erresc[] =
	    "unknown %% escape `%c' for capability `%s'";
	char *cp;
	int arg_need, arg_rows, arg_cols;
d227 55
a281 47
	for (cp = str, arg_need = 0; *cp != '\0'; cp++)
		if (*cp == '%')
			    switch (*++cp) {
			    case 'd':
			    case '2':
			    case '3':
			    case '.':
			    case '+':
				    arg_need++;
				    break;
			    case '%':
			    case '>':
			    case 'i':
			    case 'r':
			    case 'n':
			    case 'B':
			    case 'D':
				    break;
			    default:
				/*
				 * hpux has lot's of them, but we complain
				 */
				 errx(2, erresc, *cp, cap);
			    }

	/* And print them. */
	switch (arg_need) {
	case 0:
		(void)tputs(str, 1, outc);
		break;
	case 1:
		arg_cols = 0;

		if (*++argv == NULL || *argv[0] == '\0')
			errx(2, errfew, 1, cap);
		arg_rows = atoi(*argv);

		(void)tputs(tgoto(str, arg_cols, arg_rows), 1, outc);
		break;
	case 2:
		if (*++argv == NULL || *argv[0] == '\0')
			errx(2, errfew, 2, cap);
		arg_rows = atoi(*argv);

		if (*++argv == NULL || *argv[0] == '\0')
			errx(2, errfew, 2, cap);
		arg_cols = atoi(*argv);
d283 4
a286 2
		(void) tputs(tgoto(str, arg_cols, arg_rows), arg_rows, outc);
		break;
d288 1
a288 4
	default:
		errx(2, errmany, arg_need, cap);
	}
	return (argv);
d292 1
a292 1
setospeed()
d294 4
a297 3
#undef ospeed
	extern short ospeed;
	struct termios t;
d299 34
a332 4
	if (tcgetattr(STDOUT_FILENO, &t) != -1)
		ospeed = 0;
	else
		ospeed = cfgetospeed(&t);
d336 1
a336 2
outc(c)
	int c;
d338 22
a359 1
	(void)putchar(c);
d365 7
a371 1
	(void)fprintf(stderr, "usage: tput [-T term] attribute ...\n");
@


1.6
log
@add missing reference to infocmp
@
text
@a53 1
#include <term.h>
d61 1
a64 2
extern char  *__progname;

d70 4
a73 3
	int ch, exitval, n, Sflag = 0;
	size_t len;
	char *p, *term, *str;
d76 1
a76 1
	while ((ch = getopt(argc, argv, "ST:")) != -1)
a80 3
		case 'S':
			Sflag = 1;
			break;
d85 4
a91 2
	if (Sflag && argc > 0)
		usage();
d95 2
a96 2
	if (setupterm(term, STDOUT_FILENO, NULL) == ERR)
		err(2, "setupterm failure");
d98 1
a98 3
	if (strcmp(__progname, "clear") == 0) {
		if (Sflag)
			usage();
a101 27
	if (Sflag) {
		char **av;

		/* Build new argv based on stdin */
		argc = n = 0;
		av = NULL;
		while ((str = fgetln(stdin, &len)) != NULL) {
			if (str[len-1] != '\n')
				errx(1, "premature EOF");
			str[len-1] = '\0';
			/* grow av as needed */
			if (argc + 1 >= n) {
				n += 64;
				av = (char **)realloc(av, sizeof(char *) * n);
				if (av == NULL)
					errx(1, "out of memory");
				av = &av[argc];
			}
			while ((p = strsep(&str, " \t")) != NULL)
				if ((av[argc++] = strdup(p)) == NULL)
					errx(1, "out of memory");
		}
		if (argc > 0) {
			av[argc] = NULL;
			argv = av;
		}
	}
d104 4
d110 1
a110 1
				p = "is2";	/* XXX - is1 as well? */
d114 1
a114 1
				prlongname(CUR term_names);
d120 1
a120 1
				p = "rs2";	/* XXX - rs1 as well? */
d123 4
a126 4
		/* XXX - check termcap names too */
		if ((str = tigetstr(p)) != NULL && str != (char *)-1)
			argv = process(p, str, argv);
		else if ((n = tigetnum(p)) != -1 && n != -2)
d129 1
a129 1
			exitval = (tigetflag(p) == -1);
d187 1
a187 1
				 * HP-UX has lots of them, but we complain
d195 1
a195 1
		(void)putp(str);
d204 1
a204 1
		(void)putp(tparm(str, arg_cols, arg_rows));
d215 1
a215 1
		(void) tputs(tparm(str, arg_cols, arg_rows), arg_rows, putchar);
d238 7
d247 1
a247 3
	(void)fprintf(stderr,
	    "usage: %s [-T term] attribute [attribute-args] ...\n"
	    "       %s [-T term] -S\n", __progname, __progname);
@


1.5
log
@Add #include for string.h to get declaration for strrchr()
@
text
@d1 1
a1 1
/*	$OpenBSD: tput.c,v 1.4 1997/03/07 21:54:48 gene Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: tput.c,v 1.4 1997/03/07 21:54:48 gene Exp $";
d54 1
a61 1
static void   outc __P((int));
d65 2
d72 3
a74 4
	extern char *optarg;
	extern int optind;
	int ch, exitval, n;
	char *argv0, *cptr, *p, *term, buf[1024], tbuf[1024];
d77 1
a77 1
	while ((ch = getopt(argc, argv, "T:")) != -1)
d82 3
a88 4
	if ((argv0 = (char *)strrchr(argv[0], '/')) != NULL)
		argv0++;
	else
		argv0 = argv[0];
d92 2
d97 2
a98 2
	if (tgetent(tbuf, term) != 1)
		err(2, "tgetent failure");
d100 3
a102 1
	if (strcmp(argv0, "clear") == 0) {
d106 27
a134 4
		case 'c':
			if (!strcmp(p, "clear"))
				p = "cl";
			break;
d137 1
a137 1
				p = "is";
d141 1
a141 1
				prlongname(tbuf);
d147 1
a147 1
				p = "rs";
d150 4
a153 4
		cptr = buf;
		if (tgetstr(p, &cptr))
			argv = process(p, buf, argv);
		else if ((n = tgetnum(p)) != -1)
d156 1
a156 1
			exitval = !tgetflag(p);
d214 1
a214 1
				 * hpux has lot's of them, but we complain
d222 1
a222 1
		(void)tputs(str, 1, outc);
d231 1
a231 1
		(void)tputs(tgoto(str, arg_cols, arg_rows), 1, outc);
d242 1
a242 1
		(void) tputs(tgoto(str, arg_cols, arg_rows), arg_rows, outc);
a264 7
outc(c)
	int c;
{
	(void)putchar(c);
}

static void
d267 3
a269 1
	(void)fprintf(stderr, "usage: tput [-T term] attribute ...\n");
@


1.4
log
@Integrate clear into tput itself with silly argv munching.
@
text
@d1 1
a1 1
/*	$OpenBSD: tput.c,v 1.3 1997/01/15 23:43:23 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: tput.c,v 1.3 1997/01/15 23:43:23 millert Exp $";
d57 1
@


1.3
log
@getopt(3) returns -1 when out of args, not EOF, whee!
@
text
@d1 1
a1 1
/*	$OpenBSD: tput.c,v 1.2 1996/06/26 05:41:47 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: tput.c,v 1.2 1996/06/26 05:41:47 deraadt Exp $";
d72 1
a72 1
	char *cptr, *p, *term, buf[1024], tbuf[1024];
d84 4
d91 1
d97 4
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: tput.c,v 1.8 1995/08/31 22:11:37 jtc Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: tput.c,v 1.8 1995/08/31 22:11:37 jtc Exp $";
d75 1
a75 1
	while ((ch = getopt(argc, argv, "T:")) != EOF)
@


1.1
log
@Initial revision
@
text
@d1 1
d47 1
a47 1
static char rcsid[] = "$NetBSD: tput.c,v 1.8 1995/08/31 22:11:37 jtc Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
