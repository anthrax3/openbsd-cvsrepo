head	1.26;
access;
symbols
	OPENBSD_6_2:1.26.0.6
	OPENBSD_6_2_BASE:1.26
	OPENBSD_6_1:1.26.0.4
	OPENBSD_6_1_BASE:1.26
	OPENBSD_6_0:1.19.0.2
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.14.0.2
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.11.0.4
	OPENBSD_5_8_BASE:1.11;
locks; strict;
comment	@ * @;


1.26
date	2017.01.02.01.40.20;	author tedu;	state Exp;
branches;
next	1.25;
commitid	SQWTWeIWGsb2QxJb;

1.25
date	2016.12.29.19.12.42;	author tedu;	state Exp;
branches;
next	1.24;
commitid	4lcwkkyAu6qkdTAG;

1.24
date	2016.11.10.16.00.40;	author tedu;	state Exp;
branches;
next	1.23;
commitid	r818yiLQKo3gkqyd;

1.23
date	2016.10.05.17.36.53;	author tedu;	state Exp;
branches;
next	1.22;
commitid	82M7dxXP7itRBRZW;

1.22
date	2016.09.15.00.58.23;	author deraadt;	state Exp;
branches;
next	1.21;
commitid	jUUEan3Kanf6WvvC;

1.21
date	2016.09.04.15.11.13;	author tedu;	state Exp;
branches;
next	1.20;
commitid	t9LbFpdyOeP3p9od;

1.20
date	2016.09.02.18.12.30;	author tedu;	state Exp;
branches;
next	1.19;
commitid	6VZ1JPJuzXuXcUz8;

1.19
date	2016.06.27.15.41.17;	author tedu;	state Exp;
branches;
next	1.18;
commitid	8jC1nXqjGNHahD9H;

1.18
date	2016.06.07.16.49.23;	author tedu;	state Exp;
branches;
next	1.17;
commitid	CRAPRajOEq58XUlb;

1.17
date	2016.06.07.14.11.16;	author tedu;	state Exp;
branches;
next	1.16;
commitid	NxhIlBOlOSgsJvPH;

1.16
date	2016.06.05.00.46.34;	author djm;	state Exp;
branches;
next	1.15;
commitid	zmRA0Q6jBCGEttFd;

1.15
date	2016.04.27.02.35.55;	author gsoares;	state Exp;
branches;
next	1.14;
commitid	PSAD31kyQNN4Y6xv;

1.14
date	2015.12.04.09.41.49;	author tedu;	state Exp;
branches;
next	1.13;
commitid	EdHxZrGAk7pEvt0W;

1.13
date	2015.11.27.21.10.17;	author tedu;	state Exp;
branches;
next	1.12;
commitid	f1A0QR57ijNigV3t;

1.12
date	2015.09.01.16.20.55;	author mikeb;	state Exp;
branches;
next	1.11;
commitid	Pa4EWQlbzQKkG7uk;

1.11
date	2015.07.28.21.36.03;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	CXT7uYKGxfAfQx3l;

1.10
date	2015.07.24.06.36.42;	author zhuk;	state Exp;
branches;
next	1.9;
commitid	yfM2cEfXpqdeoUpn;

1.9
date	2015.07.22.20.15.24;	author zhuk;	state Exp;
branches;
next	1.8;
commitid	V9EdfKBrfFJdCepj;

1.8
date	2015.07.21.16.12.04;	author tedu;	state Exp;
branches;
next	1.7;
commitid	W4YlDHDIbBNVx6Mv;

1.7
date	2015.07.21.11.04.06;	author zhuk;	state Exp;
branches;
next	1.6;
commitid	H7gCQhORmxwF32W8;

1.6
date	2015.07.19.22.11.41;	author benno;	state Exp;
branches;
next	1.5;
commitid	M93qv5tmvAtw7xxq;

1.5
date	2015.07.19.22.09.08;	author benno;	state Exp;
branches;
next	1.4;
commitid	iVesAFc8XS9RWzz1;

1.4
date	2015.07.16.23.02.56;	author nicm;	state Exp;
branches;
next	1.3;
commitid	60qcQFsgRYrayAje;

1.3
date	2015.07.16.22.33.01;	author zhuk;	state Exp;
branches;
next	1.2;
commitid	0SYp9ezdmzR248iR;

1.2
date	2015.07.16.22.11.01;	author nicm;	state Exp;
branches;
next	1.1;
commitid	e5IIRDvhjsuvynHd;

1.1
date	2015.07.16.20.44.21;	author tedu;	state Exp;
branches;
next	;
commitid	XJUTPk2EaAhf0EJC;


desc
@@


1.26
log
@envlist and arglist are both string lists; simplify
ok benno
@
text
@/* $OpenBSD: parse.y,v 1.25 2016/12/29 19:12:42 tedu Exp $ */
/*
 * Copyright (c) 2015 Ted Unangst <tedu@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

%{
#include <sys/types.h>
#include <ctype.h>
#include <unistd.h>
#include <stdint.h>
#include <stdarg.h>
#include <stdio.h>
#include <string.h>
#include <err.h>

#include "doas.h"

typedef struct {
	union {
		struct {
			int action;
			int options;
			const char *cmd;
			const char **cmdargs;
			const char **envlist;
		};
		const char **strlist;
		const char *str;
	};
	int lineno;
	int colno;
} yystype;
#define YYSTYPE yystype

FILE *yyfp;

struct rule **rules;
int nrules;
static int maxrules;

int parse_errors = 0;

static void yyerror(const char *, ...);
static int yylex(void);

static size_t
arraylen(const char **arr)
{
	size_t cnt = 0;

	while (*arr) {
		cnt++;
		arr++;
	}
	return cnt;
}

%}

%token TPERMIT TDENY TAS TCMD TARGS
%token TNOPASS TPERSIST TKEEPENV TSETENV
%token TSTRING

%%

grammar:	/* empty */
		| grammar '\n'
		| grammar rule '\n'
		| error '\n'
		;

rule:		action ident target cmd {
			struct rule *r;
			r = calloc(1, sizeof(*r));
			if (!r)
				errx(1, "can't allocate rule");
			r->action = $1.action;
			r->options = $1.options;
			r->envlist = $1.envlist;
			r->ident = $2.str;
			r->target = $3.str;
			r->cmd = $4.cmd;
			r->cmdargs = $4.cmdargs;
			if (nrules == maxrules) {
				if (maxrules == 0)
					maxrules = 63;
				else
					maxrules *= 2;
				if (!(rules = reallocarray(rules, maxrules,
				    sizeof(*rules))))
					errx(1, "can't allocate rules");
			}
			rules[nrules++] = r;
		} ;

action:		TPERMIT options {
			$$.action = PERMIT;
			$$.options = $2.options;
			$$.envlist = $2.envlist;
		} | TDENY {
			$$.action = DENY;
			$$.options = 0;
			$$.envlist = NULL;
		} ;

options:	/* none */ {
			$$.options = 0;
			$$.envlist = NULL;
		} | options option {
			$$.options = $1.options | $2.options;
			$$.envlist = $1.envlist;
			if (($$.options & (NOPASS|PERSIST)) == (NOPASS|PERSIST)) {
				yyerror("can't combine nopass and persist");
				YYERROR;
			}
			if ($2.envlist) {
				if ($$.envlist) {
					yyerror("can't have two setenv sections");
					YYERROR;
				} else
					$$.envlist = $2.envlist;
			}
		} ;
option:		TNOPASS {
			$$.options = NOPASS;
			$$.envlist = NULL;
		} | TPERSIST {
			$$.options = PERSIST;
			$$.envlist = NULL;
		} | TKEEPENV {
			$$.options = KEEPENV;
			$$.envlist = NULL;
		} | TSETENV '{' strlist '}' {
			$$.options = 0;
			$$.envlist = $3.strlist;
		} ;

strlist:	/* empty */ {
			if (!($$.strlist = calloc(1, sizeof(char *))))
				errx(1, "can't allocate strlist");
		} | strlist TSTRING {
			int nstr = arraylen($1.strlist);
			if (!($$.strlist = reallocarray($1.strlist, nstr + 2,
			    sizeof(char *))))
				errx(1, "can't allocate strlist");
			$$.strlist[nstr] = $2.str;
			$$.strlist[nstr + 1] = NULL;
		} ;


ident:		TSTRING {
			$$.str = $1.str;
		} ;

target:		/* optional */ {
			$$.str = NULL;
		} | TAS TSTRING {
			$$.str = $2.str;
		} ;

cmd:		/* optional */ {
			$$.cmd = NULL;
			$$.cmdargs = NULL;
		} | TCMD TSTRING args {
			$$.cmd = $2.str;
			$$.cmdargs = $3.cmdargs;
		} ;

args:		/* empty */ {
			$$.cmdargs = NULL;
		} | TARGS strlist {
			$$.cmdargs = $2.strlist;
		} ;

%%

void
yyerror(const char *fmt, ...)
{
	va_list va;

	fprintf(stderr, "doas: ");
	va_start(va, fmt);
	vfprintf(stderr, fmt, va);
	va_end(va);
	fprintf(stderr, " at line %d\n", yylval.lineno + 1);
	parse_errors++;
}

static struct keyword {
	const char *word;
	int token;
} keywords[] = {
	{ "deny", TDENY },
	{ "permit", TPERMIT },
	{ "as", TAS },
	{ "cmd", TCMD },
	{ "args", TARGS },
	{ "nopass", TNOPASS },
	{ "persist", TPERSIST },
	{ "keepenv", TKEEPENV },
	{ "setenv", TSETENV },
};

int
yylex(void)
{
	char buf[1024], *ebuf, *p, *str;
	int i, c, quotes = 0, escape = 0, qpos = -1, nonkw = 0;

	p = buf;
	ebuf = buf + sizeof(buf);

repeat:
	/* skip whitespace first */
	for (c = getc(yyfp); c == ' ' || c == '\t'; c = getc(yyfp))
		yylval.colno++;

	/* check for special one-character constructions */
	switch (c) {
		case '\n':
			yylval.colno = 0;
			yylval.lineno++;
			/* FALLTHROUGH */
		case '{':
		case '}':
			return c;
		case '#':
			/* skip comments; NUL is allowed; no continuation */
			while ((c = getc(yyfp)) != '\n')
				if (c == EOF)
					goto eof;
			yylval.colno = 0;
			yylval.lineno++;
			return c;
		case EOF:
			goto eof;
	}

	/* parsing next word */
	for (;; c = getc(yyfp), yylval.colno++) {
		switch (c) {
		case '\0':
			yyerror("unallowed character NUL in column %d",
			    yylval.colno + 1);
			escape = 0;
			continue;
		case '\\':
			escape = !escape;
			if (escape)
				continue;
			break;
		case '\n':
			if (quotes)
				yyerror("unterminated quotes in column %d",
				    qpos + 1);
			if (escape) {
				nonkw = 1;
				escape = 0;
				yylval.colno = 0;
				yylval.lineno++;
				continue;
			}
			goto eow;
		case EOF:
			if (escape)
				yyerror("unterminated escape in column %d",
				    yylval.colno);
			if (quotes)
				yyerror("unterminated quotes in column %d",
				    qpos + 1);
			goto eow;
			/* FALLTHROUGH */
		case '{':
		case '}':
		case '#':
		case ' ':
		case '\t':
			if (!escape && !quotes)
				goto eow;
			break;
		case '"':
			if (!escape) {
				quotes = !quotes;
				if (quotes) {
					nonkw = 1;
					qpos = yylval.colno;
				}
				continue;
			}
		}
		*p++ = c;
		if (p == ebuf) {
			yyerror("too long line");
			p = buf;
		}
		escape = 0;
	}

eow:
	*p = 0;
	if (c != EOF)
		ungetc(c, yyfp);
	if (p == buf) {
		/*
		 * There could be a number of reasons for empty buffer,
		 * and we handle all of them here, to avoid cluttering
		 * the main loop.
		 */
		if (c == EOF)
			goto eof;
		else if (qpos == -1)    /* accept, e.g., empty args: cmd foo args "" */
			goto repeat;
	}
	if (!nonkw) {
		for (i = 0; i < sizeof(keywords) / sizeof(keywords[0]); i++) {
			if (strcmp(buf, keywords[i].word) == 0)
				return keywords[i].token;
		}
	}
	if ((str = strdup(buf)) == NULL)
		err(1, "strdup");
	yylval.str = str;
	return TSTRING;

eof:
	if (ferror(yyfp))
		yyerror("input error reading config");
	return 0;
}
@


1.25
log
@it has been six months and two days... remove keepenv { obsolete } syntax
@
text
@d1 1
a1 1
/* $OpenBSD: parse.y,v 1.24 2016/11/10 16:00:40 tedu Exp $ */
d39 1
d145 1
a145 1
		} | TSETENV '{' envlist '}' {
d147 1
a147 1
			$$.envlist = $3.envlist;
d150 6
a155 6
envlist:	/* empty */ {
			if (!($$.envlist = calloc(1, sizeof(char *))))
				errx(1, "can't allocate envlist");
		} | envlist TSTRING {
			int nenv = arraylen($1.envlist);
			if (!($$.envlist = reallocarray($1.envlist, nenv + 2,
d157 3
a159 3
				errx(1, "can't allocate envlist");
			$$.envlist[nenv] = $2.str;
			$$.envlist[nenv + 1] = NULL;
d183 2
a184 14
		} | TARGS argslist {
			$$.cmdargs = $2.cmdargs;
		} ;

argslist:	/* empty */ {
			if (!($$.cmdargs = calloc(1, sizeof(char *))))
				errx(1, "can't allocate args");
		} | argslist TSTRING {
			int nargs = arraylen($1.cmdargs);
			if (!($$.cmdargs = reallocarray($1.cmdargs, nargs + 2,
			    sizeof(char *))))
				errx(1, "can't allocate args");
			$$.cmdargs[nargs] = $2.str;
			$$.cmdargs[nargs + 1] = NULL;
@


1.24
log
@missing semicolon at end of rule. yacc doesn't seem to mind, though.
from Edakawa
@
text
@d1 1
a1 1
/* $OpenBSD: parse.y,v 1.23 2016/10/05 17:36:53 tedu Exp $ */
a52 1
static int obsolete_warned = 0;
a143 7
		} | TKEEPENV '{' envlist '}' {
			$$.options = 0;
			if (!obsolete_warned) {
				warnx("keepenv with list is obsolete");
				obsolete_warned = 1;
			}
			$$.envlist = $3.envlist;
@


1.23
log
@as a result of the env rework, arraylen() is only used in parse.y.
move it there and make it static.
@
text
@d1 1
a1 1
/* $OpenBSD: parse.y,v 1.22 2016/09/15 00:58:23 deraadt Exp $ */
d167 1
a167 1
		}
@


1.22
log
@use static in the right places to seperate modules better
ok tedu
@
text
@d1 1
a1 1
/* $OpenBSD: parse.y,v 1.21 2016/09/04 15:11:13 tedu Exp $ */
d57 12
@


1.21
log
@don't allow combining nopass and persist in a single rule
@
text
@d1 1
a1 1
/* $OpenBSD: parse.y,v 1.20 2016/09/02 18:12:30 tedu Exp $ */
d49 3
a51 1
int nrules, maxrules;
d53 1
a53 1
int obsolete_warned = 0;
d55 2
a56 3
void yyerror(const char *, ...);
int yylex(void);
int yyparse(void);
d209 1
a209 1
struct keyword {
@


1.20
log
@add support for the verified auth ioctls using 'persist' rules.
ok deraadt henning
@
text
@d1 1
a1 1
/* $OpenBSD: parse.y,v 1.19 2016/06/27 15:41:17 tedu Exp $ */
d111 4
@


1.19
log
@revise environment handling.
Add a setenv keyword for manipulating the environment. keepenv now means
only retain everything. (for one release, the old use of keepenv will still
work.)
Allow setting variables to new or existing values, and also removing vars
when keepenv is used.
ok djm martijn tb
@
text
@d1 1
a1 1
/* $OpenBSD: parse.y,v 1.18 2016/06/07 16:49:23 tedu Exp $ */
d60 1
a60 1
%token TNOPASS TKEEPENV TSETENV
d122 3
d214 1
@


1.18
log
@revert recent changes to allow setenv. everybody now has an idea about
how to do things better, so let's take a step back and reconsider.
@
text
@d1 1
a1 1
/* $OpenBSD: parse.y,v 1.15 2016/04/27 02:35:55 gsoares Exp $ */
d51 1
d60 1
a60 1
%token TNOPASS TKEEPENV
d101 2
d105 4
a108 2
options:	/* none */
		| options option {
d113 1
a113 1
					yyerror("can't have two keepenv sections");
d121 1
d124 1
d126 8
a133 1
			$$.options = KEEPENV;
d212 1
@


1.17
log
@merge setenv feature into keepenv. less grammar, more better.
minimal changes to implementation for now, but some refinement to the way
in which the new environment is constructed would be nice.
ok djm
@
text
@d1 1
a1 1
/* $OpenBSD: parse.y,v 1.16 2016/06/05 00:46:34 djm Exp $ */
a113 1

d133 1
a133 3
		} | envlist TSTRING '=' TSTRING {
			int nenv = arraylen($1.envlist);
			char *cp = NULL;
a134 14
			if (*$2.str == '\0' || strchr($2.str, '=') != NULL) {
				yyerror("invalid setenv expression");
				YYERROR;
			}
			if (!($$.envlist = reallocarray($1.envlist,
			    nenv + 2, sizeof(char *))))
				errx(1, "can't allocate envlist");
			$$.envlist[nenv] = NULL;
			if (asprintf(&cp, "%s=%s", $2.str, $4.str) <= 0 ||
			    cp == NULL)
				errx(1,"asprintf failed");
			$$.envlist[nenv] = cp;
			$$.envlist[nenv + 1] = NULL;
		}
a221 1
		case '=':
a273 1
		case '=':
@


1.16
log
@add a doas.conf setenv directive that allows setting environment
variables explicitly and by copying existing environment variables
of a different name. E.g.

permit nopass setenv { PS1=$SUDO_PS1 FOO=bar } keepenv :wheel

ok tedu@@ benno@@
@
text
@d1 1
a1 1
/* $OpenBSD: parse.y,v 1.15 2016/04/27 02:35:55 gsoares Exp $ */
a37 1
			const char **setenvlist;
d59 1
a59 1
%token TNOPASS TKEEPENV TSETENV
a77 1
			r->setenvlist = $1.setenvlist;
a97 1
			$$.setenvlist = $2.setenvlist;
a112 8
			$$.setenvlist = $1.setenvlist;
			if ($2.setenvlist) {
				if ($$.setenvlist) {
					yyerror("can't have two setenv sections");
					YYERROR;
				} else
					$$.setenvlist = $2.setenvlist;
			}
a121 3
		} | TSETENV '{' setenvlist '}' {
			$$.options = SETENV;
			$$.setenvlist = $3.setenvlist;
d134 2
a135 7
		}

setenvlist:	/* empty */ {
			if (!($$.setenvlist = calloc(1, sizeof(char *))))
				errx(1, "can't allocate setenvlist");
		} | setenvlist TSTRING '=' TSTRING {
			int nenv = arraylen($1.setenvlist);
d142 1
a142 1
			if (!($$.setenvlist = reallocarray($1.setenvlist,
d145 1
a145 1
			$$.setenvlist[nenv] = NULL;
d149 2
a150 2
			$$.setenvlist[nenv] = cp;
			$$.setenvlist[nenv + 1] = NULL;
a152 1

a214 1
	{ "setenv", TSETENV },
@


1.15
log
@adjust yyerror() to precede with "progname: " the error message string
OK tedu@@ phessler@@
@
text
@d1 1
a1 1
/* $OpenBSD: parse.y,v 1.14 2015/12/04 09:41:49 tedu Exp $ */
d38 1
d60 1
a60 1
%token TNOPASS TKEEPENV
d79 1
d100 1
d116 8
d125 1
d133 3
d150 22
d235 1
d260 1
d313 1
@


1.14
log
@espie reminds me that EOF can happen for errors as well, so check for that
happening and print a message.
@
text
@d1 1
a1 1
/* $OpenBSD: parse.y,v 1.13 2015/11/27 21:10:17 tedu Exp $ */
d179 1
@


1.13
log
@after reading a too long line, restart at the beginning of the buffer so
we don't keep writing past the end. (the perils of trying to recover from
parse errors.)
noticed by Jan Schreiber
@
text
@d1 1
a1 1
/* $OpenBSD: parse.y,v 1.12 2015/09/01 16:20:55 mikeb Exp $ */
d226 1
a226 1
					return 0;
d231 1
a231 1
			return 0;
d305 1
a305 1
			return 0;
d319 5
@


1.12
log
@increment the line number after the line continuation; ok tedu
@
text
@d1 1
a1 1
/* $OpenBSD: parse.y,v 1.11 2015/07/28 21:36:03 deraadt Exp $ */
d287 1
a287 1
		if (p == ebuf)
d289 2
@


1.11
log
@wrap some exceedingly long lines
@
text
@d1 1
a1 1
/* $OpenBSD: parse.y,v 1.10 2015/07/24 06:36:42 zhuk Exp $ */
d254 2
@


1.10
log
@Further improve syntax error reporting in doas:

  - teach parser to recover after error, allowing to report many errors
    instead of the first one only;
  - fix remaining error printouts without exact position.

Some ideas were taken from diff sent by dlg@@ earlier, thanks!

okay tedu@@, dlg@@
@
text
@d1 1
a1 1
/* $OpenBSD: parse.y,v 1.9 2015/07/22 20:15:24 zhuk Exp $ */
d165 2
a166 1
			if (!($$.cmdargs = reallocarray($1.cmdargs, nargs + 2, sizeof(char *))))
d238 2
a239 1
			yyerror("unallowed character NUL in column %d", yylval.colno + 1);
d296 3
a298 2
		 * There could be a number of reasons for empty buffer, and we handle
		 * all of them here, to avoid cluttering the main loop.
@


1.9
log
@Implement quoting support in doas.conf. Now you can pass environment
variables and arguments with almost any values.

As a bonus, doas will now point to exact place where syntax error occured
most of times; there is some room for improvement, though.

okay tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: parse.y,v 1.8 2015/07/21 16:12:04 tedu Exp $ */
d41 2
d50 1
d67 1
d107 4
a110 3
				if ($$.envlist)
					errx(1, "can't have two keepenv sections");
				else
d179 4
a182 1
	verrx(1, fmt, va);
a200 2
	static int colno = 1, lineno = 1;

d202 1
a202 1
	int i, c, quotes = 0, escape = 0, qpos = 0, nonkw = 0;
d210 1
a210 1
		colno++;
d215 2
a216 2
			colno = 1;
			lineno++;
d226 2
a227 2
			colno = 1;
			lineno++;
d234 1
a234 1
	for (;; c = getc(yyfp), colno++) {
d237 1
a237 2
			yyerror("unallowed character NUL at "
			    "line %d, column %d", lineno, colno);
d247 2
a248 2
				yyerror("unterminated quotes at line %d, column %d",
				    lineno, qpos);
d257 2
a258 2
				yyerror("unterminated escape at line %d, column %d",
				    lineno, colno - 1);
d260 3
a262 2
				yyerror("unterminated quotes at line %d, column %d",
				    lineno, qpos);
d277 1
a277 1
					qpos = colno;
d284 1
a284 1
			yyerror("too long line %d", lineno);
d299 1
a299 1
		else if (!qpos)    /* accept, e.g., empty args: cmd foo args "" */
@


1.8
log
@cases should line up with switch, from Dimitris Papastamos
@
text
@d1 1
a1 1
/* $OpenBSD: parse.y,v 1.7 2015/07/21 11:04:06 zhuk Exp $ */
d193 2
d196 1
a196 1
	int i, c, next;
d200 1
d202 5
a206 1
	c = getc(yyfp);
d208 16
a223 17
	case ' ':
	case '\t':
		goto repeat; /* skip spaces */
	case '\\':
		next = getc(yyfp);
		if (next == '\n')
			goto repeat;
		else
			c = next;
	case '\n':
	case '{':
	case '}':
		return c;
	case '#':
		while ((c = getc(yyfp)) != '\n' && c != EOF)
			; /* skip comments */
		if (c == EOF)
a224 3
		return c;
	case EOF:
		return 0;
d226 3
a228 1
	while (1) {
d230 10
d241 17
d263 12
a274 2
		case EOF:
			goto eow;
d278 2
a279 2
			yyerror("too much stuff");
		c = getc(yyfp);
d281 1
d286 15
a300 3
	for (i = 0; i < sizeof(keywords) / sizeof(keywords[0]); i++) {
		if (strcmp(buf, keywords[i].word) == 0)
			return keywords[i].token;
@


1.7
log
@Add argument matching support to doas.

Input and generic support from many. Final okay from tedu@@.
@
text
@d1 1
a1 1
/* $OpenBSD: parse.y,v 1.6 2015/07/19 22:11:41 benno Exp $ */
d201 17
a217 20
		case ' ':
		case '\t':
			goto repeat; /* skip spaces */
		case '\\':
			next = getc(yyfp);
			if (next == '\n')
				goto repeat;
			else
				c = next;
		case '\n':
		case '{':
		case '}':
			return c;
		case '#':
			while ((c = getc(yyfp)) != '\n' && c != EOF)
				; /* skip comments */
			if (c == EOF)
				return 0;
			return c;
		case EOF:
d219 3
@


1.6
log
@wrap long lines and kill some whitespace
@
text
@d1 1
a1 1
/* $OpenBSD: parse.y,v 1.5 2015/07/19 22:09:08 benno Exp $ */
d35 2
d55 1
a55 1
%token TPERMIT TDENY TAS TCMD
d76 2
a77 1
			r->cmd = $4.str;
d142 22
a163 3
			$$.str = NULL;
		} | TCMD TSTRING {
			$$.str = $2.str;
d185 1
@


1.5
log
@In the config file allow line continuations with backslashes.
Document this, and comments and environment variables.
ok tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: parse.y,v 1.4 2015/07/16 23:02:56 nicm Exp $ */
d80 2
a81 1
				if (!(rules = reallocarray(rules, maxrules, sizeof(*rules))))
d120 2
a121 1
			if (!($$.envlist = reallocarray($1.envlist, nenv + 2, sizeof(char *))))
d185 1
a185 1
			else 
@


1.4
log
@Prototype yy* functions, and use verrx in yyerror(). ok tedu
@
text
@d1 1
a1 1
/* $OpenBSD: parse.y,v 1.3 2015/07/16 22:33:01 zhuk Exp $ */
d169 1
a169 1
	int i, c;
d173 2
a174 2
	while ((c = getc(yyfp)) == ' ' || c == '\t')
		; /* skip spaces */
d176 9
@


1.3
log
@Allow (almost) any non-space character to be a part of "word" in doas.conf.
This allows weird commands like /bin/echo to be used for real. No command
arguments handling yet, though, as well as quoting.

okay tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: parse.y,v 1.2 2015/07/16 22:11:01 nicm Exp $ */
d47 4
d150 1
a150 5
	fprintf(stderr, "doas: ");
	vfprintf(stderr, fmt, va);
	fprintf(stderr, "\n");
	va_end(va);
	exit(1);
@


1.2
log
@Missing reallocarray check in doas.c (ok tedu) and a calloc in parse.y
as well.
@
text
@d1 1
a1 1
/* $OpenBSD: parse.y,v 1.1 2015/07/16 20:44:21 tedu Exp $ */
a187 6
		case ':':
			*p++ = c;
			c = getc(yyfp);
			break;
		default:
			break;
d189 11
a199 1
	while (isalnum(c)) {
d205 1
@


1.1
log
@import doas. still subject to changes, large and small.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d63 2
@

