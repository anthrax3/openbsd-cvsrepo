head	1.24;
access;
symbols
	OPENBSD_6_1_BASE:1.24
	OPENBSD_6_0:1.24.0.4
	OPENBSD_6_0_BASE:1.24
	OPENBSD_5_9:1.24.0.2
	OPENBSD_5_9_BASE:1.24
	OPENBSD_5_8:1.20.0.4
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.17.0.2
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.16.0.6
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.4
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.14.0.16
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.14
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.12
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.10
	OPENBSD_5_0:1.14.0.8
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.6
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.4
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.2
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.13.0.14
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.10
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.8
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.6
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.4
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.2
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.12.0.2
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.11.0.2
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.10.0.10
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.8
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.6
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.8.0.6
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.4
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.6
	OPENBSD_2_8:1.6.0.4
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.2
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.5.0.2
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.4.0.4
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.24
date	2015.11.05.18.42.41;	author mmcc;	state Exp;
branches;
next	1.23;
commitid	s6OB0P2Q6ED2b4VQ;

1.23
date	2015.11.03.05.11.46;	author mmcc;	state Exp;
branches;
next	1.22;
commitid	eMgMws4fTWu6lHk5;

1.22
date	2015.10.09.01.37.07;	author deraadt;	state Exp;
branches;
next	1.21;
commitid	sbrB3Q5CNxcwZpfU;

1.21
date	2015.10.07.06.51.50;	author deraadt;	state Exp;
branches;
next	1.20;
commitid	WWSz9zjkXP4O5FFu;

1.20
date	2015.06.03.18.08.54;	author millert;	state Exp;
branches;
next	1.19;
commitid	szfIV2P3NTk5VyIP;

1.19
date	2015.06.03.02.35.50;	author millert;	state Exp;
branches;
next	1.18;
commitid	HNn0fVr0LXyD37o5;

1.18
date	2015.06.02.15.44.17;	author millert;	state Exp;
branches;
next	1.17;
commitid	QYEX08OpQqeZDQxw;

1.17
date	2015.01.16.06.40.07;	author deraadt;	state Exp;
branches;
next	1.16;
commitid	Uu5nFG3wCl0LACBb;

1.16
date	2013.11.27.13.32.02;	author okan;	state Exp;
branches;
next	1.15;

1.15
date	2013.11.26.13.18.55;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2009.10.27.23.59.38;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2007.02.20.13.52.22;	author jmc;	state Exp;
branches;
next	1.12;

1.12
date	2006.03.14.19.39.49;	author moritz;	state Exp;
branches;
next	1.11;

1.11
date	2005.11.14.15.30.34;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.10.22.20.46;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.03.02.56.08;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2001.11.19.19.02.14;	author mpech;	state Exp;
branches;
next	1.7;

1.7
date	2001.07.12.05.17.06;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2000.01.18.04.57.55;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	99.08.26.14.17.20;	author aaron;	state Exp;
branches;
next	1.4;

1.4
date	98.07.10.15.51.20;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	97.01.15.23.42.29;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.33.27;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.16;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.16;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Add blank lines around pledge call.
@
text
@/*	$OpenBSD: from.c,v 1.23 2015/11/03 05:11:46 mmcc Exp $	*/
/*	$NetBSD: from.c,v 1.6 1995/09/01 01:39:10 jtc Exp $	*/

/*
 * Copyright (c) 1980, 1988, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <ctype.h>
#include <pwd.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <paths.h>
#include <string.h>
#include <err.h>
#include <errno.h>

int	match(char *, char *);
char	*mail_spool(char *file, const char *user);

int
main(int argc, char *argv[])
{
	int ch, newline, fflag = 0;
	char *file, *line, *sender, *p;
	size_t linesize = 0;
	ssize_t linelen;
	FILE *fp;

	file = line = sender = NULL;
	while ((ch = getopt(argc, argv, "f:s:")) != -1) {
		switch(ch) {
		case 'f':
			fflag = 1;
			file = optarg;
			break;
		case 's':
			sender = optarg;
			for (p = sender; *p; ++p)
				if (isupper((unsigned char)*p))
					*p = tolower((unsigned char)*p);
			break;
		default:
			fprintf(stderr,
			    "usage: from [-f file] [-s sender] [user]\n");
			exit(EXIT_FAILURE);
		}
	}
	argv += optind;

	if (pledge("stdio rpath getpw", NULL) == -1)
		err(1, "pledge");

	file = mail_spool(file, *argv);
	if ((fp = fopen(file, "r")) == NULL) {
		if (!fflag && errno == ENOENT)
			exit(EXIT_SUCCESS);
		err(1, "%s", file);
	}

	if (pledge("stdio", NULL) == -1)
		err(1, "pledge");

	for (newline = 1; (linelen = getline(&line, &linesize, fp)) != -1;) {
		if (*line == '\n') {
			newline = 1;
			continue;
		}
		if (newline && !strncmp(line, "From ", 5) &&
		    (!sender || match(line + 5, sender)))
			printf("%s", line);
		newline = 0;
	}
	free(line);
	exit(EXIT_SUCCESS);
}

char *
mail_spool(char *file, const char *user)
{
	struct passwd *pwd;

	/*
	 * We find the mailbox by:
	 *	1 -f flag
	 *	2 _PATH_MAILDIR/user (from argv)
	 *	2 MAIL environment variable
	 *	3 _PATH_MAILDIR/user (from environment or passwd db)
	 */
	if (file == NULL) {
		if (user == NULL) {
			if ((file = getenv("MAIL")) == NULL) {
				if ((user = getenv("LOGNAME")) == NULL &&
				    (user = getenv("USER")) == NULL) {
					if (!(pwd = getpwuid(getuid())))
						errx(1, "no password file "
						    "entry for you");
					user = pwd->pw_name;
				}
			}
		}
		if (file == NULL) {
			if (asprintf(&file, "%s/%s", _PATH_MAILDIR, user) == -1)
				err(1, NULL);
		}
	}
	return(file);
}

int
match(char *line, char *sender)
{
	char ch, pch, first, *p, *t;

	for (first = *sender++;;) {
		if (isspace((unsigned char)(ch = *line)))
			return(0);
		++line;
		if (isupper((unsigned char)ch))
			ch = tolower((unsigned char)ch);
		if (ch != first)
			continue;
		for (p = sender, t = line;;) {
			if (!(pch = *p++))
				return(1);
			if (isupper((unsigned char)(ch = *t++)))
				ch = tolower((unsigned char)ch);
			if (ch != pch)
				break;
		}
	}
	/* NOTREACHED */
}
@


1.23
log
@Blank line after pledge call.
@
text
@d1 1
a1 1
/*	$OpenBSD: from.c,v 1.22 2015/10/09 01:37:07 deraadt Exp $	*/
d86 1
d89 1
@


1.22
log
@Change all tame callers to namechange to pledge(2).
@
text
@d1 1
a1 1
/*	$OpenBSD: from.c,v 1.21 2015/10/07 06:51:50 deraadt Exp $	*/
d79 1
@


1.21
log
@tame "stdio rpath getpw" before getpwuid and opening, then tame "stdio"
@
text
@d1 1
a1 1
/*	$OpenBSD: from.c,v 1.20 2015/06/03 18:08:54 millert Exp $	*/
d77 2
a78 2
	if (tame("stdio rpath getpw", NULL) == -1)
		err(1, "tame");
d85 2
a86 2
	if (tame("stdio", NULL) == -1)
		err(1, "tame");
@


1.20
log
@Treat a missing mail spool the same as a zero-length mail spool
unless the -f option was specified.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: from.c,v 1.19 2015/06/03 02:35:50 millert Exp $	*/
d77 2
d85 2
@


1.19
log
@Move warning on open failure to open_mbox() where we have the file name.
@
text
@d1 1
a1 1
/*	$OpenBSD: from.c,v 1.18 2015/06/02 15:44:17 millert Exp $	*/
d42 1
d45 1
a45 1
FILE	*open_mbox(const char *file, const char *user);
d50 1
a50 1
	int ch, newline;
d60 1
d77 6
a82 2
	if ((fp = open_mbox(file, *argv)) == NULL)
		exit(1);
d97 2
a98 2
FILE *
open_mbox(const char *file, const char *user)
a100 2
	char *buf = NULL;
	FILE *fp;
d122 1
a122 1
			if (asprintf(&buf, "%s/%s", _PATH_MAILDIR, user) == -1)
a123 1
			file = buf;
d126 1
a126 4
	if ((fp = fopen(file, "r")) == NULL)
		warn("%s", file);
	free(buf);
	return(fp);
@


1.18
log
@Modernize from(1) a bit.  Use getline() to support longer lines and
document the environment variables used.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: from.c,v 1.17 2015/01/16 06:40:07 deraadt Exp $	*/
d76 1
a76 1
		err(1, "%s", file);
d123 2
a124 1
	fp = fopen(file, "r");
@


1.17
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: from.c,v 1.16 2013/11/27 13:32:02 okan Exp $	*/
d44 1
a48 1
	struct passwd *pwd;
d50 4
a53 6
	char *file, *sender, *p;
#if PATH_MAX > BUFSIZ
	char buf[PATH_MAX];
#else
	char buf[BUFSIZ];
#endif
d55 2
a56 2
	file = sender = NULL;
	while ((ch = getopt(argc, argv, "f:s:")) != -1)
a66 1
		case '?':
d70 1
a70 1
			exit(1);
d72 1
d75 23
d101 1
a101 1
	 *	2 user
d103 1
a103 1
	 *	3 _PATH_MAILDIR/file
d105 10
a114 13
	if (!file) {
		if (!(file = *argv)) {
			if (!(file = getenv("MAIL"))) {
				if (!(pwd = getpwuid(getuid())))
					errx(1, "no password file entry for you");
				if ((file = getenv("USER"))) {
					(void)snprintf(buf, sizeof(buf),
					    "%s/%s", _PATH_MAILDIR, file);
					file = buf;
				} else
					(void)snprintf(file = buf, sizeof(buf),
					    "%s/%s", _PATH_MAILDIR,
					    pwd->pw_name);
d116 4
a119 3
		} else {
			(void)snprintf(buf, sizeof(buf), "%s/%s",
			    _PATH_MAILDIR, file);
d123 3
a125 13
	if (!freopen(file, "r", stdin))
		err(1, "%s", file);
	for (newline = 1; fgets(buf, sizeof(buf), stdin);) {
		if (*buf == '\n') {
			newline = 1;
			continue;
		}
		if (newline && !strncmp(buf, "From ", 5) &&
		    (!sender || match(buf + 5, sender)))
			printf("%s", buf);
		newline = 0;
	}
	exit(0);
@


1.16
log
@remove erroneous char cast to switch expression processing getopt(3);
not used in any cases.

ok deraadt@@, guenther@@, millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: from.c,v 1.15 2013/11/26 13:18:55 deraadt Exp $	*/
d51 2
a52 2
#if MAXPATHLEN > BUFSIZ
	char buf[MAXPATHLEN];
@


1.15
log
@unsigned char casts for ctype
ok krw
@
text
@d1 1
a1 1
/*	$OpenBSD: from.c,v 1.14 2009/10/27 23:59:38 deraadt Exp $	*/
d59 1
a59 1
		switch((char)ch) {
@


1.14
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: from.c,v 1.13 2007/02/20 13:52:22 jmc Exp $	*/
d66 2
a67 2
				if (isupper(*p))
					*p = tolower(*p);
d125 1
a125 1
		if (isspace(ch = *line))
d128 2
a129 2
		if (isupper(ch))
			ch = tolower(ch);
d135 2
a136 2
			if (isupper(ch = *t++))
				ch = tolower(ch);
@


1.13
log
@sort options and avoid line wrap; from Igor Sobrado
@
text
@d1 1
a1 1
/*	$OpenBSD: from.c,v 1.12 2006/03/14 19:39:49 moritz Exp $	*/
a31 13

#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1980, 1988, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)from.c	8.1 (Berkeley) 6/6/93";
#endif
static char rcsid[] = "$OpenBSD: from.c,v 1.12 2006/03/14 19:39:49 moritz Exp $";
#endif /* not lint */
@


1.12
log
@No need to declare optind/optarg if unistd.h is included.
From David Hill. ok ray@@
@
text
@d1 1
a1 1
/*	$OpenBSD: from.c,v 1.11 2005/11/14 15:30:34 deraadt Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: from.c,v 1.11 2005/11/14 15:30:34 deraadt Exp $";
d84 2
a85 1
			fprintf(stderr, "usage: from [-f file] [-s sender] [user]\n");
@


1.11
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: from.c,v 1.10 2003/06/10 22:20:46 deraadt Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: from.c,v 1.10 2003/06/10 22:20:46 deraadt Exp $";
a60 2
	extern char *optarg;
	extern int optind;
@


1.10
log
@mostly ansi cleanup; pval ok
@
text
@d1 1
a1 1
/*	$OpenBSD: from.c,v 1.9 2003/06/03 02:56:08 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: from.c,v 1.9 2003/06/03 02:56:08 millert Exp $";
d105 1
a105 1
						"%s/%s", _PATH_MAILDIR, file);
d109 2
a110 2
						"%s/%s", _PATH_MAILDIR,
					        pwd->pw_name);
d114 1
a114 1
				_PATH_MAILDIR, file);
@


1.9
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: from.c,v 1.8 2001/11/19 19:02:14 mpech Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: from.c,v 1.8 2001/11/19 19:02:14 mpech Exp $";
d59 1
a59 3
main(argc, argv)
	int argc;
	char **argv;
d134 1
a134 2
match(line, sender)
	char *line, *sender;
@


1.8
log
@kill more registers

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: from.c,v 1.7 2001/07/12 05:17:06 deraadt Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d43 1
a43 1
static char rcsid[] = "$OpenBSD: from.c,v 1.7 2001/07/12 05:17:06 deraadt Exp $";
@


1.7
log
@first pass at a -Wall cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: from.c,v 1.6 2000/01/18 04:57:55 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: from.c,v 1.6 2000/01/18 04:57:55 millert Exp $";
d143 1
a143 1
	register char ch, pch, first, *p, *t;
@


1.6
log
@Use err, not errx when freopen() failes to get error string; form@@openbsd.org
Also, since the file may be user-supplied, don't just pass it as the first
arg to errx() since it could have printf-style escapes in it.
@
text
@d1 1
a1 1
/*	$OpenBSD: from.c,v 1.5 1999/08/26 14:17:20 aaron Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: from.c,v 1.5 1999/08/26 14:17:20 aaron Exp $";
d57 1
d60 3
d109 1
a109 1
				if (file = getenv("USER")) {
d139 1
d141 1
a141 1
	register char *line, *sender;
@


1.5
log
@fix a few more boflows; millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: from.c,v 1.4 1998/07/10 15:51:20 mickey Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: from.c,v 1.4 1998/07/10 15:51:20 mickey Exp $";
d121 1
a121 1
		errx(1, file);
@


1.4
log
@err/warn
@
text
@d1 1
a1 1
/*	$OpenBSD: from.c,v 1.3 1997/01/15 23:42:29 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: from.c,v 1.3 1997/01/15 23:42:29 millert Exp $";
d106 2
a107 2
					(void)sprintf(buf, "%s/%s",
					    _PATH_MAILDIR, file);
d110 3
a112 2
					(void)sprintf(file = buf, "%s/%s",
					    _PATH_MAILDIR, pwd->pw_name);
d115 2
a116 1
			(void)sprintf(buf, "%s/%s", _PATH_MAILDIR, file);
@


1.3
log
@getopt(3) returns -1 when out of args, not EOF, whee!
@
text
@d1 1
a1 1
/*	$OpenBSD: from.c,v 1.2 1996/06/26 05:33:27 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: from.c,v 1.2 1996/06/26 05:33:27 deraadt Exp $";
d57 1
d103 2
a104 5
				if (!(pwd = getpwuid(getuid()))) {
					(void)fprintf(stderr,
				"from: no password file entry for you.\n");
					exit(1);
				}
d118 2
a119 4
	if (!freopen(file, "r", stdin)) {
		(void)fprintf(stderr, "from: can't read %s.\n", file);
		exit(1);
	}
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: from.c,v 1.6 1995/09/01 01:39:10 jtc Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: from.c,v 1.6 1995/09/01 01:39:10 jtc Exp $";
d74 1
a74 1
	while ((ch = getopt(argc, argv, "f:s:")) != EOF)
@


1.1
log
@Initial revision
@
text
@d1 1
d47 1
a47 1
static char rcsid[] = "$NetBSD: from.c,v 1.6 1995/09/01 01:39:10 jtc Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
