head	1.23;
access;
symbols
	OPENBSD_4_5:1.22.0.8
	OPENBSD_4_5_BASE:1.22
	OPENBSD_4_4:1.22.0.6
	OPENBSD_4_4_BASE:1.22
	OPENBSD_4_3:1.22.0.4
	OPENBSD_4_3_BASE:1.22
	OPENBSD_4_2:1.22.0.2
	OPENBSD_4_2_BASE:1.22
	OPENBSD_4_1:1.21.0.6
	OPENBSD_4_1_BASE:1.21
	OPENBSD_4_0:1.21.0.4
	OPENBSD_4_0_BASE:1.21
	OPENBSD_3_9:1.21.0.2
	OPENBSD_3_9_BASE:1.21
	OPENBSD_3_8:1.20.0.2
	OPENBSD_3_8_BASE:1.20
	OPENBSD_3_7:1.18.0.8
	OPENBSD_3_7_BASE:1.18
	OPENBSD_3_6:1.18.0.6
	OPENBSD_3_6_BASE:1.18
	OPENBSD_3_5:1.18.0.4
	OPENBSD_3_5_BASE:1.18
	OPENBSD_3_4:1.18.0.2
	OPENBSD_3_4_BASE:1.18
	OPENBSD_3_3:1.14.0.2
	OPENBSD_3_3_BASE:1.14
	OPENBSD_3_2:1.12.0.8
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.12.0.6
	OPENBSD_3_1_BASE:1.12
	OPENBSD_3_0:1.12.0.4
	OPENBSD_3_0_BASE:1.12
	OPENBSD_2_9_BASE:1.12
	OPENBSD_2_9:1.12.0.2
	OPENBSD_2_8:1.11.0.2
	OPENBSD_2_8_BASE:1.11
	OPENBSD_2_7:1.10.0.2
	OPENBSD_2_7_BASE:1.10
	OPENBSD_2_6:1.7.0.2
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.5.0.2
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.23
date	2009.06.01.16.57.27;	author deraadt;	state dead;
branches;
next	1.22;

1.22
date	2007.05.31.19.20.20;	author jmc;	state Exp;
branches;
next	1.21;

1.21
date	2005.11.04.21.26.52;	author jmc;	state Exp;
branches;
next	1.20;

1.20
date	2005.08.26.08.00.19;	author jmc;	state Exp;
branches;
next	1.19;

1.19
date	2005.04.02.22.59.41;	author jmc;	state Exp;
branches;
next	1.18;

1.18
date	2003.09.04.22.14.43;	author jmc;	state Exp;
branches;
next	1.17;

1.17
date	2003.09.02.18.50.07;	author jmc;	state Exp;
branches;
next	1.16;

1.16
date	2003.06.10.09.12.13;	author jmc;	state Exp;
branches;
next	1.15;

1.15
date	2003.06.03.02.56.23;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2003.03.10.15.37.30;	author jmc;	state Exp;
branches;
next	1.13;

1.13
date	2003.01.16.18.28.10;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2000.11.09.17.52.49;	author aaron;	state Exp;
branches;
next	1.11;

1.11
date	2000.07.06.04.06.57;	author aaron;	state Exp;
branches;
next	1.10;

1.10
date	2000.04.21.15.38.17;	author aaron;	state Exp;
branches;
next	1.9;

1.9
date	2000.03.14.14.58.27;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	2000.03.06.03.17.41;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	99.06.05.01.21.51;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	99.05.12.21.58.32;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	98.11.04.22.36.41;	author aaron;	state Exp;
branches;
next	1.4;

1.4
date	98.10.30.00.24.44;	author aaron;	state Exp;
branches;
next	1.3;

1.3
date	97.02.25.00.04.34;	author downsj;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.43.33;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.46.57;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.46.57;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.23
log
@RIP; ok millert
@
text
@.\"	$OpenBSD: window.1,v 1.22 2007/05/31 19:20:20 jmc Exp $
.\"	$NetBSD: window.1,v 1.3 1995/09/28 10:35:05 tls Exp $
.\"
.\" Copyright (c) 1985, 1990, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Edward Wang at The University of California, Berkeley.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	@@(#)window.1	8.2 (Berkeley) 12/30/93
.\"
.Dd $Mdocdate: May 31 2007 $
.Dt WINDOW 1
.Os
.Sh NAME
.Nm window
.Nd window environment
.Sh SYNOPSIS
.Nm window
.Op Fl dft
.Op Fl c Ar command
.Op Fl e Ar escape-char
.Sh DESCRIPTION
.Nm
implements a window environment on
.Tn ASCII
terminals.
.Pp
A window is a rectangular portion of the physical terminal
screen associated with a set of processes.
Its size and
position can be changed by the user at any time.
Processes
communicate with their window in the same way they normally
interact with a terminal - through their standard input, output,
and diagnostic file descriptors.
The window program handles the
details of redirecting input and output to and from the
windows.
At any one time, only one window can receive
input from the keyboard, but all windows can simultaneously send output
to the display.
.Pp
When
.Nm
starts up, the commands (see long commands below)
contained in the file
.Pa .windowrc
in the user's home directory are
executed.
If it does not exist, two equal sized windows spanning
the terminal screen are created by default.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl c Ar command
Execute the string
.Ar command
as a long command (see below)
before doing anything else.
.It Fl d
Ignore
.Pa .windowrc
and create the two default
windows instead.
.It Fl e Ar escape-char
Set the escape character to
.Ar escape-char .
.Ar escape-char
can be a single character, or in the form
.Ic ^X
where
.Ar X
is any character, meaning
.No control\- Ns Ar X .
.It Fl f
Fast.
Don't perform any startup action.
.It Fl t
Turn on terse mode (see the
.Ic terse
command below).
.El
.Pp
Windows can overlap and are framed as necessary.
Each window is named by one of the digits 1\-9.
This one-character
identifier, as well as a user definable label string, are displayed
with the window on the top edge of its frame.
A window can be designated to be in the
.Ar foreground ,
in which case it will always be
on top of all normal, non-foreground windows, and can be covered
only by other foreground windows.
A window need not be completely
within the edges of the terminal screen.
Thus a large window
(possibly larger than the screen) may be positioned to show only
a portion of its full size.
.Pp
Each window has a cursor and a set of control functions.
Most intelligent terminal operations such as line and
character deletion and insertion are supported.
Display modes
such as underlining and reverse video are available if they are
supported by the terminal.
In addition, similar to terminals with multiple pages of memory,
each window has a text buffer which can have more lines than the window
itself.
.Ss Process Environment
With each newly created window, a shell program is spawned with its
process environment tailored to that window.
Its standard input,
output, and diagnostic file descriptors are bound to one end of either
a pseudo-terminal
.Pq Xr pty 4
or a
.Ux
domain socket
.Pq Xr socketpair 2 .
If a pseudo-terminal is used, then its special
characters and modes (see
.Xr stty 1 )
are copied from the physical
terminal.
A
.Xr termcap 5
entry tailored to this window is created
and passed as environment
.Pq Xr environ 7
variable
.Ev TERMCAP .
The termcap entry contains the window's size and
characteristics as well as information from the physical terminal,
such as the existence of underline, reverse video, and other display
modes, and the codes produced by the terminal's function keys,
if any.
In addition, the window size attributes of the pseudo-terminal
are set to reflect the size of this window, and updated whenever
it is changed by the user.
In particular, the editor
.Xr vi 1
uses
this information to redraw its display.
.Ss Operation
During normal execution,
.Nm
can be in one of two states:
conversation mode and command mode.
In conversation mode, the
terminal's real cursor is placed at the cursor position of a particular
window--called the current window--and input from the keyboard is sent
to the process in that window.
The current window is always
on top of all other windows, except those in the foreground.
In addition,
it is set apart by highlighting its identifier and label in reverse video.
.Pp
Typing
.Nm window Ns 's
escape character (normally
.Ic ^P )
in conversation
mode switches it into command mode.
In command mode, the top line of
the terminal screen becomes the command prompt window, and
.Nm
interprets input from the keyboard as commands to manipulate windows.
.Pp
There are two types of commands: short commands are usually one or two
key strokes; long commands are strings either typed by the user in the
command window (see the
.Dq Ic \&:
command below), or read from a file (see
.Ic source
below).
.Ss Short Commands
Below,
.Ar \&#
represents one of the digits 1\-9
corresponding to the windows 1 to 9.
.Ic ^X
means
.No control\- Ns Ar X ,
where
.Ar X
is any character.
In particular,
.Ic ^^
is
.Li control\-^ .
.Ar Escape
is the escape key, or
.Ic ^\&[ .
.Bl -tag -width Ds
.It Ar #
Select window
.Ar #
as the current window
and return to conversation mode.
.It Ic \&% Ns Ar #
Select window
.Ar #
but stay in command mode.
.It Ic ^^
Select the previous window and return to conversation
mode.
This is useful for toggling between two windows.
.It Ic escape
Return to conversation mode.
.It Ic ^P
Return to conversation mode and write
.Ic ^P
to the
current window.
Thus, typing two
.Ic ^P
in conversation
mode sends one to the current window.
If the
.Nm
escape is changed to some other character, that
character takes the place of
.Ic ^P
here.
.It Ic \&?
List a short summary of commands.
.It Ic ^L
Refresh the screen.
.It Ic q
Exit
.Nm window .
Confirmation is requested.
.It Ic ^Z
Suspend
.Nm window .
.It Ic w
Create a new window.
The user is prompted for the positions
of the upper left and lower right corners of the window.
The cursor is placed on the screen and the keys
.Sq h ,
.Sq j ,
.Sq k ,
and
.Sq l
move the cursor left, down, up, and right, respectively.
The keys
.Sq H ,
.Sq J ,
.Sq K ,
and
.Sq L
move the cursor to the respective
limits of the screen.
Typing a number before the movement keys
repeats the movement that number of times.
Return enters the cursor position as the upper left corner of the window.
The lower right corner
is entered in the same manner.
During this process,
the placement of the new window is indicated by a rectangular
box drawn on the screen, corresponding to where the new window
will be framed.
Typing escape at any point cancels this command.
.Pp
This window becomes the current window,
and is given the first available ID.
The default buffer size is used (see the
.Ar default_nline
command below).
.Pp
Only fully visible windows can be created this way.
.It Ic c Ns Ar #
Close window
.Ar # .
The process in the window is sent
the hangup signal (see
.Xr kill 1 ) .
.Xr csh 1
should
handle this signal correctly and cause no problems.
.It Ic m Ns Ar #
Move window
.Ar #
to another location.
A box in the shape of the window is drawn on
the screen to indicate the new position of the window, and the same keys as
those for the
.Ic w
command are used to position the box.
The window can be moved partially off-screen.
.It Ic M Ns Ar #
Move window
.Ar #
to its previous position.
.It Ic s Ns Ar #
Change the size of window
.Ar # .
The user is prompted
to enter the new lower right corner of the window.
A box is drawn to indicate the new window size.
The same keys used in
.Ic w
and
.Ic m
are used to enter the position.
.It Ic S Ns Ar #
Change window
.Ar #
to its previous size.
.It Ic ^Y
Scroll the current window up by one line.
.It Ic ^E
Scroll the current window down by one line.
.It Ic ^U
Scroll the current window up by half the window size.
.It Ic ^D
Scroll the current window down by half the window size.
.It Ic ^B
Scroll the current window up by the full window size.
.It Ic ^F
Scroll the current window down by the full window size.
.It Ic h
Move the cursor of the current window left by one column.
.It Ic j
Move the cursor of the current window down by one line.
.It Ic k
Move the cursor of the current window up by one line.
.It Ic l
Move the cursor of the current window right by one column.
.It Ic y
Yank.
The user is prompted to enter two points within the current window.
Then the content of the current window between those two points
is saved in the yank buffer.
.It Ic p
Put.
The content of the yank buffer is written to the current window as input.
.It Ic ^S
Stop output in the current window.
.It Ic ^Q
Start output in the current window.
.It Ic :
Enter a line to be executed as long commands.
Normal line
editing characters (erase character, erase word, erase line)
are supported.
.El
.Ss Long Commands
Long commands are a sequence of statements
parsed much like a programming language, with a syntax
similar to that of C.
Numeric and string expressions and variables
are supported, as well as conditional statements.
.Pp
There are two data types: string and number.
A string is a sequence of letters or digits beginning with a letter.
.Ql _
and
.Ql \&.
are considered letters.
Alternately, non-alphanumeric characters can
be included in strings by quoting them in
.Ql \&"
or escaping them with
.Ql \e .
In addition, the
.Ql \e
sequences of C are supported,
both inside and outside quotes (e.g.,
.Ql \en
is a newline,
.Ql \er
a carriage return).
For example, these are legal strings:
abcde01234, "&#$^*&#", ab"$#"cd, ab\\$\\#cd, "/usr/ucb/window".
.Pp
A number is an integer value in one of three forms:
a decimal number, an octal number preceded by
.Sq 0 ,
or a hexadecimal number preceded by
.Sq 0x
or
.Sq 0X .
The natural
machine integer size is used (i.e., the signed integer type
of the C compiler).
As in C, a non-zero number represents
a boolean true.
.Pp
The character
.Ql #
begins a comment which terminates at the end of the line.
.Pp
A statement is either a conditional or an expression.
Expression statements are terminated with a new line or
.Ql \&; .
To continue
an expression on the next line, terminate the first line with
.Ql \e .
.Ss Conditional Statement
.Nm
has a single control structure:
the fully bracketed if statement in the form
.Bd -literal -offset indent
if <expr> then
\t<statement>
\t...
elsif <expr> then
\t<statement>
\t...
else
\t<statement>
\t...
endif
.Ed
.Pp
The
.Ic else
and
.Ic elsif
parts are optional, and the latter can
be repeated any number of times.
<Expr>
must be numeric.
.Ss Expressions
Expressions in
.Nm
are similar to those in the
C language, with most C operators supported on numeric
operands.
In addition, some are overloaded to operate on strings.
.Pp
When an expression is used as a statement, its value is discarded
after evaluation.
Therefore, only expressions with side
effects (assignments and function calls) are useful as statements.
.Pp
Single valued (non-array) variables are supported, of both
numeric and string values.
Some variables are predefined.
They are listed below.
.Pp
The operators in order of increasing precedence:
.Bl -tag -width Fl
.It Xo
.Aq Va expr1
.Ic =
.Aq Va expr2
.Xc
Assignment.
The variable of name
.Aq Va expr1 ,
which must be string valued,
is assigned the result of
.Aq Va expr2 .
Returns the value of
.Aq Va expr2 .
.It Xo
.Aq Va expr1
.Ic ?\&
.Aq Va expr2
.Ic :
.Aq Va expr3
.Xc
Returns the value of
.Aq Va expr2
if
.Aq Va expr1
evaluates true
(non-zero numeric value); returns the value of
.Aq Va expr3
otherwise.
Only one of
.Aq Va expr2
and
.Aq Va expr3
is evaluated.
.Aq Va Expr1
must
be numeric.
.It Xo
.Aq Va expr1
.Ic \&|\&|
.Aq Va expr2
.Xc
Logical or.
Numeric values only.
Short circuit evaluation is supported (i.e., if
.Aq Va expr1
evaluates true, then
.Aq Va expr2
is not evaluated).
.It Xo
.Aq Va expr1
.Ic \&&\&&
.Aq Va expr2
.Xc
Logical and with short circuit evaluation.
Numeric values only.
.It Xo
.Aq Va expr1
.Ic \&|
.Aq Va expr2
.Xc
Bitwise or.
Numeric values only.
.It Xo
.Aq Va expr1
.Ic ^
.Aq Va expr2
.Xc
Bitwise exclusive or.
Numeric values only.
.It Xo
.Aq Va expr1
.Ic \&&
.Aq Va expr2
.Xc
Bitwise and.
Numeric values only.
.It Xo
.Aq Va expr1
.Ic ==
.Aq Va expr2 ,
.Aq Va expr1
.Ic !=
.Aq expr2
.Xc
Comparison (equal and not equal, respectively).
The boolean
result (either 1 or 0) of the comparison is returned.
The operands can be numeric or string valued.
One string operand
forces the other to be converted to a string if necessary.
.It Xo
.Aq Va expr1
.Ic <
.Aq Va expr2 ,
.Aq Va expr1
.Ic >
.Aq Va expr2 ,
.Xc
.It Xo
.Aq Va expr1
.Ic <=
.Aq Va expr2 ,
.Aq Va expr1
.Ic >=
.Aq Va expr2
.Xc
Less than, greater than, less than or equal to,
greater than or equal to.
Both numeric and string values, with automatic conversion as above.
.It Xo
.Aq Va expr1
.Ic <<
.Aq Va expr2 ,
.Aq Va expr1
.Ic >>
.Aq Va expr2
.Xc
If both operands are numbers,
.Aq Va expr1
is bit
shifted left (or right) by
.Aq Va expr2
bits.
If
.Aq Va expr1
is
a string, then its first (or last)
.Aq Va expr2
characters are
returned (if
.Aq Va expr2
is also a string, then its length is used
in place of its value).
.It Xo
.Aq Va expr1
.Ic +
.Aq Va expr2 ,
.Aq Va expr1
.Ic -
.Aq Va expr2
.Xc
Addition and subtraction on numbers.
For
.Ql + ,
if one
argument is a string, then the other is converted to a string,
and the result is the concatenation of the two strings.
.It Xo
.Aq Va expr1
.Ic \&*
.Aq Va expr2 ,
.Aq Va expr1
.Ic \&/
.Aq Va expr2 ,
.Aq Va expr1
.Ic \&%
.Aq Va expr2
.Xc
Multiplication, division, modulo.
Numbers only.
.It Xo
.Ic \- Ns Aq Va expr ,
.Ic ~ Ns Aq Va expr ,
.Ic \&! Ns Aq Va expr ,
.Ic \&$ Ns Aq Va expr ,
.Ic \&$? Ns Aq Va expr
.Xc
The first three are unary minus, bitwise complement and logical complement
on numbers only.
The operator
.Ql $
takes
.Aq Va expr
and returns
the value of the variable of that name.
If
.Aq Va expr
is numeric
with value
.Ar n
and it appears within an alias macro (see below),
then it refers to the nth argument of the alias invocation.
.Ql $?
tests for the existence of the variable
.Aq Va expr ,
and returns 1
if it exists or 0 otherwise.
.It Xo
.Ao Va expr Ac Ns Pq Aq Ar arglist
.Xc
Function call.
.Aq Va Expr
must be a string that is the unique
prefix of the name of a built-in
.Nm
function
or the full name of a user defined alias macro.
In the case of a built-in function,
.Aq Ar arglist
can be in one of two forms:
.Bd -literal -offset indent
<expr1>, <expr2>, ...
argname1 = <expr1>, argname2 = <expr2>, ...
.Ed
.Pp
The two forms can in fact be intermixed, but the result is
unpredictable.
Most arguments can be omitted; default values will
be supplied for them.
The
.Ar argnames
can be unique prefixes
of the argument names.
The commas separating
arguments are used only to disambiguate, and can usually be omitted.
.Pp
Only the first argument form is valid for user defined aliases.
Aliases are defined using the
.Ic alias
built-in function (see below).
Arguments are accessed via a variant of the variable mechanism (see the
.Ql $
operator above).
.Pp
Most functions return value, but some are used for side effect
only and so must be used as statements.
When a function or an alias is used
as a statement, the parentheses surrounding
the argument list may be omitted.
Aliases return no value.
.El
.Ss Built-in functions
The arguments are listed by name in their natural
order.
Optional arguments are in square brackets
.Sq Op .
Arguments
that have no names are in angle brackets
.Sq <> .
An argument meant to be a boolean flag (often named
.Ar flag )
can be one of
.Ar on ,
.Ar off ,
.Ar yes ,
.Ar no ,
.Ar true ,
or
.Ar false ,
with
obvious meanings, or it can be a numeric expression,
in which case a non-zero value is true.
.Bl -tag -width Fl
.It Xo
.Sm off
.Ic alias Po Bo Ao Ar string Ac Bc ,
.No \  Bo Ao Ar string-list Ac Bc Pc
.Sm on
.Xc
If no argument is given, all currently defined alias macros are
listed.
Otherwise,
.Aq Ar string
is defined as an alias,
with expansion
.Aq Ar string-list .
The previous definition of
.Aq Ar string ,
if any, is returned.
Default for
.Aq Ar string-list
is no change.
.It Ic close Ns Pq Aq Ar window-list
Close the windows specified in
.Aq Ar window-list .
If
.Aq Ar window-list
is the word
.Ar all ,
than all windows are closed.
No value is returned.
.It Ic cursormodes Ns Pq Bq Ar modes
Set the window cursor to
.Ar modes .
.Ar Modes
is the bitwise
or of the mode bits defined as the variables
.Ar m_ul
(underline),
.Ar m_rev
(reverse video),
.Ar m_blk
(blinking),
and
.Ar m_grp
(graphics, terminal dependent).
Return value is the previous modes.
Default is no change.
For example,
.Li cursor($m_rev$m_blk)
sets the window cursors to blinking
reverse video.
.It Ic default_nline Ns Pq Bq Ar nline
Set the default buffer size to
.Ar nline .
Initially, it is 48 lines.
Returns the old default buffer size.
Default is no change.
Using a very large buffer can slow the program down considerably.
.It Ic default_shell Ns Pq Bq Aq Ar string-list
Set the default window shell program to
.Aq Ar string-list .
Returns the first string in the old shell setting.
Default is no change.
Initially, the default shell is taken from the environment variable
.Ev SHELL .
.It Ic default_smooth Ns Pq Bq Ar flag
Set the default value of the
.Ar smooth
argument
to the command
.Nm
(see below).
The argument is a boolean flag (one of
.Ar on ,
.Ar off ,
.Ar yes ,
.Ar no ,
.Ar true ,
.Ar false ,
or a number,
as described above).
Default is no change.
The old value (as a number) is returned.
The initial value is 1 (true).
.It Xo
.Ic echo Ns ( Op Ar window ,
.Bq Aq Ar string-list )
.Xc
Write the list of strings,
.Aq Ar string-list ,
to
.Nm window ,
separated
by spaces and terminated with a new line.
The strings are only
displayed in the window, the processes in the window are not
involved (see
.Ic write
below).
No value is returned.
Default is the current window.
.It Ic escape Ns Pq Bq Ar escapec
Set the escape character to
.Ar escape-char .
Returns the old
escape character as a one-character string.
Default is no change.
.Ar Escapec
can be a string of a single character, or
in the form
.Fl ^X ,
meaning
.No control\- Ns Ar X .
.It Xo
.Ic foreground Ns ( Bq Ar window ,
.Bq Ar flag )
.Xc
Move
.Nm
in or out of foreground.
.Ar Flag
is a boolean value.
The old foreground flag is returned.
Default for
.Nm
is the current window,
default for
.Ar flag
is no change.
.It Xo
.Ic label Ns ( Bq Ar window ,
.Bq Ar label )
.Xc
Set the label of
.Nm
to
.Ar label .
Returns the old label as a string.
Default for
.Nm
is the current
window, default for
.Ar label
is no change.
To turn off a label, set it to an empty string ("").
.It Ic list Ns Pq
No arguments.
List the identifiers and labels of all windows.
No value is returned.
.It Ic select Ns Pq Bq Ar window
Make
.Nm
the current window.
The previous current window is returned.
Default is no change.
.It Ic source Ns Pq Ar filename
Read and execute the long commands in
.Ar filename .
Returns \-1 if the file cannot be read, 0 otherwise.
.It Ic terse Ns Pq Bq flag
Set terse mode to
.Ar flag .
In terse mode, the command window
stays hidden even in command mode, and errors are reported by
sounding the terminal's bell.
.Ar Flag
can take on the same
values as in
.Ar foreground
above.
Returns the old terse flag.
Default is no change.
.It Ic unalias Ns Pq Ar alias
Undefine
.Ar alias .
Returns -1 if
.Ar alias
does not exist,
0 otherwise.
.It Ic unset Ns Pq Ar variable
Undefine
.Ar variable .
Returns -1 if
.Ar variable
does not exist,
0 otherwise.
.It Ic variables Ns Pq
No arguments.
List all variables.
No value is returned.
.It Xo
.Ic window Ns ( Bq Ar row ,
.Bq Ar column ,
.Bq Ar nrow ,
.Bq Ar ncol ,
.Bq Ar nline ,
.Bq Ar label ,
.Bq Ar pty ,
.Bq Ar frame ,
.Bq Ar mapnl ,
.Bq Ar keepopen ,
.Bq Ar smooth ,
.Bq Ar shell ) .
.Xc
Open a window with upper left corner at
.Ar row ,
.Ar column
and size
.Ar nrow ,
.Ar ncol .
If
.Ar nline
is specified,
then that many lines are allocated for the text buffer.
Otherwise, the default buffer size is used.
Default values for
.Ar row ,
.Ar column ,
.Ar nrow ,
and
.Ar ncol
are, respectively,
the upper, leftmost, lower, or rightmost extremes of the screen.
.Ar Label
is the label string.
.Ar Frame ,
.Ar pty ,
and
.Ar mapnl
are flag values
interpreted in the same way as the argument to
.Ar foreground
(see above);
they mean, respectively, put a frame around this window (default true),
allocate pseudo-terminal for this window rather than socketpair (default
true), and map new line characters in this window to carriage return
and line feed (default true if socketpair is used, false otherwise).
Normally, a window is automatically closed when its process
exits.
Setting
.Ar keepopen
to true (default false) prevents this
action.
When
.Ar smooth
is true, the screen is updated more frequently
(for this window) to produce a more terminal-like behavior.
The default value of
.Ar smooth
is set by the
.Ar default_smooth
command (see above).
.Ar Shell
is a list of strings that will be used as the shell
program to place in the window (default is the program specified
by
.Ar default_shell ,
see above).
The created window's identifier is returned as a number.
.It Xo
.Ic write Ns ( Bq Ar window ,
.Bq Aq Ar string-list )
.Xc
Send the list of strings,
.Aq Ar string-list ,
to
.Nm window ,
separated
by spaces but not terminated with a new line.
The strings are actually given to the window as input.
No value is returned.
Default is the current window.
.El
.Ss Predefined Variables
These variables are for information only.
Redefining them does not affect the internal operation of
.Nm window .
.Bl -tag -width modes
.It Ar baud
The baud rate as a number between 50 and 38400.
.It Ar modes
The display modes (reverse video, underline, blinking, graphics)
supported by the physical terminal.
The value of
.Ar modes
is the bitwise or of some of the one bit values,
.Ar m_blk ,
.Ar m_grp ,
.Ar m_rev ,
and
.Ar m_ul
(see below).
These values are useful
in setting the window cursors' modes (see
.Ar cursormodes
above).
.It Ar m_blk
The blinking mode bit.
.It Ar m_grp
The graphics mode bit (not very useful).
.It Ar m_rev
The reverse video mode bit.
.It Ar m_ul
The underline mode bit.
.It Ar ncol
The number of columns on the physical screen.
.It Ar nrow
The number of rows on the physical screen.
.It Ar term
The terminal type.
The standard name, found in the second name field of the terminal's
.Ev TERMCAP
entry, is used.
.El
.Sh ENVIRONMENT
.Nm
utilizes these environment variables:
.Ev HOME ,
.Ev SHELL ,
.Ev TERM ,
.Ev TERMCAP ,
.Ev WINDOW_ID .
.Sh FILES
.Bl -tag -width "/dev/[pt]ty[p-zP-T][0-9a-zA-Z]?XX" -compact
.It Pa ~/.windowrc
startup command file
.It Pa /dev/[pt]ty[p-zP-T][0-9a-zA-Z]?
pseudo-terminal devices
.El
.Sh HISTORY
The
.Nm
command appeared in
.Bx 4.3 .
@


1.22
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: window.1,v 1.21 2005/11/04 21:26:52 jmc Exp $
d36 1
a36 1
.Dd $Mdocdate$
@


1.21
log
@update FILES, with some help from millert@@;
@
text
@d1 1
a1 1
.\"	$OpenBSD: window.1,v 1.20 2005/08/26 08:00:19 jmc Exp $
d36 1
a36 1
.Dd December 30, 1993
@


1.20
log
@kill bad punctuation;
@
text
@d1 1
a1 1
.\"	$OpenBSD: window.1,v 1.19 2005/04/02 22:59:41 jmc Exp $
d1045 1
a1045 1
.Bl -tag -width /dev/[pt]ty[pq]? -compact
d1048 1
a1048 1
.It Pa /dev/[pt]ty[pq]?
@


1.19
log
@- simplify synopsis
- sort options
- sync usage()
- simplify a display
@
text
@d1 1
a1 1
.\"	$OpenBSD: window.1,v 1.18 2003/09/04 22:14:43 jmc Exp $
d241 1
a241 1
.Ic ^P Ns 's
@


1.18
log
@put escapes in the right place;
(i.e. stuff I got wrong the first time, or missed)

this includes some .Cd's with missing quotes and .Nm abuse in man4;
@
text
@d1 1
a1 1
.\"	$OpenBSD: window.1,v 1.17 2003/09/02 18:50:07 jmc Exp $
d44 2
a45 3
.Op Fl t
.Op Fl f
.Op Fl d
a46 1
.Op Fl c Ar command
d80 5
a84 7
.It Fl t
Turn on terse mode (see the
.Ic terse
command below).
.It Fl f
Fast.
Don't perform any startup action.
d100 7
a106 5
.It Fl c Ar command
Execute the string
.Ar command
as a long command (see below)
before doing anything else.
d430 1
a430 2
.Pp
.Bd -literal -offset indent -compact
@


1.17
log
@escape punctuation;
ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: window.1,v 1.16 2003/06/10 09:12:13 jmc Exp $
d489 1
a489 1
.Ic \&?
@


1.16
log
@- section reorder
- COMPATIBILITY merge
- macro cleanup
- kill whitespace at EOL
- new sentence, new line

ssh pages ok markus@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: window.1,v 1.15 2003/06/03 02:56:23 millert Exp $
d252 1
a252 1
.It Ic ?
d489 1
a489 1
.Ic ?
@


1.15
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: window.1,v 1.14 2003/03/10 15:37:30 jmc Exp $
d306 1
a306 1
.Xr Csh 1
@


1.14
log
@these pages all had bad section numbers in the .Xr's;

lots of help and ok millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: window.1,v 1.13 2003/01/16 18:28:10 millert Exp $
d18 1
a18 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
@


1.13
log
@Fix typos; from jmc with one fix by me
@
text
@d1 1
a1 1
.\"	$OpenBSD: window.1,v 1.12 2000/11/09 17:52:49 aaron Exp $
d146 1
a146 1
.Xr (pty 4 )
d150 1
a150 1
.Xr (socketpair 4 ) .
d160 1
a160 1
.Xr (environ 5 )
@


1.12
log
@Change all option list specifications to ".Bl -tag -width Ds". Most man
pages just needed their -width parameter tweaked to "Ds", which provides
a nice width of 6 constant characters. For consistency more than anything.
@
text
@d1 1
a1 1
.\"	$OpenBSD: window.1,v 1.11 2000/07/06 04:06:57 aaron Exp $
d87 1
a87 1
Turn on terse mode (see
d185 1
a185 1
on top of all other windows, except those in foreground.
d299 1
a299 1
The default buffer size is used (see
d471 1
a471 1
Single valued (no arrays) variables are supported, of both
d567 1
a567 1
forces the other to be converted to a string in necessary.
d575 2
d580 3
d607 1
a607 1
returns (if
d647 2
a648 2
The operator,
.Ql $ ,
d732 4
a735 2
.Ic alias Ns Po Bq Aq Ar string ,
.Bq Aq Ar string\-list Pc
d743 1
a743 1
.Aq Ar string\-list > .
d748 1
a748 1
.Aq Ar string\-list
d750 1
a750 1
.It Ic close Ns Pq Aq Ar window\-list
d752 1
a752 1
.Aq Ar window\-list .
d754 1
a754 1
.Aq Ar window\-list
d787 1
a787 1
.It Ic default_shell Ns Pq Bq Aq Ar string\-list
d789 1
a789 1
.Aq Ar string\-list .
d815 1
a815 1
.Bq Aq Ar string\-list )
d990 1
a990 1
.Bq Aq Ar string\-list )
@


1.11
log
@Insert more missing .El directives. Our troff really should identify these and
spit out a warning.
@
text
@d1 1
a1 1
.\"	$OpenBSD: window.1,v 1.10 2000/04/21 15:38:17 aaron Exp $
d85 1
a85 1
.Bl -tag -width Fl
@


1.10
log
@Don't hyphenate the words {left|right}most.
@
text
@d1 1
a1 1
.\"	$OpenBSD: window.1,v 1.9 2000/03/14 14:58:27 aaron Exp $
d1035 1
@


1.9
log
@Finish off cleanup usr.bin/ man pages.
@
text
@d1 1
a1 1
.\"	$OpenBSD: window.1,v 1.8 2000/03/06 03:17:41 aaron Exp $
d944 1
a944 2
the upper, left-most, lower, or right-most extremes of the
screen.
@


1.8
log
@Some section re-ordering.
@
text
@d1 1
a1 1
.\"	$OpenBSD: window.1,v 1.7 1999/06/05 01:21:51 aaron Exp $
d60 4
a63 2
screen associated with a set of processes.  Its size and
position can be changed by the user at any time.  Processes
d66 2
a67 1
and diagnostic file descriptors.  The window program handles the
d69 2
a70 1
windows.  At any one time, only one window can receive
d80 2
a81 1
executed.  If it does not exist, two equal sized windows spanning
d84 1
a84 1
The command line options are:
d91 2
a92 1
Fast.  Don't perform any startup action.
d107 1
a107 1
.No control\- Ns Ar X  .
d115 3
a117 2
Windows can overlap and are framed as necessary.  Each window
is named by one of the digits 1\-9.  This one-character
d119 3
a121 3
with the window on the top edge of its frame.  A window can be
designated to be in the
.Ar foreground  ,
d124 4
a127 2
only by other foreground windows.  A window need not be completely
within the edges of the terminal screen.  Thus a large window
d131 4
a134 3
Each window has a cursor and a set of control functions.  Most intelligent
terminal operations such as line and
character deletion and insertion are supported.  Display modes
d136 2
a137 2
supported by the terminal.  In addition,
similar to terminals with multiple pages of memory,
d142 2
a143 1
process environment tailored to that window.  Its standard input,
d155 2
a156 1
terminal.  A
d162 1
a162 1
.Ev TERMCAP  .
d167 2
a168 1
if any.  In addition, the window size attributes of the pseudo-terminal
d170 2
a171 1
it is changed by the user.  In particular, the editor
d179 2
a180 1
conversation mode and command mode.  In conversation mode, the
d183 4
a186 2
to the process in that window.  The current window is always
on top of all other windows, except those in foreground.  In addition,
d194 2
a195 1
mode switches it into command mode.  In command mode, the top line of
d217 2
a218 1
is any character.  In particular,
d237 2
a238 1
mode.  This is useful for toggling between two windows.
d245 2
a246 1
current window.  Thus, typing two
d249 2
a250 1
mode sends one to the current window.  If the
d268 2
a269 1
Create a new window.  The user is prompted for the positions
d285 7
a291 4
limits of the screen.  Typing a number before the movement keys
repeats the movement that number of times.  Return enters the cursor position
as the upper left corner of the window.  The lower right corner
is entered in the same manner.  During this process,
d294 2
a295 2
will be framed.  Typing escape at any point
cancels this command.
d298 2
a299 2
and is given the first available ID.  The default buffer size
is used (see
d316 2
a317 2
to another location.  A box in the shape
of the window is drawn on
d321 2
a322 2
command are used to position the box.  The
window can be moved partially off-screen.
d331 3
a333 3
to enter the new lower right corner of the window.  A box
is drawn to indicate the new window size.  The same
keys used in
d363 3
a365 2
Yank.  The user is prompted to enter two points within the current
window.  Then the content of the current window between those two points
d368 2
a369 2
Put.  The content of the yank buffer is written to the current
window as input.
d383 2
a384 1
similar to that of C.  Numeric and string expressions and variables
d387 2
a388 2
There are two data types: string and number.  A string is a sequence
of letters or digits beginning with a letter.
d392 2
a393 1
are considered letters.  Alternately, non-alphanumeric characters can
d405 2
a406 1
a carriage return).  For example, these are legal strings:
d418 2
a419 1
of the C compiler).  As in C, a non-zero number represents
d426 2
a427 2
A statement is either a conditional or an expression.  Expression
statements are terminated with a new line or
d463 2
a464 1
operands.  In addition, some are overloaded to operate on strings.
d467 2
a468 1
after evaluation.  Therefore, only expressions with side
d472 3
a474 2
numeric and string values.  Some variables are predefined.  They
are listed below.
d483 2
a484 1
Assignment.  The variable of name
d505 2
a506 2
otherwise.  Only
one of
d519 3
a521 2
Logical or.  Numeric values only.  Short circuit evaluation is supported
(i.e., if
d531 2
a532 1
Logical and with short circuit evaluation.  Numeric values only.
d538 2
a539 1
Bitwise or.  Numeric values only.
d545 2
a546 1
Bitwise exclusive or.  Numeric values only.
d552 2
a553 1
Bitwise and.  Numeric values only.
d562 5
a566 3
Comparison (equal and not equal, respectively).  The boolean
result (either 1 or 0) of the comparison is returned.  The
operands can be numeric or string valued.  One string operand
d580 2
a581 2
greater than or equal to.  Both numeric and string values, with
automatic conversion as above.
d595 2
a596 1
bits.  If
d614 2
a615 1
Addition and subtraction on numbers.  For
d631 2
a632 1
Multiplication, division, modulo.  Numbers only.
d641 2
a642 1
on numbers only.  The operator,
d647 2
a648 1
the value of the variable of that name.  If
d669 2
a670 2
or the full name of a user defined alias macro.  In the case of a built-in
function,
d679 4
a682 2
unpredictable.  Most arguments can be omitted; default values will
be supplied for them.  The
d685 2
a686 1
of the argument names.  The commas separating
d689 2
a690 2
Only the first argument form is valid for user defined aliases.  Aliases
are defined using the
d692 2
a693 2
built-in function (see below).  Arguments
are accessed via a variant of the variable mechanism (see the
d698 2
a699 1
only and so must be used as statements.  When a function or an alias is used
d701 2
a702 1
the argument list may be omitted.  Aliases return no value.
d704 1
a704 1
.Ss  Built-in Functions
d706 2
a707 1
order.  Optional arguments are in square brackets
d731 2
a732 1
listed.  Otherwise,
d739 2
a740 1
if any, is returned.  Default for
d749 3
a751 2
.Ar all  ,
than all windows are closed.  No value is returned.
d754 1
a754 1
.Ar modes  .
d766 3
a768 2
(graphics, terminal dependent).  Return
value is the previous modes.  Default is no change.
d775 5
a779 5
.Ar nline  .
Initially, it is
48 lines.  Returns the old default buffer size.  Default is
no change.  Using a very large buffer can slow the program down
considerably.
d783 4
a786 4
Returns
the first string in the old shell setting.  Default is no change.  Initially,
the default shell is taken from the environment variable
.Ev SHELL  .
d793 8
a800 8
(see below).  The argument
is a boolean flag (one of
.Ar on  ,
.Ar off  ,
.Ar yes  ,
.Ar no  ,
.Ar true  ,
.Ar false  ,
d802 2
a803 1
as described above).  Default is no change.
d815 2
a816 1
by spaces and terminated with a new line.  The strings are only
d820 3
a822 2
below).  No value is returned.  Default
is the current window.
d825 1
a825 1
.Ar escape-char  .
d827 2
a828 2
escape character as a one-character string.  Default is no
change.
d843 3
a845 2
is a boolean value.  The old foreground flag
is returned.  Default for
d858 3
a860 3
.Ar label  .
Returns the old
label as a string.  Default for
d865 2
a866 2
is no change.  To turn
off a label, set it to an empty string ("").
d868 3
a870 2
No arguments.  List the identifiers and labels of all windows.  No
value is returned.
d874 3
a876 2
the current window.  The previous current window
is returned.  Default is no change.
d879 1
a879 1
.Ar filename  .
d883 1
a883 1
.Ar flag  .
d891 2
a892 1
above.  Returns the old terse flag.
d896 1
a896 1
.Ar alias  .
d903 1
a903 1
.Ar variable  .
d909 3
a911 1
No arguments.  List all variables.  No value is returned.
d927 1
a927 1
.Ar row  ,
d930 2
a931 2
.Ar nrow  ,
.Ar ncol  .
d935 6
a940 5
then that many lines are allocated for the text buffer.  Otherwise,
the default buffer size is used.  Default values for
.Ar row  ,
.Ar column  ,
.Ar nrow  ,
d948 2
a949 2
.Ar Frame  ,
.Ar pty  ,
d961 2
a962 1
exits.  Setting
d965 2
a966 1
action.  When
d980 2
a981 2
see above).  The created window's identifier
is returned as a number.
d991 4
a994 3
by spaces but not terminated with a new line.  The strings are actually
given to the window as input.  No value is returned.  Default
is the current window.
d997 2
a998 2
These variables are for information only.  Redefining them does
not affect the internal operation of
d1005 2
a1006 1
supported by the physical terminal.  The value of
d1032 2
a1033 2
The terminal type.  The standard name, found in the second name
field of the terminal's
@


1.7
log
@- remove trailing white space
- remove arguments from .Os macros
- remove arguments from .Nm macros, where appropriate
- some more Dq/Sq/Ql insanity
- still lots to do in the usr.bin tree... :/
@
text
@d1 1
a1 1
.\"	$OpenBSD: window.1,v 1.6 1999/05/12 21:58:32 aaron Exp $
a984 2
.Sh DIAGNOSTICS
Should be self explanatory.
@


1.6
log
@builtin -> built-in
@
text
@d1 1
a1 1
.\"	$OpenBSD: window.1,v 1.5 1998/11/04 22:36:41 aaron Exp $
d42 1
a42 1
.Os BSD 4.3
d54 1
a54 1
.Nm window
d71 1
a71 1
.Nm window
d92 1
a92 1
.It Fl e Ar escape-char 
d94 2
a95 2
.Ar escape-char  .
.Ar Escape-char
d101 2
a102 2
.No control\- Ns Ar X  . 
.It Fl c Ar command 
d110 1
a110 1
is named by one of the digits ``1'' to ``9''.  This one-character
d163 1
a163 1
.Nm window
d173 1
a173 1
.Nm window Ns 's 
d179 1
a179 1
.Nm window
d192 1
a192 1
represents one of the digits ``1'' to ``9''
d196 1
a196 1
.No control\- Ns Ar X  , 
d212 1
a212 1
.It Ic \&% Ns Ar # 
d229 1
a229 1
.Nm window
d240 1
a240 1
.Nm window  .
d244 1
a244 1
.Nm window  .
d248 6
a253 2
The cursor is placed on the screen and the keys ``h'', ``j'',
``k'', and ``l''
d255 7
a261 1
The keys ``H'', ``J'', ``K'', and ``L'' move the cursor to the respective
d278 1
a278 1
.It Ic c Ns Ar # 
d287 1
a287 1
.It Ic m Ns Ar # 
d297 1
a297 1
.It Ic M Ns Ar # 
d301 1
a301 1
.It Ic s Ns Ar # 
d312 1
a312 1
.It Ic S Ns Ar # 
d360 17
a376 6
of letters or digits beginning with a letter.  ``_'' and ``.'' are
considered letters.  Alternately, non-alphanumeric characters can
be included in strings by quoting them in ``"'' or escaping them
with ``\\''.  In addition, the ``\\'' sequences of C are supported,
both inside and outside quotes (e.g., ``\\n'' is a new line,
``\\r'' a carriage return).  For example, these are legal strings:
d380 7
a386 2
a decimal number, an octal number preceded by ``0'',
or a hexadecimal number preceded by ``0x'' or ``0X''.  The natural
d391 3
a393 2
The character ``#'' begins a comment which terminates at the
end of the line.
d396 5
a400 2
statements are terminated with a new line or ``;''.  To continue
an expression on the next line, terminate the first line with ``\\''.
d402 1
a402 1
.Nm window
d429 1
a429 1
.Nm window
d450 1
a450 1
.Aq Va expr1 , 
d453 1
a453 1
.Aq Va expr2 . 
d455 1
a455 1
.Aq Va expr2 . 
d464 1
a464 1
.Aq Va expr2 
d466 1
a466 1
.Aq Va expr1 
d469 1
a469 1
.Aq Va expr3 
d472 1
a472 1
.Aq Va expr2 
d474 1
a474 1
.Aq Va expr3 
d476 1
a476 1
.Aq Va Expr1 
d486 1
a486 1
.Aq Va expr1 
d488 1
a488 1
.Aq Va expr2 
d571 3
a573 1
Addition and subtraction on numbers.  For ``+'', if one
d596 3
a598 1
on numbers only.  The operator, ``$'', takes
d607 2
a608 1
then it refers to the nth argument of the alias invocation.  ``$?''
d620 1
a620 1
.Nm window
d643 3
a645 2
are accessed via a variant of the variable mechanism (see ``$'' operator
above).
d682 1
a682 1
.Aq Ar string\-list > . 
d735 1
a735 1
.Nm window
d755 1
a755 1
.Nm window  ,
d777 1
a777 1
.Bq Ar flag ) 
d780 1
a780 1
.Nm window
d785 1
a785 1
.Nm window
d792 1
a792 1
.Bq Ar label ) 
d795 1
a795 1
.Nm window
d800 1
a800 1
.Nm window
d811 1
a811 1
.Nm window
d853 1
a853 1
.Bq Ar pty , 
d858 1
a858 1
.Bq Ar shell ) . 
d910 1
a910 1
.Ar default_shell  ,
d920 1
a920 1
.Nm window  ,
d929 1
a929 1
.Nm window  .
d966 1
a966 1
.Nm window
d977 1
a977 1
.It Pa /dev/[pt]ty[pq]? 
d982 1
a982 1
.Nm window
@


1.5
log
@be really pedantic about punctuation following -mdoc macro'd text
@
text
@d1 1
a1 1
.\"	$OpenBSD: window.1,v 1.4 1998/10/30 00:24:44 aaron Exp $
d584 1
a584 1
prefix of the name of a builtin
d587 1
a587 1
or the full name of a user defined alias macro.  In the case of a builtin
d607 1
a607 1
builtin function (see below).  Arguments
d616 1
a616 1
.Ss  Builtin Functions
@


1.4
log
@usr.bin/ man page fixes, t-z
@
text
@d1 1
a1 1
.\"	$OpenBSD: window.1,v 1.3 1997/02/25 00:04:34 downsj Exp $
d202 1
a202 1
.Li control\-^.
@


1.3
log
@Reimport NetBSD version w/ Todd's changes, new rcsids, and the beginings of
some source cleaning by me.

This undoes Theo's wait() changes which broke the old version.
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d54 1
a54 1
.Nm Window
d63 1
a63 1
interact with a terminal\-through their standard input, output,
d79 1
a79 1
The command line options are
d372 1
a372 1
.Nm Window
d930 1
a930 1
.Nm Window
d940 1
a940 1
startup command file.
d942 1
a942 1
pseudo-terminal devices.
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
.\"	$OpenBSD: window.1,v 1.3 1995/09/28 10:35:05 tls Exp $
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
