head	1.24;
access;
symbols
	OPENBSD_6_0:1.24.0.4
	OPENBSD_6_0_BASE:1.24
	OPENBSD_5_9:1.24.0.2
	OPENBSD_5_9_BASE:1.24
	OPENBSD_5_8:1.19.0.10
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.19.0.2
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.19.0.6
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.19.0.4
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.18.0.16
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.18.0.14
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.12
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.10
	OPENBSD_5_0:1.18.0.8
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.18.0.6
	OPENBSD_4_9_BASE:1.18
	OPENBSD_4_8:1.18.0.4
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.18.0.2
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.17.0.10
	OPENBSD_4_6_BASE:1.17
	OPENBSD_4_5:1.17.0.6
	OPENBSD_4_5_BASE:1.17
	OPENBSD_4_4:1.17.0.4
	OPENBSD_4_4_BASE:1.17
	OPENBSD_4_3:1.17.0.2
	OPENBSD_4_3_BASE:1.17
	OPENBSD_4_2:1.15.0.6
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.4
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.2
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.14.0.12
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.14.0.10
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.14.0.8
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.14.0.6
	OPENBSD_3_6_BASE:1.14
	OPENBSD_3_5:1.14.0.4
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.14.0.2
	OPENBSD_3_4_BASE:1.14
	OPENBSD_3_3:1.12.0.2
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.10.0.2
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.4
	OPENBSD_2_8:1.6.0.2
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.5.0.12
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.10
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.8
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.6
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.4
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.24
date	2015.12.19.10.21.01;	author schwarze;	state Exp;
branches;
next	1.23;
commitid	j7j2XfU9d5hkInp2;

1.23
date	2015.11.02.20.25.42;	author mmcc;	state Exp;
branches;
next	1.22;
commitid	Ei2OAMtMpQVkrvPL;

1.22
date	2015.10.09.01.37.09;	author deraadt;	state Exp;
branches;
next	1.21;
commitid	sbrB3Q5CNxcwZpfU;

1.21
date	2015.10.04.04.56.50;	author deraadt;	state Exp;
branches;
next	1.20;
commitid	eqnuRUvFqXxvWybg;

1.20
date	2015.10.03.02.18.20;	author deraadt;	state Exp;
branches;
next	1.19;
commitid	JSbWG8Oh12bznI0n;

1.19
date	2013.11.26.19.25.39;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2009.10.27.23.59.46;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2007.11.11.17.50.29;	author kili;	state Exp;
branches;
next	1.16;

1.16
date	2007.11.09.20.04.03;	author kili;	state Exp;
branches;
next	1.15;

1.15
date	2006.04.07.05.10.02;	author ray;	state Exp;
branches;
next	1.14;

1.14
date	2003.06.03.02.56.21;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2003.04.05.16.17.26;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2002.12.08.22.43.54;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2002.12.08.06.40.44;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2002.07.13.06.04.24;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2002.02.16.21.27.56;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2001.11.19.19.02.17;	author mpech;	state Exp;
branches;
next	1.7;

1.7
date	2001.07.12.05.17.28;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2000.06.30.16.00.22;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.07.25.22.21.40;	author mickey;	state Exp;
branches
	1.5.12.1;
next	1.4;

1.4
date	97.07.25.21.05.46;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	97.01.15.23.43.28;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.42.13;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.46.29;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.46.29;	author deraadt;	state Exp;
branches;
next	;

1.5.12.1
date	2000.10.06.21.16.17;	author jason;	state Exp;
branches;
next	;


desc
@@


1.24
log
@UTF-8 support:
Let -f recognize non-ASCII blank characters
and let -s count characters rather than bytes.
OK zhuk@@ bentley@@
@
text
@/*	$OpenBSD: uniq.c,v 1.23 2015/11/02 20:25:42 mmcc Exp $	*/
/*	$NetBSD: uniq.c,v 1.7 1995/08/31 22:03:48 jtc Exp $	*/

/*
 * Copyright (c) 1989, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Case Larsen.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <ctype.h>
#include <err.h>
#include <errno.h>
#include <limits.h>
#include <locale.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <wchar.h>
#include <wctype.h>

#define	MAXLINELEN	(8 * 1024)

int cflag, dflag, uflag;
int numchars, numfields, repeats;

FILE	*file(char *, char *);
void	 show(FILE *, char *);
char	*skip(char *);
void	 obsolete(char *[]);
__dead void	usage(void);

int
main(int argc, char *argv[])
{
	char *t1, *t2;
	FILE *ifp = NULL, *ofp = NULL;
	int ch;
	char *prevline, *thisline;

	setlocale(LC_CTYPE, "");

	if (pledge("stdio rpath wpath cpath", NULL) == -1)
		err(1, "pledge");

	obsolete(argv);
	while ((ch = getopt(argc, argv, "cdf:s:u")) != -1) {
		const char *errstr;

		switch (ch) {
		case 'c':
			cflag = 1;
			break;
		case 'd':
			dflag = 1;
			break;
		case 'f':
			numfields = (int)strtonum(optarg, 0, INT_MAX,
			    &errstr);
			if (errstr)
				errx(1, "field skip value is %s: %s",
				    errstr, optarg);
			break;
		case 's':
			numchars = (int)strtonum(optarg, 0, INT_MAX,
			    &errstr);
			if (errstr)
				errx(1,
				    "character skip value is %s: %s",
				    errstr, optarg);
			break;
		case 'u':
			uflag = 1;
			break;
		default:
			usage();
		}
	}

	argc -= optind;
	argv += optind;

	/* If neither -d nor -u are set, default is -d -u. */
	if (!dflag && !uflag)
		dflag = uflag = 1;

	switch(argc) {
	case 0:
		ifp = stdin;
		ofp = stdout;
		break;
	case 1:
		ifp = file(argv[0], "r");
		ofp = stdout;
		break;
	case 2:
		ifp = file(argv[0], "r");
		ofp = file(argv[1], "w");
		break;
	default:
		usage();
	}

	if (pledge("stdio", NULL) == -1)
		err(1, "pledge");

	prevline = malloc(MAXLINELEN);
	thisline = malloc(MAXLINELEN);
	if (prevline == NULL || thisline == NULL)
		err(1, "malloc");

	if (fgets(prevline, MAXLINELEN, ifp) == NULL)
		exit(0);

	while (fgets(thisline, MAXLINELEN, ifp)) {
		/* If requested get the chosen fields + character offsets. */
		if (numfields || numchars) {
			t1 = skip(thisline);
			t2 = skip(prevline);
		} else {
			t1 = thisline;
			t2 = prevline;
		}

		/* If different, print; set previous to new value. */
		if (strcmp(t1, t2)) {
			show(ofp, prevline);
			t1 = prevline;
			prevline = thisline;
			thisline = t1;
			repeats = 0;
		} else
			++repeats;
	}
	show(ofp, prevline);
	exit(0);
}

/*
 * show --
 *	Output a line depending on the flags and number of repetitions
 *	of the line.
 */
void
show(FILE *ofp, char *str)
{
	if ((dflag && repeats) || (uflag && !repeats)) {
		if (cflag)
			(void)fprintf(ofp, "%4d %s", repeats + 1, str);
		else
			(void)fprintf(ofp, "%s", str);
	}
}

char *
skip(char *str)
{
	wchar_t wc;
	int nchars, nfields;
	int len;
	int field_started;

	for (nfields = numfields; nfields && *str; nfields--) {
		/* Skip one field, including preceding blanks. */
		for (field_started = 0; *str != '\0'; str += len) {
			if ((len = mbtowc(&wc, str, MB_CUR_MAX)) == -1) {
				(void)mbtowc(NULL, NULL, MB_CUR_MAX);
				wc = L'?';
				len = 1;
			}
			if (iswblank(wc)) {
				if (field_started)
					break;
			} else
				field_started = 1;
		}
	}

	/* Skip some additional characters. */
	for (nchars = numchars; nchars-- && *str != '\0'; str += len)
		if ((len = mblen(str, MB_CUR_MAX)) == -1)
			len = 1;

	return (str);
}

FILE *
file(char *name, char *mode)
{
	FILE *fp;

	if (strcmp(name, "-") == 0)
		return(*mode == 'r' ? stdin : stdout);
	if ((fp = fopen(name, mode)) == NULL)
		err(1, "%s", name);
	return (fp);
}

void
obsolete(char *argv[])
{
	size_t len;
	char *ap, *p, *start;

	while ((ap = *++argv)) {
		/* Return if "--" or not an option of any form. */
		if (ap[0] != '-') {
			if (ap[0] != '+')
				return;
		} else if (ap[1] == '-')
			return;
		if (!isdigit((unsigned char)ap[1]))
			continue;
		/*
		 * Digit signifies an old-style option.  Malloc space for dash,
		 * new option and argument.
		 */
		len = strlen(ap) + 3;
		if ((start = p = malloc(len)) == NULL)
			err(1, "malloc");
		*p++ = '-';
		*p++ = ap[0] == '+' ? 's' : 'f';
		(void)strlcpy(p, ap + 1, len - 2);
		*argv = start;
	}
}

__dead void
usage(void)
{
	extern char *__progname;

	(void)fprintf(stderr,
	    "usage: %s [-c] [-d | -u] [-f fields] [-s chars] [input_file [output_file]]\n",
	    __progname);
	exit(1);
}
@


1.23
log
@Cast isdigit()'s argument to an unsigned char.

ok millert@@, jca@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uniq.c,v 1.22 2015/10/09 01:37:09 deraadt Exp $	*/
d40 1
d45 2
d67 2
d184 1
d186 2
d190 13
a202 4
		while (isblank((unsigned char)*str))
			str++;
		while (*str && !isblank((unsigned char)*str))
			str++;
d204 6
a209 2
	for (nchars = numchars; nchars-- && *str && *str != '\n'; ++str)
		;
@


1.22
log
@Change all tame callers to namechange to pledge(2).
@
text
@d1 1
a1 1
/*	$OpenBSD: uniq.c,v 1.21 2015/10/04 04:56:50 deraadt Exp $	*/
d217 1
a217 1
		if (!isdigit(ap[1]))
@


1.21
log
@Repair tame() error check to be == -1
@
text
@d1 1
a1 1
/*	$OpenBSD: uniq.c,v 1.20 2015/10/03 02:18:20 deraadt Exp $	*/
d64 2
a65 2
	if (tame("stdio rpath wpath cpath", NULL) == -1)
		err(1, "tame");
d125 2
a126 2
	if (tame("stdio", NULL) == -1)
		err(1, "tame");
@


1.20
log
@uniq has a complicated initialization around getopt. beforehands, we
can tame "stdio rpath wpath cpath"; all three paths abilities are needed
for it to setup the right files (worst case spotted by sthen).  later
once the files are opened, the program is only looking at strings and
outputing via stdio functions, so we can tame "stdio".
@
text
@d1 1
a1 1
/*	$OpenBSD: uniq.c,v 1.19 2013/11/26 19:25:39 deraadt Exp $	*/
d125 1
a125 1
	if (tame("stdio", NULL) != 0)
@


1.19
log
@unsigned char casts for ctype
ok okan
@
text
@d1 1
a1 1
/*	$OpenBSD: uniq.c,v 1.18 2009/10/27 23:59:46 deraadt Exp $	*/
d64 3
d124 3
@


1.18
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: uniq.c,v 1.17 2007/11/11 17:50:29 kili Exp $	*/
d176 1
a176 1
		while (isblank(*str))
d178 1
a178 1
		while (*str && !isblank(*str))
@


1.17
log
@
Mention that -cd and -cu are possible, and that it's an extension to POSIX.
discussed with jmc and otto

ok jmc
@
text
@d1 1
a1 1
/*	$OpenBSD: uniq.c,v 1.16 2007/11/09 20:04:03 kili Exp $	*/
a34 13

#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1989, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)uniq.c	8.3 (Berkeley) 5/4/95";
#endif
static char rcsid[] = "$OpenBSD: uniq.c,v 1.16 2007/11/09 20:04:03 kili Exp $";
#endif /* not lint */
@


1.16
log
@
Allow -c in conjunction with -d (and -u).
If field skipping is active, don't skip beyond the last non-blank
of a field, and use isblank() instead of isspace() -- POSIX states
that the longest string matching [[:blank:]]*[^[:blank:]]* makes
up a field.
Don't skip over trailing newlines.

Help, testing and ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uniq.c,v 1.15 2006/04/07 05:10:02 ray Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: uniq.c,v 1.15 2006/04/07 05:10:02 ray Exp $";
d246 1
a246 1
	    "usage: %s [-c | -d | -u] [-f fields] [-s chars] [input_file [output_file]]\n",
@


1.15
log
@Stylistic changes initially from Thordur I. Bjornsson, more cleanup
and delinting from me.

OK otto@@ and jaredy@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uniq.c,v 1.14 2003/06/03 02:56:21 millert Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: uniq.c,v 1.14 2003/06/03 02:56:21 millert Exp $";
d114 2
a115 5
	/* If no flags are set, default is -d -u. */
	if (cflag) {
		if (dflag || uflag)
			usage();
	} else if (!dflag && !uflag)
d175 6
a180 5

	if (cflag && *str)
		(void)fprintf(ofp, "%4d %s", repeats + 1, str);
	if ((dflag && repeats) || (uflag && !repeats))
		(void)fprintf(ofp, "%s", str);
d186 1
a186 1
	int infield, nchars, nfields;
d188 7
a194 9
	for (nfields = numfields, infield = 0; nfields && *str; ++str)
		if (isspace(*str)) {
			if (infield) {
				infield = 0;
				--nfields;
			}
		} else if (!infield)
			infield = 1;
	for (nchars = numchars; nchars-- && *str; ++str)
d244 1
a244 1
	
@


1.14
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: uniq.c,v 1.13 2003/04/05 16:17:26 deraadt Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: uniq.c,v 1.13 2003/04/05 16:17:26 deraadt Exp $";
d49 2
d52 1
a53 1
#include <ctype.h>
a56 1
#include <err.h>
d67 1
a67 1
void	 usage(void);
d75 1
a75 1
	char *prevline, *thisline, *p;
d78 3
a80 1
	while ((ch = getopt(argc, argv, "cdf:s:u")) != -1)
d89 5
a93 3
			numfields = strtol(optarg, &p, 10);
			if (numfields < 0 || *p)
				errx(1, "illegal field skip value: %s", optarg);
d96 6
a101 3
			numchars = strtol(optarg, &p, 10);
			if (numchars < 0 || *p)
				errx(1, "illegal character skip value: %s", optarg);
a105 1
		case '?':
d108 1
d112 1
a112 1
	argv +=optind;
d181 1
a181 1
	if (dflag && repeats || uflag && !repeats)
d198 3
a200 2
	for (nchars = numchars; nchars-- && *str; ++str);
	return(str);
d212 1
a212 1
	return(fp);
d218 1
a218 1
	int len;
d244 1
a244 1
void
d247 2
d250 2
a251 1
	    "usage: uniq [-c | -du] [-f fields] [-s chars] [input [output]]\n");
@


1.13
log
@strlcpy whack; miod ok
@
text
@d1 1
a1 1
/*	$OpenBSD: uniq.c,v 1.12 2002/12/08 22:43:54 millert Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d46 1
a46 1
static char rcsid[] = "$OpenBSD: uniq.c,v 1.12 2002/12/08 22:43:54 millert Exp $";
@


1.12
log
@Treat a file name of "-" as either stdin or stdout, depending on position.
@
text
@d1 1
a1 1
/*	$OpenBSD: uniq.c,v 1.11 2002/12/08 06:40:44 millert Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: uniq.c,v 1.11 2002/12/08 06:40:44 millert Exp $";
d229 2
a230 2
		len = strlen(ap);
		if ((start = p = malloc(len + 3)) == NULL)
d234 1
a234 1
		(void)strcpy(p, ap + 1);
@


1.11
log
@No need to try and catch "--" by hand, getopt() does it for us.
@
text
@d1 1
a1 1
/*	$OpenBSD: uniq.c,v 1.10 2002/07/13 06:04:24 deraadt Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: uniq.c,v 1.10 2002/07/13 06:04:24 deraadt Exp $";
d203 2
@


1.10
log
@ansi
@
text
@d1 1
a1 1
/*	$OpenBSD: uniq.c,v 1.9 2002/02/16 21:27:56 millert Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: uniq.c,v 1.9 2002/02/16 21:27:56 millert Exp $";
d81 1
a81 1
	while ((ch = getopt(argc, argv, "-cdf:s:u")) != -1)
a82 3
		case '-':
			--optind;
			goto done;
d107 1
a107 1
done:	argc -= optind;
@


1.9
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: uniq.c,v 1.8 2001/11/19 19:02:17 mpech Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: uniq.c,v 1.8 2001/11/19 19:02:17 mpech Exp $";
d73 1
a73 3
main (argc, argv)
	int argc;
	char *argv[];
d76 1
a76 1
	FILE *ifp, *ofp;
d175 1
a175 3
show(ofp, str)
	FILE *ofp;
	char *str;
d185 1
a185 2
skip(str)
	char *str;
d202 1
a202 2
file(name, mode)
	char *name, *mode;
d212 1
a212 2
obsolete(argv)
	char *argv[];
d241 1
a241 1
usage()
@


1.8
log
@kill more registers

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: uniq.c,v 1.7 2001/07/12 05:17:28 deraadt Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: uniq.c,v 1.7 2001/07/12 05:17:28 deraadt Exp $";
d66 5
a70 5
FILE	*file __P((char *, char *));
void	 show __P((FILE *, char *));
char	*skip __P((char *));
void	 obsolete __P((char *[]));
void	 usage __P((void));
@


1.7
log
@first pass at a -Wall cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: uniq.c,v 1.6 2000/06/30 16:00:22 millert Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: uniq.c,v 1.6 2000/06/30 16:00:22 millert Exp $";
d77 1
a77 1
	register char *t1, *t2;
d190 1
a190 1
	register char *str;
d192 1
a192 1
	register int infield, nchars, nfields;
@


1.6
log
@warnx?/errx? paranoia (use "%s" not a bare string unless it is a
constant).  These are not security holes but it is worth fixing
them anyway both for robustness and so folks looking for examples
in the tree are not misled into doing something potentially dangerous.
Furthermore, it is a bad idea to assume that pathnames will not
include '%' in them and that error routines don't return strings
with '%' in them (especially in light of the possibility of locales).
@
text
@d1 1
a1 1
/*	$OpenBSD: uniq.c,v 1.5 1997/07/25 22:21:40 mickey Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: uniq.c,v 1.5 1997/07/25 22:21:40 mickey Exp $";
d224 1
a224 1
	while (ap = *++argv) {
@


1.5
log
@use err(3)
@
text
@d1 1
a1 1
/*	$OpenBSD: uniq.c,v 1.4 1997/07/25 21:05:46 mickey Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: uniq.c,v 1.4 1997/07/25 21:05:46 mickey Exp $";
d213 1
a213 1
		err(1, name);
@


1.5.12.1
log
@Pull in patch from current (even more to come):
Fix (millert):
warnx?/errx? paranoia (use "%s" not a bare string unless it is a
constant).  These are not security holes but it is worth fixing
them anyway both for robustness and so folks looking for examples
in the tree are not misled into doing something potentially dangerous.
Furthermore, it is a bad idea to assume that pathnames will not
include '%' in them and that error routines don't return strings
with '%' in them (especially in light of the possibility of locales).
@
text
@d1 1
a1 1
/*	$OpenBSD: uniq.c,v 1.6 2000/06/30 16:00:22 millert Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: uniq.c,v 1.6 2000/06/30 16:00:22 millert Exp $";
d213 1
a213 1
		err(1, "%s", name);
@


1.4
log
@#if __STDC__ --> #ifdef __STDC__
@
text
@d1 1
a1 1
/*	$OpenBSD: uniq.c,v 1.3 1997/01/15 23:43:28 millert Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: uniq.c,v 1.3 1997/01/15 23:43:28 millert Exp $";
d59 1
a65 1
void	 err __P((const char *, ...));
d97 1
a97 1
				err("illegal field skip value: %s", optarg);
d102 1
a102 1
				err("illegal character skip value: %s", optarg);
d142 1
a142 1
		err("%s", strerror(errno));
d213 1
a213 1
		err("%s: %s", name, strerror(errno));
d239 1
a239 1
			err("%s", strerror(errno));
a252 29
}

#ifdef __STDC__
#include <stdarg.h>
#else
#include <varargs.h>
#endif

void
#ifdef __STDC__
err(const char *fmt, ...)
#else
err(fmt, va_alist)
	char *fmt;
        va_dcl
#endif
{
	va_list ap;
#ifdef __STDC__
	va_start(ap, fmt);
#else
	va_start(ap);
#endif
	(void)fprintf(stderr, "uniq: ");
	(void)vfprintf(stderr, fmt, ap);
	va_end(ap);
	(void)fprintf(stderr, "\n");
	exit(1);
	/* NOTREACHED */
@


1.3
log
@getopt(3) returns -1 when out of args, not EOF, whee!
@
text
@d1 1
a1 1
/*	$OpenBSD: uniq.c,v 1.2 1996/06/26 05:42:13 deraadt Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: uniq.c,v 1.2 1996/06/26 05:42:13 deraadt Exp $";
d255 1
a255 1
#if __STDC__
d262 1
a262 1
#if __STDC__
d271 1
a271 1
#if __STDC__
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: uniq.c,v 1.7 1995/08/31 22:03:48 jtc Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: uniq.c,v 1.7 1995/08/31 22:03:48 jtc Exp $";
d83 1
a83 1
	while ((ch = getopt(argc, argv, "-cdf:s:u")) != EOF)
@


1.1
log
@Initial revision
@
text
@d1 1
d50 1
a50 1
static char rcsid[] = "$NetBSD: uniq.c,v 1.7 1995/08/31 22:03:48 jtc Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
