head	1.15;
access;
symbols
	OPENBSD_5_3:1.13.0.14
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.12
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.10
	OPENBSD_5_0:1.13.0.8
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.6
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.4
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.2
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.12.0.22
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.18
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.16
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.14
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.12
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.10
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.8
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.6
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.4
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.2
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.11.0.6
	OPENBSD_3_6_BASE:1.11
	OPENBSD_3_5:1.11.0.4
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.8.0.6
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.4
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.7.0.10
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.8
	OPENBSD_2_8:1.7.0.6
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.4
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.7.0.2
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.5.0.6
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.4
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.15
date	2013.07.05.21.37.19;	author miod;	state dead;
branches;
next	1.14;

1.14
date	2013.04.17.20.17.33;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2009.10.27.23.59.42;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2004.10.09.20.36.05;	author mickey;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.12.20.58.10;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.03.02.56.14;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2003.04.04.22.12.09;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2001.11.19.19.02.15;	author mpech;	state Exp;
branches;
next	1.7;

1.7
date	99.09.21.13.15.43;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	99.05.10.16.14.07;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	97.11.07.03.42.47;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.11.05.19.47.11;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.11.05.18.57.27;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.38.03;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.58;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.58;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Remove usr.bin/ar and usr.bin/ranlib, no longer building anything. Move their
manpages to share/man5 since they are still worth keeping.
@
text
@/*	$OpenBSD: build.c,v 1.14 2013/04/17 20:17:33 deraadt Exp $	*/

/*-
 * Copyright (c) 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Hugh Smith at The University of Guelph.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/stat.h>
#include <errno.h>
#include <fcntl.h>
#include <a.out.h>
#include <dirent.h>
#include <unistd.h>
#include <ar.h>
#include <limits.h>
#include <ranlib.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <archive.h>
#include <err.h>
#include "byte.c"
#include "extern.h"


extern CHDR chdr;			/* converted header */

typedef struct _rlib {
	struct _rlib *next;		/* next structure */
	off_t pos;			/* offset of defining archive file */
	char *sym;			/* symbol */
	int symlen;			/* strlen(sym) */
} RLIB;
RLIB *rhead, **pnext;

static FILE	*fp;
static long	symcnt;			/* symbol count */
static long	tsymlen;		/* total string length */

static int rexec();
static void symobj();

int
build(void)
{
	CF cf;
	int afd, tfd;
	int current_mid;
	off_t size;

	current_mid = -1;
	afd = open_archive(O_RDWR);
	fp = fdopen(afd, "r+");
	tfd = tmp();

	SETCF(afd, archive, tfd, tname, RPAD|WPAD);

	/* Read through the archive, creating list of symbols. */
	symcnt = tsymlen = 0;
	pnext = &rhead;
	while(get_arobj(afd)) {
		int new_mid;

		if (!strcmp(chdr.name, RANLIBMAG)) {
			skip_arobj(afd);
			continue;
		}
		new_mid = rexec(afd, tfd);
		if (new_mid != -1) {
			if (current_mid == -1)
				current_mid = new_mid;
			else if (new_mid != current_mid)
				errx(1, "Mixed object format archive: %d / %d", 
					new_mid, current_mid);
		}
		put_arobj(&cf, (struct stat *)NULL);
	}
	*pnext = NULL;

	/* Create the symbol table.  Endianess the same as last mid seen */
	symobj(current_mid);

	/* Copy the saved objects into the archive. */
	size = lseek(tfd, (off_t)0, SEEK_CUR);
	(void)lseek(tfd, (off_t)0, SEEK_SET);
	SETCF(tfd, tname, afd, archive, NOPAD);
	copy_ar(&cf, size);
	(void)ftruncate(afd, lseek(afd, (off_t)0, SEEK_CUR));
	(void)close(tfd);

	/* Set the time. */
	settime(afd);
	close_archive(afd);
	return(0);
}

/*
 * rexec
 *	Read the exec structure; ignore any files that don't look
 *	exactly right. Return MID.
 * 	return -1 for files that don't look right.
 *	XXX it's hard to be sure when to ignore files, and when to error
 *	out.
 */
static int
rexec(int rfd, int wfd)
{
	RLIB *rp;
	long nsyms;
	int nr, symlen;
	char *strtab = 0;
	char *sym;
	struct exec ebuf;
	struct nlist nl;
	off_t r_off, w_off;
	long strsize;
	int result = -1;

	/* Get current offsets for original and tmp files. */
	r_off = lseek(rfd, (off_t)0, SEEK_CUR);
	w_off = lseek(wfd, (off_t)0, SEEK_CUR);

	/* Read in exec structure. */
	nr = read(rfd, (char *)&ebuf, sizeof(struct exec));
	if (nr != sizeof(struct exec))
		goto bad;

	/* Check magic number and symbol count. */
	if (BAD_OBJECT(ebuf) || ebuf.a_syms == 0)
		goto bad;
	fix_header_order(&ebuf);

	/* Seek to string table. */
	if (lseek(rfd, N_STROFF(ebuf) + r_off, SEEK_SET) == (off_t)-1) {
		if (errno == EINVAL)
			goto bad;
		else
			error(archive);
	}

	/* Read in size of the string table. */
	nr = read(rfd, (char *)&strsize, sizeof(strsize));
	if (nr != sizeof(strsize))
		goto bad;

	strsize = fix_32_order(strsize, N_GETMID(ebuf));

	/* Read in the string table. */
	strsize -= sizeof(strsize);
	strtab = (char *)emalloc(strsize);
	nr = read(rfd, strtab, strsize);
	if (nr != strsize) 
		goto bad;

	/* Seek to symbol table. */
	if (fseek(fp, N_SYMOFF(ebuf) + r_off, SEEK_SET) == (off_t)-1)
		goto bad;

	result = N_GETMID(ebuf);
	/* For each symbol read the nlist entry and save it as necessary. */
	nsyms = ebuf.a_syms / sizeof(struct nlist);
	while (nsyms--) {
		if (!fread((char *)&nl, sizeof(struct nlist), 1, fp)) {
			if (feof(fp))
				badfmt();
			error(archive);
		}
		fix_nlist_order(&nl, N_GETMID(ebuf));

		/* Ignore if no name or local. */
		if (!nl.n_un.n_strx || !(nl.n_type & N_EXT))
			continue;

		/*
		 * If the symbol is an undefined external and the n_value
		 * field is non-zero, keep it.
		 */
		if ((nl.n_type & N_TYPE) == N_UNDF && !nl.n_value)
			continue;

		/* First four bytes are the table size. */
		sym = strtab + nl.n_un.n_strx - sizeof(long);
		symlen = strlen(sym) + 1;

		rp = (RLIB *)emalloc(sizeof(RLIB));
		rp->sym = (char *)emalloc(symlen);
		bcopy(sym, rp->sym, symlen);
		rp->symlen = symlen;
		rp->pos = w_off;

		/* Build in forward order for "ar -m" command. */
		*pnext = rp;
		pnext = &rp->next;

		++symcnt;
		tsymlen += symlen;
	}

bad: 	if (nr < 0)
		error(archive);
	free(strtab);
	(void)lseek(rfd, (off_t)r_off, SEEK_SET);
	return result;
}

/*
 * symobj --
 *	Write the symbol table into the archive, computing offsets as
 *	writing.  Use the right format depending on mid.
 */
static void
symobj(int mid)
{
	RLIB *rp, *rnext;
	struct ranlib rn;
	char hb[sizeof(struct ar_hdr) + 1], pad;
	long ransize, size, stroff;
	uid_t uid;
	gid_t gid;

	/* Rewind the archive, leaving the magic number. */
	if (fseek(fp, (off_t)SARMAG, SEEK_SET) == (off_t)-1)
		error(archive);

	/* Size of the ranlib archive file, pad if necessary. */
	ransize = sizeof(long) +
	    symcnt * sizeof(struct ranlib) + sizeof(long) + tsymlen;
	if (ransize & 01) {
		++ransize;
		pad = '\n';
	} else
		pad = '\0';

	uid = getuid();
	if (uid > USHRT_MAX) {
		warnx("warning: uid %u truncated to %u", uid, USHRT_MAX);
		uid = USHRT_MAX;
	}
	gid = getgid();
	if (gid > USHRT_MAX) {
		warnx("warning: gid %u truncated to %u", gid, USHRT_MAX);
		gid = USHRT_MAX;
	}

	/* Put out the ranlib archive file header. */
#define	DEFMODE	(S_IRUSR|S_IWUSR|S_IRGRP|S_IWGRP|S_IROTH|S_IWOTH)
	(void)snprintf(hb, sizeof hb, HDR2, RANLIBMAG, (long long)0, uid, gid,
	    DEFMODE & ~umask(0), (off_t)ransize, ARFMAG);
	if (!fwrite(hb, sizeof(struct ar_hdr), 1, fp))
		error(tname);

	/* First long is the size of the ranlib structure section. */
	size = fix_32_order(symcnt * sizeof(struct ranlib), mid);
	if (!fwrite((char *)&size, sizeof(size), 1, fp))
		error(tname);

	/* Offset of the first archive file. */
	size = SARMAG + sizeof(struct ar_hdr) + ransize;

	/*
	 * Write out the ranlib structures.  The offset into the string
	 * table is cumulative, the offset into the archive is the value
	 * set in rexec() plus the offset to the first archive file.
	 */
	for (rp = rhead, stroff = 0; rp; rp = rp->next) {
		rn.ran_un.ran_strx = stroff;
		stroff += rp->symlen;
		rn.ran_off = size + rp->pos;
		fix_ranlib_order(&rn, mid);
		if (!fwrite((char *)&rn, sizeof(struct ranlib), 1, fp))
			error(archive);
	}

	/* Second long is the size of the string table. */

	size = fix_32_order(tsymlen, mid);
	if (!fwrite((char *)&size, sizeof(size), 1, fp))
		error(tname);

	/* Write out the string table. */
	for (rp = rhead; rp; rp = rnext) {
		if (!fwrite(rp->sym, rp->symlen, 1, fp))
			error(tname);
		rnext = rp->next;
		free(rp);
	}
	rhead = NULL;

	if (pad && !fwrite(&pad, sizeof(pad), 1, fp))
		error(tname);

	(void)fflush(fp);
}
@


1.14
log
@Handle greater time_t, so that .a files work after 2038.
ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: build.c,v 1.13 2009/10/27 23:59:42 deraadt Exp $	*/
@


1.13
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: build.c,v 1.12 2004/10/09 20:36:05 mickey Exp $	*/
d275 1
a275 1
	(void)snprintf(hb, sizeof hb, HDR2, RANLIBMAG, 0L, uid, gid,
@


1.12
log
@s/fix_long_order/fix_32_order
@
text
@d1 1
a1 1
/*	$OpenBSD: build.c,v 1.11 2003/06/12 20:58:10 deraadt Exp $	*/
a33 5

#ifndef lint
/*static char sccsid[] = "from: @@(#)build.c	5.3 (Berkeley) 3/12/91";*/
static char rcsid[] = "$OpenBSD: build.c,v 1.11 2003/06/12 20:58:10 deraadt Exp $";
#endif /* not lint */
@


1.11
log
@de-register and ansification; millert ok
@
text
@d1 1
a1 1
/*	$OpenBSD: build.c,v 1.10 2003/06/03 02:56:14 millert Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: build.c,v 1.10 2003/06/03 02:56:14 millert Exp $";
d179 1
a179 1
	strsize = fix_long_order(strsize, N_GETMID(ebuf));
d286 1
a286 1
	size = fix_long_order(symcnt * sizeof(struct ranlib), mid);
d309 1
a309 1
	size = fix_long_order(tsymlen, mid);
@


1.10
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: build.c,v 1.9 2003/04/04 22:12:09 deraadt Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: build.c,v 1.9 2003/04/04 22:12:09 deraadt Exp $";
d77 1
a77 1
build()
d139 1
a139 3
rexec(rfd, wfd)
	int rfd;
	int wfd;
d245 1
a245 2
symobj(mid)
	int mid;
@


1.9
log
@simple snprintf; tdeval matthieu ok
@
text
@d1 1
a1 1
/*	$OpenBSD: build.c,v 1.8 2001/11/19 19:02:15 mpech Exp $	*/
d18 1
a18 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static char rcsid[] = "$OpenBSD: build.c,v 1.8 2001/11/19 19:02:15 mpech Exp $";
@


1.8
log
@kill more registers

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: build.c,v 1.7 1999/09/21 13:15:43 espie Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: build.c,v 1.7 1999/09/21 13:15:43 espie Exp $";
d287 1
a287 1
	(void)sprintf(hb, HDR2, RANLIBMAG, 0L, uid, gid,
@


1.7
log
@Build some proper prototypes, fix minor nits.
Add some proper error handling to object file parsing,
deciding whether it's a bad object file or something ranlib should
not care about, so that archives that mix non object files with object
files don't get killed by the `mixed object archive' check.
@
text
@d1 1
a1 1
/*	$OpenBSD: build.c,v 1.6 1999/05/10 16:14:07 espie Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: build.c,v 1.6 1999/05/10 16:14:07 espie Exp $";
d144 1
a144 1
	register int rfd;
d147 4
a150 4
	register RLIB *rp;
	register long nsyms;
	register int nr, symlen;
	register char *strtab = 0;
d254 1
a254 1
	register RLIB *rp, *rnext;
@


1.6
log
@Fixes endianess problems with old a.out tools. This makes building
some cross toolchains possible.

This also changes some utilities's behavior slightly:
- nm, strip, size now handle any a.out format they know about.
- ranlib complains if it detects mixed archives (several object
formats for different boxes).

In the presence of mixed objects, you still have file, ranlib or ld
to prevent you from getting too confused...
@
text
@d1 1
a1 1
/*	$OpenBSD: build.c,v 1.5 1997/11/07 03:42:47 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: build.c,v 1.5 1997/11/07 03:42:47 deraadt Exp $";
d55 1
d58 1
d60 1
a63 2
extern char *archive;			/* archive name */
extern char *tname;			/* temporary file "name" */
a78 1
extern void	*emalloc();
d80 1
a84 1
	int check_mid;
d88 1
a88 1
	check_mid = 0;
d106 7
a112 5
		if (check_mid && new_mid != current_mid)
			errx(1, "Mixed object format archive: %d / %d", 
				new_mid, current_mid);
		current_mid = new_mid;
		check_mid = 1;
d138 3
d150 2
a151 1
	register char *strtab, *sym;
d156 1
d165 1
a165 1
		goto badread;
d169 1
a169 1
		goto bad1;
d173 6
a178 2
	if (lseek(rfd, N_STROFF(ebuf) + r_off, SEEK_SET) == (off_t)-1)
		error(archive);
d183 1
a183 1
		goto badread;
d186 1
d191 2
a192 5
	if (nr != strsize) {
badread:	if (nr < 0)
			error(archive);
		goto bad2;
	}
d196 1
a196 1
		goto bad2;
d198 1
d207 1
a207 1
	fix_nlist_order(&nl, N_GETMID(ebuf));
d238 5
a242 3
bad2:	free(strtab);
bad1:	(void)lseek(rfd, (off_t)r_off, SEEK_SET);
	return N_GETMID(ebuf);
@


1.5
log
@need limits.h
@
text
@d1 1
a1 1
/*	$OpenBSD: build.c,v 1.4 1997/11/05 19:47:11 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: build.c,v 1.4 1997/11/05 19:47:11 deraadt Exp $";
d57 2
d76 2
a77 1
static void	rexec(), symobj();
d84 2
d88 1
d99 2
d105 6
a110 1
		rexec(afd, tfd);
d115 2
a116 2
	/* Create the symbol table. */
	symobj();
d135 1
a135 1
 *	exactly right.
d137 1
a137 1
static void
d161 1
a161 1
	if (N_BADMAG(ebuf) || ebuf.a_syms == 0)
d163 1
d174 1
d197 1
d230 1
d236 1
a236 1
 *	writing.
d239 2
a240 1
symobj()
d281 1
a281 1
	size = symcnt * sizeof(struct ranlib);
d297 1
d303 3
a305 1
	if (!fwrite((char *)&tsymlen, sizeof(tsymlen), 1, fp))
@


1.4
log
@uid_t and gid_t are unsigned; nihilis@@moral.addiction.com
@
text
@d1 1
a1 1
/*	$OpenBSD: build.c,v 1.3 1997/11/05 18:57:27 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: build.c,v 1.3 1997/11/05 18:57:27 deraadt Exp $";
d52 1
@


1.3
log
@truncate uid/gid for large ones; nihilis@@moral.addiction.com
@
text
@d1 1
a1 1
/*	$OpenBSD: build.c,v 1.2 1996/06/26 05:38:03 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: build.c,v 1.2 1996/06/26 05:38:03 deraadt Exp $";
d245 1
a245 1
		warnx("warning: uid %d truncated to %d", uid, USHRT_MAX);
d250 1
a250 1
		warnx("warning: gid %d truncated to %d", gid, USHRT_MAX);
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: build.c,v 1.1.1.1 1995/10/18 08:45:58 deraadt Exp $";
d227 2
d243 11
d256 1
a256 1
	(void)sprintf(hb, HDR2, RANLIBMAG, 0L, getuid(), getgid(),
@


1.1
log
@Initial revision
@
text
@d1 2
d41 1
a41 1
static char rcsid[] = "$Id: build.c,v 1.8 1995/06/27 00:28:17 jtc Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
