head	1.27;
access;
symbols
	OPENBSD_6_2_BASE:1.27
	OPENBSD_6_1:1.27.0.8
	OPENBSD_6_1_BASE:1.27
	OPENBSD_6_0:1.27.0.4
	OPENBSD_6_0_BASE:1.27
	OPENBSD_5_9:1.27.0.2
	OPENBSD_5_9_BASE:1.27
	OPENBSD_5_8:1.26.0.10
	OPENBSD_5_8_BASE:1.26
	OPENBSD_5_7:1.26.0.2
	OPENBSD_5_7_BASE:1.26
	OPENBSD_5_6:1.26.0.6
	OPENBSD_5_6_BASE:1.26
	OPENBSD_5_5:1.26.0.4
	OPENBSD_5_5_BASE:1.26
	OPENBSD_5_4:1.25.0.10
	OPENBSD_5_4_BASE:1.25
	OPENBSD_5_3:1.25.0.8
	OPENBSD_5_3_BASE:1.25
	OPENBSD_5_2:1.25.0.6
	OPENBSD_5_2_BASE:1.25
	OPENBSD_5_1_BASE:1.25
	OPENBSD_5_1:1.25.0.4
	OPENBSD_5_0:1.25.0.2
	OPENBSD_5_0_BASE:1.25
	OPENBSD_4_9:1.24.0.6
	OPENBSD_4_9_BASE:1.24
	OPENBSD_4_8:1.24.0.4
	OPENBSD_4_8_BASE:1.24
	OPENBSD_4_7:1.24.0.2
	OPENBSD_4_7_BASE:1.24
	OPENBSD_4_6:1.23.0.12
	OPENBSD_4_6_BASE:1.23
	OPENBSD_4_5:1.23.0.8
	OPENBSD_4_5_BASE:1.23
	OPENBSD_4_4:1.23.0.6
	OPENBSD_4_4_BASE:1.23
	OPENBSD_4_3:1.23.0.4
	OPENBSD_4_3_BASE:1.23
	OPENBSD_4_2:1.23.0.2
	OPENBSD_4_2_BASE:1.23
	OPENBSD_4_1:1.22.0.6
	OPENBSD_4_1_BASE:1.22
	OPENBSD_4_0:1.22.0.4
	OPENBSD_4_0_BASE:1.22
	OPENBSD_3_9:1.22.0.2
	OPENBSD_3_9_BASE:1.22
	OPENBSD_3_8:1.21.0.2
	OPENBSD_3_8_BASE:1.21
	OPENBSD_3_7:1.19.0.2
	OPENBSD_3_7_BASE:1.19
	OPENBSD_3_6:1.17.0.4
	OPENBSD_3_6_BASE:1.17
	OPENBSD_3_5:1.17.0.2
	OPENBSD_3_5_BASE:1.17
	OPENBSD_3_4:1.15.0.2
	OPENBSD_3_4_BASE:1.15
	OPENBSD_3_3:1.11.0.6
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.4
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.11.0.2
	OPENBSD_3_1_BASE:1.11
	OPENBSD_3_0:1.10.0.2
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_9:1.8.0.2
	OPENBSD_2_8:1.6.0.4
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.2
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.5.0.10
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.8
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.6
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.4
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.27
date	2015.10.10.17.48.34;	author deraadt;	state Exp;
branches;
next	1.26;
commitid	ZiHVbJF32Aqp9R2D;

1.26
date	2013.11.25.18.03.17;	author deraadt;	state Exp;
branches;
next	1.25;

1.25
date	2011.04.29.05.45.11;	author lum;	state Exp;
branches;
next	1.24;

1.24
date	2009.10.27.23.59.35;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	2007.05.09.01.54.40;	author ray;	state Exp;
branches;
next	1.22;

1.22
date	2005.11.14.15.30.54;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2005.05.15.16.22.12;	author jaredy;	state Exp;
branches;
next	1.20;

1.20
date	2005.03.25.16.54.17;	author jaredy;	state Exp;
branches;
next	1.19;

1.19
date	2005.02.24.12.56.15;	author jsg;	state Exp;
branches;
next	1.18;

1.18
date	2004.09.14.22.21.57;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2003.11.10.22.35.07;	author mickey;	state Exp;
branches;
next	1.16;

1.16
date	2003.09.26.21.26.05;	author tedu;	state Exp;
branches;
next	1.15;

1.15
date	2003.06.10.22.20.44;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2003.06.03.02.56.05;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2003.04.06.23.22.43;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2003.04.04.00.21.20;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2002.02.16.21.27.43;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2001.09.04.23.35.58;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2001.07.09.07.04.47;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2000.12.24.11.22.54;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	2000.11.20.14.07.06;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	99.12.03.23.55.18;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	97.08.31.08.25.55;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.07.29.02.54.07;	author bitblt;	state Exp;
branches;
next	1.3;

1.3
date	97.01.15.23.42.09;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.31.13;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.44.52;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.44.52;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.27
log
@pledge "stdio proc exec" works.
ok doug
@
text
@/*	$OpenBSD: apply.c,v 1.26 2013/11/25 18:03:17 deraadt Exp $	*/
/*	$NetBSD: apply.c,v 1.3 1995/03/25 03:38:23 glass Exp $	*/

/*-
 * Copyright (c) 1994
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Jan-Simon Pendry.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/wait.h>

#include <ctype.h>
#include <err.h>
#include <paths.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

__dead	void	usage(void);
static	int	mysystem(const char *);

int
main(int argc, char *argv[])
{
	int ch, clen, debug, i, l, magic, n, nargs, rval;
	char *c, *c2, *cmd, *p, *q;
	size_t len;

	if (pledge("stdio proc exec", NULL) == -1)
		err(1, "pledge");

	debug = 0;
	magic = '%';		/* Default magic char is `%'. */
	nargs = -1;
	while ((ch = getopt(argc, argv, "a:d0123456789")) != -1)
		switch (ch) {
		case 'a':
			if (optarg[1] != '\0')
				errx(1,
				    "illegal magic character specification.");
			magic = optarg[0];
			break;
		case 'd':
			debug = 1;
			break;
		case '0': case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			if (nargs != -1)
				errx(1,
				    "only one -# argument may be specified.");
			nargs = ch - '0';
			break;
		default:
			usage();
		}
	argc -= optind;
	argv += optind;

	if (argc < 2)
		usage();

	/*
	 * The command to run is argv[0], and the args are argv[1..].
	 * Look for %digit references in the command, remembering the
	 * largest one.
	 */
	for (n = 0, p = argv[0]; *p != '\0'; ++p)
		if (p[0] == magic &&
		    isdigit((unsigned char)p[1]) && p[1] != '0') {
			++p;
			if (p[0] - '0' > n)
				n = p[0] - '0';
		}

	/*
	 * If there were any %digit references, then use those, otherwise
	 * build a new command string with sufficient %digit references at
	 * the end to consume (nargs) arguments each time round the loop.
	 * Allocate enough space to hold the maximum command.
	 */
	if (n == 0) {
		len = sizeof("exec ") - 1 +
		    strlen(argv[0]) + 9 * (sizeof(" %1") - 1) + 1;
		if ((cmd = malloc(len)) == NULL)
			err(1, NULL);

		/* If nargs not set, default to a single argument. */
		if (nargs == -1)
			nargs = 1;

		l = snprintf(cmd, len, "exec %s", argv[0]);
		if (l >= len || l == -1)
			errx(1, "error building exec string");
		len -= l;
		p = cmd + l;
		
		for (i = 1; i <= nargs; i++) {
			l = snprintf(p, len, " %c%d", magic, i);
			if (l >= len || l == -1)
				errx(1, "error numbering arguments");
			len -= l;
			p += l;
		}

		/*
		 * If nargs set to the special value 0, eat a single
		 * argument for each command execution.
		 */
		if (nargs == 0)
			nargs = 1;
	} else {
		if (asprintf(&cmd, "exec %s", argv[0]) == -1)
			err(1, NULL);		
		nargs = n;
	}

	/*
	 * Grab some space in which to build the command.  Allocate
	 * as necessary later, but no reason to build it up slowly
	 * for the normal case.
	 */
	if ((c = malloc(clen = 1024)) == NULL)
		err(1, NULL);

	/*
	 * (argc) and (argv) are still offset by one to make it simpler to
	 * expand %digit references.  At the end of the loop check for (argc)
	 * equals 1 means that all the (argv) has been consumed.
	 */
	for (rval = 0; argc > nargs; argc -= nargs, argv += nargs) {
		/*
		 * Find a max value for the command length, and ensure
		 * there's enough space to build it.
		 */
		for (l = strlen(cmd), i = 0; i < nargs; i++)
			l += strlen(argv[i+1]);
		if (l > clen) {
			if ((c2 = realloc(c, l)) == NULL)
				err(1, NULL);
			c = c2;
			clen = l;
		}

		/* Expand command argv references. */
		for (p = cmd, q = c; *p != '\0'; ++p)
			if (p[0] == magic &&
			    isdigit((unsigned char)p[1]) && p[1] != '0') {
				strlcpy(q, argv[(++p)[0] - '0'], c + clen - q);
				q += strlen(q);
			} else
				*q++ = *p;

		/* Terminate the command string. */
		*q = '\0';

		/* Run the command. */
		if (debug)
			(void)printf("%s\n", c);
		else if (mysystem(c))
			rval = 1;
	}

	if (argc != 1)
		errx(1, "expecting additional argument%s after \"%s\"",
		    (nargs - argc) ? "s" : "", argv[argc - 1]);
	exit(rval);
}

/*
 * mysystem --
 * 	Private version of system(3).  Use the user's SHELL environment
 *	variable as the shell to execute.
 */
static int
mysystem(const char *command)
{
	static const char *name, *shell;
	pid_t pid;
	int pstat;
	sigset_t mask, omask;
	sig_t intsave, quitsave;

	if (shell == NULL) {
		if ((shell = getenv("SHELL")) == NULL)
			shell = _PATH_BSHELL;
		if ((name = strrchr(shell, '/')) == NULL)
			name = shell;
		else
			++name;
	}
	if (!command)		/* just checking... */
		return(1);

	sigemptyset(&mask);
	sigaddset(&mask, SIGCHLD);
	sigprocmask(SIG_BLOCK, &mask, &omask);
	switch(pid = fork()) {
	case -1:			/* error */
		err(1, "fork");
	case 0:				/* child */
		sigprocmask(SIG_SETMASK, &omask, NULL);
		execl(shell, name, "-c", command, (char *)NULL);
		err(1, "%s", shell);
	}
	intsave = signal(SIGINT, SIG_IGN);
	quitsave = signal(SIGQUIT, SIG_IGN);
	pid = waitpid(pid, &pstat, 0);
	sigprocmask(SIG_SETMASK, &omask, NULL);
	(void)signal(SIGINT, intsave);
	(void)signal(SIGQUIT, quitsave);
	return(pid == -1 ? -1 : pstat);
}

__dead void
usage(void)
{
	(void)fprintf(stderr,
	    "usage: apply [-#] [-d] [-a magic] command argument ...\n");
	exit(1);
}
@


1.26
log
@variety of unsigned char casts (or conversions) for ctype
ok krw
@
text
@d1 1
a1 1
/*	$OpenBSD: apply.c,v 1.25 2011/04/29 05:45:11 lum Exp $	*/
d56 3
@


1.25
log
@small tidy. contribution from patrick keshishian and extra tab spot by halex. Thanks.
ok nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: apply.c,v 1.24 2009/10/27 23:59:35 deraadt Exp $	*/
d93 2
a94 1
		if (p[0] == magic && isdigit(p[1]) && p[1] != '0') {
d171 2
a172 1
			if (p[0] == magic && isdigit(p[1]) && p[1] != '0') {
@


1.24
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: apply.c,v 1.23 2007/05/09 01:54:40 ray Exp $	*/
d47 2
a48 2
void	usage(void);
int	mysystem(const char *);
d182 2
a183 3
		else
			if (mysystem(c))
				rval = 1;
d193 1
a193 1
 * system --
d197 1
a197 1
int
d200 1
a200 1
	static char *name, *shell;
d237 1
a237 1
void
@


1.23
log
@Remove shadowed, redundant variable.  From Bret Lambert.

OK jaredy@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: apply.c,v 1.22 2005/11/14 15:30:54 deraadt Exp $	*/
a34 8

#ifndef lint
#if 0
static const char sccsid[] = "@@(#)apply.c	8.4 (Berkeley) 4/4/94";
#else
static const char rcsid[] = "$OpenBSD: apply.c,v 1.22 2005/11/14 15:30:54 deraadt Exp $";
#endif
#endif /* not lint */
@


1.22
log
@use asprintf()
@
text
@d1 1
a1 1
/*	$OpenBSD: apply.c,v 1.21 2005/05/15 16:22:12 jaredy Exp $	*/
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: apply.c,v 1.21 2005/05/15 16:22:12 jaredy Exp $";
a113 2
		int l;

@


1.21
log
@- simplify usage
- update/rearrange examples

help & ok jmc
@
text
@d1 1
a1 1
/*	$OpenBSD: apply.c,v 1.20 2005/03/25 16:54:17 jaredy Exp $	*/
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: apply.c,v 1.20 2005/03/25 16:54:17 jaredy Exp $";
a112 5
	len = sizeof("exec ") - 1 +
	    strlen(argv[0]) + 9 * (sizeof(" %1") - 1) + 1;
	if ((cmd = malloc(len)) == NULL)
		err(1, NULL);
		
d116 5
d146 2
a147 1
		(void)snprintf(cmd, len, "exec %s", argv[0]);
@


1.20
log
@Use the return value from getopt() instead of optopt in non-error
cases since optopt is not set in these cases, and it is not required
by POSIX that it should be.

ok millert otto
@
text
@d1 1
a1 1
/*	$OpenBSD: apply.c,v 1.19 2005/02/24 12:56:15 jsg Exp $	*/
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: apply.c,v 1.19 2005/02/24 12:56:15 jsg Exp $";
d251 1
a251 1
	    "usage: apply [-#] [-a magic] [-d] command argument [...]\n");
@


1.19
log
@Store result of snprintf() in a signed type and check it for -1.
Do not depend on errno being set for snprintf, use errx() instead of err().
ok otto@@, earlier version ok deraadt@@ some time ago
@
text
@d1 1
a1 1
/*	$OpenBSD: apply.c,v 1.18 2004/09/14 22:21:57 deraadt Exp $	*/
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: apply.c,v 1.18 2004/09/14 22:21:57 deraadt Exp $";
d84 1
a84 1
			nargs = optopt - '0';
@


1.18
log
@unalias system() copy from libc version
@
text
@d1 1
a1 1
/*	$OpenBSD: apply.c,v 1.17 2003/11/10 22:35:07 mickey Exp $	*/
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: apply.c,v 1.17 2003/11/10 22:35:07 mickey Exp $";
d119 1
a119 1
		size_t l;
d126 2
a127 2
		if (l >= len)
			err(1, "snprintf");
d133 2
a134 2
			if (l >= len)
				err(1, "snprintf");
@


1.17
log
@c2 cannot be const as it produces all kinds of conflicts
@
text
@d1 1
a1 1
/*	$OpenBSD: apply.c,v 1.16 2003/09/26 21:26:05 tedu Exp $	*/
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: apply.c,v 1.16 2003/09/26 21:26:05 tedu Exp $";
d56 1
a56 1
int	system(const char *);
d192 1
a192 1
			if (system(c))
d208 1
a208 1
system(const char *command)
@


1.16
log
@better realloc.  ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: apply.c,v 1.15 2003/06/10 22:20:44 deraadt Exp $	*/
d38 1
a38 1
static char sccsid[] = "@@(#)apply.c	8.4 (Berkeley) 4/4/94";
d40 1
a40 1
static char rcsid[] = "$OpenBSD: apply.c,v 1.15 2003/06/10 22:20:44 deraadt Exp $";
d62 1
a62 2
	char *c, *cmd, *p, *q;
	const char *c2;
@


1.15
log
@mostly ansi cleanup; pval ok
@
text
@d1 1
a1 1
/*	$OpenBSD: apply.c,v 1.14 2003/06/03 02:56:05 millert Exp $	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: apply.c,v 1.14 2003/06/03 02:56:05 millert Exp $";
d63 1
d171 6
a176 2
		if (l > clen && (c = realloc(c, clen = l)) == NULL)
			err(1, NULL);
@


1.14
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: apply.c,v 1.13 2003/04/06 23:22:43 deraadt Exp $	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: apply.c,v 1.13 2003/04/06 23:22:43 deraadt Exp $";
d59 1
a59 3
main(argc, argv)
	int argc;
	char *argv[];
d204 1
a204 2
system(command)
	const char *command;
d244 1
a244 1
usage()
@


1.13
log
@snprintf; ok millert
he also suggested i use a strlcpy instead of the existing "%s" it used..
@
text
@d1 1
a1 1
/*	$OpenBSD: apply.c,v 1.12 2003/04/04 00:21:20 deraadt Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d40 1
a40 1
static char rcsid[] = "$OpenBSD: apply.c,v 1.12 2003/04/04 00:21:20 deraadt Exp $";
@


1.12
log
@snprintf; ok from espie tedu and others
@
text
@d1 1
a1 1
/*	$OpenBSD: apply.c,v 1.11 2002/02/16 21:27:43 millert Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: apply.c,v 1.11 2002/02/16 21:27:43 millert Exp $";
d182 1
a182 1
				sprintf(q, "%s", argv[(++p)[0] - '0']);
@


1.11
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: apply.c,v 1.10 2001/09/04 23:35:58 millert Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: apply.c,v 1.10 2001/09/04 23:35:58 millert Exp $";
d69 1
d119 3
a121 2
	if ((cmd = malloc(sizeof("exec ") - 1 +
	    strlen(argv[0]) + 9 * (sizeof(" %1") - 1) + 1)) == NULL)
d125 2
d131 13
a143 4
		p = cmd;
		p += sprintf(cmd, "exec %s", argv[0]);
		for (i = 1; i <= nargs; i++)
			p += sprintf(p, " %c%d", magic, i);
d152 1
a152 1
		(void)sprintf(cmd, "exec %s", argv[0]);
d181 4
a184 3
			if (p[0] == magic && isdigit(p[1]) && p[1] != '0')
				q += sprintf(q, "%s", argv[(++p)[0] - '0']);
			else
@


1.10
log
@Replace the deprecated BSD sigsetmask/sigblock/sigpause functions with their POSIX counterparts.
@
text
@d1 1
a1 1
/*	$OpenBSD: apply.c,v 1.9 2001/07/09 07:04:47 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: apply.c,v 1.9 2001/07/09 07:04:47 deraadt Exp $";
d59 2
a60 2
void	usage __P((void));
int	system __P((const char *));
@


1.9
log
@correct type on last arg to execl(); nordin@@cse.ogi.edu
@
text
@d1 1
a1 1
/*	$OpenBSD: apply.c,v 1.8 2000/12/24 11:22:54 aaron Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: apply.c,v 1.8 2000/12/24 11:22:54 aaron Exp $";
d201 2
a202 1
	int omask, pstat;
d216 3
a218 1
	omask = sigblock(sigmask(SIGCHLD));
d223 1
a223 1
		(void)sigsetmask(omask);
d230 1
a230 1
	(void)sigsetmask(omask);
@


1.8
log
@Sync usage() with man page.
@
text
@d1 1
a1 1
/*	$OpenBSD: apply.c,v 1.7 2000/11/20 14:07:06 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: apply.c,v 1.7 2000/11/20 14:07:06 deraadt Exp $";
d221 1
a221 1
		execl(shell, name, "-c", command, NULL);
@


1.7
log
@fixes; mpech@@prosoft.org.lv
@
text
@d1 1
a1 1
/*	$OpenBSD: apply.c,v 1.6 1999/12/03 23:55:18 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: apply.c,v 1.6 1999/12/03 23:55:18 deraadt Exp $";
a235 1

d237 1
a237 1
	    "usage: apply [-a magic] [-0123456789] [-d] command arguments [...]\n");
@


1.6
log
@off by one for string length calculation
@
text
@d1 1
a1 1
/*	$OpenBSD: apply.c,v 1.5 1997/08/31 08:25:55 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: apply.c,v 1.5 1997/08/31 08:25:55 deraadt Exp $";
d238 1
a238 1
	    "usage: apply [-a magic] [-0123456789] command arguments ...\n");
@


1.5
log
@union wait dies
@
text
@d1 1
a1 1
/*	$OpenBSD: apply.c,v 1.4 1997/07/29 02:54:07 bitblt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: apply.c,v 1.4 1997/07/29 02:54:07 bitblt Exp $";
d162 1
a162 1
			l += strlen(argv[i]);
@


1.4
log
@Changed vfork() to fork() -- pointed out by Theo
@
text
@d1 1
a1 1
/*	$OpenBSD: apply.c,v 1.3 1997/01/15 23:42:09 millert Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: apply.c,v 1.3 1997/01/15 23:42:09 millert Exp $";
a199 1
	union wait pstat;
d201 1
a201 1
	int omask;
d226 1
a226 1
	pid = waitpid(pid, (int *)&pstat, 0);
d230 1
a230 1
	return(pid == -1 ? -1 : pstat.w_status);
@


1.3
log
@getopt(3) returns -1 when out of args, not EOF, whee!
@
text
@d1 1
a1 1
/*	$OpenBSD: apply.c,v 1.2 1996/06/26 05:31:13 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: apply.c,v 1.2 1996/06/26 05:31:13 deraadt Exp $";
d217 1
a217 1
	switch(pid = vfork()) {
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: apply.c,v 1.3 1995/03/25 03:38:23 glass Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: apply.c,v 1.3 1995/03/25 03:38:23 glass Exp $";
d73 1
a73 1
	while ((ch = getopt(argc, argv, "a:d0123456789")) != EOF)
@


1.1
log
@Initial revision
@
text
@d1 1
d44 1
a44 1
static char rcsid[] = "$NetBSD: apply.c,v 1.3 1995/03/25 03:38:23 glass Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
