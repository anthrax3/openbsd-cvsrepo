head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.2
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.6.0.6
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.3.0.4
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.2.0.2
	OPENBSD_5_7_BASE:1.2;
locks; strict;
comment	@ * @;


1.7
date	2017.01.20.08.57.11;	author deraadt;	state Exp;
branches;
next	1.6;
commitid	dLXg6G5zkTXfsv25;

1.6
date	2015.10.17.15.00.11;	author doug;	state Exp;
branches;
next	1.5;
commitid	eAF5hlziO0omr4Cj;

1.5
date	2015.10.10.22.28.51;	author doug;	state Exp;
branches;
next	1.4;
commitid	7Pr412xEOoY2KZOT;

1.4
date	2015.08.22.16.36.05;	author jsing;	state Exp;
branches;
next	1.3;
commitid	FOQ5PgwxGR8cjJ8X;

1.3
date	2015.07.12.16.32.21;	author doug;	state Exp;
branches;
next	1.2;
commitid	TmENwCaTpIARzNao;

1.2
date	2014.08.28.14.23.52;	author jsing;	state Exp;
branches;
next	1.1;
commitid	sL7NDHJPBg4hmfYx;

1.1
date	2014.08.26.17.47.24;	author jsing;	state Exp;
branches;
next	;
commitid	7A7DObXgY4Fni8xJ;


desc
@@


1.7
log
@rearrange pledge promises into the canonical order; easier to eyeball
@
text
@/* $OpenBSD: crl2p7.c,v 1.6 2015/10/17 15:00:11 doug Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

/* This was written by Gordon Chaffee <chaffee@@plateau.cs.berkeley.edu>
 * and donated 'to the cause' along with lots and lots of other fixes to
 * the library. */

#include <sys/types.h>

#include <stdio.h>
#include <string.h>

#include "apps.h"

#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/objects.h>
#include <openssl/pem.h>
#include <openssl/pkcs7.h>
#include <openssl/x509.h>

static int add_certs_from_file(STACK_OF(X509) * stack, char *certfile);

static struct {
	STACK_OF(OPENSSL_STRING) *certflst;
	char *infile;
	int informat;
	int nocrl;
	char *outfile;
	int outformat;
} crl2p7_config;

static int
crl2p7_opt_certfile(char *arg)
{
	if (crl2p7_config.certflst == NULL)
		crl2p7_config.certflst = sk_OPENSSL_STRING_new_null();
	if (crl2p7_config.certflst == NULL) {
		fprintf(stderr, "out of memory\n");
		return (1);
	}
	if (!sk_OPENSSL_STRING_push(crl2p7_config.certflst, arg)) {
		fprintf(stderr, "out of memory\n");
		return (1);
	}

	return (0);
}

static struct option crl2p7_options[] = {
	{
		.name = "certfile",
		.argname = "file",
		.desc = "Chain of PEM certificates to a trusted CA",
		.type = OPTION_ARG_FUNC,
		.opt.argfunc = crl2p7_opt_certfile,
	},
	{
		.name = "in",
		.argname = "file",
		.desc = "Input file (default stdin)",
		.type = OPTION_ARG,
		.opt.arg = &crl2p7_config.infile,
	},
	{
		.name = "inform",
		.argname = "format",
		.desc = "Input format (DER or PEM (default))",
		.type = OPTION_ARG_FORMAT,
		.opt.value = &crl2p7_config.informat,
	},
	{
		.name = "nocrl",
		.desc = "Do not read CRL from input or include CRL in output",
		.type = OPTION_FLAG,
		.opt.flag = &crl2p7_config.nocrl,
	},
	{
		.name = "out",
		.argname = "file",
		.desc = "Output file (default stdout)",
		.type = OPTION_ARG,
		.opt.arg = &crl2p7_config.outfile,
	},
	{
		.name = "outform",
		.argname = "format",
		.desc = "Output format (DER or PEM (default))",
		.type = OPTION_ARG_FORMAT,
		.opt.value = &crl2p7_config.outformat,
	},
	{ NULL },
};

static void
crl2p7_usage(void)
{
	fprintf(stderr,
	    "usage: crl2p7 [-certfile file] [-in file] [-inform DER | PEM]\n"
	    "    [-nocrl] [-out file] [-outform DER | PEM]\n\n");
	options_usage(crl2p7_options);
}

int
crl2pkcs7_main(int argc, char **argv)
{
	int i;
	BIO *in = NULL, *out = NULL;
	char *certfile;
	PKCS7 *p7 = NULL;
	PKCS7_SIGNED *p7s = NULL;
	X509_CRL *crl = NULL;
	STACK_OF(X509_CRL) *crl_stack = NULL;
	STACK_OF(X509) *cert_stack = NULL;
	int ret = 1;

	if (single_execution) {
		if (pledge("stdio cpath wpath rpath", NULL) == -1) {
			perror("pledge");
			exit(1);
		}
	}

	memset(&crl2p7_config, 0, sizeof(crl2p7_config));

	crl2p7_config.informat = FORMAT_PEM;
	crl2p7_config.outformat = FORMAT_PEM;

	if (options_parse(argc, argv, crl2p7_options, NULL, NULL) != 0) {
		crl2p7_usage();
		goto end;
	}

	in = BIO_new(BIO_s_file());
	out = BIO_new(BIO_s_file());
	if (in == NULL || out == NULL) {
		ERR_print_errors(bio_err);
		goto end;
	}
	if (!crl2p7_config.nocrl) {
		if (crl2p7_config.infile == NULL)
			BIO_set_fp(in, stdin, BIO_NOCLOSE);
		else {
			if (BIO_read_filename(in, crl2p7_config.infile) <= 0) {
				perror(crl2p7_config.infile);
				goto end;
			}
		}

		if (crl2p7_config.informat == FORMAT_ASN1)
			crl = d2i_X509_CRL_bio(in, NULL);
		else if (crl2p7_config.informat == FORMAT_PEM)
			crl = PEM_read_bio_X509_CRL(in, NULL, NULL, NULL);
		else {
			BIO_printf(bio_err,
			    "bad input format specified for input crl\n");
			goto end;
		}
		if (crl == NULL) {
			BIO_printf(bio_err, "unable to load CRL\n");
			ERR_print_errors(bio_err);
			goto end;
		}
	}
	if ((p7 = PKCS7_new()) == NULL)
		goto end;
	if ((p7s = PKCS7_SIGNED_new()) == NULL)
		goto end;
	p7->type = OBJ_nid2obj(NID_pkcs7_signed);
	p7->d.sign = p7s;
	p7s->contents->type = OBJ_nid2obj(NID_pkcs7_data);

	if (!ASN1_INTEGER_set(p7s->version, 1))
		goto end;
	if ((crl_stack = sk_X509_CRL_new_null()) == NULL)
		goto end;
	p7s->crl = crl_stack;
	if (crl != NULL) {
		sk_X509_CRL_push(crl_stack, crl);
		crl = NULL;	/* now part of p7 for freeing */
	}
	if ((cert_stack = sk_X509_new_null()) == NULL)
		goto end;
	p7s->cert = cert_stack;

	if (crl2p7_config.certflst) {
		for (i = 0; i < sk_OPENSSL_STRING_num(crl2p7_config.certflst); i++) {
			certfile = sk_OPENSSL_STRING_value(crl2p7_config.certflst, i);
			if (add_certs_from_file(cert_stack, certfile) < 0) {
				BIO_printf(bio_err,
				    "error loading certificates\n");
				ERR_print_errors(bio_err);
				goto end;
			}
		}
	}

	sk_OPENSSL_STRING_free(crl2p7_config.certflst);

	if (crl2p7_config.outfile == NULL) {
		BIO_set_fp(out, stdout, BIO_NOCLOSE);
	} else {
		if (BIO_write_filename(out, crl2p7_config.outfile) <= 0) {
			perror(crl2p7_config.outfile);
			goto end;
		}
	}

	if (crl2p7_config.outformat == FORMAT_ASN1)
		i = i2d_PKCS7_bio(out, p7);
	else if (crl2p7_config.outformat == FORMAT_PEM)
		i = PEM_write_bio_PKCS7(out, p7);
	else {
		BIO_printf(bio_err,
		    "bad output format specified for outfile\n");
		goto end;
	}
	if (!i) {
		BIO_printf(bio_err, "unable to write pkcs7 object\n");
		ERR_print_errors(bio_err);
		goto end;
	}
	ret = 0;

end:
	if (in != NULL)
		BIO_free(in);
	if (out != NULL)
		BIO_free_all(out);
	if (p7 != NULL)
		PKCS7_free(p7);
	if (crl != NULL)
		X509_CRL_free(crl);

	return (ret);
}

static int
add_certs_from_file(STACK_OF(X509) *stack, char *certfile)
{
	BIO *in = NULL;
	int count = 0;
	int ret = -1;
	STACK_OF(X509_INFO) *sk = NULL;
	X509_INFO *xi;

	in = BIO_new(BIO_s_file());
	if (in == NULL || BIO_read_filename(in, certfile) <= 0) {
		BIO_printf(bio_err, "error opening the file, %s\n", certfile);
		goto end;
	}
	/* This loads from a file, a stack of x509/crl/pkey sets */
	sk = PEM_X509_INFO_read_bio(in, NULL, NULL, NULL);
	if (sk == NULL) {
		BIO_printf(bio_err, "error reading the file, %s\n", certfile);
		goto end;
	}
	/* scan over it and pull out the CRL's */
	while (sk_X509_INFO_num(sk)) {
		xi = sk_X509_INFO_shift(sk);
		if (xi->x509 != NULL) {
			sk_X509_push(stack, xi->x509);
			xi->x509 = NULL;
			count++;
		}
		X509_INFO_free(xi);
	}

	ret = count;

end:
	/* never need to free x */
	if (in != NULL)
		BIO_free(in);
	if (sk != NULL)
		sk_X509_INFO_free(sk);
	return (ret);
}
@


1.6
log
@Exit if a pledge call fails in non-interactive mode.

ok semarie@@
@
text
@d1 1
a1 1
/* $OpenBSD: crl2p7.c,v 1.5 2015/10/10 22:28:51 doug Exp $ */
d173 1
a173 1
		if (pledge("stdio rpath wpath cpath", NULL) == -1) {
@


1.5
log
@Initial support for pledges in openssl(1) commands.

openssl(1) has two mechanisms for operating: either a single execution
of one command (looking at argv[0] or argv[1]) or as an interactive
session than may execute any number of commands.

We already have a top level pledge that should cover all commands
and that's what interactive mode must continue using.  However, we can
tighten up the pledges when only executing one command.

This is an initial stab at support and may contain regressions.  Most
commands only need "stdio rpath wpath cpath".  The pledges could be
further restricted by evaluating the situation after parsing options.

deraadt@@ and beck@@ are roughly fine with this approach.
@
text
@d1 1
a1 1
/* $OpenBSD: crl2p7.c,v 1.4 2015/08/22 16:36:05 jsing Exp $ */
d173 1
a173 1
		if (pledge("stdio rpath wpath cpath", NULL) == -1)
d175 2
@


1.4
log
@Remove all duplicate prototypes for *_main functions (these are already
provided by progs.h). Also, move the FUNCTION type (and flags) into
openssl.c since that is the only place of use. Lastly, remove pointless
'extern' from the prototypes and use char **argv instead of char *argv[]
(the former is used elsewhere).

ok deraadt@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: crl2p7.c,v 1.3 2015/07/12 16:32:21 doug Exp $ */
d171 5
@


1.3
log
@Convert openssl(1) crl2pkcs7 to the new option handling.

input + ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: crl2p7.c,v 1.2 2014/08/28 14:23:52 jsing Exp $ */
a157 2

int crl2pkcs7_main(int, char **);
@


1.2
log
@openssl_setup() calls SSL_load_error_strings(), which happens to call
ERR_load_crypto_strings() - as such, we do not need to call the same
function from most of the applications.
@
text
@d1 1
a1 1
/* $OpenBSD: crl2p7.c,v 1.1 2014/08/26 17:47:24 jsing Exp $ */
d79 79
a157 5
/* -inform arg	- input format - default PEM (DER or PEM)
 * -outform arg - output format - default PEM
 * -in arg	- input file - default stdin
 * -out arg	- output file - default stdout
 */
d164 1
a164 1
	int i, badops = 0;
d166 1
a166 2
	int informat, outformat;
	char *infile, *outfile, *prog, *certfile;
d170 8
a177 46
	STACK_OF(OPENSSL_STRING) * certflst = NULL;
	STACK_OF(X509_CRL) * crl_stack = NULL;
	STACK_OF(X509) * cert_stack = NULL;
	int ret = 1, nocrl = 0;

	infile = NULL;
	outfile = NULL;
	informat = FORMAT_PEM;
	outformat = FORMAT_PEM;

	prog = argv[0];
	argc--;
	argv++;
	while (argc >= 1) {
		if (strcmp(*argv, "-inform") == 0) {
			if (--argc < 1)
				goto bad;
			informat = str2fmt(*(++argv));
		} else if (strcmp(*argv, "-outform") == 0) {
			if (--argc < 1)
				goto bad;
			outformat = str2fmt(*(++argv));
		} else if (strcmp(*argv, "-in") == 0) {
			if (--argc < 1)
				goto bad;
			infile = *(++argv);
		} else if (strcmp(*argv, "-nocrl") == 0) {
			nocrl = 1;
		} else if (strcmp(*argv, "-out") == 0) {
			if (--argc < 1)
				goto bad;
			outfile = *(++argv);
		} else if (strcmp(*argv, "-certfile") == 0) {
			if (--argc < 1)
				goto bad;
			if (!certflst)
				certflst = sk_OPENSSL_STRING_new_null();
			sk_OPENSSL_STRING_push(certflst, *(++argv));
		} else {
			BIO_printf(bio_err, "unknown option %s\n", *argv);
			badops = 1;
			break;
		}
		argc--;
		argv++;
	}
d179 2
a180 12
	if (badops) {
bad:
		BIO_printf(bio_err, "%s [options] <infile >outfile\n", prog);
		BIO_printf(bio_err, "where options are\n");
		BIO_printf(bio_err, " -inform arg    input format - DER or PEM\n");
		BIO_printf(bio_err, " -outform arg   output format - DER or PEM\n");
		BIO_printf(bio_err, " -in arg        input file\n");
		BIO_printf(bio_err, " -out arg       output file\n");
		BIO_printf(bio_err, " -certfile arg  certificates file of chain to a trusted CA\n");
		BIO_printf(bio_err, "                (can be used more than once)\n");
		BIO_printf(bio_err, " -nocrl         no crl to load, just certs from '-certfile'\n");
		ret = 1;
d186 1
a186 1
	if ((in == NULL) || (out == NULL)) {
d190 2
a191 2
	if (!nocrl) {
		if (infile == NULL)
d194 2
a195 2
			if (BIO_read_filename(in, infile) <= 0) {
				perror(infile);
d200 1
a200 1
		if (informat == FORMAT_ASN1)
d202 1
a202 1
		else if (informat == FORMAT_PEM)
d236 3
a238 3
	if (certflst)
		for (i = 0; i < sk_OPENSSL_STRING_num(certflst); i++) {
			certfile = sk_OPENSSL_STRING_value(certflst, i);
d246 1
d248 1
a248 1
	sk_OPENSSL_STRING_free(certflst);
d250 1
a250 1
	if (outfile == NULL) {
d253 2
a254 2
		if (BIO_write_filename(out, outfile) <= 0) {
			perror(outfile);
d259 1
a259 1
	if (outformat == FORMAT_ASN1)
d261 1
a261 1
	else if (outformat == FORMAT_PEM)
a284 1

a287 10
/*
 *----------------------------------------------------------------------
 * int add_certs_from_file
 *
 *	Read a list of certificates to be checked from a file.
 *
 * Results:
 *	number of certs added if successful, -1 if not.
 *----------------------------------------------------------------------
 */
d289 1
a289 1
add_certs_from_file(STACK_OF(X509) * stack, char *certfile)
d294 1
a294 1
	STACK_OF(X509_INFO) * sk = NULL;
d298 1
a298 1
	if ((in == NULL) || (BIO_read_filename(in, certfile) <= 0)) {
@


1.1
log
@Move openssl(1) from /usr/sbin/openssl to /usr/bin/openssl, since it is not
a system/superuser binary. At the same time, move the source code from its
current lib/libssl/src/apps location to a more appropriate home under
usr.bin/openssl.

ok deraadt@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: crl2p7.c,v 1.20 2014/07/14 00:35:10 deraadt Exp $ */
a157 1
	ERR_load_crypto_strings();
@

