head	1.8;
access;
symbols
	OPENBSD_6_2:1.8.0.4
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.8.0.8
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.6
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5;
locks; strict;
comment	@ * @;


1.8
date	2015.10.17.15.00.11;	author doug;	state Exp;
branches;
next	1.7;
commitid	eAF5hlziO0omr4Cj;

1.7
date	2015.10.10.22.28.51;	author doug;	state Exp;
branches;
next	1.6;
commitid	7Pr412xEOoY2KZOT;

1.6
date	2015.08.22.16.36.05;	author jsing;	state Exp;
branches;
next	1.5;
commitid	FOQ5PgwxGR8cjJ8X;

1.5
date	2014.12.28.15.48.52;	author jsing;	state Exp;
branches;
next	1.4;
commitid	bQimQQipD1DRW09U;

1.4
date	2014.12.28.14.21.42;	author jsing;	state Exp;
branches;
next	1.3;
commitid	uxXHAIbfNbDm99jf;

1.3
date	2014.10.13.02.46.14;	author bcook;	state Exp;
branches;
next	1.2;
commitid	Z6BCDPzTn5x0AxGt;

1.2
date	2014.08.30.15.59.43;	author jsing;	state Exp;
branches;
next	1.1;
commitid	pFHcsUkOp67x5Hj4;

1.1
date	2014.08.26.17.47.25;	author jsing;	state Exp;
branches;
next	;
commitid	7A7DObXgY4Fni8xJ;


desc
@@


1.8
log
@Exit if a pledge call fails in non-interactive mode.

ok semarie@@
@
text
@/* $OpenBSD: version.c,v 1.7 2015/10/10 22:28:51 doug Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */
/* ====================================================================
 * Copyright (c) 1998-2001 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "apps.h"

#include <openssl/bn.h>
#include <openssl/crypto.h>
#include <openssl/evp.h>

#ifndef OPENSSL_NO_BF
#include <openssl/blowfish.h>
#endif

#ifndef OPENSSL_NO_DES
#include <openssl/des.h>
#endif

#ifndef OPENSSL_NO_IDEA
#include <openssl/idea.h>
#endif

#ifndef OPENSSL_NO_RC4
#include <openssl/rc4.h>
#endif

static struct {
	int cflags;
	int date;
	int dir;
	int options;
	int platform;
	int version;
} version_config;

static int
version_all_opts(void)
{
	version_config.cflags = 1;
	version_config.date = 1;
	version_config.dir= 1;
	version_config.options = 1;
	version_config.platform = 1;
	version_config.version = 1;

	return (0);
}

static struct option version_options[] = {
	{
		.name = "a",
		.desc = "All information (same as setting all other flags)",
		.type = OPTION_FUNC,
		.opt.func = version_all_opts,
	},
	{
		.name = "b",
		.desc = "Date the current version of OpenSSL was built",
		.type = OPTION_FLAG,
		.opt.flag = &version_config.date,
	},
	{
		.name = "d",
		.desc = "OPENSSLDIR value",
		.type = OPTION_FLAG,
		.opt.flag = &version_config.dir,
	},
	{
		.name = "f",
		.desc = "Compilation flags",
		.type = OPTION_FLAG,
		.opt.flag = &version_config.cflags,
	},
	{
		.name = "o",
		.desc = "Option information",
		.type = OPTION_FLAG,
		.opt.flag = &version_config.options,
	},
	{
		.name = "p",
		.desc = "Platform settings",
		.type = OPTION_FLAG,
		.opt.flag = &version_config.platform,
	},
	{
		.name = "v",
		.desc = "Current OpenSSL version",
		.type = OPTION_FLAG,
		.opt.flag = &version_config.version,
	},
	{NULL},
};

static void
version_usage(void)
{
	fprintf(stderr, "usage: version [-abdfopv]\n");
	options_usage(version_options);
}

int
version_main(int argc, char **argv)
{
	if (single_execution) {
		if (pledge("stdio", NULL) == -1) {
			perror("pledge");
			exit(1);
		}
	}

	memset(&version_config, 0, sizeof(version_config));

	if (options_parse(argc, argv, version_options, NULL, NULL) != 0) {
		version_usage();
		return (1);
	}

	if (argc == 1)
		version_config.version = 1;

	if (version_config.version) {
		if (SSLeay() == SSLEAY_VERSION_NUMBER) {
			printf("%s\n", SSLeay_version(SSLEAY_VERSION));
		} else {
			printf("%s (Library: %s)\n",
			    OPENSSL_VERSION_TEXT,
			    SSLeay_version(SSLEAY_VERSION));
		}
	}
	if (version_config.date)
		printf("%s\n", SSLeay_version(SSLEAY_BUILT_ON));
	if (version_config.platform)
		printf("%s\n", SSLeay_version(SSLEAY_PLATFORM));
	if (version_config.options) {
		printf("options:  ");
		printf("%s ", BN_options());
#ifndef OPENSSL_NO_RC4
		printf("%s ", RC4_options());
#endif
#ifndef OPENSSL_NO_DES
		printf("%s ", DES_options());
#endif
#ifndef OPENSSL_NO_IDEA
		printf("%s ", idea_options());
#endif
#ifndef OPENSSL_NO_BF
		printf("%s ", BF_options());
#endif
		printf("\n");
	}
	if (version_config.cflags)
		printf("%s\n", SSLeay_version(SSLEAY_CFLAGS));
	if (version_config.dir)
		printf("%s\n", SSLeay_version(SSLEAY_DIR));

	return (0);
}
@


1.7
log
@Initial support for pledges in openssl(1) commands.

openssl(1) has two mechanisms for operating: either a single execution
of one command (looking at argv[0] or argv[1]) or as an interactive
session than may execute any number of commands.

We already have a top level pledge that should cover all commands
and that's what interactive mode must continue using.  However, we can
tighten up the pledges when only executing one command.

This is an initial stab at support and may contain regressions.  Most
commands only need "stdio rpath wpath cpath".  The pledges could be
further restricted by evaluating the situation after parsing options.

deraadt@@ and beck@@ are roughly fine with this approach.
@
text
@d1 1
a1 1
/* $OpenBSD: version.c,v 1.6 2015/08/22 16:36:05 jsing Exp $ */
d217 1
a217 1
		if (pledge("stdio", NULL) == -1)
d219 2
@


1.6
log
@Remove all duplicate prototypes for *_main functions (these are already
provided by progs.h). Also, move the FUNCTION type (and flags) into
openssl.c since that is the only place of use. Lastly, remove pointless
'extern' from the prototypes and use char **argv instead of char *argv[]
(the former is used elsewhere).

ok deraadt@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: version.c,v 1.5 2014/12/28 15:48:52 jsing Exp $ */
d216 5
@


1.5
log
@Provide a mechanism for option parsing to return the number of arguments
that it has consumed. This allows for the handling of multiple unnamed
arguments, including lists of filenames.
@
text
@d1 1
a1 1
/* $OpenBSD: version.c,v 1.4 2014/12/28 14:21:42 jsing Exp $ */
a211 2

int version_main(int, char **);
@


1.4
log
@Provide two different function pointers for option function callbacks. This
allows for simpler code in the common cases and will allow for further
extension to support the complex cases.
@
text
@d1 1
a1 1
/* $OpenBSD: version.c,v 1.3 2014/10/13 02:46:14 bcook Exp $ */
d220 1
a220 1
	if (options_parse(argc, argv, version_options, NULL) != 0) {
@


1.3
log
@prefer C99 array initialization syntax.

use C99 array initialization syntax for strict C compilers.

from kinichiro, found building with HP/UX compiler

ok deraadt@@, guenther@@
@
text
@d1 1
a1 1
/* $OpenBSD: version.c,v 1.2 2014/08/30 15:59:43 jsing Exp $ */
d148 1
a148 1
version_all_opts(struct option *opt, char *arg)
d165 1
a165 1
		.func = version_all_opts,
@


1.2
log
@Convert openssl(1) version to new option/usage handling.
@
text
@d1 1
a1 1
/* $OpenBSD: version.c,v 1.1 2014/08/26 17:47:25 jsing Exp $ */
d203 1
a203 1
	{},
@


1.1
log
@Move openssl(1) from /usr/sbin/openssl to /usr/bin/openssl, since it is not
a system/superuser binary. At the same time, move the source code from its
current lib/libssl/src/apps location to a more appropriate home under
usr.bin/openssl.

ok deraadt@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: version.c,v 1.18 2014/07/14 00:35:10 deraadt Exp $ */
d138 75
d218 6
a223 3
	int i, ret = 0;
	int cflags = 0, version = 0, date = 0, options = 0, platform = 0,
	    dir = 0;
d226 1
a226 22
		version = 1;
	for (i = 1; i < argc; i++) {
		if (strcmp(argv[i], "-v") == 0)
			version = 1;
		else if (strcmp(argv[i], "-b") == 0)
			date = 1;
		else if (strcmp(argv[i], "-f") == 0)
			cflags = 1;
		else if (strcmp(argv[i], "-o") == 0)
			options = 1;
		else if (strcmp(argv[i], "-p") == 0)
			platform = 1;
		else if (strcmp(argv[i], "-d") == 0)
			dir = 1;
		else if (strcmp(argv[i], "-a") == 0)
			date = version = cflags = options = platform = dir = 1;
		else {
			BIO_printf(bio_err, "usage:version -[avbofpd]\n");
			ret = 1;
			goto end;
		}
	}
d228 1
a228 1
	if (version) {
d237 1
a237 1
	if (date)
d239 1
a239 1
	if (platform)
d241 1
a241 1
	if (options) {
d258 1
a258 1
	if (cflags)
d260 1
a260 1
	if (dir)
a261 1
end:
d263 1
a263 1
	return (ret);
@

