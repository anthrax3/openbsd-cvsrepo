head	1.10;
access;
symbols
	OPENBSD_6_2:1.10.0.2
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.4
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.9.0.6
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.6.0.6
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6;
locks; strict;
comment	@ * @;


1.10
date	2017.01.20.08.57.11;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	dLXg6G5zkTXfsv25;

1.9
date	2015.10.17.15.00.11;	author doug;	state Exp;
branches;
next	1.8;
commitid	eAF5hlziO0omr4Cj;

1.8
date	2015.10.10.22.28.51;	author doug;	state Exp;
branches;
next	1.7;
commitid	7Pr412xEOoY2KZOT;

1.7
date	2015.08.22.16.36.05;	author jsing;	state Exp;
branches;
next	1.6;
commitid	FOQ5PgwxGR8cjJ8X;

1.6
date	2014.12.28.15.48.52;	author jsing;	state Exp;
branches;
next	1.5;
commitid	bQimQQipD1DRW09U;

1.5
date	2014.10.13.02.46.14;	author bcook;	state Exp;
branches;
next	1.4;
commitid	Z6BCDPzTn5x0AxGt;

1.4
date	2014.09.17.02.20.45;	author lteo;	state Exp;
branches;
next	1.3;
commitid	SkJE85lvMbeJ64xS;

1.3
date	2014.08.28.14.23.52;	author jsing;	state Exp;
branches;
next	1.2;
commitid	sL7NDHJPBg4hmfYx;

1.2
date	2014.08.28.14.01.32;	author jsing;	state Exp;
branches;
next	1.1;
commitid	wXYxK2w6yqzt0rbd;

1.1
date	2014.08.26.17.47.24;	author jsing;	state Exp;
branches;
next	;
commitid	7A7DObXgY4Fni8xJ;


desc
@@


1.10
log
@rearrange pledge promises into the canonical order; easier to eyeball
@
text
@/* $OpenBSD: crl.c,v 1.9 2015/10/17 15:00:11 doug Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "apps.h"

#include <openssl/bio.h>
#include <openssl/err.h>
#include <openssl/pem.h>
#include <openssl/x509.h>
#include <openssl/x509v3.h>

static struct {
	char *cafile;
	char *capath;
	int crlnumber;
	int fingerprint;
	int hash;
	int hash_old;
	char *infile;
	int informat;
	int issuer;
	int lastupdate;
	char *nameopt;
	int nextupdate;
	int noout;
	char *outfile;
	int outformat;
	int text;
	int verify;
} crl_config;

static struct option crl_options[] = {
	{
		.name = "CAfile",
		.argname = "file",
		.desc = "Verify the CRL using certificates in the given file",
		.type = OPTION_ARG,
		.opt.arg = &crl_config.cafile,
	},
	{
		.name = "CApath",
		.argname = "path",
		.desc = "Verify the CRL using certificates in the given path",
		.type = OPTION_ARG,
		.opt.arg = &crl_config.capath,
	},
	{
		.name = "crlnumber",
		.desc = "Print the CRL number",
		.type = OPTION_FLAG_ORD,
		.opt.flag = &crl_config.crlnumber,
	},
	{
		.name = "fingerprint",
		.desc = "Print the CRL fingerprint",
		.type = OPTION_FLAG_ORD,
		.opt.flag = &crl_config.fingerprint,
	},
	{
		.name = "hash",
		.desc = "Print the hash of the issuer name",
		.type = OPTION_FLAG_ORD,
		.opt.flag = &crl_config.hash,
	},
	{
		.name = "hash_old",
		.desc = "Print an old-style (MD5) hash of the issuer name",
		.type = OPTION_FLAG_ORD,
		.opt.flag = &crl_config.hash_old,
	},
	{
		.name = "in",
		.argname = "file",
		.desc = "Input file to read from (stdin if unspecified)",
		.type = OPTION_ARG,
		.opt.arg = &crl_config.infile,
	},
	{
		.name = "inform",
		.argname = "format",
		.desc = "Input format (DER or PEM)",
		.type = OPTION_ARG_FORMAT,
		.opt.value = &crl_config.informat,
	},
	{
		.name = "issuer",
		.desc = "Print the issuer name",
		.type = OPTION_FLAG_ORD,
		.opt.flag = &crl_config.issuer,
	},
	{
		.name = "lastupdate",
		.desc = "Print the lastUpdate field",
		.type = OPTION_FLAG_ORD,
		.opt.flag = &crl_config.lastupdate,
	},
	{
		.name = "nameopt",
		.argname = "options",
		.desc = "Specify certificate name options",
		.type = OPTION_ARG,
		.opt.arg = &crl_config.nameopt,
	},
	{
		.name = "nextupdate",
		.desc = "Print the nextUpdate field",
		.type = OPTION_FLAG_ORD,
		.opt.flag = &crl_config.nextupdate,
	},
	{
		.name = "noout",
		.desc = "Do not output the encoded version of the CRL",
		.type = OPTION_FLAG,
		.opt.flag = &crl_config.noout,
	},
	{
		.name = "out",
		.argname = "file",
		.desc = "Output file to write to (stdout if unspecified)",
		.type = OPTION_ARG,
		.opt.arg = &crl_config.outfile,
	},
	{
		.name = "outform",
		.argname = "format",
		.desc = "Output format (DER or PEM)",
		.type = OPTION_ARG_FORMAT,
		.opt.value = &crl_config.outformat,
	},
	{
		.name = "text",
		.desc = "Print out the CRL in text form",
		.type = OPTION_FLAG,
		.opt.flag = &crl_config.text,
	},
	{
		.name = "verify",
		.desc = "Verify the signature on the CRL",
		.type = OPTION_FLAG,
		.opt.flag = &crl_config.verify,
	},
	{NULL},
};

static void
crl_usage(void)
{
	fprintf(stderr,
	    "usage: crl [-CAfile file] [-CApath dir] [-fingerprint] [-hash]\n"
	    "    [-in file] [-inform DER | PEM] [-issuer] [-lastupdate]\n"
	    "    [-nextupdate] [-noout] [-out file] [-outform DER | PEM]\n"
	    "    [-text]\n\n");
	options_usage(crl_options);
}

static X509_CRL *load_crl(char *file, int format);
static BIO *bio_out = NULL;

int
crl_main(int argc, char **argv)
{
	unsigned long nmflag = 0;
	X509_CRL *x = NULL;
	int ret = 1, i;
	BIO *out = NULL;
	X509_STORE *store = NULL;
	X509_STORE_CTX ctx;
	X509_LOOKUP *lookup = NULL;
	X509_OBJECT xobj;
	EVP_PKEY *pkey;
	const EVP_MD *digest;
	char *digest_name = NULL;

	if (single_execution) {
		if (pledge("stdio cpath wpath rpath", NULL) == -1) {
			perror("pledge");
			exit(1);
		}
	}

	if (bio_out == NULL) {
		if ((bio_out = BIO_new(BIO_s_file())) != NULL) {
			BIO_set_fp(bio_out, stdout, BIO_NOCLOSE);
		}
	}

	digest = EVP_sha1();

	memset(&crl_config, 0, sizeof(crl_config));
	crl_config.informat = FORMAT_PEM;
	crl_config.outformat = FORMAT_PEM;

	if (options_parse(argc, argv, crl_options, &digest_name, NULL) != 0) {
		crl_usage();
		goto end;
	}

	if (crl_config.cafile != NULL || crl_config.capath != NULL)
		crl_config.verify = 1;

	if (crl_config.nameopt != NULL) {
		if (set_name_ex(&nmflag, crl_config.nameopt) != 1) {
			fprintf(stderr,
			    "Invalid -nameopt argument '%s'\n",
			    crl_config.nameopt);
			goto end;
		}
	}

	if (digest_name != NULL) {
		if ((digest = EVP_get_digestbyname(digest_name)) == NULL) {
			fprintf(stderr,
			    "Unknown message digest algorithm '%s'\n",
			    digest_name);
			goto end;
		}
	}

	x = load_crl(crl_config.infile, crl_config.informat);
	if (x == NULL)
		goto end;

	if (crl_config.verify) {
		store = X509_STORE_new();
		lookup = X509_STORE_add_lookup(store, X509_LOOKUP_file());
		if (lookup == NULL)
			goto end;
		if (!X509_LOOKUP_load_file(lookup, crl_config.cafile,
		    X509_FILETYPE_PEM))
			X509_LOOKUP_load_file(lookup, NULL,
			    X509_FILETYPE_DEFAULT);

		lookup = X509_STORE_add_lookup(store, X509_LOOKUP_hash_dir());
		if (lookup == NULL)
			goto end;
		if (!X509_LOOKUP_add_dir(lookup, crl_config.capath,
		    X509_FILETYPE_PEM))
			X509_LOOKUP_add_dir(lookup, NULL,
			    X509_FILETYPE_DEFAULT);
		ERR_clear_error();

		if (!X509_STORE_CTX_init(&ctx, store, NULL, NULL)) {
			BIO_printf(bio_err,
			    "Error initialising X509 store\n");
			goto end;
		}
		i = X509_STORE_get_by_subject(&ctx, X509_LU_X509,
		    X509_CRL_get_issuer(x), &xobj);
		if (i <= 0) {
			BIO_printf(bio_err,
			    "Error getting CRL issuer certificate\n");
			goto end;
		}
		pkey = X509_get_pubkey(xobj.data.x509);
		X509_OBJECT_free_contents(&xobj);
		if (!pkey) {
			BIO_printf(bio_err,
			    "Error getting CRL issuer public key\n");
			goto end;
		}
		i = X509_CRL_verify(x, pkey);
		EVP_PKEY_free(pkey);
		if (i < 0)
			goto end;
		if (i == 0)
			BIO_printf(bio_err, "verify failure\n");
		else
			BIO_printf(bio_err, "verify OK\n");
	}

	/* Print requested information the order that the flags were given. */
	for (i = 1; i <= argc; i++) {
		if (crl_config.issuer == i) {
			print_name(bio_out, "issuer=",
			    X509_CRL_get_issuer(x), nmflag);
		}
		if (crl_config.crlnumber == i) {
			ASN1_INTEGER *crlnum;
			crlnum = X509_CRL_get_ext_d2i(x,
			    NID_crl_number, NULL, NULL);
			BIO_printf(bio_out, "crlNumber=");
			if (crlnum) {
				i2a_ASN1_INTEGER(bio_out, crlnum);
				ASN1_INTEGER_free(crlnum);
			} else
				BIO_puts(bio_out, "<NONE>");
			BIO_printf(bio_out, "\n");
		}
		if (crl_config.hash == i) {
			BIO_printf(bio_out, "%08lx\n",
			    X509_NAME_hash(X509_CRL_get_issuer(x)));
		}
#ifndef OPENSSL_NO_MD5
		if (crl_config.hash_old == i) {
			BIO_printf(bio_out, "%08lx\n",
			    X509_NAME_hash_old(X509_CRL_get_issuer(x)));
		}
#endif
		if (crl_config.lastupdate == i) {
			BIO_printf(bio_out, "lastUpdate=");
			ASN1_TIME_print(bio_out,
			    X509_CRL_get_lastUpdate(x));
			BIO_printf(bio_out, "\n");
		}
		if (crl_config.nextupdate == i) {
			BIO_printf(bio_out, "nextUpdate=");
			if (X509_CRL_get_nextUpdate(x))
				ASN1_TIME_print(bio_out,
				    X509_CRL_get_nextUpdate(x));
			else
				BIO_printf(bio_out, "NONE");
			BIO_printf(bio_out, "\n");
		}
		if (crl_config.fingerprint == i) {
			int j;
			unsigned int n;
			unsigned char md[EVP_MAX_MD_SIZE];

			if (!X509_CRL_digest(x, digest, md, &n)) {
				BIO_printf(bio_err, "out of memory\n");
				goto end;
			}
			BIO_printf(bio_out, "%s Fingerprint=",
			    OBJ_nid2sn(EVP_MD_type(digest)));
			for (j = 0; j < (int) n; j++) {
				BIO_printf(bio_out, "%02X%c", md[j],
				    (j + 1 == (int)n) ? '\n' : ':');
			}
		}
	}

	out = BIO_new(BIO_s_file());
	if (out == NULL) {
		ERR_print_errors(bio_err);
		goto end;
	}
	if (crl_config.outfile == NULL) {
		BIO_set_fp(out, stdout, BIO_NOCLOSE);
	} else {
		if (BIO_write_filename(out, crl_config.outfile) <= 0) {
			perror(crl_config.outfile);
			goto end;
		}
	}

	if (crl_config.text)
		X509_CRL_print(out, x);

	if (crl_config.noout) {
		ret = 0;
		goto end;
	}
	if (crl_config.outformat == FORMAT_ASN1)
		i = (int) i2d_X509_CRL_bio(out, x);
	else if (crl_config.outformat == FORMAT_PEM)
		i = PEM_write_bio_X509_CRL(out, x);
	else {
		BIO_printf(bio_err,
		    "bad output format specified for outfile\n");
		goto end;
	}
	if (!i) {
		BIO_printf(bio_err, "unable to write CRL\n");
		goto end;
	}
	ret = 0;

end:
	BIO_free_all(out);
	BIO_free_all(bio_out);
	bio_out = NULL;
	X509_CRL_free(x);
	if (store) {
		X509_STORE_CTX_cleanup(&ctx);
		X509_STORE_free(store);
	}

	return (ret);
}

static X509_CRL *
load_crl(char *infile, int format)
{
	X509_CRL *x = NULL;
	BIO *in = NULL;

	in = BIO_new(BIO_s_file());
	if (in == NULL) {
		ERR_print_errors(bio_err);
		goto end;
	}
	if (infile == NULL)
		BIO_set_fp(in, stdin, BIO_NOCLOSE);
	else {
		if (BIO_read_filename(in, infile) <= 0) {
			perror(infile);
			goto end;
		}
	}
	if (format == FORMAT_ASN1)
		x = d2i_X509_CRL_bio(in, NULL);
	else if (format == FORMAT_PEM)
		x = PEM_read_bio_X509_CRL(in, NULL, NULL, NULL);
	else {
		BIO_printf(bio_err,
		    "bad input format specified for input crl\n");
		goto end;
	}
	if (x == NULL) {
		BIO_printf(bio_err, "unable to load CRL\n");
		ERR_print_errors(bio_err);
		goto end;
	}

end:
	BIO_free(in);
	return (x);
}
@


1.9
log
@Exit if a pledge call fails in non-interactive mode.

ok semarie@@
@
text
@d1 1
a1 1
/* $OpenBSD: crl.c,v 1.8 2015/10/10 22:28:51 doug Exp $ */
d234 1
a234 1
		if (pledge("stdio rpath wpath cpath", NULL) == -1) {
@


1.8
log
@Initial support for pledges in openssl(1) commands.

openssl(1) has two mechanisms for operating: either a single execution
of one command (looking at argv[0] or argv[1]) or as an interactive
session than may execute any number of commands.

We already have a top level pledge that should cover all commands
and that's what interactive mode must continue using.  However, we can
tighten up the pledges when only executing one command.

This is an initial stab at support and may contain regressions.  Most
commands only need "stdio rpath wpath cpath".  The pledges could be
further restricted by evaluating the situation after parsing options.

deraadt@@ and beck@@ are roughly fine with this approach.
@
text
@d1 1
a1 1
/* $OpenBSD: crl.c,v 1.7 2015/08/22 16:36:05 jsing Exp $ */
d234 1
a234 1
		if (pledge("stdio rpath wpath cpath", NULL) == -1)
d236 2
@


1.7
log
@Remove all duplicate prototypes for *_main functions (these are already
provided by progs.h). Also, move the FUNCTION type (and flags) into
openssl.c since that is the only place of use. Lastly, remove pointless
'extern' from the prototypes and use char **argv instead of char *argv[]
(the former is used elsewhere).

ok deraadt@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: crl.c,v 1.6 2014/12/28 15:48:52 jsing Exp $ */
d232 5
@


1.6
log
@Provide a mechanism for option parsing to return the number of arguments
that it has consumed. This allows for the handling of multiple unnamed
arguments, including lists of filenames.
@
text
@d1 1
a1 1
/* $OpenBSD: crl.c,v 1.5 2014/10/13 02:46:14 bcook Exp $ */
a216 2

int crl_main(int, char **);
@


1.5
log
@prefer C99 array initialization syntax.

use C99 array initialization syntax for strict C compilers.

from kinichiro, found building with HP/UX compiler

ok deraadt@@, guenther@@
@
text
@d1 1
a1 1
/* $OpenBSD: crl.c,v 1.4 2014/09/17 02:20:45 lteo Exp $ */
d247 1
a247 1
	if (options_parse(argc, argv, crl_options, &digest_name) != 0) {
@


1.4
log
@Remove unused #define.

ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: crl.c,v 1.3 2014/08/28 14:23:52 jsing Exp $ */
d201 1
a201 1
	{},
@


1.3
log
@openssl_setup() calls SSL_load_error_strings(), which happens to call
ERR_load_crypto_strings() - as such, we do not need to call the same
function from most of the applications.
@
text
@d1 1
a1 1
/* $OpenBSD: crl.c,v 1.2 2014/08/28 14:01:32 jsing Exp $ */
a69 2

#define	POSTFIX	".rvk"
@


1.2
log
@Convert openssl(1) crl to new option/usage handling.
@
text
@d1 1
a1 1
/* $OpenBSD: crl.c,v 1.1 2014/08/26 17:47:24 jsing Exp $ */
a274 1
	ERR_load_crypto_strings();
@


1.1
log
@Move openssl(1) from /usr/sbin/openssl to /usr/bin/openssl, since it is not
a system/superuser binary. At the same time, move the source code from its
current lib/libssl/src/apps location to a more appropriate home under
usr.bin/openssl.

ok deraadt@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: crl.c,v 1.25 2014/07/14 00:35:10 deraadt Exp $ */
d73 131
a203 22
static const char *crl_usage[] = {
	"usage: crl args\n",
	"\n",
	" -inform arg     - input format - default PEM (DER or PEM)\n",
	" -outform arg    - output format - default PEM\n",
	" -text           - print out a text format version\n",
	" -in arg         - input file - default stdin\n",
	" -out arg        - output file - default stdout\n",
	" -hash           - print hash value\n",
#ifndef OPENSSL_NO_MD5
	" -hash_old       - print old-style (MD5) hash value\n",
#endif
	" -fingerprint    - print the crl fingerprint\n",
	" -issuer         - print issuer DN\n",
	" -lastupdate     - lastUpdate field\n",
	" -nextupdate     - nextUpdate field\n",
	" -crlnumber      - print CRL number\n",
	" -noout          - no CRL output\n",
	" -CAfile  name   - verify CRL using certificates in file \"name\"\n",
	" -CApath  dir    - verify CRL using certificates in \"dir\"\n",
	" -nameopt arg    - various certificate name options\n",
	NULL
d206 11
d227 1
a227 2
	char *CAfile = NULL, *CApath = NULL;
	int ret = 1, i, num, badops = 0;
a228 9
	int informat, outformat;
	char *infile = NULL, *outfile = NULL;
	int hash = 0, issuer = 0, lastupdate = 0, nextupdate = 0, noout = 0,
	    text = 0;
#ifndef OPENSSL_NO_MD5
	int hash_old = 0;
#endif
	int fingerprint = 0, crlnumber = 0;
	const char **pp;
d234 2
a235 2
	int do_ver = 0;
	const EVP_MD *md_alg, *digest = EVP_sha1();
d237 1
a237 1
	if (bio_out == NULL)
d241 7
a247 2
	informat = FORMAT_PEM;
	outformat = FORMAT_PEM;
d249 14
a262 11
	argc--;
	argv++;
	num = 0;
	while (argc >= 1) {
#ifdef undef
		if (strcmp(*argv, "-p") == 0) {
			if (--argc < 1)
				goto bad;
			if (!args_from_file(++argv, Nargc, Nargv)) {
				goto end;
			}
d264 8
a271 61
#endif
		if (strcmp(*argv, "-inform") == 0) {
			if (--argc < 1)
				goto bad;
			informat = str2fmt(*(++argv));
		} else if (strcmp(*argv, "-outform") == 0) {
			if (--argc < 1)
				goto bad;
			outformat = str2fmt(*(++argv));
		} else if (strcmp(*argv, "-in") == 0) {
			if (--argc < 1)
				goto bad;
			infile = *(++argv);
		} else if (strcmp(*argv, "-out") == 0) {
			if (--argc < 1)
				goto bad;
			outfile = *(++argv);
		} else if (strcmp(*argv, "-CApath") == 0) {
			if (--argc < 1)
				goto bad;
			CApath = *(++argv);
			do_ver = 1;
		} else if (strcmp(*argv, "-CAfile") == 0) {
			if (--argc < 1)
				goto bad;
			CAfile = *(++argv);
			do_ver = 1;
		} else if (strcmp(*argv, "-verify") == 0)
			do_ver = 1;
		else if (strcmp(*argv, "-text") == 0)
			text = 1;
		else if (strcmp(*argv, "-hash") == 0)
			hash = ++num;
#ifndef OPENSSL_NO_MD5
		else if (strcmp(*argv, "-hash_old") == 0)
			hash_old = ++num;
#endif
		else if (strcmp(*argv, "-nameopt") == 0) {
			if (--argc < 1)
				goto bad;
			if (!set_name_ex(&nmflag, *(++argv)))
				goto bad;
		} else if (strcmp(*argv, "-issuer") == 0)
			issuer = ++num;
		else if (strcmp(*argv, "-lastupdate") == 0)
			lastupdate = ++num;
		else if (strcmp(*argv, "-nextupdate") == 0)
			nextupdate = ++num;
		else if (strcmp(*argv, "-noout") == 0)
			noout = ++num;
		else if (strcmp(*argv, "-fingerprint") == 0)
			fingerprint = ++num;
		else if (strcmp(*argv, "-crlnumber") == 0)
			crlnumber = ++num;
		else if ((md_alg = EVP_get_digestbyname(*argv + 1))) {
			/* ok */
			digest = md_alg;
		} else {
			BIO_printf(bio_err, "unknown option %s\n", *argv);
			badops = 1;
			break;
a272 2
		argc--;
		argv++;
a274 6
	if (badops) {
bad:
		for (pp = crl_usage; (*pp != NULL); pp++)
			BIO_printf(bio_err, "%s", *pp);
		goto end;
	}
d276 2
a277 2
	x = load_crl(infile, informat);
	if (x == NULL) {
d279 2
a280 2
	}
	if (do_ver) {
d285 2
a286 1
		if (!X509_LOOKUP_load_file(lookup, CAfile, X509_FILETYPE_PEM))
d293 2
a294 1
		if (!X509_LOOKUP_add_dir(lookup, CApath, X509_FILETYPE_PEM))
d327 23
a349 22
	if (num) {
		for (i = 1; i <= num; i++) {
			if (issuer == i) {
				print_name(bio_out, "issuer=",
				    X509_CRL_get_issuer(x), nmflag);
			}
			if (crlnumber == i) {
				ASN1_INTEGER *crlnum;
				crlnum = X509_CRL_get_ext_d2i(x,
				    NID_crl_number, NULL, NULL);
				BIO_printf(bio_out, "crlNumber=");
				if (crlnum) {
					i2a_ASN1_INTEGER(bio_out, crlnum);
					ASN1_INTEGER_free(crlnum);
				} else
					BIO_puts(bio_out, "<NONE>");
				BIO_printf(bio_out, "\n");
			}
			if (hash == i) {
				BIO_printf(bio_out, "%08lx\n",
				    X509_NAME_hash(X509_CRL_get_issuer(x)));
			}
d351 4
a354 4
			if (hash_old == i) {
				BIO_printf(bio_out, "%08lx\n",
				    X509_NAME_hash_old(X509_CRL_get_issuer(x)));
			}
d356 9
a364 2
			if (lastupdate == i) {
				BIO_printf(bio_out, "lastUpdate=");
d366 13
a378 2
				    X509_CRL_get_lastUpdate(x));
				BIO_printf(bio_out, "\n");
d380 5
a384 24
			if (nextupdate == i) {
				BIO_printf(bio_out, "nextUpdate=");
				if (X509_CRL_get_nextUpdate(x))
					ASN1_TIME_print(bio_out,
					    X509_CRL_get_nextUpdate(x));
				else
					BIO_printf(bio_out, "NONE");
				BIO_printf(bio_out, "\n");
			}
			if (fingerprint == i) {
				int j;
				unsigned int n;
				unsigned char md[EVP_MAX_MD_SIZE];

				if (!X509_CRL_digest(x, digest, md, &n)) {
					BIO_printf(bio_err, "out of memory\n");
					goto end;
				}
				BIO_printf(bio_out, "%s Fingerprint=",
				    OBJ_nid2sn(EVP_MD_type(digest)));
				for (j = 0; j < (int) n; j++) {
					BIO_printf(bio_out, "%02X%c", md[j],
					    (j + 1 == (int)n) ? '\n' : ':');
				}
d388 1
d394 1
a394 1
	if (outfile == NULL) {
d397 2
a398 2
		if (BIO_write_filename(out, outfile) <= 0) {
			perror(outfile);
d403 1
a403 1
	if (text)
d406 1
a406 1
	if (noout) {
d410 1
a410 1
	if (outformat == FORMAT_ASN1)
d412 1
a412 1
	else if (outformat == FORMAT_PEM)
@

