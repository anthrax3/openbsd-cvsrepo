head	1.8;
access;
symbols
	OPENBSD_6_2:1.8.0.10
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.8.0.8
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.6
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4;
locks; strict;
comment	@ * @;


1.8
date	2015.10.17.15.00.11;	author doug;	state Exp;
branches;
next	1.7;
commitid	eAF5hlziO0omr4Cj;

1.7
date	2015.10.10.22.28.51;	author doug;	state Exp;
branches;
next	1.6;
commitid	7Pr412xEOoY2KZOT;

1.6
date	2015.08.19.18.25.31;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	mhJdagBRVnDGkLkQ;

1.5
date	2015.07.17.16.04.09;	author doug;	state Exp;
branches;
next	1.4;
commitid	u7Y4knhylseLq5Vw;

1.4
date	2015.03.02.07.51.25;	author bcook;	state Exp;
branches;
next	1.3;
commitid	mMdqWhOKLNcJKY9s;

1.3
date	2015.02.09.05.22.56;	author jsing;	state Exp;
branches;
next	1.2;
commitid	hHjLge3ySUu9p81p;

1.2
date	2015.02.09.01.15.28;	author jsing;	state Exp;
branches;
next	1.1;
commitid	sEsVF95nyCLpfyIg;

1.1
date	2014.08.26.17.47.24;	author jsing;	state Exp;
branches;
next	;
commitid	7A7DObXgY4Fni8xJ;


desc
@@


1.8
log
@Exit if a pledge call fails in non-interactive mode.

ok semarie@@
@
text
@/* $OpenBSD: ciphers.c,v 1.7 2015/10/10 22:28:51 doug Exp $ */
/*
 * Copyright (c) 2014 Joel Sing <jsing@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <stdio.h>
#include <stdlib.h>

#include <openssl/err.h>
#include <openssl/ssl.h>

#include "apps.h"
#include "progs.h"

struct {
	int usage;
	int verbose;
} ciphers_config;

struct option ciphers_options[] = {
	{
		.name = "h",
		.type = OPTION_FLAG,
		.opt.flag = &ciphers_config.usage,
	},
	{
		.name = "?",
		.type = OPTION_FLAG,
		.opt.flag = &ciphers_config.usage,
	},
	{
		.name = "tls1",
		.desc = "This option is deprecated since it is the default",
		.type = OPTION_DISCARD,
	},
	{
		.name = "v",
		.desc = "Provide cipher listing",
		.type = OPTION_VALUE,
		.opt.value = &ciphers_config.verbose,
		.value = 1,
	},
	{
		.name = "V",
		.desc = "Provide cipher listing with cipher suite values",
		.type = OPTION_VALUE,
		.opt.value = &ciphers_config.verbose,
		.value = 2,
	},
	{ NULL },
};

static void
ciphers_usage(void)
{
	fprintf(stderr, "usage: ciphers [-hVv] [-tls1] [cipherlist]\n");
	options_usage(ciphers_options);
}

int
ciphers_main(int argc, char **argv)
{
	char *cipherlist = NULL;
	STACK_OF(SSL_CIPHER) *ciphers;
	const SSL_CIPHER *cipher;
	SSL_CTX *ssl_ctx = NULL;
	SSL *ssl = NULL;
	uint16_t value;
	int i, rv = 0;
	char *desc;

	if (single_execution) {
		if (pledge("stdio rpath", NULL) == -1) {
			perror("pledge");
			exit(1);
		}
	}

	memset(&ciphers_config, 0, sizeof(ciphers_config));

	if (options_parse(argc, argv, ciphers_options, &cipherlist,
	    NULL) != 0) {
		ciphers_usage();
		return (1);
	}

	if (ciphers_config.usage) {
		ciphers_usage();
		return (1);
	}

	if ((ssl_ctx = SSL_CTX_new(TLSv1_client_method())) == NULL)
		goto err;

	if (cipherlist != NULL) {
		if (SSL_CTX_set_cipher_list(ssl_ctx, cipherlist) == 0)
			goto err;
	}

	if ((ssl = SSL_new(ssl_ctx)) == NULL)
		goto err;

	if ((ciphers = SSL_get_ciphers(ssl)) == NULL)
		goto err;

	for (i = 0; i < sk_SSL_CIPHER_num(ciphers); i++) {
		cipher = sk_SSL_CIPHER_value(ciphers, i);
		if (ciphers_config.verbose == 0) {
			fprintf(stdout, "%s%s", (i ? ":" : ""),
			    SSL_CIPHER_get_name(cipher));
			continue;
		}
		if (ciphers_config.verbose > 1) {
			value = SSL_CIPHER_get_value(cipher);
			fprintf(stdout, "%-*s0x%02X,0x%02X - ", 10, "",
				((value >> 8) & 0xff), (value & 0xff));
		}
		desc = SSL_CIPHER_description(cipher, NULL, 0);
		if (strcmp(desc, "OPENSSL_malloc Error") == 0) {
			fprintf(stderr, "out of memory\n");
			goto err;
		}
		fprintf(stdout, "%s", desc);
		free(desc);
	}
	if (ciphers_config.verbose == 0)
		fprintf(stdout, "\n");

	goto done;

err:
	ERR_print_errors_fp(stderr);
	rv = 1;

done:
	SSL_CTX_free(ssl_ctx);
	SSL_free(ssl);

	return (rv);
}
@


1.7
log
@Initial support for pledges in openssl(1) commands.

openssl(1) has two mechanisms for operating: either a single execution
of one command (looking at argv[0] or argv[1]) or as an interactive
session than may execute any number of commands.

We already have a top level pledge that should cover all commands
and that's what interactive mode must continue using.  However, we can
tighten up the pledges when only executing one command.

This is an initial stab at support and may contain regressions.  Most
commands only need "stdio rpath wpath cpath".  The pledges could be
further restricted by evaluating the situation after parsing options.

deraadt@@ and beck@@ are roughly fine with this approach.
@
text
@d1 1
a1 1
/* $OpenBSD: ciphers.c,v 1.6 2015/08/19 18:25:31 deraadt Exp $ */
d85 1
a85 1
		if (pledge("stdio rpath", NULL) == -1)
d87 2
@


1.6
log
@bring prototypes into scope, requires movement of a large global object
out of .h file
ok jsing
@
text
@d1 1
a1 1
/* $OpenBSD: ciphers.c,v 1.5 2015/07/17 16:04:09 doug Exp $ */
d83 5
@


1.5
log
@Remove support for SSLv3 from openssl(1) ciphers.

ok miod@@ bcook@@
@
text
@d1 1
a1 1
/* $OpenBSD: ciphers.c,v 1.4 2015/03/02 07:51:25 bcook Exp $ */
d25 1
@


1.4
log
@use correct formatter (int, because of type promotion after operations)

ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: ciphers.c,v 1.3 2015/02/09 05:22:56 jsing Exp $ */
a26 1
	int ssl_version;
a42 7
		.name = "ssl3",
		.desc = "Only include SSLv3 ciphers",
		.type = OPTION_VALUE,
		.opt.value = &ciphers_config.ssl_version,
		.value = SSL3_VERSION,
	},
	{
d44 2
a45 4
		.desc = "Only include TLSv1 ciphers",
		.type = OPTION_VALUE,
		.opt.value = &ciphers_config.ssl_version,
		.value = TLS1_VERSION,
d67 1
a67 1
	fprintf(stderr, "usage: ciphers [-hVv] [-ssl3 | -tls1] [cipherlist]\n");
a75 1
	const SSL_METHOD *ssl_method;
d96 1
a96 12
	switch (ciphers_config.ssl_version) {
	case SSL3_VERSION:
		ssl_method = SSLv3_client_method();
		break;
	case TLS1_VERSION:
		ssl_method = TLSv1_client_method();
		break;
	default:
		ssl_method = SSLv3_server_method();
	}

	if ((ssl_ctx = SSL_CTX_new(ssl_method)) == NULL)
@


1.3
log
@Remember to zero the ciphers configuration.
@
text
@d1 1
a1 1
/* $OpenBSD: ciphers.c,v 1.2 2015/02/09 01:15:28 jsing Exp $ */
d141 1
a141 1
			fprintf(stdout, "%-*s0x%02hX,0x%02hX - ", 10, "",
@


1.2
log
@Rewrite the openssl(1) ciphers command.

This has the same functionality as the previous version, however uses the
new option handling code, uses SSL_CIPHER_get_value() since we no longer
care about SSlv2 cipher suites and uses standard I/O functions instead of
BIO functions.

ok beck@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d71 1
a71 1
	{},
d93 2
@


1.1
log
@Move openssl(1) from /usr/sbin/openssl to /usr/bin/openssl, since it is not
a system/superuser binary. At the same time, move the source code from its
current lib/libssl/src/apps location to a more appropriate home under
usr.bin/openssl.

ok deraadt@@ miod@@
@
text
@d1 15
a15 56
/* $OpenBSD: ciphers.c,v 1.27 2014/08/24 14:55:23 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
a19 3
#include <string.h>

#include "apps.h"
d24 48
a71 7
static const char *ciphers_usage[] = {
	"usage: ciphers args\n",
	" -v          - verbose mode, a textual listing of the SSL/TLS ciphers in OpenSSL\n",
	" -V          - even more verbose\n",
	" -ssl3       - SSL3 mode\n",
	" -tls1       - TLS1 mode\n",
	NULL
d74 6
a79 1
int ciphers_main(int, char **);
d84 5
a88 6
	int ret = 1, i;
	int verbose = 0, Verbose = 0;
	const char **pp;
	const char *p;
	int badops = 0;
	SSL_CTX *ctx = NULL;
d90 2
a91 4
	char *ciphers = NULL;
	const SSL_METHOD *meth = NULL;
	STACK_OF(SSL_CIPHER) * sk;
	BIO *STDout = NULL;
d94 5
a98 1
	meth = SSLv3_server_method();
d100 3
a102 22
	STDout = BIO_new_fp(stdout, BIO_NOCLOSE);

	argc--;
	argv++;
	while (argc >= 1) {
		if (strcmp(*argv, "-v") == 0)
			verbose = 1;
		else if (strcmp(*argv, "-V") == 0)
			verbose = Verbose = 1;
		else if (strcmp(*argv, "-ssl3") == 0)
			meth = SSLv3_client_method();
		else if (strcmp(*argv, "-tls1") == 0)
			meth = TLSv1_client_method();
		else if ((strncmp(*argv, "-h", 2) == 0) ||
		    (strcmp(*argv, "-?") == 0)) {
			badops = 1;
			break;
		} else {
			ciphers = *argv;
		}
		argc--;
		argv++;
d105 9
a113 4
	if (badops) {
		for (pp = ciphers_usage; (*pp != NULL); pp++)
			BIO_printf(bio_err, "%s", *pp);
		goto end;
d116 1
a116 2
	ctx = SSL_CTX_new(meth);
	if (ctx == NULL)
d118 3
a120 3
	if (ciphers != NULL) {
		if (!SSL_CTX_set_cipher_list(ctx, ciphers)) {
			BIO_printf(bio_err, "Error in cipher list\n");
a121 1
		}
d123 2
a124 2
	ssl = SSL_new(ctx);
	if (ssl == NULL)
d127 14
a140 8
	if (!verbose) {
		for (i = 0; ; i++) {
			p = SSL_get_cipher_list(ssl, i);
			if (p == NULL)
				break;
			if (i != 0)
				BIO_printf(STDout, ":");
			BIO_printf(STDout, "%s", p);
d142 4
a145 27
		BIO_printf(STDout, "\n");
	} else {		/* verbose */
		sk = SSL_get_ciphers(ssl);

		for (i = 0; i < sk_SSL_CIPHER_num(sk); i++) {
			SSL_CIPHER *c;

			c = sk_SSL_CIPHER_value(sk, i);

			if (Verbose) {
				unsigned long id = SSL_CIPHER_get_id(c);
				int id0 = (int) (id >> 24);
				int id1 = (int) ((id >> 16) & 0xffL);
				int id2 = (int) ((id >> 8) & 0xffL);
				int id3 = (int) (id & 0xffL);

				if ((id & 0xff000000L) == 0x02000000L)
					BIO_printf(STDout, "     0x%02X,0x%02X,0x%02X - ", id1, id2, id3);	/* SSL2 cipher */
				else if ((id & 0xff000000L) == 0x03000000L)
					BIO_printf(STDout, "          0x%02X,0x%02X - ", id2, id3);	/* SSL3 cipher */
				else
					BIO_printf(STDout, "0x%02X,0x%02X,0x%02X,0x%02X - ", id0, id1, id2, id3);	/* whatever */
			}
			desc = SSL_CIPHER_description(c, NULL, 0);
			BIO_puts(STDout, desc);
			if (strcmp(desc, "OPENSSL_malloc Error") != 0)
				free(desc);
d147 2
d150 4
a154 2
	ret = 0;
	if (0) {
d156 2
a157 2
		ERR_print_errors(bio_err);
	}
d159 3
a161 7
end:
	if (ctx != NULL)
		SSL_CTX_free(ctx);
	if (ssl != NULL)
		SSL_free(ssl);
	if (STDout != NULL)
		BIO_free_all(STDout);
d163 1
a163 1
	return (ret);
@

