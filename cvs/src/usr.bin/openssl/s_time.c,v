head	1.17;
access;
symbols
	OPENBSD_6_2:1.17.0.6
	OPENBSD_6_2_BASE:1.17
	OPENBSD_6_1:1.17.0.4
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.14.0.6
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.2
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.8.0.4
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4;
locks; strict;
comment	@ * @;


1.17
date	2017.01.20.08.57.12;	author deraadt;	state Exp;
branches;
next	1.16;
commitid	dLXg6G5zkTXfsv25;

1.16
date	2016.08.30.14.34.59;	author deraadt;	state Exp;
branches;
next	1.15;
commitid	t9JgsceRD6IUUaRi;

1.15
date	2016.08.30.11.30.14;	author deraadt;	state Exp;
branches;
next	1.14;
commitid	Op2PmRxpi4PZQihJ;

1.14
date	2015.10.17.15.00.11;	author doug;	state Exp;
branches;
next	1.13;
commitid	eAF5hlziO0omr4Cj;

1.13
date	2015.10.10.22.28.51;	author doug;	state Exp;
branches;
next	1.12;
commitid	7Pr412xEOoY2KZOT;

1.12
date	2015.09.11.14.43.57;	author lteo;	state Exp;
branches;
next	1.11;
commitid	HrSWBw0EL1oNOp4P;

1.11
date	2015.09.11.02.08.34;	author lteo;	state Exp;
branches;
next	1.10;
commitid	00Fopn2FC8q4b0JY;

1.10
date	2015.09.10.06.36.45;	author bcook;	state Exp;
branches;
next	1.9;
commitid	3ghTbq9GxDfqO76C;

1.9
date	2015.08.22.16.36.05;	author jsing;	state Exp;
branches;
next	1.8;
commitid	FOQ5PgwxGR8cjJ8X;

1.8
date	2015.07.17.16.10.49;	author doug;	state Exp;
branches;
next	1.7;
commitid	xzJlZhR15Md3ZDZ0;

1.7
date	2015.04.15.16.33.49;	author jsing;	state Exp;
branches;
next	1.6;
commitid	AxEjlaK8xwQwSm0W;

1.6
date	2015.04.14.12.56.36;	author jsing;	state Exp;
branches;
next	1.5;
commitid	NnBYUicjSTlojjdr;

1.5
date	2015.04.14.11.45.00;	author jsing;	state Exp;
branches;
next	1.4;
commitid	3CAj5nRKdzsacsw5;

1.4
date	2015.02.08.10.22.45;	author doug;	state Exp;
branches;
next	1.3;
commitid	oBEFrSQGo34DSILU;

1.3
date	2014.11.04.18.15.22;	author deraadt;	state Exp;
branches;
next	1.2;
commitid	oGAqWS6AeXeJZENq;

1.2
date	2014.09.01.20.54.37;	author doug;	state Exp;
branches;
next	1.1;
commitid	dBAy3m0UnXOh0qIH;

1.1
date	2014.08.26.17.47.25;	author jsing;	state Exp;
branches;
next	;
commitid	7A7DObXgY4Fni8xJ;


desc
@@


1.17
log
@rearrange pledge promises into the canonical order; easier to eyeball
@
text
@/* $OpenBSD: s_time.c,v 1.16 2016/08/30 14:34:59 deraadt Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

/*-----------------------------------------
   s_time - SSL client connection timer program
   Written and donated by Larry Streepy <streepy@@healthcare.com>
  -----------------------------------------*/

#include <sys/types.h>
#include <sys/socket.h>

#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include <string.h>
#include <unistd.h>
#include <poll.h>

#include "apps.h"

#include <openssl/err.h>
#include <openssl/pem.h>
#include <openssl/ssl.h>
#include <openssl/x509.h>

#include "s_apps.h"

#define SSL_CONNECT_NAME	"localhost:4433"

#define BUFSIZZ 1024*10

#define MYBUFSIZ 1024*8

#define SECONDS	30
extern int verify_depth;
extern int verify_error;

static void s_time_usage(void);
static SSL *doConnection(SSL * scon);

static SSL_CTX *tm_ctx = NULL;
static const SSL_METHOD *s_time_meth = NULL;
static long bytes_read = 0;

struct {
	int bugs;
	char *CAfile;
	char *CApath;
	char *certfile;
	char *cipher;
	char *host;
	char *keyfile;
	time_t maxtime;
	int nbio;
	int no_shutdown;
	int perform;
	int verify;
	int verify_depth;
	char *www_path;
} s_time_config;

struct option s_time_options[] = {
	{
		.name = "bugs",
		.desc = "Enable workarounds for known SSL/TLS bugs",
		.type = OPTION_FLAG,
		.opt.flag = &s_time_config.bugs,
	},
	{
		.name = "CAfile",
		.argname = "file",
		.desc = "File containing trusted certificates in PEM format",
		.type = OPTION_ARG,
		.opt.arg = &s_time_config.CAfile,
	},
	{
		.name = "CApath",
		.argname = "path",
		.desc = "Directory containing trusted certificates",
		.type = OPTION_ARG,
		.opt.arg = &s_time_config.CApath,
	},
	{
		.name = "cert",
		.argname = "file",
		.desc = "Client certificate to use, if one is requested",
		.type = OPTION_ARG,
		.opt.arg = &s_time_config.certfile,
	},
	{
		.name = "cipher",
		.argname = "list",
		.desc = "List of cipher suites to send to the server",
		.type = OPTION_ARG,
		.opt.arg = &s_time_config.cipher,
	},
	{
		.name = "connect",
		.argname = "host:port",
		.desc = "Host and port to connect to (default "
		    SSL_CONNECT_NAME ")",
		.type = OPTION_ARG,
		.opt.arg = &s_time_config.host,
	},
	{
		.name = "key",
		.argname = "file",
		.desc = "Client private key to use, if one is required",
		.type = OPTION_ARG,
		.opt.arg = &s_time_config.keyfile,
	},
	{
		.name = "nbio",
		.desc = "Use non-blocking I/O",
		.type = OPTION_FLAG,
		.opt.flag = &s_time_config.nbio,
	},
	{
		.name = "new",
		.desc = "Use a new session ID for each connection",
		.type = OPTION_VALUE,
		.opt.value = &s_time_config.perform,
		.value = 1,
	},
	{
		.name = "no_shutdown",
		.desc = "Shut down the connection without notifying the server",
		.type = OPTION_FLAG,
		.opt.flag = &s_time_config.no_shutdown,
	},
	{
		.name = "reuse",
		.desc = "Reuse the same session ID for each connection",
		.type = OPTION_VALUE,
		.opt.value = &s_time_config.perform,
		.value = 2,
	},
	{
		.name = "time",
		.argname = "seconds",
		.desc = "Duration to perform timing tests for (default 30)",
		.type = OPTION_ARG_TIME,
		.opt.tvalue = &s_time_config.maxtime,
	},
	{
		.name = "verify",
		.argname = "depth",
		.desc = "Enable peer certificate verification with given depth",
		.type = OPTION_ARG_INT,
		.opt.value = &s_time_config.verify_depth,
	},
	{
		.name = "www",
		.argname = "page",
		.desc = "Page to GET from the server (default none)",
		.type = OPTION_ARG,
		.opt.arg = &s_time_config.www_path,
	},
	{ NULL },
};

static void
s_time_usage(void)
{
	fprintf(stderr,
	    "usage: s_time "
	    "[-bugs] [-CAfile file] [-CApath directory] [-cert file]\n"
	    "    [-cipher cipherlist] [-connect host:port] [-key keyfile]\n"
	    "    [-nbio] [-new] [-no_shutdown] [-reuse] [-time seconds]\n"
	    "    [-verify depth] [-www page]\n\n");
	options_usage(s_time_options);
}

/***********************************************************************
 * TIME - time functions
 */
#define START	0
#define STOP	1

static double
tm_Time_F(int s)
{
	return app_tminterval(s, 1);
}

/***********************************************************************
 * MAIN - main processing area for client
 *			real name depends on MONOLITH
 */
int
s_time_main(int argc, char **argv)
{
	double totalTime = 0.0;
	int nConn = 0;
	SSL *scon = NULL;
	time_t finishtime;
	int ret = 1;
	char buf[1024 * 8];
	int ver;

	if (single_execution) {
		if (pledge("stdio rpath inet", NULL) == -1) {
			perror("pledge");
			exit(1);
		}
	}

	s_time_meth = SSLv23_client_method();

	verify_depth = 0;

	memset(&s_time_config, 0, sizeof(s_time_config));

	s_time_config.host = SSL_CONNECT_NAME;
	s_time_config.maxtime = SECONDS;
	s_time_config.perform = 3;
	s_time_config.verify = SSL_VERIFY_NONE;
	s_time_config.verify_depth = -1;

	if (options_parse(argc, argv, s_time_options, NULL, NULL) != 0) {
		s_time_usage();
		goto end;
	}

	if (s_time_config.verify_depth >= 0) {
		s_time_config.verify = SSL_VERIFY_PEER | SSL_VERIFY_CLIENT_ONCE;
		verify_depth = s_time_config.verify_depth;
		BIO_printf(bio_err, "verify depth is %d\n", verify_depth);
	}

	if (s_time_config.www_path != NULL &&
	    strlen(s_time_config.www_path) > MYBUFSIZ - 100) {
		BIO_printf(bio_err, "-www option too long\n");
		goto end;
	}

	if ((tm_ctx = SSL_CTX_new(s_time_meth)) == NULL)
		return (1);

	SSL_CTX_set_quiet_shutdown(tm_ctx, 1);

	if (s_time_config.bugs)
		SSL_CTX_set_options(tm_ctx, SSL_OP_ALL);

	if (s_time_config.cipher != NULL) {
		if (!SSL_CTX_set_cipher_list(tm_ctx, s_time_config.cipher)) {
			BIO_printf(bio_err, "error setting cipher list\n");
			ERR_print_errors(bio_err);
			goto end;
		}
	}

	SSL_CTX_set_verify(tm_ctx, s_time_config.verify, NULL);

	if (!set_cert_stuff(tm_ctx, s_time_config.certfile,
	    s_time_config.keyfile))
		goto end;

	if ((!SSL_CTX_load_verify_locations(tm_ctx, s_time_config.CAfile,
	    s_time_config.CApath)) ||
	    (!SSL_CTX_set_default_verify_paths(tm_ctx))) {
		/*
		 * BIO_printf(bio_err,"error setting default verify
		 * locations\n");
		 */
		ERR_print_errors(bio_err);
		/* goto end; */
	}

	if (!(s_time_config.perform & 1))
		goto next;
	printf("Collecting connection statistics for %lld seconds\n",
	    (long long)s_time_config.maxtime);

	/* Loop and time how long it takes to make connections */

	bytes_read = 0;
	finishtime = time(NULL) + s_time_config.maxtime;
	tm_Time_F(START);
	for (;;) {
		if (finishtime < time(NULL))
			break;
		if ((scon = doConnection(NULL)) == NULL)
			goto end;

		if (s_time_config.www_path != NULL) {
			int i, retval = snprintf(buf, sizeof buf,
			    "GET %s HTTP/1.0\r\n\r\n", s_time_config.www_path);
			if ((size_t)retval >= sizeof buf) {
				fprintf(stderr, "URL too long\n");
				goto end;
			}
			SSL_write(scon, buf, strlen(buf));
			while ((i = SSL_read(scon, buf, sizeof(buf))) > 0)
				bytes_read += i;
		}
		if (s_time_config.no_shutdown)
			SSL_set_shutdown(scon, SSL_SENT_SHUTDOWN |
			    SSL_RECEIVED_SHUTDOWN);
		else
			SSL_shutdown(scon);
		shutdown(SSL_get_fd(scon), SHUT_RDWR);
		close(SSL_get_fd(scon));

		nConn += 1;
		if (SSL_session_reused(scon))
			ver = 'r';
		else {
			ver = SSL_version(scon);
			if (ver == TLS1_VERSION)
				ver = 't';
			else if (ver == SSL3_VERSION)
				ver = '3';
			else if (ver == SSL2_VERSION)
				ver = '2';
			else
				ver = '*';
		}
		fputc(ver, stdout);
		fflush(stdout);

		SSL_free(scon);
		scon = NULL;
	}
	totalTime += tm_Time_F(STOP);	/* Add the time for this iteration */

	printf("\n\n%d connections in %.2fs; %.2f connections/user sec, bytes read %ld\n",
	    nConn, totalTime, ((double) nConn / totalTime), bytes_read);
	printf("%d connections in %lld real seconds, %ld bytes read per connection\n",
	    nConn,
	    (long long)(time(NULL) - finishtime + s_time_config.maxtime),
	    bytes_read / nConn);

	/*
	 * Now loop and time connections using the same session id over and
	 * over
	 */

next:
	if (!(s_time_config.perform & 2))
		goto end;
	printf("\n\nNow timing with session id reuse.\n");

	/* Get an SSL object so we can reuse the session id */
	if ((scon = doConnection(NULL)) == NULL) {
		fprintf(stderr, "Unable to get connection\n");
		goto end;
	}
	if (s_time_config.www_path != NULL) {
		int retval = snprintf(buf, sizeof buf,
		    "GET %s HTTP/1.0\r\n\r\n", s_time_config.www_path);
		if ((size_t)retval >= sizeof buf) {
			fprintf(stderr, "URL too long\n");
			goto end;
		}
		SSL_write(scon, buf, strlen(buf));
		while (SSL_read(scon, buf, sizeof(buf)) > 0);
	}
	if (s_time_config.no_shutdown)
		SSL_set_shutdown(scon, SSL_SENT_SHUTDOWN |
		    SSL_RECEIVED_SHUTDOWN);
	else
		SSL_shutdown(scon);
	shutdown(SSL_get_fd(scon), SHUT_RDWR);
	close(SSL_get_fd(scon));

	nConn = 0;
	totalTime = 0.0;

	finishtime = time(NULL) + s_time_config.maxtime;

	printf("starting\n");
	bytes_read = 0;
	tm_Time_F(START);

	for (;;) {
		if (finishtime < time(NULL))
			break;
		if ((doConnection(scon)) == NULL)
			goto end;

		if (s_time_config.www_path) {
			int i, retval = snprintf(buf, sizeof buf,
			    "GET %s HTTP/1.0\r\n\r\n", s_time_config.www_path);
			if ((size_t)retval >= sizeof buf) {
				fprintf(stderr, "URL too long\n");
				goto end;
			}
			SSL_write(scon, buf, strlen(buf));
			while ((i = SSL_read(scon, buf, sizeof(buf))) > 0)
				bytes_read += i;
		}
		if (s_time_config.no_shutdown)
			SSL_set_shutdown(scon, SSL_SENT_SHUTDOWN |
			    SSL_RECEIVED_SHUTDOWN);
		else
			SSL_shutdown(scon);
		shutdown(SSL_get_fd(scon), SHUT_RDWR);
		close(SSL_get_fd(scon));

		nConn += 1;
		if (SSL_session_reused(scon))
			ver = 'r';
		else {
			ver = SSL_version(scon);
			if (ver == TLS1_VERSION)
				ver = 't';
			else if (ver == SSL3_VERSION)
				ver = '3';
			else if (ver == SSL2_VERSION)
				ver = '2';
			else
				ver = '*';
		}
		fputc(ver, stdout);
		fflush(stdout);
	}
	totalTime += tm_Time_F(STOP);	/* Add the time for this iteration */

	printf("\n\n%d connections in %.2fs; %.2f connections/user sec, bytes read %ld\n", nConn, totalTime, ((double) nConn / totalTime), bytes_read);
	printf("%d connections in %lld real seconds, %ld bytes read per connection\n",
	    nConn,
	    (long long)(time(NULL) - finishtime + s_time_config.maxtime),
	    bytes_read / nConn);

	ret = 0;
end:
	if (scon != NULL)
		SSL_free(scon);

	if (tm_ctx != NULL) {
		SSL_CTX_free(tm_ctx);
		tm_ctx = NULL;
	}

	return (ret);
}

/***********************************************************************
 * doConnection - make a connection
 * Args:
 *		scon	= earlier ssl connection for session id, or NULL
 * Returns:
 *		SSL *	= the connection pointer.
 */
static SSL *
doConnection(SSL * scon)
{
	struct pollfd pfd[1];
	SSL *serverCon;
	BIO *conn;
	long verify_error;
	int i;

	if ((conn = BIO_new(BIO_s_connect())) == NULL)
		return (NULL);

/*	BIO_set_conn_port(conn,port);*/
	BIO_set_conn_hostname(conn, s_time_config.host);

	if (scon == NULL)
		serverCon = SSL_new(tm_ctx);
	else {
		serverCon = scon;
		SSL_set_connect_state(serverCon);
	}

	SSL_set_bio(serverCon, conn, conn);

	/* ok, lets connect */
	for (;;) {
		i = SSL_connect(serverCon);
		if (BIO_sock_should_retry(i)) {
			BIO_printf(bio_err, "DELAY\n");

			i = SSL_get_fd(serverCon);
			pfd[0].fd = i;
			pfd[0].events = POLLIN;
			poll(pfd, 1, -1);
			continue;
		}
		break;
	}
	if (i <= 0) {
		BIO_printf(bio_err, "ERROR\n");
		verify_error = SSL_get_verify_result(serverCon);
		if (verify_error != X509_V_OK)
			BIO_printf(bio_err, "verify error:%s\n",
			    X509_verify_cert_error_string(verify_error));
		else
			ERR_print_errors(bio_err);
		if (scon == NULL)
			SSL_free(serverCon);
		return NULL;
	}
	return serverCon;
}
@


1.16
log
@Add OPTION_ARG_TIME for parsing a (64 bit if needed) time_t
prodding & ok jsing
@
text
@d1 1
a1 1
/* $OpenBSD: s_time.c,v 1.15 2016/08/30 11:30:14 deraadt Exp $ */
d257 1
a257 1
		if (pledge("stdio inet rpath", NULL) == -1) {
@


1.15
log
@Fix 32-bit time handling, using time_t and make it work on systems
where that is long long.
ok beck guenther
@
text
@d1 1
a1 1
/* $OpenBSD: s_time.c,v 1.14 2015/10/17 15:00:11 doug Exp $ */
d197 1
a197 1
		.type = OPTION_ARG_INT,
@


1.14
log
@Exit if a pledge call fails in non-interactive mode.

ok semarie@@
@
text
@d1 1
a1 1
/* $OpenBSD: s_time.c,v 1.13 2015/10/10 22:28:51 doug Exp $ */
a88 5
#undef min
#undef max
#define min(a,b) (((a) < (b)) ? (a) : (b))
#define max(a,b) (((a) > (b)) ? (a) : (b))

d108 1
a108 1
	int maxtime;
d198 1
a198 1
		.opt.value = &s_time_config.maxtime,
d251 2
a252 2
	long finishtime = 0;
	int ret = 1, i;
d327 2
a328 2
	printf("Collecting connection statistics for %d seconds\n",
	    s_time_config.maxtime);
d333 1
a333 1
	finishtime = (long) time(NULL) + s_time_config.maxtime;
d336 1
a336 1
		if (finishtime < (long) time(NULL))
d342 1
a342 1
			int retval = snprintf(buf, sizeof buf,
d382 6
a387 3
	i = (int) ((long) time(NULL) - finishtime + s_time_config.maxtime);
	printf("\n\n%d connections in %.2fs; %.2f connections/user sec, bytes read %ld\n", nConn, totalTime, ((double) nConn / totalTime), bytes_read);
	printf("%d connections in %ld real seconds, %ld bytes read per connection\n", nConn, (long) time(NULL) - finishtime + s_time_config.maxtime, bytes_read / nConn);
d425 1
a425 1
	finishtime = (long) time(NULL) + s_time_config.maxtime;
d432 1
a432 1
		if (finishtime < (long) time(NULL))
d438 1
a438 1
			int retval = snprintf(buf, sizeof buf,
a474 1

d476 4
a479 1
	printf("%d connections in %ld real seconds, %ld bytes read per connection\n", nConn, (long) time(NULL) - finishtime + s_time_config.maxtime, bytes_read / nConn);
@


1.13
log
@Initial support for pledges in openssl(1) commands.

openssl(1) has two mechanisms for operating: either a single execution
of one command (looking at argv[0] or argv[1]) or as an interactive
session than may execute any number of commands.

We already have a top level pledge that should cover all commands
and that's what interactive mode must continue using.  However, we can
tighten up the pledges when only executing one command.

This is an initial stab at support and may contain regressions.  Most
commands only need "stdio rpath wpath cpath".  The pledges could be
further restricted by evaluating the situation after parsing options.

deraadt@@ and beck@@ are roughly fine with this approach.
@
text
@d1 1
a1 1
/* $OpenBSD: s_time.c,v 1.12 2015/09/11 14:43:57 lteo Exp $ */
d262 1
a262 1
		if (pledge("stdio inet rpath", NULL) == -1)
d264 2
@


1.12
log
@"Shutdown" should be "Shut down" in the usage for s_time's -no_shutdown
flag.  Pointed out by jmc@@'s commit to the openssl(1) man page.
@
text
@d1 1
a1 1
/* $OpenBSD: s_time.c,v 1.11 2015/09/11 02:08:34 lteo Exp $ */
d260 5
@


1.11
log
@*** empty log message ***
@
text
@d1 1
a1 1
/* $OpenBSD: s_time.c,v 1.10 2015/09/10 06:36:45 bcook Exp $ */
d187 1
a187 1
		.desc = "Shutdown the connection without notifying the server",
@


1.10
log
@Fix shadowed verify_error in s_server by removing the unused global.

's_time -verify 1' will now actually verify the peer certificate.

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: s_time.c,v 1.9 2015/08/22 16:36:05 jsing Exp $ */
a58 2
#define NO_SHUTDOWN

d115 1
d186 6
d229 1
a229 1
	    "    [-nbio] [-new] [-reuse] [-time seconds]\n"
d350 5
a354 5
#ifdef NO_SHUTDOWN
		SSL_set_shutdown(scon, SSL_SENT_SHUTDOWN | SSL_RECEIVED_SHUTDOWN);
#else
		SSL_shutdown(scon);
#endif
d409 5
a413 5
#ifdef NO_SHUTDOWN
	SSL_set_shutdown(scon, SSL_SENT_SHUTDOWN | SSL_RECEIVED_SHUTDOWN);
#else
	SSL_shutdown(scon);
#endif
d443 5
a447 5
#ifdef NO_SHUTDOWN
		SSL_set_shutdown(scon, SSL_SENT_SHUTDOWN | SSL_RECEIVED_SHUTDOWN);
#else
		SSL_shutdown(scon);
#endif
@


1.9
log
@Remove all duplicate prototypes for *_main functions (these are already
provided by progs.h). Also, move the FUNCTION type (and flags) into
openssl.c since that is the only place of use. Lastly, remove pointless
'extern' from the prototypes and use char **argv instead of char *argv[]
(the former is used elsewhere).

ok deraadt@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: s_time.c,v 1.8 2015/07/17 16:10:49 doug Exp $ */
a258 1
	verify_error = X509_V_OK;
d301 2
d495 1
d529 1
@


1.8
log
@Remove SSLv3 support from openssl(1) s_time.

ok miod@@ bcook@@ beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: s_time.c,v 1.7 2015/04/15 16:33:49 jsing Exp $ */
a244 2
int s_time_main(int, char **);

@


1.7
log
@Only set the cipher list if one was specified and actually check the return
value from SSL_CTX_set_cipher_list(). Also remove pointless getenv()
handling.

ok bcook@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: s_time.c,v 1.5 2015/04/14 11:45:00 jsing Exp $ */
a117 1
	int ssl3;
a193 6
		.name = "ssl3",
		.desc = "Only use SSLv3",
		.type = OPTION_FLAG,
		.opt.flag = &s_time_config.ssl3,
	},
	{
d224 1
a224 1
	    "    [-nbio] [-new] [-reuse] [-ssl3] [-time seconds]\n"
d257 1
a257 1
	
a274 3

	if (s_time_config.ssl3)
		s_time_meth = SSLv3_client_method();
@


1.6
log
@Move verify externs into the header file.
@
text
@d97 2
d305 9
a313 1
	SSL_CTX_set_cipher_list(tm_ctx, s_time_config.cipher);
a327 2
	if (s_time_config.cipher == NULL)
		s_time_config.cipher = getenv("SSL_CIPHER");
a328 3
	if (s_time_config.cipher == NULL) {
		fprintf(stderr, "No CIPHER specified\n");
	}
@


1.5
log
@Convert openssl(1) s_time to new option handling.

ok doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: s_time.c,v 1.4 2015/02/08 10:22:45 doug Exp $ */
a96 2
extern int verify_depth;
extern int verify_error;
@


1.4
log
@Delete commented out code from openssl(1) apps.

From OpenSSL commits:

6f91b017bbb7140f816721141ac156d1b828a6b3
75d0ebef2aef7a2c77b27575b8da898e22f3ccd5
a2b18e657ea1a932d125154f4e13ab2258796d90

ok miod@@, jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: s_time.c,v 1.3 2014/11/04 18:15:22 deraadt Exp $ */
a86 2
 /*#define TEST_CERT "client.pem" *//* no default cert. */

a100 1
static int parseArgs(int argc, char **argv);
a101 5
static void s_time_init(void);

/***********************************************************************
 * Static data declarations
 */
a102 9
/* static char *port=PORT_STR;*/
static char *host = SSL_CONNECT_NAME;
static char *t_cert_file = NULL;
static char *t_key_file = NULL;
static char *CApath = NULL;
static char *CAfile = NULL;
static char *tm_cipher = NULL;
static int tm_verify = SSL_VERIFY_NONE;
static int maxTime = SECONDS;
a104 1
static char *s_www_path = NULL;
a105 21
static int st_bugs = 0;
static int perform = 0;
static int t_nbio = 0;

static void
s_time_init(void)
{
	host = SSL_CONNECT_NAME;
	t_cert_file = NULL;
	t_key_file = NULL;
	CApath = NULL;
	CAfile = NULL;
	tm_cipher = NULL;
	tm_verify = SSL_VERIFY_NONE;
	maxTime = SECONDS;
	tm_ctx = NULL;
	s_time_meth = NULL;
	s_www_path = NULL;
	bytes_read = 0;
	st_bugs = 0;
	perform = 0;
d107 116
a222 2
	t_nbio = 0;
}
a223 3
/***********************************************************************
 * usage - display usage message
 */
d227 7
a233 130
	static const char umsg[] = "\
-time arg     - max number of seconds to collect data, default %d\n\
-verify arg   - turn on peer certificate verification, arg == depth\n\
-cert arg     - certificate file to use, PEM format assumed\n\
-key arg      - RSA file to use, PEM format assumed, key is in cert file\n\
                file if not specified by this option\n\
-CApath arg   - PEM format directory of CA's\n\
-CAfile arg   - PEM format file of CA's\n\
-cipher       - preferred cipher to use, play with 'openssl ciphers'\n\n";

	printf("usage: s_time <args>\n\n");

	printf("-connect host:port - host:port to connect to (default is %s)\n", SSL_CONNECT_NAME);
	printf("-nbio         - Run with non-blocking IO\n");
	printf("-ssl2         - Just use SSLv2\n");
	printf("-ssl3         - Just use SSLv3\n");
	printf("-bugs         - Turn on SSL bug compatibility\n");
	printf("-new          - Just time new connections\n");
	printf("-reuse        - Just time connection reuse\n");
	printf("-www page     - Retrieve 'page' from the site\n");
	printf(umsg, SECONDS);
}

/***********************************************************************
 * parseArgs - Parse command line arguments and initialize data
 *
 * Returns 0 if ok, -1 on bad args
 */
static int
parseArgs(int argc, char **argv)
{
	int badop = 0;
	const char *errstr;

	verify_depth = 0;
	verify_error = X509_V_OK;

	argc--;
	argv++;

	while (argc >= 1) {
		if (strcmp(*argv, "-connect") == 0) {
			if (--argc < 1)
				goto bad;
			host = *(++argv);
		}
		else if (strcmp(*argv, "-reuse") == 0)
			perform = 2;
		else if (strcmp(*argv, "-new") == 0)
			perform = 1;
		else if (strcmp(*argv, "-verify") == 0) {
			tm_verify = SSL_VERIFY_PEER | SSL_VERIFY_CLIENT_ONCE;
			if (--argc < 1)
				goto bad;
			verify_depth = strtonum(*(++argv), 0, INT_MAX, &errstr);
			if (errstr)
				goto bad;
			BIO_printf(bio_err, "verify depth is %d\n", verify_depth);

		} else if (strcmp(*argv, "-cert") == 0) {

			if (--argc < 1)
				goto bad;
			t_cert_file = *(++argv);

		} else if (strcmp(*argv, "-key") == 0) {

			if (--argc < 1)
				goto bad;
			t_key_file = *(++argv);

		} else if (strcmp(*argv, "-CApath") == 0) {

			if (--argc < 1)
				goto bad;
			CApath = *(++argv);

		} else if (strcmp(*argv, "-CAfile") == 0) {

			if (--argc < 1)
				goto bad;
			CAfile = *(++argv);

		} else if (strcmp(*argv, "-cipher") == 0) {

			if (--argc < 1)
				goto bad;
			tm_cipher = *(++argv);
		}
		else if (strcmp(*argv, "-nbio") == 0) {
			t_nbio = 1;
		}
		else if (strcmp(*argv, "-www") == 0) {
			if (--argc < 1)
				goto bad;
			s_www_path = *(++argv);
			if (strlen(s_www_path) > MYBUFSIZ - 100) {
				BIO_printf(bio_err, "-www option too long\n");
				badop = 1;
			}
		} else if (strcmp(*argv, "-bugs") == 0)
			st_bugs = 1;
		else if (strcmp(*argv, "-ssl3") == 0)
			s_time_meth = SSLv3_client_method();
		else if (strcmp(*argv, "-time") == 0) {

			if (--argc < 1)
				goto bad;
			maxTime = strtonum(*(++argv), 0, INT_MAX, &errstr);
			if (errstr)
				goto bad;
		} else {
			BIO_printf(bio_err, "unknown option %s\n", *argv);
			badop = 1;
			break;
		}

		argc--;
		argv++;
	}

	if (perform == 0)
		perform = 3;

	if (badop) {
bad:
		s_time_usage();
		return -1;
	}
	return 0;		/* Valid args */
d264 2
d267 10
a276 1
	s_time_init();
d278 13
a290 1
	s_time_meth = SSLv23_client_method();
d292 3
a294 2
	/* parse the command line arguments */
	if (parseArgs(argc, argv) < 0)
d296 1
d303 1
a303 1
	if (st_bugs)
d305 3
a307 2
	SSL_CTX_set_cipher_list(tm_ctx, tm_cipher);
	if (!set_cert_stuff(tm_ctx, t_cert_file, t_key_file))
d310 2
a311 1
	if ((!SSL_CTX_load_verify_locations(tm_ctx, CAfile, CApath)) ||
d320 2
a321 2
	if (tm_cipher == NULL)
		tm_cipher = getenv("SSL_CIPHER");
d323 1
a323 1
	if (tm_cipher == NULL) {
d326 1
a326 1
	if (!(perform & 1))
d328 2
a329 1
	printf("Collecting connection statistics for %d seconds\n", maxTime);
d334 1
a334 1
	finishtime = (long) time(NULL) + maxTime;
d342 1
a342 1
		if (s_www_path != NULL) {
d344 1
a344 1
			    "GET %s HTTP/1.0\r\n\r\n", s_www_path);
d383 1
a383 1
	i = (int) ((long) time(NULL) - finishtime + maxTime);
d385 1
a385 1
	printf("%d connections in %ld real seconds, %ld bytes read per connection\n", nConn, (long) time(NULL) - finishtime + maxTime, bytes_read / nConn);
d393 1
a393 1
	if (!(perform & 2))
d402 1
a402 1
	if (s_www_path != NULL) {
d404 1
a404 1
		    "GET %s HTTP/1.0\r\n\r\n", s_www_path);
d423 1
a423 1
	finishtime = (long) time(NULL) + maxTime;
d435 1
a435 1
		if (s_www_path) {
d437 1
a437 1
			    "GET %s HTTP/1.0\r\n\r\n", s_www_path);
d475 1
a475 1
	printf("%d connections in %ld real seconds, %ld bytes read per connection\n", nConn, (long) time(NULL) - finishtime + maxTime, bytes_read / nConn);
d509 1
a509 1
	BIO_set_conn_hostname(conn, host);
@


1.3
log
@simple select() to poll() conversion; reviewed by millert and doug
@
text
@d1 1
a1 1
/* $OpenBSD: s_time.c,v 1.2 2014/09/01 20:54:37 doug Exp $ */
a200 11
#if 0
		else if (strcmp(*argv, "-host") == 0) {
			if (--argc < 1)
				goto bad;
			host = *(++argv);
		} else if (strcmp(*argv, "-port") == 0) {
			if (--argc < 1)
				goto bad;
			port = *(++argv);
		}
#endif
a541 5

#if 0
	if (scon != NULL)
		SSL_set_session(serverCon, SSL_get_session(scon));
#endif
@


1.2
log
@Enable -Wshadow in openssl(1) and fix a few shadow warnings.

ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: s_time.c,v 1.1 2014/08/26 17:47:25 jsing Exp $ */
d66 1
a66 1
#include <sys/select.h>
d74 1
d534 2
d537 1
a537 3
	SSL *serverCon;
	int width, i;
	fd_set readfds;
d566 3
a568 4
			width = i + 1;
			FD_ZERO(&readfds);
			FD_SET(i, &readfds);
			select(width, &readfds, NULL, NULL, NULL);
@


1.1
log
@Move openssl(1) from /usr/sbin/openssl to /usr/bin/openssl, since it is not
a system/superuser binary. At the same time, move the source code from its
current lib/libssl/src/apps location to a more appropriate home under
usr.bin/openssl.

ok deraadt@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: s_time.c,v 1.35 2014/08/24 16:07:29 bcook Exp $ */
a215 2
			const char *errstr;

d376 1
a376 1
			int ret = snprintf(buf, sizeof buf,
d378 1
a378 1
			if (ret == -1 || ret >= sizeof buf) {
d436 1
a436 1
		int ret = snprintf(buf, sizeof buf,
d438 1
a438 1
		if (ret == -1 || ret >= sizeof buf) {
d469 1
a469 1
			int ret = snprintf(buf, sizeof buf,
d471 1
a471 1
			if (ret == -1 || ret >= sizeof buf) {
@

